 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 1 - 03/11/2024 09:54:36 PM


       1/       0 :                     ; ===========================================================================
       2/       0 :                     ; NIKONA MD 16-BIT/32-BIT SDK
       3/       0 :                     ; by GenesisFan64 2023-2024
       4/       0 :                     ;
       5/       0 :                     ; For developing games on the Genesis-family of systems:
       6/       0 :                     ; Genesis only, Sega CD, Sega 32X, Sega CD32X and Sega Pico
       7/       0 :                     ;
       8/       0 :                     ; Assemble with a modified AS Macro Assembler by flamewing
       9/       0 :                     ; and a custom version of p2bin:
      10/       0 :                     ;
      11/       0 :                     ; asl main.asm -i "." -olist ROM_list.lst -q -xx -A -L -D (flags=value)
      12/       0 :                     ; p2bin -p=00 main.p ROM.bin
      13/       0 :                     ;
      14/       0 :                     ; ASSEMBLER FLAGS:
      15/       0 :                     ; MCD,MARS,MARSCD,PICO,CDREGION,EMU
      16/       0 :                     ;
      17/       0 :                     ; * System targets *
      18/       0 :                     ;    MCD - Sega CD
      19/       0 :                     ;   MARS - Sega 32X
      20/       0 :                     ; MARSCD - Sega CD32X
      21/       0 :                     ;   PICO - Sega Pico
      22/       0 :                     ; The code builds to stock Genesis by default.
      23/       0 :                     ;
      24/       0 :                     ; ONLY enable ONE TARGET at the time (as 1)
      25/       0 :                     ; and set the others to 0
      26/       0 :                     ;
      27/       0 :                     ; CDREGION - SEGACD/CD32X ONLY: Set ROM region
      28/       0 :                     ;            0=Japan 1=USA 2=Europe
      29/       0 :                     ;      EMU - EMULATOR PATCHES TO ROMS
      30/       0 :                     ;            0=Runs on hardware only, 1=Run on emulation
      31/       0 :                     ;
      32/       0 :                     ; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣴⣶⡿⠿⠿⠿⣶⣦⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀
      33/       0 :                     ; ⠀⠀⠀⠀⠀⠀⢀⣠⣶⢟⣿⠟⠁⢰⢋⣽⡆⠈⠙⣿⡿⣶⣄⡀⠀⠀⠀⠀⠀⠀
      34/       0 :                     ; ⠀⠀⠀⠀⣠⣴⠟⠋⢠⣾⠋⠀⣀⠘⠿⠿⠃⣀⠀⠈⣿⡄⠙⠻⣦⣄⠀⠀⠀⠀
      35/       0 :                     ; ⠀⢀⣴⡿⠋⠁⠀⢀⣼⠏⠺⠛⠛⠻⠂⠐⠟⠛⠛⠗⠘⣷⡀⠀⠈⠙⢿⣦⡀⠀
      36/       0 :                     ; ⣴⡟⢁⣀⣠⣤⡾⢿⡟⠀⠀⠀⠘⢷⠾⠷⡾⠃⠀⠀⠀⢻⡿⢷⣤⣄⣀⡈⢻⣦
      37/       0 :                     ; ⠙⠛⠛⠋⠉⠁⠀⢸⡇⠀⠀⢠⣄⠀⠀⠀⠀⣠⡄⠀⠀⢸⡇⠀⠈⠉⠙⠛⠛⠋
      38/       0 :                     ; ⠀⠀⠀⠀⠀⠀⠀⢸⡇⢾⣦⣀⣹⡧⠀⠀⢼⣏⣀⣴⡷⢸⡇⠀⠀⠀⠀⠀⠀⠀
      39/       0 :                     ; ⠀⠀⠀⠀⠀⠀⠀⠸⣧⡀⠈⠛⠛⠁⠀⠀⠈⠛⠛⠁⢀⣼⠇⠀⠀⠀⠀⠀⠀⠀
      40/       0 :                     ; ⠀⠀⠀⠀⠀⠀⠀⢀⣘⣿⣶⣤⣀⣀⣀⣀⣀⣀⣤⣶⣿⣃⠀⠀⠀⠀⠀⠀⠀⠀
      41/       0 :                     ; ⠀⠀⠀⠀⠀⣠⡶⠟⠋⢉⣀⣽⠿⠉⠉⠉⠹⢿⣍⣈⠉⠛⠷⣦⡀⠀⠀⠀⠀⠀
      42/       0 :                     ; ⠀⠀⠀⠀⢾⣯⣤⣴⡾⠟⠋⠁⠀⠀⠀⠀⠀⠀⠉⠛⠷⣶⣤⣬⣿⠀⠀⠀⠀⠀
      43/       0 :                     ; ⠀⠀⠀⠀⠀⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠁⠀⠀⠀⠀⠀
      44/       0 :                     ; ===========================================================================
      45/       0 :                     
      46/       0 :                     ; ====================================================================
      47/       0 :                     ; ----------------------------------------------------------------
      48/       0 :                     ; USER SETTINGS
      49/       0 :                     ; ----------------------------------------------------------------
      50/       0 :                     
      51/       0 :                     ; --------------------------------------------------------
      52/       0 :                     ; 68000 RAM SIZES (SegaCD: MAIN-CPU)
      53/       0 :                     ;
      54/       0 :                     ; MAX_SysCode, MAX_UserCode are only used in
      55/       0 :                     ; Sega CD, 32X and CD32X.
      56/       0 :                     ;
      57/       0 :                     ; RESERVED RAM ADDRESSES:
      58/       0 :                     ; $FFFB00-$FFFD00 | Stack area a7
      59/       0 :                     ; $FFFD00-$FFFDFF | RESERVED for the Sega CD Vector
      60/       0 :                     ;                   jumps but free to use if running
 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 2 - 03/11/2024 09:54:36 PM


      61/       0 :                     ;                   on cartridge. (Genesis,32X,Pico.)
      62/       0 :                     ; $FFFE00-$FFFEFF | RESERVED for Sega CD for the BIOS
      63/       0 :                     ;                   BUT this might free to use after
      64/       0 :                     ;                   booting, free to use on cartridge.
      65/       0 :                     ;                   ** NEEDS testing **
      66/       0 :                     ; $FFFF00-$FFFFFF | RESERVED for the Sound Driver
      67/       0 :                     ;                   This area will posibilly be used
      68/       0 :                     ;                   for the 68k version of GEMA for
      69/       0 :                     ;                   the Pico
      70/       0 :                     ;                   But currently the Z80 set a flag
      71/       0 :                     ;                   for a workaround for reading data
      72/       0 :                     ;                   from the RAM area $FF0000
      73/       0 :                     ; --------------------------------------------------------
      74/       0 :                     
      75/       0 : =$2000               MAX_SysCode	equ $2000	; ** CD/32X/CD32X ONLY ** Common routines
      76/       0 : =$8000               MAX_UserCode	equ $8000	; ** CD/32X/CD32X ONLY ** Current screen code and small data
      77/       0 : =$1800               MAX_ScrnBuff	equ $1800	; Current screen's RAM buffer
      78/       0 : =$2000               MAX_MdVideo	equ $2000	; Video cache'd RAM for visuals, registers, etc.
      79/       0 : =$600                MAX_MdSystem	equ $0600	; Internal lib stuff and a safe copy of save data for reading/writing
      80/       0 : =$C00                MAX_MdOther	equ $0C00	; Add-on stuff
      81/       0 :                     
      82/       0 :                     ; ====================================================================
      83/       0 :                     
      84/       0 :                     		org 0
      85/       0 :                     		cpu 		68000		; Starting CPU is 68000
      86/       0 :                     		padding		off		; Dont pad dc.b
      87/       0 :                     		listing 	purecode	; Want listing file
      88/       0 :                     		supmode 	on 		; Supervisor mode (68K)
      89/       0 :                     		dottedstructs	off
      90/       0 :                     		page 		0
      91/       0 :                     
      92/       0 :                     ; ====================================================================
      93/       0 :                     ; ----------------------------------------------------------------
      94/       0 :                     ; Includes
      95/       0 :                     ; ----------------------------------------------------------------
      96/       0 :                     
      97/       0 :                     		include	"macros.asm"		; Assembler macros
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; -------------------------------------------------------------------
(1)    3/       0 :                     ; MACROS section
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; THIS MUST BE INCLUDED AT START OF THE CODE.
(1)    6/       0 :                     ; -------------------------------------------------------------------
(1)    7/       0 :                     
(1)    8/       0 :                     ; ====================================================================
(1)    9/       0 :                     ; ------------------------------------------------------------
(1)   10/       0 :                     ; AS Functions
(1)   11/       0 :                     ; ------------------------------------------------------------
(1)   12/       0 :                     
(1)   13/       0 :                     locate		function a,b,c,(b&$FF)|(a<<8&$FF00)|(c<<16&$FF0000)	; VDP locate: X pos|Y pos|Layer for some video
(1)   14/       0 :                     cell_vram	function a,(a<<5)					; VRAM position in CELLs 8x8
(1)   15/       0 :                     cell_size	function a,(a>>5)					; Graphics size in CELLs 8x8
(1)   16/       0 :                     map_size	function l,r,(((l-1)/8)<<16&$FFFF0000|((r-1)/8)&$FFFF)	; Full w/h sizes as CELLs 8x8
(1)   17/       0 :                     
(1)   18/       0 :                     ; ====================================================================
(1)   19/       0 :                     ; ------------------------------------------------------------
(1)   20/       0 :                     ; Macros
(1)   21/       0 :                     ; ------------------------------------------------------------
(1)   22/       0 :                     
(1)   23/       0 :                     ; --------------------------------------------
(1)   24/       0 :                     ; Custom struct function
(1)   25/       0 :                     ;
(1)   26/       0 :                     ; (Doesn't work on Z80)
(1)   27/       0 :                     ; --------------------------------------------
(1)   28/       0 :                     
(1)   29/       0 :                     strct		macro thisinput			; Reserve memory address
(1)   30/       0 :                     GLBL_LASTPC	set *
(1)   31/       0 :                     		dephase
(1)   32/       0 :                     		phase thisinput
(1)   33/       0 :                     GLBL_LASTORG	set *
(1)   34/       0 :                     		endm
(1)   35/       0 :                     
(1)   36/       0 :                     ; --------------------------------------------
(1)   37/       0 :                     ; Finish struct
(1)   38/       0 :                     ; --------------------------------------------
(1)   39/       0 :                     
(1)   40/       0 :                     endstrct	macro				; Then finish the custom struct.
(1)   41/       0 :                     		org GLBL_LASTORG
(1)   42/       0 :                     		phase GLBL_LASTPC
(1)   43/       0 :                     		endm
(1)   44/       0 :                     
(1)   45/       0 :                     ; --------------------------------------------
(1)   46/       0 :                     ; Report memory usage
(1)   47/       0 :                     ; --------------------------------------------
(1)   48/       0 :                     
(1)   49/       0 :                     report		macro text,dis,dat
(1)   50/       0 :                     	if MOMPASS == 2
(1)   51/       0 :                     		if dat == -1
(1)   52/       0 :                     			message text+": \{(dis)&$FFFFFF}"
(1)   53/       0 :                     		else
(1)   54/       0 :                     			if dis > dat
(1)   55/       0 :                     				warning "RAN OUT OF "+text+" SPACE (\{(dis)&$FFFFFF} of \{(dat)&$FFFFFF})"
(1)   56/       0 :                     			else
(1)   57/       0 :                     				message text+" uses \{(dis)&$FFFFFF} of \{(dat)&$FFFFFF}"
(1)   58/       0 :                     			endif
(1)   59/       0 :                     		endif
(1)   60/       0 :                     	endif
(1)   61/       0 :                     		endm
(1)   62/       0 :                     
(1)   63/       0 :                     ; --------------------------------------------
(1)   64/       0 :                     ; Same as report but only show on error
(1)   65/       0 :                     ; --------------------------------------------
(1)   66/       0 :                     
(1)   67/       0 :                     erreport	macro text,dis,dat
(1)   68/       0 :                     	if MOMPASS == 2
(1)   69/       0 :                     		if dat == -1
(1)   70/       0 :                     			message text+": \{(dis)&$FFFFFF}"
(1)   71/       0 :                     		else
(1)   72/       0 :                     			if dis > dat
(1)   73/       0 :                     				error "RAN OUT OF "+text+" (\{(dis)&$FFFFFF} of \{(dat)&$FFFFFF})"
(1)   74/       0 :                     ; 			else
(1)   75/       0 :                     ; 				message text+" uses \{(dis)&$FFFFFF} of \{(dat)&$FFFFFF}"
(1)   76/       0 :                     			endif
(1)   77/       0 :                     		endif
(1)   78/       0 :                     	endif
(1)   79/       0 :                     		endm
(1)   80/       0 :                     
(1)   81/       0 :                     ; --------------------------------------------
(1)   82/       0 :                     ; ZERO Fill padding
(1)   83/       0 :                     ; --------------------------------------------
(1)   84/       0 :                     
(1)   85/       0 :                     rompad		macro address			; Zero fill
(1)   86/       0 :                     diff := address - *
(1)   87/       0 :                     		if diff < 0
(1)   88/       0 :                     			error "too much stuff before org $\{address} ($\{(-diff)} bytes)"
(1)   89/       0 :                     		else
(1)   90/       0 :                     			while diff > 1024
(1)   91/       0 :                     				; AS can only generate 1 kb of code on a single line
(1)   92/       0 :                     				dc.b [1024]0
(1)   93/       0 :                     diff := diff - 1024
(1)   94/       0 :                     			endm
(1)   95/       0 :                     			dc.b [diff]0
(1)   96/       0 :                     		endif
(1)   97/       0 :                     	endm
(1)   98/       0 :                     
(1)   99/       0 :                     ; ====================================================================
(1)  100/       0 :                     ; ------------------------------------------------------------
(1)  101/       0 :                     ; ISO filesystem macros
(1)  102/       0 :                     ; ------------------------------------------------------------
(1)  103/       0 :                     
(1)  104/       0 :                     ; Set a ISO file
(1)  105/       0 :                     ; NOTE: a valid ISO head is required from $8000 to $B7FF
(1)  106/       0 :                     ; Info data is incorrect but it will load just fine.
(1)  107/       0 :                     
(1)  108/       0 :                     iso_setfs	macro type,start,end
(1)  109/       0 :                     .fstrt:
(1)  110/       0 :                     		dc.b .fend-.fstrt				; Block size
(1)  111/       0 :                     		dc.b 0						; Zero
(1)  112/       0 :                     		dc.b (start>>11&$FF),(start>>19&$FF)		; Start sector, little endian
(1)  113/       0 :                     		dc.b (start>>27&$FF),(start>>35&$FF)
(1)  114/       0 :                     		dc.l start>>11					; Start sector, big endian
(1)  115/       0 :                     		dc.b ((end-start)&$FF),((end-start)>>8&$FF)	; Filesize, little endian
(1)  116/       0 :                     		dc.b ((end-start)>>16&$FF),((end-start)>>24&$FF)
(1)  117/       0 :                     		dc.l end-start					; Filesize, big endian
(1)  118/       0 :                     		dc.b (2024-1900)+1				; Year
(1)  119/       0 :                     		dc.b 0,0,0,0,0,0				; **never done**
(1)  120/       0 :                     		dc.b 2						; File flags
(1)  121/       0 :                     		dc.b 0,0
(1)  122/       0 :                     		dc.b 1,0					; Volume sequence number, little
(1)  123/       0 :                     		dc.b 0,1					; Volume sequence number, big
(1)  124/       0 :                     		dc.b 1,type
(1)  125/       0 :                     .fend:
(1)  126/       0 :                     		endm
(1)  127/       0 :                     
(1)  128/       0 :                     iso_file	macro filename,start,end
(1)  129/       0 :                     .fstrt:		dc.b .fend-.fstrt				; Block size
(1)  130/       0 :                     		dc.b 0						; zero
(1)  131/       0 :                     		dc.b (start>>11&$FF),(start>>19&$FF)		; Start sector, little
(1)  132/       0 :                     		dc.b (start>>27&$FF),(start>>35&$FF)
(1)  133/       0 :                     		dc.l start>>11					; Start sector, big
(1)  134/       0 :                     		dc.b ((end-start)&$FF),((end-start)>>8&$FF)	; Filesize, little
(1)  135/       0 :                     		dc.b ((end-start)>>16&$FF),((end-start)>>24&$FF)
(1)  136/       0 :                     		dc.l end-start					; Filesize, big
(1)  137/       0 :                     		dc.b (2024-1900)+1				; Year
(1)  138/       0 :                     		dc.b 0,0,0,0,0,0				; TODO
(1)  139/       0 :                     		dc.b 0						; File flags
(1)  140/       0 :                     		dc.b 0,0
(1)  141/       0 :                     		dc.b 1,0					; Volume sequence number, little
(1)  142/       0 :                     		dc.b 0,1					; Volume sequence number, big
(1)  143/       0 :                     		dc.b .flend-.flen
(1)  144/       0 :                     .flen:		dc.b filename,";1"
(1)  145/       0 :                     .flend:		dc.b 0
(1)  146/       0 :                     .fend:
(1)  147/       0 :                     		endm
(1)  148/       0 :                     
(1)  149/       0 :                     ; ====================================================================
(1)  150/       0 :                     ; ------------------------------------------------------------
(1)  151/       0 :                     ; Nikona macros
(1)  152/       0 :                     ; ------------------------------------------------------------
(1)  153/       0 :                     
(1)  154/       0 :                     ; --------------------------------------------
(1)  155/       0 :                     ; Screen mode code
(1)  156/       0 :                     ; --------------------------------------------
(1)  157/       0 :                     
(1)  158/       0 :                     screen_code macro lblstart,lblend,path
(1)  159/       0 :                     	if MCD|MARSCD
(1)  160/       0 :                     		align $800		; SCD/CD32X sector align
(1)  161/       0 :                     	elseif MARS
(1)  162/       0 :                     		align 4
(1)  163/       0 :                     		phase $880000+*		; 32X ROM-area
(1)  164/       0 :                     	endif
(1)  165/       0 :                     lblstart label *
(1)  166/       0 :                     	if MARS
(1)  167/       0 :                     		dephase
(1)  168/       0 :                     	endif
(1)  169/       0 :                     
(1)  170/       0 :                     mctopscrn:
(1)  171/       0 :                     	if MARS|MCD|MARSCD
(1)  172/       0 :                     		phase RAM_UserCode	; SCD/32X/CD32X relocate to RAM area
(1)  173/       0 :                     	endif
(1)  174/       0 :                     mcscrn_s:
(1)  175/       0 :                     	include path;"game/screen_0/code.asm"
(1)  176/       0 :                     mcscrn_e:
(1)  177/       0 :                     	if MARS
(1)  178/       0 :                     		dephase	; dephase RAM section
(1)  179/       0 :                     		dephase ; dephase $880000+ section
(1)  180/       0 :                     	elseif MCD|MARSCD
(1)  181/       0 :                     		dephase
(1)  182/       0 :                     		phase mctopscrn+(mcscrn_e-RAM_UserCode)
(1)  183/       0 :                     		align $800
(1)  184/       0 :                     	endif
(1)  185/       0 :                     ; Md_Screen00_e:
(1)  186/       0 :                     lblend label *
(1)  187/       0 :                     	if MCD|MARS|MARSCD
(1)  188/       0 :                     		report "THIS SCREEN's code",mcscrn_e-RAM_UserCode,MAX_UserCode
(1)  189/       0 :                     	else
(1)  190/       0 :                     		if lblend-lblstart > MAX_UserCode
(1)  191/       0 :                     			warning "THIS SCREEN'S CODE IS TOO LARGE FOR SCD, 32X and CD32X"
(1)  192/       0 :                     		endif
(1)  193/       0 :                     	endif
(1)  194/       0 :                     	endm
(1)  195/       0 :                     
(1)  196/       0 :                     ; --------------------------------------------
(1)  197/       0 :                     ; 68K data bank
(1)  198/       0 :                     ; --------------------------------------------
(1)  199/       0 :                     
(1)  200/       0 :                     data_bkset macro startlbl,except
(1)  201/       0 :                     	if MCD|MARSCD
(1)  202/       0 :                     		align $800
(1)  203/       0 :                     	elseif MARS
(1)  204/       0 :                     		align 4
(1)  205/       0 :                     		if except==-1
(1)  206/       0 :                     			phase $900000+*	; First 32X data bank
(1)  207/       0 :                     		else
(1)  208/       0 :                     			phase $900000
(1)  209/       0 :                     		endif
(1)  210/       0 :                     	endif
(1)  211/       0 :                     ; MCD_DBANK0:
(1)  212/       0 :                     startlbl label *
(1)  213/       0 :                     	if MCD|MARSCD
(1)  214/       0 :                     		phase sysmcd_wram
(1)  215/       0 :                     	elseif MARS
(1)  216/       0 :                     ; 		dephase
(1)  217/       0 :                     	endif
(1)  218/       0 :                     	endm
(1)  219/       0 :                     
(1)  220/       0 :                     data_bkend macro startlbl,endlbl,thissize
(1)  221/       0 :                     	if MARS
(1)  222/       0 :                     		dephase
(1)  223/       0 :                     		report "THIS 68K DATA BANK at $900000",thissize,$100000
(1)  224/       0 :                     	elseif MCD|MARSCD
(1)  225/       0 :                     		dephase
(1)  226/       0 :                     		align $800
(1)  227/       0 :                     endlbl label *	; <-- CD/CD32X ONLY
(1)  228/       0 :                     		report "THIS 68K DATA BANK at WORD-RAM",thissize,$40000
(1)  229/       0 :                     	endif
(1)  230/       0 :                     
(1)  231/       0 :                     	if MARS
(1)  232/       0 :                     		if thissize > $100000
(1)  233/       0 :                     			warning "THIS BANK SIZE IS TOO LARGE FOR A 32X BANK"
(1)  234/       0 :                     		endif
(1)  235/       0 :                     	endif
(1)  236/       0 :                     
(1)  237/       0 :                     	if thissize > $40000
(1)  238/       0 :                     		warning "THIS BANK SIZE IS TOO LARGE FOR SCD and CD32X (WORD-RAM)"
(1)  239/       0 :                     	endif
(1)  240/       0 :                     	endm
(1)  241/       0 :                     
(1)  242/       0 :                     ; --------------------------------------------
(1)  243/       0 :                     ; 32X ONLY
(1)  244/       0 :                     ; --------------------------------------------
(1)  245/       0 :                     
(1)  246/       0 :                     sdram_bkset macro thislbl,endlbl
(1)  247/       0 :                     	if MCD|MARSCD
(1)  248/       0 :                     		align $800
(1)  249/       0 :                     	elseif MARS
(1)  250/       0 :                     		align 4
(1)  251/       0 :                     		phase $880000+*
(1)  252/       0 :                     	endif
(1)  253/       0 :                     ; MARSDATA_DEFAULT:
(1)  254/       0 :                     thislbl label *
(1)  255/       0 :                     	if MARS
(1)  256/       0 :                     		dephase
(1)  257/       0 :                     	endif
(1)  258/       0 :                     	if MARS|MARSCD
(1)  259/       0 :                     		dc.l endlbl-thislbl
(1)  260/       0 :                     		phase SH2_USER_DATA
(1)  261/       0 :                     	endif
(1)  262/       0 :                     	endm
(1)  263/       0 :                     
(1)  264/       0 :                     ; --------------------------------------------
(1)  265/       0 :                     
(1)  266/       0 :                     sdram_bkend macro thislbl,endlbl
(1)  267/       0 :                     	if MARS|MARSCD
(1)  268/       0 :                     		dephase
(1)  269/       0 :                     		align 8	; <-- DREQ alignment
(1)  270/       0 :                     	endif
(1)  271/       0 :                     	if MCD|MARSCD
(1)  272/       0 :                     endlbl label *
(1)  273/       0 :                     		align $800	; <-- AS failing
(1)  274/       0 :                     	elseif MARS
(1)  275/       0 :                     		phase $880000+*
(1)  276/       0 :                     endlbl label *
(1)  277/       0 :                     		dephase
(1)  278/       0 :                     	endif
(1)  279/       0 :                     
(1)  280/       0 :                     	if MARS|MARSCD
(1)  281/       0 :                     		report "SH2 SDRAM DATA: thislbl",endlbl-thislbl,(CS3|$40000)-SH2_USER_DATA
(1)  282/       0 :                     	endif
(1)  283/       0 :                     	endm
(1)  284/       0 :                     
(1)  285/       0 :                     ; --------------------------------------------
(1)  286/       0 :                     ; Set data bank(s) for the current screen
(1)  287/       0 :                     ;
(1)  288/       0 :                     ; mcdpos:
(1)  289/       0 :                     ; 	dc.b "FILENAME.BIN",0
(1)  290/       0 :                     ; 	align 2
(1)  291/       0 :                     ;
(1)  292/       0 :                     ; marspos:
(1)  293/       0 :                     ; 	dc.l MARSDATA_DEFAULT	; 32X Cartridge point (UNUSED on CD32X)
(1)  294/       0 :                     ; 	dc.b "MARSD_00.BIN",0	; CD32X Filename (UNUSED on 32X Cartridge)
(1)  295/       0 :                     ; 	align 2
(1)  296/       0 :                     ; --------------------------------------------
(1)  297/       0 :                     
(1)  298/       0 :                     set_dbanks macro mcdpos,marspos
(1)  299/       0 :                     	if MARS|MARSCD
(1)  300/       0 :                     		lea	marspos(pc),a0		; 32X/CD32X: SH2 side data
(1)  301/       0 :                     		bsr	System_MarsDataPack
(1)  302/       0 :                     	endif
(1)  303/       0 :                     	if MCD|MARSCD
(1)  304/       0 :                     		bsr	System_McdSubWait
(1)  305/       0 :                     		lea	mcdpos(pc),a0		; CD/CD32X: Genesis data
(1)  306/       0 :                     		bsr	System_McdTrnsfr_WRAM
(1)  307/       0 :                     	endif
(1)  308/       0 :                     	endm
(1)  309/       0 :                     
(1)  310/       0 :                     ; --------------------------------------------
(1)  311/       0 :                     ; VDP color debug
(1)  312/       0 :                     ; --------------------------------------------
(1)  313/       0 :                     
(1)  314/       0 :                     vdp_showme	macro color
(1)  315/       0 :                     		move.l	#$C0000000,(vdp_ctrl).l
(1)  316/       0 :                     		move.w	#color,(vdp_data).l
(1)  317/       0 :                     		endm
(1)  318/       0 :                     
      98/       0 :                     		include "game/globals.asm"	; USER variables
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; GLOBAL RAM for ALL screen modes
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; Score, Lives, Level number, etc.
(1)    6/       0 :                     ; ----------------------------------------------------------------
(1)    7/       0 :                     
(1)    8/       0 : (MACRO)              			strct RAM_MdGlobal
(1)    8/       0 : =$0                  GLBL_LASTPC     set *
(1)    8/       0 :                                     dephase
(1)    8/FFFFFFFFFFFFEA04 :                                     phase RAM_MDGLOBAL
(1)    8/FFFFFFFFFFFFEA04 : =$FFFFFFFFFFFFEA04   GLBL_LASTORG    set *
(1)    9/FFFFFFFFFFFFEA04 :                     
(1)   10/FFFFFFFFFFFFEA04 :                     ; ------------------------------------------------------------
(1)   11/FFFFFFFFFFFFEA04 :                     ; Examples:
(1)   12/FFFFFFFFFFFFEA04 :                     ;
(1)   13/FFFFFFFFFFFFEA04 :                     ; RAM_Glbl_ExmpL ds.l 8 ; reserve 4 LONGS ($20 bytes)
(1)   14/FFFFFFFFFFFFEA04 :                     ; RAM_Glbl_ExmpW ds.w 6 ; reserve 3 WORDS ($0C bytes)
(1)   15/FFFFFFFFFFFFEA04 :                     ; RAM_Glbl_ExmpB ds.b 5 ; reserve 5 bytes
(1)   16/FFFFFFFFFFFFEA04 :                     ;
(1)   17/FFFFFFFFFFFFEA04 :                     ; Careful with bytes, everything needs to be word-algined
(1)   18/FFFFFFFFFFFFEA04 :                     ; or your will get an ADDRESS ERROR.
(1)   19/FFFFFFFFFFFFEA04 :                     ; ------------------------------------------------------------
(1)   20/FFFFFFFFFFFFEA04 :                     
(1)   21/FFFFFFFFFFFFEA04 :                     RAM_Glbl_Filler		ds.l 1		; 1 long (4 bytes)
(1)   22/FFFFFFFFFFFFEA08 :                     
(1)   23/FFFFFFFFFFFFEA08 :                     
(1)   24/FFFFFFFFFFFFEA08 :                     ; ------------------------------------------------------------
(1)   25/FFFFFFFFFFFFEA08 :                     sizeof_MdGlbl		ds.l 0		; size label
(1)   26/FFFFFFFFFFFFEA0C : (MACRO)              			endstrct
(1)   26/FFFFFFFFFFFFEA04 :                                     org GLBL_LASTORG
(1)   26/       0 :                                     phase GLBL_LASTPC
(1)   27/       0 :                     
      99/       0 :                     		include	"system/mcd/map.asm"	; Sega CD hardware map (shared with Sub-CPU)
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; SEGA CD SUB-CPU MAP
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; ------------------------------------------------
(1)    7/       0 :                     ; Register area
(1)    8/       0 :                     ;
(1)    9/       0 :                     ; MAIN-CPU: $A12000 (sysmcd_reg)
(1)   10/       0 :                     ; SUB-CPU:  $FF8000 (scpu_reg)
(1)   11/       0 :                     ; ------------------------------------------------
(1)   12/       0 :                     
(1)   13/       0 :                     ; -------------
(1)   14/       0 :                     ; bits
(1)   15/       0 :                     ; -------------
(1)   16/       0 :                     
(1)   17/       0 : =$2                  bitWRamMode	equ 2		;2M | 1M
(1)   18/       0 :                     
(1)   19/       0 :                     ; -------------
(1)   20/       0 :                     ; Registers
(1)   21/       0 :                     ; -------------
(1)   22/       0 :                     
(1)   23/       0 : =$3                  mcd_memory	equ $03
(1)   24/       0 : =$6                  mcd_hint	equ $06		; [W] HBlank RAM redirection-jump (MAIN CPU ONLY)
(1)   25/       0 : =$E                  mcd_comm_m	equ $0E		; [B] Comm port MAIN R/W | SUB READ ONLY
(1)   26/       0 : =$F                  mcd_comm_s	equ $0F		; [B] Comm port SUB R/W  | MAIN READ ONLY
(1)   27/       0 : =$10                 mcd_dcomm_m	equ $10		; [S: $0E] Communication MAIN
(1)   28/       0 : =$20                 mcd_dcomm_s	equ $20		; [S: $0E] Communication SUB
(1)   29/       0 : =$32                 mcd_intmask	equ $32		;
(1)   30/       0 :                     
(1)   31/       0 :                     ; ====================================================================
(1)   32/       0 :                     
     100/       0 :                     		include	"system/mars/map.asm"	; 32X hardware map (shared with SH2)
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; -------------------------------------------------------------------
(1)    3/       0 :                     ; SH2 MAP
(1)    4/       0 :                     ; -------------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; ------------------------------------------------------------
(1)    7/       0 :                     ; SH2 SIDE MAP
(1)    8/       0 :                     ; ------------------------------------------------------------
(1)    9/       0 :                     
(1)   10/       0 : =$0                  CS0		equ	$00000000	; Boot ROM & System registers
(1)   11/       0 : =$2000000            CS1		equ	$02000000	; ROM data all 4MB, Gone if RV=1
(1)   12/       0 : =$4000000            CS2		equ	$04000000	; Framebuffer area
(1)   13/       0 : =$6000000            CS3		equ	$06000000	; SDRAM
(1)   14/       0 : =$20000000           TH		equ	$20000000	; OR value for CacheThru
(1)   15/       0 : =$20004000           _sysreg		equ	$00004000|TH	; MARS System registers
(1)   16/       0 : =$20004100           _vdpreg		equ	$00004100|TH	; SuperVDP registers
(1)   17/       0 : =$20004200           _palette	equ	$00004200|TH	; Palette RAM for Pixel-Packed or RLE mode
(1)   18/       0 : =$24000000           _framebuffer:	equ	CS2|TH		; Framebuffer: First 240 words are the linetable
(1)   19/       0 : =$24020000           _overwrite:	equ	CS2|TH+$20000	; Overwrite: $00 writes are ignored
(1)   20/       0 :                     
(1)   21/       0 :                     ; ------------------------------------------------------------
(1)   22/       0 :                     ; Variables
(1)   23/       0 :                     ; ------------------------------------------------------------
(1)   24/       0 :                     
(1)   25/       0 :                     ; ------------------------------------------------
(1)   26/       0 :                     ; System
(1)   27/       0 :                     ; ------------------------------------------------
(1)   28/       0 :                     
(1)   29/       0 :                     ; _sysreg
(1)   30/       0 : =$0                  adapter		equ	$00		; adapter control register (Read as WORD)
(1)   31/       0 : =$1                  intmask		equ	$01		; SH2 CPU ONLY: interrupts mask
(1)   32/       0 : =$3                  standby		equ	$03		; CMD interrupt request bit by MD side (slave|master) (BYTE)
(1)   33/       0 : =$5                  hcount		equ	$05		; H Counter (BYTE)
(1)   34/       0 : =$6                  dreqctl		equ	$06		; DREQ control (WORD)
(1)   35/       0 : =$8                  dreqsource	equ	$08		; DREQ source address
(1)   36/       0 : =$C                  dreqdest	equ	$0C		; DREQ destination address
(1)   37/       0 : =$10                 dreqlen		equ	$10		; DREQ length
(1)   38/       0 : =$12                 dreqfifo	equ	$12		; DREQ FIFO
(1)   39/       0 : =$14                 vresintclr	equ	$14		; VRES interrupt clear
(1)   40/       0 : =$16                 vintclr		equ	$16		; V interrupt clear
(1)   41/       0 : =$18                 hintclr		equ	$18		; H interrupt clear
(1)   42/       0 : =$1A                 cmdintclr	equ	$1a		; CMD interrupt clear
(1)   43/       0 : =$1C                 pwmintclr	equ	$1C		; PWM interrupt clear
(1)   44/       0 : =$20                 comm0		equ	$20		; Communication ports ***
(1)   45/       0 : =$21                 comm1		equ	$21		; ALL CPUs can see this ports: including Z80
(1)   46/       0 : =$22                 comm2		equ	$22		; only be careful with the read/write directions.
(1)   47/       0 : =$23                 comm3		equ	$23		; ODD addresses (1,3,5...) are BYTE-read only.
(1)   48/       0 : =$24                 comm4		equ	$24		; EVEN addresses (0,2,4...) can be read as WORDs
(1)   49/       0 : =$25                 comm5		equ	$25		; Writing LONG addreses are possible depending
(1)   50/       0 : =$26                 comm6		equ	$26		; of the CPU's aligment limitations.
(1)   51/       0 : =$27                 comm7		equ	$27		;
(1)   52/       0 : =$28                 comm8		equ	$28		;
(1)   53/       0 : =$29                 comm9		equ	$29		;
(1)   54/       0 : =$2A                 comm10		equ	$2A		;
(1)   55/       0 : =$2B                 comm11		equ	$2B		;
(1)   56/       0 : =$2C                 comm12		equ	$2C		;
(1)   57/       0 : =$2D                 comm13		equ	$2D		;
(1)   58/       0 : =$2E                 comm14		equ	$2E		;
(1)   59/       0 : =$2F                 comm15		equ	$2F		;
(1)   60/       0 : =$30                 timerctl	equ	$30		; PWM Timer Control
(1)   61/       0 : =$31                 pwmctl		equ	$31		; PWM Control
(1)   62/       0 : =$32                 cycle		equ	$32		; PWM Cycle
(1)   63/       0 : =$34                 lchwidth	equ	$34		; PWM L ch Width
(1)   64/       0 : =$36                 rchwidth	equ	$36		; PWM R ch Width
(1)   65/       0 : =$38                 monowidth	equ	$38		; PWM Monaural Width
(1)   66/       0 :                     
(1)   67/       0 :                     ; _sysreg
(1)   68/       0 :                     ; adapter
(1)   69/       0 : =$1                  CART		equ	%00000001	; CD or Cartridge
(1)   70/       0 : =$2                  ADEN		equ	%00000010	; MARS Enabled: No/Yes
(1)   71/       0 : =$80                 FM		equ	%10000000	; SuperVDP permission: MD or SH
(1)   72/       0 :                     ; framectl
(1)   73/       0 : =$1                  FS		equ	%00000001	; Current framebuffer DRAM pixel data
(1)   74/       0 : =$2                  FEN		equ	%00000010	; Can write to Framebuffer: Yes/No
(1)   75/       0 :                     ; vdpsts
(1)   76/       0 : =$80                 VBLK		equ	%10000000	; VBlank bit
(1)   77/       0 : =$40                 HBLK		equ	%01000000	; HBlank bit
(1)   78/       0 : =$20                 PEN		equ	%00100000	; Can write to Palette: Yes/No
(1)   79/       0 :                     ; intmask
(1)   80/       0 : =$8                  VIRQ_ON		equ	$08		; IRQ masks for IRQ mask register
(1)   81/       0 : =$4                  HIRQ_ON		equ	$04
(1)   82/       0 : =$2                  CMDIRQ_ON	equ	$02
(1)   83/       0 : =$1                  PWMIRQ_ON	equ	$01
(1)   84/       0 :                     
(1)   85/       0 :                     ; _vdpreg
(1)   86/       0 : =$0                  tvmode		equ	$00		; TV mode
(1)   87/       0 : =$1                  bitmapmd	equ	$01		; Bitmap mode
(1)   88/       0 : =$2                  shift		equ	$02		; Lineshift bit
(1)   89/       0 : =$4                  filllength	equ	$04		; Auto Fill Length register
(1)   90/       0 : =$6                  fillstart	equ	$06		; Auto Fill Start Address register
(1)   91/       0 : =$8                  filldata	equ	$08		; Auto Fill Data register
(1)   92/       0 : =$A                  vdpsts		equ	$0A		; VDP Status register
(1)   93/       0 : =$B                  framectl	equ	$0B		; Frame Buffer Control register
(1)   94/       0 :                     
(1)   95/       0 :                     ; ------------------------------------------------------------
(1)   96/       0 :                     ; SH2 Internal registers, for each CPU
(1)   97/       0 :                     ; ------------------------------------------------------------
(1)   98/       0 :                     
(1)   99/       0 :                     ; DMA Channel 0: DREQ
(1)  100/       0 :                     ; DMA Channel 1: PWM
(1)  101/       0 :                     
(1)  102/       0 : =$FFFFFE00           _SERIAL		equ	$FFFFFE00	; Serial Control
(1)  103/       0 : =$FFFFFE10           _FRT		equ	$FFFFFE10	; Free run timer
(1)  104/       0 : =$0                  _TIER		equ	$00		; Timer interrupt enable register
(1)  105/       0 : =$1                  _TCSR		equ	$01		; Timer control & status register
(1)  106/       0 : =$2                  _FRC_H		equ	$02		; Free running counter High
(1)  107/       0 : =$3                  _FRC_L		equ	$03		; Free running counter Low
(1)  108/       0 : =$4                  _OCR_H		equ	$04		; Output compare register High
(1)  109/       0 : =$5                  _OCR_L		equ	$05		; Output compare register Low
(1)  110/       0 : =$6                  _TCR		equ	$06		; Timer control register
(1)  111/       0 : =$7                  _TOCR		equ	$07		; Timer output compare control register
(1)  112/       0 : =$FFFFFE92           _CCR		equ	$FFFFFE92	; Cache register (WORD)
(1)  113/       0 : =$FFFFFF00           _JR		equ	$FFFFFF00	; DIVU (--- / val)
(1)  114/       0 : =$FFFFFF04           _HRL32		equ	$FFFFFF04	; DIVU (val / ---) or RIGHT-long result if read
(1)  115/       0 : =$FFFFFF10           _HRH		equ	$FFFFFF10	; DIVU Result: LEFT long
(1)  116/       0 : =$FFFFFF14           _HRL		equ	$FFFFFF14	; DIVU Result: RIGHT long
(1)  117/       0 : =$FFFFFF80           _DMASOURCE0	equ	$FFFFFF80	; DMA source address 0
(1)  118/       0 : =$FFFFFF84           _DMADEST0	equ	$FFFFFF84	; DMA destination address 0
(1)  119/       0 : =$FFFFFF88           _DMACOUNT0	equ	$FFFFFF88	; DMA transfer count 0
(1)  120/       0 : =$FFFFFF8C           _DMACHANNEL0	equ	$FFFFFF8C	; DMA channel control 0
(1)  121/       0 : =$FFFFFF90           _DMASOURCE1	equ	$FFFFFF90	; DMA source address 1
(1)  122/       0 : =$FFFFFF94           _DMADEST1	equ	$FFFFFF94	; DMA destination address 1
(1)  123/       0 : =$FFFFFF98           _DMACOUNT1	equ	$FFFFFF98	; DMA transfer count 1
(1)  124/       0 : =$FFFFFF9C           _DMACHANNEL1	equ	$FFFFFF9C	; DMA channel control 1
(1)  125/       0 : =$FFFFFFA0           _DMAVECTORN0	equ	$FFFFFFA0	; DMA vector number N0
(1)  126/       0 : =$FFFFFFA4           _DMAVECTORE0	equ	$FFFFFFA4	; DMA vector number E0
(1)  127/       0 : =$FFFFFFA8           _DMAVECTORN1	equ	$FFFFFFA8	; DMA vector number N1
(1)  128/       0 : =$FFFFFFAC           _DMAVECTORE1	equ	$FFFFFFAC	; DMA vector number E1
(1)  129/       0 : =$FFFFFFB0           _DMAOPERATION	equ	$FFFFFFB0	; DMA operation
(1)  130/       0 : =$FFFFFFB4           _DMAREQACK0	equ	$FFFFFFB4	; DMA request/ack select control 0
(1)  131/       0 : =$FFFFFFB8           _DMAREQACK1	equ	$FFFFFFB8	; DMA request/ack select control 1
(1)  132/       0 :                     
     101/       0 :                     		include	"system/md/map.asm"	; Genesis hardware map and other areas
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Genesis / Pico 68000 map
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 : =$200000             sys_exram	equ	$200000		; Second half of 4MB rom or external RAM (Normal or save data)
(1)    7/       0 : =$A00000             z80_cpu		equ	$A00000		; Z80 CPU area, size: $2000
(1)    8/       0 : =$A04000             ym_ctrl_1	equ	$A04000		; YM2612 reg 1
(1)    9/       0 : =$A04001             ym_data_1	equ	$A04001		; YM2612 reg 2
(1)   10/       0 : =$A04002             ym_ctrl_2	equ	$A04002		; YM2612 reg 1
(1)   11/       0 : =$A04003             ym_data_2	equ	$A04003		; YM2612 reg 2
(1)   12/       0 : =$A10001             sys_io		equ	$A10001		; bits: OVRSEAS(7)|PAL(6)|DISK(5)|VER(3-0)
(1)   13/       0 : =$A10003             sys_data_1	equ	$A10003		; Port 1 DATA
(1)   14/       0 : =$A10005             sys_data_2	equ	$A10005		; Port 2 DATA
(1)   15/       0 : =$A10007             sys_data_3	equ	$A10007		; Modem DATA
(1)   16/       0 : =$A10009             sys_ctrl_1	equ	$A10009		; Port 1 CTRL
(1)   17/       0 : =$A1000B             sys_ctrl_2	equ	$A1000B		; Port 2 CTRL
(1)   18/       0 : =$A1000D             sys_ctrl_3	equ	$A1000D		; Modem CTRL
(1)   19/       0 : =$A11100             z80_bus 	equ	$A11100		; only use bit 0 (bit 8 as WORD)
(1)   20/       0 : =$A11200             z80_reset	equ	$A11200		; WRITE only ($0000 reset/$0100 cancel)
(1)   21/       0 : =$A130F1             md_bank_sram	equ	$A130F1		; Make SRAM visible at $200000
(1)   22/       0 : =$A14000             sys_tmss	equ	$A14000		; write "SEGA" here for ver > 0
(1)   23/       0 : =$C00000             vdp_data	equ	$C00000		; video data port
(1)   24/       0 : =$C00004             vdp_ctrl	equ	$C00004		; video control port
(1)   25/       0 : =$C00011             psg_ctrl	equ	$C00011		; PSG control
(1)   26/       0 :                     
(1)   27/       0 :                     ; ----------------------------------------------------------------
(1)   28/       0 :                     ; SEGA CD map
(1)   29/       0 :                     ; ----------------------------------------------------------------
(1)   30/       0 :                     
(1)   31/       0 : =$200000             sysmcd_wram	equ	$200000
(1)   32/       0 : =$A12000             sysmcd_reg	equ	$A12000
(1)   33/       0 :                     
(1)   34/       0 :                     ; ----------------------------------------------------------------
(1)   35/       0 :                     ; 32X map
(1)   36/       0 :                     ; ----------------------------------------------------------------
(1)   37/       0 :                     
(1)   38/       0 : =$A130EC             sysmars_id	equ	$A130EC		; 32X's ID: "MARS"
(1)   39/       0 : =$A15100             sysmars_reg	equ	$A15100		; MARS 32X registers area, see system/mars/map.asm for variables
(1)   40/       0 :                     
(1)   41/       0 :                     ; ----------------------------------------------------------------
(1)   42/       0 :                     ; Genesis / Mega drive Z80 map
(1)   43/       0 :                     ; ----------------------------------------------------------------
(1)   44/       0 :                     
(1)   45/       0 : =$4000               zym_ctrl_1	equ	$4000		; YM2612 reg 1
(1)   46/       0 : =$4001               zym_data_1	equ	$4001		; YM2612 reg 2
(1)   47/       0 : =$4002               zym_ctrl_2	equ	$4002		; YM2612 reg 1
(1)   48/       0 : =$4003               zym_data_2	equ	$4003		; YM2612 reg 2
(1)   49/       0 : =$6000               zbank		equ	$6000		; Z80 ROM BANK: %XXXXXXXX X0000000 00000000 (9 writes)
(1)   50/       0 :                     ; zvdp_data	equ	$7F00		; video data port
(1)   51/       0 :                     ; zvdp_ctrl	equ	$7F04		; video control port
(1)   52/       0 : =$7F11               zpsg_ctrl	equ	$7F11		; PSG control
(1)   53/       0 :                     
     102/       0 :                     		include	"system/md/ram.asm"	; Genesis RAM sections
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; MD RAM
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; Reserved RAM sections:
(1)    6/       0 :                     ; $FFFD00-$FFFDFF: Sega CD's vectors
(1)    7/       0 :                     ; $FFFE80-$FFFFFF: Z80 write-only scratchpad
(1)    8/       0 :                     ; ----------------------------------------------------------------
(1)    9/       0 :                     
(1)   10/       0 :                     ; --------------------------------------------------------
(1)   11/       0 :                     ; Settings
(1)   12/       0 :                     ; --------------------------------------------------------
(1)   13/       0 :                     
(1)   14/       0 : (MACRO)              			strct $FFFF0000
(1)   14/       0 : =$0                  GLBL_LASTPC     set *
(1)   14/FFFFFFFFFFFFEA04 :                                     dephase
(1)   14/FFFFFFFFFFFF0000 :                                     phase $FFFF0000
(1)   14/FFFFFFFFFFFF0000 : =$FFFFFFFFFFFF0000   GLBL_LASTORG    set *
(1)   15/FFFFFFFFFFFF0000 :                     RAM_SystemCode		ds.b MAX_SysCode	; CD/32X/CD32X
(1)   16/FFFFFFFFFFFF2000 :                     RAM_UserCode		ds.b MAX_UserCode	; CD/32X/CD32X
(1)   17/FFFFFFFFFFFFA000 :                     
(1)   18/FFFFFFFFFFFFA000 :                     ; ------------------------------------------------
(1)   19/FFFFFFFFFFFFA000 :                     ; > $FF8000 section
(1)   20/FFFFFFFFFFFFA000 :                     ; ------------------------------------------------
(1)   21/FFFFFFFFFFFFA000 :                     
(1)   22/FFFFFFFFFFFFA000 :                     check_thisram		ds.l 0			; <-- get current pos
(1)   26/FFFFFFFFFFFFA004 :                     RAM_MdVideo		ds.b MAX_MdVideo	; $FF8000
(1)   27/FFFFFFFFFFFFC004 :                     RAM_MdSystem		ds.b MAX_MdSystem	;
(1)   28/FFFFFFFFFFFFC604 :                     RAM_MdOther		ds.b MAX_MdOther	; 32X's DREQ goes here
(1)   29/FFFFFFFFFFFFD204 :                     RAM_ScrnBuff		ds.b MAX_ScrnBuff
(1)   30/FFFFFFFFFFFFEA04 :                     RAM_MdGlobal		ds.b sizeof_MdGlbl
(1)   31/FFFFFFFFFFFFD40C :                     sizeof_MdRam		ds.l 0
(1)   32/FFFFFFFFFFFFD410 : (MACRO)              			endstrct
(1)   32/FFFFFFFFFFFF0000 :                                     org GLBL_LASTORG
(1)   32/       0 :                                     phase GLBL_LASTPC
(1)   36/       0 :                     
(1)   37/       0 :                     ; ------------------------------------------------
(1)   38/       0 :                     ; Add-on area
(1)   39/       0 :                     ; ------------------------------------------------
(1)   40/       0 :                     
(1)   41/       0 : (MACRO)              			strct RAM_MdOther
(1)   41/       0 : =$0                  GLBL_LASTPC     set *
(1)   41/FFFFFFFFFFFF0000 :                                     dephase
(1)   41/FFFFFFFFFFFFC604 :                                     phase RAM_MDOTHER
(1)   41/FFFFFFFFFFFFC604 : =$FFFFFFFFFFFFC604   GLBL_LASTORG    set *
(1)   42/FFFFFFFFFFFFC604 :                     RAM_MdDreq		ds.b $C00		; 32X DREQ area (MANUAL SIZE)
(1)   43/FFFFFFFFFFFFD204 :                     sizeof_RamOther		ds.l 0
(1)   44/FFFFFFFFFFFFD208 : (MACRO)              			endstrct
(1)   44/FFFFFFFFFFFFC604 :                                     org GLBL_LASTORG
(1)   44/       0 :                                     phase GLBL_LASTPC
(1)   45/       0 : (MACRO)              			erreport "ADD-ON RAM USES",(sizeof_RamOther-RAM_MdOther),MAX_MdOther
(1)   46/       0 :                     
(1)   47/       0 :                     ; ------------------------------------------------
(1)   48/       0 :                     ; Other
(1)   49/       0 :                     ; ------------------------------------------------
(1)   50/       0 :                     
(1)   51/       0 : =$FFFFFD00           RAM_Stack		equ RAM_MegaCd			; <-- goes backwards
(1)   52/       0 : =$FFFFFD00           RAM_MegaCd		equ $FFFFFD00
(1)   53/       0 : =$FFFFFF00           RAM_ZSndBuff		equ $FFFFFF00
(1)   54/       0 :                     
     103/       0 :                     		include	"system/shared.asm"	; Shared variables and specials
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Shared variables
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; ====================================================================
(1)    7/       0 :                     ; ----------------------------------------------------------------
(1)    8/       0 :                     ; 32X SECTION
(1)    9/       0 :                     ; ----------------------------------------------------------------
(1)   10/       0 :                     
(1)   86/       0 :                     
     104/       0 :                     
     105/       0 :                     ; ====================================================================
     106/       0 :                     ; ----------------------------------------------------------------
     107/       0 :                     ; Init procedures for all systems
     108/       0 :                     ; ----------------------------------------------------------------
     109/       0 :                     
     110/       0 :                     ; ---------------------------------------------
     111/       0 :                     ; SEGA 32X
     112/       0 :                     ; ---------------------------------------------
     113/       0 :                     
     168/       0 :                     		include	"system/head_pico.asm"		; Pico header
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; PICO header
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; REMINDER: NO Z80 CPU, DO NOT USE THE Z80 AREA IF
(1)    6/       0 :                     ; RECYCLING THE GENESIS CODE.
(1)    7/       0 :                     ; ----------------------------------------------------------------
(1)    8/       0 :                     
(1)    9/       0 : FFFF FD00           		dc.l RAM_Stack		; Stack point
(1)   10/       4 : 0000 0204           		dc.l Pico_Entry		; Entry point MUST point to $3F0
(1)   11/       8 : 0000 0200           		dc.l Pico_ErrBus	; Bus error
(1)   12/       C : 0000 0200           		dc.l Pico_ErrAddr	; Address error
(1)   13/      10 : 0000 0200           		dc.l Pico_ErrIll	; ILLEGAL Instruction
(1)   14/      14 : 0000 0200           		dc.l Pico_ErrZDiv	; Divide by 0
(1)   15/      18 : 0000 0200           		dc.l Pico_ErrChk	; CHK Instruction
(1)   16/      1C : 0000 0200           		dc.l Pico_ErrTrapV	; TRAPV Instruction
(1)   17/      20 : 0000 0200           		dc.l Pico_ErrPrivl	; Privilege violation
(1)   18/      24 : 0000 0200           		dc.l Pico_Trace		; Trace
(1)   19/      28 : 0000 0200           		dc.l Pico_Line1010	; Line 1010 Emulator
(1)   20/      2C : 0000 0200           		dc.l Pico_Line1111	; Line 1111 Emulator
(1)   21/      30 : 0000 0200           		dc.l Pico_ErrorEx	; Error exception
(1)   22/      34 : 0000 0200           		dc.l Pico_ErrorEx
(1)   23/      38 : 0000 0200           		dc.l Pico_ErrorEx
(1)   24/      3C : 0000 0200           		dc.l Pico_ErrorEx
(1)   25/      40 : 0000 0200           		dc.l Pico_ErrorEx
(1)   26/      44 : 0000 0200           		dc.l Pico_ErrorEx
(1)   27/      48 : 0000 0200           		dc.l Pico_ErrorEx
(1)   28/      4C : 0000 0200           		dc.l Pico_ErrorEx
(1)   29/      50 : 0000 0200           		dc.l Pico_ErrorEx
(1)   30/      54 : 0000 0200           		dc.l Pico_ErrorEx
(1)   31/      58 : 0000 0200           		dc.l Pico_ErrorEx
(1)   32/      5C : 0000 0200           		dc.l Pico_ErrorEx
(1)   33/      60 : 0000 0200           		dc.l Pico_ErrorEx
(1)   34/      64 : 0000 0200           		dc.l Pico_Error
(1)   35/      68 : 0000 0202           		dc.l Pico_UserInt	; PICO: User interrupt
(1)   36/      6C : 0000 0202           		dc.l Pico_PcmInt	; PICO: PCM-full interrupt
(1)   37/      70 : FFFF C452           		dc.l RAM_MdMarsHInt	; RAM jump for HBlank (JMP xxxx xxxx)
(1)   38/      74 : 0000 0202           		dc.l Pico_UnkInt	; PICO: Unknown
(1)   39/      78 : FFFF C44C           		dc.l RAM_MdMarsVInt	; RAM jump for VBlank (JMP xxxx xxxx)
(1)   40/      7C : 0000 0200           		dc.l Pico_Error
(1)   41/      80 : 0000 0200           		dc.l Pico_Error
(1)   42/      84 : 0000 0200           		dc.l Pico_Error
(1)   43/      88 : 0000 0200           		dc.l Pico_Error
(1)   44/      8C : 0000 0200           		dc.l Pico_Error
(1)   45/      90 : 0000 0200           		dc.l Pico_Error
(1)   46/      94 : 0000 0200           		dc.l Pico_Error
(1)   47/      98 : 0000 0200           		dc.l Pico_Error
(1)   48/      9C : 0000 0200           		dc.l Pico_Error
(1)   49/      A0 : 0000 0200           		dc.l Pico_Error
(1)   50/      A4 : 0000 0200           		dc.l Pico_Error
(1)   51/      A8 : 0000 0200           		dc.l Pico_Error
(1)   52/      AC : 0000 0200           		dc.l Pico_Error
(1)   53/      B0 : 0000 0200           		dc.l Pico_Error
(1)   54/      B4 : 0000 0200           		dc.l Pico_Error
(1)   55/      B8 : 0000 0200           		dc.l Pico_Error
(1)   56/      BC : 0000 0200           		dc.l Pico_Error
(1)   57/      C0 : 0000 0200           		dc.l Pico_Error
(1)   58/      C4 : 0000 0200           		dc.l Pico_Error
(1)   59/      C8 : 0000 0200           		dc.l Pico_Error
(1)   60/      CC : 0000 0200           		dc.l Pico_Error
(1)   61/      D0 : 0000 0200           		dc.l Pico_Error
(1)   62/      D4 : 0000 0200           		dc.l Pico_Error
(1)   63/      D8 : 0000 0200           		dc.l Pico_Error
(1)   64/      DC : 0000 0200           		dc.l Pico_Error
(1)   65/      E0 : 0000 0200           		dc.l Pico_Error
(1)   66/      E4 : 0000 0200           		dc.l Pico_Error
(1)   67/      E8 : 0000 0200           		dc.l Pico_Error
(1)   68/      EC : 0000 0200           		dc.l Pico_Error
(1)   69/      F0 : 0000 0200           		dc.l Pico_Error
(1)   70/      F4 : 0000 0200           		dc.l Pico_Error
(1)   71/      F8 : 0000 0200           		dc.l Pico_Error
(1)   72/      FC : 0000 0200           		dc.l Pico_Error
(1)   73/     100 : 5345 4741 2050      		dc.b "SEGA PICO       "
              106 : 4943 4F20 2020 
              10C : 2020 2020          
(1)   74/     110 : 2843 2947 4636      		dc.b "(C)GF64 2024.???"
              116 : 3420 3230 3234 
              11C : 2E3F 3F3F          
(1)   75/     120 : 4E69 6B6F 6E61      		dc.b "Nikona PICO                                     "
              126 : 2050 4943 4F20 
              12C : 2020 2020 2020 
              132 : 2020 2020 2020 
              138 : 2020 2020 2020 
              13E : 2020 2020 2020 
              144 : 2020 2020 2020 
              14A : 2020 2020 2020    
(1)   76/     150 : 4E69 6B6F 6E61      		dc.b "Nikona PICO                                     "
              156 : 2050 4943 4F20 
              15C : 2020 2020 2020 
              162 : 2020 2020 2020 
              168 : 2020 2020 2020 
              16E : 2020 2020 2020 
              174 : 2020 2020 2020 
              17A : 2020 2020 2020    
(1)   77/     180 : 474D 2048 4F4D      		dc.b "GM HOMEBREW-02"
              186 : 4542 5245 572D 
              18C : 3032             
(1)   78/     18E : 0000                		dc.w 0
(1)   79/     190 : 2020 2020 2020      		dc.b "                "
              196 : 2020 2020 2020 
              19C : 2020 2020          
(1)   80/     1A0 : 0000 0000           		dc.l 0
(1)   81/     1A4 : 0005 BE50           		dc.l ROM_END
(1)   82/     1A8 : 00FF 0000           		dc.l $FF0000
(1)   83/     1AC : 00FF FFFF           		dc.l $FFFFFF
(1)   84/     1B0 : 2020 2020           		dc.l $20202020		; dc.b "RA",$F8,$20
(1)   85/     1B4 : 2020 2020           		dc.l $20202020		; $200000
(1)   86/     1B8 : 2020 2020           		dc.l $20202020		; $203FFF
(1)   87/     1BC :                     		align $1F0
(1)   88/     1F0 : 4620 2020 2020      		dc.b "F               "
              1F6 : 2020 2020 2020 
              1FC : 2020 2020          
(1)   89/     200 :                     
(1)   90/     200 :                     ; ====================================================================
(1)   91/     200 :                     ; ----------------------------------------------------------------
(1)   92/     200 :                     ; Error handlers
(1)   93/     200 :                     ;
(1)   94/     200 :                     ; all these do nothing currently
(1)   95/     200 :                     ; ----------------------------------------------------------------
(1)   96/     200 :                     
(1)   97/     200 :                     Pico_ErrBus:				; Bus error
(1)   98/     200 :                     Pico_ErrAddr:				; Address error
(1)   99/     200 :                     Pico_ErrIll:				; ILLEGAL Instruction
(1)  100/     200 :                     Pico_ErrZDiv:				; Divide by 0
(1)  101/     200 :                     Pico_ErrChk:				; CHK Instruction
(1)  102/     200 :                     Pico_ErrTrapV:				; TRAPV Instruction
(1)  103/     200 :                     Pico_ErrPrivl:				; Privilege violation
(1)  104/     200 :                     Pico_Trace:				; Trace
(1)  105/     200 :                     Pico_Line1010:				; Line 1010 Emulator
(1)  106/     200 :                     Pico_Line1111:				; Line 1111 Emulator
(1)  107/     200 :                     Pico_ErrorEx:				; Error exception
(1)  108/     200 :                     Pico_Error:
(1)  109/     200 : 4E73                		rte			; Return from Exception
(1)  110/     202 :                     
(1)  111/     202 :                     ; ----------------------------------------------------------------
(1)  112/     202 :                     ; PICO-exclusive interrupts
(1)  113/     202 :                     ; ----------------------------------------------------------------
(1)  114/     202 :                     
(1)  115/     202 :                     Pico_UserInt:
(1)  116/     202 :                     Pico_PcmInt:	; <-- Interrupt when the PCM chips gets full, Ojamajo# uses this.
(1)  117/     202 :                     Pico_UnkInt:
(1)  118/     202 : 4E73                		rte
(1)  119/     204 :                     
(1)  120/     204 :                     ; ====================================================================
(1)  121/     204 :                     ; ----------------------------------------------------------------
(1)  122/     204 :                     ; Entry point
(1)  123/     204 :                     ; ----------------------------------------------------------------
(1)  124/     204 :                     
(1)  125/     204 :                     Pico_Entry:
(1)  126/     204 :                     	; --------------------------------
(1)  127/     204 :                     	; Activate PICO system
(1)  128/     204 : 46FC 2700           		move	#$2700,sr		; Disable interrputs
(1)  129/     208 : 41F9 0080 0019      		lea	($800019),a0
(1)  130/     20E : 203C 5345 4741      		move.l	#"SEGA",d0
(1)  131/     214 : 01C8 0000           		movep.l	d0,(a0)			; Unlock PICO system
(1)  132/     218 : 4A79 00C0 0004      		tst.w	(vdp_ctrl).l		; Test VDP to unlock Video
(1)  133/     21E :                     
(1)  134/     21E :                     	; --------------------------------
(1)  135/     21E : 7000                		moveq	#0,d0
(1)  136/     220 : 2C40                		movea.l	d0,a6
(1)  137/     222 : 4E66                		move.l	a6,usp
(1)  138/     224 : 41F9 FFFF 0000      		lea	($FFFF0000),a0		; Clean our "work" RAM
(1)  139/     22A : 223C FFFF D40C      		move.l	#sizeof_mdram,d1
(1)  140/     230 : 7000                		moveq	#0,d0
(1)  141/     232 : 30C0                .loop_ram:	move.w	d0,(a0)+
(1)  142/     234 : B1C1                		cmp.l	d1,a0
(1)  143/     236 : 65FA                		bcs.s	.loop_ram
(1)  144/     238 : 4CF9 7FFF 00FF      		movem.l	($FF0000),d0-a6		; Clean registers using zeros from RAM
              23E : 0000             
(1)  145/     240 : 4DF9 00C0 0000      		lea	(vdp_data),a6
(1)  146/     246 : 3E2E 0004           .wait_dma:	move.w	4(a6),d7		; Check if DMA is active.
(1)  147/     24A : 0807 0001           		btst	#1,d7
(1)  148/     24E : 66F6                		bne.s	.wait_dma
(1)  149/     250 : 2D7C C000 0000      		move.l	#$C0000000,4(a6)	; Clear palette
              256 : 0004             
(1)  150/     258 : 7E3F                		moveq	#64-1,d7
(1)  151/     25A : 7C00                		moveq	#0,d6
(1)  152/     25C :                     .palclear:
(1)  153/     25C : 3C86                		move.w	d6,(a6)
(1)  154/     25E : 51CF FFFC           		dbf	d7,.palclear
(1)  155/     262 :                     
     169/     262 : 6112                		bsr	Sound_init			; Init Sound driver FIRST
     170/     264 : 6100 0124           		bsr	Video_init			;  ''  Video
     171/     268 : 6100 0D3C           		bsr	System_Init			;  ''  Values
     172/     26C : 31FC 0000 C458      		move.w	#0,(RAM_ScreenMode).w		; Start at screen 0
     173/     272 : 6000 107C           		bra.w	Md_ReadModes			; Go to SCREENJUMP section
     174/     276 :                     
     175/     276 :                     ; ---------------------------------------------
     176/     276 :                     ; MD
     177/     276 :                     ; ---------------------------------------------
     188/     276 :                     
     189/     276 :                     ; ====================================================================
     190/     276 :                     ; --------------------------------------------------------
     191/     276 :                     ; SYSTEM routines and MODE switching code
     192/     276 :                     ;
     193/     276 :                     ; MD and PICO: Normal ROM locations
     194/     276 :                     ; CD/32X/CD32X: Loaded into RAM, This includes cartridge
     195/     276 :                     ;               to prevent bus-conflict with the SH2's
     196/     276 :                     ;               ROM area
     197/     276 :                     ; --------------------------------------------------------
     198/     276 :                     
     203/     276 :                     ; ---------------------------------------------
     204/     276 :                     
     205/     276 :                     		include	"sound/driver/gema.asm"
(1)    1/     276 :                     ; ===========================================================================
(1)    2/     276 :                     ; -------------------------------------------------------------------
(1)    3/     276 :                     ; GEMA/Nikona Sound Driver v1.0
(1)    4/     276 :                     ; by GenesisFan64 2023-2024
(1)    5/     276 :                     ;
(1)    6/     276 :                     ; Features:
(1)    7/     276 :                     ; - Support for SEGA CD's PCM channels:
(1)    8/     276 :                     ;   | All 8 channels with streaming support
(1)    9/     276 :                     ;   | for larger samples.
(1)   10/     276 :                     ; - Support for 32X's PWM:
(1)   11/     276 :                     ;   | 7 pseudo-channels in either MONO
(1)   12/     276 :                     ;   | or STEREO.
(1)   13/     276 :                     ;
(1)   14/     276 :                     ; - DMA ROM protection
(1)   15/     276 :                     ;   | This keeps DAC in a decent quality while
(1)   16/     276 :                     ;   | doing any DMA jobs in the 68k side.
(1)   17/     276 :                     ; - DAC Playback at 16000hz
(1)   18/     276 :                     ; - FM special mode with custom frequencies
(1)   19/     276 :                     ; - Autodetection for the PSG's Tone3 mode
(1)   20/     276 :                     ;
(1)   21/     276 :                     ; Notes:
(1)   22/     276 :                     ; This sound driver uses RAM area $FFFF00-$FFFFFF,
(1)   23/     276 :                     ; reserved in case I'll make a 68k version of this driver
(1)   24/     276 :                     ; just for the Sega PICO
(1)   25/     276 :                     ; Currently the Z80 writes a flag directly for a
(1)   26/     276 :                     ; workaround to bypass a data-reading hardware
(1)   27/     276 :                     ; limitation. (see Sound_Update)
(1)   28/     276 :                     ;
(1)   29/     276 :                     ; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣴⣶⡿⠿⠿⠿⣶⣦⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀
(1)   30/     276 :                     ; ⠀⠀⠀⠀⠀⠀⢀⣠⣶⢟⣿⠟⠁⢰⢋⣽⡆⠈⠙⣿⡿⣶⣄⡀⠀⠀⠀⠀⠀⠀
(1)   31/     276 :                     ; ⠀⠀⠀⠀⣠⣴⠟⠋⢠⣾⠋⠀⣀⠘⠿⠿⠃⣀⠀⠈⣿⡄⠙⠻⣦⣄⠀⠀⠀⠀
(1)   32/     276 :                     ; ⠀⢀⣴⡿⠋⠁⠀⢀⣼⠏⠺⠛⠛⠻⠂⠐⠟⠛⠛⠗⠘⣷⡀⠀⠈⠙⢿⣦⡀⠀
(1)   33/     276 :                     ; ⣴⡟⢁⣀⣠⣤⡾⢿⡟⠀⠀⠀⠘⢷⠾⠷⡾⠃⠀⠀⠀⢻⡿⢷⣤⣄⣀⡈⢻⣦
(1)   34/     276 :                     ; ⠙⠛⠛⠋⠉⠁⠀⢸⡇⠀⠀⢠⣄⠀⠀⠀⠀⣠⡄⠀⠀⢸⡇⠀⠈⠉⠙⠛⠛⠋
(1)   35/     276 :                     ; ⠀⠀⠀⠀⠀⠀⠀⢸⡇⢾⣦⣀⣹⡧⠀⠀⢼⣏⣀⣴⡷⢸⡇⠀⠀⠀⠀⠀⠀⠀
(1)   36/     276 :                     ; ⠀⠀⠀⠀⠀⠀⠀⠸⣧⡀⠈⠛⠛⠁⠀⠀⠈⠛⠛⠁⢀⣼⠇⠀⠀⠀⠀⠀⠀⠀
(1)   37/     276 :                     ; ⠀⠀⠀⠀⠀⠀⠀⢀⣘⣿⣶⣤⣀⣀⣀⣀⣀⣀⣤⣶⣿⣃⠀⠀⠀⠀⠀⠀⠀⠀
(1)   38/     276 :                     ; ⠀⠀⠀⠀⠀⣠⡶⠟⠋⢉⣀⣽⠿⠉⠉⠉⠹⢿⣍⣈⠉⠛⠷⣦⡀⠀⠀⠀⠀⠀
(1)   39/     276 :                     ; ⠀⠀⠀⠀⢾⣯⣤⣴⡾⠟⠋⠁⠀⠀⠀⠀⠀⠀⠉⠛⠷⣶⣤⣬⣿⠀⠀⠀⠀⠀
(1)   40/     276 :                     ; ⠀⠀⠀⠀⠀⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠁⠀⠀⠀⠀⠀
(1)   41/     276 :                     ; -------------------------------------------------------------------
(1)   42/     276 :                     
(1)   43/     276 :                     ; ====================================================================
(1)   44/     276 :                     ; --------------------------------------------------------
(1)   45/     276 :                     ; Macros
(1)   46/     276 :                     ; --------------------------------------------------------
(1)   47/     276 :                     
(1)   48/     276 :                     ; Shared for all DAC, PCM, PWM
(1)   49/     276 :                     ; FOR WAV SAMPLES, OFFSET STARTS AT $2C
(1)   50/     276 :                     gSmplData macro labl,file,loop
(1)   51/     276 :                     labl	label *
(1)   52/     276 :                     	dc.b ((labl_e-labl_s)&$FF),(((labl_e-labl_s)>>8)&$FF),(((labl_e-labl_s)>>16)&$FF)
(1)   53/     276 :                     	dc.b ((loop)&$FF),(((loop)>>8)&$FF),(((loop)>>16)&$FF)
(1)   54/     276 :                     labl_s:
(1)   55/     276 :                     	binclude file,$2C
(1)   56/     276 :                     labl_e:
(1)   57/     276 :                     	endm
(1)   58/     276 :                     
(1)   59/     276 :                     ; ; Failsafe version:
(1)   60/     276 :                     ; gSmpHead macro len,loop
(1)   61/     276 :                     ; 	dc.b ((len)&$FF),(((len)>>8)&$FF),(((len)>>16)&$FF)	; length
(1)   62/     276 :                     ; 	dc.b ((loop)&$FF),(((loop)>>8)&$FF),(((loop)>>16)&$FF)
(1)   63/     276 :                     ; 	endm
(1)   64/     276 :                     
(1)   65/     276 :                     ; --------------------------------------------------------
(1)   66/     276 :                     ; Variables
(1)   67/     276 :                     ; --------------------------------------------------------
(1)   68/     276 :                     
(1)   69/     276 :                     ; z80_cpu	equ $A00000		; Z80 CPU area, size: $2000
(1)   70/     276 :                     ; z80_bus 	equ $A11100		; only read bit 0 (bit 8 as WORD)
(1)   71/     276 :                     ; z80_reset	equ $A11200		; WRITE only: $0000 reset/$0100 cancel
(1)   72/     276 :                     
(1)   73/     276 :                     ; Z80-area points:
(1)   74/     276 : =$40                 zDrvFifo	equ commZfifo		; FIFO command storage
(1)   75/     276 : =$2E                 zDrvFWrt	equ commZWrite		; FIFO command index
(1)   76/     276 : =$2F                 zDrvRomBlk	equ commZRomBlk		; ROM block flag
(1)   77/     276 : =$37                 zDrvMarsBlk	equ marsBlock		; Flag to disable 32X's PWM
(1)   78/     276 : =$36                 zDrvMcdBlk	equ mcdBlock		; Flag to disable SegaCD's PCM
(1)   79/     276 : =$35                 zDrvRamSrc	equ cdRamSrcB		; RAM-read source+dest pointers
(1)   80/     276 : =$30                 zDrvRamLen	equ cdRamLen		; RAM-read length and flag
(1)   81/     276 :                     
(1)   82/     276 :                     ; --------------------------------------------------------
(1)   83/     276 :                     ; Labels
(1)   84/     276 :                     ; --------------------------------------------------------
(1)   85/     276 :                     
(1)   86/     276 : =$FFFFFF00           RAM_ZCdFlag_D	equ RAM_ZSndBuff	; transferRom flag
(1)   87/     276 :                     
(1)   88/     276 :                     ; ====================================================================
(1)   89/     276 :                     ; --------------------------------------------------------
(1)   90/     276 :                     ; Initialize Sound
(1)   91/     276 :                     ;
(1)   92/     276 :                     ; Uses:
(1)   93/     276 :                     ; a0-a1,d0-d1
(1)   94/     276 :                     ; --------------------------------------------------------
(1)   95/     276 :                     
(1)   96/     276 :                     ; 		align $80
(1)   97/     276 :                     Sound_Init:
(1)   98/     276 : 007C 0700           		ori.w	#$0700,sr
(1)  100/     27A :                     		; PICO driver init...
(1)  128/     27A : 203C 0000 5B10      		move.l	#Gema_MasterList,d0
(1)  129/     280 : 606E                		bra	gemaSetMasterList
(1)  130/     282 :                     
(1)  131/     282 :                     ; ----------------------------------------------------------------
(1)  132/     282 :                     ; Sound_Update
(1)  133/     282 :                     ;
(1)  134/     282 :                     ; Call this during DISPLAY or call it during a VBlank wait-loop
(1)  135/     282 :                     ; to communicate with the Z80
(1)  136/     282 :                     ;
(1)  137/     282 :                     ; SegaCD/CD32X:
(1)  138/     282 :                     ; This checks if the Z80 wants to read from RAM (as it can't
(1)  139/     282 :                     ; see it) then this CPU manually writes the RAM bytes from
(1)  140/     282 :                     ; here to the Z80's RAM
(1)  141/     282 :                     ; THIS IS REQUIRED for the tracks and instruments stored
(1)  142/     282 :                     ; on RAM in case you are doing ASIC-Stamps.
(1)  143/     282 :                     ;
(1)  144/     282 :                     ; DAC samples are safe to read from WORD-RAM
(1)  145/     282 :                     ; (again: if NOT using Stamps)
(1)  146/     282 :                     ; but careful when loading new data, and make sure MAIN-CPU
(1)  147/     282 :                     ; has the permission to read the data.
(1)  148/     282 :                     ;
(1)  149/     282 :                     ; Sega Pico:
(1)  150/     282 :                     ; This will be the entire sound driver rewritten from Z80 to 68k,
(1)  151/     282 :                     ; but this will be done in the future.
(1)  152/     282 :                     ;
(1)  153/     282 :                     ; Uses:
(1)  154/     282 :                     ; d5-d7,a4-a6
(1)  155/     282 :                     ; ----------------------------------------------------------------
(1)  156/     282 :                     
(1)  157/     282 :                     Sound_Update:
(1)  159/     282 : 4E75                		rts		; entire Sound driver for Pico goes here
(1)  192/     284 : 4E75                		rts
(1)  193/     286 :                     
(1)  194/     286 :                     ; ====================================================================
(1)  195/     286 :                     ; ----------------------------------------------------------------
(1)  196/     286 :                     ; Subroutines
(1)  197/     286 :                     ; ----------------------------------------------------------------
(1)  198/     286 :                     
(1)  199/     286 :                     ; ------------------------------------------------
(1)  200/     286 :                     ; Lock Z80, get bus
(1)  201/     286 :                     ; ------------------------------------------------
(1)  202/     286 :                     
(1)  203/     286 :                     sndLockZ80:
(1)  210/     286 : 4E75                		rts
(1)  211/     288 :                     
(1)  212/     288 :                     ; ------------------------------------------------
(1)  213/     288 :                     ; Unlock Z80, return bus
(1)  214/     288 :                     ; ------------------------------------------------
(1)  215/     288 :                     
(1)  216/     288 :                     sndUnlockZ80:
(1)  220/     288 : 4E75                		rts
(1)  221/     28A :                     
(1)  222/     28A :                     ; ------------------------------------------------
(1)  223/     28A :                     ; 68K-to-Z80 sound request enter/exit routines
(1)  224/     28A :                     ;
(1)  225/     28A :                     ; d6 - commFifo index
(1)  226/     28A :                     ; ------------------------------------------------
(1)  227/     28A :                     
(1)  228/     28A :                     sndReq_Enter:
(1)  232/     28A : 9EFC 0004           		suba	#4,sp				; Extra jump return
(1)  233/     28E : 48E7 0306           		movem.l	d6-d7/a5-a6,-(sp)		; Save these regs to the stack
(1)  234/     292 : DEFC 0014           		adda	#(4*4)+4,sp			; Go back to the RTS jump
(1)  235/     296 : 4BF9 00A0 002E      		lea	(z80_cpu+zDrvFWrt),a5		; a5 - commZWrite
(1)  236/     29C : 4DF9 00A0 0040      		lea	(z80_cpu+zDrvFifo),a6		; a6 - fifo command list
(1)  237/     2A2 :                     .wait:
(1)  242/     2A2 : 1C15                		move.b	(a5),d6				; d6 - index fifo position
(1)  243/     2A4 : 4886                		ext.w	d6				; extend to 16 bits
(1)  244/     2A6 : 4E75                		rts
(1)  245/     2A8 :                     ; JUMP ONLY
(1)  246/     2A8 :                     sndReq_Exit:
(1)  250/     2A8 : 9EFC 0018           		suba	#8+(4*4),sp
(1)  251/     2AC : 4CDF 60C0           		movem.l	(sp)+,d6-d7/a5-a6		; And pop those back
(1)  252/     2B0 : DEFC 0008           		adda	#8,sp
(1)  253/     2B4 :                     ; 		andi.w	#$F8FF,sr			; Enable interrupts
(1)  254/     2B4 : 4E75                		rts
(1)  255/     2B6 :                     
(1)  256/     2B6 :                     ; ------------------------------------------------
(1)  257/     2B6 :                     ; Send request id and arguments
(1)  258/     2B6 :                     ;
(1)  259/     2B6 :                     ; Input:
(1)  260/     2B6 :                     ; d7 - byte to write
(1)  261/     2B6 :                     ; d6 - index pointer
(1)  262/     2B6 :                     ; a5 - commZWrite, update index
(1)  263/     2B6 :                     ; a6 - commZfifo command list
(1)  264/     2B6 :                     ;
(1)  265/     2B6 :                     ; *** CALL sndReq_Enter FIRST ***
(1)  266/     2B6 :                     ; ------------------------------------------------
(1)  267/     2B6 :                     
(1)  268/     2B6 :                     sndReq_scmd:
(1)  269/     2B6 : 1DBC 00FF 6000      		move.b	#-1,(a6,d6.w)			; write command-start flag
(1)  270/     2BC : 5206                		addq.b	#1,d6				; next fifo pos
(1)  271/     2BE : 0206 000F           		andi.b	#MAX_ZCMND-1,d6			; * Z80 label *
(1)  272/     2C2 : 600C                		bra.s	sndReq_sbyte
(1)  273/     2C4 :                     sndReq_slong:
(1)  274/     2C4 : 610A                		bsr	sndReq_sbyte
(1)  275/     2C6 : E09F                		ror.l	#8,d7
(1)  276/     2C8 :                     sndReq_saddr:	; 24-bit address
(1)  277/     2C8 : 6106                		bsr	sndReq_sbyte
(1)  278/     2CA : E09F                		ror.l	#8,d7
(1)  279/     2CC :                     sndReq_sword:
(1)  280/     2CC : 6102                		bsr	sndReq_sbyte
(1)  281/     2CE : E09F                		ror.l	#8,d7
(1)  282/     2D0 :                     sndReq_sbyte:
(1)  283/     2D0 : 1D87 6000           		move.b	d7,(a6,d6.w)			; write byte
(1)  284/     2D4 : 5206                		addq.b	#1,d6				; next fifo pos
(1)  285/     2D6 : 0206 000F           		andi.b	#MAX_ZCMND-1,d6			; * Z80 label *
(1)  286/     2DA : 1A86                		move.b	d6,(a5)				; update commZWrite
(1)  287/     2DC : 4E75                		rts
(1)  288/     2DE :                     
(1)  289/     2DE :                     ; --------------------------------------------------------
(1)  290/     2DE :                     ; gemaDmaPause
(1)  291/     2DE :                     ;
(1)  292/     2DE :                     ; Call this BEFORE doing any DMA transfer
(1)  293/     2DE :                     ; --------------------------------------------------------
(1)  294/     2DE :                     
(1)  295/     2DE :                     gemaDmaPause:
(1)  297/     2DE : 4E75                		rts
(1)  311/     2E0 :                     
(1)  312/     2E0 :                     ; --------------------------------------------------------
(1)  313/     2E0 :                     ; gemaDmaResume
(1)  314/     2E0 :                     ;
(1)  315/     2E0 :                     ; Call this AFTER finishing DMA transfer
(1)  316/     2E0 :                     ; --------------------------------------------------------
(1)  317/     2E0 :                     
(1)  318/     2E0 :                     gemaDmaResume:
(1)  320/     2E0 : 4E75                		rts
(1)  331/     2E2 :                     
(1)  332/     2E2 :                     ; --------------------------------------------------------
(1)  333/     2E2 :                     ; gemaDmaPauseRom
(1)  334/     2E2 :                     ;
(1)  335/     2E2 :                     ; Call this BEFORE doing any DMA transfer
(1)  336/     2E2 :                     ;
(1)  337/     2E2 :                     ; *** BANKS $880000/$900000 WILL BE GONE ***
(1)  338/     2E2 :                     ; --------------------------------------------------------
(1)  339/     2E2 :                     
(1)  340/     2E2 :                     gemaDmaPauseRom:
(1)  342/     2E2 : 4E75                		rts
(1)  362/     2E4 :                     
(1)  363/     2E4 :                     ; --------------------------------------------------------
(1)  364/     2E4 :                     ; gemaDmaResumeRom
(1)  365/     2E4 :                     ;
(1)  366/     2E4 :                     ; Call this AFTER finishing DMA transfer
(1)  367/     2E4 :                     ;
(1)  368/     2E4 :                     ; *** BANKS $880000/$900000 GET RESTORED ***
(1)  369/     2E4 :                     ; --------------------------------------------------------
(1)  370/     2E4 :                     
(1)  371/     2E4 :                     gemaDmaResumeRom:
(1)  373/     2E4 : 4E75                		rts
(1)  391/     2E6 :                     
(1)  392/     2E6 :                     ; ====================================================================
(1)  393/     2E6 :                     ; --------------------------------------------------------
(1)  394/     2E6 :                     ; USER CALLS
(1)  395/     2E6 :                     ; --------------------------------------------------------
(1)  396/     2E6 :                     
(1)  397/     2E6 :                     ; --------------------------------------------------------
(1)  398/     2E6 :                     ; gemaTest
(1)  399/     2E6 :                     ;
(1)  400/     2E6 :                     ; For TESTING only.
(1)  401/     2E6 :                     ; --------------------------------------------------------
(1)  402/     2E6 :                     
(1)  403/     2E6 :                     gemaTest:
(1)  404/     2E6 : 61A2                		bsr	sndReq_Enter
(1)  405/     2E8 : 3E3C 0000           		move.w	#$00,d7		; Command $00
(1)  406/     2EC : 61C8                		bsr	sndReq_scmd
(1)  407/     2EE : 60B8                		bra 	sndReq_Exit
(1)  408/     2F0 :                     
(1)  409/     2F0 :                     ; --------------------------------------------------------
(1)  410/     2F0 :                     ; gemaSetMasterList
(1)  411/     2F0 :                     ;
(1)  412/     2F0 :                     ; Set Tracklist location
(1)  413/     2F0 :                     ;
(1)  414/     2F0 :                     ; Input:
(1)  415/     2F0 :                     ; d0.l - 68k pointer
(1)  416/     2F0 :                     ; --------------------------------------------------------
(1)  417/     2F0 :                     
(1)  418/     2F0 :                     gemaSetMasterList:
(1)  419/     2F0 : 6198                		bsr	sndReq_Enter
(1)  420/     2F2 : 3E3C 0001           		move.w	#$01,d7		; Command $01
(1)  421/     2F6 : 61BE                		bsr	sndReq_scmd
(1)  422/     2F8 : 2E00                		move.l	d0,d7
(1)  423/     2FA : 61C8                		bsr	sndReq_slong
(1)  424/     2FC : 60AA                		bra 	sndReq_Exit
(1)  425/     2FE :                     
(1)  426/     2FE :                     ; --------------------------------------------------------
(1)  427/     2FE :                     ; gemaPlayTrack
(1)  428/     2FE :                     ;
(1)  429/     2FE :                     ; Play a sequence with arguments
(1)  430/     2FE :                     ;
(1)  431/     2FE :                     ; Input:
(1)  432/     2FE :                     ; d0.b - Playback slot number
(1)  433/     2FE :                     ;        If -1: use auto-search
(1)  434/     2FE :                     ; d1.b - Sequence number
(1)  435/     2FE :                     ; d2.b - Starting block
(1)  436/     2FE :                     ; --------------------------------------------------------
(1)  437/     2FE :                     
(1)  438/     2FE :                     gemaPlayTrack:
(1)  439/     2FE : 618A                		bsr	sndReq_Enter
(1)  440/     300 : 3E3C 0002           		move.w	#$02,d7		; Command $02
(1)  441/     304 : 61B0                		bsr	sndReq_scmd
(1)  442/     306 : 1E01                		move.b	d1,d7		; d1.b Seq number
(1)  443/     308 : 61C6                		bsr	sndReq_sbyte
(1)  444/     30A : 1E02                		move.b	d2,d7		; d2.b Block <--
(1)  445/     30C : 61C2                		bsr	sndReq_sbyte
(1)  446/     30E : 1E00                		move.b	d0,d7		; d0.b Slot
(1)  447/     310 : 61BE                		bsr	sndReq_sbyte
(1)  448/     312 : 6094                		bra 	sndReq_Exit
(1)  449/     314 :                     
(1)  450/     314 :                     ; --------------------------------------------------------
(1)  451/     314 :                     ; gemaStopTrack
(1)  452/     314 :                     ;
(1)  453/     314 :                     ; Stops tracks with the same sequence number
(1)  454/     314 :                     ;
(1)  455/     314 :                     ; Input:
(1)  456/     314 :                     ; d0.b - Playback slot number
(1)  457/     314 :                     ;        If -1: Read all slots
(1)  458/     314 :                     ; d1.b - Sequence number to search for
(1)  459/     314 :                     ;        If -1: stop tracks with any sequence
(1)  460/     314 :                     ; --------------------------------------------------------
(1)  461/     314 :                     
(1)  462/     314 :                     gemaStopTrack:
(1)  463/     314 : 6100 FF74           		bsr	sndReq_Enter
(1)  464/     318 : 3E3C 0003           		move.w	#$03,d7		; Command $03
(1)  465/     31C : 6198                		bsr	sndReq_scmd
(1)  466/     31E : 1E01                		move.b	d1,d7		; d0.b Seq number
(1)  467/     320 : 61AE                		bsr	sndReq_sbyte
(1)  468/     322 : 1E00                		move.b	d0,d7		; d1.b Slot
(1)  469/     324 : 61AA                		bsr	sndReq_sbyte
(1)  470/     326 : 6080                		bra 	sndReq_Exit
(1)  471/     328 :                     
(1)  472/     328 :                     ; --------------------------------------------------------
(1)  473/     328 :                     ; gemaStopAll
(1)  474/     328 :                     ;
(1)  475/     328 :                     ; Stops ALL tracks
(1)  476/     328 :                     ; --------------------------------------------------------
(1)  477/     328 :                     
(1)  478/     328 :                     gemaStopAll:
(1)  479/     328 : 6100 FF60           		bsr	sndReq_Enter
(1)  480/     32C : 3E3C 0003           		move.w	#$03,d7		; Command $03
(1)  481/     330 : 6184                		bsr	sndReq_scmd
(1)  482/     332 : 7EFF                		moveq	#-1,d7		; d0.b Seq number
(1)  483/     334 : 619A                		bsr	sndReq_sbyte
(1)  484/     336 : 7EFF                		moveq	#-1,d7		; d1.b Slot
(1)  485/     338 : 6196                		bsr	sndReq_sbyte
(1)  486/     33A : 6000 FF6C           		bra 	sndReq_Exit
(1)  487/     33E :                     
(1)  488/     33E :                     ; --------------------------------------------------------
(1)  489/     33E :                     ; gemaFadeTrack
(1)  490/     33E :                     ;
(1)  491/     33E :                     ; Set Master volume to a track slot.
(1)  492/     33E :                     ;
(1)  493/     33E :                     ; Input:
(1)  494/     33E :                     ; d0.b - Playback slot number
(1)  495/     33E :                     ;        If -1: Apply to all slots
(1)  496/     33E :                     ; d1.b - Target volume
(1)  497/     33E :                     ; d2.b - Fade speed TODO
(1)  498/     33E :                     ;
(1)  499/     33E :                     ; Notes:
(1)  500/     33E :                     ; - DO NOT MIX THIS WITH gemaSetTrackVol
(1)  501/     33E :                     ; - In v1.0 this only works on (re)start
(1)  502/     33E :                     ;   or during new notes on playback.
(1)  503/     33E :                     ; --------------------------------------------------------
(1)  504/     33E :                     
(1)  505/     33E :                     gemaFadeTrack:
(1)  506/     33E : 6100 FF4A           		bsr	sndReq_Enter
(1)  507/     342 : 3E3C 0005           		move.w	#$05,d7		; Command $05
(1)  508/     346 : 6100 FF6E           		bsr	sndReq_scmd
(1)  509/     34A : 1E01                		move.b	d1,d7		; d0.b Target volume
(1)  510/     34C : 6182                		bsr	sndReq_sbyte
(1)  511/     34E : 1E00                		move.b	d0,d7		; d1.b Slot
(1)  512/     350 : 6100 FF7E           		bsr	sndReq_sbyte
(1)  513/     354 : 6000 FF52           		bra 	sndReq_Exit
(1)  514/     358 :                     
(1)  515/     358 :                     ; --------------------------------------------------------
(1)  516/     358 :                     ; gemaSetTrackVol
(1)  517/     358 :                     ;
(1)  518/     358 :                     ; Set Master volume to a track slot.
(1)  519/     358 :                     ;
(1)  520/     358 :                     ; Input:
(1)  521/     358 :                     ; d0.b - Playback slot number
(1)  522/     358 :                     ;        If -1: Set to all slots
(1)  523/     358 :                     ; d1.b - Master volume ($00-$40 max-min)
(1)  524/     358 :                     ;
(1)  525/     358 :                     ; Notes:
(1)  526/     358 :                     ; - DO NOT MIX THIS WITH gemaFadeTrack
(1)  527/     358 :                     ; - In v1.0 this only works on (re)start
(1)  528/     358 :                     ;   or during new notes on playback.
(1)  529/     358 :                     ; --------------------------------------------------------
(1)  530/     358 :                     
(1)  531/     358 :                     gemaSetTrackVol:
(1)  532/     358 : 6100 FF30           		bsr	sndReq_Enter
(1)  533/     35C : 3E3C 0006           		move.w	#$06,d7		; Command $06
(1)  534/     360 : 6100 FF54           		bsr	sndReq_scmd
(1)  535/     364 : 1E01                		move.b	d1,d7		; d0.b Volume data <--
(1)  536/     366 : 6100 FF68           		bsr	sndReq_sbyte
(1)  537/     36A : 1E00                		move.b	d0,d7		; d1.b Slot
(1)  538/     36C : 6100 FF62           		bsr	sndReq_sbyte
(1)  539/     370 : 6000 FF36           		bra 	sndReq_Exit
(1)  540/     374 :                     
(1)  541/     374 :                     ; --------------------------------------------------------
(1)  542/     374 :                     ; gemaSetBeats
(1)  543/     374 :                     ;
(1)  544/     374 :                     ; Sets global subbeats
(1)  545/     374 :                     ;
(1)  546/     374 :                     ; d0.w - sub-beats
(1)  547/     374 :                     ; --------------------------------------------------------
(1)  548/     374 :                     
(1)  549/     374 :                     ; TODO: find a way to calculate this and
(1)  550/     374 :                     ; explain to the user.
(1)  551/     374 :                     
(1)  552/     374 :                     gemaSetBeats:
(1)  553/     374 : 6100 FF14           		bsr	sndReq_Enter
(1)  554/     378 : 3E3C 0007           		move.w	#$07,d7		; Command $07
(1)  555/     37C : 6100 FF38           		bsr	sndReq_scmd
(1)  556/     380 : 3E00                		move.w	d0,d7
(1)  557/     382 : 6100 FF48           		bsr	sndReq_sword
(1)  558/     386 : 6000 FF20           		bra 	sndReq_Exit
(1)  559/     38A :                     
     206/     38A :                     		include	"system/md/video.asm"
(1)    1/     38A :                     ; ===========================================================================
(1)    2/     38A :                     ; ----------------------------------------------------------------
(1)    3/     38A :                     ; Genesis VDP section
(1)    4/     38A :                     ; ----------------------------------------------------------------
(1)    5/     38A :                     
(1)    6/     38A :                     ; ====================================================================
(1)    7/     38A :                     ; --------------------------------------------------------
(1)    8/     38A :                     ; Settings
(1)    9/     38A :                     ; --------------------------------------------------------
(1)   10/     38A :                     
(1)   11/     38A : =$18                 MAX_MDOBJ	equ 24		; MAX Objects
(1)   12/     38A : =$18                 MAX_MDDMATSK	equ 24		; MAX DMA BLAST entries
(1)   13/     38A : =$7FF                varNullVram	equ $07FF	; Default Blank cell
(1)   14/     38A : =$580                varPrintVram	equ $0580	; Default location of the PRINT text graphics
(1)   15/     38A : =$3                  varPrintPal	equ 3		; Palette to use for the printable text
(1)   16/     38A :                     
(1)   17/     38A :                     ; --------------------------------------------------------
(1)   18/     38A :                     ; Variables
(1)   19/     38A :                     ; --------------------------------------------------------
(1)   20/     38A :                     
(1)   21/     38A :                     ; VDP Register $80
(1)   22/     38A : =$2                  HVStop		equ $02
(1)   23/     38A : =$10                 HintEnbl	equ $10
(1)   24/     38A : =$1                  bitHVStop	equ 1
(1)   25/     38A : =$4                  bitHintEnbl	equ 4
(1)   26/     38A :                     
(1)   27/     38A :                     ; VDP Register $81
(1)   28/     38A : =$40                 DispEnbl 	equ $40
(1)   29/     38A : =$20                 VintEnbl 	equ $20
(1)   30/     38A : =$10                 DmaEnbl		equ $10
(1)   31/     38A : =$6                  bitDispEnbl	equ 6
(1)   32/     38A : =$5                  bitVintEnbl	equ 5
(1)   33/     38A : =$4                  bitDmaEnbl	equ 4
(1)   34/     38A : =$3                  bitV30		equ 3
(1)   35/     38A :                     
(1)   36/     38A :                     ; vdp_ctrl READ bits (full WORD)
(1)   37/     38A : =$9                  bitFifoE	equ 9		; DMA FIFO empty
(1)   38/     38A : =$8                  bitFifoF	equ 8		; DMA FIFO full
(1)   39/     38A : =$7                  bitVInt		equ 7		; Vertical interrupt
(1)   40/     38A : =$6                  bitSprOvr	equ 6		; Sprite overflow
(1)   41/     38A : =$5                  bitSprCol	equ 5		; Sprite collision
(1)   42/     38A : =$4                  bitOdd		equ 4		; EVEN or ODD frame displayed on interlace mode
(1)   43/     38A : =$3                  bitVBlk		equ 3		; Inside VBlank
(1)   44/     38A : =$2                  bitHBlk		equ 2		; Inside HBlank
(1)   45/     38A : =$1                  bitDma		equ 1		; Only works for FILL and COPY
(1)   46/     38A : =$0                  bitPal		equ 0
(1)   47/     38A :                     
(1)   48/     38A :                     ; md_bg_flags
(1)   49/     38A : =$0                  bitDrwR		equ 0
(1)   50/     38A : =$1                  bitDrwL		equ 1
(1)   51/     38A : =$2                  bitDrwD		equ 2
(1)   52/     38A : =$3                  bitDrwU		equ 3
(1)   53/     38A : =$6                  bitMarsBg	equ 6
(1)   54/     38A : =$7                  bitBgOn		equ 7
(1)   55/     38A :                     
(1)   56/     38A :                     ; ====================================================================
(1)   57/     38A :                     ; ----------------------------------------------------------------
(1)   58/     38A :                     ; Structs
(1)   59/     38A :                     ; ----------------------------------------------------------------
(1)   60/     38A :                     
(1)   61/     38A :                     ; --------------------------------
(1)   62/     38A :                     ; object strct
(1)   63/     38A :                     ; --------------------------------
(1)   64/     38A :                     
(1)   65/     38A : (MACRO)              		strct 0
(1)   65/     38A : =$38A                GLBL_LASTPC     set *
(1)   65/FFFFFFFFFFFFC98E :                                     dephase
(1)   65/       0 :                                     phase 0
(1)   65/       0 : =$0                  GLBL_LASTORG    set *
(1)   66/       0 :                     obj_code	ds.l 1		; Object code, 0 == no object
(1)   67/       4 :                     obj_x		ds.l 1		; Object X Position 0000.0000
(1)   68/       8 :                     obj_y		ds.l 1		; Object Y Position 0000.0000
(1)   69/       C :                     obj_map		ds.l 1		; Object Sprite map data location
(1)   70/      10 :                     obj_dma		ds.l 1		; Object DMA map, 0 == Don't use DMA
(1)   71/      14 :                     obj_size	ds.l 1		; Object size IN CELLS: UDLR, also for collision detection.
(1)   72/      18 :                     obj_vram	ds.w 1		; Object VRAM position (If DMA enabled: output location)
(1)   73/      1A :                     obj_x_spd	ds.w 1		; Object X Speed 00.00
(1)   74/      1C :                     obj_y_spd	ds.w 1		; Object Y Speed 00.00
(1)   75/      1E :                     obj_anim_indx	ds.w 1		; * Object animation script index (obj_anim + obj_anim_indx)
(1)   76/      20 :                     obj_anim_id	ds.w 1		; * Object animation number: $ccss c-current s-saved
(1)   77/      22 :                     obj_frame	ds.w 1		; * Object current frame
(1)   78/      24 :                     obj_anim_spd	ds.b 1		; * Object animation delay
(1)   79/      25 :                     obj_index	ds.b 1		; Object code index
(1)   80/      26 :                     obj_set		ds.b 1		; Object settings
(1)   81/      27 :                     obj_subid	ds.b 1		; Object Sub-ID for Object placement
(1)   82/      28 :                     obj_status	ds.b 1		; Object custom status
(1)   83/      29 :                     obj_FREE	ds.b 1		; (FILLER align byte)
(1)   84/      2A :                     obj_ram		ds.b $40	; Object's own RAM
(1)   85/      6A :                     sizeof_mdobj	ds.l 0
(1)   86/      6C : (MACRO)              		endstrct
(1)   86/       0 :                                     org GLBL_LASTORG
(1)   86/     38A :                                     phase GLBL_LASTPC
(1)   87/     38A :                     ; 		message "\{sizeof_mdobj}"
(1)   88/     38A :                     
(1)   89/     38A :                     ; --------------------------------
(1)   90/     38A :                     ; ** obj_set
(1)   91/     38A : =$7                  bitobj_Mars	equ	7	; 32X ONLY: This objects draws to the 32X side (256-color sprite)
(1)   92/     38A : =$1                  bitobj_flipV	equ	1	; Set to flip object Vertically
(1)   93/     38A : =$0                  bitobj_flipH	equ	0	; Set to flip object Horizontally
(1)   94/     38A :                     
(1)   95/     38A :                     ; --------------------------------
(1)   96/     38A :                     ; ** obj_set
(1)   97/     38A :                     ; bitobj_air	equ	0	; set if floating/jumping
(1)   98/     38A :                     
(1)   99/     38A :                     ; --------------------------------
(1)  100/     38A :                     ; ** obj_size
(1)  101/     38A :                     ; at_u		equ	3
(1)  102/     38A :                     ; at_d		equ	2
(1)  103/     38A :                     ; at_l		equ	1
(1)  104/     38A :                     ; at_r		equ	0
(1)  105/     38A :                     
(1)  106/     38A :                     ; ====================================================================
(1)  107/     38A :                     ; ----------------------------------------------------------------
(1)  108/     38A :                     ; Video RAM
(1)  109/     38A :                     ; ----------------------------------------------------------------
(1)  110/     38A :                     
(1)  111/     38A : (MACRO)              			strct RAM_MdVideo
(1)  111/     38A : =$38A                GLBL_LASTPC     set *
(1)  111/       0 :                                     dephase
(1)  111/FFFFFFFFFFFFA004 :                                     phase RAM_MDVIDEO
(1)  111/FFFFFFFFFFFFA004 : =$FFFFFFFFFFFFA004   GLBL_LASTORG    set *
(1)  112/FFFFFFFFFFFFA004 :                     RAM_HorScroll		ds.l 240			; DMA Horizontal scroll data
(1)  113/FFFFFFFFFFFFA3C4 :                     RAM_VerScroll		ds.l 320/16			; DMA Vertical scroll data
(1)  114/FFFFFFFFFFFFA414 :                     RAM_Sprites		ds.w 8*80			; DMA Sprites
(1)  115/FFFFFFFFFFFFA914 :                     RAM_SprDrwPz		ds.w 8*80			; External sprite pieces
(1)  116/FFFFFFFFFFFFAE14 :                     RAM_Palette		ds.w 64				; DMA palette
(1)  117/FFFFFFFFFFFFAE94 :                     RAM_MdMarsPalFd		ds.w 256			; Target 32X palette for FadeIn/Out (NOTE: CPU intensive)
(1)  118/FFFFFFFFFFFFB094 :                     RAM_PaletteFd		ds.w 64				; Target MD palette for FadeIn/Out
(1)  119/FFFFFFFFFFFFB114 :                     RAM_VdpDmaList		ds.b $10*MAX_MDDMATSK		; DMA BLAST list for VBlank
(1)  120/FFFFFFFFFFFFB294 :                     RAM_Objects		ds.b MAX_MDOBJ*sizeof_mdobj	; Objects
(1)  121/FFFFFFFFFFFFBC84 :                     RAM_ObjDispList		ds.w MAX_MDOBJ			; half-RAM pointers for display (Obj|Extra)
(1)  122/FFFFFFFFFFFFBCB4 :                     RAM_VidPrntList		ds.w 3*64			; Video_Print list: Address, Type
(1)  123/FFFFFFFFFFFFBE34 :                     RAM_FrameCount		ds.l 1				; Frames counter
(1)  124/FFFFFFFFFFFFBE38 :                     RAM_SprDrwCntr		ds.w 1
(1)  125/FFFFFFFFFFFFBE3A :                     RAM_SprLinkNum		ds.w 1
(1)  126/FFFFFFFFFFFFBE3C :                     RAM_VdpExWrite		ds.w 1
(1)  127/FFFFFFFFFFFFBE3E :                     RAM_VdpDmaIndx		ds.w 1				; Current index in DMA BLAST list
(1)  128/FFFFFFFFFFFFBE40 :                     RAM_VdpDmaMod		ds.w 1				; Mid-write flag
(1)  129/FFFFFFFFFFFFBE42 :                     RAM_VidPrntVram		ds.w 1				; Default VRAM location for ASCII text used by Video_Print
(1)  130/FFFFFFFFFFFFBE44 :                     RAM_FadeMdReq		ds.w 1				; FadeIn/Out request for Genesis palette (01-FadeIn 02-FadeOut)
(1)  131/FFFFFFFFFFFFBE46 :                     RAM_FadeMdIncr		ds.w 1				; Fading increment count
(1)  132/FFFFFFFFFFFFBE48 :                     RAM_FadeMdDelay		ds.w 1				; Fading delay
(1)  133/FFFFFFFFFFFFBE4A :                     RAM_FadeMdTmr		ds.w 1				; Fading delay timer
(1)  134/FFFFFFFFFFFFBE4C :                     RAM_FadeMarsReq		ds.w 1				; Same thing but for 32X's 256-color (01-FadeIn 02-FadeOut)
(1)  135/FFFFFFFFFFFFBE4E :                     RAM_FadeMarsIncr	ds.w 1				; (Hint: Set to 4 to syncronize with Genesis' FadeIn/Out)
(1)  136/FFFFFFFFFFFFBE50 :                     RAM_FadeMarsDelay	ds.w 1
(1)  137/FFFFFFFFFFFFBE52 :                     RAM_FadeMarsTmr		ds.w 1
(1)  138/FFFFFFFFFFFFBE54 :                     RAM_MdMars_DrawAll	ds.w 1
(1)  139/FFFFFFFFFFFFBE56 :                     RAM_VdpRegs		ds.b 24				; VDP Register cache
(1)  140/FFFFFFFFFFFFBE6E :                     sizeof_mdvid		ds.l 0
(1)  141/FFFFFFFFFFFFBE74 : (MACRO)              			endstrct
(1)  141/FFFFFFFFFFFFA004 :                                     org GLBL_LASTORG
(1)  141/     38A :                                     phase GLBL_LASTPC
(1)  142/     38A :                     
(1)  143/     38A : (MACRO)              		erreport "MD VIDEO RAM",sizeof_mdvid-RAM_MdVideo,MAX_MdVideo
(1)  144/     38A :                     
(1)  145/     38A :                     ; ====================================================================
(1)  146/     38A :                     ; --------------------------------------------------------
(1)  147/     38A :                     ; Initialize Genesis video
(1)  148/     38A :                     ;
(1)  149/     38A :                     ; Breaks:
(1)  150/     38A :                     ; d6-d7/a5-a6
(1)  151/     38A :                     ; --------------------------------------------------------
(1)  152/     38A :                     
(1)  153/     38A :                     Video_Init:
(1)  154/     38A : 4DF8 A004           		lea	(RAM_MdVideo).w,a6		; Clear our RAM section
(1)  155/     38E : 3C3C 8000           		move.w	#$8000,d6
(1)  156/     392 : 3E3C 1E69           		move.w	#(sizeof_mdvid-RAM_MdVideo)-1,d7
(1)  157/     396 :                     .clrram:
(1)  158/     396 : 1CC6                		move.b	d6,(a6)+			; (Write the LSB zero)
(1)  159/     398 : 51CF FFFC           		dbf	d7,.clrram
(1)  160/     39C : 31FC 0001 BE3A      		move.w	#1,(RAM_SprLinkNum).w
(1)  161/     3A2 : 4DFA 0030           		lea	list_vdpregs(pc),a6		; Write "cache'd" VDP registers
(1)  162/     3A6 : 4BF8 BE56           		lea	(RAM_VdpRegs).w,a5
(1)  163/     3AA : 3E3C 0010           		move.w	#17-1,d7
(1)  164/     3AE :                     .loop:
(1)  165/     3AE : 1C1E                		move.b	(a6)+,d6
(1)  166/     3B0 : 1AC6                		move.b	d6,(a5)+
(1)  167/     3B2 : 51CF FFFA           		dbf	d7,.loop
(1)  168/     3B6 :                     
(1)  169/     3B6 :                     ; --------------------------------------------------------
(1)  170/     3B6 :                     ; Video_Update
(1)  171/     3B6 :                     ;
(1)  172/     3B6 :                     ; Writes register data stored in RAM to VDP
(1)  173/     3B6 :                     ; from registers $80 to $90
(1)  174/     3B6 :                     ;
(1)  175/     3B6 :                     ; WINDOW registers $91 and $92 are written
(1)  176/     3B6 :                     ; manually.
(1)  177/     3B6 :                     ;
(1)  178/     3B6 :                     ; Breaks:
(1)  179/     3B6 :                     ; d6-d7/a5-a6
(1)  180/     3B6 :                     ; --------------------------------------------------------
(1)  181/     3B6 :                     
(1)  182/     3B6 :                     Video_Update:
(1)  183/     3B6 : 4DF8 BE56           		lea	(RAM_VdpRegs).w,a6
(1)  184/     3BA : 4BF9 00C0 0004      		lea	(vdp_ctrl),a5
(1)  185/     3C0 : 3C3C 8000           		move.w	#$8000,d6
(1)  186/     3C4 : 7E10                		moveq	#17-1,d7
(1)  187/     3C6 :                     .loop:
(1)  188/     3C6 : 1C1E                		move.b	(a6)+,d6
(1)  189/     3C8 : 3A86                		move.w	d6,(a5)
(1)  190/     3CA : 0646 0100           		addi.w	#$0100,d6
(1)  191/     3CE : 51CF FFF6           		dbf	d7,.loop
(1)  192/     3D2 :                     .exit:
(1)  193/     3D2 : 4E75                		rts
(1)  194/     3D4 :                     
(1)  195/     3D4 :                     ; ------------------------------------------------
(1)  196/     3D4 :                     ; Default VDP register settings
(1)  197/     3D4 :                     ; ------------------------------------------------
(1)  198/     3D4 :                     
(1)  199/     3D4 :                     list_vdpregs:
(1)  200/     3D4 : 04                  		dc.b $04			; No HBlank interrupt, HV Counter on
(1)  201/     3D5 : 04                  		dc.b $04			; Display ON, No VBlank interrupt
(1)  202/     3D6 : 30                  		dc.b (($C000)>>10)		; Layer A at VRAM $C000 (%00xxx000)
(1)  203/     3D7 : 34                  		dc.b (($D000)>>10)		; Window  at VRAM $D000 (%00xxxxy0)
(1)  204/     3D8 : 07                  		dc.b (($E000)>>13)		; Layer B at VRAM $E000 (%00000xxx)
(1)  205/     3D9 : 7C                  		dc.b (($F800)>>9)		; Sprites at VRAM $F800 (%0xxxxxxy) (OLD $F800)
(1)  206/     3DA : 00                  		dc.b $00			; Unused
(1)  207/     3DB : 00                  		dc.b $00			; Background color: $00
(1)  208/     3DC : 00                  		dc.b $00			; Unused
(1)  209/     3DD : 00                  		dc.b $00			; Unused
(1)  210/     3DE : 00                  		dc.b $00			; HInt line number trigger
(1)  211/     3DF : 00                  		dc.b (%000|%00)			; No ExtInt, Scroll: VSCR:full HSCR:full
(1)  212/     3E0 : 81                  		dc.b $81			; H40, No shadow mode, 320-pixel resolution mode
(1)  213/     3E1 : 3F                  		dc.b (($FC00)>>10)		; HScroll at VRAM $FC00 (%00xxxxxx)
(1)  214/     3E2 : 00                  		dc.b $00			; Unused
(1)  215/     3E3 : 02                  		dc.b $02			; VDP auto-increment: $02
(1)  216/     3E4 : 01                  		dc.b (%00<<4)|%01		; Scroll area size: V32 H64
(1)  217/     3E5 : 00                  		dc.b $00
(1)  218/     3E6 : 00                  		dc.b $00
(1)  219/     3E7 :                     		align 2
(1)  220/     3E8 :                     ; Default PRINT palette
(1)  221/     3E8 : 0000 0EEE 0CCC      ASCII_PAL:	dc.w $0000,$0EEE,$0CCC,$0AAA,$0888,$0444,$000E,$0008
              3EE : 0AAA 0888 0444 
              3F4 : 000E 0008          
(1)  222/     3F8 : 00EE 0088 00E0      		dc.w $00EE,$0088,$00E0,$0080,$0E00,$0800,$0000,$0000
              3FE : 0080 0E00 0800 
              404 : 0000 0000          
(1)  223/     408 :                     		align 2
(1)  224/     408 :                     
(1)  225/     408 :                     ; --------------------------------------------------------
(1)  226/     408 :                     ; Video_Clear
(1)  227/     408 :                     ;
(1)  228/     408 :                     ; Clear all video data from VRAM
(1)  229/     408 :                     ;
(1)  230/     408 :                     ; Breaks:
(1)  231/     408 :                     ; ALL
(1)  232/     408 :                     ; --------------------------------------------------------
(1)  233/     408 :                     
(1)  234/     408 :                     Video_Clear:
(1)  235/     408 :                     ; 		move.w	#0,d0			; Clears until $57F
(1)  236/     408 :                     ; 		move.w	#0,d1
(1)  237/     408 :                     ; 		move.w	#$57F*$20,d2
(1)  238/     408 :                     ; 		bsr	Video_Fill
(1)  239/     408 :                     
(1)  240/     408 :                     ; --------------------------------------------------------
(1)  241/     408 :                     ; Video_ClearScreen
(1)  242/     408 :                     ;
(1)  243/     408 :                     ; Clears ALL Genesis screens FG/BG/WIN
(1)  244/     408 :                     ;
(1)  245/     408 :                     ; Breaks:
(1)  246/     408 :                     ; d0-d2/d6-d7/a5-a6
(1)  247/     408 :                     ; --------------------------------------------------------
(1)  248/     408 :                     
(1)  249/     408 :                     Video_ClearScreen:
(1)  250/     408 : 7000                		moveq	#0,d0
(1)  251/     40A : 343C 1000           		move.w	#$1000,d2		; FG/BG size
(1)  252/     40E : 1238 BE58           		move.b	(RAM_VdpRegs+2).w,d1	; FG
(1)  253/     412 : 0241 0038           		andi.w	#%111000,d1
(1)  254/     416 : E149                		lsl.w	#8,d1
(1)  255/     418 : E549                		lsl.w	#2,d1
(1)  256/     41A : 6100 02EE           		bsr	Video_Fill
(1)  257/     41E : 1238 BE5A           		move.b	(RAM_VdpRegs+4).w,d1	; BG
(1)  258/     422 : 0241 0007           		andi.w	#%000111,d1
(1)  259/     426 : E149                		lsl.w	#8,d1
(1)  260/     428 : EB49                		lsl.w	#5,d1
(1)  261/     42A : 6100 02DE           		bsr	Video_Fill
(1)  262/     42E : 343C 1000           		move.w	#$1000,d2		; WD Size
(1)  263/     432 : 1238 BE59           		move.b	(RAM_VdpRegs+3).w,d1	; Window
(1)  264/     436 : 0241 003E           		andi.w	#%111110,d1
(1)  265/     43A : E149                		lsl.w	#8,d1
(1)  266/     43C : E549                		lsl.w	#2,d1
(1)  267/     43E : 6100 02CA           		bsr	Video_Fill
(1)  268/     442 : 4DF8 A004           		lea	(RAM_HorScroll).w,a6	; RAM cleanup
(1)  269/     446 : 3E3C 00EF           		move.w	#240-1,d7
(1)  270/     44A : 7C00                		moveq	#0,d6
(1)  271/     44C :                     .xnext:
(1)  272/     44C : 2CC6                		move.l	d6,(a6)+
(1)  273/     44E : 51CF FFFC           		dbf	d7,.xnext
(1)  274/     452 : 4DF8 A3C4           		lea	(RAM_VerScroll).w,a6
(1)  275/     456 : 3E3C 0013           		move.w	#(320/16)-1,d7
(1)  276/     45A :                     .ynext:
(1)  277/     45A : 2CC6                		move.l	d6,(a6)+
(1)  278/     45C : 51CF FFFC           		dbf	d7,.ynext
(1)  279/     460 : 4DF8 A414           		lea	(RAM_Sprites).w,a6
(1)  280/     464 : 3E3C 009F           		move.w	#((80*8)/4)-1,d7
(1)  281/     468 :                     .snext:
(1)  282/     468 : 2CC6                		move.l	d6,(a6)+
(1)  283/     46A : 51CF FFFC           		dbf	d7,.snext
(1)  284/     46E : 4DF8 AE14           		lea	(RAM_Palette).w,a6
(1)  285/     472 : 4BF8 B094           		lea	(RAM_PaletteFd).w,a5
(1)  286/     476 : 3E3C 001F           		move.w	#(64/2)-1,d7
(1)  287/     47A :                     .pnext:
(1)  288/     47A : 2CC6                		move.l	d6,(a6)+
(1)  289/     47C : 2AC6                		move.l	d6,(a5)+
(1)  290/     47E : 51CF FFFA           		dbf	d7,.pnext
(1)  301/     482 : 4E75                		rts
(1)  302/     484 :                     
(1)  303/     484 :                     ; ====================================================================
(1)  304/     484 :                     ; ----------------------------------------------------------------
(1)  305/     484 :                     ; Palette fade system, Genesis side
(1)  306/     484 :                     ; ----------------------------------------------------------------
(1)  307/     484 :                     
(1)  308/     484 :                     ; --------------------------------------------------------
(1)  309/     484 :                     ; FULL Fade in
(1)  310/     484 :                     ; --------------------------------------------------------
(1)  311/     484 :                     
(1)  312/     484 :                     Video_FadeIn:
(1)  313/     484 : 31FC 0001 BE46      		move.w	#1,(RAM_FadeMdIncr).w	; Increment speed
(1)  314/     48A : 31FC 0002 BE4E      		move.w	#2,(RAM_FadeMarsIncr).w
(1)  315/     490 : 31FC 0001 BE48      		move.w	#1,(RAM_FadeMdDelay).w	; Delay by
(1)  316/     496 : 31FC 0000 BE50      		move.w	#0,(RAM_FadeMarsDelay).w
(1)  317/     49C : 31FC 0001 BE44      		move.w	#1,(RAM_FadeMdReq).w	; Fade-in task
(1)  318/     4A2 : 31FC 0001 BE4C      		move.w	#1,(RAM_FadeMarsReq).w
(1)  319/     4A8 : 6026                		bra	Video_WaitFade
(1)  320/     4AA :                     
(1)  321/     4AA :                     ; --------------------------------------------------------
(1)  322/     4AA :                     ; FULL Fade out
(1)  323/     4AA :                     ; --------------------------------------------------------
(1)  324/     4AA :                     
(1)  325/     4AA :                     Video_FadeOut:
(1)  326/     4AA : 31FC 0001 BE46      		move.w	#1,(RAM_FadeMdIncr).w	; Increment speed
(1)  327/     4B0 : 31FC 0002 BE4E      		move.w	#2,(RAM_FadeMarsIncr).w
(1)  328/     4B6 : 31FC 0001 BE48      		move.w	#1,(RAM_FadeMdDelay).w	; Delay by
(1)  329/     4BC : 31FC 0000 BE50      		move.w	#0,(RAM_FadeMarsDelay).w
(1)  330/     4C2 : 31FC 0002 BE44      		move.w	#2,(RAM_FadeMdReq).w	; Fade-in task
(1)  331/     4C8 : 31FC 0002 BE4C      		move.w	#2,(RAM_FadeMarsReq).w
(1)  332/     4CE : 4E71                		bra	Video_WaitFade
(1)  333/     4D0 :                     
(1)  334/     4D0 :                     ; --------------------------------------------------------
(1)  335/     4D0 :                     ; Video_WaitFade
(1)  336/     4D0 :                     ; --------------------------------------------------------
(1)  337/     4D0 :                     
(1)  338/     4D0 :                     Video_WaitFade:
(1)  339/     4D0 : 6100 0B24           		bsr	System_Render
(1)  347/     4D4 : 6140                		bsr	Video_DoPalFade
(1)  348/     4D6 : 3E38 BE44           		move.w	(RAM_FadeMdReq).w,d7
(1)  350/     4DA : 4A47                		tst.w	d7
(1)  351/     4DC : 66F2                		bne.s	Video_WaitFade
(1)  352/     4DE : 4E75                		rts
(1)  353/     4E0 :                     
(1)  354/     4E0 :                     ; --------------------------------------------------------
(1)  355/     4E0 :                     ; Video_RunFade
(1)  356/     4E0 :                     ;
(1)  357/     4E0 :                     ; Processes palette fading for one frame returns
(1)  358/     4E0 :                     ; status on exit.
(1)  359/     4E0 :                     ;
(1)  360/     4E0 :                     ; Returns:
(1)  361/     4E0 :                     ; bne - Still active, jump back.
(1)  362/     4E0 :                     ; beq - Finished
(1)  363/     4E0 :                     ;
(1)  364/     4E0 :                     ; Breaks:
(1)  365/     4E0 :                     ; All
(1)  366/     4E0 :                     ;
(1)  367/     4E0 :                     ; Notes:
(1)  368/     4E0 :                     ; Call System_Render FIRST before calling this
(1)  369/     4E0 :                     ; --------------------------------------------------------
(1)  370/     4E0 :                     
(1)  371/     4E0 :                     Video_RunFade:
(1)  379/     4E0 : 6134                		bsr	Video_DoPalFade
(1)  380/     4E2 : 3E38 BE44           		move.w	(RAM_FadeMdReq).w,d7
(1)  382/     4E6 : 4E75                		rts
(1)  383/     4E8 :                     
(1)  384/     4E8 :                     ; --------------------------------------------------------
(1)  385/     4E8 :                     ; Video_LoadPal
(1)  386/     4E8 :                     ;
(1)  387/     4E8 :                     ; Input:
(1)  388/     4E8 :                     ; a0 - Palette data
(1)  389/     4E8 :                     ; d0 - Start position
(1)  390/     4E8 :                     ; d1 - Number of colors
(1)  391/     4E8 :                     ;
(1)  392/     4E8 :                     ; Breaks:
(1)  393/     4E8 :                     ; d5-d7,a6
(1)  394/     4E8 :                     ; --------------------------------------------------------
(1)  395/     4E8 :                     
(1)  396/     4E8 :                     Video_FadePal:
(1)  397/     4E8 : 4DF8 B094           		lea	(RAM_PaletteFd).w,a6
(1)  398/     4EC : 4278 BE4A           		clr.w	(RAM_FadeMdTmr).w
(1)  399/     4F0 : 6004                		bra.s	vidMd_Pal
(1)  400/     4F2 :                     Video_LoadPal:
(1)  401/     4F2 : 4DF8 AE14           		lea	(RAM_Palette).w,a6
(1)  402/     4F6 :                     vidMd_Pal:
(1)  403/     4F6 : 2A48                		move.l	a0,a5
(1)  404/     4F8 : 7E00                		moveq	#0,d7
(1)  405/     4FA : 3E00                		move.w	d0,d7
(1)  406/     4FC : DE47                		add.w	d7,d7
(1)  407/     4FE : DCC7                		adda	d7,a6
(1)  408/     500 : 3E01                		move.w	d1,d7
(1)  409/     502 : 0447 0001           		subi.w	#1,d7
(1)  410/     506 : 3C02                		move.w	d2,d6
(1)  411/     508 : 0246 0001           		andi.w	#1,d6
(1)  412/     50C : E25E                		ror.w	#1,d6
(1)  413/     50E :                     .loop:
(1)  414/     50E : 3CDD                		move.w	(a5)+,(a6)+
(1)  415/     510 : 51CF FFFC           		dbf	d7,.loop
(1)  416/     514 : 4E75                		rts
(1)  417/     516 :                     
(1)  418/     516 :                     ; --------------------------------------------------------
(1)  419/     516 :                     ; Video_DoPalFade
(1)  420/     516 :                     ;
(1)  421/     516 :                     ; RAM_ReqFadeMars: (WORD)
(1)  422/     516 :                     ; $00 - No task or finished.
(1)  423/     516 :                     ; $01 - Fade in
(1)  424/     516 :                     ; $02 - Fade out to black
(1)  425/     516 :                     ;
(1)  426/     516 :                     ; NOTE: ONLY CALL THIS OUTSIDE OF VBLANK
(1)  427/     516 :                     ; --------------------------------------------------------
(1)  428/     516 :                     
(1)  429/     516 :                     Video_DoPalFade:
(1)  430/     516 : 0478 0001 BE4A      		subi.w	#1,(RAM_FadeMdTmr).w
(1)  431/     51C : 6A14                		bpl.s	.active
(1)  432/     51E : 31F8 BE48 BE4A      		move.w	(RAM_FadeMdDelay).w,(RAM_FadeMdTmr).w
(1)  433/     524 : 3E38 BE44           		move.w	(RAM_FadeMdReq).w,d7
(1)  434/     528 : DE47                		add.w	d7,d7
(1)  435/     52A : 3E3B 7008           		move.w	.fade_list(pc,d7.w),d7
(1)  436/     52E : 4EFB 7004           		jmp	.fade_list(pc,d7.w)
(1)  437/     532 :                     .active:
(1)  438/     532 : 4E75                		rts
(1)  439/     534 :                     
(1)  440/     534 :                     ; --------------------------------------------
(1)  441/     534 :                     
(1)  442/     534 :                     .fade_list:
(1)  443/     534 : 0006                		dc.w .fade_done-.fade_list
(1)  444/     536 : 0008                		dc.w .fade_in-.fade_list
(1)  445/     538 : 00AA                		dc.w .fade_out-.fade_list
(1)  446/     53A :                     
(1)  447/     53A :                     ; --------------------------------------------
(1)  448/     53A :                     ; No fade or finished.
(1)  449/     53A :                     ; --------------------------------------------
(1)  450/     53A :                     
(1)  451/     53A :                     .fade_done:
(1)  452/     53A : 4E75                		rts
(1)  453/     53C :                     
(1)  454/     53C :                     ; --------------------------------------------
(1)  455/     53C :                     ; Fade in
(1)  456/     53C :                     ; --------------------------------------------
(1)  457/     53C :                     
(1)  458/     53C :                     .fade_in:
(1)  459/     53C : 4DF8 B094           		lea	(RAM_PaletteFd).w,a6
(1)  460/     540 : 4BF8 AE14           		lea	(RAM_Palette).w,a5
(1)  461/     544 : 7040                		moveq	#64,d0				; Num of colors
(1)  462/     546 : 3238 BE46           		move.w	(RAM_FadeMdIncr).w,d1		; Speed
(1)  463/     54A : D241                		add.w	d1,d1
(1)  464/     54C : 3C00                		move.w	d0,d6
(1)  465/     54E : 4846                		swap	d6
(1)  466/     550 : 0440 0001           		subi.w	#1,d0
(1)  467/     554 :                     .nxt_pal:
(1)  468/     554 : 4242                		clr.w	d2		; Reset finished colorbits
(1)  469/     556 : 3E16                		move.w	(a6),d7		; d7 - Input
(1)  470/     558 : 3C15                		move.w	(a5),d6		; d6 - Output
(1)  471/     55A : 3607                		move.w	d7,d3		; RED
(1)  472/     55C : 3806                		move.w	d6,d4
(1)  473/     55E : 0246 0EE0           		andi.w	#%0000111011100000,d6
(1)  474/     562 : 0244 000E           		andi.w	#%0000000000001110,d4
(1)  475/     566 : 0243 000E           		andi.w	#%0000000000001110,d3
(1)  476/     56A : D841                		add.w	d1,d4
(1)  477/     56C : B843                		cmp.w	d3,d4
(1)  478/     56E : 6506                		bcs.s	.no_red
(1)  479/     570 : 3803                		move.w	d3,d4
(1)  480/     572 : 0042 0001           		ori.w	#%001,d2	; RED is ready
(1)  481/     576 :                     .no_red:
(1)  482/     576 : 8C44                		or.w	d4,d6
(1)  483/     578 : E949                		lsl.w	#4,d1
(1)  484/     57A : 3607                		move.w	d7,d3		; GREEN
(1)  485/     57C : 3806                		move.w	d6,d4
(1)  486/     57E : 0246 0E0E           		andi.w	#%0000111000001110,d6
(1)  487/     582 : 0244 00E0           		andi.w	#%0000000011100000,d4
(1)  488/     586 : 0243 00E0           		andi.w	#%0000000011100000,d3
(1)  489/     58A : D841                		add.w	d1,d4
(1)  490/     58C : B843                		cmp.w	d3,d4
(1)  491/     58E : 6506                		bcs.s	.no_grn
(1)  492/     590 : 3803                		move.w	d3,d4
(1)  493/     592 : 0042 0002           		ori.w	#%010,d2	; GREEN is ready
(1)  494/     596 :                     .no_grn:
(1)  495/     596 : 8C44                		or.w	d4,d6
(1)  496/     598 : E949                		lsl.w	#4,d1
(1)  497/     59A : 3607                		move.w	d7,d3		; BLUE
(1)  498/     59C : 3806                		move.w	d6,d4
(1)  499/     59E : 0246 00EE           		andi.w	#%0000000011101110,d6
(1)  500/     5A2 : 0244 0E00           		andi.w	#%0000111000000000,d4
(1)  501/     5A6 : 0243 0E00           		andi.w	#%0000111000000000,d3
(1)  502/     5AA : D841                		add.w	d1,d4
(1)  503/     5AC : B843                		cmp.w	d3,d4
(1)  504/     5AE : 6506                		bcs.s	.no_blu
(1)  505/     5B0 : 3803                		move.w	d3,d4
(1)  506/     5B2 : 0042 0004           		ori.w	#%100,d2	; BLUE is ready
(1)  507/     5B6 :                     .no_blu:
(1)  508/     5B6 : 8C44                		or.w	d4,d6
(1)  509/     5B8 : E049                		lsr.w	#8,d1
(1)  510/     5BA : 3AC6                		move.w	d6,(a5)+
(1)  511/     5BC : DCFC 0002           		adda	#2,a6
(1)  512/     5C0 : 0C42 0007           		cmpi.w	#%111,d2
(1)  513/     5C4 : 6608                		bne.s	.no_fnsh
(1)  514/     5C6 : 4846                		swap	d6
(1)  515/     5C8 : 0446 0001           		subi.w	#1,d6
(1)  516/     5CC : 4846                		swap	d6
(1)  517/     5CE :                     .no_fnsh:
(1)  518/     5CE : 51C8 FF84           		dbf	d0,.nxt_pal
(1)  519/     5D2 : 4846                		swap	d6
(1)  520/     5D4 : 4A46                		tst.w	d6
(1)  521/     5D6 : 6604                		bne.s	.no_move
(1)  522/     5D8 : 4278 BE44           		clr.w	(RAM_FadeMdReq).w
(1)  523/     5DC :                     .no_move:
(1)  524/     5DC : 4E75                		rts
(1)  525/     5DE :                     
(1)  526/     5DE :                     ; --------------------------------------------
(1)  527/     5DE :                     ; Fade out
(1)  528/     5DE :                     ; --------------------------------------------
(1)  529/     5DE :                     
(1)  530/     5DE :                     .fade_out:
(1)  531/     5DE : 4DF8 AE14           		lea	(RAM_Palette).w,a6
(1)  532/     5E2 : 7040                		moveq	#64,d0				; Num of colors
(1)  533/     5E4 : 3238 BE46           		move.w	(RAM_FadeMdIncr).w,d1		; Speed
(1)  534/     5E8 : 3C00                		move.w	d0,d6
(1)  535/     5EA : 4846                		swap	d6
(1)  536/     5EC : 0440 0001           		subi.w	#1,d0
(1)  537/     5F0 :                     .nxt_pal_o:
(1)  538/     5F0 : 4242                		clr.w	d2			; Reset finished colorbits
(1)  539/     5F2 : 3E16                		move.w	(a6),d7			; d7 - Input
(1)  540/     5F4 : 3C07                		move.w	d7,d6
(1)  541/     5F6 : 0247 0EE0           		andi.w	#%0000111011100000,d7
(1)  542/     5FA : 0246 000E           		andi.w	#%0000000000001110,d6
(1)  543/     5FE : 9C41                		sub.w	d1,d6
(1)  544/     600 : 6A06                		bpl.s	.no_red_o
(1)  545/     602 : 4246                		clr.w	d6
(1)  546/     604 : 0042 0001           		ori.w	#%001,d2		; RED is ready
(1)  547/     608 :                     .no_red_o:
(1)  548/     608 : 8E46                		or.w	d6,d7
(1)  549/     60A : E949                		lsl.w	#4,d1
(1)  550/     60C : 3C07                		move.w	d7,d6
(1)  551/     60E : 0247 0E0E           		andi.w	#%0000111000001110,d7
(1)  552/     612 : 0246 00E0           		andi.w	#%0000000011100000,d6
(1)  553/     616 : 9C41                		sub.w	d1,d6
(1)  554/     618 : 6A06                		bpl.s	.no_grn_o
(1)  555/     61A : 4246                		clr.w	d6
(1)  556/     61C : 0042 0002           		ori.w	#%010,d2		; GREEN is ready
(1)  557/     620 :                     .no_grn_o:
(1)  558/     620 : 8E46                		or.w	d6,d7
(1)  559/     622 : E949                		lsl.w	#4,d1
(1)  560/     624 : 3C07                		move.w	d7,d6
(1)  561/     626 : 0247 00EE           		andi.w	#%0000000011101110,d7
(1)  562/     62A : 0246 0E00           		andi.w	#%0000111000000000,d6
(1)  563/     62E : 9C41                		sub.w	d1,d6
(1)  564/     630 : 6A06                		bpl.s	.no_blu_o
(1)  565/     632 : 4246                		clr.w	d6
(1)  566/     634 : 0042 0004           		ori.w	#%100,d2		; BLUE is ready
(1)  567/     638 :                     .no_blu_o:
(1)  568/     638 : 8E46                		or.w	d6,d7
(1)  569/     63A : E049                		lsr.w	#8,d1
(1)  570/     63C : 3CC7                		move.w	d7,(a6)+
(1)  571/     63E : 0C42 0007           		cmpi.w	#%111,d2
(1)  572/     642 : 6608                		bne.s	.no_fnsh_o
(1)  573/     644 : 4846                		swap	d6
(1)  574/     646 : 0446 0001           		subi.w	#1,d6
(1)  575/     64A : 4846                		swap	d6
(1)  576/     64C :                     .no_fnsh_o:
(1)  577/     64C : 51C8 FFA2           		dbf	d0,.nxt_pal_o
(1)  578/     650 : 4846                		swap	d6
(1)  579/     652 : 4A46                		tst.w	d6
(1)  580/     654 : 6604                		bne.s	.no_move_o
(1)  581/     656 : 4278 BE44           		clr.w	(RAM_FadeMdReq).w
(1)  582/     65A :                     .no_move_o:
(1)  583/     65A : 4E75                		rts
(1)  584/     65C :                     
(1)  585/     65C :                     ; ====================================================================
(1)  586/     65C :                     ; --------------------------------------------------------
(1)  587/     65C :                     ; Genesis DMA
(1)  588/     65C :                     ; --------------------------------------------------------
(1)  589/     65C :                     
(1)  590/     65C :                     ; --------------------------------------------------------
(1)  591/     65C :                     ; Video_DmaMkEntry
(1)  592/     65C :                     ;
(1)  593/     65C :                     ; Sets a new DMA transfer entry to the BLAST list
(1)  594/     65C :                     ;
(1)  595/     65C :                     ; *** CALL THIS OUTSIDE OF VBLANK ONLY ***
(1)  596/     65C :                     ;
(1)  597/     65C :                     ; d0.l - Art data Real-ROM location
(1)  598/     65C :                     ; d1.w - VRAM location cell_vram()
(1)  599/     65C :                     ; d2.w - Size
(1)  600/     65C :                     ;
(1)  601/     65C :                     ; Breaks:
(1)  602/     65C :                     ; d5-d7,a6
(1)  603/     65C :                     ; --------------------------------------------------------
(1)  604/     65C :                     
(1)  605/     65C :                     Video_DmaMkEntry:
(1)  606/     65C : 2A00                		move.l	d0,d5
(1)  607/     65E : DA42                		add.w	d2,d5
(1)  608/     660 : 6430                		bcc.s	.normal
(1)  609/     662 : 2A00                		move.l	d0,d5		; <-- DOUBLE TRANSFER
(1)  610/     664 : 3C01                		move.w	d1,d6
(1)  611/     666 : 2E05                		move.l	d5,d7		; Top
(1)  612/     668 : 0687 0001 0000      		addi.l	#$010000,d7
(1)  613/     66E : 0287 00FF 0000      		andi.l	#$FF0000,d7
(1)  614/     674 : 9E80                		sub.l	d0,d7
(1)  615/     676 : 6120                		bsr.s	.mk_set
(1)  616/     678 : 2A00                		move.l	d0,d5		; Bottom
(1)  617/     67A : 0685 0001 0000      		addi.l	#$010000,d5
(1)  618/     680 : 0285 00FF 0000      		andi.l	#$FF0000,d5
(1)  619/     686 : 2C05                		move.l	d5,d6
(1)  620/     688 : 9C80                		sub.l	d0,d6
(1)  621/     68A : 3E02                		move.w	d2,d7
(1)  622/     68C : 9E46                		sub.w	d6,d7
(1)  623/     68E : DC41                		add.w	d1,d6
(1)  624/     690 : 6006                		bra.s	.mk_set
(1)  625/     692 :                     .normal:
(1)  626/     692 : 2A00                		move.l	d0,d5
(1)  627/     694 : 3C01                		move.w	d1,d6
(1)  628/     696 : 3E02                		move.w	d2,d7
(1)  629/     698 :                     ; d7 - size
(1)  630/     698 :                     ; d6 - vram
(1)  631/     698 :                     ; d5 - data
(1)  632/     698 :                     .mk_set:
(1)  633/     698 : 4847                		swap	d7
(1)  634/     69A : 3E38 BE3E           		move.w	(RAM_VdpDmaIndx).w,d7
(1)  635/     69E : 0C47 0018           		cmpi.w	#MAX_MDDMATSK,d7
(1)  636/     6A2 : 6C64                		bge.s	.ran_out
(1)  637/     6A4 : E94F                		lsl.w	#4,d7			; Size $10
(1)  638/     6A6 : 4DF8 B114           		lea	(RAM_VdpDmaList).w,a6
(1)  639/     6AA : DCC7                		adda	d7,a6
(1)  640/     6AC : 4847                		swap	d7
(1)  641/     6AE : 31FC 0001 BE40      		move.w	#1,(RAM_VdpDmaMod).w
(1)  642/     6B4 : 5278 BE3E           		addq.w	#1,(RAM_VdpDmaIndx).w
(1)  643/     6B8 :                     
(1)  644/     6B8 : 0287 0000 FFFE      		andi.l	#$0000FFFE,d7
(1)  645/     6BE : EF8F                		lsl.l	#7,d7
(1)  646/     6C0 : E04F                		lsr.w	#8,d7
(1)  647/     6C2 : 0087 9400 9300      		ori.l	#$94009300,d7
(1)  648/     6C8 : 2CC7                		move.l	d7,(a6)+
(1)  649/     6CA : E28D                  		lsr.l	#1,d5			; d5 - Source
(1)  650/     6CC : 2E3C 9600 9500       		move.l	#$96009500,d7
(1)  651/     6D2 : 1E05                 		move.b	d5,d7
(1)  652/     6D4 : E08D                 		lsr.l	#8,d5
(1)  653/     6D6 : 4847                 		swap	d7
(1)  654/     6D8 : 1E05                 		move.b	d5,d7
(1)  655/     6DA : 2CC7                 		move.l	d7,(a6)+
(1)  656/     6DC : 3E3C 9700            		move.w	#$9700,d7
(1)  657/     6E0 : E08D                 		lsr.l	#8,d5
(1)  658/     6E2 : 1E05                 		move.b	d5,d7
(1)  659/     6E4 : 3CC7                 		move.w	d7,(a6)+
(1)  660/     6E6 : 3E06                		move.w	d6,d7			; Destination
(1)  661/     6E8 : 0286 0000 3FFF      		andi.l	#$3FFF,d6
(1)  662/     6EE : 0046 4000           		ori.w	#$4000,d6
(1)  663/     6F2 : E04F                		lsr.w	#8,d7
(1)  664/     6F4 : EC4F                		lsr.w	#6,d7
(1)  665/     6F6 : 0247 0003           		andi.w	#%11,d7
(1)  666/     6FA : 0047 0080           		ori.w	#$80,d7
(1)  667/     6FE : 3CC6                		move.w	d6,(a6)+
(1)  668/     700 : 3CC7                		move.w	d7,(a6)+
(1)  676/     702 : 31FC 0000 BE40      		move.w	#0,(RAM_VdpDmaMod).w
(1)  677/     708 :                     .ran_out:
(1)  678/     708 : 4E75                		rts
(1)  679/     70A :                     
(1)  680/     70A :                     ; --------------------------------------------------------
(1)  681/     70A :                     ; Video_Fill
(1)  682/     70A :                     ;
(1)  683/     70A :                     ; Fill data to VRAM
(1)  684/     70A :                     ;
(1)  685/     70A :                     ; d0.w - WORD to fill
(1)  686/     70A :                     ; d1.w - VRAM location cell_vram()
(1)  687/     70A :                     ; d2.w - Size
(1)  688/     70A :                     ;
(1)  689/     70A :                     ; Breaks:
(1)  690/     70A :                     ; d6-d7,a6
(1)  691/     70A :                     ;
(1)  692/     70A :                     ; Notes:
(1)  693/     70A :                     ; Size $0001 is invalid, writes in this order: $56781234
(1)  694/     70A :                     ; --------------------------------------------------------
(1)  695/     70A :                     
(1)  696/     70A :                     Video_Fill:
(1)  697/     70A : 4DF9 00C0 0004      		lea	(vdp_ctrl).l,a6
(1)  698/     710 : 3E3C 8100           		move.w	#$8100,d7
(1)  699/     714 : 1E38 BE57           		move.b	(RAM_VdpRegs+1).w,d7
(1)  700/     718 : 08C7 0004           		bset	#bitDmaEnbl,d7
(1)  701/     71C : 3C87                		move.w	d7,(a6)
(1)  702/     71E : 3E16                .dmaw:		move.w	(a6),d7
(1)  703/     720 : 0807 0001           		btst	#bitDma,d7
(1)  704/     724 : 66F8                		bne.s	.dmaw
(1)  705/     726 : 3CBC 8F01           		move.w	#$8F01,(a6)	; Increment $01
(1)  706/     72A : 3E02                		move.w	d2,d7		; d2 - Size
(1)  707/     72C : 0447 0001           		subi.w	#1,d7
(1)  708/     730 : 2C3C 9400 9300      		move.l	#$94009300,d6
(1)  709/     736 : 1C07                		move.b	d7,d6
(1)  710/     738 : 4846                		swap	d6
(1)  711/     73A : E04F                		lsr.w	#8,d7
(1)  712/     73C : 1C07                		move.b	d7,d6
(1)  713/     73E : 4846                		swap	d6
(1)  714/     740 : 2C86                		move.l	d6,(a6)
(1)  715/     742 : 3CBC 9780           		move.w	#$9780,(a6)	; DMA Fill mode
(1)  716/     746 : 3E01                		move.w	d1,d7		; d1 - Destination
(1)  717/     748 : 3C07                		move.w	d7,d6
(1)  718/     74A : 0246 3FFF           		andi.w	#$3FFF,d6
(1)  719/     74E : 0046 4000           		ori.w	#$4000,d6
(1)  720/     752 : 4846                		swap	d6
(1)  721/     754 : 3C07                		move.w	d7,d6
(1)  722/     756 : E04E                		lsr.w	#8,d6
(1)  723/     758 : EC4E                		lsr.w	#6,d6
(1)  724/     75A : 0246 0003           		andi.w	#%11,d6
(1)  725/     75E : 0046 0080           		ori.w	#$80,d6
(1)  726/     762 : 2C86                		move.l	d6,(a6)
(1)  727/     764 : 3D40 FFFC           		move.w	d0,-4(a6)
(1)  728/     768 : 3E16                .dma_w:		move.w	(a6),d7
(1)  729/     76A : 0807 0001           		btst	#bitDma,d7
(1)  730/     76E : 66F8                		bne.s	.dma_w
(1)  731/     770 : 3CBC 8F02           		move.w	#$8F02,(a6)	; Increment $02
(1)  732/     774 : 3E3C 8100           		move.w	#$8100,d7
(1)  733/     778 : 1E38 BE57           		move.b	(RAM_VdpRegs+1).w,d7
(1)  734/     77C : 3C87                		move.w	d7,(a6)
(1)  735/     77E : 4E75                		rts
(1)  736/     780 :                     
(1)  737/     780 :                     ; --------------------------------------------------------
(1)  738/     780 :                     ; Video_Copy
(1)  739/     780 :                     ;
(1)  740/     780 :                     ; Copy VRAM data to another location
(1)  741/     780 :                     ;
(1)  742/     780 :                     ; d0.w - VRAM Source cell_vram()
(1)  743/     780 :                     ; d1.w - VRAM Destination cell_vram()
(1)  744/     780 :                     ; d2.w - Size
(1)  745/     780 :                     ;
(1)  746/     780 :                     ; Breaks:
(1)  747/     780 :                     ; d6-d7,a6
(1)  748/     780 :                     ; --------------------------------------------------------
(1)  749/     780 :                     
(1)  750/     780 :                     ; TODO: test if this works again...
(1)  751/     780 :                     
(1)  752/     780 :                     Video_Copy:
(1)  753/     780 : 4DF9 00C0 0004      		lea	(vdp_ctrl),a6
(1)  754/     786 : 3E3C 8100           		move.w	#$8100,d7
(1)  755/     78A : 1E38 BE57           		move.b	(RAM_VdpRegs+1).w,d7
(1)  756/     78E : 08C7 0004           		bset	#bitDmaEnbl,d7
(1)  757/     792 : 3C87                		move.w	d7,(a6)
(1)  758/     794 : 3E16                .dmaw:		move.w	(a6),d7
(1)  759/     796 : 0807 0001           		btst	#bitDma,d7
(1)  760/     79A : 66F8                		bne.s	.dmaw
(1)  761/     79C : 3CBC 8F01           		move.w	#$8F01,(a6)		; Increment $01
(1)  762/     7A0 : 3E02                		move.w	d2,d7			; SIZE
(1)  763/     7A2 : 2C3C 9400 9300      		move.l	#$94009300,d6
(1)  764/     7A8 :                     ; 		lsr.w	#1,d7
(1)  765/     7A8 : 1C07                		move.b	d7,d6
(1)  766/     7AA : 4846                		swap	d6
(1)  767/     7AC : E04F                		lsr.w	#8,d7
(1)  768/     7AE : 1C07                		move.b	d7,d6
(1)  769/     7B0 : 4846                		swap	d6
(1)  770/     7B2 : 2C86                		move.l	d6,(a6)
(1)  771/     7B4 : 2C3C 9600 9500      		move.l	#$96009500,d6		; SOURCE
(1)  772/     7BA : 3E00                		move.w	d0,d7
(1)  773/     7BC : 1C07                		move.b	d7,d6
(1)  774/     7BE : 4846                		swap	d6
(1)  775/     7C0 : E04F                		lsr.w	#8,d7
(1)  776/     7C2 : 1C07                		move.b	d7,d6
(1)  777/     7C4 : 2C86                		move.l	d6,(a6)
(1)  778/     7C6 : 3CBC 97C0           		move.w	#$97C0,(a6)		; DMA Copy mode
(1)  779/     7CA : 2E02                		move.l	d2,d7			; DESTINATION
(1)  780/     7CC : 3C07                		move.w	d7,d6
(1)  781/     7CE : 0246 3FFF           		andi.w	#$3FFF,d6
(1)  782/     7D2 : 0046 4000           		ori.w	#$4000,d6
(1)  783/     7D6 : 4846                		swap	d6
(1)  784/     7D8 : 3C07                		move.w	d7,d6
(1)  785/     7DA : E04E                		lsr.w	#8,d6
(1)  786/     7DC : EC4E                		lsr.w	#6,d6
(1)  787/     7DE : 0246 0003           		andi.w	#%11,d6
(1)  788/     7E2 : 0046 00C0           		ori.w	#$C0,d6
(1)  789/     7E6 : 2C86                		move.l	d6,(a6)
(1)  790/     7E8 : 3D41 FFFC           		move.w	d1,-4(a6)
(1)  791/     7EC : 3E16                .dma_w:		move.w	(a6),d7
(1)  792/     7EE : 0807 0001           		btst	#bitDma,d7
(1)  793/     7F2 : 66F8                		bne.s	.dma_w
(1)  794/     7F4 : 3CBC 8F02           		move.w	#$8F02,(a6)		; Increment $02
(1)  795/     7F8 : 3E3C 8100           		move.w	#$8100,d7
(1)  796/     7FC : 1E38 BE57           		move.b	(RAM_VdpRegs+1).w,d7
(1)  797/     800 : 3C87                		move.w	d7,(a6)
(1)  798/     802 : 4E75                		rts
(1)  799/     804 :                     
(1)  800/     804 :                     ; --------------------------------------------------------
(1)  801/     804 :                     ; Load graphics using DMA manually
(1)  802/     804 :                     ;
(1)  803/     804 :                     ; Input:
(1)  804/     804 :                     ; d0.l - Graphics data pointer (NOT a0)
(1)  805/     804 :                     ; d1.w - cell_vram(vram_pos)
(1)  806/     804 :                     ; d2.w - Size
(1)  807/     804 :                     ;
(1)  808/     804 :                     ; Breaks:
(1)  809/     804 :                     ; d4-d7,a4
(1)  810/     804 :                     ;
(1)  811/     804 :                     ; Notes:
(1)  812/     804 :                     ; - For a faster transfer call this during VBlank
(1)  813/     804 :                     ; - 32X: MAKE SURE THE SH2 SIDE IS NOT READING ROM
(1)  814/     804 :                     ;        BEFORE CALLING THIS.
(1)  815/     804 :                     ; --------------------------------------------------------
(1)  816/     804 :                     
(1)  817/     804 :                     Video_LoadArt:
(1)  818/     804 : 2A00                		move.l	d0,d5
(1)  819/     806 : DA42                		add.w	d2,d5
(1)  820/     808 : 6430                		bcc.s	.normal
(1)  821/     80A : 2A00                		move.l	d0,d5		; <-- DOUBLE TRANSFER
(1)  822/     80C : 3C01                		move.w	d1,d6
(1)  823/     80E : 2E05                		move.l	d5,d7		; Top
(1)  824/     810 : 0687 0001 0000      		addi.l	#$010000,d7
(1)  825/     816 : 0287 00FF 0000      		andi.l	#$FF0000,d7
(1)  826/     81C : 9E80                		sub.l	d0,d7
(1)  827/     81E : 6120                		bsr.s	.mk_set
(1)  828/     820 : 2A00                		move.l	d0,d5		; Bottom
(1)  829/     822 : 0685 0001 0000      		addi.l	#$010000,d5
(1)  830/     828 : 0285 00FF 0000      		andi.l	#$FF0000,d5
(1)  831/     82E : 2C05                		move.l	d5,d6
(1)  832/     830 : 9C80                		sub.l	d0,d6
(1)  833/     832 : 3E02                		move.w	d2,d7
(1)  834/     834 : 9E46                		sub.w	d6,d7
(1)  835/     836 : DC41                		add.w	d1,d6
(1)  836/     838 : 6006                		bra.s	.mk_set
(1)  837/     83A :                     .normal:
(1)  838/     83A : 2A00                		move.l	d0,d5
(1)  839/     83C : 3C01                		move.w	d1,d6
(1)  840/     83E : 3E02                		move.w	d2,d7
(1)  841/     840 :                     ; d7 - size
(1)  842/     840 :                     ; d6 - vram
(1)  843/     840 :                     ; d5 - data
(1)  844/     840 :                     .mk_set:
(1)  845/     840 : 49F9 00C0 0004      		lea	(vdp_ctrl),a4
(1)  846/     846 : 383C 8100           		move.w	#$8100,d4		; DMA ON
(1)  847/     84A : 1838 BE57           		move.b	(RAM_VdpRegs+1).w,d4
(1)  848/     84E : 08C4 0004           		bset	#bitDmaEnbl,d4
(1)  849/     852 : 3884                		move.w	d4,(a4)
(1)  850/     854 :                     
(1)  865/     854 : 611A                		bsr.s	.shared_setup
(1)  866/     856 : 3886                		move.w	d6,(a4)
(1)  867/     858 : 6100 07EA           		bsr	System_DmaEnter_ROM
(1)  868/     85C : 3887                		move.w	d7,(a4)			; <-- second write
(1)  869/     85E : 6100 07E8           		bsr	System_DmaExit_ROM
(1)  870/     862 : 383C 8100           		move.w	#$8100,d4		; DMA OFF
(1)  871/     866 : 1838 BE57           		move.b	(RAM_VdpRegs+1).w,d4
(1)  872/     86A : 3884                		move.w	d4,(a4)
(1)  873/     86C :                     
(1)  895/     86C : 4E75                		rts
(1)  896/     86E :                     
(1)  897/     86E :                     .from_ram:
(1)  898/     86E : 4E75                		rts
(1)  899/     870 :                     
(1)  900/     870 :                     .shared_setup:
(1)  901/     870 : 0287 0000 FFFE      		andi.l	#$0000FFFE,d7
(1)  902/     876 : EF8F                		lsl.l	#7,d7
(1)  903/     878 : E04F                		lsr.w	#8,d7
(1)  904/     87A : 0087 9400 9300      		ori.l	#$94009300,d7
(1)  905/     880 : 2887                		move.l	d7,(a4)
(1)  906/     882 : E28D                  		lsr.l	#1,d5			; d5 - Source
(1)  907/     884 : 2E3C 9600 9500       		move.l	#$96009500,d7
(1)  908/     88A : 1E05                 		move.b	d5,d7
(1)  909/     88C : E08D                 		lsr.l	#8,d5
(1)  910/     88E : 4847                 		swap	d7
(1)  911/     890 : 1E05                 		move.b	d5,d7
(1)  912/     892 : 2887                 		move.l	d7,(a4)
(1)  913/     894 : 3E3C 9700            		move.w	#$9700,d7
(1)  914/     898 : E08D                 		lsr.l	#8,d5
(1)  915/     89A : 1E05                 		move.b	d5,d7
(1)  916/     89C : 3887                 		move.w	d7,(a4)
(1)  917/     89E : 3E06                		move.w	d6,d7			; Destination
(1)  918/     8A0 : 0286 0000 3FFF      		andi.l	#$3FFF,d6
(1)  919/     8A6 : 0046 4000           		ori.w	#$4000,d6
(1)  920/     8AA : E04F                		lsr.w	#8,d7
(1)  921/     8AC : EC4F                		lsr.w	#6,d7
(1)  922/     8AE : 0247 0003           		andi.w	#%11,d7
(1)  923/     8B2 : 0047 0080           		ori.w	#$80,d7
(1)  924/     8B6 : 4E75                		rts
(1)  925/     8B8 :                     
(1)  926/     8B8 :                     ; --------------------------------------------------------
(1)  927/     8B8 :                     ; Video_Render
(1)  928/     8B8 :                     ;
(1)  929/     8B8 :                     ; Call this during VBlank to update
(1)  930/     8B8 :                     ; visuals.
(1)  931/     8B8 :                     ; --------------------------------------------------------
(1)  932/     8B8 :                     
(1)  933/     8B8 :                     Video_Render:
(1)  934/     8B8 : 4DF9 00C0 0004      		lea	(vdp_ctrl),a6
(1)  935/     8BE : 3E3C 8100           		move.w	#$8100,d7		; DMA ON
(1)  936/     8C2 : 1E38 BE57           		move.b	(RAM_VdpRegs+1).w,d7
(1)  937/     8C6 : 08C7 0004           		bset	#bitDmaEnbl,d7
(1)  938/     8CA : 3C87                		move.w	d7,(a6)
(1)  939/     8CC : 6100 076E           		bsr	System_DmaEnter_RAM
(1)  940/     8D0 : 2CBC 9400 9328      		move.l	#$94009328,(a6)
(1)  941/     8D6 : 2CBC 96D1 95E2      		move.l	#$96009500|(RAM_VerScroll<<7&$FF0000)|(RAM_VerScroll>>1&$FF),(a6)
(1)  942/     8DC : 3CBC 977F           		move.w	#$9700|(RAM_VerScroll>>17&$7F),(a6)
(1)  943/     8E0 : 3CBC 4000           		move.w	#$4000,(a6)
(1)  944/     8E4 : 3F3C 0090           		move.w	#$0010|$80,-(sp)
(1)  945/     8E8 : 3C9F                		move.w	(sp)+,(a6)
(1)  946/     8EA : 2CBC 9401 93E0      		move.l	#$940193E0,(a6)
(1)  947/     8F0 : 2CBC 96D0 9502      		move.l	#$96009500|(RAM_HorScroll<<7&$FF0000)|(RAM_HorScroll>>1&$FF),(a6)
(1)  948/     8F6 : 3CBC 977F           		move.w	#$9700|(RAM_HorScroll>>17&$7F),(a6)
(1)  949/     8FA : 3CBC 7C00           		move.w	#$7C00,(a6)
(1)  950/     8FE : 3F3C 0083           		move.w	#$0003|$80,-(sp)
(1)  951/     902 : 3C9F                		move.w	(sp)+,(a6)
(1)  952/     904 : 2CBC 9402 9300      		move.l	#$94029300,(a6)
(1)  953/     90A : 2CBC 96D2 950A      		move.l	#$96009500|(RAM_Sprites<<7&$FF0000)|(RAM_Sprites>>1&$FF),(a6)
(1)  954/     910 : 3CBC 977F           		move.w	#$9700|(RAM_Sprites>>17&$7F),(a6)
(1)  955/     914 : 3CBC 7800           		move.w	#$7800,(a6)
(1)  956/     918 : 3F3C 0083           		move.w	#$0003|$80,-(sp)
(1)  957/     91C : 3C9F                		move.w	(sp)+,(a6)
(1)  958/     91E : 2CBC 9400 9340      		move.l	#$94009340,(a6)
(1)  959/     924 : 2CBC 96D7 950A      		move.l	#$96009500|(RAM_Palette<<7&$FF0000)|(RAM_Palette>>1&$FF),(a6)
(1)  960/     92A : 3CBC 977F           		move.w	#$9700|(RAM_Palette>>17&$7F),(a6)
(1)  961/     92E : 3CBC C000           		move.w	#$C000,(a6)
(1)  962/     932 : 3F3C 0080           		move.w	#$0000|$80,-(sp)
(1)  963/     936 : 3C9F                		move.w	(sp)+,(a6)
(1)  964/     938 : 6100 0706           		bsr	System_DmaExit_RAM
(1)  965/     93C : 3E3C 8100           		move.w	#$8100,d7
(1)  966/     940 : 1E38 BE57           		move.b	(RAM_VdpRegs+1).w,d7
(1)  967/     944 : 3C87                		move.w	d7,(a6)
(1)  968/     946 : 31FC 0001 BE3A      		move.w	#1,(RAM_SprLinkNum).w	; Reset SPRITE LINK number
(1)  969/     94C :                     
(1)  970/     94C :                     	; Process DMA BLAST from here
(1)  971/     94C :                     
(1)  972/     94C :                     ; --------------------------------------------------------
(1)  973/     94C :                     ; Video_DmaBlast
(1)  974/     94C :                     ;
(1)  975/     94C :                     ; Process DMA tasks from a predefined list in RAM
(1)  976/     94C :                     ;
(1)  977/     94C :                     ; Breaks:
(1)  978/     94C :                     ; d5-d7,a3-a4
(1)  979/     94C :                     ;
(1)  980/     94C :                     ; *** Call this on VBlank ONLY ***
(1)  981/     94C :                     ;
(1)  982/     94C :                     ; NOTE:
(1)  983/     94C :                     ; For 32X this code MUST be located on RAM as it
(1)  984/     94C :                     ; writes the RV from ROM access
(1)  985/     94C :                     ; --------------------------------------------------------
(1)  986/     94C :                     
(1)  987/     94C :                     ; Format:
(1)  988/     94C :                     ; dc.w $94xx,$93xx		; Size
(1)  989/     94C :                     ; dc.w $96xx,$95xx,$97xx	; Source
(1)  990/     94C :                     ; dc.l $4xxx008x 		; VDP output + DMA bit
(1)  991/     94C :                     ; dc.w $xxxx			; SegaCD/CD32X only: graphics word patch
(1)  992/     94C :                     
(1)  993/     94C :                     Video_DmaBlast:
(1)  994/     94C : 4A78 BE40           		tst.w	(RAM_VdpDmaMod).w		; Got mid-write?
(1)  995/     950 : 664C                		bne.s	.exit				; then can't transfer.
(1)  996/     952 : 4A78 BE3E           		tst.w	(RAM_VdpDmaIndx).w		; Any requests?
(1)  997/     956 : 6746                		beq.s	.exit
(1)  998/     958 : 49F9 00C0 0004      		lea	(vdp_ctrl),a4			; Enter processing loop
(1)  999/     95E : 47F8 B114           		lea	(RAM_VdpDmaList).w,a3
(1) 1000/     962 : 3E3C 8100           		move.w	#$8100,d7			; DMA ON
(1) 1001/     966 : 1E38 BE57           		move.b	(RAM_VdpRegs+1).w,d7
(1) 1002/     96A : 08C7 0004           		bset	#bitDmaEnbl,d7
(1) 1003/     96E : 3887                		move.w	d7,(a4)
(1) 1004/     970 : 6100 06D2           		bsr	System_DmaEnter_ROM		; Request Z80 stop and SH2 backup
(1) 1005/     974 : 4A78 BE3E           .next:		tst.w	(RAM_VdpDmaIndx).w
(1) 1006/     978 : 6716                		beq.s	.end
(1) 1030/     97A : 289B                		move.l	(a3)+,(a4)		; Size
(1) 1031/     97C : 289B                		move.l	(a3)+,(a4)		; Source
(1) 1032/     97E : 389B                		move.w	(a3)+,(a4)
(1) 1033/     980 : 389B                		move.w	(a3)+,(a4)		; Destination
(1) 1034/     982 : 389B                		move.w	(a3)+,(a4)		; *** CPU freezes ***
(1) 1035/     984 : D6FC 0002           		adda	#2,a3
(1) 1037/     988 : 0478 0001 BE3E      		subi.w	#1,(RAM_VdpDmaIndx).w
(1) 1038/     98E : 60E4                		bra.s	.next
(1) 1039/     990 :                     .end:
(1) 1040/     990 : 6100 06B6           		bsr	System_DmaExit_ROM	; Resume Z80 and SH2 direct
(1) 1041/     994 : 3E3C 8100           		move.w	#$8100,d7		; DMA OFF
(1) 1042/     998 : 1E38 BE57           		move.b	(RAM_VdpRegs+1).w,d7
(1) 1043/     99C : 3887                		move.w	d7,(a4)
(1) 1044/     99E :                     .exit:
(1) 1045/     99E : 4E75                		rts
(1) 1046/     9A0 :                     
(1) 1047/     9A0 :                     ; ====================================================================
(1) 1048/     9A0 :                     ; ----------------------------------------------------------------
(1) 1049/     9A0 :                     ; Video routines for 32X
(1) 1050/     9A0 :                     ; ----------------------------------------------------------------
(1) 1051/     9A0 :                     
(1) 1052/     9A0 :                     ; --------------------------------------------------------
(1) 1053/     9A0 :                     ; Video_MarsGfxMode
(1) 1054/     9A0 :                     ; Sets graphics mode on the 32X side
(1) 1055/     9A0 :                     ;
(1) 1056/     9A0 :                     ; Input:
(1) 1057/     9A0 :                     ; d0 - Graphics mode number
(1) 1058/     9A0 :                     ;
(1) 1059/     9A0 :                     ; Uses:
(1) 1060/     9A0 :                     ; d7
(1) 1061/     9A0 :                     ;
(1) 1062/     9A0 :                     ; Notes:
(1) 1063/     9A0 :                     ; Changing modes takes 3 FRAMES to process.
(1) 1064/     9A0 :                     ; --------------------------------------------------------
(1) 1065/     9A0 :                     
(1) 1066/     9A0 :                     Video_MarsGfxMode:
(1) 1082/     9A0 : 4E75                		rts
(1) 1083/     9A2 :                     
(1) 1084/     9A2 :                     ; --------------------------------------------------------
(1) 1085/     9A2 :                     ; Video_Mars_SyncFrame
(1) 1086/     9A2 :                     ; --------------------------------------------------------
(1) 1087/     9A2 :                     
(1) 1088/     9A2 :                     Video_Mars_SyncFrame:
(1) 1094/     9A2 : 4E75                		rts
(1) 1095/     9A4 :                     
(1) 1096/     9A4 :                     ; --------------------------------------------------------
(1) 1097/     9A4 :                     ; Video_LoadPal_Mars
(1) 1098/     9A4 :                     ;
(1) 1099/     9A4 :                     ; Load Indexed palette directly to Buffer
(1) 1100/     9A4 :                     ;
(1) 1101/     9A4 :                     ; d0 - Start at
(1) 1102/     9A4 :                     ; d1 - Number of colors
(1) 1103/     9A4 :                     ; d2 - Priority bit OFF/ON
(1) 1104/     9A4 :                     ; --------------------------------------------------------
(1) 1105/     9A4 :                     
(1) 1106/     9A4 :                     Video_FadePal_Mars:
(1) 1130/     9A4 : 4E75                		rts
(1) 1131/     9A6 :                     
(1) 1132/     9A6 :                     ; --------------------------------------------------------
(1) 1133/     9A6 :                     ; Video_MarsPalFade
(1) 1134/     9A6 :                     ;
(1) 1135/     9A6 :                     ; Input:
(1) 1136/     9A6 :                     ; a0 - Palette data
(1) 1137/     9A6 :                     ; d0 - Number of colors
(1) 1138/     9A6 :                     ; d1 - Speed
(1) 1139/     9A6 :                     ;
(1) 1140/     9A6 :                     ; RAM_ReqFadeMars: (WORD)
(1) 1141/     9A6 :                     ; $00 - No task (or finished)
(1) 1142/     9A6 :                     ; $01 - Fade in
(1) 1143/     9A6 :                     ; $02 - Fade out to black
(1) 1144/     9A6 :                     ;
(1) 1145/     9A6 :                     ; CALL THIS OUTSIDE OF VBLANK
(1) 1146/     9A6 :                     ; --------------------------------------------------------
(1) 1147/     9A6 :                     
(1) 1148/     9A6 :                     ; TODO: luego ver que hago con el priority bit
(1) 1149/     9A6 :                     
(1) 1150/     9A6 :                     Video_MarsPalFade:
(1) 1309/     9A6 : 4E75                		rts
(1) 1310/     9A8 :                     
(1) 1311/     9A8 :                     
(1) 1312/     9A8 :                     ; ====================================================================
(1) 1313/     9A8 :                     ; ----------------------------------------------------------------
(1) 1314/     9A8 :                     ; Common screen routines
(1) 1315/     9A8 :                     ; ----------------------------------------------------------------
(1) 1316/     9A8 :                     
(1) 1317/     9A8 :                     ; --------------------------------------------------------
(1) 1318/     9A8 :                     ; Video_LoadMap
(1) 1319/     9A8 :                     ;
(1) 1320/     9A8 :                     ; Loads map data, in Horizontal order
(1) 1321/     9A8 :                     ; Can autodetect layer width, height and
(1) 1322/     9A8 :                     ; double interlace mode
(1) 1323/     9A8 :                     ;
(1) 1324/     9A8 :                     ; Input:
(1) 1325/     9A8 :                     ; a0   - Map data
(1) 1326/     9A8 :                     ; d0.l - locate(lyr,x,y) / 00|Layer|X|Y
(1) 1327/     9A8 :                     ; d1.l - mapsize(x,y) / Width|Height (in cells)
(1) 1328/     9A8 :                     ; d2.l - VRAM cell increment
(1) 1329/     9A8 :                     ;
(1) 1330/     9A8 :                     ; Breaks:
(1) 1331/     9A8 :                     ; d4-d7/a6
(1) 1332/     9A8 :                     ; --------------------------------------------------------
(1) 1333/     9A8 :                     
(1) 1334/     9A8 :                     Video_LoadMap:
(1) 1335/     9A8 : 4DF9 00C0 0000      		lea	(vdp_data),a6
(1) 1336/     9AE : 6100 01B6           		bsr	vid_PickLayer
(1) 1337/     9B2 : 3801                		move.w	d1,d4			; Start here
(1) 1338/     9B4 :                     .yloop:
(1) 1339/     9B4 : 4844                		swap	d4
(1) 1340/     9B6 : 2D45 0004           		move.l	d5,4(a6)
(1) 1341/     9BA : 2E01                		move.l	d1,d7
(1) 1342/     9BC : 4847                		swap	d7
(1) 1343/     9BE :                     .xloop:
(1) 1344/     9BE : 3818                		move.w	(a0)+,d4
(1) 1345/     9C0 : 0C44 FFFF           		cmpi.w	#-1,d4			; -1 ? TODO
(1) 1346/     9C4 : 6606                		bne.s	.nonull
(1) 1347/     9C6 : 383C 07FF           		move.w	#varNullVram,d4		; Replace with custom blank tile
(1) 1348/     9CA : 6002                		bra.s	.cont
(1) 1349/     9CC :                     .nonull:
(1) 1350/     9CC : D842                		add.w	d2,d4
(1) 1351/     9CE :                     .cont:
(1) 1352/     9CE :                     	; Check for double interlace
(1) 1353/     9CE : 4847                		swap	d7
(1) 1354/     9D0 : 1E38 BE62           		move.b	(RAM_VdpRegs+$C).w,d7
(1) 1355/     9D4 : 0247 0006           		andi.w	#%110,d7
(1) 1356/     9D8 : 0C47 0006           		cmpi.w	#%110,d7
(1) 1357/     9DC : 660E                		bne.s	.nodble
(1) 1358/     9DE : 3E04                		move.w	d4,d7
(1) 1359/     9E0 : E24F                		lsr.w	#1,d7
(1) 1360/     9E2 : 0247 07FF           		andi.w	#$7FF,d7
(1) 1361/     9E6 : 0244 F800           		andi.w	#$F800,d4
(1) 1362/     9EA : 8847                		or.w	d7,d4
(1) 1363/     9EC :                     .nodble:
(1) 1364/     9EC : 4847                		swap	d7
(1) 1365/     9EE : 3C84                		move.w	d4,(a6)
(1) 1366/     9F0 : 51CF FFCC           		dbf	d7,.xloop
(1) 1367/     9F4 : DA86                		add.l	d6,d5
(1) 1368/     9F6 : 4844                		swap	d4
(1) 1369/     9F8 : 51CC FFBA           		dbf	d4,.yloop
(1) 1370/     9FC : 4E75                		rts
(1) 1371/     9FE :                     
(1) 1372/     9FE :                     ; ; --------------------------------------------------------
(1) 1373/     9FE :                     ; ; Video_LoadMap_Vert
(1) 1374/     9FE :                     ; ;
(1) 1375/     9FE :                     ; ; Load map data, Vertical order
(1) 1376/     9FE :                     ; ;
(1) 1377/     9FE :                     ; ; a0 - Map data
(1) 1378/     9FE :                     ; ; d0 | LONG - 00|Lyr|X|Y,  locate(lyr,x,y)
(1) 1379/     9FE :                     ; ; d1 | LONG - Width|Height (cells),  mapsize(x,y)
(1) 1380/     9FE :                     ; ; d2 | WORD - VRAM
(1) 1381/     9FE :                     ;
(1) 1382/     9FE :                     ; ; Breaks:
(1) 1383/     9FE :                     ; ; a4-a5,d4-d7
(1) 1384/     9FE :                     ; ; --------------------------------------------------------
(1) 1385/     9FE :                     ;
(1) 1386/     9FE :                     ; Video_LoadMap_Vert:
(1) 1387/     9FE :                     ; 		lea	(vdp_data),a4
(1) 1388/     9FE :                     ; 		bsr	vid_PickLayer
(1) 1389/     9FE :                     ; 		move.l	d1,d5		; Start here
(1) 1390/     9FE :                     ; 		swap	d5
(1) 1391/     9FE :                     ; .xloop:
(1) 1392/     9FE :                     ; 		swap	d5
(1) 1393/     9FE :                     ; 		move.l	d4,-(sp)
(1) 1394/     9FE :                     ; 		move.w	d1,d7
(1) 1395/     9FE :                     ; 		btst	#2,(RAM_VdpRegs+$C).w
(1) 1396/     9FE :                     ; 		beq.s	.yloop
(1) 1397/     9FE :                     ; 		lsr.w	#1,d7
(1) 1398/     9FE :                     ; .yloop:
(1) 1399/     9FE :                     ; 		move.l	d4,4(a4)
(1) 1400/     9FE :                     ; 		move.w	(a0),d5
(1) 1401/     9FE :                     ; 		cmpi.w	#-1,d5
(1) 1402/     9FE :                     ; 		bne.s	.nonull
(1) 1403/     9FE :                     ; 		move.w	#varNullVram,d5
(1) 1404/     9FE :                     ; 		bra.s	.cont
(1) 1405/     9FE :                     ; .nonull:
(1) 1406/     9FE :                     ; 		add.w	d2,d5
(1) 1407/     9FE :                     ; .cont:
(1) 1408/     9FE :                     ; 		swap	d7
(1) 1409/     9FE :                     ; 		adda	#2,a0
(1) 1410/     9FE :                     ; 		btst	#2,(RAM_VdpRegs+$C).w
(1) 1411/     9FE :                     ; 		beq.s	.nodble
(1) 1412/     9FE :                     ; 		adda	#2,a0
(1) 1413/     9FE :                     ; 		move.w	d5,d7
(1) 1414/     9FE :                     ; 		lsr.w	#1,d7
(1) 1415/     9FE :                     ; 		andi.w	#$7FF,d7
(1) 1416/     9FE :                     ; 		andi.w	#$F800,d5
(1) 1417/     9FE :                     ; 		or.w	d7,d5
(1) 1418/     9FE :                     ; .nodble:
(1) 1419/     9FE :                     ; 		swap	d7
(1) 1420/     9FE :                     ; 		move.w	d5,(a4)
(1) 1421/     9FE :                     ; 		add.l	d6,d4
(1) 1422/     9FE :                     ; 		dbf	d7,.yloop
(1) 1423/     9FE :                     ; .outdbl:
(1) 1424/     9FE :                     ; 		move.l	(sp)+,d4
(1) 1425/     9FE :                     ; 		add.l	#$20000,d4
(1) 1426/     9FE :                     ; 		swap	d5
(1) 1427/     9FE :                     ; 		dbf	d5,.xloop
(1) 1428/     9FE :                     ; 		rts
(1) 1429/     9FE :                     
(1) 1430/     9FE :                     ; ====================================================================
(1) 1431/     9FE :                     ; ----------------------------------------------------------------
(1) 1432/     9FE :                     ; Text PRINT system, for debugging or quick texts.
(1) 1433/     9FE :                     ; ----------------------------------------------------------------
(1) 1434/     9FE :                     
(1) 1435/     9FE :                     ; --------------------------------------------------------
(1) 1436/     9FE :                     ; Video_PrintInit
(1) 1437/     9FE :                     ;
(1) 1438/     9FE :                     ; Initializes the default Graphics and Palette
(1) 1439/     9FE :                     ; for the font.
(1) 1440/     9FE :                     ;
(1) 1441/     9FE :                     ; Input:
(1) 1442/     9FE :                     ; a0 | ASCII Graphics location
(1) 1443/     9FE :                     ; a1 | ASCII Palette
(1) 1444/     9FE :                     ;
(1) 1445/     9FE :                     ; Breaks:
(1) 1446/     9FE :                     ; ALL
(1) 1447/     9FE :                     ;
(1) 1448/     9FE :                     ; Notes:
(1) 1449/     9FE :                     ; * Requires ASCII font graphics starting from $20
(1) 1450/     9FE :                     ; (" ") to $7F ("[DEL]")
(1) 1451/     9FE :                     ; * CALL THIS ONLY IF DISPLAY IS OFF OR DURING VBLANK
(1) 1452/     9FE :                     ; * 32X: MAKE SURE SH2 IS NOT READING ROM DATA
(1) 1453/     9FE :                     ; --------------------------------------------------------
(1) 1454/     9FE :                     
(1) 1455/     9FE :                     Video_PrintInit:
(1) 1456/     9FE :                     ; 		lea	(ASCII_FONT).l,a0
(1) 1457/     9FE :                     ; 		lea	(ASCII_PAL).l,a1
(1) 1458/     9FE : 2008                		move.l	a0,d0
(1) 1459/     A00 : 323C B000           		move.w	#cell_vram(varPrintVram),d1
(1) 1460/     A04 : 343C 0C00           		move.w	#($60*$20),d2			; From " " to "[DEL]"
(1) 1461/     A08 : 363C 6580           		move.w	#(varPrintPal<<13)|varPrintVram,d3
(1) 1462/     A0C : 0443 0020           		subi.w	#$20,d3
(1) 1463/     A10 : 31C3 BE42           		move.w	d3,(RAM_VidPrntVram).w
(1) 1464/     A14 : 6100 FDEE           		bsr	Video_LoadArt
(1) 1465/     A18 :                     Video_PrintPal:
(1) 1466/     A18 : 2049                		movea.l	a1,a0
(1) 1467/     A1A : 7030                		moveq	#(varPrintPal<<4),d0
(1) 1468/     A1C : 323C 000F           		move.w	#$0F,d1
(1) 1469/     A20 : 6100 FAD0           		bsr	Video_LoadPal	; Write to both palette buffers
(1) 1470/     A24 : 6000 FAC2           		bra	Video_FadePal
(1) 1471/     A28 :                     
(1) 1472/     A28 :                     ; --------------------------------------------------------
(1) 1473/     A28 :                     ; Video_Print
(1) 1474/     A28 :                     ;
(1) 1475/     A28 :                     ; Prints string to layer
(1) 1476/     A28 :                     ;
(1) 1477/     A28 :                     ; Input:
(1) 1478/     A28 :                     ; a0   - String data w/special characters +
(1) 1479/     A28 :                     ;        list of RAM locations to read
(1) 1480/     A28 :                     ; d0.l - Print location on-screen: locate(layer,x,y)
(1) 1481/     A28 :                     ;        ( 00|Lyr|X|Y )
(1) 1482/     A28 :                     ;
(1) 1483/     A28 :                     ; Breaks:
(1) 1484/     A28 :                     ; d4-d7,a4-a6
(1) 1485/     A28 :                     ;
(1) 1486/     A28 :                     ; Notes:
(1) 1487/     A28 :                     ; CALL Video_PrintInit FIRST
(1) 1488/     A28 :                     ;
(1) 1489/     A28 :                     ; Text string special codes:
(1) 1490/     A28 :                     ; $00 - End of line
(1) 1491/     A28 :                     ; $0A - Next line
(1) 1492/     A28 :                     ; "//b" - Show BYTE value
(1) 1493/     A28 :                     ; "//w" - Show WORD value
(1) 1494/     A28 :                     ; "//l" - Show LONG value
(1) 1495/     A28 :                     ;
(1) 1496/     A28 :                     ; If using //b //w //l:
(1) 1497/     A28 :                     ; After $00, put your RAM addresses in LONGS in the
(1) 1498/     A28 :                     ; same order you placed your value tags, don't forget to
(1) 1499/     A28 :                     ; put "align 2" at the end of the string or it will
(1) 1500/     A28 :                     ; trigger and ADDRESS ERROR
(1) 1501/     A28 :                     ; --------------------------------------------------------
(1) 1502/     A28 :                     
(1) 1503/     A28 :                     ; TODO: negative values might break
(1) 1504/     A28 :                     
(1) 1505/     A28 :                     Video_Print:
(1) 1506/     A28 : 48E7 0F0E           		movem.l	d4-d7/a4-a6,-(sp)
(1) 1507/     A2C : 4DF9 00C0 0000      		lea	(vdp_data).l,a6
(1) 1508/     A32 : 6100 0132           		bsr	vid_PickLayer
(1) 1509/     A36 : 4BF8 BCB4           		lea	(RAM_VidPrntList).w,a5
(1) 1510/     A3A :                     .newjump:
(1) 1511/     A3A : 2D45 0004           		move.l	d5,4(a6)
(1) 1512/     A3E : 2805                		move.l	d5,d4
(1) 1513/     A40 :                     .loop:
(1) 1514/     A40 : 1E18                		move.b	(a0)+,d7
(1) 1515/     A42 : 0247 00FF           		andi.w	#$FF,d7
(1) 1516/     A46 : 676C                		beq	.exit
(1) 1517/     A48 : 0C07 000A           		cmpi.b	#$0A,d7			; $0A - next line?
(1) 1518/     A4C : 672C                		beq.s	.next
(1) 1519/     A4E : 0C07 005C           		cmpi.b	#$5C,d7			; $5C ("\") special?
(1) 1520/     A52 : 6618                		bne.s	.puttext
(1) 1521/     A54 : 1E18                		move.b	(a0)+,d7		; Read next chr
(1) 1522/     A56 : 0C07 0062           		cmpi.b	#"b",d7
(1) 1523/     A5A : 6722                		beq.s	.isbyte
(1) 1524/     A5C : 0C07 0077           		cmpi.b	#"w",d7
(1) 1525/     A60 : 672E                		beq.s	.isword
(1) 1526/     A62 : 0C07 006C           		cmpi.b	#"l",d7
(1) 1527/     A66 : 673A                		beq.s	.islong
(1) 1528/     A68 : 3E3C 005C           		move.w	#"\\",d7		; normal "\"
(1) 1529/     A6C :                     .puttext:
(1) 1530/     A6C : DE78 BE42           		add.w	(RAM_VidPrntVram).w,d7	; VRAM pos increment
(1) 1531/     A70 : 3C87                		move.w	d7,(a6)
(1) 1532/     A72 : 0684 0002 0000      		addi.l	#$20000,d4
(1) 1533/     A78 : 60C6                		bra.s	.loop
(1) 1534/     A7A :                     .next:
(1) 1535/     A7A : DA86                		add.l	d6,d5			; Next line
(1) 1536/     A7C : 60BC                		bra.s	.newjump
(1) 1537/     A7E :                     
(1) 1538/     A7E :                     	; Set print values
(1) 1539/     A7E :                     .isbyte:
(1) 1540/     A7E : 2AC4                		move.l	d4,(a5)+
(1) 1541/     A80 : 3AFC 0001           		move.w	#1,(a5)+
(1) 1542/     A84 : 0684 0004 0000      		addi.l	#$40000,d4
(1) 1543/     A8A : 2D44 0004           		move.l	d4,4(a6)
(1) 1544/     A8E : 60B0                		bra	.loop
(1) 1545/     A90 :                     .isword:
(1) 1546/     A90 : 2AC4                		move.l	d4,(a5)+
(1) 1547/     A92 : 3AFC 0002           		move.w	#2,(a5)+
(1) 1548/     A96 : 0684 0008 0000      		addi.l	#$80000,d4
(1) 1549/     A9C : 2D44 0004           		move.l	d4,4(a6)
(1) 1550/     AA0 : 609E                		bra	.loop
(1) 1551/     AA2 :                     .islong:
(1) 1552/     AA2 : 2AC4                		move.l	d4,(a5)+
(1) 1553/     AA4 : 3AFC 0003           		move.w	#3,(a5)+
(1) 1554/     AA8 : 0684 0010 0000      		addi.l	#$100000,d4
(1) 1555/     AAE : 2D44 0004           		move.l	d4,4(a6)
(1) 1556/     AB2 : 608C                		bra	.loop
(1) 1557/     AB4 :                     .exit:
(1) 1558/     AB4 :                     
(1) 1559/     AB4 :                     	; ----------------------------------------
(1) 1560/     AB4 :                     	; Print values
(1) 1561/     AB4 :                     	;
(1) 1562/     AB4 :                     	; vvvv vvvv tttt
(1) 1563/     AB4 :                     	; v - vdp pos
(1) 1564/     AB4 :                     	; t - value type
(1) 1565/     AB4 :                     	; ----------------------------------------
(1) 1566/     AB4 :                     
(1) 1567/     AB4 :                     	; reading byte by byte because longs doesn't get
(1) 1568/     AB4 :                     	; aligned after $00...
(1) 1569/     AB4 :                     
(1) 1570/     AB4 : 7800                		moveq	#0,d4
(1) 1571/     AB6 : 7A00                		moveq	#0,d5
(1) 1572/     AB8 : 7C00                		moveq	#0,d6
(1) 1573/     ABA : 4BF8 BCB4           		lea	(RAM_VidPrntList).w,a5
(1) 1574/     ABE :                     .nextv:
(1) 1575/     ABE : 4A95                		tst.l	(a5)
(1) 1576/     AC0 : 6700 009E           		beq	.nothing
(1) 1577/     AC4 :                     
(1) 1578/     AC4 :                     	; grab value
(1) 1579/     AC4 : 7800                		moveq	#0,d4
(1) 1580/     AC6 : 1818                		move.b	(a0)+,d4
(1) 1581/     AC8 : E19C                		rol.l	#8,d4
(1) 1582/     ACA : 1818                		move.b	(a0)+,d4
(1) 1583/     ACC : E19C                		rol.l	#8,d4
(1) 1584/     ACE : 1818                		move.b	(a0)+,d4
(1) 1585/     AD0 : E19C                		rol.l	#8,d4
(1) 1586/     AD2 : 1818                		move.b	(a0)+,d4
(1) 1587/     AD4 : 2844                		movea.l	d4,a4
(1) 1588/     AD6 : 7800                		moveq	#0,d4
(1) 1589/     AD8 :                     
(1) 1590/     AD8 :                     	; get value
(1) 1591/     AD8 : 3C2D 0004           		move.w	4(a5),d6
(1) 1592/     ADC : 0C46 0001           		cmpi.w	#1,d6		; byte?
(1) 1593/     AE0 : 660E                		bne.s	.vbyte
(1) 1594/     AE2 : 1814                		move.b	(a4),d4
(1) 1595/     AE4 : 2D55 0004           		move.l	(a5),4(a6)
(1) 1596/     AE8 : E91C                		rol.b	#4,d4
(1) 1597/     AEA : 6158                		bsr.s	.donibl
(1) 1598/     AEC : E91C                		rol.b	#4,d4
(1) 1599/     AEE : 6154                		bsr.s	.donibl
(1) 1600/     AF0 :                     .vbyte:
(1) 1601/     AF0 : 0C46 0002           		cmpi.w	#2,d6		; word?
(1) 1602/     AF4 : 661C                		bne.s	.vword
(1) 1603/     AF6 : 1814                		move.b	(a4),d4
(1) 1604/     AF8 : E15C                		rol.w	#8,d4
(1) 1605/     AFA : 182C 0001           		move.b	1(a4),d4
(1) 1606/     AFE : 2D55 0004           		move.l	(a5),4(a6)
(1) 1607/     B02 : E95C                		rol.w	#4,d4
(1) 1608/     B04 : 613E                		bsr.s	.donibl
(1) 1609/     B06 : E95C                		rol.w	#4,d4
(1) 1610/     B08 : 613A                		bsr.s	.donibl
(1) 1611/     B0A : E95C                		rol.w	#4,d4
(1) 1612/     B0C : 6136                		bsr.s	.donibl
(1) 1613/     B0E : E95C                		rol.w	#4,d4
(1) 1614/     B10 : 6132                		bsr.s	.donibl
(1) 1615/     B12 :                     .vword:
(1) 1616/     B12 : 0C46 0003           		cmpi.w	#3,d6		; long?
(1) 1617/     B16 : 6624                		bne.s	.vlong
(1) 1618/     B18 : 1814                		move.b	(a4),d4
(1) 1619/     B1A : E19C                		rol.l	#8,d4
(1) 1620/     B1C : 182C 0001           		move.b	1(a4),d4
(1) 1621/     B20 : E19C                		rol.l	#8,d4
(1) 1622/     B22 : 182C 0002           		move.b	2(a4),d4
(1) 1623/     B26 : E19C                		rol.l	#8,d4
(1) 1624/     B28 : 182C 0003           		move.b	3(a4),d4
(1) 1625/     B2C : 2D55 0004           		move.l	(a5),4(a6)
(1) 1626/     B30 : 3C3C 0007           		move.w	#7,d6
(1) 1627/     B34 : E99C                .lngloop:	rol.l	#4,d4
(1) 1628/     B36 : 610C                		bsr.s	.donibl
(1) 1629/     B38 : 51CE FFFA           		dbf	d6,.lngloop
(1) 1630/     B3C :                     .vlong:
(1) 1631/     B3C : 429D                		clr.l	(a5)+
(1) 1632/     B3E : 425D                		clr.w	(a5)+
(1) 1633/     B40 : 6000 FF7C           		bra	.nextv
(1) 1634/     B44 :                     
(1) 1635/     B44 :                     ; make nibble byte
(1) 1636/     B44 :                     .donibl:
(1) 1637/     B44 : 3A04                		move.w	d4,d5
(1) 1638/     B46 : 0245 000F           		andi.w	#%1111,d5
(1) 1639/     B4A : 0C05 000A           		cmpi.b	#$A,d5
(1) 1640/     B4E : 6D04                		blt.s	.lowr
(1) 1641/     B50 : DA3C 0007           		add.b	#7,d5
(1) 1642/     B54 :                     .lowr:
(1) 1643/     B54 : DA7C 0030           		add.w	#"0",d5
(1) 1644/     B58 : DA78 BE42           		add.w	(RAM_VidPrntVram).w,d5
(1) 1645/     B5C : 3C85                		move.w	d5,(a6)
(1) 1646/     B5E : 4E75                		rts
(1) 1647/     B60 :                     ; exit
(1) 1648/     B60 :                     .nothing:
(1) 1649/     B60 : 4CDF 70F0           		movem.l	(sp)+,d4-d7/a4-a6
(1) 1650/     B64 : 4E75                		rts
(1) 1651/     B66 :                     
(1) 1652/     B66 :                     ; ------------------------------------------------
(1) 1653/     B66 :                     ; Shared: pick layer / x pos / y pos and set size
(1) 1654/     B66 :                     ;
(1) 1655/     B66 :                     ; Input:
(1) 1656/     B66 :                     ; d0.l - locate(layer,x,y)
(1) 1657/     B66 :                     ;
(1) 1658/     B66 :                     ; Returns:
(1) 1659/     B66 :                     ; d5 - VRAM position
(1) 1660/     B66 :                     ; d6 - Width
(1) 1661/     B66 :                     ; ------------------------------------------------
(1) 1662/     B66 :                     
(1) 1663/     B66 :                     vid_PickLayer:
(1) 1664/     B66 : 2C00                		move.l	d0,d6			; d6 - pick layer
(1) 1665/     B68 : 4846                		swap	d6
(1) 1666/     B6A : 0806 0000           		btst	#0,d6
(1) 1667/     B6E : 671C                		beq.s	.plawnd
(1) 1668/     B70 : 1A38 BE5A           		move.b	(RAM_VdpRegs+4).w,d5	; BG
(1) 1669/     B74 : 3805                		move.w	d5,d4
(1) 1670/     B76 : E24C                		lsr.w	#1,d4
(1) 1671/     B78 : 0244 0003           		andi.w	#%11,d4
(1) 1672/     B7C : 4845                		swap	d5
(1) 1673/     B7E : 3A04                		move.w	d4,d5
(1) 1674/     B80 : 4845                		swap	d5
(1) 1675/     B82 : 0245 0001           		andi.w	#1,d5
(1) 1676/     B86 : E14D                		lsl.w	#8,d5
(1) 1677/     B88 : EB4D                		lsl.w	#5,d5
(1) 1678/     B8A : 6024                		bra.s	.golyr
(1) 1679/     B8C :                     .plawnd:
(1) 1680/     B8C : 1A38 BE58           		move.b	(RAM_VdpRegs+2).w,d5	; FG
(1) 1681/     B90 : 0806 0001           		btst	#1,d6
(1) 1682/     B94 : 6704                		beq.s	.nowd
(1) 1683/     B96 : 1A38 BE59           		move.b	(RAM_VdpRegs+3).w,d5	; WINDOW
(1) 1684/     B9A :                     .nowd:
(1) 1685/     B9A : 3805                		move.w	d5,d4
(1) 1686/     B9C : E84C                		lsr.w	#4,d4
(1) 1687/     B9E : 0244 0003           		andi.w	#%11,d4
(1) 1688/     BA2 : 4845                		swap	d5
(1) 1689/     BA4 : 3A04                		move.w	d4,d5
(1) 1690/     BA6 : 4845                		swap	d5
(1) 1691/     BA8 : 0245 000E           		andi.w	#%00001110,d5
(1) 1692/     BAC : E14D                		lsl.w	#8,d5
(1) 1693/     BAE : E54D                		lsl.w	#2,d5
(1) 1694/     BB0 :                     .golyr:
(1) 1695/     BB0 : 0045 4000           		ori.w	#$4000,d5
(1) 1696/     BB4 : 3800                		move.w	d0,d4			; Y start pos
(1) 1697/     BB6 : 0244 00FF           		andi.w	#$FF,d4			; Y only
(1) 1698/     BBA : ED4C                		lsl.w	#6,d4
(1) 1699/     BBC : 1C38 BE66           		move.b	(RAM_VdpRegs+$10).w,d6
(1) 1700/     BC0 : 0246 0003           		andi.w	#%11,d6
(1) 1701/     BC4 : 670A                		beq.s	.thissz
(1) 1702/     BC6 : D844                		add.w	d4,d4			; H64
(1) 1703/     BC8 : 0246 0002           		andi.w	#%10,d6
(1) 1704/     BCC : 6702                		beq.s	.thissz
(1) 1705/     BCE : D844                		add.w	d4,d4			; H128
(1) 1706/     BD0 :                     .thissz:
(1) 1707/     BD0 : DA44                		add.w	d4,d5
(1) 1708/     BD2 : 3800                		move.w	d0,d4
(1) 1709/     BD4 : 0244 FF00           		andi.w	#$FF00,d4		; X only
(1) 1710/     BD8 : EE4C                		lsr.w	#7,d4
(1) 1711/     BDA : DA44                		add.w	d4,d5			; X add
(1) 1712/     BDC : 4845                		swap	d5
(1) 1713/     BDE : 7C00                		moveq	#0,d6
(1) 1714/     BE0 : 3C3C 0040           		move.w	#$40,d6			; Set jump size
(1) 1715/     BE4 : 1838 BE66           		move.b	(RAM_VdpRegs+$10).w,d4
(1) 1716/     BE8 : 0244 0003           		andi.w	#%11,d4
(1) 1717/     BEC : 670A                		beq.s	.thisszj
(1) 1718/     BEE : DC46                		add.w	d6,d6			; H64
(1) 1719/     BF0 : 0244 0002           		andi.w	#%10,d4
(1) 1720/     BF4 : 6702                		beq.s	.thisszj
(1) 1721/     BF6 : DC46                		add.w	d6,d6			; H128
(1) 1722/     BF8 :                     .thisszj:
(1) 1723/     BF8 : 4846                		swap	d6
(1) 1724/     BFA : 4E75                		rts
(1) 1725/     BFC :                     
(1) 1726/     BFC :                     ; ====================================================================
(1) 1727/     BFC :                     ; ----------------------------------------------------------------
(1) 1728/     BFC :                     ; Objects system
(1) 1729/     BFC :                     ; ----------------------------------------------------------------
(1) 1730/     BFC :                     
(1) 1731/     BFC :                     ; --------------------------------------------------------
(1) 1732/     BFC :                     ; Init/Clear Objects system
(1) 1733/     BFC :                     ; --------------------------------------------------------
(1) 1734/     BFC :                     
(1) 1735/     BFC :                     Objects_Clear:
(1) 1736/     BFC : 4DF8 B294           		lea	(RAM_Objects).w,a6
(1) 1737/     C00 : 3E3C 09EF           		move.w	#(sizeof_mdobj*MAX_MDOBJ)-1,d7
(1) 1738/     C04 :                     .clr:
(1) 1739/     C04 : 421E                		clr.b	(a6)+
(1) 1740/     C06 : 51CF FFFC           		dbf	d7,.clr
(1) 1741/     C0A : 4DF8 BC84           		lea	(RAM_ObjDispList).w,a6
(1) 1742/     C0E : 3E3C 0017           		move.w	#MAX_MDOBJ-1,d7
(1) 1743/     C12 :                     .clr_d:
(1) 1744/     C12 : 425E                		clr.w	(a6)+
(1) 1745/     C14 : 51CF FFFC           		dbf	d7,.clr_d
(1) 1746/     C18 : 31FC 0001 BE3A      		move.w	#1,(RAM_SprLinkNum).w
(1) 1747/     C1E : 4278 BE38           		clr.w	(RAM_SprDrwCntr).w
(1) 1748/     C22 : 4E75                		rts
(1) 1749/     C24 :                     
(1) 1750/     C24 :                     ; --------------------------------------------------------
(1) 1751/     C24 :                     ; Process object code
(1) 1752/     C24 :                     ; --------------------------------------------------------
(1) 1753/     C24 :                     
(1) 1754/     C24 :                     Objects_Run:
(1) 1755/     C24 : 4DF8 B294           		lea	(RAM_Objects).w,a6
(1) 1756/     C28 : 3E3C 0017           		move.w	#MAX_MDOBJ-1,d7
(1) 1757/     C2C :                     .next_one:
(1) 1758/     C2C : 2C16                		move.l	obj_code(a6),d6
(1) 1759/     C2E : 6708                		beq.s	.no_code	; Free slot
(1) 1760/     C30 : 2F07                		move.l	d7,-(sp)
(1) 1761/     C32 : 2A46                		move.l	d6,a5
(1) 1762/     C34 : 4E95                		jsr	(a5)
(1) 1763/     C36 : 2E1F                		move.l	(sp)+,d7
(1) 1764/     C38 :                     .no_code:
(1) 1765/     C38 : DCFC 006A           		adda	#sizeof_mdobj,a6
(1) 1766/     C3C : 51CF FFEE           		dbf	d7,.next_one
(1) 1767/     C40 : 4E75                		rts
(1) 1768/     C42 :                     
(1) 1769/     C42 :                     ; --------------------------------------------------------
(1) 1770/     C42 :                     ; Objects_Set
(1) 1771/     C42 :                     ;
(1) 1772/     C42 :                     ; Input:
(1) 1773/     C42 :                     ; d0.l - Object code location (0 - delete)
(1) 1774/     C42 :                     ; d1.w - Object slot
(1) 1775/     C42 :                     ; d2.b - Object sub-id (obj_subid)
(1) 1776/     C42 :                     ;
(1) 1777/     C42 :                     ; Uses:
(1) 1778/     C42 :                     ; d7,a5-a6
(1) 1779/     C42 :                     ; --------------------------------------------------------
(1) 1780/     C42 :                     
(1) 1781/     C42 :                     Objects_Set:
(1) 1782/     C42 : 48E7 0106           		movem.l	d7/a5-a6,-(sp)
(1) 1783/     C46 : 4DF8 B294           		lea	(RAM_Objects).w,a6
(1) 1784/     C4A : 2A4E                		move.l	a6,a5
(1) 1785/     C4C : 3E3C 0069           		move.w	#sizeof_mdobj-1,d7
(1) 1786/     C50 :                     .clr:
(1) 1787/     C50 : 421D                		clr.b	(a5)+
(1) 1788/     C52 : 51CF FFFC           		dbf	d7,.clr
(1) 1789/     C56 : 3E01                		move.w	d1,d7
(1) 1790/     C58 : CEFC 006A           		mulu.w	#sizeof_mdobj,d7
(1) 1791/     C5C : DCC7                		adda	d7,a6
(1) 1792/     C5E : 2C80                		move.l	d0,obj_code(a6)
(1) 1793/     C60 : 1D42 0027           		move.b	d2,obj_subid(a6)
(1) 1794/     C64 : 4DF8 BC84           		lea	(RAM_ObjDispList).w,a6
(1) 1795/     C68 : 3E01                		move.w	d1,d7
(1) 1796/     C6A : DE47                		add.w	d7,d7
(1) 1797/     C6C : 3DBC 0000 7000      		move.w	#0,(a6,d7.w)
(1) 1798/     C72 : 4CDF 6080           		movem.l	(sp)+,d7/a5-a6
(1) 1799/     C76 : 4E75                		rts
(1) 1800/     C78 :                     
(1) 1801/     C78 :                     ; --------------------------------------------------------
(1) 1802/     C78 :                     ; Objects_Add
(1) 1803/     C78 :                     ;
(1) 1804/     C78 :                     ; Input:
(1) 1805/     C78 :                     ; d0.l - Object code
(1) 1806/     C78 :                     ; d1.b - Object sub-type (obj_subid)
(1) 1807/     C78 :                     ;
(1) 1808/     C78 :                     ; Returns:
(1) 1809/     C78 :                     ; d0.l - Sets -1 if no free slot found.
(1) 1810/     C78 :                     ;
(1) 1811/     C78 :                     ; Uses:
(1) 1812/     C78 :                     ; d7,a5-a6
(1) 1813/     C78 :                     ; --------------------------------------------------------
(1) 1814/     C78 :                     
(1) 1815/     C78 :                     Objects_Add:
(1) 1816/     C78 : 48E7 0106           		movem.l	d7/a5-a6,-(sp)
(1) 1817/     C7C : 4DF8 B294           		lea	(RAM_Objects).w,a6
(1) 1818/     C80 : 3E3C 0017           		move.w	#MAX_MDOBJ-1,d7
(1) 1819/     C84 :                     .search:
(1) 1820/     C84 : 2E16                		move.l	obj_code(a6),d7
(1) 1821/     C86 : 670C                		beq.s	.use_it
(1) 1822/     C88 : DCFC 006A           		adda	#sizeof_mdobj,a6
(1) 1823/     C8C : 51CF FFF6           		dbf	d7,.search
(1) 1824/     C90 : 70FF                		moveq	#-1,d0		; Return ran-out flag
(1) 1825/     C92 : 4E75                		rts
(1) 1826/     C94 :                     .use_it:
(1) 1827/     C94 : 2A4E                		move.l	a6,a5
(1) 1828/     C96 : 3E3C 0069           		move.w	#sizeof_mdobj-1,d7
(1) 1829/     C9A :                     .clr:
(1) 1830/     C9A : 421D                		clr.b	(a5)+
(1) 1831/     C9C : 51CF FFFC           		dbf	d7,.clr
(1) 1832/     CA0 : 2C80                		move.l	d0,obj_code(a6)
(1) 1833/     CA2 : 1D41 0027           		move.b	d1,obj_subid(a6)
(1) 1834/     CA6 :                     
(1) 1835/     CA6 :                     ; 		lea	(RAM_ObjDispList).w,a6	; TODO
(1) 1836/     CA6 :                     ; 		move.w	d1,d7
(1) 1837/     CA6 :                     ; 		add.w	d7,d7
(1) 1838/     CA6 :                     ; 		move.w	#0,(a6,d7.w)
(1) 1839/     CA6 : 4CDF 6080           		movem.l	(sp)+,d7/a5-a6
(1) 1840/     CAA : 4E75                		rts
(1) 1841/     CAC :                     
(1) 1842/     CAC :                     ; --------------------------------------------------------
(1) 1843/     CAC :                     ; Draw ALL Objects from display list
(1) 1844/     CAC :                     ;
(1) 1845/     CAC :                     ; Call this BEFORE VBlank.
(1) 1846/     CAC :                     ; --------------------------------------------------------
(1) 1847/     CAC :                     
(1) 1848/     CAC :                     Objects_Show:
(1) 1849/     CAC : 48E7 0106           		movem.l	d7/a5-a6,-(sp)
(1) 1850/     CB0 :                     
(1) 1851/     CB0 : 3C38 BE3A           		move.w	(RAM_SprLinkNum).w,d6		; d6 - Starting sprite link
(1) 1852/     CB4 : 4DF8 A414           		lea	(RAM_Sprites),a6		; a6 - Genesis sprites
(1) 1853/     CB8 : 3E06                		move.w	d6,d7
(1) 1854/     CBA : 5347                		subq.w	#1,d7
(1) 1855/     CBC : E74F                		lsl.w	#3,d7
(1) 1856/     CBE : DCC7                		adda	d7,a6
(1) 1857/     CC0 :                     
(1) 1858/     CC0 : 3E38 BE38           		move.w	(RAM_SprDrwCntr),d7
(1) 1859/     CC4 : 6732                		beq.s	.no_sprdrw
(1) 1860/     CC6 : 4278 BE38           		clr.w	(RAM_SprDrwCntr).w
(1) 1861/     CCA : 4BF8 A914           		lea	(RAM_SprDrwPz),a5
(1) 1862/     CCE : 9E7C 0001           		sub.w	#1,d7
(1) 1863/     CD2 :                     .nexts:
(1) 1864/     CD2 : BC7C 0050           		cmp.w	#80,d6
(1) 1865/     CD6 : 6C20                		bge.s	.no_sprdrw
(1) 1866/     CD8 : 301D                		move.w	(a5)+,d0
(1) 1867/     CDA : 321D                		move.w	(a5)+,d1	; custom
(1) 1868/     CDC : C27C 00FF           		and.w	#$FF,d1
(1) 1869/     CE0 : E149                		lsl.w	#8,d1
(1) 1870/     CE2 : 8246                		or.w	d6,d1
(1) 1871/     CE4 : 341D                		move.w	(a5)+,d2
(1) 1872/     CE6 : 361D                		move.w	(a5)+,d3
(1) 1873/     CE8 : 3CC0                		move.w	d0,(a6)+
(1) 1874/     CEA : 3CC1                		move.w	d1,(a6)+
(1) 1875/     CEC : 3CC2                		move.w	d2,(a6)+
(1) 1876/     CEE : 3CC3                		move.w	d3,(a6)+
(1) 1877/     CF0 : DC7C 0001           		add.w	#1,d6
(1) 1878/     CF4 : 51CF FFDC           		dbf	d7,.nexts
(1) 1879/     CF8 :                     .no_sprdrw:
(1) 1880/     CF8 :                     
(1) 1881/     CF8 :                     ; 		move.w	(RAM_SprLinkNum).w,d6	; d6 - Starting sprite link
(1) 1882/     CF8 :                     ; 		lea	(RAM_Sprites).w,a6	; a6 - Genesis sprites
(1) 1883/     CF8 : 4BF8 BC84           		lea	(RAM_ObjDispList).w,a5
(1) 1884/     CFC : 3E3C 0017           		move.w	#MAX_MDOBJ-1,d7
(1) 1885/     D00 :                     .next:
(1) 1886/     D00 : 3015                		move.w	(a5),d0
(1) 1887/     D02 : 6700 00AC           		beq	.finish
(1) 1888/     D06 : 4255                		clr.w	(a5)
(1) 1889/     D08 : 72FF                		moveq	#-1,d1			; Write the $FFFFxxxx part
(1) 1890/     D0A : 3200                		move.w	d0,d1			; get the half-address
(1) 1891/     D0C : 2841                		move.l	d1,a4			; set to a4
(1) 1892/     D0E : 206C 000C           		move.l	obj_map(a4),a0		; Read this object's map
(1) 1893/     D12 : 302C 0022           		move.w	obj_frame(a4),d0
(1) 1894/     D16 : 182C 0026           		move.b	obj_set(a4),d4
(1) 1895/     D1A : D040                		add.w	d0,d0
(1) 1896/     D1C : 3030 0000           		move.w	(a0,d0.w),d0
(1) 1897/     D20 : 41F0 0000           		lea	(a0,d0.w),a0
(1) 1898/     D24 : 3A18                		move.w	(a0)+,d5
(1) 1899/     D26 : 6700 0082           		beq	.mk_spr
(1) 1900/     D2A : 0445 0001           		subi.w	#1,d5
(1) 1901/     D2E :                     .mk_pz:
(1) 1902/     D2E : 0C46 0050           		cmpi.w	#80,d6
(1) 1903/     D32 : 6E00 009A           		bgt	.ran_out
(1) 1904/     D36 : 4845                		swap	d5
(1) 1905/     D38 : 4846                		swap	d6
(1) 1906/     D3A : 1018                		move.b	(a0)+,d0		; d0 - Y pos
(1) 1907/     D3C : 1218                		move.b	(a0)+,d1		; d1 - Size
(1) 1908/     D3E : 3418                		move.w	(a0)+,d2		; d2 - VRAM main
(1) 1909/     D40 : D0FC 0002           		adda	#2,a0			; TODO: VRAM double later
(1) 1910/     D44 : 3618                		move.w	(a0)+,d3		; d3 - X pos
(1) 1911/     D46 : 4880                		ext.w	d0
(1) 1912/     D48 :                     
(1) 1913/     D48 :                     	; X/Y flip checks
(1) 1914/     D48 : 3A2C 0018           		move.w	obj_vram(a4),d5
(1) 1915/     D4C : 0804 0001           		btst	#bitobj_flipV,d4
(1) 1916/     D50 : 6714                		beq.s	.vram_v
(1) 1917/     D52 : 4440                		neg.w	d0
(1) 1918/     D54 : 0440 0008           		subi.w	#8,d0
(1) 1919/     D58 : 3C01                		move.w	d1,d6
(1) 1920/     D5A : 0246 0003           		andi.w	#%0011,d6
(1) 1921/     D5E : E74E                		lsl.w	#3,d6
(1) 1922/     D60 : 9046                		sub.w	d6,d0
(1) 1923/     D62 : 0045 1000           		ori.w	#$1000,d5
(1) 1924/     D66 :                     .vram_v:
(1) 1925/     D66 : 0804 0000           		btst	#bitobj_flipH,d4
(1) 1926/     D6A : 6714                		beq.s	.vram_h
(1) 1927/     D6C : 4443                		neg.w	d3
(1) 1928/     D6E : 0443 0008           		subi.w	#8,d3
(1) 1929/     D72 : 3C01                		move.w	d1,d6
(1) 1930/     D74 : 0246 000C           		andi.w	#%1100,d6
(1) 1931/     D78 : DC46                		add.w	d6,d6
(1) 1932/     D7A : 9646                		sub.w	d6,d3
(1) 1933/     D7C : 0045 0800           		ori.w	#$0800,d5
(1) 1934/     D80 :                     .vram_h:
(1) 1935/     D80 : D445                		add.w	d5,d2
(1) 1936/     D82 : D06C 0008           		add.w	obj_y(a4),d0
(1) 1937/     D86 : D66C 0004           		add.w	obj_x(a4),d3
(1) 1938/     D8A : D07C 0080           		add.w	#$80,d0
(1) 1939/     D8E : D67C 0080           		add.w	#$80,d3
(1) 1940/     D92 : 4846                		swap	d6
(1) 1941/     D94 : E149                		lsl.w	#8,d1			; Size + Link
(1) 1942/     D96 : 8246                		or.w	d6,d1
(1) 1943/     D98 : 3CC0                		move.w	d0,(a6)+
(1) 1944/     D9A : 3CC1                		move.w	d1,(a6)+
(1) 1945/     D9C : 3CC2                		move.w	d2,(a6)+
(1) 1946/     D9E : 3CC3                		move.w	d3,(a6)+
(1) 1947/     DA0 : DC7C 0001           		add.w	#1,d6
(1) 1948/     DA4 : 4845                		swap	d5
(1) 1949/     DA6 : 51CD FF86           		dbf	d5,.mk_pz
(1) 1950/     DAA :                     .mk_spr:
(1) 1951/     DAA : 425D                		clr.w	(a5)+			; Clear request
(1) 1952/     DAC : 51CF FF52           		dbf	d7,.next
(1) 1953/     DB0 :                     .finish:
(1) 1954/     DB0 : 4DF8 A414           		lea	(RAM_Sprites).w,a6
(1) 1955/     DB4 : 0C46 0001           		cmpi.w	#1,d6
(1) 1956/     DB8 : 6714                		beq.s	.ran_out
(1) 1957/     DBA : 0C46 0050           		cmpi.w	#80,d6
(1) 1958/     DBE : 6E0E                		bgt.s	.ran_out
(1) 1959/     DC0 : 3E06                		move.w	d6,d7
(1) 1960/     DC2 : 0447 0001           		subi.w	#1,d7
(1) 1961/     DC6 : E74F                		lsl.w	#3,d7
(1) 1962/     DC8 : DCC7                		adda	d7,a6
(1) 1963/     DCA : 429E                		clr.l	(a6)+
(1) 1964/     DCC : 429E                		clr.l	(a6)+
(1) 1965/     DCE :                     .ran_out:
(1) 1966/     DCE : 31C6 BE3A           		move.w	d6,(RAM_SprLinkNum).w
(1) 1967/     DD2 : 4CDF 6080           		movem.l	(sp)+,d7/a5-a6
(1) 1968/     DD6 : 4E75                		rts
(1) 1969/     DD8 :                     
(1) 1970/     DD8 :                     ; --------------------------------------------------------
(1) 1971/     DD8 :                     ; Current object subroutines
(1) 1972/     DD8 :                     ; --------------------------------------------------------
(1) 1973/     DD8 :                     
(1) 1974/     DD8 :                     ; --------------------------------------------------------
(1) 1975/     DD8 :                     ; obj_Display
(1) 1976/     DD8 :                     ;
(1) 1977/     DD8 :                     ; Builds a sprite using map data specified in
(1) 1978/     DD8 :                     ; obj_map(a6)
(1) 1979/     DD8 :                     ;
(1) 1980/     DD8 :                     ; Input:
(1) 1981/     DD8 :                     ; a6 - Current object
(1) 1982/     DD8 :                     ;
(1) 1983/     DD8 :                     ; Uses:
(1) 1984/     DD8 :                     ; a5,d4-d7
(1) 1985/     DD8 :                     ; --------------------------------------------------------
(1) 1986/     DD8 :                     
(1) 1987/     DD8 :                     ; *** GENESIS map ***
(1) 1988/     DD8 :                     ; mapdata:
(1) 1989/     DD8 :                     ;       dc.w .frame0-mapdata
(1) 1990/     DD8 :                     ;       dc.w .frame1-mapdata
(1) 1991/     DD8 :                     ;       ...
(1) 1992/     DD8 :                     ; .frame0:
(1) 1993/     DD8 :                     ;       dc.w numofpz
(1) 1994/     DD8 :                     ;       dc.b YY,SS
(1) 1995/     DD8 :                     ;       dc.w vram_normal
(1) 1996/     DD8 :                     ;       dc.w vram_half
(1) 1997/     DD8 :                     ;       dc.w XXXX
(1) 1998/     DD8 :                     ;       ; next frame
(1) 1999/     DD8 :                     ;       align 2
(1) 2000/     DD8 :                     ;
(1) 2001/     DD8 :                     ; *** 32X map ***
(1) 2002/     DD8 :                     ; TODO
(1) 2003/     DD8 :                     
(1) 2004/     DD8 :                     object_Display:
(1) 2005/     DD8 : 4BF8 BC84           		lea	(RAM_ObjDispList).w,a5
(1) 2006/     DDC : 3E3C 0017           		move.w	#MAX_MDOBJ-1,d7
(1) 2007/     DE0 :                     .srch:
(1) 2008/     DE0 : 4A55                		tst.w	(a5)
(1) 2009/     DE2 : 6708                		beq.s	.this_one
(1) 2010/     DE4 : DAFC 0002           		adda	#2,a5
(1) 2011/     DE8 : 51CF FFF6           		dbf	d7,.srch
(1) 2012/     DEC :                     .this_one:
(1) 2013/     DEC : 3A8E                		move.w	a6,(a5)
(1) 2014/     DEE : 4AAE 0010           		tst.l	obj_dma(a6)
(1) 2015/     DF2 : 6750                		beq.s	.no_dma
(1) 2016/     DF4 : 206E 0010           		move.l	obj_dma(a6),a0
(1) 2017/     DF8 : 2618                		move.l	(a0)+,d3		; d3 - Art data
(1) 2018/     DFA : 382E 0022           		move.w	obj_frame(a6),d4
(1) 2019/     DFE : D844                 		add.w	d4,d4
(1) 2020/     E00 : 3830 4000           		move.w	(a0,d4.w),d4
(1) 2021/     E04 : D0C4                 		adda	d4,a0
(1) 2022/     E06 : 7800                 		moveq	#0,d4
(1) 2023/     E08 : 3818                 		move.w	(a0)+,d4
(1) 2024/     E0A : 6738                 		beq.s	.no_dma
(1) 2025/     E0C : 5344                 		subq.w	#1,d4
(1) 2026/     E0E : 322E 0018           		move.w	obj_vram(a6),d1
(1) 2027/     E12 : 0241 07FF           		andi.w	#$7FF,d1
(1) 2028/     E16 : EB49                		lsl.w	#5,d1
(1) 2029/     E18 : 2F0E                		move.l	a6,-(sp)		; SAVE a6
(1) 2030/     E1A :                     .next_pz:
(1) 2031/     E1A : 4844                		swap	d4
(1) 2032/     E1C : 3818                		move.w	(a0)+,d4
(1) 2033/     E1E : 3404                		move.w	d4,d2
(1) 2034/     E20 : EE4A                		lsr.w	#7,d2
(1) 2035/     E22 : 0242 01E0           		andi.w	#$1E0,d2
(1) 2036/     E26 : D47C 0020           		add.w	#$20,d2
(1) 2037/     E2A : 7000                		moveq	#0,d0
(1) 2038/     E2C : 3004                		move.w	d4,d0
(1) 2039/     E2E : 0240 0FFF           		andi.w	#$FFF,d0
(1) 2040/     E32 : EB48                		lsl.w	#5,d0
(1) 2041/     E34 : D083                		add.l	d3,d0
(1) 2042/     E36 : 6100 F824           		bsr	Video_DmaMkEntry	; kills a6
(1) 2043/     E3A : D242                		add.w	d2,d1
(1) 2044/     E3C : 4844                		swap	d4
(1) 2045/     E3E : 51CC FFDA           		dbf	d4,.next_pz
(1) 2046/     E42 : 2C5F                		move.l	(sp)+,a6
(1) 2047/     E44 :                     .no_dma:
(1) 2048/     E44 : 4E75                		rts
(1) 2049/     E46 :                     
(1) 2050/     E46 :                     ; --------------------------------------------------------
(1) 2051/     E46 :                     ; object_Animate
(1) 2052/     E46 :                     ;
(1) 2053/     E46 :                     ; Animates the sprite
(1) 2054/     E46 :                     ;
(1) 2055/     E46 :                     ; Input
(1) 2056/     E46 :                     ; a0.l - Animation data
(1) 2057/     E46 :                     ;
(1) 2058/     E46 :                     ; Uses:
(1) 2059/     E46 :                     ; d2
(1) 2060/     E46 :                     ; --------------------------------------------------------
(1) 2061/     E46 :                     
(1) 2062/     E46 :                     object_Animate:
(1) 2063/     E46 : 7E00                		moveq	#0,d7
(1) 2064/     E48 : 1E2E 0021            		move.b	obj_anim_id+1(a6),d7
(1) 2065/     E4C : BE2E 0020            		cmp.b	obj_anim_id(a6),d7
(1) 2066/     E50 : 670E                 		beq.s	.sameThing
(1) 2067/     E52 : 1D6E 0020 0021       		move.b	obj_anim_id(a6),obj_anim_id+1(a6)
(1) 2068/     E58 : 426E 001E            		clr.w	obj_anim_indx(a6)
(1) 2069/     E5C : 422E 0024            		clr.b	obj_anim_spd(a6)
(1) 2070/     E60 :                     .sameThing:
(1) 2071/     E60 : 1E2E 0020            		move.b	obj_anim_id(a6),d7
(1) 2072/     E64 : 0C07 00FF            		cmpi.b	#-1,d7
(1) 2073/     E68 : 6748                 		beq.s	.return
(1) 2074/     E6A : DE47                 		add.w	d7,d7
(1) 2075/     E6C : 3E30 7000            		move.w	(a0,d7.w),d7
(1) 2076/     E70 : 41F0 7000            		lea	(a0,d7.w),a0
(1) 2077/     E74 : 3E18                 		move.w	(a0)+,d7
(1) 2078/     E76 : 0C47 FFFF            		cmpi.w	#-1,d7
(1) 2079/     E7A : 670C                 		beq.s	.keepspd
(1) 2080/     E7C : 042E 0001 0024       		subi.b	#1,obj_anim_spd(a6)
(1) 2081/     E82 : 6A2E                 		bpl.s	.return
(1) 2082/     E84 : 1D47 0024           		move.b	d7,obj_anim_spd(a6)
(1) 2083/     E88 :                     .keepspd:
(1) 2084/     E88 : 7C00                 		moveq	#0,d6
(1) 2085/     E8A : 3E2E 001E            		move.w	obj_anim_indx(a6),d7
(1) 2086/     E8E : DE47                 		add.w	d7,d7
(1) 2087/     E90 : 3C10                 		move.w	(a0),d6
(1) 2088/     E92 : D0C7                 		adda	d7,a0
(1) 2089/     E94 : 3A10                 		move.w	(a0),d5
(1) 2090/     E96 : 0C45 FFFF            		cmpi.w	#-1,d5
(1) 2091/     E9A : 6718                 		beq.s	.noAnim		; loop
(1) 2092/     E9C : 0C45 FFFE            		cmpi.w	#-2,d5
(1) 2093/     EA0 : 672A                 		beq.s	.lastFrame	; finish
(1) 2094/     EA2 : 0C45 FFFD            		cmpi.w	#-3,d5
(1) 2095/     EA6 : 671A                 		beq.s	.goToFrame
(1) 2096/     EA8 : 3D45 0022            		move.w	d5,obj_frame(a6)
(1) 2097/     EAC : 066E 0001 001E       		add.w	#1,obj_anim_indx(a6)
(1) 2098/     EB2 :                     .return:
(1) 2099/     EB2 : 4E75                 		rts
(1) 2100/     EB4 :                     .noAnim:
(1) 2101/     EB4 : 3D7C 0001 001E       		move.w	#1,obj_anim_indx(a6)
(1) 2102/     EBA : 3A06                 		move.w	d6,d5
(1) 2103/     EBC : 3D45 0022            		move.w	d5,obj_frame(a6)
(1) 2104/     EC0 : 4E75                		rts
(1) 2105/     EC2 :                     .goToFrame:
(1) 2106/     EC2 : 426E 001E           		clr.w	obj_anim_indx(a6)
(1) 2107/     EC6 : 3D68 0002 001E      		move.w	2(a0),obj_anim_indx(a6)
(1) 2108/     ECC :                     .lastFrame:
(1) 2109/     ECC : 422E 0024            		clr.b	obj_anim_spd(a6)
(1) 2110/     ED0 : 4E75                		rts
(1) 2111/     ED2 :                     
(1) 2112/     ED2 :                     ; --------------------------------------------------------
(1) 2113/     ED2 :                     ; object_AnimReset
(1) 2114/     ED2 :                     ;
(1) 2115/     ED2 :                     ; Call this BEFORE using animation
(1) 2116/     ED2 :                     ;
(1) 2117/     ED2 :                     ; Input:
(1) 2118/     ED2 :                     ; a6 - Object
(1) 2119/     ED2 :                     ;
(1) 2120/     ED2 :                     ; Uses:
(1) 2121/     ED2 :                     ; d7
(1) 2122/     ED2 :                     ; --------------------------------------------------------
(1) 2123/     ED2 :                     
(1) 2124/     ED2 :                     object_AnimReset:
(1) 2125/     ED2 : 426E 001E            		clr.w	obj_anim_indx(a6)
(1) 2126/     ED6 : 422E 0024            		clr.b	obj_anim_spd(a6)
(1) 2127/     EDA : 1D7C 0000 0021      		move.b	#0,obj_anim_id+1(a6)
(1) 2128/     EE0 : 4E75                		rts
(1) 2129/     EE2 :                     
(1) 2130/     EE2 :                     ; --------------------------------------------------------
(1) 2131/     EE2 :                     ; object_Speed
(1) 2132/     EE2 :                     ;
(1) 2133/     EE2 :                     ; Moves the object using speed variables
(1) 2134/     EE2 :                     ;
(1) 2135/     EE2 :                     ; Input:
(1) 2136/     EE2 :                     ; a6 - Object
(1) 2137/     EE2 :                     ;
(1) 2138/     EE2 :                     ; Uses:
(1) 2139/     EE2 :                     ; d7
(1) 2140/     EE2 :                     ; --------------------------------------------------------
(1) 2141/     EE2 :                     
(1) 2142/     EE2 :                     object_Speed:
(1) 2143/     EE2 : 7E00                		moveq	#0,d7
(1) 2144/     EE4 : 3E2E 001A           		move.w	obj_x_spd(a6),d7
(1) 2145/     EE8 : 48C7                		ext.l	d7
(1) 2146/     EEA : E187                		asl.l	#8,d7
(1) 2147/     EEC : DFAE 0004           		add.l	d7,obj_x(a6)
(1) 2148/     EF0 : 7E00                		moveq	#0,d7
(1) 2149/     EF2 : 3E2E 001C           		move.w	obj_y_spd(a6),d7
(1) 2150/     EF6 : 48C7                		ext.l	d7
(1) 2151/     EF8 : E187                		asl.l	#8,d7
(1) 2152/     EFA : DFAE 0008           		add.l	d7,obj_y(a6)
(1) 2153/     EFE : 4E75                		rts
(1) 2154/     F00 :                     
(1) 2155/     F00 :                     ; --------------------------------------------------------
(1) 2156/     F00 :                     ; object_Collision
(1) 2157/     F00 :                     ;
(1) 2158/     F00 :                     ; Detect collision with another object from
(1) 2159/     F00 :                     ; the list, Read ALL except the one that called
(1) 2160/     F00 :                     ; this.
(1) 2161/     F00 :                     ;
(1) 2162/     F00 :                     ; Input:
(1) 2163/     F00 :                     ; a6 - Object
(1) 2164/     F00 :                     ;
(1) 2165/     F00 :                     ; Returns:
(1) 2166/     F00 :                     ; d0 - If Nothing: zero
(1) 2167/     F00 :                     ;      If Found: Object's RAM location
(1) 2168/     F00 :                     ;
(1) 2169/     F00 :                     ; Uses:
(1) 2170/     F00 :                     ; d5-d7,a5
(1) 2171/     F00 :                     ; --------------------------------------------------------
(1) 2172/     F00 :                     
(1) 2173/     F00 :                     object_Collision:
(1) 2174/     F00 : 48E7 7F04           		movem.l	d1-d7/a5,-(sp)
(1) 2175/     F04 : 4BF8 B294           		lea	(RAM_Objects).w,a5
(1) 2176/     F08 : 7E17                		moveq	#MAX_MDOBJ-1,d7
(1) 2177/     F0A :                     .next:
(1) 2178/     F0A : BBCE                		cmp.l	a6,a5
(1) 2179/     F0C : 670A                		beq.s	.myself
(1) 2180/     F0E : 4A95                		tst.l	obj_code(a5)
(1) 2181/     F10 : 6706                		beq.s	.myself
(1) 2182/     F12 : 6114                		bsr.s	.check_this
(1) 2183/     F14 : 4A40                		tst.w	d0
(1) 2184/     F16 : 660A                		bne.s	.exit_this	; Found already.
(1) 2185/     F18 : DAFC 006A           .myself:	adda	#sizeof_mdobj,a5
(1) 2186/     F1C : 51CF FFEC           		dbf	d7,.next
(1) 2187/     F20 : 7000                		moveq	#0,d0
(1) 2188/     F22 :                     .exit_this:
(1) 2189/     F22 : 4CDF 20FE           		movem.l	(sp)+,d1-d7/a5
(1) 2190/     F26 : 4E75                		rts
(1) 2191/     F28 :                     .check_this:
(1) 2192/     F28 : 7000                		moveq	#0,d0		; Reset return
(1) 2193/     F2A :                     	; d6 - Y current top
(1) 2194/     F2A :                     	; d5 - Y current bottom
(1) 2195/     F2A :                     	; d4 - Y target top
(1) 2196/     F2A :                     	; d3 - Y target bottom
(1) 2197/     F2A : 3C2E 0008           		move.w	obj_y(a6),d6		; d6 - Up point
(1) 2198/     F2E : 3A06                		move.w	d6,d5			; d5 - Down point
(1) 2199/     F30 : 322E 0014           		move.w	obj_size(a6),d1		; $UDxx
(1) 2200/     F34 : 3401                		move.w	d1,d2
(1) 2201/     F36 : E049                		lsr.w	#8,d1			; d1 - Up size
(1) 2202/     F38 : 0242 00FF           		andi.w	#$FF,d2			; d2 - Down size
(1) 2203/     F3C : E749                		lsl.w	#3,d1
(1) 2204/     F3E : E74A                		lsl.w	#3,d2
(1) 2205/     F40 : 9C41                		sub.w	d1,d6
(1) 2206/     F42 : DA42                		add.w	d2,d5
(1) 2207/     F44 : 382D 0008           		move.w	obj_y(a5),d4		; d4 - Up point
(1) 2208/     F48 : 3604                		move.w	d4,d3			; d3 - Down point
(1) 2209/     F4A : 322D 0014           		move.w	obj_size(a5),d1		; $UDxx
(1) 2210/     F4E : 3401                		move.w	d1,d2
(1) 2211/     F50 : E049                		lsr.w	#8,d1			; d1 - Up size
(1) 2212/     F52 : 0242 00FF           		andi.w	#$FF,d2			; d2 - Down size
(1) 2213/     F56 : E749                		lsl.w	#3,d1
(1) 2214/     F58 : E74A                		lsl.w	#3,d2
(1) 2215/     F5A : 9841                		sub.w	d1,d4
(1) 2216/     F5C : D642                		add.w	d2,d3
(1) 2217/     F5E : B646                		cmp.w	d6,d3			; Target's YB > Our YT?
(1) 2218/     F60 : 6D42                		blt.s	.not_ytop
(1) 2219/     F62 : B845                		cmp.w	d5,d4			; Target's YT > Our YB?
(1) 2220/     F64 : 6C3E                		bge.s	.not_ytop
(1) 2221/     F66 :                     	; Now check X
(1) 2222/     F66 : 3C2E 0004           		move.w	obj_x(a6),d6		; d6 - Left point
(1) 2223/     F6A : 3A06                		move.w	d6,d5			; d5 - Right point
(1) 2224/     F6C : 322E 0016           		move.w	obj_size+2(a6),d1	; $xxLR
(1) 2225/     F70 : 3401                		move.w	d1,d2
(1) 2226/     F72 : E049                		lsr.w	#8,d1			; d1 - Left size
(1) 2227/     F74 : 0242 00FF           		andi.w	#$FF,d2			; d2 - Right size
(1) 2228/     F78 : E749                		lsl.w	#3,d1
(1) 2229/     F7A : E74A                		lsl.w	#3,d2
(1) 2230/     F7C : 9C41                		sub.w	d1,d6
(1) 2231/     F7E : DA42                		add.w	d2,d5
(1) 2232/     F80 : 382D 0004           		move.w	obj_x(a5),d4		; d4 - Left point
(1) 2233/     F84 : 3604                		move.w	d4,d3			; d3 - Right point
(1) 2234/     F86 : 322D 0016           		move.w	obj_size+2(a5),d1	; $UDxx
(1) 2235/     F8A : 3401                		move.w	d1,d2
(1) 2236/     F8C : E049                		lsr.w	#8,d1			; d1 - Left size
(1) 2237/     F8E : 0242 00FF           		andi.w	#$FF,d2			; d2 - Right size
(1) 2238/     F92 : E749                		lsl.w	#3,d1
(1) 2239/     F94 : E74A                		lsl.w	#3,d2
(1) 2240/     F96 : 9841                		sub.w	d1,d4
(1) 2241/     F98 : D642                		add.w	d2,d3
(1) 2242/     F9A : B646                		cmp.w	d6,d3
(1) 2243/     F9C : 6D06                		blt.s	.not_ytop
(1) 2244/     F9E : B845                		cmp.w	d5,d4
(1) 2245/     FA0 : 6C02                		bge.s	.not_ytop
(1) 2246/     FA2 : 200D                		move.l	a5,d0		; FOUND OBJECT
(1) 2247/     FA4 :                     .not_ytop:
(1) 2248/     FA4 : 4E75                		rts
(1) 2249/     FA6 :                     
(1) 2250/     FA6 :                     ; ====================================================================
(1) 2251/     FA6 :                     ; ----------------------------------------------------------------
(1) 2252/     FA6 :                     ; 32X ONLY
(1) 2253/     FA6 :                     ; ----------------------------------------------------------------
(1) 2254/     FA6 :                     
(1) 2332/     FA6 :                     
     207/     FA6 :                     		include	"system/md/system.asm"
(1)    1/     FA6 :                     ; ===========================================================================
(1)    2/     FA6 :                     ; ----------------------------------------------------------------
(1)    3/     FA6 :                     ; Genesis system routines, and some SegaCD and 32X routines.
(1)    4/     FA6 :                     ;
(1)    5/     FA6 :                     ; * CAN BE RECYCLED FOR SEGA PICO, ONLY IGNORE Z80 ACCESS OR
(1)    6/     FA6 :                     ; THE CONTROL ROUTINE **
(1)    7/     FA6 :                     ; ----------------------------------------------------------------
(1)    8/     FA6 :                     
(1)    9/     FA6 :                     ; ====================================================================
(1)   10/     FA6 :                     ; ----------------------------------------------------------------
(1)   11/     FA6 :                     ; Settings
(1)   12/     FA6 :                     ; ----------------------------------------------------------------
(1)   13/     FA6 :                     
(1)   14/     FA6 : =$400                MAX_SRAMSIZE	equ $400
(1)   15/     FA6 : ="SAVE"              TAG_SRAMDATA	equ "SAVE"	; 4-letter save file signature
(1)   16/     FA6 :                     
(1)   17/     FA6 :                     ; ====================================================================
(1)   18/     FA6 :                     ; ----------------------------------------------------------------
(1)   19/     FA6 :                     ; Variables
(1)   20/     FA6 :                     ; ----------------------------------------------------------------
(1)   21/     FA6 :                     
(1)   22/     FA6 :                     ; Controller buffer data, MUST call System_Input on VBlank.
(1)   23/     FA6 :                     ;
(1)   24/     FA6 :                     ; Type/Revision byte:
(1)   25/     FA6 :                     ;
(1)   26/     FA6 :                     ; ID    |
(1)   27/     FA6 :                     ; $0D   | $00 - Original 3 button
(1)   28/     FA6 :                     ;       | $01 - 6 button version: XYZM
(1)   29/     FA6 :                     
(1)   30/     FA6 :                     ; Read WORD in +on_hold or +on_press
(1)   31/     FA6 : =$1                  JoyUp		equ $0001
(1)   32/     FA6 : =$2                  JoyDown		equ $0002
(1)   33/     FA6 : =$4                  JoyLeft		equ $0004
(1)   34/     FA6 : =$8                  JoyRight	equ $0008
(1)   35/     FA6 : =$10                 JoyB		equ $0010
(1)   36/     FA6 : =$20                 JoyC		equ $0020
(1)   37/     FA6 : =$40                 JoyA		equ $0040
(1)   38/     FA6 : =$80                 JoyStart	equ $0080
(1)   39/     FA6 : =$100                JoyZ		equ $0100
(1)   40/     FA6 : =$200                JoyY		equ $0200
(1)   41/     FA6 : =$400                JoyX		equ $0400
(1)   42/     FA6 : =$800                JoyMode		equ $0800
(1)   43/     FA6 : =$0                  bitJoyUp	equ 0		; READ THESE AS A WORD
(1)   44/     FA6 : =$1                  bitJoyDown	equ 1
(1)   45/     FA6 : =$2                  bitJoyLeft	equ 2
(1)   46/     FA6 : =$3                  bitJoyRight	equ 3
(1)   47/     FA6 : =$4                  bitJoyB		equ 4
(1)   48/     FA6 : =$5                  bitJoyC		equ 5
(1)   49/     FA6 : =$6                  bitJoyA		equ 6
(1)   50/     FA6 : =$7                  bitJoyStart	equ 7
(1)   51/     FA6 : =$8                  bitJoyZ		equ 8
(1)   52/     FA6 : =$9                  bitJoyY		equ 9
(1)   53/     FA6 : =$A                  bitJoyX		equ 10
(1)   54/     FA6 : =$B                  bitJoyMode	equ 11
(1)   55/     FA6 :                     
(1)   56/     FA6 :                     ; Mega Mouse
(1)   57/     FA6 :                     ; Read WORD as +on_hold or +on_press
(1)   58/     FA6 : =$1                  ClickR		equ $0001
(1)   59/     FA6 : =$2                  ClickL		equ $0002
(1)   60/     FA6 : =$4                  ClickM		equ $0004	; US MOUSE ONLY
(1)   61/     FA6 : =$8                  ClickS		equ $0008	; (Untested)
(1)   62/     FA6 : =$0                  bitClickL	equ 0
(1)   63/     FA6 : =$1                  bitClickR	equ 1
(1)   64/     FA6 : =$2                  bitClickM	equ 2
(1)   65/     FA6 : =$3                  bitClickS	equ 3
(1)   66/     FA6 :                     
(1)   67/     FA6 :                     ; Controller_1 / Controller_2
(1)   68/     FA6 : (MACRO)              		strct 0
(1)   68/     FA6 : =$FA6                GLBL_LASTPC     set *
(1)   68/FFFFFFFFFFFFAC20 :                                     dephase
(1)   68/       0 :                                     phase 0
(1)   68/       0 : =$0                  GLBL_LASTORG    set *
(1)   69/       0 :                     pad_id		ds.b 1			; Controller ID
(1)   70/       1 :                     pad_ver		ds.b 1			; Controller type/revision
(1)   71/       2 :                     on_hold		ds.w 1			; User HOLD bits
(1)   72/       4 :                     on_press	ds.w 1			; User PRESSED bits
(1)   73/       6 :                     on_release	ds.w 1			; (RESERVED)
(1)   74/       8 :                     mouse_x		ds.w 1			; Mouse/Pen X position or speed
(1)   75/       A :                     mouse_y		ds.w 1			; Mouse/pen Y position or speed
(1)   76/       C :                     ext_3		ds.w 1
(1)   77/       E :                     ext_4		ds.w 1
(1)   78/      10 :                     sizeof_input	ds.l 0
(1)   79/      10 : (MACRO)              		endstrct
(1)   79/       0 :                                     org GLBL_LASTORG
(1)   79/     FA6 :                                     phase GLBL_LASTPC
(1)   80/     FA6 :                     
(1)   81/     FA6 :                     ; ====================================================================
(1)   82/     FA6 :                     ; ----------------------------------------------------------------
(1)   83/     FA6 :                     ; RAM section
(1)   84/     FA6 :                     ; ----------------------------------------------------------------
(1)   85/     FA6 :                     
(1)   86/     FA6 : (MACRO)              		strct RAM_MdSystem
(1)   86/     FA6 : =$FA6                GLBL_LASTPC     set *
(1)   86/       0 :                                     dephase
(1)   86/FFFFFFFFFFFFC004 :                                     phase RAM_MDSYSTEM
(1)   86/FFFFFFFFFFFFC004 : =$FFFFFFFFFFFFC004   GLBL_LASTORG    set *
(1)   87/FFFFFFFFFFFFC004 :                     RAM_InputData	ds.b sizeof_input*4		; Input data section
(1)   88/FFFFFFFFFFFFC044 :                     RAM_SaveData	ds.b MAX_SRAMSIZE		; Read/Write of the SAVE data
(1)   89/FFFFFFFFFFFFC444 :                     RAM_SysRandVal	ds.l 1				; Random value
(1)   90/FFFFFFFFFFFFC448 :                     RAM_SysRandSeed	ds.l 1				; Randomness seed
(1)   91/FFFFFFFFFFFFC44C :                     RAM_MdMarsVInt	ds.w 3				; VBlank jump (JMP xxxx xxxx)
(1)   92/FFFFFFFFFFFFC452 :                     RAM_MdMarsHint	ds.w 3				; HBlank jump (JMP xxxx xxxx)
(1)   93/FFFFFFFFFFFFC458 :                     RAM_ScreenMode	ds.w 1
(1)   94/FFFFFFFFFFFFC45A :                     sizeof_mdsys	ds.l 0
(1)   95/FFFFFFFFFFFFC460 : (MACRO)              		endstrct
(1)   95/FFFFFFFFFFFFC004 :                                     org GLBL_LASTORG
(1)   95/     FA6 :                                     phase GLBL_LASTPC
(1)   96/     FA6 : (MACRO)              		erreport "MD SYSTEM RAM",sizeof_mdsys-RAM_MdSystem,MAX_MdSystem
(1)   97/     FA6 :                     
(1)   98/     FA6 :                     ; ====================================================================
(1)   99/     FA6 :                     ; ----------------------------------------------------------------
(1)  100/     FA6 :                     ; Alias tags
(1)  101/     FA6 :                     ; ----------------------------------------------------------------
(1)  102/     FA6 :                     
(1)  103/     FA6 : =$FFFFFFFFFFFFC004   Controller_1	equ RAM_InputData
(1)  104/     FA6 : =$FFFFFFFFFFFFC014   Controller_2	equ RAM_InputData+sizeof_input
(1)  105/     FA6 :                     
(1)  106/     FA6 :                     ; ====================================================================
(1)  107/     FA6 :                     ; --------------------------------------------------------
(1)  108/     FA6 :                     ; Init System
(1)  109/     FA6 :                     ; 
(1)  110/     FA6 :                     ; Uses:
(1)  111/     FA6 :                     ; a0-a2,d0-d1
(1)  112/     FA6 :                     ; --------------------------------------------------------
(1)  113/     FA6 :                     
(1)  114/     FA6 :                     System_Init:
(1)  115/     FA6 : 007C 0700           		or.w	#$0700,sr
(1)  127/     FAA : 303C 4EF9           		move.w	#$4EF9,d0		; Set JMP opcode for the Hblank/VBlank jumps
(1)  128/     FAE : 31C0 C44C            		move.w	d0,(RAM_MdMarsVInt).w
(1)  129/     FB2 : 31C0 C452           		move.w	d0,(RAM_MdMarsHInt).w
(1)  130/     FB6 : 203C 0000 12D6      		move.l	#VInt_Default,d0	; Set default ints
(1)  131/     FBC : 223C 0000 12EC      		move.l	#Hint_Default,d1
(1)  132/     FC2 : 6100 025A           		bsr	System_SetInts
(1)  133/     FC6 : 41F8 C004           		lea	(RAM_InputData),a0	; Clear input data buffer
(1)  134/     FCA : 323C 0007           		move.w	#(sizeof_input/2)-1,d1
(1)  135/     FCE : 7000                		moveq	#0,d0
(1)  136/     FD0 :                     .clrinput:
(1)  137/     FD0 : 30C0                		move.w	d0,(a0)+
(1)  138/     FD2 : 51C9 FFFC           		dbf	d1,.clrinput
(1)  139/     FD6 : 203C 5625 5769      		move.l	#$56255769,d0		; Set these random values
(1)  140/     FDC : 223C 9511 6102      		move.l	#$95116102,d1
(1)  141/     FE2 : 23C0 FFFF C444      		move.l	d0,(RAM_SysRandVal).l
(1)  142/     FE8 : 23C1 FFFF C448      		move.l	d1,(RAM_SysRandSeed).l
(1)  146/     FEE : 027C F8FF           		andi.w	#$F8FF,sr
(1)  147/     FF2 : 6000 023C           		bra	System_SramInit
(1)  148/     FF6 :                     
(1)  149/     FF6 :                     ; --------------------------------------------------------
(1)  150/     FF6 :                     ; System_Render
(1)  151/     FF6 :                     ;
(1)  152/     FF6 :                     ; Call this on the loop your current screen.
(1)  153/     FF6 :                     ; ** VDP DISPLAY MUST BE ON TO USE THIS **
(1)  154/     FF6 :                     ;
(1)  155/     FF6 :                     ; This will:
(1)  156/     FF6 :                     ; - Update the sound driver for any changes that
(1)  157/     FF6 :                     ;   need communication with 68K
(1)  158/     FF6 :                     ; - Build the object sprites
(1)  159/     FF6 :                     ; - 32X/CD32X:
(1)  160/     FF6 :                     ;   Update the DREQ data
(1)  161/     FF6 :                     ;
(1)  162/     FF6 :                     ; On VBLANK:
(1)  163/     FF6 :                     ; - Update the input data
(1)  164/     FF6 :                     ; - Transfer the Genesis palette, sprites and scroll
(1)  165/     FF6 :                     ;   data from from RAM to VDP
(1)  166/     FF6 :                     ;   (32X: RV bit is not required.)
(1)  167/     FF6 :                     ; - Process the DMA BLAST list (32X: Uses RV bit)
(1)  168/     FF6 :                     ; --------------------------------------------------------
(1)  169/     FF6 :                     
(1)  170/     FF6 :                     System_Render:
(1)  171/     FF6 : 1E38 BE57           		move.b	(RAM_VdpRegs+1).w,d7	; ** If the user forgets to enable
(1)  172/     FFA : 0807 0006           		btst	#bitDispEnbl,d7		; ** DISPLAY skip all this
(1)  173/     FFE : 673A                		beq.s	.forgot_disp		; **
(1)  174/    1000 :                     .wait_lag:
(1)  175/    1000 : 6100 F280           		bsr	Sound_Update		; Syncronize/Update sound on lag
(1)  176/    1004 : 3E39 00C0 0004      		move.w	(vdp_ctrl).l,d7		; Got here during VBlank?
(1)  177/    100A : 0807 0003           		btst	#bitVBlk,d7		; If yes, drop frame and wait
(1)  178/    100E : 66F0                		bne.s	.wait_lag
(1)  179/    1010 : 6100 F270           		bsr	Sound_Update		; Update sound
(1)  180/    1014 : 6100 FC96           		bsr	Objects_Show		; Build sprite data from Objects
(1)  181/    1018 :                     .wait_in:
(1)  182/    1018 : 6100 F268           		bsr	Sound_Update		; Syncronize/Update sound during Display
(1)  183/    101C : 3E39 00C0 0004      		move.w	(vdp_ctrl).l,d7
(1)  184/    1022 : 0807 0003           		btst	#bitVBlk,d7		; VBlank started?
(1)  185/    1026 : 67F0                		beq.s	.wait_in
(1)  186/    1028 : 6122                		bsr	System_Input		; Read input data FIRST
(1)  187/    102A : 6100 F88C           		bsr	Video_Render		; Render visuals
(1)  188/    102E : 6100 F252           		bsr	Sound_Update		; Update sound
(1)  189/    1032 : 52B8 BE34           		addq.l	#1,(RAM_Framecount).w	; Count the frame.
(1)  193/    1036 : 6100 F24A           		bsr	Sound_Update		; Update sound again
(1)  194/    103A :                     .forgot_disp:
(1)  195/    103A : 4E75                		rts
(1)  196/    103C :                     
(1)  197/    103C :                     ; ====================================================================
(1)  198/    103C :                     ; --------------------------------------------------------
(1)  199/    103C :                     ; System_DmaEnter_(from) and System_DmaEnter_(from)
(1)  200/    103C :                     ; from: ROM or RAM
(1)  201/    103C :                     ;
(1)  202/    103C :                     ; Call to these labels BEFORE and AFTER
(1)  203/    103C :                     ; DMA-to-VDP transers, these calls are NOT
(1)  204/    103C :                     ; required for FILL or COPY
(1)  205/    103C :                     ;
(1)  206/    103C :                     ; This is where you put your Sound driver's Z80 stop
(1)  207/    103C :                     ; or pause calls here.
(1)  208/    103C :                     ; --------------------------------------------------------
(1)  209/    103C :                     
(1)  210/    103C :                     System_DmaEnter_RAM:
(1)  211/    103C : 6000 F2A0           		bra	gemaDmaPause
(1)  212/    1040 :                     System_DmaExit_RAM:
(1)  213/    1040 : 6000 F29E           		bra	gemaDmaResume
(1)  214/    1044 :                     
(1)  215/    1044 :                     ; --------------------------------------------------------
(1)  216/    1044 :                     
(1)  217/    1044 :                     System_DmaEnter_ROM:
(1)  218/    1044 : 6000 F29C           		bra	gemaDmaPauseRom
(1)  219/    1048 :                     System_DmaExit_ROM:
(1)  220/    1048 : 6000 F29A           		bra	gemaDmaResumeRom
(1)  221/    104C :                     
(1)  222/    104C :                     ; ====================================================================
(1)  223/    104C :                     ; ----------------------------------------------------------------
(1)  224/    104C :                     ; Subroutines
(1)  225/    104C :                     ; ----------------------------------------------------------------
(1)  226/    104C :                     
(1)  227/    104C :                     ; --------------------------------------------------------
(1)  228/    104C :                     ; System_Input
(1)  229/    104C :                     ;
(1)  230/    104C :                     ; Reads data from the Controller ports
(1)  231/    104C :                     ; *** CALL THIS ON VBLANK ONLY ***
(1)  232/    104C :                     ;
(1)  233/    104C :                     ; Uses:
(1)  234/    104C :                     ; d5-d7,a5-a6
(1)  235/    104C :                     ; --------------------------------------------------------
(1)  236/    104C :                     
(1)  237/    104C :                     ; ----------------------------------------
(1)  238/    104C :                     ; PICO input is hard-coded to
(1)  239/    104C :                     ; Controller_1
(1)  240/    104C :                     ;
(1)  241/    104C :                     ; on_hold/on_press:
(1)  242/    104C :                     ; %P00BRLDU
(1)  243/    104C :                     ; UDLR - Arrows
(1)  244/    104C :                     ;    B - BIG button red
(1)  245/    104C :                     ;    P - Pen press/click
(1)  246/    104C :                     ;
(1)  247/    104C :                     ; mouse_x/mouse_y:
(1)  248/    104C :                     ; Pen X/Y position
(1)  249/    104C :                     ; depen
(1)  250/    104C :                     ; ----------------------------------------
(1)  251/    104C :                     
(1)  252/    104C :                     System_Input:
(1)  253/    104C :                     
(1)  255/    104C : 4DF8 C004           		lea	(RAM_InputData),a6
(1)  256/    1050 : 4BF9 0080 0003      		lea	($800003).l,a5
(1)  257/    1056 : 7E00                		moveq	#0,d7
(1)  258/    1058 : 1E15                		move.b	(a5),d7		; $800003: %P00RLDU
(1)  259/    105A : 0A47 00FF           		eori.w	#$FF,d7
(1)  260/    105E : 3C07                		move.w	d7,d6
(1)  261/    1060 :                     ; 		move.b	on_release(a6),d2
(1)  262/    1060 :                     ; 		eor.b	d2,d7
(1)  263/    1060 :                     ; 		and.b	d2,d7
(1)  264/    1060 :                     ; 		move.b	d7,on_release(a6)
(1)  265/    1060 : 3A2E 0002           		move.w	on_hold(a6),d5
(1)  266/    1064 : 0A45 00FF           		eori.w	#$FF,d5
(1)  267/    1068 : CA46                		and.w	d6,d5
(1)  268/    106A : 3D45 0004           		move.w	d5,on_press(a6)
(1)  269/    106E : 3D46 0002           		move.w	d6,on_hold(a6)
(1)  270/    1072 : 1E2D 0002           		move.b	2(a5),d7
(1)  271/    1076 : E14F                		lsl.w	#8,d7
(1)  272/    1078 : 1E2D 0004           		move.b	4(a5),d7
(1)  273/    107C : 9E7C 003C           		sub.w	#$3C,d7
(1)  274/    1080 : 6A02                		bpl.s	.x_valid	 ; <-- Failsafe negative X
(1)  275/    1082 : 4247                		clr.w	d7
(1)  276/    1084 :                     .x_valid:
(1)  277/    1084 : 3D47 0008           		move.w	d7,mouse_x(a6)
(1)  278/    1088 :                     	; $0000-$00EF - Tablet
(1)  279/    1088 :                     	; $0100-$01EF - Storyware
(1)  280/    1088 : 7E00                		moveq	#0,d7
(1)  281/    108A : 1C2D 0006           		move.b	6(a5),d6
(1)  282/    108E : E14E                		lsl.w	#8,d6
(1)  283/    1090 : 1C2D 0008           		move.b	8(a5),d6
(1)  284/    1094 : 0446 01FC           		subi.w	#$1FC,d6
(1)  285/    1098 : 6B02                		bmi.s	.bad_y
(1)  286/    109A : 3E06                		move.w	d6,d7
(1)  287/    109C :                     .bad_y:
(1)  288/    109C : 3D47 000A           		move.w	d7,mouse_y(a6)
(1)  289/    10A0 : 1C2D 000A           		move.b	10(a5),d6
(1)  290/    10A4 : 7E00                		moveq	#0,d7
(1)  291/    10A6 : 7A05                		moveq	#6-1,d5		; 6 pages
(1)  292/    10A8 :                     .page_it:
(1)  293/    10A8 : E24E                		lsr.w	#1,d6
(1)  294/    10AA : 6402                		bcc.s	.no_bit
(1)  295/    10AC : 5247                		addq.w	#1,d7
(1)  296/    10AE :                     .no_bit:
(1)  297/    10AE : 51CD FFF8           		dbf	d5,.page_it
(1)  298/    10B2 : 1D47 000C           		move.b	d7,ext_3(a6)
(1)  505/    10B6 :                     
(1)  506/    10B6 :                     ; --------------------------------------------------------
(1)  507/    10B6 :                     ; System_Random
(1)  508/    10B6 :                     ;
(1)  509/    10B6 :                     ; Makes a random number.
(1)  510/    10B6 :                     ;
(1)  511/    10B6 :                     ; Input:
(1)  512/    10B6 :                     ; d0 | Seed
(1)  513/    10B6 :                     ;
(1)  514/    10B6 :                     ; Output:
(1)  515/    10B6 :                     ; d0 | LONG
(1)  516/    10B6 :                     ;
(1)  517/    10B6 :                     ; Uses:
(1)  518/    10B6 :                     ; d4-d5
(1)  519/    10B6 :                     ; --------------------------------------------------------
(1)  520/    10B6 :                     
(1)  521/    10B6 :                     System_Random:
(1)  522/    10B6 : 2F04                		move.l	d4,-(sp)
(1)  523/    10B8 : 2838 C448           		move.l	(RAM_SysRandSeed).w,d4
(1)  524/    10BC : 6606                		bne.s	.good_s
(1)  525/    10BE : 283C 23B5 1947      		move.l	#$23B51947,d4
(1)  526/    10C4 :                     .good_s:
(1)  527/    10C4 : 2004                		move.l	d4,d0
(1)  528/    10C6 : EB9C                		rol.l	#5,d4
(1)  529/    10C8 : D880                		add.l	d0,d4
(1)  530/    10CA : E644                		asr.w	#3,d4
(1)  531/    10CC : D880                		add.l	d0,d4
(1)  532/    10CE : 3004                		move.w	d4,d0
(1)  533/    10D0 : 4844                		swap	d4
(1)  534/    10D2 : D044                		add.w	d4,d0
(1)  535/    10D4 : 3800                		move.w	d0,d4
(1)  536/    10D6 : 4844                		swap	d4
(1)  537/    10D8 : 21C4 C448           		move.l	d4,(RAM_SysRandSeed).w
(1)  538/    10DC : 281F                		move.l	(sp)+,d4
(1)  539/    10DE : 4E75                		rts
(1)  540/    10E0 :                     
(1)  541/    10E0 :                     ; --------------------------------------------------------
(1)  542/    10E0 :                     ; System_SineWave_Cos / System_SineWave
(1)  543/    10E0 :                     ;
(1)  544/    10E0 :                     ; Get sinewave value
(1)  545/    10E0 :                     ;
(1)  546/    10E0 :                     ; Input:
(1)  547/    10E0 :                     ; d0 | WORD - Tan
(1)  548/    10E0 :                     ; d1 | WORD - Multiply
(1)  549/    10E0 :                     ;
(1)  550/    10E0 :                     ; Output:
(1)  551/    10E0 :                     ; d2 | LONG - Result (as 0000.0000)
(1)  552/    10E0 :                     ; --------------------------------------------------------
(1)  553/    10E0 :                     
(1)  554/    10E0 :                     System_SineWave_Cos:
(1)  555/    10E0 : 48A7 8000           		movem.w	d0,-(sp)
(1)  556/    10E4 : 7400                		moveq	#0,d2
(1)  557/    10E6 : 0600 0040           		addi.b	#$40,d0
(1)  558/    10EA : 1400                		move.b	d0,d2
(1)  559/    10EC : E302                		asl.b	#1,d2
(1)  560/    10EE : 343B 202E           		move.w	MdSys_SineData(pc,d2.w),d2
(1)  561/    10F2 : C4C1                		mulu.w	d1,d2
(1)  562/    10F4 : 8000                		or.b	d0,d0
(1)  563/    10F6 : 6A02                		bpl.s	.dont_neg
(1)  564/    10F8 : 4482                		neg.l	d2
(1)  565/    10FA :                     .dont_neg:
(1)  566/    10FA : 4C9F 0001           		movem.w	(sp)+,d0
(1)  567/    10FE : 4E75                		rts
(1)  568/    1100 :                     
(1)  569/    1100 :                     System_SineWave:
(1)  570/    1100 : 48A7 8000           		movem.w	d0,-(sp)
(1)  571/    1104 : 0240 007F           		andi.w	#$7F,d0
(1)  572/    1108 : E340                		asl.w	#1,d0
(1)  573/    110A : 343B 0012           		move.w	MdSys_SineData(pc,d0.w),d2
(1)  574/    110E : C4C1                		mulu.w	d1,d2
(1)  575/    1110 : 4C9F 0001           		movem.w	(sp)+,d0
(1)  576/    1114 : 5182                		subq.l	#8,d2
(1)  577/    1116 : 8000                		or.b	d0,d0
(1)  578/    1118 : 6A02                		bpl.s	.dont_neg
(1)  579/    111A : 4482                		neg.l	d2
(1)  580/    111C :                     .dont_neg:
(1)  581/    111C : 4E75                		rts
(1)  582/    111E :                     
(1)  583/    111E : 0000 0006 000D      MdSys_SineData:	dc.w 0,	6, $D, $13, $19, $1F, $26, $2C,	$32, $38, $3E
             1124 : 0013 0019 001F 
             112A : 0026 002C 0032 
             1130 : 0038 003E          
(1)  584/    1134 : 0044 004A 0050      		dc.w $44, $4A, $50, $56, $5C, $62, $68,	$6D, $73, $79
             113A : 0056 005C 0062 
             1140 : 0068 006D 0073 
             1146 : 0079             
(1)  585/    1148 : 007E 0084 0089      		dc.w $7E, $84, $89, $8E, $93, $98, $9D,	$A2, $A7, $AC
             114E : 008E 0093 0098 
             1154 : 009D 00A2 00A7 
             115A : 00AC             
(1)  586/    115C : 00B1 00B5 00B9      		dc.w $B1, $B5, $B9, $BE, $C2, $C6, $CA,	$CE, $D1, $D5
             1162 : 00BE 00C2 00C6 
             1168 : 00CA 00CE 00D1 
             116E : 00D5             
(1)  587/    1170 : 00D8 00DC 00DF      		dc.w $D8, $DC, $DF, $E2, $E5, $E7, $EA,	$ED, $EF, $F1
             1176 : 00E2 00E5 00E7 
             117C : 00EA 00ED 00EF 
             1182 : 00F1             
(1)  588/    1184 : 00F3 00F5 00F7      		dc.w $F3, $F5, $F7, $F8, $FA, $FB, $FC,	$FD, $FE, $FF
             118A : 00F8 00FA 00FB 
             1190 : 00FC 00FD 00FE 
             1196 : 00FF             
(1)  589/    1198 : 00FF 0100 0100      		dc.w $FF, $100,	$100, $100, $100, $100,	$FF, $FF, $FE
             119E : 0100 0100 0100 
             11A4 : 00FF 00FF 00FE    
(1)  590/    11AA : 00FD 00FC 00FB      		dc.w $FD, $FC, $FB, $FA, $F8, $F7, $F5,	$F3, $F1, $EF
             11B0 : 00FA 00F8 00F7 
             11B6 : 00F5 00F3 00F1 
             11BC : 00EF             
(1)  591/    11BE : 00ED 00EA 00E7      		dc.w $ED, $EA, $E7, $E5, $E2, $DF, $DC,	$D8, $D5, $D1
             11C4 : 00E5 00E2 00DF 
             11CA : 00DC 00D8 00D5 
             11D0 : 00D1             
(1)  592/    11D2 : 00CE 00CA 00C6      		dc.w $CE, $CA, $C6, $C2, $BE, $B9, $B5,	$B1, $AC, $A7
             11D8 : 00C2 00BE 00B9 
             11DE : 00B5 00B1 00AC 
             11E4 : 00A7             
(1)  593/    11E6 : 00A2 009D 0098      		dc.w $A2, $9D, $98, $93, $8E, $89, $84,	$7E, $79, $73
             11EC : 0093 008E 0089 
             11F2 : 0084 007E 0079 
             11F8 : 0073             
(1)  594/    11FA : 006D 0068 0062      		dc.w $6D, $68, $62, $5C, $56, $50, $4A,	$44, $3E, $38
             1200 : 005C 0056 0050 
             1206 : 004A 0044 003E 
             120C : 0038             
(1)  595/    120E : 0032 002C 0026      		dc.w $32, $2C, $26, $1F, $19, $13, $D, 6
             1214 : 001F 0019 0013 
             121A : 000D 0006          
(1)  596/    121E :                     
(1)  597/    121E :                     ; --------------------------------------------------------
(1)  598/    121E :                     ; System_SetInts
(1)  599/    121E :                     ;
(1)  600/    121E :                     ; Set new interrputs
(1)  601/    121E :                     ;
(1)  602/    121E :                     ; d0.l - VBlank (if 0: Skip write)
(1)  603/    121E :                     ; d1.l - HBlank (if 0: Skip write)
(1)  604/    121E :                     ;
(1)  605/    121E :                     ; Uses:
(1)  606/    121E :                     ; d4
(1)  607/    121E :                     ; --------------------------------------------------------
(1)  608/    121E :                     
(1)  609/    121E :                     System_SetInts:
(1)  610/    121E : 2800                		move.l	d0,d4
(1)  611/    1220 : 6704                		beq.s	.novint
(1)  615/    1222 : 21C4 C44E            		move.l	d4,(RAM_MdMarsVInt+2).w
(1)  617/    1226 :                     .novint:
(1)  618/    1226 : 2801                		move.l	d1,d4
(1)  619/    1228 : 6704                		beq.s	.nohint
(1)  623/    122A : 21C4 C454            		move.l	d4,(RAM_MdMarsHInt+2).w
(1)  625/    122E :                     .nohint:
(1)  626/    122E : 4E75                		rts
(1)  627/    1230 :                     
(1)  628/    1230 :                     ; --------------------------------------------------------
(1)  629/    1230 :                     ; System_SramInit
(1)  630/    1230 :                     ;
(1)  631/    1230 :                     ; Init save data
(1)  632/    1230 :                     ;
(1)  633/    1230 :                     ; Uses:
(1)  634/    1230 :                     ; a4,d4-d5
(1)  635/    1230 :                     ; --------------------------------------------------------
(1)  636/    1230 :                     
(1)  637/    1230 :                     System_SramInit:
(1)  639/    1230 : 4E71                		nop			; Pico has no SRAM
(1)  656/    1232 : 4E75                		rts
(1)  657/    1234 :                     
(1)  658/    1234 :                     ; --------------------------------------------------------
(1)  659/    1234 :                     ; System_SramSave
(1)  660/    1234 :                     ; --------------------------------------------------------
(1)  661/    1234 :                     
(1)  662/    1234 :                     System_SramSave:
(1)  664/    1234 : 4E71                		nop
(1)  693/    1236 : 4E75                		rts
(1)  694/    1238 :                     
(1)  695/    1238 :                     ; --------------------------------------------------------
(1)  696/    1238 :                     ; System_SramLoad
(1)  697/    1238 :                     ; --------------------------------------------------------
(1)  698/    1238 :                     
(1)  699/    1238 :                     System_SramLoad:
(1)  701/    1238 : 4E71                		nop
(1)  730/    123A : 4E75                		rts
(1)  731/    123C :                     
(1)  732/    123C :                     ; ====================================================================
(1)  733/    123C :                     ; ----------------------------------------------------------------
(1)  734/    123C :                     ; Screen mode subroutines
(1)  735/    123C :                     ; ----------------------------------------------------------------
(1)  736/    123C :                     
(1)  737/    123C :                     ; --------------------------------------------------------
(1)  738/    123C :                     ; Initialize current screen mode
(1)  739/    123C :                     ;
(1)  740/    123C :                     ; MUST call this at the very start of your screen code.
(1)  741/    123C :                     ; --------------------------------------------------------
(1)  742/    123C :                     
(1)  743/    123C :                     Mode_Init:
(1)  744/    123C : 007C 0700           		ori.w	#$0700,sr			; Disable interrupts.
(1)  745/    1240 : 13FC 0004 FFFF      		move.b	#$04,(RAM_VdpRegs).l
             1246 : BE56             
(1)  746/    1248 : 13FC 0004 FFFF      		move.b	#$04,(RAM_VdpRegs+1).l
             124E : BE57             
(1)  747/    1250 : 6100 F164           		bsr	Video_Update
(1)  748/    1254 : 6100 F1B2           		bsr	Video_Clear
(1)  749/    1258 : 6100 F9A2           		bsr	Objects_Clear
(1)  750/    125C : 49F8 D204           		lea	(RAM_ScrnBuff),a4
(1)  751/    1260 : 3A3C 0BFF           		move.w	#(MAX_ScrnBuff/2)-1,d5
(1)  752/    1264 : 7800                		moveq	#0,d4
(1)  753/    1266 :                     .clr:
(1)  754/    1266 : 38C4                		move.w	d4,(a4)+
(1)  755/    1268 : 51CD FFFC           		dbf	d5,.clr
(1)  756/    126C : 4E75                		rts
(1)  757/    126E :                     
(1)  758/    126E :                     ; --------------------------------------------------------
(1)  759/    126E :                     ; Syncronized Fade-in/Fade-out for both VDP and SuperVDP
(1)  760/    126E :                     ; --------------------------------------------------------
(1)  761/    126E :                     
(1)  762/    126E :                     Mode_FadeIn:
(1)  763/    126E : 6100 F9B4           		bsr	Objects_Run
(1)  764/    1272 : 31FC 0001 BE44      		move.w	#1,(RAM_FadeMdReq).w
(1)  765/    1278 : 31FC 0001 BE4C      		move.w	#1,(RAM_FadeMarsReq).w
(1)  766/    127E : 31FC 0001 BE46      		move.w	#1,(RAM_FadeMdIncr).w
(1)  767/    1284 : 31FC 0002 BE4E      		move.w	#2,(RAM_FadeMarsIncr).w
(1)  768/    128A : 31FC 0001 BE48      		move.w	#1,(RAM_FadeMdDelay).w
(1)  769/    1290 : 31FC 0000 BE50      		move.w	#0,(RAM_FadeMarsDelay).w
(1)  770/    1296 :                     .loopw:
(1)  771/    1296 : 6100 FD5E           		bsr	System_Render
(1)  772/    129A : 6100 F244           		bsr	Video_RunFade
(1)  773/    129E : 66F6                		bne.s	.loopw
(1)  774/    12A0 : 4E75                		rts
(1)  775/    12A2 :                     
(1)  776/    12A2 :                     Mode_FadeOut:
(1)  777/    12A2 : 6100 F980           		bsr	Objects_Run
(1)  778/    12A6 : 31FC 0002 BE44      		move.w	#2,(RAM_FadeMdReq).w
(1)  779/    12AC : 31FC 0002 BE4C      		move.w	#2,(RAM_FadeMarsReq).w
(1)  780/    12B2 : 31FC 0001 BE46      		move.w	#1,(RAM_FadeMdIncr).w
(1)  781/    12B8 : 31FC 0002 BE4E      		move.w	#2,(RAM_FadeMarsIncr).w
(1)  782/    12BE : 31FC 0001 BE48      		move.w	#1,(RAM_FadeMdDelay).w
(1)  783/    12C4 : 31FC 0000 BE50      		move.w	#0,(RAM_FadeMarsDelay).w
(1)  784/    12CA :                     .loopw:
(1)  785/    12CA : 6100 FD2A           		bsr	System_Render
(1)  786/    12CE : 6100 F210           		bsr	Video_RunFade
(1)  787/    12D2 : 66F6                		bne.s	.loopw
(1)  788/    12D4 : 4E75                		rts
(1)  789/    12D6 :                     
(1)  790/    12D6 :                     ; ====================================================================
(1)  791/    12D6 :                     ; ----------------------------------------------------------------
(1)  792/    12D6 :                     ; Default interrupts
(1)  793/    12D6 :                     ; ----------------------------------------------------------------
(1)  794/    12D6 :                     
(1)  795/    12D6 :                     ; --------------------------------------------------------
(1)  796/    12D6 :                     ; VBlank
(1)  797/    12D6 :                     ; --------------------------------------------------------
(1)  798/    12D6 :                     
(1)  799/    12D6 :                     VInt_Default:
(1)  800/    12D6 : 48E7 FFFE           		movem.l	d0-a6,-(sp)
(1)  801/    12DA : 6100 FD70           		bsr	System_Input
(1)  802/    12DE : 06B8 0000 0001      		addi.l	#1,(RAM_FrameCount).w
             12E4 : BE34             
(1)  803/    12E6 : 4CDF 7FFF           		movem.l	(sp)+,d0-a6
(1)  804/    12EA : 4E73                		rte
(1)  805/    12EC :                     
(1)  806/    12EC :                     ; --------------------------------------------------------
(1)  807/    12EC :                     ; HBlank
(1)  808/    12EC :                     ; --------------------------------------------------------
(1)  809/    12EC :                     
(1)  810/    12EC :                     HInt_Default:
(1)  811/    12EC : 4E73                		rte
(1)  812/    12EE :                     
(1)  813/    12EE :                     ; ====================================================================
(1)  814/    12EE :                     ; ----------------------------------------------------------------
(1)  815/    12EE :                     ; SEGA CD / CD32X ONLY
(1)  816/    12EE :                     ; ----------------------------------------------------------------
(1)  817/    12EE :                     
(1) 1021/    12EE :                     
(1) 1022/    12EE :                     ; ====================================================================
(1) 1023/    12EE :                     ; ----------------------------------------------------------------
(1) 1024/    12EE :                     ; 32X and CD32X ONLY
(1) 1025/    12EE :                     ; ----------------------------------------------------------------
(1) 1026/    12EE :                     
(1) 1172/    12EE :                     
(1) 1173/    12EE :                     ; ====================================================================
(1) 1174/    12EE :                     ; ----------------------------------------------------------------
(1) 1175/    12EE :                     ; Shared subs for the add-ons
(1) 1176/    12EE :                     ; ----------------------------------------------------------------
(1) 1177/    12EE :                     
(1) 1178/    12EE :                     ; --------------------------------------------------------
(1) 1179/    12EE :                     ; System_GrabRamCode
(1) 1180/    12EE :                     ;
(1) 1181/    12EE :                     ; Shared routine for MCD, 32X and CD32X.
(1) 1182/    12EE :                     ;
(1) 1183/    12EE :                     ; Send new code to the USER side of RAM and
(1) 1184/    12EE :                     ; jumps into it.
(1) 1185/    12EE :                     ;
(1) 1186/    12EE :                     ; ** FOR SEGA CD/CD+32X
(1) 1187/    12EE :                     ; Input:
(1) 1188/    12EE :                     ; a0 - Filename string 8-bytes
(1) 1189/    12EE :                     ;
(1) 1190/    12EE :                     ; ** FOR SEGA 32X
(1) 1191/    12EE :                     ; Input:
(1) 1192/    12EE :                     ; a0 - Location of the RAM-code to copy from
(1) 1193/    12EE :                     ;      in the $880000/$900000 areas
(1) 1194/    12EE :                     ; --------------------------------------------------------
(1) 1195/    12EE :                     
(1) 1196/    12EE :                     System_GrabRamCode:
(1) 1213/    12EE : 4E75                		rts
(1) 1215/    12F0 :                     
(1) 1216/    12F0 :                     ; ====================================================================
(1) 1217/    12F0 :                     
     208/    12F0 :                     
     209/    12F0 :                     ; ---------------------------------------------
     210/    12F0 :                     ; Read screen modes
     211/    12F0 :                     ;
     212/    12F0 :                     ;   MD/Pico: Direct ROM jump
     213/    12F0 :                     ; SCD/CD32X: Reads file from DISC and
     214/    12F0 :                     ;            transfers code to RAM
     215/    12F0 :                     ;       32X: Read from ROM and copies code to
     216/    12F0 :                     ;            RAM so it's problematic with DMA
     217/    12F0 :                     ;            and the SH2
     218/    12F0 :                     ;
     219/    12F0 :                     ; - Returning in your current screen code
     220/    12F0 :                     ; will loop here and reload the entire
     221/    12F0 :                     ; screen code.
     222/    12F0 :                     ; - DO NOT JUMP TO SCREEN MODES DIRECTLY
     223/    12F0 :                     ; ---------------------------------------------
     224/    12F0 :                     
     225/    12F0 :                     Md_ReadModes:
     226/    12F0 : 007C 0700           		ori.w	#$0700,sr		; Disable interrupts
     227/    12F4 : 7000                		moveq	#0,d0
     228/    12F6 : 3038 C458           		move.w	(RAM_ScreenMode).w,d0
     229/    12FA : C07C 007F           		and.w	#$7F,d0			; <-- CURRENT LIMIT
     230/    12FE : E948                		lsl.w	#4,d0			; * $10
     231/    1300 : 41FB 000A           		lea	.pick_mode(pc,d0.w),a0	; LEA the filename
     239/    1304 : 207B 0006           		movea.l	.pick_mode(pc,d0.w),a0	; Location to JUMP to.
     240/    1308 : 4E90                		jsr	(a0)
     242/    130A : 60E4                		bra.s	Md_ReadModes		; Loop on rts
     243/    130C :                     
     244/    130C :                     ; ---------------------------------------------
     245/    130C :                     ; ** ADD SCREEN MODES HERE **
     246/    130C :                     ;
     247/    130C :                     ; SegaCD/CD32X:
     248/    130C :                     ; DON'T FORGET to add the file to the
     249/    130C :                     ; ISO filelist.
     250/    130C :                     ; ---------------------------------------------
     251/    130C :                     
     252/    130C :                     .pick_mode:
     253/    130C : 0000 32D0           		dc.l Md_Screen00	; Cartridge label *unused on CD
     254/    1310 : 5343 5245 454E      		dc.b "SCREEN00.BIN"	; ISO Filename *unused on Cartridge
             1316 : 3030 2E42 494E    
     255/    131C : 0000 37AE           		dc.l Md_Screen01
     256/    1320 : 5343 5245 454E      		dc.b "SCREEN01.BIN"
             1326 : 3031 2E42 494E    
     257/    132C : 0000 32D0           		dc.l Md_Screen00
     258/    1330 : 5343 5245 454E      		dc.b "SCREEN00.BIN"
             1336 : 3030 2E42 494E    
     259/    133C : 0000 32D0           		dc.l Md_Screen00
     260/    1340 : 5343 5245 454E      		dc.b "SCREEN00.BIN"
             1346 : 3030 2E42 494E    
     261/    134C : 0000 32D0           		dc.l Md_Screen00
     262/    1350 :                     
     263/    1350 :                     ; ---------------------------------------------
     264/    1350 :                     
     271/    1350 :                     Md_SysCode_e:
     272/    1350 :                     		align 2
     273/    1350 :                     
     274/    1350 :                     ; ===========================================================================
     275/    1350 :                     ; --------------------------------------------------------
     276/    1350 :                     ; Z80 include on Cartridge ONLY (NOT on Disc)
     277/    1350 :                     ; --------------------------------------------------------
     278/    1350 :                     
     283/    1350 :                     Z80_CODE:
     287/    1350 :                     		include "sound/driver/gema_zdrv.asm"
(1)    1/    1350 :                     ; ===========================================================================
(1)    2/    1350 :                     ; -------------------------------------------------------------------
(1)    3/    1350 :                     ; GEMA/Nikona Z80 code v0.9
(1)    4/    1350 :                     ; by GenesisFan64 2023-2024
(1)    5/    1350 :                     ; -------------------------------------------------------------------
(1)    6/    1350 :                     
(1)    7/       0 :                     		phase 0
(1)    8/       0 :                     		cpu Z80		; Enter Z80 CPU
(1)    9/       0 :                     
(1)   10/       0 :                     ; --------------------------------------------------------
(1)   11/       0 :                     ; SETTINGS
(1)   12/       0 :                     ; --------------------------------------------------------
(1)   13/       0 :                     
(1)   14/       0 :                     ; !! = HARDCODED
(1)   15/       0 : =8H                  MAX_TRFRPZ	equ 8		; !! Max transferRom packets(bytes) **AFFECTS WAVE QUALITY**
(1)   16/       0 : =20H                 MAX_TRKCHN	equ 32		; !! Max internal shared tracker channel slots *** LIMTED to 32 ***
(1)   17/       0 : =20H                 MAX_RCACH	equ 20h		; !! Max storage for ROM pattern data *** 1-BIT SIZES ONLY, MUST BE ALIGNED ***
(1)   18/       0 : =8H                  MAX_BUFFNTRY	equ 4*2		; !! nikona_BuffList buffer entry size
(1)   19/       0 : =18H                 MAX_TBLSIZE	equ 18h		; Maximum size for chip tables (MINIMUM: 10h)
(1)   20/       0 : =1AH                 MAX_TRKINDX	equ 26		; Max channel indexes per buffer: 4PSG+6FM+8PCM+8PWM
(1)   21/       0 : =10H                 MAX_ZCMND	equ 10h		; Size of command array ** 1-bit SIZES ONLY ** (68k uses this label too)
(1)   22/       0 :                     
(1)   23/       0 :                     ; Debug:
(1)   24/       0 : =0H                  ZSET_TESTME	equ 0		; Set to 1 to check the DAC playback quality
(1)   25/       0 :                     
(1)   26/       0 :                     ; --------------------------------------------------------
(1)   27/       0 :                     ; Structs
(1)   28/       0 :                     ; --------------------------------------------------------
(1)   29/       0 :                     
(1)   30/       0 :                     ; trkBuff struct
(1)   31/       0 :                     ;
(1)   32/       0 :                     ; trk_Status: %ERP- V--0
(1)   33/       0 :                     ; E - enabled
(1)   34/       0 :                     ; R - Init|Restart track
(1)   35/       0 :                     ; P - refill-on-playback
(1)   36/       0 :                     ; V - volume change flag
(1)   37/       0 :                     ; 0 - Use global sub-beats
(1)   38/       0 : =0H                  trk_Status	equ 00h	; ** Track Status and Flags (MUST BE at 00h)
(1)   39/       0 : =1H                  trk_SeqId	equ 01h ; ** Track ID to play.
(1)   40/       0 : =2H                  trk_SetBlk	equ 02h	; ** Start on this block
(1)   41/       0 : =3H                  trk_TickSet	equ 03h	; ** Ticks for this track
(1)   42/       0 : =4H                  trk_Blocks	equ 04h ; ** [W] Current track's blocks
(1)   43/       0 : =6H                  trk_Patt	equ 06h ; ** [W] Current track's heads and patterns
(1)   44/       0 : =8H                  trk_Cach	equ 08h	; ** [W] Current track's cache notedata
(1)   45/       0 : =0AH                 trk_Read	equ 0Ah	; [W] Track current pattern read
(1)   46/       0 : =0CH                 trk_Rows	equ 0Ch	; [W] Track row counter
(1)   47/       0 : =0EH                 trk_VolMaster	equ 0Eh ; [W] Master volume for this track slot (00-max), +80h update
(1)   48/       0 : =10H                 trk_cachHalf	equ 10h ; ROM-cache halfcheck
(1)   49/       0 : =11H                 trk_rowPause	equ 11h	; Row-pause timer
(1)   50/       0 : =12H                 trk_tickTmr	equ 12h	; Ticks timer
(1)   51/       0 : =13H                 trk_currBlk	equ 13h	; Current block
(1)   52/       0 : =14H                 trk_Priority	equ 14h ; Priority level for this buffer
(1)   53/       0 : =15H                 trk_BankIns	equ 15h ; Instrument bank
(1)   54/       0 : =16H                 trk_BankHeads	equ 16h ; Header bank
(1)   55/       0 : =17H                 trk_BankBlk	equ 17h	; Block bank
(1)   56/       0 : =18H                 trk_MaxChnl	equ 18h ; MAX channels used in this track
(1)   57/       0 : =19H                 trk_VolFdTarget	equ 19h	; Target fade volume
(1)   58/       0 : =1AH                 trk_RomPattRead	equ 1Ah ; [3b] ROM current pattern data to be cache'd
(1)   59/       0 : =1DH                 trk_RomPatt	equ 1Dh ; [3b] ROM BASE pattern data
(1)   60/       0 : =20H                 trk_RomInst	equ 20h ; [3b] ROM instrument data
(1)   61/       0 : =23H                 trk_RomBlks	equ 23h ; [3b] ROM blocks data
(1)   62/       0 : =26H                 trk_ChnIndx	equ 26h	; CHANNEL INDEXES START HERE
(1)   63/       0 :                     
(1)   64/       0 :                     ; chnBuff struct: 8 bytes ONLY
(1)   65/       0 :                     ;
(1)   66/       0 :                     ; chnl_Flags: E0LRevin
(1)   67/       0 :                     ; E  - Channel is active
(1)   68/       0 :                     ; LR - Global left/Right panning bits (reverse bits: 0-ON 1-OFF)
(1)   69/       0 :                     ; e  - Effect*
(1)   70/       0 :                     ; v  - Volume*
(1)   71/       0 :                     ; i  - Intrument*
(1)   72/       0 :                     ; n  - Note*
(1)   73/       0 : =0H                  chnl_Flags	equ 0	; Playback flags ** DON'T MOVE THIS **
(1)   74/       0 : =1H                  chnl_Chip	equ 1	; %ccccpppp c - Current Chip ID / p - Priority level
(1)   75/       0 : =2H                  chnl_Note	equ 2
(1)   76/       0 : =3H                  chnl_Ins	equ 3	; Starting from 1, 0 is invalid
(1)   77/       0 : =4H                  chnl_Vol	equ 4	; MAX to MIN: 40h-00h
(1)   78/       0 : =5H                  chnl_EffId	equ 5
(1)   79/       0 : =6H                  chnl_EffArg	equ 6
(1)   80/       0 : =7H                  chnl_Type	equ 7	; Impulse-note update bits
(1)   81/       0 :                     
(1)   82/       0 :                     ; --------------------------------------------------------
(1)   83/       0 :                     ; Variables
(1)   84/       0 :                     ; --------------------------------------------------------
(1)   85/       0 :                     
(1)   86/       0 :                     ; Z80 opcode labels for the wave playback routines
(1)   87/       0 : =0H                  zopcNop		equ 00h
(1)   88/       0 : =8H                  zopcEx		equ 08h
(1)   89/       0 : =0C9H                zopcRet		equ 0C9h
(1)   90/       0 : =0D9H                zopcExx		equ 0D9h		; (dac_me ONLY)
(1)   91/       0 : =0F5H                zopcPushAf	equ 0F5h		; (dac_fill ONLY)
(1)   92/       0 :                     
(1)   93/       0 :                     ; PSG external control
(1)   94/       0 : =0H                  COM		equ 0
(1)   95/       0 : =4H                  LEV		equ 4
(1)   96/       0 : =8H                  ATK		equ 8
(1)   97/       0 : =0CH                 DKY		equ 12
(1)   98/       0 : =10H                 SLV		equ 16
(1)   99/       0 : =14H                 RRT		equ 20
(1)  100/       0 : =18H                 MODE		equ 24
(1)  101/       0 : =1CH                 DTL		equ 28
(1)  102/       0 : =20H                 DTH		equ 32
(1)  103/       0 : =24H                 ALV		equ 36
(1)  104/       0 : =28H                 FLG		equ 40
(1)  105/       0 : =2CH                 TMR		equ 44
(1)  106/       0 : =30H                 PVOL		equ 48
(1)  107/       0 : =34H                 PARP		equ 52
(1)  108/       0 : =38H                 PTMR		equ 56
(1)  109/       0 :                     
(1)  110/       0 :                     ; PWM control
(1)  111/       0 :                     ; PWCOM		equ 0
(1)  112/       0 :                     ; PWPTH_V	equ 8	; Volume | Pitch MSB (VVVVVVPPb)
(1)  113/       0 :                     ; PWPHL		equ 16	; Pitch LSB
(1)  114/       0 :                     ; PWOUTF	equ 24	; Output mode/bits | 32-bit address (%SlLRxiix) ii=$02 or $06
(1)  115/       0 :                     ; PWINSH	equ 32	; **
(1)  116/       0 :                     ; PWINSM	equ 40	; **
(1)  117/       0 :                     ; PWINSL	equ 48	; **
(1)  118/       0 :                     
(1)  119/       0 :                     ; ====================================================================
(1)  120/       0 :                     ; --------------------------------------------------------
(1)  121/       0 :                     ; Code starts here
(1)  122/       0 :                     ; --------------------------------------------------------
(1)  123/       0 :                     
(1)  124/       0 : F3                  		di			; Disable interrputs first
(1)  125/       1 : ED 56               		im	1		; Set Interrupt mode 1
(1)  126/       3 : 31 00 20            		ld	sp,2000h	; Set stack at the end of Z80
(1)  127/       6 : 18 48               		jr	z80_init	; Jump to z80_init
(1)  128/       8 :                     
(1)  129/       8 :                     ; --------------------------------------------------------
(1)  130/       8 :                     ; RST 8 (dac_me)
(1)  131/       8 :                     ; *** self-modifiable code ***
(1)  132/       8 :                     ;
(1)  133/       8 :                     ; Writes wave data to DAC using data stored
(1)  134/       8 :                     ; on the wave buffer, call this routine every 6 or 8
(1)  135/       8 :                     ; instructions to keep the samplerate stable.
(1)  136/       8 :                     ;
(1)  137/       8 :                     ; Input (EXX):
(1)  138/       8 :                     ;  c - WAVE buffer MSB
(1)  139/       8 :                     ; de - Pitch (xx.00)
(1)  140/       8 :                     ; h  - WAVE buffer LSB (as xx.00)
(1)  141/       8 :                     ;
(1)  142/       8 :                     ; Uses (EXX):
(1)  143/       8 :                     ; b
(1)  144/       8 :                     ;
(1)  145/       8 :                     ; Notes:
(1)  146/       8 :                     ; ONLY USE dac_on and dac_off to control
(1)  147/       8 :                     ; wave playback.
(1)  148/       8 :                     ;
(1)  149/       8 :                     ; call dac_on to enable wave playback, locks FM6
(1)  150/       8 :                     ; and
(1)  151/       8 :                     ; call dac_off to disable wave and unlock FM6.
(1)  152/       8 :                     ; --------------------------------------------------------
(1)  153/       8 :                     
(1)  154/       8 :                     ; Samplerate is at 16000hz with minimal quality loss.
(1)  155/       8 :                     ; 		org 8
(1)  156/       8 : D9                  dac_me:		exx			; * swap regs <-- Changes between EXX(play) and RET(stop)
(1)  157/       9 : 08                  		ex	af,af'		; Swap af
(1)  158/       A : 45                  		ld	b,l		; Save pitch .00 to b
(1)  159/       B : 6C                  		ld	l,h		; l - xx.00 to 00xx
(1)  160/       C : 61                  		ld	h,c		; h - Wave buffer MSB + 00xx
(1)  161/       D : 3E 2A               		ld	a,2Ah		; YM register 2Ah
(1)  162/       F : 32 00 40            		ld	(Zym_ctrl_1),a	; Set DAC write
(1)  163/      12 : 7E                  		ld	a,(hl)		; Read wave byte
(1)  164/      13 : 32 01 40            		ld	(Zym_data_1),a	; Write it to DAC
(1)  165/      16 : 65                  		ld	h,l		; get hl back
(1)  166/      17 : 68                  		ld	l,b		; Get .00 back from b to l
(1)  167/      18 : 19                  		add	hl,de		; Pitch increment hl
(1)  168/      19 : 08                  		ex	af,af'		; Return af
(1)  169/      1A : D9                  		exx			; * swap regs
(1)  170/      1B : C9                  		ret
(1)  171/      1C :                     
(1)  172/      1C :                     ; --------------------------------------------------------
(1)  173/      1C :                     ; 1Ch - Master tracklist pointer
(1)  174/      1C :                     gemaMstrListPos:
(1)  175/      1C : 00                  		db 0				; ** 32-bit 68k address **
(1)  176/      1D : 00                  		db 0
(1)  177/      1E : 00                  		db 0
(1)  178/      1F : 00                  		db 0
(1)  179/      20 :                     
(1)  180/      20 :                     ; --------------------------------------------------------
(1)  181/      20 :                     ; RST 20h (dac_me)
(1)  182/      20 :                     ; *** self-modifiable code ***
(1)  183/      20 :                     ;
(1)  184/      20 :                     ; Checks if the WAVE cache needs refilling to keep
(1)  185/      20 :                     ; it playing.
(1)  186/      20 :                     ; --------------------------------------------------------
(1)  187/      20 :                     
(1)  188/      20 :                     ; 		org 20h
(1)  189/      20 : F5                  dac_fill:	push	af		; <-- Changes between PUSH AF(play) and RET(stop)
(1)  190/      21 : 3A 83 1C            		ld	a,(dDacFifoMid)	; a - Get half-way value
(1)  191/      24 : D9                  		exx			; * swap regs
(1)  192/      25 : AC                  		xor	h		; Grab LSB.00
(1)  193/      26 : D9                  		exx			; * swap regs
(1)  194/      27 : E6 80               		and	80h		; Check if bit changed
(1)  195/      29 : C4 55 12            		call	nz,dac_refill	; If yes, Refill and update LSB to check
(1)  196/      2C : F1                  		pop	af
(1)  197/      2D : C9                  		ret
(1)  198/      2E :                     
(1)  199/      2E :                     ; --------------------------------------------------------
(1)  200/      2E :                     ; 02Eh - User read/write values
(1)  201/      2E : 00                  commZWrite	db 0			; 2Eh: cmd fifo wptr (from 68k)
(1)  202/      2F : 00                  commZRomBlk	db 0			; 2Fh: 68k ROM block flag
(1)  203/      30 : 00                  cdRamLen	db 0			; 30h: Size + status flag
(1)  204/      31 : 00 00               cdRamDst	db 0,0			; 31h: ** Z80 destination
(1)  205/      33 : 00 00               cdRamSrc	db 0,0			; 33h: ** 68k 24-bit source
(1)  206/      35 : 00                  cdRamSrcB	db 0			; 35h: **
(1)  207/      36 : 00                  mcdBlock	db 0			; 36h: Flag to BLOCK SCD comm
(1)  208/      37 : 00                  marsBlock	db 0			; 37h: Flag to BLOCK PWM transfers.
(1)  209/      38 :                     
(1)  210/      38 :                     ; --------------------------------------------------------
(1)  211/      38 :                     ; Z80 Interrupt at 0038h
(1)  212/      38 :                     ; --------------------------------------------------------
(1)  213/      38 :                     
(1)  214/      38 :                     ; 		org 38h			; Align 38h
(1)  215/      38 : ED 73 7E 1C         		ld	(tickSpSet),sp	; Write TICK flag using sp (xx1F, read as tickFlag+1)
(1)  216/      3C : F3                  		di			; Disable interrupt
(1)  217/      3D : C9                  		ret
(1)  218/      3E :                     
(1)  219/      3E :                     ; --------------------------------------------------------
(1)  220/      3E :                     ; 03Eh - More user settings
(1)  221/      3E : 00                  palMode		db 0		; 3Eh: PAL mode flag
(1)  222/      3F : 00                  commZRead	db 0		; cmd fifo READ pointer (here)
(1)  223/      40 :                     
(1)  224/      40 :                     ; --------------------------------------------------------
(1)  225/      40 :                     ; 68K Read/Write area at 40h
(1)  226/      40 :                     ; --------------------------------------------------------
(1)  227/      40 :                     
(1)  228/      40 :                     ; 		org 40h
(1)  229/      40 :                     commZfifo	ds MAX_ZCMND			; Buffer for commands from 68k side
(1)  230/      50 :                     
(1)  231/      50 :                     ; --------------------------------------------------------
(1)  232/      50 :                     ; Initialize
(1)  233/      50 :                     ; --------------------------------------------------------
(1)  234/      50 :                     
(1)  235/      50 :                     z80_init:
(1)  236/      50 : CD 35 0F            		call	gema_init		; Init values
(1)  237/      53 : FB                  		ei
(1)  238/      54 :                     
(1)  239/      54 :                     ; --------------------------------------------------------
(1)  240/      54 :                     ; MAIN LOOP
(1)  241/      54 :                     ; --------------------------------------------------------
(1)  242/      54 :                     
(1)  243/      54 :                     drv_loop:
(1)  244/      54 : CF                  		rst	8
(1)  245/      55 : CD A1 0F            		call	get_tick		; Check tick on VBlank
(1)  246/      58 : E7                  		rst	20h			; Refill wave here
(1)  247/      59 : CF                  		rst	8
(1)  248/      5A : 06 00               		ld	b,0			; b - Reset current flags (beat|tick)
(1)  249/      5C : 3A 80 1C            		ld	a,(tickCnt)		; Decrement tick counter
(1)  250/      5F : D6 01               		sub	1
(1)  251/      61 : 38 0B               		jr	c,.noticks		; If non-zero, no tick passed.
(1)  252/      63 : 32 80 1C            		ld	(tickCnt),a
(1)  253/      66 : CD 7A 10            		call	chip_env		; Process PSG and YM
(1)  254/      69 : CD A1 0F            		call	get_tick		; Check for another tick
(1)  255/      6C : 06 01               		ld 	b,01b			; Set TICK and clear BEAT flags (01b)
(1)  256/      6E :                     .noticks:
(1)  257/      6E : 3A 9C 1C            		ld	a,(sbeatAcc+1)		; check beat counter (scaled by tempo)
(1)  258/      71 : D6 01               		sub	1
(1)  259/      73 : 38 06               		jr	c,.nobeats
(1)  260/      75 : CF                  		rst	8
(1)  261/      76 : 32 9C 1C            		ld	(sbeatAcc+1),a		; 1/24 beat passed.
(1)  262/      79 : CB C8               		set	1,b			; Set BEAT (10b) flag
(1)  263/      7B :                     .nobeats:
(1)  264/      7B : CF                  		rst	8
(1)  265/      7C : 78                  		ld	a,b			; Any beat/tick bits set?
(1)  266/      7D : B7                  		or	a
(1)  267/      7E : 28 14               		jr	z,.neither
(1)  268/      80 : 32 98 1C            		ld	(currTickBits),a	; Save BEAT/TICK bits
(1)  269/      83 : CF                  		rst	8
(1)  270/      84 : CD A1 0F            		call	get_tick
(1)  271/      87 : CD 14 06            		call	set_chips		; Send changes to sound chips
(1)  272/      8A : CD A1 0F            		call	get_tick
(1)  273/      8D : CF                  		rst	8
(1)  274/      8E : CD 2A 02            		call	upd_track		; Update track data
(1)  275/      91 : CD A1 0F            		call	get_tick
(1)  276/      94 :                     .neither:
(1)  277/      94 : CF                  		rst	8
(1)  281/      95 : CD A1 0F            		call	get_tick
(1)  282/      98 :                     .next_cmd:
(1)  283/      98 : 3A 2E 00            		ld	a,(commZWrite)		; Check if commZ R/W indexes
(1)  284/      9B : 47                  		ld	b,a			; are in the same spot a == b
(1)  285/      9C : 3A 3F 00            		ld	a,(commZRead)
(1)  286/      9F : B8                  		cp	b			; If equal, loop back.
(1)  287/      A0 : 28 B2               		jr	z,drv_loop
(1)  288/      A2 : CF                  		rst	8
(1)  289/      A3 : CD BB 00            		call	.grab_arg		; Read staring flag -1
(1)  290/      A6 : FE FF               		cp	-1			; Got START -1?
(1)  291/      A8 : 20 AA               		jr	nz,drv_loop		; If not, end of commands
(1)  292/      AA : CD BB 00            		call	.grab_arg		; Read command number
(1)  293/      AD : 87                  		add	a,a			; ID * 2
(1)  294/      AE : 21 DA 00            		ld	hl,.list		; Index-jump...
(1)  295/      B1 : 16 00               		ld	d,0
(1)  296/      B3 : 5F                  		ld	e,a
(1)  297/      B4 : 19                  		add	hl,de
(1)  298/      B5 : 7E                  		ld	a,(hl)
(1)  299/      B6 : 23                  		inc	hl
(1)  300/      B7 : 66                  		ld	h,(hl)
(1)  301/      B8 : CF                  		rst	8
(1)  302/      B9 : 6F                  		ld	l,a
(1)  303/      BA : E9                  		jp	(hl)
(1)  304/      BB :                     
(1)  305/      BB :                     ; --------------------------------------------------------
(1)  306/      BB :                     ; Read cmd byte, auto re-rolls to 3Fh
(1)  307/      BB :                     ; --------------------------------------------------------
(1)  308/      BB :                     
(1)  309/      BB :                     .grab_arg:
(1)  310/      BB : D5                  		push	de
(1)  311/      BC : E5                  		push	hl
(1)  312/      BD :                     .getcbytel:
(1)  313/      BD : 3A 2E 00            		ld	a,(commZWrite)
(1)  314/      C0 : 57                  		ld	d,a
(1)  315/      C1 : CF                  		rst	8
(1)  316/      C2 : 3A 3F 00            		ld	a,(commZRead)
(1)  317/      C5 : BA                  		cp	d		; commZ R/W indexes are the same?
(1)  318/      C6 : 28 F5               		jr	z,.getcbytel	; wait until these counters change.
(1)  319/      C8 : 16 00               		ld	d,0
(1)  320/      CA : 5F                  		ld	e,a
(1)  321/      CB : 21 40 00            		ld	hl,commZfifo	; Read commZ list + index
(1)  322/      CE : 19                  		add	hl,de
(1)  323/      CF : CF                  		rst	8
(1)  324/      D0 : 3C                  		inc	a
(1)  325/      D1 : E6 0F               		and	MAX_ZCMND-1	; ** commZ list buffer limit
(1)  326/      D3 : 32 3F 00            		ld	(commZRead),a
(1)  327/      D6 : 7E                  		ld	a,(hl)		; a - got this byte from the buffer
(1)  328/      D7 : E1                  		pop	hl
(1)  329/      D8 : D1                  		pop	de
(1)  330/      D9 : C9                  		ret
(1)  331/      DA :                     
(1)  332/      DA :                     ; --------------------------------------------------------
(1)  333/      DA :                     
(1)  334/      DA :                     .list:
(1)  335/      DA : EA 00               		dw .cmnd_0		; 00h -
(1)  336/      DC : ED 00               		dw .cmnd_1		; 01h - Set Master tracklist
(1)  337/      DE : 06 01               		dw .cmnd_2		; 02h - Play by track number
(1)  338/      E0 : 43 01               		dw .cmnd_3		; 03h - Stop by track number
(1)  339/      E2 : EA 00               		dw .cmnd_0		; 04h - **
(1)  340/      E4 : 81 01               		dw .cmnd_5		; 05h - Fade volume (FadeIn/FadeOut)
(1)  341/      E6 : BA 01               		dw .cmnd_6		; 06h - Set maximum volume to slot
(1)  342/      E8 : F3 01               		dw .cmnd_7		; 07h - Set GLOBAL sub-beats
(1)  343/      EA :                     
(1)  344/      EA :                     ; --------------------------------------------------------
(1)  345/      EA :                     ; Command 00h
(1)  346/      EA :                     ;
(1)  347/      EA :                     ; Reserved for TESTING purposes.
(1)  348/      EA :                     ; --------------------------------------------------------
(1)  349/      EA :                     
(1)  350/      EA :                     .cmnd_0:
(1)  351/      EA :                     ; 		ld	a,DacIns_TEST>>16
(1)  352/      EA :                     ; 		ld	hl,(DacIns_TEST+6)&0FFFFh
(1)  353/      EA :                     ; 		ld	(wave_Start),hl
(1)  354/      EA :                     ; 		ld	(wave_Start+2),a
(1)  355/      EA :                     ; 		ld	a,02h
(1)  356/      EA :                     ; 		ld	hl,04000h
(1)  357/      EA :                     ; 		ld	(wave_Len),hl
(1)  358/      EA :                     ; 		ld	(wave_Len+2),a
(1)  359/      EA :                     ; 		ld	bc,0
(1)  360/      EA :                     ; 		ld	(wave_Loop),bc
(1)  361/      EA :                     ; 		ld	hl,100h
(1)  362/      EA :                     ; 		ld	(wave_Pitch),hl
(1)  363/      EA :                     ; 		ld	a,1
(1)  364/      EA :                     ; 		ld	(wave_Flags),a
(1)  365/      EA :                     ; 		call	dac_play
(1)  366/      EA :                     
(1)  367/      EA :                     ; 		ld	iy,trkBuff_0
(1)  368/      EA :                     ; 		ld	(iy+trk_VolMaster),64-16
(1)  369/      EA :                     ; 		ld	(iy+trk_VolFdTarget),64
(1)  370/      EA :                     
(1)  371/      EA : C3 98 00            		jp	.next_cmd
(1)  372/      ED :                     
(1)  373/      ED :                     ; --------------------------------------------------------
(1)  374/      ED :                     ; Command 01h:
(1)  375/      ED :                     ;
(1)  376/      ED :                     ; Set the Track MASTER-list.
(1)  377/      ED :                     ; --------------------------------------------------------
(1)  378/      ED :                     
(1)  379/      ED :                     .cmnd_1:
(1)  380/      ED : 21 1F 00            		ld	hl,gemaMstrListPos+3	; 32-bit big endian
(1)  381/      F0 : CD BB 00            		call	.grab_arg		; $000000xx
(1)  382/      F3 : 77                  		ld	(hl),a
(1)  383/      F4 : 2B                  		dec	hl
(1)  384/      F5 : CD BB 00            		call	.grab_arg		; $0000xx00
(1)  385/      F8 : 77                  		ld	(hl),a
(1)  386/      F9 : 2B                  		dec	hl
(1)  387/      FA : CD BB 00            		call	.grab_arg		; $00xx0000
(1)  388/      FD : 77                  		ld	(hl),a
(1)  389/      FE : 2B                  		dec	hl
(1)  390/      FF : CD BB 00            		call	.grab_arg		; $xx000000 (filler)
(1)  391/     102 : 77                  		ld	(hl),a
(1)  392/     103 : C3 98 00            		jp	.next_cmd
(1)  393/     106 :                     
(1)  394/     106 :                     ; --------------------------------------------------------
(1)  395/     106 :                     ; Command 02h:
(1)  396/     106 :                     ;
(1)  397/     106 :                     ; Make new track by sequence number
(1)  398/     106 :                     ;
(1)  399/     106 :                     ; Arguments:
(1)  400/     106 :                     ; SeqID,BlockPos,SlotIndex(If -1 autofill)
(1)  401/     106 :                     ; --------------------------------------------------------
(1)  402/     106 :                     
(1)  403/     106 :                     .cmnd_2:
(1)  404/     106 : CD BB 00            		call	.grab_arg		; d1: Sequence ID
(1)  405/     109 : 4F                  		ld	c,a			; copy as c
(1)  406/     10A : CD BB 00            		call	.grab_arg		; d2: Block from
(1)  407/     10D : 47                  		ld	b,a			; copy as b
(1)  408/     10E : CF                  		rst	8
(1)  409/     10F : CD BB 00            		call	.grab_arg		; d0: Slot index
(1)  410/     112 : FD 21 5E 14         		ld	iy,nikona_BuffList	; iy - Slot buffer list
(1)  411/     116 : B7                  		or	a
(1)  412/     117 : FA 29 01            		jp	m,.srch_mode
(1)  413/     11A :                     ; 		cp	-1			; if d2 == -1, search
(1)  414/     11A :                     ; 		jr	z,.srch_mode
(1)  415/     11A : FE 04               		cp	(nikona_BuffList_e-nikona_BuffList)/MAX_BUFFNTRY	; If maxed out slots
(1)  416/     11C : D2 98 00            		jp	nc,.next_cmd
(1)  417/     11F : CF                  		rst	8
(1)  418/     120 : CD 04 02            		call	.cmnd_rdslot
(1)  419/     123 : CD 38 01            		call	.wrtto_slot
(1)  420/     126 : C3 98 00            		jp	.next_cmd
(1)  421/     129 :                     ; -1
(1)  422/     129 :                     .srch_mode:
(1)  423/     129 : CD 17 02            		call	.srch_slot
(1)  424/     12C : FE FF               		cp	-1
(1)  425/     12E : CA 98 00            		jp	z,.next_cmd		; Then skip, no free slot.
(1)  426/     131 : CB 7E               		bit	7,(hl)			; Is this track free?
(1)  427/     133 : CA 38 01            		jp	z,.wrtto_slot
(1)  428/     136 : 18 F1               		jr	.srch_mode
(1)  429/     138 :                     .wrtto_slot:
(1)  430/     138 : 36 C0               		ld	(hl),0C0h		; ** Write trk_Status flags: Enable+Restart
(1)  431/     13A : 23                  		inc	hl
(1)  432/     13B : CF                  		rst	8
(1)  433/     13C : 71                  		ld	(hl),c			; ** write trk_SeqId
(1)  434/     13D : 23                  		inc	hl
(1)  435/     13E : 70                  		ld	(hl),b			; ** write trk_SetBlk
(1)  436/     13F : 79                  		ld	a,c
(1)  437/     140 : C3 98 00            		jp	.next_cmd
(1)  438/     143 :                     
(1)  439/     143 :                     ; --------------------------------------------------------
(1)  440/     143 :                     ; Command 03h:
(1)  441/     143 :                     ;
(1)  442/     143 :                     ; Stop track with the same sequence number
(1)  443/     143 :                     ;
(1)  444/     143 :                     ; SeqID,SlotIndex(-1 allslots)
(1)  445/     143 :                     ; --------------------------------------------------------
(1)  446/     143 :                     
(1)  447/     143 :                     .cmnd_3:
(1)  448/     143 : CD BB 00            		call	.grab_arg		; d1: Sequence ID
(1)  449/     146 : 4F                  		ld	c,a			; copy to c
(1)  450/     147 : CD BB 00            		call	.grab_arg		; d0: Slot index
(1)  451/     14A : FD 21 5E 14         		ld	iy,nikona_BuffList	; iy - Slot buffer list
(1)  452/     14E : B7                  		or	a
(1)  453/     14F : FA 61 01            		jp	m,.srch_del
(1)  454/     152 :                     ; 		cp	-1			; if -1, search for all with same ID
(1)  455/     152 :                     ; 		jr	z,.srch_del
(1)  456/     152 : FE 04               		cp	(nikona_BuffList_e-nikona_BuffList)/MAX_BUFFNTRY	; If maxed out slots
(1)  457/     154 : D2 98 00            		jp	nc,.next_cmd
(1)  458/     157 : CF                  		rst	8
(1)  459/     158 : CD 04 02            		call	.cmnd_rdslot
(1)  460/     15B : CD 6E 01            		call	.wrtto_del
(1)  461/     15E : C3 98 00            		jp	.next_cmd
(1)  462/     161 :                     ; -1
(1)  463/     161 :                     .srch_del:
(1)  464/     161 : CD 17 02            		call	.srch_slot
(1)  465/     164 : FE FF               		cp	-1
(1)  466/     166 : CA 98 00            		jp	z,.next_cmd
(1)  467/     169 : CD 6E 01            		call	.wrtto_del
(1)  468/     16C : 18 F3               		jr	.srch_del
(1)  469/     16E :                     .wrtto_del:
(1)  470/     16E : CB 7E               		bit	7,(hl)
(1)  471/     170 : C8                  		ret	z
(1)  472/     171 : CB 79               		bit	7,c		; <-- lazy -1 check
(1)  473/     173 : 20 05               		jr	nz,.del_all
(1)  474/     175 : DD 7E 01            		ld	a,(ix+trk_SeqId)
(1)  475/     178 : B9                  		cp	c
(1)  476/     179 : C0                  		ret	nz
(1)  477/     17A :                     .del_all:
(1)  478/     17A : 36 FF               		ld	(hl),-1		; -1 flag, stop channel and clear slot
(1)  479/     17C : 23                  		inc	hl
(1)  480/     17D : 36 FF               		ld	(hl),-1		; Reset seqId
(1)  481/     17F : CF                  		rst	8
(1)  482/     180 : C9                  		ret
(1)  483/     181 :                     
(1)  484/     181 :                     ; --------------------------------------------------------
(1)  485/     181 :                     ; Command 05h:
(1)  486/     181 :                     ;
(1)  487/     181 :                     ; Fade volume (FadeIn/FadeOut)
(1)  488/     181 :                     ;
(1)  489/     181 :                     ; Arguments:
(1)  490/     181 :                     ; TargetVol,SlotIndex(If -1 autofill)
(1)  491/     181 :                     ; --------------------------------------------------------
(1)  492/     181 :                     
(1)  493/     181 :                     .cmnd_5:
(1)  494/     181 : CD BB 00            		call	.grab_arg		; d1: Master volume
(1)  495/     184 : 4F                  		ld	c,a			; copy to c
(1)  496/     185 : CD BB 00            		call	.grab_arg		; d0: Slot index
(1)  497/     188 : FD 21 5E 14         		ld	iy,nikona_BuffList	; iy - Slot buffer list
(1)  498/     18C : B7                  		or	a
(1)  499/     18D : FA 9F 01            		jp	m,.srch_fvol
(1)  500/     190 :                     ; 		cp	-1			; if -1, search for all with same ID
(1)  501/     190 :                     ; 		jr	z,.srch_fvol
(1)  502/     190 : FE 04               		cp	(nikona_BuffList_e-nikona_BuffList)/MAX_BUFFNTRY	; If maxed out slots
(1)  503/     192 : D2 98 00            		jp	nc,.next_cmd
(1)  504/     195 : CF                  		rst	8
(1)  505/     196 : CD 04 02            		call	.cmnd_rdslot
(1)  506/     199 : CD AC 01            		call	.wrtto_fvol
(1)  507/     19C : C3 98 00            		jp	.next_cmd
(1)  508/     19F :                     ; -1
(1)  509/     19F :                     .srch_fvol:
(1)  510/     19F : CD 17 02            		call	.srch_slot
(1)  511/     1A2 : FE FF               		cp	-1
(1)  512/     1A4 : CA 98 00            		jp	z,.next_cmd		; Then skip, no free slot.
(1)  513/     1A7 : CD AC 01            		call	.wrtto_fvol
(1)  514/     1AA : 18 F3               		jr	.srch_fvol
(1)  515/     1AC :                     .wrtto_fvol:
(1)  516/     1AC : CB 7E               		bit	7,(hl)			; Active?
(1)  517/     1AE : C8                  		ret	z
(1)  518/     1AF : CB DE               		set	3,(hl)			; Volume update flag
(1)  519/     1B1 : DD 71 19            		ld	(ix+trk_VolFdTarget),c
(1)  520/     1B4 : DD 36 0F 00         		ld	(ix+trk_VolMaster+1),0
(1)  521/     1B8 : CF                  		rst	8
(1)  522/     1B9 : C9                  		ret
(1)  523/     1BA :                     
(1)  524/     1BA :                     ; --------------------------------------------------------
(1)  525/     1BA :                     ; Command 06h:
(1)  526/     1BA :                     ;
(1)  527/     1BA :                     ; Set track's master volume
(1)  528/     1BA :                     ;
(1)  529/     1BA :                     ; Arguments:
(1)  530/     1BA :                     ; MasterVol,SlotIndex(If -1 autofill)
(1)  531/     1BA :                     ; --------------------------------------------------------
(1)  532/     1BA :                     
(1)  533/     1BA :                     .cmnd_6:
(1)  534/     1BA : CD BB 00            		call	.grab_arg		; d1: Master volume
(1)  535/     1BD : 4F                  		ld	c,a			; copy to c
(1)  536/     1BE : CD BB 00            		call	.grab_arg		; d0: Slot index
(1)  537/     1C1 : FD 21 5E 14         		ld	iy,nikona_BuffList	; iy - Slot buffer list
(1)  538/     1C5 : B7                  		or	a
(1)  539/     1C6 : FA D8 01            		jp	m,.srch_vol
(1)  540/     1C9 :                     ; 		cp	-1			; if -1, search for all with same ID
(1)  541/     1C9 :                     ; 		jr	z,.srch_vol
(1)  542/     1C9 : FE 04               		cp	(nikona_BuffList_e-nikona_BuffList)/MAX_BUFFNTRY	; If maxed out slots
(1)  543/     1CB : D2 98 00            		jp	nc,.next_cmd
(1)  544/     1CE : CF                  		rst	8
(1)  545/     1CF : CD 04 02            		call	.cmnd_rdslot
(1)  546/     1D2 : CD E5 01            		call	.wrtto_vol
(1)  547/     1D5 : C3 98 00            		jp	.next_cmd
(1)  548/     1D8 :                     ; -1
(1)  549/     1D8 :                     .srch_vol:
(1)  550/     1D8 : CD 17 02            		call	.srch_slot
(1)  551/     1DB : FE FF               		cp	-1
(1)  552/     1DD : CA 98 00            		jp	z,.next_cmd		; Then skip, no free slot.
(1)  553/     1E0 : CD E5 01            		call	.wrtto_vol
(1)  554/     1E3 : 18 F3               		jr	.srch_vol
(1)  555/     1E5 :                     .wrtto_vol:
(1)  556/     1E5 : CB DE               		set	3,(hl)			; Volume update flag
(1)  557/     1E7 : DD 71 0E            		ld	(ix+trk_VolMaster),c
(1)  558/     1EA : DD 71 19            		ld	(ix+trk_VolFdTarget),c
(1)  559/     1ED : DD 36 0F 00         		ld	(ix+trk_VolMaster+1),0
(1)  560/     1F1 : CF                  		rst	8
(1)  561/     1F2 : C9                  		ret
(1)  562/     1F3 :                     
(1)  563/     1F3 :                     ; --------------------------------------------------------
(1)  564/     1F3 :                     ; Command 07h:
(1)  565/     1F3 :                     ;
(1)  566/     1F3 :                     ; Set global sub-beats
(1)  567/     1F3 :                     ; --------------------------------------------------------
(1)  568/     1F3 :                     
(1)  569/     1F3 :                     .cmnd_7:
(1)  570/     1F3 : CD BB 00            		call	.grab_arg	; d0.w: $00xx
(1)  571/     1F6 : 4F                  		ld	c,a
(1)  572/     1F7 : CD BB 00            		call	.grab_arg	; d0.w: $xx00
(1)  573/     1FA : 32 9E 1C            		ld	(sbeatPtck+1),a
(1)  574/     1FD : 79                  		ld	a,c
(1)  575/     1FE : 32 9D 1C            		ld	(sbeatPtck),a
(1)  576/     201 : C3 98 00            		jp	.next_cmd
(1)  577/     204 :                     
(1)  578/     204 :                     ; --------------------------------------------------------
(1)  579/     204 :                     ; Shared subs
(1)  580/     204 :                     ; --------------------------------------------------------
(1)  581/     204 :                     
(1)  582/     204 :                     .cmnd_rdslot:
(1)  583/     204 : 87                  		add	a,a			; ** MANUAL MAX_BUFFNTRY
(1)  584/     205 : 87                  		add	a,a			; id*8
(1)  585/     206 : 87                  		add	a,a
(1)  586/     207 : 16 00               		ld	d,0
(1)  587/     209 : 5F                  		ld	e,a
(1)  588/     20A : FD 19               		add	iy,de
(1)  589/     20C : FD 7E 00            		ld	a,(iy)
(1)  590/     20F : FD 66 01            		ld	h,(iy+1)
(1)  591/     212 : 6F                  		ld	l,a
(1)  592/     213 : E5                  		push	hl
(1)  593/     214 : DD E1               		pop	ix
(1)  594/     216 : C9                  		ret
(1)  595/     217 :                     
(1)  596/     217 :                     ; ------------------------------------------------
(1)  597/     217 :                     ; iy - nikona_BuffList
(1)  598/     217 :                     
(1)  599/     217 :                     .srch_slot:
(1)  600/     217 : FD 7E 00            		ld	a,(iy)
(1)  601/     21A : FE FF               		cp	-1			; End of list?
(1)  602/     21C : C8                  		ret	z
(1)  603/     21D : FD 66 01            		ld	h,(iy+1)		; hl - Current track slot
(1)  604/     220 : 6F                  		ld	l,a
(1)  605/     221 : E5                  		push	hl
(1)  606/     222 : DD E1               		pop	ix
(1)  607/     224 : 11 08 00            		ld	de,MAX_BUFFNTRY
(1)  608/     227 : FD 19               		add	iy,de			; Next entry for later
(1)  609/     229 : C9                  		ret
(1)  610/     22A :                     
(1)  611/     22A :                     ; ====================================================================
(1)  612/     22A :                     ; ----------------------------------------------------------------
(1)  613/     22A :                     ; MAIN Playback section
(1)  614/     22A :                     ; ----------------------------------------------------------------
(1)  615/     22A :                     
(1)  616/     22A :                     ; --------------------------------------------------------
(1)  617/     22A :                     ; Read mini-impulse-tracker data
(1)  618/     22A :                     ; --------------------------------------------------------
(1)  619/     22A :                     
(1)  620/     22A :                     upd_track:
(1)  621/     22A : E7                  		rst	20h			; Refill wave
(1)  622/     22B : CD A1 0F            		call	get_tick		; Check for tick flag
(1)  623/     22E : FD 21 5E 14         		ld	iy,nikona_BuffList	; iy - slot buffer List
(1)  624/     232 :                     .trk_buffrs:
(1)  625/     232 : FD 7E 00            		ld	a,(iy)			; if -1, end here.
(1)  626/     235 : FE FF               		cp	-1
(1)  627/     237 : C8                  		ret	z
(1)  628/     238 : CF                  		rst	8
(1)  629/     239 : FD E5               		push	iy
(1)  630/     23B : CD 47 02            		call	.read_track
(1)  631/     23E : FD E1               		pop	iy
(1)  632/     240 : 11 08 00            		ld	de,MAX_BUFFNTRY
(1)  633/     243 : FD 19               		add	iy,de
(1)  634/     245 : 18 EB               		jr	.trk_buffrs
(1)  635/     247 :                     
(1)  636/     247 :                     ; ----------------------------------------
(1)  637/     247 :                     ; iy - Track buffer
(1)  638/     247 :                     ; ----------------------------------------
(1)  639/     247 :                     
(1)  640/     247 :                     .read_track:
(1)  641/     247 : FD 6E 00            		ld	l,(iy)			; hl - current track slot
(1)  642/     24A : FD 66 01            		ld	h,(iy+1)
(1)  643/     24D : CF                  		rst	8
(1)  644/     24E : E5                  		push	hl
(1)  645/     24F : FD E1               		pop	iy			; change iy to hl
(1)  646/     251 : FD 46 00            		ld	b,(iy+trk_Status)	; b - Track status and settings
(1)  647/     254 : CB 78               		bit	7,b			; bit7: Track active?
(1)  648/     256 : C8                  		ret	z			; Return if not.
(1)  649/     257 : 78                  		ld	a,b
(1)  650/     258 : FE FF               		cp	-1			; Flag is -1?
(1)  651/     25A : C8                  		ret	z			; Return if mid-flag
(1)  652/     25B : CF                  		rst	8
(1)  653/     25C :                     	; ----------------------------------------
(1)  654/     25C :                     	; Track volume changes
(1)  655/     25C : FD 6E 0F            		ld	l,(iy+trk_VolMaster+1)
(1)  656/     25F : FD 66 0E            		ld	h,(iy+trk_VolMaster)
(1)  657/     262 : FD 4E 19            		ld	c,(iy+trk_VolFdTarget)
(1)  658/     265 : 11 00 01            		ld	de,0100h		; <-- Manual volfade speed MAX 0100h
(1)  659/     268 : 79                  		ld	a,c
(1)  660/     269 : BC                  		cp	h
(1)  661/     26A : 28 1E               		jr	z,.keep_vol
(1)  662/     26C : 30 06               		jr	nc,.fade_out
(1)  663/     26E : 11 80 FF            		ld	de,-80h
(1)  664/     271 : 19                  		add	hl,de
(1)  665/     272 : 18 0C               		jr	.too_much
(1)  666/     274 :                     .fade_out:
(1)  667/     274 : 19                  		add	hl,de
(1)  668/     275 : CF                  		rst	8
(1)  669/     276 : 7C                  		ld	a,h
(1)  670/     277 : B9                  		cp	c
(1)  671/     278 : 38 06               		jr	c,.too_much
(1)  672/     27A : 61                  		ld	h,c
(1)  673/     27B : 2E 00               		ld	l,0
(1)  674/     27D : FD 71 19            		ld	(iy+trk_VolFdTarget),c
(1)  675/     280 :                     .too_much:
(1)  676/     280 : FD CB 00 DE         		set	3,(iy+trk_Status)	; Volume update flag
(1)  677/     284 : FD 75 0F            		ld	(iy+trk_VolMaster+1),l
(1)  678/     287 : FD 74 0E            		ld	(iy+trk_VolMaster),h
(1)  679/     28A :                     .keep_vol:
(1)  680/     28A :                     	; ----------------------------------------
(1)  681/     28A : 3A 98 1C            		ld	a,(currTickBits)	; a - Tick/Beat bits
(1)  682/     28D : CB 40               		bit	0,b			; bit0: This track uses Beats?
(1)  683/     28F : 28 03               		jr	z,.sfxmd
(1)  684/     291 : CB 4F               		bit	1,a			; BEAT passed?
(1)  685/     293 : C8                  		ret	z			; No BEAT.
(1)  686/     294 :                     .sfxmd:
(1)  687/     294 : CB 47               		bit	0,a			; TICK passed?
(1)  688/     296 : C8                  		ret	z			; No TICK.
(1)  689/     297 : CF                  		rst	8
(1)  690/     298 :                     	; ----------------------------------------
(1)  691/     298 :                     	; Start reading notes
(1)  692/     298 : CB 70               		bit	6,b			; bit6: Restart/First time?
(1)  693/     29A : C4 26 05            		call	nz,.first_fill
(1)  694/     29D : CB 68               		bit	5,b			; bit5: FILL request by effect?
(1)  695/     29F : C4 1F 05            		call	nz,.effect_fill
(1)  696/     2A2 : FD 7E 12            		ld	a,(iy+trk_tickTmr)	; TICK ex-timer for this track
(1)  697/     2A5 : 3D                  		dec	a
(1)  698/     2A6 : FD 77 12            		ld	(iy+trk_tickTmr),a
(1)  699/     2A9 : B7                  		or	a			; Check a
(1)  700/     2AA : C0                  		ret	nz			; If Tick timer != 0, exit.
(1)  701/     2AB : CF                  		rst	8
(1)  702/     2AC : FD 7E 03            		ld	a,(iy+trk_TickSet)	; Set new tick timer
(1)  703/     2AF : FD 77 12            		ld	(iy+trk_tickTmr),a
(1)  704/     2B2 : FD 4E 0C            		ld	c,(iy+trk_Rows)		; bc - Set row counter
(1)  705/     2B5 : FD 46 0D            		ld	b,(iy+(trk_Rows+1))
(1)  706/     2B8 : 79                  		ld	a,c			; Check rowcount
(1)  707/     2B9 : B0                  		or	b
(1)  708/     2BA : 20 14               		jr	nz,.row_active		; If bc != 0: row is currenly playing.
(1)  709/     2BC : CF                  		rst	8			; If bc == 0 ...
(1)  710/     2BD : FD 7E 13            		ld	a,(iy+trk_currBlk)	; Next block
(1)  711/     2C0 : 3C                  		inc	a
(1)  712/     2C1 : FD 77 13            		ld 	(iy+trk_currBlk),a
(1)  713/     2C4 : CD 33 04            		call	.set_track		; Read track data ** ROM ACCESS **
(1)  714/     2C7 : FE FF               		cp	-1			; Track finished?
(1)  715/     2C9 : C8                  		ret	z
(1)  716/     2CA : FD 4E 0C            		ld	c,(iy+trk_Rows)		; Set new rowcount to bc
(1)  717/     2CD : FD 46 0D            		ld	b,(iy+(trk_Rows+1))
(1)  718/     2D0 :                     .row_active:
(1)  719/     2D0 : CF                  		rst	8
(1)  720/     2D1 : FD 6E 0A            		ld	l,(iy+trk_Read)		; hl - CURRENT pattern to read
(1)  721/     2D4 : FD 66 0B            		ld	h,(iy+((trk_Read+1)))
(1)  722/     2D7 :                     
(1)  723/     2D7 :                     ; --------------------------------
(1)  724/     2D7 :                     ; Main read-loop
(1)  725/     2D7 :                     ; --------------------------------
(1)  726/     2D7 :                     
(1)  727/     2D7 :                     .next_note:
(1)  728/     2D7 : FD 7E 11            		ld	a,(iy+trk_rowPause)	; Check rowtimer
(1)  729/     2DA : B7                  		or	a
(1)  730/     2DB : 20 16               		jr	nz,.decrow
(1)  731/     2DD : 7E                  		ld	a,(hl)			; Check if byte is a timer or a note
(1)  732/     2DE : B7                  		or	a
(1)  733/     2DF : 28 06               		jr	z,.exit			; If == 00h: exit
(1)  734/     2E1 : FA FE 02            		jp	m,.has_note		; If 80h-0FFh: Note data
(1)  735/     2E4 : FD 77 11            		ld	(iy+trk_rowPause),a	; If 01h-07Fh: Row-pause timer
(1)  736/     2E7 :                     
(1)  737/     2E7 :                     ; --------------------------------
(1)  738/     2E7 :                     ; Exit
(1)  739/     2E7 :                     ; --------------------------------
(1)  740/     2E7 :                     
(1)  741/     2E7 :                     .exit:
(1)  742/     2E7 : CF                  		rst	8
(1)  743/     2E8 : CD FB 03            		call	.inc_cpatt		; * Increment patt pos
(1)  744/     2EB : FD 75 0A            		ld	(iy+trk_Read),l		; Update READ location
(1)  745/     2EE : FD 74 0B            		ld	(iy+((trk_Read+1))),h
(1)  746/     2F1 : 18 03               		jr	.decrow_e
(1)  747/     2F3 :                     .decrow:
(1)  748/     2F3 : FD 35 11            		dec	(iy+trk_rowPause)	; Decrement row-pause timer
(1)  749/     2F6 :                     .decrow_e:
(1)  750/     2F6 : 0B                  		dec	bc			; Decrement rowcount
(1)  751/     2F7 : FD 71 0C            		ld	(iy+trk_Rows),c		; Write last row to memory
(1)  752/     2FA : FD 70 0D            		ld	(iy+(trk_Rows+1)),b
(1)  753/     2FD : C9                  		ret	; Exit.
(1)  754/     2FE :                     
(1)  755/     2FE :                     ; --------------------------------
(1)  756/     2FE :                     ; New note request
(1)  757/     2FE :                     ;
(1)  758/     2FE :                     ; a - %1tcccccc
(1)  759/     2FE :                     ;   | t - next byte has new type
(1)  760/     2FE :                     ;   | c - channel
(1)  761/     2FE :                     ; --------------------------------
(1)  762/     2FE :                     
(1)  763/     2FE :                     .has_note:
(1)  764/     2FE : CF                  		rst	8
(1)  765/     2FF : C5                  		push	bc			; Save rowcount
(1)  766/     300 : 4F                  		ld	c,a			; Copy patt byte control to c
(1)  767/     301 : CD FB 03            		call	.inc_cpatt		; * Increment patt pos
(1)  768/     304 : E5                  		push	hl			; Save hl patt pos
(1)  769/     305 : FD E5               		push	iy
(1)  770/     307 : E1                  		pop	hl
(1)  771/     308 : DD 21 00 1E         		ld	ix,trkChnls		; ix - Channels buffer
(1)  772/     30C : 11 26 00            		ld	de,trk_ChnIndx		; <-- this also clears d
(1)  773/     30F : CF                  		rst	8
(1)  774/     310 : 19                  		add	hl,de			; hl - Track's index points buffer
(1)  775/     311 : 79                  		ld	a,c			; Get patt note position
(1)  776/     312 : E6 1F               		and	00011111b		; Filter index bits
(1)  777/     314 : 5F                  		ld	e,a			; Save as e
(1)  778/     315 : 19                  		add	hl,de			; Increment more by this pos
(1)  779/     316 : 7E                  		ld	a,(hl)			; Check if this index is occupied.
(1)  780/     317 : B7                  		or	a
(1)  781/     318 : 28 0A               		jr	z,.srch_new		; If == 0, new index
(1)  782/     31A : E6 1F               		and	00011111b		; If already used, read that channel
(1)  783/     31C : 87                  		add	a,a
(1)  784/     31D : 87                  		add	a,a
(1)  785/     31E : 87                  		add	a,a
(1)  786/     31F : 5F                  		ld	e,a
(1)  787/     320 : DD 19               		add	ix,de
(1)  788/     322 : 18 2B               		jr	.cont_chnl
(1)  789/     324 :                     
(1)  790/     324 :                     ; Make NEW channel
(1)  791/     324 :                     ; ix - channel list start
(1)  792/     324 :                     .srch_new:
(1)  793/     324 : CF                  		rst	8
(1)  794/     325 : 06 1F               		ld	b,MAX_TRKCHN-1	; Max channels to check - 1
(1)  795/     327 : 16 00               		ld	d,0		; Reset out index
(1)  796/     329 :                     .next_chnl:
(1)  797/     329 : DD 7E 00            		ld	a,(ix)		; Read chnl_Flags
(1)  798/     32C : B7                  		or	a		; If plus, track channel is free
(1)  799/     32D : F2 44 03            		jp	p,.chnl_free
(1)  800/     330 : DD 23               		inc	ix		; Search next channel, increment by 8
(1)  801/     332 : DD 23               		inc	ix
(1)  802/     334 : DD 23               		inc	ix
(1)  803/     336 : DD 23               		inc	ix
(1)  804/     338 : CF                  		rst	8
(1)  805/     339 : DD 23               		inc	ix
(1)  806/     33B : DD 23               		inc	ix
(1)  807/     33D : DD 23               		inc	ix
(1)  808/     33F : DD 23               		inc	ix
(1)  809/     341 : 14                  		inc	d		; Increment out index
(1)  810/     342 : 10 E5               		djnz	.next_chnl
(1)  811/     344 :                     .chnl_free:
(1)  812/     344 : CF                  		rst	8
(1)  813/     345 : 7A                  		ld	a,d			; Read index we got
(1)  814/     346 : E6 1F               		and	00011111b		; Filter bits
(1)  815/     348 : F6 80               		or	10000000b		; + set as used
(1)  816/     34A : 77                  		ld	(hl),a			; Write index slot
(1)  817/     34B : DD CB 00 FE         		set	7,(ix+chnl_Flags)	; Enable channel on the list
(1)  818/     34F :                     .cont_chnl:
(1)  819/     34F : E1                  		pop	hl			; Recover patt pos
(1)  820/     350 :                     	; ix - current channel
(1)  821/     350 : CF                  		rst	8
(1)  822/     351 : DD 46 07            		ld	b,(ix+chnl_Type)	; b - current TYPE byte
(1)  823/     354 : CB 71               		bit	6,c			; This byte has new TYPE setting?
(1)  824/     356 : 28 08               		jr	z,.old_type
(1)  825/     358 : 7E                  		ld	a,(hl)
(1)  826/     359 : DD 77 07            		ld	(ix+chnl_Type),a	; Update TYPE byte
(1)  827/     35C : 47                  		ld	b,a			; Set to b
(1)  828/     35D : CD FB 03            		call	.inc_cpatt		; Next patt pos
(1)  829/     360 :                     .old_type:
(1)  830/     360 :                     	; b - evinEVIN
(1)  831/     360 :                     	;     E-effect/V-volume/I-instrument/N-note
(1)  832/     360 :                     	;     evin: byte is already stored on track-channel buffer
(1)  833/     360 :                     	;     EVIN: next byte(s) contain a new value. for eff:2 bytes
(1)  834/     360 :                     
(1)  835/     360 : CF                  		rst	8
(1)  836/     361 : CB 40               		bit	0,b			; New NOTE?
(1)  837/     363 : 28 07               		jr	z,.no_note
(1)  838/     365 : 7E                  		ld	a,(hl)			; Set NOTE and increment patt
(1)  839/     366 : DD 77 02            		ld	(ix+chnl_Note),a
(1)  840/     369 : CD FB 03            		call	.inc_cpatt
(1)  841/     36C :                     .no_note:
(1)  842/     36C : CB 48               		bit	1,b			; New INS?
(1)  843/     36E : 28 07               		jr	z,.no_ins
(1)  844/     370 : 7E                  		ld	a,(hl)			; Set INS and increment patt
(1)  845/     371 : DD 77 03            		ld	(ix+chnl_Ins),a
(1)  846/     374 : CD FB 03            		call	.inc_cpatt
(1)  847/     377 :                     .no_ins:
(1)  848/     377 : CB 50               		bit	2,b			; New VOL?
(1)  849/     379 : 28 07               		jr	z,.no_vol
(1)  850/     37B : 7E                  		ld	a,(hl)			; Set VOL and increment patt
(1)  851/     37C : DD 77 04            		ld	(ix+chnl_Vol),a
(1)  852/     37F : CD FB 03            		call	.inc_cpatt
(1)  853/     382 :                     .no_vol:
(1)  854/     382 : CB 58               		bit	3,b			; New EFFECT?
(1)  855/     384 : 28 0F               		jr	z,.no_eff
(1)  856/     386 : 7E                  		ld	a,(hl)			; Set EFFECT ID, incr patt
(1)  857/     387 : DD 77 05            		ld	(ix+chnl_EffId),a
(1)  858/     38A : CD FB 03            		call	.inc_cpatt
(1)  859/     38D : CF                  		rst	8
(1)  860/     38E : 7E                  		ld	a,(hl)			; Set EFFECT ARG, incr patt
(1)  861/     38F : DD 77 06            		ld	(ix+chnl_EffArg),a
(1)  862/     392 : CD FB 03            		call	.inc_cpatt
(1)  863/     395 :                     .no_eff:
(1)  864/     395 : 78                  		ld	a,b			; Merge the Impulse evin bits into main EVIN bits
(1)  865/     396 : 0F                  		rrca
(1)  866/     397 : 0F                  		rrca
(1)  867/     398 : 0F                  		rrca
(1)  868/     399 : 0F                  		rrca
(1)  869/     39A : E6 0F               		and	00001111b		; Filter bits
(1)  870/     39C : 4F                  		ld	c,a			; Save as c
(1)  871/     39D : 78                  		ld	a,b
(1)  872/     39E : E6 0F               		and	00001111b		; Filter again
(1)  873/     3A0 : B1                  		or	c			; Merge c with a
(1)  874/     3A1 : CF                  		rst	8
(1)  875/     3A2 : 4F                  		ld	c,a			; Save bit flags
(1)  876/     3A3 : DD 7E 00            		ld	a,(ix+chnl_Flags)
(1)  877/     3A6 : B1                  		or	c
(1)  878/     3A7 : DD 77 00            		ld	(ix+chnl_Flags),a
(1)  879/     3AA :                     	; Check for effects that affect
(1)  880/     3AA :                     	; internal playback:
(1)  881/     3AA :                     	; Jump, Ticks, etc.
(1)  882/     3AA : C1                  		pop	bc		; Restore rowcount
(1)  883/     3AB : DD 7E 00            		ld	a,(ix+chnl_Flags)
(1)  884/     3AE : E6 08               		and	1000b		; ONLY check for the EFFECT bit
(1)  885/     3B0 : CA D7 02            		jp	z,.next_note
(1)  886/     3B3 : DD 7E 05            		ld	a,(ix+chnl_EffId)
(1)  887/     3B6 : B7                  		or	a		; 00h = invalid effect
(1)  888/     3B7 : CA D7 02            		jp	z,.next_note
(1)  889/     3BA : FE 01               		cp	1		; Effect A: Tick set
(1)  890/     3BC : 28 0B               		jr	z,.eff_A
(1)  891/     3BE : FE 02               		cp	2		; Effect B: Position Jump
(1)  892/     3C0 : 28 18               		jr	z,.eff_B
(1)  893/     3C2 : FE 03               		cp	3		; Effect C: Pattern break
(1)  894/     3C4 : 28 32               		jr	z,.eff_C	; <-- JUMP and exit.
(1)  895/     3C6 : C3 D7 02            		jp	.next_note
(1)  896/     3C9 :                     
(1)  897/     3C9 :                     ; ----------------------------------------
(1)  898/     3C9 :                     ; Effect A: Set ticks
(1)  899/     3C9 :                     ; ----------------------------------------
(1)  900/     3C9 :                     
(1)  901/     3C9 :                     .eff_A:
(1)  902/     3C9 : CF                  		rst	8
(1)  903/     3CA : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - ticks number
(1)  904/     3CD : FD 73 03            		ld	(iy+trk_TickSet),e	; set for both Set and Timer.
(1)  905/     3D0 : FD 73 12            		ld	(iy+trk_tickTmr),e
(1)  906/     3D3 : DD CB 00 9E         		res	3,(ix+chnl_Flags)	; <-- Clear EFFECT bit
(1)  907/     3D7 : C3 D7 02            		jp	.next_note
(1)  908/     3DA :                     
(1)  909/     3DA :                     ; ----------------------------------------
(1)  910/     3DA :                     ; Effect B: jump to a new block
(1)  911/     3DA :                     ; ----------------------------------------
(1)  912/     3DA :                     
(1)  913/     3DA :                     .eff_B:
(1)  914/     3DA : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - Block SLOT to jump
(1)  915/     3DD : FD 73 13            		ld 	(iy+trk_currBlk),e
(1)  916/     3E0 : CF                  		rst	8
(1)  917/     3E1 : FD 36 11 00         		ld	(iy+trk_rowPause),0	; Reset rowpause
(1)  918/     3E5 : DD CB 00 9E         		res	3,(ix+chnl_Flags)	; <-- Clear EFFECT bit
(1)  919/     3E9 : FD CB 00 EE         		set	5,(iy+trk_Status)	; set fill-from-effect flag on exit
(1)  920/     3ED : 3E 80               		ld	a,80h
(1)  921/     3EF : FD 77 16            		ld	(iy+trk_BankHeads),a
(1)  922/     3F2 : FD 77 17            		ld	(iy+trk_BankBlk),a
(1)  923/     3F5 : C3 D7 02            		jp	.next_note
(1)  924/     3F8 :                     
(1)  925/     3F8 :                     ; ----------------------------------------
(1)  926/     3F8 :                     ; Effect C: Pattern break/exit
(1)  927/     3F8 :                     ;
(1)  928/     3F8 :                     ; Only used on SFX, arguments ignored.
(1)  929/     3F8 :                     ; ----------------------------------------
(1)  930/     3F8 :                     
(1)  931/     3F8 :                     .eff_C:
(1)  932/     3F8 : C3 0C 05            		jp	.track_end
(1)  933/     3FB :                     
(1)  934/     3FB :                     ; ----------------------------------------
(1)  935/     3FB :                     ; Increment the current patt position
(1)  936/     3FB :                     ; and recieve more data
(1)  937/     3FB :                     ;
(1)  938/     3FB :                     ; Breaks:
(1)  939/     3FB :                     ; a,e
(1)  940/     3FB :                     ; ----------------------------------------
(1)  941/     3FB :                     
(1)  942/     3FB :                     .inc_cpatt:
(1)  943/     3FB : FD 5E 08            		ld	e,(iy+trk_Cach)	; Read curret cache LSB
(1)  944/     3FE : 7D                  		ld	a,l
(1)  945/     3FF : 3C                  		inc	a
(1)  946/     400 : E6 1F               		and	MAX_RCACH-1
(1)  947/     402 : FE 1E               		cp	MAX_RCACH-2	; RAN OUT of bytes?
(1)  948/     404 : 30 03               		jr	nc,.ran_out
(1)  949/     406 : B3                  		or	e
(1)  950/     407 : 6F                  		ld	l,a
(1)  951/     408 : C9                  		ret
(1)  952/     409 :                     .ran_out:
(1)  953/     409 : FD 6E 08            		ld	l,(iy+trk_Cach)
(1)  954/     40C : E5                  		push	hl
(1)  955/     40D : C5                  		push	bc
(1)  956/     40E : 06 00               		ld	b,0
(1)  957/     410 : 4F                  		ld	c,a
(1)  958/     411 : CF                  		rst	8
(1)  959/     412 : 5D                  		ld	e,l
(1)  960/     413 : 54                  		ld	d,h
(1)  961/     414 : FD 6E 1A            		ld	l,(iy+trk_RomPattRead)
(1)  962/     417 : FD 66 1B            		ld	h,(iy+(trk_RomPattRead+1))
(1)  963/     41A : FD 7E 1C            		ld	a,(iy+(trk_RomPattRead+2))
(1)  964/     41D : 09                  		add	hl,bc
(1)  965/     41E : CE 00               		adc	a,0
(1)  966/     420 : FD 75 1A            		ld	(iy+trk_RomPattRead),l
(1)  967/     423 : FD 74 1B            		ld	(iy+(trk_RomPattRead+1)),h
(1)  968/     426 : CF                  		rst	8
(1)  969/     427 : FD 77 1C            		ld	(iy+(trk_RomPattRead+2)),a
(1)  970/     42A : 01 20 00            		ld	bc,MAX_RCACH
(1)  971/     42D : CD C2 0F            		call	transferRom	; *** ROM ACCESS ***
(1)  972/     430 : C1                  		pop	bc
(1)  973/     431 : E1                  		pop	hl
(1)  974/     432 : C9                  		ret
(1)  975/     433 :                     
(1)  976/     433 :                     ; ----------------------------------------
(1)  977/     433 :                     ; Set track pattern by trk_currBlk
(1)  978/     433 :                     ; ----------------------------------------
(1)  979/     433 :                     
(1)  980/     433 :                     .set_track:
(1)  981/     433 : FD 5E 04            		ld	e,(iy+trk_Blocks)
(1)  982/     436 : FD 56 05            		ld	d,(iy+(trk_Blocks+1))
(1)  983/     439 : FD 7E 13            		ld	a,(iy+trk_currBlk)
(1)  984/     43C : 4F                  		ld	c,a
(1)  985/     43D : C5                  		push	bc
(1)  986/     43E : D5                  		push	de
(1)  987/     43F : CF                  		rst	8
(1)  988/     440 : 0F                  		rrca
(1)  989/     441 : 0F                  		rrca
(1)  990/     442 : 0F                  		rrca
(1)  991/     443 : E6 1F               		and	00011111b
(1)  992/     445 : FD 4E 17            		ld	c,(iy+trk_BankBlk)	; c - current block bank
(1)  993/     448 : CB 79               		bit	7,c			; First time?
(1)  994/     44A : 20 03               		jr	nz,.first_blk
(1)  995/     44C : B9                  		cp	c			; SAME instrument data?
(1)  996/     44D : 28 1E               		jr	z,.keep_blk
(1)  997/     44F :                     .first_blk:
(1)  998/     44F : CF                  		rst	8
(1)  999/     450 : FD 77 17            		ld	(iy+trk_BankBlk),a	; Save inst number
(1) 1000/     453 : 07                  		rlca
(1) 1001/     454 : 07                  		rlca
(1) 1002/     455 : 07                  		rlca
(1) 1003/     456 : 06 00               		ld	b,0
(1) 1004/     458 : 4F                  		ld	c,a
(1) 1005/     459 : FD 6E 23            		ld	l,(iy+trk_RomBlks)	; Transfer FIRST patt
(1) 1006/     45C : FD 66 24            		ld	h,(iy+(trk_RomBlks+1))	; packet
(1) 1007/     45F : FD 7E 25            		ld	a,(iy+(trk_RomBlks+2))
(1) 1008/     462 : E7                  		rst	20h
(1) 1009/     463 : CF                  		rst	8
(1) 1010/     464 : 09                  		add	hl,bc
(1) 1011/     465 : CE 00               		adc	a,0
(1) 1012/     467 : 01 08 00            		ld	bc,8			; 8 blocks stored
(1) 1013/     46A : CD C2 0F            		call	transferRom		; ** ROM ACCESS **
(1) 1014/     46D :                     .keep_blk:
(1) 1015/     46D : E1                  		pop	hl
(1) 1016/     46E : C1                  		pop	bc
(1) 1017/     46F : 79                  		ld	a,c
(1) 1018/     470 : E6 07               		and	00000111b
(1) 1019/     472 : CF                  		rst	8
(1) 1020/     473 : 16 00               		ld	d,0
(1) 1021/     475 : 5F                  		ld	e,a
(1) 1022/     476 : 19                  		add	hl,de
(1) 1023/     477 : 7E                  		ld	a,(hl)			; Read byte
(1) 1024/     478 : FE FF               		cp	-1			; If block == -1, end track
(1) 1025/     47A : CA 0C 05            		jp	z,.track_end
(1) 1026/     47D : CF                  		rst	8
(1) 1027/     47E :                     
(1) 1028/     47E : FD 5E 06            		ld	e,(iy+trk_Patt)		; Read CACHE patt heads
(1) 1029/     481 : FD 56 07            		ld	d,(iy+(trk_Patt+1))
(1) 1030/     484 : 4F                  		ld	c,a
(1) 1031/     485 : D5                  		push	de
(1) 1032/     486 : C5                  		push	bc
(1) 1033/     487 : CF                  		rst	8
(1) 1034/     488 : 0F                  		rrca
(1) 1035/     489 : 0F                  		rrca
(1) 1036/     48A : 0F                  		rrca
(1) 1037/     48B : E6 1F               		and	00011111b
(1) 1038/     48D : FD 4E 16            		ld	c,(iy+trk_BankHeads)	; c - current intrument loaded
(1) 1039/     490 : CB 79               		bit	7,c			; First time?
(1) 1040/     492 : 20 03               		jr	nz,.first_head
(1) 1041/     494 : B9                  		cp	c			; SAME instrument data?
(1) 1042/     495 : 28 26               		jr	z,.keep_it
(1) 1043/     497 :                     .first_head:
(1) 1044/     497 : CF                  		rst	8
(1) 1045/     498 : FD 77 16            		ld	(iy+trk_BankHeads),a	; Save inst number
(1) 1046/     49B : 47                  		ld	b,a
(1) 1047/     49C : 0F                  		rrca
(1) 1048/     49D : 0F                  		rrca
(1) 1049/     49E : 0F                  		rrca
(1) 1050/     49F : E6 E0               		and	11100000b
(1) 1051/     4A1 : 4F                  		ld	c,a
(1) 1052/     4A2 : 78                  		ld	a,b
(1) 1053/     4A3 : 0F                  		rrca
(1) 1054/     4A4 : 0F                  		rrca
(1) 1055/     4A5 : 0F                  		rrca
(1) 1056/     4A6 : E6 03               		and	00000011b
(1) 1057/     4A8 : 47                  		ld	b,a
(1) 1058/     4A9 :                     
(1) 1059/     4A9 : FD 6E 1D            		ld	l,(iy+trk_RomPatt)	; Transfer FIRST patt
(1) 1060/     4AC : FD 66 1E            		ld	h,(iy+(trk_RomPatt+1))	; packet
(1) 1061/     4AF : FD 7E 1F            		ld	a,(iy+(trk_RomPatt+2))
(1) 1062/     4B2 : E7                  		rst	20h
(1) 1063/     4B3 : CF                  		rst	8
(1) 1064/     4B4 : 09                  		add	hl,bc
(1) 1065/     4B5 : CE 00               		adc	a,0
(1) 1066/     4B7 : 01 20 00            		ld	bc,4*8			; 8 heads stored
(1) 1067/     4BA : CD C2 0F            		call	transferRom		; ** ROM ACCESS **
(1) 1068/     4BD :                     .keep_it:
(1) 1069/     4BD : C1                  		pop	bc
(1) 1070/     4BE : 79                  		ld	a,c
(1) 1071/     4BF : E6 07               		and	00000111b
(1) 1072/     4C1 : 87                  		add	a,a
(1) 1073/     4C2 : 87                  		add	a,a
(1) 1074/     4C3 : 57                  		ld	d,a
(1) 1075/     4C4 : CF                  		rst	8
(1) 1076/     4C5 : E6 FC               		and	11111100b
(1) 1077/     4C7 : 5F                  		ld	e,a
(1) 1078/     4C8 : 7A                  		ld	a,d
(1) 1079/     4C9 : E6 03               		and	00000011b
(1) 1080/     4CB : 57                  		ld	d,a
(1) 1081/     4CC : E1                  		pop	hl
(1) 1082/     4CD : 19                  		add	hl,de
(1) 1083/     4CE : 5E                  		ld	e,(hl)			; de - Pos
(1) 1084/     4CF : 23                  		inc	hl
(1) 1085/     4D0 : CF                  		rst	8
(1) 1086/     4D1 : 56                  		ld	d,(hl)
(1) 1087/     4D2 : 23                  		inc	hl
(1) 1088/     4D3 : 7E                  		ld	a,(hl)
(1) 1089/     4D4 : 23                  		inc	hl
(1) 1090/     4D5 : FD 77 0C            		ld	(iy+trk_Rows),a
(1) 1091/     4D8 : 7E                  		ld	a,(hl)
(1) 1092/     4D9 : 23                  		inc	hl
(1) 1093/     4DA : FD 77 0D            		ld	(iy+(trk_Rows+1)),a
(1) 1094/     4DD : FD 6E 1D            		ld	l,(iy+trk_RomPatt)	; Transfer FIRST patt
(1) 1095/     4E0 : FD 66 1E            		ld	h,(iy+(trk_RomPatt+1))	; packet
(1) 1096/     4E3 : CF                  		rst	8
(1) 1097/     4E4 : FD 7E 1F            		ld	a,(iy+(trk_RomPatt+2))
(1) 1098/     4E7 : 19                  		add	hl,de
(1) 1099/     4E8 : CE 00               		adc	a,0
(1) 1100/     4EA : FD 75 1A            		ld	(iy+trk_RomPattRead),l
(1) 1101/     4ED : FD 74 1B            		ld	(iy+(trk_RomPattRead+1)),h
(1) 1102/     4F0 : FD 77 1C            		ld	(iy+(trk_RomPattRead+2)),a
(1) 1103/     4F3 : FD 5E 08            		ld	e,(iy+trk_Cach)
(1) 1104/     4F6 : FD 56 09            		ld	d,(iy+(trk_Cach+1))
(1) 1105/     4F9 :                     
(1) 1106/     4F9 : FD 73 0A            		ld	(iy+trk_Read),e
(1) 1107/     4FC : FD 72 0B            		ld	(iy+(trk_Read+1)),d
(1) 1108/     4FF : 0E 20               		ld	c,MAX_RCACH
(1) 1109/     501 : FD 36 10 00         		ld	(iy+trk_cachHalf),0
(1) 1110/     505 : FD 36 11 00         		ld	(iy+trk_rowPause),0
(1) 1111/     509 : C3 C2 0F            		jp	transferRom		; ** ROM access **
(1) 1112/     50C :                     
(1) 1113/     50C :                     ; ----------------------------------------
(1) 1114/     50C :                     ; **JUMP ONLY**
(1) 1115/     50C :                     .track_end:
(1) 1116/     50C : CD CF 05            		call	track_out
(1) 1117/     50F : CF                  		rst	8
(1) 1118/     510 : AF                  		xor	a
(1) 1119/     511 : FD 77 11            		ld	(iy+trk_rowPause),a
(1) 1120/     514 : FD 77 12            		ld	(iy+trk_tickTmr),a
(1) 1121/     517 : FD 77 00            		ld	(iy+trk_Status),a	; Disable track slot
(1) 1122/     51A : FD 36 15 80         		ld	(iy+trk_BankIns),80h
(1) 1123/     51E : C9                  		ret
(1) 1124/     51F :                     
(1) 1125/     51F :                     ; ----------------------------------------
(1) 1126/     51F :                     ; Track refill
(1) 1127/     51F :                     ; ----------------------------------------
(1) 1128/     51F :                     
(1) 1129/     51F :                     .effect_fill:
(1) 1130/     51F : FD CB 00 AE         		res	5,(iy+trk_Status)	; Reset refill-from-effect flag
(1) 1131/     523 : C3 33 04            		jp	.set_track
(1) 1132/     526 :                     
(1) 1133/     526 :                     ; ----------------------------------------
(1) 1134/     526 :                     ; Track Start/Reset
(1) 1135/     526 :                     ;
(1) 1136/     526 :                     ; iy - Track buffer
(1) 1137/     526 :                     ; ----------------------------------------
(1) 1138/     526 :                     
(1) 1139/     526 :                     .first_fill:
(1) 1140/     526 : FD CB 00 B6         		res	6,(iy+trk_Status)	; Clear FILL flag
(1) 1141/     52A : CD CF 05            		call	track_out
(1) 1142/     52D : FD 36 12 01         		ld	(iy+trk_tickTmr),1	; <-- Reset tick timer
(1) 1143/     531 : FD 7E 02            		ld	a,(iy+trk_SetBlk)	; Make start block as current block
(1) 1144/     534 : CF                  		rst	8
(1) 1145/     535 : FD 77 13            		ld 	(iy+trk_currBlk),a	; block
(1) 1146/     538 : FD 7E 01            		ld	a,(iy+trk_SeqId)
(1) 1147/     53B : FE FF               		cp	-1			; TODO
(1) 1148/     53D : C8                  		ret	z
(1) 1149/     53E : 87                  		add	a,a
(1) 1150/     53F : 87                  		add	a,a
(1) 1151/     540 : 16 00               		ld	d,0
(1) 1152/     542 : 5F                  		ld	e,a
(1) 1153/     543 : 21 1C 00            		ld	hl,gemaMstrListPos
(1) 1154/     546 : 23                  		inc	hl
(1) 1155/     547 : 7E                  		ld	a,(hl)		; $00xx0000
(1) 1156/     548 : 23                  		inc	hl
(1) 1157/     549 : 4E                  		ld	c,(hl)		; $0000xx00
(1) 1158/     54A : 23                  		inc	hl
(1) 1159/     54B : 6E                  		ld	l,(hl)		; $000000xx
(1) 1160/     54C : CF                  		rst	8
(1) 1161/     54D : 61                  		ld	h,c
(1) 1162/     54E : 19                  		add	hl,de
(1) 1163/     54F : CE 00               		adc	a,0
(1) 1164/     551 : 11 AF 1C            		ld	de,trkInfoCach
(1) 1165/     554 : D5                  		push	de
(1) 1166/     555 : 01 04 00            		ld	bc,4
(1) 1167/     558 : CD C2 0F            		call	transferRom	; *** ROM ACCESS ***
(1) 1168/     55B : E1                  		pop	hl
(1) 1169/     55C : 7E                  		ld	a,(hl)
(1) 1170/     55D : 23                  		inc	hl
(1) 1171/     55E : CB 7F               		bit	7,a
(1) 1172/     560 : 28 04               		jr	z,.no_glbl
(1) 1173/     562 : FD CB 00 C6         		set	0,(iy+trk_Status)	; Enable GLOBAL sub-beats
(1) 1174/     566 :                     .no_glbl:
(1) 1175/     566 : CF                  		rst	8
(1) 1176/     567 : E6 7F               		and	01111111b
(1) 1177/     569 : FD 77 03            		ld	(iy+trk_TickSet),a
(1) 1178/     56C : 7E                  		ld	a,(hl)			; Read and temporally
(1) 1179/     56D : 23                  		inc	hl			; grab it's pointers
(1) 1180/     56E : 4E                  		ld	c,(hl)
(1) 1181/     56F : 23                  		inc	hl
(1) 1182/     570 : 6E                  		ld	l,(hl)
(1) 1183/     571 : 61                  		ld	h,c
(1) 1184/     572 : 11 9F 1C            		ld	de,headerOut
(1) 1185/     575 : 0E 0E               		ld	c,0Eh
(1) 1186/     577 : CD C2 0F            		call	transferRom		; ** ROM access **
(1) 1187/     57A : DD 21 AC 1C         		ld	ix,headerOut_e-1	; Read temp header BACKWARDS
(1) 1188/     57E : CF                  		rst	8
(1) 1189/     57F :                     
(1) 1190/     57F :                     	; headerOut:
(1) 1191/     57F :                     	; dc.w numof_chnls
(1) 1192/     57F :                     	; dc.l .blk,.pat,.ins
(1) 1193/     57F :                     	; *** READING BACKWARDS
(1) 1194/     57F : CD BC 05            		call	.grab_rhead		; Instrument data
(1) 1195/     582 : FD 75 20            		ld	(iy+trk_RomInst),l
(1) 1196/     585 : FD 74 21            		ld	(iy+(trk_RomInst+1)),h
(1) 1197/     588 : FD 70 22            		ld	(iy+(trk_RomInst+2)),b
(1) 1198/     58B : FD 36 15 80         		ld	(iy+trk_BankIns),80h	; Reset instrument banking
(1) 1199/     58F : E7                  		rst	20h
(1) 1200/     590 : CF                  		rst	8
(1) 1201/     591 : CD BC 05            		call	.grab_rhead		; Pattern heads
(1) 1202/     594 : FD 75 1D            		ld	(iy+trk_RomPatt),l	; Save ROM patt base
(1) 1203/     597 : FD 74 1E            		ld	(iy+(trk_RomPatt+1)),h
(1) 1204/     59A : FD 70 1F            		ld	(iy+(trk_RomPatt+2)),b
(1) 1205/     59D : FD 36 16 80         		ld	(iy+trk_BankHeads),80h	; Reset pattern banking
(1) 1206/     5A1 : CF                  		rst	8
(1) 1207/     5A2 : CD BC 05            		call	.grab_rhead		; Block data
(1) 1208/     5A5 : FD 75 23            		ld	(iy+trk_RomBlks),l	; Save ROM patt base
(1) 1209/     5A8 : FD 74 24            		ld	(iy+(trk_RomBlks+1)),h
(1) 1210/     5AB : FD 70 25            		ld	(iy+(trk_RomBlks+2)),b
(1) 1211/     5AE : FD 36 17 80         		ld	(iy+trk_BankBlk),80h	; Reset pattern banking
(1) 1212/     5B2 : CF                  		rst	8
(1) 1213/     5B3 : DD 7E 00            		ld	a,(ix)			; dc.w numof_chnls
(1) 1214/     5B6 : FD 77 18            		ld	(iy+trk_MaxChnl),a
(1) 1215/     5B9 : C3 33 04            		jp	.set_track
(1) 1216/     5BC :                     
(1) 1217/     5BC :                     ; Read 68K pointer:
(1) 1218/     5BC :                     ; hl - 00xxxx
(1) 1219/     5BC :                     ;  b - xx0000
(1) 1220/     5BC :                     .grab_rhead:
(1) 1221/     5BC : DD 6E 00            		ld	l,(ix)
(1) 1222/     5BF : DD 2B               		dec	ix
(1) 1223/     5C1 : DD 66 00            		ld	h,(ix)
(1) 1224/     5C4 : CF                  		rst	8
(1) 1225/     5C5 : DD 2B               		dec	ix
(1) 1226/     5C7 : DD 46 00            		ld	b,(ix)
(1) 1227/     5CA : DD 2B               		dec	ix
(1) 1228/     5CC :                     ; 		ld	c,(ix)
(1) 1229/     5CC : DD 2B               		dec	ix
(1) 1230/     5CE : C9                  		ret
(1) 1231/     5CF :                     
(1) 1232/     5CF :                     ; ----------------------------------------
(1) 1233/     5CF :                     ; Reset tracker channels
(1) 1234/     5CF :                     ;
(1) 1235/     5CF :                     ; iy - Track buffer
(1) 1236/     5CF :                     ;
(1) 1237/     5CF :                     ; Breaks:
(1) 1238/     5CF :                     ; b ,de,hl,ix
(1) 1239/     5CF :                     ; ----------------------------------------
(1) 1240/     5CF :                     
(1) 1241/     5CF :                     track_out:
(1) 1242/     5CF : FD E5               		push	iy
(1) 1243/     5D1 : E1                  		pop	hl
(1) 1244/     5D2 : DD 21 00 1E         		ld	ix,trkChnls
(1) 1245/     5D6 : CF                  		rst	8
(1) 1246/     5D7 : 11 26 00            		ld	de,trk_ChnIndx
(1) 1247/     5DA : 19                  		add	hl,de
(1) 1248/     5DB : 06 1A               		ld	b,MAX_TRKINDX
(1) 1249/     5DD :                     .indx_del:
(1) 1250/     5DD : 7E                  		ld	a,(hl)
(1) 1251/     5DE : B7                  		or	a
(1) 1252/     5DF : 28 2A               		jr	z,.nothin
(1) 1253/     5E1 : CF                  		rst	8
(1) 1254/     5E2 : DD E5               		push	ix
(1) 1255/     5E4 : E6 1F               		and	00011111b
(1) 1256/     5E6 : 87                  		add	a,a
(1) 1257/     5E7 : 87                  		add	a,a
(1) 1258/     5E8 : 87                  		add	a,a
(1) 1259/     5E9 : 5F                  		ld	e,a
(1) 1260/     5EA : CF                  		rst	8
(1) 1261/     5EB : DD 19               		add	ix,de
(1) 1262/     5ED : AF                  		xor	a
(1) 1263/     5EE : DD 36 02 FE         		ld	(ix+chnl_Note),-2
(1) 1264/     5F2 : DD 36 00 01         		ld	(ix+chnl_Flags),1
(1) 1265/     5F6 : DD 36 04 40         		ld	(ix+chnl_Vol),64
(1) 1266/     5FA : DD 77 05            		ld	(ix+chnl_EffId),a
(1) 1267/     5FD : CF                  		rst	8
(1) 1268/     5FE : DD 77 06            		ld	(ix+chnl_EffArg),a
(1) 1269/     601 : DD 77 03            		ld	(ix+chnl_Ins),a
(1) 1270/     604 : DD 77 07            		ld	(ix+chnl_Type),a
(1) 1271/     607 : DD E1               		pop	ix
(1) 1272/     609 : 77                  		ld	(hl),a
(1) 1273/     60A : 00                  		nop
(1) 1274/     60B :                     .nothin:
(1) 1275/     60B : 23                  		inc	hl
(1) 1276/     60C : 10 CF               		djnz	.indx_del
(1) 1277/     60E : 3E 01               		ld	a,1
(1) 1278/     610 : 32 8A 1C            		ld	(marsUpd),a
(1) 1279/     613 : C9                  		ret
(1) 1280/     614 :                     
(1) 1281/     614 :                     ; ============================================================
(1) 1282/     614 :                     ; --------------------------------------------------------
(1) 1283/     614 :                     ; Process track channels to the sound chips
(1) 1284/     614 :                     ; --------------------------------------------------------
(1) 1285/     614 :                     
(1) 1286/     614 :                     set_chips:
(1) 1287/     614 : E7                  		rst	20h			; Refill wave
(1) 1288/     615 : CD A1 0F            		call	get_tick
(1) 1289/     618 : FD 21 5E 14         		ld	iy,nikona_BuffList
(1) 1290/     61C :                     .trk_buffrs:
(1) 1291/     61C : FD 7E 00            		ld	a,(iy)
(1) 1292/     61F : FE FF               		cp	-1
(1) 1293/     621 : 28 0F               		jr	z,proc_chips
(1) 1294/     623 : CF                  		rst	8
(1) 1295/     624 : FD E5               		push	iy
(1) 1296/     626 : CD 5B 06            		call	tblbuff_read
(1) 1297/     629 : FD E1               		pop	iy
(1) 1298/     62B : 11 08 00            		ld	de,MAX_BUFFNTRY
(1) 1299/     62E : FD 19               		add	iy,de
(1) 1300/     630 : 18 EA               		jr	.trk_buffrs
(1) 1301/     632 :                     proc_chips:
(1) 1302/     632 : E7                  		rst	20h			; Refill wave
(1) 1303/     633 : CF                  		rst	8
(1) 1304/     634 : FD 21 5A 1A         		ld	iy,tblPSGN		; PSG Noise
(1) 1305/     638 : CD 4D 08            		call	dtbl_singl
(1) 1306/     63B : CF                  		rst	8
(1) 1307/     63C : FD 21 10 1A         		ld	iy,tblPSG		; PSG Squares
(1) 1308/     640 : CD 37 08            		call	dtbl_multi
(1) 1309/     643 : CF                  		rst	8
(1) 1310/     644 : FD 21 72 1A         		ld	iy,tblFM		; FM/FM3/DAC
(1) 1311/     648 : CD 37 08            		call	dtbl_multi
(1) 1312/     64B : CF                  		rst	8
(1) 1313/     64C : FD 21 04 1B         		ld	iy,tblPCM		; SEGA CD PCM
(1) 1314/     650 : CD 37 08            		call	dtbl_multi
(1) 1315/     653 : CF                  		rst	8
(1) 1316/     654 : FD 21 C6 1B         		ld	iy,tblPWM		; 32X PWM
(1) 1317/     658 : C3 37 08            		jp	dtbl_multi
(1) 1318/     65B :                     
(1) 1319/     65B :                     ; ----------------------------------------
(1) 1320/     65B :                     ; Read current track
(1) 1321/     65B :                     ;
(1) 1322/     65B :                     ; iy - Buffer
(1) 1323/     65B :                     tblbuff_read:
(1) 1324/     65B : FD 6E 00            		ld	l,(iy)
(1) 1325/     65E : FD 66 01            		ld	h,(iy+1)
(1) 1326/     661 : CD A1 0F            		call	get_tick
(1) 1327/     664 : CF                  		rst	8
(1) 1328/     665 : E5                  		push	hl
(1) 1329/     666 : FD E1               		pop	iy
(1) 1330/     668 : FD 46 00            		ld	b,(iy+trk_Status)	; bit7: Track active?
(1) 1331/     66B : CB 78               		bit	7,b
(1) 1332/     66D : C8                  		ret	z
(1) 1333/     66E : 78                  		ld	a,b			; trk_Status == -1?
(1) 1334/     66F : FE FF               		cp	-1
(1) 1335/     671 : C2 7B 06            		jp	nz,.track_cont
(1) 1336/     674 : CD CF 05            		call	track_out
(1) 1337/     677 : FD 36 00 00         		ld	(iy+trk_Status),0
(1) 1338/     67B :                     .track_cont:
(1) 1339/     67B : E7                  		rst	20h
(1) 1340/     67C : FD E5               		push	iy
(1) 1341/     67E : E1                  		pop	hl
(1) 1342/     67F : CF                  		rst	8
(1) 1343/     680 : DD 21 00 1E         		ld	ix,trkChnls
(1) 1344/     684 : 11 26 00            		ld	de,trk_ChnIndx
(1) 1345/     687 : 19                  		add	hl,de
(1) 1346/     688 : FD 7E 18            		ld	a,(iy+trk_MaxChnl)	; If zero, read ALL indexes (lazy mode)
(1) 1347/     68B : B7                  		or	a
(1) 1348/     68C : 20 02               		jr	nz,.valid
(1) 1349/     68E : 06 1A               		ld	b,MAX_TRKINDX
(1) 1350/     690 :                     .valid:
(1) 1351/     690 : CF                  		rst	8
(1) 1352/     691 : 47                  		ld	b,a
(1) 1353/     692 :                     .next_indx:
(1) 1354/     692 : 7E                  		ld	a,(hl)			; Read index
(1) 1355/     693 : B7                  		or	a
(1) 1356/     694 : 20 0B               		jr	nz,.has_indx		; non-zero: valid
(1) 1357/     696 : C5                  		push	bc			; waste CPU to
(1) 1358/     697 : 06 04               		ld	b,4			; ** wave sync
(1) 1359/     699 : 00                  		nop
(1) 1360/     69A : 00                  		nop
(1) 1361/     69B : CF                  		rst	8
(1) 1362/     69C : 10 FE               		djnz	$
(1) 1363/     69E : C1                  		pop	bc
(1) 1364/     69F : 18 1C               		jr	.no_indx
(1) 1365/     6A1 :                     .has_indx:
(1) 1366/     6A1 : E6 1F               		and	00011111b
(1) 1367/     6A3 : 87                  		add	a,a
(1) 1368/     6A4 : 87                  		add	a,a
(1) 1369/     6A5 : 87                  		add	a,a
(1) 1370/     6A6 : CF                  		rst	8
(1) 1371/     6A7 : 16 00               		ld	d,0
(1) 1372/     6A9 : 5F                  		ld	e,a
(1) 1373/     6AA : C5                  		push	bc
(1) 1374/     6AB : E5                  		push	hl
(1) 1375/     6AC : DD E5               		push	ix
(1) 1376/     6AE : DD 19               		add	ix,de
(1) 1377/     6B0 : DD 7E 00            		ld	a,(ix)		; Read evin
(1) 1378/     6B3 : E6 0F               		and	00001111b
(1) 1379/     6B5 : C4 C5 06            		call	nz,.do_chip	; Call if non-zero
(1) 1380/     6B8 : CF                  		rst	8
(1) 1381/     6B9 : DD E1               		pop	ix
(1) 1382/     6BB : E1                  		pop	hl
(1) 1383/     6BC : C1                  		pop	bc
(1) 1384/     6BD :                     .no_indx:
(1) 1385/     6BD : 23                  		inc	hl
(1) 1386/     6BE : 10 D2               		djnz	.next_indx
(1) 1387/     6C0 : FD CB 00 9E         		res	3,(iy+trk_Status)	; RESET Volume update bit
(1) 1388/     6C4 : C9                  		ret
(1) 1389/     6C5 :                     
(1) 1390/     6C5 :                     ; ----------------------------------------
(1) 1391/     6C5 :                     ; iy - Track buffer
(1) 1392/     6C5 :                     ; ix - Current channel
(1) 1393/     6C5 :                     
(1) 1394/     6C5 :                     .do_chip:
(1) 1395/     6C5 : DD 7E 03            		ld	a,(ix+chnl_Ins)		; Check intrument type FIRST
(1) 1396/     6C8 : B7                  		or	a
(1) 1397/     6C9 : C8                  		ret	z			; If 0 == stop
(1) 1398/     6CA : CF                  		rst	8
(1) 1399/     6CB : 3D                  		dec	a			; inst-1
(1) 1400/     6CC : E6 7F               		and	01111111b
(1) 1401/     6CE : 21 AF 1C            		ld	hl,instListOut		; temporal storage for instrument
(1) 1402/     6D1 : FD 4E 15            		ld	c,(iy+trk_BankIns)	; c - current intrument loaded
(1) 1403/     6D4 : CB 79               		bit	7,c			; First time?
(1) 1404/     6D6 : 20 03               		jr	nz,.first_ins
(1) 1405/     6D8 : B9                  		cp	c			; SAME instrument data?
(1) 1406/     6D9 : 28 24               		jr	z,.keep_it
(1) 1407/     6DB :                     .first_ins:
(1) 1408/     6DB : E5                  		push	hl
(1) 1409/     6DC : FD 77 15            		ld	(iy+trk_BankIns),a	; Save inst number
(1) 1410/     6DF : 07                  		rlca
(1) 1411/     6E0 : 07                  		rlca
(1) 1412/     6E1 : 07                  		rlca
(1) 1413/     6E2 : 47                  		ld	b,a
(1) 1414/     6E3 : E6 F8               		and	11111000b
(1) 1415/     6E5 : 4F                  		ld	c,a
(1) 1416/     6E6 : 78                  		ld	a,b
(1) 1417/     6E7 : E6 07               		and	00000111b
(1) 1418/     6E9 : CF                  		rst	8
(1) 1419/     6EA : 47                  		ld	b,a
(1) 1420/     6EB : EB                  		ex	hl,de
(1) 1421/     6EC : FD 6E 20            		ld	l,(iy+trk_RomInst)
(1) 1422/     6EF : FD 66 21            		ld	h,(iy+(trk_RomInst+1))
(1) 1423/     6F2 : FD 7E 22            		ld	a,(iy+(trk_RomInst+2))
(1) 1424/     6F5 : 09                  		add	hl,bc
(1) 1425/     6F6 : CE 00               		adc	a,0
(1) 1426/     6F8 : 01 08 00            		ld	bc,8			; 8 bytes
(1) 1427/     6FB : CD C2 0F            		call	transferRom		; ** ROM access **
(1) 1428/     6FE : E1                  		pop	hl
(1) 1429/     6FF :                     .keep_it:
(1) 1430/     6FF : E5                  		push	hl			; <-- save hl
(1) 1431/     700 : CD 1D 07            		call	.grab_link
(1) 1432/     703 : D1                  		pop	de			; --> recover as de
(1) 1433/     704 :                     	; hl - current table
(1) 1434/     704 :                     	; de - instrument data
(1) 1435/     704 : FE FF               		cp	-1			; Found any link?
(1) 1436/     706 : C8                  		ret	z
(1) 1437/     707 : 23                  		inc	hl			; Skip link
(1) 1438/     708 : 23                  		inc	hl
(1) 1439/     709 : FD 7E 14            		ld	a,(iy+trk_Priority)
(1) 1440/     70C : 77                  		ld	(hl),a			; Write priority level
(1) 1441/     70D : 23                  		inc	hl
(1) 1442/     70E : FD 7E 0E            		ld	a,(iy+trk_VolMaster)
(1) 1443/     711 : 77                  		ld	(hl),a			; Write current MASTER volume
(1) 1444/     712 : 01 0D 00            		ld	bc,10h-3		; Move to instr data
(1) 1445/     715 : 09                  		add	hl,bc
(1) 1446/     716 : EB                  		ex	hl,de			; <-- swap for ldir
(1) 1447/     717 : 01 08 00            		ld	bc,8
(1) 1448/     71A : ED B0               		ldir				; COPYPASTE instr data from temporal
(1) 1449/     71C : C9                  		ret
(1) 1450/     71D :                     
(1) 1451/     71D :                     ; ----------------------------------------
(1) 1452/     71D :                     ; Search for a linked channel on the
(1) 1453/     71D :                     ; chip table
(1) 1454/     71D :                     ;
(1) 1455/     71D :                     ; Input:
(1) 1456/     71D :                     ; iy - Track buffer
(1) 1457/     71D :                     ; ix - Current channel
(1) 1458/     71D :                     ; hl - Intrument data
(1) 1459/     71D :                     ;
(1) 1460/     71D :                     ; Returns:
(1) 1461/     71D :                     ; hl - Channel table to use
(1) 1462/     71D :                     ;  a - Return value:
(1) 1463/     71D :                     ;       0 - Found
(1) 1464/     71D :                     ;      -1 - Not found
(1) 1465/     71D :                     ; ----------------------------------------
(1) 1466/     71D :                     
(1) 1467/     71D :                     .grab_link:
(1) 1468/     71D : 7E                  		ld	a,(hl)			; Check INSTRUMENT type
(1) 1469/     71E : E6 F0               		and	11110000b		; Filter bits
(1) 1470/     720 : 5F                  		ld	e,a			; e - NEW chip
(1) 1471/     721 : DD 7E 01            		ld	a,(ix+chnl_Chip)	; a - our current chip
(1) 1472/     724 : E6 F0               		and	11110000b		; Filter bits too.
(1) 1473/     726 : 28 6A               		jr	z,.new_chip		; If 0: It's a NEW chip
(1) 1474/     728 : BB                  		cp 	e			; Same chip as NEW?
(1) 1475/     729 : 28 10               		jr	z,.srch_link		; then re-use the slot
(1) 1476/     72B : CF                  		rst	8
(1) 1477/     72C : 57                  		ld	d,a			; d - Chip to silence
(1) 1478/     72D : D5                  		push	de
(1) 1479/     72E : CD 3B 07            		call	.srch_link		; Search our link (first)
(1) 1480/     731 : D1                  		pop	de
(1) 1481/     732 : FE FF               		cp	-1
(1) 1482/     734 : C8                  		ret	z
(1) 1483/     735 : CF                  		rst	8
(1) 1484/     736 : CD 1C 08            		call	.reset_link
(1) 1485/     739 : 18 57               		jr	.new_chip
(1) 1486/     73B :                     
(1) 1487/     73B :                     ; ----------------------------------------
(1) 1488/     73B :                     ; ** RELINK **
(1) 1489/     73B :                     ; e - Our current chip
(1) 1490/     73B :                     .srch_link:
(1) 1491/     73B : CD 02 08            		call	.pick_tbl	; Pick chip table in hl
(1) 1492/     73E : DD E5               		push	ix		; copy ix to bc
(1) 1493/     740 : C1                  		pop	bc
(1) 1494/     741 : B7                  		or	a
(1) 1495/     742 : FA 82 07            		jp	m,.singl_link
(1) 1496/     745 :                     .srch_lloop:
(1) 1497/     745 : 7E                  		ld	a,(hl)		; Read LSB
(1) 1498/     746 : FE FF               		cp	-1		; If -1, return -1
(1) 1499/     748 : 28 45               		jr	z,.refill
(1) 1500/     74A : B9                  		cp	c
(1) 1501/     74B : 20 07               		jr	nz,.invldl
(1) 1502/     74D : CF                  		rst	8
(1) 1503/     74E : 23                  		inc	hl
(1) 1504/     74F : 7E                  		ld	a,(hl)
(1) 1505/     750 : 2B                  		dec	hl
(1) 1506/     751 : B8                  		cp	b
(1) 1507/     752 : 28 08               		jr	z,.reroll
(1) 1508/     754 :                     .invldl:
(1) 1509/     754 : D5                  		push	de
(1) 1510/     755 : 11 18 00            		ld	de,MAX_TBLSIZE
(1) 1511/     758 :                     ; 		rst	8
(1) 1512/     758 :                     ; 		nop	; wave sync *
(1) 1513/     758 : 19                  		add	hl,de
(1) 1514/     759 : D1                  		pop	de
(1) 1515/     75A : 18 E9               		jr	.srch_lloop
(1) 1516/     75C :                     .reroll:
(1) 1517/     75C :                     	; *** Special re-roll check ***
(1) 1518/     75C : E5                  		push	hl
(1) 1519/     75D : 01 04 00            		ld	bc,4		; <-- fake iy+04h
(1) 1520/     760 : 09                  		add	hl,bc
(1) 1521/     761 : CF                  		rst	8
(1) 1522/     762 : 4E                  		ld	c,(hl)		; c - ID
(1) 1523/     763 : E1                  		pop	hl
(1) 1524/     764 : 7B                  		ld	a,e
(1) 1525/     765 : FE 80               		cp	80h		; PSG?
(1) 1526/     767 : 28 02               		jr	z,.chk_psg
(1) 1527/     769 :                     ; 		cp	0A0h		; FM normal?
(1) 1528/     769 :                     ; 		jr	z,.chk_fm
(1) 1529/     769 : 18 22               		jr	.rnot_psg
(1) 1530/     76B :                     .chk_psg:
(1) 1531/     76B : 3A 81 1C            		ld	a,(psgHatMode)
(1) 1532/     76E : E6 03               		and	011b
(1) 1533/     770 : FE 03               		cp	011b
(1) 1534/     772 : 20 19               		jr	nz,.rnot_psg
(1) 1535/     774 : 79                  		ld	a,c
(1) 1536/     775 : FE 02               		cp	2
(1) 1537/     777 : 20 14               		jr	nz,.rnot_psg
(1) 1538/     779 : CF                  		rst	8
(1) 1539/     77A : 16 80               		ld	d,80h		; Set PSG silence
(1) 1540/     77C : CD 1C 08            		call	.reset_link	; on PSG3
(1) 1541/     77F : C3 FF 07            		jp	.set_asfull
(1) 1542/     782 :                     
(1) 1543/     782 :                     ; ----------------------
(1) 1544/     782 :                     ; PSGN/FM3/FM6
(1) 1545/     782 :                     .singl_link:
(1) 1546/     782 : 23                  		inc	hl			; Read MSB first
(1) 1547/     783 : 7E                  		ld	a,(hl)
(1) 1548/     784 : 2B                  		dec	hl
(1) 1549/     785 : CF                  		rst	8
(1) 1550/     786 : B8                  		cp	b			; MSB match?
(1) 1551/     787 : 20 06               		jr	nz,.refill
(1) 1552/     789 : 7E                  		ld	a,(hl)			; Read LSB
(1) 1553/     78A : B9                  		cp	c
(1) 1554/     78B : 20 02               		jr	nz,.refill
(1) 1555/     78D :                     ; ----------------------
(1) 1556/     78D :                     .rnot_psg:
(1) 1557/     78D : AF                  		xor	a
(1) 1558/     78E : C9                  		ret
(1) 1559/     78F :                     ; ***
(1) 1560/     78F :                     .refill:
(1) 1561/     78F : DD 5E 01            		ld	e,(ix+chnl_Chip)
(1) 1562/     792 :                     
(1) 1563/     792 :                     ; ----------------------------------------
(1) 1564/     792 :                     ; *** NEW CHIP ***
(1) 1565/     792 :                     ; e - Chip to set
(1) 1566/     792 :                     .new_chip:
(1) 1567/     792 : 7B                  		ld	a,e			; Read NEW chip
(1) 1568/     793 : B7                  		or	a			; If non-minus, exit.
(1) 1569/     794 : F0                  		ret	p
(1) 1570/     795 : CD 02 08            		call	.pick_tbl
(1) 1571/     798 : CF                  		rst	8
(1) 1572/     799 : FD 4E 14            		ld	c,(iy+trk_Priority)	; c - OUR priority level
(1) 1573/     79C : B7                  		or	a
(1) 1574/     79D : FA ED 07            		jp	m,.singl_free
(1) 1575/     7A0 : E5                  		push	hl			; Backup START table
(1) 1576/     7A1 :                     ; PASS 1
(1) 1577/     7A1 :                     .srch_free:
(1) 1578/     7A1 : 7E                  		ld	a,(hl)			; Read LSB
(1) 1579/     7A2 : FE FF               		cp	-1			; If -1, return -1
(1) 1580/     7A4 : 28 0B               		jr	z,.pass_2
(1) 1581/     7A6 : 23                  		inc	hl
(1) 1582/     7A7 : 46                  		ld	b,(hl)			; Read MSB
(1) 1583/     7A8 : 2B                  		dec	hl
(1) 1584/     7A9 :                     ; 		nop	; wave sync
(1) 1585/     7A9 :                     ; 		nop
(1) 1586/     7A9 :                     ; 		rst	8
(1) 1587/     7A9 :                     ; 		nop
(1) 1588/     7A9 :                     ; 		nop
(1) 1589/     7A9 : B0                  		or	b
(1) 1590/     7AA : 28 24               		jr	z,.new_link_z
(1) 1591/     7AC : CD C9 07            		call	.nextsrch_tbl
(1) 1592/     7AF : 18 F0               		jr	.srch_free
(1) 1593/     7B1 :                     
(1) 1594/     7B1 :                     ; PASS 2
(1) 1595/     7B1 :                     ; Rewrite mode
(1) 1596/     7B1 :                     .pass_2:
(1) 1597/     7B1 : E1                  		pop	hl
(1) 1598/     7B2 :                     .next_prio:
(1) 1599/     7B2 : 7E                  		ld	a,(hl)		; Read LSB
(1) 1600/     7B3 : FE FF               		cp	-1		; If -1, return -1
(1) 1601/     7B5 : C8                  		ret	z
(1) 1602/     7B6 : 23                  		inc	hl
(1) 1603/     7B7 : 23                  		inc	hl
(1) 1604/     7B8 : 7E                  		ld	a,(hl)		; Read priority
(1) 1605/     7B9 : 2B                  		dec	hl
(1) 1606/     7BA : 2B                  		dec	hl
(1) 1607/     7BB : B9                  		cp	c
(1) 1608/     7BC : 28 16               		jr	z,.new_link_o
(1) 1609/     7BE : 38 14               		jr	c,.new_link_o
(1) 1610/     7C0 : B7                  		or	a
(1) 1611/     7C1 : 28 11               		jr	z,.new_link_o
(1) 1612/     7C3 : CF                  		rst	8
(1) 1613/     7C4 : CD C9 07            		call	.nextsrch_tbl
(1) 1614/     7C7 : 18 E9               		jr	.next_prio
(1) 1615/     7C9 :                     .nextsrch_tbl:
(1) 1616/     7C9 : D5                  		push	de
(1) 1617/     7CA : 11 18 00            		ld	de,MAX_TBLSIZE
(1) 1618/     7CD : 19                  		add	hl,de
(1) 1619/     7CE : D1                  		pop	de
(1) 1620/     7CF :                     ; 		nop	; wave sync
(1) 1621/     7CF :                     ; 		nop
(1) 1622/     7CF :                     ; 		rst	8
(1) 1623/     7CF :                     ; 		nop
(1) 1624/     7CF :                     ; 		nop
(1) 1625/     7CF : C9                  		ret
(1) 1626/     7D0 :                     .new_link_z:
(1) 1627/     7D0 : 33                  		inc	sp		; skip backup
(1) 1628/     7D1 : 33                  		inc	sp
(1) 1629/     7D2 : 18 08               		jr	.new_link
(1) 1630/     7D4 :                     
(1) 1631/     7D4 :                     ; OVERWRITE link
(1) 1632/     7D4 :                     .new_link_o:
(1) 1633/     7D4 : E5                  		push	hl
(1) 1634/     7D5 : DD 56 01            		ld	d,(ix+chnl_Chip)
(1) 1635/     7D8 : CD 1C 08            		call	.reset_link
(1) 1636/     7DB : E1                  		pop	hl
(1) 1637/     7DC :                     ; NEW link
(1) 1638/     7DC :                     .new_link:
(1) 1639/     7DC : CF                  		rst	8
(1) 1640/     7DD : 23                  		inc	hl
(1) 1641/     7DE : 23                  		inc	hl
(1) 1642/     7DF :                     ; hl+2
(1) 1643/     7DF :                     .l_hiprio:
(1) 1644/     7DF : DD 73 01            		ld	(ix+chnl_Chip),e
(1) 1645/     7E2 : DD E5               		push	ix
(1) 1646/     7E4 : D1                  		pop	de
(1) 1647/     7E5 : 71                  		ld	(hl),c		; write priority
(1) 1648/     7E6 : 2B                  		dec	hl
(1) 1649/     7E7 : CF                  		rst	8
(1) 1650/     7E8 : 72                  		ld 	(hl),d		; MSB
(1) 1651/     7E9 : 2B                  		dec	hl
(1) 1652/     7EA : 73                  		ld	(hl),e		; LSB
(1) 1653/     7EB : AF                  		xor	a
(1) 1654/     7EC : C9                  		ret
(1) 1655/     7ED :                     
(1) 1656/     7ED :                     ; Single slot
(1) 1657/     7ED :                     ; c - priority
(1) 1658/     7ED :                     ; e - chip
(1) 1659/     7ED :                     .singl_free:
(1) 1660/     7ED : 46                  		ld	b,(hl)
(1) 1661/     7EE : 23                  		inc	hl
(1) 1662/     7EF : 7E                  		ld	a,(hl)
(1) 1663/     7F0 : 23                  		inc	hl
(1) 1664/     7F1 : B0                  		or	b
(1) 1665/     7F2 : 28 EB               		jr	z,.l_hiprio
(1) 1666/     7F4 : CF                  		rst	8
(1) 1667/     7F5 : 7E                  		ld	a,(hl)
(1) 1668/     7F6 : B9                  		cp	c
(1) 1669/     7F7 : 28 E6               		jr	z,.l_hiprio
(1) 1670/     7F9 : 38 E4               		jr	c,.l_hiprio		; PRIORITY
(1) 1671/     7FB : B7                  		or	a
(1) 1672/     7FC : 28 E1               		jr	z,.l_hiprio
(1) 1673/     7FE : CF                  		rst	8
(1) 1674/     7FF :                     .set_asfull:
(1) 1675/     7FF : 3E FF               		ld	a,-1			; Return -1, can't use instrument.
(1) 1676/     801 : C9                  		ret
(1) 1677/     802 :                     
(1) 1678/     802 :                     ; Pick chip table
(1) 1679/     802 :                     ; In:
(1) 1680/     802 :                     ;  a - ID
(1) 1681/     802 :                     ;
(1) 1682/     802 :                     ; Out:
(1) 1683/     802 :                     ;  a - Special bit + ID
(1) 1684/     802 :                     ;
(1) 1685/     802 :                     ; hl - Table
(1) 1686/     802 :                     .pick_tbl:
(1) 1687/     802 : D5                  		push	de
(1) 1688/     803 : 0F                  		rrca
(1) 1689/     804 : 0F                  		rrca
(1) 1690/     805 : 0F                  		rrca
(1) 1691/     806 : 0F                  		rrca
(1) 1692/     807 : E6 07               		and	00000111b
(1) 1693/     809 : 87                  		add	a,a
(1) 1694/     80A : 21 00 1A            		ld	hl,tblList
(1) 1695/     80D : E5                  		push	hl
(1) 1696/     80E : 16 00               		ld	d,0
(1) 1697/     810 : 5F                  		ld	e,a
(1) 1698/     811 : 19                  		add	hl,de
(1) 1699/     812 : 5E                  		ld	e,(hl)
(1) 1700/     813 : 23                  		inc	hl
(1) 1701/     814 : 7E                  		ld	a,(hl)
(1) 1702/     815 : 57                  		ld	d,a
(1) 1703/     816 : CB BA               		res	7,d
(1) 1704/     818 : E1                  		pop	hl
(1) 1705/     819 : 19                  		add	hl,de
(1) 1706/     81A : D1                  		pop	de
(1) 1707/     81B : C9                  		ret
(1) 1708/     81C :                     
(1) 1709/     81C :                     ; d - Silence chip
(1) 1710/     81C :                     ;
(1) 1711/     81C :                     ; Uses:
(1) 1712/     81C :                     ; bc
(1) 1713/     81C :                     .reset_link:
(1) 1714/     81C : CF                  		rst	8
(1) 1715/     81D : 36 00               		ld	(hl),0			; Delete link
(1) 1716/     81F : 23                  		inc	hl
(1) 1717/     820 : 36 00               		ld	(hl),0
(1) 1718/     822 : 23                  		inc	hl
(1) 1719/     823 : 72                  		ld	(hl),d			; Set "silence" chip ID.
(1) 1720/     824 : 23                  		inc	hl
(1) 1721/     825 : 36 00               		ld	(hl),0			; Clear master volume
(1) 1722/     827 : 01 05 00            		ld	bc,8-3			; Go to 08h
(1) 1723/     82A : 09                  		add	hl,bc
(1) 1724/     82B : 06 04               		ld	b,8/2
(1) 1725/     82D :                     .clrfull:
(1) 1726/     82D : 36 00               		ld	(hl),0			; Reset settings 08-0Bh
(1) 1727/     82F : 23                  		inc	hl
(1) 1728/     830 : 36 00               		ld	(hl),0
(1) 1729/     832 : 23                  		inc	hl
(1) 1730/     833 : CF                  		rst	8
(1) 1731/     834 : 10 F7               		djnz	.clrfull
(1) 1732/     836 : C9                  		ret
(1) 1733/     837 :                     
(1) 1734/     837 :                     ; ============================================
(1) 1735/     837 :                     ; ----------------------------------------
(1) 1736/     837 :                     ; Process chip using it's table
(1) 1737/     837 :                     ;
(1) 1738/     837 :                     ; iy - table to read
(1) 1739/     837 :                     ; ----------------------------------------
(1) 1740/     837 :                     
(1) 1741/     837 :                     dtbl_multi:
(1) 1742/     837 : FD 7E 00            		ld	a,(iy)
(1) 1743/     83A : FE FF               		cp	-1
(1) 1744/     83C : C8                  		ret	z
(1) 1745/     83D : CD 4D 08            		call	dtbl_singl
(1) 1746/     840 : CF                  		rst	8
(1) 1747/     841 : 11 18 00            		ld	de,MAX_TBLSIZE
(1) 1748/     844 : FD 19               		add	iy,de
(1) 1749/     846 : 06 03               		ld	b,3	; wave sync ** IMPORTANT **
(1) 1750/     848 : 10 FE               		djnz	$
(1) 1751/     84A : CF                  		rst	8
(1) 1752/     84B : 18 EA               		jr	dtbl_multi
(1) 1753/     84D :                     dtbl_singl:
(1) 1754/     84D : FD 5E 00            		ld	e,(iy)		; Read link
(1) 1755/     850 : FD 56 01            		ld	d,(iy+1)
(1) 1756/     853 : 7A                  		ld	a,d		; If no-zero, active
(1) 1757/     854 : B3                  		or	e
(1) 1758/     855 : 20 60               		jr	nz,.linked
(1) 1759/     857 : FD 7E 02            		ld	a,(iy+2)	; Silence request?
(1) 1760/     85A : B7                  		or	a
(1) 1761/     85B : F0                  		ret	p		; Return if not.
(1) 1762/     85C : CF                  		rst	8
(1) 1763/     85D : FD 36 02 00         		ld	(iy+2),0	; Reset request on memory
(1) 1764/     861 :                     
(1) 1765/     861 :                     ; ----------------------------------------
(1) 1766/     861 :                     ; chip-silence request
(1) 1767/     861 :                     ; iy - Table
(1) 1768/     861 : E6 F0               		and	11110000b
(1) 1769/     863 : FE 80               		cp	80h
(1) 1770/     865 : 28 1E               		jr	z,.siln_psg
(1) 1771/     867 : FE 90               		cp	90h
(1) 1772/     869 : 28 16               		jr	z,.siln_psg_n
(1) 1773/     86B : FE A0               		cp	0A0h
(1) 1774/     86D : 28 42               		jr	z,.siln_fm
(1) 1775/     86F : FE B0               		cp	0B0h
(1) 1776/     871 : 28 3E               		jr	z,.siln_fm
(1) 1777/     873 : CF                  		rst	8
(1) 1778/     874 : FE C0               		cp	0C0h
(1) 1779/     876 : 28 36               		jr	z,.siln_dac
(1) 1780/     878 : FE D0               		cp	0D0h
(1) 1781/     87A : 28 10               		jr	z,.siln_pcm
(1) 1782/     87C : FE E0               		cp	0E0h
(1) 1783/     87E : 28 18               		jr	z,.siln_pwm
(1) 1784/     880 : C9                  		ret
(1) 1785/     881 :                     .siln_psg_n:
(1) 1786/     881 : AF                  		xor	a
(1) 1787/     882 : 32 81 1C            		ld	(psgHatMode),a
(1) 1788/     885 :                     .siln_psg:
(1) 1789/     885 : CF                  		rst	8
(1) 1790/     886 : DD 21 F8 14         		ld	ix,psgcom
(1) 1791/     88A : 18 16               		jr	.rcyl_com
(1) 1792/     88C :                     
(1) 1793/     88C :                     ; --------------------------------
(1) 1794/     88C :                     
(1) 1795/     88C :                     .siln_pcm:
(1) 1796/     88C : 3E 01               		ld	a,1
(1) 1797/     88E : 32 8B 1C            		ld	(mcdUpd),a
(1) 1798/     891 : CF                  		rst	8
(1) 1799/     892 : DD 21 80 14         		ld	ix,pcmcom
(1) 1800/     896 : 18 0A               		jr	.rcyl_com
(1) 1801/     898 :                     .siln_pwm:
(1) 1802/     898 : 3E 01               		ld	a,1
(1) 1803/     89A : 32 8A 1C            		ld	(marsUpd),a
(1) 1804/     89D : CF                  		rst	8
(1) 1805/     89E : DD 21 C0 14         		ld	ix,pwmcom
(1) 1806/     8A2 :                     ; 		jr	.rcyl_com
(1) 1807/     8A2 :                     
(1) 1808/     8A2 :                     ; --------------------------------
(1) 1809/     8A2 :                     
(1) 1810/     8A2 :                     .rcyl_com:
(1) 1811/     8A2 : 06 00               		ld	b,0
(1) 1812/     8A4 : FD 4E 04            		ld	c,(iy+04h)
(1) 1813/     8A7 : DD 09               		add	ix,bc
(1) 1814/     8A9 : DD 36 00 04         		ld	(ix),100b	; key-cut
(1) 1815/     8AD : C9                  		ret
(1) 1816/     8AE :                     
(1) 1817/     8AE :                     ; --------------------------------
(1) 1818/     8AE :                     
(1) 1819/     8AE :                     .siln_dac:
(1) 1820/     8AE : CD 0C 12            		call	dac_off
(1) 1821/     8B1 :                     .siln_fm:
(1) 1822/     8B1 : CD 84 0A            		call	.fm_keyoff
(1) 1823/     8B4 : C3 8C 0A            		jp	.fm_tloff
(1) 1824/     8B7 :                     
(1) 1825/     8B7 :                     ; ----------------------------------------
(1) 1826/     8B7 :                     ; Process channel now
(1) 1827/     8B7 :                     ; iy - Table
(1) 1828/     8B7 :                     ; ix - Tracker channel
(1) 1829/     8B7 :                     .linked:
(1) 1830/     8B7 : 1A                  		ld	a,(de)		; ** chnl_Flags
(1) 1831/     8B8 : 47                  		ld	b,a		; b - flags to check
(1) 1832/     8B9 : E6 0F               		and	00001111b	; evin flags?
(1) 1833/     8BB : C8                  		ret	z
(1) 1834/     8BC : 78                  		ld	a,b
(1) 1835/     8BD : E6 F0               		and	11110000b	; Keep OTHER bits
(1) 1836/     8BF : 12                  		ld	(de),a		; ** clear chnl_Flags
(1) 1837/     8C0 : D5                  		push	de
(1) 1838/     8C1 : DD E1               		pop	ix
(1) 1839/     8C3 : FD E5               		push	iy		; table+10h instrment data
(1) 1840/     8C5 : E1                  		pop	hl
(1) 1841/     8C6 : 11 10 00            		ld	de,10h
(1) 1842/     8C9 : 19                  		add	hl,de
(1) 1843/     8CA :                     	;  b - Flags LR00evin (Eff|Vol|Ins|Note)
(1) 1844/     8CA :                     	; iy - Our chip table
(1) 1845/     8CA :                     	; ix - Track channel
(1) 1846/     8CA :                     	; hl - Intrument data
(1) 1847/     8CA : CB 40               		bit	0,b		; Note
(1) 1848/     8CC : C4 A3 0E            		call	nz,.note
(1) 1849/     8CF : CB 48               		bit	1,b		; Intrument
(1) 1850/     8D1 : C4 F2 0C            		call	nz,.inst
(1) 1851/     8D4 : CF                  		rst	8
(1) 1852/     8D5 : CB 50               		bit	2,b		; Volume
(1) 1853/     8D7 : C4 E9 0C            		call	nz,.volu
(1) 1854/     8DA : CB 58               		bit	3,b		; Effect
(1) 1855/     8DC : C4 E7 0B            		call	nz,.effc
(1) 1856/     8DF : 7E                  		ld	a,(hl)		; Read INS type
(1) 1857/     8E0 : E6 70               		and	01110000b	; Filter bits
(1) 1858/     8E2 : 0F                  		rrca
(1) 1859/     8E3 : 0F                  		rrca
(1) 1860/     8E4 : 0F                  		rrca
(1) 1861/     8E5 : CF                  		rst	8
(1) 1862/     8E6 : 16 00               		ld	d,0
(1) 1863/     8E8 : 5F                  		ld	e,a
(1) 1864/     8E9 : 21 F2 08            		ld	hl,.mk_list
(1) 1865/     8EC : 19                  		add	hl,de
(1) 1866/     8ED : 7E                  		ld	a,(hl)
(1) 1867/     8EE : 23                  		inc	hl
(1) 1868/     8EF : 66                  		ld	h,(hl)
(1) 1869/     8F0 : 6F                  		ld	l,a
(1) 1870/     8F1 : E9                  		jp	(hl)
(1) 1871/     8F2 :                     ; --------------------------------
(1) 1872/     8F2 :                     .mk_list:
(1) 1873/     8F2 : 26 09               		dw .mk_psg
(1) 1874/     8F4 : 00 09               		dw .mk_psgn
(1) 1875/     8F6 : A4 09               		dw .mk_fm
(1) 1876/     8F8 : 1A 0A               		dw .mk_fmspc
(1) 1877/     8FA : 6E 0B               		dw .mk_dac
(1) 1878/     8FC : C5 0B               		dw .mk_pcm
(1) 1879/     8FE : C6 0B               		dw .mk_pwm
(1) 1880/     900 :                     
(1) 1881/     900 :                     ; --------------------------------
(1) 1882/     900 :                     ; PSGN
(1) 1883/     900 :                     ; --------------------------------
(1) 1884/     900 :                     
(1) 1885/     900 :                     .mk_psgn:
(1) 1886/     900 : CB 40               		bit	0,b
(1) 1887/     902 : 28 6A               		jr	z,.psg_keyon
(1) 1888/     904 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 1889/     907 : DD E5               		push	ix
(1) 1890/     909 : DD 21 FB 14         		ld	ix,psgcom+3	; Steal PSG3
(1) 1891/     90D : CF                  		rst	8
(1) 1892/     90E : FE FE               		cp	-2
(1) 1893/     910 : 28 7E               		jr	z,.kycut_psgn
(1) 1894/     912 : FE FF               		cp	-1
(1) 1895/     914 : 28 6D               		jr	z,.kyoff_psgn
(1) 1896/     916 : DD 36 00 01         		ld	(ix+COM),001b	; Key ON
(1) 1897/     91A : 5F                  		ld	e,a
(1) 1898/     91B : 3A 81 1C            		ld	a,(psgHatMode)	; Tone 3?
(1) 1899/     91E : E6 03               		and	011b
(1) 1900/     920 : FE 03               		cp	011b
(1) 1901/     922 : 20 4A               		jr	nz,.psg_keyon	; Normal
(1) 1902/     924 : 18 21               		jr	.from_psgn	; Tone 3
(1) 1903/     926 :                     
(1) 1904/     926 :                     ; --------------------------------
(1) 1905/     926 :                     ; PSG
(1) 1906/     926 :                     ; --------------------------------
(1) 1907/     926 :                     
(1) 1908/     926 :                     .mk_psg:
(1) 1909/     926 : CB 40               		bit	0,b
(1) 1910/     928 : 28 44               		jr	z,.psg_keyon
(1) 1911/     92A : CF                  		rst	8
(1) 1912/     92B : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 1913/     92E : DD E5               		push	ix
(1) 1914/     930 : DD 21 F8 14         		ld	ix,psgcom	; ix - psgcom
(1) 1915/     934 : FD 5E 04            		ld	e,(iy+04h)
(1) 1916/     937 : 16 00               		ld	d,0
(1) 1917/     939 : DD 19               		add	ix,de
(1) 1918/     93B : FE FE               		cp	-2
(1) 1919/     93D : 28 54               		jr	z,.kycut_psg
(1) 1920/     93F : FE FF               		cp	-1
(1) 1921/     941 : 28 43               		jr	z,.kyoff_psg
(1) 1922/     943 : DD 36 00 01         		ld	(ix+COM),001b	; Key ON
(1) 1923/     947 :                     .from_psgn:
(1) 1924/     947 : CF                  		rst	8
(1) 1925/     948 : 16 00               		ld	d,0		; de - note*2
(1) 1926/     94A : FD 5E 06            		ld	e,(iy+06h)	; Freq index
(1) 1927/     94D : 21 F6 12            		ld	hl,psgFreq_List-(36*2)
(1) 1928/     950 : 19                  		add	hl,de
(1) 1929/     951 : 7E                  		ld	a,(hl)
(1) 1930/     952 : 23                  		inc	hl
(1) 1931/     953 : 66                  		ld	h,(hl)
(1) 1932/     954 : 6F                  		ld	l,a
(1) 1933/     955 : FD 7E 07            		ld	a,(iy+07h)	; pitchbend
(1) 1934/     958 : 07                  		rlca			; << 3
(1) 1935/     959 : 07                  		rlca
(1) 1936/     95A : CF                  		rst	8
(1) 1937/     95B : 07                  		rlca
(1) 1938/     95C : 57                  		ld	d,a
(1) 1939/     95D : E6 F8               		and	11111000b
(1) 1940/     95F : 5F                  		ld	e,a
(1) 1941/     960 : 7A                  		ld	a,d
(1) 1942/     961 : E6 07               		and	00000111b
(1) 1943/     963 : 57                  		ld	d,a
(1) 1944/     964 : 37                  		scf
(1) 1945/     965 : 3F                  		ccf
(1) 1946/     966 : ED 52               		sbc	hl,de
(1) 1947/     968 : DD 75 1C            		ld	(ix+DTL),l
(1) 1948/     96B : DD 74 20            		ld	(ix+DTH),h
(1) 1949/     96E :                     .psg_keyon:
(1) 1950/     96E : FD 7E 08            		ld	a,(iy+08h)	; Set current Volume
(1) 1951/     971 : FD 96 03            		sub	a,(iy+03h)	; + MASTER vol
(1) 1952/     974 : ED 44               		neg	a
(1) 1953/     976 : CF                  		rst	8
(1) 1954/     977 : 87                  		add	a,a
(1) 1955/     978 : 87                  		add	a,a
(1) 1956/     979 : 30 02               		jr	nc,.vmuch
(1) 1957/     97B : 3E FF               		ld	a,-1
(1) 1958/     97D :                     .vmuch:
(1) 1959/     97D : DD 77 30            		ld	(ix+PVOL),a
(1) 1960/     980 : DD E1               		pop	ix
(1) 1961/     982 : C9                  		ret
(1) 1962/     983 :                     
(1) 1963/     983 :                     ; --------------------------------
(1) 1964/     983 :                     
(1) 1965/     983 :                     ; -1
(1) 1966/     983 :                     .kyoff_psgn:
(1) 1967/     983 : CD 9D 09            		call	.kypsgn_hatoff
(1) 1968/     986 :                     .kyoff_psg:
(1) 1969/     986 : 0E 02               		ld	c,010b
(1) 1970/     988 : DD 71 00            		ld	(ix),c
(1) 1971/     98B : DD E1               		pop	ix
(1) 1972/     98D : C3 19 0F            		jp	.chnl_ulnkoff
(1) 1973/     990 :                     ; -2
(1) 1974/     990 :                     .kycut_psgn:
(1) 1975/     990 : CD 9D 09            		call	.kypsgn_hatoff
(1) 1976/     993 :                     .kycut_psg:
(1) 1977/     993 : 0E 04               		ld	c,100b
(1) 1978/     995 : DD 71 00            		ld	(ix),c
(1) 1979/     998 : DD E1               		pop	ix
(1) 1980/     99A : C3 13 0F            		jp	.chnl_ulnkcut
(1) 1981/     99D :                     .kypsgn_hatoff:
(1) 1982/     99D : 3E 00               		ld	a,000b
(1) 1983/     99F : 32 81 1C            		ld	(psgHatMode),a	; ** GLOBAL SETTING
(1) 1984/     9A2 : CF                  		rst	8
(1) 1985/     9A3 : C9                  		ret
(1) 1986/     9A4 :                     
(1) 1987/     9A4 :                     ; --------------------------------
(1) 1988/     9A4 :                     ; FM
(1) 1989/     9A4 :                     ; --------------------------------
(1) 1990/     9A4 :                     
(1) 1991/     9A4 :                     .mk_fm:
(1) 1992/     9A4 : CB 40               		bit	0,b		; NEW note?
(1) 1993/     9A6 : 28 5E               		jr	z,.mkfm_set
(1) 1994/     9A8 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 1995/     9AB : FE FE               		cp	-2
(1) 1996/     9AD : CA 7B 0A            		jp	z,.fm_cut
(1) 1997/     9B0 : FE FF               		cp	-1
(1) 1998/     9B2 : CA 75 0A            		jp	z,.fm_off
(1) 1999/     9B5 :                     ; 		call	.fm_tloff
(1) 2000/     9B5 : CF                  		rst	8
(1) 2001/     9B6 : FD 4E 04            		ld	c,(iy+04h)	; c - KeyID
(1) 2002/     9B9 : 79                  		ld	a,c
(1) 2003/     9BA : FE 06               		cp	6
(1) 2004/     9BC : 20 05               		jr	nz,.not_dac
(1) 2005/     9BE : CD 0C 12            		call	dac_off
(1) 2006/     9C1 : 18 15               		jr	.not_dspc
(1) 2007/     9C3 :                     .not_dac:
(1) 2008/     9C3 :                     ; 		ld	a,c
(1) 2009/     9C3 : FE 02               		cp	2
(1) 2010/     9C5 : 20 11               		jr	nz,.not_dspc
(1) 2011/     9C7 : 3A 82 1C            		ld	a,(fmSpecial)
(1) 2012/     9CA : B7                  		or	a
(1) 2013/     9CB : 28 0B               		jr	z,.not_dspc
(1) 2014/     9CD : 11 00 27            		ld	de,2700h	; CH3 off
(1) 2015/     9D0 : CD E1 11            		call	fm_send_1
(1) 2016/     9D3 : 3E 00               		ld	a,0
(1) 2017/     9D5 : 32 82 1C            		ld	(fmSpecial),a
(1) 2018/     9D8 :                     .not_dspc:
(1) 2019/     9D8 : CD 84 0A            		call	.fm_keyoff
(1) 2020/     9DB : C5                  		push	bc
(1) 2021/     9DC : FD 7E 06            		ld	a,(iy+06h)
(1) 2022/     9DF : 47                  		ld	b,a
(1) 2023/     9E0 : E6 1F               		and	00011111b
(1) 2024/     9E2 : 5F                  		ld	e,a
(1) 2025/     9E3 : 16 00               		ld	d,0
(1) 2026/     9E5 : 21 26 13            		ld	hl,fmFreq_List
(1) 2027/     9E8 : 19                  		add	hl,de
(1) 2028/     9E9 : 7E                  		ld	a,(hl)
(1) 2029/     9EA : CF                  		rst	8
(1) 2030/     9EB : 23                  		inc	hl
(1) 2031/     9EC : 66                  		ld	h,(hl)
(1) 2032/     9ED : 6F                  		ld	l,a
(1) 2033/     9EE : 78                  		ld	a,b
(1) 2034/     9EF : E6 E0               		and	11100000b
(1) 2035/     9F1 : 0F                  		rrca
(1) 2036/     9F2 : 0F                  		rrca
(1) 2037/     9F3 : B4                  		or	h
(1) 2038/     9F4 : 67                  		ld	h,a
(1) 2039/     9F5 : FD 5E 07            		ld	e,(iy+07h)	; pitchbend
(1) 2040/     9F8 : CF                  		rst	8
(1) 2041/     9F9 : AF                  		xor	a		; Clear high
(1) 2042/     9FA : 3F                  		ccf			; Clear carry
(1) 2043/     9FB : CB 23               		sla	e		; << 2
(1) 2044/     9FD : CB 23               		sla	e
(1) 2045/     9FF : 9F                  		sbc	a,a		; -1 if carry is set
(1) 2046/     A00 : 57                  		ld	d,a
(1) 2047/     A01 : 19                  		add	hl,de
(1) 2048/     A02 : CD A3 0A            		call	.fm_setfreq
(1) 2049/     A05 : C1                  		pop	bc
(1) 2050/     A06 :                     
(1) 2051/     A06 :                     ; --------------------------------
(1) 2052/     A06 :                     
(1) 2053/     A06 :                     .mkfm_set:
(1) 2057/     A06 : CD 38 0B            		call	.fm_wrtalpan	; Panning and effects
(1) 2058/     A09 : CD BA 0A            		call	.fm_wrtlvol	; FM volume control
(1) 2059/     A0C : FD 7E 0F            		ld	a,(iy+0Fh)	; 0Fh - keys ***
(1) 2060/     A0F : E6 F0               		and	11110000b
(1) 2061/     A11 : B1                  		or	c		; Merge FM channel
(1) 2062/     A12 : 5F                  		ld	e,a
(1) 2063/     A13 : 16 28               		ld	d,28h
(1) 2064/     A15 : CD E1 11            		call	fm_send_1	; Set keys
(1) 2065/     A18 : CF                  		rst	8
(1) 2066/     A19 :                     .nofm_note:
(1) 2067/     A19 : C9                  		ret
(1) 2069/     A1A :                     
(1) 2070/     A1A :                     ; --------------------------------
(1) 2071/     A1A :                     ; FM3 special
(1) 2072/     A1A :                     ; --------------------------------
(1) 2073/     A1A :                     
(1) 2074/     A1A :                     .mk_fmspc:
(1) 2075/     A1A : CB 40               		bit	0,b		; NEW Note?
(1) 2076/     A1C : 28 E8               		jr	z,.mkfm_set
(1) 2077/     A1E : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 2078/     A21 : FE FE               		cp	-2
(1) 2079/     A23 : CA 7B 0A            		jp	z,.fm_cut
(1) 2080/     A26 : FE FF               		cp	-1
(1) 2081/     A28 : CA 75 0A            		jp	z,.fm_off
(1) 2082/     A2B : FD 4E 04            		ld	c,(iy+04h)	; c - KeyID (011b always)
(1) 2083/     A2E : CD 84 0A            		call	.fm_keyoff
(1) 2084/     A31 : 21 70 1C            		ld	hl,fmcach_list	; Read external freqs
(1) 2085/     A34 : FD 7E 04            		ld	a,(iy+04h)
(1) 2086/     A37 : E6 07               		and	0111b
(1) 2087/     A39 : 16 00               		ld	d,0
(1) 2088/     A3B : 87                  		add	a,a
(1) 2089/     A3C : 5F                  		ld	e,a
(1) 2090/     A3D : CF                  		rst	8
(1) 2091/     A3E : 19                  		add	hl,de
(1) 2092/     A3F : 7E                  		ld	a,(hl)
(1) 2093/     A40 : 23                  		inc	hl
(1) 2094/     A41 : 66                  		ld	h,(hl)
(1) 2095/     A42 : 6F                  		ld	l,a
(1) 2096/     A43 : CF                  		rst	8
(1) 2097/     A44 : 11 20 00            		ld	de,20h		; point to regs
(1) 2098/     A47 : 19                  		add	hl,de
(1) 2099/     A48 : DD E5               		push	ix
(1) 2100/     A4A : DD 21 6D 0A         		ld	ix,.spcreglist
(1) 2101/     A4E : 06 08               		ld	b,8
(1) 2102/     A50 :                     .wr_spc:
(1) 2103/     A50 : DD 56 00            		ld	d,(ix)
(1) 2104/     A53 : 5E                  		ld	e,(hl)
(1) 2105/     A54 : CD E1 11            		call	fm_send_1
(1) 2106/     A57 : CF                  		rst	8
(1) 2107/     A58 : 23                  		inc	hl
(1) 2108/     A59 : DD 23               		inc	ix
(1) 2109/     A5B : 10 F3               		djnz	.wr_spc
(1) 2110/     A5D : DD E1               		pop	ix
(1) 2111/     A5F : 11 40 27            		ld	de,2740h	; CH3 on
(1) 2112/     A62 : CD E1 11            		call	fm_send_1
(1) 2113/     A65 : 3E 01               		ld	a,1
(1) 2114/     A67 : 32 82 1C            		ld	(fmSpecial),a
(1) 2115/     A6A : C3 06 0A            		jp	.mkfm_set
(1) 2116/     A6D :                     .spcreglist:
(1) 2117/     A6D : AD A9               		db 0ADh,0A9h
(1) 2118/     A6F : AC A8               		db 0ACh,0A8h
(1) 2119/     A71 : AE AA               		db 0AEh,0AAh
(1) 2120/     A73 : A6 A2               		db 0A6h,0A2h
(1) 2121/     A75 :                     
(1) 2122/     A75 :                     ; ----------------------------------------
(1) 2123/     A75 :                     
(1) 2124/     A75 :                     .fm_off:
(1) 2125/     A75 : CD 84 0A            		call	.fm_keyoff
(1) 2126/     A78 : C3 19 0F            		jp	.chnl_ulnkoff
(1) 2127/     A7B :                     .fm_cut:
(1) 2128/     A7B : CD 84 0A            		call	.fm_keyoff
(1) 2129/     A7E : CD 8C 0A            		call	.fm_tloff
(1) 2130/     A81 : C3 13 0F            		jp	.chnl_ulnkcut
(1) 2131/     A84 :                     
(1) 2132/     A84 :                     ; ----------------------------------------
(1) 2133/     A84 :                     
(1) 2134/     A84 :                     .fm_keyoff:
(1) 2135/     A84 : 16 28               		ld	d,28h
(1) 2136/     A86 : FD 5E 04            		ld	e,(iy+04h)
(1) 2137/     A89 : C3 E1 11            		jp	fm_send_1
(1) 2138/     A8C :                     .fm_tloff:
(1) 2139/     A8C : 06 04               		ld	b,4
(1) 2140/     A8E : FD 4E 04            		ld	c,(iy+04h)
(1) 2141/     A91 : 79                  		ld	a,c
(1) 2142/     A92 : E6 03               		and	011b
(1) 2143/     A94 : F6 40               		or	40h	; TL regs
(1) 2144/     A96 : 1E 7F               		ld	e,7Fh
(1) 2145/     A98 :                     .tl_down:
(1) 2146/     A98 : 57                  		ld	d,a
(1) 2147/     A99 :                     ; 		ld	e,7Fh
(1) 2148/     A99 : CD DD 11            		call	fm_autoreg
(1) 2149/     A9C : CF                  		rst	8
(1) 2150/     A9D : 7A                  		ld	a,d
(1) 2151/     A9E : C6 04               		add	a,4
(1) 2152/     AA0 : 10 F6               		djnz	.tl_down
(1) 2153/     AA2 : C9                  		ret
(1) 2154/     AA3 :                     ; c - KeyID
(1) 2155/     AA3 :                     .fm_setfreq:
(1) 2156/     AA3 : 79                  		ld	a,c
(1) 2157/     AA4 : E6 03               		and	011b
(1) 2158/     AA6 : F6 A4               		or	0A4h
(1) 2159/     AA8 : 57                  		ld	d,a
(1) 2160/     AA9 : 5C                  		ld	e,h
(1) 2161/     AAA : CF                  		rst	8
(1) 2162/     AAB : CD DD 11            		call	fm_autoreg
(1) 2163/     AAE : 79                  		ld	a,c
(1) 2164/     AAF : E6 03               		and	011b
(1) 2165/     AB1 : F6 A0               		or	0A0h
(1) 2166/     AB3 : 57                  		ld	d,a
(1) 2167/     AB4 : 5D                  		ld	e,l
(1) 2168/     AB5 : CD DD 11            		call	fm_autoreg
(1) 2169/     AB8 : CF                  		rst	8
(1) 2170/     AB9 : C9                  		ret
(1) 2171/     ABA :                     
(1) 2172/     ABA :                     ; --------------------------------
(1) 2173/     ABA :                     ; WRITE TL volume
(1) 2174/     ABA :                     
(1) 2175/     ABA :                     .fm_wrtlvol:
(1) 2176/     ABA : 21 70 1C            		ld	hl,fmcach_list
(1) 2177/     ABD : FD 7E 04            		ld	a,(iy+04h)
(1) 2178/     AC0 : E6 07               		and	0111b
(1) 2179/     AC2 : 16 00               		ld	d,0
(1) 2180/     AC4 : CF                  		rst	8
(1) 2181/     AC5 : 87                  		add	a,a
(1) 2182/     AC6 : 5F                  		ld	e,a
(1) 2183/     AC7 : 19                  		add	hl,de
(1) 2184/     AC8 : 7E                  		ld	a,(hl)
(1) 2185/     AC9 : 23                  		inc	hl
(1) 2186/     ACA : 66                  		ld	h,(hl)
(1) 2187/     ACB : 6F                  		ld	l,a
(1) 2188/     ACC : 23                  		inc	hl
(1) 2189/     ACD : 23                  		inc	hl
(1) 2190/     ACE : 23                  		inc	hl
(1) 2191/     ACF : CF                  		rst	8
(1) 2192/     AD0 : 23                  		inc	hl		; Point to TL's
(1) 2193/     AD1 : FD 7E 04            		ld	a,(iy+04h)
(1) 2194/     AD4 : E6 03               		and	011b
(1) 2195/     AD6 : F6 40               		or	40h		; TL registers
(1) 2196/     AD8 : 57                  		ld	d,a
(1) 2197/     AD9 :                     ; d - 40h+
(1) 2198/     AD9 :                     ; hl - TL data
(1) 2199/     AD9 :                     ; .fm_wrtlvol:
(1) 2200/     AD9 : C5                  		push	bc
(1) 2201/     ADA : E5                  		push	hl
(1) 2202/     ADB : 21 30 0B            		ld	hl,.fm_cindx	; hl - jump carry list
(1) 2203/     ADE : FD 7E 0C            		ld	a,(iy+0Ch)	; Read 0B0h copy
(1) 2204/     AE1 : E6 07               		and	0111b
(1) 2205/     AE3 : 06 00               		ld	b,0
(1) 2206/     AE5 : 4F                  		ld	c,a
(1) 2207/     AE6 : 09                  		add	hl,bc
(1) 2208/     AE7 : FD 7E 08            		ld	a,(iy+08h)	; Read current Volume
(1) 2209/     AEA : CF                  		rst	8
(1) 2210/     AEB : FD 96 03            		sub	a,(iy+03h)	; + MASTER vol
(1) 2211/     AEE : 4F                  		ld	c,a		; c - Current Volume
(1) 2212/     AEF : 46                  		ld	b,(hl)		; b - Current jump-carry byte
(1) 2213/     AF0 : E1                  		pop	hl
(1) 2214/     AF1 : CB 08               		rrc	b		; OP1
(1) 2215/     AF3 : DC 1E 0B            		call	c,.write_tl
(1) 2216/     AF6 : 23                  		inc	hl
(1) 2217/     AF7 : 14                  		inc	d
(1) 2218/     AF8 : 14                  		inc	d
(1) 2219/     AF9 : CF                  		rst	8
(1) 2220/     AFA : 14                  		inc	d
(1) 2221/     AFB : 14                  		inc	d
(1) 2222/     AFC : CB 08               		rrc	b		; OP2
(1) 2223/     AFE : DC 1E 0B            		call	c,.write_tl
(1) 2224/     B01 : 23                  		inc	hl
(1) 2225/     B02 : 14                  		inc	d
(1) 2226/     B03 : 14                  		inc	d
(1) 2227/     B04 : 14                  		inc	d
(1) 2228/     B05 : 14                  		inc	d
(1) 2229/     B06 : CB 08               		rrc	b		; OP3
(1) 2230/     B08 : DC 1E 0B            		call	c,.write_tl
(1) 2231/     B0B : 23                  		inc	hl
(1) 2232/     B0C : CF                  		rst	8
(1) 2233/     B0D : 14                  		inc	d
(1) 2234/     B0E : 14                  		inc	d
(1) 2235/     B0F : 14                  		inc	d
(1) 2236/     B10 : 14                  		inc	d
(1) 2237/     B11 : CB 08               		rrc	b		; OP4
(1) 2238/     B13 : DC 1E 0B            		call	c,.write_tl
(1) 2239/     B16 : 23                  		inc	hl
(1) 2240/     B17 : 14                  		inc	d
(1) 2241/     B18 : 14                  		inc	d
(1) 2242/     B19 : 14                  		inc	d
(1) 2243/     B1A : 14                  		inc	d
(1) 2244/     B1B : CF                  		rst	8
(1) 2245/     B1C : C1                  		pop	bc
(1) 2246/     B1D : C9                  		ret
(1) 2247/     B1E :                     .write_tl:
(1) 2248/     B1E : 7E                  		ld	a,(hl)
(1) 2249/     B1F : 91                  		sub	a,c		; reg - volume
(1) 2250/     B20 : F2 25 0B            		jp	p,.keep_tlmx
(1) 2251/     B23 : 3E 7F               		ld	a,7Fh		; <-- maximum TL
(1) 2252/     B25 :                     .keep_tlmx:
(1) 2253/     B25 : C5                  		push	bc
(1) 2254/     B26 : 5F                  		ld	e,a
(1) 2255/     B27 : FD 4E 04            		ld	c,(iy+04h)
(1) 2256/     B2A : CD DD 11            		call	fm_autoreg
(1) 2257/     B2D : CF                  		rst	8
(1) 2258/     B2E : C1                  		pop	bc
(1) 2259/     B2F : C9                  		ret
(1) 2260/     B30 :                     ; Jump carry list
(1) 2261/     B30 :                     .fm_cindx:
(1) 2262/     B30 : 08                  		db 1000b
(1) 2263/     B31 : 08                  		db 1000b
(1) 2264/     B32 : 08                  		db 1000b
(1) 2265/     B33 : 08                  		db 1000b
(1) 2266/     B34 : 0C                  		db 1100b
(1) 2267/     B35 : 0E                  		db 1110b
(1) 2268/     B36 : 0E                  		db 1110b
(1) 2269/     B37 : 0F                  		db 1111b
(1) 2270/     B38 :                     ; c - KeyId
(1) 2271/     B38 :                     .fm_wrtalpan:
(1) 2272/     B38 : FD 7E 0C            		ld	a,(iy+0Ch)		; 0B0h algorithm
(1) 2273/     B3B : 5F                  		ld	e,a
(1) 2274/     B3C : 79                  		ld	a,c
(1) 2275/     B3D : E6 03               		and	011b
(1) 2276/     B3F : F6 B0               		or	0B0h
(1) 2277/     B41 : 57                  		ld	d,a
(1) 2278/     B42 : CD DD 11            		call	fm_autoreg		; Write algorithm
(1) 2279/     B45 : CF                  		rst	8
(1) 2280/     B46 : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Read panning bits
(1) 2281/     B49 : 2F                  		cpl				; REVERSE bits
(1) 2282/     B4A : E6 30               		and	00110000b
(1) 2283/     B4C : 07                  		rlca				; << 2
(1) 2284/     B4D : 07                  		rlca
(1) 2285/     B4E : 5F                  		ld	e,a			; save as e
(1) 2286/     B4F : FD 7E 0D            		ld	a,(iy+0Dh)		; 0B4h %00aa0ppp
(1) 2287/     B52 : E6 3F               		and	00111111b
(1) 2288/     B54 : B3                  		or	e			; Merge panning
(1) 2289/     B55 : 5F                  		ld	e,a
(1) 2290/     B56 : 79                  		ld	a,c
(1) 2291/     B57 : CF                  		rst	8
(1) 2292/     B58 : E6 03               		and	011b
(1) 2293/     B5A : F6 B4               		or	0B4h
(1) 2294/     B5C : 57                  		ld	d,a
(1) 2295/     B5D : CD DD 11            		call	fm_autoreg
(1) 2296/     B60 : FD 7E 0E            		ld	a,(iy+0Eh)		; Read LFO
(1) 2297/     B63 : CB 5F               		bit	3,a			; Intrument wants LFO?
(1) 2298/     B65 : 28 06               		jr	z,.no_lfo
(1) 2299/     B67 : 5F                  		ld	e,a
(1) 2300/     B68 : 16 22               		ld	d,22h
(1) 2301/     B6A : CD E1 11            		call	fm_send_1
(1) 2302/     B6D :                     .no_lfo:
(1) 2303/     B6D : C9                  		ret
(1) 2304/     B6E :                     
(1) 2305/     B6E :                     ; --------------------------------
(1) 2306/     B6E :                     ; DAC
(1) 2307/     B6E :                     ; --------------------------------
(1) 2308/     B6E :                     
(1) 2309/     B6E :                     .mk_dac:
(1) 2310/     B6E : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 2311/     B71 : FE FE               		cp	-2
(1) 2312/     B73 : CA 96 0B            		jp	z,.dac_cut
(1) 2313/     B76 : FE FF               		cp	-1
(1) 2314/     B78 : CA 9C 0B            		jp	z,.dac_off
(1) 2315/     B7B : CD 9F 0B            		call	.dac_pitch
(1) 2316/     B7E : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Read panning
(1) 2317/     B81 : 2F                  		cpl				; REVERSE bits
(1) 2318/     B82 : E6 30               		and	00110000b
(1) 2319/     B84 : 07                  		rlca
(1) 2320/     B85 : 07                  		rlca
(1) 2321/     B86 : CF                  		rst	8
(1) 2322/     B87 : 5F                  		ld	e,a
(1) 2323/     B88 : 16 B6               		ld	d,0B6h			; Channel 6 panning
(1) 2324/     B8A : CD EC 11            		call	fm_send_2
(1) 2325/     B8D : CB 40               		bit	0,b			; Note update?
(1) 2326/     B8F : C8                  		ret	z
(1) 2327/     B90 : CD 0C 12            		call	dac_off
(1) 2328/     B93 : C3 21 12            		jp	dac_play
(1) 2329/     B96 :                     .dac_cut:
(1) 2330/     B96 : CD 0C 12            		call	dac_off
(1) 2331/     B99 : C3 19 0F            		jp	.chnl_ulnkoff
(1) 2332/     B9C :                     .dac_off:
(1) 2333/     B9C : C3 13 0F            		jp	.chnl_ulnkcut
(1) 2334/     B9F :                     .dac_pitch:
(1) 2335/     B9F : 16 00               		ld	d,0		; Freq index
(1) 2336/     BA1 : FD 5E 06            		ld	e,(iy+06h)
(1) 2337/     BA4 : 21 56 13            		ld	hl,wavFreq_List-(2*36)
(1) 2338/     BA7 : 19                  		add	hl,de
(1) 2339/     BA8 : 7E                  		ld	a,(hl)
(1) 2340/     BA9 : 23                  		inc	hl
(1) 2341/     BAA : 66                  		ld	h,(hl)
(1) 2342/     BAB : 6F                  		ld	l,a
(1) 2343/     BAC : FD 5E 07            		ld	e,(iy+07h)	; pitchbend
(1) 2344/     BAF : CF                  		rst	8
(1) 2345/     BB0 : AF                  		xor	a		; Clear high
(1) 2346/     BB1 : 3F                  		ccf			; Clear carry
(1) 2347/     BB2 : CB 23               		sla	e		; << 3
(1) 2348/     BB4 : CB 23               		sla	e
(1) 2349/     BB6 : CB 23               		sla	e
(1) 2350/     BB8 : 9F                  		sbc	a,a		; -1 if carry is set
(1) 2351/     BB9 : 57                  		ld	d,a
(1) 2352/     BBA : 19                  		add	hl,de
(1) 2353/     BBB : 22 95 1C            		ld	(wave_Pitch),hl
(1) 2354/     BBE : D9                  		exx			; *
(1) 2355/     BBF : ED 5B 95 1C         		ld	de,(wave_Pitch)	; *
(1) 2356/     BC3 : D9                  		exx			; *
(1) 2357/     BC4 : C9                  		ret
(1) 2358/     BC5 :                     
(1) 2359/     BC5 :                     ; --------------------------------
(1) 2360/     BC5 :                     ; PCM
(1) 2361/     BC5 :                     ; --------------------------------
(1) 2362/     BC5 :                     
(1) 2363/     BC5 :                     .mk_pcm:
(1) 2450/     BC5 : C9                  		ret
(1) 2452/     BC6 :                     
(1) 2453/     BC6 :                     ; --------------------------------
(1) 2454/     BC6 :                     ; PWM
(1) 2455/     BC6 :                     ; --------------------------------
(1) 2456/     BC6 :                     
(1) 2457/     BC6 :                     .mk_pwm:
(1) 2533/     BC6 : C9                  		ret
(1) 2535/     BC7 :                     
(1) 2536/     BC7 :                     ; --------------------------------
(1) 2537/     BC7 :                     ; SHARED routine
(1) 2538/     BC7 :                     
(1) 2539/     BC7 :                     .readfreq_pcm:
(1) 2540/     BC7 : 21 B6 13            		ld	hl,wavFreq_CdPcm-(36*2)
(1) 2541/     BCA : 18 03               		jr	.set_wavfreq
(1) 2542/     BCC :                     .readfreq_pwm:
(1) 2543/     BCC : 21 56 13            		ld	hl,wavFreq_List-(36*2)
(1) 2544/     BCF :                     .set_wavfreq:
(1) 2545/     BCF : 16 00               		ld	d,0		; Freq index
(1) 2546/     BD1 : FD 5E 06            		ld	e,(iy+06h)
(1) 2547/     BD4 : 19                  		add	hl,de
(1) 2548/     BD5 : 7E                  		ld	a,(hl)
(1) 2549/     BD6 : 23                  		inc	hl
(1) 2550/     BD7 : 66                  		ld	h,(hl)
(1) 2551/     BD8 : 6F                  		ld	l,a
(1) 2552/     BD9 : FD 5E 07            		ld	e,(iy+07h)	; pitchbend
(1) 2553/     BDC : CF                  		rst	8
(1) 2554/     BDD : AF                  		xor	a		; Clear high
(1) 2555/     BDE : 3F                  		ccf			; Clear carry
(1) 2556/     BDF : CB 23               		sla	e		; << 2
(1) 2557/     BE1 : CB 23               		sla	e
(1) 2558/     BE3 : 9F                  		sbc	a,a		; -1 if carry is set
(1) 2559/     BE4 : 57                  		ld	d,a
(1) 2560/     BE5 : 19                  		add	hl,de
(1) 2561/     BE6 : C9                  		ret
(1) 2562/     BE7 :                     
(1) 2563/     BE7 :                     ; ----------------------------------------
(1) 2564/     BE7 :                     ; NEW effect
(1) 2565/     BE7 :                     ; ----------------------------------------
(1) 2566/     BE7 :                     
(1) 2567/     BE7 :                     .effc:
(1) 2568/     BE7 : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - effect data
(1) 2569/     BEA : DD 7E 05            		ld	a,(ix+chnl_EffId)	; d - effect id
(1) 2570/     BED : 57                  		ld	d,a
(1) 2571/     BEE : CF                  		rst	8
(1) 2572/     BEF : FE 04               		cp	4			; Effect D?
(1) 2573/     BF1 : 28 0F               		jr	z,.effc_D
(1) 2574/     BF3 : FE 05               		cp	5			; Effect E?
(1) 2575/     BF5 : 28 4E               		jr	z,.effc_E
(1) 2576/     BF7 : FE 06               		cp	6			; Effect F?
(1) 2577/     BF9 : 28 5F               		jr	z,.effc_F
(1) 2578/     BFB : CF                  		rst	8
(1) 2579/     BFC : FE 18               		cp	24			; Effect X?
(1) 2580/     BFE : CA 7B 0C            		jp	z,.effc_X
(1) 2581/     C01 : C9                  		ret
(1) 2582/     C02 :                     
(1) 2583/     C02 :                     ; ----------------------------------------
(1) 2584/     C02 :                     ; Effect D
(1) 2585/     C02 :                     ;
(1) 2586/     C02 :                     ; Volume slide down
(1) 2587/     C02 :                     ;
(1) 2588/     C02 :                     ; 0xh-Exh - Normal
(1) 2589/     C02 :                     ; Fxh-Fxh - Fine slide / 2
(1) 2590/     C02 :                     ; ----------------------------------------
(1) 2591/     C02 :                     
(1) 2592/     C02 :                     .effc_D:
(1) 2593/     C02 : CD 6F 0C            		call	.save_arg
(1) 2594/     C05 : 79                  		ld	a,c		; Setting == 0?
(1) 2595/     C06 : B7                  		or	a
(1) 2596/     C07 : C8                  		ret	z
(1) 2597/     C08 : E6 F0               		and	0F0h
(1) 2598/     C0A : 28 0F               		jr	z,.norm_down	; 0xh
(1) 2599/     C0C : FE F0               		cp	0F0h
(1) 2600/     C0E : 28 0D               		jr	z,.fine_down	; Fxh
(1) 2601/     C10 : CF                  		rst	8
(1) 2602/     C11 : 79                  		ld	a,c
(1) 2603/     C12 : E6 0F               		and	00Fh
(1) 2604/     C14 : 28 1D               		jr	z,.norm_up	; x0h
(1) 2605/     C16 : FE 0F               		cp	00Fh
(1) 2606/     C18 : 28 17               		jr	z,.fine_up	; xFh
(1) 2607/     C1A : C9                  		ret
(1) 2608/     C1B :                     ; Go down
(1) 2609/     C1B :                     .norm_down:
(1) 2610/     C1B : CB 21               		sla	c
(1) 2611/     C1D :                     .fine_down:
(1) 2612/     C1D : CB 21               		sla	c
(1) 2613/     C1F : 79                  		ld	a,c
(1) 2614/     C20 : E6 3C               		and	00111100b
(1) 2615/     C22 : 4F                  		ld	c,a
(1) 2616/     C23 : FD 7E 08            		ld	a,(iy+08h)	; Current volume
(1) 2617/     C26 : CF                  		rst	8
(1) 2618/     C27 : 91                  		sub	a,c
(1) 2619/     C28 : 1E C0               		ld	e,0C0h
(1) 2620/     C2A : BB                  		cp	e
(1) 2621/     C2B : D2 41 0C            		jp	nc,.vol_dvld
(1) 2622/     C2E : 7B                  		ld	a,e
(1) 2623/     C2F : 18 10               		jr 	.vol_dvld
(1) 2624/     C31 :                     ; Go up
(1) 2625/     C31 :                     .fine_up:
(1) 2626/     C31 : CB 39               		srl	c
(1) 2627/     C33 :                     .norm_up:
(1) 2628/     C33 : CB 39               		srl	c
(1) 2629/     C35 : 79                  		ld	a,c
(1) 2630/     C36 : E6 3C               		and	00111100b
(1) 2631/     C38 : 4F                  		ld	c,a
(1) 2632/     C39 : FD 7E 08            		ld	a,(iy+08h)	; Current volume
(1) 2633/     C3C : CF                  		rst	8
(1) 2634/     C3D : 81                  		add	a,c
(1) 2635/     C3E : 38 01               		jr	c,.vol_dvld
(1) 2636/     C40 : AF                  		xor	a
(1) 2637/     C41 :                     .vol_dvld:
(1) 2638/     C41 : FD 77 08            		ld	(iy+08h),a
(1) 2639/     C44 : C9                  		ret
(1) 2640/     C45 :                     
(1) 2641/     C45 :                     ; ----------------------------------------
(1) 2642/     C45 :                     ; Effect E
(1) 2643/     C45 :                     ; ----------------------------------------
(1) 2644/     C45 :                     
(1) 2645/     C45 :                     .effc_E:
(1) 2646/     C45 : CD 6F 0C            		call	.save_arg
(1) 2647/     C48 : 79                  		ld	a,c
(1) 2648/     C49 : E6 F0               		and	0F0h
(1) 2649/     C4B : FE F0               		cp	0F0h
(1) 2650/     C4D : C8                  		ret	z
(1) 2651/     C4E : FE E0               		cp	0E0h
(1) 2652/     C50 : C8                  		ret	z
(1) 2653/     C51 : CF                  		rst	8
(1) 2654/     C52 : FD 7E 07            		ld	a,(iy+07h)
(1) 2655/     C55 : 91                  		sub	a,c
(1) 2656/     C56 : FD 77 07            		ld	(iy+07h),a
(1) 2657/     C59 : C9                  		ret
(1) 2658/     C5A :                     
(1) 2659/     C5A :                     ; ----------------------------------------
(1) 2660/     C5A :                     ; Effect F
(1) 2661/     C5A :                     ; ----------------------------------------
(1) 2662/     C5A :                     
(1) 2663/     C5A :                     .effc_F:
(1) 2664/     C5A : CD 6F 0C            		call	.save_arg
(1) 2665/     C5D : 79                  		ld	a,c
(1) 2666/     C5E : E6 F0               		and	0F0h
(1) 2667/     C60 : FE F0               		cp	0F0h
(1) 2668/     C62 : C8                  		ret	z
(1) 2669/     C63 : FE E0               		cp	0E0h
(1) 2670/     C65 : C8                  		ret	z
(1) 2671/     C66 : CF                  		rst	8
(1) 2672/     C67 : FD 7E 07            		ld	a,(iy+07h)
(1) 2673/     C6A : 81                  		add	a,c
(1) 2674/     C6B : FD 77 07            		ld	(iy+07h),a
(1) 2675/     C6E : C9                  		ret
(1) 2676/     C6F :                     
(1) 2677/     C6F :                     ; --------------------------------
(1) 2678/     C6F :                     ; e - got arg
(1) 2679/     C6F :                     ; c - new arg
(1) 2680/     C6F :                     .save_arg:
(1) 2681/     C6F : FD 4E 09            		ld	c,(iy+09h)	; Current slide setting
(1) 2682/     C72 : 7B                  		ld	a,e		; EffArg is non-zero?
(1) 2683/     C73 : B7                  		or	a
(1) 2684/     C74 : 28 04               		jr	z,.D_cont	; 00h = slide continue
(1) 2685/     C76 : 4F                  		ld	c,a
(1) 2686/     C77 : FD 71 09            		ld	(iy+09h),c	; Store NEW slide setting
(1) 2687/     C7A :                     .D_cont:
(1) 2688/     C7A : C9                  		ret
(1) 2689/     C7B :                     
(1) 2690/     C7B :                     ; ----------------------------------------
(1) 2691/     C7B :                     ; Effect X
(1) 2692/     C7B :                     ;
(1) 2693/     C7B :                     ; Common panning values:
(1) 2694/     C7B :                     ;  00h LEFT
(1) 2695/     C7B :                     ;  80h MIDDLE
(1) 2696/     C7B :                     ; 0FFh RIGHT
(1) 2697/     C7B :                     ; ----------------------------------------
(1) 2698/     C7B :                     
(1) 2699/     C7B :                     .effc_X:
(1) 2700/     C7B : 16 00               		ld	d,0
(1) 2701/     C7D : 7E                  		ld	a,(hl)
(1) 2702/     C7E : E6 F0               		and	11110000b
(1) 2703/     C80 : FE 80               		cp	80h		; PSG?
(1) 2704/     C82 : 28 1D               		jr	z,.res_pan
(1) 2705/     C84 : FE 90               		cp	90h		; PSGN?
(1) 2706/     C86 : 28 19               		jr	z,.res_pan
(1) 2707/     C88 : FE D0               		cp	0D0h		; MCD: write separate PAN values
(1) 2708/     C8A : CC AB 0C            		call	z,.pan_mcd	; <-- CALL, not JP
(1) 2709/     C8D :                     
(1) 2710/     C8D :                     	; ----------------------------------------
(1) 2711/     C8D :                     	; Common panning bits: %00LR0000
(1) 2712/     C8D :                     	; (REVERSE: 0-on 1-off)
(1) 2713/     C8D : FD 36 09 00         		ld	(iy+09h),0
(1) 2714/     C91 : CF                  		rst	8
(1) 2715/     C92 : E5                  		push	hl
(1) 2716/     C93 : 21 C1 0C            		ld	hl,.comn_panlist
(1) 2717/     C96 : 7B                  		ld	a,e
(1) 2718/     C97 : 07                  		rlca
(1) 2719/     C98 : 07                  		rlca
(1) 2720/     C99 : 07                  		rlca
(1) 2721/     C9A : E6 07               		and	0111b
(1) 2722/     C9C :                     ; 		ld	d,0
(1) 2723/     C9C : 5F                  		ld	e,a
(1) 2724/     C9D : CF                  		rst	8
(1) 2725/     C9E : 19                  		add	hl,de
(1) 2726/     C9F : 56                  		ld	d,(hl)
(1) 2727/     CA0 : E1                  		pop	hl
(1) 2728/     CA1 :                     .res_pan:
(1) 2729/     CA1 : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Save panning
(1) 2730/     CA4 : E6 CF               		and	11001111b
(1) 2731/     CA6 : B2                  		or	d
(1) 2732/     CA7 : DD 77 00            		ld	(ix+chnl_Flags),a
(1) 2733/     CAA : C9                  		ret
(1) 2734/     CAB :                     
(1) 2735/     CAB :                     	; ----------------------------------------
(1) 2736/     CAB :                     	; MCD panning
(1) 2737/     CAB :                     .pan_mcd:
(1) 2738/     CAB : E5                  		push	hl
(1) 2739/     CAC : D5                  		push	de
(1) 2740/     CAD : 16 00               		ld	d,0
(1) 2741/     CAF : 21 C9 0C            		ld	hl,.pcm_panlist
(1) 2742/     CB2 : 7B                  		ld	a,e
(1) 2743/     CB3 : E6 F8               		and	0F8h
(1) 2744/     CB5 : 0F                  		rrca
(1) 2745/     CB6 : 0F                  		rrca
(1) 2746/     CB7 : 0F                  		rrca
(1) 2747/     CB8 : 5F                  		ld	e,a
(1) 2748/     CB9 : 19                  		add	hl,de
(1) 2749/     CBA : 7E                  		ld	a,(hl)
(1) 2750/     CBB : FD 77 0A            		ld	(iy+0Ah),a
(1) 2751/     CBE : D1                  		pop	de
(1) 2752/     CBF : E1                  		pop	hl
(1) 2753/     CC0 : C9                  		ret
(1) 2754/     CC1 :                     
(1) 2755/     CC1 :                     ; 0 - ENABLE, 1 - DISABLE
(1) 2756/     CC1 :                     ; 00LR0000b
(1) 2757/     CC1 :                     .comn_panlist:
(1) 2758/     CC1 : 10                  		db 00010000b
(1) 2759/     CC2 : 10                  		db 00010000b
(1) 2760/     CC3 : 10                  		db 00010000b
(1) 2761/     CC4 : 00                  		db 00000000b
(1) 2762/     CC5 : 00                  		db 00000000b
(1) 2763/     CC6 : 20                  		db 00100000b
(1) 2764/     CC7 : 20                  		db 00100000b
(1) 2765/     CC8 : 20                  		db 00100000b
(1) 2766/     CC9 :                     
(1) 2767/     CC9 :                     ; REVERSE OUTPUT BITS
(1) 2768/     CC9 :                     ; RRRR | LLLL
(1) 2769/     CC9 :                     .pcm_panlist:
(1) 2770/     CC9 : F0                  		db 0F0h	; 00h
(1) 2771/     CCA : E0                  		db 0E0h
(1) 2772/     CCB : D0                  		db 0D0h	; 10h
(1) 2773/     CCC : C0                  		db 0C0h
(1) 2774/     CCD : B0                  		db 0B0h	; 20h
(1) 2775/     CCE : A0                  		db 0A0h
(1) 2776/     CCF : 90                  		db 090h	; 30h
(1) 2777/     CD0 : 80                  		db 080h
(1) 2778/     CD1 : 70                  		db 070h	; 40h
(1) 2779/     CD2 : 60                  		db 060h
(1) 2780/     CD3 : 50                  		db 050h	; 50h
(1) 2781/     CD4 : 40                  		db 040h
(1) 2782/     CD5 : 30                  		db 030h	; 60h
(1) 2783/     CD6 : 20                  		db 020h
(1) 2784/     CD7 : 10                  		db 010h	; 70h
(1) 2785/     CD8 : 00                  		db 000h
(1) 2786/     CD9 : 00                  		db 000h ; 80h
(1) 2787/     CDA : 01                  		db 001h
(1) 2788/     CDB : 02                  		db 002h ; 90h
(1) 2789/     CDC : 03                  		db 003h
(1) 2790/     CDD : 04                  		db 004h ; A0h
(1) 2791/     CDE : 05                  		db 005h
(1) 2792/     CDF : 06                  		db 006h ; B0h
(1) 2793/     CE0 : 07                  		db 007h
(1) 2794/     CE1 : 08                  		db 008h ; C0h
(1) 2795/     CE2 : 09                  		db 009h
(1) 2796/     CE3 : 0A                  		db 00Ah ; D0h
(1) 2797/     CE4 : 0B                  		db 00Bh
(1) 2798/     CE5 : 0C                  		db 00Ch ; E0h
(1) 2799/     CE6 : 0D                  		db 00Dh
(1) 2800/     CE7 : 0E                  		db 00Eh ; F0h
(1) 2801/     CE8 : 0F                  		db 00Fh
(1) 2802/     CE9 :                     
(1) 2803/     CE9 :                     ; ----------------------------------------
(1) 2804/     CE9 :                     ; NEW volume
(1) 2805/     CE9 :                     ; ----------------------------------------
(1) 2806/     CE9 :                     
(1) 2807/     CE9 :                     .volu:
(1) 2808/     CE9 : DD 7E 04            		ld	a,(ix+chnl_Vol)
(1) 2809/     CEC : D6 40               		sub	a,64
(1) 2810/     CEE : FD 77 08            		ld	(iy+08h),a	; BASE volume
(1) 2811/     CF1 : C9                  		ret
(1) 2812/     CF2 :                     
(1) 2813/     CF2 :                     ; ----------------------------------------
(1) 2814/     CF2 :                     ; NEW instrument
(1) 2815/     CF2 :                     ; ----------------------------------------
(1) 2816/     CF2 :                     
(1) 2817/     CF2 :                     .inst:
(1) 2818/     CF2 : 7E                  		ld	a,(hl)
(1) 2819/     CF3 : E6 F0               		and	11110000b
(1) 2820/     CF5 : FE 80               		cp	080h
(1) 2821/     CF7 : 28 24               		jr	z,.ins_psg
(1) 2822/     CF9 : FE 90               		cp	090h
(1) 2823/     CFB : 28 1A               		jr	z,.ins_psgn
(1) 2824/     CFD : FE A0               		cp	0A0h
(1) 2825/     CFF : 28 52               		jr	z,.ins_fm
(1) 2826/     D01 : CF                  		rst	8
(1) 2827/     D02 : FE B0               		cp	0B0h
(1) 2828/     D04 : 28 4D               		jr	z,.ins_fm
(1) 2829/     D06 : FE C0               		cp	0C0h
(1) 2830/     D08 : CA D4 0D            		jp	z,.ins_dac
(1) 2831/     D0B : FE D0               		cp	0D0h
(1) 2832/     D0D : CA 28 0E            		jp	z,.ins_pcm
(1) 2833/     D10 : FE E0               		cp	0E0h
(1) 2834/     D12 : CA 60 0E            		jp	z,.ins_pwm
(1) 2835/     D15 : CF                  		rst	8
(1) 2836/     D16 :                     .invl_ins:
(1) 2837/     D16 : C9                  		ret
(1) 2838/     D17 :                     
(1) 2839/     D17 :                     ; ----------------------------------------
(1) 2840/     D17 :                     ; PSG
(1) 2841/     D17 :                     
(1) 2842/     D17 :                     .ins_psgn:
(1) 2843/     D17 : 7E                  		ld	a,(hl)		; Grab noise setting
(1) 2844/     D18 : E6 07               		and	0111b
(1) 2845/     D1A : 32 81 1C            		ld	(psgHatMode),a	; ** SET GLOBAL SETTING
(1) 2846/     D1D :                     .ins_psg:
(1) 2847/     D1D : CF                  		rst	8
(1) 2848/     D1E : DD E5               		push	ix
(1) 2849/     D20 : E5                  		push	hl
(1) 2850/     D21 : 23                  		inc	hl		; Skip ID
(1) 2851/     D22 : DD 21 F8 14         		ld	ix,psgcom	; Read psg control
(1) 2852/     D26 : FD 5E 04            		ld	e,(iy+04h)
(1) 2853/     D29 : 16 00               		ld	d,0
(1) 2854/     D2B : DD 19               		add	ix,de
(1) 2855/     D2D : 7E                  		ld	a,(hl)
(1) 2856/     D2E : CF                  		rst	8
(1) 2857/     D2F : 23                  		inc	hl
(1) 2858/     D30 : 7E                  		ld	a,(hl)
(1) 2859/     D31 : DD 77 24            		ld	(ix+ALV),a	; ALV
(1) 2860/     D34 : 23                  		inc	hl
(1) 2861/     D35 : 7E                  		ld	a,(hl)
(1) 2862/     D36 : DD 77 08            		ld	(ix+ATK),a	; ATK
(1) 2863/     D39 : 23                  		inc	hl
(1) 2864/     D3A : 7E                  		ld	a,(hl)
(1) 2865/     D3B : CF                  		rst	8
(1) 2866/     D3C : DD 77 10            		ld	(ix+SLV),a	; SLV
(1) 2867/     D3F : 23                  		inc	hl
(1) 2868/     D40 : 7E                  		ld	a,(hl)
(1) 2869/     D41 : DD 77 0C            		ld	(ix+DKY),a	; DKY
(1) 2870/     D44 : 23                  		inc	hl
(1) 2871/     D45 : 7E                  		ld	a,(hl)
(1) 2872/     D46 : DD 77 14            		ld	(ix+RRT),a	; RRT
(1) 2873/     D49 : 23                  		inc	hl
(1) 2874/     D4A : 7E                  		ld	a,(hl)
(1) 2875/     D4B : CF                  		rst	8
(1) 2876/     D4C : DD 77 34            		ld	(ix+PARP),a	; ARP
(1) 2877/     D4F : E1                  		pop	hl
(1) 2878/     D50 : DD E1               		pop	ix
(1) 2879/     D52 : C9                  		ret
(1) 2880/     D53 :                     
(1) 2881/     D53 :                     ; ----------------------------------------
(1) 2882/     D53 :                     ; FM/FM3
(1) 2883/     D53 :                     
(1) 2884/     D53 :                     .ins_fm:
(1) 2885/     D53 : DD E5               		push	ix
(1) 2886/     D55 : E5                  		push	hl
(1) 2887/     D56 : C5                  		push	bc
(1) 2888/     D57 :                     ; 		ld	b,(ix+chnl_Ins)	; b - current Ins
(1) 2889/     D57 : FD 46 02            		ld	b,(iy+02h)
(1) 2890/     D5A : FD 7E 04            		ld	a,(iy+04h)
(1) 2891/     D5D : E6 07               		and	0111b
(1) 2892/     D5F : 16 00               		ld	d,0
(1) 2893/     D61 : 87                  		add	a,a
(1) 2894/     D62 : 5F                  		ld	e,a
(1) 2895/     D63 : DD 21 70 1C         		ld	ix,fmcach_list
(1) 2896/     D67 : DD 19               		add	ix,de
(1) 2897/     D69 : CF                  		rst	8
(1) 2898/     D6A : DD 5E 00            		ld	e,(ix)
(1) 2899/     D6D : DD 23               		inc	ix
(1) 2900/     D6F : DD 56 00            		ld	d,(ix)
(1) 2901/     D72 :                     
(1) 2902/     D72 :                     ; 		ld	a,(iy+0Bh)	; 0Bh: DON'T reload flag
(1) 2903/     D72 :                     ; 		cp	b
(1) 2904/     D72 :                     ; 		jr	z,.same_patch
(1) 2905/     D72 :                     ; 		ld	(iy+0Bh),b
(1) 2906/     D72 : 23                  		inc	hl		; Skip id and pitch
(1) 2907/     D73 : 23                  		inc	hl
(1) 2908/     D74 :                     
(1) 2909/     D74 : 46                  		ld	b,(hl)
(1) 2910/     D75 : 23                  		inc	hl
(1) 2911/     D76 : 4E                  		ld	c,(hl)
(1) 2912/     D77 : 23                  		inc	hl
(1) 2913/     D78 : 6E                  		ld	l,(hl)
(1) 2914/     D79 : 61                  		ld	h,c
(1) 2915/     D7A :                     
(1) 2916/     D7A : FD 7E 0A            		ld	a,(iy+0Ah)
(1) 2917/     D7D : BC                  		cp	h
(1) 2918/     D7E : 20 07               		jr	nz,.new_romdat
(1) 2919/     D80 : CF                  		rst	8
(1) 2920/     D81 : FD 7E 0B            		ld	a,(iy+0Bh)
(1) 2921/     D84 : BD                  		cp	l
(1) 2922/     D85 : 28 38               		jr	z,.same_patch
(1) 2923/     D87 :                     .new_romdat:
(1) 2924/     D87 : FD 74 0A            		ld	(iy+0Ah),h
(1) 2925/     D8A : FD 75 0B            		ld	(iy+0Bh),l
(1) 2926/     D8D : 78                  		ld	a,b
(1) 2927/     D8E : 01 28 00            		ld	bc,28h		; <- size
(1) 2928/     D91 : D5                  		push	de
(1) 2929/     D92 : CD C2 0F            		call	transferRom	; *** ROM ACCESS ***
(1) 2930/     D95 :                     
(1) 2931/     D95 : E1                  		pop	hl
(1) 2932/     D96 : FD 7E 04            		ld	a,(iy+04h)
(1) 2933/     D99 : 4F                  		ld	c,a		; c - FM Key ID
(1) 2934/     D9A :                     
(1) 2935/     D9A :                     	; hl - fmcach intrument
(1) 2936/     D9A :                     	; de - FM reg and data: 3000h
(1) 2937/     D9A :                     	;  c - FM keyChannel
(1) 2938/     D9A : 79                  		ld	a,c
(1) 2939/     D9B : E6 03               		and	011b
(1) 2940/     D9D : F6 30               		or	30h		; Start at reg 30h
(1) 2941/     D9F : 57                  		ld	d,a
(1) 2942/     DA0 : 1E 00               		ld	e,0
(1) 2943/     DA2 : CF                  		rst	8
(1) 2944/     DA3 : 06 1C               		ld	b,7*4		; Write ALL base FM registers
(1) 2945/     DA5 : CD C4 0D            		call	.fm_setrlist
(1) 2946/     DA8 :                     ; 		ld	b,4
(1) 2947/     DA8 :                     ; 		call	.fm_setrlist
(1) 2948/     DA8 :                     ; 		ld	b,5*4
(1) 2949/     DA8 :                     ; 		call	.fm_setrlist
(1) 2950/     DA8 : 7E                  		ld	a,(hl)		; 0B0h
(1) 2951/     DA9 : FD 77 0C            		ld	(iy+0Ch),a	; ** Save 0B0h to 0Ch
(1) 2952/     DAC : 23                  		inc	hl
(1) 2953/     DAD : 7E                  		ld	a,(hl)		; 0B4h
(1) 2954/     DAE : FD 77 0D            		ld	(iy+0Dh),a	; ** Save 0B4h to 0Dh
(1) 2955/     DB1 : 23                  		inc	hl
(1) 2956/     DB2 : CF                  		rst	8
(1) 2957/     DB3 : 7E                  		ld	a,(hl)
(1) 2958/     DB4 : FD 77 0E            		ld	(iy+0Eh),a	; LFO
(1) 2959/     DB7 : 23                  		inc	hl
(1) 2960/     DB8 : 7E                  		ld	a,(hl)		; 028h keys
(1) 2961/     DB9 : E6 F0               		and	11110000b
(1) 2962/     DBB : CF                  		rst	8
(1) 2963/     DBC : FD 77 0F            		ld	(iy+0Fh),a	; ** Save keys to 0Eh
(1) 2964/     DBF :                     .same_patch:
(1) 2965/     DBF : C1                  		pop	bc
(1) 2966/     DC0 : E1                  		pop	hl
(1) 2967/     DC1 : DD E1               		pop	ix
(1) 2968/     DC3 : C9                  		ret
(1) 2969/     DC4 :                     ; b - numof_regs
(1) 2970/     DC4 :                     .fm_setrlist:
(1) 2971/     DC4 : 5E                  		ld	e,(hl)
(1) 2972/     DC5 : 23                  		inc	hl
(1) 2973/     DC6 : CD DD 11            		call	fm_autoreg
(1) 2974/     DC9 : 00                  		nop
(1) 2975/     DCA : 00                  		nop
(1) 2976/     DCB : CF                  		rst	8
(1) 2977/     DCC : 00                  		nop
(1) 2978/     DCD : 14                  		inc	d		; +4
(1) 2979/     DCE : 14                  		inc	d
(1) 2980/     DCF : 14                  		inc	d
(1) 2981/     DD0 : 14                  		inc	d
(1) 2982/     DD1 : 10 F1               		djnz	.fm_setrlist
(1) 2983/     DD3 : C9                  		ret
(1) 2984/     DD4 :                     
(1) 2985/     DD4 :                     ; ----------------------------------------
(1) 2986/     DD4 :                     
(1) 2987/     DD4 :                     .ins_dac:
(1) 2988/     DD4 : E5                  		push	hl
(1) 2989/     DD5 : C5                  		push	bc
(1) 2990/     DD6 : CD 0C 12            		call	dac_off
(1) 2991/     DD9 : 7E                  		ld	a,(hl)
(1) 2992/     DDA : E6 0F               		and	00001111b
(1) 2993/     DDC : 32 97 1C            		ld	(wave_Flags),a
(1) 2994/     DDF : CF                  		rst	8
(1) 2995/     DE0 : 23                  		inc	hl
(1) 2996/     DE1 : 23                  		inc	hl
(1) 2997/     DE2 : 5E                  		ld	e,(hl)
(1) 2998/     DE3 : 23                  		inc	hl
(1) 2999/     DE4 : 7E                  		ld	a,(hl)
(1) 3000/     DE5 : 23                  		inc	hl
(1) 3001/     DE6 : 6E                  		ld	l,(hl)
(1) 3002/     DE7 : 67                  		ld	h,a
(1) 3003/     DE8 : E5                  		push	hl
(1) 3004/     DE9 : 7B                  		ld	a,e
(1) 3005/     DEA : 01 06 00            		ld	bc,6		; Skip head
(1) 3006/     DED : 09                  		add	hl,bc
(1) 3007/     DEE : CE 00               		adc	a,0
(1) 3008/     DF0 : 22 8C 1C            		ld	(wave_Start),hl	; Set START point
(1) 3009/     DF3 : 32 8E 1C            		ld	(wave_Start+2),a
(1) 3010/     DF6 : E1                  		pop	hl
(1) 3011/     DF7 : 7B                  		ld	a,e
(1) 3012/     DF8 : 11 AF 1C            		ld	de,sampleHead
(1) 3013/     DFB : 01 06 00            		ld	bc,6
(1) 3014/     DFE : D5                  		push	de
(1) 3015/     DFF : CF                  		rst	8
(1) 3016/     E00 : CD C2 0F            		call	transferRom	; *** ROM ACCESS ***
(1) 3017/     E03 : E1                  		pop	hl
(1) 3018/     E04 :                     	; hl - temporal header
(1) 3019/     E04 : 5E                  		ld	e,(hl)
(1) 3020/     E05 : 23                  		inc	hl
(1) 3021/     E06 : 56                  		ld	d,(hl)
(1) 3022/     E07 : 23                  		inc	hl
(1) 3023/     E08 : 7E                  		ld	a,(hl)
(1) 3024/     E09 : 23                  		inc	hl
(1) 3025/     E0A : ED 53 8F 1C         		ld	(wave_Len),de	; LEN
(1) 3026/     E0E : 32 91 1C            		ld	(wave_Len+2),a
(1) 3027/     E11 : 5E                  		ld	e,(hl)
(1) 3028/     E12 : 23                  		inc	hl
(1) 3029/     E13 : CF                  		rst	8
(1) 3030/     E14 : 56                  		ld	d,(hl)
(1) 3031/     E15 : 23                  		inc	hl
(1) 3032/     E16 : 7E                  		ld	a,(hl)
(1) 3033/     E17 : 23                  		inc	hl
(1) 3034/     E18 : ED 53 92 1C         		ld	(wave_Loop),de	; LOOP
(1) 3035/     E1C : 32 94 1C            		ld	(wave_Loop+2),a
(1) 3036/     E1F : 11 06 28            		ld	de,2806h	; keys off
(1) 3037/     E22 : CD E1 11            		call	fm_send_1
(1) 3038/     E25 : C1                  		pop	bc
(1) 3039/     E26 : E1                  		pop	hl
(1) 3040/     E27 :                     ; .same_dac:
(1) 3041/     E27 : C9                  		ret
(1) 3042/     E28 :                     
(1) 3043/     E28 :                     ; ----------------------------------------
(1) 3044/     E28 :                     
(1) 3045/     E28 :                     .ins_pcm:
(1) 3046/     E28 : DD E5               		push	ix
(1) 3047/     E2A : E5                  		push	hl
(1) 3048/     E2B : C5                  		push	bc
(1) 3049/     E2C : 7E                  		ld	a,(hl)		; Stereo|Loop bits
(1) 3050/     E2D : E6 01               		and	00000001b	; Read loop bit
(1) 3051/     E2F : 0F                  		rrca			; Move to MSB
(1) 3052/     E30 : CF                  		rst	8
(1) 3053/     E31 : 23                  		inc	hl		; Skip ID and Pitch
(1) 3054/     E32 : 23                  		inc	hl
(1) 3055/     E33 : 5E                  		ld	e,(hl)		; Read 24-bit pointer
(1) 3056/     E34 : B3                  		or	e
(1) 3057/     E35 : 5F                  		ld	e,a
(1) 3058/     E36 : 23                  		inc	hl
(1) 3059/     E37 : 7E                  		ld	a,(hl)
(1) 3060/     E38 : 23                  		inc	hl
(1) 3061/     E39 : 6E                  		ld	l,(hl)
(1) 3062/     E3A : 67                  		ld	h,a
(1) 3063/     E3B :                     	; d    - Loop enable bit
(1) 3064/     E3B :                     	; e,hl - 24-bit pointer + loop bit
(1) 3065/     E3B : DD 21 80 14         		ld	ix,pcmcom
(1) 3066/     E3F : 06 00               		ld	b,0
(1) 3067/     E41 : FD 4E 04            		ld	c,(iy+04h)
(1) 3068/     E44 : DD 09               		add	ix,bc
(1) 3069/     E46 : 01 28 00            		ld	bc,40		; Go to 40
(1) 3070/     E49 : DD 09               		add	ix,bc
(1) 3071/     E4B : 01 08 00            		ld	bc,8
(1) 3072/     E4E : DD 73 00            		ld	(ix),e		; Write 24-bit pointer
(1) 3073/     E51 : DD 09               		add	ix,bc
(1) 3074/     E53 : DD 74 00            		ld	(ix),h
(1) 3075/     E56 : DD 09               		add	ix,bc
(1) 3076/     E58 : DD 75 00            		ld	(ix),l
(1) 3077/     E5B : C1                  		pop	bc
(1) 3078/     E5C : E1                  		pop	hl
(1) 3079/     E5D : DD E1               		pop	ix
(1) 3080/     E5F : C9                  		ret
(1) 3081/     E60 :                     
(1) 3082/     E60 :                     ; ----------------------------------------
(1) 3083/     E60 :                     
(1) 3084/     E60 :                     .ins_pwm:
(1) 3085/     E60 : DD E5               		push	ix
(1) 3086/     E62 : E5                  		push	hl
(1) 3087/     E63 : C5                  		push	bc
(1) 3088/     E64 : 7E                  		ld	a,(hl)		; Stereo|Loop bits
(1) 3089/     E65 : E6 03               		and	00000011b
(1) 3090/     E67 : 0F                  		rrca
(1) 3091/     E68 : 0F                  		rrca
(1) 3092/     E69 : 4F                  		ld	c,a
(1) 3093/     E6A : CF                  		rst	8
(1) 3094/     E6B : 23                  		inc	hl		; Skip ID and Pitch
(1) 3095/     E6C : 23                  		inc	hl
(1) 3096/     E6D : 56                  		ld	d,(hl)
(1) 3097/     E6E : 23                  		inc	hl
(1) 3098/     E6F : 5E                  		ld	e,(hl)
(1) 3099/     E70 : 23                  		inc	hl
(1) 3100/     E71 : 7E                  		ld	a,(hl)
(1) 3101/     E72 : 23                  		inc	hl
(1) 3102/     E73 : 6E                  		ld	l,(hl)
(1) 3103/     E74 : 67                  		ld	h,a
(1) 3104/     E75 : 79                  		ld	a,c
(1) 3105/     E76 : B2                  		or	d
(1) 3106/     E77 : 57                  		ld	d,a
(1) 3107/     E78 : CF                  		rst	8
(1) 3108/     E79 :                     	; de,hl - 32-bit PWM pointer
(1) 3109/     E79 : DD 21 C0 14         		ld	ix,pwmcom
(1) 3110/     E7D : 06 00               		ld	b,0
(1) 3111/     E7F : FD 4E 04            		ld	c,(iy+04h)
(1) 3112/     E82 : DD 09               		add	ix,bc
(1) 3113/     E84 : 01 18 00            		ld	bc,24
(1) 3114/     E87 : DD 09               		add	ix,bc	; Move to PWOUTF
(1) 3115/     E89 : 01 08 00            		ld	bc,8
(1) 3116/     E8C : DD 72 00            		ld	(ix),d
(1) 3117/     E8F : DD 09               		add	ix,bc
(1) 3118/     E91 : DD 73 00            		ld	(ix),e
(1) 3119/     E94 : DD 09               		add	ix,bc
(1) 3120/     E96 : DD 74 00            		ld	(ix),h
(1) 3121/     E99 : DD 09               		add	ix,bc
(1) 3122/     E9B : DD 75 00            		ld	(ix),l
(1) 3123/     E9E : C1                  		pop	bc
(1) 3124/     E9F : E1                  		pop	hl
(1) 3125/     EA0 : DD E1               		pop	ix
(1) 3126/     EA2 : C9                  		ret
(1) 3127/     EA3 :                     
(1) 3128/     EA3 :                     ; ----------------------------------------
(1) 3129/     EA3 :                     ; NEW note
(1) 3130/     EA3 :                     ; ----------------------------------------
(1) 3131/     EA3 :                     
(1) 3132/     EA3 :                     .note:
(1) 3133/     EA3 : 78                  		ld	a,b		; Volume bit?
(1) 3134/     EA4 : E6 04               		and	0100b
(1) 3135/     EA6 : 20 05               		jr	nz,.fm_hasvol
(1) 3136/     EA8 : FD 36 08 00         		ld	(iy+08h),0	; Reset to default volume
(1) 3137/     EAC : CF                  		rst	8
(1) 3138/     EAD :                     .fm_hasvol:
(1) 3139/     EAD : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 3140/     EB0 : 4F                  		ld	c,a
(1) 3141/     EB1 : FE FF               		cp	-1
(1) 3142/     EB3 : C8                  		ret	z
(1) 3143/     EB4 : FE FE               		cp	-2
(1) 3144/     EB6 : C8                  		ret	z
(1) 3145/     EB7 : E7                  		rst	20h
(1) 3146/     EB8 : 7E                  		ld	a,(hl)
(1) 3147/     EB9 : E6 F0               		and	11110000b
(1) 3148/     EBB : FE 80               		cp	80h
(1) 3149/     EBD : 28 16               		jr	z,.n_indx
(1) 3150/     EBF : CF                  		rst	8
(1) 3151/     EC0 : FE 90               		cp	90h
(1) 3152/     EC2 : 28 20               		jr	z,.n_psgn
(1) 3153/     EC4 : FE A0               		cp	0A0h
(1) 3154/     EC6 : 28 21               		jr	z,.n_fm
(1) 3155/     EC8 :                     ; 		cp	0B0h		; ** Can't use notes on FM special **
(1) 3156/     EC8 :                     ; 		jr	z,.n_fm
(1) 3157/     EC8 : FE C0               		cp	0C0h
(1) 3158/     ECA : 28 09               		jr	z,.n_indx
(1) 3159/     ECC : FE D0               		cp	0D0h
(1) 3160/     ECE : 28 05               		jr	z,.n_indx
(1) 3161/     ED0 : FE E0               		cp	0E0h
(1) 3162/     ED2 : 28 01               		jr	z,.n_indx
(1) 3163/     ED4 : C9                  		ret
(1) 3164/     ED5 :                     
(1) 3165/     ED5 :                     ; --------------------------------
(1) 3166/     ED5 :                     
(1) 3167/     ED5 :                     .n_indx:
(1) 3168/     ED5 : 79                  		ld	a,c
(1) 3169/     ED6 :                     .n_stfreq:
(1) 3170/     ED6 : 23                  		inc	hl		; Skip ID
(1) 3171/     ED7 : 5E                  		ld	e,(hl)		; Read pitch
(1) 3172/     ED8 : 2B                  		dec	hl
(1) 3173/     ED9 : 83                  		add	a,e		; Note + pitch
(1) 3174/     EDA : CF                  		rst	8
(1) 3175/     EDB : 87                  		add	a,a		; * 2
(1) 3176/     EDC : FD 77 06            		ld	(iy+06h),a
(1) 3177/     EDF : FD 36 07 00         		ld	(iy+07h),0	; reset pitchbend
(1) 3178/     EE3 : C9                  		ret
(1) 3179/     EE4 :                     .n_psgn:
(1) 3180/     EE4 : 79                  		ld	a,c
(1) 3181/     EE5 : C6 0C               		add	a,12		; <-- Manual adjust for NOISE
(1) 3182/     EE7 : 18 ED               		jr	.n_stfreq
(1) 3183/     EE9 :                     
(1) 3184/     EE9 :                     ; FM freqs
(1) 3185/     EE9 :                     .n_fm:
(1) 3186/     EE9 : 79                  		ld	a,c
(1) 3187/     EEA : 23                  		inc	hl		; Skip ID
(1) 3188/     EEB : 5E                  		ld	e,(hl)		; Read pitch
(1) 3189/     EEC : 2B                  		dec	hl
(1) 3190/     EED : CF                  		rst	8
(1) 3191/     EEE : 83                  		add	a,e		; Note + pitch
(1) 3192/     EEF :                     	; Search for octave and note...
(1) 3193/     EEF : 0E 00               		ld	c,0		; c - octave
(1) 3194/     EF1 : 16 07               		ld	d,7
(1) 3195/     EF3 :                     .get_oct:
(1) 3196/     EF3 : 5F                  		ld	e,a		; e - note
(1) 3197/     EF4 : D6 0C               		sub	12
(1) 3198/     EF6 : B7                  		or	a
(1) 3199/     EF7 : FA FE 0E            		jp	m,.fnd_oct
(1) 3200/     EFA : 0C                  		inc	c
(1) 3201/     EFB :                     ; 		nop
(1) 3202/     EFB :                     ; 		nop
(1) 3203/     EFB :                     ; 		rst	8
(1) 3204/     EFB :                     ; 		nop
(1) 3205/     EFB :                     ; 		nop
(1) 3206/     EFB : 15                  		dec	d
(1) 3207/     EFC : 20 F5               		jr	nz,.get_oct
(1) 3208/     EFE :                     .fnd_oct:
(1) 3209/     EFE : CF                  		rst	8
(1) 3210/     EFF : 7B                  		ld	a,e
(1) 3211/     F00 : 87                  		add	a,a		; Note * 2
(1) 3212/     F01 : E6 1F               		and	00011111b
(1) 3213/     F03 : CB 09               		rrc	c
(1) 3214/     F05 : CB 09               		rrc	c
(1) 3215/     F07 : CB 09               		rrc	c
(1) 3216/     F09 : CF                  		rst	8
(1) 3217/     F0A : B1                  		or	c
(1) 3218/     F0B : FD 77 06            		ld	(iy+06h),a	; Save octave + index: OOOiiiiib
(1) 3219/     F0E : FD 36 07 00         		ld	(iy+07h),0
(1) 3220/     F12 : C9                  		ret
(1) 3221/     F13 :                     
(1) 3222/     F13 :                     ; ----------------------------------------
(1) 3223/     F13 :                     
(1) 3224/     F13 :                     .chnl_ulnkcut:
(1) 3225/     F13 : DD 4E 01            		ld	c,(ix+chnl_Chip)
(1) 3226/     F16 : C3 19 0F            		jp	.chnl_ulnk
(1) 3227/     F19 :                     .chnl_ulnkoff:
(1) 3228/     F19 :                     ; 		ld	c,0
(1) 3229/     F19 :                     .chnl_ulnk:
(1) 3230/     F19 : AF                  		xor	a
(1) 3231/     F1A : CF                  		rst	8
(1) 3232/     F1B : FD 77 00            		ld	(iy),a			; Delete link, chip and prio
(1) 3233/     F1E : FD 77 01            		ld	(iy+1),a
(1) 3234/     F21 : FD 77 02            		ld	(iy+2),a
(1) 3235/     F24 : FD 77 03            		ld	(iy+3),a
(1) 3236/     F27 : FD 77 08            		ld	(iy+08h),a
(1) 3237/     F2A : FD 77 09            		ld	(iy+09h),a
(1) 3238/     F2D : FD 77 0A            		ld	(iy+0Ah),a
(1) 3239/     F30 : FD 77 0B            		ld	(iy+0Bh),a
(1) 3240/     F33 : C9                  		ret
(1) 3241/     F34 :                     
(1) 3242/     F34 :                     ; 		push	iy
(1) 3243/     F34 :                     ; 		pop	hl
(1) 3244/     F34 :                     ; 		ld	bc,8-2		; Go to 08h
(1) 3245/     F34 :                     ; 		add	hl,bc
(1) 3246/     F34 :                     ; 		rst	8
(1) 3247/     F34 :                     ; 		ld	b,8/2
(1) 3248/     F34 :                     ; .clrfull:
(1) 3249/     F34 :                     ; 		ld	(hl),0		; Reset settings 08-0Bh
(1) 3250/     F34 :                     ; 		inc	hl
(1) 3251/     F34 :                     ; 		ld	(hl),0
(1) 3252/     F34 :                     ; 		inc	hl
(1) 3253/     F34 :                     ; 		rst	8
(1) 3254/     F34 :                     ; 		djnz	.clrfull
(1) 3255/     F34 :                     ; 		ret
(1) 3256/     F34 :                     
(1) 3257/     F34 :                     ; ============================================================
(1) 3258/     F34 :                     ; --------------------------------------------------------
(1) 3259/     F34 :                     ; Communication with the SCD and 32X
(1) 3260/     F34 :                     ;
(1) 3261/     F34 :                     ; SCD: Sends a level2 interrupt to Sub-CPU*
(1) 3262/     F34 :                     ; 32X: Interrupts Slave SH2 with CMD request
(1) 3263/     F34 :                     ;
(1) 3264/     F34 :                     ; *Originally meant for waiting VBlank, that's
(1) 3265/     F34 :                     ; the only one available for sending the table
(1) 3266/     F34 :                     ; --------------------------------------------------------
(1) 3267/     F34 :                     
(1) 3268/     F34 :                     ; NOTE: careful modifing this
(1) 3269/     F34 :                     
(1) 3270/     F34 :                     zmars_send:
(1) 3271/     F34 :                     	; ----------------------------------------
(1) 3272/     F34 :                     	; Send PCM table
(1) 3349/     F34 :                     	; ----------------------------------------
(1) 3350/     F34 :                     	; Send PWM table
(1) 3442/     F34 : C9                  		ret
(1) 3443/     F35 :                     
(1) 3444/     F35 :                     ; --------------------------------------------------------
(1) 3445/     F35 :                     ; Set bank to $A10000 area
(1) 3461/     F35 :                     
(1) 3462/     F35 :                     ; ====================================================================
(1) 3463/     F35 :                     ; ----------------------------------------------------------------
(1) 3464/     F35 :                     ; Subroutines
(1) 3465/     F35 :                     ; ----------------------------------------------------------------
(1) 3466/     F35 :                     
(1) 3467/     F35 :                     ; --------------------------------------------------------
(1) 3468/     F35 :                     ; Init sound engine
(1) 3469/     F35 :                     ; --------------------------------------------------------
(1) 3470/     F35 :                     
(1) 3471/     F35 :                     gema_init:
(1) 3472/     F35 : CD 0C 12            		call	dac_off
(1) 3473/     F38 : AF                  		xor	a
(1) 3474/     F39 :                     ; 		ld	(marsUpd),a
(1) 3475/     F39 :                     ; 		ld	(mcdUpd),a
(1) 3476/     F39 : 32 30 00            		ld	(cdRamLen),a
(1) 3477/     F3C : CD 1B 13            		call	gema_lastbank	; Set last bank slot BEFORE writing to PSG (32X bus problem)
(1) 3478/     F3F : 21 11 7F            		ld	hl,Zpsg_ctrl	; Silence PSG channels
(1) 3479/     F42 : 36 9F               		ld	(hl),09Fh
(1) 3480/     F44 : 36 BF               		ld	(hl),0BFh
(1) 3481/     F46 : 36 DF               		ld	(hl),0DFh
(1) 3482/     F48 : 36 FF               		ld	(hl),0FFh
(1) 3483/     F4A : 11 0B 22            		ld	de,2208h|03h	; Set Default LFO
(1) 3484/     F4D : CD E1 11            		call	fm_send_1
(1) 3485/     F50 : 11 00 27            		ld	de,2700h	; CH3 special and timers off
(1) 3486/     F53 : CD E1 11            		call	fm_send_1
(1) 3487/     F56 :                     ; 		ld	de,2800h
(1) 3488/     F56 : 14                  		inc	d		; FM KEYS off
(1) 3489/     F57 : CD E1 11            		call	fm_send_1
(1) 3490/     F5A : 1C                  		inc	e
(1) 3491/     F5B : CD E1 11            		call	fm_send_1
(1) 3492/     F5E : 1C                  		inc	e
(1) 3493/     F5F : CD E1 11            		call	fm_send_1
(1) 3494/     F62 : 1C                  		inc	e
(1) 3495/     F63 : 1C                  		inc	e
(1) 3496/     F64 : CD E1 11            		call	fm_send_1
(1) 3497/     F67 : 1C                  		inc	e
(1) 3498/     F68 : CD E1 11            		call	fm_send_1
(1) 3499/     F6B : 1C                  		inc	e
(1) 3500/     F6C : CD E1 11            		call	fm_send_1
(1) 3501/     F6F : FD 21 5E 14         		ld	iy,nikona_BuffList
(1) 3502/     F73 : 0E 01               		ld	c,1			; Start at this priority
(1) 3503/     F75 :                     .setup_list:
(1) 3504/     F75 : FD 7E 00            		ld	a,(iy)
(1) 3505/     F78 : FE FF               		cp	-1
(1) 3506/     F7A : 28 24               		jr	z,.end_setup
(1) 3507/     F7C : FD 23               		inc	iy
(1) 3508/     F7E : 6F                  		ld	l,a
(1) 3509/     F7F : FD 66 00            		ld	h,(iy)
(1) 3510/     F82 : E5                  		push	hl
(1) 3511/     F83 : DD E1               		pop	ix
(1) 3512/     F85 : DD 71 14            		ld	(ix+trk_Priority),c
(1) 3513/     F88 : DD 36 01 FF         		ld	(ix+trk_SeqId),-1	; Reset sequence ID
(1) 3514/     F8C : FD 23               		inc	iy
(1) 3515/     F8E :                     	; iy - src
(1) 3516/     F8E :                     	; hl - dst
(1) 3517/     F8E : 11 04 00            		ld	de,trk_Blocks
(1) 3518/     F91 : 19                  		add	hl,de
(1) 3519/     F92 : 06 06               		ld	b,MAX_BUFFNTRY-2
(1) 3520/     F94 :                     .st_copy:
(1) 3521/     F94 : FD 7E 00            		ld	a,(iy)
(1) 3522/     F97 : 77                  		ld	(hl),a
(1) 3523/     F98 : FD 23               		inc	iy
(1) 3524/     F9A : 23                  		inc	hl
(1) 3525/     F9B : 10 F7               		djnz	.st_copy
(1) 3526/     F9D : 0C                  		inc	c
(1) 3527/     F9E : 18 D5               		jr	.setup_list
(1) 3528/     FA0 :                     .end_setup:
(1) 3529/     FA0 : C9                  		ret
(1) 3530/     FA1 :                     
(1) 3531/     FA1 :                     ; --------------------------------------------------------
(1) 3532/     FA1 :                     ; get_tick
(1) 3533/     FA1 :                     ;
(1) 3534/     FA1 :                     ; Checks if VBlank triggred a TICK
(1) 3535/     FA1 :                     ; (1/150 NTSC, 1/120 PAL)
(1) 3536/     FA1 :                     ; --------------------------------------------------------
(1) 3537/     FA1 :                     
(1) 3538/     FA1 :                     get_tick:
(1) 3539/     FA1 : F3                  		di				; Disable ints
(1) 3540/     FA2 : F5                  		push	af
(1) 3541/     FA3 : E5                  		push	hl
(1) 3542/     FA4 : 21 7F 1C            		ld	hl,tickFlag		; read last TICK flag
(1) 3543/     FA7 : 7E                  		ld	a,(hl)			; non-zero value (1Fh)?
(1) 3544/     FA8 : B7                  		or 	a
(1) 3545/     FA9 : 28 13               		jr	z,.ctnotick
(1) 3546/     FAB : 36 00               		ld	(hl),0			; Reset TICK flag
(1) 3547/     FAD : 23                  		inc	hl			; Move to tickCnt
(1) 3548/     FAE : 34                  		inc	(hl)			; and increment
(1) 3549/     FAF : CF                  		rst	8
(1) 3550/     FB0 : D5                  		push	de
(1) 3551/     FB1 : 2A 9B 1C            		ld	hl,(sbeatAcc)		; Increment subbeats
(1) 3552/     FB4 : ED 5B 9D 1C         		ld	de,(sbeatPtck)
(1) 3553/     FB8 : CF                  		rst	8
(1) 3554/     FB9 : 19                  		add	hl,de
(1) 3555/     FBA : 22 9B 1C            		ld	(sbeatAcc),hl
(1) 3556/     FBD : D1                  		pop	de
(1) 3557/     FBE :                     .ctnotick:
(1) 3558/     FBE : E1                  		pop	hl
(1) 3559/     FBF : F1                  		pop	af
(1) 3560/     FC0 : FB                  		ei				; Enable ints again
(1) 3561/     FC1 : C9                  		ret
(1) 3562/     FC2 :                     
(1) 3563/     FC2 :                     ; --------------------------------------------------------
(1) 3564/     FC2 :                     ; transferRom
(1) 3565/     FC2 :                     ;
(1) 3566/     FC2 :                     ; Transfer bytes from ROM to RAM. This also tells
(1) 3567/     FC2 :                     ; to 68k that we want to access ROM
(1) 3568/     FC2 :                     ;
(1) 3569/     FC2 :                     ; Input:
(1) 3570/     FC2 :                     ; a  - 68K Address $xx0000
(1) 3571/     FC2 :                     ;  c - Byte count (size 0 NOT allowed, MAX: 0FFh)
(1) 3572/     FC2 :                     ; hl - 68K Address $00xxxx
(1) 3573/     FC2 :                     ; de - Destination pointer
(1) 3574/     FC2 :                     ;
(1) 3575/     FC2 :                     ; Uses:
(1) 3576/     FC2 :                     ; b
(1) 3577/     FC2 :                     ;
(1) 3578/     FC2 :                     ; Notes:
(1) 3579/     FC2 :                     ; call RST 20h first if transfering anything other
(1) 3580/     FC2 :                     ; than sample data, just to be safe.
(1) 3581/     FC2 :                     ; --------------------------------------------------------
(1) 3582/     FC2 :                     
(1) 3583/     FC2 :                     transferRom:
(1) 3584/     FC2 : FE FF               		cp	0FFh		; <-- WORKAROUND FOR $FF0000 area
(1) 3585/     FC4 : 28 43               		jr	z,.from_ram
(1) 3586/     FC6 : CF                  		rst	8
(1) 3587/     FC7 : DD E5               		push	ix
(1) 3588/     FC9 : DD 21 2F 00         		ld	ix,commZRomBlk	; ix - rom read/block flags
(1) 3589/     FCD : 22 99 1C            		ld	(x68ksrclsb),hl	; save hl copy
(1) 3590/     FD0 : CB BC               		res	7,h
(1) 3591/     FD2 : 06 00               		ld	b,0
(1) 3592/     FD4 : 0B                  		dec	bc
(1) 3593/     FD5 : 09                  		add	hl,bc
(1) 3594/     FD6 : CB 7C               		bit	7,h
(1) 3595/     FD8 : 20 0B               		jr	nz,.double
(1) 3596/     FDA : 2A 99 1C            		ld	hl,(x68ksrclsb)	; single transfer
(1) 3597/     FDD : 0C                  		inc	c
(1) 3598/     FDE : 47                  		ld	b,a
(1) 3599/     FDF : CD 27 10            		call	.transfer
(1) 3600/     FE2 : DD E1               		pop	ix
(1) 3601/     FE4 : C9                  		ret
(1) 3602/     FE5 :                     .double:
(1) 3603/     FE5 : CF                  		rst	8
(1) 3604/     FE6 : 47                  		ld	b,a		; double transfer
(1) 3605/     FE7 : C5                  		push	bc
(1) 3606/     FE8 : E5                  		push	hl
(1) 3607/     FE9 : 79                  		ld	a,c
(1) 3608/     FEA : 95                  		sub	a,l
(1) 3609/     FEB : 4F                  		ld	c,a
(1) 3610/     FEC : 2A 99 1C            		ld	hl,(x68ksrclsb)
(1) 3611/     FEF : CD 27 10            		call	.transfer
(1) 3612/     FF2 : E1                  		pop	hl
(1) 3613/     FF3 : C1                  		pop	bc
(1) 3614/     FF4 :                     ; 		rst	8
(1) 3615/     FF4 : 4D                  		ld	c,l
(1) 3616/     FF5 : 0C                  		inc	c
(1) 3617/     FF6 : 3A 9A 1C            		ld	a,(x68ksrcmid)
(1) 3618/     FF9 : E6 80               		and	80h
(1) 3619/     FFB : C6 80               		add	a,80h
(1) 3620/     FFD : 67                  		ld	h,a
(1) 3621/     FFE : 2E 00               		ld	l,0
(1) 3622/    1000 : 30 01               		jr	nc,.x68knocarry
(1) 3623/    1002 : 04                  		inc	b
(1) 3624/    1003 :                     .x68knocarry:
(1) 3625/    1003 : CD 27 10            		call	.transfer
(1) 3626/    1006 : DD E1               		pop	ix
(1) 3627/    1008 : C9                  		ret
(1) 3628/    1009 :                     
(1) 3629/    1009 :                     ; ------------------------------------------------
(1) 3630/    1009 :                     ; WORKAROUND FOR READING FROM $FF0000 RAM
(1) 3631/    1009 :                     ;
(1) 3632/    1009 :                     ; On the 68K side YOU MUST CALL
(1) 3633/    1009 :                     ; Sound_Update on a loop during Display.
(1) 3634/    1009 :                     ; ------------------------------------------------
(1) 3635/    1009 :                     
(1) 3636/    1009 :                     .from_ram:
(1) 3637/    1009 : ED 53 31 00         		ld	(cdRamDst),de
(1) 3638/    100D : 22 33 00            		ld	(cdRamSrc),hl
(1) 3639/    1010 : 32 35 00            		ld	(cdRamSrcB),a
(1) 3640/    1013 : CD 1B 13            		call	gema_lastbank			; ** Set bank to $FF8000 area
(1) 3641/    1016 : CF                  		rst	8
(1) 3642/    1017 : 79                  		ld	a,c
(1) 3643/    1018 : 32 30 00            		ld	(cdRamLen),a
(1) 3644/    101B : 21 00 FF            		ld	hl,RAM_ZCdFlag_D&07FFFh+8000h	; ** EXTERNAL WRITE TO 68K RAM **
(1) 3645/    101E : 36 01               		ld	(hl),1				; WRITE TO RAM: Set request, 68k clears.
(1) 3646/    1020 :                     .wait:
(1) 3647/    1020 : 3A 30 00            		ld	a,(cdRamLen)			; Wait until 68K clears this
(1) 3648/    1023 : B7                  		or	a
(1) 3649/    1024 : 20 FA               		jr	nz,.wait
(1) 3650/    1026 : C9                  		ret
(1) 3651/    1027 :                     
(1) 3652/    1027 :                     ; ------------------------------------------------
(1) 3653/    1027 :                     ; b  - Source ROM bank
(1) 3654/    1027 :                     ;  c - Bytes to transfer (00h is invalid)
(1) 3655/    1027 :                     ; hl - Source ROM $00xxxx | 8000h
(1) 3656/    1027 :                     ; de - Destination address
(1) 3657/    1027 :                     ; ix - ROM-block flag
(1) 3658/    1027 :                     ; ------------------------------------------------
(1) 3659/    1027 :                     
(1) 3660/    1027 :                     .transfer:
(1) 3661/    1027 : CF                  		rst	8
(1) 3662/    1028 : D5                  		push	de
(1) 3663/    1029 : 11 00 60            		ld	de,6000h
(1) 3664/    102C : 7C                  		ld	a,h
(1) 3665/    102D : 07                  		rlca
(1) 3666/    102E : 12                  		ld	(de),a
(1) 3667/    102F : 78                  		ld	a,b
(1) 3668/    1030 : CF                  		rst	8
(1) 3669/    1031 : 12                  		ld	(de),a
(1) 3670/    1032 : 0F                  		rrca
(1) 3671/    1033 : 12                  		ld	(de),a
(1) 3672/    1034 : 0F                  		rrca
(1) 3673/    1035 : 12                  		ld	(de),a
(1) 3674/    1036 : 0F                  		rrca
(1) 3675/    1037 : 12                  		ld	(de),a
(1) 3676/    1038 : 0F                  		rrca
(1) 3677/    1039 : CF                  		rst	8
(1) 3678/    103A : 12                  		ld	(de),a
(1) 3679/    103B : 0F                  		rrca
(1) 3680/    103C : 12                  		ld	(de),a
(1) 3681/    103D : 0F                  		rrca
(1) 3682/    103E : 12                  		ld	(de),a
(1) 3683/    103F : 0F                  		rrca
(1) 3684/    1040 : 12                  		ld	(de),a
(1) 3685/    1041 : D1                  		pop	de
(1) 3686/    1042 : CB FC               		set	7,h
(1) 3687/    1044 : CF                  		rst	8
(1) 3688/    1045 :                     
(1) 3689/    1045 :                     	; Transfer ROM data in packets
(1) 3690/    1045 :                     	; while playing the cache'd sample
(1) 3691/    1045 :                     	; *** CRITICAL PROCESS ***
(1) 3692/    1045 :                     	;
(1) 3693/    1045 :                     	; pseudo-ref for ldir:
(1) 3694/    1045 :                     	; ld (de),(hl)	; load (hl) to (de) directly
(1) 3695/    1045 :                     	; inc de	; next de
(1) 3696/    1045 :                     	; inc hl	; next hl
(1) 3697/    1045 :                     	; dec bc	; decrement bc
(1) 3698/    1045 :                     	;
(1) 3699/    1045 : 06 00               		ld	b,0
(1) 3700/    1047 : 79                  		ld	a,c		; a - Size counter
(1) 3701/    1048 :                     ; 		set	1,(ix)
(1) 3702/    1048 : D6 08               		sub	MAX_TRFRPZ	; Length lower than MAX_TRFRPZ?
(1) 3703/    104A : 38 14               		jr	c,.x68klast	; Process single piece only
(1) 3704/    104C :                     .x68kloop:
(1) 3705/    104C : CF                  		rst	8
(1) 3706/    104D : 00                  		nop
(1) 3707/    104E : 0E 07               		ld	c,MAX_TRFRPZ-1
(1) 3708/    1050 : DD CB 00 46         		bit	0,(ix)		; Genesis requests BUS?
(1) 3709/    1054 : C4 6E 10            		call	nz,.x68klpwt
(1) 3710/    1057 : ED B0               		ldir			; (de) to (hl) until bc == 0
(1) 3711/    1059 : CF                  		rst	8
(1) 3712/    105A : 00                  		nop
(1) 3713/    105B : D6 07               		sub	a,MAX_TRFRPZ-1
(1) 3714/    105D : D2 4C 10            		jp	nc,.x68kloop
(1) 3715/    1060 :                     ; last block
(1) 3716/    1060 :                     .x68klast:
(1) 3717/    1060 : C6 08               		add	a,MAX_TRFRPZ
(1) 3718/    1062 : 4F                  		ld	c,a
(1) 3719/    1063 : DD CB 00 46         		bit	0,(ix)		; Genesis requests BUS?
(1) 3720/    1067 : C4 6E 10            		call	nz,.x68klpwt
(1) 3721/    106A : ED B0               		ldir
(1) 3722/    106C : CF                  		rst	8
(1) 3723/    106D : C9                  		ret
(1) 3724/    106E :                     
(1) 3725/    106E :                     ; Wait here until Genesis unlocks ROM
(1) 3726/    106E :                     .x68klpwt:
(1) 3727/    106E : 00                  		nop	; WAVE SYNC
(1) 3728/    106F : 00                  		nop
(1) 3729/    1070 :                     .x68kpwtlp:
(1) 3730/    1070 : CF                  		rst	8
(1) 3731/    1071 : 00                  		nop	; WAVE SYNC
(1) 3732/    1072 : 00                  		nop
(1) 3733/    1073 : DD CB 00 46         		bit	0,(ix)		; 68k finished?
(1) 3734/    1077 : 20 F7               		jr	nz,.x68kpwtlp
(1) 3735/    1079 : C9                  		ret
(1) 3736/    107A :                     
(1) 3737/    107A :                     ; ====================================================================
(1) 3738/    107A :                     ; ----------------------------------------------------------------
(1) 3739/    107A :                     ; Sound chip routines
(1) 3740/    107A :                     ; ----------------------------------------------------------------
(1) 3741/    107A :                     
(1) 3742/    107A :                     ; --------------------------------------------------------
(1) 3743/    107A :                     ; chip_env
(1) 3744/    107A :                     ;
(1) 3745/    107A :                     ; Process the PSG
(1) 3746/    107A :                     ; --------------------------------------------------------
(1) 3747/    107A :                     
(1) 3748/    107A :                     chip_env:
(1) 3752/    107A : FD 21 FB 14         		ld	iy,psgcom+3		; Start from NOISE first
(1) 3753/    107E : DD 21 11 7F         		ld	ix,Zpsg_ctrl
(1) 3754/    1082 : 0E E0               		ld	c,0E0h			; c - PSG first ctrl command
(1) 3755/    1084 : 06 04               		ld	b,4			; b - 4 channels
(1) 3756/    1086 :                     .vloop:
(1) 3757/    1086 : CF                  		rst	8
(1) 3758/    1087 : FD 5E 00            		ld	e,(iy+COM)		; e - current command
(1) 3759/    108A : FD 36 00 00         		ld	(iy+COM),0
(1) 3760/    108E :                     
(1) 3761/    108E :                     	; ----------------------------
(1) 3762/    108E :                     	; bit 2 - stop sound
(1) 3763/    108E : CB 53               		bit	2,e
(1) 3764/    1090 : 28 0C               		jr	z,.ckof
(1) 3765/    1092 : FD 36 04 FF         		ld	(iy+LEV),-1		; reset level
(1) 3766/    1096 : FD 36 28 01         		ld	(iy+FLG),1		; and update
(1) 3767/    109A : FD 36 18 00         		ld	(iy+MODE),0		; envelope off
(1) 3768/    109E :                     .ckof:
(1) 3769/    109E :                     	; ----------------------------
(1) 3770/    109E :                     	; bit 1 - key off
(1) 3771/    109E : CB 4B               		bit	1,e
(1) 3772/    10A0 : 28 0F               		jr      z,.ckon
(1) 3773/    10A2 : FD 7E 18            		ld	a,(iy+MODE)		; mode 0?
(1) 3774/    10A5 : B7                  		or	a
(1) 3775/    10A6 : 28 09               		jr	z,.ckon
(1) 3776/    10A8 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3777/    10AC : FD 36 18 04         		ld	(iy+MODE),100b		; set envelope mode 100b
(1) 3778/    10B0 : CF                  		rst	8
(1) 3779/    10B1 :                     .ckon:
(1) 3780/    10B1 :                     	; ----------------------------
(1) 3781/    10B1 :                     	; bit 0 - key on
(1) 3782/    10B1 : CB 43               		bit	0,e
(1) 3783/    10B3 : 28 1A               		jr	z,.envproc
(1) 3784/    10B5 : FD 36 04 FF         		ld	(iy+LEV),-1		; reset level
(1) 3785/    10B9 : 78                  		ld	a,b
(1) 3786/    10BA : FE 04               		cp	4			; NOISE channel?
(1) 3787/    10BC : 20 08               		jr	nz,.nskip
(1) 3788/    10BE : CF                  		rst	8			; Set NOISE mode
(1) 3789/    10BF : 3A 81 1C            		ld	a,(psgHatMode)		; write hat mode only.
(1) 3790/    10C2 : B1                  		or	c
(1) 3791/    10C3 : DD 77 00            		ld	(ix),a			; WRITE PSG
(1) 3792/    10C6 :                     .nskip:
(1) 3793/    10C6 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3794/    10CA : CF                  		rst	8
(1) 3795/    10CB : FD 36 18 01         		ld	(iy+MODE),001b		; set to attack mode
(1) 3796/    10CF :                     .nblock:
(1) 3797/    10CF :                     
(1) 3798/    10CF :                     	; ----------------------------
(1) 3799/    10CF :                     	; Process effects
(1) 3800/    10CF :                     	; ----------------------------
(1) 3801/    10CF :                     .envproc:
(1) 3802/    10CF : FD 7E 18            		ld	a,(iy+MODE)
(1) 3803/    10D2 : B7                  		or	a			; no modes
(1) 3804/    10D3 : CA 59 11            		jp	z,.vedlp
(1) 3805/    10D6 : FE 01               		cp 	001b			; Attack mode
(1) 3806/    10D8 : 20 2C               		jr	nz,.chk2
(1) 3807/    10DA : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3808/    10DE : FD 5E 24            		ld	e,(iy+ALV)
(1) 3809/    10E1 : FD 7E 08            		ld	a,(iy+ATK)		; if ATK == 0, don't use
(1) 3810/    10E4 : B7                  		or	a
(1) 3811/    10E5 : 28 16               		jr	z,.atkend
(1) 3812/    10E7 : 57                  		ld	d,a			; c - attack rate
(1) 3813/    10E8 : 7B                  		ld	a,e			; a - attack level
(1) 3814/    10E9 : CF                  		rst	8
(1) 3815/    10EA : FD 5E 24            		ld	e,(iy+ALV)		; b - OLD attack level
(1) 3816/    10ED : 92                  		sub	a,d			; (attack rate) - (level)
(1) 3817/    10EE : 38 0D               		jr	c,.atkend		; if carry: already finished
(1) 3818/    10F0 : 28 0B               		jr	z,.atkend		; if zero: no attack rate
(1) 3819/    10F2 : BB                  		cp	e			; attack rate == level?
(1) 3820/    10F3 : 38 08               		jr	c,.atkend
(1) 3821/    10F5 : 28 06               		jr	z,.atkend
(1) 3822/    10F7 : FD 77 04            		ld	(iy+LEV),a		; set new level
(1) 3823/    10FA : CF                  		rst	8
(1) 3824/    10FB : 18 5C               		jr	.vedlp
(1) 3825/    10FD :                     .atkend:
(1) 3826/    10FD : FD 73 04            		ld	(iy+LEV),e		; attack level = new level
(1) 3827/    1100 :                     .atkzero:
(1) 3828/    1100 : FD 36 18 02         		ld	(iy+MODE),010b		; set to decay mode
(1) 3829/    1104 : 18 53               		jr	.vedlp
(1) 3830/    1106 :                     .chk2:
(1) 3831/    1106 :                     
(1) 3832/    1106 : FE 02               		cp	010b			; Decay mode
(1) 3833/    1108 : 20 31               		jr	nz,.chk4
(1) 3834/    110A :                     .dectmr:
(1) 3835/    110A : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3836/    110E : FD 7E 04            		ld	a,(iy+LEV)		; a - Level
(1) 3837/    1111 : FD 5E 10            		ld	e,(iy+SLV)		; b - Sustain
(1) 3838/    1114 : BB                  		cp	e
(1) 3839/    1115 : 38 0D               		jr	c,.dkadd		; if carry: add
(1) 3840/    1117 : 28 18               		jr	z,.dkyend		; if zero:  finish
(1) 3841/    1119 : CF                  		rst	8
(1) 3842/    111A : FD 96 0C            		sub	(iy+DKY)		; substract decay rate
(1) 3843/    111D : 38 12               		jr	c,.dkyend		; finish if wraped.
(1) 3844/    111F : BB                  		cp	e			; compare level
(1) 3845/    1120 : 38 0F               		jr	c,.dkyend		; and finish
(1) 3846/    1122 : 18 08               		jr	.dksav
(1) 3847/    1124 :                     .dkadd:
(1) 3848/    1124 : FD 86 0C            		add	a,(iy+DKY)		;  (level) + (decay rate)
(1) 3849/    1127 : 38 08               		jr	c,.dkyend		; finish if wraped.
(1) 3850/    1129 : BB                  		cp	e			; compare level
(1) 3851/    112A : 30 05               		jr	nc,.dkyend
(1) 3852/    112C :                     .dksav:
(1) 3853/    112C : FD 77 04            		ld	(iy+LEV),a		; save new level
(1) 3854/    112F : 18 28               		jr	.vedlp
(1) 3855/    1131 :                     .dkyend:
(1) 3856/    1131 : CF                  		rst	8
(1) 3857/    1132 : FD 73 04            		ld	(iy+LEV),e		; save last attack
(1) 3858/    1135 : FD 36 18 04         		ld	(iy+MODE),100b		; and set to sustain
(1) 3859/    1139 : 18 1E               		jr	.vedlp
(1) 3860/    113B :                     .chk4:
(1) 3861/    113B : FE 04               		cp	100b			; Sustain phase
(1) 3862/    113D : 20 1A               		jr	nz,.vedlp
(1) 3863/    113F : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3864/    1143 : FD 7E 04            		ld	a,(iy+LEV)		; a - Level
(1) 3865/    1146 : CF                  		rst	8
(1) 3866/    1147 : FD 86 14            		add 	a,(iy+RRT)		; add Release Rate
(1) 3867/    114A : 38 05               		jr	c,.killenv		; release done
(1) 3868/    114C : FD 77 04            		ld	(iy+LEV),a		; set new Level
(1) 3869/    114F : 18 08               		jr	.vedlp
(1) 3870/    1151 :                     .killenv:
(1) 3871/    1151 : FD 36 04 FF         		ld	(iy+LEV),-1		; Silence this channel
(1) 3872/    1155 : FD 36 18 00         		ld	(iy+MODE),0		; Reset mode
(1) 3873/    1159 :                     .vedlp:
(1) 3874/    1159 :                     
(1) 3875/    1159 :                     	; ----------------------------
(1) 3876/    1159 :                     	; PSG UPDATE
(1) 3877/    1159 :                     	; ----------------------------
(1) 3878/    1159 : FD 7E 28            		ld	a,(iy+FLG)
(1) 3879/    115C : B7                  		or	a
(1) 3880/    115D : 28 72               		jr	z,.noupd
(1) 3881/    115F : FD 36 28 00         		ld	(iy+FLG),0	; Reset until next one
(1) 3882/    1163 : 59                  		ld	e,c
(1) 3883/    1164 : 3A 81 1C            		ld	a,(psgHatMode)
(1) 3884/    1167 : 57                  		ld	d,a
(1) 3885/    1168 : E6 03               		and	011b
(1) 3886/    116A : FE 03               		cp	011b
(1) 3887/    116C : 20 1D               		jr	nz,.normal
(1) 3888/    116E : CF                  		rst	8
(1) 3889/    116F : 78                  		ld	a,b		; Channel 4?
(1) 3890/    1170 : FE 03               		cp	3
(1) 3891/    1172 : 28 13               		jr	z,.silnc_3
(1) 3892/    1174 : FE 04               		cp	4
(1) 3893/    1176 : 20 18               		jr	nz,.do_nfreq
(1) 3894/    1178 : 3A 81 1C            		ld	a,(psgHatMode)
(1) 3895/    117B : 57                  		ld	d,a
(1) 3896/    117C : E6 03               		and	011b
(1) 3897/    117E : CF                  		rst	8
(1) 3898/    117F : FE 03               		cp	011b
(1) 3899/    1181 : 20 30               		jr	nz,.vonly
(1) 3900/    1183 : 1E C0               		ld	e,0C0h
(1) 3901/    1185 : 18 09               		jr	.do_nfreq
(1) 3902/    1187 :                     .silnc_3:
(1) 3903/    1187 : 3E FF               		ld	a,-1
(1) 3904/    1189 : 18 32               		jr	.vlmuch
(1) 3905/    118B :                     .normal:
(1) 3906/    118B : 78                  		ld	a,b
(1) 3907/    118C : FE 04               		cp	4
(1) 3908/    118E : 28 23               		jr	z,.vonly
(1) 3909/    1190 :                     .do_nfreq:
(1) 3910/    1190 : FD 6E 1C            		ld	l,(iy+DTL)
(1) 3911/    1193 : FD 66 20            		ld	h,(iy+DTH)
(1) 3912/    1196 :                     
(1) 3913/    1196 :                     	; freq effects go here
(1) 3914/    1196 :                     	; (save e FIRST.)
(1) 3915/    1196 :                     	;	push	de
(1) 3916/    1196 :                     	;	pop	de
(1) 3917/    1196 : 7D                  		ld	a,l		; Grab LSB 4 right bits
(1) 3918/    1197 : E6 0F               		and	00001111b
(1) 3919/    1199 : B3                  		or	e		; OR with channel set in e
(1) 3920/    119A : CF                  		rst	8
(1) 3921/    119B : DD 77 00            		ld	(ix),a		; write it
(1) 3922/    119E : 7D                  		ld	a,l		; Grab LSB 4 left bits
(1) 3923/    119F : 0F                  		rrca
(1) 3924/    11A0 : 0F                  		rrca
(1) 3925/    11A1 : 0F                  		rrca
(1) 3926/    11A2 : 0F                  		rrca
(1) 3927/    11A3 : E6 0F               		and	00001111b
(1) 3928/    11A5 : 5F                  		ld	e,a
(1) 3929/    11A6 : 7C                  		ld	a,h		; Grab MSB bits
(1) 3930/    11A7 : CF                  		rst	8
(1) 3931/    11A8 : 07                  		rlca
(1) 3932/    11A9 : 07                  		rlca
(1) 3933/    11AA : 07                  		rlca
(1) 3934/    11AB : 07                  		rlca
(1) 3935/    11AC : E6 30               		and	00110000b
(1) 3936/    11AE : B3                  		or	e
(1) 3937/    11AF : DD 77 00            		ld	(ix),a
(1) 3938/    11B2 : CF                  		rst	8
(1) 3939/    11B3 :                     .vonly:
(1) 3940/    11B3 : FD 7E 30            		ld	a,(iy+PVOL)		; c - Level
(1) 3941/    11B6 : FD 86 04            		add	a,(iy+LEV)		; Add MASTER volume
(1) 3942/    11B9 : 30 02               		jr	nc,.vlmuch
(1) 3943/    11BB : 3E FF               		ld	a,-1
(1) 3944/    11BD :                     .vlmuch:
(1) 3945/    11BD : CB 3F               		srl	a			; (Level >> 4)
(1) 3946/    11BF : CB 3F               		srl	a
(1) 3947/    11C1 : CB 3F               		srl	a
(1) 3948/    11C3 : CF                  		rst	8
(1) 3949/    11C4 : CB 3F               		srl	a
(1) 3950/    11C6 : E6 0F               		and	00001111b		; Filter volume value
(1) 3951/    11C8 : B1                  		or	c			; and OR with current channel
(1) 3952/    11C9 : F6 90               		or	90h			; Set volume-set mode
(1) 3954/    11CB : DD 77 00            		ld	(ix),a			; *** WRITE volume
(1) 3956/    11CE : FD 34 38            		inc	(iy+PTMR)		; Update general timer
(1) 3957/    11D1 :                     .noupd:
(1) 3958/    11D1 :                     	; ----------------------------
(1) 3959/    11D1 : FD 2B               		dec	iy			; next COM to check (backwards)
(1) 3960/    11D3 : 79                  		ld	a,c
(1) 3961/    11D4 : CF                  		rst	8
(1) 3962/    11D5 : D6 20               		sub	a,20h			; next PSG (backwards)
(1) 3963/    11D7 : 4F                  		ld	c,a
(1) 3964/    11D8 : 05                  		dec	b
(1) 3965/    11D9 : C2 86 10            		jp	nz,.vloop
(1) 3966/    11DC : C9                  		ret
(1) 3967/    11DD :                     
(1) 3968/    11DD :                     ; ---------------------------------------------
(1) 3969/    11DD :                     ; FM register writes
(1) 3970/    11DD :                     ;
(1) 3971/    11DD :                     ; Input:
(1) 3972/    11DD :                     ; d - ctrl
(1) 3973/    11DD :                     ; e - data
(1) 3974/    11DD :                     ; ---------------------------------------------
(1) 3975/    11DD :                     
(1) 3976/    11DD :                     ; c - KeyID
(1) 3977/    11DD :                     fm_autoreg:
(1) 3978/    11DD : CB 51               		bit	2,c
(1) 3979/    11DF : 20 0B               		jr	nz,fm_send_2
(1) 3980/    11E1 :                     
(1) 3981/    11E1 :                     ; Channels 1-3 and global registers
(1) 3982/    11E1 :                     fm_send_1:
(1) 3983/    11E1 : 7A                  		ld	a,d
(1) 3984/    11E2 : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 3985/    11E5 : 00                  		nop
(1) 3986/    11E6 : 7B                  		ld	a,e
(1) 3987/    11E7 : 32 01 40            		ld	(Zym_data_1),a
(1) 3988/    11EA : 00                  		nop
(1) 3989/    11EB : C9                  		ret
(1) 3990/    11EC :                     ; Channels 4-6
(1) 3991/    11EC :                     fm_send_2:
(1) 3992/    11EC : 7A                  		ld	a,d
(1) 3993/    11ED : 32 02 40            		ld	(Zym_ctrl_2),a
(1) 3994/    11F0 : 00                  		nop
(1) 3995/    11F1 : 7B                  		ld	a,e
(1) 3996/    11F2 : 32 03 40            		ld	(Zym_data_2),a
(1) 3997/    11F5 : 00                  		nop
(1) 3998/    11F6 : C9                  		ret
(1) 3999/    11F7 :                     
(1) 4000/    11F7 :                     ; --------------------------------------------------------
(1) 4001/    11F7 :                     ; brute-force WAVE ON/OFF playback
(1) 4002/    11F7 :                     ; --------------------------------------------------------
(1) 4003/    11F7 :                     
(1) 4004/    11F7 :                     dac_on:
(1) 4005/    11F7 : 3E 2B               		ld	a,2Bh
(1) 4006/    11F9 : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 4007/    11FC : 3E 80               		ld	a,80h
(1) 4008/    11FE : 32 01 40            		ld	(Zym_data_1),a
(1) 4009/    1201 : 3E D9               		ld 	a,zopcExx
(1) 4010/    1203 : 32 08 00            		ld	(dac_me),a
(1) 4011/    1206 : 3E F5               		ld 	a,zopcPushAf
(1) 4012/    1208 : 32 20 00            		ld	(dac_fill),a
(1) 4013/    120B : C9                  		ret
(1) 4014/    120C :                     dac_off:
(1) 4015/    120C : 3E 2B               		ld	a,2Bh
(1) 4016/    120E : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 4017/    1211 : 3E 00               		ld	a,00h
(1) 4018/    1213 : 32 01 40            		ld	(Zym_data_1),a
(1) 4019/    1216 : 3E C9               		ld 	a,zopcRet
(1) 4020/    1218 : 32 08 00            		ld	(dac_me),a
(1) 4021/    121B : 3E C9               		ld 	a,zopcRet
(1) 4022/    121D : 32 20 00            		ld	(dac_fill),a
(1) 4023/    1220 : C9                  		ret
(1) 4024/    1221 :                     
(1) 4025/    1221 :                     ; --------------------------------------------------------
(1) 4026/    1221 :                     ; dac_play
(1) 4027/    1221 :                     ;
(1) 4028/    1221 :                     ; Plays a new sample
(1) 4029/    1221 :                     ;
(1) 4030/    1221 :                     ; NOTE:
(1) 4031/    1221 :                     ; Set wave_Flags and wave_Pitch externally
(1) 4032/    1221 :                     ; getting here.
(1) 4033/    1221 :                     ; --------------------------------------------------------
(1) 4034/    1221 :                     
(1) 4035/    1221 :                     dac_play:
(1) 4036/    1221 : F3                  		di
(1) 4037/    1222 : CD 0C 12            		call	dac_off
(1) 4038/    1225 : D9                  		exx				; flip exx regs
(1) 4039/    1226 : 01 1D 00            		ld	bc,dWaveBuff>>8		; bc - WAVFIFO MSB
(1) 4040/    1229 : ED 5B 95 1C         		ld	de,(wave_Pitch)		; de - Pitch
(1) 4041/    122D : 21 00 00            		ld	hl,(dWaveBuff&0FFh)<<8	; hl - WAVFIFO LSB pointer (xx.00)
(1) 4042/    1230 : D9                  		exx				; move them back
(1) 4043/    1231 : 2A 8C 1C            		ld	hl,(wave_Start)		; copy Start and length
(1) 4044/    1234 : 3A 8E 1C            		ld 	a,(wave_Start+2)
(1) 4045/    1237 : 22 84 1C            		ld	(dDacPntr),hl
(1) 4046/    123A : 32 86 1C            		ld	(dDacPntr+2),a
(1) 4047/    123D : 2A 8F 1C            		ld	hl,(wave_Len)
(1) 4048/    1240 : 3A 91 1C            		ld 	a,(wave_Len+2)
(1) 4049/    1243 : 22 87 1C            		ld	(dDacCntr),hl
(1) 4050/    1246 : 32 89 1C            		ld	(dDacCntr+2),a
(1) 4051/    1249 : AF                  		xor	a
(1) 4052/    124A : 32 83 1C            		ld	(dDacFifoMid),a		; Reset half-way
(1) 4053/    124D : CD 55 12            		call	dac_refill
(1) 4054/    1250 : CD F7 11            		call	dac_on
(1) 4055/    1253 : FB                  		ei
(1) 4056/    1254 : C9                  		ret
(1) 4057/    1255 :                     
(1) 4058/    1255 :                     ; --------------------------------------------------------
(1) 4059/    1255 :                     
(1) 4060/    1255 :                     dac_refill:
(1) 4061/    1255 : CF                  		rst	8
(1) 4062/    1256 : C5                  		push	bc
(1) 4063/    1257 : D5                  		push	de
(1) 4064/    1258 : E5                  		push	hl
(1) 4065/    1259 : 3A 97 1C            		ld	a,(wave_Flags)	; Already finished?
(1) 4066/    125C : FE 07               		cp	111b
(1) 4067/    125E : D2 14 13            		jp	nc,.dacfill_end
(1) 4068/    1261 : 3A 89 1C            		ld	a,(dDacCntr+2)	; Last bytes
(1) 4069/    1264 : 2A 87 1C            		ld	hl,(dDacCntr)
(1) 4070/    1267 : 01 80 00            		ld	bc,80h
(1) 4071/    126A : 37                  		scf
(1) 4072/    126B : 3F                  		ccf
(1) 4073/    126C : ED 42               		sbc	hl,bc
(1) 4074/    126E : DE 00               		sbc	a,0
(1) 4075/    1270 : 32 89 1C            		ld	(dDacCntr+2),a
(1) 4076/    1273 : 22 87 1C            		ld	(dDacCntr),hl
(1) 4077/    1276 : 16 1D               		ld	d,dWaveBuff>>8
(1) 4078/    1278 : B7                  		or	a
(1) 4079/    1279 : FA A3 12            		jp	m,.dac_over
(1) 4080/    127C : 3A 83 1C            		ld	a,(dDacFifoMid)	; Update halfway value
(1) 4081/    127F : 5F                  		ld	e,a
(1) 4082/    1280 : C6 80               		add 	a,80h
(1) 4083/    1282 : 32 83 1C            		ld	(dDacFifoMid),a
(1) 4084/    1285 : 2A 84 1C            		ld	hl,(dDacPntr)
(1) 4085/    1288 : 3A 86 1C            		ld	a,(dDacPntr+2)
(1) 4086/    128B : CD C2 0F            		call	transferRom	; *** ROM ACCESS ***
(1) 4087/    128E : 2A 84 1C            		ld	hl,(dDacPntr)
(1) 4088/    1291 : 3A 86 1C            		ld	a,(dDacPntr+2)
(1) 4089/    1294 : 01 80 00            		ld	bc,80h
(1) 4090/    1297 : 09                  		add	hl,bc
(1) 4091/    1298 : CE 00               		adc	a,0
(1) 4092/    129A : 22 84 1C            		ld	(dDacPntr),hl
(1) 4093/    129D : 32 86 1C            		ld	(dDacPntr+2),a
(1) 4094/    12A0 : C3 17 13            		jp	.dacfill_ret
(1) 4095/    12A3 :                     
(1) 4096/    12A3 :                     ; NOTE: This doesn't finish at the exact END point
(1) 4097/    12A3 :                     ; but the USER won't notice it.
(1) 4098/    12A3 :                     
(1) 4099/    12A3 :                     .dac_over:
(1) 4100/    12A3 : 16 1D               		ld	d,dWaveBuff>>8
(1) 4101/    12A5 : 3A 97 1C            		ld	a,(wave_Flags)	; LOOP enabled?
(1) 4102/    12A8 : E6 01               		and	001b
(1) 4103/    12AA : C2 CD 12            		jp	nz,.dacfill_loop
(1) 4104/    12AD : 7D                  		ld	a,l
(1) 4105/    12AE : C6 80               		add	a,80h
(1) 4106/    12B0 : 4F                  		ld	c,a
(1) 4107/    12B1 : 06 00               		ld	b,0
(1) 4108/    12B3 : C5                  		push	bc
(1) 4109/    12B4 : 3A 83 1C            		ld	a,(dDacFifoMid)
(1) 4110/    12B7 : 5F                  		ld	e,a
(1) 4111/    12B8 : C6 80               		add	a,80h
(1) 4112/    12BA : 32 83 1C            		ld	(dDacFifoMid),a
(1) 4113/    12BD : C1                  		pop	bc
(1) 4114/    12BE : 79                  		ld	a,c
(1) 4115/    12BF : B0                  		or	b
(1) 4116/    12C0 : 28 52               		jr	z,.dacfill_end
(1) 4117/    12C2 : 2A 84 1C            		ld	hl,(dDacPntr)
(1) 4118/    12C5 : 3A 86 1C            		ld	a,(dDacPntr+2)
(1) 4119/    12C8 : CD C2 0F            		call	transferRom	; *** ROM ACCESS ***
(1) 4120/    12CB : 18 47               		jr	.dacfill_end
(1) 4121/    12CD :                     .dacfill_loop:
(1) 4122/    12CD :                     	; loop sample
(1) 4123/    12CD : C5                  		push	bc
(1) 4124/    12CE : D5                  		push	de
(1) 4125/    12CF : 3A 94 1C            		ld	a,(wave_Loop+2)
(1) 4126/    12D2 : 4F                  		ld	c,a
(1) 4127/    12D3 : ED 5B 92 1C         		ld	de,(wave_Loop)
(1) 4128/    12D7 : 2A 8C 1C            		ld	hl,(wave_Start)
(1) 4129/    12DA : 3A 8E 1C            		ld 	a,(wave_Start+2)
(1) 4130/    12DD : 81                  		add	a,c
(1) 4131/    12DE : 19                  		add	hl,de
(1) 4132/    12DF : CE 00               		adc	a,0
(1) 4133/    12E1 : 22 84 1C            		ld	(dDacPntr),hl
(1) 4134/    12E4 : 32 86 1C            		ld	(dDacPntr+2),a
(1) 4135/    12E7 : 2A 8F 1C            		ld	hl,(wave_Len)
(1) 4136/    12EA : 3A 91 1C            		ld 	a,(wave_Len+2)
(1) 4137/    12ED : 91                  		sub	a,c
(1) 4138/    12EE : 37                  		scf
(1) 4139/    12EF : 3F                  		ccf
(1) 4140/    12F0 : ED 52               		sbc	hl,de
(1) 4141/    12F2 : DE 00               		sbc	a,0
(1) 4142/    12F4 : 22 87 1C            		ld	(dDacCntr),hl
(1) 4143/    12F7 : 32 89 1C            		ld	(dDacCntr+2),a
(1) 4144/    12FA : D1                  		pop	de
(1) 4145/    12FB : C1                  		pop	bc
(1) 4146/    12FC : 78                  		ld	a,b
(1) 4147/    12FD : B1                  		or	c
(1) 4148/    12FE : 28 17               		jr	z,.dacfill_ret
(1) 4149/    1300 : 3A 83 1C            		ld	a,(dDacFifoMid)
(1) 4150/    1303 : 5F                  		ld	e,a
(1) 4151/    1304 : C6 80               		add	a,80h
(1) 4152/    1306 : 32 83 1C            		ld	(dDacFifoMid),a
(1) 4153/    1309 : 2A 84 1C            		ld	hl,(dDacPntr)
(1) 4154/    130C : 3A 86 1C            		ld	a,(dDacPntr+2)
(1) 4155/    130F : CD C2 0F            		call	transferRom	; *** ROM ACCESS ***
(1) 4156/    1312 : 18 03               		jr	.dacfill_ret
(1) 4157/    1314 :                     .dacfill_end:
(1) 4158/    1314 : CD 0C 12            		call	dac_off		; DAC finished
(1) 4159/    1317 :                     .dacfill_ret:
(1) 4160/    1317 : E1                  		pop	hl
(1) 4161/    1318 : D1                  		pop	de
(1) 4162/    1319 : C1                  		pop	bc
(1) 4163/    131A : C9                  		ret
(1) 4164/    131B :                     
(1) 4165/    131B :                     ; ----------------------------------------------------------------
(1) 4166/    131B :                     ; Two purposes:
(1) 4167/    131B :                     ;
(1) 4168/    131B :                     ; Set the BANK to the very last part of memory for the
(1) 4169/    131B :                     ; transferRom to read from RAM
(1) 4170/    131B :                     ;
(1) 4171/    131B :                     ; On 32X this sets the bank out of the ROM-reading areas due
(1) 4172/    131B :                     ; to a conflict with the PSG
(1) 4173/    131B :                     ;
(1) 4174/    131B :                     ; Uses:
(1) 4175/    131B :                     ; hl,b
(1) 4176/    131B :                     ; ----------------------------------------------------------------
(1) 4177/    131B :                     
(1) 4178/    131B :                     gema_lastbank:
(1) 4179/    131B : 21 00 60            		ld	hl,6000h
(1) 4180/    131E : 06 09               		ld	b,9		; 9 bits
(1) 4181/    1320 :                     .write:
(1) 4182/    1320 : 36 01               		ld	(hl),1
(1) 4183/    1322 : 10 FC               		djnz	.write
(1) 4184/    1324 : CF                  		rst	8
(1) 4185/    1325 : C9                  		ret
(1) 4186/    1326 :                     
(1) 4187/    1326 :                     ; ====================================================================
(1) 4188/    1326 :                     ; ----------------------------------------------------------------
(1) 4189/    1326 :                     ; Tables
(1) 4190/    1326 :                     ; ----------------------------------------------------------------
(1) 4191/    1326 :                     
(1) 4192/    1326 : 84 02               fmFreq_List:	dw 644
(1) 4193/    1328 : A9 02               		dw 681
(1) 4194/    132A : D2 02               		dw 722
(1) 4195/    132C : FD 02               		dw 765
(1) 4196/    132E : 2A 03               		dw 810
(1) 4197/    1330 : 5A 03               		dw 858
(1) 4198/    1332 : 8E 03               		dw 910
(1) 4199/    1334 : C4 03               		dw 964
(1) 4200/    1336 : FD 03               		dw 1021
(1) 4201/    1338 : 39 04               		dw 1081
(1) 4202/    133A : 7A 04               		dw 1146
(1) 4203/    133C : BE 04               		dw 1214
(1) 4204/    133E :                     psgFreq_List:
(1) 4205/    133E :                     ; 	dw    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1	; x-0
(1) 4206/    133E :                     ; 	dw    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1	; x-1
(1) 4207/    133E :                     ; 	dw    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1	; x-2
(1) 4208/    133E : FF FF FF FF FF FF   	dw    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,03F8h,03BFh,0389h	; x-3
             1344 : FF FF FF FF FF FF 
             134A : FF FF FF FF FF FF 
             1350 : F8 03 BF 03 89 03 
(1) 4209/    1356 : 56 03 26 03 F9 02   	dw 0356h,0326h,02F9h,02CEh,02A5h,0280h,025Ch,023Ah,021Ah,01FBh,01DFh,01C4h	; x-4
             135C : CE 02 A5 02 80 02 
             1362 : 5C 02 3A 02 1A 02 
             1368 : FB 01 DF 01 C4 01 
(1) 4210/    136E : AB 01 93 01 7D 01   	dw 01ABh,0193h,017Dh,0167h,0153h,0140h,012Eh,011Dh,010Dh,00FEh,00EFh,00E2h	; x-5
             1374 : 67 01 53 01 40 01 
             137A : 2E 01 1D 01 0D 01 
             1380 : FE 00 EF 00 E2 00 
(1) 4211/    1386 : D6 00 C9 00 BE 00   	dw 00D6h,00C9h,00BEh,00B4h,00A9h,00A0h,0097h,008Fh,0087h,007Fh,0078h,0071h	; x-6
             138C : B4 00 A9 00 A0 00 
             1392 : 97 00 8F 00 87 00 
             1398 : 7F 00 78 00 71 00 
(1) 4212/    139E :                     ; 	dw 006Bh,0065h,005Fh,005Ah,0055h,0050h,004Bh,0047h,0043h,0040h,003Ch,0039h	; x-7
(1) 4213/    139E :                     ; 	dw 0036h,0033h,0030h,002Dh,002Bh,0028h,0026h,0024h,0022h,0020h,001Fh,001Dh	; x-8 *
(1) 4214/    139E :                     ; 	dw 001Bh,001Ah,0018h,0017h,0016h,0015h,0013h,0012h,0011h,0010h,0009h,0008h	; x-9 *
(1) 4215/    139E :                     
(1) 4216/    139E :                     
(1) 4217/    139E :                     ; ----------------------------------------
(1) 4218/    139E :                     ; DAC and PWM
(1) 4219/    139E :                     ;
(1) 4220/    139E :                     ; base C-5 freq: 16000hz
(1) 4221/    139E :                     ; ----------------------------------------
(1) 4222/    139E :                     wavFreq_List:
(1) 4223/    139E :                     	;   C     C#    D     D#    E     F     F#    G     G#    A     A#    B
(1) 4224/    139E :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-0
(1) 4225/    139E :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-1
(1) 4226/    139E :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0036h,003Bh	; x-2
(1) 4227/    139E : 3E 00 43 00 46 00   	dw 003Eh,0043h,0046h,0049h,004Eh,0054h,0058h,005Eh,0063h,0068h,0070h,0075h	; x-3
             13A4 : 49 00 4E 00 54 00 
             13AA : 58 00 5E 00 63 00 
             13B0 : 68 00 70 00 75 00 
(1) 4228/    13B6 : 85 00 87 00 8C 00   	dw 0085h,0087h,008Ch,009Ah,00A4h,00ADh,00B2h,00C0h,00CCh,00D7h,00E6h,00F0h	; x-4
             13BC : 9A 00 A4 00 AD 00 
             13C2 : B2 00 C0 00 CC 00 
             13C8 : D7 00 E6 00 F0 00 
(1) 4229/    13CE : 00 01 10 01 20 01   	dw 0100h,0110h,0120h,012Eh,0147h,015Ah,016Ah,017Fh,0191h,01ACh,01C2h,01E0h	; x-5
             13D4 : 2E 01 47 01 5A 01 
             13DA : 6A 01 7F 01 91 01 
             13E0 : AC 01 C2 01 E0 01 
(1) 4230/    13E6 : F8 01 10 02 40 02   	dw 01F8h,0210h,0240h,0260h,0280h,02A0h,02D0h,02F8h,0320h,0350h,0380h,03C0h	; x-6
             13EC : 60 02 80 02 A0 02 
             13F2 : D0 02 F8 02 20 03 
             13F8 : 50 03 80 03 C0 03 
(1) 4231/    13FE :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-7
(1) 4232/    13FE :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-8
(1) 4233/    13FE :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-9
(1) 4234/    13FE :                     
(1) 4235/    13FE :                     ; ----------------------------------------
(1) 4236/    13FE :                     ; SegaCD ONLY
(1) 4237/    13FE :                     ;
(1) 4238/    13FE :                     ; base C-5 freq: 32000hz
(1) 4239/    13FE :                     ; ----------------------------------------
(1) 4240/    13FE :                     wavFreq_CdPcm:
(1) 4241/    13FE :                     	;     C     C#     D      D#     E      F      F#     G      G#     A      A#     B
(1) 4242/    13FE :                     ; 	dw  0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h	; x-0
(1) 4243/    13FE :                     ; 	dw  0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h	; x-1
(1) 4244/    13FE :                     ; 	dw  0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h	; x-2  4000 unchecked
(1) 4245/    13FE : F8 01 14 02 3C 02   	dw  01F8h, 0214h, 023Ch, 0258h, 027Ch, 02A0h, 02C8h, 02F4h, 031Ch, 0348h, 037Ch, 03B0h	; x-3  8000 ok
             1404 : 58 02 7C 02 A0 02 
             140A : C8 02 F4 02 1C 03 
             1410 : 48 03 7C 03 B0 03 
(1) 4246/    1416 : F0 03 24 04 68 04   	dw  03F0h, 0424h, 0468h, 04A8h, 04ECh, 0540h, 0590h, 05E4h, 063Ch, 0698h, 0704h, 0760h	; x-4 16000 ok
             141C : A8 04 EC 04 40 05 
             1422 : 90 05 E4 05 3C 06 
             1428 : 98 06 04 07 60 07 
(1) 4247/    142E : DC 07 48 08 D4 08   	dw  07DCh, 0848h, 08D4h, 0960h, 09F0h, 0A64h, 0B04h, 0BAAh, 0C60h, 0D18h, 0DE4h, 0EB6h	; x-5 32000 ok
             1434 : 60 09 F0 09 64 0A 
             143A : 04 0B AA 0B 60 0C 
             1440 : 18 0D E4 0D B6 0E 
(1) 4248/    1446 : B0 0F 74 10 84 11   	dw  0FB0h, 1074h, 1184h, 1280h, 139Ch, 14C8h, 1624h, 174Ch, 18DCh, 1A38h, 1BE0h, 1D94h	; x-6 64000 unstable
             144C : 80 12 9C 13 C8 14 
             1452 : 24 16 4C 17 DC 18 
             1458 : 38 1A E0 1B 94 1D 
(1) 4249/    145E :                     ; 	dw  1F64h, 20FCh, 2330h, 2524h, 2750h, 29B4h, 2C63h, 2F63h, 31E0h, 347Bh, 377Bh, 3B41h	; x-7 128000 bad
(1) 4250/    145E :                     ; 	dw  3EE8h, 4206h, 4684h, 4A5Ah, 4EB5h, 5379h, 58E1h, 5DE0h, 63C0h, 68FFh, 6EFFh, 783Ch	; x-8 256000 bad
(1) 4251/    145E :                     ; 	dw  7FC2h, 83FCh, 8D14h, 9780h,0AA5Dh,0B1F9h,   -1 ,   -1 ,   -1 ,   -1 ,   -1 ,   -1 	; x-9 bad
(1) 4252/    145E :                     
(1) 4253/    145E :                     ; ====================================================================
(1) 4254/    145E :                     ; ----------------------------------------------------------------
(1) 4255/    145E :                     ; MASTER buffers list
(1) 4256/    145E :                     ;
(1) 4257/    145E :                     ; dw track_buffer
(1) 4258/    145E :                     ; dw channel_list,block_cache,header_cache,track_cache
(1) 4259/    145E :                     ;
(1) 4260/    145E :                     ; (track_cache: 1BIT SIZES ONLY, ALIGNED)
(1) 4261/    145E :                     ; ----------------------------------------------------------------
(1) 4262/    145E :                     
(1) 4263/    145E :                     nikona_BuffList:
(1) 4264/    145E : C4 16 A4 16 24 16   	dw trkBuff_0,trkBlks_0,trkHdrs_0,trkCach_0
             1464 : 00 1F             
(1) 4265/    1466 : 04 17 AC 16 44 16   	dw trkBuff_1,trkBlks_1,trkHdrs_1,trkCach_1
             146C : 20 1F             
(1) 4266/    146E : 44 17 B4 16 64 16   	dw trkBuff_2,trkBlks_2,trkHdrs_2,trkCach_2
             1474 : 40 1F             
(1) 4267/    1476 : 84 17 BC 16 84 16   	dw trkBuff_3,trkBlks_3,trkHdrs_3,trkCach_3
             147C : 60 1F             
(1) 4268/    147E :                     nikona_BuffList_e:
(1) 4269/    147E : FF FF               	dw -1	; ENDOFLIST
(1) 4270/    1480 :                     
(1) 4271/    1480 :                     ; ====================================================================
(1) 4272/    1480 :                     ; ----------------------------------------------------------------
(1) 4273/    1480 :                     ; Buffer section
(1) 4274/    1480 :                     ; ----------------------------------------------------------------
(1) 4275/    1480 :                     
(1) 4276/    1480 : 00 00 00 00 00 00   pcmcom:	db 00h,00h,00h,00h,00h,00h,00h,00h	; 0 - Playback bits: %0000PCOK /Pitchbend/keyCut/keyOff/KeyOn
             1486 : 00 00             
(1) 4277/    1488 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 8 - Pitch MSB
             148E : 00 00             
(1) 4278/    1490 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 16 - Pitch LSB
             1496 : 00 00             
(1) 4279/    1498 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 24 - Volume
             149E : 00 00             
(1) 4280/    14A0 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 32 - Panning %RRRRLLLL
             14A6 : 00 00             
(1) 4281/    14A8 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 40 - LoopEnable bit | 24-bit sample location in Sub-CPU area
             14AE : 00 00             
(1) 4282/    14B0 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 48
             14B6 : 00 00             
(1) 4283/    14B8 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 56
             14BE : 00 00             
(1) 4284/    14C0 :                     
(1) 4285/    14C0 : 00 00 00 00 00 00   pwmcom:	db 00h,00h,00h,00h,00h,00h,00h,00h	; 0 - Playback bits: %0000PCOK Pitchbend/keyCut/keyOff/KeyOn
             14C6 : 00 00             
(1) 4286/    14C8 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 8 - Volume | Pitch MSB
             14CE : 00 00             
(1) 4287/    14D0 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 16 - Pitch LSB
             14D6 : 00 00             
(1) 4288/    14D8 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 24 - Flags+MSB bits of sample %SlLRxxxx Stereo/Loop/Left/Right
             14DE : 00 00             
(1) 4289/    14E0 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 32 -
             14E6 : 00 00             
(1) 4290/    14E8 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h
             14EE : 00 00             
(1) 4291/    14F0 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h
             14F6 : 00 00             
(1) 4292/    14F8 :                     
(1) 4293/    14F8 : 00 00 00 00         psgcom:	db 00h,00h,00h,00h	;  0 - command 1 = key on, 2 = key off, 4 = stop snd
(1) 4294/    14FC : FF FF FF FF         	db -1, -1, -1, -1	;  4 - output level attenuation (%llll.0000, -1 = silent)
(1) 4295/    1500 : 00 00 00 00         	db 00h,00h,00h,00h	;  8 - attack rate (START)
(1) 4296/    1504 : 00 00 00 00         	db 00h,00h,00h,00h	; 12 - decay rate
(1) 4297/    1508 : 00 00 00 00         	db 00h,00h,00h,00h	; 16 - sustain level attenuation (MAXIMUM)
(1) 4298/    150C : 00 00 00 00         	db 00h,00h,00h,00h	; 20 - release rate
(1) 4299/    1510 : 00 00 00 00         	db 00h,00h,00h,00h	; 24 - envelope mode 0 = off, 1 = attack, 2 = decay, 3 = sustain
(1) 4300/    1514 : 00 00 00 00         	db 00h,00h,00h,00h	; 28 - freq bottom 4 bits
(1) 4301/    1518 : 00 00 00 00         	db 00h,00h,00h,00h	; 32 - freq upper 6 bits
(1) 4302/    151C : 00 00 00 00         	db 00h,00h,00h,00h	; 36 - attack level attenuation
(1) 4303/    1520 : 00 00 00 00         	db 00h,00h,00h,00h	; 40 - flags to indicate hardware should be updated
(1) 4304/    1524 : 00 00 00 00         	db 00h,00h,00h,00h	; 44 - timer for sustain
(1) 4305/    1528 : 00 00 00 00         	db 00h,00h,00h,00h	; 48 - MAX Volume
(1) 4306/    152C : 00 00 00 00         	db 00h,00h,00h,00h	; 52 - Vibrato value
(1) 4307/    1530 : 00 00 00 00         	db 00h,00h,00h,00h	; 56 - General timer
(1) 4308/    1534 :                     
(1) 4309/    1534 :                     ; --------------------------------------------------------
(1) 4310/    1534 :                     ; FM instrument storage
(1) 4311/    1534 :                     fmcach_1	ds 28h
(1) 4312/    155C :                     fmcach_2	ds 28h
(1) 4313/    1584 :                     fmcach_3	ds 28h
(1) 4314/    15AC :                     fmcach_4	ds 28h
(1) 4315/    15D4 :                     fmcach_5	ds 28h
(1) 4316/    15FC :                     fmcach_6	ds 28h
(1) 4317/    1624 :                     
(1) 4318/    1624 :                     ; --------------------------------------------------------
(1) 4319/    1624 :                     ; * USER customizable section *
(1) 4320/    1624 :                     ;
(1) 4321/    1624 :                     ; trkCach's MUST BE 00h ALIGNED.
(1) 4322/    1624 :                     ; --------------------------------------------------------
(1) 4323/    1624 :                     
(1) 4324/    1624 :                     trkHdrs_0	ds 8*4			; dw point,rowcntr
(1) 4325/    1644 :                     trkHdrs_1	ds 8*4
(1) 4326/    1664 :                     trkHdrs_2	ds 8*4
(1) 4327/    1684 :                     trkHdrs_3	ds 8*4
(1) 4328/    16A4 :                     trkBlks_0	ds 8
(1) 4329/    16AC :                     trkBlks_1	ds 8
(1) 4330/    16B4 :                     trkBlks_2	ds 8
(1) 4331/    16BC :                     trkBlks_3	ds 8
(1) 4332/    16C4 :                     trkBuff_0	ds trk_ChnIndx+MAX_TRKINDX
(1) 4333/    1704 :                     trkBuff_1	ds trk_ChnIndx+MAX_TRKINDX
(1) 4334/    1744 :                     trkBuff_2	ds trk_ChnIndx+MAX_TRKINDX
(1) 4335/    1784 :                     trkBuff_3	ds trk_ChnIndx+MAX_TRKINDX
(1) 4336/    17C4 :                     
(1) 4337/    17C4 :                     ; ====================================================================
(1) 4338/    17C4 :                     ; --------------------------------------------------------
(1) 4339/    17C4 :                     ; Channel table struct:
(1) 4340/    17C4 :                     ; 00  - DIRECT Linked channel from trkChnls
(1) 4341/    17C4 :                     ; 02  - 00h-7Fh: Priority level or 80h+ Silence request (chip ID)
(1) 4342/    17C4 :                     ; 03  - MASTER Volume for this channel
(1) 4343/    17C4 :                     ; 04  - Chip index (YM2612: KEY index)
(1) 4344/    17C4 :                     ; 05  - FREE
(1) 4345/    17C4 :                     ; 06  - Frequency list index (YM2612: %oooiiiii oct|index)
(1) 4346/    17C4 :                     ; 07  - Pitchbend add/sub
(1) 4347/    17C4 :                     ; 08  - Current volume: 00-max
(1) 4348/    17C4 :                     ; 09  - Stored effect setting
(1) 4349/    17C4 :                     ; 0A  - FREE
(1) 4350/    17C4 :                     ; 0B  - FREE
(1) 4351/    17C4 :                     ; 0C+ - Misc. settings for the current chip
(1) 4352/    17C4 :                     ; 10+ - Intrument data
(1) 4353/    17C4 :                     ;
(1) 4354/    17C4 :                     ; PSG   80h
(1) 4355/    17C4 :                     ; PSGN  90h
(1) 4356/    17C4 :                     ; FM   0A0h
(1) 4357/    17C4 :                     ; FM3  0B0h
(1) 4358/    17C4 :                     ; DAC  0C0h
(1) 4359/    17C4 :                     ; PCM  0D0h
(1) 4360/    17C4 :                     ; PWM  0E0h
(1) 4361/    17C4 :                     ; --------------------------------------------------------
(1) 4362/    17C4 :                     
(1) 4363/    1A00 :                     		org 1A00h	; <-- MUST BE 00h ALIGNED
(1) 4364/    1A00 : 10 00               tblList:	dw tblPSG-tblList		;  80h
(1) 4365/    1A02 : 5A 80               		dw tblPSGN-tblList|8000h	;  90h *
(1) 4366/    1A04 : 72 00               		dw tblFM-tblList		; 0A0h
(1) 4367/    1A06 : D2 80               		dw tblFM3-tblList|8000h		; 0B0h *
(1) 4368/    1A08 : EA 80               		dw tblFM6-tblList|8000h		; 0C0h *
(1) 4369/    1A0A : 04 01               		dw tblPCM-tblList		; 0D0h
(1) 4370/    1A0C : C6 01               		dw tblPWM-tblList		; 0E0h
(1) 4371/    1A0E : 00 00               		dw 0
(1) 4372/    1A10 : 00 00 00 00 00 00   tblPSG:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             1A16 : 00 00             
(1) 4373/    1A18 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A1E : 00 00             
(1) 4374/    1A20 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A26 : 00 00             
(1) 4375/    1A28 : 00 00 00 00 01 00   		db 00h,00h,00h,00h,01h,00h,00h,00h	; Channel 2
             1A2E : 00 00             
(1) 4376/    1A30 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A36 : 00 00             
(1) 4377/    1A38 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A3E : 00 00             
(1) 4378/    1A40 : 00 00 00 00 02 00   		db 00h,00h,00h,00h,02h,00h,00h,00h	; Channel 3
             1A46 : 00 00             
(1) 4379/    1A48 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A4E : 00 00             
(1) 4380/    1A50 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A56 : 00 00             
(1) 4381/    1A58 : FF FF               		dw -1	; end-of-list
(1) 4382/    1A5A : 00 00 00 00 03 00   tblPSGN:	db 00h,00h,00h,00h,03h,00h,00h,03h	; Noise
             1A60 : 00 03             
(1) 4383/    1A62 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A68 : 00 00             
(1) 4384/    1A6A : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A70 : 00 00             
(1) 4385/    1A72 : 00 00 00 00 00 00   tblFM:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             1A78 : 00 00             
(1) 4386/    1A7A : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A80 : 00 00             
(1) 4387/    1A82 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A88 : 00 00             
(1) 4388/    1A8A : 00 00 00 00 01 00   		db 00h,00h,00h,00h,01h,00h,00h,00h	; Channel 2
             1A90 : 00 00             
(1) 4389/    1A92 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A98 : 00 00             
(1) 4390/    1A9A : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1AA0 : 00 00             
(1) 4391/    1AA2 : 00 00 00 00 04 00   		db 00h,00h,00h,00h,04h,00h,00h,00h	; Channel 4 <--
             1AA8 : 00 00             
(1) 4392/    1AAA : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1AB0 : 00 00             
(1) 4393/    1AB2 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1AB8 : 00 00             
(1) 4394/    1ABA : 00 00 00 00 05 00   		db 00h,00h,00h,00h,05h,00h,00h,00h	; Channel 5
             1AC0 : 00 00             
(1) 4395/    1AC2 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1AC8 : 00 00             
(1) 4396/    1ACA : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1AD0 : 00 00             
(1) 4397/    1AD2 : 00 00 00 00 02 00   tblFM3:		db 00h,00h,00h,00h,02h,00h,00h,00h	; Channel 3 <--
             1AD8 : 00 00             
(1) 4398/    1ADA : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1AE0 : 00 00             
(1) 4399/    1AE2 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1AE8 : 00 00             
(1) 4400/    1AEA : 00 00 00 00 06 00   tblFM6:		db 00h,00h,00h,00h,06h,00h,00h,00h	; Channel 6 <--
             1AF0 : 00 00             
(1) 4401/    1AF2 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1AF8 : 00 00             
(1) 4402/    1AFA : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B00 : 00 00             
(1) 4403/    1B02 : FF FF               		dw -1	; end-of-list
(1) 4404/    1B04 : 00 00 00 00 00 00   tblPCM:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             1B0A : 00 00             
(1) 4405/    1B0C : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B12 : 00 00             
(1) 4406/    1B14 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B1A : 00 00             
(1) 4407/    1B1C : 00 00 00 00 01 00   		db 00h,00h,00h,00h,01h,00h,00h,00h	; Channel 2
             1B22 : 00 00             
(1) 4408/    1B24 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B2A : 00 00             
(1) 4409/    1B2C : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B32 : 00 00             
(1) 4410/    1B34 : 00 00 00 00 02 00   		db 00h,00h,00h,00h,02h,00h,00h,00h	; Channel 3
             1B3A : 00 00             
(1) 4411/    1B3C : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B42 : 00 00             
(1) 4412/    1B44 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B4A : 00 00             
(1) 4413/    1B4C : 00 00 00 00 03 00   		db 00h,00h,00h,00h,03h,00h,00h,00h	; Channel 4
             1B52 : 00 00             
(1) 4414/    1B54 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B5A : 00 00             
(1) 4415/    1B5C : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B62 : 00 00             
(1) 4416/    1B64 : 00 00 00 00 04 00   		db 00h,00h,00h,00h,04h,00h,00h,00h	; Channel 5
             1B6A : 00 00             
(1) 4417/    1B6C : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B72 : 00 00             
(1) 4418/    1B74 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B7A : 00 00             
(1) 4419/    1B7C : 00 00 00 00 05 00   		db 00h,00h,00h,00h,05h,00h,00h,00h	; Channel 6
             1B82 : 00 00             
(1) 4420/    1B84 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B8A : 00 00             
(1) 4421/    1B8C : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B92 : 00 00             
(1) 4422/    1B94 : 00 00 00 00 06 00   		db 00h,00h,00h,00h,06h,00h,00h,00h	; Channel 7
             1B9A : 00 00             
(1) 4423/    1B9C : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BA2 : 00 00             
(1) 4424/    1BA4 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BAA : 00 00             
(1) 4425/    1BAC : 00 00 00 00 07 00   		db 00h,00h,00h,00h,07h,00h,00h,00h	; Channel 7
             1BB2 : 00 00             
(1) 4426/    1BB4 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BBA : 00 00             
(1) 4427/    1BBC : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BC2 : 00 00             
(1) 4428/    1BC4 : FF FF               		dw -1	; end-of-list
(1) 4429/    1BC6 : 00 00 00 00 00 00   tblPWM:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             1BCC : 00 00             
(1) 4430/    1BCE : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BD4 : 00 00             
(1) 4431/    1BD6 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BDC : 00 00             
(1) 4432/    1BDE : 00 00 00 00 01 00   		db 00h,00h,00h,00h,01h,00h,00h,00h	; Channel 2
             1BE4 : 00 00             
(1) 4433/    1BE6 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BEC : 00 00             
(1) 4434/    1BEE : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BF4 : 00 00             
(1) 4435/    1BF6 : 00 00 00 00 02 00   		db 00h,00h,00h,00h,02h,00h,00h,00h	; Channel 3
             1BFC : 00 00             
(1) 4436/    1BFE : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C04 : 00 00             
(1) 4437/    1C06 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C0C : 00 00             
(1) 4438/    1C0E : 00 00 00 00 03 00   		db 00h,00h,00h,00h,03h,00h,00h,00h	; Channel 4
             1C14 : 00 00             
(1) 4439/    1C16 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C1C : 00 00             
(1) 4440/    1C1E : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C24 : 00 00             
(1) 4441/    1C26 : 00 00 00 00 04 00   		db 00h,00h,00h,00h,04h,00h,00h,00h	; Channel 5
             1C2C : 00 00             
(1) 4442/    1C2E : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C34 : 00 00             
(1) 4443/    1C36 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C3C : 00 00             
(1) 4444/    1C3E : 00 00 00 00 05 00   		db 00h,00h,00h,00h,05h,00h,00h,00h	; Channel 6
             1C44 : 00 00             
(1) 4445/    1C46 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C4C : 00 00             
(1) 4446/    1C4E : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C54 : 00 00             
(1) 4447/    1C56 : 00 00 00 00 06 00   		db 00h,00h,00h,00h,06h,00h,00h,00h	; Channel 7
             1C5C : 00 00             
(1) 4448/    1C5E : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C64 : 00 00             
(1) 4449/    1C66 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C6C : 00 00             
(1) 4450/    1C6E : FF FF               		dw -1	; end-of-list
(1) 4451/    1C70 :                     
(1) 4452/    1C70 :                     ; ----------------------------------------------------------------
(1) 4453/    1C70 :                     
(1) 4454/    1C70 : 34 15               fmcach_list:	dw fmcach_1
(1) 4455/    1C72 : 5C 15               		dw fmcach_2
(1) 4456/    1C74 : 84 15               		dw fmcach_3
(1) 4457/    1C76 : 00 00               		dw 0		; <-- skipped
(1) 4458/    1C78 : AC 15               		dw fmcach_4
(1) 4459/    1C7A : D4 15               		dw fmcach_5
(1) 4460/    1C7C : FC 15               		dw fmcach_6
(1) 4461/    1C7E :                     
(1) 4462/    1C7E :                     ; ----------------------------------------------------------------
(1) 4463/    1C7E :                     ; Variables to fill this space
(1) 4464/    1C7E : 00                  tickSpSet	db 0		; **
(1) 4465/    1C7F : 00                  tickFlag	db 0		; Tick flag from VBlank
(1) 4466/    1C80 : 00                  tickCnt		db 0		; ** Tick counter (PUT THIS AFTER tickFlag)
(1) 4467/    1C81 : 00                  psgHatMode	db 0		; Current PSGN mode
(1) 4468/    1C82 : 00                  fmSpecial	db 0		; copy of FM3 enable bit
(1) 4469/    1C83 : 00                  dDacFifoMid	db 0		; WAVE play halfway refill flag (00h/80h)
(1) 4470/    1C84 : 00 00 00            dDacPntr	db 0,0,0	; WAVE play current ROM position
(1) 4471/    1C87 : 00 00 00            dDacCntr	db 0,0,0	; WAVE play length counter
(1) 4472/    1C8A : 00                  marsUpd		db 0		; Flag to request a PWM transfer
(1) 4473/    1C8B : 00                  mcdUpd		db 0		; Flag to request a PCM transfer
(1) 4474/    1C8C : 00 00               wave_Start	dw 0		; START: 68k 24-bit pointer
(1) 4475/    1C8E : 00                  		db 0
(1) 4476/    1C8F : 00 00               wave_Len	dw 0		; LENGTH 24-bit
(1) 4477/    1C91 : 00                  		db 0
(1) 4478/    1C92 : 00 00               wave_Loop	dw 0		; LOOP POINT 24-bit
(1) 4479/    1C94 : 00                  		db 0
(1) 4480/    1C95 : 00 01               wave_Pitch	dw 0100h	; 01.00h
(1) 4481/    1C97 : 00                  wave_Flags	db 0		; WAVE playback flags (%10x: 1 loop / 0 no loop)
(1) 4482/    1C98 : 00                  currTickBits	db 0		; Current Tick/Subbeat flags (000000BTb B-beat, T-tick)
(1) 4483/    1C99 : 00                  x68ksrclsb	db 0		; transferRom temporal LSB
(1) 4484/    1C9A : 00                  x68ksrcmid	db 0		; transferRom temporal MID
(1) 4485/    1C9B : 00 00               sbeatAcc	dw 0		; Accumulates on each tick to trigger the sub beats
(1) 4486/    1C9D : D5 00               sbeatPtck	dw 200+13	; Default global subbeats (this-32 for PAL)
(1) 4487/    1C9F :                     headerOut	ds 00Eh		; Temporal storage for 68k pointers
(1) 4488/    1CAD :                     headerOut_e	ds 2		; <-- reverse readpoint
(1) 4489/    1CAF :                     trkInfoCach	;ds 4
(1) 4490/    1CAF :                     sampleHead	;ds 006h
(1) 4491/    1CAF :                     instListOut	ds 8
(1) 4492/    1CB7 :                     
(1) 4493/    1CB7 :                     ; ====================================================================
(1) 4494/    1CB7 :                     ; ----------------------------------------------------------------
(1) 4495/    1CB7 :                     ; Special aligned buffers
(1) 4496/    1CB7 :                     ;
(1) 4497/    1CB7 :                     ; Located at 1D00h
(1) 4498/    1CB7 :                     ; ----------------------------------------------------------------
(1) 4499/    1CB7 :                     
(1) 4500/    1D00 :                     		org 1D00h
(1) 4501/    1D00 :                     dWaveBuff	ds 100h		; WAVE data buffer: 100h bytes, updates every 80h
(1) 4502/    1E00 :                     trkChnls	ds 8*MAX_TRKCHN
(1) 4503/    1F00 :                     trkCach_0	ds MAX_RCACH
(1) 4504/    1F20 :                     trkCach_1	ds MAX_RCACH
(1) 4505/    1F40 :                     trkCach_2	ds MAX_RCACH
(1) 4506/    1F60 :                     trkCach_3	ds MAX_RCACH
(1) 4507/    1F80 :                     
(1) 4508/    1F80 :                     ; --------------------------------------------------------
(1) 4509/    1F80 :                     
(1) 4510/    32D0 :                     		dephase
(1) 4511/    32D0 :                     		cpu 68000		; [AS] Return to 68k
(1) 4512/    32D0 :                     		padding off		; [AS] NO padding
(1) 4513/    32D0 :                     		align 2
(1) 4514/    32D0 :                     
     291/    32D0 :                     Z80_CODE_END:
     295/    32D0 :                     
     297/    32D0 :                     
     298/    32D0 :                     ; ===========================================================================
     299/    32D0 :                     ; ----------------------------------------------------------------
     300/    32D0 :                     ; DATA section shared on both Cartridge or Disc
     301/    32D0 :                     ; ----------------------------------------------------------------
     302/    32D0 :                     
     303/    32D0 :                     ; --------------------------------------------------------
     304/    32D0 :                     ; CD/CD32X ISO header and files
     305/    32D0 :                     ; --------------------------------------------------------
     306/    32D0 :                     
     326/    32D0 :                     
     327/    32D0 :                     ; ====================================================================
     328/    32D0 :                     ; --------------------------------------------------------
     329/    32D0 :                     ; SEGA CD SUB-CPU data
     330/    32D0 :                     ; --------------------------------------------------------
     331/    32D0 :                     
     344/    32D0 :                     
     345/    32D0 :                     ; ====================================================================
     346/    32D0 :                     ; ----------------------------------------------------------------
     347/    32D0 :                     ; SH2 code sent to SDRAM area
     348/    32D0 :                     ; ----------------------------------------------------------------
     349/    32D0 :                     
     355/    32D0 :                     MARS_RAMCODE:
     359/    32D0 :                     MARS_RAMCODE_E:
     364/    32D0 :                     
     365/    32D0 :                     ; ====================================================================
     366/    32D0 :                     ; --------------------------------------------------------
     367/    32D0 :                     ; Screen modes
     368/    32D0 :                     ;
     369/    32D0 :                     ; For SegaCD/CD32X these are stored as separate files
     370/    32D0 :                     ; on disc
     371/    32D0 :                     ;
     372/    32D0 :                     ; Usage:
     373/    32D0 :                     ; screen_code START_LABEL,END_LABEL,CODE_PATH
     374/    32D0 :                     ;
     375/    32D0 :                     ; Set your data banks manually on your screen code.
     376/    32D0 :                     ; --------------------------------------------------------
     377/    32D0 :                     
     378/    32D0 : (MACRO)              	screen_code Md_Screen00,Md_Screen00_e,"game/screen_0/code.asm"
     378/    32D0 : =$32D0               MD_SCREEN00 label *
     378/    32D0 :                     
     378/    32D0 :                     mctopscrn:
     378/    32D0 :                     mcscrn_s:
     378/    32D0 :                             include "game/screen_0/code.asm";"game/screen_0/code.asm"
(1)    1/    32D0 :                     ; ===========================================================================
(1)    2/    32D0 :                     ; ----------------------------------------------------------------
(1)    3/    32D0 :                     ; SCREEN CODE
(1)    4/    32D0 :                     ; ----------------------------------------------------------------
(1)    5/    32D0 :                     
(1)    6/    32D0 :                     ; ====================================================================
(1)    7/    32D0 :                     ; ------------------------------------------------------
(1)    8/    32D0 :                     ; Variables
(1)    9/    32D0 :                     ; ------------------------------------------------------
(1)   10/    32D0 :                     
(1)   11/    32D0 : =$440                setVram_Emily		equ $440
(1)   12/    32D0 : =$458                setVram_Doremi		equ $440+(4*6)
(1)   13/    32D0 : =$470                setVram_Sophie		equ $440+((4*6)*2)
(1)   14/    32D0 : =$488                setVram_Nicole		equ $440+((4*6)*3)
(1)   15/    32D0 : =$4A0                setVram_Bibi		equ $4A0
(1)   16/    32D0 :                     
(1)   17/    32D0 :                     ; ====================================================================
(1)   18/    32D0 :                     ; ------------------------------------------------------
(1)   19/    32D0 :                     ; Structs
(1)   20/    32D0 :                     ; ------------------------------------------------------
(1)   21/    32D0 :                     
(1)   22/    32D0 :                     ; 			strct 0
(1)   23/    32D0 :                     ; strc_xpos		ds.w 1
(1)   24/    32D0 :                     ; strc_ypos		ds.w 1
(1)   25/    32D0 :                     ; 			endstrct
(1)   26/    32D0 :                     
(1)   27/    32D0 :                     ; ====================================================================
(1)   28/    32D0 :                     ; ------------------------------------------------------
(1)   29/    32D0 :                     ; This mode's RAM
(1)   30/    32D0 :                     ; ------------------------------------------------------
(1)   31/    32D0 :                     
(1)   32/    32D0 :  (MACRO-2)           			strct RAM_ScrnBuff
(1)   32/    32D0 : =$32D0               GLBL_LASTPC     set *
(1)   32/FFFFFFFFFFFFE32E :                                     dephase
(1)   32/FFFFFFFFFFFFD204 :                                     phase RAM_SCRNBUFF
(1)   32/FFFFFFFFFFFFD204 : =$FFFFFFFFFFFFD204   GLBL_LASTORG    set *
(1)   33/FFFFFFFFFFFFD204 :                     RAM_SC0_Null		ds.l 1
(1)   34/FFFFFFFFFFFFD208 :                     RAM_WhoIAm		ds.l 1
(1)   35/FFFFFFFFFFFFD20C :                     sizeof_thisbuff		ds.l 0
(1)   36/FFFFFFFFFFFFD210 :  (MACRO-2)           			endstrct
(1)   36/FFFFFFFFFFFFD204 :                                     org GLBL_LASTORG
(1)   36/    32D0 :                                     phase GLBL_LASTPC
(1)   37/    32D0 :                     
(1)   38/    32D0 :  (MACRO-2)           	erreport "SCREEN",sizeof_thisbuff-RAM_ScrnBuff,MAX_ScrnBuff
(1)   39/    32D0 :                     
(1)   40/    32D0 :                     ; ====================================================================
(1)   41/    32D0 :                     ; ------------------------------------------------------
(1)   42/    32D0 :                     ; Init
(1)   43/    32D0 :                     ; ------------------------------------------------------
(1)   44/    32D0 :                     
(1)   45/    32D0 : 6100 DF6A           		bsr	Mode_Init
(1)   46/    32D4 :  (MACRO-2)           		set_dbanks file_mddata_def,pointr_marsdata_def
(1)   47/    32D4 :                     
(1)   48/    32D4 :                     	; ----------------------------------------------
(1)   49/    32D4 :                     	; Load assets
(1)   70/    32D4 :                     ; 	if MARS|MARSCD=0
(1)   71/    32D4 :                     ; 		move.l	#Art_Scn0_BG,d0
(1)   72/    32D4 :                     ; 		move.w	#cell_vram($0001),d1
(1)   73/    32D4 :                     ; 		move.w	#Art_Scn0_BG_e-Art_Scn0_BG,d2
(1)   74/    32D4 :                     ; 		bsr	Video_LoadArt
(1)   75/    32D4 :                     ; 		lea	(MAP_Scr0_BG),a0
(1)   76/    32D4 :                     ; 		move.l	#locate(0,0,1),d0
(1)   77/    32D4 :                     ; 		move.l	#map_size(320,224),d1
(1)   78/    32D4 :                     ; 		move.w	#$0001,d2
(1)   79/    32D4 :                     ; 		bsr	Video_LoadMap
(1)   80/    32D4 :                     ; 	endif
(1)   81/    32D4 : 41F9 0004 42D0      		lea	(ASCII_FONT).l,a0
(1)   82/    32DA : 43F9 0000 03E8      		lea	(ASCII_PAL).l,a1
(1)   83/    32E0 : 6100 D71C           		bsr	Video_PrintInit
(1)   84/    32E4 :                     
(1)   85/    32E4 :                     
(1)   86/    32E4 :                     ; 		lea	PAL_SCR0_TEST(pc),a0
(1)   87/    32E4 :                     ; 		moveq	#0,d0
(1)   88/    32E4 :                     ; 		move.w	#16,d1
(1)   89/    32E4 :                     ; 		bsr	Video_FadePal
(1)   90/    32E4 :                     
(1)   91/    32E4 : 41F8 48D2           		lea	(objPal_Emily),a0
(1)   92/    32E8 : 7000                		moveq	#0,d0
(1)   93/    32EA : 323C 0010           		move.w	#16,d1
(1)   94/    32EE : 6100 D1F8           		bsr	Video_FadePal
(1)   95/    32F2 : 41F8 4B4C           		lea	(objPal_Doremi),a0
(1)   96/    32F6 : 7010                		moveq	#16,d0
(1)   97/    32F8 : 323C 0010           		move.w	#16,d1
(1)   98/    32FC : 6100 D1EA           		bsr	Video_FadePal
(1)   99/    3300 : 41F8 4CE0           		lea	(objPal_Sophie),a0
(1)  100/    3304 : 7020                		moveq	#32,d0
(1)  101/    3306 : 323C 0010           		move.w	#16,d1
(1)  102/    330A : 6100 D1DC           		bsr	Video_FadePal
(1)  103/    330E :                     
(1)  104/    330E : 41FA 0404           		lea	str_Scrn0Intro(pc),a0
(1)  105/    3312 : 203C 0000 0101      		move.l	#locate(1,1,0),d0
(1)  106/    3318 : 6100 D70E           		bsr	Video_Print
(1)  107/    331C :                     
(1)  108/    331C : 203C 0000 33D0      		move.l	#Obj_Emily,d0		; IN THIS ORDER
(1)  109/    3322 : 7200                		moveq	#0,d1
(1)  110/    3324 : 6100 D952           		bsr	Objects_Add
(1)  111/    3328 : 203C 0000 35CA      		move.l	#Obj_Bibi,d0
(1)  112/    332E : 7200                		moveq	#0,d1
(1)  113/    3330 : 6100 D946           		bsr	Objects_Add
(1)  114/    3334 : 203C 0000 3524      		move.l	#Obj_Doremi,d0
(1)  115/    333A : 7200                		moveq	#0,d1
(1)  116/    333C : 6100 D93A           		bsr	Objects_Add
(1)  117/    3340 : 203C 0000 3524      		move.l	#Obj_Doremi,d0
(1)  118/    3346 : 7201                		moveq	#1,d1
(1)  119/    3348 : 6100 D92E           		bsr	Objects_Add
(1)  120/    334C : 203C 0000 3524      		move.l	#Obj_Doremi,d0
(1)  121/    3352 : 7202                		moveq	#2,d1
(1)  122/    3354 : 6100 D922           		bsr	Objects_Add
(1)  123/    3358 :                     
(1)  124/    3358 :                     	; ----------------------------------------------
(1)  125/    3358 : 303C 00D6           		move.w	#214,d0
(1)  126/    335C : 6100 D016           		bsr	gemaSetBeats
(1)  127/    3360 : 7000                		moveq	#0,d0
(1)  128/    3362 : 7200                		moveq	#0,d1
(1)  129/    3364 : 7400                		moveq	#0,d2
(1)  130/    3366 : 6100 CF96           		bsr	gemaPlayTrack
(1)  131/    336A :                     ; 	if MCD|MARSCD
(1)  132/    336A :                     ; 		move.w	#$0002,(sysmcd_reg+mcd_dcomm_m).l
(1)  133/    336A :                     ; 		move.w	#$0010,d0
(1)  134/    336A :                     ; 		bsr	System_McdSubTask
(1)  135/    336A :                     ; 	endif
(1)  136/    336A :                     	; ----------------------------------------------
(1)  137/    336A :                     ; 		bsr	.show_me
(1)  138/    336A :                     ; 		bsr	.steal_vars
(1)  139/    336A : 6100 D8B8           		bsr	Objects_Run
(1)  140/    336E : 6100 0342           		bsr	ShowMe_Who
(1)  141/    3372 :                     	; ----------------------------------------------
(1)  142/    3372 : 08F9 0006 FFFF      		bset	#bitDispEnbl,(RAM_VdpRegs+1).l		; Enable display
             3378 : BE57             
(1)  143/    337A : 11FC 0081 BE62      		move.b	#%10000001,(RAM_VdpRegs+$C).w		; H40 + shadow mode
(1)  144/    3380 : 6100 D034           		bsr	Video_Update
(1)  145/    3384 : 6100 D0FE           		bsr	Video_FadeIn
(1)  146/    3388 :                     
(1)  147/    3388 :                     ; ====================================================================
(1)  148/    3388 :                     ; ------------------------------------------------------
(1)  149/    3388 :                     ; Loop
(1)  150/    3388 :                     ; ------------------------------------------------------
(1)  151/    3388 :                     
(1)  152/    3388 :                     .loop:
(1)  153/    3388 : 6100 DC6C           		bsr	System_Render
(1)  154/    338C :                     ; 		vdp_showme $0E0
(1)  155/    338C : 6100 D896           		bsr	Objects_Run
(1)  156/    3390 : 6100 0320           		bsr	ShowMe_Who
(1)  157/    3394 : 3E38 C008           		move.w	(Controller_1+on_press),d7
(1)  158/    3398 : 0807 0007           		btst	#bitJoyStart,d7
(1)  159/    339C : 6602                		bne.s	.snd_test
(1)  160/    339E :                     ; 		vdp_showme $000
(1)  161/    339E : 60E8                		bra.s	.loop
(1)  162/    33A0 :                     .snd_test:
(1)  163/    33A0 : 6100 CF86           		bsr	gemaStopAll
(1)  164/    33A4 : 6100 D104           		bsr	Video_FadeOut
(1)  165/    33A8 : 31FC 0001 C458      		move.w	#1,(RAM_ScreenMode).w
(1)  166/    33AE : 4E75                		rts		; EXIT
(1)  167/    33B0 :                     
(1)  168/    33B0 :                     ; ====================================================================
(1)  169/    33B0 :                     ; ------------------------------------------------------
(1)  170/    33B0 :                     ; DATA assets locations for 68K and SH2
(1)  171/    33B0 :                     ; ------------------------------------------------------
(1)  172/    33B0 :                     
(1)  173/    33B0 :                     file_mddata_def:
(1)  174/    33B0 : 4441 5441 424E      		dc.b "DATABNKD.BIN",0		; CD Filename
             33B6 : 4B44 2E42 494E 00 
(1)  175/    33BD :                     		align 2
(1)  176/    33BE :                     pointr_marsdata_def:
(1)  177/    33BE : 0002 0ECE           		dc.l MARSDATA_SCREEN00		; 32X Cartridge point
(1)  178/    33C2 : 4D41 5253 445F      		dc.b "MARSD_00.BIN",0		; CD Filename
             33C8 : 3030 2E42 494E 00 
(1)  179/    33CF :                     		align 2
(1)  180/    33D0 :                     
(1)  181/    33D0 :                     ; ====================================================================
(1)  182/    33D0 :                     ; ------------------------------------------------------
(1)  183/    33D0 :                     ; Objects
(1)  184/    33D0 :                     ; ------------------------------------------------------
(1)  185/    33D0 :                     
(1)  186/    33D0 :                     ; --------------------------------------------------
(1)  187/    33D0 :                     ; Emily
(1)  188/    33D0 :                     ; --------------------------------------------------
(1)  189/    33D0 :                     
(1)  190/    33D0 :                     Obj_Emily:
(1)  191/    33D0 : 7000                		moveq	#0,d0
(1)  192/    33D2 : 102E 0025           		move.b	obj_index(a6),d0
(1)  193/    33D6 : D040                		add.w	d0,d0
(1)  194/    33D8 : 323B 0006           		move.w	.list(pc,d0.w),d1
(1)  195/    33DC : 4EFB 1002           		jmp	.list(pc,d1.w)
(1)  196/    33E0 :                     ; ----------------------------------------------
(1)  197/    33E0 : 0004                .list:		dc.w .init-.list
(1)  198/    33E2 : 004A                		dc.w .main-.list
(1)  199/    33E4 :                     ; ----------------------------------------------
(1)  200/    33E4 :                     .init:
(1)  201/    33E4 : 1D7C 0001 0025      		move.b	#1,obj_index(a6)
(1)  202/    33EA : 2D7C 0000 48E8      		move.l	#objMap_Emily,obj_map(a6)
             33F0 : 000C             
(1)  203/    33F2 : 2D7C 0000 4AA8      		move.l	#objDma_Emily,obj_dma(a6)
             33F8 : 0010             
(1)  204/    33FA : 3D7C 8440 0018      		move.w	#setVram_Emily|$8000,obj_vram(a6)
(1)  205/    3400 : 08AE 0007 0026      		bclr	#bitobj_Mars,obj_set(a6)	; Set as Genesis object
(1)  206/    3406 : 2D7C 0303 0202      		move.l	#$03030202,obj_size(a6)		; UDLR sizes
             340C : 0014             
(1)  207/    340E : 3D7C 00A0 0004      		move.w	#320/2,obj_x(a6)
(1)  208/    3414 : 3D7C 0070 0008      		move.w	#224/2,obj_y(a6)
(1)  209/    341A : 426E 0022           		clr.w	obj_frame(a6)
(1)  210/    341E : 426E 002A           		clr.w	obj_ram(a6)
(1)  211/    3422 : 426E 002C           		clr.w	obj_ram+2(a6)
(1)  212/    3426 : 6100 DAAA           		bsr	object_AnimReset
(1)  213/    342A :                     
(1)  214/    342A :                     ; ----------------------------------------------
(1)  215/    342A :                     .main:
(1)  216/    342A : 4BEE 002A           		lea	obj_ram(a6),a5
(1)  217/    342E : 49F8 C004           		lea	(Controller_1),a4
(1)  218/    3432 :                     
(1)  219/    3432 : 426E 001A           		clr.w	obj_x_spd(a6)
(1)  220/    3436 : 426E 001C           		clr.w	obj_y_spd(a6)
(1)  221/    343A : 382C 0002           		move.w	on_hold(a4),d4
(1)  222/    343E : 0804 0001           		btst	#bitJoyDown,d4
(1)  223/    3442 : 670A                		beq.s	.go_down
(1)  224/    3444 : 3ABC 0000           		move.w	#0,(a5)		; <--
(1)  225/    3448 : 3D7C 0140 001C      		move.w	#$140,obj_y_spd(a6)
(1)  226/    344E :                     .go_down:
(1)  227/    344E : 0804 0000           		btst	#bitJoyUp,d4
(1)  228/    3452 : 670A                		beq.s	.go_up
(1)  229/    3454 : 3ABC 0004           		move.w	#4,(a5)
(1)  230/    3458 : 3D7C FEC0 001C      		move.w	#-$140,obj_y_spd(a6)
(1)  231/    345E :                     .go_up:
(1)  232/    345E : 0804 0003           		btst	#bitJoyRight,d4
(1)  233/    3462 : 670A                		beq.s	.go_r
(1)  234/    3464 : 3ABC 0008           		move.w	#8,(a5)
(1)  235/    3468 : 3D7C 0140 001A      		move.w	#$140,obj_x_spd(a6)
(1)  236/    346E :                     .go_r:
(1)  237/    346E : 0804 0002           		btst	#bitJoyLeft,d4
(1)  238/    3472 : 670A                		beq.s	.go_l
(1)  239/    3474 : 3ABC 000C           		move.w	#$C,(a5)
(1)  240/    3478 : 3D7C FEC0 001A      		move.w	#-$140,obj_x_spd(a6)
(1)  241/    347E :                     .go_l:
(1)  242/    347E : 3015                		move.w	(a5),d0
(1)  243/    3480 : 382C 0002           		move.w	on_hold(a4),d4
(1)  244/    3484 : 0244 000F           		andi.w	#JoyUp+JoyDown+JoyLeft+JoyRight,d4
(1)  245/    3488 : 670A                		beq.s	.stay
(1)  246/    348A : 122D 0002           		move.b	2(a5),d1
(1)  247/    348E : 0241 0003           		andi.w	#%11,d1
(1)  248/    3492 : D041                		add.w	d1,d0
(1)  249/    3494 :                     .stay:
(1)  250/    3494 : 3D40 0022           		move.w	d0,obj_frame(a6)
(1)  251/    3498 : 066D 0020 0002      		addi.w	#$0020,2(a5)		; Speed
(1)  252/    349E : 026D 03FF 0002      		andi.w	#$03FF,2(a5)		; limit
(1)  253/    34A4 : 6100 DA3C           		bsr	object_Speed
(1)  254/    34A8 :                     
(1)  255/    34A8 : 4AAE 0004           		tst.l	obj_x(a6)
(1)  256/    34AC : 6A04                		bpl.s	.x_neg
(1)  257/    34AE : 42AE 0004           		clr.l	obj_x(a6)
(1)  258/    34B2 :                     .x_neg:
(1)  259/    34B2 : 0C6E 0140 0004      		cmp.w	#320,obj_x(a6)
(1)  260/    34B8 : 6D06                		blt.s	.x_posi
(1)  261/    34BA : 3D7C 0140 0004      		move.w	#320,obj_x(a6)
(1)  262/    34C0 :                     .x_posi:
(1)  263/    34C0 : 4AAE 0008           		tst.l	obj_y(a6)
(1)  264/    34C4 : 6A04                		bpl.s	.y_neg
(1)  265/    34C6 : 42AE 0008           		clr.l	obj_y(a6)
(1)  266/    34CA :                     .y_neg:
(1)  267/    34CA : 0C6E 00E0 0008      		cmp.w	#224,obj_y(a6)
(1)  268/    34D0 : 6D06                		blt.s	.y_posi
(1)  269/    34D2 : 3D7C 00E0 0008      		move.w	#224,obj_y(a6)
(1)  270/    34D8 :                     .y_posi:
(1)  271/    34D8 : 42B8 D208           		clr.l	(RAM_WhoIAm).w
(1)  272/    34DC : 6100 DA22           		bsr	object_Collision
(1)  273/    34E0 : 4A80                		tst.l	d0
(1)  274/    34E2 : 6704                		beq.s	.no_one
(1)  275/    34E4 : 21C0 D208           		move.l	d0,(RAM_WhoIAm).w
(1)  276/    34E8 :                     .no_one:
(1)  277/    34E8 : 6000 D8EE           		bra	object_Display
(1)  278/    34EC :                     
(1)  279/    34EC :                     ; ----------------------------------------------
(1)  280/    34EC :                     
(1)  281/    34EC :                     .anim_data:
(1)  282/    34EC : 0008                		dc.w .anim_d-.anim_data
(1)  283/    34EE : 0014                		dc.w .anim_u-.anim_data
(1)  284/    34F0 : 0020                		dc.w .anim_r-.anim_data
(1)  285/    34F2 : 002C                		dc.w .anim_l-.anim_data
(1)  286/    34F4 :                     .anim_d:
(1)  287/    34F4 : 0008                		dc.w 8
(1)  288/    34F6 : 0000 0001 0002      		dc.w 0,1,2,3,-1
             34FC : 0003 FFFF          
(1)  289/    3500 :                     		align 2
(1)  290/    3500 :                     .anim_u:
(1)  291/    3500 : 0008                		dc.w 8
(1)  292/    3502 : 0004 0005 0006      		dc.w 4,5,6,7,-1
             3508 : 0007 FFFF          
(1)  293/    350C :                     		align 2
(1)  294/    350C :                     .anim_r:
(1)  295/    350C : 0008                		dc.w 8
(1)  296/    350E : 0008 0009 000A      		dc.w 8,9,10,11,-1
             3514 : 000B FFFF          
(1)  297/    3518 :                     		align 2
(1)  298/    3518 :                     .anim_l:
(1)  299/    3518 : 0008                		dc.w 8
(1)  300/    351A : 000C 000D 000E      		dc.w 12,13,14,15,-1
             3520 : 000F FFFF          
(1)  301/    3524 :                     		align 2
(1)  302/    3524 :                     
(1)  303/    3524 :                     ; --------------------------------------------------
(1)  304/    3524 :                     ; Doremi, Sophie o Nicole
(1)  305/    3524 :                     ; --------------------------------------------------
(1)  306/    3524 :                     
(1)  307/    3524 :                     Obj_Doremi:
(1)  308/    3524 : 7000                		moveq	#0,d0
(1)  309/    3526 : 102E 0025           		move.b	obj_index(a6),d0
(1)  310/    352A : D040                		add.w	d0,d0
(1)  311/    352C : 323B 0006           		move.w	.list(pc,d0.w),d1
(1)  312/    3530 : 4EFB 1002           		jmp	.list(pc,d1.w)
(1)  313/    3534 :                     ; ----------------------------------------------
(1)  314/    3534 : 0004                .list:		dc.w .init-.list
(1)  315/    3536 : 0048                		dc.w .main-.list
(1)  316/    3538 :                     ; ----------------------------------------------
(1)  317/    3538 :                     .init:
(1)  318/    3538 : 1D7C 0001 0025      		move.b	#1,obj_index(a6)
(1)  319/    353E : 08AE 0007 0026      		bclr	#bitobj_Mars,obj_set(a6)	; Set as Genesis object
(1)  320/    3544 : 2D7C 0303 0202      		move.l	#$03030202,obj_size(a6)		; UDLR sizes
             354A : 0014             
(1)  321/    354C : 102E 0027           		move.b	obj_subid(a6),d0
(1)  322/    3550 : E948                		lsl.w	#4,d0
(1)  323/    3552 : 41FA 0046           		lea	.sub_list(pc),a0
(1)  324/    3556 : D0C0                		adda	d0,a0
(1)  325/    3558 : 2D58 000C           		move.l	(a0)+,obj_map(a6)
(1)  326/    355C : 2D58 0010           		move.l	(a0)+,obj_dma(a6)
(1)  327/    3560 : 3D58 0018           		move.w	(a0)+,obj_vram(a6)
(1)  328/    3564 : 3D58 0004           		move.w	(a0)+,obj_x(a6)
(1)  329/    3568 : 3D58 0008           		move.w	(a0)+,obj_y(a6)
(1)  330/    356C : 3D58 002C           		move.w	(a0)+,obj_ram+2(a6)
(1)  331/    3570 :                     
(1)  332/    3570 : 426E 0022           		clr.w	obj_frame(a6)
(1)  333/    3574 : 426E 002A           		clr.w	obj_ram(a6)
(1)  334/    3578 : 6100 D958           		bsr	object_AnimReset
(1)  335/    357C :                     
(1)  336/    357C :                     ; ----------------------------------------------
(1)  337/    357C :                     .main:
(1)  338/    357C : 7000                		moveq	#0,d0
(1)  339/    357E : 102E 002A           		move.b	obj_ram(a6),d0
(1)  340/    3582 : D06E 002C           		add.w	obj_ram+2(a6),d0
(1)  341/    3586 : 3D40 0022           		move.w	d0,obj_frame(a6)
(1)  342/    358A : 066E 0010 002A      		addi.w	#$0010,obj_ram(a6)		; Speed
(1)  343/    3590 : 026E 01FF 002A      		andi.w	#$01FF,obj_ram(a6)		; limit
(1)  344/    3596 :                     
(1)  345/    3596 : 6000 D840           		bra	object_Display
(1)  346/    359A :                     
(1)  347/    359A :                     ; ----------------------------------------------
(1)  348/    359A :                     
(1)  349/    359A :                     .sub_list:
(1)  350/    359A : 0000 4B6A           		dc.l objMap_Doremi
(1)  351/    359E : 0000 4B92           		dc.l objDma_Doremi
(1)  352/    35A2 : 2458                		dc.w setVram_Doremi|$2000
(1)  353/    35A4 : 003C 005A           		dc.w 60,90
(1)  354/    35A8 : 0000                		dc.w 0
(1)  355/    35AA :                     
(1)  356/    35AA : 0000 4CFE           		dc.l objMap_Sophie
(1)  357/    35AE : 0000 4D76           		dc.l objDma_Sophie
(1)  358/    35B2 : 4470                		dc.w setVram_Sophie|$4000
(1)  359/    35B4 : 0100 003C           		dc.w 256,60
(1)  360/    35B8 : 0000                		dc.w 0
(1)  361/    35BA :                     
(1)  362/    35BA : 0000 4CFE           		dc.l objMap_Sophie
(1)  363/    35BE : 0000 4D76           		dc.l objDma_Sophie
(1)  364/    35C2 : 4488                		dc.w setVram_Nicole|$4000
(1)  365/    35C4 : 0116 00BE           		dc.w 278,190
(1)  366/    35C8 : 0002                		dc.w 2
(1)  367/    35CA :                     
(1)  368/    35CA :                     ; --------------------------------------------------
(1)  369/    35CA :                     ; Bibi
(1)  370/    35CA :                     ; --------------------------------------------------
(1)  371/    35CA :                     
(1)  372/    35CA :                     Obj_Bibi:
(1)  373/    35CA : 7000                		moveq	#0,d0
(1)  374/    35CC : 102E 0025           		move.b	obj_index(a6),d0
(1)  375/    35D0 : D040                		add.w	d0,d0
(1)  376/    35D2 : 323B 0006           		move.w	.list(pc,d0.w),d1
(1)  377/    35D6 : 4EFB 1002           		jmp	.list(pc,d1.w)
(1)  378/    35DA :                     ; ----------------------------------------------
(1)  379/    35DA : 0004                .list:		dc.w .init-.list
(1)  380/    35DC : 004A                		dc.w .main-.list
(1)  381/    35DE :                     ; ----------------------------------------------
(1)  382/    35DE :                     .init:
(1)  383/    35DE : 1D7C 0001 0025      		move.b	#1,obj_index(a6)
(1)  384/    35E4 : 08AE 0007 0026      		bclr	#bitobj_Mars,obj_set(a6)	; Set as Genesis object
(1)  385/    35EA : 2D7C 0203 0202      		move.l	#$02030202,obj_size(a6)		; UDLR sizes
             35F0 : 0014             
(1)  386/    35F2 : 3D7C 0060 0004      		move.w	#(320/2)-64,obj_x(a6)
(1)  387/    35F8 : 3D7C 0030 0008      		move.w	#(224/2)-64,obj_y(a6)
(1)  388/    35FE : 2D7C 0000 4BA6      		move.l	#objMap_Bibi,obj_map(a6)
             3604 : 000C             
(1)  389/    3606 : 2D7C 0000 4C86      		move.l	#objDma_Bibi,obj_dma(a6)
             360C : 0010             
(1)  390/    360E : 3D7C 24A0 0018      		move.w	#setVram_Bibi|$2000,obj_vram(a6)
(1)  391/    3614 : 426E 0022           		clr.w	obj_frame(a6)
(1)  392/    3618 : 426E 002A           		clr.w	obj_ram(a6)
(1)  393/    361C : 426E 002C           		clr.w	obj_ram+2(a6)
(1)  394/    3620 : 6100 D8B0           		bsr	object_AnimReset
(1)  395/    3624 :                     
(1)  396/    3624 :                     ; ----------------------------------------------
(1)  397/    3624 :                     .main:
(1)  398/    3624 : 4BEE 002A           		lea	obj_ram(a6),a5
(1)  399/    3628 : 0455 0001           		sub.w	#1,(a5)
(1)  400/    362C : 6A38                		bpl.s	.keep_moving
(1)  401/    362E : 322D 0002           		move.w	2(a5),d1
(1)  402/    3632 : 1D41 0020           		move.b	d1,obj_anim_id(a6)
(1)  403/    3636 : E549                		lsl.w	#2,d1
(1)  404/    3638 : 41FB 103C           		lea	.set_spds(pc,d1.w),a0
(1)  405/    363C : 3D50 001A           		move.w	(a0),obj_x_spd(a6)
(1)  406/    3640 : 3D68 0002 001C      		move.w	2(a0),obj_y_spd(a6)
(1)  407/    3646 : 08AE 0000 0026      		bclr	#bitobj_flipH,obj_set(a6)
(1)  408/    364C : 4A6E 001A           		tst.w	obj_x_spd(a6)
(1)  409/    3650 : 6B06                		bmi.s	.flip_x
(1)  410/    3652 : 08EE 0000 0026      		bset	#bitobj_flipH,obj_set(a6)
(1)  411/    3658 :                     .flip_x:
(1)  412/    3658 : 526D 0002           		addq.w	#1,2(a5)
(1)  413/    365C : 026D 0003 0002      		andi.w	#%11,2(a5)
(1)  414/    3662 : 3ABC 0100           		move.w	#$100,(a5)		; Reset timer
(1)  415/    3666 :                     .keep_moving:
(1)  416/    3666 : 6100 D87A           		bsr	object_Speed
(1)  417/    366A : 41FA 001A           		lea	.anim_data(pc),a0
(1)  418/    366E : 6100 D7D6           		bsr	object_Animate
(1)  419/    3672 : 6000 D764           		bra	object_Display
(1)  420/    3676 :                     
(1)  421/    3676 :                     ; ----------------------------------------------
(1)  422/    3676 :                     
(1)  423/    3676 :                     .set_spds:
(1)  424/    3676 : 0080 0000           		dc.w  $0080, $0000	; Right
(1)  425/    367A : 0000 0080           		dc.w  $0000, $0080	; Down
(1)  426/    367E : FF80 0000           		dc.w -$0080, $0000	; Left
(1)  427/    3682 : 0000 FF80           		dc.w  $0000,-$0080	; Up
(1)  428/    3686 :                     .anim_data:
(1)  429/    3686 : 0020                		dc.w .walk_lr-.anim_data
(1)  430/    3688 : 0008                		dc.w .walk_d-.anim_data
(1)  431/    368A : 0020                		dc.w .walk_lr-.anim_data
(1)  432/    368C : 0014                		dc.w .walk_u-.anim_data
(1)  433/    368E :                     .walk_d:
(1)  434/    368E : 0009                		dc.w 9
(1)  435/    3690 : 0000 0001 0000      		dc.w 0,1,0,2
             3696 : 0002             
(1)  436/    3698 : FFFF                		dc.w -1
(1)  437/    369A :                     .walk_u:
(1)  438/    369A : 0009                		dc.w 9
(1)  439/    369C : 0003 0004 0003      		dc.w 3,4,3,5
             36A2 : 0005             
(1)  440/    36A4 : FFFF                		dc.w -1
(1)  441/    36A6 :                     .walk_lr:
(1)  442/    36A6 : 0009                		dc.w 9
(1)  443/    36A8 : 0006 0007 0006      		dc.w 6,7,6,8
             36AE : 0008             
(1)  444/    36B0 : FFFF                		dc.w -1
(1)  445/    36B2 :                     
(1)  446/    36B2 :                     ; ====================================================================
(1)  447/    36B2 :                     ; ------------------------------------------------------
(1)  448/    36B2 :                     ; Subroutines
(1)  449/    36B2 :                     ; ------------------------------------------------------
(1)  450/    36B2 :                     
(1)  451/    36B2 :                     ShowMe_Who:
(1)  452/    36B2 : 43FA 00C4           		lea	list_WhoIAm(pc),a1
(1)  453/    36B6 :                     
(1)  454/    36B6 : 2638 D208           		move.l	(RAM_WhoIAm).w,d3
(1)  455/    36BA : 4A83                		tst.l	d3
(1)  456/    36BC : 6728                		beq.s	.nadie
(1)  457/    36BE : 2443                		move.l	d3,a2
(1)  458/    36C0 : 41FA 008E           		lea	str_ListWho(pc),a0
(1)  459/    36C4 :                     .next_one:
(1)  460/    36C4 : 2011                		move.l	(a1),d0
(1)  461/    36C6 : 3229 0004           		move.w	4(a1),d1
(1)  462/    36CA : B0BC FFFF FFFF      		cmp.l	#-1,d0
(1)  463/    36D0 : 6714                		beq.s	.nadie
(1)  464/    36D2 : B092                		cmp.l	obj_code(a2),d0
(1)  465/    36D4 : 6606                		bne.s	.not_this
(1)  466/    36D6 : B22A 0027           		cmp.b	obj_subid(a2),d1
(1)  467/    36DA : 670E                		beq.s	.found
(1)  468/    36DC :                     .not_this:
(1)  469/    36DC : D2FC 0006           		adda	#6,a1
(1)  470/    36E0 : D0FC 0008           		adda	#8,a0
(1)  471/    36E4 : 60DE                		bra.s	.next_one
(1)  472/    36E6 :                     .nadie:
(1)  473/    36E6 : 41FA 0060           		lea	str_Nadie(pc),a0
(1)  474/    36EA :                     .found:
(1)  475/    36EA : 203C 0000 1502      		move.l	#locate(21,2,0),d0
(1)  476/    36F0 : 6000 D336           		bra	Video_Print
(1)  477/    36F4 :                     
(1)  478/    36F4 :                     ; ====================================================================
(1)  479/    36F4 :                     ; ------------------------------------------------------
(1)  480/    36F4 :                     ; Custom VBlank
(1)  481/    36F4 :                     ; ------------------------------------------------------
(1)  482/    36F4 :                     
(1)  483/    36F4 :                     ; ------------------------------------------------------
(1)  484/    36F4 :                     ; Custom HBlank
(1)  485/    36F4 :                     ; ------------------------------------------------------
(1)  486/    36F4 :                     
(1)  487/    36F4 :                     ; ====================================================================
(1)  488/    36F4 :                     ; ------------------------------------------------------
(1)  489/    36F4 :                     ; Small DATA section
(1)  490/    36F4 :                     ; ------------------------------------------------------
(1)  491/    36F4 :                     
(1)  492/    36F4 :                     PAL_SCR0_TEST:
(1)  493/    36F4 :                     		binclude "game/screen_0/data/md/maps/test/md_pal.bin"
(1)  494/    3714 :                     		align 2
(1)  495/    3714 :                     str_Scrn0Intro:
(1)  496/    3714 : 5072 6F62 616E      		dc.b "Probando colision con objectos",$A
             371A : 646F 2063 6F6C 
             3720 : 6973 696F 6E20 
             3726 : 636F 6E20 6F62 
             372C : 6A65 6374 6F73 0A 
(1)  497/    3733 : 456D 696C 6979      		dc.b "Emiliy toca toca a:",0
             3739 : 2074 6F63 6120 
             373F : 746F 6361 2061 
             3745 : 3A00             
(1)  498/    3747 :                     		align 2
(1)  499/    3748 : 4E41 4449 4520      str_Nadie:	dc.b "NADIE  ",0
             374E : 2000             
(1)  500/    3750 : 4269 6269 2020      str_ListWho:	dc.b "Bibi   ",0
             3756 : 2000             
(1)  501/    3758 : 446F 7265 6D69      		dc.b "Doremi ",0
             375E : 2000             
(1)  502/    3760 : 536F 7068 6965      		dc.b "Sophie ",0
             3766 : 2000             
(1)  503/    3768 : 4E69 636F 6C65      		dc.b "Nicole ",0
             376E : 2000             
(1)  504/    3770 : 4E69 6B6F 6E61      		dc.b "Nikona ",0
             3776 : 2000             
(1)  505/    3778 : 0000 35CA           list_WhoIAm:	dc.l Obj_Bibi
(1)  506/    377C : 0000                		dc.w 0
(1)  507/    377E : 0000 3524           		dc.l Obj_Doremi
(1)  508/    3782 : 0000                		dc.w 0
(1)  509/    3784 : 0000 3524           		dc.l Obj_Doremi
(1)  510/    3788 : 0001                		dc.w 1
(1)  511/    378A : 0000 3524           		dc.l Obj_Doremi
(1)  512/    378E : 0002                		dc.w 2
(1)  513/    3790 : FFFF FFFF           		dc.l -1
(1)  514/    3794 : 0000                		dc.w 0
(1)  515/    3796 :                     
(1)  516/    3796 : 5C77 207C 205C      str_ShowMe:	dc.b "\\w | \\w \\w",0
             379C : 7720 5C77 00       
(1)  517/    37A1 : 00FF 0000 00FF      		dc.l $FF0000,$FF0004,$FF0006
             37A7 : 0004 00FF 0006    
(1)  518/    37AD :                     		align 2
(1)  519/    37AE :                     
(1)  520/    37AE :                     ; List_ObjPos:	dc.w 1
(1)  521/    37AE :                     ; 		dc.w 215,164
(1)  522/    37AE :                     ; 		dc.w $4000|setVram_Generic+(4*6)
(1)  523/    37AE :                     ; 		dc.l objMap_Doremi
(1)  524/    37AE :                     ; 		dc.l objDma_Doremi
(1)  525/    37AE :                     ; 		dc.w $70,$40
(1)  526/    37AE :                     ; 		dc.w $4000|setVram_Generic+(4*6)
(1)  527/    37AE :                     ; 		dc.l objMap_Doremi
(1)  528/    37AE :                     ; 		dc.l objDma_Doremi
(1)  529/    37AE :                     ; 		dc.w $50,$80
(1)  530/    37AE :                     ; 		dc.w $4000|setVram_Generic+(4*6)
(1)  531/    37AE :                     ; 		dc.l objMap_Doremi
(1)  532/    37AE :                     ; 		dc.l objDma_Doremi
(1)  533/    37AE :                     ; 		dc.w $30,$C0
(1)  534/    37AE :                     ; 		dc.w $4000|setVram_Generic+(4*6)
(1)  535/    37AE :                     ; 		dc.l objMap_Doremi
(1)  536/    37AE :                     ; 		dc.l objDma_Doremi
(1)  537/    37AE :                     
     378/    37AE :                     mcscrn_e:
     378/    37AE :                     ; Md_Screen00_e:
     378/    37AE : =$37AE               MD_SCREEN00_E label *
     379/    37AE : (MACRO)              	screen_code Md_Screen01,Md_Screen01_e,"game/screen_1/code.asm"
     379/    37AE : =$37AE               MD_SCREEN01 label *
     379/    37AE :                     
     379/    37AE :                     mctopscrn:
     379/    37AE :                     mcscrn_s:
     379/    37AE :                             include "game/screen_1/code.asm";"game/screen_0/code.asm"
(1)    1/    37AE :                     ; ===========================================================================
(1)    2/    37AE :                     ; ----------------------------------------------------------------
(1)    3/    37AE :                     ; SCREEN CODE
(1)    4/    37AE :                     ; ----------------------------------------------------------------
(1)    5/    37AE :                     
(1)    6/    37AE :                     ; ====================================================================
(1)    7/    37AE :                     ; ------------------------------------------------------
(1)    8/    37AE :                     ; Variables
(1)    9/    37AE :                     ; ------------------------------------------------------
(1)   10/    37AE :                     
(1)   11/    37AE : =$440                setVram_Mikami		equ $0440
(1)   12/    37AE : =$480                setVram_Sisi		equ $0480
(1)   13/    37AE :                     
(1)   14/    37AE :                     ; ====================================================================
(1)   15/    37AE :                     ; ------------------------------------------------------
(1)   16/    37AE :                     ; Structs
(1)   17/    37AE :                     ; ------------------------------------------------------
(1)   18/    37AE :                     
(1)   19/    37AE :                     ; 			strct 0
(1)   20/    37AE :                     ; strc_xpos		ds.w 1
(1)   21/    37AE :                     ; strc_ypos		ds.w 1
(1)   22/    37AE :                     ; 			endstrct
(1)   23/    37AE :                     
(1)   24/    37AE :                     ; ====================================================================
(1)   25/    37AE :                     ; ------------------------------------------------------
(1)   26/    37AE :                     ; This mode's RAM
(1)   27/    37AE :                     ; ------------------------------------------------------
(1)   28/    37AE :                     
(1)   29/    37AE :  (MACRO-2)           			strct RAM_ScrnBuff
(1)   29/    37AE : =$37AE               GLBL_LASTPC     set *
(1)   29/FFFFFFFFFFFFD6E2 :                                     dephase
(1)   29/FFFFFFFFFFFFD204 :                                     phase RAM_SCRNBUFF
(1)   29/FFFFFFFFFFFFD204 : =$FFFFFFFFFFFFD204   GLBL_LASTORG    set *
(1)   30/FFFFFFFFFFFFD204 :                     RAM_CurrPick		ds.w 1
(1)   31/FFFFFFFFFFFFD206 :                     RAM_GemaArg0		ds.w 1
(1)   32/FFFFFFFFFFFFD208 :                     RAM_GemaArg1		ds.w 1
(1)   33/FFFFFFFFFFFFD20A :                     RAM_GemaArg2		ds.w 1
(1)   34/FFFFFFFFFFFFD20C :                     RAM_GemaArg3		ds.w 1
(1)   35/FFFFFFFFFFFFD20E :                     RAM_GemaArg4		ds.w 1
(1)   36/FFFFFFFFFFFFD210 :                     RAM_GemaArg5		ds.w 1
(1)   37/FFFFFFFFFFFFD212 :                     RAM_ChnlLinks		ds.w 26
(1)   38/FFFFFFFFFFFFD246 :                     sizeof_thisbuff		ds.l 0
(1)   39/FFFFFFFFFFFFD24C :  (MACRO-2)           			endstrct
(1)   39/FFFFFFFFFFFFD204 :                                     org GLBL_LASTORG
(1)   39/    37AE :                                     phase GLBL_LASTPC
(1)   40/    37AE :                     
(1)   41/    37AE :  (MACRO-2)           	erreport "SCREEN",sizeof_thisbuff-RAM_ScrnBuff,MAX_ScrnBuff
(1)   42/    37AE :                     
(1)   43/    37AE :                     ; ====================================================================
(1)   44/    37AE :                     ; ------------------------------------------------------
(1)   45/    37AE :                     ; Init
(1)   46/    37AE :                     ; ------------------------------------------------------
(1)   47/    37AE :                     
(1)   48/    37AE : 6100 DA8C           		bsr	Mode_Init
(1)   49/    37B2 :  (MACRO-2)           		set_dbanks file_mddata_def,pointr_marsdata_def
(1)   50/    37B2 :                     
(1)   51/    37B2 :                     	; ----------------------------------------------
(1)   52/    37B2 :                     	; Load assets
(1)   74/    37B2 : 203C 0005 30F0      		move.l	#ART_TEST,d0
(1)   75/    37B8 : 323C 0020           		move.w	#cell_vram($0001),d1
(1)   76/    37BC : 343C 8780           		move.w	#ART_TEST_E-ART_TEST,d2
(1)   77/    37C0 : 6100 D042           		bsr	Video_LoadArt
(1)   78/    37C4 : 41F8 51D4           		lea	(MAP_TEST),a0			; long lea
(1)   79/    37C8 : 203C 0001 0000      		move.l	#locate(0,0,1),d0
(1)   80/    37CE : 223C 0027 001B      		move.l	#map_size(320,224),d1
(1)   81/    37D4 : 343C 0001           		move.w	#$0001,d2
(1)   82/    37D8 : 6100 D1CE           		bsr	Video_LoadMap
(1)   84/    37DC : 41F9 0005 24F0      		lea	(ASCII_FONT_S1).l,a0
(1)   85/    37E2 : 43F9 0000 03E8      		lea	(ASCII_PAL).l,a1
(1)   86/    37E8 : 6100 D214           		bsr	Video_PrintInit
(1)   87/    37EC : 203C 0005 B870      		move.l	#Art_Sisi,d0
(1)   88/    37F2 : 323C 9000           		move.w	#cell_vram(setVram_Sisi),d1
(1)   89/    37F6 : 343C 05E0           		move.w	#Art_Sisi_e-Art_Sisi,d2
(1)   90/    37FA : 6100 D008           		bsr	Video_LoadArt
(1)   91/    37FE :                     
(1)   92/    37FE : 41FA 02D2           		lea	PAL_TEST(pc),a0
(1)   93/    3802 : 7000                		moveq	#0,d0
(1)   94/    3804 : 323C 0010           		move.w	#16,d1
(1)   95/    3808 : 6100 CCDE           		bsr	Video_FadePal
(1)   96/    380C : 41F8 5A94           		lea	(objPal_Sisi),a0
(1)   97/    3810 : 7010                		moveq	#16,d0
(1)   98/    3812 : 323C 0010           		move.w	#16,d1
(1)   99/    3816 : 6100 CCD0           		bsr	Video_FadePal
(1)  100/    381A : 41FA 02D2           		lea	str_TesterInit(pc),a0
(1)  101/    381E : 203C 0000 0101      		move.l	#locate(1,1,0),d0
(1)  102/    3824 : 6100 D202           		bsr	Video_Print
(1)  103/    3828 :                     ; 		move.l	#Object_Mikami,d0
(1)  104/    3828 :                     ; 		moveq	#0,d1
(1)  105/    3828 :                     ; 		bsr	Objects_Set
(1)  106/    3828 : 203C 0000 3A5C      		move.l	#Object_Sisi,d0
(1)  107/    382E : 6100 D448           		bsr	Objects_Add
(1)  108/    3832 :                     	; ----------------------------------------------
(1)  109/    3832 : 4278 D206           		clr.w	(RAM_GemaArg0).w
(1)  110/    3836 : 4278 D208           		clr.w	(RAM_GemaArg1).w
(1)  111/    383A : 4278 D20A           		clr.w	(RAM_GemaArg2).w
(1)  112/    383E : 4278 D20C           		clr.w	(RAM_GemaArg3).w
(1)  113/    3842 : 4278 D20E           		clr.w	(RAM_GemaArg4).w
(1)  114/    3846 : 4278 D210           		clr.w	(RAM_GemaArg5).w
(1)  115/    384A : 303C 00E8           		move.w	#200+32,d0
(1)  116/    384E : 6100 CB24           		bsr	gemaSetBeats
(1)  117/    3852 :                     ; 		moveq	#1,d0
(1)  118/    3852 :                     ; 		bsr	gemaPlayTrack
(1)  119/    3852 :                     
(1)  120/    3852 :                     	; ----------------------------------------------
(1)  121/    3852 : 6100 008C           		bsr	.show_me
(1)  122/    3856 :                     ; 		bsr	.steal_vars
(1)  123/    3856 : 6100 D3CC           		bsr	Objects_Run
(1)  124/    385A :                     	; ----------------------------------------------
(1)  125/    385A : 08F9 0006 FFFF      		bset	#bitDispEnbl,(RAM_VdpRegs+1).l		; Enable display
             3860 : BE57             
(1)  126/    3862 : 11FC 0081 BE62      		move.b	#%10000001,(RAM_VdpRegs+$C).w		; H40 + shadow mode
(1)  127/    3868 : 6100 CB4C           		bsr	Video_Update
(1)  128/    386C : 6100 CC16           		bsr	Video_FadeIn
(1)  129/    3870 :                     
(1)  130/    3870 :                     ; ====================================================================
(1)  131/    3870 :                     ; ------------------------------------------------------
(1)  132/    3870 :                     ; Loop
(1)  133/    3870 :                     ; ------------------------------------------------------
(1)  134/    3870 :                     
(1)  135/    3870 :                     .loop:
(1)  136/    3870 : 6100 D784           		bsr	System_Render
(1)  137/    3874 :                     
(1)  138/    3874 :                     ; 		bsr	.steal_vars
(1)  139/    3874 : 6100 D3AE           		bsr	Objects_Run
(1)  140/    3878 : 41FA 0360           		lea	str_Info(pc),a0
(1)  141/    387C : 203C 0000 1F1A      		move.l	#locate(31,26,0),d0
(1)  142/    3882 : 6100 D1A4           		bsr	Video_Print
(1)  143/    3886 :                     
(1)  144/    3886 :                     	; Controls
(1)  157/    3886 :                     
(1)  158/    3886 : 4DF8 C004           		lea	(Controller_1).w,a6
(1)  159/    388A : 4BF8 D204           		lea	(RAM_CurrPick).w,a5
(1)  160/    388E :                     	; UP/DOWN
(1)  161/    388E : 3E2E 0002           		move.w	on_hold(a6),d7
(1)  162/    3892 : 0807 0004           		btst	#bitJoyB,d7
(1)  163/    3896 : 6626                		bne.s.	.n_up
(1)  164/    3898 : 3E2E 0004           		move.w	on_press(a6),d7
(1)  165/    389C : 0807 0001           		btst	#bitJoyDown,d7
(1)  166/    38A0 : 670A                		beq.s	.n_down
(1)  167/    38A2 : 0C55 0007           		cmp.w	#7,(a5)		; MAX OPTIONS
(1)  168/    38A6 : 6704                		beq.s	.n_down
(1)  169/    38A8 : 5255                		addq.w	#1,(a5)
(1)  170/    38AA : 6134                		bsr.s	.show_me
(1)  171/    38AC :                     .n_down:
(1)  172/    38AC : 3E2E 0004           		move.w	on_press(a6),d7
(1)  173/    38B0 : 0807 0000           		btst	#bitJoyUp,d7
(1)  174/    38B4 : 6708                		beq.s	.n_up
(1)  175/    38B6 : 4A55                		tst.w	(a5)
(1)  176/    38B8 : 6704                		beq.s	.n_up
(1)  177/    38BA : 5355                		subq.w	#1,(a5)
(1)  178/    38BC : 6122                		bsr.s	.show_me
(1)  179/    38BE :                     .n_up:
(1)  180/    38BE : 3E38 D204           		move.w	(RAM_CurrPick).w,d7
(1)  181/    38C2 : E54F                		lsl.w	#2,d7
(1)  182/    38C4 : 4EBB 7028           		jsr	.jump_list(pc,d7.w)
(1)  183/    38C8 : 4A78 C458           		tst.w	(RAM_ScreenMode).w	; Check -1
(1)  184/    38CC : 6A10                		bpl.s	.n_cbtn
(1)  185/    38CE : 6100 CBDA           		bsr	Video_FadeOut
(1)  186/    38D2 : 6100 CA54           		bsr	gemaStopAll
(1)  187/    38D6 : 31FC 0000 C458      		move.w	#0,(RAM_ScreenMode).w	; Return to mode 0
(1)  188/    38DC : 4E75                		rts				; EXIT
(1)  189/    38DE :                     .n_cbtn:
(1)  190/    38DE : 6090                		bra	.loop
(1)  191/    38E0 :                     ; ------------------------------------------------------
(1)  192/    38E0 :                     
(1)  193/    38E0 :                     .show_me:
(1)  194/    38E0 : 41FA 02CC           		lea	str_ShowMe(pc),a0
(1)  195/    38E4 : 203C 0000 1705      		move.l	#locate(23,5,0),d0
(1)  196/    38EA : 6000 D13C           		bra	Video_Print
(1)  197/    38EE :                     
(1)  198/    38EE :                     ; ------------------------------------------------------
(1)  199/    38EE :                     
(1)  200/    38EE :                     .jump_list:
(1)  201/    38EE : 6000 001E           		bra.w	.nothing
(1)  202/    38F2 : 6000 002C           		bra.w	.option_1
(1)  203/    38F6 : 6000 00AE           		bra.w	.option_2
(1)  204/    38FA : 6000 00C0           		bra.w	.option_3
(1)  205/    38FE : 6000 00D2           		bra.w	.option_4
(1)  206/    3902 : 6000 00E6           		bra.w	.option_5
(1)  207/    3906 : 6000 0006           		bra.w	.nothing
(1)  208/    390A : 6000 00F2           		bra.w	.option_7
(1)  209/    390E :                     
(1)  210/    390E :                     ; ------------------------------------------------------
(1)  211/    390E :                     ; OPTION 0
(1)  212/    390E :                     ; ------------------------------------------------------
(1)  213/    390E :                     
(1)  214/    390E :                     .nothing:
(1)  215/    390E : 3E2E 0004           		move.w	on_press(a6),d7
(1)  216/    3912 : 0807 0007           		btst	#bitJoyStart,d7
(1)  217/    3916 : 6706                		beq.s	.no_press
(1)  218/    3918 : 61C6                		bsr.s	.show_me
(1)  219/    391A : 6000 C9CA           		bra	gemaTest
(1)  220/    391E :                     .no_press:
(1)  221/    391E : 4E75                		rts
(1)  222/    3920 :                     
(1)  223/    3920 :                     ; ------------------------------------------------------
(1)  224/    3920 :                     ; OPTION 1
(1)  225/    3920 :                     ; ------------------------------------------------------
(1)  226/    3920 :                     
(1)  227/    3920 :                     .option_1:
(1)  228/    3920 : 4BF8 D206           		lea	(RAM_GemaArg0).w,a5
(1)  229/    3924 : 3E2E 0004           		move.w	on_press(a6),d7
(1)  230/    3928 : 0807 0007           		btst	#bitJoyStart,d7
(1)  231/    392C : 671E                		beq.s	.option1_args
(1)  232/    392E : 301D                		move.w	(a5)+,d0
(1)  233/    3930 : 321D                		move.w	(a5)+,d1
(1)  234/    3932 : 341D                		move.w	(a5)+,d2
(1)  235/    3934 : 6100 C9C8           		bsr	gemaPlayTrack
(1)  236/    3938 : 3038 D208           		move.w	(RAM_GemaArg1).w,d0
(1)  237/    393C : 3200                		move.w	d0,d1
(1)  238/    393E : D241                		add.w	d1,d1
(1)  239/    3940 : 41FA 00CE           		lea	.extnal_beats(pc),a0
(1)  240/    3944 : 3030 1000           		move.w	(a0,d1.w),d0
(1)  241/    3948 : 6000 CA2A           		bra	gemaSetBeats
(1)  242/    394C :                     ; 		bra.s	.show_me
(1)  243/    394C :                     .option1_args:
(1)  244/    394C : 3E2E 0002           		move.w	on_hold(a6),d7
(1)  245/    3950 : 3C07                		move.w	d7,d6
(1)  246/    3952 : 0246 0070           		andi.w	#JoyA+JoyB+JoyC,d6
(1)  247/    3956 : 67C6                		beq.s	.no_press
(1)  248/    3958 : 0807 0004           		btst	#bitJoyB,d7
(1)  249/    395C : 6704                		beq.s	.d2_opt
(1)  250/    395E : DAFC 0002           		adda	#2,a5
(1)  251/    3962 :                     .d2_opt:
(1)  252/    3962 : 0807 0005           		btst	#bitJoyC,d7
(1)  253/    3966 : 6704                		beq.s	.d3_opt
(1)  254/    3968 : DAFC 0004           		adda	#4,a5
(1)  255/    396C :                     .d3_opt:
(1)  256/    396C : 3E2E 0004           		move.w	on_press(a6),d7
(1)  257/    3970 : 0807 0003           		btst	#bitJoyRight,d7
(1)  258/    3974 : 6706                		beq.s	.op1_right
(1)  259/    3976 : 5255                		addq.w	#1,(a5)
(1)  260/    3978 : 6000 FF66           		bra	.show_me
(1)  261/    397C :                     .op1_right:
(1)  262/    397C : 0807 0002           		btst	#bitJoyLeft,d7
(1)  263/    3980 : 6706                		beq.s	.op1_left
(1)  264/    3982 : 5355                		subq.w	#1,(a5)
(1)  265/    3984 : 6000 FF5A           		bra	.show_me
(1)  266/    3988 :                     .op1_left:
(1)  267/    3988 : 3E2E 0002           		move.w	on_hold(a6),d7
(1)  268/    398C : 0807 0000           		btst	#bitJoyUp,d7
(1)  269/    3990 : 6706                		beq.s	.op1_down
(1)  270/    3992 : 5255                		addq.w	#1,(a5)
(1)  271/    3994 : 6000 FF4A           		bra	.show_me
(1)  272/    3998 :                     .op1_down:
(1)  273/    3998 : 0807 0001           		btst	#bitJoyDown,d7
(1)  274/    399C : 6706                		beq.s	.op1_up
(1)  275/    399E : 5355                		subq.w	#1,(a5)
(1)  276/    39A0 : 6000 FF3E           		bra	.show_me
(1)  277/    39A4 :                     .op1_up:
(1)  278/    39A4 :                     
(1)  279/    39A4 : 4E75                		rts
(1)  280/    39A6 :                     
(1)  281/    39A6 :                     ; ------------------------------------------------------
(1)  282/    39A6 :                     ; OPTION 2
(1)  283/    39A6 :                     ; ------------------------------------------------------
(1)  284/    39A6 :                     
(1)  285/    39A6 :                     .option_2:
(1)  286/    39A6 : 4BF8 D206           		lea	(RAM_GemaArg0).w,a5
(1)  287/    39AA : 3E2E 0004           		move.w	on_press(a6),d7
(1)  288/    39AE : 0807 0007           		btst	#bitJoyStart,d7
(1)  289/    39B2 : 6798                		beq.s	.option1_args
(1)  290/    39B4 : 301D                		move.w	(a5)+,d0
(1)  291/    39B6 : 321D                		move.w	(a5)+,d1
(1)  292/    39B8 : 6000 C95A           		bra	gemaStopTrack
(1)  293/    39BC :                     
(1)  294/    39BC :                     ; ------------------------------------------------------
(1)  295/    39BC :                     ; OPTION 3
(1)  296/    39BC :                     ; ------------------------------------------------------
(1)  297/    39BC :                     
(1)  298/    39BC :                     .option_3:
(1)  299/    39BC : 4BF8 D20C           		lea	(RAM_GemaArg3).w,a5
(1)  300/    39C0 : 3E2E 0004           		move.w	on_press(a6),d7
(1)  301/    39C4 : 0807 0007           		btst	#bitJoyStart,d7
(1)  302/    39C8 : 6782                		beq	.option1_args
(1)  303/    39CA : 301D                		move.w	(a5)+,d0
(1)  304/    39CC : 321D                		move.w	(a5)+,d1
(1)  305/    39CE : 6000 C96E           		bra	gemaFadeTrack
(1)  306/    39D2 :                     
(1)  307/    39D2 :                     ; ------------------------------------------------------
(1)  308/    39D2 :                     ; OPTION 4
(1)  309/    39D2 :                     ; ------------------------------------------------------
(1)  310/    39D2 :                     
(1)  311/    39D2 :                     .option_4:
(1)  312/    39D2 : 4BF8 D20C           		lea	(RAM_GemaArg3).w,a5
(1)  313/    39D6 : 3E2E 0004           		move.w	on_press(a6),d7
(1)  314/    39DA : 0807 0007           		btst	#bitJoyStart,d7
(1)  315/    39DE : 6700 FF6C           		beq	.option1_args
(1)  316/    39E2 : 301D                		move.w	(a5)+,d0
(1)  317/    39E4 : 321D                		move.w	(a5)+,d1
(1)  318/    39E6 : 6000 C970           		bra	gemaSetTrackVol
(1)  319/    39EA :                     
(1)  320/    39EA :                     ; ------------------------------------------------------
(1)  321/    39EA :                     ; OPTION 5
(1)  322/    39EA :                     ; ------------------------------------------------------
(1)  323/    39EA :                     
(1)  324/    39EA :                     .option_5:
(1)  325/    39EA : 3E2E 0004           		move.w	on_press(a6),d7
(1)  326/    39EE : 0807 0007           		btst	#bitJoyStart,d7
(1)  327/    39F2 : 6708                		beq.s	.no_press2
(1)  328/    39F4 : 6100 FEEA           		bsr	.show_me
(1)  329/    39F8 : 6000 C92E           		bra	gemaStopAll
(1)  330/    39FC :                     .no_press2:
(1)  331/    39FC : 4E75                		rts
(1)  332/    39FE :                     
(1)  333/    39FE :                     ; ------------------------------------------------------
(1)  334/    39FE :                     ; OPTION 7
(1)  335/    39FE :                     ; ------------------------------------------------------
(1)  336/    39FE :                     
(1)  337/    39FE :                     .option_7:
(1)  338/    39FE : 3E2E 0004           		move.w	on_press(a6),d7
(1)  339/    3A02 : 0807 0007           		btst	#bitJoyStart,d7
(1)  340/    3A06 : 67F4                		beq.s	.no_press2
(1)  341/    3A08 : 31FC FFFF C458      		move.w	#-1,(RAM_ScreenMode).w	; risky but whatever.
(1)  342/    3A0E : 4E75                		rts
(1)  343/    3A10 :                     
(1)  344/    3A10 :                     ; ------------------------------------------------------
(1)  345/    3A10 :                     ; EXTERNAL BEATS FOR EACH TRACK
(1)  346/    3A10 :                     ; ------------------------------------------------------
(1)  347/    3A10 :                     
(1)  348/    3A10 :                     .extnal_beats:
(1)  349/    3A10 : 00E8                	dc.w 200+32
(1)  350/    3A12 : 00DC                	dc.w 200+20
(1)  351/    3A14 : 00E8                	dc.w 200+32
(1)  352/    3A16 : 00E8                	dc.w 200+32
(1)  353/    3A18 : 00E8                	dc.w 200+32
(1)  354/    3A1A : 00CC                	dc.w 200+4
(1)  355/    3A1C : 00E8                	dc.w 200+32
(1)  356/    3A1E : 00E8                	dc.w 200+32
(1)  357/    3A20 : 00E8                	dc.w 200+32
(1)  358/    3A22 : 00E8                	dc.w 200+32
(1)  359/    3A24 : 00E8                	dc.w 200+32
(1)  360/    3A26 : 00E8                	dc.w 200+32
(1)  361/    3A28 : 00E8                	dc.w 200+32
(1)  362/    3A2A : 00E8                	dc.w 200+32
(1)  363/    3A2C : 00E8                	dc.w 200+32
(1)  364/    3A2E : 00E8                	dc.w 200+32
(1)  365/    3A30 : 00E8                	dc.w 200+32
(1)  366/    3A32 : 00E8                	dc.w 200+32
(1)  367/    3A34 : 00E8                	dc.w 200+32
(1)  368/    3A36 : 00E8                	dc.w 200+32
(1)  369/    3A38 : 00E8                	dc.w 200+32
(1)  370/    3A3A : 00E8                	dc.w 200+32
(1)  371/    3A3C :                     
(1)  372/    3A3C :                     ; ====================================================================
(1)  373/    3A3C :                     ; ------------------------------------------------------
(1)  374/    3A3C :                     ; DATA assets locations for 68K and SH2
(1)  375/    3A3C :                     ; ------------------------------------------------------
(1)  376/    3A3C :                     
(1)  377/    3A3C :                     file_mddata_def:
(1)  378/    3A3C : 4441 5441 424E      		dc.b "DATABNKD.BIN",0		; CD Filename
             3A42 : 4B44 2E42 494E 00 
(1)  379/    3A49 :                     		align 2
(1)  380/    3A4A :                     pointr_marsdata_def:
(1)  381/    3A4A : 0003 26D0           		dc.l MARSDATA_SCREEN01		; 32X Cartridge point
(1)  382/    3A4E : 4D41 5253 445F      		dc.b "MARSD_01.BIN",0		; CD Filename
             3A54 : 3031 2E42 494E 00 
(1)  383/    3A5B :                     		align 2
(1)  384/    3A5C :                     
(1)  385/    3A5C :                     ; ====================================================================
(1)  386/    3A5C :                     ; ------------------------------------------------------
(1)  387/    3A5C :                     ; Objects
(1)  388/    3A5C :                     ; ------------------------------------------------------
(1)  389/    3A5C :                     
(1)  390/    3A5C :                     ; ; --------------------------------------------------
(1)  391/    3A5C :                     ; ; Mikami
(1)  392/    3A5C :                     ; ; --------------------------------------------------
(1)  393/    3A5C :                     ;
(1)  394/    3A5C :                     ; Object_Mikami:
(1)  395/    3A5C :                     ; 		moveq	#0,d0
(1)  396/    3A5C :                     ; 		move.b	obj_index(a6),d0
(1)  397/    3A5C :                     ; 		add.w	d0,d0
(1)  398/    3A5C :                     ; 		move.w	.list(pc,d0.w),d1
(1)  399/    3A5C :                     ; 		jmp	.list(pc,d1.w)
(1)  400/    3A5C :                     ; ; ----------------------------------------------
(1)  401/    3A5C :                     ; .list:		dc.w .init-.list
(1)  402/    3A5C :                     ; 		dc.w .main-.list
(1)  403/    3A5C :                     ; ; ----------------------------------------------
(1)  404/    3A5C :                     ; .init:
(1)  405/    3A5C :                     ; 		move.b	#1,obj_index(a6)
(1)  406/    3A5C :                     ; 		move.l	#objMap_Mikami,obj_map(a6)
(1)  407/    3A5C :                     ; 		move.l	#objDma_Mikami,obj_dma(a6)
(1)  408/    3A5C :                     ; 		move.w	#setVram_Mikami|$2000,obj_vram(a6)
(1)  409/    3A5C :                     ; 		bclr	#bitobj_Mars,obj_set(a6)	; Genesis object
(1)  410/    3A5C :                     ; 		move.w	#(320/2)+48,obj_x(a6)
(1)  411/    3A5C :                     ; 		move.w	#(224/2)+64,obj_y(a6)
(1)  412/    3A5C :                     ; 		clr.w	obj_frame(a6)
(1)  413/    3A5C :                     ; 		bsr	object_AnimReset
(1)  414/    3A5C :                     ; 		bset	#0,obj_status(a6)
(1)  415/    3A5C :                     ; 		bset	#bitobj_flipH,obj_set(a6)
(1)  416/    3A5C :                     ;
(1)  417/    3A5C :                     ; ; ----------------------------------------------
(1)  418/    3A5C :                     ; .main:
(1)  419/    3A5C :                     ; 		lea	(Controller_2),a3
(1)  420/    3A5C :                     ; 		btst	#0,obj_status(a6)
(1)  421/    3A5C :                     ; 		beq.s	.no_fallspd
(1)  422/    3A5C :                     ; 		add.w	#$40,obj_y_spd(a6)
(1)  423/    3A5C :                     ; .no_fallspd:
(1)  424/    3A5C :                     ;
(1)  425/    3A5C :                     ; ; .fake_col_c:
(1)  426/    3A5C :                     ; 		move.w	on_press(a3),d7
(1)  427/    3A5C :                     ; 		btst	#bitJoyC,d7
(1)  428/    3A5C :                     ; 		beq.s	.fake_jump
(1)  429/    3A5C :                     ; 		btst	#0,obj_status(a6)
(1)  430/    3A5C :                     ; 		bne.s	.fake_jump
(1)  431/    3A5C :                     ; 		move.w	#-$500,obj_y_spd(a6)
(1)  432/    3A5C :                     ; 		move.b	#2,obj_anim_id(a6)
(1)  433/    3A5C :                     ; 		bset	#0,obj_status(a6)
(1)  434/    3A5C :                     ;
(1)  435/    3A5C :                     ; 		moveq	#$0F,d0
(1)  436/    3A5C :                     ; 		moveq	#1,d1
(1)  437/    3A5C :                     ; 		bsr	gemaPlayFromBlk
(1)  438/    3A5C :                     ;
(1)  439/    3A5C :                     ; .fake_jump:
(1)  440/    3A5C :                     ; 		move.w	on_press(a3),d7
(1)  441/    3A5C :                     ; 		btst	#bitJoyB,d7
(1)  442/    3A5C :                     ; 		beq.s	.no_slash
(1)  443/    3A5C :                     ; 		tst.w	obj_y_spd(a6)
(1)  444/    3A5C :                     ; 		bne.s	.no_slash
(1)  445/    3A5C :                     ; 		clr.w	obj_anim_indx(a6)
(1)  446/    3A5C :                     ; 		move.b	#4,obj_anim_id(a6)
(1)  447/    3A5C :                     ; 		move.w	#$10,obj_ram+2(a6)
(1)  448/    3A5C :                     ;
(1)  449/    3A5C :                     ; 		moveq	#$0F,d0
(1)  450/    3A5C :                     ; 		moveq	#0,d1
(1)  451/    3A5C :                     ; 		bsr	gemaPlayFromBlk
(1)  452/    3A5C :                     ;
(1)  453/    3A5C :                     ; .no_slash:
(1)  454/    3A5C :                     ; 		clr.w	obj_x_spd(a6)
(1)  455/    3A5C :                     ;
(1)  456/    3A5C :                     ; 		moveq	#0,d0
(1)  457/    3A5C :                     ; 		moveq	#0,d1
(1)  458/    3A5C :                     ; 		move.w	on_hold(a3),d7
(1)  459/    3A5C :                     ; 		move.w	d7,d6
(1)  460/    3A5C :                     ; 		andi.w	#JoyLeft+JoyRight,d6
(1)  461/    3A5C :                     ; 		beq.s	.move_mika
(1)  462/    3A5C :                     ; 		clr.w	obj_ram+2(a6)
(1)  463/    3A5C :                     ; 		move.w	#$180,d6
(1)  464/    3A5C :                     ; 		btst	#bitJoyRight,d7
(1)  465/    3A5C :                     ; 		beq.s	.no_l
(1)  466/    3A5C :                     ; 		move.w	d6,obj_x_spd(a6)
(1)  467/    3A5C :                     ; .no_l
(1)  468/    3A5C :                     ; 		neg.w	d6
(1)  469/    3A5C :                     ; 		btst	#bitJoyLeft,d7
(1)  470/    3A5C :                     ; 		beq.s	.move_mika
(1)  471/    3A5C :                     ; 		move.w	d6,obj_x_spd(a6)
(1)  472/    3A5C :                     ; .move_mika:
(1)  473/    3A5C :                     ;
(1)  474/    3A5C :                     ;
(1)  475/    3A5C :                     ; 		moveq	#0,d6
(1)  476/    3A5C :                     ; 		tst.w	obj_x_spd(a6)
(1)  477/    3A5C :                     ; 		beq.s	.r_spd
(1)  478/    3A5C :                     ; 		moveq	#1,d6
(1)  479/    3A5C :                     ; 		move.b	obj_set(a6),d7
(1)  480/    3A5C :                     ; 		bclr	#bitobj_flipH,d7
(1)  481/    3A5C :                     ; 		tst.w	obj_x_spd(a6)
(1)  482/    3A5C :                     ; 		bpl.s	.r_flip
(1)  483/    3A5C :                     ; 		bset	#bitobj_flipH,d7
(1)  484/    3A5C :                     ; .r_flip:
(1)  485/    3A5C :                     ; 		move.b	d7,obj_set(a6)
(1)  486/    3A5C :                     ; .r_spd:
(1)  487/    3A5C :                     ;
(1)  488/    3A5C :                     ; 		tst.w	obj_ram+2(a6)
(1)  489/    3A5C :                     ; 		beq.s	.free_anim
(1)  490/    3A5C :                     ; 		subi.w	#1,obj_ram+2(a6)
(1)  491/    3A5C :                     ; 		bne.s	.no_anim
(1)  492/    3A5C :                     ; .free_anim:
(1)  493/    3A5C :                     ; 		btst	#0,obj_status(a6)
(1)  494/    3A5C :                     ; 		bne.s	.no_anim
(1)  495/    3A5C :                     ; 		tst.w	obj_y_spd(a6)
(1)  496/    3A5C :                     ; 		bmi.s	.is_jumpin
(1)  497/    3A5C :                     ; 		move.b	d6,obj_anim_id(a6)
(1)  498/    3A5C :                     ; .is_jumpin:
(1)  499/    3A5C :                     ; 		tst.w	obj_y_spd(a6)
(1)  500/    3A5C :                     ; 		beq.s	.no_anim
(1)  501/    3A5C :                     ; 		move.b	#3,obj_anim_id(a6)
(1)  502/    3A5C :                     ; .no_anim:
(1)  503/    3A5C :                     ; 		bsr	object_Speed
(1)  504/    3A5C :                     ;
(1)  505/    3A5C :                     ; 		move.w	#(224-16)-32,d7
(1)  506/    3A5C :                     ; 		move.w	obj_y(a6),d0
(1)  507/    3A5C :                     ; 		cmp.w	d7,d0
(1)  508/    3A5C :                     ; 		blt.s	.fake_col
(1)  509/    3A5C :                     ; 		clr.w	obj_y_spd(a6)
(1)  510/    3A5C :                     ; 		andi.w	#-$10,obj_y(a6)
(1)  511/    3A5C :                     ; 		bclr	#0,obj_status(a6)
(1)  512/    3A5C :                     ; .fake_col:
(1)  513/    3A5C :                     ;
(1)  514/    3A5C :                     ; ; 		move.w	(Controller_2+on_press),d7
(1)  515/    3A5C :                     ; ; 		btst	#bitClickM,d7
(1)  516/    3A5C :                     ; ; 		beq.s	.no_reset
(1)  517/    3A5C :                     ; ; 		move.w	#320/2,obj_x(a6)
(1)  518/    3A5C :                     ; ; 		move.w	#224/2,obj_y(a6)
(1)  519/    3A5C :                     ; ; .no_reset:
(1)  520/    3A5C :                     ; 		lea	.anim_data(pc),a0
(1)  521/    3A5C :                     ; 		bsr	object_Animate
(1)  522/    3A5C :                     ; 		bra	object_Display
(1)  523/    3A5C :                     ;
(1)  524/    3A5C :                     ; ; ----------------------------------------------
(1)  525/    3A5C :                     ;
(1)  526/    3A5C :                     ; .anim_data:
(1)  527/    3A5C :                     ; 		dc.w .anim_stand-.anim_data
(1)  528/    3A5C :                     ; 		dc.w .anim_move-.anim_data
(1)  529/    3A5C :                     ; 		dc.w .anim_jump-.anim_data
(1)  530/    3A5C :                     ; 		dc.w .anim_fall-.anim_data
(1)  531/    3A5C :                     ; 		dc.w .anim_slash-.anim_data
(1)  532/    3A5C :                     ; .anim_stand:
(1)  533/    3A5C :                     ; 		dc.w 6
(1)  534/    3A5C :                     ; 		dc.w 0,-1
(1)  535/    3A5C :                     ; 		align 2
(1)  536/    3A5C :                     ; .anim_move:
(1)  537/    3A5C :                     ; 		dc.w 5
(1)  538/    3A5C :                     ; 		dc.w 2,3,4,5,6,7,8,-3,1
(1)  539/    3A5C :                     ; 		align 2
(1)  540/    3A5C :                     ; .anim_jump:
(1)  541/    3A5C :                     ; 		dc.w 5
(1)  542/    3A5C :                     ; 		dc.w 10,11,12,-3,2
(1)  543/    3A5C :                     ; 		align 2
(1)  544/    3A5C :                     ; .anim_fall:
(1)  545/    3A5C :                     ; 		dc.w 5
(1)  546/    3A5C :                     ; 		dc.w 11,12,-3,1
(1)  547/    3A5C :                     ; 		align 2
(1)  548/    3A5C :                     ; .anim_slash:
(1)  549/    3A5C :                     ; 		dc.w 1
(1)  550/    3A5C :                     ; 		dc.w 14,15,16,17,-2
(1)  551/    3A5C :                     ; 		align 2
(1)  552/    3A5C :                     ;
(1)  553/    3A5C :                     ; --------------------------------------------------
(1)  554/    3A5C :                     ; Sisi
(1)  555/    3A5C :                     ; --------------------------------------------------
(1)  556/    3A5C :                     
(1)  557/    3A5C :                     Object_Sisi:
(1)  558/    3A5C : 7000                		moveq	#0,d0
(1)  559/    3A5E : 102E 0025           		move.b	obj_index(a6),d0
(1)  560/    3A62 : D040                		add.w	d0,d0
(1)  561/    3A64 : 323B 0006           		move.w	.list(pc,d0.w),d1
(1)  562/    3A68 : 4EFB 1002           		jmp	.list(pc,d1.w)
(1)  563/    3A6C :                     ; ----------------------------------------------
(1)  564/    3A6C : 0004                .list:		dc.w .init-.list
(1)  565/    3A6E : 002E                		dc.w .main-.list
(1)  566/    3A70 :                     ; ----------------------------------------------
(1)  567/    3A70 :                     .init:
(1)  568/    3A70 : 1D7C 0001 0025      		move.b	#1,obj_index(a6)
(1)  569/    3A76 : 2D7C 0000 5AB4      		move.l	#objMap_Sisi,obj_map(a6)
             3A7C : 000C             
(1)  570/    3A7E : 2D7C 0000 0000      		move.l	#0,obj_dma(a6)
             3A84 : 0010             
(1)  571/    3A86 : 3D7C 2480 0018      		move.w	#setVram_Sisi|$2000,obj_vram(a6)
(1)  572/    3A8C : 08AE 0007 0026      		bclr	#bitobj_Mars,obj_set(a6)	; Genesis object
(1)  573/    3A92 :                     ; 		move.w	#320/2,obj_x(a6)
(1)  574/    3A92 :                     ; 		move.w	#224/2,obj_y(a6)
(1)  575/    3A92 : 426E 0022           		clr.w	obj_frame(a6)
(1)  576/    3A96 : 6100 D43A           		bsr	object_AnimReset
(1)  577/    3A9A :                     
(1)  578/    3A9A :                     ; ----------------------------------------------
(1)  579/    3A9A :                     .main:
(1)  580/    3A9A :                     ; 		move.w	obj_ram(a6),d0
(1)  581/    3A9A :                     ; 		move.w	obj_ram+2(a6),d1
(1)  582/    3A9A :                     
(1)  583/    3A9A :                     
(1)  584/    3A9A : 7000                		moveq	#0,d0
(1)  585/    3A9C :                     
(1)  586/    3A9C : 3238 D204           		move.w	(RAM_CurrPick).w,d1
(1)  587/    3AA0 : E749                		lsl.w	#3,d1
(1)  588/    3AA2 :                     
(1)  589/    3AA2 : 0640 0018           		addi.w	#$18,d0
(1)  590/    3AA6 : 0641 0020           		addi.w	#$20,d1
(1)  591/    3AAA : 3D40 0004           		move.w	d0,obj_x(a6)
(1)  592/    3AAE : 3D41 0008           		move.w	d1,obj_y(a6)
(1)  593/    3AB2 :                     
(1)  594/    3AB2 :                     ; 		lea	(RAM_Objects),a0
(1)  595/    3AB2 :                     ; 		cmp.l	#Object_Mikami,obj_code(a0)
(1)  596/    3AB2 :                     ; 		bne.s	.dont_link
(1)  597/    3AB2 :                     ; 		move.w	obj_ram+2(a6),d7
(1)  598/    3AB2 :                     ; 		cmp.w	#24<<1,d7
(1)  599/    3AB2 :                     ; 		bge.s	.dont_incr
(1)  600/    3AB2 :                     ; 		add.w	#2,d7
(1)  601/    3AB2 :                     ; .dont_incr:
(1)  602/    3AB2 :                     ; 		move.w	d7,obj_ram+2(a6)
(1)  603/    3AB2 :                     ;
(1)  604/    3AB2 :                     ; 		move.w	obj_x(a0),d7
(1)  605/    3AB2 :                     ; 		move.w	obj_y(a0),d6
(1)  606/    3AB2 :                     ; 		move.w	#24,d5
(1)  607/    3AB2 :                     ; 		sub.w	d5,d6
(1)  608/    3AB2 :                     ; 		move.w	obj_ram(a6),d0
(1)  609/    3AB2 :                     ; 		moveq	#4,d1
(1)  610/    3AB2 :                     ; 		bsr	System_SineWave
(1)  611/    3AB2 :                     ; 		asr.w	#8,d2
(1)  612/    3AB2 :                     ; 		add.w	d2,d6
(1)  613/    3AB2 :                     ; 		moveq	#5,d1
(1)  614/    3AB2 :                     ; 		bsr	System_SineWave_Cos
(1)  615/    3AB2 :                     ; 		asr.w	#8,d2
(1)  616/    3AB2 :                     ; 		add.w	d2,d7
(1)  617/    3AB2 :                     ;
(1)  618/    3AB2 :                     ; 		move.b	obj_set(a6),d0
(1)  619/    3AB2 :                     ; 		move.b	obj_set(a0),d1
(1)  620/    3AB2 :                     ; 		eor.w	d1,d0
(1)  621/    3AB2 :                     ; 		andi.w	#1,d0
(1)  622/    3AB2 :                     ; 		beq.s	.same_h
(1)  623/    3AB2 :                     ; 		clr.w	obj_ram+2(a6)
(1)  624/    3AB2 :                     ; .same_h:
(1)  625/    3AB2 :                     ; 		move.w	obj_ram+2(a6),d4
(1)  626/    3AB2 :                     ; 		bclr	#bitobj_flipH,obj_set(a6)
(1)  627/    3AB2 :                     ; 		btst	#bitobj_flipH,obj_set(a0)
(1)  628/    3AB2 :                     ; 		beq.s	.dont_flipx
(1)  629/    3AB2 :                     ; 		neg.w	d4
(1)  630/    3AB2 :                     ; 		bset	#bitobj_flipH,obj_set(a6)
(1)  631/    3AB2 :                     ; .dont_flipx:
(1)  632/    3AB2 :                     ; 		lsr.w	#1,d4
(1)  633/    3AB2 :                     ; 		add.w	d4,d7
(1)  634/    3AB2 :                     ; 		move.w	d6,obj_y(a6)
(1)  635/    3AB2 :                     ; 		move.w	d7,obj_x(a6)
(1)  636/    3AB2 :                     ; 		add.w	#4,obj_ram(a6)
(1)  637/    3AB2 :                     
(1)  638/    3AB2 :                     .dont_link:
(1)  639/    3AB2 : 41FA 000A           		lea	.anim_data(pc),a0
(1)  640/    3AB6 : 6100 D38E           		bsr	object_Animate
(1)  641/    3ABA : 6000 D31C           		bra	object_Display
(1)  642/    3ABE :                     
(1)  643/    3ABE :                     ; ----------------------------------------------
(1)  644/    3ABE :                     
(1)  645/    3ABE :                     .anim_data:
(1)  646/    3ABE : 0008                		dc.w .anim_00-.anim_data
(1)  647/    3AC0 : 0008                		dc.w .anim_00-.anim_data
(1)  648/    3AC2 : 0008                		dc.w .anim_00-.anim_data
(1)  649/    3AC4 : 0008                		dc.w .anim_00-.anim_data
(1)  650/    3AC6 :                     .anim_00:
(1)  651/    3AC6 : 0008                		dc.w 8
(1)  652/    3AC8 : 0000 0001 0002      		dc.w 0,1,2,1,-1
             3ACE : 0001 FFFF          
(1)  653/    3AD2 :                     		align 2
(1)  654/    3AD2 :                     ;
(1)  655/    3AD2 :                     ; ; --------------------------------------------------
(1)  656/    3AD2 :                     ; ; Ball
(1)  657/    3AD2 :                     ; ; --------------------------------------------------
(1)  658/    3AD2 :                     ;
(1)  659/    3AD2 :                     ; Object_ball:
(1)  660/    3AD2 :                     ; 		moveq	#0,d0
(1)  661/    3AD2 :                     ; 		move.b	obj_index(a6),d0
(1)  662/    3AD2 :                     ; 		add.w	d0,d0
(1)  663/    3AD2 :                     ; 		move.w	.list(pc,d0.w),d1
(1)  664/    3AD2 :                     ; 		jmp	.list(pc,d1.w)
(1)  665/    3AD2 :                     ; ; ----------------------------------------------
(1)  666/    3AD2 :                     ; .list:		dc.w .init-.list
(1)  667/    3AD2 :                     ; 		dc.w .main-.list
(1)  668/    3AD2 :                     ; ; ----------------------------------------------
(1)  669/    3AD2 :                     ; .init:
(1)  670/    3AD2 :                     ; 		move.b	#1,obj_index(a6)
(1)  671/    3AD2 :                     ; 		move.l	#objMap_Sisi,obj_map(a6)
(1)  672/    3AD2 :                     ; 		move.l	#0,obj_dma(a6)
(1)  673/    3AD2 :                     ; 		move.w	#setVram_Sisi|$0000,obj_vram(a6)
(1)  674/    3AD2 :                     ; 		bclr	#bitobj_Mars,obj_set(a6)	; Genesis object
(1)  675/    3AD2 :                     ; 		move.w	#320/2,obj_x(a6)
(1)  676/    3AD2 :                     ; 		move.w	#224/2,obj_y(a6)
(1)  677/    3AD2 :                     ; 		clr.w	obj_frame(a6)
(1)  678/    3AD2 :                     ; 		bsr	object_AnimReset
(1)  679/    3AD2 :                     ;
(1)  680/    3AD2 :                     ; 		move.w	#$180,obj_x_spd(a6)
(1)  681/    3AD2 :                     ; 		move.w	#$180,obj_y_spd(a6)
(1)  682/    3AD2 :                     ;
(1)  683/    3AD2 :                     ; ; ----------------------------------------------
(1)  684/    3AD2 :                     ; .main:
(1)  685/    3AD2 :                     ; 		move.w	obj_x(a6),d0
(1)  686/    3AD2 :                     ; 		move.w	obj_y(a6),d1
(1)  687/    3AD2 :                     ; 		sub.w	#16,d0
(1)  688/    3AD2 :                     ; 		sub.w	#16,d1
(1)  689/    3AD2 :                     ; 		move.w	#320-32,d2
(1)  690/    3AD2 :                     ; 		move.w	#(224-16)-32,d3
(1)  691/    3AD2 :                     ;
(1)  692/    3AD2 :                     ; 		tst.w	d1
(1)  693/    3AD2 :                     ; 		bpl.s	.on_scrn_yu
(1)  694/    3AD2 :                     ; 		neg.w	obj_y_spd(a6)
(1)  695/    3AD2 :                     ; 		bsr	.playit
(1)  696/    3AD2 :                     ; .on_scrn_yu:
(1)  697/    3AD2 :                     ; 		cmp.w	d3,d1
(1)  698/    3AD2 :                     ; 		blt.s	.on_scrn_yd
(1)  699/    3AD2 :                     ; 		neg.w	obj_y_spd(a6)
(1)  700/    3AD2 :                     ; 		bsr	.playit
(1)  701/    3AD2 :                     ; .on_scrn_yd:
(1)  702/    3AD2 :                     ;
(1)  703/    3AD2 :                     ; 		tst.w	d0
(1)  704/    3AD2 :                     ; 		bpl.s	.on_scrn_xu
(1)  705/    3AD2 :                     ; 		neg.w	obj_x_spd(a6)
(1)  706/    3AD2 :                     ; 		bsr.s	.playit
(1)  707/    3AD2 :                     ; .on_scrn_xu:
(1)  708/    3AD2 :                     ; 		cmp.w	d2,d0
(1)  709/    3AD2 :                     ; 		blt.s	.on_scrn_xd
(1)  710/    3AD2 :                     ; 		neg.w	obj_x_spd(a6)
(1)  711/    3AD2 :                     ; 		bsr.s	.playit
(1)  712/    3AD2 :                     ; .on_scrn_xd:
(1)  713/    3AD2 :                     ;
(1)  714/    3AD2 :                     ; 		bsr	object_Speed
(1)  715/    3AD2 :                     ;
(1)  716/    3AD2 :                     ; 		lea	.anim_data(pc),a0
(1)  717/    3AD2 :                     ; 		bsr	object_Animate
(1)  718/    3AD2 :                     ; 		bra	object_Display
(1)  719/    3AD2 :                     ; .playit:
(1)  720/    3AD2 :                     ; 		moveq	#$0F,d0
(1)  721/    3AD2 :                     ; 		moveq	#2,d1
(1)  722/    3AD2 :                     ; 		bra	gemaPlayFromBlk
(1)  723/    3AD2 :                     ;
(1)  724/    3AD2 :                     ; ; ----------------------------------------------
(1)  725/    3AD2 :                     ;
(1)  726/    3AD2 :                     ; .anim_data:
(1)  727/    3AD2 :                     ; 		dc.w .anim_00-.anim_data
(1)  728/    3AD2 :                     ; 		dc.w .anim_00-.anim_data
(1)  729/    3AD2 :                     ; 		dc.w .anim_00-.anim_data
(1)  730/    3AD2 :                     ; 		dc.w .anim_00-.anim_data
(1)  731/    3AD2 :                     ; .anim_00:
(1)  732/    3AD2 :                     ; 		dc.w 8
(1)  733/    3AD2 :                     ; 		dc.w 0,1,2,1,-1
(1)  734/    3AD2 :                     ; 		align 2
(1)  735/    3AD2 :                     
(1)  736/    3AD2 :                     ; ====================================================================
(1)  737/    3AD2 :                     ; ------------------------------------------------------
(1)  738/    3AD2 :                     ; Subroutines
(1)  739/    3AD2 :                     ; ------------------------------------------------------
(1)  740/    3AD2 :                     
(1)  741/    3AD2 :                     ; ====================================================================
(1)  742/    3AD2 :                     ; ------------------------------------------------------
(1)  743/    3AD2 :                     ; Custom VBlank
(1)  744/    3AD2 :                     ; ------------------------------------------------------
(1)  745/    3AD2 :                     
(1)  746/    3AD2 :                     ; ------------------------------------------------------
(1)  747/    3AD2 :                     ; Custom HBlank
(1)  748/    3AD2 :                     ; ------------------------------------------------------
(1)  749/    3AD2 :                     
(1)  750/    3AD2 :                     ; ====================================================================
(1)  751/    3AD2 :                     ; ------------------------------------------------------
(1)  752/    3AD2 :                     ; Small DATA section
(1)  753/    3AD2 :                     ; ------------------------------------------------------
(1)  754/    3AD2 :                     
(1)  755/    3AD2 :                     PAL_TEST:
(1)  756/    3AD2 :                     		binclude "game/screen_1/data/md/maps/test/md_pal.bin"
(1)  757/    3AEE :                     		align 2
(1)  758/    3AEE :                     
(1)  759/    3AEE :                     ; str_ShowPsg:	dc.b "\\w \\w \\w \\w",0
(1)  760/    3AEE :                     ; 		dc.l RAM_ChnlLinks,RAM_ChnlLinks+2,RAM_ChnlLinks+4,RAM_ChnlLinks+6
(1)  761/    3AEE :                     ; 		align 2
(1)  762/    3AEE :                     ; str_ShowFm:	dc.b "\\w \\w \\w \\w \\w \\w",0
(1)  763/    3AEE :                     ; 		dc.l RAM_ChnlLinks+8,RAM_ChnlLinks+10,RAM_ChnlLinks+12
(1)  764/    3AEE :                     ; 		dc.l RAM_ChnlLinks+14,RAM_ChnlLinks+16,RAM_ChnlLinks+18
(1)  765/    3AEE :                     ; 		align 2
(1)  766/    3AEE :                     ; str_ShowPcm:	dc.b "\\w \\w \\w \\w",$0A
(1)  767/    3AEE :                     ; 		dc.b "\\w \\w \\w \\w",0
(1)  768/    3AEE :                     ; 		dc.l RAM_ChnlLinks+20,RAM_ChnlLinks+22,RAM_ChnlLinks+24,RAM_ChnlLinks+26
(1)  769/    3AEE :                     ; 		dc.l RAM_ChnlLinks+28,RAM_ChnlLinks+30,RAM_ChnlLinks+32,RAM_ChnlLinks+34
(1)  770/    3AEE :                     ; 		align 2
(1)  771/    3AEE :                     ; str_ShowPwm:	dc.b "\\w \\w \\w \\w",$0A
(1)  772/    3AEE :                     ; 		dc.b "\\w \\w \\w",0
(1)  773/    3AEE :                     ; 		dc.l RAM_ChnlLinks+36,RAM_ChnlLinks+38,RAM_ChnlLinks+40,RAM_ChnlLinks+42
(1)  774/    3AEE :                     ; 		dc.l RAM_ChnlLinks+44,RAM_ChnlLinks+46,RAM_ChnlLinks+48,RAM_ChnlLinks+50
(1)  775/    3AEE :                     ; 		align 2
(1)  776/    3AEE :                     
(1)  777/    3AEE :                     str_TesterInit:
(1)  778/    3AEE : 4745 4D41 2F4E      		dc.b "GEMA/Nikona tester",$0A
             3AF4 : 696B 6F6E 6120 
             3AFA : 7465 7374 6572 0A 
(1)  779/    3B01 : 2020 2020 2020      		dc.b "                \{DATE} \{TIME}",$0A
             3B07 : 2020 2020 2020 
             3B0D : 2020 2020 3033 
             3B13 : 2F31 312F 3230 
             3B19 : 3234 2030 393A 
             3B1F : 3534 3A33 3620 
             3B25 : 504D 0A          
(1)  780/    3B28 : 0A                  		dc.b $0A
(1)  781/    3B29 : 2020 2020 6765      		dc.b "    gemaTest",$0A
             3B2F : 6D61 5465 7374 0A 
(1)  782/    3B36 : 2020 2020 6765      		dc.b "    gemaPlayTrack",$0A
             3B3C : 6D61 506C 6179 
             3B42 : 5472 6163 6B0A    
(1)  783/    3B48 : 2020 2020 6765      		dc.b "    gemaStopTrack",$0A
             3B4E : 6D61 5374 6F70 
             3B54 : 5472 6163 6B0A    
(1)  784/    3B5A : 2020 2020 6765      		dc.b "    gemaFadeTrack",$0A
             3B60 : 6D61 4661 6465 
             3B66 : 5472 6163 6B0A    
(1)  785/    3B6C : 2020 2020 6765      		dc.b "    gemaSetTrackVol",$0A
             3B72 : 6D61 5365 7454 
             3B78 : 7261 636B 566F 
             3B7E : 6C0A             
(1)  786/    3B80 : 2020 2020 6765      		dc.b "    gemaStopAll",$0A
             3B86 : 6D61 5374 6F70 
             3B8C : 416C 6C0A          
(1)  787/    3B90 : 2020 2020 2866      		dc.b "    (free slot)",$0A
             3B96 : 7265 6520 736C 
             3B9C : 6F74 290A          
(1)  788/    3BA0 : 2020 2020 2A2A      		dc.b "    *** EXIT"
             3BA6 : 2A20 4558 4954    
(1)  789/    3BAC : 00                  		dc.b 0
(1)  790/    3BAD :                     		align 2
(1)  791/    3BAE : 5C77 205C 7720      str_ShowMe:	dc.b "\\w \\w \\w",$A
             3BB4 : 5C77 0A          
(1)  792/    3BB7 : 0A                  		dc.b $A
(1)  793/    3BB8 : 5C77 205C 7720      		dc.b "\\w \\w \\w",0
             3BBE : 5C77 00          
(1)  794/    3BC1 : FFFF D206 FFFF      		dc.l RAM_GemaArg0,RAM_GemaArg1,RAM_GemaArg2
             3BC7 : D208 FFFF D20A    
(1)  795/    3BCD : FFFF D20C FFFF      		dc.l RAM_GemaArg3,RAM_GemaArg4,RAM_GemaArg5
             3BD3 : D20E FFFF D210    
(1)  796/    3BD9 :                     		align 2
(1)  797/    3BDA :                     str_Info:
(1)  798/    3BDA : 5C6C 00             		dc.b "\\l",0
(1)  799/    3BDD : FFFF BE34           		dc.l RAM_Framecount
(1)  800/    3BE1 :                     		align 2
(1)  801/    3BE2 :                     ; str_Notes:
(1)  802/    3BE2 :                     ;  dc.b "---",0,"C#0",0,"D-0",0,"D#0",0,"E-0",0,"F-0",0,"F#0",0,"G-0",0,"G#0",0,"A-0",0,"A#0",0,"B-0",0
(1)  803/    3BE2 :                     ;  dc.b "C-1",0,"C#1",0,"D-1",0,"D#1",0,"E-1",0,"F-1",0,"F#1",0,"G-1",0,"G#1",0,"A-1",0,"A#1",0,"B-1",0
(1)  804/    3BE2 :                     ;  dc.b "C-2",0,"C#2",0,"D-2",0,"D#2",0,"E-2",0,"F-2",0,"F#2",0,"G-2",0,"G#2",0,"A-2",0,"A#2",0,"B-2",0
(1)  805/    3BE2 :                     ;  dc.b "C-3",0,"C#3",0,"D-3",0,"D#3",0,"E-3",0,"F-3",0,"F#3",0,"G-3",0,"G#3",0,"A-3",0,"A#3",0,"B-3",0
(1)  806/    3BE2 :                     ;  dc.b "C-4",0,"C#4",0,"D-4",0,"D#4",0,"E-4",0,"F-4",0,"F#4",0,"G-4",0,"G#4",0,"A-4",0,"A#4",0,"B-4",0
(1)  807/    3BE2 :                     ;  dc.b "C-5",0,"C#5",0,"D-5",0,"D#5",0,"E-5",0,"F-5",0,"F#5",0,"G-5",0,"G#5",0,"A-5",0,"A#5",0,"B-5",0
(1)  808/    3BE2 :                     ;  dc.b "C-6",0,"C#6",0,"D-6",0,"D#6",0,"E-6",0,"F-6",0,"F#6",0,"G-6",0,"G#6",0,"A-6",0,"A#6",0,"B-6",0
(1)  809/    3BE2 :                     ;  dc.b "C-7",0,"C#7",0,"D-7",0,"D#7",0,"E-7",0,"F-7",0,"F#7",0,"G-7",0,"G#7",0,"A-7",0,"A#7",0,"B-7",0
(1)  810/    3BE2 :                     ;  dc.b "C-8",0,"C#8",0,"D-8",0,"D#8",0,"E-8",0,"F-8",0,"F#8",0,"G-8",0,"G#8",0,"A-8",0,"A#8",0,"B-8",0
(1)  811/    3BE2 :                     ;  dc.b "C-9",0,"C#9",0,"D-9",0,"D#9",0,"E-9",0,"F-9",0,"F#9",0,"G-9",0,"G#9",0,"A-9",0,"A#9",0,"B-9",0
(1)  812/    3BE2 :                     ;  align 2
(1)  813/    3BE2 :                     ; str_Notes_FM:
(1)  814/    3BE2 :                     ;  dc.b "---",0
(1)  815/    3BE2 :                     ;  dc.b "C-",0,0,"C#",0,0,"D-",0,0,"D#",0,0,"E-",0,0,"F-",0,0
(1)  816/    3BE2 :                     ;  dc.b "F#",0,0,"G-",0,0,"G#",0,0,"A-",0,0,"A#",0,0,"B-",0,0
(1)  817/    3BE2 :                     ;  align 2
(1)  818/    3BE2 :                     ; str_Octv_FM:
(1)  819/    3BE2 :                     ;  dc.b "0",0,"1",0,"2",0,"3",0,"4",0,"5",0,"6",0,"7",0
(1)  820/    3BE2 :                     ;  align 2
(1)  821/    3BE2 :                     
     379/    3BE2 :                     mcscrn_e:
     379/    3BE2 :                     ; Md_Screen00_e:
     379/    3BE2 : =$3BE2               MD_SCREEN01_E label *
     380/    3BE2 :                     
     381/    3BE2 :                     ; ====================================================================
     382/    3BE2 :                     ; ----------------------------------------------------------------
     383/    3BE2 :                     ; DATA SECTION
     384/    3BE2 :                     ; ----------------------------------------------------------------
     385/    3BE2 :                     
     386/    3BE2 :                     ; ====================================================================
     387/    3BE2 :                     ; ----------------------------------------------------------------
     388/    3BE2 :                     ; 68K DATA BANKs
     389/    3BE2 :                     ;
     390/    3BE2 :                     ; SEGA CD / CD32X:
     391/    3BE2 :                     ; Stored in WORD-RAM pieces
     392/    3BE2 :                     ; limited to 256KB 2M or 128KB 1M/1M (*UNTESTED*)
     393/    3BE2 :                     ; ** WORD-RAM CANNOT BE USED IF USING ASIC STAMPS **
     394/    3BE2 :                     ;
     395/    3BE2 :                     ; SEGA 32X Cartridge:
     396/    3BE2 :                     ; Limited to 1MB, bankswitchable if needed. (TODO bankswitching)
     397/    3BE2 :                     ; ONLY 4 banks can be used, Bank 0 already uses the
     398/    3BE2 :                     ; first 512KB for the code.
     399/    3BE2 :                     ;
     400/    3BE2 :                     ; To keep multi-porting limit your screen's data to 256KB
     401/    3BE2 :                     ; ----------------------------------------------------------------
     402/    3BE2 :                     
     403/    3BE2 :                     ; --------------------------------------------------------
     404/    3BE2 :                     ; DEFAULT BANK
     405/    3BE2 :                     ;
     406/    3BE2 :                     ; CD/CD32X:
     407/    3BE2 :                     ; $200000 256KB (WORD-RAM)
     408/    3BE2 :                     ;
     409/    3BE2 :                     ; 32X:
     410/    3BE2 :                     ; $900000 1MB (Bankswichable area)
     411/    3BE2 :                     ;
     412/    3BE2 :                     ; Usage:
     413/    3BE2 :                     ; data_bkset LABEL_START,OPTION
     414/    3BE2 :                     ; (add your includes and bincludes)
     415/    3BE2 :                     ; data_bkend LABEL_START,LABEL_END,used_size
     416/    3BE2 :                     ;
     417/    3BE2 :                     ; OPTION (32X Cartridge ONLY):
     418/    3BE2 :                     ;  0, Normal 32X $900000 bank
     419/    3BE2 :                     ; -1, This bank is the first one
     420/    3BE2 :                     ;
     421/    3BE2 :                     ; This is ignored on other systems.
     422/    3BE2 :                     ; --------------------------------------------------------
     423/    3BE2 :                     
     424/    3BE2 : (MACRO)              	data_bkset MCD_DBANK0,-1	; <-- note the -1
     424/    3BE2 :                     ; MCD_DBANK0:
     424/    3BE2 : =$3BE2               MCD_DBANK0 label *
     425/    3BE2 :                     mdbank0:
     426/    3BE2 :                     		include "game/screen_0/data_bank.asm"
(1)    1/    3BE2 :                     ; ===========================================================================
(1)    2/    3BE2 :                     ; ----------------------------------------------------------------
(1)    3/    3BE2 :                     ; 68K SCREEN MODE DATA
(1)    4/    3BE2 :                     ; for big stuff like maps, level, etc.
(1)    5/    3BE2 :                     ;
(1)    6/    3BE2 :                     ; For Genesis graphics use data_dma.asm
(1)    7/    3BE2 :                     ; and for 32X graphics use data_mgfx.asm
(1)    8/    3BE2 :                     ;
(1)    9/    3BE2 :                     ; For 32X, CD32X:
(1)   10/    3BE2 :                     ; THE 256-COLOR PALETTES GO HERE.
(1)   11/    3BE2 :                     ; ----------------------------------------------------------------
(1)   12/    3BE2 :                     
(1)   13/    3BE2 :                     ; ----------------------------------------------------------------
(1)   14/    3BE2 :                     ; 32X Screen maps
(1)   15/    3BE2 :                     ; ----------------------------------------------------------------
(1)   16/    3BE2 :                     
(1)   17/    3BE2 :                     MapMars_Scrn0:
(1)   18/    3BE2 :                     		binclude "game/screen_0/data/mars/maps/test/data_map.bin"
(1)   19/    3E12 :                     		align 2
(1)   20/    3E12 :                     
(1)   21/    3E12 :                     ; ----------------------------------------------------------------
(1)   22/    3E12 :                     ; 32X Palettes
(1)   23/    3E12 :                     ; ----------------------------------------------------------------
(1)   24/    3E12 :                     
(1)   25/    3E12 :                     PalMars_Scrn0:
(1)   26/    3E12 :                     		binclude "game/screen_0/data/mars/maps/test/data_pal.bin"
(1)   27/    4012 :                     		align 2
(1)   28/    4012 :                     
(1)   29/    4012 :                     ; ----------------------------------------------------------------
(1)   30/    4012 :                     ; Screen maps
(1)   31/    4012 :                     ; ----------------------------------------------------------------
(1)   32/    4012 :                     
(1)   33/    4012 :                     MAP_Scr0_BG:
(1)   34/    4012 :                     		binclude "game/screen_0/data/md/maps/test/md_map.bin"
(1)   35/    48D2 :                     		align 2
(1)   36/    48D2 :                     
(1)   37/    48D2 :                     ; ----------------------------------------------------------------
(1)   38/    48D2 :                     ; Object data
(1)   39/    48D2 :                     ; ----------------------------------------------------------------
(1)   40/    48D2 :                     
(1)   41/    48D2 :                     ; Emily
(1)   42/    48D2 :                     objPal_Emily:
(1)   43/    48D2 :                     		binclude "game/screen_0/data/md/objects/emily/emi_pal.bin"
(1)   44/    48E8 :                     		align 2
(1)   45/    48E8 :                     objMap_Emily:
(1)   46/    48E8 :                     		binclude "game/screen_0/data/md/objects/emily/emi_map.bin"
(1)   47/    4AA8 :                     		align 2
(1)   48/    4AA8 :                     objDma_Emily:
(1)   49/    4AA8 : 0004 D070           		dc.l Art_Emily
(1)   50/    4AAC :                     		binclude "game/screen_0/data/md/objects/emily/emi_plc.bin"
(1)   51/    4B4C :                     		align 2
(1)   52/    4B4C :                     
(1)   53/    4B4C :                     ; Doremi
(1)   54/    4B4C :                     objPal_Doremi:
(1)   55/    4B4C :                     		binclude "game/screen_0/data/md/objects/doremi/doremi_pal.bin"
(1)   56/    4B6A :                     		align 2
(1)   57/    4B6A :                     objMap_Doremi:
(1)   58/    4B6A :                     		binclude "game/screen_0/data/md/objects/doremi/doremi_map.bin"
(1)   59/    4B92 :                     		align 2
(1)   60/    4B92 :                     objDma_Doremi:
(1)   61/    4B92 : 0004 FBF0           		dc.l Art_Doremi
(1)   62/    4B96 :                     		binclude "game/screen_0/data/md/objects/doremi/doremi_plc.bin"
(1)   63/    4BA6 :                     		align 2
(1)   64/    4BA6 :                     
(1)   65/    4BA6 :                     ; Bibi
(1)   66/    4BA6 :                     ; objPal_Doremi:
(1)   67/    4BA6 :                     ; 		binclude "game/screen_0/data/md/objects/doremi/doremi_pal.bin"
(1)   68/    4BA6 :                     ; 		align 2
(1)   69/    4BA6 :                     objMap_Bibi:
(1)   70/    4BA6 :                     		binclude "game/screen_0/data/md/objects/bibi/bibi_map.bin"
(1)   71/    4C86 :                     		align 2
(1)   72/    4C86 :                     objDma_Bibi:
(1)   73/    4C86 : 0005 01F0           		dc.l Art_Bibi
(1)   74/    4C8A :                     		binclude "game/screen_0/data/md/objects/bibi/bibi_plc.bin"
(1)   75/    4CE0 :                     		align 2
(1)   76/    4CE0 :                     
(1)   77/    4CE0 :                     ; Sophie
(1)   78/    4CE0 :                     objPal_Sophie:
(1)   79/    4CE0 :                     		binclude "game/screen_0/data/md/objects/sophie/sophie_pal.bin"
(1)   80/    4CFE :                     		align 2
(1)   81/    4CFE :                     objMap_Sophie:
(1)   82/    4CFE :                     		binclude "game/screen_0/data/md/objects/sophie/sophie_map.bin"
(1)   83/    4D76 :                     		align 2
(1)   84/    4D76 :                     objDma_Sophie:
(1)   85/    4D76 : 0005 1A10           		dc.l Art_Sophie
(1)   86/    4D7A :                     		binclude "game/screen_0/data/md/objects/sophie/sophie_plc.bin"
(1)   87/    4DA4 :                     		align 2
(1)   88/    4DA4 :                     
     427/    4DA4 :                     		include "game/screen_1/data_bank.asm"
(1)    1/    4DA4 :                     ; ===========================================================================
(1)    2/    4DA4 :                     ; ----------------------------------------------------------------
(1)    3/    4DA4 :                     ; 68K SCREEN MODE DATA
(1)    4/    4DA4 :                     ; for big stuff like maps, level, etc.
(1)    5/    4DA4 :                     ;
(1)    6/    4DA4 :                     ; For Genesis graphics use data_dma.asm
(1)    7/    4DA4 :                     ; and for 32X graphics use data_mgfx.asm
(1)    8/    4DA4 :                     ;
(1)    9/    4DA4 :                     ; For 32X, CD32X:
(1)   10/    4DA4 :                     ; THE 256-COLOR PALETTES GO HERE.
(1)   11/    4DA4 :                     ; ----------------------------------------------------------------
(1)   12/    4DA4 :                     
(1)   13/    4DA4 :                     ; ----------------------------------------------------------------
(1)   14/    4DA4 :                     ; 32X Screen maps
(1)   15/    4DA4 :                     ; ----------------------------------------------------------------
(1)   16/    4DA4 :                     
(1)   17/    4DA4 :                     MapMars_TEST:
(1)   18/    4DA4 :                     		binclude "game/screen_1/data/mars/maps/test/data_map.bin"
(1)   19/    4FD4 :                     		align 2
(1)   20/    4FD4 :                     
(1)   21/    4FD4 :                     ; ----------------------------------------------------------------
(1)   22/    4FD4 :                     ; 32X Palettes
(1)   23/    4FD4 :                     ; ----------------------------------------------------------------
(1)   24/    4FD4 :                     
(1)   25/    4FD4 :                     PalMars_TEST:
(1)   26/    4FD4 :                     		binclude "game/screen_1/data/mars/maps/test/data_pal.bin"
(1)   27/    51D4 :                     		align 2
(1)   28/    51D4 :                     
(1)   29/    51D4 :                     ; ----------------------------------------------------------------
(1)   30/    51D4 :                     ; Screen maps
(1)   31/    51D4 :                     ; ----------------------------------------------------------------
(1)   32/    51D4 :                     
(1)   33/    51D4 :                     MAP_TEST:
(1)   34/    51D4 :                     		binclude "game/screen_1/data/md/maps/test/md_map.bin"
(1)   35/    5A94 :                     		align 2
(1)   36/    5A94 :                     
(1)   37/    5A94 :                     ; ----------------------------------------------------------------
(1)   38/    5A94 :                     ; Object maps
(1)   39/    5A94 :                     ; ----------------------------------------------------------------
(1)   40/    5A94 :                     
(1)   41/    5A94 :                     objPal_Sisi:
(1)   42/    5A94 :                     		binclude "game/screen_1/data/md/objects/sisi/sisi_pal.bin"
(1)   43/    5AB4 :                     		align 2
(1)   44/    5AB4 :                     objMap_Sisi:
(1)   45/    5AB4 :                     		binclude "game/screen_1/data/md/objects/sisi/sisi_map.bin"
(1)   46/    5B10 :                     		align 2
(1)   47/    5B10 :                     
     432/    5B10 :                     		include "sound/tracks.asm"		; GEMA: Track data
(1)    1/    5B10 :                     ; ===========================================================================
(1)    2/    5B10 :                     ; ------------------------------------------------------------
(1)    3/    5B10 :                     ; SOUND TRACKS SECTION
(1)    4/    5B10 :                     ; ------------------------------------------------------------
(1)    5/    5B10 :                     
(1)    6/    5B10 :                     ; ====================================================================
(1)    7/    5B10 :                     ; ------------------------------------------------------------
(1)    8/    5B10 :                     ; Instrument macros
(1)    9/    5B10 :                     ; ------------------------------------------------------------
(1)   10/    5B10 :                     
(1)   11/    5B10 :                     gInsNull macro
(1)   12/    5B10 :                     	dc.b $00,$00,$00,$00
(1)   13/    5B10 :                     	dc.b $00,$00,$00,$00
(1)   14/    5B10 :                     	endm
(1)   15/    5B10 :                     
(1)   16/    5B10 :                     ; alv: attack level
(1)   17/    5B10 :                     ; atk: attack rate
(1)   18/    5B10 :                     ; slv: sustain
(1)   19/    5B10 :                     ; dky: decay rate (up)
(1)   20/    5B10 :                     ; rrt: release rate (down)
(1)   21/    5B10 :                     ; vib: (TODO)
(1)   22/    5B10 :                     gInsPsg	macro pitch,alv,atk,slv,dky,rrt,vib
(1)   23/    5B10 :                     	dc.b $80,pitch,alv,atk
(1)   24/    5B10 :                     	dc.b slv,dky,rrt,vib
(1)   25/    5B10 :                     	endm
(1)   26/    5B10 :                     
(1)   27/    5B10 :                     ; same args as gInsPsg
(1)   28/    5B10 :                     ; but this has one more argument for the noise type:
(1)   29/    5B10 :                     ; mode: noise mode
(1)   30/    5B10 :                     ;       %tmm
(1)   31/    5B10 :                     ;        t  - Bass(0)|Noise(1)
(1)   32/    5B10 :                     ;         mm- Clock(0)|Clock/2(1)|Clock/4(2)|Tone3(3)
(1)   33/    5B10 :                     ;
(1)   34/    5B10 :                     gInsPsgN macro pitch,alv,atk,slv,dky,rrt,vib,mode
(1)   35/    5B10 :                     	dc.b $90|mode,pitch,alv,atk
(1)   36/    5B10 :                     	dc.b slv,dky,rrt,vib
(1)   37/    5B10 :                     	endm
(1)   38/    5B10 :                     
(1)   39/    5B10 :                     ; 24-bit 68k pointer to FM patch data
(1)   40/    5B10 :                     gInsFm macro pitch,fmins
(1)   41/    5B10 :                     	dc.b $A0,pitch,((fmins>>16)&$FF),((fmins>>8)&$FF)
(1)   42/    5B10 :                     	dc.b fmins&$FF,$00,$00,$00
(1)   43/    5B10 :                     	endm
(1)   44/    5B10 :                     
(1)   45/    5B10 :                     ; Same args as gInsFm but for FM3 special.
(1)   46/    5B10 :                     ;
(1)   47/    5B10 :                     ; ** Pitch is useless here, set to 0 **
(1)   48/    5B10 :                     gInsFm3	macro pitch,fmins
(1)   49/    5B10 :                     	dc.b $B0,pitch,((fmins>>16)&$FF),((fmins>>8)&$FF)
(1)   50/    5B10 :                     	dc.b fmins&$FF,$00,$00,$00
(1)   51/    5B10 :                     	endm
(1)   52/    5B10 :                     
(1)   53/    5B10 :                     ; DAC Sample
(1)   54/    5B10 :                     ;
(1)   55/    5B10 :                     ; flags: %000L
(1)   56/    5B10 :                     ;        L - Loop sample No/Yes
(1)   57/    5B10 :                     gInsDac	macro pitch,start,flags
(1)   58/    5B10 :                     	dc.b $C0|flags,pitch,((start>>16)&$FF),((start>>8)&$FF)
(1)   59/    5B10 :                     	dc.b start&$FF,0,0,0
(1)   60/    5B10 :                     	endm
(1)   61/    5B10 :                     
(1)   62/    5B10 :                     ; Sega CD PCM Sample
(1)   63/    5B10 :                     ;
(1)   64/    5B10 :                     ; flags: %000L
(1)   65/    5B10 :                     ;        L - Loop sample No/Yes
(1)   66/    5B10 :                     gInsPcm	macro pitch,start,flags
(1)   67/    5B10 :                      if MCD|MARSCD
(1)   68/    5B10 :                     	dc.b $D0|flags,pitch,((start>>16)&$FF),((start>>8)&$FF)
(1)   69/    5B10 :                     	dc.b start&$FF,0,0,0
(1)   70/    5B10 :                      else
(1)   71/    5B10 :                     	dc.b $00,$00,$00,$00
(1)   72/    5B10 :                     	dc.b $00,$00,$00,$00
(1)   73/    5B10 :                      endif
(1)   74/    5B10 :                     	endm
(1)   75/    5B10 :                     
(1)   76/    5B10 :                     ; Sega 32X PWM Sample
(1)   77/    5B10 :                     ;
(1)   78/    5B10 :                     ; flags: %00SL
(1)   79/    5B10 :                     ;        L - Loop sample No/Yes
(1)   80/    5B10 :                     ;        S - Sample data is in STEREO
(1)   81/    5B10 :                     gInsPwm	macro pitch,start,flags
(1)   82/    5B10 :                      if MARS|MARSCD
(1)   83/    5B10 :                     	dc.b $E0|flags,pitch,((start>>24)&$FF),((start>>16)&$FF)
(1)   84/    5B10 :                     	dc.b ((start>>8)&$FF),start&$FF,0,0
(1)   85/    5B10 :                      else
(1)   86/    5B10 :                     	dc.b $00,$00,$00,$00
(1)   87/    5B10 :                     	dc.b $00,$00,$00,$00
(1)   88/    5B10 :                      endif
(1)   89/    5B10 :                     	endm
(1)   90/    5B10 :                     
(1)   91/    5B10 :                     ; ticks - %gttttttt
(1)   92/    5B10 :                     ;   loc - 68k pointer
(1)   93/    5B10 :                     ;
(1)   94/    5B10 :                     ; t-Ticks
(1)   95/    5B10 :                     ; g-Use global tempo
(1)   96/    5B10 :                     gemaTrk macro ticks,loc
(1)   97/    5B10 :                     	dc.l ((ticks&$FF)<<24)|loc&$FFFFFF
(1)   98/    5B10 :                     	endm
(1)   99/    5B10 :                     
(1)  100/    5B10 :                     ; gemaHead
(1)  101/    5B10 :                     ;
(1)  102/    5B10 :                     ; blk_data,patt_data,ins_list,num_chnlsused
(1)  103/    5B10 :                     gemaHead macro blk,pat,ins,num
(1)  104/    5B10 :                     	dc.w num
(1)  105/    5B10 :                     	dc.l blk
(1)  106/    5B10 :                     	dc.l pat
(1)  107/    5B10 :                     	dc.l ins
(1)  108/    5B10 :                     	endm
(1)  109/    5B10 :                     
(1)  110/    5B10 :                     ; ====================================================================
(1)  111/    5B10 :                     ; ------------------------------------------------------------
(1)  112/    5B10 :                     ; Nikona DEFAULT track-list
(1)  113/    5B10 :                     ;
(1)  114/    5B10 :                     ; gemaTrk ticks+beatsbit*,track_data
(1)  115/    5B10 :                     ; Add $80 ($80|ticks) to make the track use global sub-beats
(1)  116/    5B10 :                     ;
(1)  117/    5B10 :                     ; To use sub-beats call gemaSetBeats command
(1)  118/    5B10 :                     ; BEFORE playing your track:
(1)  119/    5B10 :                     ; 	move.w	#new_beats,d0
(1)  120/    5B10 :                     ; 	bsr	gemaSetBeats
(1)  121/    5B10 :                     ; 	move.w	#track_id,d0
(1)  122/    5B10 :                     ;	bsr	gemaPlayTrack
(1)  123/    5B10 :                     ; ------------------------------------------------------------
(1)  124/    5B10 :                     
(1)  125/    5B10 :                     	align 2
(1)  126/    5B10 :                     Gema_MasterList:
(1)  127/    5B10 : (MACRO)              	gemaTrk 3|$80,GemaTrk_Arena1
(1)  127/    5B10 : 8300 5C92                   dc.l ((3|$80&$FF)<<24)|GEMATRK_ARENA1&$FFFFFF
(1)  128/    5B14 :                     ; 	gemaTrk 6|$80,GemaTrk_MOVEME
(1)  129/    5B14 :                     ; 	gemaTrk 6|$80,GemaTrk_NadieMD
(1)  130/    5B14 :                     ; 	gemaTrk 6|$80,GemaTrk_NadieMCD
(1)  131/    5B14 :                     ; 	gemaTrk 6|$80,GemaTrk_NadieMARS
(1)  132/    5B14 : (MACRO)              	gemaTrk 3|$80,GemaTrk_Crystal
(1)  132/    5B14 : 8300 B31A                   dc.l ((3|$80&$FF)<<24)|GEMATRK_CRYSTAL&$FFFFFF
(1)  133/    5B18 : (MACRO)              	gemaTrk 3,GemaTrk_Dream
(1)  133/    5B18 : 0300 9BCA                   dc.l ((3&$FF)<<24)|GEMATRK_DREAM&$FFFFFF
(1)  134/    5B1C :                     
(1)  135/    5B1C :                     ; ------------------------------------------------------------
(1)  136/    5B1C :                     ; BGM tracks
(1)  137/    5B1C :                     ; ------------------------------------------------------------
(1)  138/    5B1C :                     
(1)  139/    5B1C :                     GemaSfx_All:
(1)  140/    5B1C : (MACRO)              	gemaHead .blk,.pat,.ins,1
(1)  140/    5B1C : 0001                        dc.w 1
(1)  140/    5B1E : 0000 5B2A                   dc.l .BLK
(1)  140/    5B22 : 0000 5B30                   dc.l .PAT
(1)  140/    5B26 : 0000 5BF0                   dc.l .INS
(1)  141/    5B2A :                     .blk:
(1)  142/    5B2A :                     	binclude "sound/tracks/sfxall_blk.bin"
(1)  143/    5B2F :                     	align 2
(1)  144/    5B30 :                     .pat:
(1)  145/    5B30 :                     	binclude "sound/tracks/sfxall_patt.bin"
(1)  146/    5BEF :                     	align 2
(1)  147/    5BF0 :                     .ins:
(1)  148/    5BF0 : (MACRO)              	gInsPsgN 0,$00,$00,$00,$00,$00,0,%100
(1)  148/    5BF0 : 9400 0000                   dc.b $90|%100,0,$00,$00
(1)  148/    5BF4 : 0000 0000                   dc.b $00,$00,$00,0
(1)  149/    5BF8 : (MACRO)              	gInsPsgN 0,$00,$00,$00,$00,$00,0,%101
(1)  149/    5BF8 : 9500 0000                   dc.b $90|%101,0,$00,$00
(1)  149/    5BFC : 0000 0000                   dc.b $00,$00,$00,0
(1)  150/    5C00 : (MACRO)              	gInsPsgN 0,$00,$00,$00,$00,$00,0,%110
(1)  150/    5C00 : 9600 0000                   dc.b $90|%110,0,$00,$00
(1)  150/    5C04 : 0000 0000                   dc.b $00,$00,$00,0
(1)  151/    5C08 : (MACRO)              	gInsFm 0,FmIns_Ding_1
(1)  151/    5C08 : A000 00CA                   dc.b $A0,0,((FMINS_DING_1>>16)&$FF),((FMINS_DING_1>>8)&$FF)
(1)  151/    5C0C : 3400 0000                   dc.b FMINS_DING_1&$FF,$00,$00,$00
(1)  152/    5C10 : (MACRO)              	gInsFm3 0,FmIns_Fm3_Explosion
(1)  152/    5C10 : B000 00C5                   dc.b $B0,0,((FMINS_FM3_EXPLOSION>>16)&$FF),((FMINS_FM3_EXPLOSION>>8)&$FF)
(1)  152/    5C14 : 9400 0000                   dc.b FMINS_FM3_EXPLOSION&$FF,$00,$00,$00
(1)  153/    5C18 :                     
(1)  154/    5C18 :                     ; ------------------------------------------------------------
(1)  155/    5C18 :                     
(1)  156/    5C18 :                     GemaTrk_TEST_0:
(1)  157/    5C18 : (MACRO)              	gemaHead .blk,.pat,.ins,3
(1)  157/    5C18 : 0003                        dc.w 3
(1)  157/    5C1A : 0000 5C2E                   dc.l .BLK
(1)  157/    5C1E : 0000 5C31                   dc.l .PAT
(1)  157/    5C22 : 0000 5C26                   dc.l .INS
(1)  158/    5C26 :                     .ins:
(1)  159/    5C26 :                     ; 	gInsPsgN 0,$00,$00,$00,$00,$00,0,%101
(1)  160/    5C26 :                     ; 	gInsFm -36-6,FmIns_Ambient_dark
(1)  161/    5C26 : (MACRO)              	gInsPcm -12,PcmIns_MoveMe_BrassL,%11
(1)  161/    5C26 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  161/    5C2A : 0000 0000                   dc.b $00,$00,$00,$00
(1)  162/    5C2E :                     ; 	gInsPwm 0,PwmIns_Piano,%00
(1)  163/    5C2E :                     .blk:
(1)  164/    5C2E :                     	binclude "sound/tracks/test_blk.bin"
(1)  165/    5C31 :                     .pat:
(1)  166/    5C31 :                     	binclude "sound/tracks/test_patt.bin"
(1)  167/    5C92 :                     
(1)  168/    5C92 :                     GemaTrk_Arena1:
(1)  169/    5C92 : (MACRO)              	gemaHead shrd_blk,shrd_pat,.ins,4
(1)  169/    5C92 : 0004                        dc.w 4
(1)  169/    5C94 : 0000 5CF8                   dc.l SHRD_BLK
(1)  169/    5C98 : 0000 5D22                   dc.l SHRD_PAT
(1)  169/    5C9C : 0000 5CA0                   dc.l .INS
(1)  170/    5CA0 :                     .ins:
(1)  171/    5CA0 : (MACRO)              	gInsPcm -17-7,PcmIns_techno_01,0
(1)  171/    5CA0 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  171/    5CA4 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  172/    5CA8 : (MACRO)              	gInsPcm -17-7,PcmIns_techno_02,0
(1)  172/    5CA8 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  172/    5CAC : 0000 0000                   dc.b $00,$00,$00,$00
(1)  173/    5CB0 : (MACRO)              	gInsPcm -17-7,PcmIns_techno_03,0
(1)  173/    5CB0 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  173/    5CB4 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  174/    5CB8 : (MACRO)              	gInsPcm -17-7,PcmIns_techno_04,0
(1)  174/    5CB8 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  174/    5CBC : 0000 0000                   dc.b $00,$00,$00,$00
(1)  175/    5CC0 : (MACRO)              	gInsPcm -17-7,PcmIns_techno_05,0
(1)  175/    5CC0 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  175/    5CC4 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  176/    5CC8 : (MACRO)              	gInsPcm -17-7,PcmIns_techno_06,1
(1)  176/    5CC8 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  176/    5CCC : 0000 0000                   dc.b $00,$00,$00,$00
(1)  177/    5CD0 : (MACRO)              	gInsPcm -17-7,PcmIns_techno_07,1
(1)  177/    5CD0 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  177/    5CD4 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  178/    5CD8 : (MACRO)              	gInsPcm -17-7,PcmIns_techno_08,1
(1)  178/    5CD8 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  178/    5CDC : 0000 0000                   dc.b $00,$00,$00,$00
(1)  179/    5CE0 : (MACRO)              	gInsPcm -17-7,PcmIns_techno_09,1
(1)  179/    5CE0 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  179/    5CE4 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  180/    5CE8 : (MACRO)              	gInsPcm -17-7,PcmIns_techno_10,1
(1)  180/    5CE8 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  180/    5CEC : 0000 0000                   dc.b $00,$00,$00,$00
(1)  181/    5CF0 : (MACRO)              	gInsPcm -17-7,PcmIns_techno_11,0
(1)  181/    5CF0 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  181/    5CF4 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  182/    5CF8 :                     shrd_blk:
(1)  183/    5CF8 :                     	binclude "sound/tracks/techno_blk.bin"
(1)  184/    5D22 :                     shrd_pat:
(1)  185/    5D22 :                     	binclude "sound/tracks/techno_patt.bin"
(1)  186/    8BF4 :                     
(1)  187/    8BF4 :                     ; ------------------------------------------------------------
(1)  188/    8BF4 :                     
(1)  189/    8BF4 :                     GemaTrk_MOVEME:
(1)  190/    8BF4 : (MACRO)              	gemaHead .blk,.pat,.ins,13
(1)  190/    8BF4 : 000D                        dc.w 13
(1)  190/    8BF6 : 0000 8C02                   dc.l .BLK
(1)  190/    8BFA : 0000 8C1A                   dc.l .PAT
(1)  190/    8BFE : 0000 9B32                   dc.l .INS
(1)  191/    8C02 :                     .blk:
(1)  192/    8C02 :                     	binclude "sound/tracks/moveme_blk.bin"
(1)  193/    8C19 :                     	align 2
(1)  194/    8C1A :                     .pat:
(1)  195/    8C1A :                     	binclude "sound/tracks/moveme_patt.bin"
(1)  196/    9B32 :                     	align 2
(1)  197/    9B32 :                     .ins:
(1)  198/    9B32 : (MACRO)              	gInsPcm -12,PcmIns_MoveMe_Hit,%10
(1)  198/    9B32 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  198/    9B36 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  199/    9B3A : (MACRO)              	gInsFm 0,FmIns_Bass_Duck
(1)  199/    9B3A : A000 00C7                   dc.b $A0,0,((FMINS_BASS_DUCK>>16)&$FF),((FMINS_BASS_DUCK>>8)&$FF)
(1)  199/    9B3E : 1400 0000                   dc.b FMINS_BASS_DUCK&$FF,$00,$00,$00
(1)  200/    9B42 : (MACRO)              	gInsPcm -12,PcmIns_MoveMe_BrassL,%11
(1)  200/    9B42 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  200/    9B46 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  201/    9B4A : (MACRO)              	gInsFm 0,FmIns_ClosedHat
(1)  201/    9B4A : A000 00CA                   dc.b $A0,0,((FMINS_CLOSEDHAT>>16)&$FF),((FMINS_CLOSEDHAT>>8)&$FF)
(1)  201/    9B4E : F400 0000                   dc.b FMINS_CLOSEDHAT&$FF,$00,$00,$00
(1)  202/    9B52 : (MACRO)              	gInsPsgN 0,$00,$00,$00,$00,$04,0,%110
(1)  202/    9B52 : 9600 0000                   dc.b $90|%110,0,$00,$00
(1)  202/    9B56 : 0000 0400                   dc.b $00,$00,$04,0
(1)  203/    9B5A : (MACRO)              	gInsFm -12,FmIns_HBeat_tom
(1)  203/    9B5A : A0F4 00CA                   dc.b $A0,-12,((FMINS_HBEAT_TOM>>16)&$FF),((FMINS_HBEAT_TOM>>8)&$FF)
(1)  203/    9B5E : 7400 0000                   dc.b FMINS_HBEAT_TOM&$FF,$00,$00,$00
(1)  204/    9B62 : (MACRO)              	gInsPcm -12,PcmIns_Snare,%10
(1)  204/    9B62 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  204/    9B66 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  205/    9B6A : (MACRO)              	gInsPcm -12,PcmIns_Kick,%10		;gInsFm -38,FmIns_DrumKick_gem
(1)  205/    9B6A : 0000 0000                   dc.b $00,$00,$00,$00
(1)  205/    9B6E : 0000 0000                   dc.b $00,$00,$00,$00
(1)  206/    9B72 : (MACRO)              	gInsFm -12,FmIns_Trumpet_carnival	;FmIns_Trumpet_2
(1)  206/    9B72 : A0F4 00C8                   dc.b $A0,-12,((FMINS_TRUMPET_CARNIVAL>>16)&$FF),((FMINS_TRUMPET_CARNIVAL>>8)&$FF)
(1)  206/    9B76 : 9400 0000                   dc.b FMINS_TRUMPET_CARNIVAL&$FF,$00,$00,$00
(1)  207/    9B7A : (MACRO)              	gInsPsg 0,$20,$20,$10,$01,$08,0		;gInsFm -12,FmIns_Ding_Baseball;
(1)  207/    9B7A : 8000 2020                   dc.b $80,0,$20,$20
(1)  207/    9B7E : 1001 0800                   dc.b $10,$01,$08,0
(1)  208/    9B82 : (MACRO)              	gInsFm3 0,FmIns_Sp_OpenHat
(1)  208/    9B82 : B000 00C5                   dc.b $B0,0,((FMINS_SP_OPENHAT>>16)&$FF),((FMINS_SP_OPENHAT>>8)&$FF)
(1)  208/    9B86 : BC00 0000                   dc.b FMINS_SP_OPENHAT&$FF,$00,$00,$00
(1)  209/    9B8A : (MACRO)              	gInsNull;gInsPwm -17,PwmIns_MyTime,%10
(1)  209/    9B8A : 0000 0000                   dc.b $00,$00,$00,$00
(1)  209/    9B8E : 0000 0000                   dc.b $00,$00,$00,$00
(1)  210/    9B92 : (MACRO)              	gInsPsg +12,$20,$10,$10,$0C,$0C,0
(1)  210/    9B92 : 800C 2010                   dc.b $80,+12,$20,$10
(1)  210/    9B96 : 100C 0C00                   dc.b $10,$0C,$0C,0
(1)  211/    9B9A : (MACRO)              	gInsPsg 0,$00,$00,$00,$00,$06,0
(1)  211/    9B9A : 8000 0000                   dc.b $80,0,$00,$00
(1)  211/    9B9E : 0000 0600                   dc.b $00,$00,$06,0
(1)  212/    9BA2 : (MACRO)              	gInsPcm -12,PcmIns_MoveMe_BrassR,%11
(1)  212/    9BA2 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  212/    9BA6 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  213/    9BAA : (MACRO)              	gInsNull
(1)  213/    9BAA : 0000 0000                   dc.b $00,$00,$00,$00
(1)  213/    9BAE : 0000 0000                   dc.b $00,$00,$00,$00
(1)  214/    9BB2 : (MACRO)              	gInsNull
(1)  214/    9BB2 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  214/    9BB6 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  215/    9BBA : (MACRO)              	gInsNull
(1)  215/    9BBA : 0000 0000                   dc.b $00,$00,$00,$00
(1)  215/    9BBE : 0000 0000                   dc.b $00,$00,$00,$00
(1)  216/    9BC2 : (MACRO)              	gInsNull
(1)  216/    9BC2 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  216/    9BC6 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  217/    9BCA :                     
(1)  218/    9BCA :                     ; ------------------------------------------------------------
(1)  219/    9BCA :                     
(1)  220/    9BCA :                     GemaTrk_Dream:
(1)  221/    9BCA : (MACRO)              	gemaHead .blk,.pat,.ins,8
(1)  221/    9BCA : 0008                        dc.w 8
(1)  221/    9BCC : 0000 9BD8                   dc.l .BLK
(1)  221/    9BD0 : 0000 9BE5                   dc.l .PAT
(1)  221/    9BD4 : 0000 B2A2                   dc.l .INS
(1)  222/    9BD8 :                     .blk:
(1)  223/    9BD8 :                     	binclude "sound/tracks/dream_blk.bin"
(1)  224/    9BE5 :                     .pat:
(1)  225/    9BE5 :                     	binclude "sound/tracks/dream_patt.bin"
(1)  226/    B2A2 :                     .ins:
(1)  227/    B2A2 : (MACRO)              	gInsFm 0,FmIns_Hats_closed
(1)  227/    B2A2 : A000 00CA                   dc.b $A0,0,((FMINS_HATS_CLOSED>>16)&$FF),((FMINS_HATS_CLOSED>>8)&$FF)
(1)  227/    B2A6 : D400 0000                   dc.b FMINS_HATS_CLOSED&$FF,$00,$00,$00
(1)  228/    B2AA : (MACRO)              	gInsDac +12,DacIns_Kick_wegot,0
(1)  228/    B2AA : C00C 0207                   dc.b $C0|0,+12,((DACINS_KICK_WEGOT>>16)&$FF),((DACINS_KICK_WEGOT>>8)&$FF)
(1)  228/    B2AE : 5400 0000                   dc.b DACINS_KICK_WEGOT&$FF,0,0,0
(1)  229/    B2B2 : (MACRO)              	gInsFm -12,FmIns_brass_eur
(1)  229/    B2B2 : A0F4 00C8                   dc.b $A0,-12,((FMINS_BRASS_EUR>>16)&$FF),((FMINS_BRASS_EUR>>8)&$FF)
(1)  229/    B2B6 : B400 0000                   dc.b FMINS_BRASS_EUR&$FF,$00,$00,$00
(1)  230/    B2BA : (MACRO)              	gInsFm -24,FmIns_Trumpet_carnival
(1)  230/    B2BA : A0E8 00C8                   dc.b $A0,-24,((FMINS_TRUMPET_CARNIVAL>>16)&$FF),((FMINS_TRUMPET_CARNIVAL>>8)&$FF)
(1)  230/    B2BE : 9400 0000                   dc.b FMINS_TRUMPET_CARNIVAL&$FF,$00,$00,$00
(1)  231/    B2C2 : (MACRO)              	gInsPsg  0,$00,$20,$00,$02,$10,0
(1)  231/    B2C2 : 8000 0020                   dc.b $80,0,$00,$20
(1)  231/    B2C6 : 0002 1000                   dc.b $00,$02,$10,0
(1)  232/    B2CA : (MACRO)              	gInsPsgN 0,$00,$10,$00,$01,$04,0,%100
(1)  232/    B2CA : 9400 0010                   dc.b $90|%100,0,$00,$10
(1)  232/    B2CE : 0001 0400                   dc.b $00,$01,$04,0
(1)  233/    B2D2 : (MACRO)              	gInsFm 0,FmIns_Bass_low_1
(1)  233/    B2D2 : A000 00C7                   dc.b $A0,0,((FMINS_BASS_LOW_1>>16)&$FF),((FMINS_BASS_LOW_1>>8)&$FF)
(1)  233/    B2D6 : B400 0000                   dc.b FMINS_BASS_LOW_1&$FF,$00,$00,$00
(1)  234/    B2DA : (MACRO)              	gInsFm 0,FmIns_Hats_1
(1)  234/    B2DA : A000 00CA                   dc.b $A0,0,((FMINS_HATS_1>>16)&$FF),((FMINS_HATS_1>>8)&$FF)
(1)  234/    B2DE : B400 0000                   dc.b FMINS_HATS_1&$FF,$00,$00,$00
(1)  235/    B2E2 : (MACRO)              	gInsPsgN 0,$00,$10,$00,$01,$08,0,%101
(1)  235/    B2E2 : 9500 0010                   dc.b $90|%101,0,$00,$10
(1)  235/    B2E6 : 0001 0800                   dc.b $00,$01,$08,0
(1)  236/    B2EA : (MACRO)              	gInsNull
(1)  236/    B2EA : 0000 0000                   dc.b $00,$00,$00,$00
(1)  236/    B2EE : 0000 0000                   dc.b $00,$00,$00,$00
(1)  237/    B2F2 : (MACRO)              	gInsNull
(1)  237/    B2F2 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  237/    B2F6 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  238/    B2FA : (MACRO)              	gInsNull
(1)  238/    B2FA : 0000 0000                   dc.b $00,$00,$00,$00
(1)  238/    B2FE : 0000 0000                   dc.b $00,$00,$00,$00
(1)  239/    B302 : (MACRO)              	gInsNull
(1)  239/    B302 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  239/    B306 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  240/    B30A : (MACRO)              	gInsPsg  0,$40,$00,$00,$00,$00,0
(1)  240/    B30A : 8000 4000                   dc.b $80,0,$40,$00
(1)  240/    B30E : 0000 0000                   dc.b $00,$00,$00,0
(1)  241/    B312 : (MACRO)              	gInsFm -12,FmIns_Trumpet_1
(1)  241/    B312 : A0F4 00C8                   dc.b $A0,-12,((FMINS_TRUMPET_1>>16)&$FF),((FMINS_TRUMPET_1>>8)&$FF)
(1)  241/    B316 : 7400 0000                   dc.b FMINS_TRUMPET_1&$FF,$00,$00,$00
(1)  242/    B31A :                     
(1)  243/    B31A :                     ; Ticks: 3-1
(1)  244/    B31A :                     ; TEMPO: 170
(1)  245/    B31A :                     GemaTrk_Crystal:
(1)  246/    B31A : (MACRO)              	gemaHead .blk,.pat,.ins,7
(1)  246/    B31A : 0007                        dc.w 7
(1)  246/    B31C : 0000 B328                   dc.l .BLK
(1)  246/    B320 : 0000 B330                   dc.l .PAT
(1)  246/    B324 : 0000 C524                   dc.l .INS
(1)  247/    B328 :                     .blk:
(1)  248/    B328 :                     	binclude "sound/tracks/crystal_blk.bin"
(1)  249/    B330 :                     .pat:
(1)  250/    B330 :                     	binclude "sound/tracks/crystal_patt.bin"
(1)  251/    C524 :                     .ins:
(1)  252/    C524 : (MACRO)              	gInsFm 0,FmIns_Organ2a
(1)  252/    C524 : A000 00C5                   dc.b $A0,0,((FMINS_ORGAN2A>>16)&$FF),((FMINS_ORGAN2A>>8)&$FF)
(1)  252/    C528 : 7400 0000                   dc.b FMINS_ORGAN2A&$FF,$00,$00,$00
(1)  253/    C52C : (MACRO)              	gInsPsgN 0,$00,$10,$00,$01,$10,0,%100
(1)  253/    C52C : 9400 0010                   dc.b $90|%100,0,$00,$10
(1)  253/    C530 : 0001 1000                   dc.b $00,$01,$10,0
(1)  254/    C534 : (MACRO)              	gInsDac 0,DacIns_Kick_wegot,0
(1)  254/    C534 : C000 0207                   dc.b $C0|0,0,((DACINS_KICK_WEGOT>>16)&$FF),((DACINS_KICK_WEGOT>>8)&$FF)
(1)  254/    C538 : 5400 0000                   dc.b DACINS_KICK_WEGOT&$FF,0,0,0
(1)  255/    C53C : (MACRO)              	gInsFm3 0,FmIns_Sp_OpenHat
(1)  255/    C53C : B000 00C5                   dc.b $B0,0,((FMINS_SP_OPENHAT>>16)&$FF),((FMINS_SP_OPENHAT>>8)&$FF)
(1)  255/    C540 : BC00 0000                   dc.b FMINS_SP_OPENHAT&$FF,$00,$00,$00
(1)  256/    C544 : (MACRO)              	gInsNull
(1)  256/    C544 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  256/    C548 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  257/    C54C : (MACRO)              	gInsFm 0,FmIns_Bass_low_1
(1)  257/    C54C : A000 00C7                   dc.b $A0,0,((FMINS_BASS_LOW_1>>16)&$FF),((FMINS_BASS_LOW_1>>8)&$FF)
(1)  257/    C550 : B400 0000                   dc.b FMINS_BASS_LOW_1&$FF,$00,$00,$00
(1)  258/    C554 :                     
(1)  259/    C554 :                     ; ; ------------------------------------------------------------
(1)  260/    C554 :                     ;
(1)  261/    C554 :                     ; GemaTrk_NadieMD:
(1)  262/    C554 :                     ; 	gemaHead .blk,.patt,.inst,7
(1)  263/    C554 :                     ; .blk:
(1)  264/    C554 :                     ; 	binclude "sound/tracks/nadie_md_blk.bin"
(1)  265/    C554 :                     ; 	align 2
(1)  266/    C554 :                     ; .patt:
(1)  267/    C554 :                     ; 	binclude "sound/tracks/nadie_md_patt.bin"
(1)  268/    C554 :                     ; 	align 2
(1)  269/    C554 :                     ; .inst:
(1)  270/    C554 :                     ; 	gInsDac 0,DacIns_Nadie,0
(1)  271/    C554 :                     ; 	gInsFm -36,FmIns_Piano_Aqua
(1)  272/    C554 :                     ; 	gInsFm -12,FmIns_HBeat_tom
(1)  273/    C554 :                     ; 	gInsFm -37,FmIns_DrumKick_gem
(1)  274/    C554 :                     ; 	gInsPsg 0,$50,$70,$00,$06,$08,0
(1)  275/    C554 :                     ; 	gInsFm 0,FmIns_Trumpet_1
(1)  276/    C554 :                     ; 	gInsNull
(1)  277/    C554 :                     ; 	gInsFm3 0,FmIns_Sp_ClosedHat
(1)  278/    C554 :                     ; 	gInsFm3 0,FmIns_Sp_OpenHat
(1)  279/    C554 :                     ;
(1)  280/    C554 :                     ; GemaTrk_NadieMCD:
(1)  281/    C554 :                     ; 	gemaHead .blk,.patt,.inst,11
(1)  282/    C554 :                     ; .blk:
(1)  283/    C554 :                     ; 	binclude "sound/tracks/nadie_mcd_blk.bin"
(1)  284/    C554 :                     ; 	align 2
(1)  285/    C554 :                     ; .patt
(1)  286/    C554 :                     ; 	binclude "sound/tracks/nadie_mcd_patt.bin"
(1)  287/    C554 :                     ; 	align 2
(1)  288/    C554 :                     ; .inst:
(1)  289/    C554 :                     ; 	gInsPcm -12,PcmIns_NadieL,%10
(1)  290/    C554 :                     ; 	gInsFm -36,FmIns_Piano_Aqua
(1)  291/    C554 :                     ; 	gInsFm -12,FmIns_HBeat_tom
(1)  292/    C554 :                     ; 	gInsPcm -12-12,PcmIns_PKick,%00
(1)  293/    C554 :                     ; 	gInsPsg 0,$50,$70,$00,$06,$08,0
(1)  294/    C554 :                     ; 	gInsFm 0,FmIns_Trumpet_1
(1)  295/    C554 :                     ; 	gInsPcm 0-12,PcmIns_Piano,%00
(1)  296/    C554 :                     ; 	gInsPcm -12-12,PcmIns_PTom,%00
(1)  297/    C554 :                     ; 	gInsPcm -12,PcmIns_NadieR,%10
(1)  298/    C554 :                     ;
(1)  299/    C554 :                     ; GemaTrk_NadieMARS:
(1)  300/    C554 :                     ; 	gemaHead .blk,.patt,.inst,11
(1)  301/    C554 :                     ; .blk:
(1)  302/    C554 :                     ; 	binclude "sound/tracks/nadie_blk.bin"
(1)  303/    C554 :                     ; 	align 2
(1)  304/    C554 :                     ; .patt
(1)  305/    C554 :                     ; 	binclude "sound/tracks/nadie_patt.bin"
(1)  306/    C554 :                     ; 	align 2
(1)  307/    C554 :                     ; .inst:
(1)  308/    C554 :                     ; 	gInsPwm 0,PwmIns_Nadie,%10
(1)  309/    C554 :                     ; 	gInsFm -36,FmIns_Piano_Aqua
(1)  310/    C554 :                     ; 	gInsFm -12,FmIns_HBeat_tom
(1)  311/    C554 :                     ; 	gInsPwm -12,PwmIns_PKick,%00
(1)  312/    C554 :                     ; 	gInsPsg 0,$50,$70,$00,$06,$08,0
(1)  313/    C554 :                     ; 	gInsFm 0,FmIns_Trumpet_1
(1)  314/    C554 :                     ; 	gInsPwm 0,PwmIns_Piano,%00
(1)  315/    C554 :                     ; 	gInsPwm -12,PwmIns_PTom,%00
(1)  316/    C554 :                     ; 	gInsNull
(1)  317/    C554 :                     
     433/    C554 :                     		include "sound/instr.asm"		; GEMA: FM instruments
(1)    1/    C554 :                     ; ===========================================================================
(1)    2/    C554 :                     ; --------------------------------------------------------
(1)    3/    C554 :                     ; GEMA/Nikona FM instruments "patches"
(1)    4/    C554 :                     ;
(1)    5/    C554 :                     ; Using .gsx save state for easy editing, use
(1)    6/    C554 :                     ; FM_EDITOR.bin in Fusion or any gsx compatible emulator
(1)    7/    C554 :                     ; to make or modify instrument data
(1)    8/    C554 :                     ; --------------------------------------------------------
(1)    9/    C554 :                     
(1)   10/    C554 :                     ; FM_EDITOR savestate data is located at:
(1)   11/    C554 :                     ; $2478
(1)   12/    C554 :                     ;
(1)   13/    C554 :                     ; Sizes:
(1)   14/    C554 :                     ; Normal FM ins: $20
(1)   15/    C554 :                     ; Special FM ins: $28
(1)   16/    C554 :                     ;
(1)   17/    C554 :                     ; INTRUMENT FORMAT:
(1)   18/    C554 :                     ; dc.b $30,$34,$38,$3C	; Register data following this order
(1)   19/    C554 :                     ; dc.b $40,$44,$48,$4C	; **
(1)   20/    C554 :                     ; dc.b $50,$54,$58,$5C	; **
(1)   21/    C554 :                     ; dc.b $60,$64,$68,$6C	; **
(1)   22/    C554 :                     ; dc.b $70,$74,$78,$7C	; **
(1)   23/    C554 :                     ; dc.b $80,$84,$88,$8C	; **
(1)   24/    C554 :                     ; dc.b $90,$94,$98,$9C	; **
(1)   25/    C554 :                     ; dc.b $B0,$B4,$22,$28	; **
(1)   26/    C554 :                     ; ** Extra words for FM3 special:
(1)   27/    C554 :                     ; dc.w OP1,OP2,OP3,OP4	; FM3 special ONLY: Manual frequencies
(1)   28/    C554 :                     ;
(1)   29/    C554 :                     ; $90,$94,$98,$9C: SSG-EG
(1)   30/    C554 :                     ; This CAN be used, but can be problematic on clone systems.
(1)   31/    C554 :                     ;
(1)   32/    C554 :                     ; $B4 PAN, PMS, AMS: %00aa0ppp
(1)   33/    C554 :                     ; Keep panning bits 0, set the panning in your track.
(1)   34/    C554 :                     ;
(1)   35/    C554 :                     ; $22 LFO: %0000evvv
(1)   36/    C554 :                     ; e - Enable
(1)   37/    C554 :                     ; v - Value
(1)   38/    C554 :                     ; $28 KEYS: %oooo0000
(1)   39/    C554 :                     ; o - Operators 4-1
(1)   40/    C554 :                     ; --------------------------------------------------------
(1)   41/    C554 :                     
(1)   42/    C554 :                     ; TODO: a macro for this.
(1)   43/    C554 :                     
(1)   44/    C554 :                     FmIns_Organ2:
(1)   45/    C554 :                     		binclude "sound/instr/fm/organ2.gsx",$2478,$20
(1)   46/    C574 :                     FmIns_Organ2a:
(1)   47/    C574 :                     		binclude "sound/instr/fm/organ2a.gsx",$2478,$20
(1)   48/    C594 :                     
(1)   49/    C594 :                     ; FM3 Special
(1)   50/    C594 :                     FmIns_Fm3_Explosion:
(1)   51/    C594 :                     		binclude "sound/instr/fm/OLD/fm3_sfx_boomworm.gsx",$2478,$28
(1)   52/    C5BC :                     FmIns_Sp_OpenHat:
(1)   53/    C5BC :                     		binclude "sound/instr/fm/OLD/fm3_openhat.gsx",$2478,$28
(1)   54/    C5E4 :                     FmIns_Sp_ClosedHat:
(1)   55/    C5E4 :                     		binclude "sound/instr/fm/OLD/fm3_closedhat.gsx",$2478,$28
(1)   56/    C60C :                     FmIns_Sp_Cowbell:
(1)   57/    C60C :                     		binclude "sound/instr/fm/OLD/fm3_cowbell.gsx",$2478,$28
(1)   58/    C634 :                     ; BASS
(1)   59/    C634 :                     FmIns_Bass_1:
(1)   60/    C634 :                     		binclude "sound/instr/fm/OLD/bass_low.gsx",$2478,$20
(1)   61/    C654 :                     FmIns_Bass_2:
(1)   62/    C654 :                     		binclude "sound/instr/fm/OLD/bass_strong.gsx",$2478,$20
(1)   63/    C674 :                     FmIns_Bass_donna:
(1)   64/    C674 :                     		binclude "sound/instr/fm/OLD/bass_feellove.gsx",$2478,$20
(1)   65/    C694 :                     FmIns_Bass_groove:
(1)   66/    C694 :                     		binclude "sound/instr/fm/OLD/bass_groove.gsx",$2478,$20
(1)   67/    C6B4 :                     FmIns_Bass_groove_2:
(1)   68/    C6B4 :                     		binclude "sound/instr/fm/OLD/bass_groove_2.gsx",$2478,$20
(1)   69/    C6D4 :                     FmIns_Bass_groove_gem:
(1)   70/    C6D4 :                     		binclude "sound/instr/fm/OLD/bass_groove_gem.gsx",$2478,$20
(1)   71/    C6F4 :                     FmIns_Bass_italo:
(1)   72/    C6F4 :                     		binclude "sound/instr/fm/OLD/bass_italo.gsx",$2478,$20
(1)   73/    C714 :                     FmIns_Bass_duck:
(1)   74/    C714 :                     		binclude "sound/instr/fm/OLD/bass_duck.gsx",$2478,$20
(1)   75/    C734 :                     FmIns_Bass_4:
(1)   76/    C734 :                     		binclude "sound/instr/fm/OLD/bass_4.gsx",$2478,$20
(1)   77/    C754 :                     FmIns_Bass_8:
(1)   78/    C754 :                     		binclude "sound/instr/fm/OLD/bass_8.gsx",$2478,$20
(1)   79/    C774 :                     FmIns_Bass_club:
(1)   80/    C774 :                     		binclude "sound/instr/fm/OLD/OLD_bass_club.gsx",$2478,$20
(1)   81/    C794 :                     FmIns_Bass_calm:
(1)   82/    C794 :                     		binclude "sound/instr/fm/OLD/bass_calm.gsx",$2478,$20
(1)   83/    C7B4 :                     FmIns_Bass_low_1:
(1)   84/    C7B4 :                     		binclude "sound/instr/fm/OLD/bass_low_1.bin"
(1)   85/    C7D4 :                     FmIns_Bass_Oil:
(1)   86/    C7D4 :                     		binclude "sound/instr/fm/OLD/bass_oil.gsx",$2478,$20
(1)   87/    C7F4 :                     
(1)   88/    C7F4 :                     ; PIANO
(1)   89/    C7F4 :                     FmIns_PianoM1:
(1)   90/    C7F4 :                     		binclude "sound/instr/fm/OLD/piano_m1.gsx",$2478,$20
(1)   91/    C814 :                     FmIns_Piano_Aqua:
(1)   92/    C814 :                     		binclude "sound/instr/fm/OLD/piano_aqua.gsx",$2478,$20
(1)   93/    C834 :                     FmIns_Piano_Hard:
(1)   94/    C834 :                     		binclude "sound/instr/fm/OLD/piano_hard.bin"
(1)   95/    C854 :                     ; FmIns_Piano_m1:
(1)   96/    C854 :                     ; 		binclude "sound/instr/fm/OLD/piano_m1.gsx",$2478,$20
(1)   97/    C854 :                     
(1)   98/    C854 :                     
(1)   99/    C854 :                     FmIns_Synth_Plus:
(1)  100/    C854 :                     		binclude "sound/instr/fm/OLD/OLD_synthplus.gsx",$2478,$20
(1)  101/    C874 :                     
(1)  102/    C874 :                     FmIns_Trumpet_1:
(1)  103/    C874 :                     		binclude "sound/instr/fm/OLD/OLD_trumpet_1.gsx",$2478,$20
(1)  104/    C894 :                     FmIns_Trumpet_carnival:
(1)  105/    C894 :                     		binclude "sound/instr/fm/OLD/OLD_trumpet_carnivl.gsx",$2478,$20
(1)  106/    C8B4 :                     
(1)  107/    C8B4 :                     
(1)  108/    C8B4 :                     FmIns_brass_eur:
(1)  109/    C8B4 :                     		binclude "sound/instr/fm/OLD/OLD_brass_eur.gsx",$2478,$20
(1)  110/    C8D4 :                     FmIns_Brass_Puy:
(1)  111/    C8D4 :                     		binclude "sound/instr/fm/OLD/brass_puy.gsx",$2478,$20
(1)  112/    C8F4 :                     
(1)  113/    C8F4 :                     
(1)  114/    C8F4 :                     FmIns_Organ_Ito:
(1)  115/    C8F4 :                     		binclude "sound/instr/fm/OLD/organ_ito.gsx",$2478,$20
(1)  116/    C914 :                     FmIns_Ding_Baseball:
(1)  117/    C914 :                     		binclude "sound/instr/fm/OLD/ding_baseball.gsx",$2478,$20
(1)  118/    C934 :                     FmIns_DrumKick_gem:
(1)  119/    C934 :                     		binclude "sound/instr/fm/OLD/drum_kick_gem.gsx",$2478,$20
(1)  120/    C954 :                     
(1)  121/    C954 :                     
(1)  122/    C954 :                     FmIns_Trumpet_2:
(1)  123/    C954 :                     		binclude "sound/instr/fm/OLD/trumpet_2.gsx",$2478,$20
(1)  124/    C974 :                     FmIns_Trumpet_puy:
(1)  125/    C974 :                     		binclude "sound/instr/fm/OLD/trumpet_puy.gsx",$2478,$20
(1)  126/    C994 :                     FmIns_Marimba:
(1)  127/    C994 :                     		binclude "sound/instr/fm/OLD/marimba.gsx",$2478,$20
(1)  128/    C9B4 :                     
(1)  129/    C9B4 :                     FmIns_Ding_toy:
(1)  130/    C9B4 :                     		binclude "sound/instr/fm/OLD/ding_toy.gsx",$2478,$20
(1)  131/    C9D4 :                     
(1)  132/    C9D4 :                     FmIns_Flaute_cave:
(1)  133/    C9D4 :                     		binclude "sound/instr/fm/OLD/flaute_sea.gsx",$2478,$20
(1)  134/    C9F4 :                     FmIns_Banjo_puy:
(1)  135/    C9F4 :                     		binclude "sound/instr/fm/OLD/banjo_puy.gsx",$2478,$20
(1)  136/    CA14 :                     FmIns_PSynth_plus:
(1)  137/    CA14 :                     		binclude "sound/instr/fm/OLD/psynth_plus.gsx",$2478,$20
(1)  138/    CA34 :                     FmIns_Ding_1:
(1)  139/    CA34 :                     		binclude "sound/instr/fm/OLD/ding_gem.gsx",$2478,$20
(1)  140/    CA54 :                     FmIns_Trombone_gem:
(1)  141/    CA54 :                     		binclude "sound/instr/fm/OLD/trombone_gem.gsx",$2478,$20
(1)  142/    CA74 :                     FmIns_HBeat_tom:
(1)  143/    CA74 :                     		binclude "sound/instr/fm/OLD/nadia_tom.gsx",$2478,$20
(1)  144/    CA94 :                     FmIns_Guitar_bball:
(1)  145/    CA94 :                     		binclude "sound/instr/fm/OLD/guitar_bball.gsx",$2478,$20
(1)  146/    CAB4 :                     
(1)  147/    CAB4 :                     FmIns_Hats_1:
(1)  148/    CAB4 :                     		binclude "sound/instr/fm/OLD/fm_hats_spot.bin"
(1)  149/    CAD4 :                     FmIns_Hats_closed:
(1)  150/    CAD4 :                     		binclude "sound/instr/fm/OLD/hats_closed.gsx",$2478,$20
(1)  151/    CAF4 :                     FmIns_ClosedHat:
(1)  152/    CAF4 :                     		binclude "sound/instr/fm/OLD/hats_closed.gsx",$2478,$20
(1)  153/    CB14 :                     
(1)  154/    CB14 :                     FmIns_Sewer_1:
(1)  155/    CB14 :                     		binclude "sound/instr/fm/OLD/sewer_1.bin"
(1)  156/    CB34 :                     
(1)  157/    CB34 :                     
(1)  158/    CB34 :                     FmIns_Ambient_dark:
(1)  159/    CB34 :                     		binclude "sound/instr/fm/OLD/ambient_dark.gsx",$2478,$20
(1)  160/    CB54 :                     FmIns_Ambient_spook:
(1)  161/    CB54 :                     		binclude "sound/instr/fm/OLD/ambient_spook.gsx",$2478,$20
(1)  162/    CB74 :                     FmIns_Ambient_3:
(1)  163/    CB74 :                     		binclude "sound/instr/fm/OLD/ambient_3.gsx",$2478,$20
(1)  164/    CB94 :                     
(1)  165/    CB94 :                     
(1)  166/    CB94 :                     ; FmIns_Guitar_bball:
(1)  167/    CB94 :                     ; 		binclude "sound/instr/fm/guitar_bball.gsx",$2478,$20
(1)  168/    CB94 :                     
     434/    CB94 :                     		include "sound/smpl_dac.asm"		; (MCD/CD32X ONLY) GEMA: DAC samples
(1)    1/    CB94 :                     ; ===========================================================================
(1)    2/    CB94 :                     ; --------------------------------------------------------
(1)    3/    CB94 :                     ; GEMA/Nikona DAC instruments
(1)    4/    CB94 :                     ;
(1)    5/    CB94 :                     ; This must be located at the 68k's 900000 area.
(1)    6/    CB94 :                     ; ** 68K BANK 0 only **
(1)    7/    CB94 :                     ;
(1)    8/    CB94 :                     ; BASE Samplerate is at 16000hz
(1)    9/    CB94 :                     ; --------------------------------------------------------
(1)   10/    CB94 :                     
(1)   11/    CB94 :                     	align $8000	; Start from a safe ROM-bank
(1)   12/   10000 :                     
(1)   13/   10000 :                     ; --------------------------------------------------------
(1)   14/   10000 :                     
(1)   15/   10000 :                     ; 	gSmplData Label,"filepath",loop_point(0-start)
(1)   16/   10000 : (MACRO)              	gSmplData DacIns_Nadie,"sound/instr/smpl/nadie.wav",0
(1)   16/   10000 : =$10000              DACINS_NADIE    label *
(1)   16/   10000 : B4DF 00                     dc.b ((DACINS_NADIE_e-DACINS_NADIE_s)&$FF),(((DACINS_NADIE_e-DACINS_NADIE_s)>>8)&$FF),(((DACINS_NADIE_e-DACINS_NADIE_s)>>16)&$FF)
(1)   16/   10003 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   16/   10006 :                     DACINS_NADIE_s:
(1)   16/   10006 :                             binclude "sound/instr/smpl/nadie.wav",$2C
(1)   16/   1DFBA :                     DACINS_NADIE_e:
(1)   17/   1DFBA : (MACRO)              	gSmplData DacIns_Kick_techno,"sound/instr/smpl/ST-72_kick.wav",0
(1)   17/   1DFBA : =$1DFBA              DACINS_KICK_TECHNO    label *
(1)   17/   1DFBA : 9C06 00                     dc.b ((DACINS_KICK_TECHNO_e-DACINS_KICK_TECHNO_s)&$FF),(((DACINS_KICK_TECHNO_e-DACINS_KICK_TECHNO_s)>>8)&$FF),(((DACINS_KICK_TECHNO_e-DACINS_KICK_TECHNO_s)>>16)&$FF)
(1)   17/   1DFBD : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   17/   1DFC0 :                     DACINS_KICK_TECHNO_s:
(1)   17/   1DFC0 :                             binclude "sound/instr/smpl/ST-72_kick.wav",$2C
(1)   17/   1E65C :                     DACINS_KICK_TECHNO_e:
(1)   18/   1E65C : (MACRO)              	gSmplData DacIns_Snare_techno,"sound/instr/smpl/ST-79_snare.wav",0
(1)   18/   1E65C : =$1E65C              DACINS_SNARE_TECHNO    label *
(1)   18/   1E65C : F220 00                     dc.b ((DACINS_SNARE_TECHNO_e-DACINS_SNARE_TECHNO_s)&$FF),(((DACINS_SNARE_TECHNO_e-DACINS_SNARE_TECHNO_s)>>8)&$FF),(((DACINS_SNARE_TECHNO_e-DACINS_SNARE_TECHNO_s)>>16)&$FF)
(1)   18/   1E65F : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   18/   1E662 :                     DACINS_SNARE_TECHNO_s:
(1)   18/   1E662 :                             binclude "sound/instr/smpl/ST-79_snare.wav",$2C
(1)   18/   20754 :                     DACINS_SNARE_TECHNO_e:
(1)   19/   20754 : (MACRO)              	gSmplData DacIns_Kick_wegot,"sound/instr/smpl/wegot_kick.wav",0
(1)   19/   20754 : =$20754              DACINS_KICK_WEGOT    label *
(1)   19/   20754 : 7407 00                     dc.b ((DACINS_KICK_WEGOT_e-DACINS_KICK_WEGOT_s)&$FF),(((DACINS_KICK_WEGOT_e-DACINS_KICK_WEGOT_s)>>8)&$FF),(((DACINS_KICK_WEGOT_e-DACINS_KICK_WEGOT_s)>>16)&$FF)
(1)   19/   20757 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   19/   2075A :                     DACINS_KICK_WEGOT_s:
(1)   19/   2075A :                             binclude "sound/instr/smpl/wegot_kick.wav",$2C
(1)   19/   20ECE :                     DACINS_KICK_WEGOT_e:
(1)   20/   20ECE :                     
     435/   20ECE :                     mdbank0_e:
     436/   20ECE : (MACRO)              	data_bkend MCD_DBANK0,MCD_DBANK0_e,mdbank0_e-mdbank0
     436/   20ECE :                     
     436/   20ECE :                     
     437/   20ECE :                     
     438/   20ECE :                     ; --------------------------------------------------------
     439/   20ECE :                     ; BANK 1
     440/   20ECE :                     ; --------------------------------------------------------
     441/   20ECE :                     
     442/   20ECE :                     ; 	data_bank MCD_DBANK1,-1
     443/   20ECE :                     ; 		org $200000-4
     444/   20ECE :                     ; 		dc.b "BNK1"
     445/   20ECE :                     ; 	data_bank_e MCD_DBANK1_e
     446/   20ECE :                     
     447/   20ECE :                     ; --------------------------------------------------------
     448/   20ECE :                     ; BANK 2
     449/   20ECE :                     ; --------------------------------------------------------
     450/   20ECE :                     
     451/   20ECE :                     ; 	data_bank MCD_DBANK2,-1
     452/   20ECE :                     ; 		org $300000-4
     453/   20ECE :                     ; 		dc.b "BNK2"
     454/   20ECE :                     ; 	data_bank_e MCD_DBANK2_e
     455/   20ECE :                     
     456/   20ECE :                     ; --------------------------------------------------------
     457/   20ECE :                     ; BANK 3
     458/   20ECE :                     ; --------------------------------------------------------
     459/   20ECE :                     
     460/   20ECE :                     ; 	data_bank MCD_DBANK3,-1
     461/   20ECE :                     ; 		org $400000-4
     462/   20ECE :                     ; 		dc.b "BNK3"
     463/   20ECE :                     ; 	data_bank_e MCD_DBANK3_e
     464/   20ECE :                     
     465/   20ECE :                     ; ====================================================================
     466/   20ECE :                     ; ----------------------------------------------------------------
     467/   20ECE :                     ; 32X/CD32X ONLY
     468/   20ECE :                     ;
     469/   20ECE :                     ; SDRAM DATA packages for each screen mode
     470/   20ECE :                     ;
     471/   20ECE :                     ; Usage:
     472/   20ECE :                     ; sdram_bank START_LABEL,END_LABEL
     473/   20ECE :                     ; (includes and bincludes)
     474/   20ECE :                     ; sdram_bank_e START_LABEL,END_LABEL
     475/   20ECE :                     ; ----------------------------------------------------------------
     476/   20ECE :                     
     477/   20ECE :                     ; ---------------------------------------------
     478/   20ECE :                     ; SCREEN 00
     479/   20ECE :                     ; ---------------------------------------------
     480/   20ECE :                     
     481/   20ECE : (MACRO)              	sdram_bkset MARSDATA_SCREEN00,MARSDATA_SCREEN00_e
     481/   20ECE :                     ; MARSDATA_DEFAULT:
     481/   20ECE : =$20ECE              MARSDATA_SCREEN00 label *
     482/   20ECE :                     	include "game/screen_0/data_mgfx.asm"
(1)    1/   20ECE :                     ; ===========================================================================
(1)    2/   20ECE :                     ; ----------------------------------------------------------------
(1)    3/   20ECE :                     ; Put your 32X graphics here
(1)    4/   20ECE :                     ;
(1)    5/   20ECE :                     ; This is stored on the Genesis side and then
(1)    6/   20ECE :                     ; sent to SDRAM using DREQ.
(1)    7/   20ECE :                     ;
(1)    8/   20ECE :                     ; Labels MUST be aligned by 4
(1)    9/   20ECE :                     ; ----------------------------------------------------------------
(1)   10/   20ECE :                     
(1)   11/   20ECE :                     		align 4
(1)   12/   20ED0 :                     ArtMars_Scrn0:
(1)   13/   20ED0 :                     		binclude "game/screen_0/data/mars/maps/test/data_art.bin"
(1)   14/   326D0 :                     		align 4
(1)   15/   326D0 :                     
(1)   16/   326D0 :                     
(1)   17/   326D0 :                     
     483/   326D0 : (MACRO)              	sdram_bkend MARSDATA_SCREEN00,MARSDATA_SCREEN00_e
     483/   326D0 :                     
     484/   326D0 :                     
     485/   326D0 :                     ; ---------------------------------------------
     486/   326D0 :                     ; SCREEN 01
     487/   326D0 :                     ; ---------------------------------------------
     488/   326D0 :                     
     489/   326D0 : (MACRO)              	sdram_bkset MARSDATA_SCREEN01,MARSDATA_SCREEN01_e
     489/   326D0 :                     ; MARSDATA_DEFAULT:
     489/   326D0 : =$326D0              MARSDATA_SCREEN01 label *
     490/   326D0 :                     	include "game/screen_1/data_mgfx.asm"
(1)    1/   326D0 :                     ; ===========================================================================
(1)    2/   326D0 :                     ; ----------------------------------------------------------------
(1)    3/   326D0 :                     ; Put your 32X graphics here, indexed or direct
(1)    4/   326D0 :                     ;
(1)    5/   326D0 :                     ; This is stored on the Genesis side and then
(1)    6/   326D0 :                     ; sent to SDRAM using DREQ.
(1)    7/   326D0 :                     ;
(1)    8/   326D0 :                     ; Labels MUST be aligned by 4
(1)    9/   326D0 :                     ; ----------------------------------------------------------------
(1)   10/   326D0 :                     
(1)   11/   326D0 :                     		align 4
(1)   12/   326D0 :                     ArtMars_TEST:
(1)   13/   326D0 :                     		binclude "game/screen_1/data/mars/maps/test/data_art.bin"
(1)   14/   442D0 :                     		align 4
(1)   15/   442D0 :                     
(1)   16/   442D0 :                     
(1)   17/   442D0 :                     
     491/   442D0 : (MACRO)              	sdram_bkend MARSDATA_SCREEN01,MARSDATA_SCREEN01_e
     491/   442D0 :                     
     492/   442D0 :                     
     493/   442D0 :                     ; ====================================================================
     494/   442D0 :                     ; ----------------------------------------------------------------
     495/   442D0 :                     ; Cartridge DMA graphics data
     496/   442D0 :                     ;
     497/   442D0 :                     ; BANK-free on 32X Cartridge
     498/   442D0 :                     ; ----------------------------------------------------------------
     499/   442D0 :                     
     501/   442D0 :                     		include "game/screen_0/data_dma.asm"
(1)    1/   442D0 :                     ; ===========================================================================
(1)    2/   442D0 :                     ; ----------------------------------------------------------------
(1)    3/   442D0 :                     ; DMA Genesis graphics for this screen mode
(1)    4/   442D0 :                     ; ----------------------------------------------------------------
(1)    5/   442D0 :                     
(1)    6/   442D0 :                     ASCII_FONT:	binclude "system/md/data/font.bin"
(1)    7/   44ED0 :                     
(1)    8/   44ED0 :                     ; ----------------------------------------------------------------
(1)    9/   44ED0 :                     
(1)   10/   44ED0 :                     Art_Scn0_BG:	binclude "game/screen_0/data/md/maps/test/md_art.bin"
(1)   11/   4D070 :                     Art_Scn0_BG_e:
(1)   12/   4D070 :                     		align 2
(1)   13/   4D070 :                     Art_Emily:	binclude "game/screen_0/data/md/objects/emily/emi_art.bin"
(1)   14/   4FBF0 :                     Art_Emily_e:
(1)   15/   4FBF0 :                     		align 2
(1)   16/   4FBF0 :                     Art_Doremi:	binclude "game/screen_0/data/md/objects/doremi/doremi_art.bin"
(1)   17/   501F0 :                     Art_Doremi_e:
(1)   18/   501F0 :                     		align 2
(1)   19/   501F0 :                     Art_Bibi:	binclude "game/screen_0/data/md/objects/bibi/bibi_art.bin"
(1)   20/   51A10 :                     Art_Bibi_e:
(1)   21/   51A10 :                     		align 2
(1)   22/   51A10 :                     Art_Sophie:	binclude "game/screen_0/data/md/objects/sophie/sophie_art.bin"
(1)   23/   524F0 :                     Art_Sophie_e:
(1)   24/   524F0 :                     		align 2
(1)   25/   524F0 :                     
     502/   524F0 :                     		include "game/screen_1/data_dma.asm"
(1)    1/   524F0 :                     ; ===========================================================================
(1)    2/   524F0 :                     ; ----------------------------------------------------------------
(1)    3/   524F0 :                     ; DMA Genesis graphics for this screen mode
(1)    4/   524F0 :                     ; ----------------------------------------------------------------
(1)    5/   524F0 :                     
(1)    6/   524F0 :                     ASCII_FONT_S1:	binclude "system/md/data/font.bin"
(1)    7/   530F0 :                     
(1)    8/   530F0 :                     ; ----------------------------------------------------------------
(1)    9/   530F0 :                     
(1)   10/   530F0 :                     ART_TEST:	binclude "game/screen_1/data/md/maps/test/md_art.bin"
(1)   11/   5B870 :                     ART_TEST_e:
(1)   12/   5B870 :                     		align 2
(1)   13/   5B870 :                     Art_Sisi:	binclude "game/screen_1/data/md/objects/sisi/sisi_art.bin"
(1)   14/   5BE50 :                     Art_Sisi_e:
(1)   15/   5BE50 :                     		align 2
(1)   16/   5BE50 :                     
     504/   5BE50 :                     
     505/   5BE50 :                     ; ====================================================================
     506/   5BE50 :                     ; ---------------------------------------------
     507/   5BE50 :                     ; End
     508/   5BE50 :                     ; ---------------------------------------------
     509/   5BE50 :                     
     510/   5BE50 :                     ROM_END:
     515/   5BE50 :                     		align $8000			; Cartridge padding
     517/   60000 :                     
 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 3 - 03/11/2024 09:54:36 PM


  Symbol Table (* = unused):
  --------------------------

*ADAPTER :                        0 - | *ADEN :                           2 - |
 ALV :                           24 - |
*ARCHITECTURE :                                      "x86_64-unknown-linux" - |
*ARTMARS_SCRN0 :              20ED0 C | *ARTMARS_TEST :               326D0 C |
 ART_BIBI :                   501F0 C | *ART_BIBI_E :                 51A10 C |
 ART_DOREMI :                 4FBF0 C | *ART_DOREMI_E :               501F0 C |
 ART_EMILY :                  4D070 C | *ART_EMILY_E :                4FBF0 C |
*ART_SCN0_BG :                44ED0 C | *ART_SCN0_BG_E :              4D070 C |
 ART_SISI :                   5B870 C |  ART_SISI_E :                 5BE50 C |
 ART_SOPHIE :                 51A10 C | *ART_SOPHIE_E :               524F0 C |
 ART_TEST :                   530F0 C |  ART_TEST_E :                 5B870 C |
 ASCII_FONT :                 442D0 C |  ASCII_FONT_S1 :              524F0 C |
 ASCII_PAL :                    3E8 C |  ATK :                            8 - |
*BIGENDIAN :                      0 - | *BITBGON :                        7 - |
*BITCLICKL :                      0 - | *BITCLICKM :                      2 - |
*BITCLICKR :                      1 - | *BITCLICKS :                      3 - |
 BITDISPENBL :                    6 - |  BITDMA :                         1 - |
 BITDMAENBL :                     4 - | *BITDRWD :                        2 - |
*BITDRWL :                        1 - | *BITDRWR :                        0 - |
*BITDRWU :                        3 - | *BITFIFOE :                       9 - |
*BITFIFOF :                       8 - | *BITHBLK :                        2 - |
*BITHINTENBL :                    4 - | *BITHVSTOP :                      1 - |
*BITJOYA :                        6 - |  BITJOYB :                        4 - |
 BITJOYC :                        5 - |  BITJOYDOWN :                     1 - |
 BITJOYLEFT :                     2 - | *BITJOYMODE :                     B - |
 BITJOYRIGHT :                    3 - |  BITJOYSTART :                    7 - |
 BITJOYUP :                       0 - | *BITJOYX :                        A - |
*BITJOYY :                        9 - | *BITJOYZ :                        8 - |
*BITMAPMD :                       1 - | *BITMARSBG :                      6 - |
 BITOBJ_FLIPH :                   0 - |  BITOBJ_FLIPV :                   1 - |
 BITOBJ_MARS :                    7 - | *BITODD :                         4 - |
*BITPAL :                         0 - | *BITSPRCOL :                      5 - |
*BITSPROVR :                      6 - | *BITV30 :                         3 - |
 BITVBLK :                        3 - | *BITVINT :                        7 - |
*BITVINTENBL :                    5 - | *BITWRAMMODE :                    2 - |
*BRANCHEXT :                      0 - | *CART :                           1 - |
*CASESENSITIVE :                  0 - |  CDRAMDST :                      31 C |
 CDRAMLEN :                      30 C |  CDRAMSRC :                      33 C |
 CDRAMSRCB :                     35 C |  CHECK_THISRAM :   FFFFFFFFFFFFA000 C |
 CHIP_ENV :                    107A C |  CHIP_ENV.ATKEND :             10FD C |
*CHIP_ENV.ATKZERO :            1100 C |  CHIP_ENV.CHK2 :               1106 C |
 CHIP_ENV.CHK4 :               113B C |  CHIP_ENV.CKOF :               109E C |
 CHIP_ENV.CKON :               10B1 C | *CHIP_ENV.DECTMR :             110A C |
 CHIP_ENV.DKADD :              1124 C |  CHIP_ENV.DKSAV :              112C C |
 CHIP_ENV.DKYEND :             1131 C |  CHIP_ENV.DO_NFREQ :           1190 C |
 CHIP_ENV.ENVPROC :            10CF C |  CHIP_ENV.KILLENV :            1151 C |
*CHIP_ENV.NBLOCK :             10CF C |  CHIP_ENV.NORMAL :             118B C |
 CHIP_ENV.NOUPD :              11D1 C |  CHIP_ENV.NSKIP :              10C6 C |
 CHIP_ENV.SILNC_3 :            1187 C |  CHIP_ENV.VEDLP :              1159 C |
 CHIP_ENV.VLMUCH :             11BD C |  CHIP_ENV.VLOOP :              1086 C |
 CHIP_ENV.VONLY :              11B3 C |  CHNL_CHIP :                      1 - |
 CHNL_EFFARG :                    6 - |  CHNL_EFFID :                     5 - |
 CHNL_FLAGS :                     0 - |  CHNL_INS :                       3 - |
 CHNL_NOTE :                      2 - |  CHNL_TYPE :                      7 - |
 CHNL_VOL :                       4 - | *CLICKL :                         2 - |
*CLICKM :                         4 - | *CLICKR :                         1 - |
*CLICKS :                         8 - | *CMDINTCLR :                     1A - |
*CMDIRQ_ON :                      2 - |  COM :                            0 - |
*COMM0 :                         20 - | *COMM1 :                         21 - |
*COMM10 :                        2A - | *COMM11 :                        2B - |
*COMM12 :                        2C - | *COMM13 :                        2D - |
*COMM14 :                        2E - | *COMM15 :                        2F - |
*COMM2 :                         22 - | *COMM3 :                         23 - |
*COMM4 :                         24 - | *COMM5 :                         25 - |
*COMM6 :                         26 - | *COMM7 :                         27 - |
*COMM8 :                         28 - | *COMM9 :                         29 - |
 COMMZFIFO :                     40 C |  COMMZREAD :                     3F C |
 COMMZROMBLK :                   2F C |  COMMZWRITE :                    2E C |
*COMPMODE :                       0 - | *CONSTPI :        3.141592653589793 - |
 CONTROLLER_1 :    FFFFFFFFFFFFC004 - | *CONTROLLER_2 :    FFFFFFFFFFFFC014 - |
*CS0 :                            0 - | *CS1 :                      2000000 - |
 CS2 :                      4000000 - | *CS3 :                      6000000 - |
 CURRTICKBITS :                1C98 C | *CUSTOM :                         0 - |
*CYCLE :                         32 - | *DACINS_KICK_TECHNO :         1DFBA C |
 DACINS_KICK_WEGOT :          20754 C | *DACINS_NADIE :               10000 C |
*DACINS_SNARE_TECHNO :        1E65C C |  DAC_FILL :                      20 C |
 DAC_ME :                         8 C |  DAC_OFF :                     120C C |
 DAC_ON :                      11F7 C |  DAC_PLAY :                    1221 C |
 DAC_REFILL :                  1255 C |  DAC_REFILL.DACFILL_END :      1314 C |
 DAC_REFILL.DACFILL_LOOP :     12CD C |  DAC_REFILL.DACFILL_RET :      1317 C |
 DAC_REFILL.DAC_OVER :         12A3 C |  DATE :                "03/11/2024" - |
 DDACCNTR :                    1C87 C |  DDACFIFOMID :                 1C83 C |
 DDACPNTR :                    1C84 C | *DISPENBL :                      40 - |
 DKY :                            C - | *DMAENBL :                       10 - |
*DOTTEDSTRUCTS :                  0 - | *DREQCTL :                        6 - |
*DREQDEST :                       C - | *DREQFIFO :                      12 - |
*DREQLEN :                       10 - | *DREQSOURCE :                     8 - |
 DRV_LOOP :                      54 C |  DRV_LOOP.CMND_0 :               EA C |
 DRV_LOOP.CMND_1 :               ED C |  DRV_LOOP.CMND_2 :              106 C |
 DRV_LOOP.CMND_3 :              143 C |  DRV_LOOP.CMND_5 :              181 C |
 DRV_LOOP.CMND_6 :              1BA C |  DRV_LOOP.CMND_7 :              1F3 C |
 DRV_LOOP.CMND_RDSLOT :         204 C |  DRV_LOOP.DEL_ALL :             17A C |
 DRV_LOOP.GETCBYTEL :            BD C |  DRV_LOOP.GRAB_ARG :             BB C |
 DRV_LOOP.LIST :                 DA C |  DRV_LOOP.NEITHER :              94 C |
 DRV_LOOP.NEXT_CMD :             98 C |  DRV_LOOP.NOBEATS :              7B C |
 DRV_LOOP.NOTICKS :              6E C |  DRV_LOOP.SRCH_DEL :            161 C |
 DRV_LOOP.SRCH_FVOL :           19F C |  DRV_LOOP.SRCH_MODE :           129 C |
 DRV_LOOP.SRCH_SLOT :           217 C |  DRV_LOOP.SRCH_VOL :            1D8 C |
 DRV_LOOP.WRTTO_DEL :           16E C |  DRV_LOOP.WRTTO_FVOL :          1AC C |
 DRV_LOOP.WRTTO_SLOT :          138 C |  DRV_LOOP.WRTTO_VOL :           1E5 C |
 DTBL_MULTI :                   837 C |  DTBL_SINGL :                   84D C |
 DTBL_SINGL.CHNL_ULNK :         F19 C |  DTBL_SINGL.CHNL_ULNKCUT :      F13 C |
 DTBL_SINGL.CHNL_ULNKOFF :      F19 C |  DTBL_SINGL.COMN_PANLIST :      CC1 C |
 DTBL_SINGL.DAC_CUT :           B96 C |  DTBL_SINGL.DAC_OFF :           B9C C |
 DTBL_SINGL.DAC_PITCH :         B9F C |  DTBL_SINGL.D_CONT :            C7A C |
 DTBL_SINGL.EFFC :              BE7 C |  DTBL_SINGL.EFFC_D :            C02 C |
 DTBL_SINGL.EFFC_E :            C45 C |  DTBL_SINGL.EFFC_F :            C5A C |
 DTBL_SINGL.EFFC_X :            C7B C |  DTBL_SINGL.FINE_DOWN :         C1D C |
 DTBL_SINGL.FINE_UP :           C31 C |  DTBL_SINGL.FM_CINDX :          B30 C |
 DTBL_SINGL.FM_CUT :            A7B C |  DTBL_SINGL.FM_HASVOL :         EAD C |
 DTBL_SINGL.FM_KEYOFF :         A84 C |  DTBL_SINGL.FM_OFF :            A75 C |
 DTBL_SINGL.FM_SETFREQ :        AA3 C |  DTBL_SINGL.FM_SETRLIST :       DC4 C |
 DTBL_SINGL.FM_TLOFF :          A8C C |  DTBL_SINGL.FM_WRTALPAN :       B38 C |
 DTBL_SINGL.FM_WRTLVOL :        ABA C |  DTBL_SINGL.FND_OCT :           EFE C |
 DTBL_SINGL.FROM_PSGN :         947 C |  DTBL_SINGL.GET_OCT :           EF3 C |
 DTBL_SINGL.INST :              CF2 C |  DTBL_SINGL.INS_DAC :           DD4 C |
 DTBL_SINGL.INS_FM :            D53 C |  DTBL_SINGL.INS_PCM :           E28 C |
 DTBL_SINGL.INS_PSG :           D1D C |  DTBL_SINGL.INS_PSGN :          D17 C |
 DTBL_SINGL.INS_PWM :           E60 C | *DTBL_SINGL.INVL_INS :          D16 C |
 DTBL_SINGL.KEEP_TLMX :         B25 C |  DTBL_SINGL.KYCUT_PSG :         993 C |
 DTBL_SINGL.KYCUT_PSGN :        990 C |  DTBL_SINGL.KYOFF_PSG :         986 C |
 DTBL_SINGL.KYOFF_PSGN :        983 C |  DTBL_SINGL.KYPSGN_HATOFF :     99D C |
 DTBL_SINGL.LINKED :            8B7 C |  DTBL_SINGL.MKFM_SET :          A06 C |
 DTBL_SINGL.MK_DAC :            B6E C |  DTBL_SINGL.MK_FM :             9A4 C |
 DTBL_SINGL.MK_FMSPC :          A1A C |  DTBL_SINGL.MK_LIST :           8F2 C |
 DTBL_SINGL.MK_PCM :            BC5 C |  DTBL_SINGL.MK_PSG :            926 C |
 DTBL_SINGL.MK_PSGN :           900 C |  DTBL_SINGL.MK_PWM :            BC6 C |
 DTBL_SINGL.NEW_ROMDAT :        D87 C | *DTBL_SINGL.NOFM_NOTE :         A19 C |
 DTBL_SINGL.NORM_DOWN :         C1B C |  DTBL_SINGL.NORM_UP :           C33 C |
 DTBL_SINGL.NOTE :              EA3 C |  DTBL_SINGL.NOT_DAC :           9C3 C |
 DTBL_SINGL.NOT_DSPC :          9D8 C |  DTBL_SINGL.NO_LFO :            B6D C |
 DTBL_SINGL.N_FM :              EE9 C |  DTBL_SINGL.N_INDX :            ED5 C |
 DTBL_SINGL.N_PSGN :            EE4 C |  DTBL_SINGL.N_STFREQ :          ED6 C |
 DTBL_SINGL.PAN_MCD :           CAB C |  DTBL_SINGL.PCM_PANLIST :       CC9 C |
 DTBL_SINGL.PSG_KEYON :         96E C |  DTBL_SINGL.RCYL_COM :          8A2 C |
*DTBL_SINGL.READFREQ_PCM :      BC7 C | *DTBL_SINGL.READFREQ_PWM :      BCC C |
 DTBL_SINGL.RES_PAN :           CA1 C |  DTBL_SINGL.SAME_PATCH :        DBF C |
 DTBL_SINGL.SAVE_ARG :          C6F C |  DTBL_SINGL.SET_WAVFREQ :       BCF C |
 DTBL_SINGL.SILN_DAC :          8AE C |  DTBL_SINGL.SILN_FM :           8B1 C |
 DTBL_SINGL.SILN_PCM :          88C C |  DTBL_SINGL.SILN_PSG :          885 C |
 DTBL_SINGL.SILN_PSG_N :        881 C |  DTBL_SINGL.SILN_PWM :          898 C |
 DTBL_SINGL.SPCREGLIST :        A6D C |  DTBL_SINGL.TL_DOWN :           A98 C |
 DTBL_SINGL.VMUCH :             97D C |  DTBL_SINGL.VOLU :              CE9 C |
 DTBL_SINGL.VOL_DVLD :          C41 C |  DTBL_SINGL.WRITE_TL :          B1E C |
 DTBL_SINGL.WR_SPC :            A50 C |  DTH :                           20 - |
 DTL :                           1C - |  DWAVEBUFF :                   1D00 C |
*EMU :                            0 - |  EXT_3 :                          C C |
*EXT_4 :                          E C | *FALSE :                          0 - |
*FEN :                            2 - | *FILLDATA :                       8 - |
*FILLLENGTH :                     4 - | *FILLSTART :                      6 - |
 FLG :                           28 - | *FM :                            80 - |
 FMCACH_1 :                    1534 C |  FMCACH_2 :                    155C C |
 FMCACH_3 :                    1584 C |  FMCACH_4 :                    15AC C |
 FMCACH_5 :                    15D4 C |  FMCACH_6 :                    15FC C |
 FMCACH_LIST :                 1C70 C |  FMFREQ_LIST :                 1326 C |
*FMINS_AMBIENT_3 :             CB74 C | *FMINS_AMBIENT_DARK :          CB34 C |
*FMINS_AMBIENT_SPOOK :         CB54 C | *FMINS_BANJO_PUY :             C9F4 C |
*FMINS_BASS_1 :                C634 C | *FMINS_BASS_2 :                C654 C |
*FMINS_BASS_4 :                C734 C | *FMINS_BASS_8 :                C754 C |
*FMINS_BASS_CALM :             C794 C | *FMINS_BASS_CLUB :             C774 C |
*FMINS_BASS_DONNA :            C674 C |  FMINS_BASS_DUCK :             C714 C |
*FMINS_BASS_GROOVE :           C694 C | *FMINS_BASS_GROOVE_2 :         C6B4 C |
*FMINS_BASS_GROOVE_GEM :       C6D4 C | *FMINS_BASS_ITALO :            C6F4 C |
 FMINS_BASS_LOW_1 :            C7B4 C | *FMINS_BASS_OIL :              C7D4 C |
 FMINS_BRASS_EUR :             C8B4 C | *FMINS_BRASS_PUY :             C8D4 C |
 FMINS_CLOSEDHAT :             CAF4 C |  FMINS_DING_1 :                CA34 C |
*FMINS_DING_BASEBALL :         C914 C | *FMINS_DING_TOY :              C9B4 C |
*FMINS_DRUMKICK_GEM :          C934 C | *FMINS_FLAUTE_CAVE :           C9D4 C |
 FMINS_FM3_EXPLOSION :         C594 C | *FMINS_GUITAR_BBALL :          CA94 C |
 FMINS_HATS_1 :                CAB4 C |  FMINS_HATS_CLOSED :           CAD4 C |
 FMINS_HBEAT_TOM :             CA74 C | *FMINS_MARIMBA :               C994 C |
*FMINS_ORGAN2 :                C554 C |  FMINS_ORGAN2A :               C574 C |
*FMINS_ORGAN_ITO :             C8F4 C | *FMINS_PIANOM1 :               C7F4 C |
*FMINS_PIANO_AQUA :            C814 C | *FMINS_PIANO_HARD :            C834 C |
*FMINS_PSYNTH_PLUS :           CA14 C | *FMINS_SEWER_1 :               CB14 C |
*FMINS_SP_CLOSEDHAT :          C5E4 C | *FMINS_SP_COWBELL :            C60C C |
 FMINS_SP_OPENHAT :            C5BC C | *FMINS_SYNTH_PLUS :            C854 C |
*FMINS_TROMBONE_GEM :          CA54 C |  FMINS_TRUMPET_1 :             C874 C |
*FMINS_TRUMPET_2 :             C954 C |  FMINS_TRUMPET_CARNIVAL :      C894 C |
*FMINS_TRUMPET_PUY :           C974 C |  FMSPECIAL :                   1C82 C |
 FM_AUTOREG :                  11DD C |  FM_SEND_1 :                   11E1 C |
 FM_SEND_2 :                   11EC C | *FRAMECTL :                       B - |
*FS :                             1 - | *FULLPMMU :                       1 - |
 GEMADMAPAUSE :                 2DE C |  GEMADMAPAUSEROM :              2E2 C |
 GEMADMARESUME :                2E0 C |  GEMADMARESUMEROM :             2E4 C |
 GEMAFADETRACK :                33E C |  GEMAMSTRLISTPOS :               1C C |
 GEMAPLAYTRACK :                2FE C |  GEMASETBEATS :                 374 C |
 GEMASETMASTERLIST :            2F0 C |  GEMASETTRACKVOL :              358 C |
*GEMASFX_ALL :                 5B1C C |  GEMASFX_ALL.BLK :             5B2A C |
 GEMASFX_ALL.INS :             5BF0 C |  GEMASFX_ALL.PAT :             5B30 C |
 GEMASTOPALL :                  328 C |  GEMASTOPTRACK :                314 C |
 GEMATEST :                     2E6 C |  GEMATRK_ARENA1 :              5C92 C |
 GEMATRK_ARENA1.INS :          5CA0 C |  GEMATRK_CRYSTAL :             B31A C |
 GEMATRK_CRYSTAL.BLK :         B328 C |  GEMATRK_CRYSTAL.INS :         C524 C |
 GEMATRK_CRYSTAL.PAT :         B330 C |  GEMATRK_DREAM :               9BCA C |
 GEMATRK_DREAM.BLK :           9BD8 C |  GEMATRK_DREAM.INS :           B2A2 C |
 GEMATRK_DREAM.PAT :           9BE5 C | *GEMATRK_MOVEME :              8BF4 C |
 GEMATRK_MOVEME.BLK :          8C02 C |  GEMATRK_MOVEME.INS :          9B32 C |
 GEMATRK_MOVEME.PAT :          8C1A C | *GEMATRK_TEST_0 :              5C18 C |
 GEMATRK_TEST_0.BLK :          5C2E C |  GEMATRK_TEST_0.INS :          5C26 C |
 GEMATRK_TEST_0.PAT :          5C31 C |  GEMA_INIT :                    F35 C |
 GEMA_INIT.END_SETUP :          FA0 C |  GEMA_INIT.SETUP_LIST :         F75 C |
 GEMA_INIT.ST_COPY :            F94 C |  GEMA_LASTBANK :               131B C |
 GEMA_LASTBANK.WRITE :         1320 C |  GEMA_MASTERLIST :             5B10 C |
 GET_TICK :                     FA1 C |  GET_TICK.CTNOTICK :            FBE C |
 GLBL_LASTORG :    FFFFFFFFFFFFD204 - |  GLBL_LASTPC :                 37AE - |
*HAS64 :                          1 - | *HASDSP :                         0 - |
*HASFPU :                         0 - | *HASPMMU :                        0 - |
*HBLK :                          40 - | *HCOUNT :                         5 - |
 HEADEROUT :                   1C9F C |  HEADEROUT_E :                 1CAD C |
*HINTCLR :                       18 - | *HINTENBL :                      10 - |
 HINT_DEFAULT :                12EC C | *HIRQ_ON :                        4 - |
*HVSTOP :                         2 - | *INEXTMODE :                      0 - |
*INLWORDMODE :                    0 - | *INMAXMODE :                      0 - |
*INSRCMODE :                      0 - |  INSTLISTOUT :                 1CAF C |
*INSUPMODE :                      1 - | *INTMASK :                        1 - |
 JOYA :                          40 - |  JOYB :                          10 - |
 JOYC :                          20 - |  JOYDOWN :                        2 - |
 JOYLEFT :                        4 - | *JOYMODE :                      800 - |
 JOYRIGHT :                       8 - | *JOYSTART :                      80 - |
 JOYUP :                          1 - | *JOYX :                         400 - |
*JOYY :                         200 - | *JOYZ :                         100 - |
*LCHWIDTH :                      34 - |  LEV :                            4 - |
*LISTON :                         3 - |  LIST_VDPREGS :                 3D4 C |
*MACEXP :                         7 - | *MAPMARS_SCRN0 :               3BE2 C |
*MAPMARS_TEST :                4DA4 C | *MAP_SCR0_BG :                 4012 C |
 MAP_TEST :                    51D4 C |  MARS :                           0 - |
 MARSBLOCK :                     37 C |  MARSCD :                         0 - |
 MARSDATA_SCREEN00 :          20ECE C |  MARSDATA_SCREEN01 :          326D0 C |
 MARSUPD :                     1C8A C | *MARS_RAMCODE :                32D0 C |
*MARS_RAMCODE_E :              32D0 C |  MAX_BUFFNTRY :                   8 - |
 MAX_MDDMATSK :                  18 - |  MAX_MDOBJ :                     18 - |
 MAX_MDOTHER :                  C00 - |  MAX_MDSYSTEM :                 600 - |
 MAX_MDVIDEO :                 2000 - |  MAX_RCACH :                     20 - |
 MAX_SCRNBUFF :                1800 - |  MAX_SRAMSIZE :                 400 - |
 MAX_SYSCODE :                 2000 - |  MAX_TBLSIZE :                   18 - |
 MAX_TRFRPZ :                     8 - |  MAX_TRKCHN :                    20 - |
 MAX_TRKINDX :                   1A - |  MAX_USERCODE :                8000 - |
 MAX_ZCMND :                     10 - |  MCD :                            0 - |
 MCDBLOCK :                      36 C |  MCDUPD :                      1C8B C |
*MCD_COMM_M :                     E - | *MCD_COMM_S :                     F - |
*MCD_DBANK0 :                  3BE2 C | *MCD_DCOMM_M :                   10 - |
*MCD_DCOMM_S :                   20 - | *MCD_HINT :                       6 - |
*MCD_INTMASK :                   32 - | *MCD_MEMORY :                     3 - |
 MDBANK0 :                     3BE2 C |  MDBANK0_E :                  20ECE C |
 MDSYS_SINEDATA :              111E C | *MD_BANK_SRAM :              A130F1 - |
 MD_READMODES :                12F0 C |  MD_READMODES.PICK_MODE :      130C C |
 MD_SCREEN00 :                 32D0 C |  MD_SCREEN00_E :               37AE C |
 MD_SCREEN01 :                 37AE C |  MD_SCREEN01_E :               3BE2 C |
*MD_SYSCODE_E :                1350 C |  MODE :                          18 - |
*MODE_FADEIN :                 126E C |  MODE_FADEIN.LOOPW :           1296 C |
*MODE_FADEOUT :                12A2 C |  MODE_FADEOUT.LOOPW :          12CA C |
 MODE_INIT :                   123C C |  MODE_INIT.CLR :               1266 C |
*MOMCPU :                     68000 - | *MOMCPUNAME :               "68000" - |
*MONOWIDTH :                     38 - |  MOUSE_X :                        8 C |
 MOUSE_Y :                        A C | *NESTMAX :                      100 - |
 NIKONA_BUFFLIST :             145E C |  NIKONA_BUFFLIST_E :           147E C |
 OBJDMA_BIBI :                 4C86 C |  OBJDMA_DOREMI :               4B92 C |
 OBJDMA_EMILY :                4AA8 C |  OBJDMA_SOPHIE :               4D76 C |
 OBJECTS_ADD :                  C78 C |  OBJECTS_ADD.CLR :              C9A C |
 OBJECTS_ADD.SEARCH :           C84 C |  OBJECTS_ADD.USE_IT :           C94 C |
 OBJECTS_CLEAR :                BFC C |  OBJECTS_CLEAR.CLR :            C04 C |
 OBJECTS_CLEAR.CLR_D :          C12 C |  OBJECTS_RUN :                  C24 C |
 OBJECTS_RUN.NEXT_ONE :         C2C C |  OBJECTS_RUN.NO_CODE :          C38 C |
*OBJECTS_SET :                  C42 C |  OBJECTS_SET.CLR :              C50 C |
 OBJECTS_SHOW :                 CAC C |  OBJECTS_SHOW.FINISH :          DB0 C |
 OBJECTS_SHOW.MK_PZ :           D2E C |  OBJECTS_SHOW.MK_SPR :          DAA C |
 OBJECTS_SHOW.NEXT :            D00 C |  OBJECTS_SHOW.NEXTS :           CD2 C |
 OBJECTS_SHOW.NO_SPRDRW :       CF8 C |  OBJECTS_SHOW.RAN_OUT :         DCE C |
 OBJECTS_SHOW.VRAM_H :          D80 C |  OBJECTS_SHOW.VRAM_V :          D66 C |
 OBJECT_ANIMATE :               E46 C |  OBJECT_ANIMATE.GOTOFRAME :     EC2 C |
 OBJECT_ANIMATE.KEEPSPD :       E88 C |  OBJECT_ANIMATE.LASTFRAME :     ECC C |
 OBJECT_ANIMATE.NOANIM :        EB4 C |  OBJECT_ANIMATE.RETURN :        EB2 C |
 OBJECT_ANIMATE.SAMETHING :     E60 C |  OBJECT_ANIMRESET :             ED2 C |
 OBJECT_COLLISION :             F00 C |  OBJECT_COLLISION.CHECK_THIS :  F28 C |
 OBJECT_COLLISION.EXIT_THIS :   F22 C |  OBJECT_COLLISION.MYSELF :      F18 C |
 OBJECT_COLLISION.NEXT :        F0A C |  OBJECT_COLLISION.NOT_YTOP :    FA4 C |
 OBJECT_DISPLAY :               DD8 C |  OBJECT_DISPLAY.NEXT_PZ :       E1A C |
 OBJECT_DISPLAY.NO_DMA :        E44 C |  OBJECT_DISPLAY.SRCH :          DE0 C |
 OBJECT_DISPLAY.THIS_ONE :      DEC C |  OBJECT_SPEED :                 EE2 C |
 OBJMAP_BIBI :                 4BA6 C |  OBJMAP_DOREMI :               4B6A C |
 OBJMAP_EMILY :                48E8 C |  OBJMAP_SISI :                 5AB4 C |
 OBJMAP_SOPHIE :               4CFE C |  OBJPAL_DOREMI :               4B4C C |
 OBJPAL_EMILY :                48D2 C |  OBJPAL_SISI :                 5A94 C |
 OBJPAL_SOPHIE :               4CE0 C |  OBJ_ANIM_ID :                   20 C |
 OBJ_ANIM_INDX :                 1E C |  OBJ_ANIM_SPD :                  24 C |
 OBJ_CODE :                       0 C |  OBJ_DMA :                       10 C |
 OBJ_FRAME :                     22 C | *OBJ_FREE :                      29 C |
 OBJ_INDEX :                     25 C |  OBJ_MAP :                        C C |
 OBJ_RAM :                       2A C |  OBJ_SET :                       26 C |
 OBJ_SIZE :                      14 C | *OBJ_STATUS :                    28 C |
 OBJ_SUBID :                     27 C |  OBJ_VRAM :                      18 C |
 OBJ_X :                          4 C |  OBJ_X_SPD :                     1A C |
 OBJ_Y :                          8 C |  OBJ_Y_SPD :                     1C C |
 ON_HOLD :                        2 C |  ON_PRESS :                       4 C |
*ON_RELEASE :                     6 C | *PACKING :                        0 - |
*PADDING :                        0 - | *PAD_ID :                         0 C |
*PAD_VER :                        1 C | *PALMARS_SCRN0 :               3E12 C |
*PALMARS_TEST :                4FD4 C | *PALMODE :                       3E C |
 PARP :                          34 - |  PCMCOM :                      1480 C |
*PEN :                           20 - |  PICO :                           1 - |
 PICO_ENTRY :                   204 C |  PICO_ENTRY.LOOP_RAM :          232 C |
 PICO_ENTRY.PALCLEAR :          25C C |  PICO_ENTRY.WAIT_DMA :          246 C |
 PICO_ERRADDR :                 200 C |  PICO_ERRBUS :                  200 C |
 PICO_ERRCHK :                  200 C |  PICO_ERRILL :                  200 C |
 PICO_ERROR :                   200 C |  PICO_ERROREX :                 200 C |
 PICO_ERRPRIVL :                200 C |  PICO_ERRTRAPV :                200 C |
 PICO_ERRZDIV :                 200 C |  PICO_LINE1010 :                200 C |
 PICO_LINE1111 :                200 C |  PICO_PCMINT :                  202 C |
 PICO_TRACE :                   200 C |  PICO_UNKINT :                  202 C |
 PICO_USERINT :                 202 C |  PROC_CHIPS :                   632 C |
 PSGCOM :                      14F8 C |  PSGFREQ_LIST :                133E C |
 PSGHATMODE :                  1C81 C | *PSG_CTRL :                  C00011 - |
 PTMR :                          38 - |  PVOL :                          30 - |
 PWMCOM :                      14C0 C | *PWMCTL :                        31 - |
*PWMINTCLR :                     1C - | *PWMIRQ_ON :                      1 - |
 RAM_FADEMARSDELAY :                                       FFFFFFFFFFFFBE50 C |
 RAM_FADEMARSINCR :                                        FFFFFFFFFFFFBE4E C |
 RAM_FADEMARSREQ : FFFFFFFFFFFFBE4C C | *RAM_FADEMARSTMR : FFFFFFFFFFFFBE52 C |
 RAM_FADEMDDELAY : FFFFFFFFFFFFBE48 C |  RAM_FADEMDINCR :  FFFFFFFFFFFFBE46 C |
 RAM_FADEMDREQ :   FFFFFFFFFFFFBE44 C |  RAM_FADEMDTMR :   FFFFFFFFFFFFBE4A C |
 RAM_FRAMECOUNT :  FFFFFFFFFFFFBE34 C | *RAM_GLBL_FILLER : FFFFFFFFFFFFEA04 C |
 RAM_HORSCROLL :   FFFFFFFFFFFFA004 C |  RAM_INPUTDATA :   FFFFFFFFFFFFC004 C |
*RAM_MDDREQ :      FFFFFFFFFFFFC604 C |  RAM_MDGLOBAL :    FFFFFFFFFFFFEA04 C |
 RAM_MDMARSHINT :  FFFFFFFFFFFFC452 C | *RAM_MDMARSPALFD : FFFFFFFFFFFFAE94 C |
 RAM_MDMARSVINT :  FFFFFFFFFFFFC44C C |
*RAM_MDMARS_DRAWALL :                                      FFFFFFFFFFFFBE54 C |
 RAM_MDOTHER :     FFFFFFFFFFFFC604 C |  RAM_MDSYSTEM :    FFFFFFFFFFFFC004 C |
 RAM_MDVIDEO :     FFFFFFFFFFFFA004 C |  RAM_MEGACD :              FFFFFD00 - |
 RAM_OBJDISPLIST : FFFFFFFFFFFFBC84 C |  RAM_OBJECTS :     FFFFFFFFFFFFB294 C |
 RAM_PALETTE :     FFFFFFFFFFFFAE14 C |  RAM_PALETTEFD :   FFFFFFFFFFFFB094 C |
*RAM_SAVEDATA :    FFFFFFFFFFFFC044 C |  RAM_SCREENMODE :  FFFFFFFFFFFFC458 C |
 RAM_SCRNBUFF :    FFFFFFFFFFFFD204 C |  RAM_SPRDRWCNTR :  FFFFFFFFFFFFBE38 C |
 RAM_SPRDRWPZ :    FFFFFFFFFFFFA914 C |  RAM_SPRITES :     FFFFFFFFFFFFA414 C |
 RAM_SPRLINKNUM :  FFFFFFFFFFFFBE3A C |  RAM_STACK :               FFFFFD00 - |
 RAM_SYSRANDSEED : FFFFFFFFFFFFC448 C |  RAM_SYSRANDVAL :  FFFFFFFFFFFFC444 C |
*RAM_SYSTEMCODE :  FFFFFFFFFFFF0000 C | *RAM_USERCODE :    FFFFFFFFFFFF2000 C |
 RAM_VDPDMAINDX :  FFFFFFFFFFFFBE3E C |  RAM_VDPDMALIST :  FFFFFFFFFFFFB114 C |
 RAM_VDPDMAMOD :   FFFFFFFFFFFFBE40 C | *RAM_VDPEXWRITE :  FFFFFFFFFFFFBE3C C |
 RAM_VDPREGS :     FFFFFFFFFFFFBE56 C |  RAM_VERSCROLL :   FFFFFFFFFFFFA3C4 C |
 RAM_VIDPRNTLIST : FFFFFFFFFFFFBCB4 C |  RAM_VIDPRNTVRAM : FFFFFFFFFFFFBE42 C |
 RAM_ZCDFLAG_D :           FFFFFF00 - |  RAM_ZSNDBUFF :            FFFFFF00 - |
*RCHWIDTH :                      36 - | *RELAXED :                        0 - |
 ROM_END :                    5BE50 C |  RRT :                           14 - |
 SAMPLEHEAD :                  1CAF C |  SBEATACC :                    1C9B C |
 SBEATPTCK :                   1C9D C |  SETVRAM_BIBI :                 4A0 - |
 SETVRAM_DOREMI :               458 - |  SETVRAM_EMILY :                440 - |
*SETVRAM_MIKAMI :               440 - |  SETVRAM_NICOLE :               488 - |
 SETVRAM_SISI :                 480 - |  SETVRAM_SOPHIE :               470 - |
 SET_CHIPS :                    614 C |  SET_CHIPS.TRK_BUFFRS :         61C C |
*SHIFT :                          2 - |  SHRD_BLK :                    5CF8 C |
 SHRD_PAT :                    5D22 C |  SIZEOF_INPUT :                  10 C |
 SIZEOF_MDGLBL :   FFFFFFFFFFFFEA08 C |  SIZEOF_MDOBJ :                  6A C |
 SIZEOF_MDRAM :    FFFFFFFFFFFFD40C C | *SIZEOF_MDSYS :    FFFFFFFFFFFFC45A C |
 SIZEOF_MDVID :    FFFFFFFFFFFFBE6E C | *SIZEOF_RAMOTHER : FFFFFFFFFFFFD204 C |
 SLV :                           10 - | *SNDLOCKZ80 :                   286 C |
 SNDREQ_ENTER :                 28A C | *SNDREQ_ENTER.WAIT :            2A2 C |
 SNDREQ_EXIT :                  2A8 C | *SNDREQ_SADDR :                 2C8 C |
 SNDREQ_SBYTE :                 2D0 C |  SNDREQ_SCMD :                  2B6 C |
 SNDREQ_SLONG :                 2C4 C |  SNDREQ_SWORD :                 2CC C |
*SNDUNLOCKZ80 :                 288 C |  SOUND_INIT :                   276 C |
 SOUND_UPDATE :                 282 C | *STANDBY :                        3 - |
*SYSMARS_ID :                A130EC - | *SYSMARS_REG :               A15100 - |
*SYSMCD_REG :                A12000 - | *SYSMCD_WRAM :               200000 - |
 SYSTEM_DMAENTER_RAM :         103C C |  SYSTEM_DMAENTER_ROM :         1044 C |
 SYSTEM_DMAEXIT_RAM :          1040 C |  SYSTEM_DMAEXIT_ROM :          1048 C |
*SYSTEM_GRABRAMCODE :          12EE C |  SYSTEM_INIT :                  FA6 C |
 SYSTEM_INIT.CLRINPUT :         FD0 C |  SYSTEM_INPUT :                104C C |
 SYSTEM_INPUT.BAD_Y :          109C C |  SYSTEM_INPUT.NO_BIT :         10AE C |
 SYSTEM_INPUT.PAGE_IT :        10A8 C |  SYSTEM_INPUT.X_VALID :        1084 C |
*SYSTEM_RANDOM :               10B6 C |  SYSTEM_RANDOM.GOOD_S :        10C4 C |
 SYSTEM_RENDER :                FF6 C |  SYSTEM_RENDER.FORGOT_DISP :   103A C |
 SYSTEM_RENDER.WAIT_IN :       1018 C |  SYSTEM_RENDER.WAIT_LAG :      1000 C |
 SYSTEM_SETINTS :              121E C |  SYSTEM_SETINTS.NOHINT :       122E C |
 SYSTEM_SETINTS.NOVINT :       1226 C | *SYSTEM_SINEWAVE :             1100 C |
 SYSTEM_SINEWAVE.DONT_NEG :    111C C | *SYSTEM_SINEWAVE_COS :         10E0 C |
 SYSTEM_SINEWAVE_COS.DONT_NEG :                                        10FA C |
 SYSTEM_SRAMINIT :             1230 C | *SYSTEM_SRAMLOAD :             1238 C |
*SYSTEM_SRAMSAVE :             1234 C | *SYS_CTRL_1 :                A10009 - |
*SYS_CTRL_2 :                A1000B - | *SYS_CTRL_3 :                A1000D - |
*SYS_DATA_1 :                A10003 - | *SYS_DATA_2 :                A10005 - |
*SYS_DATA_3 :                A10007 - | *SYS_EXRAM :                 200000 - |
*SYS_IO :                    A10001 - | *SYS_TMSS :                  A14000 - |
*TAG_SRAMDATA :              "SAVE" - |  TBLBUFF_READ :                 65B C |
 TBLBUFF_READ.CHK_PSG :         76B C |  TBLBUFF_READ.CLRFULL :         82D C |
 TBLBUFF_READ.DO_CHIP :         6C5 C |  TBLBUFF_READ.FIRST_INS :       6DB C |
 TBLBUFF_READ.GRAB_LINK :       71D C |  TBLBUFF_READ.HAS_INDX :        6A1 C |
 TBLBUFF_READ.INVLDL :          754 C |  TBLBUFF_READ.KEEP_IT :         6FF C |
 TBLBUFF_READ.L_HIPRIO :        7DF C |  TBLBUFF_READ.NEW_CHIP :        792 C |
 TBLBUFF_READ.NEW_LINK :        7DC C |  TBLBUFF_READ.NEW_LINK_O :      7D4 C |
 TBLBUFF_READ.NEW_LINK_Z :      7D0 C |  TBLBUFF_READ.NEXTSRCH_TBL :    7C9 C |
 TBLBUFF_READ.NEXT_INDX :       692 C |  TBLBUFF_READ.NEXT_PRIO :       7B2 C |
 TBLBUFF_READ.NO_INDX :         6BD C |  TBLBUFF_READ.PASS_2 :          7B1 C |
 TBLBUFF_READ.PICK_TBL :        802 C |  TBLBUFF_READ.REFILL :          78F C |
 TBLBUFF_READ.REROLL :          75C C |  TBLBUFF_READ.RESET_LINK :      81C C |
 TBLBUFF_READ.RNOT_PSG :        78D C |  TBLBUFF_READ.SET_ASFULL :      7FF C |
 TBLBUFF_READ.SINGL_FREE :      7ED C |  TBLBUFF_READ.SINGL_LINK :      782 C |
 TBLBUFF_READ.SRCH_FREE :       7A1 C |  TBLBUFF_READ.SRCH_LINK :       73B C |
 TBLBUFF_READ.SRCH_LLOOP :      745 C |  TBLBUFF_READ.TRACK_CONT :      67B C |
 TBLBUFF_READ.VALID :           690 C |  TBLFM :                       1A72 C |
 TBLFM3 :                      1AD2 C |  TBLFM6 :                      1AEA C |
 TBLLIST :                     1A00 C |  TBLPCM :                      1B04 C |
 TBLPSG :                      1A10 C |  TBLPSGN :                     1A5A C |
 TBLPWM :                      1BC6 C |  TH :                      20000000 - |
 TICKCNT :                     1C80 C |  TICKFLAG :                    1C7F C |
 TICKSPSET :                   1C7E C |  TIME :               "09:54:36 PM" - |
*TIMERCTL :                      30 - | *TMR :                           2C - |
 TRACK_OUT :                    5CF C |  TRACK_OUT.INDX_DEL :           5DD C |
 TRACK_OUT.NOTHIN :             60B C |  TRANSFERROM :                  FC2 C |
 TRANSFERROM.DOUBLE :           FE5 C |  TRANSFERROM.FROM_RAM :        1009 C |
 TRANSFERROM.TRANSFER :        1027 C |  TRANSFERROM.WAIT :            1020 C |
 TRANSFERROM.X68KLAST :        1060 C |  TRANSFERROM.X68KLOOP :        104C C |
 TRANSFERROM.X68KLPWT :        106E C |  TRANSFERROM.X68KNOCARRY :     1003 C |
 TRANSFERROM.X68KPWTLP :       1070 C |  TRKBLKS_0 :                   16A4 C |
 TRKBLKS_1 :                   16AC C |  TRKBLKS_2 :                   16B4 C |
 TRKBLKS_3 :                   16BC C |  TRKBUFF_0 :                   16C4 C |
 TRKBUFF_1 :                   1704 C |  TRKBUFF_2 :                   1744 C |
 TRKBUFF_3 :                   1784 C |  TRKCACH_0 :                   1F00 C |
 TRKCACH_1 :                   1F20 C |  TRKCACH_2 :                   1F40 C |
 TRKCACH_3 :                   1F60 C |  TRKCHNLS :                    1E00 C |
 TRKHDRS_0 :                   1624 C |  TRKHDRS_1 :                   1644 C |
 TRKHDRS_2 :                   1664 C |  TRKHDRS_3 :                   1684 C |
 TRKINFOCACH :                 1CAF C |  TRK_BANKBLK :                   17 - |
 TRK_BANKHEADS :                 16 - |  TRK_BANKINS :                   15 - |
 TRK_BLOCKS :                     4 - |  TRK_CACH :                       8 - |
 TRK_CACHHALF :                  10 - |  TRK_CHNINDX :                   26 - |
 TRK_CURRBLK :                   13 - |  TRK_MAXCHNL :                   18 - |
 TRK_PATT :                       6 - |  TRK_PRIORITY :                  14 - |
 TRK_READ :                       A - |  TRK_ROMBLKS :                   23 - |
 TRK_ROMINST :                   20 - |  TRK_ROMPATT :                   1D - |
 TRK_ROMPATTREAD :               1A - |  TRK_ROWPAUSE :                  11 - |
 TRK_ROWS :                       C - |  TRK_SEQID :                      1 - |
 TRK_SETBLK :                     2 - |  TRK_STATUS :                     0 - |
 TRK_TICKSET :                    3 - |  TRK_TICKTMR :                   12 - |
 TRK_VOLFDTARGET :               19 - |  TRK_VOLMASTER :                  E - |
*TRUE :                           1 - | *TVMODE :                         0 - |
 UPD_TRACK :                    22A C |  UPD_TRACK.CHNL_FREE :          344 C |
 UPD_TRACK.CONT_CHNL :          34F C |  UPD_TRACK.DECROW :             2F3 C |
 UPD_TRACK.DECROW_E :           2F6 C |  UPD_TRACK.EFFECT_FILL :        51F C |
 UPD_TRACK.EFF_A :              3C9 C |  UPD_TRACK.EFF_B :              3DA C |
 UPD_TRACK.EFF_C :              3F8 C |  UPD_TRACK.EXIT :               2E7 C |
 UPD_TRACK.FADE_OUT :           274 C |  UPD_TRACK.FIRST_BLK :          44F C |
 UPD_TRACK.FIRST_FILL :         526 C |  UPD_TRACK.FIRST_HEAD :         497 C |
 UPD_TRACK.GRAB_RHEAD :         5BC C |  UPD_TRACK.HAS_NOTE :           2FE C |
 UPD_TRACK.INC_CPATT :          3FB C |  UPD_TRACK.KEEP_BLK :           46D C |
 UPD_TRACK.KEEP_IT :            4BD C |  UPD_TRACK.KEEP_VOL :           28A C |
 UPD_TRACK.NEXT_CHNL :          329 C |  UPD_TRACK.NEXT_NOTE :          2D7 C |
 UPD_TRACK.NO_EFF :             395 C |  UPD_TRACK.NO_GLBL :            566 C |
 UPD_TRACK.NO_INS :             377 C |  UPD_TRACK.NO_NOTE :            36C C |
 UPD_TRACK.NO_VOL :             382 C |  UPD_TRACK.OLD_TYPE :           360 C |
 UPD_TRACK.RAN_OUT :            409 C |  UPD_TRACK.READ_TRACK :         247 C |
 UPD_TRACK.ROW_ACTIVE :         2D0 C |  UPD_TRACK.SET_TRACK :          433 C |
 UPD_TRACK.SFXMD :              294 C |  UPD_TRACK.SRCH_NEW :           324 C |
 UPD_TRACK.TOO_MUCH :           280 C |  UPD_TRACK.TRACK_END :          50C C |
 UPD_TRACK.TRK_BUFFRS :         232 C |  VARNULLVRAM :                  7FF - |
 VARPRINTPAL :                    3 - |  VARPRINTVRAM :                 580 - |
*VBLK :                          80 - | *VDPSTS :                         A - |
 VDP_CTRL :                  C00004 - |  VDP_DATA :                  C00000 - |
*VERSION :                     142F - |  VIDEO_CLEAR :                  408 C |
*VIDEO_CLEARSCREEN :            408 C |  VIDEO_CLEARSCREEN.PNEXT :      47A C |
 VIDEO_CLEARSCREEN.SNEXT :      468 C |  VIDEO_CLEARSCREEN.XNEXT :      44C C |
 VIDEO_CLEARSCREEN.YNEXT :      45A C | *VIDEO_COPY :                   780 C |
 VIDEO_COPY.DMAW :              794 C |  VIDEO_COPY.DMA_W :             7EC C |
*VIDEO_DMABLAST :               94C C |  VIDEO_DMABLAST.END :           990 C |
 VIDEO_DMABLAST.EXIT :          99E C |  VIDEO_DMABLAST.NEXT :          974 C |
 VIDEO_DMAMKENTRY :             65C C |  VIDEO_DMAMKENTRY.MK_SET :      698 C |
 VIDEO_DMAMKENTRY.NORMAL :      692 C |  VIDEO_DMAMKENTRY.RAN_OUT :     708 C |
 VIDEO_DOPALFADE :              516 C |  VIDEO_DOPALFADE.ACTIVE :       532 C |
 VIDEO_DOPALFADE.FADE_DONE :    53A C |  VIDEO_DOPALFADE.FADE_IN :      53C C |
 VIDEO_DOPALFADE.FADE_LIST :    534 C |  VIDEO_DOPALFADE.FADE_OUT :     5DE C |
 VIDEO_DOPALFADE.NO_BLU :       5B6 C |  VIDEO_DOPALFADE.NO_BLU_O :     638 C |
 VIDEO_DOPALFADE.NO_FNSH :      5CE C |  VIDEO_DOPALFADE.NO_FNSH_O :    64C C |
 VIDEO_DOPALFADE.NO_GRN :       596 C |  VIDEO_DOPALFADE.NO_GRN_O :     620 C |
 VIDEO_DOPALFADE.NO_MOVE :      5DC C |  VIDEO_DOPALFADE.NO_MOVE_O :    65A C |
 VIDEO_DOPALFADE.NO_RED :       576 C |  VIDEO_DOPALFADE.NO_RED_O :     608 C |
 VIDEO_DOPALFADE.NXT_PAL :      554 C |  VIDEO_DOPALFADE.NXT_PAL_O :    5F0 C |
 VIDEO_FADEIN :                 484 C |  VIDEO_FADEOUT :                4AA C |
 VIDEO_FADEPAL :                4E8 C | *VIDEO_FADEPAL_MARS :           9A4 C |
 VIDEO_FILL :                   70A C |  VIDEO_FILL.DMAW :              71E C |
 VIDEO_FILL.DMA_W :             768 C |  VIDEO_INIT :                   38A C |
 VIDEO_INIT.CLRRAM :            396 C |  VIDEO_INIT.LOOP :              3AE C |
 VIDEO_LOADART :                804 C | *VIDEO_LOADART.FROM_RAM :       86E C |
 VIDEO_LOADART.MK_SET :         840 C |  VIDEO_LOADART.NORMAL :         83A C |
 VIDEO_LOADART.SHARED_SETUP :   870 C |  VIDEO_LOADMAP :                9A8 C |
 VIDEO_LOADMAP.CONT :           9CE C |  VIDEO_LOADMAP.NODBLE :         9EC C |
 VIDEO_LOADMAP.NONULL :         9CC C |  VIDEO_LOADMAP.XLOOP :          9BE C |
 VIDEO_LOADMAP.YLOOP :          9B4 C |  VIDEO_LOADPAL :                4F2 C |
*VIDEO_MARSGFXMODE :            9A0 C | *VIDEO_MARSPALFADE :            9A6 C |
*VIDEO_MARS_SYNCFRAME :         9A2 C |  VIDEO_PRINT :                  A28 C |
 VIDEO_PRINT.DONIBL :           B44 C |  VIDEO_PRINT.EXIT :             AB4 C |
 VIDEO_PRINT.ISBYTE :           A7E C |  VIDEO_PRINT.ISLONG :           AA2 C |
 VIDEO_PRINT.ISWORD :           A90 C |  VIDEO_PRINT.LNGLOOP :          B34 C |
 VIDEO_PRINT.LOOP :             A40 C |  VIDEO_PRINT.LOWR :             B54 C |
 VIDEO_PRINT.NEWJUMP :          A3A C |  VIDEO_PRINT.NEXT :             A7A C |
 VIDEO_PRINT.NEXTV :            ABE C |  VIDEO_PRINT.NOTHING :          B60 C |
 VIDEO_PRINT.PUTTEXT :          A6C C |  VIDEO_PRINT.VBYTE :            AF0 C |
 VIDEO_PRINT.VLONG :            B3C C |  VIDEO_PRINT.VWORD :            B12 C |
 VIDEO_PRINTINIT :              9FE C | *VIDEO_PRINTPAL :               A18 C |
 VIDEO_RENDER :                 8B8 C |  VIDEO_RUNFADE :                4E0 C |
 VIDEO_UPDATE :                 3B6 C | *VIDEO_UPDATE.EXIT :            3D2 C |
 VIDEO_UPDATE.LOOP :            3C6 C |  VIDEO_WAITFADE :               4D0 C |
 VIDMD_PAL :                    4F6 C |  VIDMD_PAL.LOOP :               50E C |
 VID_PICKLAYER :                B66 C |  VID_PICKLAYER.GOLYR :          BB0 C |
 VID_PICKLAYER.NOWD :           B9A C |  VID_PICKLAYER.PLAWND :         B8C C |
 VID_PICKLAYER.THISSZ :         BD0 C |  VID_PICKLAYER.THISSZJ :        BF8 C |
*VINTCLR :                       16 - | *VINTENBL :                      20 - |
 VINT_DEFAULT :                12D6 C | *VIRQ_ON :                        8 - |
*VRESINTCLR :                    14 - |  WAVE_FLAGS :                  1C97 C |
 WAVE_LEN :                    1C8F C |  WAVE_LOOP :                   1C92 C |
 WAVE_PITCH :                  1C95 C |  WAVE_START :                  1C8C C |
 WAVFREQ_CDPCM :               13FE C |  WAVFREQ_LIST :                139E C |
 X68KSRCLSB :                  1C99 C |  X68KSRCMID :                  1C9A C |
*YM_CTRL_1 :                 A04000 - | *YM_CTRL_2 :                 A04002 - |
*YM_DATA_1 :                 A04001 - | *YM_DATA_2 :                 A04003 - |
*Z80SYNTAX :                      0 - | *Z80_BUS :                   A11100 - |
*Z80_CODE :                    1350 C | *Z80_CODE_END :                32D0 C |
 Z80_CPU :                   A00000 - |  Z80_INIT :                      50 C |
*Z80_RESET :                 A11200 - | *ZBANK :                       6000 - |
 ZDRVFIFO :                      40 - |  ZDRVFWRT :                      2E - |
*ZDRVMARSBLK :                   37 - | *ZDRVMCDBLK :                    36 - |
*ZDRVRAMLEN :                    30 - | *ZDRVRAMSRC :                    35 - |
*ZDRVROMBLK :                    2F - | *ZMARS_SEND :                   F34 C |
*ZOPCEX :                         8 - |  ZOPCEXX :                       D9 - |
*ZOPCNOP :                        0 - |  ZOPCPUSHAF :                    F5 - |
 ZOPCRET :                       C9 - |  ZPSG_CTRL :                   7F11 - |
 ZSET_TESTME :                    0 - |  ZYM_CTRL_1 :                  4000 - |
 ZYM_CTRL_2 :                  4002 - |  ZYM_DATA_1 :                  4001 - |
 ZYM_DATA_2 :                  4003 - | *_CCR :                    FFFFFE92 - |
*_DMACHANNEL0 :            FFFFFF8C - | *_DMACHANNEL1 :            FFFFFF9C - |
*_DMACOUNT0 :              FFFFFF88 - | *_DMACOUNT1 :              FFFFFF98 - |
*_DMADEST0 :               FFFFFF84 - | *_DMADEST1 :               FFFFFF94 - |
*_DMAOPERATION :           FFFFFFB0 - | *_DMAREQACK0 :             FFFFFFB4 - |
*_DMAREQACK1 :             FFFFFFB8 - | *_DMASOURCE0 :             FFFFFF80 - |
*_DMASOURCE1 :             FFFFFF90 - | *_DMAVECTORE0 :            FFFFFFA4 - |
*_DMAVECTORE1 :            FFFFFFAC - | *_DMAVECTORN0 :            FFFFFFA0 - |
*_DMAVECTORN1 :            FFFFFFA8 - | *_FRAMEBUFFER :            24000000 - |
*_FRC_H :                         2 - | *_FRC_L :                         3 - |
*_FRT :                    FFFFFE10 - | *_HRH :                    FFFFFF10 - |
*_HRL :                    FFFFFF14 - | *_HRL32 :                  FFFFFF04 - |
*_JR :                     FFFFFF00 - | *_OCR_H :                         4 - |
*_OCR_L :                         5 - | *_OVERWRITE :              24020000 - |
*_PALETTE :                20004200 - | *_SERIAL :                 FFFFFE00 - |
*_SYSREG :                 20004000 - | *_TCR :                           6 - |
*_TCSR :                          1 - | *_TIER :                          0 - |
*_TOCR :                          7 - | *_VDPREG :                 20004100 - |

   1083 symbols
    317 unused symbols

 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 4 - 03/11/2024 09:54:36 PM


  Defined Macros:
  ---------------

DATA_BKEND                            | DATA_BKSET                           
ENDSTRCT                              | ERREPORT                             
GEMAHEAD                              | GEMATRK                              
GINSDAC                               | GINSFM                               
GINSFM3                               | GINSNULL                             
GINSPCM                               | GINSPSG                              
GINSPSGN                              | GINSPWM                              
GSMPLDATA                             | ISO_FILE                             
ISO_SETFS                             | REPORT                               
ROMPAD                                | SCREEN_CODE                          
SDRAM_BKEND                           | SDRAM_BKSET                          
SET_DBANKS                            | STRCT                                
VDP_SHOWME                            |

     25 macros

 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 5 - 03/11/2024 09:54:36 PM


  Defined Functions:
  ------------------

MAP_SIZE                              | CELL_SIZE                            
CELL_VRAM                             | LOCATE                               

 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 6 - 03/11/2024 09:54:36 PM


  Code Pages:
  ----------

STANDARD (0 changed characters)

1 code page

0.15 seconds assembly time

  12069 lines source file
  12614 lines incl. macro expansions
      5 passes
      0 errors
      0 warnings
