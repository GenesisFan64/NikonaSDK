 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 1 - 03/24/2024 05:45:06 AM


       1/       0 :                     ; ===========================================================================
       2/       0 :                     ; NIKONA MD 16-BIT/32-BIT SDK
       3/       0 :                     ; by GenesisFan64 2023-2024
       4/       0 :                     ;
       5/       0 :                     ; For developing games on the Genesis-family of systems:
       6/       0 :                     ; Genesis only, Sega CD, Sega 32X, Sega CD32X and Sega Pico
       7/       0 :                     ;
       8/       0 :                     ; Assemble with a modified AS Macro Assembler by flamewing
       9/       0 :                     ; and a custom version of p2bin:
      10/       0 :                     ;
      11/       0 :                     ; asl main.asm -i "." -olist ROM_list.lst -q -xx -A -L -D (flags=value)
      12/       0 :                     ; p2bin -p=00 main.p ROM.bin
      13/       0 :                     ;
      14/       0 :                     ; ASSEMBLER FLAGS:
      15/       0 :                     ; MCD,MARS,MARSCD,PICO,CDREGION,EMU
      16/       0 :                     ;
      17/       0 :                     ; * System targets *
      18/       0 :                     ;    MCD - Sega CD
      19/       0 :                     ;   MARS - Sega 32X
      20/       0 :                     ; MARSCD - Sega CD32X
      21/       0 :                     ;   PICO - Sega Pico
      22/       0 :                     ; The code builds to stock Genesis by default.
      23/       0 :                     ;
      24/       0 :                     ; ONLY enable ONE TARGET at the time (as 1)
      25/       0 :                     ; and set the others to 0
      26/       0 :                     ;
      27/       0 :                     ; CDREGION - SEGACD/CD32X ONLY: Set ROM region
      28/       0 :                     ;            0=Japan 1=USA 2=Europe
      29/       0 :                     ;      EMU - EMULATOR PATCHES TO ROMS
      30/       0 :                     ;            0=Runs on hardware only, 1=Run on emulation
      31/       0 :                     ;
      32/       0 :                     ; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣴⣶⡿⠿⠿⠿⣶⣦⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀
      33/       0 :                     ; ⠀⠀⠀⠀⠀⠀⢀⣠⣶⢟⣿⠟⠁⢰⢋⣽⡆⠈⠙⣿⡿⣶⣄⡀⠀⠀⠀⠀⠀⠀
      34/       0 :                     ; ⠀⠀⠀⠀⣠⣴⠟⠋⢠⣾⠋⠀⣀⠘⠿⠿⠃⣀⠀⠈⣿⡄⠙⠻⣦⣄⠀⠀⠀⠀
      35/       0 :                     ; ⠀⢀⣴⡿⠋⠁⠀⢀⣼⠏⠺⠛⠛⠻⠂⠐⠟⠛⠛⠗⠘⣷⡀⠀⠈⠙⢿⣦⡀⠀
      36/       0 :                     ; ⣴⡟⢁⣀⣠⣤⡾⢿⡟⠀⠀⠀⠘⢷⠾⠷⡾⠃⠀⠀⠀⢻⡿⢷⣤⣄⣀⡈⢻⣦
      37/       0 :                     ; ⠙⠛⠛⠋⠉⠁⠀⢸⡇⠀⠀⢠⣄⠀⠀⠀⠀⣠⡄⠀⠀⢸⡇⠀⠈⠉⠙⠛⠛⠋
      38/       0 :                     ; ⠀⠀⠀⠀⠀⠀⠀⢸⡇⢾⣦⣀⣹⡧⠀⠀⢼⣏⣀⣴⡷⢸⡇⠀⠀⠀⠀⠀⠀⠀
      39/       0 :                     ; ⠀⠀⠀⠀⠀⠀⠀⠸⣧⡀⠈⠛⠛⠁⠀⠀⠈⠛⠛⠁⢀⣼⠇⠀⠀⠀⠀⠀⠀⠀
      40/       0 :                     ; ⠀⠀⠀⠀⠀⠀⠀⢀⣘⣿⣶⣤⣀⣀⣀⣀⣀⣀⣤⣶⣿⣃⠀⠀⠀⠀⠀⠀⠀⠀
      41/       0 :                     ; ⠀⠀⠀⠀⠀⣠⡶⠟⠋⢉⣀⣽⠿⠉⠉⠉⠹⢿⣍⣈⠉⠛⠷⣦⡀⠀⠀⠀⠀⠀
      42/       0 :                     ; ⠀⠀⠀⠀⢾⣯⣤⣴⡾⠟⠋⠁⠀⠀⠀⠀⠀⠀⠉⠛⠷⣶⣤⣬⣿⠀⠀⠀⠀⠀
      43/       0 :                     ; ⠀⠀⠀⠀⠀⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠁⠀⠀⠀⠀⠀
      44/       0 :                     ; ===========================================================================
      45/       0 :                     
      46/       0 :                     ; ====================================================================
      47/       0 :                     ; ----------------------------------------------------------------
      48/       0 :                     ; USER SETTINGS
      49/       0 :                     ; ----------------------------------------------------------------
      50/       0 :                     
      51/       0 :                     ; --------------------------------------------------------
      52/       0 :                     ; 68000 RAM SIZES (SegaCD: MAIN-CPU)
      53/       0 :                     ;
      54/       0 :                     ; MAX_SysCode, MAX_UserCode are only
      55/       0 :                     ; used in Sega CD, 32X and CD32X.
      56/       0 :                     ;
      57/       0 :                     ; Check system/ram.asm for more details.
      58/       0 :                     ; --------------------------------------------------------
      59/       0 :                     
      60/       0 : =$2000               MAX_SysCode	equ $2000	; Common routines ** CD/32X/CD32X ONLY **
 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 2 - 03/24/2024 05:45:06 AM


      61/       0 : =$8000               MAX_UserCode	equ $8000	; Current screen code and small data ** CD/32X/CD32X ONLY **
      62/       0 : =$1800               MAX_ScrnBuff	equ $1800	; Current screen's RAM buffer
      63/       0 : =$2000               MAX_MdVideo	equ $2000	; Video cache'd RAM for visuals, registers, etc.
      64/       0 : =$600                MAX_MdSystem	equ $0600	; Internal lib stuff and a safe copy of save data for reading/writing
      65/       0 : =$E00                MAX_MdOther	equ $0E00	; Add-on stuff
      66/       0 :                     
      67/       0 :                     ; ====================================================================
      68/       0 :                     
      69/       0 :                     		org 0
      70/       0 :                     		cpu 		68000		; Starting CPU is 68000
      71/       0 :                     		padding		off		; Dont pad dc.b
      72/       0 :                     		listing 	purecode	; Want listing file
      73/       0 :                     		supmode 	on 		; Supervisor mode (68K)
      74/       0 :                     		dottedstructs	off
      75/       0 :                     		page 		0
      76/       0 :                     
      77/       0 :                     ; ====================================================================
      78/       0 :                     ; ----------------------------------------------------------------
      79/       0 :                     ; Includes
      80/       0 :                     ; ----------------------------------------------------------------
      81/       0 :                     
      82/       0 :                     		include	"macros.asm"		; Assembler macros
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; -------------------------------------------------------------------
(1)    3/       0 :                     ; MACROS Section
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; *** THIS MUST BE INCLUDED AT START OF THE CODE ***
(1)    6/       0 :                     ; -------------------------------------------------------------------
(1)    7/       0 :                     
(1)    8/       0 :                     ; ====================================================================
(1)    9/       0 :                     ; ------------------------------------------------------------
(1)   10/       0 :                     ; AS Functions
(1)   11/       0 :                     ; ------------------------------------------------------------
(1)   12/       0 :                     
(1)   13/       0 :                     ; vdp_ctrl command
(1)   14/       0 :                     vdp_addr	function a,(((a&$3FFF)|$4000)<<16)|(a>>14)&%11		; .l
(1)   15/       0 :                     vdp_addr_l	function a,((a&$3FFF)|$4000)				; .w
(1)   16/       0 :                     vdp_addr_r	function a,(a>>14)&%11					; .w
(1)   17/       0 :                     cell_vram	function a,(a<<5)					; .w VRAM position in CELLs 8x8
(1)   18/       0 :                     cell_size	function a,(a>>5)					; .w Graphics size in CELLs 8x8
(1)   19/       0 :                     map_size	function l,r,(((l-1)/8)<<16&$FFFF0000|((r-1)/8)&$FFFF)	; .l Full W/H sizes to CELLs 8x8
(1)   20/       0 :                     
(1)   21/       0 :                     ; Code-specific functions
(1)   22/       0 :                     ; locate: $00llxxyy
(1)   23/       0 :                     locate		function a,b,c,(b&$FF)|(a<<8&$FF00)|(c<<16&$FF0000)	; .l CUSTOM screen locator: X,Y,layer
(1)   24/       0 :                     
(1)   25/       0 :                     ; ====================================================================
(1)   26/       0 :                     ; ------------------------------------------------------------
(1)   27/       0 :                     ; Macros
(1)   28/       0 :                     ; ------------------------------------------------------------
(1)   29/       0 :                     
(1)   30/       0 :                     ; --------------------------------------------
(1)   31/       0 :                     ; Custom struct function
(1)   32/       0 :                     ;
(1)   33/       0 :                     ; (Doesn't work on Z80)
(1)   34/       0 :                     ; --------------------------------------------
(1)   35/       0 :                     
(1)   36/       0 :                     strct		macro thisinput			; Reserve memory address
(1)   37/       0 :                     GLBL_LASTPC	set *
(1)   38/       0 :                     		dephase
(1)   39/       0 :                     		phase thisinput
(1)   40/       0 :                     GLBL_LASTORG	set *
(1)   41/       0 :                     		endm
(1)   42/       0 :                     
(1)   43/       0 :                     ; --------------------------------------------
(1)   44/       0 :                     ; Finish struct
(1)   45/       0 :                     ; --------------------------------------------
(1)   46/       0 :                     
(1)   47/       0 :                     endstrct	macro				; Then finish the custom struct.
(1)   48/       0 :                     		org GLBL_LASTORG
(1)   49/       0 :                     		phase GLBL_LASTPC
(1)   50/       0 :                     		endm
(1)   51/       0 :                     
(1)   52/       0 :                     ; --------------------------------------------
(1)   53/       0 :                     ; Report memory usage
(1)   54/       0 :                     ; --------------------------------------------
(1)   55/       0 :                     
(1)   56/       0 :                     report		macro text,dis,dat
(1)   57/       0 :                     	if MOMPASS == 2
(1)   58/       0 :                     		if dat == -1
(1)   59/       0 :                     			message text+": \{(dis)&$FFFFFF}"
(1)   60/       0 :                     		else
(1)   61/       0 :                     			if dis > dat
(1)   62/       0 :                     				warning "RAN OUT OF "+text+" SPACE (\{(dis)&$FFFFFF} of \{(dat)&$FFFFFF})"
(1)   63/       0 :                     			else
(1)   64/       0 :                     				message text+" uses \{(dis)&$FFFFFF} of \{(dat)&$FFFFFF}"
(1)   65/       0 :                     			endif
(1)   66/       0 :                     		endif
(1)   67/       0 :                     	endif
(1)   68/       0 :                     		endm
(1)   69/       0 :                     
(1)   70/       0 :                     ; --------------------------------------------
(1)   71/       0 :                     ; Same as report but only show on error
(1)   72/       0 :                     ; --------------------------------------------
(1)   73/       0 :                     
(1)   74/       0 :                     erreport	macro text,dis,dat
(1)   75/       0 :                     	if MOMPASS == 2
(1)   76/       0 :                     		if dat == -1
(1)   77/       0 :                     			message text+": \{(dis)&$FFFFFF}"
(1)   78/       0 :                     		else
(1)   79/       0 :                     			if dis > dat
(1)   80/       0 :                     				error "RAN OUT OF "+text+" (\{(dis)&$FFFFFF} of \{(dat)&$FFFFFF})"
(1)   81/       0 :                     ; 			else
(1)   82/       0 :                     ; 				message text+" uses \{(dis)&$FFFFFF} of \{(dat)&$FFFFFF}"
(1)   83/       0 :                     			endif
(1)   84/       0 :                     		endif
(1)   85/       0 :                     	endif
(1)   86/       0 :                     		endm
(1)   87/       0 :                     
(1)   88/       0 :                     ; --------------------------------------------
(1)   89/       0 :                     ; ZERO Fill padding
(1)   90/       0 :                     ; --------------------------------------------
(1)   91/       0 :                     
(1)   92/       0 :                     rompad		macro address			; Zero fill
(1)   93/       0 :                     diff := address - *
(1)   94/       0 :                     		if diff < 0
(1)   95/       0 :                     			error "too much stuff before org $\{address} ($\{(-diff)} bytes)"
(1)   96/       0 :                     		else
(1)   97/       0 :                     			while diff > 1024
(1)   98/       0 :                     				; AS can only generate 1 kb of code on a single line
(1)   99/       0 :                     				dc.b [1024]0
(1)  100/       0 :                     diff := diff - 1024
(1)  101/       0 :                     			endm
(1)  102/       0 :                     			dc.b [diff]0
(1)  103/       0 :                     		endif
(1)  104/       0 :                     	endm
(1)  105/       0 :                     
(1)  106/       0 :                     ; ====================================================================
(1)  107/       0 :                     ; ------------------------------------------------------------
(1)  108/       0 :                     ; ISO filesystem macros
(1)  109/       0 :                     ; ------------------------------------------------------------
(1)  110/       0 :                     
(1)  111/       0 :                     ; Set a ISO file
(1)  112/       0 :                     ; NOTE: a valid ISO head is required from $8000 to $B7FF
(1)  113/       0 :                     ; Info data is incorrect but it will load just fine.
(1)  114/       0 :                     
(1)  115/       0 :                     iso_setfs	macro type,start,end
(1)  116/       0 :                     .fstrt:
(1)  117/       0 :                     		dc.b .fend-.fstrt				; Block size
(1)  118/       0 :                     		dc.b 0						; Zero
(1)  119/       0 :                     		dc.b (start>>11&$FF),(start>>19&$FF)		; Start sector, little endian
(1)  120/       0 :                     		dc.b (start>>27&$FF),(start>>35&$FF)
(1)  121/       0 :                     		dc.l start>>11					; Start sector, big endian
(1)  122/       0 :                     		dc.b ((end-start)&$FF),((end-start)>>8&$FF)	; Filesize, little endian
(1)  123/       0 :                     		dc.b ((end-start)>>16&$FF),((end-start)>>24&$FF)
(1)  124/       0 :                     		dc.l end-start					; Filesize, big endian
(1)  125/       0 :                     		dc.b (2024-1900)+1				; Year
(1)  126/       0 :                     		dc.b 0,0,0,0,0,0				; **never done**
(1)  127/       0 :                     		dc.b 2						; File flags
(1)  128/       0 :                     		dc.b 0,0
(1)  129/       0 :                     		dc.b 1,0					; Volume sequence number, little
(1)  130/       0 :                     		dc.b 0,1					; Volume sequence number, big
(1)  131/       0 :                     		dc.b 1,type
(1)  132/       0 :                     .fend:
(1)  133/       0 :                     		endm
(1)  134/       0 :                     
(1)  135/       0 :                     iso_file	macro filename,start,end
(1)  136/       0 :                     .fstrt:		dc.b .fend-.fstrt				; Block size
(1)  137/       0 :                     		dc.b 0						; zero
(1)  138/       0 :                     		dc.b (start>>11&$FF),(start>>19&$FF)		; Start sector, little
(1)  139/       0 :                     		dc.b (start>>27&$FF),(start>>35&$FF)
(1)  140/       0 :                     		dc.l start>>11					; Start sector, big
(1)  141/       0 :                     		dc.b ((end-start)&$FF),((end-start)>>8&$FF)	; Filesize, little
(1)  142/       0 :                     		dc.b ((end-start)>>16&$FF),((end-start)>>24&$FF)
(1)  143/       0 :                     		dc.l end-start					; Filesize, big
(1)  144/       0 :                     		dc.b (2024-1900)+1				; Year
(1)  145/       0 :                     		dc.b 0,0,0,0,0,0				; TODO
(1)  146/       0 :                     		dc.b 0						; File flags
(1)  147/       0 :                     		dc.b 0,0
(1)  148/       0 :                     		dc.b 1,0					; Volume sequence number, little
(1)  149/       0 :                     		dc.b 0,1					; Volume sequence number, big
(1)  150/       0 :                     		dc.b .flend-.flen
(1)  151/       0 :                     .flen:		dc.b filename,";1"
(1)  152/       0 :                     .flend:		dc.b 0
(1)  153/       0 :                     .fend:
(1)  154/       0 :                     		endm
(1)  155/       0 :                     
(1)  156/       0 :                     ; ====================================================================
(1)  157/       0 :                     ; ------------------------------------------------------------
(1)  158/       0 :                     ; Nikona macros
(1)  159/       0 :                     ; ------------------------------------------------------------
(1)  160/       0 :                     
(1)  161/       0 :                     ; --------------------------------------------
(1)  162/       0 :                     ; Screen mode code
(1)  163/       0 :                     ; --------------------------------------------
(1)  164/       0 :                     
(1)  165/       0 :                     screen_code macro lblstart,lblend,path
(1)  166/       0 :                     	if MCD|MARSCD
(1)  167/       0 :                     		align $800		; SCD/CD32X sector align
(1)  168/       0 :                     	elseif MARS
(1)  169/       0 :                     		align 4
(1)  170/       0 :                     		phase $880000+*		; 32X ROM-area
(1)  171/       0 :                     	endif
(1)  172/       0 :                     lblstart label *
(1)  173/       0 :                     	if MARS
(1)  174/       0 :                     		dephase
(1)  175/       0 :                     	endif
(1)  176/       0 :                     
(1)  177/       0 :                     mctopscrn:
(1)  178/       0 :                     	if MARS|MCD|MARSCD
(1)  179/       0 :                     		phase RAM_UserCode	; SCD/32X/CD32X relocate to RAM area
(1)  180/       0 :                     	endif
(1)  181/       0 :                     mcscrn_s:
(1)  182/       0 :                     	include path;"game/screen_0/code.asm"
(1)  183/       0 :                     mcscrn_e:
(1)  184/       0 :                     	if MARS
(1)  185/       0 :                     		dephase	; dephase RAM section
(1)  186/       0 :                     		dephase ; dephase $880000+ section
(1)  187/       0 :                     	elseif MCD|MARSCD
(1)  188/       0 :                     		dephase
(1)  189/       0 :                     		phase mctopscrn+(mcscrn_e-RAM_UserCode)
(1)  190/       0 :                     		align $800
(1)  191/       0 :                     	endif
(1)  192/       0 :                     ; Md_Screen00_e:
(1)  193/       0 :                     lblend label *
(1)  194/       0 :                     	if MCD|MARS|MARSCD
(1)  195/       0 :                     		report "SCREEN MODE: lblstart",mcscrn_e-RAM_UserCode,MAX_UserCode
(1)  196/       0 :                     	else
(1)  197/       0 :                     		if lblend-lblstart > MAX_UserCode
(1)  198/       0 :                     			warning "THIS SCREEN CODE IS TOO LARGE FOR SCD, 32X and CD32X"
(1)  199/       0 :                     		endif
(1)  200/       0 :                     	endif
(1)  201/       0 :                     	endm
(1)  202/       0 :                     
(1)  203/       0 :                     ; --------------------------------------------
(1)  204/       0 :                     ; 68K data bank
(1)  205/       0 :                     ; --------------------------------------------
(1)  206/       0 :                     
(1)  207/       0 :                     data_bkset macro startlbl,except
(1)  208/       0 :                     	if MCD|MARSCD
(1)  209/       0 :                     		align $800
(1)  210/       0 :                     	elseif MARS
(1)  211/       0 :                     		align 4
(1)  212/       0 :                     		if except==-1
(1)  213/       0 :                     			phase $900000+*	; First 32X data bank
(1)  214/       0 :                     		else
(1)  215/       0 :                     			phase $900000
(1)  216/       0 :                     		endif
(1)  217/       0 :                     	endif
(1)  218/       0 :                     ; MCD_DBANK0:
(1)  219/       0 :                     startlbl label *
(1)  220/       0 :                     	if MCD|MARSCD
(1)  221/       0 :                     		phase sysmcd_wram
(1)  222/       0 :                     	elseif MARS
(1)  223/       0 :                     ; 		dephase
(1)  224/       0 :                     	endif
(1)  225/       0 :                     	endm
(1)  226/       0 :                     
(1)  227/       0 :                     data_bkend macro startlbl,endlbl,thissize
(1)  228/       0 :                     	if MARS
(1)  229/       0 :                     		dephase
(1)  230/       0 :                     		report "68K DATA BANK: startlbl ($900000)",thissize,$100000
(1)  231/       0 :                     	elseif MCD|MARSCD
(1)  232/       0 :                     		dephase
(1)  233/       0 :                     		align $800
(1)  234/       0 :                     endlbl label *	; <-- CD/CD32X ONLY
(1)  235/       0 :                     		report "68K DATA BANK: startlbl (WORD-RAM)",thissize,$40000
(1)  236/       0 :                     	endif
(1)  237/       0 :                     
(1)  238/       0 :                     	if MARS
(1)  239/       0 :                     		if thissize > $100000
(1)  240/       0 :                     			warning "THIS BANK SIZE IS TOO LARGE FOR A 32X BANK"
(1)  241/       0 :                     		endif
(1)  242/       0 :                     	endif
(1)  243/       0 :                     
(1)  244/       0 :                     	if thissize > $40000
(1)  245/       0 :                     		warning "THIS BANK SIZE IS TOO LARGE FOR SCD and CD32X (WORD-RAM)"
(1)  246/       0 :                     	endif
(1)  247/       0 :                     	endm
(1)  248/       0 :                     
(1)  249/       0 :                     ; --------------------------------------------
(1)  250/       0 :                     ; 32X ONLY
(1)  251/       0 :                     ; --------------------------------------------
(1)  252/       0 :                     
(1)  253/       0 :                     sdram_bkset macro thislbl,endlbl
(1)  254/       0 :                     	if MCD|MARSCD
(1)  255/       0 :                     		align $800
(1)  256/       0 :                     	elseif MARS
(1)  257/       0 :                     		align 4
(1)  258/       0 :                     		phase $880000+*
(1)  259/       0 :                     	endif
(1)  260/       0 :                     ; MARSDATA_DEFAULT:
(1)  261/       0 :                     thislbl label *
(1)  262/       0 :                     	if MARS
(1)  263/       0 :                     		dephase
(1)  264/       0 :                     	endif
(1)  265/       0 :                     	if MARS|MARSCD
(1)  266/       0 :                     		dc.l endlbl-thislbl
(1)  267/       0 :                     		phase SH2_USER_DATA
(1)  268/       0 :                     	endif
(1)  269/       0 :                     	endm
(1)  270/       0 :                     
(1)  271/       0 :                     ; --------------------------------------------
(1)  272/       0 :                     
(1)  273/       0 :                     sdram_bkend macro thislbl,endlbl
(1)  274/       0 :                     		align $2000	; DREQ data-pack alignment
(1)  275/       0 :                     	if MARS|MARSCD
(1)  276/       0 :                     		dephase
(1)  277/       0 :                     	endif
(1)  278/       0 :                     	if MCD|MARSCD
(1)  279/       0 :                     endlbl label *
(1)  280/       0 :                     		align $800
(1)  281/       0 :                     	elseif MARS
(1)  282/       0 :                     		phase $880000+*
(1)  283/       0 :                     endlbl label *
(1)  284/       0 :                     		dephase
(1)  285/       0 :                     	endif
(1)  286/       0 :                     
(1)  287/       0 :                     	if MARS|MARSCD
(1)  288/       0 :                     		report "SH2 SDRAM DATA: thislbl",endlbl-thislbl,(CS3|$40000)-SH2_USER_DATA
(1)  289/       0 :                     	endif
(1)  290/       0 :                     	endm
(1)  291/       0 :                     
(1)  292/       0 :                     ; ====================================================================
(1)  293/       0 :                     ; ------------------------------------------------------------
(1)  294/       0 :                     ; CODE MACROS
(1)  295/       0 :                     ; ------------------------------------------------------------
(1)  296/       0 :                     
(1)  297/       0 :                     ; --------------------------------------------
(1)  298/       0 :                     ; Set data bank(s) for the current screen
(1)  299/       0 :                     ;
(1)  300/       0 :                     ; Data pointers:
(1)  301/       0 :                     ;
(1)  302/       0 :                     ; mcdpos:
(1)  303/       0 :                     ; 	dc.b "FILENAME.BIN",0
(1)  304/       0 :                     ; 	align 2
(1)  305/       0 :                     ;
(1)  306/       0 :                     ; marspos:
(1)  307/       0 :                     ; 	dc.l MARSDATA_DEFAULT	; 32X Cartridge point (UNUSED on CD32X)
(1)  308/       0 :                     ; 	dc.b "MARSD_00.BIN",0	; CD32X Filename (UNUSED on 32X Cartridge)
(1)  309/       0 :                     ; 	align 2
(1)  310/       0 :                     ; --------------------------------------------
(1)  311/       0 :                     
(1)  312/       0 :                     load_banks macro mcdpos,marspos
(1)  313/       0 :                     	if MARS|MARSCD
(1)  314/       0 :                     		lea	marspos(pc),a0		; 32X/CD32X: SH2 side data
(1)  315/       0 :                     		bsr	System_MarsDataPack	; MUST be first for CD32X
(1)  316/       0 :                     		bsr	Video_MdMars_SyncFrame
(1)  317/       0 :                     	endif
(1)  318/       0 :                     	if MCD|MARSCD
(1)  319/       0 :                     		bsr	System_MdMcd_SubWait
(1)  320/       0 :                     		lea	mcdpos(pc),a0		; CD/CD32X
(1)  321/       0 :                     		bsr	System_McdTrnsfr_WRAM	; WORD-RAM stays loaded
(1)  322/       0 :                     	endif
(1)  323/       0 :                     	endm
(1)  324/       0 :                     
(1)  325/       0 :                     ; --------------------------------------------
(1)  326/       0 :                     ; VDP color debug
(1)  327/       0 :                     ; --------------------------------------------
(1)  328/       0 :                     
(1)  329/       0 :                     vdp_showme	macro color
(1)  330/       0 :                     		move.l	#$C0000000,(vdp_ctrl).l
(1)  331/       0 :                     		move.w	#color,(vdp_data).l
(1)  332/       0 :                     		endm
(1)  333/       0 :                     
      83/       0 :                     		include "game/globals.asm"	; USER variables
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; GLOBAL RAM for ALL screen modes
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; Score, Lives, Level number, etc.
(1)    6/       0 :                     ; ----------------------------------------------------------------
(1)    7/       0 :                     
(1)    8/       0 : (MACRO)              			strct RAM_MdGlobal
(1)    8/       0 : =$0                  GLBL_LASTPC     set *
(1)    8/       0 :                                     dephase
(1)    8/FFFFFFFFFFFFEC04 :                                     phase RAM_MDGLOBAL
(1)    8/FFFFFFFFFFFFEC04 : =$FFFFFFFFFFFFEC04   GLBL_LASTORG    set *
(1)    9/FFFFFFFFFFFFEC04 :                     
(1)   10/FFFFFFFFFFFFEC04 :                     ; ------------------------------------------------------------
(1)   11/FFFFFFFFFFFFEC04 :                     ; Examples:
(1)   12/FFFFFFFFFFFFEC04 :                     ;
(1)   13/FFFFFFFFFFFFEC04 :                     ; RAM_Glbl_ExmpL ds.l 8 ; reserve 4 LONGS ($20 bytes)
(1)   14/FFFFFFFFFFFFEC04 :                     ; RAM_Glbl_ExmpW ds.w 6 ; reserve 3 WORDS ($0C bytes)
(1)   15/FFFFFFFFFFFFEC04 :                     ; RAM_Glbl_ExmpB ds.b 5 ; reserve 5 bytes
(1)   16/FFFFFFFFFFFFEC04 :                     ;
(1)   17/FFFFFFFFFFFFEC04 :                     ; Careful with bytes, everything needs to be word-algined
(1)   18/FFFFFFFFFFFFEC04 :                     ; or your will get an ADDRESS ERROR.
(1)   19/FFFFFFFFFFFFEC04 :                     ; ------------------------------------------------------------
(1)   20/FFFFFFFFFFFFEC04 :                     
(1)   21/FFFFFFFFFFFFEC04 :                     RAM_Glbl_Filler		ds.l 1		; 1 long (4 bytes)
(1)   22/FFFFFFFFFFFFEC08 :                     
(1)   23/FFFFFFFFFFFFEC08 :                     
(1)   24/FFFFFFFFFFFFEC08 :                     ; ------------------------------------------------------------
(1)   25/FFFFFFFFFFFFEC08 :                     sizeof_MdGlbl		ds.l 0		; size label
(1)   26/FFFFFFFFFFFFEC0C : (MACRO)              			endstrct
(1)   26/FFFFFFFFFFFFEC04 :                                     org GLBL_LASTORG
(1)   26/       0 :                                     phase GLBL_LASTPC
(1)   27/       0 :                     
      84/       0 :                     		include	"system/shared.asm"	; Shared variables and specials
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Shared variables
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; ====================================================================
(1)    7/       0 :                     ; ----------------------------------------------------------------
(1)    8/       0 :                     ; 32X SECTION
(1)    9/       0 :                     ; ----------------------------------------------------------------
(1)   10/       0 :                     
(1)  104/       0 :                     
(1)  105/       0 :                     ; ====================================================================
(1)  106/       0 :                     
      85/       0 :                     		include	"system/mcd/map.asm"	; Sega CD hardware map (shared with Sub-CPU)
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; SEGA CD SUB-CPU MAP
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; ------------------------------------------------
(1)    7/       0 :                     ; Register area
(1)    8/       0 :                     ;
(1)    9/       0 :                     ; MAIN-CPU: $A12000 (sysmcd_reg)
(1)   10/       0 :                     ; SUB-CPU:  $FF8000 (scpu_reg)
(1)   11/       0 :                     ; ------------------------------------------------
(1)   12/       0 :                     
(1)   13/       0 :                     ; -------------
(1)   14/       0 :                     ; bits
(1)   15/       0 :                     ; -------------
(1)   16/       0 :                     
(1)   17/       0 : =$2                  bitWRamMode	equ 2		;2M | 1M
(1)   18/       0 :                     
(1)   19/       0 :                     ; -------------
(1)   20/       0 :                     ; Registers
(1)   21/       0 :                     ; -------------
(1)   22/       0 :                     
(1)   23/       0 : =$3                  mcd_memory	equ $03
(1)   24/       0 : =$6                  mcd_hint	equ $06		; [W] HBlank RAM redirection-jump (MAIN CPU ONLY)
(1)   25/       0 : =$E                  mcd_comm_m	equ $0E		; [B] Comm port MAIN R/W | SUB READ ONLY
(1)   26/       0 : =$F                  mcd_comm_s	equ $0F		; [B] Comm port SUB R/W  | MAIN READ ONLY
(1)   27/       0 : =$10                 mcd_dcomm_m	equ $10		; [S: $0E] Communication MAIN
(1)   28/       0 : =$20                 mcd_dcomm_s	equ $20		; [S: $0E] Communication SUB
(1)   29/       0 : =$32                 mcd_intmask	equ $32		;
(1)   30/       0 :                     
(1)   31/       0 :                     ; ====================================================================
(1)   32/       0 :                     
      86/       0 :                     		include	"system/mars/map.asm"	; 32X hardware map (shared with SH2)
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; -------------------------------------------------------------------
(1)    3/       0 :                     ; SH2 MAP
(1)    4/       0 :                     ; -------------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; ------------------------------------------------------------
(1)    7/       0 :                     ; SH2 SIDE MAP
(1)    8/       0 :                     ; ------------------------------------------------------------
(1)    9/       0 :                     
(1)   10/       0 : =$0                  CS0		equ	$00000000	; Boot ROM & System registers
(1)   11/       0 : =$2000000            CS1		equ	$02000000	; ROM data all 4MB, Gone if RV=1
(1)   12/       0 : =$4000000            CS2		equ	$04000000	; Framebuffer area
(1)   13/       0 : =$6000000            CS3		equ	$06000000	; SDRAM
(1)   14/       0 : =$20000000           TH		equ	$20000000	; OR value for CacheThru
(1)   15/       0 : =$20004000           _sysreg		equ	$00004000|TH	; MARS System registers
(1)   16/       0 : =$20004100           _vdpreg		equ	$00004100|TH	; SuperVDP registers
(1)   17/       0 : =$20004200           _palette	equ	$00004200|TH	; Palette RAM for Pixel-Packed or RLE mode
(1)   18/       0 : =$24000000           _framebuffer:	equ	CS2|TH		; Framebuffer: First 240 words are the linetable
(1)   19/       0 : =$24020000           _overwrite:	equ	CS2|TH+$20000	; Overwrite: $00 writes are ignored
(1)   20/       0 :                     
(1)   21/       0 :                     ; ------------------------------------------------------------
(1)   22/       0 :                     ; Variables
(1)   23/       0 :                     ; ------------------------------------------------------------
(1)   24/       0 :                     
(1)   25/       0 :                     ; ------------------------------------------------
(1)   26/       0 :                     ; System
(1)   27/       0 :                     ; ------------------------------------------------
(1)   28/       0 :                     
(1)   29/       0 :                     ; _sysreg
(1)   30/       0 : =$0                  adapter		equ	$00		; adapter control register (Read as WORD)
(1)   31/       0 : =$1                  intmask		equ	$01		; SH2 CPU ONLY: interrupts mask
(1)   32/       0 : =$3                  standby		equ	$03		; CMD interrupt request bit by MD side (slave|master) (BYTE)
(1)   33/       0 : =$5                  hcount		equ	$05		; H Counter (BYTE)
(1)   34/       0 : =$6                  dreqctl		equ	$06		; DREQ control (WORD)
(1)   35/       0 : =$8                  dreqsource	equ	$08		; DREQ source address
(1)   36/       0 : =$C                  dreqdest	equ	$0C		; DREQ destination address
(1)   37/       0 : =$10                 dreqlen		equ	$10		; DREQ length
(1)   38/       0 : =$12                 dreqfifo	equ	$12		; DREQ FIFO
(1)   39/       0 : =$14                 vresintclr	equ	$14		; VRES interrupt clear
(1)   40/       0 : =$16                 vintclr		equ	$16		; V interrupt clear
(1)   41/       0 : =$18                 hintclr		equ	$18		; H interrupt clear
(1)   42/       0 : =$1A                 cmdintclr	equ	$1a		; CMD interrupt clear
(1)   43/       0 : =$1C                 pwmintclr	equ	$1C		; PWM interrupt clear
(1)   44/       0 : =$20                 comm0		equ	$20		; Communication ports ***
(1)   45/       0 : =$21                 comm1		equ	$21		; ALL CPUs can see this ports: including Z80
(1)   46/       0 : =$22                 comm2		equ	$22		; only be careful with the read/write directions.
(1)   47/       0 : =$23                 comm3		equ	$23		; ODD addresses (1,3,5...) are BYTE-read only.
(1)   48/       0 : =$24                 comm4		equ	$24		; EVEN addresses (0,2,4...) can be read as WORDs
(1)   49/       0 : =$25                 comm5		equ	$25		; Writing LONG addreses are possible depending
(1)   50/       0 : =$26                 comm6		equ	$26		; of the CPU's aligment limitations.
(1)   51/       0 : =$27                 comm7		equ	$27		;
(1)   52/       0 : =$28                 comm8		equ	$28		;
(1)   53/       0 : =$29                 comm9		equ	$29		;
(1)   54/       0 : =$2A                 comm10		equ	$2A		;
(1)   55/       0 : =$2B                 comm11		equ	$2B		;
(1)   56/       0 : =$2C                 comm12		equ	$2C		;
(1)   57/       0 : =$2D                 comm13		equ	$2D		;
(1)   58/       0 : =$2E                 comm14		equ	$2E		;
(1)   59/       0 : =$2F                 comm15		equ	$2F		;
(1)   60/       0 : =$30                 timerctl	equ	$30		; PWM Timer Control
(1)   61/       0 : =$31                 pwmctl		equ	$31		; PWM Control
(1)   62/       0 : =$32                 cycle		equ	$32		; PWM Cycle
(1)   63/       0 : =$34                 lchwidth	equ	$34		; PWM L ch Width
(1)   64/       0 : =$36                 rchwidth	equ	$36		; PWM R ch Width
(1)   65/       0 : =$38                 monowidth	equ	$38		; PWM Monaural Width
(1)   66/       0 :                     
(1)   67/       0 :                     ; _sysreg
(1)   68/       0 :                     ; adapter
(1)   69/       0 : =$1                  ADEN		equ	%00000001	; MARS Enabled: No/Yes
(1)   70/       0 : =$2                  RES		equ	%00000010	; SH2 Reset: Yes/Cancelled
(1)   71/       0 : =$80                 FM		equ	%10000000	; SuperVDP permission: MD or SH
(1)   72/       0 :                     
(1)   73/       0 :                     ; framectl
(1)   74/       0 : =$1                  FS		equ	%00000001	; Current framebuffer DRAM pixel data
(1)   75/       0 : =$2                  FEN		equ	%00000010	; Can write to Framebuffer: Yes/No
(1)   76/       0 :                     ; vdpsts
(1)   77/       0 : =$80                 VBLK		equ	%10000000	; VBlank bit
(1)   78/       0 : =$40                 HBLK		equ	%01000000	; HBlank bit
(1)   79/       0 : =$20                 PEN		equ	%00100000	; Can write to Palette: Yes/No
(1)   80/       0 :                     ; intmask
(1)   81/       0 : =$8                  VIRQ_ON		equ	$08		; IRQ masks for IRQ mask register
(1)   82/       0 : =$4                  HIRQ_ON		equ	$04
(1)   83/       0 : =$2                  CMDIRQ_ON	equ	$02
(1)   84/       0 : =$1                  PWMIRQ_ON	equ	$01
(1)   85/       0 :                     
(1)   86/       0 :                     ; _vdpreg
(1)   87/       0 : =$0                  tvmode		equ	$00		; TV mode
(1)   88/       0 : =$1                  bitmapmd	equ	$01		; Bitmap mode
(1)   89/       0 : =$2                  shift		equ	$02		; Lineshift bit
(1)   90/       0 : =$4                  filllength	equ	$04		; Auto Fill Length register
(1)   91/       0 : =$6                  fillstart	equ	$06		; Auto Fill Start Address register
(1)   92/       0 : =$8                  filldata	equ	$08		; Auto Fill Data register
(1)   93/       0 : =$A                  vdpsts		equ	$0A		; VDP Status register
(1)   94/       0 : =$B                  framectl	equ	$0B		; Frame Buffer Control register
(1)   95/       0 :                     
(1)   96/       0 :                     ; ------------------------------------------------------------
(1)   97/       0 :                     ; SH2 Internal registers, for each CPU
(1)   98/       0 :                     ; ------------------------------------------------------------
(1)   99/       0 :                     
(1)  100/       0 :                     ; DMA Channel 0: DREQ
(1)  101/       0 :                     ; DMA Channel 1: PWM
(1)  102/       0 :                     
(1)  103/       0 : =$FFFFFE00           _SERIAL		equ	$FFFFFE00	; Serial Control
(1)  104/       0 : =$FFFFFE10           _FRT		equ	$FFFFFE10	; Free run timer
(1)  105/       0 : =$0                  _TIER		equ	$00		; Timer interrupt enable register
(1)  106/       0 : =$1                  _TCSR		equ	$01		; Timer control & status register
(1)  107/       0 : =$2                  _FRC_H		equ	$02		; Free running counter High
(1)  108/       0 : =$3                  _FRC_L		equ	$03		; Free running counter Low
(1)  109/       0 : =$4                  _OCR_H		equ	$04		; Output compare register High
(1)  110/       0 : =$5                  _OCR_L		equ	$05		; Output compare register Low
(1)  111/       0 : =$6                  _TCR		equ	$06		; Timer control register
(1)  112/       0 : =$7                  _TOCR		equ	$07		; Timer output compare control register
(1)  113/       0 : =$FFFFFE92           _CCR		equ	$FFFFFE92	; Cache register (WORD)
(1)  114/       0 : =$FFFFFF00           _JR		equ	$FFFFFF00	; DIVU (--- / val)
(1)  115/       0 : =$FFFFFF04           _HRL32		equ	$FFFFFF04	; DIVU (val / ---) or RIGHT-long result if read
(1)  116/       0 : =$FFFFFF10           _HRH		equ	$FFFFFF10	; DIVU Result: LEFT long
(1)  117/       0 : =$FFFFFF14           _HRL		equ	$FFFFFF14	; DIVU Result: RIGHT long
(1)  118/       0 : =$FFFFFF80           _DMASOURCE0	equ	$FFFFFF80	; DMA source address 0
(1)  119/       0 : =$FFFFFF84           _DMADEST0	equ	$FFFFFF84	; DMA destination address 0
(1)  120/       0 : =$FFFFFF88           _DMACOUNT0	equ	$FFFFFF88	; DMA transfer count 0
(1)  121/       0 : =$FFFFFF8C           _DMACHANNEL0	equ	$FFFFFF8C	; DMA channel control 0
(1)  122/       0 : =$FFFFFF90           _DMASOURCE1	equ	$FFFFFF90	; DMA source address 1
(1)  123/       0 : =$FFFFFF94           _DMADEST1	equ	$FFFFFF94	; DMA destination address 1
(1)  124/       0 : =$FFFFFF98           _DMACOUNT1	equ	$FFFFFF98	; DMA transfer count 1
(1)  125/       0 : =$FFFFFF9C           _DMACHANNEL1	equ	$FFFFFF9C	; DMA channel control 1
(1)  126/       0 : =$FFFFFFA0           _DMAVECTORN0	equ	$FFFFFFA0	; DMA vector number N0
(1)  127/       0 : =$FFFFFFA4           _DMAVECTORE0	equ	$FFFFFFA4	; DMA vector number E0
(1)  128/       0 : =$FFFFFFA8           _DMAVECTORN1	equ	$FFFFFFA8	; DMA vector number N1
(1)  129/       0 : =$FFFFFFAC           _DMAVECTORE1	equ	$FFFFFFAC	; DMA vector number E1
(1)  130/       0 : =$FFFFFFB0           _DMAOPERATION	equ	$FFFFFFB0	; DMA operation
(1)  131/       0 : =$FFFFFFB4           _DMAREQACK0	equ	$FFFFFFB4	; DMA request/ack select control 0
(1)  132/       0 : =$FFFFFFB8           _DMAREQACK1	equ	$FFFFFFB8	; DMA request/ack select control 1
(1)  133/       0 :                     
      87/       0 :                     		include	"system/md/map.asm"	; Genesis hardware map and other areas
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Genesis / Pico 68000 map
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 : =$200000             sys_exram	equ	$200000		; Second half of 4MB rom or external RAM (Normal or save data)
(1)    7/       0 : =$A00000             z80_cpu		equ	$A00000		; Z80 CPU area, size: $2000
(1)    8/       0 : =$A04000             ym_ctrl_1	equ	$A04000		; YM2612 reg 1
(1)    9/       0 : =$A04001             ym_data_1	equ	$A04001		; YM2612 reg 2
(1)   10/       0 : =$A04002             ym_ctrl_2	equ	$A04002		; YM2612 reg 1
(1)   11/       0 : =$A04003             ym_data_2	equ	$A04003		; YM2612 reg 2
(1)   12/       0 : =$A10001             sys_io		equ	$A10001		; bits: OVRSEAS(7)|PAL(6)|DISK(5)|VER(3-0)
(1)   13/       0 : =$A10003             sys_data_1	equ	$A10003		; Port 1 DATA
(1)   14/       0 : =$A10005             sys_data_2	equ	$A10005		; Port 2 DATA
(1)   15/       0 : =$A10007             sys_data_3	equ	$A10007		; Modem DATA
(1)   16/       0 : =$A10009             sys_ctrl_1	equ	$A10009		; Port 1 CTRL
(1)   17/       0 : =$A1000B             sys_ctrl_2	equ	$A1000B		; Port 2 CTRL
(1)   18/       0 : =$A1000D             sys_ctrl_3	equ	$A1000D		; Modem CTRL
(1)   19/       0 : =$A11100             z80_bus 	equ	$A11100		; only use bit 0 (bit 8 as WORD)
(1)   20/       0 : =$A11200             z80_reset	equ	$A11200		; WRITE only ($0000 reset/$0100 cancel)
(1)   21/       0 : =$A130F1             md_bank_sram	equ	$A130F1		; Make SRAM visible at $200000
(1)   22/       0 : =$A14000             sys_tmss	equ	$A14000		; write "SEGA" here for ver > 0
(1)   23/       0 : =$C00000             vdp_data	equ	$C00000		; video data port
(1)   24/       0 : =$C00004             vdp_ctrl	equ	$C00004		; video control port
(1)   25/       0 : =$C00011             psg_ctrl	equ	$C00011		; PSG control
(1)   26/       0 :                     
(1)   27/       0 :                     ; ----------------------------------------------------------------
(1)   28/       0 :                     ; SEGA CD map
(1)   29/       0 :                     ; ----------------------------------------------------------------
(1)   30/       0 :                     
(1)   31/       0 : =$200000             sysmcd_wram	equ	$200000
(1)   32/       0 : =$A12000             sysmcd_reg	equ	$A12000
(1)   33/       0 :                     
(1)   34/       0 :                     ; ----------------------------------------------------------------
(1)   35/       0 :                     ; 32X map
(1)   36/       0 :                     ; ----------------------------------------------------------------
(1)   37/       0 :                     
(1)   38/       0 : =$A130EC             sysmars_id	equ	$A130EC		; 32X's ID: "MARS"
(1)   39/       0 : =$A15100             sysmars_reg	equ	$A15100		; MARS 32X registers area, see system/mars/map.asm for variables
(1)   40/       0 :                     
(1)   41/       0 :                     ; ----------------------------------------------------------------
(1)   42/       0 :                     ; Genesis / Mega drive Z80 map
(1)   43/       0 :                     ; ----------------------------------------------------------------
(1)   44/       0 :                     
(1)   45/       0 : =$4000               zym_ctrl_1	equ	$4000		; YM2612 reg 1
(1)   46/       0 : =$4001               zym_data_1	equ	$4001		; YM2612 reg 2
(1)   47/       0 : =$4002               zym_ctrl_2	equ	$4002		; YM2612 reg 1
(1)   48/       0 : =$4003               zym_data_2	equ	$4003		; YM2612 reg 2
(1)   49/       0 : =$6000               zbank		equ	$6000		; Z80 ROM BANK: %XXXXXXXX X0000000 00000000 (9 writes)
(1)   50/       0 :                     ; zvdp_data	equ	$7F00		; video data port
(1)   51/       0 :                     ; zvdp_ctrl	equ	$7F04		; video control port
(1)   52/       0 : =$7F11               zpsg_ctrl	equ	$7F11		; PSG control
(1)   53/       0 :                     
      88/       0 :                     		include	"system/md/ram.asm"	; Genesis RAM sections
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Genesis 68000 "MAIN-CPU" RAM section
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; RESERVED RAM areas:
(1)    6/       0 :                     ; $FFFB00-$FFFD00 | Stack area a7
(1)    7/       0 :                     ; $FFFD00-$FFFDFF | RESERVED for the Sega CD Vector jumps,
(1)    8/       0 :                     ;                   * FREE to use if running on Cartridge.
(1)    9/       0 :                     ;                   (Genesis,32X,Pico.)
(1)   10/       0 :                     ; $FFFE00-$FFFEFF | USED in Sega CD for the BIOS, BUT this might
(1)   11/       0 :                     ;                   be free to use after booting **NEEDS testing**
(1)   12/       0 :                     ;                   * FREE to use on Cartridge.
(1)   13/       0 :                     ; $FFFF00-$FFFFFF | RESERVED for the Sound Driver
(1)   14/       0 :                     ;                   This area will probably be used for the 68k
(1)   15/       0 :                     ;                   version of GEMA for the Pico, but currently
(1)   16/       0 :                     ;                   the Z80 sets a flag around here for a
(1)   17/       0 :                     ;                   workaround to read data located at the
(1)   18/       0 :                     ;                   RAM area, it will be required if the
(1)   19/       0 :                     ;                   SegaCD does stamp processing and the game
(1)   20/       0 :                     ;                   still needs sound.
(1)   21/       0 :                     ; ----------------------------------------------------------------
(1)   22/       0 :                     
(1)   23/       0 :                     ; --------------------------------------------------------
(1)   24/       0 :                     ; Settings
(1)   25/       0 :                     ; --------------------------------------------------------
(1)   26/       0 :                     
(1)   27/       0 : (MACRO)              			strct $FFFF0000
(1)   27/       0 : =$0                  GLBL_LASTPC     set *
(1)   27/FFFFFFFFFFFFEC04 :                                     dephase
(1)   27/FFFFFFFFFFFF0000 :                                     phase $FFFF0000
(1)   27/FFFFFFFFFFFF0000 : =$FFFFFFFFFFFF0000   GLBL_LASTORG    set *
(1)   28/FFFFFFFFFFFF0000 :                     RAM_SystemCode		ds.b MAX_SysCode	; CD/32X/CD32X
(1)   29/FFFFFFFFFFFF2000 :                     RAM_UserCode		ds.b MAX_UserCode	; CD/32X/CD32X
(1)   30/FFFFFFFFFFFFA000 :                     
(1)   31/FFFFFFFFFFFFA000 :                     ; ------------------------------------------------
(1)   32/FFFFFFFFFFFFA000 :                     ; > $FF8000 section
(1)   33/FFFFFFFFFFFFA000 :                     ; ------------------------------------------------
(1)   34/FFFFFFFFFFFFA000 :                     
(1)   35/FFFFFFFFFFFFA000 :                     check_thisram		ds.l 0			; <-- get current pos
(1)   39/FFFFFFFFFFFFA004 :                     RAM_MdVideo		ds.b MAX_MdVideo	; $FF8000
(1)   40/FFFFFFFFFFFFC004 :                     RAM_MdSystem		ds.b MAX_MdSystem	;
(1)   41/FFFFFFFFFFFFC604 :                     RAM_MdOther		ds.b MAX_MdOther	; 32X's DREQ goes here
(1)   42/FFFFFFFFFFFFD404 :                     RAM_ScrnBuff		ds.b MAX_ScrnBuff
(1)   43/FFFFFFFFFFFFEC04 :                     RAM_MdGlobal		ds.b sizeof_MdGlbl
(1)   44/FFFFFFFFFFFFD80C :                     sizeof_MdRam		ds.l 0
(1)   45/FFFFFFFFFFFFD810 : (MACRO)              			endstrct
(1)   45/FFFFFFFFFFFF0000 :                                     org GLBL_LASTORG
(1)   45/       0 :                                     phase GLBL_LASTPC
(1)   49/       0 :                     
(1)   50/       0 :                     ; ------------------------------------------------
(1)   51/       0 :                     ; Add-on area
(1)   52/       0 :                     ; ------------------------------------------------
(1)   53/       0 :                     
(1)   54/       0 : (MACRO)              			strct RAM_MdOther
(1)   54/       0 : =$0                  GLBL_LASTPC     set *
(1)   54/FFFFFFFFFFFF0000 :                                     dephase
(1)   54/FFFFFFFFFFFFC604 :                                     phase RAM_MDOTHER
(1)   54/FFFFFFFFFFFFC604 : =$FFFFFFFFFFFFC604   GLBL_LASTORG    set *
(1)   55/FFFFFFFFFFFFC604 :                     RAM_MdDreq		ds.b $E00		; 32X DREQ RAM size (MANUALLY SET)
(1)   56/FFFFFFFFFFFFD404 :                     sizeof_RamOther		ds.l 0
(1)   57/FFFFFFFFFFFFD408 : (MACRO)              			endstrct
(1)   57/FFFFFFFFFFFFC604 :                                     org GLBL_LASTORG
(1)   57/       0 :                                     phase GLBL_LASTPC
(1)   58/       0 : (MACRO)              			erreport "32X DREQ RAM USES",(sizeof_RamOther-RAM_MdOther),MAX_MdOther
(1)   59/       0 :                     
(1)   60/       0 :                     ; ------------------------------------------------
(1)   61/       0 :                     ; Reserved areas
(1)   62/       0 :                     ; ------------------------------------------------
(1)   63/       0 :                     
(1)   64/       0 : =$FFFFFD00           RAM_Stack		equ RAM_MegaCd		; <-- goes backwards
(1)   65/       0 : =$FFFFFD00           RAM_MegaCd		equ $FFFFFD00
(1)   66/       0 : =$FFFFFF00           RAM_ZSndBuff		equ $FFFFFF00
(1)   67/       0 :                     
      89/       0 :                     
      90/       0 :                     ; ====================================================================
      91/       0 :                     ; ----------------------------------------------------------------
      92/       0 :                     ; Init procedures for all systems
      93/       0 :                     ; ----------------------------------------------------------------
      94/       0 :                     
      95/       0 :                     ; ---------------------------------------------
      96/       0 :                     ; SEGA 32X
      97/       0 :                     ; ---------------------------------------------
      98/       0 :                     
     154/       0 :                     		include	"system/head_pico.asm"		; Pico header
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; PICO header
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; REMINDER:
(1)    6/       0 :                     ; NO Z80 CPU, DO NOT READ THE Z80 AREA IF REUSING THE SAME
(1)    7/       0 :                     ; CODE FOR THE GENESIS.
(1)    8/       0 :                     ; ----------------------------------------------------------------
(1)    9/       0 :                     
(1)   10/       0 : FFFF FD00           		dc.l RAM_Stack		; Stack point
(1)   11/       4 : 0000 0204           		dc.l Pico_Entry		; Entry point MUST point to $3F0
(1)   12/       8 : 0000 0200           		dc.l Pico_ErrBus	; Bus error
(1)   13/       C : 0000 0200           		dc.l Pico_ErrAddr	; Address error
(1)   14/      10 : 0000 0200           		dc.l Pico_ErrIll	; ILLEGAL Instruction
(1)   15/      14 : 0000 0200           		dc.l Pico_ErrZDiv	; Divide by 0
(1)   16/      18 : 0000 0200           		dc.l Pico_ErrChk	; CHK Instruction
(1)   17/      1C : 0000 0200           		dc.l Pico_ErrTrapV	; TRAPV Instruction
(1)   18/      20 : 0000 0200           		dc.l Pico_ErrPrivl	; Privilege violation
(1)   19/      24 : 0000 0200           		dc.l Pico_Trace		; Trace
(1)   20/      28 : 0000 0200           		dc.l Pico_Line1010	; Line 1010 Emulator
(1)   21/      2C : 0000 0200           		dc.l Pico_Line1111	; Line 1111 Emulator
(1)   22/      30 : 0000 0200           		dc.l Pico_ErrorEx	; Error exception
(1)   23/      34 : 0000 0200           		dc.l Pico_ErrorEx
(1)   24/      38 : 0000 0200           		dc.l Pico_ErrorEx
(1)   25/      3C : 0000 0200           		dc.l Pico_ErrorEx
(1)   26/      40 : 0000 0200           		dc.l Pico_ErrorEx
(1)   27/      44 : 0000 0200           		dc.l Pico_ErrorEx
(1)   28/      48 : 0000 0200           		dc.l Pico_ErrorEx
(1)   29/      4C : 0000 0200           		dc.l Pico_ErrorEx
(1)   30/      50 : 0000 0200           		dc.l Pico_ErrorEx
(1)   31/      54 : 0000 0200           		dc.l Pico_ErrorEx
(1)   32/      58 : 0000 0200           		dc.l Pico_ErrorEx
(1)   33/      5C : 0000 0200           		dc.l Pico_ErrorEx
(1)   34/      60 : 0000 0200           		dc.l Pico_ErrorEx
(1)   35/      64 : 0000 0200           		dc.l Pico_Error
(1)   36/      68 : 0000 0202           		dc.l Pico_UserInt	; PICO: User interrupt
(1)   37/      6C : 0000 0202           		dc.l Pico_PcmInt	; PICO: PCM-full interrupt
(1)   38/      70 : FFFF C452           		dc.l RAM_MdMarsHInt	; RAM jump for HBlank (JMP xxxx xxxx)
(1)   39/      74 : 0000 0202           		dc.l Pico_UnkInt	; PICO: Unknown
(1)   40/      78 : FFFF C44C           		dc.l RAM_MdMarsVInt	; RAM jump for VBlank (JMP xxxx xxxx)
(1)   41/      7C : 0000 0200           		dc.l Pico_Error
(1)   42/      80 : 0000 0200           		dc.l Pico_Error
(1)   43/      84 : 0000 0200           		dc.l Pico_Error
(1)   44/      88 : 0000 0200           		dc.l Pico_Error
(1)   45/      8C : 0000 0200           		dc.l Pico_Error
(1)   46/      90 : 0000 0200           		dc.l Pico_Error
(1)   47/      94 : 0000 0200           		dc.l Pico_Error
(1)   48/      98 : 0000 0200           		dc.l Pico_Error
(1)   49/      9C : 0000 0200           		dc.l Pico_Error
(1)   50/      A0 : 0000 0200           		dc.l Pico_Error
(1)   51/      A4 : 0000 0200           		dc.l Pico_Error
(1)   52/      A8 : 0000 0200           		dc.l Pico_Error
(1)   53/      AC : 0000 0200           		dc.l Pico_Error
(1)   54/      B0 : 0000 0200           		dc.l Pico_Error
(1)   55/      B4 : 0000 0200           		dc.l Pico_Error
(1)   56/      B8 : 0000 0200           		dc.l Pico_Error
(1)   57/      BC : 0000 0200           		dc.l Pico_Error
(1)   58/      C0 : 0000 0200           		dc.l Pico_Error
(1)   59/      C4 : 0000 0200           		dc.l Pico_Error
(1)   60/      C8 : 0000 0200           		dc.l Pico_Error
(1)   61/      CC : 0000 0200           		dc.l Pico_Error
(1)   62/      D0 : 0000 0200           		dc.l Pico_Error
(1)   63/      D4 : 0000 0200           		dc.l Pico_Error
(1)   64/      D8 : 0000 0200           		dc.l Pico_Error
(1)   65/      DC : 0000 0200           		dc.l Pico_Error
(1)   66/      E0 : 0000 0200           		dc.l Pico_Error
(1)   67/      E4 : 0000 0200           		dc.l Pico_Error
(1)   68/      E8 : 0000 0200           		dc.l Pico_Error
(1)   69/      EC : 0000 0200           		dc.l Pico_Error
(1)   70/      F0 : 0000 0200           		dc.l Pico_Error
(1)   71/      F4 : 0000 0200           		dc.l Pico_Error
(1)   72/      F8 : 0000 0200           		dc.l Pico_Error
(1)   73/      FC : 0000 0200           		dc.l Pico_Error
(1)   74/     100 : 5345 4741 2050      		dc.b "SEGA PICO       "
              106 : 4943 4F20 2020 
              10C : 2020 2020          
(1)   75/     110 : 2843 2947 4636      		dc.b "(C)GF64 2024.???"
              116 : 3420 3230 3234 
              11C : 2E3F 3F3F          
(1)   76/     120 : 4E69 6B6F 6E61      		dc.b "Nikona PICO                                     "
              126 : 2050 4943 4F20 
              12C : 2020 2020 2020 
              132 : 2020 2020 2020 
              138 : 2020 2020 2020 
              13E : 2020 2020 2020 
              144 : 2020 2020 2020 
              14A : 2020 2020 2020    
(1)   77/     150 : 4E69 6B6F 6E61      		dc.b "Nikona PICO                                     "
              156 : 2050 4943 4F20 
              15C : 2020 2020 2020 
              162 : 2020 2020 2020 
              168 : 2020 2020 2020 
              16E : 2020 2020 2020 
              174 : 2020 2020 2020 
              17A : 2020 2020 2020    
(1)   78/     180 : 474D 2048 4F4D      		dc.b "GM HOMEBREW-02"
              186 : 4542 5245 572D 
              18C : 3032             
(1)   79/     18E : 0000                		dc.w 0
(1)   80/     190 : 2020 2020 2020      		dc.b "                "
              196 : 2020 2020 2020 
              19C : 2020 2020          
(1)   81/     1A0 : 0000 0000           		dc.l 0
(1)   82/     1A4 : 0006 C3E0           		dc.l ROM_END
(1)   83/     1A8 : 00FF 0000           		dc.l $FF0000
(1)   84/     1AC : 00FF FFFF           		dc.l $FFFFFF
(1)   85/     1B0 : 2020 2020           		dc.l $20202020		; dc.b "RA",$F8,$20
(1)   86/     1B4 : 2020 2020           		dc.l $20202020		; $200000
(1)   87/     1B8 : 2020 2020           		dc.l $20202020		; $203FFF
(1)   88/     1BC :                     		align $1F0
(1)   89/     1F0 : 4620 2020 2020      		dc.b "F               "
              1F6 : 2020 2020 2020 
              1FC : 2020 2020          
(1)   90/     200 :                     
(1)   91/     200 :                     ; ====================================================================
(1)   92/     200 :                     ; ----------------------------------------------------------------
(1)   93/     200 :                     ; Error handlers
(1)   94/     200 :                     ;
(1)   95/     200 :                     ; All of these do nothing for now.
(1)   96/     200 :                     ; ----------------------------------------------------------------
(1)   97/     200 :                     
(1)   98/     200 :                     Pico_ErrBus:				; Bus error
(1)   99/     200 :                     Pico_ErrAddr:				; Address error
(1)  100/     200 :                     Pico_ErrIll:				; ILLEGAL Instruction
(1)  101/     200 :                     Pico_ErrZDiv:				; Divide by 0
(1)  102/     200 :                     Pico_ErrChk:				; CHK Instruction
(1)  103/     200 :                     Pico_ErrTrapV:				; TRAPV Instruction
(1)  104/     200 :                     Pico_ErrPrivl:				; Privilege violation
(1)  105/     200 :                     Pico_Trace:				; Trace
(1)  106/     200 :                     Pico_Line1010:				; Line 1010 Emulator
(1)  107/     200 :                     Pico_Line1111:				; Line 1111 Emulator
(1)  108/     200 :                     Pico_ErrorEx:				; Error exception
(1)  109/     200 :                     Pico_Error:
(1)  110/     200 : 4E73                		rte			; Return from Exception
(1)  111/     202 :                     
(1)  112/     202 :                     ; ====================================================================
(1)  113/     202 :                     ; ----------------------------------------------------------------
(1)  114/     202 :                     ; PICO-specific interrupts
(1)  115/     202 :                     ; ----------------------------------------------------------------
(1)  116/     202 :                     
(1)  117/     202 :                     Pico_UserInt:
(1)  118/     202 :                     Pico_PcmInt:	; Interrupt when the PCM chip gets full, Ojamajo# uses this.
(1)  119/     202 :                     Pico_UnkInt:
(1)  120/     202 : 4E73                		rte
(1)  121/     204 :                     
(1)  122/     204 :                     ; ====================================================================
(1)  123/     204 :                     ; ----------------------------------------------------------------
(1)  124/     204 :                     ; Entry point
(1)  125/     204 :                     ; ----------------------------------------------------------------
(1)  126/     204 :                     
(1)  127/     204 :                     Pico_Entry:
(1)  128/     204 : 46FC 2700           		move	#$2700,sr		; Disable interrputs
(1)  129/     208 : 41F9 0080 0019      		lea	($800019),a0
(1)  130/     20E : 203C 5345 4741      		move.l	#"SEGA",d0		; Activate PICO system by
(1)  131/     214 : 01C8 0000           		movep.l	d0,(a0)			; writing this to $800019 in odds
(1)  132/     218 : 4A79 00C0 0004      		tst.w	(vdp_ctrl).l		; Test VDP to unlock Video
(1)  133/     21E :                     	; --------------------------------
(1)  134/     21E : 7000                		moveq	#0,d0
(1)  135/     220 : 2C40                		movea.l	d0,a6
(1)  136/     222 : 4E66                		move.l	a6,usp
(1)  137/     224 : 41F9 FFFF 0000      		lea	($FFFF0000),a0		; Clean our "work" RAM
(1)  138/     22A : 223C FFFF D80C      		move.l	#sizeof_mdram,d1
(1)  139/     230 : 7000                		moveq	#0,d0
(1)  140/     232 : 30C0                .loop_ram:	move.w	d0,(a0)+
(1)  141/     234 : B1C1                		cmp.l	d1,a0
(1)  142/     236 : 65FA                		bcs.s	.loop_ram
(1)  143/     238 : 4CF9 7FFF 00FF      		movem.l	($FF0000),d0-a6		; Clean registers using zeros from RAM
              23E : 0000             
(1)  144/     240 : 4DF9 00C0 0000      		lea	(vdp_data),a6
(1)  145/     246 : 3E2E 0004           .wait_dma:	move.w	4(a6),d7		; Check if DMA is active.
(1)  146/     24A : 0807 0001           		btst	#1,d7
(1)  147/     24E : 66F6                		bne.s	.wait_dma
(1)  148/     250 : 2D7C C000 0000      		move.l	#$C0000000,4(a6)	; Clear palette
              256 : 0004             
(1)  149/     258 : 7E3F                		moveq	#64-1,d7
(1)  150/     25A : 7C00                		moveq	#0,d6
(1)  151/     25C :                     .palclear:
(1)  152/     25C : 3C86                		move.w	d6,(a6)
(1)  153/     25E : 51CF FFFC           		dbf	d7,.palclear
(1)  154/     262 :                     
     155/     262 : 6112                		bsr	Sound_init			; Init Sound driver (FIRST)
     156/     264 : 6100 0126           		bsr	Video_init			;  ''  Video
     157/     268 : 6100 0DC2           		bsr	System_Init			;  ''  Values
     158/     26C : 31FC 0000 C458      		move.w	#0,(RAM_ScreenMode).w		; Reset screen mode
     159/     272 : 6000 10E0           		bra.w	Md_ReadModes			; Go to SCREEN LOOP section
     160/     276 :                     
     161/     276 :                     ; ---------------------------------------------
     162/     276 :                     ; MD
     163/     276 :                     ; ---------------------------------------------
     174/     276 :                     
     175/     276 :                     ; ====================================================================
     176/     276 :                     ; --------------------------------------------------------
     177/     276 :                     ; SYSTEM routines and MODE switching code
     178/     276 :                     ;
     179/     276 :                     ; MD and PICO: Normal ROM locations
     180/     276 :                     ; CD/32X/CD32X: Loaded into RAM, This includes cartridge
     181/     276 :                     ;               to prevent bus-conflict with the SH2's
     182/     276 :                     ;               ROM area
     183/     276 :                     ; --------------------------------------------------------
     184/     276 :                     
     189/     276 :                     ; ---------------------------------------------
     190/     276 :                     
     191/     276 :                     		include	"sound/driver/gema.asm"
(1)    1/     276 :                     ; ===========================================================================
(1)    2/     276 :                     ; -------------------------------------------------------------------
(1)    3/     276 :                     ; GEMA/Nikona Sound Driver v1.0
(1)    4/     276 :                     ; by GenesisFan64 2023-2024
(1)    5/     276 :                     ;
(1)    6/     276 :                     ; Features:
(1)    7/     276 :                     ; - Support for SEGA CD's PCM channels:
(1)    8/     276 :                     ;   | All 8 channels with streaming support
(1)    9/     276 :                     ;   | for larger samples.
(1)   10/     276 :                     ; - Support for 32X's PWM:
(1)   11/     276 :                     ;   | 7 pseudo-channels in either MONO
(1)   12/     276 :                     ;   | or STEREO.
(1)   13/     276 :                     ;
(1)   14/     276 :                     ; - DMA ROM protection
(1)   15/     276 :                     ;   | This keeps DAC in a decent quality while
(1)   16/     276 :                     ;   | doing any DMA jobs in the 68k side.
(1)   17/     276 :                     ; - DAC Playback at 16000hz
(1)   18/     276 :                     ; - FM special mode with custom frequencies
(1)   19/     276 :                     ; - Autodetection for the PSG's Tone3 mode
(1)   20/     276 :                     ;
(1)   21/     276 :                     ; Notes:
(1)   22/     276 :                     ; Thie RAM area $FFFF00-$FFFFFF is reserved
(1)   23/     276 :                     ; for the driver, currently the Z80 writes a flag
(1)   24/     276 :                     ; directly for a workaround to bypass a data-reading
(1)   25/     276 :                     ; hardware limitation. (see Sound_Update)
(1)   26/     276 :                     ; The entire section will be used in case
(1)   27/     276 :                     ; I translate the Z80 code to the 68K just for
(1)   28/     276 :                     ; the Sega PICO
(1)   29/     276 :                     ;
(1)   30/     276 :                     ; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣴⣶⡿⠿⠿⠿⣶⣦⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀
(1)   31/     276 :                     ; ⠀⠀⠀⠀⠀⠀⢀⣠⣶⢟⣿⠟⠁⢰⢋⣽⡆⠈⠙⣿⡿⣶⣄⡀⠀⠀⠀⠀⠀⠀
(1)   32/     276 :                     ; ⠀⠀⠀⠀⣠⣴⠟⠋⢠⣾⠋⠀⣀⠘⠿⠿⠃⣀⠀⠈⣿⡄⠙⠻⣦⣄⠀⠀⠀⠀
(1)   33/     276 :                     ; ⠀⢀⣴⡿⠋⠁⠀⢀⣼⠏⠺⠛⠛⠻⠂⠐⠟⠛⠛⠗⠘⣷⡀⠀⠈⠙⢿⣦⡀⠀
(1)   34/     276 :                     ; ⣴⡟⢁⣀⣠⣤⡾⢿⡟⠀⠀⠀⠘⢷⠾⠷⡾⠃⠀⠀⠀⢻⡿⢷⣤⣄⣀⡈⢻⣦
(1)   35/     276 :                     ; ⠙⠛⠛⠋⠉⠁⠀⢸⡇⠀⠀⢠⣄⠀⠀⠀⠀⣠⡄⠀⠀⢸⡇⠀⠈⠉⠙⠛⠛⠋
(1)   36/     276 :                     ; ⠀⠀⠀⠀⠀⠀⠀⢸⡇⢾⣦⣀⣹⡧⠀⠀⢼⣏⣀⣴⡷⢸⡇⠀⠀⠀⠀⠀⠀⠀
(1)   37/     276 :                     ; ⠀⠀⠀⠀⠀⠀⠀⠸⣧⡀⠈⠛⠛⠁⠀⠀⠈⠛⠛⠁⢀⣼⠇⠀⠀⠀⠀⠀⠀⠀
(1)   38/     276 :                     ; ⠀⠀⠀⠀⠀⠀⠀⢀⣘⣿⣶⣤⣀⣀⣀⣀⣀⣀⣤⣶⣿⣃⠀⠀⠀⠀⠀⠀⠀⠀
(1)   39/     276 :                     ; ⠀⠀⠀⠀⠀⣠⡶⠟⠋⢉⣀⣽⠿⠉⠉⠉⠹⢿⣍⣈⠉⠛⠷⣦⡀⠀⠀⠀⠀⠀
(1)   40/     276 :                     ; ⠀⠀⠀⠀⢾⣯⣤⣴⡾⠟⠋⠁⠀⠀⠀⠀⠀⠀⠉⠛⠷⣶⣤⣬⣿⠀⠀⠀⠀⠀
(1)   41/     276 :                     ; ⠀⠀⠀⠀⠀⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠁⠀⠀⠀⠀⠀
(1)   42/     276 :                     ; -------------------------------------------------------------------
(1)   43/     276 :                     
(1)   44/     276 :                     ; ====================================================================
(1)   45/     276 :                     ; --------------------------------------------------------
(1)   46/     276 :                     ; Macros
(1)   47/     276 :                     ; --------------------------------------------------------
(1)   48/     276 :                     
(1)   49/     276 :                     ; Shared for all DAC, PCM, PWM
(1)   50/     276 :                     ; FOR WAV SAMPLES, OFFSET STARTS AT $2C
(1)   51/     276 :                     ;
(1)   52/     276 :                     ; gSmplData Label,"filepath",loop_point(0-beginning)
(1)   53/     276 :                     ; If not doing loop, just write 0.
(1)   54/     276 :                     ;
(1)   55/     276 :                     gSmplData macro labl,file,loop
(1)   56/     276 :                     labl	label *
(1)   57/     276 :                     	dc.b ((labl_e-labl_s)&$FF),(((labl_e-labl_s)>>8)&$FF),(((labl_e-labl_s)>>16)&$FF)
(1)   58/     276 :                     	dc.b ((loop)&$FF),(((loop)>>8)&$FF),(((loop)>>16)&$FF)
(1)   59/     276 :                     labl_s:
(1)   60/     276 :                     	binclude file,$2C
(1)   61/     276 :                     labl_e:
(1)   62/     276 :                     	endm
(1)   63/     276 :                     
(1)   64/     276 :                     ; --------------------------------------------------------
(1)   65/     276 :                     ; Variables
(1)   66/     276 :                     ; --------------------------------------------------------
(1)   67/     276 :                     
(1)   68/     276 :                     ; z80_cpu	equ $A00000		; Z80 CPU area, size: $2000
(1)   69/     276 :                     ; z80_bus 	equ $A11100		; only read bit 0 (bit 8 as WORD)
(1)   70/     276 :                     ; z80_reset	equ $A11200		; WRITE only: $0000 reset/$0100 cancel
(1)   71/     276 :                     
(1)   72/     276 :                     ; Z80-area points:
(1)   73/     276 : =$40                 zDrvFifo	equ commZfifo		; FIFO command storage
(1)   74/     276 : =$2E                 zDrvFWrt	equ commZWrite		; FIFO command index
(1)   75/     276 : =$2F                 zDrvRomBlk	equ commZRomBlk		; ROM block flag
(1)   76/     276 : =$37                 zDrvMarsBlk	equ marsBlock		; Flag to disable 32X's PWM
(1)   77/     276 : =$36                 zDrvMcdBlk	equ mcdBlock		; Flag to disable SegaCD's PCM
(1)   78/     276 : =$35                 zDrvRamSrc	equ cdRamSrcB		; RAM-read source+dest pointers
(1)   79/     276 : =$30                 zDrvRamLen	equ cdRamLen		; RAM-read length and flag
(1)   80/     276 :                     
(1)   81/     276 :                     ; --------------------------------------------------------
(1)   82/     276 :                     ; Labels
(1)   83/     276 :                     ; --------------------------------------------------------
(1)   84/     276 :                     
(1)   85/     276 : =$FFFFFF00           RAM_ZCdFlag_D	equ RAM_ZSndBuff	; transferRom flag
(1)   86/     276 :                     
(1)   87/     276 :                     ; ====================================================================
(1)   88/     276 :                     ; --------------------------------------------------------
(1)   89/     276 :                     ; Initialize Sound
(1)   90/     276 :                     ;
(1)   91/     276 :                     ; Uses:
(1)   92/     276 :                     ; a0-a1,d0-d1
(1)   93/     276 :                     ; --------------------------------------------------------
(1)   94/     276 :                     
(1)   95/     276 :                     ; 		align $80
(1)   96/     276 :                     Sound_Init:
(1)   97/     276 : 007C 0700           		ori.w	#$0700,sr
(1)   99/     27A :                     		; PICO driver init...
(1)  131/     27A : 203C 0000 5AF0      		move.l	#Gema_MasterList,d0
(1)  132/     280 : 6072                		bra	gemaSetMasterList
(1)  133/     282 :                     
(1)  134/     282 :                     ; ----------------------------------------------------------------
(1)  135/     282 :                     ; Sound_Update
(1)  136/     282 :                     ;
(1)  137/     282 :                     ; Call this during DISPLAY or call it during a pre-VBlank
(1)  138/     282 :                     ; wait-loop to communicate and sycronize with the Z80
(1)  139/     282 :                     ;
(1)  140/     282 :                     ; RAM-to-Z80 transferRom workaround:
(1)  141/     282 :                     ; This checks if the Z80 wants to read from RAM (as it can't
(1)  142/     282 :                     ; see it) then this CPU manually writes the RAM bytes from
(1)  143/     282 :                     ; here to the Z80's RAM
(1)  144/     282 :                     ; THIS IS REQUIRED if you want to play your the tracks
(1)  145/     282 :                     ; (and instruments) in case you do ASIC-Stamp scaling and
(1)  146/     282 :                     ; rotation.
(1)  147/     282 :                     ;
(1)  148/     282 :                     ; DAC samples are safe to read from WORD-RAM (NOT
(1)  149/     282 :                     ; during Stamp processing)
(1)  150/     282 :                     ; Be careful when loading new data with gemaSetMasterList to
(1)  151/     282 :                     ; WORD-RAM, make sure MAIN-CPU has the permission set to read
(1)  152/     282 :                     ; the data.
(1)  153/     282 :                     ;
(1)  154/     282 :                     ; Sega Pico:
(1)  155/     282 :                     ; The entire Sound Driver will be here, translated from Z80 to 68k.
(1)  156/     282 :                     ; NO plans for it yet, it just returns as normal.
(1)  157/     282 :                     ;
(1)  158/     282 :                     ; Uses:
(1)  159/     282 :                     ; d5-d7,a4-a6
(1)  160/     282 :                     ; ----------------------------------------------------------------
(1)  161/     282 :                     
(1)  162/     282 :                     Sound_Update:
(1)  164/     282 : 4E75                		rts		; entire Sound driver for Pico goes here
(1)  197/     284 : 4E75                		rts
(1)  198/     286 :                     
(1)  199/     286 :                     ; ====================================================================
(1)  200/     286 :                     ; ----------------------------------------------------------------
(1)  201/     286 :                     ; Subroutines
(1)  202/     286 :                     ; ----------------------------------------------------------------
(1)  203/     286 :                     
(1)  204/     286 :                     ; ------------------------------------------------
(1)  205/     286 :                     ; Lock Z80, get bus
(1)  206/     286 :                     ; ------------------------------------------------
(1)  207/     286 :                     
(1)  208/     286 :                     sndLockZ80:
(1)  215/     286 : 4E75                		rts
(1)  216/     288 :                     
(1)  217/     288 :                     ; ------------------------------------------------
(1)  218/     288 :                     ; Unlock Z80, return bus
(1)  219/     288 :                     ; ------------------------------------------------
(1)  220/     288 :                     
(1)  221/     288 :                     sndUnlockZ80:
(1)  225/     288 : 4E75                		rts
(1)  226/     28A :                     
(1)  227/     28A :                     ; ------------------------------------------------
(1)  228/     28A :                     ; 68K-to-Z80 sound request enter/exit routines
(1)  229/     28A :                     ;
(1)  230/     28A :                     ; d6 - commFifo index
(1)  231/     28A :                     ; ------------------------------------------------
(1)  232/     28A :                     
(1)  233/     28A :                     sndReq_Enter:
(1)  234/     28A : 007C 0700           		ori.w	#$0700,sr			; Disable interrupts
(1)  238/     28E : 9EFC 0004           		suba	#4,sp				; Extra jump return
(1)  239/     292 : 48E7 0306           		movem.l	d6-d7/a5-a6,-(sp)		; Save these regs to the stack
(1)  240/     296 : DEFC 0014           		adda	#(4*4)+4,sp			; Go back to the RTS jump
(1)  241/     29A : 4BF9 00A0 002E      		lea	(z80_cpu+zDrvFWrt),a5		; a5 - commZWrite
(1)  242/     2A0 : 4DF9 00A0 0040      		lea	(z80_cpu+zDrvFifo),a6		; a6 - fifo command list
(1)  243/     2A6 :                     .wait:
(1)  248/     2A6 : 1C15                		move.b	(a5),d6				; d6 - index fifo position
(1)  249/     2A8 : 4886                		ext.w	d6				; extend to 16 bits
(1)  250/     2AA : 4E75                		rts
(1)  251/     2AC :                     ; JUMP ONLY
(1)  252/     2AC :                     sndReq_Exit:
(1)  256/     2AC : 9EFC 0018           		suba	#8+(4*4),sp
(1)  257/     2B0 : 4CDF 60C0           		movem.l	(sp)+,d6-d7/a5-a6		; And pop those back
(1)  258/     2B4 : DEFC 0008           		adda	#8,sp
(1)  259/     2B8 : 027C F8FF           		andi.w	#$F8FF,sr			; Enable interrupts
(1)  260/     2BC : 4E75                		rts
(1)  261/     2BE :                     
(1)  262/     2BE :                     ; ------------------------------------------------
(1)  263/     2BE :                     ; Send request id and arguments
(1)  264/     2BE :                     ;
(1)  265/     2BE :                     ; Input:
(1)  266/     2BE :                     ; d7 - byte to write
(1)  267/     2BE :                     ; d6 - index pointer
(1)  268/     2BE :                     ; a5 - commZWrite, update index
(1)  269/     2BE :                     ; a6 - commZfifo command list
(1)  270/     2BE :                     ;
(1)  271/     2BE :                     ; *** CALL sndReq_Enter FIRST ***
(1)  272/     2BE :                     ; ------------------------------------------------
(1)  273/     2BE :                     
(1)  274/     2BE :                     sndReq_scmd:
(1)  275/     2BE : 1DBC 00FF 6000      		move.b	#-1,(a6,d6.w)			; write command-start flag
(1)  276/     2C4 : 5206                		addq.b	#1,d6				; next fifo pos
(1)  277/     2C6 : 0206 000F           		andi.b	#MAX_ZCMND-1,d6			; * Z80 label *
(1)  278/     2CA : 600C                		bra.s	sndReq_sbyte
(1)  279/     2CC :                     sndReq_slong:
(1)  280/     2CC : 610A                		bsr	sndReq_sbyte
(1)  281/     2CE : E09F                		ror.l	#8,d7
(1)  282/     2D0 :                     sndReq_saddr:	; 24-bit address
(1)  283/     2D0 : 6106                		bsr	sndReq_sbyte
(1)  284/     2D2 : E09F                		ror.l	#8,d7
(1)  285/     2D4 :                     sndReq_sword:
(1)  286/     2D4 : 6102                		bsr	sndReq_sbyte
(1)  287/     2D6 : E09F                		ror.l	#8,d7
(1)  288/     2D8 :                     sndReq_sbyte:
(1)  289/     2D8 : 1D87 6000           		move.b	d7,(a6,d6.w)			; write byte
(1)  290/     2DC : 5206                		addq.b	#1,d6				; next fifo pos
(1)  291/     2DE : 0206 000F           		andi.b	#MAX_ZCMND-1,d6			; * Z80 label *
(1)  292/     2E2 : 1A86                		move.b	d6,(a5)				; update commZWrite
(1)  293/     2E4 : 4E75                		rts
(1)  294/     2E6 :                     
(1)  295/     2E6 :                     ; --------------------------------------------------------
(1)  296/     2E6 :                     ; gemaDmaPause
(1)  297/     2E6 :                     ;
(1)  298/     2E6 :                     ; Call this BEFORE doing any DMA transfer
(1)  299/     2E6 :                     ;
(1)  300/     2E6 :                     ; 32X: Set RV bit manually AFTER calling this.
(1)  301/     2E6 :                     ; --------------------------------------------------------
(1)  302/     2E6 :                     
(1)  303/     2E6 :                     gemaDmaPause:
(1)  305/     2E6 : 4E75                		rts
(1)  318/     2E8 :                     
(1)  319/     2E8 :                     ; --------------------------------------------------------
(1)  320/     2E8 :                     ; gemaDmaResume
(1)  321/     2E8 :                     ;
(1)  322/     2E8 :                     ; Call this AFTER finishing DMA transfer
(1)  323/     2E8 :                     ;
(1)  324/     2E8 :                     ; 32X: Clear the RV bit manually AFTER calling this.
(1)  325/     2E8 :                     ; --------------------------------------------------------
(1)  326/     2E8 :                     
(1)  327/     2E8 :                     gemaDmaResume:
(1)  329/     2E8 : 4E75                		rts
(1)  340/     2EA :                     
(1)  341/     2EA :                     ; ====================================================================
(1)  342/     2EA :                     ; --------------------------------------------------------
(1)  343/     2EA :                     ; USER CALLS
(1)  344/     2EA :                     ; --------------------------------------------------------
(1)  345/     2EA :                     
(1)  346/     2EA :                     ; --------------------------------------------------------
(1)  347/     2EA :                     ; gemaTest
(1)  348/     2EA :                     ;
(1)  349/     2EA :                     ; For TESTING only.
(1)  350/     2EA :                     ; --------------------------------------------------------
(1)  351/     2EA :                     
(1)  352/     2EA :                     gemaTest:
(1)  353/     2EA : 619E                		bsr	sndReq_Enter
(1)  354/     2EC : 3E3C 0000           		move.w	#$00,d7		; Command $00
(1)  355/     2F0 : 61CC                		bsr	sndReq_scmd
(1)  356/     2F2 : 60B8                		bra 	sndReq_Exit
(1)  357/     2F4 :                     
(1)  358/     2F4 :                     ; --------------------------------------------------------
(1)  359/     2F4 :                     ; gemaSetMasterList
(1)  360/     2F4 :                     ;
(1)  361/     2F4 :                     ; Set Tracklist location
(1)  362/     2F4 :                     ;
(1)  363/     2F4 :                     ; Input:
(1)  364/     2F4 :                     ; d0.l | 68k pointer
(1)  365/     2F4 :                     ; --------------------------------------------------------
(1)  366/     2F4 :                     
(1)  367/     2F4 :                     gemaSetMasterList:
(1)  368/     2F4 : 6194                		bsr	sndReq_Enter
(1)  369/     2F6 : 3E3C 0001           		move.w	#$01,d7		; Command $01
(1)  370/     2FA : 61C2                		bsr	sndReq_scmd
(1)  371/     2FC : 2E00                		move.l	d0,d7
(1)  372/     2FE : 61CC                		bsr	sndReq_slong
(1)  373/     300 : 60AA                		bra 	sndReq_Exit
(1)  374/     302 :                     
(1)  375/     302 :                     ; --------------------------------------------------------
(1)  376/     302 :                     ; gemaPlayTrack
(1)  377/     302 :                     ;
(1)  378/     302 :                     ; Play a sequence with arguments
(1)  379/     302 :                     ;
(1)  380/     302 :                     ; Input:
(1)  381/     302 :                     ; d0.b | Playback slot number
(1)  382/     302 :                     ;        If -1: use auto-search
(1)  383/     302 :                     ; d1.b | Sequence number
(1)  384/     302 :                     ; d2.b | Starting block
(1)  385/     302 :                     ; --------------------------------------------------------
(1)  386/     302 :                     
(1)  387/     302 :                     gemaPlayTrack:
(1)  388/     302 : 6186                		bsr	sndReq_Enter
(1)  389/     304 : 3E3C 0002           		move.w	#$02,d7		; Command $02
(1)  390/     308 : 61B4                		bsr	sndReq_scmd
(1)  391/     30A : 1E01                		move.b	d1,d7		; d1.b Seq number
(1)  392/     30C : 61CA                		bsr	sndReq_sbyte
(1)  393/     30E : 1E02                		move.b	d2,d7		; d2.b Block <--
(1)  394/     310 : 61C6                		bsr	sndReq_sbyte
(1)  395/     312 : 1E00                		move.b	d0,d7		; d0.b Slot
(1)  396/     314 : 61C2                		bsr	sndReq_sbyte
(1)  397/     316 : 6094                		bra 	sndReq_Exit
(1)  398/     318 :                     
(1)  399/     318 :                     ; --------------------------------------------------------
(1)  400/     318 :                     ; gemaStopTrack
(1)  401/     318 :                     ;
(1)  402/     318 :                     ; Stops tracks with the same sequence number
(1)  403/     318 :                     ;
(1)  404/     318 :                     ; Input:
(1)  405/     318 :                     ; d0.b | Playback slot number
(1)  406/     318 :                     ;        If -1: Read all slots
(1)  407/     318 :                     ; d1.b | Sequence number to search for
(1)  408/     318 :                     ;        If -1: stop tracks with any sequence
(1)  409/     318 :                     ; --------------------------------------------------------
(1)  410/     318 :                     
(1)  411/     318 :                     gemaStopTrack:
(1)  412/     318 : 6100 FF70           		bsr	sndReq_Enter
(1)  413/     31C : 3E3C 0003           		move.w	#$03,d7		; Command $03
(1)  414/     320 : 619C                		bsr	sndReq_scmd
(1)  415/     322 : 1E01                		move.b	d1,d7		; d0.b Seq number
(1)  416/     324 : 61B2                		bsr	sndReq_sbyte
(1)  417/     326 : 1E00                		move.b	d0,d7		; d1.b Slot
(1)  418/     328 : 61AE                		bsr	sndReq_sbyte
(1)  419/     32A : 6080                		bra 	sndReq_Exit
(1)  420/     32C :                     
(1)  421/     32C :                     ; --------------------------------------------------------
(1)  422/     32C :                     ; gemaStopAll
(1)  423/     32C :                     ;
(1)  424/     32C :                     ; Stops ALL tracks
(1)  425/     32C :                     ; --------------------------------------------------------
(1)  426/     32C :                     
(1)  427/     32C :                     gemaStopAll:
(1)  428/     32C : 6100 FF5C           		bsr	sndReq_Enter
(1)  429/     330 : 3E3C 0003           		move.w	#$03,d7		; Command $03
(1)  430/     334 : 6188                		bsr	sndReq_scmd
(1)  431/     336 : 7EFF                		moveq	#-1,d7		; d0.b Seq number
(1)  432/     338 : 619E                		bsr	sndReq_sbyte
(1)  433/     33A : 7EFF                		moveq	#-1,d7		; d1.b Slot
(1)  434/     33C : 619A                		bsr	sndReq_sbyte
(1)  435/     33E : 6000 FF6C           		bra 	sndReq_Exit
(1)  436/     342 :                     
(1)  437/     342 :                     ; --------------------------------------------------------
(1)  438/     342 :                     ; gemaFadeTrack
(1)  439/     342 :                     ;
(1)  440/     342 :                     ; Set Master volume to a track slot.
(1)  441/     342 :                     ;
(1)  442/     342 :                     ; Input:
(1)  443/     342 :                     ; d0.b | Playback slot number
(1)  444/     342 :                     ;        If -1: Apply to all slots
(1)  445/     342 :                     ; d1.b | Target volume
(1)  446/     342 :                     ; d2.b | Fade speed TODO
(1)  447/     342 :                     ;
(1)  448/     342 :                     ; Notes:
(1)  449/     342 :                     ; - DO NOT MIX THIS WITH gemaSetTrackVol
(1)  450/     342 :                     ; - In v1.0 this only works during new notes on playback.
(1)  451/     342 :                     ; --------------------------------------------------------
(1)  452/     342 :                     
(1)  453/     342 :                     gemaFadeTrack:
(1)  454/     342 : 6100 FF46           		bsr	sndReq_Enter
(1)  455/     346 : 3E3C 0005           		move.w	#$05,d7		; Command $05
(1)  456/     34A : 6100 FF72           		bsr	sndReq_scmd
(1)  457/     34E : 1E01                		move.b	d1,d7		; d0.b Target volume
(1)  458/     350 : 6186                		bsr	sndReq_sbyte
(1)  459/     352 : 1E00                		move.b	d0,d7		; d1.b Slot
(1)  460/     354 : 6182                		bsr	sndReq_sbyte
(1)  461/     356 : 6000 FF54           		bra 	sndReq_Exit
(1)  462/     35A :                     
(1)  463/     35A :                     ; --------------------------------------------------------
(1)  464/     35A :                     ; gemaSetTrackVol
(1)  465/     35A :                     ;
(1)  466/     35A :                     ; Set Master volume to a track slot.
(1)  467/     35A :                     ;
(1)  468/     35A :                     ; Input:
(1)  469/     35A :                     ; d0.b | Playback slot number
(1)  470/     35A :                     ;        If -1: Set to all slots
(1)  471/     35A :                     ; d1.b | Master volume:
(1)  472/     35A :                     ;        $00-max $40-min
(1)  473/     35A :                     ;
(1)  474/     35A :                     ; Notes:
(1)  475/     35A :                     ; - DO NOT MIX THIS WITH gemaFadeTrack
(1)  476/     35A :                     ; - In v1.0 this only works on (re)start
(1)  477/     35A :                     ;   or during new notes on playback.
(1)  478/     35A :                     ; --------------------------------------------------------
(1)  479/     35A :                     
(1)  480/     35A :                     gemaSetTrackVol:
(1)  481/     35A : 6100 FF2E           		bsr	sndReq_Enter
(1)  482/     35E : 3E3C 0006           		move.w	#$06,d7		; Command $06
(1)  483/     362 : 6100 FF5A           		bsr	sndReq_scmd
(1)  484/     366 : 1E01                		move.b	d1,d7		; d0.b Volume data <--
(1)  485/     368 : 6100 FF6E           		bsr	sndReq_sbyte
(1)  486/     36C : 1E00                		move.b	d0,d7		; d1.b Slot
(1)  487/     36E : 6100 FF68           		bsr	sndReq_sbyte
(1)  488/     372 : 6000 FF38           		bra 	sndReq_Exit
(1)  489/     376 :                     
(1)  490/     376 :                     ; --------------------------------------------------------
(1)  491/     376 :                     ; gemaSetBeats
(1)  492/     376 :                     ;
(1)  493/     376 :                     ; Sets global sub-beats, affects ALL tracks.
(1)  494/     376 :                     ;
(1)  495/     376 :                     ; Input:
(1)  496/     376 :                     ; d0.w | sub-beats
(1)  497/     376 :                     ; --------------------------------------------------------
(1)  498/     376 :                     
(1)  499/     376 :                     ; TODO: Find a way to calculate this to a tempo
(1)  500/     376 :                     ; Value 212 is tempo 125 on NTSC speed
(1)  501/     376 :                     
(1)  502/     376 :                     gemaSetBeats:
(1)  503/     376 : 6100 FF12           		bsr	sndReq_Enter
(1)  504/     37A : 3E3C 0007           		move.w	#$07,d7		; Command $07
(1)  505/     37E : 6100 FF3E           		bsr	sndReq_scmd
(1)  506/     382 : 3E00                		move.w	d0,d7
(1)  507/     384 : 6100 FF4E           		bsr	sndReq_sword
(1)  508/     388 : 6000 FF22           		bra 	sndReq_Exit
(1)  509/     38C :                     
     192/     38C :                     		include	"system/md/video.asm"
(1)    1/     38C :                     ; ===========================================================================
(1)    2/     38C :                     ; ----------------------------------------------------------------
(1)    3/     38C :                     ; Genesis VDP section
(1)    4/     38C :                     ; ----------------------------------------------------------------
(1)    5/     38C :                     
(1)    6/     38C :                     ; ====================================================================
(1)    7/     38C :                     ; --------------------------------------------------------
(1)    8/     38C :                     ; Settings
(1)    9/     38C :                     ; --------------------------------------------------------
(1)   10/     38C :                     
(1)   11/     38C : =$18                 MAX_MDOBJ	equ 24		; MAX Objects
(1)   12/     38C : =$18                 MAX_MDDMATSK	equ 24		; MAX DMA BLAST entries
(1)   13/     38C : =$7FF                SET_NullVram	equ $07FF	; Default Blank cell
(1)   14/     38C : =$580                SET_PrintVram	equ $0580	; Default VRAM location of the PRINT text graphics
(1)   15/     38C : =$480                SET_DefAutoDma	equ $0480	; Default VRAM location for auto-DMA storage
(1)   16/     38C : =$3                  SET_PrintPal	equ 3		; Palette line to use for the printable text
(1)   17/     38C :                     
(1)   18/     38C :                     ; --------------------------------------------------------
(1)   19/     38C :                     ; Variables
(1)   20/     38C :                     ; --------------------------------------------------------
(1)   21/     38C :                     
(1)   22/     38C :                     ; ------------------------------------------------
(1)   23/     38C :                     ; VDP Register $80
(1)   24/     38C :                     ; ------------------------------------------------
(1)   25/     38C :                     
(1)   26/     38C : =$2                  HVStop		equ $02
(1)   27/     38C : =$10                 HintEnbl	equ $10
(1)   28/     38C : =$1                  bitHVStop	equ 1
(1)   29/     38C : =$4                  bitHintEnbl	equ 4
(1)   30/     38C :                     
(1)   31/     38C :                     ; ------------------------------------------------
(1)   32/     38C :                     ; VDP Register $81
(1)   33/     38C :                     ; ------------------------------------------------
(1)   34/     38C :                     
(1)   35/     38C : =$40                 DispEnbl 	equ $40
(1)   36/     38C : =$20                 VintEnbl 	equ $20
(1)   37/     38C : =$10                 DmaEnbl		equ $10
(1)   38/     38C : =$6                  bitDispEnbl	equ 6
(1)   39/     38C : =$5                  bitVintEnbl	equ 5
(1)   40/     38C : =$4                  bitDmaEnbl	equ 4
(1)   41/     38C : =$3                  bitV30		equ 3
(1)   42/     38C :                     
(1)   43/     38C :                     ; ------------------------------------------------
(1)   44/     38C :                     ; vdp_ctrl READ bits (full WORD)
(1)   45/     38C :                     ; ------------------------------------------------
(1)   46/     38C :                     
(1)   47/     38C : =$9                  bitFifoE	equ 9		; DMA FIFO empty
(1)   48/     38C : =$8                  bitFifoF	equ 8		; DMA FIFO full
(1)   49/     38C : =$7                  bitVInt		equ 7		; Vertical interrupt
(1)   50/     38C : =$6                  bitSprOvr	equ 6		; Sprite overflow
(1)   51/     38C : =$5                  bitSprCol	equ 5		; Sprite collision
(1)   52/     38C : =$4                  bitOdd		equ 4		; EVEN or ODD frame displayed on interlace mode
(1)   53/     38C : =$3                  bitVBlk		equ 3		; Inside VBlank
(1)   54/     38C : =$2                  bitHBlk		equ 2		; Inside HBlank
(1)   55/     38C : =$1                  bitDma		equ 1		; This bit only works on FILL and COPY
(1)   56/     38C : =$0                  bitPal		equ 0
(1)   57/     38C :                     
(1)   58/     38C :                     ; ====================================================================
(1)   59/     38C :                     ; ----------------------------------------------------------------
(1)   60/     38C :                     ; Structs
(1)   61/     38C :                     ; ----------------------------------------------------------------
(1)   62/     38C :                     
(1)   63/     38C :                     ; ------------------------------------------------
(1)   64/     38C :                     ; Genesis object
(1)   65/     38C :                     ;
(1)   66/     38C :                     ; obj_set: %M--- --vh
(1)   67/     38C :                     ; 	| M - Draw this object on
(1)   68/     38C :                     ;             Genesis or 32X
(1)   69/     38C :                     ; 	| h - Flip Y
(1)   70/     38C :                     ; 	| v - Flip X
(1)   71/     38C :                     ;
(1)   72/     38C :                     ; obj_size: $uuddllrr
(1)   73/     38C :                     ; 	| u - Up/8
(1)   74/     38C :                     ; 	| d - Down/8
(1)   75/     38C :                     ; 	| l - Left/8
(1)   76/     38C :                     ; 	| r - Right/8
(1)   77/     38C :                     ; ------------------------------------------------
(1)   78/     38C :                     
(1)   79/     38C : (MACRO)              		strct 0
(1)   79/     38C : =$38C                GLBL_LASTPC     set *
(1)   79/FFFFFFFFFFFFC990 :                                     dephase
(1)   79/       0 :                                     phase 0
(1)   79/       0 : =$0                  GLBL_LASTORG    set *
(1)   80/       0 :                     obj_code	ds.l 1		; Object code, If 0 slot is unused.
(1)   81/       4 :                     obj_x		ds.l 1		; Object X Position $xxxx.0000
(1)   82/       8 :                     obj_y		ds.l 1		; Object Y Position $yyyy.0000
(1)   83/       C :                     obj_map		ds.l 1		; Object Sprite-map data location
(1)   84/      10 :                     obj_size	ds.l 1		; Object Size starting from center point X/Y, also used for obj-to-obj collision detection.
(1)   85/      14 :                     obj_vram	ds.w 1		; Object VRAM position (If DMA enabled: output location)
(1)   86/      16 :                     obj_x_spd	ds.w 1		; Object X Speed $xx.00
(1)   87/      18 :                     obj_y_spd	ds.w 1		; Object Y Speed $yy.00
(1)   88/      1A :                     obj_anim_indx	ds.w 1		; *internal* Object animation script index (obj_anim + obj_anim_indx)
(1)   89/      1C :                     obj_frame	ds.w 1		; Object current frame (overwritten by object_Animate)
(1)   90/      1E :                     obj_anim_id	ds.b 1		; Object animation number
(1)   91/      1F :                     obj_anim_icur	ds.b 1		; *internal* Object current animation id (DONT SEPARATE THIS FROM obj_anim_id)
(1)   92/      20 :                     obj_anim_spd	ds.b 1		; *internal* Object animation delay
(1)   93/      21 :                     obj_index	ds.b 1		; Object code-index
(1)   94/      22 :                     obj_set		ds.b 1		; Object settings
(1)   95/      23 :                     obj_subid	ds.b 1		; Object Sub-ID (for object placement)
(1)   96/      24 :                     obj_status	ds.b 1		; Object USER status (falling, collision, etc.)
(1)   97/      25 :                     obj_FREE	ds.b 1		; (FILLER align byte)
(1)   98/      26 :                     obj_ram		ds.b $40	; Object's own RAM
(1)   99/      66 :                     sizeof_mdobj	ds.l 0
(1)  100/      68 : (MACRO)              		endstrct
(1)  100/       0 :                                     org GLBL_LASTORG
(1)  100/     38C :                                     phase GLBL_LASTPC
(1)  101/     38C :                     ; 		message "\{sizeof_mdobj}"
(1)  102/     38C :                     
(1)  103/     38C :                     ; ------------------------------------------------
(1)  104/     38C :                     ; ** obj_set
(1)  105/     38C :                     ; ------------------------------------------------
(1)  106/     38C :                     
(1)  107/     38C : =$7                  bitobj_Mars	equ	7	; 32X ONLY: This objects draws to the 32X side (256-color sprite)
(1)  108/     38C : =$1                  bitobj_flipV	equ	1	; Set to flip object Vertically
(1)  109/     38C : =$0                  bitobj_flipH	equ	0	; Set to flip object Horizontally
(1)  110/     38C :                     
(1)  111/     38C :                     ; ====================================================================
(1)  112/     38C :                     ; ----------------------------------------------------------------
(1)  113/     38C :                     ; Video RAM
(1)  114/     38C :                     ; ----------------------------------------------------------------
(1)  115/     38C :                     
(1)  116/     38C : (MACRO)              			strct RAM_MdVideo
(1)  116/     38C : =$38C                GLBL_LASTPC     set *
(1)  116/       0 :                                     dephase
(1)  116/FFFFFFFFFFFFA004 :                                     phase RAM_MDVIDEO
(1)  116/FFFFFFFFFFFFA004 : =$FFFFFFFFFFFFA004   GLBL_LASTORG    set *
(1)  117/FFFFFFFFFFFFA004 :                     RAM_HorScroll		ds.l 240			; DMA Horizontal scroll data
(1)  118/FFFFFFFFFFFFA3C4 :                     RAM_VerScroll		ds.l 320/16			; DMA Vertical scroll data
(1)  119/FFFFFFFFFFFFA414 :                     RAM_Sprites		ds.w 8*80			; DMA Sprites
(1)  120/FFFFFFFFFFFFA914 :                     RAM_Palette		ds.w 64				; DMA palette
(1)  121/FFFFFFFFFFFFA994 :                     ; RAM_SprDrwPz		ds.w 8*80			; External sprite pieces
(1)  122/FFFFFFFFFFFFA994 :                     RAM_MdMarsPalFd		ds.w 256			; Target 32X palette for FadeIn/Out
(1)  123/FFFFFFFFFFFFAB94 :                     RAM_PaletteFd		ds.w 64				; Target MD palette for FadeIn/Out
(1)  124/FFFFFFFFFFFFAC14 :                     RAM_VdpDmaList		ds.b $10*MAX_MDDMATSK		; DMA BLAST list for VBlank
(1)  125/FFFFFFFFFFFFAD94 :                     RAM_Objects		ds.b MAX_MDOBJ*sizeof_mdobj	; Objects
(1)  126/FFFFFFFFFFFFB724 :                     RAM_ObjDispList		ds.w MAX_MDOBJ			; half-RAM pointers for display (Obj|Extra)
(1)  127/FFFFFFFFFFFFB754 :                     RAM_VidPrntList		ds.w 3*64			; Video_Print list: Address, Type
(1)  128/FFFFFFFFFFFFB8D4 :                     RAM_FrameCount		ds.l 1				; Frames counter
(1)  129/FFFFFFFFFFFFB8D8 :                     RAM_SprAutoDmaSet	ds.w 1				; VRAM location setting for Auto-DMA VRAM
(1)  130/FFFFFFFFFFFFB8DA :                     RAM_SprAutoDmaCurr	ds.w 1				; CURRENT reading location for Auto-DMA
(1)  131/FFFFFFFFFFFFB8DC :                     RAM_SprDrwCntr		ds.w 1				; TODO
(1)  132/FFFFFFFFFFFFB8DE :                     RAM_SprLinkNum		ds.w 1				; Current sprite-link for building sprites
(1)  133/FFFFFFFFFFFFB8E0 :                     ; RAM_VdpExWrite		ds.w 1
(1)  134/FFFFFFFFFFFFB8E0 :                     RAM_VdpDmaIndx		ds.w 1				; Current index in DMA BLAST list
(1)  135/FFFFFFFFFFFFB8E2 :                     RAM_VdpDmaMod		ds.w 1				; Mid-write flag
(1)  136/FFFFFFFFFFFFB8E4 :                     RAM_VidPrntVram		ds.w 1				; Default VRAM location for ASCII text used by Video_Print
(1)  137/FFFFFFFFFFFFB8E6 :                     RAM_FadeMdReq		ds.w 1				; FadeIn/Out request for Genesis palette (01-FadeIn 02-FadeOut)
(1)  138/FFFFFFFFFFFFB8E8 :                     RAM_FadeMdIncr		ds.w 1				; Fading increment count
(1)  139/FFFFFFFFFFFFB8EA :                     RAM_FadeMdDelay		ds.w 1				; Fading delay
(1)  140/FFFFFFFFFFFFB8EC :                     RAM_FadeMdTmr		ds.w 1				; Fading delay timer
(1)  141/FFFFFFFFFFFFB8EE :                     RAM_FadeMarsReq		ds.w 1				; Same thing but for 32X's 256-color (01-FadeIn 02-FadeOut)
(1)  142/FFFFFFFFFFFFB8F0 :                     RAM_FadeMarsIncr	ds.w 1				; (Hint: Set to 4 to syncronize with Genesis' FadeIn/Out)
(1)  143/FFFFFFFFFFFFB8F2 :                     RAM_FadeMarsDelay	ds.w 1
(1)  144/FFFFFFFFFFFFB8F4 :                     RAM_FadeMarsTmr		ds.w 1
(1)  145/FFFFFFFFFFFFB8F6 :                     RAM_MdMars_DrawAll	ds.w 1
(1)  146/FFFFFFFFFFFFB8F8 :                     RAM_VdpRegs		ds.b 24				; VDP Register cache
(1)  147/FFFFFFFFFFFFB910 :                     sizeof_mdvid		ds.l 0
(1)  148/FFFFFFFFFFFFB914 : (MACRO)              			endstrct
(1)  148/FFFFFFFFFFFFA004 :                                     org GLBL_LASTORG
(1)  148/     38C :                                     phase GLBL_LASTPC
(1)  149/     38C :                     
(1)  150/     38C : (MACRO)              		erreport "MD VIDEO RAM",sizeof_mdvid-RAM_MdVideo,MAX_MdVideo
(1)  151/     38C :                     
(1)  152/     38C :                     ; ====================================================================
(1)  153/     38C :                     ; --------------------------------------------------------
(1)  154/     38C :                     ; Initialize Genesis video
(1)  155/     38C :                     ;
(1)  156/     38C :                     ; Breaks:
(1)  157/     38C :                     ; d6-d7/a5-a6
(1)  158/     38C :                     ; --------------------------------------------------------
(1)  159/     38C :                     
(1)  160/     38C :                     Video_Init:
(1)  161/     38C : 4DF8 A004           		lea	(RAM_MdVideo).w,a6		; Clear our RAM section
(1)  162/     390 : 3C3C 8000           		move.w	#$8000,d6
(1)  163/     394 : 3E3C 190B           		move.w	#(sizeof_mdvid-RAM_MdVideo)-1,d7
(1)  164/     398 :                     .clrram:
(1)  165/     398 : 1CC6                		move.b	d6,(a6)+			; (Write the LSB zero)
(1)  166/     39A : 51CF FFFC           		dbf	d7,.clrram
(1)  167/     39E : 31FC 0480 B8D8      		move.w	#SET_DefAutoDma,(RAM_SprAutoDmaSet).w
(1)  168/     3A4 : 31FC 0001 B8DE      		move.w	#1,(RAM_SprLinkNum).w
(1)  169/     3AA : 31F8 B8D8 B8DA      		move.w	(RAM_SprAutoDmaSet).w,(RAM_SprAutoDmaCurr).w
(1)  170/     3B0 : 4DFA 0030           		lea	list_vdpregs(pc),a6		; Write "cache'd" VDP registers
(1)  171/     3B4 : 4BF8 B8F8           		lea	(RAM_VdpRegs).w,a5
(1)  172/     3B8 : 3E3C 0010           		move.w	#17-1,d7
(1)  173/     3BC :                     .loop:
(1)  174/     3BC : 1C1E                		move.b	(a6)+,d6
(1)  175/     3BE : 1AC6                		move.b	d6,(a5)+
(1)  176/     3C0 : 51CF FFFA           		dbf	d7,.loop
(1)  177/     3C4 :                     
(1)  178/     3C4 :                     ; --------------------------------------------------------
(1)  179/     3C4 :                     ; Video_Update
(1)  180/     3C4 :                     ;
(1)  181/     3C4 :                     ; Writes register data stored in RAM to VDP
(1)  182/     3C4 :                     ; from registers $80 to $90
(1)  183/     3C4 :                     ;
(1)  184/     3C4 :                     ; WINDOW registers $91 and $92 are written
(1)  185/     3C4 :                     ; manually.
(1)  186/     3C4 :                     ;
(1)  187/     3C4 :                     ; Breaks:
(1)  188/     3C4 :                     ; d6-d7/a5-a6
(1)  189/     3C4 :                     ; --------------------------------------------------------
(1)  190/     3C4 :                     
(1)  191/     3C4 :                     Video_Update:
(1)  192/     3C4 : 4DF8 B8F8           		lea	(RAM_VdpRegs).w,a6
(1)  193/     3C8 : 4BF9 00C0 0004      		lea	(vdp_ctrl),a5
(1)  194/     3CE : 3C3C 8000           		move.w	#$8000,d6
(1)  195/     3D2 : 7E10                		moveq	#17-1,d7
(1)  196/     3D4 :                     .loop:
(1)  197/     3D4 : 1C1E                		move.b	(a6)+,d6
(1)  198/     3D6 : 3A86                		move.w	d6,(a5)
(1)  199/     3D8 : 0646 0100           		addi.w	#$0100,d6
(1)  200/     3DC : 51CF FFF6           		dbf	d7,.loop
(1)  201/     3E0 :                     .exit:
(1)  202/     3E0 : 4E75                		rts
(1)  203/     3E2 :                     
(1)  204/     3E2 :                     ; ------------------------------------------------
(1)  205/     3E2 :                     ; Default VDP register settings
(1)  206/     3E2 :                     ; ------------------------------------------------
(1)  207/     3E2 :                     
(1)  208/     3E2 :                     list_vdpregs:
(1)  209/     3E2 : 04                  		dc.b $04			; No HBlank interrupt, HV Counter on
(1)  210/     3E3 : 04                  		dc.b $04			; Display ON, No VBlank interrupt
(1)  211/     3E4 : 30                  		dc.b (($C000)>>10)		; Layer A at VRAM $C000 (%00xxx000)
(1)  212/     3E5 : 34                  		dc.b (($D000)>>10)		; Window  at VRAM $D000 (%00xxxxy0)
(1)  213/     3E6 : 07                  		dc.b (($E000)>>13)		; Layer B at VRAM $E000 (%00000xxx)
(1)  214/     3E7 : 7C                  		dc.b (($F800)>>9)		; Sprites at VRAM $F800 (%0xxxxxxy) (OLD $F800)
(1)  215/     3E8 : 00                  		dc.b $00			; Unused
(1)  216/     3E9 : 00                  		dc.b $00			; Background color: $00
(1)  217/     3EA : 00                  		dc.b $00			; Unused
(1)  218/     3EB : 00                  		dc.b $00			; Unused
(1)  219/     3EC : 00                  		dc.b $00			; HInt line number trigger
(1)  220/     3ED : 00                  		dc.b (%000|%00)			; No ExtInt, Scroll: VSCR:full HSCR:full
(1)  221/     3EE : 81                  		dc.b $81			; H40, No shadow mode, 320-pixel resolution mode
(1)  222/     3EF : 3F                  		dc.b (($FC00)>>10)		; HScroll at VRAM $FC00 (%00xxxxxx)
(1)  223/     3F0 : 00                  		dc.b $00			; Unused
(1)  224/     3F1 : 02                  		dc.b $02			; VDP auto-increment: $02
(1)  225/     3F2 : 01                  		dc.b (%00<<4)|%01		; Scroll area size: V32 H64
(1)  226/     3F3 : 00                  		dc.b $00
(1)  227/     3F4 : 00                  		dc.b $00
(1)  228/     3F5 :                     		align 2
(1)  229/     3F6 :                     
(1)  230/     3F6 :                     ; Default ASCII PRINT palette
(1)  231/     3F6 : 0000 0EEE 0CCC      ASCII_PAL:	dc.w $0000,$0EEE,$0CCC,$0AAA,$0888,$0444,$000E,$0008
              3FC : 0AAA 0888 0444 
              402 : 000E 0008          
(1)  232/     406 : 00EE 0088 00E0      		dc.w $00EE,$0088,$00E0,$0080,$0E00,$0800,$0000,$0000
              40C : 0080 0E00 0800 
              412 : 0000 0000          
(1)  233/     416 :                     		align 2
(1)  234/     416 :                     
(1)  235/     416 :                     ; --------------------------------------------------------
(1)  236/     416 :                     ; Video_Clear
(1)  237/     416 :                     ;
(1)  238/     416 :                     ; Clear all video data from VRAM
(1)  239/     416 :                     ;
(1)  240/     416 :                     ; Breaks:
(1)  241/     416 :                     ; ALL
(1)  242/     416 :                     ; --------------------------------------------------------
(1)  243/     416 :                     
(1)  244/     416 :                     Video_Clear:
(1)  245/     416 :                     ; 		move.w	#0,d0			; Clears until $57F
(1)  246/     416 :                     ; 		move.w	#0,d1
(1)  247/     416 :                     ; 		move.w	#$57F*$20,d2
(1)  248/     416 :                     ; 		bsr	Video_Fill
(1)  249/     416 :                     
(1)  250/     416 :                     ; --------------------------------------------------------
(1)  251/     416 :                     ; Video_ClearScreen
(1)  252/     416 :                     ;
(1)  253/     416 :                     ; Clears ALL Genesis screens FG/BG/WIN
(1)  254/     416 :                     ;
(1)  255/     416 :                     ; Breaks:
(1)  256/     416 :                     ; d0-d2/d6-d7/a5-a6
(1)  257/     416 :                     ; --------------------------------------------------------
(1)  258/     416 :                     
(1)  259/     416 :                     Video_ClearScreen:
(1)  260/     416 : 7000                		moveq	#0,d0
(1)  261/     418 : 343C 1000           		move.w	#$1000,d2		; FG/BG size
(1)  262/     41C : 1238 B8FA           		move.b	(RAM_VdpRegs+2).w,d1	; FG
(1)  263/     420 : 0241 0038           		andi.w	#%111000,d1
(1)  264/     424 : E149                		lsl.w	#8,d1
(1)  265/     426 : E549                		lsl.w	#2,d1
(1)  266/     428 : 6100 03BC           		bsr	Video_Fill
(1)  267/     42C : 1238 B8FC           		move.b	(RAM_VdpRegs+4).w,d1	; BG
(1)  268/     430 : 0241 0007           		andi.w	#%000111,d1
(1)  269/     434 : E149                		lsl.w	#8,d1
(1)  270/     436 : EB49                		lsl.w	#5,d1
(1)  271/     438 : 6100 03AC           		bsr	Video_Fill
(1)  272/     43C : 343C 1000           		move.w	#$1000,d2		; WD Size
(1)  273/     440 : 1238 B8FB           		move.b	(RAM_VdpRegs+3).w,d1	; Window
(1)  274/     444 : 0241 003E           		andi.w	#%111110,d1
(1)  275/     448 : E149                		lsl.w	#8,d1
(1)  276/     44A : E549                		lsl.w	#2,d1
(1)  277/     44C : 6100 0398           		bsr	Video_Fill
(1)  278/     450 : 4DF8 A004           		lea	(RAM_HorScroll).w,a6	; RAM cleanup
(1)  279/     454 : 3E3C 00EF           		move.w	#240-1,d7
(1)  280/     458 : 7C00                		moveq	#0,d6
(1)  281/     45A :                     .xnext:
(1)  282/     45A : 2CC6                		move.l	d6,(a6)+
(1)  283/     45C : 51CF FFFC           		dbf	d7,.xnext
(1)  284/     460 : 4DF8 A3C4           		lea	(RAM_VerScroll).w,a6
(1)  285/     464 : 3E3C 0013           		move.w	#(320/16)-1,d7
(1)  286/     468 :                     .ynext:
(1)  287/     468 : 2CC6                		move.l	d6,(a6)+
(1)  288/     46A : 51CF FFFC           		dbf	d7,.ynext
(1)  289/     46E : 4DF8 A414           		lea	(RAM_Sprites).w,a6
(1)  290/     472 : 3E3C 009F           		move.w	#((80*8)/4)-1,d7
(1)  291/     476 :                     .snext:
(1)  292/     476 : 2CC6                		move.l	d6,(a6)+
(1)  293/     478 : 51CF FFFC           		dbf	d7,.snext
(1)  294/     47C : 4DF8 A914           		lea	(RAM_Palette).w,a6
(1)  295/     480 : 4BF8 AB94           		lea	(RAM_PaletteFd).w,a5
(1)  296/     484 : 3E3C 001F           		move.w	#(64/2)-1,d7
(1)  297/     488 :                     .pnext:
(1)  298/     488 : 2CC6                		move.l	d6,(a6)+
(1)  299/     48A : 2AC6                		move.l	d6,(a5)+
(1)  300/     48C : 51CF FFFA           		dbf	d7,.pnext
(1)  316/     490 : 4E75                		rts
(1)  317/     492 :                     
(1)  318/     492 :                     ; ====================================================================
(1)  319/     492 :                     ; ----------------------------------------------------------------
(1)  320/     492 :                     ; Palette fading system
(1)  321/     492 :                     ; ----------------------------------------------------------------
(1)  322/     492 :                     
(1)  323/     492 :                     ; --------------------------------------------------------
(1)  324/     492 :                     ; FULL Fade in
(1)  325/     492 :                     ; --------------------------------------------------------
(1)  326/     492 :                     
(1)  327/     492 :                     Video_FullFadeIn:
(1)  328/     492 : 31FC 0001 B8E6      		move.w	#1,(RAM_FadeMdReq).w	; Fade-in task
(1)  329/     498 : 31FC 0001 B8EE      		move.w	#1,(RAM_FadeMarsReq).w
(1)  330/     49E :                     
(1)  331/     49E : 31FC 0001 B8E8      		move.w	#1,(RAM_FadeMdIncr).w
(1)  332/     4A4 : 31FC 0001 B8EA      		move.w	#1,(RAM_FadeMdDelay).w
(1)  333/     4AA : 31FC 0002 B8F0      		move.w	#2,(RAM_FadeMarsIncr).w
(1)  334/     4B0 : 31FC 0000 B8F2      		move.w	#0,(RAM_FadeMarsDelay).w
(1)  335/     4B6 : 6024                		bra	Video_WaitFade
(1)  336/     4B8 :                     
(1)  337/     4B8 :                     ; --------------------------------------------------------
(1)  338/     4B8 :                     ; FULL Fade out
(1)  339/     4B8 :                     ; --------------------------------------------------------
(1)  340/     4B8 :                     
(1)  341/     4B8 :                     Video_FullFadeOut:
(1)  342/     4B8 : 31FC 0002 B8E6      		move.w	#2,(RAM_FadeMdReq).w	; Fade-in task
(1)  343/     4BE : 31FC 0002 B8EE      		move.w	#2,(RAM_FadeMarsReq).w
(1)  344/     4C4 :                     
(1)  345/     4C4 : 31FC 0001 B8E8      		move.w	#1,(RAM_FadeMdIncr).w
(1)  346/     4CA : 31FC 0001 B8EA      		move.w	#1,(RAM_FadeMdDelay).w
(1)  347/     4D0 : 31FC 0002 B8F0      		move.w	#2,(RAM_FadeMarsIncr).w
(1)  348/     4D6 : 31FC 0000 B8F2      		move.w	#0,(RAM_FadeMarsDelay).w
(1)  349/     4DC :                     ; 		bra	Video_WaitFade
(1)  350/     4DC :                     
(1)  351/     4DC :                     ; --------------------------------------------------------
(1)  352/     4DC :                     ; Video_WaitFade
(1)  353/     4DC :                     ;
(1)  354/     4DC :                     ; *** Custom VBlank wait ***
(1)  355/     4DC :                     ; --------------------------------------------------------
(1)  356/     4DC :                     
(1)  357/     4DC :                     Video_WaitFade:
(1)  358/     4DC : 6100 0B9E           		bsr	System_Render
(1)  359/     4E0 :                     .wait_fade:
(1)  360/     4E0 : 3E39 00C0 0004      		move.w	(vdp_ctrl).l,d7
(1)  361/     4E6 : 0807 0003           		btst	#bitVBlk,d7
(1)  362/     4EA : 66F4                		bne.s	.wait_fade
(1)  363/     4EC : 6100 0402           		bsr	Video_Render
(1)  372/     4F0 : 6100 0B8A           		bsr	System_Render
(1)  373/     4F4 : 6140                		bsr	Video_DoPalFade
(1)  374/     4F6 : 3E38 B8E6           		move.w	(RAM_FadeMdReq).w,d7
(1)  376/     4FA : 4A47                		tst.w	d7
(1)  377/     4FC : 66E2                		bne.s	.wait_fade
(1)  378/     4FE : 4E75                		rts
(1)  379/     500 :                     
(1)  380/     500 :                     ; --------------------------------------------------------
(1)  381/     500 :                     ; Video_RunFade
(1)  382/     500 :                     ;
(1)  383/     500 :                     ; Processes palette fading for one frame returns
(1)  384/     500 :                     ; status on exit.
(1)  385/     500 :                     ;
(1)  386/     500 :                     ; Returns:
(1)  387/     500 :                     ; bne | Still active
(1)  388/     500 :                     ; beq | Finished
(1)  389/     500 :                     ;
(1)  390/     500 :                     ; Breaks:
(1)  391/     500 :                     ; ALL
(1)  392/     500 :                     ;
(1)  393/     500 :                     ; Notes:
(1)  394/     500 :                     ; Call System_Render FIRST before calling this
(1)  395/     500 :                     ; --------------------------------------------------------
(1)  396/     500 :                     
(1)  397/     500 :                     Video_RunFade:
(1)  405/     500 : 6134                		bsr	Video_DoPalFade
(1)  406/     502 : 3E38 B8E6           		move.w	(RAM_FadeMdReq).w,d7
(1)  408/     506 : 4E75                		rts
(1)  409/     508 :                     
(1)  410/     508 :                     ; --------------------------------------------------------
(1)  411/     508 :                     ; Video_LoadPal, Video_FadePal
(1)  412/     508 :                     ;
(1)  413/     508 :                     ; Loads VDP palette data to either
(1)  414/     508 :                     ; CURRENT palette or FADING palette buffers.
(1)  415/     508 :                     ;
(1)  416/     508 :                     ; Input:
(1)  417/     508 :                     ; a0   | Palette data
(1)  418/     508 :                     ; d0.w | Starting color index
(1)  419/     508 :                     ; d1.w | Number of colors
(1)  420/     508 :                     ;
(1)  421/     508 :                     ; Breaks:
(1)  422/     508 :                     ; d6-d7,a6
(1)  423/     508 :                     ; --------------------------------------------------------
(1)  424/     508 :                     
(1)  425/     508 :                     Video_FadePal:
(1)  426/     508 : 4DF8 AB94           		lea	(RAM_PaletteFd).w,a6
(1)  427/     50C : 4278 B8EC           		clr.w	(RAM_FadeMdTmr).w	; Clear fading timer.
(1)  428/     510 : 6004                		bra.s	vidMd_Pal
(1)  429/     512 :                     Video_LoadPal:
(1)  430/     512 : 4DF8 A914           		lea	(RAM_Palette).w,a6
(1)  431/     516 :                     vidMd_Pal:
(1)  432/     516 : 2A48                		move.l	a0,a5
(1)  433/     518 : 7E00                		moveq	#0,d7
(1)  434/     51A : 3E00                		move.w	d0,d7
(1)  435/     51C : DE47                		add.w	d7,d7
(1)  436/     51E : DCC7                		adda	d7,a6
(1)  437/     520 : 3E01                		move.w	d1,d7
(1)  438/     522 : 0447 0001           		subi.w	#1,d7
(1)  439/     526 : 3C02                		move.w	d2,d6
(1)  440/     528 : 0246 0001           		andi.w	#1,d6
(1)  441/     52C : E25E                		ror.w	#1,d6
(1)  442/     52E :                     .loop:
(1)  443/     52E : 3CDD                		move.w	(a5)+,(a6)+
(1)  444/     530 : 51CF FFFC           		dbf	d7,.loop
(1)  445/     534 : 4E75                		rts
(1)  446/     536 :                     
(1)  447/     536 :                     ; --------------------------------------------------------
(1)  448/     536 :                     ; Video_DoPalFade
(1)  449/     536 :                     ;
(1)  450/     536 :                     ; NOTE: ONLY CALL THIS OUTSIDE OF VBLANK
(1)  451/     536 :                     ; --------------------------------------------------------
(1)  452/     536 :                     
(1)  453/     536 :                     Video_DoPalFade:
(1)  454/     536 : 0478 0001 B8EC      		subi.w	#1,(RAM_FadeMdTmr).w
(1)  455/     53C : 6A14                		bpl.s	.active
(1)  456/     53E : 31F8 B8EA B8EC      		move.w	(RAM_FadeMdDelay).w,(RAM_FadeMdTmr).w
(1)  457/     544 : 3E38 B8E6           		move.w	(RAM_FadeMdReq).w,d7
(1)  458/     548 : DE47                		add.w	d7,d7
(1)  459/     54A : 3E3B 7008           		move.w	.fade_list(pc,d7.w),d7
(1)  460/     54E : 4EFB 7004           		jmp	.fade_list(pc,d7.w)
(1)  461/     552 :                     .active:
(1)  462/     552 : 4E75                		rts
(1)  463/     554 :                     
(1)  464/     554 :                     ; --------------------------------------------
(1)  465/     554 :                     
(1)  466/     554 :                     .fade_list:
(1)  467/     554 : 0006                		dc.w .fade_done-.fade_list
(1)  468/     556 : 0008                		dc.w .fade_in-.fade_list
(1)  469/     558 : 00AA                		dc.w .fade_out-.fade_list
(1)  470/     55A :                     
(1)  471/     55A :                     ; --------------------------------------------
(1)  472/     55A :                     ; No fade or finished.
(1)  473/     55A :                     ; --------------------------------------------
(1)  474/     55A :                     
(1)  475/     55A :                     .fade_done:
(1)  476/     55A : 4E75                		rts
(1)  477/     55C :                     
(1)  478/     55C :                     ; --------------------------------------------
(1)  479/     55C :                     ; Fade in
(1)  480/     55C :                     ; --------------------------------------------
(1)  481/     55C :                     
(1)  482/     55C :                     .fade_in:
(1)  483/     55C : 4DF8 AB94           		lea	(RAM_PaletteFd).w,a6
(1)  484/     560 : 4BF8 A914           		lea	(RAM_Palette).w,a5
(1)  485/     564 : 7040                		moveq	#64,d0				; Num of colors
(1)  486/     566 : 3238 B8E8           		move.w	(RAM_FadeMdIncr).w,d1		; Speed
(1)  487/     56A : D241                		add.w	d1,d1
(1)  488/     56C : 3C00                		move.w	d0,d6
(1)  489/     56E : 4846                		swap	d6
(1)  490/     570 : 0440 0001           		subi.w	#1,d0
(1)  491/     574 :                     .nxt_pal:
(1)  492/     574 : 4242                		clr.w	d2		; Reset finished colorbits
(1)  493/     576 : 3E16                		move.w	(a6),d7		; d7 - Input
(1)  494/     578 : 3C15                		move.w	(a5),d6		; d6 - Output
(1)  495/     57A : 3607                		move.w	d7,d3		; RED
(1)  496/     57C : 3806                		move.w	d6,d4
(1)  497/     57E : 0246 0EE0           		andi.w	#%0000111011100000,d6
(1)  498/     582 : 0244 000E           		andi.w	#%0000000000001110,d4
(1)  499/     586 : 0243 000E           		andi.w	#%0000000000001110,d3
(1)  500/     58A : D841                		add.w	d1,d4
(1)  501/     58C : B843                		cmp.w	d3,d4
(1)  502/     58E : 6506                		bcs.s	.no_red
(1)  503/     590 : 3803                		move.w	d3,d4
(1)  504/     592 : 0042 0001           		ori.w	#%001,d2	; RED is ready
(1)  505/     596 :                     .no_red:
(1)  506/     596 : 8C44                		or.w	d4,d6
(1)  507/     598 : E949                		lsl.w	#4,d1
(1)  508/     59A : 3607                		move.w	d7,d3		; GREEN
(1)  509/     59C : 3806                		move.w	d6,d4
(1)  510/     59E : 0246 0E0E           		andi.w	#%0000111000001110,d6
(1)  511/     5A2 : 0244 00E0           		andi.w	#%0000000011100000,d4
(1)  512/     5A6 : 0243 00E0           		andi.w	#%0000000011100000,d3
(1)  513/     5AA : D841                		add.w	d1,d4
(1)  514/     5AC : B843                		cmp.w	d3,d4
(1)  515/     5AE : 6506                		bcs.s	.no_grn
(1)  516/     5B0 : 3803                		move.w	d3,d4
(1)  517/     5B2 : 0042 0002           		ori.w	#%010,d2	; GREEN is ready
(1)  518/     5B6 :                     .no_grn:
(1)  519/     5B6 : 8C44                		or.w	d4,d6
(1)  520/     5B8 : E949                		lsl.w	#4,d1
(1)  521/     5BA : 3607                		move.w	d7,d3		; BLUE
(1)  522/     5BC : 3806                		move.w	d6,d4
(1)  523/     5BE : 0246 00EE           		andi.w	#%0000000011101110,d6
(1)  524/     5C2 : 0244 0E00           		andi.w	#%0000111000000000,d4
(1)  525/     5C6 : 0243 0E00           		andi.w	#%0000111000000000,d3
(1)  526/     5CA : D841                		add.w	d1,d4
(1)  527/     5CC : B843                		cmp.w	d3,d4
(1)  528/     5CE : 6506                		bcs.s	.no_blu
(1)  529/     5D0 : 3803                		move.w	d3,d4
(1)  530/     5D2 : 0042 0004           		ori.w	#%100,d2	; BLUE is ready
(1)  531/     5D6 :                     .no_blu:
(1)  532/     5D6 : 8C44                		or.w	d4,d6
(1)  533/     5D8 : E049                		lsr.w	#8,d1
(1)  534/     5DA : 3AC6                		move.w	d6,(a5)+
(1)  535/     5DC : DCFC 0002           		adda	#2,a6
(1)  536/     5E0 : 0C42 0007           		cmpi.w	#%111,d2
(1)  537/     5E4 : 6608                		bne.s	.no_fnsh
(1)  538/     5E6 : 4846                		swap	d6
(1)  539/     5E8 : 0446 0001           		subi.w	#1,d6
(1)  540/     5EC : 4846                		swap	d6
(1)  541/     5EE :                     .no_fnsh:
(1)  542/     5EE : 51C8 FF84           		dbf	d0,.nxt_pal
(1)  543/     5F2 : 4846                		swap	d6
(1)  544/     5F4 : 4A46                		tst.w	d6
(1)  545/     5F6 : 6604                		bne.s	.no_move
(1)  546/     5F8 : 4278 B8E6           		clr.w	(RAM_FadeMdReq).w
(1)  547/     5FC :                     .no_move:
(1)  548/     5FC : 4E75                		rts
(1)  549/     5FE :                     
(1)  550/     5FE :                     ; --------------------------------------------
(1)  551/     5FE :                     ; Fade out
(1)  552/     5FE :                     ; --------------------------------------------
(1)  553/     5FE :                     
(1)  554/     5FE :                     .fade_out:
(1)  555/     5FE : 4DF8 A914           		lea	(RAM_Palette).w,a6
(1)  556/     602 : 7040                		moveq	#64,d0				; Num of colors
(1)  557/     604 : 3238 B8E8           		move.w	(RAM_FadeMdIncr).w,d1		; Speed
(1)  558/     608 : 3C00                		move.w	d0,d6
(1)  559/     60A : 4846                		swap	d6
(1)  560/     60C : 0440 0001           		subi.w	#1,d0
(1)  561/     610 :                     .nxt_pal_o:
(1)  562/     610 : 4242                		clr.w	d2			; Reset finished colorbits
(1)  563/     612 : 3E16                		move.w	(a6),d7			; d7 - Input
(1)  564/     614 : 3C07                		move.w	d7,d6
(1)  565/     616 : 0247 0EE0           		andi.w	#%0000111011100000,d7
(1)  566/     61A : 0246 000E           		andi.w	#%0000000000001110,d6
(1)  567/     61E : 9C41                		sub.w	d1,d6
(1)  568/     620 : 6A06                		bpl.s	.no_red_o
(1)  569/     622 : 4246                		clr.w	d6
(1)  570/     624 : 0042 0001           		ori.w	#%001,d2		; RED is ready
(1)  571/     628 :                     .no_red_o:
(1)  572/     628 : 8E46                		or.w	d6,d7
(1)  573/     62A : E949                		lsl.w	#4,d1
(1)  574/     62C : 3C07                		move.w	d7,d6
(1)  575/     62E : 0247 0E0E           		andi.w	#%0000111000001110,d7
(1)  576/     632 : 0246 00E0           		andi.w	#%0000000011100000,d6
(1)  577/     636 : 9C41                		sub.w	d1,d6
(1)  578/     638 : 6A06                		bpl.s	.no_grn_o
(1)  579/     63A : 4246                		clr.w	d6
(1)  580/     63C : 0042 0002           		ori.w	#%010,d2		; GREEN is ready
(1)  581/     640 :                     .no_grn_o:
(1)  582/     640 : 8E46                		or.w	d6,d7
(1)  583/     642 : E949                		lsl.w	#4,d1
(1)  584/     644 : 3C07                		move.w	d7,d6
(1)  585/     646 : 0247 00EE           		andi.w	#%0000000011101110,d7
(1)  586/     64A : 0246 0E00           		andi.w	#%0000111000000000,d6
(1)  587/     64E : 9C41                		sub.w	d1,d6
(1)  588/     650 : 6A06                		bpl.s	.no_blu_o
(1)  589/     652 : 4246                		clr.w	d6
(1)  590/     654 : 0042 0004           		ori.w	#%100,d2		; BLUE is ready
(1)  591/     658 :                     .no_blu_o:
(1)  592/     658 : 8E46                		or.w	d6,d7
(1)  593/     65A : E049                		lsr.w	#8,d1
(1)  594/     65C : 3CC7                		move.w	d7,(a6)+
(1)  595/     65E : 0C42 0007           		cmpi.w	#%111,d2
(1)  596/     662 : 6608                		bne.s	.no_fnsh_o
(1)  597/     664 : 4846                		swap	d6
(1)  598/     666 : 0446 0001           		subi.w	#1,d6
(1)  599/     66A : 4846                		swap	d6
(1)  600/     66C :                     .no_fnsh_o:
(1)  601/     66C : 51C8 FFA2           		dbf	d0,.nxt_pal_o
(1)  602/     670 : 4846                		swap	d6
(1)  603/     672 : 4A46                		tst.w	d6
(1)  604/     674 : 6604                		bne.s	.no_move_o
(1)  605/     676 : 4278 B8E6           		clr.w	(RAM_FadeMdReq).w
(1)  606/     67A :                     .no_move_o:
(1)  607/     67A : 4E75                		rts
(1)  608/     67C :                     
(1)  609/     67C :                     ; ====================================================================
(1)  610/     67C :                     ; --------------------------------------------------------
(1)  611/     67C :                     ; Genesis DMA
(1)  612/     67C :                     ; --------------------------------------------------------
(1)  613/     67C :                     
(1)  614/     67C :                     ; --------------------------------------------------------
(1)  615/     67C :                     ; Video_LoadArt
(1)  616/     67C :                     ;
(1)  617/     67C :                     ; Loads VDP Graphics using DMA
(1)  618/     67C :                     ;
(1)  619/     67C :                     ; Input:
(1)  620/     67C :                     ; d0.l | Graphics data (NOT a0)
(1)  621/     67C :                     ; d1.w | VRAM location, cell_vram(vram_pos)
(1)  622/     67C :                     ; d2.w | Size
(1)  623/     67C :                     ;
(1)  624/     67C :                     ; Breaks:
(1)  625/     67C :                     ; d4-d7,a4
(1)  626/     67C :                     ;
(1)  627/     67C :                     ; Notes:
(1)  628/     67C :                     ; - For a fast transfer call this during VBlank
(1)  629/     67C :                     ; * 32X: MAKE SURE THE SH2 SIDE IS NOT READING ROM
(1)  630/     67C :                     ;        WHEN GETTING HERE.
(1)  631/     67C :                     ; --------------------------------------------------------
(1)  632/     67C :                     
(1)  633/     67C :                     Video_LoadArt:
(1)  634/     67C : 2A00                		move.l	d0,d5
(1)  635/     67E : DA42                		add.w	d2,d5
(1)  636/     680 : 6430                		bcc.s	.normal
(1)  637/     682 : 2A00                		move.l	d0,d5		; <-- DOUBLE TRANSFER
(1)  638/     684 : 3C01                		move.w	d1,d6
(1)  639/     686 : 2E05                		move.l	d5,d7		; Top
(1)  640/     688 : 0687 0001 0000      		addi.l	#$010000,d7
(1)  641/     68E : 0287 00FF 0000      		andi.l	#$FF0000,d7
(1)  642/     694 : 9E80                		sub.l	d0,d7
(1)  643/     696 : 6120                		bsr.s	.mk_set
(1)  644/     698 : 2A00                		move.l	d0,d5		; Bottom
(1)  645/     69A : 0685 0001 0000      		addi.l	#$010000,d5
(1)  646/     6A0 : 0285 00FF 0000      		andi.l	#$FF0000,d5
(1)  647/     6A6 : 2C05                		move.l	d5,d6
(1)  648/     6A8 : 9C80                		sub.l	d0,d6
(1)  649/     6AA : 3E02                		move.w	d2,d7
(1)  650/     6AC : 9E46                		sub.w	d6,d7
(1)  651/     6AE : DC41                		add.w	d1,d6
(1)  652/     6B0 : 6006                		bra.s	.mk_set
(1)  653/     6B2 :                     .normal:
(1)  654/     6B2 : 2A00                		move.l	d0,d5
(1)  655/     6B4 : 3C01                		move.w	d1,d6
(1)  656/     6B6 : 3E02                		move.w	d2,d7
(1)  657/     6B8 :                     ; d7 - size
(1)  658/     6B8 :                     ; d6 - vram
(1)  659/     6B8 :                     ; d5 - data
(1)  660/     6B8 :                     .mk_set:
(1)  661/     6B8 : 49F9 00C0 0004      		lea	(vdp_ctrl),a4
(1)  662/     6BE : 383C 8100           		move.w	#$8100,d4		; DMA ON
(1)  663/     6C2 : 1838 B8F9           		move.b	(RAM_VdpRegs+1).w,d4
(1)  664/     6C6 : 08C4 0004           		bset	#bitDmaEnbl,d4
(1)  665/     6CA : 3884                		move.w	d4,(a4)
(1)  666/     6CC : 0287 0000 FFFE      		andi.l	#$0000FFFE,d7
(1)  667/     6D2 : 6718                		beq.s	.bad_size
(1)  668/     6D4 :                     ; 		tst.w	d7
(1)  669/     6D4 :                     ; 		bmi.s	.bad_size
(1)  683/     6D4 : 611A                		bsr.s	.shared_setup
(1)  684/     6D6 : 3886                		move.w	d6,(a4)
(1)  685/     6D8 : 6100 09EC           		bsr	System_DmaEnter_ROM
(1)  686/     6DC : 3887                		move.w	d7,(a4)			; <-- second write
(1)  687/     6DE : 6100 09EC           		bsr	System_DmaExit_ROM
(1)  688/     6E2 : 383C 8100           		move.w	#$8100,d4		; DMA OFF
(1)  689/     6E6 : 1838 B8F9           		move.b	(RAM_VdpRegs+1).w,d4
(1)  690/     6EA : 3884                		move.w	d4,(a4)
(1)  712/     6EC :                     .bad_size:
(1)  713/     6EC : 4E75                		rts
(1)  714/     6EE :                     
(1)  715/     6EE :                     ; --------------------------------------------------------
(1)  716/     6EE :                     
(1)  717/     6EE :                     .from_ram:
(1)  718/     6EE :                     	; TODO
(1)  719/     6EE : 4E75                		rts
(1)  720/     6F0 :                     
(1)  721/     6F0 :                     ; --------------------------------------------------------
(1)  722/     6F0 :                     
(1)  723/     6F0 :                     .shared_setup:
(1)  724/     6F0 : EF8F                		lsl.l	#7,d7
(1)  725/     6F2 : E04F                		lsr.w	#8,d7
(1)  726/     6F4 : 0087 9400 9300      		ori.l	#$94009300,d7
(1)  727/     6FA : 2887                		move.l	d7,(a4)
(1)  728/     6FC : E28D                  		lsr.l	#1,d5			; d5 - Source
(1)  729/     6FE : 2E3C 9600 9500       		move.l	#$96009500,d7
(1)  730/     704 : 1E05                 		move.b	d5,d7
(1)  731/     706 : E08D                 		lsr.l	#8,d5
(1)  732/     708 : 4847                 		swap	d7
(1)  733/     70A : 1E05                 		move.b	d5,d7
(1)  734/     70C : 2887                 		move.l	d7,(a4)
(1)  735/     70E : 3E3C 9700            		move.w	#$9700,d7
(1)  736/     712 : E08D                 		lsr.l	#8,d5
(1)  737/     714 : 1E05                 		move.b	d5,d7
(1)  738/     716 : 3887                 		move.w	d7,(a4)
(1)  739/     718 : 3E06                		move.w	d6,d7			; Destination
(1)  740/     71A : 0286 0000 3FFF      		andi.l	#$3FFF,d6
(1)  741/     720 : 0046 4000           		ori.w	#$4000,d6
(1)  742/     724 : E04F                		lsr.w	#8,d7
(1)  743/     726 : EC4F                		lsr.w	#6,d7
(1)  744/     728 : 0247 0003           		andi.w	#%11,d7
(1)  745/     72C : 0047 0080           		ori.w	#$80,d7
(1)  746/     730 : 4E75                		rts
(1)  747/     732 :                     
(1)  748/     732 :                     ; --------------------------------------------------------
(1)  749/     732 :                     ; Video_DmaMkEntry
(1)  750/     732 :                     ;
(1)  751/     732 :                     ; Sets a new DMA graphics transfer entry to the
(1)  752/     732 :                     ; BLAST list to be processed on VBlank for the
(1)  753/     732 :                     ; next frame.
(1)  754/     732 :                     ;
(1)  755/     732 :                     ; Input:
(1)  756/     732 :                     ; d0.l | Graphics data location
(1)  757/     732 :                     ; d1.w | VRAM location, cell_vram(vram_pos)
(1)  758/     732 :                     ; d2.w | Size
(1)  759/     732 :                     ;
(1)  760/     732 :                     ; Breaks:
(1)  761/     732 :                     ; d5-d7,a6
(1)  762/     732 :                     ;
(1)  763/     732 :                     ; Notes:
(1)  764/     732 :                     ; - Can only be called during DISPLAY only.
(1)  765/     732 :                     ; - For loading graphics quick use Video_LoadArt
(1)  766/     732 :                     ; --------------------------------------------------------
(1)  767/     732 :                     
(1)  768/     732 :                     Video_DmaMkEntry:
(1)  769/     732 : 2A00                		move.l	d0,d5
(1)  770/     734 : DA42                		add.w	d2,d5
(1)  771/     736 : 6430                		bcc.s	.normal
(1)  772/     738 : 2A00                		move.l	d0,d5		; d5 - TOP point
(1)  773/     73A : 3C01                		move.w	d1,d6		; d6 - VRAM position
(1)  774/     73C : 2E05                		move.l	d5,d7
(1)  775/     73E : 0287 00FF 0000      		andi.l	#$FF0000,d7
(1)  776/     744 : 0687 0001 0000      		addi.l	#$010000,d7
(1)  777/     74A : 9E80                		sub.l	d0,d7		; d7 - TOP Size
(1)  778/     74C : 6120                		bsr.s	.mk_set
(1)  779/     74E : 2A00                		move.l	d0,d5		; d5 - BOTTOM point
(1)  780/     750 : 0685 0001 0000      		addi.l	#$010000,d5
(1)  781/     756 : 0285 00FF 0000      		andi.l	#$FF0000,d5
(1)  782/     75C : 2C05                		move.l	d5,d6
(1)  783/     75E : 9C80                		sub.l	d0,d6
(1)  784/     760 : 3E02                		move.w	d2,d7
(1)  785/     762 : 9E46                		sub.w	d6,d7
(1)  786/     764 : DC41                		add.w	d1,d6
(1)  787/     766 : 6006                		bra.s	.mk_set
(1)  788/     768 :                     .normal:
(1)  789/     768 : 2A00                		move.l	d0,d5
(1)  790/     76A : 3C01                		move.w	d1,d6
(1)  791/     76C : 3E02                		move.w	d2,d7
(1)  792/     76E :                     
(1)  793/     76E :                     ; d7 - size
(1)  794/     76E :                     ; d6 - vram
(1)  795/     76E :                     ; d5 - data
(1)  796/     76E :                     .mk_set:
(1)  797/     76E : 4847                		swap	d7
(1)  798/     770 : 3E38 B8E0           		move.w	(RAM_VdpDmaIndx).w,d7
(1)  799/     774 : 0C47 0018           		cmpi.w	#MAX_MDDMATSK,d7
(1)  800/     778 : 6C6A                		bge	.ran_out
(1)  801/     77A : E94F                		lsl.w	#4,d7			; Size $10
(1)  802/     77C : 4DF8 AC14           		lea	(RAM_VdpDmaList).w,a6
(1)  803/     780 : DCC7                		adda	d7,a6
(1)  804/     782 : 4847                		swap	d7
(1)  805/     784 : 0287 0000 FFFE      		andi.l	#$0000FFFE,d7		; d7 - Size
(1)  806/     78A : 6758                		beq.s	.ran_out		; If == 0, bad
(1)  807/     78C : 4A47                		tst.w	d7
(1)  808/     78E : 6B54                		bmi.s	.ran_out		; If negative, bad
(1)  809/     790 : 31FC 0001 B8E2      		move.w	#1,(RAM_VdpDmaMod).w
(1)  810/     796 : 5278 B8E0           		addq.w	#1,(RAM_VdpDmaIndx).w
(1)  811/     79A : EF8F                		lsl.l	#7,d7
(1)  812/     79C : E04F                		lsr.w	#8,d7
(1)  813/     79E : 0087 9400 9300      		ori.l	#$94009300,d7
(1)  814/     7A4 : 2CC7                		move.l	d7,(a6)+
(1)  819/     7A6 : E28D                  		lsr.l	#1,d5			; d5 - Source
(1)  820/     7A8 : 2E3C 9600 9500       		move.l	#$96009500,d7
(1)  821/     7AE : 1E05                 		move.b	d5,d7
(1)  822/     7B0 : E08D                 		lsr.l	#8,d5
(1)  823/     7B2 : 4847                 		swap	d7
(1)  824/     7B4 : 1E05                 		move.b	d5,d7
(1)  825/     7B6 : 2CC7                 		move.l	d7,(a6)+
(1)  826/     7B8 : 3E3C 9700            		move.w	#$9700,d7
(1)  827/     7BC : E08D                 		lsr.l	#8,d5
(1)  828/     7BE : 1E05                 		move.b	d5,d7
(1)  829/     7C0 : 3CC7                 		move.w	d7,(a6)+
(1)  830/     7C2 : 3E06                		move.w	d6,d7		; Destination
(1)  831/     7C4 : 0286 0000 3FFF      		andi.l	#$3FFF,d6
(1)  832/     7CA : 0046 4000           		ori.w	#$4000,d6
(1)  833/     7CE : E04F                		lsr.w	#8,d7
(1)  834/     7D0 : EC4F                		lsr.w	#6,d7
(1)  835/     7D2 : 0247 0003           		andi.w	#%11,d7
(1)  836/     7D6 : 0047 0080           		ori.w	#$80,d7
(1)  837/     7DA : 3CC6                		move.w	d6,(a6)+
(1)  838/     7DC : 3CC7                		move.w	d7,(a6)+
(1)  847/     7DE : 31FC 0000 B8E2      		move.w	#0,(RAM_VdpDmaMod).w
(1)  848/     7E4 :                     .ran_out:
(1)  849/     7E4 : 4E75                		rts
(1)  850/     7E6 :                     
(1)  851/     7E6 :                     ; --------------------------------------------------------
(1)  852/     7E6 :                     ; Video_Fill
(1)  853/     7E6 :                     ;
(1)  854/     7E6 :                     ; Fill data to VRAM
(1)  855/     7E6 :                     ;
(1)  856/     7E6 :                     ; d0.w | WORD to fill
(1)  857/     7E6 :                     ; d1.w | VRAM destination, cell_vram(dest)
(1)  858/     7E6 :                     ; d2.w | Size
(1)  859/     7E6 :                     ;
(1)  860/     7E6 :                     ; Notes:
(1)  861/     7E6 :                     ; FILL writes in this order: $56781234, Size $0001 is
(1)  862/     7E6 :                     ; invalid.
(1)  863/     7E6 :                     ; --------------------------------------------------------
(1)  864/     7E6 :                     
(1)  865/     7E6 :                     Video_Fill:
(1)  866/     7E6 : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1)  867/     7EA : 4DF9 00C0 0004      		lea	(vdp_ctrl).l,a6
(1)  868/     7F0 : 3E3C 8100           		move.w	#$8100,d7
(1)  869/     7F4 : 1E38 B8F9           		move.b	(RAM_VdpRegs+1).w,d7
(1)  870/     7F8 : 08C7 0004           		bset	#bitDmaEnbl,d7
(1)  871/     7FC : 3C87                		move.w	d7,(a6)
(1)  872/     7FE : 3E16                .dmaw:		move.w	(a6),d7
(1)  873/     800 : 0807 0001           		btst	#bitDma,d7
(1)  874/     804 : 66F8                		bne.s	.dmaw
(1)  875/     806 : 3CBC 8F01           		move.w	#$8F01,(a6)	; Set increment to $01
(1)  876/     80A : 3E02                		move.w	d2,d7		; d2 - Size
(1)  877/     80C : 0447 0001           		subi.w	#1,d7
(1)  878/     810 : 2C3C 9400 9300      		move.l	#$94009300,d6
(1)  879/     816 : 1C07                		move.b	d7,d6
(1)  880/     818 : 4846                		swap	d6
(1)  881/     81A : E04F                		lsr.w	#8,d7
(1)  882/     81C : 1C07                		move.b	d7,d6
(1)  883/     81E : 4846                		swap	d6
(1)  884/     820 : 2C86                		move.l	d6,(a6)
(1)  885/     822 : 3CBC 9780           		move.w	#$9780,(a6)	; DMA Fill mode
(1)  886/     826 : 3E01                		move.w	d1,d7		; d1 - Destination
(1)  887/     828 : 3C07                		move.w	d7,d6
(1)  888/     82A : 0246 3FFF           		andi.w	#$3FFF,d6
(1)  889/     82E : 0046 4000           		ori.w	#$4000,d6
(1)  890/     832 : 4846                		swap	d6
(1)  891/     834 : 3C07                		move.w	d7,d6
(1)  892/     836 : E04E                		lsr.w	#8,d6
(1)  893/     838 : EC4E                		lsr.w	#6,d6
(1)  894/     83A : 0246 0003           		andi.w	#%11,d6
(1)  895/     83E : 0046 0080           		ori.w	#$80,d6
(1)  896/     842 : 2C86                		move.l	d6,(a6)
(1)  897/     844 : 3D40 FFFC           		move.w	d0,-4(a6)
(1)  898/     848 : 3E16                .dma_w:		move.w	(a6),d7
(1)  899/     84A : 0807 0001           		btst	#bitDma,d7
(1)  900/     84E : 66F8                		bne.s	.dma_w
(1)  901/     850 : 3CBC 8F02           		move.w	#$8F02,(a6)	; Set increment to $02
(1)  902/     854 : 3E3C 8100           		move.w	#$8100,d7
(1)  903/     858 : 1E38 B8F9           		move.b	(RAM_VdpRegs+1).w,d7
(1)  904/     85C : 3C87                		move.w	d7,(a6)
(1)  905/     85E : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1)  906/     862 : 4E75                		rts
(1)  907/     864 :                     
(1)  908/     864 :                     ; --------------------------------------------------------
(1)  909/     864 :                     ; Video_Copy
(1)  910/     864 :                     ;
(1)  911/     864 :                     ; Copy VRAM data to another location
(1)  912/     864 :                     ;
(1)  913/     864 :                     ; Input:
(1)  914/     864 :                     ; d0.w | VRAM Source, cell_vram(src)
(1)  915/     864 :                     ; d1.w | VRAM Destination, cell_vram(dest)
(1)  916/     864 :                     ; d2.w | Size
(1)  917/     864 :                     ; --------------------------------------------------------
(1)  918/     864 :                     
(1)  919/     864 :                     ; TODO: test if this works again...
(1)  920/     864 :                     Video_Copy:
(1)  921/     864 : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1)  922/     868 : 4DF9 00C0 0004      		lea	(vdp_ctrl),a6
(1)  923/     86E : 3E3C 8100           		move.w	#$8100,d7
(1)  924/     872 : 1E38 B8F9           		move.b	(RAM_VdpRegs+1).w,d7
(1)  925/     876 : 08C7 0004           		bset	#bitDmaEnbl,d7
(1)  926/     87A : 3C87                		move.w	d7,(a6)
(1)  927/     87C : 3E16                .dmaw:		move.w	(a6),d7
(1)  928/     87E : 0807 0001           		btst	#bitDma,d7
(1)  929/     882 : 66F8                		bne.s	.dmaw
(1)  930/     884 : 3CBC 8F01           		move.w	#$8F01,(a6)		; Increment $01
(1)  931/     888 : 3E02                		move.w	d2,d7			; SIZE
(1)  932/     88A : 2C3C 9400 9300      		move.l	#$94009300,d6
(1)  933/     890 :                     ; 		lsr.w	#1,d7
(1)  934/     890 : 1C07                		move.b	d7,d6
(1)  935/     892 : 4846                		swap	d6
(1)  936/     894 : E04F                		lsr.w	#8,d7
(1)  937/     896 : 1C07                		move.b	d7,d6
(1)  938/     898 : 4846                		swap	d6
(1)  939/     89A : 2C86                		move.l	d6,(a6)
(1)  940/     89C : 2C3C 9600 9500      		move.l	#$96009500,d6		; SOURCE
(1)  941/     8A2 : 3E00                		move.w	d0,d7
(1)  942/     8A4 : 1C07                		move.b	d7,d6
(1)  943/     8A6 : 4846                		swap	d6
(1)  944/     8A8 : E04F                		lsr.w	#8,d7
(1)  945/     8AA : 1C07                		move.b	d7,d6
(1)  946/     8AC : 2C86                		move.l	d6,(a6)
(1)  947/     8AE : 3CBC 97C0           		move.w	#$97C0,(a6)		; DMA Copy mode
(1)  948/     8B2 : 2E02                		move.l	d2,d7			; DESTINATION
(1)  949/     8B4 : 3C07                		move.w	d7,d6
(1)  950/     8B6 : 0246 3FFF           		andi.w	#$3FFF,d6
(1)  951/     8BA : 0046 4000           		ori.w	#$4000,d6
(1)  952/     8BE : 4846                		swap	d6
(1)  953/     8C0 : 3C07                		move.w	d7,d6
(1)  954/     8C2 : E04E                		lsr.w	#8,d6
(1)  955/     8C4 : EC4E                		lsr.w	#6,d6
(1)  956/     8C6 : 0246 0003           		andi.w	#%11,d6
(1)  957/     8CA : 0046 00C0           		ori.w	#$C0,d6
(1)  958/     8CE : 2C86                		move.l	d6,(a6)
(1)  959/     8D0 : 3D41 FFFC           		move.w	d1,-4(a6)
(1)  960/     8D4 : 3E16                .dma_w:		move.w	(a6),d7
(1)  961/     8D6 : 0807 0001           		btst	#bitDma,d7
(1)  962/     8DA : 66F8                		bne.s	.dma_w
(1)  963/     8DC : 3CBC 8F02           		move.w	#$8F02,(a6)		; Increment $02
(1)  964/     8E0 : 3E3C 8100           		move.w	#$8100,d7
(1)  965/     8E4 : 1E38 B8F9           		move.b	(RAM_VdpRegs+1).w,d7
(1)  966/     8E8 : 3C87                		move.w	d7,(a6)
(1)  967/     8EA : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1)  968/     8EE : 4E75                		rts
(1)  969/     8F0 :                     
(1)  970/     8F0 :                     ; --------------------------------------------------------
(1)  971/     8F0 :                     ; Video_Render
(1)  972/     8F0 :                     ;
(1)  973/     8F0 :                     ; Call this during VBlank to update visuals, watch out
(1)  974/     8F0 :                     ; for the timing for this to properly hide the CRAM dots.
(1)  975/     8F0 :                     ;
(1)  976/     8F0 :                     ; This gets normally called on System_Render
(1)  977/     8F0 :                     ; --------------------------------------------------------
(1)  978/     8F0 :                     
(1)  979/     8F0 :                     ; TODO: automate the DMA destination(s)
(1)  980/     8F0 :                     
(1)  981/     8F0 :                     Video_Render:
(1)  982/     8F0 : 4DF9 00C0 0004      		lea	(vdp_ctrl),a6
(1)  983/     8F6 : 3E3C 8100           		move.w	#$8100,d7		; DMA ON
(1)  984/     8FA : 1E38 B8F9           		move.b	(RAM_VdpRegs+1).w,d7
(1)  985/     8FE : 08C7 0004           		bset	#bitDmaEnbl,d7
(1)  986/     902 : 3C87                		move.w	d7,(a6)
(1)  987/     904 : 6100 07B8           		bsr	System_DmaEnter_RAM
(1)  988/     908 : 2CBC 9400 9328      		move.l	#$94009328,(a6)
(1)  989/     90E : 2CBC 96D1 95E2      		move.l	#$96009500|(RAM_VerScroll<<7&$FF0000)|(RAM_VerScroll>>1&$FF),(a6)
(1)  990/     914 : 3CBC 977F           		move.w	#$9700|(RAM_VerScroll>>17&$7F),(a6)
(1)  991/     918 : 3CBC 4000           		move.w	#$4000,(a6)
(1)  992/     91C : 3F3C 0090           		move.w	#$0010|$80,-(sp)
(1)  993/     920 : 3C9F                		move.w	(sp)+,(a6)
(1)  994/     922 : 2CBC 9401 93E0      		move.l	#$940193E0,(a6)
(1)  995/     928 : 2CBC 96D0 9502      		move.l	#$96009500|(RAM_HorScroll<<7&$FF0000)|(RAM_HorScroll>>1&$FF),(a6)
(1)  996/     92E : 3CBC 977F           		move.w	#$9700|(RAM_HorScroll>>17&$7F),(a6)
(1)  997/     932 : 3CBC 7C00           		move.w	#$7C00,(a6)
(1)  998/     936 : 3F3C 0083           		move.w	#$0003|$80,-(sp)
(1)  999/     93A : 3C9F                		move.w	(sp)+,(a6)
(1) 1000/     93C : 2CBC 9402 9300      		move.l	#$94029300,(a6)
(1) 1001/     942 : 2CBC 96D2 950A      		move.l	#$96009500|(RAM_Sprites<<7&$FF0000)|(RAM_Sprites>>1&$FF),(a6)
(1) 1002/     948 : 3CBC 977F           		move.w	#$9700|(RAM_Sprites>>17&$7F),(a6)
(1) 1003/     94C : 3CBC 7800           		move.w	#$7800,(a6)
(1) 1004/     950 : 3F3C 0083           		move.w	#$0003|$80,-(sp)
(1) 1005/     954 : 3C9F                		move.w	(sp)+,(a6)
(1) 1006/     956 : 2CBC 9400 9340      		move.l	#$94009340,(a6)
(1) 1007/     95C : 2CBC 96D4 958A      		move.l	#$96009500|(RAM_Palette<<7&$FF0000)|(RAM_Palette>>1&$FF),(a6)
(1) 1008/     962 : 3CBC 977F           		move.w	#$9700|(RAM_Palette>>17&$7F),(a6)
(1) 1009/     966 : 3CBC C000           		move.w	#$C000,(a6)
(1) 1010/     96A : 3F3C 0080           		move.w	#$0000|$80,-(sp)
(1) 1011/     96E : 3C9F                		move.w	(sp)+,(a6)
(1) 1012/     970 : 6100 0750           		bsr	System_DmaExit_RAM
(1) 1013/     974 : 3E3C 8100           		move.w	#$8100,d7
(1) 1014/     978 : 1E38 B8F9           		move.b	(RAM_VdpRegs+1).w,d7
(1) 1015/     97C : 3C87                		move.w	d7,(a6)
(1) 1016/     97E : 31FC 0001 B8DE      		move.w	#1,(RAM_SprLinkNum).w				; Reset SPRITE LINK number
(1) 1017/     984 : 31F8 B8D8 B8DA      		move.w	(RAM_SprAutoDmaSet).w,(RAM_SprAutoDmaCurr).w	; Reset Auto-DMA VRAM
(1) 1018/     98A :                     
(1) 1019/     98A :                     ; --------------------------------------------------------
(1) 1020/     98A :                     ; Video_DmaBlast
(1) 1021/     98A :                     ;
(1) 1022/     98A :                     ; Process DMA tasks from a predefined list in RAM
(1) 1023/     98A :                     ;
(1) 1024/     98A :                     ; Breaks:
(1) 1025/     98A :                     ; d5-d7,a3-a4
(1) 1026/     98A :                     ;
(1) 1027/     98A :                     ; Notes:
(1) 1028/     98A :                     ; - Call this on VBlank ONLY
(1) 1029/     98A :                     ; * 32X: This code must be located on RAM as this
(1) 1030/     98A :                     ;        sets the RV bit
(1) 1031/     98A :                     ; --------------------------------------------------------
(1) 1032/     98A :                     
(1) 1033/     98A :                     ; Struct:
(1) 1034/     98A :                     ; dc.w $94xx,$93xx		; Size
(1) 1035/     98A :                     ; dc.w $96xx,$95xx,$97xx	; Source
(1) 1036/     98A :                     ; dc.l $4xxx008x 		; VDP destination with DMA bit
(1) 1037/     98A :                     ; dc.w $xxxx			; SegaCD/CD32X only: Patch for the first 4 pixels
(1) 1038/     98A :                     
(1) 1039/     98A :                     ; Video_DmaBlast:
(1) 1040/     98A : 4A78 B8E2           		tst.w	(RAM_VdpDmaMod).w		; Got mid-write?
(1) 1041/     98E : 664A                		bne.s	.exit				; then can't transfer this.
(1) 1042/     990 : 4A78 B8E0           		tst.w	(RAM_VdpDmaIndx).w		; Any requests?
(1) 1043/     994 : 6744                		beq.s	.exit
(1) 1044/     996 : 49F9 00C0 0004      		lea	(vdp_ctrl),a4			; a4 - vdp_ctrl
(1) 1045/     99C : 47F8 AC14           		lea	(RAM_VdpDmaList).w,a3		; a3 - Blast list
(1) 1046/     9A0 : 3E3C 8100           		move.w	#$8100,d7			; DMA ON
(1) 1047/     9A4 : 1E38 B8F9           		move.b	(RAM_VdpRegs+1).w,d7
(1) 1048/     9A8 : 08C7 0004           		bset	#bitDmaEnbl,d7
(1) 1049/     9AC : 3887                		move.w	d7,(a4)
(1) 1050/     9AE : 6100 0716           		bsr	System_DmaEnter_ROM
(1) 1051/     9B2 : 4A78 B8E0           .next:		tst.w	(RAM_VdpDmaIndx).w
(1) 1052/     9B6 : 6714                		beq.s	.end
(1) 1053/     9B8 : 289B                		move.l	(a3)+,(a4)		; Size
(1) 1054/     9BA : 289B                		move.l	(a3)+,(a4)		; Source
(1) 1055/     9BC : 389B                		move.w	(a3)+,(a4)
(1) 1067/     9BE : 389B                		move.w	(a3)+,(a4)		; Normal VDP control write
(1) 1068/     9C0 : 389B                		move.w	(a3)+,(a4)		; *** CPU freezes ***
(1) 1069/     9C2 : D6FC 0002           		adda	#2,a3
(1) 1071/     9C6 : 5378 B8E0           		subq.w	#1,(RAM_VdpDmaIndx).w
(1) 1072/     9CA : 60E6                		bra.s	.next
(1) 1073/     9CC :                     .end:
(1) 1074/     9CC : 6100 06FE           		bsr	System_DmaExit_ROM
(1) 1075/     9D0 : 3E3C 8100           		move.w	#$8100,d7		; DMA OFF
(1) 1076/     9D4 : 1E38 B8F9           		move.b	(RAM_VdpRegs+1).w,d7
(1) 1077/     9D8 : 3887                		move.w	d7,(a4)
(1) 1078/     9DA :                     .exit:
(1) 1079/     9DA : 4E75                		rts
(1) 1080/     9DC :                     
(1) 1081/     9DC :                     ; ====================================================================
(1) 1082/     9DC :                     ; ----------------------------------------------------------------
(1) 1083/     9DC :                     ; Video routines for 32X
(1) 1084/     9DC :                     ; ----------------------------------------------------------------
(1) 1085/     9DC :                     
(1) 1086/     9DC :                     ; --------------------------------------------------------
(1) 1087/     9DC :                     ; Video_MdMars_SyncFrame
(1) 1088/     9DC :                     ;
(1) 1089/     9DC :                     ; Syncronize VBlank with the 32X
(1) 1090/     9DC :                     ; --------------------------------------------------------
(1) 1091/     9DC :                     
(1) 1092/     9DC :                     Video_MdMars_SyncFrame:
(1) 1098/     9DC : 4E75                		rts
(1) 1099/     9DE :                     
(1) 1100/     9DE :                     ; --------------------------------------------------------
(1) 1101/     9DE :                     ; Video_MdMars_VideoMode
(1) 1102/     9DE :                     ;
(1) 1103/     9DE :                     ; Sets Pseudo-Graphics mode on the 32X side.
(1) 1104/     9DE :                     ;
(1) 1105/     9DE :                     ; Input:
(1) 1106/     9DE :                     ; d0.w | Mode number
(1) 1107/     9DE :                     ;        Write $00 to disable all 32X visuals.
(1) 1108/     9DE :                     ;
(1) 1109/     9DE :                     ; Uses:
(1) 1110/     9DE :                     ; d7/a0
(1) 1111/     9DE :                     ;
(1) 1112/     9DE :                     ; Notes:
(1) 1113/     9DE :                     ; Changing modes takes 3 FRAMES to process.
(1) 1114/     9DE :                     ; --------------------------------------------------------
(1) 1115/     9DE :                     
(1) 1116/     9DE :                     Video_MdMars_VideoMode:
(1) 1130/     9DE : 4E75                		rts
(1) 1131/     9E0 :                     
(1) 1132/     9E0 :                     ; --------------------------------------------------------
(1) 1133/     9E0 :                     ; Video_MdMars_LoadPal, Video_MdMars_FadePal
(1) 1134/     9E0 :                     ;
(1) 1135/     9E0 :                     ; Loads SVDP 256-color palette data to either
(1) 1136/     9E0 :                     ; CURRENT palette or FADING palette buffers.
(1) 1137/     9E0 :                     ;
(1) 1138/     9E0 :                     ; Input:
(1) 1139/     9E0 :                     ; d0.w | Start from
(1) 1140/     9E0 :                     ; d1.w | Number of colors
(1) 1141/     9E0 :                     ; d2.w | Priority bit 0/1
(1) 1142/     9E0 :                     ;
(1) 1143/     9E0 :                     ; Breaks:
(1) 1144/     9E0 :                     ; d5-d7/a6
(1) 1145/     9E0 :                     ; --------------------------------------------------------
(1) 1146/     9E0 :                     
(1) 1147/     9E0 :                     Video_MdMars_FadePal:
(1) 1171/     9E0 : 4E75                		rts
(1) 1172/     9E2 :                     
(1) 1173/     9E2 :                     ; --------------------------------------------------------
(1) 1174/     9E2 :                     ; Video_MdMars_DoPalFade
(1) 1175/     9E2 :                     ;
(1) 1176/     9E2 :                     ; Process the 256-color fading
(1) 1177/     9E2 :                     ;
(1) 1178/     9E2 :                     ; Input:
(1) 1179/     9E2 :                     ; a0   | Palette data
(1) 1180/     9E2 :                     ; d0.w | Number of colors
(1) 1181/     9E2 :                     ; d1.w | Speed
(1) 1182/     9E2 :                     ;
(1) 1183/     9E2 :                     ; Breaks:
(1) 1184/     9E2 :                     ; ALL
(1) 1185/     9E2 :                     ;
(1) 1186/     9E2 :                     ; Notes:
(1) 1187/     9E2 :                     ; - CALL THIS OUTSIDE OF VBLANK
(1) 1188/     9E2 :                     ; - This keeps the Priority bit intact.
(1) 1189/     9E2 :                     ; ** This takes A LOT of CPU if fading all 256-colors **
(1) 1190/     9E2 :                     ; --------------------------------------------------------
(1) 1191/     9E2 :                     
(1) 1192/     9E2 :                     Video_MdMars_DoPalFade:
(1) 1353/     9E2 : 4E75                		rts
(1) 1354/     9E4 :                     
(1) 1355/     9E4 :                     ; ====================================================================
(1) 1356/     9E4 :                     ; ----------------------------------------------------------------
(1) 1357/     9E4 :                     ; Genesis VDP screen layer routines
(1) 1358/     9E4 :                     ; ----------------------------------------------------------------
(1) 1359/     9E4 :                     
(1) 1360/     9E4 :                     ; --------------------------------------------------------
(1) 1361/     9E4 :                     ; Video_LoadMap
(1) 1362/     9E4 :                     ;
(1) 1363/     9E4 :                     ; Loads screen map data
(1) 1364/     9E4 :                     ; Horizontal order: LEFT to RIGHT, TOP to BOTTOM
(1) 1365/     9E4 :                     ;
(1) 1366/     9E4 :                     ; Input:
(1) 1367/     9E4 :                     ; a0   | Map data
(1) 1368/     9E4 :                     ; d0.l | Screen location:
(1) 1369/     9E4 :                     ;        locate(x_pos,y_pos,layer)
(1) 1370/     9E4 :                     ; d1.l | Map size X/Y:
(1) 1371/     9E4 :                     ;        map_size(width,height)
(1) 1372/     9E4 :                     ; d2.l | VRAM-cell increment
(1) 1373/     9E4 :                     ;
(1) 1374/     9E4 :                     ; Breaks:
(1) 1375/     9E4 :                     ; --------------------------------------------------------
(1) 1376/     9E4 :                     
(1) 1377/     9E4 :                     Video_LoadMap:
(1) 1378/     9E4 : 48E7 0F02           		movem.l	d4-d7/a6,-(sp)
(1) 1379/     9E8 : 4DF9 00C0 0000      		lea	(vdp_data),a6
(1) 1380/     9EE : 6100 01C6           		bsr	vid_PickLayer
(1) 1381/     9F2 : 3801                		move.w	d1,d4			; d4 - Y-cell loop
(1) 1382/     9F4 :                     .yloop:
(1) 1383/     9F4 : 4844                		swap	d4			; YYYY----
(1) 1384/     9F6 : 2D45 0004           		move.l	d5,4(a6)		; d5 - Set VDP address
(1) 1385/     9FA : 2E01                		move.l	d1,d7
(1) 1386/     9FC : 4847                		swap	d7			; d7 - X-cell loop
(1) 1387/     9FE :                     .xloop:
(1) 1388/     9FE : 3818                		move.w	(a0)+,d4
(1) 1389/     A00 : 0C44 FFFF           		cmpi.w	#-1,d4			; -1?
(1) 1390/     A04 : 660C                		bne.s	.nonull
(1) 1391/     A06 : 3802                		move.w	d2,d4
(1) 1392/     A08 : 0244 8000           		andi.w	#$8000,d4
(1) 1393/     A0C : 0644 07FF           		addi.w	#SET_NullVram,d4		; Replace with custom blank tile plus priority
(1) 1394/     A10 : 6002                		bra.s	.cont
(1) 1395/     A12 :                     .nonull:
(1) 1396/     A12 : D842                		add.w	d2,d4
(1) 1397/     A14 :                     .cont:
(1) 1398/     A14 : 4847                		swap	d7			; Check for double interlace
(1) 1399/     A16 : 1E38 B904           		move.b	(RAM_VdpRegs+$C).w,d7
(1) 1400/     A1A : 0247 0006           		andi.w	#%110,d7
(1) 1401/     A1E : 0C47 0006           		cmpi.w	#%110,d7
(1) 1402/     A22 : 660E                		bne.s	.nodble
(1) 1403/     A24 : 3E04                		move.w	d4,d7
(1) 1404/     A26 : E24F                		lsr.w	#1,d7
(1) 1405/     A28 : 0247 07FF           		andi.w	#$7FF,d7
(1) 1406/     A2C : 0244 F800           		andi.w	#$F800,d4
(1) 1407/     A30 : 8847                		or.w	d7,d4
(1) 1408/     A32 :                     .nodble:
(1) 1409/     A32 : 4847                		swap	d7
(1) 1410/     A34 : 3C84                		move.w	d4,(a6)
(1) 1411/     A36 : 51CF FFC6           		dbf	d7,.xloop
(1) 1412/     A3A : DA86                		add.l	d6,d5
(1) 1413/     A3C : 4844                		swap	d4			; ----YYYY
(1) 1414/     A3E : 51CC FFB4           		dbf	d4,.yloop
(1) 1415/     A42 : 4CDF 40F0           		movem.l	(sp)+,d4-d7/a6
(1) 1416/     A46 : 4E75                		rts
(1) 1417/     A48 :                     
(1) 1418/     A48 :                     ; ====================================================================
(1) 1419/     A48 :                     ; ----------------------------------------------------------------
(1) 1420/     A48 :                     ; Text PRINT system, for debugging or quick texts.
(1) 1421/     A48 :                     ; ----------------------------------------------------------------
(1) 1422/     A48 :                     
(1) 1423/     A48 :                     ; --------------------------------------------------------
(1) 1424/     A48 :                     ; Video_PrintInit
(1) 1425/     A48 :                     ;
(1) 1426/     A48 :                     ; Initializes the default Graphics and Palette
(1) 1427/     A48 :                     ; for the font.
(1) 1428/     A48 :                     ;
(1) 1429/     A48 :                     ; Input:
(1) 1430/     A48 :                     ; a0 | Graphics for the ASCII characters from
(1) 1431/     A48 :                     ;      $20 (" ") to $7F ("[DEL]")
(1) 1432/     A48 :                     ; a1 | Palette data to load and use
(1) 1433/     A48 :                     ;      - Set to 0 to skip
(1) 1434/     A48 :                     ;
(1) 1435/     A48 :                     ; Breaks:
(1) 1436/     A48 :                     ; ALL
(1) 1437/     A48 :                     ;
(1) 1438/     A48 :                     ; Notes:
(1) 1439/     A48 :                     ; - Only call this when the VDP DISPLAY is Off, or
(1) 1440/     A48 :                     ;   during VBlank
(1) 1441/     A48 :                     ; --------------------------------------------------------
(1) 1442/     A48 :                     
(1) 1443/     A48 :                     Video_PrintInit:
(1) 1444/     A48 :                     ; 		lea	(ASCII_FONT).l,a0
(1) 1445/     A48 :                     ; 		lea	(ASCII_PAL).l,a1
(1) 1446/     A48 : 2008                		move.l	a0,d0
(1) 1447/     A4A : 323C B000           		move.w	#cell_vram(SET_PrintVram),d1
(1) 1448/     A4E : 343C 0C00           		move.w	#($60*$20),d2			; Graphics data from " " to "[DEL]"
(1) 1449/     A52 : 363C 6580           		move.w	#(SET_PrintPal<<13)|SET_PrintVram,d3
(1) 1450/     A56 : 0443 0020           		subi.w	#$20,d3
(1) 1451/     A5A : 31C3 B8E4           		move.w	d3,(RAM_VidPrntVram).w
(1) 1452/     A5E : 6100 FC1C           		bsr	Video_LoadArt
(1) 1453/     A62 :                     Video_PrintPal:
(1) 1454/     A62 : 2009                		move.l	a1,d0
(1) 1455/     A64 : 6710                		beq.s	.skip_pal
(1) 1456/     A66 : 2040                		movea.l	d0,a0
(1) 1457/     A68 : 7030                		moveq	#(SET_PrintPal<<4),d0
(1) 1458/     A6A : 323C 000F           		move.w	#$0F,d1
(1) 1459/     A6E : 6100 FAA2           		bsr	Video_LoadPal			; Write to both palette buffers
(1) 1460/     A72 : 6000 FA94           		bra	Video_FadePal
(1) 1461/     A76 :                     .skip_pal:
(1) 1462/     A76 : 4E75                		rts
(1) 1463/     A78 :                     
(1) 1464/     A78 :                     ; --------------------------------------------------------
(1) 1465/     A78 :                     ; Video_Print
(1) 1466/     A78 :                     ;
(1) 1467/     A78 :                     ; Prints string to layer
(1) 1468/     A78 :                     ;
(1) 1469/     A78 :                     ; Input:
(1) 1470/     A78 :                     ; a0   | String data incl. RAM locations if used.
(1) 1471/     A78 :                     ; d0.l | Screen location:
(1) 1472/     A78 :                     ;        locate(x_pos,y_pos,layer)
(1) 1473/     A78 :                     ;
(1) 1474/     A78 :                     ; Notes:
(1) 1475/     A78 :                     ; - CALL Video_PrintInit FIRST
(1) 1476/     A78 :                     ; - YOU MUST put an "align 2" at the end of the
(1) 1477/     A78 :                     ;   text string to prevent an ADDRESS ERROR
(1) 1478/     A78 :                     ; --------------------------------------------------------
(1) 1479/     A78 :                     
(1) 1480/     A78 :                     ; Text string special codes:
(1) 1481/     A78 :                     ; $00 - End of line
(1) 1482/     A78 :                     ; $0A - Next line
(1) 1483/     A78 :                     ; "//b" - Show BYTE value
(1) 1484/     A78 :                     ; "//w" - Show WORD value
(1) 1485/     A78 :                     ; "//l" - Show LONG value
(1) 1486/     A78 :                     ;
(1) 1487/     A78 :                     ; If using //b //w //l:
(1) 1488/     A78 :                     ; After $00, put your RAM addresses in LONGS in the
(1) 1489/     A78 :                     ; same order you placed your value tags, don't forget to
(1) 1490/     A78 :                     ; put "align 2" at the end of the string or it will
(1) 1491/     A78 :                     ; trigger and ADDRESS ERROR
(1) 1492/     A78 :                     ;
(1) 1493/     A78 :                     ; TODO: negative values might break
(1) 1494/     A78 :                     
(1) 1495/     A78 :                     Video_Print:
(1) 1496/     A78 : 48E7 0F0E           		movem.l	d4-d7/a4-a6,-(sp)
(1) 1497/     A7C : 4DF9 00C0 0000      		lea	(vdp_data).l,a6
(1) 1498/     A82 : 6100 0132           		bsr	vid_PickLayer
(1) 1499/     A86 : 4BF8 B754           		lea	(RAM_VidPrntList).w,a5
(1) 1500/     A8A :                     .newjump:
(1) 1501/     A8A : 2D45 0004           		move.l	d5,4(a6)
(1) 1502/     A8E : 2805                		move.l	d5,d4
(1) 1503/     A90 :                     .loop:
(1) 1504/     A90 : 1E18                		move.b	(a0)+,d7
(1) 1505/     A92 : 0247 00FF           		andi.w	#$FF,d7
(1) 1506/     A96 : 676C                		beq	.exit
(1) 1507/     A98 : 0C07 000A           		cmpi.b	#$0A,d7			; $0A - next line?
(1) 1508/     A9C : 672C                		beq.s	.next
(1) 1509/     A9E : 0C07 005C           		cmpi.b	#$5C,d7			; $5C ("\") special?
(1) 1510/     AA2 : 6618                		bne.s	.puttext
(1) 1511/     AA4 : 1E18                		move.b	(a0)+,d7		; Read next chr
(1) 1512/     AA6 : 0C07 0062           		cmpi.b	#"b",d7
(1) 1513/     AAA : 6722                		beq.s	.isbyte
(1) 1514/     AAC : 0C07 0077           		cmpi.b	#"w",d7
(1) 1515/     AB0 : 672E                		beq.s	.isword
(1) 1516/     AB2 : 0C07 006C           		cmpi.b	#"l",d7
(1) 1517/     AB6 : 673A                		beq.s	.islong
(1) 1518/     AB8 : 3E3C 005C           		move.w	#"\\",d7		; normal "\"
(1) 1519/     ABC :                     .puttext:
(1) 1520/     ABC : DE78 B8E4           		add.w	(RAM_VidPrntVram).w,d7	; VRAM pos increment
(1) 1521/     AC0 : 3C87                		move.w	d7,(a6)
(1) 1522/     AC2 : 0684 0002 0000      		addi.l	#$20000,d4		; Next X
(1) 1523/     AC8 : 60C6                		bra.s	.loop
(1) 1524/     ACA :                     .next:
(1) 1525/     ACA : DA86                		add.l	d6,d5			; Next line
(1) 1526/     ACC : 60BC                		bra.s	.newjump
(1) 1527/     ACE :                     
(1) 1528/     ACE :                     ; Set print values
(1) 1529/     ACE :                     .isbyte:
(1) 1530/     ACE : 2AC4                		move.l	d4,(a5)+
(1) 1531/     AD0 : 3AFC 0001           		move.w	#1,(a5)+
(1) 1532/     AD4 : 0684 0004 0000      		addi.l	#$40000,d4
(1) 1533/     ADA : 2D44 0004           		move.l	d4,4(a6)
(1) 1534/     ADE : 60B0                		bra	.loop
(1) 1535/     AE0 :                     .isword:
(1) 1536/     AE0 : 2AC4                		move.l	d4,(a5)+
(1) 1537/     AE2 : 3AFC 0002           		move.w	#2,(a5)+
(1) 1538/     AE6 : 0684 0008 0000      		addi.l	#$80000,d4
(1) 1539/     AEC : 2D44 0004           		move.l	d4,4(a6)
(1) 1540/     AF0 : 609E                		bra	.loop
(1) 1541/     AF2 :                     .islong:
(1) 1542/     AF2 : 2AC4                		move.l	d4,(a5)+
(1) 1543/     AF4 : 3AFC 0003           		move.w	#3,(a5)+
(1) 1544/     AF8 : 0684 0010 0000      		addi.l	#$100000,d4
(1) 1545/     AFE : 2D44 0004           		move.l	d4,4(a6)
(1) 1546/     B02 : 608C                		bra	.loop
(1) 1547/     B04 :                     .exit:
(1) 1548/     B04 :                     
(1) 1549/     B04 :                     ; ----------------------------------------
(1) 1550/     B04 :                     ; Print values
(1) 1551/     B04 :                     ;
(1) 1552/     B04 :                     ; vvvv vvvv tttt
(1) 1553/     B04 :                     ; v - vdp pos
(1) 1554/     B04 :                     ; t - value type
(1) 1555/     B04 :                     ; ----------------------------------------
(1) 1556/     B04 :                     
(1) 1557/     B04 :                     ; reading byte by byte so you don't need
(1) 1558/     B04 :                     ; to re-align anything...
(1) 1559/     B04 : 7800                		moveq	#0,d4
(1) 1560/     B06 : 7A00                		moveq	#0,d5
(1) 1561/     B08 : 7C00                		moveq	#0,d6
(1) 1562/     B0A : 4BF8 B754           		lea	(RAM_VidPrntList).w,a5
(1) 1563/     B0E :                     .nextv:
(1) 1564/     B0E : 4A95                		tst.l	(a5)
(1) 1565/     B10 : 6700 009E           		beq	.nothing
(1) 1566/     B14 : 7800                		moveq	#0,d4		; grab value
(1) 1567/     B16 : 1818                		move.b	(a0)+,d4
(1) 1568/     B18 : E19C                		rol.l	#8,d4
(1) 1569/     B1A : 1818                		move.b	(a0)+,d4
(1) 1570/     B1C : E19C                		rol.l	#8,d4
(1) 1571/     B1E : 1818                		move.b	(a0)+,d4
(1) 1572/     B20 : E19C                		rol.l	#8,d4
(1) 1573/     B22 : 1818                		move.b	(a0)+,d4
(1) 1574/     B24 : 2844                		movea.l	d4,a4
(1) 1575/     B26 : 7800                		moveq	#0,d4
(1) 1576/     B28 :                     	; get value
(1) 1577/     B28 : 3C2D 0004           		move.w	4(a5),d6
(1) 1578/     B2C : 0C46 0001           		cmpi.w	#1,d6		; byte?
(1) 1579/     B30 : 660E                		bne.s	.vbyte
(1) 1580/     B32 : 1814                		move.b	(a4),d4
(1) 1581/     B34 : 2D55 0004           		move.l	(a5),4(a6)
(1) 1582/     B38 : E91C                		rol.b	#4,d4
(1) 1583/     B3A : 6158                		bsr.s	.donibl
(1) 1584/     B3C : E91C                		rol.b	#4,d4
(1) 1585/     B3E : 6154                		bsr.s	.donibl
(1) 1586/     B40 :                     .vbyte:
(1) 1587/     B40 : 0C46 0002           		cmpi.w	#2,d6		; word?
(1) 1588/     B44 : 661C                		bne.s	.vword
(1) 1589/     B46 : 1814                		move.b	(a4),d4
(1) 1590/     B48 : E15C                		rol.w	#8,d4
(1) 1591/     B4A : 182C 0001           		move.b	1(a4),d4
(1) 1592/     B4E : 2D55 0004           		move.l	(a5),4(a6)
(1) 1593/     B52 : E95C                		rol.w	#4,d4
(1) 1594/     B54 : 613E                		bsr.s	.donibl
(1) 1595/     B56 : E95C                		rol.w	#4,d4
(1) 1596/     B58 : 613A                		bsr.s	.donibl
(1) 1597/     B5A : E95C                		rol.w	#4,d4
(1) 1598/     B5C : 6136                		bsr.s	.donibl
(1) 1599/     B5E : E95C                		rol.w	#4,d4
(1) 1600/     B60 : 6132                		bsr.s	.donibl
(1) 1601/     B62 :                     .vword:
(1) 1602/     B62 : 0C46 0003           		cmpi.w	#3,d6		; long?
(1) 1603/     B66 : 6624                		bne.s	.vlong
(1) 1604/     B68 : 1814                		move.b	(a4),d4
(1) 1605/     B6A : E19C                		rol.l	#8,d4
(1) 1606/     B6C : 182C 0001           		move.b	1(a4),d4
(1) 1607/     B70 : E19C                		rol.l	#8,d4
(1) 1608/     B72 : 182C 0002           		move.b	2(a4),d4
(1) 1609/     B76 : E19C                		rol.l	#8,d4
(1) 1610/     B78 : 182C 0003           		move.b	3(a4),d4
(1) 1611/     B7C : 2D55 0004           		move.l	(a5),4(a6)
(1) 1612/     B80 : 3C3C 0007           		move.w	#7,d6
(1) 1613/     B84 : E99C                .lngloop:	rol.l	#4,d4
(1) 1614/     B86 : 610C                		bsr.s	.donibl
(1) 1615/     B88 : 51CE FFFA           		dbf	d6,.lngloop
(1) 1616/     B8C :                     .vlong:
(1) 1617/     B8C : 429D                		clr.l	(a5)+
(1) 1618/     B8E : 425D                		clr.w	(a5)+
(1) 1619/     B90 : 6000 FF7C           		bra	.nextv
(1) 1620/     B94 :                     ; make nibble byte
(1) 1621/     B94 :                     .donibl:
(1) 1622/     B94 : 3A04                		move.w	d4,d5
(1) 1623/     B96 : 0245 000F           		andi.w	#%1111,d5
(1) 1624/     B9A : 0C05 000A           		cmpi.b	#$A,d5
(1) 1625/     B9E : 6D04                		blt.s	.lowr
(1) 1626/     BA0 : DA3C 0007           		add.b	#7,d5
(1) 1627/     BA4 :                     .lowr:
(1) 1628/     BA4 : DA7C 0030           		add.w	#"0",d5
(1) 1629/     BA8 : DA78 B8E4           		add.w	(RAM_VidPrntVram).w,d5
(1) 1630/     BAC : 3C85                		move.w	d5,(a6)
(1) 1631/     BAE : 4E75                		rts
(1) 1632/     BB0 :                     ; exit
(1) 1633/     BB0 :                     .nothing:
(1) 1634/     BB0 : 4CDF 70F0           		movem.l	(sp)+,d4-d7/a4-a6
(1) 1635/     BB4 : 4E75                		rts
(1) 1636/     BB6 :                     
(1) 1637/     BB6 :                     ; ------------------------------------------------
(1) 1638/     BB6 :                     ; Shared: pick layer / x pos / y pos and set size
(1) 1639/     BB6 :                     ;
(1) 1640/     BB6 :                     ; Input:
(1) 1641/     BB6 :                     ; d0.l | locate(layer,x,y)
(1) 1642/     BB6 :                     ;
(1) 1643/     BB6 :                     ; Returns:
(1) 1644/     BB6 :                     ; d5.l | VRAM position
(1) 1645/     BB6 :                     ; d6.l | Width
(1) 1646/     BB6 :                     ; ------------------------------------------------
(1) 1647/     BB6 :                     
(1) 1648/     BB6 :                     vid_PickLayer:
(1) 1649/     BB6 : 2C00                		move.l	d0,d6			; d6 - pick layer
(1) 1650/     BB8 : 4846                		swap	d6
(1) 1651/     BBA : 0806 0000           		btst	#0,d6
(1) 1652/     BBE : 671C                		beq.s	.plawnd
(1) 1653/     BC0 : 1A38 B8FC           		move.b	(RAM_VdpRegs+4).w,d5	; BG
(1) 1654/     BC4 : 3805                		move.w	d5,d4
(1) 1655/     BC6 : E24C                		lsr.w	#1,d4
(1) 1656/     BC8 : 0244 0003           		andi.w	#%11,d4
(1) 1657/     BCC : 4845                		swap	d5
(1) 1658/     BCE : 3A04                		move.w	d4,d5
(1) 1659/     BD0 : 4845                		swap	d5
(1) 1660/     BD2 : 0245 0001           		andi.w	#1,d5
(1) 1661/     BD6 : E14D                		lsl.w	#8,d5
(1) 1662/     BD8 : EB4D                		lsl.w	#5,d5
(1) 1663/     BDA : 6024                		bra.s	.golyr
(1) 1664/     BDC :                     .plawnd:
(1) 1665/     BDC : 1A38 B8FA           		move.b	(RAM_VdpRegs+2).w,d5	; FG
(1) 1666/     BE0 : 0806 0001           		btst	#1,d6
(1) 1667/     BE4 : 6704                		beq.s	.nowd
(1) 1668/     BE6 : 1A38 B8FB           		move.b	(RAM_VdpRegs+3).w,d5	; WINDOW
(1) 1669/     BEA :                     .nowd:
(1) 1670/     BEA : 3805                		move.w	d5,d4
(1) 1671/     BEC : E84C                		lsr.w	#4,d4
(1) 1672/     BEE : 0244 0003           		andi.w	#%11,d4
(1) 1673/     BF2 : 4845                		swap	d5
(1) 1674/     BF4 : 3A04                		move.w	d4,d5
(1) 1675/     BF6 : 4845                		swap	d5
(1) 1676/     BF8 : 0245 000E           		andi.w	#%00001110,d5
(1) 1677/     BFC : E14D                		lsl.w	#8,d5
(1) 1678/     BFE : E54D                		lsl.w	#2,d5
(1) 1679/     C00 :                     .golyr:
(1) 1680/     C00 : 0045 4000           		ori.w	#$4000,d5
(1) 1681/     C04 : 3800                		move.w	d0,d4			; Y start pos
(1) 1682/     C06 : 0244 00FF           		andi.w	#$FF,d4			; Y only
(1) 1683/     C0A : ED4C                		lsl.w	#6,d4
(1) 1684/     C0C : 1C38 B908           		move.b	(RAM_VdpRegs+$10).w,d6
(1) 1685/     C10 : 0246 0003           		andi.w	#%11,d6
(1) 1686/     C14 : 670A                		beq.s	.thissz
(1) 1687/     C16 : D844                		add.w	d4,d4			; H64
(1) 1688/     C18 : 0246 0002           		andi.w	#%10,d6
(1) 1689/     C1C : 6702                		beq.s	.thissz
(1) 1690/     C1E : D844                		add.w	d4,d4			; H128
(1) 1691/     C20 :                     .thissz:
(1) 1692/     C20 : DA44                		add.w	d4,d5
(1) 1693/     C22 : 3800                		move.w	d0,d4
(1) 1694/     C24 : 0244 FF00           		andi.w	#$FF00,d4		; X only
(1) 1695/     C28 : EE4C                		lsr.w	#7,d4
(1) 1696/     C2A : DA44                		add.w	d4,d5			; X add
(1) 1697/     C2C : 4845                		swap	d5
(1) 1698/     C2E : 7C00                		moveq	#0,d6
(1) 1699/     C30 : 3C3C 0040           		move.w	#$40,d6			; Set jump size
(1) 1700/     C34 : 1838 B908           		move.b	(RAM_VdpRegs+$10).w,d4
(1) 1701/     C38 : 0244 0003           		andi.w	#%11,d4
(1) 1702/     C3C : 670A                		beq.s	.thisszj
(1) 1703/     C3E : DC46                		add.w	d6,d6			; H64
(1) 1704/     C40 : 0244 0002           		andi.w	#%10,d4
(1) 1705/     C44 : 6702                		beq.s	.thisszj
(1) 1706/     C46 : DC46                		add.w	d6,d6			; H128
(1) 1707/     C48 :                     .thisszj:
(1) 1708/     C48 : 4846                		swap	d6
(1) 1709/     C4A : 4E75                		rts
(1) 1710/     C4C :                     
(1) 1711/     C4C :                     ; ====================================================================
(1) 1712/     C4C :                     ; ----------------------------------------------------------------
(1) 1713/     C4C :                     ; Objects system
(1) 1714/     C4C :                     ; ----------------------------------------------------------------
(1) 1715/     C4C :                     
(1) 1716/     C4C :                     ; --------------------------------------------------------
(1) 1717/     C4C :                     ; Init/Clear Objects system
(1) 1718/     C4C :                     ; --------------------------------------------------------
(1) 1719/     C4C :                     
(1) 1720/     C4C :                     Objects_Clear:
(1) 1721/     C4C : 4DF8 AD94           		lea	(RAM_Objects).w,a6
(1) 1722/     C50 : 3E3C 098F           		move.w	#(sizeof_mdobj*MAX_MDOBJ)-1,d7
(1) 1723/     C54 :                     .clr:
(1) 1724/     C54 : 421E                		clr.b	(a6)+
(1) 1725/     C56 : 51CF FFFC           		dbf	d7,.clr
(1) 1726/     C5A : 4DF8 B724           		lea	(RAM_ObjDispList).w,a6
(1) 1727/     C5E : 3E3C 0017           		move.w	#MAX_MDOBJ-1,d7
(1) 1728/     C62 :                     .clr_d:
(1) 1729/     C62 : 425E                		clr.w	(a6)+
(1) 1730/     C64 : 51CF FFFC           		dbf	d7,.clr_d
(1) 1731/     C68 : 31FC 0001 B8DE      		move.w	#1,(RAM_SprLinkNum).w
(1) 1732/     C6E : 31F8 B8D8 B8DA      		move.w	(RAM_SprAutoDmaSet).w,(RAM_SprAutoDmaCurr).w
(1) 1733/     C74 : 4278 B8DC           		clr.w	(RAM_SprDrwCntr).w
(1) 1734/     C78 : 4E75                		rts
(1) 1735/     C7A :                     
(1) 1736/     C7A :                     ; --------------------------------------------------------
(1) 1737/     C7A :                     ; Process object code
(1) 1738/     C7A :                     ; --------------------------------------------------------
(1) 1739/     C7A :                     
(1) 1740/     C7A :                     Objects_Run:
(1) 1741/     C7A : 4DF8 AD94           		lea	(RAM_Objects).w,a6
(1) 1742/     C7E : 3E3C 0017           		move.w	#MAX_MDOBJ-1,d7
(1) 1743/     C82 :                     .next_one:
(1) 1744/     C82 : 2C16                		move.l	obj_code(a6),d6
(1) 1745/     C84 : 6708                		beq.s	.no_code	; Free slot
(1) 1746/     C86 : 2F07                		move.l	d7,-(sp)
(1) 1747/     C88 : 2A46                		move.l	d6,a5
(1) 1748/     C8A : 4E95                		jsr	(a5)
(1) 1749/     C8C : 2E1F                		move.l	(sp)+,d7
(1) 1750/     C8E :                     .no_code:
(1) 1751/     C8E : DCFC 0066           		adda	#sizeof_mdobj,a6
(1) 1752/     C92 : 51CF FFEE           		dbf	d7,.next_one
(1) 1753/     C96 : 4E75                		rts
(1) 1754/     C98 :                     
(1) 1755/     C98 :                     ; --------------------------------------------------------
(1) 1756/     C98 :                     ; Objects_Set
(1) 1757/     C98 :                     ;
(1) 1758/     C98 :                     ; Input:
(1) 1759/     C98 :                     ; d0.l | Object code pointer
(1) 1760/     C98 :                     ;        If 0: Delete the object
(1) 1761/     C98 :                     ; d1.w | Object slot
(1) 1762/     C98 :                     ; d2.b | Object sub-type (obj_subid)
(1) 1763/     C98 :                     ;
(1) 1764/     C98 :                     ; Breaks:
(1) 1765/     C98 :                     ; d7,a5-a6
(1) 1766/     C98 :                     ; --------------------------------------------------------
(1) 1767/     C98 :                     
(1) 1768/     C98 :                     Objects_Set:
(1) 1769/     C98 : 48E7 0106           		movem.l	d7/a5-a6,-(sp)
(1) 1770/     C9C : 4DF8 AD94           		lea	(RAM_Objects).w,a6
(1) 1771/     CA0 : 2A4E                		move.l	a6,a5
(1) 1772/     CA2 : 3E3C 0065           		move.w	#sizeof_mdobj-1,d7
(1) 1773/     CA6 :                     .clr:
(1) 1774/     CA6 : 421D                		clr.b	(a5)+
(1) 1775/     CA8 : 51CF FFFC           		dbf	d7,.clr
(1) 1776/     CAC : 3E01                		move.w	d1,d7
(1) 1777/     CAE : CEFC 0066           		mulu.w	#sizeof_mdobj,d7
(1) 1778/     CB2 : DCC7                		adda	d7,a6
(1) 1779/     CB4 : 4A80                		tst.l	d0
(1) 1780/     CB6 : 6706                		beq.s	.from_del
(1) 1781/     CB8 : 2C80                		move.l	d0,obj_code(a6)
(1) 1782/     CBA : 1D42 0023           		move.b	d2,obj_subid(a6)
(1) 1783/     CBE :                     .from_del:
(1) 1784/     CBE : 4DF8 B724           		lea	(RAM_ObjDispList).w,a6	; Remove last display slot
(1) 1785/     CC2 : 3E01                		move.w	d1,d7
(1) 1786/     CC4 : DE47                		add.w	d7,d7
(1) 1787/     CC6 : 3DBC 0000 7000      		move.w	#0,(a6,d7.w)
(1) 1788/     CCC : 4CDF 6080           		movem.l	(sp)+,d7/a5-a6
(1) 1789/     CD0 : 4E75                		rts
(1) 1790/     CD2 :                     
(1) 1791/     CD2 :                     ; --------------------------------------------------------
(1) 1792/     CD2 :                     ; Objects_Add
(1) 1793/     CD2 :                     ;
(1) 1794/     CD2 :                     ; Input:
(1) 1795/     CD2 :                     ; d0.l | Object code pointer
(1) 1796/     CD2 :                     ; d1.b | Object sub-type (obj_subid)
(1) 1797/     CD2 :                     ;
(1) 1798/     CD2 :                     ; Returns:
(1) 1799/     CD2 :                     ; d0.l | Sets -1 if no free slot found.
(1) 1800/     CD2 :                     ;
(1) 1801/     CD2 :                     ; Breaks:
(1) 1802/     CD2 :                     ; d6-d7,a5-a6
(1) 1803/     CD2 :                     ; --------------------------------------------------------
(1) 1804/     CD2 :                     
(1) 1805/     CD2 :                     Objects_Add:
(1) 1806/     CD2 : 48E7 0306           		movem.l	d6-d7/a5-a6,-(sp)
(1) 1807/     CD6 : 4DF8 AD94           		lea	(RAM_Objects).w,a6
(1) 1808/     CDA : 4BF8 B724           		lea	(RAM_ObjDispList).w,a5
(1) 1809/     CDE : 7C00                		moveq	#0,d6
(1) 1810/     CE0 : 3E3C 0017           		move.w	#MAX_MDOBJ-1,d7
(1) 1811/     CE4 :                     .search:
(1) 1812/     CE4 : 2E16                		move.l	obj_code(a6),d7
(1) 1813/     CE6 : 670E                		beq.s	.use_it
(1) 1814/     CE8 : 5446                		addq.w	#1*2,d6
(1) 1815/     CEA : DCFC 0066           		adda	#sizeof_mdobj,a6
(1) 1816/     CEE : 51CF FFF4           		dbf	d7,.search
(1) 1817/     CF2 : 70FF                		moveq	#-1,d0			; Return ran-out flag
(1) 1818/     CF4 : 4E75                		rts
(1) 1819/     CF6 :                     .use_it:
(1) 1820/     CF6 :                     ; 		add.w	d6,d6
(1) 1821/     CF6 : 3BBC 0000 6000      		move.w	#0,(a5,d6.w)		; Remove last display slot
(1) 1822/     CFC : 2A4E                		move.l	a6,a5
(1) 1823/     CFE : 3E3C 0065           		move.w	#sizeof_mdobj-1,d7
(1) 1824/     D02 :                     .clr:
(1) 1825/     D02 : 421D                		clr.b	(a5)+
(1) 1826/     D04 : 51CF FFFC           		dbf	d7,.clr
(1) 1827/     D08 : 4A80                		tst.l	d0
(1) 1828/     D0A : 6706                		beq.s	.from_del
(1) 1829/     D0C : 2C80                		move.l	d0,obj_code(a6)
(1) 1830/     D0E : 1D41 0023           		move.b	d1,obj_subid(a6)
(1) 1831/     D12 :                     .from_del:
(1) 1832/     D12 : 4CDF 60C0           		movem.l	(sp)+,d6-d7/a5-a6
(1) 1833/     D16 : 4E75                		rts
(1) 1834/     D18 :                     
(1) 1835/     D18 :                     ; --------------------------------------------------------
(1) 1836/     D18 :                     ; Draw ALL Objects from display list
(1) 1837/     D18 :                     ;
(1) 1838/     D18 :                     ; Call this BEFORE VBlank.
(1) 1839/     D18 :                     ;
(1) 1840/     D18 :                     ; Breaks:
(1) 1841/     D18 :                     ; d0-d7/a4-a6
(1) 1842/     D18 :                     ; --------------------------------------------------------
(1) 1843/     D18 :                     
(1) 1844/     D18 :                     Objects_Show:
(1) 1845/     D18 : 3C38 B8DE           		move.w	(RAM_SprLinkNum).w,d6	; d6 - Starting sprite link
(1) 1846/     D1C : 4DF8 A414           		lea	(RAM_Sprites).w,a6	; a6 - Genesis sprites
(1) 1847/     D20 : 4BF8 B724           		lea	(RAM_ObjDispList).w,a5
(1) 1848/     D24 : 3E3C 0017           		move.w	#MAX_MDOBJ-1,d7
(1) 1849/     D28 :                     .next:
(1) 1850/     D28 : 3015                		move.w	(a5),d0
(1) 1851/     D2A : 6700 00AA           		beq	.finish
(1) 1852/     D2E : 425D                		clr.w	(a5)+			; Clear original slot
(1) 1853/     D30 : 72FF                		moveq	#-1,d1			; Write the $FFFFxxxx part and
(1) 1854/     D32 : 3200                		move.w	d0,d1			; the half-address
(1) 1855/     D34 : 2841                		move.l	d1,a4			; Read object to a4
(1) 1856/     D36 : 206C 000C           		move.l	obj_map(a4),a0		; Read this object's map
(1) 1857/     D3A : 302C 001C           		move.w	obj_frame(a4),d0
(1) 1858/     D3E : 182C 0022           		move.b	obj_set(a4),d4
(1) 1859/     D42 : D040                		add.w	d0,d0
(1) 1860/     D44 : 3030 0000           		move.w	(a0,d0.w),d0
(1) 1861/     D48 : 41F0 0000           		lea	(a0,d0.w),a0
(1) 1862/     D4C : 3A18                		move.w	(a0)+,d5
(1) 1863/     D4E : 6700 0082           		beq	.mk_spr
(1) 1864/     D52 : 0445 0001           		subi.w	#1,d5
(1) 1865/     D56 :                     .mk_pz:
(1) 1866/     D56 : 0C46 0050           		cmpi.w	#80,d6
(1) 1867/     D5A : 6E00 0098           		bgt	.ran_out
(1) 1868/     D5E : 4845                		swap	d5
(1) 1869/     D60 : 4846                		swap	d6
(1) 1870/     D62 : 1018                		move.b	(a0)+,d0		; d0 - Y pos
(1) 1871/     D64 : 1218                		move.b	(a0)+,d1		; d1 - Size
(1) 1872/     D66 : 3418                		move.w	(a0)+,d2		; d2 - VRAM main
(1) 1873/     D68 : D0FC 0002           		adda	#2,a0			; <-- Reserved for VRAM double-interlace
(1) 1874/     D6C : 3618                		move.w	(a0)+,d3		; d3 - X pos
(1) 1875/     D6E : 4880                		ext.w	d0
(1) 1876/     D70 :                     	; X/Y flip checks
(1) 1877/     D70 : 3A2C 0014           		move.w	obj_vram(a4),d5
(1) 1878/     D74 : 0804 0001           		btst	#bitobj_flipV,d4
(1) 1879/     D78 : 6714                		beq.s	.vram_v
(1) 1880/     D7A : 4440                		neg.w	d0
(1) 1881/     D7C : 0440 0008           		subi.w	#8,d0
(1) 1882/     D80 : 3C01                		move.w	d1,d6
(1) 1883/     D82 : 0246 0003           		andi.w	#%0011,d6
(1) 1884/     D86 : E74E                		lsl.w	#3,d6
(1) 1885/     D88 : 9046                		sub.w	d6,d0
(1) 1886/     D8A : 0045 1000           		ori.w	#$1000,d5
(1) 1887/     D8E :                     .vram_v:
(1) 1888/     D8E : 0804 0000           		btst	#bitobj_flipH,d4
(1) 1889/     D92 : 6714                		beq.s	.vram_h
(1) 1890/     D94 : 4443                		neg.w	d3
(1) 1891/     D96 : 0443 0008           		subi.w	#8,d3
(1) 1892/     D9A : 3C01                		move.w	d1,d6
(1) 1893/     D9C : 0246 000C           		andi.w	#%1100,d6
(1) 1894/     DA0 : DC46                		add.w	d6,d6
(1) 1895/     DA2 : 9646                		sub.w	d6,d3
(1) 1896/     DA4 : 0045 0800           		ori.w	#$0800,d5
(1) 1897/     DA8 :                     .vram_h:
(1) 1898/     DA8 : D445                		add.w	d5,d2
(1) 1899/     DAA : D06C 0008           		add.w	obj_y(a4),d0
(1) 1900/     DAE : D66C 0004           		add.w	obj_x(a4),d3
(1) 1901/     DB2 : D07C 0080           		add.w	#$80,d0
(1) 1902/     DB6 : D67C 0080           		add.w	#$80,d3
(1) 1903/     DBA : 4846                		swap	d6
(1) 1904/     DBC : E149                		lsl.w	#8,d1			; Size + Link
(1) 1905/     DBE : 8246                		or.w	d6,d1
(1) 1906/     DC0 : 3CC0                		move.w	d0,(a6)+
(1) 1907/     DC2 : 3CC1                		move.w	d1,(a6)+
(1) 1908/     DC4 : 3CC2                		move.w	d2,(a6)+
(1) 1909/     DC6 : 3CC3                		move.w	d3,(a6)+
(1) 1910/     DC8 : DC7C 0001           		add.w	#1,d6
(1) 1911/     DCC : 4845                		swap	d5
(1) 1912/     DCE : 51CD FF86           		dbf	d5,.mk_pz
(1) 1913/     DD2 :                     .mk_spr:
(1) 1914/     DD2 : 51CF FF54           		dbf	d7,.next
(1) 1915/     DD6 :                     .finish:
(1) 1916/     DD6 : 4DF8 A414           		lea	(RAM_Sprites).w,a6	; Check last sprite piece
(1) 1917/     DDA : 0C46 0001           		cmpi.w	#1,d6
(1) 1918/     DDE : 6714                		beq.s	.ran_out
(1) 1919/     DE0 : 0C46 0050           		cmpi.w	#80,d6
(1) 1920/     DE4 : 6E0E                		bgt.s	.ran_out
(1) 1921/     DE6 : 3E06                		move.w	d6,d7
(1) 1922/     DE8 : 0447 0001           		subi.w	#1,d7
(1) 1923/     DEC : E74F                		lsl.w	#3,d7
(1) 1924/     DEE : DCC7                		adda	d7,a6
(1) 1925/     DF0 : 429E                		clr.l	(a6)+
(1) 1926/     DF2 : 429E                		clr.l	(a6)+
(1) 1927/     DF4 :                     .ran_out:
(1) 1928/     DF4 : 31C6 B8DE           		move.w	d6,(RAM_SprLinkNum).w
(1) 1929/     DF8 : 4E75                		rts
(1) 1930/     DFA :                     
(1) 1931/     DFA :                     ; ====================================================================
(1) 1932/     DFA :                     ; --------------------------------------------------------
(1) 1933/     DFA :                     ; Object subroutines
(1) 1934/     DFA :                     ;
(1) 1935/     DFA :                     ; These can ONLY be called on the current object's code.
(1) 1936/     DFA :                     ; --------------------------------------------------------
(1) 1937/     DFA :                     
(1) 1938/     DFA :                     ; --------------------------------------------------------
(1) 1939/     DFA :                     ; object_ResetVars
(1) 1940/     DFA :                     ;
(1) 1941/     DFA :                     ; Call this BEFORE using animation
(1) 1942/     DFA :                     ;
(1) 1943/     DFA :                     ; Input:
(1) 1944/     DFA :                     ; a6 | This object
(1) 1945/     DFA :                     ;
(1) 1946/     DFA :                     ; Breaks:
(1) 1947/     DFA :                     ; d7
(1) 1948/     DFA :                     ; --------------------------------------------------------
(1) 1949/     DFA :                     
(1) 1950/     DFA :                     object_ResetVars:
(1) 1951/     DFA : 48E7 0304           		movem.l	d6-d7/a5,-(sp)
(1) 1952/     DFE : 4BEE 0026           		lea	obj_ram(a6),a5
(1) 1953/     E02 : 3C3C 003F           		move.w	#(sizeof_mdobj-obj_ram)-1,d6
(1) 1954/     E06 : 7E00                		moveq	#0,d7
(1) 1955/     E08 : 1AC7                .clr_ram:	move.b	d7,(a5)+
(1) 1956/     E0A : 51CE FFFC           		dbf	d6,.clr_ram
(1) 1957/     E0E : 4CDF 20C0           		movem.l	(sp)+,d6-d7/a5
(1) 1958/     E12 : 4E75                		rts
(1) 1959/     E14 :                     
(1) 1960/     E14 :                     ; --------------------------------------------------------
(1) 1961/     E14 :                     ; object_Display
(1) 1962/     E14 :                     ;
(1) 1963/     E14 :                     ; Makes this object visible, requires sprite map data
(1) 1964/     E14 :                     ; (obj_map) and VRAM location (obj_vram) set up
(1) 1965/     E14 :                     ; before calling this.
(1) 1966/     E14 :                     ;
(1) 1967/     E14 :                     ; Input:
(1) 1968/     E14 :                     ; a6 | This object
(1) 1969/     E14 :                     ;
(1) 1970/     E14 :                     ; Returns:
(1) 1971/     E14 :                     ; d0 | -1 If ran out of display slots
(1) 1972/     E14 :                     ;
(1) 1973/     E14 :                     ; Breaks:
(1) 1974/     E14 :                     ; a5,d4-d7
(1) 1975/     E14 :                     ; --------------------------------------------------------
(1) 1976/     E14 :                     
(1) 1977/     E14 :                     ; *** GENESIS map ***
(1) 1978/     E14 :                     ; mapdata:
(1) 1979/     E14 :                     ;       dc.w .frame0-mapdata
(1) 1980/     E14 :                     ;       dc.w .frame1-mapdata
(1) 1981/     E14 :                     ;       ...
(1) 1982/     E14 :                     ; .frame0:
(1) 1983/     E14 :                     ;       dc.w numofpz
(1) 1984/     E14 :                     ;       dc.b YY,SS
(1) 1985/     E14 :                     ;       dc.w vram_normal
(1) 1986/     E14 :                     ;       dc.w vram_half
(1) 1987/     E14 :                     ;       dc.w XXXX
(1) 1988/     E14 :                     ;       ; next frame
(1) 1989/     E14 :                     ;       align 2
(1) 1990/     E14 :                     ;
(1) 1991/     E14 :                     ; *** 32X map ***
(1) 1992/     E14 :                     ; TODO
(1) 1993/     E14 :                     
(1) 1994/     E14 :                     object_Display:
(1) 1995/     E14 : 48E7 0104           		movem.l	d7/a5,-(sp)
(1) 1996/     E18 : 4BF8 B724           		lea	(RAM_ObjDispList).w,a5
(1) 1997/     E1C : 3E3C 0017           		move.w	#MAX_MDOBJ-1,d7
(1) 1998/     E20 :                     .srch:
(1) 1999/     E20 : 4A55                		tst.w	(a5)
(1) 2000/     E22 : 670C                		beq.s	.this_one
(1) 2001/     E24 : DAFC 0002           		adda	#2,a5
(1) 2002/     E28 : 51CF FFF6           		dbf	d7,.srch
(1) 2003/     E2C : 70FF                		moveq	#-1,d0
(1) 2004/     E2E : 6002                		bra.s	.ran_out
(1) 2005/     E30 :                     .this_one:
(1) 2006/     E30 : 3A8E                		move.w	a6,(a5)
(1) 2007/     E32 :                     .ran_out:
(1) 2008/     E32 : 4CDF 2080           		movem.l	(sp)+,d7/a5
(1) 2009/     E36 : 4E75                		rts
(1) 2010/     E38 :                     
(1) 2011/     E38 :                     ; --------------------------------------------------------
(1) 2012/     E38 :                     ; object_DMA, object_DMA_Auto
(1) 2013/     E38 :                     ;
(1) 2014/     E38 :                     ; Makes DMA graphics entry for this object,
(1) 2015/     E38 :                     ; for Genesis VDP Sprites ONLY.
(1) 2016/     E38 :                     ;
(1) 2017/     E38 :                     ; Input:
(1) 2018/     E38 :                     ; a6   | This object
(1) 2019/     E38 :                     ; a0   | DMA map data
(1) 2020/     E38 :                     ; a1   | Graphics data
(1) 2021/     E38 :                     ;
(1) 2022/     E38 :                     ; Returns:
(1) 2023/     E38 :                     ; d1.w | New VRAM Position for _Auto
(1) 2024/     E38 :                     ;
(1) 2025/     E38 :                     ; Notes:
(1) 2026/     E38 :                     ; - Calling the _Auto version will
(1) 2027/     E38 :                     ;   OVERWRITE obj_vram with the available
(1) 2028/     E38 :                     ;   position for output.
(1) 2029/     E38 :                     ; --------------------------------------------------------
(1) 2030/     E38 :                     
(1) 2031/     E38 :                     object_DMA_Auto:
(1) 2032/     E38 : 48E7 EF04           		movem.l	d0-d2/d4-d7/a5,-(sp)
(1) 2033/     E3C : 3238 B8DA           		move.w	(RAM_SprAutoDmaCurr).w,d1
(1) 2034/     E40 : 382E 0014           		move.w	obj_vram(a6),d4
(1) 2035/     E44 : 0244 F800           		andi.w	#$F800,d4
(1) 2036/     E48 : 8841                		or.w	d1,d4
(1) 2037/     E4A : 3D44 0014           		move.w	d4,obj_vram(a6)
(1) 2038/     E4E : 6116                		bsr.s	objMkDMA_Go
(1) 2039/     E50 : 31C1 B8DA           		move.w	d1,(RAM_SprAutoDmaCurr).w
(1) 2040/     E54 : 4CDF 20F7           		movem.l	(sp)+,d0-d2/d4-d7/a5
(1) 2041/     E58 : 4E75                		rts
(1) 2042/     E5A :                     
(1) 2043/     E5A :                     ; ------------------------------------------------
(1) 2044/     E5A :                     
(1) 2045/     E5A :                     object_DMA:
(1) 2046/     E5A : 48E7 EF04           		movem.l	d0-d2/d4-d7/a5,-(sp)
(1) 2047/     E5E : 6106                		bsr.s	objMkDMA_Go
(1) 2048/     E60 : 4CDF 20F7           		movem.l	(sp)+,d0-d2/d4-d7/a5
(1) 2049/     E64 : 4E75                		rts
(1) 2050/     E66 :                     
(1) 2051/     E66 :                     ; ------------------------------------------------
(1) 2052/     E66 :                     
(1) 2053/     E66 :                     objMkDMA_Go:
(1) 2054/     E66 : 082E 0007 0022      		btst	#bitobj_Mars,obj_set(a6)
(1) 2055/     E6C : 6650                		bne.s	.no_dma
(1) 2056/     E6E : 2609                		move.l	a1,d3			; d3 - BASE graphics data
(1) 2057/     E70 : 382E 001C           		move.w	obj_frame(a6),d4	; d4 - Current frame
(1) 2058/     E74 : D844                 		add.w	d4,d4
(1) 2059/     E76 : 3830 4000           		move.w	(a0,d4.w),d4
(1) 2060/     E7A : D0C4                 		adda	d4,a0
(1) 2061/     E7C : 7800                 		moveq	#0,d4
(1) 2062/     E7E : 3818                 		move.w	(a0)+,d4
(1) 2063/     E80 : 673C                 		beq.s	.no_dma			; If no valid entries, skip
(1) 2064/     E82 : 6B3A                 		bmi.s	.no_dma
(1) 2065/     E84 : 5344                 		subq.w	#1,d4
(1) 2066/     E86 : 322E 0014           		move.w	obj_vram(a6),d1
(1) 2067/     E8A : 0241 07FF           		andi.w	#$7FF,d1
(1) 2068/     E8E : EB49                		lsl.w	#5,d1
(1) 2069/     E90 : 2F0E                		move.l	a6,-(sp)		; SAVE a6
(1) 2070/     E92 :                     .next_pz:
(1) 2071/     E92 : 4844                		swap	d4
(1) 2072/     E94 : 3818                		move.w	(a0)+,d4
(1) 2073/     E96 : 3404                		move.w	d4,d2
(1) 2074/     E98 : EE4A                		lsr.w	#7,d2
(1) 2075/     E9A : 0242 01E0           		andi.w	#$1E0,d2
(1) 2076/     E9E : D47C 0020           		add.w	#$20,d2
(1) 2077/     EA2 : 7000                		moveq	#0,d0
(1) 2078/     EA4 : 3004                		move.w	d4,d0
(1) 2079/     EA6 : 0240 0FFF           		andi.w	#$FFF,d0
(1) 2080/     EAA : EB48                		lsl.w	#5,d0
(1) 2081/     EAC : D083                		add.l	d3,d0
(1) 2082/     EAE : 6100 F882           		bsr	Video_DmaMkEntry
(1) 2083/     EB2 : D242                		add.w	d2,d1
(1) 2084/     EB4 : 4844                		swap	d4
(1) 2085/     EB6 : 51CC FFDA           		dbf	d4,.next_pz
(1) 2086/     EBA : 2C5F                		move.l	(sp)+,a6		; Restore a6
(1) 2087/     EBC : EA49                		lsr.w	#5,d1			; Return d1
(1) 2088/     EBE :                     .no_dma:
(1) 2089/     EBE : 4E75                		rts
(1) 2090/     EC0 :                     
(1) 2091/     EC0 :                     ; --------------------------------------------------------
(1) 2092/     EC0 :                     ; object_Animate
(1) 2093/     EC0 :                     ;
(1) 2094/     EC0 :                     ; Animates the sprite
(1) 2095/     EC0 :                     ;
(1) 2096/     EC0 :                     ; Input:
(1) 2097/     EC0 :                     ; a6 | This object
(1) 2098/     EC0 :                     ; a0 | Animation data
(1) 2099/     EC0 :                     ;
(1) 2100/     EC0 :                     ; Notes:
(1) 2101/     EC0 :                     ; - Calling this will OVERWRITE obj_frame with the
(1) 2102/     EC0 :                     ;   new frame number set on the animation sequence.
(1) 2103/     EC0 :                     ; --------------------------------------------------------
(1) 2104/     EC0 :                     
(1) 2105/     EC0 :                     ; anim_data:
(1) 2106/     EC0 :                     ; 	dc.w .frame_1-anim_data
(1) 2107/     EC0 :                     ; 	dc.w .frame_2-anim_data
(1) 2108/     EC0 :                     ; 	;...
(1) 2109/     EC0 :                     ;
(1) 2110/     EC0 :                     ; .frame_num:
(1) 2111/     EC0 :                     ; 	dc.w $speed			; Animation speed
(1) 2112/     EC0 :                     ; 	dc.w $frame_0,$frame_1,...	; Frames list
(1) 2113/     EC0 :                     ; 	dc.w $command			; End-of-data action command
(1) 2114/     EC0 :                     ;
(1) 2115/     EC0 :                     ; $command:
(1) 2116/     EC0 :                     ; | -1 Finish animation, ends at last frame
(1) 2117/     EC0 :                     ; | -2 Loop animation, goes back to index 0
(1) 2118/     EC0 :                     ; | -3 Go to index:
(1) 2119/     EC0 :                     ; |    dc.w -3,to_slot
(1) 2120/     EC0 :                     
(1) 2121/     EC0 :                     object_Animate:
(1) 2122/     EC0 : 48E7 0780           		movem.l	a0/d5-d7,-(sp)
(1) 2123/     EC4 : 7E00                		moveq	#0,d7
(1) 2124/     EC6 : 1E2E 001F            		move.b	obj_anim_icur(a6),d7
(1) 2125/     ECA : BE2E 001E            		cmp.b	obj_anim_id(a6),d7
(1) 2126/     ECE : 670E                 		beq.s	.sameThing
(1) 2127/     ED0 : 1D6E 001E 001F       		move.b	obj_anim_id(a6),obj_anim_icur(a6)
(1) 2128/     ED6 : 426E 001A            		clr.w	obj_anim_indx(a6)
(1) 2129/     EDA : 422E 0020            		clr.b	obj_anim_spd(a6)
(1) 2130/     EDE :                     .sameThing:
(1) 2131/     EDE : 1E2E 001E            		move.b	obj_anim_id(a6),d7
(1) 2132/     EE2 : 0C07 00FF            		cmpi.b	#-1,d7
(1) 2133/     EE6 : 6748                 		beq.s	.return
(1) 2134/     EE8 : DE47                 		add.w	d7,d7
(1) 2135/     EEA : 3E30 7000            		move.w	(a0,d7.w),d7
(1) 2136/     EEE : 41F0 7000            		lea	(a0,d7.w),a0
(1) 2137/     EF2 : 3E18                 		move.w	(a0)+,d7
(1) 2138/     EF4 : 0C47 FFFF            		cmpi.w	#-1,d7
(1) 2139/     EF8 : 670C                 		beq.s	.keepspd
(1) 2140/     EFA : 042E 0001 0020       		subi.b	#1,obj_anim_spd(a6)
(1) 2141/     F00 : 6A2E                 		bpl.s	.return
(1) 2142/     F02 : 1D47 0020           		move.b	d7,obj_anim_spd(a6)
(1) 2143/     F06 :                     .keepspd:
(1) 2144/     F06 : 7C00                 		moveq	#0,d6
(1) 2145/     F08 : 3E2E 001A            		move.w	obj_anim_indx(a6),d7
(1) 2146/     F0C : DE47                 		add.w	d7,d7
(1) 2147/     F0E : 3C10                 		move.w	(a0),d6
(1) 2148/     F10 : D0C7                 		adda	d7,a0
(1) 2149/     F12 : 3A10                 		move.w	(a0),d5
(1) 2150/     F14 : 0C45 FFFF            		cmpi.w	#-1,d5
(1) 2151/     F18 : 6730                 		beq.s	.lastFrame	; finish
(1) 2152/     F1A : 0C45 FFFE            		cmpi.w	#-2,d5
(1) 2153/     F1E : 6712                 		beq.s	.noAnim		; loop animation
(1) 2154/     F20 : 0C45 FFFD            		cmpi.w	#-3,d5
(1) 2155/     F24 : 671A                 		beq.s	.goToFrame
(1) 2156/     F26 : 3D45 001C            		move.w	d5,obj_frame(a6)
(1) 2157/     F2A : 066E 0001 001A       		add.w	#1,obj_anim_indx(a6)
(1) 2158/     F30 :                     .return:
(1) 2159/     F30 : 601C                 		bra.s	.exit_anim
(1) 2160/     F32 :                     .noAnim:
(1) 2161/     F32 : 3D7C 0001 001A       		move.w	#1,obj_anim_indx(a6)
(1) 2162/     F38 : 3A06                 		move.w	d6,d5
(1) 2163/     F3A : 3D45 001C            		move.w	d5,obj_frame(a6)
(1) 2164/     F3E : 600E                		bra.s	.exit_anim
(1) 2165/     F40 :                     .goToFrame:
(1) 2166/     F40 : 426E 001A           		clr.w	obj_anim_indx(a6)
(1) 2167/     F44 : 3D68 0002 001A      		move.w	2(a0),obj_anim_indx(a6)
(1) 2168/     F4A :                     .lastFrame:
(1) 2169/     F4A : 422E 0020            		clr.b	obj_anim_spd(a6)
(1) 2170/     F4E :                     .exit_anim:
(1) 2171/     F4E : 4CDF 01E0           		movem.l	(sp)+,a0/d5-d7
(1) 2172/     F52 : 4E75                		rts
(1) 2173/     F54 :                     
(1) 2174/     F54 :                     ; --------------------------------------------------------
(1) 2175/     F54 :                     ; object_ResetAnim
(1) 2176/     F54 :                     ;
(1) 2177/     F54 :                     ; Call this to reset animation
(1) 2178/     F54 :                     ;
(1) 2179/     F54 :                     ; Input:
(1) 2180/     F54 :                     ; a6 | This object
(1) 2181/     F54 :                     ; --------------------------------------------------------
(1) 2182/     F54 :                     
(1) 2183/     F54 :                     object_ResetAnim:
(1) 2184/     F54 : 426E 001A            		clr.w	obj_anim_indx(a6)
(1) 2185/     F58 : 422E 0020            		clr.b	obj_anim_spd(a6)
(1) 2186/     F5C : 1D7C 0000 001F      		move.b	#0,obj_anim_icur(a6)
(1) 2187/     F62 : 4E75                		rts
(1) 2188/     F64 :                     
(1) 2189/     F64 :                     ; --------------------------------------------------------
(1) 2190/     F64 :                     ; object_Speed
(1) 2191/     F64 :                     ;
(1) 2192/     F64 :                     ; Moves the object using speed variables
(1) 2193/     F64 :                     ;
(1) 2194/     F64 :                     ; Input:
(1) 2195/     F64 :                     ; a6 | This object
(1) 2196/     F64 :                     ;
(1) 2197/     F64 :                     ; Breaks:
(1) 2198/     F64 :                     ; d7
(1) 2199/     F64 :                     ; --------------------------------------------------------
(1) 2200/     F64 :                     
(1) 2201/     F64 :                     object_Speed:
(1) 2202/     F64 : 2F07                		move.l	d7,-(sp)
(1) 2203/     F66 : 7E00                		moveq	#0,d7
(1) 2204/     F68 : 3E2E 0016           		move.w	obj_x_spd(a6),d7
(1) 2205/     F6C : 48C7                		ext.l	d7
(1) 2206/     F6E : E187                		asl.l	#8,d7
(1) 2207/     F70 : DFAE 0004           		add.l	d7,obj_x(a6)
(1) 2208/     F74 : 7E00                		moveq	#0,d7
(1) 2209/     F76 : 3E2E 0018           		move.w	obj_y_spd(a6),d7
(1) 2210/     F7A : 48C7                		ext.l	d7
(1) 2211/     F7C : E187                		asl.l	#8,d7
(1) 2212/     F7E : DFAE 0008           		add.l	d7,obj_y(a6)
(1) 2213/     F82 : 2E1F                		move.l	(sp)+,d7
(1) 2214/     F84 : 4E75                		rts
(1) 2215/     F86 :                     
(1) 2216/     F86 :                     ; --------------------------------------------------------
(1) 2217/     F86 :                     ; object_Collision
(1) 2218/     F86 :                     ;
(1) 2219/     F86 :                     ; Detects collision with another Object from
(1) 2220/     F86 :                     ; the list TOP to BOTTOM
(1) 2221/     F86 :                     ; Reads ALL objects except the one that called this.
(1) 2222/     F86 :                     ;
(1) 2223/     F86 :                     ; Input:
(1) 2224/     F86 :                     ; a6 | Object
(1) 2225/     F86 :                     ;
(1) 2226/     F86 :                     ; Returns:
(1) 2227/     F86 :                     ; d0 | If Nothing: Zero
(1) 2228/     F86 :                     ;      If Found: The object's RAM location it got.
(1) 2229/     F86 :                     ;
(1) 2230/     F86 :                     ; Breaks:
(1) 2231/     F86 :                     ; d1-d7,a5
(1) 2232/     F86 :                     ; --------------------------------------------------------
(1) 2233/     F86 :                     
(1) 2234/     F86 :                     object_Collision:
(1) 2235/     F86 : 48E7 7F04           		movem.l	d1-d7/a5,-(sp)
(1) 2236/     F8A : 4BF8 AD94           		lea	(RAM_Objects).w,a5
(1) 2237/     F8E : 7E17                		moveq	#MAX_MDOBJ-1,d7
(1) 2238/     F90 :                     .next:
(1) 2239/     F90 : BBCE                		cmp.l	a6,a5		; If reading THIS object, skip
(1) 2240/     F92 : 670A                		beq.s	.skip
(1) 2241/     F94 : 4A95                		tst.l	obj_code(a5)	; This object has code?
(1) 2242/     F96 : 6706                		beq.s	.skip
(1) 2243/     F98 : 6114                		bsr.s	.check_this
(1) 2244/     F9A : 4A40                		tst.w	d0
(1) 2245/     F9C : 660A                		bne.s	.exit_this	; Exit if Found already.
(1) 2246/     F9E : DAFC 0066           .skip:		adda	#sizeof_mdobj,a5
(1) 2247/     FA2 : 51CF FFEC           		dbf	d7,.next
(1) 2248/     FA6 : 7000                		moveq	#0,d0
(1) 2249/     FA8 :                     .exit_this:
(1) 2250/     FA8 : 4CDF 20FE           		movem.l	(sp)+,d1-d7/a5
(1) 2251/     FAC : 4E75                		rts
(1) 2252/     FAE :                     .check_this:
(1) 2253/     FAE : 7000                		moveq	#0,d0			; Reset Return
(1) 2254/     FB0 :                     	; d6 - Y current top
(1) 2255/     FB0 :                     	; d5 - Y current bottom
(1) 2256/     FB0 :                     	; d4 - Y target top
(1) 2257/     FB0 :                     	; d3 - Y target bottom
(1) 2258/     FB0 : 3C2E 0008           		move.w	obj_y(a6),d6		; d6 - Up point
(1) 2259/     FB4 : 3A06                		move.w	d6,d5			; d5 - Down point
(1) 2260/     FB6 : 322E 0010           		move.w	obj_size(a6),d1		; $UDxx
(1) 2261/     FBA : 3401                		move.w	d1,d2
(1) 2262/     FBC : E049                		lsr.w	#8,d1			; d1 - Up size
(1) 2263/     FBE : 0242 00FF           		andi.w	#$FF,d2			; d2 - Down size
(1) 2264/     FC2 : E749                		lsl.w	#3,d1
(1) 2265/     FC4 : E74A                		lsl.w	#3,d2
(1) 2266/     FC6 : 9C41                		sub.w	d1,d6
(1) 2267/     FC8 : DA42                		add.w	d2,d5
(1) 2268/     FCA : 382D 0008           		move.w	obj_y(a5),d4		; d4 - Up point
(1) 2269/     FCE : 3604                		move.w	d4,d3			; d3 - Down point
(1) 2270/     FD0 : 322D 0010           		move.w	obj_size(a5),d1		; $UDxx
(1) 2271/     FD4 : 3401                		move.w	d1,d2
(1) 2272/     FD6 : E049                		lsr.w	#8,d1			; d1 - Up size
(1) 2273/     FD8 : 0242 00FF           		andi.w	#$FF,d2			; d2 - Down size
(1) 2274/     FDC : E749                		lsl.w	#3,d1
(1) 2275/     FDE : E74A                		lsl.w	#3,d2
(1) 2276/     FE0 : 9841                		sub.w	d1,d4
(1) 2277/     FE2 : D642                		add.w	d2,d3
(1) 2278/     FE4 : B646                		cmp.w	d6,d3			; Target's YB > Our YT?
(1) 2279/     FE6 : 6D42                		blt.s	.not_ytop
(1) 2280/     FE8 : B845                		cmp.w	d5,d4			; Target's YT > Our YB?
(1) 2281/     FEA : 6C3E                		bge.s	.not_ytop
(1) 2282/     FEC :                     	; Now check X
(1) 2283/     FEC : 3C2E 0004           		move.w	obj_x(a6),d6		; d6 - Left point
(1) 2284/     FF0 : 3A06                		move.w	d6,d5			; d5 - Right point
(1) 2285/     FF2 : 322E 0012           		move.w	obj_size+2(a6),d1	; $xxLR
(1) 2286/     FF6 : 3401                		move.w	d1,d2
(1) 2287/     FF8 : E049                		lsr.w	#8,d1			; d1 - Left size
(1) 2288/     FFA : 0242 00FF           		andi.w	#$FF,d2			; d2 - Right size
(1) 2289/     FFE : E749                		lsl.w	#3,d1
(1) 2290/    1000 : E74A                		lsl.w	#3,d2
(1) 2291/    1002 : 9C41                		sub.w	d1,d6
(1) 2292/    1004 : DA42                		add.w	d2,d5
(1) 2293/    1006 : 382D 0004           		move.w	obj_x(a5),d4		; d4 - Left point
(1) 2294/    100A : 3604                		move.w	d4,d3			; d3 - Right point
(1) 2295/    100C : 322D 0012           		move.w	obj_size+2(a5),d1	; $UDxx
(1) 2296/    1010 : 3401                		move.w	d1,d2
(1) 2297/    1012 : E049                		lsr.w	#8,d1			; d1 - Left size
(1) 2298/    1014 : 0242 00FF           		andi.w	#$FF,d2			; d2 - Right size
(1) 2299/    1018 : E749                		lsl.w	#3,d1
(1) 2300/    101A : E74A                		lsl.w	#3,d2
(1) 2301/    101C : 9841                		sub.w	d1,d4
(1) 2302/    101E : D642                		add.w	d2,d3
(1) 2303/    1020 : B646                		cmp.w	d6,d3
(1) 2304/    1022 : 6D06                		blt.s	.not_ytop
(1) 2305/    1024 : B845                		cmp.w	d5,d4
(1) 2306/    1026 : 6C02                		bge.s	.not_ytop
(1) 2307/    1028 : 200D                		move.l	a5,d0		; FOUND OBJECT
(1) 2308/    102A :                     .not_ytop:
(1) 2309/    102A : 4E75                		rts
(1) 2310/    102C :                     
(1) 2311/    102C :                     ; ====================================================================
(1) 2312/    102C :                     ; ----------------------------------------------------------------
(1) 2313/    102C :                     ; 32X ONLY
(1) 2314/    102C :                     ; ----------------------------------------------------------------
(1) 2315/    102C :                     
(1) 2393/    102C :                     
     193/    102C :                     		include	"system/md/system.asm"
(1)    1/    102C :                     ; ===========================================================================
(1)    2/    102C :                     ; ----------------------------------------------------------------
(1)    3/    102C :                     ; Genesis system routines, including SCD and 32X
(1)    4/    102C :                     ; ----------------------------------------------------------------
(1)    5/    102C :                     
(1)    6/    102C :                     ; ** CAN BE RECYCLED FOR SEGA PICO, ONLY IGNORE Z80 ACCESS OR
(1)    7/    102C :                     ; THE CONTROL ROUTINE **
(1)    8/    102C :                     
(1)    9/    102C :                     ; ===================================================================
(1)   10/    102C :                     ; --------------------------------------------------------
(1)   11/    102C :                     ; Settings
(1)   12/    102C :                     ; --------------------------------------------------------
(1)   13/    102C :                     
(1)   14/    102C : =$400                MAX_SRAMSIZE	equ $400
(1)   15/    102C : ="SAVE"              TAG_SRAMDATA	equ "SAVE"	; 4-letter savefile signature
(1)   16/    102C :                     
(1)   17/    102C :                     ; ===================================================================
(1)   18/    102C :                     ; --------------------------------------------------------
(1)   19/    102C :                     ; Variables
(1)   20/    102C :                     ; --------------------------------------------------------
(1)   21/    102C :                     
(1)   22/    102C :                     ; ------------------------------------------------
(1)   23/    102C :                     ; Controller buffer data
(1)   24/    102C :                     ;
(1)   25/    102C :                     ; MUST call System_Input on VBlank.
(1)   26/    102C :                     ; ------------------------------------------------
(1)   27/    102C :                     
(1)   28/    102C :                     ; ------------------------------------------------
(1)   29/    102C :                     ; pad_id
(1)   30/    102C :                     ;
(1)   31/    102C :                     ; JoyID_MD:
(1)   32/    102C :                     ; Read pad_ver separately to check if controller
(1)   33/    102C :                     ; is 3button(0) or 6button(1)
(1)   34/    102C :                     ; ------------------------------------------------
(1)   35/    102C :                     
(1)   36/    102C : =$3                  JoyID_Mouse	equ $03
(1)   37/    102C : =$D                  JoyID_MD	equ $0D
(1)   38/    102C : =$F                  JoyID_MS	equ $0F		; <-- Disconnected too.
(1)   39/    102C :                     
(1)   40/    102C :                     ; ------------------------------------------------
(1)   41/    102C :                     ; on_hold or on_press
(1)   42/    102C :                     ;
(1)   43/    102C :                     ; Read these as WORD
(1)   44/    102C :                     ;
(1)   45/    102C :                     ; Don't do btst directly, read as dX
(1)   46/    102C :                     ; and do btst on register.
(1)   47/    102C :                     ; ------------------------------------------------
(1)   48/    102C :                     
(1)   49/    102C : =$1                  JoyUp		equ $0001
(1)   50/    102C : =$2                  JoyDown		equ $0002
(1)   51/    102C : =$4                  JoyLeft		equ $0004
(1)   52/    102C : =$8                  JoyRight	equ $0008
(1)   53/    102C : =$10                 JoyB		equ $0010
(1)   54/    102C : =$20                 JoyC		equ $0020
(1)   55/    102C : =$40                 JoyA		equ $0040
(1)   56/    102C : =$80                 JoyStart	equ $0080
(1)   57/    102C : =$100                JoyZ		equ $0100
(1)   58/    102C : =$200                JoyY		equ $0200
(1)   59/    102C : =$400                JoyX		equ $0400
(1)   60/    102C : =$800                JoyMode		equ $0800
(1)   61/    102C : =$0                  bitJoyUp	equ 0
(1)   62/    102C : =$1                  bitJoyDown	equ 1
(1)   63/    102C : =$2                  bitJoyLeft	equ 2
(1)   64/    102C : =$3                  bitJoyRight	equ 3
(1)   65/    102C : =$4                  bitJoyB		equ 4
(1)   66/    102C : =$5                  bitJoyC		equ 5
(1)   67/    102C : =$6                  bitJoyA		equ 6
(1)   68/    102C : =$7                  bitJoyStart	equ 7
(1)   69/    102C : =$8                  bitJoyZ		equ 8
(1)   70/    102C : =$9                  bitJoyY		equ 9
(1)   71/    102C : =$A                  bitJoyX		equ 10
(1)   72/    102C : =$B                  bitJoyMode	equ 11
(1)   73/    102C :                     
(1)   74/    102C :                     ; ------------------------------------------------
(1)   75/    102C :                     ; Mega Mouse ONLY
(1)   76/    102C :                     ; ------------------------------------------------
(1)   77/    102C :                     
(1)   78/    102C : =$1                  ClickR		equ $0001
(1)   79/    102C : =$2                  ClickL		equ $0002
(1)   80/    102C : =$4                  ClickM		equ $0004	; US MOUSE ONLY
(1)   81/    102C : =$8                  ClickS		equ $0008	; (Untested)
(1)   82/    102C : =$0                  bitClickL	equ 0
(1)   83/    102C : =$1                  bitClickR	equ 1
(1)   84/    102C : =$2                  bitClickM	equ 2
(1)   85/    102C : =$3                  bitClickS	equ 3
(1)   86/    102C :                     
(1)   87/    102C :                     ; ------------------------------------------------
(1)   88/    102C :                     ; Controller_1 / Controller_2
(1)   89/    102C :                     ; ------------------------------------------------
(1)   90/    102C :                     
(1)   91/    102C : (MACRO)              		strct 0
(1)   91/    102C : =$102C               GLBL_LASTPC     set *
(1)   91/FFFFFFFFFFFFACA4 :                                     dephase
(1)   91/       0 :                                     phase 0
(1)   91/       0 : =$0                  GLBL_LASTORG    set *
(1)   92/       0 :                     pad_id		ds.b 1			; Controller ID
(1)   93/       1 :                     pad_ver		ds.b 1			; Controller type/revision
(1)   94/       2 :                     on_hold		ds.w 1			; User HOLD bits
(1)   95/       4 :                     on_press	ds.w 1			; User PRESSED bits
(1)   96/       6 :                     on_release	ds.w 1			; (RESERVED)
(1)   97/       8 :                     mouse_x		ds.w 1			; Mouse/Pen X speed
(1)   98/       A :                     mouse_y		ds.w 1			; Mouse/pen Y speed
(1)   99/       C :                     ext_3		ds.w 1
(1)  100/       E :                     ext_4		ds.w 1
(1)  101/      10 :                     sizeof_input	ds.l 0
(1)  102/      10 : (MACRO)              		endstrct
(1)  102/       0 :                                     org GLBL_LASTORG
(1)  102/    102C :                                     phase GLBL_LASTPC
(1)  103/    102C :                     
(1)  104/    102C :                     ; ====================================================================
(1)  105/    102C :                     ; --------------------------------------------------------
(1)  106/    102C :                     ; RAM section
(1)  107/    102C :                     ; --------------------------------------------------------
(1)  108/    102C :                     
(1)  109/    102C : (MACRO)              		strct RAM_MdSystem
(1)  109/    102C : =$102C               GLBL_LASTPC     set *
(1)  109/       0 :                                     dephase
(1)  109/FFFFFFFFFFFFC004 :                                     phase RAM_MDSYSTEM
(1)  109/FFFFFFFFFFFFC004 : =$FFFFFFFFFFFFC004   GLBL_LASTORG    set *
(1)  110/FFFFFFFFFFFFC004 :                     RAM_InputData	ds.b sizeof_input*4		; Input data section
(1)  111/FFFFFFFFFFFFC044 :                     RAM_SaveData	ds.b MAX_SRAMSIZE		; Read/Write of the SAVE data
(1)  112/FFFFFFFFFFFFC444 :                     RAM_SysRandVal	ds.l 1				; Random value
(1)  113/FFFFFFFFFFFFC448 :                     RAM_SysRandSeed	ds.l 1				; Randomness seed
(1)  114/FFFFFFFFFFFFC44C :                     RAM_MdMarsVInt	ds.w 3				; VBlank jump (JMP xxxx xxxx)
(1)  115/FFFFFFFFFFFFC452 :                     RAM_MdMarsHint	ds.w 3				; HBlank jump (JMP xxxx xxxx)
(1)  116/FFFFFFFFFFFFC458 :                     RAM_ScreenMode	ds.w 1
(1)  117/FFFFFFFFFFFFC45A :                     sizeof_mdsys	ds.l 0
(1)  118/FFFFFFFFFFFFC460 : (MACRO)              		endstrct
(1)  118/FFFFFFFFFFFFC004 :                                     org GLBL_LASTORG
(1)  118/    102C :                                     phase GLBL_LASTPC
(1)  119/    102C : (MACRO)              		erreport "MD SYSTEM RAM",sizeof_mdsys-RAM_MdSystem,MAX_MdSystem
(1)  120/    102C :                     
(1)  121/    102C :                     ; ====================================================================
(1)  122/    102C :                     ; --------------------------------------------------------
(1)  123/    102C :                     ; Aliases labels
(1)  124/    102C :                     ; --------------------------------------------------------
(1)  125/    102C :                     
(1)  126/    102C : =$FFFFFFFFFFFFC004   Controller_1	equ RAM_InputData
(1)  127/    102C : =$FFFFFFFFFFFFC014   Controller_2	equ RAM_InputData+sizeof_input
(1)  128/    102C :                     
(1)  129/    102C :                     ; ====================================================================
(1)  130/    102C :                     ; --------------------------------------------------------
(1)  131/    102C :                     ; Init System
(1)  132/    102C :                     ; 
(1)  133/    102C :                     ; Uses:
(1)  134/    102C :                     ; a0-a2,d0-d1
(1)  135/    102C :                     ; --------------------------------------------------------
(1)  136/    102C :                     
(1)  137/    102C :                     System_Init:
(1)  138/    102C : 007C 0700           		or.w	#$0700,sr
(1)  150/    1030 : 303C 4EF9           		move.w	#$4EF9,d0		; Set JMP opcode for the Hblank/VBlank jumps
(1)  151/    1034 : 31C0 C44C            		move.w	d0,(RAM_MdMarsVInt).w
(1)  152/    1038 : 31C0 C452           		move.w	d0,(RAM_MdMarsHInt).w
(1)  153/    103C : 203C 0000 12F4      		move.l	#VInt_Default,d0	; Set default interrupt jumps
(1)  154/    1042 : 223C 0000 130A      		move.l	#Hint_Default,d1
(1)  155/    1048 : 6100 025A           		bsr	System_SetInts
(1)  156/    104C : 41F8 C004           		lea	(RAM_InputData).w,a0	; Clear input data buffer
(1)  157/    1050 : 323C 0007           		move.w	#(sizeof_input/2)-1,d1
(1)  158/    1054 : 7000                		moveq	#0,d0
(1)  159/    1056 :                     .clrinput:
(1)  160/    1056 : 30C0                		move.w	d0,(a0)+
(1)  161/    1058 : 51C9 FFFC           		dbf	d1,.clrinput
(1)  162/    105C : 203C 5625 5769      		move.l	#$56255769,d0		; Set these random values
(1)  163/    1062 : 223C 9511 6102      		move.l	#$95116102,d1
(1)  164/    1068 : 23C0 FFFF C444      		move.l	d0,(RAM_SysRandVal).l
(1)  165/    106E : 23C1 FFFF C448      		move.l	d1,(RAM_SysRandSeed).l
(1)  166/    1074 : 027C F8FF           		andi.w	#$F8FF,sr
(1)  167/    1078 : 6000 023C           		bra	System_SramInit
(1)  168/    107C :                     
(1)  169/    107C :                     ; --------------------------------------------------------
(1)  170/    107C :                     ; System_Render
(1)  171/    107C :                     ;
(1)  172/    107C :                     ; Call this on the loop your current screen.
(1)  173/    107C :                     ; ** VDP DISPLAY MUST BE ON TO USE THIS **
(1)  174/    107C :                     ;
(1)  175/    107C :                     ; This will:
(1)  176/    107C :                     ; - Update the sound driver for any changes that
(1)  177/    107C :                     ;   need communication with 68K
(1)  178/    107C :                     ; - Build the object sprites
(1)  179/    107C :                     ; - 32X/CD32X:
(1)  180/    107C :                     ;   Update the DREQ data
(1)  181/    107C :                     ;
(1)  182/    107C :                     ; On VBLANK:
(1)  183/    107C :                     ; - Update the input data
(1)  184/    107C :                     ; - Transfer the Genesis palette, sprites and scroll
(1)  185/    107C :                     ;   data from from RAM to VDP
(1)  186/    107C :                     ;   (32X: RV bit is not required.)
(1)  187/    107C :                     ; - Process the DMA BLAST list (32X: Uses RV bit)
(1)  188/    107C :                     ; --------------------------------------------------------
(1)  189/    107C :                     
(1)  190/    107C :                     System_Render:
(1)  191/    107C : 1E38 B8F9           		move.b	(RAM_VdpRegs+1).w,d7		; ** If the user forgets to enable
(1)  192/    1080 : 0807 0006           		btst	#bitDispEnbl,d7			; ** DISPLAY skip all of this
(1)  193/    1084 : 6736                		beq.s	.forgot_disp			; **
(1)  194/    1086 :                     .wait_lag:
(1)  195/    1086 : 6100 F1FA           		bsr	Sound_Update			; Syncronize/Update sound on lag
(1)  196/    108A : 3E39 00C0 0004      		move.w	(vdp_ctrl).l,d7			; Got here during VBlank?
(1)  197/    1090 : 0807 0003           		btst	#bitVBlk,d7			; If yes, drop frame and wait
(1)  198/    1094 : 66F0                		bne.s	.wait_lag
(1)  199/    1096 : 6100 F1EA           		bsr	Sound_Update			; Update sound
(1)  200/    109A : 6100 FC7C           		bsr	Objects_Show			; Build sprite data from Objects
(1)  204/    109E :                     .wait_in:
(1)  205/    109E : 6100 F1E2           		bsr	Sound_Update			; Syncronize/Update sound during Display
(1)  206/    10A2 : 3E39 00C0 0004      		move.w	(vdp_ctrl).l,d7
(1)  207/    10A8 : 0807 0003           		btst	#bitVBlk,d7			; VBlank started?
(1)  208/    10AC : 67F0                		beq.s	.wait_in
(1)  209/    10AE :                     .lost_frame:
(1)  210/    10AE : 6122                		bsr	System_Input			; Read input data FIRST
(1)  211/    10B0 : 6100 F83E           		bsr	Video_Render			; Render visuals
(1)  212/    10B4 : 6100 F1CC           		bsr	Sound_Update			; Update sound
(1)  213/    10B8 : 52B8 B8D4           		addq.l	#1,(RAM_Framecount).w		; Count the frame.
(1)  214/    10BC :                     
(1)  215/    10BC :                     .forgot_disp:
(1)  216/    10BC : 4E75                		rts
(1)  217/    10BE :                     
(1)  218/    10BE :                     ; ====================================================================
(1)  219/    10BE :                     ; --------------------------------------------------------
(1)  220/    10BE :                     ; System_DmaEnter_(from) and System_DmaEnter_(from)
(1)  221/    10BE :                     ; from ROM or RAM
(1)  222/    10BE :                     ;
(1)  223/    10BE :                     ; Call to these labels BEFORE and AFTER
(1)  224/    10BE :                     ; DMA-to-VDP transers, these calls are NOT
(1)  225/    10BE :                     ; required for FILL or COPY
(1)  226/    10BE :                     ;
(1)  227/    10BE :                     ; This is where you put your Sound driver's Z80 stop
(1)  228/    10BE :                     ; or pause calls here.
(1)  229/    10BE :                     ; --------------------------------------------------------
(1)  230/    10BE :                     
(1)  231/    10BE :                     System_DmaEnter_RAM:
(1)  232/    10BE : 6000 F226           		bra	gemaDmaPause
(1)  233/    10C2 :                     System_DmaExit_RAM:
(1)  234/    10C2 : 6000 F224           		bra	gemaDmaResume
(1)  235/    10C6 :                     
(1)  236/    10C6 :                     ; --------------------------------------------------------
(1)  237/    10C6 :                     ; *** THESE ENABLE AND DISABLE THE RV BIT ***
(1)  238/    10C6 :                     
(1)  239/    10C6 :                     System_DmaEnter_ROM:
(1)  240/    10C6 : 6100 F21E           		bsr	gemaDmaPause
(1)  244/    10CA : 4E75                		rts
(1)  245/    10CC :                     
(1)  246/    10CC :                     System_DmaExit_ROM:
(1)  247/    10CC : 6100 F21A           		bsr	gemaDmaResume
(1)  251/    10D0 : 4E75                		rts
(1)  252/    10D2 :                     
(1)  253/    10D2 :                     ; ====================================================================
(1)  254/    10D2 :                     ; ----------------------------------------------------------------
(1)  255/    10D2 :                     ; Subroutines
(1)  256/    10D2 :                     ; ----------------------------------------------------------------
(1)  257/    10D2 :                     
(1)  258/    10D2 :                     ; --------------------------------------------------------
(1)  259/    10D2 :                     ; System_Input
(1)  260/    10D2 :                     ;
(1)  261/    10D2 :                     ; Reads data from the Controller ports
(1)  262/    10D2 :                     ; *** CALL THIS ON VBLANK ONLY ***
(1)  263/    10D2 :                     ;
(1)  264/    10D2 :                     ; Uses:
(1)  265/    10D2 :                     ; d5-d7,a5-a6
(1)  266/    10D2 :                     ; --------------------------------------------------------
(1)  267/    10D2 :                     
(1)  268/    10D2 :                     ; ----------------------------------------
(1)  269/    10D2 :                     ; PICO input is hard-coded to
(1)  270/    10D2 :                     ; Controller_1
(1)  271/    10D2 :                     ;
(1)  272/    10D2 :                     ; on_hold/on_press:
(1)  273/    10D2 :                     ; %P00BRLDU
(1)  274/    10D2 :                     ; UDLR - Arrows
(1)  275/    10D2 :                     ;    B - BIG button red
(1)  276/    10D2 :                     ;    P - Pen press/click
(1)  277/    10D2 :                     ;
(1)  278/    10D2 :                     ; mouse_x/mouse_y:
(1)  279/    10D2 :                     ; Pen X/Y position
(1)  280/    10D2 :                     ; ----------------------------------------
(1)  281/    10D2 :                     
(1)  282/    10D2 :                     System_Input:
(1)  283/    10D2 :                     
(1)  285/    10D2 : 4DF8 C004           		lea	(RAM_InputData).w,a6
(1)  286/    10D6 : 4BF9 0080 0003      		lea	($800003).l,a5
(1)  287/    10DC : 7E00                		moveq	#0,d7
(1)  288/    10DE : 1E15                		move.b	(a5),d7		; $800003: %P00RLDU
(1)  289/    10E0 : 0A47 00FF           		eori.w	#$FF,d7
(1)  290/    10E4 : 3C07                		move.w	d7,d6
(1)  291/    10E6 :                     ; 		move.b	on_release(a6),d2
(1)  292/    10E6 :                     ; 		eor.b	d2,d7
(1)  293/    10E6 :                     ; 		and.b	d2,d7
(1)  294/    10E6 :                     ; 		move.b	d7,on_release(a6)
(1)  295/    10E6 : 3A2E 0002           		move.w	on_hold(a6),d5
(1)  296/    10EA : 0A45 00FF           		eori.w	#$FF,d5
(1)  297/    10EE : CA46                		and.w	d6,d5
(1)  298/    10F0 : 3D45 0004           		move.w	d5,on_press(a6)
(1)  299/    10F4 : 3D46 0002           		move.w	d6,on_hold(a6)
(1)  300/    10F8 : 1E2D 0002           		move.b	2(a5),d7
(1)  301/    10FC : E14F                		lsl.w	#8,d7
(1)  302/    10FE : 1E2D 0004           		move.b	4(a5),d7
(1)  303/    1102 : 9E7C 003C           		sub.w	#$3C,d7
(1)  304/    1106 : 6A02                		bpl.s	.x_valid	 ; <-- Failsafe negative X
(1)  305/    1108 : 4247                		clr.w	d7
(1)  306/    110A :                     .x_valid:
(1)  307/    110A : 3D47 0008           		move.w	d7,mouse_x(a6)
(1)  308/    110E :                     	; $0000-$00EF - Tablet
(1)  309/    110E :                     	; $0100-$01EF - Storyware
(1)  310/    110E : 7E00                		moveq	#0,d7
(1)  311/    1110 : 1C2D 0006           		move.b	6(a5),d6
(1)  312/    1114 : E14E                		lsl.w	#8,d6
(1)  313/    1116 : 1C2D 0008           		move.b	8(a5),d6
(1)  314/    111A : 0446 01FC           		subi.w	#$1FC,d6
(1)  315/    111E : 6B02                		bmi.s	.bad_y
(1)  316/    1120 : 3E06                		move.w	d6,d7
(1)  317/    1122 :                     .bad_y:
(1)  318/    1122 : 3D47 000A           		move.w	d7,mouse_y(a6)
(1)  319/    1126 : 1C2D 000A           		move.b	10(a5),d6
(1)  320/    112A : 7E00                		moveq	#0,d7
(1)  321/    112C : 7A05                		moveq	#6-1,d5		; 6 pages
(1)  322/    112E :                     .page_it:
(1)  323/    112E : E24E                		lsr.w	#1,d6
(1)  324/    1130 : 6402                		bcc.s	.no_bit
(1)  325/    1132 : 5247                		addq.w	#1,d7
(1)  326/    1134 :                     .no_bit:
(1)  327/    1134 : 51CD FFF8           		dbf	d5,.page_it
(1)  328/    1138 : 1D47 000C           		move.b	d7,ext_3(a6)
(1)  535/    113C :                     
(1)  536/    113C :                     ; --------------------------------------------------------
(1)  537/    113C :                     ; System_Random
(1)  538/    113C :                     ;
(1)  539/    113C :                     ; Makes a random number.
(1)  540/    113C :                     ;
(1)  541/    113C :                     ; Returns:
(1)  542/    113C :                     ; d0.l | Result value
(1)  543/    113C :                     ;
(1)  544/    113C :                     ; Uses:
(1)  545/    113C :                     ; d4
(1)  546/    113C :                     ; --------------------------------------------------------
(1)  547/    113C :                     
(1)  548/    113C :                     System_Random:
(1)  549/    113C : 2F04                		move.l	d4,-(sp)
(1)  550/    113E : 2838 C448           		move.l	(RAM_SysRandSeed).w,d4
(1)  551/    1142 : 6606                		bne.s	.good_s
(1)  552/    1144 : 283C 23B5 1947      		move.l	#$23B51947,d4
(1)  553/    114A :                     .good_s:
(1)  554/    114A : 2004                		move.l	d4,d0
(1)  555/    114C : EB9C                		rol.l	#5,d4
(1)  556/    114E : D880                		add.l	d0,d4
(1)  557/    1150 : E644                		asr.w	#3,d4
(1)  558/    1152 : D880                		add.l	d0,d4
(1)  559/    1154 : 3004                		move.w	d4,d0
(1)  560/    1156 : 4844                		swap	d4
(1)  561/    1158 : D044                		add.w	d4,d0
(1)  562/    115A : 3800                		move.w	d0,d4
(1)  563/    115C : 4844                		swap	d4
(1)  564/    115E : 21C4 C448           		move.l	d4,(RAM_SysRandSeed).w
(1)  565/    1162 : 281F                		move.l	(sp)+,d4
(1)  566/    1164 : 4E75                		rts
(1)  567/    1166 :                     
(1)  568/    1166 :                     ; --------------------------------------------------------
(1)  569/    1166 :                     ; System_SineWave, System_SineWave_Cos
(1)  570/    1166 :                     ;
(1)  571/    1166 :                     ; Get sine or cosine value
(1)  572/    1166 :                     ;
(1)  573/    1166 :                     ; Input:
(1)  574/    1166 :                     ; d0.w | Tan value
(1)  575/    1166 :                     ; d1.w | Multiply by
(1)  576/    1166 :                     ;
(1)  577/    1166 :                     ; Returns:
(1)  578/    1166 :                     ; d2.l | Result as $0000.0000
(1)  579/    1166 :                     ; --------------------------------------------------------
(1)  580/    1166 :                     
(1)  581/    1166 :                     System_SineWave_Cos:
(1)  582/    1166 : 48A7 8000           		movem.w	d0,-(sp)
(1)  583/    116A : 7400                		moveq	#0,d2
(1)  584/    116C : 0600 0040           		addi.b	#$40,d0
(1)  585/    1170 : 1400                		move.b	d0,d2
(1)  586/    1172 : E302                		asl.b	#1,d2
(1)  587/    1174 : 343B 202E           		move.w	MdSys_SineData(pc,d2.w),d2
(1)  588/    1178 : C4C1                		mulu.w	d1,d2
(1)  589/    117A : 8000                		or.b	d0,d0
(1)  590/    117C : 6A02                		bpl.s	.dont_neg
(1)  591/    117E : 4482                		neg.l	d2
(1)  592/    1180 :                     .dont_neg:
(1)  593/    1180 : 4C9F 0001           		movem.w	(sp)+,d0
(1)  594/    1184 : 4E75                		rts
(1)  595/    1186 :                     
(1)  596/    1186 :                     System_SineWave:
(1)  597/    1186 : 48A7 8000           		movem.w	d0,-(sp)
(1)  598/    118A : 0240 007F           		andi.w	#$7F,d0
(1)  599/    118E : E340                		asl.w	#1,d0
(1)  600/    1190 : 343B 0012           		move.w	MdSys_SineData(pc,d0.w),d2
(1)  601/    1194 : C4C1                		mulu.w	d1,d2
(1)  602/    1196 : 4C9F 0001           		movem.w	(sp)+,d0
(1)  603/    119A : 5182                		subq.l	#8,d2
(1)  604/    119C : 8000                		or.b	d0,d0
(1)  605/    119E : 6A02                		bpl.s	.dont_neg
(1)  606/    11A0 : 4482                		neg.l	d2
(1)  607/    11A2 :                     .dont_neg:
(1)  608/    11A2 : 4E75                		rts
(1)  609/    11A4 :                     
(1)  610/    11A4 : 0000 0006 000D      MdSys_SineData:	dc.w 0,	6, $D, $13, $19, $1F, $26, $2C,	$32, $38, $3E
             11AA : 0013 0019 001F 
             11B0 : 0026 002C 0032 
             11B6 : 0038 003E          
(1)  611/    11BA : 0044 004A 0050      		dc.w $44, $4A, $50, $56, $5C, $62, $68,	$6D, $73, $79
             11C0 : 0056 005C 0062 
             11C6 : 0068 006D 0073 
             11CC : 0079             
(1)  612/    11CE : 007E 0084 0089      		dc.w $7E, $84, $89, $8E, $93, $98, $9D,	$A2, $A7, $AC
             11D4 : 008E 0093 0098 
             11DA : 009D 00A2 00A7 
             11E0 : 00AC             
(1)  613/    11E2 : 00B1 00B5 00B9      		dc.w $B1, $B5, $B9, $BE, $C2, $C6, $CA,	$CE, $D1, $D5
             11E8 : 00BE 00C2 00C6 
             11EE : 00CA 00CE 00D1 
             11F4 : 00D5             
(1)  614/    11F6 : 00D8 00DC 00DF      		dc.w $D8, $DC, $DF, $E2, $E5, $E7, $EA,	$ED, $EF, $F1
             11FC : 00E2 00E5 00E7 
             1202 : 00EA 00ED 00EF 
             1208 : 00F1             
(1)  615/    120A : 00F3 00F5 00F7      		dc.w $F3, $F5, $F7, $F8, $FA, $FB, $FC,	$FD, $FE, $FF
             1210 : 00F8 00FA 00FB 
             1216 : 00FC 00FD 00FE 
             121C : 00FF             
(1)  616/    121E : 00FF 0100 0100      		dc.w $FF, $100,	$100, $100, $100, $100,	$FF, $FF, $FE
             1224 : 0100 0100 0100 
             122A : 00FF 00FF 00FE    
(1)  617/    1230 : 00FD 00FC 00FB      		dc.w $FD, $FC, $FB, $FA, $F8, $F7, $F5,	$F3, $F1, $EF
             1236 : 00FA 00F8 00F7 
             123C : 00F5 00F3 00F1 
             1242 : 00EF             
(1)  618/    1244 : 00ED 00EA 00E7      		dc.w $ED, $EA, $E7, $E5, $E2, $DF, $DC,	$D8, $D5, $D1
             124A : 00E5 00E2 00DF 
             1250 : 00DC 00D8 00D5 
             1256 : 00D1             
(1)  619/    1258 : 00CE 00CA 00C6      		dc.w $CE, $CA, $C6, $C2, $BE, $B9, $B5,	$B1, $AC, $A7
             125E : 00C2 00BE 00B9 
             1264 : 00B5 00B1 00AC 
             126A : 00A7             
(1)  620/    126C : 00A2 009D 0098      		dc.w $A2, $9D, $98, $93, $8E, $89, $84,	$7E, $79, $73
             1272 : 0093 008E 0089 
             1278 : 0084 007E 0079 
             127E : 0073             
(1)  621/    1280 : 006D 0068 0062      		dc.w $6D, $68, $62, $5C, $56, $50, $4A,	$44, $3E, $38
             1286 : 005C 0056 0050 
             128C : 004A 0044 003E 
             1292 : 0038             
(1)  622/    1294 : 0032 002C 0026      		dc.w $32, $2C, $26, $1F, $19, $13, $D, 6
             129A : 001F 0019 0013 
             12A0 : 000D 0006          
(1)  623/    12A4 :                     
(1)  624/    12A4 :                     ; --------------------------------------------------------
(1)  625/    12A4 :                     ; System_SetInts
(1)  626/    12A4 :                     ;
(1)  627/    12A4 :                     ; Set new interrputs
(1)  628/    12A4 :                     ;
(1)  629/    12A4 :                     ; d0.l - VBlank (if 0: Skip write)
(1)  630/    12A4 :                     ; d1.l - HBlank (if 0: Skip write)
(1)  631/    12A4 :                     ;
(1)  632/    12A4 :                     ; Uses:
(1)  633/    12A4 :                     ; d4
(1)  634/    12A4 :                     ; --------------------------------------------------------
(1)  635/    12A4 :                     
(1)  636/    12A4 :                     System_SetInts:
(1)  637/    12A4 : 2800                		move.l	d0,d4
(1)  638/    12A6 : 6704                		beq.s	.novint
(1)  642/    12A8 : 21C4 C44E            		move.l	d4,(RAM_MdMarsVInt+2).w
(1)  644/    12AC :                     .novint:
(1)  645/    12AC : 2801                		move.l	d1,d4
(1)  646/    12AE : 6704                		beq.s	.nohint
(1)  650/    12B0 : 21C4 C454            		move.l	d4,(RAM_MdMarsHInt+2).w
(1)  652/    12B4 :                     .nohint:
(1)  653/    12B4 : 4E75                		rts
(1)  654/    12B6 :                     
(1)  655/    12B6 :                     ; --------------------------------------------------------
(1)  656/    12B6 :                     ; System_SramInit
(1)  657/    12B6 :                     ;
(1)  658/    12B6 :                     ; Init save data
(1)  659/    12B6 :                     ;
(1)  660/    12B6 :                     ; Uses:
(1)  661/    12B6 :                     ; a4,d4-d5
(1)  662/    12B6 :                     ; --------------------------------------------------------
(1)  663/    12B6 :                     
(1)  664/    12B6 :                     System_SramInit:
(1)  666/    12B6 : 4E71                		nop			; Pico has no SRAM
(1)  683/    12B8 : 4E75                		rts
(1)  684/    12BA :                     
(1)  685/    12BA :                     ; --------------------------------------------------------
(1)  686/    12BA :                     ; System_SramSave
(1)  687/    12BA :                     ; --------------------------------------------------------
(1)  688/    12BA :                     
(1)  689/    12BA :                     System_SramSave:
(1)  691/    12BA : 4E71                		nop
(1)  720/    12BC : 4E75                		rts
(1)  721/    12BE :                     
(1)  722/    12BE :                     ; --------------------------------------------------------
(1)  723/    12BE :                     ; System_SramLoad
(1)  724/    12BE :                     ; --------------------------------------------------------
(1)  725/    12BE :                     
(1)  726/    12BE :                     System_SramLoad:
(1)  728/    12BE : 4E71                		nop
(1)  757/    12C0 : 4E75                		rts
(1)  758/    12C2 :                     
(1)  759/    12C2 :                     ; ====================================================================
(1)  760/    12C2 :                     ; ----------------------------------------------------------------
(1)  761/    12C2 :                     ; Screen mode subroutines
(1)  762/    12C2 :                     ; ----------------------------------------------------------------
(1)  763/    12C2 :                     
(1)  764/    12C2 :                     ; --------------------------------------------------------
(1)  765/    12C2 :                     ; Initialize current screen mode
(1)  766/    12C2 :                     ;
(1)  767/    12C2 :                     ; MUST call this at the very start of your screen code.
(1)  768/    12C2 :                     ; --------------------------------------------------------
(1)  769/    12C2 :                     
(1)  770/    12C2 :                     Mode_Init:
(1)  771/    12C2 : 007C 0700           		ori.w	#$0700,sr			; Disable interrupts.
(1)  772/    12C6 : 13FC 0004 FFFF      		move.b	#$04,(RAM_VdpRegs).l
             12CC : B8F8             
(1)  773/    12CE : 13FC 0004 FFFF      		move.b	#$04,(RAM_VdpRegs+1).l
             12D4 : B8F9             
(1)  774/    12D6 : 6100 F0EC           		bsr	Video_Update
(1)  775/    12DA : 6100 F13A           		bsr	Video_Clear
(1)  776/    12DE : 6100 F96C           		bsr	Objects_Clear
(1)  777/    12E2 : 49F8 D404           		lea	(RAM_ScrnBuff).w,a4
(1)  778/    12E6 : 3A3C 0BFF           		move.w	#(MAX_ScrnBuff/2)-1,d5
(1)  779/    12EA : 7800                		moveq	#0,d4
(1)  780/    12EC :                     .clr:
(1)  781/    12EC : 38C4                		move.w	d4,(a4)+
(1)  782/    12EE : 51CD FFFC           		dbf	d5,.clr
(1)  783/    12F2 : 4E75                		rts
(1)  784/    12F4 :                     
(1)  785/    12F4 :                     ; ; --------------------------------------------------------
(1)  786/    12F4 :                     ; ; Syncronized Fade-in/Fade-out for both VDP and SuperVDP
(1)  787/    12F4 :                     ; ; --------------------------------------------------------
(1)  788/    12F4 :                     ;
(1)  789/    12F4 :                     ; Mode_FadeIn:
(1)  790/    12F4 :                     ; 		bsr	Objects_Run
(1)  791/    12F4 :                     ; 		move.w	#1,(RAM_FadeMdReq).w
(1)  792/    12F4 :                     ; 		move.w	#1,(RAM_FadeMarsReq).w
(1)  793/    12F4 :                     ; 		move.w	#1,(RAM_FadeMdIncr).w
(1)  794/    12F4 :                     ; 		move.w	#2,(RAM_FadeMarsIncr).w
(1)  795/    12F4 :                     ; 		move.w	#1,(RAM_FadeMdDelay).w
(1)  796/    12F4 :                     ; 		move.w	#0,(RAM_FadeMarsDelay).w
(1)  797/    12F4 :                     ; .loopw:
(1)  798/    12F4 :                     ; 		bsr	System_Render
(1)  799/    12F4 :                     ; 		bsr	Video_RunFade
(1)  800/    12F4 :                     ; 		bne.s	.loopw
(1)  801/    12F4 :                     ; 		rts
(1)  802/    12F4 :                     ;
(1)  803/    12F4 :                     ; Mode_FadeOut:
(1)  804/    12F4 :                     ; 		bsr	Objects_Run
(1)  805/    12F4 :                     ; 		move.w	#2,(RAM_FadeMdReq).w
(1)  806/    12F4 :                     ; 		move.w	#2,(RAM_FadeMarsReq).w
(1)  807/    12F4 :                     ; 		move.w	#1,(RAM_FadeMdIncr).w
(1)  808/    12F4 :                     ; 		move.w	#2,(RAM_FadeMarsIncr).w
(1)  809/    12F4 :                     ; 		move.w	#1,(RAM_FadeMdDelay).w
(1)  810/    12F4 :                     ; 		move.w	#0,(RAM_FadeMarsDelay).w
(1)  811/    12F4 :                     ; .loopw:
(1)  812/    12F4 :                     ; 		bsr	System_Render
(1)  813/    12F4 :                     ; 		bsr	Video_RunFade
(1)  814/    12F4 :                     ; 		bne.s	.loopw
(1)  815/    12F4 :                     ; 		rts
(1)  816/    12F4 :                     
(1)  817/    12F4 :                     ; ====================================================================
(1)  818/    12F4 :                     ; ----------------------------------------------------------------
(1)  819/    12F4 :                     ; Default interrupts
(1)  820/    12F4 :                     ; ----------------------------------------------------------------
(1)  821/    12F4 :                     
(1)  822/    12F4 :                     ; --------------------------------------------------------
(1)  823/    12F4 :                     ; VBlank
(1)  824/    12F4 :                     ; --------------------------------------------------------
(1)  825/    12F4 :                     
(1)  826/    12F4 :                     VInt_Default:
(1)  827/    12F4 : 48E7 FFFE           		movem.l	d0-a6,-(sp)
(1)  828/    12F8 : 6100 FDD8           		bsr	System_Input
(1)  829/    12FC : 06B8 0000 0001      		addi.l	#1,(RAM_FrameCount).w
             1302 : B8D4             
(1)  830/    1304 : 4CDF 7FFF           		movem.l	(sp)+,d0-a6
(1)  831/    1308 : 4E73                		rte
(1)  832/    130A :                     
(1)  833/    130A :                     ; --------------------------------------------------------
(1)  834/    130A :                     ; HBlank
(1)  835/    130A :                     ; --------------------------------------------------------
(1)  836/    130A :                     
(1)  837/    130A :                     HInt_Default:
(1)  838/    130A : 4E73                		rte
(1)  839/    130C :                     
(1)  840/    130C :                     ; ====================================================================
(1)  841/    130C :                     ; ----------------------------------------------------------------
(1)  842/    130C :                     ; SEGA CD / CD32X ONLY
(1)  843/    130C :                     ; ----------------------------------------------------------------
(1)  844/    130C :                     
(1)  845/    130C :                     ; --------------------------------------------------------
(1)  846/    130C :                     ; System_MdMcd_SubWait
(1)  847/    130C :                     ;
(1)  848/    130C :                     ; Waits until Sub-CPU finishes.
(1)  849/    130C :                     ;
(1)  850/    130C :                     ; Uses:
(1)  851/    130C :                     ; a6,d7
(1)  852/    130C :                     ; --------------------------------------------------------
(1)  853/    130C :                     
(1)  854/    130C :                     System_MdMcd_SubWait:
(1)  860/    130C : 4E75                		rts
(1)  861/    130E :                     
(1)  862/    130E :                     ; --------------------------------------------------------
(1)  863/    130E :                     ; System_MdMcd_SubTask
(1)  864/    130E :                     ;
(1)  865/    130E :                     ; Request task to Sub-CPU
(1)  866/    130E :                     ; ** Exits without waiting SUB to finish, call
(1)  867/    130E :                     ; System_MdMcd_SubWait after this IF required **
(1)  868/    130E :                     ;
(1)  869/    130E :                     ; Input:
(1)  870/    130E :                     ; d0.b | Task number
(1)  871/    130E :                     ;
(1)  872/    130E :                     ; Uses:
(1)  873/    130E :                     ; d7/a6
(1)  874/    130E :                     ; --------------------------------------------------------
(1)  875/    130E :                     
(1)  876/    130E :                     System_MdMcd_SubTask:
(1)  889/    130E : 4E75                		rts
(1)  890/    1310 :                     
(1)  891/    1310 :                     ; --------------------------------------------------------
(1)  892/    1310 :                     ; System_McdTrnsfr_WRAM
(1)  893/    1310 :                     ;
(1)  894/    1310 :                     ; Read file from disc and sends it to WORD-RAM,
(1)  895/    1310 :                     ; waits on finish.
(1)  896/    1310 :                     ;
(1)  897/    1310 :                     ; Input:
(1)  898/    1310 :                     ; a0 | Filename string "FILENAME.BIN",0
(1)  899/    1310 :                     ; a1 | Output location
(1)  900/    1310 :                     ;
(1)  901/    1310 :                     ; Uses:
(1)  902/    1310 :                     ; d0/d7/a5-a6
(1)  903/    1310 :                     ;
(1)  904/    1310 :                     ; This calls Sub-Task $02, NEEDS WORD-RAM permission in 2M
(1)  905/    1310 :                     ; --------------------------------------------------------
(1)  906/    1310 :                     
(1)  907/    1310 :                     System_McdTrnsfr_WRAM:
(1)  926/    1310 : 4E75                		rts
(1)  927/    1312 :                     
(1)  928/    1312 :                     ; --------------------------------------------------------
(1)  929/    1312 :                     ; System_McdTrnsfr_RAM
(1)  930/    1312 :                     ;
(1)  931/    1312 :                     ; Read file from disc and transfer output the
(1)  932/    1312 :                     ; data to a1, uses communication ports.
(1)  933/    1312 :                     ;
(1)  934/    1312 :                     ; Input:
(1)  935/    1312 :                     ; a0   | Filename string: "FILENAME.BIN",0
(1)  936/    1312 :                     ; a1   | Output location
(1)  937/    1312 :                     ; d0.w | Size, $10-aligned sizes only
(1)  938/    1312 :                     ;
(1)  939/    1312 :                     ; Uses:
(1)  940/    1312 :                     ; d7,a0-a1,a5-a6
(1)  941/    1312 :                     ;
(1)  942/    1312 :                     ; This calls Sub-Task $01
(1)  943/    1312 :                     ; --------------------------------------------------------
(1)  944/    1312 :                     
(1)  945/    1312 :                     ; TODO: I think the Sega CD has a CDC mode to
(1)  946/    1312 :                     ; transfer disc memory to MAIN (here) directly
(1)  947/    1312 :                     ; but this works without problem.
(1)  948/    1312 :                     
(1)  949/    1312 :                     System_McdTrnsfr_RAM:
(1)  999/    1312 : 4E75                		rts
(1) 1000/    1314 :                     
(1) 1001/    1314 :                     ; --------------------------------------------------------
(1) 1002/    1314 :                     ; System_McdSendBuff
(1) 1003/    1314 :                     ;
(1) 1004/    1314 :                     ; Send data memory-to-memory from
(1) 1005/    1314 :                     ; MAIN-CPU to SUB-CPU
(1) 1006/    1314 :                     ;
(1) 1007/    1314 :                     ; Input:
(1) 1008/    1314 :                     ; a0   | Input data
(1) 1009/    1314 :                     ; a1   | Output location in SUB-CPU area
(1) 1010/    1314 :                     ; d0.w | Size, 8-aligned sizes only
(1) 1011/    1314 :                     ;
(1) 1012/    1314 :                     ; Uses:
(1) 1013/    1314 :                     ; d7,a0-a1/a5-a6
(1) 1014/    1314 :                     ;
(1) 1015/    1314 :                     ; This calls Sub-Task $08
(1) 1016/    1314 :                     ; --------------------------------------------------------
(1) 1017/    1314 :                     
(1) 1018/    1314 :                     System_McdSendBuff:
(1) 1060/    1314 : 4E75                		rts
(1) 1061/    1316 :                     
(1) 1062/    1316 :                     ; ================================================================
(1) 1063/    1316 :                     ; --------------------------------------------------------
(1) 1064/    1316 :                     ; CDDA PLAYBACK
(1) 1065/    1316 :                     ; --------------------------------------------------------
(1) 1066/    1316 :                     
(1) 1067/    1316 :                     ; --------------------------------------------------------
(1) 1068/    1316 :                     ; System_MdMcd_CdPlay, System_MdMcd_CdPlay_L
(1) 1069/    1316 :                     ;
(1) 1070/    1316 :                     ; Play CDDA track, normal or looped.
(1) 1071/    1316 :                     ;
(1) 1072/    1316 :                     ; Input:
(1) 1073/    1316 :                     ; d0.w | CD track number
(1) 1074/    1316 :                     ; 	 DO NOT USE TRACK $01
(1) 1075/    1316 :                     ;
(1) 1076/    1316 :                     ; This calls Sub-Task $10 for normal playback
(1) 1077/    1316 :                     ; and $11 for looped
(1) 1078/    1316 :                     ;
(1) 1079/    1316 :                     ; Uses:
(1) 1080/    1316 :                     ; d4
(1) 1081/    1316 :                     ; --------------------------------------------------------
(1) 1082/    1316 :                     
(1) 1083/    1316 :                     System_MdMcd_CdPlay:
(1) 1084/    1316 : 48E7 8102           		movem.l	d0/d7/a6,-(sp)
(1) 1085/    131A : 383C 0010           		move.w	#$0010,d4
(1) 1086/    131E : 6008                		bra	sysMdMcd_SetCdda
(1) 1087/    1320 :                     
(1) 1088/    1320 :                     System_MdMcd_CdPlay_L:
(1) 1089/    1320 : 48E7 8102           		movem.l	d0/d7/a6,-(sp)
(1) 1090/    1324 : 383C 0011           		move.w	#$0011,d4
(1) 1091/    1328 :                     sysMdMcd_SetCdda:
(1) 1103/    1328 : 4CDF 4081           		movem.l	(sp)+,d0/d7/a6
(1) 1104/    132C : 4E75                		rts
(1) 1105/    132E :                     
(1) 1106/    132E :                     ; --------------------------------------------------------
(1) 1107/    132E :                     ; System_MdMcd_CdFade
(1) 1108/    132E :                     ;
(1) 1109/    132E :                     ; Fade the CDDA Volume
(1) 1110/    132E :                     ;
(1) 1111/    132E :                     ; Input:
(1) 1112/    132E :                     ; d0.w | Target volume
(1) 1113/    132E :                     ;        $000-$400 - Min to Max
(1) 1114/    132E :                     ; d1.w | Fading speed
(1) 1115/    132E :                     ;        $001-$200 - Slow to Fast
(1) 1116/    132E :                     ;             $400 - Set once
(1) 1117/    132E :                     ;
(1) 1118/    132E :                     ; This calls Sub-Task $10 for normal playback
(1) 1119/    132E :                     ; and $11 for looped
(1) 1120/    132E :                     ;
(1) 1121/    132E :                     ; Uses:
(1) 1122/    132E :                     ; d4
(1) 1123/    132E :                     
(1) 1124/    132E :                     ; This calls Sub-Task $16
(1) 1125/    132E :                     ; --------------------------------------------------------
(1) 1126/    132E :                     
(1) 1127/    132E :                     System_MdMcd_CdFade:
(1) 1128/    132E : 48E7 C102           		movem.l	d0-d1/d7/a6,-(sp)
(1) 1129/    1332 : 33C0 00A1 2010      		move.w	d0,(sysmcd_reg+mcd_dcomm_m).l
(1) 1130/    1338 : 33C1 00A1 2012      		move.w	d1,(sysmcd_reg+mcd_dcomm_m+2).l
(1) 1131/    133E : 303C 0016           		move.w	#$0016,d0
(1) 1132/    1342 : 61CA                		bsr	System_MdMcd_SubTask
(1) 1133/    1344 : 4CDF 4083           		movem.l	(sp)+,d0-d1/d7/a6
(1) 1134/    1348 : 4E75                		rts
(1) 1135/    134A :                     
(1) 1136/    134A :                     ; ====================================================================
(1) 1137/    134A :                     ; ----------------------------------------------------------------
(1) 1138/    134A :                     ; 32X and CD32X ONLY
(1) 1139/    134A :                     ; ----------------------------------------------------------------
(1) 1140/    134A :                     
(1) 1141/    134A :                     ; --------------------------------------------------------
(1) 1142/    134A :                     ; System_MarsDataPack
(1) 1143/    134A :                     ;
(1) 1144/    134A :                     ; BOTH 32X AND CD32X
(1) 1145/    134A :                     ;
(1) 1146/    134A :                     ; Sends graphics data to the SDRAM area
(1) 1147/    134A :                     ; call this BEFORE doing any visuals.
(1) 1148/    134A :                     ;
(1) 1149/    134A :                     ; Input:
(1) 1150/    134A :                     ; a0 | Cartridge pointer and Filename:
(1) 1151/    134A :                     ;      dc.l cart_pointer ; Cartridge only
(1) 1152/    134A :                     ;      dc.b "FILENAME.BIN" ; CD32X only
(1) 1153/    134A :                     ;
(1) 1154/    134A :                     ;      The SDRAM data MUST have the size at the
(1) 1155/    134A :                     ;      begining of the data package:
(1) 1156/    134A :                     ;      dc.l end_point-start_label
(1) 1157/    134A :                     ;      dc.b (data)
(1) 1158/    134A :                     ;
(1) 1159/    134A :                     ; Uses:
(1) 1160/    134A :                     ; a4-a5,d3-d7
(1) 1161/    134A :                     ; --------------------------------------------------------
(1) 1162/    134A :                     
(1) 1163/    134A :                     System_MarsDataPack:
(1) 1196/    134A : 4E75                		rts
(1) 1197/    134C :                     
(1) 1198/    134C :                     ; --------------------------------------------------------
(1) 1199/    134C :                     ; System_MarsSendDreq
(1) 1200/    134C :                     ;
(1) 1201/    134C :                     ; Transfers data to the 32X using DREQ
(1) 1202/    134C :                     ;
(1) 1203/    134C :                     ; Input:
(1) 1204/    134C :                     ; a0   | Source data
(1) 1205/    134C :                     ; a1   | Destination in SH2's SDRAM area
(1) 1206/    134C :                     ; d0.w | Size, MUST end with 0 or 8
(1) 1207/    134C :                     ; d1.w | Data transfer type
(1) 1208/    134C :                     ;
(1) 1209/    134C :                     ; Uses:
(1) 1210/    134C :                     ; a4-a5,d5-d7
(1) 1211/    134C :                     ;
(1) 1212/    134C :                     ; Notes:
(1) 1213/    134C :                     ; Call this during DISPLAY ONLY, NOT during VBlank.
(1) 1214/    134C :                     ;
(1) 1215/    134C :                     ; * SOME 32X EMULATORS WILL GET STUCK WAITING
(1) 1216/    134C :                     ; FOR DMA EXIT *
(1) 1217/    134C :                     ; --------------------------------------------------------
(1) 1218/    134C :                     
(1) 1219/    134C :                     System_MarsSendDreq:
(1) 1224/    134C : 4E75                		rts
(1) 1226/    134E :                     
(1) 1227/    134E :                     ; --------------------------------------------------------
(1) 1228/    134E :                     ; System_MarsUpdate
(1) 1229/    134E :                     ;
(1) 1230/    134E :                     ; Send a small section of RAM to SH2 for updating
(1) 1231/    134E :                     ; the visuals.
(1) 1232/    134E :                     ;
(1) 1233/    134E :                     ; Uses:
(1) 1234/    134E :                     ; a4-a5,d5-d7
(1) 1235/    134E :                     ;
(1) 1236/    134E :                     ; Notes:
(1) 1237/    134E :                     ; - Call this during DISPLAY ONLY
(1) 1238/    134E :                     ; --------------------------------------------------------
(1) 1239/    134E :                     
(1) 1240/    134E :                     System_MarsUpdate:
(1) 1246/    134E : 4E75                		rts
(1) 1248/    1350 :                     
(1) 1249/    1350 :                     ; --------------------------------------------------------
(1) 1250/    1350 :                     
(1) 1251/    1350 :                     sys_MSendDreq:
(1) 1294/    1350 : 4E75                		rts
(1) 1295/    1352 :                     
(1) 1296/    1352 :                     ; ====================================================================
(1) 1297/    1352 :                     ; ----------------------------------------------------------------
(1) 1298/    1352 :                     ; Shared subs for the add-ons
(1) 1299/    1352 :                     ; ----------------------------------------------------------------
(1) 1300/    1352 :                     
(1) 1301/    1352 :                     ; --------------------------------------------------------
(1) 1302/    1352 :                     ; System_GrabRamCode
(1) 1303/    1352 :                     ;
(1) 1304/    1352 :                     ; Shared routine for MCD, 32X and CD32X.
(1) 1305/    1352 :                     ;
(1) 1306/    1352 :                     ; Send new code to the USER side of RAM and
(1) 1307/    1352 :                     ; jumps into it.
(1) 1308/    1352 :                     ;
(1) 1309/    1352 :                     ; Input:
(1) 1310/    1352 :                     ; a0 | SEGA CD/CD+32X:
(1) 1311/    1352 :                     ;      - Filename string 8-bytes
(1) 1312/    1352 :                     ;      SEGA 32X:
(1) 1313/    1352 :                     ;      - Location of the RAM-code to copy from
(1) 1314/    1352 :                     ;        in the $880000/$900000 areas
(1) 1315/    1352 :                     ; --------------------------------------------------------
(1) 1316/    1352 :                     
(1) 1317/    1352 :                     System_GrabRamCode:
(1) 1338/    1352 : 4E75                		rts
(1) 1340/    1354 :                     
(1) 1341/    1354 :                     ; ====================================================================
(1) 1342/    1354 :                     
     194/    1354 :                     
     195/    1354 :                     ; ====================================================================
     196/    1354 :                     ; --------------------------------------------------------
     197/    1354 :                     ; MAIN SCREEN MODE LOOP
     198/    1354 :                     ;
     199/    1354 :                     ;   MD/Pico: Direct ROM jump
     200/    1354 :                     ; SCD/CD32X: Reads file from DISC and
     201/    1354 :                     ;            transfers code to RAM
     202/    1354 :                     ;       32X: Read from ROM and copies code to
     203/    1354 :                     ;            RAM so it's problematic with DMA
     204/    1354 :                     ;            and the SH2
     205/    1354 :                     ;
     206/    1354 :                     ; - Returning in your current screen code
     207/    1354 :                     ;   will loop here and reload the entire
     208/    1354 :                     ;   screen code.
     209/    1354 :                     ; - DO NOT JUMP TO SCREEN MODES DIRECTLY
     210/    1354 :                     ; - 32X/CD32X:
     211/    1354 :                     ;   This will turn OFF any pseudo-Video mode
     212/    1354 :                     ;   in use.
     213/    1354 :                     ; --------------------------------------------------------
     214/    1354 :                     
     215/    1354 :                     Md_ReadModes:
     216/    1354 : 007C 0700           		ori.w	#$0700,sr		; Disable interrupts
     217/    1358 : 7000                		moveq	#0,d0
     218/    135A : 3038 C458           		move.w	(RAM_ScreenMode).w,d0
     219/    135E : C07C 007F           		and.w	#$7F,d0			; <-- CURRENT LIMIT
     220/    1362 : E948                		lsl.w	#4,d0			; * $10
     221/    1364 : 41FB 000A           		lea	.pick_mode(pc,d0.w),a0	; LEA the filename
     229/    1368 : 207B 0006           		movea.l	.pick_mode(pc,d0.w),a0	; Location to JUMP to.
     230/    136C : 4E90                		jsr	(a0)
     232/    136E : 60E4                		bra.s	Md_ReadModes		; Loop on rts
     233/    1370 :                     
     234/    1370 :                     ; ---------------------------------------------
     235/    1370 :                     ; ** ADD SCREEN MODES HERE **
     236/    1370 :                     ;
     237/    1370 :                     ; SegaCD/CD32X:
     238/    1370 :                     ; DON'T FORGET to add the file to the
     239/    1370 :                     ; ISO filelist.
     240/    1370 :                     ; ---------------------------------------------
     241/    1370 :                     
     242/    1370 :                     .pick_mode:
     243/    1370 : 0000 3334           		dc.l Md_Screen00	; Cartridge label *unused on CD
     244/    1374 : 5343 5245 454E      		dc.b "SCREEN00.BIN"	; ISO Filename *unused on Cartridge
             137A : 3030 2E42 494E    
     245/    1380 : 0000 37B2           		dc.l Md_Screen01
     246/    1384 : 5343 5245 454E      		dc.b "SCREEN01.BIN"
             138A : 3031 2E42 494E    
     247/    1390 : 0000 3334           		dc.l Md_Screen00
     248/    1394 : 5343 5245 454E      		dc.b "SCREEN00.BIN"
             139A : 3030 2E42 494E    
     249/    13A0 : 0000 3334           		dc.l Md_Screen00
     250/    13A4 : 5343 5245 454E      		dc.b "SCREEN00.BIN"
             13AA : 3030 2E42 494E    
     251/    13B0 : 0000 3334           		dc.l Md_Screen00
     252/    13B4 :                     
     253/    13B4 :                     ; ---------------------------------------------
     254/    13B4 :                     
     261/    13B4 :                     Md_SysCode_e:
     262/    13B4 :                     		align 2
     263/    13B4 :                     
     264/    13B4 :                     ; ===========================================================================
     265/    13B4 :                     ; --------------------------------------------------------
     266/    13B4 :                     ; Z80 include on Cartridge ONLY (NOT on Disc)
     267/    13B4 :                     ; --------------------------------------------------------
     268/    13B4 :                     
     273/    13B4 :                     Z80_CODE:
     277/    13B4 :                     		include "sound/driver/gema_zdrv.asm"
(1)    1/    13B4 :                     ; ===========================================================================
(1)    2/    13B4 :                     ; -------------------------------------------------------------------
(1)    3/    13B4 :                     ; GEMA/Nikona Z80 code v1.0
(1)    4/    13B4 :                     ; by GenesisFan64 2023-2024
(1)    5/    13B4 :                     ; -------------------------------------------------------------------
(1)    6/    13B4 :                     
(1)    7/       0 :                     		phase 0
(1)    8/       0 :                     		cpu Z80		; Enter Z80 CPU
(1)    9/       0 :                     
(1)   10/       0 :                     ; --------------------------------------------------------
(1)   11/       0 :                     ; SETTINGS
(1)   12/       0 :                     ; --------------------------------------------------------
(1)   13/       0 :                     
(1)   14/       0 :                     ; !! = HARDCODED
(1)   15/       0 : =8H                  MAX_TRFRPZ	equ 8		; !! Max transferRom packets(bytes) **AFFECTS WAVE QUALITY**
(1)   16/       0 : =20H                 MAX_TRKCHN	equ 32		; !! Max internal shared tracker channel slots *** LIMTED to 32 ***
(1)   17/       0 : =20H                 MAX_RCACH	equ 20h		; !! Max storage for ROM pattern data *** 1-BIT SIZES ONLY, MUST BE ALIGNED ***
(1)   18/       0 : =8H                  MAX_BUFFNTRY	equ 4*2		; !! nikona_BuffList buffer entry size
(1)   19/       0 : =18H                 MAX_TBLSIZE	equ 18h		; Maximum size for chip tables (MINIMUM: 10h)
(1)   20/       0 : =1AH                 MAX_TRKINDX	equ 26		; Max channel indexes per buffer: 4PSG+6FM+8PCM+8PWM
(1)   21/       0 : =10H                 MAX_ZCMND	equ 10h		; Size of command array ** 1-bit SIZES ONLY ** (68k uses this label too)
(1)   22/       0 :                     
(1)   23/       0 :                     ; Debug:
(1)   24/       0 : =0H                  ZSET_TESTME	equ 0		; Set to 1 to check the DAC playback quality
(1)   25/       0 :                     
(1)   26/       0 :                     ; --------------------------------------------------------
(1)   27/       0 :                     ; Structs
(1)   28/       0 :                     ; --------------------------------------------------------
(1)   29/       0 :                     
(1)   30/       0 :                     ; trkBuff struct
(1)   31/       0 :                     ;
(1)   32/       0 :                     ; trk_Status: %ERP- V--0
(1)   33/       0 :                     ; E - enabled
(1)   34/       0 :                     ; R - Init|Restart track
(1)   35/       0 :                     ; P - refill-on-playback
(1)   36/       0 :                     ; V - volume change flag
(1)   37/       0 :                     ; 0 - Use global sub-beats
(1)   38/       0 : =0H                  trk_Status	equ 00h	; ** Track Status and Flags (MUST BE at 00h)
(1)   39/       0 : =1H                  trk_SeqId	equ 01h ; ** Track ID to play.
(1)   40/       0 : =2H                  trk_SetBlk	equ 02h	; ** Start on this block
(1)   41/       0 : =3H                  trk_TickSet	equ 03h	; ** Ticks for this track
(1)   42/       0 : =4H                  trk_Blocks	equ 04h ; ** [W] Current track's blocks
(1)   43/       0 : =6H                  trk_Patt	equ 06h ; ** [W] Current track's heads and patterns
(1)   44/       0 : =8H                  trk_Cach	equ 08h	; ** [W] Current track's cache notedata
(1)   45/       0 : =0AH                 trk_Read	equ 0Ah	; [W] Track current pattern read
(1)   46/       0 : =0CH                 trk_Rows	equ 0Ch	; [W] Track row counter
(1)   47/       0 : =0EH                 trk_VolMaster	equ 0Eh ; [W] Master volume for this track slot (00-max), +80h update
(1)   48/       0 : =10H                 trk_cachHalf	equ 10h ; ROM-cache halfcheck
(1)   49/       0 : =11H                 trk_rowPause	equ 11h	; Row-pause timer
(1)   50/       0 : =12H                 trk_tickTmr	equ 12h	; Ticks timer
(1)   51/       0 : =13H                 trk_currBlk	equ 13h	; Current block
(1)   52/       0 : =14H                 trk_Priority	equ 14h ; Priority level for this buffer
(1)   53/       0 : =15H                 trk_BankIns	equ 15h ; Instrument bank
(1)   54/       0 : =16H                 trk_BankHeads	equ 16h ; Header bank
(1)   55/       0 : =17H                 trk_BankBlk	equ 17h	; Block bank
(1)   56/       0 : =18H                 trk_MaxChnl	equ 18h ; MAX channels used in this track
(1)   57/       0 : =19H                 trk_VolFdTarget	equ 19h	; Target fade volume
(1)   58/       0 : =1AH                 trk_RomPattRead	equ 1Ah ; [3b] ROM current pattern data to be cache'd
(1)   59/       0 : =1DH                 trk_RomPatt	equ 1Dh ; [3b] ROM BASE pattern data
(1)   60/       0 : =20H                 trk_RomInst	equ 20h ; [3b] ROM instrument data
(1)   61/       0 : =23H                 trk_RomBlks	equ 23h ; [3b] ROM blocks data
(1)   62/       0 : =26H                 trk_ChnIndx	equ 26h	; CHANNEL INDEXES START HERE
(1)   63/       0 :                     
(1)   64/       0 :                     ; chnBuff struct: 8 bytes ONLY
(1)   65/       0 :                     ;
(1)   66/       0 :                     ; chnl_Flags: E0LRevin
(1)   67/       0 :                     ; E  - Channel is active
(1)   68/       0 :                     ; LR - Global left/Right panning bits (reverse bits: 0-ON 1-OFF)
(1)   69/       0 :                     ; e  - Effect*
(1)   70/       0 :                     ; v  - Volume*
(1)   71/       0 :                     ; i  - Intrument*
(1)   72/       0 :                     ; n  - Note*
(1)   73/       0 : =0H                  chnl_Flags	equ 0	; Playback flags ** DON'T MOVE THIS **
(1)   74/       0 : =1H                  chnl_Chip	equ 1	; %ccccpppp c - Current Chip ID / p - Priority level
(1)   75/       0 : =2H                  chnl_Note	equ 2
(1)   76/       0 : =3H                  chnl_Ins	equ 3	; Starting from 1, 0 is invalid
(1)   77/       0 : =4H                  chnl_Vol	equ 4	; MAX to MIN: 40h-00h
(1)   78/       0 : =5H                  chnl_EffId	equ 5
(1)   79/       0 : =6H                  chnl_EffArg	equ 6
(1)   80/       0 : =7H                  chnl_Type	equ 7	; Impulse-note update bits
(1)   81/       0 :                     
(1)   82/       0 :                     ; --------------------------------------------------------
(1)   83/       0 :                     ; Variables
(1)   84/       0 :                     ; --------------------------------------------------------
(1)   85/       0 :                     
(1)   86/       0 :                     ; Z80 opcode labels for the wave playback routines
(1)   87/       0 : =0H                  zopcNop		equ 00h
(1)   88/       0 : =8H                  zopcEx		equ 08h
(1)   89/       0 : =0C9H                zopcRet		equ 0C9h
(1)   90/       0 : =0D9H                zopcExx		equ 0D9h		; (dac_me ONLY)
(1)   91/       0 : =0F5H                zopcPushAf	equ 0F5h		; (dac_fill ONLY)
(1)   92/       0 :                     
(1)   93/       0 :                     ; PSG external control
(1)   94/       0 : =0H                  COM		equ 0
(1)   95/       0 : =4H                  LEV		equ 4
(1)   96/       0 : =8H                  ATK		equ 8
(1)   97/       0 : =0CH                 DKY		equ 12
(1)   98/       0 : =10H                 SLV		equ 16
(1)   99/       0 : =14H                 RRT		equ 20
(1)  100/       0 : =18H                 MODE		equ 24
(1)  101/       0 : =1CH                 DTL		equ 28
(1)  102/       0 : =20H                 DTH		equ 32
(1)  103/       0 : =24H                 ALV		equ 36
(1)  104/       0 : =28H                 FLG		equ 40
(1)  105/       0 : =2CH                 TMR		equ 44
(1)  106/       0 : =30H                 PVOL		equ 48
(1)  107/       0 : =34H                 PARP		equ 52
(1)  108/       0 : =38H                 PTMR		equ 56
(1)  109/       0 :                     
(1)  110/       0 :                     ; PWM control
(1)  111/       0 :                     ; PWCOM		equ 0
(1)  112/       0 :                     ; PWPTH_V	equ 8	; Volume | Pitch MSB (VVVVVVPPb)
(1)  113/       0 :                     ; PWPHL		equ 16	; Pitch LSB
(1)  114/       0 :                     ; PWOUTF	equ 24	; Output mode/bits | 32-bit address (%SlLRxiix) ii=$02 or $06
(1)  115/       0 :                     ; PWINSH	equ 32	; **
(1)  116/       0 :                     ; PWINSM	equ 40	; **
(1)  117/       0 :                     ; PWINSL	equ 48	; **
(1)  118/       0 :                     
(1)  119/       0 :                     ; ====================================================================
(1)  120/       0 :                     ; --------------------------------------------------------
(1)  121/       0 :                     ; Code starts here
(1)  122/       0 :                     ; --------------------------------------------------------
(1)  123/       0 :                     
(1)  124/       0 : F3                  		di			; Disable interrputs first
(1)  125/       1 : ED 56               		im	1		; Set Interrupt mode 1
(1)  126/       3 : 31 00 20            		ld	sp,2000h	; Set stack at the end of Z80
(1)  127/       6 : 18 48               		jr	z80_init	; Jump to z80_init
(1)  128/       8 :                     
(1)  129/       8 :                     ; --------------------------------------------------------
(1)  130/       8 :                     ; RST 8 (dac_me)
(1)  131/       8 :                     ; *** self-modifiable code ***
(1)  132/       8 :                     ;
(1)  133/       8 :                     ; Writes wave data to DAC using data stored
(1)  134/       8 :                     ; on the wave buffer, call this routine every 6 or 8
(1)  135/       8 :                     ; instructions to keep the samplerate stable.
(1)  136/       8 :                     ;
(1)  137/       8 :                     ; Input (EXX):
(1)  138/       8 :                     ;  c - WAVE buffer MSB
(1)  139/       8 :                     ; de - Pitch (xx.00)
(1)  140/       8 :                     ; h  - WAVE buffer LSB (as xx.00)
(1)  141/       8 :                     ;
(1)  142/       8 :                     ; Uses (EXX):
(1)  143/       8 :                     ; b
(1)  144/       8 :                     ;
(1)  145/       8 :                     ; Notes:
(1)  146/       8 :                     ; ONLY USE dac_on and dac_off to control
(1)  147/       8 :                     ; wave playback.
(1)  148/       8 :                     ;
(1)  149/       8 :                     ; call dac_on to enable wave playback, locks FM6
(1)  150/       8 :                     ; and
(1)  151/       8 :                     ; call dac_off to disable wave and unlock FM6.
(1)  152/       8 :                     ; --------------------------------------------------------
(1)  153/       8 :                     
(1)  154/       8 :                     ; Samplerate is at 16000hz with minimal quality loss.
(1)  155/       8 :                     ; 		org 8
(1)  156/       8 : D9                  dac_me:		exx			; * swap regs <-- Changes between EXX(play) and RET(stop)
(1)  157/       9 : 08                  		ex	af,af'		; Swap af
(1)  158/       A : 45                  		ld	b,l		; Save pitch .00 to b
(1)  159/       B : 6C                  		ld	l,h		; l - xx.00 to 00xx
(1)  160/       C : 61                  		ld	h,c		; h - Wave buffer MSB + 00xx
(1)  161/       D : 3E 2A               		ld	a,2Ah		; YM register 2Ah
(1)  162/       F : 32 00 40            		ld	(Zym_ctrl_1),a	; Set DAC write
(1)  163/      12 : 7E                  		ld	a,(hl)		; Read wave byte
(1)  164/      13 : 32 01 40            		ld	(Zym_data_1),a	; Write it to DAC
(1)  165/      16 : 65                  		ld	h,l		; get hl back
(1)  166/      17 : 68                  		ld	l,b		; Get .00 back from b to l
(1)  167/      18 : 19                  		add	hl,de		; Pitch increment hl
(1)  168/      19 : 08                  		ex	af,af'		; Return af
(1)  169/      1A : D9                  		exx			; * swap regs
(1)  170/      1B : C9                  		ret
(1)  171/      1C :                     
(1)  172/      1C :                     ; --------------------------------------------------------
(1)  173/      1C :                     ; 1Ch - Master tracklist pointer
(1)  174/      1C :                     gemaMstrListPos:
(1)  175/      1C : 00                  		db 0				; ** 32-bit 68k address **
(1)  176/      1D : 00                  		db 0
(1)  177/      1E : 00                  		db 0
(1)  178/      1F : 00                  		db 0
(1)  179/      20 :                     
(1)  180/      20 :                     ; --------------------------------------------------------
(1)  181/      20 :                     ; RST 20h (dac_me)
(1)  182/      20 :                     ; *** self-modifiable code ***
(1)  183/      20 :                     ;
(1)  184/      20 :                     ; Checks if the WAVE cache needs refilling to keep
(1)  185/      20 :                     ; it playing.
(1)  186/      20 :                     ; --------------------------------------------------------
(1)  187/      20 :                     
(1)  188/      20 :                     ; 		org 20h
(1)  189/      20 : F5                  dac_fill:	push	af		; <-- Changes between PUSH AF(play) and RET(stop)
(1)  190/      21 : 3A 83 1C            		ld	a,(dDacFifoMid)	; a - Get half-way value
(1)  191/      24 : D9                  		exx			; * swap regs
(1)  192/      25 : AC                  		xor	h		; Grab LSB.00
(1)  193/      26 : D9                  		exx			; * swap regs
(1)  194/      27 : E6 80               		and	80h		; Check if bit changed
(1)  195/      29 : C4 5F 12            		call	nz,dac_refill	; If yes, Refill and update LSB to check
(1)  196/      2C : F1                  		pop	af
(1)  197/      2D : C9                  		ret
(1)  198/      2E :                     
(1)  199/      2E :                     ; --------------------------------------------------------
(1)  200/      2E :                     ; 02Eh - User read/write values
(1)  201/      2E : 00                  commZWrite	db 0			; 2Eh: cmd fifo wptr (from 68k)
(1)  202/      2F : 00                  commZRomBlk	db 0			; 2Fh: 68k ROM block flag
(1)  203/      30 : 00                  cdRamLen	db 0			; 30h: Size + status flag
(1)  204/      31 : 00 00               cdRamDst	db 0,0			; 31h: ** Z80 destination
(1)  205/      33 : 00 00               cdRamSrc	db 0,0			; 33h: ** 68k 24-bit source
(1)  206/      35 : 00                  cdRamSrcB	db 0			; 35h: **
(1)  207/      36 : 00                  mcdBlock	db 0			; 36h: Flag to BLOCK SCD comm
(1)  208/      37 : 00                  marsBlock	db 0			; 37h: Flag to BLOCK PWM transfers.
(1)  209/      38 :                     
(1)  210/      38 :                     ; --------------------------------------------------------
(1)  211/      38 :                     ; Z80 Interrupt at 0038h
(1)  212/      38 :                     ; --------------------------------------------------------
(1)  213/      38 :                     
(1)  214/      38 :                     ; 		org 38h			; Align 38h
(1)  215/      38 : ED 73 7E 1C         		ld	(tickSpSet),sp	; Write TICK flag using sp (xx1F, read as tickFlag+1)
(1)  216/      3C : F3                  		di			; Disable interrupt
(1)  217/      3D : C9                  		ret
(1)  218/      3E :                     
(1)  219/      3E :                     ; --------------------------------------------------------
(1)  220/      3E :                     ; 03Eh - More user settings
(1)  221/      3E : 00                  palMode		db 0		; 3Eh: PAL mode flag
(1)  222/      3F : 00                  commZRead	db 0		; cmd fifo READ pointer (here)
(1)  223/      40 :                     
(1)  224/      40 :                     ; --------------------------------------------------------
(1)  225/      40 :                     ; 68K Read/Write area at 40h
(1)  226/      40 :                     ; --------------------------------------------------------
(1)  227/      40 :                     
(1)  228/      40 :                     ; 		org 40h
(1)  229/      40 :                     commZfifo	ds MAX_ZCMND			; Buffer for commands from 68k side
(1)  230/      50 :                     
(1)  231/      50 :                     ; --------------------------------------------------------
(1)  232/      50 :                     ; Initialize
(1)  233/      50 :                     ; --------------------------------------------------------
(1)  234/      50 :                     
(1)  235/      50 :                     z80_init:
(1)  236/      50 : CD 3F 0F            		call	gema_init		; Init values
(1)  237/      53 : FB                  		ei
(1)  238/      54 :                     
(1)  239/      54 :                     ; --------------------------------------------------------
(1)  240/      54 :                     ; MAIN LOOP
(1)  241/      54 :                     ; --------------------------------------------------------
(1)  242/      54 :                     
(1)  243/      54 :                     drv_loop:
(1)  244/      54 : CF                  		rst	8
(1)  245/      55 : CD AB 0F            		call	get_tick		; Check tick on VBlank
(1)  246/      58 : E7                  		rst	20h			; Refill wave here
(1)  247/      59 : CF                  		rst	8
(1)  248/      5A : 06 00               		ld	b,0			; b - Reset current flags (beat|tick)
(1)  249/      5C : 3A 80 1C            		ld	a,(tickCnt)		; Decrement tick counter
(1)  250/      5F : D6 01               		sub	1
(1)  251/      61 : 38 0B               		jr	c,.noticks		; If non-zero, no tick passed.
(1)  252/      63 : 32 80 1C            		ld	(tickCnt),a
(1)  253/      66 : CD 84 10            		call	chip_env		; Process PSG and YM
(1)  254/      69 : CD AB 0F            		call	get_tick		; Check for another tick
(1)  255/      6C : 06 01               		ld 	b,01b			; Set TICK and clear BEAT flags (01b)
(1)  256/      6E :                     .noticks:
(1)  257/      6E : 3A 9C 1C            		ld	a,(sbeatAcc+1)		; check beat counter (scaled by tempo)
(1)  258/      71 : D6 01               		sub	1
(1)  259/      73 : 38 06               		jr	c,.nobeats
(1)  260/      75 : CF                  		rst	8
(1)  261/      76 : 32 9C 1C            		ld	(sbeatAcc+1),a		; 1/24 beat passed.
(1)  262/      79 : CB C8               		set	1,b			; Set BEAT (10b) flag
(1)  263/      7B :                     .nobeats:
(1)  264/      7B : CF                  		rst	8
(1)  265/      7C : 78                  		ld	a,b			; Any beat/tick bits set?
(1)  266/      7D : B7                  		or	a
(1)  267/      7E : 28 14               		jr	z,.neither
(1)  268/      80 : 32 98 1C            		ld	(currTickBits),a	; Save BEAT/TICK bits
(1)  269/      83 : CF                  		rst	8
(1)  270/      84 : CD AB 0F            		call	get_tick
(1)  271/      87 : CD 21 06            		call	set_chips		; Send changes to sound chips
(1)  272/      8A : CD AB 0F            		call	get_tick
(1)  273/      8D : CF                  		rst	8
(1)  274/      8E : CD 37 02            		call	upd_track		; Update track data
(1)  275/      91 : CD AB 0F            		call	get_tick
(1)  276/      94 :                     .neither:
(1)  277/      94 : CF                  		rst	8
(1)  281/      95 : CD AB 0F            		call	get_tick
(1)  282/      98 :                     .next_cmd:
(1)  283/      98 : 3A 2E 00            		ld	a,(commZWrite)		; Check if commZ R/W indexes
(1)  284/      9B : 47                  		ld	b,a			; are in the same spot a == b
(1)  285/      9C : 3A 3F 00            		ld	a,(commZRead)
(1)  286/      9F : B8                  		cp	b			; If equal, loop back.
(1)  287/      A0 : 28 B2               		jr	z,drv_loop
(1)  288/      A2 : CF                  		rst	8
(1)  289/      A3 : CD BB 00            		call	.grab_arg		; Read staring flag -1
(1)  290/      A6 : FE FF               		cp	-1			; Got START -1?
(1)  291/      A8 : 20 AA               		jr	nz,drv_loop		; If not, end of commands
(1)  292/      AA : CD BB 00            		call	.grab_arg		; Read command number
(1)  293/      AD : 87                  		add	a,a			; ID * 2
(1)  294/      AE : 21 DA 00            		ld	hl,.list		; Index-jump...
(1)  295/      B1 : 16 00               		ld	d,0
(1)  296/      B3 : 5F                  		ld	e,a
(1)  297/      B4 : 19                  		add	hl,de
(1)  298/      B5 : 7E                  		ld	a,(hl)
(1)  299/      B6 : 23                  		inc	hl
(1)  300/      B7 : 66                  		ld	h,(hl)
(1)  301/      B8 : CF                  		rst	8
(1)  302/      B9 : 6F                  		ld	l,a
(1)  303/      BA : E9                  		jp	(hl)
(1)  304/      BB :                     
(1)  305/      BB :                     ; --------------------------------------------------------
(1)  306/      BB :                     ; Read cmd byte, auto re-rolls to 3Fh
(1)  307/      BB :                     ; --------------------------------------------------------
(1)  308/      BB :                     
(1)  309/      BB :                     .grab_arg:
(1)  310/      BB : D5                  		push	de
(1)  311/      BC : E5                  		push	hl
(1)  312/      BD :                     .getcbytel:
(1)  313/      BD : 3A 2E 00            		ld	a,(commZWrite)
(1)  314/      C0 : 57                  		ld	d,a
(1)  315/      C1 : CF                  		rst	8
(1)  316/      C2 : 3A 3F 00            		ld	a,(commZRead)
(1)  317/      C5 : BA                  		cp	d		; commZ R/W indexes are the same?
(1)  318/      C6 : 28 F5               		jr	z,.getcbytel	; wait until these counters change.
(1)  319/      C8 : 16 00               		ld	d,0
(1)  320/      CA : 5F                  		ld	e,a
(1)  321/      CB : 21 40 00            		ld	hl,commZfifo	; Read commZ list + index
(1)  322/      CE : 19                  		add	hl,de
(1)  323/      CF : CF                  		rst	8
(1)  324/      D0 : 3C                  		inc	a
(1)  325/      D1 : E6 0F               		and	MAX_ZCMND-1	; ** commZ list buffer limit
(1)  326/      D3 : 32 3F 00            		ld	(commZRead),a
(1)  327/      D6 : 7E                  		ld	a,(hl)		; a - got this byte from the buffer
(1)  328/      D7 : E1                  		pop	hl
(1)  329/      D8 : D1                  		pop	de
(1)  330/      D9 : C9                  		ret
(1)  331/      DA :                     
(1)  332/      DA :                     ; --------------------------------------------------------
(1)  333/      DA :                     
(1)  334/      DA :                     .list:
(1)  335/      DA : EA 00               		dw .cmnd_0		; 00h -
(1)  336/      DC : ED 00               		dw .cmnd_1		; 01h - Set Master tracklist
(1)  337/      DE : 06 01               		dw .cmnd_2		; 02h - Play by track number
(1)  338/      E0 : 43 01               		dw .cmnd_3		; 03h - Stop by track number
(1)  339/      E2 : EA 00               		dw .cmnd_0		; 04h - **
(1)  340/      E4 : 81 01               		dw .cmnd_5		; 05h - Fade volume (FadeIn/FadeOut)
(1)  341/      E6 : BA 01               		dw .cmnd_6		; 06h - Set maximum volume to slot
(1)  342/      E8 : F3 01               		dw .cmnd_7		; 07h - Set GLOBAL sub-beats
(1)  343/      EA :                     
(1)  344/      EA :                     ; --------------------------------------------------------
(1)  345/      EA :                     ; Command 00h
(1)  346/      EA :                     ;
(1)  347/      EA :                     ; Reserved for TESTING purposes.
(1)  348/      EA :                     ; --------------------------------------------------------
(1)  349/      EA :                     
(1)  350/      EA :                     .cmnd_0:
(1)  351/      EA :                     ; 		ld	a,DacIns_TEST>>16
(1)  352/      EA :                     ; 		ld	hl,(DacIns_TEST+6)&0FFFFh
(1)  353/      EA :                     ; 		ld	(wave_Start),hl
(1)  354/      EA :                     ; 		ld	(wave_Start+2),a
(1)  355/      EA :                     ; 		ld	a,02h
(1)  356/      EA :                     ; 		ld	hl,04000h
(1)  357/      EA :                     ; 		ld	(wave_Len),hl
(1)  358/      EA :                     ; 		ld	(wave_Len+2),a
(1)  359/      EA :                     ; 		ld	bc,0
(1)  360/      EA :                     ; 		ld	(wave_Loop),bc
(1)  361/      EA :                     ; 		ld	hl,100h
(1)  362/      EA :                     ; 		ld	(wave_Pitch),hl
(1)  363/      EA :                     ; 		ld	a,1
(1)  364/      EA :                     ; 		ld	(wave_Flags),a
(1)  365/      EA :                     ; 		call	dac_play
(1)  366/      EA :                     
(1)  367/      EA :                     ; 		ld	iy,trkBuff_0
(1)  368/      EA :                     ; 		ld	(iy+trk_VolMaster),64-16
(1)  369/      EA :                     ; 		ld	(iy+trk_VolFdTarget),64
(1)  370/      EA :                     
(1)  371/      EA : C3 98 00            		jp	.next_cmd
(1)  372/      ED :                     
(1)  373/      ED :                     ; --------------------------------------------------------
(1)  374/      ED :                     ; Command 01h:
(1)  375/      ED :                     ;
(1)  376/      ED :                     ; Set the Track MASTER-list.
(1)  377/      ED :                     ; --------------------------------------------------------
(1)  378/      ED :                     
(1)  379/      ED :                     .cmnd_1:
(1)  380/      ED : 21 1F 00            		ld	hl,gemaMstrListPos+3	; 32-bit big endian
(1)  381/      F0 : CD BB 00            		call	.grab_arg		; $000000xx
(1)  382/      F3 : 77                  		ld	(hl),a
(1)  383/      F4 : 2B                  		dec	hl
(1)  384/      F5 : CD BB 00            		call	.grab_arg		; $0000xx00
(1)  385/      F8 : 77                  		ld	(hl),a
(1)  386/      F9 : 2B                  		dec	hl
(1)  387/      FA : CD BB 00            		call	.grab_arg		; $00xx0000
(1)  388/      FD : 77                  		ld	(hl),a
(1)  389/      FE : 2B                  		dec	hl
(1)  390/      FF : CD BB 00            		call	.grab_arg		; $xx000000 (filler)
(1)  391/     102 : 77                  		ld	(hl),a
(1)  392/     103 : C3 98 00            		jp	.next_cmd
(1)  393/     106 :                     
(1)  394/     106 :                     ; --------------------------------------------------------
(1)  395/     106 :                     ; Command 02h:
(1)  396/     106 :                     ;
(1)  397/     106 :                     ; Make new track by sequence number
(1)  398/     106 :                     ;
(1)  399/     106 :                     ; Arguments:
(1)  400/     106 :                     ; SeqID,BlockPos,SlotIndex(If -1 autofill)
(1)  401/     106 :                     ; --------------------------------------------------------
(1)  402/     106 :                     
(1)  403/     106 :                     .cmnd_2:
(1)  404/     106 : CD BB 00            		call	.grab_arg		; d1: Sequence ID
(1)  405/     109 : 4F                  		ld	c,a			; copy as c
(1)  406/     10A : CD BB 00            		call	.grab_arg		; d2: Block from
(1)  407/     10D : 47                  		ld	b,a			; copy as b
(1)  408/     10E : CF                  		rst	8
(1)  409/     10F : CD BB 00            		call	.grab_arg		; d0: Slot index
(1)  410/     112 : FD 21 68 14         		ld	iy,nikona_BuffList	; iy - Slot buffer list
(1)  411/     116 : B7                  		or	a
(1)  412/     117 : FA 29 01            		jp	m,.srch_mode
(1)  413/     11A :                     ; 		cp	-1			; if d2 == -1, search
(1)  414/     11A :                     ; 		jr	z,.srch_mode
(1)  415/     11A : FE 04               		cp	(nikona_BuffList_e-nikona_BuffList)/MAX_BUFFNTRY	; If maxed out slots
(1)  416/     11C : D2 98 00            		jp	nc,.next_cmd
(1)  417/     11F : CF                  		rst	8
(1)  418/     120 : CD 11 02            		call	.cmnd_rdslot
(1)  419/     123 : CD 38 01            		call	.wrtto_slot
(1)  420/     126 : C3 98 00            		jp	.next_cmd
(1)  421/     129 :                     ; -1
(1)  422/     129 :                     .srch_mode:
(1)  423/     129 : CD 24 02            		call	.srch_slot
(1)  424/     12C : FE FF               		cp	-1
(1)  425/     12E : CA 98 00            		jp	z,.next_cmd		; Then skip, no free slot.
(1)  426/     131 : CB 7E               		bit	7,(hl)			; Is this track free?
(1)  427/     133 : CA 38 01            		jp	z,.wrtto_slot
(1)  428/     136 : 18 F1               		jr	.srch_mode
(1)  429/     138 :                     .wrtto_slot:
(1)  430/     138 : 36 C0               		ld	(hl),0C0h		; ** Write trk_Status flags: Enable+Restart
(1)  431/     13A : 23                  		inc	hl
(1)  432/     13B : CF                  		rst	8
(1)  433/     13C : 71                  		ld	(hl),c			; ** write trk_SeqId
(1)  434/     13D : 23                  		inc	hl
(1)  435/     13E : 70                  		ld	(hl),b			; ** write trk_SetBlk
(1)  436/     13F : 79                  		ld	a,c
(1)  437/     140 : C3 98 00            		jp	.next_cmd
(1)  438/     143 :                     
(1)  439/     143 :                     ; --------------------------------------------------------
(1)  440/     143 :                     ; Command 03h:
(1)  441/     143 :                     ;
(1)  442/     143 :                     ; Stop track with the same sequence number
(1)  443/     143 :                     ;
(1)  444/     143 :                     ; SeqID,SlotIndex(-1 allslots)
(1)  445/     143 :                     ; --------------------------------------------------------
(1)  446/     143 :                     
(1)  447/     143 :                     .cmnd_3:
(1)  448/     143 : CD BB 00            		call	.grab_arg		; d1: Sequence ID
(1)  449/     146 : 4F                  		ld	c,a			; copy to c
(1)  450/     147 : CD BB 00            		call	.grab_arg		; d0: Slot index
(1)  451/     14A : FD 21 68 14         		ld	iy,nikona_BuffList	; iy - Slot buffer list
(1)  452/     14E : B7                  		or	a
(1)  453/     14F : FA 61 01            		jp	m,.srch_del
(1)  454/     152 :                     ; 		cp	-1			; if -1, search for all with same ID
(1)  455/     152 :                     ; 		jr	z,.srch_del
(1)  456/     152 : FE 04               		cp	(nikona_BuffList_e-nikona_BuffList)/MAX_BUFFNTRY	; If maxed out slots
(1)  457/     154 : D2 98 00            		jp	nc,.next_cmd
(1)  458/     157 : CF                  		rst	8
(1)  459/     158 : CD 11 02            		call	.cmnd_rdslot
(1)  460/     15B : CD 6E 01            		call	.wrtto_del
(1)  461/     15E : C3 98 00            		jp	.next_cmd
(1)  462/     161 :                     ; -1
(1)  463/     161 :                     .srch_del:
(1)  464/     161 : CD 24 02            		call	.srch_slot
(1)  465/     164 : FE FF               		cp	-1
(1)  466/     166 : CA 98 00            		jp	z,.next_cmd
(1)  467/     169 : CD 6E 01            		call	.wrtto_del
(1)  468/     16C : 18 F3               		jr	.srch_del
(1)  469/     16E :                     .wrtto_del:
(1)  470/     16E : CB 7E               		bit	7,(hl)
(1)  471/     170 : C8                  		ret	z
(1)  472/     171 : CB 79               		bit	7,c		; <-- lazy -1 check
(1)  473/     173 : 20 05               		jr	nz,.del_all
(1)  474/     175 : DD 7E 01            		ld	a,(ix+trk_SeqId)
(1)  475/     178 : B9                  		cp	c
(1)  476/     179 : C0                  		ret	nz
(1)  477/     17A :                     .del_all:
(1)  478/     17A : 36 FF               		ld	(hl),-1		; -1 flag, stop channel and clear slot
(1)  479/     17C : 23                  		inc	hl
(1)  480/     17D : 36 FF               		ld	(hl),-1		; Reset seqId
(1)  481/     17F : CF                  		rst	8
(1)  482/     180 : C9                  		ret
(1)  483/     181 :                     
(1)  484/     181 :                     ; --------------------------------------------------------
(1)  485/     181 :                     ; Command 05h:
(1)  486/     181 :                     ;
(1)  487/     181 :                     ; Fade volume (FadeIn/FadeOut)
(1)  488/     181 :                     ;
(1)  489/     181 :                     ; Arguments:
(1)  490/     181 :                     ; TargetVol,SlotIndex(If -1 autofill)
(1)  491/     181 :                     ; --------------------------------------------------------
(1)  492/     181 :                     
(1)  493/     181 :                     .cmnd_5:
(1)  494/     181 : CD BB 00            		call	.grab_arg		; d1: Master volume
(1)  495/     184 : 4F                  		ld	c,a			; copy to c
(1)  496/     185 : CD BB 00            		call	.grab_arg		; d0: Slot index
(1)  497/     188 : FD 21 68 14         		ld	iy,nikona_BuffList	; iy - Slot buffer list
(1)  498/     18C : B7                  		or	a
(1)  499/     18D : FA 9F 01            		jp	m,.srch_fvol
(1)  500/     190 :                     ; 		cp	-1			; if -1, search for all with same ID
(1)  501/     190 :                     ; 		jr	z,.srch_fvol
(1)  502/     190 : FE 04               		cp	(nikona_BuffList_e-nikona_BuffList)/MAX_BUFFNTRY	; If maxed out slots
(1)  503/     192 : D2 98 00            		jp	nc,.next_cmd
(1)  504/     195 : CF                  		rst	8
(1)  505/     196 : CD 11 02            		call	.cmnd_rdslot
(1)  506/     199 : CD AC 01            		call	.wrtto_fvol
(1)  507/     19C : C3 98 00            		jp	.next_cmd
(1)  508/     19F :                     ; -1
(1)  509/     19F :                     .srch_fvol:
(1)  510/     19F : CD 24 02            		call	.srch_slot
(1)  511/     1A2 : FE FF               		cp	-1
(1)  512/     1A4 : CA 98 00            		jp	z,.next_cmd		; Then skip, no free slot.
(1)  513/     1A7 : CD AC 01            		call	.wrtto_fvol
(1)  514/     1AA : 18 F3               		jr	.srch_fvol
(1)  515/     1AC :                     .wrtto_fvol:
(1)  516/     1AC : CB 7E               		bit	7,(hl)			; Active?
(1)  517/     1AE : C8                  		ret	z
(1)  518/     1AF : CB DE               		set	3,(hl)			; Volume update flag
(1)  519/     1B1 : DD 71 19            		ld	(ix+trk_VolFdTarget),c
(1)  520/     1B4 : DD 36 0F 00         		ld	(ix+trk_VolMaster+1),0
(1)  521/     1B8 : CF                  		rst	8
(1)  522/     1B9 : C9                  		ret
(1)  523/     1BA :                     
(1)  524/     1BA :                     ; --------------------------------------------------------
(1)  525/     1BA :                     ; Command 06h:
(1)  526/     1BA :                     ;
(1)  527/     1BA :                     ; Set track's master volume
(1)  528/     1BA :                     ;
(1)  529/     1BA :                     ; Arguments:
(1)  530/     1BA :                     ; MasterVol,SlotIndex(If -1 autofill)
(1)  531/     1BA :                     ; --------------------------------------------------------
(1)  532/     1BA :                     
(1)  533/     1BA :                     .cmnd_6:
(1)  534/     1BA : CD BB 00            		call	.grab_arg		; d1: Master volume
(1)  535/     1BD : 4F                  		ld	c,a			; copy to c
(1)  536/     1BE : CD BB 00            		call	.grab_arg		; d0: Slot index
(1)  537/     1C1 : FD 21 68 14         		ld	iy,nikona_BuffList	; iy - Slot buffer list
(1)  538/     1C5 : B7                  		or	a
(1)  539/     1C6 : FA D8 01            		jp	m,.srch_vol
(1)  540/     1C9 :                     ; 		cp	-1			; if -1, search for all with same ID
(1)  541/     1C9 :                     ; 		jr	z,.srch_vol
(1)  542/     1C9 : FE 04               		cp	(nikona_BuffList_e-nikona_BuffList)/MAX_BUFFNTRY	; If maxed out slots
(1)  543/     1CB : D2 98 00            		jp	nc,.next_cmd
(1)  544/     1CE : CF                  		rst	8
(1)  545/     1CF : CD 11 02            		call	.cmnd_rdslot
(1)  546/     1D2 : CD E5 01            		call	.wrtto_vol
(1)  547/     1D5 : C3 98 00            		jp	.next_cmd
(1)  548/     1D8 :                     ; -1
(1)  549/     1D8 :                     .srch_vol:
(1)  550/     1D8 : CD 24 02            		call	.srch_slot
(1)  551/     1DB : FE FF               		cp	-1
(1)  552/     1DD : CA 98 00            		jp	z,.next_cmd		; Then skip, no free slot.
(1)  553/     1E0 : CD E5 01            		call	.wrtto_vol
(1)  554/     1E3 : 18 F3               		jr	.srch_vol
(1)  555/     1E5 :                     .wrtto_vol:
(1)  556/     1E5 : CB DE               		set	3,(hl)			; Volume update flag
(1)  557/     1E7 : DD 71 0E            		ld	(ix+trk_VolMaster),c
(1)  558/     1EA : DD 71 19            		ld	(ix+trk_VolFdTarget),c
(1)  559/     1ED : DD 36 0F 00         		ld	(ix+trk_VolMaster+1),0
(1)  560/     1F1 : CF                  		rst	8
(1)  561/     1F2 : C9                  		ret
(1)  562/     1F3 :                     
(1)  563/     1F3 :                     ; --------------------------------------------------------
(1)  564/     1F3 :                     ; Command 07h:
(1)  565/     1F3 :                     ;
(1)  566/     1F3 :                     ; Set global sub-beats
(1)  567/     1F3 :                     ; --------------------------------------------------------
(1)  568/     1F3 :                     
(1)  569/     1F3 :                     .cmnd_7:
(1)  570/     1F3 : CD BB 00            		call	.grab_arg	; d0.w: $00xx
(1)  571/     1F6 : 4F                  		ld	c,a
(1)  572/     1F7 : CD BB 00            		call	.grab_arg	; d0.w: $xx00
(1)  573/     1FA : 67                  		ld	h,a
(1)  574/     1FB : 69                  		ld	l,c
(1)  575/     1FC : 3A 3E 00            		ld	a,(palMode)
(1)  576/     1FF : B7                  		or	a
(1)  577/     200 : 28 04               		jr	z,.not_pal
(1)  578/     202 : 11 20 00            		ld	de,32
(1)  579/     205 : 19                  		add	hl,de
(1)  580/     206 :                     .not_pal:
(1)  581/     206 : 7C                  		ld	a,h
(1)  582/     207 : 32 9E 1C            		ld	(sbeatPtck+1),a
(1)  583/     20A : 7D                  		ld	a,l
(1)  584/     20B : 32 9D 1C            		ld	(sbeatPtck),a
(1)  585/     20E : C3 98 00            		jp	.next_cmd
(1)  586/     211 :                     
(1)  587/     211 :                     ; --------------------------------------------------------
(1)  588/     211 :                     ; Shared subs
(1)  589/     211 :                     ; --------------------------------------------------------
(1)  590/     211 :                     
(1)  591/     211 :                     .cmnd_rdslot:
(1)  592/     211 : 87                  		add	a,a			; ** MANUAL MAX_BUFFNTRY
(1)  593/     212 : 87                  		add	a,a			; id*8
(1)  594/     213 : 87                  		add	a,a
(1)  595/     214 : 16 00               		ld	d,0
(1)  596/     216 : 5F                  		ld	e,a
(1)  597/     217 : FD 19               		add	iy,de
(1)  598/     219 : FD 7E 00            		ld	a,(iy)
(1)  599/     21C : FD 66 01            		ld	h,(iy+1)
(1)  600/     21F : 6F                  		ld	l,a
(1)  601/     220 : E5                  		push	hl
(1)  602/     221 : DD E1               		pop	ix
(1)  603/     223 : C9                  		ret
(1)  604/     224 :                     
(1)  605/     224 :                     ; ------------------------------------------------
(1)  606/     224 :                     ; iy - nikona_BuffList
(1)  607/     224 :                     
(1)  608/     224 :                     .srch_slot:
(1)  609/     224 : FD 7E 00            		ld	a,(iy)
(1)  610/     227 : FE FF               		cp	-1			; End of list?
(1)  611/     229 : C8                  		ret	z
(1)  612/     22A : FD 66 01            		ld	h,(iy+1)		; hl - Current track slot
(1)  613/     22D : 6F                  		ld	l,a
(1)  614/     22E : E5                  		push	hl
(1)  615/     22F : DD E1               		pop	ix
(1)  616/     231 : 11 08 00            		ld	de,MAX_BUFFNTRY
(1)  617/     234 : FD 19               		add	iy,de			; Next entry for later
(1)  618/     236 : C9                  		ret
(1)  619/     237 :                     
(1)  620/     237 :                     ; ====================================================================
(1)  621/     237 :                     ; ----------------------------------------------------------------
(1)  622/     237 :                     ; MAIN Playback section
(1)  623/     237 :                     ; ----------------------------------------------------------------
(1)  624/     237 :                     
(1)  625/     237 :                     ; --------------------------------------------------------
(1)  626/     237 :                     ; Read mini-impulse-tracker data
(1)  627/     237 :                     ; --------------------------------------------------------
(1)  628/     237 :                     
(1)  629/     237 :                     upd_track:
(1)  630/     237 : E7                  		rst	20h			; Refill wave
(1)  631/     238 : CD AB 0F            		call	get_tick		; Check for tick flag
(1)  632/     23B : FD 21 68 14         		ld	iy,nikona_BuffList	; iy - slot buffer List
(1)  633/     23F :                     .trk_buffrs:
(1)  634/     23F : FD 7E 00            		ld	a,(iy)			; if -1, end here.
(1)  635/     242 : FE FF               		cp	-1
(1)  636/     244 : C8                  		ret	z
(1)  637/     245 : CF                  		rst	8
(1)  638/     246 : FD E5               		push	iy
(1)  639/     248 : CD 54 02            		call	.read_track
(1)  640/     24B : FD E1               		pop	iy
(1)  641/     24D : 11 08 00            		ld	de,MAX_BUFFNTRY
(1)  642/     250 : FD 19               		add	iy,de
(1)  643/     252 : 18 EB               		jr	.trk_buffrs
(1)  644/     254 :                     
(1)  645/     254 :                     ; ----------------------------------------
(1)  646/     254 :                     ; iy - Track buffer
(1)  647/     254 :                     ; ----------------------------------------
(1)  648/     254 :                     
(1)  649/     254 :                     .read_track:
(1)  650/     254 : FD 6E 00            		ld	l,(iy)			; hl - current track slot
(1)  651/     257 : FD 66 01            		ld	h,(iy+1)
(1)  652/     25A : CF                  		rst	8
(1)  653/     25B : E5                  		push	hl
(1)  654/     25C : FD E1               		pop	iy			; change iy to hl
(1)  655/     25E : FD 46 00            		ld	b,(iy+trk_Status)	; b - Track status and settings
(1)  656/     261 : CB 78               		bit	7,b			; bit7: Track active?
(1)  657/     263 : C8                  		ret	z			; Return if not.
(1)  658/     264 : 78                  		ld	a,b
(1)  659/     265 : FE FF               		cp	-1			; Flag is -1?
(1)  660/     267 : C8                  		ret	z			; Return if mid-flag
(1)  661/     268 : CF                  		rst	8
(1)  662/     269 :                     	; ----------------------------------------
(1)  663/     269 :                     	; Track volume changes
(1)  664/     269 : FD 6E 0F            		ld	l,(iy+trk_VolMaster+1)
(1)  665/     26C : FD 66 0E            		ld	h,(iy+trk_VolMaster)
(1)  666/     26F : FD 4E 19            		ld	c,(iy+trk_VolFdTarget)
(1)  667/     272 : 11 00 01            		ld	de,0100h		; <-- Manual volfade speed MAX 0100h
(1)  668/     275 : 79                  		ld	a,c
(1)  669/     276 : BC                  		cp	h
(1)  670/     277 : 28 1E               		jr	z,.keep_vol
(1)  671/     279 : 30 06               		jr	nc,.fade_out
(1)  672/     27B : 11 80 FF            		ld	de,-80h
(1)  673/     27E : 19                  		add	hl,de
(1)  674/     27F : 18 0C               		jr	.too_much
(1)  675/     281 :                     .fade_out:
(1)  676/     281 : 19                  		add	hl,de
(1)  677/     282 : CF                  		rst	8
(1)  678/     283 : 7C                  		ld	a,h
(1)  679/     284 : B9                  		cp	c
(1)  680/     285 : 38 06               		jr	c,.too_much
(1)  681/     287 : 61                  		ld	h,c
(1)  682/     288 : 2E 00               		ld	l,0
(1)  683/     28A : FD 71 19            		ld	(iy+trk_VolFdTarget),c
(1)  684/     28D :                     .too_much:
(1)  685/     28D : FD CB 00 DE         		set	3,(iy+trk_Status)	; Volume update flag
(1)  686/     291 : FD 75 0F            		ld	(iy+trk_VolMaster+1),l
(1)  687/     294 : FD 74 0E            		ld	(iy+trk_VolMaster),h
(1)  688/     297 :                     .keep_vol:
(1)  689/     297 :                     	; ----------------------------------------
(1)  690/     297 : 3A 98 1C            		ld	a,(currTickBits)	; a - Tick/Beat bits
(1)  691/     29A : CB 40               		bit	0,b			; bit0: This track uses Beats?
(1)  692/     29C : 28 03               		jr	z,.sfxmd
(1)  693/     29E : CB 4F               		bit	1,a			; BEAT passed?
(1)  694/     2A0 : C8                  		ret	z			; No BEAT.
(1)  695/     2A1 :                     .sfxmd:
(1)  696/     2A1 : CB 47               		bit	0,a			; TICK passed?
(1)  697/     2A3 : C8                  		ret	z			; No TICK.
(1)  698/     2A4 : CF                  		rst	8
(1)  699/     2A5 :                     	; ----------------------------------------
(1)  700/     2A5 :                     	; Start reading notes
(1)  701/     2A5 : CB 70               		bit	6,b			; bit6: Restart/First time?
(1)  702/     2A7 : C4 33 05            		call	nz,.first_fill
(1)  703/     2AA : CB 68               		bit	5,b			; bit5: FILL request by effect?
(1)  704/     2AC : C4 2C 05            		call	nz,.effect_fill
(1)  705/     2AF : FD 7E 12            		ld	a,(iy+trk_tickTmr)	; TICK ex-timer for this track
(1)  706/     2B2 : 3D                  		dec	a
(1)  707/     2B3 : FD 77 12            		ld	(iy+trk_tickTmr),a
(1)  708/     2B6 : B7                  		or	a			; Check a
(1)  709/     2B7 : C0                  		ret	nz			; If Tick timer != 0, exit.
(1)  710/     2B8 : CF                  		rst	8
(1)  711/     2B9 : FD 7E 03            		ld	a,(iy+trk_TickSet)	; Set new tick timer
(1)  712/     2BC : FD 77 12            		ld	(iy+trk_tickTmr),a
(1)  713/     2BF : FD 4E 0C            		ld	c,(iy+trk_Rows)		; bc - Set row counter
(1)  714/     2C2 : FD 46 0D            		ld	b,(iy+(trk_Rows+1))
(1)  715/     2C5 : 79                  		ld	a,c			; Check rowcount
(1)  716/     2C6 : B0                  		or	b
(1)  717/     2C7 : 20 14               		jr	nz,.row_active		; If bc != 0: row is currenly playing.
(1)  718/     2C9 : CF                  		rst	8			; If bc == 0 ...
(1)  719/     2CA : FD 7E 13            		ld	a,(iy+trk_currBlk)	; Next block
(1)  720/     2CD : 3C                  		inc	a
(1)  721/     2CE : FD 77 13            		ld 	(iy+trk_currBlk),a
(1)  722/     2D1 : CD 40 04            		call	.set_track		; Read track data ** ROM ACCESS **
(1)  723/     2D4 : FE FF               		cp	-1			; Track finished?
(1)  724/     2D6 : C8                  		ret	z
(1)  725/     2D7 : FD 4E 0C            		ld	c,(iy+trk_Rows)		; Set new rowcount to bc
(1)  726/     2DA : FD 46 0D            		ld	b,(iy+(trk_Rows+1))
(1)  727/     2DD :                     .row_active:
(1)  728/     2DD : CF                  		rst	8
(1)  729/     2DE : FD 6E 0A            		ld	l,(iy+trk_Read)		; hl - CURRENT pattern to read
(1)  730/     2E1 : FD 66 0B            		ld	h,(iy+((trk_Read+1)))
(1)  731/     2E4 :                     
(1)  732/     2E4 :                     ; --------------------------------
(1)  733/     2E4 :                     ; Main read-loop
(1)  734/     2E4 :                     ; --------------------------------
(1)  735/     2E4 :                     
(1)  736/     2E4 :                     .next_note:
(1)  737/     2E4 : FD 7E 11            		ld	a,(iy+trk_rowPause)	; Check rowtimer
(1)  738/     2E7 : B7                  		or	a
(1)  739/     2E8 : 20 16               		jr	nz,.decrow
(1)  740/     2EA : 7E                  		ld	a,(hl)			; Check if byte is a timer or a note
(1)  741/     2EB : B7                  		or	a
(1)  742/     2EC : 28 06               		jr	z,.exit			; If == 00h: exit
(1)  743/     2EE : FA 0B 03            		jp	m,.has_note		; If 80h-0FFh: Note data
(1)  744/     2F1 : FD 77 11            		ld	(iy+trk_rowPause),a	; If 01h-07Fh: Row-pause timer
(1)  745/     2F4 :                     
(1)  746/     2F4 :                     ; --------------------------------
(1)  747/     2F4 :                     ; Exit
(1)  748/     2F4 :                     ; --------------------------------
(1)  749/     2F4 :                     
(1)  750/     2F4 :                     .exit:
(1)  751/     2F4 : CF                  		rst	8
(1)  752/     2F5 : CD 08 04            		call	.inc_cpatt		; * Increment patt pos
(1)  753/     2F8 : FD 75 0A            		ld	(iy+trk_Read),l		; Update READ location
(1)  754/     2FB : FD 74 0B            		ld	(iy+((trk_Read+1))),h
(1)  755/     2FE : 18 03               		jr	.decrow_e
(1)  756/     300 :                     .decrow:
(1)  757/     300 : FD 35 11            		dec	(iy+trk_rowPause)	; Decrement row-pause timer
(1)  758/     303 :                     .decrow_e:
(1)  759/     303 : 0B                  		dec	bc			; Decrement rowcount
(1)  760/     304 : FD 71 0C            		ld	(iy+trk_Rows),c		; Write last row to memory
(1)  761/     307 : FD 70 0D            		ld	(iy+(trk_Rows+1)),b
(1)  762/     30A : C9                  		ret	; Exit.
(1)  763/     30B :                     
(1)  764/     30B :                     ; --------------------------------
(1)  765/     30B :                     ; New note request
(1)  766/     30B :                     ;
(1)  767/     30B :                     ; a - %1tcccccc
(1)  768/     30B :                     ;   | t - next byte has new type
(1)  769/     30B :                     ;   | c - channel
(1)  770/     30B :                     ; --------------------------------
(1)  771/     30B :                     
(1)  772/     30B :                     .has_note:
(1)  773/     30B : CF                  		rst	8
(1)  774/     30C : C5                  		push	bc			; Save rowcount
(1)  775/     30D : 4F                  		ld	c,a			; Copy patt byte control to c
(1)  776/     30E : CD 08 04            		call	.inc_cpatt		; * Increment patt pos
(1)  777/     311 : E5                  		push	hl			; Save hl patt pos
(1)  778/     312 : FD E5               		push	iy
(1)  779/     314 : E1                  		pop	hl
(1)  780/     315 : DD 21 00 1E         		ld	ix,trkChnls		; ix - Channels buffer
(1)  781/     319 : 11 26 00            		ld	de,trk_ChnIndx		; <-- this also clears d
(1)  782/     31C : CF                  		rst	8
(1)  783/     31D : 19                  		add	hl,de			; hl - Track's index points buffer
(1)  784/     31E : 79                  		ld	a,c			; Get patt note position
(1)  785/     31F : E6 1F               		and	00011111b		; Filter index bits
(1)  786/     321 : 5F                  		ld	e,a			; Save as e
(1)  787/     322 : 19                  		add	hl,de			; Increment more by this pos
(1)  788/     323 : 7E                  		ld	a,(hl)			; Check if this index is occupied.
(1)  789/     324 : B7                  		or	a
(1)  790/     325 : 28 0A               		jr	z,.srch_new		; If == 0, new index
(1)  791/     327 : E6 1F               		and	00011111b		; If already used, read that channel
(1)  792/     329 : 87                  		add	a,a
(1)  793/     32A : 87                  		add	a,a
(1)  794/     32B : 87                  		add	a,a
(1)  795/     32C : 5F                  		ld	e,a
(1)  796/     32D : DD 19               		add	ix,de
(1)  797/     32F : 18 2B               		jr	.cont_chnl
(1)  798/     331 :                     
(1)  799/     331 :                     ; Make NEW channel
(1)  800/     331 :                     ; ix - channel list start
(1)  801/     331 :                     .srch_new:
(1)  802/     331 : CF                  		rst	8
(1)  803/     332 : 06 1F               		ld	b,MAX_TRKCHN-1	; Max channels to check - 1
(1)  804/     334 : 16 00               		ld	d,0		; Reset out index
(1)  805/     336 :                     .next_chnl:
(1)  806/     336 : DD 7E 00            		ld	a,(ix)		; Read chnl_Flags
(1)  807/     339 : B7                  		or	a		; If plus, track channel is free
(1)  808/     33A : F2 51 03            		jp	p,.chnl_free
(1)  809/     33D : DD 23               		inc	ix		; Search next channel, increment by 8
(1)  810/     33F : DD 23               		inc	ix
(1)  811/     341 : DD 23               		inc	ix
(1)  812/     343 : DD 23               		inc	ix
(1)  813/     345 : CF                  		rst	8
(1)  814/     346 : DD 23               		inc	ix
(1)  815/     348 : DD 23               		inc	ix
(1)  816/     34A : DD 23               		inc	ix
(1)  817/     34C : DD 23               		inc	ix
(1)  818/     34E : 14                  		inc	d		; Increment out index
(1)  819/     34F : 10 E5               		djnz	.next_chnl
(1)  820/     351 :                     .chnl_free:
(1)  821/     351 : CF                  		rst	8
(1)  822/     352 : 7A                  		ld	a,d			; Read index we got
(1)  823/     353 : E6 1F               		and	00011111b		; Filter bits
(1)  824/     355 : F6 80               		or	10000000b		; + set as used
(1)  825/     357 : 77                  		ld	(hl),a			; Write index slot
(1)  826/     358 : DD CB 00 FE         		set	7,(ix+chnl_Flags)	; Enable channel on the list
(1)  827/     35C :                     .cont_chnl:
(1)  828/     35C : E1                  		pop	hl			; Recover patt pos
(1)  829/     35D :                     	; ix - current channel
(1)  830/     35D : CF                  		rst	8
(1)  831/     35E : DD 46 07            		ld	b,(ix+chnl_Type)	; b - current TYPE byte
(1)  832/     361 : CB 71               		bit	6,c			; This byte has new TYPE setting?
(1)  833/     363 : 28 08               		jr	z,.old_type
(1)  834/     365 : 7E                  		ld	a,(hl)
(1)  835/     366 : DD 77 07            		ld	(ix+chnl_Type),a	; Update TYPE byte
(1)  836/     369 : 47                  		ld	b,a			; Set to b
(1)  837/     36A : CD 08 04            		call	.inc_cpatt		; Next patt pos
(1)  838/     36D :                     .old_type:
(1)  839/     36D :                     	; b - evinEVIN
(1)  840/     36D :                     	;     E-effect/V-volume/I-instrument/N-note
(1)  841/     36D :                     	;     evin: byte is already stored on track-channel buffer
(1)  842/     36D :                     	;     EVIN: next byte(s) contain a new value. for eff:2 bytes
(1)  843/     36D :                     
(1)  844/     36D : CF                  		rst	8
(1)  845/     36E : CB 40               		bit	0,b			; New NOTE?
(1)  846/     370 : 28 07               		jr	z,.no_note
(1)  847/     372 : 7E                  		ld	a,(hl)			; Set NOTE and increment patt
(1)  848/     373 : DD 77 02            		ld	(ix+chnl_Note),a
(1)  849/     376 : CD 08 04            		call	.inc_cpatt
(1)  850/     379 :                     .no_note:
(1)  851/     379 : CB 48               		bit	1,b			; New INS?
(1)  852/     37B : 28 07               		jr	z,.no_ins
(1)  853/     37D : 7E                  		ld	a,(hl)			; Set INS and increment patt
(1)  854/     37E : DD 77 03            		ld	(ix+chnl_Ins),a
(1)  855/     381 : CD 08 04            		call	.inc_cpatt
(1)  856/     384 :                     .no_ins:
(1)  857/     384 : CB 50               		bit	2,b			; New VOL?
(1)  858/     386 : 28 07               		jr	z,.no_vol
(1)  859/     388 : 7E                  		ld	a,(hl)			; Set VOL and increment patt
(1)  860/     389 : DD 77 04            		ld	(ix+chnl_Vol),a
(1)  861/     38C : CD 08 04            		call	.inc_cpatt
(1)  862/     38F :                     .no_vol:
(1)  863/     38F : CB 58               		bit	3,b			; New EFFECT?
(1)  864/     391 : 28 0F               		jr	z,.no_eff
(1)  865/     393 : 7E                  		ld	a,(hl)			; Set EFFECT ID, incr patt
(1)  866/     394 : DD 77 05            		ld	(ix+chnl_EffId),a
(1)  867/     397 : CD 08 04            		call	.inc_cpatt
(1)  868/     39A : CF                  		rst	8
(1)  869/     39B : 7E                  		ld	a,(hl)			; Set EFFECT ARG, incr patt
(1)  870/     39C : DD 77 06            		ld	(ix+chnl_EffArg),a
(1)  871/     39F : CD 08 04            		call	.inc_cpatt
(1)  872/     3A2 :                     .no_eff:
(1)  873/     3A2 : 78                  		ld	a,b			; Merge the Impulse evin bits into main EVIN bits
(1)  874/     3A3 : 0F                  		rrca
(1)  875/     3A4 : 0F                  		rrca
(1)  876/     3A5 : 0F                  		rrca
(1)  877/     3A6 : 0F                  		rrca
(1)  878/     3A7 : E6 0F               		and	00001111b		; Filter bits
(1)  879/     3A9 : 4F                  		ld	c,a			; Save as c
(1)  880/     3AA : 78                  		ld	a,b
(1)  881/     3AB : E6 0F               		and	00001111b		; Filter again
(1)  882/     3AD : B1                  		or	c			; Merge c with a
(1)  883/     3AE : CF                  		rst	8
(1)  884/     3AF : 4F                  		ld	c,a			; Save bit flags
(1)  885/     3B0 : DD 7E 00            		ld	a,(ix+chnl_Flags)
(1)  886/     3B3 : B1                  		or	c
(1)  887/     3B4 : DD 77 00            		ld	(ix+chnl_Flags),a
(1)  888/     3B7 :                     	; Check for effects that affect
(1)  889/     3B7 :                     	; internal playback:
(1)  890/     3B7 :                     	; Jump, Ticks, etc.
(1)  891/     3B7 : C1                  		pop	bc		; Restore rowcount
(1)  892/     3B8 : DD 7E 00            		ld	a,(ix+chnl_Flags)
(1)  893/     3BB : E6 08               		and	1000b		; ONLY check for the EFFECT bit
(1)  894/     3BD : CA E4 02            		jp	z,.next_note
(1)  895/     3C0 : DD 7E 05            		ld	a,(ix+chnl_EffId)
(1)  896/     3C3 : B7                  		or	a		; 00h = invalid effect
(1)  897/     3C4 : CA E4 02            		jp	z,.next_note
(1)  898/     3C7 : FE 01               		cp	1		; Effect A: Tick set
(1)  899/     3C9 : 28 0B               		jr	z,.eff_A
(1)  900/     3CB : FE 02               		cp	2		; Effect B: Position Jump
(1)  901/     3CD : 28 18               		jr	z,.eff_B
(1)  902/     3CF : FE 03               		cp	3		; Effect C: Pattern break
(1)  903/     3D1 : 28 32               		jr	z,.eff_C	; <-- JUMP and exit.
(1)  904/     3D3 : C3 E4 02            		jp	.next_note
(1)  905/     3D6 :                     
(1)  906/     3D6 :                     ; ----------------------------------------
(1)  907/     3D6 :                     ; Effect A: Set ticks
(1)  908/     3D6 :                     ; ----------------------------------------
(1)  909/     3D6 :                     
(1)  910/     3D6 :                     .eff_A:
(1)  911/     3D6 : CF                  		rst	8
(1)  912/     3D7 : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - ticks number
(1)  913/     3DA : FD 73 03            		ld	(iy+trk_TickSet),e	; set for both Set and Timer.
(1)  914/     3DD : FD 73 12            		ld	(iy+trk_tickTmr),e
(1)  915/     3E0 : DD CB 00 9E         		res	3,(ix+chnl_Flags)	; <-- Clear EFFECT bit
(1)  916/     3E4 : C3 E4 02            		jp	.next_note
(1)  917/     3E7 :                     
(1)  918/     3E7 :                     ; ----------------------------------------
(1)  919/     3E7 :                     ; Effect B: jump to a new block
(1)  920/     3E7 :                     ; ----------------------------------------
(1)  921/     3E7 :                     
(1)  922/     3E7 :                     .eff_B:
(1)  923/     3E7 : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - Block SLOT to jump
(1)  924/     3EA : FD 73 13            		ld 	(iy+trk_currBlk),e
(1)  925/     3ED : CF                  		rst	8
(1)  926/     3EE : FD 36 11 00         		ld	(iy+trk_rowPause),0	; Reset rowpause
(1)  927/     3F2 : DD CB 00 9E         		res	3,(ix+chnl_Flags)	; <-- Clear EFFECT bit
(1)  928/     3F6 : FD CB 00 EE         		set	5,(iy+trk_Status)	; set fill-from-effect flag on exit
(1)  929/     3FA : 3E 80               		ld	a,80h
(1)  930/     3FC : FD 77 16            		ld	(iy+trk_BankHeads),a
(1)  931/     3FF : FD 77 17            		ld	(iy+trk_BankBlk),a
(1)  932/     402 : C3 E4 02            		jp	.next_note
(1)  933/     405 :                     
(1)  934/     405 :                     ; ----------------------------------------
(1)  935/     405 :                     ; Effect C: Pattern break/exit
(1)  936/     405 :                     ;
(1)  937/     405 :                     ; Only used on SFX, arguments ignored.
(1)  938/     405 :                     ; ----------------------------------------
(1)  939/     405 :                     
(1)  940/     405 :                     .eff_C:
(1)  941/     405 : C3 19 05            		jp	.track_end
(1)  942/     408 :                     
(1)  943/     408 :                     ; ----------------------------------------
(1)  944/     408 :                     ; Increment the current patt position
(1)  945/     408 :                     ; and recieve more data
(1)  946/     408 :                     ;
(1)  947/     408 :                     ; Breaks:
(1)  948/     408 :                     ; a,e
(1)  949/     408 :                     ; ----------------------------------------
(1)  950/     408 :                     
(1)  951/     408 :                     .inc_cpatt:
(1)  952/     408 : FD 5E 08            		ld	e,(iy+trk_Cach)	; Read curret cache LSB
(1)  953/     40B : 7D                  		ld	a,l
(1)  954/     40C : 3C                  		inc	a
(1)  955/     40D : E6 1F               		and	MAX_RCACH-1
(1)  956/     40F : FE 1E               		cp	MAX_RCACH-2	; RAN OUT of bytes?
(1)  957/     411 : 30 03               		jr	nc,.ran_out
(1)  958/     413 : B3                  		or	e
(1)  959/     414 : 6F                  		ld	l,a
(1)  960/     415 : C9                  		ret
(1)  961/     416 :                     .ran_out:
(1)  962/     416 : FD 6E 08            		ld	l,(iy+trk_Cach)
(1)  963/     419 : E5                  		push	hl
(1)  964/     41A : C5                  		push	bc
(1)  965/     41B : 06 00               		ld	b,0
(1)  966/     41D : 4F                  		ld	c,a
(1)  967/     41E : CF                  		rst	8
(1)  968/     41F : 5D                  		ld	e,l
(1)  969/     420 : 54                  		ld	d,h
(1)  970/     421 : FD 6E 1A            		ld	l,(iy+trk_RomPattRead)
(1)  971/     424 : FD 66 1B            		ld	h,(iy+(trk_RomPattRead+1))
(1)  972/     427 : FD 7E 1C            		ld	a,(iy+(trk_RomPattRead+2))
(1)  973/     42A : 09                  		add	hl,bc
(1)  974/     42B : CE 00               		adc	a,0
(1)  975/     42D : FD 75 1A            		ld	(iy+trk_RomPattRead),l
(1)  976/     430 : FD 74 1B            		ld	(iy+(trk_RomPattRead+1)),h
(1)  977/     433 : CF                  		rst	8
(1)  978/     434 : FD 77 1C            		ld	(iy+(trk_RomPattRead+2)),a
(1)  979/     437 : 01 20 00            		ld	bc,MAX_RCACH
(1)  980/     43A : CD CC 0F            		call	transferRom	; *** ROM ACCESS ***
(1)  981/     43D : C1                  		pop	bc
(1)  982/     43E : E1                  		pop	hl
(1)  983/     43F : C9                  		ret
(1)  984/     440 :                     
(1)  985/     440 :                     ; ----------------------------------------
(1)  986/     440 :                     ; Set track pattern by trk_currBlk
(1)  987/     440 :                     ; ----------------------------------------
(1)  988/     440 :                     
(1)  989/     440 :                     .set_track:
(1)  990/     440 : FD 5E 04            		ld	e,(iy+trk_Blocks)
(1)  991/     443 : FD 56 05            		ld	d,(iy+(trk_Blocks+1))
(1)  992/     446 : FD 7E 13            		ld	a,(iy+trk_currBlk)
(1)  993/     449 : 4F                  		ld	c,a
(1)  994/     44A : C5                  		push	bc
(1)  995/     44B : D5                  		push	de
(1)  996/     44C : CF                  		rst	8
(1)  997/     44D : 0F                  		rrca
(1)  998/     44E : 0F                  		rrca
(1)  999/     44F : 0F                  		rrca
(1) 1000/     450 : E6 1F               		and	00011111b
(1) 1001/     452 : FD 4E 17            		ld	c,(iy+trk_BankBlk)	; c - current block bank
(1) 1002/     455 : CB 79               		bit	7,c			; First time?
(1) 1003/     457 : 20 03               		jr	nz,.first_blk
(1) 1004/     459 : B9                  		cp	c			; SAME instrument data?
(1) 1005/     45A : 28 1E               		jr	z,.keep_blk
(1) 1006/     45C :                     .first_blk:
(1) 1007/     45C : CF                  		rst	8
(1) 1008/     45D : FD 77 17            		ld	(iy+trk_BankBlk),a	; Save inst number
(1) 1009/     460 : 07                  		rlca
(1) 1010/     461 : 07                  		rlca
(1) 1011/     462 : 07                  		rlca
(1) 1012/     463 : 06 00               		ld	b,0
(1) 1013/     465 : 4F                  		ld	c,a
(1) 1014/     466 : FD 6E 23            		ld	l,(iy+trk_RomBlks)	; Transfer FIRST patt
(1) 1015/     469 : FD 66 24            		ld	h,(iy+(trk_RomBlks+1))	; packet
(1) 1016/     46C : FD 7E 25            		ld	a,(iy+(trk_RomBlks+2))
(1) 1017/     46F : E7                  		rst	20h
(1) 1018/     470 : CF                  		rst	8
(1) 1019/     471 : 09                  		add	hl,bc
(1) 1020/     472 : CE 00               		adc	a,0
(1) 1021/     474 : 01 08 00            		ld	bc,8			; 8 blocks stored
(1) 1022/     477 : CD CC 0F            		call	transferRom		; ** ROM ACCESS **
(1) 1023/     47A :                     .keep_blk:
(1) 1024/     47A : E1                  		pop	hl
(1) 1025/     47B : C1                  		pop	bc
(1) 1026/     47C : 79                  		ld	a,c
(1) 1027/     47D : E6 07               		and	00000111b
(1) 1028/     47F : CF                  		rst	8
(1) 1029/     480 : 16 00               		ld	d,0
(1) 1030/     482 : 5F                  		ld	e,a
(1) 1031/     483 : 19                  		add	hl,de
(1) 1032/     484 : 7E                  		ld	a,(hl)			; Read byte
(1) 1033/     485 : FE FF               		cp	-1			; If block == -1, end track
(1) 1034/     487 : CA 19 05            		jp	z,.track_end
(1) 1035/     48A : CF                  		rst	8
(1) 1036/     48B :                     
(1) 1037/     48B : FD 5E 06            		ld	e,(iy+trk_Patt)		; Read CACHE patt heads
(1) 1038/     48E : FD 56 07            		ld	d,(iy+(trk_Patt+1))
(1) 1039/     491 : 4F                  		ld	c,a
(1) 1040/     492 : D5                  		push	de
(1) 1041/     493 : C5                  		push	bc
(1) 1042/     494 : CF                  		rst	8
(1) 1043/     495 : 0F                  		rrca
(1) 1044/     496 : 0F                  		rrca
(1) 1045/     497 : 0F                  		rrca
(1) 1046/     498 : E6 1F               		and	00011111b
(1) 1047/     49A : FD 4E 16            		ld	c,(iy+trk_BankHeads)	; c - current intrument loaded
(1) 1048/     49D : CB 79               		bit	7,c			; First time?
(1) 1049/     49F : 20 03               		jr	nz,.first_head
(1) 1050/     4A1 : B9                  		cp	c			; SAME instrument data?
(1) 1051/     4A2 : 28 26               		jr	z,.keep_it
(1) 1052/     4A4 :                     .first_head:
(1) 1053/     4A4 : CF                  		rst	8
(1) 1054/     4A5 : FD 77 16            		ld	(iy+trk_BankHeads),a	; Save inst number
(1) 1055/     4A8 : 47                  		ld	b,a
(1) 1056/     4A9 : 0F                  		rrca
(1) 1057/     4AA : 0F                  		rrca
(1) 1058/     4AB : 0F                  		rrca
(1) 1059/     4AC : E6 E0               		and	11100000b
(1) 1060/     4AE : 4F                  		ld	c,a
(1) 1061/     4AF : 78                  		ld	a,b
(1) 1062/     4B0 : 0F                  		rrca
(1) 1063/     4B1 : 0F                  		rrca
(1) 1064/     4B2 : 0F                  		rrca
(1) 1065/     4B3 : E6 03               		and	00000011b
(1) 1066/     4B5 : 47                  		ld	b,a
(1) 1067/     4B6 :                     
(1) 1068/     4B6 : FD 6E 1D            		ld	l,(iy+trk_RomPatt)	; Transfer FIRST patt
(1) 1069/     4B9 : FD 66 1E            		ld	h,(iy+(trk_RomPatt+1))	; packet
(1) 1070/     4BC : FD 7E 1F            		ld	a,(iy+(trk_RomPatt+2))
(1) 1071/     4BF : E7                  		rst	20h
(1) 1072/     4C0 : CF                  		rst	8
(1) 1073/     4C1 : 09                  		add	hl,bc
(1) 1074/     4C2 : CE 00               		adc	a,0
(1) 1075/     4C4 : 01 20 00            		ld	bc,4*8			; 8 heads stored
(1) 1076/     4C7 : CD CC 0F            		call	transferRom		; ** ROM ACCESS **
(1) 1077/     4CA :                     .keep_it:
(1) 1078/     4CA : C1                  		pop	bc
(1) 1079/     4CB : 79                  		ld	a,c
(1) 1080/     4CC : E6 07               		and	00000111b
(1) 1081/     4CE : 87                  		add	a,a
(1) 1082/     4CF : 87                  		add	a,a
(1) 1083/     4D0 : 57                  		ld	d,a
(1) 1084/     4D1 : CF                  		rst	8
(1) 1085/     4D2 : E6 FC               		and	11111100b
(1) 1086/     4D4 : 5F                  		ld	e,a
(1) 1087/     4D5 : 7A                  		ld	a,d
(1) 1088/     4D6 : E6 03               		and	00000011b
(1) 1089/     4D8 : 57                  		ld	d,a
(1) 1090/     4D9 : E1                  		pop	hl
(1) 1091/     4DA : 19                  		add	hl,de
(1) 1092/     4DB : 5E                  		ld	e,(hl)			; de - Pos
(1) 1093/     4DC : 23                  		inc	hl
(1) 1094/     4DD : CF                  		rst	8
(1) 1095/     4DE : 56                  		ld	d,(hl)
(1) 1096/     4DF : 23                  		inc	hl
(1) 1097/     4E0 : 7E                  		ld	a,(hl)
(1) 1098/     4E1 : 23                  		inc	hl
(1) 1099/     4E2 : FD 77 0C            		ld	(iy+trk_Rows),a
(1) 1100/     4E5 : 7E                  		ld	a,(hl)
(1) 1101/     4E6 : 23                  		inc	hl
(1) 1102/     4E7 : FD 77 0D            		ld	(iy+(trk_Rows+1)),a
(1) 1103/     4EA : FD 6E 1D            		ld	l,(iy+trk_RomPatt)	; Transfer FIRST patt
(1) 1104/     4ED : FD 66 1E            		ld	h,(iy+(trk_RomPatt+1))	; packet
(1) 1105/     4F0 : CF                  		rst	8
(1) 1106/     4F1 : FD 7E 1F            		ld	a,(iy+(trk_RomPatt+2))
(1) 1107/     4F4 : 19                  		add	hl,de
(1) 1108/     4F5 : CE 00               		adc	a,0
(1) 1109/     4F7 : FD 75 1A            		ld	(iy+trk_RomPattRead),l
(1) 1110/     4FA : FD 74 1B            		ld	(iy+(trk_RomPattRead+1)),h
(1) 1111/     4FD : FD 77 1C            		ld	(iy+(trk_RomPattRead+2)),a
(1) 1112/     500 : FD 5E 08            		ld	e,(iy+trk_Cach)
(1) 1113/     503 : FD 56 09            		ld	d,(iy+(trk_Cach+1))
(1) 1114/     506 :                     
(1) 1115/     506 : FD 73 0A            		ld	(iy+trk_Read),e
(1) 1116/     509 : FD 72 0B            		ld	(iy+(trk_Read+1)),d
(1) 1117/     50C : 0E 20               		ld	c,MAX_RCACH
(1) 1118/     50E : FD 36 10 00         		ld	(iy+trk_cachHalf),0
(1) 1119/     512 : FD 36 11 00         		ld	(iy+trk_rowPause),0
(1) 1120/     516 : C3 CC 0F            		jp	transferRom		; ** ROM access **
(1) 1121/     519 :                     
(1) 1122/     519 :                     ; ----------------------------------------
(1) 1123/     519 :                     ; **JUMP ONLY**
(1) 1124/     519 :                     .track_end:
(1) 1125/     519 : CD DC 05            		call	track_out
(1) 1126/     51C : CF                  		rst	8
(1) 1127/     51D : AF                  		xor	a
(1) 1128/     51E : FD 77 11            		ld	(iy+trk_rowPause),a
(1) 1129/     521 : FD 77 12            		ld	(iy+trk_tickTmr),a
(1) 1130/     524 : FD 77 00            		ld	(iy+trk_Status),a	; Disable track slot
(1) 1131/     527 : FD 36 15 80         		ld	(iy+trk_BankIns),80h
(1) 1132/     52B : C9                  		ret
(1) 1133/     52C :                     
(1) 1134/     52C :                     ; ----------------------------------------
(1) 1135/     52C :                     ; Track refill
(1) 1136/     52C :                     ; ----------------------------------------
(1) 1137/     52C :                     
(1) 1138/     52C :                     .effect_fill:
(1) 1139/     52C : FD CB 00 AE         		res	5,(iy+trk_Status)	; Reset refill-from-effect flag
(1) 1140/     530 : C3 40 04            		jp	.set_track
(1) 1141/     533 :                     
(1) 1142/     533 :                     ; ----------------------------------------
(1) 1143/     533 :                     ; Track Start/Reset
(1) 1144/     533 :                     ;
(1) 1145/     533 :                     ; iy - Track buffer
(1) 1146/     533 :                     ; ----------------------------------------
(1) 1147/     533 :                     
(1) 1148/     533 :                     .first_fill:
(1) 1149/     533 : FD CB 00 B6         		res	6,(iy+trk_Status)	; Clear FILL flag
(1) 1150/     537 : CD DC 05            		call	track_out
(1) 1151/     53A : FD 36 12 01         		ld	(iy+trk_tickTmr),1	; <-- Reset tick timer
(1) 1152/     53E : FD 7E 02            		ld	a,(iy+trk_SetBlk)	; Make start block as current block
(1) 1153/     541 : CF                  		rst	8
(1) 1154/     542 : FD 77 13            		ld 	(iy+trk_currBlk),a	; block
(1) 1155/     545 : FD 7E 01            		ld	a,(iy+trk_SeqId)
(1) 1156/     548 : FE FF               		cp	-1			; TODO
(1) 1157/     54A : C8                  		ret	z
(1) 1158/     54B : 87                  		add	a,a
(1) 1159/     54C : 87                  		add	a,a
(1) 1160/     54D : 16 00               		ld	d,0
(1) 1161/     54F : 5F                  		ld	e,a
(1) 1162/     550 : 21 1C 00            		ld	hl,gemaMstrListPos
(1) 1163/     553 : 23                  		inc	hl
(1) 1164/     554 : 7E                  		ld	a,(hl)		; $00xx0000
(1) 1165/     555 : 23                  		inc	hl
(1) 1166/     556 : 4E                  		ld	c,(hl)		; $0000xx00
(1) 1167/     557 : 23                  		inc	hl
(1) 1168/     558 : 6E                  		ld	l,(hl)		; $000000xx
(1) 1169/     559 : CF                  		rst	8
(1) 1170/     55A : 61                  		ld	h,c
(1) 1171/     55B : 19                  		add	hl,de
(1) 1172/     55C : CE 00               		adc	a,0
(1) 1173/     55E : 11 AF 1C            		ld	de,trkInfoCach
(1) 1174/     561 : D5                  		push	de
(1) 1175/     562 : 01 04 00            		ld	bc,4
(1) 1176/     565 : CD CC 0F            		call	transferRom	; *** ROM ACCESS ***
(1) 1177/     568 : E1                  		pop	hl
(1) 1178/     569 : 7E                  		ld	a,(hl)
(1) 1179/     56A : 23                  		inc	hl
(1) 1180/     56B : CB 7F               		bit	7,a
(1) 1181/     56D : 28 04               		jr	z,.no_glbl
(1) 1182/     56F : FD CB 00 C6         		set	0,(iy+trk_Status)	; Enable GLOBAL sub-beats
(1) 1183/     573 :                     .no_glbl:
(1) 1184/     573 : CF                  		rst	8
(1) 1185/     574 : E6 7F               		and	01111111b
(1) 1186/     576 : FD 77 03            		ld	(iy+trk_TickSet),a
(1) 1187/     579 : 7E                  		ld	a,(hl)			; Read and temporally
(1) 1188/     57A : 23                  		inc	hl			; grab it's pointers
(1) 1189/     57B : 4E                  		ld	c,(hl)
(1) 1190/     57C : 23                  		inc	hl
(1) 1191/     57D : 6E                  		ld	l,(hl)
(1) 1192/     57E : 61                  		ld	h,c
(1) 1193/     57F : 11 9F 1C            		ld	de,headerOut
(1) 1194/     582 : 0E 0E               		ld	c,0Eh
(1) 1195/     584 : CD CC 0F            		call	transferRom		; ** ROM access **
(1) 1196/     587 : DD 21 AC 1C         		ld	ix,headerOut_e-1	; Read temp header BACKWARDS
(1) 1197/     58B : CF                  		rst	8
(1) 1198/     58C :                     
(1) 1199/     58C :                     	; headerOut:
(1) 1200/     58C :                     	; dc.w numof_chnls
(1) 1201/     58C :                     	; dc.l .blk,.pat,.ins
(1) 1202/     58C :                     	; *** READING BACKWARDS
(1) 1203/     58C : CD C9 05            		call	.grab_rhead		; Instrument data
(1) 1204/     58F : FD 75 20            		ld	(iy+trk_RomInst),l
(1) 1205/     592 : FD 74 21            		ld	(iy+(trk_RomInst+1)),h
(1) 1206/     595 : FD 70 22            		ld	(iy+(trk_RomInst+2)),b
(1) 1207/     598 : FD 36 15 80         		ld	(iy+trk_BankIns),80h	; Reset instrument banking
(1) 1208/     59C : E7                  		rst	20h
(1) 1209/     59D : CF                  		rst	8
(1) 1210/     59E : CD C9 05            		call	.grab_rhead		; Pattern heads
(1) 1211/     5A1 : FD 75 1D            		ld	(iy+trk_RomPatt),l	; Save ROM patt base
(1) 1212/     5A4 : FD 74 1E            		ld	(iy+(trk_RomPatt+1)),h
(1) 1213/     5A7 : FD 70 1F            		ld	(iy+(trk_RomPatt+2)),b
(1) 1214/     5AA : FD 36 16 80         		ld	(iy+trk_BankHeads),80h	; Reset pattern banking
(1) 1215/     5AE : CF                  		rst	8
(1) 1216/     5AF : CD C9 05            		call	.grab_rhead		; Block data
(1) 1217/     5B2 : FD 75 23            		ld	(iy+trk_RomBlks),l	; Save ROM patt base
(1) 1218/     5B5 : FD 74 24            		ld	(iy+(trk_RomBlks+1)),h
(1) 1219/     5B8 : FD 70 25            		ld	(iy+(trk_RomBlks+2)),b
(1) 1220/     5BB : FD 36 17 80         		ld	(iy+trk_BankBlk),80h	; Reset pattern banking
(1) 1221/     5BF : CF                  		rst	8
(1) 1222/     5C0 : DD 7E 00            		ld	a,(ix)			; dc.w numof_chnls
(1) 1223/     5C3 : FD 77 18            		ld	(iy+trk_MaxChnl),a
(1) 1224/     5C6 : C3 40 04            		jp	.set_track
(1) 1225/     5C9 :                     
(1) 1226/     5C9 :                     ; Read 68K pointer:
(1) 1227/     5C9 :                     ; hl - 00xxxx
(1) 1228/     5C9 :                     ;  b - xx0000
(1) 1229/     5C9 :                     .grab_rhead:
(1) 1230/     5C9 : DD 6E 00            		ld	l,(ix)
(1) 1231/     5CC : DD 2B               		dec	ix
(1) 1232/     5CE : DD 66 00            		ld	h,(ix)
(1) 1233/     5D1 : CF                  		rst	8
(1) 1234/     5D2 : DD 2B               		dec	ix
(1) 1235/     5D4 : DD 46 00            		ld	b,(ix)
(1) 1236/     5D7 : DD 2B               		dec	ix
(1) 1237/     5D9 :                     ; 		ld	c,(ix)
(1) 1238/     5D9 : DD 2B               		dec	ix
(1) 1239/     5DB : C9                  		ret
(1) 1240/     5DC :                     
(1) 1241/     5DC :                     ; ----------------------------------------
(1) 1242/     5DC :                     ; Reset tracker channels
(1) 1243/     5DC :                     ;
(1) 1244/     5DC :                     ; iy - Track buffer
(1) 1245/     5DC :                     ;
(1) 1246/     5DC :                     ; Breaks:
(1) 1247/     5DC :                     ; b ,de,hl,ix
(1) 1248/     5DC :                     ; ----------------------------------------
(1) 1249/     5DC :                     
(1) 1250/     5DC :                     track_out:
(1) 1251/     5DC : FD E5               		push	iy
(1) 1252/     5DE : E1                  		pop	hl
(1) 1253/     5DF : DD 21 00 1E         		ld	ix,trkChnls
(1) 1254/     5E3 : CF                  		rst	8
(1) 1255/     5E4 : 11 26 00            		ld	de,trk_ChnIndx
(1) 1256/     5E7 : 19                  		add	hl,de
(1) 1257/     5E8 : 06 1A               		ld	b,MAX_TRKINDX
(1) 1258/     5EA :                     .indx_del:
(1) 1259/     5EA : 7E                  		ld	a,(hl)
(1) 1260/     5EB : B7                  		or	a
(1) 1261/     5EC : 28 2A               		jr	z,.nothin
(1) 1262/     5EE : CF                  		rst	8
(1) 1263/     5EF : DD E5               		push	ix
(1) 1264/     5F1 : E6 1F               		and	00011111b
(1) 1265/     5F3 : 87                  		add	a,a
(1) 1266/     5F4 : 87                  		add	a,a
(1) 1267/     5F5 : 87                  		add	a,a
(1) 1268/     5F6 : 5F                  		ld	e,a
(1) 1269/     5F7 : CF                  		rst	8
(1) 1270/     5F8 : DD 19               		add	ix,de
(1) 1271/     5FA : AF                  		xor	a
(1) 1272/     5FB : DD 36 02 FE         		ld	(ix+chnl_Note),-2
(1) 1273/     5FF : DD 36 00 01         		ld	(ix+chnl_Flags),1
(1) 1274/     603 : DD 36 04 40         		ld	(ix+chnl_Vol),64
(1) 1275/     607 : DD 77 05            		ld	(ix+chnl_EffId),a
(1) 1276/     60A : CF                  		rst	8
(1) 1277/     60B : DD 77 06            		ld	(ix+chnl_EffArg),a
(1) 1278/     60E : DD 77 03            		ld	(ix+chnl_Ins),a
(1) 1279/     611 : DD 77 07            		ld	(ix+chnl_Type),a
(1) 1280/     614 : DD E1               		pop	ix
(1) 1281/     616 : 77                  		ld	(hl),a
(1) 1282/     617 : 00                  		nop
(1) 1283/     618 :                     .nothin:
(1) 1284/     618 : 23                  		inc	hl
(1) 1285/     619 : 10 CF               		djnz	.indx_del
(1) 1286/     61B : 3E 01               		ld	a,1
(1) 1287/     61D : 32 8A 1C            		ld	(marsUpd),a
(1) 1288/     620 : C9                  		ret
(1) 1289/     621 :                     
(1) 1290/     621 :                     ; ============================================================
(1) 1291/     621 :                     ; --------------------------------------------------------
(1) 1292/     621 :                     ; Process track channels to the sound chips
(1) 1293/     621 :                     ; --------------------------------------------------------
(1) 1294/     621 :                     
(1) 1295/     621 :                     set_chips:
(1) 1296/     621 : E7                  		rst	20h			; Refill wave
(1) 1297/     622 : CD AB 0F            		call	get_tick
(1) 1298/     625 : FD 21 68 14         		ld	iy,nikona_BuffList
(1) 1299/     629 :                     .trk_buffrs:
(1) 1300/     629 : FD 7E 00            		ld	a,(iy)
(1) 1301/     62C : FE FF               		cp	-1
(1) 1302/     62E : 28 0F               		jr	z,proc_chips
(1) 1303/     630 : CF                  		rst	8
(1) 1304/     631 : FD E5               		push	iy
(1) 1305/     633 : CD 68 06            		call	tblbuff_read
(1) 1306/     636 : FD E1               		pop	iy
(1) 1307/     638 : 11 08 00            		ld	de,MAX_BUFFNTRY
(1) 1308/     63B : FD 19               		add	iy,de
(1) 1309/     63D : 18 EA               		jr	.trk_buffrs
(1) 1310/     63F :                     proc_chips:
(1) 1311/     63F : E7                  		rst	20h			; Refill wave
(1) 1312/     640 : CF                  		rst	8
(1) 1313/     641 : FD 21 5A 1A         		ld	iy,tblPSGN		; PSG Noise
(1) 1314/     645 : CD 5A 08            		call	dtbl_singl
(1) 1315/     648 : CF                  		rst	8
(1) 1316/     649 : FD 21 10 1A         		ld	iy,tblPSG		; PSG Squares
(1) 1317/     64D : CD 44 08            		call	dtbl_multi
(1) 1318/     650 : CF                  		rst	8
(1) 1319/     651 : FD 21 72 1A         		ld	iy,tblFM		; FM/FM3/DAC
(1) 1320/     655 : CD 44 08            		call	dtbl_multi
(1) 1321/     658 : CF                  		rst	8
(1) 1322/     659 : FD 21 04 1B         		ld	iy,tblPCM		; SEGA CD PCM
(1) 1323/     65D : CD 44 08            		call	dtbl_multi
(1) 1324/     660 : CF                  		rst	8
(1) 1325/     661 : FD 21 C6 1B         		ld	iy,tblPWM		; 32X PWM
(1) 1326/     665 : C3 44 08            		jp	dtbl_multi
(1) 1327/     668 :                     
(1) 1328/     668 :                     ; ----------------------------------------
(1) 1329/     668 :                     ; Read current track
(1) 1330/     668 :                     ;
(1) 1331/     668 :                     ; iy - Buffer
(1) 1332/     668 :                     tblbuff_read:
(1) 1333/     668 : FD 6E 00            		ld	l,(iy)
(1) 1334/     66B : FD 66 01            		ld	h,(iy+1)
(1) 1335/     66E : CD AB 0F            		call	get_tick
(1) 1336/     671 : CF                  		rst	8
(1) 1337/     672 : E5                  		push	hl
(1) 1338/     673 : FD E1               		pop	iy
(1) 1339/     675 : FD 46 00            		ld	b,(iy+trk_Status)	; bit7: Track active?
(1) 1340/     678 : CB 78               		bit	7,b
(1) 1341/     67A : C8                  		ret	z
(1) 1342/     67B : 78                  		ld	a,b			; trk_Status == -1?
(1) 1343/     67C : FE FF               		cp	-1
(1) 1344/     67E : C2 88 06            		jp	nz,.track_cont
(1) 1345/     681 : CD DC 05            		call	track_out
(1) 1346/     684 : FD 36 00 00         		ld	(iy+trk_Status),0
(1) 1347/     688 :                     .track_cont:
(1) 1348/     688 : E7                  		rst	20h
(1) 1349/     689 : FD E5               		push	iy
(1) 1350/     68B : E1                  		pop	hl
(1) 1351/     68C : CF                  		rst	8
(1) 1352/     68D : DD 21 00 1E         		ld	ix,trkChnls
(1) 1353/     691 : 11 26 00            		ld	de,trk_ChnIndx
(1) 1354/     694 : 19                  		add	hl,de
(1) 1355/     695 : FD 7E 18            		ld	a,(iy+trk_MaxChnl)	; LAZY MODE: If zero, Read ALL channels
(1) 1356/     698 : B7                  		or	a
(1) 1357/     699 : 20 02               		jr	nz,.valid
(1) 1358/     69B : 3E 1A               		ld	a,MAX_TRKINDX
(1) 1359/     69D :                     .valid:
(1) 1360/     69D : CF                  		rst	8
(1) 1361/     69E : 47                  		ld	b,a
(1) 1362/     69F :                     .next_indx:
(1) 1363/     69F : 7E                  		ld	a,(hl)			; Read index
(1) 1364/     6A0 : B7                  		or	a
(1) 1365/     6A1 : 20 0B               		jr	nz,.has_indx		; If non-zero: valid
(1) 1366/     6A3 : C5                  		push	bc			; ** wave sync
(1) 1367/     6A4 : 06 04               		ld	b,4
(1) 1368/     6A6 : 00                  		nop
(1) 1369/     6A7 : 00                  		nop
(1) 1370/     6A8 : CF                  		rst	8
(1) 1371/     6A9 : 10 FE               		djnz	$
(1) 1372/     6AB : C1                  		pop	bc			; **
(1) 1373/     6AC : 18 1C               		jr	.no_indx
(1) 1374/     6AE :                     .has_indx:
(1) 1375/     6AE : E6 1F               		and	00011111b
(1) 1376/     6B0 : 87                  		add	a,a
(1) 1377/     6B1 : 87                  		add	a,a
(1) 1378/     6B2 : 87                  		add	a,a
(1) 1379/     6B3 : CF                  		rst	8
(1) 1380/     6B4 : 16 00               		ld	d,0
(1) 1381/     6B6 : 5F                  		ld	e,a
(1) 1382/     6B7 : C5                  		push	bc
(1) 1383/     6B8 : E5                  		push	hl
(1) 1384/     6B9 : DD E5               		push	ix
(1) 1385/     6BB : DD 19               		add	ix,de
(1) 1386/     6BD : DD 7E 00            		ld	a,(ix)			; Read 0000evin
(1) 1387/     6C0 : E6 0F               		and	00001111b
(1) 1388/     6C2 : C4 D2 06            		call	nz,.do_chip		; Call if non-zero
(1) 1389/     6C5 : CF                  		rst	8
(1) 1390/     6C6 : DD E1               		pop	ix
(1) 1391/     6C8 : E1                  		pop	hl
(1) 1392/     6C9 : C1                  		pop	bc
(1) 1393/     6CA :                     .no_indx:
(1) 1394/     6CA : 23                  		inc	hl
(1) 1395/     6CB : 10 D2               		djnz	.next_indx
(1) 1396/     6CD : FD CB 00 9E         		res	3,(iy+trk_Status)	; RESET Volume update bit
(1) 1397/     6D1 : C9                  		ret
(1) 1398/     6D2 :                     
(1) 1399/     6D2 :                     ; ----------------------------------------
(1) 1400/     6D2 :                     ; iy - Track buffer
(1) 1401/     6D2 :                     ; ix - Current channel
(1) 1402/     6D2 :                     
(1) 1403/     6D2 :                     .do_chip:
(1) 1404/     6D2 : DD 7E 03            		ld	a,(ix+chnl_Ins)		; Check intrument type FIRST
(1) 1405/     6D5 : B7                  		or	a
(1) 1406/     6D6 : C8                  		ret	z			; If 0 == stop
(1) 1407/     6D7 : CF                  		rst	8
(1) 1408/     6D8 : 3D                  		dec	a			; inst-1
(1) 1409/     6D9 : E6 7F               		and	01111111b
(1) 1410/     6DB : 21 AF 1C            		ld	hl,instListOut		; hl - Temporal storage for instrument
(1) 1411/     6DE : FD 4E 15            		ld	c,(iy+trk_BankIns)	;  c - Current intrument loaded
(1) 1412/     6E1 : CB 79               		bit	7,c			; First time?
(1) 1413/     6E3 : 20 03               		jr	nz,.first_ins
(1) 1414/     6E5 : B9                  		cp	c			; SAME instrument data?
(1) 1415/     6E6 : 28 24               		jr	z,.keep_it
(1) 1416/     6E8 :                     .first_ins:
(1) 1417/     6E8 : E5                  		push	hl
(1) 1418/     6E9 : FD 77 15            		ld	(iy+trk_BankIns),a	; Save inst number
(1) 1419/     6EC : 07                  		rlca
(1) 1420/     6ED : 07                  		rlca
(1) 1421/     6EE : 07                  		rlca
(1) 1422/     6EF : 47                  		ld	b,a
(1) 1423/     6F0 : E6 F8               		and	11111000b
(1) 1424/     6F2 : 4F                  		ld	c,a
(1) 1425/     6F3 : 78                  		ld	a,b
(1) 1426/     6F4 : E6 07               		and	00000111b
(1) 1427/     6F6 : CF                  		rst	8
(1) 1428/     6F7 : 47                  		ld	b,a
(1) 1429/     6F8 : EB                  		ex	hl,de
(1) 1430/     6F9 : FD 6E 20            		ld	l,(iy+trk_RomInst)
(1) 1431/     6FC : FD 66 21            		ld	h,(iy+(trk_RomInst+1))
(1) 1432/     6FF : FD 7E 22            		ld	a,(iy+(trk_RomInst+2))
(1) 1433/     702 : 09                  		add	hl,bc
(1) 1434/     703 : CE 00               		adc	a,0
(1) 1435/     705 : 01 08 00            		ld	bc,8			; 8 bytes
(1) 1436/     708 : CD CC 0F            		call	transferRom		; ** ROM access **
(1) 1437/     70B : E1                  		pop	hl
(1) 1438/     70C :                     .keep_it:
(1) 1439/     70C : E5                  		push	hl			; <-- save hl
(1) 1440/     70D : CD 2A 07            		call	.grab_link
(1) 1441/     710 : D1                  		pop	de			; --> recover as de
(1) 1442/     711 :                     	; hl - current table
(1) 1443/     711 :                     	; de - instrument data
(1) 1444/     711 : FE FF               		cp	-1			; Found any link?
(1) 1445/     713 : C8                  		ret	z
(1) 1446/     714 : 23                  		inc	hl			; Skip link
(1) 1447/     715 : 23                  		inc	hl
(1) 1448/     716 : FD 7E 14            		ld	a,(iy+trk_Priority)
(1) 1449/     719 : 77                  		ld	(hl),a			; Write priority level
(1) 1450/     71A : 23                  		inc	hl
(1) 1451/     71B : FD 7E 0E            		ld	a,(iy+trk_VolMaster)
(1) 1452/     71E : 77                  		ld	(hl),a			; Write current MASTER volume
(1) 1453/     71F : 01 0D 00            		ld	bc,10h-3		; Move to instr data
(1) 1454/     722 : 09                  		add	hl,bc
(1) 1455/     723 : EB                  		ex	hl,de			; <-- swap for ldir
(1) 1456/     724 : 01 08 00            		ld	bc,8
(1) 1457/     727 : ED B0               		ldir				; COPYPASTE instr data from temporal
(1) 1458/     729 : C9                  		ret
(1) 1459/     72A :                     
(1) 1460/     72A :                     ; ----------------------------------------
(1) 1461/     72A :                     ; Search for a linked channel on the
(1) 1462/     72A :                     ; chip table
(1) 1463/     72A :                     ;
(1) 1464/     72A :                     ; Input:
(1) 1465/     72A :                     ; iy - Track buffer
(1) 1466/     72A :                     ; ix - Current channel
(1) 1467/     72A :                     ; hl - Intrument data
(1) 1468/     72A :                     ;
(1) 1469/     72A :                     ; Returns:
(1) 1470/     72A :                     ; hl - Channel table to use
(1) 1471/     72A :                     ;  a - Return value:
(1) 1472/     72A :                     ;       0 - Found
(1) 1473/     72A :                     ;      -1 - Not found
(1) 1474/     72A :                     ; ----------------------------------------
(1) 1475/     72A :                     
(1) 1476/     72A :                     .grab_link:
(1) 1477/     72A : 7E                  		ld	a,(hl)			; Check INSTRUMENT type
(1) 1478/     72B : E6 F0               		and	11110000b		; Filter bits
(1) 1479/     72D : 5F                  		ld	e,a			; e - NEW chip
(1) 1480/     72E : DD 7E 01            		ld	a,(ix+chnl_Chip)	; a - our current chip
(1) 1481/     731 : E6 F0               		and	11110000b		; Filter bits too.
(1) 1482/     733 : 28 6A               		jr	z,.new_chip		; If 0: It's a NEW chip
(1) 1483/     735 : BB                  		cp 	e			; Same chip as NEW?
(1) 1484/     736 : 28 10               		jr	z,.srch_link		; then re-use the slot
(1) 1485/     738 : CF                  		rst	8
(1) 1486/     739 : 57                  		ld	d,a			; d - Chip to silence
(1) 1487/     73A : D5                  		push	de
(1) 1488/     73B : CD 48 07            		call	.srch_link		; Search our link (first)
(1) 1489/     73E : D1                  		pop	de
(1) 1490/     73F : FE FF               		cp	-1
(1) 1491/     741 : C8                  		ret	z
(1) 1492/     742 : CF                  		rst	8
(1) 1493/     743 : CD 29 08            		call	.reset_link
(1) 1494/     746 : 18 57               		jr	.new_chip
(1) 1495/     748 :                     
(1) 1496/     748 :                     ; ----------------------------------------
(1) 1497/     748 :                     ; ** RELINK **
(1) 1498/     748 :                     ; e - Our current chip
(1) 1499/     748 :                     .srch_link:
(1) 1500/     748 : CD 0F 08            		call	.pick_tbl	; Pick chip table in hl
(1) 1501/     74B : DD E5               		push	ix		; copy ix to bc
(1) 1502/     74D : C1                  		pop	bc
(1) 1503/     74E : B7                  		or	a
(1) 1504/     74F : FA 8F 07            		jp	m,.singl_link
(1) 1505/     752 :                     .srch_lloop:
(1) 1506/     752 : 7E                  		ld	a,(hl)		; Read LSB
(1) 1507/     753 : FE FF               		cp	-1		; If -1, return -1
(1) 1508/     755 : 28 45               		jr	z,.refill
(1) 1509/     757 : B9                  		cp	c
(1) 1510/     758 : 20 07               		jr	nz,.invldl
(1) 1511/     75A : CF                  		rst	8
(1) 1512/     75B : 23                  		inc	hl
(1) 1513/     75C : 7E                  		ld	a,(hl)
(1) 1514/     75D : 2B                  		dec	hl
(1) 1515/     75E : B8                  		cp	b
(1) 1516/     75F : 28 08               		jr	z,.reroll
(1) 1517/     761 :                     .invldl:
(1) 1518/     761 : D5                  		push	de
(1) 1519/     762 : 11 18 00            		ld	de,MAX_TBLSIZE
(1) 1520/     765 :                     ; 		rst	8		; *** wave sync
(1) 1521/     765 :                     ; 		nop
(1) 1522/     765 : 19                  		add	hl,de
(1) 1523/     766 : D1                  		pop	de
(1) 1524/     767 : 18 E9               		jr	.srch_lloop
(1) 1525/     769 :                     .reroll:
(1) 1526/     769 :                     
(1) 1527/     769 :                     	; ----------------------------------------
(1) 1528/     769 :                     	; *** Special re-roll check ***
(1) 1529/     769 : E5                  		push	hl
(1) 1530/     76A : 01 04 00            		ld	bc,4		; <-- fake iy+04h
(1) 1531/     76D : 09                  		add	hl,bc
(1) 1532/     76E : CF                  		rst	8
(1) 1533/     76F : 4E                  		ld	c,(hl)		; c - ID
(1) 1534/     770 : E1                  		pop	hl
(1) 1535/     771 : 7B                  		ld	a,e
(1) 1536/     772 : FE 80               		cp	80h		; PSG?
(1) 1537/     774 : 28 02               		jr	z,.chk_psg
(1) 1538/     776 :                     ; 		cp	0A0h		; FM normal?
(1) 1539/     776 :                     ; 		jr	z,.chk_fm
(1) 1540/     776 : 18 22               		jr	.rnot_psg
(1) 1541/     778 :                     .chk_psg:
(1) 1542/     778 : 3A 81 1C            		ld	a,(psgHatMode)
(1) 1543/     77B : E6 03               		and	011b
(1) 1544/     77D : FE 03               		cp	011b
(1) 1545/     77F : 20 19               		jr	nz,.rnot_psg
(1) 1546/     781 : 79                  		ld	a,c
(1) 1547/     782 : FE 02               		cp	2
(1) 1548/     784 : 20 14               		jr	nz,.rnot_psg
(1) 1549/     786 : CF                  		rst	8
(1) 1550/     787 : 16 80               		ld	d,80h		; Set PSG silence
(1) 1551/     789 : CD 29 08            		call	.reset_link	; on PSG3
(1) 1552/     78C : C3 0C 08            		jp	.set_asfull
(1) 1553/     78F :                     
(1) 1554/     78F :                     ; ----------------------
(1) 1555/     78F :                     ; PSGN/FM3/FM6
(1) 1556/     78F :                     .singl_link:
(1) 1557/     78F : 23                  		inc	hl			; Read MSB first
(1) 1558/     790 : 7E                  		ld	a,(hl)
(1) 1559/     791 : 2B                  		dec	hl
(1) 1560/     792 : CF                  		rst	8
(1) 1561/     793 : B8                  		cp	b			; MSB match?
(1) 1562/     794 : 20 06               		jr	nz,.refill
(1) 1563/     796 : 7E                  		ld	a,(hl)			; Read LSB
(1) 1564/     797 : B9                  		cp	c
(1) 1565/     798 : 20 02               		jr	nz,.refill
(1) 1566/     79A :                     ; ----------------------
(1) 1567/     79A :                     .rnot_psg:
(1) 1568/     79A : AF                  		xor	a
(1) 1569/     79B : C9                  		ret
(1) 1570/     79C :                     ; ***
(1) 1571/     79C :                     .refill:
(1) 1572/     79C : DD 5E 01            		ld	e,(ix+chnl_Chip)
(1) 1573/     79F :                     
(1) 1574/     79F :                     ; ----------------------------------------
(1) 1575/     79F :                     ; *** NEW CHIP ***
(1) 1576/     79F :                     ; e - Chip to set
(1) 1577/     79F :                     .new_chip:
(1) 1578/     79F : 7B                  		ld	a,e			; Read NEW chip
(1) 1579/     7A0 : B7                  		or	a			; If non-minus, exit.
(1) 1580/     7A1 : F0                  		ret	p
(1) 1581/     7A2 : CD 0F 08            		call	.pick_tbl
(1) 1582/     7A5 : CF                  		rst	8
(1) 1583/     7A6 : FD 4E 14            		ld	c,(iy+trk_Priority)	; c - OUR priority level
(1) 1584/     7A9 : B7                  		or	a
(1) 1585/     7AA : FA FA 07            		jp	m,.singl_free
(1) 1586/     7AD : E5                  		push	hl			; Backup START table
(1) 1587/     7AE :                     ; PASS 1
(1) 1588/     7AE :                     .srch_free:
(1) 1589/     7AE : 7E                  		ld	a,(hl)			; Read LSB
(1) 1590/     7AF : FE FF               		cp	-1			; If -1, return -1
(1) 1591/     7B1 : 28 0B               		jr	z,.pass_2
(1) 1592/     7B3 : 23                  		inc	hl
(1) 1593/     7B4 : 46                  		ld	b,(hl)			; Read MSB
(1) 1594/     7B5 : 2B                  		dec	hl
(1) 1595/     7B6 :                     ; 		nop	; wave sync
(1) 1596/     7B6 :                     ; 		nop
(1) 1597/     7B6 :                     ; 		rst	8
(1) 1598/     7B6 :                     ; 		nop
(1) 1599/     7B6 :                     ; 		nop
(1) 1600/     7B6 : B0                  		or	b
(1) 1601/     7B7 : 28 24               		jr	z,.new_link_z
(1) 1602/     7B9 : CD D6 07            		call	.nextsrch_tbl
(1) 1603/     7BC : 18 F0               		jr	.srch_free
(1) 1604/     7BE :                     
(1) 1605/     7BE :                     ; PASS 2
(1) 1606/     7BE :                     ; Rewrite mode
(1) 1607/     7BE :                     .pass_2:
(1) 1608/     7BE : E1                  		pop	hl
(1) 1609/     7BF :                     .next_prio:
(1) 1610/     7BF : 7E                  		ld	a,(hl)		; Read LSB
(1) 1611/     7C0 : FE FF               		cp	-1		; If -1, return -1
(1) 1612/     7C2 : C8                  		ret	z
(1) 1613/     7C3 : 23                  		inc	hl
(1) 1614/     7C4 : 23                  		inc	hl
(1) 1615/     7C5 : 7E                  		ld	a,(hl)		; Read priority
(1) 1616/     7C6 : 2B                  		dec	hl
(1) 1617/     7C7 : 2B                  		dec	hl
(1) 1618/     7C8 : B9                  		cp	c
(1) 1619/     7C9 : 28 16               		jr	z,.new_link_o
(1) 1620/     7CB : 38 14               		jr	c,.new_link_o
(1) 1621/     7CD : B7                  		or	a
(1) 1622/     7CE : 28 11               		jr	z,.new_link_o
(1) 1623/     7D0 : CF                  		rst	8
(1) 1624/     7D1 : CD D6 07            		call	.nextsrch_tbl
(1) 1625/     7D4 : 18 E9               		jr	.next_prio
(1) 1626/     7D6 :                     .nextsrch_tbl:
(1) 1627/     7D6 : D5                  		push	de
(1) 1628/     7D7 : 11 18 00            		ld	de,MAX_TBLSIZE
(1) 1629/     7DA : 19                  		add	hl,de
(1) 1630/     7DB : D1                  		pop	de
(1) 1631/     7DC :                     ; 		nop	; wave sync
(1) 1632/     7DC :                     ; 		nop
(1) 1633/     7DC :                     ; 		rst	8
(1) 1634/     7DC :                     ; 		nop
(1) 1635/     7DC :                     ; 		nop
(1) 1636/     7DC : C9                  		ret
(1) 1637/     7DD :                     .new_link_z:
(1) 1638/     7DD : 33                  		inc	sp		; skip backup
(1) 1639/     7DE : 33                  		inc	sp
(1) 1640/     7DF : 18 08               		jr	.new_link
(1) 1641/     7E1 :                     
(1) 1642/     7E1 :                     ; OVERWRITE link
(1) 1643/     7E1 :                     .new_link_o:
(1) 1644/     7E1 : E5                  		push	hl
(1) 1645/     7E2 : DD 56 01            		ld	d,(ix+chnl_Chip)
(1) 1646/     7E5 : CD 29 08            		call	.reset_link
(1) 1647/     7E8 : E1                  		pop	hl
(1) 1648/     7E9 :                     ; NEW link
(1) 1649/     7E9 :                     .new_link:
(1) 1650/     7E9 : CF                  		rst	8
(1) 1651/     7EA : 23                  		inc	hl
(1) 1652/     7EB : 23                  		inc	hl
(1) 1653/     7EC :                     ; hl+2
(1) 1654/     7EC :                     .l_hiprio:
(1) 1655/     7EC : DD 73 01            		ld	(ix+chnl_Chip),e
(1) 1656/     7EF : DD E5               		push	ix
(1) 1657/     7F1 : D1                  		pop	de
(1) 1658/     7F2 : 71                  		ld	(hl),c		; write priority
(1) 1659/     7F3 : 2B                  		dec	hl
(1) 1660/     7F4 : CF                  		rst	8
(1) 1661/     7F5 : 72                  		ld 	(hl),d		; MSB
(1) 1662/     7F6 : 2B                  		dec	hl
(1) 1663/     7F7 : 73                  		ld	(hl),e		; LSB
(1) 1664/     7F8 : AF                  		xor	a
(1) 1665/     7F9 : C9                  		ret
(1) 1666/     7FA :                     
(1) 1667/     7FA :                     ; Single slot
(1) 1668/     7FA :                     ; c - priority
(1) 1669/     7FA :                     ; e - chip
(1) 1670/     7FA :                     .singl_free:
(1) 1671/     7FA : 46                  		ld	b,(hl)
(1) 1672/     7FB : 23                  		inc	hl
(1) 1673/     7FC : 7E                  		ld	a,(hl)
(1) 1674/     7FD : 23                  		inc	hl
(1) 1675/     7FE : B0                  		or	b
(1) 1676/     7FF : 28 EB               		jr	z,.l_hiprio
(1) 1677/     801 : CF                  		rst	8
(1) 1678/     802 : 7E                  		ld	a,(hl)
(1) 1679/     803 : B9                  		cp	c
(1) 1680/     804 : 28 E6               		jr	z,.l_hiprio
(1) 1681/     806 : 38 E4               		jr	c,.l_hiprio		; PRIORITY
(1) 1682/     808 : B7                  		or	a
(1) 1683/     809 : 28 E1               		jr	z,.l_hiprio
(1) 1684/     80B : CF                  		rst	8
(1) 1685/     80C :                     .set_asfull:
(1) 1686/     80C : 3E FF               		ld	a,-1			; Return -1, can't use instrument.
(1) 1687/     80E : C9                  		ret
(1) 1688/     80F :                     
(1) 1689/     80F :                     ; Pick chip table
(1) 1690/     80F :                     ; In:
(1) 1691/     80F :                     ;  a - ID
(1) 1692/     80F :                     ;
(1) 1693/     80F :                     ; Out:
(1) 1694/     80F :                     ;  a - Special bit + ID
(1) 1695/     80F :                     ;
(1) 1696/     80F :                     ; hl - Table
(1) 1697/     80F :                     .pick_tbl:
(1) 1698/     80F : D5                  		push	de
(1) 1699/     810 : 0F                  		rrca
(1) 1700/     811 : 0F                  		rrca
(1) 1701/     812 : 0F                  		rrca
(1) 1702/     813 : 0F                  		rrca
(1) 1703/     814 : E6 07               		and	00000111b
(1) 1704/     816 : 87                  		add	a,a
(1) 1705/     817 : 21 00 1A            		ld	hl,tblList
(1) 1706/     81A : E5                  		push	hl
(1) 1707/     81B : 16 00               		ld	d,0
(1) 1708/     81D : 5F                  		ld	e,a
(1) 1709/     81E : 19                  		add	hl,de
(1) 1710/     81F : 5E                  		ld	e,(hl)
(1) 1711/     820 : 23                  		inc	hl
(1) 1712/     821 : 7E                  		ld	a,(hl)
(1) 1713/     822 : 57                  		ld	d,a
(1) 1714/     823 : CB BA               		res	7,d
(1) 1715/     825 : E1                  		pop	hl
(1) 1716/     826 : 19                  		add	hl,de
(1) 1717/     827 : D1                  		pop	de
(1) 1718/     828 : C9                  		ret
(1) 1719/     829 :                     
(1) 1720/     829 :                     ; d - Silence chip
(1) 1721/     829 :                     ;
(1) 1722/     829 :                     ; Uses:
(1) 1723/     829 :                     ; bc
(1) 1724/     829 :                     .reset_link:
(1) 1725/     829 : CF                  		rst	8
(1) 1726/     82A : 36 00               		ld	(hl),0			; Delete link
(1) 1727/     82C : 23                  		inc	hl
(1) 1728/     82D : 36 00               		ld	(hl),0
(1) 1729/     82F : 23                  		inc	hl
(1) 1730/     830 : 72                  		ld	(hl),d			; Set "silence" chip ID.
(1) 1731/     831 : 23                  		inc	hl
(1) 1732/     832 : 36 00               		ld	(hl),0			; Clear master volume
(1) 1733/     834 : 01 05 00            		ld	bc,8-3			; Go to 08h
(1) 1734/     837 : 09                  		add	hl,bc
(1) 1735/     838 : 06 04               		ld	b,8/2
(1) 1736/     83A :                     .clrfull:
(1) 1737/     83A : 36 00               		ld	(hl),0			; Reset settings 08-0Bh
(1) 1738/     83C : 23                  		inc	hl
(1) 1739/     83D : 36 00               		ld	(hl),0
(1) 1740/     83F : 23                  		inc	hl
(1) 1741/     840 : CF                  		rst	8
(1) 1742/     841 : 10 F7               		djnz	.clrfull
(1) 1743/     843 : C9                  		ret
(1) 1744/     844 :                     
(1) 1745/     844 :                     ; ============================================
(1) 1746/     844 :                     ; ----------------------------------------
(1) 1747/     844 :                     ; Process chip using it's table
(1) 1748/     844 :                     ;
(1) 1749/     844 :                     ; iy - table to read
(1) 1750/     844 :                     ; ----------------------------------------
(1) 1751/     844 :                     
(1) 1752/     844 :                     dtbl_multi:
(1) 1753/     844 : FD 7E 00            		ld	a,(iy)
(1) 1754/     847 : FE FF               		cp	-1
(1) 1755/     849 : C8                  		ret	z
(1) 1756/     84A : CD 5A 08            		call	dtbl_singl
(1) 1757/     84D : CF                  		rst	8
(1) 1758/     84E : 11 18 00            		ld	de,MAX_TBLSIZE
(1) 1759/     851 : FD 19               		add	iy,de
(1) 1760/     853 : 06 03               		ld	b,3		; wave sync ** IMPORTANT **
(1) 1761/     855 : 10 FE               		djnz	$
(1) 1762/     857 : CF                  		rst	8
(1) 1763/     858 : 18 EA               		jr	dtbl_multi
(1) 1764/     85A :                     dtbl_singl:
(1) 1765/     85A : FD 5E 00            		ld	e,(iy)		; Read link
(1) 1766/     85D : FD 56 01            		ld	d,(iy+1)
(1) 1767/     860 : 7A                  		ld	a,d		; If no-zero, active
(1) 1768/     861 : B3                  		or	e
(1) 1769/     862 : 20 60               		jr	nz,.linked
(1) 1770/     864 : FD 7E 02            		ld	a,(iy+2)	; Silence request?
(1) 1771/     867 : B7                  		or	a
(1) 1772/     868 : F0                  		ret	p		; Return if not.
(1) 1773/     869 : CF                  		rst	8
(1) 1774/     86A : FD 36 02 00         		ld	(iy+2),0	; Reset request on memory
(1) 1775/     86E :                     
(1) 1776/     86E :                     ; ----------------------------------------
(1) 1777/     86E :                     ; chip-silence request
(1) 1778/     86E :                     ; iy - Table
(1) 1779/     86E : E6 F0               		and	11110000b
(1) 1780/     870 : FE 80               		cp	80h
(1) 1781/     872 : 28 1E               		jr	z,.siln_psg
(1) 1782/     874 : FE 90               		cp	90h
(1) 1783/     876 : 28 16               		jr	z,.siln_psg_n
(1) 1784/     878 : FE A0               		cp	0A0h
(1) 1785/     87A : 28 42               		jr	z,.siln_fm
(1) 1786/     87C : FE B0               		cp	0B0h
(1) 1787/     87E : 28 3E               		jr	z,.siln_fm
(1) 1788/     880 : CF                  		rst	8
(1) 1789/     881 : FE C0               		cp	0C0h
(1) 1790/     883 : 28 36               		jr	z,.siln_dac
(1) 1791/     885 : FE D0               		cp	0D0h
(1) 1792/     887 : 28 10               		jr	z,.siln_pcm
(1) 1793/     889 : FE E0               		cp	0E0h
(1) 1794/     88B : 28 18               		jr	z,.siln_pwm
(1) 1795/     88D : C9                  		ret
(1) 1796/     88E :                     .siln_psg_n:
(1) 1797/     88E : AF                  		xor	a
(1) 1798/     88F : 32 81 1C            		ld	(psgHatMode),a
(1) 1799/     892 :                     .siln_psg:
(1) 1800/     892 : CF                  		rst	8
(1) 1801/     893 : DD 21 02 15         		ld	ix,psgcom
(1) 1802/     897 : 18 16               		jr	.rcyl_com
(1) 1803/     899 :                     
(1) 1804/     899 :                     ; --------------------------------
(1) 1805/     899 :                     
(1) 1806/     899 :                     .siln_pcm:
(1) 1807/     899 : 3E 01               		ld	a,1
(1) 1808/     89B : 32 8B 1C            		ld	(mcdUpd),a
(1) 1809/     89E : CF                  		rst	8
(1) 1810/     89F : DD 21 8A 14         		ld	ix,pcmcom
(1) 1811/     8A3 : 18 0A               		jr	.rcyl_com
(1) 1812/     8A5 :                     .siln_pwm:
(1) 1813/     8A5 : 3E 01               		ld	a,1
(1) 1814/     8A7 : 32 8A 1C            		ld	(marsUpd),a
(1) 1815/     8AA : CF                  		rst	8
(1) 1816/     8AB : DD 21 CA 14         		ld	ix,pwmcom
(1) 1817/     8AF :                     ; 		jr	.rcyl_com
(1) 1818/     8AF :                     
(1) 1819/     8AF :                     ; --------------------------------
(1) 1820/     8AF :                     
(1) 1821/     8AF :                     .rcyl_com:
(1) 1822/     8AF : 06 00               		ld	b,0
(1) 1823/     8B1 : FD 4E 04            		ld	c,(iy+04h)
(1) 1824/     8B4 : DD 09               		add	ix,bc
(1) 1825/     8B6 : DD 36 00 04         		ld	(ix),100b	; key-cut
(1) 1826/     8BA : C9                  		ret
(1) 1827/     8BB :                     
(1) 1828/     8BB :                     ; --------------------------------
(1) 1829/     8BB :                     
(1) 1830/     8BB :                     .siln_dac:
(1) 1831/     8BB : CD 16 12            		call	dac_off
(1) 1832/     8BE :                     .siln_fm:
(1) 1833/     8BE : CD 91 0A            		call	.fm_keyoff
(1) 1834/     8C1 : C3 99 0A            		jp	.fm_tloff
(1) 1835/     8C4 :                     
(1) 1836/     8C4 :                     ; ----------------------------------------
(1) 1837/     8C4 :                     ; Process channel now
(1) 1838/     8C4 :                     ; iy - Table
(1) 1839/     8C4 :                     ; ix - Tracker channel
(1) 1840/     8C4 :                     .linked:
(1) 1841/     8C4 : 1A                  		ld	a,(de)		; ** chnl_Flags
(1) 1842/     8C5 : 47                  		ld	b,a		; b - flags to check
(1) 1843/     8C6 : E6 0F               		and	00001111b	; evin flags?
(1) 1844/     8C8 : C8                  		ret	z
(1) 1845/     8C9 : 78                  		ld	a,b
(1) 1846/     8CA : E6 F0               		and	11110000b	; Keep OTHER bits
(1) 1847/     8CC : 12                  		ld	(de),a		; ** clear chnl_Flags
(1) 1848/     8CD : D5                  		push	de
(1) 1849/     8CE : DD E1               		pop	ix
(1) 1850/     8D0 : FD E5               		push	iy		; table+10h instrment data
(1) 1851/     8D2 : E1                  		pop	hl
(1) 1852/     8D3 : 11 10 00            		ld	de,10h
(1) 1853/     8D6 : 19                  		add	hl,de
(1) 1854/     8D7 :                     	;  b - Flags LR00evin (Eff|Vol|Ins|Note)
(1) 1855/     8D7 :                     	; iy - Our chip table
(1) 1856/     8D7 :                     	; ix - Track channel
(1) 1857/     8D7 :                     	; hl - Intrument data
(1) 1858/     8D7 : CB 40               		bit	0,b		; Note
(1) 1859/     8D9 : C4 AD 0E            		call	nz,.note
(1) 1860/     8DC : CB 48               		bit	1,b		; Intrument
(1) 1861/     8DE : C4 FC 0C            		call	nz,.inst
(1) 1862/     8E1 : CF                  		rst	8
(1) 1863/     8E2 : CB 50               		bit	2,b		; Volume
(1) 1864/     8E4 : C4 F3 0C            		call	nz,.volu
(1) 1865/     8E7 : CB 58               		bit	3,b		; Effect
(1) 1866/     8E9 : C4 F1 0B            		call	nz,.effc
(1) 1867/     8EC : 7E                  		ld	a,(hl)		; Read INS type
(1) 1868/     8ED : E6 70               		and	01110000b	; Filter bits
(1) 1869/     8EF : 0F                  		rrca
(1) 1870/     8F0 : 0F                  		rrca
(1) 1871/     8F1 : 0F                  		rrca
(1) 1872/     8F2 : CF                  		rst	8
(1) 1873/     8F3 : 16 00               		ld	d,0
(1) 1874/     8F5 : 5F                  		ld	e,a
(1) 1875/     8F6 : 21 FF 08            		ld	hl,.mk_list
(1) 1876/     8F9 : 19                  		add	hl,de
(1) 1877/     8FA : 7E                  		ld	a,(hl)
(1) 1878/     8FB : 23                  		inc	hl
(1) 1879/     8FC : 66                  		ld	h,(hl)
(1) 1880/     8FD : 6F                  		ld	l,a
(1) 1881/     8FE : E9                  		jp	(hl)
(1) 1882/     8FF :                     ; --------------------------------
(1) 1883/     8FF :                     .mk_list:
(1) 1884/     8FF : 33 09               		dw .mk_psg
(1) 1885/     901 : 0D 09               		dw .mk_psgn
(1) 1886/     903 : B1 09               		dw .mk_fm
(1) 1887/     905 : 27 0A               		dw .mk_fmspc
(1) 1888/     907 : 7B 0B               		dw .mk_dac
(1) 1889/     909 : CF 0B               		dw .mk_pcm
(1) 1890/     90B : D0 0B               		dw .mk_pwm
(1) 1891/     90D :                     
(1) 1892/     90D :                     ; --------------------------------
(1) 1893/     90D :                     ; PSGN
(1) 1894/     90D :                     ; --------------------------------
(1) 1895/     90D :                     
(1) 1896/     90D :                     .mk_psgn:
(1) 1897/     90D : CB 40               		bit	0,b
(1) 1898/     90F : 28 6A               		jr	z,.psg_keyon
(1) 1899/     911 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 1900/     914 : DD E5               		push	ix
(1) 1901/     916 : DD 21 05 15         		ld	ix,psgcom+3	; Steal PSG3
(1) 1902/     91A : CF                  		rst	8
(1) 1903/     91B : FE FE               		cp	-2
(1) 1904/     91D : 28 7E               		jr	z,.kycut_psgn
(1) 1905/     91F : FE FF               		cp	-1
(1) 1906/     921 : 28 6D               		jr	z,.kyoff_psgn
(1) 1907/     923 : DD 36 00 01         		ld	(ix+COM),001b	; Key ON
(1) 1908/     927 : 5F                  		ld	e,a
(1) 1909/     928 : 3A 81 1C            		ld	a,(psgHatMode)	; Tone 3?
(1) 1910/     92B : E6 03               		and	011b
(1) 1911/     92D : FE 03               		cp	011b
(1) 1912/     92F : 20 4A               		jr	nz,.psg_keyon	; Normal
(1) 1913/     931 : 18 21               		jr	.from_psgn	; Tone 3
(1) 1914/     933 :                     
(1) 1915/     933 :                     ; --------------------------------
(1) 1916/     933 :                     ; PSG
(1) 1917/     933 :                     ; --------------------------------
(1) 1918/     933 :                     
(1) 1919/     933 :                     .mk_psg:
(1) 1920/     933 : CB 40               		bit	0,b
(1) 1921/     935 : 28 44               		jr	z,.psg_keyon
(1) 1922/     937 : CF                  		rst	8
(1) 1923/     938 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 1924/     93B : DD E5               		push	ix
(1) 1925/     93D : DD 21 02 15         		ld	ix,psgcom	; ix - psgcom
(1) 1926/     941 : FD 5E 04            		ld	e,(iy+04h)
(1) 1927/     944 : 16 00               		ld	d,0
(1) 1928/     946 : DD 19               		add	ix,de
(1) 1929/     948 : FE FE               		cp	-2
(1) 1930/     94A : 28 54               		jr	z,.kycut_psg
(1) 1931/     94C : FE FF               		cp	-1
(1) 1932/     94E : 28 43               		jr	z,.kyoff_psg
(1) 1933/     950 : DD 36 00 01         		ld	(ix+COM),001b	; Key ON
(1) 1934/     954 :                     .from_psgn:
(1) 1935/     954 : CF                  		rst	8
(1) 1936/     955 : 16 00               		ld	d,0		; de - note*2
(1) 1937/     957 : FD 5E 06            		ld	e,(iy+06h)	; Freq index
(1) 1938/     95A : 21 00 13            		ld	hl,psgFreq_List-(36*2)
(1) 1939/     95D : 19                  		add	hl,de
(1) 1940/     95E : 7E                  		ld	a,(hl)
(1) 1941/     95F : 23                  		inc	hl
(1) 1942/     960 : 66                  		ld	h,(hl)
(1) 1943/     961 : 6F                  		ld	l,a
(1) 1944/     962 : FD 7E 07            		ld	a,(iy+07h)	; pitchbend
(1) 1945/     965 : 07                  		rlca			; << 3
(1) 1946/     966 : 07                  		rlca
(1) 1947/     967 : CF                  		rst	8
(1) 1948/     968 : 07                  		rlca
(1) 1949/     969 : 57                  		ld	d,a
(1) 1950/     96A : E6 F8               		and	11111000b
(1) 1951/     96C : 5F                  		ld	e,a
(1) 1952/     96D : 7A                  		ld	a,d
(1) 1953/     96E : E6 07               		and	00000111b
(1) 1954/     970 : 57                  		ld	d,a
(1) 1955/     971 : 37                  		scf
(1) 1956/     972 : 3F                  		ccf
(1) 1957/     973 : ED 52               		sbc	hl,de
(1) 1958/     975 : DD 75 1C            		ld	(ix+DTL),l
(1) 1959/     978 : DD 74 20            		ld	(ix+DTH),h
(1) 1960/     97B :                     .psg_keyon:
(1) 1961/     97B : FD 7E 08            		ld	a,(iy+08h)	; Set current Volume
(1) 1962/     97E : FD 96 03            		sub	a,(iy+03h)	; + MASTER vol
(1) 1963/     981 : ED 44               		neg	a
(1) 1964/     983 : CF                  		rst	8
(1) 1965/     984 : 87                  		add	a,a
(1) 1966/     985 : 87                  		add	a,a
(1) 1967/     986 : 30 02               		jr	nc,.vmuch
(1) 1968/     988 : 3E FF               		ld	a,-1
(1) 1969/     98A :                     .vmuch:
(1) 1970/     98A : DD 77 30            		ld	(ix+PVOL),a
(1) 1971/     98D : DD E1               		pop	ix
(1) 1972/     98F : C9                  		ret
(1) 1973/     990 :                     
(1) 1974/     990 :                     ; --------------------------------
(1) 1975/     990 :                     
(1) 1976/     990 :                     ; -1
(1) 1977/     990 :                     .kyoff_psgn:
(1) 1978/     990 : CD AA 09            		call	.kypsgn_hatoff
(1) 1979/     993 :                     .kyoff_psg:
(1) 1980/     993 : 0E 02               		ld	c,010b
(1) 1981/     995 : DD 71 00            		ld	(ix),c
(1) 1982/     998 : DD E1               		pop	ix
(1) 1983/     99A : C3 23 0F            		jp	.chnl_ulnkoff
(1) 1984/     99D :                     ; -2
(1) 1985/     99D :                     .kycut_psgn:
(1) 1986/     99D : CD AA 09            		call	.kypsgn_hatoff
(1) 1987/     9A0 :                     .kycut_psg:
(1) 1988/     9A0 : 0E 04               		ld	c,100b
(1) 1989/     9A2 : DD 71 00            		ld	(ix),c
(1) 1990/     9A5 : DD E1               		pop	ix
(1) 1991/     9A7 : C3 1D 0F            		jp	.chnl_ulnkcut
(1) 1992/     9AA :                     .kypsgn_hatoff:
(1) 1993/     9AA : 3E 00               		ld	a,000b
(1) 1994/     9AC : 32 81 1C            		ld	(psgHatMode),a	; ** GLOBAL SETTING
(1) 1995/     9AF : CF                  		rst	8
(1) 1996/     9B0 : C9                  		ret
(1) 1997/     9B1 :                     
(1) 1998/     9B1 :                     ; --------------------------------
(1) 1999/     9B1 :                     ; FM
(1) 2000/     9B1 :                     ; --------------------------------
(1) 2001/     9B1 :                     
(1) 2002/     9B1 :                     .mk_fm:
(1) 2003/     9B1 : CB 40               		bit	0,b		; NEW note?
(1) 2004/     9B3 : 28 5E               		jr	z,.mkfm_set
(1) 2005/     9B5 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 2006/     9B8 : FE FE               		cp	-2
(1) 2007/     9BA : CA 88 0A            		jp	z,.fm_cut
(1) 2008/     9BD : FE FF               		cp	-1
(1) 2009/     9BF : CA 82 0A            		jp	z,.fm_off
(1) 2010/     9C2 :                     ; 		call	.fm_tloff
(1) 2011/     9C2 : CF                  		rst	8
(1) 2012/     9C3 : FD 4E 04            		ld	c,(iy+04h)	; c - KeyID
(1) 2013/     9C6 : 79                  		ld	a,c
(1) 2014/     9C7 : FE 06               		cp	6
(1) 2015/     9C9 : 20 05               		jr	nz,.not_dac
(1) 2016/     9CB : CD 16 12            		call	dac_off
(1) 2017/     9CE : 18 15               		jr	.not_dspc
(1) 2018/     9D0 :                     .not_dac:
(1) 2019/     9D0 :                     ; 		ld	a,c
(1) 2020/     9D0 : FE 02               		cp	2
(1) 2021/     9D2 : 20 11               		jr	nz,.not_dspc
(1) 2022/     9D4 : 3A 82 1C            		ld	a,(fmSpecial)
(1) 2023/     9D7 : B7                  		or	a
(1) 2024/     9D8 : 28 0B               		jr	z,.not_dspc
(1) 2025/     9DA : 11 00 27            		ld	de,2700h	; CH3 off
(1) 2026/     9DD : CD EB 11            		call	fm_send_1
(1) 2027/     9E0 : 3E 00               		ld	a,0
(1) 2028/     9E2 : 32 82 1C            		ld	(fmSpecial),a
(1) 2029/     9E5 :                     .not_dspc:
(1) 2030/     9E5 : CD 91 0A            		call	.fm_keyoff
(1) 2031/     9E8 : C5                  		push	bc
(1) 2032/     9E9 : FD 7E 06            		ld	a,(iy+06h)
(1) 2033/     9EC : 47                  		ld	b,a
(1) 2034/     9ED : E6 1F               		and	00011111b
(1) 2035/     9EF : 5F                  		ld	e,a
(1) 2036/     9F0 : 16 00               		ld	d,0
(1) 2037/     9F2 : 21 30 13            		ld	hl,fmFreq_List
(1) 2038/     9F5 : 19                  		add	hl,de
(1) 2039/     9F6 : 7E                  		ld	a,(hl)
(1) 2040/     9F7 : CF                  		rst	8
(1) 2041/     9F8 : 23                  		inc	hl
(1) 2042/     9F9 : 66                  		ld	h,(hl)
(1) 2043/     9FA : 6F                  		ld	l,a
(1) 2044/     9FB : 78                  		ld	a,b
(1) 2045/     9FC : E6 E0               		and	11100000b
(1) 2046/     9FE : 0F                  		rrca
(1) 2047/     9FF : 0F                  		rrca
(1) 2048/     A00 : B4                  		or	h
(1) 2049/     A01 : 67                  		ld	h,a
(1) 2050/     A02 : FD 5E 07            		ld	e,(iy+07h)	; pitchbend
(1) 2051/     A05 : CF                  		rst	8
(1) 2052/     A06 : AF                  		xor	a		; Clear high
(1) 2053/     A07 : 3F                  		ccf			; Clear carry
(1) 2054/     A08 : CB 23               		sla	e		; << 2
(1) 2055/     A0A : CB 23               		sla	e
(1) 2056/     A0C : 9F                  		sbc	a,a		; -1 if carry is set
(1) 2057/     A0D : 57                  		ld	d,a
(1) 2058/     A0E : 19                  		add	hl,de
(1) 2059/     A0F : CD B0 0A            		call	.fm_setfreq
(1) 2060/     A12 : C1                  		pop	bc
(1) 2061/     A13 :                     
(1) 2062/     A13 :                     ; --------------------------------
(1) 2063/     A13 :                     
(1) 2064/     A13 :                     .mkfm_set:
(1) 2068/     A13 : CD 45 0B            		call	.fm_wrtalpan	; Panning and effects
(1) 2069/     A16 : CD C7 0A            		call	.fm_wrtlvol	; FM volume control
(1) 2070/     A19 : FD 7E 0F            		ld	a,(iy+0Fh)	; 0Fh - keys ***
(1) 2071/     A1C : E6 F0               		and	11110000b
(1) 2072/     A1E : B1                  		or	c		; Merge FM channel
(1) 2073/     A1F : 5F                  		ld	e,a
(1) 2074/     A20 : 16 28               		ld	d,28h
(1) 2075/     A22 : CD EB 11            		call	fm_send_1	; Set keys
(1) 2076/     A25 : CF                  		rst	8
(1) 2077/     A26 :                     .nofm_note:
(1) 2078/     A26 : C9                  		ret
(1) 2080/     A27 :                     
(1) 2081/     A27 :                     ; --------------------------------
(1) 2082/     A27 :                     ; FM3 special
(1) 2083/     A27 :                     ; --------------------------------
(1) 2084/     A27 :                     
(1) 2085/     A27 :                     .mk_fmspc:
(1) 2086/     A27 : CB 40               		bit	0,b		; NEW Note?
(1) 2087/     A29 : 28 E8               		jr	z,.mkfm_set
(1) 2088/     A2B : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 2089/     A2E : FE FE               		cp	-2
(1) 2090/     A30 : CA 88 0A            		jp	z,.fm_cut
(1) 2091/     A33 : FE FF               		cp	-1
(1) 2092/     A35 : CA 82 0A            		jp	z,.fm_off
(1) 2093/     A38 : FD 4E 04            		ld	c,(iy+04h)	; c - KeyID (011b always)
(1) 2094/     A3B : CD 91 0A            		call	.fm_keyoff
(1) 2095/     A3E : 21 70 1C            		ld	hl,fmcach_list	; Read external freqs
(1) 2096/     A41 : FD 7E 04            		ld	a,(iy+04h)
(1) 2097/     A44 : E6 07               		and	0111b
(1) 2098/     A46 : 16 00               		ld	d,0
(1) 2099/     A48 : 87                  		add	a,a
(1) 2100/     A49 : 5F                  		ld	e,a
(1) 2101/     A4A : CF                  		rst	8
(1) 2102/     A4B : 19                  		add	hl,de
(1) 2103/     A4C : 7E                  		ld	a,(hl)
(1) 2104/     A4D : 23                  		inc	hl
(1) 2105/     A4E : 66                  		ld	h,(hl)
(1) 2106/     A4F : 6F                  		ld	l,a
(1) 2107/     A50 : CF                  		rst	8
(1) 2108/     A51 : 11 20 00            		ld	de,20h		; point to regs
(1) 2109/     A54 : 19                  		add	hl,de
(1) 2110/     A55 : DD E5               		push	ix
(1) 2111/     A57 : DD 21 7A 0A         		ld	ix,.spcreglist
(1) 2112/     A5B : 06 08               		ld	b,8
(1) 2113/     A5D :                     .wr_spc:
(1) 2114/     A5D : DD 56 00            		ld	d,(ix)
(1) 2115/     A60 : 5E                  		ld	e,(hl)
(1) 2116/     A61 : CD EB 11            		call	fm_send_1
(1) 2117/     A64 : CF                  		rst	8
(1) 2118/     A65 : 23                  		inc	hl
(1) 2119/     A66 : DD 23               		inc	ix
(1) 2120/     A68 : 10 F3               		djnz	.wr_spc
(1) 2121/     A6A : DD E1               		pop	ix
(1) 2122/     A6C : 11 40 27            		ld	de,2740h	; CH3 on
(1) 2123/     A6F : CD EB 11            		call	fm_send_1
(1) 2124/     A72 : 3E 01               		ld	a,1
(1) 2125/     A74 : 32 82 1C            		ld	(fmSpecial),a
(1) 2126/     A77 : C3 13 0A            		jp	.mkfm_set
(1) 2127/     A7A :                     .spcreglist:
(1) 2128/     A7A : AD A9               		db 0ADh,0A9h
(1) 2129/     A7C : AC A8               		db 0ACh,0A8h
(1) 2130/     A7E : AE AA               		db 0AEh,0AAh
(1) 2131/     A80 : A6 A2               		db 0A6h,0A2h
(1) 2132/     A82 :                     
(1) 2133/     A82 :                     ; ----------------------------------------
(1) 2134/     A82 :                     
(1) 2135/     A82 :                     .fm_off:
(1) 2136/     A82 : CD 91 0A            		call	.fm_keyoff
(1) 2137/     A85 : C3 23 0F            		jp	.chnl_ulnkoff
(1) 2138/     A88 :                     .fm_cut:
(1) 2139/     A88 : CD 91 0A            		call	.fm_keyoff
(1) 2140/     A8B : CD 99 0A            		call	.fm_tloff
(1) 2141/     A8E : C3 1D 0F            		jp	.chnl_ulnkcut
(1) 2142/     A91 :                     
(1) 2143/     A91 :                     ; ----------------------------------------
(1) 2144/     A91 :                     
(1) 2145/     A91 :                     .fm_keyoff:
(1) 2146/     A91 : 16 28               		ld	d,28h
(1) 2147/     A93 : FD 5E 04            		ld	e,(iy+04h)
(1) 2148/     A96 : C3 EB 11            		jp	fm_send_1
(1) 2149/     A99 :                     .fm_tloff:
(1) 2150/     A99 : 06 04               		ld	b,4
(1) 2151/     A9B : FD 4E 04            		ld	c,(iy+04h)
(1) 2152/     A9E : 79                  		ld	a,c
(1) 2153/     A9F : E6 03               		and	011b
(1) 2154/     AA1 : F6 40               		or	40h	; TL regs
(1) 2155/     AA3 : 1E 7F               		ld	e,7Fh
(1) 2156/     AA5 :                     .tl_down:
(1) 2157/     AA5 : 57                  		ld	d,a
(1) 2158/     AA6 :                     ; 		ld	e,7Fh
(1) 2159/     AA6 : CD E7 11            		call	fm_autoreg
(1) 2160/     AA9 : CF                  		rst	8
(1) 2161/     AAA : 7A                  		ld	a,d
(1) 2162/     AAB : C6 04               		add	a,4
(1) 2163/     AAD : 10 F6               		djnz	.tl_down
(1) 2164/     AAF : C9                  		ret
(1) 2165/     AB0 :                     ; c - KeyID
(1) 2166/     AB0 :                     .fm_setfreq:
(1) 2167/     AB0 : 79                  		ld	a,c
(1) 2168/     AB1 : E6 03               		and	011b
(1) 2169/     AB3 : F6 A4               		or	0A4h
(1) 2170/     AB5 : 57                  		ld	d,a
(1) 2171/     AB6 : 5C                  		ld	e,h
(1) 2172/     AB7 : CF                  		rst	8
(1) 2173/     AB8 : CD E7 11            		call	fm_autoreg
(1) 2174/     ABB : 79                  		ld	a,c
(1) 2175/     ABC : E6 03               		and	011b
(1) 2176/     ABE : F6 A0               		or	0A0h
(1) 2177/     AC0 : 57                  		ld	d,a
(1) 2178/     AC1 : 5D                  		ld	e,l
(1) 2179/     AC2 : CD E7 11            		call	fm_autoreg
(1) 2180/     AC5 : CF                  		rst	8
(1) 2181/     AC6 : C9                  		ret
(1) 2182/     AC7 :                     
(1) 2183/     AC7 :                     ; --------------------------------
(1) 2184/     AC7 :                     ; WRITE TL volume
(1) 2185/     AC7 :                     
(1) 2186/     AC7 :                     .fm_wrtlvol:
(1) 2187/     AC7 : 21 70 1C            		ld	hl,fmcach_list
(1) 2188/     ACA : FD 7E 04            		ld	a,(iy+04h)
(1) 2189/     ACD : E6 07               		and	0111b
(1) 2190/     ACF : 16 00               		ld	d,0
(1) 2191/     AD1 : CF                  		rst	8
(1) 2192/     AD2 : 87                  		add	a,a
(1) 2193/     AD3 : 5F                  		ld	e,a
(1) 2194/     AD4 : 19                  		add	hl,de
(1) 2195/     AD5 : 7E                  		ld	a,(hl)
(1) 2196/     AD6 : 23                  		inc	hl
(1) 2197/     AD7 : 66                  		ld	h,(hl)
(1) 2198/     AD8 : 6F                  		ld	l,a
(1) 2199/     AD9 : 23                  		inc	hl
(1) 2200/     ADA : 23                  		inc	hl
(1) 2201/     ADB : 23                  		inc	hl
(1) 2202/     ADC : CF                  		rst	8
(1) 2203/     ADD : 23                  		inc	hl		; Point to TL's
(1) 2204/     ADE : FD 7E 04            		ld	a,(iy+04h)
(1) 2205/     AE1 : E6 03               		and	011b
(1) 2206/     AE3 : F6 40               		or	40h		; TL registers
(1) 2207/     AE5 : 57                  		ld	d,a
(1) 2208/     AE6 :                     ; d - 40h+
(1) 2209/     AE6 :                     ; hl - TL data
(1) 2210/     AE6 :                     ; .fm_wrtlvol:
(1) 2211/     AE6 : C5                  		push	bc
(1) 2212/     AE7 : E5                  		push	hl
(1) 2213/     AE8 : 21 3D 0B            		ld	hl,.fm_cindx	; hl - jump carry list
(1) 2214/     AEB : FD 7E 0C            		ld	a,(iy+0Ch)	; Read 0B0h copy
(1) 2215/     AEE : E6 07               		and	0111b
(1) 2216/     AF0 : 06 00               		ld	b,0
(1) 2217/     AF2 : 4F                  		ld	c,a
(1) 2218/     AF3 : 09                  		add	hl,bc
(1) 2219/     AF4 : FD 7E 08            		ld	a,(iy+08h)	; Read current Volume
(1) 2220/     AF7 : CF                  		rst	8
(1) 2221/     AF8 : FD 96 03            		sub	a,(iy+03h)	; + MASTER vol
(1) 2222/     AFB : 4F                  		ld	c,a		; c - Current Volume
(1) 2223/     AFC : 46                  		ld	b,(hl)		; b - Current jump-carry byte
(1) 2224/     AFD : E1                  		pop	hl
(1) 2225/     AFE : CB 08               		rrc	b		; OP1
(1) 2226/     B00 : DC 2B 0B            		call	c,.write_tl
(1) 2227/     B03 : 23                  		inc	hl
(1) 2228/     B04 : 14                  		inc	d
(1) 2229/     B05 : 14                  		inc	d
(1) 2230/     B06 : CF                  		rst	8
(1) 2231/     B07 : 14                  		inc	d
(1) 2232/     B08 : 14                  		inc	d
(1) 2233/     B09 : CB 08               		rrc	b		; OP2
(1) 2234/     B0B : DC 2B 0B            		call	c,.write_tl
(1) 2235/     B0E : 23                  		inc	hl
(1) 2236/     B0F : 14                  		inc	d
(1) 2237/     B10 : 14                  		inc	d
(1) 2238/     B11 : 14                  		inc	d
(1) 2239/     B12 : 14                  		inc	d
(1) 2240/     B13 : CB 08               		rrc	b		; OP3
(1) 2241/     B15 : DC 2B 0B            		call	c,.write_tl
(1) 2242/     B18 : 23                  		inc	hl
(1) 2243/     B19 : CF                  		rst	8
(1) 2244/     B1A : 14                  		inc	d
(1) 2245/     B1B : 14                  		inc	d
(1) 2246/     B1C : 14                  		inc	d
(1) 2247/     B1D : 14                  		inc	d
(1) 2248/     B1E : CB 08               		rrc	b		; OP4
(1) 2249/     B20 : DC 2B 0B            		call	c,.write_tl
(1) 2250/     B23 : 23                  		inc	hl
(1) 2251/     B24 : 14                  		inc	d
(1) 2252/     B25 : 14                  		inc	d
(1) 2253/     B26 : 14                  		inc	d
(1) 2254/     B27 : 14                  		inc	d
(1) 2255/     B28 : CF                  		rst	8
(1) 2256/     B29 : C1                  		pop	bc
(1) 2257/     B2A : C9                  		ret
(1) 2258/     B2B :                     .write_tl:
(1) 2259/     B2B : 7E                  		ld	a,(hl)
(1) 2260/     B2C : 91                  		sub	a,c		; reg - volume
(1) 2261/     B2D : F2 32 0B            		jp	p,.keep_tlmx
(1) 2262/     B30 : 3E 7F               		ld	a,7Fh		; <-- maximum TL
(1) 2263/     B32 :                     .keep_tlmx:
(1) 2264/     B32 : C5                  		push	bc
(1) 2265/     B33 : 5F                  		ld	e,a
(1) 2266/     B34 : FD 4E 04            		ld	c,(iy+04h)
(1) 2267/     B37 : CD E7 11            		call	fm_autoreg
(1) 2268/     B3A : CF                  		rst	8
(1) 2269/     B3B : C1                  		pop	bc
(1) 2270/     B3C : C9                  		ret
(1) 2271/     B3D :                     ; Jump carry list
(1) 2272/     B3D :                     .fm_cindx:
(1) 2273/     B3D : 08                  		db 1000b
(1) 2274/     B3E : 08                  		db 1000b
(1) 2275/     B3F : 08                  		db 1000b
(1) 2276/     B40 : 08                  		db 1000b
(1) 2277/     B41 : 0C                  		db 1100b
(1) 2278/     B42 : 0E                  		db 1110b
(1) 2279/     B43 : 0E                  		db 1110b
(1) 2280/     B44 : 0F                  		db 1111b
(1) 2281/     B45 :                     ; c - KeyId
(1) 2282/     B45 :                     .fm_wrtalpan:
(1) 2283/     B45 : FD 7E 0C            		ld	a,(iy+0Ch)		; 0B0h algorithm
(1) 2284/     B48 : 5F                  		ld	e,a
(1) 2285/     B49 : 79                  		ld	a,c
(1) 2286/     B4A : E6 03               		and	011b
(1) 2287/     B4C : F6 B0               		or	0B0h
(1) 2288/     B4E : 57                  		ld	d,a
(1) 2289/     B4F : CD E7 11            		call	fm_autoreg		; Write algorithm
(1) 2290/     B52 : CF                  		rst	8
(1) 2291/     B53 : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Read panning bits
(1) 2292/     B56 : 2F                  		cpl				; REVERSE bits
(1) 2293/     B57 : E6 30               		and	00110000b
(1) 2294/     B59 : 07                  		rlca				; << 2
(1) 2295/     B5A : 07                  		rlca
(1) 2296/     B5B : 5F                  		ld	e,a			; save as e
(1) 2297/     B5C : FD 7E 0D            		ld	a,(iy+0Dh)		; 0B4h %00aa0ppp
(1) 2298/     B5F : E6 3F               		and	00111111b
(1) 2299/     B61 : B3                  		or	e			; Merge panning
(1) 2300/     B62 : 5F                  		ld	e,a
(1) 2301/     B63 : 79                  		ld	a,c
(1) 2302/     B64 : CF                  		rst	8
(1) 2303/     B65 : E6 03               		and	011b
(1) 2304/     B67 : F6 B4               		or	0B4h
(1) 2305/     B69 : 57                  		ld	d,a
(1) 2306/     B6A : CD E7 11            		call	fm_autoreg
(1) 2307/     B6D : FD 7E 0E            		ld	a,(iy+0Eh)		; Read LFO
(1) 2308/     B70 : CB 5F               		bit	3,a			; Intrument wants LFO?
(1) 2309/     B72 : 28 06               		jr	z,.no_lfo
(1) 2310/     B74 : 5F                  		ld	e,a
(1) 2311/     B75 : 16 22               		ld	d,22h
(1) 2312/     B77 : CD EB 11            		call	fm_send_1
(1) 2313/     B7A :                     .no_lfo:
(1) 2314/     B7A : C9                  		ret
(1) 2315/     B7B :                     
(1) 2316/     B7B :                     ; --------------------------------
(1) 2317/     B7B :                     ; DAC
(1) 2318/     B7B :                     ; --------------------------------
(1) 2319/     B7B :                     
(1) 2320/     B7B :                     .mk_dac:
(1) 2321/     B7B : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 2322/     B7E : FE FE               		cp	-2
(1) 2323/     B80 : CA A0 0B            		jp	z,.dac_cut
(1) 2324/     B83 : FE FF               		cp	-1
(1) 2325/     B85 : CA A6 0B            		jp	z,.dac_off
(1) 2326/     B88 : CD A9 0B            		call	.dac_pitch
(1) 2327/     B8B : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Read panning
(1) 2328/     B8E : 2F                  		cpl				; REVERSE bits
(1) 2329/     B8F : E6 30               		and	00110000b
(1) 2330/     B91 : 07                  		rlca
(1) 2331/     B92 : 07                  		rlca
(1) 2332/     B93 : CF                  		rst	8
(1) 2333/     B94 : 5F                  		ld	e,a
(1) 2334/     B95 : 16 B6               		ld	d,0B6h			; Channel 6 panning
(1) 2335/     B97 : CD F6 11            		call	fm_send_2
(1) 2336/     B9A :                     ; 		bit	0,b			; Note update?
(1) 2337/     B9A :                     ; 		ret	z
(1) 2338/     B9A : CD 16 12            		call	dac_off
(1) 2339/     B9D : C3 2B 12            		jp	dac_play
(1) 2340/     BA0 :                     .dac_cut:
(1) 2341/     BA0 : CD 16 12            		call	dac_off
(1) 2342/     BA3 : C3 23 0F            		jp	.chnl_ulnkoff
(1) 2343/     BA6 :                     .dac_off:
(1) 2344/     BA6 : C3 1D 0F            		jp	.chnl_ulnkcut
(1) 2345/     BA9 :                     .dac_pitch:
(1) 2346/     BA9 : 16 00               		ld	d,0		; Freq index
(1) 2347/     BAB : FD 5E 06            		ld	e,(iy+06h)
(1) 2348/     BAE : 21 60 13            		ld	hl,wavFreq_List-(2*36)
(1) 2349/     BB1 : 19                  		add	hl,de
(1) 2350/     BB2 : 7E                  		ld	a,(hl)
(1) 2351/     BB3 : 23                  		inc	hl
(1) 2352/     BB4 : 66                  		ld	h,(hl)
(1) 2353/     BB5 : 6F                  		ld	l,a
(1) 2354/     BB6 : FD 5E 07            		ld	e,(iy+07h)	; pitchbend
(1) 2355/     BB9 : CF                  		rst	8
(1) 2356/     BBA : AF                  		xor	a		; Clear high
(1) 2357/     BBB : 3F                  		ccf			; Clear carry
(1) 2358/     BBC : CB 23               		sla	e		; << 3
(1) 2359/     BBE : CB 23               		sla	e
(1) 2360/     BC0 : CB 23               		sla	e
(1) 2361/     BC2 : 9F                  		sbc	a,a		; -1 if carry is set
(1) 2362/     BC3 : 57                  		ld	d,a
(1) 2363/     BC4 : 19                  		add	hl,de
(1) 2364/     BC5 : 22 95 1C            		ld	(wave_Pitch),hl
(1) 2365/     BC8 : D9                  		exx			; *
(1) 2366/     BC9 : ED 5B 95 1C         		ld	de,(wave_Pitch)	; *
(1) 2367/     BCD : D9                  		exx			; *
(1) 2368/     BCE : C9                  		ret
(1) 2369/     BCF :                     
(1) 2370/     BCF :                     ; --------------------------------
(1) 2371/     BCF :                     ; PCM
(1) 2372/     BCF :                     ; --------------------------------
(1) 2373/     BCF :                     
(1) 2374/     BCF :                     .mk_pcm:
(1) 2467/     BCF : C9                  		ret
(1) 2469/     BD0 :                     
(1) 2470/     BD0 :                     ; --------------------------------
(1) 2471/     BD0 :                     ; PWM
(1) 2472/     BD0 :                     ; --------------------------------
(1) 2473/     BD0 :                     
(1) 2474/     BD0 :                     .mk_pwm:
(1) 2475/     BD0 :                     ; 		bit	0,b			; Note update?
(1) 2476/     BD0 :                     ; 		ret	z
(1) 2554/     BD0 : C9                  		ret
(1) 2556/     BD1 :                     
(1) 2557/     BD1 :                     ; --------------------------------
(1) 2558/     BD1 :                     ; SHARED routine
(1) 2559/     BD1 :                     
(1) 2560/     BD1 :                     .readfreq_pcm:
(1) 2561/     BD1 : 21 A8 13            		ld	hl,wavFreq_CdPcm-(2*48)	; <-- one octave lower
(1) 2562/     BD4 : 18 03               		jr	.set_wavfreq
(1) 2563/     BD6 :                     .readfreq_pwm:
(1) 2564/     BD6 : 21 60 13            		ld	hl,wavFreq_List-(2*36)
(1) 2565/     BD9 :                     .set_wavfreq:
(1) 2566/     BD9 : 16 00               		ld	d,0		; Freq index
(1) 2567/     BDB : FD 5E 06            		ld	e,(iy+06h)
(1) 2568/     BDE : 19                  		add	hl,de
(1) 2569/     BDF : 7E                  		ld	a,(hl)
(1) 2570/     BE0 : 23                  		inc	hl
(1) 2571/     BE1 : 66                  		ld	h,(hl)
(1) 2572/     BE2 : 6F                  		ld	l,a
(1) 2573/     BE3 : FD 5E 07            		ld	e,(iy+07h)	; pitchbend
(1) 2574/     BE6 : CF                  		rst	8
(1) 2575/     BE7 : AF                  		xor	a		; Clear high
(1) 2576/     BE8 : 3F                  		ccf			; Clear carry
(1) 2577/     BE9 : CB 23               		sla	e		; << 2
(1) 2578/     BEB : CB 23               		sla	e
(1) 2579/     BED : 9F                  		sbc	a,a		; -1 if carry is set
(1) 2580/     BEE : 57                  		ld	d,a
(1) 2581/     BEF : 19                  		add	hl,de
(1) 2582/     BF0 : C9                  		ret
(1) 2583/     BF1 :                     
(1) 2584/     BF1 :                     ; ----------------------------------------
(1) 2585/     BF1 :                     ; NEW effect
(1) 2586/     BF1 :                     ; ----------------------------------------
(1) 2587/     BF1 :                     
(1) 2588/     BF1 :                     .effc:
(1) 2589/     BF1 : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - effect data
(1) 2590/     BF4 : DD 7E 05            		ld	a,(ix+chnl_EffId)	; d - effect id
(1) 2591/     BF7 : 57                  		ld	d,a
(1) 2592/     BF8 : CF                  		rst	8
(1) 2593/     BF9 : FE 04               		cp	4			; Effect D?
(1) 2594/     BFB : 28 0F               		jr	z,.effc_D
(1) 2595/     BFD : FE 05               		cp	5			; Effect E?
(1) 2596/     BFF : 28 4E               		jr	z,.effc_E
(1) 2597/     C01 : FE 06               		cp	6			; Effect F?
(1) 2598/     C03 : 28 5F               		jr	z,.effc_F
(1) 2599/     C05 : CF                  		rst	8
(1) 2600/     C06 : FE 18               		cp	24			; Effect X?
(1) 2601/     C08 : CA 85 0C            		jp	z,.effc_X
(1) 2602/     C0B : C9                  		ret
(1) 2603/     C0C :                     
(1) 2604/     C0C :                     ; ----------------------------------------
(1) 2605/     C0C :                     ; Effect D
(1) 2606/     C0C :                     ;
(1) 2607/     C0C :                     ; Volume slide down
(1) 2608/     C0C :                     ;
(1) 2609/     C0C :                     ; 0xh-Exh - Normal
(1) 2610/     C0C :                     ; Fxh-Fxh - Fine slide / 2
(1) 2611/     C0C :                     ; ----------------------------------------
(1) 2612/     C0C :                     
(1) 2613/     C0C :                     .effc_D:
(1) 2614/     C0C : CD 79 0C            		call	.save_arg
(1) 2615/     C0F : 79                  		ld	a,c		; Setting == 0?
(1) 2616/     C10 : B7                  		or	a
(1) 2617/     C11 : C8                  		ret	z
(1) 2618/     C12 : E6 F0               		and	0F0h
(1) 2619/     C14 : 28 0F               		jr	z,.norm_down	; 0xh
(1) 2620/     C16 : FE F0               		cp	0F0h
(1) 2621/     C18 : 28 0D               		jr	z,.fine_down	; Fxh
(1) 2622/     C1A : CF                  		rst	8
(1) 2623/     C1B : 79                  		ld	a,c
(1) 2624/     C1C : E6 0F               		and	00Fh
(1) 2625/     C1E : 28 1D               		jr	z,.norm_up	; x0h
(1) 2626/     C20 : FE 0F               		cp	00Fh
(1) 2627/     C22 : 28 17               		jr	z,.fine_up	; xFh
(1) 2628/     C24 : C9                  		ret
(1) 2629/     C25 :                     ; Go down
(1) 2630/     C25 :                     .norm_down:
(1) 2631/     C25 : CB 21               		sla	c
(1) 2632/     C27 :                     .fine_down:
(1) 2633/     C27 : CB 21               		sla	c
(1) 2634/     C29 : 79                  		ld	a,c
(1) 2635/     C2A : E6 3C               		and	00111100b
(1) 2636/     C2C : 4F                  		ld	c,a
(1) 2637/     C2D : FD 7E 08            		ld	a,(iy+08h)	; Current volume
(1) 2638/     C30 : CF                  		rst	8
(1) 2639/     C31 : 91                  		sub	a,c
(1) 2640/     C32 : 1E C0               		ld	e,0C0h
(1) 2641/     C34 : BB                  		cp	e
(1) 2642/     C35 : D2 4B 0C            		jp	nc,.vol_dvld
(1) 2643/     C38 : 7B                  		ld	a,e
(1) 2644/     C39 : 18 10               		jr 	.vol_dvld
(1) 2645/     C3B :                     ; Go up
(1) 2646/     C3B :                     .fine_up:
(1) 2647/     C3B : CB 39               		srl	c
(1) 2648/     C3D :                     .norm_up:
(1) 2649/     C3D : CB 39               		srl	c
(1) 2650/     C3F : 79                  		ld	a,c
(1) 2651/     C40 : E6 3C               		and	00111100b
(1) 2652/     C42 : 4F                  		ld	c,a
(1) 2653/     C43 : FD 7E 08            		ld	a,(iy+08h)	; Current volume
(1) 2654/     C46 : CF                  		rst	8
(1) 2655/     C47 : 81                  		add	a,c
(1) 2656/     C48 : 38 01               		jr	c,.vol_dvld
(1) 2657/     C4A : AF                  		xor	a
(1) 2658/     C4B :                     .vol_dvld:
(1) 2659/     C4B : FD 77 08            		ld	(iy+08h),a
(1) 2660/     C4E : C9                  		ret
(1) 2661/     C4F :                     
(1) 2662/     C4F :                     ; ----------------------------------------
(1) 2663/     C4F :                     ; Effect E
(1) 2664/     C4F :                     ; ----------------------------------------
(1) 2665/     C4F :                     
(1) 2666/     C4F :                     .effc_E:
(1) 2667/     C4F : CD 79 0C            		call	.save_arg
(1) 2668/     C52 : 79                  		ld	a,c
(1) 2669/     C53 : E6 F0               		and	0F0h
(1) 2670/     C55 : FE F0               		cp	0F0h
(1) 2671/     C57 : C8                  		ret	z
(1) 2672/     C58 : FE E0               		cp	0E0h
(1) 2673/     C5A : C8                  		ret	z
(1) 2674/     C5B : CF                  		rst	8
(1) 2675/     C5C : FD 7E 07            		ld	a,(iy+07h)
(1) 2676/     C5F : 91                  		sub	a,c
(1) 2677/     C60 : FD 77 07            		ld	(iy+07h),a
(1) 2678/     C63 : C9                  		ret
(1) 2679/     C64 :                     
(1) 2680/     C64 :                     ; ----------------------------------------
(1) 2681/     C64 :                     ; Effect F
(1) 2682/     C64 :                     ; ----------------------------------------
(1) 2683/     C64 :                     
(1) 2684/     C64 :                     .effc_F:
(1) 2685/     C64 : CD 79 0C            		call	.save_arg
(1) 2686/     C67 : 79                  		ld	a,c
(1) 2687/     C68 : E6 F0               		and	0F0h
(1) 2688/     C6A : FE F0               		cp	0F0h
(1) 2689/     C6C : C8                  		ret	z
(1) 2690/     C6D : FE E0               		cp	0E0h
(1) 2691/     C6F : C8                  		ret	z
(1) 2692/     C70 : CF                  		rst	8
(1) 2693/     C71 : FD 7E 07            		ld	a,(iy+07h)
(1) 2694/     C74 : 81                  		add	a,c
(1) 2695/     C75 : FD 77 07            		ld	(iy+07h),a
(1) 2696/     C78 : C9                  		ret
(1) 2697/     C79 :                     
(1) 2698/     C79 :                     ; --------------------------------
(1) 2699/     C79 :                     ; e - got arg
(1) 2700/     C79 :                     ; c - new arg
(1) 2701/     C79 :                     .save_arg:
(1) 2702/     C79 : FD 4E 09            		ld	c,(iy+09h)	; Current slide setting
(1) 2703/     C7C : 7B                  		ld	a,e		; EffArg is non-zero?
(1) 2704/     C7D : B7                  		or	a
(1) 2705/     C7E : 28 04               		jr	z,.D_cont	; 00h = slide continue
(1) 2706/     C80 : 4F                  		ld	c,a
(1) 2707/     C81 : FD 71 09            		ld	(iy+09h),c	; Store NEW slide setting
(1) 2708/     C84 :                     .D_cont:
(1) 2709/     C84 : C9                  		ret
(1) 2710/     C85 :                     
(1) 2711/     C85 :                     ; ----------------------------------------
(1) 2712/     C85 :                     ; Effect X
(1) 2713/     C85 :                     ;
(1) 2714/     C85 :                     ; Common panning values:
(1) 2715/     C85 :                     ;  00h LEFT
(1) 2716/     C85 :                     ;  80h MIDDLE
(1) 2717/     C85 :                     ; 0FFh RIGHT
(1) 2718/     C85 :                     ; ----------------------------------------
(1) 2719/     C85 :                     
(1) 2720/     C85 :                     .effc_X:
(1) 2721/     C85 : 16 00               		ld	d,0
(1) 2722/     C87 : 7E                  		ld	a,(hl)
(1) 2723/     C88 : E6 F0               		and	11110000b
(1) 2724/     C8A : FE 80               		cp	80h		; PSG?
(1) 2725/     C8C : 28 1D               		jr	z,.res_pan
(1) 2726/     C8E : FE 90               		cp	90h		; PSGN?
(1) 2727/     C90 : 28 19               		jr	z,.res_pan
(1) 2728/     C92 : FE D0               		cp	0D0h		; MCD: write separate PAN values
(1) 2729/     C94 : CC B5 0C            		call	z,.pan_mcd	; <-- CALL, not JP
(1) 2730/     C97 :                     
(1) 2731/     C97 :                     	; ----------------------------------------
(1) 2732/     C97 :                     	; Common panning bits: %00LR0000
(1) 2733/     C97 :                     	; (REVERSE: 0-on 1-off)
(1) 2734/     C97 : FD 36 09 00         		ld	(iy+09h),0
(1) 2735/     C9B : CF                  		rst	8
(1) 2736/     C9C : E5                  		push	hl
(1) 2737/     C9D : 21 CB 0C            		ld	hl,.comn_panlist
(1) 2738/     CA0 : 7B                  		ld	a,e
(1) 2739/     CA1 : 07                  		rlca
(1) 2740/     CA2 : 07                  		rlca
(1) 2741/     CA3 : 07                  		rlca
(1) 2742/     CA4 : E6 07               		and	0111b
(1) 2743/     CA6 :                     ; 		ld	d,0
(1) 2744/     CA6 : 5F                  		ld	e,a
(1) 2745/     CA7 : CF                  		rst	8
(1) 2746/     CA8 : 19                  		add	hl,de
(1) 2747/     CA9 : 56                  		ld	d,(hl)
(1) 2748/     CAA : E1                  		pop	hl
(1) 2749/     CAB :                     .res_pan:
(1) 2750/     CAB : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Save panning
(1) 2751/     CAE : E6 CF               		and	11001111b
(1) 2752/     CB0 : B2                  		or	d
(1) 2753/     CB1 : DD 77 00            		ld	(ix+chnl_Flags),a
(1) 2754/     CB4 : C9                  		ret
(1) 2755/     CB5 :                     
(1) 2756/     CB5 :                     	; ----------------------------------------
(1) 2757/     CB5 :                     	; MCD panning
(1) 2758/     CB5 :                     .pan_mcd:
(1) 2759/     CB5 : E5                  		push	hl
(1) 2760/     CB6 : D5                  		push	de
(1) 2761/     CB7 : 16 00               		ld	d,0
(1) 2762/     CB9 : 21 D3 0C            		ld	hl,.pcm_panlist
(1) 2763/     CBC : 7B                  		ld	a,e
(1) 2764/     CBD : E6 F8               		and	0F8h
(1) 2765/     CBF : 0F                  		rrca
(1) 2766/     CC0 : 0F                  		rrca
(1) 2767/     CC1 : 0F                  		rrca
(1) 2768/     CC2 : 5F                  		ld	e,a
(1) 2769/     CC3 : 19                  		add	hl,de
(1) 2770/     CC4 : 7E                  		ld	a,(hl)
(1) 2771/     CC5 : FD 77 0A            		ld	(iy+0Ah),a
(1) 2772/     CC8 : D1                  		pop	de
(1) 2773/     CC9 : E1                  		pop	hl
(1) 2774/     CCA : C9                  		ret
(1) 2775/     CCB :                     
(1) 2776/     CCB :                     ; 0 - ENABLE, 1 - DISABLE
(1) 2777/     CCB :                     ; 00LR0000b
(1) 2778/     CCB :                     .comn_panlist:
(1) 2779/     CCB : 10                  		db 00010000b
(1) 2780/     CCC : 10                  		db 00010000b
(1) 2781/     CCD : 10                  		db 00010000b
(1) 2782/     CCE : 00                  		db 00000000b
(1) 2783/     CCF : 00                  		db 00000000b
(1) 2784/     CD0 : 20                  		db 00100000b
(1) 2785/     CD1 : 20                  		db 00100000b
(1) 2786/     CD2 : 20                  		db 00100000b
(1) 2787/     CD3 :                     
(1) 2788/     CD3 :                     ; REVERSE OUTPUT BITS
(1) 2789/     CD3 :                     ; RRRR | LLLL
(1) 2790/     CD3 :                     .pcm_panlist:
(1) 2791/     CD3 : F0                  		db 0F0h	; 00h
(1) 2792/     CD4 : E0                  		db 0E0h
(1) 2793/     CD5 : D0                  		db 0D0h	; 10h
(1) 2794/     CD6 : C0                  		db 0C0h
(1) 2795/     CD7 : B0                  		db 0B0h	; 20h
(1) 2796/     CD8 : A0                  		db 0A0h
(1) 2797/     CD9 : 90                  		db 090h	; 30h
(1) 2798/     CDA : 80                  		db 080h
(1) 2799/     CDB : 70                  		db 070h	; 40h
(1) 2800/     CDC : 60                  		db 060h
(1) 2801/     CDD : 50                  		db 050h	; 50h
(1) 2802/     CDE : 40                  		db 040h
(1) 2803/     CDF : 30                  		db 030h	; 60h
(1) 2804/     CE0 : 20                  		db 020h
(1) 2805/     CE1 : 10                  		db 010h	; 70h
(1) 2806/     CE2 : 00                  		db 000h
(1) 2807/     CE3 : 00                  		db 000h ; 80h
(1) 2808/     CE4 : 01                  		db 001h
(1) 2809/     CE5 : 02                  		db 002h ; 90h
(1) 2810/     CE6 : 03                  		db 003h
(1) 2811/     CE7 : 04                  		db 004h ; A0h
(1) 2812/     CE8 : 05                  		db 005h
(1) 2813/     CE9 : 06                  		db 006h ; B0h
(1) 2814/     CEA : 07                  		db 007h
(1) 2815/     CEB : 08                  		db 008h ; C0h
(1) 2816/     CEC : 09                  		db 009h
(1) 2817/     CED : 0A                  		db 00Ah ; D0h
(1) 2818/     CEE : 0B                  		db 00Bh
(1) 2819/     CEF : 0C                  		db 00Ch ; E0h
(1) 2820/     CF0 : 0D                  		db 00Dh
(1) 2821/     CF1 : 0E                  		db 00Eh ; F0h
(1) 2822/     CF2 : 0F                  		db 00Fh
(1) 2823/     CF3 :                     
(1) 2824/     CF3 :                     ; ----------------------------------------
(1) 2825/     CF3 :                     ; NEW volume
(1) 2826/     CF3 :                     ; ----------------------------------------
(1) 2827/     CF3 :                     
(1) 2828/     CF3 :                     .volu:
(1) 2829/     CF3 : DD 7E 04            		ld	a,(ix+chnl_Vol)
(1) 2830/     CF6 : D6 40               		sub	a,64
(1) 2831/     CF8 : FD 77 08            		ld	(iy+08h),a	; BASE volume
(1) 2832/     CFB : C9                  		ret
(1) 2833/     CFC :                     
(1) 2834/     CFC :                     ; ----------------------------------------
(1) 2835/     CFC :                     ; NEW instrument
(1) 2836/     CFC :                     ; ----------------------------------------
(1) 2837/     CFC :                     
(1) 2838/     CFC :                     .inst:
(1) 2839/     CFC : 7E                  		ld	a,(hl)
(1) 2840/     CFD : E6 F0               		and	11110000b
(1) 2841/     CFF : FE 80               		cp	080h
(1) 2842/     D01 : 28 24               		jr	z,.ins_psg
(1) 2843/     D03 : FE 90               		cp	090h
(1) 2844/     D05 : 28 1A               		jr	z,.ins_psgn
(1) 2845/     D07 : FE A0               		cp	0A0h
(1) 2846/     D09 : 28 52               		jr	z,.ins_fm
(1) 2847/     D0B : CF                  		rst	8
(1) 2848/     D0C : FE B0               		cp	0B0h
(1) 2849/     D0E : 28 4D               		jr	z,.ins_fm
(1) 2850/     D10 : FE C0               		cp	0C0h
(1) 2851/     D12 : CA DE 0D            		jp	z,.ins_dac
(1) 2852/     D15 : FE D0               		cp	0D0h
(1) 2853/     D17 : CA 32 0E            		jp	z,.ins_pcm
(1) 2854/     D1A : FE E0               		cp	0E0h
(1) 2855/     D1C : CA 6A 0E            		jp	z,.ins_pwm
(1) 2856/     D1F : CF                  		rst	8
(1) 2857/     D20 :                     .invl_ins:
(1) 2858/     D20 : C9                  		ret
(1) 2859/     D21 :                     
(1) 2860/     D21 :                     ; ----------------------------------------
(1) 2861/     D21 :                     ; PSG
(1) 2862/     D21 :                     
(1) 2863/     D21 :                     .ins_psgn:
(1) 2864/     D21 : 7E                  		ld	a,(hl)		; Grab noise setting
(1) 2865/     D22 : E6 07               		and	0111b
(1) 2866/     D24 : 32 81 1C            		ld	(psgHatMode),a	; ** SET GLOBAL SETTING
(1) 2867/     D27 :                     .ins_psg:
(1) 2868/     D27 : CF                  		rst	8
(1) 2869/     D28 : DD E5               		push	ix
(1) 2870/     D2A : E5                  		push	hl
(1) 2871/     D2B : 23                  		inc	hl		; Skip ID
(1) 2872/     D2C : DD 21 02 15         		ld	ix,psgcom	; Read psg control
(1) 2873/     D30 : FD 5E 04            		ld	e,(iy+04h)
(1) 2874/     D33 : 16 00               		ld	d,0
(1) 2875/     D35 : DD 19               		add	ix,de
(1) 2876/     D37 : 7E                  		ld	a,(hl)
(1) 2877/     D38 : CF                  		rst	8
(1) 2878/     D39 : 23                  		inc	hl
(1) 2879/     D3A : 7E                  		ld	a,(hl)
(1) 2880/     D3B : DD 77 24            		ld	(ix+ALV),a	; ALV
(1) 2881/     D3E : 23                  		inc	hl
(1) 2882/     D3F : 7E                  		ld	a,(hl)
(1) 2883/     D40 : DD 77 08            		ld	(ix+ATK),a	; ATK
(1) 2884/     D43 : 23                  		inc	hl
(1) 2885/     D44 : 7E                  		ld	a,(hl)
(1) 2886/     D45 : CF                  		rst	8
(1) 2887/     D46 : DD 77 10            		ld	(ix+SLV),a	; SLV
(1) 2888/     D49 : 23                  		inc	hl
(1) 2889/     D4A : 7E                  		ld	a,(hl)
(1) 2890/     D4B : DD 77 0C            		ld	(ix+DKY),a	; DKY
(1) 2891/     D4E : 23                  		inc	hl
(1) 2892/     D4F : 7E                  		ld	a,(hl)
(1) 2893/     D50 : DD 77 14            		ld	(ix+RRT),a	; RRT
(1) 2894/     D53 : 23                  		inc	hl
(1) 2895/     D54 : 7E                  		ld	a,(hl)
(1) 2896/     D55 : CF                  		rst	8
(1) 2897/     D56 : DD 77 34            		ld	(ix+PARP),a	; ARP
(1) 2898/     D59 : E1                  		pop	hl
(1) 2899/     D5A : DD E1               		pop	ix
(1) 2900/     D5C : C9                  		ret
(1) 2901/     D5D :                     
(1) 2902/     D5D :                     ; ----------------------------------------
(1) 2903/     D5D :                     ; FM/FM3
(1) 2904/     D5D :                     
(1) 2905/     D5D :                     .ins_fm:
(1) 2906/     D5D : DD E5               		push	ix
(1) 2907/     D5F : E5                  		push	hl
(1) 2908/     D60 : C5                  		push	bc
(1) 2909/     D61 :                     ; 		ld	b,(ix+chnl_Ins)	; b - current Ins
(1) 2910/     D61 : FD 46 02            		ld	b,(iy+02h)
(1) 2911/     D64 : FD 7E 04            		ld	a,(iy+04h)
(1) 2912/     D67 : E6 07               		and	0111b
(1) 2913/     D69 : 16 00               		ld	d,0
(1) 2914/     D6B : 87                  		add	a,a
(1) 2915/     D6C : 5F                  		ld	e,a
(1) 2916/     D6D : DD 21 70 1C         		ld	ix,fmcach_list
(1) 2917/     D71 : DD 19               		add	ix,de
(1) 2918/     D73 : CF                  		rst	8
(1) 2919/     D74 : DD 5E 00            		ld	e,(ix)
(1) 2920/     D77 : DD 23               		inc	ix
(1) 2921/     D79 : DD 56 00            		ld	d,(ix)
(1) 2922/     D7C :                     
(1) 2923/     D7C :                     ; 		ld	a,(iy+0Bh)	; 0Bh: DON'T reload flag
(1) 2924/     D7C :                     ; 		cp	b
(1) 2925/     D7C :                     ; 		jr	z,.same_patch
(1) 2926/     D7C :                     ; 		ld	(iy+0Bh),b
(1) 2927/     D7C : 23                  		inc	hl		; Skip id and pitch
(1) 2928/     D7D : 23                  		inc	hl
(1) 2929/     D7E :                     
(1) 2930/     D7E : 46                  		ld	b,(hl)
(1) 2931/     D7F : 23                  		inc	hl
(1) 2932/     D80 : 4E                  		ld	c,(hl)
(1) 2933/     D81 : 23                  		inc	hl
(1) 2934/     D82 : 6E                  		ld	l,(hl)
(1) 2935/     D83 : 61                  		ld	h,c
(1) 2936/     D84 :                     
(1) 2937/     D84 : FD 7E 0A            		ld	a,(iy+0Ah)
(1) 2938/     D87 : BC                  		cp	h
(1) 2939/     D88 : 20 07               		jr	nz,.new_romdat
(1) 2940/     D8A : CF                  		rst	8
(1) 2941/     D8B : FD 7E 0B            		ld	a,(iy+0Bh)
(1) 2942/     D8E : BD                  		cp	l
(1) 2943/     D8F : 28 38               		jr	z,.same_patch
(1) 2944/     D91 :                     .new_romdat:
(1) 2945/     D91 : FD 74 0A            		ld	(iy+0Ah),h
(1) 2946/     D94 : FD 75 0B            		ld	(iy+0Bh),l
(1) 2947/     D97 : 78                  		ld	a,b
(1) 2948/     D98 : 01 28 00            		ld	bc,28h		; <- size
(1) 2949/     D9B : D5                  		push	de
(1) 2950/     D9C : CD CC 0F            		call	transferRom	; *** ROM ACCESS ***
(1) 2951/     D9F :                     
(1) 2952/     D9F : E1                  		pop	hl
(1) 2953/     DA0 : FD 7E 04            		ld	a,(iy+04h)
(1) 2954/     DA3 : 4F                  		ld	c,a		; c - FM Key ID
(1) 2955/     DA4 :                     
(1) 2956/     DA4 :                     	; hl - fmcach intrument
(1) 2957/     DA4 :                     	; de - FM reg and data: 3000h
(1) 2958/     DA4 :                     	;  c - FM keyChannel
(1) 2959/     DA4 : 79                  		ld	a,c
(1) 2960/     DA5 : E6 03               		and	011b
(1) 2961/     DA7 : F6 30               		or	30h		; Start at reg 30h
(1) 2962/     DA9 : 57                  		ld	d,a
(1) 2963/     DAA : 1E 00               		ld	e,0
(1) 2964/     DAC : CF                  		rst	8
(1) 2965/     DAD : 06 1C               		ld	b,7*4		; Write ALL base FM registers
(1) 2966/     DAF : CD CE 0D            		call	.fm_setrlist
(1) 2967/     DB2 :                     ; 		ld	b,4
(1) 2968/     DB2 :                     ; 		call	.fm_setrlist
(1) 2969/     DB2 :                     ; 		ld	b,5*4
(1) 2970/     DB2 :                     ; 		call	.fm_setrlist
(1) 2971/     DB2 : 7E                  		ld	a,(hl)		; 0B0h
(1) 2972/     DB3 : FD 77 0C            		ld	(iy+0Ch),a	; ** Save 0B0h to 0Ch
(1) 2973/     DB6 : 23                  		inc	hl
(1) 2974/     DB7 : 7E                  		ld	a,(hl)		; 0B4h
(1) 2975/     DB8 : FD 77 0D            		ld	(iy+0Dh),a	; ** Save 0B4h to 0Dh
(1) 2976/     DBB : 23                  		inc	hl
(1) 2977/     DBC : CF                  		rst	8
(1) 2978/     DBD : 7E                  		ld	a,(hl)
(1) 2979/     DBE : FD 77 0E            		ld	(iy+0Eh),a	; LFO
(1) 2980/     DC1 : 23                  		inc	hl
(1) 2981/     DC2 : 7E                  		ld	a,(hl)		; 028h keys
(1) 2982/     DC3 : E6 F0               		and	11110000b
(1) 2983/     DC5 : CF                  		rst	8
(1) 2984/     DC6 : FD 77 0F            		ld	(iy+0Fh),a	; ** Save keys to 0Eh
(1) 2985/     DC9 :                     .same_patch:
(1) 2986/     DC9 : C1                  		pop	bc
(1) 2987/     DCA : E1                  		pop	hl
(1) 2988/     DCB : DD E1               		pop	ix
(1) 2989/     DCD : C9                  		ret
(1) 2990/     DCE :                     ; b - numof_regs
(1) 2991/     DCE :                     .fm_setrlist:
(1) 2992/     DCE : 5E                  		ld	e,(hl)
(1) 2993/     DCF : 23                  		inc	hl
(1) 2994/     DD0 : CD E7 11            		call	fm_autoreg
(1) 2995/     DD3 : 00                  		nop
(1) 2996/     DD4 : 00                  		nop
(1) 2997/     DD5 : CF                  		rst	8
(1) 2998/     DD6 : 00                  		nop
(1) 2999/     DD7 : 14                  		inc	d		; +4
(1) 3000/     DD8 : 14                  		inc	d
(1) 3001/     DD9 : 14                  		inc	d
(1) 3002/     DDA : 14                  		inc	d
(1) 3003/     DDB : 10 F1               		djnz	.fm_setrlist
(1) 3004/     DDD : C9                  		ret
(1) 3005/     DDE :                     
(1) 3006/     DDE :                     ; ----------------------------------------
(1) 3007/     DDE :                     
(1) 3008/     DDE :                     .ins_dac:
(1) 3009/     DDE : E5                  		push	hl
(1) 3010/     DDF : C5                  		push	bc
(1) 3011/     DE0 : CD 16 12            		call	dac_off
(1) 3012/     DE3 : 7E                  		ld	a,(hl)
(1) 3013/     DE4 : E6 0F               		and	00001111b
(1) 3014/     DE6 : 32 97 1C            		ld	(wave_Flags),a
(1) 3015/     DE9 : CF                  		rst	8
(1) 3016/     DEA : 23                  		inc	hl
(1) 3017/     DEB : 23                  		inc	hl
(1) 3018/     DEC : 5E                  		ld	e,(hl)
(1) 3019/     DED : 23                  		inc	hl
(1) 3020/     DEE : 7E                  		ld	a,(hl)
(1) 3021/     DEF : 23                  		inc	hl
(1) 3022/     DF0 : 6E                  		ld	l,(hl)
(1) 3023/     DF1 : 67                  		ld	h,a
(1) 3024/     DF2 : E5                  		push	hl
(1) 3025/     DF3 : 7B                  		ld	a,e
(1) 3026/     DF4 : 01 06 00            		ld	bc,6		; Skip head
(1) 3027/     DF7 : 09                  		add	hl,bc
(1) 3028/     DF8 : CE 00               		adc	a,0
(1) 3029/     DFA : 22 8C 1C            		ld	(wave_Start),hl	; Set START point
(1) 3030/     DFD : 32 8E 1C            		ld	(wave_Start+2),a
(1) 3031/     E00 : E1                  		pop	hl
(1) 3032/     E01 : 7B                  		ld	a,e
(1) 3033/     E02 : 11 AF 1C            		ld	de,sampleHead
(1) 3034/     E05 : 01 06 00            		ld	bc,6
(1) 3035/     E08 : D5                  		push	de
(1) 3036/     E09 : CF                  		rst	8
(1) 3037/     E0A : CD CC 0F            		call	transferRom	; *** ROM ACCESS ***
(1) 3038/     E0D : E1                  		pop	hl
(1) 3039/     E0E :                     	; hl - temporal header
(1) 3040/     E0E : 5E                  		ld	e,(hl)
(1) 3041/     E0F : 23                  		inc	hl
(1) 3042/     E10 : 56                  		ld	d,(hl)
(1) 3043/     E11 : 23                  		inc	hl
(1) 3044/     E12 : 7E                  		ld	a,(hl)
(1) 3045/     E13 : 23                  		inc	hl
(1) 3046/     E14 : ED 53 8F 1C         		ld	(wave_Len),de	; LEN
(1) 3047/     E18 : 32 91 1C            		ld	(wave_Len+2),a
(1) 3048/     E1B : 5E                  		ld	e,(hl)
(1) 3049/     E1C : 23                  		inc	hl
(1) 3050/     E1D : CF                  		rst	8
(1) 3051/     E1E : 56                  		ld	d,(hl)
(1) 3052/     E1F : 23                  		inc	hl
(1) 3053/     E20 : 7E                  		ld	a,(hl)
(1) 3054/     E21 : 23                  		inc	hl
(1) 3055/     E22 : ED 53 92 1C         		ld	(wave_Loop),de	; LOOP
(1) 3056/     E26 : 32 94 1C            		ld	(wave_Loop+2),a
(1) 3057/     E29 : 11 06 28            		ld	de,2806h	; keys off
(1) 3058/     E2C : CD EB 11            		call	fm_send_1
(1) 3059/     E2F : C1                  		pop	bc
(1) 3060/     E30 : E1                  		pop	hl
(1) 3061/     E31 :                     ; .same_dac:
(1) 3062/     E31 : C9                  		ret
(1) 3063/     E32 :                     
(1) 3064/     E32 :                     ; ----------------------------------------
(1) 3065/     E32 :                     
(1) 3066/     E32 :                     .ins_pcm:
(1) 3067/     E32 : DD E5               		push	ix
(1) 3068/     E34 : E5                  		push	hl
(1) 3069/     E35 : C5                  		push	bc
(1) 3070/     E36 : 7E                  		ld	a,(hl)		; Stereo|Loop bits
(1) 3071/     E37 : E6 01               		and	00000001b	; Read loop bit
(1) 3072/     E39 : 0F                  		rrca			; Move to MSB
(1) 3073/     E3A : CF                  		rst	8
(1) 3074/     E3B : 23                  		inc	hl		; Skip ID and Pitch
(1) 3075/     E3C : 23                  		inc	hl
(1) 3076/     E3D : 5E                  		ld	e,(hl)		; Read 24-bit pointer
(1) 3077/     E3E : B3                  		or	e
(1) 3078/     E3F : 5F                  		ld	e,a
(1) 3079/     E40 : 23                  		inc	hl
(1) 3080/     E41 : 7E                  		ld	a,(hl)
(1) 3081/     E42 : 23                  		inc	hl
(1) 3082/     E43 : 6E                  		ld	l,(hl)
(1) 3083/     E44 : 67                  		ld	h,a
(1) 3084/     E45 :                     	; d    - Loop enable bit
(1) 3085/     E45 :                     	; e,hl - 24-bit pointer + loop bit
(1) 3086/     E45 : DD 21 8A 14         		ld	ix,pcmcom
(1) 3087/     E49 : 06 00               		ld	b,0
(1) 3088/     E4B : FD 4E 04            		ld	c,(iy+04h)
(1) 3089/     E4E : DD 09               		add	ix,bc
(1) 3090/     E50 : 01 28 00            		ld	bc,40		; Go to 40
(1) 3091/     E53 : DD 09               		add	ix,bc
(1) 3092/     E55 : 01 08 00            		ld	bc,8
(1) 3093/     E58 : DD 73 00            		ld	(ix),e		; Write 24-bit pointer
(1) 3094/     E5B : DD 09               		add	ix,bc
(1) 3095/     E5D : DD 74 00            		ld	(ix),h
(1) 3096/     E60 : DD 09               		add	ix,bc
(1) 3097/     E62 : DD 75 00            		ld	(ix),l
(1) 3098/     E65 : C1                  		pop	bc
(1) 3099/     E66 : E1                  		pop	hl
(1) 3100/     E67 : DD E1               		pop	ix
(1) 3101/     E69 : C9                  		ret
(1) 3102/     E6A :                     
(1) 3103/     E6A :                     ; ----------------------------------------
(1) 3104/     E6A :                     
(1) 3105/     E6A :                     .ins_pwm:
(1) 3106/     E6A : DD E5               		push	ix
(1) 3107/     E6C : E5                  		push	hl
(1) 3108/     E6D : C5                  		push	bc
(1) 3109/     E6E : 7E                  		ld	a,(hl)		; Stereo|Loop bits
(1) 3110/     E6F : E6 03               		and	00000011b
(1) 3111/     E71 : 0F                  		rrca
(1) 3112/     E72 : 0F                  		rrca
(1) 3113/     E73 : 4F                  		ld	c,a
(1) 3114/     E74 : CF                  		rst	8
(1) 3115/     E75 : 23                  		inc	hl		; Skip ID and Pitch
(1) 3116/     E76 : 23                  		inc	hl
(1) 3117/     E77 : 56                  		ld	d,(hl)
(1) 3118/     E78 : 23                  		inc	hl
(1) 3119/     E79 : 5E                  		ld	e,(hl)
(1) 3120/     E7A : 23                  		inc	hl
(1) 3121/     E7B : 7E                  		ld	a,(hl)
(1) 3122/     E7C : 23                  		inc	hl
(1) 3123/     E7D : 6E                  		ld	l,(hl)
(1) 3124/     E7E : 67                  		ld	h,a
(1) 3125/     E7F : 79                  		ld	a,c
(1) 3126/     E80 : B2                  		or	d
(1) 3127/     E81 : 57                  		ld	d,a
(1) 3128/     E82 : CF                  		rst	8
(1) 3129/     E83 :                     	; de,hl - 32-bit PWM pointer
(1) 3130/     E83 : DD 21 CA 14         		ld	ix,pwmcom
(1) 3131/     E87 : 06 00               		ld	b,0
(1) 3132/     E89 : FD 4E 04            		ld	c,(iy+04h)
(1) 3133/     E8C : DD 09               		add	ix,bc
(1) 3134/     E8E : 01 18 00            		ld	bc,24
(1) 3135/     E91 : DD 09               		add	ix,bc	; Move to PWOUTF
(1) 3136/     E93 : 01 08 00            		ld	bc,8
(1) 3137/     E96 : DD 72 00            		ld	(ix),d
(1) 3138/     E99 : DD 09               		add	ix,bc
(1) 3139/     E9B : DD 73 00            		ld	(ix),e
(1) 3140/     E9E : DD 09               		add	ix,bc
(1) 3141/     EA0 : DD 74 00            		ld	(ix),h
(1) 3142/     EA3 : DD 09               		add	ix,bc
(1) 3143/     EA5 : DD 75 00            		ld	(ix),l
(1) 3144/     EA8 : C1                  		pop	bc
(1) 3145/     EA9 : E1                  		pop	hl
(1) 3146/     EAA : DD E1               		pop	ix
(1) 3147/     EAC : C9                  		ret
(1) 3148/     EAD :                     
(1) 3149/     EAD :                     ; ----------------------------------------
(1) 3150/     EAD :                     ; NEW note
(1) 3151/     EAD :                     ; ----------------------------------------
(1) 3152/     EAD :                     
(1) 3153/     EAD :                     .note:
(1) 3154/     EAD : 78                  		ld	a,b		; Volume bit?
(1) 3155/     EAE : E6 04               		and	0100b
(1) 3156/     EB0 : 20 05               		jr	nz,.fm_hasvol
(1) 3157/     EB2 : FD 36 08 00         		ld	(iy+08h),0	; Reset to default volume
(1) 3158/     EB6 : CF                  		rst	8
(1) 3159/     EB7 :                     .fm_hasvol:
(1) 3160/     EB7 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 3161/     EBA : 4F                  		ld	c,a
(1) 3162/     EBB : FE FF               		cp	-1
(1) 3163/     EBD : C8                  		ret	z
(1) 3164/     EBE : FE FE               		cp	-2
(1) 3165/     EC0 : C8                  		ret	z
(1) 3166/     EC1 : E7                  		rst	20h
(1) 3167/     EC2 : 7E                  		ld	a,(hl)
(1) 3168/     EC3 : E6 F0               		and	11110000b
(1) 3169/     EC5 : FE 80               		cp	80h
(1) 3170/     EC7 : 28 16               		jr	z,.n_indx
(1) 3171/     EC9 : CF                  		rst	8
(1) 3172/     ECA : FE 90               		cp	90h
(1) 3173/     ECC : 28 20               		jr	z,.n_psgn
(1) 3174/     ECE : FE A0               		cp	0A0h
(1) 3175/     ED0 : 28 21               		jr	z,.n_fm
(1) 3176/     ED2 :                     ; 		cp	0B0h		; ** Can't use notes on FM special **
(1) 3177/     ED2 :                     ; 		jr	z,.n_fm
(1) 3178/     ED2 : FE C0               		cp	0C0h
(1) 3179/     ED4 : 28 09               		jr	z,.n_indx
(1) 3180/     ED6 : FE D0               		cp	0D0h
(1) 3181/     ED8 : 28 05               		jr	z,.n_indx
(1) 3182/     EDA : FE E0               		cp	0E0h
(1) 3183/     EDC : 28 01               		jr	z,.n_indx
(1) 3184/     EDE : C9                  		ret
(1) 3185/     EDF :                     
(1) 3186/     EDF :                     ; --------------------------------
(1) 3187/     EDF :                     
(1) 3188/     EDF :                     .n_indx:
(1) 3189/     EDF : 79                  		ld	a,c
(1) 3190/     EE0 :                     .n_stfreq:
(1) 3191/     EE0 : 23                  		inc	hl		; Skip ID
(1) 3192/     EE1 : 5E                  		ld	e,(hl)		; Read pitch
(1) 3193/     EE2 : 2B                  		dec	hl
(1) 3194/     EE3 : 83                  		add	a,e		; Note + pitch
(1) 3195/     EE4 : CF                  		rst	8
(1) 3196/     EE5 : 87                  		add	a,a		; * 2
(1) 3197/     EE6 : FD 77 06            		ld	(iy+06h),a
(1) 3198/     EE9 : FD 36 07 00         		ld	(iy+07h),0	; reset pitchbend
(1) 3199/     EED : C9                  		ret
(1) 3200/     EEE :                     .n_psgn:
(1) 3201/     EEE : 79                  		ld	a,c
(1) 3202/     EEF : C6 0C               		add	a,12		; <-- Manual adjust for NOISE
(1) 3203/     EF1 : 18 ED               		jr	.n_stfreq
(1) 3204/     EF3 :                     
(1) 3205/     EF3 :                     ; FM freqs
(1) 3206/     EF3 :                     .n_fm:
(1) 3207/     EF3 : 79                  		ld	a,c
(1) 3208/     EF4 : 23                  		inc	hl		; Skip ID
(1) 3209/     EF5 : 5E                  		ld	e,(hl)		; Read pitch
(1) 3210/     EF6 : 2B                  		dec	hl
(1) 3211/     EF7 : CF                  		rst	8
(1) 3212/     EF8 : 83                  		add	a,e		; Note + pitch
(1) 3213/     EF9 :                     	; Search for octave and note...
(1) 3214/     EF9 : 0E 00               		ld	c,0		; c - octave
(1) 3215/     EFB : 16 07               		ld	d,7
(1) 3216/     EFD :                     .get_oct:
(1) 3217/     EFD : 5F                  		ld	e,a		; e - note
(1) 3218/     EFE : D6 0C               		sub	12
(1) 3219/     F00 : B7                  		or	a
(1) 3220/     F01 : FA 08 0F            		jp	m,.fnd_oct
(1) 3221/     F04 : 0C                  		inc	c
(1) 3222/     F05 :                     ; 		nop
(1) 3223/     F05 :                     ; 		nop
(1) 3224/     F05 :                     ; 		rst	8
(1) 3225/     F05 :                     ; 		nop
(1) 3226/     F05 :                     ; 		nop
(1) 3227/     F05 : 15                  		dec	d
(1) 3228/     F06 : 20 F5               		jr	nz,.get_oct
(1) 3229/     F08 :                     .fnd_oct:
(1) 3230/     F08 : CF                  		rst	8
(1) 3231/     F09 : 7B                  		ld	a,e
(1) 3232/     F0A : 87                  		add	a,a		; Note * 2
(1) 3233/     F0B : E6 1F               		and	00011111b
(1) 3234/     F0D : CB 09               		rrc	c
(1) 3235/     F0F : CB 09               		rrc	c
(1) 3236/     F11 : CB 09               		rrc	c
(1) 3237/     F13 : CF                  		rst	8
(1) 3238/     F14 : B1                  		or	c
(1) 3239/     F15 : FD 77 06            		ld	(iy+06h),a	; Save octave + index: OOOiiiiib
(1) 3240/     F18 : FD 36 07 00         		ld	(iy+07h),0
(1) 3241/     F1C : C9                  		ret
(1) 3242/     F1D :                     
(1) 3243/     F1D :                     ; ----------------------------------------
(1) 3244/     F1D :                     
(1) 3245/     F1D :                     .chnl_ulnkcut:
(1) 3246/     F1D : DD 4E 01            		ld	c,(ix+chnl_Chip)
(1) 3247/     F20 : C3 23 0F            		jp	.chnl_ulnk
(1) 3248/     F23 :                     .chnl_ulnkoff:
(1) 3249/     F23 :                     ; 		ld	c,0
(1) 3250/     F23 :                     .chnl_ulnk:
(1) 3251/     F23 : AF                  		xor	a
(1) 3252/     F24 : CF                  		rst	8
(1) 3253/     F25 : FD 77 00            		ld	(iy),a			; Delete link, chip and prio
(1) 3254/     F28 : FD 77 01            		ld	(iy+1),a
(1) 3255/     F2B : FD 77 02            		ld	(iy+2),a
(1) 3256/     F2E : FD 77 03            		ld	(iy+3),a
(1) 3257/     F31 : FD 77 08            		ld	(iy+08h),a
(1) 3258/     F34 : FD 77 09            		ld	(iy+09h),a
(1) 3259/     F37 : FD 77 0A            		ld	(iy+0Ah),a
(1) 3260/     F3A : FD 77 0B            		ld	(iy+0Bh),a
(1) 3261/     F3D : C9                  		ret
(1) 3262/     F3E :                     
(1) 3263/     F3E :                     ; 		push	iy
(1) 3264/     F3E :                     ; 		pop	hl
(1) 3265/     F3E :                     ; 		ld	bc,8-2		; Go to 08h
(1) 3266/     F3E :                     ; 		add	hl,bc
(1) 3267/     F3E :                     ; 		rst	8
(1) 3268/     F3E :                     ; 		ld	b,8/2
(1) 3269/     F3E :                     ; .clrfull:
(1) 3270/     F3E :                     ; 		ld	(hl),0		; Reset settings 08-0Bh
(1) 3271/     F3E :                     ; 		inc	hl
(1) 3272/     F3E :                     ; 		ld	(hl),0
(1) 3273/     F3E :                     ; 		inc	hl
(1) 3274/     F3E :                     ; 		rst	8
(1) 3275/     F3E :                     ; 		djnz	.clrfull
(1) 3276/     F3E :                     ; 		ret
(1) 3277/     F3E :                     
(1) 3278/     F3E :                     ; ============================================================
(1) 3279/     F3E :                     ; --------------------------------------------------------
(1) 3280/     F3E :                     ; Communication with the SCD and 32X
(1) 3281/     F3E :                     ;
(1) 3282/     F3E :                     ; SCD: Sends a level2 interrupt to Sub-CPU*
(1) 3283/     F3E :                     ; 32X: Interrupts Slave SH2 with CMD request
(1) 3284/     F3E :                     ;
(1) 3285/     F3E :                     ; *Originally meant for waiting VBlank, that's
(1) 3286/     F3E :                     ; the only one available for sending the table
(1) 3287/     F3E :                     ; --------------------------------------------------------
(1) 3288/     F3E :                     
(1) 3289/     F3E :                     ; NOTE: careful modifing this
(1) 3290/     F3E :                     
(1) 3291/     F3E :                     zmars_send:
(1) 3292/     F3E :                     	; ----------------------------------------
(1) 3293/     F3E :                     	; Send PCM table
(1) 3373/     F3E :                     	; ----------------------------------------
(1) 3374/     F3E :                     	; Send PWM table
(1) 3466/     F3E : C9                  		ret
(1) 3467/     F3F :                     
(1) 3468/     F3F :                     ; --------------------------------------------------------
(1) 3469/     F3F :                     ; Set bank to $A10000 area
(1) 3485/     F3F :                     
(1) 3486/     F3F :                     ; ====================================================================
(1) 3487/     F3F :                     ; ----------------------------------------------------------------
(1) 3488/     F3F :                     ; Subroutines
(1) 3489/     F3F :                     ; ----------------------------------------------------------------
(1) 3490/     F3F :                     
(1) 3491/     F3F :                     ; --------------------------------------------------------
(1) 3492/     F3F :                     ; Init sound engine
(1) 3493/     F3F :                     ; --------------------------------------------------------
(1) 3494/     F3F :                     
(1) 3495/     F3F :                     gema_init:
(1) 3496/     F3F : CD 16 12            		call	dac_off
(1) 3497/     F42 : AF                  		xor	a
(1) 3498/     F43 :                     ; 		ld	(marsUpd),a
(1) 3499/     F43 :                     ; 		ld	(mcdUpd),a
(1) 3500/     F43 : 32 30 00            		ld	(cdRamLen),a
(1) 3501/     F46 : CD 25 13            		call	gema_lastbank	; Set last bank slot BEFORE writing to PSG (32X bus problem)
(1) 3502/     F49 : 21 11 7F            		ld	hl,Zpsg_ctrl	; Silence PSG channels
(1) 3503/     F4C : 36 9F               		ld	(hl),09Fh
(1) 3504/     F4E : 36 BF               		ld	(hl),0BFh
(1) 3505/     F50 : 36 DF               		ld	(hl),0DFh
(1) 3506/     F52 : 36 FF               		ld	(hl),0FFh
(1) 3507/     F54 : 11 0B 22            		ld	de,2208h|03h	; Set Default LFO
(1) 3508/     F57 : CD EB 11            		call	fm_send_1
(1) 3509/     F5A : 11 00 27            		ld	de,2700h	; CH3 special and timers off
(1) 3510/     F5D : CD EB 11            		call	fm_send_1
(1) 3511/     F60 :                     ; 		ld	de,2800h
(1) 3512/     F60 : 14                  		inc	d		; FM KEYS off
(1) 3513/     F61 : CD EB 11            		call	fm_send_1
(1) 3514/     F64 : 1C                  		inc	e
(1) 3515/     F65 : CD EB 11            		call	fm_send_1
(1) 3516/     F68 : 1C                  		inc	e
(1) 3517/     F69 : CD EB 11            		call	fm_send_1
(1) 3518/     F6C : 1C                  		inc	e
(1) 3519/     F6D : 1C                  		inc	e
(1) 3520/     F6E : CD EB 11            		call	fm_send_1
(1) 3521/     F71 : 1C                  		inc	e
(1) 3522/     F72 : CD EB 11            		call	fm_send_1
(1) 3523/     F75 : 1C                  		inc	e
(1) 3524/     F76 : CD EB 11            		call	fm_send_1
(1) 3525/     F79 : FD 21 68 14         		ld	iy,nikona_BuffList
(1) 3526/     F7D : 0E 01               		ld	c,1			; Start at this priority
(1) 3527/     F7F :                     .setup_list:
(1) 3528/     F7F : FD 7E 00            		ld	a,(iy)
(1) 3529/     F82 : FE FF               		cp	-1
(1) 3530/     F84 : 28 24               		jr	z,.end_setup
(1) 3531/     F86 : FD 23               		inc	iy
(1) 3532/     F88 : 6F                  		ld	l,a
(1) 3533/     F89 : FD 66 00            		ld	h,(iy)
(1) 3534/     F8C : E5                  		push	hl
(1) 3535/     F8D : DD E1               		pop	ix
(1) 3536/     F8F : DD 71 14            		ld	(ix+trk_Priority),c
(1) 3537/     F92 : DD 36 01 FF         		ld	(ix+trk_SeqId),-1	; Reset sequence ID
(1) 3538/     F96 : FD 23               		inc	iy
(1) 3539/     F98 :                     	; iy - src
(1) 3540/     F98 :                     	; hl - dst
(1) 3541/     F98 : 11 04 00            		ld	de,trk_Blocks
(1) 3542/     F9B : 19                  		add	hl,de
(1) 3543/     F9C : 06 06               		ld	b,MAX_BUFFNTRY-2
(1) 3544/     F9E :                     .st_copy:
(1) 3545/     F9E : FD 7E 00            		ld	a,(iy)
(1) 3546/     FA1 : 77                  		ld	(hl),a
(1) 3547/     FA2 : FD 23               		inc	iy
(1) 3548/     FA4 : 23                  		inc	hl
(1) 3549/     FA5 : 10 F7               		djnz	.st_copy
(1) 3550/     FA7 : 0C                  		inc	c
(1) 3551/     FA8 : 18 D5               		jr	.setup_list
(1) 3552/     FAA :                     .end_setup:
(1) 3553/     FAA : C9                  		ret
(1) 3554/     FAB :                     
(1) 3555/     FAB :                     ; --------------------------------------------------------
(1) 3556/     FAB :                     ; get_tick
(1) 3557/     FAB :                     ;
(1) 3558/     FAB :                     ; Checks if VBlank triggred a TICK
(1) 3559/     FAB :                     ; (1/150 NTSC, 1/120 PAL)
(1) 3560/     FAB :                     ; --------------------------------------------------------
(1) 3561/     FAB :                     
(1) 3562/     FAB :                     get_tick:
(1) 3563/     FAB : F3                  		di				; Disable ints
(1) 3564/     FAC : F5                  		push	af
(1) 3565/     FAD : E5                  		push	hl
(1) 3566/     FAE : 21 7F 1C            		ld	hl,tickFlag		; read last TICK flag
(1) 3567/     FB1 : 7E                  		ld	a,(hl)			; non-zero value (1Fh)?
(1) 3568/     FB2 : B7                  		or 	a
(1) 3569/     FB3 : 28 13               		jr	z,.ctnotick
(1) 3570/     FB5 : 36 00               		ld	(hl),0			; Reset TICK flag
(1) 3571/     FB7 : 23                  		inc	hl			; Move to tickCnt
(1) 3572/     FB8 : 34                  		inc	(hl)			; and increment
(1) 3573/     FB9 : CF                  		rst	8
(1) 3574/     FBA : D5                  		push	de
(1) 3575/     FBB : 2A 9B 1C            		ld	hl,(sbeatAcc)		; Increment subbeats
(1) 3576/     FBE : ED 5B 9D 1C         		ld	de,(sbeatPtck)
(1) 3577/     FC2 : CF                  		rst	8
(1) 3578/     FC3 : 19                  		add	hl,de
(1) 3579/     FC4 : 22 9B 1C            		ld	(sbeatAcc),hl
(1) 3580/     FC7 : D1                  		pop	de
(1) 3581/     FC8 :                     .ctnotick:
(1) 3582/     FC8 : E1                  		pop	hl
(1) 3583/     FC9 : F1                  		pop	af
(1) 3584/     FCA : FB                  		ei				; Enable ints again
(1) 3585/     FCB : C9                  		ret
(1) 3586/     FCC :                     
(1) 3587/     FCC :                     ; --------------------------------------------------------
(1) 3588/     FCC :                     ; transferRom
(1) 3589/     FCC :                     ;
(1) 3590/     FCC :                     ; Transfer bytes from ROM to RAM. This also tells
(1) 3591/     FCC :                     ; to 68k that we want to access ROM
(1) 3592/     FCC :                     ;
(1) 3593/     FCC :                     ; Input:
(1) 3594/     FCC :                     ; a  - 68K Address $xx0000
(1) 3595/     FCC :                     ;  c - Byte count (size 0 NOT allowed, MAX: 0FFh)
(1) 3596/     FCC :                     ; hl - 68K Address $00xxxx
(1) 3597/     FCC :                     ; de - Destination pointer
(1) 3598/     FCC :                     ;
(1) 3599/     FCC :                     ; Uses:
(1) 3600/     FCC :                     ; b
(1) 3601/     FCC :                     ;
(1) 3602/     FCC :                     ; Notes:
(1) 3603/     FCC :                     ; call RST 20h first if transfering anything other
(1) 3604/     FCC :                     ; than sample data, just to be safe.
(1) 3605/     FCC :                     ; --------------------------------------------------------
(1) 3606/     FCC :                     
(1) 3607/     FCC :                     transferRom:
(1) 3608/     FCC : FE FF               		cp	0FFh		; <-- WORKAROUND FOR $FF0000 area
(1) 3609/     FCE : 28 43               		jr	z,.from_ram
(1) 3610/     FD0 : CF                  		rst	8
(1) 3611/     FD1 : DD E5               		push	ix
(1) 3612/     FD3 : DD 21 2F 00         		ld	ix,commZRomBlk	; ix - rom read/block flags
(1) 3613/     FD7 : 22 99 1C            		ld	(x68ksrclsb),hl	; save hl copy
(1) 3614/     FDA : CB BC               		res	7,h
(1) 3615/     FDC : 06 00               		ld	b,0
(1) 3616/     FDE : 0B                  		dec	bc
(1) 3617/     FDF : 09                  		add	hl,bc
(1) 3618/     FE0 : CB 7C               		bit	7,h
(1) 3619/     FE2 : 20 0B               		jr	nz,.double
(1) 3620/     FE4 : 2A 99 1C            		ld	hl,(x68ksrclsb)	; single transfer
(1) 3621/     FE7 : 0C                  		inc	c
(1) 3622/     FE8 : 47                  		ld	b,a
(1) 3623/     FE9 : CD 31 10            		call	.transfer
(1) 3624/     FEC : DD E1               		pop	ix
(1) 3625/     FEE : C9                  		ret
(1) 3626/     FEF :                     .double:
(1) 3627/     FEF : CF                  		rst	8
(1) 3628/     FF0 : 47                  		ld	b,a		; double transfer
(1) 3629/     FF1 : C5                  		push	bc
(1) 3630/     FF2 : E5                  		push	hl
(1) 3631/     FF3 : 79                  		ld	a,c
(1) 3632/     FF4 : 95                  		sub	a,l
(1) 3633/     FF5 : 4F                  		ld	c,a
(1) 3634/     FF6 : 2A 99 1C            		ld	hl,(x68ksrclsb)
(1) 3635/     FF9 : CD 31 10            		call	.transfer
(1) 3636/     FFC : E1                  		pop	hl
(1) 3637/     FFD : C1                  		pop	bc
(1) 3638/     FFE :                     ; 		rst	8
(1) 3639/     FFE : 4D                  		ld	c,l
(1) 3640/     FFF : 0C                  		inc	c
(1) 3641/    1000 : 3A 9A 1C            		ld	a,(x68ksrcmid)
(1) 3642/    1003 : E6 80               		and	80h
(1) 3643/    1005 : C6 80               		add	a,80h
(1) 3644/    1007 : 67                  		ld	h,a
(1) 3645/    1008 : 2E 00               		ld	l,0
(1) 3646/    100A : 30 01               		jr	nc,.x68knocarry
(1) 3647/    100C : 04                  		inc	b
(1) 3648/    100D :                     .x68knocarry:
(1) 3649/    100D : CD 31 10            		call	.transfer
(1) 3650/    1010 : DD E1               		pop	ix
(1) 3651/    1012 : C9                  		ret
(1) 3652/    1013 :                     
(1) 3653/    1013 :                     ; ------------------------------------------------
(1) 3654/    1013 :                     ; WORKAROUND FOR READING FROM $FF0000 RAM
(1) 3655/    1013 :                     ;
(1) 3656/    1013 :                     ; On the 68K side YOU MUST CALL
(1) 3657/    1013 :                     ; Sound_Update on a loop during Display.
(1) 3658/    1013 :                     ; ------------------------------------------------
(1) 3659/    1013 :                     
(1) 3660/    1013 :                     .from_ram:
(1) 3661/    1013 : ED 53 31 00         		ld	(cdRamDst),de
(1) 3662/    1017 : 22 33 00            		ld	(cdRamSrc),hl
(1) 3663/    101A : 32 35 00            		ld	(cdRamSrcB),a
(1) 3664/    101D : CD 25 13            		call	gema_lastbank			; ** Set bank to $FF8000 area
(1) 3665/    1020 : CF                  		rst	8
(1) 3666/    1021 : 79                  		ld	a,c
(1) 3667/    1022 : 32 30 00            		ld	(cdRamLen),a
(1) 3668/    1025 : 21 00 FF            		ld	hl,RAM_ZCdFlag_D&07FFFh+8000h	; ** EXTERNAL WRITE TO 68K RAM **
(1) 3669/    1028 : 36 01               		ld	(hl),1				; WRITE TO RAM: Set request, 68k clears.
(1) 3670/    102A :                     .wait:
(1) 3671/    102A : 3A 30 00            		ld	a,(cdRamLen)			; Wait until 68K clears this
(1) 3672/    102D : B7                  		or	a
(1) 3673/    102E : 20 FA               		jr	nz,.wait
(1) 3674/    1030 : C9                  		ret
(1) 3675/    1031 :                     
(1) 3676/    1031 :                     ; ------------------------------------------------
(1) 3677/    1031 :                     ; b  - Source ROM bank
(1) 3678/    1031 :                     ;  c - Bytes to transfer (00h is invalid)
(1) 3679/    1031 :                     ; hl - Source ROM $00xxxx | 8000h
(1) 3680/    1031 :                     ; de - Destination address
(1) 3681/    1031 :                     ; ix - ROM-block flag
(1) 3682/    1031 :                     ; ------------------------------------------------
(1) 3683/    1031 :                     
(1) 3684/    1031 :                     .transfer:
(1) 3685/    1031 : CF                  		rst	8
(1) 3686/    1032 : D5                  		push	de
(1) 3687/    1033 : 11 00 60            		ld	de,6000h
(1) 3688/    1036 : 7C                  		ld	a,h
(1) 3689/    1037 : 07                  		rlca
(1) 3690/    1038 : 12                  		ld	(de),a
(1) 3691/    1039 : 78                  		ld	a,b
(1) 3692/    103A : CF                  		rst	8
(1) 3693/    103B : 12                  		ld	(de),a
(1) 3694/    103C : 0F                  		rrca
(1) 3695/    103D : 12                  		ld	(de),a
(1) 3696/    103E : 0F                  		rrca
(1) 3697/    103F : 12                  		ld	(de),a
(1) 3698/    1040 : 0F                  		rrca
(1) 3699/    1041 : 12                  		ld	(de),a
(1) 3700/    1042 : 0F                  		rrca
(1) 3701/    1043 : CF                  		rst	8
(1) 3702/    1044 : 12                  		ld	(de),a
(1) 3703/    1045 : 0F                  		rrca
(1) 3704/    1046 : 12                  		ld	(de),a
(1) 3705/    1047 : 0F                  		rrca
(1) 3706/    1048 : 12                  		ld	(de),a
(1) 3707/    1049 : 0F                  		rrca
(1) 3708/    104A : 12                  		ld	(de),a
(1) 3709/    104B : D1                  		pop	de
(1) 3710/    104C : CB FC               		set	7,h
(1) 3711/    104E : CF                  		rst	8
(1) 3712/    104F :                     
(1) 3713/    104F :                     	; Transfer ROM data in packets
(1) 3714/    104F :                     	; while playing the cache'd sample
(1) 3715/    104F :                     	; *** CRITICAL PROCESS ***
(1) 3716/    104F :                     	;
(1) 3717/    104F :                     	; pseudo-ref for ldir:
(1) 3718/    104F :                     	; ld (de),(hl)	; load (hl) to (de) directly
(1) 3719/    104F :                     	; inc de	; next de
(1) 3720/    104F :                     	; inc hl	; next hl
(1) 3721/    104F :                     	; dec bc	; decrement bc
(1) 3722/    104F :                     	;
(1) 3723/    104F : 06 00               		ld	b,0
(1) 3724/    1051 : 79                  		ld	a,c		; a - Size counter
(1) 3725/    1052 :                     ; 		set	1,(ix)
(1) 3726/    1052 : D6 08               		sub	MAX_TRFRPZ	; Length lower than MAX_TRFRPZ?
(1) 3727/    1054 : 38 14               		jr	c,.x68klast	; Process single piece only
(1) 3728/    1056 :                     .x68kloop:
(1) 3729/    1056 : CF                  		rst	8
(1) 3730/    1057 : 00                  		nop
(1) 3731/    1058 : 0E 07               		ld	c,MAX_TRFRPZ-1
(1) 3732/    105A : DD CB 00 46         		bit	0,(ix)		; Genesis requests BUS?
(1) 3733/    105E : C4 78 10            		call	nz,.x68klpwt
(1) 3734/    1061 : ED B0               		ldir			; (de) to (hl) until bc == 0
(1) 3735/    1063 : CF                  		rst	8
(1) 3736/    1064 : 00                  		nop
(1) 3737/    1065 : D6 07               		sub	a,MAX_TRFRPZ-1
(1) 3738/    1067 : D2 56 10            		jp	nc,.x68kloop
(1) 3739/    106A :                     ; last block
(1) 3740/    106A :                     .x68klast:
(1) 3741/    106A : C6 08               		add	a,MAX_TRFRPZ
(1) 3742/    106C : 4F                  		ld	c,a
(1) 3743/    106D : DD CB 00 46         		bit	0,(ix)		; Genesis requests BUS?
(1) 3744/    1071 : C4 78 10            		call	nz,.x68klpwt
(1) 3745/    1074 : ED B0               		ldir
(1) 3746/    1076 : CF                  		rst	8
(1) 3747/    1077 : C9                  		ret
(1) 3748/    1078 :                     
(1) 3749/    1078 :                     ; Wait here until Genesis unlocks ROM
(1) 3750/    1078 :                     .x68klpwt:
(1) 3751/    1078 : 00                  		nop	; WAVE SYNC
(1) 3752/    1079 : 00                  		nop
(1) 3753/    107A :                     .x68kpwtlp:
(1) 3754/    107A : CF                  		rst	8
(1) 3755/    107B : 00                  		nop	; WAVE SYNC
(1) 3756/    107C : 00                  		nop
(1) 3757/    107D : DD CB 00 46         		bit	0,(ix)		; 68k finished?
(1) 3758/    1081 : 20 F7               		jr	nz,.x68kpwtlp
(1) 3759/    1083 : C9                  		ret
(1) 3760/    1084 :                     
(1) 3761/    1084 :                     ; ====================================================================
(1) 3762/    1084 :                     ; ----------------------------------------------------------------
(1) 3763/    1084 :                     ; Sound chip routines
(1) 3764/    1084 :                     ; ----------------------------------------------------------------
(1) 3765/    1084 :                     
(1) 3766/    1084 :                     ; --------------------------------------------------------
(1) 3767/    1084 :                     ; chip_env
(1) 3768/    1084 :                     ;
(1) 3769/    1084 :                     ; Process the PSG
(1) 3770/    1084 :                     ; --------------------------------------------------------
(1) 3771/    1084 :                     
(1) 3772/    1084 :                     chip_env:
(1) 3776/    1084 : FD 21 05 15         		ld	iy,psgcom+3		; Start from NOISE first
(1) 3777/    1088 : DD 21 11 7F         		ld	ix,Zpsg_ctrl
(1) 3778/    108C : 0E E0               		ld	c,0E0h			; c - PSG first ctrl command
(1) 3779/    108E : 06 04               		ld	b,4			; b - 4 channels
(1) 3780/    1090 :                     .vloop:
(1) 3781/    1090 : CF                  		rst	8
(1) 3782/    1091 : FD 5E 00            		ld	e,(iy+COM)		; e - current command
(1) 3783/    1094 : FD 36 00 00         		ld	(iy+COM),0
(1) 3784/    1098 :                     
(1) 3785/    1098 :                     	; ----------------------------
(1) 3786/    1098 :                     	; bit 2 - stop sound
(1) 3787/    1098 : CB 53               		bit	2,e
(1) 3788/    109A : 28 0C               		jr	z,.ckof
(1) 3789/    109C : FD 36 04 FF         		ld	(iy+LEV),-1		; reset level
(1) 3790/    10A0 : FD 36 28 01         		ld	(iy+FLG),1		; and update
(1) 3791/    10A4 : FD 36 18 00         		ld	(iy+MODE),0		; envelope off
(1) 3792/    10A8 :                     .ckof:
(1) 3793/    10A8 :                     	; ----------------------------
(1) 3794/    10A8 :                     	; bit 1 - key off
(1) 3795/    10A8 : CB 4B               		bit	1,e
(1) 3796/    10AA : 28 0F               		jr      z,.ckon
(1) 3797/    10AC : FD 7E 18            		ld	a,(iy+MODE)		; mode 0?
(1) 3798/    10AF : B7                  		or	a
(1) 3799/    10B0 : 28 09               		jr	z,.ckon
(1) 3800/    10B2 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3801/    10B6 : FD 36 18 04         		ld	(iy+MODE),100b		; set envelope mode 100b
(1) 3802/    10BA : CF                  		rst	8
(1) 3803/    10BB :                     .ckon:
(1) 3804/    10BB :                     	; ----------------------------
(1) 3805/    10BB :                     	; bit 0 - key on
(1) 3806/    10BB : CB 43               		bit	0,e
(1) 3807/    10BD : 28 1A               		jr	z,.envproc
(1) 3808/    10BF : FD 36 04 FF         		ld	(iy+LEV),-1		; reset level
(1) 3809/    10C3 : 78                  		ld	a,b
(1) 3810/    10C4 : FE 04               		cp	4			; NOISE channel?
(1) 3811/    10C6 : 20 08               		jr	nz,.nskip
(1) 3812/    10C8 : CF                  		rst	8			; Set NOISE mode
(1) 3813/    10C9 : 3A 81 1C            		ld	a,(psgHatMode)		; write hat mode only.
(1) 3814/    10CC : B1                  		or	c
(1) 3815/    10CD : DD 77 00            		ld	(ix),a			; WRITE PSG
(1) 3816/    10D0 :                     .nskip:
(1) 3817/    10D0 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3818/    10D4 : CF                  		rst	8
(1) 3819/    10D5 : FD 36 18 01         		ld	(iy+MODE),001b		; set to attack mode
(1) 3820/    10D9 :                     .nblock:
(1) 3821/    10D9 :                     
(1) 3822/    10D9 :                     	; ----------------------------
(1) 3823/    10D9 :                     	; Process effects
(1) 3824/    10D9 :                     	; ----------------------------
(1) 3825/    10D9 :                     .envproc:
(1) 3826/    10D9 : FD 7E 18            		ld	a,(iy+MODE)
(1) 3827/    10DC : B7                  		or	a			; no modes
(1) 3828/    10DD : CA 63 11            		jp	z,.vedlp
(1) 3829/    10E0 : FE 01               		cp 	001b			; Attack mode
(1) 3830/    10E2 : 20 2C               		jr	nz,.chk2
(1) 3831/    10E4 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3832/    10E8 : FD 5E 24            		ld	e,(iy+ALV)
(1) 3833/    10EB : FD 7E 08            		ld	a,(iy+ATK)		; if ATK == 0, don't use
(1) 3834/    10EE : B7                  		or	a
(1) 3835/    10EF : 28 16               		jr	z,.atkend
(1) 3836/    10F1 : 57                  		ld	d,a			; c - attack rate
(1) 3837/    10F2 : 7B                  		ld	a,e			; a - attack level
(1) 3838/    10F3 : CF                  		rst	8
(1) 3839/    10F4 : FD 5E 24            		ld	e,(iy+ALV)		; b - OLD attack level
(1) 3840/    10F7 : 92                  		sub	a,d			; (attack rate) - (level)
(1) 3841/    10F8 : 38 0D               		jr	c,.atkend		; if carry: already finished
(1) 3842/    10FA : 28 0B               		jr	z,.atkend		; if zero: no attack rate
(1) 3843/    10FC : BB                  		cp	e			; attack rate == level?
(1) 3844/    10FD : 38 08               		jr	c,.atkend
(1) 3845/    10FF : 28 06               		jr	z,.atkend
(1) 3846/    1101 : FD 77 04            		ld	(iy+LEV),a		; set new level
(1) 3847/    1104 : CF                  		rst	8
(1) 3848/    1105 : 18 5C               		jr	.vedlp
(1) 3849/    1107 :                     .atkend:
(1) 3850/    1107 : FD 73 04            		ld	(iy+LEV),e		; attack level = new level
(1) 3851/    110A :                     .atkzero:
(1) 3852/    110A : FD 36 18 02         		ld	(iy+MODE),010b		; set to decay mode
(1) 3853/    110E : 18 53               		jr	.vedlp
(1) 3854/    1110 :                     .chk2:
(1) 3855/    1110 :                     
(1) 3856/    1110 : FE 02               		cp	010b			; Decay mode
(1) 3857/    1112 : 20 31               		jr	nz,.chk4
(1) 3858/    1114 :                     .dectmr:
(1) 3859/    1114 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3860/    1118 : FD 7E 04            		ld	a,(iy+LEV)		; a - Level
(1) 3861/    111B : FD 5E 10            		ld	e,(iy+SLV)		; b - Sustain
(1) 3862/    111E : BB                  		cp	e
(1) 3863/    111F : 38 0D               		jr	c,.dkadd		; if carry: add
(1) 3864/    1121 : 28 18               		jr	z,.dkyend		; if zero:  finish
(1) 3865/    1123 : CF                  		rst	8
(1) 3866/    1124 : FD 96 0C            		sub	(iy+DKY)		; substract decay rate
(1) 3867/    1127 : 38 12               		jr	c,.dkyend		; finish if wraped.
(1) 3868/    1129 : BB                  		cp	e			; compare level
(1) 3869/    112A : 38 0F               		jr	c,.dkyend		; and finish
(1) 3870/    112C : 18 08               		jr	.dksav
(1) 3871/    112E :                     .dkadd:
(1) 3872/    112E : FD 86 0C            		add	a,(iy+DKY)		;  (level) + (decay rate)
(1) 3873/    1131 : 38 08               		jr	c,.dkyend		; finish if wraped.
(1) 3874/    1133 : BB                  		cp	e			; compare level
(1) 3875/    1134 : 30 05               		jr	nc,.dkyend
(1) 3876/    1136 :                     .dksav:
(1) 3877/    1136 : FD 77 04            		ld	(iy+LEV),a		; save new level
(1) 3878/    1139 : 18 28               		jr	.vedlp
(1) 3879/    113B :                     .dkyend:
(1) 3880/    113B : CF                  		rst	8
(1) 3881/    113C : FD 73 04            		ld	(iy+LEV),e		; save last attack
(1) 3882/    113F : FD 36 18 04         		ld	(iy+MODE),100b		; and set to sustain
(1) 3883/    1143 : 18 1E               		jr	.vedlp
(1) 3884/    1145 :                     .chk4:
(1) 3885/    1145 : FE 04               		cp	100b			; Sustain phase
(1) 3886/    1147 : 20 1A               		jr	nz,.vedlp
(1) 3887/    1149 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3888/    114D : FD 7E 04            		ld	a,(iy+LEV)		; a - Level
(1) 3889/    1150 : CF                  		rst	8
(1) 3890/    1151 : FD 86 14            		add 	a,(iy+RRT)		; add Release Rate
(1) 3891/    1154 : 38 05               		jr	c,.killenv		; release done
(1) 3892/    1156 : FD 77 04            		ld	(iy+LEV),a		; set new Level
(1) 3893/    1159 : 18 08               		jr	.vedlp
(1) 3894/    115B :                     .killenv:
(1) 3895/    115B : FD 36 04 FF         		ld	(iy+LEV),-1		; Silence this channel
(1) 3896/    115F : FD 36 18 00         		ld	(iy+MODE),0		; Reset mode
(1) 3897/    1163 :                     .vedlp:
(1) 3898/    1163 :                     
(1) 3899/    1163 :                     	; ----------------------------
(1) 3900/    1163 :                     	; PSG UPDATE
(1) 3901/    1163 :                     	; ----------------------------
(1) 3902/    1163 : FD 7E 28            		ld	a,(iy+FLG)
(1) 3903/    1166 : B7                  		or	a
(1) 3904/    1167 : 28 72               		jr	z,.noupd
(1) 3905/    1169 : FD 36 28 00         		ld	(iy+FLG),0	; Reset until next one
(1) 3906/    116D : 59                  		ld	e,c
(1) 3907/    116E : 3A 81 1C            		ld	a,(psgHatMode)
(1) 3908/    1171 : 57                  		ld	d,a
(1) 3909/    1172 : E6 03               		and	011b
(1) 3910/    1174 : FE 03               		cp	011b
(1) 3911/    1176 : 20 1D               		jr	nz,.normal
(1) 3912/    1178 : CF                  		rst	8
(1) 3913/    1179 : 78                  		ld	a,b		; Channel 4?
(1) 3914/    117A : FE 03               		cp	3
(1) 3915/    117C : 28 13               		jr	z,.silnc_3
(1) 3916/    117E : FE 04               		cp	4
(1) 3917/    1180 : 20 18               		jr	nz,.do_nfreq
(1) 3918/    1182 : 3A 81 1C            		ld	a,(psgHatMode)
(1) 3919/    1185 : 57                  		ld	d,a
(1) 3920/    1186 : E6 03               		and	011b
(1) 3921/    1188 : CF                  		rst	8
(1) 3922/    1189 : FE 03               		cp	011b
(1) 3923/    118B : 20 30               		jr	nz,.vonly
(1) 3924/    118D : 1E C0               		ld	e,0C0h
(1) 3925/    118F : 18 09               		jr	.do_nfreq
(1) 3926/    1191 :                     .silnc_3:
(1) 3927/    1191 : 3E FF               		ld	a,-1
(1) 3928/    1193 : 18 32               		jr	.vlmuch
(1) 3929/    1195 :                     .normal:
(1) 3930/    1195 : 78                  		ld	a,b
(1) 3931/    1196 : FE 04               		cp	4
(1) 3932/    1198 : 28 23               		jr	z,.vonly
(1) 3933/    119A :                     .do_nfreq:
(1) 3934/    119A : FD 6E 1C            		ld	l,(iy+DTL)
(1) 3935/    119D : FD 66 20            		ld	h,(iy+DTH)
(1) 3936/    11A0 :                     
(1) 3937/    11A0 :                     	; freq effects go here
(1) 3938/    11A0 :                     	; (save e FIRST.)
(1) 3939/    11A0 :                     	;	push	de
(1) 3940/    11A0 :                     	;	pop	de
(1) 3941/    11A0 : 7D                  		ld	a,l		; Grab LSB 4 right bits
(1) 3942/    11A1 : E6 0F               		and	00001111b
(1) 3943/    11A3 : B3                  		or	e		; OR with channel set in e
(1) 3944/    11A4 : CF                  		rst	8
(1) 3945/    11A5 : DD 77 00            		ld	(ix),a		; write it
(1) 3946/    11A8 : 7D                  		ld	a,l		; Grab LSB 4 left bits
(1) 3947/    11A9 : 0F                  		rrca
(1) 3948/    11AA : 0F                  		rrca
(1) 3949/    11AB : 0F                  		rrca
(1) 3950/    11AC : 0F                  		rrca
(1) 3951/    11AD : E6 0F               		and	00001111b
(1) 3952/    11AF : 5F                  		ld	e,a
(1) 3953/    11B0 : 7C                  		ld	a,h		; Grab MSB bits
(1) 3954/    11B1 : CF                  		rst	8
(1) 3955/    11B2 : 07                  		rlca
(1) 3956/    11B3 : 07                  		rlca
(1) 3957/    11B4 : 07                  		rlca
(1) 3958/    11B5 : 07                  		rlca
(1) 3959/    11B6 : E6 30               		and	00110000b
(1) 3960/    11B8 : B3                  		or	e
(1) 3961/    11B9 : DD 77 00            		ld	(ix),a
(1) 3962/    11BC : CF                  		rst	8
(1) 3963/    11BD :                     .vonly:
(1) 3964/    11BD : FD 7E 30            		ld	a,(iy+PVOL)		; c - Level
(1) 3965/    11C0 : FD 86 04            		add	a,(iy+LEV)		; Add MASTER volume
(1) 3966/    11C3 : 30 02               		jr	nc,.vlmuch
(1) 3967/    11C5 : 3E FF               		ld	a,-1
(1) 3968/    11C7 :                     .vlmuch:
(1) 3969/    11C7 : CB 3F               		srl	a			; (Level >> 4)
(1) 3970/    11C9 : CB 3F               		srl	a
(1) 3971/    11CB : CB 3F               		srl	a
(1) 3972/    11CD : CF                  		rst	8
(1) 3973/    11CE : CB 3F               		srl	a
(1) 3974/    11D0 : E6 0F               		and	00001111b		; Filter volume value
(1) 3975/    11D2 : B1                  		or	c			; and OR with current channel
(1) 3976/    11D3 : F6 90               		or	90h			; Set volume-set mode
(1) 3978/    11D5 : DD 77 00            		ld	(ix),a			; *** WRITE volume
(1) 3980/    11D8 : FD 34 38            		inc	(iy+PTMR)		; Update general timer
(1) 3981/    11DB :                     .noupd:
(1) 3982/    11DB :                     	; ----------------------------
(1) 3983/    11DB : FD 2B               		dec	iy			; next COM to check (backwards)
(1) 3984/    11DD : 79                  		ld	a,c
(1) 3985/    11DE : CF                  		rst	8
(1) 3986/    11DF : D6 20               		sub	a,20h			; next PSG (backwards)
(1) 3987/    11E1 : 4F                  		ld	c,a
(1) 3988/    11E2 : 05                  		dec	b
(1) 3989/    11E3 : C2 90 10            		jp	nz,.vloop
(1) 3990/    11E6 : C9                  		ret
(1) 3991/    11E7 :                     
(1) 3992/    11E7 :                     ; ---------------------------------------------
(1) 3993/    11E7 :                     ; FM register writes
(1) 3994/    11E7 :                     ;
(1) 3995/    11E7 :                     ; Input:
(1) 3996/    11E7 :                     ; d - ctrl
(1) 3997/    11E7 :                     ; e - data
(1) 3998/    11E7 :                     ; ---------------------------------------------
(1) 3999/    11E7 :                     
(1) 4000/    11E7 :                     ; c - KeyID
(1) 4001/    11E7 :                     fm_autoreg:
(1) 4002/    11E7 : CB 51               		bit	2,c
(1) 4003/    11E9 : 20 0B               		jr	nz,fm_send_2
(1) 4004/    11EB :                     
(1) 4005/    11EB :                     ; Channels 1-3 and global registers
(1) 4006/    11EB :                     fm_send_1:
(1) 4007/    11EB : 7A                  		ld	a,d
(1) 4008/    11EC : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 4009/    11EF : 00                  		nop
(1) 4010/    11F0 : 7B                  		ld	a,e
(1) 4011/    11F1 : 32 01 40            		ld	(Zym_data_1),a
(1) 4012/    11F4 : 00                  		nop
(1) 4013/    11F5 : C9                  		ret
(1) 4014/    11F6 :                     ; Channels 4-6
(1) 4015/    11F6 :                     fm_send_2:
(1) 4016/    11F6 : 7A                  		ld	a,d
(1) 4017/    11F7 : 32 02 40            		ld	(Zym_ctrl_2),a
(1) 4018/    11FA : 00                  		nop
(1) 4019/    11FB : 7B                  		ld	a,e
(1) 4020/    11FC : 32 03 40            		ld	(Zym_data_2),a
(1) 4021/    11FF : 00                  		nop
(1) 4022/    1200 : C9                  		ret
(1) 4023/    1201 :                     
(1) 4024/    1201 :                     ; --------------------------------------------------------
(1) 4025/    1201 :                     ; brute-force WAVE ON/OFF playback
(1) 4026/    1201 :                     ; --------------------------------------------------------
(1) 4027/    1201 :                     
(1) 4028/    1201 :                     dac_on:
(1) 4029/    1201 : 3E 2B               		ld	a,2Bh
(1) 4030/    1203 : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 4031/    1206 : 3E 80               		ld	a,80h
(1) 4032/    1208 : 32 01 40            		ld	(Zym_data_1),a
(1) 4033/    120B : 3E D9               		ld 	a,zopcExx
(1) 4034/    120D : 32 08 00            		ld	(dac_me),a
(1) 4035/    1210 : 3E F5               		ld 	a,zopcPushAf
(1) 4036/    1212 : 32 20 00            		ld	(dac_fill),a
(1) 4037/    1215 : C9                  		ret
(1) 4038/    1216 :                     dac_off:
(1) 4039/    1216 : 3E 2B               		ld	a,2Bh
(1) 4040/    1218 : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 4041/    121B : 3E 00               		ld	a,00h
(1) 4042/    121D : 32 01 40            		ld	(Zym_data_1),a
(1) 4043/    1220 : 3E C9               		ld 	a,zopcRet
(1) 4044/    1222 : 32 08 00            		ld	(dac_me),a
(1) 4045/    1225 : 3E C9               		ld 	a,zopcRet
(1) 4046/    1227 : 32 20 00            		ld	(dac_fill),a
(1) 4047/    122A : C9                  		ret
(1) 4048/    122B :                     
(1) 4049/    122B :                     ; --------------------------------------------------------
(1) 4050/    122B :                     ; dac_play
(1) 4051/    122B :                     ;
(1) 4052/    122B :                     ; Plays a new sample
(1) 4053/    122B :                     ;
(1) 4054/    122B :                     ; NOTE:
(1) 4055/    122B :                     ; Set wave_Flags and wave_Pitch externally
(1) 4056/    122B :                     ; getting here.
(1) 4057/    122B :                     ; --------------------------------------------------------
(1) 4058/    122B :                     
(1) 4059/    122B :                     dac_play:
(1) 4060/    122B : F3                  		di
(1) 4061/    122C : CD 16 12            		call	dac_off
(1) 4062/    122F : D9                  		exx				; flip exx regs
(1) 4063/    1230 : 01 1D 00            		ld	bc,dWaveBuff>>8		; bc - WAVFIFO MSB
(1) 4064/    1233 : ED 5B 95 1C         		ld	de,(wave_Pitch)		; de - Pitch
(1) 4065/    1237 : 21 00 00            		ld	hl,(dWaveBuff&0FFh)<<8	; hl - WAVFIFO LSB pointer (xx.00)
(1) 4066/    123A : D9                  		exx				; move them back
(1) 4067/    123B : 2A 8C 1C            		ld	hl,(wave_Start)		; copy Start and length
(1) 4068/    123E : 3A 8E 1C            		ld 	a,(wave_Start+2)
(1) 4069/    1241 : 22 84 1C            		ld	(dDacPntr),hl
(1) 4070/    1244 : 32 86 1C            		ld	(dDacPntr+2),a
(1) 4071/    1247 : 2A 8F 1C            		ld	hl,(wave_Len)
(1) 4072/    124A : 3A 91 1C            		ld 	a,(wave_Len+2)
(1) 4073/    124D : 22 87 1C            		ld	(dDacCntr),hl
(1) 4074/    1250 : 32 89 1C            		ld	(dDacCntr+2),a
(1) 4075/    1253 : AF                  		xor	a
(1) 4076/    1254 : 32 83 1C            		ld	(dDacFifoMid),a		; Reset half-way
(1) 4077/    1257 : CD 5F 12            		call	dac_refill
(1) 4078/    125A : CD 01 12            		call	dac_on
(1) 4079/    125D : FB                  		ei
(1) 4080/    125E : C9                  		ret
(1) 4081/    125F :                     
(1) 4082/    125F :                     ; --------------------------------------------------------
(1) 4083/    125F :                     
(1) 4084/    125F :                     dac_refill:
(1) 4085/    125F : CF                  		rst	8
(1) 4086/    1260 : C5                  		push	bc
(1) 4087/    1261 : D5                  		push	de
(1) 4088/    1262 : E5                  		push	hl
(1) 4089/    1263 : 3A 97 1C            		ld	a,(wave_Flags)	; Already finished?
(1) 4090/    1266 : FE 07               		cp	111b
(1) 4091/    1268 : D2 1E 13            		jp	nc,.dacfill_end
(1) 4092/    126B : 3A 89 1C            		ld	a,(dDacCntr+2)	; Last bytes
(1) 4093/    126E : 2A 87 1C            		ld	hl,(dDacCntr)
(1) 4094/    1271 : 01 80 00            		ld	bc,80h
(1) 4095/    1274 : 37                  		scf
(1) 4096/    1275 : 3F                  		ccf
(1) 4097/    1276 : ED 42               		sbc	hl,bc
(1) 4098/    1278 : DE 00               		sbc	a,0
(1) 4099/    127A : 32 89 1C            		ld	(dDacCntr+2),a
(1) 4100/    127D : 22 87 1C            		ld	(dDacCntr),hl
(1) 4101/    1280 : 16 1D               		ld	d,dWaveBuff>>8
(1) 4102/    1282 : B7                  		or	a
(1) 4103/    1283 : FA AD 12            		jp	m,.dac_over
(1) 4104/    1286 : 3A 83 1C            		ld	a,(dDacFifoMid)	; Update halfway value
(1) 4105/    1289 : 5F                  		ld	e,a
(1) 4106/    128A : C6 80               		add 	a,80h
(1) 4107/    128C : 32 83 1C            		ld	(dDacFifoMid),a
(1) 4108/    128F : 2A 84 1C            		ld	hl,(dDacPntr)
(1) 4109/    1292 : 3A 86 1C            		ld	a,(dDacPntr+2)
(1) 4110/    1295 : CD CC 0F            		call	transferRom	; *** ROM ACCESS ***
(1) 4111/    1298 : 2A 84 1C            		ld	hl,(dDacPntr)
(1) 4112/    129B : 3A 86 1C            		ld	a,(dDacPntr+2)
(1) 4113/    129E : 01 80 00            		ld	bc,80h
(1) 4114/    12A1 : 09                  		add	hl,bc
(1) 4115/    12A2 : CE 00               		adc	a,0
(1) 4116/    12A4 : 22 84 1C            		ld	(dDacPntr),hl
(1) 4117/    12A7 : 32 86 1C            		ld	(dDacPntr+2),a
(1) 4118/    12AA : C3 21 13            		jp	.dacfill_ret
(1) 4119/    12AD :                     
(1) 4120/    12AD :                     ; NOTE: This doesn't finish at the exact END point
(1) 4121/    12AD :                     ; but the USER won't notice it.
(1) 4122/    12AD :                     
(1) 4123/    12AD :                     .dac_over:
(1) 4124/    12AD : 16 1D               		ld	d,dWaveBuff>>8
(1) 4125/    12AF : 3A 97 1C            		ld	a,(wave_Flags)	; LOOP enabled?
(1) 4126/    12B2 : E6 01               		and	001b
(1) 4127/    12B4 : C2 D7 12            		jp	nz,.dacfill_loop
(1) 4128/    12B7 : 7D                  		ld	a,l
(1) 4129/    12B8 : C6 80               		add	a,80h
(1) 4130/    12BA : 4F                  		ld	c,a
(1) 4131/    12BB : 06 00               		ld	b,0
(1) 4132/    12BD : C5                  		push	bc
(1) 4133/    12BE : 3A 83 1C            		ld	a,(dDacFifoMid)
(1) 4134/    12C1 : 5F                  		ld	e,a
(1) 4135/    12C2 : C6 80               		add	a,80h
(1) 4136/    12C4 : 32 83 1C            		ld	(dDacFifoMid),a
(1) 4137/    12C7 : C1                  		pop	bc
(1) 4138/    12C8 : 79                  		ld	a,c
(1) 4139/    12C9 : B0                  		or	b
(1) 4140/    12CA : 28 52               		jr	z,.dacfill_end
(1) 4141/    12CC : 2A 84 1C            		ld	hl,(dDacPntr)
(1) 4142/    12CF : 3A 86 1C            		ld	a,(dDacPntr+2)
(1) 4143/    12D2 : CD CC 0F            		call	transferRom	; *** ROM ACCESS ***
(1) 4144/    12D5 : 18 47               		jr	.dacfill_end
(1) 4145/    12D7 :                     .dacfill_loop:
(1) 4146/    12D7 :                     	; loop sample
(1) 4147/    12D7 : C5                  		push	bc
(1) 4148/    12D8 : D5                  		push	de
(1) 4149/    12D9 : 3A 94 1C            		ld	a,(wave_Loop+2)
(1) 4150/    12DC : 4F                  		ld	c,a
(1) 4151/    12DD : ED 5B 92 1C         		ld	de,(wave_Loop)
(1) 4152/    12E1 : 2A 8C 1C            		ld	hl,(wave_Start)
(1) 4153/    12E4 : 3A 8E 1C            		ld 	a,(wave_Start+2)
(1) 4154/    12E7 : 81                  		add	a,c
(1) 4155/    12E8 : 19                  		add	hl,de
(1) 4156/    12E9 : CE 00               		adc	a,0
(1) 4157/    12EB : 22 84 1C            		ld	(dDacPntr),hl
(1) 4158/    12EE : 32 86 1C            		ld	(dDacPntr+2),a
(1) 4159/    12F1 : 2A 8F 1C            		ld	hl,(wave_Len)
(1) 4160/    12F4 : 3A 91 1C            		ld 	a,(wave_Len+2)
(1) 4161/    12F7 : 91                  		sub	a,c
(1) 4162/    12F8 : 37                  		scf
(1) 4163/    12F9 : 3F                  		ccf
(1) 4164/    12FA : ED 52               		sbc	hl,de
(1) 4165/    12FC : DE 00               		sbc	a,0
(1) 4166/    12FE : 22 87 1C            		ld	(dDacCntr),hl
(1) 4167/    1301 : 32 89 1C            		ld	(dDacCntr+2),a
(1) 4168/    1304 : D1                  		pop	de
(1) 4169/    1305 : C1                  		pop	bc
(1) 4170/    1306 : 78                  		ld	a,b
(1) 4171/    1307 : B1                  		or	c
(1) 4172/    1308 : 28 17               		jr	z,.dacfill_ret
(1) 4173/    130A : 3A 83 1C            		ld	a,(dDacFifoMid)
(1) 4174/    130D : 5F                  		ld	e,a
(1) 4175/    130E : C6 80               		add	a,80h
(1) 4176/    1310 : 32 83 1C            		ld	(dDacFifoMid),a
(1) 4177/    1313 : 2A 84 1C            		ld	hl,(dDacPntr)
(1) 4178/    1316 : 3A 86 1C            		ld	a,(dDacPntr+2)
(1) 4179/    1319 : CD CC 0F            		call	transferRom	; *** ROM ACCESS ***
(1) 4180/    131C : 18 03               		jr	.dacfill_ret
(1) 4181/    131E :                     .dacfill_end:
(1) 4182/    131E : CD 16 12            		call	dac_off		; DAC finished
(1) 4183/    1321 :                     .dacfill_ret:
(1) 4184/    1321 : E1                  		pop	hl
(1) 4185/    1322 : D1                  		pop	de
(1) 4186/    1323 : C1                  		pop	bc
(1) 4187/    1324 : C9                  		ret
(1) 4188/    1325 :                     
(1) 4189/    1325 :                     ; ----------------------------------------------------------------
(1) 4190/    1325 :                     ; Two purposes:
(1) 4191/    1325 :                     ;
(1) 4192/    1325 :                     ; Set the BANK to the very last part of memory for the
(1) 4193/    1325 :                     ; transferRom to read from RAM
(1) 4194/    1325 :                     ;
(1) 4195/    1325 :                     ; On 32X this sets the bank out of the ROM-reading areas due
(1) 4196/    1325 :                     ; to a conflict with the PSG
(1) 4197/    1325 :                     ;
(1) 4198/    1325 :                     ; Uses:
(1) 4199/    1325 :                     ; hl,b
(1) 4200/    1325 :                     ; ----------------------------------------------------------------
(1) 4201/    1325 :                     
(1) 4202/    1325 :                     gema_lastbank:
(1) 4203/    1325 : 21 00 60            		ld	hl,6000h
(1) 4204/    1328 : 06 09               		ld	b,9		; 9 bits
(1) 4205/    132A :                     .write:
(1) 4206/    132A : 36 01               		ld	(hl),1
(1) 4207/    132C : 10 FC               		djnz	.write
(1) 4208/    132E : CF                  		rst	8
(1) 4209/    132F : C9                  		ret
(1) 4210/    1330 :                     
(1) 4211/    1330 :                     ; ====================================================================
(1) 4212/    1330 :                     ; ----------------------------------------------------------------
(1) 4213/    1330 :                     ; Tables
(1) 4214/    1330 :                     ; ----------------------------------------------------------------
(1) 4215/    1330 :                     
(1) 4216/    1330 : 84 02               fmFreq_List:	dw 644
(1) 4217/    1332 : A9 02               		dw 681
(1) 4218/    1334 : D2 02               		dw 722
(1) 4219/    1336 : FD 02               		dw 765
(1) 4220/    1338 : 2A 03               		dw 810
(1) 4221/    133A : 5A 03               		dw 858
(1) 4222/    133C : 8E 03               		dw 910
(1) 4223/    133E : C4 03               		dw 964
(1) 4224/    1340 : FD 03               		dw 1021
(1) 4225/    1342 : 39 04               		dw 1081
(1) 4226/    1344 : 7A 04               		dw 1146
(1) 4227/    1346 : BE 04               		dw 1214
(1) 4228/    1348 :                     
(1) 4229/    1348 :                     ; ----------------------------------------
(1) 4230/    1348 :                     ; DAC and PWM
(1) 4231/    1348 :                     ;
(1) 4232/    1348 :                     ; base C-5 freq: 16000hz
(1) 4233/    1348 :                     ; ----------------------------------------
(1) 4234/    1348 :                     
(1) 4235/    1348 :                     psgFreq_List:
(1) 4236/    1348 :                     ; 	dw    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1	; x-0
(1) 4237/    1348 :                     ; 	dw    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1	; x-1
(1) 4238/    1348 :                     ; 	dw    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1	; x-2
(1) 4239/    1348 : FF FF FF FF FF FF   	dw    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,03F8h,03BFh,0389h	; x-3
             134E : FF FF FF FF FF FF 
             1354 : FF FF FF FF FF FF 
             135A : F8 03 BF 03 89 03 
(1) 4240/    1360 : 56 03 26 03 F9 02   	dw 0356h,0326h,02F9h,02CEh,02A5h,0280h,025Ch,023Ah,021Ah,01FBh,01DFh,01C4h	; x-4
             1366 : CE 02 A5 02 80 02 
             136C : 5C 02 3A 02 1A 02 
             1372 : FB 01 DF 01 C4 01 
(1) 4241/    1378 : AB 01 93 01 7D 01   	dw 01ABh,0193h,017Dh,0167h,0153h,0140h,012Eh,011Dh,010Dh,00FEh,00EFh,00E2h	; x-5
             137E : 67 01 53 01 40 01 
             1384 : 2E 01 1D 01 0D 01 
             138A : FE 00 EF 00 E2 00 
(1) 4242/    1390 : D6 00 C9 00 BE 00   	dw 00D6h,00C9h,00BEh,00B4h,00A9h,00A0h,0097h,008Fh,0087h,007Fh,0078h,0071h	; x-6
             1396 : B4 00 A9 00 A0 00 
             139C : 97 00 8F 00 87 00 
             13A2 : 7F 00 78 00 71 00 
(1) 4243/    13A8 :                     ; 	dw 006Bh,0065h,005Fh,005Ah,0055h,0050h,004Bh,0047h,0043h,0040h,003Ch,0039h	; x-7
(1) 4244/    13A8 :                     ; 	dw 0036h,0033h,0030h,002Dh,002Bh,0028h,0026h,0024h,0022h,0020h,001Fh,001Dh	; x-8 *
(1) 4245/    13A8 :                     ; 	dw 001Bh,001Ah,0018h,0017h,0016h,0015h,0013h,0012h,0011h,0010h,0009h,0008h	; x-9 *
(1) 4246/    13A8 :                     
(1) 4247/    13A8 :                     
(1) 4248/    13A8 :                     ; ----------------------------------------
(1) 4249/    13A8 :                     ; DAC and PWM
(1) 4250/    13A8 :                     ; ----------------------------------------
(1) 4251/    13A8 :                     
(1) 4252/    13A8 :                     ; TODO
(1) 4253/    13A8 :                     wavFreq_List:
(1) 4254/    13A8 :                     	;   C     C#    D     D#    E     F     F#    G     G#    A     A#    B
(1) 4255/    13A8 :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-0
(1) 4256/    13A8 :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-1
(1) 4257/    13A8 :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0036h,003Bh	; x-2
(1) 4258/    13A8 : 3E 00 43 00 46 00   	dw 003Eh,0043h,0046h,0049h,004Eh,0054h,0058h,005Eh,0063h,0068h,0070h,0075h	; x-3
             13AE : 49 00 4E 00 54 00 
             13B4 : 58 00 5E 00 63 00 
             13BA : 68 00 70 00 75 00 
(1) 4259/    13C0 : 85 00 87 00 8C 00   	dw 0085h,0087h,008Ch,009Ah,00A4h,00ADh,00B2h,00C0h,00CCh,00D7h,00E6h,00F0h	; x-4
             13C6 : 9A 00 A4 00 AD 00 
             13CC : B2 00 C0 00 CC 00 
             13D2 : D7 00 E6 00 F0 00 
(1) 4260/    13D8 : 00 01 10 01 20 01   	dw 0100h,0110h,0120h,012Eh,0147h,015Ah,016Ah,017Fh,0191h,01ACh,01C2h,01E0h	; x-5
             13DE : 2E 01 47 01 5A 01 
             13E4 : 6A 01 7F 01 91 01 
             13EA : AC 01 C2 01 E0 01 
(1) 4261/    13F0 : F8 01 10 02 40 02   	dw 01F8h,0210h,0240h,0260h,0280h,02A0h,02D0h,02F8h,0320h,0350h,0380h,03C0h	; x-6
             13F6 : 60 02 80 02 A0 02 
             13FC : D0 02 F8 02 20 03 
             1402 : 50 03 80 03 C0 03 
(1) 4262/    1408 :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-7
(1) 4263/    1408 :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-8
(1) 4264/    1408 :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-9
(1) 4265/    1408 :                     
(1) 4266/    1408 :                     ; ----------------------------------------
(1) 4267/    1408 :                     ; SegaCD ONLY
(1) 4268/    1408 :                     ; ----------------------------------------
(1) 4269/    1408 :                     wavFreq_CdPcm:
(1) 4270/    1408 :                     	;     C     C#     D      D#     E      F      F#     G      G#     A      A#     B
(1) 4271/    1408 :                     ; 	dw  0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h	; x-0
(1) 4272/    1408 :                     ; 	dw  0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h	; x-1
(1) 4273/    1408 :                     ; 	dw  0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h	; x-2  4000
(1) 4274/    1408 : F8 01 14 02 3C 02   	dw  01F8h, 0214h, 023Ch, 0258h, 027Ch, 02A0h, 02C8h, 02F4h, 031Ch, 0348h, 037Ch, 03B0h	; x-3  8000 ok
             140E : 58 02 7C 02 A0 02 
             1414 : C8 02 F4 02 1C 03 
             141A : 48 03 7C 03 B0 03 
(1) 4275/    1420 : F0 03 24 04 68 04   	dw  03F0h, 0424h, 0468h, 04A8h, 04ECh, 0540h, 0590h, 05E4h, 063Ch, 0698h, 0704h, 0760h	; x-4 16000 ok
             1426 : A8 04 EC 04 40 05 
             142C : 90 05 E4 05 3C 06 
             1432 : 98 06 04 07 60 07 
(1) 4276/    1438 : DC 07 48 08 D4 08   	dw  07DCh, 0848h, 08D4h, 0960h, 09F0h, 0A64h, 0B04h, 0BAAh, 0C60h, 0D18h, 0DE4h, 0EB6h	; x-5 32000 ok
             143E : 60 09 F0 09 64 0A 
             1444 : 04 0B AA 0B 60 0C 
             144A : 18 0D E4 0D B6 0E 
(1) 4277/    1450 : B0 0F 74 10 84 11   	dw  0FB0h, 1074h, 1184h, 1280h, 139Ch, 14C8h, 1624h, 174Ch, 18DCh, 1A38h, 1BE0h, 1D94h	; x-6 64000 unstable
             1456 : 80 12 9C 13 C8 14 
             145C : 24 16 4C 17 DC 18 
             1462 : 38 1A E0 1B 94 1D 
(1) 4278/    1468 :                     ; 	dw  1F64h, 20FCh, 2330h, 2524h, 2750h, 29B4h, 2C63h, 2F63h, 31E0h, 347Bh, 377Bh, 3B41h	; x-7 128000 bad
(1) 4279/    1468 :                     ; 	dw  3EE8h, 4206h, 4684h, 4A5Ah, 4EB5h, 5379h, 58E1h, 5DE0h, 63C0h, 68FFh, 6EFFh, 783Ch	; x-8 256000 bad
(1) 4280/    1468 :                     ; 	dw  7FC2h, 83FCh, 8D14h, 9780h,0AA5Dh,0B1F9h,   -1 ,   -1 ,   -1 ,   -1 ,   -1 ,   -1 	; x-9 bad
(1) 4281/    1468 :                     
(1) 4282/    1468 :                     ; ====================================================================
(1) 4283/    1468 :                     ; ----------------------------------------------------------------
(1) 4284/    1468 :                     ; MASTER buffers list
(1) 4285/    1468 :                     ;
(1) 4286/    1468 :                     ; dw track_buffer
(1) 4287/    1468 :                     ; dw channel_list,block_cache,header_cache,track_cache
(1) 4288/    1468 :                     ;
(1) 4289/    1468 :                     ; (track_cache: 1BIT SIZES ONLY, ALIGNED)
(1) 4290/    1468 :                     ; ----------------------------------------------------------------
(1) 4291/    1468 :                     
(1) 4292/    1468 :                     nikona_BuffList:
(1) 4293/    1468 : CE 16 AE 16 2E 16   	dw trkBuff_0,trkBlks_0,trkHdrs_0,trkCach_0
             146E : 00 1F             
(1) 4294/    1470 : 0E 17 B6 16 4E 16   	dw trkBuff_1,trkBlks_1,trkHdrs_1,trkCach_1
             1476 : 20 1F             
(1) 4295/    1478 : 4E 17 BE 16 6E 16   	dw trkBuff_2,trkBlks_2,trkHdrs_2,trkCach_2
             147E : 40 1F             
(1) 4296/    1480 : 8E 17 C6 16 8E 16   	dw trkBuff_3,trkBlks_3,trkHdrs_3,trkCach_3
             1486 : 60 1F             
(1) 4297/    1488 :                     nikona_BuffList_e:
(1) 4298/    1488 : FF FF               	dw -1	; ENDOFLIST
(1) 4299/    148A :                     
(1) 4300/    148A :                     ; ====================================================================
(1) 4301/    148A :                     ; ----------------------------------------------------------------
(1) 4302/    148A :                     ; Buffer section
(1) 4303/    148A :                     ; ----------------------------------------------------------------
(1) 4304/    148A :                     
(1) 4305/    148A : 00 00 00 00 00 00   pcmcom:	db 00h,00h,00h,00h,00h,00h,00h,00h	; 0 - Playback bits: %0000PCOK /Pitchbend/keyCut/keyOff/KeyOn
             1490 : 00 00             
(1) 4306/    1492 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 8 - Pitch MSB
             1498 : 00 00             
(1) 4307/    149A : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 16 - Pitch LSB
             14A0 : 00 00             
(1) 4308/    14A2 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 24 - Volume
             14A8 : 00 00             
(1) 4309/    14AA : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 32 - Panning %RRRRLLLL
             14B0 : 00 00             
(1) 4310/    14B2 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 40 - LoopEnable bit | 24-bit sample location in Sub-CPU area
             14B8 : 00 00             
(1) 4311/    14BA : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 48
             14C0 : 00 00             
(1) 4312/    14C2 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 56
             14C8 : 00 00             
(1) 4313/    14CA :                     
(1) 4314/    14CA : 00 00 00 00 00 00   pwmcom:	db 00h,00h,00h,00h,00h,00h,00h,00h	; 0 - Playback bits: %0000PCOK Pitchbend/keyCut/keyOff/KeyOn
             14D0 : 00 00             
(1) 4315/    14D2 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 8 - Volume | Pitch MSB
             14D8 : 00 00             
(1) 4316/    14DA : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 16 - Pitch LSB
             14E0 : 00 00             
(1) 4317/    14E2 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 24 - Flags+MSB bits of sample %SlLRxxxx Stereo/Loop/Left/Right
             14E8 : 00 00             
(1) 4318/    14EA : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 32 -
             14F0 : 00 00             
(1) 4319/    14F2 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h
             14F8 : 00 00             
(1) 4320/    14FA : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h
             1500 : 00 00             
(1) 4321/    1502 :                     
(1) 4322/    1502 : 00 00 00 00         psgcom:	db 00h,00h,00h,00h	;  0 - command 1 = key on, 2 = key off, 4 = stop snd
(1) 4323/    1506 : FF FF FF FF         	db -1, -1, -1, -1	;  4 - output level attenuation (%llll.0000, -1 = silent)
(1) 4324/    150A : 00 00 00 00         	db 00h,00h,00h,00h	;  8 - attack rate (START)
(1) 4325/    150E : 00 00 00 00         	db 00h,00h,00h,00h	; 12 - decay rate
(1) 4326/    1512 : 00 00 00 00         	db 00h,00h,00h,00h	; 16 - sustain level attenuation (MAXIMUM)
(1) 4327/    1516 : 00 00 00 00         	db 00h,00h,00h,00h	; 20 - release rate
(1) 4328/    151A : 00 00 00 00         	db 00h,00h,00h,00h	; 24 - envelope mode 0 = off, 1 = attack, 2 = decay, 3 = sustain
(1) 4329/    151E : 00 00 00 00         	db 00h,00h,00h,00h	; 28 - freq bottom 4 bits
(1) 4330/    1522 : 00 00 00 00         	db 00h,00h,00h,00h	; 32 - freq upper 6 bits
(1) 4331/    1526 : 00 00 00 00         	db 00h,00h,00h,00h	; 36 - attack level attenuation
(1) 4332/    152A : 00 00 00 00         	db 00h,00h,00h,00h	; 40 - flags to indicate hardware should be updated
(1) 4333/    152E : 00 00 00 00         	db 00h,00h,00h,00h	; 44 - timer for sustain
(1) 4334/    1532 : 00 00 00 00         	db 00h,00h,00h,00h	; 48 - MAX Volume
(1) 4335/    1536 : 00 00 00 00         	db 00h,00h,00h,00h	; 52 - Vibrato value
(1) 4336/    153A : 00 00 00 00         	db 00h,00h,00h,00h	; 56 - General timer
(1) 4337/    153E :                     
(1) 4338/    153E :                     ; --------------------------------------------------------
(1) 4339/    153E :                     ; FM instrument storage
(1) 4340/    153E :                     fmcach_1	ds 28h
(1) 4341/    1566 :                     fmcach_2	ds 28h
(1) 4342/    158E :                     fmcach_3	ds 28h
(1) 4343/    15B6 :                     fmcach_4	ds 28h
(1) 4344/    15DE :                     fmcach_5	ds 28h
(1) 4345/    1606 :                     fmcach_6	ds 28h
(1) 4346/    162E :                     
(1) 4347/    162E :                     ; --------------------------------------------------------
(1) 4348/    162E :                     ; * USER customizable section *
(1) 4349/    162E :                     ;
(1) 4350/    162E :                     ; trkCach's MUST BE 00h ALIGNED.
(1) 4351/    162E :                     ; --------------------------------------------------------
(1) 4352/    162E :                     
(1) 4353/    162E :                     trkHdrs_0	ds 8*4			; dw point,rowcntr
(1) 4354/    164E :                     trkHdrs_1	ds 8*4
(1) 4355/    166E :                     trkHdrs_2	ds 8*4
(1) 4356/    168E :                     trkHdrs_3	ds 8*4
(1) 4357/    16AE :                     trkBlks_0	ds 8
(1) 4358/    16B6 :                     trkBlks_1	ds 8
(1) 4359/    16BE :                     trkBlks_2	ds 8
(1) 4360/    16C6 :                     trkBlks_3	ds 8
(1) 4361/    16CE :                     trkBuff_0	ds trk_ChnIndx+MAX_TRKINDX
(1) 4362/    170E :                     trkBuff_1	ds trk_ChnIndx+MAX_TRKINDX
(1) 4363/    174E :                     trkBuff_2	ds trk_ChnIndx+MAX_TRKINDX
(1) 4364/    178E :                     trkBuff_3	ds trk_ChnIndx+MAX_TRKINDX
(1) 4365/    17CE :                     
(1) 4366/    17CE :                     ; ====================================================================
(1) 4367/    17CE :                     ; --------------------------------------------------------
(1) 4368/    17CE :                     ; Channel table struct:
(1) 4369/    17CE :                     ; 00  - DIRECT Linked channel from trkChnls
(1) 4370/    17CE :                     ; 02  - 00h-7Fh: Priority level or 80h+ Silence request (chip ID)
(1) 4371/    17CE :                     ; 03  - MASTER Volume for this channel
(1) 4372/    17CE :                     ; 04  - Chip index (YM2612: KEY index)
(1) 4373/    17CE :                     ; 05  - FREE
(1) 4374/    17CE :                     ; 06  - Frequency list index (YM2612: %oooiiiii oct|index)
(1) 4375/    17CE :                     ; 07  - Pitchbend add/sub
(1) 4376/    17CE :                     ; 08  - Current volume: 00-max
(1) 4377/    17CE :                     ; 09  - Stored effect setting
(1) 4378/    17CE :                     ; 0A  - FREE
(1) 4379/    17CE :                     ; 0B  - FREE
(1) 4380/    17CE :                     ; 0C+ - Misc. settings for the current chip
(1) 4381/    17CE :                     ; 10+ - Intrument data
(1) 4382/    17CE :                     ;
(1) 4383/    17CE :                     ; PSG   80h
(1) 4384/    17CE :                     ; PSGN  90h
(1) 4385/    17CE :                     ; FM   0A0h
(1) 4386/    17CE :                     ; FM3  0B0h
(1) 4387/    17CE :                     ; DAC  0C0h
(1) 4388/    17CE :                     ; PCM  0D0h
(1) 4389/    17CE :                     ; PWM  0E0h
(1) 4390/    17CE :                     ; --------------------------------------------------------
(1) 4391/    17CE :                     
(1) 4392/    1A00 :                     		org 1A00h	; <-- MUST BE 00h ALIGNED
(1) 4393/    1A00 : 10 00               tblList:	dw tblPSG-tblList		;  80h
(1) 4394/    1A02 : 5A 80               		dw tblPSGN-tblList|8000h	;  90h *
(1) 4395/    1A04 : 72 00               		dw tblFM-tblList		; 0A0h
(1) 4396/    1A06 : D2 80               		dw tblFM3-tblList|8000h		; 0B0h *
(1) 4397/    1A08 : EA 80               		dw tblFM6-tblList|8000h		; 0C0h *
(1) 4398/    1A0A : 04 01               		dw tblPCM-tblList		; 0D0h
(1) 4399/    1A0C : C6 01               		dw tblPWM-tblList		; 0E0h
(1) 4400/    1A0E : 00 00               		dw 0
(1) 4401/    1A10 : 00 00 00 00 00 00   tblPSG:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             1A16 : 00 00             
(1) 4402/    1A18 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A1E : 00 00             
(1) 4403/    1A20 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A26 : 00 00             
(1) 4404/    1A28 : 00 00 00 00 01 00   		db 00h,00h,00h,00h,01h,00h,00h,00h	; Channel 2
             1A2E : 00 00             
(1) 4405/    1A30 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A36 : 00 00             
(1) 4406/    1A38 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A3E : 00 00             
(1) 4407/    1A40 : 00 00 00 00 02 00   		db 00h,00h,00h,00h,02h,00h,00h,00h	; Channel 3
             1A46 : 00 00             
(1) 4408/    1A48 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A4E : 00 00             
(1) 4409/    1A50 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A56 : 00 00             
(1) 4410/    1A58 : FF FF               		dw -1	; end-of-list
(1) 4411/    1A5A : 00 00 00 00 03 00   tblPSGN:	db 00h,00h,00h,00h,03h,00h,00h,03h	; Noise
             1A60 : 00 03             
(1) 4412/    1A62 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A68 : 00 00             
(1) 4413/    1A6A : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A70 : 00 00             
(1) 4414/    1A72 : 00 00 00 00 00 00   tblFM:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             1A78 : 00 00             
(1) 4415/    1A7A : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A80 : 00 00             
(1) 4416/    1A82 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A88 : 00 00             
(1) 4417/    1A8A : 00 00 00 00 01 00   		db 00h,00h,00h,00h,01h,00h,00h,00h	; Channel 2
             1A90 : 00 00             
(1) 4418/    1A92 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A98 : 00 00             
(1) 4419/    1A9A : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1AA0 : 00 00             
(1) 4420/    1AA2 : 00 00 00 00 04 00   		db 00h,00h,00h,00h,04h,00h,00h,00h	; Channel 4 <--
             1AA8 : 00 00             
(1) 4421/    1AAA : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1AB0 : 00 00             
(1) 4422/    1AB2 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1AB8 : 00 00             
(1) 4423/    1ABA : 00 00 00 00 05 00   		db 00h,00h,00h,00h,05h,00h,00h,00h	; Channel 5
             1AC0 : 00 00             
(1) 4424/    1AC2 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1AC8 : 00 00             
(1) 4425/    1ACA : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1AD0 : 00 00             
(1) 4426/    1AD2 : 00 00 00 00 02 00   tblFM3:		db 00h,00h,00h,00h,02h,00h,00h,00h	; Channel 3 <--
             1AD8 : 00 00             
(1) 4427/    1ADA : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1AE0 : 00 00             
(1) 4428/    1AE2 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1AE8 : 00 00             
(1) 4429/    1AEA : 00 00 00 00 06 00   tblFM6:		db 00h,00h,00h,00h,06h,00h,00h,00h	; Channel 6 <--
             1AF0 : 00 00             
(1) 4430/    1AF2 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1AF8 : 00 00             
(1) 4431/    1AFA : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B00 : 00 00             
(1) 4432/    1B02 : FF FF               		dw -1	; end-of-list
(1) 4433/    1B04 : 00 00 00 00 00 00   tblPCM:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             1B0A : 00 00             
(1) 4434/    1B0C : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B12 : 00 00             
(1) 4435/    1B14 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B1A : 00 00             
(1) 4436/    1B1C : 00 00 00 00 01 00   		db 00h,00h,00h,00h,01h,00h,00h,00h	; Channel 2
             1B22 : 00 00             
(1) 4437/    1B24 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B2A : 00 00             
(1) 4438/    1B2C : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B32 : 00 00             
(1) 4439/    1B34 : 00 00 00 00 02 00   		db 00h,00h,00h,00h,02h,00h,00h,00h	; Channel 3
             1B3A : 00 00             
(1) 4440/    1B3C : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B42 : 00 00             
(1) 4441/    1B44 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B4A : 00 00             
(1) 4442/    1B4C : 00 00 00 00 03 00   		db 00h,00h,00h,00h,03h,00h,00h,00h	; Channel 4
             1B52 : 00 00             
(1) 4443/    1B54 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B5A : 00 00             
(1) 4444/    1B5C : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B62 : 00 00             
(1) 4445/    1B64 : 00 00 00 00 04 00   		db 00h,00h,00h,00h,04h,00h,00h,00h	; Channel 5
             1B6A : 00 00             
(1) 4446/    1B6C : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B72 : 00 00             
(1) 4447/    1B74 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B7A : 00 00             
(1) 4448/    1B7C : 00 00 00 00 05 00   		db 00h,00h,00h,00h,05h,00h,00h,00h	; Channel 6
             1B82 : 00 00             
(1) 4449/    1B84 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B8A : 00 00             
(1) 4450/    1B8C : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B92 : 00 00             
(1) 4451/    1B94 : 00 00 00 00 06 00   		db 00h,00h,00h,00h,06h,00h,00h,00h	; Channel 7
             1B9A : 00 00             
(1) 4452/    1B9C : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BA2 : 00 00             
(1) 4453/    1BA4 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BAA : 00 00             
(1) 4454/    1BAC : 00 00 00 00 07 00   		db 00h,00h,00h,00h,07h,00h,00h,00h	; Channel 7
             1BB2 : 00 00             
(1) 4455/    1BB4 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BBA : 00 00             
(1) 4456/    1BBC : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BC2 : 00 00             
(1) 4457/    1BC4 : FF FF               		dw -1	; end-of-list
(1) 4458/    1BC6 : 00 00 00 00 00 00   tblPWM:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             1BCC : 00 00             
(1) 4459/    1BCE : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BD4 : 00 00             
(1) 4460/    1BD6 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BDC : 00 00             
(1) 4461/    1BDE : 00 00 00 00 01 00   		db 00h,00h,00h,00h,01h,00h,00h,00h	; Channel 2
             1BE4 : 00 00             
(1) 4462/    1BE6 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BEC : 00 00             
(1) 4463/    1BEE : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BF4 : 00 00             
(1) 4464/    1BF6 : 00 00 00 00 02 00   		db 00h,00h,00h,00h,02h,00h,00h,00h	; Channel 3
             1BFC : 00 00             
(1) 4465/    1BFE : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C04 : 00 00             
(1) 4466/    1C06 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C0C : 00 00             
(1) 4467/    1C0E : 00 00 00 00 03 00   		db 00h,00h,00h,00h,03h,00h,00h,00h	; Channel 4
             1C14 : 00 00             
(1) 4468/    1C16 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C1C : 00 00             
(1) 4469/    1C1E : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C24 : 00 00             
(1) 4470/    1C26 : 00 00 00 00 04 00   		db 00h,00h,00h,00h,04h,00h,00h,00h	; Channel 5
             1C2C : 00 00             
(1) 4471/    1C2E : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C34 : 00 00             
(1) 4472/    1C36 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C3C : 00 00             
(1) 4473/    1C3E : 00 00 00 00 05 00   		db 00h,00h,00h,00h,05h,00h,00h,00h	; Channel 6
             1C44 : 00 00             
(1) 4474/    1C46 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C4C : 00 00             
(1) 4475/    1C4E : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C54 : 00 00             
(1) 4476/    1C56 : 00 00 00 00 06 00   		db 00h,00h,00h,00h,06h,00h,00h,00h	; Channel 7
             1C5C : 00 00             
(1) 4477/    1C5E : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C64 : 00 00             
(1) 4478/    1C66 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C6C : 00 00             
(1) 4479/    1C6E : FF FF               		dw -1	; end-of-list
(1) 4480/    1C70 :                     
(1) 4481/    1C70 :                     ; ----------------------------------------------------------------
(1) 4482/    1C70 :                     
(1) 4483/    1C70 : 3E 15               fmcach_list:	dw fmcach_1
(1) 4484/    1C72 : 66 15               		dw fmcach_2
(1) 4485/    1C74 : 8E 15               		dw fmcach_3
(1) 4486/    1C76 : 00 00               		dw 0		; <-- skipped
(1) 4487/    1C78 : B6 15               		dw fmcach_4
(1) 4488/    1C7A : DE 15               		dw fmcach_5
(1) 4489/    1C7C : 06 16               		dw fmcach_6
(1) 4490/    1C7E :                     
(1) 4491/    1C7E :                     ; ----------------------------------------------------------------
(1) 4492/    1C7E :                     ; Variables to fill this space
(1) 4493/    1C7E : 00                  tickSpSet	db 0		; **
(1) 4494/    1C7F : 00                  tickFlag	db 0		; Tick flag from VBlank
(1) 4495/    1C80 : 00                  tickCnt		db 0		; ** Tick counter (PUT THIS AFTER tickFlag)
(1) 4496/    1C81 : 00                  psgHatMode	db 0		; Current PSGN mode
(1) 4497/    1C82 : 00                  fmSpecial	db 0		; copy of FM3 enable bit
(1) 4498/    1C83 : 00                  dDacFifoMid	db 0		; WAVE play halfway refill flag (00h/80h)
(1) 4499/    1C84 : 00 00 00            dDacPntr	db 0,0,0	; WAVE play current ROM position
(1) 4500/    1C87 : 00 00 00            dDacCntr	db 0,0,0	; WAVE play length counter
(1) 4501/    1C8A : 00                  marsUpd		db 0		; Flag to request a PWM transfer
(1) 4502/    1C8B : 00                  mcdUpd		db 0		; Flag to request a PCM transfer
(1) 4503/    1C8C : 00 00               wave_Start	dw 0		; START: 68k 24-bit pointer
(1) 4504/    1C8E : 00                  		db 0
(1) 4505/    1C8F : 00 00               wave_Len	dw 0		; LENGTH 24-bit
(1) 4506/    1C91 : 00                  		db 0
(1) 4507/    1C92 : 00 00               wave_Loop	dw 0		; LOOP POINT 24-bit
(1) 4508/    1C94 : 00                  		db 0
(1) 4509/    1C95 : 00 01               wave_Pitch	dw 0100h	; 01.00h
(1) 4510/    1C97 : 00                  wave_Flags	db 0		; WAVE playback flags (%10x: 1 loop / 0 no loop)
(1) 4511/    1C98 : 00                  currTickBits	db 0		; Current Tick/Subbeat flags (000000BTb B-beat, T-tick)
(1) 4512/    1C99 : 00                  x68ksrclsb	db 0		; transferRom temporal LSB
(1) 4513/    1C9A : 00                  x68ksrcmid	db 0		; transferRom temporal MID
(1) 4514/    1C9B : 00 00               sbeatAcc	dw 0		; Accumulates on each tick to trigger the sub beats
(1) 4515/    1C9D : D6 00               sbeatPtck	dw 214		; Default global subbeats (this-32 for PAL) 214=125
(1) 4516/    1C9F :                     headerOut	ds 00Eh		; Temporal storage for 68k pointers
(1) 4517/    1CAD :                     headerOut_e	ds 2		; <-- reverse readpoint
(1) 4518/    1CAF :                     trkInfoCach	;ds 4
(1) 4519/    1CAF :                     sampleHead	;ds 006h
(1) 4520/    1CAF :                     instListOut	ds 8
(1) 4521/    1CB7 :                     
(1) 4522/    1CB7 :                     ; ====================================================================
(1) 4523/    1CB7 :                     ; ----------------------------------------------------------------
(1) 4524/    1CB7 :                     ; Special aligned buffers
(1) 4525/    1CB7 :                     ;
(1) 4526/    1CB7 :                     ; Located at 1D00h
(1) 4527/    1CB7 :                     ; ----------------------------------------------------------------
(1) 4528/    1CB7 :                     
(1) 4529/    1D00 :                     		org 1D00h
(1) 4530/    1D00 :                     dWaveBuff	ds 100h		; WAVE data buffer: 100h bytes, updates every 80h
(1) 4531/    1E00 :                     trkChnls	ds 8*MAX_TRKCHN
(1) 4532/    1F00 :                     trkCach_0	ds MAX_RCACH
(1) 4533/    1F20 :                     trkCach_1	ds MAX_RCACH
(1) 4534/    1F40 :                     trkCach_2	ds MAX_RCACH
(1) 4535/    1F60 :                     trkCach_3	ds MAX_RCACH
(1) 4536/    1F80 :                     
(1) 4537/    1F80 :                     ; --------------------------------------------------------
(1) 4538/    1F80 :                     
(1) 4539/    3334 :                     		dephase
(1) 4540/    3334 :                     		cpu 68000		; [AS] Return to 68k
(1) 4541/    3334 :                     		padding off		; [AS] NO padding
(1) 4542/    3334 :                     		align 2
(1) 4543/    3334 :                     
     281/    3334 :                     Z80_CODE_END:
     285/    3334 :                     
     287/    3334 :                     
     288/    3334 :                     ; ===========================================================================
     289/    3334 :                     ; ----------------------------------------------------------------
     290/    3334 :                     ; DATA section shared on both Cartridge or Disc
     291/    3334 :                     ; ----------------------------------------------------------------
     292/    3334 :                     
     293/    3334 :                     ; --------------------------------------------------------
     294/    3334 :                     ; CD/CD32X ISO header and files
     295/    3334 :                     ; --------------------------------------------------------
     296/    3334 :                     
     316/    3334 :                     
     317/    3334 :                     ; ====================================================================
     318/    3334 :                     ; --------------------------------------------------------
     319/    3334 :                     ; SEGA CD SUB-CPU data
     320/    3334 :                     ; --------------------------------------------------------
     321/    3334 :                     
     334/    3334 :                     
     335/    3334 :                     ; ====================================================================
     336/    3334 :                     ; ----------------------------------------------------------------
     337/    3334 :                     ; SH2 code sent to SDRAM area
     338/    3334 :                     ; ----------------------------------------------------------------
     339/    3334 :                     
     345/    3334 :                     MARS_RAMCODE:
     349/    3334 :                     MARS_RAMCODE_E:
     354/    3334 :                     
     355/    3334 :                     ; ====================================================================
     356/    3334 :                     ; --------------------------------------------------------
     357/    3334 :                     ; Screen modes
     358/    3334 :                     ;
     359/    3334 :                     ; For SegaCD/CD32X these are stored as separate files
     360/    3334 :                     ; on disc
     361/    3334 :                     ;
     362/    3334 :                     ; Usage:
     363/    3334 :                     ; screen_code START_LABEL,END_LABEL,CODE_PATH
     364/    3334 :                     ;
     365/    3334 :                     ; Set your data banks manually on your screen code.
     366/    3334 :                     ; --------------------------------------------------------
     367/    3334 :                     
     368/    3334 : (MACRO)              	screen_code Md_Screen00,Md_Screen00_e,"game/screen_0/code.asm"
     368/    3334 : =$3334               MD_SCREEN00 label *
     368/    3334 :                     
     368/    3334 :                     mctopscrn:
     368/    3334 :                     mcscrn_s:
     368/    3334 :                             include "game/screen_0/code.asm";"game/screen_0/code.asm"
(1)    1/    3334 :                     ; ===========================================================================
(1)    2/    3334 :                     ; ----------------------------------------------------------------
(1)    3/    3334 :                     ; SCREEN CODE
(1)    4/    3334 :                     ; ----------------------------------------------------------------
(1)    5/    3334 :                     
(1)    6/    3334 :                     ; ====================================================================
(1)    7/    3334 :                     ; ------------------------------------------------------
(1)    8/    3334 :                     ; Variables
(1)    9/    3334 :                     ; ------------------------------------------------------
(1)   10/    3334 :                     
(1)   11/    3334 : =$460                setVram_Emily		equ $460
(1)   12/    3334 : =$478                setVram_Doremi		equ $460+(4*6)
(1)   13/    3334 : =$490                setVram_Sophie		equ $460+((4*6)*2)
(1)   14/    3334 : =$4A8                setVram_Nicole		equ $460+((4*6)*3)
(1)   15/    3334 : =$4D0                setVram_Bibi		equ $4D0
(1)   16/    3334 :                     
(1)   17/    3334 :                     ; ====================================================================
(1)   18/    3334 :                     ; ------------------------------------------------------
(1)   19/    3334 :                     ; Structs
(1)   20/    3334 :                     ; ------------------------------------------------------
(1)   21/    3334 :                     
(1)   22/    3334 :                     ; 			strct 0
(1)   23/    3334 :                     ; strc_xpos		ds.w 1
(1)   24/    3334 :                     ; strc_ypos		ds.w 1
(1)   25/    3334 :                     ; 			endstrct
(1)   26/    3334 :                     
(1)   27/    3334 :                     ; ====================================================================
(1)   28/    3334 :                     ; ------------------------------------------------------
(1)   29/    3334 :                     ; This mode's RAM
(1)   30/    3334 :                     ; ------------------------------------------------------
(1)   31/    3334 :                     
(1)   32/    3334 :  (MACRO-2)           			strct RAM_ScrnBuff
(1)   32/    3334 : =$3334               GLBL_LASTPC     set *
(1)   32/FFFFFFFFFFFFE30C :                                     dephase
(1)   32/FFFFFFFFFFFFD404 :                                     phase RAM_SCRNBUFF
(1)   32/FFFFFFFFFFFFD404 : =$FFFFFFFFFFFFD404   GLBL_LASTORG    set *
(1)   33/FFFFFFFFFFFFD404 :                     RAM_SC0_Null		ds.l 1
(1)   34/FFFFFFFFFFFFD408 :                     RAM_TempAnim		ds.w 1
(1)   35/FFFFFFFFFFFFD40A :                     RAM_TempAnim2		ds.w 1
(1)   36/FFFFFFFFFFFFD40C :                     RAM_SC0_Cmnd		ds.w 1
(1)   37/FFFFFFFFFFFFD40E :                     sizeof_thisbuff		ds.l 0
(1)   38/FFFFFFFFFFFFD414 :  (MACRO-2)           			endstrct
(1)   38/FFFFFFFFFFFFD404 :                                     org GLBL_LASTORG
(1)   38/    3334 :                                     phase GLBL_LASTPC
(1)   39/    3334 :                     
(1)   40/    3334 :  (MACRO-2)           	erreport "SCREEN",sizeof_thisbuff-RAM_ScrnBuff,MAX_ScrnBuff
(1)   41/    3334 :                     
(1)   42/    3334 :                     ; ====================================================================
(1)   43/    3334 :                     ; ------------------------------------------------------
(1)   44/    3334 :                     ; Init
(1)   45/    3334 :                     ; ------------------------------------------------------
(1)   46/    3334 :                     
(1)   47/    3334 : 6100 DF8C           		bsr	Mode_Init
(1)   48/    3338 :  (MACRO-2)           		load_banks file_mddata_def,pointr_marsdata_def
(1)   49/    3338 : 41F9 0005 4000      		lea	(ASCII_FONT).l,a0
(1)   50/    333E : 227C 0000 0000      		move.l	#0,a1
(1)   51/    3344 : 6100 D702           		bsr	Video_PrintInit
(1)   52/    3348 :                     
(1)   53/    3348 :                     	; ----------------------------------------------
(1)   54/    3348 :                     	; Load assets
(1)  106/    3348 : 203C 0005 4C00      		move.l	#Art_Scn0_BG,d0
(1)  107/    334E : 323C 0020           		move.w	#cell_vram($0001),d1
(1)  108/    3352 : 343C 89C0           		move.w	#Art_Scn0_BG_e-Art_Scn0_BG,d2
(1)  109/    3356 : 6100 D324           		bsr	Video_LoadArt
(1)  110/    335A : 41F8 400C           		lea	(MAP_Scr0_BG),a0
(1)  111/    335E : 203C 0001 0000      		move.l	#locate(0,0,1),d0
(1)  112/    3364 : 223C 0027 001B      		move.l	#map_size(320,224),d1
(1)  113/    336A : 343C 6001           		move.w	#$0001|$6000,d2
(1)  114/    336E : 6100 D674           		bsr	Video_LoadMap
(1)  116/    3372 : 41FA 0408           		lea	PAL_SCR0_TEST(pc),a0
(1)  117/    3376 : 7030                		moveq	#48,d0
(1)  118/    3378 : 323C 0010           		move.w	#16,d1
(1)  119/    337C : 6100 D18A           		bsr	Video_FadePal
(1)  120/    3380 :                     
(1)  121/    3380 : 41F8 48CC           		lea	(objPal_Emily),a0
(1)  122/    3384 : 7000                		moveq	#0,d0
(1)  123/    3386 : 323C 0010           		move.w	#16,d1
(1)  124/    338A : 6100 D17C           		bsr	Video_FadePal
(1)  125/    338E : 41F8 4B42           		lea	(objPal_Doremi),a0
(1)  126/    3392 : 7010                		moveq	#16,d0
(1)  127/    3394 : 323C 0010           		move.w	#16,d1
(1)  128/    3398 : 6100 D16E           		bsr	Video_FadePal
(1)  129/    339C : 41F8 4CCE           		lea	(objPal_Sophie),a0
(1)  130/    33A0 : 7020                		moveq	#32,d0
(1)  131/    33A2 : 323C 0010           		move.w	#16,d1
(1)  132/    33A6 : 6100 D160           		bsr	Video_FadePal
(1)  133/    33AA : 41FA 03F0           		lea	str_Scrn0Intro(pc),a0
(1)  134/    33AE : 203C 0000 0101      		move.l	#locate(1,1,0),d0
(1)  135/    33B4 : 6100 D6C2           		bsr	Video_Print
(1)  136/    33B8 :                     
(1)  138/    33B8 : 203C 0000 345A      		move.l	#Obj_Emily,d0		; IN THIS ORDER
(1)  139/    33BE : 7200                		moveq	#0,d1
(1)  140/    33C0 : 6100 D910           		bsr	Objects_Add
(1)  141/    33C4 : 203C 0000 3668      		move.l	#Obj_Bibi,d0
(1)  142/    33CA : 7200                		moveq	#0,d1
(1)  143/    33CC : 6100 D904           		bsr	Objects_Add
(1)  144/    33D0 : 203C 0000 359E      		move.l	#Obj_Doremi,d0
(1)  145/    33D6 : 7200                		moveq	#0,d1
(1)  146/    33D8 : 6100 D8F8           		bsr	Objects_Add
(1)  147/    33DC : 203C 0000 359E      		move.l	#Obj_Doremi,d0
(1)  148/    33E2 : 7201                		moveq	#1,d1
(1)  149/    33E4 : 6100 D8EC           		bsr	Objects_Add
(1)  150/    33E8 : 203C 0000 359E      		move.l	#Obj_Doremi,d0
(1)  151/    33EE : 7202                		moveq	#2,d1
(1)  152/    33F0 : 6100 D8E0           		bsr	Objects_Add
(1)  154/    33F4 :                     
(1)  155/    33F4 :                     	; ----------------------------------------------
(1)  160/    33F4 :                     
(1)  161/    33F4 :                     ; 		move.w	#214,d0
(1)  162/    33F4 :                     ; 		bsr	gemaSetBeats
(1)  163/    33F4 :                     ; 		moveq	#0,d0
(1)  164/    33F4 :                     ; 		moveq	#0,d1
(1)  165/    33F4 :                     ; 		moveq	#0,d2
(1)  166/    33F4 :                     ; 		bsr	gemaPlayTrack
(1)  167/    33F4 :                     	; ----------------------------------------------
(1)  168/    33F4 :                     ; 		bsr	.show_me
(1)  169/    33F4 :                     ; 		bsr	.steal_vars
(1)  170/    33F4 : 6100 D884           		bsr	Objects_Run
(1)  171/    33F8 : 6100 0380           		bsr	ShowMe_Who
(1)  172/    33FC :                     	; ----------------------------------------------
(1)  173/    33FC : 08F9 0006 FFFF      		bset	#bitDispEnbl,(RAM_VdpRegs+1).l		; Enable display
             3402 : B8F9             
(1)  174/    3404 : 11FC 0081 B904      		move.b	#%10000001,(RAM_VdpRegs+$C).w		; H40 + shadow mode
(1)  175/    340A : 6100 CFB8           		bsr	Video_Update
(1)  176/    340E : 6100 D082           		bsr	Video_FullFadeIn
(1)  177/    3412 :                     
(1)  178/    3412 :                     ; ====================================================================
(1)  179/    3412 :                     ; ------------------------------------------------------
(1)  180/    3412 :                     ; Loop
(1)  181/    3412 :                     ; ------------------------------------------------------
(1)  182/    3412 :                     
(1)  183/    3412 :                     .loop:
(1)  184/    3412 : 6100 DC68           		bsr	System_Render
(1)  185/    3416 : 6100 D862           		bsr	Objects_Run
(1)  186/    341A : 6100 035E           		bsr	ShowMe_Who
(1)  187/    341E : 3E38 C008           		move.w	(Controller_1+on_press),d7
(1)  188/    3422 : 0807 0007           		btst	#bitJoyStart,d7
(1)  189/    3426 : 6602                		bne.s	.snd_test
(1)  190/    3428 : 60E8                		bra.s	.loop
(1)  191/    342A :                     
(1)  192/    342A :                     .snd_test:
(1)  193/    342A : 6100 CF00           		bsr	gemaStopAll
(1)  194/    342E : 6100 D088           		bsr	Video_FullFadeOut
(1)  195/    3432 : 31FC 0001 C458      		move.w	#1,(RAM_ScreenMode).w
(1)  196/    3438 : 4E75                		rts		; EXIT
(1)  197/    343A :                     
(1)  198/    343A :                     ; ====================================================================
(1)  199/    343A :                     ; ------------------------------------------------------
(1)  200/    343A :                     ; DATA assets locations for 68K and SH2
(1)  201/    343A :                     ; ------------------------------------------------------
(1)  202/    343A :                     
(1)  203/    343A :                     file_mddata_def:
(1)  204/    343A : 4441 5441 424E      		dc.b "DATABNKD.BIN",0		; CD Filename
             3440 : 4B44 2E42 494E 00 
(1)  205/    3447 :                     		align 2
(1)  206/    3448 :                     pointr_marsdata_def:
(1)  207/    3448 : 0002 0ECE           		dc.l MARSDATA_SCREEN00		; 32X Cartridge point
(1)  208/    344C : 4D41 5253 445F      		dc.b "MARSD_00.BIN",0		; CD Filename
             3452 : 3030 2E42 494E 00 
(1)  209/    3459 :                     		align 2
(1)  210/    345A :                     
(1)  211/    345A :                     ; ====================================================================
(1)  212/    345A :                     ; ------------------------------------------------------
(1)  213/    345A :                     ; Objects
(1)  214/    345A :                     ; ------------------------------------------------------
(1)  215/    345A :                     
(1)  216/    345A :                     ; --------------------------------------------------
(1)  217/    345A :                     ; Emily
(1)  218/    345A :                     ; --------------------------------------------------
(1)  219/    345A :                     
(1)  220/    345A :                     Obj_Emily:
(1)  221/    345A : 7000                		moveq	#0,d0
(1)  222/    345C : 102E 0021           		move.b	obj_index(a6),d0
(1)  223/    3460 : D040                		add.w	d0,d0
(1)  224/    3462 : 323B 0006           		move.w	.list(pc,d0.w),d1
(1)  225/    3466 : 4EFB 1002           		jmp	.list(pc,d1.w)
(1)  226/    346A :                     ; ----------------------------------------------
(1)  227/    346A : 0004                .list:		dc.w .init-.list
(1)  228/    346C : 003C                		dc.w .main-.list
(1)  229/    346E :                     ; ----------------------------------------------
(1)  230/    346E :                     .init:
(1)  231/    346E : 1D7C 0001 0021      		move.b	#1,obj_index(a6)
(1)  232/    3474 : 2D7C 0000 48E2      		move.l	#objMap_Emily,obj_map(a6)
             347A : 000C             
(1)  233/    347C : 3D7C 8460 0014      		move.w	#setVram_Emily|$8000,obj_vram(a6)
(1)  234/    3482 : 2D7C 0303 0202      		move.l	#$03030202,obj_size(a6)		; UDLR sizes
             3488 : 0010             
(1)  235/    348A : 3D7C 0080 0004      		move.w	#(320/2)-32,obj_x(a6)
(1)  236/    3490 : 3D7C 0050 0008      		move.w	#(224/2)-32,obj_y(a6)
(1)  237/    3496 : 426E 001C           		clr.w	obj_frame(a6)
(1)  238/    349A : 426E 0026           		clr.w	obj_ram(a6)
(1)  239/    349E : 426E 0028           		clr.w	obj_ram+2(a6)
(1)  240/    34A2 : 6100 DAB0           		bsr	object_ResetAnim
(1)  241/    34A6 :                     
(1)  242/    34A6 :                     ; ----------------------------------------------
(1)  243/    34A6 :                     .main:
(1)  244/    34A6 : 4BEE 0026           		lea	obj_ram(a6),a5
(1)  245/    34AA : 49F8 C004           		lea	(Controller_1),a4
(1)  246/    34AE :                     
(1)  247/    34AE : 426E 0016           		clr.w	obj_x_spd(a6)
(1)  248/    34B2 : 426E 0018           		clr.w	obj_y_spd(a6)
(1)  249/    34B6 : 382C 0002           		move.w	on_hold(a4),d4
(1)  250/    34BA : 0804 0001           		btst	#bitJoyDown,d4
(1)  251/    34BE : 670A                		beq.s	.go_down
(1)  252/    34C0 : 3ABC 0000           		move.w	#0,(a5)		; <--
(1)  253/    34C4 : 3D7C 0140 0018      		move.w	#$140,obj_y_spd(a6)
(1)  254/    34CA :                     .go_down:
(1)  255/    34CA : 0804 0000           		btst	#bitJoyUp,d4
(1)  256/    34CE : 670A                		beq.s	.go_up
(1)  257/    34D0 : 3ABC 0004           		move.w	#4,(a5)
(1)  258/    34D4 : 3D7C FEC0 0018      		move.w	#-$140,obj_y_spd(a6)
(1)  259/    34DA :                     .go_up:
(1)  260/    34DA : 0804 0003           		btst	#bitJoyRight,d4
(1)  261/    34DE : 670A                		beq.s	.go_r
(1)  262/    34E0 : 3ABC 0008           		move.w	#8,(a5)
(1)  263/    34E4 : 3D7C 0140 0016      		move.w	#$140,obj_x_spd(a6)
(1)  264/    34EA :                     .go_r:
(1)  265/    34EA : 0804 0002           		btst	#bitJoyLeft,d4
(1)  266/    34EE : 670A                		beq.s	.go_l
(1)  267/    34F0 : 3ABC 000C           		move.w	#$C,(a5)
(1)  268/    34F4 : 3D7C FEC0 0016      		move.w	#-$140,obj_x_spd(a6)
(1)  269/    34FA :                     .go_l:
(1)  270/    34FA : 3015                		move.w	(a5),d0
(1)  271/    34FC : 382C 0002           		move.w	on_hold(a4),d4
(1)  272/    3500 : 0244 000F           		andi.w	#JoyUp+JoyDown+JoyLeft+JoyRight,d4
(1)  273/    3504 : 670A                		beq.s	.stay
(1)  274/    3506 : 122D 0002           		move.b	2(a5),d1
(1)  275/    350A : 0241 0003           		andi.w	#%11,d1
(1)  276/    350E : D041                		add.w	d1,d0
(1)  277/    3510 :                     .stay:
(1)  278/    3510 : 3D40 001C           		move.w	d0,obj_frame(a6)
(1)  279/    3514 : 066D 0020 0002      		addi.w	#$0020,2(a5)		; Speed
(1)  280/    351A : 026D 03FF 0002      		andi.w	#$03FF,2(a5)		; limit
(1)  281/    3520 : 6100 DA42           		bsr	object_Speed
(1)  282/    3524 :                     
(1)  283/    3524 : 4AAE 0004           		tst.l	obj_x(a6)
(1)  284/    3528 : 6A04                		bpl.s	.x_neg
(1)  285/    352A : 42AE 0004           		clr.l	obj_x(a6)
(1)  286/    352E :                     .x_neg:
(1)  287/    352E : 0C6E 0140 0004      		cmp.w	#320,obj_x(a6)
(1)  288/    3534 : 6D06                		blt.s	.x_posi
(1)  289/    3536 : 3D7C 0140 0004      		move.w	#320,obj_x(a6)
(1)  290/    353C :                     .x_posi:
(1)  291/    353C : 4AAE 0008           		tst.l	obj_y(a6)
(1)  292/    3540 : 6A04                		bpl.s	.y_neg
(1)  293/    3542 : 42AE 0008           		clr.l	obj_y(a6)
(1)  294/    3546 :                     .y_neg:
(1)  295/    3546 : 0C6E 00E0 0008      		cmp.w	#224,obj_y(a6)
(1)  296/    354C : 6D06                		blt.s	.y_posi
(1)  297/    354E : 3D7C 00E0 0008      		move.w	#224,obj_y(a6)
(1)  298/    3554 :                     .y_posi:
(1)  299/    3554 :                     ; 		clr.l	(RAM_WhoIAm).w
(1)  300/    3554 :                     ; 		bsr	object_Collision
(1)  301/    3554 :                     ; 		tst.l	d0
(1)  302/    3554 :                     ; 		beq.s	.no_one
(1)  303/    3554 :                     ; 		move.l	d0,(RAM_WhoIAm).w
(1)  304/    3554 :                     ; .no_one:
(1)  305/    3554 : 41F8 4AA2           		lea	(objDma_Emily),a0
(1)  306/    3558 : 43F9 0005 F3E0      		lea	(Art_Emily),a1
(1)  307/    355E : 6100 D8D8           		bsr	object_DMA_Auto
(1)  308/    3562 : 6000 D8B0           		bra	object_Display
(1)  309/    3566 :                     
(1)  310/    3566 :                     ; ----------------------------------------------
(1)  311/    3566 :                     
(1)  312/    3566 :                     .anim_data:
(1)  313/    3566 : 0008                		dc.w .anim_d-.anim_data
(1)  314/    3568 : 0014                		dc.w .anim_u-.anim_data
(1)  315/    356A : 0020                		dc.w .anim_r-.anim_data
(1)  316/    356C : 002C                		dc.w .anim_l-.anim_data
(1)  317/    356E :                     .anim_d:
(1)  318/    356E : 0008                		dc.w 8
(1)  319/    3570 : 0000 0001 0002      		dc.w 0,1,2,3
             3576 : 0003             
(1)  320/    3578 : FFFE                		dc.w -2
(1)  321/    357A :                     		align 2
(1)  322/    357A :                     .anim_u:
(1)  323/    357A : 0008                		dc.w 8
(1)  324/    357C : 0004 0005 0006      		dc.w 4,5,6,7
             3582 : 0007             
(1)  325/    3584 : FFFE                		dc.w -2
(1)  326/    3586 :                     		align 2
(1)  327/    3586 :                     .anim_r:
(1)  328/    3586 : 0008                		dc.w 8
(1)  329/    3588 : 0008 0009 000A      		dc.w 8,9,10,11
             358E : 000B             
(1)  330/    3590 : FFFE                		dc.w -2
(1)  331/    3592 :                     		align 2
(1)  332/    3592 :                     .anim_l:
(1)  333/    3592 : 0008                		dc.w 8
(1)  334/    3594 : 000C 000D 000E      		dc.w 12,13,14,15
             359A : 000F             
(1)  335/    359C : FFFE                		dc.w -2
(1)  336/    359E :                     		align 2
(1)  337/    359E :                     
(1)  338/    359E :                     ; --------------------------------------------------
(1)  339/    359E :                     ; Doremi, Sophie o Nicole
(1)  340/    359E :                     ; --------------------------------------------------
(1)  341/    359E :                     
(1)  342/    359E :                     Obj_Doremi:
(1)  343/    359E : 7000                		moveq	#0,d0
(1)  344/    35A0 : 102E 0021           		move.b	obj_index(a6),d0
(1)  345/    35A4 : D040                		add.w	d0,d0
(1)  346/    35A6 : 323B 0006           		move.w	.list(pc,d0.w),d1
(1)  347/    35AA : 4EFB 1002           		jmp	.list(pc,d1.w)
(1)  348/    35AE :                     ; ----------------------------------------------
(1)  349/    35AE : 0004                .list:		dc.w .init-.list
(1)  350/    35B0 : 003E                		dc.w .main-.list
(1)  351/    35B2 :                     ; ----------------------------------------------
(1)  352/    35B2 :                     .init:
(1)  353/    35B2 : 1D7C 0001 0021      		move.b	#1,obj_index(a6)
(1)  354/    35B8 : 2D7C 0303 0202      		move.l	#$03030202,obj_size(a6)		; UDLR sizes
             35BE : 0010             
(1)  355/    35C0 : 102E 0023           		move.b	obj_subid(a6),d0
(1)  356/    35C4 : E948                		lsl.w	#4,d0
(1)  357/    35C6 : 41FA 0070           		lea	.sub_list(pc),a0
(1)  358/    35CA : D0C0                		adda	d0,a0
(1)  359/    35CC : 2D58 000C           		move.l	(a0)+,obj_map(a6)
(1)  360/    35D0 : 3D58 0014           		move.w	(a0)+,obj_vram(a6)
(1)  361/    35D4 : 3D58 0004           		move.w	(a0)+,obj_x(a6)
(1)  362/    35D8 : 3D58 0008           		move.w	(a0)+,obj_y(a6)
(1)  363/    35DC : 3D58 0028           		move.w	(a0)+,obj_ram+2(a6)
(1)  364/    35E0 :                     
(1)  365/    35E0 : 426E 001C           		clr.w	obj_frame(a6)
(1)  366/    35E4 : 426E 0026           		clr.w	obj_ram(a6)
(1)  367/    35E8 : 6100 D96A           		bsr	object_ResetAnim
(1)  368/    35EC :                     
(1)  369/    35EC :                     ; ----------------------------------------------
(1)  370/    35EC :                     .main:
(1)  371/    35EC : 7000                		moveq	#0,d0
(1)  372/    35EE : 102E 0026           		move.b	obj_ram(a6),d0
(1)  373/    35F2 : D06E 0028           		add.w	obj_ram+2(a6),d0
(1)  374/    35F6 : 3D40 001C           		move.w	d0,obj_frame(a6)
(1)  375/    35FA : 066E 0010 0026      		addi.w	#$0010,obj_ram(a6)		; Speed
(1)  376/    3600 : 026E 01FF 0026      		andi.w	#$01FF,obj_ram(a6)		; limit
(1)  377/    3606 :                     
(1)  378/    3606 : 7000                		moveq	#0,d0
(1)  379/    3608 : 102E 0023           		move.b	obj_subid(a6),d0
(1)  380/    360C : E748                		lsl.w	#3,d0
(1)  381/    360E : 45FA 0010           		lea	.sub_dma(pc),a2
(1)  382/    3612 : D4C0                		adda	d0,a2
(1)  383/    3614 : 205A                		move.l	(a2)+,a0
(1)  384/    3616 : 225A                		move.l	(a2)+,a1
(1)  385/    3618 : 6100 D81E           		bsr	object_DMA_Auto
(1)  386/    361C : 6000 D7F6           		bra	object_Display
(1)  387/    3620 :                     
(1)  388/    3620 :                     ; ----------------------------------------------
(1)  389/    3620 :                     
(1)  390/    3620 :                     .sub_dma:
(1)  391/    3620 : 0000 4B88 0005      		dc.l objDma_Doremi,Art_Doremi
             3626 : EDE0             
(1)  392/    3628 : 0000 4D5C 0006      		dc.l objDma_Sophie,Art_Sophie
             362E : 1F60             
(1)  393/    3630 : 0000 4D5C 0006      		dc.l objDma_Sophie,Art_Sophie
             3636 : 1F60             
(1)  394/    3638 :                     .sub_list:
(1)  395/    3638 : 0000 4B60           		dc.l objMap_Doremi
(1)  396/    363C : 2478                		dc.w setVram_Doremi|$2000
(1)  397/    363E : 003C 005A           		dc.w 60,90
(1)  398/    3642 : 0000                		dc.w 0
(1)  399/    3644 : 0000 0000           		dc.l 0
(1)  400/    3648 : 0000 4CEC           		dc.l objMap_Sophie
(1)  401/    364C : 4490                		dc.w setVram_Sophie|$4000
(1)  402/    364E : 0100 003C           		dc.w 256,60
(1)  403/    3652 : 0000                		dc.w 0
(1)  404/    3654 : 0000 0000           		dc.l 0
(1)  405/    3658 : 0000 4CEC           		dc.l objMap_Sophie
(1)  406/    365C : 44A8                		dc.w setVram_Nicole|$4000
(1)  407/    365E : 0116 00BE           		dc.w 278,190
(1)  408/    3662 : 0002                		dc.w 2
(1)  409/    3664 : 0000 0000           		dc.l 0
(1)  410/    3668 :                     
(1)  411/    3668 :                     ; --------------------------------------------------
(1)  412/    3668 :                     ; Bibi
(1)  413/    3668 :                     ; --------------------------------------------------
(1)  414/    3668 :                     
(1)  415/    3668 :                     Obj_Bibi:
(1)  416/    3668 : 7000                		moveq	#0,d0
(1)  417/    366A : 102E 0021           		move.b	obj_index(a6),d0
(1)  418/    366E : D040                		add.w	d0,d0
(1)  419/    3670 : 323B 0006           		move.w	.list(pc,d0.w),d1
(1)  420/    3674 : 4EFB 1002           		jmp	.list(pc,d1.w)
(1)  421/    3678 :                     ; ----------------------------------------------
(1)  422/    3678 : 0004                .list:		dc.w .init-.list
(1)  423/    367A : 0038                		dc.w .main-.list
(1)  424/    367C :                     ; ----------------------------------------------
(1)  425/    367C :                     .init:
(1)  426/    367C : 1D7C 0001 0021      		move.b	#1,obj_index(a6)
(1)  427/    3682 : 2D7C 0203 0202      		move.l	#$02030202,obj_size(a6)		; UDLR sizes
             3688 : 0010             
(1)  428/    368A : 3D7C 00A0 0004      		move.w	#(320/2),obj_x(a6)
(1)  429/    3690 : 3D7C 0070 0008      		move.w	#(224/2),obj_y(a6)
(1)  430/    3696 : 2D7C 0000 4B98      		move.l	#objMap_Bibi,obj_map(a6)
             369C : 000C             
(1)  431/    369E : 3D7C 24D0 0014      		move.w	#setVram_Bibi|$2000,obj_vram(a6)
(1)  432/    36A4 : 426E 001C           		clr.w	obj_frame(a6)
(1)  433/    36A8 : 6100 D8AA           		bsr	object_ResetAnim
(1)  434/    36AC : 6100 D74C           		bsr	object_ResetVars
(1)  435/    36B0 :                     
(1)  436/    36B0 :                     ; ----------------------------------------------
(1)  437/    36B0 :                     .main:
(1)  438/    36B0 : 7000                		moveq	#0,d0
(1)  439/    36B2 : 4BF8 C014           		lea	(Controller_2).w,a5
(1)  440/    36B6 : 0C15 0003           		cmp.b	#JoyID_Mouse,pad_id(a5)
(1)  441/    36BA : 6662                		bne.s	.no_mouse
(1)  442/    36BC : 3E2D 0002           		move.w	on_hold(a5),d7
(1)  443/    36C0 : 0807 0000           		btst	#bitClickL,d7
(1)  444/    36C4 : 6704                		beq.s	.no_click
(1)  445/    36C6 : 7001                		moveq	#1,d0
(1)  446/    36C8 : 6054                		bra.s	.no_mouse
(1)  447/    36CA :                     .no_click:
(1)  448/    36CA : 426E 0016           		clr.w	obj_x_spd(a6)
(1)  449/    36CE : 426E 0018           		clr.w	obj_y_spd(a6)
(1)  450/    36D2 : 3E2D 0008           		move.w	mouse_x(a5),d7
(1)  451/    36D6 : 3C2D 000A           		move.w	mouse_y(a5),d6
(1)  452/    36DA : 3A07                		move.w	d7,d5
(1)  453/    36DC : 8A46                		or.w	d6,d5
(1)  454/    36DE : 673E                		beq.s	.no_mouse
(1)  455/    36E0 :                     
(1)  456/    36E0 : 4A46                		tst.w	d6
(1)  457/    36E2 : 671C                		beq.s	.no_y_spd
(1)  458/    36E4 : 7003                		moveq	#3,d0
(1)  459/    36E6 : 08EE 0000 0022      		bset	#bitobj_flipH,obj_set(a6)
(1)  460/    36EC : 3A06                		move.w	d6,d5
(1)  461/    36EE : ED45                		asl.w	#6,d5
(1)  462/    36F0 : 4A46                		tst.w	d6
(1)  463/    36F2 : 6A08                		bpl.s	.plus_y_spd
(1)  464/    36F4 : 08AE 0000 0022      		bclr	#bitobj_flipH,obj_set(a6)
(1)  465/    36FA : 5240                		addq.w	#1,d0
(1)  466/    36FC :                     .plus_y_spd:
(1)  467/    36FC : 3D45 0018           		move.w	d5,obj_y_spd(a6)
(1)  468/    3700 :                     .no_y_spd:
(1)  469/    3700 : 4A47                		tst.w	d7
(1)  470/    3702 : 671A                		beq.s	.no_x_spd
(1)  471/    3704 : 7002                		moveq	#2,d0
(1)  472/    3706 : 08EE 0000 0022      		bset	#bitobj_flipH,obj_set(a6)
(1)  473/    370C : 3A07                		move.w	d7,d5
(1)  474/    370E : ED45                		asl.w	#6,d5
(1)  475/    3710 : 4A47                		tst.w	d7
(1)  476/    3712 : 6A06                		bpl.s	.plus_x_spd
(1)  477/    3714 : 08AE 0000 0022      		bclr	#bitobj_flipH,obj_set(a6)
(1)  478/    371A :                     .plus_x_spd:
(1)  479/    371A : 3D45 0016           		move.w	d5,obj_x_spd(a6)
(1)  480/    371E :                     .no_x_spd:
(1)  481/    371E :                     
(1)  482/    371E :                     ;
(1)  483/    371E :                     ; 		moveq	#2,d0
(1)  484/    371E :                     ; 		bset	#bitobj_flipH,obj_set(a6)
(1)  485/    371E :                     ; 		move.w	d7,d5
(1)  486/    371E :                     ; 		lsl.w	#3,d5
(1)  487/    371E :                     ; 		tst.w	d7
(1)  488/    371E :                     ; 		bpl.s	.no_x_spd
(1)  489/    371E :                     ; 		neg.w	d5
(1)  490/    371E :                     ; 		bclr	#bitobj_flipH,obj_set(a6)
(1)  491/    371E :                     ; .no_x_spd:
(1)  492/    371E :                     ; 		move.w	d5,obj_x_spd(a6)
(1)  493/    371E :                     
(1)  494/    371E :                     .no_mouse:
(1)  495/    371E : 1D40 001E           		move.b	d0,obj_anim_id(a6)
(1)  496/    3722 :                     ; 		lea	obj_ram(a6),a5
(1)  497/    3722 :                     ; 		sub.w	#1,(a5)
(1)  498/    3722 :                     ; 		bpl.s	.keep_moving
(1)  499/    3722 :                     ; 		move.w	2(a5),d1
(1)  500/    3722 :                     ; 		addq.w	#4,d1			; Start at 4
(1)  501/    3722 :                     ; 		move.b	d1,obj_anim_id(a6)
(1)  502/    3722 :                     ; 		lsl.w	#2,d1
(1)  503/    3722 :                     ; 		lea	.set_spds(pc,d1.w),a0
(1)  504/    3722 :                     ; 		move.w	(a0),obj_x_spd(a6)
(1)  505/    3722 :                     ; 		move.w	2(a0),obj_y_spd(a6)
(1)  506/    3722 :                     ; 		bclr	#bitobj_flipH,obj_set(a6)
(1)  507/    3722 :                     ; 		tst.w	obj_x_spd(a6)
(1)  508/    3722 :                     ; 		bmi.s	.flip_x
(1)  509/    3722 :                     ; 		bset	#bitobj_flipH,obj_set(a6)
(1)  510/    3722 :                     ; .flip_x:
(1)  511/    3722 :                     ; 		addq.w	#1,2(a5)
(1)  512/    3722 :                     ; 		andi.w	#%11,2(a5)
(1)  513/    3722 :                     ; 		move.w	#$100,(a5)		; Reset timer
(1)  514/    3722 :                     ; .keep_moving:
(1)  515/    3722 : 6100 D840           		bsr	object_Speed
(1)  516/    3726 : 41FA 0018           		lea	.anim_data(pc),a0
(1)  517/    372A : 6100 D794           		bsr	object_Animate
(1)  518/    372E :                     
(1)  519/    372E : 41F8 4C78           		lea	(objDma_Bibi),a0
(1)  520/    3732 : 43F9 0005 D5C0      		lea	(Art_Bibi),a1
(1)  521/    3738 : 6100 D6FE           		bsr	object_DMA_Auto
(1)  522/    373C : 6000 D6D6           		bra	object_Display
(1)  523/    3740 :                     
(1)  524/    3740 :                     ; ----------------------------------------------
(1)  525/    3740 :                     
(1)  526/    3740 :                     ; .set_spds:
(1)  527/    3740 :                     ; 		dc.w  $0080, $0000	; Right
(1)  528/    3740 :                     ; 		dc.w  $0000, $0080	; Down
(1)  529/    3740 :                     ; 		dc.w -$0080, $0000	; Left
(1)  530/    3740 :                     ; 		dc.w  $0000,-$0080	; Up
(1)  531/    3740 :                     .anim_data:
(1)  532/    3740 : 000A                		dc.w .stand-.anim_data
(1)  533/    3742 : 0034                		dc.w .yatta-.anim_data
(1)  534/    3744 : 0028                		dc.w .walk_lr-.anim_data
(1)  535/    3746 : 0010                		dc.w .walk_d-.anim_data
(1)  536/    3748 : 001C                		dc.w .walk_u-.anim_data
(1)  537/    374A :                     .stand:
(1)  538/    374A : 0007                		dc.w 7
(1)  539/    374C : 0000                		dc.w 0
(1)  540/    374E : FFFE                		dc.w -2
(1)  541/    3750 :                     .walk_d:
(1)  542/    3750 : 0007                		dc.w 7
(1)  543/    3752 : 0000 0001 0000      		dc.w 0,1,0,2
             3758 : 0002             
(1)  544/    375A : FFFE                		dc.w -2
(1)  545/    375C :                     .walk_u:
(1)  546/    375C : 0007                		dc.w 7
(1)  547/    375E : 0003 0004 0003      		dc.w 3,4,3,5
             3764 : 0005             
(1)  548/    3766 : FFFE                		dc.w -2
(1)  549/    3768 :                     .walk_lr:
(1)  550/    3768 : 0007                		dc.w 7
(1)  551/    376A : 0006 0007 0006      		dc.w 6,7,6,8
             3770 : 0008             
(1)  552/    3772 : FFFE                		dc.w -2
(1)  553/    3774 :                     .yatta:
(1)  554/    3774 : 0007                		dc.w 7
(1)  555/    3776 : 0009                		dc.w 9
(1)  556/    3778 : FFFE                		dc.w -2
(1)  557/    377A :                     
(1)  558/    377A :                     ; ====================================================================
(1)  559/    377A :                     ; ------------------------------------------------------
(1)  560/    377A :                     ; Subroutines
(1)  561/    377A :                     ; ------------------------------------------------------
(1)  562/    377A :                     
(1)  563/    377A :                     ShowMe_Who:
(1)  647/    377A : 4E75                		rts
(1)  648/    377C :                     ; 		lea	str_Nadie(pc),a0
(1)  649/    377C :                     ; 		move.l	#locate(1,3,0),d0
(1)  650/    377C :                     ; 		bra	Video_Print
(1)  651/    377C :                     ; 		rts
(1)  652/    377C :                     
(1)  653/    377C :                     ; ====================================================================
(1)  654/    377C :                     ; ------------------------------------------------------
(1)  655/    377C :                     ; Custom VBlank
(1)  656/    377C :                     ; ------------------------------------------------------
(1)  657/    377C :                     
(1)  658/    377C :                     ; ------------------------------------------------------
(1)  659/    377C :                     ; Custom HBlank
(1)  660/    377C :                     ; ------------------------------------------------------
(1)  661/    377C :                     
(1)  662/    377C :                     ; ====================================================================
(1)  663/    377C :                     ; ------------------------------------------------------
(1)  664/    377C :                     ; Small DATA section
(1)  665/    377C :                     ; ------------------------------------------------------
(1)  666/    377C :                     
(1)  667/    377C :                     PAL_SCR0_TEST:
(1)  668/    377C :                     		binclude "game/screen_0/data/md/maps/test/md_pal.bin"
(1)  669/    379C :                     		align 2
(1)  670/    379C :                     str_Scrn0Intro:
(1)  671/    379C : 4368 6563 6B69      		dc.b "Checking 32X visuals",0
             37A2 : 6E67 2033 3258 
             37A8 : 2076 6973 7561 
             37AE : 6C73 00          
(1)  672/    37B1 :                     		align 2
(1)  673/    37B2 :                     ; str_Nadie:	dc.b "\\w",0
(1)  674/    37B2 :                     ; 		dc.l RAM_SC0_Cmnd
(1)  675/    37B2 :                     ; 		align 2
(1)  676/    37B2 :                     
(1)  677/    37B2 :                     
(1)  678/    37B2 :                     ; str_ListWho:	dc.b "Bibi   ",0
(1)  679/    37B2 :                     ; 		dc.b "Doremi ",0
(1)  680/    37B2 :                     ; 		dc.b "Sophie ",0
(1)  681/    37B2 :                     ; 		dc.b "Nicole ",0
(1)  682/    37B2 :                     ; 		dc.b "Nikona ",0
(1)  683/    37B2 :                     ; list_WhoIAm:	dc.l Obj_Bibi
(1)  684/    37B2 :                     ; 		dc.w 0
(1)  685/    37B2 :                     ; 		dc.l Obj_Doremi
(1)  686/    37B2 :                     ; 		dc.w 0
(1)  687/    37B2 :                     ; 		dc.l Obj_Doremi
(1)  688/    37B2 :                     ; 		dc.w 1
(1)  689/    37B2 :                     ; 		dc.l Obj_Doremi
(1)  690/    37B2 :                     ; 		dc.w 2
(1)  691/    37B2 :                     ; 		dc.l -1
(1)  692/    37B2 :                     ; 		dc.w 0
(1)  693/    37B2 :                     ;
(1)  694/    37B2 :                     ; str_ShowMe:	dc.b "\\w | \\w \\w",0
(1)  695/    37B2 :                     ; 		dc.l $FF0000,$FF0004,$FF0006
(1)  696/    37B2 :                     ; 		align 2
(1)  697/    37B2 :                     
(1)  698/    37B2 :                     ; List_ObjPos:	dc.w 1
(1)  699/    37B2 :                     ; 		dc.w 215,164
(1)  700/    37B2 :                     ; 		dc.w $4000|setVram_Generic+(4*6)
(1)  701/    37B2 :                     ; 		dc.l objMap_Doremi
(1)  702/    37B2 :                     ; 		dc.l objDma_Doremi
(1)  703/    37B2 :                     ; 		dc.w $70,$40
(1)  704/    37B2 :                     ; 		dc.w $4000|setVram_Generic+(4*6)
(1)  705/    37B2 :                     ; 		dc.l objMap_Doremi
(1)  706/    37B2 :                     ; 		dc.l objDma_Doremi
(1)  707/    37B2 :                     ; 		dc.w $50,$80
(1)  708/    37B2 :                     ; 		dc.w $4000|setVram_Generic+(4*6)
(1)  709/    37B2 :                     ; 		dc.l objMap_Doremi
(1)  710/    37B2 :                     ; 		dc.l objDma_Doremi
(1)  711/    37B2 :                     ; 		dc.w $30,$C0
(1)  712/    37B2 :                     ; 		dc.w $4000|setVram_Generic+(4*6)
(1)  713/    37B2 :                     ; 		dc.l objMap_Doremi
(1)  714/    37B2 :                     ; 		dc.l objDma_Doremi
(1)  715/    37B2 :                     
     368/    37B2 :                     mcscrn_e:
     368/    37B2 :                     ; Md_Screen00_e:
     368/    37B2 : =$37B2               MD_SCREEN00_E label *
     369/    37B2 : (MACRO)              	screen_code Md_Screen01,Md_Screen01_e,"game/screen_1/code.asm"
     369/    37B2 : =$37B2               MD_SCREEN01 label *
     369/    37B2 :                     
     369/    37B2 :                     mctopscrn:
     369/    37B2 :                     mcscrn_s:
     369/    37B2 :                             include "game/screen_1/code.asm";"game/screen_0/code.asm"
(1)    1/    37B2 :                     ; ===========================================================================
(1)    2/    37B2 :                     ; ----------------------------------------------------------------
(1)    3/    37B2 :                     ; SCREEN CODE
(1)    4/    37B2 :                     ; ----------------------------------------------------------------
(1)    5/    37B2 :                     
(1)    6/    37B2 :                     ; ====================================================================
(1)    7/    37B2 :                     ; ------------------------------------------------------
(1)    8/    37B2 :                     ; Variables
(1)    9/    37B2 :                     ; ------------------------------------------------------
(1)   10/    37B2 :                     
(1)   11/    37B2 : =$440                setVram_Mikami		equ $0440
(1)   12/    37B2 : =$480                setVram_Sisi		equ $0480
(1)   13/    37B2 :                     
(1)   14/    37B2 :                     ; ====================================================================
(1)   15/    37B2 :                     ; ------------------------------------------------------
(1)   16/    37B2 :                     ; Structs
(1)   17/    37B2 :                     ; ------------------------------------------------------
(1)   18/    37B2 :                     
(1)   19/    37B2 :                     ; 			strct 0
(1)   20/    37B2 :                     ; strc_xpos		ds.w 1
(1)   21/    37B2 :                     ; strc_ypos		ds.w 1
(1)   22/    37B2 :                     ; 			endstrct
(1)   23/    37B2 :                     
(1)   24/    37B2 :                     ; ====================================================================
(1)   25/    37B2 :                     ; ------------------------------------------------------
(1)   26/    37B2 :                     ; This mode's RAM
(1)   27/    37B2 :                     ; ------------------------------------------------------
(1)   28/    37B2 :                     
(1)   29/    37B2 :  (MACRO-2)           			strct RAM_ScrnBuff
(1)   29/    37B2 : =$37B2               GLBL_LASTPC     set *
(1)   29/FFFFFFFFFFFFD882 :                                     dephase
(1)   29/FFFFFFFFFFFFD404 :                                     phase RAM_SCRNBUFF
(1)   29/FFFFFFFFFFFFD404 : =$FFFFFFFFFFFFD404   GLBL_LASTORG    set *
(1)   30/FFFFFFFFFFFFD404 :                     RAM_CurrPick		ds.w 1
(1)   31/FFFFFFFFFFFFD406 :                     RAM_GemaArg0		ds.w 1
(1)   32/FFFFFFFFFFFFD408 :                     RAM_GemaArg1		ds.w 1
(1)   33/FFFFFFFFFFFFD40A :                     RAM_GemaArg2		ds.w 1
(1)   34/FFFFFFFFFFFFD40C :                     RAM_GemaArg3		ds.w 1
(1)   35/FFFFFFFFFFFFD40E :                     RAM_GemaArg4		ds.w 1
(1)   36/FFFFFFFFFFFFD410 :                     RAM_GemaArg5		ds.w 1
(1)   37/FFFFFFFFFFFFD412 :                     RAM_GemaArg6		ds.w 1
(1)   38/FFFFFFFFFFFFD414 :                     RAM_ChnlLinks		ds.w 26
(1)   39/FFFFFFFFFFFFD448 :                     sizeof_thisbuff		ds.l 0
(1)   40/FFFFFFFFFFFFD44C :  (MACRO-2)           			endstrct
(1)   40/FFFFFFFFFFFFD404 :                                     org GLBL_LASTORG
(1)   40/    37B2 :                                     phase GLBL_LASTPC
(1)   41/    37B2 :                     
(1)   42/    37B2 :  (MACRO-2)           	erreport "SCREEN",sizeof_thisbuff-RAM_ScrnBuff,MAX_ScrnBuff
(1)   43/    37B2 :                     
(1)   44/    37B2 :                     ; ====================================================================
(1)   45/    37B2 :                     ; ------------------------------------------------------
(1)   46/    37B2 :                     ; Init
(1)   47/    37B2 :                     ; ------------------------------------------------------
(1)   48/    37B2 :                     
(1)   49/    37B2 : 6100 DB0E           		bsr	Mode_Init
(1)   50/    37B6 :  (MACRO-2)           		load_banks file_mddata_def,pointr_marsdata_def
(1)   51/    37B6 :                     
(1)   52/    37B6 :                     	; ----------------------------------------------
(1)   53/    37B6 :                     	; Load assets
(1)   78/    37B6 : 203C 0006 3680      		move.l	#ART_TEST,d0
(1)   79/    37BC : 323C 0020           		move.w	#cell_vram($0001),d1
(1)   80/    37C0 : 343C 8780           		move.w	#ART_TEST_E-ART_TEST,d2
(1)   81/    37C4 : 6100 CEB6           		bsr	Video_LoadArt
(1)   82/    37C8 : 41F8 51B4           		lea	(MAP_TEST),a0			; long lea
(1)   83/    37CC : 203C 0001 0000      		move.l	#locate(0,0,1),d0
(1)   84/    37D2 : 223C 0027 001B      		move.l	#map_size(320,224),d1
(1)   85/    37D8 : 343C 0001           		move.w	#$0001,d2
(1)   86/    37DC : 6100 D206           		bsr	Video_LoadMap
(1)   88/    37E0 : 41F9 0006 2A80      		lea	(ASCII_FONT_S1).l,a0
(1)   89/    37E6 : 43F9 0000 03F6      		lea	(ASCII_PAL).l,a1
(1)   90/    37EC : 6100 D25A           		bsr	Video_PrintInit
(1)   91/    37F0 : 203C 0006 BE00      		move.l	#Art_Sisi,d0
(1)   92/    37F6 : 323C 9000           		move.w	#cell_vram(setVram_Sisi),d1
(1)   93/    37FA : 343C 05E0           		move.w	#Art_Sisi_e-Art_Sisi,d2
(1)   94/    37FE : 6100 CE7C           		bsr	Video_LoadArt
(1)   95/    3802 :                     
(1)   96/    3802 : 41FA 031C           		lea	PAL_TEST(pc),a0
(1)   97/    3806 : 7000                		moveq	#0,d0
(1)   98/    3808 : 323C 0010           		move.w	#16,d1
(1)   99/    380C : 6100 CCFA           		bsr	Video_FadePal
(1)  100/    3810 : 41F8 5A74           		lea	(objPal_Sisi),a0
(1)  101/    3814 : 7010                		moveq	#16,d0
(1)  102/    3816 : 323C 0010           		move.w	#16,d1
(1)  103/    381A : 6100 CCEC           		bsr	Video_FadePal
(1)  104/    381E : 41FA 031C           		lea	str_TesterInit(pc),a0
(1)  105/    3822 : 203C 0000 0101      		move.l	#locate(1,1,0),d0
(1)  106/    3828 : 6100 D24E           		bsr	Video_Print
(1)  107/    382C :                     ; 		move.l	#Object_Mikami,d0
(1)  108/    382C :                     ; 		moveq	#0,d1
(1)  109/    382C :                     ; 		bsr	Objects_Set
(1)  110/    382C : 203C 0000 3AB8      		move.l	#Object_Sisi,d0
(1)  111/    3832 : 6100 D49E           		bsr	Objects_Add
(1)  112/    3836 :                     	; ----------------------------------------------
(1)  113/    3836 : 4278 D406           		clr.w	(RAM_GemaArg0).w
(1)  114/    383A : 4278 D408           		clr.w	(RAM_GemaArg1).w
(1)  115/    383E : 4278 D40A           		clr.w	(RAM_GemaArg2).w
(1)  116/    3842 : 4278 D40C           		clr.w	(RAM_GemaArg3).w
(1)  117/    3846 : 4278 D40E           		clr.w	(RAM_GemaArg4).w
(1)  118/    384A : 4278 D410           		clr.w	(RAM_GemaArg5).w
(1)  119/    384E : 31FC 00D4 D412      		move.w	#212,(RAM_GemaArg6).w
(1)  120/    3854 : 303C 00D4           		move.w	#212,d0
(1)  121/    3858 : 6100 CB1C           		bsr	gemaSetBeats
(1)  122/    385C :                     ; 		moveq	#1,d0
(1)  123/    385C :                     ; 		bsr	gemaPlayTrack
(1)  124/    385C :                     
(1)  125/    385C :                     	; ----------------------------------------------
(1)  126/    385C : 6100 008C           		bsr	.show_me
(1)  127/    3860 :                     ; 		bsr	.steal_vars
(1)  128/    3860 : 6100 D418           		bsr	Objects_Run
(1)  129/    3864 :                     	; ----------------------------------------------
(1)  130/    3864 : 08F9 0006 FFFF      		bset	#bitDispEnbl,(RAM_VdpRegs+1).l		; Enable display
             386A : B8F9             
(1)  131/    386C : 11FC 0081 B904      		move.b	#%10000001,(RAM_VdpRegs+$C).w		; H40 + shadow mode
(1)  132/    3872 : 6100 CB50           		bsr	Video_Update
(1)  133/    3876 : 6100 CC1A           		bsr	Video_FullFadeIn
(1)  134/    387A :                     
(1)  135/    387A :                     ; ====================================================================
(1)  136/    387A :                     ; ------------------------------------------------------
(1)  137/    387A :                     ; Loop
(1)  138/    387A :                     ; ------------------------------------------------------
(1)  139/    387A :                     
(1)  140/    387A :                     .loop:
(1)  141/    387A : 6100 D800           		bsr	System_Render
(1)  142/    387E :                     
(1)  143/    387E :                     ; 		bsr	.steal_vars
(1)  144/    387E : 6100 D3FA           		bsr	Objects_Run
(1)  145/    3882 : 41FA 03D0           		lea	str_Info(pc),a0
(1)  146/    3886 : 203C 0000 1F1A      		move.l	#locate(31,26,0),d0
(1)  147/    388C : 6100 D1EA           		bsr	Video_Print
(1)  148/    3890 :                     
(1)  149/    3890 :                     ; 	; Controls
(1)  150/    3890 :                     ; 	if MCD|MARSCD
(1)  151/    3890 :                     ; 		lea	(Controller_1).w,a6
(1)  152/    3890 :                     ; 		move.w	on_press(a6),d7
(1)  153/    3890 :                     ; 		btst	#bitJoyMode,d7
(1)  154/    3890 :                     ; 		beq.s	.n_aplay
(1)  155/    3890 :                     ; ; 		moveq	#1,d0
(1)  156/    3890 :                     ; ; 		bsr	Video_MdMarsGfxMode
(1)  157/    3890 :                     ; 		move.w	#$0002,(sysmcd_reg+mcd_dcomm_m).l
(1)  158/    3890 :                     ; 		move.w	#$0010,d0
(1)  159/    3890 :                     ; 		bsr	System_McdSubTask
(1)  160/    3890 :                     ; .n_aplay:
(1)  161/    3890 :                     ; 	endif
(1)  162/    3890 :                     
(1)  163/    3890 : 4DF8 C004           		lea	(Controller_1).w,a6
(1)  164/    3894 : 4BF8 D404           		lea	(RAM_CurrPick).w,a5
(1)  165/    3898 :                     	; UP/DOWN
(1)  166/    3898 : 3E2E 0002           		move.w	on_hold(a6),d7
(1)  167/    389C : 0247 0070           		andi.w	#JoyA+JoyB+JoyC,d7
(1)  168/    38A0 : 6626                		bne.s	.n_up
(1)  169/    38A2 : 3E2E 0004           		move.w	on_press(a6),d7
(1)  170/    38A6 : 0807 0001           		btst	#bitJoyDown,d7
(1)  171/    38AA : 670A                		beq.s	.n_down
(1)  172/    38AC : 0C55 0007           		cmp.w	#7,(a5)		; MAX OPTIONS
(1)  173/    38B0 : 6704                		beq.s	.n_down
(1)  174/    38B2 : 5255                		addq.w	#1,(a5)
(1)  175/    38B4 : 6134                		bsr.s	.show_me
(1)  176/    38B6 :                     .n_down:
(1)  177/    38B6 : 3E2E 0004           		move.w	on_press(a6),d7
(1)  178/    38BA : 0807 0000           		btst	#bitJoyUp,d7
(1)  179/    38BE : 6708                		beq.s	.n_up
(1)  180/    38C0 : 4A55                		tst.w	(a5)
(1)  181/    38C2 : 6704                		beq.s	.n_up
(1)  182/    38C4 : 5355                		subq.w	#1,(a5)
(1)  183/    38C6 : 6122                		bsr.s	.show_me
(1)  184/    38C8 :                     .n_up:
(1)  185/    38C8 : 3E38 D404           		move.w	(RAM_CurrPick).w,d7
(1)  186/    38CC : E54F                		lsl.w	#2,d7
(1)  187/    38CE : 4EBB 7028           		jsr	.jump_list(pc,d7.w)
(1)  188/    38D2 : 4A78 C458           		tst.w	(RAM_ScreenMode).w	; Check -1
(1)  189/    38D6 : 6A10                		bpl.s	.n_cbtn
(1)  190/    38D8 : 6100 CA52           		bsr	gemaStopAll
(1)  191/    38DC : 6100 CBDA           		bsr	Video_FullFadeOut
(1)  192/    38E0 : 31FC 0000 C458      		move.w	#0,(RAM_ScreenMode).w	; Return to mode 0
(1)  193/    38E6 : 4E75                		rts				; EXIT
(1)  194/    38E8 :                     .n_cbtn:
(1)  195/    38E8 : 6090                		bra	.loop
(1)  196/    38EA :                     ; ------------------------------------------------------
(1)  197/    38EA :                     
(1)  198/    38EA :                     .show_me:
(1)  199/    38EA : 41FA 0334           		lea	str_ShowMe(pc),a0
(1)  200/    38EE : 203C 0000 1705      		move.l	#locate(23,5,0),d0
(1)  201/    38F4 : 6000 D182           		bra	Video_Print
(1)  202/    38F8 :                     
(1)  203/    38F8 :                     ; ------------------------------------------------------
(1)  204/    38F8 :                     
(1)  205/    38F8 :                     .jump_list:
(1)  206/    38F8 : 6000 001E           		bra.w	.nothing
(1)  207/    38FC : 6000 002C           		bra.w	.option_1
(1)  208/    3900 : 6000 00AE           		bra.w	.option_2
(1)  209/    3904 : 6000 00C0           		bra.w	.option_3
(1)  210/    3908 : 6000 00D2           		bra.w	.option_4
(1)  211/    390C : 6000 00E6           		bra.w	.option_5
(1)  212/    3910 : 6000 00F6           		bra.w	.option_6
(1)  213/    3914 : 6000 0144           		bra.w	.option_7
(1)  214/    3918 :                     
(1)  215/    3918 :                     ; ------------------------------------------------------
(1)  216/    3918 :                     ; OPTION 0
(1)  217/    3918 :                     ; ------------------------------------------------------
(1)  218/    3918 :                     
(1)  219/    3918 :                     .nothing:
(1)  220/    3918 : 3E2E 0004           		move.w	on_press(a6),d7
(1)  221/    391C : 0807 0007           		btst	#bitJoyStart,d7
(1)  222/    3920 : 6706                		beq.s	.no_press
(1)  223/    3922 : 61C6                		bsr.s	.show_me
(1)  224/    3924 : 6000 C9C4           		bra	gemaTest
(1)  225/    3928 :                     .no_press:
(1)  226/    3928 : 4E75                		rts
(1)  227/    392A :                     
(1)  228/    392A :                     ; ------------------------------------------------------
(1)  229/    392A :                     ; OPTION 1
(1)  230/    392A :                     ; ------------------------------------------------------
(1)  231/    392A :                     
(1)  232/    392A :                     .option_1:
(1)  233/    392A : 4BF8 D406           		lea	(RAM_GemaArg0).w,a5
(1)  234/    392E : 3E2E 0004           		move.w	on_press(a6),d7
(1)  235/    3932 : 0807 0007           		btst	#bitJoyStart,d7
(1)  236/    3936 : 671E                		beq.s	.option1_args
(1)  237/    3938 : 301D                		move.w	(a5)+,d0
(1)  238/    393A : 321D                		move.w	(a5)+,d1
(1)  239/    393C : 341D                		move.w	(a5)+,d2
(1)  240/    393E : 6100 C9C2           		bsr	gemaPlayTrack
(1)  241/    3942 : 3038 D408           		move.w	(RAM_GemaArg1).w,d0
(1)  242/    3946 : 3200                		move.w	d0,d1
(1)  243/    3948 : D241                		add.w	d1,d1
(1)  244/    394A : 41FA 0120           		lea	.extnal_beats(pc),a0
(1)  245/    394E : 3030 1000           		move.w	(a0,d1.w),d0
(1)  246/    3952 : 6000 CA22           		bra	gemaSetBeats
(1)  247/    3956 :                     ; 		bra.s	.show_me
(1)  248/    3956 :                     .option1_args:
(1)  249/    3956 : 3E2E 0002           		move.w	on_hold(a6),d7
(1)  250/    395A : 3C07                		move.w	d7,d6
(1)  251/    395C : 0246 0070           		andi.w	#JoyA+JoyB+JoyC,d6
(1)  252/    3960 : 67C6                		beq.s	.no_press
(1)  253/    3962 : 0807 0004           		btst	#bitJoyB,d7
(1)  254/    3966 : 6704                		beq.s	.d2_opt
(1)  255/    3968 : DAFC 0002           		adda	#2,a5
(1)  256/    396C :                     .d2_opt:
(1)  257/    396C : 0807 0005           		btst	#bitJoyC,d7
(1)  258/    3970 : 6704                		beq.s	.d3_opt
(1)  259/    3972 : DAFC 0004           		adda	#4,a5
(1)  260/    3976 :                     .d3_opt:
(1)  261/    3976 : 3E2E 0004           		move.w	on_press(a6),d7
(1)  262/    397A : 0807 0003           		btst	#bitJoyRight,d7
(1)  263/    397E : 6706                		beq.s	.op1_right
(1)  264/    3980 : 5255                		addq.w	#1,(a5)
(1)  265/    3982 : 6000 FF66           		bra	.show_me
(1)  266/    3986 :                     .op1_right:
(1)  267/    3986 : 0807 0002           		btst	#bitJoyLeft,d7
(1)  268/    398A : 6706                		beq.s	.op1_left
(1)  269/    398C : 5355                		subq.w	#1,(a5)
(1)  270/    398E : 6000 FF5A           		bra	.show_me
(1)  271/    3992 :                     .op1_left:
(1)  272/    3992 : 3E2E 0002           		move.w	on_hold(a6),d7
(1)  273/    3996 : 0807 0000           		btst	#bitJoyUp,d7
(1)  274/    399A : 6706                		beq.s	.op1_down
(1)  275/    399C : 5255                		addq.w	#1,(a5)
(1)  276/    399E : 6000 FF4A           		bra	.show_me
(1)  277/    39A2 :                     .op1_down:
(1)  278/    39A2 : 0807 0001           		btst	#bitJoyDown,d7
(1)  279/    39A6 : 6706                		beq.s	.op1_up
(1)  280/    39A8 : 5355                		subq.w	#1,(a5)
(1)  281/    39AA : 6000 FF3E           		bra	.show_me
(1)  282/    39AE :                     .op1_up:
(1)  283/    39AE :                     
(1)  284/    39AE : 4E75                		rts
(1)  285/    39B0 :                     
(1)  286/    39B0 :                     ; ------------------------------------------------------
(1)  287/    39B0 :                     ; OPTION 2
(1)  288/    39B0 :                     ; ------------------------------------------------------
(1)  289/    39B0 :                     
(1)  290/    39B0 :                     .option_2:
(1)  291/    39B0 : 4BF8 D406           		lea	(RAM_GemaArg0).w,a5
(1)  292/    39B4 : 3E2E 0004           		move.w	on_press(a6),d7
(1)  293/    39B8 : 0807 0007           		btst	#bitJoyStart,d7
(1)  294/    39BC : 6798                		beq.s	.option1_args
(1)  295/    39BE : 301D                		move.w	(a5)+,d0
(1)  296/    39C0 : 321D                		move.w	(a5)+,d1
(1)  297/    39C2 : 6000 C954           		bra	gemaStopTrack
(1)  298/    39C6 :                     
(1)  299/    39C6 :                     ; ------------------------------------------------------
(1)  300/    39C6 :                     ; OPTION 3
(1)  301/    39C6 :                     ; ------------------------------------------------------
(1)  302/    39C6 :                     
(1)  303/    39C6 :                     .option_3:
(1)  304/    39C6 : 4BF8 D40C           		lea	(RAM_GemaArg3).w,a5
(1)  305/    39CA : 3E2E 0004           		move.w	on_press(a6),d7
(1)  306/    39CE : 0807 0007           		btst	#bitJoyStart,d7
(1)  307/    39D2 : 6782                		beq	.option1_args
(1)  308/    39D4 : 301D                		move.w	(a5)+,d0
(1)  309/    39D6 : 321D                		move.w	(a5)+,d1
(1)  310/    39D8 : 6000 C968           		bra	gemaFadeTrack
(1)  311/    39DC :                     
(1)  312/    39DC :                     ; ------------------------------------------------------
(1)  313/    39DC :                     ; OPTION 4
(1)  314/    39DC :                     ; ------------------------------------------------------
(1)  315/    39DC :                     
(1)  316/    39DC :                     .option_4:
(1)  317/    39DC : 4BF8 D40C           		lea	(RAM_GemaArg3).w,a5
(1)  318/    39E0 : 3E2E 0004           		move.w	on_press(a6),d7
(1)  319/    39E4 : 0807 0007           		btst	#bitJoyStart,d7
(1)  320/    39E8 : 6700 FF6C           		beq	.option1_args
(1)  321/    39EC : 301D                		move.w	(a5)+,d0
(1)  322/    39EE : 321D                		move.w	(a5)+,d1
(1)  323/    39F0 : 6000 C968           		bra	gemaSetTrackVol
(1)  324/    39F4 :                     
(1)  325/    39F4 :                     ; ------------------------------------------------------
(1)  326/    39F4 :                     ; OPTION 5
(1)  327/    39F4 :                     ; ------------------------------------------------------
(1)  328/    39F4 :                     
(1)  329/    39F4 :                     .option_5:
(1)  330/    39F4 : 3E2E 0004           		move.w	on_press(a6),d7
(1)  331/    39F8 : 0807 0007           		btst	#bitJoyStart,d7
(1)  332/    39FC : 6708                		beq.s	.no_press2
(1)  333/    39FE : 6100 FEEA           		bsr	.show_me
(1)  334/    3A02 : 6000 C928           		bra	gemaStopAll
(1)  335/    3A06 :                     .no_press2:
(1)  336/    3A06 : 4E75                		rts
(1)  337/    3A08 :                     
(1)  338/    3A08 :                     ; ------------------------------------------------------
(1)  339/    3A08 :                     ; OPTION 6
(1)  340/    3A08 :                     ; ------------------------------------------------------
(1)  341/    3A08 :                     
(1)  342/    3A08 :                     .option_6:
(1)  343/    3A08 : 4BF8 D412           		lea	(RAM_GemaArg6).w,a5
(1)  344/    3A0C : 3E2E 0002           		move.w	on_hold(a6),d7
(1)  345/    3A10 : 0247 0010           		andi.w	#JoyB,d7
(1)  346/    3A14 : 67F0                		beq.s	.no_press2
(1)  347/    3A16 : 3E2E 0004           		move.w	on_press(a6),d7
(1)  348/    3A1A : 0807 0003           		btst	#bitJoyRight,d7
(1)  349/    3A1E : 6704                		beq.s	.op2_right
(1)  350/    3A20 : 5255                		addq.w	#1,(a5)
(1)  351/    3A22 : 602C                		bra	.show_me_2
(1)  352/    3A24 :                     .op2_right:
(1)  353/    3A24 : 0807 0002           		btst	#bitJoyLeft,d7
(1)  354/    3A28 : 6704                		beq.s	.op2_left
(1)  355/    3A2A : 5355                		subq.w	#1,(a5)
(1)  356/    3A2C : 6122                		bsr	.show_me_2
(1)  357/    3A2E :                     .op2_left:
(1)  358/    3A2E : 3E2E 0002           		move.w	on_hold(a6),d7
(1)  359/    3A32 : 0807 0001           		btst	#bitJoyDown,d7
(1)  360/    3A36 : 6704                		beq.s	.op2_down
(1)  361/    3A38 : 5255                		addq.w	#1,(a5)
(1)  362/    3A3A : 6114                		bsr	.show_me_2
(1)  363/    3A3C :                     .op2_down:
(1)  364/    3A3C : 0807 0000           		btst	#bitJoyUp,d7
(1)  365/    3A40 : 6704                		beq.s	.op2_up
(1)  366/    3A42 : 5355                		subq.w	#1,(a5)
(1)  367/    3A44 : 610A                		bsr	.show_me_2
(1)  368/    3A46 :                     .op2_up:
(1)  369/    3A46 : 3E2E 0004           		move.w	on_press(a6),d7
(1)  370/    3A4A : 0807 0007           		btst	#bitJoyStart,d7
(1)  371/    3A4E : 67B6                		beq.s	.no_press2
(1)  372/    3A50 :                     .show_me_2:
(1)  373/    3A50 : 6100 FE98           		bsr	.show_me
(1)  374/    3A54 : 3015                		move.w	(a5),d0
(1)  375/    3A56 : 6000 C91E           		bra	gemaSetBeats
(1)  376/    3A5A :                     
(1)  377/    3A5A :                     ; ------------------------------------------------------
(1)  378/    3A5A :                     ; OPTION 7
(1)  379/    3A5A :                     ; ------------------------------------------------------
(1)  380/    3A5A :                     
(1)  381/    3A5A :                     .option_7:
(1)  382/    3A5A : 3E2E 0004           		move.w	on_press(a6),d7
(1)  383/    3A5E : 0807 0007           		btst	#bitJoyStart,d7
(1)  384/    3A62 : 67A2                		beq.s	.no_press2
(1)  385/    3A64 : 31FC FFFF C458      		move.w	#-1,(RAM_ScreenMode).w	; risky but whatever.
(1)  386/    3A6A : 4E75                		rts
(1)  387/    3A6C :                     
(1)  388/    3A6C :                     ; ------------------------------------------------------
(1)  389/    3A6C :                     ; EXTERNAL BEATS FOR EACH TRACK
(1)  390/    3A6C :                     ; ------------------------------------------------------
(1)  391/    3A6C :                     
(1)  392/    3A6C :                     .extnal_beats:
(1)  393/    3A6C : 00D6                	dc.w 214
(1)  394/    3A6E : 00D6                	dc.w 214
(1)  395/    3A70 : 00E8                	dc.w 200+32
(1)  396/    3A72 : 00E8                	dc.w 200+32
(1)  397/    3A74 : 00E8                	dc.w 200+32
(1)  398/    3A76 : 00CC                	dc.w 200+4
(1)  399/    3A78 : 00E8                	dc.w 200+32
(1)  400/    3A7A : 00E8                	dc.w 200+32
(1)  401/    3A7C : 00E8                	dc.w 200+32
(1)  402/    3A7E : 00E8                	dc.w 200+32
(1)  403/    3A80 : 00E8                	dc.w 200+32
(1)  404/    3A82 : 00E8                	dc.w 200+32
(1)  405/    3A84 : 00E8                	dc.w 200+32
(1)  406/    3A86 : 00E8                	dc.w 200+32
(1)  407/    3A88 : 00E8                	dc.w 200+32
(1)  408/    3A8A : 00E8                	dc.w 200+32
(1)  409/    3A8C : 00E8                	dc.w 200+32
(1)  410/    3A8E : 00E8                	dc.w 200+32
(1)  411/    3A90 : 00E8                	dc.w 200+32
(1)  412/    3A92 : 00E8                	dc.w 200+32
(1)  413/    3A94 : 00E8                	dc.w 200+32
(1)  414/    3A96 : 00E8                	dc.w 200+32
(1)  415/    3A98 :                     
(1)  416/    3A98 :                     ; ====================================================================
(1)  417/    3A98 :                     ; ------------------------------------------------------
(1)  418/    3A98 :                     ; DATA assets locations for 68K and SH2
(1)  419/    3A98 :                     ; ------------------------------------------------------
(1)  420/    3A98 :                     
(1)  421/    3A98 :                     file_mddata_def:
(1)  422/    3A98 : 4441 5441 424E      		dc.b "DATABNKD.BIN",0		; CD Filename
             3A9E : 4B44 2E42 494E 00 
(1)  423/    3AA5 :                     		align 2
(1)  424/    3AA6 :                     pointr_marsdata_def:
(1)  425/    3AA6 : 0004 2000           		dc.l MARSDATA_SCREEN01		; 32X Cartridge point
(1)  426/    3AAA : 4D41 5253 445F      		dc.b "MARSD_01.BIN",0		; CD Filename
             3AB0 : 3031 2E42 494E 00 
(1)  427/    3AB7 :                     		align 2
(1)  428/    3AB8 :                     
(1)  429/    3AB8 :                     ; ====================================================================
(1)  430/    3AB8 :                     ; ------------------------------------------------------
(1)  431/    3AB8 :                     ; Objects
(1)  432/    3AB8 :                     ; ------------------------------------------------------
(1)  433/    3AB8 :                     
(1)  434/    3AB8 :                     ; ; --------------------------------------------------
(1)  435/    3AB8 :                     ; ; Mikami
(1)  436/    3AB8 :                     ; ; --------------------------------------------------
(1)  437/    3AB8 :                     ;
(1)  438/    3AB8 :                     ; Object_Mikami:
(1)  439/    3AB8 :                     ; 		moveq	#0,d0
(1)  440/    3AB8 :                     ; 		move.b	obj_index(a6),d0
(1)  441/    3AB8 :                     ; 		add.w	d0,d0
(1)  442/    3AB8 :                     ; 		move.w	.list(pc,d0.w),d1
(1)  443/    3AB8 :                     ; 		jmp	.list(pc,d1.w)
(1)  444/    3AB8 :                     ; ; ----------------------------------------------
(1)  445/    3AB8 :                     ; .list:		dc.w .init-.list
(1)  446/    3AB8 :                     ; 		dc.w .main-.list
(1)  447/    3AB8 :                     ; ; ----------------------------------------------
(1)  448/    3AB8 :                     ; .init:
(1)  449/    3AB8 :                     ; 		move.b	#1,obj_index(a6)
(1)  450/    3AB8 :                     ; 		move.l	#objMap_Mikami,obj_map(a6)
(1)  451/    3AB8 :                     ; 		move.l	#objDma_Mikami,obj_dma(a6)
(1)  452/    3AB8 :                     ; 		move.w	#setVram_Mikami|$2000,obj_vram(a6)
(1)  453/    3AB8 :                     ; 		bclr	#bitobj_Mars,obj_set(a6)	; Genesis object
(1)  454/    3AB8 :                     ; 		move.w	#(320/2)+48,obj_x(a6)
(1)  455/    3AB8 :                     ; 		move.w	#(224/2)+64,obj_y(a6)
(1)  456/    3AB8 :                     ; 		clr.w	obj_frame(a6)
(1)  457/    3AB8 :                     ; 		bsr	object_ResetAnim
(1)  458/    3AB8 :                     ; 		bset	#0,obj_status(a6)
(1)  459/    3AB8 :                     ; 		bset	#bitobj_flipH,obj_set(a6)
(1)  460/    3AB8 :                     ;
(1)  461/    3AB8 :                     ; ; ----------------------------------------------
(1)  462/    3AB8 :                     ; .main:
(1)  463/    3AB8 :                     ; 		lea	(Controller_2),a3
(1)  464/    3AB8 :                     ; 		btst	#0,obj_status(a6)
(1)  465/    3AB8 :                     ; 		beq.s	.no_fallspd
(1)  466/    3AB8 :                     ; 		add.w	#$40,obj_y_spd(a6)
(1)  467/    3AB8 :                     ; .no_fallspd:
(1)  468/    3AB8 :                     ;
(1)  469/    3AB8 :                     ; ; .fake_col_c:
(1)  470/    3AB8 :                     ; 		move.w	on_press(a3),d7
(1)  471/    3AB8 :                     ; 		btst	#bitJoyC,d7
(1)  472/    3AB8 :                     ; 		beq.s	.fake_jump
(1)  473/    3AB8 :                     ; 		btst	#0,obj_status(a6)
(1)  474/    3AB8 :                     ; 		bne.s	.fake_jump
(1)  475/    3AB8 :                     ; 		move.w	#-$500,obj_y_spd(a6)
(1)  476/    3AB8 :                     ; 		move.b	#2,obj_anim_id(a6)
(1)  477/    3AB8 :                     ; 		bset	#0,obj_status(a6)
(1)  478/    3AB8 :                     ;
(1)  479/    3AB8 :                     ; 		moveq	#$0F,d0
(1)  480/    3AB8 :                     ; 		moveq	#1,d1
(1)  481/    3AB8 :                     ; 		bsr	gemaPlayFromBlk
(1)  482/    3AB8 :                     ;
(1)  483/    3AB8 :                     ; .fake_jump:
(1)  484/    3AB8 :                     ; 		move.w	on_press(a3),d7
(1)  485/    3AB8 :                     ; 		btst	#bitJoyB,d7
(1)  486/    3AB8 :                     ; 		beq.s	.no_slash
(1)  487/    3AB8 :                     ; 		tst.w	obj_y_spd(a6)
(1)  488/    3AB8 :                     ; 		bne.s	.no_slash
(1)  489/    3AB8 :                     ; 		clr.w	obj_anim_indx(a6)
(1)  490/    3AB8 :                     ; 		move.b	#4,obj_anim_id(a6)
(1)  491/    3AB8 :                     ; 		move.w	#$10,obj_ram+2(a6)
(1)  492/    3AB8 :                     ;
(1)  493/    3AB8 :                     ; 		moveq	#$0F,d0
(1)  494/    3AB8 :                     ; 		moveq	#0,d1
(1)  495/    3AB8 :                     ; 		bsr	gemaPlayFromBlk
(1)  496/    3AB8 :                     ;
(1)  497/    3AB8 :                     ; .no_slash:
(1)  498/    3AB8 :                     ; 		clr.w	obj_x_spd(a6)
(1)  499/    3AB8 :                     ;
(1)  500/    3AB8 :                     ; 		moveq	#0,d0
(1)  501/    3AB8 :                     ; 		moveq	#0,d1
(1)  502/    3AB8 :                     ; 		move.w	on_hold(a3),d7
(1)  503/    3AB8 :                     ; 		move.w	d7,d6
(1)  504/    3AB8 :                     ; 		andi.w	#JoyLeft+JoyRight,d6
(1)  505/    3AB8 :                     ; 		beq.s	.move_mika
(1)  506/    3AB8 :                     ; 		clr.w	obj_ram+2(a6)
(1)  507/    3AB8 :                     ; 		move.w	#$180,d6
(1)  508/    3AB8 :                     ; 		btst	#bitJoyRight,d7
(1)  509/    3AB8 :                     ; 		beq.s	.no_l
(1)  510/    3AB8 :                     ; 		move.w	d6,obj_x_spd(a6)
(1)  511/    3AB8 :                     ; .no_l
(1)  512/    3AB8 :                     ; 		neg.w	d6
(1)  513/    3AB8 :                     ; 		btst	#bitJoyLeft,d7
(1)  514/    3AB8 :                     ; 		beq.s	.move_mika
(1)  515/    3AB8 :                     ; 		move.w	d6,obj_x_spd(a6)
(1)  516/    3AB8 :                     ; .move_mika:
(1)  517/    3AB8 :                     ;
(1)  518/    3AB8 :                     ;
(1)  519/    3AB8 :                     ; 		moveq	#0,d6
(1)  520/    3AB8 :                     ; 		tst.w	obj_x_spd(a6)
(1)  521/    3AB8 :                     ; 		beq.s	.r_spd
(1)  522/    3AB8 :                     ; 		moveq	#1,d6
(1)  523/    3AB8 :                     ; 		move.b	obj_set(a6),d7
(1)  524/    3AB8 :                     ; 		bclr	#bitobj_flipH,d7
(1)  525/    3AB8 :                     ; 		tst.w	obj_x_spd(a6)
(1)  526/    3AB8 :                     ; 		bpl.s	.r_flip
(1)  527/    3AB8 :                     ; 		bset	#bitobj_flipH,d7
(1)  528/    3AB8 :                     ; .r_flip:
(1)  529/    3AB8 :                     ; 		move.b	d7,obj_set(a6)
(1)  530/    3AB8 :                     ; .r_spd:
(1)  531/    3AB8 :                     ;
(1)  532/    3AB8 :                     ; 		tst.w	obj_ram+2(a6)
(1)  533/    3AB8 :                     ; 		beq.s	.free_anim
(1)  534/    3AB8 :                     ; 		subi.w	#1,obj_ram+2(a6)
(1)  535/    3AB8 :                     ; 		bne.s	.no_anim
(1)  536/    3AB8 :                     ; .free_anim:
(1)  537/    3AB8 :                     ; 		btst	#0,obj_status(a6)
(1)  538/    3AB8 :                     ; 		bne.s	.no_anim
(1)  539/    3AB8 :                     ; 		tst.w	obj_y_spd(a6)
(1)  540/    3AB8 :                     ; 		bmi.s	.is_jumpin
(1)  541/    3AB8 :                     ; 		move.b	d6,obj_anim_id(a6)
(1)  542/    3AB8 :                     ; .is_jumpin:
(1)  543/    3AB8 :                     ; 		tst.w	obj_y_spd(a6)
(1)  544/    3AB8 :                     ; 		beq.s	.no_anim
(1)  545/    3AB8 :                     ; 		move.b	#3,obj_anim_id(a6)
(1)  546/    3AB8 :                     ; .no_anim:
(1)  547/    3AB8 :                     ; 		bsr	object_Speed
(1)  548/    3AB8 :                     ;
(1)  549/    3AB8 :                     ; 		move.w	#(224-16)-32,d7
(1)  550/    3AB8 :                     ; 		move.w	obj_y(a6),d0
(1)  551/    3AB8 :                     ; 		cmp.w	d7,d0
(1)  552/    3AB8 :                     ; 		blt.s	.fake_col
(1)  553/    3AB8 :                     ; 		clr.w	obj_y_spd(a6)
(1)  554/    3AB8 :                     ; 		andi.w	#-$10,obj_y(a6)
(1)  555/    3AB8 :                     ; 		bclr	#0,obj_status(a6)
(1)  556/    3AB8 :                     ; .fake_col:
(1)  557/    3AB8 :                     ;
(1)  558/    3AB8 :                     ; ; 		move.w	(Controller_2+on_press),d7
(1)  559/    3AB8 :                     ; ; 		btst	#bitClickM,d7
(1)  560/    3AB8 :                     ; ; 		beq.s	.no_reset
(1)  561/    3AB8 :                     ; ; 		move.w	#320/2,obj_x(a6)
(1)  562/    3AB8 :                     ; ; 		move.w	#224/2,obj_y(a6)
(1)  563/    3AB8 :                     ; ; .no_reset:
(1)  564/    3AB8 :                     ; 		lea	.anim_data(pc),a0
(1)  565/    3AB8 :                     ; 		bsr	object_Animate
(1)  566/    3AB8 :                     ; 		bra	object_Display
(1)  567/    3AB8 :                     ;
(1)  568/    3AB8 :                     ; ; ----------------------------------------------
(1)  569/    3AB8 :                     ;
(1)  570/    3AB8 :                     ; .anim_data:
(1)  571/    3AB8 :                     ; 		dc.w .anim_stand-.anim_data
(1)  572/    3AB8 :                     ; 		dc.w .anim_move-.anim_data
(1)  573/    3AB8 :                     ; 		dc.w .anim_jump-.anim_data
(1)  574/    3AB8 :                     ; 		dc.w .anim_fall-.anim_data
(1)  575/    3AB8 :                     ; 		dc.w .anim_slash-.anim_data
(1)  576/    3AB8 :                     ; .anim_stand:
(1)  577/    3AB8 :                     ; 		dc.w 6
(1)  578/    3AB8 :                     ; 		dc.w 0,-1
(1)  579/    3AB8 :                     ; 		align 2
(1)  580/    3AB8 :                     ; .anim_move:
(1)  581/    3AB8 :                     ; 		dc.w 5
(1)  582/    3AB8 :                     ; 		dc.w 2,3,4,5,6,7,8,-3,1
(1)  583/    3AB8 :                     ; 		align 2
(1)  584/    3AB8 :                     ; .anim_jump:
(1)  585/    3AB8 :                     ; 		dc.w 5
(1)  586/    3AB8 :                     ; 		dc.w 10,11,12,-3,2
(1)  587/    3AB8 :                     ; 		align 2
(1)  588/    3AB8 :                     ; .anim_fall:
(1)  589/    3AB8 :                     ; 		dc.w 5
(1)  590/    3AB8 :                     ; 		dc.w 11,12,-3,1
(1)  591/    3AB8 :                     ; 		align 2
(1)  592/    3AB8 :                     ; .anim_slash:
(1)  593/    3AB8 :                     ; 		dc.w 1
(1)  594/    3AB8 :                     ; 		dc.w 14,15,16,17,-2
(1)  595/    3AB8 :                     ; 		align 2
(1)  596/    3AB8 :                     ;
(1)  597/    3AB8 :                     ; --------------------------------------------------
(1)  598/    3AB8 :                     ; Sisi
(1)  599/    3AB8 :                     ; --------------------------------------------------
(1)  600/    3AB8 :                     
(1)  601/    3AB8 :                     Object_Sisi:
(1)  602/    3AB8 : 7000                		moveq	#0,d0
(1)  603/    3ABA : 102E 0021           		move.b	obj_index(a6),d0
(1)  604/    3ABE : D040                		add.w	d0,d0
(1)  605/    3AC0 : 323B 0006           		move.w	.list(pc,d0.w),d1
(1)  606/    3AC4 : 4EFB 1002           		jmp	.list(pc,d1.w)
(1)  607/    3AC8 :                     ; ----------------------------------------------
(1)  608/    3AC8 : 0004                .list:		dc.w .init-.list
(1)  609/    3ACA : 0020                		dc.w .main-.list
(1)  610/    3ACC :                     ; ----------------------------------------------
(1)  611/    3ACC :                     .init:
(1)  612/    3ACC : 1D7C 0001 0021      		move.b	#1,obj_index(a6)
(1)  613/    3AD2 : 2D7C 0000 5A94      		move.l	#objMap_Sisi,obj_map(a6)
             3AD8 : 000C             
(1)  614/    3ADA : 3D7C 2480 0014      		move.w	#setVram_Sisi|$2000,obj_vram(a6)
(1)  615/    3AE0 :                     ; 		move.w	#320/2,obj_x(a6)
(1)  616/    3AE0 :                     ; 		move.w	#224/2,obj_y(a6)
(1)  617/    3AE0 : 426E 001C           		clr.w	obj_frame(a6)
(1)  618/    3AE4 : 6100 D46E           		bsr	object_ResetAnim
(1)  619/    3AE8 :                     
(1)  620/    3AE8 :                     ; ----------------------------------------------
(1)  621/    3AE8 :                     .main:
(1)  622/    3AE8 :                     ; 		move.w	obj_ram(a6),d0
(1)  623/    3AE8 :                     ; 		move.w	obj_ram+2(a6),d1
(1)  624/    3AE8 :                     
(1)  625/    3AE8 :                     
(1)  626/    3AE8 : 7000                		moveq	#0,d0
(1)  627/    3AEA :                     
(1)  628/    3AEA : 3238 D404           		move.w	(RAM_CurrPick).w,d1
(1)  629/    3AEE : E749                		lsl.w	#3,d1
(1)  630/    3AF0 :                     
(1)  631/    3AF0 : 0640 0018           		addi.w	#$18,d0
(1)  632/    3AF4 : 0641 0020           		addi.w	#$20,d1
(1)  633/    3AF8 : 3D40 0004           		move.w	d0,obj_x(a6)
(1)  634/    3AFC : 3D41 0008           		move.w	d1,obj_y(a6)
(1)  635/    3B00 :                     
(1)  636/    3B00 :                     ; 		lea	(RAM_Objects),a0
(1)  637/    3B00 :                     ; 		cmp.l	#Object_Mikami,obj_code(a0)
(1)  638/    3B00 :                     ; 		bne.s	.dont_link
(1)  639/    3B00 :                     ; 		move.w	obj_ram+2(a6),d7
(1)  640/    3B00 :                     ; 		cmp.w	#24<<1,d7
(1)  641/    3B00 :                     ; 		bge.s	.dont_incr
(1)  642/    3B00 :                     ; 		add.w	#2,d7
(1)  643/    3B00 :                     ; .dont_incr:
(1)  644/    3B00 :                     ; 		move.w	d7,obj_ram+2(a6)
(1)  645/    3B00 :                     ;
(1)  646/    3B00 :                     ; 		move.w	obj_x(a0),d7
(1)  647/    3B00 :                     ; 		move.w	obj_y(a0),d6
(1)  648/    3B00 :                     ; 		move.w	#24,d5
(1)  649/    3B00 :                     ; 		sub.w	d5,d6
(1)  650/    3B00 :                     ; 		move.w	obj_ram(a6),d0
(1)  651/    3B00 :                     ; 		moveq	#4,d1
(1)  652/    3B00 :                     ; 		bsr	System_SineWave
(1)  653/    3B00 :                     ; 		asr.w	#8,d2
(1)  654/    3B00 :                     ; 		add.w	d2,d6
(1)  655/    3B00 :                     ; 		moveq	#5,d1
(1)  656/    3B00 :                     ; 		bsr	System_SineWave_Cos
(1)  657/    3B00 :                     ; 		asr.w	#8,d2
(1)  658/    3B00 :                     ; 		add.w	d2,d7
(1)  659/    3B00 :                     ;
(1)  660/    3B00 :                     ; 		move.b	obj_set(a6),d0
(1)  661/    3B00 :                     ; 		move.b	obj_set(a0),d1
(1)  662/    3B00 :                     ; 		eor.w	d1,d0
(1)  663/    3B00 :                     ; 		andi.w	#1,d0
(1)  664/    3B00 :                     ; 		beq.s	.same_h
(1)  665/    3B00 :                     ; 		clr.w	obj_ram+2(a6)
(1)  666/    3B00 :                     ; .same_h:
(1)  667/    3B00 :                     ; 		move.w	obj_ram+2(a6),d4
(1)  668/    3B00 :                     ; 		bclr	#bitobj_flipH,obj_set(a6)
(1)  669/    3B00 :                     ; 		btst	#bitobj_flipH,obj_set(a0)
(1)  670/    3B00 :                     ; 		beq.s	.dont_flipx
(1)  671/    3B00 :                     ; 		neg.w	d4
(1)  672/    3B00 :                     ; 		bset	#bitobj_flipH,obj_set(a6)
(1)  673/    3B00 :                     ; .dont_flipx:
(1)  674/    3B00 :                     ; 		lsr.w	#1,d4
(1)  675/    3B00 :                     ; 		add.w	d4,d7
(1)  676/    3B00 :                     ; 		move.w	d6,obj_y(a6)
(1)  677/    3B00 :                     ; 		move.w	d7,obj_x(a6)
(1)  678/    3B00 :                     ; 		add.w	#4,obj_ram(a6)
(1)  679/    3B00 :                     
(1)  680/    3B00 :                     .dont_link:
(1)  681/    3B00 : 41FA 000A           		lea	.anim_data(pc),a0
(1)  682/    3B04 : 6100 D3BA           		bsr	object_Animate
(1)  683/    3B08 : 6000 D30A           		bra	object_Display
(1)  684/    3B0C :                     
(1)  685/    3B0C :                     ; ----------------------------------------------
(1)  686/    3B0C :                     
(1)  687/    3B0C :                     .anim_data:
(1)  688/    3B0C : 0008                		dc.w .anim_00-.anim_data
(1)  689/    3B0E : 0008                		dc.w .anim_00-.anim_data
(1)  690/    3B10 : 0008                		dc.w .anim_00-.anim_data
(1)  691/    3B12 : 0008                		dc.w .anim_00-.anim_data
(1)  692/    3B14 :                     .anim_00:
(1)  693/    3B14 : 0008                		dc.w 8
(1)  694/    3B16 : 0000 0001 0002      		dc.w 0,1,2,1
             3B1C : 0001             
(1)  695/    3B1E : FFFE                		dc.w -2
(1)  696/    3B20 :                     		align 2
(1)  697/    3B20 :                     ;
(1)  698/    3B20 :                     ; ; --------------------------------------------------
(1)  699/    3B20 :                     ; ; Ball
(1)  700/    3B20 :                     ; ; --------------------------------------------------
(1)  701/    3B20 :                     ;
(1)  702/    3B20 :                     ; Object_ball:
(1)  703/    3B20 :                     ; 		moveq	#0,d0
(1)  704/    3B20 :                     ; 		move.b	obj_index(a6),d0
(1)  705/    3B20 :                     ; 		add.w	d0,d0
(1)  706/    3B20 :                     ; 		move.w	.list(pc,d0.w),d1
(1)  707/    3B20 :                     ; 		jmp	.list(pc,d1.w)
(1)  708/    3B20 :                     ; ; ----------------------------------------------
(1)  709/    3B20 :                     ; .list:		dc.w .init-.list
(1)  710/    3B20 :                     ; 		dc.w .main-.list
(1)  711/    3B20 :                     ; ; ----------------------------------------------
(1)  712/    3B20 :                     ; .init:
(1)  713/    3B20 :                     ; 		move.b	#1,obj_index(a6)
(1)  714/    3B20 :                     ; 		move.l	#objMap_Sisi,obj_map(a6)
(1)  715/    3B20 :                     ; 		move.l	#0,obj_dma(a6)
(1)  716/    3B20 :                     ; 		move.w	#setVram_Sisi|$0000,obj_vram(a6)
(1)  717/    3B20 :                     ; 		bclr	#bitobj_Mars,obj_set(a6)	; Genesis object
(1)  718/    3B20 :                     ; 		move.w	#320/2,obj_x(a6)
(1)  719/    3B20 :                     ; 		move.w	#224/2,obj_y(a6)
(1)  720/    3B20 :                     ; 		clr.w	obj_frame(a6)
(1)  721/    3B20 :                     ; 		bsr	object_ResetAnim
(1)  722/    3B20 :                     ;
(1)  723/    3B20 :                     ; 		move.w	#$180,obj_x_spd(a6)
(1)  724/    3B20 :                     ; 		move.w	#$180,obj_y_spd(a6)
(1)  725/    3B20 :                     ;
(1)  726/    3B20 :                     ; ; ----------------------------------------------
(1)  727/    3B20 :                     ; .main:
(1)  728/    3B20 :                     ; 		move.w	obj_x(a6),d0
(1)  729/    3B20 :                     ; 		move.w	obj_y(a6),d1
(1)  730/    3B20 :                     ; 		sub.w	#16,d0
(1)  731/    3B20 :                     ; 		sub.w	#16,d1
(1)  732/    3B20 :                     ; 		move.w	#320-32,d2
(1)  733/    3B20 :                     ; 		move.w	#(224-16)-32,d3
(1)  734/    3B20 :                     ;
(1)  735/    3B20 :                     ; 		tst.w	d1
(1)  736/    3B20 :                     ; 		bpl.s	.on_scrn_yu
(1)  737/    3B20 :                     ; 		neg.w	obj_y_spd(a6)
(1)  738/    3B20 :                     ; 		bsr	.playit
(1)  739/    3B20 :                     ; .on_scrn_yu:
(1)  740/    3B20 :                     ; 		cmp.w	d3,d1
(1)  741/    3B20 :                     ; 		blt.s	.on_scrn_yd
(1)  742/    3B20 :                     ; 		neg.w	obj_y_spd(a6)
(1)  743/    3B20 :                     ; 		bsr	.playit
(1)  744/    3B20 :                     ; .on_scrn_yd:
(1)  745/    3B20 :                     ;
(1)  746/    3B20 :                     ; 		tst.w	d0
(1)  747/    3B20 :                     ; 		bpl.s	.on_scrn_xu
(1)  748/    3B20 :                     ; 		neg.w	obj_x_spd(a6)
(1)  749/    3B20 :                     ; 		bsr.s	.playit
(1)  750/    3B20 :                     ; .on_scrn_xu:
(1)  751/    3B20 :                     ; 		cmp.w	d2,d0
(1)  752/    3B20 :                     ; 		blt.s	.on_scrn_xd
(1)  753/    3B20 :                     ; 		neg.w	obj_x_spd(a6)
(1)  754/    3B20 :                     ; 		bsr.s	.playit
(1)  755/    3B20 :                     ; .on_scrn_xd:
(1)  756/    3B20 :                     ;
(1)  757/    3B20 :                     ; 		bsr	object_Speed
(1)  758/    3B20 :                     ;
(1)  759/    3B20 :                     ; 		lea	.anim_data(pc),a0
(1)  760/    3B20 :                     ; 		bsr	object_Animate
(1)  761/    3B20 :                     ; 		bra	object_Display
(1)  762/    3B20 :                     ; .playit:
(1)  763/    3B20 :                     ; 		moveq	#$0F,d0
(1)  764/    3B20 :                     ; 		moveq	#2,d1
(1)  765/    3B20 :                     ; 		bra	gemaPlayFromBlk
(1)  766/    3B20 :                     ;
(1)  767/    3B20 :                     ; ; ----------------------------------------------
(1)  768/    3B20 :                     ;
(1)  769/    3B20 :                     ; .anim_data:
(1)  770/    3B20 :                     ; 		dc.w .anim_00-.anim_data
(1)  771/    3B20 :                     ; 		dc.w .anim_00-.anim_data
(1)  772/    3B20 :                     ; 		dc.w .anim_00-.anim_data
(1)  773/    3B20 :                     ; 		dc.w .anim_00-.anim_data
(1)  774/    3B20 :                     ; .anim_00:
(1)  775/    3B20 :                     ; 		dc.w 8
(1)  776/    3B20 :                     ; 		dc.w 0,1,2,1,-1
(1)  777/    3B20 :                     ; 		align 2
(1)  778/    3B20 :                     
(1)  779/    3B20 :                     ; ====================================================================
(1)  780/    3B20 :                     ; ------------------------------------------------------
(1)  781/    3B20 :                     ; Subroutines
(1)  782/    3B20 :                     ; ------------------------------------------------------
(1)  783/    3B20 :                     
(1)  784/    3B20 :                     ; ====================================================================
(1)  785/    3B20 :                     ; ------------------------------------------------------
(1)  786/    3B20 :                     ; Custom VBlank
(1)  787/    3B20 :                     ; ------------------------------------------------------
(1)  788/    3B20 :                     
(1)  789/    3B20 :                     ; ------------------------------------------------------
(1)  790/    3B20 :                     ; Custom HBlank
(1)  791/    3B20 :                     ; ------------------------------------------------------
(1)  792/    3B20 :                     
(1)  793/    3B20 :                     ; ====================================================================
(1)  794/    3B20 :                     ; ------------------------------------------------------
(1)  795/    3B20 :                     ; Small DATA section
(1)  796/    3B20 :                     ; ------------------------------------------------------
(1)  797/    3B20 :                     
(1)  798/    3B20 :                     PAL_TEST:
(1)  799/    3B20 :                     		binclude "game/screen_1/data/md/maps/test/md_pal.bin"
(1)  800/    3B3C :                     		align 2
(1)  801/    3B3C :                     
(1)  802/    3B3C :                     ; str_ShowPsg:	dc.b "\\w \\w \\w \\w",0
(1)  803/    3B3C :                     ; 		dc.l RAM_ChnlLinks,RAM_ChnlLinks+2,RAM_ChnlLinks+4,RAM_ChnlLinks+6
(1)  804/    3B3C :                     ; 		align 2
(1)  805/    3B3C :                     ; str_ShowFm:	dc.b "\\w \\w \\w \\w \\w \\w",0
(1)  806/    3B3C :                     ; 		dc.l RAM_ChnlLinks+8,RAM_ChnlLinks+10,RAM_ChnlLinks+12
(1)  807/    3B3C :                     ; 		dc.l RAM_ChnlLinks+14,RAM_ChnlLinks+16,RAM_ChnlLinks+18
(1)  808/    3B3C :                     ; 		align 2
(1)  809/    3B3C :                     ; str_ShowPcm:	dc.b "\\w \\w \\w \\w",$0A
(1)  810/    3B3C :                     ; 		dc.b "\\w \\w \\w \\w",0
(1)  811/    3B3C :                     ; 		dc.l RAM_ChnlLinks+20,RAM_ChnlLinks+22,RAM_ChnlLinks+24,RAM_ChnlLinks+26
(1)  812/    3B3C :                     ; 		dc.l RAM_ChnlLinks+28,RAM_ChnlLinks+30,RAM_ChnlLinks+32,RAM_ChnlLinks+34
(1)  813/    3B3C :                     ; 		align 2
(1)  814/    3B3C :                     ; str_ShowPwm:	dc.b "\\w \\w \\w \\w",$0A
(1)  815/    3B3C :                     ; 		dc.b "\\w \\w \\w",0
(1)  816/    3B3C :                     ; 		dc.l RAM_ChnlLinks+36,RAM_ChnlLinks+38,RAM_ChnlLinks+40,RAM_ChnlLinks+42
(1)  817/    3B3C :                     ; 		dc.l RAM_ChnlLinks+44,RAM_ChnlLinks+46,RAM_ChnlLinks+48,RAM_ChnlLinks+50
(1)  818/    3B3C :                     ; 		align 2
(1)  819/    3B3C :                     
(1)  820/    3B3C :                     str_TesterInit:
(1)  821/    3B3C : 4745 4D41 2F4E      		dc.b "GEMA/Nikona sound driver tester",$0A
             3B42 : 696B 6F6E 6120 
             3B48 : 736F 756E 6420 
             3B4E : 6472 6976 6572 
             3B54 : 2074 6573 7465 
             3B5A : 720A             
(1)  822/    3B5C : 2020 2020 2020      		dc.b "                \{DATE} \{TIME}",$0A
             3B62 : 2020 2020 2020 
             3B68 : 2020 2020 3033 
             3B6E : 2F32 342F 3230 
             3B74 : 3234 2030 353A 
             3B7A : 3435 3A30 3620 
             3B80 : 414D 0A          
(1)  823/    3B83 : 0A                  		dc.b $0A
(1)  824/    3B84 : 2020 2020 6765      		dc.b "    gemaTest          (A)  (B)  (C)",$0A
             3B8A : 6D61 5465 7374 
             3B90 : 2020 2020 2020 
             3B96 : 2020 2020 2841 
             3B9C : 2920 2028 4229 
             3BA2 : 2020 2843 290A    
(1)  825/    3BA8 : 2020 2020 6765      		dc.b "    gemaPlayTrack",$0A
             3BAE : 6D61 506C 6179 
             3BB4 : 5472 6163 6B0A    
(1)  826/    3BBA : 2020 2020 6765      		dc.b "    gemaStopTrack",$0A
             3BC0 : 6D61 5374 6F70 
             3BC6 : 5472 6163 6B0A    
(1)  827/    3BCC : 2020 2020 6765      		dc.b "    gemaFadeTrack",$0A
             3BD2 : 6D61 4661 6465 
             3BD8 : 5472 6163 6B0A    
(1)  828/    3BDE : 2020 2020 6765      		dc.b "    gemaSetTrackVol",$0A
             3BE4 : 6D61 5365 7454 
             3BEA : 7261 636B 566F 
             3BF0 : 6C0A             
(1)  829/    3BF2 : 2020 2020 6765      		dc.b "    gemaStopAll",$0A
             3BF8 : 6D61 5374 6F70 
             3BFE : 416C 6C0A          
(1)  830/    3C02 : 2020 2020 6765      		dc.b "    gemaSetBeats",$0A
             3C08 : 6D61 5365 7442 
             3C0E : 6561 7473 0A       
(1)  831/    3C13 : 2020 2020 2D2D      		dc.b "    --> EXIT"
             3C19 : 3E20 4558 4954    
(1)  832/    3C1F : 00                  		dc.b 0
(1)  833/    3C20 :                     		align 2
(1)  834/    3C20 : 5C77 205C 7720      str_ShowMe:	dc.b "\\w \\w \\w",$A,$A
             3C26 : 5C77 0A0A          
(1)  835/    3C2A : 5C77 205C 7720      		dc.b "\\w \\w \\w",$A,$A,$A
             3C30 : 5C77 0A0A 0A       
(1)  836/    3C35 : 5C77 00             		dc.b "\\w",0
(1)  837/    3C38 : FFFF D406 FFFF      		dc.l RAM_GemaArg0,RAM_GemaArg1,RAM_GemaArg2
             3C3E : D408 FFFF D40A    
(1)  838/    3C44 : FFFF D40C FFFF      		dc.l RAM_GemaArg3,RAM_GemaArg4,RAM_GemaArg5
             3C4A : D40E FFFF D410    
(1)  839/    3C50 : FFFF D412           		dc.l RAM_GemaArg6
(1)  840/    3C54 :                     		align 2
(1)  841/    3C54 :                     str_Info:
(1)  842/    3C54 : 5C6C 00             		dc.b "\\l",0
(1)  843/    3C57 : FFFF B8D4           		dc.l RAM_Framecount
(1)  844/    3C5B :                     		align 2
(1)  845/    3C5C :                     ; str_Notes:
(1)  846/    3C5C :                     ;  dc.b "---",0,"C#0",0,"D-0",0,"D#0",0,"E-0",0,"F-0",0,"F#0",0,"G-0",0,"G#0",0,"A-0",0,"A#0",0,"B-0",0
(1)  847/    3C5C :                     ;  dc.b "C-1",0,"C#1",0,"D-1",0,"D#1",0,"E-1",0,"F-1",0,"F#1",0,"G-1",0,"G#1",0,"A-1",0,"A#1",0,"B-1",0
(1)  848/    3C5C :                     ;  dc.b "C-2",0,"C#2",0,"D-2",0,"D#2",0,"E-2",0,"F-2",0,"F#2",0,"G-2",0,"G#2",0,"A-2",0,"A#2",0,"B-2",0
(1)  849/    3C5C :                     ;  dc.b "C-3",0,"C#3",0,"D-3",0,"D#3",0,"E-3",0,"F-3",0,"F#3",0,"G-3",0,"G#3",0,"A-3",0,"A#3",0,"B-3",0
(1)  850/    3C5C :                     ;  dc.b "C-4",0,"C#4",0,"D-4",0,"D#4",0,"E-4",0,"F-4",0,"F#4",0,"G-4",0,"G#4",0,"A-4",0,"A#4",0,"B-4",0
(1)  851/    3C5C :                     ;  dc.b "C-5",0,"C#5",0,"D-5",0,"D#5",0,"E-5",0,"F-5",0,"F#5",0,"G-5",0,"G#5",0,"A-5",0,"A#5",0,"B-5",0
(1)  852/    3C5C :                     ;  dc.b "C-6",0,"C#6",0,"D-6",0,"D#6",0,"E-6",0,"F-6",0,"F#6",0,"G-6",0,"G#6",0,"A-6",0,"A#6",0,"B-6",0
(1)  853/    3C5C :                     ;  dc.b "C-7",0,"C#7",0,"D-7",0,"D#7",0,"E-7",0,"F-7",0,"F#7",0,"G-7",0,"G#7",0,"A-7",0,"A#7",0,"B-7",0
(1)  854/    3C5C :                     ;  dc.b "C-8",0,"C#8",0,"D-8",0,"D#8",0,"E-8",0,"F-8",0,"F#8",0,"G-8",0,"G#8",0,"A-8",0,"A#8",0,"B-8",0
(1)  855/    3C5C :                     ;  dc.b "C-9",0,"C#9",0,"D-9",0,"D#9",0,"E-9",0,"F-9",0,"F#9",0,"G-9",0,"G#9",0,"A-9",0,"A#9",0,"B-9",0
(1)  856/    3C5C :                     ;  align 2
(1)  857/    3C5C :                     ; str_Notes_FM:
(1)  858/    3C5C :                     ;  dc.b "---",0
(1)  859/    3C5C :                     ;  dc.b "C-",0,0,"C#",0,0,"D-",0,0,"D#",0,0,"E-",0,0,"F-",0,0
(1)  860/    3C5C :                     ;  dc.b "F#",0,0,"G-",0,0,"G#",0,0,"A-",0,0,"A#",0,0,"B-",0,0
(1)  861/    3C5C :                     ;  align 2
(1)  862/    3C5C :                     ; str_Octv_FM:
(1)  863/    3C5C :                     ;  dc.b "0",0,"1",0,"2",0,"3",0,"4",0,"5",0,"6",0,"7",0
(1)  864/    3C5C :                     ;  align 2
(1)  865/    3C5C :                     
     369/    3C5C :                     mcscrn_e:
     369/    3C5C :                     ; Md_Screen00_e:
     369/    3C5C : =$3C5C               MD_SCREEN01_E label *
     370/    3C5C :                     
     371/    3C5C :                     ; ====================================================================
     372/    3C5C :                     ; ----------------------------------------------------------------
     373/    3C5C :                     ; DATA SECTION
     374/    3C5C :                     ; ----------------------------------------------------------------
     375/    3C5C :                     
     376/    3C5C :                     ; ====================================================================
     377/    3C5C :                     ; ----------------------------------------------------------------
     378/    3C5C :                     ; 68K DATA BANKs
     379/    3C5C :                     ;
     380/    3C5C :                     ; SEGA CD / CD32X:
     381/    3C5C :                     ; Stored in WORD-RAM pieces
     382/    3C5C :                     ; limited to 256KB 2M or 128KB 1M/1M (*UNTESTED*)
     383/    3C5C :                     ; ** WORD-RAM CANNOT BE USED IF USING ASIC STAMPS **
     384/    3C5C :                     ;
     385/    3C5C :                     ; SEGA 32X Cartridge:
     386/    3C5C :                     ; Limited to 1MB, bankswitchable if needed. (TODO bankswitching)
     387/    3C5C :                     ; ONLY 4 banks can be used, Bank 0 already uses the
     388/    3C5C :                     ; first 512KB for the code.
     389/    3C5C :                     ;
     390/    3C5C :                     ; To keep multi-porting limit your screen's data to 256KB
     391/    3C5C :                     ; ----------------------------------------------------------------
     392/    3C5C :                     
     393/    3C5C :                     ; --------------------------------------------------------
     394/    3C5C :                     ; DEFAULT BANK
     395/    3C5C :                     ;
     396/    3C5C :                     ; CD/CD32X:
     397/    3C5C :                     ; $200000 256KB (WORD-RAM)
     398/    3C5C :                     ;
     399/    3C5C :                     ; 32X:
     400/    3C5C :                     ; $900000 1MB (Bankswichable area)
     401/    3C5C :                     ;
     402/    3C5C :                     ; Usage:
     403/    3C5C :                     ; data_bkset LABEL_START,OPTION
     404/    3C5C :                     ; (add your includes and bincludes)
     405/    3C5C :                     ; data_bkend LABEL_START,LABEL_END,used_size
     406/    3C5C :                     ;
     407/    3C5C :                     ; OPTION (32X Cartridge ONLY):
     408/    3C5C :                     ;  0, Normal 32X $900000 bank
     409/    3C5C :                     ; -1, This bank is the first one
     410/    3C5C :                     ;
     411/    3C5C :                     ; This is ignored on other systems.
     412/    3C5C :                     ; --------------------------------------------------------
     413/    3C5C :                     
     414/    3C5C : (MACRO)              	data_bkset MCD_DBANK0,-1	; <-- note the -1
     414/    3C5C :                     ; MCD_DBANK0:
     414/    3C5C : =$3C5C               MCD_DBANK0 label *
     415/    3C5C :                     mdbank0:
     416/    3C5C :                     		include "game/screen_0/data_bank.asm"
(1)    1/    3C5C :                     ; ===========================================================================
(1)    2/    3C5C :                     ; ----------------------------------------------------------------
(1)    3/    3C5C :                     ; 68K SCREEN MODE DATA
(1)    4/    3C5C :                     ; for big stuff like maps, level, etc.
(1)    5/    3C5C :                     ;
(1)    6/    3C5C :                     ; For Genesis graphics use data_dma.asm
(1)    7/    3C5C :                     ; and for 32X graphics use data_mgfx.asm
(1)    8/    3C5C :                     ;
(1)    9/    3C5C :                     ; For 32X, CD32X:
(1)   10/    3C5C :                     ; THE 256-COLOR PALETTES GO HERE.
(1)   11/    3C5C :                     ; ----------------------------------------------------------------
(1)   12/    3C5C :                     
(1)   13/    3C5C :                     ; ----------------------------------------------------------------
(1)   14/    3C5C :                     ; 32X Screen maps
(1)   15/    3C5C :                     ; ----------------------------------------------------------------
(1)   16/    3C5C :                     
(1)   17/    3C5C :                     MapMars_Scrn0:
(1)   18/    3C5C :                     		binclude "game/screen_0/data/mars/maps/test/data_map.bin"
(1)   19/    3E8C :                     		align 2
(1)   20/    3E8C :                     
(1)   21/    3E8C :                     ; ----------------------------------------------------------------
(1)   22/    3E8C :                     ; 32X Palettes
(1)   23/    3E8C :                     ; ----------------------------------------------------------------
(1)   24/    3E8C :                     
(1)   25/    3E8C :                     PalMars_Doremi:
(1)   26/    3E8C :                     		binclude "game/screen_0/data/mars/objects/doremi/doremi_pal.bin"
(1)   27/    3F0C :                     		align 2
(1)   28/    3F0C :                     PalMars_Sophie:
(1)   29/    3F0C :                     		binclude "game/screen_0/data/mars/objects/sophie/sophie_pal.bin"
(1)   30/    3F8C :                     		align 2
(1)   31/    3F8C :                     PalMars_Scrn0:
(1)   32/    3F8C :                     		binclude "game/screen_0/data/mars/maps/test/data_pal.bin"
(1)   33/    400C :                     		align 2
(1)   34/    400C :                     
(1)   35/    400C :                     ; ----------------------------------------------------------------
(1)   36/    400C :                     ; Screen maps
(1)   37/    400C :                     ; ----------------------------------------------------------------
(1)   38/    400C :                     
(1)   39/    400C :                     MAP_Scr0_BG:
(1)   40/    400C :                     		binclude "game/screen_0/data/md/maps/test/md_map.bin"
(1)   41/    48CC :                     		align 2
(1)   42/    48CC :                     
(1)   43/    48CC :                     ; ----------------------------------------------------------------
(1)   44/    48CC :                     ; Object data
(1)   45/    48CC :                     ; ----------------------------------------------------------------
(1)   46/    48CC :                     
(1)   47/    48CC :                     ; Emily
(1)   48/    48CC :                     objPal_Emily:
(1)   49/    48CC :                     		binclude "game/screen_0/data/md/objects/emily/emi_pal.bin"
(1)   50/    48E2 :                     		align 2
(1)   51/    48E2 :                     objMap_Emily:
(1)   52/    48E2 :                     		binclude "game/screen_0/data/md/objects/emily/emi_map.bin"
(1)   53/    4AA2 :                     		align 2
(1)   54/    4AA2 :                     objDma_Emily:
(1)   55/    4AA2 :                     		binclude "game/screen_0/data/md/objects/emily/emi_plc.bin"
(1)   56/    4B42 :                     		align 2
(1)   57/    4B42 :                     
(1)   58/    4B42 :                     ; Doremi
(1)   59/    4B42 :                     objPal_Doremi:
(1)   60/    4B42 :                     		binclude "game/screen_0/data/md/objects/doremi/doremi_pal.bin"
(1)   61/    4B60 :                     		align 2
(1)   62/    4B60 :                     objMap_Doremi:
(1)   63/    4B60 :                     		binclude "game/screen_0/data/md/objects/doremi/doremi_map.bin"
(1)   64/    4B88 :                     		align 2
(1)   65/    4B88 :                     objDma_Doremi:
(1)   66/    4B88 :                     		binclude "game/screen_0/data/md/objects/doremi/doremi_plc.bin"
(1)   67/    4B98 :                     		align 2
(1)   68/    4B98 :                     
(1)   69/    4B98 :                     ; Bibi
(1)   70/    4B98 :                     ; objPal_Doremi:
(1)   71/    4B98 :                     ; 		binclude "game/screen_0/data/md/objects/doremi/doremi_pal.bin"
(1)   72/    4B98 :                     ; 		align 2
(1)   73/    4B98 :                     objMap_Bibi:
(1)   74/    4B98 :                     		binclude "game/screen_0/data/md/objects/bibi/bibi_map.bin"
(1)   75/    4C78 :                     		align 2
(1)   76/    4C78 :                     objDma_Bibi:
(1)   77/    4C78 :                     		binclude "game/screen_0/data/md/objects/bibi/bibi_plc.bin"
(1)   78/    4CCE :                     		align 2
(1)   79/    4CCE :                     
(1)   80/    4CCE :                     ; Sophie
(1)   81/    4CCE :                     objPal_Sophie:
(1)   82/    4CCE :                     		binclude "game/screen_0/data/md/objects/sophie/sophie_pal.bin"
(1)   83/    4CEC :                     		align 2
(1)   84/    4CEC :                     objMap_Sophie:
(1)   85/    4CEC :                     		binclude "game/screen_0/data/md/objects/sophie/sophie_map.bin"
(1)   86/    4D5C :                     		align 2
(1)   87/    4D5C :                     objDma_Sophie:
(1)   88/    4D5C :                     		binclude "game/screen_0/data/md/objects/sophie/sophie_plc.bin"
(1)   89/    4D84 :                     		align 2
(1)   90/    4D84 :                     
     417/    4D84 :                     		include "game/screen_1/data_bank.asm"
(1)    1/    4D84 :                     ; ===========================================================================
(1)    2/    4D84 :                     ; ----------------------------------------------------------------
(1)    3/    4D84 :                     ; 68K SCREEN MODE DATA
(1)    4/    4D84 :                     ; for big stuff like maps, level, etc.
(1)    5/    4D84 :                     ;
(1)    6/    4D84 :                     ; For Genesis graphics use data_dma.asm
(1)    7/    4D84 :                     ; and for 32X graphics use data_mgfx.asm
(1)    8/    4D84 :                     ;
(1)    9/    4D84 :                     ; For 32X, CD32X:
(1)   10/    4D84 :                     ; THE 256-COLOR PALETTES GO HERE.
(1)   11/    4D84 :                     ; ----------------------------------------------------------------
(1)   12/    4D84 :                     
(1)   13/    4D84 :                     ; ----------------------------------------------------------------
(1)   14/    4D84 :                     ; 32X Screen maps
(1)   15/    4D84 :                     ; ----------------------------------------------------------------
(1)   16/    4D84 :                     
(1)   17/    4D84 :                     MapMars_TEST:
(1)   18/    4D84 :                     		binclude "game/screen_1/data/mars/maps/test/data_map.bin"
(1)   19/    4FB4 :                     		align 2
(1)   20/    4FB4 :                     
(1)   21/    4FB4 :                     ; ----------------------------------------------------------------
(1)   22/    4FB4 :                     ; 32X Palettes
(1)   23/    4FB4 :                     ; ----------------------------------------------------------------
(1)   24/    4FB4 :                     
(1)   25/    4FB4 :                     PalMars_TEST:
(1)   26/    4FB4 :                     		binclude "game/screen_1/data/mars/maps/test/data_pal.bin"
(1)   27/    51B4 :                     		align 2
(1)   28/    51B4 :                     
(1)   29/    51B4 :                     ; ----------------------------------------------------------------
(1)   30/    51B4 :                     ; Screen maps
(1)   31/    51B4 :                     ; ----------------------------------------------------------------
(1)   32/    51B4 :                     
(1)   33/    51B4 :                     MAP_TEST:
(1)   34/    51B4 :                     		binclude "game/screen_1/data/md/maps/test/md_map.bin"
(1)   35/    5A74 :                     		align 2
(1)   36/    5A74 :                     
(1)   37/    5A74 :                     ; ----------------------------------------------------------------
(1)   38/    5A74 :                     ; Object maps
(1)   39/    5A74 :                     ; ----------------------------------------------------------------
(1)   40/    5A74 :                     
(1)   41/    5A74 :                     objPal_Sisi:
(1)   42/    5A74 :                     		binclude "game/screen_1/data/md/objects/sisi/sisi_pal.bin"
(1)   43/    5A94 :                     		align 2
(1)   44/    5A94 :                     objMap_Sisi:
(1)   45/    5A94 :                     		binclude "game/screen_1/data/md/objects/sisi/sisi_map.bin"
(1)   46/    5AF0 :                     		align 2
(1)   47/    5AF0 :                     
     422/    5AF0 :                     		include "sound/tracks.asm"		; GEMA: Track data
(1)    1/    5AF0 :                     ; ===========================================================================
(1)    2/    5AF0 :                     ; ------------------------------------------------------------
(1)    3/    5AF0 :                     ; SOUND TRACKS SECTION
(1)    4/    5AF0 :                     ; ------------------------------------------------------------
(1)    5/    5AF0 :                     
(1)    6/    5AF0 :                     ; ====================================================================
(1)    7/    5AF0 :                     ; ------------------------------------------------------------
(1)    8/    5AF0 :                     ; Instrument macros
(1)    9/    5AF0 :                     ; ------------------------------------------------------------
(1)   10/    5AF0 :                     
(1)   11/    5AF0 :                     gInsNull macro
(1)   12/    5AF0 :                     	dc.b $00,$00,$00,$00
(1)   13/    5AF0 :                     	dc.b $00,$00,$00,$00
(1)   14/    5AF0 :                     	endm
(1)   15/    5AF0 :                     
(1)   16/    5AF0 :                     ; alv: attack level
(1)   17/    5AF0 :                     ; atk: attack rate
(1)   18/    5AF0 :                     ; slv: sustain
(1)   19/    5AF0 :                     ; dky: decay rate (up)
(1)   20/    5AF0 :                     ; rrt: release rate (down)
(1)   21/    5AF0 :                     ; vib: (TODO)
(1)   22/    5AF0 :                     gInsPsg	macro pitch,alv,atk,slv,dky,rrt,vib
(1)   23/    5AF0 :                     	dc.b $80,pitch,alv,atk
(1)   24/    5AF0 :                     	dc.b slv,dky,rrt,vib
(1)   25/    5AF0 :                     	endm
(1)   26/    5AF0 :                     
(1)   27/    5AF0 :                     ; same args as gInsPsg
(1)   28/    5AF0 :                     ; but this has one more argument for the noise type:
(1)   29/    5AF0 :                     ; mode: noise mode
(1)   30/    5AF0 :                     ;       %tmm
(1)   31/    5AF0 :                     ;        t  - Bass(0)|Noise(1)
(1)   32/    5AF0 :                     ;         mm- Clock(0)|Clock/2(1)|Clock/4(2)|Tone3(3)
(1)   33/    5AF0 :                     ;
(1)   34/    5AF0 :                     gInsPsgN macro pitch,alv,atk,slv,dky,rrt,vib,mode
(1)   35/    5AF0 :                     	dc.b $90|mode,pitch,alv,atk
(1)   36/    5AF0 :                     	dc.b slv,dky,rrt,vib
(1)   37/    5AF0 :                     	endm
(1)   38/    5AF0 :                     
(1)   39/    5AF0 :                     ; 24-bit 68k pointer to FM patch data
(1)   40/    5AF0 :                     gInsFm macro pitch,fmins
(1)   41/    5AF0 :                     	dc.b $A0,pitch,((fmins>>16)&$FF),((fmins>>8)&$FF)
(1)   42/    5AF0 :                     	dc.b fmins&$FF,$00,$00,$00
(1)   43/    5AF0 :                     	endm
(1)   44/    5AF0 :                     
(1)   45/    5AF0 :                     ; Same args as gInsFm but for FM3 special.
(1)   46/    5AF0 :                     ;
(1)   47/    5AF0 :                     ; ** Pitch is useless here, set to 0 **
(1)   48/    5AF0 :                     gInsFm3	macro pitch,fmins
(1)   49/    5AF0 :                     	dc.b $B0,pitch,((fmins>>16)&$FF),((fmins>>8)&$FF)
(1)   50/    5AF0 :                     	dc.b fmins&$FF,$00,$00,$00
(1)   51/    5AF0 :                     	endm
(1)   52/    5AF0 :                     
(1)   53/    5AF0 :                     ; DAC Sample
(1)   54/    5AF0 :                     ;
(1)   55/    5AF0 :                     ; flags: %000L
(1)   56/    5AF0 :                     ;        L - Loop sample No/Yes
(1)   57/    5AF0 :                     gInsDac	macro pitch,start,flags
(1)   58/    5AF0 :                     	dc.b $C0|flags,pitch,((start>>16)&$FF),((start>>8)&$FF)
(1)   59/    5AF0 :                     	dc.b start&$FF,0,0,0
(1)   60/    5AF0 :                     	endm
(1)   61/    5AF0 :                     
(1)   62/    5AF0 :                     ; Sega CD PCM Sample
(1)   63/    5AF0 :                     ;
(1)   64/    5AF0 :                     ; flags: %000L
(1)   65/    5AF0 :                     ;        L - Loop sample No/Yes
(1)   66/    5AF0 :                     ;
(1)   67/    5AF0 :                     ; pitch:
(1)   68/    5AF0 :                     ; -17-7 = 8000 hz
(1)   69/    5AF0 :                     gInsPcm	macro pitch,start,flags
(1)   70/    5AF0 :                      if MCD|MARSCD
(1)   71/    5AF0 :                     	dc.b $D0|flags,pitch,((start>>16)&$FF),((start>>8)&$FF)
(1)   72/    5AF0 :                     	dc.b start&$FF,0,0,0
(1)   73/    5AF0 :                      else
(1)   74/    5AF0 :                     	dc.b $00,$00,$00,$00
(1)   75/    5AF0 :                     	dc.b $00,$00,$00,$00
(1)   76/    5AF0 :                      endif
(1)   77/    5AF0 :                     	endm
(1)   78/    5AF0 :                     
(1)   79/    5AF0 :                     ; Sega 32X PWM Sample
(1)   80/    5AF0 :                     ;
(1)   81/    5AF0 :                     ; flags: %00SL
(1)   82/    5AF0 :                     ;        L - Loop sample No/Yes
(1)   83/    5AF0 :                     ;        S - Sample data is in STEREO
(1)   84/    5AF0 :                     gInsPwm	macro pitch,start,flags
(1)   85/    5AF0 :                      if MARS|MARSCD
(1)   86/    5AF0 :                     	dc.b $E0|flags,pitch,((start>>24)&$FF),((start>>16)&$FF)
(1)   87/    5AF0 :                     	dc.b ((start>>8)&$FF),start&$FF,0,0
(1)   88/    5AF0 :                      else
(1)   89/    5AF0 :                     	dc.b $00,$00,$00,$00
(1)   90/    5AF0 :                     	dc.b $00,$00,$00,$00
(1)   91/    5AF0 :                      endif
(1)   92/    5AF0 :                     	endm
(1)   93/    5AF0 :                     
(1)   94/    5AF0 :                     ; ticks - %gttttttt
(1)   95/    5AF0 :                     ;   loc - 68k pointer
(1)   96/    5AF0 :                     ;
(1)   97/    5AF0 :                     ; t-Ticks
(1)   98/    5AF0 :                     ; g-Use global tempo
(1)   99/    5AF0 :                     gemaTrk macro ticks,loc
(1)  100/    5AF0 :                     	dc.l ((ticks&$FF)<<24)|loc&$FFFFFF
(1)  101/    5AF0 :                     	endm
(1)  102/    5AF0 :                     
(1)  103/    5AF0 :                     ; gemaHead
(1)  104/    5AF0 :                     ;
(1)  105/    5AF0 :                     ; blk_data,patt_data,ins_list,num_chnlsused
(1)  106/    5AF0 :                     gemaHead macro blk,pat,ins,num
(1)  107/    5AF0 :                     	dc.w num
(1)  108/    5AF0 :                     	dc.l blk
(1)  109/    5AF0 :                     	dc.l pat
(1)  110/    5AF0 :                     	dc.l ins
(1)  111/    5AF0 :                     	endm
(1)  112/    5AF0 :                     
(1)  113/    5AF0 :                     ; ====================================================================
(1)  114/    5AF0 :                     ; ------------------------------------------------------------
(1)  115/    5AF0 :                     ; Nikona DEFAULT track-list
(1)  116/    5AF0 :                     ;
(1)  117/    5AF0 :                     ; gemaTrk ticks+beatsbit*,track_data
(1)  118/    5AF0 :                     ; Add $80 ($80|ticks) to make the track use global sub-beats
(1)  119/    5AF0 :                     ;
(1)  120/    5AF0 :                     ; To use sub-beats call gemaSetBeats command
(1)  121/    5AF0 :                     ; BEFORE playing your track:
(1)  122/    5AF0 :                     ; 	move.w	#new_beats,d0
(1)  123/    5AF0 :                     ; 	bsr	gemaSetBeats
(1)  124/    5AF0 :                     ; 	move.w	#track_id,d0
(1)  125/    5AF0 :                     ;	bsr	gemaPlayTrack
(1)  126/    5AF0 :                     ; ------------------------------------------------------------
(1)  127/    5AF0 :                     
(1)  128/    5AF0 :                     	align 2
(1)  129/    5AF0 :                     Gema_MasterList:
(1)  130/    5AF0 : (MACRO)              	gemaTrk 4|$80,GemaTrk_Astral
(1)  130/    5AF0 : 8400 C538                   dc.l ((4|$80&$FF)<<24)|GEMATRK_ASTRAL&$FFFFFF
(1)  131/    5AF4 : (MACRO)              	gemaTrk 3|$80,GemaTrk_Arena1
(1)  131/    5AF4 : 8300 95D6                   dc.l ((3|$80&$FF)<<24)|GEMATRK_ARENA1&$FFFFFF
(1)  132/    5AF8 :                     ; 	gemaTrk 6|$80,GemaTrk_MOVEME
(1)  133/    5AF8 :                     ; 	gemaTrk 6|$80,GemaTrk_NadieMD
(1)  134/    5AF8 :                     ; 	gemaTrk 6|$80,GemaTrk_NadieMCD
(1)  135/    5AF8 :                     ; 	gemaTrk 6|$80,GemaTrk_NadieMARS
(1)  136/    5AF8 : (MACRO)              	gemaTrk 3|$80,GemaTrk_Crystal
(1)  136/    5AF8 : 8300 839C                   dc.l ((3|$80&$FF)<<24)|GEMATRK_CRYSTAL&$FFFFFF
(1)  137/    5AFC : (MACRO)              	gemaTrk 3,GemaTrk_Dream
(1)  137/    5AFC : 0300 6C4C                   dc.l ((3&$FF)<<24)|GEMATRK_DREAM&$FFFFFF
(1)  138/    5B00 :                     
(1)  139/    5B00 :                     ; ------------------------------------------------------------
(1)  140/    5B00 :                     ; BGM tracks
(1)  141/    5B00 :                     ; ------------------------------------------------------------
(1)  142/    5B00 :                     
(1)  143/    5B00 :                     GemaSfx_All:
(1)  144/    5B00 : (MACRO)              	gemaHead .blk,.pat,.ins,1
(1)  144/    5B00 : 0001                        dc.w 1
(1)  144/    5B02 : 0000 5B0E                   dc.l .BLK
(1)  144/    5B06 : 0000 5B14                   dc.l .PAT
(1)  144/    5B0A : 0000 5BD4                   dc.l .INS
(1)  145/    5B0E :                     .blk:
(1)  146/    5B0E :                     	binclude "sound/tracks/sfxall_blk.bin"
(1)  147/    5B13 :                     	align 2
(1)  148/    5B14 :                     .pat:
(1)  149/    5B14 :                     	binclude "sound/tracks/sfxall_patt.bin"
(1)  150/    5BD3 :                     	align 2
(1)  151/    5BD4 :                     .ins:
(1)  152/    5BD4 : (MACRO)              	gInsPsgN 0,$00,$00,$00,$00,$00,0,%100
(1)  152/    5BD4 : 9400 0000                   dc.b $90|%100,0,$00,$00
(1)  152/    5BD8 : 0000 0000                   dc.b $00,$00,$00,0
(1)  153/    5BDC : (MACRO)              	gInsPsgN 0,$00,$00,$00,$00,$00,0,%101
(1)  153/    5BDC : 9500 0000                   dc.b $90|%101,0,$00,$00
(1)  153/    5BE0 : 0000 0000                   dc.b $00,$00,$00,0
(1)  154/    5BE4 : (MACRO)              	gInsPsgN 0,$00,$00,$00,$00,$00,0,%110
(1)  154/    5BE4 : 9600 0000                   dc.b $90|%110,0,$00,$00
(1)  154/    5BE8 : 0000 0000                   dc.b $00,$00,$00,0
(1)  155/    5BEC : (MACRO)              	gInsFm 0,FmIns_Ding_1
(1)  155/    5BEC : A000 00E7                   dc.b $A0,0,((FMINS_DING_1>>16)&$FF),((FMINS_DING_1>>8)&$FF)
(1)  155/    5BF0 : 6500 0000                   dc.b FMINS_DING_1&$FF,$00,$00,$00
(1)  156/    5BF4 : (MACRO)              	gInsFm3 0,FmIns_Fm3_Explosion
(1)  156/    5BF4 : B000 00E2                   dc.b $B0,0,((FMINS_FM3_EXPLOSION>>16)&$FF),((FMINS_FM3_EXPLOSION>>8)&$FF)
(1)  156/    5BF8 : C500 0000                   dc.b FMINS_FM3_EXPLOSION&$FF,$00,$00,$00
(1)  157/    5BFC :                     
(1)  158/    5BFC :                     ; ------------------------------------------------------------
(1)  159/    5BFC :                     
(1)  160/    5BFC :                     GemaTrk_TEST_0:
(1)  161/    5BFC : (MACRO)              	gemaHead .blk,.pat,.ins,3
(1)  161/    5BFC : 0003                        dc.w 3
(1)  161/    5BFE : 0000 5C12                   dc.l .BLK
(1)  161/    5C02 : 0000 5C15                   dc.l .PAT
(1)  161/    5C06 : 0000 5C0A                   dc.l .INS
(1)  162/    5C0A :                     .ins:
(1)  163/    5C0A :                     ; 	gInsPsgN 0,$00,$00,$00,$00,$00,0,%101
(1)  164/    5C0A :                     ; 	gInsFm -36-6,FmIns_Ambient_dark
(1)  165/    5C0A : (MACRO)              	gInsPcm -12,PcmIns_MoveMe_BrassL,%11
(1)  165/    5C0A : 0000 0000                   dc.b $00,$00,$00,$00
(1)  165/    5C0E : 0000 0000                   dc.b $00,$00,$00,$00
(1)  166/    5C12 :                     ; 	gInsPwm 0,PwmIns_Piano,%00
(1)  167/    5C12 :                     .blk:
(1)  168/    5C12 :                     	binclude "sound/tracks/test_blk.bin"
(1)  169/    5C15 :                     .pat:
(1)  170/    5C15 :                     	binclude "sound/tracks/test_patt.bin"
(1)  171/    5C76 :                     
(1)  172/    5C76 :                     ; ------------------------------------------------------------
(1)  173/    5C76 :                     
(1)  174/    5C76 :                     GemaTrk_MOVEME:
(1)  175/    5C76 : (MACRO)              	gemaHead .blk,.pat,.ins,13
(1)  175/    5C76 : 000D                        dc.w 13
(1)  175/    5C78 : 0000 5C84                   dc.l .BLK
(1)  175/    5C7C : 0000 5C9C                   dc.l .PAT
(1)  175/    5C80 : 0000 6BB4                   dc.l .INS
(1)  176/    5C84 :                     .blk:
(1)  177/    5C84 :                     	binclude "sound/tracks/moveme_blk.bin"
(1)  178/    5C9B :                     	align 2
(1)  179/    5C9C :                     .pat:
(1)  180/    5C9C :                     	binclude "sound/tracks/moveme_patt.bin"
(1)  181/    6BB4 :                     	align 2
(1)  182/    6BB4 :                     .ins:
(1)  183/    6BB4 : (MACRO)              	gInsPcm -12,PcmIns_MoveMe_Hit,%10
(1)  183/    6BB4 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  183/    6BB8 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  184/    6BBC : (MACRO)              	gInsFm 0,FmIns_Bass_Duck
(1)  184/    6BBC : A000 00E4                   dc.b $A0,0,((FMINS_BASS_DUCK>>16)&$FF),((FMINS_BASS_DUCK>>8)&$FF)
(1)  184/    6BC0 : 4500 0000                   dc.b FMINS_BASS_DUCK&$FF,$00,$00,$00
(1)  185/    6BC4 : (MACRO)              	gInsPcm -12,PcmIns_MoveMe_BrassL,%11
(1)  185/    6BC4 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  185/    6BC8 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  186/    6BCC : (MACRO)              	gInsFm 0,FmIns_ClosedHat
(1)  186/    6BCC : A000 00E8                   dc.b $A0,0,((FMINS_CLOSEDHAT>>16)&$FF),((FMINS_CLOSEDHAT>>8)&$FF)
(1)  186/    6BD0 : 2500 0000                   dc.b FMINS_CLOSEDHAT&$FF,$00,$00,$00
(1)  187/    6BD4 : (MACRO)              	gInsPsgN 0,$00,$00,$00,$00,$04,0,%110
(1)  187/    6BD4 : 9600 0000                   dc.b $90|%110,0,$00,$00
(1)  187/    6BD8 : 0000 0400                   dc.b $00,$00,$04,0
(1)  188/    6BDC : (MACRO)              	gInsFm -12,FmIns_HBeat_tom
(1)  188/    6BDC : A0F4 00E7                   dc.b $A0,-12,((FMINS_HBEAT_TOM>>16)&$FF),((FMINS_HBEAT_TOM>>8)&$FF)
(1)  188/    6BE0 : A500 0000                   dc.b FMINS_HBEAT_TOM&$FF,$00,$00,$00
(1)  189/    6BE4 : (MACRO)              	gInsPcm -12,PcmIns_Snare,%10
(1)  189/    6BE4 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  189/    6BE8 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  190/    6BEC : (MACRO)              	gInsPcm -12,PcmIns_Kick,%10		;gInsFm -38,FmIns_DrumKick_gem
(1)  190/    6BEC : 0000 0000                   dc.b $00,$00,$00,$00
(1)  190/    6BF0 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  191/    6BF4 : (MACRO)              	gInsFm -12,FmIns_Trumpet_carnival	;FmIns_Trumpet_2
(1)  191/    6BF4 : A0F4 00E5                   dc.b $A0,-12,((FMINS_TRUMPET_CARNIVAL>>16)&$FF),((FMINS_TRUMPET_CARNIVAL>>8)&$FF)
(1)  191/    6BF8 : C500 0000                   dc.b FMINS_TRUMPET_CARNIVAL&$FF,$00,$00,$00
(1)  192/    6BFC : (MACRO)              	gInsPsg 0,$20,$20,$10,$01,$08,0		;gInsFm -12,FmIns_Ding_Baseball;
(1)  192/    6BFC : 8000 2020                   dc.b $80,0,$20,$20
(1)  192/    6C00 : 1001 0800                   dc.b $10,$01,$08,0
(1)  193/    6C04 : (MACRO)              	gInsFm3 0,FmIns_Sp_OpenHat
(1)  193/    6C04 : B000 00E2                   dc.b $B0,0,((FMINS_SP_OPENHAT>>16)&$FF),((FMINS_SP_OPENHAT>>8)&$FF)
(1)  193/    6C08 : ED00 0000                   dc.b FMINS_SP_OPENHAT&$FF,$00,$00,$00
(1)  194/    6C0C : (MACRO)              	gInsNull;gInsPwm -17,PwmIns_MyTime,%10
(1)  194/    6C0C : 0000 0000                   dc.b $00,$00,$00,$00
(1)  194/    6C10 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  195/    6C14 : (MACRO)              	gInsPsg +12,$20,$10,$10,$0C,$0C,0
(1)  195/    6C14 : 800C 2010                   dc.b $80,+12,$20,$10
(1)  195/    6C18 : 100C 0C00                   dc.b $10,$0C,$0C,0
(1)  196/    6C1C : (MACRO)              	gInsPsg 0,$00,$00,$00,$00,$06,0
(1)  196/    6C1C : 8000 0000                   dc.b $80,0,$00,$00
(1)  196/    6C20 : 0000 0600                   dc.b $00,$00,$06,0
(1)  197/    6C24 : (MACRO)              	gInsPcm -12,PcmIns_MoveMe_BrassR,%11
(1)  197/    6C24 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  197/    6C28 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  198/    6C2C : (MACRO)              	gInsNull
(1)  198/    6C2C : 0000 0000                   dc.b $00,$00,$00,$00
(1)  198/    6C30 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  199/    6C34 : (MACRO)              	gInsNull
(1)  199/    6C34 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  199/    6C38 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  200/    6C3C : (MACRO)              	gInsNull
(1)  200/    6C3C : 0000 0000                   dc.b $00,$00,$00,$00
(1)  200/    6C40 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  201/    6C44 : (MACRO)              	gInsNull
(1)  201/    6C44 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  201/    6C48 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  202/    6C4C :                     
(1)  203/    6C4C :                     ; ------------------------------------------------------------
(1)  204/    6C4C :                     
(1)  205/    6C4C :                     GemaTrk_Dream:
(1)  206/    6C4C : (MACRO)              	gemaHead .blk,.pat,.ins,8
(1)  206/    6C4C : 0008                        dc.w 8
(1)  206/    6C4E : 0000 6C5A                   dc.l .BLK
(1)  206/    6C52 : 0000 6C67                   dc.l .PAT
(1)  206/    6C56 : 0000 8324                   dc.l .INS
(1)  207/    6C5A :                     .blk:
(1)  208/    6C5A :                     	binclude "sound/tracks/dream_blk.bin"
(1)  209/    6C67 :                     .pat:
(1)  210/    6C67 :                     	binclude "sound/tracks/dream_patt.bin"
(1)  211/    8324 :                     .ins:
(1)  212/    8324 : (MACRO)              	gInsFm 0,FmIns_Hats_closed
(1)  212/    8324 : A000 00E8                   dc.b $A0,0,((FMINS_HATS_CLOSED>>16)&$FF),((FMINS_HATS_CLOSED>>8)&$FF)
(1)  212/    8328 : 0500 0000                   dc.b FMINS_HATS_CLOSED&$FF,$00,$00,$00
(1)  213/    832C : (MACRO)              	gInsDac +12,DacIns_Kick_wegot,0
(1)  213/    832C : C00C 0207                   dc.b $C0|0,+12,((DACINS_KICK_WEGOT>>16)&$FF),((DACINS_KICK_WEGOT>>8)&$FF)
(1)  213/    8330 : 5400 0000                   dc.b DACINS_KICK_WEGOT&$FF,0,0,0
(1)  214/    8334 : (MACRO)              	gInsFm -12,FmIns_brass_eur
(1)  214/    8334 : A0F4 00E5                   dc.b $A0,-12,((FMINS_BRASS_EUR>>16)&$FF),((FMINS_BRASS_EUR>>8)&$FF)
(1)  214/    8338 : E500 0000                   dc.b FMINS_BRASS_EUR&$FF,$00,$00,$00
(1)  215/    833C : (MACRO)              	gInsFm -24,FmIns_Trumpet_carnival
(1)  215/    833C : A0E8 00E5                   dc.b $A0,-24,((FMINS_TRUMPET_CARNIVAL>>16)&$FF),((FMINS_TRUMPET_CARNIVAL>>8)&$FF)
(1)  215/    8340 : C500 0000                   dc.b FMINS_TRUMPET_CARNIVAL&$FF,$00,$00,$00
(1)  216/    8344 : (MACRO)              	gInsPsg  0,$00,$20,$00,$02,$10,0
(1)  216/    8344 : 8000 0020                   dc.b $80,0,$00,$20
(1)  216/    8348 : 0002 1000                   dc.b $00,$02,$10,0
(1)  217/    834C : (MACRO)              	gInsPsgN 0,$00,$10,$00,$01,$04,0,%100
(1)  217/    834C : 9400 0010                   dc.b $90|%100,0,$00,$10
(1)  217/    8350 : 0001 0400                   dc.b $00,$01,$04,0
(1)  218/    8354 : (MACRO)              	gInsFm 0,FmIns_Bass_low_1
(1)  218/    8354 : A000 00E4                   dc.b $A0,0,((FMINS_BASS_LOW_1>>16)&$FF),((FMINS_BASS_LOW_1>>8)&$FF)
(1)  218/    8358 : E500 0000                   dc.b FMINS_BASS_LOW_1&$FF,$00,$00,$00
(1)  219/    835C : (MACRO)              	gInsFm 0,FmIns_Hats_1
(1)  219/    835C : A000 00E7                   dc.b $A0,0,((FMINS_HATS_1>>16)&$FF),((FMINS_HATS_1>>8)&$FF)
(1)  219/    8360 : E500 0000                   dc.b FMINS_HATS_1&$FF,$00,$00,$00
(1)  220/    8364 : (MACRO)              	gInsPsgN 0,$00,$10,$00,$01,$08,0,%101
(1)  220/    8364 : 9500 0010                   dc.b $90|%101,0,$00,$10
(1)  220/    8368 : 0001 0800                   dc.b $00,$01,$08,0
(1)  221/    836C : (MACRO)              	gInsNull
(1)  221/    836C : 0000 0000                   dc.b $00,$00,$00,$00
(1)  221/    8370 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  222/    8374 : (MACRO)              	gInsNull
(1)  222/    8374 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  222/    8378 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  223/    837C : (MACRO)              	gInsNull
(1)  223/    837C : 0000 0000                   dc.b $00,$00,$00,$00
(1)  223/    8380 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  224/    8384 : (MACRO)              	gInsNull
(1)  224/    8384 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  224/    8388 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  225/    838C : (MACRO)              	gInsPsg  0,$40,$00,$00,$00,$00,0
(1)  225/    838C : 8000 4000                   dc.b $80,0,$40,$00
(1)  225/    8390 : 0000 0000                   dc.b $00,$00,$00,0
(1)  226/    8394 : (MACRO)              	gInsFm -12,FmIns_Trumpet_1
(1)  226/    8394 : A0F4 00E5                   dc.b $A0,-12,((FMINS_TRUMPET_1>>16)&$FF),((FMINS_TRUMPET_1>>8)&$FF)
(1)  226/    8398 : A500 0000                   dc.b FMINS_TRUMPET_1&$FF,$00,$00,$00
(1)  227/    839C :                     
(1)  228/    839C :                     ; Ticks: 3-1
(1)  229/    839C :                     ; TEMPO: 170
(1)  230/    839C :                     GemaTrk_Crystal:
(1)  231/    839C : (MACRO)              	gemaHead .blk,.pat,.ins,7
(1)  231/    839C : 0007                        dc.w 7
(1)  231/    839E : 0000 83AA                   dc.l .BLK
(1)  231/    83A2 : 0000 83B2                   dc.l .PAT
(1)  231/    83A6 : 0000 95A6                   dc.l .INS
(1)  232/    83AA :                     .blk:
(1)  233/    83AA :                     	binclude "sound/tracks/crystal_blk.bin"
(1)  234/    83B2 :                     .pat:
(1)  235/    83B2 :                     	binclude "sound/tracks/crystal_patt.bin"
(1)  236/    95A6 :                     .ins:
(1)  237/    95A6 : (MACRO)              	gInsFm 0,FmIns_Organ2a
(1)  237/    95A6 : A000 00E2                   dc.b $A0,0,((FMINS_ORGAN2A>>16)&$FF),((FMINS_ORGAN2A>>8)&$FF)
(1)  237/    95AA : A500 0000                   dc.b FMINS_ORGAN2A&$FF,$00,$00,$00
(1)  238/    95AE : (MACRO)              	gInsPsgN 0,$00,$10,$00,$01,$10,0,%100
(1)  238/    95AE : 9400 0010                   dc.b $90|%100,0,$00,$10
(1)  238/    95B2 : 0001 1000                   dc.b $00,$01,$10,0
(1)  239/    95B6 : (MACRO)              	gInsDac 0,DacIns_Kick_wegot,0
(1)  239/    95B6 : C000 0207                   dc.b $C0|0,0,((DACINS_KICK_WEGOT>>16)&$FF),((DACINS_KICK_WEGOT>>8)&$FF)
(1)  239/    95BA : 5400 0000                   dc.b DACINS_KICK_WEGOT&$FF,0,0,0
(1)  240/    95BE : (MACRO)              	gInsFm3 0,FmIns_Sp_OpenHat
(1)  240/    95BE : B000 00E2                   dc.b $B0,0,((FMINS_SP_OPENHAT>>16)&$FF),((FMINS_SP_OPENHAT>>8)&$FF)
(1)  240/    95C2 : ED00 0000                   dc.b FMINS_SP_OPENHAT&$FF,$00,$00,$00
(1)  241/    95C6 : (MACRO)              	gInsNull
(1)  241/    95C6 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  241/    95CA : 0000 0000                   dc.b $00,$00,$00,$00
(1)  242/    95CE : (MACRO)              	gInsFm 0,FmIns_Bass_low_1
(1)  242/    95CE : A000 00E4                   dc.b $A0,0,((FMINS_BASS_LOW_1>>16)&$FF),((FMINS_BASS_LOW_1>>8)&$FF)
(1)  242/    95D2 : E500 0000                   dc.b FMINS_BASS_LOW_1&$FF,$00,$00,$00
(1)  243/    95D6 :                     
(1)  244/    95D6 :                     ; ------------------------------------------------------------
(1)  245/    95D6 :                     
(1)  246/    95D6 :                     GemaTrk_Arena1:
(1)  247/    95D6 : (MACRO)              	gemaHead shrd_blk,shrd_pat,.ins,4
(1)  247/    95D6 : 0004                        dc.w 4
(1)  247/    95D8 : 0000 963C                   dc.l SHRD_BLK
(1)  247/    95DC : 0000 9666                   dc.l SHRD_PAT
(1)  247/    95E0 : 0000 95E4                   dc.l .INS
(1)  248/    95E4 :                     .ins:
(1)  249/    95E4 : (MACRO)              	gInsPcm -12,PcmIns_techno_01,0
(1)  249/    95E4 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  249/    95E8 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  250/    95EC : (MACRO)              	gInsPcm -12,PcmIns_techno_02,0
(1)  250/    95EC : 0000 0000                   dc.b $00,$00,$00,$00
(1)  250/    95F0 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  251/    95F4 : (MACRO)              	gInsPcm -12,PcmIns_techno_03,0
(1)  251/    95F4 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  251/    95F8 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  252/    95FC : (MACRO)              	gInsPcm -12,PcmIns_techno_04,0
(1)  252/    95FC : 0000 0000                   dc.b $00,$00,$00,$00
(1)  252/    9600 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  253/    9604 : (MACRO)              	gInsPcm -12,PcmIns_techno_05,0
(1)  253/    9604 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  253/    9608 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  254/    960C : (MACRO)              	gInsPcm -12,PcmIns_techno_06,1
(1)  254/    960C : 0000 0000                   dc.b $00,$00,$00,$00
(1)  254/    9610 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  255/    9614 : (MACRO)              	gInsPcm -12,PcmIns_techno_07,1
(1)  255/    9614 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  255/    9618 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  256/    961C : (MACRO)              	gInsPcm -12,PcmIns_techno_08,1
(1)  256/    961C : 0000 0000                   dc.b $00,$00,$00,$00
(1)  256/    9620 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  257/    9624 : (MACRO)              	gInsPcm -12,PcmIns_techno_09,1
(1)  257/    9624 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  257/    9628 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  258/    962C : (MACRO)              	gInsPcm -12,PcmIns_techno_10,1
(1)  258/    962C : 0000 0000                   dc.b $00,$00,$00,$00
(1)  258/    9630 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  259/    9634 : (MACRO)              	gInsPcm -12,PcmIns_techno_11,0
(1)  259/    9634 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  259/    9638 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  260/    963C :                     shrd_blk:
(1)  261/    963C :                     	binclude "sound/tracks/techno_blk.bin"
(1)  262/    9666 :                     shrd_pat:
(1)  263/    9666 :                     	binclude "sound/tracks/techno_patt.bin"
(1)  264/    C538 :                     
(1)  265/    C538 :                     GemaTrk_Astral:
(1)  266/    C538 : (MACRO)              	gemaHead .blk,.patt,.ins,4
(1)  266/    C538 : 0004                        dc.w 4
(1)  266/    C53A : 0000 C616                   dc.l .BLK
(1)  266/    C53E : 0000 C632                   dc.l .PATT
(1)  266/    C542 : 0000 C546                   dc.l .INS
(1)  267/    C546 :                     .ins:
(1)  268/    C546 : (MACRO)              	gInsPcm -12,PcmIns_astral_01,1
(1)  268/    C546 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  268/    C54A : 0000 0000                   dc.b $00,$00,$00,$00
(1)  269/    C54E : (MACRO)              	gInsPcm -12,PcmIns_astral_02,1
(1)  269/    C54E : 0000 0000                   dc.b $00,$00,$00,$00
(1)  269/    C552 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  270/    C556 : (MACRO)              	gInsPcm -12,PcmIns_astral_03,0
(1)  270/    C556 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  270/    C55A : 0000 0000                   dc.b $00,$00,$00,$00
(1)  271/    C55E : (MACRO)              	gInsPcm -12,PcmIns_astral_04,0
(1)  271/    C55E : 0000 0000                   dc.b $00,$00,$00,$00
(1)  271/    C562 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  272/    C566 : (MACRO)              	gInsPcm -12,PcmIns_astral_05,0
(1)  272/    C566 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  272/    C56A : 0000 0000                   dc.b $00,$00,$00,$00
(1)  273/    C56E : (MACRO)              	gInsPcm -12,PcmIns_astral_06,0
(1)  273/    C56E : 0000 0000                   dc.b $00,$00,$00,$00
(1)  273/    C572 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  274/    C576 : (MACRO)              	gInsPcm -12,PcmIns_astral_07,0
(1)  274/    C576 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  274/    C57A : 0000 0000                   dc.b $00,$00,$00,$00
(1)  275/    C57E : (MACRO)              	gInsPcm -12,PcmIns_astral_08,0
(1)  275/    C57E : 0000 0000                   dc.b $00,$00,$00,$00
(1)  275/    C582 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  276/    C586 : (MACRO)              	gInsPcm -12,PcmIns_astral_09,0
(1)  276/    C586 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  276/    C58A : 0000 0000                   dc.b $00,$00,$00,$00
(1)  277/    C58E : (MACRO)              	gInsPcm -12,PcmIns_astral_10,0
(1)  277/    C58E : 0000 0000                   dc.b $00,$00,$00,$00
(1)  277/    C592 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  278/    C596 : (MACRO)              	gInsPcm -12,PcmIns_astral_11,0
(1)  278/    C596 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  278/    C59A : 0000 0000                   dc.b $00,$00,$00,$00
(1)  279/    C59E : (MACRO)              	gInsPcm -12,PcmIns_astral_12,0
(1)  279/    C59E : 0000 0000                   dc.b $00,$00,$00,$00
(1)  279/    C5A2 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  280/    C5A6 : (MACRO)              	gInsPcm -12,PcmIns_astral_13,0
(1)  280/    C5A6 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  280/    C5AA : 0000 0000                   dc.b $00,$00,$00,$00
(1)  281/    C5AE : (MACRO)              	gInsPcm -12,PcmIns_astral_14,0
(1)  281/    C5AE : 0000 0000                   dc.b $00,$00,$00,$00
(1)  281/    C5B2 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  282/    C5B6 : (MACRO)              	gInsPcm -12,PcmIns_astral_15,0
(1)  282/    C5B6 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  282/    C5BA : 0000 0000                   dc.b $00,$00,$00,$00
(1)  283/    C5BE : (MACRO)              	gInsPcm -12,PcmIns_astral_16,0
(1)  283/    C5BE : 0000 0000                   dc.b $00,$00,$00,$00
(1)  283/    C5C2 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  284/    C5C6 : (MACRO)              	gInsPcm -12,PcmIns_astral_17,0
(1)  284/    C5C6 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  284/    C5CA : 0000 0000                   dc.b $00,$00,$00,$00
(1)  285/    C5CE : (MACRO)              	gInsPcm -12,PcmIns_astral_18,0
(1)  285/    C5CE : 0000 0000                   dc.b $00,$00,$00,$00
(1)  285/    C5D2 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  286/    C5D6 : (MACRO)              	gInsPcm -12,PcmIns_astral_19,1
(1)  286/    C5D6 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  286/    C5DA : 0000 0000                   dc.b $00,$00,$00,$00
(1)  287/    C5DE : (MACRO)              	gInsPcm -12,PcmIns_astral_20,1
(1)  287/    C5DE : 0000 0000                   dc.b $00,$00,$00,$00
(1)  287/    C5E2 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  288/    C5E6 : (MACRO)              	gInsPcm -12,PcmIns_astral_21,1
(1)  288/    C5E6 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  288/    C5EA : 0000 0000                   dc.b $00,$00,$00,$00
(1)  289/    C5EE : (MACRO)              	gInsPcm -12,PcmIns_astral_22,0
(1)  289/    C5EE : 0000 0000                   dc.b $00,$00,$00,$00
(1)  289/    C5F2 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  290/    C5F6 : (MACRO)              	gInsPcm -12,PcmIns_astral_23,0
(1)  290/    C5F6 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  290/    C5FA : 0000 0000                   dc.b $00,$00,$00,$00
(1)  291/    C5FE : (MACRO)              	gInsPcm -12,PcmIns_astral_24,0
(1)  291/    C5FE : 0000 0000                   dc.b $00,$00,$00,$00
(1)  291/    C602 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  292/    C606 : (MACRO)              	gInsPcm -12,PcmIns_astral_25,0
(1)  292/    C606 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  292/    C60A : 0000 0000                   dc.b $00,$00,$00,$00
(1)  293/    C60E : (MACRO)              	gInsPcm -12,PcmIns_astral_26,0
(1)  293/    C60E : 0000 0000                   dc.b $00,$00,$00,$00
(1)  293/    C612 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  294/    C616 :                     .blk:
(1)  295/    C616 :                     	binclude "sound/tracks/astral_blk.bin"
(1)  296/    C632 :                     .patt:
(1)  297/    C632 :                     	binclude "sound/tracks/astral_patt.bin"
(1)  298/    E285 :                     
(1)  299/    E285 :                     ; ------------------------------------------------------------
(1)  300/    E285 :                     
(1)  301/    E285 :                     ; GemaTrk_NadieMD:
(1)  302/    E285 :                     ; 	gemaHead .blk,.patt,.inst,7
(1)  303/    E285 :                     ; .blk:
(1)  304/    E285 :                     ; 	binclude "sound/tracks/nadie_md_blk.bin"
(1)  305/    E285 :                     ; 	align 2
(1)  306/    E285 :                     ; .patt:
(1)  307/    E285 :                     ; 	binclude "sound/tracks/nadie_md_patt.bin"
(1)  308/    E285 :                     ; 	align 2
(1)  309/    E285 :                     ; .inst:
(1)  310/    E285 :                     ; 	gInsDac 0,DacIns_Nadie,0
(1)  311/    E285 :                     ; 	gInsFm -36,FmIns_Piano_Aqua
(1)  312/    E285 :                     ; 	gInsFm -12,FmIns_HBeat_tom
(1)  313/    E285 :                     ; 	gInsFm -37,FmIns_DrumKick_gem
(1)  314/    E285 :                     ; 	gInsPsg 0,$50,$70,$00,$06,$08,0
(1)  315/    E285 :                     ; 	gInsFm 0,FmIns_Trumpet_1
(1)  316/    E285 :                     ; 	gInsNull
(1)  317/    E285 :                     ; 	gInsFm3 0,FmIns_Sp_ClosedHat
(1)  318/    E285 :                     ; 	gInsFm3 0,FmIns_Sp_OpenHat
(1)  319/    E285 :                     ;
(1)  320/    E285 :                     ; GemaTrk_NadieMCD:
(1)  321/    E285 :                     ; 	gemaHead .blk,.patt,.inst,11
(1)  322/    E285 :                     ; .blk:
(1)  323/    E285 :                     ; 	binclude "sound/tracks/nadie_mcd_blk.bin"
(1)  324/    E285 :                     ; 	align 2
(1)  325/    E285 :                     ; .patt
(1)  326/    E285 :                     ; 	binclude "sound/tracks/nadie_mcd_patt.bin"
(1)  327/    E285 :                     ; 	align 2
(1)  328/    E285 :                     ; .inst:
(1)  329/    E285 :                     ; 	gInsPcm -12,PcmIns_NadieL,%10
(1)  330/    E285 :                     ; 	gInsFm -36,FmIns_Piano_Aqua
(1)  331/    E285 :                     ; 	gInsFm -12,FmIns_HBeat_tom
(1)  332/    E285 :                     ; 	gInsPcm -12-12,PcmIns_PKick,%00
(1)  333/    E285 :                     ; 	gInsPsg 0,$50,$70,$00,$06,$08,0
(1)  334/    E285 :                     ; 	gInsFm 0,FmIns_Trumpet_1
(1)  335/    E285 :                     ; 	gInsPcm 0-12,PcmIns_Piano,%00
(1)  336/    E285 :                     ; 	gInsPcm -12-12,PcmIns_PTom,%00
(1)  337/    E285 :                     ; 	gInsPcm -12,PcmIns_NadieR,%10
(1)  338/    E285 :                     ;
(1)  339/    E285 :                     ; GemaTrk_NadieMARS:
(1)  340/    E285 :                     ; 	gemaHead .blk,.patt,.inst,11
(1)  341/    E285 :                     ; .blk:
(1)  342/    E285 :                     ; 	binclude "sound/tracks/nadie_blk.bin"
(1)  343/    E285 :                     ; 	align 2
(1)  344/    E285 :                     ; .patt
(1)  345/    E285 :                     ; 	binclude "sound/tracks/nadie_patt.bin"
(1)  346/    E285 :                     ; 	align 2
(1)  347/    E285 :                     ; .inst:
(1)  348/    E285 :                     ; 	gInsPwm 0,PwmIns_Nadie,%10
(1)  349/    E285 :                     ; 	gInsFm -36,FmIns_Piano_Aqua
(1)  350/    E285 :                     ; 	gInsFm -12,FmIns_HBeat_tom
(1)  351/    E285 :                     ; 	gInsPwm -12,PwmIns_PKick,%00
(1)  352/    E285 :                     ; 	gInsPsg 0,$50,$70,$00,$06,$08,0
(1)  353/    E285 :                     ; 	gInsFm 0,FmIns_Trumpet_1
(1)  354/    E285 :                     ; 	gInsPwm 0,PwmIns_Piano,%00
(1)  355/    E285 :                     ; 	gInsPwm -12,PwmIns_PTom,%00
(1)  356/    E285 :                     ; 	gInsNull
(1)  357/    E285 :                     
     423/    E285 :                     		include "sound/instr.asm"		; GEMA: FM instruments
(1)    1/    E285 :                     ; ===========================================================================
(1)    2/    E285 :                     ; --------------------------------------------------------
(1)    3/    E285 :                     ; GEMA/Nikona FM instruments "patches"
(1)    4/    E285 :                     ;
(1)    5/    E285 :                     ; Using .gsx save state for easy editing, use
(1)    6/    E285 :                     ; FM_EDITOR.bin in Fusion or any gsx compatible emulator
(1)    7/    E285 :                     ; to make or modify instrument data
(1)    8/    E285 :                     ; --------------------------------------------------------
(1)    9/    E285 :                     
(1)   10/    E285 :                     ; FM_EDITOR savestate data is located at:
(1)   11/    E285 :                     ; $2478
(1)   12/    E285 :                     ;
(1)   13/    E285 :                     ; Sizes:
(1)   14/    E285 :                     ; Normal FM ins: $20
(1)   15/    E285 :                     ; Special FM ins: $28
(1)   16/    E285 :                     ;
(1)   17/    E285 :                     ; INTRUMENT FORMAT:
(1)   18/    E285 :                     ; dc.b $30,$34,$38,$3C	; Register data following this order
(1)   19/    E285 :                     ; dc.b $40,$44,$48,$4C	; **
(1)   20/    E285 :                     ; dc.b $50,$54,$58,$5C	; **
(1)   21/    E285 :                     ; dc.b $60,$64,$68,$6C	; **
(1)   22/    E285 :                     ; dc.b $70,$74,$78,$7C	; **
(1)   23/    E285 :                     ; dc.b $80,$84,$88,$8C	; **
(1)   24/    E285 :                     ; dc.b $90,$94,$98,$9C	; **
(1)   25/    E285 :                     ; dc.b $B0,$B4,$22,$28	; **
(1)   26/    E285 :                     ; ** Extra words for FM3 special:
(1)   27/    E285 :                     ; dc.w OP1,OP2,OP3,OP4	; FM3 special ONLY: Manual frequencies
(1)   28/    E285 :                     ;
(1)   29/    E285 :                     ; $90,$94,$98,$9C: SSG-EG
(1)   30/    E285 :                     ; These CAN be used, but can be problematic
(1)   31/    E285 :                     ; on non-genuine systems.
(1)   32/    E285 :                     ;
(1)   33/    E285 :                     ; $B4: %00aa0ppp
(1)   34/    E285 :                     ; a - AMS
(1)   35/    E285 :                     ; p - PMS
(1)   36/    E285 :                     ; Keep panning bits 0, set the panning in your track.
(1)   37/    E285 :                     ;
(1)   38/    E285 :                     ; $22 LFO: %0000evvv
(1)   39/    E285 :                     ; e - Enable
(1)   40/    E285 :                     ; v - Value
(1)   41/    E285 :                     ; $28 KEYS: %oooo0000
(1)   42/    E285 :                     ; o - Operators 4-1
(1)   43/    E285 :                     ; --------------------------------------------------------
(1)   44/    E285 :                     
(1)   45/    E285 :                     ; TODO: a macro for this.
(1)   46/    E285 :                     
(1)   47/    E285 :                     FmIns_Organ2:
(1)   48/    E285 :                     		binclude "sound/instr/fm/organ2.gsx",$2478,$20
(1)   49/    E2A5 :                     FmIns_Organ2a:
(1)   50/    E2A5 :                     		binclude "sound/instr/fm/organ2a.gsx",$2478,$20
(1)   51/    E2C5 :                     
(1)   52/    E2C5 :                     ; FM3 Special
(1)   53/    E2C5 :                     FmIns_Fm3_Explosion:
(1)   54/    E2C5 :                     		binclude "sound/instr/fm/OLD/fm3_sfx_boomworm.gsx",$2478,$28
(1)   55/    E2ED :                     FmIns_Sp_OpenHat:
(1)   56/    E2ED :                     		binclude "sound/instr/fm/OLD/fm3_openhat.gsx",$2478,$28
(1)   57/    E315 :                     FmIns_Sp_ClosedHat:
(1)   58/    E315 :                     		binclude "sound/instr/fm/OLD/fm3_closedhat.gsx",$2478,$28
(1)   59/    E33D :                     FmIns_Sp_Cowbell:
(1)   60/    E33D :                     		binclude "sound/instr/fm/OLD/fm3_cowbell.gsx",$2478,$28
(1)   61/    E365 :                     ; BASS
(1)   62/    E365 :                     FmIns_Bass_1:
(1)   63/    E365 :                     		binclude "sound/instr/fm/OLD/bass_low.gsx",$2478,$20
(1)   64/    E385 :                     FmIns_Bass_2:
(1)   65/    E385 :                     		binclude "sound/instr/fm/OLD/bass_strong.gsx",$2478,$20
(1)   66/    E3A5 :                     FmIns_Bass_donna:
(1)   67/    E3A5 :                     		binclude "sound/instr/fm/OLD/bass_feellove.gsx",$2478,$20
(1)   68/    E3C5 :                     FmIns_Bass_groove:
(1)   69/    E3C5 :                     		binclude "sound/instr/fm/OLD/bass_groove.gsx",$2478,$20
(1)   70/    E3E5 :                     FmIns_Bass_groove_2:
(1)   71/    E3E5 :                     		binclude "sound/instr/fm/OLD/bass_groove_2.gsx",$2478,$20
(1)   72/    E405 :                     FmIns_Bass_groove_gem:
(1)   73/    E405 :                     		binclude "sound/instr/fm/OLD/bass_groove_gem.gsx",$2478,$20
(1)   74/    E425 :                     FmIns_Bass_italo:
(1)   75/    E425 :                     		binclude "sound/instr/fm/OLD/bass_italo.gsx",$2478,$20
(1)   76/    E445 :                     FmIns_Bass_duck:
(1)   77/    E445 :                     		binclude "sound/instr/fm/OLD/bass_duck.gsx",$2478,$20
(1)   78/    E465 :                     FmIns_Bass_4:
(1)   79/    E465 :                     		binclude "sound/instr/fm/OLD/bass_4.gsx",$2478,$20
(1)   80/    E485 :                     FmIns_Bass_8:
(1)   81/    E485 :                     		binclude "sound/instr/fm/OLD/bass_8.gsx",$2478,$20
(1)   82/    E4A5 :                     FmIns_Bass_club:
(1)   83/    E4A5 :                     		binclude "sound/instr/fm/OLD/OLD_bass_club.gsx",$2478,$20
(1)   84/    E4C5 :                     FmIns_Bass_calm:
(1)   85/    E4C5 :                     		binclude "sound/instr/fm/OLD/bass_calm.gsx",$2478,$20
(1)   86/    E4E5 :                     FmIns_Bass_low_1:
(1)   87/    E4E5 :                     		binclude "sound/instr/fm/OLD/bass_low_1.bin"
(1)   88/    E505 :                     FmIns_Bass_Oil:
(1)   89/    E505 :                     		binclude "sound/instr/fm/OLD/bass_oil.gsx",$2478,$20
(1)   90/    E525 :                     
(1)   91/    E525 :                     ; PIANO
(1)   92/    E525 :                     FmIns_PianoM1:
(1)   93/    E525 :                     		binclude "sound/instr/fm/OLD/piano_m1.gsx",$2478,$20
(1)   94/    E545 :                     FmIns_Piano_Aqua:
(1)   95/    E545 :                     		binclude "sound/instr/fm/OLD/piano_aqua.gsx",$2478,$20
(1)   96/    E565 :                     FmIns_Piano_Hard:
(1)   97/    E565 :                     		binclude "sound/instr/fm/OLD/piano_hard.bin"
(1)   98/    E585 :                     ; FmIns_Piano_m1:
(1)   99/    E585 :                     ; 		binclude "sound/instr/fm/OLD/piano_m1.gsx",$2478,$20
(1)  100/    E585 :                     
(1)  101/    E585 :                     
(1)  102/    E585 :                     FmIns_Synth_Plus:
(1)  103/    E585 :                     		binclude "sound/instr/fm/OLD/OLD_synthplus.gsx",$2478,$20
(1)  104/    E5A5 :                     
(1)  105/    E5A5 :                     FmIns_Trumpet_1:
(1)  106/    E5A5 :                     		binclude "sound/instr/fm/OLD/OLD_trumpet_1.gsx",$2478,$20
(1)  107/    E5C5 :                     FmIns_Trumpet_carnival:
(1)  108/    E5C5 :                     		binclude "sound/instr/fm/OLD/OLD_trumpet_carnivl.gsx",$2478,$20
(1)  109/    E5E5 :                     
(1)  110/    E5E5 :                     
(1)  111/    E5E5 :                     FmIns_brass_eur:
(1)  112/    E5E5 :                     		binclude "sound/instr/fm/OLD/OLD_brass_eur.gsx",$2478,$20
(1)  113/    E605 :                     FmIns_Brass_Puy:
(1)  114/    E605 :                     		binclude "sound/instr/fm/OLD/brass_puy.gsx",$2478,$20
(1)  115/    E625 :                     
(1)  116/    E625 :                     
(1)  117/    E625 :                     FmIns_Organ_Ito:
(1)  118/    E625 :                     		binclude "sound/instr/fm/OLD/organ_ito.gsx",$2478,$20
(1)  119/    E645 :                     FmIns_Ding_Baseball:
(1)  120/    E645 :                     		binclude "sound/instr/fm/OLD/ding_baseball.gsx",$2478,$20
(1)  121/    E665 :                     FmIns_DrumKick_gem:
(1)  122/    E665 :                     		binclude "sound/instr/fm/OLD/drum_kick_gem.gsx",$2478,$20
(1)  123/    E685 :                     
(1)  124/    E685 :                     
(1)  125/    E685 :                     FmIns_Trumpet_2:
(1)  126/    E685 :                     		binclude "sound/instr/fm/OLD/trumpet_2.gsx",$2478,$20
(1)  127/    E6A5 :                     FmIns_Trumpet_puy:
(1)  128/    E6A5 :                     		binclude "sound/instr/fm/OLD/trumpet_puy.gsx",$2478,$20
(1)  129/    E6C5 :                     FmIns_Marimba:
(1)  130/    E6C5 :                     		binclude "sound/instr/fm/OLD/marimba.gsx",$2478,$20
(1)  131/    E6E5 :                     
(1)  132/    E6E5 :                     FmIns_Ding_toy:
(1)  133/    E6E5 :                     		binclude "sound/instr/fm/OLD/ding_toy.gsx",$2478,$20
(1)  134/    E705 :                     
(1)  135/    E705 :                     FmIns_Flaute_cave:
(1)  136/    E705 :                     		binclude "sound/instr/fm/OLD/flaute_sea.gsx",$2478,$20
(1)  137/    E725 :                     FmIns_Banjo_puy:
(1)  138/    E725 :                     		binclude "sound/instr/fm/OLD/banjo_puy.gsx",$2478,$20
(1)  139/    E745 :                     FmIns_PSynth_plus:
(1)  140/    E745 :                     		binclude "sound/instr/fm/OLD/psynth_plus.gsx",$2478,$20
(1)  141/    E765 :                     FmIns_Ding_1:
(1)  142/    E765 :                     		binclude "sound/instr/fm/OLD/ding_gem.gsx",$2478,$20
(1)  143/    E785 :                     FmIns_Trombone_gem:
(1)  144/    E785 :                     		binclude "sound/instr/fm/OLD/trombone_gem.gsx",$2478,$20
(1)  145/    E7A5 :                     FmIns_HBeat_tom:
(1)  146/    E7A5 :                     		binclude "sound/instr/fm/OLD/nadia_tom.gsx",$2478,$20
(1)  147/    E7C5 :                     FmIns_Guitar_bball:
(1)  148/    E7C5 :                     		binclude "sound/instr/fm/OLD/guitar_bball.gsx",$2478,$20
(1)  149/    E7E5 :                     
(1)  150/    E7E5 :                     FmIns_Hats_1:
(1)  151/    E7E5 :                     		binclude "sound/instr/fm/OLD/fm_hats_spot.bin"
(1)  152/    E805 :                     FmIns_Hats_closed:
(1)  153/    E805 :                     		binclude "sound/instr/fm/OLD/hats_closed.gsx",$2478,$20
(1)  154/    E825 :                     FmIns_ClosedHat:
(1)  155/    E825 :                     		binclude "sound/instr/fm/OLD/hats_closed.gsx",$2478,$20
(1)  156/    E845 :                     
(1)  157/    E845 :                     FmIns_Sewer_1:
(1)  158/    E845 :                     		binclude "sound/instr/fm/OLD/sewer_1.bin"
(1)  159/    E865 :                     
(1)  160/    E865 :                     
(1)  161/    E865 :                     FmIns_Ambient_dark:
(1)  162/    E865 :                     		binclude "sound/instr/fm/OLD/ambient_dark.gsx",$2478,$20
(1)  163/    E885 :                     FmIns_Ambient_spook:
(1)  164/    E885 :                     		binclude "sound/instr/fm/OLD/ambient_spook.gsx",$2478,$20
(1)  165/    E8A5 :                     FmIns_Ambient_3:
(1)  166/    E8A5 :                     		binclude "sound/instr/fm/OLD/ambient_3.gsx",$2478,$20
(1)  167/    E8C5 :                     
(1)  168/    E8C5 :                     
(1)  169/    E8C5 :                     ; FmIns_Guitar_bball:
(1)  170/    E8C5 :                     ; 		binclude "sound/instr/fm/guitar_bball.gsx",$2478,$20
(1)  171/    E8C5 :                     
     424/    E8C5 :                     		include "sound/smpl_dac.asm"		; (MCD/CD32X ONLY) GEMA: DAC samples
(1)    1/    E8C5 :                     ; ===========================================================================
(1)    2/    E8C5 :                     ; --------------------------------------------------------
(1)    3/    E8C5 :                     ; GEMA/Nikona DAC instruments
(1)    4/    E8C5 :                     ;
(1)    5/    E8C5 :                     ; This must be located at the 68k's 900000 area.
(1)    6/    E8C5 :                     ; ** 68K BANK 0 only **
(1)    7/    E8C5 :                     ;
(1)    8/    E8C5 :                     ; BASE Samplerate is at 16000hz
(1)    9/    E8C5 :                     ; --------------------------------------------------------
(1)   10/    E8C5 :                     
(1)   11/    E8C5 :                     	align $8000	; Start from a safe ROM-bank
(1)   12/   10000 :                     
(1)   13/   10000 :                     ; --------------------------------------------------------
(1)   14/   10000 :                     
(1)   15/   10000 :                     ; 	gSmplData Label,"filepath",loop_point(0-start)
(1)   16/   10000 : (MACRO)              	gSmplData DacIns_Nadie,"sound/instr/smpl/nadie.wav",0
(1)   16/   10000 : =$10000              DACINS_NADIE    label *
(1)   16/   10000 : B4DF 00                     dc.b ((DACINS_NADIE_e-DACINS_NADIE_s)&$FF),(((DACINS_NADIE_e-DACINS_NADIE_s)>>8)&$FF),(((DACINS_NADIE_e-DACINS_NADIE_s)>>16)&$FF)
(1)   16/   10003 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   16/   10006 :                     DACINS_NADIE_s:
(1)   16/   10006 :                             binclude "sound/instr/smpl/nadie.wav",$2C
(1)   16/   1DFBA :                     DACINS_NADIE_e:
(1)   17/   1DFBA : (MACRO)              	gSmplData DacIns_Kick_techno,"sound/instr/smpl/ST-72_kick.wav",0
(1)   17/   1DFBA : =$1DFBA              DACINS_KICK_TECHNO    label *
(1)   17/   1DFBA : 9C06 00                     dc.b ((DACINS_KICK_TECHNO_e-DACINS_KICK_TECHNO_s)&$FF),(((DACINS_KICK_TECHNO_e-DACINS_KICK_TECHNO_s)>>8)&$FF),(((DACINS_KICK_TECHNO_e-DACINS_KICK_TECHNO_s)>>16)&$FF)
(1)   17/   1DFBD : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   17/   1DFC0 :                     DACINS_KICK_TECHNO_s:
(1)   17/   1DFC0 :                             binclude "sound/instr/smpl/ST-72_kick.wav",$2C
(1)   17/   1E65C :                     DACINS_KICK_TECHNO_e:
(1)   18/   1E65C : (MACRO)              	gSmplData DacIns_Snare_techno,"sound/instr/smpl/ST-79_snare.wav",0
(1)   18/   1E65C : =$1E65C              DACINS_SNARE_TECHNO    label *
(1)   18/   1E65C : F220 00                     dc.b ((DACINS_SNARE_TECHNO_e-DACINS_SNARE_TECHNO_s)&$FF),(((DACINS_SNARE_TECHNO_e-DACINS_SNARE_TECHNO_s)>>8)&$FF),(((DACINS_SNARE_TECHNO_e-DACINS_SNARE_TECHNO_s)>>16)&$FF)
(1)   18/   1E65F : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   18/   1E662 :                     DACINS_SNARE_TECHNO_s:
(1)   18/   1E662 :                             binclude "sound/instr/smpl/ST-79_snare.wav",$2C
(1)   18/   20754 :                     DACINS_SNARE_TECHNO_e:
(1)   19/   20754 : (MACRO)              	gSmplData DacIns_Kick_wegot,"sound/instr/smpl/wegot_kick.wav",0
(1)   19/   20754 : =$20754              DACINS_KICK_WEGOT    label *
(1)   19/   20754 : 7407 00                     dc.b ((DACINS_KICK_WEGOT_e-DACINS_KICK_WEGOT_s)&$FF),(((DACINS_KICK_WEGOT_e-DACINS_KICK_WEGOT_s)>>8)&$FF),(((DACINS_KICK_WEGOT_e-DACINS_KICK_WEGOT_s)>>16)&$FF)
(1)   19/   20757 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   19/   2075A :                     DACINS_KICK_WEGOT_s:
(1)   19/   2075A :                             binclude "sound/instr/smpl/wegot_kick.wav",$2C
(1)   19/   20ECE :                     DACINS_KICK_WEGOT_e:
(1)   20/   20ECE :                     
     425/   20ECE :                     mdbank0_e:
     426/   20ECE : (MACRO)              	data_bkend MCD_DBANK0,MCD_DBANK0_e,mdbank0_e-mdbank0
     426/   20ECE :                     
     426/   20ECE :                     
     427/   20ECE :                     
     428/   20ECE :                     ; --------------------------------------------------------
     429/   20ECE :                     ; BANK 1
     430/   20ECE :                     ; --------------------------------------------------------
     431/   20ECE :                     
     432/   20ECE :                     ; 	data_bank MCD_DBANK1,-1
     433/   20ECE :                     ; 		org $200000-4
     434/   20ECE :                     ; 		dc.b "BNK1"
     435/   20ECE :                     ; 	data_bank_e MCD_DBANK1_e
     436/   20ECE :                     
     437/   20ECE :                     ; --------------------------------------------------------
     438/   20ECE :                     ; BANK 2
     439/   20ECE :                     ; --------------------------------------------------------
     440/   20ECE :                     
     441/   20ECE :                     ; 	data_bank MCD_DBANK2,-1
     442/   20ECE :                     ; 		org $300000-4
     443/   20ECE :                     ; 		dc.b "BNK2"
     444/   20ECE :                     ; 	data_bank_e MCD_DBANK2_e
     445/   20ECE :                     
     446/   20ECE :                     ; --------------------------------------------------------
     447/   20ECE :                     ; BANK 3
     448/   20ECE :                     ; --------------------------------------------------------
     449/   20ECE :                     
     450/   20ECE :                     ; 	data_bank MCD_DBANK3,-1
     451/   20ECE :                     ; 		org $400000-4
     452/   20ECE :                     ; 		dc.b "BNK3"
     453/   20ECE :                     ; 	data_bank_e MCD_DBANK3_e
     454/   20ECE :                     
     455/   20ECE :                     ; ====================================================================
     456/   20ECE :                     ; ----------------------------------------------------------------
     457/   20ECE :                     ; 32X/CD32X ONLY
     458/   20ECE :                     ;
     459/   20ECE :                     ; SDRAM DATA packages for each screen mode
     460/   20ECE :                     ;
     461/   20ECE :                     ; Usage:
     462/   20ECE :                     ; sdram_bank START_LABEL,END_LABEL
     463/   20ECE :                     ; (includes and bincludes)
     464/   20ECE :                     ; sdram_bank_e START_LABEL,END_LABEL
     465/   20ECE :                     ; ----------------------------------------------------------------
     466/   20ECE :                     
     467/   20ECE :                     ; ---------------------------------------------
     468/   20ECE :                     ; SCREEN 00
     469/   20ECE :                     ; ---------------------------------------------
     470/   20ECE :                     
     471/   20ECE : (MACRO)              	sdram_bkset MARSDATA_SCREEN00,MARSDATA_SCREEN00_e
     471/   20ECE :                     ; MARSDATA_DEFAULT:
     471/   20ECE : =$20ECE              MARSDATA_SCREEN00 label *
     472/   20ECE :                     	include "game/screen_0/data_mgfx.asm"
(1)    1/   20ECE :                     ; ===========================================================================
(1)    2/   20ECE :                     ; ----------------------------------------------------------------
(1)    3/   20ECE :                     ; Put your 32X graphics here
(1)    4/   20ECE :                     ;
(1)    5/   20ECE :                     ; This is stored on the Genesis side and then
(1)    6/   20ECE :                     ; sent to SDRAM using DREQ.
(1)    7/   20ECE :                     ;
(1)    8/   20ECE :                     ; Labels MUST be aligned by 4
(1)    9/   20ECE :                     ; ----------------------------------------------------------------
(1)   10/   20ECE :                     
(1)   11/   20ECE :                     		align 4
(1)   12/   20ED0 :                     ArtSSpr_Doremi:
(1)   13/   20ED0 :                     		binclude "game/screen_0/data/mars/objects/doremi/doremi_art.bin"
(1)   14/   2AAD0 :                     		align 4
(1)   15/   2AAD0 :                     ArtSSpr_Sophie:
(1)   16/   2AAD0 :                     		binclude "game/screen_0/data/mars/objects/sophie/sophie_art.bin"
(1)   17/   2F8D0 :                     		align 4
(1)   18/   2F8D0 :                     ArtMars_Scrn0:
(1)   19/   2F8D0 :                     		binclude "game/screen_0/data/mars/maps/test/data_art.bin"
(1)   20/   410D0 :                     		align 4
(1)   21/   410D0 :                     
(1)   22/   410D0 :                     
(1)   23/   410D0 :                     
     473/   410D0 : (MACRO)              	sdram_bkend MARSDATA_SCREEN00,MARSDATA_SCREEN00_e
     473/   410D0 :                                     align $2000     ; DREQ data-pack alignment
     473/   42000 :                     
     474/   42000 :                     
     475/   42000 :                     ; ---------------------------------------------
     476/   42000 :                     ; SCREEN 01
     477/   42000 :                     ; ---------------------------------------------
     478/   42000 :                     
     479/   42000 : (MACRO)              	sdram_bkset MARSDATA_SCREEN01,MARSDATA_SCREEN01_e
     479/   42000 :                     ; MARSDATA_DEFAULT:
     479/   42000 : =$42000              MARSDATA_SCREEN01 label *
     480/   42000 :                     	include "game/screen_1/data_mgfx.asm"
(1)    1/   42000 :                     ; ===========================================================================
(1)    2/   42000 :                     ; ----------------------------------------------------------------
(1)    3/   42000 :                     ; Put your 32X graphics here, indexed or direct
(1)    4/   42000 :                     ;
(1)    5/   42000 :                     ; This is stored on the Genesis side and then
(1)    6/   42000 :                     ; sent to SDRAM using DREQ.
(1)    7/   42000 :                     ;
(1)    8/   42000 :                     ; Labels MUST be aligned by 4
(1)    9/   42000 :                     ; ----------------------------------------------------------------
(1)   10/   42000 :                     
(1)   11/   42000 :                     		align 4
(1)   12/   42000 :                     ArtMars_TEST:
(1)   13/   42000 :                     		binclude "game/screen_1/data/mars/maps/test/data_art.bin"
(1)   14/   53800 :                     		align 4
(1)   15/   53800 :                     
(1)   16/   53800 :                     
(1)   17/   53800 :                     
     481/   53800 : (MACRO)              	sdram_bkend MARSDATA_SCREEN01,MARSDATA_SCREEN01_e
     481/   53800 :                                     align $2000     ; DREQ data-pack alignment
     481/   54000 :                     
     482/   54000 :                     
     483/   54000 :                     ; ====================================================================
     484/   54000 :                     ; ----------------------------------------------------------------
     485/   54000 :                     ; Cartridge DMA graphics data
     486/   54000 :                     ;
     487/   54000 :                     ; BANK-free on 32X Cartridge
     488/   54000 :                     ; ----------------------------------------------------------------
     489/   54000 :                     
     491/   54000 :                     		include "game/screen_0/data_dma.asm"
(1)    1/   54000 :                     ; ===========================================================================
(1)    2/   54000 :                     ; ----------------------------------------------------------------
(1)    3/   54000 :                     ; DMA Genesis graphics for this screen mode
(1)    4/   54000 :                     ; ----------------------------------------------------------------
(1)    5/   54000 :                     
(1)    6/   54000 :                     ASCII_FONT:	binclude "system/md/data/font.bin"
(1)    7/   54C00 :                     
(1)    8/   54C00 :                     ; ----------------------------------------------------------------
(1)    9/   54C00 :                     
(1)   10/   54C00 :                     Art_Scn0_BG:	binclude "game/screen_0/data/md/maps/test/md_art.bin"
(1)   11/   5D5C0 :                     Art_Scn0_BG_e:
(1)   12/   5D5C0 :                     		align 2
(1)   13/   5D5C0 :                     Art_Bibi:	binclude "game/screen_0/data/md/objects/bibi/bibi_art.bin"
(1)   14/   5EDE0 :                     Art_Bibi_e:
(1)   15/   5EDE0 :                     		align 2
(1)   16/   5EDE0 :                     Art_Doremi:	binclude "game/screen_0/data/md/objects/doremi/doremi_art.bin"
(1)   17/   5F3E0 :                     Art_Doremi_e:
(1)   18/   5F3E0 :                     		align 2
(1)   19/   5F3E0 :                     Art_Emily:	binclude "game/screen_0/data/md/objects/emily/emi_art.bin"
(1)   20/   61F60 :                     Art_Emily_e:
(1)   21/   61F60 :                     		align 2
(1)   22/   61F60 :                     Art_Sophie:	binclude "game/screen_0/data/md/objects/sophie/sophie_art.bin"
(1)   23/   62A80 :                     Art_Sophie_e:
(1)   24/   62A80 :                     		align 2
(1)   25/   62A80 :                     
(1)   26/   62A80 :                     
(1)   27/   62A80 :                     
     492/   62A80 :                     		include "game/screen_1/data_dma.asm"
(1)    1/   62A80 :                     ; ===========================================================================
(1)    2/   62A80 :                     ; ----------------------------------------------------------------
(1)    3/   62A80 :                     ; DMA Genesis graphics for this screen mode
(1)    4/   62A80 :                     ; ----------------------------------------------------------------
(1)    5/   62A80 :                     
(1)    6/   62A80 :                     ASCII_FONT_S1:	binclude "system/md/data/font.bin"
(1)    7/   63680 :                     
(1)    8/   63680 :                     ; ----------------------------------------------------------------
(1)    9/   63680 :                     
(1)   10/   63680 :                     ART_TEST:	binclude "game/screen_1/data/md/maps/test/md_art.bin"
(1)   11/   6BE00 :                     ART_TEST_e:
(1)   12/   6BE00 :                     		align 2
(1)   13/   6BE00 :                     Art_Sisi:	binclude "game/screen_1/data/md/objects/sisi/sisi_art.bin"
(1)   14/   6C3E0 :                     Art_Sisi_e:
(1)   15/   6C3E0 :                     		align 2
(1)   16/   6C3E0 :                     
     494/   6C3E0 :                     
     495/   6C3E0 :                     ; ====================================================================
     496/   6C3E0 :                     ; ---------------------------------------------
     497/   6C3E0 :                     ; End
     498/   6C3E0 :                     ; ---------------------------------------------
     499/   6C3E0 :                     
     500/   6C3E0 :                     ROM_END:
     505/   6C3E0 :                     		align $8000			; Cartridge padding
     507/   70000 :                     
 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 3 - 03/24/2024 05:45:07 AM


  Symbol Table (* = unused):
  --------------------------

*ADAPTER :                        0 - | *ADEN :                           1 - |
 ALV :                           24 - |
*ARCHITECTURE :                                      "x86_64-unknown-linux" - |
*ARTMARS_SCRN0 :              2F8D0 C | *ARTMARS_TEST :               42000 C |
*ARTSSPR_DOREMI :             20ED0 C | *ARTSSPR_SOPHIE :             2AAD0 C |
 ART_BIBI :                   5D5C0 C | *ART_BIBI_E :                 5EDE0 C |
 ART_DOREMI :                 5EDE0 C | *ART_DOREMI_E :               5F3E0 C |
 ART_EMILY :                  5F3E0 C | *ART_EMILY_E :                61F60 C |
 ART_SCN0_BG :                54C00 C |  ART_SCN0_BG_E :              5D5C0 C |
 ART_SISI :                   6BE00 C |  ART_SISI_E :                 6C3E0 C |
 ART_SOPHIE :                 61F60 C | *ART_SOPHIE_E :               62A80 C |
 ART_TEST :                   63680 C |  ART_TEST_E :                 6BE00 C |
 ASCII_FONT :                 54000 C |  ASCII_FONT_S1 :              62A80 C |
 ASCII_PAL :                    3F6 C |  ATK :                            8 - |
*BIGENDIAN :                      0 - |  BITCLICKL :                      0 - |
*BITCLICKM :                      2 - | *BITCLICKR :                      1 - |
*BITCLICKS :                      3 - |  BITDISPENBL :                    6 - |
 BITDMA :                         1 - |  BITDMAENBL :                     4 - |
*BITFIFOE :                       9 - | *BITFIFOF :                       8 - |
*BITHBLK :                        2 - | *BITHINTENBL :                    4 - |
*BITHVSTOP :                      1 - | *BITJOYA :                        6 - |
 BITJOYB :                        4 - |  BITJOYC :                        5 - |
 BITJOYDOWN :                     1 - |  BITJOYLEFT :                     2 - |
*BITJOYMODE :                     B - |  BITJOYRIGHT :                    3 - |
 BITJOYSTART :                    7 - |  BITJOYUP :                       0 - |
*BITJOYX :                        A - | *BITJOYY :                        9 - |
*BITJOYZ :                        8 - | *BITMAPMD :                       1 - |
 BITOBJ_FLIPH :                   0 - |  BITOBJ_FLIPV :                   1 - |
 BITOBJ_MARS :                    7 - | *BITODD :                         4 - |
*BITPAL :                         0 - | *BITSPRCOL :                      5 - |
*BITSPROVR :                      6 - | *BITV30 :                         3 - |
 BITVBLK :                        3 - | *BITVINT :                        7 - |
*BITVINTENBL :                    5 - | *BITWRAMMODE :                    2 - |
*BRANCHEXT :                      0 - | *CASESENSITIVE :                  0 - |
 CDRAMDST :                      31 C |  CDRAMLEN :                      30 C |
 CDRAMSRC :                      33 C |  CDRAMSRCB :                     35 C |
 CHECK_THISRAM :   FFFFFFFFFFFFA000 C |  CHIP_ENV :                    1084 C |
 CHIP_ENV.ATKEND :             1107 C | *CHIP_ENV.ATKZERO :            110A C |
 CHIP_ENV.CHK2 :               1110 C |  CHIP_ENV.CHK4 :               1145 C |
 CHIP_ENV.CKOF :               10A8 C |  CHIP_ENV.CKON :               10BB C |
*CHIP_ENV.DECTMR :             1114 C |  CHIP_ENV.DKADD :              112E C |
 CHIP_ENV.DKSAV :              1136 C |  CHIP_ENV.DKYEND :             113B C |
 CHIP_ENV.DO_NFREQ :           119A C |  CHIP_ENV.ENVPROC :            10D9 C |
 CHIP_ENV.KILLENV :            115B C | *CHIP_ENV.NBLOCK :             10D9 C |
 CHIP_ENV.NORMAL :             1195 C |  CHIP_ENV.NOUPD :              11DB C |
 CHIP_ENV.NSKIP :              10D0 C |  CHIP_ENV.SILNC_3 :            1191 C |
 CHIP_ENV.VEDLP :              1163 C |  CHIP_ENV.VLMUCH :             11C7 C |
 CHIP_ENV.VLOOP :              1090 C |  CHIP_ENV.VONLY :              11BD C |
 CHNL_CHIP :                      1 - |  CHNL_EFFARG :                    6 - |
 CHNL_EFFID :                     5 - |  CHNL_FLAGS :                     0 - |
 CHNL_INS :                       3 - |  CHNL_NOTE :                      2 - |
 CHNL_TYPE :                      7 - |  CHNL_VOL :                       4 - |
*CLICKL :                         2 - | *CLICKM :                         4 - |
*CLICKR :                         1 - | *CLICKS :                         8 - |
*CMDINTCLR :                     1A - | *CMDIRQ_ON :                      2 - |
 COM :                            0 - | *COMM0 :                         20 - |
*COMM1 :                         21 - | *COMM10 :                        2A - |
*COMM11 :                        2B - | *COMM12 :                        2C - |
*COMM13 :                        2D - | *COMM14 :                        2E - |
*COMM15 :                        2F - | *COMM2 :                         22 - |
*COMM3 :                         23 - | *COMM4 :                         24 - |
*COMM5 :                         25 - | *COMM6 :                         26 - |
*COMM7 :                         27 - | *COMM8 :                         28 - |
*COMM9 :                         29 - |  COMMZFIFO :                     40 C |
 COMMZREAD :                     3F C |  COMMZROMBLK :                   2F C |
 COMMZWRITE :                    2E C | *COMPMODE :                       0 - |
*CONSTPI :        3.141592653589793 - |  CONTROLLER_1 :    FFFFFFFFFFFFC004 - |
 CONTROLLER_2 :    FFFFFFFFFFFFC014 - | *CS0 :                            0 - |
*CS1 :                      2000000 - |  CS2 :                      4000000 - |
*CS3 :                      6000000 - |  CURRTICKBITS :                1C98 C |
*CUSTOM :                         0 - | *CYCLE :                         32 - |
*DACINS_KICK_TECHNO :         1DFBA C |  DACINS_KICK_WEGOT :          20754 C |
*DACINS_NADIE :               10000 C | *DACINS_SNARE_TECHNO :        1E65C C |
 DAC_FILL :                      20 C |  DAC_ME :                         8 C |
 DAC_OFF :                     1216 C |  DAC_ON :                      1201 C |
 DAC_PLAY :                    122B C |  DAC_REFILL :                  125F C |
 DAC_REFILL.DACFILL_END :      131E C |  DAC_REFILL.DACFILL_LOOP :     12D7 C |
 DAC_REFILL.DACFILL_RET :      1321 C |  DAC_REFILL.DAC_OVER :         12AD C |
 DATE :                "03/24/2024" - |  DDACCNTR :                    1C87 C |
 DDACFIFOMID :                 1C83 C |  DDACPNTR :                    1C84 C |
*DISPENBL :                      40 - |  DKY :                            C - |
*DMAENBL :                       10 - | *DOTTEDSTRUCTS :                  0 - |
*DREQCTL :                        6 - | *DREQDEST :                       C - |
*DREQFIFO :                      12 - | *DREQLEN :                       10 - |
*DREQSOURCE :                     8 - |  DRV_LOOP :                      54 C |
 DRV_LOOP.CMND_0 :               EA C |  DRV_LOOP.CMND_1 :               ED C |
 DRV_LOOP.CMND_2 :              106 C |  DRV_LOOP.CMND_3 :              143 C |
 DRV_LOOP.CMND_5 :              181 C |  DRV_LOOP.CMND_6 :              1BA C |
 DRV_LOOP.CMND_7 :              1F3 C |  DRV_LOOP.CMND_RDSLOT :         211 C |
 DRV_LOOP.DEL_ALL :             17A C |  DRV_LOOP.GETCBYTEL :            BD C |
 DRV_LOOP.GRAB_ARG :             BB C |  DRV_LOOP.LIST :                 DA C |
 DRV_LOOP.NEITHER :              94 C |  DRV_LOOP.NEXT_CMD :             98 C |
 DRV_LOOP.NOBEATS :              7B C |  DRV_LOOP.NOTICKS :              6E C |
 DRV_LOOP.NOT_PAL :             206 C |  DRV_LOOP.SRCH_DEL :            161 C |
 DRV_LOOP.SRCH_FVOL :           19F C |  DRV_LOOP.SRCH_MODE :           129 C |
 DRV_LOOP.SRCH_SLOT :           224 C |  DRV_LOOP.SRCH_VOL :            1D8 C |
 DRV_LOOP.WRTTO_DEL :           16E C |  DRV_LOOP.WRTTO_FVOL :          1AC C |
 DRV_LOOP.WRTTO_SLOT :          138 C |  DRV_LOOP.WRTTO_VOL :           1E5 C |
 DTBL_MULTI :                   844 C |  DTBL_SINGL :                   85A C |
 DTBL_SINGL.CHNL_ULNK :         F23 C |  DTBL_SINGL.CHNL_ULNKCUT :      F1D C |
 DTBL_SINGL.CHNL_ULNKOFF :      F23 C |  DTBL_SINGL.COMN_PANLIST :      CCB C |
 DTBL_SINGL.DAC_CUT :           BA0 C |  DTBL_SINGL.DAC_OFF :           BA6 C |
 DTBL_SINGL.DAC_PITCH :         BA9 C |  DTBL_SINGL.D_CONT :            C84 C |
 DTBL_SINGL.EFFC :              BF1 C |  DTBL_SINGL.EFFC_D :            C0C C |
 DTBL_SINGL.EFFC_E :            C4F C |  DTBL_SINGL.EFFC_F :            C64 C |
 DTBL_SINGL.EFFC_X :            C85 C |  DTBL_SINGL.FINE_DOWN :         C27 C |
 DTBL_SINGL.FINE_UP :           C3B C |  DTBL_SINGL.FM_CINDX :          B3D C |
 DTBL_SINGL.FM_CUT :            A88 C |  DTBL_SINGL.FM_HASVOL :         EB7 C |
 DTBL_SINGL.FM_KEYOFF :         A91 C |  DTBL_SINGL.FM_OFF :            A82 C |
 DTBL_SINGL.FM_SETFREQ :        AB0 C |  DTBL_SINGL.FM_SETRLIST :       DCE C |
 DTBL_SINGL.FM_TLOFF :          A99 C |  DTBL_SINGL.FM_WRTALPAN :       B45 C |
 DTBL_SINGL.FM_WRTLVOL :        AC7 C |  DTBL_SINGL.FND_OCT :           F08 C |
 DTBL_SINGL.FROM_PSGN :         954 C |  DTBL_SINGL.GET_OCT :           EFD C |
 DTBL_SINGL.INST :              CFC C |  DTBL_SINGL.INS_DAC :           DDE C |
 DTBL_SINGL.INS_FM :            D5D C |  DTBL_SINGL.INS_PCM :           E32 C |
 DTBL_SINGL.INS_PSG :           D27 C |  DTBL_SINGL.INS_PSGN :          D21 C |
 DTBL_SINGL.INS_PWM :           E6A C | *DTBL_SINGL.INVL_INS :          D20 C |
 DTBL_SINGL.KEEP_TLMX :         B32 C |  DTBL_SINGL.KYCUT_PSG :         9A0 C |
 DTBL_SINGL.KYCUT_PSGN :        99D C |  DTBL_SINGL.KYOFF_PSG :         993 C |
 DTBL_SINGL.KYOFF_PSGN :        990 C |  DTBL_SINGL.KYPSGN_HATOFF :     9AA C |
 DTBL_SINGL.LINKED :            8C4 C |  DTBL_SINGL.MKFM_SET :          A13 C |
 DTBL_SINGL.MK_DAC :            B7B C |  DTBL_SINGL.MK_FM :             9B1 C |
 DTBL_SINGL.MK_FMSPC :          A27 C |  DTBL_SINGL.MK_LIST :           8FF C |
 DTBL_SINGL.MK_PCM :            BCF C |  DTBL_SINGL.MK_PSG :            933 C |
 DTBL_SINGL.MK_PSGN :           90D C |  DTBL_SINGL.MK_PWM :            BD0 C |
 DTBL_SINGL.NEW_ROMDAT :        D91 C | *DTBL_SINGL.NOFM_NOTE :         A26 C |
 DTBL_SINGL.NORM_DOWN :         C25 C |  DTBL_SINGL.NORM_UP :           C3D C |
 DTBL_SINGL.NOTE :              EAD C |  DTBL_SINGL.NOT_DAC :           9D0 C |
 DTBL_SINGL.NOT_DSPC :          9E5 C |  DTBL_SINGL.NO_LFO :            B7A C |
 DTBL_SINGL.N_FM :              EF3 C |  DTBL_SINGL.N_INDX :            EDF C |
 DTBL_SINGL.N_PSGN :            EEE C |  DTBL_SINGL.N_STFREQ :          EE0 C |
 DTBL_SINGL.PAN_MCD :           CB5 C |  DTBL_SINGL.PCM_PANLIST :       CD3 C |
 DTBL_SINGL.PSG_KEYON :         97B C |  DTBL_SINGL.RCYL_COM :          8AF C |
*DTBL_SINGL.READFREQ_PCM :      BD1 C | *DTBL_SINGL.READFREQ_PWM :      BD6 C |
 DTBL_SINGL.RES_PAN :           CAB C |  DTBL_SINGL.SAME_PATCH :        DC9 C |
 DTBL_SINGL.SAVE_ARG :          C79 C |  DTBL_SINGL.SET_WAVFREQ :       BD9 C |
 DTBL_SINGL.SILN_DAC :          8BB C |  DTBL_SINGL.SILN_FM :           8BE C |
 DTBL_SINGL.SILN_PCM :          899 C |  DTBL_SINGL.SILN_PSG :          892 C |
 DTBL_SINGL.SILN_PSG_N :        88E C |  DTBL_SINGL.SILN_PWM :          8A5 C |
 DTBL_SINGL.SPCREGLIST :        A7A C |  DTBL_SINGL.TL_DOWN :           AA5 C |
 DTBL_SINGL.VMUCH :             98A C |  DTBL_SINGL.VOLU :              CF3 C |
 DTBL_SINGL.VOL_DVLD :          C4B C |  DTBL_SINGL.WRITE_TL :          B2B C |
 DTBL_SINGL.WR_SPC :            A5D C |  DTH :                           20 - |
 DTL :                           1C - |  DWAVEBUFF :                   1D00 C |
*EMU :                            0 - |  EXT_3 :                          C C |
*EXT_4 :                          E C | *FALSE :                          0 - |
*FEN :                            2 - | *FILLDATA :                       8 - |
*FILLLENGTH :                     4 - | *FILLSTART :                      6 - |
 FLG :                           28 - | *FM :                            80 - |
 FMCACH_1 :                    153E C |  FMCACH_2 :                    1566 C |
 FMCACH_3 :                    158E C |  FMCACH_4 :                    15B6 C |
 FMCACH_5 :                    15DE C |  FMCACH_6 :                    1606 C |
 FMCACH_LIST :                 1C70 C |  FMFREQ_LIST :                 1330 C |
*FMINS_AMBIENT_3 :             E8A5 C | *FMINS_AMBIENT_DARK :          E865 C |
*FMINS_AMBIENT_SPOOK :         E885 C | *FMINS_BANJO_PUY :             E725 C |
*FMINS_BASS_1 :                E365 C | *FMINS_BASS_2 :                E385 C |
*FMINS_BASS_4 :                E465 C | *FMINS_BASS_8 :                E485 C |
*FMINS_BASS_CALM :             E4C5 C | *FMINS_BASS_CLUB :             E4A5 C |
*FMINS_BASS_DONNA :            E3A5 C |  FMINS_BASS_DUCK :             E445 C |
*FMINS_BASS_GROOVE :           E3C5 C | *FMINS_BASS_GROOVE_2 :         E3E5 C |
*FMINS_BASS_GROOVE_GEM :       E405 C | *FMINS_BASS_ITALO :            E425 C |
 FMINS_BASS_LOW_1 :            E4E5 C | *FMINS_BASS_OIL :              E505 C |
 FMINS_BRASS_EUR :             E5E5 C | *FMINS_BRASS_PUY :             E605 C |
 FMINS_CLOSEDHAT :             E825 C |  FMINS_DING_1 :                E765 C |
*FMINS_DING_BASEBALL :         E645 C | *FMINS_DING_TOY :              E6E5 C |
*FMINS_DRUMKICK_GEM :          E665 C | *FMINS_FLAUTE_CAVE :           E705 C |
 FMINS_FM3_EXPLOSION :         E2C5 C | *FMINS_GUITAR_BBALL :          E7C5 C |
 FMINS_HATS_1 :                E7E5 C |  FMINS_HATS_CLOSED :           E805 C |
 FMINS_HBEAT_TOM :             E7A5 C | *FMINS_MARIMBA :               E6C5 C |
*FMINS_ORGAN2 :                E285 C |  FMINS_ORGAN2A :               E2A5 C |
*FMINS_ORGAN_ITO :             E625 C | *FMINS_PIANOM1 :               E525 C |
*FMINS_PIANO_AQUA :            E545 C | *FMINS_PIANO_HARD :            E565 C |
*FMINS_PSYNTH_PLUS :           E745 C | *FMINS_SEWER_1 :               E845 C |
*FMINS_SP_CLOSEDHAT :          E315 C | *FMINS_SP_COWBELL :            E33D C |
 FMINS_SP_OPENHAT :            E2ED C | *FMINS_SYNTH_PLUS :            E585 C |
*FMINS_TROMBONE_GEM :          E785 C |  FMINS_TRUMPET_1 :             E5A5 C |
*FMINS_TRUMPET_2 :             E685 C |  FMINS_TRUMPET_CARNIVAL :      E5C5 C |
*FMINS_TRUMPET_PUY :           E6A5 C |  FMSPECIAL :                   1C82 C |
 FM_AUTOREG :                  11E7 C |  FM_SEND_1 :                   11EB C |
 FM_SEND_2 :                   11F6 C | *FRAMECTL :                       B - |
*FS :                             1 - | *FULLPMMU :                       1 - |
 GEMADMAPAUSE :                 2E6 C |  GEMADMARESUME :                2E8 C |
 GEMAFADETRACK :                342 C |  GEMAMSTRLISTPOS :               1C C |
 GEMAPLAYTRACK :                302 C |  GEMASETBEATS :                 376 C |
 GEMASETMASTERLIST :            2F4 C |  GEMASETTRACKVOL :              35A C |
*GEMASFX_ALL :                 5B00 C |  GEMASFX_ALL.BLK :             5B0E C |
 GEMASFX_ALL.INS :             5BD4 C |  GEMASFX_ALL.PAT :             5B14 C |
 GEMASTOPALL :                  32C C |  GEMASTOPTRACK :                318 C |
 GEMATEST :                     2EA C |  GEMATRK_ARENA1 :              95D6 C |
 GEMATRK_ARENA1.INS :          95E4 C |  GEMATRK_ASTRAL :              C538 C |
 GEMATRK_ASTRAL.BLK :          C616 C |  GEMATRK_ASTRAL.INS :          C546 C |
 GEMATRK_ASTRAL.PATT :         C632 C |  GEMATRK_CRYSTAL :             839C C |
 GEMATRK_CRYSTAL.BLK :         83AA C |  GEMATRK_CRYSTAL.INS :         95A6 C |
 GEMATRK_CRYSTAL.PAT :         83B2 C |  GEMATRK_DREAM :               6C4C C |
 GEMATRK_DREAM.BLK :           6C5A C |  GEMATRK_DREAM.INS :           8324 C |
 GEMATRK_DREAM.PAT :           6C67 C | *GEMATRK_MOVEME :              5C76 C |
 GEMATRK_MOVEME.BLK :          5C84 C |  GEMATRK_MOVEME.INS :          6BB4 C |
 GEMATRK_MOVEME.PAT :          5C9C C | *GEMATRK_TEST_0 :              5BFC C |
 GEMATRK_TEST_0.BLK :          5C12 C |  GEMATRK_TEST_0.INS :          5C0A C |
 GEMATRK_TEST_0.PAT :          5C15 C |  GEMA_INIT :                    F3F C |
 GEMA_INIT.END_SETUP :          FAA C |  GEMA_INIT.SETUP_LIST :         F7F C |
 GEMA_INIT.ST_COPY :            F9E C |  GEMA_LASTBANK :               1325 C |
 GEMA_LASTBANK.WRITE :         132A C |  GEMA_MASTERLIST :             5AF0 C |
 GET_TICK :                     FAB C |  GET_TICK.CTNOTICK :            FC8 C |
 GLBL_LASTORG :    FFFFFFFFFFFFD404 - |  GLBL_LASTPC :                 37B2 - |
*HAS64 :                          1 - | *HASDSP :                         0 - |
*HASFPU :                         0 - | *HASPMMU :                        0 - |
*HBLK :                          40 - | *HCOUNT :                         5 - |
 HEADEROUT :                   1C9F C |  HEADEROUT_E :                 1CAD C |
*HINTCLR :                       18 - | *HINTENBL :                      10 - |
 HINT_DEFAULT :                130A C | *HIRQ_ON :                        4 - |
*HVSTOP :                         2 - | *INEXTMODE :                      0 - |
*INLWORDMODE :                    0 - | *INMAXMODE :                      0 - |
*INSRCMODE :                      0 - |  INSTLISTOUT :                 1CAF C |
*INSUPMODE :                      1 - | *INTMASK :                        1 - |
 JOYA :                          40 - |  JOYB :                          10 - |
 JOYC :                          20 - |  JOYDOWN :                        2 - |
*JOYID_MD :                       D - |  JOYID_MOUSE :                    3 - |
*JOYID_MS :                       F - |  JOYLEFT :                        4 - |
*JOYMODE :                      800 - |  JOYRIGHT :                       8 - |
*JOYSTART :                      80 - |  JOYUP :                          1 - |
*JOYX :                         400 - | *JOYY :                         200 - |
*JOYZ :                         100 - | *LCHWIDTH :                      34 - |
 LEV :                            4 - | *LISTON :                         3 - |
 LIST_VDPREGS :                 3E2 C | *MACEXP :                         7 - |
*MAPMARS_SCRN0 :               3C5C C | *MAPMARS_TEST :                4D84 C |
 MAP_SCR0_BG :                 400C C |  MAP_TEST :                    51B4 C |
 MARS :                           0 - |  MARSBLOCK :                     37 C |
 MARSCD :                         0 - |  MARSDATA_SCREEN00 :          20ECE C |
 MARSDATA_SCREEN01 :          42000 C |  MARSUPD :                     1C8A C |
*MARS_RAMCODE :                3334 C | *MARS_RAMCODE_E :              3334 C |
 MAX_BUFFNTRY :                   8 - |  MAX_MDDMATSK :                  18 - |
 MAX_MDOBJ :                     18 - |  MAX_MDOTHER :                  E00 - |
 MAX_MDSYSTEM :                 600 - |  MAX_MDVIDEO :                 2000 - |
 MAX_RCACH :                     20 - |  MAX_SCRNBUFF :                1800 - |
 MAX_SRAMSIZE :                 400 - |  MAX_SYSCODE :                 2000 - |
 MAX_TBLSIZE :                   18 - |  MAX_TRFRPZ :                     8 - |
 MAX_TRKCHN :                    20 - |  MAX_TRKINDX :                   1A - |
 MAX_USERCODE :                8000 - |  MAX_ZCMND :                     10 - |
 MCD :                            0 - |  MCDBLOCK :                      36 C |
 MCDUPD :                      1C8B C | *MCD_COMM_M :                     E - |
*MCD_COMM_S :                     F - | *MCD_DBANK0 :                  3C5C C |
 MCD_DCOMM_M :                   10 - | *MCD_DCOMM_S :                   20 - |
*MCD_HINT :                       6 - | *MCD_INTMASK :                   32 - |
*MCD_MEMORY :                     3 - |  MDBANK0 :                     3C5C C |
 MDBANK0_E :                  20ECE C |  MDSYS_SINEDATA :              11A4 C |
*MD_BANK_SRAM :              A130F1 - |  MD_READMODES :                1354 C |
 MD_READMODES.PICK_MODE :      1370 C |  MD_SCREEN00 :                 3334 C |
 MD_SCREEN00_E :               37B2 C |  MD_SCREEN01 :                 37B2 C |
 MD_SCREEN01_E :               3C5C C | *MD_SYSCODE_E :                13B4 C |
 MODE :                          18 - |  MODE_INIT :                   12C2 C |
 MODE_INIT.CLR :               12EC C | *MOMCPU :                     68000 - |
*MOMCPUNAME :               "68000" - | *MONOWIDTH :                     38 - |
 MOUSE_X :                        8 C |  MOUSE_Y :                        A C |
*NESTMAX :                      100 - |  NIKONA_BUFFLIST :             1468 C |
 NIKONA_BUFFLIST_E :           1488 C |  OBJDMA_BIBI :                 4C78 C |
 OBJDMA_DOREMI :               4B88 C |  OBJDMA_EMILY :                4AA2 C |
 OBJDMA_SOPHIE :               4D5C C |  OBJECTS_ADD :                  CD2 C |
 OBJECTS_ADD.CLR :              D02 C |  OBJECTS_ADD.FROM_DEL :         D12 C |
 OBJECTS_ADD.SEARCH :           CE4 C |  OBJECTS_ADD.USE_IT :           CF6 C |
 OBJECTS_CLEAR :                C4C C |  OBJECTS_CLEAR.CLR :            C54 C |
 OBJECTS_CLEAR.CLR_D :          C62 C |  OBJECTS_RUN :                  C7A C |
 OBJECTS_RUN.NEXT_ONE :         C82 C |  OBJECTS_RUN.NO_CODE :          C8E C |
*OBJECTS_SET :                  C98 C |  OBJECTS_SET.CLR :              CA6 C |
 OBJECTS_SET.FROM_DEL :         CBE C |  OBJECTS_SHOW :                 D18 C |
 OBJECTS_SHOW.FINISH :          DD6 C |  OBJECTS_SHOW.MK_PZ :           D56 C |
 OBJECTS_SHOW.MK_SPR :          DD2 C |  OBJECTS_SHOW.NEXT :            D28 C |
 OBJECTS_SHOW.RAN_OUT :         DF4 C |  OBJECTS_SHOW.VRAM_H :          DA8 C |
 OBJECTS_SHOW.VRAM_V :          D8E C |  OBJECT_ANIMATE :               EC0 C |
 OBJECT_ANIMATE.EXIT_ANIM :     F4E C |  OBJECT_ANIMATE.GOTOFRAME :     F40 C |
 OBJECT_ANIMATE.KEEPSPD :       F06 C |  OBJECT_ANIMATE.LASTFRAME :     F4A C |
 OBJECT_ANIMATE.NOANIM :        F32 C |  OBJECT_ANIMATE.RETURN :        F30 C |
 OBJECT_ANIMATE.SAMETHING :     EDE C | *OBJECT_COLLISION :             F86 C |
 OBJECT_COLLISION.CHECK_THIS :  FAE C |  OBJECT_COLLISION.EXIT_THIS :   FA8 C |
 OBJECT_COLLISION.NEXT :        F90 C |  OBJECT_COLLISION.NOT_YTOP :   102A C |
 OBJECT_COLLISION.SKIP :        F9E C |  OBJECT_DISPLAY :               E14 C |
 OBJECT_DISPLAY.RAN_OUT :       E32 C |  OBJECT_DISPLAY.SRCH :          E20 C |
 OBJECT_DISPLAY.THIS_ONE :      E30 C | *OBJECT_DMA :                   E5A C |
 OBJECT_DMA_AUTO :              E38 C |  OBJECT_RESETANIM :             F54 C |
 OBJECT_RESETVARS :             DFA C |  OBJECT_RESETVARS.CLR_RAM :     E08 C |
 OBJECT_SPEED :                 F64 C |  OBJMAP_BIBI :                 4B98 C |
 OBJMAP_DOREMI :               4B60 C |  OBJMAP_EMILY :                48E2 C |
 OBJMAP_SISI :                 5A94 C |  OBJMAP_SOPHIE :               4CEC C |
 OBJMKDMA_GO :                  E66 C |  OBJMKDMA_GO.NEXT_PZ :          E92 C |
 OBJMKDMA_GO.NO_DMA :           EBE C |  OBJPAL_DOREMI :               4B42 C |
 OBJPAL_EMILY :                48CC C |  OBJPAL_SISI :                 5A74 C |
 OBJPAL_SOPHIE :               4CCE C |  OBJ_ANIM_ICUR :                 1F C |
 OBJ_ANIM_ID :                   1E C |  OBJ_ANIM_INDX :                 1A C |
 OBJ_ANIM_SPD :                  20 C |  OBJ_CODE :                       0 C |
 OBJ_FRAME :                     1C C | *OBJ_FREE :                      25 C |
 OBJ_INDEX :                     21 C |  OBJ_MAP :                        C C |
 OBJ_RAM :                       26 C |  OBJ_SET :                       22 C |
 OBJ_SIZE :                      10 C | *OBJ_STATUS :                    24 C |
 OBJ_SUBID :                     23 C |  OBJ_VRAM :                      14 C |
 OBJ_X :                          4 C |  OBJ_X_SPD :                     16 C |
 OBJ_Y :                          8 C |  OBJ_Y_SPD :                     18 C |
 ON_HOLD :                        2 C |  ON_PRESS :                       4 C |
*ON_RELEASE :                     6 C | *PACKING :                        0 - |
*PADDING :                        0 - |  PAD_ID :                         0 C |
*PAD_VER :                        1 C | *PALMARS_DOREMI :              3E8C C |
*PALMARS_SCRN0 :               3F8C C | *PALMARS_SOPHIE :              3F0C C |
*PALMARS_TEST :                4FB4 C |  PALMODE :                       3E C |
 PARP :                          34 - |  PCMCOM :                      148A C |
*PEN :                           20 - |  PICO :                           1 - |
 PICO_ENTRY :                   204 C |  PICO_ENTRY.LOOP_RAM :          232 C |
 PICO_ENTRY.PALCLEAR :          25C C |  PICO_ENTRY.WAIT_DMA :          246 C |
 PICO_ERRADDR :                 200 C |  PICO_ERRBUS :                  200 C |
 PICO_ERRCHK :                  200 C |  PICO_ERRILL :                  200 C |
 PICO_ERROR :                   200 C |  PICO_ERROREX :                 200 C |
 PICO_ERRPRIVL :                200 C |  PICO_ERRTRAPV :                200 C |
 PICO_ERRZDIV :                 200 C |  PICO_LINE1010 :                200 C |
 PICO_LINE1111 :                200 C |  PICO_PCMINT :                  202 C |
 PICO_TRACE :                   200 C |  PICO_UNKINT :                  202 C |
 PICO_USERINT :                 202 C |  PROC_CHIPS :                   63F C |
 PSGCOM :                      1502 C |  PSGFREQ_LIST :                1348 C |
 PSGHATMODE :                  1C81 C | *PSG_CTRL :                  C00011 - |
 PTMR :                          38 - |  PVOL :                          30 - |
 PWMCOM :                      14CA C | *PWMCTL :                        31 - |
*PWMINTCLR :                     1C - | *PWMIRQ_ON :                      1 - |
 RAM_FADEMARSDELAY :                                       FFFFFFFFFFFFB8F2 C |
 RAM_FADEMARSINCR :                                        FFFFFFFFFFFFB8F0 C |
 RAM_FADEMARSREQ : FFFFFFFFFFFFB8EE C | *RAM_FADEMARSTMR : FFFFFFFFFFFFB8F4 C |
 RAM_FADEMDDELAY : FFFFFFFFFFFFB8EA C |  RAM_FADEMDINCR :  FFFFFFFFFFFFB8E8 C |
 RAM_FADEMDREQ :   FFFFFFFFFFFFB8E6 C |  RAM_FADEMDTMR :   FFFFFFFFFFFFB8EC C |
 RAM_FRAMECOUNT :  FFFFFFFFFFFFB8D4 C | *RAM_GLBL_FILLER : FFFFFFFFFFFFEC04 C |
 RAM_HORSCROLL :   FFFFFFFFFFFFA004 C |  RAM_INPUTDATA :   FFFFFFFFFFFFC004 C |
*RAM_MDDREQ :      FFFFFFFFFFFFC604 C |  RAM_MDGLOBAL :    FFFFFFFFFFFFEC04 C |
 RAM_MDMARSHINT :  FFFFFFFFFFFFC452 C | *RAM_MDMARSPALFD : FFFFFFFFFFFFA994 C |
 RAM_MDMARSVINT :  FFFFFFFFFFFFC44C C |
*RAM_MDMARS_DRAWALL :                                      FFFFFFFFFFFFB8F6 C |
 RAM_MDOTHER :     FFFFFFFFFFFFC604 C |  RAM_MDSYSTEM :    FFFFFFFFFFFFC004 C |
 RAM_MDVIDEO :     FFFFFFFFFFFFA004 C |  RAM_MEGACD :              FFFFFD00 - |
 RAM_OBJDISPLIST : FFFFFFFFFFFFB724 C |  RAM_OBJECTS :     FFFFFFFFFFFFAD94 C |
 RAM_PALETTE :     FFFFFFFFFFFFA914 C |  RAM_PALETTEFD :   FFFFFFFFFFFFAB94 C |
*RAM_SAVEDATA :    FFFFFFFFFFFFC044 C |  RAM_SCREENMODE :  FFFFFFFFFFFFC458 C |
 RAM_SCRNBUFF :    FFFFFFFFFFFFD404 C |
 RAM_SPRAUTODMACURR :                                      FFFFFFFFFFFFB8DA C |
 RAM_SPRAUTODMASET :                                       FFFFFFFFFFFFB8D8 C |
 RAM_SPRDRWCNTR :  FFFFFFFFFFFFB8DC C |  RAM_SPRITES :     FFFFFFFFFFFFA414 C |
 RAM_SPRLINKNUM :  FFFFFFFFFFFFB8DE C |  RAM_STACK :               FFFFFD00 - |
 RAM_SYSRANDSEED : FFFFFFFFFFFFC448 C |  RAM_SYSRANDVAL :  FFFFFFFFFFFFC444 C |
*RAM_SYSTEMCODE :  FFFFFFFFFFFF0000 C | *RAM_USERCODE :    FFFFFFFFFFFF2000 C |
 RAM_VDPDMAINDX :  FFFFFFFFFFFFB8E0 C |  RAM_VDPDMALIST :  FFFFFFFFFFFFAC14 C |
 RAM_VDPDMAMOD :   FFFFFFFFFFFFB8E2 C |  RAM_VDPREGS :     FFFFFFFFFFFFB8F8 C |
 RAM_VERSCROLL :   FFFFFFFFFFFFA3C4 C |  RAM_VIDPRNTLIST : FFFFFFFFFFFFB754 C |
 RAM_VIDPRNTVRAM : FFFFFFFFFFFFB8E4 C |  RAM_ZCDFLAG_D :           FFFFFF00 - |
 RAM_ZSNDBUFF :            FFFFFF00 - | *RCHWIDTH :                      36 - |
*RELAXED :                        0 - | *RES :                            2 - |
 ROM_END :                    6C3E0 C |  RRT :                           14 - |
 SAMPLEHEAD :                  1CAF C |  SBEATACC :                    1C9B C |
 SBEATPTCK :                   1C9D C |  SETVRAM_BIBI :                 4D0 - |
 SETVRAM_DOREMI :               478 - |  SETVRAM_EMILY :                460 - |
*SETVRAM_MIKAMI :               440 - |  SETVRAM_NICOLE :               4A8 - |
 SETVRAM_SISI :                 480 - |  SETVRAM_SOPHIE :               490 - |
 SET_CHIPS :                    621 C |  SET_CHIPS.TRK_BUFFRS :         629 C |
 SET_DEFAUTODMA :               480 - |  SET_NULLVRAM :                 7FF - |
 SET_PRINTPAL :                   3 - |  SET_PRINTVRAM :                580 - |
*SHIFT :                          2 - |  SHRD_BLK :                    963C C |
 SHRD_PAT :                    9666 C |  SIZEOF_INPUT :                  10 C |
 SIZEOF_MDGLBL :   FFFFFFFFFFFFEC08 C |  SIZEOF_MDOBJ :                  66 C |
 SIZEOF_MDRAM :    FFFFFFFFFFFFD80C C | *SIZEOF_MDSYS :    FFFFFFFFFFFFC45A C |
 SIZEOF_MDVID :    FFFFFFFFFFFFB910 C | *SIZEOF_RAMOTHER : FFFFFFFFFFFFD404 C |
 SLV :                           10 - | *SNDLOCKZ80 :                   286 C |
 SNDREQ_ENTER :                 28A C | *SNDREQ_ENTER.WAIT :            2A6 C |
 SNDREQ_EXIT :                  2AC C | *SNDREQ_SADDR :                 2D0 C |
 SNDREQ_SBYTE :                 2D8 C |  SNDREQ_SCMD :                  2BE C |
 SNDREQ_SLONG :                 2CC C |  SNDREQ_SWORD :                 2D4 C |
*SNDUNLOCKZ80 :                 288 C |  SOUND_INIT :                   276 C |
 SOUND_UPDATE :                 282 C | *STANDBY :                        3 - |
*SYSMARS_ID :                A130EC - | *SYSMARS_REG :               A15100 - |
 SYSMCD_REG :                A12000 - | *SYSMCD_WRAM :               200000 - |
 SYSMDMCD_SETCDDA :            1328 C |  SYSTEM_DMAENTER_RAM :         10BE C |
 SYSTEM_DMAENTER_ROM :         10C6 C |  SYSTEM_DMAEXIT_RAM :          10C2 C |
 SYSTEM_DMAEXIT_ROM :          10CC C | *SYSTEM_GRABRAMCODE :          1352 C |
 SYSTEM_INIT :                 102C C |  SYSTEM_INIT.CLRINPUT :        1056 C |
 SYSTEM_INPUT :                10D2 C |  SYSTEM_INPUT.BAD_Y :          1122 C |
 SYSTEM_INPUT.NO_BIT :         1134 C |  SYSTEM_INPUT.PAGE_IT :        112E C |
 SYSTEM_INPUT.X_VALID :        110A C | *SYSTEM_MARSDATAPACK :         134A C |
*SYSTEM_MARSSENDDREQ :         134C C | *SYSTEM_MARSUPDATE :           134E C |
*SYSTEM_MCDSENDBUFF :          1314 C | *SYSTEM_MCDTRNSFR_RAM :        1312 C |
*SYSTEM_MCDTRNSFR_WRAM :       1310 C | *SYSTEM_MDMCD_CDFADE :         132E C |
*SYSTEM_MDMCD_CDPLAY :         1316 C | *SYSTEM_MDMCD_CDPLAY_L :       1320 C |
 SYSTEM_MDMCD_SUBTASK :        130E C | *SYSTEM_MDMCD_SUBWAIT :        130C C |
*SYSTEM_RANDOM :               113C C |  SYSTEM_RANDOM.GOOD_S :        114A C |
 SYSTEM_RENDER :               107C C |  SYSTEM_RENDER.FORGOT_DISP :   10BC C |
*SYSTEM_RENDER.LOST_FRAME :    10AE C |  SYSTEM_RENDER.WAIT_IN :       109E C |
 SYSTEM_RENDER.WAIT_LAG :      1086 C |  SYSTEM_SETINTS :              12A4 C |
 SYSTEM_SETINTS.NOHINT :       12B4 C |  SYSTEM_SETINTS.NOVINT :       12AC C |
*SYSTEM_SINEWAVE :             1186 C |  SYSTEM_SINEWAVE.DONT_NEG :    11A2 C |
*SYSTEM_SINEWAVE_COS :         1166 C |
 SYSTEM_SINEWAVE_COS.DONT_NEG :                                        1180 C |
 SYSTEM_SRAMINIT :             12B6 C | *SYSTEM_SRAMLOAD :             12BE C |
*SYSTEM_SRAMSAVE :             12BA C | *SYS_CTRL_1 :                A10009 - |
*SYS_CTRL_2 :                A1000B - | *SYS_CTRL_3 :                A1000D - |
*SYS_DATA_1 :                A10003 - | *SYS_DATA_2 :                A10005 - |
*SYS_DATA_3 :                A10007 - | *SYS_EXRAM :                 200000 - |
*SYS_IO :                    A10001 - | *SYS_MSENDDREQ :               1350 C |
*SYS_TMSS :                  A14000 - | *TAG_SRAMDATA :              "SAVE" - |
 TBLBUFF_READ :                 668 C |  TBLBUFF_READ.CHK_PSG :         778 C |
 TBLBUFF_READ.CLRFULL :         83A C |  TBLBUFF_READ.DO_CHIP :         6D2 C |
 TBLBUFF_READ.FIRST_INS :       6E8 C |  TBLBUFF_READ.GRAB_LINK :       72A C |
 TBLBUFF_READ.HAS_INDX :        6AE C |  TBLBUFF_READ.INVLDL :          761 C |
 TBLBUFF_READ.KEEP_IT :         70C C |  TBLBUFF_READ.L_HIPRIO :        7EC C |
 TBLBUFF_READ.NEW_CHIP :        79F C |  TBLBUFF_READ.NEW_LINK :        7E9 C |
 TBLBUFF_READ.NEW_LINK_O :      7E1 C |  TBLBUFF_READ.NEW_LINK_Z :      7DD C |
 TBLBUFF_READ.NEXTSRCH_TBL :    7D6 C |  TBLBUFF_READ.NEXT_INDX :       69F C |
 TBLBUFF_READ.NEXT_PRIO :       7BF C |  TBLBUFF_READ.NO_INDX :         6CA C |
 TBLBUFF_READ.PASS_2 :          7BE C |  TBLBUFF_READ.PICK_TBL :        80F C |
 TBLBUFF_READ.REFILL :          79C C |  TBLBUFF_READ.REROLL :          769 C |
 TBLBUFF_READ.RESET_LINK :      829 C |  TBLBUFF_READ.RNOT_PSG :        79A C |
 TBLBUFF_READ.SET_ASFULL :      80C C |  TBLBUFF_READ.SINGL_FREE :      7FA C |
 TBLBUFF_READ.SINGL_LINK :      78F C |  TBLBUFF_READ.SRCH_FREE :       7AE C |
 TBLBUFF_READ.SRCH_LINK :       748 C |  TBLBUFF_READ.SRCH_LLOOP :      752 C |
 TBLBUFF_READ.TRACK_CONT :      688 C |  TBLBUFF_READ.VALID :           69D C |
 TBLFM :                       1A72 C |  TBLFM3 :                      1AD2 C |
 TBLFM6 :                      1AEA C |  TBLLIST :                     1A00 C |
 TBLPCM :                      1B04 C |  TBLPSG :                      1A10 C |
 TBLPSGN :                     1A5A C |  TBLPWM :                      1BC6 C |
 TH :                      20000000 - |  TICKCNT :                     1C80 C |
 TICKFLAG :                    1C7F C |  TICKSPSET :                   1C7E C |
 TIME :               "05:45:06 AM" - | *TIMERCTL :                      30 - |
*TMR :                           2C - |  TRACK_OUT :                    5DC C |
 TRACK_OUT.INDX_DEL :           5EA C |  TRACK_OUT.NOTHIN :             618 C |
 TRANSFERROM :                  FCC C |  TRANSFERROM.DOUBLE :           FEF C |
 TRANSFERROM.FROM_RAM :        1013 C |  TRANSFERROM.TRANSFER :        1031 C |
 TRANSFERROM.WAIT :            102A C |  TRANSFERROM.X68KLAST :        106A C |
 TRANSFERROM.X68KLOOP :        1056 C |  TRANSFERROM.X68KLPWT :        1078 C |
 TRANSFERROM.X68KNOCARRY :     100D C |  TRANSFERROM.X68KPWTLP :       107A C |
 TRKBLKS_0 :                   16AE C |  TRKBLKS_1 :                   16B6 C |
 TRKBLKS_2 :                   16BE C |  TRKBLKS_3 :                   16C6 C |
 TRKBUFF_0 :                   16CE C |  TRKBUFF_1 :                   170E C |
 TRKBUFF_2 :                   174E C |  TRKBUFF_3 :                   178E C |
 TRKCACH_0 :                   1F00 C |  TRKCACH_1 :                   1F20 C |
 TRKCACH_2 :                   1F40 C |  TRKCACH_3 :                   1F60 C |
 TRKCHNLS :                    1E00 C |  TRKHDRS_0 :                   162E C |
 TRKHDRS_1 :                   164E C |  TRKHDRS_2 :                   166E C |
 TRKHDRS_3 :                   168E C |  TRKINFOCACH :                 1CAF C |
 TRK_BANKBLK :                   17 - |  TRK_BANKHEADS :                 16 - |
 TRK_BANKINS :                   15 - |  TRK_BLOCKS :                     4 - |
 TRK_CACH :                       8 - |  TRK_CACHHALF :                  10 - |
 TRK_CHNINDX :                   26 - |  TRK_CURRBLK :                   13 - |
 TRK_MAXCHNL :                   18 - |  TRK_PATT :                       6 - |
 TRK_PRIORITY :                  14 - |  TRK_READ :                       A - |
 TRK_ROMBLKS :                   23 - |  TRK_ROMINST :                   20 - |
 TRK_ROMPATT :                   1D - |  TRK_ROMPATTREAD :               1A - |
 TRK_ROWPAUSE :                  11 - |  TRK_ROWS :                       C - |
 TRK_SEQID :                      1 - |  TRK_SETBLK :                     2 - |
 TRK_STATUS :                     0 - |  TRK_TICKSET :                    3 - |
 TRK_TICKTMR :                   12 - |  TRK_VOLFDTARGET :               19 - |
 TRK_VOLMASTER :                  E - | *TRUE :                           1 - |
*TVMODE :                         0 - |  UPD_TRACK :                    237 C |
 UPD_TRACK.CHNL_FREE :          351 C |  UPD_TRACK.CONT_CHNL :          35C C |
 UPD_TRACK.DECROW :             300 C |  UPD_TRACK.DECROW_E :           303 C |
 UPD_TRACK.EFFECT_FILL :        52C C |  UPD_TRACK.EFF_A :              3D6 C |
 UPD_TRACK.EFF_B :              3E7 C |  UPD_TRACK.EFF_C :              405 C |
 UPD_TRACK.EXIT :               2F4 C |  UPD_TRACK.FADE_OUT :           281 C |
 UPD_TRACK.FIRST_BLK :          45C C |  UPD_TRACK.FIRST_FILL :         533 C |
 UPD_TRACK.FIRST_HEAD :         4A4 C |  UPD_TRACK.GRAB_RHEAD :         5C9 C |
 UPD_TRACK.HAS_NOTE :           30B C |  UPD_TRACK.INC_CPATT :          408 C |
 UPD_TRACK.KEEP_BLK :           47A C |  UPD_TRACK.KEEP_IT :            4CA C |
 UPD_TRACK.KEEP_VOL :           297 C |  UPD_TRACK.NEXT_CHNL :          336 C |
 UPD_TRACK.NEXT_NOTE :          2E4 C |  UPD_TRACK.NO_EFF :             3A2 C |
 UPD_TRACK.NO_GLBL :            573 C |  UPD_TRACK.NO_INS :             384 C |
 UPD_TRACK.NO_NOTE :            379 C |  UPD_TRACK.NO_VOL :             38F C |
 UPD_TRACK.OLD_TYPE :           36D C |  UPD_TRACK.RAN_OUT :            416 C |
 UPD_TRACK.READ_TRACK :         254 C |  UPD_TRACK.ROW_ACTIVE :         2DD C |
 UPD_TRACK.SET_TRACK :          440 C |  UPD_TRACK.SFXMD :              2A1 C |
 UPD_TRACK.SRCH_NEW :           331 C |  UPD_TRACK.TOO_MUCH :           28D C |
 UPD_TRACK.TRACK_END :          519 C |  UPD_TRACK.TRK_BUFFRS :         23F C |
*VBLK :                          80 - | *VDPSTS :                         A - |
 VDP_CTRL :                  C00004 - |  VDP_DATA :                  C00000 - |
*VERSION :                     142F - |  VIDEO_CLEAR :                  416 C |
*VIDEO_CLEARSCREEN :            416 C |  VIDEO_CLEARSCREEN.PNEXT :      488 C |
 VIDEO_CLEARSCREEN.SNEXT :      476 C |  VIDEO_CLEARSCREEN.XNEXT :      45A C |
 VIDEO_CLEARSCREEN.YNEXT :      468 C | *VIDEO_COPY :                   864 C |
 VIDEO_COPY.DMAW :              87C C |  VIDEO_COPY.DMA_W :             8D4 C |
 VIDEO_DMAMKENTRY :             732 C |  VIDEO_DMAMKENTRY.MK_SET :      76E C |
 VIDEO_DMAMKENTRY.NORMAL :      768 C |  VIDEO_DMAMKENTRY.RAN_OUT :     7E4 C |
 VIDEO_DOPALFADE :              536 C |  VIDEO_DOPALFADE.ACTIVE :       552 C |
 VIDEO_DOPALFADE.FADE_DONE :    55A C |  VIDEO_DOPALFADE.FADE_IN :      55C C |
 VIDEO_DOPALFADE.FADE_LIST :    554 C |  VIDEO_DOPALFADE.FADE_OUT :     5FE C |
 VIDEO_DOPALFADE.NO_BLU :       5D6 C |  VIDEO_DOPALFADE.NO_BLU_O :     658 C |
 VIDEO_DOPALFADE.NO_FNSH :      5EE C |  VIDEO_DOPALFADE.NO_FNSH_O :    66C C |
 VIDEO_DOPALFADE.NO_GRN :       5B6 C |  VIDEO_DOPALFADE.NO_GRN_O :     640 C |
 VIDEO_DOPALFADE.NO_MOVE :      5FC C |  VIDEO_DOPALFADE.NO_MOVE_O :    67A C |
 VIDEO_DOPALFADE.NO_RED :       596 C |  VIDEO_DOPALFADE.NO_RED_O :     628 C |
 VIDEO_DOPALFADE.NXT_PAL :      574 C |  VIDEO_DOPALFADE.NXT_PAL_O :    610 C |
 VIDEO_FADEPAL :                508 C |  VIDEO_FILL :                   7E6 C |
 VIDEO_FILL.DMAW :              7FE C |  VIDEO_FILL.DMA_W :             848 C |
 VIDEO_FULLFADEIN :             492 C |  VIDEO_FULLFADEOUT :            4B8 C |
 VIDEO_INIT :                   38C C |  VIDEO_INIT.CLRRAM :            398 C |
 VIDEO_INIT.LOOP :              3BC C |  VIDEO_LOADART :                67C C |
 VIDEO_LOADART.BAD_SIZE :       6EC C | *VIDEO_LOADART.FROM_RAM :       6EE C |
 VIDEO_LOADART.MK_SET :         6B8 C |  VIDEO_LOADART.NORMAL :         6B2 C |
 VIDEO_LOADART.SHARED_SETUP :   6F0 C |  VIDEO_LOADMAP :                9E4 C |
 VIDEO_LOADMAP.CONT :           A14 C |  VIDEO_LOADMAP.NODBLE :         A32 C |
 VIDEO_LOADMAP.NONULL :         A12 C |  VIDEO_LOADMAP.XLOOP :          9FE C |
 VIDEO_LOADMAP.YLOOP :          9F4 C |  VIDEO_LOADPAL :                512 C |
*VIDEO_MDMARS_DOPALFADE :       9E2 C | *VIDEO_MDMARS_FADEPAL :         9E0 C |
*VIDEO_MDMARS_SYNCFRAME :       9DC C | *VIDEO_MDMARS_VIDEOMODE :       9DE C |
 VIDEO_PRINT :                  A78 C |  VIDEO_PRINT.DONIBL :           B94 C |
 VIDEO_PRINT.EXIT :             B04 C |  VIDEO_PRINT.ISBYTE :           ACE C |
 VIDEO_PRINT.ISLONG :           AF2 C |  VIDEO_PRINT.ISWORD :           AE0 C |
 VIDEO_PRINT.LNGLOOP :          B84 C |  VIDEO_PRINT.LOOP :             A90 C |
 VIDEO_PRINT.LOWR :             BA4 C |  VIDEO_PRINT.NEWJUMP :          A8A C |
 VIDEO_PRINT.NEXT :             ACA C |  VIDEO_PRINT.NEXTV :            B0E C |
 VIDEO_PRINT.NOTHING :          BB0 C |  VIDEO_PRINT.PUTTEXT :          ABC C |
 VIDEO_PRINT.VBYTE :            B40 C |  VIDEO_PRINT.VLONG :            B8C C |
 VIDEO_PRINT.VWORD :            B62 C |  VIDEO_PRINTINIT :              A48 C |
*VIDEO_PRINTPAL :               A62 C |  VIDEO_PRINTPAL.SKIP_PAL :      A76 C |
 VIDEO_RENDER :                 8F0 C |  VIDEO_RENDER.END :             9CC C |
 VIDEO_RENDER.EXIT :            9DA C |  VIDEO_RENDER.NEXT :            9B2 C |
*VIDEO_RUNFADE :                500 C |  VIDEO_UPDATE :                 3C4 C |
*VIDEO_UPDATE.EXIT :            3E0 C |  VIDEO_UPDATE.LOOP :            3D4 C |
 VIDEO_WAITFADE :               4DC C |  VIDEO_WAITFADE.WAIT_FADE :     4E0 C |
 VIDMD_PAL :                    516 C |  VIDMD_PAL.LOOP :               52E C |
 VID_PICKLAYER :                BB6 C |  VID_PICKLAYER.GOLYR :          C00 C |
 VID_PICKLAYER.NOWD :           BEA C |  VID_PICKLAYER.PLAWND :         BDC C |
 VID_PICKLAYER.THISSZ :         C20 C |  VID_PICKLAYER.THISSZJ :        C48 C |
*VINTCLR :                       16 - | *VINTENBL :                      20 - |
 VINT_DEFAULT :                12F4 C | *VIRQ_ON :                        8 - |
*VRESINTCLR :                    14 - |  WAVE_FLAGS :                  1C97 C |
 WAVE_LEN :                    1C8F C |  WAVE_LOOP :                   1C92 C |
 WAVE_PITCH :                  1C95 C |  WAVE_START :                  1C8C C |
 WAVFREQ_CDPCM :               1408 C |  WAVFREQ_LIST :                13A8 C |
 X68KSRCLSB :                  1C99 C |  X68KSRCMID :                  1C9A C |
*YM_CTRL_1 :                 A04000 - | *YM_CTRL_2 :                 A04002 - |
*YM_DATA_1 :                 A04001 - | *YM_DATA_2 :                 A04003 - |
*Z80SYNTAX :                      0 - | *Z80_BUS :                   A11100 - |
*Z80_CODE :                    13B4 C | *Z80_CODE_END :                3334 C |
 Z80_CPU :                   A00000 - |  Z80_INIT :                      50 C |
*Z80_RESET :                 A11200 - | *ZBANK :                       6000 - |
 ZDRVFIFO :                      40 - |  ZDRVFWRT :                      2E - |
*ZDRVMARSBLK :                   37 - | *ZDRVMCDBLK :                    36 - |
*ZDRVRAMLEN :                    30 - | *ZDRVRAMSRC :                    35 - |
*ZDRVROMBLK :                    2F - | *ZMARS_SEND :                   F3E C |
*ZOPCEX :                         8 - |  ZOPCEXX :                       D9 - |
*ZOPCNOP :                        0 - |  ZOPCPUSHAF :                    F5 - |
 ZOPCRET :                       C9 - |  ZPSG_CTRL :                   7F11 - |
 ZSET_TESTME :                    0 - |  ZYM_CTRL_1 :                  4000 - |
 ZYM_CTRL_2 :                  4002 - |  ZYM_DATA_1 :                  4001 - |
 ZYM_DATA_2 :                  4003 - | *_CCR :                    FFFFFE92 - |
*_DMACHANNEL0 :            FFFFFF8C - | *_DMACHANNEL1 :            FFFFFF9C - |
*_DMACOUNT0 :              FFFFFF88 - | *_DMACOUNT1 :              FFFFFF98 - |
*_DMADEST0 :               FFFFFF84 - | *_DMADEST1 :               FFFFFF94 - |
*_DMAOPERATION :           FFFFFFB0 - | *_DMAREQACK0 :             FFFFFFB4 - |
*_DMAREQACK1 :             FFFFFFB8 - | *_DMASOURCE0 :             FFFFFF80 - |
*_DMASOURCE1 :             FFFFFF90 - | *_DMAVECTORE0 :            FFFFFFA4 - |
*_DMAVECTORE1 :            FFFFFFAC - | *_DMAVECTORN0 :            FFFFFFA0 - |
*_DMAVECTORN1 :            FFFFFFA8 - | *_FRAMEBUFFER :            24000000 - |
*_FRC_H :                         2 - | *_FRC_L :                         3 - |
*_FRT :                    FFFFFE10 - | *_HRH :                    FFFFFF10 - |
*_HRL :                    FFFFFF14 - | *_HRL32 :                  FFFFFF04 - |
*_JR :                     FFFFFF00 - | *_OCR_H :                         4 - |
*_OCR_L :                         5 - | *_OVERWRITE :              24020000 - |
*_PALETTE :                20004200 - | *_SERIAL :                 FFFFFE00 - |
*_SYSREG :                 20004000 - | *_TCR :                           6 - |
*_TCSR :                          1 - | *_TIER :                          0 - |
*_TOCR :                          7 - | *_VDPREG :                 20004100 - |

   1107 symbols
    319 unused symbols

 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 4 - 03/24/2024 05:45:07 AM


  Defined Macros:
  ---------------

DATA_BKEND                            | DATA_BKSET                           
ENDSTRCT                              | ERREPORT                             
GEMAHEAD                              | GEMATRK                              
GINSDAC                               | GINSFM                               
GINSFM3                               | GINSNULL                             
GINSPCM                               | GINSPSG                              
GINSPSGN                              | GINSPWM                              
GSMPLDATA                             | ISO_FILE                             
ISO_SETFS                             | LOAD_BANKS                           
REPORT                                | ROMPAD                               
SCREEN_CODE                           | SDRAM_BKEND                          
SDRAM_BKSET                           | STRCT                                
VDP_SHOWME                            |

     25 macros

 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 5 - 03/24/2024 05:45:07 AM


  Defined Functions:
  ------------------

LOCATE                                | MAP_SIZE                             
CELL_SIZE                             | CELL_VRAM                            
VDP_ADDR_R                            | VDP_ADDR_L                           
VDP_ADDR                              |

 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 6 - 03/24/2024 05:45:07 AM


  Code Pages:
  ----------

STANDARD (0 changed characters)

1 code page

0.15 seconds assembly time

  12547 lines source file
  13281 lines incl. macro expansions
      5 passes
      0 errors
      0 warnings
