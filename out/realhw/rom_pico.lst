 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 1 - 02/28/2024 03:57:58 AM


       1/       0 :                     ; ===========================================================================
       2/       0 :                     ; NIKONA MD 16-BIT/32-BIT SDK
       3/       0 :                     ; (C)2023-2024 GenesisFan64
       4/       0 :                     ;
       5/       0 :                     ; For developing games on the Genesis-family of systems
       6/       0 :                     ; including Sega CD, Sega 32X, Sega CD32X and Sega Pico
       7/       0 :                     ;
       8/       0 :                     ; Assemble with a modified AS Macro Assembler by flamewing
       9/       0 :                     ; and a custom version of p2bin:
      10/       0 :                     ;
      11/       0 :                     ; asl main.asm -i "." -olist ROM.lst -q -xx -A -L -D (flags)
      12/       0 :                     ; p2bin -p=00 main.p ROM.bin
      13/       0 :                     ;
      14/       0 :                     ; ASSEMBLER FLAGS:
      15/       0 :                     ; MCD,MARS,MARSCD,PICO,CDREGION,EMU
      16/       0 :                     
      17/       0 :                     ; * System targets, MUST include ALL and set 1 to
      18/       0 :                     ; the target console and the others to 0
      19/       0 :                     ;    MCD - Sega CD
      20/       0 :                     ;   MARS - Sega 32X
      21/       0 :                     ; MARSCD - Sega CD32X
      22/       0 :                     ;   PICO - Sega Pico
      23/       0 :                     ; * ONLY CHOOSE ONE TARGET AT THE TIME *
      24/       0 :                     ;
      25/       0 :                     ; By default the code builds to stock Genesis
      26/       0 :                     ;
      27/       0 :                     ; CDREGION - SEGACD/CD32X ONLY, Set ROM region:
      28/       0 :                     ;            0=Japan 1=USA 2=Europe
      29/       0 :                     ;      EMU - 0=Real hardware, 1=Emulator only
      30/       0 :                     ;
      31/       0 :                     ; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣴⣶⡿⠿⠿⠿⣶⣦⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀
      32/       0 :                     ; ⠀⠀⠀⠀⠀⠀⢀⣠⣶⢟⣿⠟⠁⢰⢋⣽⡆⠈⠙⣿⡿⣶⣄⡀⠀⠀⠀⠀⠀⠀
      33/       0 :                     ; ⠀⠀⠀⠀⣠⣴⠟⠋⢠⣾⠋⠀⣀⠘⠿⠿⠃⣀⠀⠈⣿⡄⠙⠻⣦⣄⠀⠀⠀⠀
      34/       0 :                     ; ⠀⢀⣴⡿⠋⠁⠀⢀⣼⠏⠺⠛⠛⠻⠂⠐⠟⠛⠛⠗⠘⣷⡀⠀⠈⠙⢿⣦⡀⠀
      35/       0 :                     ; ⣴⡟⢁⣀⣠⣤⡾⢿⡟⠀⠀⠀⠘⢷⠾⠷⡾⠃⠀⠀⠀⢻⡿⢷⣤⣄⣀⡈⢻⣦
      36/       0 :                     ; ⠙⠛⠛⠋⠉⠁⠀⢸⡇⠀⠀⢠⣄⠀⠀⠀⠀⣠⡄⠀⠀⢸⡇⠀⠈⠉⠙⠛⠛⠋
      37/       0 :                     ; ⠀⠀⠀⠀⠀⠀⠀⢸⡇⢾⣦⣀⣹⡧⠀⠀⢼⣏⣀⣴⡷⢸⡇⠀⠀⠀⠀⠀⠀⠀
      38/       0 :                     ; ⠀⠀⠀⠀⠀⠀⠀⠸⣧⡀⠈⠛⠛⠁⠀⠀⠈⠛⠛⠁⢀⣼⠇⠀⠀⠀⠀⠀⠀⠀
      39/       0 :                     ; ⠀⠀⠀⠀⠀⠀⠀⢀⣘⣿⣶⣤⣀⣀⣀⣀⣀⣀⣤⣶⣿⣃⠀⠀⠀⠀⠀⠀⠀⠀
      40/       0 :                     ; ⠀⠀⠀⠀⠀⣠⡶⠟⠋⢉⣀⣽⠿⠉⠉⠉⠹⢿⣍⣈⠉⠛⠷⣦⡀⠀⠀⠀⠀⠀
      41/       0 :                     ; ⠀⠀⠀⠀⢾⣯⣤⣴⡾⠟⠋⠁⠀⠀⠀⠀⠀⠀⠉⠛⠷⣶⣤⣬⣿⠀⠀⠀⠀⠀
      42/       0 :                     ; ⠀⠀⠀⠀⠀⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠁⠀⠀⠀⠀⠀
      43/       0 :                     ; ===========================================================================
      44/       0 :                     
      45/       0 :                     ; ====================================================================
      46/       0 :                     ; ----------------------------------------------------------------
      47/       0 :                     ; USER SETTINGS
      48/       0 :                     ; ----------------------------------------------------------------
      49/       0 :                     
      50/       0 :                     ; --------------------------------------------------------
      51/       0 :                     ; 68000 RAM SIZES (MAIN-CPU)
      52/       0 :                     ;
      53/       0 :                     ; MAX_SysCode, MAX_UserCode are only used in Sega CD
      54/       0 :                     ; Sega 32X and CD32X.
      55/       0 :                     ; These sections are free to use on stock Genesis
      56/       0 :                     ; and Pico in case you are not interested on the add-ons.
      57/       0 :                     ;
      58/       0 :                     ; RESERVED RAM ADDRESSES:
      59/       0 :                     ; $FFFB00-$FFFD00 | Stack area a7
      60/       0 :                     ; $FFFD00-$FFFDFF | RESERVED for the Sega CD Vector jumps
 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 2 - 02/28/2024 03:57:58 AM


      61/       0 :                     ;                   FREE if running on cartridge
      62/       0 :                     ;                   (Genesis,32X,Pico)
      63/       0 :                     ; $FFFE00-$FFFEFF | RESERVED for Sega CD, BIOS uses this
      64/       0 :                     ;                   area as temporals
      65/       0 :                     ;                   ** Not sure if this can be used after
      66/       0 :                     ;                   during the application **
      67/       0 :                     ; $FFFF00-$FFFFFF | RESERVED for the Sound Driver:
      68/       0 :                     ;                   The Z80 driver writes to this area
      69/       0 :                     ;                   AND posibilly for the PICO 68k
      70/       0 :                     ;                   driver version of GEMA
      71/       0 :                     ; --------------------------------------------------------
      72/       0 :                     
      73/       0 : =$2000               MAX_SysCode	equ $2000	; Task routines ** CD/32X/CD32X ONLY **
      74/       0 : =$8000               MAX_UserCode	equ $8000	; USER code ** CD/32X/CD32X ONLY **
      75/       0 : =$1800               MAX_ScrnBuff	equ $1800	; Current screen buffer
      76/       0 : =$2000               MAX_MdVideo	equ $2000	; Video cache'd visuals, registers, etc.
      77/       0 : =$600                MAX_MdSystem	equ $0600	; Internal lib stuff and a copy of save data for reading/writing
      78/       0 : =$C00                MAX_MdOther	equ $0C00	; Add-on stuff
      79/       0 :                     
      80/       0 :                     ; ====================================================================
      81/       0 :                     
      82/       0 :                     		org 0
      83/       0 :                     		cpu 		68000		; Starting CPU is 68000
      84/       0 :                     		padding		off		; Dont pad dc.b
      85/       0 :                     		listing 	purecode	; Want listing file
      86/       0 :                     		supmode 	on 		; Supervisor mode (68K)
      87/       0 :                     		dottedstructs	off
      88/       0 :                     		page 		0
      89/       0 :                     
      90/       0 :                     ; ====================================================================
      91/       0 :                     ; ----------------------------------------------------------------
      92/       0 :                     ; Includes
      93/       0 :                     ; ----------------------------------------------------------------
      94/       0 :                     
      95/       0 :                     		include	"macros.asm"		; Assembler macros
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; MACROS section
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; THIS MUST BE INCLUDED AT THE VERY START.
(1)    6/       0 :                     ; ----------------------------------------------------------------
(1)    7/       0 :                     
(1)    8/       0 :                     ; ====================================================================
(1)    9/       0 :                     ; --------------------------------------------------------
(1)   10/       0 :                     ; Functions
(1)   11/       0 :                     ; --------------------------------------------------------
(1)   12/       0 :                     
(1)   13/       0 :                     locate		function a,b,c,(b&$FF)|(a<<8&$FF00)|(c<<16&$FF0000)	; VDP locate: X pos|Y pos|Layer for some video
(1)   14/       0 :                     cell_vram	function a,(a<<5)					; Vram position in 8x8 CELLS
(1)   15/       0 :                     map_size	function l,r,(((l-1)/8)<<16&$FFFF0000|((r-1)/8)&$FFFF)	; Full w/h sizes, for cell sizes use doubleword
(1)   16/       0 :                     ; md_ramloc	function x,-(-x)&$FFFFFFFF
(1)   17/       0 :                     
(1)   18/       0 :                     ; ====================================================================
(1)   19/       0 :                     ; --------------------------------------------------------
(1)   20/       0 :                     ; Macros
(1)   21/       0 :                     ; --------------------------------------------------------
(1)   22/       0 :                     
(1)   23/       0 : =$0                  currPadding	set 0
(1)   24/       0 :                     notZ80		function cpu,(cpu<>128)&&(cpu<>32988)
(1)   25/       0 :                     
(1)   26/       0 :                     ; -------------------------------------
(1)   27/       0 :                     ; Reserve memory
(1)   28/       0 :                     ;
(1)   29/       0 :                     ; (Doesn't work on Z80)
(1)   30/       0 :                     ; -------------------------------------
(1)   31/       0 :                     
(1)   32/       0 :                     strct		macro thisinput			; Reserve memory address
(1)   33/       0 :                     GLBL_LASTPC	set *
(1)   34/       0 :                     		dephase
(1)   35/       0 :                     		phase thisinput
(1)   36/       0 :                     GLBL_LASTORG	set *
(1)   37/       0 :                     		endm
(1)   38/       0 :                     
(1)   39/       0 :                     ; -------------------------------------
(1)   40/       0 :                     ; Finish struct
(1)   41/       0 :                     ; -------------------------------------
(1)   42/       0 :                     
(1)   43/       0 :                     endstrct	macro				; Then finish the custom struct.
(1)   44/       0 :                     		org GLBL_LASTORG
(1)   45/       0 :                     		phase GLBL_LASTPC
(1)   46/       0 :                     		endm
(1)   47/       0 :                     
(1)   48/       0 :                     ; -------------------------------------
(1)   49/       0 :                     ; Report memory usage
(1)   50/       0 :                     ; -------------------------------------
(1)   51/       0 :                     
(1)   52/       0 :                     report		macro text,dis,dat
(1)   53/       0 :                     	if MOMPASS == 2
(1)   54/       0 :                     		if dat == -1
(1)   55/       0 :                     			message text+": \{(dis)&$FFFFFF}"
(1)   56/       0 :                     		else
(1)   57/       0 :                     			if dis > dat
(1)   58/       0 :                     				warning "RAN OUT OF "+text+" SPACE (\{(dis)&$FFFFFF} of \{(dat)&$FFFFFF})"
(1)   59/       0 :                     			else
(1)   60/       0 :                     				message text+" uses \{(dis)&$FFFFFF} of \{(dat)&$FFFFFF}"
(1)   61/       0 :                     			endif
(1)   62/       0 :                     		endif
(1)   63/       0 :                     	endif
(1)   64/       0 :                     		endm
(1)   65/       0 :                     
(1)   66/       0 :                     ; -------------------------------------
(1)   67/       0 :                     ; Same thing but only show on error
(1)   68/       0 :                     ; -------------------------------------
(1)   69/       0 :                     
(1)   70/       0 :                     erreport	macro text,dis,dat
(1)   71/       0 :                     	if MOMPASS == 2
(1)   72/       0 :                     		if dat == -1
(1)   73/       0 :                     			message text+": \{(dis)&$FFFFFF}"
(1)   74/       0 :                     		else
(1)   75/       0 :                     			if dis > dat
(1)   76/       0 :                     				error "RAN OUT OF "+text+" (\{(dis)&$FFFFFF} of \{(dat)&$FFFFFF})"
(1)   77/       0 :                     ; 			else
(1)   78/       0 :                     ; 				message text+" uses \{(dis)&$FFFFFF} of \{(dat)&$FFFFFF}"
(1)   79/       0 :                     			endif
(1)   80/       0 :                     		endif
(1)   81/       0 :                     	endif
(1)   82/       0 :                     		endm
(1)   83/       0 :                     
(1)   84/       0 :                     ; -------------------------------------
(1)   85/       0 :                     ; ZERO Fill padding
(1)   86/       0 :                     ; -------------------------------------
(1)   87/       0 :                     
(1)   88/       0 :                     rompad		macro address			; Zero fill
(1)   89/       0 :                     diff := address - *
(1)   90/       0 :                     		if diff < 0
(1)   91/       0 :                     			error "too much stuff before org $\{address} ($\{(-diff)} bytes)"
(1)   92/       0 :                     		else
(1)   93/       0 :                     			while diff > 1024
(1)   94/       0 :                     				; AS can only generate 1 kb of code on a single line
(1)   95/       0 :                     				dc.b [1024]0
(1)   96/       0 :                     diff := diff - 1024
(1)   97/       0 :                     			endm
(1)   98/       0 :                     			dc.b [diff]0
(1)   99/       0 :                     		endif
(1)  100/       0 :                     	endm
(1)  101/       0 :                     
(1)  102/       0 :                     ; ====================================================================
(1)  103/       0 :                     ; --------------------------------------------------------
(1)  104/       0 :                     ; ISO filesystem macros
(1)  105/       0 :                     ; --------------------------------------------------------
(1)  106/       0 :                     
(1)  107/       0 :                     ; Set a ISO file
(1)  108/       0 :                     ; NOTE: a valid ISO head is required from $8000 to $B7FF
(1)  109/       0 :                     ; DATES are random here
(1)  110/       0 :                     
(1)  111/       0 :                     iso_setfs	macro type,start,end
(1)  112/       0 :                     .fstrt:
(1)  113/       0 :                     		dc.b .fend-.fstrt				; Block size
(1)  114/       0 :                     		dc.b 0						; zero
(1)  115/       0 :                     		dc.b (start>>11&$FF),(start>>19&$FF)		; Start sector, little
(1)  116/       0 :                     		dc.b (start>>27&$FF),(start>>35&$FF)
(1)  117/       0 :                     		dc.l start>>11					; Start sector, big
(1)  118/       0 :                     		dc.b ((end-start)&$FF),((end-start)>>8&$FF)	; Filesize, little
(1)  119/       0 :                     		dc.b ((end-start)>>16&$FF),((end-start)>>24&$FF)
(1)  120/       0 :                     		dc.l end-start					; Filesize, big
(1)  121/       0 :                     		dc.b (2023-1900)+1				; Year
(1)  122/       0 :                     		dc.b 0,0,0,0,0,0				; TODO
(1)  123/       0 :                     		dc.b 2						; File flags
(1)  124/       0 :                     		dc.b 0,0
(1)  125/       0 :                     		dc.b 1,0					; Volume sequence number, little
(1)  126/       0 :                     		dc.b 0,1					; Volume sequence number, big
(1)  127/       0 :                     		dc.b 1,type
(1)  128/       0 :                     .fend:
(1)  129/       0 :                     		endm
(1)  130/       0 :                     
(1)  131/       0 :                     iso_file	macro filename,start,end
(1)  132/       0 :                     .fstrt:		dc.b .fend-.fstrt				; Block size
(1)  133/       0 :                     		dc.b 0						; zero
(1)  134/       0 :                     		dc.b (start>>11&$FF),(start>>19&$FF)		; Start sector, little
(1)  135/       0 :                     		dc.b (start>>27&$FF),(start>>35&$FF)
(1)  136/       0 :                     		dc.l start>>11					; Start sector, big
(1)  137/       0 :                     		dc.b ((end-start)&$FF),((end-start)>>8&$FF)	; Filesize, little
(1)  138/       0 :                     		dc.b ((end-start)>>16&$FF),((end-start)>>24&$FF)
(1)  139/       0 :                     		dc.l end-start					; Filesize, big
(1)  140/       0 :                     		dc.b (2023-1900)+1				; Year
(1)  141/       0 :                     		dc.b 0,0,0,0,0,0				; TODO
(1)  142/       0 :                     		dc.b 0						; File flags
(1)  143/       0 :                     		dc.b 0,0
(1)  144/       0 :                     		dc.b 1,0					; Volume sequence number, little
(1)  145/       0 :                     		dc.b 0,1					; Volume sequence number, big
(1)  146/       0 :                     		dc.b .flend-.flen
(1)  147/       0 :                     .flen:		dc.b filename,";1"
(1)  148/       0 :                     .flend:		dc.b 0
(1)  149/       0 :                     .fend:
(1)  150/       0 :                     		endm
(1)  151/       0 :                     
(1)  152/       0 :                     ; ====================================================================
(1)  153/       0 :                     ; --------------------------------------------------------
(1)  154/       0 :                     ; Nikona macros
(1)  155/       0 :                     ; --------------------------------------------------------
(1)  156/       0 :                     
(1)  157/       0 :                     ; ---------------------------------------------
(1)  158/       0 :                     ; Screen mode code
(1)  159/       0 :                     ; ---------------------------------------------
(1)  160/       0 :                     
(1)  161/       0 :                     screen_code macro lblstart,lblend,path
(1)  162/       0 :                     	if MCD|MARSCD
(1)  163/       0 :                     		align $800		; SCD/CD32X sector align
(1)  164/       0 :                     	elseif MARS
(1)  165/       0 :                     		align 4
(1)  166/       0 :                     		phase $880000+*		; 32X ROM-area
(1)  167/       0 :                     	endif
(1)  168/       0 :                     lblstart label *
(1)  169/       0 :                     	if MARS
(1)  170/       0 :                     		dephase
(1)  171/       0 :                     	endif
(1)  172/       0 :                     
(1)  173/       0 :                     mctopscrn:
(1)  174/       0 :                     	if MARS|MCD|MARSCD
(1)  175/       0 :                     		phase RAM_UserCode	; SCD/32X/CD32X relocate to RAM area
(1)  176/       0 :                     	endif
(1)  177/       0 :                     mcscrn_s:
(1)  178/       0 :                     	include path;"game/screen_0/code.asm"
(1)  179/       0 :                     mcscrn_e:
(1)  180/       0 :                     	if MARS
(1)  181/       0 :                     		dephase	; dephase RAM section
(1)  182/       0 :                     		dephase ; dephase $880000+ section
(1)  183/       0 :                     	elseif MCD|MARSCD
(1)  184/       0 :                     		dephase
(1)  185/       0 :                     		phase mctopscrn+(mcscrn_e-RAM_UserCode)
(1)  186/       0 :                     		align $800
(1)  187/       0 :                     ; Md_Screen00_e:
(1)  188/       0 :                     lblend label *
(1)  189/       0 :                     	endif
(1)  190/       0 :                     	if MCD|MARS|MARSCD
(1)  191/       0 :                     		report "THIS SCREEN's code",mcscrn_e-RAM_UserCode,MAX_UserCode
(1)  192/       0 :                     	endif
(1)  193/       0 :                     	endm
(1)  194/       0 :                     
(1)  195/       0 :                     ; ---------------------------------------------
(1)  196/       0 :                     ; 68K data bank
(1)  197/       0 :                     ; ---------------------------------------------
(1)  198/       0 :                     
(1)  199/       0 :                     data_bkset macro startlbl,except
(1)  200/       0 :                     	if MCD|MARSCD
(1)  201/       0 :                     		align $800
(1)  202/       0 :                     	elseif MARS
(1)  203/       0 :                     		align 4
(1)  204/       0 :                     	endif
(1)  205/       0 :                     ; MCD_DBANK0:
(1)  206/       0 :                     startlbl label *
(1)  207/       0 :                     	if MCD|MARSCD
(1)  208/       0 :                     		phase sysmcd_wram
(1)  209/       0 :                     	elseif MARS
(1)  210/       0 :                     ; 		dephase
(1)  211/       0 :                     	if except==-1
(1)  212/       0 :                     		phase $900000+*	; First 32X data bank
(1)  213/       0 :                     	else
(1)  214/       0 :                     		phase $900000
(1)  215/       0 :                     	endif
(1)  216/       0 :                     	endif
(1)  217/       0 :                     	endm
(1)  218/       0 :                     
(1)  219/       0 :                     data_bkend macro startlbl,endlbl,thissize
(1)  220/       0 :                     
(1)  221/       0 :                     	if MARS
(1)  222/       0 :                     		dephase
(1)  223/       0 :                     		if thissize > $40000
(1)  224/       0 :                     			warning "THIS BANK SIZE IS TOO LARGE FOR WORD-RAM (CD/CD32X)"
(1)  225/       0 :                     		endif
(1)  226/       0 :                     		report "THIS 68K DATA BANK at $900000",thissize,$100000
(1)  227/       0 :                     	elseif MCD|MARSCD
(1)  228/       0 :                     		dephase
(1)  229/       0 :                     		align $800
(1)  230/       0 :                     endlbl label *	; <-- CD/CD32X ONLY
(1)  231/       0 :                     		report "THIS 68K DATA BANK at WORD-RAM",thissize,$40000
(1)  232/       0 :                     	endif
(1)  233/       0 :                     	endm
(1)  234/       0 :                     
(1)  235/       0 :                     ; --------------------------------------------------------
(1)  236/       0 :                     ; 32X ONLY
(1)  237/       0 :                     ; --------------------------------------------------------
(1)  238/       0 :                     
(1)  239/       0 :                     sdram_bkset macro thislbl,endlbl
(1)  240/       0 :                     	if MCD|MARSCD
(1)  241/       0 :                     		align $800
(1)  242/       0 :                     	elseif MARS
(1)  243/       0 :                     		align 4
(1)  244/       0 :                     		phase $880000+*
(1)  245/       0 :                     	endif
(1)  246/       0 :                     ; MARSDATA_DEFAULT:
(1)  247/       0 :                     thislbl label *
(1)  248/       0 :                     	if MARS
(1)  249/       0 :                     		dephase
(1)  250/       0 :                     	endif
(1)  251/       0 :                     	if MARS|MARSCD
(1)  252/       0 :                     		dc.l endlbl-thislbl
(1)  253/       0 :                     		phase SH2_USER_DATA
(1)  254/       0 :                     	endif
(1)  255/       0 :                     	endm
(1)  256/       0 :                     
(1)  257/       0 :                     ; ---------------------------------------------
(1)  258/       0 :                     
(1)  259/       0 :                     sdram_bkend macro thislbl,endlbl
(1)  260/       0 :                     	if MARS|MARSCD
(1)  261/       0 :                     		dephase
(1)  262/       0 :                     		align 8	; <-- DREQ alignment
(1)  263/       0 :                     	endif
(1)  264/       0 :                     	if MCD|MARSCD
(1)  265/       0 :                     endlbl label *
(1)  266/       0 :                     		align $800	; <-- AS failing
(1)  267/       0 :                     ; 		dc.l 0
(1)  268/       0 :                     	elseif MARS
(1)  269/       0 :                     		phase $880000+*
(1)  270/       0 :                     endlbl label *
(1)  271/       0 :                     		dephase
(1)  272/       0 :                     	endif
(1)  273/       0 :                     
(1)  274/       0 :                     	if MARS|MARSCD
(1)  275/       0 :                     		report "SH2 SDRAM DATA: thislbl",endlbl-thislbl,(CS3|$40000)-SH2_USER_DATA
(1)  276/       0 :                     	endif
(1)  277/       0 :                     	endm
(1)  278/       0 :                     
(1)  279/       0 :                     ; --------------------------------------------------------
(1)  280/       0 :                     ; Set data bank(s) for the current screen
(1)  281/       0 :                     ;
(1)  282/       0 :                     ; mcdpos:
(1)  283/       0 :                     ; 	dc.b "FILENAME.BIN",0
(1)  284/       0 :                     ; 	align 2
(1)  285/       0 :                     ;
(1)  286/       0 :                     ; marspos:
(1)  287/       0 :                     ; 	dc.l MARSDATA_DEFAULT		; 32X Cartridge point (UNUSED on CD32X)
(1)  288/       0 :                     ; 	dc.b "MARSD_00.BIN",0		; CD32X Filename (UNUSED on 32X Cartridge)
(1)  289/       0 :                     ; 	align 2
(1)  290/       0 :                     ; --------------------------------------------------------
(1)  291/       0 :                     
(1)  292/       0 :                     set_dbanks macro mcdpos,marspos
(1)  293/       0 :                     	if MARS|MARSCD
(1)  294/       0 :                     		lea	marspos(pc),a0		; 32X/CD32X: SH2 side data
(1)  295/       0 :                     		bsr	System_MarsDataPack
(1)  296/       0 :                     	endif
(1)  297/       0 :                     	if MCD|MARSCD
(1)  298/       0 :                     		bsr	System_McdSubWait
(1)  299/       0 :                     		lea	mcdpos(pc),a0		; CD/CD32X: Genesis data
(1)  300/       0 :                     		bsr	System_McdTrnsfr_WRAM
(1)  301/       0 :                     	endif
(1)  302/       0 :                     	endm
(1)  303/       0 :                     
(1)  304/       0 :                     ; ---------------------------------------------
(1)  305/       0 :                     ; VDP color debug
(1)  306/       0 :                     ; ---------------------------------------------
(1)  307/       0 :                     
(1)  308/       0 :                     vdp_showme	macro color
(1)  309/       0 :                     		move.l	#$C0000000,(vdp_ctrl).l
(1)  310/       0 :                     		move.w	#color,(vdp_data).l
(1)  311/       0 :                     		endm
(1)  312/       0 :                     
      96/       0 :                     		include "game/globals.asm"	; USER variables
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; GLOBAL RAM for ALL screen modes
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; Score, Lives, Level number, etc.
(1)    6/       0 :                     ; ----------------------------------------------------------------
(1)    7/       0 :                     
(1)    8/       0 : (MACRO)              			strct RAM_MdGlobal
(1)    8/       0 : =$0                  GLBL_LASTPC     set *
(1)    8/       0 :                                     dephase
(1)    8/FFFFFFFFFFFFEA04 :                                     phase RAM_MDGLOBAL
(1)    8/FFFFFFFFFFFFEA04 : =$FFFFFFFFFFFFEA04   GLBL_LASTORG    set *
(1)    9/FFFFFFFFFFFFEA04 :                     
(1)   10/FFFFFFFFFFFFEA04 :                     ; ------------------------------------------------------------
(1)   11/FFFFFFFFFFFFEA04 :                     ; Examples:
(1)   12/FFFFFFFFFFFFEA04 :                     ;
(1)   13/FFFFFFFFFFFFEA04 :                     ; RAM_Glbl_ExmpL ds.l 8 ; reserve 4 LONGS ($20 bytes)
(1)   14/FFFFFFFFFFFFEA04 :                     ; RAM_Glbl_ExmpW ds.w 6 ; reserve 3 WORDS ($0C bytes)
(1)   15/FFFFFFFFFFFFEA04 :                     ; RAM_Glbl_ExmpB ds.b 5 ; reserve 5 bytes
(1)   16/FFFFFFFFFFFFEA04 :                     ;
(1)   17/FFFFFFFFFFFFEA04 :                     ; Careful with bytes, everything needs to be word-algined
(1)   18/FFFFFFFFFFFFEA04 :                     ; or your will get an ADDRESS ERROR.
(1)   19/FFFFFFFFFFFFEA04 :                     ; ------------------------------------------------------------
(1)   20/FFFFFFFFFFFFEA04 :                     
(1)   21/FFFFFFFFFFFFEA04 :                     RAM_Glbl_Filler		ds.l 1		; 1 long (4 bytes)
(1)   22/FFFFFFFFFFFFEA08 :                     
(1)   23/FFFFFFFFFFFFEA08 :                     
(1)   24/FFFFFFFFFFFFEA08 :                     ; ------------------------------------------------------------
(1)   25/FFFFFFFFFFFFEA08 :                     sizeof_MdGlbl		ds.l 0		; size label
(1)   26/FFFFFFFFFFFFEA0C : (MACRO)              			endstrct
(1)   26/FFFFFFFFFFFFEA04 :                                     org GLBL_LASTORG
(1)   26/       0 :                                     phase GLBL_LASTPC
(1)   27/       0 :                     
      97/       0 :                     		include	"system/mcd/map.asm"	; Sega CD hardware map (shared with Sub-CPU)
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; SEGA CD SUB-CPU MAP
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; ------------------------------------------------
(1)    7/       0 :                     ; Register area
(1)    8/       0 :                     ;
(1)    9/       0 :                     ; MAIN-CPU: $A12000 (sysmcd_reg)
(1)   10/       0 :                     ; SUB-CPU:  $FF8000 (scpu_reg)
(1)   11/       0 :                     ; ------------------------------------------------
(1)   12/       0 :                     
(1)   13/       0 :                     ; -------------
(1)   14/       0 :                     ; bits
(1)   15/       0 :                     ; -------------
(1)   16/       0 :                     
(1)   17/       0 : =$2                  bitWRamMode	equ 2		;2M | 1M
(1)   18/       0 :                     
(1)   19/       0 :                     ; -------------
(1)   20/       0 :                     ; Registers
(1)   21/       0 :                     ; -------------
(1)   22/       0 :                     
(1)   23/       0 : =$3                  mcd_memory	equ $03
(1)   24/       0 : =$6                  mcd_hint	equ $06		; [W] HBlank RAM redirection-jump (MAIN CPU ONLY)
(1)   25/       0 : =$E                  mcd_comm_m	equ $0E		; [B] Comm port MAIN R/W | SUB READ ONLY
(1)   26/       0 : =$F                  mcd_comm_s	equ $0F		; [B] Comm port SUB R/W  | MAIN READ ONLY
(1)   27/       0 : =$10                 mcd_dcomm_m	equ $10		; [S: $0E] Communication MAIN
(1)   28/       0 : =$20                 mcd_dcomm_s	equ $20		; [S: $0E] Communication SUB
(1)   29/       0 : =$32                 mcd_intmask	equ $32		;
(1)   30/       0 :                     
(1)   31/       0 :                     ; ====================================================================
(1)   32/       0 :                     
      98/       0 :                     		include	"system/mars/map.asm"	; 32X hardware map (shared with SH2)
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; SH2 MAP
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; --------------------------------------------------------
(1)    7/       0 :                     ; SH2 SIDE MAP
(1)    8/       0 :                     ; --------------------------------------------------------
(1)    9/       0 :                     
(1)   10/       0 : =$0                  CS0		equ	$00000000	; Boot ROM & System registers
(1)   11/       0 : =$2000000            CS1		equ	$02000000	; ROM data all 4MB, Gone if RV=1
(1)   12/       0 : =$4000000            CS2		equ	$04000000	; Framebuffer area
(1)   13/       0 : =$6000000            CS3		equ	$06000000	; SDRAM
(1)   14/       0 : =$20000000           TH		equ	$20000000	; OR value for CacheThru
(1)   15/       0 : =$20004000           _sysreg		equ	$00004000|TH	; MARS System registers
(1)   16/       0 : =$20004100           _vdpreg		equ	$00004100|TH	; SuperVDP registers
(1)   17/       0 : =$20004200           _palette	equ	$00004200|TH	; Palette RAM for Pixel-Packed or RLE mode
(1)   18/       0 : =$24000000           _framebuffer:	equ	CS2|TH		; Framebuffer: First 240 words are the linetable
(1)   19/       0 : =$24020000           _overwrite:	equ	CS2|TH+$20000	; Overwrite: $00 writes are ignored
(1)   20/       0 :                     
(1)   21/       0 :                     ; --------------------------------------------------------
(1)   22/       0 :                     ; Variables
(1)   23/       0 :                     ; --------------------------------------------------------
(1)   24/       0 :                     
(1)   25/       0 :                     ; ------------------------------------------------
(1)   26/       0 :                     ; System
(1)   27/       0 :                     ; ------------------------------------------------
(1)   28/       0 :                     
(1)   29/       0 :                     ; _sysreg
(1)   30/       0 : =$0                  adapter		equ	$00		; adapter control register (Read as WORD)
(1)   31/       0 : =$1                  intmask		equ	$01		; SH2 CPU ONLY: interrupts mask
(1)   32/       0 : =$3                  standby		equ	$03		; CMD interrupt request bit by MD side (slave|master) (BYTE)
(1)   33/       0 : =$5                  hcount		equ	$05		; H Counter (BYTE)
(1)   34/       0 : =$6                  dreqctl		equ	$06		; DREQ control (WORD)
(1)   35/       0 : =$8                  dreqsource	equ	$08		; DREQ source address
(1)   36/       0 : =$C                  dreqdest	equ	$0C		; DREQ destination address
(1)   37/       0 : =$10                 dreqlen		equ	$10		; DREQ length
(1)   38/       0 : =$12                 dreqfifo	equ	$12		; DREQ FIFO
(1)   39/       0 : =$14                 vresintclr	equ	$14		; VRES interrupt clear
(1)   40/       0 : =$16                 vintclr		equ	$16		; V interrupt clear
(1)   41/       0 : =$18                 hintclr		equ	$18		; H interrupt clear
(1)   42/       0 : =$1A                 cmdintclr	equ	$1a		; CMD interrupt clear
(1)   43/       0 : =$1C                 pwmintclr	equ	$1C		; PWM interrupt clear
(1)   44/       0 : =$20                 comm0		equ	$20		; Communication ports ***
(1)   45/       0 : =$21                 comm1		equ	$21		; ALL CPUs can see this ports: including Z80
(1)   46/       0 : =$22                 comm2		equ	$22		; only be careful with the read/write directions.
(1)   47/       0 : =$23                 comm3		equ	$23		; ODD addresses (1,3,5...) are BYTE-read only.
(1)   48/       0 : =$24                 comm4		equ	$24		; EVEN addresses (0,2,4...) can be read as WORDs
(1)   49/       0 : =$25                 comm5		equ	$25		; Writing LONG addreses are possible depending
(1)   50/       0 : =$26                 comm6		equ	$26		; of the CPU's aligment limitations.
(1)   51/       0 : =$27                 comm7		equ	$27		;
(1)   52/       0 : =$28                 comm8		equ	$28		;
(1)   53/       0 : =$29                 comm9		equ	$29		;
(1)   54/       0 : =$2A                 comm10		equ	$2A		;
(1)   55/       0 : =$2B                 comm11		equ	$2B		;
(1)   56/       0 : =$2C                 comm12		equ	$2C		;
(1)   57/       0 : =$2D                 comm13		equ	$2D		;
(1)   58/       0 : =$2E                 comm14		equ	$2E		;
(1)   59/       0 : =$2F                 comm15		equ	$2F		;
(1)   60/       0 : =$30                 timerctl	equ	$30		; PWM Timer Control
(1)   61/       0 : =$31                 pwmctl		equ	$31		; PWM Control
(1)   62/       0 : =$32                 cycle		equ	$32		; PWM Cycle
(1)   63/       0 : =$34                 lchwidth	equ	$34		; PWM L ch Width
(1)   64/       0 : =$36                 rchwidth	equ	$36		; PWM R ch Width
(1)   65/       0 : =$38                 monowidth	equ	$38		; PWM Monaural Width
(1)   66/       0 :                     
(1)   67/       0 :                     ; _sysreg
(1)   68/       0 :                     ; adapter
(1)   69/       0 : =$1                  CART		equ	%00000001	; CD or Cartridge
(1)   70/       0 : =$2                  ADEN		equ	%00000010	; MARS Enabled: No/Yes
(1)   71/       0 : =$80                 FM		equ	%10000000	; SuperVDP permission: MD or SH
(1)   72/       0 :                     ; framectl
(1)   73/       0 : =$1                  FS		equ	%00000001	; Current framebuffer DRAM pixel data
(1)   74/       0 : =$2                  FEN		equ	%00000010	; Can write to Framebuffer: Yes/No
(1)   75/       0 :                     ; vdpsts
(1)   76/       0 : =$80                 VBLK		equ	%10000000	; VBlank bit
(1)   77/       0 : =$40                 HBLK		equ	%01000000	; HBlank bit
(1)   78/       0 : =$20                 PEN		equ	%00100000	; Can write to Palette: Yes/No
(1)   79/       0 :                     ; intmask
(1)   80/       0 : =$8                  VIRQ_ON		equ	$08		; IRQ masks for IRQ mask register
(1)   81/       0 : =$4                  HIRQ_ON		equ	$04
(1)   82/       0 : =$2                  CMDIRQ_ON	equ	$02
(1)   83/       0 : =$1                  PWMIRQ_ON	equ	$01
(1)   84/       0 :                     
(1)   85/       0 :                     ; _vdpreg
(1)   86/       0 : =$0                  tvmode		equ	$00		; TV mode
(1)   87/       0 : =$1                  bitmapmd	equ	$01		; Bitmap mode
(1)   88/       0 : =$2                  shift		equ	$02		; Lineshift bit
(1)   89/       0 : =$4                  filllength	equ	$04		; Auto Fill Length register
(1)   90/       0 : =$6                  fillstart	equ	$06		; Auto Fill Start Address register
(1)   91/       0 : =$8                  filldata	equ	$08		; Auto Fill Data register
(1)   92/       0 : =$A                  vdpsts		equ	$0A		; VDP Status register
(1)   93/       0 : =$B                  framectl	equ	$0B		; Frame Buffer Control register
(1)   94/       0 :                     
(1)   95/       0 :                     ; --------------------------------------------------------
(1)   96/       0 :                     ; SH2 Internal registers, independent for each CPU
(1)   97/       0 :                     ; --------------------------------------------------------
(1)   98/       0 :                     
(1)   99/       0 :                     ; DMA Channel 0: General data transfer
(1)  100/       0 :                     ; DMA Channel 1: PWM only
(1)  101/       0 :                     
(1)  102/       0 : =$FFFFFE00           _SERIAL		equ	$FFFFFE00	; Serial Control
(1)  103/       0 : =$FFFFFE10           _FRT		equ	$FFFFFE10	; Free run timer
(1)  104/       0 : =$0                  _TIER		equ	$00		; Timer interrupt enable register
(1)  105/       0 : =$1                  _TCSR		equ	$01		; Timer control & status register
(1)  106/       0 : =$2                  _FRC_H		equ	$02		; Free running counter High
(1)  107/       0 : =$3                  _FRC_L		equ	$03		; Free running counter Low
(1)  108/       0 : =$4                  _OCR_H		equ	$04		; Output compare register High
(1)  109/       0 : =$5                  _OCR_L		equ	$05		; Output compare register Low
(1)  110/       0 : =$6                  _TCR		equ	$06		; Timer control register
(1)  111/       0 : =$7                  _TOCR		equ	$07		; Timer output compare control register
(1)  112/       0 : =$FFFFFE92           _CCR		equ	$FFFFFE92	; Cache register (WORD)
(1)  113/       0 : =$FFFFFF00           _JR		equ	$FFFFFF00	; DIVU (--- / val)
(1)  114/       0 : =$FFFFFF04           _HRL32		equ	$FFFFFF04	; DIVU (val / ---) or RIGHT-long result if read
(1)  115/       0 : =$FFFFFF10           _HRH		equ	$FFFFFF10	; DIVU Result: LEFT long
(1)  116/       0 : =$FFFFFF14           _HRL		equ	$FFFFFF14	; DIVU Result: RIGHT long
(1)  117/       0 : =$FFFFFF80           _DMASOURCE0	equ	$FFFFFF80	; DMA source address 0
(1)  118/       0 : =$FFFFFF84           _DMADEST0	equ	$FFFFFF84	; DMA destination address 0
(1)  119/       0 : =$FFFFFF88           _DMACOUNT0	equ	$FFFFFF88	; DMA transfer count 0
(1)  120/       0 : =$FFFFFF8C           _DMACHANNEL0	equ	$FFFFFF8C	; DMA channel control 0
(1)  121/       0 : =$FFFFFF90           _DMASOURCE1	equ	$FFFFFF90	; DMA source address 1
(1)  122/       0 : =$FFFFFF94           _DMADEST1	equ	$FFFFFF94	; DMA destination address 1
(1)  123/       0 : =$FFFFFF98           _DMACOUNT1	equ	$FFFFFF98	; DMA transfer count 1
(1)  124/       0 : =$FFFFFF9C           _DMACHANNEL1	equ	$FFFFFF9C	; DMA channel control 1
(1)  125/       0 : =$FFFFFFA0           _DMAVECTORN0	equ	$FFFFFFA0	; DMA vector number N0
(1)  126/       0 : =$FFFFFFA4           _DMAVECTORE0	equ	$FFFFFFA4	; DMA vector number E0
(1)  127/       0 : =$FFFFFFA8           _DMAVECTORN1	equ	$FFFFFFA8	; DMA vector number N1
(1)  128/       0 : =$FFFFFFAC           _DMAVECTORE1	equ	$FFFFFFAC	; DMA vector number E1
(1)  129/       0 : =$FFFFFFB0           _DMAOPERATION	equ	$FFFFFFB0	; DMA operation
(1)  130/       0 : =$FFFFFFB4           _DMAREQACK0	equ	$FFFFFFB4	; DMA request/ack select control 0
(1)  131/       0 : =$FFFFFFB8           _DMAREQACK1	equ	$FFFFFFB8	; DMA request/ack select control 1
(1)  132/       0 :                     
      99/       0 :                     		include	"system/md/map.asm"	; Genesis hardware map and other areas
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Genesis / Pico 68000 map
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 : =$200000             sys_exram	equ	$200000		; Second half of 4MB rom or external RAM (Normal or save data)
(1)    7/       0 : =$A00000             z80_cpu		equ	$A00000		; Z80 CPU area, size: $2000
(1)    8/       0 : =$A04000             ym_ctrl_1	equ	$A04000		; YM2612 reg 1
(1)    9/       0 : =$A04001             ym_data_1	equ	$A04001		; YM2612 reg 2
(1)   10/       0 : =$A04002             ym_ctrl_2	equ	$A04002		; YM2612 reg 1
(1)   11/       0 : =$A04003             ym_data_2	equ	$A04003		; YM2612 reg 2
(1)   12/       0 : =$A10001             sys_io		equ	$A10001		; bits: OVRSEAS(7)|PAL(6)|DISK(5)|VER(3-0)
(1)   13/       0 : =$A10003             sys_data_1	equ	$A10003		; Port 1 DATA
(1)   14/       0 : =$A10005             sys_data_2	equ	$A10005		; Port 2 DATA
(1)   15/       0 : =$A10007             sys_data_3	equ	$A10007		; Modem DATA
(1)   16/       0 : =$A10009             sys_ctrl_1	equ	$A10009		; Port 1 CTRL
(1)   17/       0 : =$A1000B             sys_ctrl_2	equ	$A1000B		; Port 2 CTRL
(1)   18/       0 : =$A1000D             sys_ctrl_3	equ	$A1000D		; Modem CTRL
(1)   19/       0 : =$A11100             z80_bus 	equ	$A11100		; only use bit 0 (bit 8 as WORD)
(1)   20/       0 : =$A11200             z80_reset	equ	$A11200		; WRITE only ($0000 reset/$0100 cancel)
(1)   21/       0 : =$A130F1             md_bank_sram	equ	$A130F1		; Make SRAM visible at $200000
(1)   22/       0 : =$A14000             sys_tmss	equ	$A14000		; write "SEGA" here for ver > 0
(1)   23/       0 : =$C00000             vdp_data	equ	$C00000		; video data port
(1)   24/       0 : =$C00004             vdp_ctrl	equ	$C00004		; video control port
(1)   25/       0 : =$C00011             psg_ctrl	equ	$C00011		; PSG control
(1)   26/       0 :                     
(1)   27/       0 :                     ; ----------------------------------------------------------------
(1)   28/       0 :                     ; SEGA CD map
(1)   29/       0 :                     ; ----------------------------------------------------------------
(1)   30/       0 :                     
(1)   31/       0 : =$200000             sysmcd_wram	equ	$200000
(1)   32/       0 : =$A12000             sysmcd_reg	equ	$A12000
(1)   33/       0 :                     
(1)   34/       0 :                     ; ----------------------------------------------------------------
(1)   35/       0 :                     ; 32X map
(1)   36/       0 :                     ; ----------------------------------------------------------------
(1)   37/       0 :                     
(1)   38/       0 : =$A130EC             sysmars_id	equ	$A130EC		; 32X's ID: "MARS"
(1)   39/       0 : =$A15100             sysmars_reg	equ	$A15100		; MARS 32X registers section, see system/mars/map.asm for variables
(1)   40/       0 :                     
(1)   41/       0 :                     ; ----------------------------------------------------------------
(1)   42/       0 :                     ; Genesis / Mega drive Z80 map
(1)   43/       0 :                     ; ----------------------------------------------------------------
(1)   44/       0 :                     
(1)   45/       0 : =$4000               zym_ctrl_1	equ	$4000		; YM2612 reg 1
(1)   46/       0 : =$4001               zym_data_1	equ	$4001		; YM2612 reg 2
(1)   47/       0 : =$4002               zym_ctrl_2	equ	$4002		; YM2612 reg 1
(1)   48/       0 : =$4003               zym_data_2	equ	$4003		; YM2612 reg 2
(1)   49/       0 : =$6000               zbank		equ	$6000		; Z80 ROM BANK: %XXXXXXXX X0000000 00000000 (9 writes)
(1)   50/       0 :                     ; zvdp_data	equ	$7F00		; video data port
(1)   51/       0 :                     ; zvdp_ctrl	equ	$7F04		; video control port
(1)   52/       0 : =$7F11               zpsg_ctrl	equ	$7F11		; PSG control
(1)   53/       0 :                     
     100/       0 :                     		include	"system/md/ram.asm"	; Genesis RAM sections
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; MD RAM
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; Reserved RAM sections:
(1)    6/       0 :                     ; $FFFD00-$FFFDFF: Sega CD's vectors
(1)    7/       0 :                     ; $FFFE80-$FFFFFF: Z80 write-only scratchpad
(1)    8/       0 :                     ; ----------------------------------------------------------------
(1)    9/       0 :                     
(1)   10/       0 :                     ; --------------------------------------------------------
(1)   11/       0 :                     ; Settings
(1)   12/       0 :                     ; --------------------------------------------------------
(1)   13/       0 :                     
(1)   14/       0 : (MACRO)              			strct $FFFF0000
(1)   14/       0 : =$0                  GLBL_LASTPC     set *
(1)   14/FFFFFFFFFFFFEA04 :                                     dephase
(1)   14/FFFFFFFFFFFF0000 :                                     phase $FFFF0000
(1)   14/FFFFFFFFFFFF0000 : =$FFFFFFFFFFFF0000   GLBL_LASTORG    set *
(1)   15/FFFFFFFFFFFF0000 :                     RAM_SystemCode		ds.b MAX_SysCode	; CD/32X/CD32X
(1)   16/FFFFFFFFFFFF2000 :                     RAM_UserCode		ds.b MAX_UserCode	; CD/32X/CD32X
(1)   17/FFFFFFFFFFFFA000 :                     
(1)   18/FFFFFFFFFFFFA000 :                     ; ------------------------------------------------
(1)   19/FFFFFFFFFFFFA000 :                     ; > $FF8000 section
(1)   20/FFFFFFFFFFFFA000 :                     ; ------------------------------------------------
(1)   21/FFFFFFFFFFFFA000 :                     
(1)   22/FFFFFFFFFFFFA000 :                     check_thisram		ds.l 0			; <-- get current pos
(1)   26/FFFFFFFFFFFFA004 :                     RAM_MdVideo		ds.b MAX_MdVideo	; $FF8000
(1)   27/FFFFFFFFFFFFC004 :                     RAM_MdSystem		ds.b MAX_MdSystem	;
(1)   28/FFFFFFFFFFFFC604 :                     RAM_MdOther		ds.b MAX_MdOther	; 32X's DREQ goes here
(1)   29/FFFFFFFFFFFFD204 :                     RAM_ScrnBuff		ds.b MAX_ScrnBuff
(1)   30/FFFFFFFFFFFFEA04 :                     RAM_MdGlobal		ds.b sizeof_MdGlbl
(1)   31/FFFFFFFFFFFFD40C :                     sizeof_MdRam		ds.l 0
(1)   32/FFFFFFFFFFFFD410 : (MACRO)              			endstrct
(1)   32/FFFFFFFFFFFF0000 :                                     org GLBL_LASTORG
(1)   32/       0 :                                     phase GLBL_LASTPC
(1)   36/       0 :                     
(1)   37/       0 :                     ; ------------------------------------------------
(1)   38/       0 :                     ; Add-on area
(1)   39/       0 :                     ; ------------------------------------------------
(1)   40/       0 :                     
(1)   41/       0 : (MACRO)              			strct RAM_MdOther
(1)   41/       0 : =$0                  GLBL_LASTPC     set *
(1)   41/FFFFFFFFFFFF0000 :                                     dephase
(1)   41/FFFFFFFFFFFFC604 :                                     phase RAM_MDOTHER
(1)   41/FFFFFFFFFFFFC604 : =$FFFFFFFFFFFFC604   GLBL_LASTORG    set *
(1)   42/FFFFFFFFFFFFC604 :                     RAM_MdDreq		ds.b $C00		; 32X DREQ area (MANUAL SIZE)
(1)   43/FFFFFFFFFFFFD204 :                     sizeof_RamOther		ds.l 0
(1)   44/FFFFFFFFFFFFD208 : (MACRO)              			endstrct
(1)   44/FFFFFFFFFFFFC604 :                                     org GLBL_LASTORG
(1)   44/       0 :                                     phase GLBL_LASTPC
(1)   45/       0 : (MACRO)              			erreport "ADD-ON RAM USES",(sizeof_RamOther-RAM_MdOther),MAX_MdOther
(1)   46/       0 :                     
(1)   47/       0 :                     ; ------------------------------------------------
(1)   48/       0 :                     ; Other
(1)   49/       0 :                     ; ------------------------------------------------
(1)   50/       0 :                     
(1)   51/       0 : =$FFFFFD00           RAM_Stack		equ RAM_MegaCd			; <-- goes backwards
(1)   52/       0 : =$FFFFFD00           RAM_MegaCd		equ $FFFFFD00
(1)   53/       0 : =$FFFFFF00           RAM_ZSndBuff		equ $FFFFFF00
(1)   54/       0 :                     
     101/       0 :                     		include	"system/shared.asm"	; Shared variables and specials
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Shared variables
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; ====================================================================
(1)    7/       0 :                     ; ----------------------------------------------------------------
(1)    8/       0 :                     ; 32X SECTION
(1)    9/       0 :                     ; ----------------------------------------------------------------
(1)   10/       0 :                     
(1)   87/       0 :                     
     102/       0 :                     
     103/       0 :                     ; ====================================================================
     104/       0 :                     ; ----------------------------------------------------------------
     105/       0 :                     ; Init procedures for all systems
     106/       0 :                     ; ----------------------------------------------------------------
     107/       0 :                     
     108/       0 :                     ; ---------------------------------------------
     109/       0 :                     ; SEGA 32X
     110/       0 :                     ; ---------------------------------------------
     111/       0 :                     
     166/       0 :                     		include	"system/head_pico.asm"		; Pico header
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; PICO header
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; REMINDER: NO Z80 CPU, DO NOT USE THE Z80 AREA IF
(1)    6/       0 :                     ; RECYCLING THE GENESIS CODE.
(1)    7/       0 :                     ; ----------------------------------------------------------------
(1)    8/       0 :                     
(1)    9/       0 : FFFF FD00           		dc.l RAM_Stack		; Stack point
(1)   10/       4 : 0000 0204           		dc.l Pico_Entry		; Entry point MUST point to $3F0
(1)   11/       8 : 0000 0200           		dc.l Pico_ErrBus	; Bus error
(1)   12/       C : 0000 0200           		dc.l Pico_ErrAddr	; Address error
(1)   13/      10 : 0000 0200           		dc.l Pico_ErrIll	; ILLEGAL Instruction
(1)   14/      14 : 0000 0200           		dc.l Pico_ErrZDiv	; Divide by 0
(1)   15/      18 : 0000 0200           		dc.l Pico_ErrChk	; CHK Instruction
(1)   16/      1C : 0000 0200           		dc.l Pico_ErrTrapV	; TRAPV Instruction
(1)   17/      20 : 0000 0200           		dc.l Pico_ErrPrivl	; Privilege violation
(1)   18/      24 : 0000 0200           		dc.l Pico_Trace		; Trace
(1)   19/      28 : 0000 0200           		dc.l Pico_Line1010	; Line 1010 Emulator
(1)   20/      2C : 0000 0200           		dc.l Pico_Line1111	; Line 1111 Emulator
(1)   21/      30 : 0000 0200           		dc.l Pico_ErrorEx	; Error exception
(1)   22/      34 : 0000 0200           		dc.l Pico_ErrorEx
(1)   23/      38 : 0000 0200           		dc.l Pico_ErrorEx
(1)   24/      3C : 0000 0200           		dc.l Pico_ErrorEx
(1)   25/      40 : 0000 0200           		dc.l Pico_ErrorEx
(1)   26/      44 : 0000 0200           		dc.l Pico_ErrorEx
(1)   27/      48 : 0000 0200           		dc.l Pico_ErrorEx
(1)   28/      4C : 0000 0200           		dc.l Pico_ErrorEx
(1)   29/      50 : 0000 0200           		dc.l Pico_ErrorEx
(1)   30/      54 : 0000 0200           		dc.l Pico_ErrorEx
(1)   31/      58 : 0000 0200           		dc.l Pico_ErrorEx
(1)   32/      5C : 0000 0200           		dc.l Pico_ErrorEx
(1)   33/      60 : 0000 0200           		dc.l Pico_ErrorEx
(1)   34/      64 : 0000 0200           		dc.l Pico_Error
(1)   35/      68 : 0000 0202           		dc.l Pico_UserInt	; PICO: User interrupt
(1)   36/      6C : 0000 0202           		dc.l Pico_PcmInt	; PICO: PCM-full interrupt
(1)   37/      70 : FFFF C452           		dc.l RAM_MdMarsHInt	; RAM jump for HBlank (JMP xxxx xxxx)
(1)   38/      74 : 0000 0202           		dc.l Pico_UnkInt	; PICO: Unknown
(1)   39/      78 : FFFF C44C           		dc.l RAM_MdMarsVInt	; RAM jump for VBlank (JMP xxxx xxxx)
(1)   40/      7C : 0000 0200           		dc.l Pico_Error
(1)   41/      80 : 0000 0200           		dc.l Pico_Error
(1)   42/      84 : 0000 0200           		dc.l Pico_Error
(1)   43/      88 : 0000 0200           		dc.l Pico_Error
(1)   44/      8C : 0000 0200           		dc.l Pico_Error
(1)   45/      90 : 0000 0200           		dc.l Pico_Error
(1)   46/      94 : 0000 0200           		dc.l Pico_Error
(1)   47/      98 : 0000 0200           		dc.l Pico_Error
(1)   48/      9C : 0000 0200           		dc.l Pico_Error
(1)   49/      A0 : 0000 0200           		dc.l Pico_Error
(1)   50/      A4 : 0000 0200           		dc.l Pico_Error
(1)   51/      A8 : 0000 0200           		dc.l Pico_Error
(1)   52/      AC : 0000 0200           		dc.l Pico_Error
(1)   53/      B0 : 0000 0200           		dc.l Pico_Error
(1)   54/      B4 : 0000 0200           		dc.l Pico_Error
(1)   55/      B8 : 0000 0200           		dc.l Pico_Error
(1)   56/      BC : 0000 0200           		dc.l Pico_Error
(1)   57/      C0 : 0000 0200           		dc.l Pico_Error
(1)   58/      C4 : 0000 0200           		dc.l Pico_Error
(1)   59/      C8 : 0000 0200           		dc.l Pico_Error
(1)   60/      CC : 0000 0200           		dc.l Pico_Error
(1)   61/      D0 : 0000 0200           		dc.l Pico_Error
(1)   62/      D4 : 0000 0200           		dc.l Pico_Error
(1)   63/      D8 : 0000 0200           		dc.l Pico_Error
(1)   64/      DC : 0000 0200           		dc.l Pico_Error
(1)   65/      E0 : 0000 0200           		dc.l Pico_Error
(1)   66/      E4 : 0000 0200           		dc.l Pico_Error
(1)   67/      E8 : 0000 0200           		dc.l Pico_Error
(1)   68/      EC : 0000 0200           		dc.l Pico_Error
(1)   69/      F0 : 0000 0200           		dc.l Pico_Error
(1)   70/      F4 : 0000 0200           		dc.l Pico_Error
(1)   71/      F8 : 0000 0200           		dc.l Pico_Error
(1)   72/      FC : 0000 0200           		dc.l Pico_Error
(1)   73/     100 : 5345 4741 2050      		dc.b "SEGA PICO       "
              106 : 4943 4F20 2020 
              10C : 2020 2020          
(1)   74/     110 : 2843 2947 4636      		dc.b "(C)GF64 2024.???"
              116 : 3420 3230 3234 
              11C : 2E3F 3F3F          
(1)   75/     120 : 4E69 6B6F 6E61      		dc.b "Nikona PICO                                     "
              126 : 2050 4943 4F20 
              12C : 2020 2020 2020 
              132 : 2020 2020 2020 
              138 : 2020 2020 2020 
              13E : 2020 2020 2020 
              144 : 2020 2020 2020 
              14A : 2020 2020 2020    
(1)   76/     150 : 4E69 6B6F 6E61      		dc.b "Nikona PICO                                     "
              156 : 2050 4943 4F20 
              15C : 2020 2020 2020 
              162 : 2020 2020 2020 
              168 : 2020 2020 2020 
              16E : 2020 2020 2020 
              174 : 2020 2020 2020 
              17A : 2020 2020 2020    
(1)   77/     180 : 474D 2048 4F4D      		dc.b "GM HOMEBREW-02"
              186 : 4542 5245 572D 
              18C : 3032             
(1)   78/     18E : 0000                		dc.w 0
(1)   79/     190 : 2020 2020 2020      		dc.b "                "
              196 : 2020 2020 2020 
              19C : 2020 2020          
(1)   80/     1A0 : 0000 0000           		dc.l 0
(1)   81/     1A4 : 0003 C030           		dc.l ROM_END
(1)   82/     1A8 : 00FF 0000           		dc.l $FF0000
(1)   83/     1AC : 00FF FFFF           		dc.l $FFFFFF
(1)   84/     1B0 : 2020 2020           		dc.l $20202020		; dc.b "RA",$F8,$20
(1)   85/     1B4 : 2020 2020           		dc.l $20202020		; $200000
(1)   86/     1B8 : 2020 2020           		dc.l $20202020		; $203FFF
(1)   87/     1BC :                     		align $1F0
(1)   88/     1F0 : 4620 2020 2020      		dc.b "F               "
              1F6 : 2020 2020 2020 
              1FC : 2020 2020          
(1)   89/     200 :                     
(1)   90/     200 :                     ; ====================================================================
(1)   91/     200 :                     ; ----------------------------------------------------------------
(1)   92/     200 :                     ; Error handlers
(1)   93/     200 :                     ;
(1)   94/     200 :                     ; all these do nothing currently
(1)   95/     200 :                     ; ----------------------------------------------------------------
(1)   96/     200 :                     
(1)   97/     200 :                     Pico_ErrBus:				; Bus error
(1)   98/     200 :                     Pico_ErrAddr:				; Address error
(1)   99/     200 :                     Pico_ErrIll:				; ILLEGAL Instruction
(1)  100/     200 :                     Pico_ErrZDiv:				; Divide by 0
(1)  101/     200 :                     Pico_ErrChk:				; CHK Instruction
(1)  102/     200 :                     Pico_ErrTrapV:				; TRAPV Instruction
(1)  103/     200 :                     Pico_ErrPrivl:				; Privilege violation
(1)  104/     200 :                     Pico_Trace:				; Trace
(1)  105/     200 :                     Pico_Line1010:				; Line 1010 Emulator
(1)  106/     200 :                     Pico_Line1111:				; Line 1111 Emulator
(1)  107/     200 :                     Pico_ErrorEx:				; Error exception
(1)  108/     200 :                     Pico_Error:
(1)  109/     200 : 4E73                		rte			; Return from Exception
(1)  110/     202 :                     
(1)  111/     202 :                     ; ----------------------------------------------------------------
(1)  112/     202 :                     ; PICO-exclusive interrupts
(1)  113/     202 :                     ; ----------------------------------------------------------------
(1)  114/     202 :                     
(1)  115/     202 :                     Pico_UserInt:
(1)  116/     202 :                     Pico_PcmInt:	; <-- Interrupt when the PCM chips gets full, Ojamajo# uses this.
(1)  117/     202 :                     Pico_UnkInt:
(1)  118/     202 : 4E73                		rte
(1)  119/     204 :                     
(1)  120/     204 :                     ; ====================================================================
(1)  121/     204 :                     ; ----------------------------------------------------------------
(1)  122/     204 :                     ; Entry point
(1)  123/     204 :                     ; ----------------------------------------------------------------
(1)  124/     204 :                     
(1)  125/     204 :                     Pico_Entry:
(1)  126/     204 :                     	; --------------------------------
(1)  127/     204 :                     	; Activate PICO system
(1)  128/     204 : 46FC 2700           		move	#$2700,sr		; Disable interrputs
(1)  129/     208 : 41F9 0080 0019      		lea	($800019),a0
(1)  130/     20E : 203C 5345 4741      		move.l	#"SEGA",d0
(1)  131/     214 : 01C8 0000           		movep.l	d0,(a0)			; Unlock PICO system
(1)  132/     218 : 4A79 00C0 0004      		tst.w	(vdp_ctrl).l		; Random VDP test to unlock video
(1)  133/     21E :                     
(1)  134/     21E :                     	; --------------------------------
(1)  135/     21E : 7000                		moveq	#0,d0
(1)  136/     220 : 2C40                		movea.l	d0,a6
(1)  137/     222 : 4E66                		move.l	a6,usp
(1)  138/     224 : 41F9 FFFF 0000      		lea	($FFFF0000),a0		; Clean our "work" RAM
(1)  139/     22A : 223C FFFF D40C      		move.l	#sizeof_mdram,d1
(1)  140/     230 : 7000                		moveq	#0,d0
(1)  141/     232 : 30C0                .loop_ram:	move.w	d0,(a0)+
(1)  142/     234 : B1C1                		cmp.l	d1,a0
(1)  143/     236 : 65FA                		bcs.s	.loop_ram
(1)  144/     238 : 4CF9 7FFF 00FF      		movem.l	($FF0000),d0-a6		; Clean registers using zeros from RAM
              23E : 0000             
(1)  145/     240 : 4DF9 00C0 0004      		lea	(vdp_ctrl).l,a6
(1)  146/     246 : 3E16                .wait_dma:	move.w	(a6),d7			; Check if our DMA is active.
(1)  147/     248 : 0807 0001           		btst	#1,d7
(1)  148/     24C : 66F8                		bne.s	.wait_dma
(1)  149/     24E :                     
     167/     24E : 6112                		bsr	Sound_init			; Init Sound driver FIRST
     168/     250 : 6100 0108           		bsr	Video_init			;  ''  Video
     169/     254 : 6100 0C96           		bsr	System_Init			;  ''  Values
     170/     258 : 31FC 0000 C458      		move.w	#0,(RAM_ScreenMode).w		; Start at screen 0
     171/     25E : 6000 0FD6           		bra.w	Md_ReadModes			; Go to SCREENJUMP section
     172/     262 :                     
     173/     262 :                     ; ---------------------------------------------
     174/     262 :                     ; MD
     175/     262 :                     ; ---------------------------------------------
     186/     262 :                     
     187/     262 :                     ; ====================================================================
     188/     262 :                     ; --------------------------------------------------------
     189/     262 :                     ; SYSTEM routines and MODE switching code
     190/     262 :                     ;
     191/     262 :                     ; MD and PICO: Normal ROM locations
     192/     262 :                     ; CD/32X/CD32X: Loaded into RAM
     193/     262 :                     ; --------------------------------------------------------
     194/     262 :                     
     199/     262 :                     ; ---------------------------------------------
     200/     262 :                     
     201/     262 :                     		include	"sound/driver/gema.asm"
(1)    1/     262 :                     ; ====================================================================
(1)    2/     262 :                     ; --------------------------------------------------------
(1)    3/     262 :                     ; GEMA/Nikona sound driver v0.9
(1)    4/     262 :                     ; (C)2023-2024 GenesisFan64
(1)    5/     262 :                     ;
(1)    6/     262 :                     ; Features:
(1)    7/     262 :                     ; - Support for SEGA CD's PCM channels:
(1)    8/     262 :                     ;   | All 8 channels with streaming support
(1)    9/     262 :                     ;   | for larger samples.
(1)   10/     262 :                     ;
(1)   11/     262 :                     ; - Support for 32X's PWM:
(1)   12/     262 :                     ;   | 7 pseudo-channels in either MONO
(1)   13/     262 :                     ;   | or STEREO.
(1)   14/     262 :                     ;
(1)   15/     262 :                     ; - DMA ROM protection
(1)   16/     262 :                     ;   | This keeps DAC in a decent quality while
(1)   17/     262 :                     ;   | doing any DMA jobs in the 68k side.
(1)   18/     262 :                     ; - DAC Playback at 16000hz
(1)   19/     262 :                     ; - FM special mode with custom frequencies
(1)   20/     262 :                     ; - Autodetection for the PSG's Tone3 mode
(1)   21/     262 :                     ;
(1)   22/     262 :                     ; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣴⣶⡿⠿⠿⠿⣶⣦⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀
(1)   23/     262 :                     ; ⠀⠀⠀⠀⠀⠀⢀⣠⣶⢟⣿⠟⠁⢰⢋⣽⡆⠈⠙⣿⡿⣶⣄⡀⠀⠀⠀⠀⠀⠀
(1)   24/     262 :                     ; ⠀⠀⠀⠀⣠⣴⠟⠋⢠⣾⠋⠀⣀⠘⠿⠿⠃⣀⠀⠈⣿⡄⠙⠻⣦⣄⠀⠀⠀⠀
(1)   25/     262 :                     ; ⠀⢀⣴⡿⠋⠁⠀⢀⣼⠏⠺⠛⠛⠻⠂⠐⠟⠛⠛⠗⠘⣷⡀⠀⠈⠙⢿⣦⡀⠀
(1)   26/     262 :                     ; ⣴⡟⢁⣀⣠⣤⡾⢿⡟⠀⠀⠀⠘⢷⠾⠷⡾⠃⠀⠀⠀⢻⡿⢷⣤⣄⣀⡈⢻⣦
(1)   27/     262 :                     ; ⠙⠛⠛⠋⠉⠁⠀⢸⡇⠀⠀⢠⣄⠀⠀⠀⠀⣠⡄⠀⠀⢸⡇⠀⠈⠉⠙⠛⠛⠋
(1)   28/     262 :                     ; ⠀⠀⠀⠀⠀⠀⠀⢸⡇⢾⣦⣀⣹⡧⠀⠀⢼⣏⣀⣴⡷⢸⡇⠀⠀⠀⠀⠀⠀⠀
(1)   29/     262 :                     ; ⠀⠀⠀⠀⠀⠀⠀⠸⣧⡀⠈⠛⠛⠁⠀⠀⠈⠛⠛⠁⢀⣼⠇⠀⠀⠀⠀⠀⠀⠀
(1)   30/     262 :                     ; ⠀⠀⠀⠀⠀⠀⠀⢀⣘⣿⣶⣤⣀⣀⣀⣀⣀⣀⣤⣶⣿⣃⠀⠀⠀⠀⠀⠀⠀⠀
(1)   31/     262 :                     ; ⠀⠀⠀⠀⠀⣠⡶⠟⠋⢉⣀⣽⠿⠉⠉⠉⠹⢿⣍⣈⠉⠛⠷⣦⡀⠀⠀⠀⠀⠀
(1)   32/     262 :                     ; ⠀⠀⠀⠀⢾⣯⣤⣴⡾⠟⠋⠁⠀⠀⠀⠀⠀⠀⠉⠛⠷⣶⣤⣬⣿⠀⠀⠀⠀⠀
(1)   33/     262 :                     ; ⠀⠀⠀⠀⠀⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠁⠀⠀⠀⠀⠀
(1)   34/     262 :                     ; --------------------------------------------------------
(1)   35/     262 :                     
(1)   36/     262 :                     ; ====================================================================
(1)   37/     262 :                     ; --------------------------------------------------------
(1)   38/     262 :                     ; Macros
(1)   39/     262 :                     ; --------------------------------------------------------
(1)   40/     262 :                     
(1)   41/     262 :                     ; Shared for all DAC, PCM, PWM
(1)   42/     262 :                     gSmpHead macro len,loop
(1)   43/     262 :                     	dc.b ((len)&$FF),(((len)>>8)&$FF),(((len)>>16)&$FF)	; length
(1)   44/     262 :                     	dc.b ((loop)&$FF),(((loop)>>8)&$FF),(((loop)>>16)&$FF)
(1)   45/     262 :                     	endm
(1)   46/     262 :                     
(1)   47/     262 :                     ; --------------------------------------------------------
(1)   48/     262 :                     ; Variables
(1)   49/     262 :                     ; --------------------------------------------------------
(1)   50/     262 :                     
(1)   51/     262 :                     ; z80_cpu	equ $A00000		; Z80 CPU area, size: $2000
(1)   52/     262 :                     ; z80_bus 	equ $A11100		; only read bit 0 (bit 8 as WORD)
(1)   53/     262 :                     ; z80_reset	equ $A11200		; WRITE only: $0000 reset/$0100 cancel
(1)   54/     262 :                     
(1)   55/     262 :                     ; Z80-area points:
(1)   56/     262 : =$40                 zDrvFifo	equ commZfifo		; FIFO command storage
(1)   57/     262 : =$2E                 zDrvFWrt	equ commZWrite		; FIFO command index
(1)   58/     262 : =$2F                 zDrvRomBlk	equ commZRomBlk		; ROM block flag
(1)   59/     262 : =$37                 zDrvMarsBlk	equ marsBlock		; Flag to disable 32X's PWM
(1)   60/     262 : =$36                 zDrvMcdBlk	equ mcdBlock		; Flag to disable SegaCD's PCM
(1)   61/     262 : =$35                 zDrvRamSrc	equ cdRamSrcB		; RAM-read source+dest pointers
(1)   62/     262 : =$30                 zDrvRamLen	equ cdRamLen		; RAM-read length and flag
(1)   63/     262 :                     
(1)   64/     262 :                     ; --------------------------------------------------------
(1)   65/     262 :                     ; Variables
(1)   66/     262 :                     ; --------------------------------------------------------
(1)   67/     262 :                     
(1)   68/     262 : =$FFFFFF00           RAM_ZCdFlag_D	equ RAM_ZSndBuff	; transferRom flag
(1)   69/     262 :                     
(1)   70/     262 :                     ; ====================================================================
(1)   71/     262 :                     ; --------------------------------------------------------
(1)   72/     262 :                     ; Initialize Sound
(1)   73/     262 :                     ;
(1)   74/     262 :                     ; Uses:
(1)   75/     262 :                     ; a0-a1,d0-d1
(1)   76/     262 :                     ; --------------------------------------------------------
(1)   77/     262 :                     
(1)   78/     262 :                     ; 		align $80
(1)   79/     262 :                     Sound_Init:
(1)   80/     262 : 007C 0700           		ori.w	#$0700,sr
(1)   82/     266 :                     		; PICO driver init...
(1)  110/     266 : 203C 0000 43B4      		move.l	#Gema_MasterList,d0
(1)  111/     26C : 606E                		bra	gemaSetMasterList
(1)  112/     26E :                     
(1)  113/     26E :                     ; ----------------------------------------------------------------
(1)  114/     26E :                     ; Sound_Update
(1)  115/     26E :                     ;
(1)  116/     26E :                     ; Call and LOOP this during DISPLAY to communicate
(1)  117/     26E :                     ; with the Z80
(1)  118/     26E :                     ;
(1)  119/     26E :                     ; SegaCD/CD32X:
(1)  120/     26E :                     ; This checks if the Z80 wants to read from RAM (as it can't
(1)  121/     26E :                     ; see it) then this CPU manually writes the RAM bytes from
(1)  122/     26E :                     ; here to the Z80's RAM
(1)  123/     26E :                     ; THIS IS REQUIRED for the tracks and instruments stored
(1)  124/     26E :                     ; on RAM in case you are doing ASIC-Stamps.
(1)  125/     26E :                     ;
(1)  126/     26E :                     ; DAC samples are safe to read from WORD-RAM (if NOT using Stamps)
(1)  127/     26E :                     ; but careful when loading new data, and make sure MAIN
(1)  128/     26E :                     ; has the permission to read the data.
(1)  129/     26E :                     ;
(1)  130/     26E :                     ; Sega Pico:
(1)  131/     26E :                     ; * For later *
(1)  132/     26E :                     ;
(1)  133/     26E :                     ; Uses:
(1)  134/     26E :                     ; d5-d7,a4-a6
(1)  135/     26E :                     ; ----------------------------------------------------------------
(1)  136/     26E :                     
(1)  137/     26E :                     Sound_Update:
(1)  139/     26E : 4E75                		rts		; entire Sound driver for Pico goes here
(1)  172/     270 : 4E75                		rts
(1)  173/     272 :                     
(1)  174/     272 :                     ; ====================================================================
(1)  175/     272 :                     ; ----------------------------------------------------------------
(1)  176/     272 :                     ; Subroutines
(1)  177/     272 :                     ; ----------------------------------------------------------------
(1)  178/     272 :                     
(1)  179/     272 :                     ; ------------------------------------------------
(1)  180/     272 :                     ; Lock Z80, get bus
(1)  181/     272 :                     ; ------------------------------------------------
(1)  182/     272 :                     
(1)  183/     272 :                     sndLockZ80:
(1)  190/     272 : 4E75                		rts
(1)  191/     274 :                     
(1)  192/     274 :                     ; ------------------------------------------------
(1)  193/     274 :                     ; Unlock Z80, return bus
(1)  194/     274 :                     ; ------------------------------------------------
(1)  195/     274 :                     
(1)  196/     274 :                     sndUnlockZ80:
(1)  200/     274 : 4E75                		rts
(1)  201/     276 :                     
(1)  202/     276 :                     ; ------------------------------------------------
(1)  203/     276 :                     ; 68K-to-Z80 sound request enter/exit routines
(1)  204/     276 :                     ;
(1)  205/     276 :                     ; d6 - commFifo index
(1)  206/     276 :                     ; ------------------------------------------------
(1)  207/     276 :                     
(1)  208/     276 :                     sndReq_Enter:
(1)  212/     276 :                     ; 		or.w	#$0700,sr			; Disable interrupts
(1)  213/     276 : 9EFC 0004           		suba	#4,sp				; Extra jump return
(1)  214/     27A : 48E7 0306           		movem.l	d6-d7/a5-a6,-(sp)		; Save these regs to the stack
(1)  215/     27E : DEFC 0014           		adda	#(4*4)+4,sp			; Go back to the RTS jump
(1)  216/     282 : 4BF9 00A0 002E      		lea	(z80_cpu+zDrvFWrt),a5		; a5 - commZWrite
(1)  217/     288 : 4DF9 00A0 0040      		lea	(z80_cpu+zDrvFifo),a6		; a6 - fifo command list
(1)  218/     28E :                     .wait:
(1)  223/     28E : 1C15                		move.b	(a5),d6				; d6 - index fifo position
(1)  224/     290 : 4886                		ext.w	d6				; extend to 16 bits
(1)  225/     292 : 4E75                		rts
(1)  226/     294 :                     ; JUMP ONLY
(1)  227/     294 :                     sndReq_Exit:
(1)  231/     294 : 9EFC 0018           		suba	#8+(4*4),sp
(1)  232/     298 : 4CDF 60C0           		movem.l	(sp)+,d6-d7/a5-a6		; And pop those back
(1)  233/     29C : DEFC 0008           		adda	#8,sp
(1)  234/     2A0 :                     ; 		andi.w	#$F8FF,sr			; Enable interrupts
(1)  235/     2A0 : 4E75                		rts
(1)  236/     2A2 :                     
(1)  237/     2A2 :                     ; ------------------------------------------------
(1)  238/     2A2 :                     ; Send request id and arguments
(1)  239/     2A2 :                     ;
(1)  240/     2A2 :                     ; Input:
(1)  241/     2A2 :                     ; d7 - byte to write
(1)  242/     2A2 :                     ; d6 - index pointer
(1)  243/     2A2 :                     ; a5 - commZWrite, update index
(1)  244/     2A2 :                     ; a6 - commZfifo command list
(1)  245/     2A2 :                     ;
(1)  246/     2A2 :                     ; *** CALL sndReq_Enter FIRST ***
(1)  247/     2A2 :                     ; ------------------------------------------------
(1)  248/     2A2 :                     
(1)  249/     2A2 :                     sndReq_scmd:
(1)  250/     2A2 : 1DBC 00FF 6000      		move.b	#-1,(a6,d6.w)			; write command-start flag
(1)  251/     2A8 : 5206                		addq.b	#1,d6				; next fifo pos
(1)  252/     2AA : 0206 000F           		andi.b	#MAX_ZCMND-1,d6
(1)  253/     2AE : 600C                		bra.s	sndReq_sbyte
(1)  254/     2B0 :                     sndReq_slong:
(1)  255/     2B0 : 610A                		bsr	sndReq_sbyte
(1)  256/     2B2 : E09F                		ror.l	#8,d7
(1)  257/     2B4 :                     sndReq_saddr:	; 24-bit address
(1)  258/     2B4 : 6106                		bsr	sndReq_sbyte
(1)  259/     2B6 : E09F                		ror.l	#8,d7
(1)  260/     2B8 :                     sndReq_sword:
(1)  261/     2B8 : 6102                		bsr	sndReq_sbyte
(1)  262/     2BA : E09F                		ror.l	#8,d7
(1)  263/     2BC :                     sndReq_sbyte:
(1)  264/     2BC : 1D87 6000           		move.b	d7,(a6,d6.w)			; write byte
(1)  265/     2C0 : 5206                		addq.b	#1,d6				; next fifo pos
(1)  266/     2C2 : 0206 000F           		andi.b	#MAX_ZCMND-1,d6
(1)  267/     2C6 : 1A86                		move.b	d6,(a5)				; update commZWrite
(1)  268/     2C8 : 4E75                		rts
(1)  269/     2CA :                     
(1)  270/     2CA :                     ; --------------------------------------------------------
(1)  271/     2CA :                     ; gemaDmaPause
(1)  272/     2CA :                     ;
(1)  273/     2CA :                     ; Call this BEFORE doing any DMA transfer
(1)  274/     2CA :                     ; --------------------------------------------------------
(1)  275/     2CA :                     
(1)  276/     2CA :                     gemaDmaPause:
(1)  278/     2CA : 4E75                		rts
(1)  292/     2CC :                     
(1)  293/     2CC :                     ; --------------------------------------------------------
(1)  294/     2CC :                     ; gemaDmaResume
(1)  295/     2CC :                     ;
(1)  296/     2CC :                     ; Call this AFTER finishing DMA transfer
(1)  297/     2CC :                     ; --------------------------------------------------------
(1)  298/     2CC :                     
(1)  299/     2CC :                     gemaDmaResume:
(1)  301/     2CC : 4E75                		rts
(1)  312/     2CE :                     
(1)  313/     2CE :                     ; --------------------------------------------------------
(1)  314/     2CE :                     ; gemaDmaPauseRom
(1)  315/     2CE :                     ;
(1)  316/     2CE :                     ; Call this BEFORE doing any DMA transfer
(1)  317/     2CE :                     ;
(1)  318/     2CE :                     ; *** BANKS $880000/$900000 WILL BE GONE ***
(1)  319/     2CE :                     ; --------------------------------------------------------
(1)  320/     2CE :                     
(1)  321/     2CE :                     gemaDmaPauseRom:
(1)  323/     2CE : 4E75                		rts
(1)  343/     2D0 :                     
(1)  344/     2D0 :                     ; --------------------------------------------------------
(1)  345/     2D0 :                     ; gemaDmaResumeRom
(1)  346/     2D0 :                     ;
(1)  347/     2D0 :                     ; Call this AFTER finishing DMA transfer
(1)  348/     2D0 :                     ;
(1)  349/     2D0 :                     ; *** BANKS $880000/$900000 GET RESTORED ***
(1)  350/     2D0 :                     ; --------------------------------------------------------
(1)  351/     2D0 :                     
(1)  352/     2D0 :                     gemaDmaResumeRom:
(1)  354/     2D0 : 4E75                		rts
(1)  372/     2D2 :                     
(1)  373/     2D2 :                     ; ====================================================================
(1)  374/     2D2 :                     ; --------------------------------------------------------
(1)  375/     2D2 :                     ; USER CALLS
(1)  376/     2D2 :                     ; --------------------------------------------------------
(1)  377/     2D2 :                     
(1)  378/     2D2 :                     ; --------------------------------------------------------
(1)  379/     2D2 :                     ; gemaTest
(1)  380/     2D2 :                     ;
(1)  381/     2D2 :                     ; For TESTING only.
(1)  382/     2D2 :                     ; --------------------------------------------------------
(1)  383/     2D2 :                     
(1)  384/     2D2 :                     gemaTest:
(1)  385/     2D2 : 61A2                		bsr	sndReq_Enter
(1)  386/     2D4 : 3E3C 0000           		move.w	#$00,d7		; Command $00
(1)  387/     2D8 : 61C8                		bsr	sndReq_scmd
(1)  388/     2DA : 60B8                		bra 	sndReq_Exit
(1)  389/     2DC :                     
(1)  390/     2DC :                     ; --------------------------------------------------------
(1)  391/     2DC :                     ; gemaSetMasterList
(1)  392/     2DC :                     ;
(1)  393/     2DC :                     ; Set Tracklist location
(1)  394/     2DC :                     ;
(1)  395/     2DC :                     ; Input:
(1)  396/     2DC :                     ; d0.l - 68k pointer
(1)  397/     2DC :                     ; --------------------------------------------------------
(1)  398/     2DC :                     
(1)  399/     2DC :                     gemaSetMasterList:
(1)  400/     2DC : 6198                		bsr	sndReq_Enter
(1)  401/     2DE : 3E3C 0001           		move.w	#$01,d7		; Command $01
(1)  402/     2E2 : 61BE                		bsr	sndReq_scmd
(1)  403/     2E4 : 2E00                		move.l	d0,d7
(1)  404/     2E6 : 61C8                		bsr	sndReq_slong
(1)  405/     2E8 : 60AA                		bra 	sndReq_Exit
(1)  406/     2EA :                     
(1)  407/     2EA :                     ; --------------------------------------------------------
(1)  408/     2EA :                     ; gemaPlayTrack
(1)  409/     2EA :                     ;
(1)  410/     2EA :                     ; Play a sequence with arguments
(1)  411/     2EA :                     ;
(1)  412/     2EA :                     ; Input:
(1)  413/     2EA :                     ; d0.b - Playback slot number
(1)  414/     2EA :                     ;        If -1: use auto-search
(1)  415/     2EA :                     ; d1.b - Sequence number
(1)  416/     2EA :                     ; d2.b - Starting block
(1)  417/     2EA :                     ; --------------------------------------------------------
(1)  418/     2EA :                     
(1)  419/     2EA :                     gemaPlayTrack:
(1)  420/     2EA : 618A                		bsr	sndReq_Enter
(1)  421/     2EC : 3E3C 0002           		move.w	#$02,d7		; Command $02
(1)  422/     2F0 : 61B0                		bsr	sndReq_scmd
(1)  423/     2F2 : 1E01                		move.b	d1,d7		; d1.b Seq number
(1)  424/     2F4 : 61C6                		bsr	sndReq_sbyte
(1)  425/     2F6 : 1E02                		move.b	d2,d7		; d2.b Block <--
(1)  426/     2F8 : 61C2                		bsr	sndReq_sbyte
(1)  427/     2FA : 1E00                		move.b	d0,d7		; d0.b Slot
(1)  428/     2FC : 61BE                		bsr	sndReq_sbyte
(1)  429/     2FE : 6094                		bra 	sndReq_Exit
(1)  430/     300 :                     
(1)  431/     300 :                     ; --------------------------------------------------------
(1)  432/     300 :                     ; gemaStopTrack
(1)  433/     300 :                     ;
(1)  434/     300 :                     ; Stops tracks with the same sequence number
(1)  435/     300 :                     ;
(1)  436/     300 :                     ; Input:
(1)  437/     300 :                     ; d0.b - Playback slot number
(1)  438/     300 :                     ;        If -1: stop all slots with the same number
(1)  439/     300 :                     ; d1.b - Sequence number to search for
(1)  440/     300 :                     ; --------------------------------------------------------
(1)  441/     300 :                     
(1)  442/     300 :                     gemaStopTrack:
(1)  443/     300 : 6100 FF74           		bsr	sndReq_Enter
(1)  444/     304 : 3E3C 0003           		move.w	#$03,d7		; Command $03
(1)  445/     308 : 6198                		bsr	sndReq_scmd
(1)  446/     30A : 1E01                		move.b	d1,d7		; d0.b Seq number
(1)  447/     30C : 61AE                		bsr	sndReq_sbyte
(1)  448/     30E : 1E00                		move.b	d0,d7		; d1.b Slot
(1)  449/     310 : 61AA                		bsr	sndReq_sbyte
(1)  450/     312 : 6080                		bra 	sndReq_Exit
(1)  451/     314 :                     
(1)  452/     314 :                     ; --------------------------------------------------------
(1)  453/     314 :                     ; gemaFadeTrack
(1)  454/     314 :                     ;
(1)  455/     314 :                     ; Set Master volume to a track slot.
(1)  456/     314 :                     ;
(1)  457/     314 :                     ; Input:
(1)  458/     314 :                     ; d0.b - Playback slot number
(1)  459/     314 :                     ;        If -1: Apply to all slots
(1)  460/     314 :                     ; d1.b - Target volume
(1)  461/     314 :                     ; d2.b - Fade speed TODO
(1)  462/     314 :                     ;
(1)  463/     314 :                     ; Notes:
(1)  464/     314 :                     ; - DO NOT MIX THIS WITH gemaSetTrackVol
(1)  465/     314 :                     ; - In v1.0 this only works on (re)start
(1)  466/     314 :                     ;   or during new notes on playback.
(1)  467/     314 :                     ; --------------------------------------------------------
(1)  468/     314 :                     
(1)  469/     314 :                     gemaFadeTrack:
(1)  470/     314 : 6100 FF60           		bsr	sndReq_Enter
(1)  471/     318 : 3E3C 0005           		move.w	#$05,d7		; Command $05
(1)  472/     31C : 6184                		bsr	sndReq_scmd
(1)  473/     31E : 1E01                		move.b	d1,d7		; d0.b Target volume
(1)  474/     320 : 619A                		bsr	sndReq_sbyte
(1)  475/     322 : 1E00                		move.b	d0,d7		; d1.b Slot
(1)  476/     324 : 6196                		bsr	sndReq_sbyte
(1)  477/     326 : 6000 FF6C           		bra 	sndReq_Exit
(1)  478/     32A :                     
(1)  479/     32A :                     ; --------------------------------------------------------
(1)  480/     32A :                     ; gemaSetTrackVol
(1)  481/     32A :                     ;
(1)  482/     32A :                     ; Set Master volume to a track slot.
(1)  483/     32A :                     ;
(1)  484/     32A :                     ; Input:
(1)  485/     32A :                     ; d0.b - Playback slot number
(1)  486/     32A :                     ;        If -1: Set to all slots
(1)  487/     32A :                     ; d1.b - Master volume ($00-$40 max-min)
(1)  488/     32A :                     ;
(1)  489/     32A :                     ; Notes:
(1)  490/     32A :                     ; - DO NOT MIX THIS WITH gemaFadeTrack
(1)  491/     32A :                     ; - In v1.0 this only works on (re)start
(1)  492/     32A :                     ;   or during new notes on playback.
(1)  493/     32A :                     ; --------------------------------------------------------
(1)  494/     32A :                     
(1)  495/     32A :                     gemaSetTrackVol:
(1)  496/     32A : 6100 FF4A           		bsr	sndReq_Enter
(1)  497/     32E : 3E3C 0006           		move.w	#$06,d7		; Command $06
(1)  498/     332 : 6100 FF6E           		bsr	sndReq_scmd
(1)  499/     336 : 1E01                		move.b	d1,d7		; d0.b Volume data <--
(1)  500/     338 : 6182                		bsr	sndReq_sbyte
(1)  501/     33A : 1E00                		move.b	d0,d7		; d1.b Slot
(1)  502/     33C : 6100 FF7E           		bsr	sndReq_sbyte
(1)  503/     340 : 6000 FF52           		bra 	sndReq_Exit
(1)  504/     344 :                     
(1)  505/     344 :                     ; --------------------------------------------------------
(1)  506/     344 :                     ; gemaSetBeats
(1)  507/     344 :                     ;
(1)  508/     344 :                     ; Sets global subbeats
(1)  509/     344 :                     ;
(1)  510/     344 :                     ; d0.w - sub-beats
(1)  511/     344 :                     ; --------------------------------------------------------
(1)  512/     344 :                     
(1)  513/     344 :                     ; TODO: find a way to calculate this and
(1)  514/     344 :                     ; explain to the user.
(1)  515/     344 :                     
(1)  516/     344 :                     gemaSetBeats:
(1)  517/     344 : 6100 FF30           		bsr	sndReq_Enter
(1)  518/     348 : 3E3C 0007           		move.w	#$07,d7		; Command $07
(1)  519/     34C : 6100 FF54           		bsr	sndReq_scmd
(1)  520/     350 : 3E00                		move.w	d0,d7
(1)  521/     352 : 6100 FF64           		bsr	sndReq_sword
(1)  522/     356 : 6000 FF3C           		bra 	sndReq_Exit
(1)  523/     35A :                     
     202/     35A :                     		include	"system/md/video.asm"
(1)    1/     35A :                     ; ====================================================================
(1)    2/     35A :                     ; ----------------------------------------------------------------
(1)    3/     35A :                     ; Genesis VDP section
(1)    4/     35A :                     ; ----------------------------------------------------------------
(1)    5/     35A :                     
(1)    6/     35A :                     ; ====================================================================
(1)    7/     35A :                     ; --------------------------------------------------------
(1)    8/     35A :                     ; Settings
(1)    9/     35A :                     ; --------------------------------------------------------
(1)   10/     35A :                     
(1)   11/     35A : =$18                 MAX_MDOBJ	equ 24		; MAX Objects
(1)   12/     35A : =$18                 MAX_MDDMATSK	equ 24		; MAX DMA BLAST entries
(1)   13/     35A : =$7FF                varNullVram	equ $07FF	; Default Blank cell
(1)   14/     35A : =$580                varPrintVram	equ $0580	; Default location of the PRINT text graphics
(1)   15/     35A : =$3                  varPrintPal	equ 3		; Palette to use for the printable text
(1)   16/     35A :                     
(1)   17/     35A :                     ; --------------------------------------------------------
(1)   18/     35A :                     ; Variables
(1)   19/     35A :                     ; --------------------------------------------------------
(1)   20/     35A :                     
(1)   21/     35A :                     ; VDP Register $80
(1)   22/     35A : =$2                  HVStop		equ $02
(1)   23/     35A : =$10                 HintEnbl	equ $10
(1)   24/     35A : =$1                  bitHVStop	equ 1
(1)   25/     35A : =$4                  bitHintEnbl	equ 4
(1)   26/     35A :                     
(1)   27/     35A :                     ; VDP Register $81
(1)   28/     35A : =$40                 DispEnbl 	equ $40
(1)   29/     35A : =$20                 VintEnbl 	equ $20
(1)   30/     35A : =$10                 DmaEnbl		equ $10
(1)   31/     35A : =$6                  bitDispEnbl	equ 6
(1)   32/     35A : =$5                  bitVintEnbl	equ 5
(1)   33/     35A : =$4                  bitDmaEnbl	equ 4
(1)   34/     35A : =$3                  bitV30		equ 3
(1)   35/     35A :                     
(1)   36/     35A :                     ; vdp_ctrl READ bits (full WORD)
(1)   37/     35A : =$9                  bitFifoE	equ 9		; DMA FIFO empty
(1)   38/     35A : =$8                  bitFifoF	equ 8		; DMA FIFO full
(1)   39/     35A : =$7                  bitVInt		equ 7		; Vertical interrupt
(1)   40/     35A : =$6                  bitSprOvr	equ 6		; Sprite overflow
(1)   41/     35A : =$5                  bitSprCol	equ 5		; Sprite collision
(1)   42/     35A : =$4                  bitOdd		equ 4		; EVEN or ODD frame displayed on interlace mode
(1)   43/     35A : =$3                  bitVBlk		equ 3		; Inside VBlank
(1)   44/     35A : =$2                  bitHBlk		equ 2		; Inside HBlank
(1)   45/     35A : =$1                  bitDma		equ 1		; Only works for FILL and COPY
(1)   46/     35A : =$0                  bitPal		equ 0
(1)   47/     35A :                     
(1)   48/     35A :                     ; md_bg_flags
(1)   49/     35A : =$0                  bitDrwR		equ 0
(1)   50/     35A : =$1                  bitDrwL		equ 1
(1)   51/     35A : =$2                  bitDrwD		equ 2
(1)   52/     35A : =$3                  bitDrwU		equ 3
(1)   53/     35A : =$6                  bitMarsBg	equ 6
(1)   54/     35A : =$7                  bitBgOn		equ 7
(1)   55/     35A :                     
(1)   56/     35A :                     ; ====================================================================
(1)   57/     35A :                     ; ----------------------------------------------------------------
(1)   58/     35A :                     ; Structs
(1)   59/     35A :                     ; ----------------------------------------------------------------
(1)   60/     35A :                     
(1)   61/     35A :                     ; --------------------------------
(1)   62/     35A :                     ; object strct
(1)   63/     35A :                     ; --------------------------------
(1)   64/     35A :                     
(1)   65/     35A : (MACRO)              		strct 0
(1)   65/     35A : =$35A                GLBL_LASTPC     set *
(1)   65/FFFFFFFFFFFFC95E :                                     dephase
(1)   65/       0 :                                     phase 0
(1)   65/       0 : =$0                  GLBL_LASTORG    set *
(1)   66/       0 :                     obj_code	ds.l 1		; Object code, 0 == no object
(1)   67/       4 :                     obj_x		ds.l 1		; Object X Position 0000.0000
(1)   68/       8 :                     obj_y		ds.l 1		; Object Y Position 0000.0000
(1)   69/       C :                     obj_map		ds.l 1		; Object Sprite map data location
(1)   70/      10 :                     obj_dma		ds.l 1		; Object DMA map, 0 == Don't use DMA
(1)   71/      14 :                     obj_vram	ds.w 1		; Object VRAM position (If DMA enabled: output location)
(1)   72/      16 :                     obj_x_spd	ds.w 1		; Object X Speed 00.00
(1)   73/      18 :                     obj_y_spd	ds.w 1		; Object Y Speed 00.00
(1)   74/      1A :                     obj_anim_indx	ds.w 1		; * Object animation script index (obj_anim + obj_anim_indx)
(1)   75/      1C :                     obj_anim_id	ds.w 1		; * Object animation number: $ccss c-current s-saved
(1)   76/      1E :                     obj_frame	ds.w 1		; * Object current frame
(1)   77/      20 :                     obj_anim_spd	ds.b 1		; * Object animation delay
(1)   78/      21 :                     obj_index	ds.b 1		; Object code index
(1)   79/      22 :                     obj_set		ds.b 1		; Object settings
(1)   80/      23 :                     obj_subid	ds.b 1		; Object Sub-ID for Object placement
(1)   81/      24 :                     obj_status	ds.b 1		; Object custom status
(1)   82/      25 :                     obj_FREE	ds.b 1		; (FILLER align byte)
(1)   83/      26 :                     obj_ram		ds.b $40	; Object's own RAM
(1)   84/      66 :                     sizeof_mdobj	ds.l 0
(1)   85/      68 : (MACRO)              		endstrct
(1)   85/       0 :                                     org GLBL_LASTORG
(1)   85/     35A :                                     phase GLBL_LASTPC
(1)   86/     35A :                     ; 		message "\{sizeof_mdobj}"
(1)   87/     35A :                     
(1)   88/     35A :                     ; --------------------------------
(1)   89/     35A :                     ; ** obj_set
(1)   90/     35A : =$7                  bitobj_Mars	equ	7	; 32X ONLY: This objects draws to the 32X side (256-color sprite)
(1)   91/     35A : =$1                  bitobj_flipV	equ	1	; Set to flip object Vertically
(1)   92/     35A : =$0                  bitobj_flipH	equ	0	; Set to flip object Horizontally
(1)   93/     35A :                     
(1)   94/     35A :                     ; --------------------------------
(1)   95/     35A :                     ; ** obj_set
(1)   96/     35A :                     ; bitobj_air	equ	0	; set if floating/jumping
(1)   97/     35A :                     
(1)   98/     35A :                     ; --------------------------------
(1)   99/     35A :                     ; ** obj_size
(1)  100/     35A :                     ; at_u		equ	3
(1)  101/     35A :                     ; at_d		equ	2
(1)  102/     35A :                     ; at_l		equ	1
(1)  103/     35A :                     ; at_r		equ	0
(1)  104/     35A :                     
(1)  105/     35A :                     ; ====================================================================
(1)  106/     35A :                     ; ----------------------------------------------------------------
(1)  107/     35A :                     ; Video RAM
(1)  108/     35A :                     ; ----------------------------------------------------------------
(1)  109/     35A :                     
(1)  110/     35A : (MACRO)              			strct RAM_MdVideo
(1)  110/     35A : =$35A                GLBL_LASTPC     set *
(1)  110/       0 :                                     dephase
(1)  110/FFFFFFFFFFFFA004 :                                     phase RAM_MDVIDEO
(1)  110/FFFFFFFFFFFFA004 : =$FFFFFFFFFFFFA004   GLBL_LASTORG    set *
(1)  111/FFFFFFFFFFFFA004 :                     RAM_HorScroll		ds.l 240			; DMA Horizontal scroll data
(1)  112/FFFFFFFFFFFFA3C4 :                     RAM_VerScroll		ds.l 320/16			; DMA Vertical scroll data
(1)  113/FFFFFFFFFFFFA414 :                     RAM_Sprites		ds.w 8*80			; DMA Sprites
(1)  114/FFFFFFFFFFFFA914 :                     RAM_SprDrwPz		ds.w 8*80			; External sprite pieces
(1)  115/FFFFFFFFFFFFAE14 :                     RAM_Palette		ds.w 64				; DMA palette
(1)  116/FFFFFFFFFFFFAE94 :                     RAM_MdMarsPalFd		ds.w 256			; Target 32X palette for FadeIn/Out (NOTE: CPU intensive)
(1)  117/FFFFFFFFFFFFB094 :                     RAM_PaletteFd		ds.w 64				; Target MD palette for FadeIn/Out
(1)  118/FFFFFFFFFFFFB114 :                     RAM_VdpDmaList		ds.b $10*MAX_MDDMATSK		; DMA BLAST list for VBlank
(1)  119/FFFFFFFFFFFFB294 :                     RAM_Objects		ds.b MAX_MDOBJ*sizeof_mdobj	; Objects
(1)  120/FFFFFFFFFFFFBC24 :                     RAM_ObjDispList		ds.w MAX_MDOBJ			; half-RAM pointers for display (Obj|Extra)
(1)  121/FFFFFFFFFFFFBC54 :                     RAM_VidPrntList		ds.w 3*64			; Video_Print list: Address, Type
(1)  122/FFFFFFFFFFFFBDD4 :                     RAM_FrameCount		ds.l 1				; Frames counter
(1)  123/FFFFFFFFFFFFBDD8 :                     RAM_SprDrwCntr		ds.w 1
(1)  124/FFFFFFFFFFFFBDDA :                     RAM_SprLinkNum		ds.w 1
(1)  125/FFFFFFFFFFFFBDDC :                     RAM_VdpExWrite		ds.w 1
(1)  126/FFFFFFFFFFFFBDDE :                     RAM_VdpDmaIndx		ds.w 1				; Current index in DMA BLAST list
(1)  127/FFFFFFFFFFFFBDE0 :                     RAM_VdpDmaMod		ds.w 1				; Mid-write flag
(1)  128/FFFFFFFFFFFFBDE2 :                     RAM_VidPrntVram		ds.w 1				; Default VRAM location for ASCII text used by Video_Print
(1)  129/FFFFFFFFFFFFBDE4 :                     RAM_FadeMdReq		ds.w 1				; FadeIn/Out request for Genesis palette (01-FadeIn 02-FadeOut)
(1)  130/FFFFFFFFFFFFBDE6 :                     RAM_FadeMdIncr		ds.w 1				; Fading increment count
(1)  131/FFFFFFFFFFFFBDE8 :                     RAM_FadeMdDelay		ds.w 1				; Fading delay
(1)  132/FFFFFFFFFFFFBDEA :                     RAM_FadeMdTmr		ds.w 1				; Fading delay timer
(1)  133/FFFFFFFFFFFFBDEC :                     RAM_FadeMarsReq		ds.w 1				; Same thing but for 32X's 256-color (01-FadeIn 02-FadeOut)
(1)  134/FFFFFFFFFFFFBDEE :                     RAM_FadeMarsIncr	ds.w 1				; (Hint: Set to 4 to syncronize with Genesis' FadeIn/Out)
(1)  135/FFFFFFFFFFFFBDF0 :                     RAM_FadeMarsDelay	ds.w 1
(1)  136/FFFFFFFFFFFFBDF2 :                     RAM_FadeMarsTmr		ds.w 1
(1)  137/FFFFFFFFFFFFBDF4 :                     RAM_MdMars_DrawAll	ds.w 1
(1)  138/FFFFFFFFFFFFBDF6 :                     RAM_VdpRegs		ds.b 24				; VDP Register cache
(1)  139/FFFFFFFFFFFFBE0E :                     sizeof_mdvid		ds.l 0
(1)  140/FFFFFFFFFFFFBE14 : (MACRO)              			endstrct
(1)  140/FFFFFFFFFFFFA004 :                                     org GLBL_LASTORG
(1)  140/     35A :                                     phase GLBL_LASTPC
(1)  141/     35A :                     
(1)  142/     35A : (MACRO)              		erreport "MD VIDEO RAM",sizeof_mdvid-RAM_MdVideo,MAX_MdVideo
(1)  143/     35A :                     
(1)  144/     35A :                     ; ====================================================================
(1)  145/     35A :                     ; --------------------------------------------------------
(1)  146/     35A :                     ; Initialize Genesis video
(1)  147/     35A :                     ;
(1)  148/     35A :                     ; Breaks:
(1)  149/     35A :                     ; d6-d7/a5-a6
(1)  150/     35A :                     ; --------------------------------------------------------
(1)  151/     35A :                     
(1)  152/     35A :                     Video_Init:
(1)  153/     35A : 4DF8 A004           		lea	(RAM_MdVideo).w,a6		; Clear our RAM section
(1)  154/     35E : 3C3C 8000           		move.w	#$8000,d6
(1)  155/     362 : 3E3C 1E09           		move.w	#(sizeof_mdvid-RAM_MdVideo)-1,d7
(1)  156/     366 :                     .clrram:
(1)  157/     366 : 1CC6                		move.b	d6,(a6)+			; (Write the LSB zero)
(1)  158/     368 : 51CF FFFC           		dbf	d7,.clrram
(1)  159/     36C : 31FC 0001 BDDA      		move.w	#1,(RAM_SprLinkNum).w
(1)  160/     372 : 4DFA 0030           		lea	list_vdpregs(pc),a6		; Write "cache'd" VDP registers
(1)  161/     376 : 4BF8 BDF6           		lea	(RAM_VdpRegs).w,a5
(1)  162/     37A : 3E3C 0010           		move.w	#17-1,d7
(1)  163/     37E :                     .loop:
(1)  164/     37E : 1C1E                		move.b	(a6)+,d6
(1)  165/     380 : 1AC6                		move.b	d6,(a5)+
(1)  166/     382 : 51CF FFFA           		dbf	d7,.loop
(1)  167/     386 :                     
(1)  168/     386 :                     ; --------------------------------------------------------
(1)  169/     386 :                     ; Video_Update
(1)  170/     386 :                     ;
(1)  171/     386 :                     ; Writes register data stored in RAM to VDP
(1)  172/     386 :                     ; from registers $80 to $90
(1)  173/     386 :                     ;
(1)  174/     386 :                     ; WINDOW registers $91 and $92 are written
(1)  175/     386 :                     ; manually.
(1)  176/     386 :                     ;
(1)  177/     386 :                     ; Breaks:
(1)  178/     386 :                     ; d6-d7/a5-a6
(1)  179/     386 :                     ; --------------------------------------------------------
(1)  180/     386 :                     
(1)  181/     386 :                     Video_Update:
(1)  182/     386 : 4DF8 BDF6           		lea	(RAM_VdpRegs).w,a6
(1)  183/     38A : 4BF9 00C0 0004      		lea	(vdp_ctrl),a5
(1)  184/     390 : 3C3C 8000           		move.w	#$8000,d6
(1)  185/     394 : 7E10                		moveq	#17-1,d7
(1)  186/     396 :                     .loop:
(1)  187/     396 : 1C1E                		move.b	(a6)+,d6
(1)  188/     398 : 3A86                		move.w	d6,(a5)
(1)  189/     39A : 0646 0100           		addi.w	#$0100,d6
(1)  190/     39E : 51CF FFF6           		dbf	d7,.loop
(1)  191/     3A2 :                     .exit:
(1)  192/     3A2 : 4E75                		rts
(1)  193/     3A4 :                     
(1)  194/     3A4 :                     ; ------------------------------------------------
(1)  195/     3A4 :                     ; Default VDP register settings
(1)  196/     3A4 :                     ; ------------------------------------------------
(1)  197/     3A4 :                     
(1)  198/     3A4 :                     list_vdpregs:
(1)  199/     3A4 : 04                  		dc.b $04			; No HBlank interrupt, HV Counter on
(1)  200/     3A5 : 04                  		dc.b $04			; Display ON, No VBlank interrupt
(1)  201/     3A6 : 30                  		dc.b (($C000)>>10)		; Layer A at VRAM $C000 (%00xxx000)
(1)  202/     3A7 : 34                  		dc.b (($D000)>>10)		; Window  at VRAM $D000 (%00xxxxy0)
(1)  203/     3A8 : 07                  		dc.b (($E000)>>13)		; Layer B at VRAM $E000 (%00000xxx)
(1)  204/     3A9 : 7C                  		dc.b (($F800)>>9)		; Sprites at VRAM $F800 (%0xxxxxxy)
(1)  205/     3AA : 00                  		dc.b $00			; Unused
(1)  206/     3AB : 00                  		dc.b $00			; Background color: $00
(1)  207/     3AC : 00                  		dc.b $00			; Unused
(1)  208/     3AD : 00                  		dc.b $00			; Unused
(1)  209/     3AE : 00                  		dc.b $00			; HInt line number trigger
(1)  210/     3AF : 00                  		dc.b (%000|%00)			; No ExtInt, Scroll: VSCR:full HSCR:full
(1)  211/     3B0 : 81                  		dc.b $81			; H40, No shadow mode, 320-pixel resolution mode
(1)  212/     3B1 : 3F                  		dc.b (($FC00)>>10)		; HScroll at VRAM $FC00 (%00xxxxxx)
(1)  213/     3B2 : 00                  		dc.b $00			; Unused
(1)  214/     3B3 : 02                  		dc.b $02			; VDP auto-increment: $02
(1)  215/     3B4 : 01                  		dc.b (%00<<4)|%01		; Scroll area size: V32 H64
(1)  216/     3B5 : 00                  		dc.b $00
(1)  217/     3B6 : 00                  		dc.b $00
(1)  218/     3B7 :                     		align 2
(1)  219/     3B8 :                     ; Default PRINT palette
(1)  220/     3B8 : 0000 0EEE 0CCC      ASCII_PAL:	dc.w $0000,$0EEE,$0CCC,$0AAA,$0888,$0444,$000E,$0008
              3BE : 0AAA 0888 0444 
              3C4 : 000E 0008          
(1)  221/     3C8 : 00EE 0088 00E0      		dc.w $00EE,$0088,$00E0,$0080,$0E00,$0800,$0000,$0000
              3CE : 0080 0E00 0800 
              3D4 : 0000 0000          
(1)  222/     3D8 :                     		align 2
(1)  223/     3D8 :                     
(1)  224/     3D8 :                     ; --------------------------------------------------------
(1)  225/     3D8 :                     ; Video_Clear
(1)  226/     3D8 :                     ;
(1)  227/     3D8 :                     ; Clear all video data from VRAM
(1)  228/     3D8 :                     ;
(1)  229/     3D8 :                     ; Breaks:
(1)  230/     3D8 :                     ; ALL
(1)  231/     3D8 :                     ; --------------------------------------------------------
(1)  232/     3D8 :                     
(1)  233/     3D8 :                     Video_Clear:
(1)  234/     3D8 :                     ; 		move.w	#0,d0			; Clears until $57F
(1)  235/     3D8 :                     ; 		move.w	#0,d1
(1)  236/     3D8 :                     ; 		move.w	#$57F*$20,d2
(1)  237/     3D8 :                     ; 		bsr	Video_Fill
(1)  238/     3D8 :                     
(1)  239/     3D8 :                     ; --------------------------------------------------------
(1)  240/     3D8 :                     ; Video_ClearScreen
(1)  241/     3D8 :                     ;
(1)  242/     3D8 :                     ; Clears ALL Genesis screens FG/BG/WIN
(1)  243/     3D8 :                     ;
(1)  244/     3D8 :                     ; Breaks:
(1)  245/     3D8 :                     ; d0-d2/d6-d7/a5-a6
(1)  246/     3D8 :                     ; --------------------------------------------------------
(1)  247/     3D8 :                     
(1)  248/     3D8 :                     Video_ClearScreen:
(1)  249/     3D8 : 7000                		moveq	#0,d0
(1)  250/     3DA : 343C 1000           		move.w	#$1000,d2		; FG/BG size
(1)  251/     3DE : 1238 BDF8           		move.b	(RAM_VdpRegs+2).w,d1	; FG
(1)  252/     3E2 : 0241 0038           		andi.w	#%111000,d1
(1)  253/     3E6 : E149                		lsl.w	#8,d1
(1)  254/     3E8 : E549                		lsl.w	#2,d1
(1)  255/     3EA : 6100 02EE           		bsr	Video_Fill
(1)  256/     3EE : 1238 BDFA           		move.b	(RAM_VdpRegs+4).w,d1	; BG
(1)  257/     3F2 : 0241 0007           		andi.w	#%000111,d1
(1)  258/     3F6 : E149                		lsl.w	#8,d1
(1)  259/     3F8 : EB49                		lsl.w	#5,d1
(1)  260/     3FA : 6100 02DE           		bsr	Video_Fill
(1)  261/     3FE : 343C 1000           		move.w	#$1000,d2		; WD Size
(1)  262/     402 : 1238 BDF9           		move.b	(RAM_VdpRegs+3).w,d1	; Window
(1)  263/     406 : 0241 003E           		andi.w	#%111110,d1
(1)  264/     40A : E149                		lsl.w	#8,d1
(1)  265/     40C : E549                		lsl.w	#2,d1
(1)  266/     40E : 6100 02CA           		bsr	Video_Fill
(1)  267/     412 : 4DF8 A004           		lea	(RAM_HorScroll).w,a6	; RAM cleanup
(1)  268/     416 : 3E3C 00EF           		move.w	#240-1,d7
(1)  269/     41A : 7C00                		moveq	#0,d6
(1)  270/     41C :                     .xnext:
(1)  271/     41C : 2CC6                		move.l	d6,(a6)+
(1)  272/     41E : 51CF FFFC           		dbf	d7,.xnext
(1)  273/     422 : 4DF8 A3C4           		lea	(RAM_VerScroll).w,a6
(1)  274/     426 : 3E3C 0013           		move.w	#(320/16)-1,d7
(1)  275/     42A :                     .ynext:
(1)  276/     42A : 2CC6                		move.l	d6,(a6)+
(1)  277/     42C : 51CF FFFC           		dbf	d7,.ynext
(1)  278/     430 : 4DF8 A414           		lea	(RAM_Sprites).w,a6
(1)  279/     434 : 3E3C 009F           		move.w	#((80*8)/4)-1,d7
(1)  280/     438 :                     .snext:
(1)  281/     438 : 2CC6                		move.l	d6,(a6)+
(1)  282/     43A : 51CF FFFC           		dbf	d7,.snext
(1)  283/     43E : 4DF8 AE14           		lea	(RAM_Palette).w,a6
(1)  284/     442 : 4BF8 B094           		lea	(RAM_PaletteFd).w,a5
(1)  285/     446 : 3E3C 001F           		move.w	#(64/2)-1,d7
(1)  286/     44A :                     .pnext:
(1)  287/     44A : 2CC6                		move.l	d6,(a6)+
(1)  288/     44C : 2AC6                		move.l	d6,(a5)+
(1)  289/     44E : 51CF FFFA           		dbf	d7,.pnext
(1)  300/     452 : 4E75                		rts
(1)  301/     454 :                     
(1)  302/     454 :                     ; ====================================================================
(1)  303/     454 :                     ; ----------------------------------------------------------------
(1)  304/     454 :                     ; Palette fade system, Genesis side
(1)  305/     454 :                     ; ----------------------------------------------------------------
(1)  306/     454 :                     
(1)  307/     454 :                     ; --------------------------------------------------------
(1)  308/     454 :                     ; FULL Fade in
(1)  309/     454 :                     ; --------------------------------------------------------
(1)  310/     454 :                     
(1)  311/     454 :                     Video_FadeIn:
(1)  312/     454 : 31FC 0001 BDE6      		move.w	#1,(RAM_FadeMdIncr).w	; Increment speed
(1)  313/     45A : 31FC 0002 BDEE      		move.w	#2,(RAM_FadeMarsIncr).w
(1)  314/     460 : 31FC 0001 BDE8      		move.w	#1,(RAM_FadeMdDelay).w	; Delay by
(1)  315/     466 : 31FC 0000 BDF0      		move.w	#0,(RAM_FadeMarsDelay).w
(1)  316/     46C : 31FC 0001 BDE4      		move.w	#1,(RAM_FadeMdReq).w	; Fade-in task
(1)  317/     472 : 31FC 0001 BDEC      		move.w	#1,(RAM_FadeMarsReq).w
(1)  318/     478 : 6026                		bra	Video_WaitFade
(1)  319/     47A :                     
(1)  320/     47A :                     ; --------------------------------------------------------
(1)  321/     47A :                     ; FULL Fade out
(1)  322/     47A :                     ; --------------------------------------------------------
(1)  323/     47A :                     
(1)  324/     47A :                     Video_FadeOut:
(1)  325/     47A : 31FC 0001 BDE6      		move.w	#1,(RAM_FadeMdIncr).w	; Increment speed
(1)  326/     480 : 31FC 0002 BDEE      		move.w	#2,(RAM_FadeMarsIncr).w
(1)  327/     486 : 31FC 0001 BDE8      		move.w	#1,(RAM_FadeMdDelay).w	; Delay by
(1)  328/     48C : 31FC 0000 BDF0      		move.w	#0,(RAM_FadeMarsDelay).w
(1)  329/     492 : 31FC 0002 BDE4      		move.w	#2,(RAM_FadeMdReq).w	; Fade-in task
(1)  330/     498 : 31FC 0002 BDEC      		move.w	#2,(RAM_FadeMarsReq).w
(1)  331/     49E : 4E71                		bra	Video_WaitFade
(1)  332/     4A0 :                     
(1)  333/     4A0 :                     ; --------------------------------------------------------
(1)  334/     4A0 :                     ; Video_WaitFade
(1)  335/     4A0 :                     ; --------------------------------------------------------
(1)  336/     4A0 :                     
(1)  337/     4A0 :                     Video_WaitFade:
(1)  338/     4A0 : 6100 0A9A           		bsr	System_Render
(1)  346/     4A4 : 6140                		bsr	Video_DoPalFade
(1)  347/     4A6 : 3E38 BDE4           		move.w	(RAM_FadeMdReq).w,d7
(1)  349/     4AA : 4A47                		tst.w	d7
(1)  350/     4AC : 66F2                		bne.s	Video_WaitFade
(1)  351/     4AE : 4E75                		rts
(1)  352/     4B0 :                     
(1)  353/     4B0 :                     ; --------------------------------------------------------
(1)  354/     4B0 :                     ; Video_RunFade
(1)  355/     4B0 :                     ;
(1)  356/     4B0 :                     ; Processes palette fading for one frame returns
(1)  357/     4B0 :                     ; status on exit.
(1)  358/     4B0 :                     ;
(1)  359/     4B0 :                     ; Returns:
(1)  360/     4B0 :                     ; bne - Still active, jump back.
(1)  361/     4B0 :                     ; beq - Finished
(1)  362/     4B0 :                     ;
(1)  363/     4B0 :                     ; Breaks:
(1)  364/     4B0 :                     ; All
(1)  365/     4B0 :                     ;
(1)  366/     4B0 :                     ; Notes:
(1)  367/     4B0 :                     ; Call System_Render FIRST before calling this
(1)  368/     4B0 :                     ; --------------------------------------------------------
(1)  369/     4B0 :                     
(1)  370/     4B0 :                     Video_RunFade:
(1)  378/     4B0 : 6134                		bsr	Video_DoPalFade
(1)  379/     4B2 : 3E38 BDE4           		move.w	(RAM_FadeMdReq).w,d7
(1)  381/     4B6 : 4E75                		rts
(1)  382/     4B8 :                     
(1)  383/     4B8 :                     ; --------------------------------------------------------
(1)  384/     4B8 :                     ; Video_LoadPal
(1)  385/     4B8 :                     ;
(1)  386/     4B8 :                     ; Input:
(1)  387/     4B8 :                     ; a0 - Palette data
(1)  388/     4B8 :                     ; d0 - Start position
(1)  389/     4B8 :                     ; d1 - Number of colors
(1)  390/     4B8 :                     ;
(1)  391/     4B8 :                     ; Breaks:
(1)  392/     4B8 :                     ; d5-d7,a6
(1)  393/     4B8 :                     ; --------------------------------------------------------
(1)  394/     4B8 :                     
(1)  395/     4B8 :                     Video_FadePal:
(1)  396/     4B8 : 4DF8 B094           		lea	(RAM_PaletteFd).w,a6
(1)  397/     4BC : 4278 BDEA           		clr.w	(RAM_FadeMdTmr).w
(1)  398/     4C0 : 6004                		bra.s	vidMd_Pal
(1)  399/     4C2 :                     Video_LoadPal:
(1)  400/     4C2 : 4DF8 AE14           		lea	(RAM_Palette).w,a6
(1)  401/     4C6 :                     vidMd_Pal:
(1)  402/     4C6 : 2A48                		move.l	a0,a5
(1)  403/     4C8 : 7E00                		moveq	#0,d7
(1)  404/     4CA : 3E00                		move.w	d0,d7
(1)  405/     4CC : DE47                		add.w	d7,d7
(1)  406/     4CE : DCC7                		adda	d7,a6
(1)  407/     4D0 : 3E01                		move.w	d1,d7
(1)  408/     4D2 : 0447 0001           		subi.w	#1,d7
(1)  409/     4D6 : 3C02                		move.w	d2,d6
(1)  410/     4D8 : 0246 0001           		andi.w	#1,d6
(1)  411/     4DC : E25E                		ror.w	#1,d6
(1)  412/     4DE :                     .loop:
(1)  413/     4DE : 3CDD                		move.w	(a5)+,(a6)+
(1)  414/     4E0 : 51CF FFFC           		dbf	d7,.loop
(1)  415/     4E4 : 4E75                		rts
(1)  416/     4E6 :                     
(1)  417/     4E6 :                     ; --------------------------------------------------------
(1)  418/     4E6 :                     ; Video_DoPalFade
(1)  419/     4E6 :                     ;
(1)  420/     4E6 :                     ; RAM_ReqFadeMars: (WORD)
(1)  421/     4E6 :                     ; $00 - No task or finished.
(1)  422/     4E6 :                     ; $01 - Fade in
(1)  423/     4E6 :                     ; $02 - Fade out to black
(1)  424/     4E6 :                     ;
(1)  425/     4E6 :                     ; NOTE: ONLY CALL THIS OUTSIDE OF VBLANK
(1)  426/     4E6 :                     ; --------------------------------------------------------
(1)  427/     4E6 :                     
(1)  428/     4E6 :                     Video_DoPalFade:
(1)  429/     4E6 : 0478 0001 BDEA      		subi.w	#1,(RAM_FadeMdTmr).w
(1)  430/     4EC : 6A14                		bpl.s	.active
(1)  431/     4EE : 31F8 BDE8 BDEA      		move.w	(RAM_FadeMdDelay).w,(RAM_FadeMdTmr).w
(1)  432/     4F4 : 3E38 BDE4           		move.w	(RAM_FadeMdReq).w,d7
(1)  433/     4F8 : DE47                		add.w	d7,d7
(1)  434/     4FA : 3E3B 7008           		move.w	.fade_list(pc,d7.w),d7
(1)  435/     4FE : 4EFB 7004           		jmp	.fade_list(pc,d7.w)
(1)  436/     502 :                     .active:
(1)  437/     502 : 4E75                		rts
(1)  438/     504 :                     
(1)  439/     504 :                     ; --------------------------------------------
(1)  440/     504 :                     
(1)  441/     504 :                     .fade_list:
(1)  442/     504 : 0006                		dc.w .fade_done-.fade_list
(1)  443/     506 : 0008                		dc.w .fade_in-.fade_list
(1)  444/     508 : 00AA                		dc.w .fade_out-.fade_list
(1)  445/     50A :                     
(1)  446/     50A :                     ; --------------------------------------------
(1)  447/     50A :                     ; No fade or finished.
(1)  448/     50A :                     ; --------------------------------------------
(1)  449/     50A :                     
(1)  450/     50A :                     .fade_done:
(1)  451/     50A : 4E75                		rts
(1)  452/     50C :                     
(1)  453/     50C :                     ; --------------------------------------------
(1)  454/     50C :                     ; Fade in
(1)  455/     50C :                     ; --------------------------------------------
(1)  456/     50C :                     
(1)  457/     50C :                     .fade_in:
(1)  458/     50C : 4DF8 B094           		lea	(RAM_PaletteFd).w,a6
(1)  459/     510 : 4BF8 AE14           		lea	(RAM_Palette).w,a5
(1)  460/     514 : 7040                		moveq	#64,d0				; Num of colors
(1)  461/     516 : 3238 BDE6           		move.w	(RAM_FadeMdIncr).w,d1		; Speed
(1)  462/     51A : D241                		add.w	d1,d1
(1)  463/     51C : 3C00                		move.w	d0,d6
(1)  464/     51E : 4846                		swap	d6
(1)  465/     520 : 0440 0001           		subi.w	#1,d0
(1)  466/     524 :                     .nxt_pal:
(1)  467/     524 : 4242                		clr.w	d2		; Reset finished colorbits
(1)  468/     526 : 3E16                		move.w	(a6),d7		; d7 - Input
(1)  469/     528 : 3C15                		move.w	(a5),d6		; d6 - Output
(1)  470/     52A : 3607                		move.w	d7,d3		; RED
(1)  471/     52C : 3806                		move.w	d6,d4
(1)  472/     52E : 0246 0EE0           		andi.w	#%0000111011100000,d6
(1)  473/     532 : 0244 000E           		andi.w	#%0000000000001110,d4
(1)  474/     536 : 0243 000E           		andi.w	#%0000000000001110,d3
(1)  475/     53A : D841                		add.w	d1,d4
(1)  476/     53C : B843                		cmp.w	d3,d4
(1)  477/     53E : 6506                		bcs.s	.no_red
(1)  478/     540 : 3803                		move.w	d3,d4
(1)  479/     542 : 0042 0001           		ori.w	#%001,d2	; RED is ready
(1)  480/     546 :                     .no_red:
(1)  481/     546 : 8C44                		or.w	d4,d6
(1)  482/     548 : E949                		lsl.w	#4,d1
(1)  483/     54A : 3607                		move.w	d7,d3		; GREEN
(1)  484/     54C : 3806                		move.w	d6,d4
(1)  485/     54E : 0246 0E0E           		andi.w	#%0000111000001110,d6
(1)  486/     552 : 0244 00E0           		andi.w	#%0000000011100000,d4
(1)  487/     556 : 0243 00E0           		andi.w	#%0000000011100000,d3
(1)  488/     55A : D841                		add.w	d1,d4
(1)  489/     55C : B843                		cmp.w	d3,d4
(1)  490/     55E : 6506                		bcs.s	.no_grn
(1)  491/     560 : 3803                		move.w	d3,d4
(1)  492/     562 : 0042 0002           		ori.w	#%010,d2	; GREEN is ready
(1)  493/     566 :                     .no_grn:
(1)  494/     566 : 8C44                		or.w	d4,d6
(1)  495/     568 : E949                		lsl.w	#4,d1
(1)  496/     56A : 3607                		move.w	d7,d3		; BLUE
(1)  497/     56C : 3806                		move.w	d6,d4
(1)  498/     56E : 0246 00EE           		andi.w	#%0000000011101110,d6
(1)  499/     572 : 0244 0E00           		andi.w	#%0000111000000000,d4
(1)  500/     576 : 0243 0E00           		andi.w	#%0000111000000000,d3
(1)  501/     57A : D841                		add.w	d1,d4
(1)  502/     57C : B843                		cmp.w	d3,d4
(1)  503/     57E : 6506                		bcs.s	.no_blu
(1)  504/     580 : 3803                		move.w	d3,d4
(1)  505/     582 : 0042 0004           		ori.w	#%100,d2	; BLUE is ready
(1)  506/     586 :                     .no_blu:
(1)  507/     586 : 8C44                		or.w	d4,d6
(1)  508/     588 : E049                		lsr.w	#8,d1
(1)  509/     58A : 3AC6                		move.w	d6,(a5)+
(1)  510/     58C : DCFC 0002           		adda	#2,a6
(1)  511/     590 : 0C42 0007           		cmpi.w	#%111,d2
(1)  512/     594 : 6608                		bne.s	.no_fnsh
(1)  513/     596 : 4846                		swap	d6
(1)  514/     598 : 0446 0001           		subi.w	#1,d6
(1)  515/     59C : 4846                		swap	d6
(1)  516/     59E :                     .no_fnsh:
(1)  517/     59E : 51C8 FF84           		dbf	d0,.nxt_pal
(1)  518/     5A2 : 4846                		swap	d6
(1)  519/     5A4 : 4A46                		tst.w	d6
(1)  520/     5A6 : 6604                		bne.s	.no_move
(1)  521/     5A8 : 4278 BDE4           		clr.w	(RAM_FadeMdReq).w
(1)  522/     5AC :                     .no_move:
(1)  523/     5AC : 4E75                		rts
(1)  524/     5AE :                     
(1)  525/     5AE :                     ; --------------------------------------------
(1)  526/     5AE :                     ; Fade out
(1)  527/     5AE :                     ; --------------------------------------------
(1)  528/     5AE :                     
(1)  529/     5AE :                     .fade_out:
(1)  530/     5AE : 4DF8 AE14           		lea	(RAM_Palette).w,a6
(1)  531/     5B2 : 7040                		moveq	#64,d0				; Num of colors
(1)  532/     5B4 : 3238 BDE6           		move.w	(RAM_FadeMdIncr).w,d1		; Speed
(1)  533/     5B8 : 3C00                		move.w	d0,d6
(1)  534/     5BA : 4846                		swap	d6
(1)  535/     5BC : 0440 0001           		subi.w	#1,d0
(1)  536/     5C0 :                     .nxt_pal_o:
(1)  537/     5C0 : 4242                		clr.w	d2			; Reset finished colorbits
(1)  538/     5C2 : 3E16                		move.w	(a6),d7			; d7 - Input
(1)  539/     5C4 : 3C07                		move.w	d7,d6
(1)  540/     5C6 : 0247 0EE0           		andi.w	#%0000111011100000,d7
(1)  541/     5CA : 0246 000E           		andi.w	#%0000000000001110,d6
(1)  542/     5CE : 9C41                		sub.w	d1,d6
(1)  543/     5D0 : 6A06                		bpl.s	.no_red_o
(1)  544/     5D2 : 4246                		clr.w	d6
(1)  545/     5D4 : 0042 0001           		ori.w	#%001,d2		; RED is ready
(1)  546/     5D8 :                     .no_red_o:
(1)  547/     5D8 : 8E46                		or.w	d6,d7
(1)  548/     5DA : E949                		lsl.w	#4,d1
(1)  549/     5DC : 3C07                		move.w	d7,d6
(1)  550/     5DE : 0247 0E0E           		andi.w	#%0000111000001110,d7
(1)  551/     5E2 : 0246 00E0           		andi.w	#%0000000011100000,d6
(1)  552/     5E6 : 9C41                		sub.w	d1,d6
(1)  553/     5E8 : 6A06                		bpl.s	.no_grn_o
(1)  554/     5EA : 4246                		clr.w	d6
(1)  555/     5EC : 0042 0002           		ori.w	#%010,d2		; GREEN is ready
(1)  556/     5F0 :                     .no_grn_o:
(1)  557/     5F0 : 8E46                		or.w	d6,d7
(1)  558/     5F2 : E949                		lsl.w	#4,d1
(1)  559/     5F4 : 3C07                		move.w	d7,d6
(1)  560/     5F6 : 0247 00EE           		andi.w	#%0000000011101110,d7
(1)  561/     5FA : 0246 0E00           		andi.w	#%0000111000000000,d6
(1)  562/     5FE : 9C41                		sub.w	d1,d6
(1)  563/     600 : 6A06                		bpl.s	.no_blu_o
(1)  564/     602 : 4246                		clr.w	d6
(1)  565/     604 : 0042 0004           		ori.w	#%100,d2		; BLUE is ready
(1)  566/     608 :                     .no_blu_o:
(1)  567/     608 : 8E46                		or.w	d6,d7
(1)  568/     60A : E049                		lsr.w	#8,d1
(1)  569/     60C : 3CC7                		move.w	d7,(a6)+
(1)  570/     60E : 0C42 0007           		cmpi.w	#%111,d2
(1)  571/     612 : 6608                		bne.s	.no_fnsh_o
(1)  572/     614 : 4846                		swap	d6
(1)  573/     616 : 0446 0001           		subi.w	#1,d6
(1)  574/     61A : 4846                		swap	d6
(1)  575/     61C :                     .no_fnsh_o:
(1)  576/     61C : 51C8 FFA2           		dbf	d0,.nxt_pal_o
(1)  577/     620 : 4846                		swap	d6
(1)  578/     622 : 4A46                		tst.w	d6
(1)  579/     624 : 6604                		bne.s	.no_move_o
(1)  580/     626 : 4278 BDE4           		clr.w	(RAM_FadeMdReq).w
(1)  581/     62A :                     .no_move_o:
(1)  582/     62A : 4E75                		rts
(1)  583/     62C :                     
(1)  584/     62C :                     ; ====================================================================
(1)  585/     62C :                     ; --------------------------------------------------------
(1)  586/     62C :                     ; Genesis DMA
(1)  587/     62C :                     ; --------------------------------------------------------
(1)  588/     62C :                     
(1)  589/     62C :                     ; --------------------------------------------------------
(1)  590/     62C :                     ; Video_DmaMkEntry
(1)  591/     62C :                     ;
(1)  592/     62C :                     ; Sets a new DMA transfer entry to the BLAST list
(1)  593/     62C :                     ;
(1)  594/     62C :                     ; *** CALL THIS OUTSIDE OF VBLANK ONLY ***
(1)  595/     62C :                     ;
(1)  596/     62C :                     ; d0.l - Art data Real-ROM location
(1)  597/     62C :                     ; d1.w - VRAM location cell_vram()
(1)  598/     62C :                     ; d2.w - Size
(1)  599/     62C :                     ;
(1)  600/     62C :                     ; Breaks:
(1)  601/     62C :                     ; d5-d7,a6
(1)  602/     62C :                     ; --------------------------------------------------------
(1)  603/     62C :                     
(1)  604/     62C :                     Video_DmaMkEntry:
(1)  605/     62C : 2A00                		move.l	d0,d5
(1)  606/     62E : DA42                		add.w	d2,d5
(1)  607/     630 : 6430                		bcc.s	.normal
(1)  608/     632 : 2A00                		move.l	d0,d5		; <-- DOUBLE TRANSFER
(1)  609/     634 : 3C01                		move.w	d1,d6
(1)  610/     636 : 2E05                		move.l	d5,d7		; Top
(1)  611/     638 : 0687 0001 0000      		addi.l	#$010000,d7
(1)  612/     63E : 0287 00FF 0000      		andi.l	#$FF0000,d7
(1)  613/     644 : 9E80                		sub.l	d0,d7
(1)  614/     646 : 6120                		bsr.s	.mk_set
(1)  615/     648 : 2A00                		move.l	d0,d5		; Bottom
(1)  616/     64A : 0685 0001 0000      		addi.l	#$010000,d5
(1)  617/     650 : 0285 00FF 0000      		andi.l	#$FF0000,d5
(1)  618/     656 : 2C05                		move.l	d5,d6
(1)  619/     658 : 9C80                		sub.l	d0,d6
(1)  620/     65A : 3E02                		move.w	d2,d7
(1)  621/     65C : 9E46                		sub.w	d6,d7
(1)  622/     65E : DC41                		add.w	d1,d6
(1)  623/     660 : 6006                		bra.s	.mk_set
(1)  624/     662 :                     .normal:
(1)  625/     662 : 2A00                		move.l	d0,d5
(1)  626/     664 : 3C01                		move.w	d1,d6
(1)  627/     666 : 3E02                		move.w	d2,d7
(1)  628/     668 :                     ; d7 - size
(1)  629/     668 :                     ; d6 - vram
(1)  630/     668 :                     ; d5 - data
(1)  631/     668 :                     .mk_set:
(1)  632/     668 : 4847                		swap	d7
(1)  633/     66A : 3E38 BDDE           		move.w	(RAM_VdpDmaIndx).w,d7
(1)  634/     66E : 0C47 0018           		cmpi.w	#MAX_MDDMATSK,d7
(1)  635/     672 : 6C64                		bge.s	.ran_out
(1)  636/     674 : E94F                		lsl.w	#4,d7			; Size $10
(1)  637/     676 : 4DF8 B114           		lea	(RAM_VdpDmaList).w,a6
(1)  638/     67A : DCC7                		adda	d7,a6
(1)  639/     67C : 4847                		swap	d7
(1)  640/     67E : 31FC 0001 BDE0      		move.w	#1,(RAM_VdpDmaMod).w
(1)  641/     684 : 5278 BDDE           		addq.w	#1,(RAM_VdpDmaIndx).w
(1)  642/     688 :                     
(1)  643/     688 : 0287 0000 FFFE      		andi.l	#$0000FFFE,d7
(1)  644/     68E : EF8F                		lsl.l	#7,d7
(1)  645/     690 : E04F                		lsr.w	#8,d7
(1)  646/     692 : 0087 9400 9300      		ori.l	#$94009300,d7
(1)  647/     698 : 2CC7                		move.l	d7,(a6)+
(1)  648/     69A : E28D                  		lsr.l	#1,d5			; d5 - Source
(1)  649/     69C : 2E3C 9600 9500       		move.l	#$96009500,d7
(1)  650/     6A2 : 1E05                 		move.b	d5,d7
(1)  651/     6A4 : E08D                 		lsr.l	#8,d5
(1)  652/     6A6 : 4847                 		swap	d7
(1)  653/     6A8 : 1E05                 		move.b	d5,d7
(1)  654/     6AA : 2CC7                 		move.l	d7,(a6)+
(1)  655/     6AC : 3E3C 9700            		move.w	#$9700,d7
(1)  656/     6B0 : E08D                 		lsr.l	#8,d5
(1)  657/     6B2 : 1E05                 		move.b	d5,d7
(1)  658/     6B4 : 3CC7                 		move.w	d7,(a6)+
(1)  659/     6B6 : 3E06                		move.w	d6,d7			; Destination
(1)  660/     6B8 : 0286 0000 3FFF      		andi.l	#$3FFF,d6
(1)  661/     6BE : 0046 4000           		ori.w	#$4000,d6
(1)  662/     6C2 : E04F                		lsr.w	#8,d7
(1)  663/     6C4 : EC4F                		lsr.w	#6,d7
(1)  664/     6C6 : 0247 0003           		andi.w	#%11,d7
(1)  665/     6CA : 0047 0080           		ori.w	#$80,d7
(1)  666/     6CE : 3CC6                		move.w	d6,(a6)+
(1)  667/     6D0 : 3CC7                		move.w	d7,(a6)+
(1)  675/     6D2 : 31FC 0000 BDE0      		move.w	#0,(RAM_VdpDmaMod).w
(1)  676/     6D8 :                     .ran_out:
(1)  677/     6D8 : 4E75                		rts
(1)  678/     6DA :                     
(1)  679/     6DA :                     ; --------------------------------------------------------
(1)  680/     6DA :                     ; Video_Fill
(1)  681/     6DA :                     ;
(1)  682/     6DA :                     ; Fill data to VRAM
(1)  683/     6DA :                     ;
(1)  684/     6DA :                     ; d0.w - WORD to fill
(1)  685/     6DA :                     ; d1.w - VRAM location cell_vram()
(1)  686/     6DA :                     ; d2.w - Size
(1)  687/     6DA :                     ;
(1)  688/     6DA :                     ; Breaks:
(1)  689/     6DA :                     ; d6-d7,a6
(1)  690/     6DA :                     ;
(1)  691/     6DA :                     ; Notes:
(1)  692/     6DA :                     ; Size $0001 is invalid, writes in this order: $56781234
(1)  693/     6DA :                     ; --------------------------------------------------------
(1)  694/     6DA :                     
(1)  695/     6DA :                     Video_Fill:
(1)  696/     6DA : 4DF9 00C0 0004      		lea	(vdp_ctrl).l,a6
(1)  697/     6E0 : 3E3C 8100           		move.w	#$8100,d7
(1)  698/     6E4 : 1E38 BDF7           		move.b	(RAM_VdpRegs+1).w,d7
(1)  699/     6E8 : 08C7 0004           		bset	#bitDmaEnbl,d7
(1)  700/     6EC : 3C87                		move.w	d7,(a6)
(1)  701/     6EE : 3E16                .dmaw:		move.w	(a6),d7
(1)  702/     6F0 : 0807 0001           		btst	#bitDma,d7
(1)  703/     6F4 : 66F8                		bne.s	.dmaw
(1)  704/     6F6 : 3CBC 8F01           		move.w	#$8F01,(a6)	; Increment $01
(1)  705/     6FA : 3E02                		move.w	d2,d7		; d2 - Size
(1)  706/     6FC : 0447 0001           		subi.w	#1,d7
(1)  707/     700 : 2C3C 9400 9300      		move.l	#$94009300,d6
(1)  708/     706 : 1C07                		move.b	d7,d6
(1)  709/     708 : 4846                		swap	d6
(1)  710/     70A : E04F                		lsr.w	#8,d7
(1)  711/     70C : 1C07                		move.b	d7,d6
(1)  712/     70E : 4846                		swap	d6
(1)  713/     710 : 2C86                		move.l	d6,(a6)
(1)  714/     712 : 3CBC 9780           		move.w	#$9780,(a6)	; DMA Fill mode
(1)  715/     716 : 3E01                		move.w	d1,d7		; d1 - Destination
(1)  716/     718 : 3C07                		move.w	d7,d6
(1)  717/     71A : 0246 3FFF           		andi.w	#$3FFF,d6
(1)  718/     71E : 0046 4000           		ori.w	#$4000,d6
(1)  719/     722 : 4846                		swap	d6
(1)  720/     724 : 3C07                		move.w	d7,d6
(1)  721/     726 : E04E                		lsr.w	#8,d6
(1)  722/     728 : EC4E                		lsr.w	#6,d6
(1)  723/     72A : 0246 0003           		andi.w	#%11,d6
(1)  724/     72E : 0046 0080           		ori.w	#$80,d6
(1)  725/     732 : 2C86                		move.l	d6,(a6)
(1)  726/     734 : 3D40 FFFC           		move.w	d0,-4(a6)
(1)  727/     738 : 3E16                .dma_w:		move.w	(a6),d7
(1)  728/     73A : 0807 0001           		btst	#bitDma,d7
(1)  729/     73E : 66F8                		bne.s	.dma_w
(1)  730/     740 : 3CBC 8F02           		move.w	#$8F02,(a6)	; Increment $02
(1)  731/     744 : 3E3C 8100           		move.w	#$8100,d7
(1)  732/     748 : 1E38 BDF7           		move.b	(RAM_VdpRegs+1).w,d7
(1)  733/     74C : 3C87                		move.w	d7,(a6)
(1)  734/     74E : 4E75                		rts
(1)  735/     750 :                     
(1)  736/     750 :                     ; --------------------------------------------------------
(1)  737/     750 :                     ; Video_Copy
(1)  738/     750 :                     ;
(1)  739/     750 :                     ; Copy VRAM data to another location
(1)  740/     750 :                     ;
(1)  741/     750 :                     ; d0.w - VRAM Source cell_vram()
(1)  742/     750 :                     ; d1.w - VRAM Destination cell_vram()
(1)  743/     750 :                     ; d2.w - Size
(1)  744/     750 :                     ;
(1)  745/     750 :                     ; Breaks:
(1)  746/     750 :                     ; d6-d7,a6
(1)  747/     750 :                     ; --------------------------------------------------------
(1)  748/     750 :                     
(1)  749/     750 :                     ; TODO: test if this works again...
(1)  750/     750 :                     
(1)  751/     750 :                     Video_Copy:
(1)  752/     750 : 4DF9 00C0 0004      		lea	(vdp_ctrl),a6
(1)  753/     756 : 3E3C 8100           		move.w	#$8100,d7
(1)  754/     75A : 1E38 BDF7           		move.b	(RAM_VdpRegs+1).w,d7
(1)  755/     75E : 08C7 0004           		bset	#bitDmaEnbl,d7
(1)  756/     762 : 3C87                		move.w	d7,(a6)
(1)  757/     764 : 3E16                .dmaw:		move.w	(a6),d7
(1)  758/     766 : 0807 0001           		btst	#bitDma,d7
(1)  759/     76A : 66F8                		bne.s	.dmaw
(1)  760/     76C : 3CBC 8F01           		move.w	#$8F01,(a6)		; Increment $01
(1)  761/     770 : 3E02                		move.w	d2,d7			; SIZE
(1)  762/     772 : 2C3C 9400 9300      		move.l	#$94009300,d6
(1)  763/     778 :                     ; 		lsr.w	#1,d7
(1)  764/     778 : 1C07                		move.b	d7,d6
(1)  765/     77A : 4846                		swap	d6
(1)  766/     77C : E04F                		lsr.w	#8,d7
(1)  767/     77E : 1C07                		move.b	d7,d6
(1)  768/     780 : 4846                		swap	d6
(1)  769/     782 : 2C86                		move.l	d6,(a6)
(1)  770/     784 : 2C3C 9600 9500      		move.l	#$96009500,d6		; SOURCE
(1)  771/     78A : 3E00                		move.w	d0,d7
(1)  772/     78C : 1C07                		move.b	d7,d6
(1)  773/     78E : 4846                		swap	d6
(1)  774/     790 : E04F                		lsr.w	#8,d7
(1)  775/     792 : 1C07                		move.b	d7,d6
(1)  776/     794 : 2C86                		move.l	d6,(a6)
(1)  777/     796 : 3CBC 97C0           		move.w	#$97C0,(a6)		; DMA Copy mode
(1)  778/     79A : 2E02                		move.l	d2,d7			; DESTINATION
(1)  779/     79C : 3C07                		move.w	d7,d6
(1)  780/     79E : 0246 3FFF           		andi.w	#$3FFF,d6
(1)  781/     7A2 : 0046 4000           		ori.w	#$4000,d6
(1)  782/     7A6 : 4846                		swap	d6
(1)  783/     7A8 : 3C07                		move.w	d7,d6
(1)  784/     7AA : E04E                		lsr.w	#8,d6
(1)  785/     7AC : EC4E                		lsr.w	#6,d6
(1)  786/     7AE : 0246 0003           		andi.w	#%11,d6
(1)  787/     7B2 : 0046 00C0           		ori.w	#$C0,d6
(1)  788/     7B6 : 2C86                		move.l	d6,(a6)
(1)  789/     7B8 : 3D41 FFFC           		move.w	d1,-4(a6)
(1)  790/     7BC : 3E16                .dma_w:		move.w	(a6),d7
(1)  791/     7BE : 0807 0001           		btst	#bitDma,d7
(1)  792/     7C2 : 66F8                		bne.s	.dma_w
(1)  793/     7C4 : 3CBC 8F02           		move.w	#$8F02,(a6)		; Increment $02
(1)  794/     7C8 : 3E3C 8100           		move.w	#$8100,d7
(1)  795/     7CC : 1E38 BDF7           		move.b	(RAM_VdpRegs+1).w,d7
(1)  796/     7D0 : 3C87                		move.w	d7,(a6)
(1)  797/     7D2 : 4E75                		rts
(1)  798/     7D4 :                     
(1)  799/     7D4 :                     ; --------------------------------------------------------
(1)  800/     7D4 :                     ; Load graphics using DMA manually
(1)  801/     7D4 :                     ;
(1)  802/     7D4 :                     ; Input:
(1)  803/     7D4 :                     ; d0.l - Graphics data pointer (NOT a0)
(1)  804/     7D4 :                     ; d1.w - cell_vram(vram_pos)
(1)  805/     7D4 :                     ; d2.w - Size
(1)  806/     7D4 :                     ;
(1)  807/     7D4 :                     ; Breaks:
(1)  808/     7D4 :                     ; d4-d7,a4
(1)  809/     7D4 :                     ;
(1)  810/     7D4 :                     ; Notes:
(1)  811/     7D4 :                     ; - For a faster transfer call this during VBlank
(1)  812/     7D4 :                     ; - 32X: MAKE SURE THE SH2 SIDE IS NOT READING ROM
(1)  813/     7D4 :                     ;        BEFORE CALLING THIS.
(1)  814/     7D4 :                     ; --------------------------------------------------------
(1)  815/     7D4 :                     
(1)  816/     7D4 :                     Video_LoadArt:
(1)  817/     7D4 : 2A00                		move.l	d0,d5
(1)  818/     7D6 : DA42                		add.w	d2,d5
(1)  819/     7D8 : 6430                		bcc.s	.normal
(1)  820/     7DA : 2A00                		move.l	d0,d5		; <-- DOUBLE TRANSFER
(1)  821/     7DC : 3C01                		move.w	d1,d6
(1)  822/     7DE : 2E05                		move.l	d5,d7		; Top
(1)  823/     7E0 : 0687 0001 0000      		addi.l	#$010000,d7
(1)  824/     7E6 : 0287 00FF 0000      		andi.l	#$FF0000,d7
(1)  825/     7EC : 9E80                		sub.l	d0,d7
(1)  826/     7EE : 6120                		bsr.s	.mk_set
(1)  827/     7F0 : 2A00                		move.l	d0,d5		; Bottom
(1)  828/     7F2 : 0685 0001 0000      		addi.l	#$010000,d5
(1)  829/     7F8 : 0285 00FF 0000      		andi.l	#$FF0000,d5
(1)  830/     7FE : 2C05                		move.l	d5,d6
(1)  831/     800 : 9C80                		sub.l	d0,d6
(1)  832/     802 : 3E02                		move.w	d2,d7
(1)  833/     804 : 9E46                		sub.w	d6,d7
(1)  834/     806 : DC41                		add.w	d1,d6
(1)  835/     808 : 6006                		bra.s	.mk_set
(1)  836/     80A :                     .normal:
(1)  837/     80A : 2A00                		move.l	d0,d5
(1)  838/     80C : 3C01                		move.w	d1,d6
(1)  839/     80E : 3E02                		move.w	d2,d7
(1)  840/     810 :                     ; d7 - size
(1)  841/     810 :                     ; d6 - vram
(1)  842/     810 :                     ; d5 - data
(1)  843/     810 :                     .mk_set:
(1)  844/     810 : 49F9 00C0 0004      		lea	(vdp_ctrl),a4
(1)  845/     816 : 383C 8100           		move.w	#$8100,d4		; DMA ON
(1)  846/     81A : 1838 BDF7           		move.b	(RAM_VdpRegs+1).w,d4
(1)  847/     81E : 08C4 0004           		bset	#bitDmaEnbl,d4
(1)  848/     822 : 3884                		move.w	d4,(a4)
(1)  849/     824 :                     
(1)  864/     824 : 611A                		bsr.s	.shared_setup
(1)  865/     826 : 3886                		move.w	d6,(a4)
(1)  866/     828 : 6100 0760           		bsr	System_DmaEnter_ROM
(1)  867/     82C : 3887                		move.w	d7,(a4)			; <-- second write
(1)  868/     82E : 6100 075E           		bsr	System_DmaExit_ROM
(1)  869/     832 : 383C 8100           		move.w	#$8100,d4		; DMA OFF
(1)  870/     836 : 1838 BDF7           		move.b	(RAM_VdpRegs+1).w,d4
(1)  871/     83A : 3884                		move.w	d4,(a4)
(1)  872/     83C :                     
(1)  894/     83C : 4E75                		rts
(1)  895/     83E :                     
(1)  896/     83E :                     .from_ram:
(1)  897/     83E : 4E75                		rts
(1)  898/     840 :                     
(1)  899/     840 :                     .shared_setup:
(1)  900/     840 : 0287 0000 FFFE      		andi.l	#$0000FFFE,d7
(1)  901/     846 : EF8F                		lsl.l	#7,d7
(1)  902/     848 : E04F                		lsr.w	#8,d7
(1)  903/     84A : 0087 9400 9300      		ori.l	#$94009300,d7
(1)  904/     850 : 2887                		move.l	d7,(a4)
(1)  905/     852 : E28D                  		lsr.l	#1,d5			; d5 - Source
(1)  906/     854 : 2E3C 9600 9500       		move.l	#$96009500,d7
(1)  907/     85A : 1E05                 		move.b	d5,d7
(1)  908/     85C : E08D                 		lsr.l	#8,d5
(1)  909/     85E : 4847                 		swap	d7
(1)  910/     860 : 1E05                 		move.b	d5,d7
(1)  911/     862 : 2887                 		move.l	d7,(a4)
(1)  912/     864 : 3E3C 9700            		move.w	#$9700,d7
(1)  913/     868 : E08D                 		lsr.l	#8,d5
(1)  914/     86A : 1E05                 		move.b	d5,d7
(1)  915/     86C : 3887                 		move.w	d7,(a4)
(1)  916/     86E : 3E06                		move.w	d6,d7			; Destination
(1)  917/     870 : 0286 0000 3FFF      		andi.l	#$3FFF,d6
(1)  918/     876 : 0046 4000           		ori.w	#$4000,d6
(1)  919/     87A : E04F                		lsr.w	#8,d7
(1)  920/     87C : EC4F                		lsr.w	#6,d7
(1)  921/     87E : 0247 0003           		andi.w	#%11,d7
(1)  922/     882 : 0047 0080           		ori.w	#$80,d7
(1)  923/     886 : 4E75                		rts
(1)  924/     888 :                     
(1)  925/     888 :                     ; --------------------------------------------------------
(1)  926/     888 :                     ; Video_Render
(1)  927/     888 :                     ;
(1)  928/     888 :                     ; Call this during VBlank to update
(1)  929/     888 :                     ; visuals.
(1)  930/     888 :                     ; --------------------------------------------------------
(1)  931/     888 :                     
(1)  932/     888 :                     Video_Render:
(1)  933/     888 : 4DF9 00C0 0004      		lea	(vdp_ctrl),a6
(1)  934/     88E : 3E3C 8100           		move.w	#$8100,d7		; DMA ON
(1)  935/     892 : 1E38 BDF7           		move.b	(RAM_VdpRegs+1).w,d7
(1)  936/     896 : 08C7 0004           		bset	#bitDmaEnbl,d7
(1)  937/     89A : 3C87                		move.w	d7,(a6)
(1)  938/     89C : 6100 06E4           		bsr	System_DmaEnter_RAM
(1)  939/     8A0 : 2CBC 9400 9328      		move.l	#$94009328,(a6)
(1)  940/     8A6 : 2CBC 96D1 95E2      		move.l	#$96009500|(RAM_VerScroll<<7&$FF0000)|(RAM_VerScroll>>1&$FF),(a6)
(1)  941/     8AC : 3CBC 977F           		move.w	#$9700|(RAM_VerScroll>>17&$7F),(a6)
(1)  942/     8B0 : 3CBC 4000           		move.w	#$4000,(a6)
(1)  943/     8B4 : 3F3C 0090           		move.w	#$0010|$80,-(sp)
(1)  944/     8B8 : 3C9F                		move.w	(sp)+,(a6)
(1)  945/     8BA : 2CBC 9401 93E0      		move.l	#$940193E0,(a6)
(1)  946/     8C0 : 2CBC 96D0 9502      		move.l	#$96009500|(RAM_HorScroll<<7&$FF0000)|(RAM_HorScroll>>1&$FF),(a6)
(1)  947/     8C6 : 3CBC 977F           		move.w	#$9700|(RAM_HorScroll>>17&$7F),(a6)
(1)  948/     8CA : 3CBC 7C00           		move.w	#$7C00,(a6)
(1)  949/     8CE : 3F3C 0083           		move.w	#$0003|$80,-(sp)
(1)  950/     8D2 : 3C9F                		move.w	(sp)+,(a6)
(1)  951/     8D4 : 2CBC 9402 9300      		move.l	#$94029300,(a6)
(1)  952/     8DA : 2CBC 96D2 950A      		move.l	#$96009500|(RAM_Sprites<<7&$FF0000)|(RAM_Sprites>>1&$FF),(a6)
(1)  953/     8E0 : 3CBC 977F           		move.w	#$9700|(RAM_Sprites>>17&$7F),(a6)
(1)  954/     8E4 : 3CBC 7800           		move.w	#$7800,(a6)
(1)  955/     8E8 : 3F3C 0083           		move.w	#$0003|$80,-(sp)
(1)  956/     8EC : 3C9F                		move.w	(sp)+,(a6)
(1)  957/     8EE : 2CBC 9400 9340      		move.l	#$94009340,(a6)
(1)  958/     8F4 : 2CBC 96D7 950A      		move.l	#$96009500|(RAM_Palette<<7&$FF0000)|(RAM_Palette>>1&$FF),(a6)
(1)  959/     8FA : 3CBC 977F           		move.w	#$9700|(RAM_Palette>>17&$7F),(a6)
(1)  960/     8FE : 3CBC C000           		move.w	#$C000,(a6)
(1)  961/     902 : 3F3C 0080           		move.w	#$0000|$80,-(sp)
(1)  962/     906 : 3C9F                		move.w	(sp)+,(a6)
(1)  963/     908 : 6100 067C           		bsr	System_DmaExit_RAM
(1)  964/     90C : 3E3C 8100           		move.w	#$8100,d7
(1)  965/     910 : 1E38 BDF7           		move.b	(RAM_VdpRegs+1).w,d7
(1)  966/     914 : 3C87                		move.w	d7,(a6)
(1)  967/     916 : 31FC 0001 BDDA      		move.w	#1,(RAM_SprLinkNum).w	; Reset SPRITE LINK number
(1)  968/     91C :                     
(1)  969/     91C :                     	; Process DMA BLAST from here
(1)  970/     91C :                     
(1)  971/     91C :                     ; --------------------------------------------------------
(1)  972/     91C :                     ; Video_DmaBlast
(1)  973/     91C :                     ;
(1)  974/     91C :                     ; Process DMA tasks from a predefined list in RAM
(1)  975/     91C :                     ;
(1)  976/     91C :                     ; Breaks:
(1)  977/     91C :                     ; d5-d7,a3-a4
(1)  978/     91C :                     ;
(1)  979/     91C :                     ; *** Call this on VBlank ONLY ***
(1)  980/     91C :                     ;
(1)  981/     91C :                     ; NOTE:
(1)  982/     91C :                     ; For 32X this code MUST be located on RAM as it
(1)  983/     91C :                     ; writes the RV from ROM access
(1)  984/     91C :                     ; --------------------------------------------------------
(1)  985/     91C :                     
(1)  986/     91C :                     ; Format:
(1)  987/     91C :                     ; dc.w $94xx,$93xx		; Size
(1)  988/     91C :                     ; dc.w $96xx,$95xx,$97xx	; Source
(1)  989/     91C :                     ; dc.l $4xxx008x 		; VDP output + DMA bit
(1)  990/     91C :                     ; dc.w $xxxx			; SegaCD/CD32X only: graphics word patch
(1)  991/     91C :                     
(1)  992/     91C :                     Video_DmaBlast:
(1)  993/     91C : 4A78 BDE0           		tst.w	(RAM_VdpDmaMod).w		; Got mid-write?
(1)  994/     920 : 664C                		bne.s	.exit				; then can't transfer.
(1)  995/     922 : 4A78 BDDE           		tst.w	(RAM_VdpDmaIndx).w		; Any requests?
(1)  996/     926 : 6746                		beq.s	.exit
(1)  997/     928 : 49F9 00C0 0004      		lea	(vdp_ctrl),a4			; Enter processing loop
(1)  998/     92E : 47F8 B114           		lea	(RAM_VdpDmaList).w,a3
(1)  999/     932 : 3E3C 8100           		move.w	#$8100,d7			; DMA ON
(1) 1000/     936 : 1E38 BDF7           		move.b	(RAM_VdpRegs+1).w,d7
(1) 1001/     93A : 08C7 0004           		bset	#bitDmaEnbl,d7
(1) 1002/     93E : 3887                		move.w	d7,(a4)
(1) 1003/     940 : 6100 0648           		bsr	System_DmaEnter_ROM		; Request Z80 stop and SH2 backup
(1) 1004/     944 : 4A78 BDDE           .next:		tst.w	(RAM_VdpDmaIndx).w
(1) 1005/     948 : 6716                		beq.s	.end
(1) 1029/     94A : 289B                		move.l	(a3)+,(a4)		; Size
(1) 1030/     94C : 289B                		move.l	(a3)+,(a4)		; Source
(1) 1031/     94E : 389B                		move.w	(a3)+,(a4)
(1) 1032/     950 : 389B                		move.w	(a3)+,(a4)		; Destination
(1) 1033/     952 : 389B                		move.w	(a3)+,(a4)		; *** CPU freezes ***
(1) 1034/     954 : D6FC 0002           		adda	#2,a3
(1) 1036/     958 : 0478 0001 BDDE      		subi.w	#1,(RAM_VdpDmaIndx).w
(1) 1037/     95E : 60E4                		bra.s	.next
(1) 1038/     960 :                     .end:
(1) 1039/     960 : 6100 062C           		bsr	System_DmaExit_ROM	; Resume Z80 and SH2 direct
(1) 1040/     964 : 3E3C 8100           		move.w	#$8100,d7		; DMA OFF
(1) 1041/     968 : 1E38 BDF7           		move.b	(RAM_VdpRegs+1).w,d7
(1) 1042/     96C : 3887                		move.w	d7,(a4)
(1) 1043/     96E :                     .exit:
(1) 1044/     96E : 4E75                		rts
(1) 1045/     970 :                     
(1) 1046/     970 :                     ; ====================================================================
(1) 1047/     970 :                     ; ----------------------------------------------------------------
(1) 1048/     970 :                     ; Video routines for 32X
(1) 1049/     970 :                     ; ----------------------------------------------------------------
(1) 1050/     970 :                     
(1) 1051/     970 :                     ; --------------------------------------------------------
(1) 1052/     970 :                     ; Video_MarsGfxMode
(1) 1053/     970 :                     ; Sets graphics mode on the 32X side
(1) 1054/     970 :                     ;
(1) 1055/     970 :                     ; Input:
(1) 1056/     970 :                     ; d0 - Graphics mode number
(1) 1057/     970 :                     ;
(1) 1058/     970 :                     ; Uses:
(1) 1059/     970 :                     ; d7
(1) 1060/     970 :                     ;
(1) 1061/     970 :                     ; Notes:
(1) 1062/     970 :                     ; Changing modes takes 3 FRAMES to process.
(1) 1063/     970 :                     ; --------------------------------------------------------
(1) 1064/     970 :                     
(1) 1065/     970 :                     Video_MarsGfxMode:
(1) 1081/     970 : 4E75                		rts
(1) 1082/     972 :                     
(1) 1083/     972 :                     ; --------------------------------------------------------
(1) 1084/     972 :                     ; Video_Mars_SyncFrame
(1) 1085/     972 :                     ; --------------------------------------------------------
(1) 1086/     972 :                     
(1) 1087/     972 :                     Video_Mars_SyncFrame:
(1) 1093/     972 : 4E75                		rts
(1) 1094/     974 :                     
(1) 1095/     974 :                     ; --------------------------------------------------------
(1) 1096/     974 :                     ; Video_LoadPal_Mars
(1) 1097/     974 :                     ;
(1) 1098/     974 :                     ; Load Indexed palette directly to Buffer
(1) 1099/     974 :                     ;
(1) 1100/     974 :                     ; d0 - Start at
(1) 1101/     974 :                     ; d1 - Number of colors
(1) 1102/     974 :                     ; d2 - Priority bit OFF/ON
(1) 1103/     974 :                     ; --------------------------------------------------------
(1) 1104/     974 :                     
(1) 1105/     974 :                     Video_FadePal_Mars:
(1) 1129/     974 : 4E75                		rts
(1) 1130/     976 :                     
(1) 1131/     976 :                     ; --------------------------------------------------------
(1) 1132/     976 :                     ; Video_MarsPalFade
(1) 1133/     976 :                     ;
(1) 1134/     976 :                     ; Input:
(1) 1135/     976 :                     ; a0 - Palette data
(1) 1136/     976 :                     ; d0 - Number of colors
(1) 1137/     976 :                     ; d1 - Speed
(1) 1138/     976 :                     ;
(1) 1139/     976 :                     ; RAM_ReqFadeMars: (WORD)
(1) 1140/     976 :                     ; $00 - No task (or finished)
(1) 1141/     976 :                     ; $01 - Fade in
(1) 1142/     976 :                     ; $02 - Fade out to black
(1) 1143/     976 :                     ;
(1) 1144/     976 :                     ; CALL THIS OUTSIDE OF VBLANK
(1) 1145/     976 :                     ; --------------------------------------------------------
(1) 1146/     976 :                     
(1) 1147/     976 :                     ; TODO: luego ver que hago con el priority bit
(1) 1148/     976 :                     
(1) 1149/     976 :                     Video_MarsPalFade:
(1) 1308/     976 : 4E75                		rts
(1) 1309/     978 :                     
(1) 1310/     978 :                     
(1) 1311/     978 :                     ; ====================================================================
(1) 1312/     978 :                     ; ----------------------------------------------------------------
(1) 1313/     978 :                     ; Common screen routines
(1) 1314/     978 :                     ; ----------------------------------------------------------------
(1) 1315/     978 :                     
(1) 1316/     978 :                     ; --------------------------------------------------------
(1) 1317/     978 :                     ; Video_LoadMap
(1) 1318/     978 :                     ;
(1) 1319/     978 :                     ; Loads map data, in Horizontal order
(1) 1320/     978 :                     ; Can autodetect layer width, height and
(1) 1321/     978 :                     ; double interlace mode
(1) 1322/     978 :                     ;
(1) 1323/     978 :                     ; Input:
(1) 1324/     978 :                     ; a0   - Map data
(1) 1325/     978 :                     ; d0.l - locate(lyr,x,y) / 00|Layer|X|Y
(1) 1326/     978 :                     ; d1.l - mapsize(x,y) / Width|Height (in cells)
(1) 1327/     978 :                     ; d2.l - VRAM cell increment
(1) 1328/     978 :                     ;
(1) 1329/     978 :                     ; Breaks:
(1) 1330/     978 :                     ; d4-d7/a6
(1) 1331/     978 :                     ; --------------------------------------------------------
(1) 1332/     978 :                     
(1) 1333/     978 :                     Video_LoadMap:
(1) 1334/     978 : 4DF9 00C0 0000      		lea	(vdp_data),a6
(1) 1335/     97E : 6100 01B6           		bsr	vid_PickLayer
(1) 1336/     982 : 3801                		move.w	d1,d4			; Start here
(1) 1337/     984 :                     .yloop:
(1) 1338/     984 : 4844                		swap	d4
(1) 1339/     986 : 2D45 0004           		move.l	d5,4(a6)
(1) 1340/     98A : 2E01                		move.l	d1,d7
(1) 1341/     98C : 4847                		swap	d7
(1) 1342/     98E :                     .xloop:
(1) 1343/     98E : 3818                		move.w	(a0)+,d4
(1) 1344/     990 : 0C44 FFFF           		cmpi.w	#-1,d4			; -1 ? TODO
(1) 1345/     994 : 6606                		bne.s	.nonull
(1) 1346/     996 : 383C 07FF           		move.w	#varNullVram,d4		; Replace with custom blank tile
(1) 1347/     99A : 6002                		bra.s	.cont
(1) 1348/     99C :                     .nonull:
(1) 1349/     99C : D842                		add.w	d2,d4
(1) 1350/     99E :                     .cont:
(1) 1351/     99E :                     	; Check for double interlace
(1) 1352/     99E : 4847                		swap	d7
(1) 1353/     9A0 : 1E38 BE02           		move.b	(RAM_VdpRegs+$C).w,d7
(1) 1354/     9A4 : 0247 0006           		andi.w	#%110,d7
(1) 1355/     9A8 : 0C47 0006           		cmpi.w	#%110,d7
(1) 1356/     9AC : 660E                		bne.s	.nodble
(1) 1357/     9AE : 3E04                		move.w	d4,d7
(1) 1358/     9B0 : E24F                		lsr.w	#1,d7
(1) 1359/     9B2 : 0247 07FF           		andi.w	#$7FF,d7
(1) 1360/     9B6 : 0244 F800           		andi.w	#$F800,d4
(1) 1361/     9BA : 8847                		or.w	d7,d4
(1) 1362/     9BC :                     .nodble:
(1) 1363/     9BC : 4847                		swap	d7
(1) 1364/     9BE : 3C84                		move.w	d4,(a6)
(1) 1365/     9C0 : 51CF FFCC           		dbf	d7,.xloop
(1) 1366/     9C4 : DA86                		add.l	d6,d5
(1) 1367/     9C6 : 4844                		swap	d4
(1) 1368/     9C8 : 51CC FFBA           		dbf	d4,.yloop
(1) 1369/     9CC : 4E75                		rts
(1) 1370/     9CE :                     
(1) 1371/     9CE :                     ; ; --------------------------------------------------------
(1) 1372/     9CE :                     ; ; Video_LoadMap_Vert
(1) 1373/     9CE :                     ; ;
(1) 1374/     9CE :                     ; ; Load map data, Vertical order
(1) 1375/     9CE :                     ; ;
(1) 1376/     9CE :                     ; ; a0 - Map data
(1) 1377/     9CE :                     ; ; d0 | LONG - 00|Lyr|X|Y,  locate(lyr,x,y)
(1) 1378/     9CE :                     ; ; d1 | LONG - Width|Height (cells),  mapsize(x,y)
(1) 1379/     9CE :                     ; ; d2 | WORD - VRAM
(1) 1380/     9CE :                     ;
(1) 1381/     9CE :                     ; ; Breaks:
(1) 1382/     9CE :                     ; ; a4-a5,d4-d7
(1) 1383/     9CE :                     ; ; --------------------------------------------------------
(1) 1384/     9CE :                     ;
(1) 1385/     9CE :                     ; Video_LoadMap_Vert:
(1) 1386/     9CE :                     ; 		lea	(vdp_data),a4
(1) 1387/     9CE :                     ; 		bsr	vid_PickLayer
(1) 1388/     9CE :                     ; 		move.l	d1,d5		; Start here
(1) 1389/     9CE :                     ; 		swap	d5
(1) 1390/     9CE :                     ; .xloop:
(1) 1391/     9CE :                     ; 		swap	d5
(1) 1392/     9CE :                     ; 		move.l	d4,-(sp)
(1) 1393/     9CE :                     ; 		move.w	d1,d7
(1) 1394/     9CE :                     ; 		btst	#2,(RAM_VdpRegs+$C).w
(1) 1395/     9CE :                     ; 		beq.s	.yloop
(1) 1396/     9CE :                     ; 		lsr.w	#1,d7
(1) 1397/     9CE :                     ; .yloop:
(1) 1398/     9CE :                     ; 		move.l	d4,4(a4)
(1) 1399/     9CE :                     ; 		move.w	(a0),d5
(1) 1400/     9CE :                     ; 		cmpi.w	#-1,d5
(1) 1401/     9CE :                     ; 		bne.s	.nonull
(1) 1402/     9CE :                     ; 		move.w	#varNullVram,d5
(1) 1403/     9CE :                     ; 		bra.s	.cont
(1) 1404/     9CE :                     ; .nonull:
(1) 1405/     9CE :                     ; 		add.w	d2,d5
(1) 1406/     9CE :                     ; .cont:
(1) 1407/     9CE :                     ; 		swap	d7
(1) 1408/     9CE :                     ; 		adda	#2,a0
(1) 1409/     9CE :                     ; 		btst	#2,(RAM_VdpRegs+$C).w
(1) 1410/     9CE :                     ; 		beq.s	.nodble
(1) 1411/     9CE :                     ; 		adda	#2,a0
(1) 1412/     9CE :                     ; 		move.w	d5,d7
(1) 1413/     9CE :                     ; 		lsr.w	#1,d7
(1) 1414/     9CE :                     ; 		andi.w	#$7FF,d7
(1) 1415/     9CE :                     ; 		andi.w	#$F800,d5
(1) 1416/     9CE :                     ; 		or.w	d7,d5
(1) 1417/     9CE :                     ; .nodble:
(1) 1418/     9CE :                     ; 		swap	d7
(1) 1419/     9CE :                     ; 		move.w	d5,(a4)
(1) 1420/     9CE :                     ; 		add.l	d6,d4
(1) 1421/     9CE :                     ; 		dbf	d7,.yloop
(1) 1422/     9CE :                     ; .outdbl:
(1) 1423/     9CE :                     ; 		move.l	(sp)+,d4
(1) 1424/     9CE :                     ; 		add.l	#$20000,d4
(1) 1425/     9CE :                     ; 		swap	d5
(1) 1426/     9CE :                     ; 		dbf	d5,.xloop
(1) 1427/     9CE :                     ; 		rts
(1) 1428/     9CE :                     
(1) 1429/     9CE :                     ; ====================================================================
(1) 1430/     9CE :                     ; ----------------------------------------------------------------
(1) 1431/     9CE :                     ; Text PRINT system, for debugging or quick texts.
(1) 1432/     9CE :                     ; ----------------------------------------------------------------
(1) 1433/     9CE :                     
(1) 1434/     9CE :                     ; --------------------------------------------------------
(1) 1435/     9CE :                     ; Video_PrintInit
(1) 1436/     9CE :                     ;
(1) 1437/     9CE :                     ; Initializes the default Graphics and Palette
(1) 1438/     9CE :                     ; for the font.
(1) 1439/     9CE :                     ;
(1) 1440/     9CE :                     ; Input:
(1) 1441/     9CE :                     ; a0 | ASCII Graphics location
(1) 1442/     9CE :                     ; a1 | ASCII Palette
(1) 1443/     9CE :                     ;
(1) 1444/     9CE :                     ; Breaks:
(1) 1445/     9CE :                     ; ALL
(1) 1446/     9CE :                     ;
(1) 1447/     9CE :                     ; Notes:
(1) 1448/     9CE :                     ; * Requires ASCII font graphics starting from $20
(1) 1449/     9CE :                     ; (" ") to $7F ("[DEL]")
(1) 1450/     9CE :                     ; * CALL THIS ONLY IF DISPLAY IS OFF OR DURING VBLANK
(1) 1451/     9CE :                     ; * 32X: MAKE SURE SH2 IS NOT READING ROM DATA
(1) 1452/     9CE :                     ; --------------------------------------------------------
(1) 1453/     9CE :                     
(1) 1454/     9CE :                     Video_PrintInit:
(1) 1455/     9CE :                     ; 		lea	(ASCII_FONT).l,a0
(1) 1456/     9CE :                     ; 		lea	(ASCII_PAL).l,a1
(1) 1457/     9CE : 2008                		move.l	a0,d0
(1) 1458/     9D0 : 323C B000           		move.w	#cell_vram(varPrintVram),d1
(1) 1459/     9D4 : 343C 0C00           		move.w	#($60*$20),d2			; From " " to "[DEL]"
(1) 1460/     9D8 : 363C 6580           		move.w	#(varPrintPal<<13)|varPrintVram,d3
(1) 1461/     9DC : 0443 0020           		subi.w	#$20,d3
(1) 1462/     9E0 : 31C3 BDE2           		move.w	d3,(RAM_VidPrntVram).w
(1) 1463/     9E4 : 6100 FDEE           		bsr	Video_LoadArt
(1) 1464/     9E8 :                     Video_PrintPal:
(1) 1465/     9E8 : 2049                		movea.l	a1,a0
(1) 1466/     9EA : 7030                		moveq	#(varPrintPal<<4),d0
(1) 1467/     9EC : 323C 000F           		move.w	#$0F,d1
(1) 1468/     9F0 : 6100 FAD0           		bsr	Video_LoadPal	; Write to both palette buffers
(1) 1469/     9F4 : 6000 FAC2           		bra	Video_FadePal
(1) 1470/     9F8 :                     
(1) 1471/     9F8 :                     ; --------------------------------------------------------
(1) 1472/     9F8 :                     ; Video_Print
(1) 1473/     9F8 :                     ;
(1) 1474/     9F8 :                     ; Prints string to layer
(1) 1475/     9F8 :                     ;
(1) 1476/     9F8 :                     ; Input:
(1) 1477/     9F8 :                     ; a0   - String data w/special characters +
(1) 1478/     9F8 :                     ;        list of RAM locations to read
(1) 1479/     9F8 :                     ; d0.l - Print location on-screen: locate(layer,x,y)
(1) 1480/     9F8 :                     ;        ( 00|Lyr|X|Y )
(1) 1481/     9F8 :                     ;
(1) 1482/     9F8 :                     ; Breaks:
(1) 1483/     9F8 :                     ; d4-d7,a4-a6
(1) 1484/     9F8 :                     ;
(1) 1485/     9F8 :                     ; Notes:
(1) 1486/     9F8 :                     ; CALL Video_PrintInit FIRST
(1) 1487/     9F8 :                     ;
(1) 1488/     9F8 :                     ; Text string special codes:
(1) 1489/     9F8 :                     ; $00 - End of line
(1) 1490/     9F8 :                     ; $0A - Next line
(1) 1491/     9F8 :                     ; "//b" - Show BYTE value
(1) 1492/     9F8 :                     ; "//w" - Show WORD value
(1) 1493/     9F8 :                     ; "//l" - Show LONG value
(1) 1494/     9F8 :                     ;
(1) 1495/     9F8 :                     ; If using //b //w //l:
(1) 1496/     9F8 :                     ; After $00, put your RAM addresses in LONGS in the
(1) 1497/     9F8 :                     ; same order you placed your value tags, don't forget to
(1) 1498/     9F8 :                     ; put "align 2" at the end of the string or it will
(1) 1499/     9F8 :                     ; trigger and ADDRESS ERROR
(1) 1500/     9F8 :                     ; --------------------------------------------------------
(1) 1501/     9F8 :                     
(1) 1502/     9F8 :                     ; TODO: negative values might break
(1) 1503/     9F8 :                     
(1) 1504/     9F8 :                     Video_Print:
(1) 1505/     9F8 : 48E7 0F0E           		movem.l	d4-d7/a4-a6,-(sp)
(1) 1506/     9FC : 4DF9 00C0 0000      		lea	(vdp_data).l,a6
(1) 1507/     A02 : 6100 0132           		bsr	vid_PickLayer
(1) 1508/     A06 : 4BF8 BC54           		lea	(RAM_VidPrntList).w,a5
(1) 1509/     A0A :                     .newjump:
(1) 1510/     A0A : 2D45 0004           		move.l	d5,4(a6)
(1) 1511/     A0E : 2805                		move.l	d5,d4
(1) 1512/     A10 :                     .loop:
(1) 1513/     A10 : 1E18                		move.b	(a0)+,d7
(1) 1514/     A12 : 0247 00FF           		andi.w	#$FF,d7
(1) 1515/     A16 : 676C                		beq	.exit
(1) 1516/     A18 : 0C07 000A           		cmpi.b	#$0A,d7			; $0A - next line?
(1) 1517/     A1C : 672C                		beq.s	.next
(1) 1518/     A1E : 0C07 005C           		cmpi.b	#$5C,d7			; $5C ("\") special?
(1) 1519/     A22 : 6618                		bne.s	.puttext
(1) 1520/     A24 : 1E18                		move.b	(a0)+,d7		; Read next chr
(1) 1521/     A26 : 0C07 0062           		cmpi.b	#"b",d7
(1) 1522/     A2A : 6722                		beq.s	.isbyte
(1) 1523/     A2C : 0C07 0077           		cmpi.b	#"w",d7
(1) 1524/     A30 : 672E                		beq.s	.isword
(1) 1525/     A32 : 0C07 006C           		cmpi.b	#"l",d7
(1) 1526/     A36 : 673A                		beq.s	.islong
(1) 1527/     A38 : 3E3C 005C           		move.w	#"\\",d7		; normal "\"
(1) 1528/     A3C :                     .puttext:
(1) 1529/     A3C : DE78 BDE2           		add.w	(RAM_VidPrntVram).w,d7	; VRAM pos increment
(1) 1530/     A40 : 3C87                		move.w	d7,(a6)
(1) 1531/     A42 : 0684 0002 0000      		addi.l	#$20000,d4
(1) 1532/     A48 : 60C6                		bra.s	.loop
(1) 1533/     A4A :                     .next:
(1) 1534/     A4A : DA86                		add.l	d6,d5			; Next line
(1) 1535/     A4C : 60BC                		bra.s	.newjump
(1) 1536/     A4E :                     
(1) 1537/     A4E :                     	; Set print values
(1) 1538/     A4E :                     .isbyte:
(1) 1539/     A4E : 2AC4                		move.l	d4,(a5)+
(1) 1540/     A50 : 3AFC 0001           		move.w	#1,(a5)+
(1) 1541/     A54 : 0684 0004 0000      		addi.l	#$40000,d4
(1) 1542/     A5A : 2D44 0004           		move.l	d4,4(a6)
(1) 1543/     A5E : 60B0                		bra	.loop
(1) 1544/     A60 :                     .isword:
(1) 1545/     A60 : 2AC4                		move.l	d4,(a5)+
(1) 1546/     A62 : 3AFC 0002           		move.w	#2,(a5)+
(1) 1547/     A66 : 0684 0008 0000      		addi.l	#$80000,d4
(1) 1548/     A6C : 2D44 0004           		move.l	d4,4(a6)
(1) 1549/     A70 : 609E                		bra	.loop
(1) 1550/     A72 :                     .islong:
(1) 1551/     A72 : 2AC4                		move.l	d4,(a5)+
(1) 1552/     A74 : 3AFC 0003           		move.w	#3,(a5)+
(1) 1553/     A78 : 0684 0010 0000      		addi.l	#$100000,d4
(1) 1554/     A7E : 2D44 0004           		move.l	d4,4(a6)
(1) 1555/     A82 : 608C                		bra	.loop
(1) 1556/     A84 :                     .exit:
(1) 1557/     A84 :                     
(1) 1558/     A84 :                     	; ----------------------------------------
(1) 1559/     A84 :                     	; Print values
(1) 1560/     A84 :                     	;
(1) 1561/     A84 :                     	; vvvv vvvv tttt
(1) 1562/     A84 :                     	; v - vdp pos
(1) 1563/     A84 :                     	; t - value type
(1) 1564/     A84 :                     	; ----------------------------------------
(1) 1565/     A84 :                     
(1) 1566/     A84 :                     	; reading byte by byte because longs doesn't get
(1) 1567/     A84 :                     	; aligned after $00...
(1) 1568/     A84 :                     
(1) 1569/     A84 : 7800                		moveq	#0,d4
(1) 1570/     A86 : 7A00                		moveq	#0,d5
(1) 1571/     A88 : 7C00                		moveq	#0,d6
(1) 1572/     A8A : 4BF8 BC54           		lea	(RAM_VidPrntList).w,a5
(1) 1573/     A8E :                     .nextv:
(1) 1574/     A8E : 4A95                		tst.l	(a5)
(1) 1575/     A90 : 6700 009E           		beq	.nothing
(1) 1576/     A94 :                     
(1) 1577/     A94 :                     	; grab value
(1) 1578/     A94 : 7800                		moveq	#0,d4
(1) 1579/     A96 : 1818                		move.b	(a0)+,d4
(1) 1580/     A98 : E19C                		rol.l	#8,d4
(1) 1581/     A9A : 1818                		move.b	(a0)+,d4
(1) 1582/     A9C : E19C                		rol.l	#8,d4
(1) 1583/     A9E : 1818                		move.b	(a0)+,d4
(1) 1584/     AA0 : E19C                		rol.l	#8,d4
(1) 1585/     AA2 : 1818                		move.b	(a0)+,d4
(1) 1586/     AA4 : 2844                		movea.l	d4,a4
(1) 1587/     AA6 : 7800                		moveq	#0,d4
(1) 1588/     AA8 :                     
(1) 1589/     AA8 :                     	; get value
(1) 1590/     AA8 : 3C2D 0004           		move.w	4(a5),d6
(1) 1591/     AAC : 0C46 0001           		cmpi.w	#1,d6		; byte?
(1) 1592/     AB0 : 660E                		bne.s	.vbyte
(1) 1593/     AB2 : 1814                		move.b	(a4),d4
(1) 1594/     AB4 : 2D55 0004           		move.l	(a5),4(a6)
(1) 1595/     AB8 : E91C                		rol.b	#4,d4
(1) 1596/     ABA : 6158                		bsr.s	.donibl
(1) 1597/     ABC : E91C                		rol.b	#4,d4
(1) 1598/     ABE : 6154                		bsr.s	.donibl
(1) 1599/     AC0 :                     .vbyte:
(1) 1600/     AC0 : 0C46 0002           		cmpi.w	#2,d6		; word?
(1) 1601/     AC4 : 661C                		bne.s	.vword
(1) 1602/     AC6 : 1814                		move.b	(a4),d4
(1) 1603/     AC8 : E15C                		rol.w	#8,d4
(1) 1604/     ACA : 182C 0001           		move.b	1(a4),d4
(1) 1605/     ACE : 2D55 0004           		move.l	(a5),4(a6)
(1) 1606/     AD2 : E95C                		rol.w	#4,d4
(1) 1607/     AD4 : 613E                		bsr.s	.donibl
(1) 1608/     AD6 : E95C                		rol.w	#4,d4
(1) 1609/     AD8 : 613A                		bsr.s	.donibl
(1) 1610/     ADA : E95C                		rol.w	#4,d4
(1) 1611/     ADC : 6136                		bsr.s	.donibl
(1) 1612/     ADE : E95C                		rol.w	#4,d4
(1) 1613/     AE0 : 6132                		bsr.s	.donibl
(1) 1614/     AE2 :                     .vword:
(1) 1615/     AE2 : 0C46 0003           		cmpi.w	#3,d6		; long?
(1) 1616/     AE6 : 6624                		bne.s	.vlong
(1) 1617/     AE8 : 1814                		move.b	(a4),d4
(1) 1618/     AEA : E19C                		rol.l	#8,d4
(1) 1619/     AEC : 182C 0001           		move.b	1(a4),d4
(1) 1620/     AF0 : E19C                		rol.l	#8,d4
(1) 1621/     AF2 : 182C 0002           		move.b	2(a4),d4
(1) 1622/     AF6 : E19C                		rol.l	#8,d4
(1) 1623/     AF8 : 182C 0003           		move.b	3(a4),d4
(1) 1624/     AFC : 2D55 0004           		move.l	(a5),4(a6)
(1) 1625/     B00 : 3C3C 0007           		move.w	#7,d6
(1) 1626/     B04 : E99C                .lngloop:	rol.l	#4,d4
(1) 1627/     B06 : 610C                		bsr.s	.donibl
(1) 1628/     B08 : 51CE FFFA           		dbf	d6,.lngloop
(1) 1629/     B0C :                     .vlong:
(1) 1630/     B0C : 429D                		clr.l	(a5)+
(1) 1631/     B0E : 425D                		clr.w	(a5)+
(1) 1632/     B10 : 6000 FF7C           		bra	.nextv
(1) 1633/     B14 :                     
(1) 1634/     B14 :                     ; make nibble byte
(1) 1635/     B14 :                     .donibl:
(1) 1636/     B14 : 3A04                		move.w	d4,d5
(1) 1637/     B16 : 0245 000F           		andi.w	#%1111,d5
(1) 1638/     B1A : 0C05 000A           		cmpi.b	#$A,d5
(1) 1639/     B1E : 6D04                		blt.s	.lowr
(1) 1640/     B20 : DA3C 0007           		add.b	#7,d5
(1) 1641/     B24 :                     .lowr:
(1) 1642/     B24 : DA7C 0030           		add.w	#"0",d5
(1) 1643/     B28 : DA78 BDE2           		add.w	(RAM_VidPrntVram).w,d5
(1) 1644/     B2C : 3C85                		move.w	d5,(a6)
(1) 1645/     B2E : 4E75                		rts
(1) 1646/     B30 :                     ; exit
(1) 1647/     B30 :                     .nothing:
(1) 1648/     B30 : 4CDF 70F0           		movem.l	(sp)+,d4-d7/a4-a6
(1) 1649/     B34 : 4E75                		rts
(1) 1650/     B36 :                     
(1) 1651/     B36 :                     ; ------------------------------------------------
(1) 1652/     B36 :                     ; Shared: pick layer / x pos / y pos and set size
(1) 1653/     B36 :                     ;
(1) 1654/     B36 :                     ; Input:
(1) 1655/     B36 :                     ; d0.l - locate(layer,x,y)
(1) 1656/     B36 :                     ;
(1) 1657/     B36 :                     ; Returns:
(1) 1658/     B36 :                     ; d5 - VRAM position
(1) 1659/     B36 :                     ; d6 - Width
(1) 1660/     B36 :                     ; ------------------------------------------------
(1) 1661/     B36 :                     
(1) 1662/     B36 :                     vid_PickLayer:
(1) 1663/     B36 : 2C00                		move.l	d0,d6			; d6 - pick layer
(1) 1664/     B38 : 4846                		swap	d6
(1) 1665/     B3A : 0806 0000           		btst	#0,d6
(1) 1666/     B3E : 671C                		beq.s	.plawnd
(1) 1667/     B40 : 1A38 BDFA           		move.b	(RAM_VdpRegs+4).w,d5	; BG
(1) 1668/     B44 : 3805                		move.w	d5,d4
(1) 1669/     B46 : E24C                		lsr.w	#1,d4
(1) 1670/     B48 : 0244 0003           		andi.w	#%11,d4
(1) 1671/     B4C : 4845                		swap	d5
(1) 1672/     B4E : 3A04                		move.w	d4,d5
(1) 1673/     B50 : 4845                		swap	d5
(1) 1674/     B52 : 0245 0001           		andi.w	#1,d5
(1) 1675/     B56 : E14D                		lsl.w	#8,d5
(1) 1676/     B58 : EB4D                		lsl.w	#5,d5
(1) 1677/     B5A : 6024                		bra.s	.golyr
(1) 1678/     B5C :                     .plawnd:
(1) 1679/     B5C : 1A38 BDF8           		move.b	(RAM_VdpRegs+2).w,d5	; FG
(1) 1680/     B60 : 0806 0001           		btst	#1,d6
(1) 1681/     B64 : 6704                		beq.s	.nowd
(1) 1682/     B66 : 1A38 BDF9           		move.b	(RAM_VdpRegs+3).w,d5	; WINDOW
(1) 1683/     B6A :                     .nowd:
(1) 1684/     B6A : 3805                		move.w	d5,d4
(1) 1685/     B6C : E84C                		lsr.w	#4,d4
(1) 1686/     B6E : 0244 0003           		andi.w	#%11,d4
(1) 1687/     B72 : 4845                		swap	d5
(1) 1688/     B74 : 3A04                		move.w	d4,d5
(1) 1689/     B76 : 4845                		swap	d5
(1) 1690/     B78 : 0245 000E           		andi.w	#%00001110,d5
(1) 1691/     B7C : E14D                		lsl.w	#8,d5
(1) 1692/     B7E : E54D                		lsl.w	#2,d5
(1) 1693/     B80 :                     .golyr:
(1) 1694/     B80 : 0045 4000           		ori.w	#$4000,d5
(1) 1695/     B84 : 3800                		move.w	d0,d4			; Y start pos
(1) 1696/     B86 : 0244 00FF           		andi.w	#$FF,d4			; Y only
(1) 1697/     B8A : ED4C                		lsl.w	#6,d4
(1) 1698/     B8C : 1C38 BE06           		move.b	(RAM_VdpRegs+$10).w,d6
(1) 1699/     B90 : 0246 0003           		andi.w	#%11,d6
(1) 1700/     B94 : 670A                		beq.s	.thissz
(1) 1701/     B96 : D844                		add.w	d4,d4			; H64
(1) 1702/     B98 : 0246 0002           		andi.w	#%10,d6
(1) 1703/     B9C : 6702                		beq.s	.thissz
(1) 1704/     B9E : D844                		add.w	d4,d4			; H128
(1) 1705/     BA0 :                     .thissz:
(1) 1706/     BA0 : DA44                		add.w	d4,d5
(1) 1707/     BA2 : 3800                		move.w	d0,d4
(1) 1708/     BA4 : 0244 FF00           		andi.w	#$FF00,d4		; X only
(1) 1709/     BA8 : EE4C                		lsr.w	#7,d4
(1) 1710/     BAA : DA44                		add.w	d4,d5			; X add
(1) 1711/     BAC : 4845                		swap	d5
(1) 1712/     BAE : 7C00                		moveq	#0,d6
(1) 1713/     BB0 : 3C3C 0040           		move.w	#$40,d6			; Set jump size
(1) 1714/     BB4 : 1838 BE06           		move.b	(RAM_VdpRegs+$10).w,d4
(1) 1715/     BB8 : 0244 0003           		andi.w	#%11,d4
(1) 1716/     BBC : 670A                		beq.s	.thisszj
(1) 1717/     BBE : DC46                		add.w	d6,d6			; H64
(1) 1718/     BC0 : 0244 0002           		andi.w	#%10,d4
(1) 1719/     BC4 : 6702                		beq.s	.thisszj
(1) 1720/     BC6 : DC46                		add.w	d6,d6			; H128
(1) 1721/     BC8 :                     .thisszj:
(1) 1722/     BC8 : 4846                		swap	d6
(1) 1723/     BCA : 4E75                		rts
(1) 1724/     BCC :                     
(1) 1725/     BCC :                     ; ====================================================================
(1) 1726/     BCC :                     ; ----------------------------------------------------------------
(1) 1727/     BCC :                     ; Objects system
(1) 1728/     BCC :                     ; ----------------------------------------------------------------
(1) 1729/     BCC :                     
(1) 1730/     BCC :                     ; --------------------------------------------------------
(1) 1731/     BCC :                     ; Init objects system
(1) 1732/     BCC :                     ; --------------------------------------------------------
(1) 1733/     BCC :                     
(1) 1734/     BCC :                     Objects_Clear:
(1) 1735/     BCC : 4DF8 B294           		lea	(RAM_Objects).w,a6
(1) 1736/     BD0 : 3E3C 098F           		move.w	#(sizeof_mdobj*MAX_MDOBJ)-1,d7
(1) 1737/     BD4 :                     .clr:
(1) 1738/     BD4 : 421E                		clr.b	(a6)+
(1) 1739/     BD6 : 51CF FFFC           		dbf	d7,.clr
(1) 1740/     BDA : 4DF8 BC24           		lea	(RAM_ObjDispList).w,a6
(1) 1741/     BDE : 3E3C 0017           		move.w	#MAX_MDOBJ-1,d7
(1) 1742/     BE2 :                     .clr_d:
(1) 1743/     BE2 : 425E                		clr.w	(a6)+
(1) 1744/     BE4 : 51CF FFFC           		dbf	d7,.clr_d
(1) 1745/     BE8 : 31FC 0001 BDDA      		move.w	#1,(RAM_SprLinkNum).w
(1) 1746/     BEE : 4278 BDD8           		clr.w	(RAM_SprDrwCntr).w
(1) 1747/     BF2 : 4E75                		rts
(1) 1748/     BF4 :                     
(1) 1749/     BF4 :                     ; --------------------------------------------------------
(1) 1750/     BF4 :                     ; Process objects
(1) 1751/     BF4 :                     ; --------------------------------------------------------
(1) 1752/     BF4 :                     
(1) 1753/     BF4 :                     Objects_Run:
(1) 1754/     BF4 : 4DF8 B294           		lea	(RAM_Objects).w,a6
(1) 1755/     BF8 : 3E3C 0017           		move.w	#MAX_MDOBJ-1,d7
(1) 1756/     BFC :                     .next_one:
(1) 1757/     BFC : 2C16                		move.l	obj_code(a6),d6
(1) 1758/     BFE : 6708                		beq.s	.no_code	; Free slot
(1) 1759/     C00 : 2F07                		move.l	d7,-(sp)
(1) 1760/     C02 : 2A46                		move.l	d6,a5
(1) 1761/     C04 : 4E95                		jsr	(a5)
(1) 1762/     C06 : 2E1F                		move.l	(sp)+,d7
(1) 1763/     C08 :                     .no_code:
(1) 1764/     C08 : DCFC 0066           		adda	#sizeof_mdobj,a6
(1) 1765/     C0C : 51CF FFEE           		dbf	d7,.next_one
(1) 1766/     C10 : 4E75                		rts
(1) 1767/     C12 :                     
(1) 1768/     C12 :                     ; --------------------------------------------------------
(1) 1769/     C12 :                     ; Objects_Set
(1) 1770/     C12 :                     ;
(1) 1771/     C12 :                     ; Input:
(1) 1772/     C12 :                     ; d0 - Object code location (0 - delete)
(1) 1773/     C12 :                     ; d1 - Object slot
(1) 1774/     C12 :                     ;
(1) 1775/     C12 :                     ; Uses:
(1) 1776/     C12 :                     ; d7,a5-a6
(1) 1777/     C12 :                     ; --------------------------------------------------------
(1) 1778/     C12 :                     
(1) 1779/     C12 :                     Objects_Set:
(1) 1780/     C12 : 4DF8 B294           		lea	(RAM_Objects).w,a6
(1) 1781/     C16 : 2A4E                		move.l	a6,a5
(1) 1782/     C18 : 3E3C 0065           		move.w	#sizeof_mdobj-1,d7
(1) 1783/     C1C :                     .clr:
(1) 1784/     C1C : 421D                		clr.b	(a5)+
(1) 1785/     C1E : 51CF FFFC           		dbf	d7,.clr
(1) 1786/     C22 : 3E01                		move.w	d1,d7
(1) 1787/     C24 : CEFC 0066           		mulu.w	#sizeof_mdobj,d7
(1) 1788/     C28 : DCC7                		adda	d7,a6
(1) 1789/     C2A : 2C80                		move.l	d0,obj_code(a6)
(1) 1790/     C2C : 4DF8 BC24           		lea	(RAM_ObjDispList).w,a6
(1) 1791/     C30 : 3E01                		move.w	d1,d7
(1) 1792/     C32 : DE47                		add.w	d7,d7
(1) 1793/     C34 : 3DBC 0000 7000      		move.w	#0,(a6,d7.w)
(1) 1794/     C3A : 4E75                		rts
(1) 1795/     C3C :                     
(1) 1796/     C3C :                     ; --------------------------------------------------------
(1) 1797/     C3C :                     ; Objects_Add
(1) 1798/     C3C :                     ;
(1) 1799/     C3C :                     ; Returns:
(1) 1800/     C3C :                     ; d0 - -1 if ran out of Objects
(1) 1801/     C3C :                     ; --------------------------------------------------------
(1) 1802/     C3C :                     
(1) 1803/     C3C :                     Objects_Add:
(1) 1804/     C3C : 4DF8 B294           		lea	(RAM_Objects).w,a6
(1) 1805/     C40 : 3E3C 0017           		move.w	#MAX_MDOBJ-1,d7
(1) 1806/     C44 :                     .search:
(1) 1807/     C44 : 2E16                		move.l	obj_code(a6),d7
(1) 1808/     C46 : 670C                		beq.s	.use_it
(1) 1809/     C48 : DCFC 0066           		adda	#sizeof_mdobj,a6
(1) 1810/     C4C : 51CF FFF6           		dbf	d7,.search
(1) 1811/     C50 : 70FF                		moveq	#-1,d0		; Return ran-out flag
(1) 1812/     C52 : 4E75                		rts
(1) 1813/     C54 :                     .use_it:
(1) 1814/     C54 : 2A4E                		move.l	a6,a5
(1) 1815/     C56 : 3E3C 0065           		move.w	#sizeof_mdobj-1,d7
(1) 1816/     C5A :                     .clr:
(1) 1817/     C5A : 421D                		clr.b	(a5)+
(1) 1818/     C5C : 51CF FFFC           		dbf	d7,.clr
(1) 1819/     C60 : 2C80                		move.l	d0,obj_code(a6)
(1) 1820/     C62 : 4DF8 BC24           		lea	(RAM_ObjDispList).w,a6
(1) 1821/     C66 : 3E01                		move.w	d1,d7
(1) 1822/     C68 : DE47                		add.w	d7,d7
(1) 1823/     C6A : 3DBC 0000 7000      		move.w	#0,(a6,d7.w)
(1) 1824/     C70 : 4E75                		rts
(1) 1825/     C72 :                     
(1) 1826/     C72 :                     ; --------------------------------------------------------
(1) 1827/     C72 :                     ; Draw ALL Objects from display list
(1) 1828/     C72 :                     ;
(1) 1829/     C72 :                     ; Call this BEFORE VBlank.
(1) 1830/     C72 :                     ; --------------------------------------------------------
(1) 1831/     C72 :                     
(1) 1832/     C72 :                     Objects_Show:
(1) 1833/     C72 : 3C38 BDDA           		move.w	(RAM_SprLinkNum).w,d6		; d6 - Starting sprite link
(1) 1834/     C76 : 4DF8 A414           		lea	(RAM_Sprites),a6		; a6 - Genesis sprites
(1) 1835/     C7A : 3E06                		move.w	d6,d7
(1) 1836/     C7C : 5347                		subq.w	#1,d7
(1) 1837/     C7E : E74F                		lsl.w	#3,d7
(1) 1838/     C80 : DCC7                		adda	d7,a6
(1) 1839/     C82 :                     
(1) 1840/     C82 : 3E38 BDD8           		move.w	(RAM_SprDrwCntr),d7
(1) 1841/     C86 : 6732                		beq.s	.no_sprdrw
(1) 1842/     C88 : 4278 BDD8           		clr.w	(RAM_SprDrwCntr).w
(1) 1843/     C8C : 4BF8 A914           		lea	(RAM_SprDrwPz),a5
(1) 1844/     C90 : 9E7C 0001           		sub.w	#1,d7
(1) 1845/     C94 :                     .nexts:
(1) 1846/     C94 : BC7C 0050           		cmp.w	#80,d6
(1) 1847/     C98 : 6C20                		bge.s	.no_sprdrw
(1) 1848/     C9A : 301D                		move.w	(a5)+,d0
(1) 1849/     C9C : 321D                		move.w	(a5)+,d1	; custom
(1) 1850/     C9E : C27C 00FF           		and.w	#$FF,d1
(1) 1851/     CA2 : E149                		lsl.w	#8,d1
(1) 1852/     CA4 : 8246                		or.w	d6,d1
(1) 1853/     CA6 : 341D                		move.w	(a5)+,d2
(1) 1854/     CA8 : 361D                		move.w	(a5)+,d3
(1) 1855/     CAA : 3CC0                		move.w	d0,(a6)+
(1) 1856/     CAC : 3CC1                		move.w	d1,(a6)+
(1) 1857/     CAE : 3CC2                		move.w	d2,(a6)+
(1) 1858/     CB0 : 3CC3                		move.w	d3,(a6)+
(1) 1859/     CB2 : DC7C 0001           		add.w	#1,d6
(1) 1860/     CB6 : 51CF FFDC           		dbf	d7,.nexts
(1) 1861/     CBA :                     .no_sprdrw:
(1) 1862/     CBA :                     
(1) 1863/     CBA :                     ; 		move.w	(RAM_SprLinkNum).w,d6	; d6 - Starting sprite link
(1) 1864/     CBA :                     ; 		lea	(RAM_Sprites).w,a6	; a6 - Genesis sprites
(1) 1865/     CBA : 4BF8 BC24           		lea	(RAM_ObjDispList).w,a5
(1) 1866/     CBE : 3E3C 0017           		move.w	#MAX_MDOBJ-1,d7
(1) 1867/     CC2 :                     .next:
(1) 1868/     CC2 : 3015                		move.w	(a5),d0
(1) 1869/     CC4 : 6700 00AC           		beq	.finish
(1) 1870/     CC8 : 4255                		clr.w	(a5)
(1) 1871/     CCA : 72FF                		moveq	#-1,d1			; Write the $FFFFxxxx part
(1) 1872/     CCC : 3200                		move.w	d0,d1			; get the half-address
(1) 1873/     CCE : 2841                		move.l	d1,a4			; set to a4
(1) 1874/     CD0 : 206C 000C           		move.l	obj_map(a4),a0		; Read this object's map
(1) 1875/     CD4 : 302C 001E           		move.w	obj_frame(a4),d0
(1) 1876/     CD8 : 182C 0022           		move.b	obj_set(a4),d4
(1) 1877/     CDC : D040                		add.w	d0,d0
(1) 1878/     CDE : 3030 0000           		move.w	(a0,d0.w),d0
(1) 1879/     CE2 : 41F0 0000           		lea	(a0,d0.w),a0
(1) 1880/     CE6 : 3A18                		move.w	(a0)+,d5
(1) 1881/     CE8 : 6700 0082           		beq	.mk_spr
(1) 1882/     CEC : 0445 0001           		subi.w	#1,d5
(1) 1883/     CF0 :                     .mk_pz:
(1) 1884/     CF0 : 0C46 0050           		cmpi.w	#80,d6
(1) 1885/     CF4 : 6E00 009A           		bgt	.ran_out
(1) 1886/     CF8 : 4845                		swap	d5
(1) 1887/     CFA : 4846                		swap	d6
(1) 1888/     CFC : 1018                		move.b	(a0)+,d0		; d0 - Y pos
(1) 1889/     CFE : 1218                		move.b	(a0)+,d1		; d1 - Size
(1) 1890/     D00 : 3418                		move.w	(a0)+,d2		; d2 - VRAM main
(1) 1891/     D02 : D0FC 0002           		adda	#2,a0			; TODO: VRAM double later
(1) 1892/     D06 : 3618                		move.w	(a0)+,d3		; d3 - X pos
(1) 1893/     D08 : 4880                		ext.w	d0
(1) 1894/     D0A :                     
(1) 1895/     D0A :                     	; X/Y flip checks
(1) 1896/     D0A : 3A2C 0014           		move.w	obj_vram(a4),d5
(1) 1897/     D0E : 0804 0001           		btst	#bitobj_flipV,d4
(1) 1898/     D12 : 6714                		beq.s	.vram_v
(1) 1899/     D14 : 4440                		neg.w	d0
(1) 1900/     D16 : 0440 0008           		subi.w	#8,d0
(1) 1901/     D1A : 3C01                		move.w	d1,d6
(1) 1902/     D1C : 0246 0003           		andi.w	#%0011,d6
(1) 1903/     D20 : E74E                		lsl.w	#3,d6
(1) 1904/     D22 : 9046                		sub.w	d6,d0
(1) 1905/     D24 : 0045 1000           		ori.w	#$1000,d5
(1) 1906/     D28 :                     .vram_v:
(1) 1907/     D28 : 0804 0000           		btst	#bitobj_flipH,d4
(1) 1908/     D2C : 6714                		beq.s	.vram_h
(1) 1909/     D2E : 4443                		neg.w	d3
(1) 1910/     D30 : 0443 0008           		subi.w	#8,d3
(1) 1911/     D34 : 3C01                		move.w	d1,d6
(1) 1912/     D36 : 0246 000C           		andi.w	#%1100,d6
(1) 1913/     D3A : DC46                		add.w	d6,d6
(1) 1914/     D3C : 9646                		sub.w	d6,d3
(1) 1915/     D3E : 0045 0800           		ori.w	#$0800,d5
(1) 1916/     D42 :                     .vram_h:
(1) 1917/     D42 : D445                		add.w	d5,d2
(1) 1918/     D44 : D06C 0008           		add.w	obj_y(a4),d0
(1) 1919/     D48 : D66C 0004           		add.w	obj_x(a4),d3
(1) 1920/     D4C : D07C 0080           		add.w	#$80,d0
(1) 1921/     D50 : D67C 0080           		add.w	#$80,d3
(1) 1922/     D54 : 4846                		swap	d6
(1) 1923/     D56 : E149                		lsl.w	#8,d1			; Size + Link
(1) 1924/     D58 : 8246                		or.w	d6,d1
(1) 1925/     D5A : 3CC0                		move.w	d0,(a6)+
(1) 1926/     D5C : 3CC1                		move.w	d1,(a6)+
(1) 1927/     D5E : 3CC2                		move.w	d2,(a6)+
(1) 1928/     D60 : 3CC3                		move.w	d3,(a6)+
(1) 1929/     D62 : DC7C 0001           		add.w	#1,d6
(1) 1930/     D66 : 4845                		swap	d5
(1) 1931/     D68 : 51CD FF86           		dbf	d5,.mk_pz
(1) 1932/     D6C :                     .mk_spr:
(1) 1933/     D6C : 425D                		clr.w	(a5)+			; Clear request
(1) 1934/     D6E : 51CF FF52           		dbf	d7,.next
(1) 1935/     D72 :                     .finish:
(1) 1936/     D72 : 4DF8 A414           		lea	(RAM_Sprites).w,a6
(1) 1937/     D76 : 0C46 0001           		cmpi.w	#1,d6
(1) 1938/     D7A : 6714                		beq.s	.ran_out
(1) 1939/     D7C : 0C46 0050           		cmpi.w	#80,d6
(1) 1940/     D80 : 6E0E                		bgt.s	.ran_out
(1) 1941/     D82 : 3E06                		move.w	d6,d7
(1) 1942/     D84 : 0447 0001           		subi.w	#1,d7
(1) 1943/     D88 : E74F                		lsl.w	#3,d7
(1) 1944/     D8A : DCC7                		adda	d7,a6
(1) 1945/     D8C : 429E                		clr.l	(a6)+
(1) 1946/     D8E : 429E                		clr.l	(a6)+
(1) 1947/     D90 :                     .ran_out:
(1) 1948/     D90 : 31C6 BDDA           		move.w	d6,(RAM_SprLinkNum).w
(1) 1949/     D94 : 4E75                		rts
(1) 1950/     D96 :                     
(1) 1951/     D96 :                     ; --------------------------------------------------------
(1) 1952/     D96 :                     ; Objects system subroutines
(1) 1953/     D96 :                     ; --------------------------------------------------------
(1) 1954/     D96 :                     
(1) 1955/     D96 :                     ; --------------------------------------------------------
(1) 1956/     D96 :                     ; obj_Display
(1) 1957/     D96 :                     ;
(1) 1958/     D96 :                     ; Builds a sprite using map data specified in
(1) 1959/     D96 :                     ; obj_map(a6)
(1) 1960/     D96 :                     ;
(1) 1961/     D96 :                     ; *** GENESIS map ***
(1) 1962/     D96 :                     ; mapdata:
(1) 1963/     D96 :                     ;       dc.w .frame0-mapdata
(1) 1964/     D96 :                     ;       dc.w .frame1-mapdata
(1) 1965/     D96 :                     ;       ...
(1) 1966/     D96 :                     ; .frame0:
(1) 1967/     D96 :                     ;       dc.w numofpz
(1) 1968/     D96 :                     ;       dc.b YY,SS
(1) 1969/     D96 :                     ;       dc.w vram_normal
(1) 1970/     D96 :                     ;       dc.w vram_half
(1) 1971/     D96 :                     ;       dc.w XXXX
(1) 1972/     D96 :                     ;       ; next frame
(1) 1973/     D96 :                     ;       align 2
(1) 1974/     D96 :                     ;
(1) 1975/     D96 :                     ; *** 32X map ***
(1) 1976/     D96 :                     ; mapdata:
(1) 1977/     D96 :                     ; 	dc.l SH2_ADDR|TH ; Spritesheet location (TH opt.)
(1) 1978/     D96 :                     ; 	dc.w 512	 ; Spritesheet WIDTH
(1) 1979/     D96 :                     ; 	dc.b 64,72	 ; Frame width and height
(1) 1980/     D96 :                     ; 	dc.w $80	 ; Palette index
(1) 1981/     D96 :                     ;
(1) 1982/     D96 :                     ; obj_frame(a6) is in YYXX direction
(1) 1983/     D96 :                     ;
(1) 1984/     D96 :                     ; Input:
(1) 1985/     D96 :                     ; a6 - Object
(1) 1986/     D96 :                     ;
(1) 1987/     D96 :                     ; Uses:
(1) 1988/     D96 :                     ; a5,d4-d7
(1) 1989/     D96 :                     ; --------------------------------------------------------
(1) 1990/     D96 :                     
(1) 1991/     D96 :                     object_Display:
(1) 1992/     D96 : 4BF8 BC24           		lea	(RAM_ObjDispList).w,a5
(1) 1993/     D9A : 3E3C 0017           		move.w	#MAX_MDOBJ-1,d7
(1) 1994/     D9E :                     .srch:
(1) 1995/     D9E : 4A55                		tst.w	(a5)
(1) 1996/     DA0 : 6708                		beq.s	.this_one
(1) 1997/     DA2 : DAFC 0002           		adda	#2,a5
(1) 1998/     DA6 : 51CF FFF6           		dbf	d7,.srch
(1) 1999/     DAA :                     .this_one:
(1) 2000/     DAA : 3A8E                		move.w	a6,(a5)
(1) 2001/     DAC : 4AAE 0010           		tst.l	obj_dma(a6)
(1) 2002/     DB0 : 6750                		beq.s	.no_dma
(1) 2003/     DB2 : 206E 0010           		move.l	obj_dma(a6),a0
(1) 2004/     DB6 : 2618                		move.l	(a0)+,d3		; d3 - Art data
(1) 2005/     DB8 : 382E 001E           		move.w	obj_frame(a6),d4
(1) 2006/     DBC : D844                 		add.w	d4,d4
(1) 2007/     DBE : 3830 4000           		move.w	(a0,d4.w),d4
(1) 2008/     DC2 : D0C4                 		adda	d4,a0
(1) 2009/     DC4 : 7800                 		moveq	#0,d4
(1) 2010/     DC6 : 3818                 		move.w	(a0)+,d4
(1) 2011/     DC8 : 6738                 		beq.s	.no_dma
(1) 2012/     DCA : 5344                 		subq.w	#1,d4
(1) 2013/     DCC : 322E 0014           		move.w	obj_vram(a6),d1
(1) 2014/     DD0 : 0241 07FF           		andi.w	#$7FF,d1
(1) 2015/     DD4 : EB49                		lsl.w	#5,d1
(1) 2016/     DD6 : 2F0E                		move.l	a6,-(sp)		; SAVE a6
(1) 2017/     DD8 :                     .next_pz:
(1) 2018/     DD8 : 4844                		swap	d4
(1) 2019/     DDA : 3818                		move.w	(a0)+,d4
(1) 2020/     DDC : 3404                		move.w	d4,d2
(1) 2021/     DDE : EE4A                		lsr.w	#7,d2
(1) 2022/     DE0 : 0242 01E0           		andi.w	#$1E0,d2
(1) 2023/     DE4 : D47C 0020           		add.w	#$20,d2
(1) 2024/     DE8 : 7000                		moveq	#0,d0
(1) 2025/     DEA : 3004                		move.w	d4,d0
(1) 2026/     DEC : 0240 0FFF           		andi.w	#$FFF,d0
(1) 2027/     DF0 : EB48                		lsl.w	#5,d0
(1) 2028/     DF2 : D083                		add.l	d3,d0
(1) 2029/     DF4 : 6100 F836           		bsr	Video_DmaMkEntry	; kills a6
(1) 2030/     DF8 : D242                		add.w	d2,d1
(1) 2031/     DFA : 4844                		swap	d4
(1) 2032/     DFC : 51CC FFDA           		dbf	d4,.next_pz
(1) 2033/     E00 : 2C5F                		move.l	(sp)+,a6
(1) 2034/     E02 :                     .no_dma:
(1) 2035/     E02 : 4E75                		rts
(1) 2036/     E04 :                     
(1) 2037/     E04 :                     ; --------------------------------------------------------
(1) 2038/     E04 :                     ; object_MkSprPz
(1) 2039/     E04 :                     ;
(1) 2040/     E04 :                     ; Makes separate sprite pieces using
(1) 2041/     E04 :                     ;
(1) 2042/     E04 :                     ; Input:
(1) 2043/     E04 :                     ; d0 - X pos
(1) 2044/     E04 :                     ; d1 - Y pos
(1) 2045/     E04 :                     ; d2 - VRAM
(1) 2046/     E04 :                     ; d3 - Size
(1) 2047/     E04 :                     :
(1) 2048/     E04 :                     ; Uses:
(1) 2049/     E04 :                     ; a5,d7
(1) 2050/     E04 :                     ; --------------------------------------------------------
(1) 2051/     E04 :                     
(1) 2052/     E04 :                     object_MkSprPz:
(1) 2053/     E04 : 3E38 BDD8           		move.w	(RAM_SprDrwCntr).w,d7
(1) 2054/     E08 : BE7C 0050           		cmp.w	#80,d7
(1) 2055/     E0C : 6C22                		bge.s	.nope
(1) 2056/     E0E : E74F                		lsl.w	#3,d7
(1) 2057/     E10 : 4BF8 A914           		lea	(RAM_SprDrwPz).w,a5
(1) 2058/     E14 : DAC7                		adda	d7,a5
(1) 2059/     E16 : D07C 0080           		add.w	#$80,d0
(1) 2060/     E1A : D27C 0080           		add.w	#$80,d1
(1) 2061/     E1E : C67C 00FF           		and.w	#$FF,d3
(1) 2062/     E22 :                     ; 		lsl.w	#8,d3
(1) 2063/     E22 : 3AC1                		move.w	d1,(a5)+
(1) 2064/     E24 : 3AC3                		move.w	d3,(a5)+
(1) 2065/     E26 : 3AC2                		move.w	d2,(a5)+
(1) 2066/     E28 : 3AC0                		move.w	d0,(a5)+
(1) 2067/     E2A : 0678 0001 BDD8      		add.w	#1,(RAM_SprDrwCntr).w
(1) 2068/     E30 :                     .nope:
(1) 2069/     E30 : 4E75                		rts
(1) 2070/     E32 :                     
(1) 2071/     E32 :                     ; --------------------------------------------------------
(1) 2072/     E32 :                     ; object_Animate
(1) 2073/     E32 :                     ;
(1) 2074/     E32 :                     ; Animates the sprite
(1) 2075/     E32 :                     ;
(1) 2076/     E32 :                     ; Input
(1) 2077/     E32 :                     ; a0.l - Animation data
(1) 2078/     E32 :                     ;
(1) 2079/     E32 :                     ; Uses:
(1) 2080/     E32 :                     ; d2
(1) 2081/     E32 :                     ; --------------------------------------------------------
(1) 2082/     E32 :                     
(1) 2083/     E32 :                     object_Animate:
(1) 2084/     E32 : 7E00                		moveq	#0,d7
(1) 2085/     E34 : 1E2E 001D            		move.b	obj_anim_id+1(a6),d7
(1) 2086/     E38 : BE2E 001C            		cmp.b	obj_anim_id(a6),d7
(1) 2087/     E3C : 670E                 		beq.s	.sameThing
(1) 2088/     E3E : 1D6E 001C 001D       		move.b	obj_anim_id(a6),obj_anim_id+1(a6)
(1) 2089/     E44 : 426E 001A            		clr.w	obj_anim_indx(a6)
(1) 2090/     E48 : 422E 0020            		clr.b	obj_anim_spd(a6)
(1) 2091/     E4C :                     .sameThing:
(1) 2092/     E4C : 1E2E 001C            		move.b	obj_anim_id(a6),d7
(1) 2093/     E50 : 0C07 00FF            		cmpi.b	#-1,d7
(1) 2094/     E54 : 6748                 		beq.s	.return
(1) 2095/     E56 : DE47                 		add.w	d7,d7
(1) 2096/     E58 : 3E30 7000            		move.w	(a0,d7.w),d7
(1) 2097/     E5C : 41F0 7000            		lea	(a0,d7.w),a0
(1) 2098/     E60 : 3E18                 		move.w	(a0)+,d7
(1) 2099/     E62 : 0C47 FFFF            		cmpi.w	#-1,d7
(1) 2100/     E66 : 670C                 		beq.s	.keepspd
(1) 2101/     E68 : 042E 0001 0020       		subi.b	#1,obj_anim_spd(a6)
(1) 2102/     E6E : 6A2E                 		bpl.s	.return
(1) 2103/     E70 : 1D47 0020           		move.b	d7,obj_anim_spd(a6)
(1) 2104/     E74 :                     .keepspd:
(1) 2105/     E74 : 7C00                 		moveq	#0,d6
(1) 2106/     E76 : 3E2E 001A            		move.w	obj_anim_indx(a6),d7
(1) 2107/     E7A : DE47                 		add.w	d7,d7
(1) 2108/     E7C : 3C10                 		move.w	(a0),d6
(1) 2109/     E7E : D0C7                 		adda	d7,a0
(1) 2110/     E80 : 3A10                 		move.w	(a0),d5
(1) 2111/     E82 : 0C45 FFFF            		cmpi.w	#-1,d5
(1) 2112/     E86 : 6718                 		beq.s	.noAnim		; loop
(1) 2113/     E88 : 0C45 FFFE            		cmpi.w	#-2,d5
(1) 2114/     E8C : 672A                 		beq.s	.lastFrame	; finish
(1) 2115/     E8E : 0C45 FFFD            		cmpi.w	#-3,d5
(1) 2116/     E92 : 671A                 		beq.s	.goToFrame
(1) 2117/     E94 : 3D45 001E            		move.w	d5,obj_frame(a6)
(1) 2118/     E98 : 066E 0001 001A       		add.w	#1,obj_anim_indx(a6)
(1) 2119/     E9E :                     .return:
(1) 2120/     E9E : 4E75                 		rts
(1) 2121/     EA0 :                     .noAnim:
(1) 2122/     EA0 : 3D7C 0001 001A       		move.w	#1,obj_anim_indx(a6)
(1) 2123/     EA6 : 3A06                 		move.w	d6,d5
(1) 2124/     EA8 : 3D45 001E            		move.w	d5,obj_frame(a6)
(1) 2125/     EAC : 4E75                		rts
(1) 2126/     EAE :                     .goToFrame:
(1) 2127/     EAE : 426E 001A           		clr.w	obj_anim_indx(a6)
(1) 2128/     EB2 : 3D68 0002 001A      		move.w	2(a0),obj_anim_indx(a6)
(1) 2129/     EB8 :                     .lastFrame:
(1) 2130/     EB8 : 422E 0020            		clr.b	obj_anim_spd(a6)
(1) 2131/     EBC : 4E75                		rts
(1) 2132/     EBE :                     
(1) 2133/     EBE :                     ; --------------------------------------------------------
(1) 2134/     EBE :                     ; object_AnimReset
(1) 2135/     EBE :                     ;
(1) 2136/     EBE :                     ; Call this BEFORE using animation
(1) 2137/     EBE :                     ;
(1) 2138/     EBE :                     ; Input:
(1) 2139/     EBE :                     ; a6 - Object
(1) 2140/     EBE :                     ;
(1) 2141/     EBE :                     ; Uses:
(1) 2142/     EBE :                     ; d7
(1) 2143/     EBE :                     ; --------------------------------------------------------
(1) 2144/     EBE :                     
(1) 2145/     EBE :                     object_AnimReset:
(1) 2146/     EBE : 426E 001A            		clr.w	obj_anim_indx(a6)
(1) 2147/     EC2 : 422E 0020            		clr.b	obj_anim_spd(a6)
(1) 2148/     EC6 : 1D7C 0000 001D      		move.b	#0,obj_anim_id+1(a6)
(1) 2149/     ECC : 4E75                		rts
(1) 2150/     ECE :                     
(1) 2151/     ECE :                     ; --------------------------------------------------------
(1) 2152/     ECE :                     ; object_Speed
(1) 2153/     ECE :                     ;
(1) 2154/     ECE :                     ; Moves the object using speed variables
(1) 2155/     ECE :                     ;
(1) 2156/     ECE :                     ; Input:
(1) 2157/     ECE :                     ; a6 - Object
(1) 2158/     ECE :                     ;
(1) 2159/     ECE :                     ; Uses:
(1) 2160/     ECE :                     ; d7
(1) 2161/     ECE :                     ; --------------------------------------------------------
(1) 2162/     ECE :                     
(1) 2163/     ECE :                     object_Speed:
(1) 2164/     ECE : 7E00                		moveq	#0,d7
(1) 2165/     ED0 : 3E2E 0016           		move.w	obj_x_spd(a6),d7
(1) 2166/     ED4 : 48C7                		ext.l	d7
(1) 2167/     ED6 : E187                		asl.l	#8,d7
(1) 2168/     ED8 : DFAE 0004           		add.l	d7,obj_x(a6)
(1) 2169/     EDC : 7E00                		moveq	#0,d7
(1) 2170/     EDE : 3E2E 0018           		move.w	obj_y_spd(a6),d7
(1) 2171/     EE2 : 48C7                		ext.l	d7
(1) 2172/     EE4 : E187                		asl.l	#8,d7
(1) 2173/     EE6 : DFAE 0008           		add.l	d7,obj_y(a6)
(1) 2174/     EEA : 4E75                		rts
(1) 2175/     EEC :                     
(1) 2176/     EEC :                     ; ====================================================================
(1) 2177/     EEC :                     ; ----------------------------------------------------------------
(1) 2178/     EEC :                     ; 32X ONLY
(1) 2179/     EEC :                     ; ----------------------------------------------------------------
(1) 2180/     EEC :                     
(1) 2285/     EEC :                     
     203/     EEC :                     		include	"system/md/system.asm"
(1)    1/     EEC :                     ; ====================================================================
(1)    2/     EEC :                     ; ----------------------------------------------------------------
(1)    3/     EEC :                     ; Genesis system routines, and some SegaCD and 32X routines.
(1)    4/     EEC :                     ;
(1)    5/     EEC :                     ; * CAN BE RECYCLED FOR SEGA PICO, ONLY IGNORE Z80 ACCESS OR
(1)    6/     EEC :                     ; THE CONTROL ROUTINE **
(1)    7/     EEC :                     ; ----------------------------------------------------------------
(1)    8/     EEC :                     
(1)    9/     EEC :                     ; ====================================================================
(1)   10/     EEC :                     ; ----------------------------------------------------------------
(1)   11/     EEC :                     ; Settings
(1)   12/     EEC :                     ; ----------------------------------------------------------------
(1)   13/     EEC :                     
(1)   14/     EEC : =$400                MAX_SRAMSIZE	equ $400
(1)   15/     EEC :                     
(1)   16/     EEC :                     ; ====================================================================
(1)   17/     EEC :                     ; ----------------------------------------------------------------
(1)   18/     EEC :                     ; Variables
(1)   19/     EEC :                     ; ----------------------------------------------------------------
(1)   20/     EEC :                     
(1)   21/     EEC :                     ; Controller buffer data, MUST call System_Input on VBlank.
(1)   22/     EEC :                     ;
(1)   23/     EEC :                     ; Type/Revision byte:
(1)   24/     EEC :                     ;
(1)   25/     EEC :                     ; ID    |
(1)   26/     EEC :                     ; $0D   | $00 - Original 3 button
(1)   27/     EEC :                     ;       | $01 - 6 button version: XYZM
(1)   28/     EEC :                     
(1)   29/     EEC :                     ; Read WORD in +on_hold or +on_press
(1)   30/     EEC : =$1                  JoyUp		equ $0001
(1)   31/     EEC : =$2                  JoyDown		equ $0002
(1)   32/     EEC : =$4                  JoyLeft		equ $0004
(1)   33/     EEC : =$8                  JoyRight	equ $0008
(1)   34/     EEC : =$10                 JoyB		equ $0010
(1)   35/     EEC : =$20                 JoyC		equ $0020
(1)   36/     EEC : =$40                 JoyA		equ $0040
(1)   37/     EEC : =$80                 JoyStart	equ $0080
(1)   38/     EEC : =$100                JoyZ		equ $0100
(1)   39/     EEC : =$200                JoyY		equ $0200
(1)   40/     EEC : =$400                JoyX		equ $0400
(1)   41/     EEC : =$800                JoyMode		equ $0800
(1)   42/     EEC : =$0                  bitJoyUp	equ 0		; READ THESE AS A WORD
(1)   43/     EEC : =$1                  bitJoyDown	equ 1
(1)   44/     EEC : =$2                  bitJoyLeft	equ 2
(1)   45/     EEC : =$3                  bitJoyRight	equ 3
(1)   46/     EEC : =$4                  bitJoyB		equ 4
(1)   47/     EEC : =$5                  bitJoyC		equ 5
(1)   48/     EEC : =$6                  bitJoyA		equ 6
(1)   49/     EEC : =$7                  bitJoyStart	equ 7
(1)   50/     EEC : =$8                  bitJoyZ		equ 8
(1)   51/     EEC : =$9                  bitJoyY		equ 9
(1)   52/     EEC : =$A                  bitJoyX		equ 10
(1)   53/     EEC : =$B                  bitJoyMode	equ 11
(1)   54/     EEC :                     
(1)   55/     EEC :                     ; Mega Mouse
(1)   56/     EEC :                     ; Read WORD as +on_hold or +on_press
(1)   57/     EEC : =$1                  ClickR		equ $0001
(1)   58/     EEC : =$2                  ClickL		equ $0002
(1)   59/     EEC : =$4                  ClickM		equ $0004	; US MOUSE ONLY
(1)   60/     EEC : =$8                  ClickS		equ $0008	; (Untested)
(1)   61/     EEC : =$0                  bitClickL	equ 0
(1)   62/     EEC : =$1                  bitClickR	equ 1
(1)   63/     EEC : =$2                  bitClickM	equ 2
(1)   64/     EEC : =$3                  bitClickS	equ 3
(1)   65/     EEC :                     
(1)   66/     EEC :                     ; Controller_1 / Controller_2
(1)   67/     EEC : (MACRO)              		strct 0
(1)   67/     EEC : =$EEC                GLBL_LASTPC     set *
(1)   67/FFFFFFFFFFFFAB96 :                                     dephase
(1)   67/       0 :                                     phase 0
(1)   67/       0 : =$0                  GLBL_LASTORG    set *
(1)   68/       0 :                     pad_id		ds.b 1			; Controller ID
(1)   69/       1 :                     pad_ver		ds.b 1			; Controller type/revision
(1)   70/       2 :                     on_hold		ds.w 1			; User HOLD bits
(1)   71/       4 :                     on_press	ds.w 1			; User PRESSED bits
(1)   72/       6 :                     on_release	ds.w 1			; (RESERVED)
(1)   73/       8 :                     mouse_x		ds.w 1			; Mouse/Pen X position or speed
(1)   74/       A :                     mouse_y		ds.w 1			; Mouse/pen Y position or speed
(1)   75/       C :                     ext_3		ds.w 1
(1)   76/       E :                     ext_4		ds.w 1
(1)   77/      10 :                     sizeof_input	ds.l 0
(1)   78/      10 : (MACRO)              		endstrct
(1)   78/       0 :                                     org GLBL_LASTORG
(1)   78/     EEC :                                     phase GLBL_LASTPC
(1)   79/     EEC :                     
(1)   80/     EEC :                     ; ====================================================================
(1)   81/     EEC :                     ; ----------------------------------------------------------------
(1)   82/     EEC :                     ; RAM section
(1)   83/     EEC :                     ; ----------------------------------------------------------------
(1)   84/     EEC :                     
(1)   85/     EEC : (MACRO)              		strct RAM_MdSystem
(1)   85/     EEC : =$EEC                GLBL_LASTPC     set *
(1)   85/       0 :                                     dephase
(1)   85/FFFFFFFFFFFFC004 :                                     phase RAM_MDSYSTEM
(1)   85/FFFFFFFFFFFFC004 : =$FFFFFFFFFFFFC004   GLBL_LASTORG    set *
(1)   86/FFFFFFFFFFFFC004 :                     RAM_InputData	ds.b sizeof_input*4		; Input data section
(1)   87/FFFFFFFFFFFFC044 :                     RAM_SaveData	ds.b MAX_SRAMSIZE		; Read/Write of the SAVE data
(1)   88/FFFFFFFFFFFFC444 :                     RAM_SysRandVal	ds.l 1				; Random value
(1)   89/FFFFFFFFFFFFC448 :                     RAM_SysRandSeed	ds.l 1				; Randomness seed
(1)   90/FFFFFFFFFFFFC44C :                     RAM_MdMarsVInt	ds.w 3				; VBlank jump (JMP xxxx xxxx)
(1)   91/FFFFFFFFFFFFC452 :                     RAM_MdMarsHint	ds.w 3				; HBlank jump (JMP xxxx xxxx)
(1)   92/FFFFFFFFFFFFC458 :                     RAM_ScreenMode	ds.w 1
(1)   93/FFFFFFFFFFFFC45A :                     sizeof_mdsys	ds.l 0
(1)   94/FFFFFFFFFFFFC460 : (MACRO)              		endstrct
(1)   94/FFFFFFFFFFFFC004 :                                     org GLBL_LASTORG
(1)   94/     EEC :                                     phase GLBL_LASTPC
(1)   95/     EEC : (MACRO)              		erreport "MD SYSTEM RAM",sizeof_mdsys-RAM_MdSystem,MAX_MdSystem
(1)   96/     EEC :                     
(1)   97/     EEC :                     ; ====================================================================
(1)   98/     EEC :                     ; ----------------------------------------------------------------
(1)   99/     EEC :                     ; Alias labels
(1)  100/     EEC :                     ; ----------------------------------------------------------------
(1)  101/     EEC :                     
(1)  102/     EEC : =$FFFFFFFFFFFFC004   Controller_1	equ RAM_InputData
(1)  103/     EEC : =$FFFFFFFFFFFFC014   Controller_2	equ RAM_InputData+sizeof_input
(1)  104/     EEC :                     
(1)  105/     EEC :                     ; ====================================================================
(1)  106/     EEC :                     ; --------------------------------------------------------
(1)  107/     EEC :                     ; Init System
(1)  108/     EEC :                     ; 
(1)  109/     EEC :                     ; Uses:
(1)  110/     EEC :                     ; a0-a2,d0-d1
(1)  111/     EEC :                     ; --------------------------------------------------------
(1)  112/     EEC :                     
(1)  113/     EEC :                     System_Init:
(1)  114/     EEC : 007C 0700           		or.w	#$0700,sr
(1)  126/     EF0 : 303C 4EF9           		move.w	#$4EF9,d0		; Set JMP opcode for the Hblank/VBlank jumps
(1)  127/     EF4 : 31C0 C44C            		move.w	d0,(RAM_MdMarsVInt).w
(1)  128/     EF8 : 31C0 C452           		move.w	d0,(RAM_MdMarsHInt).w
(1)  129/     EFC : 203C 0000 121C      		move.l	#VInt_Default,d0	; Set default ints
(1)  130/     F02 : 223C 0000 1232      		move.l	#Hint_Default,d1
(1)  131/     F08 : 6100 025A           		bsr	System_SetInts
(1)  132/     F0C : 41F8 C004           		lea	(RAM_InputData),a0	; Clear input data buffer
(1)  133/     F10 : 323C 0007           		move.w	#(sizeof_input/2)-1,d1
(1)  134/     F14 : 7000                		moveq	#0,d0
(1)  135/     F16 :                     .clrinput:
(1)  136/     F16 : 30C0                		move.w	d0,(a0)+
(1)  137/     F18 : 51C9 FFFC           		dbf	d1,.clrinput
(1)  138/     F1C : 203C 5625 5769      		move.l	#$56255769,d0		; Set these random values
(1)  139/     F22 : 223C 9511 6102      		move.l	#$95116102,d1
(1)  140/     F28 : 23C0 FFFF C444      		move.l	d0,(RAM_SysRandVal).l
(1)  141/     F2E : 23C1 FFFF C448      		move.l	d1,(RAM_SysRandSeed).l
(1)  145/     F34 : 027C F8FF           		andi.w	#$F8FF,sr
(1)  146/     F38 : 6000 023C           		bra	System_SramInit
(1)  147/     F3C :                     
(1)  148/     F3C :                     ; --------------------------------------------------------
(1)  149/     F3C :                     ; System_Render
(1)  150/     F3C :                     ;
(1)  151/     F3C :                     ; Call this on the loop your current screen.
(1)  152/     F3C :                     ; ** VDP DISPLAY MUST BE ON TO USE THIS **
(1)  153/     F3C :                     ;
(1)  154/     F3C :                     ; This will:
(1)  155/     F3C :                     ; - Update the sound driver for any changes that
(1)  156/     F3C :                     ;   need communication with 68K
(1)  157/     F3C :                     ; - Build the object sprites
(1)  158/     F3C :                     ; - 32X/CD32X:
(1)  159/     F3C :                     ;   Update the DREQ data
(1)  160/     F3C :                     ;
(1)  161/     F3C :                     ; On VBLANK:
(1)  162/     F3C :                     ; - Update the input data
(1)  163/     F3C :                     ; - Transfer the Genesis palette, sprites and scroll
(1)  164/     F3C :                     ;   data from from RAM to VDP
(1)  165/     F3C :                     ;   (32X: RV bit is not required.)
(1)  166/     F3C :                     ; - Process the DMA BLAST list (32X: Uses RV bit)
(1)  167/     F3C :                     ; --------------------------------------------------------
(1)  168/     F3C :                     
(1)  169/     F3C :                     System_Render:
(1)  170/     F3C : 1E38 BDF7           		move.b	(RAM_VdpRegs+1).w,d7
(1)  171/     F40 : 0807 0006           		btst	#bitDispEnbl,d7
(1)  172/     F44 : 673A                		beq.s	.forgot_disp		; <-- Failsafe
(1)  173/     F46 :                     .wait_lag:
(1)  174/     F46 : 6100 F326           		bsr	Sound_Update		; Syncronize/Update sound on lag
(1)  175/     F4A : 3E39 00C0 0004      		move.w	(vdp_ctrl).l,d7		; Got here during VBlank?
(1)  176/     F50 : 0807 0003           		btst	#bitVBlk,d7		; If yes, drop frame
(1)  177/     F54 : 66F0                		bne.s	.wait_lag
(1)  178/     F56 : 6100 F316           		bsr	Sound_Update
(1)  179/     F5A : 6100 FD16           		bsr	Objects_Show		; Build sprite data from Objects
(1)  180/     F5E :                     .wait_in:
(1)  181/     F5E : 6100 F30E           		bsr	Sound_Update		; Syncronize/Update sound during Display
(1)  182/     F62 : 3E39 00C0 0004      		move.w	(vdp_ctrl).l,d7		; Wait until VBlank
(1)  183/     F68 : 0807 0003           		btst	#bitVBlk,d7
(1)  184/     F6C : 67F0                		beq.s	.wait_in
(1)  185/     F6E : 6122                		bsr	System_Input		; Read input data FIRST
(1)  186/     F70 : 6100 F916           		bsr	Video_Render		; Render visuals
(1)  187/     F74 : 6100 F2F8           		bsr	Sound_Update
(1)  188/     F78 : 52B8 BDD4           		addq.l	#1,(RAM_Framecount).w
(1)  192/     F7C : 6100 F2F0           		bsr	Sound_Update
(1)  193/     F80 :                     .forgot_disp:
(1)  194/     F80 : 4E75                		rts
(1)  195/     F82 :                     
(1)  196/     F82 :                     ; --------------------------------------------------------
(1)  197/     F82 :                     ; System_DmaEnter_(from) and System_DmaEnter_(from)
(1)  198/     F82 :                     ; ROM or RAM
(1)  199/     F82 :                     ;
(1)  200/     F82 :                     ; Call to these labels BEFORE and AFTER doing
(1)  201/     F82 :                     ; DMA-to-VDP transers, these calls are NOT
(1)  202/     F82 :                     ; required for FILL or COPY
(1)  203/     F82 :                     ;
(1)  204/     F82 :                     ; This is where you put your Sound driver's Z80 stop
(1)  205/     F82 :                     ; or pause calls go here.
(1)  206/     F82 :                     ; --------------------------------------------------------
(1)  207/     F82 :                     
(1)  208/     F82 :                     System_DmaEnter_RAM:
(1)  209/     F82 : 6000 F346           		bra	gemaDmaPause
(1)  210/     F86 :                     System_DmaExit_RAM:
(1)  211/     F86 : 6000 F344           		bra	gemaDmaResume
(1)  212/     F8A :                     
(1)  213/     F8A :                     ; --------------------------------------------------------
(1)  214/     F8A :                     
(1)  215/     F8A :                     System_DmaEnter_ROM:
(1)  216/     F8A : 6000 F342           		bra	gemaDmaPauseRom
(1)  217/     F8E :                     System_DmaExit_ROM:
(1)  218/     F8E : 6000 F340           		bra	gemaDmaResumeRom
(1)  219/     F92 :                     
(1)  220/     F92 :                     ; ====================================================================
(1)  221/     F92 :                     ; ----------------------------------------------------------------
(1)  222/     F92 :                     ; Subroutines
(1)  223/     F92 :                     ; ----------------------------------------------------------------
(1)  224/     F92 :                     
(1)  225/     F92 :                     ; --------------------------------------------------------
(1)  226/     F92 :                     ; System_Input
(1)  227/     F92 :                     ;
(1)  228/     F92 :                     ; Reads data from the Controller ports
(1)  229/     F92 :                     ; *** CALL THIS ON VBLANK ONLY ***
(1)  230/     F92 :                     ;
(1)  231/     F92 :                     ; Uses:
(1)  232/     F92 :                     ; d5-d7,a5-a6
(1)  233/     F92 :                     ; --------------------------------------------------------
(1)  234/     F92 :                     
(1)  235/     F92 :                     System_Input:
(1)  236/     F92 :                     
(1)  237/     F92 :                     	; ----------------------------------------
(1)  238/     F92 :                     	; PICO input is hard-coded to Controller_1
(1)  239/     F92 :                     	;
(1)  240/     F92 :                     	; on_hold/on_press:
(1)  241/     F92 :                     	; %P00BRLDU
(1)  242/     F92 :                     	; UDLR - Arrows
(1)  243/     F92 :                     	;    B - BIG button red
(1)  244/     F92 :                     	;    P - Pen press/click
(1)  245/     F92 :                     	;
(1)  246/     F92 :                     	; mouse_x/mouse_y:
(1)  247/     F92 :                     	; Pen X/Y position
(1)  248/     F92 :                     	; depen
(1)  249/     F92 :                     	; ----------------------------------------
(1)  251/     F92 : 4DF8 C004           		lea	(RAM_InputData),a6
(1)  252/     F96 : 4BF9 0080 0003      		lea	($800003),a5
(1)  253/     F9C : 7E00                		moveq	#0,d7
(1)  254/     F9E : 1E15                		move.b	(a5),d7		; $800003: %P00RLDU
(1)  255/     FA0 : 0A47 00FF           		eori.w	#$FF,d7
(1)  256/     FA4 : 3C07                		move.w	d7,d6
(1)  257/     FA6 :                     ; 		move.b	on_release(a6),d2
(1)  258/     FA6 :                     ; 		eor.b	d2,d7
(1)  259/     FA6 :                     ; 		and.b	d2,d7
(1)  260/     FA6 :                     ; 		move.b	d7,on_release(a6)
(1)  261/     FA6 : 3A2E 0002           		move.w	on_hold(a6),d5
(1)  262/     FAA : 0A45 00FF           		eori.w	#$FF,d5
(1)  263/     FAE : CA46                		and.w	d6,d5
(1)  264/     FB0 : 3D45 0004           		move.w	d5,on_press(a6)
(1)  265/     FB4 : 3D46 0002           		move.w	d6,on_hold(a6)
(1)  266/     FB8 : 1E2D 0002           		move.b	2(a5),d7
(1)  267/     FBC : E14F                		lsl.w	#8,d7
(1)  268/     FBE : 1E2D 0004           		move.b	4(a5),d7
(1)  269/     FC2 : 9E7C 003C           		sub.w	#$3C,d7
(1)  270/     FC6 : 6A02                		bpl.s	.x_valid	 ; <-- Failsafe negative X
(1)  271/     FC8 : 4247                		clr.w	d7
(1)  272/     FCA :                     .x_valid:
(1)  273/     FCA : 3D47 0008           		move.w	d7,mouse_x(a6)
(1)  274/     FCE :                     	; $0000-$00EF - Tablet
(1)  275/     FCE :                     	; $0100-$01EF - Storyware
(1)  276/     FCE : 7E00                		moveq	#0,d7
(1)  277/     FD0 : 1C2D 0006           		move.b	6(a5),d6
(1)  278/     FD4 : E14E                		lsl.w	#8,d6
(1)  279/     FD6 : 1C2D 0008           		move.b	8(a5),d6
(1)  280/     FDA : 0446 01FC           		subi.w	#$1FC,d6
(1)  281/     FDE : 6B02                		bmi.s	.bad_y
(1)  282/     FE0 : 3E06                		move.w	d6,d7
(1)  283/     FE2 :                     .bad_y:
(1)  284/     FE2 : 3D47 000A           		move.w	d7,mouse_y(a6)
(1)  285/     FE6 : 1C2D 000A           		move.b	10(a5),d6
(1)  286/     FEA : 7E00                		moveq	#0,d7
(1)  287/     FEC : 7A05                		moveq	#6-1,d5		; 6 pages
(1)  288/     FEE :                     .page_it:
(1)  289/     FEE : E24E                		lsr.w	#1,d6
(1)  290/     FF0 : 6402                		bcc.s	.no_bit
(1)  291/     FF2 : 5247                		addq.w	#1,d7
(1)  292/     FF4 :                     .no_bit:
(1)  293/     FF4 : 51CD FFF8           		dbf	d5,.page_it
(1)  294/     FF8 : 1D47 000C           		move.b	d7,ext_3(a6)
(1)  500/     FFC :                     
(1)  501/     FFC :                     ; --------------------------------------------------------
(1)  502/     FFC :                     ; System_Random
(1)  503/     FFC :                     ;
(1)  504/     FFC :                     ; Makes a random number.
(1)  505/     FFC :                     ;
(1)  506/     FFC :                     ; Input:
(1)  507/     FFC :                     ; d0 | Seed
(1)  508/     FFC :                     ;
(1)  509/     FFC :                     ; Output:
(1)  510/     FFC :                     ; d0 | LONG
(1)  511/     FFC :                     ;
(1)  512/     FFC :                     ; Uses:
(1)  513/     FFC :                     ; d4-d5
(1)  514/     FFC :                     ; --------------------------------------------------------
(1)  515/     FFC :                     
(1)  516/     FFC :                     System_Random:
(1)  517/     FFC : 2F04                		move.l	d4,-(sp)
(1)  518/     FFE : 2838 C448           		move.l	(RAM_SysRandSeed).w,d4
(1)  519/    1002 : 6606                		bne.s	.good_s
(1)  520/    1004 : 283C 23B5 1947      		move.l	#$23B51947,d4
(1)  521/    100A :                     .good_s:
(1)  522/    100A : 2004                		move.l	d4,d0
(1)  523/    100C : EB9C                		rol.l	#5,d4
(1)  524/    100E : D880                		add.l	d0,d4
(1)  525/    1010 : E644                		asr.w	#3,d4
(1)  526/    1012 : D880                		add.l	d0,d4
(1)  527/    1014 : 3004                		move.w	d4,d0
(1)  528/    1016 : 4844                		swap	d4
(1)  529/    1018 : D044                		add.w	d4,d0
(1)  530/    101A : 3800                		move.w	d0,d4
(1)  531/    101C : 4844                		swap	d4
(1)  532/    101E : 21C4 C448           		move.l	d4,(RAM_SysRandSeed).w
(1)  533/    1022 : 281F                		move.l	(sp)+,d4
(1)  534/    1024 : 4E75                		rts
(1)  535/    1026 :                     
(1)  536/    1026 :                     ; --------------------------------------------------------
(1)  537/    1026 :                     ; System_SineWave_Cos / System_SineWave
(1)  538/    1026 :                     ;
(1)  539/    1026 :                     ; Get sinewave value
(1)  540/    1026 :                     ;
(1)  541/    1026 :                     ; Input:
(1)  542/    1026 :                     ; d0 | WORD - Tan
(1)  543/    1026 :                     ; d1 | WORD - Multiply
(1)  544/    1026 :                     ;
(1)  545/    1026 :                     ; Output:
(1)  546/    1026 :                     ; d2 | LONG - Result (as 0000.0000)
(1)  547/    1026 :                     ; --------------------------------------------------------
(1)  548/    1026 :                     
(1)  549/    1026 :                     System_SineWave_Cos:
(1)  550/    1026 : 48A7 8000           		movem.w	d0,-(sp)
(1)  551/    102A : 7400                		moveq	#0,d2
(1)  552/    102C : 0600 0040           		addi.b	#$40,d0
(1)  553/    1030 : 1400                		move.b	d0,d2
(1)  554/    1032 : E302                		asl.b	#1,d2
(1)  555/    1034 : 343B 202E           		move.w	MdSys_SineData(pc,d2.w),d2
(1)  556/    1038 : C4C1                		mulu.w	d1,d2
(1)  557/    103A : 8000                		or.b	d0,d0
(1)  558/    103C : 6A02                		bpl.s	.dont_neg
(1)  559/    103E : 4482                		neg.l	d2
(1)  560/    1040 :                     .dont_neg:
(1)  561/    1040 : 4C9F 0001           		movem.w	(sp)+,d0
(1)  562/    1044 : 4E75                		rts
(1)  563/    1046 :                     
(1)  564/    1046 :                     System_SineWave:
(1)  565/    1046 : 48A7 8000           		movem.w	d0,-(sp)
(1)  566/    104A : 0240 007F           		andi.w	#$7F,d0
(1)  567/    104E : E340                		asl.w	#1,d0
(1)  568/    1050 : 343B 0012           		move.w	MdSys_SineData(pc,d0.w),d2
(1)  569/    1054 : C4C1                		mulu.w	d1,d2
(1)  570/    1056 : 4C9F 0001           		movem.w	(sp)+,d0
(1)  571/    105A : 5182                		subq.l	#8,d2
(1)  572/    105C : 8000                		or.b	d0,d0
(1)  573/    105E : 6A02                		bpl.s	.dont_neg
(1)  574/    1060 : 4482                		neg.l	d2
(1)  575/    1062 :                     .dont_neg:
(1)  576/    1062 : 4E75                		rts
(1)  577/    1064 :                     
(1)  578/    1064 : 0000 0006 000D      MdSys_SineData:	dc.w 0,	6, $D, $13, $19, $1F, $26, $2C,	$32, $38, $3E
             106A : 0013 0019 001F 
             1070 : 0026 002C 0032 
             1076 : 0038 003E          
(1)  579/    107A : 0044 004A 0050      		dc.w $44, $4A, $50, $56, $5C, $62, $68,	$6D, $73, $79
             1080 : 0056 005C 0062 
             1086 : 0068 006D 0073 
             108C : 0079             
(1)  580/    108E : 007E 0084 0089      		dc.w $7E, $84, $89, $8E, $93, $98, $9D,	$A2, $A7, $AC
             1094 : 008E 0093 0098 
             109A : 009D 00A2 00A7 
             10A0 : 00AC             
(1)  581/    10A2 : 00B1 00B5 00B9      		dc.w $B1, $B5, $B9, $BE, $C2, $C6, $CA,	$CE, $D1, $D5
             10A8 : 00BE 00C2 00C6 
             10AE : 00CA 00CE 00D1 
             10B4 : 00D5             
(1)  582/    10B6 : 00D8 00DC 00DF      		dc.w $D8, $DC, $DF, $E2, $E5, $E7, $EA,	$ED, $EF, $F1
             10BC : 00E2 00E5 00E7 
             10C2 : 00EA 00ED 00EF 
             10C8 : 00F1             
(1)  583/    10CA : 00F3 00F5 00F7      		dc.w $F3, $F5, $F7, $F8, $FA, $FB, $FC,	$FD, $FE, $FF
             10D0 : 00F8 00FA 00FB 
             10D6 : 00FC 00FD 00FE 
             10DC : 00FF             
(1)  584/    10DE : 00FF 0100 0100      		dc.w $FF, $100,	$100, $100, $100, $100,	$FF, $FF, $FE
             10E4 : 0100 0100 0100 
             10EA : 00FF 00FF 00FE    
(1)  585/    10F0 : 00FD 00FC 00FB      		dc.w $FD, $FC, $FB, $FA, $F8, $F7, $F5,	$F3, $F1, $EF
             10F6 : 00FA 00F8 00F7 
             10FC : 00F5 00F3 00F1 
             1102 : 00EF             
(1)  586/    1104 : 00ED 00EA 00E7      		dc.w $ED, $EA, $E7, $E5, $E2, $DF, $DC,	$D8, $D5, $D1
             110A : 00E5 00E2 00DF 
             1110 : 00DC 00D8 00D5 
             1116 : 00D1             
(1)  587/    1118 : 00CE 00CA 00C6      		dc.w $CE, $CA, $C6, $C2, $BE, $B9, $B5,	$B1, $AC, $A7
             111E : 00C2 00BE 00B9 
             1124 : 00B5 00B1 00AC 
             112A : 00A7             
(1)  588/    112C : 00A2 009D 0098      		dc.w $A2, $9D, $98, $93, $8E, $89, $84,	$7E, $79, $73
             1132 : 0093 008E 0089 
             1138 : 0084 007E 0079 
             113E : 0073             
(1)  589/    1140 : 006D 0068 0062      		dc.w $6D, $68, $62, $5C, $56, $50, $4A,	$44, $3E, $38
             1146 : 005C 0056 0050 
             114C : 004A 0044 003E 
             1152 : 0038             
(1)  590/    1154 : 0032 002C 0026      		dc.w $32, $2C, $26, $1F, $19, $13, $D, 6
             115A : 001F 0019 0013 
             1160 : 000D 0006          
(1)  591/    1164 :                     
(1)  592/    1164 :                     ; --------------------------------------------------------
(1)  593/    1164 :                     ; System_SetInts
(1)  594/    1164 :                     ;
(1)  595/    1164 :                     ; Set new interrputs
(1)  596/    1164 :                     ;
(1)  597/    1164 :                     ; d0 | LONG - VBlank
(1)  598/    1164 :                     ; d1 | LONG - HBlank
(1)  599/    1164 :                     ;
(1)  600/    1164 :                     ; Uses:
(1)  601/    1164 :                     ; d4
(1)  602/    1164 :                     ;
(1)  603/    1164 :                     ; Notes:
(1)  604/    1164 :                     ; Writing 0 or a negative number will skip change
(1)  605/    1164 :                     ; to the interrupt pointer
(1)  606/    1164 :                     ; --------------------------------------------------------
(1)  607/    1164 :                     
(1)  608/    1164 :                     System_SetInts:
(1)  609/    1164 : 2800                		move.l	d0,d4
(1)  610/    1166 : 6704                		beq.s	.novint
(1)  614/    1168 : 21C4 C44E            		move.l	d4,(RAM_MdMarsVInt+2).w
(1)  616/    116C :                     .novint:
(1)  617/    116C : 2801                		move.l	d1,d4
(1)  618/    116E : 6704                		beq.s	.nohint
(1)  622/    1170 : 21C4 C454            		move.l	d4,(RAM_MdMarsHInt+2).w
(1)  624/    1174 :                     .nohint:
(1)  625/    1174 : 4E75                		rts
(1)  626/    1176 :                     
(1)  627/    1176 :                     ; --------------------------------------------------------
(1)  628/    1176 :                     ; System_SramInit
(1)  629/    1176 :                     ;
(1)  630/    1176 :                     ; Init save data
(1)  631/    1176 :                     ;
(1)  632/    1176 :                     ; Uses:
(1)  633/    1176 :                     ; a4,d4-d5
(1)  634/    1176 :                     ; --------------------------------------------------------
(1)  635/    1176 :                     
(1)  636/    1176 :                     System_SramInit:
(1)  638/    1176 : 4E71                		nop			; Pico has no SRAM
(1)  657/    1178 : 4E75                		rts
(1)  658/    117A :                     
(1)  659/    117A :                     ; --------------------------------------------------------
(1)  660/    117A :                     ; System_SramSave
(1)  661/    117A :                     ; --------------------------------------------------------
(1)  662/    117A :                     
(1)  663/    117A :                     System_SramSave:
(1)  665/    117A : 4E71                		nop
(1)  694/    117C : 4E75                		rts
(1)  695/    117E :                     
(1)  696/    117E :                     ; --------------------------------------------------------
(1)  697/    117E :                     ; System_SramLoad
(1)  698/    117E :                     ; --------------------------------------------------------
(1)  699/    117E :                     
(1)  700/    117E :                     System_SramLoad:
(1)  702/    117E : 4E71                		nop
(1)  731/    1180 : 4E75                		rts
(1)  732/    1182 :                     
(1)  733/    1182 :                     ; ====================================================================
(1)  734/    1182 :                     ; ----------------------------------------------------------------
(1)  735/    1182 :                     ; Screen mode subroutines
(1)  736/    1182 :                     ; ----------------------------------------------------------------
(1)  737/    1182 :                     
(1)  738/    1182 :                     ; --------------------------------------------------------
(1)  739/    1182 :                     ; Initialize current screen mode
(1)  740/    1182 :                     ;
(1)  741/    1182 :                     ; MUST call this at the very start of your screen code.
(1)  742/    1182 :                     ; --------------------------------------------------------
(1)  743/    1182 :                     
(1)  744/    1182 :                     Mode_Init:
(1)  745/    1182 : 007C 0700           		ori.w	#$0700,sr			; Disable interrupts.
(1)  746/    1186 : 13FC 0004 FFFF      		move.b	#$04,(RAM_VdpRegs).l
             118C : BDF6             
(1)  747/    118E : 13FC 0004 FFFF      		move.b	#$04,(RAM_VdpRegs+1).l
             1194 : BDF7             
(1)  748/    1196 : 6100 F1EE           		bsr	Video_Update
(1)  749/    119A : 6100 F23C           		bsr	Video_Clear
(1)  750/    119E : 6100 FA2C           		bsr	Objects_Clear
(1)  751/    11A2 : 49F8 1800           		lea	(MAX_ScrnBuff),a4
(1)  752/    11A6 : 3A3C 0BFF           		move.w	#(MAX_ScrnBuff/2)-1,d5
(1)  753/    11AA : 7800                		moveq	#0,d4
(1)  754/    11AC :                     .clr:
(1)  755/    11AC : 38C4                		move.w	d4,(a4)+
(1)  756/    11AE : 51CD FFFC           		dbf	d5,.clr
(1)  757/    11B2 : 4E75                		rts
(1)  758/    11B4 :                     
(1)  759/    11B4 :                     ; --------------------------------------------------------
(1)  760/    11B4 :                     ; Syncronized Fade-in/Fade-out for both VDP and SuperVDP
(1)  761/    11B4 :                     ; --------------------------------------------------------
(1)  762/    11B4 :                     
(1)  763/    11B4 :                     Mode_FadeIn:
(1)  764/    11B4 : 6100 FA3E           		bsr	Objects_Run
(1)  765/    11B8 : 31FC 0001 BDE4      		move.w	#1,(RAM_FadeMdReq).w
(1)  766/    11BE : 31FC 0001 BDEC      		move.w	#1,(RAM_FadeMarsReq).w
(1)  767/    11C4 : 31FC 0001 BDE6      		move.w	#1,(RAM_FadeMdIncr).w
(1)  768/    11CA : 31FC 0002 BDEE      		move.w	#2,(RAM_FadeMarsIncr).w
(1)  769/    11D0 : 31FC 0001 BDE8      		move.w	#1,(RAM_FadeMdDelay).w
(1)  770/    11D6 : 31FC 0000 BDF0      		move.w	#0,(RAM_FadeMarsDelay).w
(1)  771/    11DC :                     .loopw:
(1)  772/    11DC : 6100 FD5E           		bsr	System_Render
(1)  773/    11E0 : 6100 F2CE           		bsr	Video_RunFade
(1)  774/    11E4 : 66F6                		bne.s	.loopw
(1)  775/    11E6 : 4E75                		rts
(1)  776/    11E8 :                     
(1)  777/    11E8 :                     Mode_FadeOut:
(1)  778/    11E8 : 6100 FA0A           		bsr	Objects_Run
(1)  779/    11EC : 31FC 0002 BDE4      		move.w	#2,(RAM_FadeMdReq).w
(1)  780/    11F2 : 31FC 0002 BDEC      		move.w	#2,(RAM_FadeMarsReq).w
(1)  781/    11F8 : 31FC 0001 BDE6      		move.w	#1,(RAM_FadeMdIncr).w
(1)  782/    11FE : 31FC 0002 BDEE      		move.w	#2,(RAM_FadeMarsIncr).w
(1)  783/    1204 : 31FC 0001 BDE8      		move.w	#1,(RAM_FadeMdDelay).w
(1)  784/    120A : 31FC 0000 BDF0      		move.w	#0,(RAM_FadeMarsDelay).w
(1)  785/    1210 :                     .loopw:
(1)  786/    1210 : 6100 FD2A           		bsr	System_Render
(1)  787/    1214 : 6100 F29A           		bsr	Video_RunFade
(1)  788/    1218 : 66F6                		bne.s	.loopw
(1)  789/    121A : 4E75                		rts
(1)  790/    121C :                     
(1)  791/    121C :                     ; ====================================================================
(1)  792/    121C :                     ; ----------------------------------------------------------------
(1)  793/    121C :                     ; Default interrupts
(1)  794/    121C :                     ; ----------------------------------------------------------------
(1)  795/    121C :                     
(1)  796/    121C :                     ; --------------------------------------------------------
(1)  797/    121C :                     ; VBlank
(1)  798/    121C :                     ; --------------------------------------------------------
(1)  799/    121C :                     
(1)  800/    121C :                     VInt_Default:
(1)  801/    121C : 48E7 FFFE           		movem.l	d0-a6,-(sp)
(1)  802/    1220 : 6100 FD70           		bsr	System_Input
(1)  803/    1224 : 06B8 0000 0001      		addi.l	#1,(RAM_FrameCount).w
             122A : BDD4             
(1)  804/    122C : 4CDF 7FFF           		movem.l	(sp)+,d0-a6
(1)  805/    1230 : 4E73                		rte
(1)  806/    1232 :                     
(1)  807/    1232 :                     ; --------------------------------------------------------
(1)  808/    1232 :                     ; HBlank
(1)  809/    1232 :                     ; --------------------------------------------------------
(1)  810/    1232 :                     
(1)  811/    1232 :                     HInt_Default:
(1)  812/    1232 : 4E73                		rte
(1)  813/    1234 :                     
(1)  814/    1234 :                     ; ====================================================================
(1)  815/    1234 :                     ; ----------------------------------------------------------------
(1)  816/    1234 :                     ; SEGA CD / CD32X ONLY
(1)  817/    1234 :                     ; ----------------------------------------------------------------
(1)  818/    1234 :                     
(1) 1022/    1234 :                     
(1) 1023/    1234 :                     ; ====================================================================
(1) 1024/    1234 :                     ; ----------------------------------------------------------------
(1) 1025/    1234 :                     ; 32X and CD32X ONLY
(1) 1026/    1234 :                     ; ----------------------------------------------------------------
(1) 1027/    1234 :                     
(1) 1172/    1234 :                     
(1) 1173/    1234 :                     ; ====================================================================
(1) 1174/    1234 :                     ; ----------------------------------------------------------------
(1) 1175/    1234 :                     ; Shared subs for the add-ons
(1) 1176/    1234 :                     ; ----------------------------------------------------------------
(1) 1177/    1234 :                     
(1) 1178/    1234 :                     ; --------------------------------------------------------
(1) 1179/    1234 :                     ; System_GrabRamCode
(1) 1180/    1234 :                     ;
(1) 1181/    1234 :                     ; Shared routine for MCD, 32X and CD32X.
(1) 1182/    1234 :                     ;
(1) 1183/    1234 :                     ; Send new code to the USER side of RAM and
(1) 1184/    1234 :                     ; jumps into it.
(1) 1185/    1234 :                     ;
(1) 1186/    1234 :                     ; ** FOR SEGA CD/CD+32X
(1) 1187/    1234 :                     ; Input:
(1) 1188/    1234 :                     ; a0 - Filename string 8-bytes
(1) 1189/    1234 :                     ;
(1) 1190/    1234 :                     ; ** FOR SEGA 32X
(1) 1191/    1234 :                     ; Input:
(1) 1192/    1234 :                     ; a0 - Location of the RAM-code to copy from
(1) 1193/    1234 :                     ;      in the $880000/$900000 areas
(1) 1194/    1234 :                     ; --------------------------------------------------------
(1) 1195/    1234 :                     
(1) 1196/    1234 :                     System_GrabRamCode:
(1) 1211/    1234 : 4E75                		rts
(1) 1213/    1236 :                     
(1) 1214/    1236 :                     ; ====================================================================
(1) 1215/    1236 :                     
     204/    1236 :                     
     205/    1236 :                     ; ---------------------------------------------
     206/    1236 :                     ; Read screen modes
     207/    1236 :                     ;
     208/    1236 :                     ;   MD/Pico: Direct ROM jump
     209/    1236 :                     ; SCD/CD32X: Reads file from disc and
     210/    1236 :                     ;            transfers code to RAM
     211/    1236 :                     ;       32X: Read from ROM and copies code to
     212/    1236 :                     ;            RAM so it's problematic with DMA
     213/    1236 :                     ;            and the SH2
     214/    1236 :                     ;
     215/    1236 :                     ; - Returning in your current screen code will
     216/    1236 :                     ; loop here.
     217/    1236 :                     ; - DO NOT JUMP TO SCREEN MODES DIRECTLY
     218/    1236 :                     ; ---------------------------------------------
     219/    1236 :                     
     220/    1236 :                     Md_ReadModes:
     221/    1236 : 007C 0700           		ori.w	#$0700,sr		; Disable interrupts
     222/    123A : 7000                		moveq	#0,d0
     223/    123C : 3038 C458           		move.w	(RAM_ScreenMode).w,d0
     224/    1240 : C07C 007F           		and.w	#$7F,d0			; <-- CURRENT LIMIT
     225/    1244 : E948                		lsl.w	#4,d0			; * $10
     226/    1246 : 41FB 000A           		lea	.pick_mode(pc,d0.w),a0	; LEA the filename
     234/    124A : 207B 0006           		movea.l	.pick_mode(pc,d0.w),a0	; Location to JUMP to.
     235/    124E : 4E90                		jsr	(a0)
     237/    1250 : 60E4                		bra.s	Md_ReadModes		; Loop on rts
     238/    1252 :                     
     239/    1252 :                     ; ---------------------------------------------
     240/    1252 :                     ; ** ADD SCREEN MODES HERE **
     241/    1252 :                     ; ---------------------------------------------
     242/    1252 :                     
     243/    1252 :                     .pick_mode:
     244/    1252 : 0000 3250           		dc.l Md_Screen00	; Cartridge label (unused on CD)
     245/    1256 : 5343 5245 454E      		dc.b "SCREEN00.BIN"	; ISO Filename (unused on Cartridge)
             125C : 3030 2E42 494E    
     246/    1262 : 0000 3250           		dc.l Md_Screen00
     247/    1266 : 5343 5245 454E      		dc.b "SCREEN00.BIN"
             126C : 3030 2E42 494E    
     248/    1272 : 0000 3250           		dc.l Md_Screen00
     249/    1276 : 5343 5245 454E      		dc.b "SCREEN00.BIN"
             127C : 3030 2E42 494E    
     250/    1282 : 0000 3250           		dc.l Md_Screen00
     251/    1286 : 5343 5245 454E      		dc.b "SCREEN00.BIN"
             128C : 3030 2E42 494E    
     252/    1292 : 0000 3250           		dc.l Md_Screen00
     253/    1296 :                     
     254/    1296 :                     ; ---------------------------------------------
     255/    1296 :                     
     262/    1296 :                     Md_SysCode_e:
     263/    1296 :                     		align 2
     264/    1296 :                     
     265/    1296 :                     ; ===========================================================================
     266/    1296 :                     ; --------------------------------------------------------
     267/    1296 :                     ; Z80 include on Cartridge ONLY (NOT on Disc)
     268/    1296 :                     ; --------------------------------------------------------
     269/    1296 :                     
     271/    1296 :                     
     275/    1296 :                     Z80_CODE:
     279/    1296 :                     		include "sound/driver/gema_zdrv.asm"
(1)    1/    1296 :                     ; ====================================================================
(1)    2/    1296 :                     ; --------------------------------------------------------
(1)    3/    1296 :                     ; GEMA/Nikona Z80 code v0.9
(1)    4/    1296 :                     ; (C)2023-2024 GenesisFan64
(1)    5/    1296 :                     ; --------------------------------------------------------
(1)    6/    1296 :                     
(1)    7/       0 :                     		phase 0
(1)    8/       0 :                     		cpu Z80		; Enter Z80 CPU
(1)    9/       0 :                     
(1)   10/       0 :                     ; --------------------------------------------------------
(1)   11/       0 :                     ; SETTINGS
(1)   12/       0 :                     ; --------------------------------------------------------
(1)   13/       0 :                     
(1)   14/       0 :                     ; !! = leave as-is unless you know what you are doing.
(1)   15/       0 :                     
(1)   16/       0 : =8H                  MAX_TRFRPZ	equ 8		; !! Max transferRom packets(bytes) **AFFECTS WAVE QUALITY**
(1)   17/       0 : =20H                 MAX_TRKCHN	equ 32		; !! Max internal shared tracker channel slots *** LIMTED to 32 ***
(1)   18/       0 : =20H                 MAX_RCACH	equ 20h		; !! Max storage for ROM pattern data *** 1-BIT SIZES ONLY, MUST BE ALIGNED ***
(1)   19/       0 : =8H                  MAX_BUFFNTRY	equ 4*2		; !! nikona_BuffList buffer entry size
(1)   20/       0 :                     
(1)   21/       0 : =18H                 MAX_TBLSIZE	equ 18h		; Max size for chip tables
(1)   22/       0 : =1AH                 MAX_TRKINDX	equ 26		; Max channel indexes per buffer: 4PSG+6FM+8PCM+8PWM
(1)   23/       0 : =8H                  MAX_BLOCKS	equ 8		; Max Cache'd ROM blocks per track
(1)   24/       0 :                     
(1)   25/       0 : =10H                 MAX_ZCMND	equ 10h		; Size of commands array, ** 1-bit SIZES ONLY **
(1)   26/       0 : =0H                  ZSET_TESTME	equ 0		; Set to 1 to check the DAC playback for quality by ear
(1)   27/       0 :                     
(1)   28/       0 :                     ; --------------------------------------------------------
(1)   29/       0 :                     ; Structs
(1)   30/       0 :                     ; --------------------------------------------------------
(1)   31/       0 :                     
(1)   32/       0 :                     ; trkBuff struct: 00h-30h
(1)   33/       0 :                     ; unused bytes are free.
(1)   34/       0 :                     ;
(1)   35/       0 :                     ; trk_Status: %ERP- V--0
(1)   36/       0 :                     ; E - enabled
(1)   37/       0 :                     ; R - Init|Restart track
(1)   38/       0 :                     ; P - refill-on-playback
(1)   39/       0 :                     ; V - volume change flag
(1)   40/       0 :                     ; 0 - Use global sub-beats
(1)   41/       0 : =0H                  trk_Status	equ 00h	; ** Track Status and Flags (MUST BE at 00h)
(1)   42/       0 : =1H                  trk_SeqId	equ 01h ; ** Track ID to play.
(1)   43/       0 : =2H                  trk_SetBlk	equ 02h	; ** Start on this block
(1)   44/       0 : =3H                  trk_TickSet	equ 03h	; ** Ticks for this track
(1)   45/       0 : =4H                  trk_Blocks	equ 04h ; ** [W] Current track's blocks
(1)   46/       0 : =6H                  trk_Patt	equ 06h ; ** [W] Current track's heads and patterns
(1)   47/       0 : =8H                  trk_Cach	equ 08h	; ** [W] Current track's cache notedata
(1)   48/       0 : =0AH                 trk_Read	equ 0Ah	; [W] Track current pattern read
(1)   49/       0 : =0CH                 trk_Rows	equ 0Ch	; [W] Track row counter
(1)   50/       0 : =0EH                 trk_VolMaster	equ 0Eh ; [W] Master volume for this track slot (00-max), +80h update
(1)   51/       0 :                     
(1)   52/       0 : =10H                 trk_cachHalf	equ 10h ; ROM-cache halfcheck
(1)   53/       0 : =11H                 trk_rowPause	equ 11h	; Row-pause timer
(1)   54/       0 : =12H                 trk_tickTmr	equ 12h	; Ticks timer
(1)   55/       0 : =13H                 trk_currBlk	equ 13h	; Current block
(1)   56/       0 : =14H                 trk_Priority	equ 14h ; Priority level for this buffer
(1)   57/       0 : =15H                 trk_BankIns	equ 15h ; Instrument bank
(1)   58/       0 : =16H                 trk_BankHeads	equ 16h ; Header bank
(1)   59/       0 : =17H                 trk_BankBlk	equ 17h	; Block bank
(1)   60/       0 : =18H                 trk_MaxChnl	equ 18h ; MAX channels used in this track
(1)   61/       0 : =19H                 trk_VolFdTarget	equ 19h	; Target fade volume
(1)   62/       0 : =1AH                 trk_RomPattRead	equ 1Ah ; [3b] ROM current pattern data to be cache'd
(1)   63/       0 : =1DH                 trk_RomPatt	equ 1Dh ; [3b] ROM BASE pattern data
(1)   64/       0 : =20H                 trk_RomInst	equ 20h ; [3b] ROM instrument data
(1)   65/       0 : =23H                 trk_RomBlks	equ 23h ; [3b] ROM blocks data
(1)   66/       0 : =26H                 trk_ChnIndx	equ 26h	; CHANNEL INDEXES START HERE
(1)   67/       0 :                     
(1)   68/       0 :                     ; chnBuff struct, 8 bytes ONLY
(1)   69/       0 :                     ;
(1)   70/       0 :                     ; chnl_Flags: E0LRevin
(1)   71/       0 :                     ; E  - Channel is active
(1)   72/       0 :                     ; LR - Global left/Right panning bits (0-ON 1-OFF)
(1)   73/       0 :                     ; e  - Effect*
(1)   74/       0 :                     ; v  - Volume*
(1)   75/       0 :                     ; i  - Intrument*
(1)   76/       0 :                     ; n  - Note*
(1)   77/       0 :                     
(1)   78/       0 : =0H                  chnl_Flags	equ 0	; Playback flags ** DON'T MOVE **
(1)   79/       0 : =1H                  chnl_Chip	equ 1	; Current Chip ID + priority for this channel
(1)   80/       0 : =2H                  chnl_Note	equ 2
(1)   81/       0 : =3H                  chnl_Ins	equ 3	; Starting from 1, 0 is invalid
(1)   82/       0 : =4H                  chnl_Vol	equ 4	; MAX to MIN: 40h-00h
(1)   83/       0 : =5H                  chnl_EffId	equ 5
(1)   84/       0 : =6H                  chnl_EffArg	equ 6
(1)   85/       0 : =7H                  chnl_Type	equ 7	; Impulse-note update bits
(1)   86/       0 :                     
(1)   87/       0 :                     ; --------------------------------------------------------
(1)   88/       0 :                     ; Variables
(1)   89/       0 :                     ; --------------------------------------------------------
(1)   90/       0 :                     
(1)   91/       0 :                     ; Z80 opcode labels for the wave playback routines
(1)   92/       0 : =0H                  zopcNop		equ 00h
(1)   93/       0 : =8H                  zopcEx		equ 08h
(1)   94/       0 : =0C9H                zopcRet		equ 0C9h
(1)   95/       0 : =0D9H                zopcExx		equ 0D9h		; (dac_me ONLY)
(1)   96/       0 : =0F5H                zopcPushAf	equ 0F5h		; (dac_fill ONLY)
(1)   97/       0 :                     
(1)   98/       0 :                     ; PSG external control
(1)   99/       0 : =0H                  COM		equ 0
(1)  100/       0 : =4H                  LEV		equ 4
(1)  101/       0 : =8H                  ATK		equ 8
(1)  102/       0 : =0CH                 DKY		equ 12
(1)  103/       0 : =10H                 SLV		equ 16
(1)  104/       0 : =14H                 RRT		equ 20
(1)  105/       0 : =18H                 MODE		equ 24
(1)  106/       0 : =1CH                 DTL		equ 28
(1)  107/       0 : =20H                 DTH		equ 32
(1)  108/       0 : =24H                 ALV		equ 36
(1)  109/       0 : =28H                 FLG		equ 40
(1)  110/       0 : =2CH                 TMR		equ 44
(1)  111/       0 : =30H                 PVOL		equ 48
(1)  112/       0 : =34H                 PARP		equ 52
(1)  113/       0 : =38H                 PTMR		equ 56
(1)  114/       0 :                     
(1)  115/       0 :                     ; PWM control
(1)  116/       0 :                     ; PWCOM		equ 0
(1)  117/       0 :                     ; PWPTH_V	equ 8	; Volume | Pitch MSB (VVVVVVPPb)
(1)  118/       0 :                     ; PWPHL		equ 16	; Pitch LSB
(1)  119/       0 :                     ; PWOUTF	equ 24	; Output mode/bits | 32-bit address (%SlLRxiix) ii=$02 or $06
(1)  120/       0 :                     ; PWINSH	equ 32	; **
(1)  121/       0 :                     ; PWINSM	equ 40	; **
(1)  122/       0 :                     ; PWINSL	equ 48	; **
(1)  123/       0 :                     
(1)  124/       0 :                     ; ====================================================================
(1)  125/       0 :                     ; --------------------------------------------------------
(1)  126/       0 :                     ; Code starts here
(1)  127/       0 :                     ; --------------------------------------------------------
(1)  128/       0 :                     
(1)  129/       0 : F3                  		di			; Disable interrputs first
(1)  130/       1 : ED 56               		im	1		; Set Interrupt mode 1
(1)  131/       3 : 31 00 20            		ld	sp,2000h	; Set stack at the end of Z80
(1)  132/       6 : 18 48               		jr	z80_init	; Jump to z80_init
(1)  133/       8 :                     
(1)  134/       8 :                     ; --------------------------------------------------------
(1)  135/       8 :                     ; RST 8 (dac_me)
(1)  136/       8 :                     ; *** self-modifiable code ***
(1)  137/       8 :                     ;
(1)  138/       8 :                     ; Writes wave data to DAC using data stored
(1)  139/       8 :                     ; on the wave buffer, call this routine every 6 or 8
(1)  140/       8 :                     ; instructions to keep the samplerate stable.
(1)  141/       8 :                     ;
(1)  142/       8 :                     ; Input (EXX):
(1)  143/       8 :                     ;  c - WAVE buffer MSB
(1)  144/       8 :                     ; de - Pitch (xx.00)
(1)  145/       8 :                     ; h  - WAVE buffer LSB (as xx.00)
(1)  146/       8 :                     ;
(1)  147/       8 :                     ; Uses (EXX):
(1)  148/       8 :                     ; b
(1)  149/       8 :                     ;
(1)  150/       8 :                     ; Notes:
(1)  151/       8 :                     ; ONLY USE dac_on and dac_off to control
(1)  152/       8 :                     ; wave playback.
(1)  153/       8 :                     ;
(1)  154/       8 :                     ; call dac_on to enable wave playback, locks FM6
(1)  155/       8 :                     ; and
(1)  156/       8 :                     ; call dac_off to disable wave and unlock FM6.
(1)  157/       8 :                     ; --------------------------------------------------------
(1)  158/       8 :                     
(1)  159/       8 :                     ; Samplerate is at 16000hz with minimal quality loss.
(1)  160/       8 :                     ; 		org 8
(1)  161/       8 : D9                  dac_me:		exx			; * swap regs <-- Changes between EXX(play) and RET(stop)
(1)  162/       9 : 08                  		ex	af,af'		; Swap af
(1)  163/       A : 45                  		ld	b,l		; Save pitch .00 to b
(1)  164/       B : 6C                  		ld	l,h		; l - xx.00 to 00xx
(1)  165/       C : 61                  		ld	h,c		; h - Wave buffer MSB + 00xx
(1)  166/       D : 3E 2A               		ld	a,2Ah		; YM register 2Ah
(1)  167/       F : 32 00 40            		ld	(Zym_ctrl_1),a	; Set DAC write
(1)  168/      12 : 7E                  		ld	a,(hl)		; Read wave byte
(1)  169/      13 : 32 01 40            		ld	(Zym_data_1),a	; Write it to DAC
(1)  170/      16 : 65                  		ld	h,l		; get hl back
(1)  171/      17 : 68                  		ld	l,b		; Get .00 back from b to l
(1)  172/      18 : 19                  		add	hl,de		; Pitch increment hl
(1)  173/      19 : 08                  		ex	af,af'		; Return af
(1)  174/      1A : D9                  		exx			; * swap regs
(1)  175/      1B : C9                  		ret
(1)  176/      1C :                     
(1)  177/      1C :                     ; --------------------------------------------------------
(1)  178/      1C :                     ; 1Ch - Master tracklist pointer
(1)  179/      1C :                     gemaMstrListPos:
(1)  180/      1C : 00                  		db 0				; ** 32-bit 68k address **
(1)  181/      1D : 00                  		db 0
(1)  182/      1E : 00                  		db 0
(1)  183/      1F : 00                  		db 0
(1)  184/      20 :                     
(1)  185/      20 :                     ; --------------------------------------------------------
(1)  186/      20 :                     ; RST 20h (dac_me)
(1)  187/      20 :                     ; *** self-modifiable code ***
(1)  188/      20 :                     ;
(1)  189/      20 :                     ; Checks if the WAVE cache needs refilling to keep
(1)  190/      20 :                     ; it playing.
(1)  191/      20 :                     ; --------------------------------------------------------
(1)  192/      20 :                     
(1)  193/      20 :                     ; 		org 20h
(1)  194/      20 : F5                  dac_fill:	push	af		; <-- Changes between PUSH AF(play) and RET(stop)
(1)  195/      21 : 3A 97 1F            		ld	a,(dDacFifoMid)	; a - Get half-way value
(1)  196/      24 : D9                  		exx			; * swap regs
(1)  197/      25 : AC                  		xor	h		; Grab LSB.00
(1)  198/      26 : D9                  		exx			; * swap regs
(1)  199/      27 : E6 80               		and	80h		; Check if bit changed
(1)  200/      29 : C4 7A 13            		call	nz,dac_refill	; If yes, Refill and update LSB to check
(1)  201/      2C : F1                  		pop	af
(1)  202/      2D : C9                  		ret
(1)  203/      2E :                     
(1)  204/      2E :                     ; --------------------------------------------------------
(1)  205/      2E :                     ; 02Eh - User read/write values
(1)  206/      2E : 00                  commZWrite	db 0			; 2Eh: cmd fifo wptr (from 68k)
(1)  207/      2F : 00                  commZRomBlk	db 0			; 2Fh: 68k ROM block flag
(1)  208/      30 : 00                  cdRamLen	db 0			; 30h: Size + status flag
(1)  209/      31 : 00 00               cdRamDst	db 0,0			; 31h: ** Z80 destination
(1)  210/      33 : 00 00               cdRamSrc	db 0,0			; 33h: ** 68k 24-bit source
(1)  211/      35 : 00                  cdRamSrcB	db 0			; 35h: **
(1)  212/      36 : 00                  mcdBlock	db 0			; 36h: Flag to BLOCK SCD comm
(1)  213/      37 : 00                  marsBlock	db 0			; 37h: Flag to BLOCK PWM transfers.
(1)  214/      38 :                     
(1)  215/      38 :                     ; --------------------------------------------------------
(1)  216/      38 :                     ; Z80 Interrupt at 0038h
(1)  217/      38 :                     ; --------------------------------------------------------
(1)  218/      38 :                     
(1)  219/      38 :                     ; 		org 38h			; Align 38h
(1)  220/      38 : ED 73 80 1F         		ld	(tickSpSet),sp	; Write TICK flag using sp (xx1F, read as tickFlag+1)
(1)  221/      3C : F3                  		di			; Disable interrupt
(1)  222/      3D : C9                  		ret
(1)  223/      3E :                     
(1)  224/      3E :                     ; --------------------------------------------------------
(1)  225/      3E :                     ; 03Eh - More user settings
(1)  226/      3E : 00                  palMode		db 0			; 3Eh: PAL mode flag
(1)  227/      3F : 00                  freeFlag	db 0
(1)  228/      40 :                     
(1)  229/      40 :                     ; --------------------------------------------------------
(1)  230/      40 :                     ; 68K Read/Write area at 40h
(1)  231/      40 :                     ; --------------------------------------------------------
(1)  232/      40 :                     
(1)  233/      40 :                     ; 		org 40h
(1)  234/      40 :                     commZfifo	ds MAX_ZCMND			; Buffer for commands from 68k side
(1)  235/      50 :                     
(1)  236/      50 :                     ; --------------------------------------------------------
(1)  237/      50 :                     ; Initialize
(1)  238/      50 :                     ; --------------------------------------------------------
(1)  239/      50 :                     
(1)  240/      50 :                     z80_init:
(1)  241/      50 : CD 5A 10            		call	gema_init		; Init values
(1)  242/      53 : FB                  		ei
(1)  243/      54 :                     
(1)  244/      54 :                     ; --------------------------------------------------------
(1)  245/      54 :                     ; MAIN LOOP
(1)  246/      54 :                     ; --------------------------------------------------------
(1)  247/      54 :                     
(1)  248/      54 :                     drv_loop:
(1)  249/      54 : CF                  		rst	8
(1)  250/      55 : CD C6 10            		call	get_tick		; Check tick on VBlank
(1)  251/      58 : E7                  		rst	20h			; Refill wave here
(1)  252/      59 : CF                  		rst	8
(1)  253/      5A : 06 00               		ld	b,0			; b - Reset current flags (beat|tick)
(1)  254/      5C : 3A 82 1F            		ld	a,(tickCnt)		; Decrement tick counter
(1)  255/      5F : D6 01               		sub	1
(1)  256/      61 : 38 0B               		jr	c,.noticks		; If non-zero, no tick passed.
(1)  257/      63 : 32 82 1F            		ld	(tickCnt),a
(1)  258/      66 : CD 9F 11            		call	chip_env		; Process PSG and YM
(1)  259/      69 : CD C6 10            		call	get_tick		; Check for another tick
(1)  260/      6C : 06 01               		ld 	b,01b			; Set TICK and clear BEAT flags (01b)
(1)  261/      6E :                     .noticks:
(1)  262/      6E : 3A A1 1F            		ld	a,(sbeatAcc+1)		; check beat counter (scaled by tempo)
(1)  263/      71 : D6 01               		sub	1
(1)  264/      73 : 38 06               		jr	c,.nobeats
(1)  265/      75 : CF                  		rst	8
(1)  266/      76 : 32 A1 1F            		ld	(sbeatAcc+1),a		; 1/24 beat passed.
(1)  267/      79 : CB C8               		set	1,b			; Set BEAT (10b) flag
(1)  268/      7B :                     .nobeats:
(1)  269/      7B : CF                  		rst	8
(1)  270/      7C : 78                  		ld	a,b			; Any beat/tick bits set?
(1)  271/      7D : B7                  		or	a
(1)  272/      7E : 28 14               		jr	z,.neither
(1)  273/      80 : 32 96 1F            		ld	(currTickBits),a	; Save BEAT/TICK bits
(1)  274/      83 : CF                  		rst	8
(1)  275/      84 : CD C6 10            		call	get_tick
(1)  276/      87 : CD 24 06            		call	set_chips		; Send changes to sound chips
(1)  277/      8A : CD C6 10            		call	get_tick
(1)  278/      8D : CF                  		rst	8
(1)  279/      8E : CD 25 02            		call	upd_track		; Update track data
(1)  280/      91 : CD C6 10            		call	get_tick
(1)  281/      94 :                     .neither:
(1)  282/      94 : CF                  		rst	8
(1)  286/      95 : CD C6 10            		call	get_tick
(1)  287/      98 :                     .next_cmd:
(1)  288/      98 : 3A 2E 00            		ld	a,(commZWrite)		; Check if commZ R/W indexes
(1)  289/      9B : 47                  		ld	b,a			; are in the same spot a == b
(1)  290/      9C : 3A 85 1F            		ld	a,(commZRead)
(1)  291/      9F : B8                  		cp	b			; If equal, loop back.
(1)  292/      A0 : 28 B2               		jr	z,drv_loop
(1)  293/      A2 : CF                  		rst	8
(1)  294/      A3 : CD BB 00            		call	.grab_arg		; Read staring flag -1
(1)  295/      A6 : FE FF               		cp	-1			; Got START -1?
(1)  296/      A8 : 20 AA               		jr	nz,drv_loop		; If not, end of commands
(1)  297/      AA : CD BB 00            		call	.grab_arg		; Read command number
(1)  298/      AD : 87                  		add	a,a			; ID * 2
(1)  299/      AE : 21 DA 00            		ld	hl,.list		; Index-jump...
(1)  300/      B1 : 16 00               		ld	d,0
(1)  301/      B3 : 5F                  		ld	e,a
(1)  302/      B4 : 19                  		add	hl,de
(1)  303/      B5 : 7E                  		ld	a,(hl)
(1)  304/      B6 : 23                  		inc	hl
(1)  305/      B7 : 66                  		ld	h,(hl)
(1)  306/      B8 : CF                  		rst	8
(1)  307/      B9 : 6F                  		ld	l,a
(1)  308/      BA : E9                  		jp	(hl)
(1)  309/      BB :                     
(1)  310/      BB :                     ; --------------------------------------------------------
(1)  311/      BB :                     ; Read cmd byte, auto re-rolls to 3Fh
(1)  312/      BB :                     ; --------------------------------------------------------
(1)  313/      BB :                     
(1)  314/      BB :                     .grab_arg:
(1)  315/      BB : D5                  		push	de
(1)  316/      BC : E5                  		push	hl
(1)  317/      BD :                     .getcbytel:
(1)  318/      BD : 3A 2E 00            		ld	a,(commZWrite)
(1)  319/      C0 : 57                  		ld	d,a
(1)  320/      C1 : CF                  		rst	8
(1)  321/      C2 : 3A 85 1F            		ld	a,(commZRead)
(1)  322/      C5 : BA                  		cp	d		; commZ R/W indexes are the same?
(1)  323/      C6 : 28 F5               		jr	z,.getcbytel	; wait until these counters change.
(1)  324/      C8 : 16 00               		ld	d,0
(1)  325/      CA : 5F                  		ld	e,a
(1)  326/      CB : 21 40 00            		ld	hl,commZfifo	; Read commZ list + index
(1)  327/      CE : 19                  		add	hl,de
(1)  328/      CF : CF                  		rst	8
(1)  329/      D0 : 3C                  		inc	a
(1)  330/      D1 : E6 0F               		and	MAX_ZCMND-1	; ** commZ list buffer limit
(1)  331/      D3 : 32 85 1F            		ld	(commZRead),a
(1)  332/      D6 : 7E                  		ld	a,(hl)		; a - got this byte from the buffer
(1)  333/      D7 : E1                  		pop	hl
(1)  334/      D8 : D1                  		pop	de
(1)  335/      D9 : C9                  		ret
(1)  336/      DA :                     
(1)  337/      DA :                     ; --------------------------------------------------------
(1)  338/      DA :                     
(1)  339/      DA :                     .list:
(1)  340/      DA : EA 00               		dw .cmnd_0		; 00h -
(1)  341/      DC : ED 00               		dw .cmnd_1		; 01h - Set Master tracklist
(1)  342/      DE : 06 01               		dw .cmnd_2		; 02h - Play by track number
(1)  343/      E0 : 45 01               		dw .cmnd_3		; 03h - Stop by track number
(1)  344/      E2 : EA 00               		dw .cmnd_0		; 04h - **
(1)  345/      E4 : 7E 01               		dw .cmnd_5		; 05h - Fade volume (FadeIn/FadeOut)
(1)  346/      E6 : B6 01               		dw .cmnd_6		; 06h - Set maximum volume to slot
(1)  347/      E8 : EE 01               		dw .cmnd_7		; 07h - Set GLOBAL sub-beats
(1)  348/      EA :                     
(1)  349/      EA :                     ; --------------------------------------------------------
(1)  350/      EA :                     ; Command 00h
(1)  351/      EA :                     ;
(1)  352/      EA :                     ; Reserved for TESTING purposes.
(1)  353/      EA :                     ; --------------------------------------------------------
(1)  354/      EA :                     
(1)  355/      EA :                     .cmnd_0:
(1)  356/      EA :                     ; 		ld	a,DacIns_TEST>>16
(1)  357/      EA :                     ; 		ld	hl,(DacIns_TEST+6)&0FFFFh
(1)  358/      EA :                     ; 		ld	(wave_Start),hl
(1)  359/      EA :                     ; 		ld	(wave_Start+2),a
(1)  360/      EA :                     ; 		ld	a,02h
(1)  361/      EA :                     ; 		ld	hl,04000h
(1)  362/      EA :                     ; 		ld	(wave_Len),hl
(1)  363/      EA :                     ; 		ld	(wave_Len+2),a
(1)  364/      EA :                     ; 		ld	bc,0
(1)  365/      EA :                     ; 		ld	(wave_Loop),bc
(1)  366/      EA :                     ; 		ld	hl,100h
(1)  367/      EA :                     ; 		ld	(wave_Pitch),hl
(1)  368/      EA :                     ; 		ld	a,1
(1)  369/      EA :                     ; 		ld	(wave_Flags),a
(1)  370/      EA :                     ; 		call	dac_play
(1)  371/      EA :                     
(1)  372/      EA :                     ; 		ld	iy,trkBuff_0
(1)  373/      EA :                     ; 		ld	(iy+trk_VolMaster),64-16
(1)  374/      EA :                     ; 		ld	(iy+trk_VolFdTarget),64
(1)  375/      EA :                     
(1)  376/      EA : C3 98 00            		jp	.next_cmd
(1)  377/      ED :                     
(1)  378/      ED :                     ; --------------------------------------------------------
(1)  379/      ED :                     ; Command 01h:
(1)  380/      ED :                     ;
(1)  381/      ED :                     ; Set the Track MASTER-list.
(1)  382/      ED :                     ; --------------------------------------------------------
(1)  383/      ED :                     
(1)  384/      ED :                     .cmnd_1:
(1)  385/      ED : 21 1F 00            		ld	hl,gemaMstrListPos+3	; 32-bit big endian
(1)  386/      F0 : CD BB 00            		call	.grab_arg		; $000000xx
(1)  387/      F3 : 77                  		ld	(hl),a
(1)  388/      F4 : 2B                  		dec	hl
(1)  389/      F5 : CD BB 00            		call	.grab_arg		; $0000xx00
(1)  390/      F8 : 77                  		ld	(hl),a
(1)  391/      F9 : 2B                  		dec	hl
(1)  392/      FA : CD BB 00            		call	.grab_arg		; $00xx0000
(1)  393/      FD : 77                  		ld	(hl),a
(1)  394/      FE : 2B                  		dec	hl
(1)  395/      FF : CD BB 00            		call	.grab_arg		; $xx000000 (filler)
(1)  396/     102 : 77                  		ld	(hl),a
(1)  397/     103 : C3 98 00            		jp	.next_cmd
(1)  398/     106 :                     
(1)  399/     106 :                     ; --------------------------------------------------------
(1)  400/     106 :                     ; Command 02h:
(1)  401/     106 :                     ;
(1)  402/     106 :                     ; Make new track by sequence number
(1)  403/     106 :                     ;
(1)  404/     106 :                     ; Arguments:
(1)  405/     106 :                     ; SeqID,BlockPos,SlotIndex(If -1 autofill)
(1)  406/     106 :                     ; --------------------------------------------------------
(1)  407/     106 :                     
(1)  408/     106 :                     .cmnd_2:
(1)  409/     106 : CD BB 00            		call	.grab_arg		; d1: Sequence ID
(1)  410/     109 : 4F                  		ld	c,a			; copy as c
(1)  411/     10A : CD BB 00            		call	.grab_arg		; d2: Block from
(1)  412/     10D : 47                  		ld	b,a			; copy as b
(1)  413/     10E : CF                  		rst	8
(1)  414/     10F : CD BB 00            		call	.grab_arg		; d0: Slot index
(1)  415/     112 : FD 21 91 15         		ld	iy,nikona_BuffList	; iy - Slot buffer list
(1)  416/     116 : FE FF               		cp	-1			; if d2 == -1, search
(1)  417/     118 : 28 0E               		jr	z,.srch_mode
(1)  418/     11A : FE 03               		cp	(nikona_BuffList_e-nikona_BuffList)/MAX_BUFFNTRY	; If maxed out slots
(1)  419/     11C : D2 98 00            		jp	nc,.next_cmd
(1)  420/     11F : CD FF 01            		call	.cmnd_rdslot
(1)  421/     122 : CD 37 01            		call	.wrtto_slot
(1)  422/     125 : C3 98 00            		jp	.next_cmd
(1)  423/     128 :                     ; -1
(1)  424/     128 :                     .srch_mode:
(1)  425/     128 : CD 12 02            		call	.srch_slot
(1)  426/     12B : FE FF               		cp	-1
(1)  427/     12D : CA 98 00            		jp	z,.next_cmd		; Then skip, no free slot.
(1)  428/     130 : CB 7E               		bit	7,(hl)			; Is this track free?
(1)  429/     132 : CA 37 01            		jp	z,.wrtto_slot
(1)  430/     135 : 18 F1               		jr	.srch_mode
(1)  431/     137 :                     .wrtto_slot:
(1)  432/     137 : 36 C0               		ld	(hl),0C0h		; ** Write trk_Status flags: Enable+Restart
(1)  433/     139 : 23                  		inc	hl
(1)  434/     13A : CF                  		rst	8
(1)  435/     13B : 71                  		ld	(hl),c			; ** write trk_SeqId
(1)  436/     13C : 23                  		inc	hl
(1)  437/     13D : 70                  		ld	(hl),b			; ** write trk_SetBlk
(1)  438/     13E : 79                  		ld	a,c
(1)  439/     13F : CD F8 05            		call	get_RomTrcks		; ** ROM READ: Get track list
(1)  440/     142 : C3 98 00            		jp	.next_cmd
(1)  441/     145 :                     
(1)  442/     145 :                     ; --------------------------------------------------------
(1)  443/     145 :                     ; Command 03h:
(1)  444/     145 :                     ;
(1)  445/     145 :                     ; Stop track with the same sequence number
(1)  446/     145 :                     ;
(1)  447/     145 :                     ; SeqID,SlotIndex(-1 allslots)
(1)  448/     145 :                     ; --------------------------------------------------------
(1)  449/     145 :                     
(1)  450/     145 :                     .cmnd_3:
(1)  451/     145 : CD BB 00            		call	.grab_arg		; d1: Sequence ID
(1)  452/     148 : 4F                  		ld	c,a			; copy to c
(1)  453/     149 : CD BB 00            		call	.grab_arg		; d0: Slot index
(1)  454/     14C : FD 21 91 15         		ld	iy,nikona_BuffList	; iy - Slot buffer list
(1)  455/     150 : FE FF               		cp	-1			; if -1, search for all with same ID
(1)  456/     152 : 28 0E               		jr	z,.srch_del
(1)  457/     154 : FE 03               		cp	(nikona_BuffList_e-nikona_BuffList)/MAX_BUFFNTRY	; If maxed out slots
(1)  458/     156 : D2 98 00            		jp	nc,.next_cmd
(1)  459/     159 : CD FF 01            		call	.cmnd_rdslot
(1)  460/     15C : CD 6F 01            		call	.wrtto_del
(1)  461/     15F : C3 98 00            		jp	.next_cmd
(1)  462/     162 :                     ; -1
(1)  463/     162 :                     .srch_del:
(1)  464/     162 : CD 12 02            		call	.srch_slot
(1)  465/     165 : FE FF               		cp	-1
(1)  466/     167 : CA 98 00            		jp	z,.next_cmd
(1)  467/     16A : CD 6F 01            		call	.wrtto_del
(1)  468/     16D : 18 F3               		jr	.srch_del
(1)  469/     16F :                     .wrtto_del:
(1)  470/     16F : CB 7E               		bit	7,(hl)
(1)  471/     171 : C8                  		ret	z
(1)  472/     172 : DD 7E 01            		ld	a,(ix+trk_SeqId)
(1)  473/     175 : B9                  		cp	c
(1)  474/     176 : C0                  		ret	nz
(1)  475/     177 : 36 FF               		ld	(hl),-1		; -1 flag, stop channel and clear slot
(1)  476/     179 : 23                  		inc	hl
(1)  477/     17A : 36 FF               		ld	(hl),-1		; Reset seqId
(1)  478/     17C : CF                  		rst	8
(1)  479/     17D : C9                  		ret
(1)  480/     17E :                     
(1)  481/     17E :                     ; --------------------------------------------------------
(1)  482/     17E :                     ; Command 05h:
(1)  483/     17E :                     ;
(1)  484/     17E :                     ; Fade volume (FadeIn/FadeOut)
(1)  485/     17E :                     ;
(1)  486/     17E :                     ; Arguments:
(1)  487/     17E :                     ; TargetVol,SlotIndex(If -1 autofill)
(1)  488/     17E :                     ; --------------------------------------------------------
(1)  489/     17E :                     
(1)  490/     17E :                     .cmnd_5:
(1)  491/     17E : CD BB 00            		call	.grab_arg		; d1: Master volume
(1)  492/     181 : 4F                  		ld	c,a			; copy to c
(1)  493/     182 : CD BB 00            		call	.grab_arg		; d0: Slot index
(1)  494/     185 : FD 21 91 15         		ld	iy,nikona_BuffList	; iy - Slot buffer list
(1)  495/     189 : FE FF               		cp	-1			; if -1, search for all with same ID
(1)  496/     18B : 28 0E               		jr	z,.srch_fvol
(1)  497/     18D : FE 03               		cp	(nikona_BuffList_e-nikona_BuffList)/MAX_BUFFNTRY	; If maxed out slots
(1)  498/     18F : D2 98 00            		jp	nc,.next_cmd
(1)  499/     192 : CD FF 01            		call	.cmnd_rdslot
(1)  500/     195 : CD A8 01            		call	.wrtto_fvol
(1)  501/     198 : C3 98 00            		jp	.next_cmd
(1)  502/     19B :                     ; -1
(1)  503/     19B :                     .srch_fvol:
(1)  504/     19B : CD 12 02            		call	.srch_slot
(1)  505/     19E : FE FF               		cp	-1
(1)  506/     1A0 : CA 98 00            		jp	z,.next_cmd		; Then skip, no free slot.
(1)  507/     1A3 : CD A8 01            		call	.wrtto_fvol
(1)  508/     1A6 : 18 F3               		jr	.srch_fvol
(1)  509/     1A8 :                     .wrtto_fvol:
(1)  510/     1A8 : CB 7E               		bit	7,(hl)			; Active?
(1)  511/     1AA : C8                  		ret	z
(1)  512/     1AB : CB DE               		set	3,(hl)			; Volume update flag
(1)  513/     1AD : DD 71 19            		ld	(ix+trk_VolFdTarget),c
(1)  514/     1B0 : DD 36 0F 00         		ld	(ix+trk_VolMaster+1),0
(1)  515/     1B4 : CF                  		rst	8
(1)  516/     1B5 : C9                  		ret
(1)  517/     1B6 :                     
(1)  518/     1B6 :                     ; --------------------------------------------------------
(1)  519/     1B6 :                     ; Command 06h:
(1)  520/     1B6 :                     ;
(1)  521/     1B6 :                     ; Set track's master volume
(1)  522/     1B6 :                     ;
(1)  523/     1B6 :                     ; Arguments:
(1)  524/     1B6 :                     ; MasterVol,SlotIndex(If -1 autofill)
(1)  525/     1B6 :                     ; --------------------------------------------------------
(1)  526/     1B6 :                     
(1)  527/     1B6 :                     .cmnd_6:
(1)  528/     1B6 : CD BB 00            		call	.grab_arg		; d1: Master volume
(1)  529/     1B9 : 4F                  		ld	c,a			; copy to c
(1)  530/     1BA : CD BB 00            		call	.grab_arg		; d0: Slot index
(1)  531/     1BD : FD 21 91 15         		ld	iy,nikona_BuffList	; iy - Slot buffer list
(1)  532/     1C1 : FE FF               		cp	-1			; if -1, search for all with same ID
(1)  533/     1C3 : 28 0E               		jr	z,.srch_vol
(1)  534/     1C5 : FE 03               		cp	(nikona_BuffList_e-nikona_BuffList)/MAX_BUFFNTRY	; If maxed out slots
(1)  535/     1C7 : D2 98 00            		jp	nc,.next_cmd
(1)  536/     1CA : CD FF 01            		call	.cmnd_rdslot
(1)  537/     1CD : CD E0 01            		call	.wrtto_vol
(1)  538/     1D0 : C3 98 00            		jp	.next_cmd
(1)  539/     1D3 :                     ; -1
(1)  540/     1D3 :                     .srch_vol:
(1)  541/     1D3 : CD 12 02            		call	.srch_slot
(1)  542/     1D6 : FE FF               		cp	-1
(1)  543/     1D8 : CA 98 00            		jp	z,.next_cmd		; Then skip, no free slot.
(1)  544/     1DB : CD E0 01            		call	.wrtto_vol
(1)  545/     1DE : 18 F3               		jr	.srch_vol
(1)  546/     1E0 :                     .wrtto_vol:
(1)  547/     1E0 : CB DE               		set	3,(hl)			; Volume update flag
(1)  548/     1E2 : DD 71 0E            		ld	(ix+trk_VolMaster),c
(1)  549/     1E5 : DD 71 19            		ld	(ix+trk_VolFdTarget),c
(1)  550/     1E8 : DD 36 0F 00         		ld	(ix+trk_VolMaster+1),0
(1)  551/     1EC : CF                  		rst	8
(1)  552/     1ED : C9                  		ret
(1)  553/     1EE :                     
(1)  554/     1EE :                     ; --------------------------------------------------------
(1)  555/     1EE :                     ; Command 07h:
(1)  556/     1EE :                     ;
(1)  557/     1EE :                     ; Set global sub-beats
(1)  558/     1EE :                     ; --------------------------------------------------------
(1)  559/     1EE :                     
(1)  560/     1EE :                     .cmnd_7:
(1)  561/     1EE : CD BB 00            		call	.grab_arg	; d0.w: $00xx
(1)  562/     1F1 : 4F                  		ld	c,a
(1)  563/     1F2 : CD BB 00            		call	.grab_arg	; d0.w: $xx00
(1)  564/     1F5 : 32 A3 1F            		ld	(sbeatPtck+1),a
(1)  565/     1F8 : 79                  		ld	a,c
(1)  566/     1F9 : 32 A2 1F            		ld	(sbeatPtck),a
(1)  567/     1FC : C3 98 00            		jp	.next_cmd
(1)  568/     1FF :                     
(1)  569/     1FF :                     ; --------------------------------------------------------
(1)  570/     1FF :                     ; Shared subs
(1)  571/     1FF :                     ; --------------------------------------------------------
(1)  572/     1FF :                     
(1)  573/     1FF :                     .cmnd_rdslot:
(1)  574/     1FF : 87                  		add	a,a			; ** MANUAL MAX_BUFFNTRY
(1)  575/     200 : 87                  		add	a,a			; id*8
(1)  576/     201 : 87                  		add	a,a
(1)  577/     202 : 16 00               		ld	d,0
(1)  578/     204 : 5F                  		ld	e,a
(1)  579/     205 : FD 19               		add	iy,de
(1)  580/     207 : FD 7E 00            		ld	a,(iy)
(1)  581/     20A : FD 66 01            		ld	h,(iy+1)
(1)  582/     20D : 6F                  		ld	l,a
(1)  583/     20E : E5                  		push	hl
(1)  584/     20F : DD E1               		pop	ix
(1)  585/     211 : C9                  		ret
(1)  586/     212 :                     
(1)  587/     212 :                     ; ------------------------------------------------
(1)  588/     212 :                     ; iy - nikona_BuffList
(1)  589/     212 :                     
(1)  590/     212 :                     .srch_slot:
(1)  591/     212 : 11 08 00            		ld	de,MAX_BUFFNTRY
(1)  592/     215 : FD 7E 00            		ld	a,(iy)
(1)  593/     218 : FE FF               		cp	-1			; End of list?
(1)  594/     21A : C8                  		ret	z
(1)  595/     21B : FD 66 01            		ld	h,(iy+1)		; hl - Current track slot
(1)  596/     21E : 6F                  		ld	l,a
(1)  597/     21F : E5                  		push	hl
(1)  598/     220 : DD E1               		pop	ix
(1)  599/     222 : FD 19               		add	iy,de			; Next entry for later
(1)  600/     224 : C9                  		ret
(1)  601/     225 :                     
(1)  602/     225 :                     ; ====================================================================
(1)  603/     225 :                     ; ----------------------------------------------------------------
(1)  604/     225 :                     ; MAIN Playback section
(1)  605/     225 :                     ; ----------------------------------------------------------------
(1)  606/     225 :                     
(1)  607/     225 :                     ; ============================================================
(1)  608/     225 :                     ; --------------------------------------------------------
(1)  609/     225 :                     ; Read INTERNAL mini-impulse-tracker data
(1)  610/     225 :                     ; --------------------------------------------------------
(1)  611/     225 :                     
(1)  612/     225 :                     upd_track:
(1)  613/     225 : E7                  		rst	20h			; Refill wave
(1)  614/     226 : CD C6 10            		call	get_tick		; Check for tick flag
(1)  615/     229 : FD 21 91 15         		ld	iy,nikona_BuffList	; iy - slot buffer List
(1)  616/     22D :                     .trk_buffrs:
(1)  617/     22D : FD 7E 00            		ld	a,(iy)			; if -1, end here.
(1)  618/     230 : FE FF               		cp	-1
(1)  619/     232 : C8                  		ret	z
(1)  620/     233 : CF                  		rst	8
(1)  621/     234 : FD E5               		push	iy
(1)  622/     236 : CD 42 02            		call	.read_track
(1)  623/     239 : FD E1               		pop	iy
(1)  624/     23B : 11 08 00            		ld	de,MAX_BUFFNTRY
(1)  625/     23E : FD 19               		add	iy,de
(1)  626/     240 : 18 EB               		jr	.trk_buffrs
(1)  627/     242 :                     
(1)  628/     242 :                     ; ----------------------------------------
(1)  629/     242 :                     ; iy - Track buffer
(1)  630/     242 :                     ; ----------------------------------------
(1)  631/     242 :                     
(1)  632/     242 :                     .read_track:
(1)  633/     242 : FD 6E 00            		ld	l,(iy)			; hl - current track slot
(1)  634/     245 : FD 66 01            		ld	h,(iy+1)
(1)  635/     248 : CF                  		rst	8
(1)  636/     249 : E5                  		push	hl
(1)  637/     24A : FD E1               		pop	iy			; change iy to hl
(1)  638/     24C : FD 46 00            		ld	b,(iy+trk_Status)	; b - Track status and settings
(1)  639/     24F : CB 78               		bit	7,b			; bit7: Track active?
(1)  640/     251 : C8                  		ret	z			; Return if not.
(1)  641/     252 : 78                  		ld	a,b
(1)  642/     253 : FE FF               		cp	-1			; Flag is -1?
(1)  643/     255 : C8                  		ret	z			; Return if mid-flag
(1)  644/     256 : CF                  		rst	8
(1)  645/     257 :                     	; ----------------------------------------
(1)  646/     257 :                     	; Track effects
(1)  647/     257 : FD 6E 0F            		ld	l,(iy+trk_VolMaster+1)
(1)  648/     25A : FD 66 0E            		ld	h,(iy+trk_VolMaster)
(1)  649/     25D : FD 4E 19            		ld	c,(iy+trk_VolFdTarget)
(1)  650/     260 : 11 00 01            		ld	de,0100h		; <-- Manual volfade speed MAX 0100h
(1)  651/     263 : 79                  		ld	a,c
(1)  652/     264 : BC                  		cp	h
(1)  653/     265 : 28 1E               		jr	z,.keep_vol
(1)  654/     267 : 30 06               		jr	nc,.fade_out
(1)  655/     269 : 11 80 FF            		ld	de,-80h
(1)  656/     26C : 19                  		add	hl,de
(1)  657/     26D : 18 0C               		jr	.too_much
(1)  658/     26F :                     .fade_out:
(1)  659/     26F : 19                  		add	hl,de
(1)  660/     270 : CF                  		rst	8
(1)  661/     271 : 7C                  		ld	a,h
(1)  662/     272 : B9                  		cp	c
(1)  663/     273 : 38 06               		jr	c,.too_much
(1)  664/     275 : 61                  		ld	h,c
(1)  665/     276 : 2E 00               		ld	l,0
(1)  666/     278 : FD 71 19            		ld	(iy+trk_VolFdTarget),c
(1)  667/     27B :                     .too_much:
(1)  668/     27B : FD CB 00 DE         		set	3,(iy+trk_Status)	; Volume update flag
(1)  669/     27F : FD 75 0F            		ld	(iy+trk_VolMaster+1),l
(1)  670/     282 : FD 74 0E            		ld	(iy+trk_VolMaster),h
(1)  671/     285 :                     .keep_vol:
(1)  672/     285 :                     	; ----------------------------------------
(1)  673/     285 : 3A 96 1F            		ld	a,(currTickBits)	; a - Tick/Beat bits
(1)  674/     288 : CB 40               		bit	0,b			; bit0: This track uses Beats?
(1)  675/     28A : 28 03               		jr	z,.sfxmd
(1)  676/     28C : CB 4F               		bit	1,a			; BEAT passed?
(1)  677/     28E : C8                  		ret	z			; No BEAT.
(1)  678/     28F :                     .sfxmd:
(1)  679/     28F : CB 47               		bit	0,a			; TICK passed?
(1)  680/     291 : C8                  		ret	z			; No TICK.
(1)  681/     292 : CF                  		rst	8
(1)  682/     293 :                     	; ----------------------------------------
(1)  683/     293 :                     	; *** Start reading notes ***
(1)  684/     293 : CB 70               		bit	6,b			; bit6: Restart/First time?
(1)  685/     295 : C4 21 05            		call	nz,.first_fill
(1)  686/     298 : CB 68               		bit	5,b			; bit5: FILL request by effect?
(1)  687/     29A : C4 1A 05            		call	nz,.effect_fill
(1)  688/     29D : FD 7E 12            		ld	a,(iy+trk_tickTmr)	; TICK ex-timer for this track
(1)  689/     2A0 : 3D                  		dec	a
(1)  690/     2A1 : FD 77 12            		ld	(iy+trk_tickTmr),a
(1)  691/     2A4 : B7                  		or	a			; Check a
(1)  692/     2A5 : C0                  		ret	nz			; If Tick timer != 0, exit.
(1)  693/     2A6 : CF                  		rst	8
(1)  694/     2A7 : FD 7E 03            		ld	a,(iy+trk_TickSet)	; Set new tick timer
(1)  695/     2AA : FD 77 12            		ld	(iy+trk_tickTmr),a
(1)  696/     2AD : FD 4E 0C            		ld	c,(iy+trk_Rows)		; bc - Set row counter
(1)  697/     2B0 : FD 46 0D            		ld	b,(iy+(trk_Rows+1))
(1)  698/     2B3 : 79                  		ld	a,c			; Check rowcount
(1)  699/     2B4 : B0                  		or	b
(1)  700/     2B5 : 20 14               		jr	nz,.row_active		; If bc != 0: row is currenly playing.
(1)  701/     2B7 : CF                  		rst	8			; If bc == 0 ...
(1)  702/     2B8 : FD 7E 13            		ld	a,(iy+trk_currBlk)	; Next block
(1)  703/     2BB : 3C                  		inc	a
(1)  704/     2BC : FD 77 13            		ld 	(iy+trk_currBlk),a
(1)  705/     2BF : CD 2E 04            		call	.set_track		; Read track data ** ROM ACCESS **
(1)  706/     2C2 : FE FF               		cp	-1			; Track finished?
(1)  707/     2C4 : C8                  		ret	z
(1)  708/     2C5 : FD 4E 0C            		ld	c,(iy+trk_Rows)		; Set new rowcount to bc
(1)  709/     2C8 : FD 46 0D            		ld	b,(iy+(trk_Rows+1))
(1)  710/     2CB :                     .row_active:
(1)  711/     2CB : CF                  		rst	8
(1)  712/     2CC : FD 6E 0A            		ld	l,(iy+trk_Read)		; hl - CURRENT pattern to read
(1)  713/     2CF : FD 66 0B            		ld	h,(iy+((trk_Read+1)))
(1)  714/     2D2 :                     
(1)  715/     2D2 :                     ; --------------------------------
(1)  716/     2D2 :                     ; Main read-loop
(1)  717/     2D2 :                     ; --------------------------------
(1)  718/     2D2 :                     
(1)  719/     2D2 :                     .next_note:
(1)  720/     2D2 : FD 7E 11            		ld	a,(iy+trk_rowPause)	; Check rowtimer
(1)  721/     2D5 : B7                  		or	a
(1)  722/     2D6 : 20 16               		jr	nz,.decrow
(1)  723/     2D8 : 7E                  		ld	a,(hl)			; Check if byte is a timer or a note
(1)  724/     2D9 : B7                  		or	a
(1)  725/     2DA : 28 06               		jr	z,.exit			; If == 00h: exit
(1)  726/     2DC : FA F9 02            		jp	m,.has_note		; If 80h-0FFh: Note data
(1)  727/     2DF : FD 77 11            		ld	(iy+trk_rowPause),a	; If 01h-07Fh: Row-pause timer
(1)  728/     2E2 :                     
(1)  729/     2E2 :                     ; --------------------------------
(1)  730/     2E2 :                     ; Exit
(1)  731/     2E2 :                     ; --------------------------------
(1)  732/     2E2 :                     
(1)  733/     2E2 :                     .exit:
(1)  734/     2E2 : CF                  		rst	8
(1)  735/     2E3 : CD F6 03            		call	.inc_cpatt		; * Increment patt pos
(1)  736/     2E6 : FD 75 0A            		ld	(iy+trk_Read),l		; Update READ location
(1)  737/     2E9 : FD 74 0B            		ld	(iy+((trk_Read+1))),h
(1)  738/     2EC : 18 03               		jr	.decrow_e
(1)  739/     2EE :                     .decrow:
(1)  740/     2EE : FD 35 11            		dec	(iy+trk_rowPause)	; Decrement row-pause timer
(1)  741/     2F1 :                     .decrow_e:
(1)  742/     2F1 : 0B                  		dec	bc			; Decrement rowcount
(1)  743/     2F2 : FD 71 0C            		ld	(iy+trk_Rows),c		; Write last row to memory
(1)  744/     2F5 : FD 70 0D            		ld	(iy+(trk_Rows+1)),b
(1)  745/     2F8 : C9                  		ret	; Exit.
(1)  746/     2F9 :                     
(1)  747/     2F9 :                     ; --------------------------------
(1)  748/     2F9 :                     ; New note request
(1)  749/     2F9 :                     ;
(1)  750/     2F9 :                     ; a - %1tcccccc
(1)  751/     2F9 :                     ;   | t - type setup
(1)  752/     2F9 :                     ;   | c - channel
(1)  753/     2F9 :                     ; --------------------------------
(1)  754/     2F9 :                     
(1)  755/     2F9 :                     .has_note:
(1)  756/     2F9 : CF                  		rst	8
(1)  757/     2FA : C5                  		push	bc			; Save rowcount
(1)  758/     2FB : 4F                  		ld	c,a			; Copy patt byte control to c
(1)  759/     2FC : CD F6 03            		call	.inc_cpatt		; * Increment patt pos
(1)  760/     2FF : E5                  		push	hl			; Save hl patt pos
(1)  761/     300 : FD E5               		push	iy
(1)  762/     302 : E1                  		pop	hl
(1)  763/     303 : DD 21 00 1E         		ld	ix,trkChnls		; ix - Channels buffer
(1)  764/     307 : 11 26 00            		ld	de,trk_ChnIndx		; <-- this also clears d
(1)  765/     30A : CF                  		rst	8
(1)  766/     30B : 19                  		add	hl,de			; hl - Track's index points buffer
(1)  767/     30C : 79                  		ld	a,c			; Get patt note position
(1)  768/     30D : E6 1F               		and	00011111b		; Filter index bits
(1)  769/     30F : 5F                  		ld	e,a			; Save as e
(1)  770/     310 : 19                  		add	hl,de			; Increment more by this pos
(1)  771/     311 : 7E                  		ld	a,(hl)			; Check if this index is occupied.
(1)  772/     312 : B7                  		or	a
(1)  773/     313 : 28 0A               		jr	z,.srch_new		; If == 0, new index
(1)  774/     315 : E6 1F               		and	00011111b		; If already used, read that channel
(1)  775/     317 : 87                  		add	a,a
(1)  776/     318 : 87                  		add	a,a
(1)  777/     319 : 87                  		add	a,a
(1)  778/     31A : 5F                  		ld	e,a
(1)  779/     31B : DD 19               		add	ix,de
(1)  780/     31D : 18 2B               		jr	.cont_chnl
(1)  781/     31F :                     
(1)  782/     31F :                     ; Make NEW channel
(1)  783/     31F :                     ; ix - channel list start
(1)  784/     31F :                     .srch_new:
(1)  785/     31F : CF                  		rst	8
(1)  786/     320 : 06 1F               		ld	b,MAX_TRKCHN-1	; Max channels to check - 1
(1)  787/     322 : 16 00               		ld	d,0		; Reset out index
(1)  788/     324 :                     .next_chnl:
(1)  789/     324 : DD 7E 00            		ld	a,(ix)		; Read chnl_Flags
(1)  790/     327 : B7                  		or	a		; If plus, track channel is free
(1)  791/     328 : F2 3F 03            		jp	p,.chnl_free
(1)  792/     32B : DD 23               		inc	ix		; Search next channel, increment by 8
(1)  793/     32D : DD 23               		inc	ix
(1)  794/     32F : DD 23               		inc	ix
(1)  795/     331 : DD 23               		inc	ix
(1)  796/     333 : CF                  		rst	8
(1)  797/     334 : DD 23               		inc	ix
(1)  798/     336 : DD 23               		inc	ix
(1)  799/     338 : DD 23               		inc	ix
(1)  800/     33A : DD 23               		inc	ix
(1)  801/     33C : 14                  		inc	d		; Increment out index
(1)  802/     33D : 10 E5               		djnz	.next_chnl
(1)  803/     33F :                     .chnl_free:
(1)  804/     33F : CF                  		rst	8
(1)  805/     340 : 7A                  		ld	a,d			; Read index we got
(1)  806/     341 : E6 1F               		and	00011111b		; Filter bits
(1)  807/     343 : F6 80               		or	10000000b		; + set as used
(1)  808/     345 : 77                  		ld	(hl),a			; Write index slot
(1)  809/     346 : DD CB 00 FE         		set	7,(ix+chnl_Flags)	; Enable channel on the list
(1)  810/     34A :                     .cont_chnl:
(1)  811/     34A : E1                  		pop	hl			; Recover patt pos
(1)  812/     34B :                     	; ix - current channel
(1)  813/     34B : CF                  		rst	8
(1)  814/     34C : DD 46 07            		ld	b,(ix+chnl_Type)	; b - current TYPE byte
(1)  815/     34F : CB 71               		bit	6,c			; This byte has new TYPE setting?
(1)  816/     351 : 28 08               		jr	z,.old_type
(1)  817/     353 : 7E                  		ld	a,(hl)
(1)  818/     354 : DD 77 07            		ld	(ix+chnl_Type),a	; Update TYPE byte
(1)  819/     357 : 47                  		ld	b,a			; Set to b
(1)  820/     358 : CD F6 03            		call	.inc_cpatt		; Next patt pos
(1)  821/     35B :                     .old_type:
(1)  822/     35B :                     	; b - evinEVIN
(1)  823/     35B :                     	;     E-effect/V-volume/I-instrument/N-note
(1)  824/     35B :                     	;     evin: byte is already stored on track-channel buffer
(1)  825/     35B :                     	;     EVIN: next byte(s) contain a new value. for eff:2 bytes
(1)  826/     35B :                     
(1)  827/     35B : CF                  		rst	8
(1)  828/     35C : CB 40               		bit	0,b			; New NOTE?
(1)  829/     35E : 28 07               		jr	z,.no_note
(1)  830/     360 : 7E                  		ld	a,(hl)			; Set NOTE and increment patt
(1)  831/     361 : DD 77 02            		ld	(ix+chnl_Note),a
(1)  832/     364 : CD F6 03            		call	.inc_cpatt
(1)  833/     367 :                     .no_note:
(1)  834/     367 : CB 48               		bit	1,b			; New INS?
(1)  835/     369 : 28 07               		jr	z,.no_ins
(1)  836/     36B : 7E                  		ld	a,(hl)			; Set INS and increment patt
(1)  837/     36C : DD 77 03            		ld	(ix+chnl_Ins),a
(1)  838/     36F : CD F6 03            		call	.inc_cpatt
(1)  839/     372 :                     .no_ins:
(1)  840/     372 : CB 50               		bit	2,b			; New VOL?
(1)  841/     374 : 28 07               		jr	z,.no_vol
(1)  842/     376 : 7E                  		ld	a,(hl)			; Set VOL and increment patt
(1)  843/     377 : DD 77 04            		ld	(ix+chnl_Vol),a
(1)  844/     37A : CD F6 03            		call	.inc_cpatt
(1)  845/     37D :                     .no_vol:
(1)  846/     37D : CB 58               		bit	3,b			; New EFFECT?
(1)  847/     37F : 28 0F               		jr	z,.no_eff
(1)  848/     381 : 7E                  		ld	a,(hl)			; Set EFFECT ID, incr patt
(1)  849/     382 : DD 77 05            		ld	(ix+chnl_EffId),a
(1)  850/     385 : CD F6 03            		call	.inc_cpatt
(1)  851/     388 : CF                  		rst	8
(1)  852/     389 : 7E                  		ld	a,(hl)			; Set EFFECT ARG, incr patt
(1)  853/     38A : DD 77 06            		ld	(ix+chnl_EffArg),a
(1)  854/     38D : CD F6 03            		call	.inc_cpatt
(1)  855/     390 :                     .no_eff:
(1)  856/     390 : 78                  		ld	a,b			; Merge the Impulse evin bits into main EVIN bits
(1)  857/     391 : 0F                  		rrca
(1)  858/     392 : 0F                  		rrca
(1)  859/     393 : 0F                  		rrca
(1)  860/     394 : 0F                  		rrca
(1)  861/     395 : E6 0F               		and	00001111b		; Filter bits
(1)  862/     397 : 4F                  		ld	c,a			; Save as c
(1)  863/     398 : 78                  		ld	a,b
(1)  864/     399 : E6 0F               		and	00001111b		; Filter again
(1)  865/     39B : B1                  		or	c			; Merge c with a
(1)  866/     39C : CF                  		rst	8
(1)  867/     39D : 4F                  		ld	c,a			; Save bit flags
(1)  868/     39E : DD 7E 00            		ld	a,(ix+chnl_Flags)
(1)  869/     3A1 : B1                  		or	c
(1)  870/     3A2 : DD 77 00            		ld	(ix+chnl_Flags),a
(1)  871/     3A5 :                     	; Check for effects that affect
(1)  872/     3A5 :                     	; internal playback:
(1)  873/     3A5 :                     	; Jump, Ticks, etc.
(1)  874/     3A5 : C1                  		pop	bc		; Restore rowcount
(1)  875/     3A6 : DD 7E 00            		ld	a,(ix+chnl_Flags)
(1)  876/     3A9 : E6 08               		and	1000b		; ONLY check for the EFFECT bit
(1)  877/     3AB : CA D2 02            		jp	z,.next_note
(1)  878/     3AE : DD 7E 05            		ld	a,(ix+chnl_EffId)
(1)  879/     3B1 : B7                  		or	a		; 00h = invalid effect
(1)  880/     3B2 : CA D2 02            		jp	z,.next_note
(1)  881/     3B5 : FE 01               		cp	1		; Effect A: Tick set
(1)  882/     3B7 : 28 0B               		jr	z,.eff_A
(1)  883/     3B9 : FE 02               		cp	2		; Effect B: Position Jump
(1)  884/     3BB : 28 18               		jr	z,.eff_B
(1)  885/     3BD : FE 03               		cp	3		; Effect C: Pattern break
(1)  886/     3BF : 28 32               		jr	z,.eff_C	; <-- JUMP and exit.
(1)  887/     3C1 : C3 D2 02            		jp	.next_note
(1)  888/     3C4 :                     
(1)  889/     3C4 :                     ; ----------------------------------------
(1)  890/     3C4 :                     ; Effect A: Set ticks
(1)  891/     3C4 :                     ; ----------------------------------------
(1)  892/     3C4 :                     
(1)  893/     3C4 :                     .eff_A:
(1)  894/     3C4 : CF                  		rst	8
(1)  895/     3C5 : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - ticks number
(1)  896/     3C8 : FD 73 03            		ld	(iy+trk_TickSet),e	; set for both Set and Timer.
(1)  897/     3CB : FD 73 12            		ld	(iy+trk_tickTmr),e
(1)  898/     3CE : DD CB 00 9E         		res	3,(ix+chnl_Flags)	; <-- Clear EFFECT bit
(1)  899/     3D2 : C3 D2 02            		jp	.next_note
(1)  900/     3D5 :                     
(1)  901/     3D5 :                     ; ----------------------------------------
(1)  902/     3D5 :                     ; Effect B: jump to a new block
(1)  903/     3D5 :                     ; ----------------------------------------
(1)  904/     3D5 :                     
(1)  905/     3D5 :                     .eff_B:
(1)  906/     3D5 : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - Block SLOT to jump
(1)  907/     3D8 : FD 73 13            		ld 	(iy+trk_currBlk),e
(1)  908/     3DB : CF                  		rst	8
(1)  909/     3DC : FD 36 11 00         		ld	(iy+trk_rowPause),0	; Reset rowpause
(1)  910/     3E0 : DD CB 00 9E         		res	3,(ix+chnl_Flags)	; <-- Clear EFFECT bit
(1)  911/     3E4 : FD CB 00 EE         		set	5,(iy+trk_Status)	; set fill-from-effect flag on exit
(1)  912/     3E8 : 3E 80               		ld	a,80h
(1)  913/     3EA : FD 77 16            		ld	(iy+trk_BankHeads),a
(1)  914/     3ED : FD 77 17            		ld	(iy+trk_BankBlk),a
(1)  915/     3F0 : C3 D2 02            		jp	.next_note
(1)  916/     3F3 :                     
(1)  917/     3F3 :                     ; ----------------------------------------
(1)  918/     3F3 :                     ; Effect C: Pattern break/exit
(1)  919/     3F3 :                     ;
(1)  920/     3F3 :                     ; Only used on SFX, arguments ignored.
(1)  921/     3F3 :                     ; ----------------------------------------
(1)  922/     3F3 :                     
(1)  923/     3F3 :                     .eff_C:
(1)  924/     3F3 : C3 07 05            		jp	.track_end
(1)  925/     3F6 :                     
(1)  926/     3F6 :                     ; ----------------------------------------
(1)  927/     3F6 :                     ; Increment the current patt position
(1)  928/     3F6 :                     ; and recieve more data
(1)  929/     3F6 :                     ;
(1)  930/     3F6 :                     ; Breaks:
(1)  931/     3F6 :                     ; a,e
(1)  932/     3F6 :                     ; ----------------------------------------
(1)  933/     3F6 :                     
(1)  934/     3F6 :                     .inc_cpatt:
(1)  935/     3F6 : FD 5E 08            		ld	e,(iy+trk_Cach)	; Read curret cache LSB
(1)  936/     3F9 : 7D                  		ld	a,l
(1)  937/     3FA : 3C                  		inc	a
(1)  938/     3FB : E6 1F               		and	MAX_RCACH-1
(1)  939/     3FD : FE 1E               		cp	MAX_RCACH-2	; RAN OUT of bytes?
(1)  940/     3FF : 30 03               		jr	nc,.ran_out
(1)  941/     401 : B3                  		or	e
(1)  942/     402 : 6F                  		ld	l,a
(1)  943/     403 : C9                  		ret
(1)  944/     404 :                     .ran_out:
(1)  945/     404 : FD 6E 08            		ld	l,(iy+trk_Cach)
(1)  946/     407 : E5                  		push	hl
(1)  947/     408 : C5                  		push	bc
(1)  948/     409 : 06 00               		ld	b,0
(1)  949/     40B : 4F                  		ld	c,a
(1)  950/     40C : CF                  		rst	8
(1)  951/     40D : 5D                  		ld	e,l
(1)  952/     40E : 54                  		ld	d,h
(1)  953/     40F : FD 6E 1A            		ld	l,(iy+trk_RomPattRead)
(1)  954/     412 : FD 66 1B            		ld	h,(iy+(trk_RomPattRead+1))
(1)  955/     415 : FD 7E 1C            		ld	a,(iy+(trk_RomPattRead+2))
(1)  956/     418 : 09                  		add	hl,bc
(1)  957/     419 : CE 00               		adc	a,0
(1)  958/     41B : FD 75 1A            		ld	(iy+trk_RomPattRead),l
(1)  959/     41E : FD 74 1B            		ld	(iy+(trk_RomPattRead+1)),h
(1)  960/     421 : CF                  		rst	8
(1)  961/     422 : FD 77 1C            		ld	(iy+(trk_RomPattRead+2)),a
(1)  962/     425 : 01 20 00            		ld	bc,MAX_RCACH
(1)  963/     428 : CD E7 10            		call	transferRom	; *** ROM ACCESS ***
(1)  964/     42B : C1                  		pop	bc
(1)  965/     42C : E1                  		pop	hl
(1)  966/     42D : C9                  		ret
(1)  967/     42E :                     
(1)  968/     42E :                     ; ----------------------------------------
(1)  969/     42E :                     ; Set track pattern by trk_currBlk
(1)  970/     42E :                     ; ----------------------------------------
(1)  971/     42E :                     
(1)  972/     42E :                     .set_track:
(1)  973/     42E : FD 5E 04            		ld	e,(iy+trk_Blocks)
(1)  974/     431 : FD 56 05            		ld	d,(iy+(trk_Blocks+1))
(1)  975/     434 : FD 7E 13            		ld	a,(iy+trk_currBlk)
(1)  976/     437 : 4F                  		ld	c,a
(1)  977/     438 : C5                  		push	bc
(1)  978/     439 : D5                  		push	de
(1)  979/     43A : CF                  		rst	8
(1)  980/     43B : 0F                  		rrca
(1)  981/     43C : 0F                  		rrca
(1)  982/     43D : 0F                  		rrca
(1)  983/     43E : E6 1F               		and	00011111b
(1)  984/     440 : FD 4E 17            		ld	c,(iy+trk_BankBlk)	; c - current block bank
(1)  985/     443 : CB 79               		bit	7,c			; First time?
(1)  986/     445 : 20 03               		jr	nz,.first_blk
(1)  987/     447 : B9                  		cp	c			; SAME instrument data?
(1)  988/     448 : 28 1E               		jr	z,.keep_blk
(1)  989/     44A :                     .first_blk:
(1)  990/     44A : CF                  		rst	8
(1)  991/     44B : FD 77 17            		ld	(iy+trk_BankBlk),a	; Save inst number
(1)  992/     44E : 07                  		rlca
(1)  993/     44F : 07                  		rlca
(1)  994/     450 : 07                  		rlca
(1)  995/     451 : 06 00               		ld	b,0
(1)  996/     453 : 4F                  		ld	c,a
(1)  997/     454 : FD 6E 23            		ld	l,(iy+trk_RomBlks)	; Transfer FIRST patt
(1)  998/     457 : FD 66 24            		ld	h,(iy+(trk_RomBlks+1))	; packet
(1)  999/     45A : FD 7E 25            		ld	a,(iy+(trk_RomBlks+2))
(1) 1000/     45D : E7                  		rst	20h
(1) 1001/     45E : CF                  		rst	8
(1) 1002/     45F : 09                  		add	hl,bc
(1) 1003/     460 : CE 00               		adc	a,0
(1) 1004/     462 : 01 08 00            		ld	bc,8			; 8 blocks stored
(1) 1005/     465 : CD E7 10            		call	transferRom		; ** ROM ACCESS **
(1) 1006/     468 :                     .keep_blk:
(1) 1007/     468 : E1                  		pop	hl
(1) 1008/     469 : C1                  		pop	bc
(1) 1009/     46A : 79                  		ld	a,c
(1) 1010/     46B : E6 07               		and	00000111b
(1) 1011/     46D : CF                  		rst	8
(1) 1012/     46E : 16 00               		ld	d,0
(1) 1013/     470 : 5F                  		ld	e,a
(1) 1014/     471 : 19                  		add	hl,de
(1) 1015/     472 : 7E                  		ld	a,(hl)			; Read byte
(1) 1016/     473 : FE FF               		cp	-1			; If block == -1, end track
(1) 1017/     475 : CA 07 05            		jp	z,.track_end
(1) 1018/     478 : CF                  		rst	8
(1) 1019/     479 :                     
(1) 1020/     479 : FD 5E 06            		ld	e,(iy+trk_Patt)		; Read CACHE patt heads
(1) 1021/     47C : FD 56 07            		ld	d,(iy+(trk_Patt+1))
(1) 1022/     47F : 4F                  		ld	c,a
(1) 1023/     480 : D5                  		push	de
(1) 1024/     481 : C5                  		push	bc
(1) 1025/     482 : CF                  		rst	8
(1) 1026/     483 : 0F                  		rrca
(1) 1027/     484 : 0F                  		rrca
(1) 1028/     485 : 0F                  		rrca
(1) 1029/     486 : E6 1F               		and	00011111b
(1) 1030/     488 : FD 4E 16            		ld	c,(iy+trk_BankHeads)	; c - current intrument loaded
(1) 1031/     48B : CB 79               		bit	7,c			; First time?
(1) 1032/     48D : 20 03               		jr	nz,.first_head
(1) 1033/     48F : B9                  		cp	c			; SAME instrument data?
(1) 1034/     490 : 28 26               		jr	z,.keep_it
(1) 1035/     492 :                     .first_head:
(1) 1036/     492 : CF                  		rst	8
(1) 1037/     493 : FD 77 16            		ld	(iy+trk_BankHeads),a	; Save inst number
(1) 1038/     496 : 47                  		ld	b,a
(1) 1039/     497 : 0F                  		rrca
(1) 1040/     498 : 0F                  		rrca
(1) 1041/     499 : 0F                  		rrca
(1) 1042/     49A : E6 E0               		and	11100000b
(1) 1043/     49C : 4F                  		ld	c,a
(1) 1044/     49D : 78                  		ld	a,b
(1) 1045/     49E : 0F                  		rrca
(1) 1046/     49F : 0F                  		rrca
(1) 1047/     4A0 : 0F                  		rrca
(1) 1048/     4A1 : E6 03               		and	00000011b
(1) 1049/     4A3 : 47                  		ld	b,a
(1) 1050/     4A4 :                     
(1) 1051/     4A4 : FD 6E 1D            		ld	l,(iy+trk_RomPatt)	; Transfer FIRST patt
(1) 1052/     4A7 : FD 66 1E            		ld	h,(iy+(trk_RomPatt+1))	; packet
(1) 1053/     4AA : FD 7E 1F            		ld	a,(iy+(trk_RomPatt+2))
(1) 1054/     4AD : E7                  		rst	20h
(1) 1055/     4AE : CF                  		rst	8
(1) 1056/     4AF : 09                  		add	hl,bc
(1) 1057/     4B0 : CE 00               		adc	a,0
(1) 1058/     4B2 : 01 20 00            		ld	bc,4*8			; 8 heads stored
(1) 1059/     4B5 : CD E7 10            		call	transferRom		; ** ROM ACCESS **
(1) 1060/     4B8 :                     .keep_it:
(1) 1061/     4B8 : C1                  		pop	bc
(1) 1062/     4B9 : 79                  		ld	a,c
(1) 1063/     4BA : E6 07               		and	00000111b
(1) 1064/     4BC : 87                  		add	a,a
(1) 1065/     4BD : 87                  		add	a,a
(1) 1066/     4BE : 57                  		ld	d,a
(1) 1067/     4BF : CF                  		rst	8
(1) 1068/     4C0 : E6 FC               		and	11111100b
(1) 1069/     4C2 : 5F                  		ld	e,a
(1) 1070/     4C3 : 7A                  		ld	a,d
(1) 1071/     4C4 : E6 03               		and	00000011b
(1) 1072/     4C6 : 57                  		ld	d,a
(1) 1073/     4C7 : E1                  		pop	hl
(1) 1074/     4C8 : 19                  		add	hl,de
(1) 1075/     4C9 : 5E                  		ld	e,(hl)			; de - Pos
(1) 1076/     4CA : 23                  		inc	hl
(1) 1077/     4CB : CF                  		rst	8
(1) 1078/     4CC : 56                  		ld	d,(hl)
(1) 1079/     4CD : 23                  		inc	hl
(1) 1080/     4CE : 7E                  		ld	a,(hl)
(1) 1081/     4CF : 23                  		inc	hl
(1) 1082/     4D0 : FD 77 0C            		ld	(iy+trk_Rows),a
(1) 1083/     4D3 : 7E                  		ld	a,(hl)
(1) 1084/     4D4 : 23                  		inc	hl
(1) 1085/     4D5 : FD 77 0D            		ld	(iy+(trk_Rows+1)),a
(1) 1086/     4D8 : FD 6E 1D            		ld	l,(iy+trk_RomPatt)	; Transfer FIRST patt
(1) 1087/     4DB : FD 66 1E            		ld	h,(iy+(trk_RomPatt+1))	; packet
(1) 1088/     4DE : CF                  		rst	8
(1) 1089/     4DF : FD 7E 1F            		ld	a,(iy+(trk_RomPatt+2))
(1) 1090/     4E2 : 19                  		add	hl,de
(1) 1091/     4E3 : CE 00               		adc	a,0
(1) 1092/     4E5 : FD 75 1A            		ld	(iy+trk_RomPattRead),l
(1) 1093/     4E8 : FD 74 1B            		ld	(iy+(trk_RomPattRead+1)),h
(1) 1094/     4EB : FD 77 1C            		ld	(iy+(trk_RomPattRead+2)),a
(1) 1095/     4EE : FD 5E 08            		ld	e,(iy+trk_Cach)
(1) 1096/     4F1 : FD 56 09            		ld	d,(iy+(trk_Cach+1))
(1) 1097/     4F4 :                     
(1) 1098/     4F4 : FD 73 0A            		ld	(iy+trk_Read),e
(1) 1099/     4F7 : FD 72 0B            		ld	(iy+(trk_Read+1)),d
(1) 1100/     4FA : 0E 20               		ld	c,MAX_RCACH
(1) 1101/     4FC : FD 36 10 00         		ld	(iy+trk_cachHalf),0
(1) 1102/     500 : FD 36 11 00         		ld	(iy+trk_rowPause),0
(1) 1103/     504 : C3 E7 10            		jp	transferRom		; ** ROM access **
(1) 1104/     507 :                     
(1) 1105/     507 :                     ; ----------------------------------------
(1) 1106/     507 :                     ; **JUMP ONLY**
(1) 1107/     507 :                     .track_end:
(1) 1108/     507 : CD B3 05            		call	track_out
(1) 1109/     50A : CF                  		rst	8
(1) 1110/     50B : AF                  		xor	a
(1) 1111/     50C : FD 77 11            		ld	(iy+trk_rowPause),a
(1) 1112/     50F : FD 77 12            		ld	(iy+trk_tickTmr),a
(1) 1113/     512 : FD 77 00            		ld	(iy+trk_Status),a	; Disable track slot
(1) 1114/     515 : FD 36 15 80         		ld	(iy+trk_BankIns),80h
(1) 1115/     519 : C9                  		ret
(1) 1116/     51A :                     
(1) 1117/     51A :                     ; ----------------------------------------
(1) 1118/     51A :                     ; Track refill
(1) 1119/     51A :                     ; ----------------------------------------
(1) 1120/     51A :                     
(1) 1121/     51A :                     .effect_fill:
(1) 1122/     51A : FD CB 00 AE         		res	5,(iy+trk_Status)	; Reset refill-from-effect flag
(1) 1123/     51E : C3 2E 04            		jp	.set_track
(1) 1124/     521 :                     
(1) 1125/     521 :                     ; ----------------------------------------
(1) 1126/     521 :                     ; Track Start/Reset
(1) 1127/     521 :                     ;
(1) 1128/     521 :                     ; iy - Track buffer
(1) 1129/     521 :                     ; ----------------------------------------
(1) 1130/     521 :                     
(1) 1131/     521 :                     .first_fill:
(1) 1132/     521 : FD CB 00 B6         		res	6,(iy+trk_Status)	; Clear FILL flag
(1) 1133/     525 : CD B3 05            		call	track_out
(1) 1134/     528 : FD 36 12 01         		ld	(iy+trk_tickTmr),1	; <-- Reset tick timer
(1) 1135/     52C : FD 7E 02            		ld	a,(iy+trk_SetBlk)	; Make start block as current block
(1) 1136/     52F : CF                  		rst	8
(1) 1137/     530 : FD 77 13            		ld 	(iy+trk_currBlk),a	; block
(1) 1138/     533 : 21 F7 1A            		ld	hl,trkInfoCach		; Read MASTER Nikona track list
(1) 1139/     536 : FD 7E 14            		ld	a,(iy+trk_Priority)	; Pick slot
(1) 1140/     539 : 3D                  		dec	a
(1) 1141/     53A : 87                  		add	a,a
(1) 1142/     53B : 87                  		add	a,a
(1) 1143/     53C : 16 00               		ld	d,0
(1) 1144/     53E : 5F                  		ld	e,a
(1) 1145/     53F : 19                  		add	hl,de
(1) 1146/     540 : 7E                  		ld	a,(hl)
(1) 1147/     541 : 23                  		inc	hl
(1) 1148/     542 : CB 7F               		bit	7,a
(1) 1149/     544 : 28 04               		jr	z,.no_glbl
(1) 1150/     546 : FD CB 00 C6         		set	0,(iy+trk_Status)	; Enable GLOBAL sub-beats
(1) 1151/     54A :                     .no_glbl:
(1) 1152/     54A : CF                  		rst	8
(1) 1153/     54B : E6 7F               		and	01111111b
(1) 1154/     54D : FD 77 03            		ld	(iy+trk_TickSet),a
(1) 1155/     550 : 7E                  		ld	a,(hl)			; Read and temporally
(1) 1156/     551 : 23                  		inc	hl			; grab it's pointers
(1) 1157/     552 : 4E                  		ld	c,(hl)
(1) 1158/     553 : 23                  		inc	hl
(1) 1159/     554 : 6E                  		ld	l,(hl)
(1) 1160/     555 : 61                  		ld	h,c
(1) 1161/     556 : 11 A4 1F            		ld	de,headerOut
(1) 1162/     559 : 0E 0E               		ld	c,0Eh
(1) 1163/     55B : CD E7 10            		call	transferRom		; ** ROM access **
(1) 1164/     55E : DD 21 B1 1F         		ld	ix,headerOut_e-1	; Read temp header BACKWARDS
(1) 1165/     562 : CF                  		rst	8
(1) 1166/     563 :                     
(1) 1167/     563 :                     	; headerOut:
(1) 1168/     563 :                     	; dc.w numof_chnls
(1) 1169/     563 :                     	; dc.l .blk,.pat,.ins
(1) 1170/     563 :                     	; *** READING BACKWARDS
(1) 1171/     563 : CD A0 05            		call	.grab_rhead		; Instrument data
(1) 1172/     566 : FD 75 20            		ld	(iy+trk_RomInst),l
(1) 1173/     569 : FD 74 21            		ld	(iy+(trk_RomInst+1)),h
(1) 1174/     56C : FD 70 22            		ld	(iy+(trk_RomInst+2)),b
(1) 1175/     56F : FD 36 15 80         		ld	(iy+trk_BankIns),80h	; Reset instrument banking
(1) 1176/     573 : E7                  		rst	20h
(1) 1177/     574 : CF                  		rst	8
(1) 1178/     575 : CD A0 05            		call	.grab_rhead		; Pattern heads
(1) 1179/     578 : FD 75 1D            		ld	(iy+trk_RomPatt),l	; Save ROM patt base
(1) 1180/     57B : FD 74 1E            		ld	(iy+(trk_RomPatt+1)),h
(1) 1181/     57E : FD 70 1F            		ld	(iy+(trk_RomPatt+2)),b
(1) 1182/     581 : FD 36 16 80         		ld	(iy+trk_BankHeads),80h	; Reset pattern banking
(1) 1183/     585 : CF                  		rst	8
(1) 1184/     586 : CD A0 05            		call	.grab_rhead		; Block data
(1) 1185/     589 : FD 75 23            		ld	(iy+trk_RomBlks),l	; Save ROM patt base
(1) 1186/     58C : FD 74 24            		ld	(iy+(trk_RomBlks+1)),h
(1) 1187/     58F : FD 70 25            		ld	(iy+(trk_RomBlks+2)),b
(1) 1188/     592 : FD 36 17 80         		ld	(iy+trk_BankBlk),80h	; Reset pattern banking
(1) 1189/     596 : CF                  		rst	8
(1) 1190/     597 : DD 7E 00            		ld	a,(ix)			; dc.w numof_chnls
(1) 1191/     59A : FD 77 18            		ld	(iy+trk_MaxChnl),a
(1) 1192/     59D : C3 2E 04            		jp	.set_track
(1) 1193/     5A0 :                     
(1) 1194/     5A0 :                     ; Read 68K pointer:
(1) 1195/     5A0 :                     ; hl - 00xxxx
(1) 1196/     5A0 :                     ;  b - xx0000
(1) 1197/     5A0 :                     .grab_rhead:
(1) 1198/     5A0 : DD 6E 00            		ld	l,(ix)
(1) 1199/     5A3 : DD 2B               		dec	ix
(1) 1200/     5A5 : DD 66 00            		ld	h,(ix)
(1) 1201/     5A8 : CF                  		rst	8
(1) 1202/     5A9 : DD 2B               		dec	ix
(1) 1203/     5AB : DD 46 00            		ld	b,(ix)
(1) 1204/     5AE : DD 2B               		dec	ix
(1) 1205/     5B0 :                     ; 		ld	c,(ix)
(1) 1206/     5B0 : DD 2B               		dec	ix
(1) 1207/     5B2 : C9                  		ret
(1) 1208/     5B3 :                     
(1) 1209/     5B3 :                     ; ----------------------------------------
(1) 1210/     5B3 :                     ; Reset tracker channels
(1) 1211/     5B3 :                     ;
(1) 1212/     5B3 :                     ; iy - Track buffer
(1) 1213/     5B3 :                     ;
(1) 1214/     5B3 :                     ; Breaks:
(1) 1215/     5B3 :                     ; ix
(1) 1216/     5B3 :                     ; ----------------------------------------
(1) 1217/     5B3 :                     
(1) 1218/     5B3 :                     ; ----------------------------------------
(1) 1219/     5B3 :                     ; Reset tracker channels
(1) 1220/     5B3 :                     ;
(1) 1221/     5B3 :                     ; iy - Track buffer
(1) 1222/     5B3 :                     ;
(1) 1223/     5B3 :                     ; Breaks:
(1) 1224/     5B3 :                     ; b ,de,hl,ix
(1) 1225/     5B3 :                     ; ----------------------------------------
(1) 1226/     5B3 :                     
(1) 1227/     5B3 :                     track_out:
(1) 1228/     5B3 : FD E5               		push	iy
(1) 1229/     5B5 : E1                  		pop	hl
(1) 1230/     5B6 : DD 21 00 1E         		ld	ix,trkChnls
(1) 1231/     5BA : CF                  		rst	8
(1) 1232/     5BB : 11 26 00            		ld	de,trk_ChnIndx
(1) 1233/     5BE : 19                  		add	hl,de
(1) 1234/     5BF : 06 1A               		ld	b,MAX_TRKINDX
(1) 1235/     5C1 :                     .indx_del:
(1) 1236/     5C1 : 7E                  		ld	a,(hl)
(1) 1237/     5C2 : B7                  		or	a
(1) 1238/     5C3 : 28 2A               		jr	z,.nothin
(1) 1239/     5C5 : CF                  		rst	8
(1) 1240/     5C6 : DD E5               		push	ix
(1) 1241/     5C8 : E6 1F               		and	00011111b
(1) 1242/     5CA : 87                  		add	a,a
(1) 1243/     5CB : 87                  		add	a,a
(1) 1244/     5CC : 87                  		add	a,a
(1) 1245/     5CD : 5F                  		ld	e,a
(1) 1246/     5CE : CF                  		rst	8
(1) 1247/     5CF : DD 19               		add	ix,de
(1) 1248/     5D1 : AF                  		xor	a
(1) 1249/     5D2 : DD 36 02 FE         		ld	(ix+chnl_Note),-2
(1) 1250/     5D6 : DD 36 00 01         		ld	(ix+chnl_Flags),1
(1) 1251/     5DA : DD 36 04 40         		ld	(ix+chnl_Vol),64
(1) 1252/     5DE : DD 77 05            		ld	(ix+chnl_EffId),a
(1) 1253/     5E1 : CF                  		rst	8
(1) 1254/     5E2 : DD 77 06            		ld	(ix+chnl_EffArg),a
(1) 1255/     5E5 : DD 77 03            		ld	(ix+chnl_Ins),a
(1) 1256/     5E8 : DD 77 07            		ld	(ix+chnl_Type),a
(1) 1257/     5EB : DD E1               		pop	ix
(1) 1258/     5ED : 77                  		ld	(hl),a
(1) 1259/     5EE : 00                  		nop
(1) 1260/     5EF :                     .nothin:
(1) 1261/     5EF : 23                  		inc	hl
(1) 1262/     5F0 : 10 CF               		djnz	.indx_del
(1) 1263/     5F2 : 3E 01               		ld	a,1
(1) 1264/     5F4 : 32 87 1F            		ld	(marsUpd),a
(1) 1265/     5F7 : C9                  		ret
(1) 1266/     5F8 :                     
(1) 1267/     5F8 :                     ; ----------------------------------------
(1) 1268/     5F8 :                     ; Load tracklist from ROM
(1) 1269/     5F8 :                     ;
(1) 1270/     5F8 :                     ; a - SeqID
(1) 1271/     5F8 :                     ; ----------------------------------------
(1) 1272/     5F8 :                     
(1) 1273/     5F8 :                     get_RomTrcks:
(1) 1274/     5F8 : E5                  		push	hl
(1) 1275/     5F9 : 87                  		add	a,a
(1) 1276/     5FA : 87                  		add	a,a
(1) 1277/     5FB : 16 00               		ld	d,0
(1) 1278/     5FD : 5F                  		ld	e,a
(1) 1279/     5FE : 21 1C 00            		ld	hl,gemaMstrListPos
(1) 1280/     601 : 23                  		inc	hl
(1) 1281/     602 : 7E                  		ld	a,(hl)		; $00xx0000
(1) 1282/     603 : 23                  		inc	hl
(1) 1283/     604 : 4E                  		ld	c,(hl)		; $0000xx00
(1) 1284/     605 : 23                  		inc	hl
(1) 1285/     606 : 6E                  		ld	l,(hl)		; $000000xx
(1) 1286/     607 : CF                  		rst	8
(1) 1287/     608 : 61                  		ld	h,c
(1) 1288/     609 : 19                  		add	hl,de
(1) 1289/     60A : CE 00               		adc	a,0
(1) 1290/     60C : EB                  		ex	hl,de
(1) 1291/     60D : 21 F7 1A            		ld	hl,trkInfoCach
(1) 1292/     610 : DD 4E 14            		ld	c,(ix+trk_Priority)
(1) 1293/     613 : 0D                  		dec	c
(1) 1294/     614 : CB 21               		sla	c		; * 4
(1) 1295/     616 : CB 21               		sla	c
(1) 1296/     618 : 06 00               		ld	b,0
(1) 1297/     61A : 09                  		add	hl,bc
(1) 1298/     61B : EB                  		ex	hl,de
(1) 1299/     61C : 01 04 00            		ld	bc,4
(1) 1300/     61F : CD E7 10            		call	transferRom	; *** ROM ACCESS ***
(1) 1301/     622 : E1                  		pop	hl
(1) 1302/     623 : C9                  		ret
(1) 1303/     624 :                     
(1) 1304/     624 :                     ; ============================================================
(1) 1305/     624 :                     ; --------------------------------------------------------
(1) 1306/     624 :                     ; Process track channels to the sound chips
(1) 1307/     624 :                     ; --------------------------------------------------------
(1) 1308/     624 :                     
(1) 1309/     624 :                     set_chips:
(1) 1310/     624 : E7                  		rst	20h			; Refill wave
(1) 1311/     625 : CD C6 10            		call	get_tick
(1) 1312/     628 : FD 21 91 15         		ld	iy,nikona_BuffList
(1) 1313/     62C :                     .trk_buffrs:
(1) 1314/     62C : FD 7E 00            		ld	a,(iy)
(1) 1315/     62F : FE FF               		cp	-1
(1) 1316/     631 : 28 0F               		jr	z,proc_chips
(1) 1317/     633 : CF                  		rst	8
(1) 1318/     634 : FD E5               		push	iy
(1) 1319/     636 : CD 6B 06            		call	tblbuff_read
(1) 1320/     639 : FD E1               		pop	iy
(1) 1321/     63B : 11 08 00            		ld	de,MAX_BUFFNTRY
(1) 1322/     63E : FD 19               		add	iy,de
(1) 1323/     640 : 18 EA               		jr	.trk_buffrs
(1) 1324/     642 :                     proc_chips:
(1) 1325/     642 : E7                  		rst	20h			; Refill wave
(1) 1326/     643 : CF                  		rst	8
(1) 1327/     644 : FD 21 E1 18         		ld	iy,tblPSGN		; PSG Noise
(1) 1328/     648 : CD 6A 08            		call	dtbl_singl
(1) 1329/     64B : CF                  		rst	8
(1) 1330/     64C : FD 21 97 18         		ld	iy,tblPSG		; PSG Squares
(1) 1331/     650 : CD 54 08            		call	dtbl_multi
(1) 1332/     653 : CF                  		rst	8
(1) 1333/     654 : FD 21 F9 18         		ld	iy,tblFM		; FM/FM3/DAC
(1) 1334/     658 : CD 54 08            		call	dtbl_multi
(1) 1335/     65B : CF                  		rst	8
(1) 1336/     65C : FD 21 8B 19         		ld	iy,tblPCM		; SEGA CD PCM
(1) 1337/     660 : CD 54 08            		call	dtbl_multi
(1) 1338/     663 : CF                  		rst	8
(1) 1339/     664 : FD 21 4D 1A         		ld	iy,tblPWM		; 32X PWM
(1) 1340/     668 : C3 54 08            		jp	dtbl_multi
(1) 1341/     66B :                     
(1) 1342/     66B :                     ; ----------------------------------------
(1) 1343/     66B :                     ; Read current track
(1) 1344/     66B :                     ;
(1) 1345/     66B :                     ; iy - Buffer
(1) 1346/     66B :                     tblbuff_read:
(1) 1347/     66B : FD 6E 00            		ld	l,(iy)
(1) 1348/     66E : FD 66 01            		ld	h,(iy+1)
(1) 1349/     671 : CD C6 10            		call	get_tick
(1) 1350/     674 : CF                  		rst	8
(1) 1351/     675 : E5                  		push	hl
(1) 1352/     676 : FD E1               		pop	iy
(1) 1353/     678 : FD 46 00            		ld	b,(iy+trk_Status)	; bit7: Track active?
(1) 1354/     67B : CB 78               		bit	7,b
(1) 1355/     67D : C8                  		ret	z
(1) 1356/     67E : 78                  		ld	a,b			; trk_Status == -1?
(1) 1357/     67F : FE FF               		cp	-1
(1) 1358/     681 : C2 8B 06            		jp	nz,.track_cont
(1) 1359/     684 : CD B3 05            		call	track_out
(1) 1360/     687 : FD 36 00 00         		ld	(iy+trk_Status),0
(1) 1361/     68B :                     .track_cont:
(1) 1362/     68B : E7                  		rst	20h
(1) 1363/     68C : FD E5               		push	iy
(1) 1364/     68E : E1                  		pop	hl
(1) 1365/     68F : CF                  		rst	8
(1) 1366/     690 : DD 21 00 1E         		ld	ix,trkChnls
(1) 1367/     694 : 11 26 00            		ld	de,trk_ChnIndx
(1) 1368/     697 : 19                  		add	hl,de
(1) 1369/     698 : FD 7E 18            		ld	a,(iy+trk_MaxChnl)	; If zero, read ALL indexes (lazy mode)
(1) 1370/     69B : B7                  		or	a
(1) 1371/     69C : 20 02               		jr	nz,.valid
(1) 1372/     69E : 06 1A               		ld	b,MAX_TRKINDX
(1) 1373/     6A0 :                     .valid:
(1) 1374/     6A0 : CF                  		rst	8
(1) 1375/     6A1 : 47                  		ld	b,a
(1) 1376/     6A2 :                     .next_indx:
(1) 1377/     6A2 : 7E                  		ld	a,(hl)			; Read index
(1) 1378/     6A3 : B7                  		or	a
(1) 1379/     6A4 : 20 0B               		jr	nz,.has_indx		; non-zero: valid
(1) 1380/     6A6 : C5                  		push	bc			; waste CPU to
(1) 1381/     6A7 : 06 04               		ld	b,4			; ** wave sync
(1) 1382/     6A9 : 00                  		nop
(1) 1383/     6AA : 00                  		nop
(1) 1384/     6AB : CF                  		rst	8
(1) 1385/     6AC : 10 FE               		djnz	$
(1) 1386/     6AE : C1                  		pop	bc
(1) 1387/     6AF : 18 1C               		jr	.no_indx
(1) 1388/     6B1 :                     .has_indx:
(1) 1389/     6B1 : E6 1F               		and	00011111b
(1) 1390/     6B3 : 87                  		add	a,a
(1) 1391/     6B4 : 87                  		add	a,a
(1) 1392/     6B5 : 87                  		add	a,a
(1) 1393/     6B6 : CF                  		rst	8
(1) 1394/     6B7 : 16 00               		ld	d,0
(1) 1395/     6B9 : 5F                  		ld	e,a
(1) 1396/     6BA : C5                  		push	bc
(1) 1397/     6BB : E5                  		push	hl
(1) 1398/     6BC : DD E5               		push	ix
(1) 1399/     6BE : DD 19               		add	ix,de
(1) 1400/     6C0 : DD 7E 00            		ld	a,(ix)		; Read evin
(1) 1401/     6C3 : E6 0F               		and	00001111b
(1) 1402/     6C5 : C4 D5 06            		call	nz,.do_chip	; Call if non-zero
(1) 1403/     6C8 : CF                  		rst	8
(1) 1404/     6C9 : DD E1               		pop	ix
(1) 1405/     6CB : E1                  		pop	hl
(1) 1406/     6CC : C1                  		pop	bc
(1) 1407/     6CD :                     .no_indx:
(1) 1408/     6CD : 23                  		inc	hl
(1) 1409/     6CE : 10 D2               		djnz	.next_indx
(1) 1410/     6D0 : FD CB 00 9E         		res	3,(iy+trk_Status)	; RESET Volume update bit
(1) 1411/     6D4 : C9                  		ret
(1) 1412/     6D5 :                     
(1) 1413/     6D5 :                     ; ----------------------------------------
(1) 1414/     6D5 :                     ; iy - Track buffer
(1) 1415/     6D5 :                     ; ix - Current channel
(1) 1416/     6D5 :                     
(1) 1417/     6D5 :                     .do_chip:
(1) 1418/     6D5 : DD 7E 03            		ld	a,(ix+chnl_Ins)		; Check intrument type FIRST
(1) 1419/     6D8 : B7                  		or	a
(1) 1420/     6D9 : C8                  		ret	z			; If 0 == stop
(1) 1421/     6DA : CF                  		rst	8
(1) 1422/     6DB : 3D                  		dec	a			; inst-1
(1) 1423/     6DC : E6 7F               		and	01111111b
(1) 1424/     6DE : 21 03 1B            		ld	hl,instListOut		; temporal storage for instrument
(1) 1425/     6E1 : 16 00               		ld	d,0
(1) 1426/     6E3 : FD 5E 14            		ld	e,(iy+trk_Priority)
(1) 1427/     6E6 : 1D                  		dec	e			; -1
(1) 1428/     6E7 : CB 03               		rlc	e
(1) 1429/     6E9 : CB 03               		rlc	e
(1) 1430/     6EB : CB 03               		rlc	e
(1) 1431/     6ED : 19                  		add	hl,de
(1) 1432/     6EE : FD 4E 15            		ld	c,(iy+trk_BankIns)	; c - current intrument loaded
(1) 1433/     6F1 : CB 79               		bit	7,c			; First time?
(1) 1434/     6F3 : 20 03               		jr	nz,.first_ins
(1) 1435/     6F5 : B9                  		cp	c			; SAME instrument data?
(1) 1436/     6F6 : 28 24               		jr	z,.keep_it
(1) 1437/     6F8 :                     .first_ins:
(1) 1438/     6F8 : E5                  		push	hl
(1) 1439/     6F9 : FD 77 15            		ld	(iy+trk_BankIns),a	; Save inst number
(1) 1440/     6FC : 07                  		rlca
(1) 1441/     6FD : 07                  		rlca
(1) 1442/     6FE : 07                  		rlca
(1) 1443/     6FF : 47                  		ld	b,a
(1) 1444/     700 : E6 F8               		and	11111000b
(1) 1445/     702 : 4F                  		ld	c,a
(1) 1446/     703 : 78                  		ld	a,b
(1) 1447/     704 : E6 07               		and	00000111b
(1) 1448/     706 : CF                  		rst	8
(1) 1449/     707 : 47                  		ld	b,a
(1) 1450/     708 : EB                  		ex	hl,de
(1) 1451/     709 : FD 6E 20            		ld	l,(iy+trk_RomInst)
(1) 1452/     70C : FD 66 21            		ld	h,(iy+(trk_RomInst+1))
(1) 1453/     70F : FD 7E 22            		ld	a,(iy+(trk_RomInst+2))
(1) 1454/     712 : 09                  		add	hl,bc
(1) 1455/     713 : CE 00               		adc	a,0
(1) 1456/     715 : 01 08 00            		ld	bc,8			; 8 bytes
(1) 1457/     718 : CD E7 10            		call	transferRom		; ** ROM access **
(1) 1458/     71B : E1                  		pop	hl
(1) 1459/     71C :                     .keep_it:
(1) 1460/     71C : E5                  		push	hl			; <-- save hl
(1) 1461/     71D : CD 3A 07            		call	.grab_link
(1) 1462/     720 : D1                  		pop	de			; --> recover as de
(1) 1463/     721 :                     	; hl - current table
(1) 1464/     721 :                     	; de - instrument data
(1) 1465/     721 : FE FF               		cp	-1			; Found any link?
(1) 1466/     723 : C8                  		ret	z
(1) 1467/     724 : 23                  		inc	hl			; Skip link
(1) 1468/     725 : 23                  		inc	hl
(1) 1469/     726 : FD 7E 14            		ld	a,(iy+trk_Priority)
(1) 1470/     729 : 77                  		ld	(hl),a			; Write priority level
(1) 1471/     72A : 23                  		inc	hl
(1) 1472/     72B : FD 7E 0E            		ld	a,(iy+trk_VolMaster)
(1) 1473/     72E : 77                  		ld	(hl),a			; Write current MASTER volume
(1) 1474/     72F : 01 0D 00            		ld	bc,10h-3		; Move to instr data
(1) 1475/     732 : 09                  		add	hl,bc
(1) 1476/     733 : EB                  		ex	hl,de			; <-- swap for ldir
(1) 1477/     734 : 01 08 00            		ld	bc,8
(1) 1478/     737 : ED B0               		ldir				; COPYPASTE instr data from temporal
(1) 1479/     739 : C9                  		ret
(1) 1480/     73A :                     
(1) 1481/     73A :                     ; ----------------------------------------
(1) 1482/     73A :                     ; Search for a linked channel on the
(1) 1483/     73A :                     ; chip table
(1) 1484/     73A :                     ;
(1) 1485/     73A :                     ; Input:
(1) 1486/     73A :                     ; iy - Track buffer
(1) 1487/     73A :                     ; ix - Current channel
(1) 1488/     73A :                     ; hl - Intrument data
(1) 1489/     73A :                     ;
(1) 1490/     73A :                     ; Returns:
(1) 1491/     73A :                     ; hl - Channel table to use
(1) 1492/     73A :                     ;  a - Return value:
(1) 1493/     73A :                     ;       0 - Found
(1) 1494/     73A :                     ;      -1 - Not found
(1) 1495/     73A :                     ; ----------------------------------------
(1) 1496/     73A :                     
(1) 1497/     73A :                     .grab_link:
(1) 1498/     73A : 7E                  		ld	a,(hl)			; Check INSTRUMENT type
(1) 1499/     73B : E6 F0               		and	11110000b		; Filter bits
(1) 1500/     73D : 5F                  		ld	e,a			; e - NEW chip
(1) 1501/     73E : DD 7E 01            		ld	a,(ix+chnl_Chip)	; a - our current chip
(1) 1502/     741 : E6 F0               		and	11110000b		; Filter bits too.
(1) 1503/     743 : 28 6A               		jr	z,.new_chip		; If 0: It's a NEW chip
(1) 1504/     745 : BB                  		cp 	e			; Same chip as NEW?
(1) 1505/     746 : 28 10               		jr	z,.srch_link		; then re-use the slot
(1) 1506/     748 : CF                  		rst	8
(1) 1507/     749 : 57                  		ld	d,a			; d - Chip to silence
(1) 1508/     74A : D5                  		push	de
(1) 1509/     74B : CD 58 07            		call	.srch_link		; Search our link (first)
(1) 1510/     74E : D1                  		pop	de
(1) 1511/     74F : FE FF               		cp	-1
(1) 1512/     751 : C8                  		ret	z
(1) 1513/     752 : CF                  		rst	8
(1) 1514/     753 : CD 39 08            		call	.reset_link
(1) 1515/     756 : 18 57               		jr	.new_chip
(1) 1516/     758 :                     
(1) 1517/     758 :                     ; ----------------------------------------
(1) 1518/     758 :                     ; ** RELINK **
(1) 1519/     758 :                     ; e - Our current chip
(1) 1520/     758 :                     .srch_link:
(1) 1521/     758 : CD 1F 08            		call	.pick_tbl	; Pick chip table in hl
(1) 1522/     75B : DD E5               		push	ix		; copy ix to bc
(1) 1523/     75D : C1                  		pop	bc
(1) 1524/     75E : B7                  		or	a
(1) 1525/     75F : FA 9F 07            		jp	m,.singl_link
(1) 1526/     762 :                     .srch_lloop:
(1) 1527/     762 : 7E                  		ld	a,(hl)		; Read LSB
(1) 1528/     763 : FE FF               		cp	-1		; If -1, return -1
(1) 1529/     765 : 28 45               		jr	z,.refill
(1) 1530/     767 : B9                  		cp	c
(1) 1531/     768 : 20 07               		jr	nz,.invldl
(1) 1532/     76A : CF                  		rst	8
(1) 1533/     76B : 23                  		inc	hl
(1) 1534/     76C : 7E                  		ld	a,(hl)
(1) 1535/     76D : 2B                  		dec	hl
(1) 1536/     76E : B8                  		cp	b
(1) 1537/     76F : 28 08               		jr	z,.reroll
(1) 1538/     771 :                     .invldl:
(1) 1539/     771 : D5                  		push	de
(1) 1540/     772 : 11 18 00            		ld	de,MAX_TBLSIZE
(1) 1541/     775 :                     ; 		rst	8
(1) 1542/     775 :                     ; 		nop	; wave sync *
(1) 1543/     775 : 19                  		add	hl,de
(1) 1544/     776 : D1                  		pop	de
(1) 1545/     777 : 18 E9               		jr	.srch_lloop
(1) 1546/     779 :                     .reroll:
(1) 1547/     779 :                     	; *** Special re-roll check ***
(1) 1548/     779 : E5                  		push	hl
(1) 1549/     77A : 01 04 00            		ld	bc,4		; <-- fake iy+04h
(1) 1550/     77D : 09                  		add	hl,bc
(1) 1551/     77E : CF                  		rst	8
(1) 1552/     77F : 4E                  		ld	c,(hl)		; c - ID
(1) 1553/     780 : E1                  		pop	hl
(1) 1554/     781 : 7B                  		ld	a,e
(1) 1555/     782 : FE 80               		cp	80h		; PSG?
(1) 1556/     784 : 28 02               		jr	z,.chk_psg
(1) 1557/     786 :                     ; 		cp	0A0h		; FM normal?
(1) 1558/     786 :                     ; 		jr	z,.chk_fm
(1) 1559/     786 : 18 22               		jr	.rnot_psg
(1) 1560/     788 :                     .chk_psg:
(1) 1561/     788 : 3A 83 1F            		ld	a,(psgHatMode)
(1) 1562/     78B : E6 03               		and	011b
(1) 1563/     78D : FE 03               		cp	011b
(1) 1564/     78F : 20 19               		jr	nz,.rnot_psg
(1) 1565/     791 : 79                  		ld	a,c
(1) 1566/     792 : FE 02               		cp	2
(1) 1567/     794 : 20 14               		jr	nz,.rnot_psg
(1) 1568/     796 : CF                  		rst	8
(1) 1569/     797 : 16 80               		ld	d,80h		; Set PSG silence
(1) 1570/     799 : CD 39 08            		call	.reset_link	; on PSG3
(1) 1571/     79C : C3 1C 08            		jp	.set_asfull
(1) 1572/     79F :                     
(1) 1573/     79F :                     ; ----------------------
(1) 1574/     79F :                     ; PSGN/FM3/FM6
(1) 1575/     79F :                     .singl_link:
(1) 1576/     79F : 23                  		inc	hl			; Read MSB first
(1) 1577/     7A0 : 7E                  		ld	a,(hl)
(1) 1578/     7A1 : 2B                  		dec	hl
(1) 1579/     7A2 : CF                  		rst	8
(1) 1580/     7A3 : B8                  		cp	b			; MSB match?
(1) 1581/     7A4 : 20 06               		jr	nz,.refill
(1) 1582/     7A6 : 7E                  		ld	a,(hl)			; Read LSB
(1) 1583/     7A7 : B9                  		cp	c
(1) 1584/     7A8 : 20 02               		jr	nz,.refill
(1) 1585/     7AA :                     ; ----------------------
(1) 1586/     7AA :                     .rnot_psg:
(1) 1587/     7AA : AF                  		xor	a
(1) 1588/     7AB : C9                  		ret
(1) 1589/     7AC :                     ; ***
(1) 1590/     7AC :                     .refill:
(1) 1591/     7AC : DD 5E 01            		ld	e,(ix+chnl_Chip)
(1) 1592/     7AF :                     
(1) 1593/     7AF :                     ; ----------------------------------------
(1) 1594/     7AF :                     ; *** NEW CHIP ***
(1) 1595/     7AF :                     ; e - Chip to set
(1) 1596/     7AF :                     .new_chip:
(1) 1597/     7AF : 7B                  		ld	a,e			; Read NEW chip
(1) 1598/     7B0 : B7                  		or	a			; If non-minus, exit.
(1) 1599/     7B1 : F0                  		ret	p
(1) 1600/     7B2 : CD 1F 08            		call	.pick_tbl
(1) 1601/     7B5 : CF                  		rst	8
(1) 1602/     7B6 : FD 4E 14            		ld	c,(iy+trk_Priority)	; c - OUR priority level
(1) 1603/     7B9 : B7                  		or	a
(1) 1604/     7BA : FA 0A 08            		jp	m,.singl_free
(1) 1605/     7BD : E5                  		push	hl			; Backup START table
(1) 1606/     7BE :                     ; PASS 1
(1) 1607/     7BE :                     .srch_free:
(1) 1608/     7BE : 7E                  		ld	a,(hl)			; Read LSB
(1) 1609/     7BF : FE FF               		cp	-1			; If -1, return -1
(1) 1610/     7C1 : 28 0B               		jr	z,.pass_2
(1) 1611/     7C3 : 23                  		inc	hl
(1) 1612/     7C4 : 46                  		ld	b,(hl)			; Read MSB
(1) 1613/     7C5 : 2B                  		dec	hl
(1) 1614/     7C6 :                     ; 		nop	; wave sync
(1) 1615/     7C6 :                     ; 		nop
(1) 1616/     7C6 :                     ; 		rst	8
(1) 1617/     7C6 :                     ; 		nop
(1) 1618/     7C6 :                     ; 		nop
(1) 1619/     7C6 : B0                  		or	b
(1) 1620/     7C7 : 28 24               		jr	z,.new_link_z
(1) 1621/     7C9 : CD E6 07            		call	.nextsrch_tbl
(1) 1622/     7CC : 18 F0               		jr	.srch_free
(1) 1623/     7CE :                     
(1) 1624/     7CE :                     ; PASS 2
(1) 1625/     7CE :                     ; Rewrite mode
(1) 1626/     7CE :                     .pass_2:
(1) 1627/     7CE : E1                  		pop	hl
(1) 1628/     7CF :                     .next_prio:
(1) 1629/     7CF : 7E                  		ld	a,(hl)		; Read LSB
(1) 1630/     7D0 : FE FF               		cp	-1		; If -1, return -1
(1) 1631/     7D2 : C8                  		ret	z
(1) 1632/     7D3 : 23                  		inc	hl
(1) 1633/     7D4 : 23                  		inc	hl
(1) 1634/     7D5 : 7E                  		ld	a,(hl)		; Read priority
(1) 1635/     7D6 : 2B                  		dec	hl
(1) 1636/     7D7 : 2B                  		dec	hl
(1) 1637/     7D8 : B9                  		cp	c
(1) 1638/     7D9 : 28 16               		jr	z,.new_link_o
(1) 1639/     7DB : 38 14               		jr	c,.new_link_o
(1) 1640/     7DD : B7                  		or	a
(1) 1641/     7DE : 28 11               		jr	z,.new_link_o
(1) 1642/     7E0 : CF                  		rst	8
(1) 1643/     7E1 : CD E6 07            		call	.nextsrch_tbl
(1) 1644/     7E4 : 18 E9               		jr	.next_prio
(1) 1645/     7E6 :                     .nextsrch_tbl:
(1) 1646/     7E6 : D5                  		push	de
(1) 1647/     7E7 : 11 18 00            		ld	de,MAX_TBLSIZE
(1) 1648/     7EA : 19                  		add	hl,de
(1) 1649/     7EB : D1                  		pop	de
(1) 1650/     7EC :                     ; 		nop	; wave sync
(1) 1651/     7EC :                     ; 		nop
(1) 1652/     7EC :                     ; 		rst	8
(1) 1653/     7EC :                     ; 		nop
(1) 1654/     7EC :                     ; 		nop
(1) 1655/     7EC : C9                  		ret
(1) 1656/     7ED :                     .new_link_z:
(1) 1657/     7ED : 33                  		inc	sp		; skip backup
(1) 1658/     7EE : 33                  		inc	sp
(1) 1659/     7EF : 18 08               		jr	.new_link
(1) 1660/     7F1 :                     
(1) 1661/     7F1 :                     ; OVERWRITE link
(1) 1662/     7F1 :                     .new_link_o:
(1) 1663/     7F1 : E5                  		push	hl
(1) 1664/     7F2 : DD 56 01            		ld	d,(ix+chnl_Chip)
(1) 1665/     7F5 : CD 39 08            		call	.reset_link
(1) 1666/     7F8 : E1                  		pop	hl
(1) 1667/     7F9 :                     ; NEW link
(1) 1668/     7F9 :                     .new_link:
(1) 1669/     7F9 : CF                  		rst	8
(1) 1670/     7FA : 23                  		inc	hl
(1) 1671/     7FB : 23                  		inc	hl
(1) 1672/     7FC :                     ; hl+2
(1) 1673/     7FC :                     .l_hiprio:
(1) 1674/     7FC : DD 73 01            		ld	(ix+chnl_Chip),e
(1) 1675/     7FF : DD E5               		push	ix
(1) 1676/     801 : D1                  		pop	de
(1) 1677/     802 : 71                  		ld	(hl),c		; write priority
(1) 1678/     803 : 2B                  		dec	hl
(1) 1679/     804 : CF                  		rst	8
(1) 1680/     805 : 72                  		ld 	(hl),d		; MSB
(1) 1681/     806 : 2B                  		dec	hl
(1) 1682/     807 : 73                  		ld	(hl),e		; LSB
(1) 1683/     808 : AF                  		xor	a
(1) 1684/     809 : C9                  		ret
(1) 1685/     80A :                     
(1) 1686/     80A :                     ; Single slot
(1) 1687/     80A :                     ; c - priority
(1) 1688/     80A :                     ; e - chip
(1) 1689/     80A :                     .singl_free:
(1) 1690/     80A : 46                  		ld	b,(hl)
(1) 1691/     80B : 23                  		inc	hl
(1) 1692/     80C : 7E                  		ld	a,(hl)
(1) 1693/     80D : 23                  		inc	hl
(1) 1694/     80E : B0                  		or	b
(1) 1695/     80F : 28 EB               		jr	z,.l_hiprio
(1) 1696/     811 : CF                  		rst	8
(1) 1697/     812 : 7E                  		ld	a,(hl)
(1) 1698/     813 : B9                  		cp	c
(1) 1699/     814 : 28 E6               		jr	z,.l_hiprio
(1) 1700/     816 : 38 E4               		jr	c,.l_hiprio		; PRIORITY
(1) 1701/     818 : B7                  		or	a
(1) 1702/     819 : 28 E1               		jr	z,.l_hiprio
(1) 1703/     81B : CF                  		rst	8
(1) 1704/     81C :                     .set_asfull:
(1) 1705/     81C : 3E FF               		ld	a,-1			; Return -1, can't use instrument.
(1) 1706/     81E : C9                  		ret
(1) 1707/     81F :                     
(1) 1708/     81F :                     ; Pick chip table
(1) 1709/     81F :                     ; In:
(1) 1710/     81F :                     ;  a - ID
(1) 1711/     81F :                     ;
(1) 1712/     81F :                     ; Out:
(1) 1713/     81F :                     ;  a - Special bit + ID
(1) 1714/     81F :                     ;
(1) 1715/     81F :                     ; hl - Table
(1) 1716/     81F :                     .pick_tbl:
(1) 1717/     81F : D5                  		push	de
(1) 1718/     820 : 0F                  		rrca
(1) 1719/     821 : 0F                  		rrca
(1) 1720/     822 : 0F                  		rrca
(1) 1721/     823 : 0F                  		rrca
(1) 1722/     824 : E6 07               		and	00000111b
(1) 1723/     826 : 87                  		add	a,a
(1) 1724/     827 : 21 87 18            		ld	hl,tblList
(1) 1725/     82A : E5                  		push	hl
(1) 1726/     82B : 16 00               		ld	d,0
(1) 1727/     82D : 5F                  		ld	e,a
(1) 1728/     82E : 19                  		add	hl,de
(1) 1729/     82F : 5E                  		ld	e,(hl)
(1) 1730/     830 : 23                  		inc	hl
(1) 1731/     831 : 7E                  		ld	a,(hl)
(1) 1732/     832 : 57                  		ld	d,a
(1) 1733/     833 : CB BA               		res	7,d
(1) 1734/     835 : E1                  		pop	hl
(1) 1735/     836 : 19                  		add	hl,de
(1) 1736/     837 : D1                  		pop	de
(1) 1737/     838 : C9                  		ret
(1) 1738/     839 :                     
(1) 1739/     839 :                     ; d - Silence chip
(1) 1740/     839 :                     ;
(1) 1741/     839 :                     ; Uses:
(1) 1742/     839 :                     ; bc
(1) 1743/     839 :                     .reset_link:
(1) 1744/     839 : CF                  		rst	8
(1) 1745/     83A : 36 00               		ld	(hl),0			; Delete link
(1) 1746/     83C : 23                  		inc	hl
(1) 1747/     83D : 36 00               		ld	(hl),0
(1) 1748/     83F : 23                  		inc	hl
(1) 1749/     840 : 72                  		ld	(hl),d			; Set "silence" chip ID.
(1) 1750/     841 : 23                  		inc	hl
(1) 1751/     842 : 36 00               		ld	(hl),0			; Clear master volume
(1) 1752/     844 : 01 05 00            		ld	bc,8-3			; Go to 08h
(1) 1753/     847 : 09                  		add	hl,bc
(1) 1754/     848 : 06 04               		ld	b,8/2
(1) 1755/     84A :                     .clrfull:
(1) 1756/     84A : 36 00               		ld	(hl),0			; Reset settings 08-0Bh
(1) 1757/     84C : 23                  		inc	hl
(1) 1758/     84D : 36 00               		ld	(hl),0
(1) 1759/     84F : 23                  		inc	hl
(1) 1760/     850 : CF                  		rst	8
(1) 1761/     851 : 10 F7               		djnz	.clrfull
(1) 1762/     853 : C9                  		ret
(1) 1763/     854 :                     
(1) 1764/     854 :                     ; ============================================
(1) 1765/     854 :                     ; ----------------------------------------
(1) 1766/     854 :                     ; Process chip using it's table
(1) 1767/     854 :                     ;
(1) 1768/     854 :                     ; iy - table to read
(1) 1769/     854 :                     ; ----------------------------------------
(1) 1770/     854 :                     
(1) 1771/     854 :                     dtbl_multi:
(1) 1772/     854 : FD 7E 00            		ld	a,(iy)
(1) 1773/     857 : FE FF               		cp	-1
(1) 1774/     859 : C8                  		ret	z
(1) 1775/     85A : CD 6A 08            		call	dtbl_singl
(1) 1776/     85D : CF                  		rst	8
(1) 1777/     85E : 11 18 00            		ld	de,MAX_TBLSIZE
(1) 1778/     861 : FD 19               		add	iy,de
(1) 1779/     863 : 06 03               		ld	b,3	; wave sync ** IMPORTANT **
(1) 1780/     865 : 10 FE               		djnz	$
(1) 1781/     867 : CF                  		rst	8
(1) 1782/     868 : 18 EA               		jr	dtbl_multi
(1) 1783/     86A :                     dtbl_singl:
(1) 1784/     86A : FD 5E 00            		ld	e,(iy)		; Read link
(1) 1785/     86D : FD 56 01            		ld	d,(iy+1)
(1) 1786/     870 : 7A                  		ld	a,d		; If no-zero, active
(1) 1787/     871 : B3                  		or	e
(1) 1788/     872 : 20 60               		jr	nz,.linked
(1) 1789/     874 : FD 7E 02            		ld	a,(iy+2)	; Silence request?
(1) 1790/     877 : B7                  		or	a
(1) 1791/     878 : F0                  		ret	p		; Return if not.
(1) 1792/     879 : CF                  		rst	8
(1) 1793/     87A : FD 36 02 00         		ld	(iy+2),0	; Reset request on memory
(1) 1794/     87E :                     
(1) 1795/     87E :                     ; ----------------------------------------
(1) 1796/     87E :                     ; chip-silence request
(1) 1797/     87E :                     ; iy - Table
(1) 1798/     87E : E6 F0               		and	11110000b
(1) 1799/     880 : FE 80               		cp	80h
(1) 1800/     882 : 28 1E               		jr	z,.siln_psg
(1) 1801/     884 : FE 90               		cp	90h
(1) 1802/     886 : 28 16               		jr	z,.siln_psg_n
(1) 1803/     888 : FE A0               		cp	0A0h
(1) 1804/     88A : 28 42               		jr	z,.siln_fm
(1) 1805/     88C : FE B0               		cp	0B0h
(1) 1806/     88E : 28 3E               		jr	z,.siln_fm
(1) 1807/     890 : CF                  		rst	8
(1) 1808/     891 : FE C0               		cp	0C0h
(1) 1809/     893 : 28 36               		jr	z,.siln_dac
(1) 1810/     895 : FE D0               		cp	0D0h
(1) 1811/     897 : 28 10               		jr	z,.siln_pcm
(1) 1812/     899 : FE E0               		cp	0E0h
(1) 1813/     89B : 28 18               		jr	z,.siln_pwm
(1) 1814/     89D : C9                  		ret
(1) 1815/     89E :                     .siln_psg_n:
(1) 1816/     89E : AF                  		xor	a
(1) 1817/     89F : 32 83 1F            		ld	(psgHatMode),a
(1) 1818/     8A2 :                     .siln_psg:
(1) 1819/     8A2 : CF                  		rst	8
(1) 1820/     8A3 : DD 21 23 16         		ld	ix,psgcom
(1) 1821/     8A7 : 18 16               		jr	.rcyl_com
(1) 1822/     8A9 :                     
(1) 1823/     8A9 :                     ; --------------------------------
(1) 1824/     8A9 :                     
(1) 1825/     8A9 :                     .siln_pcm:
(1) 1826/     8A9 : 3E 01               		ld	a,1
(1) 1827/     8AB : 32 88 1F            		ld	(mcdUpd),a
(1) 1828/     8AE : CF                  		rst	8
(1) 1829/     8AF : DD 21 AB 15         		ld	ix,pcmcom
(1) 1830/     8B3 : 18 0A               		jr	.rcyl_com
(1) 1831/     8B5 :                     .siln_pwm:
(1) 1832/     8B5 : 3E 01               		ld	a,1
(1) 1833/     8B7 : 32 87 1F            		ld	(marsUpd),a
(1) 1834/     8BA : CF                  		rst	8
(1) 1835/     8BB : DD 21 EB 15         		ld	ix,pwmcom
(1) 1836/     8BF :                     ; 		jr	.rcyl_com
(1) 1837/     8BF :                     
(1) 1838/     8BF :                     ; --------------------------------
(1) 1839/     8BF :                     
(1) 1840/     8BF :                     .rcyl_com:
(1) 1841/     8BF : 06 00               		ld	b,0
(1) 1842/     8C1 : FD 4E 04            		ld	c,(iy+04h)
(1) 1843/     8C4 : DD 09               		add	ix,bc
(1) 1844/     8C6 : DD 36 00 04         		ld	(ix),100b	; key-cut
(1) 1845/     8CA : C9                  		ret
(1) 1846/     8CB :                     
(1) 1847/     8CB :                     ; --------------------------------
(1) 1848/     8CB :                     
(1) 1849/     8CB :                     .siln_dac:
(1) 1850/     8CB : CD 31 13            		call	dac_off
(1) 1851/     8CE :                     .siln_fm:
(1) 1852/     8CE : CD A1 0A            		call	.fm_keyoff
(1) 1853/     8D1 : C3 A9 0A            		jp	.fm_tloff
(1) 1854/     8D4 :                     
(1) 1855/     8D4 :                     ; ----------------------------------------
(1) 1856/     8D4 :                     ; Process channel now
(1) 1857/     8D4 :                     ; iy - Table
(1) 1858/     8D4 :                     ; ix - Tracker channel
(1) 1859/     8D4 :                     .linked:
(1) 1860/     8D4 : 1A                  		ld	a,(de)		; ** chnl_Flags
(1) 1861/     8D5 : 47                  		ld	b,a		; b - flags to check
(1) 1862/     8D6 : E6 0F               		and	00001111b	; evin flags?
(1) 1863/     8D8 : C8                  		ret	z
(1) 1864/     8D9 : 78                  		ld	a,b
(1) 1865/     8DA : E6 F0               		and	11110000b	; Keep OTHER bits
(1) 1866/     8DC : 12                  		ld	(de),a		; ** clear chnl_Flags
(1) 1867/     8DD : D5                  		push	de
(1) 1868/     8DE : DD E1               		pop	ix
(1) 1869/     8E0 : FD E5               		push	iy		; table+10h instrment data
(1) 1870/     8E2 : E1                  		pop	hl
(1) 1871/     8E3 : 11 10 00            		ld	de,10h
(1) 1872/     8E6 : 19                  		add	hl,de
(1) 1873/     8E7 :                     	;  b - Flags LR00evin (Eff|Vol|Ins|Note)
(1) 1874/     8E7 :                     	; iy - Our chip table
(1) 1875/     8E7 :                     	; ix - Track channel
(1) 1876/     8E7 :                     	; hl - Intrument data
(1) 1877/     8E7 : CB 40               		bit	0,b		; Note
(1) 1878/     8E9 : C4 C8 0F            		call	nz,.note
(1) 1879/     8EC : CB 48               		bit	1,b		; Intrument
(1) 1880/     8EE : C4 17 0E            		call	nz,.inst
(1) 1881/     8F1 : CF                  		rst	8
(1) 1882/     8F2 : CB 50               		bit	2,b		; Volume
(1) 1883/     8F4 : C4 0E 0E            		call	nz,.volu
(1) 1884/     8F7 : CB 58               		bit	3,b		; Effect
(1) 1885/     8F9 : C4 0C 0D            		call	nz,.effc
(1) 1886/     8FC : 7E                  		ld	a,(hl)		; Read INS type
(1) 1887/     8FD : E6 70               		and	01110000b	; Filter bits
(1) 1888/     8FF : 0F                  		rrca
(1) 1889/     900 : 0F                  		rrca
(1) 1890/     901 : 0F                  		rrca
(1) 1891/     902 : CF                  		rst	8
(1) 1892/     903 : 16 00               		ld	d,0
(1) 1893/     905 : 5F                  		ld	e,a
(1) 1894/     906 : 21 0F 09            		ld	hl,.mk_list
(1) 1895/     909 : 19                  		add	hl,de
(1) 1896/     90A : 7E                  		ld	a,(hl)
(1) 1897/     90B : 23                  		inc	hl
(1) 1898/     90C : 66                  		ld	h,(hl)
(1) 1899/     90D : 6F                  		ld	l,a
(1) 1900/     90E : E9                  		jp	(hl)
(1) 1901/     90F :                     ; --------------------------------
(1) 1902/     90F :                     .mk_list:
(1) 1903/     90F : 43 09               		dw .mk_psg
(1) 1904/     911 : 1D 09               		dw .mk_psgn
(1) 1905/     913 : C1 09               		dw .mk_fm
(1) 1906/     915 : 37 0A               		dw .mk_fmspc
(1) 1907/     917 : 8C 0B               		dw .mk_dac
(1) 1908/     919 : E3 0B               		dw .mk_pcm
(1) 1909/     91B : 6C 0C               		dw .mk_pwm
(1) 1910/     91D :                     
(1) 1911/     91D :                     ; --------------------------------
(1) 1912/     91D :                     ; PSGN
(1) 1913/     91D :                     ; --------------------------------
(1) 1914/     91D :                     
(1) 1915/     91D :                     .mk_psgn:
(1) 1916/     91D : CB 40               		bit	0,b
(1) 1917/     91F : 28 6A               		jr	z,.psg_keyon
(1) 1918/     921 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 1919/     924 : DD E5               		push	ix
(1) 1920/     926 : DD 21 26 16         		ld	ix,psgcom+3	; Steal PSG3
(1) 1921/     92A : CF                  		rst	8
(1) 1922/     92B : FE FE               		cp	-2
(1) 1923/     92D : 28 7E               		jr	z,.kycut_psgn
(1) 1924/     92F : FE FF               		cp	-1
(1) 1925/     931 : 28 6D               		jr	z,.kyoff_psgn
(1) 1926/     933 : DD 36 00 01         		ld	(ix+COM),001b	; Key ON
(1) 1927/     937 : 5F                  		ld	e,a
(1) 1928/     938 : 3A 83 1F            		ld	a,(psgHatMode)	; Tone 3?
(1) 1929/     93B : E6 03               		and	011b
(1) 1930/     93D : FE 03               		cp	011b
(1) 1931/     93F : 20 4A               		jr	nz,.psg_keyon	; Normal
(1) 1932/     941 : 18 21               		jr	.from_psgn	; Tone 3
(1) 1933/     943 :                     
(1) 1934/     943 :                     ; --------------------------------
(1) 1935/     943 :                     ; PSG
(1) 1936/     943 :                     ; --------------------------------
(1) 1937/     943 :                     
(1) 1938/     943 :                     .mk_psg:
(1) 1939/     943 : CB 40               		bit	0,b
(1) 1940/     945 : 28 44               		jr	z,.psg_keyon
(1) 1941/     947 : CF                  		rst	8
(1) 1942/     948 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 1943/     94B : DD E5               		push	ix
(1) 1944/     94D : DD 21 23 16         		ld	ix,psgcom	; ix - psgcom
(1) 1945/     951 : FD 5E 04            		ld	e,(iy+04h)
(1) 1946/     954 : 16 00               		ld	d,0
(1) 1947/     956 : DD 19               		add	ix,de
(1) 1948/     958 : FE FE               		cp	-2
(1) 1949/     95A : 28 54               		jr	z,.kycut_psg
(1) 1950/     95C : FE FF               		cp	-1
(1) 1951/     95E : 28 43               		jr	z,.kyoff_psg
(1) 1952/     960 : DD 36 00 01         		ld	(ix+COM),001b	; Key ON
(1) 1953/     964 :                     .from_psgn:
(1) 1954/     964 : CF                  		rst	8
(1) 1955/     965 : 16 00               		ld	d,0		; de - note*2
(1) 1956/     967 : FD 5E 06            		ld	e,(iy+06h)	; Freq index
(1) 1957/     96A : 21 29 14            		ld	hl,psgFreq_List-(36*2)
(1) 1958/     96D : 19                  		add	hl,de
(1) 1959/     96E : 7E                  		ld	a,(hl)
(1) 1960/     96F : 23                  		inc	hl
(1) 1961/     970 : 66                  		ld	h,(hl)
(1) 1962/     971 : 6F                  		ld	l,a
(1) 1963/     972 : FD 7E 07            		ld	a,(iy+07h)	; pitchbend
(1) 1964/     975 : 07                  		rlca			; << 3
(1) 1965/     976 : 07                  		rlca
(1) 1966/     977 : CF                  		rst	8
(1) 1967/     978 : 07                  		rlca
(1) 1968/     979 : 57                  		ld	d,a
(1) 1969/     97A : E6 F8               		and	11111000b
(1) 1970/     97C : 5F                  		ld	e,a
(1) 1971/     97D : 7A                  		ld	a,d
(1) 1972/     97E : E6 07               		and	00000111b
(1) 1973/     980 : 57                  		ld	d,a
(1) 1974/     981 : 37                  		scf
(1) 1975/     982 : 3F                  		ccf
(1) 1976/     983 : ED 52               		sbc	hl,de
(1) 1977/     985 : DD 75 1C            		ld	(ix+DTL),l
(1) 1978/     988 : DD 74 20            		ld	(ix+DTH),h
(1) 1979/     98B :                     .psg_keyon:
(1) 1980/     98B : FD 7E 08            		ld	a,(iy+08h)	; Set current Volume
(1) 1981/     98E : FD 96 03            		sub	a,(iy+03h)	; + MASTER vol
(1) 1982/     991 : ED 44               		neg	a
(1) 1983/     993 : CF                  		rst	8
(1) 1984/     994 : 87                  		add	a,a
(1) 1985/     995 : 87                  		add	a,a
(1) 1986/     996 : 30 02               		jr	nc,.vmuch
(1) 1987/     998 : 3E FF               		ld	a,-1
(1) 1988/     99A :                     .vmuch:
(1) 1989/     99A : DD 77 30            		ld	(ix+PVOL),a
(1) 1990/     99D : DD E1               		pop	ix
(1) 1991/     99F : C9                  		ret
(1) 1992/     9A0 :                     
(1) 1993/     9A0 :                     ; --------------------------------
(1) 1994/     9A0 :                     
(1) 1995/     9A0 :                     ; -1
(1) 1996/     9A0 :                     .kyoff_psgn:
(1) 1997/     9A0 : CD BA 09            		call	.kypsgn_hatoff
(1) 1998/     9A3 :                     .kyoff_psg:
(1) 1999/     9A3 : 0E 02               		ld	c,010b
(1) 2000/     9A5 : DD 71 00            		ld	(ix),c
(1) 2001/     9A8 : DD E1               		pop	ix
(1) 2002/     9AA : C3 3E 10            		jp	.chnl_ulnkoff
(1) 2003/     9AD :                     ; -2
(1) 2004/     9AD :                     .kycut_psgn:
(1) 2005/     9AD : CD BA 09            		call	.kypsgn_hatoff
(1) 2006/     9B0 :                     .kycut_psg:
(1) 2007/     9B0 : 0E 04               		ld	c,100b
(1) 2008/     9B2 : DD 71 00            		ld	(ix),c
(1) 2009/     9B5 : DD E1               		pop	ix
(1) 2010/     9B7 : C3 38 10            		jp	.chnl_ulnkcut
(1) 2011/     9BA :                     .kypsgn_hatoff:
(1) 2012/     9BA : 3E 00               		ld	a,000b
(1) 2013/     9BC : 32 83 1F            		ld	(psgHatMode),a	; ** GLOBAL SETTING
(1) 2014/     9BF : CF                  		rst	8
(1) 2015/     9C0 : C9                  		ret
(1) 2016/     9C1 :                     
(1) 2017/     9C1 :                     ; --------------------------------
(1) 2018/     9C1 :                     ; FM
(1) 2019/     9C1 :                     ; --------------------------------
(1) 2020/     9C1 :                     
(1) 2021/     9C1 :                     .mk_fm:
(1) 2022/     9C1 : CB 40               		bit	0,b		; NEW note?
(1) 2023/     9C3 : 28 5E               		jr	z,.mkfm_set
(1) 2024/     9C5 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 2025/     9C8 : FE FE               		cp	-2
(1) 2026/     9CA : CA 98 0A            		jp	z,.fm_cut
(1) 2027/     9CD : FE FF               		cp	-1
(1) 2028/     9CF : CA 92 0A            		jp	z,.fm_off
(1) 2029/     9D2 :                     ; 		call	.fm_tloff
(1) 2030/     9D2 : CF                  		rst	8
(1) 2031/     9D3 : FD 4E 04            		ld	c,(iy+04h)	; c - KeyID
(1) 2032/     9D6 : 79                  		ld	a,c
(1) 2033/     9D7 : FE 06               		cp	6
(1) 2034/     9D9 : 20 05               		jr	nz,.not_dac
(1) 2035/     9DB : CD 31 13            		call	dac_off
(1) 2036/     9DE : 18 15               		jr	.not_dspc
(1) 2037/     9E0 :                     .not_dac:
(1) 2038/     9E0 :                     ; 		ld	a,c
(1) 2039/     9E0 : FE 02               		cp	2
(1) 2040/     9E2 : 20 11               		jr	nz,.not_dspc
(1) 2041/     9E4 : 3A 84 1F            		ld	a,(fmSpecial)
(1) 2042/     9E7 : B7                  		or	a
(1) 2043/     9E8 : 28 0B               		jr	z,.not_dspc
(1) 2044/     9EA : 11 00 27            		ld	de,2700h	; CH3 off
(1) 2045/     9ED : CD 06 13            		call	fm_send_1
(1) 2046/     9F0 : 3E 00               		ld	a,0
(1) 2047/     9F2 : 32 84 1F            		ld	(fmSpecial),a
(1) 2048/     9F5 :                     .not_dspc:
(1) 2049/     9F5 : CD A1 0A            		call	.fm_keyoff
(1) 2050/     9F8 : C5                  		push	bc
(1) 2051/     9F9 : FD 7E 06            		ld	a,(iy+06h)
(1) 2052/     9FC : 47                  		ld	b,a
(1) 2053/     9FD : E6 1F               		and	00011111b
(1) 2054/     9FF : 5F                  		ld	e,a
(1) 2055/     A00 : 16 00               		ld	d,0
(1) 2056/     A02 : 21 59 14            		ld	hl,fmFreq_List
(1) 2057/     A05 : 19                  		add	hl,de
(1) 2058/     A06 : 7E                  		ld	a,(hl)
(1) 2059/     A07 : CF                  		rst	8
(1) 2060/     A08 : 23                  		inc	hl
(1) 2061/     A09 : 66                  		ld	h,(hl)
(1) 2062/     A0A : 6F                  		ld	l,a
(1) 2063/     A0B : 78                  		ld	a,b
(1) 2064/     A0C : E6 E0               		and	11100000b
(1) 2065/     A0E : 0F                  		rrca
(1) 2066/     A0F : 0F                  		rrca
(1) 2067/     A10 : B4                  		or	h
(1) 2068/     A11 : 67                  		ld	h,a
(1) 2069/     A12 : FD 5E 07            		ld	e,(iy+07h)	; pitchbend
(1) 2070/     A15 : CF                  		rst	8
(1) 2071/     A16 : AF                  		xor	a		; Clear high
(1) 2072/     A17 : 3F                  		ccf			; Clear carry
(1) 2073/     A18 : CB 23               		sla	e		; << 2
(1) 2074/     A1A : CB 23               		sla	e
(1) 2075/     A1C : 9F                  		sbc	a,a		; -1 if carry is set
(1) 2076/     A1D : 57                  		ld	d,a
(1) 2077/     A1E : 19                  		add	hl,de
(1) 2078/     A1F : CD C0 0A            		call	.fm_setfreq
(1) 2079/     A22 : C1                  		pop	bc
(1) 2080/     A23 :                     
(1) 2081/     A23 :                     ; --------------------------------
(1) 2082/     A23 :                     
(1) 2083/     A23 :                     .mkfm_set:
(1) 2087/     A23 : CD 56 0B            		call	.fm_wrtalpan	; Panning and effects
(1) 2088/     A26 : CD D7 0A            		call	.fm_wrtlvol	; FM volume control
(1) 2089/     A29 : FD 7E 0F            		ld	a,(iy+0Fh)	; 0Fh - keys ***
(1) 2090/     A2C : E6 F0               		and	11110000b
(1) 2091/     A2E : B1                  		or	c		; Merge FM channel
(1) 2092/     A2F : 5F                  		ld	e,a
(1) 2093/     A30 : 16 28               		ld	d,28h
(1) 2094/     A32 : CD 06 13            		call	fm_send_1	; Set keys
(1) 2095/     A35 : CF                  		rst	8
(1) 2096/     A36 :                     .nofm_note:
(1) 2097/     A36 : C9                  		ret
(1) 2099/     A37 :                     
(1) 2100/     A37 :                     ; --------------------------------
(1) 2101/     A37 :                     ; FM3 special
(1) 2102/     A37 :                     ; --------------------------------
(1) 2103/     A37 :                     
(1) 2104/     A37 :                     .mk_fmspc:
(1) 2105/     A37 : CB 40               		bit	0,b		; NEW Note?
(1) 2106/     A39 : 28 E8               		jr	z,.mkfm_set
(1) 2107/     A3B : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 2108/     A3E : FE FE               		cp	-2
(1) 2109/     A40 : CA 98 0A            		jp	z,.fm_cut
(1) 2110/     A43 : FE FF               		cp	-1
(1) 2111/     A45 : CA 92 0A            		jp	z,.fm_off
(1) 2112/     A48 : FD 4E 04            		ld	c,(iy+04h)	; c - KeyID (011b always)
(1) 2113/     A4B : CD A1 0A            		call	.fm_keyoff
(1) 2114/     A4E : 21 4B 14            		ld	hl,fmcach_list	; Read external freqs
(1) 2115/     A51 : FD 7E 04            		ld	a,(iy+04h)
(1) 2116/     A54 : E6 07               		and	0111b
(1) 2117/     A56 : 16 00               		ld	d,0
(1) 2118/     A58 : 87                  		add	a,a
(1) 2119/     A59 : 5F                  		ld	e,a
(1) 2120/     A5A : CF                  		rst	8
(1) 2121/     A5B : 19                  		add	hl,de
(1) 2122/     A5C : 7E                  		ld	a,(hl)
(1) 2123/     A5D : 23                  		inc	hl
(1) 2124/     A5E : 66                  		ld	h,(hl)
(1) 2125/     A5F : 6F                  		ld	l,a
(1) 2126/     A60 : CF                  		rst	8
(1) 2127/     A61 : 11 20 00            		ld	de,20h		; point to regs
(1) 2128/     A64 : 19                  		add	hl,de
(1) 2129/     A65 : DD E5               		push	ix
(1) 2130/     A67 : DD 21 8A 0A         		ld	ix,.spcreglist
(1) 2131/     A6B : 06 08               		ld	b,8
(1) 2132/     A6D :                     .wr_spc:
(1) 2133/     A6D : DD 56 00            		ld	d,(ix)
(1) 2134/     A70 : 5E                  		ld	e,(hl)
(1) 2135/     A71 : CD 06 13            		call	fm_send_1
(1) 2136/     A74 : CF                  		rst	8
(1) 2137/     A75 : 23                  		inc	hl
(1) 2138/     A76 : DD 23               		inc	ix
(1) 2139/     A78 : 10 F3               		djnz	.wr_spc
(1) 2140/     A7A : DD E1               		pop	ix
(1) 2141/     A7C : 11 40 27            		ld	de,2740h	; CH3 on
(1) 2142/     A7F : CD 06 13            		call	fm_send_1
(1) 2143/     A82 : 3E 01               		ld	a,1
(1) 2144/     A84 : 32 84 1F            		ld	(fmSpecial),a
(1) 2145/     A87 : C3 23 0A            		jp	.mkfm_set
(1) 2146/     A8A :                     .spcreglist:
(1) 2147/     A8A : AD A9               		db 0ADh,0A9h
(1) 2148/     A8C : AC A8               		db 0ACh,0A8h
(1) 2149/     A8E : AE AA               		db 0AEh,0AAh
(1) 2150/     A90 : A6 A2               		db 0A6h,0A2h
(1) 2151/     A92 :                     
(1) 2152/     A92 :                     ; ----------------------------------------
(1) 2153/     A92 :                     
(1) 2154/     A92 :                     .fm_off:
(1) 2155/     A92 : CD A1 0A            		call	.fm_keyoff
(1) 2156/     A95 : C3 3E 10            		jp	.chnl_ulnkoff
(1) 2157/     A98 :                     .fm_cut:
(1) 2158/     A98 : CD A1 0A            		call	.fm_keyoff
(1) 2159/     A9B : CD A9 0A            		call	.fm_tloff
(1) 2160/     A9E : C3 38 10            		jp	.chnl_ulnkcut
(1) 2161/     AA1 :                     
(1) 2162/     AA1 :                     ; ----------------------------------------
(1) 2163/     AA1 :                     
(1) 2164/     AA1 :                     .fm_keyoff:
(1) 2165/     AA1 : 16 28               		ld	d,28h
(1) 2166/     AA3 : FD 5E 04            		ld	e,(iy+04h)
(1) 2167/     AA6 : C3 06 13            		jp	fm_send_1
(1) 2168/     AA9 :                     .fm_tloff:
(1) 2169/     AA9 : 06 04               		ld	b,4
(1) 2170/     AAB : FD 4E 04            		ld	c,(iy+04h)
(1) 2171/     AAE : 79                  		ld	a,c
(1) 2172/     AAF : E6 03               		and	011b
(1) 2173/     AB1 : F6 40               		or	40h	; TL regs
(1) 2174/     AB3 : 1E 7F               		ld	e,7Fh
(1) 2175/     AB5 :                     .tl_down:
(1) 2176/     AB5 : 57                  		ld	d,a
(1) 2177/     AB6 :                     ; 		ld	e,7Fh
(1) 2178/     AB6 : CD 02 13            		call	fm_autoreg
(1) 2179/     AB9 : CF                  		rst	8
(1) 2180/     ABA : 7A                  		ld	a,d
(1) 2181/     ABB : C6 04               		add	a,4
(1) 2182/     ABD : 10 F6               		djnz	.tl_down
(1) 2183/     ABF : C9                  		ret
(1) 2184/     AC0 :                     ; c - KeyID
(1) 2185/     AC0 :                     .fm_setfreq:
(1) 2186/     AC0 : 79                  		ld	a,c
(1) 2187/     AC1 : E6 03               		and	011b
(1) 2188/     AC3 : F6 A4               		or	0A4h
(1) 2189/     AC5 : 57                  		ld	d,a
(1) 2190/     AC6 : 5C                  		ld	e,h
(1) 2191/     AC7 : CF                  		rst	8
(1) 2192/     AC8 : CD 02 13            		call	fm_autoreg
(1) 2193/     ACB : 79                  		ld	a,c
(1) 2194/     ACC : E6 03               		and	011b
(1) 2195/     ACE : F6 A0               		or	0A0h
(1) 2196/     AD0 : 57                  		ld	d,a
(1) 2197/     AD1 : 5D                  		ld	e,l
(1) 2198/     AD2 : CD 02 13            		call	fm_autoreg
(1) 2199/     AD5 : CF                  		rst	8
(1) 2200/     AD6 : C9                  		ret
(1) 2201/     AD7 :                     
(1) 2202/     AD7 :                     ; --------------------------------
(1) 2203/     AD7 :                     ; WRITE TL volume
(1) 2204/     AD7 :                     
(1) 2205/     AD7 :                     .fm_wrtlvol:
(1) 2206/     AD7 : 21 4B 14            		ld	hl,fmcach_list
(1) 2207/     ADA : FD 7E 04            		ld	a,(iy+04h)
(1) 2208/     ADD : E6 07               		and	0111b
(1) 2209/     ADF : 16 00               		ld	d,0
(1) 2210/     AE1 : CF                  		rst	8
(1) 2211/     AE2 : 87                  		add	a,a
(1) 2212/     AE3 : 5F                  		ld	e,a
(1) 2213/     AE4 : 19                  		add	hl,de
(1) 2214/     AE5 : 7E                  		ld	a,(hl)
(1) 2215/     AE6 : 23                  		inc	hl
(1) 2216/     AE7 : 66                  		ld	h,(hl)
(1) 2217/     AE8 : 6F                  		ld	l,a
(1) 2218/     AE9 : 23                  		inc	hl
(1) 2219/     AEA : 23                  		inc	hl
(1) 2220/     AEB : 23                  		inc	hl
(1) 2221/     AEC : CF                  		rst	8
(1) 2222/     AED : 23                  		inc	hl		; Point to TL's
(1) 2223/     AEE : FD 7E 04            		ld	a,(iy+04h)
(1) 2224/     AF1 : E6 03               		and	011b
(1) 2225/     AF3 : F6 40               		or	40h		; TL registers
(1) 2226/     AF5 : 57                  		ld	d,a
(1) 2227/     AF6 :                     ; d - 40h+
(1) 2228/     AF6 :                     ; hl - TL data
(1) 2229/     AF6 :                     ; .fm_wrtlvol:
(1) 2230/     AF6 : C5                  		push	bc
(1) 2231/     AF7 : E5                  		push	hl
(1) 2232/     AF8 : 21 4E 0B            		ld	hl,.fm_cindx	; hl - jump carry list
(1) 2233/     AFB : FD 7E 0C            		ld	a,(iy+0Ch)	; Read 0B0h copy
(1) 2234/     AFE : E6 07               		and	0111b
(1) 2235/     B00 : 06 00               		ld	b,0
(1) 2236/     B02 : 4F                  		ld	c,a
(1) 2237/     B03 : 09                  		add	hl,bc
(1) 2238/     B04 : FD 7E 08            		ld	a,(iy+08h)	; Read current Volume
(1) 2239/     B07 : CF                  		rst	8
(1) 2240/     B08 : FD 96 03            		sub	a,(iy+03h)	; + MASTER vol
(1) 2241/     B0B :                     
(1) 2242/     B0B : 87                  		add	a,a		; * 2
(1) 2243/     B0C : 4F                  		ld	c,a		; c - Current Volume
(1) 2244/     B0D : 46                  		ld	b,(hl)		; b - Current jump-carry byte
(1) 2245/     B0E : E1                  		pop	hl
(1) 2246/     B0F : CB 08               		rrc	b		; OP1
(1) 2247/     B11 : DC 3C 0B            		call	c,.write_tl
(1) 2248/     B14 : 23                  		inc	hl
(1) 2249/     B15 : 14                  		inc	d
(1) 2250/     B16 : 14                  		inc	d
(1) 2251/     B17 : CF                  		rst	8
(1) 2252/     B18 : 14                  		inc	d
(1) 2253/     B19 : 14                  		inc	d
(1) 2254/     B1A : CB 08               		rrc	b		; OP2
(1) 2255/     B1C : DC 3C 0B            		call	c,.write_tl
(1) 2256/     B1F : 23                  		inc	hl
(1) 2257/     B20 : 14                  		inc	d
(1) 2258/     B21 : 14                  		inc	d
(1) 2259/     B22 : 14                  		inc	d
(1) 2260/     B23 : 14                  		inc	d
(1) 2261/     B24 : CB 08               		rrc	b		; OP3
(1) 2262/     B26 : DC 3C 0B            		call	c,.write_tl
(1) 2263/     B29 : 23                  		inc	hl
(1) 2264/     B2A : CF                  		rst	8
(1) 2265/     B2B : 14                  		inc	d
(1) 2266/     B2C : 14                  		inc	d
(1) 2267/     B2D : 14                  		inc	d
(1) 2268/     B2E : 14                  		inc	d
(1) 2269/     B2F : CB 08               		rrc	b		; OP4
(1) 2270/     B31 : DC 3C 0B            		call	c,.write_tl
(1) 2271/     B34 : 23                  		inc	hl
(1) 2272/     B35 : 14                  		inc	d
(1) 2273/     B36 : 14                  		inc	d
(1) 2274/     B37 : 14                  		inc	d
(1) 2275/     B38 : 14                  		inc	d
(1) 2276/     B39 : CF                  		rst	8
(1) 2277/     B3A : C1                  		pop	bc
(1) 2278/     B3B : C9                  		ret
(1) 2279/     B3C :                     .write_tl:
(1) 2280/     B3C : 7E                  		ld	a,(hl)
(1) 2281/     B3D : 91                  		sub	a,c		; reg - volume
(1) 2282/     B3E : F2 43 0B            		jp	p,.keep_tlmx
(1) 2283/     B41 : 3E 7F               		ld	a,7Fh		; <-- maximum TL
(1) 2284/     B43 :                     .keep_tlmx:
(1) 2285/     B43 : C5                  		push	bc
(1) 2286/     B44 : 5F                  		ld	e,a
(1) 2287/     B45 : FD 4E 04            		ld	c,(iy+04h)
(1) 2288/     B48 : CD 02 13            		call	fm_autoreg
(1) 2289/     B4B : CF                  		rst	8
(1) 2290/     B4C : C1                  		pop	bc
(1) 2291/     B4D : C9                  		ret
(1) 2292/     B4E :                     ; Jump carry list
(1) 2293/     B4E :                     .fm_cindx:
(1) 2294/     B4E : 08                  		db 1000b
(1) 2295/     B4F : 08                  		db 1000b
(1) 2296/     B50 : 08                  		db 1000b
(1) 2297/     B51 : 08                  		db 1000b
(1) 2298/     B52 : 0C                  		db 1100b
(1) 2299/     B53 : 0E                  		db 1110b
(1) 2300/     B54 : 0E                  		db 1110b
(1) 2301/     B55 : 0F                  		db 1111b
(1) 2302/     B56 :                     ; c - KeyId
(1) 2303/     B56 :                     .fm_wrtalpan:
(1) 2304/     B56 : FD 7E 0C            		ld	a,(iy+0Ch)		; 0B0h algorithm
(1) 2305/     B59 : 5F                  		ld	e,a
(1) 2306/     B5A : 79                  		ld	a,c
(1) 2307/     B5B : E6 03               		and	011b
(1) 2308/     B5D : F6 B0               		or	0B0h
(1) 2309/     B5F : 57                  		ld	d,a
(1) 2310/     B60 : CD 02 13            		call	fm_autoreg		; Write algorithm
(1) 2311/     B63 : CF                  		rst	8
(1) 2312/     B64 : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Read panning bits
(1) 2313/     B67 : 2F                  		cpl				; REVERSE bits
(1) 2314/     B68 : E6 30               		and	00110000b
(1) 2315/     B6A : 07                  		rlca				; << 2
(1) 2316/     B6B : 07                  		rlca
(1) 2317/     B6C : 5F                  		ld	e,a			; save as e
(1) 2318/     B6D : FD 7E 0D            		ld	a,(iy+0Dh)		; 0B4h %00aa0ppp
(1) 2319/     B70 : E6 3F               		and	00111111b
(1) 2320/     B72 : B3                  		or	e			; Merge panning
(1) 2321/     B73 : 5F                  		ld	e,a
(1) 2322/     B74 : 79                  		ld	a,c
(1) 2323/     B75 : CF                  		rst	8
(1) 2324/     B76 : E6 03               		and	011b
(1) 2325/     B78 : F6 B4               		or	0B4h
(1) 2326/     B7A : 57                  		ld	d,a
(1) 2327/     B7B : CD 02 13            		call	fm_autoreg
(1) 2328/     B7E : FD 7E 0E            		ld	a,(iy+0Eh)		; Read LFO
(1) 2329/     B81 : CB 5F               		bit	3,a			; Intrument wants LFO?
(1) 2330/     B83 : 28 06               		jr	z,.no_lfo
(1) 2331/     B85 : 5F                  		ld	e,a
(1) 2332/     B86 : 16 22               		ld	d,22h
(1) 2333/     B88 : CD 06 13            		call	fm_send_1
(1) 2334/     B8B :                     .no_lfo:
(1) 2335/     B8B : C9                  		ret
(1) 2336/     B8C :                     
(1) 2337/     B8C :                     ; --------------------------------
(1) 2338/     B8C :                     ; DAC
(1) 2339/     B8C :                     ; --------------------------------
(1) 2340/     B8C :                     
(1) 2341/     B8C :                     .mk_dac:
(1) 2342/     B8C : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 2343/     B8F : FE FE               		cp	-2
(1) 2344/     B91 : CA B4 0B            		jp	z,.dac_cut
(1) 2345/     B94 : FE FF               		cp	-1
(1) 2346/     B96 : CA BA 0B            		jp	z,.dac_off
(1) 2347/     B99 : CD BD 0B            		call	.dac_pitch
(1) 2348/     B9C : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Read panning
(1) 2349/     B9F : 2F                  		cpl				; REVERSE bits
(1) 2350/     BA0 : E6 30               		and	00110000b
(1) 2351/     BA2 : 07                  		rlca
(1) 2352/     BA3 : 07                  		rlca
(1) 2353/     BA4 : CF                  		rst	8
(1) 2354/     BA5 : 5F                  		ld	e,a
(1) 2355/     BA6 : 16 B6               		ld	d,0B6h			; Channel 6 panning
(1) 2356/     BA8 : CD 11 13            		call	fm_send_2
(1) 2357/     BAB : CB 40               		bit	0,b			; Note update?
(1) 2358/     BAD : C8                  		ret	z
(1) 2359/     BAE : CD 31 13            		call	dac_off
(1) 2360/     BB1 : C3 46 13            		jp	dac_play
(1) 2361/     BB4 :                     .dac_cut:
(1) 2362/     BB4 : CD 31 13            		call	dac_off
(1) 2363/     BB7 : C3 3E 10            		jp	.chnl_ulnkoff
(1) 2364/     BBA :                     .dac_off:
(1) 2365/     BBA : C3 38 10            		jp	.chnl_ulnkcut
(1) 2366/     BBD :                     .dac_pitch:
(1) 2367/     BBD : 16 00               		ld	d,0		; Freq index
(1) 2368/     BBF : FD 5E 06            		ld	e,(iy+06h)
(1) 2369/     BC2 : 21 89 14            		ld	hl,wavFreq_List-(2*36)
(1) 2370/     BC5 : 19                  		add	hl,de
(1) 2371/     BC6 : 7E                  		ld	a,(hl)
(1) 2372/     BC7 : 23                  		inc	hl
(1) 2373/     BC8 : 66                  		ld	h,(hl)
(1) 2374/     BC9 : 6F                  		ld	l,a
(1) 2375/     BCA : FD 5E 07            		ld	e,(iy+07h)	; pitchbend
(1) 2376/     BCD : CF                  		rst	8
(1) 2377/     BCE : AF                  		xor	a		; Clear high
(1) 2378/     BCF : 3F                  		ccf			; Clear carry
(1) 2379/     BD0 : CB 23               		sla	e		; << 3
(1) 2380/     BD2 : CB 23               		sla	e
(1) 2381/     BD4 : CB 23               		sla	e
(1) 2382/     BD6 : 9F                  		sbc	a,a		; -1 if carry is set
(1) 2383/     BD7 : 57                  		ld	d,a
(1) 2384/     BD8 : 19                  		add	hl,de
(1) 2385/     BD9 : 22 92 1F            		ld	(wave_Pitch),hl
(1) 2386/     BDC : D9                  		exx			; *
(1) 2387/     BDD : ED 5B 92 1F         		ld	de,(wave_Pitch)	; *
(1) 2388/     BE1 : D9                  		exx			; *
(1) 2389/     BE2 : C9                  		ret
(1) 2390/     BE3 :                     
(1) 2391/     BE3 :                     ; --------------------------------
(1) 2392/     BE3 :                     ; PCM
(1) 2393/     BE3 :                     ; --------------------------------
(1) 2394/     BE3 :                     
(1) 2395/     BE3 :                     ; TODO MEJORAR ESTO
(1) 2396/     BE3 :                     
(1) 2397/     BE3 :                     .mk_pcm:
(1) 2398/     BE3 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 2399/     BE6 : 16 00               		ld	d,0
(1) 2400/     BE8 : FD 5E 04            		ld	e,(iy+04h)		; e - Channel ID
(1) 2401/     BEB : DD 4E 00            		ld	c,(ix+chnl_Flags)	; c - Panning bits
(1) 2402/     BEE : DD 21 AB 15         		ld	ix,pcmcom
(1) 2403/     BF2 : DD 19               		add	ix,de
(1) 2404/     BF4 : CB 40               		bit	0,b			; Note update?
(1) 2405/     BF6 : C8                  		ret	z
(1) 2406/     BF7 : FE FE               		cp	-2
(1) 2407/     BF9 : CA 5F 0C            		jp	z,.pcm_cut
(1) 2408/     BFC : FE FF               		cp	-1
(1) 2409/     BFE : CA 58 0C            		jp	z,.pcm_off
(1) 2410/     C01 : CF                  		rst	8
(1) 2411/     C02 : CB 40               		bit	0,b			; Note flag?
(1) 2412/     C04 : 20 0D               		jr	nz,.pcm_note
(1) 2413/     C06 : CB 58               		bit	3,b			; Effect flag?
(1) 2414/     C08 : 20 05               		jr	nz,.pcm_effc
(1) 2415/     C0A : CB 50               		bit	2,b			; Volume flag?
(1) 2416/     C0C : 20 01               		jr	nz,.pcm_effc
(1) 2417/     C0E : C9                  		ret
(1) 2418/     C0F :                     
(1) 2419/     C0F :                     ; --------------------------------
(1) 2420/     C0F :                     
(1) 2421/     C0F :                     .pcm_effc:
(1) 2422/     C0F : 1E 09               		ld	e,00001001b
(1) 2423/     C11 : 18 0C               		jr	.mkpcm_wrton
(1) 2424/     C13 :                     .pcm_note:
(1) 2425/     C13 : 79                  		ld	a,c		; <-- Lazy panning reset
(1) 2426/     C14 : E6 30               		and	00110000b	; Read LR bits
(1) 2427/     C16 : B7                  		or	a
(1) 2428/     C17 : 20 04               		jr	nz,.mp_reset
(1) 2429/     C19 : FD 36 0A 00         		ld	(iy+0Ah),0	; If 0, reset panning on table
(1) 2430/     C1D :                     .mp_reset:
(1) 2431/     C1D : 1E 01               		ld	e,00000001b	; KeyON request
(1) 2432/     C1F :                     .mkpcm_wrton:
(1) 2433/     C1F : DD 73 00            		ld	(ix),e		; Write key-on bit
(1) 2434/     C22 :                     .mkpcm_proc:
(1) 2435/     C22 : CD EC 0C            		call	.readfreq_pcm
(1) 2436/     C25 : 11 08 00            		ld	de,8		; Go to Pitch
(1) 2437/     C28 : DD 19               		add	ix,de
(1) 2438/     C2A : DD 74 00            		ld	(ix),h		; Set pitch
(1) 2439/     C2D : DD 19               		add	ix,de
(1) 2440/     C2F : DD 75 00            		ld	(ix),l
(1) 2441/     C32 : DD 19               		add	ix,de
(1) 2442/     C34 : 0E FF               		ld	c,-1		; <-- Lazy job
(1) 2443/     C36 : FD 7E 08            		ld	a,(iy+08h)	; Read current Volume
(1) 2444/     C39 : FD 96 03            		sub	a,(iy+03h)	; + MASTER vol
(1) 2445/     C3C : 3F                  		ccf
(1) 2446/     C3D : 8F                  		adc	a,a
(1) 2447/     C3E : 8F                  		adc	a,a
(1) 2448/     C3F : 38 02               		jr	c,.vpcm_carry
(1) 2449/     C41 : AF                  		xor	a
(1) 2450/     C42 : 81                  		add	a,c
(1) 2451/     C43 :                     .vpcm_carry:
(1) 2452/     C43 : 32 01 00            		ld	(1),a
(1) 2453/     C46 : DD 77 00            		ld	(ix),a
(1) 2454/     C49 : DD 19               		add	ix,de
(1) 2455/     C4B : FD 7E 0A            		ld	a,(iy+0Ah)
(1) 2456/     C4E : 2F                  		cpl
(1) 2457/     C4F : DD 77 00            		ld	(ix),a
(1) 2459/     C52 : 3E 01               		ld	a,1
(1) 2460/     C54 : 32 88 1F            		ld	(mcdUpd),a
(1) 2462/     C57 : C9                  		ret
(1) 2463/     C58 :                     
(1) 2464/     C58 :                     ; --------------------------------
(1) 2465/     C58 :                     ; -1
(1) 2466/     C58 :                     .pcm_off:
(1) 2467/     C58 : CF                  		rst	8
(1) 2468/     C59 : DD 36 00 02         		ld	(ix),010b
(1) 2469/     C5D : 18 05               		jr	.pcm_setcoff
(1) 2470/     C5F :                     ; -2
(1) 2471/     C5F :                     .pcm_cut:
(1) 2472/     C5F : CF                  		rst	8
(1) 2473/     C60 : DD 36 00 04         		ld	(ix),100b
(1) 2474/     C64 :                     .pcm_setcoff:
(1) 2475/     C64 : 3E 01               		ld	a,1
(1) 2476/     C66 : 32 88 1F            		ld	(mcdUpd),a
(1) 2477/     C69 : C3 3E 10            		jp	.chnl_ulnkoff
(1) 2478/     C6C :                     
(1) 2479/     C6C :                     ; --------------------------------
(1) 2480/     C6C :                     ; PWM
(1) 2481/     C6C :                     ; --------------------------------
(1) 2482/     C6C :                     
(1) 2483/     C6C :                     .mk_pwm:
(1) 2484/     C6C : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 2485/     C6F : 16 00               		ld	d,0
(1) 2486/     C71 : FD 5E 04            		ld	e,(iy+04h)		; e - Channel ID
(1) 2487/     C74 : DD 4E 00            		ld	c,(ix+chnl_Flags)	; c - Panning bits
(1) 2488/     C77 : DD 21 EB 15         		ld	ix,pwmcom
(1) 2489/     C7B : DD 19               		add	ix,de
(1) 2490/     C7D : FE FE               		cp	-2
(1) 2491/     C7F : CA DD 0C            		jp	z,.pwm_cut
(1) 2492/     C82 : FE FF               		cp	-1
(1) 2493/     C84 : CA D6 0C            		jp	z,.pwm_off
(1) 2494/     C87 : CF                  		rst	8
(1) 2495/     C88 : 78                  		ld	a,b
(1) 2496/     C89 : CB 40               		bit	0,b			; Note?
(1) 2497/     C8B : 20 09               		jr	nz,.pw_note
(1) 2498/     C8D : CB 58               		bit	3,b			; Effect?
(1) 2499/     C8F : 20 01               		jr	nz,.pw_effc
(1) 2500/     C91 : C9                  		ret
(1) 2501/     C92 :                     .pw_effc:
(1) 2502/     C92 : 1E 09               		ld	e,00001001b
(1) 2503/     C94 : 18 02               		jr	.pw_send
(1) 2504/     C96 :                     .pw_note:
(1) 2505/     C96 : 1E 01               		ld	e,00000001b	; KeyON request
(1) 2506/     C98 :                     .pw_send:
(1) 2507/     C98 : DD 73 00            		ld	(ix),e		; Set command
(1) 2508/     C9B : CD F1 0C            		call	.readfreq_pwm
(1) 2509/     C9E : 79                  		ld	a,c		; Read panning bits
(1) 2510/     C9F :                     ; 		rrca
(1) 2511/     C9F :                     ; 		rrca
(1) 2512/     C9F : 2F                  		cpl
(1) 2513/     CA0 : E6 30               		and	00110000b
(1) 2514/     CA2 : CF                  		rst	8
(1) 2515/     CA3 : 5F                  		ld	e,a		; e - set panning bits
(1) 2516/     CA4 : AF                  		xor	a
(1) 2517/     CA5 : FD 7E 08            		ld	a,(iy+08h)	; Read current volume
(1) 2518/     CA8 : FD 96 03            		sub	a,(iy+03h)	; + MASTER vol
(1) 2519/     CAB : ED 44               		neg	a
(1) 2520/     CAD : 3F                  		ccf
(1) 2521/     CAE : 8F                  		adc	a,a
(1) 2522/     CAF : 8F                  		adc	a,a
(1) 2523/     CB0 : 30 02               		jr	nc,.pwv_much
(1) 2524/     CB2 : 3E FF               		ld	a,-1
(1) 2525/     CB4 :                     .pwv_much:
(1) 2526/     CB4 : E6 FC               		and	11111100b
(1) 2527/     CB6 : B4                  		or	h		; Merge MSB freq
(1) 2528/     CB7 : 01 08 00            		ld	bc,8
(1) 2529/     CBA : DD 09               		add	ix,bc
(1) 2530/     CBC : DD 77 00            		ld	(ix),a
(1) 2531/     CBF : DD 09               		add	ix,bc
(1) 2532/     CC1 : DD 75 00            		ld	(ix),l
(1) 2533/     CC4 : DD 09               		add	ix,bc
(1) 2534/     CC6 : CF                  		rst	8
(1) 2535/     CC7 : DD 7E 00            		ld	a,(ix)
(1) 2536/     CCA : E6 CF               		and	11001111b
(1) 2537/     CCC : B3                  		or	e		; Set panning bits
(1) 2538/     CCD : DD 77 00            		ld	(ix),a
(1) 2540/     CD0 : 3E 01               		ld	a,1
(1) 2541/     CD2 : 32 87 1F            		ld	(marsUpd),a
(1) 2543/     CD5 : C9                  		ret
(1) 2544/     CD6 :                     
(1) 2545/     CD6 :                     ; --------------------------------
(1) 2546/     CD6 :                     ; -1
(1) 2547/     CD6 :                     .pwm_off:
(1) 2548/     CD6 : CF                  		rst	8
(1) 2549/     CD7 : DD 36 00 02         		ld	(ix),010b
(1) 2550/     CDB : 18 05               		jr	.pwm_setcoff
(1) 2551/     CDD :                     ; -2
(1) 2552/     CDD :                     .pwm_cut:
(1) 2553/     CDD : CF                  		rst	8
(1) 2554/     CDE : DD 36 00 04         		ld	(ix),100b
(1) 2555/     CE2 :                     .pwm_setcoff:
(1) 2556/     CE2 : 3E 01               		ld	a,1
(1) 2557/     CE4 : 32 87 1F            		ld	(marsUpd),a
(1) 2558/     CE7 : DD E1               		pop	ix
(1) 2559/     CE9 : C3 3E 10            		jp	.chnl_ulnkoff
(1) 2560/     CEC :                     
(1) 2561/     CEC :                     ; --------------------------------
(1) 2562/     CEC :                     ; SHARED routine
(1) 2563/     CEC :                     
(1) 2564/     CEC :                     .readfreq_pcm:
(1) 2565/     CEC : 21 E9 14            		ld	hl,wavFreq_CdPcm-(36*2)
(1) 2566/     CEF : 18 03               		jr	.set_wavfreq
(1) 2567/     CF1 :                     .readfreq_pwm:
(1) 2568/     CF1 : 21 89 14            		ld	hl,wavFreq_List-(36*2)
(1) 2569/     CF4 :                     .set_wavfreq:
(1) 2570/     CF4 : 16 00               		ld	d,0		; Freq index
(1) 2571/     CF6 : FD 5E 06            		ld	e,(iy+06h)
(1) 2572/     CF9 : 19                  		add	hl,de
(1) 2573/     CFA : 7E                  		ld	a,(hl)
(1) 2574/     CFB : 23                  		inc	hl
(1) 2575/     CFC : 66                  		ld	h,(hl)
(1) 2576/     CFD : 6F                  		ld	l,a
(1) 2577/     CFE : FD 5E 07            		ld	e,(iy+07h)	; pitchbend
(1) 2578/     D01 : CF                  		rst	8
(1) 2579/     D02 : AF                  		xor	a		; Clear high
(1) 2580/     D03 : 3F                  		ccf			; Clear carry
(1) 2581/     D04 : CB 23               		sla	e		; << 2
(1) 2582/     D06 : CB 23               		sla	e
(1) 2583/     D08 : 9F                  		sbc	a,a		; -1 if carry is set
(1) 2584/     D09 : 57                  		ld	d,a
(1) 2585/     D0A : 19                  		add	hl,de
(1) 2586/     D0B : C9                  		ret
(1) 2587/     D0C :                     
(1) 2588/     D0C :                     ; ----------------------------------------
(1) 2589/     D0C :                     ; NEW effect
(1) 2590/     D0C :                     ; ----------------------------------------
(1) 2591/     D0C :                     
(1) 2592/     D0C :                     .effc:
(1) 2593/     D0C : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - effect data
(1) 2594/     D0F : DD 7E 05            		ld	a,(ix+chnl_EffId)	; d - effect id
(1) 2595/     D12 : 57                  		ld	d,a
(1) 2596/     D13 : CF                  		rst	8
(1) 2597/     D14 : FE 04               		cp	4			; Effect D?
(1) 2598/     D16 : 28 0F               		jr	z,.effc_D
(1) 2599/     D18 : FE 05               		cp	5			; Effect E?
(1) 2600/     D1A : 28 4E               		jr	z,.effc_E
(1) 2601/     D1C : FE 06               		cp	6			; Effect F?
(1) 2602/     D1E : 28 5F               		jr	z,.effc_F
(1) 2603/     D20 : CF                  		rst	8
(1) 2604/     D21 : FE 18               		cp	24			; Effect X?
(1) 2605/     D23 : CA A0 0D            		jp	z,.effc_X
(1) 2606/     D26 : C9                  		ret
(1) 2607/     D27 :                     
(1) 2608/     D27 :                     ; ----------------------------------------
(1) 2609/     D27 :                     ; Effect D
(1) 2610/     D27 :                     ;
(1) 2611/     D27 :                     ; Volume slide down
(1) 2612/     D27 :                     ;
(1) 2613/     D27 :                     ; 0xh-Exh - Normal
(1) 2614/     D27 :                     ; Fxh-Fxh - Fine slide / 2
(1) 2615/     D27 :                     ; ----------------------------------------
(1) 2616/     D27 :                     
(1) 2617/     D27 :                     .effc_D:
(1) 2618/     D27 : CD 94 0D            		call	.save_arg
(1) 2619/     D2A : 79                  		ld	a,c		; Setting == 0?
(1) 2620/     D2B : B7                  		or	a
(1) 2621/     D2C : C8                  		ret	z
(1) 2622/     D2D : E6 F0               		and	0F0h
(1) 2623/     D2F : 28 0F               		jr	z,.norm_down	; 0xh
(1) 2624/     D31 : FE F0               		cp	0F0h
(1) 2625/     D33 : 28 0D               		jr	z,.fine_down	; Fxh
(1) 2626/     D35 : CF                  		rst	8
(1) 2627/     D36 : 79                  		ld	a,c
(1) 2628/     D37 : E6 0F               		and	00Fh
(1) 2629/     D39 : 28 1D               		jr	z,.norm_up	; x0h
(1) 2630/     D3B : FE 0F               		cp	00Fh
(1) 2631/     D3D : 28 17               		jr	z,.fine_up	; xFh
(1) 2632/     D3F : C9                  		ret
(1) 2633/     D40 :                     ; Go down
(1) 2634/     D40 :                     .norm_down:
(1) 2635/     D40 : CB 21               		sla	c
(1) 2636/     D42 :                     .fine_down:
(1) 2637/     D42 : CB 21               		sla	c
(1) 2638/     D44 : 79                  		ld	a,c
(1) 2639/     D45 : E6 3C               		and	00111100b
(1) 2640/     D47 : 4F                  		ld	c,a
(1) 2641/     D48 : FD 7E 08            		ld	a,(iy+08h)	; Current volume
(1) 2642/     D4B : CF                  		rst	8
(1) 2643/     D4C : 91                  		sub	a,c
(1) 2644/     D4D : 1E C0               		ld	e,0C0h
(1) 2645/     D4F : BB                  		cp	e
(1) 2646/     D50 : D2 66 0D            		jp	nc,.vol_dvld
(1) 2647/     D53 : 7B                  		ld	a,e
(1) 2648/     D54 : 18 10               		jr 	.vol_dvld
(1) 2649/     D56 :                     ; Go up
(1) 2650/     D56 :                     .fine_up:
(1) 2651/     D56 : CB 39               		srl	c
(1) 2652/     D58 :                     .norm_up:
(1) 2653/     D58 : CB 39               		srl	c
(1) 2654/     D5A : 79                  		ld	a,c
(1) 2655/     D5B : E6 3C               		and	00111100b
(1) 2656/     D5D : 4F                  		ld	c,a
(1) 2657/     D5E : FD 7E 08            		ld	a,(iy+08h)	; Current volume
(1) 2658/     D61 : CF                  		rst	8
(1) 2659/     D62 : 81                  		add	a,c
(1) 2660/     D63 : 38 01               		jr	c,.vol_dvld
(1) 2661/     D65 : AF                  		xor	a
(1) 2662/     D66 :                     .vol_dvld:
(1) 2663/     D66 : FD 77 08            		ld	(iy+08h),a
(1) 2664/     D69 : C9                  		ret
(1) 2665/     D6A :                     
(1) 2666/     D6A :                     ; ----------------------------------------
(1) 2667/     D6A :                     ; Effect E
(1) 2668/     D6A :                     ; ----------------------------------------
(1) 2669/     D6A :                     
(1) 2670/     D6A :                     .effc_E:
(1) 2671/     D6A : CD 94 0D            		call	.save_arg
(1) 2672/     D6D : 79                  		ld	a,c
(1) 2673/     D6E : E6 F0               		and	0F0h
(1) 2674/     D70 : FE F0               		cp	0F0h
(1) 2675/     D72 : C8                  		ret	z
(1) 2676/     D73 : FE E0               		cp	0E0h
(1) 2677/     D75 : C8                  		ret	z
(1) 2678/     D76 : CF                  		rst	8
(1) 2679/     D77 : FD 7E 07            		ld	a,(iy+07h)
(1) 2680/     D7A : 91                  		sub	a,c
(1) 2681/     D7B : FD 77 07            		ld	(iy+07h),a
(1) 2682/     D7E : C9                  		ret
(1) 2683/     D7F :                     
(1) 2684/     D7F :                     ; ----------------------------------------
(1) 2685/     D7F :                     ; Effect F
(1) 2686/     D7F :                     ; ----------------------------------------
(1) 2687/     D7F :                     
(1) 2688/     D7F :                     .effc_F:
(1) 2689/     D7F : CD 94 0D            		call	.save_arg
(1) 2690/     D82 : 79                  		ld	a,c
(1) 2691/     D83 : E6 F0               		and	0F0h
(1) 2692/     D85 : FE F0               		cp	0F0h
(1) 2693/     D87 : C8                  		ret	z
(1) 2694/     D88 : FE E0               		cp	0E0h
(1) 2695/     D8A : C8                  		ret	z
(1) 2696/     D8B : CF                  		rst	8
(1) 2697/     D8C : FD 7E 07            		ld	a,(iy+07h)
(1) 2698/     D8F : 81                  		add	a,c
(1) 2699/     D90 : FD 77 07            		ld	(iy+07h),a
(1) 2700/     D93 : C9                  		ret
(1) 2701/     D94 :                     
(1) 2702/     D94 :                     ; --------------------------------
(1) 2703/     D94 :                     ; e - got arg
(1) 2704/     D94 :                     ; c - new arg
(1) 2705/     D94 :                     .save_arg:
(1) 2706/     D94 : FD 4E 09            		ld	c,(iy+09h)	; Current slide setting
(1) 2707/     D97 : 7B                  		ld	a,e		; EffArg is non-zero?
(1) 2708/     D98 : B7                  		or	a
(1) 2709/     D99 : 28 04               		jr	z,.D_cont	; 00h = slide continue
(1) 2710/     D9B : 4F                  		ld	c,a
(1) 2711/     D9C : FD 71 09            		ld	(iy+09h),c	; Store NEW slide setting
(1) 2712/     D9F :                     .D_cont:
(1) 2713/     D9F : C9                  		ret
(1) 2714/     DA0 :                     
(1) 2715/     DA0 :                     ; ----------------------------------------
(1) 2716/     DA0 :                     ; Effect X
(1) 2717/     DA0 :                     ;
(1) 2718/     DA0 :                     ; Common panning values:
(1) 2719/     DA0 :                     ;  00h LEFT
(1) 2720/     DA0 :                     ;  80h MIDDLE
(1) 2721/     DA0 :                     ; 0FFh RIGHT
(1) 2722/     DA0 :                     ; ----------------------------------------
(1) 2723/     DA0 :                     
(1) 2724/     DA0 :                     .effc_X:
(1) 2725/     DA0 : 16 00               		ld	d,0
(1) 2726/     DA2 : 7E                  		ld	a,(hl)
(1) 2727/     DA3 : E6 F0               		and	11110000b
(1) 2728/     DA5 : FE 80               		cp	80h		; PSG?
(1) 2729/     DA7 : 28 1D               		jr	z,.res_pan
(1) 2730/     DA9 : FE 90               		cp	90h		; PSGN?
(1) 2731/     DAB : 28 19               		jr	z,.res_pan
(1) 2732/     DAD : FE D0               		cp	0D0h		; MCD: write separate PAN values
(1) 2733/     DAF : CC D0 0D            		call	z,.pan_mcd	; <-- CALL, not JP
(1) 2734/     DB2 :                     
(1) 2735/     DB2 :                     	; ----------------------------------------
(1) 2736/     DB2 :                     	; Common panning bits: %00LR0000
(1) 2737/     DB2 :                     	; (REVERSE: 0-on 1-off)
(1) 2738/     DB2 : FD 36 09 00         		ld	(iy+09h),0
(1) 2739/     DB6 : CF                  		rst	8
(1) 2740/     DB7 : E5                  		push	hl
(1) 2741/     DB8 : 21 E6 0D            		ld	hl,.comn_panlist
(1) 2742/     DBB : 7B                  		ld	a,e
(1) 2743/     DBC : 07                  		rlca
(1) 2744/     DBD : 07                  		rlca
(1) 2745/     DBE : 07                  		rlca
(1) 2746/     DBF : E6 07               		and	0111b
(1) 2747/     DC1 :                     ; 		ld	d,0
(1) 2748/     DC1 : 5F                  		ld	e,a
(1) 2749/     DC2 : CF                  		rst	8
(1) 2750/     DC3 : 19                  		add	hl,de
(1) 2751/     DC4 : 56                  		ld	d,(hl)
(1) 2752/     DC5 : E1                  		pop	hl
(1) 2753/     DC6 :                     .res_pan:
(1) 2754/     DC6 : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Save panning
(1) 2755/     DC9 : E6 CF               		and	11001111b
(1) 2756/     DCB : B2                  		or	d
(1) 2757/     DCC : DD 77 00            		ld	(ix+chnl_Flags),a
(1) 2758/     DCF : C9                  		ret
(1) 2759/     DD0 :                     
(1) 2760/     DD0 :                     	; ----------------------------------------
(1) 2761/     DD0 :                     	; MCD panning
(1) 2762/     DD0 :                     .pan_mcd:
(1) 2763/     DD0 : E5                  		push	hl
(1) 2764/     DD1 : D5                  		push	de
(1) 2765/     DD2 : 16 00               		ld	d,0
(1) 2766/     DD4 : 21 EE 0D            		ld	hl,.pcm_panlist
(1) 2767/     DD7 : 7B                  		ld	a,e
(1) 2768/     DD8 : E6 F8               		and	0F8h
(1) 2769/     DDA : 0F                  		rrca
(1) 2770/     DDB : 0F                  		rrca
(1) 2771/     DDC : 0F                  		rrca
(1) 2772/     DDD : 5F                  		ld	e,a
(1) 2773/     DDE : 19                  		add	hl,de
(1) 2774/     DDF : 7E                  		ld	a,(hl)
(1) 2775/     DE0 : FD 77 0A            		ld	(iy+0Ah),a
(1) 2776/     DE3 : D1                  		pop	de
(1) 2777/     DE4 : E1                  		pop	hl
(1) 2778/     DE5 : C9                  		ret
(1) 2779/     DE6 :                     
(1) 2780/     DE6 :                     ; 0 - ENABLE, 1 - DISABLE
(1) 2781/     DE6 :                     ; 00LR0000b
(1) 2782/     DE6 :                     .comn_panlist:
(1) 2783/     DE6 : 10                  		db 00010000b
(1) 2784/     DE7 : 10                  		db 00010000b
(1) 2785/     DE8 : 10                  		db 00010000b
(1) 2786/     DE9 : 00                  		db 00000000b
(1) 2787/     DEA : 00                  		db 00000000b
(1) 2788/     DEB : 20                  		db 00100000b
(1) 2789/     DEC : 20                  		db 00100000b
(1) 2790/     DED : 20                  		db 00100000b
(1) 2791/     DEE :                     
(1) 2792/     DEE :                     ; REVERSE OUTPUT BITS
(1) 2793/     DEE :                     ; RRRR | LLLL
(1) 2794/     DEE :                     .pcm_panlist:
(1) 2795/     DEE : F0                  		db 0F0h	; 00h
(1) 2796/     DEF : E0                  		db 0E0h
(1) 2797/     DF0 : D0                  		db 0D0h	; 10h
(1) 2798/     DF1 : C0                  		db 0C0h
(1) 2799/     DF2 : B0                  		db 0B0h	; 20h
(1) 2800/     DF3 : A0                  		db 0A0h
(1) 2801/     DF4 : 90                  		db 090h	; 30h
(1) 2802/     DF5 : 80                  		db 080h
(1) 2803/     DF6 : 70                  		db 070h	; 40h
(1) 2804/     DF7 : 60                  		db 060h
(1) 2805/     DF8 : 50                  		db 050h	; 50h
(1) 2806/     DF9 : 40                  		db 040h
(1) 2807/     DFA : 30                  		db 030h	; 60h
(1) 2808/     DFB : 20                  		db 020h
(1) 2809/     DFC : 10                  		db 010h	; 70h
(1) 2810/     DFD : 00                  		db 000h
(1) 2811/     DFE : 00                  		db 000h ; 80h
(1) 2812/     DFF : 01                  		db 001h
(1) 2813/     E00 : 02                  		db 002h ; 90h
(1) 2814/     E01 : 03                  		db 003h
(1) 2815/     E02 : 04                  		db 004h ; A0h
(1) 2816/     E03 : 05                  		db 005h
(1) 2817/     E04 : 06                  		db 006h ; B0h
(1) 2818/     E05 : 07                  		db 007h
(1) 2819/     E06 : 08                  		db 008h ; C0h
(1) 2820/     E07 : 09                  		db 009h
(1) 2821/     E08 : 0A                  		db 00Ah ; D0h
(1) 2822/     E09 : 0B                  		db 00Bh
(1) 2823/     E0A : 0C                  		db 00Ch ; E0h
(1) 2824/     E0B : 0D                  		db 00Dh
(1) 2825/     E0C : 0E                  		db 00Eh ; F0h
(1) 2826/     E0D : 0F                  		db 00Fh
(1) 2827/     E0E :                     
(1) 2828/     E0E :                     ; ----------------------------------------
(1) 2829/     E0E :                     ; NEW volume
(1) 2830/     E0E :                     ; ----------------------------------------
(1) 2831/     E0E :                     
(1) 2832/     E0E :                     .volu:
(1) 2833/     E0E : DD 7E 04            		ld	a,(ix+chnl_Vol)
(1) 2834/     E11 : D6 40               		sub	a,64
(1) 2835/     E13 : FD 77 08            		ld	(iy+08h),a	; BASE volume
(1) 2836/     E16 : C9                  		ret
(1) 2837/     E17 :                     
(1) 2838/     E17 :                     ; ----------------------------------------
(1) 2839/     E17 :                     ; NEW instrument
(1) 2840/     E17 :                     ; ----------------------------------------
(1) 2841/     E17 :                     
(1) 2842/     E17 :                     .inst:
(1) 2843/     E17 : 7E                  		ld	a,(hl)
(1) 2844/     E18 : E6 F0               		and	11110000b
(1) 2845/     E1A : FE 80               		cp	080h
(1) 2846/     E1C : 28 24               		jr	z,.ins_psg
(1) 2847/     E1E : FE 90               		cp	090h
(1) 2848/     E20 : 28 1A               		jr	z,.ins_psgn
(1) 2849/     E22 : FE A0               		cp	0A0h
(1) 2850/     E24 : 28 52               		jr	z,.ins_fm
(1) 2851/     E26 : CF                  		rst	8
(1) 2852/     E27 : FE B0               		cp	0B0h
(1) 2853/     E29 : 28 4D               		jr	z,.ins_fm
(1) 2854/     E2B : FE C0               		cp	0C0h
(1) 2855/     E2D : CA F9 0E            		jp	z,.ins_dac
(1) 2856/     E30 : FE D0               		cp	0D0h
(1) 2857/     E32 : CA 4D 0F            		jp	z,.ins_pcm
(1) 2858/     E35 : FE E0               		cp	0E0h
(1) 2859/     E37 : CA 85 0F            		jp	z,.ins_pwm
(1) 2860/     E3A : CF                  		rst	8
(1) 2861/     E3B :                     .invl_ins:
(1) 2862/     E3B : C9                  		ret
(1) 2863/     E3C :                     
(1) 2864/     E3C :                     ; ----------------------------------------
(1) 2865/     E3C :                     ; PSG
(1) 2866/     E3C :                     
(1) 2867/     E3C :                     .ins_psgn:
(1) 2868/     E3C : 7E                  		ld	a,(hl)		; Grab noise setting
(1) 2869/     E3D : E6 07               		and	0111b
(1) 2870/     E3F : 32 83 1F            		ld	(psgHatMode),a	; ** SET GLOBAL SETTING
(1) 2871/     E42 :                     .ins_psg:
(1) 2872/     E42 : CF                  		rst	8
(1) 2873/     E43 : DD E5               		push	ix
(1) 2874/     E45 : E5                  		push	hl
(1) 2875/     E46 : 23                  		inc	hl		; Skip ID
(1) 2876/     E47 : DD 21 23 16         		ld	ix,psgcom	; Read psg control
(1) 2877/     E4B : FD 5E 04            		ld	e,(iy+04h)
(1) 2878/     E4E : 16 00               		ld	d,0
(1) 2879/     E50 : DD 19               		add	ix,de
(1) 2880/     E52 : 7E                  		ld	a,(hl)
(1) 2881/     E53 : CF                  		rst	8
(1) 2882/     E54 : 23                  		inc	hl
(1) 2883/     E55 : 7E                  		ld	a,(hl)
(1) 2884/     E56 : DD 77 24            		ld	(ix+ALV),a	; ALV
(1) 2885/     E59 : 23                  		inc	hl
(1) 2886/     E5A : 7E                  		ld	a,(hl)
(1) 2887/     E5B : DD 77 08            		ld	(ix+ATK),a	; ATK
(1) 2888/     E5E : 23                  		inc	hl
(1) 2889/     E5F : 7E                  		ld	a,(hl)
(1) 2890/     E60 : CF                  		rst	8
(1) 2891/     E61 : DD 77 10            		ld	(ix+SLV),a	; SLV
(1) 2892/     E64 : 23                  		inc	hl
(1) 2893/     E65 : 7E                  		ld	a,(hl)
(1) 2894/     E66 : DD 77 0C            		ld	(ix+DKY),a	; DKY
(1) 2895/     E69 : 23                  		inc	hl
(1) 2896/     E6A : 7E                  		ld	a,(hl)
(1) 2897/     E6B : DD 77 14            		ld	(ix+RRT),a	; RRT
(1) 2898/     E6E : 23                  		inc	hl
(1) 2899/     E6F : 7E                  		ld	a,(hl)
(1) 2900/     E70 : CF                  		rst	8
(1) 2901/     E71 : DD 77 34            		ld	(ix+PARP),a	; ARP
(1) 2902/     E74 : E1                  		pop	hl
(1) 2903/     E75 : DD E1               		pop	ix
(1) 2904/     E77 : C9                  		ret
(1) 2905/     E78 :                     
(1) 2906/     E78 :                     ; ----------------------------------------
(1) 2907/     E78 :                     ; FM/FM3
(1) 2908/     E78 :                     
(1) 2909/     E78 :                     .ins_fm:
(1) 2910/     E78 : DD E5               		push	ix
(1) 2911/     E7A : E5                  		push	hl
(1) 2912/     E7B : C5                  		push	bc
(1) 2913/     E7C :                     ; 		ld	b,(ix+chnl_Ins)	; b - current Ins
(1) 2914/     E7C : FD 46 02            		ld	b,(iy+02h)
(1) 2915/     E7F : FD 7E 04            		ld	a,(iy+04h)
(1) 2916/     E82 : E6 07               		and	0111b
(1) 2917/     E84 : 16 00               		ld	d,0
(1) 2918/     E86 : 87                  		add	a,a
(1) 2919/     E87 : 5F                  		ld	e,a
(1) 2920/     E88 : DD 21 4B 14         		ld	ix,fmcach_list
(1) 2921/     E8C : DD 19               		add	ix,de
(1) 2922/     E8E : CF                  		rst	8
(1) 2923/     E8F : DD 5E 00            		ld	e,(ix)
(1) 2924/     E92 : DD 23               		inc	ix
(1) 2925/     E94 : DD 56 00            		ld	d,(ix)
(1) 2926/     E97 :                     
(1) 2927/     E97 :                     ; 		ld	a,(iy+0Bh)	; 0Bh: DON'T reload flag
(1) 2928/     E97 :                     ; 		cp	b
(1) 2929/     E97 :                     ; 		jr	z,.same_patch
(1) 2930/     E97 :                     ; 		ld	(iy+0Bh),b
(1) 2931/     E97 : 23                  		inc	hl		; Skip id and pitch
(1) 2932/     E98 : 23                  		inc	hl
(1) 2933/     E99 :                     
(1) 2934/     E99 : 46                  		ld	b,(hl)
(1) 2935/     E9A : 23                  		inc	hl
(1) 2936/     E9B : 4E                  		ld	c,(hl)
(1) 2937/     E9C : 23                  		inc	hl
(1) 2938/     E9D : 6E                  		ld	l,(hl)
(1) 2939/     E9E : 61                  		ld	h,c
(1) 2940/     E9F :                     
(1) 2941/     E9F : FD 7E 0A            		ld	a,(iy+0Ah)
(1) 2942/     EA2 : BC                  		cp	h
(1) 2943/     EA3 : 20 07               		jr	nz,.new_romdat
(1) 2944/     EA5 : CF                  		rst	8
(1) 2945/     EA6 : FD 7E 0B            		ld	a,(iy+0Bh)
(1) 2946/     EA9 : BD                  		cp	l
(1) 2947/     EAA : 28 38               		jr	z,.same_patch
(1) 2948/     EAC :                     .new_romdat:
(1) 2949/     EAC : FD 74 0A            		ld	(iy+0Ah),h
(1) 2950/     EAF : FD 75 0B            		ld	(iy+0Bh),l
(1) 2951/     EB2 : 78                  		ld	a,b
(1) 2952/     EB3 : 01 28 00            		ld	bc,28h		; <- size
(1) 2953/     EB6 : D5                  		push	de
(1) 2954/     EB7 : CD E7 10            		call	transferRom	; *** ROM ACCESS ***
(1) 2955/     EBA :                     
(1) 2956/     EBA : E1                  		pop	hl
(1) 2957/     EBB : FD 7E 04            		ld	a,(iy+04h)
(1) 2958/     EBE : 4F                  		ld	c,a		; c - FM Key ID
(1) 2959/     EBF :                     
(1) 2960/     EBF :                     	; hl - fmcach intrument
(1) 2961/     EBF :                     	; de - FM reg and data: 3000h
(1) 2962/     EBF :                     	;  c - FM keyChannel
(1) 2963/     EBF : 79                  		ld	a,c
(1) 2964/     EC0 : E6 03               		and	011b
(1) 2965/     EC2 : F6 30               		or	30h		; Start at reg 30h
(1) 2966/     EC4 : 57                  		ld	d,a
(1) 2967/     EC5 : 1E 00               		ld	e,0
(1) 2968/     EC7 : CF                  		rst	8
(1) 2969/     EC8 : 06 1C               		ld	b,7*4		; Write ALL base FM registers
(1) 2970/     ECA : CD E9 0E            		call	.fm_setrlist
(1) 2971/     ECD :                     ; 		ld	b,4
(1) 2972/     ECD :                     ; 		call	.fm_setrlist
(1) 2973/     ECD :                     ; 		ld	b,5*4
(1) 2974/     ECD :                     ; 		call	.fm_setrlist
(1) 2975/     ECD : 7E                  		ld	a,(hl)		; 0B0h
(1) 2976/     ECE : FD 77 0C            		ld	(iy+0Ch),a	; ** Save 0B0h to 0Ch
(1) 2977/     ED1 : 23                  		inc	hl
(1) 2978/     ED2 : 7E                  		ld	a,(hl)		; 0B4h
(1) 2979/     ED3 : FD 77 0D            		ld	(iy+0Dh),a	; ** Save 0B4h to 0Dh
(1) 2980/     ED6 : 23                  		inc	hl
(1) 2981/     ED7 : CF                  		rst	8
(1) 2982/     ED8 : 7E                  		ld	a,(hl)
(1) 2983/     ED9 : FD 77 0E            		ld	(iy+0Eh),a	; LFO
(1) 2984/     EDC : 23                  		inc	hl
(1) 2985/     EDD : 7E                  		ld	a,(hl)		; 028h keys
(1) 2986/     EDE : E6 F0               		and	11110000b
(1) 2987/     EE0 : CF                  		rst	8
(1) 2988/     EE1 : FD 77 0F            		ld	(iy+0Fh),a	; ** Save keys to 0Eh
(1) 2989/     EE4 :                     .same_patch:
(1) 2990/     EE4 : C1                  		pop	bc
(1) 2991/     EE5 : E1                  		pop	hl
(1) 2992/     EE6 : DD E1               		pop	ix
(1) 2993/     EE8 : C9                  		ret
(1) 2994/     EE9 :                     ; b - numof_regs
(1) 2995/     EE9 :                     .fm_setrlist:
(1) 2996/     EE9 : 5E                  		ld	e,(hl)
(1) 2997/     EEA : 23                  		inc	hl
(1) 2998/     EEB : CD 02 13            		call	fm_autoreg
(1) 2999/     EEE : 00                  		nop
(1) 3000/     EEF : 00                  		nop
(1) 3001/     EF0 : CF                  		rst	8
(1) 3002/     EF1 : 00                  		nop
(1) 3003/     EF2 : 14                  		inc	d		; +4
(1) 3004/     EF3 : 14                  		inc	d
(1) 3005/     EF4 : 14                  		inc	d
(1) 3006/     EF5 : 14                  		inc	d
(1) 3007/     EF6 : 10 F1               		djnz	.fm_setrlist
(1) 3008/     EF8 : C9                  		ret
(1) 3009/     EF9 :                     
(1) 3010/     EF9 :                     ; ----------------------------------------
(1) 3011/     EF9 :                     
(1) 3012/     EF9 :                     .ins_dac:
(1) 3013/     EF9 : E5                  		push	hl
(1) 3014/     EFA : C5                  		push	bc
(1) 3015/     EFB : CD 31 13            		call	dac_off
(1) 3016/     EFE : 7E                  		ld	a,(hl)
(1) 3017/     EFF : E6 0F               		and	00001111b
(1) 3018/     F01 : 32 94 1F            		ld	(wave_Flags),a
(1) 3019/     F04 : CF                  		rst	8
(1) 3020/     F05 : 23                  		inc	hl
(1) 3021/     F06 : 23                  		inc	hl
(1) 3022/     F07 : 5E                  		ld	e,(hl)
(1) 3023/     F08 : 23                  		inc	hl
(1) 3024/     F09 : 7E                  		ld	a,(hl)
(1) 3025/     F0A : 23                  		inc	hl
(1) 3026/     F0B : 6E                  		ld	l,(hl)
(1) 3027/     F0C : 67                  		ld	h,a
(1) 3028/     F0D : E5                  		push	hl
(1) 3029/     F0E : 7B                  		ld	a,e
(1) 3030/     F0F : 01 06 00            		ld	bc,6		; Skip head
(1) 3031/     F12 : 09                  		add	hl,bc
(1) 3032/     F13 : CE 00               		adc	a,0
(1) 3033/     F15 : 22 89 1F            		ld	(wave_Start),hl	; Set START point
(1) 3034/     F18 : 32 8B 1F            		ld	(wave_Start+2),a
(1) 3035/     F1B : E1                  		pop	hl
(1) 3036/     F1C : 7B                  		ld	a,e
(1) 3037/     F1D : 11 B4 1F            		ld	de,sampleHead
(1) 3038/     F20 : 01 06 00            		ld	bc,6
(1) 3039/     F23 : D5                  		push	de
(1) 3040/     F24 : CF                  		rst	8
(1) 3041/     F25 : CD E7 10            		call	transferRom	; *** ROM ACCESS ***
(1) 3042/     F28 : E1                  		pop	hl
(1) 3043/     F29 :                     	; hl - temporal header
(1) 3044/     F29 : 5E                  		ld	e,(hl)
(1) 3045/     F2A : 23                  		inc	hl
(1) 3046/     F2B : 56                  		ld	d,(hl)
(1) 3047/     F2C : 23                  		inc	hl
(1) 3048/     F2D : 7E                  		ld	a,(hl)
(1) 3049/     F2E : 23                  		inc	hl
(1) 3050/     F2F : ED 53 8C 1F         		ld	(wave_Len),de	; LEN
(1) 3051/     F33 : 32 8E 1F            		ld	(wave_Len+2),a
(1) 3052/     F36 : 5E                  		ld	e,(hl)
(1) 3053/     F37 : 23                  		inc	hl
(1) 3054/     F38 : CF                  		rst	8
(1) 3055/     F39 : 56                  		ld	d,(hl)
(1) 3056/     F3A : 23                  		inc	hl
(1) 3057/     F3B : 7E                  		ld	a,(hl)
(1) 3058/     F3C : 23                  		inc	hl
(1) 3059/     F3D : ED 53 8F 1F         		ld	(wave_Loop),de	; LOOP
(1) 3060/     F41 : 32 91 1F            		ld	(wave_Loop+2),a
(1) 3061/     F44 : 11 06 28            		ld	de,2806h	; keys off
(1) 3062/     F47 : CD 06 13            		call	fm_send_1
(1) 3063/     F4A : C1                  		pop	bc
(1) 3064/     F4B : E1                  		pop	hl
(1) 3065/     F4C :                     ; .same_dac:
(1) 3066/     F4C : C9                  		ret
(1) 3067/     F4D :                     
(1) 3068/     F4D :                     ; ----------------------------------------
(1) 3069/     F4D :                     
(1) 3070/     F4D :                     .ins_pcm:
(1) 3071/     F4D : DD E5               		push	ix
(1) 3072/     F4F : E5                  		push	hl
(1) 3073/     F50 : C5                  		push	bc
(1) 3074/     F51 : 7E                  		ld	a,(hl)		; Stereo|Loop bits
(1) 3075/     F52 : E6 01               		and	00000001b	; Read loop bit
(1) 3076/     F54 : 0F                  		rrca			; Move to MSB
(1) 3077/     F55 : CF                  		rst	8
(1) 3078/     F56 : 23                  		inc	hl		; Skip ID and Pitch
(1) 3079/     F57 : 23                  		inc	hl
(1) 3080/     F58 : 5E                  		ld	e,(hl)		; Read 24-bit pointer
(1) 3081/     F59 : B3                  		or	e
(1) 3082/     F5A : 5F                  		ld	e,a
(1) 3083/     F5B : 23                  		inc	hl
(1) 3084/     F5C : 7E                  		ld	a,(hl)
(1) 3085/     F5D : 23                  		inc	hl
(1) 3086/     F5E : 6E                  		ld	l,(hl)
(1) 3087/     F5F : 67                  		ld	h,a
(1) 3088/     F60 :                     	; d    - Loop enable bit
(1) 3089/     F60 :                     	; e,hl - 24-bit pointer + loop bit
(1) 3090/     F60 : DD 21 AB 15         		ld	ix,pcmcom
(1) 3091/     F64 : 06 00               		ld	b,0
(1) 3092/     F66 : FD 4E 04            		ld	c,(iy+04h)
(1) 3093/     F69 : DD 09               		add	ix,bc
(1) 3094/     F6B : 01 28 00            		ld	bc,40		; Go to 40
(1) 3095/     F6E : DD 09               		add	ix,bc
(1) 3096/     F70 : 01 08 00            		ld	bc,8
(1) 3097/     F73 : DD 73 00            		ld	(ix),e		; Write 24-bit pointer
(1) 3098/     F76 : DD 09               		add	ix,bc
(1) 3099/     F78 : DD 74 00            		ld	(ix),h
(1) 3100/     F7B : DD 09               		add	ix,bc
(1) 3101/     F7D : DD 75 00            		ld	(ix),l
(1) 3102/     F80 : C1                  		pop	bc
(1) 3103/     F81 : E1                  		pop	hl
(1) 3104/     F82 : DD E1               		pop	ix
(1) 3105/     F84 : C9                  		ret
(1) 3106/     F85 :                     
(1) 3107/     F85 :                     ; ----------------------------------------
(1) 3108/     F85 :                     
(1) 3109/     F85 :                     .ins_pwm:
(1) 3110/     F85 : DD E5               		push	ix
(1) 3111/     F87 : E5                  		push	hl
(1) 3112/     F88 : C5                  		push	bc
(1) 3113/     F89 : 7E                  		ld	a,(hl)		; Stereo|Loop bits
(1) 3114/     F8A : E6 03               		and	00000011b
(1) 3115/     F8C : 0F                  		rrca
(1) 3116/     F8D : 0F                  		rrca
(1) 3117/     F8E : 4F                  		ld	c,a
(1) 3118/     F8F : CF                  		rst	8
(1) 3119/     F90 : 23                  		inc	hl		; Skip ID and Pitch
(1) 3120/     F91 : 23                  		inc	hl
(1) 3121/     F92 : 56                  		ld	d,(hl)
(1) 3122/     F93 : 23                  		inc	hl
(1) 3123/     F94 : 5E                  		ld	e,(hl)
(1) 3124/     F95 : 23                  		inc	hl
(1) 3125/     F96 : 7E                  		ld	a,(hl)
(1) 3126/     F97 : 23                  		inc	hl
(1) 3127/     F98 : 6E                  		ld	l,(hl)
(1) 3128/     F99 : 67                  		ld	h,a
(1) 3129/     F9A : 79                  		ld	a,c
(1) 3130/     F9B : B2                  		or	d
(1) 3131/     F9C : 57                  		ld	d,a
(1) 3132/     F9D : CF                  		rst	8
(1) 3133/     F9E :                     	; de,hl - 32-bit PWM pointer
(1) 3134/     F9E : DD 21 EB 15         		ld	ix,pwmcom
(1) 3135/     FA2 : 06 00               		ld	b,0
(1) 3136/     FA4 : FD 4E 04            		ld	c,(iy+04h)
(1) 3137/     FA7 : DD 09               		add	ix,bc
(1) 3138/     FA9 : 01 18 00            		ld	bc,24
(1) 3139/     FAC : DD 09               		add	ix,bc	; Move to PWOUTF
(1) 3140/     FAE : 01 08 00            		ld	bc,8
(1) 3141/     FB1 : DD 72 00            		ld	(ix),d
(1) 3142/     FB4 : DD 09               		add	ix,bc
(1) 3143/     FB6 : DD 73 00            		ld	(ix),e
(1) 3144/     FB9 : DD 09               		add	ix,bc
(1) 3145/     FBB : DD 74 00            		ld	(ix),h
(1) 3146/     FBE : DD 09               		add	ix,bc
(1) 3147/     FC0 : DD 75 00            		ld	(ix),l
(1) 3148/     FC3 : C1                  		pop	bc
(1) 3149/     FC4 : E1                  		pop	hl
(1) 3150/     FC5 : DD E1               		pop	ix
(1) 3151/     FC7 : C9                  		ret
(1) 3152/     FC8 :                     
(1) 3153/     FC8 :                     ; ----------------------------------------
(1) 3154/     FC8 :                     ; NEW note
(1) 3155/     FC8 :                     ; ----------------------------------------
(1) 3156/     FC8 :                     
(1) 3157/     FC8 :                     .note:
(1) 3158/     FC8 : 78                  		ld	a,b		; Volume bit?
(1) 3159/     FC9 : E6 04               		and	0100b
(1) 3160/     FCB : 20 05               		jr	nz,.fm_hasvol
(1) 3161/     FCD : FD 36 08 00         		ld	(iy+08h),0	; Reset to default volume
(1) 3162/     FD1 : CF                  		rst	8
(1) 3163/     FD2 :                     .fm_hasvol:
(1) 3164/     FD2 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 3165/     FD5 : 4F                  		ld	c,a
(1) 3166/     FD6 : FE FF               		cp	-1
(1) 3167/     FD8 : C8                  		ret	z
(1) 3168/     FD9 : FE FE               		cp	-2
(1) 3169/     FDB : C8                  		ret	z
(1) 3170/     FDC : E7                  		rst	20h
(1) 3171/     FDD : 7E                  		ld	a,(hl)
(1) 3172/     FDE : E6 F0               		and	11110000b
(1) 3173/     FE0 : FE 80               		cp	80h
(1) 3174/     FE2 : 28 16               		jr	z,.n_indx
(1) 3175/     FE4 : CF                  		rst	8
(1) 3176/     FE5 : FE 90               		cp	90h
(1) 3177/     FE7 : 28 20               		jr	z,.n_psgn
(1) 3178/     FE9 : FE A0               		cp	0A0h
(1) 3179/     FEB : 28 21               		jr	z,.n_fm
(1) 3180/     FED :                     ; 		cp	0B0h		; ** Can't use notes on FM special **
(1) 3181/     FED :                     ; 		jr	z,.n_fm
(1) 3182/     FED : FE C0               		cp	0C0h
(1) 3183/     FEF : 28 09               		jr	z,.n_indx
(1) 3184/     FF1 : FE D0               		cp	0D0h
(1) 3185/     FF3 : 28 05               		jr	z,.n_indx
(1) 3186/     FF5 : FE E0               		cp	0E0h
(1) 3187/     FF7 : 28 01               		jr	z,.n_indx
(1) 3188/     FF9 : C9                  		ret
(1) 3189/     FFA :                     
(1) 3190/     FFA :                     ; --------------------------------
(1) 3191/     FFA :                     
(1) 3192/     FFA :                     .n_indx:
(1) 3193/     FFA : 79                  		ld	a,c
(1) 3194/     FFB :                     .n_stfreq:
(1) 3195/     FFB : 23                  		inc	hl		; Skip ID
(1) 3196/     FFC : 5E                  		ld	e,(hl)		; Read pitch
(1) 3197/     FFD : 2B                  		dec	hl
(1) 3198/     FFE : 83                  		add	a,e		; Note + pitch
(1) 3199/     FFF : CF                  		rst	8
(1) 3200/    1000 : 87                  		add	a,a		; * 2
(1) 3201/    1001 : FD 77 06            		ld	(iy+06h),a
(1) 3202/    1004 : FD 36 07 00         		ld	(iy+07h),0	; reset pitchbend
(1) 3203/    1008 : C9                  		ret
(1) 3204/    1009 :                     .n_psgn:
(1) 3205/    1009 : 79                  		ld	a,c
(1) 3206/    100A : C6 0C               		add	a,12		; <-- Manual adjust for NOISE
(1) 3207/    100C : 18 ED               		jr	.n_stfreq
(1) 3208/    100E :                     
(1) 3209/    100E :                     ; FM freqs
(1) 3210/    100E :                     .n_fm:
(1) 3211/    100E : 79                  		ld	a,c
(1) 3212/    100F : 23                  		inc	hl		; Skip ID
(1) 3213/    1010 : 5E                  		ld	e,(hl)		; Read pitch
(1) 3214/    1011 : 2B                  		dec	hl
(1) 3215/    1012 : CF                  		rst	8
(1) 3216/    1013 : 83                  		add	a,e		; Note + pitch
(1) 3217/    1014 :                     	; Search for octave and note...
(1) 3218/    1014 : 0E 00               		ld	c,0		; c - octave
(1) 3219/    1016 : 16 07               		ld	d,7
(1) 3220/    1018 :                     .get_oct:
(1) 3221/    1018 : 5F                  		ld	e,a		; e - note
(1) 3222/    1019 : D6 0C               		sub	12
(1) 3223/    101B : B7                  		or	a
(1) 3224/    101C : FA 23 10            		jp	m,.fnd_oct
(1) 3225/    101F : 0C                  		inc	c
(1) 3226/    1020 :                     ; 		nop
(1) 3227/    1020 :                     ; 		nop
(1) 3228/    1020 :                     ; 		rst	8
(1) 3229/    1020 :                     ; 		nop
(1) 3230/    1020 :                     ; 		nop
(1) 3231/    1020 : 15                  		dec	d
(1) 3232/    1021 : 20 F5               		jr	nz,.get_oct
(1) 3233/    1023 :                     .fnd_oct:
(1) 3234/    1023 : CF                  		rst	8
(1) 3235/    1024 : 7B                  		ld	a,e
(1) 3236/    1025 : 87                  		add	a,a		; Note * 2
(1) 3237/    1026 : E6 1F               		and	00011111b
(1) 3238/    1028 : CB 09               		rrc	c
(1) 3239/    102A : CB 09               		rrc	c
(1) 3240/    102C : CB 09               		rrc	c
(1) 3241/    102E : CF                  		rst	8
(1) 3242/    102F : B1                  		or	c
(1) 3243/    1030 : FD 77 06            		ld	(iy+06h),a	; Save octave + index: OOOiiiiib
(1) 3244/    1033 : FD 36 07 00         		ld	(iy+07h),0
(1) 3245/    1037 : C9                  		ret
(1) 3246/    1038 :                     
(1) 3247/    1038 :                     ; ----------------------------------------
(1) 3248/    1038 :                     
(1) 3249/    1038 :                     .chnl_ulnkcut:
(1) 3250/    1038 : DD 4E 01            		ld	c,(ix+chnl_Chip)
(1) 3251/    103B : C3 3E 10            		jp	.chnl_ulnk
(1) 3252/    103E :                     .chnl_ulnkoff:
(1) 3253/    103E :                     ; 		ld	c,0
(1) 3254/    103E :                     .chnl_ulnk:
(1) 3255/    103E : AF                  		xor	a
(1) 3256/    103F : CF                  		rst	8
(1) 3257/    1040 : FD 77 00            		ld	(iy),a			; Delete link, chip and prio
(1) 3258/    1043 : FD 77 01            		ld	(iy+1),a
(1) 3259/    1046 : FD 77 02            		ld	(iy+2),a
(1) 3260/    1049 : FD 77 03            		ld	(iy+3),a
(1) 3261/    104C : FD 77 08            		ld	(iy+08h),a
(1) 3262/    104F : FD 77 09            		ld	(iy+09h),a
(1) 3263/    1052 : FD 77 0A            		ld	(iy+0Ah),a
(1) 3264/    1055 : FD 77 0B            		ld	(iy+0Bh),a
(1) 3265/    1058 : C9                  		ret
(1) 3266/    1059 :                     
(1) 3267/    1059 :                     ; 		push	iy
(1) 3268/    1059 :                     ; 		pop	hl
(1) 3269/    1059 :                     ; 		ld	bc,8-2		; Go to 08h
(1) 3270/    1059 :                     ; 		add	hl,bc
(1) 3271/    1059 :                     ; 		rst	8
(1) 3272/    1059 :                     ; 		ld	b,8/2
(1) 3273/    1059 :                     ; .clrfull:
(1) 3274/    1059 :                     ; 		ld	(hl),0		; Reset settings 08-0Bh
(1) 3275/    1059 :                     ; 		inc	hl
(1) 3276/    1059 :                     ; 		ld	(hl),0
(1) 3277/    1059 :                     ; 		inc	hl
(1) 3278/    1059 :                     ; 		rst	8
(1) 3279/    1059 :                     ; 		djnz	.clrfull
(1) 3280/    1059 :                     ; 		ret
(1) 3281/    1059 :                     
(1) 3282/    1059 :                     ; ============================================================
(1) 3283/    1059 :                     ; --------------------------------------------------------
(1) 3284/    1059 :                     ; Communication with the SCD and 32X
(1) 3285/    1059 :                     ;
(1) 3286/    1059 :                     ; SCD: Sends a level2 interrupt to Sub-CPU*
(1) 3287/    1059 :                     ; 32X: Interrupts Slave SH2 with CMD request
(1) 3288/    1059 :                     ;
(1) 3289/    1059 :                     ; *Originally meant for waiting VBlank, that's
(1) 3290/    1059 :                     ; the only one available for sending the table
(1) 3291/    1059 :                     ; --------------------------------------------------------
(1) 3292/    1059 :                     
(1) 3293/    1059 :                     ; NOTE: careful modifing this
(1) 3294/    1059 :                     
(1) 3295/    1059 :                     zmars_send:
(1) 3296/    1059 :                     	; ----------------------------------------
(1) 3297/    1059 :                     	; Send PCM table
(1) 3373/    1059 :                     	; ----------------------------------------
(1) 3374/    1059 :                     	; Send PWM table
(1) 3466/    1059 : C9                  		ret
(1) 3467/    105A :                     
(1) 3468/    105A :                     ; --------------------------------------------------------
(1) 3469/    105A :                     ; Set bank to $A10000
(1) 3485/    105A :                     
(1) 3486/    105A :                     ; ====================================================================
(1) 3487/    105A :                     ; ----------------------------------------------------------------
(1) 3488/    105A :                     ; Subroutines
(1) 3489/    105A :                     ; ----------------------------------------------------------------
(1) 3490/    105A :                     
(1) 3491/    105A :                     ; --------------------------------------------------------
(1) 3492/    105A :                     ; Init sound engine
(1) 3493/    105A :                     ; --------------------------------------------------------
(1) 3494/    105A :                     
(1) 3495/    105A :                     gema_init:
(1) 3496/    105A : CD 31 13            		call	dac_off
(1) 3497/    105D : AF                  		xor	a
(1) 3498/    105E :                     ; 		ld	(marsUpd),a
(1) 3499/    105E :                     ; 		ld	(mcdUpd),a
(1) 3500/    105E : 32 30 00            		ld	(cdRamLen),a
(1) 3501/    1061 : CD 40 14            		call	gema_lastbank	; Set last bank slot BEFORE writing to PSG (32X bus problem)
(1) 3502/    1064 : 21 11 7F            		ld	hl,Zpsg_ctrl	; Silence PSG channels
(1) 3503/    1067 : 36 9F               		ld	(hl),09Fh
(1) 3504/    1069 : 36 BF               		ld	(hl),0BFh
(1) 3505/    106B : 36 DF               		ld	(hl),0DFh
(1) 3506/    106D : 36 FF               		ld	(hl),0FFh
(1) 3507/    106F : 11 0B 22            		ld	de,2208h|03h	; Set Default LFO
(1) 3508/    1072 : CD 06 13            		call	fm_send_1
(1) 3509/    1075 : 11 00 27            		ld	de,2700h	; CH3 special and timers off
(1) 3510/    1078 : CD 06 13            		call	fm_send_1
(1) 3511/    107B :                     ; 		ld	de,2800h	; FM KEYS off
(1) 3512/    107B : 14                  		inc	d
(1) 3513/    107C : CD 06 13            		call	fm_send_1
(1) 3514/    107F : 1C                  		inc	e
(1) 3515/    1080 : CD 06 13            		call	fm_send_1
(1) 3516/    1083 : 1C                  		inc	e
(1) 3517/    1084 : CD 06 13            		call	fm_send_1
(1) 3518/    1087 : 1C                  		inc	e
(1) 3519/    1088 : 1C                  		inc	e
(1) 3520/    1089 : CD 06 13            		call	fm_send_1
(1) 3521/    108C : 1C                  		inc	e
(1) 3522/    108D : CD 06 13            		call	fm_send_1
(1) 3523/    1090 : 1C                  		inc	e
(1) 3524/    1091 : CD 06 13            		call	fm_send_1
(1) 3525/    1094 : FD 21 91 15         		ld	iy,nikona_BuffList
(1) 3526/    1098 : 0E 01               		ld	c,1			; Start at this priority
(1) 3527/    109A :                     .setup_list:
(1) 3528/    109A : FD 7E 00            		ld	a,(iy)
(1) 3529/    109D : FE FF               		cp	-1
(1) 3530/    109F : 28 24               		jr	z,.end_setup
(1) 3531/    10A1 : FD 23               		inc	iy
(1) 3532/    10A3 : 6F                  		ld	l,a
(1) 3533/    10A4 : FD 66 00            		ld	h,(iy)
(1) 3534/    10A7 : E5                  		push	hl
(1) 3535/    10A8 : DD E1               		pop	ix
(1) 3536/    10AA : DD 71 14            		ld	(ix+trk_Priority),c
(1) 3537/    10AD : DD 36 01 FF         		ld	(ix+trk_SeqId),-1	; Reset sequence ID
(1) 3538/    10B1 : FD 23               		inc	iy
(1) 3539/    10B3 :                     	; iy - src
(1) 3540/    10B3 :                     	; hl - dst
(1) 3541/    10B3 : 11 04 00            		ld	de,trk_Blocks
(1) 3542/    10B6 : 19                  		add	hl,de
(1) 3543/    10B7 : 06 06               		ld	b,MAX_BUFFNTRY-2
(1) 3544/    10B9 :                     .st_copy:
(1) 3545/    10B9 : FD 7E 00            		ld	a,(iy)
(1) 3546/    10BC : 77                  		ld	(hl),a
(1) 3547/    10BD : FD 23               		inc	iy
(1) 3548/    10BF : 23                  		inc	hl
(1) 3549/    10C0 : 10 F7               		djnz	.st_copy
(1) 3550/    10C2 : 0C                  		inc	c
(1) 3551/    10C3 : 18 D5               		jr	.setup_list
(1) 3552/    10C5 :                     .end_setup:
(1) 3553/    10C5 : C9                  		ret
(1) 3554/    10C6 :                     
(1) 3555/    10C6 :                     ; 		ld	a,-1			; Reset
(1) 3556/    10C6 :                     ; 		ld	(trkListPage),a
(1) 3557/    10C6 :                     ; 		xor	a
(1) 3558/    10C6 :                     ; 		jp	init_RomTrcks
(1) 3559/    10C6 :                     
(1) 3560/    10C6 :                     ; --------------------------------------------------------
(1) 3561/    10C6 :                     ; get_tick
(1) 3562/    10C6 :                     ;
(1) 3563/    10C6 :                     ; Checks if VBlank triggred a TICK
(1) 3564/    10C6 :                     ; (1/150 NTSC, 1/120 PAL)
(1) 3565/    10C6 :                     ; --------------------------------------------------------
(1) 3566/    10C6 :                     
(1) 3567/    10C6 :                     get_tick:
(1) 3568/    10C6 : F3                  		di				; Disable ints
(1) 3569/    10C7 : F5                  		push	af
(1) 3570/    10C8 : E5                  		push	hl
(1) 3571/    10C9 : 21 81 1F            		ld	hl,tickFlag		; read last TICK flag
(1) 3572/    10CC : 7E                  		ld	a,(hl)			; non-zero value (1Fh)?
(1) 3573/    10CD : B7                  		or 	a
(1) 3574/    10CE : 28 13               		jr	z,.ctnotick
(1) 3575/    10D0 : 36 00               		ld	(hl),0			; Reset TICK flag
(1) 3576/    10D2 : 23                  		inc	hl			; Move to tickCnt
(1) 3577/    10D3 : 34                  		inc	(hl)			; and increment
(1) 3578/    10D4 : CF                  		rst	8
(1) 3579/    10D5 : D5                  		push	de
(1) 3580/    10D6 : 2A A0 1F            		ld	hl,(sbeatAcc)		; Increment subbeats
(1) 3581/    10D9 : ED 5B A2 1F         		ld	de,(sbeatPtck)
(1) 3582/    10DD : CF                  		rst	8
(1) 3583/    10DE : 19                  		add	hl,de
(1) 3584/    10DF : 22 A0 1F            		ld	(sbeatAcc),hl
(1) 3585/    10E2 : D1                  		pop	de
(1) 3586/    10E3 :                     .ctnotick:
(1) 3587/    10E3 : E1                  		pop	hl
(1) 3588/    10E4 : F1                  		pop	af
(1) 3589/    10E5 : FB                  		ei				; Enable ints again
(1) 3590/    10E6 : C9                  		ret
(1) 3591/    10E7 :                     
(1) 3592/    10E7 :                     ; --------------------------------------------------------
(1) 3593/    10E7 :                     ; transferRom
(1) 3594/    10E7 :                     ;
(1) 3595/    10E7 :                     ; Transfer bytes from ROM to RAM. This also tells
(1) 3596/    10E7 :                     ; to 68k that we want to access ROM
(1) 3597/    10E7 :                     ;
(1) 3598/    10E7 :                     ; Input:
(1) 3599/    10E7 :                     ; a  - 68K Address $xx0000
(1) 3600/    10E7 :                     ;  c - Byte count (size 0 NOT allowed, MAX: 0FFh)
(1) 3601/    10E7 :                     ; hl - 68K Address $00xxxx
(1) 3602/    10E7 :                     ; de - Destination pointer
(1) 3603/    10E7 :                     ;
(1) 3604/    10E7 :                     ; Uses:
(1) 3605/    10E7 :                     ; b
(1) 3606/    10E7 :                     ;
(1) 3607/    10E7 :                     ; Notes:
(1) 3608/    10E7 :                     ; call RST 20h first if transfering anything other
(1) 3609/    10E7 :                     ; than sample data, just to be safe.
(1) 3610/    10E7 :                     ; --------------------------------------------------------
(1) 3611/    10E7 :                     
(1) 3612/    10E7 :                     transferRom:
(1) 3613/    10E7 : FE FF               		cp	0FFh		; <-- WORKAROUND FOR $FF0000 area
(1) 3614/    10E9 : 28 43               		jr	z,.from_ram
(1) 3615/    10EB : CF                  		rst	8
(1) 3616/    10EC : DD E5               		push	ix
(1) 3617/    10EE : DD 21 2F 00         		ld	ix,commZRomBlk	; ix - rom read/block flags
(1) 3618/    10F2 : 22 9E 1F            		ld	(x68ksrclsb),hl	; save hl copy
(1) 3619/    10F5 : CB BC               		res	7,h
(1) 3620/    10F7 : 06 00               		ld	b,0
(1) 3621/    10F9 : 0B                  		dec	bc
(1) 3622/    10FA : 09                  		add	hl,bc
(1) 3623/    10FB : CB 7C               		bit	7,h
(1) 3624/    10FD : 20 0B               		jr	nz,.double
(1) 3625/    10FF : 2A 9E 1F            		ld	hl,(x68ksrclsb)	; single transfer
(1) 3626/    1102 : 0C                  		inc	c
(1) 3627/    1103 : 47                  		ld	b,a
(1) 3628/    1104 : CD 4C 11            		call	.transfer
(1) 3629/    1107 : DD E1               		pop	ix
(1) 3630/    1109 : C9                  		ret
(1) 3631/    110A :                     .double:
(1) 3632/    110A : CF                  		rst	8
(1) 3633/    110B : 47                  		ld	b,a		; double transfer
(1) 3634/    110C : C5                  		push	bc
(1) 3635/    110D : E5                  		push	hl
(1) 3636/    110E : 79                  		ld	a,c
(1) 3637/    110F : 95                  		sub	a,l
(1) 3638/    1110 : 4F                  		ld	c,a
(1) 3639/    1111 : 2A 9E 1F            		ld	hl,(x68ksrclsb)
(1) 3640/    1114 : CD 4C 11            		call	.transfer
(1) 3641/    1117 : E1                  		pop	hl
(1) 3642/    1118 : C1                  		pop	bc
(1) 3643/    1119 :                     ; 		rst	8
(1) 3644/    1119 : 4D                  		ld	c,l
(1) 3645/    111A : 0C                  		inc	c
(1) 3646/    111B : 3A 9F 1F            		ld	a,(x68ksrcmid)
(1) 3647/    111E : E6 80               		and	80h
(1) 3648/    1120 : C6 80               		add	a,80h
(1) 3649/    1122 : 67                  		ld	h,a
(1) 3650/    1123 : 2E 00               		ld	l,0
(1) 3651/    1125 : 30 01               		jr	nc,.x68knocarry
(1) 3652/    1127 : 04                  		inc	b
(1) 3653/    1128 :                     .x68knocarry:
(1) 3654/    1128 : CD 4C 11            		call	.transfer
(1) 3655/    112B : DD E1               		pop	ix
(1) 3656/    112D : C9                  		ret
(1) 3657/    112E :                     
(1) 3658/    112E :                     ; ------------------------------------------------
(1) 3659/    112E :                     ; WORKAROUND FOR READING FROM $FF0000 RAM
(1) 3660/    112E :                     ;
(1) 3661/    112E :                     ; On the 68K side YOU MUST CALL
(1) 3662/    112E :                     ; Sound_Update on a loop during Display.
(1) 3663/    112E :                     ; ------------------------------------------------
(1) 3664/    112E :                     
(1) 3665/    112E :                     .from_ram:
(1) 3666/    112E : ED 53 31 00         		ld	(cdRamDst),de
(1) 3667/    1132 : 22 33 00            		ld	(cdRamSrc),hl
(1) 3668/    1135 : 32 35 00            		ld	(cdRamSrcB),a
(1) 3669/    1138 : CD 40 14            		call	gema_lastbank			; ** Set bank to $FF8000 area
(1) 3670/    113B : CF                  		rst	8
(1) 3671/    113C : 79                  		ld	a,c
(1) 3672/    113D : 32 30 00            		ld	(cdRamLen),a
(1) 3673/    1140 : 21 00 FF            		ld	hl,RAM_ZCdFlag_D&07FFFh+8000h	; ** EXTERNAL WRITE TO 68K RAM **
(1) 3674/    1143 : 36 01               		ld	(hl),1				; WRITE TO RAM: Set request, 68k clears.
(1) 3675/    1145 :                     .wait:
(1) 3676/    1145 : 3A 30 00            		ld	a,(cdRamLen)			; Wait until 68K clears this
(1) 3677/    1148 : B7                  		or	a
(1) 3678/    1149 : 20 FA               		jr	nz,.wait
(1) 3679/    114B : C9                  		ret
(1) 3680/    114C :                     
(1) 3681/    114C :                     ; ------------------------------------------------
(1) 3682/    114C :                     ; b  - Source ROM bank
(1) 3683/    114C :                     ;  c - Bytes to transfer (00h is invalid)
(1) 3684/    114C :                     ; hl - Source ROM $00xxxx | 8000h
(1) 3685/    114C :                     ; de - Destination address
(1) 3686/    114C :                     ; ix - ROM-block flag
(1) 3687/    114C :                     ; ------------------------------------------------
(1) 3688/    114C :                     
(1) 3689/    114C :                     .transfer:
(1) 3690/    114C : CF                  		rst	8
(1) 3691/    114D : D5                  		push	de
(1) 3692/    114E : 11 00 60            		ld	de,6000h
(1) 3693/    1151 : 7C                  		ld	a,h
(1) 3694/    1152 : 07                  		rlca
(1) 3695/    1153 : 12                  		ld	(de),a
(1) 3696/    1154 : 78                  		ld	a,b
(1) 3697/    1155 : CF                  		rst	8
(1) 3698/    1156 : 12                  		ld	(de),a
(1) 3699/    1157 : 0F                  		rrca
(1) 3700/    1158 : 12                  		ld	(de),a
(1) 3701/    1159 : 0F                  		rrca
(1) 3702/    115A : 12                  		ld	(de),a
(1) 3703/    115B : 0F                  		rrca
(1) 3704/    115C : 12                  		ld	(de),a
(1) 3705/    115D : 0F                  		rrca
(1) 3706/    115E : CF                  		rst	8
(1) 3707/    115F : 12                  		ld	(de),a
(1) 3708/    1160 : 0F                  		rrca
(1) 3709/    1161 : 12                  		ld	(de),a
(1) 3710/    1162 : 0F                  		rrca
(1) 3711/    1163 : 12                  		ld	(de),a
(1) 3712/    1164 : 0F                  		rrca
(1) 3713/    1165 : 12                  		ld	(de),a
(1) 3714/    1166 : D1                  		pop	de
(1) 3715/    1167 : CB FC               		set	7,h
(1) 3716/    1169 : CF                  		rst	8
(1) 3717/    116A :                     
(1) 3718/    116A :                     	; Transfer ROM data in packets
(1) 3719/    116A :                     	; while playing the cache'd sample
(1) 3720/    116A :                     	; *** CRITICAL PROCESS ***
(1) 3721/    116A :                     	;
(1) 3722/    116A :                     	; pseudo-ref for ldir:
(1) 3723/    116A :                     	; ld (de),(hl)	; load (hl) to (de) directly
(1) 3724/    116A :                     	; inc de	; next de
(1) 3725/    116A :                     	; inc hl	; next hl
(1) 3726/    116A :                     	; dec bc	; decrement bc
(1) 3727/    116A :                     	;
(1) 3728/    116A : 06 00               		ld	b,0
(1) 3729/    116C : 79                  		ld	a,c		; a - Size counter
(1) 3730/    116D :                     ; 		set	1,(ix)
(1) 3731/    116D : D6 08               		sub	MAX_TRFRPZ	; Length lower than MAX_TRFRPZ?
(1) 3732/    116F : 38 14               		jr	c,.x68klast	; Process single piece only
(1) 3733/    1171 :                     .x68kloop:
(1) 3734/    1171 : CF                  		rst	8
(1) 3735/    1172 : 00                  		nop
(1) 3736/    1173 : 0E 07               		ld	c,MAX_TRFRPZ-1
(1) 3737/    1175 : DD CB 00 46         		bit	0,(ix)		; Genesis requests BUS?
(1) 3738/    1179 : C4 93 11            		call	nz,.x68klpwt
(1) 3739/    117C : ED B0               		ldir			; (de) to (hl) until bc == 0
(1) 3740/    117E : CF                  		rst	8
(1) 3741/    117F : 00                  		nop
(1) 3742/    1180 : D6 07               		sub	a,MAX_TRFRPZ-1
(1) 3743/    1182 : D2 71 11            		jp	nc,.x68kloop
(1) 3744/    1185 :                     ; last block
(1) 3745/    1185 :                     .x68klast:
(1) 3746/    1185 : C6 08               		add	a,MAX_TRFRPZ
(1) 3747/    1187 : 4F                  		ld	c,a
(1) 3748/    1188 : DD CB 00 46         		bit	0,(ix)		; Genesis requests BUS?
(1) 3749/    118C : C4 93 11            		call	nz,.x68klpwt
(1) 3750/    118F : ED B0               		ldir
(1) 3751/    1191 : CF                  		rst	8
(1) 3752/    1192 : C9                  		ret
(1) 3753/    1193 :                     
(1) 3754/    1193 :                     ; Wait here until Genesis unlocks ROM
(1) 3755/    1193 :                     .x68klpwt:
(1) 3756/    1193 : 00                  		nop	; WAVE SYNC
(1) 3757/    1194 : 00                  		nop
(1) 3758/    1195 :                     .x68kpwtlp:
(1) 3759/    1195 : CF                  		rst	8
(1) 3760/    1196 : 00                  		nop	; WAVE SYNC
(1) 3761/    1197 : 00                  		nop
(1) 3762/    1198 : DD CB 00 46         		bit	0,(ix)		; 68k finished?
(1) 3763/    119C : 20 F7               		jr	nz,.x68kpwtlp
(1) 3764/    119E : C9                  		ret
(1) 3765/    119F :                     
(1) 3766/    119F :                     ; ====================================================================
(1) 3767/    119F :                     ; ----------------------------------------------------------------
(1) 3768/    119F :                     ; Sound chip routines
(1) 3769/    119F :                     ; ----------------------------------------------------------------
(1) 3770/    119F :                     
(1) 3771/    119F :                     ; --------------------------------------------------------
(1) 3772/    119F :                     ; chip_env
(1) 3773/    119F :                     ;
(1) 3774/    119F :                     ; Process the PSG
(1) 3775/    119F :                     ; --------------------------------------------------------
(1) 3776/    119F :                     
(1) 3777/    119F :                     chip_env:
(1) 3781/    119F : FD 21 26 16         		ld	iy,psgcom+3		; Start from NOISE first
(1) 3782/    11A3 : DD 21 11 7F         		ld	ix,Zpsg_ctrl
(1) 3783/    11A7 : 0E E0               		ld	c,0E0h			; c - PSG first ctrl command
(1) 3784/    11A9 : 06 04               		ld	b,4			; b - 4 channels
(1) 3785/    11AB :                     .vloop:
(1) 3786/    11AB : CF                  		rst	8
(1) 3787/    11AC : FD 5E 00            		ld	e,(iy+COM)		; e - current command
(1) 3788/    11AF : FD 36 00 00         		ld	(iy+COM),0
(1) 3789/    11B3 :                     
(1) 3790/    11B3 :                     	; ----------------------------
(1) 3791/    11B3 :                     	; bit 2 - stop sound
(1) 3792/    11B3 : CB 53               		bit	2,e
(1) 3793/    11B5 : 28 0C               		jr	z,.ckof
(1) 3794/    11B7 : FD 36 04 FF         		ld	(iy+LEV),-1		; reset level
(1) 3795/    11BB : FD 36 28 01         		ld	(iy+FLG),1		; and update
(1) 3796/    11BF : FD 36 18 00         		ld	(iy+MODE),0		; envelope off
(1) 3797/    11C3 :                     .ckof:
(1) 3798/    11C3 :                     	; ----------------------------
(1) 3799/    11C3 :                     	; bit 1 - key off
(1) 3800/    11C3 : CB 4B               		bit	1,e
(1) 3801/    11C5 : 28 0F               		jr      z,.ckon
(1) 3802/    11C7 : FD 7E 18            		ld	a,(iy+MODE)		; mode 0?
(1) 3803/    11CA : B7                  		or	a
(1) 3804/    11CB : 28 09               		jr	z,.ckon
(1) 3805/    11CD : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3806/    11D1 : FD 36 18 04         		ld	(iy+MODE),100b		; set envelope mode 100b
(1) 3807/    11D5 : CF                  		rst	8
(1) 3808/    11D6 :                     .ckon:
(1) 3809/    11D6 :                     	; ----------------------------
(1) 3810/    11D6 :                     	; bit 0 - key on
(1) 3811/    11D6 : CB 43               		bit	0,e
(1) 3812/    11D8 : 28 1A               		jr	z,.envproc
(1) 3813/    11DA : FD 36 04 FF         		ld	(iy+LEV),-1		; reset level
(1) 3814/    11DE : 78                  		ld	a,b
(1) 3815/    11DF : FE 04               		cp	4			; NOISE channel?
(1) 3816/    11E1 : 20 08               		jr	nz,.nskip
(1) 3817/    11E3 : CF                  		rst	8			; Set NOISE mode
(1) 3818/    11E4 : 3A 83 1F            		ld	a,(psgHatMode)		; write hat mode only.
(1) 3819/    11E7 : B1                  		or	c
(1) 3820/    11E8 : DD 77 00            		ld	(ix),a			; WRITE PSG
(1) 3821/    11EB :                     .nskip:
(1) 3822/    11EB : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3823/    11EF : CF                  		rst	8
(1) 3824/    11F0 : FD 36 18 01         		ld	(iy+MODE),001b		; set to attack mode
(1) 3825/    11F4 :                     .nblock:
(1) 3826/    11F4 :                     
(1) 3827/    11F4 :                     	; ----------------------------
(1) 3828/    11F4 :                     	; Process effects
(1) 3829/    11F4 :                     	; ----------------------------
(1) 3830/    11F4 :                     .envproc:
(1) 3831/    11F4 : FD 7E 18            		ld	a,(iy+MODE)
(1) 3832/    11F7 : B7                  		or	a			; no modes
(1) 3833/    11F8 : CA 7E 12            		jp	z,.vedlp
(1) 3834/    11FB : FE 01               		cp 	001b			; Attack mode
(1) 3835/    11FD : 20 2C               		jr	nz,.chk2
(1) 3836/    11FF : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3837/    1203 : FD 5E 24            		ld	e,(iy+ALV)
(1) 3838/    1206 : FD 7E 08            		ld	a,(iy+ATK)		; if ATK == 0, don't use
(1) 3839/    1209 : B7                  		or	a
(1) 3840/    120A : 28 16               		jr	z,.atkend
(1) 3841/    120C : 57                  		ld	d,a			; c - attack rate
(1) 3842/    120D : 7B                  		ld	a,e			; a - attack level
(1) 3843/    120E : CF                  		rst	8
(1) 3844/    120F : FD 5E 24            		ld	e,(iy+ALV)		; b - OLD attack level
(1) 3845/    1212 : 92                  		sub	a,d			; (attack rate) - (level)
(1) 3846/    1213 : 38 0D               		jr	c,.atkend		; if carry: already finished
(1) 3847/    1215 : 28 0B               		jr	z,.atkend		; if zero: no attack rate
(1) 3848/    1217 : BB                  		cp	e			; attack rate == level?
(1) 3849/    1218 : 38 08               		jr	c,.atkend
(1) 3850/    121A : 28 06               		jr	z,.atkend
(1) 3851/    121C : FD 77 04            		ld	(iy+LEV),a		; set new level
(1) 3852/    121F : CF                  		rst	8
(1) 3853/    1220 : 18 5C               		jr	.vedlp
(1) 3854/    1222 :                     .atkend:
(1) 3855/    1222 : FD 73 04            		ld	(iy+LEV),e		; attack level = new level
(1) 3856/    1225 :                     .atkzero:
(1) 3857/    1225 : FD 36 18 02         		ld	(iy+MODE),010b		; set to decay mode
(1) 3858/    1229 : 18 53               		jr	.vedlp
(1) 3859/    122B :                     .chk2:
(1) 3860/    122B :                     
(1) 3861/    122B : FE 02               		cp	010b			; Decay mode
(1) 3862/    122D : 20 31               		jr	nz,.chk4
(1) 3863/    122F :                     .dectmr:
(1) 3864/    122F : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3865/    1233 : FD 7E 04            		ld	a,(iy+LEV)		; a - Level
(1) 3866/    1236 : FD 5E 10            		ld	e,(iy+SLV)		; b - Sustain
(1) 3867/    1239 : BB                  		cp	e
(1) 3868/    123A : 38 0D               		jr	c,.dkadd		; if carry: add
(1) 3869/    123C : 28 18               		jr	z,.dkyend		; if zero:  finish
(1) 3870/    123E : CF                  		rst	8
(1) 3871/    123F : FD 96 0C            		sub	(iy+DKY)		; substract decay rate
(1) 3872/    1242 : 38 12               		jr	c,.dkyend		; finish if wraped.
(1) 3873/    1244 : BB                  		cp	e			; compare level
(1) 3874/    1245 : 38 0F               		jr	c,.dkyend		; and finish
(1) 3875/    1247 : 18 08               		jr	.dksav
(1) 3876/    1249 :                     .dkadd:
(1) 3877/    1249 : FD 86 0C            		add	a,(iy+DKY)		;  (level) + (decay rate)
(1) 3878/    124C : 38 08               		jr	c,.dkyend		; finish if wraped.
(1) 3879/    124E : BB                  		cp	e			; compare level
(1) 3880/    124F : 30 05               		jr	nc,.dkyend
(1) 3881/    1251 :                     .dksav:
(1) 3882/    1251 : FD 77 04            		ld	(iy+LEV),a		; save new level
(1) 3883/    1254 : 18 28               		jr	.vedlp
(1) 3884/    1256 :                     .dkyend:
(1) 3885/    1256 : CF                  		rst	8
(1) 3886/    1257 : FD 73 04            		ld	(iy+LEV),e		; save last attack
(1) 3887/    125A : FD 36 18 04         		ld	(iy+MODE),100b		; and set to sustain
(1) 3888/    125E : 18 1E               		jr	.vedlp
(1) 3889/    1260 :                     .chk4:
(1) 3890/    1260 : FE 04               		cp	100b			; Sustain phase
(1) 3891/    1262 : 20 1A               		jr	nz,.vedlp
(1) 3892/    1264 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3893/    1268 : FD 7E 04            		ld	a,(iy+LEV)		; a - Level
(1) 3894/    126B : CF                  		rst	8
(1) 3895/    126C : FD 86 14            		add 	a,(iy+RRT)		; add Release Rate
(1) 3896/    126F : 38 05               		jr	c,.killenv		; release done
(1) 3897/    1271 : FD 77 04            		ld	(iy+LEV),a		; set new Level
(1) 3898/    1274 : 18 08               		jr	.vedlp
(1) 3899/    1276 :                     .killenv:
(1) 3900/    1276 : FD 36 04 FF         		ld	(iy+LEV),-1		; Silence this channel
(1) 3901/    127A : FD 36 18 00         		ld	(iy+MODE),0		; Reset mode
(1) 3902/    127E :                     .vedlp:
(1) 3903/    127E :                     
(1) 3904/    127E :                     	; ----------------------------
(1) 3905/    127E :                     	; PSG UPDATE
(1) 3906/    127E :                     	; ----------------------------
(1) 3907/    127E : FD 7E 28            		ld	a,(iy+FLG)
(1) 3908/    1281 : B7                  		or	a
(1) 3909/    1282 : 28 72               		jr	z,.noupd
(1) 3910/    1284 : FD 36 28 00         		ld	(iy+FLG),0	; Reset until next one
(1) 3911/    1288 : 59                  		ld	e,c
(1) 3912/    1289 : 3A 83 1F            		ld	a,(psgHatMode)
(1) 3913/    128C : 57                  		ld	d,a
(1) 3914/    128D : E6 03               		and	011b
(1) 3915/    128F : FE 03               		cp	011b
(1) 3916/    1291 : 20 1D               		jr	nz,.normal
(1) 3917/    1293 : CF                  		rst	8
(1) 3918/    1294 : 78                  		ld	a,b		; Channel 4?
(1) 3919/    1295 : FE 03               		cp	3
(1) 3920/    1297 : 28 13               		jr	z,.silnc_3
(1) 3921/    1299 : FE 04               		cp	4
(1) 3922/    129B : 20 18               		jr	nz,.do_nfreq
(1) 3923/    129D : 3A 83 1F            		ld	a,(psgHatMode)
(1) 3924/    12A0 : 57                  		ld	d,a
(1) 3925/    12A1 : E6 03               		and	011b
(1) 3926/    12A3 : CF                  		rst	8
(1) 3927/    12A4 : FE 03               		cp	011b
(1) 3928/    12A6 : 20 30               		jr	nz,.vonly
(1) 3929/    12A8 : 1E C0               		ld	e,0C0h
(1) 3930/    12AA : 18 09               		jr	.do_nfreq
(1) 3931/    12AC :                     .silnc_3:
(1) 3932/    12AC : 3E FF               		ld	a,-1
(1) 3933/    12AE : 18 32               		jr	.vlmuch
(1) 3934/    12B0 :                     .normal:
(1) 3935/    12B0 : 78                  		ld	a,b
(1) 3936/    12B1 : FE 04               		cp	4
(1) 3937/    12B3 : 28 23               		jr	z,.vonly
(1) 3938/    12B5 :                     .do_nfreq:
(1) 3939/    12B5 : FD 6E 1C            		ld	l,(iy+DTL)
(1) 3940/    12B8 : FD 66 20            		ld	h,(iy+DTH)
(1) 3941/    12BB :                     
(1) 3942/    12BB :                     	; freq effects go here
(1) 3943/    12BB :                     	; (save e FIRST.)
(1) 3944/    12BB :                     	;	push	de
(1) 3945/    12BB :                     	;	pop	de
(1) 3946/    12BB : 7D                  		ld	a,l		; Grab LSB 4 right bits
(1) 3947/    12BC : E6 0F               		and	00001111b
(1) 3948/    12BE : B3                  		or	e		; OR with channel set in e
(1) 3949/    12BF : CF                  		rst	8
(1) 3950/    12C0 : DD 77 00            		ld	(ix),a		; write it
(1) 3951/    12C3 : 7D                  		ld	a,l		; Grab LSB 4 left bits
(1) 3952/    12C4 : 0F                  		rrca
(1) 3953/    12C5 : 0F                  		rrca
(1) 3954/    12C6 : 0F                  		rrca
(1) 3955/    12C7 : 0F                  		rrca
(1) 3956/    12C8 : E6 0F               		and	00001111b
(1) 3957/    12CA : 5F                  		ld	e,a
(1) 3958/    12CB : 7C                  		ld	a,h		; Grab MSB bits
(1) 3959/    12CC : CF                  		rst	8
(1) 3960/    12CD : 07                  		rlca
(1) 3961/    12CE : 07                  		rlca
(1) 3962/    12CF : 07                  		rlca
(1) 3963/    12D0 : 07                  		rlca
(1) 3964/    12D1 : E6 30               		and	00110000b
(1) 3965/    12D3 : B3                  		or	e
(1) 3966/    12D4 : DD 77 00            		ld	(ix),a
(1) 3967/    12D7 : CF                  		rst	8
(1) 3968/    12D8 :                     .vonly:
(1) 3969/    12D8 : FD 7E 30            		ld	a,(iy+PVOL)		; c - Level
(1) 3970/    12DB : FD 86 04            		add	a,(iy+LEV)		; Add MASTER volume
(1) 3971/    12DE : 30 02               		jr	nc,.vlmuch
(1) 3972/    12E0 : 3E FF               		ld	a,-1
(1) 3973/    12E2 :                     .vlmuch:
(1) 3974/    12E2 : CB 3F               		srl	a			; (Level >> 4)
(1) 3975/    12E4 : CB 3F               		srl	a
(1) 3976/    12E6 : CB 3F               		srl	a
(1) 3977/    12E8 : CF                  		rst	8
(1) 3978/    12E9 : CB 3F               		srl	a
(1) 3979/    12EB : E6 0F               		and	00001111b		; Filter volume value
(1) 3980/    12ED : B1                  		or	c			; and OR with current channel
(1) 3981/    12EE : F6 90               		or	90h			; Set volume-set mode
(1) 3983/    12F0 : DD 77 00            		ld	(ix),a			; *** WRITE volume
(1) 3985/    12F3 : FD 34 38            		inc	(iy+PTMR)		; Update general timer
(1) 3986/    12F6 :                     .noupd:
(1) 3987/    12F6 :                     	; ----------------------------
(1) 3988/    12F6 : FD 2B               		dec	iy			; next COM to check (backwards)
(1) 3989/    12F8 : 79                  		ld	a,c
(1) 3990/    12F9 : CF                  		rst	8
(1) 3991/    12FA : D6 20               		sub	a,20h			; next PSG (backwards)
(1) 3992/    12FC : 4F                  		ld	c,a
(1) 3993/    12FD : 05                  		dec	b
(1) 3994/    12FE : C2 AB 11            		jp	nz,.vloop
(1) 3995/    1301 : C9                  		ret
(1) 3996/    1302 :                     
(1) 3997/    1302 :                     ; ---------------------------------------------
(1) 3998/    1302 :                     ; FM register writes
(1) 3999/    1302 :                     ;
(1) 4000/    1302 :                     ; Input:
(1) 4001/    1302 :                     ; d - ctrl
(1) 4002/    1302 :                     ; e - data
(1) 4003/    1302 :                     ; ---------------------------------------------
(1) 4004/    1302 :                     
(1) 4005/    1302 :                     ; c - KeyID
(1) 4006/    1302 :                     fm_autoreg:
(1) 4007/    1302 : CB 51               		bit	2,c
(1) 4008/    1304 : 20 0B               		jr	nz,fm_send_2
(1) 4009/    1306 :                     
(1) 4010/    1306 :                     ; Channels 1-3 and global registers
(1) 4011/    1306 :                     fm_send_1:
(1) 4012/    1306 : 7A                  		ld	a,d
(1) 4013/    1307 : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 4014/    130A : 00                  		nop
(1) 4015/    130B : 7B                  		ld	a,e
(1) 4016/    130C : 32 01 40            		ld	(Zym_data_1),a
(1) 4017/    130F : 00                  		nop
(1) 4018/    1310 : C9                  		ret
(1) 4019/    1311 :                     ; Channels 4-6
(1) 4020/    1311 :                     fm_send_2:
(1) 4021/    1311 : 7A                  		ld	a,d
(1) 4022/    1312 : 32 02 40            		ld	(Zym_ctrl_2),a
(1) 4023/    1315 : 00                  		nop
(1) 4024/    1316 : 7B                  		ld	a,e
(1) 4025/    1317 : 32 03 40            		ld	(Zym_data_2),a
(1) 4026/    131A : 00                  		nop
(1) 4027/    131B : C9                  		ret
(1) 4028/    131C :                     
(1) 4029/    131C :                     ; --------------------------------------------------------
(1) 4030/    131C :                     ; brute-force WAVE ON/OFF playback
(1) 4031/    131C :                     ; --------------------------------------------------------
(1) 4032/    131C :                     
(1) 4033/    131C :                     dac_on:
(1) 4034/    131C : 3E 2B               		ld	a,2Bh
(1) 4035/    131E : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 4036/    1321 : 3E 80               		ld	a,80h
(1) 4037/    1323 : 32 01 40            		ld	(Zym_data_1),a
(1) 4038/    1326 : 3E D9               		ld 	a,zopcExx
(1) 4039/    1328 : 32 08 00            		ld	(dac_me),a
(1) 4040/    132B : 3E F5               		ld 	a,zopcPushAf
(1) 4041/    132D : 32 20 00            		ld	(dac_fill),a
(1) 4042/    1330 : C9                  		ret
(1) 4043/    1331 :                     dac_off:
(1) 4044/    1331 : 3E 2B               		ld	a,2Bh
(1) 4045/    1333 : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 4046/    1336 : 3E 00               		ld	a,00h
(1) 4047/    1338 : 32 01 40            		ld	(Zym_data_1),a
(1) 4048/    133B : 3E C9               		ld 	a,zopcRet
(1) 4049/    133D : 32 08 00            		ld	(dac_me),a
(1) 4050/    1340 : 3E C9               		ld 	a,zopcRet
(1) 4051/    1342 : 32 20 00            		ld	(dac_fill),a
(1) 4052/    1345 : C9                  		ret
(1) 4053/    1346 :                     
(1) 4054/    1346 :                     ; --------------------------------------------------------
(1) 4055/    1346 :                     ; dac_play
(1) 4056/    1346 :                     ;
(1) 4057/    1346 :                     ; Plays a new sample
(1) 4058/    1346 :                     ;
(1) 4059/    1346 :                     ; NOTE:
(1) 4060/    1346 :                     ; Set wave_Flags and wave_Pitch externally
(1) 4061/    1346 :                     ; getting here.
(1) 4062/    1346 :                     ; --------------------------------------------------------
(1) 4063/    1346 :                     
(1) 4064/    1346 :                     dac_play:
(1) 4065/    1346 : F3                  		di
(1) 4066/    1347 : CD 31 13            		call	dac_off
(1) 4067/    134A : D9                  		exx				; flip exx regs
(1) 4068/    134B : 01 1D 00            		ld	bc,dWaveBuff>>8		; bc - WAVFIFO MSB
(1) 4069/    134E : ED 5B 92 1F         		ld	de,(wave_Pitch)		; de - Pitch
(1) 4070/    1352 : 21 00 00            		ld	hl,(dWaveBuff&0FFh)<<8	; hl - WAVFIFO LSB pointer (xx.00)
(1) 4071/    1355 : D9                  		exx				; move them back
(1) 4072/    1356 : 2A 89 1F            		ld	hl,(wave_Start)		; copy Start and length
(1) 4073/    1359 : 3A 8B 1F            		ld 	a,(wave_Start+2)
(1) 4074/    135C : 22 98 1F            		ld	(dDacPntr),hl
(1) 4075/    135F : 32 9A 1F            		ld	(dDacPntr+2),a
(1) 4076/    1362 : 2A 8C 1F            		ld	hl,(wave_Len)
(1) 4077/    1365 : 3A 8E 1F            		ld 	a,(wave_Len+2)
(1) 4078/    1368 : 22 9B 1F            		ld	(dDacCntr),hl
(1) 4079/    136B : 32 9D 1F            		ld	(dDacCntr+2),a
(1) 4080/    136E : AF                  		xor	a
(1) 4081/    136F : 32 97 1F            		ld	(dDacFifoMid),a		; Reset half-way
(1) 4082/    1372 : CD 7A 13            		call	dac_refill
(1) 4083/    1375 : CD 1C 13            		call	dac_on
(1) 4084/    1378 : FB                  		ei
(1) 4085/    1379 : C9                  		ret
(1) 4086/    137A :                     
(1) 4087/    137A :                     ; --------------------------------------------------------
(1) 4088/    137A :                     
(1) 4089/    137A :                     dac_refill:
(1) 4090/    137A : CF                  		rst	8
(1) 4091/    137B : C5                  		push	bc
(1) 4092/    137C : D5                  		push	de
(1) 4093/    137D : E5                  		push	hl
(1) 4094/    137E : 3A 94 1F            		ld	a,(wave_Flags)	; Already finished?
(1) 4095/    1381 : FE 07               		cp	111b
(1) 4096/    1383 : D2 39 14            		jp	nc,.dacfill_end
(1) 4097/    1386 : 3A 9D 1F            		ld	a,(dDacCntr+2)	; Last bytes
(1) 4098/    1389 : 2A 9B 1F            		ld	hl,(dDacCntr)
(1) 4099/    138C : 01 80 00            		ld	bc,80h
(1) 4100/    138F : 37                  		scf
(1) 4101/    1390 : 3F                  		ccf
(1) 4102/    1391 : ED 42               		sbc	hl,bc
(1) 4103/    1393 : DE 00               		sbc	a,0
(1) 4104/    1395 : 32 9D 1F            		ld	(dDacCntr+2),a
(1) 4105/    1398 : 22 9B 1F            		ld	(dDacCntr),hl
(1) 4106/    139B : 16 1D               		ld	d,dWaveBuff>>8
(1) 4107/    139D : B7                  		or	a
(1) 4108/    139E : FA C8 13            		jp	m,.dac_over
(1) 4109/    13A1 : 3A 97 1F            		ld	a,(dDacFifoMid)	; Update halfway value
(1) 4110/    13A4 : 5F                  		ld	e,a
(1) 4111/    13A5 : C6 80               		add 	a,80h
(1) 4112/    13A7 : 32 97 1F            		ld	(dDacFifoMid),a
(1) 4113/    13AA : 2A 98 1F            		ld	hl,(dDacPntr)
(1) 4114/    13AD : 3A 9A 1F            		ld	a,(dDacPntr+2)
(1) 4115/    13B0 : CD E7 10            		call	transferRom	; *** ROM ACCESS ***
(1) 4116/    13B3 : 2A 98 1F            		ld	hl,(dDacPntr)
(1) 4117/    13B6 : 3A 9A 1F            		ld	a,(dDacPntr+2)
(1) 4118/    13B9 : 01 80 00            		ld	bc,80h
(1) 4119/    13BC : 09                  		add	hl,bc
(1) 4120/    13BD : CE 00               		adc	a,0
(1) 4121/    13BF : 22 98 1F            		ld	(dDacPntr),hl
(1) 4122/    13C2 : 32 9A 1F            		ld	(dDacPntr+2),a
(1) 4123/    13C5 : C3 3C 14            		jp	.dacfill_ret
(1) 4124/    13C8 :                     
(1) 4125/    13C8 :                     ; NOTE: This doesn't finish at the exact END point
(1) 4126/    13C8 :                     ; but the player won't notice it.
(1) 4127/    13C8 :                     
(1) 4128/    13C8 :                     .dac_over:
(1) 4129/    13C8 : 16 1D               		ld	d,dWaveBuff>>8
(1) 4130/    13CA : 3A 94 1F            		ld	a,(wave_Flags)	; LOOP enabled?
(1) 4131/    13CD : E6 01               		and	001b
(1) 4132/    13CF : C2 F2 13            		jp	nz,.dacfill_loop
(1) 4133/    13D2 : 7D                  		ld	a,l
(1) 4134/    13D3 : C6 80               		add	a,80h
(1) 4135/    13D5 : 4F                  		ld	c,a
(1) 4136/    13D6 : 06 00               		ld	b,0
(1) 4137/    13D8 : C5                  		push	bc
(1) 4138/    13D9 : 3A 97 1F            		ld	a,(dDacFifoMid)
(1) 4139/    13DC : 5F                  		ld	e,a
(1) 4140/    13DD : C6 80               		add	a,80h
(1) 4141/    13DF : 32 97 1F            		ld	(dDacFifoMid),a
(1) 4142/    13E2 : C1                  		pop	bc
(1) 4143/    13E3 : 79                  		ld	a,c
(1) 4144/    13E4 : B0                  		or	b
(1) 4145/    13E5 : 28 52               		jr	z,.dacfill_end
(1) 4146/    13E7 : 2A 98 1F            		ld	hl,(dDacPntr)
(1) 4147/    13EA : 3A 9A 1F            		ld	a,(dDacPntr+2)
(1) 4148/    13ED : CD E7 10            		call	transferRom	; *** ROM ACCESS ***
(1) 4149/    13F0 : 18 47               		jr	.dacfill_end
(1) 4150/    13F2 :                     .dacfill_loop:
(1) 4151/    13F2 :                     	; loop sample
(1) 4152/    13F2 : C5                  		push	bc
(1) 4153/    13F3 : D5                  		push	de
(1) 4154/    13F4 : 3A 91 1F            		ld	a,(wave_Loop+2)
(1) 4155/    13F7 : 4F                  		ld	c,a
(1) 4156/    13F8 : ED 5B 8F 1F         		ld	de,(wave_Loop)
(1) 4157/    13FC : 2A 89 1F            		ld	hl,(wave_Start)
(1) 4158/    13FF : 3A 8B 1F            		ld 	a,(wave_Start+2)
(1) 4159/    1402 : 81                  		add	a,c
(1) 4160/    1403 : 19                  		add	hl,de
(1) 4161/    1404 : CE 00               		adc	a,0
(1) 4162/    1406 : 22 98 1F            		ld	(dDacPntr),hl
(1) 4163/    1409 : 32 9A 1F            		ld	(dDacPntr+2),a
(1) 4164/    140C : 2A 8C 1F            		ld	hl,(wave_Len)
(1) 4165/    140F : 3A 8E 1F            		ld 	a,(wave_Len+2)
(1) 4166/    1412 : 91                  		sub	a,c
(1) 4167/    1413 : 37                  		scf
(1) 4168/    1414 : 3F                  		ccf
(1) 4169/    1415 : ED 52               		sbc	hl,de
(1) 4170/    1417 : DE 00               		sbc	a,0
(1) 4171/    1419 : 22 9B 1F            		ld	(dDacCntr),hl
(1) 4172/    141C : 32 9D 1F            		ld	(dDacCntr+2),a
(1) 4173/    141F : D1                  		pop	de
(1) 4174/    1420 : C1                  		pop	bc
(1) 4175/    1421 : 78                  		ld	a,b
(1) 4176/    1422 : B1                  		or	c
(1) 4177/    1423 : 28 17               		jr	z,.dacfill_ret
(1) 4178/    1425 : 3A 97 1F            		ld	a,(dDacFifoMid)
(1) 4179/    1428 : 5F                  		ld	e,a
(1) 4180/    1429 : C6 80               		add	a,80h
(1) 4181/    142B : 32 97 1F            		ld	(dDacFifoMid),a
(1) 4182/    142E : 2A 98 1F            		ld	hl,(dDacPntr)
(1) 4183/    1431 : 3A 9A 1F            		ld	a,(dDacPntr+2)
(1) 4184/    1434 : CD E7 10            		call	transferRom	; *** ROM ACCESS ***
(1) 4185/    1437 : 18 03               		jr	.dacfill_ret
(1) 4186/    1439 :                     .dacfill_end:
(1) 4187/    1439 : CD 31 13            		call	dac_off		; DAC finished
(1) 4188/    143C :                     .dacfill_ret:
(1) 4189/    143C : E1                  		pop	hl
(1) 4190/    143D : D1                  		pop	de
(1) 4191/    143E : C1                  		pop	bc
(1) 4192/    143F : C9                  		ret
(1) 4193/    1440 :                     
(1) 4194/    1440 :                     ; ----------------------------------------------------------------
(1) 4195/    1440 :                     ; Two purposes:
(1) 4196/    1440 :                     ;
(1) 4197/    1440 :                     ; Set the BANK to the very last part of memory for the
(1) 4198/    1440 :                     ; transferRom to read from RAM
(1) 4199/    1440 :                     ;
(1) 4200/    1440 :                     ; On 32X, sets the bank out of the ROM reading areas due
(1) 4201/    1440 :                     ; to a conflict with the PSG
(1) 4202/    1440 :                     ;
(1) 4203/    1440 :                     ; Uses:
(1) 4204/    1440 :                     ; hl,b
(1) 4205/    1440 :                     ; ----------------------------------------------------------------
(1) 4206/    1440 :                     
(1) 4207/    1440 :                     gema_lastbank:
(1) 4208/    1440 : 21 00 60            		ld	hl,6000h
(1) 4209/    1443 : 06 09               		ld	b,9		; 9 bits
(1) 4210/    1445 :                     .write:
(1) 4211/    1445 : 36 01               		ld	(hl),1
(1) 4212/    1447 : 10 FC               		djnz	.write
(1) 4213/    1449 : CF                  		rst	8
(1) 4214/    144A : C9                  		ret
(1) 4215/    144B :                     
(1) 4216/    144B :                     ; ----------------------------------------------------------------
(1) 4217/    144B :                     ; FM cache list
(1) 4218/    144B :                     ; ----------------------------------------------------------------
(1) 4219/    144B :                     
(1) 4220/    144B : 5F 16               fmcach_list:	dw fmcach_1
(1) 4221/    144D : 87 16               		dw fmcach_2
(1) 4222/    144F : AF 16               		dw fmcach_3
(1) 4223/    1451 : 00 00               		dw 0		; <-- skipped
(1) 4224/    1453 : D7 16               		dw fmcach_4
(1) 4225/    1455 : FF 16               		dw fmcach_5
(1) 4226/    1457 : 27 17               		dw fmcach_6
(1) 4227/    1459 :                     
(1) 4228/    1459 :                     ; ====================================================================
(1) 4229/    1459 :                     ; ----------------------------------------------------------------
(1) 4230/    1459 :                     ; Tables
(1) 4231/    1459 :                     ; ----------------------------------------------------------------
(1) 4232/    1459 :                     
(1) 4233/    1459 : 84 02               fmFreq_List:	dw 644
(1) 4234/    145B : A9 02               		dw 681
(1) 4235/    145D : D2 02               		dw 722
(1) 4236/    145F : FD 02               		dw 765
(1) 4237/    1461 : 2A 03               		dw 810
(1) 4238/    1463 : 5A 03               		dw 858
(1) 4239/    1465 : 8E 03               		dw 910
(1) 4240/    1467 : C4 03               		dw 964
(1) 4241/    1469 : FD 03               		dw 1021
(1) 4242/    146B : 39 04               		dw 1081
(1) 4243/    146D : 7A 04               		dw 1146
(1) 4244/    146F : BE 04               		dw 1214
(1) 4245/    1471 :                     psgFreq_List:
(1) 4246/    1471 :                     ; 	dw    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1	; x-0
(1) 4247/    1471 :                     ; 	dw    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1	; x-1
(1) 4248/    1471 :                     ; 	dw    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1	; x-2
(1) 4249/    1471 : FF FF FF FF FF FF   	dw    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,03F8h,03BFh,0389h	; x-3
             1477 : FF FF FF FF FF FF 
             147D : FF FF FF FF FF FF 
             1483 : F8 03 BF 03 89 03 
(1) 4250/    1489 : 56 03 26 03 F9 02   	dw 0356h,0326h,02F9h,02CEh,02A5h,0280h,025Ch,023Ah,021Ah,01FBh,01DFh,01C4h	; x-4
             148F : CE 02 A5 02 80 02 
             1495 : 5C 02 3A 02 1A 02 
             149B : FB 01 DF 01 C4 01 
(1) 4251/    14A1 : AB 01 93 01 7D 01   	dw 01ABh,0193h,017Dh,0167h,0153h,0140h,012Eh,011Dh,010Dh,00FEh,00EFh,00E2h	; x-5
             14A7 : 67 01 53 01 40 01 
             14AD : 2E 01 1D 01 0D 01 
             14B3 : FE 00 EF 00 E2 00 
(1) 4252/    14B9 : D6 00 C9 00 BE 00   	dw 00D6h,00C9h,00BEh,00B4h,00A9h,00A0h,0097h,008Fh,0087h,007Fh,0078h,0071h	; x-6
             14BF : B4 00 A9 00 A0 00 
             14C5 : 97 00 8F 00 87 00 
             14CB : 7F 00 78 00 71 00 
(1) 4253/    14D1 :                     ; 	dw 006Bh,0065h,005Fh,005Ah,0055h,0050h,004Bh,0047h,0043h,0040h,003Ch,0039h	; x-7
(1) 4254/    14D1 :                     ; 	dw 0036h,0033h,0030h,002Dh,002Bh,0028h,0026h,0024h,0022h,0020h,001Fh,001Dh	; x-8 *
(1) 4255/    14D1 :                     ; 	dw 001Bh,001Ah,0018h,0017h,0016h,0015h,0013h,0012h,0011h,0010h,0009h,0008h	; x-9 *
(1) 4256/    14D1 :                     
(1) 4257/    14D1 :                     
(1) 4258/    14D1 :                     ; ----------------------------------------
(1) 4259/    14D1 :                     ; DAC and PWM
(1) 4260/    14D1 :                     ;
(1) 4261/    14D1 :                     ; DAC base: 16000hz
(1) 4262/    14D1 :                     ; PWM base: 22050hz
(1) 4263/    14D1 :                     ; ----------------------------------------
(1) 4264/    14D1 :                     wavFreq_List:
(1) 4265/    14D1 :                     	;   C     C#    D     D#    E     F     F#    G     G#    A     A#    B
(1) 4266/    14D1 :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-0
(1) 4267/    14D1 :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-1
(1) 4268/    14D1 :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0036h,003Bh	; x-2
(1) 4269/    14D1 : 3E 00 43 00 46 00   	dw 003Eh,0043h,0046h,0049h,004Eh,0054h,0058h,005Eh,0063h,0068h,0070h,0075h	; x-3
             14D7 : 49 00 4E 00 54 00 
             14DD : 58 00 5E 00 63 00 
             14E3 : 68 00 70 00 75 00 
(1) 4270/    14E9 : 85 00 87 00 8C 00   	dw 0085h,0087h,008Ch,009Ah,00A4h,00ADh,00B2h,00C0h,00CCh,00D7h,00E6h,00F0h	; x-4
             14EF : 9A 00 A4 00 AD 00 
             14F5 : B2 00 C0 00 CC 00 
             14FB : D7 00 E6 00 F0 00 
(1) 4271/    1501 : 00 01 10 01 20 01   	dw 0100h,0110h,0120h,012Eh,0147h,015Ah,016Ah,017Fh,0191h,01ACh,01C2h,01E0h	; x-5
             1507 : 2E 01 47 01 5A 01 
             150D : 6A 01 7F 01 91 01 
             1513 : AC 01 C2 01 E0 01 
(1) 4272/    1519 : F8 01 10 02 40 02   	dw 01F8h,0210h,0240h,0260h,0280h,02A0h,02D0h,02F8h,0320h,0350h,0380h,03C0h	; x-6
             151F : 60 02 80 02 A0 02 
             1525 : D0 02 F8 02 20 03 
             152B : 50 03 80 03 C0 03 
(1) 4273/    1531 :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-7
(1) 4274/    1531 :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-8
(1) 4275/    1531 :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-9
(1) 4276/    1531 :                     
(1) 4277/    1531 :                     ; ----------------------------------------
(1) 4278/    1531 :                     ; SegaCD PCM ONLY
(1) 4279/    1531 :                     ;
(1) 4280/    1531 :                     ; PCM base: 32000hz
(1) 4281/    1531 :                     ; ----------------------------------------
(1) 4282/    1531 :                     wavFreq_CdPcm:
(1) 4283/    1531 :                     	;     C     C#     D      D#     E      F      F#     G      G#     A      A#     B
(1) 4284/    1531 :                     ; 	dw  0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h	; x-0
(1) 4285/    1531 :                     ; 	dw  0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h	; x-1
(1) 4286/    1531 :                     ; 	dw  0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h	; x-2  4000 unchecked
(1) 4287/    1531 : F8 01 14 02 3C 02   	dw  01F8h, 0214h, 023Ch, 0258h, 027Ch, 02A0h, 02C8h, 02F4h, 031Ch, 0348h, 037Ch, 03B0h	; x-3  8000 ok
             1537 : 58 02 7C 02 A0 02 
             153D : C8 02 F4 02 1C 03 
             1543 : 48 03 7C 03 B0 03 
(1) 4288/    1549 : F0 03 24 04 68 04   	dw  03F0h, 0424h, 0468h, 04A8h, 04ECh, 0540h, 0590h, 05E4h, 063Ch, 0698h, 0704h, 0760h	; x-4 16000 ok
             154F : A8 04 EC 04 40 05 
             1555 : 90 05 E4 05 3C 06 
             155B : 98 06 04 07 60 07 
(1) 4289/    1561 : DC 07 48 08 D4 08   	dw  07DCh, 0848h, 08D4h, 0960h, 09F0h, 0A64h, 0B04h, 0BAAh, 0C60h, 0D18h, 0DE4h, 0EB6h	; x-5 32000 ok
             1567 : 60 09 F0 09 64 0A 
             156D : 04 0B AA 0B 60 0C 
             1573 : 18 0D E4 0D B6 0E 
(1) 4290/    1579 : B0 0F 74 10 84 11   	dw  0FB0h, 1074h, 1184h, 1280h, 139Ch, 14C8h, 1624h, 174Ch, 18DCh, 1A38h, 1BE0h, 1D94h	; x-6 64000 unstable
             157F : 80 12 9C 13 C8 14 
             1585 : 24 16 4C 17 DC 18 
             158B : 38 1A E0 1B 94 1D 
(1) 4291/    1591 :                     ; 	dw  1F64h, 20FCh, 2330h, 2524h, 2750h, 29B4h, 2C63h, 2F63h, 31E0h, 347Bh, 377Bh, 3B41h	; x-7 128000 bad
(1) 4292/    1591 :                     ; 	dw  3EE8h, 4206h, 4684h, 4A5Ah, 4EB5h, 5379h, 58E1h, 5DE0h, 63C0h, 68FFh, 6EFFh, 783Ch	; x-8 256000 bad
(1) 4293/    1591 :                     ; 	dw  7FC2h, 83FCh, 8D14h, 9780h,0AA5Dh,0B1F9h,   -1 ,   -1 ,   -1 ,   -1 ,   -1 ,   -1 	; x-9 bad
(1) 4294/    1591 :                     
(1) 4295/    1591 :                     ; ====================================================================
(1) 4296/    1591 :                     ; ----------------------------------------------------------------
(1) 4297/    1591 :                     ; MASTER buffers list
(1) 4298/    1591 :                     ;
(1) 4299/    1591 :                     ; dw track_buffer
(1) 4300/    1591 :                     ; dw channel_list,block_cache,header_cache,track_cache
(1) 4301/    1591 :                     ;
(1) 4302/    1591 :                     ; (track_cache: 1BIT SIZES ONLY, ALIGNED)
(1) 4303/    1591 :                     ; ----------------------------------------------------------------
(1) 4304/    1591 :                     
(1) 4305/    1591 :                     nikona_BuffList:
(1) 4306/    1591 : AF 17 6F 18 4F 17   	dw trkBuff_0,trkBlks_0,trkHdrs_0,trkCach_0
             1597 : 00 1F             
(1) 4307/    1599 : EF 17 77 18 6F 17   	dw trkBuff_1,trkBlks_1,trkHdrs_1,trkCach_1
             159F : 20 1F             
(1) 4308/    15A1 : 2F 18 7F 18 8F 17   	dw trkBuff_2,trkBlks_2,trkHdrs_2,trkCach_2
             15A7 : 40 1F             
(1) 4309/    15A9 :                     ; 	dw trkBuff_3,trkBlks_3,trkHdrs_3,trkCach_3
(1) 4310/    15A9 :                     nikona_BuffList_e:
(1) 4311/    15A9 : FF FF               	dw -1	; ENDOFLIST
(1) 4312/    15AB :                     
(1) 4313/    15AB :                     ; ====================================================================
(1) 4314/    15AB :                     ; ----------------------------------------------------------------
(1) 4315/    15AB :                     ; Buffer section
(1) 4316/    15AB :                     ; ----------------------------------------------------------------
(1) 4317/    15AB :                     
(1) 4318/    15AB : 00 00 00 00 00 00   pcmcom:	db 00h,00h,00h,00h,00h,00h,00h,00h	; 0 - Playback bits: %0000PCOK /Pitchbend/keyCut/keyOff/KeyOn
             15B1 : 00 00             
(1) 4319/    15B3 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 8 - Pitch MSB
             15B9 : 00 00             
(1) 4320/    15BB : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 16 - Pitch LSB
             15C1 : 00 00             
(1) 4321/    15C3 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 24 - Volume
             15C9 : 00 00             
(1) 4322/    15CB : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 32 - Panning %RRRRLLLL
             15D1 : 00 00             
(1) 4323/    15D3 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 40 - LoopEnable bit | 24-bit sample location in Sub-CPU area
             15D9 : 00 00             
(1) 4324/    15DB : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 48
             15E1 : 00 00             
(1) 4325/    15E3 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 56
             15E9 : 00 00             
(1) 4326/    15EB :                     
(1) 4327/    15EB : 00 00 00 00 00 00   pwmcom:	db 00h,00h,00h,00h,00h,00h,00h,00h	; 0 - Playback bits: %0000PCOK Pitchbend/keyCut/keyOff/KeyOn
             15F1 : 00 00             
(1) 4328/    15F3 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 8 - Volume | Pitch MSB
             15F9 : 00 00             
(1) 4329/    15FB : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 16 - Pitch LSB
             1601 : 00 00             
(1) 4330/    1603 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 24 - Flags+MSB bits of sample %SlLRxxxx Stereo/Loop/Left/Right
             1609 : 00 00             
(1) 4331/    160B : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 32 -
             1611 : 00 00             
(1) 4332/    1613 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h
             1619 : 00 00             
(1) 4333/    161B : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h
             1621 : 00 00             
(1) 4334/    1623 :                     
(1) 4335/    1623 : 00 00 00 00         psgcom:	db 00h,00h,00h,00h	;  0 - command 1 = key on, 2 = key off, 4 = stop snd
(1) 4336/    1627 : FF FF FF FF         	db -1, -1, -1, -1	;  4 - output level attenuation (%llll.0000, -1 = silent)
(1) 4337/    162B : 00 00 00 00         	db 00h,00h,00h,00h	;  8 - attack rate (START)
(1) 4338/    162F : 00 00 00 00         	db 00h,00h,00h,00h	; 12 - decay rate
(1) 4339/    1633 : 00 00 00 00         	db 00h,00h,00h,00h	; 16 - sustain level attenuation (MAXIMUM)
(1) 4340/    1637 : 00 00 00 00         	db 00h,00h,00h,00h	; 20 - release rate
(1) 4341/    163B : 00 00 00 00         	db 00h,00h,00h,00h	; 24 - envelope mode 0 = off, 1 = attack, 2 = decay, 3 = sustain
(1) 4342/    163F : 00 00 00 00         	db 00h,00h,00h,00h	; 28 - freq bottom 4 bits
(1) 4343/    1643 : 00 00 00 00         	db 00h,00h,00h,00h	; 32 - freq upper 6 bits
(1) 4344/    1647 : 00 00 00 00         	db 00h,00h,00h,00h	; 36 - attack level attenuation
(1) 4345/    164B : 00 00 00 00         	db 00h,00h,00h,00h	; 40 - flags to indicate hardware should be updated
(1) 4346/    164F : 00 00 00 00         	db 00h,00h,00h,00h	; 44 - timer for sustain
(1) 4347/    1653 : 00 00 00 00         	db 00h,00h,00h,00h	; 48 - MAX Volume
(1) 4348/    1657 : 00 00 00 00         	db 00h,00h,00h,00h	; 52 - Vibrato value
(1) 4349/    165B : 00 00 00 00         	db 00h,00h,00h,00h	; 56 - General timer
(1) 4350/    165F :                     
(1) 4351/    165F :                     ; FM instrument storage
(1) 4352/    165F :                     fmcach_1	ds 28h
(1) 4353/    1687 :                     fmcach_2	ds 28h
(1) 4354/    16AF :                     fmcach_3	ds 28h
(1) 4355/    16D7 :                     fmcach_4	ds 28h
(1) 4356/    16FF :                     fmcach_5	ds 28h
(1) 4357/    1727 :                     fmcach_6	ds 28h
(1) 4358/    174F :                     
(1) 4359/    174F :                     ; --------------------------------------------------------
(1) 4360/    174F :                     ; * USER customizable section *
(1) 4361/    174F :                     ;
(1) 4362/    174F :                     ; trkCach's MUST BE 00h ALIGNED.
(1) 4363/    174F :                     ; --------------------------------------------------------
(1) 4364/    174F :                     
(1) 4365/    174F :                     trkHdrs_0	ds 8*4			; dw point,rowcntr
(1) 4366/    176F :                     trkHdrs_1	ds 8*4
(1) 4367/    178F :                     trkHdrs_2	ds 8*4
(1) 4368/    17AF :                     trkBuff_0	ds trk_ChnIndx+MAX_TRKINDX
(1) 4369/    17EF :                     trkBuff_1	ds trk_ChnIndx+MAX_TRKINDX
(1) 4370/    182F :                     trkBuff_2	ds trk_ChnIndx+MAX_TRKINDX
(1) 4371/    186F :                     trkBlks_0	ds 8
(1) 4372/    1877 :                     trkBlks_1	ds 8
(1) 4373/    187F :                     trkBlks_2	ds 8
(1) 4374/    1887 :                     
(1) 4375/    1887 :                     ; ====================================================================
(1) 4376/    1887 :                     ; --------------------------------------------------------
(1) 4377/    1887 :                     ; Channel table struct:
(1) 4378/    1887 :                     ; 00  - DIRECT Linked channel from trkChnls
(1) 4379/    1887 :                     ; 02  - 00h-7Fh: Priority level or 80h+ Silence request (chip ID)
(1) 4380/    1887 :                     ; 03  - MASTER Volume for this channel
(1) 4381/    1887 :                     ; 04  - Chip index (YM2612: KEY index)
(1) 4382/    1887 :                     ; 05  - FREE
(1) 4383/    1887 :                     ; 06  - Frequency list index (YM2612: %oooiiiii oct|index)
(1) 4384/    1887 :                     ; 07  - Pitchbend add/sub
(1) 4385/    1887 :                     ; 08  - Current volume: 00-max
(1) 4386/    1887 :                     ; 09  - Stored effect setting
(1) 4387/    1887 :                     ; 0A  - FREE
(1) 4388/    1887 :                     ; 0B  - FREE
(1) 4389/    1887 :                     ; 0C+ - Misc. settings for the current chip
(1) 4390/    1887 :                     ; 10+ - Intrument data
(1) 4391/    1887 :                     ;
(1) 4392/    1887 :                     ; PSG   80h
(1) 4393/    1887 :                     ; PSGN  90h
(1) 4394/    1887 :                     ; FM   0A0h
(1) 4395/    1887 :                     ; FM3  0B0h
(1) 4396/    1887 :                     ; DAC  0C0h
(1) 4397/    1887 :                     ; PCM  0D0h
(1) 4398/    1887 :                     ; PWM  0E0h
(1) 4399/    1887 :                     ; --------------------------------------------------------
(1) 4400/    1887 :                     
(1) 4401/    1887 : 10 00               tblList:	dw tblPSG-tblList		;  80h
(1) 4402/    1889 : 5A 80               		dw tblPSGN-tblList|8000h	;  90h *
(1) 4403/    188B : 72 00               		dw tblFM-tblList		; 0A0h
(1) 4404/    188D : D2 80               		dw tblFM3-tblList|8000h		; 0B0h *
(1) 4405/    188F : EA 80               		dw tblFM6-tblList|8000h		; 0C0h *
(1) 4406/    1891 : 04 01               		dw tblPCM-tblList		; 0D0h
(1) 4407/    1893 : C6 01               		dw tblPWM-tblList		; 0E0h
(1) 4408/    1895 : 00 00               		dw 0
(1) 4409/    1897 : 00 00 00 00 00 00   tblPSG:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             189D : 00 00             
(1) 4410/    189F : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             18A5 : 00 00             
(1) 4411/    18A7 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             18AD : 00 00             
(1) 4412/    18AF : 00 00 00 00 01 00   		db 00h,00h,00h,00h,01h,00h,00h,00h	; Channel 2
             18B5 : 00 00             
(1) 4413/    18B7 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             18BD : 00 00             
(1) 4414/    18BF : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             18C5 : 00 00             
(1) 4415/    18C7 : 00 00 00 00 02 00   		db 00h,00h,00h,00h,02h,00h,00h,00h	; Channel 3
             18CD : 00 00             
(1) 4416/    18CF : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             18D5 : 00 00             
(1) 4417/    18D7 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             18DD : 00 00             
(1) 4418/    18DF : FF FF               		dw -1	; end-of-list
(1) 4419/    18E1 : 00 00 00 00 03 00   tblPSGN:	db 00h,00h,00h,00h,03h,00h,00h,03h	; Noise
             18E7 : 00 03             
(1) 4420/    18E9 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             18EF : 00 00             
(1) 4421/    18F1 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             18F7 : 00 00             
(1) 4422/    18F9 : 00 00 00 00 00 00   tblFM:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             18FF : 00 00             
(1) 4423/    1901 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1907 : 00 00             
(1) 4424/    1909 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             190F : 00 00             
(1) 4425/    1911 : 00 00 00 00 01 00   		db 00h,00h,00h,00h,01h,00h,00h,00h	; Channel 2
             1917 : 00 00             
(1) 4426/    1919 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             191F : 00 00             
(1) 4427/    1921 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1927 : 00 00             
(1) 4428/    1929 : 00 00 00 00 04 00   		db 00h,00h,00h,00h,04h,00h,00h,00h	; Channel 4 <--
             192F : 00 00             
(1) 4429/    1931 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1937 : 00 00             
(1) 4430/    1939 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             193F : 00 00             
(1) 4431/    1941 : 00 00 00 00 05 00   		db 00h,00h,00h,00h,05h,00h,00h,00h	; Channel 5
             1947 : 00 00             
(1) 4432/    1949 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             194F : 00 00             
(1) 4433/    1951 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1957 : 00 00             
(1) 4434/    1959 : 00 00 00 00 02 00   tblFM3:		db 00h,00h,00h,00h,02h,00h,00h,00h	; Channel 3 <--
             195F : 00 00             
(1) 4435/    1961 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1967 : 00 00             
(1) 4436/    1969 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             196F : 00 00             
(1) 4437/    1971 : 00 00 00 00 06 00   tblFM6:		db 00h,00h,00h,00h,06h,00h,00h,00h	; Channel 6 <--
             1977 : 00 00             
(1) 4438/    1979 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             197F : 00 00             
(1) 4439/    1981 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1987 : 00 00             
(1) 4440/    1989 : FF FF               		dw -1	; end-of-list
(1) 4441/    198B : 00 00 00 00 00 00   tblPCM:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             1991 : 00 00             
(1) 4442/    1993 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1999 : 00 00             
(1) 4443/    199B : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             19A1 : 00 00             
(1) 4444/    19A3 : 00 00 00 00 01 00   		db 00h,00h,00h,00h,01h,00h,00h,00h	; Channel 2
             19A9 : 00 00             
(1) 4445/    19AB : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             19B1 : 00 00             
(1) 4446/    19B3 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             19B9 : 00 00             
(1) 4447/    19BB : 00 00 00 00 02 00   		db 00h,00h,00h,00h,02h,00h,00h,00h	; Channel 3
             19C1 : 00 00             
(1) 4448/    19C3 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             19C9 : 00 00             
(1) 4449/    19CB : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             19D1 : 00 00             
(1) 4450/    19D3 : 00 00 00 00 03 00   		db 00h,00h,00h,00h,03h,00h,00h,00h	; Channel 4
             19D9 : 00 00             
(1) 4451/    19DB : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             19E1 : 00 00             
(1) 4452/    19E3 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             19E9 : 00 00             
(1) 4453/    19EB : 00 00 00 00 04 00   		db 00h,00h,00h,00h,04h,00h,00h,00h	; Channel 5
             19F1 : 00 00             
(1) 4454/    19F3 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             19F9 : 00 00             
(1) 4455/    19FB : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A01 : 00 00             
(1) 4456/    1A03 : 00 00 00 00 05 00   		db 00h,00h,00h,00h,05h,00h,00h,00h	; Channel 6
             1A09 : 00 00             
(1) 4457/    1A0B : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A11 : 00 00             
(1) 4458/    1A13 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A19 : 00 00             
(1) 4459/    1A1B : 00 00 00 00 06 00   		db 00h,00h,00h,00h,06h,00h,00h,00h	; Channel 7
             1A21 : 00 00             
(1) 4460/    1A23 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A29 : 00 00             
(1) 4461/    1A2B : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A31 : 00 00             
(1) 4462/    1A33 : 00 00 00 00 07 00   		db 00h,00h,00h,00h,07h,00h,00h,00h	; Channel 7
             1A39 : 00 00             
(1) 4463/    1A3B : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A41 : 00 00             
(1) 4464/    1A43 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A49 : 00 00             
(1) 4465/    1A4B : FF FF               		dw -1	; end-of-list
(1) 4466/    1A4D : 00 00 00 00 00 00   tblPWM:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             1A53 : 00 00             
(1) 4467/    1A55 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A5B : 00 00             
(1) 4468/    1A5D : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A63 : 00 00             
(1) 4469/    1A65 : 00 00 00 00 01 00   		db 00h,00h,00h,00h,01h,00h,00h,00h	; Channel 2
             1A6B : 00 00             
(1) 4470/    1A6D : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A73 : 00 00             
(1) 4471/    1A75 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A7B : 00 00             
(1) 4472/    1A7D : 00 00 00 00 02 00   		db 00h,00h,00h,00h,02h,00h,00h,00h	; Channel 3
             1A83 : 00 00             
(1) 4473/    1A85 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A8B : 00 00             
(1) 4474/    1A8D : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A93 : 00 00             
(1) 4475/    1A95 : 00 00 00 00 03 00   		db 00h,00h,00h,00h,03h,00h,00h,00h	; Channel 4
             1A9B : 00 00             
(1) 4476/    1A9D : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1AA3 : 00 00             
(1) 4477/    1AA5 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1AAB : 00 00             
(1) 4478/    1AAD : 00 00 00 00 04 00   		db 00h,00h,00h,00h,04h,00h,00h,00h	; Channel 5
             1AB3 : 00 00             
(1) 4479/    1AB5 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1ABB : 00 00             
(1) 4480/    1ABD : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1AC3 : 00 00             
(1) 4481/    1AC5 : 00 00 00 00 05 00   		db 00h,00h,00h,00h,05h,00h,00h,00h	; Channel 6
             1ACB : 00 00             
(1) 4482/    1ACD : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1AD3 : 00 00             
(1) 4483/    1AD5 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1ADB : 00 00             
(1) 4484/    1ADD : 00 00 00 00 06 00   		db 00h,00h,00h,00h,06h,00h,00h,00h	; Channel 7
             1AE3 : 00 00             
(1) 4485/    1AE5 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1AEB : 00 00             
(1) 4486/    1AED : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1AF3 : 00 00             
(1) 4487/    1AF5 : FF FF               		dw -1	; end-of-list
(1) 4488/    1AF7 :                     
(1) 4489/    1AF7 :                     trkInfoCach	ds 4*3		; per track slot
(1) 4490/    1B03 :                     instListOut	ds 8*3
(1) 4491/    1B1B :                     
(1) 4492/    1B1B :                     ; ====================================================================
(1) 4493/    1B1B :                     ; ----------------------------------------------------------------
(1) 4494/    1B1B :                     ; Special aligned buffers
(1) 4495/    1B1B :                     ;
(1) 4496/    1B1B :                     ; Located at 1D00h
(1) 4497/    1B1B :                     ; ----------------------------------------------------------------
(1) 4498/    1B1B :                     
(1) 4499/    1D00 :                     		org 1D00h
(1) 4500/    1D00 :                     dWaveBuff	ds 100h		; WAVE data buffer: 100h bytes, updates every 80h
(1) 4501/    1E00 :                     trkChnls	ds 8*MAX_TRKCHN
(1) 4502/    1F00 :                     trkCach_0	ds MAX_RCACH	; <--
(1) 4503/    1F20 :                     trkCach_1	ds MAX_RCACH
(1) 4504/    1F40 :                     trkCach_2	ds MAX_RCACH
(1) 4505/    1F60 :                     trkCach_3	ds MAX_RCACH
(1) 4506/    1F80 :                     
(1) 4507/    1F80 :                     ; --------------------------------------------------------
(1) 4508/    1F80 :                     
(1) 4509/    1F80 :                     ; last temporals...
(1) 4510/    1F80 : 00                  tickSpSet	db 0		; **
(1) 4511/    1F81 : 00                  tickFlag	db 0		; Tick flag from VBlank
(1) 4512/    1F82 : 00                  tickCnt		db 0		; ** Tick counter (PUT THIS AFTER tickFlag)
(1) 4513/    1F83 : 00                  psgHatMode	db 0		; Current PSGN mode
(1) 4514/    1F84 : 00                  fmSpecial	db 0		; copy of FM3 enable bit
(1) 4515/    1F85 : 00                  commZRead	db 0		; cmd fifo READ pointer (here)
(1) 4516/    1F86 : 00                  trkListPage	db 0
(1) 4517/    1F87 : 00                  marsUpd		db 0		; Flag to request a PWM transfer
(1) 4518/    1F88 : 00                  mcdUpd		db 0		; Flag to request a PCM transfer
(1) 4519/    1F89 : 00 00               wave_Start	dw 0		; START: 68k 24-bit pointer
(1) 4520/    1F8B : 00                  		db 0
(1) 4521/    1F8C : 00 00               wave_Len	dw 0		; LENGTH 24-bit
(1) 4522/    1F8E : 00                  		db 0
(1) 4523/    1F8F : 00 00               wave_Loop	dw 0		; LOOP POINT 24-bit
(1) 4524/    1F91 : 00                  		db 0
(1) 4525/    1F92 : 00 01               wave_Pitch	dw 0100h	; 01.00h
(1) 4526/    1F94 : 00                  wave_Flags	db 0		; WAVE playback flags (%10x: 1 loop / 0 no loop)
(1) 4527/    1F95 : 00                  wave_Priority	db 0
(1) 4528/    1F96 : 00                  currTickBits	db 0		; Current Tick/Subbeat flags (000000BTb B-beat, T-tick)
(1) 4529/    1F97 : 00                  dDacFifoMid	db 0		; WAVE play halfway refill flag (00h/80h)
(1) 4530/    1F98 : 00 00 00            dDacPntr	db 0,0,0	; WAVE play current ROM position
(1) 4531/    1F9B : 00 00 00            dDacCntr	db 0,0,0	; WAVE play length counter
(1) 4532/    1F9E : 00                  x68ksrclsb	db 0		; transferRom temporal LSB
(1) 4533/    1F9F : 00                  x68ksrcmid	db 0		; transferRom temporal MID
(1) 4534/    1FA0 : 00 00               sbeatAcc	dw 0		; Accumulates on each tick to trigger the sub beats
(1) 4535/    1FA2 : D5 00               sbeatPtck	dw 200+13	; Default global subbeats (-32 for PAL)
(1) 4536/    1FA4 :                     headerOut	ds 00Eh		; Temporal storage for 68k pointers
(1) 4537/    1FB2 :                     headerOut_e	ds 2		; reverse readpoint
(1) 4538/    1FB4 :                     sampleHead	ds 006h
(1) 4539/    1FBA :                     
(1) 4540/    1FBA :                     ; --------------------------------------------------------
(1) 4541/    1FBA :                     
(1) 4542/    3250 :                     		dephase
(1) 4543/    3250 :                     		cpu 68000		; [AS] Return to 68k
(1) 4544/    3250 :                     		padding off		; [AS] NO padding
(1) 4545/    3250 :                     		align 2
(1) 4546/    3250 :                     
     283/    3250 :                     Z80_CODE_END:
     287/    3250 :                     
     289/    3250 :                     
     290/    3250 :                     ; ===========================================================================
     291/    3250 :                     ; ----------------------------------------------------------------
     292/    3250 :                     ; DATA section shared on both Cartridge or Disc
     293/    3250 :                     ; ----------------------------------------------------------------
     294/    3250 :                     
     295/    3250 :                     ; --------------------------------------------------------
     296/    3250 :                     ; CD/CD32X ISO header and files
     297/    3250 :                     ; --------------------------------------------------------
     298/    3250 :                     
     314/    3250 :                     
     315/    3250 :                     ; ====================================================================
     316/    3250 :                     ; --------------------------------------------------------
     317/    3250 :                     ; SEGA CD SUB-CPU data
     318/    3250 :                     ; --------------------------------------------------------
     319/    3250 :                     
     332/    3250 :                     
     333/    3250 :                     ; ----------------------------------------------------------------
     334/    3250 :                     ; SH2 code and shared data stored in SDRAM
     335/    3250 :                     ; ----------------------------------------------------------------
     336/    3250 :                     
     342/    3250 :                     MARS_RAMCODE:
     346/    3250 :                     MARS_RAMCODE_E:
     351/    3250 :                     
     352/    3250 :                     ; ====================================================================
     353/    3250 :                     ; --------------------------------------------------------
     354/    3250 :                     ; Screen modes
     355/    3250 :                     ;
     356/    3250 :                     ; These are stored as separate files on DISC
     357/    3250 :                     ;
     358/    3250 :                     ; Usage:
     359/    3250 :                     ; screen_code START_LABEL,END_LABEL,CODE_PATH
     360/    3250 :                     ; --------------------------------------------------------
     361/    3250 :                     
     362/    3250 : (MACRO)              	screen_code Md_Screen00,Md_Screen00_e,"game/screen_0/code.asm"
     362/    3250 : =$3250               MD_SCREEN00 label *
     362/    3250 :                     
     362/    3250 :                     mctopscrn:
     362/    3250 :                     mcscrn_s:
     362/    3250 :                             include "game/screen_0/code.asm";"game/screen_0/code.asm"
(1)    1/    3250 :                     ; ====================================================================
(1)    2/    3250 :                     ; ----------------------------------------------------------------
(1)    3/    3250 :                     ; SCREEN MODE 0
(1)    4/    3250 :                     ; ----------------------------------------------------------------
(1)    5/    3250 :                     
(1)    6/    3250 :                     ; ====================================================================
(1)    7/    3250 :                     ; ------------------------------------------------------
(1)    8/    3250 :                     ; Variables
(1)    9/    3250 :                     ; ------------------------------------------------------
(1)   10/    3250 :                     
(1)   11/    3250 : =$440                setVram_Mikami	equ $0440
(1)   12/    3250 : =$480                setVram_Sisi	equ $0480
(1)   13/    3250 :                     
(1)   14/    3250 :                     ; ====================================================================
(1)   15/    3250 :                     ; ------------------------------------------------------
(1)   16/    3250 :                     ; Structs
(1)   17/    3250 :                     ; ------------------------------------------------------
(1)   18/    3250 :                     
(1)   19/    3250 :                     ; 		strct 0
(1)   20/    3250 :                     ; strc_xpos	ds.w 1
(1)   21/    3250 :                     ; strc_ypos	ds.w 1
(1)   22/    3250 :                     ; 		endstrct
(1)   23/    3250 :                     
(1)   24/    3250 :                     ; ====================================================================
(1)   25/    3250 :                     ; ------------------------------------------------------
(1)   26/    3250 :                     ; This mode's RAM
(1)   27/    3250 :                     ; ------------------------------------------------------
(1)   28/    3250 :                     
(1)   29/    3250 :  (MACRO-2)           			strct RAM_ScrnBuff
(1)   29/    3250 : =$3250               GLBL_LASTPC     set *
(1)   29/FFFFFFFFFFFFE368 :                                     dephase
(1)   29/FFFFFFFFFFFFD204 :                                     phase RAM_SCRNBUFF
(1)   29/FFFFFFFFFFFFD204 : =$FFFFFFFFFFFFD204   GLBL_LASTORG    set *
(1)   30/FFFFFFFFFFFFD204 :                     RAM_CurrPick		ds.w 1
(1)   31/FFFFFFFFFFFFD206 :                     RAM_GemaArg0		ds.w 1
(1)   32/FFFFFFFFFFFFD208 :                     RAM_GemaArg1		ds.w 1
(1)   33/FFFFFFFFFFFFD20A :                     RAM_GemaArg2		ds.w 1
(1)   34/FFFFFFFFFFFFD20C :                     
(1)   35/FFFFFFFFFFFFD20C :                     RAM_GemaArg3		ds.w 1
(1)   36/FFFFFFFFFFFFD20E :                     RAM_GemaArg4		ds.w 1
(1)   37/FFFFFFFFFFFFD210 :                     RAM_GemaArg5		ds.w 1
(1)   38/FFFFFFFFFFFFD212 :                     RAM_ChnlLinks		ds.w 26
(1)   39/FFFFFFFFFFFFD246 :                     sizeof_thisbuff		ds.l 0
(1)   40/FFFFFFFFFFFFD24C :  (MACRO-2)           			endstrct
(1)   40/FFFFFFFFFFFFD204 :                                     org GLBL_LASTORG
(1)   40/    3250 :                                     phase GLBL_LASTPC
(1)   41/    3250 :  (MACRO-2)           			erreport "SCREEN BUFFER",sizeof_thisbuff-RAM_ScrnBuff,MAX_ScrnBuff
(1)   42/    3250 :                     
(1)   43/    3250 :                     ; ====================================================================
(1)   44/    3250 :                     ; ------------------------------------------------------
(1)   45/    3250 :                     ; Init
(1)   46/    3250 :                     ; ------------------------------------------------------
(1)   47/    3250 :                     
(1)   48/    3250 : 6100 DF30           		bsr	Mode_Init
(1)   49/    3254 :  (MACRO-2)           		set_dbanks file_mddata_def,pointr_marsdata_def
(1)   50/    3254 :                     
(1)   51/    3254 :                     	; ----------------------------------------------
(1)   52/    3254 :                     	; Load assets
(1)   79/    3254 : 203C 0003 32D0      		move.l	#ART_TEST,d0
(1)   80/    325A : 323C 0020           		move.w	#cell_vram($0001),d1
(1)   81/    325E : 343C 8780           		move.w	#ART_TEST_E-ART_TEST,d2
(1)   82/    3262 : 6100 D570           		bsr	Video_LoadArt
(1)   83/    3266 : 41F8 3628           		lea	(MAP_TEST),a0			; long lea
(1)   84/    326A : 203C 0001 0000      		move.l	#locate(0,0,1),d0
(1)   85/    3270 : 223C 0027 001B      		move.l	#map_size(320,224),d1
(1)   86/    3276 : 343C 0001           		move.w	#$0001,d2
(1)   87/    327A : 6100 D6FC           		bsr	Video_LoadMap
(1)   89/    327E : 41F9 0003 26D0      		lea	(ASCII_FONT).l,a0
(1)   90/    3284 : 43F9 0000 03B8      		lea	(ASCII_PAL).l,a1
(1)   91/    328A : 6100 D742           		bsr	Video_PrintInit
(1)   92/    328E : 203C 0003 BA50      		move.l	#Art_Sisi,d0
(1)   93/    3294 : 323C 9000           		move.w	#cell_vram(setVram_Sisi),d1
(1)   94/    3298 : 343C 05E0           		move.w	#Art_Sisi_e-Art_Sisi,d2
(1)   95/    329C : 6100 D536           		bsr	Video_LoadArt
(1)   96/    32A0 :                     
(1)   97/    32A0 : 41FA 02A2           		lea	PAL_TEST(pc),a0
(1)   98/    32A4 : 7000                		moveq	#0,d0
(1)   99/    32A6 : 323C 0010           		move.w	#16,d1
(1)  100/    32AA : 6100 D20C           		bsr	Video_FadePal
(1)  101/    32AE : 41F8 4338           		lea	(objPal_Sisi),a0
(1)  102/    32B2 : 7010                		moveq	#16,d0
(1)  103/    32B4 : 323C 0010           		move.w	#16,d1
(1)  104/    32B8 : 6100 D1FE           		bsr	Video_FadePal
(1)  105/    32BC : 41FA 02A2           		lea	str_TesterInit(pc),a0
(1)  106/    32C0 : 203C 0000 0101      		move.l	#locate(1,1,0),d0
(1)  107/    32C6 : 6100 D730           		bsr	Video_Print
(1)  108/    32CA :                     ; 		move.l	#Object_Mikami,d0
(1)  109/    32CA :                     ; 		moveq	#0,d1
(1)  110/    32CA :                     ; 		bsr	Objects_Set
(1)  111/    32CA : 203C 0000 34CE      		move.l	#Object_Sisi,d0
(1)  112/    32D0 : 6100 D96A           		bsr	Objects_Add
(1)  113/    32D4 :                     	; ----------------------------------------------
(1)  114/    32D4 : 4278 D206           		clr.w	(RAM_GemaArg0).w
(1)  115/    32D8 : 4278 D208           		clr.w	(RAM_GemaArg1).w
(1)  116/    32DC : 4278 D20A           		clr.w	(RAM_GemaArg2).w
(1)  117/    32E0 : 4278 D20C           		clr.w	(RAM_GemaArg3).w
(1)  118/    32E4 : 4278 D20E           		clr.w	(RAM_GemaArg4).w
(1)  119/    32E8 : 4278 D210           		clr.w	(RAM_GemaArg5).w
(1)  120/    32EC : 303C 00E8           		move.w	#200+32,d0
(1)  121/    32F0 : 6100 D052           		bsr	gemaSetBeats
(1)  122/    32F4 :                     ; 		moveq	#1,d0
(1)  123/    32F4 :                     ; 		bsr	gemaPlayTrack
(1)  124/    32F4 :                     	; ----------------------------------------------
(1)  125/    32F4 : 6174                		bsr	.show_me
(1)  126/    32F6 :                     ; 		bsr	.steal_vars
(1)  127/    32F6 : 6100 D8FC           		bsr	Objects_Run
(1)  128/    32FA :                     	; ----------------------------------------------
(1)  129/    32FA : 08F9 0006 FFFF      		bset	#bitDispEnbl,(RAM_VdpRegs+1).l		; Enable display
             3300 : BDF7             
(1)  130/    3302 : 11FC 0081 BE02      		move.b	#%10000001,(RAM_VdpRegs+$C).w		; H40 + shadow mode
(1)  131/    3308 : 6100 D07C           		bsr	Video_Update
(1)  132/    330C : 6100 D146           		bsr	Video_FadeIn
(1)  133/    3310 :                     
(1)  134/    3310 :                     ; ====================================================================
(1)  135/    3310 :                     ; ------------------------------------------------------
(1)  136/    3310 :                     ; Loop
(1)  137/    3310 :                     ; ------------------------------------------------------
(1)  138/    3310 :                     
(1)  139/    3310 :                     .loop:
(1)  140/    3310 : 6100 DC2A           		bsr	System_Render
(1)  141/    3314 :                     
(1)  142/    3314 :                     ; 		bsr	.steal_vars
(1)  143/    3314 : 6100 D8DE           		bsr	Objects_Run
(1)  144/    3318 : 41FA 0306           		lea	str_Info(pc),a0
(1)  145/    331C : 203C 0000 1F1A      		move.l	#locate(31,26,0),d0
(1)  146/    3322 : 6100 D6D4           		bsr	Video_Print
(1)  147/    3326 :                     
(1)  148/    3326 :                     	; Controls
(1)  161/    3326 :                     
(1)  162/    3326 : 4DF8 C004           		lea	(Controller_1).w,a6
(1)  163/    332A : 4BF8 D204           		lea	(RAM_CurrPick).w,a5
(1)  164/    332E :                     	; UP/DOWN
(1)  165/    332E : 3E2E 0002           		move.w	on_hold(a6),d7
(1)  166/    3332 : 0807 0004           		btst	#bitJoyB,d7
(1)  167/    3336 : 6626                		bne.s.	.n_up
(1)  168/    3338 : 3E2E 0004           		move.w	on_press(a6),d7
(1)  169/    333C : 0807 0001           		btst	#bitJoyDown,d7
(1)  170/    3340 : 670A                		beq.s	.n_down
(1)  171/    3342 : 0C55 0004           		cmp.w	#4,(a5)		; MAX OPTIONS
(1)  172/    3346 : 6704                		beq.s	.n_down
(1)  173/    3348 : 5255                		addq.w	#1,(a5)
(1)  174/    334A : 611E                		bsr.s	.show_me
(1)  175/    334C :                     .n_down:
(1)  176/    334C : 3E2E 0004           		move.w	on_press(a6),d7
(1)  177/    3350 : 0807 0000           		btst	#bitJoyUp,d7
(1)  178/    3354 : 6708                		beq.s	.n_up
(1)  179/    3356 : 4A55                		tst.w	(a5)
(1)  180/    3358 : 6704                		beq.s	.n_up
(1)  181/    335A : 5355                		subq.w	#1,(a5)
(1)  182/    335C : 610C                		bsr.s	.show_me
(1)  183/    335E :                     .n_up:
(1)  184/    335E : 3E38 D204           		move.w	(RAM_CurrPick).w,d7
(1)  185/    3362 : E54F                		lsl.w	#2,d7
(1)  186/    3364 : 4EBB 7012           		jsr	.jump_list(pc,d7.w)
(1)  187/    3368 :                     .n_cbtn:
(1)  188/    3368 : 60A6                		bra	.loop
(1)  189/    336A :                     ; ------------------------------------------------------
(1)  190/    336A :                     
(1)  191/    336A :                     .show_me:
(1)  192/    336A : 41FA 0288           		lea	str_ShowMe(pc),a0
(1)  193/    336E : 203C 0000 1705      		move.l	#locate(23,5,0),d0
(1)  194/    3374 : 6000 D682           		bra	Video_Print
(1)  195/    3378 :                     
(1)  196/    3378 :                     ; ------------------------------------------------------
(1)  197/    3378 :                     
(1)  198/    3378 :                     .jump_list:
(1)  199/    3378 : 6000 001E           		bra.w	.nothing
(1)  200/    337C : 6000 002C           		bra.w	.option_1
(1)  201/    3380 : 6000 00AE           		bra.w	.option_2
(1)  202/    3384 : 6000 00C4           		bra.w	.option_3
(1)  203/    3388 : 6000 00DC           		bra.w	.option_4
(1)  204/    338C : 6000 000A           		bra.w	.nothing
(1)  205/    3390 : 6000 0006           		bra.w	.nothing
(1)  206/    3394 : 6000 0002           		bra.w	.nothing
(1)  207/    3398 :                     
(1)  208/    3398 :                     ; ------------------------------------------------------
(1)  209/    3398 :                     ; OPTION 0
(1)  210/    3398 :                     ; ------------------------------------------------------
(1)  211/    3398 :                     
(1)  212/    3398 :                     .nothing:
(1)  213/    3398 : 3E2E 0004           		move.w	on_press(a6),d7
(1)  214/    339C : 0807 0007           		btst	#bitJoyStart,d7
(1)  215/    33A0 : 6706                		beq.s	.no_press
(1)  216/    33A2 : 61C6                		bsr.s	.show_me
(1)  217/    33A4 : 6000 CF2C           		bra	gemaTest
(1)  218/    33A8 :                     .no_press:
(1)  219/    33A8 : 4E75                		rts
(1)  220/    33AA :                     
(1)  221/    33AA :                     ; ------------------------------------------------------
(1)  222/    33AA :                     ; OPTION 1
(1)  223/    33AA :                     ; ------------------------------------------------------
(1)  224/    33AA :                     
(1)  225/    33AA :                     .option_1:
(1)  226/    33AA : 4BF8 D206           		lea	(RAM_GemaArg0).w,a5
(1)  227/    33AE : 3E2E 0004           		move.w	on_press(a6),d7
(1)  228/    33B2 : 0807 0007           		btst	#bitJoyStart,d7
(1)  229/    33B6 : 671E                		beq.s	.option1_args
(1)  230/    33B8 : 301D                		move.w	(a5)+,d0
(1)  231/    33BA : 321D                		move.w	(a5)+,d1
(1)  232/    33BC : 341D                		move.w	(a5)+,d2
(1)  233/    33BE : 6100 CF2A           		bsr	gemaPlayTrack
(1)  234/    33C2 : 3038 D208           		move.w	(RAM_GemaArg1).w,d0
(1)  235/    33C6 : 3200                		move.w	d0,d1
(1)  236/    33C8 : D241                		add.w	d1,d1
(1)  237/    33CA : 41FA 00B6           		lea	.extnal_beats(pc),a0
(1)  238/    33CE : 3030 1000           		move.w	(a0,d1.w),d0
(1)  239/    33D2 : 6000 CF70           		bra	gemaSetBeats
(1)  240/    33D6 :                     ; 		bra.s	.show_me
(1)  241/    33D6 :                     .option1_args:
(1)  242/    33D6 : 3E2E 0002           		move.w	on_hold(a6),d7
(1)  243/    33DA : 3C07                		move.w	d7,d6
(1)  244/    33DC : 0246 0070           		andi.w	#JoyA+JoyB+JoyC,d6
(1)  245/    33E0 : 67C6                		beq.s	.no_press
(1)  246/    33E2 : 0807 0004           		btst	#bitJoyB,d7
(1)  247/    33E6 : 6704                		beq.s	.d2_opt
(1)  248/    33E8 : DAFC 0002           		adda	#2,a5
(1)  249/    33EC :                     .d2_opt:
(1)  250/    33EC : 0807 0005           		btst	#bitJoyC,d7
(1)  251/    33F0 : 6704                		beq.s	.d3_opt
(1)  252/    33F2 : DAFC 0004           		adda	#4,a5
(1)  253/    33F6 :                     .d3_opt:
(1)  254/    33F6 : 3E2E 0004           		move.w	on_press(a6),d7
(1)  255/    33FA : 0807 0003           		btst	#bitJoyRight,d7
(1)  256/    33FE : 6706                		beq.s	.op1_right
(1)  257/    3400 : 5255                		addq.w	#1,(a5)
(1)  258/    3402 : 6000 FF66           		bra	.show_me
(1)  259/    3406 :                     .op1_right:
(1)  260/    3406 : 0807 0002           		btst	#bitJoyLeft,d7
(1)  261/    340A : 6706                		beq.s	.op1_left
(1)  262/    340C : 5355                		subq.w	#1,(a5)
(1)  263/    340E : 6000 FF5A           		bra	.show_me
(1)  264/    3412 :                     .op1_left:
(1)  265/    3412 : 3E2E 0002           		move.w	on_hold(a6),d7
(1)  266/    3416 : 0807 0000           		btst	#bitJoyUp,d7
(1)  267/    341A : 6706                		beq.s	.op1_down
(1)  268/    341C : 5255                		addq.w	#1,(a5)
(1)  269/    341E : 6000 FF4A           		bra	.show_me
(1)  270/    3422 :                     .op1_down:
(1)  271/    3422 : 0807 0001           		btst	#bitJoyDown,d7
(1)  272/    3426 : 6706                		beq.s	.op1_up
(1)  273/    3428 : 5355                		subq.w	#1,(a5)
(1)  274/    342A : 6000 FF3E           		bra	.show_me
(1)  275/    342E :                     .op1_up:
(1)  276/    342E :                     
(1)  277/    342E : 4E75                		rts
(1)  278/    3430 :                     
(1)  279/    3430 :                     ; ------------------------------------------------------
(1)  280/    3430 :                     ; OPTION 2
(1)  281/    3430 :                     ; ------------------------------------------------------
(1)  282/    3430 :                     
(1)  283/    3430 :                     .option_2:
(1)  284/    3430 : 4BF8 D206           		lea	(RAM_GemaArg0).w,a5
(1)  285/    3434 : 3E2E 0004           		move.w	on_press(a6),d7
(1)  286/    3438 : 0807 0007           		btst	#bitJoyStart,d7
(1)  287/    343C : 6798                		beq.s	.option1_args
(1)  288/    343E : 301D                		move.w	(a5)+,d0
(1)  289/    3440 : 321D                		move.w	(a5)+,d1
(1)  290/    3442 : 6000 CEBC           		bra	gemaStopTrack
(1)  291/    3446 : 6000 FF22           		bra	.show_me
(1)  292/    344A :                     
(1)  293/    344A :                     ; ------------------------------------------------------
(1)  294/    344A :                     ; OPTION 3
(1)  295/    344A :                     ; ------------------------------------------------------
(1)  296/    344A :                     
(1)  297/    344A :                     .option_3:
(1)  298/    344A : 4BF8 D20C           		lea	(RAM_GemaArg3).w,a5
(1)  299/    344E : 3E2E 0004           		move.w	on_press(a6),d7
(1)  300/    3452 : 0807 0007           		btst	#bitJoyStart,d7
(1)  301/    3456 : 6700 FF7E           		beq	.option1_args
(1)  302/    345A : 301D                		move.w	(a5)+,d0
(1)  303/    345C : 321D                		move.w	(a5)+,d1
(1)  304/    345E : 6000 CEB4           		bra	gemaFadeTrack
(1)  305/    3462 : 6000 FF06           		bra	.show_me
(1)  306/    3466 :                     
(1)  307/    3466 :                     ; ------------------------------------------------------
(1)  308/    3466 :                     ; OPTION 4
(1)  309/    3466 :                     ; ------------------------------------------------------
(1)  310/    3466 :                     
(1)  311/    3466 :                     .option_4:
(1)  312/    3466 : 4BF8 D20C           		lea	(RAM_GemaArg3).w,a5
(1)  313/    346A : 3E2E 0004           		move.w	on_press(a6),d7
(1)  314/    346E : 0807 0007           		btst	#bitJoyStart,d7
(1)  315/    3472 : 6700 FF62           		beq	.option1_args
(1)  316/    3476 : 301D                		move.w	(a5)+,d0
(1)  317/    3478 : 321D                		move.w	(a5)+,d1
(1)  318/    347A : 6000 CEAE           		bra	gemaSetTrackVol
(1)  319/    347E : 6000 FEEA           		bra	.show_me
(1)  320/    3482 :                     
(1)  321/    3482 :                     ; ------------------------------------------------------
(1)  322/    3482 :                     ; EXTERNAL BEATS FOR EACH TRACK
(1)  323/    3482 :                     ; ------------------------------------------------------
(1)  324/    3482 :                     
(1)  325/    3482 :                     .extnal_beats:
(1)  326/    3482 : 00E8                	dc.w 200+32
(1)  327/    3484 : 00DC                	dc.w 200+20
(1)  328/    3486 : 00E8                	dc.w 200+32
(1)  329/    3488 : 00E8                	dc.w 200+32
(1)  330/    348A : 00E8                	dc.w 200+32
(1)  331/    348C : 00CC                	dc.w 200+4
(1)  332/    348E : 00E8                	dc.w 200+32
(1)  333/    3490 : 00E8                	dc.w 200+32
(1)  334/    3492 : 00E8                	dc.w 200+32
(1)  335/    3494 : 00E8                	dc.w 200+32
(1)  336/    3496 : 00E8                	dc.w 200+32
(1)  337/    3498 : 00E8                	dc.w 200+32
(1)  338/    349A : 00E8                	dc.w 200+32
(1)  339/    349C : 00E8                	dc.w 200+32
(1)  340/    349E : 00E8                	dc.w 200+32
(1)  341/    34A0 : 00E8                	dc.w 200+32
(1)  342/    34A2 : 00E8                	dc.w 200+32
(1)  343/    34A4 : 00E8                	dc.w 200+32
(1)  344/    34A6 : 00E8                	dc.w 200+32
(1)  345/    34A8 : 00E8                	dc.w 200+32
(1)  346/    34AA : 00E8                	dc.w 200+32
(1)  347/    34AC : 00E8                	dc.w 200+32
(1)  348/    34AE :                     
(1)  349/    34AE :                     ; ====================================================================
(1)  350/    34AE :                     ; ------------------------------------------------------
(1)  351/    34AE :                     ; DATA assets locations for 68K and SH2
(1)  352/    34AE :                     ; ------------------------------------------------------
(1)  353/    34AE :                     
(1)  354/    34AE :                     file_mddata_def:
(1)  355/    34AE : 4441 5441 424E      		dc.b "DATABNKD.BIN",0		; CD Filename
             34B4 : 4B44 2E42 494E 00 
(1)  356/    34BB :                     		align 2
(1)  357/    34BC :                     
(1)  358/    34BC :                     pointr_marsdata_def:
(1)  359/    34BC : 0002 0ECE           		dc.l MARSDATA_DEFAULT		; 32X Cartridge point
(1)  360/    34C0 : 4D41 5253 445F      		dc.b "MARSD_00.BIN",0		; CD Filename
             34C6 : 3030 2E42 494E 00 
(1)  361/    34CD :                     		align 2
(1)  362/    34CE :                     
(1)  363/    34CE :                     ; ====================================================================
(1)  364/    34CE :                     ; ------------------------------------------------------
(1)  365/    34CE :                     ; Objects
(1)  366/    34CE :                     ; ------------------------------------------------------
(1)  367/    34CE :                     
(1)  368/    34CE :                     ; ; --------------------------------------------------
(1)  369/    34CE :                     ; ; Mikami
(1)  370/    34CE :                     ; ; --------------------------------------------------
(1)  371/    34CE :                     ;
(1)  372/    34CE :                     ; Object_Mikami:
(1)  373/    34CE :                     ; 		moveq	#0,d0
(1)  374/    34CE :                     ; 		move.b	obj_index(a6),d0
(1)  375/    34CE :                     ; 		add.w	d0,d0
(1)  376/    34CE :                     ; 		move.w	.list(pc,d0.w),d1
(1)  377/    34CE :                     ; 		jmp	.list(pc,d1.w)
(1)  378/    34CE :                     ; ; ----------------------------------------------
(1)  379/    34CE :                     ; .list:		dc.w .init-.list
(1)  380/    34CE :                     ; 		dc.w .main-.list
(1)  381/    34CE :                     ; ; ----------------------------------------------
(1)  382/    34CE :                     ; .init:
(1)  383/    34CE :                     ; 		move.b	#1,obj_index(a6)
(1)  384/    34CE :                     ; 		move.l	#objMap_Mikami,obj_map(a6)
(1)  385/    34CE :                     ; 		move.l	#objDma_Mikami,obj_dma(a6)
(1)  386/    34CE :                     ; 		move.w	#setVram_Mikami|$2000,obj_vram(a6)
(1)  387/    34CE :                     ; 		bclr	#bitobj_Mars,obj_set(a6)	; Genesis object
(1)  388/    34CE :                     ; 		move.w	#(320/2)+48,obj_x(a6)
(1)  389/    34CE :                     ; 		move.w	#(224/2)+64,obj_y(a6)
(1)  390/    34CE :                     ; 		clr.w	obj_frame(a6)
(1)  391/    34CE :                     ; 		bsr	object_AnimReset
(1)  392/    34CE :                     ; 		bset	#0,obj_status(a6)
(1)  393/    34CE :                     ; 		bset	#bitobj_flipH,obj_set(a6)
(1)  394/    34CE :                     ;
(1)  395/    34CE :                     ; ; ----------------------------------------------
(1)  396/    34CE :                     ; .main:
(1)  397/    34CE :                     ; 		lea	(Controller_2),a3
(1)  398/    34CE :                     ; 		btst	#0,obj_status(a6)
(1)  399/    34CE :                     ; 		beq.s	.no_fallspd
(1)  400/    34CE :                     ; 		add.w	#$40,obj_y_spd(a6)
(1)  401/    34CE :                     ; .no_fallspd:
(1)  402/    34CE :                     ;
(1)  403/    34CE :                     ; ; .fake_col_c:
(1)  404/    34CE :                     ; 		move.w	on_press(a3),d7
(1)  405/    34CE :                     ; 		btst	#bitJoyC,d7
(1)  406/    34CE :                     ; 		beq.s	.fake_jump
(1)  407/    34CE :                     ; 		btst	#0,obj_status(a6)
(1)  408/    34CE :                     ; 		bne.s	.fake_jump
(1)  409/    34CE :                     ; 		move.w	#-$500,obj_y_spd(a6)
(1)  410/    34CE :                     ; 		move.b	#2,obj_anim_id(a6)
(1)  411/    34CE :                     ; 		bset	#0,obj_status(a6)
(1)  412/    34CE :                     ;
(1)  413/    34CE :                     ; 		moveq	#$0F,d0
(1)  414/    34CE :                     ; 		moveq	#1,d1
(1)  415/    34CE :                     ; 		bsr	gemaPlayFromBlk
(1)  416/    34CE :                     ;
(1)  417/    34CE :                     ; .fake_jump:
(1)  418/    34CE :                     ; 		move.w	on_press(a3),d7
(1)  419/    34CE :                     ; 		btst	#bitJoyB,d7
(1)  420/    34CE :                     ; 		beq.s	.no_slash
(1)  421/    34CE :                     ; 		tst.w	obj_y_spd(a6)
(1)  422/    34CE :                     ; 		bne.s	.no_slash
(1)  423/    34CE :                     ; 		clr.w	obj_anim_indx(a6)
(1)  424/    34CE :                     ; 		move.b	#4,obj_anim_id(a6)
(1)  425/    34CE :                     ; 		move.w	#$10,obj_ram+2(a6)
(1)  426/    34CE :                     ;
(1)  427/    34CE :                     ; 		moveq	#$0F,d0
(1)  428/    34CE :                     ; 		moveq	#0,d1
(1)  429/    34CE :                     ; 		bsr	gemaPlayFromBlk
(1)  430/    34CE :                     ;
(1)  431/    34CE :                     ; .no_slash:
(1)  432/    34CE :                     ; 		clr.w	obj_x_spd(a6)
(1)  433/    34CE :                     ;
(1)  434/    34CE :                     ; 		moveq	#0,d0
(1)  435/    34CE :                     ; 		moveq	#0,d1
(1)  436/    34CE :                     ; 		move.w	on_hold(a3),d7
(1)  437/    34CE :                     ; 		move.w	d7,d6
(1)  438/    34CE :                     ; 		andi.w	#JoyLeft+JoyRight,d6
(1)  439/    34CE :                     ; 		beq.s	.move_mika
(1)  440/    34CE :                     ; 		clr.w	obj_ram+2(a6)
(1)  441/    34CE :                     ; 		move.w	#$180,d6
(1)  442/    34CE :                     ; 		btst	#bitJoyRight,d7
(1)  443/    34CE :                     ; 		beq.s	.no_l
(1)  444/    34CE :                     ; 		move.w	d6,obj_x_spd(a6)
(1)  445/    34CE :                     ; .no_l
(1)  446/    34CE :                     ; 		neg.w	d6
(1)  447/    34CE :                     ; 		btst	#bitJoyLeft,d7
(1)  448/    34CE :                     ; 		beq.s	.move_mika
(1)  449/    34CE :                     ; 		move.w	d6,obj_x_spd(a6)
(1)  450/    34CE :                     ; .move_mika:
(1)  451/    34CE :                     ;
(1)  452/    34CE :                     ;
(1)  453/    34CE :                     ; 		moveq	#0,d6
(1)  454/    34CE :                     ; 		tst.w	obj_x_spd(a6)
(1)  455/    34CE :                     ; 		beq.s	.r_spd
(1)  456/    34CE :                     ; 		moveq	#1,d6
(1)  457/    34CE :                     ; 		move.b	obj_set(a6),d7
(1)  458/    34CE :                     ; 		bclr	#bitobj_flipH,d7
(1)  459/    34CE :                     ; 		tst.w	obj_x_spd(a6)
(1)  460/    34CE :                     ; 		bpl.s	.r_flip
(1)  461/    34CE :                     ; 		bset	#bitobj_flipH,d7
(1)  462/    34CE :                     ; .r_flip:
(1)  463/    34CE :                     ; 		move.b	d7,obj_set(a6)
(1)  464/    34CE :                     ; .r_spd:
(1)  465/    34CE :                     ;
(1)  466/    34CE :                     ; 		tst.w	obj_ram+2(a6)
(1)  467/    34CE :                     ; 		beq.s	.free_anim
(1)  468/    34CE :                     ; 		subi.w	#1,obj_ram+2(a6)
(1)  469/    34CE :                     ; 		bne.s	.no_anim
(1)  470/    34CE :                     ; .free_anim:
(1)  471/    34CE :                     ; 		btst	#0,obj_status(a6)
(1)  472/    34CE :                     ; 		bne.s	.no_anim
(1)  473/    34CE :                     ; 		tst.w	obj_y_spd(a6)
(1)  474/    34CE :                     ; 		bmi.s	.is_jumpin
(1)  475/    34CE :                     ; 		move.b	d6,obj_anim_id(a6)
(1)  476/    34CE :                     ; .is_jumpin:
(1)  477/    34CE :                     ; 		tst.w	obj_y_spd(a6)
(1)  478/    34CE :                     ; 		beq.s	.no_anim
(1)  479/    34CE :                     ; 		move.b	#3,obj_anim_id(a6)
(1)  480/    34CE :                     ; .no_anim:
(1)  481/    34CE :                     ; 		bsr	object_Speed
(1)  482/    34CE :                     ;
(1)  483/    34CE :                     ; 		move.w	#(224-16)-32,d7
(1)  484/    34CE :                     ; 		move.w	obj_y(a6),d0
(1)  485/    34CE :                     ; 		cmp.w	d7,d0
(1)  486/    34CE :                     ; 		blt.s	.fake_col
(1)  487/    34CE :                     ; 		clr.w	obj_y_spd(a6)
(1)  488/    34CE :                     ; 		andi.w	#-$10,obj_y(a6)
(1)  489/    34CE :                     ; 		bclr	#0,obj_status(a6)
(1)  490/    34CE :                     ; .fake_col:
(1)  491/    34CE :                     ;
(1)  492/    34CE :                     ; ; 		move.w	(Controller_2+on_press),d7
(1)  493/    34CE :                     ; ; 		btst	#bitClickM,d7
(1)  494/    34CE :                     ; ; 		beq.s	.no_reset
(1)  495/    34CE :                     ; ; 		move.w	#320/2,obj_x(a6)
(1)  496/    34CE :                     ; ; 		move.w	#224/2,obj_y(a6)
(1)  497/    34CE :                     ; ; .no_reset:
(1)  498/    34CE :                     ; 		lea	.anim_data(pc),a0
(1)  499/    34CE :                     ; 		bsr	object_Animate
(1)  500/    34CE :                     ; 		bra	object_Display
(1)  501/    34CE :                     ;
(1)  502/    34CE :                     ; ; ----------------------------------------------
(1)  503/    34CE :                     ;
(1)  504/    34CE :                     ; .anim_data:
(1)  505/    34CE :                     ; 		dc.w .anim_stand-.anim_data
(1)  506/    34CE :                     ; 		dc.w .anim_move-.anim_data
(1)  507/    34CE :                     ; 		dc.w .anim_jump-.anim_data
(1)  508/    34CE :                     ; 		dc.w .anim_fall-.anim_data
(1)  509/    34CE :                     ; 		dc.w .anim_slash-.anim_data
(1)  510/    34CE :                     ; .anim_stand:
(1)  511/    34CE :                     ; 		dc.w 6
(1)  512/    34CE :                     ; 		dc.w 0,-1
(1)  513/    34CE :                     ; 		align 2
(1)  514/    34CE :                     ; .anim_move:
(1)  515/    34CE :                     ; 		dc.w 5
(1)  516/    34CE :                     ; 		dc.w 2,3,4,5,6,7,8,-3,1
(1)  517/    34CE :                     ; 		align 2
(1)  518/    34CE :                     ; .anim_jump:
(1)  519/    34CE :                     ; 		dc.w 5
(1)  520/    34CE :                     ; 		dc.w 10,11,12,-3,2
(1)  521/    34CE :                     ; 		align 2
(1)  522/    34CE :                     ; .anim_fall:
(1)  523/    34CE :                     ; 		dc.w 5
(1)  524/    34CE :                     ; 		dc.w 11,12,-3,1
(1)  525/    34CE :                     ; 		align 2
(1)  526/    34CE :                     ; .anim_slash:
(1)  527/    34CE :                     ; 		dc.w 1
(1)  528/    34CE :                     ; 		dc.w 14,15,16,17,-2
(1)  529/    34CE :                     ; 		align 2
(1)  530/    34CE :                     ;
(1)  531/    34CE :                     ; --------------------------------------------------
(1)  532/    34CE :                     ; Sisi
(1)  533/    34CE :                     ; --------------------------------------------------
(1)  534/    34CE :                     
(1)  535/    34CE :                     Object_Sisi:
(1)  536/    34CE : 7000                		moveq	#0,d0
(1)  537/    34D0 : 102E 0021           		move.b	obj_index(a6),d0
(1)  538/    34D4 : D040                		add.w	d0,d0
(1)  539/    34D6 : 323B 0006           		move.w	.list(pc,d0.w),d1
(1)  540/    34DA : 4EFB 1002           		jmp	.list(pc,d1.w)
(1)  541/    34DE :                     ; ----------------------------------------------
(1)  542/    34DE : 0004                .list:		dc.w .init-.list
(1)  543/    34E0 : 002E                		dc.w .main-.list
(1)  544/    34E2 :                     ; ----------------------------------------------
(1)  545/    34E2 :                     .init:
(1)  546/    34E2 : 1D7C 0001 0021      		move.b	#1,obj_index(a6)
(1)  547/    34E8 : 2D7C 0000 4358      		move.l	#objMap_Sisi,obj_map(a6)
             34EE : 000C             
(1)  548/    34F0 : 2D7C 0000 0000      		move.l	#0,obj_dma(a6)
             34F6 : 0010             
(1)  549/    34F8 : 3D7C 2480 0014      		move.w	#setVram_Sisi|$2000,obj_vram(a6)
(1)  550/    34FE : 08AE 0007 0022      		bclr	#bitobj_Mars,obj_set(a6)	; Genesis object
(1)  551/    3504 :                     ; 		move.w	#320/2,obj_x(a6)
(1)  552/    3504 :                     ; 		move.w	#224/2,obj_y(a6)
(1)  553/    3504 : 426E 001E           		clr.w	obj_frame(a6)
(1)  554/    3508 : 6100 D9B4           		bsr	object_AnimReset
(1)  555/    350C :                     
(1)  556/    350C :                     ; ----------------------------------------------
(1)  557/    350C :                     .main:
(1)  558/    350C :                     ; 		move.w	obj_ram(a6),d0
(1)  559/    350C :                     ; 		move.w	obj_ram+2(a6),d1
(1)  560/    350C :                     
(1)  561/    350C :                     
(1)  562/    350C : 7000                		moveq	#0,d0
(1)  563/    350E :                     
(1)  564/    350E : 3238 D204           		move.w	(RAM_CurrPick).w,d1
(1)  565/    3512 : E749                		lsl.w	#3,d1
(1)  566/    3514 :                     
(1)  567/    3514 : 0640 0018           		addi.w	#$18,d0
(1)  568/    3518 : 0641 0020           		addi.w	#$20,d1
(1)  569/    351C : 3D40 0004           		move.w	d0,obj_x(a6)
(1)  570/    3520 : 3D41 0008           		move.w	d1,obj_y(a6)
(1)  571/    3524 :                     
(1)  572/    3524 :                     ; 		lea	(RAM_Objects),a0
(1)  573/    3524 :                     ; 		cmp.l	#Object_Mikami,obj_code(a0)
(1)  574/    3524 :                     ; 		bne.s	.dont_link
(1)  575/    3524 :                     ; 		move.w	obj_ram+2(a6),d7
(1)  576/    3524 :                     ; 		cmp.w	#24<<1,d7
(1)  577/    3524 :                     ; 		bge.s	.dont_incr
(1)  578/    3524 :                     ; 		add.w	#2,d7
(1)  579/    3524 :                     ; .dont_incr:
(1)  580/    3524 :                     ; 		move.w	d7,obj_ram+2(a6)
(1)  581/    3524 :                     ;
(1)  582/    3524 :                     ; 		move.w	obj_x(a0),d7
(1)  583/    3524 :                     ; 		move.w	obj_y(a0),d6
(1)  584/    3524 :                     ; 		move.w	#24,d5
(1)  585/    3524 :                     ; 		sub.w	d5,d6
(1)  586/    3524 :                     ; 		move.w	obj_ram(a6),d0
(1)  587/    3524 :                     ; 		moveq	#4,d1
(1)  588/    3524 :                     ; 		bsr	System_SineWave
(1)  589/    3524 :                     ; 		asr.w	#8,d2
(1)  590/    3524 :                     ; 		add.w	d2,d6
(1)  591/    3524 :                     ; 		moveq	#5,d1
(1)  592/    3524 :                     ; 		bsr	System_SineWave_Cos
(1)  593/    3524 :                     ; 		asr.w	#8,d2
(1)  594/    3524 :                     ; 		add.w	d2,d7
(1)  595/    3524 :                     ;
(1)  596/    3524 :                     ; 		move.b	obj_set(a6),d0
(1)  597/    3524 :                     ; 		move.b	obj_set(a0),d1
(1)  598/    3524 :                     ; 		eor.w	d1,d0
(1)  599/    3524 :                     ; 		andi.w	#1,d0
(1)  600/    3524 :                     ; 		beq.s	.same_h
(1)  601/    3524 :                     ; 		clr.w	obj_ram+2(a6)
(1)  602/    3524 :                     ; .same_h:
(1)  603/    3524 :                     ; 		move.w	obj_ram+2(a6),d4
(1)  604/    3524 :                     ; 		bclr	#bitobj_flipH,obj_set(a6)
(1)  605/    3524 :                     ; 		btst	#bitobj_flipH,obj_set(a0)
(1)  606/    3524 :                     ; 		beq.s	.dont_flipx
(1)  607/    3524 :                     ; 		neg.w	d4
(1)  608/    3524 :                     ; 		bset	#bitobj_flipH,obj_set(a6)
(1)  609/    3524 :                     ; .dont_flipx:
(1)  610/    3524 :                     ; 		lsr.w	#1,d4
(1)  611/    3524 :                     ; 		add.w	d4,d7
(1)  612/    3524 :                     ; 		move.w	d6,obj_y(a6)
(1)  613/    3524 :                     ; 		move.w	d7,obj_x(a6)
(1)  614/    3524 :                     ; 		add.w	#4,obj_ram(a6)
(1)  615/    3524 :                     
(1)  616/    3524 :                     .dont_link:
(1)  617/    3524 : 41FA 000A           		lea	.anim_data(pc),a0
(1)  618/    3528 : 6100 D908           		bsr	object_Animate
(1)  619/    352C : 6000 D868           		bra	object_Display
(1)  620/    3530 :                     
(1)  621/    3530 :                     ; ----------------------------------------------
(1)  622/    3530 :                     
(1)  623/    3530 :                     .anim_data:
(1)  624/    3530 : 0008                		dc.w .anim_00-.anim_data
(1)  625/    3532 : 0008                		dc.w .anim_00-.anim_data
(1)  626/    3534 : 0008                		dc.w .anim_00-.anim_data
(1)  627/    3536 : 0008                		dc.w .anim_00-.anim_data
(1)  628/    3538 :                     .anim_00:
(1)  629/    3538 : 0008                		dc.w 8
(1)  630/    353A : 0000 0001 0002      		dc.w 0,1,2,1,-1
             3540 : 0001 FFFF          
(1)  631/    3544 :                     		align 2
(1)  632/    3544 :                     ;
(1)  633/    3544 :                     ; ; --------------------------------------------------
(1)  634/    3544 :                     ; ; Ball
(1)  635/    3544 :                     ; ; --------------------------------------------------
(1)  636/    3544 :                     ;
(1)  637/    3544 :                     ; Object_ball:
(1)  638/    3544 :                     ; 		moveq	#0,d0
(1)  639/    3544 :                     ; 		move.b	obj_index(a6),d0
(1)  640/    3544 :                     ; 		add.w	d0,d0
(1)  641/    3544 :                     ; 		move.w	.list(pc,d0.w),d1
(1)  642/    3544 :                     ; 		jmp	.list(pc,d1.w)
(1)  643/    3544 :                     ; ; ----------------------------------------------
(1)  644/    3544 :                     ; .list:		dc.w .init-.list
(1)  645/    3544 :                     ; 		dc.w .main-.list
(1)  646/    3544 :                     ; ; ----------------------------------------------
(1)  647/    3544 :                     ; .init:
(1)  648/    3544 :                     ; 		move.b	#1,obj_index(a6)
(1)  649/    3544 :                     ; 		move.l	#objMap_Sisi,obj_map(a6)
(1)  650/    3544 :                     ; 		move.l	#0,obj_dma(a6)
(1)  651/    3544 :                     ; 		move.w	#setVram_Sisi|$0000,obj_vram(a6)
(1)  652/    3544 :                     ; 		bclr	#bitobj_Mars,obj_set(a6)	; Genesis object
(1)  653/    3544 :                     ; 		move.w	#320/2,obj_x(a6)
(1)  654/    3544 :                     ; 		move.w	#224/2,obj_y(a6)
(1)  655/    3544 :                     ; 		clr.w	obj_frame(a6)
(1)  656/    3544 :                     ; 		bsr	object_AnimReset
(1)  657/    3544 :                     ;
(1)  658/    3544 :                     ; 		move.w	#$180,obj_x_spd(a6)
(1)  659/    3544 :                     ; 		move.w	#$180,obj_y_spd(a6)
(1)  660/    3544 :                     ;
(1)  661/    3544 :                     ; ; ----------------------------------------------
(1)  662/    3544 :                     ; .main:
(1)  663/    3544 :                     ; 		move.w	obj_x(a6),d0
(1)  664/    3544 :                     ; 		move.w	obj_y(a6),d1
(1)  665/    3544 :                     ; 		sub.w	#16,d0
(1)  666/    3544 :                     ; 		sub.w	#16,d1
(1)  667/    3544 :                     ; 		move.w	#320-32,d2
(1)  668/    3544 :                     ; 		move.w	#(224-16)-32,d3
(1)  669/    3544 :                     ;
(1)  670/    3544 :                     ; 		tst.w	d1
(1)  671/    3544 :                     ; 		bpl.s	.on_scrn_yu
(1)  672/    3544 :                     ; 		neg.w	obj_y_spd(a6)
(1)  673/    3544 :                     ; 		bsr	.playit
(1)  674/    3544 :                     ; .on_scrn_yu:
(1)  675/    3544 :                     ; 		cmp.w	d3,d1
(1)  676/    3544 :                     ; 		blt.s	.on_scrn_yd
(1)  677/    3544 :                     ; 		neg.w	obj_y_spd(a6)
(1)  678/    3544 :                     ; 		bsr	.playit
(1)  679/    3544 :                     ; .on_scrn_yd:
(1)  680/    3544 :                     ;
(1)  681/    3544 :                     ; 		tst.w	d0
(1)  682/    3544 :                     ; 		bpl.s	.on_scrn_xu
(1)  683/    3544 :                     ; 		neg.w	obj_x_spd(a6)
(1)  684/    3544 :                     ; 		bsr.s	.playit
(1)  685/    3544 :                     ; .on_scrn_xu:
(1)  686/    3544 :                     ; 		cmp.w	d2,d0
(1)  687/    3544 :                     ; 		blt.s	.on_scrn_xd
(1)  688/    3544 :                     ; 		neg.w	obj_x_spd(a6)
(1)  689/    3544 :                     ; 		bsr.s	.playit
(1)  690/    3544 :                     ; .on_scrn_xd:
(1)  691/    3544 :                     ;
(1)  692/    3544 :                     ; 		bsr	object_Speed
(1)  693/    3544 :                     ;
(1)  694/    3544 :                     ; 		lea	.anim_data(pc),a0
(1)  695/    3544 :                     ; 		bsr	object_Animate
(1)  696/    3544 :                     ; 		bra	object_Display
(1)  697/    3544 :                     ; .playit:
(1)  698/    3544 :                     ; 		moveq	#$0F,d0
(1)  699/    3544 :                     ; 		moveq	#2,d1
(1)  700/    3544 :                     ; 		bra	gemaPlayFromBlk
(1)  701/    3544 :                     ;
(1)  702/    3544 :                     ; ; ----------------------------------------------
(1)  703/    3544 :                     ;
(1)  704/    3544 :                     ; .anim_data:
(1)  705/    3544 :                     ; 		dc.w .anim_00-.anim_data
(1)  706/    3544 :                     ; 		dc.w .anim_00-.anim_data
(1)  707/    3544 :                     ; 		dc.w .anim_00-.anim_data
(1)  708/    3544 :                     ; 		dc.w .anim_00-.anim_data
(1)  709/    3544 :                     ; .anim_00:
(1)  710/    3544 :                     ; 		dc.w 8
(1)  711/    3544 :                     ; 		dc.w 0,1,2,1,-1
(1)  712/    3544 :                     ; 		align 2
(1)  713/    3544 :                     
(1)  714/    3544 :                     ; ====================================================================
(1)  715/    3544 :                     ; ------------------------------------------------------
(1)  716/    3544 :                     ; Subroutines
(1)  717/    3544 :                     ; ------------------------------------------------------
(1)  718/    3544 :                     
(1)  719/    3544 :                     ; ====================================================================
(1)  720/    3544 :                     ; ------------------------------------------------------
(1)  721/    3544 :                     ; Custom VBlank
(1)  722/    3544 :                     ; ------------------------------------------------------
(1)  723/    3544 :                     
(1)  724/    3544 :                     ; ------------------------------------------------------
(1)  725/    3544 :                     ; Custom HBlank
(1)  726/    3544 :                     ; ------------------------------------------------------
(1)  727/    3544 :                     
(1)  728/    3544 :                     ; ====================================================================
(1)  729/    3544 :                     ; ------------------------------------------------------
(1)  730/    3544 :                     ; Small DATA section
(1)  731/    3544 :                     ; ------------------------------------------------------
(1)  732/    3544 :                     
(1)  733/    3544 :                     PAL_TEST:
(1)  734/    3544 :                     		binclude "game/screen_0/data/maps/md/test/md_pal.bin"
(1)  735/    3560 :                     		align 2
(1)  736/    3560 :                     
(1)  737/    3560 :                     ; str_ShowPsg:	dc.b "\\w \\w \\w \\w",0
(1)  738/    3560 :                     ; 		dc.l RAM_ChnlLinks,RAM_ChnlLinks+2,RAM_ChnlLinks+4,RAM_ChnlLinks+6
(1)  739/    3560 :                     ; 		align 2
(1)  740/    3560 :                     ; str_ShowFm:	dc.b "\\w \\w \\w \\w \\w \\w",0
(1)  741/    3560 :                     ; 		dc.l RAM_ChnlLinks+8,RAM_ChnlLinks+10,RAM_ChnlLinks+12
(1)  742/    3560 :                     ; 		dc.l RAM_ChnlLinks+14,RAM_ChnlLinks+16,RAM_ChnlLinks+18
(1)  743/    3560 :                     ; 		align 2
(1)  744/    3560 :                     ; str_ShowPcm:	dc.b "\\w \\w \\w \\w",$0A
(1)  745/    3560 :                     ; 		dc.b "\\w \\w \\w \\w",0
(1)  746/    3560 :                     ; 		dc.l RAM_ChnlLinks+20,RAM_ChnlLinks+22,RAM_ChnlLinks+24,RAM_ChnlLinks+26
(1)  747/    3560 :                     ; 		dc.l RAM_ChnlLinks+28,RAM_ChnlLinks+30,RAM_ChnlLinks+32,RAM_ChnlLinks+34
(1)  748/    3560 :                     ; 		align 2
(1)  749/    3560 :                     ; str_ShowPwm:	dc.b "\\w \\w \\w \\w",$0A
(1)  750/    3560 :                     ; 		dc.b "\\w \\w \\w",0
(1)  751/    3560 :                     ; 		dc.l RAM_ChnlLinks+36,RAM_ChnlLinks+38,RAM_ChnlLinks+40,RAM_ChnlLinks+42
(1)  752/    3560 :                     ; 		dc.l RAM_ChnlLinks+44,RAM_ChnlLinks+46,RAM_ChnlLinks+48,RAM_ChnlLinks+50
(1)  753/    3560 :                     ; 		align 2
(1)  754/    3560 :                     
(1)  755/    3560 :                     str_TesterInit:
(1)  756/    3560 : 4745 4D41 2F4E      		dc.b "GEMA/Nikona tester",$0A
             3566 : 696B 6F6E 6120 
             356C : 7465 7374 6572 0A 
(1)  757/    3573 : 2020 2020 2020      		dc.b "                \{DATE} \{TIME}",$0A
             3579 : 2020 2020 2020 
             357F : 2020 2020 3032 
             3585 : 2F32 382F 3230 
             358B : 3234 2030 333A 
             3591 : 3537 3A35 3820 
             3597 : 414D 0A          
(1)  758/    359A : 0A                  		dc.b $0A
(1)  759/    359B : 2020 2020 6765      		dc.b "    gemaTest",$0A
             35A1 : 6D61 5465 7374 0A 
(1)  760/    35A8 : 2020 2020 6765      		dc.b "    gemaPlayTrack",$0A
             35AE : 6D61 506C 6179 
             35B4 : 5472 6163 6B0A    
(1)  761/    35BA : 2020 2020 6765      		dc.b "    gemaStopTrack",$0A
             35C0 : 6D61 5374 6F70 
             35C6 : 5472 6163 6B0A    
(1)  762/    35CC : 2020 2020 6765      		dc.b "    gemaFadeTrack",$0A
             35D2 : 6D61 4661 6465 
             35D8 : 5472 6163 6B0A    
(1)  763/    35DE : 2020 2020 6765      		dc.b "    gemaSetTrackVol",0
             35E4 : 6D61 5365 7454 
             35EA : 7261 636B 566F 
             35F0 : 6C00             
(1)  764/    35F2 : 00                  		dc.b 0
(1)  765/    35F3 :                     		align 2
(1)  766/    35F4 : 5C77 205C 7720      str_ShowMe:	dc.b "\\w \\w \\w",$A
             35FA : 5C77 0A          
(1)  767/    35FD : 0A                  		dc.b $A
(1)  768/    35FE : 5C77 205C 7720      		dc.b "\\w \\w \\w",0
             3604 : 5C77 00          
(1)  769/    3607 : FFFF D206 FFFF      		dc.l RAM_GemaArg0,RAM_GemaArg1,RAM_GemaArg2
             360D : D208 FFFF D20A    
(1)  770/    3613 : FFFF D20C FFFF      		dc.l RAM_GemaArg3,RAM_GemaArg4,RAM_GemaArg5
             3619 : D20E FFFF D210    
(1)  771/    361F :                     		align 2
(1)  772/    3620 :                     str_Info:
(1)  773/    3620 : 5C6C 00             		dc.b "\\l",0
(1)  774/    3623 : FFFF BDD4           		dc.l RAM_Framecount
(1)  775/    3627 :                     		align 2
(1)  776/    3628 :                     ; str_Notes:
(1)  777/    3628 :                     ;  dc.b "---",0,"C#0",0,"D-0",0,"D#0",0,"E-0",0,"F-0",0,"F#0",0,"G-0",0,"G#0",0,"A-0",0,"A#0",0,"B-0",0
(1)  778/    3628 :                     ;  dc.b "C-1",0,"C#1",0,"D-1",0,"D#1",0,"E-1",0,"F-1",0,"F#1",0,"G-1",0,"G#1",0,"A-1",0,"A#1",0,"B-1",0
(1)  779/    3628 :                     ;  dc.b "C-2",0,"C#2",0,"D-2",0,"D#2",0,"E-2",0,"F-2",0,"F#2",0,"G-2",0,"G#2",0,"A-2",0,"A#2",0,"B-2",0
(1)  780/    3628 :                     ;  dc.b "C-3",0,"C#3",0,"D-3",0,"D#3",0,"E-3",0,"F-3",0,"F#3",0,"G-3",0,"G#3",0,"A-3",0,"A#3",0,"B-3",0
(1)  781/    3628 :                     ;  dc.b "C-4",0,"C#4",0,"D-4",0,"D#4",0,"E-4",0,"F-4",0,"F#4",0,"G-4",0,"G#4",0,"A-4",0,"A#4",0,"B-4",0
(1)  782/    3628 :                     ;  dc.b "C-5",0,"C#5",0,"D-5",0,"D#5",0,"E-5",0,"F-5",0,"F#5",0,"G-5",0,"G#5",0,"A-5",0,"A#5",0,"B-5",0
(1)  783/    3628 :                     ;  dc.b "C-6",0,"C#6",0,"D-6",0,"D#6",0,"E-6",0,"F-6",0,"F#6",0,"G-6",0,"G#6",0,"A-6",0,"A#6",0,"B-6",0
(1)  784/    3628 :                     ;  dc.b "C-7",0,"C#7",0,"D-7",0,"D#7",0,"E-7",0,"F-7",0,"F#7",0,"G-7",0,"G#7",0,"A-7",0,"A#7",0,"B-7",0
(1)  785/    3628 :                     ;  dc.b "C-8",0,"C#8",0,"D-8",0,"D#8",0,"E-8",0,"F-8",0,"F#8",0,"G-8",0,"G#8",0,"A-8",0,"A#8",0,"B-8",0
(1)  786/    3628 :                     ;  dc.b "C-9",0,"C#9",0,"D-9",0,"D#9",0,"E-9",0,"F-9",0,"F#9",0,"G-9",0,"G#9",0,"A-9",0,"A#9",0,"B-9",0
(1)  787/    3628 :                     ;  align 2
(1)  788/    3628 :                     ; str_Notes_FM:
(1)  789/    3628 :                     ;  dc.b "---",0
(1)  790/    3628 :                     ;  dc.b "C-",0,0,"C#",0,0,"D-",0,0,"D#",0,0,"E-",0,0,"F-",0,0
(1)  791/    3628 :                     ;  dc.b "F#",0,0,"G-",0,0,"G#",0,0,"A-",0,0,"A#",0,0,"B-",0,0
(1)  792/    3628 :                     ;  align 2
(1)  793/    3628 :                     ; str_Octv_FM:
(1)  794/    3628 :                     ;  dc.b "0",0,"1",0,"2",0,"3",0,"4",0,"5",0,"6",0,"7",0
(1)  795/    3628 :                     ;  align 2
(1)  796/    3628 :                     
     362/    3628 :                     mcscrn_e:
     363/    3628 :                     ; 	screen_code Md_Screen01,Md_Screen01_e,"game/screen_1/code.asm"
     364/    3628 :                     
     365/    3628 :                     ; ====================================================================
     366/    3628 :                     ; DATA SECTION
     367/    3628 :                     ; ====================================================================
     368/    3628 :                     
     369/    3628 :                     ; ====================================================================
     370/    3628 :                     ; ----------------------------------------------------------------
     371/    3628 :                     ; 68K DATA BANKs
     372/    3628 :                     ;
     373/    3628 :                     ; SEGA CD / CD32X:
     374/    3628 :                     ; Stored in WORD-RAM pieces
     375/    3628 :                     ; limited to 256KB 2M or 128KB 1M/1M
     376/    3628 :                     ; ** WORD-RAM CANNOT BE USED IF USING ASIC STAMPS **
     377/    3628 :                     ;
     378/    3628 :                     ; SEGA 32X Cartridge:
     379/    3628 :                     ; Limited to 1MB bankswitchable.
     380/    3628 :                     ; ONLY 4 banks can be used, Bank 0 already uses the
     381/    3628 :                     ; first 512KB for the code.
     382/    3628 :                     ;
     383/    3628 :                     ; For multi-porting keep the data size limited to 256KB.
     384/    3628 :                     ; ----------------------------------------------------------------
     385/    3628 :                     
     386/    3628 :                     ; --------------------------------------------------------
     387/    3628 :                     ; DEFAULT BANK
     388/    3628 :                     ;
     389/    3628 :                     ; CD/CD32X:
     390/    3628 :                     ; $200000 256KB (WORD-RAM)
     391/    3628 :                     ;
     392/    3628 :                     ; 32X:
     393/    3628 :                     ; $900000 1MB (Bankswichable area)
     394/    3628 :                     ;
     395/    3628 :                     ; Usage:
     396/    3628 :                     ; data_bkset LABEL_START,OPTION
     397/    3628 :                     ; (your includes and bincludes)
     398/    3628 :                     ; data_bkend LABEL_START,LABEL_END,used_size
     399/    3628 :                     ;
     400/    3628 :                     ; OPTION (32X Cartridge ONLY):
     401/    3628 :                     ;  0, Normal 32X $900000 bank
     402/    3628 :                     ; -1, First 32X $900000 bank
     403/    3628 :                     ; * Ignored on other systems.
     404/    3628 :                     ; --------------------------------------------------------
     405/    3628 :                     
     406/    3628 : (MACRO)              	data_bkset MCD_DBANK0,-1
     406/    3628 :                     ; MCD_DBANK0:
     406/    3628 : =$3628               MCD_DBANK0 label *
     407/    3628 :                     mdbank0:
     408/    3628 :                     		include "game/screen_0/data_bank.asm"
(1)    1/    3628 :                     ; ====================================================================
(1)    2/    3628 :                     ; ----------------------------------------------------------------
(1)    3/    3628 :                     ; 68K SCREEN MODE DATA
(1)    4/    3628 :                     ; for big stuff like maps, level, etc.
(1)    5/    3628 :                     ;
(1)    6/    3628 :                     ; For Genesis graphics use data_dma.asm
(1)    7/    3628 :                     ; and for 32X graphics use data_mgfx.asm
(1)    8/    3628 :                     ;
(1)    9/    3628 :                     ; 32X 256-COLOR PALETTES GO HERE.
(1)   10/    3628 :                     ;
(1)   11/    3628 :                     ; Maximum size: $0FFFFF bytes per bank
(1)   12/    3628 :                     ; ----------------------------------------------------------------
(1)   13/    3628 :                     
(1)   14/    3628 :                     ; ----------------------------------------------------------------
(1)   15/    3628 :                     ; 32X Screen maps
(1)   16/    3628 :                     ; ----------------------------------------------------------------
(1)   17/    3628 :                     
(1)   18/    3628 :                     MAP_TEST:
(1)   19/    3628 :                     		binclude "game/screen_0/data/maps/md/test/md_map.bin"
(1)   20/    3EE8 :                     		align 2
(1)   21/    3EE8 :                     MapMars_TEST:
(1)   22/    3EE8 :                     		binclude "game/screen_0/data/maps/mars/test/data_map.bin"
(1)   23/    4118 :                     		align 2
(1)   24/    4118 :                     
(1)   25/    4118 :                     ; ----------------------------------------------------------------
(1)   26/    4118 :                     ; 32X Palettes
(1)   27/    4118 :                     ; ----------------------------------------------------------------
(1)   28/    4118 :                     
(1)   29/    4118 :                     PalMars_TEST:
(1)   30/    4118 :                     		binclude "game/screen_0/data/maps/mars/test/data_pal.bin"
(1)   31/    4318 :                     		align 2
(1)   32/    4318 :                     PalMars_Sabrina:
(1)   33/    4318 :                     		binclude "game/screen_0/data/objects/mars/sabrina/sabrina_pal.bin"
(1)   34/    4338 :                     		align 2
(1)   35/    4338 :                     
(1)   36/    4338 :                     ; ----------------------------------------------------------------
(1)   37/    4338 :                     ; Object palettes
(1)   38/    4338 :                     ; ----------------------------------------------------------------
(1)   39/    4338 :                     
(1)   40/    4338 :                     objPal_Sisi:
(1)   41/    4338 :                     		binclude "game/screen_0/data/objects/md/sisi/sisi_pal.bin"
(1)   42/    4358 :                     		align 2
(1)   43/    4358 :                     
(1)   44/    4358 :                     ; ----------------------------------------------------------------
(1)   45/    4358 :                     ; Object maps
(1)   46/    4358 :                     ; ----------------------------------------------------------------
(1)   47/    4358 :                     
(1)   48/    4358 :                     objMap_Sisi:
(1)   49/    4358 :                     		binclude "game/screen_0/data/objects/md/sisi/sisi_map.bin"
(1)   50/    43B4 :                     		align 2
(1)   51/    43B4 :                     
     412/    43B4 :                     		include "sound/tracks.asm"		; GEMA: Track data
(1)    1/    43B4 :                     ; ================================================================
(1)    2/    43B4 :                     ; ------------------------------------------------------------
(1)    3/    43B4 :                     ; SOUND DATA SECTION
(1)    4/    43B4 :                     ; ------------------------------------------------------------
(1)    5/    43B4 :                     
(1)    6/    43B4 :                     ; --------------------------------------------
(1)    7/    43B4 :                     ; Instrument macros
(1)    8/    43B4 :                     ; --------------------------------------------
(1)    9/    43B4 :                     
(1)   10/    43B4 :                     gInsNull macro
(1)   11/    43B4 :                     	dc.b $00,$00,$00,$00
(1)   12/    43B4 :                     	dc.b $00,$00,$00,$00
(1)   13/    43B4 :                     	endm
(1)   14/    43B4 :                     
(1)   15/    43B4 :                     ; alv: attack level
(1)   16/    43B4 :                     ; atk: attack rate
(1)   17/    43B4 :                     ; slv: sustain
(1)   18/    43B4 :                     ; dky: decay rate (up)
(1)   19/    43B4 :                     ; rrt: release rate (down)
(1)   20/    43B4 :                     ; vib: (TODO)
(1)   21/    43B4 :                     gInsPsg	macro pitch,alv,atk,slv,dky,rrt,vib
(1)   22/    43B4 :                     	dc.b $80,pitch,alv,atk
(1)   23/    43B4 :                     	dc.b slv,dky,rrt,vib
(1)   24/    43B4 :                     	endm
(1)   25/    43B4 :                     
(1)   26/    43B4 :                     ; same args as gInsPsg
(1)   27/    43B4 :                     ; only one more argument for the noise type:
(1)   28/    43B4 :                     ; mode: noise mode
(1)   29/    43B4 :                     ;       %tmm
(1)   30/    43B4 :                     ;        t  - Bass(0)|Noise(1)
(1)   31/    43B4 :                     ;         mm- Clock(0)|Clock/2(1)|Clock/4(2)|Tone3(3)
(1)   32/    43B4 :                     ;
(1)   33/    43B4 :                     gInsPsgN macro pitch,alv,atk,slv,dky,rrt,vib,mode
(1)   34/    43B4 :                     	dc.b $90|mode,pitch,alv,atk
(1)   35/    43B4 :                     	dc.b slv,dky,rrt,vib
(1)   36/    43B4 :                     	endm
(1)   37/    43B4 :                     
(1)   38/    43B4 :                     ; 24-bit ROM pointer to FM patch data
(1)   39/    43B4 :                     gInsFm macro pitch,fmins
(1)   40/    43B4 :                     	dc.b $A0,pitch,((fmins>>16)&$FF),((fmins>>8)&$FF)
(1)   41/    43B4 :                     	dc.b fmins&$FF,$00,$00,$00
(1)   42/    43B4 :                     	endm
(1)   43/    43B4 :                     
(1)   44/    43B4 :                     ; Same args as gInsFm, but the last 4 words of the data
(1)   45/    43B4 :                     ; are the custom freqs for each operator in this order:
(1)   46/    43B4 :                     ; OP1 OP2 OP3 OP4
(1)   47/    43B4 :                     ;
(1)   48/    43B4 :                     ; Pitch is useless here, set to 0
(1)   49/    43B4 :                     gInsFm3	macro pitch,fmins
(1)   50/    43B4 :                     	dc.b $B0,pitch,((fmins>>16)&$FF),((fmins>>8)&$FF)
(1)   51/    43B4 :                     	dc.b fmins&$FF,$00,$00,$00
(1)   52/    43B4 :                     	endm
(1)   53/    43B4 :                     
(1)   54/    43B4 :                     ; flags: %000L
(1)   55/    43B4 :                     ;        L - Loop sample No/Yes
(1)   56/    43B4 :                     gInsDac	macro pitch,start,flags
(1)   57/    43B4 :                     	dc.b $C0|flags,pitch,((start>>16)&$FF),((start>>8)&$FF)
(1)   58/    43B4 :                     	dc.b start&$FF,0,0,0
(1)   59/    43B4 :                     	endm
(1)   60/    43B4 :                     
(1)   61/    43B4 :                     ; flags: %000L
(1)   62/    43B4 :                     ;        L - Loop sample No/Yes
(1)   63/    43B4 :                     gInsPcm	macro pitch,start,flags
(1)   64/    43B4 :                      if MCD|MARSCD
(1)   65/    43B4 :                     	dc.b $D0|flags,pitch,((start>>16)&$FF),((start>>8)&$FF)
(1)   66/    43B4 :                     	dc.b start&$FF,0,0,0
(1)   67/    43B4 :                      else
(1)   68/    43B4 :                     	dc.b $00,$00,$00,$00
(1)   69/    43B4 :                     	dc.b $00,$00,$00,$00
(1)   70/    43B4 :                      endif
(1)   71/    43B4 :                     	endm
(1)   72/    43B4 :                     
(1)   73/    43B4 :                     ; flags: %00SL
(1)   74/    43B4 :                     ;        L - Loop sample No/Yes
(1)   75/    43B4 :                     ;        S  - Sample data is on STEREO
(1)   76/    43B4 :                     gInsPwm	macro pitch,start,flags
(1)   77/    43B4 :                      if MARS|MARSCD
(1)   78/    43B4 :                     	dc.b $E0|flags,pitch,((start>>24)&$FF),((start>>16)&$FF)
(1)   79/    43B4 :                     	dc.b ((start>>8)&$FF),start&$FF,0,0
(1)   80/    43B4 :                      else
(1)   81/    43B4 :                     	dc.b $00,$00,$00,$00
(1)   82/    43B4 :                     	dc.b $00,$00,$00,$00
(1)   83/    43B4 :                      endif
(1)   84/    43B4 :                     	endm
(1)   85/    43B4 :                     
(1)   86/    43B4 :                     ; ticks - %gttttttt
(1)   87/    43B4 :                     ;   loc - 68k pointer
(1)   88/    43B4 :                     ;
(1)   89/    43B4 :                     ; t-Ticks
(1)   90/    43B4 :                     ; g-Use global tempo
(1)   91/    43B4 :                     gemaTrk macro ticks,loc
(1)   92/    43B4 :                     	dc.l ((ticks&$FF)<<24)|loc&$FFFFFF
(1)   93/    43B4 :                     	endm
(1)   94/    43B4 :                     
(1)   95/    43B4 :                     ; gemaHead
(1)   96/    43B4 :                     ; block point, patt point, ins point
(1)   97/    43B4 :                     ; numof_blocks,numof_patts,numof_ins
(1)   98/    43B4 :                     gemaHead macro blk,pat,ins,num
(1)   99/    43B4 :                     	dc.w num
(1)  100/    43B4 :                     	dc.l blk
(1)  101/    43B4 :                     	dc.l pat
(1)  102/    43B4 :                     	dc.l ins
(1)  103/    43B4 :                     	endm
(1)  104/    43B4 :                     
(1)  105/    43B4 :                     ; gemaTrack macro num,name
(1)  106/    43B4 :                     ; 	gemaHead .blk,.pat,.ins,num
(1)  107/    43B4 :                     ; .blk:
(1)  108/    43B4 :                     ; 	binclude "sound/tracks/"+name+"_blk.bin"
(1)  109/    43B4 :                     ; .pat:
(1)  110/    43B4 :                     ; 	binclude "sound/tracks/"+name+"_patt.bin"
(1)  111/    43B4 :                     ; .ins:
(1)  112/    43B4 :                     ; 	endm
(1)  113/    43B4 :                     
(1)  114/    43B4 :                     ; ================================================================
(1)  115/    43B4 :                     ; ------------------------------------------------------------
(1)  116/    43B4 :                     ; Nikona MAIN track-list
(1)  117/    43B4 :                     ;
(1)  118/    43B4 :                     ; gemaTrk ticks+beatsbit*,track_data
(1)  119/    43B4 :                     ; Add $80 ($80|ticks) to make the track use global sub-beats
(1)  120/    43B4 :                     ;
(1)  121/    43B4 :                     ; To use sub-beats call gemaSetBeats command
(1)  122/    43B4 :                     ; BEFORE playing your track:
(1)  123/    43B4 :                     ; 	move.w	#new_beats,d0
(1)  124/    43B4 :                     ; 	bsr	gemaSetBeats
(1)  125/    43B4 :                     ; 	move.w	#track_id,d0
(1)  126/    43B4 :                     ;	bsr	gemaPlayTrack
(1)  127/    43B4 :                     ; ------------------------------------------------------------
(1)  128/    43B4 :                     
(1)  129/    43B4 :                     	align 2
(1)  130/    43B4 :                     Gema_MasterList:
(1)  131/    43B4 : (MACRO)              	gemaTrk 12,GemaTrk_TEST_0
(1)  131/    43B4 : 0C00 44D0                   dc.l ((12&$FF)<<24)|GEMATRK_TEST_0&$FFFFFF
(1)  132/    43B8 : (MACRO)              	gemaTrk 6|$80,GemaTrk_MOVEME
(1)  132/    43B8 : 8600 7A0D                   dc.l ((6|$80&$FF)<<24)|GEMATRK_MOVEME&$FFFFFF
(1)  133/    43BC : (MACRO)              	gemaTrk 6|$80,GemaTrk_NadieMD
(1)  133/    43BC : 8600 B36C                   dc.l ((6|$80&$FF)<<24)|GEMATRK_NADIEMD&$FFFFFF
(1)  134/    43C0 : (MACRO)              	gemaTrk 6|$80,GemaTrk_NadieMCD
(1)  134/    43C0 : 8600 C65A                   dc.l ((6|$80&$FF)<<24)|GEMATRK_NADIEMCD&$FFFFFF
(1)  135/    43C4 : (MACRO)              	gemaTrk 6|$80,GemaTrk_NadieMARS
(1)  135/    43C4 : 8600 D908                   dc.l ((6|$80&$FF)<<24)|GEMATRK_NADIEMARS&$FFFFFF
(1)  136/    43C8 : (MACRO)              	gemaTrk 3|$80,GemaTrk_Crystal
(1)  136/    43C8 : 8300 A132                   dc.l ((3|$80&$FF)<<24)|GEMATRK_CRYSTAL&$FFFFFF
(1)  137/    43CC : (MACRO)              	gemaTrk 7,GemaTrk_Arena1
(1)  137/    43CC : 0700 454A                   dc.l ((7&$FF)<<24)|GEMATRK_ARENA1&$FFFFFF
(1)  138/    43D0 : (MACRO)              	gemaTrk 3,GemaTrk_Dream
(1)  138/    43D0 : 0300 89E2                   dc.l ((3&$FF)<<24)|GEMATRK_DREAM&$FFFFFF
(1)  139/    43D4 :                     
(1)  140/    43D4 :                     ; ------------------------------------------------------------
(1)  141/    43D4 :                     ; BGM tracks
(1)  142/    43D4 :                     ; ------------------------------------------------------------
(1)  143/    43D4 :                     
(1)  144/    43D4 :                     GemaSfx_All:
(1)  145/    43D4 : (MACRO)              	gemaHead .blk,.pat,.ins,1
(1)  145/    43D4 : 0001                        dc.w 1
(1)  145/    43D6 : 0000 43E2                   dc.l .BLK
(1)  145/    43DA : 0000 43E8                   dc.l .PAT
(1)  145/    43DE : 0000 44A8                   dc.l .INS
(1)  146/    43E2 :                     .blk:
(1)  147/    43E2 :                     	binclude "sound/tracks/sfxall_blk.bin"
(1)  148/    43E7 :                     	align 2
(1)  149/    43E8 :                     .pat:
(1)  150/    43E8 :                     	binclude "sound/tracks/sfxall_patt.bin"
(1)  151/    44A7 :                     	align 2
(1)  152/    44A8 :                     .ins:
(1)  153/    44A8 : (MACRO)              	gInsPsgN 0,$00,$00,$00,$00,$00,0,%100
(1)  153/    44A8 : 9400 0000                   dc.b $90|%100,0,$00,$00
(1)  153/    44AC : 0000 0000                   dc.b $00,$00,$00,0
(1)  154/    44B0 : (MACRO)              	gInsPsgN 0,$00,$00,$00,$00,$00,0,%101
(1)  154/    44B0 : 9500 0000                   dc.b $90|%101,0,$00,$00
(1)  154/    44B4 : 0000 0000                   dc.b $00,$00,$00,0
(1)  155/    44B8 : (MACRO)              	gInsPsgN 0,$00,$00,$00,$00,$00,0,%110
(1)  155/    44B8 : 9600 0000                   dc.b $90|%110,0,$00,$00
(1)  155/    44BC : 0000 0000                   dc.b $00,$00,$00,0
(1)  156/    44C0 : (MACRO)              	gInsFm 0,FmIns_Ding_1
(1)  156/    44C0 : A000 00F0                   dc.b $A0,0,((FMINS_DING_1>>16)&$FF),((FMINS_DING_1>>8)&$FF)
(1)  156/    44C4 : 5600 0000                   dc.b FMINS_DING_1&$FF,$00,$00,$00
(1)  157/    44C8 : (MACRO)              	gInsFm3 0,FmIns_Fm3_Explosion
(1)  157/    44C8 : B000 00EB                   dc.b $B0,0,((FMINS_FM3_EXPLOSION>>16)&$FF),((FMINS_FM3_EXPLOSION>>8)&$FF)
(1)  157/    44CC : B600 0000                   dc.b FMINS_FM3_EXPLOSION&$FF,$00,$00,$00
(1)  158/    44D0 :                     
(1)  159/    44D0 :                     ; ------------------------------------------------------------
(1)  160/    44D0 :                     
(1)  161/    44D0 :                     GemaTrk_TEST_0:
(1)  162/    44D0 : (MACRO)              	gemaHead .blk,.pat,.ins,3
(1)  162/    44D0 : 0003                        dc.w 3
(1)  162/    44D2 : 0000 44E6                   dc.l .BLK
(1)  162/    44D6 : 0000 44E9                   dc.l .PAT
(1)  162/    44DA : 0000 44DE                   dc.l .INS
(1)  163/    44DE :                     .ins:
(1)  164/    44DE :                     ; 	gInsPsgN 0,$00,$00,$00,$00,$00,0,%101
(1)  165/    44DE :                     ; 	gInsFm -36-6,FmIns_Ambient_dark
(1)  166/    44DE :                     ; 	gInsPcm -12,PcmIns_MoveMe_BrassL,%11
(1)  167/    44DE : (MACRO)              	gInsPwm 0,PwmIns_Piano,%00
(1)  167/    44DE : 0000 0000                   dc.b $00,$00,$00,$00
(1)  167/    44E2 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  168/    44E6 :                     .blk:
(1)  169/    44E6 :                     	binclude "sound/tracks/test_blk.bin"
(1)  170/    44E9 :                     .pat:
(1)  171/    44E9 :                     	binclude "sound/tracks/test_patt.bin"
(1)  172/    454A :                     
(1)  173/    454A :                     GemaTrk_Arena1:
(1)  174/    454A : (MACRO)              	gemaHead shrd_blk,shrd_pat,.ins,6
(1)  174/    454A : 0006                        dc.w 6
(1)  174/    454C : 0000 45D8                   dc.l SHRD_BLK
(1)  174/    4550 : 0000 45F1                   dc.l SHRD_PAT
(1)  174/    4554 : 0000 4558                   dc.l .INS
(1)  175/    4558 :                     .ins:
(1)  176/    4558 : (MACRO)              	gInsPcm -17-7,PcmIns_Menu_01,1
(1)  176/    4558 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  176/    455C : 0000 0000                   dc.b $00,$00,$00,$00
(1)  177/    4560 : (MACRO)              	gInsPcm -17-7,PcmIns_Menu_02,1
(1)  177/    4560 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  177/    4564 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  178/    4568 : (MACRO)              	gInsPcm -17-7,PcmIns_Menu_03,0
(1)  178/    4568 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  178/    456C : 0000 0000                   dc.b $00,$00,$00,$00
(1)  179/    4570 : (MACRO)              	gInsNull
(1)  179/    4570 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  179/    4574 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  180/    4578 : (MACRO)              	gInsPcm -17-7,PcmIns_Menu_05,1
(1)  180/    4578 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  180/    457C : 0000 0000                   dc.b $00,$00,$00,$00
(1)  181/    4580 : (MACRO)              	gInsPcm -17-7,PcmIns_Menu_06,0
(1)  181/    4580 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  181/    4584 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  182/    4588 : (MACRO)              	gInsPcm -17-7,PcmIns_Menu_07,0
(1)  182/    4588 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  182/    458C : 0000 0000                   dc.b $00,$00,$00,$00
(1)  183/    4590 : (MACRO)              	gInsPcm -17-7,PcmIns_Menu_08,0
(1)  183/    4590 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  183/    4594 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  184/    4598 : (MACRO)              	gInsPcm -17-7,PcmIns_Menu_09,0
(1)  184/    4598 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  184/    459C : 0000 0000                   dc.b $00,$00,$00,$00
(1)  185/    45A0 : (MACRO)              	gInsNull
(1)  185/    45A0 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  185/    45A4 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  186/    45A8 : (MACRO)              	gInsPcm -17-7,PcmIns_Menu_11,0
(1)  186/    45A8 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  186/    45AC : 0000 0000                   dc.b $00,$00,$00,$00
(1)  187/    45B0 : (MACRO)              	gInsPcm -17-7,PcmIns_Menu_12,0
(1)  187/    45B0 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  187/    45B4 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  188/    45B8 : (MACRO)              	gInsPcm -17-7,PcmIns_Menu_13,0
(1)  188/    45B8 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  188/    45BC : 0000 0000                   dc.b $00,$00,$00,$00
(1)  189/    45C0 : (MACRO)              	gInsPcm -17-7,PcmIns_Menu_14,1
(1)  189/    45C0 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  189/    45C4 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  190/    45C8 : (MACRO)              	gInsPcm -17-7,PcmIns_Menu_15,0
(1)  190/    45C8 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  190/    45CC : 0000 0000                   dc.b $00,$00,$00,$00
(1)  191/    45D0 : (MACRO)              	gInsPcm -17-7,PcmIns_Menu_16,0
(1)  191/    45D0 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  191/    45D4 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  192/    45D8 :                     shrd_blk:
(1)  193/    45D8 :                     	binclude "sound/tracks/menu_blk.bin"
(1)  194/    45F1 :                     shrd_pat:
(1)  195/    45F1 :                     	binclude "sound/tracks/menu_patt.bin"
(1)  196/    7A0D :                     
(1)  197/    7A0D :                     ; ------------------------------------------------------------
(1)  198/    7A0D :                     
(1)  199/    7A0D :                     GemaTrk_MOVEME:
(1)  200/    7A0D : (MACRO)              	gemaHead .blk,.pat,.ins,13
(1)  200/    7A0D : 000D                        dc.w 13
(1)  200/    7A0F : 0000 7A1B                   dc.l .BLK
(1)  200/    7A13 : 0000 7A32                   dc.l .PAT
(1)  200/    7A17 : 0000 894A                   dc.l .INS
(1)  201/    7A1B :                     .blk:
(1)  202/    7A1B :                     	binclude "sound/tracks/moveme_blk.bin"
(1)  203/    7A32 :                     	align 2
(1)  204/    7A32 :                     .pat:
(1)  205/    7A32 :                     	binclude "sound/tracks/moveme_patt.bin"
(1)  206/    894A :                     	align 2
(1)  207/    894A :                     .ins:
(1)  208/    894A : (MACRO)              	gInsPcm -12,PcmIns_MoveMe_Hit,%10
(1)  208/    894A : 0000 0000                   dc.b $00,$00,$00,$00
(1)  208/    894E : 0000 0000                   dc.b $00,$00,$00,$00
(1)  209/    8952 : (MACRO)              	gInsFm 0,FmIns_Bass_Duck
(1)  209/    8952 : A000 00ED                   dc.b $A0,0,((FMINS_BASS_DUCK>>16)&$FF),((FMINS_BASS_DUCK>>8)&$FF)
(1)  209/    8956 : 3600 0000                   dc.b FMINS_BASS_DUCK&$FF,$00,$00,$00
(1)  210/    895A : (MACRO)              	gInsPcm -12,PcmIns_MoveMe_BrassL,%11
(1)  210/    895A : 0000 0000                   dc.b $00,$00,$00,$00
(1)  210/    895E : 0000 0000                   dc.b $00,$00,$00,$00
(1)  211/    8962 : (MACRO)              	gInsFm 0,FmIns_ClosedHat
(1)  211/    8962 : A000 00F1                   dc.b $A0,0,((FMINS_CLOSEDHAT>>16)&$FF),((FMINS_CLOSEDHAT>>8)&$FF)
(1)  211/    8966 : 1600 0000                   dc.b FMINS_CLOSEDHAT&$FF,$00,$00,$00
(1)  212/    896A : (MACRO)              	gInsPsgN 0,$00,$00,$00,$00,$04,0,%110
(1)  212/    896A : 9600 0000                   dc.b $90|%110,0,$00,$00
(1)  212/    896E : 0000 0400                   dc.b $00,$00,$04,0
(1)  213/    8972 : (MACRO)              	gInsFm -12,FmIns_HBeat_tom
(1)  213/    8972 : A0F4 00F0                   dc.b $A0,-12,((FMINS_HBEAT_TOM>>16)&$FF),((FMINS_HBEAT_TOM>>8)&$FF)
(1)  213/    8976 : 9600 0000                   dc.b FMINS_HBEAT_TOM&$FF,$00,$00,$00
(1)  214/    897A : (MACRO)              	gInsPcm -12,PcmIns_Snare,%10
(1)  214/    897A : 0000 0000                   dc.b $00,$00,$00,$00
(1)  214/    897E : 0000 0000                   dc.b $00,$00,$00,$00
(1)  215/    8982 : (MACRO)              	gInsPcm -12,PcmIns_Kick,%10		;gInsFm -38,FmIns_DrumKick_gem
(1)  215/    8982 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  215/    8986 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  216/    898A : (MACRO)              	gInsFm -12,FmIns_Trumpet_carnival	;FmIns_Trumpet_2
(1)  216/    898A : A0F4 00EE                   dc.b $A0,-12,((FMINS_TRUMPET_CARNIVAL>>16)&$FF),((FMINS_TRUMPET_CARNIVAL>>8)&$FF)
(1)  216/    898E : B600 0000                   dc.b FMINS_TRUMPET_CARNIVAL&$FF,$00,$00,$00
(1)  217/    8992 : (MACRO)              	gInsPsg 0,$20,$20,$10,$01,$08,0		;gInsFm -12,FmIns_Ding_Baseball;
(1)  217/    8992 : 8000 2020                   dc.b $80,0,$20,$20
(1)  217/    8996 : 1001 0800                   dc.b $10,$01,$08,0
(1)  218/    899A : (MACRO)              	gInsFm3 0,FmIns_Sp_OpenHat
(1)  218/    899A : B000 00EB                   dc.b $B0,0,((FMINS_SP_OPENHAT>>16)&$FF),((FMINS_SP_OPENHAT>>8)&$FF)
(1)  218/    899E : DE00 0000                   dc.b FMINS_SP_OPENHAT&$FF,$00,$00,$00
(1)  219/    89A2 : (MACRO)              	gInsNull;gInsPwm -17,PwmIns_MyTime,%10
(1)  219/    89A2 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  219/    89A6 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  220/    89AA : (MACRO)              	gInsPsg +12,$20,$10,$10,$0C,$0C,0
(1)  220/    89AA : 800C 2010                   dc.b $80,+12,$20,$10
(1)  220/    89AE : 100C 0C00                   dc.b $10,$0C,$0C,0
(1)  221/    89B2 : (MACRO)              	gInsPsg 0,$00,$00,$00,$00,$06,0
(1)  221/    89B2 : 8000 0000                   dc.b $80,0,$00,$00
(1)  221/    89B6 : 0000 0600                   dc.b $00,$00,$06,0
(1)  222/    89BA : (MACRO)              	gInsPcm -12,PcmIns_MoveMe_BrassR,%11
(1)  222/    89BA : 0000 0000                   dc.b $00,$00,$00,$00
(1)  222/    89BE : 0000 0000                   dc.b $00,$00,$00,$00
(1)  223/    89C2 : (MACRO)              	gInsNull
(1)  223/    89C2 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  223/    89C6 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  224/    89CA : (MACRO)              	gInsNull
(1)  224/    89CA : 0000 0000                   dc.b $00,$00,$00,$00
(1)  224/    89CE : 0000 0000                   dc.b $00,$00,$00,$00
(1)  225/    89D2 : (MACRO)              	gInsNull
(1)  225/    89D2 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  225/    89D6 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  226/    89DA : (MACRO)              	gInsNull
(1)  226/    89DA : 0000 0000                   dc.b $00,$00,$00,$00
(1)  226/    89DE : 0000 0000                   dc.b $00,$00,$00,$00
(1)  227/    89E2 :                     
(1)  228/    89E2 :                     ; ------------------------------------------------------------
(1)  229/    89E2 :                     
(1)  230/    89E2 :                     GemaTrk_Dream:
(1)  231/    89E2 : (MACRO)              	gemaHead .blk,.pat,.ins,8
(1)  231/    89E2 : 0008                        dc.w 8
(1)  231/    89E4 : 0000 89F0                   dc.l .BLK
(1)  231/    89E8 : 0000 89FD                   dc.l .PAT
(1)  231/    89EC : 0000 A0BA                   dc.l .INS
(1)  232/    89F0 :                     .blk:
(1)  233/    89F0 :                     	binclude "sound/tracks/dream_blk.bin"
(1)  234/    89FD :                     .pat:
(1)  235/    89FD :                     	binclude "sound/tracks/dream_patt.bin"
(1)  236/    A0BA :                     .ins:
(1)  237/    A0BA : (MACRO)              	gInsFm 0,FmIns_Hats_closed
(1)  237/    A0BA : A000 00F0                   dc.b $A0,0,((FMINS_HATS_CLOSED>>16)&$FF),((FMINS_HATS_CLOSED>>8)&$FF)
(1)  237/    A0BE : F600 0000                   dc.b FMINS_HATS_CLOSED&$FF,$00,$00,$00
(1)  238/    A0C2 : (MACRO)              	gInsDac +12,DacIns_Kick_wegot,0
(1)  238/    A0C2 : C00C 0207                   dc.b $C0|0,+12,((DACINS_KICK_WEGOT>>16)&$FF),((DACINS_KICK_WEGOT>>8)&$FF)
(1)  238/    A0C6 : 5400 0000                   dc.b DACINS_KICK_WEGOT&$FF,0,0,0
(1)  239/    A0CA : (MACRO)              	gInsFm -12,FmIns_brass_eur
(1)  239/    A0CA : A0F4 00EE                   dc.b $A0,-12,((FMINS_BRASS_EUR>>16)&$FF),((FMINS_BRASS_EUR>>8)&$FF)
(1)  239/    A0CE : D600 0000                   dc.b FMINS_BRASS_EUR&$FF,$00,$00,$00
(1)  240/    A0D2 : (MACRO)              	gInsFm -24,FmIns_Trumpet_carnival
(1)  240/    A0D2 : A0E8 00EE                   dc.b $A0,-24,((FMINS_TRUMPET_CARNIVAL>>16)&$FF),((FMINS_TRUMPET_CARNIVAL>>8)&$FF)
(1)  240/    A0D6 : B600 0000                   dc.b FMINS_TRUMPET_CARNIVAL&$FF,$00,$00,$00
(1)  241/    A0DA : (MACRO)              	gInsPsg  0,$00,$20,$00,$02,$10,0
(1)  241/    A0DA : 8000 0020                   dc.b $80,0,$00,$20
(1)  241/    A0DE : 0002 1000                   dc.b $00,$02,$10,0
(1)  242/    A0E2 : (MACRO)              	gInsPsgN 0,$00,$10,$00,$01,$04,0,%100
(1)  242/    A0E2 : 9400 0010                   dc.b $90|%100,0,$00,$10
(1)  242/    A0E6 : 0001 0400                   dc.b $00,$01,$04,0
(1)  243/    A0EA : (MACRO)              	gInsFm 0,FmIns_Bass_low_1
(1)  243/    A0EA : A000 00ED                   dc.b $A0,0,((FMINS_BASS_LOW_1>>16)&$FF),((FMINS_BASS_LOW_1>>8)&$FF)
(1)  243/    A0EE : D600 0000                   dc.b FMINS_BASS_LOW_1&$FF,$00,$00,$00
(1)  244/    A0F2 : (MACRO)              	gInsFm 0,FmIns_Hats_1
(1)  244/    A0F2 : A000 00F0                   dc.b $A0,0,((FMINS_HATS_1>>16)&$FF),((FMINS_HATS_1>>8)&$FF)
(1)  244/    A0F6 : D600 0000                   dc.b FMINS_HATS_1&$FF,$00,$00,$00
(1)  245/    A0FA : (MACRO)              	gInsPsgN 0,$00,$10,$00,$01,$08,0,%101
(1)  245/    A0FA : 9500 0010                   dc.b $90|%101,0,$00,$10
(1)  245/    A0FE : 0001 0800                   dc.b $00,$01,$08,0
(1)  246/    A102 : (MACRO)              	gInsNull
(1)  246/    A102 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  246/    A106 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  247/    A10A : (MACRO)              	gInsNull
(1)  247/    A10A : 0000 0000                   dc.b $00,$00,$00,$00
(1)  247/    A10E : 0000 0000                   dc.b $00,$00,$00,$00
(1)  248/    A112 : (MACRO)              	gInsNull
(1)  248/    A112 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  248/    A116 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  249/    A11A : (MACRO)              	gInsNull
(1)  249/    A11A : 0000 0000                   dc.b $00,$00,$00,$00
(1)  249/    A11E : 0000 0000                   dc.b $00,$00,$00,$00
(1)  250/    A122 : (MACRO)              	gInsPsg  0,$40,$00,$00,$00,$00,0
(1)  250/    A122 : 8000 4000                   dc.b $80,0,$40,$00
(1)  250/    A126 : 0000 0000                   dc.b $00,$00,$00,0
(1)  251/    A12A : (MACRO)              	gInsFm -12,FmIns_Trumpet_1
(1)  251/    A12A : A0F4 00EE                   dc.b $A0,-12,((FMINS_TRUMPET_1>>16)&$FF),((FMINS_TRUMPET_1>>8)&$FF)
(1)  251/    A12E : 9600 0000                   dc.b FMINS_TRUMPET_1&$FF,$00,$00,$00
(1)  252/    A132 :                     
(1)  253/    A132 :                     ; Ticks: 3-1
(1)  254/    A132 :                     ; TEMPO: 170
(1)  255/    A132 :                     GemaTrk_Crystal:
(1)  256/    A132 : (MACRO)              	gemaHead .blk,.pat,.ins,7
(1)  256/    A132 : 0007                        dc.w 7
(1)  256/    A134 : 0000 A140                   dc.l .BLK
(1)  256/    A138 : 0000 A148                   dc.l .PAT
(1)  256/    A13C : 0000 B33C                   dc.l .INS
(1)  257/    A140 :                     .blk:
(1)  258/    A140 :                     	binclude "sound/tracks/crystal_blk.bin"
(1)  259/    A148 :                     .pat:
(1)  260/    A148 :                     	binclude "sound/tracks/crystal_patt.bin"
(1)  261/    B33C :                     .ins:
(1)  262/    B33C : (MACRO)              	gInsFm 0,FmIns_Organ2a
(1)  262/    B33C : A000 00EB                   dc.b $A0,0,((FMINS_ORGAN2A>>16)&$FF),((FMINS_ORGAN2A>>8)&$FF)
(1)  262/    B340 : 9600 0000                   dc.b FMINS_ORGAN2A&$FF,$00,$00,$00
(1)  263/    B344 : (MACRO)              	gInsPsgN 0,$00,$10,$00,$01,$10,0,%100
(1)  263/    B344 : 9400 0010                   dc.b $90|%100,0,$00,$10
(1)  263/    B348 : 0001 1000                   dc.b $00,$01,$10,0
(1)  264/    B34C : (MACRO)              	gInsDac 0,DacIns_Kick_wegot,0
(1)  264/    B34C : C000 0207                   dc.b $C0|0,0,((DACINS_KICK_WEGOT>>16)&$FF),((DACINS_KICK_WEGOT>>8)&$FF)
(1)  264/    B350 : 5400 0000                   dc.b DACINS_KICK_WEGOT&$FF,0,0,0
(1)  265/    B354 : (MACRO)              	gInsFm3 0,FmIns_Sp_OpenHat
(1)  265/    B354 : B000 00EB                   dc.b $B0,0,((FMINS_SP_OPENHAT>>16)&$FF),((FMINS_SP_OPENHAT>>8)&$FF)
(1)  265/    B358 : DE00 0000                   dc.b FMINS_SP_OPENHAT&$FF,$00,$00,$00
(1)  266/    B35C : (MACRO)              	gInsNull
(1)  266/    B35C : 0000 0000                   dc.b $00,$00,$00,$00
(1)  266/    B360 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  267/    B364 : (MACRO)              	gInsFm 0,FmIns_Bass_low_1
(1)  267/    B364 : A000 00ED                   dc.b $A0,0,((FMINS_BASS_LOW_1>>16)&$FF),((FMINS_BASS_LOW_1>>8)&$FF)
(1)  267/    B368 : D600 0000                   dc.b FMINS_BASS_LOW_1&$FF,$00,$00,$00
(1)  268/    B36C :                     
(1)  269/    B36C :                     ; ------------------------------------------------------------
(1)  270/    B36C :                     
(1)  271/    B36C :                     GemaTrk_NadieMD:
(1)  272/    B36C : (MACRO)              	gemaHead .blk,.patt,.inst,7
(1)  272/    B36C : 0007                        dc.w 7
(1)  272/    B36E : 0000 B37A                   dc.l .BLK
(1)  272/    B372 : 0000 B382                   dc.l .PATT
(1)  272/    B376 : 0000 C612                   dc.l .INST
(1)  273/    B37A :                     .blk:
(1)  274/    B37A :                     	binclude "sound/tracks/nadie_md_blk.bin"
(1)  275/    B381 :                     	align 2
(1)  276/    B382 :                     .patt:
(1)  277/    B382 :                     	binclude "sound/tracks/nadie_md_patt.bin"
(1)  278/    C612 :                     	align 2
(1)  279/    C612 :                     .inst:
(1)  280/    C612 : (MACRO)              	gInsDac 0,DacIns_Nadie,0
(1)  280/    C612 : C000 0100                   dc.b $C0|0,0,((DACINS_NADIE>>16)&$FF),((DACINS_NADIE>>8)&$FF)
(1)  280/    C616 : 0000 0000                   dc.b DACINS_NADIE&$FF,0,0,0
(1)  281/    C61A : (MACRO)              	gInsFm -36,FmIns_Piano_Aqua
(1)  281/    C61A : A0DC 00EE                   dc.b $A0,-36,((FMINS_PIANO_AQUA>>16)&$FF),((FMINS_PIANO_AQUA>>8)&$FF)
(1)  281/    C61E : 3600 0000                   dc.b FMINS_PIANO_AQUA&$FF,$00,$00,$00
(1)  282/    C622 : (MACRO)              	gInsFm -12,FmIns_HBeat_tom
(1)  282/    C622 : A0F4 00F0                   dc.b $A0,-12,((FMINS_HBEAT_TOM>>16)&$FF),((FMINS_HBEAT_TOM>>8)&$FF)
(1)  282/    C626 : 9600 0000                   dc.b FMINS_HBEAT_TOM&$FF,$00,$00,$00
(1)  283/    C62A : (MACRO)              	gInsFm -37,FmIns_DrumKick_gem
(1)  283/    C62A : A0DB 00EF                   dc.b $A0,-37,((FMINS_DRUMKICK_GEM>>16)&$FF),((FMINS_DRUMKICK_GEM>>8)&$FF)
(1)  283/    C62E : 5600 0000                   dc.b FMINS_DRUMKICK_GEM&$FF,$00,$00,$00
(1)  284/    C632 : (MACRO)              	gInsPsg 0,$50,$70,$00,$06,$08,0
(1)  284/    C632 : 8000 5070                   dc.b $80,0,$50,$70
(1)  284/    C636 : 0006 0800                   dc.b $00,$06,$08,0
(1)  285/    C63A : (MACRO)              	gInsFm 0,FmIns_Trumpet_1
(1)  285/    C63A : A000 00EE                   dc.b $A0,0,((FMINS_TRUMPET_1>>16)&$FF),((FMINS_TRUMPET_1>>8)&$FF)
(1)  285/    C63E : 9600 0000                   dc.b FMINS_TRUMPET_1&$FF,$00,$00,$00
(1)  286/    C642 : (MACRO)              	gInsNull
(1)  286/    C642 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  286/    C646 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  287/    C64A : (MACRO)              	gInsFm3 0,FmIns_Sp_ClosedHat
(1)  287/    C64A : B000 00EC                   dc.b $B0,0,((FMINS_SP_CLOSEDHAT>>16)&$FF),((FMINS_SP_CLOSEDHAT>>8)&$FF)
(1)  287/    C64E : 0600 0000                   dc.b FMINS_SP_CLOSEDHAT&$FF,$00,$00,$00
(1)  288/    C652 : (MACRO)              	gInsFm3 0,FmIns_Sp_OpenHat
(1)  288/    C652 : B000 00EB                   dc.b $B0,0,((FMINS_SP_OPENHAT>>16)&$FF),((FMINS_SP_OPENHAT>>8)&$FF)
(1)  288/    C656 : DE00 0000                   dc.b FMINS_SP_OPENHAT&$FF,$00,$00,$00
(1)  289/    C65A :                     
(1)  290/    C65A :                     GemaTrk_NadieMCD:
(1)  291/    C65A : (MACRO)              	gemaHead .blk,.patt,.inst,11
(1)  291/    C65A : 000B                        dc.w 11
(1)  291/    C65C : 0000 C668                   dc.l .BLK
(1)  291/    C660 : 0000 C670                   dc.l .PATT
(1)  291/    C664 : 0000 D8C0                   dc.l .INST
(1)  292/    C668 :                     .blk:
(1)  293/    C668 :                     	binclude "sound/tracks/nadie_mcd_blk.bin"
(1)  294/    C66F :                     	align 2
(1)  295/    C670 :                     .patt
(1)  296/    C670 :                     	binclude "sound/tracks/nadie_mcd_patt.bin"
(1)  297/    D8C0 :                     	align 2
(1)  298/    D8C0 :                     .inst:
(1)  299/    D8C0 : (MACRO)              	gInsPcm -12,PcmIns_NadieL,%10
(1)  299/    D8C0 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  299/    D8C4 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  300/    D8C8 : (MACRO)              	gInsFm -36,FmIns_Piano_Aqua
(1)  300/    D8C8 : A0DC 00EE                   dc.b $A0,-36,((FMINS_PIANO_AQUA>>16)&$FF),((FMINS_PIANO_AQUA>>8)&$FF)
(1)  300/    D8CC : 3600 0000                   dc.b FMINS_PIANO_AQUA&$FF,$00,$00,$00
(1)  301/    D8D0 : (MACRO)              	gInsFm -12,FmIns_HBeat_tom
(1)  301/    D8D0 : A0F4 00F0                   dc.b $A0,-12,((FMINS_HBEAT_TOM>>16)&$FF),((FMINS_HBEAT_TOM>>8)&$FF)
(1)  301/    D8D4 : 9600 0000                   dc.b FMINS_HBEAT_TOM&$FF,$00,$00,$00
(1)  302/    D8D8 : (MACRO)              	gInsPcm -12-12,PcmIns_PKick,%00
(1)  302/    D8D8 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  302/    D8DC : 0000 0000                   dc.b $00,$00,$00,$00
(1)  303/    D8E0 : (MACRO)              	gInsPsg 0,$50,$70,$00,$06,$08,0
(1)  303/    D8E0 : 8000 5070                   dc.b $80,0,$50,$70
(1)  303/    D8E4 : 0006 0800                   dc.b $00,$06,$08,0
(1)  304/    D8E8 : (MACRO)              	gInsFm 0,FmIns_Trumpet_1
(1)  304/    D8E8 : A000 00EE                   dc.b $A0,0,((FMINS_TRUMPET_1>>16)&$FF),((FMINS_TRUMPET_1>>8)&$FF)
(1)  304/    D8EC : 9600 0000                   dc.b FMINS_TRUMPET_1&$FF,$00,$00,$00
(1)  305/    D8F0 : (MACRO)              	gInsPcm 0-12,PcmIns_Piano,%00
(1)  305/    D8F0 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  305/    D8F4 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  306/    D8F8 : (MACRO)              	gInsPcm -12-12,PcmIns_PTom,%00
(1)  306/    D8F8 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  306/    D8FC : 0000 0000                   dc.b $00,$00,$00,$00
(1)  307/    D900 : (MACRO)              	gInsPcm -12,PcmIns_NadieR,%10
(1)  307/    D900 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  307/    D904 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  308/    D908 :                     
(1)  309/    D908 :                     GemaTrk_NadieMARS:
(1)  310/    D908 : (MACRO)              	gemaHead .blk,.patt,.inst,11
(1)  310/    D908 : 000B                        dc.w 11
(1)  310/    D90A : 0000 D916                   dc.l .BLK
(1)  310/    D90E : 0000 D91E                   dc.l .PATT
(1)  310/    D912 : 0000 EB2E                   dc.l .INST
(1)  311/    D916 :                     .blk:
(1)  312/    D916 :                     	binclude "sound/tracks/nadie_blk.bin"
(1)  313/    D91D :                     	align 2
(1)  314/    D91E :                     .patt
(1)  315/    D91E :                     	binclude "sound/tracks/nadie_patt.bin"
(1)  316/    EB2E :                     	align 2
(1)  317/    EB2E :                     .inst:
(1)  318/    EB2E : (MACRO)              	gInsPwm 0,PwmIns_Nadie,%10
(1)  318/    EB2E : 0000 0000                   dc.b $00,$00,$00,$00
(1)  318/    EB32 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  319/    EB36 : (MACRO)              	gInsFm -36,FmIns_Piano_Aqua
(1)  319/    EB36 : A0DC 00EE                   dc.b $A0,-36,((FMINS_PIANO_AQUA>>16)&$FF),((FMINS_PIANO_AQUA>>8)&$FF)
(1)  319/    EB3A : 3600 0000                   dc.b FMINS_PIANO_AQUA&$FF,$00,$00,$00
(1)  320/    EB3E : (MACRO)              	gInsFm -12,FmIns_HBeat_tom
(1)  320/    EB3E : A0F4 00F0                   dc.b $A0,-12,((FMINS_HBEAT_TOM>>16)&$FF),((FMINS_HBEAT_TOM>>8)&$FF)
(1)  320/    EB42 : 9600 0000                   dc.b FMINS_HBEAT_TOM&$FF,$00,$00,$00
(1)  321/    EB46 : (MACRO)              	gInsPwm -12,PwmIns_PKick,%00
(1)  321/    EB46 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  321/    EB4A : 0000 0000                   dc.b $00,$00,$00,$00
(1)  322/    EB4E : (MACRO)              	gInsPsg 0,$50,$70,$00,$06,$08,0
(1)  322/    EB4E : 8000 5070                   dc.b $80,0,$50,$70
(1)  322/    EB52 : 0006 0800                   dc.b $00,$06,$08,0
(1)  323/    EB56 : (MACRO)              	gInsFm 0,FmIns_Trumpet_1
(1)  323/    EB56 : A000 00EE                   dc.b $A0,0,((FMINS_TRUMPET_1>>16)&$FF),((FMINS_TRUMPET_1>>8)&$FF)
(1)  323/    EB5A : 9600 0000                   dc.b FMINS_TRUMPET_1&$FF,$00,$00,$00
(1)  324/    EB5E : (MACRO)              	gInsPwm 0,PwmIns_Piano,%00
(1)  324/    EB5E : 0000 0000                   dc.b $00,$00,$00,$00
(1)  324/    EB62 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  325/    EB66 : (MACRO)              	gInsPwm -12,PwmIns_PTom,%00
(1)  325/    EB66 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  325/    EB6A : 0000 0000                   dc.b $00,$00,$00,$00
(1)  326/    EB6E : (MACRO)              	gInsNull
(1)  326/    EB6E : 0000 0000                   dc.b $00,$00,$00,$00
(1)  326/    EB72 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  327/    EB76 :                     
     413/    EB76 :                     		include "sound/instr.asm"		; GEMA: FM instruments
(1)    1/    EB76 :                     ; ====================================================================
(1)    2/    EB76 :                     ; --------------------------------------------------------
(1)    3/    EB76 :                     ; GEMA/Nikona FM instruments "patches"
(1)    4/    EB76 :                     ;
(1)    5/    EB76 :                     ; Use the included FM_EDITOR.bin ROM to make your
(1)    6/    EB76 :                     ; own instruments/patches
(1)    7/    EB76 :                     ; --------------------------------------------------------
(1)    8/    EB76 :                     
(1)    9/    EB76 :                     ; FM_EDITOR savestate data is located at:
(1)   10/    EB76 :                     ; $2478
(1)   11/    EB76 :                     ;
(1)   12/    EB76 :                     ; Sizes:
(1)   13/    EB76 :                     ; Normal FM ins: $20
(1)   14/    EB76 :                     ; Special FM ins: $28
(1)   15/    EB76 :                     ;
(1)   16/    EB76 :                     ; REGISTER FORMAT:
(1)   17/    EB76 :                     ; dc.b $30,$34,$38,$3C
(1)   18/    EB76 :                     ; dc.b $40,$44,$48,$4C
(1)   19/    EB76 :                     ; dc.b $50,$54,$58,$5C
(1)   20/    EB76 :                     ; dc.b $60,$64,$68,$6C
(1)   21/    EB76 :                     ; dc.b $70,$74,$78,$7C
(1)   22/    EB76 :                     ; dc.b $80,$84,$88,$8C
(1)   23/    EB76 :                     ; dc.b $90,$94,$98,$9C
(1)   24/    EB76 :                     ; dc.b $B0,$B4,$22,$28
(1)   25/    EB76 :                     ; ** Extra words for FM3 special:
(1)   26/    EB76 :                     ; dc.w OP1,OP2,OP3,OP4
(1)   27/    EB76 :                     ;
(1)   28/    EB76 :                     ; $22 LFO: %0000evvv
(1)   29/    EB76 :                     ; e - Enable
(1)   30/    EB76 :                     ; v - Value
(1)   31/    EB76 :                     ;
(1)   32/    EB76 :                     ; $28 KEYS: %oooo0000
(1)   33/    EB76 :                     ; o - Operators 4-1
(1)   34/    EB76 :                     
(1)   35/    EB76 :                     FmIns_Organ2:
(1)   36/    EB76 :                     		binclude "sound/instr/fm/organ2.gsx",$2478,$20
(1)   37/    EB96 :                     FmIns_Organ2a:
(1)   38/    EB96 :                     		binclude "sound/instr/fm/organ2a.gsx",$2478,$20
(1)   39/    EBB6 :                     
(1)   40/    EBB6 :                     ; FM3 Special
(1)   41/    EBB6 :                     FmIns_Fm3_Explosion:
(1)   42/    EBB6 :                     		binclude "sound/instr/fm/OLD/fm3_sfx_boomworm.gsx",$2478,$28
(1)   43/    EBDE :                     FmIns_Sp_OpenHat:
(1)   44/    EBDE :                     		binclude "sound/instr/fm/OLD/fm3_openhat.gsx",$2478,$28
(1)   45/    EC06 :                     FmIns_Sp_ClosedHat:
(1)   46/    EC06 :                     		binclude "sound/instr/fm/OLD/fm3_closedhat.gsx",$2478,$28
(1)   47/    EC2E :                     FmIns_Sp_Cowbell:
(1)   48/    EC2E :                     		binclude "sound/instr/fm/OLD/fm3_cowbell.gsx",$2478,$28
(1)   49/    EC56 :                     ; BASS
(1)   50/    EC56 :                     FmIns_Bass_1:
(1)   51/    EC56 :                     		binclude "sound/instr/fm/OLD/bass_low.gsx",$2478,$20
(1)   52/    EC76 :                     FmIns_Bass_2:
(1)   53/    EC76 :                     		binclude "sound/instr/fm/OLD/bass_strong.gsx",$2478,$20
(1)   54/    EC96 :                     FmIns_Bass_donna:
(1)   55/    EC96 :                     		binclude "sound/instr/fm/OLD/bass_feellove.gsx",$2478,$20
(1)   56/    ECB6 :                     FmIns_Bass_groove:
(1)   57/    ECB6 :                     		binclude "sound/instr/fm/OLD/bass_groove.gsx",$2478,$20
(1)   58/    ECD6 :                     FmIns_Bass_groove_2:
(1)   59/    ECD6 :                     		binclude "sound/instr/fm/OLD/bass_groove_2.gsx",$2478,$20
(1)   60/    ECF6 :                     FmIns_Bass_groove_gem:
(1)   61/    ECF6 :                     		binclude "sound/instr/fm/OLD/bass_groove_gem.gsx",$2478,$20
(1)   62/    ED16 :                     FmIns_Bass_italo:
(1)   63/    ED16 :                     		binclude "sound/instr/fm/OLD/bass_italo.gsx",$2478,$20
(1)   64/    ED36 :                     FmIns_Bass_duck:
(1)   65/    ED36 :                     		binclude "sound/instr/fm/OLD/bass_duck.gsx",$2478,$20
(1)   66/    ED56 :                     FmIns_Bass_4:
(1)   67/    ED56 :                     		binclude "sound/instr/fm/OLD/bass_4.gsx",$2478,$20
(1)   68/    ED76 :                     FmIns_Bass_8:
(1)   69/    ED76 :                     		binclude "sound/instr/fm/OLD/bass_8.gsx",$2478,$20
(1)   70/    ED96 :                     FmIns_Bass_club:
(1)   71/    ED96 :                     		binclude "sound/instr/fm/OLD/OLD_bass_club.gsx",$2478,$20
(1)   72/    EDB6 :                     FmIns_Bass_calm:
(1)   73/    EDB6 :                     		binclude "sound/instr/fm/OLD/bass_calm.gsx",$2478,$20
(1)   74/    EDD6 :                     FmIns_Bass_low_1:
(1)   75/    EDD6 :                     		binclude "sound/instr/fm/OLD/bass_low_1.bin"
(1)   76/    EDF6 :                     FmIns_Bass_Oil:
(1)   77/    EDF6 :                     		binclude "sound/instr/fm/OLD/bass_oil.gsx",$2478,$20
(1)   78/    EE16 :                     
(1)   79/    EE16 :                     ; PIANO
(1)   80/    EE16 :                     FmIns_PianoM1:
(1)   81/    EE16 :                     		binclude "sound/instr/fm/OLD/piano_m1.gsx",$2478,$20
(1)   82/    EE36 :                     FmIns_Piano_Aqua:
(1)   83/    EE36 :                     		binclude "sound/instr/fm/OLD/piano_aqua.gsx",$2478,$20
(1)   84/    EE56 :                     FmIns_Piano_Hard:
(1)   85/    EE56 :                     		binclude "sound/instr/fm/OLD/piano_hard.bin"
(1)   86/    EE76 :                     ; FmIns_Piano_m1:
(1)   87/    EE76 :                     ; 		binclude "sound/instr/fm/OLD/piano_m1.gsx",$2478,$20
(1)   88/    EE76 :                     
(1)   89/    EE76 :                     
(1)   90/    EE76 :                     FmIns_Synth_Plus:
(1)   91/    EE76 :                     		binclude "sound/instr/fm/OLD/OLD_synthplus.gsx",$2478,$20
(1)   92/    EE96 :                     
(1)   93/    EE96 :                     FmIns_Trumpet_1:
(1)   94/    EE96 :                     		binclude "sound/instr/fm/OLD/OLD_trumpet_1.gsx",$2478,$20
(1)   95/    EEB6 :                     FmIns_Trumpet_carnival:
(1)   96/    EEB6 :                     		binclude "sound/instr/fm/OLD/OLD_trumpet_carnivl.gsx",$2478,$20
(1)   97/    EED6 :                     
(1)   98/    EED6 :                     
(1)   99/    EED6 :                     FmIns_brass_eur:
(1)  100/    EED6 :                     		binclude "sound/instr/fm/OLD/OLD_brass_eur.gsx",$2478,$20
(1)  101/    EEF6 :                     FmIns_Brass_Puy:
(1)  102/    EEF6 :                     		binclude "sound/instr/fm/OLD/brass_puy.gsx",$2478,$20
(1)  103/    EF16 :                     
(1)  104/    EF16 :                     
(1)  105/    EF16 :                     FmIns_Organ_Ito:
(1)  106/    EF16 :                     		binclude "sound/instr/fm/OLD/organ_ito.gsx",$2478,$20
(1)  107/    EF36 :                     FmIns_Ding_Baseball:
(1)  108/    EF36 :                     		binclude "sound/instr/fm/OLD/ding_baseball.gsx",$2478,$20
(1)  109/    EF56 :                     FmIns_DrumKick_gem:
(1)  110/    EF56 :                     		binclude "sound/instr/fm/OLD/drum_kick_gem.gsx",$2478,$20
(1)  111/    EF76 :                     
(1)  112/    EF76 :                     
(1)  113/    EF76 :                     FmIns_Trumpet_2:
(1)  114/    EF76 :                     		binclude "sound/instr/fm/OLD/trumpet_2.gsx",$2478,$20
(1)  115/    EF96 :                     FmIns_Trumpet_puy:
(1)  116/    EF96 :                     		binclude "sound/instr/fm/OLD/trumpet_puy.gsx",$2478,$20
(1)  117/    EFB6 :                     FmIns_Marimba:
(1)  118/    EFB6 :                     		binclude "sound/instr/fm/OLD/marimba.gsx",$2478,$20
(1)  119/    EFD6 :                     
(1)  120/    EFD6 :                     FmIns_Ding_toy:
(1)  121/    EFD6 :                     		binclude "sound/instr/fm/OLD/ding_toy.gsx",$2478,$20
(1)  122/    EFF6 :                     
(1)  123/    EFF6 :                     FmIns_Flaute_cave:
(1)  124/    EFF6 :                     		binclude "sound/instr/fm/OLD/flaute_sea.gsx",$2478,$20
(1)  125/    F016 :                     FmIns_Banjo_puy:
(1)  126/    F016 :                     		binclude "sound/instr/fm/OLD/banjo_puy.gsx",$2478,$20
(1)  127/    F036 :                     FmIns_PSynth_plus:
(1)  128/    F036 :                     		binclude "sound/instr/fm/OLD/psynth_plus.gsx",$2478,$20
(1)  129/    F056 :                     FmIns_Ding_1:
(1)  130/    F056 :                     		binclude "sound/instr/fm/OLD/ding_gem.gsx",$2478,$20
(1)  131/    F076 :                     FmIns_Trombone_gem:
(1)  132/    F076 :                     		binclude "sound/instr/fm/OLD/trombone_gem.gsx",$2478,$20
(1)  133/    F096 :                     FmIns_HBeat_tom:
(1)  134/    F096 :                     		binclude "sound/instr/fm/OLD/nadia_tom.gsx",$2478,$20
(1)  135/    F0B6 :                     FmIns_Guitar_bball:
(1)  136/    F0B6 :                     		binclude "sound/instr/fm/OLD/guitar_bball.gsx",$2478,$20
(1)  137/    F0D6 :                     
(1)  138/    F0D6 :                     FmIns_Hats_1:
(1)  139/    F0D6 :                     		binclude "sound/instr/fm/OLD/fm_hats_spot.bin"
(1)  140/    F0F6 :                     FmIns_Hats_closed:
(1)  141/    F0F6 :                     		binclude "sound/instr/fm/OLD/hats_closed.gsx",$2478,$20
(1)  142/    F116 :                     FmIns_ClosedHat:
(1)  143/    F116 :                     		binclude "sound/instr/fm/OLD/hats_closed.gsx",$2478,$20
(1)  144/    F136 :                     
(1)  145/    F136 :                     FmIns_Sewer_1:
(1)  146/    F136 :                     		binclude "sound/instr/fm/OLD/sewer_1.bin"
(1)  147/    F156 :                     
(1)  148/    F156 :                     
(1)  149/    F156 :                     FmIns_Ambient_dark:
(1)  150/    F156 :                     		binclude "sound/instr/fm/OLD/ambient_dark.gsx",$2478,$20
(1)  151/    F176 :                     FmIns_Ambient_spook:
(1)  152/    F176 :                     		binclude "sound/instr/fm/OLD/ambient_spook.gsx",$2478,$20
(1)  153/    F196 :                     FmIns_Ambient_3:
(1)  154/    F196 :                     		binclude "sound/instr/fm/OLD/ambient_3.gsx",$2478,$20
(1)  155/    F1B6 :                     
(1)  156/    F1B6 :                     
(1)  157/    F1B6 :                     ; FmIns_Guitar_bball:
(1)  158/    F1B6 :                     ; 		binclude "sound/instr/fm/guitar_bball.gsx",$2478,$20
(1)  159/    F1B6 :                     
     414/    F1B6 :                     		include "sound/smpl_dac.asm"		; (MCD/CD32X ONLY) GEMA: DAC samples
(1)    1/    F1B6 :                     ; ====================================================================
(1)    2/    F1B6 :                     ; --------------------------------------------------------
(1)    3/    F1B6 :                     ; GEMA/Nikona DAC instruments
(1)    4/    F1B6 :                     ;
(1)    5/    F1B6 :                     ; This must be located at the 68k's 900000 area.
(1)    6/    F1B6 :                     ; ** 68K BANK 0 only **
(1)    7/    F1B6 :                     ;
(1)    8/    F1B6 :                     ; BASE Samplerate is at 16000hz
(1)    9/    F1B6 :                     ; --------------------------------------------------------
(1)   10/    F1B6 :                     
(1)   11/    F1B6 :                     	align $8000
(1)   12/   10000 :                     
(1)   13/   10000 :                     ; --------------------------------------------------------
(1)   14/   10000 :                     
(1)   15/   10000 :                     DacIns_Nadie:
(1)   16/   10000 : (MACRO)              	gSmpHead .end-.start,0
(1)   16/   10000 : B4DF 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   16/   10003 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   17/   10006 :                     .start:	binclude "sound/instr/smpl/nadie.wav",$2C
(1)   18/   1DFBA :                     .end:
(1)   19/   1DFBA :                     DacIns_Kick_techno:
(1)   20/   1DFBA : (MACRO)              	gSmpHead .end-.start,0
(1)   20/   1DFBA : 9C06 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   20/   1DFBD : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   21/   1DFC0 :                     .start:	binclude "sound/instr/smpl/ST-72_kick.wav",$2C
(1)   22/   1E65C :                     .end:
(1)   23/   1E65C :                     DacIns_Snare_techno:
(1)   24/   1E65C : (MACRO)              	gSmpHead .end-.start,0
(1)   24/   1E65C : F220 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   24/   1E65F : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   25/   1E662 :                     .start:	binclude "sound/instr/smpl/ST-79_snare.wav",$2C
(1)   26/   20754 :                     .end:
(1)   27/   20754 :                     DacIns_Kick_wegot:
(1)   28/   20754 : (MACRO)              	gSmpHead .end-.start,0
(1)   28/   20754 : 7407 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   28/   20757 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   29/   2075A :                     .start:	binclude "sound/instr/smpl/wegot_kick.wav",$2C
(1)   30/   20ECE :                     .end:
(1)   31/   20ECE :                     
     415/   20ECE :                     mdbank0_e:
     416/   20ECE : (MACRO)              	data_bkend MCD_DBANK0,MCD_DBANK0_e,mdbank0_e-mdbank0
     416/   20ECE :                     
     417/   20ECE :                     
     418/   20ECE :                     ; --------------------------------------------------------
     419/   20ECE :                     ; BANK 1
     420/   20ECE :                     ; --------------------------------------------------------
     421/   20ECE :                     
     422/   20ECE :                     ; 	data_bank MCD_DBANK1,-1
     423/   20ECE :                     ; 		org $200000-4
     424/   20ECE :                     ; 		dc.b "BNK1"
     425/   20ECE :                     ; 	data_bank_e MCD_DBANK1_e
     426/   20ECE :                     
     427/   20ECE :                     ; --------------------------------------------------------
     428/   20ECE :                     ; BANK 2
     429/   20ECE :                     ; --------------------------------------------------------
     430/   20ECE :                     
     431/   20ECE :                     ; 	data_bank MCD_DBANK2,-1
     432/   20ECE :                     ; 		org $300000-4
     433/   20ECE :                     ; 		dc.b "BNK2"
     434/   20ECE :                     ; 	data_bank_e MCD_DBANK2_e
     435/   20ECE :                     
     436/   20ECE :                     ; --------------------------------------------------------
     437/   20ECE :                     ; BANK 3
     438/   20ECE :                     ; --------------------------------------------------------
     439/   20ECE :                     
     440/   20ECE :                     ; 	data_bank MCD_DBANK3,-1
     441/   20ECE :                     ; 		org $400000-4
     442/   20ECE :                     ; 		dc.b "BNK3"
     443/   20ECE :                     ; 	data_bank_e MCD_DBANK3_e
     444/   20ECE :                     
     445/   20ECE :                     ; ====================================================================
     446/   20ECE :                     ; ----------------------------------------------------------------
     447/   20ECE :                     ; 32X/CD32X ONLY
     448/   20ECE :                     ;
     449/   20ECE :                     ; SDRAM DATA packages for each screen mode
     450/   20ECE :                     ;
     451/   20ECE :                     ; Usage:
     452/   20ECE :                     ; sdram_bank START_LABEL,END_LABEL
     453/   20ECE :                     ; (includes and bincludes)
     454/   20ECE :                     ; sdram_bank_e START_LABEL,END_LABEL
     455/   20ECE :                     ; ----------------------------------------------------------------
     456/   20ECE :                     
     457/   20ECE :                     ; ---------------------------------------------
     458/   20ECE :                     ; DEFAULT
     459/   20ECE :                     ; ---------------------------------------------
     460/   20ECE :                     
     461/   20ECE : (MACRO)              	sdram_bkset MARSDATA_DEFAULT,MARSDATA_DEFAULT_e
     461/   20ECE :                     ; MARSDATA_DEFAULT:
     461/   20ECE : =$20ECE              MARSDATA_DEFAULT label *
     462/   20ECE :                     	include "game/screen_0/data_mgfx.asm"
(1)    1/   20ECE :                     ; ====================================================================
(1)    2/   20ECE :                     ; ----------------------------------------------------------------
(1)    3/   20ECE :                     ; Put your 32X graphics here, indexed or direct
(1)    4/   20ECE :                     ;
(1)    5/   20ECE :                     ; These are located on the SH2's ROM area, this will be gone
(1)    6/   20ECE :                     ; if RV is set to 1
(1)    7/   20ECE :                     ;
(1)    8/   20ECE :                     ; Labels MUST be aligned by 4
(1)    9/   20ECE :                     ; ----------------------------------------------------------------
(1)   10/   20ECE :                     
(1)   11/   20ECE :                     		align 4
(1)   12/   20ED0 :                     ; ArtMars_Sabrina:
(1)   13/   20ED0 :                     ; 		binclude "game/screen_0/data/objects/mars/sabrina/sabrina_art.bin"
(1)   14/   20ED0 :                     ; 		align 4
(1)   15/   20ED0 :                     ArtMars_TEST:
(1)   16/   20ED0 :                     		binclude "game/screen_0/data/maps/mars/test/data_art.bin"
(1)   17/   326D0 :                     		align 4
(1)   18/   326D0 :                     
(1)   19/   326D0 :                     
(1)   20/   326D0 :                     
     463/   326D0 : (MACRO)              	sdram_bkend MARSDATA_DEFAULT,MARSDATA_DEFAULT_e
     463/   326D0 :                     
     464/   326D0 :                     
     465/   326D0 :                     ; ====================================================================
     466/   326D0 :                     ; ----------------------------------------------------------------
     467/   326D0 :                     ; Cartridge DMA graphics data
     468/   326D0 :                     ;
     469/   326D0 :                     ; BANK-free on 32X Cartridge
     470/   326D0 :                     ; ----------------------------------------------------------------
     471/   326D0 :                     
     473/   326D0 :                     		include "game/screen_0/data_dma.asm"
(1)    1/   326D0 :                     ; ====================================================================
(1)    2/   326D0 :                     ; ----------------------------------------------------------------
(1)    3/   326D0 :                     ; DMA Graphics for this screen
(1)    4/   326D0 :                     ; ----------------------------------------------------------------
(1)    5/   326D0 :                     
(1)    6/   326D0 :                     ASCII_FONT:	binclude "system/md/data/font.bin"
(1)    7/   332D0 :                     
(1)    8/   332D0 :                     ; ----------------------------------------------------------------
(1)    9/   332D0 :                     ; Commmon graphics
(1)   10/   332D0 :                     ; ----------------------------------------------------------------
(1)   11/   332D0 :                     
(1)   12/   332D0 :                     ART_TEST:
(1)   13/   332D0 :                     		binclude "game/screen_0/data/maps/md/test/md_art.bin"
(1)   14/   3BA50 :                     ART_TEST_e:
(1)   15/   3BA50 :                     		align 2
(1)   16/   3BA50 :                     
(1)   17/   3BA50 :                     ; ----------------------------------------------------------------
(1)   18/   3BA50 :                     ; Object graphics
(1)   19/   3BA50 :                     ; ----------------------------------------------------------------
(1)   20/   3BA50 :                     
(1)   21/   3BA50 :                     Art_Sisi:	binclude "game/screen_0/data/objects/md/sisi/sisi_art.bin"
(1)   22/   3C030 :                     Art_Sisi_e:
(1)   23/   3C030 :                     		align 2
(1)   24/   3C030 :                     
     475/   3C030 :                     
     476/   3C030 :                     ; ====================================================================
     477/   3C030 :                     ; ---------------------------------------------
     478/   3C030 :                     ; End
     479/   3C030 :                     ; ---------------------------------------------
     480/   3C030 :                     
     481/   3C030 :                     ROM_END:
     486/   3C030 :                     		align $8000			; Cartridge padding
     488/   40000 :                     
 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 3 - 02/28/2024 03:57:58 AM


  Symbol Table (* = unused):
  --------------------------

*ADAPTER :                        0 - | *ADEN :                           2 - |
 ALV :                           24 - |
*ARCHITECTURE :                                      "x86_64-unknown-linux" - |
*ARTMARS_TEST :               20ED0 C |  ART_SISI :                   3BA50 C |
 ART_SISI_E :                 3C030 C |  ART_TEST :                   332D0 C |
 ART_TEST_E :                 3BA50 C |  ASCII_FONT :                 326D0 C |
 ASCII_PAL :                    3B8 C |  ATK :                            8 - |
*BIGENDIAN :                      0 - | *BITBGON :                        7 - |
*BITCLICKL :                      0 - | *BITCLICKM :                      2 - |
*BITCLICKR :                      1 - | *BITCLICKS :                      3 - |
 BITDISPENBL :                    6 - |  BITDMA :                         1 - |
 BITDMAENBL :                     4 - | *BITDRWD :                        2 - |
*BITDRWL :                        1 - | *BITDRWR :                        0 - |
*BITDRWU :                        3 - | *BITFIFOE :                       9 - |
*BITFIFOF :                       8 - | *BITHBLK :                        2 - |
*BITHINTENBL :                    4 - | *BITHVSTOP :                      1 - |
*BITJOYA :                        6 - |  BITJOYB :                        4 - |
 BITJOYC :                        5 - |  BITJOYDOWN :                     1 - |
 BITJOYLEFT :                     2 - | *BITJOYMODE :                     B - |
 BITJOYRIGHT :                    3 - |  BITJOYSTART :                    7 - |
 BITJOYUP :                       0 - | *BITJOYX :                        A - |
*BITJOYY :                        9 - | *BITJOYZ :                        8 - |
*BITMAPMD :                       1 - | *BITMARSBG :                      6 - |
 BITOBJ_FLIPH :                   0 - |  BITOBJ_FLIPV :                   1 - |
 BITOBJ_MARS :                    7 - | *BITODD :                         4 - |
*BITPAL :                         0 - | *BITSPRCOL :                      5 - |
*BITSPROVR :                      6 - | *BITV30 :                         3 - |
 BITVBLK :                        3 - | *BITVINT :                        7 - |
*BITVINTENBL :                    5 - | *BITWRAMMODE :                    2 - |
*BRANCHEXT :                      0 - | *CART :                           1 - |
*CASESENSITIVE :                  0 - |  CDRAMDST :                      31 C |
 CDRAMLEN :                      30 C |  CDRAMSRC :                      33 C |
 CDRAMSRCB :                     35 C |  CHECK_THISRAM :   FFFFFFFFFFFFA000 C |
 CHIP_ENV :                    119F C |  CHIP_ENV.ATKEND :             1222 C |
*CHIP_ENV.ATKZERO :            1225 C |  CHIP_ENV.CHK2 :               122B C |
 CHIP_ENV.CHK4 :               1260 C |  CHIP_ENV.CKOF :               11C3 C |
 CHIP_ENV.CKON :               11D6 C | *CHIP_ENV.DECTMR :             122F C |
 CHIP_ENV.DKADD :              1249 C |  CHIP_ENV.DKSAV :              1251 C |
 CHIP_ENV.DKYEND :             1256 C |  CHIP_ENV.DO_NFREQ :           12B5 C |
 CHIP_ENV.ENVPROC :            11F4 C |  CHIP_ENV.KILLENV :            1276 C |
*CHIP_ENV.NBLOCK :             11F4 C |  CHIP_ENV.NORMAL :             12B0 C |
 CHIP_ENV.NOUPD :              12F6 C |  CHIP_ENV.NSKIP :              11EB C |
 CHIP_ENV.SILNC_3 :            12AC C |  CHIP_ENV.VEDLP :              127E C |
 CHIP_ENV.VLMUCH :             12E2 C |  CHIP_ENV.VLOOP :              11AB C |
 CHIP_ENV.VONLY :              12D8 C |  CHNL_CHIP :                      1 - |
 CHNL_EFFARG :                    6 - |  CHNL_EFFID :                     5 - |
 CHNL_FLAGS :                     0 - |  CHNL_INS :                       3 - |
 CHNL_NOTE :                      2 - |  CHNL_TYPE :                      7 - |
 CHNL_VOL :                       4 - | *CLICKL :                         2 - |
*CLICKM :                         4 - | *CLICKR :                         1 - |
*CLICKS :                         8 - | *CMDINTCLR :                     1A - |
*CMDIRQ_ON :                      2 - |  COM :                            0 - |
*COMM0 :                         20 - | *COMM1 :                         21 - |
*COMM10 :                        2A - | *COMM11 :                        2B - |
*COMM12 :                        2C - | *COMM13 :                        2D - |
*COMM14 :                        2E - | *COMM15 :                        2F - |
*COMM2 :                         22 - | *COMM3 :                         23 - |
*COMM4 :                         24 - | *COMM5 :                         25 - |
*COMM6 :                         26 - | *COMM7 :                         27 - |
*COMM8 :                         28 - | *COMM9 :                         29 - |
 COMMZFIFO :                     40 C |  COMMZREAD :                   1F85 C |
 COMMZROMBLK :                   2F C |  COMMZWRITE :                    2E C |
*COMPMODE :                       0 - | *CONSTPI :        3.141592653589793 - |
 CONTROLLER_1 :    FFFFFFFFFFFFC004 - | *CONTROLLER_2 :    FFFFFFFFFFFFC014 - |
*CS0 :                            0 - | *CS1 :                      2000000 - |
 CS2 :                      4000000 - | *CS3 :                      6000000 - |
*CURRPADDING :                    0 - |  CURRTICKBITS :                1F96 C |
*CUSTOM :                         0 - | *CYCLE :                         32 - |
*DACINS_KICK_TECHNO :         1DFBA C |  DACINS_KICK_TECHNO.END :     1E65C C |
 DACINS_KICK_TECHNO.START :   1DFC0 C |  DACINS_KICK_WEGOT :          20754 C |
 DACINS_KICK_WEGOT.END :      20ECE C |  DACINS_KICK_WEGOT.START :    2075A C |
 DACINS_NADIE :               10000 C |  DACINS_NADIE.END :           1DFBA C |
 DACINS_NADIE.START :         10006 C | *DACINS_SNARE_TECHNO :        1E65C C |
 DACINS_SNARE_TECHNO.END :    20754 C |  DACINS_SNARE_TECHNO.START :  1E662 C |
 DAC_FILL :                      20 C |  DAC_ME :                         8 C |
 DAC_OFF :                     1331 C |  DAC_ON :                      131C C |
 DAC_PLAY :                    1346 C |  DAC_REFILL :                  137A C |
 DAC_REFILL.DACFILL_END :      1439 C |  DAC_REFILL.DACFILL_LOOP :     13F2 C |
 DAC_REFILL.DACFILL_RET :      143C C |  DAC_REFILL.DAC_OVER :         13C8 C |
 DATE :                "02/28/2024" - |  DDACCNTR :                    1F9B C |
 DDACFIFOMID :                 1F97 C |  DDACPNTR :                    1F98 C |
*DISPENBL :                      40 - |  DKY :                            C - |
*DMAENBL :                       10 - | *DOTTEDSTRUCTS :                  0 - |
*DREQCTL :                        6 - | *DREQDEST :                       C - |
*DREQFIFO :                      12 - | *DREQLEN :                       10 - |
*DREQSOURCE :                     8 - |  DRV_LOOP :                      54 C |
 DRV_LOOP.CMND_0 :               EA C |  DRV_LOOP.CMND_1 :               ED C |
 DRV_LOOP.CMND_2 :              106 C |  DRV_LOOP.CMND_3 :              145 C |
 DRV_LOOP.CMND_5 :              17E C |  DRV_LOOP.CMND_6 :              1B6 C |
 DRV_LOOP.CMND_7 :              1EE C |  DRV_LOOP.CMND_RDSLOT :         1FF C |
 DRV_LOOP.GETCBYTEL :            BD C |  DRV_LOOP.GRAB_ARG :             BB C |
 DRV_LOOP.LIST :                 DA C |  DRV_LOOP.NEITHER :              94 C |
 DRV_LOOP.NEXT_CMD :             98 C |  DRV_LOOP.NOBEATS :              7B C |
 DRV_LOOP.NOTICKS :              6E C |  DRV_LOOP.SRCH_DEL :            162 C |
 DRV_LOOP.SRCH_FVOL :           19B C |  DRV_LOOP.SRCH_MODE :           128 C |
 DRV_LOOP.SRCH_SLOT :           212 C |  DRV_LOOP.SRCH_VOL :            1D3 C |
 DRV_LOOP.WRTTO_DEL :           16F C |  DRV_LOOP.WRTTO_FVOL :          1A8 C |
 DRV_LOOP.WRTTO_SLOT :          137 C |  DRV_LOOP.WRTTO_VOL :           1E0 C |
 DTBL_MULTI :                   854 C |  DTBL_SINGL :                   86A C |
 DTBL_SINGL.CHNL_ULNK :        103E C |  DTBL_SINGL.CHNL_ULNKCUT :     1038 C |
 DTBL_SINGL.CHNL_ULNKOFF :     103E C |  DTBL_SINGL.COMN_PANLIST :      DE6 C |
 DTBL_SINGL.DAC_CUT :           BB4 C |  DTBL_SINGL.DAC_OFF :           BBA C |
 DTBL_SINGL.DAC_PITCH :         BBD C |  DTBL_SINGL.D_CONT :            D9F C |
 DTBL_SINGL.EFFC :              D0C C |  DTBL_SINGL.EFFC_D :            D27 C |
 DTBL_SINGL.EFFC_E :            D6A C |  DTBL_SINGL.EFFC_F :            D7F C |
 DTBL_SINGL.EFFC_X :            DA0 C |  DTBL_SINGL.FINE_DOWN :         D42 C |
 DTBL_SINGL.FINE_UP :           D56 C |  DTBL_SINGL.FM_CINDX :          B4E C |
 DTBL_SINGL.FM_CUT :            A98 C |  DTBL_SINGL.FM_HASVOL :         FD2 C |
 DTBL_SINGL.FM_KEYOFF :         AA1 C |  DTBL_SINGL.FM_OFF :            A92 C |
 DTBL_SINGL.FM_SETFREQ :        AC0 C |  DTBL_SINGL.FM_SETRLIST :       EE9 C |
 DTBL_SINGL.FM_TLOFF :          AA9 C |  DTBL_SINGL.FM_WRTALPAN :       B56 C |
 DTBL_SINGL.FM_WRTLVOL :        AD7 C |  DTBL_SINGL.FND_OCT :          1023 C |
 DTBL_SINGL.FROM_PSGN :         964 C |  DTBL_SINGL.GET_OCT :          1018 C |
 DTBL_SINGL.INST :              E17 C |  DTBL_SINGL.INS_DAC :           EF9 C |
 DTBL_SINGL.INS_FM :            E78 C |  DTBL_SINGL.INS_PCM :           F4D C |
 DTBL_SINGL.INS_PSG :           E42 C |  DTBL_SINGL.INS_PSGN :          E3C C |
 DTBL_SINGL.INS_PWM :           F85 C | *DTBL_SINGL.INVL_INS :          E3B C |
 DTBL_SINGL.KEEP_TLMX :         B43 C |  DTBL_SINGL.KYCUT_PSG :         9B0 C |
 DTBL_SINGL.KYCUT_PSGN :        9AD C |  DTBL_SINGL.KYOFF_PSG :         9A3 C |
 DTBL_SINGL.KYOFF_PSGN :        9A0 C |  DTBL_SINGL.KYPSGN_HATOFF :     9BA C |
 DTBL_SINGL.LINKED :            8D4 C |  DTBL_SINGL.MKFM_SET :          A23 C |
*DTBL_SINGL.MKPCM_PROC :        C22 C |  DTBL_SINGL.MKPCM_WRTON :       C1F C |
 DTBL_SINGL.MK_DAC :            B8C C |  DTBL_SINGL.MK_FM :             9C1 C |
 DTBL_SINGL.MK_FMSPC :          A37 C |  DTBL_SINGL.MK_LIST :           90F C |
 DTBL_SINGL.MK_PCM :            BE3 C |  DTBL_SINGL.MK_PSG :            943 C |
 DTBL_SINGL.MK_PSGN :           91D C |  DTBL_SINGL.MK_PWM :            C6C C |
 DTBL_SINGL.MP_RESET :          C1D C |  DTBL_SINGL.NEW_ROMDAT :        EAC C |
*DTBL_SINGL.NOFM_NOTE :         A36 C |  DTBL_SINGL.NORM_DOWN :         D40 C |
 DTBL_SINGL.NORM_UP :           D58 C |  DTBL_SINGL.NOTE :              FC8 C |
 DTBL_SINGL.NOT_DAC :           9E0 C |  DTBL_SINGL.NOT_DSPC :          9F5 C |
 DTBL_SINGL.NO_LFO :            B8B C |  DTBL_SINGL.N_FM :             100E C |
 DTBL_SINGL.N_INDX :            FFA C |  DTBL_SINGL.N_PSGN :           1009 C |
 DTBL_SINGL.N_STFREQ :          FFB C |  DTBL_SINGL.PAN_MCD :           DD0 C |
 DTBL_SINGL.PCM_CUT :           C5F C |  DTBL_SINGL.PCM_EFFC :          C0F C |
 DTBL_SINGL.PCM_NOTE :          C13 C |  DTBL_SINGL.PCM_OFF :           C58 C |
 DTBL_SINGL.PCM_PANLIST :       DEE C |  DTBL_SINGL.PCM_SETCOFF :       C64 C |
 DTBL_SINGL.PSG_KEYON :         98B C |  DTBL_SINGL.PWM_CUT :           CDD C |
 DTBL_SINGL.PWM_OFF :           CD6 C |  DTBL_SINGL.PWM_SETCOFF :       CE2 C |
 DTBL_SINGL.PWV_MUCH :          CB4 C |  DTBL_SINGL.PW_EFFC :           C92 C |
 DTBL_SINGL.PW_NOTE :           C96 C |  DTBL_SINGL.PW_SEND :           C98 C |
 DTBL_SINGL.RCYL_COM :          8BF C |  DTBL_SINGL.READFREQ_PCM :      CEC C |
 DTBL_SINGL.READFREQ_PWM :      CF1 C |  DTBL_SINGL.RES_PAN :           DC6 C |
 DTBL_SINGL.SAME_PATCH :        EE4 C |  DTBL_SINGL.SAVE_ARG :          D94 C |
 DTBL_SINGL.SET_WAVFREQ :       CF4 C |  DTBL_SINGL.SILN_DAC :          8CB C |
 DTBL_SINGL.SILN_FM :           8CE C |  DTBL_SINGL.SILN_PCM :          8A9 C |
 DTBL_SINGL.SILN_PSG :          8A2 C |  DTBL_SINGL.SILN_PSG_N :        89E C |
 DTBL_SINGL.SILN_PWM :          8B5 C |  DTBL_SINGL.SPCREGLIST :        A8A C |
 DTBL_SINGL.TL_DOWN :           AB5 C |  DTBL_SINGL.VMUCH :             99A C |
 DTBL_SINGL.VOLU :              E0E C |  DTBL_SINGL.VOL_DVLD :          D66 C |
 DTBL_SINGL.VPCM_CARRY :        C43 C |  DTBL_SINGL.WRITE_TL :          B3C C |
 DTBL_SINGL.WR_SPC :            A6D C |  DTH :                           20 - |
 DTL :                           1C - |  DWAVEBUFF :                   1D00 C |
*EMU :                            0 - |  EXT_3 :                          C C |
*EXT_4 :                          E C | *FALSE :                          0 - |
*FEN :                            2 - | *FILLDATA :                       8 - |
*FILLLENGTH :                     4 - | *FILLSTART :                      6 - |
 FLG :                           28 - | *FM :                            80 - |
 FMCACH_1 :                    165F C |  FMCACH_2 :                    1687 C |
 FMCACH_3 :                    16AF C |  FMCACH_4 :                    16D7 C |
 FMCACH_5 :                    16FF C |  FMCACH_6 :                    1727 C |
 FMCACH_LIST :                 144B C |  FMFREQ_LIST :                 1459 C |
*FMINS_AMBIENT_3 :             F196 C | *FMINS_AMBIENT_DARK :          F156 C |
*FMINS_AMBIENT_SPOOK :         F176 C | *FMINS_BANJO_PUY :             F016 C |
*FMINS_BASS_1 :                EC56 C | *FMINS_BASS_2 :                EC76 C |
*FMINS_BASS_4 :                ED56 C | *FMINS_BASS_8 :                ED76 C |
*FMINS_BASS_CALM :             EDB6 C | *FMINS_BASS_CLUB :             ED96 C |
*FMINS_BASS_DONNA :            EC96 C |  FMINS_BASS_DUCK :             ED36 C |
*FMINS_BASS_GROOVE :           ECB6 C | *FMINS_BASS_GROOVE_2 :         ECD6 C |
*FMINS_BASS_GROOVE_GEM :       ECF6 C | *FMINS_BASS_ITALO :            ED16 C |
 FMINS_BASS_LOW_1 :            EDD6 C | *FMINS_BASS_OIL :              EDF6 C |
 FMINS_BRASS_EUR :             EED6 C | *FMINS_BRASS_PUY :             EEF6 C |
 FMINS_CLOSEDHAT :             F116 C |  FMINS_DING_1 :                F056 C |
*FMINS_DING_BASEBALL :         EF36 C | *FMINS_DING_TOY :              EFD6 C |
 FMINS_DRUMKICK_GEM :          EF56 C | *FMINS_FLAUTE_CAVE :           EFF6 C |
 FMINS_FM3_EXPLOSION :         EBB6 C | *FMINS_GUITAR_BBALL :          F0B6 C |
 FMINS_HATS_1 :                F0D6 C |  FMINS_HATS_CLOSED :           F0F6 C |
 FMINS_HBEAT_TOM :             F096 C | *FMINS_MARIMBA :               EFB6 C |
*FMINS_ORGAN2 :                EB76 C |  FMINS_ORGAN2A :               EB96 C |
*FMINS_ORGAN_ITO :             EF16 C | *FMINS_PIANOM1 :               EE16 C |
 FMINS_PIANO_AQUA :            EE36 C | *FMINS_PIANO_HARD :            EE56 C |
*FMINS_PSYNTH_PLUS :           F036 C | *FMINS_SEWER_1 :               F136 C |
 FMINS_SP_CLOSEDHAT :          EC06 C | *FMINS_SP_COWBELL :            EC2E C |
 FMINS_SP_OPENHAT :            EBDE C | *FMINS_SYNTH_PLUS :            EE76 C |
*FMINS_TROMBONE_GEM :          F076 C |  FMINS_TRUMPET_1 :             EE96 C |
*FMINS_TRUMPET_2 :             EF76 C |  FMINS_TRUMPET_CARNIVAL :      EEB6 C |
*FMINS_TRUMPET_PUY :           EF96 C |  FMSPECIAL :                   1F84 C |
 FM_AUTOREG :                  1302 C |  FM_SEND_1 :                   1306 C |
 FM_SEND_2 :                   1311 C | *FRAMECTL :                       B - |
*FREEFLAG :                      3F C | *FS :                             1 - |
*FULLPMMU :                       1 - |  GEMADMAPAUSE :                 2CA C |
 GEMADMAPAUSEROM :              2CE C |  GEMADMARESUME :                2CC C |
 GEMADMARESUMEROM :             2D0 C |  GEMAFADETRACK :                314 C |
 GEMAMSTRLISTPOS :               1C C |  GEMAPLAYTRACK :                2EA C |
 GEMASETBEATS :                 344 C |  GEMASETMASTERLIST :            2DC C |
 GEMASETTRACKVOL :              32A C | *GEMASFX_ALL :                 43D4 C |
 GEMASFX_ALL.BLK :             43E2 C |  GEMASFX_ALL.INS :             44A8 C |
 GEMASFX_ALL.PAT :             43E8 C |  GEMASTOPTRACK :                300 C |
 GEMATEST :                     2D2 C |  GEMATRK_ARENA1 :              454A C |
 GEMATRK_ARENA1.INS :          4558 C |  GEMATRK_CRYSTAL :             A132 C |
 GEMATRK_CRYSTAL.BLK :         A140 C |  GEMATRK_CRYSTAL.INS :         B33C C |
 GEMATRK_CRYSTAL.PAT :         A148 C |  GEMATRK_DREAM :               89E2 C |
 GEMATRK_DREAM.BLK :           89F0 C |  GEMATRK_DREAM.INS :           A0BA C |
 GEMATRK_DREAM.PAT :           89FD C |  GEMATRK_MOVEME :              7A0D C |
 GEMATRK_MOVEME.BLK :          7A1B C |  GEMATRK_MOVEME.INS :          894A C |
 GEMATRK_MOVEME.PAT :          7A32 C |  GEMATRK_NADIEMARS :           D908 C |
 GEMATRK_NADIEMARS.BLK :       D916 C |  GEMATRK_NADIEMARS.INST :      EB2E C |
 GEMATRK_NADIEMARS.PATT :      D91E C |  GEMATRK_NADIEMCD :            C65A C |
 GEMATRK_NADIEMCD.BLK :        C668 C |  GEMATRK_NADIEMCD.INST :       D8C0 C |
 GEMATRK_NADIEMCD.PATT :       C670 C |  GEMATRK_NADIEMD :             B36C C |
 GEMATRK_NADIEMD.BLK :         B37A C |  GEMATRK_NADIEMD.INST :        C612 C |
 GEMATRK_NADIEMD.PATT :        B382 C |  GEMATRK_TEST_0 :              44D0 C |
 GEMATRK_TEST_0.BLK :          44E6 C |  GEMATRK_TEST_0.INS :          44DE C |
 GEMATRK_TEST_0.PAT :          44E9 C |  GEMA_INIT :                   105A C |
 GEMA_INIT.END_SETUP :         10C5 C |  GEMA_INIT.SETUP_LIST :        109A C |
 GEMA_INIT.ST_COPY :           10B9 C |  GEMA_LASTBANK :               1440 C |
 GEMA_LASTBANK.WRITE :         1445 C |  GEMA_MASTERLIST :             43B4 C |
 GET_ROMTRCKS :                 5F8 C |  GET_TICK :                    10C6 C |
 GET_TICK.CTNOTICK :           10E3 C |  GLBL_LASTORG :    FFFFFFFFFFFFD204 - |
 GLBL_LASTPC :                 3250 - | *HAS64 :                          1 - |
*HASDSP :                         0 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - | *HBLK :                          40 - |
*HCOUNT :                         5 - |  HEADEROUT :                   1FA4 C |
 HEADEROUT_E :                 1FB2 C | *HINTCLR :                       18 - |
*HINTENBL :                      10 - |  HINT_DEFAULT :                1232 C |
*HIRQ_ON :                        4 - | *HVSTOP :                         2 - |
*INEXTMODE :                      0 - | *INLWORDMODE :                    0 - |
*INMAXMODE :                      0 - | *INSRCMODE :                      0 - |
 INSTLISTOUT :                 1B03 C | *INSUPMODE :                      1 - |
*INTMASK :                        1 - |  JOYA :                          40 - |
 JOYB :                          10 - |  JOYC :                          20 - |
*JOYDOWN :                        2 - | *JOYLEFT :                        4 - |
*JOYMODE :                      800 - | *JOYRIGHT :                       8 - |
*JOYSTART :                      80 - | *JOYUP :                          1 - |
*JOYX :                         400 - | *JOYY :                         200 - |
*JOYZ :                         100 - | *LCHWIDTH :                      34 - |
 LEV :                            4 - | *LISTON :                         3 - |
 LIST_VDPREGS :                 3A4 C | *MACEXP :                         7 - |
*MAPMARS_TEST :                3EE8 C |  MAP_TEST :                    3628 C |
 MARS :                           0 - |  MARSBLOCK :                     37 C |
 MARSCD :                         0 - |  MARSDATA_DEFAULT :           20ECE C |
 MARSUPD :                     1F87 C | *MARS_RAMCODE :                3250 C |
*MARS_RAMCODE_E :              3250 C | *MAX_BLOCKS :                     8 - |
 MAX_BUFFNTRY :                   8 - |  MAX_MDDMATSK :                  18 - |
 MAX_MDOBJ :                     18 - |  MAX_MDOTHER :                  C00 - |
 MAX_MDSYSTEM :                 600 - |  MAX_MDVIDEO :                 2000 - |
 MAX_RCACH :                     20 - |  MAX_SCRNBUFF :                1800 - |
 MAX_SRAMSIZE :                 400 - |  MAX_SYSCODE :                 2000 - |
 MAX_TBLSIZE :                   18 - |  MAX_TRFRPZ :                     8 - |
 MAX_TRKCHN :                    20 - |  MAX_TRKINDX :                   1A - |
 MAX_USERCODE :                8000 - |  MAX_ZCMND :                     10 - |
 MCD :                            0 - |  MCDBLOCK :                      36 C |
 MCDUPD :                      1F88 C | *MCD_COMM_M :                     E - |
*MCD_COMM_S :                     F - | *MCD_DBANK0 :                  3628 C |
*MCD_DCOMM_M :                   10 - | *MCD_DCOMM_S :                   20 - |
*MCD_HINT :                       6 - | *MCD_INTMASK :                   32 - |
*MCD_MEMORY :                     3 - | *MDBANK0 :                     3628 C |
*MDBANK0_E :                  20ECE C |  MDSYS_SINEDATA :              1064 C |
*MD_BANK_SRAM :              A130F1 - |  MD_READMODES :                1236 C |
 MD_READMODES.PICK_MODE :      1252 C |  MD_SCREEN00 :                 3250 C |
*MD_SYSCODE_E :                1296 C |  MODE :                          18 - |
*MODE_FADEIN :                 11B4 C |  MODE_FADEIN.LOOPW :           11DC C |
*MODE_FADEOUT :                11E8 C |  MODE_FADEOUT.LOOPW :          1210 C |
 MODE_INIT :                   1182 C |  MODE_INIT.CLR :               11AC C |
*MOMCPU :                     68000 - | *MOMCPUNAME :               "68000" - |
*MONOWIDTH :                     38 - |  MOUSE_X :                        8 C |
 MOUSE_Y :                        A C | *NESTMAX :                      100 - |
 NIKONA_BUFFLIST :             1591 C |  NIKONA_BUFFLIST_E :           15A9 C |
 OBJECTS_ADD :                  C3C C |  OBJECTS_ADD.CLR :              C5A C |
 OBJECTS_ADD.SEARCH :           C44 C |  OBJECTS_ADD.USE_IT :           C54 C |
 OBJECTS_CLEAR :                BCC C |  OBJECTS_CLEAR.CLR :            BD4 C |
 OBJECTS_CLEAR.CLR_D :          BE2 C |  OBJECTS_RUN :                  BF4 C |
 OBJECTS_RUN.NEXT_ONE :         BFC C |  OBJECTS_RUN.NO_CODE :          C08 C |
*OBJECTS_SET :                  C12 C |  OBJECTS_SET.CLR :              C1C C |
 OBJECTS_SHOW :                 C72 C |  OBJECTS_SHOW.FINISH :          D72 C |
 OBJECTS_SHOW.MK_PZ :           CF0 C |  OBJECTS_SHOW.MK_SPR :          D6C C |
 OBJECTS_SHOW.NEXT :            CC2 C |  OBJECTS_SHOW.NEXTS :           C94 C |
 OBJECTS_SHOW.NO_SPRDRW :       CBA C |  OBJECTS_SHOW.RAN_OUT :         D90 C |
 OBJECTS_SHOW.VRAM_H :          D42 C |  OBJECTS_SHOW.VRAM_V :          D28 C |
 OBJECT_ANIMATE :               E32 C |  OBJECT_ANIMATE.GOTOFRAME :     EAE C |
 OBJECT_ANIMATE.KEEPSPD :       E74 C |  OBJECT_ANIMATE.LASTFRAME :     EB8 C |
 OBJECT_ANIMATE.NOANIM :        EA0 C |  OBJECT_ANIMATE.RETURN :        E9E C |
 OBJECT_ANIMATE.SAMETHING :     E4C C |  OBJECT_ANIMRESET :             EBE C |
 OBJECT_DISPLAY :               D96 C |  OBJECT_DISPLAY.NEXT_PZ :       DD8 C |
 OBJECT_DISPLAY.NO_DMA :        E02 C |  OBJECT_DISPLAY.SRCH :          D9E C |
 OBJECT_DISPLAY.THIS_ONE :      DAA C | *OBJECT_MKSPRPZ :               E04 C |
 OBJECT_MKSPRPZ.NOPE :          E30 C | *OBJECT_SPEED :                 ECE C |
 OBJMAP_SISI :                 4358 C |  OBJPAL_SISI :                 4338 C |
 OBJ_ANIM_ID :                   1C C |  OBJ_ANIM_INDX :                 1A C |
 OBJ_ANIM_SPD :                  20 C |  OBJ_CODE :                       0 C |
 OBJ_DMA :                       10 C |  OBJ_FRAME :                     1E C |
*OBJ_FREE :                      25 C |  OBJ_INDEX :                     21 C |
 OBJ_MAP :                        C C | *OBJ_RAM :                       26 C |
 OBJ_SET :                       22 C | *OBJ_STATUS :                    24 C |
*OBJ_SUBID :                     23 C |  OBJ_VRAM :                      14 C |
 OBJ_X :                          4 C |  OBJ_X_SPD :                     16 C |
 OBJ_Y :                          8 C |  OBJ_Y_SPD :                     18 C |
 ON_HOLD :                        2 C |  ON_PRESS :                       4 C |
*ON_RELEASE :                     6 C | *PACKING :                        0 - |
*PADDING :                        0 - | *PAD_ID :                         0 C |
*PAD_VER :                        1 C | *PALMARS_SABRINA :             4318 C |
*PALMARS_TEST :                4118 C | *PALMODE :                       3E C |
 PARP :                          34 - |  PCMCOM :                      15AB C |
*PEN :                           20 - |  PICO :                           1 - |
 PICO_ENTRY :                   204 C |  PICO_ENTRY.LOOP_RAM :          232 C |
 PICO_ENTRY.WAIT_DMA :          246 C |  PICO_ERRADDR :                 200 C |
 PICO_ERRBUS :                  200 C |  PICO_ERRCHK :                  200 C |
 PICO_ERRILL :                  200 C |  PICO_ERROR :                   200 C |
 PICO_ERROREX :                 200 C |  PICO_ERRPRIVL :                200 C |
 PICO_ERRTRAPV :                200 C |  PICO_ERRZDIV :                 200 C |
 PICO_LINE1010 :                200 C |  PICO_LINE1111 :                200 C |
 PICO_PCMINT :                  202 C |  PICO_TRACE :                   200 C |
 PICO_UNKINT :                  202 C |  PICO_USERINT :                 202 C |
 PROC_CHIPS :                   642 C |  PSGCOM :                      1623 C |
 PSGFREQ_LIST :                1471 C |  PSGHATMODE :                  1F83 C |
*PSG_CTRL :                  C00011 - |  PTMR :                          38 - |
 PVOL :                          30 - |  PWMCOM :                      15EB C |
*PWMCTL :                        31 - | *PWMINTCLR :                     1C - |
*PWMIRQ_ON :                      1 - |
 RAM_FADEMARSDELAY :                                       FFFFFFFFFFFFBDF0 C |
 RAM_FADEMARSINCR :                                        FFFFFFFFFFFFBDEE C |
 RAM_FADEMARSREQ : FFFFFFFFFFFFBDEC C | *RAM_FADEMARSTMR : FFFFFFFFFFFFBDF2 C |
 RAM_FADEMDDELAY : FFFFFFFFFFFFBDE8 C |  RAM_FADEMDINCR :  FFFFFFFFFFFFBDE6 C |
 RAM_FADEMDREQ :   FFFFFFFFFFFFBDE4 C |  RAM_FADEMDTMR :   FFFFFFFFFFFFBDEA C |
 RAM_FRAMECOUNT :  FFFFFFFFFFFFBDD4 C | *RAM_GLBL_FILLER : FFFFFFFFFFFFEA04 C |
 RAM_HORSCROLL :   FFFFFFFFFFFFA004 C |  RAM_INPUTDATA :   FFFFFFFFFFFFC004 C |
*RAM_MDDREQ :      FFFFFFFFFFFFC604 C |  RAM_MDGLOBAL :    FFFFFFFFFFFFEA04 C |
 RAM_MDMARSHINT :  FFFFFFFFFFFFC452 C | *RAM_MDMARSPALFD : FFFFFFFFFFFFAE94 C |
 RAM_MDMARSVINT :  FFFFFFFFFFFFC44C C |
*RAM_MDMARS_DRAWALL :                                      FFFFFFFFFFFFBDF4 C |
 RAM_MDOTHER :     FFFFFFFFFFFFC604 C |  RAM_MDSYSTEM :    FFFFFFFFFFFFC004 C |
 RAM_MDVIDEO :     FFFFFFFFFFFFA004 C |  RAM_MEGACD :              FFFFFD00 - |
 RAM_OBJDISPLIST : FFFFFFFFFFFFBC24 C |  RAM_OBJECTS :     FFFFFFFFFFFFB294 C |
 RAM_PALETTE :     FFFFFFFFFFFFAE14 C |  RAM_PALETTEFD :   FFFFFFFFFFFFB094 C |
*RAM_SAVEDATA :    FFFFFFFFFFFFC044 C |  RAM_SCREENMODE :  FFFFFFFFFFFFC458 C |
 RAM_SCRNBUFF :    FFFFFFFFFFFFD204 C |  RAM_SPRDRWCNTR :  FFFFFFFFFFFFBDD8 C |
 RAM_SPRDRWPZ :    FFFFFFFFFFFFA914 C |  RAM_SPRITES :     FFFFFFFFFFFFA414 C |
 RAM_SPRLINKNUM :  FFFFFFFFFFFFBDDA C |  RAM_STACK :               FFFFFD00 - |
 RAM_SYSRANDSEED : FFFFFFFFFFFFC448 C |  RAM_SYSRANDVAL :  FFFFFFFFFFFFC444 C |
*RAM_SYSTEMCODE :  FFFFFFFFFFFF0000 C | *RAM_USERCODE :    FFFFFFFFFFFF2000 C |
 RAM_VDPDMAINDX :  FFFFFFFFFFFFBDDE C |  RAM_VDPDMALIST :  FFFFFFFFFFFFB114 C |
 RAM_VDPDMAMOD :   FFFFFFFFFFFFBDE0 C | *RAM_VDPEXWRITE :  FFFFFFFFFFFFBDDC C |
 RAM_VDPREGS :     FFFFFFFFFFFFBDF6 C |  RAM_VERSCROLL :   FFFFFFFFFFFFA3C4 C |
 RAM_VIDPRNTLIST : FFFFFFFFFFFFBC54 C |  RAM_VIDPRNTVRAM : FFFFFFFFFFFFBDE2 C |
 RAM_ZCDFLAG_D :           FFFFFF00 - |  RAM_ZSNDBUFF :            FFFFFF00 - |
*RCHWIDTH :                      36 - | *RELAXED :                        0 - |
 ROM_END :                    3C030 C |  RRT :                           14 - |
 SAMPLEHEAD :                  1FB4 C |  SBEATACC :                    1FA0 C |
 SBEATPTCK :                   1FA2 C | *SETVRAM_MIKAMI :               440 - |
 SETVRAM_SISI :                 480 - |  SET_CHIPS :                    624 C |
 SET_CHIPS.TRK_BUFFRS :         62C C | *SHIFT :                          2 - |
 SHRD_BLK :                    45D8 C |  SHRD_PAT :                    45F1 C |
 SIZEOF_INPUT :                  10 C |  SIZEOF_MDGLBL :   FFFFFFFFFFFFEA08 C |
 SIZEOF_MDOBJ :                  66 C |  SIZEOF_MDRAM :    FFFFFFFFFFFFD40C C |
*SIZEOF_MDSYS :    FFFFFFFFFFFFC45A C |  SIZEOF_MDVID :    FFFFFFFFFFFFBE0E C |
*SIZEOF_RAMOTHER : FFFFFFFFFFFFD204 C |  SLV :                           10 - |
*SNDLOCKZ80 :                   272 C |  SNDREQ_ENTER :                 276 C |
*SNDREQ_ENTER.WAIT :            28E C |  SNDREQ_EXIT :                  294 C |
*SNDREQ_SADDR :                 2B4 C |  SNDREQ_SBYTE :                 2BC C |
 SNDREQ_SCMD :                  2A2 C |  SNDREQ_SLONG :                 2B0 C |
 SNDREQ_SWORD :                 2B8 C | *SNDUNLOCKZ80 :                 274 C |
 SOUND_INIT :                   262 C |  SOUND_UPDATE :                 26E C |
*STANDBY :                        3 - | *SYSMARS_ID :                A130EC - |
*SYSMARS_REG :               A15100 - | *SYSMCD_REG :                A12000 - |
*SYSMCD_WRAM :               200000 - |  SYSTEM_DMAENTER_RAM :          F82 C |
 SYSTEM_DMAENTER_ROM :          F8A C |  SYSTEM_DMAEXIT_RAM :           F86 C |
 SYSTEM_DMAEXIT_ROM :           F8E C | *SYSTEM_GRABRAMCODE :          1234 C |
 SYSTEM_INIT :                  EEC C |  SYSTEM_INIT.CLRINPUT :         F16 C |
 SYSTEM_INPUT :                 F92 C |  SYSTEM_INPUT.BAD_Y :           FE2 C |
 SYSTEM_INPUT.NO_BIT :          FF4 C |  SYSTEM_INPUT.PAGE_IT :         FEE C |
 SYSTEM_INPUT.X_VALID :         FCA C | *SYSTEM_RANDOM :                FFC C |
 SYSTEM_RANDOM.GOOD_S :        100A C |  SYSTEM_RENDER :                F3C C |
 SYSTEM_RENDER.FORGOT_DISP :    F80 C |  SYSTEM_RENDER.WAIT_IN :        F5E C |
 SYSTEM_RENDER.WAIT_LAG :       F46 C |  SYSTEM_SETINTS :              1164 C |
 SYSTEM_SETINTS.NOHINT :       1174 C |  SYSTEM_SETINTS.NOVINT :       116C C |
*SYSTEM_SINEWAVE :             1046 C |  SYSTEM_SINEWAVE.DONT_NEG :    1062 C |
*SYSTEM_SINEWAVE_COS :         1026 C |
 SYSTEM_SINEWAVE_COS.DONT_NEG :                                        1040 C |
 SYSTEM_SRAMINIT :             1176 C | *SYSTEM_SRAMLOAD :             117E C |
*SYSTEM_SRAMSAVE :             117A C | *SYS_CTRL_1 :                A10009 - |
*SYS_CTRL_2 :                A1000B - | *SYS_CTRL_3 :                A1000D - |
*SYS_DATA_1 :                A10003 - | *SYS_DATA_2 :                A10005 - |
*SYS_DATA_3 :                A10007 - | *SYS_EXRAM :                 200000 - |
*SYS_IO :                    A10001 - | *SYS_TMSS :                  A14000 - |
 TBLBUFF_READ :                 66B C |  TBLBUFF_READ.CHK_PSG :         788 C |
 TBLBUFF_READ.CLRFULL :         84A C |  TBLBUFF_READ.DO_CHIP :         6D5 C |
 TBLBUFF_READ.FIRST_INS :       6F8 C |  TBLBUFF_READ.GRAB_LINK :       73A C |
 TBLBUFF_READ.HAS_INDX :        6B1 C |  TBLBUFF_READ.INVLDL :          771 C |
 TBLBUFF_READ.KEEP_IT :         71C C |  TBLBUFF_READ.L_HIPRIO :        7FC C |
 TBLBUFF_READ.NEW_CHIP :        7AF C |  TBLBUFF_READ.NEW_LINK :        7F9 C |
 TBLBUFF_READ.NEW_LINK_O :      7F1 C |  TBLBUFF_READ.NEW_LINK_Z :      7ED C |
 TBLBUFF_READ.NEXTSRCH_TBL :    7E6 C |  TBLBUFF_READ.NEXT_INDX :       6A2 C |
 TBLBUFF_READ.NEXT_PRIO :       7CF C |  TBLBUFF_READ.NO_INDX :         6CD C |
 TBLBUFF_READ.PASS_2 :          7CE C |  TBLBUFF_READ.PICK_TBL :        81F C |
 TBLBUFF_READ.REFILL :          7AC C |  TBLBUFF_READ.REROLL :          779 C |
 TBLBUFF_READ.RESET_LINK :      839 C |  TBLBUFF_READ.RNOT_PSG :        7AA C |
 TBLBUFF_READ.SET_ASFULL :      81C C |  TBLBUFF_READ.SINGL_FREE :      80A C |
 TBLBUFF_READ.SINGL_LINK :      79F C |  TBLBUFF_READ.SRCH_FREE :       7BE C |
 TBLBUFF_READ.SRCH_LINK :       758 C |  TBLBUFF_READ.SRCH_LLOOP :      762 C |
 TBLBUFF_READ.TRACK_CONT :      68B C |  TBLBUFF_READ.VALID :           6A0 C |
 TBLFM :                       18F9 C |  TBLFM3 :                      1959 C |
 TBLFM6 :                      1971 C |  TBLLIST :                     1887 C |
 TBLPCM :                      198B C |  TBLPSG :                      1897 C |
 TBLPSGN :                     18E1 C |  TBLPWM :                      1A4D C |
 TH :                      20000000 - |  TICKCNT :                     1F82 C |
 TICKFLAG :                    1F81 C |  TICKSPSET :                   1F80 C |
 TIME :               "03:57:58 AM" - | *TIMERCTL :                      30 - |
*TMR :                           2C - |  TRACK_OUT :                    5B3 C |
 TRACK_OUT.INDX_DEL :           5C1 C |  TRACK_OUT.NOTHIN :             5EF C |
 TRANSFERROM :                 10E7 C |  TRANSFERROM.DOUBLE :          110A C |
 TRANSFERROM.FROM_RAM :        112E C |  TRANSFERROM.TRANSFER :        114C C |
 TRANSFERROM.WAIT :            1145 C |  TRANSFERROM.X68KLAST :        1185 C |
 TRANSFERROM.X68KLOOP :        1171 C |  TRANSFERROM.X68KLPWT :        1193 C |
 TRANSFERROM.X68KNOCARRY :     1128 C |  TRANSFERROM.X68KPWTLP :       1195 C |
 TRKBLKS_0 :                   186F C |  TRKBLKS_1 :                   1877 C |
 TRKBLKS_2 :                   187F C |  TRKBUFF_0 :                   17AF C |
 TRKBUFF_1 :                   17EF C |  TRKBUFF_2 :                   182F C |
 TRKCACH_0 :                   1F00 C |  TRKCACH_1 :                   1F20 C |
 TRKCACH_2 :                   1F40 C | *TRKCACH_3 :                   1F60 C |
 TRKCHNLS :                    1E00 C |  TRKHDRS_0 :                   174F C |
 TRKHDRS_1 :                   176F C |  TRKHDRS_2 :                   178F C |
 TRKINFOCACH :                 1AF7 C | *TRKLISTPAGE :                 1F86 C |
 TRK_BANKBLK :                   17 - |  TRK_BANKHEADS :                 16 - |
 TRK_BANKINS :                   15 - |  TRK_BLOCKS :                     4 - |
 TRK_CACH :                       8 - |  TRK_CACHHALF :                  10 - |
 TRK_CHNINDX :                   26 - |  TRK_CURRBLK :                   13 - |
 TRK_MAXCHNL :                   18 - |  TRK_PATT :                       6 - |
 TRK_PRIORITY :                  14 - |  TRK_READ :                       A - |
 TRK_ROMBLKS :                   23 - |  TRK_ROMINST :                   20 - |
 TRK_ROMPATT :                   1D - |  TRK_ROMPATTREAD :               1A - |
 TRK_ROWPAUSE :                  11 - |  TRK_ROWS :                       C - |
 TRK_SEQID :                      1 - |  TRK_SETBLK :                     2 - |
 TRK_STATUS :                     0 - |  TRK_TICKSET :                    3 - |
 TRK_TICKTMR :                   12 - |  TRK_VOLFDTARGET :               19 - |
 TRK_VOLMASTER :                  E - | *TRUE :                           1 - |
*TVMODE :                         0 - |  UPD_TRACK :                    225 C |
 UPD_TRACK.CHNL_FREE :          33F C |  UPD_TRACK.CONT_CHNL :          34A C |
 UPD_TRACK.DECROW :             2EE C |  UPD_TRACK.DECROW_E :           2F1 C |
 UPD_TRACK.EFFECT_FILL :        51A C |  UPD_TRACK.EFF_A :              3C4 C |
 UPD_TRACK.EFF_B :              3D5 C |  UPD_TRACK.EFF_C :              3F3 C |
 UPD_TRACK.EXIT :               2E2 C |  UPD_TRACK.FADE_OUT :           26F C |
 UPD_TRACK.FIRST_BLK :          44A C |  UPD_TRACK.FIRST_FILL :         521 C |
 UPD_TRACK.FIRST_HEAD :         492 C |  UPD_TRACK.GRAB_RHEAD :         5A0 C |
 UPD_TRACK.HAS_NOTE :           2F9 C |  UPD_TRACK.INC_CPATT :          3F6 C |
 UPD_TRACK.KEEP_BLK :           468 C |  UPD_TRACK.KEEP_IT :            4B8 C |
 UPD_TRACK.KEEP_VOL :           285 C |  UPD_TRACK.NEXT_CHNL :          324 C |
 UPD_TRACK.NEXT_NOTE :          2D2 C |  UPD_TRACK.NO_EFF :             390 C |
 UPD_TRACK.NO_GLBL :            54A C |  UPD_TRACK.NO_INS :             372 C |
 UPD_TRACK.NO_NOTE :            367 C |  UPD_TRACK.NO_VOL :             37D C |
 UPD_TRACK.OLD_TYPE :           35B C |  UPD_TRACK.RAN_OUT :            404 C |
 UPD_TRACK.READ_TRACK :         242 C |  UPD_TRACK.ROW_ACTIVE :         2CB C |
 UPD_TRACK.SET_TRACK :          42E C |  UPD_TRACK.SFXMD :              28F C |
 UPD_TRACK.SRCH_NEW :           31F C |  UPD_TRACK.TOO_MUCH :           27B C |
 UPD_TRACK.TRACK_END :          507 C |  UPD_TRACK.TRK_BUFFRS :         22D C |
 VARNULLVRAM :                  7FF - |  VARPRINTPAL :                    3 - |
 VARPRINTVRAM :                 580 - | *VBLK :                          80 - |
*VDPSTS :                         A - |  VDP_CTRL :                  C00004 - |
 VDP_DATA :                  C00000 - | *VERSION :                     142F - |
 VIDEO_CLEAR :                  3D8 C | *VIDEO_CLEARSCREEN :            3D8 C |
 VIDEO_CLEARSCREEN.PNEXT :      44A C |  VIDEO_CLEARSCREEN.SNEXT :      438 C |
 VIDEO_CLEARSCREEN.XNEXT :      41C C |  VIDEO_CLEARSCREEN.YNEXT :      42A C |
*VIDEO_COPY :                   750 C |  VIDEO_COPY.DMAW :              764 C |
 VIDEO_COPY.DMA_W :             7BC C | *VIDEO_DMABLAST :               91C C |
 VIDEO_DMABLAST.END :           960 C |  VIDEO_DMABLAST.EXIT :          96E C |
 VIDEO_DMABLAST.NEXT :          944 C |  VIDEO_DMAMKENTRY :             62C C |
 VIDEO_DMAMKENTRY.MK_SET :      668 C |  VIDEO_DMAMKENTRY.NORMAL :      662 C |
 VIDEO_DMAMKENTRY.RAN_OUT :     6D8 C |  VIDEO_DOPALFADE :              4E6 C |
 VIDEO_DOPALFADE.ACTIVE :       502 C |  VIDEO_DOPALFADE.FADE_DONE :    50A C |
 VIDEO_DOPALFADE.FADE_IN :      50C C |  VIDEO_DOPALFADE.FADE_LIST :    504 C |
 VIDEO_DOPALFADE.FADE_OUT :     5AE C |  VIDEO_DOPALFADE.NO_BLU :       586 C |
 VIDEO_DOPALFADE.NO_BLU_O :     608 C |  VIDEO_DOPALFADE.NO_FNSH :      59E C |
 VIDEO_DOPALFADE.NO_FNSH_O :    61C C |  VIDEO_DOPALFADE.NO_GRN :       566 C |
 VIDEO_DOPALFADE.NO_GRN_O :     5F0 C |  VIDEO_DOPALFADE.NO_MOVE :      5AC C |
 VIDEO_DOPALFADE.NO_MOVE_O :    62A C |  VIDEO_DOPALFADE.NO_RED :       546 C |
 VIDEO_DOPALFADE.NO_RED_O :     5D8 C |  VIDEO_DOPALFADE.NXT_PAL :      524 C |
 VIDEO_DOPALFADE.NXT_PAL_O :    5C0 C |  VIDEO_FADEIN :                 454 C |
*VIDEO_FADEOUT :                47A C |  VIDEO_FADEPAL :                4B8 C |
*VIDEO_FADEPAL_MARS :           974 C |  VIDEO_FILL :                   6DA C |
 VIDEO_FILL.DMAW :              6EE C |  VIDEO_FILL.DMA_W :             738 C |
 VIDEO_INIT :                   35A C |  VIDEO_INIT.CLRRAM :            366 C |
 VIDEO_INIT.LOOP :              37E C |  VIDEO_LOADART :                7D4 C |
*VIDEO_LOADART.FROM_RAM :       83E C |  VIDEO_LOADART.MK_SET :         810 C |
 VIDEO_LOADART.NORMAL :         80A C |  VIDEO_LOADART.SHARED_SETUP :   840 C |
 VIDEO_LOADMAP :                978 C |  VIDEO_LOADMAP.CONT :           99E C |
 VIDEO_LOADMAP.NODBLE :         9BC C |  VIDEO_LOADMAP.NONULL :         99C C |
 VIDEO_LOADMAP.XLOOP :          98E C |  VIDEO_LOADMAP.YLOOP :          984 C |
 VIDEO_LOADPAL :                4C2 C | *VIDEO_MARSGFXMODE :            970 C |
*VIDEO_MARSPALFADE :            976 C | *VIDEO_MARS_SYNCFRAME :         972 C |
 VIDEO_PRINT :                  9F8 C |  VIDEO_PRINT.DONIBL :           B14 C |
 VIDEO_PRINT.EXIT :             A84 C |  VIDEO_PRINT.ISBYTE :           A4E C |
 VIDEO_PRINT.ISLONG :           A72 C |  VIDEO_PRINT.ISWORD :           A60 C |
 VIDEO_PRINT.LNGLOOP :          B04 C |  VIDEO_PRINT.LOOP :             A10 C |
 VIDEO_PRINT.LOWR :             B24 C |  VIDEO_PRINT.NEWJUMP :          A0A C |
 VIDEO_PRINT.NEXT :             A4A C |  VIDEO_PRINT.NEXTV :            A8E C |
 VIDEO_PRINT.NOTHING :          B30 C |  VIDEO_PRINT.PUTTEXT :          A3C C |
 VIDEO_PRINT.VBYTE :            AC0 C |  VIDEO_PRINT.VLONG :            B0C C |
 VIDEO_PRINT.VWORD :            AE2 C |  VIDEO_PRINTINIT :              9CE C |
*VIDEO_PRINTPAL :               9E8 C |  VIDEO_RENDER :                 888 C |
 VIDEO_RUNFADE :                4B0 C |  VIDEO_UPDATE :                 386 C |
*VIDEO_UPDATE.EXIT :            3A2 C |  VIDEO_UPDATE.LOOP :            396 C |
 VIDEO_WAITFADE :               4A0 C |  VIDMD_PAL :                    4C6 C |
 VIDMD_PAL.LOOP :               4DE C |  VID_PICKLAYER :                B36 C |
 VID_PICKLAYER.GOLYR :          B80 C |  VID_PICKLAYER.NOWD :           B6A C |
 VID_PICKLAYER.PLAWND :         B5C C |  VID_PICKLAYER.THISSZ :         BA0 C |
 VID_PICKLAYER.THISSZJ :        BC8 C | *VINTCLR :                       16 - |
*VINTENBL :                      20 - |  VINT_DEFAULT :                121C C |
*VIRQ_ON :                        8 - | *VRESINTCLR :                    14 - |
 WAVE_FLAGS :                  1F94 C |  WAVE_LEN :                    1F8C C |
 WAVE_LOOP :                   1F8F C |  WAVE_PITCH :                  1F92 C |
*WAVE_PRIORITY :               1F95 C |  WAVE_START :                  1F89 C |
 WAVFREQ_CDPCM :               1531 C |  WAVFREQ_LIST :                14D1 C |
 X68KSRCLSB :                  1F9E C |  X68KSRCMID :                  1F9F C |
*YM_CTRL_1 :                 A04000 - | *YM_CTRL_2 :                 A04002 - |
*YM_DATA_1 :                 A04001 - | *YM_DATA_2 :                 A04003 - |
*Z80SYNTAX :                      0 - | *Z80_BUS :                   A11100 - |
*Z80_CODE :                    1296 C | *Z80_CODE_END :                3250 C |
 Z80_CPU :                   A00000 - |  Z80_INIT :                      50 C |
*Z80_RESET :                 A11200 - | *ZBANK :                       6000 - |
 ZDRVFIFO :                      40 - |  ZDRVFWRT :                      2E - |
*ZDRVMARSBLK :                   37 - | *ZDRVMCDBLK :                    36 - |
*ZDRVRAMLEN :                    30 - | *ZDRVRAMSRC :                    35 - |
*ZDRVROMBLK :                    2F - | *ZMARS_SEND :                  1059 C |
*ZOPCEX :                         8 - |  ZOPCEXX :                       D9 - |
*ZOPCNOP :                        0 - |  ZOPCPUSHAF :                    F5 - |
 ZOPCRET :                       C9 - |  ZPSG_CTRL :                   7F11 - |
 ZSET_TESTME :                    0 - |  ZYM_CTRL_1 :                  4000 - |
 ZYM_CTRL_2 :                  4002 - |  ZYM_DATA_1 :                  4001 - |
 ZYM_DATA_2 :                  4003 - | *_CCR :                    FFFFFE92 - |
*_DMACHANNEL0 :            FFFFFF8C - | *_DMACHANNEL1 :            FFFFFF9C - |
*_DMACOUNT0 :              FFFFFF88 - | *_DMACOUNT1 :              FFFFFF98 - |
*_DMADEST0 :               FFFFFF84 - | *_DMADEST1 :               FFFFFF94 - |
*_DMAOPERATION :           FFFFFFB0 - | *_DMAREQACK0 :             FFFFFFB4 - |
*_DMAREQACK1 :             FFFFFFB8 - | *_DMASOURCE0 :             FFFFFF80 - |
*_DMASOURCE1 :             FFFFFF90 - | *_DMAVECTORE0 :            FFFFFFA4 - |
*_DMAVECTORE1 :            FFFFFFAC - | *_DMAVECTORN0 :            FFFFFFA0 - |
*_DMAVECTORN1 :            FFFFFFA8 - | *_FRAMEBUFFER :            24000000 - |
*_FRC_H :                         2 - | *_FRC_L :                         3 - |
*_FRT :                    FFFFFE10 - | *_HRH :                    FFFFFF10 - |
*_HRL :                    FFFFFF14 - | *_HRL32 :                  FFFFFF04 - |
*_JR :                     FFFFFF00 - | *_OCR_H :                         4 - |
*_OCR_L :                         5 - | *_OVERWRITE :              24020000 - |
*_PALETTE :                20004200 - | *_SERIAL :                 FFFFFE00 - |
*_SYSREG :                 20004000 - | *_TCR :                           6 - |
*_TCSR :                          1 - | *_TIER :                          0 - |
*_TOCR :                          7 - | *_VDPREG :                 20004100 - |

   1079 symbols
    317 unused symbols

 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 4 - 02/28/2024 03:57:58 AM


  Defined Macros:
  ---------------

DATA_BKEND                            | DATA_BKSET                           
ENDSTRCT                              | ERREPORT                             
GEMAHEAD                              | GEMATRK                              
GINSDAC                               | GINSFM                               
GINSFM3                               | GINSNULL                             
GINSPCM                               | GINSPSG                              
GINSPSGN                              | GINSPWM                              
GSMPHEAD                              | ISO_FILE                             
ISO_SETFS                             | REPORT                               
ROMPAD                                | SCREEN_CODE                          
SDRAM_BKEND                           | SDRAM_BKSET                          
SET_DBANKS                            | STRCT                                
VDP_SHOWME                            |

     25 macros

 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 5 - 02/28/2024 03:57:58 AM


  Defined Functions:
  ------------------

NOTZ80                                | MAP_SIZE                             
CELL_VRAM                             | LOCATE                               

 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 6 - 02/28/2024 03:57:58 AM


  Code Pages:
  ----------

STANDARD (0 changed characters)

1 code page

0.14 seconds assembly time

  11311 lines source file
  11880 lines incl. macro expansions
      5 passes
      0 errors
      0 warnings
