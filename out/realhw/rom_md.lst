 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 1 - 03/05/2024 11:49:23 PM


       1/       0 :                     ; ===========================================================================
       2/       0 :                     ; NIKONA MD 16-BIT/32-BIT SDK
       3/       0 :                     ; by GenesisFan64 2023-2024
       4/       0 :                     ;
       5/       0 :                     ; For developing games on the Genesis-family of systems:
       6/       0 :                     ; Genesis only, Sega CD, Sega 32X, Sega CD32X and Sega Pico
       7/       0 :                     ;
       8/       0 :                     ; Assemble with a modified AS Macro Assembler by flamewing
       9/       0 :                     ; and a custom version of p2bin:
      10/       0 :                     ;
      11/       0 :                     ; asl main.asm -i "." -olist ROM_list.lst -q -xx -A -L -D (flags=value)
      12/       0 :                     ; p2bin -p=00 main.p ROM.bin
      13/       0 :                     ;
      14/       0 :                     ; ASSEMBLER FLAGS:
      15/       0 :                     ; MCD,MARS,MARSCD,PICO,CDREGION,EMU
      16/       0 :                     
      17/       0 :                     ; * System targets *
      18/       0 :                     ; ONLY enable ONE TARGET at the time (as 1)
      19/       0 :                     ; and set the others to 0
      20/       0 :                     ;    MCD - Sega CD
      21/       0 :                     ;   MARS - Sega 32X
      22/       0 :                     ; MARSCD - Sega CD32X
      23/       0 :                     ;   PICO - Sega Pico
      24/       0 :                     ; The code builds to stock Genesis by default.
      25/       0 :                     ;
      26/       0 :                     ; CDREGION - SEGACD/CD32X ONLY: Set ROM region
      27/       0 :                     ;            0=Japan 1=USA 2=Europe
      28/       0 :                     ;      EMU - EMULATOR PATCHES
      29/       0 :                     ;            0=Real hardware, 1=Run on emulator
      30/       0 :                     ;
      31/       0 :                     ; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣴⣶⡿⠿⠿⠿⣶⣦⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀
      32/       0 :                     ; ⠀⠀⠀⠀⠀⠀⢀⣠⣶⢟⣿⠟⠁⢰⢋⣽⡆⠈⠙⣿⡿⣶⣄⡀⠀⠀⠀⠀⠀⠀
      33/       0 :                     ; ⠀⠀⠀⠀⣠⣴⠟⠋⢠⣾⠋⠀⣀⠘⠿⠿⠃⣀⠀⠈⣿⡄⠙⠻⣦⣄⠀⠀⠀⠀
      34/       0 :                     ; ⠀⢀⣴⡿⠋⠁⠀⢀⣼⠏⠺⠛⠛⠻⠂⠐⠟⠛⠛⠗⠘⣷⡀⠀⠈⠙⢿⣦⡀⠀
      35/       0 :                     ; ⣴⡟⢁⣀⣠⣤⡾⢿⡟⠀⠀⠀⠘⢷⠾⠷⡾⠃⠀⠀⠀⢻⡿⢷⣤⣄⣀⡈⢻⣦
      36/       0 :                     ; ⠙⠛⠛⠋⠉⠁⠀⢸⡇⠀⠀⢠⣄⠀⠀⠀⠀⣠⡄⠀⠀⢸⡇⠀⠈⠉⠙⠛⠛⠋
      37/       0 :                     ; ⠀⠀⠀⠀⠀⠀⠀⢸⡇⢾⣦⣀⣹⡧⠀⠀⢼⣏⣀⣴⡷⢸⡇⠀⠀⠀⠀⠀⠀⠀
      38/       0 :                     ; ⠀⠀⠀⠀⠀⠀⠀⠸⣧⡀⠈⠛⠛⠁⠀⠀⠈⠛⠛⠁⢀⣼⠇⠀⠀⠀⠀⠀⠀⠀
      39/       0 :                     ; ⠀⠀⠀⠀⠀⠀⠀⢀⣘⣿⣶⣤⣀⣀⣀⣀⣀⣀⣤⣶⣿⣃⠀⠀⠀⠀⠀⠀⠀⠀
      40/       0 :                     ; ⠀⠀⠀⠀⠀⣠⡶⠟⠋⢉⣀⣽⠿⠉⠉⠉⠹⢿⣍⣈⠉⠛⠷⣦⡀⠀⠀⠀⠀⠀
      41/       0 :                     ; ⠀⠀⠀⠀⢾⣯⣤⣴⡾⠟⠋⠁⠀⠀⠀⠀⠀⠀⠉⠛⠷⣶⣤⣬⣿⠀⠀⠀⠀⠀
      42/       0 :                     ; ⠀⠀⠀⠀⠀⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠁⠀⠀⠀⠀⠀
      43/       0 :                     ; ===========================================================================
      44/       0 :                     
      45/       0 :                     ; ====================================================================
      46/       0 :                     ; ----------------------------------------------------------------
      47/       0 :                     ; USER SETTINGS
      48/       0 :                     ; ----------------------------------------------------------------
      49/       0 :                     
      50/       0 :                     ; --------------------------------------------------------
      51/       0 :                     ; 68000 RAM SIZES (MAIN-CPU)
      52/       0 :                     ;
      53/       0 :                     ; MAX_SysCode, MAX_UserCode are only used in Sega CD
      54/       0 :                     ; Sega 32X and CD32X.
      55/       0 :                     ; These sections are free to use on stock Genesis
      56/       0 :                     ; and Pico in case you are not interested on the add-ons.
      57/       0 :                     ;
      58/       0 :                     ; RESERVED RAM ADDRESSES:
      59/       0 :                     ; $FFFB00-$FFFD00 | Stack area a7
      60/       0 :                     ; $FFFD00-$FFFDFF | RESERVED for the Sega CD Vector jumps
 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 2 - 03/05/2024 11:49:23 PM


      61/       0 :                     ;                   but free to use if running on
      62/       0 :                     ;                   cartridge ONLY: Genesis,32X,Pico.
      63/       0 :                     ; $FFFE00-$FFFEFF | RESERVED for Sega CD for the BIOS
      64/       0 :                     ;                   BUT this might free to use after
      65/       0 :                     ;                   booting.
      66/       0 :                     ;                   ** NEEDS testing **
      67/       0 :                     ;                   Free on cartridge
      68/       0 :                     ; $FFFF00-$FFFFFF | RESERVED for the Sound Driver, ALL.
      69/       0 :                     ;                   The Z80 driver writes to this area
      70/       0 :                     ;                   This area will posibilly be used
      71/       0 :                     ;                   for the 68k version of GEMA for
      72/       0 :                     ;                   the Pico.
      73/       0 :                     ; --------------------------------------------------------
      74/       0 :                     
      75/       0 : =$2000               MAX_SysCode	equ $2000	; ** CD/32X/CD32X ONLY ** Common routines
      76/       0 : =$8000               MAX_UserCode	equ $8000	; ** CD/32X/CD32X ONLY ** Current screen code and few data
      77/       0 : =$1800               MAX_ScrnBuff	equ $1800	; Current screen's RAM buffer
      78/       0 : =$2000               MAX_MdVideo	equ $2000	; Video cache'd RAM for visuals, registers, etc.
      79/       0 : =$600                MAX_MdSystem	equ $0600	; Internal lib stuff and a safe copy of save data for reading/writing
      80/       0 : =$C00                MAX_MdOther	equ $0C00	; Add-on stuff
      81/       0 :                     
      82/       0 :                     ; ====================================================================
      83/       0 :                     
      84/       0 :                     		org 0
      85/       0 :                     		cpu 		68000		; Starting CPU is 68000
      86/       0 :                     		padding		off		; Dont pad dc.b
      87/       0 :                     		listing 	purecode	; Want listing file
      88/       0 :                     		supmode 	on 		; Supervisor mode (68K)
      89/       0 :                     		dottedstructs	off
      90/       0 :                     		page 		0
      91/       0 :                     
      92/       0 :                     ; ====================================================================
      93/       0 :                     ; ----------------------------------------------------------------
      94/       0 :                     ; Includes
      95/       0 :                     ; ----------------------------------------------------------------
      96/       0 :                     
      97/       0 :                     		include	"macros.asm"		; Assembler macros
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; -------------------------------------------------------------------
(1)    3/       0 :                     ; MACROS section
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; THIS MUST BE INCLUDED AT START OF THE CODE.
(1)    6/       0 :                     ; -------------------------------------------------------------------
(1)    7/       0 :                     
(1)    8/       0 :                     ; ====================================================================
(1)    9/       0 :                     ; ------------------------------------------------------------
(1)   10/       0 :                     ; AS Functions
(1)   11/       0 :                     ; ------------------------------------------------------------
(1)   12/       0 :                     
(1)   13/       0 :                     locate		function a,b,c,(b&$FF)|(a<<8&$FF00)|(c<<16&$FF0000)	; VDP locate: X pos|Y pos|Layer for some video
(1)   14/       0 :                     cell_vram	function a,(a<<5)					; Vram position in 8x8 CELLS
(1)   15/       0 :                     map_size	function l,r,(((l-1)/8)<<16&$FFFF0000|((r-1)/8)&$FFFF)	; Full w/h sizes, for cell sizes use doubleword
(1)   16/       0 :                     ; md_ramloc	function x,-(-x)&$FFFFFFFF
(1)   17/       0 :                     
(1)   18/       0 :                     ; ====================================================================
(1)   19/       0 :                     ; ------------------------------------------------------------
(1)   20/       0 :                     ; Macros
(1)   21/       0 :                     ; ------------------------------------------------------------
(1)   22/       0 :                     
(1)   23/       0 : =$0                  currPadding	set 0
(1)   24/       0 :                     notZ80		function cpu,(cpu<>128)&&(cpu<>32988)
(1)   25/       0 :                     
(1)   26/       0 :                     ; --------------------------------------------
(1)   27/       0 :                     ; Custom struct function
(1)   28/       0 :                     ;
(1)   29/       0 :                     ; (Doesn't work on Z80)
(1)   30/       0 :                     ; --------------------------------------------
(1)   31/       0 :                     
(1)   32/       0 :                     strct		macro thisinput			; Reserve memory address
(1)   33/       0 :                     GLBL_LASTPC	set *
(1)   34/       0 :                     		dephase
(1)   35/       0 :                     		phase thisinput
(1)   36/       0 :                     GLBL_LASTORG	set *
(1)   37/       0 :                     		endm
(1)   38/       0 :                     
(1)   39/       0 :                     ; --------------------------------------------
(1)   40/       0 :                     ; Finish struct
(1)   41/       0 :                     ; --------------------------------------------
(1)   42/       0 :                     
(1)   43/       0 :                     endstrct	macro				; Then finish the custom struct.
(1)   44/       0 :                     		org GLBL_LASTORG
(1)   45/       0 :                     		phase GLBL_LASTPC
(1)   46/       0 :                     		endm
(1)   47/       0 :                     
(1)   48/       0 :                     ; --------------------------------------------
(1)   49/       0 :                     ; Report memory usage
(1)   50/       0 :                     ; --------------------------------------------
(1)   51/       0 :                     
(1)   52/       0 :                     report		macro text,dis,dat
(1)   53/       0 :                     	if MOMPASS == 2
(1)   54/       0 :                     		if dat == -1
(1)   55/       0 :                     			message text+": \{(dis)&$FFFFFF}"
(1)   56/       0 :                     		else
(1)   57/       0 :                     			if dis > dat
(1)   58/       0 :                     				warning "RAN OUT OF "+text+" SPACE (\{(dis)&$FFFFFF} of \{(dat)&$FFFFFF})"
(1)   59/       0 :                     			else
(1)   60/       0 :                     				message text+" uses \{(dis)&$FFFFFF} of \{(dat)&$FFFFFF}"
(1)   61/       0 :                     			endif
(1)   62/       0 :                     		endif
(1)   63/       0 :                     	endif
(1)   64/       0 :                     		endm
(1)   65/       0 :                     
(1)   66/       0 :                     ; --------------------------------------------
(1)   67/       0 :                     ; Same as report but only show on error
(1)   68/       0 :                     ; --------------------------------------------
(1)   69/       0 :                     
(1)   70/       0 :                     erreport	macro text,dis,dat
(1)   71/       0 :                     	if MOMPASS == 2
(1)   72/       0 :                     		if dat == -1
(1)   73/       0 :                     			message text+": \{(dis)&$FFFFFF}"
(1)   74/       0 :                     		else
(1)   75/       0 :                     			if dis > dat
(1)   76/       0 :                     				error "RAN OUT OF "+text+" (\{(dis)&$FFFFFF} of \{(dat)&$FFFFFF})"
(1)   77/       0 :                     ; 			else
(1)   78/       0 :                     ; 				message text+" uses \{(dis)&$FFFFFF} of \{(dat)&$FFFFFF}"
(1)   79/       0 :                     			endif
(1)   80/       0 :                     		endif
(1)   81/       0 :                     	endif
(1)   82/       0 :                     		endm
(1)   83/       0 :                     
(1)   84/       0 :                     ; --------------------------------------------
(1)   85/       0 :                     ; ZERO Fill padding
(1)   86/       0 :                     ; --------------------------------------------
(1)   87/       0 :                     
(1)   88/       0 :                     rompad		macro address			; Zero fill
(1)   89/       0 :                     diff := address - *
(1)   90/       0 :                     		if diff < 0
(1)   91/       0 :                     			error "too much stuff before org $\{address} ($\{(-diff)} bytes)"
(1)   92/       0 :                     		else
(1)   93/       0 :                     			while diff > 1024
(1)   94/       0 :                     				; AS can only generate 1 kb of code on a single line
(1)   95/       0 :                     				dc.b [1024]0
(1)   96/       0 :                     diff := diff - 1024
(1)   97/       0 :                     			endm
(1)   98/       0 :                     			dc.b [diff]0
(1)   99/       0 :                     		endif
(1)  100/       0 :                     	endm
(1)  101/       0 :                     
(1)  102/       0 :                     ; ====================================================================
(1)  103/       0 :                     ; ------------------------------------------------------------
(1)  104/       0 :                     ; ISO filesystem macros
(1)  105/       0 :                     ; ------------------------------------------------------------
(1)  106/       0 :                     
(1)  107/       0 :                     ; Set a ISO file
(1)  108/       0 :                     ; NOTE: a valid ISO head is required from $8000 to $B7FF
(1)  109/       0 :                     ; DATES are random here
(1)  110/       0 :                     
(1)  111/       0 :                     iso_setfs	macro type,start,end
(1)  112/       0 :                     .fstrt:
(1)  113/       0 :                     		dc.b .fend-.fstrt				; Block size
(1)  114/       0 :                     		dc.b 0						; zero
(1)  115/       0 :                     		dc.b (start>>11&$FF),(start>>19&$FF)		; Start sector, little
(1)  116/       0 :                     		dc.b (start>>27&$FF),(start>>35&$FF)
(1)  117/       0 :                     		dc.l start>>11					; Start sector, big
(1)  118/       0 :                     		dc.b ((end-start)&$FF),((end-start)>>8&$FF)	; Filesize, little
(1)  119/       0 :                     		dc.b ((end-start)>>16&$FF),((end-start)>>24&$FF)
(1)  120/       0 :                     		dc.l end-start					; Filesize, big
(1)  121/       0 :                     		dc.b (2023-1900)+1				; Year
(1)  122/       0 :                     		dc.b 0,0,0,0,0,0				; TODO
(1)  123/       0 :                     		dc.b 2						; File flags
(1)  124/       0 :                     		dc.b 0,0
(1)  125/       0 :                     		dc.b 1,0					; Volume sequence number, little
(1)  126/       0 :                     		dc.b 0,1					; Volume sequence number, big
(1)  127/       0 :                     		dc.b 1,type
(1)  128/       0 :                     .fend:
(1)  129/       0 :                     		endm
(1)  130/       0 :                     
(1)  131/       0 :                     iso_file	macro filename,start,end
(1)  132/       0 :                     .fstrt:		dc.b .fend-.fstrt				; Block size
(1)  133/       0 :                     		dc.b 0						; zero
(1)  134/       0 :                     		dc.b (start>>11&$FF),(start>>19&$FF)		; Start sector, little
(1)  135/       0 :                     		dc.b (start>>27&$FF),(start>>35&$FF)
(1)  136/       0 :                     		dc.l start>>11					; Start sector, big
(1)  137/       0 :                     		dc.b ((end-start)&$FF),((end-start)>>8&$FF)	; Filesize, little
(1)  138/       0 :                     		dc.b ((end-start)>>16&$FF),((end-start)>>24&$FF)
(1)  139/       0 :                     		dc.l end-start					; Filesize, big
(1)  140/       0 :                     		dc.b (2023-1900)+1				; Year
(1)  141/       0 :                     		dc.b 0,0,0,0,0,0				; TODO
(1)  142/       0 :                     		dc.b 0						; File flags
(1)  143/       0 :                     		dc.b 0,0
(1)  144/       0 :                     		dc.b 1,0					; Volume sequence number, little
(1)  145/       0 :                     		dc.b 0,1					; Volume sequence number, big
(1)  146/       0 :                     		dc.b .flend-.flen
(1)  147/       0 :                     .flen:		dc.b filename,";1"
(1)  148/       0 :                     .flend:		dc.b 0
(1)  149/       0 :                     .fend:
(1)  150/       0 :                     		endm
(1)  151/       0 :                     
(1)  152/       0 :                     ; ====================================================================
(1)  153/       0 :                     ; ------------------------------------------------------------
(1)  154/       0 :                     ; Nikona macros
(1)  155/       0 :                     ; ------------------------------------------------------------
(1)  156/       0 :                     
(1)  157/       0 :                     ; --------------------------------------------
(1)  158/       0 :                     ; Screen mode code
(1)  159/       0 :                     ; --------------------------------------------
(1)  160/       0 :                     
(1)  161/       0 :                     screen_code macro lblstart,lblend,path
(1)  162/       0 :                     	if MCD|MARSCD
(1)  163/       0 :                     		align $800		; SCD/CD32X sector align
(1)  164/       0 :                     	elseif MARS
(1)  165/       0 :                     		align 4
(1)  166/       0 :                     		phase $880000+*		; 32X ROM-area
(1)  167/       0 :                     	endif
(1)  168/       0 :                     lblstart label *
(1)  169/       0 :                     	if MARS
(1)  170/       0 :                     		dephase
(1)  171/       0 :                     	endif
(1)  172/       0 :                     
(1)  173/       0 :                     mctopscrn:
(1)  174/       0 :                     	if MARS|MCD|MARSCD
(1)  175/       0 :                     		phase RAM_UserCode	; SCD/32X/CD32X relocate to RAM area
(1)  176/       0 :                     	endif
(1)  177/       0 :                     mcscrn_s:
(1)  178/       0 :                     	include path;"game/screen_0/code.asm"
(1)  179/       0 :                     mcscrn_e:
(1)  180/       0 :                     	if MARS
(1)  181/       0 :                     		dephase	; dephase RAM section
(1)  182/       0 :                     		dephase ; dephase $880000+ section
(1)  183/       0 :                     	elseif MCD|MARSCD
(1)  184/       0 :                     		dephase
(1)  185/       0 :                     		phase mctopscrn+(mcscrn_e-RAM_UserCode)
(1)  186/       0 :                     		align $800
(1)  187/       0 :                     ; Md_Screen00_e:
(1)  188/       0 :                     lblend label *
(1)  189/       0 :                     	endif
(1)  190/       0 :                     	if MCD|MARS|MARSCD
(1)  191/       0 :                     		report "THIS SCREEN's code",mcscrn_e-RAM_UserCode,MAX_UserCode
(1)  192/       0 :                     	endif
(1)  193/       0 :                     	endm
(1)  194/       0 :                     
(1)  195/       0 :                     ; --------------------------------------------
(1)  196/       0 :                     ; 68K data bank
(1)  197/       0 :                     ; --------------------------------------------
(1)  198/       0 :                     
(1)  199/       0 :                     data_bkset macro startlbl,except
(1)  200/       0 :                     	if MCD|MARSCD
(1)  201/       0 :                     		align $800
(1)  202/       0 :                     	elseif MARS
(1)  203/       0 :                     		align 4
(1)  204/       0 :                     	endif
(1)  205/       0 :                     ; MCD_DBANK0:
(1)  206/       0 :                     startlbl label *
(1)  207/       0 :                     	if MCD|MARSCD
(1)  208/       0 :                     		phase sysmcd_wram
(1)  209/       0 :                     	elseif MARS
(1)  210/       0 :                     ; 		dephase
(1)  211/       0 :                     	if except==-1
(1)  212/       0 :                     		phase $900000+*	; First 32X data bank
(1)  213/       0 :                     	else
(1)  214/       0 :                     		phase $900000
(1)  215/       0 :                     	endif
(1)  216/       0 :                     	endif
(1)  217/       0 :                     	endm
(1)  218/       0 :                     
(1)  219/       0 :                     data_bkend macro startlbl,endlbl,thissize
(1)  220/       0 :                     
(1)  221/       0 :                     	if MARS
(1)  222/       0 :                     		dephase
(1)  223/       0 :                     		if thissize > $40000
(1)  224/       0 :                     			warning "THIS BANK SIZE IS TOO LARGE FOR WORD-RAM (CD/CD32X)"
(1)  225/       0 :                     		endif
(1)  226/       0 :                     		report "THIS 68K DATA BANK at $900000",thissize,$100000
(1)  227/       0 :                     	elseif MCD|MARSCD
(1)  228/       0 :                     		dephase
(1)  229/       0 :                     		align $800
(1)  230/       0 :                     endlbl label *	; <-- CD/CD32X ONLY
(1)  231/       0 :                     		report "THIS 68K DATA BANK at WORD-RAM",thissize,$40000
(1)  232/       0 :                     	endif
(1)  233/       0 :                     	endm
(1)  234/       0 :                     
(1)  235/       0 :                     ; --------------------------------------------
(1)  236/       0 :                     ; 32X ONLY
(1)  237/       0 :                     ; --------------------------------------------
(1)  238/       0 :                     
(1)  239/       0 :                     sdram_bkset macro thislbl,endlbl
(1)  240/       0 :                     	if MCD|MARSCD
(1)  241/       0 :                     		align $800
(1)  242/       0 :                     	elseif MARS
(1)  243/       0 :                     		align 4
(1)  244/       0 :                     		phase $880000+*
(1)  245/       0 :                     	endif
(1)  246/       0 :                     ; MARSDATA_DEFAULT:
(1)  247/       0 :                     thislbl label *
(1)  248/       0 :                     	if MARS
(1)  249/       0 :                     		dephase
(1)  250/       0 :                     	endif
(1)  251/       0 :                     	if MARS|MARSCD
(1)  252/       0 :                     		dc.l endlbl-thislbl
(1)  253/       0 :                     		phase SH2_USER_DATA
(1)  254/       0 :                     	endif
(1)  255/       0 :                     	endm
(1)  256/       0 :                     
(1)  257/       0 :                     ; --------------------------------------------
(1)  258/       0 :                     
(1)  259/       0 :                     sdram_bkend macro thislbl,endlbl
(1)  260/       0 :                     	if MARS|MARSCD
(1)  261/       0 :                     		dephase
(1)  262/       0 :                     		align 8	; <-- DREQ alignment
(1)  263/       0 :                     	endif
(1)  264/       0 :                     	if MCD|MARSCD
(1)  265/       0 :                     endlbl label *
(1)  266/       0 :                     		align $800	; <-- AS failing
(1)  267/       0 :                     ; 		dc.l 0
(1)  268/       0 :                     	elseif MARS
(1)  269/       0 :                     		phase $880000+*
(1)  270/       0 :                     endlbl label *
(1)  271/       0 :                     		dephase
(1)  272/       0 :                     	endif
(1)  273/       0 :                     
(1)  274/       0 :                     	if MARS|MARSCD
(1)  275/       0 :                     		report "SH2 SDRAM DATA: thislbl",endlbl-thislbl,(CS3|$40000)-SH2_USER_DATA
(1)  276/       0 :                     	endif
(1)  277/       0 :                     	endm
(1)  278/       0 :                     
(1)  279/       0 :                     ; --------------------------------------------
(1)  280/       0 :                     ; Set data bank(s) for the current screen
(1)  281/       0 :                     ;
(1)  282/       0 :                     ; mcdpos:
(1)  283/       0 :                     ; 	dc.b "FILENAME.BIN",0
(1)  284/       0 :                     ; 	align 2
(1)  285/       0 :                     ;
(1)  286/       0 :                     ; marspos:
(1)  287/       0 :                     ; 	dc.l MARSDATA_DEFAULT	; 32X Cartridge point (UNUSED on CD32X)
(1)  288/       0 :                     ; 	dc.b "MARSD_00.BIN",0	; CD32X Filename (UNUSED on 32X Cartridge)
(1)  289/       0 :                     ; 	align 2
(1)  290/       0 :                     ; --------------------------------------------
(1)  291/       0 :                     
(1)  292/       0 :                     set_dbanks macro mcdpos,marspos
(1)  293/       0 :                     	if MARS|MARSCD
(1)  294/       0 :                     		lea	marspos(pc),a0		; 32X/CD32X: SH2 side data
(1)  295/       0 :                     		bsr	System_MarsDataPack
(1)  296/       0 :                     	endif
(1)  297/       0 :                     	if MCD|MARSCD
(1)  298/       0 :                     		bsr	System_McdSubWait
(1)  299/       0 :                     		lea	mcdpos(pc),a0		; CD/CD32X: Genesis data
(1)  300/       0 :                     		bsr	System_McdTrnsfr_WRAM
(1)  301/       0 :                     	endif
(1)  302/       0 :                     	endm
(1)  303/       0 :                     
(1)  304/       0 :                     ; --------------------------------------------
(1)  305/       0 :                     ; VDP color debug
(1)  306/       0 :                     ; --------------------------------------------
(1)  307/       0 :                     
(1)  308/       0 :                     vdp_showme	macro color
(1)  309/       0 :                     		move.l	#$C0000000,(vdp_ctrl).l
(1)  310/       0 :                     		move.w	#color,(vdp_data).l
(1)  311/       0 :                     		endm
(1)  312/       0 :                     
      98/       0 :                     		include "game/globals.asm"	; USER variables
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; GLOBAL RAM for ALL screen modes
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; Score, Lives, Level number, etc.
(1)    6/       0 :                     ; ----------------------------------------------------------------
(1)    7/       0 :                     
(1)    8/       0 : (MACRO)              			strct RAM_MdGlobal
(1)    8/       0 : =$0                  GLBL_LASTPC     set *
(1)    8/       0 :                                     dephase
(1)    8/FFFFFFFFFFFFEA04 :                                     phase RAM_MDGLOBAL
(1)    8/FFFFFFFFFFFFEA04 : =$FFFFFFFFFFFFEA04   GLBL_LASTORG    set *
(1)    9/FFFFFFFFFFFFEA04 :                     
(1)   10/FFFFFFFFFFFFEA04 :                     ; ------------------------------------------------------------
(1)   11/FFFFFFFFFFFFEA04 :                     ; Examples:
(1)   12/FFFFFFFFFFFFEA04 :                     ;
(1)   13/FFFFFFFFFFFFEA04 :                     ; RAM_Glbl_ExmpL ds.l 8 ; reserve 4 LONGS ($20 bytes)
(1)   14/FFFFFFFFFFFFEA04 :                     ; RAM_Glbl_ExmpW ds.w 6 ; reserve 3 WORDS ($0C bytes)
(1)   15/FFFFFFFFFFFFEA04 :                     ; RAM_Glbl_ExmpB ds.b 5 ; reserve 5 bytes
(1)   16/FFFFFFFFFFFFEA04 :                     ;
(1)   17/FFFFFFFFFFFFEA04 :                     ; Careful with bytes, everything needs to be word-algined
(1)   18/FFFFFFFFFFFFEA04 :                     ; or your will get an ADDRESS ERROR.
(1)   19/FFFFFFFFFFFFEA04 :                     ; ------------------------------------------------------------
(1)   20/FFFFFFFFFFFFEA04 :                     
(1)   21/FFFFFFFFFFFFEA04 :                     RAM_Glbl_Filler		ds.l 1		; 1 long (4 bytes)
(1)   22/FFFFFFFFFFFFEA08 :                     
(1)   23/FFFFFFFFFFFFEA08 :                     
(1)   24/FFFFFFFFFFFFEA08 :                     ; ------------------------------------------------------------
(1)   25/FFFFFFFFFFFFEA08 :                     sizeof_MdGlbl		ds.l 0		; size label
(1)   26/FFFFFFFFFFFFEA0C : (MACRO)              			endstrct
(1)   26/FFFFFFFFFFFFEA04 :                                     org GLBL_LASTORG
(1)   26/       0 :                                     phase GLBL_LASTPC
(1)   27/       0 :                     
      99/       0 :                     		include	"system/mcd/map.asm"	; Sega CD hardware map (shared with Sub-CPU)
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; SEGA CD SUB-CPU MAP
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; ------------------------------------------------
(1)    7/       0 :                     ; Register area
(1)    8/       0 :                     ;
(1)    9/       0 :                     ; MAIN-CPU: $A12000 (sysmcd_reg)
(1)   10/       0 :                     ; SUB-CPU:  $FF8000 (scpu_reg)
(1)   11/       0 :                     ; ------------------------------------------------
(1)   12/       0 :                     
(1)   13/       0 :                     ; -------------
(1)   14/       0 :                     ; bits
(1)   15/       0 :                     ; -------------
(1)   16/       0 :                     
(1)   17/       0 : =$2                  bitWRamMode	equ 2		;2M | 1M
(1)   18/       0 :                     
(1)   19/       0 :                     ; -------------
(1)   20/       0 :                     ; Registers
(1)   21/       0 :                     ; -------------
(1)   22/       0 :                     
(1)   23/       0 : =$3                  mcd_memory	equ $03
(1)   24/       0 : =$6                  mcd_hint	equ $06		; [W] HBlank RAM redirection-jump (MAIN CPU ONLY)
(1)   25/       0 : =$E                  mcd_comm_m	equ $0E		; [B] Comm port MAIN R/W | SUB READ ONLY
(1)   26/       0 : =$F                  mcd_comm_s	equ $0F		; [B] Comm port SUB R/W  | MAIN READ ONLY
(1)   27/       0 : =$10                 mcd_dcomm_m	equ $10		; [S: $0E] Communication MAIN
(1)   28/       0 : =$20                 mcd_dcomm_s	equ $20		; [S: $0E] Communication SUB
(1)   29/       0 : =$32                 mcd_intmask	equ $32		;
(1)   30/       0 :                     
(1)   31/       0 :                     ; ====================================================================
(1)   32/       0 :                     
     100/       0 :                     		include	"system/mars/map.asm"	; 32X hardware map (shared with SH2)
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; -------------------------------------------------------------------
(1)    3/       0 :                     ; SH2 MAP
(1)    4/       0 :                     ; -------------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; ------------------------------------------------------------
(1)    7/       0 :                     ; SH2 SIDE MAP
(1)    8/       0 :                     ; ------------------------------------------------------------
(1)    9/       0 :                     
(1)   10/       0 : =$0                  CS0		equ	$00000000	; Boot ROM & System registers
(1)   11/       0 : =$2000000            CS1		equ	$02000000	; ROM data all 4MB, Gone if RV=1
(1)   12/       0 : =$4000000            CS2		equ	$04000000	; Framebuffer area
(1)   13/       0 : =$6000000            CS3		equ	$06000000	; SDRAM
(1)   14/       0 : =$20000000           TH		equ	$20000000	; OR value for CacheThru
(1)   15/       0 : =$20004000           _sysreg		equ	$00004000|TH	; MARS System registers
(1)   16/       0 : =$20004100           _vdpreg		equ	$00004100|TH	; SuperVDP registers
(1)   17/       0 : =$20004200           _palette	equ	$00004200|TH	; Palette RAM for Pixel-Packed or RLE mode
(1)   18/       0 : =$24000000           _framebuffer:	equ	CS2|TH		; Framebuffer: First 240 words are the linetable
(1)   19/       0 : =$24020000           _overwrite:	equ	CS2|TH+$20000	; Overwrite: $00 writes are ignored
(1)   20/       0 :                     
(1)   21/       0 :                     ; ------------------------------------------------------------
(1)   22/       0 :                     ; Variables
(1)   23/       0 :                     ; ------------------------------------------------------------
(1)   24/       0 :                     
(1)   25/       0 :                     ; ------------------------------------------------
(1)   26/       0 :                     ; System
(1)   27/       0 :                     ; ------------------------------------------------
(1)   28/       0 :                     
(1)   29/       0 :                     ; _sysreg
(1)   30/       0 : =$0                  adapter		equ	$00		; adapter control register (Read as WORD)
(1)   31/       0 : =$1                  intmask		equ	$01		; SH2 CPU ONLY: interrupts mask
(1)   32/       0 : =$3                  standby		equ	$03		; CMD interrupt request bit by MD side (slave|master) (BYTE)
(1)   33/       0 : =$5                  hcount		equ	$05		; H Counter (BYTE)
(1)   34/       0 : =$6                  dreqctl		equ	$06		; DREQ control (WORD)
(1)   35/       0 : =$8                  dreqsource	equ	$08		; DREQ source address
(1)   36/       0 : =$C                  dreqdest	equ	$0C		; DREQ destination address
(1)   37/       0 : =$10                 dreqlen		equ	$10		; DREQ length
(1)   38/       0 : =$12                 dreqfifo	equ	$12		; DREQ FIFO
(1)   39/       0 : =$14                 vresintclr	equ	$14		; VRES interrupt clear
(1)   40/       0 : =$16                 vintclr		equ	$16		; V interrupt clear
(1)   41/       0 : =$18                 hintclr		equ	$18		; H interrupt clear
(1)   42/       0 : =$1A                 cmdintclr	equ	$1a		; CMD interrupt clear
(1)   43/       0 : =$1C                 pwmintclr	equ	$1C		; PWM interrupt clear
(1)   44/       0 : =$20                 comm0		equ	$20		; Communication ports ***
(1)   45/       0 : =$21                 comm1		equ	$21		; ALL CPUs can see this ports: including Z80
(1)   46/       0 : =$22                 comm2		equ	$22		; only be careful with the read/write directions.
(1)   47/       0 : =$23                 comm3		equ	$23		; ODD addresses (1,3,5...) are BYTE-read only.
(1)   48/       0 : =$24                 comm4		equ	$24		; EVEN addresses (0,2,4...) can be read as WORDs
(1)   49/       0 : =$25                 comm5		equ	$25		; Writing LONG addreses are possible depending
(1)   50/       0 : =$26                 comm6		equ	$26		; of the CPU's aligment limitations.
(1)   51/       0 : =$27                 comm7		equ	$27		;
(1)   52/       0 : =$28                 comm8		equ	$28		;
(1)   53/       0 : =$29                 comm9		equ	$29		;
(1)   54/       0 : =$2A                 comm10		equ	$2A		;
(1)   55/       0 : =$2B                 comm11		equ	$2B		;
(1)   56/       0 : =$2C                 comm12		equ	$2C		;
(1)   57/       0 : =$2D                 comm13		equ	$2D		;
(1)   58/       0 : =$2E                 comm14		equ	$2E		;
(1)   59/       0 : =$2F                 comm15		equ	$2F		;
(1)   60/       0 : =$30                 timerctl	equ	$30		; PWM Timer Control
(1)   61/       0 : =$31                 pwmctl		equ	$31		; PWM Control
(1)   62/       0 : =$32                 cycle		equ	$32		; PWM Cycle
(1)   63/       0 : =$34                 lchwidth	equ	$34		; PWM L ch Width
(1)   64/       0 : =$36                 rchwidth	equ	$36		; PWM R ch Width
(1)   65/       0 : =$38                 monowidth	equ	$38		; PWM Monaural Width
(1)   66/       0 :                     
(1)   67/       0 :                     ; _sysreg
(1)   68/       0 :                     ; adapter
(1)   69/       0 : =$1                  CART		equ	%00000001	; CD or Cartridge
(1)   70/       0 : =$2                  ADEN		equ	%00000010	; MARS Enabled: No/Yes
(1)   71/       0 : =$80                 FM		equ	%10000000	; SuperVDP permission: MD or SH
(1)   72/       0 :                     ; framectl
(1)   73/       0 : =$1                  FS		equ	%00000001	; Current framebuffer DRAM pixel data
(1)   74/       0 : =$2                  FEN		equ	%00000010	; Can write to Framebuffer: Yes/No
(1)   75/       0 :                     ; vdpsts
(1)   76/       0 : =$80                 VBLK		equ	%10000000	; VBlank bit
(1)   77/       0 : =$40                 HBLK		equ	%01000000	; HBlank bit
(1)   78/       0 : =$20                 PEN		equ	%00100000	; Can write to Palette: Yes/No
(1)   79/       0 :                     ; intmask
(1)   80/       0 : =$8                  VIRQ_ON		equ	$08		; IRQ masks for IRQ mask register
(1)   81/       0 : =$4                  HIRQ_ON		equ	$04
(1)   82/       0 : =$2                  CMDIRQ_ON	equ	$02
(1)   83/       0 : =$1                  PWMIRQ_ON	equ	$01
(1)   84/       0 :                     
(1)   85/       0 :                     ; _vdpreg
(1)   86/       0 : =$0                  tvmode		equ	$00		; TV mode
(1)   87/       0 : =$1                  bitmapmd	equ	$01		; Bitmap mode
(1)   88/       0 : =$2                  shift		equ	$02		; Lineshift bit
(1)   89/       0 : =$4                  filllength	equ	$04		; Auto Fill Length register
(1)   90/       0 : =$6                  fillstart	equ	$06		; Auto Fill Start Address register
(1)   91/       0 : =$8                  filldata	equ	$08		; Auto Fill Data register
(1)   92/       0 : =$A                  vdpsts		equ	$0A		; VDP Status register
(1)   93/       0 : =$B                  framectl	equ	$0B		; Frame Buffer Control register
(1)   94/       0 :                     
(1)   95/       0 :                     ; ------------------------------------------------------------
(1)   96/       0 :                     ; SH2 Internal registers, for each CPU
(1)   97/       0 :                     ; ------------------------------------------------------------
(1)   98/       0 :                     
(1)   99/       0 :                     ; DMA Channel 0: DREQ
(1)  100/       0 :                     ; DMA Channel 1: PWM
(1)  101/       0 :                     
(1)  102/       0 : =$FFFFFE00           _SERIAL		equ	$FFFFFE00	; Serial Control
(1)  103/       0 : =$FFFFFE10           _FRT		equ	$FFFFFE10	; Free run timer
(1)  104/       0 : =$0                  _TIER		equ	$00		; Timer interrupt enable register
(1)  105/       0 : =$1                  _TCSR		equ	$01		; Timer control & status register
(1)  106/       0 : =$2                  _FRC_H		equ	$02		; Free running counter High
(1)  107/       0 : =$3                  _FRC_L		equ	$03		; Free running counter Low
(1)  108/       0 : =$4                  _OCR_H		equ	$04		; Output compare register High
(1)  109/       0 : =$5                  _OCR_L		equ	$05		; Output compare register Low
(1)  110/       0 : =$6                  _TCR		equ	$06		; Timer control register
(1)  111/       0 : =$7                  _TOCR		equ	$07		; Timer output compare control register
(1)  112/       0 : =$FFFFFE92           _CCR		equ	$FFFFFE92	; Cache register (WORD)
(1)  113/       0 : =$FFFFFF00           _JR		equ	$FFFFFF00	; DIVU (--- / val)
(1)  114/       0 : =$FFFFFF04           _HRL32		equ	$FFFFFF04	; DIVU (val / ---) or RIGHT-long result if read
(1)  115/       0 : =$FFFFFF10           _HRH		equ	$FFFFFF10	; DIVU Result: LEFT long
(1)  116/       0 : =$FFFFFF14           _HRL		equ	$FFFFFF14	; DIVU Result: RIGHT long
(1)  117/       0 : =$FFFFFF80           _DMASOURCE0	equ	$FFFFFF80	; DMA source address 0
(1)  118/       0 : =$FFFFFF84           _DMADEST0	equ	$FFFFFF84	; DMA destination address 0
(1)  119/       0 : =$FFFFFF88           _DMACOUNT0	equ	$FFFFFF88	; DMA transfer count 0
(1)  120/       0 : =$FFFFFF8C           _DMACHANNEL0	equ	$FFFFFF8C	; DMA channel control 0
(1)  121/       0 : =$FFFFFF90           _DMASOURCE1	equ	$FFFFFF90	; DMA source address 1
(1)  122/       0 : =$FFFFFF94           _DMADEST1	equ	$FFFFFF94	; DMA destination address 1
(1)  123/       0 : =$FFFFFF98           _DMACOUNT1	equ	$FFFFFF98	; DMA transfer count 1
(1)  124/       0 : =$FFFFFF9C           _DMACHANNEL1	equ	$FFFFFF9C	; DMA channel control 1
(1)  125/       0 : =$FFFFFFA0           _DMAVECTORN0	equ	$FFFFFFA0	; DMA vector number N0
(1)  126/       0 : =$FFFFFFA4           _DMAVECTORE0	equ	$FFFFFFA4	; DMA vector number E0
(1)  127/       0 : =$FFFFFFA8           _DMAVECTORN1	equ	$FFFFFFA8	; DMA vector number N1
(1)  128/       0 : =$FFFFFFAC           _DMAVECTORE1	equ	$FFFFFFAC	; DMA vector number E1
(1)  129/       0 : =$FFFFFFB0           _DMAOPERATION	equ	$FFFFFFB0	; DMA operation
(1)  130/       0 : =$FFFFFFB4           _DMAREQACK0	equ	$FFFFFFB4	; DMA request/ack select control 0
(1)  131/       0 : =$FFFFFFB8           _DMAREQACK1	equ	$FFFFFFB8	; DMA request/ack select control 1
(1)  132/       0 :                     
     101/       0 :                     		include	"system/md/map.asm"	; Genesis hardware map and other areas
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Genesis / Pico 68000 map
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 : =$200000             sys_exram	equ	$200000		; Second half of 4MB rom or external RAM (Normal or save data)
(1)    7/       0 : =$A00000             z80_cpu		equ	$A00000		; Z80 CPU area, size: $2000
(1)    8/       0 : =$A04000             ym_ctrl_1	equ	$A04000		; YM2612 reg 1
(1)    9/       0 : =$A04001             ym_data_1	equ	$A04001		; YM2612 reg 2
(1)   10/       0 : =$A04002             ym_ctrl_2	equ	$A04002		; YM2612 reg 1
(1)   11/       0 : =$A04003             ym_data_2	equ	$A04003		; YM2612 reg 2
(1)   12/       0 : =$A10001             sys_io		equ	$A10001		; bits: OVRSEAS(7)|PAL(6)|DISK(5)|VER(3-0)
(1)   13/       0 : =$A10003             sys_data_1	equ	$A10003		; Port 1 DATA
(1)   14/       0 : =$A10005             sys_data_2	equ	$A10005		; Port 2 DATA
(1)   15/       0 : =$A10007             sys_data_3	equ	$A10007		; Modem DATA
(1)   16/       0 : =$A10009             sys_ctrl_1	equ	$A10009		; Port 1 CTRL
(1)   17/       0 : =$A1000B             sys_ctrl_2	equ	$A1000B		; Port 2 CTRL
(1)   18/       0 : =$A1000D             sys_ctrl_3	equ	$A1000D		; Modem CTRL
(1)   19/       0 : =$A11100             z80_bus 	equ	$A11100		; only use bit 0 (bit 8 as WORD)
(1)   20/       0 : =$A11200             z80_reset	equ	$A11200		; WRITE only ($0000 reset/$0100 cancel)
(1)   21/       0 : =$A130F1             md_bank_sram	equ	$A130F1		; Make SRAM visible at $200000
(1)   22/       0 : =$A14000             sys_tmss	equ	$A14000		; write "SEGA" here for ver > 0
(1)   23/       0 : =$C00000             vdp_data	equ	$C00000		; video data port
(1)   24/       0 : =$C00004             vdp_ctrl	equ	$C00004		; video control port
(1)   25/       0 : =$C00011             psg_ctrl	equ	$C00011		; PSG control
(1)   26/       0 :                     
(1)   27/       0 :                     ; ----------------------------------------------------------------
(1)   28/       0 :                     ; SEGA CD map
(1)   29/       0 :                     ; ----------------------------------------------------------------
(1)   30/       0 :                     
(1)   31/       0 : =$200000             sysmcd_wram	equ	$200000
(1)   32/       0 : =$A12000             sysmcd_reg	equ	$A12000
(1)   33/       0 :                     
(1)   34/       0 :                     ; ----------------------------------------------------------------
(1)   35/       0 :                     ; 32X map
(1)   36/       0 :                     ; ----------------------------------------------------------------
(1)   37/       0 :                     
(1)   38/       0 : =$A130EC             sysmars_id	equ	$A130EC		; 32X's ID: "MARS"
(1)   39/       0 : =$A15100             sysmars_reg	equ	$A15100		; MARS 32X registers area, see system/mars/map.asm for variables
(1)   40/       0 :                     
(1)   41/       0 :                     ; ----------------------------------------------------------------
(1)   42/       0 :                     ; Genesis / Mega drive Z80 map
(1)   43/       0 :                     ; ----------------------------------------------------------------
(1)   44/       0 :                     
(1)   45/       0 : =$4000               zym_ctrl_1	equ	$4000		; YM2612 reg 1
(1)   46/       0 : =$4001               zym_data_1	equ	$4001		; YM2612 reg 2
(1)   47/       0 : =$4002               zym_ctrl_2	equ	$4002		; YM2612 reg 1
(1)   48/       0 : =$4003               zym_data_2	equ	$4003		; YM2612 reg 2
(1)   49/       0 : =$6000               zbank		equ	$6000		; Z80 ROM BANK: %XXXXXXXX X0000000 00000000 (9 writes)
(1)   50/       0 :                     ; zvdp_data	equ	$7F00		; video data port
(1)   51/       0 :                     ; zvdp_ctrl	equ	$7F04		; video control port
(1)   52/       0 : =$7F11               zpsg_ctrl	equ	$7F11		; PSG control
(1)   53/       0 :                     
     102/       0 :                     		include	"system/md/ram.asm"	; Genesis RAM sections
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; MD RAM
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; Reserved RAM sections:
(1)    6/       0 :                     ; $FFFD00-$FFFDFF: Sega CD's vectors
(1)    7/       0 :                     ; $FFFE80-$FFFFFF: Z80 write-only scratchpad
(1)    8/       0 :                     ; ----------------------------------------------------------------
(1)    9/       0 :                     
(1)   10/       0 :                     ; --------------------------------------------------------
(1)   11/       0 :                     ; Settings
(1)   12/       0 :                     ; --------------------------------------------------------
(1)   13/       0 :                     
(1)   14/       0 : (MACRO)              			strct $FFFF0000
(1)   14/       0 : =$0                  GLBL_LASTPC     set *
(1)   14/FFFFFFFFFFFFEA04 :                                     dephase
(1)   14/FFFFFFFFFFFF0000 :                                     phase $FFFF0000
(1)   14/FFFFFFFFFFFF0000 : =$FFFFFFFFFFFF0000   GLBL_LASTORG    set *
(1)   15/FFFFFFFFFFFF0000 :                     RAM_SystemCode		ds.b MAX_SysCode	; CD/32X/CD32X
(1)   16/FFFFFFFFFFFF2000 :                     RAM_UserCode		ds.b MAX_UserCode	; CD/32X/CD32X
(1)   17/FFFFFFFFFFFFA000 :                     
(1)   18/FFFFFFFFFFFFA000 :                     ; ------------------------------------------------
(1)   19/FFFFFFFFFFFFA000 :                     ; > $FF8000 section
(1)   20/FFFFFFFFFFFFA000 :                     ; ------------------------------------------------
(1)   21/FFFFFFFFFFFFA000 :                     
(1)   22/FFFFFFFFFFFFA000 :                     check_thisram		ds.l 0			; <-- get current pos
(1)   26/FFFFFFFFFFFFA004 :                     RAM_MdVideo		ds.b MAX_MdVideo	; $FF8000
(1)   27/FFFFFFFFFFFFC004 :                     RAM_MdSystem		ds.b MAX_MdSystem	;
(1)   28/FFFFFFFFFFFFC604 :                     RAM_MdOther		ds.b MAX_MdOther	; 32X's DREQ goes here
(1)   29/FFFFFFFFFFFFD204 :                     RAM_ScrnBuff		ds.b MAX_ScrnBuff
(1)   30/FFFFFFFFFFFFEA04 :                     RAM_MdGlobal		ds.b sizeof_MdGlbl
(1)   31/FFFFFFFFFFFFD40C :                     sizeof_MdRam		ds.l 0
(1)   32/FFFFFFFFFFFFD410 : (MACRO)              			endstrct
(1)   32/FFFFFFFFFFFF0000 :                                     org GLBL_LASTORG
(1)   32/       0 :                                     phase GLBL_LASTPC
(1)   36/       0 :                     
(1)   37/       0 :                     ; ------------------------------------------------
(1)   38/       0 :                     ; Add-on area
(1)   39/       0 :                     ; ------------------------------------------------
(1)   40/       0 :                     
(1)   41/       0 : (MACRO)              			strct RAM_MdOther
(1)   41/       0 : =$0                  GLBL_LASTPC     set *
(1)   41/FFFFFFFFFFFF0000 :                                     dephase
(1)   41/FFFFFFFFFFFFC604 :                                     phase RAM_MDOTHER
(1)   41/FFFFFFFFFFFFC604 : =$FFFFFFFFFFFFC604   GLBL_LASTORG    set *
(1)   42/FFFFFFFFFFFFC604 :                     RAM_MdDreq		ds.b $C00		; 32X DREQ area (MANUAL SIZE)
(1)   43/FFFFFFFFFFFFD204 :                     sizeof_RamOther		ds.l 0
(1)   44/FFFFFFFFFFFFD208 : (MACRO)              			endstrct
(1)   44/FFFFFFFFFFFFC604 :                                     org GLBL_LASTORG
(1)   44/       0 :                                     phase GLBL_LASTPC
(1)   45/       0 : (MACRO)              			erreport "ADD-ON RAM USES",(sizeof_RamOther-RAM_MdOther),MAX_MdOther
(1)   46/       0 :                     
(1)   47/       0 :                     ; ------------------------------------------------
(1)   48/       0 :                     ; Other
(1)   49/       0 :                     ; ------------------------------------------------
(1)   50/       0 :                     
(1)   51/       0 : =$FFFFFD00           RAM_Stack		equ RAM_MegaCd			; <-- goes backwards
(1)   52/       0 : =$FFFFFD00           RAM_MegaCd		equ $FFFFFD00
(1)   53/       0 : =$FFFFFF00           RAM_ZSndBuff		equ $FFFFFF00
(1)   54/       0 :                     
     103/       0 :                     		include	"system/shared.asm"	; Shared variables and specials
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Shared variables
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; ====================================================================
(1)    7/       0 :                     ; ----------------------------------------------------------------
(1)    8/       0 :                     ; 32X SECTION
(1)    9/       0 :                     ; ----------------------------------------------------------------
(1)   10/       0 :                     
(1)   87/       0 :                     
     104/       0 :                     
     105/       0 :                     ; ====================================================================
     106/       0 :                     ; ----------------------------------------------------------------
     107/       0 :                     ; Init procedures for all systems
     108/       0 :                     ; ----------------------------------------------------------------
     109/       0 :                     
     110/       0 :                     ; ---------------------------------------------
     111/       0 :                     ; SEGA 32X
     112/       0 :                     ; ---------------------------------------------
     113/       0 :                     
     179/       0 :                     		include	"system/head_md.asm"		; Genesis header
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Genesis header
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 : FFFF FD00           		dc.l RAM_Stack		; Stack point
(1)    7/       4 : 0000 0202           		dc.l MD_Entry		; Entry point MUST point to $3F0
(1)    8/       8 : 0000 0200           		dc.l MD_ErrBus		; Bus error
(1)    9/       C : 0000 0200           		dc.l MD_ErrAddr		; Address error
(1)   10/      10 : 0000 0200           		dc.l MD_ErrIll		; ILLEGAL Instruction
(1)   11/      14 : 0000 0200           		dc.l MD_ErrZDiv		; Divide by 0
(1)   12/      18 : 0000 0200           		dc.l MD_ErrChk		; CHK Instruction
(1)   13/      1C : 0000 0200           		dc.l MD_ErrTrapV	; TRAPV Instruction
(1)   14/      20 : 0000 0200           		dc.l MD_ErrPrivl	; Privilege violation
(1)   15/      24 : 0000 0200           		dc.l MD_Trace		; Trace
(1)   16/      28 : 0000 0200           		dc.l MD_Line1010	; Line 1010 Emulator
(1)   17/      2C : 0000 0200           		dc.l MD_Line1111	; Line 1111 Emulator
(1)   18/      30 : 0000 0200           		dc.l MD_ErrorEx		; Error exception
(1)   19/      34 : 0000 0200           		dc.l MD_ErrorEx
(1)   20/      38 : 0000 0200           		dc.l MD_ErrorEx
(1)   21/      3C : 0000 0200           		dc.l MD_ErrorEx
(1)   22/      40 : 0000 0200           		dc.l MD_ErrorEx
(1)   23/      44 : 0000 0200           		dc.l MD_ErrorEx
(1)   24/      48 : 0000 0200           		dc.l MD_ErrorEx
(1)   25/      4C : 0000 0200           		dc.l MD_ErrorEx
(1)   26/      50 : 0000 0200           		dc.l MD_ErrorEx
(1)   27/      54 : 0000 0200           		dc.l MD_ErrorEx
(1)   28/      58 : 0000 0200           		dc.l MD_ErrorEx
(1)   29/      5C : 0000 0200           		dc.l MD_ErrorEx
(1)   30/      60 : 0000 0200           		dc.l MD_ErrorEx
(1)   31/      64 : 0000 0200           		dc.l MD_ErrorTrap
(1)   32/      68 : 0000 0200           		dc.l MD_ErrorTrap
(1)   33/      6C : 0000 0200           		dc.l MD_ErrorTrap
(1)   34/      70 : FFFF C452           		dc.l RAM_MdMarsHInt	; RAM jump for HBlank (JMP xxxx xxxx)
(1)   35/      74 : 0000 0200           		dc.l MD_ErrorTrap
(1)   36/      78 : FFFF C44C           		dc.l RAM_MdMarsVInt	; RAM jump for VBlank (JMP xxxx xxxx)
(1)   37/      7C : 0000 0200           		dc.l MD_ErrorTrap
(1)   38/      80 : 0000 0200           		dc.l MD_ErrorTrap
(1)   39/      84 : 0000 0200           		dc.l MD_ErrorTrap
(1)   40/      88 : 0000 0200           		dc.l MD_ErrorTrap
(1)   41/      8C : 0000 0200           		dc.l MD_ErrorTrap
(1)   42/      90 : 0000 0200           		dc.l MD_ErrorTrap
(1)   43/      94 : 0000 0200           		dc.l MD_ErrorTrap
(1)   44/      98 : 0000 0200           		dc.l MD_ErrorTrap
(1)   45/      9C : 0000 0200           		dc.l MD_ErrorTrap
(1)   46/      A0 : 0000 0200           		dc.l MD_ErrorTrap
(1)   47/      A4 : 0000 0200           		dc.l MD_ErrorTrap
(1)   48/      A8 : 0000 0200           		dc.l MD_ErrorTrap
(1)   49/      AC : 0000 0200           		dc.l MD_ErrorTrap
(1)   50/      B0 : 0000 0200           		dc.l MD_ErrorTrap
(1)   51/      B4 : 0000 0200           		dc.l MD_ErrorTrap
(1)   52/      B8 : 0000 0200           		dc.l MD_ErrorTrap
(1)   53/      BC : 0000 0200           		dc.l MD_ErrorTrap
(1)   54/      C0 : 0000 0200           		dc.l MD_ErrorTrap
(1)   55/      C4 : 0000 0200           		dc.l MD_ErrorTrap
(1)   56/      C8 : 0000 0200           		dc.l MD_ErrorTrap
(1)   57/      CC : 0000 0200           		dc.l MD_ErrorTrap
(1)   58/      D0 : 0000 0200           		dc.l MD_ErrorTrap
(1)   59/      D4 : 0000 0200           		dc.l MD_ErrorTrap
(1)   60/      D8 : 0000 0200           		dc.l MD_ErrorTrap
(1)   61/      DC : 0000 0200           		dc.l MD_ErrorTrap
(1)   62/      E0 : 0000 0200           		dc.l MD_ErrorTrap
(1)   63/      E4 : 0000 0200           		dc.l MD_ErrorTrap
(1)   64/      E8 : 0000 0200           		dc.l MD_ErrorTrap
(1)   65/      EC : 0000 0200           		dc.l MD_ErrorTrap
(1)   66/      F0 : 0000 0200           		dc.l MD_ErrorTrap
(1)   67/      F4 : 0000 0200           		dc.l MD_ErrorTrap
(1)   68/      F8 : 0000 0200           		dc.l MD_ErrorTrap
(1)   69/      FC : 0000 0200           		dc.l MD_ErrorTrap
(1)   70/     100 : 5345 4741 2047      		dc.b "SEGA GENESIS    "
              106 : 454E 4553 4953 
              10C : 2020 2020          
(1)   71/     110 : 2843 2947 4636      		dc.b "(C)GF64 2024.???"
              116 : 3420 3230 3234 
              11C : 2E3F 3F3F          
(1)   72/     120 : 4E69 6B6F 6E61      		dc.b "Nikona MD                                       "
              126 : 204D 4420 2020 
              12C : 2020 2020 2020 
              132 : 2020 2020 2020 
              138 : 2020 2020 2020 
              13E : 2020 2020 2020 
              144 : 2020 2020 2020 
              14A : 2020 2020 2020    
(1)   73/     150 : 4E69 6B6F 6E61      		dc.b "Nikona GENESIS                                  "
              156 : 2047 454E 4553 
              15C : 4953 2020 2020 
              162 : 2020 2020 2020 
              168 : 2020 2020 2020 
              16E : 2020 2020 2020 
              174 : 2020 2020 2020 
              17A : 2020 2020 2020    
(1)   74/     180 : 474D 2048 4F4D      		dc.b "GM HOMEBREW-02"
              186 : 4542 5245 572D 
              18C : 3032             
(1)   75/     18E : 0000                		dc.w 0
(1)   76/     190 : 4A36 4D20 2020      		dc.b "J6M             "
              196 : 2020 2020 2020 
              19C : 2020 2020          
(1)   77/     1A0 : 0000 0000           		dc.l 0
(1)   78/     1A4 : 0003 C030           		dc.l ROM_END
(1)   79/     1A8 : 00FF 0000           		dc.l $FF0000
(1)   80/     1AC : 00FF FFFF           		dc.l $FFFFFF
(1)   81/     1B0 : 5241 F820           		dc.b "RA",$F8,$20
(1)   82/     1B4 : 0020 0001           		dc.l $200001
(1)   83/     1B8 : 0020 3FFF           		dc.l $203FFF
(1)   84/     1BC :                     		align $1F0
(1)   85/     1F0 : 4A55 4520 2020      		dc.b "JUE             "
              1F6 : 2020 2020 2020 
              1FC : 2020 2020          
(1)   86/     200 :                     
(1)   87/     200 :                     ; ====================================================================
(1)   88/     200 :                     ; ----------------------------------------------------------------
(1)   89/     200 :                     ; Error handlers
(1)   90/     200 :                     ;
(1)   91/     200 :                     ; all these do nothing currently
(1)   92/     200 :                     ; ----------------------------------------------------------------
(1)   93/     200 :                     
(1)   94/     200 :                     MD_ErrBus:				; Bus error
(1)   95/     200 :                     MD_ErrAddr:				; Address error
(1)   96/     200 :                     MD_ErrIll:				; ILLEGAL Instruction
(1)   97/     200 :                     MD_ErrZDiv:				; Divide by 0
(1)   98/     200 :                     MD_ErrChk:				; CHK Instruction
(1)   99/     200 :                     MD_ErrTrapV:				; TRAPV Instruction
(1)  100/     200 :                     MD_ErrPrivl:				; Privilege violation
(1)  101/     200 :                     MD_Trace:				; Trace
(1)  102/     200 :                     MD_Line1010:				; Line 1010 Emulator
(1)  103/     200 :                     MD_Line1111:				; Line 1111 Emulator
(1)  104/     200 :                     MD_ErrorEx:				; Error exception
(1)  105/     200 :                     MD_ErrorTrap:
(1)  106/     200 : 4E73                		rte			; Return from Exception
(1)  107/     202 :                     
(1)  108/     202 :                     ; ====================================================================
(1)  109/     202 :                     ; ----------------------------------------------------------------
(1)  110/     202 :                     ; Entry point
(1)  111/     202 :                     ; ----------------------------------------------------------------
(1)  112/     202 :                     
(1)  113/     202 :                     MD_Entry:
(1)  114/     202 :                     	; --------------------------------
(1)  115/     202 :                     	; Check if the system has TMSS
(1)  116/     202 : 46FC 2700           		move	#$2700,sr			; Disable interrputs
(1)  117/     206 : 1039 00A1 0001      		move.b	(sys_io).l,d0			; Read IO port
(1)  118/     20C : 0200 000F           		andi.b	#%00001111,d0			; Get version, right 4 bits
(1)  119/     210 : 670A                		beq.s	.oldmd				; If 0, Skip this part
(1)  120/     212 : 23F9 0000 0100      		move.l	($100).l,(sys_tmss).l		; Write "SEGA" to port sys_tmss
              218 : 00A1 4000          
(1)  121/     21C :                     .oldmd:
(1)  122/     21C : 4A79 00C0 0004      		tst.w	(vdp_ctrl).l			; Test VDP to unlock Video
(1)  123/     222 :                     	; --------------------------------
(1)  124/     222 : 7000                		moveq	#0,d0
(1)  125/     224 : 2C40                		movea.l	d0,a6
(1)  126/     226 : 4E66                		move.l	a6,usp
(1)  127/     228 : 41F9 FFFF 0000      		lea	($FFFF0000),a0			; Clean our "work" RAM
(1)  128/     22E : 223C FFFF D40C      		move.l	#sizeof_mdram,d1
(1)  129/     234 : 7000                		moveq	#0,d0
(1)  130/     236 : 30C0                .loop_ram:	move.w	d0,(a0)+
(1)  131/     238 : B1C1                		cmp.l	d1,a0
(1)  132/     23A : 65FA                		bcs.s	.loop_ram
(1)  133/     23C : 4CF9 7FFF 00FF      		movem.l	($FF0000),d0-a6			; Clean registers using zeros from RAM
              242 : 0000             
(1)  134/     244 : 4DF9 00C0 0000      		lea	(vdp_data),a6
(1)  135/     24A : 3E2E 0004           .wait_dma:	move.w	4(a6),d7			; Check if DMA is active.
(1)  136/     24E : 0807 0001           		btst	#1,d7
(1)  137/     252 : 66F6                		bne.s	.wait_dma
(1)  138/     254 : 2D7C C000 0000      		move.l	#$C0000000,4(a6)		; Clear palette
              25A : 0004             
(1)  139/     25C : 7E3F                		moveq	#64-1,d7
(1)  140/     25E : 7C00                		moveq	#0,d6
(1)  141/     260 :                     .palclear:
(1)  142/     260 : 3C86                		move.w	d6,(a6)
(1)  143/     262 : 51CF FFFC           		dbf	d7,.palclear
(1)  144/     266 :                     
     180/     266 : 6112                		bsr	Sound_init			; Init Sound driver FIRST
     181/     268 : 6100 0284           		bsr	Video_init			;  ''  Video
     182/     26C : 6100 0E12           		bsr	System_Init			;  ''  Values
     183/     270 : 31FC 0000 C458      		move.w	#0,(RAM_ScreenMode).w		; Start at screen 0
     184/     276 : 6000 134E           		bra.w	Md_ReadModes			; Go to SCREENJUMP section
     185/     27A :                     
     186/     27A :                     ; ---------------------------------------------
     188/     27A :                     
     189/     27A :                     ; ====================================================================
     190/     27A :                     ; --------------------------------------------------------
     191/     27A :                     ; SYSTEM routines and MODE switching code
     192/     27A :                     ;
     193/     27A :                     ; MD and PICO: Normal ROM locations
     194/     27A :                     ; CD/32X/CD32X: Loaded into RAM, This includes cartridge
     195/     27A :                     ;               to prevent bus-conflict with the SH2's
     196/     27A :                     ;               ROM area
     197/     27A :                     ; --------------------------------------------------------
     198/     27A :                     
     203/     27A :                     ; ---------------------------------------------
     204/     27A :                     
     205/     27A :                     		include	"sound/driver/gema.asm"
(1)    1/     27A :                     ; ===========================================================================
(1)    2/     27A :                     ; -------------------------------------------------------------------
(1)    3/     27A :                     ; GEMA/Nikona Sound Driver v1.0
(1)    4/     27A :                     ; by GenesisFan64 2023-2024
(1)    5/     27A :                     ;
(1)    6/     27A :                     ; Features:
(1)    7/     27A :                     ; - Support for SEGA CD's PCM channels:
(1)    8/     27A :                     ;   | All 8 channels with streaming support
(1)    9/     27A :                     ;   | for larger samples.
(1)   10/     27A :                     ; - Support for 32X's PWM:
(1)   11/     27A :                     ;   | 7 pseudo-channels in either MONO
(1)   12/     27A :                     ;   | or STEREO.
(1)   13/     27A :                     ;
(1)   14/     27A :                     ; - DMA ROM protection
(1)   15/     27A :                     ;   | This keeps DAC in a decent quality while
(1)   16/     27A :                     ;   | doing any DMA jobs in the 68k side.
(1)   17/     27A :                     ; - DAC Playback at 16000hz
(1)   18/     27A :                     ; - FM special mode with custom frequencies
(1)   19/     27A :                     ; - Autodetection for the PSG's Tone3 mode
(1)   20/     27A :                     ;
(1)   21/     27A :                     ; Notes:
(1)   22/     27A :                     ; This sound driver uses RAM area $FFFF00-$FFFFFF,
(1)   23/     27A :                     ; reserved in case I'll make a 68k version of this driver
(1)   24/     27A :                     ; just for the Sega PICO
(1)   25/     27A :                     ; Currently the Z80 writes a flag directly for a
(1)   26/     27A :                     ; workaround to bypass a data-reading hardware
(1)   27/     27A :                     ; limitation. (see Sound_Update)
(1)   28/     27A :                     ;
(1)   29/     27A :                     ; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣴⣶⡿⠿⠿⠿⣶⣦⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀
(1)   30/     27A :                     ; ⠀⠀⠀⠀⠀⠀⢀⣠⣶⢟⣿⠟⠁⢰⢋⣽⡆⠈⠙⣿⡿⣶⣄⡀⠀⠀⠀⠀⠀⠀
(1)   31/     27A :                     ; ⠀⠀⠀⠀⣠⣴⠟⠋⢠⣾⠋⠀⣀⠘⠿⠿⠃⣀⠀⠈⣿⡄⠙⠻⣦⣄⠀⠀⠀⠀
(1)   32/     27A :                     ; ⠀⢀⣴⡿⠋⠁⠀⢀⣼⠏⠺⠛⠛⠻⠂⠐⠟⠛⠛⠗⠘⣷⡀⠀⠈⠙⢿⣦⡀⠀
(1)   33/     27A :                     ; ⣴⡟⢁⣀⣠⣤⡾⢿⡟⠀⠀⠀⠘⢷⠾⠷⡾⠃⠀⠀⠀⢻⡿⢷⣤⣄⣀⡈⢻⣦
(1)   34/     27A :                     ; ⠙⠛⠛⠋⠉⠁⠀⢸⡇⠀⠀⢠⣄⠀⠀⠀⠀⣠⡄⠀⠀⢸⡇⠀⠈⠉⠙⠛⠛⠋
(1)   35/     27A :                     ; ⠀⠀⠀⠀⠀⠀⠀⢸⡇⢾⣦⣀⣹⡧⠀⠀⢼⣏⣀⣴⡷⢸⡇⠀⠀⠀⠀⠀⠀⠀
(1)   36/     27A :                     ; ⠀⠀⠀⠀⠀⠀⠀⠸⣧⡀⠈⠛⠛⠁⠀⠀⠈⠛⠛⠁⢀⣼⠇⠀⠀⠀⠀⠀⠀⠀
(1)   37/     27A :                     ; ⠀⠀⠀⠀⠀⠀⠀⢀⣘⣿⣶⣤⣀⣀⣀⣀⣀⣀⣤⣶⣿⣃⠀⠀⠀⠀⠀⠀⠀⠀
(1)   38/     27A :                     ; ⠀⠀⠀⠀⠀⣠⡶⠟⠋⢉⣀⣽⠿⠉⠉⠉⠹⢿⣍⣈⠉⠛⠷⣦⡀⠀⠀⠀⠀⠀
(1)   39/     27A :                     ; ⠀⠀⠀⠀⢾⣯⣤⣴⡾⠟⠋⠁⠀⠀⠀⠀⠀⠀⠉⠛⠷⣶⣤⣬⣿⠀⠀⠀⠀⠀
(1)   40/     27A :                     ; ⠀⠀⠀⠀⠀⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠁⠀⠀⠀⠀⠀
(1)   41/     27A :                     ; -------------------------------------------------------------------
(1)   42/     27A :                     
(1)   43/     27A :                     ; ====================================================================
(1)   44/     27A :                     ; --------------------------------------------------------
(1)   45/     27A :                     ; Macros
(1)   46/     27A :                     ; --------------------------------------------------------
(1)   47/     27A :                     
(1)   48/     27A :                     ; Shared for all DAC, PCM, PWM
(1)   49/     27A :                     ; FOR WAV SAMPLES, OFFSET STARTS AT $2C
(1)   50/     27A :                     gSmplData macro labl,file,loop
(1)   51/     27A :                     labl	label *
(1)   52/     27A :                     	dc.b ((labl_e-labl_s)&$FF),(((labl_e-labl_s)>>8)&$FF),(((labl_e-labl_s)>>16)&$FF)
(1)   53/     27A :                     	dc.b ((loop)&$FF),(((loop)>>8)&$FF),(((loop)>>16)&$FF)
(1)   54/     27A :                     labl_s:
(1)   55/     27A :                     	binclude file,$2C
(1)   56/     27A :                     labl_e:
(1)   57/     27A :                     	endm
(1)   58/     27A :                     
(1)   59/     27A :                     ; ; Failsafe version:
(1)   60/     27A :                     ; gSmpHead macro len,loop
(1)   61/     27A :                     ; 	dc.b ((len)&$FF),(((len)>>8)&$FF),(((len)>>16)&$FF)	; length
(1)   62/     27A :                     ; 	dc.b ((loop)&$FF),(((loop)>>8)&$FF),(((loop)>>16)&$FF)
(1)   63/     27A :                     ; 	endm
(1)   64/     27A :                     
(1)   65/     27A :                     ; --------------------------------------------------------
(1)   66/     27A :                     ; Variables
(1)   67/     27A :                     ; --------------------------------------------------------
(1)   68/     27A :                     
(1)   69/     27A :                     ; z80_cpu	equ $A00000		; Z80 CPU area, size: $2000
(1)   70/     27A :                     ; z80_bus 	equ $A11100		; only read bit 0 (bit 8 as WORD)
(1)   71/     27A :                     ; z80_reset	equ $A11200		; WRITE only: $0000 reset/$0100 cancel
(1)   72/     27A :                     
(1)   73/     27A :                     ; Z80-area points:
(1)   74/     27A : =$40                 zDrvFifo	equ commZfifo		; FIFO command storage
(1)   75/     27A : =$2E                 zDrvFWrt	equ commZWrite		; FIFO command index
(1)   76/     27A : =$2F                 zDrvRomBlk	equ commZRomBlk		; ROM block flag
(1)   77/     27A : =$37                 zDrvMarsBlk	equ marsBlock		; Flag to disable 32X's PWM
(1)   78/     27A : =$36                 zDrvMcdBlk	equ mcdBlock		; Flag to disable SegaCD's PCM
(1)   79/     27A : =$35                 zDrvRamSrc	equ cdRamSrcB		; RAM-read source+dest pointers
(1)   80/     27A : =$30                 zDrvRamLen	equ cdRamLen		; RAM-read length and flag
(1)   81/     27A :                     
(1)   82/     27A :                     ; --------------------------------------------------------
(1)   83/     27A :                     ; Labels
(1)   84/     27A :                     ; --------------------------------------------------------
(1)   85/     27A :                     
(1)   86/     27A : =$FFFFFF00           RAM_ZCdFlag_D	equ RAM_ZSndBuff	; transferRom flag
(1)   87/     27A :                     
(1)   88/     27A :                     ; ====================================================================
(1)   89/     27A :                     ; --------------------------------------------------------
(1)   90/     27A :                     ; Initialize Sound
(1)   91/     27A :                     ;
(1)   92/     27A :                     ; Uses:
(1)   93/     27A :                     ; a0-a1,d0-d1
(1)   94/     27A :                     ; --------------------------------------------------------
(1)   95/     27A :                     
(1)   96/     27A :                     ; 		align $80
(1)   97/     27A :                     Sound_Init:
(1)   98/     27A : 007C 0700           		ori.w	#$0700,sr
(1)  102/     27E : 33FC 0100 00A1      		move.w	#$0100,(z80_bus).l		; Get Z80 bus
              284 : 1100             
(1)  103/     286 : 33FC 0100 00A1      		move.w	#$0100,(z80_reset).l		; Z80 reset
              28C : 1200             
(1)  104/     28E :                     .wait:
(1)  105/     28E : 0839 0000 00A1      		btst	#0,(z80_bus).l
              294 : 1100             
(1)  106/     296 : 66F6                		bne.s	.wait
(1)  107/     298 : 41F9 00A0 0000      		lea	(z80_cpu).l,a0			; Clean entire Z80 FIRST.
(1)  108/     29E : 303C 1FFF           		move.w	#$1FFF,d0
(1)  109/     2A2 : 7200                		moveq	#0,d1
(1)  110/     2A4 :                     .cleanup:
(1)  111/     2A4 : 10C1                		move.b	d1,(a0)+
(1)  112/     2A6 : 51C8 FFFC           		dbf	d0,.cleanup
(1)  113/     2AA : 41F9 0000 1626      		lea	(Z80_CODE).l,a0			; a0 - Z80 code (on $880000)
(1)  114/     2B0 : 43F9 00A0 0000      		lea	(z80_cpu).l,a1			; a1 - Z80 CPU area
(1)  115/     2B6 : 303C 1F7F           		move.w	#(Z80_CODE_END-Z80_CODE)-1,d0	; d0 - Size
(1)  116/     2BA :                     
(1)  117/     2BA :                     .copy:
(1)  118/     2BA : 12D8                		move.b	(a0)+,(a1)+
(1)  119/     2BC : 51C8 FFFC           		dbf	d0,.copy
(1)  120/     2C0 : 33FC 0000 00A1      		move.w	#0,(z80_reset).l		; Reset cancel
              2C6 : 1200             
(1)  121/     2C8 : 4238 FF00           		clr.b	(RAM_ZCdFlag_D).w		; Reset Z80 transferRom flag
(1)  122/     2CC : 4E71                		nop					; Reset Z80 buffer flag
(1)  123/     2CE : 4E71                		nop
(1)  124/     2D0 : 4E71                		nop
(1)  125/     2D2 : 33FC 0100 00A1      		move.w	#$100,(z80_reset).l
              2D8 : 1200             
(1)  126/     2DA : 33FC 0000 00A1      		move.w	#0,(z80_bus).l			; Start Z80
              2E0 : 1100             
(1)  128/     2E2 : 203C 0000 470A      		move.l	#Gema_MasterList,d0
(1)  129/     2E8 : 6000 0162           		bra	gemaSetMasterList
(1)  130/     2EC :                     
(1)  131/     2EC :                     ; ----------------------------------------------------------------
(1)  132/     2EC :                     ; Sound_Update
(1)  133/     2EC :                     ;
(1)  134/     2EC :                     ; Call this during DISPLAY or call it during a VBlank wait-loop
(1)  135/     2EC :                     ; to communicate with the Z80
(1)  136/     2EC :                     ;
(1)  137/     2EC :                     ; SegaCD/CD32X:
(1)  138/     2EC :                     ; This checks if the Z80 wants to read from RAM (as it can't
(1)  139/     2EC :                     ; see it) then this CPU manually writes the RAM bytes from
(1)  140/     2EC :                     ; here to the Z80's RAM
(1)  141/     2EC :                     ; THIS IS REQUIRED for the tracks and instruments stored
(1)  142/     2EC :                     ; on RAM in case you are doing ASIC-Stamps.
(1)  143/     2EC :                     ;
(1)  144/     2EC :                     ; DAC samples are safe to read from WORD-RAM
(1)  145/     2EC :                     ; (again: if NOT using Stamps)
(1)  146/     2EC :                     ; but careful when loading new data, and make sure MAIN-CPU
(1)  147/     2EC :                     ; has the permission to read the data.
(1)  148/     2EC :                     ;
(1)  149/     2EC :                     ; Sega Pico:
(1)  150/     2EC :                     ; This will be the entire sound driver rewritten from Z80 to 68k,
(1)  151/     2EC :                     ; but this will be done in the future.
(1)  152/     2EC :                     ;
(1)  153/     2EC :                     ; Uses:
(1)  154/     2EC :                     ; d5-d7,a4-a6
(1)  155/     2EC :                     ; ----------------------------------------------------------------
(1)  156/     2EC :                     
(1)  157/     2EC :                     Sound_Update:
(1)  161/     2EC :                     	; ------------------------------------------------
(1)  162/     2EC :                     	; If transferRom wants to read from 68k RAM
(1)  163/     2EC : 4A38 FF00           		tst.b	(RAM_ZCdFlag_D).w	; *Z80 WRITES TO RAM*
(1)  164/     2F0 : 6744                		beq.s	.no_task
(1)  165/     2F2 : 4238 FF00           		clr.b	(RAM_ZCdFlag_D).w
(1)  166/     2F6 : 7E00                		moveq	#0,d7
(1)  167/     2F8 : 613E                		bsr	sndLockZ80
(1)  168/     2FA : 1E39 00A0 0030      		move.b	(z80_cpu+zDrvRamLen).l,d7
(1)  169/     300 : 6732                		beq.s	.no_size
(1)  170/     302 : 5347                		subq.w	#1,d7
(1)  171/     304 : 4DF9 00A0 0036      		lea	(z80_cpu+(zDrvRamSrc+1)),a6
(1)  172/     30A : 4BF9 00A0 0000      		lea	(z80_cpu),a5
(1)  173/     310 : 1C26                		move.b	-(a6),d6		; d6 - Source
(1)  174/     312 : 4846                		swap	d6
(1)  175/     314 : 1C26                		move.b	-(a6),d6
(1)  176/     316 : E14E                		lsl.w	#8,d6
(1)  177/     318 : 1C26                		move.b	-(a6),d6
(1)  178/     31A : 7A00                		moveq	#0,d5
(1)  179/     31C : 1A26                		move.b	-(a6),d5		; d5 - Dest
(1)  180/     31E : E14D                		lsl.w	#8,d5
(1)  181/     320 : 1A26                		move.b	-(a6),d5
(1)  182/     322 : DBC5                		add.l	d5,a5
(1)  183/     324 : 2846                		move.l	d6,a4
(1)  184/     326 :                     .copy_bytes:
(1)  185/     326 : 1ADC                		move.b	(a4)+,(a5)+
(1)  186/     328 : 51CF FFFC           		dbf	d7,.copy_bytes
(1)  187/     32C : 13FC 0000 00A0      		move.b	#0,(z80_cpu+zDrvRamLen).l
              332 : 0030             
(1)  188/     334 :                     .no_size:
(1)  189/     334 : 6116                		bsr	sndUnlockZ80
(1)  190/     336 :                     .no_task:
(1)  192/     336 : 4E75                		rts
(1)  193/     338 :                     
(1)  194/     338 :                     ; ====================================================================
(1)  195/     338 :                     ; ----------------------------------------------------------------
(1)  196/     338 :                     ; Subroutines
(1)  197/     338 :                     ; ----------------------------------------------------------------
(1)  198/     338 :                     
(1)  199/     338 :                     ; ------------------------------------------------
(1)  200/     338 :                     ; Lock Z80, get bus
(1)  201/     338 :                     ; ------------------------------------------------
(1)  202/     338 :                     
(1)  203/     338 :                     sndLockZ80:
(1)  205/     338 : 33FC 0100 00A1      		move.w	#$0100,(z80_bus).l
              33E : 1100             
(1)  206/     340 :                     .wait:
(1)  207/     340 : 0839 0000 00A1      		btst	#0,(z80_bus).l
              346 : 1100             
(1)  208/     348 : 66F6                		bne.s	.wait
(1)  210/     34A : 4E75                		rts
(1)  211/     34C :                     
(1)  212/     34C :                     ; ------------------------------------------------
(1)  213/     34C :                     ; Unlock Z80, return bus
(1)  214/     34C :                     ; ------------------------------------------------
(1)  215/     34C :                     
(1)  216/     34C :                     sndUnlockZ80:
(1)  218/     34C : 33FC 0000 00A1      		move.w	#0,(z80_bus).l
              352 : 1100             
(1)  220/     354 : 4E75                		rts
(1)  221/     356 :                     
(1)  222/     356 :                     ; ------------------------------------------------
(1)  223/     356 :                     ; 68K-to-Z80 sound request enter/exit routines
(1)  224/     356 :                     ;
(1)  225/     356 :                     ; d6 - commFifo index
(1)  226/     356 :                     ; ------------------------------------------------
(1)  227/     356 :                     
(1)  228/     356 :                     sndReq_Enter:
(1)  230/     356 : 33FC 0100 00A1      		move.w	#$0100,(z80_bus).l		; Request Z80 Stop
              35C : 1100             
(1)  232/     35E : 9EFC 0004           		suba	#4,sp				; Extra jump return
(1)  233/     362 : 48E7 0306           		movem.l	d6-d7/a5-a6,-(sp)		; Save these regs to the stack
(1)  234/     366 : DEFC 0014           		adda	#(4*4)+4,sp			; Go back to the RTS jump
(1)  235/     36A : 4BF9 00A0 002E      		lea	(z80_cpu+zDrvFWrt),a5		; a5 - commZWrite
(1)  236/     370 : 4DF9 00A0 0040      		lea	(z80_cpu+zDrvFifo),a6		; a6 - fifo command list
(1)  237/     376 :                     .wait:
(1)  239/     376 : 0839 0000 00A1      		btst	#0,(z80_bus).l			; Wait for Z80
              37C : 1100             
(1)  240/     37E : 66F6                		bne.s	.wait
(1)  242/     380 : 1C15                		move.b	(a5),d6				; d6 - index fifo position
(1)  243/     382 : 4886                		ext.w	d6				; extend to 16 bits
(1)  244/     384 : 4E75                		rts
(1)  245/     386 :                     ; JUMP ONLY
(1)  246/     386 :                     sndReq_Exit:
(1)  248/     386 : 33FC 0000 00A1      		move.w	#0,(z80_bus).l
              38C : 1100             
(1)  250/     38E : 9EFC 0018           		suba	#8+(4*4),sp
(1)  251/     392 : 4CDF 60C0           		movem.l	(sp)+,d6-d7/a5-a6		; And pop those back
(1)  252/     396 : DEFC 0008           		adda	#8,sp
(1)  253/     39A :                     ; 		andi.w	#$F8FF,sr			; Enable interrupts
(1)  254/     39A : 4E75                		rts
(1)  255/     39C :                     
(1)  256/     39C :                     ; ------------------------------------------------
(1)  257/     39C :                     ; Send request id and arguments
(1)  258/     39C :                     ;
(1)  259/     39C :                     ; Input:
(1)  260/     39C :                     ; d7 - byte to write
(1)  261/     39C :                     ; d6 - index pointer
(1)  262/     39C :                     ; a5 - commZWrite, update index
(1)  263/     39C :                     ; a6 - commZfifo command list
(1)  264/     39C :                     ;
(1)  265/     39C :                     ; *** CALL sndReq_Enter FIRST ***
(1)  266/     39C :                     ; ------------------------------------------------
(1)  267/     39C :                     
(1)  268/     39C :                     sndReq_scmd:
(1)  269/     39C : 1DBC 00FF 6000      		move.b	#-1,(a6,d6.w)			; write command-start flag
(1)  270/     3A2 : 5206                		addq.b	#1,d6				; next fifo pos
(1)  271/     3A4 : 0206 000F           		andi.b	#MAX_ZCMND-1,d6			; * Z80 label *
(1)  272/     3A8 : 600C                		bra.s	sndReq_sbyte
(1)  273/     3AA :                     sndReq_slong:
(1)  274/     3AA : 610A                		bsr	sndReq_sbyte
(1)  275/     3AC : E09F                		ror.l	#8,d7
(1)  276/     3AE :                     sndReq_saddr:	; 24-bit address
(1)  277/     3AE : 6106                		bsr	sndReq_sbyte
(1)  278/     3B0 : E09F                		ror.l	#8,d7
(1)  279/     3B2 :                     sndReq_sword:
(1)  280/     3B2 : 6102                		bsr	sndReq_sbyte
(1)  281/     3B4 : E09F                		ror.l	#8,d7
(1)  282/     3B6 :                     sndReq_sbyte:
(1)  283/     3B6 : 1D87 6000           		move.b	d7,(a6,d6.w)			; write byte
(1)  284/     3BA : 5206                		addq.b	#1,d6				; next fifo pos
(1)  285/     3BC : 0206 000F           		andi.b	#MAX_ZCMND-1,d6			; * Z80 label *
(1)  286/     3C0 : 1A86                		move.b	d6,(a5)				; update commZWrite
(1)  287/     3C2 : 4E75                		rts
(1)  288/     3C4 :                     
(1)  289/     3C4 :                     ; --------------------------------------------------------
(1)  290/     3C4 :                     ; gemaDmaPause
(1)  291/     3C4 :                     ;
(1)  292/     3C4 :                     ; Call this BEFORE doing any DMA transfer
(1)  293/     3C4 :                     ; --------------------------------------------------------
(1)  294/     3C4 :                     
(1)  295/     3C4 :                     gemaDmaPause:
(1)  299/     3C4 : 4847                		swap	d7
(1)  300/     3C6 : 4846                		swap	d6
(1)  301/     3C8 :                     ; .retry_flag:
(1)  302/     3C8 : 6100 FF6E           		bsr	sndLockZ80
(1)  303/     3CC : 13FC 0001 00A0      		move.b	#1,(z80_cpu+zDrvRomBlk)		; Block flag for Z80
              3D2 : 002F             
(1)  304/     3D4 : 6100 FF76           		bsr	sndUnlockZ80
(1)  305/     3D8 : 3E3C 0060           		move.w	#96,d7				; ...Small delay...
(1)  306/     3DC : 51CF FFFE           		dbf	d7,*
(1)  307/     3E0 : 4846                		swap	d6
(1)  308/     3E2 : 4847                		swap	d7
(1)  309/     3E4 : 4E75                		rts
(1)  311/     3E6 :                     
(1)  312/     3E6 :                     ; --------------------------------------------------------
(1)  313/     3E6 :                     ; gemaDmaResume
(1)  314/     3E6 :                     ;
(1)  315/     3E6 :                     ; Call this AFTER finishing DMA transfer
(1)  316/     3E6 :                     ; --------------------------------------------------------
(1)  317/     3E6 :                     
(1)  318/     3E6 :                     gemaDmaResume:
(1)  322/     3E6 : 4847                		swap	d7
(1)  323/     3E8 : 4846                		swap	d6
(1)  324/     3EA : 6100 FF4C           		bsr	sndLockZ80
(1)  325/     3EE : 13FC 0000 00A0      		move.b	#0,(z80_cpu+zDrvRomBlk)		; Block flag for Z80
              3F4 : 002F             
(1)  326/     3F6 : 6100 FF54           		bsr	sndUnlockZ80
(1)  327/     3FA : 4846                		swap	d6
(1)  328/     3FC : 4847                		swap	d7
(1)  329/     3FE : 4E75                		rts
(1)  331/     400 :                     
(1)  332/     400 :                     ; --------------------------------------------------------
(1)  333/     400 :                     ; gemaDmaPauseRom
(1)  334/     400 :                     ;
(1)  335/     400 :                     ; Call this BEFORE doing any DMA transfer
(1)  336/     400 :                     ;
(1)  337/     400 :                     ; *** BANKS $880000/$900000 WILL BE GONE ***
(1)  338/     400 :                     ; --------------------------------------------------------
(1)  339/     400 :                     
(1)  340/     400 :                     gemaDmaPauseRom:
(1)  344/     400 : 4847                		swap	d7
(1)  345/     402 : 4846                		swap	d6
(1)  346/     404 : 6100 FF32           		bsr	sndLockZ80
(1)  347/     408 : 13FC 0001 00A0      		move.b	#1,(z80_cpu+zDrvRomBlk)		; Block flag for Z80
              40E : 002F             
(1)  348/     410 : 6100 FF3A           		bsr	sndUnlockZ80
(1)  349/     414 : 3E3C 0060           		move.w	#96,d7				; ...Small delay...
(1)  350/     418 : 51CF FFFE           		dbf	d7,*
(1)  351/     41C :                     ; 	if MARS|MARSCD
(1)  352/     41C :                     ; 		move.w	#2,d6
(1)  353/     41C :                     ; 		bsr	sndReqCmd
(1)  354/     41C :                     ; 	endif
(1)  358/     41C : 4846                		swap	d6
(1)  359/     41E : 4847                		swap	d7
(1)  360/     420 : 4E75                		rts
(1)  362/     422 :                     
(1)  363/     422 :                     ; --------------------------------------------------------
(1)  364/     422 :                     ; gemaDmaResumeRom
(1)  365/     422 :                     ;
(1)  366/     422 :                     ; Call this AFTER finishing DMA transfer
(1)  367/     422 :                     ;
(1)  368/     422 :                     ; *** BANKS $880000/$900000 GET RESTORED ***
(1)  369/     422 :                     ; --------------------------------------------------------
(1)  370/     422 :                     
(1)  371/     422 :                     gemaDmaResumeRom:
(1)  375/     422 : 4847                		swap	d7
(1)  376/     424 : 4846                		swap	d6
(1)  377/     426 : 6100 FF10           		bsr	sndLockZ80
(1)  378/     42A : 13FC 0000 00A0      		move.b	#0,(z80_cpu+zDrvRomBlk)		; Block flag for Z80
              430 : 002F             
(1)  379/     432 : 6100 FF18           		bsr	sndUnlockZ80
(1)  380/     436 :                     ; 	if MARS|MARSCD
(1)  381/     436 :                     ; 		move.w	#3,d6
(1)  382/     436 :                     ; 		bsr	sndReqCmd
(1)  383/     436 :                     ; 	endif
(1)  387/     436 : 4846                		swap	d6
(1)  388/     438 : 4847                		swap	d7
(1)  389/     43A : 4E75                		rts
(1)  391/     43C :                     
(1)  392/     43C :                     ; ====================================================================
(1)  393/     43C :                     ; --------------------------------------------------------
(1)  394/     43C :                     ; USER CALLS
(1)  395/     43C :                     ; --------------------------------------------------------
(1)  396/     43C :                     
(1)  397/     43C :                     ; --------------------------------------------------------
(1)  398/     43C :                     ; gemaTest
(1)  399/     43C :                     ;
(1)  400/     43C :                     ; For TESTING only.
(1)  401/     43C :                     ; --------------------------------------------------------
(1)  402/     43C :                     
(1)  403/     43C :                     gemaTest:
(1)  404/     43C : 6100 FF18           		bsr	sndReq_Enter
(1)  405/     440 : 3E3C 0000           		move.w	#$00,d7		; Command $00
(1)  406/     444 : 6100 FF56           		bsr	sndReq_scmd
(1)  407/     448 : 6000 FF3C           		bra 	sndReq_Exit
(1)  408/     44C :                     
(1)  409/     44C :                     ; --------------------------------------------------------
(1)  410/     44C :                     ; gemaSetMasterList
(1)  411/     44C :                     ;
(1)  412/     44C :                     ; Set Tracklist location
(1)  413/     44C :                     ;
(1)  414/     44C :                     ; Input:
(1)  415/     44C :                     ; d0.l - 68k pointer
(1)  416/     44C :                     ; --------------------------------------------------------
(1)  417/     44C :                     
(1)  418/     44C :                     gemaSetMasterList:
(1)  419/     44C : 6100 FF08           		bsr	sndReq_Enter
(1)  420/     450 : 3E3C 0001           		move.w	#$01,d7		; Command $01
(1)  421/     454 : 6100 FF46           		bsr	sndReq_scmd
(1)  422/     458 : 2E00                		move.l	d0,d7
(1)  423/     45A : 6100 FF4E           		bsr	sndReq_slong
(1)  424/     45E : 6000 FF26           		bra 	sndReq_Exit
(1)  425/     462 :                     
(1)  426/     462 :                     ; --------------------------------------------------------
(1)  427/     462 :                     ; gemaPlayTrack
(1)  428/     462 :                     ;
(1)  429/     462 :                     ; Play a sequence with arguments
(1)  430/     462 :                     ;
(1)  431/     462 :                     ; Input:
(1)  432/     462 :                     ; d0.b - Playback slot number
(1)  433/     462 :                     ;        If -1: use auto-search
(1)  434/     462 :                     ; d1.b - Sequence number
(1)  435/     462 :                     ; d2.b - Starting block
(1)  436/     462 :                     ; --------------------------------------------------------
(1)  437/     462 :                     
(1)  438/     462 :                     gemaPlayTrack:
(1)  439/     462 : 6100 FEF2           		bsr	sndReq_Enter
(1)  440/     466 : 3E3C 0002           		move.w	#$02,d7		; Command $02
(1)  441/     46A : 6100 FF30           		bsr	sndReq_scmd
(1)  442/     46E : 1E01                		move.b	d1,d7		; d1.b Seq number
(1)  443/     470 : 6100 FF44           		bsr	sndReq_sbyte
(1)  444/     474 : 1E02                		move.b	d2,d7		; d2.b Block <--
(1)  445/     476 : 6100 FF3E           		bsr	sndReq_sbyte
(1)  446/     47A : 1E00                		move.b	d0,d7		; d0.b Slot
(1)  447/     47C : 6100 FF38           		bsr	sndReq_sbyte
(1)  448/     480 : 6000 FF04           		bra 	sndReq_Exit
(1)  449/     484 :                     
(1)  450/     484 :                     ; --------------------------------------------------------
(1)  451/     484 :                     ; gemaStopTrack
(1)  452/     484 :                     ;
(1)  453/     484 :                     ; Stops tracks with the same sequence number
(1)  454/     484 :                     ;
(1)  455/     484 :                     ; Input:
(1)  456/     484 :                     ; d0.b - Playback slot number
(1)  457/     484 :                     ;        If -1: stop all slots with the same number
(1)  458/     484 :                     ; d1.b - Sequence number to search for
(1)  459/     484 :                     ; --------------------------------------------------------
(1)  460/     484 :                     
(1)  461/     484 :                     gemaStopTrack:
(1)  462/     484 : 6100 FED0           		bsr	sndReq_Enter
(1)  463/     488 : 3E3C 0003           		move.w	#$03,d7		; Command $03
(1)  464/     48C : 6100 FF0E           		bsr	sndReq_scmd
(1)  465/     490 : 1E01                		move.b	d1,d7		; d0.b Seq number
(1)  466/     492 : 6100 FF22           		bsr	sndReq_sbyte
(1)  467/     496 : 1E00                		move.b	d0,d7		; d1.b Slot
(1)  468/     498 : 6100 FF1C           		bsr	sndReq_sbyte
(1)  469/     49C : 6000 FEE8           		bra 	sndReq_Exit
(1)  470/     4A0 :                     
(1)  471/     4A0 :                     ; --------------------------------------------------------
(1)  472/     4A0 :                     ; gemaFadeTrack
(1)  473/     4A0 :                     ;
(1)  474/     4A0 :                     ; Set Master volume to a track slot.
(1)  475/     4A0 :                     ;
(1)  476/     4A0 :                     ; Input:
(1)  477/     4A0 :                     ; d0.b - Playback slot number
(1)  478/     4A0 :                     ;        If -1: Apply to all slots
(1)  479/     4A0 :                     ; d1.b - Target volume
(1)  480/     4A0 :                     ; d2.b - Fade speed TODO
(1)  481/     4A0 :                     ;
(1)  482/     4A0 :                     ; Notes:
(1)  483/     4A0 :                     ; - DO NOT MIX THIS WITH gemaSetTrackVol
(1)  484/     4A0 :                     ; - In v1.0 this only works on (re)start
(1)  485/     4A0 :                     ;   or during new notes on playback.
(1)  486/     4A0 :                     ; --------------------------------------------------------
(1)  487/     4A0 :                     
(1)  488/     4A0 :                     gemaFadeTrack:
(1)  489/     4A0 : 6100 FEB4           		bsr	sndReq_Enter
(1)  490/     4A4 : 3E3C 0005           		move.w	#$05,d7		; Command $05
(1)  491/     4A8 : 6100 FEF2           		bsr	sndReq_scmd
(1)  492/     4AC : 1E01                		move.b	d1,d7		; d0.b Target volume
(1)  493/     4AE : 6100 FF06           		bsr	sndReq_sbyte
(1)  494/     4B2 : 1E00                		move.b	d0,d7		; d1.b Slot
(1)  495/     4B4 : 6100 FF00           		bsr	sndReq_sbyte
(1)  496/     4B8 : 6000 FECC           		bra 	sndReq_Exit
(1)  497/     4BC :                     
(1)  498/     4BC :                     ; --------------------------------------------------------
(1)  499/     4BC :                     ; gemaSetTrackVol
(1)  500/     4BC :                     ;
(1)  501/     4BC :                     ; Set Master volume to a track slot.
(1)  502/     4BC :                     ;
(1)  503/     4BC :                     ; Input:
(1)  504/     4BC :                     ; d0.b - Playback slot number
(1)  505/     4BC :                     ;        If -1: Set to all slots
(1)  506/     4BC :                     ; d1.b - Master volume ($00-$40 max-min)
(1)  507/     4BC :                     ;
(1)  508/     4BC :                     ; Notes:
(1)  509/     4BC :                     ; - DO NOT MIX THIS WITH gemaFadeTrack
(1)  510/     4BC :                     ; - In v1.0 this only works on (re)start
(1)  511/     4BC :                     ;   or during new notes on playback.
(1)  512/     4BC :                     ; --------------------------------------------------------
(1)  513/     4BC :                     
(1)  514/     4BC :                     gemaSetTrackVol:
(1)  515/     4BC : 6100 FE98           		bsr	sndReq_Enter
(1)  516/     4C0 : 3E3C 0006           		move.w	#$06,d7		; Command $06
(1)  517/     4C4 : 6100 FED6           		bsr	sndReq_scmd
(1)  518/     4C8 : 1E01                		move.b	d1,d7		; d0.b Volume data <--
(1)  519/     4CA : 6100 FEEA           		bsr	sndReq_sbyte
(1)  520/     4CE : 1E00                		move.b	d0,d7		; d1.b Slot
(1)  521/     4D0 : 6100 FEE4           		bsr	sndReq_sbyte
(1)  522/     4D4 : 6000 FEB0           		bra 	sndReq_Exit
(1)  523/     4D8 :                     
(1)  524/     4D8 :                     ; --------------------------------------------------------
(1)  525/     4D8 :                     ; gemaSetBeats
(1)  526/     4D8 :                     ;
(1)  527/     4D8 :                     ; Sets global subbeats
(1)  528/     4D8 :                     ;
(1)  529/     4D8 :                     ; d0.w - sub-beats
(1)  530/     4D8 :                     ; --------------------------------------------------------
(1)  531/     4D8 :                     
(1)  532/     4D8 :                     ; TODO: find a way to calculate this and
(1)  533/     4D8 :                     ; explain to the user.
(1)  534/     4D8 :                     
(1)  535/     4D8 :                     gemaSetBeats:
(1)  536/     4D8 : 6100 FE7C           		bsr	sndReq_Enter
(1)  537/     4DC : 3E3C 0007           		move.w	#$07,d7		; Command $07
(1)  538/     4E0 : 6100 FEBA           		bsr	sndReq_scmd
(1)  539/     4E4 : 3E00                		move.w	d0,d7
(1)  540/     4E6 : 6100 FECA           		bsr	sndReq_sword
(1)  541/     4EA : 6000 FE9A           		bra 	sndReq_Exit
(1)  542/     4EE :                     
     206/     4EE :                     		include	"system/md/video.asm"
(1)    1/     4EE :                     ; ===========================================================================
(1)    2/     4EE :                     ; ----------------------------------------------------------------
(1)    3/     4EE :                     ; Genesis VDP section
(1)    4/     4EE :                     ; ----------------------------------------------------------------
(1)    5/     4EE :                     
(1)    6/     4EE :                     ; ====================================================================
(1)    7/     4EE :                     ; --------------------------------------------------------
(1)    8/     4EE :                     ; Settings
(1)    9/     4EE :                     ; --------------------------------------------------------
(1)   10/     4EE :                     
(1)   11/     4EE : =$18                 MAX_MDOBJ	equ 24		; MAX Objects
(1)   12/     4EE : =$18                 MAX_MDDMATSK	equ 24		; MAX DMA BLAST entries
(1)   13/     4EE : =$7FF                varNullVram	equ $07FF	; Default Blank cell
(1)   14/     4EE : =$580                varPrintVram	equ $0580	; Default location of the PRINT text graphics
(1)   15/     4EE : =$3                  varPrintPal	equ 3		; Palette to use for the printable text
(1)   16/     4EE :                     
(1)   17/     4EE :                     ; --------------------------------------------------------
(1)   18/     4EE :                     ; Variables
(1)   19/     4EE :                     ; --------------------------------------------------------
(1)   20/     4EE :                     
(1)   21/     4EE :                     ; VDP Register $80
(1)   22/     4EE : =$2                  HVStop		equ $02
(1)   23/     4EE : =$10                 HintEnbl	equ $10
(1)   24/     4EE : =$1                  bitHVStop	equ 1
(1)   25/     4EE : =$4                  bitHintEnbl	equ 4
(1)   26/     4EE :                     
(1)   27/     4EE :                     ; VDP Register $81
(1)   28/     4EE : =$40                 DispEnbl 	equ $40
(1)   29/     4EE : =$20                 VintEnbl 	equ $20
(1)   30/     4EE : =$10                 DmaEnbl		equ $10
(1)   31/     4EE : =$6                  bitDispEnbl	equ 6
(1)   32/     4EE : =$5                  bitVintEnbl	equ 5
(1)   33/     4EE : =$4                  bitDmaEnbl	equ 4
(1)   34/     4EE : =$3                  bitV30		equ 3
(1)   35/     4EE :                     
(1)   36/     4EE :                     ; vdp_ctrl READ bits (full WORD)
(1)   37/     4EE : =$9                  bitFifoE	equ 9		; DMA FIFO empty
(1)   38/     4EE : =$8                  bitFifoF	equ 8		; DMA FIFO full
(1)   39/     4EE : =$7                  bitVInt		equ 7		; Vertical interrupt
(1)   40/     4EE : =$6                  bitSprOvr	equ 6		; Sprite overflow
(1)   41/     4EE : =$5                  bitSprCol	equ 5		; Sprite collision
(1)   42/     4EE : =$4                  bitOdd		equ 4		; EVEN or ODD frame displayed on interlace mode
(1)   43/     4EE : =$3                  bitVBlk		equ 3		; Inside VBlank
(1)   44/     4EE : =$2                  bitHBlk		equ 2		; Inside HBlank
(1)   45/     4EE : =$1                  bitDma		equ 1		; Only works for FILL and COPY
(1)   46/     4EE : =$0                  bitPal		equ 0
(1)   47/     4EE :                     
(1)   48/     4EE :                     ; md_bg_flags
(1)   49/     4EE : =$0                  bitDrwR		equ 0
(1)   50/     4EE : =$1                  bitDrwL		equ 1
(1)   51/     4EE : =$2                  bitDrwD		equ 2
(1)   52/     4EE : =$3                  bitDrwU		equ 3
(1)   53/     4EE : =$6                  bitMarsBg	equ 6
(1)   54/     4EE : =$7                  bitBgOn		equ 7
(1)   55/     4EE :                     
(1)   56/     4EE :                     ; ====================================================================
(1)   57/     4EE :                     ; ----------------------------------------------------------------
(1)   58/     4EE :                     ; Structs
(1)   59/     4EE :                     ; ----------------------------------------------------------------
(1)   60/     4EE :                     
(1)   61/     4EE :                     ; --------------------------------
(1)   62/     4EE :                     ; object strct
(1)   63/     4EE :                     ; --------------------------------
(1)   64/     4EE :                     
(1)   65/     4EE : (MACRO)              		strct 0
(1)   65/     4EE : =$4EE                GLBL_LASTPC     set *
(1)   65/FFFFFFFFFFFFCAF2 :                                     dephase
(1)   65/       0 :                                     phase 0
(1)   65/       0 : =$0                  GLBL_LASTORG    set *
(1)   66/       0 :                     obj_code	ds.l 1		; Object code, 0 == no object
(1)   67/       4 :                     obj_x		ds.l 1		; Object X Position 0000.0000
(1)   68/       8 :                     obj_y		ds.l 1		; Object Y Position 0000.0000
(1)   69/       C :                     obj_map		ds.l 1		; Object Sprite map data location
(1)   70/      10 :                     obj_dma		ds.l 1		; Object DMA map, 0 == Don't use DMA
(1)   71/      14 :                     obj_vram	ds.w 1		; Object VRAM position (If DMA enabled: output location)
(1)   72/      16 :                     obj_x_spd	ds.w 1		; Object X Speed 00.00
(1)   73/      18 :                     obj_y_spd	ds.w 1		; Object Y Speed 00.00
(1)   74/      1A :                     obj_anim_indx	ds.w 1		; * Object animation script index (obj_anim + obj_anim_indx)
(1)   75/      1C :                     obj_anim_id	ds.w 1		; * Object animation number: $ccss c-current s-saved
(1)   76/      1E :                     obj_frame	ds.w 1		; * Object current frame
(1)   77/      20 :                     obj_anim_spd	ds.b 1		; * Object animation delay
(1)   78/      21 :                     obj_index	ds.b 1		; Object code index
(1)   79/      22 :                     obj_set		ds.b 1		; Object settings
(1)   80/      23 :                     obj_subid	ds.b 1		; Object Sub-ID for Object placement
(1)   81/      24 :                     obj_status	ds.b 1		; Object custom status
(1)   82/      25 :                     obj_FREE	ds.b 1		; (FILLER align byte)
(1)   83/      26 :                     obj_ram		ds.b $40	; Object's own RAM
(1)   84/      66 :                     sizeof_mdobj	ds.l 0
(1)   85/      68 : (MACRO)              		endstrct
(1)   85/       0 :                                     org GLBL_LASTORG
(1)   85/     4EE :                                     phase GLBL_LASTPC
(1)   86/     4EE :                     ; 		message "\{sizeof_mdobj}"
(1)   87/     4EE :                     
(1)   88/     4EE :                     ; --------------------------------
(1)   89/     4EE :                     ; ** obj_set
(1)   90/     4EE : =$7                  bitobj_Mars	equ	7	; 32X ONLY: This objects draws to the 32X side (256-color sprite)
(1)   91/     4EE : =$1                  bitobj_flipV	equ	1	; Set to flip object Vertically
(1)   92/     4EE : =$0                  bitobj_flipH	equ	0	; Set to flip object Horizontally
(1)   93/     4EE :                     
(1)   94/     4EE :                     ; --------------------------------
(1)   95/     4EE :                     ; ** obj_set
(1)   96/     4EE :                     ; bitobj_air	equ	0	; set if floating/jumping
(1)   97/     4EE :                     
(1)   98/     4EE :                     ; --------------------------------
(1)   99/     4EE :                     ; ** obj_size
(1)  100/     4EE :                     ; at_u		equ	3
(1)  101/     4EE :                     ; at_d		equ	2
(1)  102/     4EE :                     ; at_l		equ	1
(1)  103/     4EE :                     ; at_r		equ	0
(1)  104/     4EE :                     
(1)  105/     4EE :                     ; ====================================================================
(1)  106/     4EE :                     ; ----------------------------------------------------------------
(1)  107/     4EE :                     ; Video RAM
(1)  108/     4EE :                     ; ----------------------------------------------------------------
(1)  109/     4EE :                     
(1)  110/     4EE : (MACRO)              			strct RAM_MdVideo
(1)  110/     4EE : =$4EE                GLBL_LASTPC     set *
(1)  110/       0 :                                     dephase
(1)  110/FFFFFFFFFFFFA004 :                                     phase RAM_MDVIDEO
(1)  110/FFFFFFFFFFFFA004 : =$FFFFFFFFFFFFA004   GLBL_LASTORG    set *
(1)  111/FFFFFFFFFFFFA004 :                     RAM_HorScroll		ds.l 240			; DMA Horizontal scroll data
(1)  112/FFFFFFFFFFFFA3C4 :                     RAM_VerScroll		ds.l 320/16			; DMA Vertical scroll data
(1)  113/FFFFFFFFFFFFA414 :                     RAM_Sprites		ds.w 8*80			; DMA Sprites
(1)  114/FFFFFFFFFFFFA914 :                     RAM_SprDrwPz		ds.w 8*80			; External sprite pieces
(1)  115/FFFFFFFFFFFFAE14 :                     RAM_Palette		ds.w 64				; DMA palette
(1)  116/FFFFFFFFFFFFAE94 :                     RAM_MdMarsPalFd		ds.w 256			; Target 32X palette for FadeIn/Out (NOTE: CPU intensive)
(1)  117/FFFFFFFFFFFFB094 :                     RAM_PaletteFd		ds.w 64				; Target MD palette for FadeIn/Out
(1)  118/FFFFFFFFFFFFB114 :                     RAM_VdpDmaList		ds.b $10*MAX_MDDMATSK		; DMA BLAST list for VBlank
(1)  119/FFFFFFFFFFFFB294 :                     RAM_Objects		ds.b MAX_MDOBJ*sizeof_mdobj	; Objects
(1)  120/FFFFFFFFFFFFBC24 :                     RAM_ObjDispList		ds.w MAX_MDOBJ			; half-RAM pointers for display (Obj|Extra)
(1)  121/FFFFFFFFFFFFBC54 :                     RAM_VidPrntList		ds.w 3*64			; Video_Print list: Address, Type
(1)  122/FFFFFFFFFFFFBDD4 :                     RAM_FrameCount		ds.l 1				; Frames counter
(1)  123/FFFFFFFFFFFFBDD8 :                     RAM_SprDrwCntr		ds.w 1
(1)  124/FFFFFFFFFFFFBDDA :                     RAM_SprLinkNum		ds.w 1
(1)  125/FFFFFFFFFFFFBDDC :                     RAM_VdpExWrite		ds.w 1
(1)  126/FFFFFFFFFFFFBDDE :                     RAM_VdpDmaIndx		ds.w 1				; Current index in DMA BLAST list
(1)  127/FFFFFFFFFFFFBDE0 :                     RAM_VdpDmaMod		ds.w 1				; Mid-write flag
(1)  128/FFFFFFFFFFFFBDE2 :                     RAM_VidPrntVram		ds.w 1				; Default VRAM location for ASCII text used by Video_Print
(1)  129/FFFFFFFFFFFFBDE4 :                     RAM_FadeMdReq		ds.w 1				; FadeIn/Out request for Genesis palette (01-FadeIn 02-FadeOut)
(1)  130/FFFFFFFFFFFFBDE6 :                     RAM_FadeMdIncr		ds.w 1				; Fading increment count
(1)  131/FFFFFFFFFFFFBDE8 :                     RAM_FadeMdDelay		ds.w 1				; Fading delay
(1)  132/FFFFFFFFFFFFBDEA :                     RAM_FadeMdTmr		ds.w 1				; Fading delay timer
(1)  133/FFFFFFFFFFFFBDEC :                     RAM_FadeMarsReq		ds.w 1				; Same thing but for 32X's 256-color (01-FadeIn 02-FadeOut)
(1)  134/FFFFFFFFFFFFBDEE :                     RAM_FadeMarsIncr	ds.w 1				; (Hint: Set to 4 to syncronize with Genesis' FadeIn/Out)
(1)  135/FFFFFFFFFFFFBDF0 :                     RAM_FadeMarsDelay	ds.w 1
(1)  136/FFFFFFFFFFFFBDF2 :                     RAM_FadeMarsTmr		ds.w 1
(1)  137/FFFFFFFFFFFFBDF4 :                     RAM_MdMars_DrawAll	ds.w 1
(1)  138/FFFFFFFFFFFFBDF6 :                     RAM_VdpRegs		ds.b 24				; VDP Register cache
(1)  139/FFFFFFFFFFFFBE0E :                     sizeof_mdvid		ds.l 0
(1)  140/FFFFFFFFFFFFBE14 : (MACRO)              			endstrct
(1)  140/FFFFFFFFFFFFA004 :                                     org GLBL_LASTORG
(1)  140/     4EE :                                     phase GLBL_LASTPC
(1)  141/     4EE :                     
(1)  142/     4EE : (MACRO)              		erreport "MD VIDEO RAM",sizeof_mdvid-RAM_MdVideo,MAX_MdVideo
(1)  143/     4EE :                     
(1)  144/     4EE :                     ; ====================================================================
(1)  145/     4EE :                     ; --------------------------------------------------------
(1)  146/     4EE :                     ; Initialize Genesis video
(1)  147/     4EE :                     ;
(1)  148/     4EE :                     ; Breaks:
(1)  149/     4EE :                     ; d6-d7/a5-a6
(1)  150/     4EE :                     ; --------------------------------------------------------
(1)  151/     4EE :                     
(1)  152/     4EE :                     Video_Init:
(1)  153/     4EE : 4DF8 A004           		lea	(RAM_MdVideo).w,a6		; Clear our RAM section
(1)  154/     4F2 : 3C3C 8000           		move.w	#$8000,d6
(1)  155/     4F6 : 3E3C 1E09           		move.w	#(sizeof_mdvid-RAM_MdVideo)-1,d7
(1)  156/     4FA :                     .clrram:
(1)  157/     4FA : 1CC6                		move.b	d6,(a6)+			; (Write the LSB zero)
(1)  158/     4FC : 51CF FFFC           		dbf	d7,.clrram
(1)  159/     500 : 31FC 0001 BDDA      		move.w	#1,(RAM_SprLinkNum).w
(1)  160/     506 : 4DFA 0030           		lea	list_vdpregs(pc),a6		; Write "cache'd" VDP registers
(1)  161/     50A : 4BF8 BDF6           		lea	(RAM_VdpRegs).w,a5
(1)  162/     50E : 3E3C 0010           		move.w	#17-1,d7
(1)  163/     512 :                     .loop:
(1)  164/     512 : 1C1E                		move.b	(a6)+,d6
(1)  165/     514 : 1AC6                		move.b	d6,(a5)+
(1)  166/     516 : 51CF FFFA           		dbf	d7,.loop
(1)  167/     51A :                     
(1)  168/     51A :                     ; --------------------------------------------------------
(1)  169/     51A :                     ; Video_Update
(1)  170/     51A :                     ;
(1)  171/     51A :                     ; Writes register data stored in RAM to VDP
(1)  172/     51A :                     ; from registers $80 to $90
(1)  173/     51A :                     ;
(1)  174/     51A :                     ; WINDOW registers $91 and $92 are written
(1)  175/     51A :                     ; manually.
(1)  176/     51A :                     ;
(1)  177/     51A :                     ; Breaks:
(1)  178/     51A :                     ; d6-d7/a5-a6
(1)  179/     51A :                     ; --------------------------------------------------------
(1)  180/     51A :                     
(1)  181/     51A :                     Video_Update:
(1)  182/     51A : 4DF8 BDF6           		lea	(RAM_VdpRegs).w,a6
(1)  183/     51E : 4BF9 00C0 0004      		lea	(vdp_ctrl),a5
(1)  184/     524 : 3C3C 8000           		move.w	#$8000,d6
(1)  185/     528 : 7E10                		moveq	#17-1,d7
(1)  186/     52A :                     .loop:
(1)  187/     52A : 1C1E                		move.b	(a6)+,d6
(1)  188/     52C : 3A86                		move.w	d6,(a5)
(1)  189/     52E : 0646 0100           		addi.w	#$0100,d6
(1)  190/     532 : 51CF FFF6           		dbf	d7,.loop
(1)  191/     536 :                     .exit:
(1)  192/     536 : 4E75                		rts
(1)  193/     538 :                     
(1)  194/     538 :                     ; ------------------------------------------------
(1)  195/     538 :                     ; Default VDP register settings
(1)  196/     538 :                     ; ------------------------------------------------
(1)  197/     538 :                     
(1)  198/     538 :                     list_vdpregs:
(1)  199/     538 : 04                  		dc.b $04			; No HBlank interrupt, HV Counter on
(1)  200/     539 : 04                  		dc.b $04			; Display ON, No VBlank interrupt
(1)  201/     53A : 30                  		dc.b (($C000)>>10)		; Layer A at VRAM $C000 (%00xxx000)
(1)  202/     53B : 34                  		dc.b (($D000)>>10)		; Window  at VRAM $D000 (%00xxxxy0)
(1)  203/     53C : 07                  		dc.b (($E000)>>13)		; Layer B at VRAM $E000 (%00000xxx)
(1)  204/     53D : 7C                  		dc.b (($F800)>>9)		; Sprites at VRAM $F800 (%0xxxxxxy) (OLD $F800)
(1)  205/     53E : 00                  		dc.b $00			; Unused
(1)  206/     53F : 00                  		dc.b $00			; Background color: $00
(1)  207/     540 : 00                  		dc.b $00			; Unused
(1)  208/     541 : 00                  		dc.b $00			; Unused
(1)  209/     542 : 00                  		dc.b $00			; HInt line number trigger
(1)  210/     543 : 00                  		dc.b (%000|%00)			; No ExtInt, Scroll: VSCR:full HSCR:full
(1)  211/     544 : 81                  		dc.b $81			; H40, No shadow mode, 320-pixel resolution mode
(1)  212/     545 : 3F                  		dc.b (($FC00)>>10)		; HScroll at VRAM $FC00 (%00xxxxxx)
(1)  213/     546 : 00                  		dc.b $00			; Unused
(1)  214/     547 : 02                  		dc.b $02			; VDP auto-increment: $02
(1)  215/     548 : 01                  		dc.b (%00<<4)|%01		; Scroll area size: V32 H64
(1)  216/     549 : 00                  		dc.b $00
(1)  217/     54A : 00                  		dc.b $00
(1)  218/     54B :                     		align 2
(1)  219/     54C :                     ; Default PRINT palette
(1)  220/     54C : 0000 0EEE 0CCC      ASCII_PAL:	dc.w $0000,$0EEE,$0CCC,$0AAA,$0888,$0444,$000E,$0008
              552 : 0AAA 0888 0444 
              558 : 000E 0008          
(1)  221/     55C : 00EE 0088 00E0      		dc.w $00EE,$0088,$00E0,$0080,$0E00,$0800,$0000,$0000
              562 : 0080 0E00 0800 
              568 : 0000 0000          
(1)  222/     56C :                     		align 2
(1)  223/     56C :                     
(1)  224/     56C :                     ; --------------------------------------------------------
(1)  225/     56C :                     ; Video_Clear
(1)  226/     56C :                     ;
(1)  227/     56C :                     ; Clear all video data from VRAM
(1)  228/     56C :                     ;
(1)  229/     56C :                     ; Breaks:
(1)  230/     56C :                     ; ALL
(1)  231/     56C :                     ; --------------------------------------------------------
(1)  232/     56C :                     
(1)  233/     56C :                     Video_Clear:
(1)  234/     56C :                     ; 		move.w	#0,d0			; Clears until $57F
(1)  235/     56C :                     ; 		move.w	#0,d1
(1)  236/     56C :                     ; 		move.w	#$57F*$20,d2
(1)  237/     56C :                     ; 		bsr	Video_Fill
(1)  238/     56C :                     
(1)  239/     56C :                     ; --------------------------------------------------------
(1)  240/     56C :                     ; Video_ClearScreen
(1)  241/     56C :                     ;
(1)  242/     56C :                     ; Clears ALL Genesis screens FG/BG/WIN
(1)  243/     56C :                     ;
(1)  244/     56C :                     ; Breaks:
(1)  245/     56C :                     ; d0-d2/d6-d7/a5-a6
(1)  246/     56C :                     ; --------------------------------------------------------
(1)  247/     56C :                     
(1)  248/     56C :                     Video_ClearScreen:
(1)  249/     56C : 7000                		moveq	#0,d0
(1)  250/     56E : 343C 1000           		move.w	#$1000,d2		; FG/BG size
(1)  251/     572 : 1238 BDF8           		move.b	(RAM_VdpRegs+2).w,d1	; FG
(1)  252/     576 : 0241 0038           		andi.w	#%111000,d1
(1)  253/     57A : E149                		lsl.w	#8,d1
(1)  254/     57C : E549                		lsl.w	#2,d1
(1)  255/     57E : 6100 02EE           		bsr	Video_Fill
(1)  256/     582 : 1238 BDFA           		move.b	(RAM_VdpRegs+4).w,d1	; BG
(1)  257/     586 : 0241 0007           		andi.w	#%000111,d1
(1)  258/     58A : E149                		lsl.w	#8,d1
(1)  259/     58C : EB49                		lsl.w	#5,d1
(1)  260/     58E : 6100 02DE           		bsr	Video_Fill
(1)  261/     592 : 343C 1000           		move.w	#$1000,d2		; WD Size
(1)  262/     596 : 1238 BDF9           		move.b	(RAM_VdpRegs+3).w,d1	; Window
(1)  263/     59A : 0241 003E           		andi.w	#%111110,d1
(1)  264/     59E : E149                		lsl.w	#8,d1
(1)  265/     5A0 : E549                		lsl.w	#2,d1
(1)  266/     5A2 : 6100 02CA           		bsr	Video_Fill
(1)  267/     5A6 : 4DF8 A004           		lea	(RAM_HorScroll).w,a6	; RAM cleanup
(1)  268/     5AA : 3E3C 00EF           		move.w	#240-1,d7
(1)  269/     5AE : 7C00                		moveq	#0,d6
(1)  270/     5B0 :                     .xnext:
(1)  271/     5B0 : 2CC6                		move.l	d6,(a6)+
(1)  272/     5B2 : 51CF FFFC           		dbf	d7,.xnext
(1)  273/     5B6 : 4DF8 A3C4           		lea	(RAM_VerScroll).w,a6
(1)  274/     5BA : 3E3C 0013           		move.w	#(320/16)-1,d7
(1)  275/     5BE :                     .ynext:
(1)  276/     5BE : 2CC6                		move.l	d6,(a6)+
(1)  277/     5C0 : 51CF FFFC           		dbf	d7,.ynext
(1)  278/     5C4 : 4DF8 A414           		lea	(RAM_Sprites).w,a6
(1)  279/     5C8 : 3E3C 009F           		move.w	#((80*8)/4)-1,d7
(1)  280/     5CC :                     .snext:
(1)  281/     5CC : 2CC6                		move.l	d6,(a6)+
(1)  282/     5CE : 51CF FFFC           		dbf	d7,.snext
(1)  283/     5D2 : 4DF8 AE14           		lea	(RAM_Palette).w,a6
(1)  284/     5D6 : 4BF8 B094           		lea	(RAM_PaletteFd).w,a5
(1)  285/     5DA : 3E3C 001F           		move.w	#(64/2)-1,d7
(1)  286/     5DE :                     .pnext:
(1)  287/     5DE : 2CC6                		move.l	d6,(a6)+
(1)  288/     5E0 : 2AC6                		move.l	d6,(a5)+
(1)  289/     5E2 : 51CF FFFA           		dbf	d7,.pnext
(1)  300/     5E6 : 4E75                		rts
(1)  301/     5E8 :                     
(1)  302/     5E8 :                     ; ====================================================================
(1)  303/     5E8 :                     ; ----------------------------------------------------------------
(1)  304/     5E8 :                     ; Palette fade system, Genesis side
(1)  305/     5E8 :                     ; ----------------------------------------------------------------
(1)  306/     5E8 :                     
(1)  307/     5E8 :                     ; --------------------------------------------------------
(1)  308/     5E8 :                     ; FULL Fade in
(1)  309/     5E8 :                     ; --------------------------------------------------------
(1)  310/     5E8 :                     
(1)  311/     5E8 :                     Video_FadeIn:
(1)  312/     5E8 : 31FC 0001 BDE6      		move.w	#1,(RAM_FadeMdIncr).w	; Increment speed
(1)  313/     5EE : 31FC 0002 BDEE      		move.w	#2,(RAM_FadeMarsIncr).w
(1)  314/     5F4 : 31FC 0001 BDE8      		move.w	#1,(RAM_FadeMdDelay).w	; Delay by
(1)  315/     5FA : 31FC 0000 BDF0      		move.w	#0,(RAM_FadeMarsDelay).w
(1)  316/     600 : 31FC 0001 BDE4      		move.w	#1,(RAM_FadeMdReq).w	; Fade-in task
(1)  317/     606 : 31FC 0001 BDEC      		move.w	#1,(RAM_FadeMarsReq).w
(1)  318/     60C : 6026                		bra	Video_WaitFade
(1)  319/     60E :                     
(1)  320/     60E :                     ; --------------------------------------------------------
(1)  321/     60E :                     ; FULL Fade out
(1)  322/     60E :                     ; --------------------------------------------------------
(1)  323/     60E :                     
(1)  324/     60E :                     Video_FadeOut:
(1)  325/     60E : 31FC 0001 BDE6      		move.w	#1,(RAM_FadeMdIncr).w	; Increment speed
(1)  326/     614 : 31FC 0002 BDEE      		move.w	#2,(RAM_FadeMarsIncr).w
(1)  327/     61A : 31FC 0001 BDE8      		move.w	#1,(RAM_FadeMdDelay).w	; Delay by
(1)  328/     620 : 31FC 0000 BDF0      		move.w	#0,(RAM_FadeMarsDelay).w
(1)  329/     626 : 31FC 0002 BDE4      		move.w	#2,(RAM_FadeMdReq).w	; Fade-in task
(1)  330/     62C : 31FC 0002 BDEC      		move.w	#2,(RAM_FadeMarsReq).w
(1)  331/     632 : 4E71                		bra	Video_WaitFade
(1)  332/     634 :                     
(1)  333/     634 :                     ; --------------------------------------------------------
(1)  334/     634 :                     ; Video_WaitFade
(1)  335/     634 :                     ; --------------------------------------------------------
(1)  336/     634 :                     
(1)  337/     634 :                     Video_WaitFade:
(1)  338/     634 : 6100 0AC8           		bsr	System_Render
(1)  346/     638 : 6140                		bsr	Video_DoPalFade
(1)  347/     63A : 3E38 BDE4           		move.w	(RAM_FadeMdReq).w,d7
(1)  349/     63E : 4A47                		tst.w	d7
(1)  350/     640 : 66F2                		bne.s	Video_WaitFade
(1)  351/     642 : 4E75                		rts
(1)  352/     644 :                     
(1)  353/     644 :                     ; --------------------------------------------------------
(1)  354/     644 :                     ; Video_RunFade
(1)  355/     644 :                     ;
(1)  356/     644 :                     ; Processes palette fading for one frame returns
(1)  357/     644 :                     ; status on exit.
(1)  358/     644 :                     ;
(1)  359/     644 :                     ; Returns:
(1)  360/     644 :                     ; bne - Still active, jump back.
(1)  361/     644 :                     ; beq - Finished
(1)  362/     644 :                     ;
(1)  363/     644 :                     ; Breaks:
(1)  364/     644 :                     ; All
(1)  365/     644 :                     ;
(1)  366/     644 :                     ; Notes:
(1)  367/     644 :                     ; Call System_Render FIRST before calling this
(1)  368/     644 :                     ; --------------------------------------------------------
(1)  369/     644 :                     
(1)  370/     644 :                     Video_RunFade:
(1)  378/     644 : 6134                		bsr	Video_DoPalFade
(1)  379/     646 : 3E38 BDE4           		move.w	(RAM_FadeMdReq).w,d7
(1)  381/     64A : 4E75                		rts
(1)  382/     64C :                     
(1)  383/     64C :                     ; --------------------------------------------------------
(1)  384/     64C :                     ; Video_LoadPal
(1)  385/     64C :                     ;
(1)  386/     64C :                     ; Input:
(1)  387/     64C :                     ; a0 - Palette data
(1)  388/     64C :                     ; d0 - Start position
(1)  389/     64C :                     ; d1 - Number of colors
(1)  390/     64C :                     ;
(1)  391/     64C :                     ; Breaks:
(1)  392/     64C :                     ; d5-d7,a6
(1)  393/     64C :                     ; --------------------------------------------------------
(1)  394/     64C :                     
(1)  395/     64C :                     Video_FadePal:
(1)  396/     64C : 4DF8 B094           		lea	(RAM_PaletteFd).w,a6
(1)  397/     650 : 4278 BDEA           		clr.w	(RAM_FadeMdTmr).w
(1)  398/     654 : 6004                		bra.s	vidMd_Pal
(1)  399/     656 :                     Video_LoadPal:
(1)  400/     656 : 4DF8 AE14           		lea	(RAM_Palette).w,a6
(1)  401/     65A :                     vidMd_Pal:
(1)  402/     65A : 2A48                		move.l	a0,a5
(1)  403/     65C : 7E00                		moveq	#0,d7
(1)  404/     65E : 3E00                		move.w	d0,d7
(1)  405/     660 : DE47                		add.w	d7,d7
(1)  406/     662 : DCC7                		adda	d7,a6
(1)  407/     664 : 3E01                		move.w	d1,d7
(1)  408/     666 : 0447 0001           		subi.w	#1,d7
(1)  409/     66A : 3C02                		move.w	d2,d6
(1)  410/     66C : 0246 0001           		andi.w	#1,d6
(1)  411/     670 : E25E                		ror.w	#1,d6
(1)  412/     672 :                     .loop:
(1)  413/     672 : 3CDD                		move.w	(a5)+,(a6)+
(1)  414/     674 : 51CF FFFC           		dbf	d7,.loop
(1)  415/     678 : 4E75                		rts
(1)  416/     67A :                     
(1)  417/     67A :                     ; --------------------------------------------------------
(1)  418/     67A :                     ; Video_DoPalFade
(1)  419/     67A :                     ;
(1)  420/     67A :                     ; RAM_ReqFadeMars: (WORD)
(1)  421/     67A :                     ; $00 - No task or finished.
(1)  422/     67A :                     ; $01 - Fade in
(1)  423/     67A :                     ; $02 - Fade out to black
(1)  424/     67A :                     ;
(1)  425/     67A :                     ; NOTE: ONLY CALL THIS OUTSIDE OF VBLANK
(1)  426/     67A :                     ; --------------------------------------------------------
(1)  427/     67A :                     
(1)  428/     67A :                     Video_DoPalFade:
(1)  429/     67A : 0478 0001 BDEA      		subi.w	#1,(RAM_FadeMdTmr).w
(1)  430/     680 : 6A14                		bpl.s	.active
(1)  431/     682 : 31F8 BDE8 BDEA      		move.w	(RAM_FadeMdDelay).w,(RAM_FadeMdTmr).w
(1)  432/     688 : 3E38 BDE4           		move.w	(RAM_FadeMdReq).w,d7
(1)  433/     68C : DE47                		add.w	d7,d7
(1)  434/     68E : 3E3B 7008           		move.w	.fade_list(pc,d7.w),d7
(1)  435/     692 : 4EFB 7004           		jmp	.fade_list(pc,d7.w)
(1)  436/     696 :                     .active:
(1)  437/     696 : 4E75                		rts
(1)  438/     698 :                     
(1)  439/     698 :                     ; --------------------------------------------
(1)  440/     698 :                     
(1)  441/     698 :                     .fade_list:
(1)  442/     698 : 0006                		dc.w .fade_done-.fade_list
(1)  443/     69A : 0008                		dc.w .fade_in-.fade_list
(1)  444/     69C : 00AA                		dc.w .fade_out-.fade_list
(1)  445/     69E :                     
(1)  446/     69E :                     ; --------------------------------------------
(1)  447/     69E :                     ; No fade or finished.
(1)  448/     69E :                     ; --------------------------------------------
(1)  449/     69E :                     
(1)  450/     69E :                     .fade_done:
(1)  451/     69E : 4E75                		rts
(1)  452/     6A0 :                     
(1)  453/     6A0 :                     ; --------------------------------------------
(1)  454/     6A0 :                     ; Fade in
(1)  455/     6A0 :                     ; --------------------------------------------
(1)  456/     6A0 :                     
(1)  457/     6A0 :                     .fade_in:
(1)  458/     6A0 : 4DF8 B094           		lea	(RAM_PaletteFd).w,a6
(1)  459/     6A4 : 4BF8 AE14           		lea	(RAM_Palette).w,a5
(1)  460/     6A8 : 7040                		moveq	#64,d0				; Num of colors
(1)  461/     6AA : 3238 BDE6           		move.w	(RAM_FadeMdIncr).w,d1		; Speed
(1)  462/     6AE : D241                		add.w	d1,d1
(1)  463/     6B0 : 3C00                		move.w	d0,d6
(1)  464/     6B2 : 4846                		swap	d6
(1)  465/     6B4 : 0440 0001           		subi.w	#1,d0
(1)  466/     6B8 :                     .nxt_pal:
(1)  467/     6B8 : 4242                		clr.w	d2		; Reset finished colorbits
(1)  468/     6BA : 3E16                		move.w	(a6),d7		; d7 - Input
(1)  469/     6BC : 3C15                		move.w	(a5),d6		; d6 - Output
(1)  470/     6BE : 3607                		move.w	d7,d3		; RED
(1)  471/     6C0 : 3806                		move.w	d6,d4
(1)  472/     6C2 : 0246 0EE0           		andi.w	#%0000111011100000,d6
(1)  473/     6C6 : 0244 000E           		andi.w	#%0000000000001110,d4
(1)  474/     6CA : 0243 000E           		andi.w	#%0000000000001110,d3
(1)  475/     6CE : D841                		add.w	d1,d4
(1)  476/     6D0 : B843                		cmp.w	d3,d4
(1)  477/     6D2 : 6506                		bcs.s	.no_red
(1)  478/     6D4 : 3803                		move.w	d3,d4
(1)  479/     6D6 : 0042 0001           		ori.w	#%001,d2	; RED is ready
(1)  480/     6DA :                     .no_red:
(1)  481/     6DA : 8C44                		or.w	d4,d6
(1)  482/     6DC : E949                		lsl.w	#4,d1
(1)  483/     6DE : 3607                		move.w	d7,d3		; GREEN
(1)  484/     6E0 : 3806                		move.w	d6,d4
(1)  485/     6E2 : 0246 0E0E           		andi.w	#%0000111000001110,d6
(1)  486/     6E6 : 0244 00E0           		andi.w	#%0000000011100000,d4
(1)  487/     6EA : 0243 00E0           		andi.w	#%0000000011100000,d3
(1)  488/     6EE : D841                		add.w	d1,d4
(1)  489/     6F0 : B843                		cmp.w	d3,d4
(1)  490/     6F2 : 6506                		bcs.s	.no_grn
(1)  491/     6F4 : 3803                		move.w	d3,d4
(1)  492/     6F6 : 0042 0002           		ori.w	#%010,d2	; GREEN is ready
(1)  493/     6FA :                     .no_grn:
(1)  494/     6FA : 8C44                		or.w	d4,d6
(1)  495/     6FC : E949                		lsl.w	#4,d1
(1)  496/     6FE : 3607                		move.w	d7,d3		; BLUE
(1)  497/     700 : 3806                		move.w	d6,d4
(1)  498/     702 : 0246 00EE           		andi.w	#%0000000011101110,d6
(1)  499/     706 : 0244 0E00           		andi.w	#%0000111000000000,d4
(1)  500/     70A : 0243 0E00           		andi.w	#%0000111000000000,d3
(1)  501/     70E : D841                		add.w	d1,d4
(1)  502/     710 : B843                		cmp.w	d3,d4
(1)  503/     712 : 6506                		bcs.s	.no_blu
(1)  504/     714 : 3803                		move.w	d3,d4
(1)  505/     716 : 0042 0004           		ori.w	#%100,d2	; BLUE is ready
(1)  506/     71A :                     .no_blu:
(1)  507/     71A : 8C44                		or.w	d4,d6
(1)  508/     71C : E049                		lsr.w	#8,d1
(1)  509/     71E : 3AC6                		move.w	d6,(a5)+
(1)  510/     720 : DCFC 0002           		adda	#2,a6
(1)  511/     724 : 0C42 0007           		cmpi.w	#%111,d2
(1)  512/     728 : 6608                		bne.s	.no_fnsh
(1)  513/     72A : 4846                		swap	d6
(1)  514/     72C : 0446 0001           		subi.w	#1,d6
(1)  515/     730 : 4846                		swap	d6
(1)  516/     732 :                     .no_fnsh:
(1)  517/     732 : 51C8 FF84           		dbf	d0,.nxt_pal
(1)  518/     736 : 4846                		swap	d6
(1)  519/     738 : 4A46                		tst.w	d6
(1)  520/     73A : 6604                		bne.s	.no_move
(1)  521/     73C : 4278 BDE4           		clr.w	(RAM_FadeMdReq).w
(1)  522/     740 :                     .no_move:
(1)  523/     740 : 4E75                		rts
(1)  524/     742 :                     
(1)  525/     742 :                     ; --------------------------------------------
(1)  526/     742 :                     ; Fade out
(1)  527/     742 :                     ; --------------------------------------------
(1)  528/     742 :                     
(1)  529/     742 :                     .fade_out:
(1)  530/     742 : 4DF8 AE14           		lea	(RAM_Palette).w,a6
(1)  531/     746 : 7040                		moveq	#64,d0				; Num of colors
(1)  532/     748 : 3238 BDE6           		move.w	(RAM_FadeMdIncr).w,d1		; Speed
(1)  533/     74C : 3C00                		move.w	d0,d6
(1)  534/     74E : 4846                		swap	d6
(1)  535/     750 : 0440 0001           		subi.w	#1,d0
(1)  536/     754 :                     .nxt_pal_o:
(1)  537/     754 : 4242                		clr.w	d2			; Reset finished colorbits
(1)  538/     756 : 3E16                		move.w	(a6),d7			; d7 - Input
(1)  539/     758 : 3C07                		move.w	d7,d6
(1)  540/     75A : 0247 0EE0           		andi.w	#%0000111011100000,d7
(1)  541/     75E : 0246 000E           		andi.w	#%0000000000001110,d6
(1)  542/     762 : 9C41                		sub.w	d1,d6
(1)  543/     764 : 6A06                		bpl.s	.no_red_o
(1)  544/     766 : 4246                		clr.w	d6
(1)  545/     768 : 0042 0001           		ori.w	#%001,d2		; RED is ready
(1)  546/     76C :                     .no_red_o:
(1)  547/     76C : 8E46                		or.w	d6,d7
(1)  548/     76E : E949                		lsl.w	#4,d1
(1)  549/     770 : 3C07                		move.w	d7,d6
(1)  550/     772 : 0247 0E0E           		andi.w	#%0000111000001110,d7
(1)  551/     776 : 0246 00E0           		andi.w	#%0000000011100000,d6
(1)  552/     77A : 9C41                		sub.w	d1,d6
(1)  553/     77C : 6A06                		bpl.s	.no_grn_o
(1)  554/     77E : 4246                		clr.w	d6
(1)  555/     780 : 0042 0002           		ori.w	#%010,d2		; GREEN is ready
(1)  556/     784 :                     .no_grn_o:
(1)  557/     784 : 8E46                		or.w	d6,d7
(1)  558/     786 : E949                		lsl.w	#4,d1
(1)  559/     788 : 3C07                		move.w	d7,d6
(1)  560/     78A : 0247 00EE           		andi.w	#%0000000011101110,d7
(1)  561/     78E : 0246 0E00           		andi.w	#%0000111000000000,d6
(1)  562/     792 : 9C41                		sub.w	d1,d6
(1)  563/     794 : 6A06                		bpl.s	.no_blu_o
(1)  564/     796 : 4246                		clr.w	d6
(1)  565/     798 : 0042 0004           		ori.w	#%100,d2		; BLUE is ready
(1)  566/     79C :                     .no_blu_o:
(1)  567/     79C : 8E46                		or.w	d6,d7
(1)  568/     79E : E049                		lsr.w	#8,d1
(1)  569/     7A0 : 3CC7                		move.w	d7,(a6)+
(1)  570/     7A2 : 0C42 0007           		cmpi.w	#%111,d2
(1)  571/     7A6 : 6608                		bne.s	.no_fnsh_o
(1)  572/     7A8 : 4846                		swap	d6
(1)  573/     7AA : 0446 0001           		subi.w	#1,d6
(1)  574/     7AE : 4846                		swap	d6
(1)  575/     7B0 :                     .no_fnsh_o:
(1)  576/     7B0 : 51C8 FFA2           		dbf	d0,.nxt_pal_o
(1)  577/     7B4 : 4846                		swap	d6
(1)  578/     7B6 : 4A46                		tst.w	d6
(1)  579/     7B8 : 6604                		bne.s	.no_move_o
(1)  580/     7BA : 4278 BDE4           		clr.w	(RAM_FadeMdReq).w
(1)  581/     7BE :                     .no_move_o:
(1)  582/     7BE : 4E75                		rts
(1)  583/     7C0 :                     
(1)  584/     7C0 :                     ; ====================================================================
(1)  585/     7C0 :                     ; --------------------------------------------------------
(1)  586/     7C0 :                     ; Genesis DMA
(1)  587/     7C0 :                     ; --------------------------------------------------------
(1)  588/     7C0 :                     
(1)  589/     7C0 :                     ; --------------------------------------------------------
(1)  590/     7C0 :                     ; Video_DmaMkEntry
(1)  591/     7C0 :                     ;
(1)  592/     7C0 :                     ; Sets a new DMA transfer entry to the BLAST list
(1)  593/     7C0 :                     ;
(1)  594/     7C0 :                     ; *** CALL THIS OUTSIDE OF VBLANK ONLY ***
(1)  595/     7C0 :                     ;
(1)  596/     7C0 :                     ; d0.l - Art data Real-ROM location
(1)  597/     7C0 :                     ; d1.w - VRAM location cell_vram()
(1)  598/     7C0 :                     ; d2.w - Size
(1)  599/     7C0 :                     ;
(1)  600/     7C0 :                     ; Breaks:
(1)  601/     7C0 :                     ; d5-d7,a6
(1)  602/     7C0 :                     ; --------------------------------------------------------
(1)  603/     7C0 :                     
(1)  604/     7C0 :                     Video_DmaMkEntry:
(1)  605/     7C0 : 2A00                		move.l	d0,d5
(1)  606/     7C2 : DA42                		add.w	d2,d5
(1)  607/     7C4 : 6430                		bcc.s	.normal
(1)  608/     7C6 : 2A00                		move.l	d0,d5		; <-- DOUBLE TRANSFER
(1)  609/     7C8 : 3C01                		move.w	d1,d6
(1)  610/     7CA : 2E05                		move.l	d5,d7		; Top
(1)  611/     7CC : 0687 0001 0000      		addi.l	#$010000,d7
(1)  612/     7D2 : 0287 00FF 0000      		andi.l	#$FF0000,d7
(1)  613/     7D8 : 9E80                		sub.l	d0,d7
(1)  614/     7DA : 6120                		bsr.s	.mk_set
(1)  615/     7DC : 2A00                		move.l	d0,d5		; Bottom
(1)  616/     7DE : 0685 0001 0000      		addi.l	#$010000,d5
(1)  617/     7E4 : 0285 00FF 0000      		andi.l	#$FF0000,d5
(1)  618/     7EA : 2C05                		move.l	d5,d6
(1)  619/     7EC : 9C80                		sub.l	d0,d6
(1)  620/     7EE : 3E02                		move.w	d2,d7
(1)  621/     7F0 : 9E46                		sub.w	d6,d7
(1)  622/     7F2 : DC41                		add.w	d1,d6
(1)  623/     7F4 : 6006                		bra.s	.mk_set
(1)  624/     7F6 :                     .normal:
(1)  625/     7F6 : 2A00                		move.l	d0,d5
(1)  626/     7F8 : 3C01                		move.w	d1,d6
(1)  627/     7FA : 3E02                		move.w	d2,d7
(1)  628/     7FC :                     ; d7 - size
(1)  629/     7FC :                     ; d6 - vram
(1)  630/     7FC :                     ; d5 - data
(1)  631/     7FC :                     .mk_set:
(1)  632/     7FC : 4847                		swap	d7
(1)  633/     7FE : 3E38 BDDE           		move.w	(RAM_VdpDmaIndx).w,d7
(1)  634/     802 : 0C47 0018           		cmpi.w	#MAX_MDDMATSK,d7
(1)  635/     806 : 6C64                		bge.s	.ran_out
(1)  636/     808 : E94F                		lsl.w	#4,d7			; Size $10
(1)  637/     80A : 4DF8 B114           		lea	(RAM_VdpDmaList).w,a6
(1)  638/     80E : DCC7                		adda	d7,a6
(1)  639/     810 : 4847                		swap	d7
(1)  640/     812 : 31FC 0001 BDE0      		move.w	#1,(RAM_VdpDmaMod).w
(1)  641/     818 : 5278 BDDE           		addq.w	#1,(RAM_VdpDmaIndx).w
(1)  642/     81C :                     
(1)  643/     81C : 0287 0000 FFFE      		andi.l	#$0000FFFE,d7
(1)  644/     822 : EF8F                		lsl.l	#7,d7
(1)  645/     824 : E04F                		lsr.w	#8,d7
(1)  646/     826 : 0087 9400 9300      		ori.l	#$94009300,d7
(1)  647/     82C : 2CC7                		move.l	d7,(a6)+
(1)  648/     82E : E28D                  		lsr.l	#1,d5			; d5 - Source
(1)  649/     830 : 2E3C 9600 9500       		move.l	#$96009500,d7
(1)  650/     836 : 1E05                 		move.b	d5,d7
(1)  651/     838 : E08D                 		lsr.l	#8,d5
(1)  652/     83A : 4847                 		swap	d7
(1)  653/     83C : 1E05                 		move.b	d5,d7
(1)  654/     83E : 2CC7                 		move.l	d7,(a6)+
(1)  655/     840 : 3E3C 9700            		move.w	#$9700,d7
(1)  656/     844 : E08D                 		lsr.l	#8,d5
(1)  657/     846 : 1E05                 		move.b	d5,d7
(1)  658/     848 : 3CC7                 		move.w	d7,(a6)+
(1)  659/     84A : 3E06                		move.w	d6,d7			; Destination
(1)  660/     84C : 0286 0000 3FFF      		andi.l	#$3FFF,d6
(1)  661/     852 : 0046 4000           		ori.w	#$4000,d6
(1)  662/     856 : E04F                		lsr.w	#8,d7
(1)  663/     858 : EC4F                		lsr.w	#6,d7
(1)  664/     85A : 0247 0003           		andi.w	#%11,d7
(1)  665/     85E : 0047 0080           		ori.w	#$80,d7
(1)  666/     862 : 3CC6                		move.w	d6,(a6)+
(1)  667/     864 : 3CC7                		move.w	d7,(a6)+
(1)  675/     866 : 31FC 0000 BDE0      		move.w	#0,(RAM_VdpDmaMod).w
(1)  676/     86C :                     .ran_out:
(1)  677/     86C : 4E75                		rts
(1)  678/     86E :                     
(1)  679/     86E :                     ; --------------------------------------------------------
(1)  680/     86E :                     ; Video_Fill
(1)  681/     86E :                     ;
(1)  682/     86E :                     ; Fill data to VRAM
(1)  683/     86E :                     ;
(1)  684/     86E :                     ; d0.w - WORD to fill
(1)  685/     86E :                     ; d1.w - VRAM location cell_vram()
(1)  686/     86E :                     ; d2.w - Size
(1)  687/     86E :                     ;
(1)  688/     86E :                     ; Breaks:
(1)  689/     86E :                     ; d6-d7,a6
(1)  690/     86E :                     ;
(1)  691/     86E :                     ; Notes:
(1)  692/     86E :                     ; Size $0001 is invalid, writes in this order: $56781234
(1)  693/     86E :                     ; --------------------------------------------------------
(1)  694/     86E :                     
(1)  695/     86E :                     Video_Fill:
(1)  696/     86E : 4DF9 00C0 0004      		lea	(vdp_ctrl).l,a6
(1)  697/     874 : 3E3C 8100           		move.w	#$8100,d7
(1)  698/     878 : 1E38 BDF7           		move.b	(RAM_VdpRegs+1).w,d7
(1)  699/     87C : 08C7 0004           		bset	#bitDmaEnbl,d7
(1)  700/     880 : 3C87                		move.w	d7,(a6)
(1)  701/     882 : 3E16                .dmaw:		move.w	(a6),d7
(1)  702/     884 : 0807 0001           		btst	#bitDma,d7
(1)  703/     888 : 66F8                		bne.s	.dmaw
(1)  704/     88A : 3CBC 8F01           		move.w	#$8F01,(a6)	; Increment $01
(1)  705/     88E : 3E02                		move.w	d2,d7		; d2 - Size
(1)  706/     890 : 0447 0001           		subi.w	#1,d7
(1)  707/     894 : 2C3C 9400 9300      		move.l	#$94009300,d6
(1)  708/     89A : 1C07                		move.b	d7,d6
(1)  709/     89C : 4846                		swap	d6
(1)  710/     89E : E04F                		lsr.w	#8,d7
(1)  711/     8A0 : 1C07                		move.b	d7,d6
(1)  712/     8A2 : 4846                		swap	d6
(1)  713/     8A4 : 2C86                		move.l	d6,(a6)
(1)  714/     8A6 : 3CBC 9780           		move.w	#$9780,(a6)	; DMA Fill mode
(1)  715/     8AA : 3E01                		move.w	d1,d7		; d1 - Destination
(1)  716/     8AC : 3C07                		move.w	d7,d6
(1)  717/     8AE : 0246 3FFF           		andi.w	#$3FFF,d6
(1)  718/     8B2 : 0046 4000           		ori.w	#$4000,d6
(1)  719/     8B6 : 4846                		swap	d6
(1)  720/     8B8 : 3C07                		move.w	d7,d6
(1)  721/     8BA : E04E                		lsr.w	#8,d6
(1)  722/     8BC : EC4E                		lsr.w	#6,d6
(1)  723/     8BE : 0246 0003           		andi.w	#%11,d6
(1)  724/     8C2 : 0046 0080           		ori.w	#$80,d6
(1)  725/     8C6 : 2C86                		move.l	d6,(a6)
(1)  726/     8C8 : 3D40 FFFC           		move.w	d0,-4(a6)
(1)  727/     8CC : 3E16                .dma_w:		move.w	(a6),d7
(1)  728/     8CE : 0807 0001           		btst	#bitDma,d7
(1)  729/     8D2 : 66F8                		bne.s	.dma_w
(1)  730/     8D4 : 3CBC 8F02           		move.w	#$8F02,(a6)	; Increment $02
(1)  731/     8D8 : 3E3C 8100           		move.w	#$8100,d7
(1)  732/     8DC : 1E38 BDF7           		move.b	(RAM_VdpRegs+1).w,d7
(1)  733/     8E0 : 3C87                		move.w	d7,(a6)
(1)  734/     8E2 : 4E75                		rts
(1)  735/     8E4 :                     
(1)  736/     8E4 :                     ; --------------------------------------------------------
(1)  737/     8E4 :                     ; Video_Copy
(1)  738/     8E4 :                     ;
(1)  739/     8E4 :                     ; Copy VRAM data to another location
(1)  740/     8E4 :                     ;
(1)  741/     8E4 :                     ; d0.w - VRAM Source cell_vram()
(1)  742/     8E4 :                     ; d1.w - VRAM Destination cell_vram()
(1)  743/     8E4 :                     ; d2.w - Size
(1)  744/     8E4 :                     ;
(1)  745/     8E4 :                     ; Breaks:
(1)  746/     8E4 :                     ; d6-d7,a6
(1)  747/     8E4 :                     ; --------------------------------------------------------
(1)  748/     8E4 :                     
(1)  749/     8E4 :                     ; TODO: test if this works again...
(1)  750/     8E4 :                     
(1)  751/     8E4 :                     Video_Copy:
(1)  752/     8E4 : 4DF9 00C0 0004      		lea	(vdp_ctrl),a6
(1)  753/     8EA : 3E3C 8100           		move.w	#$8100,d7
(1)  754/     8EE : 1E38 BDF7           		move.b	(RAM_VdpRegs+1).w,d7
(1)  755/     8F2 : 08C7 0004           		bset	#bitDmaEnbl,d7
(1)  756/     8F6 : 3C87                		move.w	d7,(a6)
(1)  757/     8F8 : 3E16                .dmaw:		move.w	(a6),d7
(1)  758/     8FA : 0807 0001           		btst	#bitDma,d7
(1)  759/     8FE : 66F8                		bne.s	.dmaw
(1)  760/     900 : 3CBC 8F01           		move.w	#$8F01,(a6)		; Increment $01
(1)  761/     904 : 3E02                		move.w	d2,d7			; SIZE
(1)  762/     906 : 2C3C 9400 9300      		move.l	#$94009300,d6
(1)  763/     90C :                     ; 		lsr.w	#1,d7
(1)  764/     90C : 1C07                		move.b	d7,d6
(1)  765/     90E : 4846                		swap	d6
(1)  766/     910 : E04F                		lsr.w	#8,d7
(1)  767/     912 : 1C07                		move.b	d7,d6
(1)  768/     914 : 4846                		swap	d6
(1)  769/     916 : 2C86                		move.l	d6,(a6)
(1)  770/     918 : 2C3C 9600 9500      		move.l	#$96009500,d6		; SOURCE
(1)  771/     91E : 3E00                		move.w	d0,d7
(1)  772/     920 : 1C07                		move.b	d7,d6
(1)  773/     922 : 4846                		swap	d6
(1)  774/     924 : E04F                		lsr.w	#8,d7
(1)  775/     926 : 1C07                		move.b	d7,d6
(1)  776/     928 : 2C86                		move.l	d6,(a6)
(1)  777/     92A : 3CBC 97C0           		move.w	#$97C0,(a6)		; DMA Copy mode
(1)  778/     92E : 2E02                		move.l	d2,d7			; DESTINATION
(1)  779/     930 : 3C07                		move.w	d7,d6
(1)  780/     932 : 0246 3FFF           		andi.w	#$3FFF,d6
(1)  781/     936 : 0046 4000           		ori.w	#$4000,d6
(1)  782/     93A : 4846                		swap	d6
(1)  783/     93C : 3C07                		move.w	d7,d6
(1)  784/     93E : E04E                		lsr.w	#8,d6
(1)  785/     940 : EC4E                		lsr.w	#6,d6
(1)  786/     942 : 0246 0003           		andi.w	#%11,d6
(1)  787/     946 : 0046 00C0           		ori.w	#$C0,d6
(1)  788/     94A : 2C86                		move.l	d6,(a6)
(1)  789/     94C : 3D41 FFFC           		move.w	d1,-4(a6)
(1)  790/     950 : 3E16                .dma_w:		move.w	(a6),d7
(1)  791/     952 : 0807 0001           		btst	#bitDma,d7
(1)  792/     956 : 66F8                		bne.s	.dma_w
(1)  793/     958 : 3CBC 8F02           		move.w	#$8F02,(a6)		; Increment $02
(1)  794/     95C : 3E3C 8100           		move.w	#$8100,d7
(1)  795/     960 : 1E38 BDF7           		move.b	(RAM_VdpRegs+1).w,d7
(1)  796/     964 : 3C87                		move.w	d7,(a6)
(1)  797/     966 : 4E75                		rts
(1)  798/     968 :                     
(1)  799/     968 :                     ; --------------------------------------------------------
(1)  800/     968 :                     ; Load graphics using DMA manually
(1)  801/     968 :                     ;
(1)  802/     968 :                     ; Input:
(1)  803/     968 :                     ; d0.l - Graphics data pointer (NOT a0)
(1)  804/     968 :                     ; d1.w - cell_vram(vram_pos)
(1)  805/     968 :                     ; d2.w - Size
(1)  806/     968 :                     ;
(1)  807/     968 :                     ; Breaks:
(1)  808/     968 :                     ; d4-d7,a4
(1)  809/     968 :                     ;
(1)  810/     968 :                     ; Notes:
(1)  811/     968 :                     ; - For a faster transfer call this during VBlank
(1)  812/     968 :                     ; - 32X: MAKE SURE THE SH2 SIDE IS NOT READING ROM
(1)  813/     968 :                     ;        BEFORE CALLING THIS.
(1)  814/     968 :                     ; --------------------------------------------------------
(1)  815/     968 :                     
(1)  816/     968 :                     Video_LoadArt:
(1)  817/     968 : 2A00                		move.l	d0,d5
(1)  818/     96A : DA42                		add.w	d2,d5
(1)  819/     96C : 6430                		bcc.s	.normal
(1)  820/     96E : 2A00                		move.l	d0,d5		; <-- DOUBLE TRANSFER
(1)  821/     970 : 3C01                		move.w	d1,d6
(1)  822/     972 : 2E05                		move.l	d5,d7		; Top
(1)  823/     974 : 0687 0001 0000      		addi.l	#$010000,d7
(1)  824/     97A : 0287 00FF 0000      		andi.l	#$FF0000,d7
(1)  825/     980 : 9E80                		sub.l	d0,d7
(1)  826/     982 : 6120                		bsr.s	.mk_set
(1)  827/     984 : 2A00                		move.l	d0,d5		; Bottom
(1)  828/     986 : 0685 0001 0000      		addi.l	#$010000,d5
(1)  829/     98C : 0285 00FF 0000      		andi.l	#$FF0000,d5
(1)  830/     992 : 2C05                		move.l	d5,d6
(1)  831/     994 : 9C80                		sub.l	d0,d6
(1)  832/     996 : 3E02                		move.w	d2,d7
(1)  833/     998 : 9E46                		sub.w	d6,d7
(1)  834/     99A : DC41                		add.w	d1,d6
(1)  835/     99C : 6006                		bra.s	.mk_set
(1)  836/     99E :                     .normal:
(1)  837/     99E : 2A00                		move.l	d0,d5
(1)  838/     9A0 : 3C01                		move.w	d1,d6
(1)  839/     9A2 : 3E02                		move.w	d2,d7
(1)  840/     9A4 :                     ; d7 - size
(1)  841/     9A4 :                     ; d6 - vram
(1)  842/     9A4 :                     ; d5 - data
(1)  843/     9A4 :                     .mk_set:
(1)  844/     9A4 : 49F9 00C0 0004      		lea	(vdp_ctrl),a4
(1)  845/     9AA : 383C 8100           		move.w	#$8100,d4		; DMA ON
(1)  846/     9AE : 1838 BDF7           		move.b	(RAM_VdpRegs+1).w,d4
(1)  847/     9B2 : 08C4 0004           		bset	#bitDmaEnbl,d4
(1)  848/     9B6 : 3884                		move.w	d4,(a4)
(1)  849/     9B8 :                     
(1)  864/     9B8 : 611A                		bsr.s	.shared_setup
(1)  865/     9BA : 3886                		move.w	d6,(a4)
(1)  866/     9BC : 6100 078E           		bsr	System_DmaEnter_ROM
(1)  867/     9C0 : 3887                		move.w	d7,(a4)			; <-- second write
(1)  868/     9C2 : 6100 078C           		bsr	System_DmaExit_ROM
(1)  869/     9C6 : 383C 8100           		move.w	#$8100,d4		; DMA OFF
(1)  870/     9CA : 1838 BDF7           		move.b	(RAM_VdpRegs+1).w,d4
(1)  871/     9CE : 3884                		move.w	d4,(a4)
(1)  872/     9D0 :                     
(1)  894/     9D0 : 4E75                		rts
(1)  895/     9D2 :                     
(1)  896/     9D2 :                     .from_ram:
(1)  897/     9D2 : 4E75                		rts
(1)  898/     9D4 :                     
(1)  899/     9D4 :                     .shared_setup:
(1)  900/     9D4 : 0287 0000 FFFE      		andi.l	#$0000FFFE,d7
(1)  901/     9DA : EF8F                		lsl.l	#7,d7
(1)  902/     9DC : E04F                		lsr.w	#8,d7
(1)  903/     9DE : 0087 9400 9300      		ori.l	#$94009300,d7
(1)  904/     9E4 : 2887                		move.l	d7,(a4)
(1)  905/     9E6 : E28D                  		lsr.l	#1,d5			; d5 - Source
(1)  906/     9E8 : 2E3C 9600 9500       		move.l	#$96009500,d7
(1)  907/     9EE : 1E05                 		move.b	d5,d7
(1)  908/     9F0 : E08D                 		lsr.l	#8,d5
(1)  909/     9F2 : 4847                 		swap	d7
(1)  910/     9F4 : 1E05                 		move.b	d5,d7
(1)  911/     9F6 : 2887                 		move.l	d7,(a4)
(1)  912/     9F8 : 3E3C 9700            		move.w	#$9700,d7
(1)  913/     9FC : E08D                 		lsr.l	#8,d5
(1)  914/     9FE : 1E05                 		move.b	d5,d7
(1)  915/     A00 : 3887                 		move.w	d7,(a4)
(1)  916/     A02 : 3E06                		move.w	d6,d7			; Destination
(1)  917/     A04 : 0286 0000 3FFF      		andi.l	#$3FFF,d6
(1)  918/     A0A : 0046 4000           		ori.w	#$4000,d6
(1)  919/     A0E : E04F                		lsr.w	#8,d7
(1)  920/     A10 : EC4F                		lsr.w	#6,d7
(1)  921/     A12 : 0247 0003           		andi.w	#%11,d7
(1)  922/     A16 : 0047 0080           		ori.w	#$80,d7
(1)  923/     A1A : 4E75                		rts
(1)  924/     A1C :                     
(1)  925/     A1C :                     ; --------------------------------------------------------
(1)  926/     A1C :                     ; Video_Render
(1)  927/     A1C :                     ;
(1)  928/     A1C :                     ; Call this during VBlank to update
(1)  929/     A1C :                     ; visuals.
(1)  930/     A1C :                     ; --------------------------------------------------------
(1)  931/     A1C :                     
(1)  932/     A1C :                     Video_Render:
(1)  933/     A1C : 4DF9 00C0 0004      		lea	(vdp_ctrl),a6
(1)  934/     A22 : 3E3C 8100           		move.w	#$8100,d7		; DMA ON
(1)  935/     A26 : 1E38 BDF7           		move.b	(RAM_VdpRegs+1).w,d7
(1)  936/     A2A : 08C7 0004           		bset	#bitDmaEnbl,d7
(1)  937/     A2E : 3C87                		move.w	d7,(a6)
(1)  938/     A30 : 6100 0712           		bsr	System_DmaEnter_RAM
(1)  939/     A34 : 2CBC 9400 9328      		move.l	#$94009328,(a6)
(1)  940/     A3A : 2CBC 96D1 95E2      		move.l	#$96009500|(RAM_VerScroll<<7&$FF0000)|(RAM_VerScroll>>1&$FF),(a6)
(1)  941/     A40 : 3CBC 977F           		move.w	#$9700|(RAM_VerScroll>>17&$7F),(a6)
(1)  942/     A44 : 3CBC 4000           		move.w	#$4000,(a6)
(1)  943/     A48 : 3F3C 0090           		move.w	#$0010|$80,-(sp)
(1)  944/     A4C : 3C9F                		move.w	(sp)+,(a6)
(1)  945/     A4E : 2CBC 9401 93E0      		move.l	#$940193E0,(a6)
(1)  946/     A54 : 2CBC 96D0 9502      		move.l	#$96009500|(RAM_HorScroll<<7&$FF0000)|(RAM_HorScroll>>1&$FF),(a6)
(1)  947/     A5A : 3CBC 977F           		move.w	#$9700|(RAM_HorScroll>>17&$7F),(a6)
(1)  948/     A5E : 3CBC 7C00           		move.w	#$7C00,(a6)
(1)  949/     A62 : 3F3C 0083           		move.w	#$0003|$80,-(sp)
(1)  950/     A66 : 3C9F                		move.w	(sp)+,(a6)
(1)  951/     A68 : 2CBC 9402 9300      		move.l	#$94029300,(a6)
(1)  952/     A6E : 2CBC 96D2 950A      		move.l	#$96009500|(RAM_Sprites<<7&$FF0000)|(RAM_Sprites>>1&$FF),(a6)
(1)  953/     A74 : 3CBC 977F           		move.w	#$9700|(RAM_Sprites>>17&$7F),(a6)
(1)  954/     A78 : 3CBC 7800           		move.w	#$7800,(a6)
(1)  955/     A7C : 3F3C 0083           		move.w	#$0003|$80,-(sp)
(1)  956/     A80 : 3C9F                		move.w	(sp)+,(a6)
(1)  957/     A82 : 2CBC 9400 9340      		move.l	#$94009340,(a6)
(1)  958/     A88 : 2CBC 96D7 950A      		move.l	#$96009500|(RAM_Palette<<7&$FF0000)|(RAM_Palette>>1&$FF),(a6)
(1)  959/     A8E : 3CBC 977F           		move.w	#$9700|(RAM_Palette>>17&$7F),(a6)
(1)  960/     A92 : 3CBC C000           		move.w	#$C000,(a6)
(1)  961/     A96 : 3F3C 0080           		move.w	#$0000|$80,-(sp)
(1)  962/     A9A : 3C9F                		move.w	(sp)+,(a6)
(1)  963/     A9C : 6100 06AA           		bsr	System_DmaExit_RAM
(1)  964/     AA0 : 3E3C 8100           		move.w	#$8100,d7
(1)  965/     AA4 : 1E38 BDF7           		move.b	(RAM_VdpRegs+1).w,d7
(1)  966/     AA8 : 3C87                		move.w	d7,(a6)
(1)  967/     AAA : 31FC 0001 BDDA      		move.w	#1,(RAM_SprLinkNum).w	; Reset SPRITE LINK number
(1)  968/     AB0 :                     
(1)  969/     AB0 :                     	; Process DMA BLAST from here
(1)  970/     AB0 :                     
(1)  971/     AB0 :                     ; --------------------------------------------------------
(1)  972/     AB0 :                     ; Video_DmaBlast
(1)  973/     AB0 :                     ;
(1)  974/     AB0 :                     ; Process DMA tasks from a predefined list in RAM
(1)  975/     AB0 :                     ;
(1)  976/     AB0 :                     ; Breaks:
(1)  977/     AB0 :                     ; d5-d7,a3-a4
(1)  978/     AB0 :                     ;
(1)  979/     AB0 :                     ; *** Call this on VBlank ONLY ***
(1)  980/     AB0 :                     ;
(1)  981/     AB0 :                     ; NOTE:
(1)  982/     AB0 :                     ; For 32X this code MUST be located on RAM as it
(1)  983/     AB0 :                     ; writes the RV from ROM access
(1)  984/     AB0 :                     ; --------------------------------------------------------
(1)  985/     AB0 :                     
(1)  986/     AB0 :                     ; Format:
(1)  987/     AB0 :                     ; dc.w $94xx,$93xx		; Size
(1)  988/     AB0 :                     ; dc.w $96xx,$95xx,$97xx	; Source
(1)  989/     AB0 :                     ; dc.l $4xxx008x 		; VDP output + DMA bit
(1)  990/     AB0 :                     ; dc.w $xxxx			; SegaCD/CD32X only: graphics word patch
(1)  991/     AB0 :                     
(1)  992/     AB0 :                     Video_DmaBlast:
(1)  993/     AB0 : 4A78 BDE0           		tst.w	(RAM_VdpDmaMod).w		; Got mid-write?
(1)  994/     AB4 : 664C                		bne.s	.exit				; then can't transfer.
(1)  995/     AB6 : 4A78 BDDE           		tst.w	(RAM_VdpDmaIndx).w		; Any requests?
(1)  996/     ABA : 6746                		beq.s	.exit
(1)  997/     ABC : 49F9 00C0 0004      		lea	(vdp_ctrl),a4			; Enter processing loop
(1)  998/     AC2 : 47F8 B114           		lea	(RAM_VdpDmaList).w,a3
(1)  999/     AC6 : 3E3C 8100           		move.w	#$8100,d7			; DMA ON
(1) 1000/     ACA : 1E38 BDF7           		move.b	(RAM_VdpRegs+1).w,d7
(1) 1001/     ACE : 08C7 0004           		bset	#bitDmaEnbl,d7
(1) 1002/     AD2 : 3887                		move.w	d7,(a4)
(1) 1003/     AD4 : 6100 0676           		bsr	System_DmaEnter_ROM		; Request Z80 stop and SH2 backup
(1) 1004/     AD8 : 4A78 BDDE           .next:		tst.w	(RAM_VdpDmaIndx).w
(1) 1005/     ADC : 6716                		beq.s	.end
(1) 1029/     ADE : 289B                		move.l	(a3)+,(a4)		; Size
(1) 1030/     AE0 : 289B                		move.l	(a3)+,(a4)		; Source
(1) 1031/     AE2 : 389B                		move.w	(a3)+,(a4)
(1) 1032/     AE4 : 389B                		move.w	(a3)+,(a4)		; Destination
(1) 1033/     AE6 : 389B                		move.w	(a3)+,(a4)		; *** CPU freezes ***
(1) 1034/     AE8 : D6FC 0002           		adda	#2,a3
(1) 1036/     AEC : 0478 0001 BDDE      		subi.w	#1,(RAM_VdpDmaIndx).w
(1) 1037/     AF2 : 60E4                		bra.s	.next
(1) 1038/     AF4 :                     .end:
(1) 1039/     AF4 : 6100 065A           		bsr	System_DmaExit_ROM	; Resume Z80 and SH2 direct
(1) 1040/     AF8 : 3E3C 8100           		move.w	#$8100,d7		; DMA OFF
(1) 1041/     AFC : 1E38 BDF7           		move.b	(RAM_VdpRegs+1).w,d7
(1) 1042/     B00 : 3887                		move.w	d7,(a4)
(1) 1043/     B02 :                     .exit:
(1) 1044/     B02 : 4E75                		rts
(1) 1045/     B04 :                     
(1) 1046/     B04 :                     ; ====================================================================
(1) 1047/     B04 :                     ; ----------------------------------------------------------------
(1) 1048/     B04 :                     ; Video routines for 32X
(1) 1049/     B04 :                     ; ----------------------------------------------------------------
(1) 1050/     B04 :                     
(1) 1051/     B04 :                     ; --------------------------------------------------------
(1) 1052/     B04 :                     ; Video_MarsGfxMode
(1) 1053/     B04 :                     ; Sets graphics mode on the 32X side
(1) 1054/     B04 :                     ;
(1) 1055/     B04 :                     ; Input:
(1) 1056/     B04 :                     ; d0 - Graphics mode number
(1) 1057/     B04 :                     ;
(1) 1058/     B04 :                     ; Uses:
(1) 1059/     B04 :                     ; d7
(1) 1060/     B04 :                     ;
(1) 1061/     B04 :                     ; Notes:
(1) 1062/     B04 :                     ; Changing modes takes 3 FRAMES to process.
(1) 1063/     B04 :                     ; --------------------------------------------------------
(1) 1064/     B04 :                     
(1) 1065/     B04 :                     Video_MarsGfxMode:
(1) 1081/     B04 : 4E75                		rts
(1) 1082/     B06 :                     
(1) 1083/     B06 :                     ; --------------------------------------------------------
(1) 1084/     B06 :                     ; Video_Mars_SyncFrame
(1) 1085/     B06 :                     ; --------------------------------------------------------
(1) 1086/     B06 :                     
(1) 1087/     B06 :                     Video_Mars_SyncFrame:
(1) 1093/     B06 : 4E75                		rts
(1) 1094/     B08 :                     
(1) 1095/     B08 :                     ; --------------------------------------------------------
(1) 1096/     B08 :                     ; Video_LoadPal_Mars
(1) 1097/     B08 :                     ;
(1) 1098/     B08 :                     ; Load Indexed palette directly to Buffer
(1) 1099/     B08 :                     ;
(1) 1100/     B08 :                     ; d0 - Start at
(1) 1101/     B08 :                     ; d1 - Number of colors
(1) 1102/     B08 :                     ; d2 - Priority bit OFF/ON
(1) 1103/     B08 :                     ; --------------------------------------------------------
(1) 1104/     B08 :                     
(1) 1105/     B08 :                     Video_FadePal_Mars:
(1) 1129/     B08 : 4E75                		rts
(1) 1130/     B0A :                     
(1) 1131/     B0A :                     ; --------------------------------------------------------
(1) 1132/     B0A :                     ; Video_MarsPalFade
(1) 1133/     B0A :                     ;
(1) 1134/     B0A :                     ; Input:
(1) 1135/     B0A :                     ; a0 - Palette data
(1) 1136/     B0A :                     ; d0 - Number of colors
(1) 1137/     B0A :                     ; d1 - Speed
(1) 1138/     B0A :                     ;
(1) 1139/     B0A :                     ; RAM_ReqFadeMars: (WORD)
(1) 1140/     B0A :                     ; $00 - No task (or finished)
(1) 1141/     B0A :                     ; $01 - Fade in
(1) 1142/     B0A :                     ; $02 - Fade out to black
(1) 1143/     B0A :                     ;
(1) 1144/     B0A :                     ; CALL THIS OUTSIDE OF VBLANK
(1) 1145/     B0A :                     ; --------------------------------------------------------
(1) 1146/     B0A :                     
(1) 1147/     B0A :                     ; TODO: luego ver que hago con el priority bit
(1) 1148/     B0A :                     
(1) 1149/     B0A :                     Video_MarsPalFade:
(1) 1308/     B0A : 4E75                		rts
(1) 1309/     B0C :                     
(1) 1310/     B0C :                     
(1) 1311/     B0C :                     ; ====================================================================
(1) 1312/     B0C :                     ; ----------------------------------------------------------------
(1) 1313/     B0C :                     ; Common screen routines
(1) 1314/     B0C :                     ; ----------------------------------------------------------------
(1) 1315/     B0C :                     
(1) 1316/     B0C :                     ; --------------------------------------------------------
(1) 1317/     B0C :                     ; Video_LoadMap
(1) 1318/     B0C :                     ;
(1) 1319/     B0C :                     ; Loads map data, in Horizontal order
(1) 1320/     B0C :                     ; Can autodetect layer width, height and
(1) 1321/     B0C :                     ; double interlace mode
(1) 1322/     B0C :                     ;
(1) 1323/     B0C :                     ; Input:
(1) 1324/     B0C :                     ; a0   - Map data
(1) 1325/     B0C :                     ; d0.l - locate(lyr,x,y) / 00|Layer|X|Y
(1) 1326/     B0C :                     ; d1.l - mapsize(x,y) / Width|Height (in cells)
(1) 1327/     B0C :                     ; d2.l - VRAM cell increment
(1) 1328/     B0C :                     ;
(1) 1329/     B0C :                     ; Breaks:
(1) 1330/     B0C :                     ; d4-d7/a6
(1) 1331/     B0C :                     ; --------------------------------------------------------
(1) 1332/     B0C :                     
(1) 1333/     B0C :                     Video_LoadMap:
(1) 1334/     B0C : 4DF9 00C0 0000      		lea	(vdp_data),a6
(1) 1335/     B12 : 6100 01B6           		bsr	vid_PickLayer
(1) 1336/     B16 : 3801                		move.w	d1,d4			; Start here
(1) 1337/     B18 :                     .yloop:
(1) 1338/     B18 : 4844                		swap	d4
(1) 1339/     B1A : 2D45 0004           		move.l	d5,4(a6)
(1) 1340/     B1E : 2E01                		move.l	d1,d7
(1) 1341/     B20 : 4847                		swap	d7
(1) 1342/     B22 :                     .xloop:
(1) 1343/     B22 : 3818                		move.w	(a0)+,d4
(1) 1344/     B24 : 0C44 FFFF           		cmpi.w	#-1,d4			; -1 ? TODO
(1) 1345/     B28 : 6606                		bne.s	.nonull
(1) 1346/     B2A : 383C 07FF           		move.w	#varNullVram,d4		; Replace with custom blank tile
(1) 1347/     B2E : 6002                		bra.s	.cont
(1) 1348/     B30 :                     .nonull:
(1) 1349/     B30 : D842                		add.w	d2,d4
(1) 1350/     B32 :                     .cont:
(1) 1351/     B32 :                     	; Check for double interlace
(1) 1352/     B32 : 4847                		swap	d7
(1) 1353/     B34 : 1E38 BE02           		move.b	(RAM_VdpRegs+$C).w,d7
(1) 1354/     B38 : 0247 0006           		andi.w	#%110,d7
(1) 1355/     B3C : 0C47 0006           		cmpi.w	#%110,d7
(1) 1356/     B40 : 660E                		bne.s	.nodble
(1) 1357/     B42 : 3E04                		move.w	d4,d7
(1) 1358/     B44 : E24F                		lsr.w	#1,d7
(1) 1359/     B46 : 0247 07FF           		andi.w	#$7FF,d7
(1) 1360/     B4A : 0244 F800           		andi.w	#$F800,d4
(1) 1361/     B4E : 8847                		or.w	d7,d4
(1) 1362/     B50 :                     .nodble:
(1) 1363/     B50 : 4847                		swap	d7
(1) 1364/     B52 : 3C84                		move.w	d4,(a6)
(1) 1365/     B54 : 51CF FFCC           		dbf	d7,.xloop
(1) 1366/     B58 : DA86                		add.l	d6,d5
(1) 1367/     B5A : 4844                		swap	d4
(1) 1368/     B5C : 51CC FFBA           		dbf	d4,.yloop
(1) 1369/     B60 : 4E75                		rts
(1) 1370/     B62 :                     
(1) 1371/     B62 :                     ; ; --------------------------------------------------------
(1) 1372/     B62 :                     ; ; Video_LoadMap_Vert
(1) 1373/     B62 :                     ; ;
(1) 1374/     B62 :                     ; ; Load map data, Vertical order
(1) 1375/     B62 :                     ; ;
(1) 1376/     B62 :                     ; ; a0 - Map data
(1) 1377/     B62 :                     ; ; d0 | LONG - 00|Lyr|X|Y,  locate(lyr,x,y)
(1) 1378/     B62 :                     ; ; d1 | LONG - Width|Height (cells),  mapsize(x,y)
(1) 1379/     B62 :                     ; ; d2 | WORD - VRAM
(1) 1380/     B62 :                     ;
(1) 1381/     B62 :                     ; ; Breaks:
(1) 1382/     B62 :                     ; ; a4-a5,d4-d7
(1) 1383/     B62 :                     ; ; --------------------------------------------------------
(1) 1384/     B62 :                     ;
(1) 1385/     B62 :                     ; Video_LoadMap_Vert:
(1) 1386/     B62 :                     ; 		lea	(vdp_data),a4
(1) 1387/     B62 :                     ; 		bsr	vid_PickLayer
(1) 1388/     B62 :                     ; 		move.l	d1,d5		; Start here
(1) 1389/     B62 :                     ; 		swap	d5
(1) 1390/     B62 :                     ; .xloop:
(1) 1391/     B62 :                     ; 		swap	d5
(1) 1392/     B62 :                     ; 		move.l	d4,-(sp)
(1) 1393/     B62 :                     ; 		move.w	d1,d7
(1) 1394/     B62 :                     ; 		btst	#2,(RAM_VdpRegs+$C).w
(1) 1395/     B62 :                     ; 		beq.s	.yloop
(1) 1396/     B62 :                     ; 		lsr.w	#1,d7
(1) 1397/     B62 :                     ; .yloop:
(1) 1398/     B62 :                     ; 		move.l	d4,4(a4)
(1) 1399/     B62 :                     ; 		move.w	(a0),d5
(1) 1400/     B62 :                     ; 		cmpi.w	#-1,d5
(1) 1401/     B62 :                     ; 		bne.s	.nonull
(1) 1402/     B62 :                     ; 		move.w	#varNullVram,d5
(1) 1403/     B62 :                     ; 		bra.s	.cont
(1) 1404/     B62 :                     ; .nonull:
(1) 1405/     B62 :                     ; 		add.w	d2,d5
(1) 1406/     B62 :                     ; .cont:
(1) 1407/     B62 :                     ; 		swap	d7
(1) 1408/     B62 :                     ; 		adda	#2,a0
(1) 1409/     B62 :                     ; 		btst	#2,(RAM_VdpRegs+$C).w
(1) 1410/     B62 :                     ; 		beq.s	.nodble
(1) 1411/     B62 :                     ; 		adda	#2,a0
(1) 1412/     B62 :                     ; 		move.w	d5,d7
(1) 1413/     B62 :                     ; 		lsr.w	#1,d7
(1) 1414/     B62 :                     ; 		andi.w	#$7FF,d7
(1) 1415/     B62 :                     ; 		andi.w	#$F800,d5
(1) 1416/     B62 :                     ; 		or.w	d7,d5
(1) 1417/     B62 :                     ; .nodble:
(1) 1418/     B62 :                     ; 		swap	d7
(1) 1419/     B62 :                     ; 		move.w	d5,(a4)
(1) 1420/     B62 :                     ; 		add.l	d6,d4
(1) 1421/     B62 :                     ; 		dbf	d7,.yloop
(1) 1422/     B62 :                     ; .outdbl:
(1) 1423/     B62 :                     ; 		move.l	(sp)+,d4
(1) 1424/     B62 :                     ; 		add.l	#$20000,d4
(1) 1425/     B62 :                     ; 		swap	d5
(1) 1426/     B62 :                     ; 		dbf	d5,.xloop
(1) 1427/     B62 :                     ; 		rts
(1) 1428/     B62 :                     
(1) 1429/     B62 :                     ; ====================================================================
(1) 1430/     B62 :                     ; ----------------------------------------------------------------
(1) 1431/     B62 :                     ; Text PRINT system, for debugging or quick texts.
(1) 1432/     B62 :                     ; ----------------------------------------------------------------
(1) 1433/     B62 :                     
(1) 1434/     B62 :                     ; --------------------------------------------------------
(1) 1435/     B62 :                     ; Video_PrintInit
(1) 1436/     B62 :                     ;
(1) 1437/     B62 :                     ; Initializes the default Graphics and Palette
(1) 1438/     B62 :                     ; for the font.
(1) 1439/     B62 :                     ;
(1) 1440/     B62 :                     ; Input:
(1) 1441/     B62 :                     ; a0 | ASCII Graphics location
(1) 1442/     B62 :                     ; a1 | ASCII Palette
(1) 1443/     B62 :                     ;
(1) 1444/     B62 :                     ; Breaks:
(1) 1445/     B62 :                     ; ALL
(1) 1446/     B62 :                     ;
(1) 1447/     B62 :                     ; Notes:
(1) 1448/     B62 :                     ; * Requires ASCII font graphics starting from $20
(1) 1449/     B62 :                     ; (" ") to $7F ("[DEL]")
(1) 1450/     B62 :                     ; * CALL THIS ONLY IF DISPLAY IS OFF OR DURING VBLANK
(1) 1451/     B62 :                     ; * 32X: MAKE SURE SH2 IS NOT READING ROM DATA
(1) 1452/     B62 :                     ; --------------------------------------------------------
(1) 1453/     B62 :                     
(1) 1454/     B62 :                     Video_PrintInit:
(1) 1455/     B62 :                     ; 		lea	(ASCII_FONT).l,a0
(1) 1456/     B62 :                     ; 		lea	(ASCII_PAL).l,a1
(1) 1457/     B62 : 2008                		move.l	a0,d0
(1) 1458/     B64 : 323C B000           		move.w	#cell_vram(varPrintVram),d1
(1) 1459/     B68 : 343C 0C00           		move.w	#($60*$20),d2			; From " " to "[DEL]"
(1) 1460/     B6C : 363C 6580           		move.w	#(varPrintPal<<13)|varPrintVram,d3
(1) 1461/     B70 : 0443 0020           		subi.w	#$20,d3
(1) 1462/     B74 : 31C3 BDE2           		move.w	d3,(RAM_VidPrntVram).w
(1) 1463/     B78 : 6100 FDEE           		bsr	Video_LoadArt
(1) 1464/     B7C :                     Video_PrintPal:
(1) 1465/     B7C : 2049                		movea.l	a1,a0
(1) 1466/     B7E : 7030                		moveq	#(varPrintPal<<4),d0
(1) 1467/     B80 : 323C 000F           		move.w	#$0F,d1
(1) 1468/     B84 : 6100 FAD0           		bsr	Video_LoadPal	; Write to both palette buffers
(1) 1469/     B88 : 6000 FAC2           		bra	Video_FadePal
(1) 1470/     B8C :                     
(1) 1471/     B8C :                     ; --------------------------------------------------------
(1) 1472/     B8C :                     ; Video_Print
(1) 1473/     B8C :                     ;
(1) 1474/     B8C :                     ; Prints string to layer
(1) 1475/     B8C :                     ;
(1) 1476/     B8C :                     ; Input:
(1) 1477/     B8C :                     ; a0   - String data w/special characters +
(1) 1478/     B8C :                     ;        list of RAM locations to read
(1) 1479/     B8C :                     ; d0.l - Print location on-screen: locate(layer,x,y)
(1) 1480/     B8C :                     ;        ( 00|Lyr|X|Y )
(1) 1481/     B8C :                     ;
(1) 1482/     B8C :                     ; Breaks:
(1) 1483/     B8C :                     ; d4-d7,a4-a6
(1) 1484/     B8C :                     ;
(1) 1485/     B8C :                     ; Notes:
(1) 1486/     B8C :                     ; CALL Video_PrintInit FIRST
(1) 1487/     B8C :                     ;
(1) 1488/     B8C :                     ; Text string special codes:
(1) 1489/     B8C :                     ; $00 - End of line
(1) 1490/     B8C :                     ; $0A - Next line
(1) 1491/     B8C :                     ; "//b" - Show BYTE value
(1) 1492/     B8C :                     ; "//w" - Show WORD value
(1) 1493/     B8C :                     ; "//l" - Show LONG value
(1) 1494/     B8C :                     ;
(1) 1495/     B8C :                     ; If using //b //w //l:
(1) 1496/     B8C :                     ; After $00, put your RAM addresses in LONGS in the
(1) 1497/     B8C :                     ; same order you placed your value tags, don't forget to
(1) 1498/     B8C :                     ; put "align 2" at the end of the string or it will
(1) 1499/     B8C :                     ; trigger and ADDRESS ERROR
(1) 1500/     B8C :                     ; --------------------------------------------------------
(1) 1501/     B8C :                     
(1) 1502/     B8C :                     ; TODO: negative values might break
(1) 1503/     B8C :                     
(1) 1504/     B8C :                     Video_Print:
(1) 1505/     B8C : 48E7 0F0E           		movem.l	d4-d7/a4-a6,-(sp)
(1) 1506/     B90 : 4DF9 00C0 0000      		lea	(vdp_data).l,a6
(1) 1507/     B96 : 6100 0132           		bsr	vid_PickLayer
(1) 1508/     B9A : 4BF8 BC54           		lea	(RAM_VidPrntList).w,a5
(1) 1509/     B9E :                     .newjump:
(1) 1510/     B9E : 2D45 0004           		move.l	d5,4(a6)
(1) 1511/     BA2 : 2805                		move.l	d5,d4
(1) 1512/     BA4 :                     .loop:
(1) 1513/     BA4 : 1E18                		move.b	(a0)+,d7
(1) 1514/     BA6 : 0247 00FF           		andi.w	#$FF,d7
(1) 1515/     BAA : 676C                		beq	.exit
(1) 1516/     BAC : 0C07 000A           		cmpi.b	#$0A,d7			; $0A - next line?
(1) 1517/     BB0 : 672C                		beq.s	.next
(1) 1518/     BB2 : 0C07 005C           		cmpi.b	#$5C,d7			; $5C ("\") special?
(1) 1519/     BB6 : 6618                		bne.s	.puttext
(1) 1520/     BB8 : 1E18                		move.b	(a0)+,d7		; Read next chr
(1) 1521/     BBA : 0C07 0062           		cmpi.b	#"b",d7
(1) 1522/     BBE : 6722                		beq.s	.isbyte
(1) 1523/     BC0 : 0C07 0077           		cmpi.b	#"w",d7
(1) 1524/     BC4 : 672E                		beq.s	.isword
(1) 1525/     BC6 : 0C07 006C           		cmpi.b	#"l",d7
(1) 1526/     BCA : 673A                		beq.s	.islong
(1) 1527/     BCC : 3E3C 005C           		move.w	#"\\",d7		; normal "\"
(1) 1528/     BD0 :                     .puttext:
(1) 1529/     BD0 : DE78 BDE2           		add.w	(RAM_VidPrntVram).w,d7	; VRAM pos increment
(1) 1530/     BD4 : 3C87                		move.w	d7,(a6)
(1) 1531/     BD6 : 0684 0002 0000      		addi.l	#$20000,d4
(1) 1532/     BDC : 60C6                		bra.s	.loop
(1) 1533/     BDE :                     .next:
(1) 1534/     BDE : DA86                		add.l	d6,d5			; Next line
(1) 1535/     BE0 : 60BC                		bra.s	.newjump
(1) 1536/     BE2 :                     
(1) 1537/     BE2 :                     	; Set print values
(1) 1538/     BE2 :                     .isbyte:
(1) 1539/     BE2 : 2AC4                		move.l	d4,(a5)+
(1) 1540/     BE4 : 3AFC 0001           		move.w	#1,(a5)+
(1) 1541/     BE8 : 0684 0004 0000      		addi.l	#$40000,d4
(1) 1542/     BEE : 2D44 0004           		move.l	d4,4(a6)
(1) 1543/     BF2 : 60B0                		bra	.loop
(1) 1544/     BF4 :                     .isword:
(1) 1545/     BF4 : 2AC4                		move.l	d4,(a5)+
(1) 1546/     BF6 : 3AFC 0002           		move.w	#2,(a5)+
(1) 1547/     BFA : 0684 0008 0000      		addi.l	#$80000,d4
(1) 1548/     C00 : 2D44 0004           		move.l	d4,4(a6)
(1) 1549/     C04 : 609E                		bra	.loop
(1) 1550/     C06 :                     .islong:
(1) 1551/     C06 : 2AC4                		move.l	d4,(a5)+
(1) 1552/     C08 : 3AFC 0003           		move.w	#3,(a5)+
(1) 1553/     C0C : 0684 0010 0000      		addi.l	#$100000,d4
(1) 1554/     C12 : 2D44 0004           		move.l	d4,4(a6)
(1) 1555/     C16 : 608C                		bra	.loop
(1) 1556/     C18 :                     .exit:
(1) 1557/     C18 :                     
(1) 1558/     C18 :                     	; ----------------------------------------
(1) 1559/     C18 :                     	; Print values
(1) 1560/     C18 :                     	;
(1) 1561/     C18 :                     	; vvvv vvvv tttt
(1) 1562/     C18 :                     	; v - vdp pos
(1) 1563/     C18 :                     	; t - value type
(1) 1564/     C18 :                     	; ----------------------------------------
(1) 1565/     C18 :                     
(1) 1566/     C18 :                     	; reading byte by byte because longs doesn't get
(1) 1567/     C18 :                     	; aligned after $00...
(1) 1568/     C18 :                     
(1) 1569/     C18 : 7800                		moveq	#0,d4
(1) 1570/     C1A : 7A00                		moveq	#0,d5
(1) 1571/     C1C : 7C00                		moveq	#0,d6
(1) 1572/     C1E : 4BF8 BC54           		lea	(RAM_VidPrntList).w,a5
(1) 1573/     C22 :                     .nextv:
(1) 1574/     C22 : 4A95                		tst.l	(a5)
(1) 1575/     C24 : 6700 009E           		beq	.nothing
(1) 1576/     C28 :                     
(1) 1577/     C28 :                     	; grab value
(1) 1578/     C28 : 7800                		moveq	#0,d4
(1) 1579/     C2A : 1818                		move.b	(a0)+,d4
(1) 1580/     C2C : E19C                		rol.l	#8,d4
(1) 1581/     C2E : 1818                		move.b	(a0)+,d4
(1) 1582/     C30 : E19C                		rol.l	#8,d4
(1) 1583/     C32 : 1818                		move.b	(a0)+,d4
(1) 1584/     C34 : E19C                		rol.l	#8,d4
(1) 1585/     C36 : 1818                		move.b	(a0)+,d4
(1) 1586/     C38 : 2844                		movea.l	d4,a4
(1) 1587/     C3A : 7800                		moveq	#0,d4
(1) 1588/     C3C :                     
(1) 1589/     C3C :                     	; get value
(1) 1590/     C3C : 3C2D 0004           		move.w	4(a5),d6
(1) 1591/     C40 : 0C46 0001           		cmpi.w	#1,d6		; byte?
(1) 1592/     C44 : 660E                		bne.s	.vbyte
(1) 1593/     C46 : 1814                		move.b	(a4),d4
(1) 1594/     C48 : 2D55 0004           		move.l	(a5),4(a6)
(1) 1595/     C4C : E91C                		rol.b	#4,d4
(1) 1596/     C4E : 6158                		bsr.s	.donibl
(1) 1597/     C50 : E91C                		rol.b	#4,d4
(1) 1598/     C52 : 6154                		bsr.s	.donibl
(1) 1599/     C54 :                     .vbyte:
(1) 1600/     C54 : 0C46 0002           		cmpi.w	#2,d6		; word?
(1) 1601/     C58 : 661C                		bne.s	.vword
(1) 1602/     C5A : 1814                		move.b	(a4),d4
(1) 1603/     C5C : E15C                		rol.w	#8,d4
(1) 1604/     C5E : 182C 0001           		move.b	1(a4),d4
(1) 1605/     C62 : 2D55 0004           		move.l	(a5),4(a6)
(1) 1606/     C66 : E95C                		rol.w	#4,d4
(1) 1607/     C68 : 613E                		bsr.s	.donibl
(1) 1608/     C6A : E95C                		rol.w	#4,d4
(1) 1609/     C6C : 613A                		bsr.s	.donibl
(1) 1610/     C6E : E95C                		rol.w	#4,d4
(1) 1611/     C70 : 6136                		bsr.s	.donibl
(1) 1612/     C72 : E95C                		rol.w	#4,d4
(1) 1613/     C74 : 6132                		bsr.s	.donibl
(1) 1614/     C76 :                     .vword:
(1) 1615/     C76 : 0C46 0003           		cmpi.w	#3,d6		; long?
(1) 1616/     C7A : 6624                		bne.s	.vlong
(1) 1617/     C7C : 1814                		move.b	(a4),d4
(1) 1618/     C7E : E19C                		rol.l	#8,d4
(1) 1619/     C80 : 182C 0001           		move.b	1(a4),d4
(1) 1620/     C84 : E19C                		rol.l	#8,d4
(1) 1621/     C86 : 182C 0002           		move.b	2(a4),d4
(1) 1622/     C8A : E19C                		rol.l	#8,d4
(1) 1623/     C8C : 182C 0003           		move.b	3(a4),d4
(1) 1624/     C90 : 2D55 0004           		move.l	(a5),4(a6)
(1) 1625/     C94 : 3C3C 0007           		move.w	#7,d6
(1) 1626/     C98 : E99C                .lngloop:	rol.l	#4,d4
(1) 1627/     C9A : 610C                		bsr.s	.donibl
(1) 1628/     C9C : 51CE FFFA           		dbf	d6,.lngloop
(1) 1629/     CA0 :                     .vlong:
(1) 1630/     CA0 : 429D                		clr.l	(a5)+
(1) 1631/     CA2 : 425D                		clr.w	(a5)+
(1) 1632/     CA4 : 6000 FF7C           		bra	.nextv
(1) 1633/     CA8 :                     
(1) 1634/     CA8 :                     ; make nibble byte
(1) 1635/     CA8 :                     .donibl:
(1) 1636/     CA8 : 3A04                		move.w	d4,d5
(1) 1637/     CAA : 0245 000F           		andi.w	#%1111,d5
(1) 1638/     CAE : 0C05 000A           		cmpi.b	#$A,d5
(1) 1639/     CB2 : 6D04                		blt.s	.lowr
(1) 1640/     CB4 : DA3C 0007           		add.b	#7,d5
(1) 1641/     CB8 :                     .lowr:
(1) 1642/     CB8 : DA7C 0030           		add.w	#"0",d5
(1) 1643/     CBC : DA78 BDE2           		add.w	(RAM_VidPrntVram).w,d5
(1) 1644/     CC0 : 3C85                		move.w	d5,(a6)
(1) 1645/     CC2 : 4E75                		rts
(1) 1646/     CC4 :                     ; exit
(1) 1647/     CC4 :                     .nothing:
(1) 1648/     CC4 : 4CDF 70F0           		movem.l	(sp)+,d4-d7/a4-a6
(1) 1649/     CC8 : 4E75                		rts
(1) 1650/     CCA :                     
(1) 1651/     CCA :                     ; ------------------------------------------------
(1) 1652/     CCA :                     ; Shared: pick layer / x pos / y pos and set size
(1) 1653/     CCA :                     ;
(1) 1654/     CCA :                     ; Input:
(1) 1655/     CCA :                     ; d0.l - locate(layer,x,y)
(1) 1656/     CCA :                     ;
(1) 1657/     CCA :                     ; Returns:
(1) 1658/     CCA :                     ; d5 - VRAM position
(1) 1659/     CCA :                     ; d6 - Width
(1) 1660/     CCA :                     ; ------------------------------------------------
(1) 1661/     CCA :                     
(1) 1662/     CCA :                     vid_PickLayer:
(1) 1663/     CCA : 2C00                		move.l	d0,d6			; d6 - pick layer
(1) 1664/     CCC : 4846                		swap	d6
(1) 1665/     CCE : 0806 0000           		btst	#0,d6
(1) 1666/     CD2 : 671C                		beq.s	.plawnd
(1) 1667/     CD4 : 1A38 BDFA           		move.b	(RAM_VdpRegs+4).w,d5	; BG
(1) 1668/     CD8 : 3805                		move.w	d5,d4
(1) 1669/     CDA : E24C                		lsr.w	#1,d4
(1) 1670/     CDC : 0244 0003           		andi.w	#%11,d4
(1) 1671/     CE0 : 4845                		swap	d5
(1) 1672/     CE2 : 3A04                		move.w	d4,d5
(1) 1673/     CE4 : 4845                		swap	d5
(1) 1674/     CE6 : 0245 0001           		andi.w	#1,d5
(1) 1675/     CEA : E14D                		lsl.w	#8,d5
(1) 1676/     CEC : EB4D                		lsl.w	#5,d5
(1) 1677/     CEE : 6024                		bra.s	.golyr
(1) 1678/     CF0 :                     .plawnd:
(1) 1679/     CF0 : 1A38 BDF8           		move.b	(RAM_VdpRegs+2).w,d5	; FG
(1) 1680/     CF4 : 0806 0001           		btst	#1,d6
(1) 1681/     CF8 : 6704                		beq.s	.nowd
(1) 1682/     CFA : 1A38 BDF9           		move.b	(RAM_VdpRegs+3).w,d5	; WINDOW
(1) 1683/     CFE :                     .nowd:
(1) 1684/     CFE : 3805                		move.w	d5,d4
(1) 1685/     D00 : E84C                		lsr.w	#4,d4
(1) 1686/     D02 : 0244 0003           		andi.w	#%11,d4
(1) 1687/     D06 : 4845                		swap	d5
(1) 1688/     D08 : 3A04                		move.w	d4,d5
(1) 1689/     D0A : 4845                		swap	d5
(1) 1690/     D0C : 0245 000E           		andi.w	#%00001110,d5
(1) 1691/     D10 : E14D                		lsl.w	#8,d5
(1) 1692/     D12 : E54D                		lsl.w	#2,d5
(1) 1693/     D14 :                     .golyr:
(1) 1694/     D14 : 0045 4000           		ori.w	#$4000,d5
(1) 1695/     D18 : 3800                		move.w	d0,d4			; Y start pos
(1) 1696/     D1A : 0244 00FF           		andi.w	#$FF,d4			; Y only
(1) 1697/     D1E : ED4C                		lsl.w	#6,d4
(1) 1698/     D20 : 1C38 BE06           		move.b	(RAM_VdpRegs+$10).w,d6
(1) 1699/     D24 : 0246 0003           		andi.w	#%11,d6
(1) 1700/     D28 : 670A                		beq.s	.thissz
(1) 1701/     D2A : D844                		add.w	d4,d4			; H64
(1) 1702/     D2C : 0246 0002           		andi.w	#%10,d6
(1) 1703/     D30 : 6702                		beq.s	.thissz
(1) 1704/     D32 : D844                		add.w	d4,d4			; H128
(1) 1705/     D34 :                     .thissz:
(1) 1706/     D34 : DA44                		add.w	d4,d5
(1) 1707/     D36 : 3800                		move.w	d0,d4
(1) 1708/     D38 : 0244 FF00           		andi.w	#$FF00,d4		; X only
(1) 1709/     D3C : EE4C                		lsr.w	#7,d4
(1) 1710/     D3E : DA44                		add.w	d4,d5			; X add
(1) 1711/     D40 : 4845                		swap	d5
(1) 1712/     D42 : 7C00                		moveq	#0,d6
(1) 1713/     D44 : 3C3C 0040           		move.w	#$40,d6			; Set jump size
(1) 1714/     D48 : 1838 BE06           		move.b	(RAM_VdpRegs+$10).w,d4
(1) 1715/     D4C : 0244 0003           		andi.w	#%11,d4
(1) 1716/     D50 : 670A                		beq.s	.thisszj
(1) 1717/     D52 : DC46                		add.w	d6,d6			; H64
(1) 1718/     D54 : 0244 0002           		andi.w	#%10,d4
(1) 1719/     D58 : 6702                		beq.s	.thisszj
(1) 1720/     D5A : DC46                		add.w	d6,d6			; H128
(1) 1721/     D5C :                     .thisszj:
(1) 1722/     D5C : 4846                		swap	d6
(1) 1723/     D5E : 4E75                		rts
(1) 1724/     D60 :                     
(1) 1725/     D60 :                     ; ====================================================================
(1) 1726/     D60 :                     ; ----------------------------------------------------------------
(1) 1727/     D60 :                     ; Objects system
(1) 1728/     D60 :                     ; ----------------------------------------------------------------
(1) 1729/     D60 :                     
(1) 1730/     D60 :                     ; --------------------------------------------------------
(1) 1731/     D60 :                     ; Init objects system
(1) 1732/     D60 :                     ; --------------------------------------------------------
(1) 1733/     D60 :                     
(1) 1734/     D60 :                     Objects_Clear:
(1) 1735/     D60 : 4DF8 B294           		lea	(RAM_Objects).w,a6
(1) 1736/     D64 : 3E3C 098F           		move.w	#(sizeof_mdobj*MAX_MDOBJ)-1,d7
(1) 1737/     D68 :                     .clr:
(1) 1738/     D68 : 421E                		clr.b	(a6)+
(1) 1739/     D6A : 51CF FFFC           		dbf	d7,.clr
(1) 1740/     D6E : 4DF8 BC24           		lea	(RAM_ObjDispList).w,a6
(1) 1741/     D72 : 3E3C 0017           		move.w	#MAX_MDOBJ-1,d7
(1) 1742/     D76 :                     .clr_d:
(1) 1743/     D76 : 425E                		clr.w	(a6)+
(1) 1744/     D78 : 51CF FFFC           		dbf	d7,.clr_d
(1) 1745/     D7C : 31FC 0001 BDDA      		move.w	#1,(RAM_SprLinkNum).w
(1) 1746/     D82 : 4278 BDD8           		clr.w	(RAM_SprDrwCntr).w
(1) 1747/     D86 : 4E75                		rts
(1) 1748/     D88 :                     
(1) 1749/     D88 :                     ; --------------------------------------------------------
(1) 1750/     D88 :                     ; Process objects
(1) 1751/     D88 :                     ; --------------------------------------------------------
(1) 1752/     D88 :                     
(1) 1753/     D88 :                     Objects_Run:
(1) 1754/     D88 : 4DF8 B294           		lea	(RAM_Objects).w,a6
(1) 1755/     D8C : 3E3C 0017           		move.w	#MAX_MDOBJ-1,d7
(1) 1756/     D90 :                     .next_one:
(1) 1757/     D90 : 2C16                		move.l	obj_code(a6),d6
(1) 1758/     D92 : 6708                		beq.s	.no_code	; Free slot
(1) 1759/     D94 : 2F07                		move.l	d7,-(sp)
(1) 1760/     D96 : 2A46                		move.l	d6,a5
(1) 1761/     D98 : 4E95                		jsr	(a5)
(1) 1762/     D9A : 2E1F                		move.l	(sp)+,d7
(1) 1763/     D9C :                     .no_code:
(1) 1764/     D9C : DCFC 0066           		adda	#sizeof_mdobj,a6
(1) 1765/     DA0 : 51CF FFEE           		dbf	d7,.next_one
(1) 1766/     DA4 : 4E75                		rts
(1) 1767/     DA6 :                     
(1) 1768/     DA6 :                     ; --------------------------------------------------------
(1) 1769/     DA6 :                     ; Objects_Set
(1) 1770/     DA6 :                     ;
(1) 1771/     DA6 :                     ; Input:
(1) 1772/     DA6 :                     ; d0 - Object code location (0 - delete)
(1) 1773/     DA6 :                     ; d1 - Object slot
(1) 1774/     DA6 :                     ;
(1) 1775/     DA6 :                     ; Uses:
(1) 1776/     DA6 :                     ; d7,a5-a6
(1) 1777/     DA6 :                     ; --------------------------------------------------------
(1) 1778/     DA6 :                     
(1) 1779/     DA6 :                     Objects_Set:
(1) 1780/     DA6 : 4DF8 B294           		lea	(RAM_Objects).w,a6
(1) 1781/     DAA : 2A4E                		move.l	a6,a5
(1) 1782/     DAC : 3E3C 0065           		move.w	#sizeof_mdobj-1,d7
(1) 1783/     DB0 :                     .clr:
(1) 1784/     DB0 : 421D                		clr.b	(a5)+
(1) 1785/     DB2 : 51CF FFFC           		dbf	d7,.clr
(1) 1786/     DB6 : 3E01                		move.w	d1,d7
(1) 1787/     DB8 : CEFC 0066           		mulu.w	#sizeof_mdobj,d7
(1) 1788/     DBC : DCC7                		adda	d7,a6
(1) 1789/     DBE : 2C80                		move.l	d0,obj_code(a6)
(1) 1790/     DC0 : 4DF8 BC24           		lea	(RAM_ObjDispList).w,a6
(1) 1791/     DC4 : 3E01                		move.w	d1,d7
(1) 1792/     DC6 : DE47                		add.w	d7,d7
(1) 1793/     DC8 : 3DBC 0000 7000      		move.w	#0,(a6,d7.w)
(1) 1794/     DCE : 4E75                		rts
(1) 1795/     DD0 :                     
(1) 1796/     DD0 :                     ; --------------------------------------------------------
(1) 1797/     DD0 :                     ; Objects_Add
(1) 1798/     DD0 :                     ;
(1) 1799/     DD0 :                     ; Returns:
(1) 1800/     DD0 :                     ; d0 - -1 if ran out of Objects
(1) 1801/     DD0 :                     ; --------------------------------------------------------
(1) 1802/     DD0 :                     
(1) 1803/     DD0 :                     Objects_Add:
(1) 1804/     DD0 : 4DF8 B294           		lea	(RAM_Objects).w,a6
(1) 1805/     DD4 : 3E3C 0017           		move.w	#MAX_MDOBJ-1,d7
(1) 1806/     DD8 :                     .search:
(1) 1807/     DD8 : 2E16                		move.l	obj_code(a6),d7
(1) 1808/     DDA : 670C                		beq.s	.use_it
(1) 1809/     DDC : DCFC 0066           		adda	#sizeof_mdobj,a6
(1) 1810/     DE0 : 51CF FFF6           		dbf	d7,.search
(1) 1811/     DE4 : 70FF                		moveq	#-1,d0		; Return ran-out flag
(1) 1812/     DE6 : 4E75                		rts
(1) 1813/     DE8 :                     .use_it:
(1) 1814/     DE8 : 2A4E                		move.l	a6,a5
(1) 1815/     DEA : 3E3C 0065           		move.w	#sizeof_mdobj-1,d7
(1) 1816/     DEE :                     .clr:
(1) 1817/     DEE : 421D                		clr.b	(a5)+
(1) 1818/     DF0 : 51CF FFFC           		dbf	d7,.clr
(1) 1819/     DF4 : 2C80                		move.l	d0,obj_code(a6)
(1) 1820/     DF6 : 4DF8 BC24           		lea	(RAM_ObjDispList).w,a6
(1) 1821/     DFA : 3E01                		move.w	d1,d7
(1) 1822/     DFC : DE47                		add.w	d7,d7
(1) 1823/     DFE : 3DBC 0000 7000      		move.w	#0,(a6,d7.w)
(1) 1824/     E04 : 4E75                		rts
(1) 1825/     E06 :                     
(1) 1826/     E06 :                     ; --------------------------------------------------------
(1) 1827/     E06 :                     ; Draw ALL Objects from display list
(1) 1828/     E06 :                     ;
(1) 1829/     E06 :                     ; Call this BEFORE VBlank.
(1) 1830/     E06 :                     ; --------------------------------------------------------
(1) 1831/     E06 :                     
(1) 1832/     E06 :                     Objects_Show:
(1) 1833/     E06 : 3C38 BDDA           		move.w	(RAM_SprLinkNum).w,d6		; d6 - Starting sprite link
(1) 1834/     E0A : 4DF8 A414           		lea	(RAM_Sprites),a6		; a6 - Genesis sprites
(1) 1835/     E0E : 3E06                		move.w	d6,d7
(1) 1836/     E10 : 5347                		subq.w	#1,d7
(1) 1837/     E12 : E74F                		lsl.w	#3,d7
(1) 1838/     E14 : DCC7                		adda	d7,a6
(1) 1839/     E16 :                     
(1) 1840/     E16 : 3E38 BDD8           		move.w	(RAM_SprDrwCntr),d7
(1) 1841/     E1A : 6732                		beq.s	.no_sprdrw
(1) 1842/     E1C : 4278 BDD8           		clr.w	(RAM_SprDrwCntr).w
(1) 1843/     E20 : 4BF8 A914           		lea	(RAM_SprDrwPz),a5
(1) 1844/     E24 : 9E7C 0001           		sub.w	#1,d7
(1) 1845/     E28 :                     .nexts:
(1) 1846/     E28 : BC7C 0050           		cmp.w	#80,d6
(1) 1847/     E2C : 6C20                		bge.s	.no_sprdrw
(1) 1848/     E2E : 301D                		move.w	(a5)+,d0
(1) 1849/     E30 : 321D                		move.w	(a5)+,d1	; custom
(1) 1850/     E32 : C27C 00FF           		and.w	#$FF,d1
(1) 1851/     E36 : E149                		lsl.w	#8,d1
(1) 1852/     E38 : 8246                		or.w	d6,d1
(1) 1853/     E3A : 341D                		move.w	(a5)+,d2
(1) 1854/     E3C : 361D                		move.w	(a5)+,d3
(1) 1855/     E3E : 3CC0                		move.w	d0,(a6)+
(1) 1856/     E40 : 3CC1                		move.w	d1,(a6)+
(1) 1857/     E42 : 3CC2                		move.w	d2,(a6)+
(1) 1858/     E44 : 3CC3                		move.w	d3,(a6)+
(1) 1859/     E46 : DC7C 0001           		add.w	#1,d6
(1) 1860/     E4A : 51CF FFDC           		dbf	d7,.nexts
(1) 1861/     E4E :                     .no_sprdrw:
(1) 1862/     E4E :                     
(1) 1863/     E4E :                     ; 		move.w	(RAM_SprLinkNum).w,d6	; d6 - Starting sprite link
(1) 1864/     E4E :                     ; 		lea	(RAM_Sprites).w,a6	; a6 - Genesis sprites
(1) 1865/     E4E : 4BF8 BC24           		lea	(RAM_ObjDispList).w,a5
(1) 1866/     E52 : 3E3C 0017           		move.w	#MAX_MDOBJ-1,d7
(1) 1867/     E56 :                     .next:
(1) 1868/     E56 : 3015                		move.w	(a5),d0
(1) 1869/     E58 : 6700 00AC           		beq	.finish
(1) 1870/     E5C : 4255                		clr.w	(a5)
(1) 1871/     E5E : 72FF                		moveq	#-1,d1			; Write the $FFFFxxxx part
(1) 1872/     E60 : 3200                		move.w	d0,d1			; get the half-address
(1) 1873/     E62 : 2841                		move.l	d1,a4			; set to a4
(1) 1874/     E64 : 206C 000C           		move.l	obj_map(a4),a0		; Read this object's map
(1) 1875/     E68 : 302C 001E           		move.w	obj_frame(a4),d0
(1) 1876/     E6C : 182C 0022           		move.b	obj_set(a4),d4
(1) 1877/     E70 : D040                		add.w	d0,d0
(1) 1878/     E72 : 3030 0000           		move.w	(a0,d0.w),d0
(1) 1879/     E76 : 41F0 0000           		lea	(a0,d0.w),a0
(1) 1880/     E7A : 3A18                		move.w	(a0)+,d5
(1) 1881/     E7C : 6700 0082           		beq	.mk_spr
(1) 1882/     E80 : 0445 0001           		subi.w	#1,d5
(1) 1883/     E84 :                     .mk_pz:
(1) 1884/     E84 : 0C46 0050           		cmpi.w	#80,d6
(1) 1885/     E88 : 6E00 009A           		bgt	.ran_out
(1) 1886/     E8C : 4845                		swap	d5
(1) 1887/     E8E : 4846                		swap	d6
(1) 1888/     E90 : 1018                		move.b	(a0)+,d0		; d0 - Y pos
(1) 1889/     E92 : 1218                		move.b	(a0)+,d1		; d1 - Size
(1) 1890/     E94 : 3418                		move.w	(a0)+,d2		; d2 - VRAM main
(1) 1891/     E96 : D0FC 0002           		adda	#2,a0			; TODO: VRAM double later
(1) 1892/     E9A : 3618                		move.w	(a0)+,d3		; d3 - X pos
(1) 1893/     E9C : 4880                		ext.w	d0
(1) 1894/     E9E :                     
(1) 1895/     E9E :                     	; X/Y flip checks
(1) 1896/     E9E : 3A2C 0014           		move.w	obj_vram(a4),d5
(1) 1897/     EA2 : 0804 0001           		btst	#bitobj_flipV,d4
(1) 1898/     EA6 : 6714                		beq.s	.vram_v
(1) 1899/     EA8 : 4440                		neg.w	d0
(1) 1900/     EAA : 0440 0008           		subi.w	#8,d0
(1) 1901/     EAE : 3C01                		move.w	d1,d6
(1) 1902/     EB0 : 0246 0003           		andi.w	#%0011,d6
(1) 1903/     EB4 : E74E                		lsl.w	#3,d6
(1) 1904/     EB6 : 9046                		sub.w	d6,d0
(1) 1905/     EB8 : 0045 1000           		ori.w	#$1000,d5
(1) 1906/     EBC :                     .vram_v:
(1) 1907/     EBC : 0804 0000           		btst	#bitobj_flipH,d4
(1) 1908/     EC0 : 6714                		beq.s	.vram_h
(1) 1909/     EC2 : 4443                		neg.w	d3
(1) 1910/     EC4 : 0443 0008           		subi.w	#8,d3
(1) 1911/     EC8 : 3C01                		move.w	d1,d6
(1) 1912/     ECA : 0246 000C           		andi.w	#%1100,d6
(1) 1913/     ECE : DC46                		add.w	d6,d6
(1) 1914/     ED0 : 9646                		sub.w	d6,d3
(1) 1915/     ED2 : 0045 0800           		ori.w	#$0800,d5
(1) 1916/     ED6 :                     .vram_h:
(1) 1917/     ED6 : D445                		add.w	d5,d2
(1) 1918/     ED8 : D06C 0008           		add.w	obj_y(a4),d0
(1) 1919/     EDC : D66C 0004           		add.w	obj_x(a4),d3
(1) 1920/     EE0 : D07C 0080           		add.w	#$80,d0
(1) 1921/     EE4 : D67C 0080           		add.w	#$80,d3
(1) 1922/     EE8 : 4846                		swap	d6
(1) 1923/     EEA : E149                		lsl.w	#8,d1			; Size + Link
(1) 1924/     EEC : 8246                		or.w	d6,d1
(1) 1925/     EEE : 3CC0                		move.w	d0,(a6)+
(1) 1926/     EF0 : 3CC1                		move.w	d1,(a6)+
(1) 1927/     EF2 : 3CC2                		move.w	d2,(a6)+
(1) 1928/     EF4 : 3CC3                		move.w	d3,(a6)+
(1) 1929/     EF6 : DC7C 0001           		add.w	#1,d6
(1) 1930/     EFA : 4845                		swap	d5
(1) 1931/     EFC : 51CD FF86           		dbf	d5,.mk_pz
(1) 1932/     F00 :                     .mk_spr:
(1) 1933/     F00 : 425D                		clr.w	(a5)+			; Clear request
(1) 1934/     F02 : 51CF FF52           		dbf	d7,.next
(1) 1935/     F06 :                     .finish:
(1) 1936/     F06 : 4DF8 A414           		lea	(RAM_Sprites).w,a6
(1) 1937/     F0A : 0C46 0001           		cmpi.w	#1,d6
(1) 1938/     F0E : 6714                		beq.s	.ran_out
(1) 1939/     F10 : 0C46 0050           		cmpi.w	#80,d6
(1) 1940/     F14 : 6E0E                		bgt.s	.ran_out
(1) 1941/     F16 : 3E06                		move.w	d6,d7
(1) 1942/     F18 : 0447 0001           		subi.w	#1,d7
(1) 1943/     F1C : E74F                		lsl.w	#3,d7
(1) 1944/     F1E : DCC7                		adda	d7,a6
(1) 1945/     F20 : 429E                		clr.l	(a6)+
(1) 1946/     F22 : 429E                		clr.l	(a6)+
(1) 1947/     F24 :                     .ran_out:
(1) 1948/     F24 : 31C6 BDDA           		move.w	d6,(RAM_SprLinkNum).w
(1) 1949/     F28 : 4E75                		rts
(1) 1950/     F2A :                     
(1) 1951/     F2A :                     ; --------------------------------------------------------
(1) 1952/     F2A :                     ; Objects system subroutines
(1) 1953/     F2A :                     ; --------------------------------------------------------
(1) 1954/     F2A :                     
(1) 1955/     F2A :                     ; --------------------------------------------------------
(1) 1956/     F2A :                     ; obj_Display
(1) 1957/     F2A :                     ;
(1) 1958/     F2A :                     ; Builds a sprite using map data specified in
(1) 1959/     F2A :                     ; obj_map(a6)
(1) 1960/     F2A :                     ;
(1) 1961/     F2A :                     ; *** GENESIS map ***
(1) 1962/     F2A :                     ; mapdata:
(1) 1963/     F2A :                     ;       dc.w .frame0-mapdata
(1) 1964/     F2A :                     ;       dc.w .frame1-mapdata
(1) 1965/     F2A :                     ;       ...
(1) 1966/     F2A :                     ; .frame0:
(1) 1967/     F2A :                     ;       dc.w numofpz
(1) 1968/     F2A :                     ;       dc.b YY,SS
(1) 1969/     F2A :                     ;       dc.w vram_normal
(1) 1970/     F2A :                     ;       dc.w vram_half
(1) 1971/     F2A :                     ;       dc.w XXXX
(1) 1972/     F2A :                     ;       ; next frame
(1) 1973/     F2A :                     ;       align 2
(1) 1974/     F2A :                     ;
(1) 1975/     F2A :                     ; *** 32X map ***
(1) 1976/     F2A :                     ; mapdata:
(1) 1977/     F2A :                     ; 	dc.l SH2_ADDR|TH ; Spritesheet location (TH opt.)
(1) 1978/     F2A :                     ; 	dc.w 512	 ; Spritesheet WIDTH
(1) 1979/     F2A :                     ; 	dc.b 64,72	 ; Frame width and height
(1) 1980/     F2A :                     ; 	dc.w $80	 ; Palette index
(1) 1981/     F2A :                     ;
(1) 1982/     F2A :                     ; obj_frame(a6) is in YYXX direction
(1) 1983/     F2A :                     ;
(1) 1984/     F2A :                     ; Input:
(1) 1985/     F2A :                     ; a6 - Object
(1) 1986/     F2A :                     ;
(1) 1987/     F2A :                     ; Uses:
(1) 1988/     F2A :                     ; a5,d4-d7
(1) 1989/     F2A :                     ; --------------------------------------------------------
(1) 1990/     F2A :                     
(1) 1991/     F2A :                     object_Display:
(1) 1992/     F2A : 4BF8 BC24           		lea	(RAM_ObjDispList).w,a5
(1) 1993/     F2E : 3E3C 0017           		move.w	#MAX_MDOBJ-1,d7
(1) 1994/     F32 :                     .srch:
(1) 1995/     F32 : 4A55                		tst.w	(a5)
(1) 1996/     F34 : 6708                		beq.s	.this_one
(1) 1997/     F36 : DAFC 0002           		adda	#2,a5
(1) 1998/     F3A : 51CF FFF6           		dbf	d7,.srch
(1) 1999/     F3E :                     .this_one:
(1) 2000/     F3E : 3A8E                		move.w	a6,(a5)
(1) 2001/     F40 : 4AAE 0010           		tst.l	obj_dma(a6)
(1) 2002/     F44 : 6750                		beq.s	.no_dma
(1) 2003/     F46 : 206E 0010           		move.l	obj_dma(a6),a0
(1) 2004/     F4A : 2618                		move.l	(a0)+,d3		; d3 - Art data
(1) 2005/     F4C : 382E 001E           		move.w	obj_frame(a6),d4
(1) 2006/     F50 : D844                 		add.w	d4,d4
(1) 2007/     F52 : 3830 4000           		move.w	(a0,d4.w),d4
(1) 2008/     F56 : D0C4                 		adda	d4,a0
(1) 2009/     F58 : 7800                 		moveq	#0,d4
(1) 2010/     F5A : 3818                 		move.w	(a0)+,d4
(1) 2011/     F5C : 6738                 		beq.s	.no_dma
(1) 2012/     F5E : 5344                 		subq.w	#1,d4
(1) 2013/     F60 : 322E 0014           		move.w	obj_vram(a6),d1
(1) 2014/     F64 : 0241 07FF           		andi.w	#$7FF,d1
(1) 2015/     F68 : EB49                		lsl.w	#5,d1
(1) 2016/     F6A : 2F0E                		move.l	a6,-(sp)		; SAVE a6
(1) 2017/     F6C :                     .next_pz:
(1) 2018/     F6C : 4844                		swap	d4
(1) 2019/     F6E : 3818                		move.w	(a0)+,d4
(1) 2020/     F70 : 3404                		move.w	d4,d2
(1) 2021/     F72 : EE4A                		lsr.w	#7,d2
(1) 2022/     F74 : 0242 01E0           		andi.w	#$1E0,d2
(1) 2023/     F78 : D47C 0020           		add.w	#$20,d2
(1) 2024/     F7C : 7000                		moveq	#0,d0
(1) 2025/     F7E : 3004                		move.w	d4,d0
(1) 2026/     F80 : 0240 0FFF           		andi.w	#$FFF,d0
(1) 2027/     F84 : EB48                		lsl.w	#5,d0
(1) 2028/     F86 : D083                		add.l	d3,d0
(1) 2029/     F88 : 6100 F836           		bsr	Video_DmaMkEntry	; kills a6
(1) 2030/     F8C : D242                		add.w	d2,d1
(1) 2031/     F8E : 4844                		swap	d4
(1) 2032/     F90 : 51CC FFDA           		dbf	d4,.next_pz
(1) 2033/     F94 : 2C5F                		move.l	(sp)+,a6
(1) 2034/     F96 :                     .no_dma:
(1) 2035/     F96 : 4E75                		rts
(1) 2036/     F98 :                     
(1) 2037/     F98 :                     ; --------------------------------------------------------
(1) 2038/     F98 :                     ; object_MkSprPz
(1) 2039/     F98 :                     ;
(1) 2040/     F98 :                     ; Makes separate sprite pieces using
(1) 2041/     F98 :                     ;
(1) 2042/     F98 :                     ; Input:
(1) 2043/     F98 :                     ; d0 - X pos
(1) 2044/     F98 :                     ; d1 - Y pos
(1) 2045/     F98 :                     ; d2 - VRAM
(1) 2046/     F98 :                     ; d3 - Size
(1) 2047/     F98 :                     :
(1) 2048/     F98 :                     ; Uses:
(1) 2049/     F98 :                     ; a5,d7
(1) 2050/     F98 :                     ; --------------------------------------------------------
(1) 2051/     F98 :                     
(1) 2052/     F98 :                     object_MkSprPz:
(1) 2053/     F98 : 3E38 BDD8           		move.w	(RAM_SprDrwCntr).w,d7
(1) 2054/     F9C : BE7C 0050           		cmp.w	#80,d7
(1) 2055/     FA0 : 6C22                		bge.s	.nope
(1) 2056/     FA2 : E74F                		lsl.w	#3,d7
(1) 2057/     FA4 : 4BF8 A914           		lea	(RAM_SprDrwPz).w,a5
(1) 2058/     FA8 : DAC7                		adda	d7,a5
(1) 2059/     FAA : D07C 0080           		add.w	#$80,d0
(1) 2060/     FAE : D27C 0080           		add.w	#$80,d1
(1) 2061/     FB2 : C67C 00FF           		and.w	#$FF,d3
(1) 2062/     FB6 :                     ; 		lsl.w	#8,d3
(1) 2063/     FB6 : 3AC1                		move.w	d1,(a5)+
(1) 2064/     FB8 : 3AC3                		move.w	d3,(a5)+
(1) 2065/     FBA : 3AC2                		move.w	d2,(a5)+
(1) 2066/     FBC : 3AC0                		move.w	d0,(a5)+
(1) 2067/     FBE : 0678 0001 BDD8      		add.w	#1,(RAM_SprDrwCntr).w
(1) 2068/     FC4 :                     .nope:
(1) 2069/     FC4 : 4E75                		rts
(1) 2070/     FC6 :                     
(1) 2071/     FC6 :                     ; --------------------------------------------------------
(1) 2072/     FC6 :                     ; object_Animate
(1) 2073/     FC6 :                     ;
(1) 2074/     FC6 :                     ; Animates the sprite
(1) 2075/     FC6 :                     ;
(1) 2076/     FC6 :                     ; Input
(1) 2077/     FC6 :                     ; a0.l - Animation data
(1) 2078/     FC6 :                     ;
(1) 2079/     FC6 :                     ; Uses:
(1) 2080/     FC6 :                     ; d2
(1) 2081/     FC6 :                     ; --------------------------------------------------------
(1) 2082/     FC6 :                     
(1) 2083/     FC6 :                     object_Animate:
(1) 2084/     FC6 : 7E00                		moveq	#0,d7
(1) 2085/     FC8 : 1E2E 001D            		move.b	obj_anim_id+1(a6),d7
(1) 2086/     FCC : BE2E 001C            		cmp.b	obj_anim_id(a6),d7
(1) 2087/     FD0 : 670E                 		beq.s	.sameThing
(1) 2088/     FD2 : 1D6E 001C 001D       		move.b	obj_anim_id(a6),obj_anim_id+1(a6)
(1) 2089/     FD8 : 426E 001A            		clr.w	obj_anim_indx(a6)
(1) 2090/     FDC : 422E 0020            		clr.b	obj_anim_spd(a6)
(1) 2091/     FE0 :                     .sameThing:
(1) 2092/     FE0 : 1E2E 001C            		move.b	obj_anim_id(a6),d7
(1) 2093/     FE4 : 0C07 00FF            		cmpi.b	#-1,d7
(1) 2094/     FE8 : 6748                 		beq.s	.return
(1) 2095/     FEA : DE47                 		add.w	d7,d7
(1) 2096/     FEC : 3E30 7000            		move.w	(a0,d7.w),d7
(1) 2097/     FF0 : 41F0 7000            		lea	(a0,d7.w),a0
(1) 2098/     FF4 : 3E18                 		move.w	(a0)+,d7
(1) 2099/     FF6 : 0C47 FFFF            		cmpi.w	#-1,d7
(1) 2100/     FFA : 670C                 		beq.s	.keepspd
(1) 2101/     FFC : 042E 0001 0020       		subi.b	#1,obj_anim_spd(a6)
(1) 2102/    1002 : 6A2E                 		bpl.s	.return
(1) 2103/    1004 : 1D47 0020           		move.b	d7,obj_anim_spd(a6)
(1) 2104/    1008 :                     .keepspd:
(1) 2105/    1008 : 7C00                 		moveq	#0,d6
(1) 2106/    100A : 3E2E 001A            		move.w	obj_anim_indx(a6),d7
(1) 2107/    100E : DE47                 		add.w	d7,d7
(1) 2108/    1010 : 3C10                 		move.w	(a0),d6
(1) 2109/    1012 : D0C7                 		adda	d7,a0
(1) 2110/    1014 : 3A10                 		move.w	(a0),d5
(1) 2111/    1016 : 0C45 FFFF            		cmpi.w	#-1,d5
(1) 2112/    101A : 6718                 		beq.s	.noAnim		; loop
(1) 2113/    101C : 0C45 FFFE            		cmpi.w	#-2,d5
(1) 2114/    1020 : 672A                 		beq.s	.lastFrame	; finish
(1) 2115/    1022 : 0C45 FFFD            		cmpi.w	#-3,d5
(1) 2116/    1026 : 671A                 		beq.s	.goToFrame
(1) 2117/    1028 : 3D45 001E            		move.w	d5,obj_frame(a6)
(1) 2118/    102C : 066E 0001 001A       		add.w	#1,obj_anim_indx(a6)
(1) 2119/    1032 :                     .return:
(1) 2120/    1032 : 4E75                 		rts
(1) 2121/    1034 :                     .noAnim:
(1) 2122/    1034 : 3D7C 0001 001A       		move.w	#1,obj_anim_indx(a6)
(1) 2123/    103A : 3A06                 		move.w	d6,d5
(1) 2124/    103C : 3D45 001E            		move.w	d5,obj_frame(a6)
(1) 2125/    1040 : 4E75                		rts
(1) 2126/    1042 :                     .goToFrame:
(1) 2127/    1042 : 426E 001A           		clr.w	obj_anim_indx(a6)
(1) 2128/    1046 : 3D68 0002 001A      		move.w	2(a0),obj_anim_indx(a6)
(1) 2129/    104C :                     .lastFrame:
(1) 2130/    104C : 422E 0020            		clr.b	obj_anim_spd(a6)
(1) 2131/    1050 : 4E75                		rts
(1) 2132/    1052 :                     
(1) 2133/    1052 :                     ; --------------------------------------------------------
(1) 2134/    1052 :                     ; object_AnimReset
(1) 2135/    1052 :                     ;
(1) 2136/    1052 :                     ; Call this BEFORE using animation
(1) 2137/    1052 :                     ;
(1) 2138/    1052 :                     ; Input:
(1) 2139/    1052 :                     ; a6 - Object
(1) 2140/    1052 :                     ;
(1) 2141/    1052 :                     ; Uses:
(1) 2142/    1052 :                     ; d7
(1) 2143/    1052 :                     ; --------------------------------------------------------
(1) 2144/    1052 :                     
(1) 2145/    1052 :                     object_AnimReset:
(1) 2146/    1052 : 426E 001A            		clr.w	obj_anim_indx(a6)
(1) 2147/    1056 : 422E 0020            		clr.b	obj_anim_spd(a6)
(1) 2148/    105A : 1D7C 0000 001D      		move.b	#0,obj_anim_id+1(a6)
(1) 2149/    1060 : 4E75                		rts
(1) 2150/    1062 :                     
(1) 2151/    1062 :                     ; --------------------------------------------------------
(1) 2152/    1062 :                     ; object_Speed
(1) 2153/    1062 :                     ;
(1) 2154/    1062 :                     ; Moves the object using speed variables
(1) 2155/    1062 :                     ;
(1) 2156/    1062 :                     ; Input:
(1) 2157/    1062 :                     ; a6 - Object
(1) 2158/    1062 :                     ;
(1) 2159/    1062 :                     ; Uses:
(1) 2160/    1062 :                     ; d7
(1) 2161/    1062 :                     ; --------------------------------------------------------
(1) 2162/    1062 :                     
(1) 2163/    1062 :                     object_Speed:
(1) 2164/    1062 : 7E00                		moveq	#0,d7
(1) 2165/    1064 : 3E2E 0016           		move.w	obj_x_spd(a6),d7
(1) 2166/    1068 : 48C7                		ext.l	d7
(1) 2167/    106A : E187                		asl.l	#8,d7
(1) 2168/    106C : DFAE 0004           		add.l	d7,obj_x(a6)
(1) 2169/    1070 : 7E00                		moveq	#0,d7
(1) 2170/    1072 : 3E2E 0018           		move.w	obj_y_spd(a6),d7
(1) 2171/    1076 : 48C7                		ext.l	d7
(1) 2172/    1078 : E187                		asl.l	#8,d7
(1) 2173/    107A : DFAE 0008           		add.l	d7,obj_y(a6)
(1) 2174/    107E : 4E75                		rts
(1) 2175/    1080 :                     
(1) 2176/    1080 :                     ; ====================================================================
(1) 2177/    1080 :                     ; ----------------------------------------------------------------
(1) 2178/    1080 :                     ; 32X ONLY
(1) 2179/    1080 :                     ; ----------------------------------------------------------------
(1) 2180/    1080 :                     
(1) 2285/    1080 :                     
     207/    1080 :                     		include	"system/md/system.asm"
(1)    1/    1080 :                     ; ===========================================================================
(1)    2/    1080 :                     ; ----------------------------------------------------------------
(1)    3/    1080 :                     ; Genesis system routines, and some SegaCD and 32X routines.
(1)    4/    1080 :                     ;
(1)    5/    1080 :                     ; * CAN BE RECYCLED FOR SEGA PICO, ONLY IGNORE Z80 ACCESS OR
(1)    6/    1080 :                     ; THE CONTROL ROUTINE **
(1)    7/    1080 :                     ; ----------------------------------------------------------------
(1)    8/    1080 :                     
(1)    9/    1080 :                     ; ====================================================================
(1)   10/    1080 :                     ; ----------------------------------------------------------------
(1)   11/    1080 :                     ; Settings
(1)   12/    1080 :                     ; ----------------------------------------------------------------
(1)   13/    1080 :                     
(1)   14/    1080 : =$400                MAX_SRAMSIZE	equ $400
(1)   15/    1080 : ="SAVE"              TAG_SRAMDATA	equ "SAVE"	; 4-letter save file signature
(1)   16/    1080 :                     
(1)   17/    1080 :                     ; ====================================================================
(1)   18/    1080 :                     ; ----------------------------------------------------------------
(1)   19/    1080 :                     ; Variables
(1)   20/    1080 :                     ; ----------------------------------------------------------------
(1)   21/    1080 :                     
(1)   22/    1080 :                     ; Controller buffer data, MUST call System_Input on VBlank.
(1)   23/    1080 :                     ;
(1)   24/    1080 :                     ; Type/Revision byte:
(1)   25/    1080 :                     ;
(1)   26/    1080 :                     ; ID    |
(1)   27/    1080 :                     ; $0D   | $00 - Original 3 button
(1)   28/    1080 :                     ;       | $01 - 6 button version: XYZM
(1)   29/    1080 :                     
(1)   30/    1080 :                     ; Read WORD in +on_hold or +on_press
(1)   31/    1080 : =$1                  JoyUp		equ $0001
(1)   32/    1080 : =$2                  JoyDown		equ $0002
(1)   33/    1080 : =$4                  JoyLeft		equ $0004
(1)   34/    1080 : =$8                  JoyRight	equ $0008
(1)   35/    1080 : =$10                 JoyB		equ $0010
(1)   36/    1080 : =$20                 JoyC		equ $0020
(1)   37/    1080 : =$40                 JoyA		equ $0040
(1)   38/    1080 : =$80                 JoyStart	equ $0080
(1)   39/    1080 : =$100                JoyZ		equ $0100
(1)   40/    1080 : =$200                JoyY		equ $0200
(1)   41/    1080 : =$400                JoyX		equ $0400
(1)   42/    1080 : =$800                JoyMode		equ $0800
(1)   43/    1080 : =$0                  bitJoyUp	equ 0		; READ THESE AS A WORD
(1)   44/    1080 : =$1                  bitJoyDown	equ 1
(1)   45/    1080 : =$2                  bitJoyLeft	equ 2
(1)   46/    1080 : =$3                  bitJoyRight	equ 3
(1)   47/    1080 : =$4                  bitJoyB		equ 4
(1)   48/    1080 : =$5                  bitJoyC		equ 5
(1)   49/    1080 : =$6                  bitJoyA		equ 6
(1)   50/    1080 : =$7                  bitJoyStart	equ 7
(1)   51/    1080 : =$8                  bitJoyZ		equ 8
(1)   52/    1080 : =$9                  bitJoyY		equ 9
(1)   53/    1080 : =$A                  bitJoyX		equ 10
(1)   54/    1080 : =$B                  bitJoyMode	equ 11
(1)   55/    1080 :                     
(1)   56/    1080 :                     ; Mega Mouse
(1)   57/    1080 :                     ; Read WORD as +on_hold or +on_press
(1)   58/    1080 : =$1                  ClickR		equ $0001
(1)   59/    1080 : =$2                  ClickL		equ $0002
(1)   60/    1080 : =$4                  ClickM		equ $0004	; US MOUSE ONLY
(1)   61/    1080 : =$8                  ClickS		equ $0008	; (Untested)
(1)   62/    1080 : =$0                  bitClickL	equ 0
(1)   63/    1080 : =$1                  bitClickR	equ 1
(1)   64/    1080 : =$2                  bitClickM	equ 2
(1)   65/    1080 : =$3                  bitClickS	equ 3
(1)   66/    1080 :                     
(1)   67/    1080 :                     ; Controller_1 / Controller_2
(1)   68/    1080 : (MACRO)              		strct 0
(1)   68/    1080 : =$1080               GLBL_LASTPC     set *
(1)   68/FFFFFFFFFFFFAB96 :                                     dephase
(1)   68/       0 :                                     phase 0
(1)   68/       0 : =$0                  GLBL_LASTORG    set *
(1)   69/       0 :                     pad_id		ds.b 1			; Controller ID
(1)   70/       1 :                     pad_ver		ds.b 1			; Controller type/revision
(1)   71/       2 :                     on_hold		ds.w 1			; User HOLD bits
(1)   72/       4 :                     on_press	ds.w 1			; User PRESSED bits
(1)   73/       6 :                     on_release	ds.w 1			; (RESERVED)
(1)   74/       8 :                     mouse_x		ds.w 1			; Mouse/Pen X position or speed
(1)   75/       A :                     mouse_y		ds.w 1			; Mouse/pen Y position or speed
(1)   76/       C :                     ext_3		ds.w 1
(1)   77/       E :                     ext_4		ds.w 1
(1)   78/      10 :                     sizeof_input	ds.l 0
(1)   79/      10 : (MACRO)              		endstrct
(1)   79/       0 :                                     org GLBL_LASTORG
(1)   79/    1080 :                                     phase GLBL_LASTPC
(1)   80/    1080 :                     
(1)   81/    1080 :                     ; ====================================================================
(1)   82/    1080 :                     ; ----------------------------------------------------------------
(1)   83/    1080 :                     ; RAM section
(1)   84/    1080 :                     ; ----------------------------------------------------------------
(1)   85/    1080 :                     
(1)   86/    1080 : (MACRO)              		strct RAM_MdSystem
(1)   86/    1080 : =$1080               GLBL_LASTPC     set *
(1)   86/       0 :                                     dephase
(1)   86/FFFFFFFFFFFFC004 :                                     phase RAM_MDSYSTEM
(1)   86/FFFFFFFFFFFFC004 : =$FFFFFFFFFFFFC004   GLBL_LASTORG    set *
(1)   87/FFFFFFFFFFFFC004 :                     RAM_InputData	ds.b sizeof_input*4		; Input data section
(1)   88/FFFFFFFFFFFFC044 :                     RAM_SaveData	ds.b MAX_SRAMSIZE		; Read/Write of the SAVE data
(1)   89/FFFFFFFFFFFFC444 :                     RAM_SysRandVal	ds.l 1				; Random value
(1)   90/FFFFFFFFFFFFC448 :                     RAM_SysRandSeed	ds.l 1				; Randomness seed
(1)   91/FFFFFFFFFFFFC44C :                     RAM_MdMarsVInt	ds.w 3				; VBlank jump (JMP xxxx xxxx)
(1)   92/FFFFFFFFFFFFC452 :                     RAM_MdMarsHint	ds.w 3				; HBlank jump (JMP xxxx xxxx)
(1)   93/FFFFFFFFFFFFC458 :                     RAM_ScreenMode	ds.w 1
(1)   94/FFFFFFFFFFFFC45A :                     sizeof_mdsys	ds.l 0
(1)   95/FFFFFFFFFFFFC460 : (MACRO)              		endstrct
(1)   95/FFFFFFFFFFFFC004 :                                     org GLBL_LASTORG
(1)   95/    1080 :                                     phase GLBL_LASTPC
(1)   96/    1080 : (MACRO)              		erreport "MD SYSTEM RAM",sizeof_mdsys-RAM_MdSystem,MAX_MdSystem
(1)   97/    1080 :                     
(1)   98/    1080 :                     ; ====================================================================
(1)   99/    1080 :                     ; ----------------------------------------------------------------
(1)  100/    1080 :                     ; Alias tags
(1)  101/    1080 :                     ; ----------------------------------------------------------------
(1)  102/    1080 :                     
(1)  103/    1080 : =$FFFFFFFFFFFFC004   Controller_1	equ RAM_InputData
(1)  104/    1080 : =$FFFFFFFFFFFFC014   Controller_2	equ RAM_InputData+sizeof_input
(1)  105/    1080 :                     
(1)  106/    1080 :                     ; ====================================================================
(1)  107/    1080 :                     ; --------------------------------------------------------
(1)  108/    1080 :                     ; Init System
(1)  109/    1080 :                     ; 
(1)  110/    1080 :                     ; Uses:
(1)  111/    1080 :                     ; a0-a2,d0-d1
(1)  112/    1080 :                     ; --------------------------------------------------------
(1)  113/    1080 :                     
(1)  114/    1080 :                     System_Init:
(1)  115/    1080 : 007C 0700           		or.w	#$0700,sr
(1)  117/    1084 : 33FC 0100 00A1      		move.w	#$0100,(z80_bus).l	; Stop Z80
             108A : 1100             
(1)  118/    108C :                     .wait:
(1)  119/    108C : 0839 0000 00A1      		btst	#0,(z80_bus).l		; Wait for it
             1092 : 1100             
(1)  120/    1094 : 66F6                		bne.s	.wait
(1)  121/    1096 : 7040                		moveq	#%01000000,d0		; Init ports, TH=1
(1)  122/    1098 : 13C0 00A1 0009      		move.b	d0,(sys_ctrl_1).l	; Controller 1
(1)  123/    109E : 13C0 00A1 000B      		move.b	d0,(sys_ctrl_2).l	; Controller 2
(1)  124/    10A4 : 13C0 00A1 000D      		move.b	d0,(sys_ctrl_3).l	; Modem
(1)  125/    10AA : 33FC 0000 00A1      		move.w	#0,(z80_bus).l		; Enable Z80
             10B0 : 1100             
(1)  127/    10B2 : 303C 4EF9           		move.w	#$4EF9,d0		; Set JMP opcode for the Hblank/VBlank jumps
(1)  128/    10B6 : 31C0 C44C            		move.w	d0,(RAM_MdMarsVInt).w
(1)  129/    10BA : 31C0 C452           		move.w	d0,(RAM_MdMarsHInt).w
(1)  130/    10BE : 203C 0000 15AC      		move.l	#VInt_Default,d0	; Set default ints
(1)  131/    10C4 : 223C 0000 15C2      		move.l	#Hint_Default,d1
(1)  132/    10CA : 6100 039C           		bsr	System_SetInts
(1)  133/    10CE : 41F8 C004           		lea	(RAM_InputData),a0	; Clear input data buffer
(1)  134/    10D2 : 323C 0007           		move.w	#(sizeof_input/2)-1,d1
(1)  135/    10D6 : 7000                		moveq	#0,d0
(1)  136/    10D8 :                     .clrinput:
(1)  137/    10D8 : 30C0                		move.w	d0,(a0)+
(1)  138/    10DA : 51C9 FFFC           		dbf	d1,.clrinput
(1)  139/    10DE : 203C 5625 5769      		move.l	#$56255769,d0		; Set these random values
(1)  140/    10E4 : 223C 9511 6102      		move.l	#$95116102,d1
(1)  141/    10EA : 23C0 FFFF C444      		move.l	d0,(RAM_SysRandVal).l
(1)  142/    10F0 : 23C1 FFFF C448      		move.l	d1,(RAM_SysRandSeed).l
(1)  146/    10F6 : 027C F8FF           		andi.w	#$F8FF,sr
(1)  147/    10FA : 6000 037E           		bra	System_SramInit
(1)  148/    10FE :                     
(1)  149/    10FE :                     ; --------------------------------------------------------
(1)  150/    10FE :                     ; System_Render
(1)  151/    10FE :                     ;
(1)  152/    10FE :                     ; Call this on the loop your current screen.
(1)  153/    10FE :                     ; ** VDP DISPLAY MUST BE ON TO USE THIS **
(1)  154/    10FE :                     ;
(1)  155/    10FE :                     ; This will:
(1)  156/    10FE :                     ; - Update the sound driver for any changes that
(1)  157/    10FE :                     ;   need communication with 68K
(1)  158/    10FE :                     ; - Build the object sprites
(1)  159/    10FE :                     ; - 32X/CD32X:
(1)  160/    10FE :                     ;   Update the DREQ data
(1)  161/    10FE :                     ;
(1)  162/    10FE :                     ; On VBLANK:
(1)  163/    10FE :                     ; - Update the input data
(1)  164/    10FE :                     ; - Transfer the Genesis palette, sprites and scroll
(1)  165/    10FE :                     ;   data from from RAM to VDP
(1)  166/    10FE :                     ;   (32X: RV bit is not required.)
(1)  167/    10FE :                     ; - Process the DMA BLAST list (32X: Uses RV bit)
(1)  168/    10FE :                     ; --------------------------------------------------------
(1)  169/    10FE :                     
(1)  170/    10FE :                     System_Render:
(1)  171/    10FE : 1E38 BDF7           		move.b	(RAM_VdpRegs+1).w,d7	; ** If the user forgets to enable
(1)  172/    1102 : 0807 0006           		btst	#bitDispEnbl,d7		; ** DISPLAY skip all this
(1)  173/    1106 : 673A                		beq.s	.forgot_disp		; **
(1)  174/    1108 :                     .wait_lag:
(1)  175/    1108 : 6100 F1E2           		bsr	Sound_Update		; Syncronize/Update sound on lag
(1)  176/    110C : 3E39 00C0 0004      		move.w	(vdp_ctrl).l,d7		; Got here during VBlank?
(1)  177/    1112 : 0807 0003           		btst	#bitVBlk,d7		; If yes, drop frame and wait
(1)  178/    1116 : 66F0                		bne.s	.wait_lag
(1)  179/    1118 : 6100 F1D2           		bsr	Sound_Update		; Update sound
(1)  180/    111C : 6100 FCE8           		bsr	Objects_Show		; Build sprite data from Objects
(1)  181/    1120 :                     .wait_in:
(1)  182/    1120 : 6100 F1CA           		bsr	Sound_Update		; Syncronize/Update sound during Display
(1)  183/    1124 : 3E39 00C0 0004      		move.w	(vdp_ctrl).l,d7
(1)  184/    112A : 0807 0003           		btst	#bitVBlk,d7		; VBlank started?
(1)  185/    112E : 67F0                		beq.s	.wait_in
(1)  186/    1130 : 6122                		bsr	System_Input		; Read input data FIRST
(1)  187/    1132 : 6100 F8E8           		bsr	Video_Render		; Render visuals
(1)  188/    1136 : 6100 F1B4           		bsr	Sound_Update		; Update sound
(1)  189/    113A : 52B8 BDD4           		addq.l	#1,(RAM_Framecount).w	; Count the frame.
(1)  193/    113E : 6100 F1AC           		bsr	Sound_Update		; Update sound again
(1)  194/    1142 :                     .forgot_disp:
(1)  195/    1142 : 4E75                		rts
(1)  196/    1144 :                     
(1)  197/    1144 :                     ; ====================================================================
(1)  198/    1144 :                     ; --------------------------------------------------------
(1)  199/    1144 :                     ; System_DmaEnter_(from) and System_DmaEnter_(from)
(1)  200/    1144 :                     ; from: ROM or RAM
(1)  201/    1144 :                     ;
(1)  202/    1144 :                     ; Call to these labels BEFORE and AFTER
(1)  203/    1144 :                     ; DMA-to-VDP transers, these calls are NOT
(1)  204/    1144 :                     ; required for FILL or COPY
(1)  205/    1144 :                     ;
(1)  206/    1144 :                     ; This is where you put your Sound driver's Z80 stop
(1)  207/    1144 :                     ; or pause calls here.
(1)  208/    1144 :                     ; --------------------------------------------------------
(1)  209/    1144 :                     
(1)  210/    1144 :                     System_DmaEnter_RAM:
(1)  211/    1144 : 6000 F27E           		bra	gemaDmaPause
(1)  212/    1148 :                     System_DmaExit_RAM:
(1)  213/    1148 : 6000 F29C           		bra	gemaDmaResume
(1)  214/    114C :                     
(1)  215/    114C :                     ; --------------------------------------------------------
(1)  216/    114C :                     
(1)  217/    114C :                     System_DmaEnter_ROM:
(1)  218/    114C : 6000 F2B2           		bra	gemaDmaPauseRom
(1)  219/    1150 :                     System_DmaExit_ROM:
(1)  220/    1150 : 6000 F2D0           		bra	gemaDmaResumeRom
(1)  221/    1154 :                     
(1)  222/    1154 :                     ; ====================================================================
(1)  223/    1154 :                     ; ----------------------------------------------------------------
(1)  224/    1154 :                     ; Subroutines
(1)  225/    1154 :                     ; ----------------------------------------------------------------
(1)  226/    1154 :                     
(1)  227/    1154 :                     ; --------------------------------------------------------
(1)  228/    1154 :                     ; System_Input
(1)  229/    1154 :                     ;
(1)  230/    1154 :                     ; Reads data from the Controller ports
(1)  231/    1154 :                     ; *** CALL THIS ON VBLANK ONLY ***
(1)  232/    1154 :                     ;
(1)  233/    1154 :                     ; Uses:
(1)  234/    1154 :                     ; d5-d7,a5-a6
(1)  235/    1154 :                     ; --------------------------------------------------------
(1)  236/    1154 :                     
(1)  237/    1154 :                     ; ----------------------------------------
(1)  238/    1154 :                     ; PICO input is hard-coded to
(1)  239/    1154 :                     ; Controller_1
(1)  240/    1154 :                     ;
(1)  241/    1154 :                     ; on_hold/on_press:
(1)  242/    1154 :                     ; %P00BRLDU
(1)  243/    1154 :                     ; UDLR - Arrows
(1)  244/    1154 :                     ;    B - BIG button red
(1)  245/    1154 :                     ;    P - Pen press/click
(1)  246/    1154 :                     ;
(1)  247/    1154 :                     ; mouse_x/mouse_y:
(1)  248/    1154 :                     ; Pen X/Y position
(1)  249/    1154 :                     ; depen
(1)  250/    1154 :                     ; ----------------------------------------
(1)  251/    1154 :                     
(1)  252/    1154 :                     System_Input:
(1)  253/    1154 :                     
(1)  300/    1154 :                     	; ----------------------------------------
(1)  301/    1154 :                     	; Normal Genesis controls
(1)  302/    1154 :                     
(1)  303/    1154 : 4DF8 C004           		lea	(RAM_InputData).w,a6	; a6 - Output
(1)  304/    1158 : 4BF9 00A1 0003      		lea	(sys_data_1),a5		; a5 - BASE Genesis Input regs area
(1)  305/    115E : 6108                		bsr.s	.this_one
(1)  306/    1160 : DAFC 0002           		adda	#2,a5
(1)  307/    1164 : DCFC 0010           		adda	#sizeof_input,a6
(1)  308/    1168 :                     
(1)  309/    1168 :                     ; ----------------------------------------
(1)  310/    1168 :                     ; Read port
(1)  311/    1168 :                     ;
(1)  312/    1168 :                     ; a5 - Current port
(1)  313/    1168 :                     ; a6 - Output data
(1)  314/    1168 :                     ; ----------------------------------------
(1)  315/    1168 :                     
(1)  316/    1168 :                     .this_one:
(1)  317/    1168 : 6100 0166           		bsr	.pick_id
(1)  318/    116C : 1C87                		move.b	d7,pad_id(a6)
(1)  319/    116E : 0C47 000F           		cmpi.w	#$0F,d7
(1)  320/    1172 : 670E                		beq.s	.exit
(1)  321/    1174 : 0247 000F           		andi.w	#$0F,d7
(1)  322/    1178 : DE47                		add.w	d7,d7
(1)  323/    117A : 3C3B 700C           		move.w	.list(pc,d7.w),d6
(1)  324/    117E : 4EFB 6008           		jmp	.list(pc,d6.w)
(1)  325/    1182 :                     .exit:
(1)  326/    1182 : 422E 0001           		clr.b	pad_ver(a6)
(1)  327/    1186 : 4E75                		rts
(1)  328/    1188 :                     
(1)  329/    1188 :                     ; ----------------------------------------
(1)  330/    1188 :                     ; Grab ID
(1)  331/    1188 :                     ; ----------------------------------------
(1)  332/    1188 :                     
(1)  333/    1188 :                     .list:
(1)  334/    1188 : FFFA                		dc.w .exit-.list	; $00
(1)  335/    118A : FFFA                		dc.w .exit-.list
(1)  336/    118C : FFFA                		dc.w .exit-.list
(1)  337/    118E : 0020                		dc.w .id_03-.list	; $03 - Mega mouse
(1)  338/    1190 : FFFA                		dc.w .exit-.list	; $04
(1)  339/    1192 : FFFA                		dc.w .exit-.list
(1)  340/    1194 : FFFA                		dc.w .exit-.list
(1)  341/    1196 : FFFA                		dc.w .exit-.list
(1)  342/    1198 : FFFA                		dc.w .exit-.list	; $08
(1)  343/    119A : FFFA                		dc.w .exit-.list
(1)  344/    119C : FFFA                		dc.w .exit-.list
(1)  345/    119E : FFFA                		dc.w .exit-.list
(1)  346/    11A0 : FFFA                		dc.w .exit-.list	; $0C
(1)  347/    11A2 : 00CA                		dc.w .id_0D-.list	; $0D - Genesis controller (3 or 6 button)
(1)  348/    11A4 : FFFA                		dc.w .exit-.list
(1)  349/    11A6 : FFFA                		dc.w .exit-.list	; $0F - No controller OR Master System controller (2 Buttons: 1(B),2(C))
(1)  350/    11A8 :                     
(1)  351/    11A8 :                     ; ----------------------------------------
(1)  352/    11A8 :                     ; ID $03
(1)  353/    11A8 :                     ;
(1)  354/    11A8 :                     ; Mega Mouse
(1)  355/    11A8 :                     ; ----------------------------------------
(1)  356/    11A8 :                     
(1)  357/    11A8 :                     ; *** NOT TESTED ON HARDWARE ***
(1)  358/    11A8 :                     .id_03:
(1)  359/    11A8 : 1ABC 0020           		move.b	#$20,(a5)
(1)  360/    11AC : 1B7C 0060 0006      		move.b	#$60,6(a5)
(1)  361/    11B2 : 0815 0004           		btst	#4,(a5)
(1)  362/    11B6 : 6700 0094           		beq.w	.invalid
(1)  363/    11BA : 1ABC 0000           		move.b	#$00,(a5)	; $0F
(1)  364/    11BE : 4E71                		nop
(1)  365/    11C0 : 4E71                		nop
(1)  366/    11C2 : 1ABC 0020           		move.b	#$20,(a5)	; $0F
(1)  367/    11C6 : 4E71                		nop
(1)  368/    11C8 : 4E71                		nop
(1)  369/    11CA : 1ABC 0000           		move.b	#$00,(a5)	; Yo | Xo | Ys | Xs
(1)  370/    11CE : 4E71                		nop
(1)  371/    11D0 : 4E71                		nop
(1)  372/    11D2 : 1A15                		move.b	(a5),d5		; d5 - X/Y direction bits (Ys Xs)
(1)  373/    11D4 : 1ABC 0020           		move.b	#$20,(a5)	; C | M | R | L
(1)  374/    11D8 : 4E71                		nop
(1)  375/    11DA : 4E71                		nop
(1)  376/    11DC : 1E15                		move.b	(a5),d7
(1)  377/    11DE : 0247 000F            		andi.w	#%1111,d7
(1)  378/    11E2 : 3C2E 0002           		move.w	on_hold(a6),d6
(1)  379/    11E6 : BF46                		eor.w	d7,d6
(1)  380/    11E8 : 3D47 0002           		move.w	d7,on_hold(a6)
(1)  381/    11EC : CC47                		and.w	d7,d6
(1)  382/    11EE : 3D46 0004           		move.w	d6,on_press(a6)
(1)  383/    11F2 : 1ABC 0000           		move.b	#$00,(a5)	; X7 | X6 | X5 | X4
(1)  384/    11F6 : 4E71                		nop
(1)  385/    11F8 : 4E71                		nop
(1)  386/    11FA : 1E15                		move.b	(a5),d7
(1)  387/    11FC : 1ABC 0020           		move.b	#$20,(a5)	; X3 | X2 | X1 | X0
(1)  388/    1200 : 0247 000F           		andi.w	#%1111,d7
(1)  389/    1204 : E94F                		lsl.w	#4,d7
(1)  390/    1206 : 4E71                		nop
(1)  391/    1208 : 1C15                		move.b	(a5),d6
(1)  392/    120A : 0246 000F           		andi.w	#%1111,d6
(1)  393/    120E : 8E46                		or.w	d6,d7
(1)  394/    1210 : 0805 0000           		btst    #0,d5
(1)  395/    1214 : 6704                		beq.s	.x_neg
(1)  396/    1216 : 4407                		neg.b	d7
(1)  397/    1218 : 4447                		neg.w	d7
(1)  398/    121A :                     .x_neg:
(1)  399/    121A : 3D47 0008           		move.w	d7,mouse_x(a6)
(1)  400/    121E : 1ABC 0000           		move.b	#$00,(a5)	; Y7 | Y6 | Y5 | Y4
(1)  401/    1222 : 4E71                		nop
(1)  402/    1224 : 4E71                		nop
(1)  403/    1226 : 1E15                		move.b	(a5),d7
(1)  404/    1228 : 1ABC 0020           		move.b	#$20,(a5)	; Y3 | Y2 | Y1 | Y0
(1)  405/    122C : 0247 000F           		andi.w	#%1111,d7
(1)  406/    1230 : E94F                		lsl.w	#4,d7
(1)  407/    1232 : 4E71                		nop
(1)  408/    1234 : 1C15                		move.b	(a5),d6
(1)  409/    1236 : 0246 000F           		andi.w	#%1111,d6
(1)  410/    123A : 8E46                		or.w	d6,d7
(1)  411/    123C : 0805 0001           		btst    #1,d5
(1)  412/    1240 : 6704                		beq.s	.y_neg
(1)  413/    1242 : 4407                		neg.b	d7
(1)  414/    1244 : 4447                		neg.w	d7
(1)  415/    1246 :                     .y_neg:
(1)  416/    1246 : 4447                		neg.w	d7		; Reverse Y
(1)  417/    1248 : 3D47 000A           		move.w	d7,mouse_y(a6)
(1)  418/    124C :                     
(1)  419/    124C :                     .invalid:
(1)  420/    124C : 1ABC 0060           		move.b	#$60,(a5)
(1)  421/    1250 : 4E75                		rts
(1)  422/    1252 :                     
(1)  423/    1252 :                     ; ----------------------------------------
(1)  424/    1252 :                     ; ID $0D
(1)  425/    1252 :                     ;
(1)  426/    1252 :                     ; Normal controller: 3 button or 6 button.
(1)  427/    1252 :                     ; ----------------------------------------
(1)  428/    1252 :                     
(1)  429/    1252 :                     .id_0D:
(1)  430/    1252 : 1ABC 0040           		move.b	#$40,(a5)	; Show CB|RLDU
(1)  431/    1256 : 4E71                		nop
(1)  432/    1258 : 4E71                		nop
(1)  433/    125A : 1A15                		move.b	(a5),d5
(1)  434/    125C : 0245 003F           		andi.w	#%00111111,d5
(1)  435/    1260 : 1ABC 0000           		move.b	#$00,(a5)	; Show SA|RLDU
(1)  436/    1264 : 4E71                		nop
(1)  437/    1266 : 4E71                		nop
(1)  438/    1268 : 1E15                		move.b	(a5),d7		; The following flips are for
(1)  439/    126A : E54F                		lsl.w	#2,d7		; the 6pad's internal counter:
(1)  440/    126C : 0247 00C0           		andi.w	#%11000000,d7
(1)  441/    1270 : 8E45                		or.w	d5,d7
(1)  442/    1272 : 1ABC 0040           		move.b	#$40,(a5)	; Show CB|RLDU (2)
(1)  443/    1276 : 4647                		not.w	d7
(1)  444/    1278 : 1A2E 0003           		move.b	on_hold+1(a6),d5
(1)  445/    127C : BF05                		eor.b	d7,d5
(1)  446/    127E : 1ABC 0000           		move.b	#$00,(a5)	; Show SA|RLDU (3)
(1)  447/    1282 : 1D47 0003           		move.b	d7,on_hold+1(a6)
(1)  448/    1286 : CA07                		and.b	d7,d5
(1)  449/    1288 : 1D45 0005           		move.b	d5,on_press+1(a6)
(1)  450/    128C : 1ABC 0040           		move.b	#$40,(a5)	; 6 button responds (4)
(1)  451/    1290 : 4E71                		nop
(1)  452/    1292 : 4E71                		nop
(1)  453/    1294 : 1E15                		move.b	(a5),d7		; Grab ??|MXYZ
(1)  454/    1296 : 1ABC 0000            		move.b	#$00,(a5)	; (5)
(1)  455/    129A : 4E71                  		nop
(1)  456/    129C : 4E71                  		nop
(1)  457/    129E : 1C15                 		move.b	(a5),d6		; Type: $03 old, $0F new
(1)  458/    12A0 : 1ABC 0040            		move.b	#$40,(a5)	; (6)
(1)  459/    12A4 : 4E71                 		nop
(1)  460/    12A6 : 4E71                 		nop
(1)  461/    12A8 : 0246 000F           		andi.w	#$F,d6
(1)  462/    12AC : E44E                		lsr.w	#2,d6
(1)  463/    12AE : 0246 0001           		andi.w	#1,d6
(1)  464/    12B2 : 6716                		beq.s	.oldpad
(1)  465/    12B4 : 4607                		not.b	d7
(1)  466/    12B6 : 0247 000F            		andi.w	#%1111,d7
(1)  467/    12BA : 1A2E 0002           		move.b	on_hold(a6),d5
(1)  468/    12BE : BF05                		eor.b	d7,d5
(1)  469/    12C0 : 1D47 0002           		move.b	d7,on_hold(a6)
(1)  470/    12C4 : CA07                		and.b	d7,d5
(1)  471/    12C6 : 1D45 0004           		move.b	d5,on_press(a6)
(1)  472/    12CA :                     .oldpad:
(1)  473/    12CA : 1D46 0001           		move.b	d6,pad_ver(a6)
(1)  474/    12CE : 4E75                		rts
(1)  475/    12D0 :                     
(1)  476/    12D0 :                     ; ----------------------------------------
(1)  477/    12D0 :                     ; Grab ID
(1)  478/    12D0 :                     ; ----------------------------------------
(1)  479/    12D0 :                     
(1)  480/    12D0 :                     .pick_id:
(1)  481/    12D0 : 7E00                		moveq	#0,d7
(1)  482/    12D2 : 1ABC 0070           		move.b	#%01110000,(a5)		; TH=1,TR=1,TL=1
(1)  483/    12D6 : 4E71                		nop
(1)  484/    12D8 : 4E71                		nop
(1)  485/    12DA : 610A                		bsr	.read
(1)  486/    12DC : 1ABC 0030           		move.b	#%00110000,(a5)		; TH=0,TR=1,TL=1
(1)  487/    12E0 : 4E71                		nop
(1)  488/    12E2 : 4E71                		nop
(1)  489/    12E4 : DE47                		add.w	d7,d7
(1)  490/    12E6 :                     .read:
(1)  491/    12E6 : 1A15                		move.b	(a5),d5
(1)  492/    12E8 : 1C05                		move.b	d5,d6
(1)  493/    12EA : 0206 000C           		andi.b	#%1100,d6
(1)  494/    12EE : 6702                		beq.s	.step_1
(1)  495/    12F0 : 5247                		addq.w	#1,d7
(1)  496/    12F2 :                     .step_1:
(1)  497/    12F2 : DE47                		add.w	d7,d7
(1)  498/    12F4 : 1C05                		move.b	d5,d6
(1)  499/    12F6 : 0246 0003           		andi.w	#%0011,d6
(1)  500/    12FA : 6702                		beq.s	.step_2
(1)  501/    12FC : 5247                		addq.w	#1,d7
(1)  502/    12FE :                     .step_2:
(1)  503/    12FE : 4E75                		rts
(1)  505/    1300 :                     
(1)  506/    1300 :                     ; --------------------------------------------------------
(1)  507/    1300 :                     ; System_Random
(1)  508/    1300 :                     ;
(1)  509/    1300 :                     ; Makes a random number.
(1)  510/    1300 :                     ;
(1)  511/    1300 :                     ; Input:
(1)  512/    1300 :                     ; d0 | Seed
(1)  513/    1300 :                     ;
(1)  514/    1300 :                     ; Output:
(1)  515/    1300 :                     ; d0 | LONG
(1)  516/    1300 :                     ;
(1)  517/    1300 :                     ; Uses:
(1)  518/    1300 :                     ; d4-d5
(1)  519/    1300 :                     ; --------------------------------------------------------
(1)  520/    1300 :                     
(1)  521/    1300 :                     System_Random:
(1)  522/    1300 : 2F04                		move.l	d4,-(sp)
(1)  523/    1302 : 2838 C448           		move.l	(RAM_SysRandSeed).w,d4
(1)  524/    1306 : 6606                		bne.s	.good_s
(1)  525/    1308 : 283C 23B5 1947      		move.l	#$23B51947,d4
(1)  526/    130E :                     .good_s:
(1)  527/    130E : 2004                		move.l	d4,d0
(1)  528/    1310 : EB9C                		rol.l	#5,d4
(1)  529/    1312 : D880                		add.l	d0,d4
(1)  530/    1314 : E644                		asr.w	#3,d4
(1)  531/    1316 : D880                		add.l	d0,d4
(1)  532/    1318 : 3004                		move.w	d4,d0
(1)  533/    131A : 4844                		swap	d4
(1)  534/    131C : D044                		add.w	d4,d0
(1)  535/    131E : 3800                		move.w	d0,d4
(1)  536/    1320 : 4844                		swap	d4
(1)  537/    1322 : 21C4 C448           		move.l	d4,(RAM_SysRandSeed).w
(1)  538/    1326 : 281F                		move.l	(sp)+,d4
(1)  539/    1328 : 4E75                		rts
(1)  540/    132A :                     
(1)  541/    132A :                     ; --------------------------------------------------------
(1)  542/    132A :                     ; System_SineWave_Cos / System_SineWave
(1)  543/    132A :                     ;
(1)  544/    132A :                     ; Get sinewave value
(1)  545/    132A :                     ;
(1)  546/    132A :                     ; Input:
(1)  547/    132A :                     ; d0 | WORD - Tan
(1)  548/    132A :                     ; d1 | WORD - Multiply
(1)  549/    132A :                     ;
(1)  550/    132A :                     ; Output:
(1)  551/    132A :                     ; d2 | LONG - Result (as 0000.0000)
(1)  552/    132A :                     ; --------------------------------------------------------
(1)  553/    132A :                     
(1)  554/    132A :                     System_SineWave_Cos:
(1)  555/    132A : 48A7 8000           		movem.w	d0,-(sp)
(1)  556/    132E : 7400                		moveq	#0,d2
(1)  557/    1330 : 0600 0040           		addi.b	#$40,d0
(1)  558/    1334 : 1400                		move.b	d0,d2
(1)  559/    1336 : E302                		asl.b	#1,d2
(1)  560/    1338 : 343B 202E           		move.w	MdSys_SineData(pc,d2.w),d2
(1)  561/    133C : C4C1                		mulu.w	d1,d2
(1)  562/    133E : 8000                		or.b	d0,d0
(1)  563/    1340 : 6A02                		bpl.s	.dont_neg
(1)  564/    1342 : 4482                		neg.l	d2
(1)  565/    1344 :                     .dont_neg:
(1)  566/    1344 : 4C9F 0001           		movem.w	(sp)+,d0
(1)  567/    1348 : 4E75                		rts
(1)  568/    134A :                     
(1)  569/    134A :                     System_SineWave:
(1)  570/    134A : 48A7 8000           		movem.w	d0,-(sp)
(1)  571/    134E : 0240 007F           		andi.w	#$7F,d0
(1)  572/    1352 : E340                		asl.w	#1,d0
(1)  573/    1354 : 343B 0012           		move.w	MdSys_SineData(pc,d0.w),d2
(1)  574/    1358 : C4C1                		mulu.w	d1,d2
(1)  575/    135A : 4C9F 0001           		movem.w	(sp)+,d0
(1)  576/    135E : 5182                		subq.l	#8,d2
(1)  577/    1360 : 8000                		or.b	d0,d0
(1)  578/    1362 : 6A02                		bpl.s	.dont_neg
(1)  579/    1364 : 4482                		neg.l	d2
(1)  580/    1366 :                     .dont_neg:
(1)  581/    1366 : 4E75                		rts
(1)  582/    1368 :                     
(1)  583/    1368 : 0000 0006 000D      MdSys_SineData:	dc.w 0,	6, $D, $13, $19, $1F, $26, $2C,	$32, $38, $3E
             136E : 0013 0019 001F 
             1374 : 0026 002C 0032 
             137A : 0038 003E          
(1)  584/    137E : 0044 004A 0050      		dc.w $44, $4A, $50, $56, $5C, $62, $68,	$6D, $73, $79
             1384 : 0056 005C 0062 
             138A : 0068 006D 0073 
             1390 : 0079             
(1)  585/    1392 : 007E 0084 0089      		dc.w $7E, $84, $89, $8E, $93, $98, $9D,	$A2, $A7, $AC
             1398 : 008E 0093 0098 
             139E : 009D 00A2 00A7 
             13A4 : 00AC             
(1)  586/    13A6 : 00B1 00B5 00B9      		dc.w $B1, $B5, $B9, $BE, $C2, $C6, $CA,	$CE, $D1, $D5
             13AC : 00BE 00C2 00C6 
             13B2 : 00CA 00CE 00D1 
             13B8 : 00D5             
(1)  587/    13BA : 00D8 00DC 00DF      		dc.w $D8, $DC, $DF, $E2, $E5, $E7, $EA,	$ED, $EF, $F1
             13C0 : 00E2 00E5 00E7 
             13C6 : 00EA 00ED 00EF 
             13CC : 00F1             
(1)  588/    13CE : 00F3 00F5 00F7      		dc.w $F3, $F5, $F7, $F8, $FA, $FB, $FC,	$FD, $FE, $FF
             13D4 : 00F8 00FA 00FB 
             13DA : 00FC 00FD 00FE 
             13E0 : 00FF             
(1)  589/    13E2 : 00FF 0100 0100      		dc.w $FF, $100,	$100, $100, $100, $100,	$FF, $FF, $FE
             13E8 : 0100 0100 0100 
             13EE : 00FF 00FF 00FE    
(1)  590/    13F4 : 00FD 00FC 00FB      		dc.w $FD, $FC, $FB, $FA, $F8, $F7, $F5,	$F3, $F1, $EF
             13FA : 00FA 00F8 00F7 
             1400 : 00F5 00F3 00F1 
             1406 : 00EF             
(1)  591/    1408 : 00ED 00EA 00E7      		dc.w $ED, $EA, $E7, $E5, $E2, $DF, $DC,	$D8, $D5, $D1
             140E : 00E5 00E2 00DF 
             1414 : 00DC 00D8 00D5 
             141A : 00D1             
(1)  592/    141C : 00CE 00CA 00C6      		dc.w $CE, $CA, $C6, $C2, $BE, $B9, $B5,	$B1, $AC, $A7
             1422 : 00C2 00BE 00B9 
             1428 : 00B5 00B1 00AC 
             142E : 00A7             
(1)  593/    1430 : 00A2 009D 0098      		dc.w $A2, $9D, $98, $93, $8E, $89, $84,	$7E, $79, $73
             1436 : 0093 008E 0089 
             143C : 0084 007E 0079 
             1442 : 0073             
(1)  594/    1444 : 006D 0068 0062      		dc.w $6D, $68, $62, $5C, $56, $50, $4A,	$44, $3E, $38
             144A : 005C 0056 0050 
             1450 : 004A 0044 003E 
             1456 : 0038             
(1)  595/    1458 : 0032 002C 0026      		dc.w $32, $2C, $26, $1F, $19, $13, $D, 6
             145E : 001F 0019 0013 
             1464 : 000D 0006          
(1)  596/    1468 :                     
(1)  597/    1468 :                     ; --------------------------------------------------------
(1)  598/    1468 :                     ; System_SetInts
(1)  599/    1468 :                     ;
(1)  600/    1468 :                     ; Set new interrputs
(1)  601/    1468 :                     ;
(1)  602/    1468 :                     ; d0.l - VBlank (if 0: Skip write)
(1)  603/    1468 :                     ; d1.l - HBlank (if 0: Skip write)
(1)  604/    1468 :                     ;
(1)  605/    1468 :                     ; Uses:
(1)  606/    1468 :                     ; d4
(1)  607/    1468 :                     ; --------------------------------------------------------
(1)  608/    1468 :                     
(1)  609/    1468 :                     System_SetInts:
(1)  610/    1468 : 2800                		move.l	d0,d4
(1)  611/    146A : 6704                		beq.s	.novint
(1)  615/    146C : 21C4 C44E            		move.l	d4,(RAM_MdMarsVInt+2).w
(1)  617/    1470 :                     .novint:
(1)  618/    1470 : 2801                		move.l	d1,d4
(1)  619/    1472 : 6704                		beq.s	.nohint
(1)  623/    1474 : 21C4 C454            		move.l	d4,(RAM_MdMarsHInt+2).w
(1)  625/    1478 :                     .nohint:
(1)  626/    1478 : 4E75                		rts
(1)  627/    147A :                     
(1)  628/    147A :                     ; --------------------------------------------------------
(1)  629/    147A :                     ; System_SramInit
(1)  630/    147A :                     ;
(1)  631/    147A :                     ; Init save data
(1)  632/    147A :                     ;
(1)  633/    147A :                     ; Uses:
(1)  634/    147A :                     ; a4,d4-d5
(1)  635/    147A :                     ; --------------------------------------------------------
(1)  636/    147A :                     
(1)  637/    147A :                     System_SramInit:
(1)  643/    147A : 615E                		bsr	System_SramLoad
(1)  644/    147C : 0CB8 5341 5645      		cmpi.l	#TAG_SRAMDATA,(RAM_SaveData).w
             1482 : C044             
(1)  645/    1484 : 671A                		beq.s	.dont_clear
(1)  646/    1486 : 4DF8 C044           		lea	(RAM_SaveData).w,a6
(1)  647/    148A : 7C00                		moveq	#0,d6
(1)  648/    148C : 3E3C 03FF           		move.w	#MAX_SRAMSIZE-1,d7
(1)  649/    1490 :                     .clr_sram:
(1)  650/    1490 : 1CC6                		move.b	d6,(a6)+
(1)  651/    1492 : 51CF FFFC           		dbf	d7,.clr_sram
(1)  652/    1496 : 21FC 5341 5645      		move.l	#TAG_SRAMDATA,(RAM_SaveData).w
             149C : C044             
(1)  653/    149E : 6102                		bsr	System_SramSave
(1)  654/    14A0 :                     .dont_clear:
(1)  656/    14A0 : 4E75                		rts
(1)  657/    14A2 :                     
(1)  658/    14A2 :                     ; --------------------------------------------------------
(1)  659/    14A2 :                     ; System_SramSave
(1)  660/    14A2 :                     ; --------------------------------------------------------
(1)  661/    14A2 :                     
(1)  662/    14A2 :                     System_SramSave:
(1)  668/    14A2 :                     
(1)  669/    14A2 :                     	; Cartridge
(1)  670/    14A2 : 40C7                		move.w	sr,d7
(1)  671/    14A4 : 4847                		swap	d7
(1)  672/    14A6 : 007C 0700           		ori.w	#$0700,sr
(1)  676/    14AA : 13FC 0001 00A1      		move.b	#1,(md_bank_sram).l
             14B0 : 30F1             
(1)  677/    14B2 : 4DF8 C044           		lea	(RAM_SaveData).w,a6
(1)  678/    14B6 : 4BF9 0020 0003      		lea	($200003).l,a5
(1)  679/    14BC : 3E3C 01FE           		move.w	#((MAX_SRAMSIZE-2)/2)-1,d7
(1)  680/    14C0 :                     .save:
(1)  681/    14C0 : 1C1E                		move.b	(a6)+,d6
(1)  682/    14C2 : 1A86                		move.b	d6,(a5)
(1)  683/    14C4 : DAFC 0002           		adda	#2,a5
(1)  684/    14C8 : 51CF FFF6           		dbf	d7,.save
(1)  685/    14CC :                     .dont_reset:
(1)  686/    14CC : 13FC 0000 00A1      		move.b	#0,(md_bank_sram).l
             14D2 : 30F1             
(1)  690/    14D4 : 4847                		swap	d7
(1)  691/    14D6 : 46C7                		move.w	d7,sr
(1)  693/    14D8 : 4E75                		rts
(1)  694/    14DA :                     
(1)  695/    14DA :                     ; --------------------------------------------------------
(1)  696/    14DA :                     ; System_SramLoad
(1)  697/    14DA :                     ; --------------------------------------------------------
(1)  698/    14DA :                     
(1)  699/    14DA :                     System_SramLoad:
(1)  705/    14DA :                     
(1)  706/    14DA :                     	; Cartridge
(1)  707/    14DA : 40C7                		move.w	sr,d7
(1)  708/    14DC : 4847                		swap	d7
(1)  709/    14DE : 007C 0700           		ori.w	#$0700,sr
(1)  713/    14E2 : 13FC 0001 00A1      		move.b	#1,(md_bank_sram).l
             14E8 : 30F1             
(1)  714/    14EA : 4DF8 C044           		lea	(RAM_SaveData).w,a6
(1)  715/    14EE : 4BF9 0020 0003      		lea	($200003).l,a5
(1)  716/    14F4 : 3E3C 01FE           		move.w	#((MAX_SRAMSIZE-2)/2)-1,d7
(1)  717/    14F8 :                     .load:
(1)  718/    14F8 : 1C15                		move.b	(a5),d6
(1)  719/    14FA : 1AC6                		move.b	d6,(a5)+
(1)  720/    14FC : DAFC 0002           		adda	#2,a5
(1)  721/    1500 : 51CF FFF6           		dbf	d7,.load
(1)  722/    1504 :                     .dont_reset:
(1)  723/    1504 : 13FC 0000 00A1      		move.b	#0,(md_bank_sram).l
             150A : 30F1             
(1)  727/    150C : 4847                		swap	d7
(1)  728/    150E : 46C7                		move.w	d7,sr
(1)  730/    1510 : 4E75                		rts
(1)  731/    1512 :                     
(1)  732/    1512 :                     ; ====================================================================
(1)  733/    1512 :                     ; ----------------------------------------------------------------
(1)  734/    1512 :                     ; Screen mode subroutines
(1)  735/    1512 :                     ; ----------------------------------------------------------------
(1)  736/    1512 :                     
(1)  737/    1512 :                     ; --------------------------------------------------------
(1)  738/    1512 :                     ; Initialize current screen mode
(1)  739/    1512 :                     ;
(1)  740/    1512 :                     ; MUST call this at the very start of your screen code.
(1)  741/    1512 :                     ; --------------------------------------------------------
(1)  742/    1512 :                     
(1)  743/    1512 :                     Mode_Init:
(1)  744/    1512 : 007C 0700           		ori.w	#$0700,sr			; Disable interrupts.
(1)  745/    1516 : 13FC 0004 FFFF      		move.b	#$04,(RAM_VdpRegs).l
             151C : BDF6             
(1)  746/    151E : 13FC 0004 FFFF      		move.b	#$04,(RAM_VdpRegs+1).l
             1524 : BDF7             
(1)  747/    1526 : 6100 EFF2           		bsr	Video_Update
(1)  748/    152A : 6100 F040           		bsr	Video_Clear
(1)  749/    152E : 6100 F830           		bsr	Objects_Clear
(1)  750/    1532 : 49F8 1800           		lea	(MAX_ScrnBuff),a4
(1)  751/    1536 : 3A3C 0BFF           		move.w	#(MAX_ScrnBuff/2)-1,d5
(1)  752/    153A : 7800                		moveq	#0,d4
(1)  753/    153C :                     .clr:
(1)  754/    153C : 38C4                		move.w	d4,(a4)+
(1)  755/    153E : 51CD FFFC           		dbf	d5,.clr
(1)  756/    1542 : 4E75                		rts
(1)  757/    1544 :                     
(1)  758/    1544 :                     ; --------------------------------------------------------
(1)  759/    1544 :                     ; Syncronized Fade-in/Fade-out for both VDP and SuperVDP
(1)  760/    1544 :                     ; --------------------------------------------------------
(1)  761/    1544 :                     
(1)  762/    1544 :                     Mode_FadeIn:
(1)  763/    1544 : 6100 F842           		bsr	Objects_Run
(1)  764/    1548 : 31FC 0001 BDE4      		move.w	#1,(RAM_FadeMdReq).w
(1)  765/    154E : 31FC 0001 BDEC      		move.w	#1,(RAM_FadeMarsReq).w
(1)  766/    1554 : 31FC 0001 BDE6      		move.w	#1,(RAM_FadeMdIncr).w
(1)  767/    155A : 31FC 0002 BDEE      		move.w	#2,(RAM_FadeMarsIncr).w
(1)  768/    1560 : 31FC 0001 BDE8      		move.w	#1,(RAM_FadeMdDelay).w
(1)  769/    1566 : 31FC 0000 BDF0      		move.w	#0,(RAM_FadeMarsDelay).w
(1)  770/    156C :                     .loopw:
(1)  771/    156C : 6100 FB90           		bsr	System_Render
(1)  772/    1570 : 6100 F0D2           		bsr	Video_RunFade
(1)  773/    1574 : 66F6                		bne.s	.loopw
(1)  774/    1576 : 4E75                		rts
(1)  775/    1578 :                     
(1)  776/    1578 :                     Mode_FadeOut:
(1)  777/    1578 : 6100 F80E           		bsr	Objects_Run
(1)  778/    157C : 31FC 0002 BDE4      		move.w	#2,(RAM_FadeMdReq).w
(1)  779/    1582 : 31FC 0002 BDEC      		move.w	#2,(RAM_FadeMarsReq).w
(1)  780/    1588 : 31FC 0001 BDE6      		move.w	#1,(RAM_FadeMdIncr).w
(1)  781/    158E : 31FC 0002 BDEE      		move.w	#2,(RAM_FadeMarsIncr).w
(1)  782/    1594 : 31FC 0001 BDE8      		move.w	#1,(RAM_FadeMdDelay).w
(1)  783/    159A : 31FC 0000 BDF0      		move.w	#0,(RAM_FadeMarsDelay).w
(1)  784/    15A0 :                     .loopw:
(1)  785/    15A0 : 6100 FB5C           		bsr	System_Render
(1)  786/    15A4 : 6100 F09E           		bsr	Video_RunFade
(1)  787/    15A8 : 66F6                		bne.s	.loopw
(1)  788/    15AA : 4E75                		rts
(1)  789/    15AC :                     
(1)  790/    15AC :                     ; ====================================================================
(1)  791/    15AC :                     ; ----------------------------------------------------------------
(1)  792/    15AC :                     ; Default interrupts
(1)  793/    15AC :                     ; ----------------------------------------------------------------
(1)  794/    15AC :                     
(1)  795/    15AC :                     ; --------------------------------------------------------
(1)  796/    15AC :                     ; VBlank
(1)  797/    15AC :                     ; --------------------------------------------------------
(1)  798/    15AC :                     
(1)  799/    15AC :                     VInt_Default:
(1)  800/    15AC : 48E7 FFFE           		movem.l	d0-a6,-(sp)
(1)  801/    15B0 : 6100 FBA2           		bsr	System_Input
(1)  802/    15B4 : 06B8 0000 0001      		addi.l	#1,(RAM_FrameCount).w
             15BA : BDD4             
(1)  803/    15BC : 4CDF 7FFF           		movem.l	(sp)+,d0-a6
(1)  804/    15C0 : 4E73                		rte
(1)  805/    15C2 :                     
(1)  806/    15C2 :                     ; --------------------------------------------------------
(1)  807/    15C2 :                     ; HBlank
(1)  808/    15C2 :                     ; --------------------------------------------------------
(1)  809/    15C2 :                     
(1)  810/    15C2 :                     HInt_Default:
(1)  811/    15C2 : 4E73                		rte
(1)  812/    15C4 :                     
(1)  813/    15C4 :                     ; ====================================================================
(1)  814/    15C4 :                     ; ----------------------------------------------------------------
(1)  815/    15C4 :                     ; SEGA CD / CD32X ONLY
(1)  816/    15C4 :                     ; ----------------------------------------------------------------
(1)  817/    15C4 :                     
(1) 1021/    15C4 :                     
(1) 1022/    15C4 :                     ; ====================================================================
(1) 1023/    15C4 :                     ; ----------------------------------------------------------------
(1) 1024/    15C4 :                     ; 32X and CD32X ONLY
(1) 1025/    15C4 :                     ; ----------------------------------------------------------------
(1) 1026/    15C4 :                     
(1) 1171/    15C4 :                     
(1) 1172/    15C4 :                     ; ====================================================================
(1) 1173/    15C4 :                     ; ----------------------------------------------------------------
(1) 1174/    15C4 :                     ; Shared subs for the add-ons
(1) 1175/    15C4 :                     ; ----------------------------------------------------------------
(1) 1176/    15C4 :                     
(1) 1177/    15C4 :                     ; --------------------------------------------------------
(1) 1178/    15C4 :                     ; System_GrabRamCode
(1) 1179/    15C4 :                     ;
(1) 1180/    15C4 :                     ; Shared routine for MCD, 32X and CD32X.
(1) 1181/    15C4 :                     ;
(1) 1182/    15C4 :                     ; Send new code to the USER side of RAM and
(1) 1183/    15C4 :                     ; jumps into it.
(1) 1184/    15C4 :                     ;
(1) 1185/    15C4 :                     ; ** FOR SEGA CD/CD+32X
(1) 1186/    15C4 :                     ; Input:
(1) 1187/    15C4 :                     ; a0 - Filename string 8-bytes
(1) 1188/    15C4 :                     ;
(1) 1189/    15C4 :                     ; ** FOR SEGA 32X
(1) 1190/    15C4 :                     ; Input:
(1) 1191/    15C4 :                     ; a0 - Location of the RAM-code to copy from
(1) 1192/    15C4 :                     ;      in the $880000/$900000 areas
(1) 1193/    15C4 :                     ; --------------------------------------------------------
(1) 1194/    15C4 :                     
(1) 1195/    15C4 :                     System_GrabRamCode:
(1) 1210/    15C4 : 4E75                		rts
(1) 1212/    15C6 :                     
(1) 1213/    15C6 :                     ; ====================================================================
(1) 1214/    15C6 :                     
     208/    15C6 :                     
     209/    15C6 :                     ; ---------------------------------------------
     210/    15C6 :                     ; Read screen modes
     211/    15C6 :                     ;
     212/    15C6 :                     ;   MD/Pico: Direct ROM jump
     213/    15C6 :                     ; SCD/CD32X: Reads file from DISC and
     214/    15C6 :                     ;            transfers code to RAM
     215/    15C6 :                     ;       32X: Read from ROM and copies code to
     216/    15C6 :                     ;            RAM so it's problematic with DMA
     217/    15C6 :                     ;            and the SH2
     218/    15C6 :                     ;
     219/    15C6 :                     ; - Returning in your current screen code
     220/    15C6 :                     ; will loop here and reload the entire
     221/    15C6 :                     ; screen code.
     222/    15C6 :                     ; - DO NOT JUMP TO SCREEN MODES DIRECTLY
     223/    15C6 :                     ; ---------------------------------------------
     224/    15C6 :                     
     225/    15C6 :                     Md_ReadModes:
     226/    15C6 : 007C 0700           		ori.w	#$0700,sr		; Disable interrupts
     227/    15CA : 7000                		moveq	#0,d0
     228/    15CC : 3038 C458           		move.w	(RAM_ScreenMode).w,d0
     229/    15D0 : C07C 007F           		and.w	#$7F,d0			; <-- CURRENT LIMIT
     230/    15D4 : E948                		lsl.w	#4,d0			; * $10
     231/    15D6 : 41FB 000A           		lea	.pick_mode(pc,d0.w),a0	; LEA the filename
     239/    15DA : 207B 0006           		movea.l	.pick_mode(pc,d0.w),a0	; Location to JUMP to.
     240/    15DE : 4E90                		jsr	(a0)
     242/    15E0 : 60E4                		bra.s	Md_ReadModes		; Loop on rts
     243/    15E2 :                     
     244/    15E2 :                     ; ---------------------------------------------
     245/    15E2 :                     ; ** ADD SCREEN MODES HERE **
     246/    15E2 :                     ; ---------------------------------------------
     247/    15E2 :                     
     248/    15E2 :                     .pick_mode:
     249/    15E2 : 0000 35A6           		dc.l Md_Screen00	; Cartridge label *unused on CD
     250/    15E6 : 5343 5245 454E      		dc.b "SCREEN00.BIN"	; ISO Filename *unused on Cartridge
             15EC : 3030 2E42 494E    
     251/    15F2 : 0000 35A6           		dc.l Md_Screen00
     252/    15F6 : 5343 5245 454E      		dc.b "SCREEN00.BIN"
             15FC : 3030 2E42 494E    
     253/    1602 : 0000 35A6           		dc.l Md_Screen00
     254/    1606 : 5343 5245 454E      		dc.b "SCREEN00.BIN"
             160C : 3030 2E42 494E    
     255/    1612 : 0000 35A6           		dc.l Md_Screen00
     256/    1616 : 5343 5245 454E      		dc.b "SCREEN00.BIN"
             161C : 3030 2E42 494E    
     257/    1622 : 0000 35A6           		dc.l Md_Screen00
     258/    1626 :                     
     259/    1626 :                     ; ---------------------------------------------
     260/    1626 :                     
     267/    1626 :                     Md_SysCode_e:
     268/    1626 :                     		align 2
     269/    1626 :                     
     270/    1626 :                     ; ===========================================================================
     271/    1626 :                     ; --------------------------------------------------------
     272/    1626 :                     ; Z80 include on Cartridge ONLY (NOT on Disc)
     273/    1626 :                     ; --------------------------------------------------------
     274/    1626 :                     
     279/    1626 :                     Z80_CODE:
     283/    1626 :                     		include "sound/driver/gema_zdrv.asm"
(1)    1/    1626 :                     ; ===========================================================================
(1)    2/    1626 :                     ; -------------------------------------------------------------------
(1)    3/    1626 :                     ; GEMA/Nikona Z80 code v0.9
(1)    4/    1626 :                     ; by GenesisFan64 2023-2024
(1)    5/    1626 :                     ; -------------------------------------------------------------------
(1)    6/    1626 :                     
(1)    7/       0 :                     		phase 0
(1)    8/       0 :                     		cpu Z80		; Enter Z80 CPU
(1)    9/       0 :                     
(1)   10/       0 :                     ; --------------------------------------------------------
(1)   11/       0 :                     ; SETTINGS
(1)   12/       0 :                     ; --------------------------------------------------------
(1)   13/       0 :                     
(1)   14/       0 :                     ; !! = HARDCODED
(1)   15/       0 : =8H                  MAX_TRFRPZ	equ 8		; !! Max transferRom packets(bytes) **AFFECTS WAVE QUALITY**
(1)   16/       0 : =20H                 MAX_TRKCHN	equ 32		; !! Max internal shared tracker channel slots *** LIMTED to 32 ***
(1)   17/       0 : =20H                 MAX_RCACH	equ 20h		; !! Max storage for ROM pattern data *** 1-BIT SIZES ONLY, MUST BE ALIGNED ***
(1)   18/       0 : =8H                  MAX_BUFFNTRY	equ 4*2		; !! nikona_BuffList buffer entry size
(1)   19/       0 : =18H                 MAX_TBLSIZE	equ 18h		; Maximum size for chip tables (MINIMUM: 10h)
(1)   20/       0 : =1AH                 MAX_TRKINDX	equ 26		; Max channel indexes per buffer: 4PSG+6FM+8PCM+8PWM
(1)   21/       0 : =10H                 MAX_ZCMND	equ 10h		; Size of command array ** 1-bit SIZES ONLY ** (68k uses this label too)
(1)   22/       0 :                     
(1)   23/       0 :                     ; Debug:
(1)   24/       0 : =0H                  ZSET_TESTME	equ 0		; Set to 1 to check the DAC playback quality
(1)   25/       0 :                     
(1)   26/       0 :                     ; --------------------------------------------------------
(1)   27/       0 :                     ; Structs
(1)   28/       0 :                     ; --------------------------------------------------------
(1)   29/       0 :                     
(1)   30/       0 :                     ; trkBuff struct
(1)   31/       0 :                     ;
(1)   32/       0 :                     ; trk_Status: %ERP- V--0
(1)   33/       0 :                     ; E - enabled
(1)   34/       0 :                     ; R - Init|Restart track
(1)   35/       0 :                     ; P - refill-on-playback
(1)   36/       0 :                     ; V - volume change flag
(1)   37/       0 :                     ; 0 - Use global sub-beats
(1)   38/       0 : =0H                  trk_Status	equ 00h	; ** Track Status and Flags (MUST BE at 00h)
(1)   39/       0 : =1H                  trk_SeqId	equ 01h ; ** Track ID to play.
(1)   40/       0 : =2H                  trk_SetBlk	equ 02h	; ** Start on this block
(1)   41/       0 : =3H                  trk_TickSet	equ 03h	; ** Ticks for this track
(1)   42/       0 : =4H                  trk_Blocks	equ 04h ; ** [W] Current track's blocks
(1)   43/       0 : =6H                  trk_Patt	equ 06h ; ** [W] Current track's heads and patterns
(1)   44/       0 : =8H                  trk_Cach	equ 08h	; ** [W] Current track's cache notedata
(1)   45/       0 : =0AH                 trk_Read	equ 0Ah	; [W] Track current pattern read
(1)   46/       0 : =0CH                 trk_Rows	equ 0Ch	; [W] Track row counter
(1)   47/       0 : =0EH                 trk_VolMaster	equ 0Eh ; [W] Master volume for this track slot (00-max), +80h update
(1)   48/       0 : =10H                 trk_cachHalf	equ 10h ; ROM-cache halfcheck
(1)   49/       0 : =11H                 trk_rowPause	equ 11h	; Row-pause timer
(1)   50/       0 : =12H                 trk_tickTmr	equ 12h	; Ticks timer
(1)   51/       0 : =13H                 trk_currBlk	equ 13h	; Current block
(1)   52/       0 : =14H                 trk_Priority	equ 14h ; Priority level for this buffer
(1)   53/       0 : =15H                 trk_BankIns	equ 15h ; Instrument bank
(1)   54/       0 : =16H                 trk_BankHeads	equ 16h ; Header bank
(1)   55/       0 : =17H                 trk_BankBlk	equ 17h	; Block bank
(1)   56/       0 : =18H                 trk_MaxChnl	equ 18h ; MAX channels used in this track
(1)   57/       0 : =19H                 trk_VolFdTarget	equ 19h	; Target fade volume
(1)   58/       0 : =1AH                 trk_RomPattRead	equ 1Ah ; [3b] ROM current pattern data to be cache'd
(1)   59/       0 : =1DH                 trk_RomPatt	equ 1Dh ; [3b] ROM BASE pattern data
(1)   60/       0 : =20H                 trk_RomInst	equ 20h ; [3b] ROM instrument data
(1)   61/       0 : =23H                 trk_RomBlks	equ 23h ; [3b] ROM blocks data
(1)   62/       0 : =26H                 trk_ChnIndx	equ 26h	; CHANNEL INDEXES START HERE
(1)   63/       0 :                     
(1)   64/       0 :                     ; chnBuff struct: 8 bytes ONLY
(1)   65/       0 :                     ;
(1)   66/       0 :                     ; chnl_Flags: E0LRevin
(1)   67/       0 :                     ; E  - Channel is active
(1)   68/       0 :                     ; LR - Global left/Right panning bits (0-ON 1-OFF)
(1)   69/       0 :                     ; e  - Effect*
(1)   70/       0 :                     ; v  - Volume*
(1)   71/       0 :                     ; i  - Intrument*
(1)   72/       0 :                     ; n  - Note*
(1)   73/       0 : =0H                  chnl_Flags	equ 0	; Playback flags ** DON'T MOVE **
(1)   74/       0 : =1H                  chnl_Chip	equ 1	; Current Chip ID + priority for this channel
(1)   75/       0 : =2H                  chnl_Note	equ 2
(1)   76/       0 : =3H                  chnl_Ins	equ 3	; Starting from 1, 0 is invalid
(1)   77/       0 : =4H                  chnl_Vol	equ 4	; MAX to MIN: 40h-00h
(1)   78/       0 : =5H                  chnl_EffId	equ 5
(1)   79/       0 : =6H                  chnl_EffArg	equ 6
(1)   80/       0 : =7H                  chnl_Type	equ 7	; Impulse-note update bits
(1)   81/       0 :                     
(1)   82/       0 :                     ; --------------------------------------------------------
(1)   83/       0 :                     ; Variables
(1)   84/       0 :                     ; --------------------------------------------------------
(1)   85/       0 :                     
(1)   86/       0 :                     ; Z80 opcode labels for the wave playback routines
(1)   87/       0 : =0H                  zopcNop		equ 00h
(1)   88/       0 : =8H                  zopcEx		equ 08h
(1)   89/       0 : =0C9H                zopcRet		equ 0C9h
(1)   90/       0 : =0D9H                zopcExx		equ 0D9h		; (dac_me ONLY)
(1)   91/       0 : =0F5H                zopcPushAf	equ 0F5h		; (dac_fill ONLY)
(1)   92/       0 :                     
(1)   93/       0 :                     ; PSG external control
(1)   94/       0 : =0H                  COM		equ 0
(1)   95/       0 : =4H                  LEV		equ 4
(1)   96/       0 : =8H                  ATK		equ 8
(1)   97/       0 : =0CH                 DKY		equ 12
(1)   98/       0 : =10H                 SLV		equ 16
(1)   99/       0 : =14H                 RRT		equ 20
(1)  100/       0 : =18H                 MODE		equ 24
(1)  101/       0 : =1CH                 DTL		equ 28
(1)  102/       0 : =20H                 DTH		equ 32
(1)  103/       0 : =24H                 ALV		equ 36
(1)  104/       0 : =28H                 FLG		equ 40
(1)  105/       0 : =2CH                 TMR		equ 44
(1)  106/       0 : =30H                 PVOL		equ 48
(1)  107/       0 : =34H                 PARP		equ 52
(1)  108/       0 : =38H                 PTMR		equ 56
(1)  109/       0 :                     
(1)  110/       0 :                     ; PWM control
(1)  111/       0 :                     ; PWCOM		equ 0
(1)  112/       0 :                     ; PWPTH_V	equ 8	; Volume | Pitch MSB (VVVVVVPPb)
(1)  113/       0 :                     ; PWPHL		equ 16	; Pitch LSB
(1)  114/       0 :                     ; PWOUTF	equ 24	; Output mode/bits | 32-bit address (%SlLRxiix) ii=$02 or $06
(1)  115/       0 :                     ; PWINSH	equ 32	; **
(1)  116/       0 :                     ; PWINSM	equ 40	; **
(1)  117/       0 :                     ; PWINSL	equ 48	; **
(1)  118/       0 :                     
(1)  119/       0 :                     ; ====================================================================
(1)  120/       0 :                     ; --------------------------------------------------------
(1)  121/       0 :                     ; Code starts here
(1)  122/       0 :                     ; --------------------------------------------------------
(1)  123/       0 :                     
(1)  124/       0 : F3                  		di			; Disable interrputs first
(1)  125/       1 : ED 56               		im	1		; Set Interrupt mode 1
(1)  126/       3 : 31 00 20            		ld	sp,2000h	; Set stack at the end of Z80
(1)  127/       6 : 18 48               		jr	z80_init	; Jump to z80_init
(1)  128/       8 :                     
(1)  129/       8 :                     ; --------------------------------------------------------
(1)  130/       8 :                     ; RST 8 (dac_me)
(1)  131/       8 :                     ; *** self-modifiable code ***
(1)  132/       8 :                     ;
(1)  133/       8 :                     ; Writes wave data to DAC using data stored
(1)  134/       8 :                     ; on the wave buffer, call this routine every 6 or 8
(1)  135/       8 :                     ; instructions to keep the samplerate stable.
(1)  136/       8 :                     ;
(1)  137/       8 :                     ; Input (EXX):
(1)  138/       8 :                     ;  c - WAVE buffer MSB
(1)  139/       8 :                     ; de - Pitch (xx.00)
(1)  140/       8 :                     ; h  - WAVE buffer LSB (as xx.00)
(1)  141/       8 :                     ;
(1)  142/       8 :                     ; Uses (EXX):
(1)  143/       8 :                     ; b
(1)  144/       8 :                     ;
(1)  145/       8 :                     ; Notes:
(1)  146/       8 :                     ; ONLY USE dac_on and dac_off to control
(1)  147/       8 :                     ; wave playback.
(1)  148/       8 :                     ;
(1)  149/       8 :                     ; call dac_on to enable wave playback, locks FM6
(1)  150/       8 :                     ; and
(1)  151/       8 :                     ; call dac_off to disable wave and unlock FM6.
(1)  152/       8 :                     ; --------------------------------------------------------
(1)  153/       8 :                     
(1)  154/       8 :                     ; Samplerate is at 16000hz with minimal quality loss.
(1)  155/       8 :                     ; 		org 8
(1)  156/       8 : D9                  dac_me:		exx			; * swap regs <-- Changes between EXX(play) and RET(stop)
(1)  157/       9 : 08                  		ex	af,af'		; Swap af
(1)  158/       A : 45                  		ld	b,l		; Save pitch .00 to b
(1)  159/       B : 6C                  		ld	l,h		; l - xx.00 to 00xx
(1)  160/       C : 61                  		ld	h,c		; h - Wave buffer MSB + 00xx
(1)  161/       D : 3E 2A               		ld	a,2Ah		; YM register 2Ah
(1)  162/       F : 32 00 40            		ld	(Zym_ctrl_1),a	; Set DAC write
(1)  163/      12 : 7E                  		ld	a,(hl)		; Read wave byte
(1)  164/      13 : 32 01 40            		ld	(Zym_data_1),a	; Write it to DAC
(1)  165/      16 : 65                  		ld	h,l		; get hl back
(1)  166/      17 : 68                  		ld	l,b		; Get .00 back from b to l
(1)  167/      18 : 19                  		add	hl,de		; Pitch increment hl
(1)  168/      19 : 08                  		ex	af,af'		; Return af
(1)  169/      1A : D9                  		exx			; * swap regs
(1)  170/      1B : C9                  		ret
(1)  171/      1C :                     
(1)  172/      1C :                     ; --------------------------------------------------------
(1)  173/      1C :                     ; 1Ch - Master tracklist pointer
(1)  174/      1C :                     gemaMstrListPos:
(1)  175/      1C : 00                  		db 0				; ** 32-bit 68k address **
(1)  176/      1D : 00                  		db 0
(1)  177/      1E : 00                  		db 0
(1)  178/      1F : 00                  		db 0
(1)  179/      20 :                     
(1)  180/      20 :                     ; --------------------------------------------------------
(1)  181/      20 :                     ; RST 20h (dac_me)
(1)  182/      20 :                     ; *** self-modifiable code ***
(1)  183/      20 :                     ;
(1)  184/      20 :                     ; Checks if the WAVE cache needs refilling to keep
(1)  185/      20 :                     ; it playing.
(1)  186/      20 :                     ; --------------------------------------------------------
(1)  187/      20 :                     
(1)  188/      20 :                     ; 		org 20h
(1)  189/      20 : F5                  dac_fill:	push	af		; <-- Changes between PUSH AF(play) and RET(stop)
(1)  190/      21 : 3A 75 1C            		ld	a,(dDacFifoMid)	; a - Get half-way value
(1)  191/      24 : D9                  		exx			; * swap regs
(1)  192/      25 : AC                  		xor	h		; Grab LSB.00
(1)  193/      26 : D9                  		exx			; * swap regs
(1)  194/      27 : E6 80               		and	80h		; Check if bit changed
(1)  195/      29 : C4 4D 12            		call	nz,dac_refill	; If yes, Refill and update LSB to check
(1)  196/      2C : F1                  		pop	af
(1)  197/      2D : C9                  		ret
(1)  198/      2E :                     
(1)  199/      2E :                     ; --------------------------------------------------------
(1)  200/      2E :                     ; 02Eh - User read/write values
(1)  201/      2E : 00                  commZWrite	db 0			; 2Eh: cmd fifo wptr (from 68k)
(1)  202/      2F : 00                  commZRomBlk	db 0			; 2Fh: 68k ROM block flag
(1)  203/      30 : 00                  cdRamLen	db 0			; 30h: Size + status flag
(1)  204/      31 : 00 00               cdRamDst	db 0,0			; 31h: ** Z80 destination
(1)  205/      33 : 00 00               cdRamSrc	db 0,0			; 33h: ** 68k 24-bit source
(1)  206/      35 : 00                  cdRamSrcB	db 0			; 35h: **
(1)  207/      36 : 00                  mcdBlock	db 0			; 36h: Flag to BLOCK SCD comm
(1)  208/      37 : 00                  marsBlock	db 0			; 37h: Flag to BLOCK PWM transfers.
(1)  209/      38 :                     
(1)  210/      38 :                     ; --------------------------------------------------------
(1)  211/      38 :                     ; Z80 Interrupt at 0038h
(1)  212/      38 :                     ; --------------------------------------------------------
(1)  213/      38 :                     
(1)  214/      38 :                     ; 		org 38h			; Align 38h
(1)  215/      38 : ED 73 70 1C         		ld	(tickSpSet),sp	; Write TICK flag using sp (xx1F, read as tickFlag+1)
(1)  216/      3C : F3                  		di			; Disable interrupt
(1)  217/      3D : C9                  		ret
(1)  218/      3E :                     
(1)  219/      3E :                     ; --------------------------------------------------------
(1)  220/      3E :                     ; 03Eh - More user settings
(1)  221/      3E : 00                  palMode		db 0			; 3Eh: PAL mode flag
(1)  222/      3F : 00                  freeFlag	db 0
(1)  223/      40 :                     
(1)  224/      40 :                     ; --------------------------------------------------------
(1)  225/      40 :                     ; 68K Read/Write area at 40h
(1)  226/      40 :                     ; --------------------------------------------------------
(1)  227/      40 :                     
(1)  228/      40 :                     ; 		org 40h
(1)  229/      40 :                     commZfifo	ds MAX_ZCMND			; Buffer for commands from 68k side
(1)  230/      50 :                     
(1)  231/      50 :                     ; --------------------------------------------------------
(1)  232/      50 :                     ; Initialize
(1)  233/      50 :                     ; --------------------------------------------------------
(1)  234/      50 :                     
(1)  235/      50 :                     z80_init:
(1)  236/      50 : CD 2D 0F            		call	gema_init		; Init values
(1)  237/      53 : FB                  		ei
(1)  238/      54 :                     
(1)  239/      54 :                     ; --------------------------------------------------------
(1)  240/      54 :                     ; MAIN LOOP
(1)  241/      54 :                     ; --------------------------------------------------------
(1)  242/      54 :                     
(1)  243/      54 :                     drv_loop:
(1)  244/      54 : CF                  		rst	8
(1)  245/      55 : CD 99 0F            		call	get_tick		; Check tick on VBlank
(1)  246/      58 : E7                  		rst	20h			; Refill wave here
(1)  247/      59 : CF                  		rst	8
(1)  248/      5A : 06 00               		ld	b,0			; b - Reset current flags (beat|tick)
(1)  249/      5C : 3A 72 1C            		ld	a,(tickCnt)		; Decrement tick counter
(1)  250/      5F : D6 01               		sub	1
(1)  251/      61 : 38 0B               		jr	c,.noticks		; If non-zero, no tick passed.
(1)  252/      63 : 32 72 1C            		ld	(tickCnt),a
(1)  253/      66 : CD 72 10            		call	chip_env		; Process PSG and YM
(1)  254/      69 : CD 99 0F            		call	get_tick		; Check for another tick
(1)  255/      6C : 06 01               		ld 	b,01b			; Set TICK and clear BEAT flags (01b)
(1)  256/      6E :                     .noticks:
(1)  257/      6E : 3A 8F 1C            		ld	a,(sbeatAcc+1)		; check beat counter (scaled by tempo)
(1)  258/      71 : D6 01               		sub	1
(1)  259/      73 : 38 06               		jr	c,.nobeats
(1)  260/      75 : CF                  		rst	8
(1)  261/      76 : 32 8F 1C            		ld	(sbeatAcc+1),a		; 1/24 beat passed.
(1)  262/      79 : CB C8               		set	1,b			; Set BEAT (10b) flag
(1)  263/      7B :                     .nobeats:
(1)  264/      7B : CF                  		rst	8
(1)  265/      7C : 78                  		ld	a,b			; Any beat/tick bits set?
(1)  266/      7D : B7                  		or	a
(1)  267/      7E : 28 14               		jr	z,.neither
(1)  268/      80 : 32 8B 1C            		ld	(currTickBits),a	; Save BEAT/TICK bits
(1)  269/      83 : CF                  		rst	8
(1)  270/      84 : CD 99 0F            		call	get_tick
(1)  271/      87 : CD 0C 06            		call	set_chips		; Send changes to sound chips
(1)  272/      8A : CD 99 0F            		call	get_tick
(1)  273/      8D : CF                  		rst	8
(1)  274/      8E : CD 22 02            		call	upd_track		; Update track data
(1)  275/      91 : CD 99 0F            		call	get_tick
(1)  276/      94 :                     .neither:
(1)  277/      94 : CF                  		rst	8
(1)  281/      95 : CD 99 0F            		call	get_tick
(1)  282/      98 :                     .next_cmd:
(1)  283/      98 : 3A 2E 00            		ld	a,(commZWrite)		; Check if commZ R/W indexes
(1)  284/      9B : 47                  		ld	b,a			; are in the same spot a == b
(1)  285/      9C : 3A 7C 1C            		ld	a,(commZRead)
(1)  286/      9F : B8                  		cp	b			; If equal, loop back.
(1)  287/      A0 : 28 B2               		jr	z,drv_loop
(1)  288/      A2 : CF                  		rst	8
(1)  289/      A3 : CD BB 00            		call	.grab_arg		; Read staring flag -1
(1)  290/      A6 : FE FF               		cp	-1			; Got START -1?
(1)  291/      A8 : 20 AA               		jr	nz,drv_loop		; If not, end of commands
(1)  292/      AA : CD BB 00            		call	.grab_arg		; Read command number
(1)  293/      AD : 87                  		add	a,a			; ID * 2
(1)  294/      AE : 21 DA 00            		ld	hl,.list		; Index-jump...
(1)  295/      B1 : 16 00               		ld	d,0
(1)  296/      B3 : 5F                  		ld	e,a
(1)  297/      B4 : 19                  		add	hl,de
(1)  298/      B5 : 7E                  		ld	a,(hl)
(1)  299/      B6 : 23                  		inc	hl
(1)  300/      B7 : 66                  		ld	h,(hl)
(1)  301/      B8 : CF                  		rst	8
(1)  302/      B9 : 6F                  		ld	l,a
(1)  303/      BA : E9                  		jp	(hl)
(1)  304/      BB :                     
(1)  305/      BB :                     ; --------------------------------------------------------
(1)  306/      BB :                     ; Read cmd byte, auto re-rolls to 3Fh
(1)  307/      BB :                     ; --------------------------------------------------------
(1)  308/      BB :                     
(1)  309/      BB :                     .grab_arg:
(1)  310/      BB : D5                  		push	de
(1)  311/      BC : E5                  		push	hl
(1)  312/      BD :                     .getcbytel:
(1)  313/      BD : 3A 2E 00            		ld	a,(commZWrite)
(1)  314/      C0 : 57                  		ld	d,a
(1)  315/      C1 : CF                  		rst	8
(1)  316/      C2 : 3A 7C 1C            		ld	a,(commZRead)
(1)  317/      C5 : BA                  		cp	d		; commZ R/W indexes are the same?
(1)  318/      C6 : 28 F5               		jr	z,.getcbytel	; wait until these counters change.
(1)  319/      C8 : 16 00               		ld	d,0
(1)  320/      CA : 5F                  		ld	e,a
(1)  321/      CB : 21 40 00            		ld	hl,commZfifo	; Read commZ list + index
(1)  322/      CE : 19                  		add	hl,de
(1)  323/      CF : CF                  		rst	8
(1)  324/      D0 : 3C                  		inc	a
(1)  325/      D1 : E6 0F               		and	MAX_ZCMND-1	; ** commZ list buffer limit
(1)  326/      D3 : 32 7C 1C            		ld	(commZRead),a
(1)  327/      D6 : 7E                  		ld	a,(hl)		; a - got this byte from the buffer
(1)  328/      D7 : E1                  		pop	hl
(1)  329/      D8 : D1                  		pop	de
(1)  330/      D9 : C9                  		ret
(1)  331/      DA :                     
(1)  332/      DA :                     ; --------------------------------------------------------
(1)  333/      DA :                     
(1)  334/      DA :                     .list:
(1)  335/      DA : EA 00               		dw .cmnd_0		; 00h -
(1)  336/      DC : ED 00               		dw .cmnd_1		; 01h - Set Master tracklist
(1)  337/      DE : 06 01               		dw .cmnd_2		; 02h - Play by track number
(1)  338/      E0 : 42 01               		dw .cmnd_3		; 03h - Stop by track number
(1)  339/      E2 : EA 00               		dw .cmnd_0		; 04h - **
(1)  340/      E4 : 7B 01               		dw .cmnd_5		; 05h - Fade volume (FadeIn/FadeOut)
(1)  341/      E6 : B3 01               		dw .cmnd_6		; 06h - Set maximum volume to slot
(1)  342/      E8 : EB 01               		dw .cmnd_7		; 07h - Set GLOBAL sub-beats
(1)  343/      EA :                     
(1)  344/      EA :                     ; --------------------------------------------------------
(1)  345/      EA :                     ; Command 00h
(1)  346/      EA :                     ;
(1)  347/      EA :                     ; Reserved for TESTING purposes.
(1)  348/      EA :                     ; --------------------------------------------------------
(1)  349/      EA :                     
(1)  350/      EA :                     .cmnd_0:
(1)  351/      EA :                     ; 		ld	a,DacIns_TEST>>16
(1)  352/      EA :                     ; 		ld	hl,(DacIns_TEST+6)&0FFFFh
(1)  353/      EA :                     ; 		ld	(wave_Start),hl
(1)  354/      EA :                     ; 		ld	(wave_Start+2),a
(1)  355/      EA :                     ; 		ld	a,02h
(1)  356/      EA :                     ; 		ld	hl,04000h
(1)  357/      EA :                     ; 		ld	(wave_Len),hl
(1)  358/      EA :                     ; 		ld	(wave_Len+2),a
(1)  359/      EA :                     ; 		ld	bc,0
(1)  360/      EA :                     ; 		ld	(wave_Loop),bc
(1)  361/      EA :                     ; 		ld	hl,100h
(1)  362/      EA :                     ; 		ld	(wave_Pitch),hl
(1)  363/      EA :                     ; 		ld	a,1
(1)  364/      EA :                     ; 		ld	(wave_Flags),a
(1)  365/      EA :                     ; 		call	dac_play
(1)  366/      EA :                     
(1)  367/      EA :                     ; 		ld	iy,trkBuff_0
(1)  368/      EA :                     ; 		ld	(iy+trk_VolMaster),64-16
(1)  369/      EA :                     ; 		ld	(iy+trk_VolFdTarget),64
(1)  370/      EA :                     
(1)  371/      EA : C3 98 00            		jp	.next_cmd
(1)  372/      ED :                     
(1)  373/      ED :                     ; --------------------------------------------------------
(1)  374/      ED :                     ; Command 01h:
(1)  375/      ED :                     ;
(1)  376/      ED :                     ; Set the Track MASTER-list.
(1)  377/      ED :                     ; --------------------------------------------------------
(1)  378/      ED :                     
(1)  379/      ED :                     .cmnd_1:
(1)  380/      ED : 21 1F 00            		ld	hl,gemaMstrListPos+3	; 32-bit big endian
(1)  381/      F0 : CD BB 00            		call	.grab_arg		; $000000xx
(1)  382/      F3 : 77                  		ld	(hl),a
(1)  383/      F4 : 2B                  		dec	hl
(1)  384/      F5 : CD BB 00            		call	.grab_arg		; $0000xx00
(1)  385/      F8 : 77                  		ld	(hl),a
(1)  386/      F9 : 2B                  		dec	hl
(1)  387/      FA : CD BB 00            		call	.grab_arg		; $00xx0000
(1)  388/      FD : 77                  		ld	(hl),a
(1)  389/      FE : 2B                  		dec	hl
(1)  390/      FF : CD BB 00            		call	.grab_arg		; $xx000000 (filler)
(1)  391/     102 : 77                  		ld	(hl),a
(1)  392/     103 : C3 98 00            		jp	.next_cmd
(1)  393/     106 :                     
(1)  394/     106 :                     ; --------------------------------------------------------
(1)  395/     106 :                     ; Command 02h:
(1)  396/     106 :                     ;
(1)  397/     106 :                     ; Make new track by sequence number
(1)  398/     106 :                     ;
(1)  399/     106 :                     ; Arguments:
(1)  400/     106 :                     ; SeqID,BlockPos,SlotIndex(If -1 autofill)
(1)  401/     106 :                     ; --------------------------------------------------------
(1)  402/     106 :                     
(1)  403/     106 :                     .cmnd_2:
(1)  404/     106 : CD BB 00            		call	.grab_arg		; d1: Sequence ID
(1)  405/     109 : 4F                  		ld	c,a			; copy as c
(1)  406/     10A : CD BB 00            		call	.grab_arg		; d2: Block from
(1)  407/     10D : 47                  		ld	b,a			; copy as b
(1)  408/     10E : CF                  		rst	8
(1)  409/     10F : CD BB 00            		call	.grab_arg		; d0: Slot index
(1)  410/     112 : FD 21 64 14         		ld	iy,nikona_BuffList	; iy - Slot buffer list
(1)  411/     116 : B7                  		or	a
(1)  412/     117 : FA 28 01            		jp	m,.srch_mode
(1)  413/     11A :                     ; 		cp	-1			; if d2 == -1, search
(1)  414/     11A :                     ; 		jr	z,.srch_mode
(1)  415/     11A : FE 04               		cp	(nikona_BuffList_e-nikona_BuffList)/MAX_BUFFNTRY	; If maxed out slots
(1)  416/     11C : D2 98 00            		jp	nc,.next_cmd
(1)  417/     11F : CD FC 01            		call	.cmnd_rdslot
(1)  418/     122 : CD 37 01            		call	.wrtto_slot
(1)  419/     125 : C3 98 00            		jp	.next_cmd
(1)  420/     128 :                     ; -1
(1)  421/     128 :                     .srch_mode:
(1)  422/     128 : CD 0F 02            		call	.srch_slot
(1)  423/     12B : FE FF               		cp	-1
(1)  424/     12D : CA 98 00            		jp	z,.next_cmd		; Then skip, no free slot.
(1)  425/     130 : CB 7E               		bit	7,(hl)			; Is this track free?
(1)  426/     132 : CA 37 01            		jp	z,.wrtto_slot
(1)  427/     135 : 18 F1               		jr	.srch_mode
(1)  428/     137 :                     .wrtto_slot:
(1)  429/     137 : 36 C0               		ld	(hl),0C0h		; ** Write trk_Status flags: Enable+Restart
(1)  430/     139 : 23                  		inc	hl
(1)  431/     13A : CF                  		rst	8
(1)  432/     13B : 71                  		ld	(hl),c			; ** write trk_SeqId
(1)  433/     13C : 23                  		inc	hl
(1)  434/     13D : 70                  		ld	(hl),b			; ** write trk_SetBlk
(1)  435/     13E : 79                  		ld	a,c
(1)  436/     13F : C3 98 00            		jp	.next_cmd
(1)  437/     142 :                     
(1)  438/     142 :                     ; --------------------------------------------------------
(1)  439/     142 :                     ; Command 03h:
(1)  440/     142 :                     ;
(1)  441/     142 :                     ; Stop track with the same sequence number
(1)  442/     142 :                     ;
(1)  443/     142 :                     ; SeqID,SlotIndex(-1 allslots)
(1)  444/     142 :                     ; --------------------------------------------------------
(1)  445/     142 :                     
(1)  446/     142 :                     .cmnd_3:
(1)  447/     142 : CD BB 00            		call	.grab_arg		; d1: Sequence ID
(1)  448/     145 : 4F                  		ld	c,a			; copy to c
(1)  449/     146 : CD BB 00            		call	.grab_arg		; d0: Slot index
(1)  450/     149 : FD 21 64 14         		ld	iy,nikona_BuffList	; iy - Slot buffer list
(1)  451/     14D : B7                  		or	a
(1)  452/     14E : FA 5F 01            		jp	m,.srch_del
(1)  453/     151 :                     ; 		cp	-1			; if -1, search for all with same ID
(1)  454/     151 :                     ; 		jr	z,.srch_del
(1)  455/     151 : FE 04               		cp	(nikona_BuffList_e-nikona_BuffList)/MAX_BUFFNTRY	; If maxed out slots
(1)  456/     153 : D2 98 00            		jp	nc,.next_cmd
(1)  457/     156 : CD FC 01            		call	.cmnd_rdslot
(1)  458/     159 : CD 6C 01            		call	.wrtto_del
(1)  459/     15C : C3 98 00            		jp	.next_cmd
(1)  460/     15F :                     ; -1
(1)  461/     15F :                     .srch_del:
(1)  462/     15F : CD 0F 02            		call	.srch_slot
(1)  463/     162 : FE FF               		cp	-1
(1)  464/     164 : CA 98 00            		jp	z,.next_cmd
(1)  465/     167 : CD 6C 01            		call	.wrtto_del
(1)  466/     16A : 18 F3               		jr	.srch_del
(1)  467/     16C :                     .wrtto_del:
(1)  468/     16C : CB 7E               		bit	7,(hl)
(1)  469/     16E : C8                  		ret	z
(1)  470/     16F : DD 7E 01            		ld	a,(ix+trk_SeqId)
(1)  471/     172 : B9                  		cp	c
(1)  472/     173 : C0                  		ret	nz
(1)  473/     174 : 36 FF               		ld	(hl),-1		; -1 flag, stop channel and clear slot
(1)  474/     176 : 23                  		inc	hl
(1)  475/     177 : 36 FF               		ld	(hl),-1		; Reset seqId
(1)  476/     179 : CF                  		rst	8
(1)  477/     17A : C9                  		ret
(1)  478/     17B :                     
(1)  479/     17B :                     ; --------------------------------------------------------
(1)  480/     17B :                     ; Command 05h:
(1)  481/     17B :                     ;
(1)  482/     17B :                     ; Fade volume (FadeIn/FadeOut)
(1)  483/     17B :                     ;
(1)  484/     17B :                     ; Arguments:
(1)  485/     17B :                     ; TargetVol,SlotIndex(If -1 autofill)
(1)  486/     17B :                     ; --------------------------------------------------------
(1)  487/     17B :                     
(1)  488/     17B :                     .cmnd_5:
(1)  489/     17B : CD BB 00            		call	.grab_arg		; d1: Master volume
(1)  490/     17E : 4F                  		ld	c,a			; copy to c
(1)  491/     17F : CD BB 00            		call	.grab_arg		; d0: Slot index
(1)  492/     182 : FD 21 64 14         		ld	iy,nikona_BuffList	; iy - Slot buffer list
(1)  493/     186 : B7                  		or	a
(1)  494/     187 : FA 98 01            		jp	m,.srch_fvol
(1)  495/     18A :                     ; 		cp	-1			; if -1, search for all with same ID
(1)  496/     18A :                     ; 		jr	z,.srch_fvol
(1)  497/     18A : FE 04               		cp	(nikona_BuffList_e-nikona_BuffList)/MAX_BUFFNTRY	; If maxed out slots
(1)  498/     18C : D2 98 00            		jp	nc,.next_cmd
(1)  499/     18F : CD FC 01            		call	.cmnd_rdslot
(1)  500/     192 : CD A5 01            		call	.wrtto_fvol
(1)  501/     195 : C3 98 00            		jp	.next_cmd
(1)  502/     198 :                     ; -1
(1)  503/     198 :                     .srch_fvol:
(1)  504/     198 : CD 0F 02            		call	.srch_slot
(1)  505/     19B : FE FF               		cp	-1
(1)  506/     19D : CA 98 00            		jp	z,.next_cmd		; Then skip, no free slot.
(1)  507/     1A0 : CD A5 01            		call	.wrtto_fvol
(1)  508/     1A3 : 18 F3               		jr	.srch_fvol
(1)  509/     1A5 :                     .wrtto_fvol:
(1)  510/     1A5 : CB 7E               		bit	7,(hl)			; Active?
(1)  511/     1A7 : C8                  		ret	z
(1)  512/     1A8 : CB DE               		set	3,(hl)			; Volume update flag
(1)  513/     1AA : DD 71 19            		ld	(ix+trk_VolFdTarget),c
(1)  514/     1AD : DD 36 0F 00         		ld	(ix+trk_VolMaster+1),0
(1)  515/     1B1 : CF                  		rst	8
(1)  516/     1B2 : C9                  		ret
(1)  517/     1B3 :                     
(1)  518/     1B3 :                     ; --------------------------------------------------------
(1)  519/     1B3 :                     ; Command 06h:
(1)  520/     1B3 :                     ;
(1)  521/     1B3 :                     ; Set track's master volume
(1)  522/     1B3 :                     ;
(1)  523/     1B3 :                     ; Arguments:
(1)  524/     1B3 :                     ; MasterVol,SlotIndex(If -1 autofill)
(1)  525/     1B3 :                     ; --------------------------------------------------------
(1)  526/     1B3 :                     
(1)  527/     1B3 :                     .cmnd_6:
(1)  528/     1B3 : CD BB 00            		call	.grab_arg		; d1: Master volume
(1)  529/     1B6 : 4F                  		ld	c,a			; copy to c
(1)  530/     1B7 : CD BB 00            		call	.grab_arg		; d0: Slot index
(1)  531/     1BA : FD 21 64 14         		ld	iy,nikona_BuffList	; iy - Slot buffer list
(1)  532/     1BE : B7                  		or	a
(1)  533/     1BF : FA D0 01            		jp	m,.srch_vol
(1)  534/     1C2 :                     ; 		cp	-1			; if -1, search for all with same ID
(1)  535/     1C2 :                     ; 		jr	z,.srch_vol
(1)  536/     1C2 : FE 04               		cp	(nikona_BuffList_e-nikona_BuffList)/MAX_BUFFNTRY	; If maxed out slots
(1)  537/     1C4 : D2 98 00            		jp	nc,.next_cmd
(1)  538/     1C7 : CD FC 01            		call	.cmnd_rdslot
(1)  539/     1CA : CD DD 01            		call	.wrtto_vol
(1)  540/     1CD : C3 98 00            		jp	.next_cmd
(1)  541/     1D0 :                     ; -1
(1)  542/     1D0 :                     .srch_vol:
(1)  543/     1D0 : CD 0F 02            		call	.srch_slot
(1)  544/     1D3 : FE FF               		cp	-1
(1)  545/     1D5 : CA 98 00            		jp	z,.next_cmd		; Then skip, no free slot.
(1)  546/     1D8 : CD DD 01            		call	.wrtto_vol
(1)  547/     1DB : 18 F3               		jr	.srch_vol
(1)  548/     1DD :                     .wrtto_vol:
(1)  549/     1DD : CB DE               		set	3,(hl)			; Volume update flag
(1)  550/     1DF : DD 71 0E            		ld	(ix+trk_VolMaster),c
(1)  551/     1E2 : DD 71 19            		ld	(ix+trk_VolFdTarget),c
(1)  552/     1E5 : DD 36 0F 00         		ld	(ix+trk_VolMaster+1),0
(1)  553/     1E9 : CF                  		rst	8
(1)  554/     1EA : C9                  		ret
(1)  555/     1EB :                     
(1)  556/     1EB :                     ; --------------------------------------------------------
(1)  557/     1EB :                     ; Command 07h:
(1)  558/     1EB :                     ;
(1)  559/     1EB :                     ; Set global sub-beats
(1)  560/     1EB :                     ; --------------------------------------------------------
(1)  561/     1EB :                     
(1)  562/     1EB :                     .cmnd_7:
(1)  563/     1EB : CD BB 00            		call	.grab_arg	; d0.w: $00xx
(1)  564/     1EE : 4F                  		ld	c,a
(1)  565/     1EF : CD BB 00            		call	.grab_arg	; d0.w: $xx00
(1)  566/     1F2 : 32 91 1C            		ld	(sbeatPtck+1),a
(1)  567/     1F5 : 79                  		ld	a,c
(1)  568/     1F6 : 32 90 1C            		ld	(sbeatPtck),a
(1)  569/     1F9 : C3 98 00            		jp	.next_cmd
(1)  570/     1FC :                     
(1)  571/     1FC :                     ; --------------------------------------------------------
(1)  572/     1FC :                     ; Shared subs
(1)  573/     1FC :                     ; --------------------------------------------------------
(1)  574/     1FC :                     
(1)  575/     1FC :                     .cmnd_rdslot:
(1)  576/     1FC : 87                  		add	a,a			; ** MANUAL MAX_BUFFNTRY
(1)  577/     1FD : 87                  		add	a,a			; id*8
(1)  578/     1FE : 87                  		add	a,a
(1)  579/     1FF : 16 00               		ld	d,0
(1)  580/     201 : 5F                  		ld	e,a
(1)  581/     202 : FD 19               		add	iy,de
(1)  582/     204 : FD 7E 00            		ld	a,(iy)
(1)  583/     207 : FD 66 01            		ld	h,(iy+1)
(1)  584/     20A : 6F                  		ld	l,a
(1)  585/     20B : E5                  		push	hl
(1)  586/     20C : DD E1               		pop	ix
(1)  587/     20E : C9                  		ret
(1)  588/     20F :                     
(1)  589/     20F :                     ; ------------------------------------------------
(1)  590/     20F :                     ; iy - nikona_BuffList
(1)  591/     20F :                     
(1)  592/     20F :                     .srch_slot:
(1)  593/     20F : FD 7E 00            		ld	a,(iy)
(1)  594/     212 : FE FF               		cp	-1			; End of list?
(1)  595/     214 : C8                  		ret	z
(1)  596/     215 : FD 66 01            		ld	h,(iy+1)		; hl - Current track slot
(1)  597/     218 : 6F                  		ld	l,a
(1)  598/     219 : E5                  		push	hl
(1)  599/     21A : DD E1               		pop	ix
(1)  600/     21C : 11 08 00            		ld	de,MAX_BUFFNTRY
(1)  601/     21F : FD 19               		add	iy,de			; Next entry for later
(1)  602/     221 : C9                  		ret
(1)  603/     222 :                     
(1)  604/     222 :                     ; ====================================================================
(1)  605/     222 :                     ; ----------------------------------------------------------------
(1)  606/     222 :                     ; MAIN Playback section
(1)  607/     222 :                     ; ----------------------------------------------------------------
(1)  608/     222 :                     
(1)  609/     222 :                     ; ============================================================
(1)  610/     222 :                     ; --------------------------------------------------------
(1)  611/     222 :                     ; Read INTERNAL mini-impulse-tracker data
(1)  612/     222 :                     ; --------------------------------------------------------
(1)  613/     222 :                     
(1)  614/     222 :                     upd_track:
(1)  615/     222 : E7                  		rst	20h			; Refill wave
(1)  616/     223 : CD 99 0F            		call	get_tick		; Check for tick flag
(1)  617/     226 : FD 21 64 14         		ld	iy,nikona_BuffList	; iy - slot buffer List
(1)  618/     22A :                     .trk_buffrs:
(1)  619/     22A : FD 7E 00            		ld	a,(iy)			; if -1, end here.
(1)  620/     22D : FE FF               		cp	-1
(1)  621/     22F : C8                  		ret	z
(1)  622/     230 : CF                  		rst	8
(1)  623/     231 : FD E5               		push	iy
(1)  624/     233 : CD 3F 02            		call	.read_track
(1)  625/     236 : FD E1               		pop	iy
(1)  626/     238 : 11 08 00            		ld	de,MAX_BUFFNTRY
(1)  627/     23B : FD 19               		add	iy,de
(1)  628/     23D : 18 EB               		jr	.trk_buffrs
(1)  629/     23F :                     
(1)  630/     23F :                     ; ----------------------------------------
(1)  631/     23F :                     ; iy - Track buffer
(1)  632/     23F :                     ; ----------------------------------------
(1)  633/     23F :                     
(1)  634/     23F :                     .read_track:
(1)  635/     23F : FD 6E 00            		ld	l,(iy)			; hl - current track slot
(1)  636/     242 : FD 66 01            		ld	h,(iy+1)
(1)  637/     245 : CF                  		rst	8
(1)  638/     246 : E5                  		push	hl
(1)  639/     247 : FD E1               		pop	iy			; change iy to hl
(1)  640/     249 : FD 46 00            		ld	b,(iy+trk_Status)	; b - Track status and settings
(1)  641/     24C : CB 78               		bit	7,b			; bit7: Track active?
(1)  642/     24E : C8                  		ret	z			; Return if not.
(1)  643/     24F : 78                  		ld	a,b
(1)  644/     250 : FE FF               		cp	-1			; Flag is -1?
(1)  645/     252 : C8                  		ret	z			; Return if mid-flag
(1)  646/     253 : CF                  		rst	8
(1)  647/     254 :                     	; ----------------------------------------
(1)  648/     254 :                     	; Track effects
(1)  649/     254 : FD 6E 0F            		ld	l,(iy+trk_VolMaster+1)
(1)  650/     257 : FD 66 0E            		ld	h,(iy+trk_VolMaster)
(1)  651/     25A : FD 4E 19            		ld	c,(iy+trk_VolFdTarget)
(1)  652/     25D : 11 00 01            		ld	de,0100h		; <-- Manual volfade speed MAX 0100h
(1)  653/     260 : 79                  		ld	a,c
(1)  654/     261 : BC                  		cp	h
(1)  655/     262 : 28 1E               		jr	z,.keep_vol
(1)  656/     264 : 30 06               		jr	nc,.fade_out
(1)  657/     266 : 11 80 FF            		ld	de,-80h
(1)  658/     269 : 19                  		add	hl,de
(1)  659/     26A : 18 0C               		jr	.too_much
(1)  660/     26C :                     .fade_out:
(1)  661/     26C : 19                  		add	hl,de
(1)  662/     26D : CF                  		rst	8
(1)  663/     26E : 7C                  		ld	a,h
(1)  664/     26F : B9                  		cp	c
(1)  665/     270 : 38 06               		jr	c,.too_much
(1)  666/     272 : 61                  		ld	h,c
(1)  667/     273 : 2E 00               		ld	l,0
(1)  668/     275 : FD 71 19            		ld	(iy+trk_VolFdTarget),c
(1)  669/     278 :                     .too_much:
(1)  670/     278 : FD CB 00 DE         		set	3,(iy+trk_Status)	; Volume update flag
(1)  671/     27C : FD 75 0F            		ld	(iy+trk_VolMaster+1),l
(1)  672/     27F : FD 74 0E            		ld	(iy+trk_VolMaster),h
(1)  673/     282 :                     .keep_vol:
(1)  674/     282 :                     	; ----------------------------------------
(1)  675/     282 : 3A 8B 1C            		ld	a,(currTickBits)	; a - Tick/Beat bits
(1)  676/     285 : CB 40               		bit	0,b			; bit0: This track uses Beats?
(1)  677/     287 : 28 03               		jr	z,.sfxmd
(1)  678/     289 : CB 4F               		bit	1,a			; BEAT passed?
(1)  679/     28B : C8                  		ret	z			; No BEAT.
(1)  680/     28C :                     .sfxmd:
(1)  681/     28C : CB 47               		bit	0,a			; TICK passed?
(1)  682/     28E : C8                  		ret	z			; No TICK.
(1)  683/     28F : CF                  		rst	8
(1)  684/     290 :                     	; ----------------------------------------
(1)  685/     290 :                     	; *** Start reading notes ***
(1)  686/     290 : CB 70               		bit	6,b			; bit6: Restart/First time?
(1)  687/     292 : C4 1E 05            		call	nz,.first_fill
(1)  688/     295 : CB 68               		bit	5,b			; bit5: FILL request by effect?
(1)  689/     297 : C4 17 05            		call	nz,.effect_fill
(1)  690/     29A : FD 7E 12            		ld	a,(iy+trk_tickTmr)	; TICK ex-timer for this track
(1)  691/     29D : 3D                  		dec	a
(1)  692/     29E : FD 77 12            		ld	(iy+trk_tickTmr),a
(1)  693/     2A1 : B7                  		or	a			; Check a
(1)  694/     2A2 : C0                  		ret	nz			; If Tick timer != 0, exit.
(1)  695/     2A3 : CF                  		rst	8
(1)  696/     2A4 : FD 7E 03            		ld	a,(iy+trk_TickSet)	; Set new tick timer
(1)  697/     2A7 : FD 77 12            		ld	(iy+trk_tickTmr),a
(1)  698/     2AA : FD 4E 0C            		ld	c,(iy+trk_Rows)		; bc - Set row counter
(1)  699/     2AD : FD 46 0D            		ld	b,(iy+(trk_Rows+1))
(1)  700/     2B0 : 79                  		ld	a,c			; Check rowcount
(1)  701/     2B1 : B0                  		or	b
(1)  702/     2B2 : 20 14               		jr	nz,.row_active		; If bc != 0: row is currenly playing.
(1)  703/     2B4 : CF                  		rst	8			; If bc == 0 ...
(1)  704/     2B5 : FD 7E 13            		ld	a,(iy+trk_currBlk)	; Next block
(1)  705/     2B8 : 3C                  		inc	a
(1)  706/     2B9 : FD 77 13            		ld 	(iy+trk_currBlk),a
(1)  707/     2BC : CD 2B 04            		call	.set_track		; Read track data ** ROM ACCESS **
(1)  708/     2BF : FE FF               		cp	-1			; Track finished?
(1)  709/     2C1 : C8                  		ret	z
(1)  710/     2C2 : FD 4E 0C            		ld	c,(iy+trk_Rows)		; Set new rowcount to bc
(1)  711/     2C5 : FD 46 0D            		ld	b,(iy+(trk_Rows+1))
(1)  712/     2C8 :                     .row_active:
(1)  713/     2C8 : CF                  		rst	8
(1)  714/     2C9 : FD 6E 0A            		ld	l,(iy+trk_Read)		; hl - CURRENT pattern to read
(1)  715/     2CC : FD 66 0B            		ld	h,(iy+((trk_Read+1)))
(1)  716/     2CF :                     
(1)  717/     2CF :                     ; --------------------------------
(1)  718/     2CF :                     ; Main read-loop
(1)  719/     2CF :                     ; --------------------------------
(1)  720/     2CF :                     
(1)  721/     2CF :                     .next_note:
(1)  722/     2CF : FD 7E 11            		ld	a,(iy+trk_rowPause)	; Check rowtimer
(1)  723/     2D2 : B7                  		or	a
(1)  724/     2D3 : 20 16               		jr	nz,.decrow
(1)  725/     2D5 : 7E                  		ld	a,(hl)			; Check if byte is a timer or a note
(1)  726/     2D6 : B7                  		or	a
(1)  727/     2D7 : 28 06               		jr	z,.exit			; If == 00h: exit
(1)  728/     2D9 : FA F6 02            		jp	m,.has_note		; If 80h-0FFh: Note data
(1)  729/     2DC : FD 77 11            		ld	(iy+trk_rowPause),a	; If 01h-07Fh: Row-pause timer
(1)  730/     2DF :                     
(1)  731/     2DF :                     ; --------------------------------
(1)  732/     2DF :                     ; Exit
(1)  733/     2DF :                     ; --------------------------------
(1)  734/     2DF :                     
(1)  735/     2DF :                     .exit:
(1)  736/     2DF : CF                  		rst	8
(1)  737/     2E0 : CD F3 03            		call	.inc_cpatt		; * Increment patt pos
(1)  738/     2E3 : FD 75 0A            		ld	(iy+trk_Read),l		; Update READ location
(1)  739/     2E6 : FD 74 0B            		ld	(iy+((trk_Read+1))),h
(1)  740/     2E9 : 18 03               		jr	.decrow_e
(1)  741/     2EB :                     .decrow:
(1)  742/     2EB : FD 35 11            		dec	(iy+trk_rowPause)	; Decrement row-pause timer
(1)  743/     2EE :                     .decrow_e:
(1)  744/     2EE : 0B                  		dec	bc			; Decrement rowcount
(1)  745/     2EF : FD 71 0C            		ld	(iy+trk_Rows),c		; Write last row to memory
(1)  746/     2F2 : FD 70 0D            		ld	(iy+(trk_Rows+1)),b
(1)  747/     2F5 : C9                  		ret	; Exit.
(1)  748/     2F6 :                     
(1)  749/     2F6 :                     ; --------------------------------
(1)  750/     2F6 :                     ; New note request
(1)  751/     2F6 :                     ;
(1)  752/     2F6 :                     ; a - %1tcccccc
(1)  753/     2F6 :                     ;   | t - type setup
(1)  754/     2F6 :                     ;   | c - channel
(1)  755/     2F6 :                     ; --------------------------------
(1)  756/     2F6 :                     
(1)  757/     2F6 :                     .has_note:
(1)  758/     2F6 : CF                  		rst	8
(1)  759/     2F7 : C5                  		push	bc			; Save rowcount
(1)  760/     2F8 : 4F                  		ld	c,a			; Copy patt byte control to c
(1)  761/     2F9 : CD F3 03            		call	.inc_cpatt		; * Increment patt pos
(1)  762/     2FC : E5                  		push	hl			; Save hl patt pos
(1)  763/     2FD : FD E5               		push	iy
(1)  764/     2FF : E1                  		pop	hl
(1)  765/     300 : DD 21 00 1E         		ld	ix,trkChnls		; ix - Channels buffer
(1)  766/     304 : 11 26 00            		ld	de,trk_ChnIndx		; <-- this also clears d
(1)  767/     307 : CF                  		rst	8
(1)  768/     308 : 19                  		add	hl,de			; hl - Track's index points buffer
(1)  769/     309 : 79                  		ld	a,c			; Get patt note position
(1)  770/     30A : E6 1F               		and	00011111b		; Filter index bits
(1)  771/     30C : 5F                  		ld	e,a			; Save as e
(1)  772/     30D : 19                  		add	hl,de			; Increment more by this pos
(1)  773/     30E : 7E                  		ld	a,(hl)			; Check if this index is occupied.
(1)  774/     30F : B7                  		or	a
(1)  775/     310 : 28 0A               		jr	z,.srch_new		; If == 0, new index
(1)  776/     312 : E6 1F               		and	00011111b		; If already used, read that channel
(1)  777/     314 : 87                  		add	a,a
(1)  778/     315 : 87                  		add	a,a
(1)  779/     316 : 87                  		add	a,a
(1)  780/     317 : 5F                  		ld	e,a
(1)  781/     318 : DD 19               		add	ix,de
(1)  782/     31A : 18 2B               		jr	.cont_chnl
(1)  783/     31C :                     
(1)  784/     31C :                     ; Make NEW channel
(1)  785/     31C :                     ; ix - channel list start
(1)  786/     31C :                     .srch_new:
(1)  787/     31C : CF                  		rst	8
(1)  788/     31D : 06 1F               		ld	b,MAX_TRKCHN-1	; Max channels to check - 1
(1)  789/     31F : 16 00               		ld	d,0		; Reset out index
(1)  790/     321 :                     .next_chnl:
(1)  791/     321 : DD 7E 00            		ld	a,(ix)		; Read chnl_Flags
(1)  792/     324 : B7                  		or	a		; If plus, track channel is free
(1)  793/     325 : F2 3C 03            		jp	p,.chnl_free
(1)  794/     328 : DD 23               		inc	ix		; Search next channel, increment by 8
(1)  795/     32A : DD 23               		inc	ix
(1)  796/     32C : DD 23               		inc	ix
(1)  797/     32E : DD 23               		inc	ix
(1)  798/     330 : CF                  		rst	8
(1)  799/     331 : DD 23               		inc	ix
(1)  800/     333 : DD 23               		inc	ix
(1)  801/     335 : DD 23               		inc	ix
(1)  802/     337 : DD 23               		inc	ix
(1)  803/     339 : 14                  		inc	d		; Increment out index
(1)  804/     33A : 10 E5               		djnz	.next_chnl
(1)  805/     33C :                     .chnl_free:
(1)  806/     33C : CF                  		rst	8
(1)  807/     33D : 7A                  		ld	a,d			; Read index we got
(1)  808/     33E : E6 1F               		and	00011111b		; Filter bits
(1)  809/     340 : F6 80               		or	10000000b		; + set as used
(1)  810/     342 : 77                  		ld	(hl),a			; Write index slot
(1)  811/     343 : DD CB 00 FE         		set	7,(ix+chnl_Flags)	; Enable channel on the list
(1)  812/     347 :                     .cont_chnl:
(1)  813/     347 : E1                  		pop	hl			; Recover patt pos
(1)  814/     348 :                     	; ix - current channel
(1)  815/     348 : CF                  		rst	8
(1)  816/     349 : DD 46 07            		ld	b,(ix+chnl_Type)	; b - current TYPE byte
(1)  817/     34C : CB 71               		bit	6,c			; This byte has new TYPE setting?
(1)  818/     34E : 28 08               		jr	z,.old_type
(1)  819/     350 : 7E                  		ld	a,(hl)
(1)  820/     351 : DD 77 07            		ld	(ix+chnl_Type),a	; Update TYPE byte
(1)  821/     354 : 47                  		ld	b,a			; Set to b
(1)  822/     355 : CD F3 03            		call	.inc_cpatt		; Next patt pos
(1)  823/     358 :                     .old_type:
(1)  824/     358 :                     	; b - evinEVIN
(1)  825/     358 :                     	;     E-effect/V-volume/I-instrument/N-note
(1)  826/     358 :                     	;     evin: byte is already stored on track-channel buffer
(1)  827/     358 :                     	;     EVIN: next byte(s) contain a new value. for eff:2 bytes
(1)  828/     358 :                     
(1)  829/     358 : CF                  		rst	8
(1)  830/     359 : CB 40               		bit	0,b			; New NOTE?
(1)  831/     35B : 28 07               		jr	z,.no_note
(1)  832/     35D : 7E                  		ld	a,(hl)			; Set NOTE and increment patt
(1)  833/     35E : DD 77 02            		ld	(ix+chnl_Note),a
(1)  834/     361 : CD F3 03            		call	.inc_cpatt
(1)  835/     364 :                     .no_note:
(1)  836/     364 : CB 48               		bit	1,b			; New INS?
(1)  837/     366 : 28 07               		jr	z,.no_ins
(1)  838/     368 : 7E                  		ld	a,(hl)			; Set INS and increment patt
(1)  839/     369 : DD 77 03            		ld	(ix+chnl_Ins),a
(1)  840/     36C : CD F3 03            		call	.inc_cpatt
(1)  841/     36F :                     .no_ins:
(1)  842/     36F : CB 50               		bit	2,b			; New VOL?
(1)  843/     371 : 28 07               		jr	z,.no_vol
(1)  844/     373 : 7E                  		ld	a,(hl)			; Set VOL and increment patt
(1)  845/     374 : DD 77 04            		ld	(ix+chnl_Vol),a
(1)  846/     377 : CD F3 03            		call	.inc_cpatt
(1)  847/     37A :                     .no_vol:
(1)  848/     37A : CB 58               		bit	3,b			; New EFFECT?
(1)  849/     37C : 28 0F               		jr	z,.no_eff
(1)  850/     37E : 7E                  		ld	a,(hl)			; Set EFFECT ID, incr patt
(1)  851/     37F : DD 77 05            		ld	(ix+chnl_EffId),a
(1)  852/     382 : CD F3 03            		call	.inc_cpatt
(1)  853/     385 : CF                  		rst	8
(1)  854/     386 : 7E                  		ld	a,(hl)			; Set EFFECT ARG, incr patt
(1)  855/     387 : DD 77 06            		ld	(ix+chnl_EffArg),a
(1)  856/     38A : CD F3 03            		call	.inc_cpatt
(1)  857/     38D :                     .no_eff:
(1)  858/     38D : 78                  		ld	a,b			; Merge the Impulse evin bits into main EVIN bits
(1)  859/     38E : 0F                  		rrca
(1)  860/     38F : 0F                  		rrca
(1)  861/     390 : 0F                  		rrca
(1)  862/     391 : 0F                  		rrca
(1)  863/     392 : E6 0F               		and	00001111b		; Filter bits
(1)  864/     394 : 4F                  		ld	c,a			; Save as c
(1)  865/     395 : 78                  		ld	a,b
(1)  866/     396 : E6 0F               		and	00001111b		; Filter again
(1)  867/     398 : B1                  		or	c			; Merge c with a
(1)  868/     399 : CF                  		rst	8
(1)  869/     39A : 4F                  		ld	c,a			; Save bit flags
(1)  870/     39B : DD 7E 00            		ld	a,(ix+chnl_Flags)
(1)  871/     39E : B1                  		or	c
(1)  872/     39F : DD 77 00            		ld	(ix+chnl_Flags),a
(1)  873/     3A2 :                     	; Check for effects that affect
(1)  874/     3A2 :                     	; internal playback:
(1)  875/     3A2 :                     	; Jump, Ticks, etc.
(1)  876/     3A2 : C1                  		pop	bc		; Restore rowcount
(1)  877/     3A3 : DD 7E 00            		ld	a,(ix+chnl_Flags)
(1)  878/     3A6 : E6 08               		and	1000b		; ONLY check for the EFFECT bit
(1)  879/     3A8 : CA CF 02            		jp	z,.next_note
(1)  880/     3AB : DD 7E 05            		ld	a,(ix+chnl_EffId)
(1)  881/     3AE : B7                  		or	a		; 00h = invalid effect
(1)  882/     3AF : CA CF 02            		jp	z,.next_note
(1)  883/     3B2 : FE 01               		cp	1		; Effect A: Tick set
(1)  884/     3B4 : 28 0B               		jr	z,.eff_A
(1)  885/     3B6 : FE 02               		cp	2		; Effect B: Position Jump
(1)  886/     3B8 : 28 18               		jr	z,.eff_B
(1)  887/     3BA : FE 03               		cp	3		; Effect C: Pattern break
(1)  888/     3BC : 28 32               		jr	z,.eff_C	; <-- JUMP and exit.
(1)  889/     3BE : C3 CF 02            		jp	.next_note
(1)  890/     3C1 :                     
(1)  891/     3C1 :                     ; ----------------------------------------
(1)  892/     3C1 :                     ; Effect A: Set ticks
(1)  893/     3C1 :                     ; ----------------------------------------
(1)  894/     3C1 :                     
(1)  895/     3C1 :                     .eff_A:
(1)  896/     3C1 : CF                  		rst	8
(1)  897/     3C2 : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - ticks number
(1)  898/     3C5 : FD 73 03            		ld	(iy+trk_TickSet),e	; set for both Set and Timer.
(1)  899/     3C8 : FD 73 12            		ld	(iy+trk_tickTmr),e
(1)  900/     3CB : DD CB 00 9E         		res	3,(ix+chnl_Flags)	; <-- Clear EFFECT bit
(1)  901/     3CF : C3 CF 02            		jp	.next_note
(1)  902/     3D2 :                     
(1)  903/     3D2 :                     ; ----------------------------------------
(1)  904/     3D2 :                     ; Effect B: jump to a new block
(1)  905/     3D2 :                     ; ----------------------------------------
(1)  906/     3D2 :                     
(1)  907/     3D2 :                     .eff_B:
(1)  908/     3D2 : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - Block SLOT to jump
(1)  909/     3D5 : FD 73 13            		ld 	(iy+trk_currBlk),e
(1)  910/     3D8 : CF                  		rst	8
(1)  911/     3D9 : FD 36 11 00         		ld	(iy+trk_rowPause),0	; Reset rowpause
(1)  912/     3DD : DD CB 00 9E         		res	3,(ix+chnl_Flags)	; <-- Clear EFFECT bit
(1)  913/     3E1 : FD CB 00 EE         		set	5,(iy+trk_Status)	; set fill-from-effect flag on exit
(1)  914/     3E5 : 3E 80               		ld	a,80h
(1)  915/     3E7 : FD 77 16            		ld	(iy+trk_BankHeads),a
(1)  916/     3EA : FD 77 17            		ld	(iy+trk_BankBlk),a
(1)  917/     3ED : C3 CF 02            		jp	.next_note
(1)  918/     3F0 :                     
(1)  919/     3F0 :                     ; ----------------------------------------
(1)  920/     3F0 :                     ; Effect C: Pattern break/exit
(1)  921/     3F0 :                     ;
(1)  922/     3F0 :                     ; Only used on SFX, arguments ignored.
(1)  923/     3F0 :                     ; ----------------------------------------
(1)  924/     3F0 :                     
(1)  925/     3F0 :                     .eff_C:
(1)  926/     3F0 : C3 04 05            		jp	.track_end
(1)  927/     3F3 :                     
(1)  928/     3F3 :                     ; ----------------------------------------
(1)  929/     3F3 :                     ; Increment the current patt position
(1)  930/     3F3 :                     ; and recieve more data
(1)  931/     3F3 :                     ;
(1)  932/     3F3 :                     ; Breaks:
(1)  933/     3F3 :                     ; a,e
(1)  934/     3F3 :                     ; ----------------------------------------
(1)  935/     3F3 :                     
(1)  936/     3F3 :                     .inc_cpatt:
(1)  937/     3F3 : FD 5E 08            		ld	e,(iy+trk_Cach)	; Read curret cache LSB
(1)  938/     3F6 : 7D                  		ld	a,l
(1)  939/     3F7 : 3C                  		inc	a
(1)  940/     3F8 : E6 1F               		and	MAX_RCACH-1
(1)  941/     3FA : FE 1E               		cp	MAX_RCACH-2	; RAN OUT of bytes?
(1)  942/     3FC : 30 03               		jr	nc,.ran_out
(1)  943/     3FE : B3                  		or	e
(1)  944/     3FF : 6F                  		ld	l,a
(1)  945/     400 : C9                  		ret
(1)  946/     401 :                     .ran_out:
(1)  947/     401 : FD 6E 08            		ld	l,(iy+trk_Cach)
(1)  948/     404 : E5                  		push	hl
(1)  949/     405 : C5                  		push	bc
(1)  950/     406 : 06 00               		ld	b,0
(1)  951/     408 : 4F                  		ld	c,a
(1)  952/     409 : CF                  		rst	8
(1)  953/     40A : 5D                  		ld	e,l
(1)  954/     40B : 54                  		ld	d,h
(1)  955/     40C : FD 6E 1A            		ld	l,(iy+trk_RomPattRead)
(1)  956/     40F : FD 66 1B            		ld	h,(iy+(trk_RomPattRead+1))
(1)  957/     412 : FD 7E 1C            		ld	a,(iy+(trk_RomPattRead+2))
(1)  958/     415 : 09                  		add	hl,bc
(1)  959/     416 : CE 00               		adc	a,0
(1)  960/     418 : FD 75 1A            		ld	(iy+trk_RomPattRead),l
(1)  961/     41B : FD 74 1B            		ld	(iy+(trk_RomPattRead+1)),h
(1)  962/     41E : CF                  		rst	8
(1)  963/     41F : FD 77 1C            		ld	(iy+(trk_RomPattRead+2)),a
(1)  964/     422 : 01 20 00            		ld	bc,MAX_RCACH
(1)  965/     425 : CD BA 0F            		call	transferRom	; *** ROM ACCESS ***
(1)  966/     428 : C1                  		pop	bc
(1)  967/     429 : E1                  		pop	hl
(1)  968/     42A : C9                  		ret
(1)  969/     42B :                     
(1)  970/     42B :                     ; ----------------------------------------
(1)  971/     42B :                     ; Set track pattern by trk_currBlk
(1)  972/     42B :                     ; ----------------------------------------
(1)  973/     42B :                     
(1)  974/     42B :                     .set_track:
(1)  975/     42B : FD 5E 04            		ld	e,(iy+trk_Blocks)
(1)  976/     42E : FD 56 05            		ld	d,(iy+(trk_Blocks+1))
(1)  977/     431 : FD 7E 13            		ld	a,(iy+trk_currBlk)
(1)  978/     434 : 4F                  		ld	c,a
(1)  979/     435 : C5                  		push	bc
(1)  980/     436 : D5                  		push	de
(1)  981/     437 : CF                  		rst	8
(1)  982/     438 : 0F                  		rrca
(1)  983/     439 : 0F                  		rrca
(1)  984/     43A : 0F                  		rrca
(1)  985/     43B : E6 1F               		and	00011111b
(1)  986/     43D : FD 4E 17            		ld	c,(iy+trk_BankBlk)	; c - current block bank
(1)  987/     440 : CB 79               		bit	7,c			; First time?
(1)  988/     442 : 20 03               		jr	nz,.first_blk
(1)  989/     444 : B9                  		cp	c			; SAME instrument data?
(1)  990/     445 : 28 1E               		jr	z,.keep_blk
(1)  991/     447 :                     .first_blk:
(1)  992/     447 : CF                  		rst	8
(1)  993/     448 : FD 77 17            		ld	(iy+trk_BankBlk),a	; Save inst number
(1)  994/     44B : 07                  		rlca
(1)  995/     44C : 07                  		rlca
(1)  996/     44D : 07                  		rlca
(1)  997/     44E : 06 00               		ld	b,0
(1)  998/     450 : 4F                  		ld	c,a
(1)  999/     451 : FD 6E 23            		ld	l,(iy+trk_RomBlks)	; Transfer FIRST patt
(1) 1000/     454 : FD 66 24            		ld	h,(iy+(trk_RomBlks+1))	; packet
(1) 1001/     457 : FD 7E 25            		ld	a,(iy+(trk_RomBlks+2))
(1) 1002/     45A : E7                  		rst	20h
(1) 1003/     45B : CF                  		rst	8
(1) 1004/     45C : 09                  		add	hl,bc
(1) 1005/     45D : CE 00               		adc	a,0
(1) 1006/     45F : 01 08 00            		ld	bc,8			; 8 blocks stored
(1) 1007/     462 : CD BA 0F            		call	transferRom		; ** ROM ACCESS **
(1) 1008/     465 :                     .keep_blk:
(1) 1009/     465 : E1                  		pop	hl
(1) 1010/     466 : C1                  		pop	bc
(1) 1011/     467 : 79                  		ld	a,c
(1) 1012/     468 : E6 07               		and	00000111b
(1) 1013/     46A : CF                  		rst	8
(1) 1014/     46B : 16 00               		ld	d,0
(1) 1015/     46D : 5F                  		ld	e,a
(1) 1016/     46E : 19                  		add	hl,de
(1) 1017/     46F : 7E                  		ld	a,(hl)			; Read byte
(1) 1018/     470 : FE FF               		cp	-1			; If block == -1, end track
(1) 1019/     472 : CA 04 05            		jp	z,.track_end
(1) 1020/     475 : CF                  		rst	8
(1) 1021/     476 :                     
(1) 1022/     476 : FD 5E 06            		ld	e,(iy+trk_Patt)		; Read CACHE patt heads
(1) 1023/     479 : FD 56 07            		ld	d,(iy+(trk_Patt+1))
(1) 1024/     47C : 4F                  		ld	c,a
(1) 1025/     47D : D5                  		push	de
(1) 1026/     47E : C5                  		push	bc
(1) 1027/     47F : CF                  		rst	8
(1) 1028/     480 : 0F                  		rrca
(1) 1029/     481 : 0F                  		rrca
(1) 1030/     482 : 0F                  		rrca
(1) 1031/     483 : E6 1F               		and	00011111b
(1) 1032/     485 : FD 4E 16            		ld	c,(iy+trk_BankHeads)	; c - current intrument loaded
(1) 1033/     488 : CB 79               		bit	7,c			; First time?
(1) 1034/     48A : 20 03               		jr	nz,.first_head
(1) 1035/     48C : B9                  		cp	c			; SAME instrument data?
(1) 1036/     48D : 28 26               		jr	z,.keep_it
(1) 1037/     48F :                     .first_head:
(1) 1038/     48F : CF                  		rst	8
(1) 1039/     490 : FD 77 16            		ld	(iy+trk_BankHeads),a	; Save inst number
(1) 1040/     493 : 47                  		ld	b,a
(1) 1041/     494 : 0F                  		rrca
(1) 1042/     495 : 0F                  		rrca
(1) 1043/     496 : 0F                  		rrca
(1) 1044/     497 : E6 E0               		and	11100000b
(1) 1045/     499 : 4F                  		ld	c,a
(1) 1046/     49A : 78                  		ld	a,b
(1) 1047/     49B : 0F                  		rrca
(1) 1048/     49C : 0F                  		rrca
(1) 1049/     49D : 0F                  		rrca
(1) 1050/     49E : E6 03               		and	00000011b
(1) 1051/     4A0 : 47                  		ld	b,a
(1) 1052/     4A1 :                     
(1) 1053/     4A1 : FD 6E 1D            		ld	l,(iy+trk_RomPatt)	; Transfer FIRST patt
(1) 1054/     4A4 : FD 66 1E            		ld	h,(iy+(trk_RomPatt+1))	; packet
(1) 1055/     4A7 : FD 7E 1F            		ld	a,(iy+(trk_RomPatt+2))
(1) 1056/     4AA : E7                  		rst	20h
(1) 1057/     4AB : CF                  		rst	8
(1) 1058/     4AC : 09                  		add	hl,bc
(1) 1059/     4AD : CE 00               		adc	a,0
(1) 1060/     4AF : 01 20 00            		ld	bc,4*8			; 8 heads stored
(1) 1061/     4B2 : CD BA 0F            		call	transferRom		; ** ROM ACCESS **
(1) 1062/     4B5 :                     .keep_it:
(1) 1063/     4B5 : C1                  		pop	bc
(1) 1064/     4B6 : 79                  		ld	a,c
(1) 1065/     4B7 : E6 07               		and	00000111b
(1) 1066/     4B9 : 87                  		add	a,a
(1) 1067/     4BA : 87                  		add	a,a
(1) 1068/     4BB : 57                  		ld	d,a
(1) 1069/     4BC : CF                  		rst	8
(1) 1070/     4BD : E6 FC               		and	11111100b
(1) 1071/     4BF : 5F                  		ld	e,a
(1) 1072/     4C0 : 7A                  		ld	a,d
(1) 1073/     4C1 : E6 03               		and	00000011b
(1) 1074/     4C3 : 57                  		ld	d,a
(1) 1075/     4C4 : E1                  		pop	hl
(1) 1076/     4C5 : 19                  		add	hl,de
(1) 1077/     4C6 : 5E                  		ld	e,(hl)			; de - Pos
(1) 1078/     4C7 : 23                  		inc	hl
(1) 1079/     4C8 : CF                  		rst	8
(1) 1080/     4C9 : 56                  		ld	d,(hl)
(1) 1081/     4CA : 23                  		inc	hl
(1) 1082/     4CB : 7E                  		ld	a,(hl)
(1) 1083/     4CC : 23                  		inc	hl
(1) 1084/     4CD : FD 77 0C            		ld	(iy+trk_Rows),a
(1) 1085/     4D0 : 7E                  		ld	a,(hl)
(1) 1086/     4D1 : 23                  		inc	hl
(1) 1087/     4D2 : FD 77 0D            		ld	(iy+(trk_Rows+1)),a
(1) 1088/     4D5 : FD 6E 1D            		ld	l,(iy+trk_RomPatt)	; Transfer FIRST patt
(1) 1089/     4D8 : FD 66 1E            		ld	h,(iy+(trk_RomPatt+1))	; packet
(1) 1090/     4DB : CF                  		rst	8
(1) 1091/     4DC : FD 7E 1F            		ld	a,(iy+(trk_RomPatt+2))
(1) 1092/     4DF : 19                  		add	hl,de
(1) 1093/     4E0 : CE 00               		adc	a,0
(1) 1094/     4E2 : FD 75 1A            		ld	(iy+trk_RomPattRead),l
(1) 1095/     4E5 : FD 74 1B            		ld	(iy+(trk_RomPattRead+1)),h
(1) 1096/     4E8 : FD 77 1C            		ld	(iy+(trk_RomPattRead+2)),a
(1) 1097/     4EB : FD 5E 08            		ld	e,(iy+trk_Cach)
(1) 1098/     4EE : FD 56 09            		ld	d,(iy+(trk_Cach+1))
(1) 1099/     4F1 :                     
(1) 1100/     4F1 : FD 73 0A            		ld	(iy+trk_Read),e
(1) 1101/     4F4 : FD 72 0B            		ld	(iy+(trk_Read+1)),d
(1) 1102/     4F7 : 0E 20               		ld	c,MAX_RCACH
(1) 1103/     4F9 : FD 36 10 00         		ld	(iy+trk_cachHalf),0
(1) 1104/     4FD : FD 36 11 00         		ld	(iy+trk_rowPause),0
(1) 1105/     501 : C3 BA 0F            		jp	transferRom		; ** ROM access **
(1) 1106/     504 :                     
(1) 1107/     504 :                     ; ----------------------------------------
(1) 1108/     504 :                     ; **JUMP ONLY**
(1) 1109/     504 :                     .track_end:
(1) 1110/     504 : CD C7 05            		call	track_out
(1) 1111/     507 : CF                  		rst	8
(1) 1112/     508 : AF                  		xor	a
(1) 1113/     509 : FD 77 11            		ld	(iy+trk_rowPause),a
(1) 1114/     50C : FD 77 12            		ld	(iy+trk_tickTmr),a
(1) 1115/     50F : FD 77 00            		ld	(iy+trk_Status),a	; Disable track slot
(1) 1116/     512 : FD 36 15 80         		ld	(iy+trk_BankIns),80h
(1) 1117/     516 : C9                  		ret
(1) 1118/     517 :                     
(1) 1119/     517 :                     ; ----------------------------------------
(1) 1120/     517 :                     ; Track refill
(1) 1121/     517 :                     ; ----------------------------------------
(1) 1122/     517 :                     
(1) 1123/     517 :                     .effect_fill:
(1) 1124/     517 : FD CB 00 AE         		res	5,(iy+trk_Status)	; Reset refill-from-effect flag
(1) 1125/     51B : C3 2B 04            		jp	.set_track
(1) 1126/     51E :                     
(1) 1127/     51E :                     ; ----------------------------------------
(1) 1128/     51E :                     ; Track Start/Reset
(1) 1129/     51E :                     ;
(1) 1130/     51E :                     ; iy - Track buffer
(1) 1131/     51E :                     ; ----------------------------------------
(1) 1132/     51E :                     
(1) 1133/     51E :                     .first_fill:
(1) 1134/     51E : FD CB 00 B6         		res	6,(iy+trk_Status)	; Clear FILL flag
(1) 1135/     522 : CD C7 05            		call	track_out
(1) 1136/     525 : FD 36 12 01         		ld	(iy+trk_tickTmr),1	; <-- Reset tick timer
(1) 1137/     529 : FD 7E 02            		ld	a,(iy+trk_SetBlk)	; Make start block as current block
(1) 1138/     52C : CF                  		rst	8
(1) 1139/     52D : FD 77 13            		ld 	(iy+trk_currBlk),a	; block
(1) 1140/     530 : FD 7E 01            		ld	a,(iy+trk_SeqId)
(1) 1141/     533 : FE FF               		cp	-1			; TODO
(1) 1142/     535 : C8                  		ret	z
(1) 1143/     536 : 87                  		add	a,a
(1) 1144/     537 : 87                  		add	a,a
(1) 1145/     538 : 16 00               		ld	d,0
(1) 1146/     53A : 5F                  		ld	e,a
(1) 1147/     53B : 21 1C 00            		ld	hl,gemaMstrListPos
(1) 1148/     53E : 23                  		inc	hl
(1) 1149/     53F : 7E                  		ld	a,(hl)		; $00xx0000
(1) 1150/     540 : 23                  		inc	hl
(1) 1151/     541 : 4E                  		ld	c,(hl)		; $0000xx00
(1) 1152/     542 : 23                  		inc	hl
(1) 1153/     543 : 6E                  		ld	l,(hl)		; $000000xx
(1) 1154/     544 : CF                  		rst	8
(1) 1155/     545 : 61                  		ld	h,c
(1) 1156/     546 : 19                  		add	hl,de
(1) 1157/     547 : CE 00               		adc	a,0
(1) 1158/     549 : 11 A2 1C            		ld	de,trkInfoCach
(1) 1159/     54C : D5                  		push	de
(1) 1160/     54D : 01 04 00            		ld	bc,4
(1) 1161/     550 : CD BA 0F            		call	transferRom	; *** ROM ACCESS ***
(1) 1162/     553 : E1                  		pop	hl
(1) 1163/     554 : 7E                  		ld	a,(hl)
(1) 1164/     555 : 23                  		inc	hl
(1) 1165/     556 : CB 7F               		bit	7,a
(1) 1166/     558 : 28 04               		jr	z,.no_glbl
(1) 1167/     55A : FD CB 00 C6         		set	0,(iy+trk_Status)	; Enable GLOBAL sub-beats
(1) 1168/     55E :                     .no_glbl:
(1) 1169/     55E : CF                  		rst	8
(1) 1170/     55F : E6 7F               		and	01111111b
(1) 1171/     561 : FD 77 03            		ld	(iy+trk_TickSet),a
(1) 1172/     564 : 7E                  		ld	a,(hl)			; Read and temporally
(1) 1173/     565 : 23                  		inc	hl			; grab it's pointers
(1) 1174/     566 : 4E                  		ld	c,(hl)
(1) 1175/     567 : 23                  		inc	hl
(1) 1176/     568 : 6E                  		ld	l,(hl)
(1) 1177/     569 : 61                  		ld	h,c
(1) 1178/     56A : 11 92 1C            		ld	de,headerOut
(1) 1179/     56D : 0E 0E               		ld	c,0Eh
(1) 1180/     56F : CD BA 0F            		call	transferRom		; ** ROM access **
(1) 1181/     572 : DD 21 9F 1C         		ld	ix,headerOut_e-1	; Read temp header BACKWARDS
(1) 1182/     576 : CF                  		rst	8
(1) 1183/     577 :                     
(1) 1184/     577 :                     	; headerOut:
(1) 1185/     577 :                     	; dc.w numof_chnls
(1) 1186/     577 :                     	; dc.l .blk,.pat,.ins
(1) 1187/     577 :                     	; *** READING BACKWARDS
(1) 1188/     577 : CD B4 05            		call	.grab_rhead		; Instrument data
(1) 1189/     57A : FD 75 20            		ld	(iy+trk_RomInst),l
(1) 1190/     57D : FD 74 21            		ld	(iy+(trk_RomInst+1)),h
(1) 1191/     580 : FD 70 22            		ld	(iy+(trk_RomInst+2)),b
(1) 1192/     583 : FD 36 15 80         		ld	(iy+trk_BankIns),80h	; Reset instrument banking
(1) 1193/     587 : E7                  		rst	20h
(1) 1194/     588 : CF                  		rst	8
(1) 1195/     589 : CD B4 05            		call	.grab_rhead		; Pattern heads
(1) 1196/     58C : FD 75 1D            		ld	(iy+trk_RomPatt),l	; Save ROM patt base
(1) 1197/     58F : FD 74 1E            		ld	(iy+(trk_RomPatt+1)),h
(1) 1198/     592 : FD 70 1F            		ld	(iy+(trk_RomPatt+2)),b
(1) 1199/     595 : FD 36 16 80         		ld	(iy+trk_BankHeads),80h	; Reset pattern banking
(1) 1200/     599 : CF                  		rst	8
(1) 1201/     59A : CD B4 05            		call	.grab_rhead		; Block data
(1) 1202/     59D : FD 75 23            		ld	(iy+trk_RomBlks),l	; Save ROM patt base
(1) 1203/     5A0 : FD 74 24            		ld	(iy+(trk_RomBlks+1)),h
(1) 1204/     5A3 : FD 70 25            		ld	(iy+(trk_RomBlks+2)),b
(1) 1205/     5A6 : FD 36 17 80         		ld	(iy+trk_BankBlk),80h	; Reset pattern banking
(1) 1206/     5AA : CF                  		rst	8
(1) 1207/     5AB : DD 7E 00            		ld	a,(ix)			; dc.w numof_chnls
(1) 1208/     5AE : FD 77 18            		ld	(iy+trk_MaxChnl),a
(1) 1209/     5B1 : C3 2B 04            		jp	.set_track
(1) 1210/     5B4 :                     
(1) 1211/     5B4 :                     ; Read 68K pointer:
(1) 1212/     5B4 :                     ; hl - 00xxxx
(1) 1213/     5B4 :                     ;  b - xx0000
(1) 1214/     5B4 :                     .grab_rhead:
(1) 1215/     5B4 : DD 6E 00            		ld	l,(ix)
(1) 1216/     5B7 : DD 2B               		dec	ix
(1) 1217/     5B9 : DD 66 00            		ld	h,(ix)
(1) 1218/     5BC : CF                  		rst	8
(1) 1219/     5BD : DD 2B               		dec	ix
(1) 1220/     5BF : DD 46 00            		ld	b,(ix)
(1) 1221/     5C2 : DD 2B               		dec	ix
(1) 1222/     5C4 :                     ; 		ld	c,(ix)
(1) 1223/     5C4 : DD 2B               		dec	ix
(1) 1224/     5C6 : C9                  		ret
(1) 1225/     5C7 :                     
(1) 1226/     5C7 :                     ; ----------------------------------------
(1) 1227/     5C7 :                     ; Reset tracker channels
(1) 1228/     5C7 :                     ;
(1) 1229/     5C7 :                     ; iy - Track buffer
(1) 1230/     5C7 :                     ;
(1) 1231/     5C7 :                     ; Breaks:
(1) 1232/     5C7 :                     ; ix
(1) 1233/     5C7 :                     ; ----------------------------------------
(1) 1234/     5C7 :                     
(1) 1235/     5C7 :                     ; ----------------------------------------
(1) 1236/     5C7 :                     ; Reset tracker channels
(1) 1237/     5C7 :                     ;
(1) 1238/     5C7 :                     ; iy - Track buffer
(1) 1239/     5C7 :                     ;
(1) 1240/     5C7 :                     ; Breaks:
(1) 1241/     5C7 :                     ; b ,de,hl,ix
(1) 1242/     5C7 :                     ; ----------------------------------------
(1) 1243/     5C7 :                     
(1) 1244/     5C7 :                     track_out:
(1) 1245/     5C7 : FD E5               		push	iy
(1) 1246/     5C9 : E1                  		pop	hl
(1) 1247/     5CA : DD 21 00 1E         		ld	ix,trkChnls
(1) 1248/     5CE : CF                  		rst	8
(1) 1249/     5CF : 11 26 00            		ld	de,trk_ChnIndx
(1) 1250/     5D2 : 19                  		add	hl,de
(1) 1251/     5D3 : 06 1A               		ld	b,MAX_TRKINDX
(1) 1252/     5D5 :                     .indx_del:
(1) 1253/     5D5 : 7E                  		ld	a,(hl)
(1) 1254/     5D6 : B7                  		or	a
(1) 1255/     5D7 : 28 2A               		jr	z,.nothin
(1) 1256/     5D9 : CF                  		rst	8
(1) 1257/     5DA : DD E5               		push	ix
(1) 1258/     5DC : E6 1F               		and	00011111b
(1) 1259/     5DE : 87                  		add	a,a
(1) 1260/     5DF : 87                  		add	a,a
(1) 1261/     5E0 : 87                  		add	a,a
(1) 1262/     5E1 : 5F                  		ld	e,a
(1) 1263/     5E2 : CF                  		rst	8
(1) 1264/     5E3 : DD 19               		add	ix,de
(1) 1265/     5E5 : AF                  		xor	a
(1) 1266/     5E6 : DD 36 02 FE         		ld	(ix+chnl_Note),-2
(1) 1267/     5EA : DD 36 00 01         		ld	(ix+chnl_Flags),1
(1) 1268/     5EE : DD 36 04 40         		ld	(ix+chnl_Vol),64
(1) 1269/     5F2 : DD 77 05            		ld	(ix+chnl_EffId),a
(1) 1270/     5F5 : CF                  		rst	8
(1) 1271/     5F6 : DD 77 06            		ld	(ix+chnl_EffArg),a
(1) 1272/     5F9 : DD 77 03            		ld	(ix+chnl_Ins),a
(1) 1273/     5FC : DD 77 07            		ld	(ix+chnl_Type),a
(1) 1274/     5FF : DD E1               		pop	ix
(1) 1275/     601 : 77                  		ld	(hl),a
(1) 1276/     602 : 00                  		nop
(1) 1277/     603 :                     .nothin:
(1) 1278/     603 : 23                  		inc	hl
(1) 1279/     604 : 10 CF               		djnz	.indx_del
(1) 1280/     606 : 3E 01               		ld	a,1
(1) 1281/     608 : 32 7D 1C            		ld	(marsUpd),a
(1) 1282/     60B : C9                  		ret
(1) 1283/     60C :                     
(1) 1284/     60C :                     ; ; ----------------------------------------
(1) 1285/     60C :                     ; ; Load tracklist from ROM
(1) 1286/     60C :                     ; ;
(1) 1287/     60C :                     ; ; a - SeqID
(1) 1288/     60C :                     ; ; ----------------------------------------
(1) 1289/     60C :                     ;
(1) 1290/     60C :                     ; get_RomTrcks:
(1) 1291/     60C :                     ; 		ret
(1) 1292/     60C :                     
(1) 1293/     60C :                     ; ============================================================
(1) 1294/     60C :                     ; --------------------------------------------------------
(1) 1295/     60C :                     ; Process track channels to the sound chips
(1) 1296/     60C :                     ; --------------------------------------------------------
(1) 1297/     60C :                     
(1) 1298/     60C :                     set_chips:
(1) 1299/     60C : E7                  		rst	20h			; Refill wave
(1) 1300/     60D : CD 99 0F            		call	get_tick
(1) 1301/     610 : FD 21 64 14         		ld	iy,nikona_BuffList
(1) 1302/     614 :                     .trk_buffrs:
(1) 1303/     614 : FD 7E 00            		ld	a,(iy)
(1) 1304/     617 : FE FF               		cp	-1
(1) 1305/     619 : 28 0F               		jr	z,proc_chips
(1) 1306/     61B : CF                  		rst	8
(1) 1307/     61C : FD E5               		push	iy
(1) 1308/     61E : CD 53 06            		call	tblbuff_read
(1) 1309/     621 : FD E1               		pop	iy
(1) 1310/     623 : 11 08 00            		ld	de,MAX_BUFFNTRY
(1) 1311/     626 : FD 19               		add	iy,de
(1) 1312/     628 : 18 EA               		jr	.trk_buffrs
(1) 1313/     62A :                     proc_chips:
(1) 1314/     62A : E7                  		rst	20h			; Refill wave
(1) 1315/     62B : CF                  		rst	8
(1) 1316/     62C : FD 21 5A 1A         		ld	iy,tblPSGN		; PSG Noise
(1) 1317/     630 : CD 45 08            		call	dtbl_singl
(1) 1318/     633 : CF                  		rst	8
(1) 1319/     634 : FD 21 10 1A         		ld	iy,tblPSG		; PSG Squares
(1) 1320/     638 : CD 2F 08            		call	dtbl_multi
(1) 1321/     63B : CF                  		rst	8
(1) 1322/     63C : FD 21 72 1A         		ld	iy,tblFM		; FM/FM3/DAC
(1) 1323/     640 : CD 2F 08            		call	dtbl_multi
(1) 1324/     643 : CF                  		rst	8
(1) 1325/     644 : FD 21 04 1B         		ld	iy,tblPCM		; SEGA CD PCM
(1) 1326/     648 : CD 2F 08            		call	dtbl_multi
(1) 1327/     64B : CF                  		rst	8
(1) 1328/     64C : FD 21 C6 1B         		ld	iy,tblPWM		; 32X PWM
(1) 1329/     650 : C3 2F 08            		jp	dtbl_multi
(1) 1330/     653 :                     
(1) 1331/     653 :                     ; ----------------------------------------
(1) 1332/     653 :                     ; Read current track
(1) 1333/     653 :                     ;
(1) 1334/     653 :                     ; iy - Buffer
(1) 1335/     653 :                     tblbuff_read:
(1) 1336/     653 : FD 6E 00            		ld	l,(iy)
(1) 1337/     656 : FD 66 01            		ld	h,(iy+1)
(1) 1338/     659 : CD 99 0F            		call	get_tick
(1) 1339/     65C : CF                  		rst	8
(1) 1340/     65D : E5                  		push	hl
(1) 1341/     65E : FD E1               		pop	iy
(1) 1342/     660 : FD 46 00            		ld	b,(iy+trk_Status)	; bit7: Track active?
(1) 1343/     663 : CB 78               		bit	7,b
(1) 1344/     665 : C8                  		ret	z
(1) 1345/     666 : 78                  		ld	a,b			; trk_Status == -1?
(1) 1346/     667 : FE FF               		cp	-1
(1) 1347/     669 : C2 73 06            		jp	nz,.track_cont
(1) 1348/     66C : CD C7 05            		call	track_out
(1) 1349/     66F : FD 36 00 00         		ld	(iy+trk_Status),0
(1) 1350/     673 :                     .track_cont:
(1) 1351/     673 : E7                  		rst	20h
(1) 1352/     674 : FD E5               		push	iy
(1) 1353/     676 : E1                  		pop	hl
(1) 1354/     677 : CF                  		rst	8
(1) 1355/     678 : DD 21 00 1E         		ld	ix,trkChnls
(1) 1356/     67C : 11 26 00            		ld	de,trk_ChnIndx
(1) 1357/     67F : 19                  		add	hl,de
(1) 1358/     680 : FD 7E 18            		ld	a,(iy+trk_MaxChnl)	; If zero, read ALL indexes (lazy mode)
(1) 1359/     683 : B7                  		or	a
(1) 1360/     684 : 20 02               		jr	nz,.valid
(1) 1361/     686 : 06 1A               		ld	b,MAX_TRKINDX
(1) 1362/     688 :                     .valid:
(1) 1363/     688 : CF                  		rst	8
(1) 1364/     689 : 47                  		ld	b,a
(1) 1365/     68A :                     .next_indx:
(1) 1366/     68A : 7E                  		ld	a,(hl)			; Read index
(1) 1367/     68B : B7                  		or	a
(1) 1368/     68C : 20 0B               		jr	nz,.has_indx		; non-zero: valid
(1) 1369/     68E : C5                  		push	bc			; waste CPU to
(1) 1370/     68F : 06 04               		ld	b,4			; ** wave sync
(1) 1371/     691 : 00                  		nop
(1) 1372/     692 : 00                  		nop
(1) 1373/     693 : CF                  		rst	8
(1) 1374/     694 : 10 FE               		djnz	$
(1) 1375/     696 : C1                  		pop	bc
(1) 1376/     697 : 18 1C               		jr	.no_indx
(1) 1377/     699 :                     .has_indx:
(1) 1378/     699 : E6 1F               		and	00011111b
(1) 1379/     69B : 87                  		add	a,a
(1) 1380/     69C : 87                  		add	a,a
(1) 1381/     69D : 87                  		add	a,a
(1) 1382/     69E : CF                  		rst	8
(1) 1383/     69F : 16 00               		ld	d,0
(1) 1384/     6A1 : 5F                  		ld	e,a
(1) 1385/     6A2 : C5                  		push	bc
(1) 1386/     6A3 : E5                  		push	hl
(1) 1387/     6A4 : DD E5               		push	ix
(1) 1388/     6A6 : DD 19               		add	ix,de
(1) 1389/     6A8 : DD 7E 00            		ld	a,(ix)		; Read evin
(1) 1390/     6AB : E6 0F               		and	00001111b
(1) 1391/     6AD : C4 BD 06            		call	nz,.do_chip	; Call if non-zero
(1) 1392/     6B0 : CF                  		rst	8
(1) 1393/     6B1 : DD E1               		pop	ix
(1) 1394/     6B3 : E1                  		pop	hl
(1) 1395/     6B4 : C1                  		pop	bc
(1) 1396/     6B5 :                     .no_indx:
(1) 1397/     6B5 : 23                  		inc	hl
(1) 1398/     6B6 : 10 D2               		djnz	.next_indx
(1) 1399/     6B8 : FD CB 00 9E         		res	3,(iy+trk_Status)	; RESET Volume update bit
(1) 1400/     6BC : C9                  		ret
(1) 1401/     6BD :                     
(1) 1402/     6BD :                     ; ----------------------------------------
(1) 1403/     6BD :                     ; iy - Track buffer
(1) 1404/     6BD :                     ; ix - Current channel
(1) 1405/     6BD :                     
(1) 1406/     6BD :                     .do_chip:
(1) 1407/     6BD : DD 7E 03            		ld	a,(ix+chnl_Ins)		; Check intrument type FIRST
(1) 1408/     6C0 : B7                  		or	a
(1) 1409/     6C1 : C8                  		ret	z			; If 0 == stop
(1) 1410/     6C2 : CF                  		rst	8
(1) 1411/     6C3 : 3D                  		dec	a			; inst-1
(1) 1412/     6C4 : E6 7F               		and	01111111b
(1) 1413/     6C6 : 21 CA 17            		ld	hl,instListOut		; temporal storage for instrument
(1) 1414/     6C9 :                     ; 		ld	d,0
(1) 1415/     6C9 :                     ; 		ld	e,(iy+trk_Priority)
(1) 1416/     6C9 :                     ; 		dec	e			; -1
(1) 1417/     6C9 :                     ; 		rlc	e
(1) 1418/     6C9 :                     ; 		rlc	e
(1) 1419/     6C9 :                     ; 		rlc	e
(1) 1420/     6C9 :                     ; 		add	hl,de
(1) 1421/     6C9 : FD 4E 15            		ld	c,(iy+trk_BankIns)	; c - current intrument loaded
(1) 1422/     6CC : CB 79               		bit	7,c			; First time?
(1) 1423/     6CE : 20 03               		jr	nz,.first_ins
(1) 1424/     6D0 : B9                  		cp	c			; SAME instrument data?
(1) 1425/     6D1 : 28 24               		jr	z,.keep_it
(1) 1426/     6D3 :                     .first_ins:
(1) 1427/     6D3 : E5                  		push	hl
(1) 1428/     6D4 : FD 77 15            		ld	(iy+trk_BankIns),a	; Save inst number
(1) 1429/     6D7 : 07                  		rlca
(1) 1430/     6D8 : 07                  		rlca
(1) 1431/     6D9 : 07                  		rlca
(1) 1432/     6DA : 47                  		ld	b,a
(1) 1433/     6DB : E6 F8               		and	11111000b
(1) 1434/     6DD : 4F                  		ld	c,a
(1) 1435/     6DE : 78                  		ld	a,b
(1) 1436/     6DF : E6 07               		and	00000111b
(1) 1437/     6E1 : CF                  		rst	8
(1) 1438/     6E2 : 47                  		ld	b,a
(1) 1439/     6E3 : EB                  		ex	hl,de
(1) 1440/     6E4 : FD 6E 20            		ld	l,(iy+trk_RomInst)
(1) 1441/     6E7 : FD 66 21            		ld	h,(iy+(trk_RomInst+1))
(1) 1442/     6EA : FD 7E 22            		ld	a,(iy+(trk_RomInst+2))
(1) 1443/     6ED : 09                  		add	hl,bc
(1) 1444/     6EE : CE 00               		adc	a,0
(1) 1445/     6F0 : 01 08 00            		ld	bc,8			; 8 bytes
(1) 1446/     6F3 : CD BA 0F            		call	transferRom		; ** ROM access **
(1) 1447/     6F6 : E1                  		pop	hl
(1) 1448/     6F7 :                     .keep_it:
(1) 1449/     6F7 : E5                  		push	hl			; <-- save hl
(1) 1450/     6F8 : CD 15 07            		call	.grab_link
(1) 1451/     6FB : D1                  		pop	de			; --> recover as de
(1) 1452/     6FC :                     	; hl - current table
(1) 1453/     6FC :                     	; de - instrument data
(1) 1454/     6FC : FE FF               		cp	-1			; Found any link?
(1) 1455/     6FE : C8                  		ret	z
(1) 1456/     6FF : 23                  		inc	hl			; Skip link
(1) 1457/     700 : 23                  		inc	hl
(1) 1458/     701 : FD 7E 14            		ld	a,(iy+trk_Priority)
(1) 1459/     704 : 77                  		ld	(hl),a			; Write priority level
(1) 1460/     705 : 23                  		inc	hl
(1) 1461/     706 : FD 7E 0E            		ld	a,(iy+trk_VolMaster)
(1) 1462/     709 : 77                  		ld	(hl),a			; Write current MASTER volume
(1) 1463/     70A : 01 0D 00            		ld	bc,10h-3		; Move to instr data
(1) 1464/     70D : 09                  		add	hl,bc
(1) 1465/     70E : EB                  		ex	hl,de			; <-- swap for ldir
(1) 1466/     70F : 01 08 00            		ld	bc,8
(1) 1467/     712 : ED B0               		ldir				; COPYPASTE instr data from temporal
(1) 1468/     714 : C9                  		ret
(1) 1469/     715 :                     
(1) 1470/     715 :                     ; ----------------------------------------
(1) 1471/     715 :                     ; Search for a linked channel on the
(1) 1472/     715 :                     ; chip table
(1) 1473/     715 :                     ;
(1) 1474/     715 :                     ; Input:
(1) 1475/     715 :                     ; iy - Track buffer
(1) 1476/     715 :                     ; ix - Current channel
(1) 1477/     715 :                     ; hl - Intrument data
(1) 1478/     715 :                     ;
(1) 1479/     715 :                     ; Returns:
(1) 1480/     715 :                     ; hl - Channel table to use
(1) 1481/     715 :                     ;  a - Return value:
(1) 1482/     715 :                     ;       0 - Found
(1) 1483/     715 :                     ;      -1 - Not found
(1) 1484/     715 :                     ; ----------------------------------------
(1) 1485/     715 :                     
(1) 1486/     715 :                     .grab_link:
(1) 1487/     715 : 7E                  		ld	a,(hl)			; Check INSTRUMENT type
(1) 1488/     716 : E6 F0               		and	11110000b		; Filter bits
(1) 1489/     718 : 5F                  		ld	e,a			; e - NEW chip
(1) 1490/     719 : DD 7E 01            		ld	a,(ix+chnl_Chip)	; a - our current chip
(1) 1491/     71C : E6 F0               		and	11110000b		; Filter bits too.
(1) 1492/     71E : 28 6A               		jr	z,.new_chip		; If 0: It's a NEW chip
(1) 1493/     720 : BB                  		cp 	e			; Same chip as NEW?
(1) 1494/     721 : 28 10               		jr	z,.srch_link		; then re-use the slot
(1) 1495/     723 : CF                  		rst	8
(1) 1496/     724 : 57                  		ld	d,a			; d - Chip to silence
(1) 1497/     725 : D5                  		push	de
(1) 1498/     726 : CD 33 07            		call	.srch_link		; Search our link (first)
(1) 1499/     729 : D1                  		pop	de
(1) 1500/     72A : FE FF               		cp	-1
(1) 1501/     72C : C8                  		ret	z
(1) 1502/     72D : CF                  		rst	8
(1) 1503/     72E : CD 14 08            		call	.reset_link
(1) 1504/     731 : 18 57               		jr	.new_chip
(1) 1505/     733 :                     
(1) 1506/     733 :                     ; ----------------------------------------
(1) 1507/     733 :                     ; ** RELINK **
(1) 1508/     733 :                     ; e - Our current chip
(1) 1509/     733 :                     .srch_link:
(1) 1510/     733 : CD FA 07            		call	.pick_tbl	; Pick chip table in hl
(1) 1511/     736 : DD E5               		push	ix		; copy ix to bc
(1) 1512/     738 : C1                  		pop	bc
(1) 1513/     739 : B7                  		or	a
(1) 1514/     73A : FA 7A 07            		jp	m,.singl_link
(1) 1515/     73D :                     .srch_lloop:
(1) 1516/     73D : 7E                  		ld	a,(hl)		; Read LSB
(1) 1517/     73E : FE FF               		cp	-1		; If -1, return -1
(1) 1518/     740 : 28 45               		jr	z,.refill
(1) 1519/     742 : B9                  		cp	c
(1) 1520/     743 : 20 07               		jr	nz,.invldl
(1) 1521/     745 : CF                  		rst	8
(1) 1522/     746 : 23                  		inc	hl
(1) 1523/     747 : 7E                  		ld	a,(hl)
(1) 1524/     748 : 2B                  		dec	hl
(1) 1525/     749 : B8                  		cp	b
(1) 1526/     74A : 28 08               		jr	z,.reroll
(1) 1527/     74C :                     .invldl:
(1) 1528/     74C : D5                  		push	de
(1) 1529/     74D : 11 18 00            		ld	de,MAX_TBLSIZE
(1) 1530/     750 :                     ; 		rst	8
(1) 1531/     750 :                     ; 		nop	; wave sync *
(1) 1532/     750 : 19                  		add	hl,de
(1) 1533/     751 : D1                  		pop	de
(1) 1534/     752 : 18 E9               		jr	.srch_lloop
(1) 1535/     754 :                     .reroll:
(1) 1536/     754 :                     	; *** Special re-roll check ***
(1) 1537/     754 : E5                  		push	hl
(1) 1538/     755 : 01 04 00            		ld	bc,4		; <-- fake iy+04h
(1) 1539/     758 : 09                  		add	hl,bc
(1) 1540/     759 : CF                  		rst	8
(1) 1541/     75A : 4E                  		ld	c,(hl)		; c - ID
(1) 1542/     75B : E1                  		pop	hl
(1) 1543/     75C : 7B                  		ld	a,e
(1) 1544/     75D : FE 80               		cp	80h		; PSG?
(1) 1545/     75F : 28 02               		jr	z,.chk_psg
(1) 1546/     761 :                     ; 		cp	0A0h		; FM normal?
(1) 1547/     761 :                     ; 		jr	z,.chk_fm
(1) 1548/     761 : 18 22               		jr	.rnot_psg
(1) 1549/     763 :                     .chk_psg:
(1) 1550/     763 : 3A 73 1C            		ld	a,(psgHatMode)
(1) 1551/     766 : E6 03               		and	011b
(1) 1552/     768 : FE 03               		cp	011b
(1) 1553/     76A : 20 19               		jr	nz,.rnot_psg
(1) 1554/     76C : 79                  		ld	a,c
(1) 1555/     76D : FE 02               		cp	2
(1) 1556/     76F : 20 14               		jr	nz,.rnot_psg
(1) 1557/     771 : CF                  		rst	8
(1) 1558/     772 : 16 80               		ld	d,80h		; Set PSG silence
(1) 1559/     774 : CD 14 08            		call	.reset_link	; on PSG3
(1) 1560/     777 : C3 F7 07            		jp	.set_asfull
(1) 1561/     77A :                     
(1) 1562/     77A :                     ; ----------------------
(1) 1563/     77A :                     ; PSGN/FM3/FM6
(1) 1564/     77A :                     .singl_link:
(1) 1565/     77A : 23                  		inc	hl			; Read MSB first
(1) 1566/     77B : 7E                  		ld	a,(hl)
(1) 1567/     77C : 2B                  		dec	hl
(1) 1568/     77D : CF                  		rst	8
(1) 1569/     77E : B8                  		cp	b			; MSB match?
(1) 1570/     77F : 20 06               		jr	nz,.refill
(1) 1571/     781 : 7E                  		ld	a,(hl)			; Read LSB
(1) 1572/     782 : B9                  		cp	c
(1) 1573/     783 : 20 02               		jr	nz,.refill
(1) 1574/     785 :                     ; ----------------------
(1) 1575/     785 :                     .rnot_psg:
(1) 1576/     785 : AF                  		xor	a
(1) 1577/     786 : C9                  		ret
(1) 1578/     787 :                     ; ***
(1) 1579/     787 :                     .refill:
(1) 1580/     787 : DD 5E 01            		ld	e,(ix+chnl_Chip)
(1) 1581/     78A :                     
(1) 1582/     78A :                     ; ----------------------------------------
(1) 1583/     78A :                     ; *** NEW CHIP ***
(1) 1584/     78A :                     ; e - Chip to set
(1) 1585/     78A :                     .new_chip:
(1) 1586/     78A : 7B                  		ld	a,e			; Read NEW chip
(1) 1587/     78B : B7                  		or	a			; If non-minus, exit.
(1) 1588/     78C : F0                  		ret	p
(1) 1589/     78D : CD FA 07            		call	.pick_tbl
(1) 1590/     790 : CF                  		rst	8
(1) 1591/     791 : FD 4E 14            		ld	c,(iy+trk_Priority)	; c - OUR priority level
(1) 1592/     794 : B7                  		or	a
(1) 1593/     795 : FA E5 07            		jp	m,.singl_free
(1) 1594/     798 : E5                  		push	hl			; Backup START table
(1) 1595/     799 :                     ; PASS 1
(1) 1596/     799 :                     .srch_free:
(1) 1597/     799 : 7E                  		ld	a,(hl)			; Read LSB
(1) 1598/     79A : FE FF               		cp	-1			; If -1, return -1
(1) 1599/     79C : 28 0B               		jr	z,.pass_2
(1) 1600/     79E : 23                  		inc	hl
(1) 1601/     79F : 46                  		ld	b,(hl)			; Read MSB
(1) 1602/     7A0 : 2B                  		dec	hl
(1) 1603/     7A1 :                     ; 		nop	; wave sync
(1) 1604/     7A1 :                     ; 		nop
(1) 1605/     7A1 :                     ; 		rst	8
(1) 1606/     7A1 :                     ; 		nop
(1) 1607/     7A1 :                     ; 		nop
(1) 1608/     7A1 : B0                  		or	b
(1) 1609/     7A2 : 28 24               		jr	z,.new_link_z
(1) 1610/     7A4 : CD C1 07            		call	.nextsrch_tbl
(1) 1611/     7A7 : 18 F0               		jr	.srch_free
(1) 1612/     7A9 :                     
(1) 1613/     7A9 :                     ; PASS 2
(1) 1614/     7A9 :                     ; Rewrite mode
(1) 1615/     7A9 :                     .pass_2:
(1) 1616/     7A9 : E1                  		pop	hl
(1) 1617/     7AA :                     .next_prio:
(1) 1618/     7AA : 7E                  		ld	a,(hl)		; Read LSB
(1) 1619/     7AB : FE FF               		cp	-1		; If -1, return -1
(1) 1620/     7AD : C8                  		ret	z
(1) 1621/     7AE : 23                  		inc	hl
(1) 1622/     7AF : 23                  		inc	hl
(1) 1623/     7B0 : 7E                  		ld	a,(hl)		; Read priority
(1) 1624/     7B1 : 2B                  		dec	hl
(1) 1625/     7B2 : 2B                  		dec	hl
(1) 1626/     7B3 : B9                  		cp	c
(1) 1627/     7B4 : 28 16               		jr	z,.new_link_o
(1) 1628/     7B6 : 38 14               		jr	c,.new_link_o
(1) 1629/     7B8 : B7                  		or	a
(1) 1630/     7B9 : 28 11               		jr	z,.new_link_o
(1) 1631/     7BB : CF                  		rst	8
(1) 1632/     7BC : CD C1 07            		call	.nextsrch_tbl
(1) 1633/     7BF : 18 E9               		jr	.next_prio
(1) 1634/     7C1 :                     .nextsrch_tbl:
(1) 1635/     7C1 : D5                  		push	de
(1) 1636/     7C2 : 11 18 00            		ld	de,MAX_TBLSIZE
(1) 1637/     7C5 : 19                  		add	hl,de
(1) 1638/     7C6 : D1                  		pop	de
(1) 1639/     7C7 :                     ; 		nop	; wave sync
(1) 1640/     7C7 :                     ; 		nop
(1) 1641/     7C7 :                     ; 		rst	8
(1) 1642/     7C7 :                     ; 		nop
(1) 1643/     7C7 :                     ; 		nop
(1) 1644/     7C7 : C9                  		ret
(1) 1645/     7C8 :                     .new_link_z:
(1) 1646/     7C8 : 33                  		inc	sp		; skip backup
(1) 1647/     7C9 : 33                  		inc	sp
(1) 1648/     7CA : 18 08               		jr	.new_link
(1) 1649/     7CC :                     
(1) 1650/     7CC :                     ; OVERWRITE link
(1) 1651/     7CC :                     .new_link_o:
(1) 1652/     7CC : E5                  		push	hl
(1) 1653/     7CD : DD 56 01            		ld	d,(ix+chnl_Chip)
(1) 1654/     7D0 : CD 14 08            		call	.reset_link
(1) 1655/     7D3 : E1                  		pop	hl
(1) 1656/     7D4 :                     ; NEW link
(1) 1657/     7D4 :                     .new_link:
(1) 1658/     7D4 : CF                  		rst	8
(1) 1659/     7D5 : 23                  		inc	hl
(1) 1660/     7D6 : 23                  		inc	hl
(1) 1661/     7D7 :                     ; hl+2
(1) 1662/     7D7 :                     .l_hiprio:
(1) 1663/     7D7 : DD 73 01            		ld	(ix+chnl_Chip),e
(1) 1664/     7DA : DD E5               		push	ix
(1) 1665/     7DC : D1                  		pop	de
(1) 1666/     7DD : 71                  		ld	(hl),c		; write priority
(1) 1667/     7DE : 2B                  		dec	hl
(1) 1668/     7DF : CF                  		rst	8
(1) 1669/     7E0 : 72                  		ld 	(hl),d		; MSB
(1) 1670/     7E1 : 2B                  		dec	hl
(1) 1671/     7E2 : 73                  		ld	(hl),e		; LSB
(1) 1672/     7E3 : AF                  		xor	a
(1) 1673/     7E4 : C9                  		ret
(1) 1674/     7E5 :                     
(1) 1675/     7E5 :                     ; Single slot
(1) 1676/     7E5 :                     ; c - priority
(1) 1677/     7E5 :                     ; e - chip
(1) 1678/     7E5 :                     .singl_free:
(1) 1679/     7E5 : 46                  		ld	b,(hl)
(1) 1680/     7E6 : 23                  		inc	hl
(1) 1681/     7E7 : 7E                  		ld	a,(hl)
(1) 1682/     7E8 : 23                  		inc	hl
(1) 1683/     7E9 : B0                  		or	b
(1) 1684/     7EA : 28 EB               		jr	z,.l_hiprio
(1) 1685/     7EC : CF                  		rst	8
(1) 1686/     7ED : 7E                  		ld	a,(hl)
(1) 1687/     7EE : B9                  		cp	c
(1) 1688/     7EF : 28 E6               		jr	z,.l_hiprio
(1) 1689/     7F1 : 38 E4               		jr	c,.l_hiprio		; PRIORITY
(1) 1690/     7F3 : B7                  		or	a
(1) 1691/     7F4 : 28 E1               		jr	z,.l_hiprio
(1) 1692/     7F6 : CF                  		rst	8
(1) 1693/     7F7 :                     .set_asfull:
(1) 1694/     7F7 : 3E FF               		ld	a,-1			; Return -1, can't use instrument.
(1) 1695/     7F9 : C9                  		ret
(1) 1696/     7FA :                     
(1) 1697/     7FA :                     ; Pick chip table
(1) 1698/     7FA :                     ; In:
(1) 1699/     7FA :                     ;  a - ID
(1) 1700/     7FA :                     ;
(1) 1701/     7FA :                     ; Out:
(1) 1702/     7FA :                     ;  a - Special bit + ID
(1) 1703/     7FA :                     ;
(1) 1704/     7FA :                     ; hl - Table
(1) 1705/     7FA :                     .pick_tbl:
(1) 1706/     7FA : D5                  		push	de
(1) 1707/     7FB : 0F                  		rrca
(1) 1708/     7FC : 0F                  		rrca
(1) 1709/     7FD : 0F                  		rrca
(1) 1710/     7FE : 0F                  		rrca
(1) 1711/     7FF : E6 07               		and	00000111b
(1) 1712/     801 : 87                  		add	a,a
(1) 1713/     802 : 21 00 1A            		ld	hl,tblList
(1) 1714/     805 : E5                  		push	hl
(1) 1715/     806 : 16 00               		ld	d,0
(1) 1716/     808 : 5F                  		ld	e,a
(1) 1717/     809 : 19                  		add	hl,de
(1) 1718/     80A : 5E                  		ld	e,(hl)
(1) 1719/     80B : 23                  		inc	hl
(1) 1720/     80C : 7E                  		ld	a,(hl)
(1) 1721/     80D : 57                  		ld	d,a
(1) 1722/     80E : CB BA               		res	7,d
(1) 1723/     810 : E1                  		pop	hl
(1) 1724/     811 : 19                  		add	hl,de
(1) 1725/     812 : D1                  		pop	de
(1) 1726/     813 : C9                  		ret
(1) 1727/     814 :                     
(1) 1728/     814 :                     ; d - Silence chip
(1) 1729/     814 :                     ;
(1) 1730/     814 :                     ; Uses:
(1) 1731/     814 :                     ; bc
(1) 1732/     814 :                     .reset_link:
(1) 1733/     814 : CF                  		rst	8
(1) 1734/     815 : 36 00               		ld	(hl),0			; Delete link
(1) 1735/     817 : 23                  		inc	hl
(1) 1736/     818 : 36 00               		ld	(hl),0
(1) 1737/     81A : 23                  		inc	hl
(1) 1738/     81B : 72                  		ld	(hl),d			; Set "silence" chip ID.
(1) 1739/     81C : 23                  		inc	hl
(1) 1740/     81D : 36 00               		ld	(hl),0			; Clear master volume
(1) 1741/     81F : 01 05 00            		ld	bc,8-3			; Go to 08h
(1) 1742/     822 : 09                  		add	hl,bc
(1) 1743/     823 : 06 04               		ld	b,8/2
(1) 1744/     825 :                     .clrfull:
(1) 1745/     825 : 36 00               		ld	(hl),0			; Reset settings 08-0Bh
(1) 1746/     827 : 23                  		inc	hl
(1) 1747/     828 : 36 00               		ld	(hl),0
(1) 1748/     82A : 23                  		inc	hl
(1) 1749/     82B : CF                  		rst	8
(1) 1750/     82C : 10 F7               		djnz	.clrfull
(1) 1751/     82E : C9                  		ret
(1) 1752/     82F :                     
(1) 1753/     82F :                     ; ============================================
(1) 1754/     82F :                     ; ----------------------------------------
(1) 1755/     82F :                     ; Process chip using it's table
(1) 1756/     82F :                     ;
(1) 1757/     82F :                     ; iy - table to read
(1) 1758/     82F :                     ; ----------------------------------------
(1) 1759/     82F :                     
(1) 1760/     82F :                     dtbl_multi:
(1) 1761/     82F : FD 7E 00            		ld	a,(iy)
(1) 1762/     832 : FE FF               		cp	-1
(1) 1763/     834 : C8                  		ret	z
(1) 1764/     835 : CD 45 08            		call	dtbl_singl
(1) 1765/     838 : CF                  		rst	8
(1) 1766/     839 : 11 18 00            		ld	de,MAX_TBLSIZE
(1) 1767/     83C : FD 19               		add	iy,de
(1) 1768/     83E : 06 03               		ld	b,3	; wave sync ** IMPORTANT **
(1) 1769/     840 : 10 FE               		djnz	$
(1) 1770/     842 : CF                  		rst	8
(1) 1771/     843 : 18 EA               		jr	dtbl_multi
(1) 1772/     845 :                     dtbl_singl:
(1) 1773/     845 : FD 5E 00            		ld	e,(iy)		; Read link
(1) 1774/     848 : FD 56 01            		ld	d,(iy+1)
(1) 1775/     84B : 7A                  		ld	a,d		; If no-zero, active
(1) 1776/     84C : B3                  		or	e
(1) 1777/     84D : 20 60               		jr	nz,.linked
(1) 1778/     84F : FD 7E 02            		ld	a,(iy+2)	; Silence request?
(1) 1779/     852 : B7                  		or	a
(1) 1780/     853 : F0                  		ret	p		; Return if not.
(1) 1781/     854 : CF                  		rst	8
(1) 1782/     855 : FD 36 02 00         		ld	(iy+2),0	; Reset request on memory
(1) 1783/     859 :                     
(1) 1784/     859 :                     ; ----------------------------------------
(1) 1785/     859 :                     ; chip-silence request
(1) 1786/     859 :                     ; iy - Table
(1) 1787/     859 : E6 F0               		and	11110000b
(1) 1788/     85B : FE 80               		cp	80h
(1) 1789/     85D : 28 1E               		jr	z,.siln_psg
(1) 1790/     85F : FE 90               		cp	90h
(1) 1791/     861 : 28 16               		jr	z,.siln_psg_n
(1) 1792/     863 : FE A0               		cp	0A0h
(1) 1793/     865 : 28 42               		jr	z,.siln_fm
(1) 1794/     867 : FE B0               		cp	0B0h
(1) 1795/     869 : 28 3E               		jr	z,.siln_fm
(1) 1796/     86B : CF                  		rst	8
(1) 1797/     86C : FE C0               		cp	0C0h
(1) 1798/     86E : 28 36               		jr	z,.siln_dac
(1) 1799/     870 : FE D0               		cp	0D0h
(1) 1800/     872 : 28 10               		jr	z,.siln_pcm
(1) 1801/     874 : FE E0               		cp	0E0h
(1) 1802/     876 : 28 18               		jr	z,.siln_pwm
(1) 1803/     878 : C9                  		ret
(1) 1804/     879 :                     .siln_psg_n:
(1) 1805/     879 : AF                  		xor	a
(1) 1806/     87A : 32 73 1C            		ld	(psgHatMode),a
(1) 1807/     87D :                     .siln_psg:
(1) 1808/     87D : CF                  		rst	8
(1) 1809/     87E : DD 21 FE 14         		ld	ix,psgcom
(1) 1810/     882 : 18 16               		jr	.rcyl_com
(1) 1811/     884 :                     
(1) 1812/     884 :                     ; --------------------------------
(1) 1813/     884 :                     
(1) 1814/     884 :                     .siln_pcm:
(1) 1815/     884 : 3E 01               		ld	a,1
(1) 1816/     886 : 32 7E 1C            		ld	(mcdUpd),a
(1) 1817/     889 : CF                  		rst	8
(1) 1818/     88A : DD 21 86 14         		ld	ix,pcmcom
(1) 1819/     88E : 18 0A               		jr	.rcyl_com
(1) 1820/     890 :                     .siln_pwm:
(1) 1821/     890 : 3E 01               		ld	a,1
(1) 1822/     892 : 32 7D 1C            		ld	(marsUpd),a
(1) 1823/     895 : CF                  		rst	8
(1) 1824/     896 : DD 21 C6 14         		ld	ix,pwmcom
(1) 1825/     89A :                     ; 		jr	.rcyl_com
(1) 1826/     89A :                     
(1) 1827/     89A :                     ; --------------------------------
(1) 1828/     89A :                     
(1) 1829/     89A :                     .rcyl_com:
(1) 1830/     89A : 06 00               		ld	b,0
(1) 1831/     89C : FD 4E 04            		ld	c,(iy+04h)
(1) 1832/     89F : DD 09               		add	ix,bc
(1) 1833/     8A1 : DD 36 00 04         		ld	(ix),100b	; key-cut
(1) 1834/     8A5 : C9                  		ret
(1) 1835/     8A6 :                     
(1) 1836/     8A6 :                     ; --------------------------------
(1) 1837/     8A6 :                     
(1) 1838/     8A6 :                     .siln_dac:
(1) 1839/     8A6 : CD 04 12            		call	dac_off
(1) 1840/     8A9 :                     .siln_fm:
(1) 1841/     8A9 : CD 7C 0A            		call	.fm_keyoff
(1) 1842/     8AC : C3 84 0A            		jp	.fm_tloff
(1) 1843/     8AF :                     
(1) 1844/     8AF :                     ; ----------------------------------------
(1) 1845/     8AF :                     ; Process channel now
(1) 1846/     8AF :                     ; iy - Table
(1) 1847/     8AF :                     ; ix - Tracker channel
(1) 1848/     8AF :                     .linked:
(1) 1849/     8AF : 1A                  		ld	a,(de)		; ** chnl_Flags
(1) 1850/     8B0 : 47                  		ld	b,a		; b - flags to check
(1) 1851/     8B1 : E6 0F               		and	00001111b	; evin flags?
(1) 1852/     8B3 : C8                  		ret	z
(1) 1853/     8B4 : 78                  		ld	a,b
(1) 1854/     8B5 : E6 F0               		and	11110000b	; Keep OTHER bits
(1) 1855/     8B7 : 12                  		ld	(de),a		; ** clear chnl_Flags
(1) 1856/     8B8 : D5                  		push	de
(1) 1857/     8B9 : DD E1               		pop	ix
(1) 1858/     8BB : FD E5               		push	iy		; table+10h instrment data
(1) 1859/     8BD : E1                  		pop	hl
(1) 1860/     8BE : 11 10 00            		ld	de,10h
(1) 1861/     8C1 : 19                  		add	hl,de
(1) 1862/     8C2 :                     	;  b - Flags LR00evin (Eff|Vol|Ins|Note)
(1) 1863/     8C2 :                     	; iy - Our chip table
(1) 1864/     8C2 :                     	; ix - Track channel
(1) 1865/     8C2 :                     	; hl - Intrument data
(1) 1866/     8C2 : CB 40               		bit	0,b		; Note
(1) 1867/     8C4 : C4 9B 0E            		call	nz,.note
(1) 1868/     8C7 : CB 48               		bit	1,b		; Intrument
(1) 1869/     8C9 : C4 EA 0C            		call	nz,.inst
(1) 1870/     8CC : CF                  		rst	8
(1) 1871/     8CD : CB 50               		bit	2,b		; Volume
(1) 1872/     8CF : C4 E1 0C            		call	nz,.volu
(1) 1873/     8D2 : CB 58               		bit	3,b		; Effect
(1) 1874/     8D4 : C4 DF 0B            		call	nz,.effc
(1) 1875/     8D7 : 7E                  		ld	a,(hl)		; Read INS type
(1) 1876/     8D8 : E6 70               		and	01110000b	; Filter bits
(1) 1877/     8DA : 0F                  		rrca
(1) 1878/     8DB : 0F                  		rrca
(1) 1879/     8DC : 0F                  		rrca
(1) 1880/     8DD : CF                  		rst	8
(1) 1881/     8DE : 16 00               		ld	d,0
(1) 1882/     8E0 : 5F                  		ld	e,a
(1) 1883/     8E1 : 21 EA 08            		ld	hl,.mk_list
(1) 1884/     8E4 : 19                  		add	hl,de
(1) 1885/     8E5 : 7E                  		ld	a,(hl)
(1) 1886/     8E6 : 23                  		inc	hl
(1) 1887/     8E7 : 66                  		ld	h,(hl)
(1) 1888/     8E8 : 6F                  		ld	l,a
(1) 1889/     8E9 : E9                  		jp	(hl)
(1) 1890/     8EA :                     ; --------------------------------
(1) 1891/     8EA :                     .mk_list:
(1) 1892/     8EA : 1E 09               		dw .mk_psg
(1) 1893/     8EC : F8 08               		dw .mk_psgn
(1) 1894/     8EE : 9C 09               		dw .mk_fm
(1) 1895/     8F0 : 12 0A               		dw .mk_fmspc
(1) 1896/     8F2 : 66 0B               		dw .mk_dac
(1) 1897/     8F4 : BD 0B               		dw .mk_pcm
(1) 1898/     8F6 : BE 0B               		dw .mk_pwm
(1) 1899/     8F8 :                     
(1) 1900/     8F8 :                     ; --------------------------------
(1) 1901/     8F8 :                     ; PSGN
(1) 1902/     8F8 :                     ; --------------------------------
(1) 1903/     8F8 :                     
(1) 1904/     8F8 :                     .mk_psgn:
(1) 1905/     8F8 : CB 40               		bit	0,b
(1) 1906/     8FA : 28 6A               		jr	z,.psg_keyon
(1) 1907/     8FC : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 1908/     8FF : DD E5               		push	ix
(1) 1909/     901 : DD 21 01 15         		ld	ix,psgcom+3	; Steal PSG3
(1) 1910/     905 : CF                  		rst	8
(1) 1911/     906 : FE FE               		cp	-2
(1) 1912/     908 : 28 7E               		jr	z,.kycut_psgn
(1) 1913/     90A : FE FF               		cp	-1
(1) 1914/     90C : 28 6D               		jr	z,.kyoff_psgn
(1) 1915/     90E : DD 36 00 01         		ld	(ix+COM),001b	; Key ON
(1) 1916/     912 : 5F                  		ld	e,a
(1) 1917/     913 : 3A 73 1C            		ld	a,(psgHatMode)	; Tone 3?
(1) 1918/     916 : E6 03               		and	011b
(1) 1919/     918 : FE 03               		cp	011b
(1) 1920/     91A : 20 4A               		jr	nz,.psg_keyon	; Normal
(1) 1921/     91C : 18 21               		jr	.from_psgn	; Tone 3
(1) 1922/     91E :                     
(1) 1923/     91E :                     ; --------------------------------
(1) 1924/     91E :                     ; PSG
(1) 1925/     91E :                     ; --------------------------------
(1) 1926/     91E :                     
(1) 1927/     91E :                     .mk_psg:
(1) 1928/     91E : CB 40               		bit	0,b
(1) 1929/     920 : 28 44               		jr	z,.psg_keyon
(1) 1930/     922 : CF                  		rst	8
(1) 1931/     923 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 1932/     926 : DD E5               		push	ix
(1) 1933/     928 : DD 21 FE 14         		ld	ix,psgcom	; ix - psgcom
(1) 1934/     92C : FD 5E 04            		ld	e,(iy+04h)
(1) 1935/     92F : 16 00               		ld	d,0
(1) 1936/     931 : DD 19               		add	ix,de
(1) 1937/     933 : FE FE               		cp	-2
(1) 1938/     935 : 28 54               		jr	z,.kycut_psg
(1) 1939/     937 : FE FF               		cp	-1
(1) 1940/     939 : 28 43               		jr	z,.kyoff_psg
(1) 1941/     93B : DD 36 00 01         		ld	(ix+COM),001b	; Key ON
(1) 1942/     93F :                     .from_psgn:
(1) 1943/     93F : CF                  		rst	8
(1) 1944/     940 : 16 00               		ld	d,0		; de - note*2
(1) 1945/     942 : FD 5E 06            		ld	e,(iy+06h)	; Freq index
(1) 1946/     945 : 21 FC 12            		ld	hl,psgFreq_List-(36*2)
(1) 1947/     948 : 19                  		add	hl,de
(1) 1948/     949 : 7E                  		ld	a,(hl)
(1) 1949/     94A : 23                  		inc	hl
(1) 1950/     94B : 66                  		ld	h,(hl)
(1) 1951/     94C : 6F                  		ld	l,a
(1) 1952/     94D : FD 7E 07            		ld	a,(iy+07h)	; pitchbend
(1) 1953/     950 : 07                  		rlca			; << 3
(1) 1954/     951 : 07                  		rlca
(1) 1955/     952 : CF                  		rst	8
(1) 1956/     953 : 07                  		rlca
(1) 1957/     954 : 57                  		ld	d,a
(1) 1958/     955 : E6 F8               		and	11111000b
(1) 1959/     957 : 5F                  		ld	e,a
(1) 1960/     958 : 7A                  		ld	a,d
(1) 1961/     959 : E6 07               		and	00000111b
(1) 1962/     95B : 57                  		ld	d,a
(1) 1963/     95C : 37                  		scf
(1) 1964/     95D : 3F                  		ccf
(1) 1965/     95E : ED 52               		sbc	hl,de
(1) 1966/     960 : DD 75 1C            		ld	(ix+DTL),l
(1) 1967/     963 : DD 74 20            		ld	(ix+DTH),h
(1) 1968/     966 :                     .psg_keyon:
(1) 1969/     966 : FD 7E 08            		ld	a,(iy+08h)	; Set current Volume
(1) 1970/     969 : FD 96 03            		sub	a,(iy+03h)	; + MASTER vol
(1) 1971/     96C : ED 44               		neg	a
(1) 1972/     96E : CF                  		rst	8
(1) 1973/     96F : 87                  		add	a,a
(1) 1974/     970 : 87                  		add	a,a
(1) 1975/     971 : 30 02               		jr	nc,.vmuch
(1) 1976/     973 : 3E FF               		ld	a,-1
(1) 1977/     975 :                     .vmuch:
(1) 1978/     975 : DD 77 30            		ld	(ix+PVOL),a
(1) 1979/     978 : DD E1               		pop	ix
(1) 1980/     97A : C9                  		ret
(1) 1981/     97B :                     
(1) 1982/     97B :                     ; --------------------------------
(1) 1983/     97B :                     
(1) 1984/     97B :                     ; -1
(1) 1985/     97B :                     .kyoff_psgn:
(1) 1986/     97B : CD 95 09            		call	.kypsgn_hatoff
(1) 1987/     97E :                     .kyoff_psg:
(1) 1988/     97E : 0E 02               		ld	c,010b
(1) 1989/     980 : DD 71 00            		ld	(ix),c
(1) 1990/     983 : DD E1               		pop	ix
(1) 1991/     985 : C3 11 0F            		jp	.chnl_ulnkoff
(1) 1992/     988 :                     ; -2
(1) 1993/     988 :                     .kycut_psgn:
(1) 1994/     988 : CD 95 09            		call	.kypsgn_hatoff
(1) 1995/     98B :                     .kycut_psg:
(1) 1996/     98B : 0E 04               		ld	c,100b
(1) 1997/     98D : DD 71 00            		ld	(ix),c
(1) 1998/     990 : DD E1               		pop	ix
(1) 1999/     992 : C3 0B 0F            		jp	.chnl_ulnkcut
(1) 2000/     995 :                     .kypsgn_hatoff:
(1) 2001/     995 : 3E 00               		ld	a,000b
(1) 2002/     997 : 32 73 1C            		ld	(psgHatMode),a	; ** GLOBAL SETTING
(1) 2003/     99A : CF                  		rst	8
(1) 2004/     99B : C9                  		ret
(1) 2005/     99C :                     
(1) 2006/     99C :                     ; --------------------------------
(1) 2007/     99C :                     ; FM
(1) 2008/     99C :                     ; --------------------------------
(1) 2009/     99C :                     
(1) 2010/     99C :                     .mk_fm:
(1) 2011/     99C : CB 40               		bit	0,b		; NEW note?
(1) 2012/     99E : 28 5E               		jr	z,.mkfm_set
(1) 2013/     9A0 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 2014/     9A3 : FE FE               		cp	-2
(1) 2015/     9A5 : CA 73 0A            		jp	z,.fm_cut
(1) 2016/     9A8 : FE FF               		cp	-1
(1) 2017/     9AA : CA 6D 0A            		jp	z,.fm_off
(1) 2018/     9AD :                     ; 		call	.fm_tloff
(1) 2019/     9AD : CF                  		rst	8
(1) 2020/     9AE : FD 4E 04            		ld	c,(iy+04h)	; c - KeyID
(1) 2021/     9B1 : 79                  		ld	a,c
(1) 2022/     9B2 : FE 06               		cp	6
(1) 2023/     9B4 : 20 05               		jr	nz,.not_dac
(1) 2024/     9B6 : CD 04 12            		call	dac_off
(1) 2025/     9B9 : 18 15               		jr	.not_dspc
(1) 2026/     9BB :                     .not_dac:
(1) 2027/     9BB :                     ; 		ld	a,c
(1) 2028/     9BB : FE 02               		cp	2
(1) 2029/     9BD : 20 11               		jr	nz,.not_dspc
(1) 2030/     9BF : 3A 74 1C            		ld	a,(fmSpecial)
(1) 2031/     9C2 : B7                  		or	a
(1) 2032/     9C3 : 28 0B               		jr	z,.not_dspc
(1) 2033/     9C5 : 11 00 27            		ld	de,2700h	; CH3 off
(1) 2034/     9C8 : CD D9 11            		call	fm_send_1
(1) 2035/     9CB : 3E 00               		ld	a,0
(1) 2036/     9CD : 32 74 1C            		ld	(fmSpecial),a
(1) 2037/     9D0 :                     .not_dspc:
(1) 2038/     9D0 : CD 7C 0A            		call	.fm_keyoff
(1) 2039/     9D3 : C5                  		push	bc
(1) 2040/     9D4 : FD 7E 06            		ld	a,(iy+06h)
(1) 2041/     9D7 : 47                  		ld	b,a
(1) 2042/     9D8 : E6 1F               		and	00011111b
(1) 2043/     9DA : 5F                  		ld	e,a
(1) 2044/     9DB : 16 00               		ld	d,0
(1) 2045/     9DD : 21 2C 13            		ld	hl,fmFreq_List
(1) 2046/     9E0 : 19                  		add	hl,de
(1) 2047/     9E1 : 7E                  		ld	a,(hl)
(1) 2048/     9E2 : CF                  		rst	8
(1) 2049/     9E3 : 23                  		inc	hl
(1) 2050/     9E4 : 66                  		ld	h,(hl)
(1) 2051/     9E5 : 6F                  		ld	l,a
(1) 2052/     9E6 : 78                  		ld	a,b
(1) 2053/     9E7 : E6 E0               		and	11100000b
(1) 2054/     9E9 : 0F                  		rrca
(1) 2055/     9EA : 0F                  		rrca
(1) 2056/     9EB : B4                  		or	h
(1) 2057/     9EC : 67                  		ld	h,a
(1) 2058/     9ED : FD 5E 07            		ld	e,(iy+07h)	; pitchbend
(1) 2059/     9F0 : CF                  		rst	8
(1) 2060/     9F1 : AF                  		xor	a		; Clear high
(1) 2061/     9F2 : 3F                  		ccf			; Clear carry
(1) 2062/     9F3 : CB 23               		sla	e		; << 2
(1) 2063/     9F5 : CB 23               		sla	e
(1) 2064/     9F7 : 9F                  		sbc	a,a		; -1 if carry is set
(1) 2065/     9F8 : 57                  		ld	d,a
(1) 2066/     9F9 : 19                  		add	hl,de
(1) 2067/     9FA : CD 9B 0A            		call	.fm_setfreq
(1) 2068/     9FD : C1                  		pop	bc
(1) 2069/     9FE :                     
(1) 2070/     9FE :                     ; --------------------------------
(1) 2071/     9FE :                     
(1) 2072/     9FE :                     .mkfm_set:
(1) 2076/     9FE : CD 30 0B            		call	.fm_wrtalpan	; Panning and effects
(1) 2077/     A01 : CD B2 0A            		call	.fm_wrtlvol	; FM volume control
(1) 2078/     A04 : FD 7E 0F            		ld	a,(iy+0Fh)	; 0Fh - keys ***
(1) 2079/     A07 : E6 F0               		and	11110000b
(1) 2080/     A09 : B1                  		or	c		; Merge FM channel
(1) 2081/     A0A : 5F                  		ld	e,a
(1) 2082/     A0B : 16 28               		ld	d,28h
(1) 2083/     A0D : CD D9 11            		call	fm_send_1	; Set keys
(1) 2084/     A10 : CF                  		rst	8
(1) 2085/     A11 :                     .nofm_note:
(1) 2086/     A11 : C9                  		ret
(1) 2088/     A12 :                     
(1) 2089/     A12 :                     ; --------------------------------
(1) 2090/     A12 :                     ; FM3 special
(1) 2091/     A12 :                     ; --------------------------------
(1) 2092/     A12 :                     
(1) 2093/     A12 :                     .mk_fmspc:
(1) 2094/     A12 : CB 40               		bit	0,b		; NEW Note?
(1) 2095/     A14 : 28 E8               		jr	z,.mkfm_set
(1) 2096/     A16 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 2097/     A19 : FE FE               		cp	-2
(1) 2098/     A1B : CA 73 0A            		jp	z,.fm_cut
(1) 2099/     A1E : FE FF               		cp	-1
(1) 2100/     A20 : CA 6D 0A            		jp	z,.fm_off
(1) 2101/     A23 : FD 4E 04            		ld	c,(iy+04h)	; c - KeyID (011b always)
(1) 2102/     A26 : CD 7C 0A            		call	.fm_keyoff
(1) 2103/     A29 : 21 1E 13            		ld	hl,fmcach_list	; Read external freqs
(1) 2104/     A2C : FD 7E 04            		ld	a,(iy+04h)
(1) 2105/     A2F : E6 07               		and	0111b
(1) 2106/     A31 : 16 00               		ld	d,0
(1) 2107/     A33 : 87                  		add	a,a
(1) 2108/     A34 : 5F                  		ld	e,a
(1) 2109/     A35 : CF                  		rst	8
(1) 2110/     A36 : 19                  		add	hl,de
(1) 2111/     A37 : 7E                  		ld	a,(hl)
(1) 2112/     A38 : 23                  		inc	hl
(1) 2113/     A39 : 66                  		ld	h,(hl)
(1) 2114/     A3A : 6F                  		ld	l,a
(1) 2115/     A3B : CF                  		rst	8
(1) 2116/     A3C : 11 20 00            		ld	de,20h		; point to regs
(1) 2117/     A3F : 19                  		add	hl,de
(1) 2118/     A40 : DD E5               		push	ix
(1) 2119/     A42 : DD 21 65 0A         		ld	ix,.spcreglist
(1) 2120/     A46 : 06 08               		ld	b,8
(1) 2121/     A48 :                     .wr_spc:
(1) 2122/     A48 : DD 56 00            		ld	d,(ix)
(1) 2123/     A4B : 5E                  		ld	e,(hl)
(1) 2124/     A4C : CD D9 11            		call	fm_send_1
(1) 2125/     A4F : CF                  		rst	8
(1) 2126/     A50 : 23                  		inc	hl
(1) 2127/     A51 : DD 23               		inc	ix
(1) 2128/     A53 : 10 F3               		djnz	.wr_spc
(1) 2129/     A55 : DD E1               		pop	ix
(1) 2130/     A57 : 11 40 27            		ld	de,2740h	; CH3 on
(1) 2131/     A5A : CD D9 11            		call	fm_send_1
(1) 2132/     A5D : 3E 01               		ld	a,1
(1) 2133/     A5F : 32 74 1C            		ld	(fmSpecial),a
(1) 2134/     A62 : C3 FE 09            		jp	.mkfm_set
(1) 2135/     A65 :                     .spcreglist:
(1) 2136/     A65 : AD A9               		db 0ADh,0A9h
(1) 2137/     A67 : AC A8               		db 0ACh,0A8h
(1) 2138/     A69 : AE AA               		db 0AEh,0AAh
(1) 2139/     A6B : A6 A2               		db 0A6h,0A2h
(1) 2140/     A6D :                     
(1) 2141/     A6D :                     ; ----------------------------------------
(1) 2142/     A6D :                     
(1) 2143/     A6D :                     .fm_off:
(1) 2144/     A6D : CD 7C 0A            		call	.fm_keyoff
(1) 2145/     A70 : C3 11 0F            		jp	.chnl_ulnkoff
(1) 2146/     A73 :                     .fm_cut:
(1) 2147/     A73 : CD 7C 0A            		call	.fm_keyoff
(1) 2148/     A76 : CD 84 0A            		call	.fm_tloff
(1) 2149/     A79 : C3 0B 0F            		jp	.chnl_ulnkcut
(1) 2150/     A7C :                     
(1) 2151/     A7C :                     ; ----------------------------------------
(1) 2152/     A7C :                     
(1) 2153/     A7C :                     .fm_keyoff:
(1) 2154/     A7C : 16 28               		ld	d,28h
(1) 2155/     A7E : FD 5E 04            		ld	e,(iy+04h)
(1) 2156/     A81 : C3 D9 11            		jp	fm_send_1
(1) 2157/     A84 :                     .fm_tloff:
(1) 2158/     A84 : 06 04               		ld	b,4
(1) 2159/     A86 : FD 4E 04            		ld	c,(iy+04h)
(1) 2160/     A89 : 79                  		ld	a,c
(1) 2161/     A8A : E6 03               		and	011b
(1) 2162/     A8C : F6 40               		or	40h	; TL regs
(1) 2163/     A8E : 1E 7F               		ld	e,7Fh
(1) 2164/     A90 :                     .tl_down:
(1) 2165/     A90 : 57                  		ld	d,a
(1) 2166/     A91 :                     ; 		ld	e,7Fh
(1) 2167/     A91 : CD D5 11            		call	fm_autoreg
(1) 2168/     A94 : CF                  		rst	8
(1) 2169/     A95 : 7A                  		ld	a,d
(1) 2170/     A96 : C6 04               		add	a,4
(1) 2171/     A98 : 10 F6               		djnz	.tl_down
(1) 2172/     A9A : C9                  		ret
(1) 2173/     A9B :                     ; c - KeyID
(1) 2174/     A9B :                     .fm_setfreq:
(1) 2175/     A9B : 79                  		ld	a,c
(1) 2176/     A9C : E6 03               		and	011b
(1) 2177/     A9E : F6 A4               		or	0A4h
(1) 2178/     AA0 : 57                  		ld	d,a
(1) 2179/     AA1 : 5C                  		ld	e,h
(1) 2180/     AA2 : CF                  		rst	8
(1) 2181/     AA3 : CD D5 11            		call	fm_autoreg
(1) 2182/     AA6 : 79                  		ld	a,c
(1) 2183/     AA7 : E6 03               		and	011b
(1) 2184/     AA9 : F6 A0               		or	0A0h
(1) 2185/     AAB : 57                  		ld	d,a
(1) 2186/     AAC : 5D                  		ld	e,l
(1) 2187/     AAD : CD D5 11            		call	fm_autoreg
(1) 2188/     AB0 : CF                  		rst	8
(1) 2189/     AB1 : C9                  		ret
(1) 2190/     AB2 :                     
(1) 2191/     AB2 :                     ; --------------------------------
(1) 2192/     AB2 :                     ; WRITE TL volume
(1) 2193/     AB2 :                     
(1) 2194/     AB2 :                     .fm_wrtlvol:
(1) 2195/     AB2 : 21 1E 13            		ld	hl,fmcach_list
(1) 2196/     AB5 : FD 7E 04            		ld	a,(iy+04h)
(1) 2197/     AB8 : E6 07               		and	0111b
(1) 2198/     ABA : 16 00               		ld	d,0
(1) 2199/     ABC : CF                  		rst	8
(1) 2200/     ABD : 87                  		add	a,a
(1) 2201/     ABE : 5F                  		ld	e,a
(1) 2202/     ABF : 19                  		add	hl,de
(1) 2203/     AC0 : 7E                  		ld	a,(hl)
(1) 2204/     AC1 : 23                  		inc	hl
(1) 2205/     AC2 : 66                  		ld	h,(hl)
(1) 2206/     AC3 : 6F                  		ld	l,a
(1) 2207/     AC4 : 23                  		inc	hl
(1) 2208/     AC5 : 23                  		inc	hl
(1) 2209/     AC6 : 23                  		inc	hl
(1) 2210/     AC7 : CF                  		rst	8
(1) 2211/     AC8 : 23                  		inc	hl		; Point to TL's
(1) 2212/     AC9 : FD 7E 04            		ld	a,(iy+04h)
(1) 2213/     ACC : E6 03               		and	011b
(1) 2214/     ACE : F6 40               		or	40h		; TL registers
(1) 2215/     AD0 : 57                  		ld	d,a
(1) 2216/     AD1 :                     ; d - 40h+
(1) 2217/     AD1 :                     ; hl - TL data
(1) 2218/     AD1 :                     ; .fm_wrtlvol:
(1) 2219/     AD1 : C5                  		push	bc
(1) 2220/     AD2 : E5                  		push	hl
(1) 2221/     AD3 : 21 28 0B            		ld	hl,.fm_cindx	; hl - jump carry list
(1) 2222/     AD6 : FD 7E 0C            		ld	a,(iy+0Ch)	; Read 0B0h copy
(1) 2223/     AD9 : E6 07               		and	0111b
(1) 2224/     ADB : 06 00               		ld	b,0
(1) 2225/     ADD : 4F                  		ld	c,a
(1) 2226/     ADE : 09                  		add	hl,bc
(1) 2227/     ADF : FD 7E 08            		ld	a,(iy+08h)	; Read current Volume
(1) 2228/     AE2 : CF                  		rst	8
(1) 2229/     AE3 : FD 96 03            		sub	a,(iy+03h)	; + MASTER vol
(1) 2230/     AE6 : 4F                  		ld	c,a		; c - Current Volume
(1) 2231/     AE7 : 46                  		ld	b,(hl)		; b - Current jump-carry byte
(1) 2232/     AE8 : E1                  		pop	hl
(1) 2233/     AE9 : CB 08               		rrc	b		; OP1
(1) 2234/     AEB : DC 16 0B            		call	c,.write_tl
(1) 2235/     AEE : 23                  		inc	hl
(1) 2236/     AEF : 14                  		inc	d
(1) 2237/     AF0 : 14                  		inc	d
(1) 2238/     AF1 : CF                  		rst	8
(1) 2239/     AF2 : 14                  		inc	d
(1) 2240/     AF3 : 14                  		inc	d
(1) 2241/     AF4 : CB 08               		rrc	b		; OP2
(1) 2242/     AF6 : DC 16 0B            		call	c,.write_tl
(1) 2243/     AF9 : 23                  		inc	hl
(1) 2244/     AFA : 14                  		inc	d
(1) 2245/     AFB : 14                  		inc	d
(1) 2246/     AFC : 14                  		inc	d
(1) 2247/     AFD : 14                  		inc	d
(1) 2248/     AFE : CB 08               		rrc	b		; OP3
(1) 2249/     B00 : DC 16 0B            		call	c,.write_tl
(1) 2250/     B03 : 23                  		inc	hl
(1) 2251/     B04 : CF                  		rst	8
(1) 2252/     B05 : 14                  		inc	d
(1) 2253/     B06 : 14                  		inc	d
(1) 2254/     B07 : 14                  		inc	d
(1) 2255/     B08 : 14                  		inc	d
(1) 2256/     B09 : CB 08               		rrc	b		; OP4
(1) 2257/     B0B : DC 16 0B            		call	c,.write_tl
(1) 2258/     B0E : 23                  		inc	hl
(1) 2259/     B0F : 14                  		inc	d
(1) 2260/     B10 : 14                  		inc	d
(1) 2261/     B11 : 14                  		inc	d
(1) 2262/     B12 : 14                  		inc	d
(1) 2263/     B13 : CF                  		rst	8
(1) 2264/     B14 : C1                  		pop	bc
(1) 2265/     B15 : C9                  		ret
(1) 2266/     B16 :                     .write_tl:
(1) 2267/     B16 : 7E                  		ld	a,(hl)
(1) 2268/     B17 : 91                  		sub	a,c		; reg - volume
(1) 2269/     B18 : F2 1D 0B            		jp	p,.keep_tlmx
(1) 2270/     B1B : 3E 7F               		ld	a,7Fh		; <-- maximum TL
(1) 2271/     B1D :                     .keep_tlmx:
(1) 2272/     B1D : C5                  		push	bc
(1) 2273/     B1E : 5F                  		ld	e,a
(1) 2274/     B1F : FD 4E 04            		ld	c,(iy+04h)
(1) 2275/     B22 : CD D5 11            		call	fm_autoreg
(1) 2276/     B25 : CF                  		rst	8
(1) 2277/     B26 : C1                  		pop	bc
(1) 2278/     B27 : C9                  		ret
(1) 2279/     B28 :                     ; Jump carry list
(1) 2280/     B28 :                     .fm_cindx:
(1) 2281/     B28 : 08                  		db 1000b
(1) 2282/     B29 : 08                  		db 1000b
(1) 2283/     B2A : 08                  		db 1000b
(1) 2284/     B2B : 08                  		db 1000b
(1) 2285/     B2C : 0C                  		db 1100b
(1) 2286/     B2D : 0E                  		db 1110b
(1) 2287/     B2E : 0E                  		db 1110b
(1) 2288/     B2F : 0F                  		db 1111b
(1) 2289/     B30 :                     ; c - KeyId
(1) 2290/     B30 :                     .fm_wrtalpan:
(1) 2291/     B30 : FD 7E 0C            		ld	a,(iy+0Ch)		; 0B0h algorithm
(1) 2292/     B33 : 5F                  		ld	e,a
(1) 2293/     B34 : 79                  		ld	a,c
(1) 2294/     B35 : E6 03               		and	011b
(1) 2295/     B37 : F6 B0               		or	0B0h
(1) 2296/     B39 : 57                  		ld	d,a
(1) 2297/     B3A : CD D5 11            		call	fm_autoreg		; Write algorithm
(1) 2298/     B3D : CF                  		rst	8
(1) 2299/     B3E : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Read panning bits
(1) 2300/     B41 : 2F                  		cpl				; REVERSE bits
(1) 2301/     B42 : E6 30               		and	00110000b
(1) 2302/     B44 : 07                  		rlca				; << 2
(1) 2303/     B45 : 07                  		rlca
(1) 2304/     B46 : 5F                  		ld	e,a			; save as e
(1) 2305/     B47 : FD 7E 0D            		ld	a,(iy+0Dh)		; 0B4h %00aa0ppp
(1) 2306/     B4A : E6 3F               		and	00111111b
(1) 2307/     B4C : B3                  		or	e			; Merge panning
(1) 2308/     B4D : 5F                  		ld	e,a
(1) 2309/     B4E : 79                  		ld	a,c
(1) 2310/     B4F : CF                  		rst	8
(1) 2311/     B50 : E6 03               		and	011b
(1) 2312/     B52 : F6 B4               		or	0B4h
(1) 2313/     B54 : 57                  		ld	d,a
(1) 2314/     B55 : CD D5 11            		call	fm_autoreg
(1) 2315/     B58 : FD 7E 0E            		ld	a,(iy+0Eh)		; Read LFO
(1) 2316/     B5B : CB 5F               		bit	3,a			; Intrument wants LFO?
(1) 2317/     B5D : 28 06               		jr	z,.no_lfo
(1) 2318/     B5F : 5F                  		ld	e,a
(1) 2319/     B60 : 16 22               		ld	d,22h
(1) 2320/     B62 : CD D9 11            		call	fm_send_1
(1) 2321/     B65 :                     .no_lfo:
(1) 2322/     B65 : C9                  		ret
(1) 2323/     B66 :                     
(1) 2324/     B66 :                     ; --------------------------------
(1) 2325/     B66 :                     ; DAC
(1) 2326/     B66 :                     ; --------------------------------
(1) 2327/     B66 :                     
(1) 2328/     B66 :                     .mk_dac:
(1) 2329/     B66 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 2330/     B69 : FE FE               		cp	-2
(1) 2331/     B6B : CA 8E 0B            		jp	z,.dac_cut
(1) 2332/     B6E : FE FF               		cp	-1
(1) 2333/     B70 : CA 94 0B            		jp	z,.dac_off
(1) 2334/     B73 : CD 97 0B            		call	.dac_pitch
(1) 2335/     B76 : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Read panning
(1) 2336/     B79 : 2F                  		cpl				; REVERSE bits
(1) 2337/     B7A : E6 30               		and	00110000b
(1) 2338/     B7C : 07                  		rlca
(1) 2339/     B7D : 07                  		rlca
(1) 2340/     B7E : CF                  		rst	8
(1) 2341/     B7F : 5F                  		ld	e,a
(1) 2342/     B80 : 16 B6               		ld	d,0B6h			; Channel 6 panning
(1) 2343/     B82 : CD E4 11            		call	fm_send_2
(1) 2344/     B85 : CB 40               		bit	0,b			; Note update?
(1) 2345/     B87 : C8                  		ret	z
(1) 2346/     B88 : CD 04 12            		call	dac_off
(1) 2347/     B8B : C3 19 12            		jp	dac_play
(1) 2348/     B8E :                     .dac_cut:
(1) 2349/     B8E : CD 04 12            		call	dac_off
(1) 2350/     B91 : C3 11 0F            		jp	.chnl_ulnkoff
(1) 2351/     B94 :                     .dac_off:
(1) 2352/     B94 : C3 0B 0F            		jp	.chnl_ulnkcut
(1) 2353/     B97 :                     .dac_pitch:
(1) 2354/     B97 : 16 00               		ld	d,0		; Freq index
(1) 2355/     B99 : FD 5E 06            		ld	e,(iy+06h)
(1) 2356/     B9C : 21 5C 13            		ld	hl,wavFreq_List-(2*36)
(1) 2357/     B9F : 19                  		add	hl,de
(1) 2358/     BA0 : 7E                  		ld	a,(hl)
(1) 2359/     BA1 : 23                  		inc	hl
(1) 2360/     BA2 : 66                  		ld	h,(hl)
(1) 2361/     BA3 : 6F                  		ld	l,a
(1) 2362/     BA4 : FD 5E 07            		ld	e,(iy+07h)	; pitchbend
(1) 2363/     BA7 : CF                  		rst	8
(1) 2364/     BA8 : AF                  		xor	a		; Clear high
(1) 2365/     BA9 : 3F                  		ccf			; Clear carry
(1) 2366/     BAA : CB 23               		sla	e		; << 3
(1) 2367/     BAC : CB 23               		sla	e
(1) 2368/     BAE : CB 23               		sla	e
(1) 2369/     BB0 : 9F                  		sbc	a,a		; -1 if carry is set
(1) 2370/     BB1 : 57                  		ld	d,a
(1) 2371/     BB2 : 19                  		add	hl,de
(1) 2372/     BB3 : 22 88 1C            		ld	(wave_Pitch),hl
(1) 2373/     BB6 : D9                  		exx			; *
(1) 2374/     BB7 : ED 5B 88 1C         		ld	de,(wave_Pitch)	; *
(1) 2375/     BBB : D9                  		exx			; *
(1) 2376/     BBC : C9                  		ret
(1) 2377/     BBD :                     
(1) 2378/     BBD :                     ; --------------------------------
(1) 2379/     BBD :                     ; PCM
(1) 2380/     BBD :                     ; --------------------------------
(1) 2381/     BBD :                     
(1) 2382/     BBD :                     .mk_pcm:
(1) 2469/     BBD : C9                  		ret
(1) 2471/     BBE :                     
(1) 2472/     BBE :                     ; --------------------------------
(1) 2473/     BBE :                     ; PWM
(1) 2474/     BBE :                     ; --------------------------------
(1) 2475/     BBE :                     
(1) 2476/     BBE :                     .mk_pwm:
(1) 2552/     BBE : C9                  		ret
(1) 2554/     BBF :                     
(1) 2555/     BBF :                     ; --------------------------------
(1) 2556/     BBF :                     ; SHARED routine
(1) 2557/     BBF :                     
(1) 2558/     BBF :                     .readfreq_pcm:
(1) 2559/     BBF : 21 BC 13            		ld	hl,wavFreq_CdPcm-(36*2)
(1) 2560/     BC2 : 18 03               		jr	.set_wavfreq
(1) 2561/     BC4 :                     .readfreq_pwm:
(1) 2562/     BC4 : 21 5C 13            		ld	hl,wavFreq_List-(36*2)
(1) 2563/     BC7 :                     .set_wavfreq:
(1) 2564/     BC7 : 16 00               		ld	d,0		; Freq index
(1) 2565/     BC9 : FD 5E 06            		ld	e,(iy+06h)
(1) 2566/     BCC : 19                  		add	hl,de
(1) 2567/     BCD : 7E                  		ld	a,(hl)
(1) 2568/     BCE : 23                  		inc	hl
(1) 2569/     BCF : 66                  		ld	h,(hl)
(1) 2570/     BD0 : 6F                  		ld	l,a
(1) 2571/     BD1 : FD 5E 07            		ld	e,(iy+07h)	; pitchbend
(1) 2572/     BD4 : CF                  		rst	8
(1) 2573/     BD5 : AF                  		xor	a		; Clear high
(1) 2574/     BD6 : 3F                  		ccf			; Clear carry
(1) 2575/     BD7 : CB 23               		sla	e		; << 2
(1) 2576/     BD9 : CB 23               		sla	e
(1) 2577/     BDB : 9F                  		sbc	a,a		; -1 if carry is set
(1) 2578/     BDC : 57                  		ld	d,a
(1) 2579/     BDD : 19                  		add	hl,de
(1) 2580/     BDE : C9                  		ret
(1) 2581/     BDF :                     
(1) 2582/     BDF :                     ; ----------------------------------------
(1) 2583/     BDF :                     ; NEW effect
(1) 2584/     BDF :                     ; ----------------------------------------
(1) 2585/     BDF :                     
(1) 2586/     BDF :                     .effc:
(1) 2587/     BDF : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - effect data
(1) 2588/     BE2 : DD 7E 05            		ld	a,(ix+chnl_EffId)	; d - effect id
(1) 2589/     BE5 : 57                  		ld	d,a
(1) 2590/     BE6 : CF                  		rst	8
(1) 2591/     BE7 : FE 04               		cp	4			; Effect D?
(1) 2592/     BE9 : 28 0F               		jr	z,.effc_D
(1) 2593/     BEB : FE 05               		cp	5			; Effect E?
(1) 2594/     BED : 28 4E               		jr	z,.effc_E
(1) 2595/     BEF : FE 06               		cp	6			; Effect F?
(1) 2596/     BF1 : 28 5F               		jr	z,.effc_F
(1) 2597/     BF3 : CF                  		rst	8
(1) 2598/     BF4 : FE 18               		cp	24			; Effect X?
(1) 2599/     BF6 : CA 73 0C            		jp	z,.effc_X
(1) 2600/     BF9 : C9                  		ret
(1) 2601/     BFA :                     
(1) 2602/     BFA :                     ; ----------------------------------------
(1) 2603/     BFA :                     ; Effect D
(1) 2604/     BFA :                     ;
(1) 2605/     BFA :                     ; Volume slide down
(1) 2606/     BFA :                     ;
(1) 2607/     BFA :                     ; 0xh-Exh - Normal
(1) 2608/     BFA :                     ; Fxh-Fxh - Fine slide / 2
(1) 2609/     BFA :                     ; ----------------------------------------
(1) 2610/     BFA :                     
(1) 2611/     BFA :                     .effc_D:
(1) 2612/     BFA : CD 67 0C            		call	.save_arg
(1) 2613/     BFD : 79                  		ld	a,c		; Setting == 0?
(1) 2614/     BFE : B7                  		or	a
(1) 2615/     BFF : C8                  		ret	z
(1) 2616/     C00 : E6 F0               		and	0F0h
(1) 2617/     C02 : 28 0F               		jr	z,.norm_down	; 0xh
(1) 2618/     C04 : FE F0               		cp	0F0h
(1) 2619/     C06 : 28 0D               		jr	z,.fine_down	; Fxh
(1) 2620/     C08 : CF                  		rst	8
(1) 2621/     C09 : 79                  		ld	a,c
(1) 2622/     C0A : E6 0F               		and	00Fh
(1) 2623/     C0C : 28 1D               		jr	z,.norm_up	; x0h
(1) 2624/     C0E : FE 0F               		cp	00Fh
(1) 2625/     C10 : 28 17               		jr	z,.fine_up	; xFh
(1) 2626/     C12 : C9                  		ret
(1) 2627/     C13 :                     ; Go down
(1) 2628/     C13 :                     .norm_down:
(1) 2629/     C13 : CB 21               		sla	c
(1) 2630/     C15 :                     .fine_down:
(1) 2631/     C15 : CB 21               		sla	c
(1) 2632/     C17 : 79                  		ld	a,c
(1) 2633/     C18 : E6 3C               		and	00111100b
(1) 2634/     C1A : 4F                  		ld	c,a
(1) 2635/     C1B : FD 7E 08            		ld	a,(iy+08h)	; Current volume
(1) 2636/     C1E : CF                  		rst	8
(1) 2637/     C1F : 91                  		sub	a,c
(1) 2638/     C20 : 1E C0               		ld	e,0C0h
(1) 2639/     C22 : BB                  		cp	e
(1) 2640/     C23 : D2 39 0C            		jp	nc,.vol_dvld
(1) 2641/     C26 : 7B                  		ld	a,e
(1) 2642/     C27 : 18 10               		jr 	.vol_dvld
(1) 2643/     C29 :                     ; Go up
(1) 2644/     C29 :                     .fine_up:
(1) 2645/     C29 : CB 39               		srl	c
(1) 2646/     C2B :                     .norm_up:
(1) 2647/     C2B : CB 39               		srl	c
(1) 2648/     C2D : 79                  		ld	a,c
(1) 2649/     C2E : E6 3C               		and	00111100b
(1) 2650/     C30 : 4F                  		ld	c,a
(1) 2651/     C31 : FD 7E 08            		ld	a,(iy+08h)	; Current volume
(1) 2652/     C34 : CF                  		rst	8
(1) 2653/     C35 : 81                  		add	a,c
(1) 2654/     C36 : 38 01               		jr	c,.vol_dvld
(1) 2655/     C38 : AF                  		xor	a
(1) 2656/     C39 :                     .vol_dvld:
(1) 2657/     C39 : FD 77 08            		ld	(iy+08h),a
(1) 2658/     C3C : C9                  		ret
(1) 2659/     C3D :                     
(1) 2660/     C3D :                     ; ----------------------------------------
(1) 2661/     C3D :                     ; Effect E
(1) 2662/     C3D :                     ; ----------------------------------------
(1) 2663/     C3D :                     
(1) 2664/     C3D :                     .effc_E:
(1) 2665/     C3D : CD 67 0C            		call	.save_arg
(1) 2666/     C40 : 79                  		ld	a,c
(1) 2667/     C41 : E6 F0               		and	0F0h
(1) 2668/     C43 : FE F0               		cp	0F0h
(1) 2669/     C45 : C8                  		ret	z
(1) 2670/     C46 : FE E0               		cp	0E0h
(1) 2671/     C48 : C8                  		ret	z
(1) 2672/     C49 : CF                  		rst	8
(1) 2673/     C4A : FD 7E 07            		ld	a,(iy+07h)
(1) 2674/     C4D : 91                  		sub	a,c
(1) 2675/     C4E : FD 77 07            		ld	(iy+07h),a
(1) 2676/     C51 : C9                  		ret
(1) 2677/     C52 :                     
(1) 2678/     C52 :                     ; ----------------------------------------
(1) 2679/     C52 :                     ; Effect F
(1) 2680/     C52 :                     ; ----------------------------------------
(1) 2681/     C52 :                     
(1) 2682/     C52 :                     .effc_F:
(1) 2683/     C52 : CD 67 0C            		call	.save_arg
(1) 2684/     C55 : 79                  		ld	a,c
(1) 2685/     C56 : E6 F0               		and	0F0h
(1) 2686/     C58 : FE F0               		cp	0F0h
(1) 2687/     C5A : C8                  		ret	z
(1) 2688/     C5B : FE E0               		cp	0E0h
(1) 2689/     C5D : C8                  		ret	z
(1) 2690/     C5E : CF                  		rst	8
(1) 2691/     C5F : FD 7E 07            		ld	a,(iy+07h)
(1) 2692/     C62 : 81                  		add	a,c
(1) 2693/     C63 : FD 77 07            		ld	(iy+07h),a
(1) 2694/     C66 : C9                  		ret
(1) 2695/     C67 :                     
(1) 2696/     C67 :                     ; --------------------------------
(1) 2697/     C67 :                     ; e - got arg
(1) 2698/     C67 :                     ; c - new arg
(1) 2699/     C67 :                     .save_arg:
(1) 2700/     C67 : FD 4E 09            		ld	c,(iy+09h)	; Current slide setting
(1) 2701/     C6A : 7B                  		ld	a,e		; EffArg is non-zero?
(1) 2702/     C6B : B7                  		or	a
(1) 2703/     C6C : 28 04               		jr	z,.D_cont	; 00h = slide continue
(1) 2704/     C6E : 4F                  		ld	c,a
(1) 2705/     C6F : FD 71 09            		ld	(iy+09h),c	; Store NEW slide setting
(1) 2706/     C72 :                     .D_cont:
(1) 2707/     C72 : C9                  		ret
(1) 2708/     C73 :                     
(1) 2709/     C73 :                     ; ----------------------------------------
(1) 2710/     C73 :                     ; Effect X
(1) 2711/     C73 :                     ;
(1) 2712/     C73 :                     ; Common panning values:
(1) 2713/     C73 :                     ;  00h LEFT
(1) 2714/     C73 :                     ;  80h MIDDLE
(1) 2715/     C73 :                     ; 0FFh RIGHT
(1) 2716/     C73 :                     ; ----------------------------------------
(1) 2717/     C73 :                     
(1) 2718/     C73 :                     .effc_X:
(1) 2719/     C73 : 16 00               		ld	d,0
(1) 2720/     C75 : 7E                  		ld	a,(hl)
(1) 2721/     C76 : E6 F0               		and	11110000b
(1) 2722/     C78 : FE 80               		cp	80h		; PSG?
(1) 2723/     C7A : 28 1D               		jr	z,.res_pan
(1) 2724/     C7C : FE 90               		cp	90h		; PSGN?
(1) 2725/     C7E : 28 19               		jr	z,.res_pan
(1) 2726/     C80 : FE D0               		cp	0D0h		; MCD: write separate PAN values
(1) 2727/     C82 : CC A3 0C            		call	z,.pan_mcd	; <-- CALL, not JP
(1) 2728/     C85 :                     
(1) 2729/     C85 :                     	; ----------------------------------------
(1) 2730/     C85 :                     	; Common panning bits: %00LR0000
(1) 2731/     C85 :                     	; (REVERSE: 0-on 1-off)
(1) 2732/     C85 : FD 36 09 00         		ld	(iy+09h),0
(1) 2733/     C89 : CF                  		rst	8
(1) 2734/     C8A : E5                  		push	hl
(1) 2735/     C8B : 21 B9 0C            		ld	hl,.comn_panlist
(1) 2736/     C8E : 7B                  		ld	a,e
(1) 2737/     C8F : 07                  		rlca
(1) 2738/     C90 : 07                  		rlca
(1) 2739/     C91 : 07                  		rlca
(1) 2740/     C92 : E6 07               		and	0111b
(1) 2741/     C94 :                     ; 		ld	d,0
(1) 2742/     C94 : 5F                  		ld	e,a
(1) 2743/     C95 : CF                  		rst	8
(1) 2744/     C96 : 19                  		add	hl,de
(1) 2745/     C97 : 56                  		ld	d,(hl)
(1) 2746/     C98 : E1                  		pop	hl
(1) 2747/     C99 :                     .res_pan:
(1) 2748/     C99 : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Save panning
(1) 2749/     C9C : E6 CF               		and	11001111b
(1) 2750/     C9E : B2                  		or	d
(1) 2751/     C9F : DD 77 00            		ld	(ix+chnl_Flags),a
(1) 2752/     CA2 : C9                  		ret
(1) 2753/     CA3 :                     
(1) 2754/     CA3 :                     	; ----------------------------------------
(1) 2755/     CA3 :                     	; MCD panning
(1) 2756/     CA3 :                     .pan_mcd:
(1) 2757/     CA3 : E5                  		push	hl
(1) 2758/     CA4 : D5                  		push	de
(1) 2759/     CA5 : 16 00               		ld	d,0
(1) 2760/     CA7 : 21 C1 0C            		ld	hl,.pcm_panlist
(1) 2761/     CAA : 7B                  		ld	a,e
(1) 2762/     CAB : E6 F8               		and	0F8h
(1) 2763/     CAD : 0F                  		rrca
(1) 2764/     CAE : 0F                  		rrca
(1) 2765/     CAF : 0F                  		rrca
(1) 2766/     CB0 : 5F                  		ld	e,a
(1) 2767/     CB1 : 19                  		add	hl,de
(1) 2768/     CB2 : 7E                  		ld	a,(hl)
(1) 2769/     CB3 : FD 77 0A            		ld	(iy+0Ah),a
(1) 2770/     CB6 : D1                  		pop	de
(1) 2771/     CB7 : E1                  		pop	hl
(1) 2772/     CB8 : C9                  		ret
(1) 2773/     CB9 :                     
(1) 2774/     CB9 :                     ; 0 - ENABLE, 1 - DISABLE
(1) 2775/     CB9 :                     ; 00LR0000b
(1) 2776/     CB9 :                     .comn_panlist:
(1) 2777/     CB9 : 10                  		db 00010000b
(1) 2778/     CBA : 10                  		db 00010000b
(1) 2779/     CBB : 10                  		db 00010000b
(1) 2780/     CBC : 00                  		db 00000000b
(1) 2781/     CBD : 00                  		db 00000000b
(1) 2782/     CBE : 20                  		db 00100000b
(1) 2783/     CBF : 20                  		db 00100000b
(1) 2784/     CC0 : 20                  		db 00100000b
(1) 2785/     CC1 :                     
(1) 2786/     CC1 :                     ; REVERSE OUTPUT BITS
(1) 2787/     CC1 :                     ; RRRR | LLLL
(1) 2788/     CC1 :                     .pcm_panlist:
(1) 2789/     CC1 : F0                  		db 0F0h	; 00h
(1) 2790/     CC2 : E0                  		db 0E0h
(1) 2791/     CC3 : D0                  		db 0D0h	; 10h
(1) 2792/     CC4 : C0                  		db 0C0h
(1) 2793/     CC5 : B0                  		db 0B0h	; 20h
(1) 2794/     CC6 : A0                  		db 0A0h
(1) 2795/     CC7 : 90                  		db 090h	; 30h
(1) 2796/     CC8 : 80                  		db 080h
(1) 2797/     CC9 : 70                  		db 070h	; 40h
(1) 2798/     CCA : 60                  		db 060h
(1) 2799/     CCB : 50                  		db 050h	; 50h
(1) 2800/     CCC : 40                  		db 040h
(1) 2801/     CCD : 30                  		db 030h	; 60h
(1) 2802/     CCE : 20                  		db 020h
(1) 2803/     CCF : 10                  		db 010h	; 70h
(1) 2804/     CD0 : 00                  		db 000h
(1) 2805/     CD1 : 00                  		db 000h ; 80h
(1) 2806/     CD2 : 01                  		db 001h
(1) 2807/     CD3 : 02                  		db 002h ; 90h
(1) 2808/     CD4 : 03                  		db 003h
(1) 2809/     CD5 : 04                  		db 004h ; A0h
(1) 2810/     CD6 : 05                  		db 005h
(1) 2811/     CD7 : 06                  		db 006h ; B0h
(1) 2812/     CD8 : 07                  		db 007h
(1) 2813/     CD9 : 08                  		db 008h ; C0h
(1) 2814/     CDA : 09                  		db 009h
(1) 2815/     CDB : 0A                  		db 00Ah ; D0h
(1) 2816/     CDC : 0B                  		db 00Bh
(1) 2817/     CDD : 0C                  		db 00Ch ; E0h
(1) 2818/     CDE : 0D                  		db 00Dh
(1) 2819/     CDF : 0E                  		db 00Eh ; F0h
(1) 2820/     CE0 : 0F                  		db 00Fh
(1) 2821/     CE1 :                     
(1) 2822/     CE1 :                     ; ----------------------------------------
(1) 2823/     CE1 :                     ; NEW volume
(1) 2824/     CE1 :                     ; ----------------------------------------
(1) 2825/     CE1 :                     
(1) 2826/     CE1 :                     .volu:
(1) 2827/     CE1 : DD 7E 04            		ld	a,(ix+chnl_Vol)
(1) 2828/     CE4 : D6 40               		sub	a,64
(1) 2829/     CE6 : FD 77 08            		ld	(iy+08h),a	; BASE volume
(1) 2830/     CE9 : C9                  		ret
(1) 2831/     CEA :                     
(1) 2832/     CEA :                     ; ----------------------------------------
(1) 2833/     CEA :                     ; NEW instrument
(1) 2834/     CEA :                     ; ----------------------------------------
(1) 2835/     CEA :                     
(1) 2836/     CEA :                     .inst:
(1) 2837/     CEA : 7E                  		ld	a,(hl)
(1) 2838/     CEB : E6 F0               		and	11110000b
(1) 2839/     CED : FE 80               		cp	080h
(1) 2840/     CEF : 28 24               		jr	z,.ins_psg
(1) 2841/     CF1 : FE 90               		cp	090h
(1) 2842/     CF3 : 28 1A               		jr	z,.ins_psgn
(1) 2843/     CF5 : FE A0               		cp	0A0h
(1) 2844/     CF7 : 28 52               		jr	z,.ins_fm
(1) 2845/     CF9 : CF                  		rst	8
(1) 2846/     CFA : FE B0               		cp	0B0h
(1) 2847/     CFC : 28 4D               		jr	z,.ins_fm
(1) 2848/     CFE : FE C0               		cp	0C0h
(1) 2849/     D00 : CA CC 0D            		jp	z,.ins_dac
(1) 2850/     D03 : FE D0               		cp	0D0h
(1) 2851/     D05 : CA 20 0E            		jp	z,.ins_pcm
(1) 2852/     D08 : FE E0               		cp	0E0h
(1) 2853/     D0A : CA 58 0E            		jp	z,.ins_pwm
(1) 2854/     D0D : CF                  		rst	8
(1) 2855/     D0E :                     .invl_ins:
(1) 2856/     D0E : C9                  		ret
(1) 2857/     D0F :                     
(1) 2858/     D0F :                     ; ----------------------------------------
(1) 2859/     D0F :                     ; PSG
(1) 2860/     D0F :                     
(1) 2861/     D0F :                     .ins_psgn:
(1) 2862/     D0F : 7E                  		ld	a,(hl)		; Grab noise setting
(1) 2863/     D10 : E6 07               		and	0111b
(1) 2864/     D12 : 32 73 1C            		ld	(psgHatMode),a	; ** SET GLOBAL SETTING
(1) 2865/     D15 :                     .ins_psg:
(1) 2866/     D15 : CF                  		rst	8
(1) 2867/     D16 : DD E5               		push	ix
(1) 2868/     D18 : E5                  		push	hl
(1) 2869/     D19 : 23                  		inc	hl		; Skip ID
(1) 2870/     D1A : DD 21 FE 14         		ld	ix,psgcom	; Read psg control
(1) 2871/     D1E : FD 5E 04            		ld	e,(iy+04h)
(1) 2872/     D21 : 16 00               		ld	d,0
(1) 2873/     D23 : DD 19               		add	ix,de
(1) 2874/     D25 : 7E                  		ld	a,(hl)
(1) 2875/     D26 : CF                  		rst	8
(1) 2876/     D27 : 23                  		inc	hl
(1) 2877/     D28 : 7E                  		ld	a,(hl)
(1) 2878/     D29 : DD 77 24            		ld	(ix+ALV),a	; ALV
(1) 2879/     D2C : 23                  		inc	hl
(1) 2880/     D2D : 7E                  		ld	a,(hl)
(1) 2881/     D2E : DD 77 08            		ld	(ix+ATK),a	; ATK
(1) 2882/     D31 : 23                  		inc	hl
(1) 2883/     D32 : 7E                  		ld	a,(hl)
(1) 2884/     D33 : CF                  		rst	8
(1) 2885/     D34 : DD 77 10            		ld	(ix+SLV),a	; SLV
(1) 2886/     D37 : 23                  		inc	hl
(1) 2887/     D38 : 7E                  		ld	a,(hl)
(1) 2888/     D39 : DD 77 0C            		ld	(ix+DKY),a	; DKY
(1) 2889/     D3C : 23                  		inc	hl
(1) 2890/     D3D : 7E                  		ld	a,(hl)
(1) 2891/     D3E : DD 77 14            		ld	(ix+RRT),a	; RRT
(1) 2892/     D41 : 23                  		inc	hl
(1) 2893/     D42 : 7E                  		ld	a,(hl)
(1) 2894/     D43 : CF                  		rst	8
(1) 2895/     D44 : DD 77 34            		ld	(ix+PARP),a	; ARP
(1) 2896/     D47 : E1                  		pop	hl
(1) 2897/     D48 : DD E1               		pop	ix
(1) 2898/     D4A : C9                  		ret
(1) 2899/     D4B :                     
(1) 2900/     D4B :                     ; ----------------------------------------
(1) 2901/     D4B :                     ; FM/FM3
(1) 2902/     D4B :                     
(1) 2903/     D4B :                     .ins_fm:
(1) 2904/     D4B : DD E5               		push	ix
(1) 2905/     D4D : E5                  		push	hl
(1) 2906/     D4E : C5                  		push	bc
(1) 2907/     D4F :                     ; 		ld	b,(ix+chnl_Ins)	; b - current Ins
(1) 2908/     D4F : FD 46 02            		ld	b,(iy+02h)
(1) 2909/     D52 : FD 7E 04            		ld	a,(iy+04h)
(1) 2910/     D55 : E6 07               		and	0111b
(1) 2911/     D57 : 16 00               		ld	d,0
(1) 2912/     D59 : 87                  		add	a,a
(1) 2913/     D5A : 5F                  		ld	e,a
(1) 2914/     D5B : DD 21 1E 13         		ld	ix,fmcach_list
(1) 2915/     D5F : DD 19               		add	ix,de
(1) 2916/     D61 : CF                  		rst	8
(1) 2917/     D62 : DD 5E 00            		ld	e,(ix)
(1) 2918/     D65 : DD 23               		inc	ix
(1) 2919/     D67 : DD 56 00            		ld	d,(ix)
(1) 2920/     D6A :                     
(1) 2921/     D6A :                     ; 		ld	a,(iy+0Bh)	; 0Bh: DON'T reload flag
(1) 2922/     D6A :                     ; 		cp	b
(1) 2923/     D6A :                     ; 		jr	z,.same_patch
(1) 2924/     D6A :                     ; 		ld	(iy+0Bh),b
(1) 2925/     D6A : 23                  		inc	hl		; Skip id and pitch
(1) 2926/     D6B : 23                  		inc	hl
(1) 2927/     D6C :                     
(1) 2928/     D6C : 46                  		ld	b,(hl)
(1) 2929/     D6D : 23                  		inc	hl
(1) 2930/     D6E : 4E                  		ld	c,(hl)
(1) 2931/     D6F : 23                  		inc	hl
(1) 2932/     D70 : 6E                  		ld	l,(hl)
(1) 2933/     D71 : 61                  		ld	h,c
(1) 2934/     D72 :                     
(1) 2935/     D72 : FD 7E 0A            		ld	a,(iy+0Ah)
(1) 2936/     D75 : BC                  		cp	h
(1) 2937/     D76 : 20 07               		jr	nz,.new_romdat
(1) 2938/     D78 : CF                  		rst	8
(1) 2939/     D79 : FD 7E 0B            		ld	a,(iy+0Bh)
(1) 2940/     D7C : BD                  		cp	l
(1) 2941/     D7D : 28 38               		jr	z,.same_patch
(1) 2942/     D7F :                     .new_romdat:
(1) 2943/     D7F : FD 74 0A            		ld	(iy+0Ah),h
(1) 2944/     D82 : FD 75 0B            		ld	(iy+0Bh),l
(1) 2945/     D85 : 78                  		ld	a,b
(1) 2946/     D86 : 01 28 00            		ld	bc,28h		; <- size
(1) 2947/     D89 : D5                  		push	de
(1) 2948/     D8A : CD BA 0F            		call	transferRom	; *** ROM ACCESS ***
(1) 2949/     D8D :                     
(1) 2950/     D8D : E1                  		pop	hl
(1) 2951/     D8E : FD 7E 04            		ld	a,(iy+04h)
(1) 2952/     D91 : 4F                  		ld	c,a		; c - FM Key ID
(1) 2953/     D92 :                     
(1) 2954/     D92 :                     	; hl - fmcach intrument
(1) 2955/     D92 :                     	; de - FM reg and data: 3000h
(1) 2956/     D92 :                     	;  c - FM keyChannel
(1) 2957/     D92 : 79                  		ld	a,c
(1) 2958/     D93 : E6 03               		and	011b
(1) 2959/     D95 : F6 30               		or	30h		; Start at reg 30h
(1) 2960/     D97 : 57                  		ld	d,a
(1) 2961/     D98 : 1E 00               		ld	e,0
(1) 2962/     D9A : CF                  		rst	8
(1) 2963/     D9B : 06 1C               		ld	b,7*4		; Write ALL base FM registers
(1) 2964/     D9D : CD BC 0D            		call	.fm_setrlist
(1) 2965/     DA0 :                     ; 		ld	b,4
(1) 2966/     DA0 :                     ; 		call	.fm_setrlist
(1) 2967/     DA0 :                     ; 		ld	b,5*4
(1) 2968/     DA0 :                     ; 		call	.fm_setrlist
(1) 2969/     DA0 : 7E                  		ld	a,(hl)		; 0B0h
(1) 2970/     DA1 : FD 77 0C            		ld	(iy+0Ch),a	; ** Save 0B0h to 0Ch
(1) 2971/     DA4 : 23                  		inc	hl
(1) 2972/     DA5 : 7E                  		ld	a,(hl)		; 0B4h
(1) 2973/     DA6 : FD 77 0D            		ld	(iy+0Dh),a	; ** Save 0B4h to 0Dh
(1) 2974/     DA9 : 23                  		inc	hl
(1) 2975/     DAA : CF                  		rst	8
(1) 2976/     DAB : 7E                  		ld	a,(hl)
(1) 2977/     DAC : FD 77 0E            		ld	(iy+0Eh),a	; LFO
(1) 2978/     DAF : 23                  		inc	hl
(1) 2979/     DB0 : 7E                  		ld	a,(hl)		; 028h keys
(1) 2980/     DB1 : E6 F0               		and	11110000b
(1) 2981/     DB3 : CF                  		rst	8
(1) 2982/     DB4 : FD 77 0F            		ld	(iy+0Fh),a	; ** Save keys to 0Eh
(1) 2983/     DB7 :                     .same_patch:
(1) 2984/     DB7 : C1                  		pop	bc
(1) 2985/     DB8 : E1                  		pop	hl
(1) 2986/     DB9 : DD E1               		pop	ix
(1) 2987/     DBB : C9                  		ret
(1) 2988/     DBC :                     ; b - numof_regs
(1) 2989/     DBC :                     .fm_setrlist:
(1) 2990/     DBC : 5E                  		ld	e,(hl)
(1) 2991/     DBD : 23                  		inc	hl
(1) 2992/     DBE : CD D5 11            		call	fm_autoreg
(1) 2993/     DC1 : 00                  		nop
(1) 2994/     DC2 : 00                  		nop
(1) 2995/     DC3 : CF                  		rst	8
(1) 2996/     DC4 : 00                  		nop
(1) 2997/     DC5 : 14                  		inc	d		; +4
(1) 2998/     DC6 : 14                  		inc	d
(1) 2999/     DC7 : 14                  		inc	d
(1) 3000/     DC8 : 14                  		inc	d
(1) 3001/     DC9 : 10 F1               		djnz	.fm_setrlist
(1) 3002/     DCB : C9                  		ret
(1) 3003/     DCC :                     
(1) 3004/     DCC :                     ; ----------------------------------------
(1) 3005/     DCC :                     
(1) 3006/     DCC :                     .ins_dac:
(1) 3007/     DCC : E5                  		push	hl
(1) 3008/     DCD : C5                  		push	bc
(1) 3009/     DCE : CD 04 12            		call	dac_off
(1) 3010/     DD1 : 7E                  		ld	a,(hl)
(1) 3011/     DD2 : E6 0F               		and	00001111b
(1) 3012/     DD4 : 32 8A 1C            		ld	(wave_Flags),a
(1) 3013/     DD7 : CF                  		rst	8
(1) 3014/     DD8 : 23                  		inc	hl
(1) 3015/     DD9 : 23                  		inc	hl
(1) 3016/     DDA : 5E                  		ld	e,(hl)
(1) 3017/     DDB : 23                  		inc	hl
(1) 3018/     DDC : 7E                  		ld	a,(hl)
(1) 3019/     DDD : 23                  		inc	hl
(1) 3020/     DDE : 6E                  		ld	l,(hl)
(1) 3021/     DDF : 67                  		ld	h,a
(1) 3022/     DE0 : E5                  		push	hl
(1) 3023/     DE1 : 7B                  		ld	a,e
(1) 3024/     DE2 : 01 06 00            		ld	bc,6		; Skip head
(1) 3025/     DE5 : 09                  		add	hl,bc
(1) 3026/     DE6 : CE 00               		adc	a,0
(1) 3027/     DE8 : 22 7F 1C            		ld	(wave_Start),hl	; Set START point
(1) 3028/     DEB : 32 81 1C            		ld	(wave_Start+2),a
(1) 3029/     DEE : E1                  		pop	hl
(1) 3030/     DEF : 7B                  		ld	a,e
(1) 3031/     DF0 : 11 A2 1C            		ld	de,sampleHead
(1) 3032/     DF3 : 01 06 00            		ld	bc,6
(1) 3033/     DF6 : D5                  		push	de
(1) 3034/     DF7 : CF                  		rst	8
(1) 3035/     DF8 : CD BA 0F            		call	transferRom	; *** ROM ACCESS ***
(1) 3036/     DFB : E1                  		pop	hl
(1) 3037/     DFC :                     	; hl - temporal header
(1) 3038/     DFC : 5E                  		ld	e,(hl)
(1) 3039/     DFD : 23                  		inc	hl
(1) 3040/     DFE : 56                  		ld	d,(hl)
(1) 3041/     DFF : 23                  		inc	hl
(1) 3042/     E00 : 7E                  		ld	a,(hl)
(1) 3043/     E01 : 23                  		inc	hl
(1) 3044/     E02 : ED 53 82 1C         		ld	(wave_Len),de	; LEN
(1) 3045/     E06 : 32 84 1C            		ld	(wave_Len+2),a
(1) 3046/     E09 : 5E                  		ld	e,(hl)
(1) 3047/     E0A : 23                  		inc	hl
(1) 3048/     E0B : CF                  		rst	8
(1) 3049/     E0C : 56                  		ld	d,(hl)
(1) 3050/     E0D : 23                  		inc	hl
(1) 3051/     E0E : 7E                  		ld	a,(hl)
(1) 3052/     E0F : 23                  		inc	hl
(1) 3053/     E10 : ED 53 85 1C         		ld	(wave_Loop),de	; LOOP
(1) 3054/     E14 : 32 87 1C            		ld	(wave_Loop+2),a
(1) 3055/     E17 : 11 06 28            		ld	de,2806h	; keys off
(1) 3056/     E1A : CD D9 11            		call	fm_send_1
(1) 3057/     E1D : C1                  		pop	bc
(1) 3058/     E1E : E1                  		pop	hl
(1) 3059/     E1F :                     ; .same_dac:
(1) 3060/     E1F : C9                  		ret
(1) 3061/     E20 :                     
(1) 3062/     E20 :                     ; ----------------------------------------
(1) 3063/     E20 :                     
(1) 3064/     E20 :                     .ins_pcm:
(1) 3065/     E20 : DD E5               		push	ix
(1) 3066/     E22 : E5                  		push	hl
(1) 3067/     E23 : C5                  		push	bc
(1) 3068/     E24 : 7E                  		ld	a,(hl)		; Stereo|Loop bits
(1) 3069/     E25 : E6 01               		and	00000001b	; Read loop bit
(1) 3070/     E27 : 0F                  		rrca			; Move to MSB
(1) 3071/     E28 : CF                  		rst	8
(1) 3072/     E29 : 23                  		inc	hl		; Skip ID and Pitch
(1) 3073/     E2A : 23                  		inc	hl
(1) 3074/     E2B : 5E                  		ld	e,(hl)		; Read 24-bit pointer
(1) 3075/     E2C : B3                  		or	e
(1) 3076/     E2D : 5F                  		ld	e,a
(1) 3077/     E2E : 23                  		inc	hl
(1) 3078/     E2F : 7E                  		ld	a,(hl)
(1) 3079/     E30 : 23                  		inc	hl
(1) 3080/     E31 : 6E                  		ld	l,(hl)
(1) 3081/     E32 : 67                  		ld	h,a
(1) 3082/     E33 :                     	; d    - Loop enable bit
(1) 3083/     E33 :                     	; e,hl - 24-bit pointer + loop bit
(1) 3084/     E33 : DD 21 86 14         		ld	ix,pcmcom
(1) 3085/     E37 : 06 00               		ld	b,0
(1) 3086/     E39 : FD 4E 04            		ld	c,(iy+04h)
(1) 3087/     E3C : DD 09               		add	ix,bc
(1) 3088/     E3E : 01 28 00            		ld	bc,40		; Go to 40
(1) 3089/     E41 : DD 09               		add	ix,bc
(1) 3090/     E43 : 01 08 00            		ld	bc,8
(1) 3091/     E46 : DD 73 00            		ld	(ix),e		; Write 24-bit pointer
(1) 3092/     E49 : DD 09               		add	ix,bc
(1) 3093/     E4B : DD 74 00            		ld	(ix),h
(1) 3094/     E4E : DD 09               		add	ix,bc
(1) 3095/     E50 : DD 75 00            		ld	(ix),l
(1) 3096/     E53 : C1                  		pop	bc
(1) 3097/     E54 : E1                  		pop	hl
(1) 3098/     E55 : DD E1               		pop	ix
(1) 3099/     E57 : C9                  		ret
(1) 3100/     E58 :                     
(1) 3101/     E58 :                     ; ----------------------------------------
(1) 3102/     E58 :                     
(1) 3103/     E58 :                     .ins_pwm:
(1) 3104/     E58 : DD E5               		push	ix
(1) 3105/     E5A : E5                  		push	hl
(1) 3106/     E5B : C5                  		push	bc
(1) 3107/     E5C : 7E                  		ld	a,(hl)		; Stereo|Loop bits
(1) 3108/     E5D : E6 03               		and	00000011b
(1) 3109/     E5F : 0F                  		rrca
(1) 3110/     E60 : 0F                  		rrca
(1) 3111/     E61 : 4F                  		ld	c,a
(1) 3112/     E62 : CF                  		rst	8
(1) 3113/     E63 : 23                  		inc	hl		; Skip ID and Pitch
(1) 3114/     E64 : 23                  		inc	hl
(1) 3115/     E65 : 56                  		ld	d,(hl)
(1) 3116/     E66 : 23                  		inc	hl
(1) 3117/     E67 : 5E                  		ld	e,(hl)
(1) 3118/     E68 : 23                  		inc	hl
(1) 3119/     E69 : 7E                  		ld	a,(hl)
(1) 3120/     E6A : 23                  		inc	hl
(1) 3121/     E6B : 6E                  		ld	l,(hl)
(1) 3122/     E6C : 67                  		ld	h,a
(1) 3123/     E6D : 79                  		ld	a,c
(1) 3124/     E6E : B2                  		or	d
(1) 3125/     E6F : 57                  		ld	d,a
(1) 3126/     E70 : CF                  		rst	8
(1) 3127/     E71 :                     	; de,hl - 32-bit PWM pointer
(1) 3128/     E71 : DD 21 C6 14         		ld	ix,pwmcom
(1) 3129/     E75 : 06 00               		ld	b,0
(1) 3130/     E77 : FD 4E 04            		ld	c,(iy+04h)
(1) 3131/     E7A : DD 09               		add	ix,bc
(1) 3132/     E7C : 01 18 00            		ld	bc,24
(1) 3133/     E7F : DD 09               		add	ix,bc	; Move to PWOUTF
(1) 3134/     E81 : 01 08 00            		ld	bc,8
(1) 3135/     E84 : DD 72 00            		ld	(ix),d
(1) 3136/     E87 : DD 09               		add	ix,bc
(1) 3137/     E89 : DD 73 00            		ld	(ix),e
(1) 3138/     E8C : DD 09               		add	ix,bc
(1) 3139/     E8E : DD 74 00            		ld	(ix),h
(1) 3140/     E91 : DD 09               		add	ix,bc
(1) 3141/     E93 : DD 75 00            		ld	(ix),l
(1) 3142/     E96 : C1                  		pop	bc
(1) 3143/     E97 : E1                  		pop	hl
(1) 3144/     E98 : DD E1               		pop	ix
(1) 3145/     E9A : C9                  		ret
(1) 3146/     E9B :                     
(1) 3147/     E9B :                     ; ----------------------------------------
(1) 3148/     E9B :                     ; NEW note
(1) 3149/     E9B :                     ; ----------------------------------------
(1) 3150/     E9B :                     
(1) 3151/     E9B :                     .note:
(1) 3152/     E9B : 78                  		ld	a,b		; Volume bit?
(1) 3153/     E9C : E6 04               		and	0100b
(1) 3154/     E9E : 20 05               		jr	nz,.fm_hasvol
(1) 3155/     EA0 : FD 36 08 00         		ld	(iy+08h),0	; Reset to default volume
(1) 3156/     EA4 : CF                  		rst	8
(1) 3157/     EA5 :                     .fm_hasvol:
(1) 3158/     EA5 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 3159/     EA8 : 4F                  		ld	c,a
(1) 3160/     EA9 : FE FF               		cp	-1
(1) 3161/     EAB : C8                  		ret	z
(1) 3162/     EAC : FE FE               		cp	-2
(1) 3163/     EAE : C8                  		ret	z
(1) 3164/     EAF : E7                  		rst	20h
(1) 3165/     EB0 : 7E                  		ld	a,(hl)
(1) 3166/     EB1 : E6 F0               		and	11110000b
(1) 3167/     EB3 : FE 80               		cp	80h
(1) 3168/     EB5 : 28 16               		jr	z,.n_indx
(1) 3169/     EB7 : CF                  		rst	8
(1) 3170/     EB8 : FE 90               		cp	90h
(1) 3171/     EBA : 28 20               		jr	z,.n_psgn
(1) 3172/     EBC : FE A0               		cp	0A0h
(1) 3173/     EBE : 28 21               		jr	z,.n_fm
(1) 3174/     EC0 :                     ; 		cp	0B0h		; ** Can't use notes on FM special **
(1) 3175/     EC0 :                     ; 		jr	z,.n_fm
(1) 3176/     EC0 : FE C0               		cp	0C0h
(1) 3177/     EC2 : 28 09               		jr	z,.n_indx
(1) 3178/     EC4 : FE D0               		cp	0D0h
(1) 3179/     EC6 : 28 05               		jr	z,.n_indx
(1) 3180/     EC8 : FE E0               		cp	0E0h
(1) 3181/     ECA : 28 01               		jr	z,.n_indx
(1) 3182/     ECC : C9                  		ret
(1) 3183/     ECD :                     
(1) 3184/     ECD :                     ; --------------------------------
(1) 3185/     ECD :                     
(1) 3186/     ECD :                     .n_indx:
(1) 3187/     ECD : 79                  		ld	a,c
(1) 3188/     ECE :                     .n_stfreq:
(1) 3189/     ECE : 23                  		inc	hl		; Skip ID
(1) 3190/     ECF : 5E                  		ld	e,(hl)		; Read pitch
(1) 3191/     ED0 : 2B                  		dec	hl
(1) 3192/     ED1 : 83                  		add	a,e		; Note + pitch
(1) 3193/     ED2 : CF                  		rst	8
(1) 3194/     ED3 : 87                  		add	a,a		; * 2
(1) 3195/     ED4 : FD 77 06            		ld	(iy+06h),a
(1) 3196/     ED7 : FD 36 07 00         		ld	(iy+07h),0	; reset pitchbend
(1) 3197/     EDB : C9                  		ret
(1) 3198/     EDC :                     .n_psgn:
(1) 3199/     EDC : 79                  		ld	a,c
(1) 3200/     EDD : C6 0C               		add	a,12		; <-- Manual adjust for NOISE
(1) 3201/     EDF : 18 ED               		jr	.n_stfreq
(1) 3202/     EE1 :                     
(1) 3203/     EE1 :                     ; FM freqs
(1) 3204/     EE1 :                     .n_fm:
(1) 3205/     EE1 : 79                  		ld	a,c
(1) 3206/     EE2 : 23                  		inc	hl		; Skip ID
(1) 3207/     EE3 : 5E                  		ld	e,(hl)		; Read pitch
(1) 3208/     EE4 : 2B                  		dec	hl
(1) 3209/     EE5 : CF                  		rst	8
(1) 3210/     EE6 : 83                  		add	a,e		; Note + pitch
(1) 3211/     EE7 :                     	; Search for octave and note...
(1) 3212/     EE7 : 0E 00               		ld	c,0		; c - octave
(1) 3213/     EE9 : 16 07               		ld	d,7
(1) 3214/     EEB :                     .get_oct:
(1) 3215/     EEB : 5F                  		ld	e,a		; e - note
(1) 3216/     EEC : D6 0C               		sub	12
(1) 3217/     EEE : B7                  		or	a
(1) 3218/     EEF : FA F6 0E            		jp	m,.fnd_oct
(1) 3219/     EF2 : 0C                  		inc	c
(1) 3220/     EF3 :                     ; 		nop
(1) 3221/     EF3 :                     ; 		nop
(1) 3222/     EF3 :                     ; 		rst	8
(1) 3223/     EF3 :                     ; 		nop
(1) 3224/     EF3 :                     ; 		nop
(1) 3225/     EF3 : 15                  		dec	d
(1) 3226/     EF4 : 20 F5               		jr	nz,.get_oct
(1) 3227/     EF6 :                     .fnd_oct:
(1) 3228/     EF6 : CF                  		rst	8
(1) 3229/     EF7 : 7B                  		ld	a,e
(1) 3230/     EF8 : 87                  		add	a,a		; Note * 2
(1) 3231/     EF9 : E6 1F               		and	00011111b
(1) 3232/     EFB : CB 09               		rrc	c
(1) 3233/     EFD : CB 09               		rrc	c
(1) 3234/     EFF : CB 09               		rrc	c
(1) 3235/     F01 : CF                  		rst	8
(1) 3236/     F02 : B1                  		or	c
(1) 3237/     F03 : FD 77 06            		ld	(iy+06h),a	; Save octave + index: OOOiiiiib
(1) 3238/     F06 : FD 36 07 00         		ld	(iy+07h),0
(1) 3239/     F0A : C9                  		ret
(1) 3240/     F0B :                     
(1) 3241/     F0B :                     ; ----------------------------------------
(1) 3242/     F0B :                     
(1) 3243/     F0B :                     .chnl_ulnkcut:
(1) 3244/     F0B : DD 4E 01            		ld	c,(ix+chnl_Chip)
(1) 3245/     F0E : C3 11 0F            		jp	.chnl_ulnk
(1) 3246/     F11 :                     .chnl_ulnkoff:
(1) 3247/     F11 :                     ; 		ld	c,0
(1) 3248/     F11 :                     .chnl_ulnk:
(1) 3249/     F11 : AF                  		xor	a
(1) 3250/     F12 : CF                  		rst	8
(1) 3251/     F13 : FD 77 00            		ld	(iy),a			; Delete link, chip and prio
(1) 3252/     F16 : FD 77 01            		ld	(iy+1),a
(1) 3253/     F19 : FD 77 02            		ld	(iy+2),a
(1) 3254/     F1C : FD 77 03            		ld	(iy+3),a
(1) 3255/     F1F : FD 77 08            		ld	(iy+08h),a
(1) 3256/     F22 : FD 77 09            		ld	(iy+09h),a
(1) 3257/     F25 : FD 77 0A            		ld	(iy+0Ah),a
(1) 3258/     F28 : FD 77 0B            		ld	(iy+0Bh),a
(1) 3259/     F2B : C9                  		ret
(1) 3260/     F2C :                     
(1) 3261/     F2C :                     ; 		push	iy
(1) 3262/     F2C :                     ; 		pop	hl
(1) 3263/     F2C :                     ; 		ld	bc,8-2		; Go to 08h
(1) 3264/     F2C :                     ; 		add	hl,bc
(1) 3265/     F2C :                     ; 		rst	8
(1) 3266/     F2C :                     ; 		ld	b,8/2
(1) 3267/     F2C :                     ; .clrfull:
(1) 3268/     F2C :                     ; 		ld	(hl),0		; Reset settings 08-0Bh
(1) 3269/     F2C :                     ; 		inc	hl
(1) 3270/     F2C :                     ; 		ld	(hl),0
(1) 3271/     F2C :                     ; 		inc	hl
(1) 3272/     F2C :                     ; 		rst	8
(1) 3273/     F2C :                     ; 		djnz	.clrfull
(1) 3274/     F2C :                     ; 		ret
(1) 3275/     F2C :                     
(1) 3276/     F2C :                     ; ============================================================
(1) 3277/     F2C :                     ; --------------------------------------------------------
(1) 3278/     F2C :                     ; Communication with the SCD and 32X
(1) 3279/     F2C :                     ;
(1) 3280/     F2C :                     ; SCD: Sends a level2 interrupt to Sub-CPU*
(1) 3281/     F2C :                     ; 32X: Interrupts Slave SH2 with CMD request
(1) 3282/     F2C :                     ;
(1) 3283/     F2C :                     ; *Originally meant for waiting VBlank, that's
(1) 3284/     F2C :                     ; the only one available for sending the table
(1) 3285/     F2C :                     ; --------------------------------------------------------
(1) 3286/     F2C :                     
(1) 3287/     F2C :                     ; NOTE: careful modifing this
(1) 3288/     F2C :                     
(1) 3289/     F2C :                     zmars_send:
(1) 3290/     F2C :                     	; ----------------------------------------
(1) 3291/     F2C :                     	; Send PCM table
(1) 3367/     F2C :                     	; ----------------------------------------
(1) 3368/     F2C :                     	; Send PWM table
(1) 3460/     F2C : C9                  		ret
(1) 3461/     F2D :                     
(1) 3462/     F2D :                     ; --------------------------------------------------------
(1) 3463/     F2D :                     ; Set bank to $A10000
(1) 3479/     F2D :                     
(1) 3480/     F2D :                     ; ====================================================================
(1) 3481/     F2D :                     ; ----------------------------------------------------------------
(1) 3482/     F2D :                     ; Subroutines
(1) 3483/     F2D :                     ; ----------------------------------------------------------------
(1) 3484/     F2D :                     
(1) 3485/     F2D :                     ; --------------------------------------------------------
(1) 3486/     F2D :                     ; Init sound engine
(1) 3487/     F2D :                     ; --------------------------------------------------------
(1) 3488/     F2D :                     
(1) 3489/     F2D :                     gema_init:
(1) 3490/     F2D : CD 04 12            		call	dac_off
(1) 3491/     F30 : AF                  		xor	a
(1) 3492/     F31 :                     ; 		ld	(marsUpd),a
(1) 3493/     F31 :                     ; 		ld	(mcdUpd),a
(1) 3494/     F31 : 32 30 00            		ld	(cdRamLen),a
(1) 3495/     F34 : CD 13 13            		call	gema_lastbank	; Set last bank slot BEFORE writing to PSG (32X bus problem)
(1) 3496/     F37 : 21 11 7F            		ld	hl,Zpsg_ctrl	; Silence PSG channels
(1) 3497/     F3A : 36 9F               		ld	(hl),09Fh
(1) 3498/     F3C : 36 BF               		ld	(hl),0BFh
(1) 3499/     F3E : 36 DF               		ld	(hl),0DFh
(1) 3500/     F40 : 36 FF               		ld	(hl),0FFh
(1) 3501/     F42 : 11 0B 22            		ld	de,2208h|03h	; Set Default LFO
(1) 3502/     F45 : CD D9 11            		call	fm_send_1
(1) 3503/     F48 : 11 00 27            		ld	de,2700h	; CH3 special and timers off
(1) 3504/     F4B : CD D9 11            		call	fm_send_1
(1) 3505/     F4E :                     ; 		ld	de,2800h	; FM KEYS off
(1) 3506/     F4E : 14                  		inc	d
(1) 3507/     F4F : CD D9 11            		call	fm_send_1
(1) 3508/     F52 : 1C                  		inc	e
(1) 3509/     F53 : CD D9 11            		call	fm_send_1
(1) 3510/     F56 : 1C                  		inc	e
(1) 3511/     F57 : CD D9 11            		call	fm_send_1
(1) 3512/     F5A : 1C                  		inc	e
(1) 3513/     F5B : 1C                  		inc	e
(1) 3514/     F5C : CD D9 11            		call	fm_send_1
(1) 3515/     F5F : 1C                  		inc	e
(1) 3516/     F60 : CD D9 11            		call	fm_send_1
(1) 3517/     F63 : 1C                  		inc	e
(1) 3518/     F64 : CD D9 11            		call	fm_send_1
(1) 3519/     F67 : FD 21 64 14         		ld	iy,nikona_BuffList
(1) 3520/     F6B : 0E 01               		ld	c,1			; Start at this priority
(1) 3521/     F6D :                     .setup_list:
(1) 3522/     F6D : FD 7E 00            		ld	a,(iy)
(1) 3523/     F70 : FE FF               		cp	-1
(1) 3524/     F72 : 28 24               		jr	z,.end_setup
(1) 3525/     F74 : FD 23               		inc	iy
(1) 3526/     F76 : 6F                  		ld	l,a
(1) 3527/     F77 : FD 66 00            		ld	h,(iy)
(1) 3528/     F7A : E5                  		push	hl
(1) 3529/     F7B : DD E1               		pop	ix
(1) 3530/     F7D : DD 71 14            		ld	(ix+trk_Priority),c
(1) 3531/     F80 : DD 36 01 FF         		ld	(ix+trk_SeqId),-1	; Reset sequence ID
(1) 3532/     F84 : FD 23               		inc	iy
(1) 3533/     F86 :                     	; iy - src
(1) 3534/     F86 :                     	; hl - dst
(1) 3535/     F86 : 11 04 00            		ld	de,trk_Blocks
(1) 3536/     F89 : 19                  		add	hl,de
(1) 3537/     F8A : 06 06               		ld	b,MAX_BUFFNTRY-2
(1) 3538/     F8C :                     .st_copy:
(1) 3539/     F8C : FD 7E 00            		ld	a,(iy)
(1) 3540/     F8F : 77                  		ld	(hl),a
(1) 3541/     F90 : FD 23               		inc	iy
(1) 3542/     F92 : 23                  		inc	hl
(1) 3543/     F93 : 10 F7               		djnz	.st_copy
(1) 3544/     F95 : 0C                  		inc	c
(1) 3545/     F96 : 18 D5               		jr	.setup_list
(1) 3546/     F98 :                     .end_setup:
(1) 3547/     F98 : C9                  		ret
(1) 3548/     F99 :                     
(1) 3549/     F99 :                     ; --------------------------------------------------------
(1) 3550/     F99 :                     ; get_tick
(1) 3551/     F99 :                     ;
(1) 3552/     F99 :                     ; Checks if VBlank triggred a TICK
(1) 3553/     F99 :                     ; (1/150 NTSC, 1/120 PAL)
(1) 3554/     F99 :                     ; --------------------------------------------------------
(1) 3555/     F99 :                     
(1) 3556/     F99 :                     get_tick:
(1) 3557/     F99 : F3                  		di				; Disable ints
(1) 3558/     F9A : F5                  		push	af
(1) 3559/     F9B : E5                  		push	hl
(1) 3560/     F9C : 21 71 1C            		ld	hl,tickFlag		; read last TICK flag
(1) 3561/     F9F : 7E                  		ld	a,(hl)			; non-zero value (1Fh)?
(1) 3562/     FA0 : B7                  		or 	a
(1) 3563/     FA1 : 28 13               		jr	z,.ctnotick
(1) 3564/     FA3 : 36 00               		ld	(hl),0			; Reset TICK flag
(1) 3565/     FA5 : 23                  		inc	hl			; Move to tickCnt
(1) 3566/     FA6 : 34                  		inc	(hl)			; and increment
(1) 3567/     FA7 : CF                  		rst	8
(1) 3568/     FA8 : D5                  		push	de
(1) 3569/     FA9 : 2A 8E 1C            		ld	hl,(sbeatAcc)		; Increment subbeats
(1) 3570/     FAC : ED 5B 90 1C         		ld	de,(sbeatPtck)
(1) 3571/     FB0 : CF                  		rst	8
(1) 3572/     FB1 : 19                  		add	hl,de
(1) 3573/     FB2 : 22 8E 1C            		ld	(sbeatAcc),hl
(1) 3574/     FB5 : D1                  		pop	de
(1) 3575/     FB6 :                     .ctnotick:
(1) 3576/     FB6 : E1                  		pop	hl
(1) 3577/     FB7 : F1                  		pop	af
(1) 3578/     FB8 : FB                  		ei				; Enable ints again
(1) 3579/     FB9 : C9                  		ret
(1) 3580/     FBA :                     
(1) 3581/     FBA :                     ; --------------------------------------------------------
(1) 3582/     FBA :                     ; transferRom
(1) 3583/     FBA :                     ;
(1) 3584/     FBA :                     ; Transfer bytes from ROM to RAM. This also tells
(1) 3585/     FBA :                     ; to 68k that we want to access ROM
(1) 3586/     FBA :                     ;
(1) 3587/     FBA :                     ; Input:
(1) 3588/     FBA :                     ; a  - 68K Address $xx0000
(1) 3589/     FBA :                     ;  c - Byte count (size 0 NOT allowed, MAX: 0FFh)
(1) 3590/     FBA :                     ; hl - 68K Address $00xxxx
(1) 3591/     FBA :                     ; de - Destination pointer
(1) 3592/     FBA :                     ;
(1) 3593/     FBA :                     ; Uses:
(1) 3594/     FBA :                     ; b
(1) 3595/     FBA :                     ;
(1) 3596/     FBA :                     ; Notes:
(1) 3597/     FBA :                     ; call RST 20h first if transfering anything other
(1) 3598/     FBA :                     ; than sample data, just to be safe.
(1) 3599/     FBA :                     ; --------------------------------------------------------
(1) 3600/     FBA :                     
(1) 3601/     FBA :                     transferRom:
(1) 3602/     FBA : FE FF               		cp	0FFh		; <-- WORKAROUND FOR $FF0000 area
(1) 3603/     FBC : 28 43               		jr	z,.from_ram
(1) 3604/     FBE : CF                  		rst	8
(1) 3605/     FBF : DD E5               		push	ix
(1) 3606/     FC1 : DD 21 2F 00         		ld	ix,commZRomBlk	; ix - rom read/block flags
(1) 3607/     FC5 : 22 8C 1C            		ld	(x68ksrclsb),hl	; save hl copy
(1) 3608/     FC8 : CB BC               		res	7,h
(1) 3609/     FCA : 06 00               		ld	b,0
(1) 3610/     FCC : 0B                  		dec	bc
(1) 3611/     FCD : 09                  		add	hl,bc
(1) 3612/     FCE : CB 7C               		bit	7,h
(1) 3613/     FD0 : 20 0B               		jr	nz,.double
(1) 3614/     FD2 : 2A 8C 1C            		ld	hl,(x68ksrclsb)	; single transfer
(1) 3615/     FD5 : 0C                  		inc	c
(1) 3616/     FD6 : 47                  		ld	b,a
(1) 3617/     FD7 : CD 1F 10            		call	.transfer
(1) 3618/     FDA : DD E1               		pop	ix
(1) 3619/     FDC : C9                  		ret
(1) 3620/     FDD :                     .double:
(1) 3621/     FDD : CF                  		rst	8
(1) 3622/     FDE : 47                  		ld	b,a		; double transfer
(1) 3623/     FDF : C5                  		push	bc
(1) 3624/     FE0 : E5                  		push	hl
(1) 3625/     FE1 : 79                  		ld	a,c
(1) 3626/     FE2 : 95                  		sub	a,l
(1) 3627/     FE3 : 4F                  		ld	c,a
(1) 3628/     FE4 : 2A 8C 1C            		ld	hl,(x68ksrclsb)
(1) 3629/     FE7 : CD 1F 10            		call	.transfer
(1) 3630/     FEA : E1                  		pop	hl
(1) 3631/     FEB : C1                  		pop	bc
(1) 3632/     FEC :                     ; 		rst	8
(1) 3633/     FEC : 4D                  		ld	c,l
(1) 3634/     FED : 0C                  		inc	c
(1) 3635/     FEE : 3A 8D 1C            		ld	a,(x68ksrcmid)
(1) 3636/     FF1 : E6 80               		and	80h
(1) 3637/     FF3 : C6 80               		add	a,80h
(1) 3638/     FF5 : 67                  		ld	h,a
(1) 3639/     FF6 : 2E 00               		ld	l,0
(1) 3640/     FF8 : 30 01               		jr	nc,.x68knocarry
(1) 3641/     FFA : 04                  		inc	b
(1) 3642/     FFB :                     .x68knocarry:
(1) 3643/     FFB : CD 1F 10            		call	.transfer
(1) 3644/     FFE : DD E1               		pop	ix
(1) 3645/    1000 : C9                  		ret
(1) 3646/    1001 :                     
(1) 3647/    1001 :                     ; ------------------------------------------------
(1) 3648/    1001 :                     ; WORKAROUND FOR READING FROM $FF0000 RAM
(1) 3649/    1001 :                     ;
(1) 3650/    1001 :                     ; On the 68K side YOU MUST CALL
(1) 3651/    1001 :                     ; Sound_Update on a loop during Display.
(1) 3652/    1001 :                     ; ------------------------------------------------
(1) 3653/    1001 :                     
(1) 3654/    1001 :                     .from_ram:
(1) 3655/    1001 : ED 53 31 00         		ld	(cdRamDst),de
(1) 3656/    1005 : 22 33 00            		ld	(cdRamSrc),hl
(1) 3657/    1008 : 32 35 00            		ld	(cdRamSrcB),a
(1) 3658/    100B : CD 13 13            		call	gema_lastbank			; ** Set bank to $FF8000 area
(1) 3659/    100E : CF                  		rst	8
(1) 3660/    100F : 79                  		ld	a,c
(1) 3661/    1010 : 32 30 00            		ld	(cdRamLen),a
(1) 3662/    1013 : 21 00 FF            		ld	hl,RAM_ZCdFlag_D&07FFFh+8000h	; ** EXTERNAL WRITE TO 68K RAM **
(1) 3663/    1016 : 36 01               		ld	(hl),1				; WRITE TO RAM: Set request, 68k clears.
(1) 3664/    1018 :                     .wait:
(1) 3665/    1018 : 3A 30 00            		ld	a,(cdRamLen)			; Wait until 68K clears this
(1) 3666/    101B : B7                  		or	a
(1) 3667/    101C : 20 FA               		jr	nz,.wait
(1) 3668/    101E : C9                  		ret
(1) 3669/    101F :                     
(1) 3670/    101F :                     ; ------------------------------------------------
(1) 3671/    101F :                     ; b  - Source ROM bank
(1) 3672/    101F :                     ;  c - Bytes to transfer (00h is invalid)
(1) 3673/    101F :                     ; hl - Source ROM $00xxxx | 8000h
(1) 3674/    101F :                     ; de - Destination address
(1) 3675/    101F :                     ; ix - ROM-block flag
(1) 3676/    101F :                     ; ------------------------------------------------
(1) 3677/    101F :                     
(1) 3678/    101F :                     .transfer:
(1) 3679/    101F : CF                  		rst	8
(1) 3680/    1020 : D5                  		push	de
(1) 3681/    1021 : 11 00 60            		ld	de,6000h
(1) 3682/    1024 : 7C                  		ld	a,h
(1) 3683/    1025 : 07                  		rlca
(1) 3684/    1026 : 12                  		ld	(de),a
(1) 3685/    1027 : 78                  		ld	a,b
(1) 3686/    1028 : CF                  		rst	8
(1) 3687/    1029 : 12                  		ld	(de),a
(1) 3688/    102A : 0F                  		rrca
(1) 3689/    102B : 12                  		ld	(de),a
(1) 3690/    102C : 0F                  		rrca
(1) 3691/    102D : 12                  		ld	(de),a
(1) 3692/    102E : 0F                  		rrca
(1) 3693/    102F : 12                  		ld	(de),a
(1) 3694/    1030 : 0F                  		rrca
(1) 3695/    1031 : CF                  		rst	8
(1) 3696/    1032 : 12                  		ld	(de),a
(1) 3697/    1033 : 0F                  		rrca
(1) 3698/    1034 : 12                  		ld	(de),a
(1) 3699/    1035 : 0F                  		rrca
(1) 3700/    1036 : 12                  		ld	(de),a
(1) 3701/    1037 : 0F                  		rrca
(1) 3702/    1038 : 12                  		ld	(de),a
(1) 3703/    1039 : D1                  		pop	de
(1) 3704/    103A : CB FC               		set	7,h
(1) 3705/    103C : CF                  		rst	8
(1) 3706/    103D :                     
(1) 3707/    103D :                     	; Transfer ROM data in packets
(1) 3708/    103D :                     	; while playing the cache'd sample
(1) 3709/    103D :                     	; *** CRITICAL PROCESS ***
(1) 3710/    103D :                     	;
(1) 3711/    103D :                     	; pseudo-ref for ldir:
(1) 3712/    103D :                     	; ld (de),(hl)	; load (hl) to (de) directly
(1) 3713/    103D :                     	; inc de	; next de
(1) 3714/    103D :                     	; inc hl	; next hl
(1) 3715/    103D :                     	; dec bc	; decrement bc
(1) 3716/    103D :                     	;
(1) 3717/    103D : 06 00               		ld	b,0
(1) 3718/    103F : 79                  		ld	a,c		; a - Size counter
(1) 3719/    1040 :                     ; 		set	1,(ix)
(1) 3720/    1040 : D6 08               		sub	MAX_TRFRPZ	; Length lower than MAX_TRFRPZ?
(1) 3721/    1042 : 38 14               		jr	c,.x68klast	; Process single piece only
(1) 3722/    1044 :                     .x68kloop:
(1) 3723/    1044 : CF                  		rst	8
(1) 3724/    1045 : 00                  		nop
(1) 3725/    1046 : 0E 07               		ld	c,MAX_TRFRPZ-1
(1) 3726/    1048 : DD CB 00 46         		bit	0,(ix)		; Genesis requests BUS?
(1) 3727/    104C : C4 66 10            		call	nz,.x68klpwt
(1) 3728/    104F : ED B0               		ldir			; (de) to (hl) until bc == 0
(1) 3729/    1051 : CF                  		rst	8
(1) 3730/    1052 : 00                  		nop
(1) 3731/    1053 : D6 07               		sub	a,MAX_TRFRPZ-1
(1) 3732/    1055 : D2 44 10            		jp	nc,.x68kloop
(1) 3733/    1058 :                     ; last block
(1) 3734/    1058 :                     .x68klast:
(1) 3735/    1058 : C6 08               		add	a,MAX_TRFRPZ
(1) 3736/    105A : 4F                  		ld	c,a
(1) 3737/    105B : DD CB 00 46         		bit	0,(ix)		; Genesis requests BUS?
(1) 3738/    105F : C4 66 10            		call	nz,.x68klpwt
(1) 3739/    1062 : ED B0               		ldir
(1) 3740/    1064 : CF                  		rst	8
(1) 3741/    1065 : C9                  		ret
(1) 3742/    1066 :                     
(1) 3743/    1066 :                     ; Wait here until Genesis unlocks ROM
(1) 3744/    1066 :                     .x68klpwt:
(1) 3745/    1066 : 00                  		nop	; WAVE SYNC
(1) 3746/    1067 : 00                  		nop
(1) 3747/    1068 :                     .x68kpwtlp:
(1) 3748/    1068 : CF                  		rst	8
(1) 3749/    1069 : 00                  		nop	; WAVE SYNC
(1) 3750/    106A : 00                  		nop
(1) 3751/    106B : DD CB 00 46         		bit	0,(ix)		; 68k finished?
(1) 3752/    106F : 20 F7               		jr	nz,.x68kpwtlp
(1) 3753/    1071 : C9                  		ret
(1) 3754/    1072 :                     
(1) 3755/    1072 :                     ; ====================================================================
(1) 3756/    1072 :                     ; ----------------------------------------------------------------
(1) 3757/    1072 :                     ; Sound chip routines
(1) 3758/    1072 :                     ; ----------------------------------------------------------------
(1) 3759/    1072 :                     
(1) 3760/    1072 :                     ; --------------------------------------------------------
(1) 3761/    1072 :                     ; chip_env
(1) 3762/    1072 :                     ;
(1) 3763/    1072 :                     ; Process the PSG
(1) 3764/    1072 :                     ; --------------------------------------------------------
(1) 3765/    1072 :                     
(1) 3766/    1072 :                     chip_env:
(1) 3770/    1072 : FD 21 01 15         		ld	iy,psgcom+3		; Start from NOISE first
(1) 3771/    1076 : DD 21 11 7F         		ld	ix,Zpsg_ctrl
(1) 3772/    107A : 0E E0               		ld	c,0E0h			; c - PSG first ctrl command
(1) 3773/    107C : 06 04               		ld	b,4			; b - 4 channels
(1) 3774/    107E :                     .vloop:
(1) 3775/    107E : CF                  		rst	8
(1) 3776/    107F : FD 5E 00            		ld	e,(iy+COM)		; e - current command
(1) 3777/    1082 : FD 36 00 00         		ld	(iy+COM),0
(1) 3778/    1086 :                     
(1) 3779/    1086 :                     	; ----------------------------
(1) 3780/    1086 :                     	; bit 2 - stop sound
(1) 3781/    1086 : CB 53               		bit	2,e
(1) 3782/    1088 : 28 0C               		jr	z,.ckof
(1) 3783/    108A : FD 36 04 FF         		ld	(iy+LEV),-1		; reset level
(1) 3784/    108E : FD 36 28 01         		ld	(iy+FLG),1		; and update
(1) 3785/    1092 : FD 36 18 00         		ld	(iy+MODE),0		; envelope off
(1) 3786/    1096 :                     .ckof:
(1) 3787/    1096 :                     	; ----------------------------
(1) 3788/    1096 :                     	; bit 1 - key off
(1) 3789/    1096 : CB 4B               		bit	1,e
(1) 3790/    1098 : 28 0F               		jr      z,.ckon
(1) 3791/    109A : FD 7E 18            		ld	a,(iy+MODE)		; mode 0?
(1) 3792/    109D : B7                  		or	a
(1) 3793/    109E : 28 09               		jr	z,.ckon
(1) 3794/    10A0 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3795/    10A4 : FD 36 18 04         		ld	(iy+MODE),100b		; set envelope mode 100b
(1) 3796/    10A8 : CF                  		rst	8
(1) 3797/    10A9 :                     .ckon:
(1) 3798/    10A9 :                     	; ----------------------------
(1) 3799/    10A9 :                     	; bit 0 - key on
(1) 3800/    10A9 : CB 43               		bit	0,e
(1) 3801/    10AB : 28 1A               		jr	z,.envproc
(1) 3802/    10AD : FD 36 04 FF         		ld	(iy+LEV),-1		; reset level
(1) 3803/    10B1 : 78                  		ld	a,b
(1) 3804/    10B2 : FE 04               		cp	4			; NOISE channel?
(1) 3805/    10B4 : 20 08               		jr	nz,.nskip
(1) 3806/    10B6 : CF                  		rst	8			; Set NOISE mode
(1) 3807/    10B7 : 3A 73 1C            		ld	a,(psgHatMode)		; write hat mode only.
(1) 3808/    10BA : B1                  		or	c
(1) 3809/    10BB : DD 77 00            		ld	(ix),a			; WRITE PSG
(1) 3810/    10BE :                     .nskip:
(1) 3811/    10BE : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3812/    10C2 : CF                  		rst	8
(1) 3813/    10C3 : FD 36 18 01         		ld	(iy+MODE),001b		; set to attack mode
(1) 3814/    10C7 :                     .nblock:
(1) 3815/    10C7 :                     
(1) 3816/    10C7 :                     	; ----------------------------
(1) 3817/    10C7 :                     	; Process effects
(1) 3818/    10C7 :                     	; ----------------------------
(1) 3819/    10C7 :                     .envproc:
(1) 3820/    10C7 : FD 7E 18            		ld	a,(iy+MODE)
(1) 3821/    10CA : B7                  		or	a			; no modes
(1) 3822/    10CB : CA 51 11            		jp	z,.vedlp
(1) 3823/    10CE : FE 01               		cp 	001b			; Attack mode
(1) 3824/    10D0 : 20 2C               		jr	nz,.chk2
(1) 3825/    10D2 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3826/    10D6 : FD 5E 24            		ld	e,(iy+ALV)
(1) 3827/    10D9 : FD 7E 08            		ld	a,(iy+ATK)		; if ATK == 0, don't use
(1) 3828/    10DC : B7                  		or	a
(1) 3829/    10DD : 28 16               		jr	z,.atkend
(1) 3830/    10DF : 57                  		ld	d,a			; c - attack rate
(1) 3831/    10E0 : 7B                  		ld	a,e			; a - attack level
(1) 3832/    10E1 : CF                  		rst	8
(1) 3833/    10E2 : FD 5E 24            		ld	e,(iy+ALV)		; b - OLD attack level
(1) 3834/    10E5 : 92                  		sub	a,d			; (attack rate) - (level)
(1) 3835/    10E6 : 38 0D               		jr	c,.atkend		; if carry: already finished
(1) 3836/    10E8 : 28 0B               		jr	z,.atkend		; if zero: no attack rate
(1) 3837/    10EA : BB                  		cp	e			; attack rate == level?
(1) 3838/    10EB : 38 08               		jr	c,.atkend
(1) 3839/    10ED : 28 06               		jr	z,.atkend
(1) 3840/    10EF : FD 77 04            		ld	(iy+LEV),a		; set new level
(1) 3841/    10F2 : CF                  		rst	8
(1) 3842/    10F3 : 18 5C               		jr	.vedlp
(1) 3843/    10F5 :                     .atkend:
(1) 3844/    10F5 : FD 73 04            		ld	(iy+LEV),e		; attack level = new level
(1) 3845/    10F8 :                     .atkzero:
(1) 3846/    10F8 : FD 36 18 02         		ld	(iy+MODE),010b		; set to decay mode
(1) 3847/    10FC : 18 53               		jr	.vedlp
(1) 3848/    10FE :                     .chk2:
(1) 3849/    10FE :                     
(1) 3850/    10FE : FE 02               		cp	010b			; Decay mode
(1) 3851/    1100 : 20 31               		jr	nz,.chk4
(1) 3852/    1102 :                     .dectmr:
(1) 3853/    1102 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3854/    1106 : FD 7E 04            		ld	a,(iy+LEV)		; a - Level
(1) 3855/    1109 : FD 5E 10            		ld	e,(iy+SLV)		; b - Sustain
(1) 3856/    110C : BB                  		cp	e
(1) 3857/    110D : 38 0D               		jr	c,.dkadd		; if carry: add
(1) 3858/    110F : 28 18               		jr	z,.dkyend		; if zero:  finish
(1) 3859/    1111 : CF                  		rst	8
(1) 3860/    1112 : FD 96 0C            		sub	(iy+DKY)		; substract decay rate
(1) 3861/    1115 : 38 12               		jr	c,.dkyend		; finish if wraped.
(1) 3862/    1117 : BB                  		cp	e			; compare level
(1) 3863/    1118 : 38 0F               		jr	c,.dkyend		; and finish
(1) 3864/    111A : 18 08               		jr	.dksav
(1) 3865/    111C :                     .dkadd:
(1) 3866/    111C : FD 86 0C            		add	a,(iy+DKY)		;  (level) + (decay rate)
(1) 3867/    111F : 38 08               		jr	c,.dkyend		; finish if wraped.
(1) 3868/    1121 : BB                  		cp	e			; compare level
(1) 3869/    1122 : 30 05               		jr	nc,.dkyend
(1) 3870/    1124 :                     .dksav:
(1) 3871/    1124 : FD 77 04            		ld	(iy+LEV),a		; save new level
(1) 3872/    1127 : 18 28               		jr	.vedlp
(1) 3873/    1129 :                     .dkyend:
(1) 3874/    1129 : CF                  		rst	8
(1) 3875/    112A : FD 73 04            		ld	(iy+LEV),e		; save last attack
(1) 3876/    112D : FD 36 18 04         		ld	(iy+MODE),100b		; and set to sustain
(1) 3877/    1131 : 18 1E               		jr	.vedlp
(1) 3878/    1133 :                     .chk4:
(1) 3879/    1133 : FE 04               		cp	100b			; Sustain phase
(1) 3880/    1135 : 20 1A               		jr	nz,.vedlp
(1) 3881/    1137 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3882/    113B : FD 7E 04            		ld	a,(iy+LEV)		; a - Level
(1) 3883/    113E : CF                  		rst	8
(1) 3884/    113F : FD 86 14            		add 	a,(iy+RRT)		; add Release Rate
(1) 3885/    1142 : 38 05               		jr	c,.killenv		; release done
(1) 3886/    1144 : FD 77 04            		ld	(iy+LEV),a		; set new Level
(1) 3887/    1147 : 18 08               		jr	.vedlp
(1) 3888/    1149 :                     .killenv:
(1) 3889/    1149 : FD 36 04 FF         		ld	(iy+LEV),-1		; Silence this channel
(1) 3890/    114D : FD 36 18 00         		ld	(iy+MODE),0		; Reset mode
(1) 3891/    1151 :                     .vedlp:
(1) 3892/    1151 :                     
(1) 3893/    1151 :                     	; ----------------------------
(1) 3894/    1151 :                     	; PSG UPDATE
(1) 3895/    1151 :                     	; ----------------------------
(1) 3896/    1151 : FD 7E 28            		ld	a,(iy+FLG)
(1) 3897/    1154 : B7                  		or	a
(1) 3898/    1155 : 28 72               		jr	z,.noupd
(1) 3899/    1157 : FD 36 28 00         		ld	(iy+FLG),0	; Reset until next one
(1) 3900/    115B : 59                  		ld	e,c
(1) 3901/    115C : 3A 73 1C            		ld	a,(psgHatMode)
(1) 3902/    115F : 57                  		ld	d,a
(1) 3903/    1160 : E6 03               		and	011b
(1) 3904/    1162 : FE 03               		cp	011b
(1) 3905/    1164 : 20 1D               		jr	nz,.normal
(1) 3906/    1166 : CF                  		rst	8
(1) 3907/    1167 : 78                  		ld	a,b		; Channel 4?
(1) 3908/    1168 : FE 03               		cp	3
(1) 3909/    116A : 28 13               		jr	z,.silnc_3
(1) 3910/    116C : FE 04               		cp	4
(1) 3911/    116E : 20 18               		jr	nz,.do_nfreq
(1) 3912/    1170 : 3A 73 1C            		ld	a,(psgHatMode)
(1) 3913/    1173 : 57                  		ld	d,a
(1) 3914/    1174 : E6 03               		and	011b
(1) 3915/    1176 : CF                  		rst	8
(1) 3916/    1177 : FE 03               		cp	011b
(1) 3917/    1179 : 20 30               		jr	nz,.vonly
(1) 3918/    117B : 1E C0               		ld	e,0C0h
(1) 3919/    117D : 18 09               		jr	.do_nfreq
(1) 3920/    117F :                     .silnc_3:
(1) 3921/    117F : 3E FF               		ld	a,-1
(1) 3922/    1181 : 18 32               		jr	.vlmuch
(1) 3923/    1183 :                     .normal:
(1) 3924/    1183 : 78                  		ld	a,b
(1) 3925/    1184 : FE 04               		cp	4
(1) 3926/    1186 : 28 23               		jr	z,.vonly
(1) 3927/    1188 :                     .do_nfreq:
(1) 3928/    1188 : FD 6E 1C            		ld	l,(iy+DTL)
(1) 3929/    118B : FD 66 20            		ld	h,(iy+DTH)
(1) 3930/    118E :                     
(1) 3931/    118E :                     	; freq effects go here
(1) 3932/    118E :                     	; (save e FIRST.)
(1) 3933/    118E :                     	;	push	de
(1) 3934/    118E :                     	;	pop	de
(1) 3935/    118E : 7D                  		ld	a,l		; Grab LSB 4 right bits
(1) 3936/    118F : E6 0F               		and	00001111b
(1) 3937/    1191 : B3                  		or	e		; OR with channel set in e
(1) 3938/    1192 : CF                  		rst	8
(1) 3939/    1193 : DD 77 00            		ld	(ix),a		; write it
(1) 3940/    1196 : 7D                  		ld	a,l		; Grab LSB 4 left bits
(1) 3941/    1197 : 0F                  		rrca
(1) 3942/    1198 : 0F                  		rrca
(1) 3943/    1199 : 0F                  		rrca
(1) 3944/    119A : 0F                  		rrca
(1) 3945/    119B : E6 0F               		and	00001111b
(1) 3946/    119D : 5F                  		ld	e,a
(1) 3947/    119E : 7C                  		ld	a,h		; Grab MSB bits
(1) 3948/    119F : CF                  		rst	8
(1) 3949/    11A0 : 07                  		rlca
(1) 3950/    11A1 : 07                  		rlca
(1) 3951/    11A2 : 07                  		rlca
(1) 3952/    11A3 : 07                  		rlca
(1) 3953/    11A4 : E6 30               		and	00110000b
(1) 3954/    11A6 : B3                  		or	e
(1) 3955/    11A7 : DD 77 00            		ld	(ix),a
(1) 3956/    11AA : CF                  		rst	8
(1) 3957/    11AB :                     .vonly:
(1) 3958/    11AB : FD 7E 30            		ld	a,(iy+PVOL)		; c - Level
(1) 3959/    11AE : FD 86 04            		add	a,(iy+LEV)		; Add MASTER volume
(1) 3960/    11B1 : 30 02               		jr	nc,.vlmuch
(1) 3961/    11B3 : 3E FF               		ld	a,-1
(1) 3962/    11B5 :                     .vlmuch:
(1) 3963/    11B5 : CB 3F               		srl	a			; (Level >> 4)
(1) 3964/    11B7 : CB 3F               		srl	a
(1) 3965/    11B9 : CB 3F               		srl	a
(1) 3966/    11BB : CF                  		rst	8
(1) 3967/    11BC : CB 3F               		srl	a
(1) 3968/    11BE : E6 0F               		and	00001111b		; Filter volume value
(1) 3969/    11C0 : B1                  		or	c			; and OR with current channel
(1) 3970/    11C1 : F6 90               		or	90h			; Set volume-set mode
(1) 3972/    11C3 : DD 77 00            		ld	(ix),a			; *** WRITE volume
(1) 3974/    11C6 : FD 34 38            		inc	(iy+PTMR)		; Update general timer
(1) 3975/    11C9 :                     .noupd:
(1) 3976/    11C9 :                     	; ----------------------------
(1) 3977/    11C9 : FD 2B               		dec	iy			; next COM to check (backwards)
(1) 3978/    11CB : 79                  		ld	a,c
(1) 3979/    11CC : CF                  		rst	8
(1) 3980/    11CD : D6 20               		sub	a,20h			; next PSG (backwards)
(1) 3981/    11CF : 4F                  		ld	c,a
(1) 3982/    11D0 : 05                  		dec	b
(1) 3983/    11D1 : C2 7E 10            		jp	nz,.vloop
(1) 3984/    11D4 : C9                  		ret
(1) 3985/    11D5 :                     
(1) 3986/    11D5 :                     ; ---------------------------------------------
(1) 3987/    11D5 :                     ; FM register writes
(1) 3988/    11D5 :                     ;
(1) 3989/    11D5 :                     ; Input:
(1) 3990/    11D5 :                     ; d - ctrl
(1) 3991/    11D5 :                     ; e - data
(1) 3992/    11D5 :                     ; ---------------------------------------------
(1) 3993/    11D5 :                     
(1) 3994/    11D5 :                     ; c - KeyID
(1) 3995/    11D5 :                     fm_autoreg:
(1) 3996/    11D5 : CB 51               		bit	2,c
(1) 3997/    11D7 : 20 0B               		jr	nz,fm_send_2
(1) 3998/    11D9 :                     
(1) 3999/    11D9 :                     ; Channels 1-3 and global registers
(1) 4000/    11D9 :                     fm_send_1:
(1) 4001/    11D9 : 7A                  		ld	a,d
(1) 4002/    11DA : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 4003/    11DD : 00                  		nop
(1) 4004/    11DE : 7B                  		ld	a,e
(1) 4005/    11DF : 32 01 40            		ld	(Zym_data_1),a
(1) 4006/    11E2 : 00                  		nop
(1) 4007/    11E3 : C9                  		ret
(1) 4008/    11E4 :                     ; Channels 4-6
(1) 4009/    11E4 :                     fm_send_2:
(1) 4010/    11E4 : 7A                  		ld	a,d
(1) 4011/    11E5 : 32 02 40            		ld	(Zym_ctrl_2),a
(1) 4012/    11E8 : 00                  		nop
(1) 4013/    11E9 : 7B                  		ld	a,e
(1) 4014/    11EA : 32 03 40            		ld	(Zym_data_2),a
(1) 4015/    11ED : 00                  		nop
(1) 4016/    11EE : C9                  		ret
(1) 4017/    11EF :                     
(1) 4018/    11EF :                     ; --------------------------------------------------------
(1) 4019/    11EF :                     ; brute-force WAVE ON/OFF playback
(1) 4020/    11EF :                     ; --------------------------------------------------------
(1) 4021/    11EF :                     
(1) 4022/    11EF :                     dac_on:
(1) 4023/    11EF : 3E 2B               		ld	a,2Bh
(1) 4024/    11F1 : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 4025/    11F4 : 3E 80               		ld	a,80h
(1) 4026/    11F6 : 32 01 40            		ld	(Zym_data_1),a
(1) 4027/    11F9 : 3E D9               		ld 	a,zopcExx
(1) 4028/    11FB : 32 08 00            		ld	(dac_me),a
(1) 4029/    11FE : 3E F5               		ld 	a,zopcPushAf
(1) 4030/    1200 : 32 20 00            		ld	(dac_fill),a
(1) 4031/    1203 : C9                  		ret
(1) 4032/    1204 :                     dac_off:
(1) 4033/    1204 : 3E 2B               		ld	a,2Bh
(1) 4034/    1206 : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 4035/    1209 : 3E 00               		ld	a,00h
(1) 4036/    120B : 32 01 40            		ld	(Zym_data_1),a
(1) 4037/    120E : 3E C9               		ld 	a,zopcRet
(1) 4038/    1210 : 32 08 00            		ld	(dac_me),a
(1) 4039/    1213 : 3E C9               		ld 	a,zopcRet
(1) 4040/    1215 : 32 20 00            		ld	(dac_fill),a
(1) 4041/    1218 : C9                  		ret
(1) 4042/    1219 :                     
(1) 4043/    1219 :                     ; --------------------------------------------------------
(1) 4044/    1219 :                     ; dac_play
(1) 4045/    1219 :                     ;
(1) 4046/    1219 :                     ; Plays a new sample
(1) 4047/    1219 :                     ;
(1) 4048/    1219 :                     ; NOTE:
(1) 4049/    1219 :                     ; Set wave_Flags and wave_Pitch externally
(1) 4050/    1219 :                     ; getting here.
(1) 4051/    1219 :                     ; --------------------------------------------------------
(1) 4052/    1219 :                     
(1) 4053/    1219 :                     dac_play:
(1) 4054/    1219 : F3                  		di
(1) 4055/    121A : CD 04 12            		call	dac_off
(1) 4056/    121D : D9                  		exx				; flip exx regs
(1) 4057/    121E : 01 1D 00            		ld	bc,dWaveBuff>>8		; bc - WAVFIFO MSB
(1) 4058/    1221 : ED 5B 88 1C         		ld	de,(wave_Pitch)		; de - Pitch
(1) 4059/    1225 : 21 00 00            		ld	hl,(dWaveBuff&0FFh)<<8	; hl - WAVFIFO LSB pointer (xx.00)
(1) 4060/    1228 : D9                  		exx				; move them back
(1) 4061/    1229 : 2A 7F 1C            		ld	hl,(wave_Start)		; copy Start and length
(1) 4062/    122C : 3A 81 1C            		ld 	a,(wave_Start+2)
(1) 4063/    122F : 22 76 1C            		ld	(dDacPntr),hl
(1) 4064/    1232 : 32 78 1C            		ld	(dDacPntr+2),a
(1) 4065/    1235 : 2A 82 1C            		ld	hl,(wave_Len)
(1) 4066/    1238 : 3A 84 1C            		ld 	a,(wave_Len+2)
(1) 4067/    123B : 22 79 1C            		ld	(dDacCntr),hl
(1) 4068/    123E : 32 7B 1C            		ld	(dDacCntr+2),a
(1) 4069/    1241 : AF                  		xor	a
(1) 4070/    1242 : 32 75 1C            		ld	(dDacFifoMid),a		; Reset half-way
(1) 4071/    1245 : CD 4D 12            		call	dac_refill
(1) 4072/    1248 : CD EF 11            		call	dac_on
(1) 4073/    124B : FB                  		ei
(1) 4074/    124C : C9                  		ret
(1) 4075/    124D :                     
(1) 4076/    124D :                     ; --------------------------------------------------------
(1) 4077/    124D :                     
(1) 4078/    124D :                     dac_refill:
(1) 4079/    124D : CF                  		rst	8
(1) 4080/    124E : C5                  		push	bc
(1) 4081/    124F : D5                  		push	de
(1) 4082/    1250 : E5                  		push	hl
(1) 4083/    1251 : 3A 8A 1C            		ld	a,(wave_Flags)	; Already finished?
(1) 4084/    1254 : FE 07               		cp	111b
(1) 4085/    1256 : D2 0C 13            		jp	nc,.dacfill_end
(1) 4086/    1259 : 3A 7B 1C            		ld	a,(dDacCntr+2)	; Last bytes
(1) 4087/    125C : 2A 79 1C            		ld	hl,(dDacCntr)
(1) 4088/    125F : 01 80 00            		ld	bc,80h
(1) 4089/    1262 : 37                  		scf
(1) 4090/    1263 : 3F                  		ccf
(1) 4091/    1264 : ED 42               		sbc	hl,bc
(1) 4092/    1266 : DE 00               		sbc	a,0
(1) 4093/    1268 : 32 7B 1C            		ld	(dDacCntr+2),a
(1) 4094/    126B : 22 79 1C            		ld	(dDacCntr),hl
(1) 4095/    126E : 16 1D               		ld	d,dWaveBuff>>8
(1) 4096/    1270 : B7                  		or	a
(1) 4097/    1271 : FA 9B 12            		jp	m,.dac_over
(1) 4098/    1274 : 3A 75 1C            		ld	a,(dDacFifoMid)	; Update halfway value
(1) 4099/    1277 : 5F                  		ld	e,a
(1) 4100/    1278 : C6 80               		add 	a,80h
(1) 4101/    127A : 32 75 1C            		ld	(dDacFifoMid),a
(1) 4102/    127D : 2A 76 1C            		ld	hl,(dDacPntr)
(1) 4103/    1280 : 3A 78 1C            		ld	a,(dDacPntr+2)
(1) 4104/    1283 : CD BA 0F            		call	transferRom	; *** ROM ACCESS ***
(1) 4105/    1286 : 2A 76 1C            		ld	hl,(dDacPntr)
(1) 4106/    1289 : 3A 78 1C            		ld	a,(dDacPntr+2)
(1) 4107/    128C : 01 80 00            		ld	bc,80h
(1) 4108/    128F : 09                  		add	hl,bc
(1) 4109/    1290 : CE 00               		adc	a,0
(1) 4110/    1292 : 22 76 1C            		ld	(dDacPntr),hl
(1) 4111/    1295 : 32 78 1C            		ld	(dDacPntr+2),a
(1) 4112/    1298 : C3 0F 13            		jp	.dacfill_ret
(1) 4113/    129B :                     
(1) 4114/    129B :                     ; NOTE: This doesn't finish at the exact END point
(1) 4115/    129B :                     ; but the USER won't notice it.
(1) 4116/    129B :                     
(1) 4117/    129B :                     .dac_over:
(1) 4118/    129B : 16 1D               		ld	d,dWaveBuff>>8
(1) 4119/    129D : 3A 8A 1C            		ld	a,(wave_Flags)	; LOOP enabled?
(1) 4120/    12A0 : E6 01               		and	001b
(1) 4121/    12A2 : C2 C5 12            		jp	nz,.dacfill_loop
(1) 4122/    12A5 : 7D                  		ld	a,l
(1) 4123/    12A6 : C6 80               		add	a,80h
(1) 4124/    12A8 : 4F                  		ld	c,a
(1) 4125/    12A9 : 06 00               		ld	b,0
(1) 4126/    12AB : C5                  		push	bc
(1) 4127/    12AC : 3A 75 1C            		ld	a,(dDacFifoMid)
(1) 4128/    12AF : 5F                  		ld	e,a
(1) 4129/    12B0 : C6 80               		add	a,80h
(1) 4130/    12B2 : 32 75 1C            		ld	(dDacFifoMid),a
(1) 4131/    12B5 : C1                  		pop	bc
(1) 4132/    12B6 : 79                  		ld	a,c
(1) 4133/    12B7 : B0                  		or	b
(1) 4134/    12B8 : 28 52               		jr	z,.dacfill_end
(1) 4135/    12BA : 2A 76 1C            		ld	hl,(dDacPntr)
(1) 4136/    12BD : 3A 78 1C            		ld	a,(dDacPntr+2)
(1) 4137/    12C0 : CD BA 0F            		call	transferRom	; *** ROM ACCESS ***
(1) 4138/    12C3 : 18 47               		jr	.dacfill_end
(1) 4139/    12C5 :                     .dacfill_loop:
(1) 4140/    12C5 :                     	; loop sample
(1) 4141/    12C5 : C5                  		push	bc
(1) 4142/    12C6 : D5                  		push	de
(1) 4143/    12C7 : 3A 87 1C            		ld	a,(wave_Loop+2)
(1) 4144/    12CA : 4F                  		ld	c,a
(1) 4145/    12CB : ED 5B 85 1C         		ld	de,(wave_Loop)
(1) 4146/    12CF : 2A 7F 1C            		ld	hl,(wave_Start)
(1) 4147/    12D2 : 3A 81 1C            		ld 	a,(wave_Start+2)
(1) 4148/    12D5 : 81                  		add	a,c
(1) 4149/    12D6 : 19                  		add	hl,de
(1) 4150/    12D7 : CE 00               		adc	a,0
(1) 4151/    12D9 : 22 76 1C            		ld	(dDacPntr),hl
(1) 4152/    12DC : 32 78 1C            		ld	(dDacPntr+2),a
(1) 4153/    12DF : 2A 82 1C            		ld	hl,(wave_Len)
(1) 4154/    12E2 : 3A 84 1C            		ld 	a,(wave_Len+2)
(1) 4155/    12E5 : 91                  		sub	a,c
(1) 4156/    12E6 : 37                  		scf
(1) 4157/    12E7 : 3F                  		ccf
(1) 4158/    12E8 : ED 52               		sbc	hl,de
(1) 4159/    12EA : DE 00               		sbc	a,0
(1) 4160/    12EC : 22 79 1C            		ld	(dDacCntr),hl
(1) 4161/    12EF : 32 7B 1C            		ld	(dDacCntr+2),a
(1) 4162/    12F2 : D1                  		pop	de
(1) 4163/    12F3 : C1                  		pop	bc
(1) 4164/    12F4 : 78                  		ld	a,b
(1) 4165/    12F5 : B1                  		or	c
(1) 4166/    12F6 : 28 17               		jr	z,.dacfill_ret
(1) 4167/    12F8 : 3A 75 1C            		ld	a,(dDacFifoMid)
(1) 4168/    12FB : 5F                  		ld	e,a
(1) 4169/    12FC : C6 80               		add	a,80h
(1) 4170/    12FE : 32 75 1C            		ld	(dDacFifoMid),a
(1) 4171/    1301 : 2A 76 1C            		ld	hl,(dDacPntr)
(1) 4172/    1304 : 3A 78 1C            		ld	a,(dDacPntr+2)
(1) 4173/    1307 : CD BA 0F            		call	transferRom	; *** ROM ACCESS ***
(1) 4174/    130A : 18 03               		jr	.dacfill_ret
(1) 4175/    130C :                     .dacfill_end:
(1) 4176/    130C : CD 04 12            		call	dac_off		; DAC finished
(1) 4177/    130F :                     .dacfill_ret:
(1) 4178/    130F : E1                  		pop	hl
(1) 4179/    1310 : D1                  		pop	de
(1) 4180/    1311 : C1                  		pop	bc
(1) 4181/    1312 : C9                  		ret
(1) 4182/    1313 :                     
(1) 4183/    1313 :                     ; ----------------------------------------------------------------
(1) 4184/    1313 :                     ; Two purposes:
(1) 4185/    1313 :                     ;
(1) 4186/    1313 :                     ; Set the BANK to the very last part of memory for the
(1) 4187/    1313 :                     ; transferRom to read from RAM
(1) 4188/    1313 :                     ;
(1) 4189/    1313 :                     ; On 32X this sets the bank out of the ROM-reading areas due
(1) 4190/    1313 :                     ; to a conflict with the PSG
(1) 4191/    1313 :                     ;
(1) 4192/    1313 :                     ; Uses:
(1) 4193/    1313 :                     ; hl,b
(1) 4194/    1313 :                     ; ----------------------------------------------------------------
(1) 4195/    1313 :                     
(1) 4196/    1313 :                     gema_lastbank:
(1) 4197/    1313 : 21 00 60            		ld	hl,6000h
(1) 4198/    1316 : 06 09               		ld	b,9		; 9 bits
(1) 4199/    1318 :                     .write:
(1) 4200/    1318 : 36 01               		ld	(hl),1
(1) 4201/    131A : 10 FC               		djnz	.write
(1) 4202/    131C : CF                  		rst	8
(1) 4203/    131D : C9                  		ret
(1) 4204/    131E :                     
(1) 4205/    131E :                     ; ----------------------------------------------------------------
(1) 4206/    131E :                     ; FM cache list
(1) 4207/    131E :                     ; ----------------------------------------------------------------
(1) 4208/    131E :                     
(1) 4209/    131E : 3A 15               fmcach_list:	dw fmcach_1
(1) 4210/    1320 : 62 15               		dw fmcach_2
(1) 4211/    1322 : 8A 15               		dw fmcach_3
(1) 4212/    1324 : 00 00               		dw 0		; <-- skipped
(1) 4213/    1326 : B2 15               		dw fmcach_4
(1) 4214/    1328 : DA 15               		dw fmcach_5
(1) 4215/    132A : 02 16               		dw fmcach_6
(1) 4216/    132C :                     
(1) 4217/    132C :                     ; ====================================================================
(1) 4218/    132C :                     ; ----------------------------------------------------------------
(1) 4219/    132C :                     ; Tables
(1) 4220/    132C :                     ; ----------------------------------------------------------------
(1) 4221/    132C :                     
(1) 4222/    132C : 84 02               fmFreq_List:	dw 644
(1) 4223/    132E : A9 02               		dw 681
(1) 4224/    1330 : D2 02               		dw 722
(1) 4225/    1332 : FD 02               		dw 765
(1) 4226/    1334 : 2A 03               		dw 810
(1) 4227/    1336 : 5A 03               		dw 858
(1) 4228/    1338 : 8E 03               		dw 910
(1) 4229/    133A : C4 03               		dw 964
(1) 4230/    133C : FD 03               		dw 1021
(1) 4231/    133E : 39 04               		dw 1081
(1) 4232/    1340 : 7A 04               		dw 1146
(1) 4233/    1342 : BE 04               		dw 1214
(1) 4234/    1344 :                     psgFreq_List:
(1) 4235/    1344 :                     ; 	dw    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1	; x-0
(1) 4236/    1344 :                     ; 	dw    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1	; x-1
(1) 4237/    1344 :                     ; 	dw    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1	; x-2
(1) 4238/    1344 : FF FF FF FF FF FF   	dw    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,03F8h,03BFh,0389h	; x-3
             134A : FF FF FF FF FF FF 
             1350 : FF FF FF FF FF FF 
             1356 : F8 03 BF 03 89 03 
(1) 4239/    135C : 56 03 26 03 F9 02   	dw 0356h,0326h,02F9h,02CEh,02A5h,0280h,025Ch,023Ah,021Ah,01FBh,01DFh,01C4h	; x-4
             1362 : CE 02 A5 02 80 02 
             1368 : 5C 02 3A 02 1A 02 
             136E : FB 01 DF 01 C4 01 
(1) 4240/    1374 : AB 01 93 01 7D 01   	dw 01ABh,0193h,017Dh,0167h,0153h,0140h,012Eh,011Dh,010Dh,00FEh,00EFh,00E2h	; x-5
             137A : 67 01 53 01 40 01 
             1380 : 2E 01 1D 01 0D 01 
             1386 : FE 00 EF 00 E2 00 
(1) 4241/    138C : D6 00 C9 00 BE 00   	dw 00D6h,00C9h,00BEh,00B4h,00A9h,00A0h,0097h,008Fh,0087h,007Fh,0078h,0071h	; x-6
             1392 : B4 00 A9 00 A0 00 
             1398 : 97 00 8F 00 87 00 
             139E : 7F 00 78 00 71 00 
(1) 4242/    13A4 :                     ; 	dw 006Bh,0065h,005Fh,005Ah,0055h,0050h,004Bh,0047h,0043h,0040h,003Ch,0039h	; x-7
(1) 4243/    13A4 :                     ; 	dw 0036h,0033h,0030h,002Dh,002Bh,0028h,0026h,0024h,0022h,0020h,001Fh,001Dh	; x-8 *
(1) 4244/    13A4 :                     ; 	dw 001Bh,001Ah,0018h,0017h,0016h,0015h,0013h,0012h,0011h,0010h,0009h,0008h	; x-9 *
(1) 4245/    13A4 :                     
(1) 4246/    13A4 :                     
(1) 4247/    13A4 :                     ; ----------------------------------------
(1) 4248/    13A4 :                     ; DAC and PWM
(1) 4249/    13A4 :                     ;
(1) 4250/    13A4 :                     ; base C-5 freq: 16000hz
(1) 4251/    13A4 :                     ; ----------------------------------------
(1) 4252/    13A4 :                     wavFreq_List:
(1) 4253/    13A4 :                     	;   C     C#    D     D#    E     F     F#    G     G#    A     A#    B
(1) 4254/    13A4 :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-0
(1) 4255/    13A4 :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-1
(1) 4256/    13A4 :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0036h,003Bh	; x-2
(1) 4257/    13A4 : 3E 00 43 00 46 00   	dw 003Eh,0043h,0046h,0049h,004Eh,0054h,0058h,005Eh,0063h,0068h,0070h,0075h	; x-3
             13AA : 49 00 4E 00 54 00 
             13B0 : 58 00 5E 00 63 00 
             13B6 : 68 00 70 00 75 00 
(1) 4258/    13BC : 85 00 87 00 8C 00   	dw 0085h,0087h,008Ch,009Ah,00A4h,00ADh,00B2h,00C0h,00CCh,00D7h,00E6h,00F0h	; x-4
             13C2 : 9A 00 A4 00 AD 00 
             13C8 : B2 00 C0 00 CC 00 
             13CE : D7 00 E6 00 F0 00 
(1) 4259/    13D4 : 00 01 10 01 20 01   	dw 0100h,0110h,0120h,012Eh,0147h,015Ah,016Ah,017Fh,0191h,01ACh,01C2h,01E0h	; x-5
             13DA : 2E 01 47 01 5A 01 
             13E0 : 6A 01 7F 01 91 01 
             13E6 : AC 01 C2 01 E0 01 
(1) 4260/    13EC : F8 01 10 02 40 02   	dw 01F8h,0210h,0240h,0260h,0280h,02A0h,02D0h,02F8h,0320h,0350h,0380h,03C0h	; x-6
             13F2 : 60 02 80 02 A0 02 
             13F8 : D0 02 F8 02 20 03 
             13FE : 50 03 80 03 C0 03 
(1) 4261/    1404 :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-7
(1) 4262/    1404 :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-8
(1) 4263/    1404 :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-9
(1) 4264/    1404 :                     
(1) 4265/    1404 :                     ; ----------------------------------------
(1) 4266/    1404 :                     ; SegaCD ONLY
(1) 4267/    1404 :                     ;
(1) 4268/    1404 :                     ; base C-5 freq: 32000hz
(1) 4269/    1404 :                     ; ----------------------------------------
(1) 4270/    1404 :                     wavFreq_CdPcm:
(1) 4271/    1404 :                     	;     C     C#     D      D#     E      F      F#     G      G#     A      A#     B
(1) 4272/    1404 :                     ; 	dw  0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h	; x-0
(1) 4273/    1404 :                     ; 	dw  0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h	; x-1
(1) 4274/    1404 :                     ; 	dw  0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h	; x-2  4000 unchecked
(1) 4275/    1404 : F8 01 14 02 3C 02   	dw  01F8h, 0214h, 023Ch, 0258h, 027Ch, 02A0h, 02C8h, 02F4h, 031Ch, 0348h, 037Ch, 03B0h	; x-3  8000 ok
             140A : 58 02 7C 02 A0 02 
             1410 : C8 02 F4 02 1C 03 
             1416 : 48 03 7C 03 B0 03 
(1) 4276/    141C : F0 03 24 04 68 04   	dw  03F0h, 0424h, 0468h, 04A8h, 04ECh, 0540h, 0590h, 05E4h, 063Ch, 0698h, 0704h, 0760h	; x-4 16000 ok
             1422 : A8 04 EC 04 40 05 
             1428 : 90 05 E4 05 3C 06 
             142E : 98 06 04 07 60 07 
(1) 4277/    1434 : DC 07 48 08 D4 08   	dw  07DCh, 0848h, 08D4h, 0960h, 09F0h, 0A64h, 0B04h, 0BAAh, 0C60h, 0D18h, 0DE4h, 0EB6h	; x-5 32000 ok
             143A : 60 09 F0 09 64 0A 
             1440 : 04 0B AA 0B 60 0C 
             1446 : 18 0D E4 0D B6 0E 
(1) 4278/    144C : B0 0F 74 10 84 11   	dw  0FB0h, 1074h, 1184h, 1280h, 139Ch, 14C8h, 1624h, 174Ch, 18DCh, 1A38h, 1BE0h, 1D94h	; x-6 64000 unstable
             1452 : 80 12 9C 13 C8 14 
             1458 : 24 16 4C 17 DC 18 
             145E : 38 1A E0 1B 94 1D 
(1) 4279/    1464 :                     ; 	dw  1F64h, 20FCh, 2330h, 2524h, 2750h, 29B4h, 2C63h, 2F63h, 31E0h, 347Bh, 377Bh, 3B41h	; x-7 128000 bad
(1) 4280/    1464 :                     ; 	dw  3EE8h, 4206h, 4684h, 4A5Ah, 4EB5h, 5379h, 58E1h, 5DE0h, 63C0h, 68FFh, 6EFFh, 783Ch	; x-8 256000 bad
(1) 4281/    1464 :                     ; 	dw  7FC2h, 83FCh, 8D14h, 9780h,0AA5Dh,0B1F9h,   -1 ,   -1 ,   -1 ,   -1 ,   -1 ,   -1 	; x-9 bad
(1) 4282/    1464 :                     
(1) 4283/    1464 :                     ; ====================================================================
(1) 4284/    1464 :                     ; ----------------------------------------------------------------
(1) 4285/    1464 :                     ; MASTER buffers list
(1) 4286/    1464 :                     ;
(1) 4287/    1464 :                     ; dw track_buffer
(1) 4288/    1464 :                     ; dw channel_list,block_cache,header_cache,track_cache
(1) 4289/    1464 :                     ;
(1) 4290/    1464 :                     ; (track_cache: 1BIT SIZES ONLY, ALIGNED)
(1) 4291/    1464 :                     ; ----------------------------------------------------------------
(1) 4292/    1464 :                     
(1) 4293/    1464 :                     nikona_BuffList:
(1) 4294/    1464 : CA 16 AA 16 2A 16   	dw trkBuff_0,trkBlks_0,trkHdrs_0,trkCach_0
             146A : 00 1F             
(1) 4295/    146C : 0A 17 B2 16 4A 16   	dw trkBuff_1,trkBlks_1,trkHdrs_1,trkCach_1
             1472 : 20 1F             
(1) 4296/    1474 : 4A 17 BA 16 6A 16   	dw trkBuff_2,trkBlks_2,trkHdrs_2,trkCach_2
             147A : 40 1F             
(1) 4297/    147C : 8A 17 C2 16 8A 16   	dw trkBuff_3,trkBlks_3,trkHdrs_3,trkCach_3
             1482 : 60 1F             
(1) 4298/    1484 :                     nikona_BuffList_e:
(1) 4299/    1484 : FF FF               	dw -1	; ENDOFLIST
(1) 4300/    1486 :                     
(1) 4301/    1486 :                     ; ====================================================================
(1) 4302/    1486 :                     ; ----------------------------------------------------------------
(1) 4303/    1486 :                     ; Buffer section
(1) 4304/    1486 :                     ; ----------------------------------------------------------------
(1) 4305/    1486 :                     
(1) 4306/    1486 : 00 00 00 00 00 00   pcmcom:	db 00h,00h,00h,00h,00h,00h,00h,00h	; 0 - Playback bits: %0000PCOK /Pitchbend/keyCut/keyOff/KeyOn
             148C : 00 00             
(1) 4307/    148E : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 8 - Pitch MSB
             1494 : 00 00             
(1) 4308/    1496 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 16 - Pitch LSB
             149C : 00 00             
(1) 4309/    149E : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 24 - Volume
             14A4 : 00 00             
(1) 4310/    14A6 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 32 - Panning %RRRRLLLL
             14AC : 00 00             
(1) 4311/    14AE : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 40 - LoopEnable bit | 24-bit sample location in Sub-CPU area
             14B4 : 00 00             
(1) 4312/    14B6 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 48
             14BC : 00 00             
(1) 4313/    14BE : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 56
             14C4 : 00 00             
(1) 4314/    14C6 :                     
(1) 4315/    14C6 : 00 00 00 00 00 00   pwmcom:	db 00h,00h,00h,00h,00h,00h,00h,00h	; 0 - Playback bits: %0000PCOK Pitchbend/keyCut/keyOff/KeyOn
             14CC : 00 00             
(1) 4316/    14CE : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 8 - Volume | Pitch MSB
             14D4 : 00 00             
(1) 4317/    14D6 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 16 - Pitch LSB
             14DC : 00 00             
(1) 4318/    14DE : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 24 - Flags+MSB bits of sample %SlLRxxxx Stereo/Loop/Left/Right
             14E4 : 00 00             
(1) 4319/    14E6 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 32 -
             14EC : 00 00             
(1) 4320/    14EE : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h
             14F4 : 00 00             
(1) 4321/    14F6 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h
             14FC : 00 00             
(1) 4322/    14FE :                     
(1) 4323/    14FE : 00 00 00 00         psgcom:	db 00h,00h,00h,00h	;  0 - command 1 = key on, 2 = key off, 4 = stop snd
(1) 4324/    1502 : FF FF FF FF         	db -1, -1, -1, -1	;  4 - output level attenuation (%llll.0000, -1 = silent)
(1) 4325/    1506 : 00 00 00 00         	db 00h,00h,00h,00h	;  8 - attack rate (START)
(1) 4326/    150A : 00 00 00 00         	db 00h,00h,00h,00h	; 12 - decay rate
(1) 4327/    150E : 00 00 00 00         	db 00h,00h,00h,00h	; 16 - sustain level attenuation (MAXIMUM)
(1) 4328/    1512 : 00 00 00 00         	db 00h,00h,00h,00h	; 20 - release rate
(1) 4329/    1516 : 00 00 00 00         	db 00h,00h,00h,00h	; 24 - envelope mode 0 = off, 1 = attack, 2 = decay, 3 = sustain
(1) 4330/    151A : 00 00 00 00         	db 00h,00h,00h,00h	; 28 - freq bottom 4 bits
(1) 4331/    151E : 00 00 00 00         	db 00h,00h,00h,00h	; 32 - freq upper 6 bits
(1) 4332/    1522 : 00 00 00 00         	db 00h,00h,00h,00h	; 36 - attack level attenuation
(1) 4333/    1526 : 00 00 00 00         	db 00h,00h,00h,00h	; 40 - flags to indicate hardware should be updated
(1) 4334/    152A : 00 00 00 00         	db 00h,00h,00h,00h	; 44 - timer for sustain
(1) 4335/    152E : 00 00 00 00         	db 00h,00h,00h,00h	; 48 - MAX Volume
(1) 4336/    1532 : 00 00 00 00         	db 00h,00h,00h,00h	; 52 - Vibrato value
(1) 4337/    1536 : 00 00 00 00         	db 00h,00h,00h,00h	; 56 - General timer
(1) 4338/    153A :                     
(1) 4339/    153A :                     ; FM instrument storage
(1) 4340/    153A :                     fmcach_1	ds 28h
(1) 4341/    1562 :                     fmcach_2	ds 28h
(1) 4342/    158A :                     fmcach_3	ds 28h
(1) 4343/    15B2 :                     fmcach_4	ds 28h
(1) 4344/    15DA :                     fmcach_5	ds 28h
(1) 4345/    1602 :                     fmcach_6	ds 28h
(1) 4346/    162A :                     
(1) 4347/    162A :                     ; --------------------------------------------------------
(1) 4348/    162A :                     ; * USER customizable section *
(1) 4349/    162A :                     ;
(1) 4350/    162A :                     ; trkCach's MUST BE 00h ALIGNED.
(1) 4351/    162A :                     ; --------------------------------------------------------
(1) 4352/    162A :                     
(1) 4353/    162A :                     trkHdrs_0	ds 8*4			; dw point,rowcntr
(1) 4354/    164A :                     trkHdrs_1	ds 8*4
(1) 4355/    166A :                     trkHdrs_2	ds 8*4
(1) 4356/    168A :                     trkHdrs_3	ds 8*4
(1) 4357/    16AA :                     trkBlks_0	ds 8
(1) 4358/    16B2 :                     trkBlks_1	ds 8
(1) 4359/    16BA :                     trkBlks_2	ds 8
(1) 4360/    16C2 :                     trkBlks_3	ds 8
(1) 4361/    16CA :                     trkBuff_0	ds trk_ChnIndx+MAX_TRKINDX
(1) 4362/    170A :                     trkBuff_1	ds trk_ChnIndx+MAX_TRKINDX
(1) 4363/    174A :                     trkBuff_2	ds trk_ChnIndx+MAX_TRKINDX
(1) 4364/    178A :                     trkBuff_3	ds trk_ChnIndx+MAX_TRKINDX
(1) 4365/    17CA :                     instListOut	ds 8
(1) 4366/    17D2 :                     
(1) 4367/    17D2 :                     ; ====================================================================
(1) 4368/    17D2 :                     ; --------------------------------------------------------
(1) 4369/    17D2 :                     ; Channel table struct:
(1) 4370/    17D2 :                     ; 00  - DIRECT Linked channel from trkChnls
(1) 4371/    17D2 :                     ; 02  - 00h-7Fh: Priority level or 80h+ Silence request (chip ID)
(1) 4372/    17D2 :                     ; 03  - MASTER Volume for this channel
(1) 4373/    17D2 :                     ; 04  - Chip index (YM2612: KEY index)
(1) 4374/    17D2 :                     ; 05  - FREE
(1) 4375/    17D2 :                     ; 06  - Frequency list index (YM2612: %oooiiiii oct|index)
(1) 4376/    17D2 :                     ; 07  - Pitchbend add/sub
(1) 4377/    17D2 :                     ; 08  - Current volume: 00-max
(1) 4378/    17D2 :                     ; 09  - Stored effect setting
(1) 4379/    17D2 :                     ; 0A  - FREE
(1) 4380/    17D2 :                     ; 0B  - FREE
(1) 4381/    17D2 :                     ; 0C+ - Misc. settings for the current chip
(1) 4382/    17D2 :                     ; 10+ - Intrument data
(1) 4383/    17D2 :                     ;
(1) 4384/    17D2 :                     ; PSG   80h
(1) 4385/    17D2 :                     ; PSGN  90h
(1) 4386/    17D2 :                     ; FM   0A0h
(1) 4387/    17D2 :                     ; FM3  0B0h
(1) 4388/    17D2 :                     ; DAC  0C0h
(1) 4389/    17D2 :                     ; PCM  0D0h
(1) 4390/    17D2 :                     ; PWM  0E0h
(1) 4391/    17D2 :                     ; --------------------------------------------------------
(1) 4392/    17D2 :                     
(1) 4393/    1A00 :                     		org 1A00h	; <-- MUST BE 00h ALIGNED
(1) 4394/    1A00 : 10 00               tblList:	dw tblPSG-tblList		;  80h
(1) 4395/    1A02 : 5A 80               		dw tblPSGN-tblList|8000h	;  90h *
(1) 4396/    1A04 : 72 00               		dw tblFM-tblList		; 0A0h
(1) 4397/    1A06 : D2 80               		dw tblFM3-tblList|8000h		; 0B0h *
(1) 4398/    1A08 : EA 80               		dw tblFM6-tblList|8000h		; 0C0h *
(1) 4399/    1A0A : 04 01               		dw tblPCM-tblList		; 0D0h
(1) 4400/    1A0C : C6 01               		dw tblPWM-tblList		; 0E0h
(1) 4401/    1A0E : 00 00               		dw 0
(1) 4402/    1A10 : 00 00 00 00 00 00   tblPSG:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             1A16 : 00 00             
(1) 4403/    1A18 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A1E : 00 00             
(1) 4404/    1A20 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A26 : 00 00             
(1) 4405/    1A28 : 00 00 00 00 01 00   		db 00h,00h,00h,00h,01h,00h,00h,00h	; Channel 2
             1A2E : 00 00             
(1) 4406/    1A30 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A36 : 00 00             
(1) 4407/    1A38 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A3E : 00 00             
(1) 4408/    1A40 : 00 00 00 00 02 00   		db 00h,00h,00h,00h,02h,00h,00h,00h	; Channel 3
             1A46 : 00 00             
(1) 4409/    1A48 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A4E : 00 00             
(1) 4410/    1A50 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A56 : 00 00             
(1) 4411/    1A58 : FF FF               		dw -1	; end-of-list
(1) 4412/    1A5A : 00 00 00 00 03 00   tblPSGN:	db 00h,00h,00h,00h,03h,00h,00h,03h	; Noise
             1A60 : 00 03             
(1) 4413/    1A62 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A68 : 00 00             
(1) 4414/    1A6A : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A70 : 00 00             
(1) 4415/    1A72 : 00 00 00 00 00 00   tblFM:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             1A78 : 00 00             
(1) 4416/    1A7A : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A80 : 00 00             
(1) 4417/    1A82 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A88 : 00 00             
(1) 4418/    1A8A : 00 00 00 00 01 00   		db 00h,00h,00h,00h,01h,00h,00h,00h	; Channel 2
             1A90 : 00 00             
(1) 4419/    1A92 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A98 : 00 00             
(1) 4420/    1A9A : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1AA0 : 00 00             
(1) 4421/    1AA2 : 00 00 00 00 04 00   		db 00h,00h,00h,00h,04h,00h,00h,00h	; Channel 4 <--
             1AA8 : 00 00             
(1) 4422/    1AAA : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1AB0 : 00 00             
(1) 4423/    1AB2 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1AB8 : 00 00             
(1) 4424/    1ABA : 00 00 00 00 05 00   		db 00h,00h,00h,00h,05h,00h,00h,00h	; Channel 5
             1AC0 : 00 00             
(1) 4425/    1AC2 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1AC8 : 00 00             
(1) 4426/    1ACA : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1AD0 : 00 00             
(1) 4427/    1AD2 : 00 00 00 00 02 00   tblFM3:		db 00h,00h,00h,00h,02h,00h,00h,00h	; Channel 3 <--
             1AD8 : 00 00             
(1) 4428/    1ADA : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1AE0 : 00 00             
(1) 4429/    1AE2 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1AE8 : 00 00             
(1) 4430/    1AEA : 00 00 00 00 06 00   tblFM6:		db 00h,00h,00h,00h,06h,00h,00h,00h	; Channel 6 <--
             1AF0 : 00 00             
(1) 4431/    1AF2 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1AF8 : 00 00             
(1) 4432/    1AFA : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B00 : 00 00             
(1) 4433/    1B02 : FF FF               		dw -1	; end-of-list
(1) 4434/    1B04 : 00 00 00 00 00 00   tblPCM:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             1B0A : 00 00             
(1) 4435/    1B0C : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B12 : 00 00             
(1) 4436/    1B14 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B1A : 00 00             
(1) 4437/    1B1C : 00 00 00 00 01 00   		db 00h,00h,00h,00h,01h,00h,00h,00h	; Channel 2
             1B22 : 00 00             
(1) 4438/    1B24 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B2A : 00 00             
(1) 4439/    1B2C : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B32 : 00 00             
(1) 4440/    1B34 : 00 00 00 00 02 00   		db 00h,00h,00h,00h,02h,00h,00h,00h	; Channel 3
             1B3A : 00 00             
(1) 4441/    1B3C : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B42 : 00 00             
(1) 4442/    1B44 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B4A : 00 00             
(1) 4443/    1B4C : 00 00 00 00 03 00   		db 00h,00h,00h,00h,03h,00h,00h,00h	; Channel 4
             1B52 : 00 00             
(1) 4444/    1B54 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B5A : 00 00             
(1) 4445/    1B5C : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B62 : 00 00             
(1) 4446/    1B64 : 00 00 00 00 04 00   		db 00h,00h,00h,00h,04h,00h,00h,00h	; Channel 5
             1B6A : 00 00             
(1) 4447/    1B6C : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B72 : 00 00             
(1) 4448/    1B74 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B7A : 00 00             
(1) 4449/    1B7C : 00 00 00 00 05 00   		db 00h,00h,00h,00h,05h,00h,00h,00h	; Channel 6
             1B82 : 00 00             
(1) 4450/    1B84 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B8A : 00 00             
(1) 4451/    1B8C : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B92 : 00 00             
(1) 4452/    1B94 : 00 00 00 00 06 00   		db 00h,00h,00h,00h,06h,00h,00h,00h	; Channel 7
             1B9A : 00 00             
(1) 4453/    1B9C : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BA2 : 00 00             
(1) 4454/    1BA4 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BAA : 00 00             
(1) 4455/    1BAC : 00 00 00 00 07 00   		db 00h,00h,00h,00h,07h,00h,00h,00h	; Channel 7
             1BB2 : 00 00             
(1) 4456/    1BB4 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BBA : 00 00             
(1) 4457/    1BBC : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BC2 : 00 00             
(1) 4458/    1BC4 : FF FF               		dw -1	; end-of-list
(1) 4459/    1BC6 : 00 00 00 00 00 00   tblPWM:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             1BCC : 00 00             
(1) 4460/    1BCE : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BD4 : 00 00             
(1) 4461/    1BD6 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BDC : 00 00             
(1) 4462/    1BDE : 00 00 00 00 01 00   		db 00h,00h,00h,00h,01h,00h,00h,00h	; Channel 2
             1BE4 : 00 00             
(1) 4463/    1BE6 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BEC : 00 00             
(1) 4464/    1BEE : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BF4 : 00 00             
(1) 4465/    1BF6 : 00 00 00 00 02 00   		db 00h,00h,00h,00h,02h,00h,00h,00h	; Channel 3
             1BFC : 00 00             
(1) 4466/    1BFE : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C04 : 00 00             
(1) 4467/    1C06 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C0C : 00 00             
(1) 4468/    1C0E : 00 00 00 00 03 00   		db 00h,00h,00h,00h,03h,00h,00h,00h	; Channel 4
             1C14 : 00 00             
(1) 4469/    1C16 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C1C : 00 00             
(1) 4470/    1C1E : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C24 : 00 00             
(1) 4471/    1C26 : 00 00 00 00 04 00   		db 00h,00h,00h,00h,04h,00h,00h,00h	; Channel 5
             1C2C : 00 00             
(1) 4472/    1C2E : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C34 : 00 00             
(1) 4473/    1C36 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C3C : 00 00             
(1) 4474/    1C3E : 00 00 00 00 05 00   		db 00h,00h,00h,00h,05h,00h,00h,00h	; Channel 6
             1C44 : 00 00             
(1) 4475/    1C46 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C4C : 00 00             
(1) 4476/    1C4E : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C54 : 00 00             
(1) 4477/    1C56 : 00 00 00 00 06 00   		db 00h,00h,00h,00h,06h,00h,00h,00h	; Channel 7
             1C5C : 00 00             
(1) 4478/    1C5E : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C64 : 00 00             
(1) 4479/    1C66 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C6C : 00 00             
(1) 4480/    1C6E : FF FF               		dw -1	; end-of-list
(1) 4481/    1C70 :                     
(1) 4482/    1C70 :                     ; Variables to fill this space
(1) 4483/    1C70 : 00                  tickSpSet	db 0		; **
(1) 4484/    1C71 : 00                  tickFlag	db 0		; Tick flag from VBlank
(1) 4485/    1C72 : 00                  tickCnt		db 0		; ** Tick counter (PUT THIS AFTER tickFlag)
(1) 4486/    1C73 : 00                  psgHatMode	db 0		; Current PSGN mode
(1) 4487/    1C74 : 00                  fmSpecial	db 0		; copy of FM3 enable bit
(1) 4488/    1C75 : 00                  dDacFifoMid	db 0		; WAVE play halfway refill flag (00h/80h)
(1) 4489/    1C76 : 00 00 00            dDacPntr	db 0,0,0	; WAVE play current ROM position
(1) 4490/    1C79 : 00 00 00            dDacCntr	db 0,0,0	; WAVE play length counter
(1) 4491/    1C7C : 00                  commZRead	db 0		; cmd fifo READ pointer (here)
(1) 4492/    1C7D : 00                  marsUpd		db 0		; Flag to request a PWM transfer
(1) 4493/    1C7E : 00                  mcdUpd		db 0		; Flag to request a PCM transfer
(1) 4494/    1C7F : 00 00               wave_Start	dw 0		; START: 68k 24-bit pointer
(1) 4495/    1C81 : 00                  		db 0
(1) 4496/    1C82 : 00 00               wave_Len	dw 0		; LENGTH 24-bit
(1) 4497/    1C84 : 00                  		db 0
(1) 4498/    1C85 : 00 00               wave_Loop	dw 0		; LOOP POINT 24-bit
(1) 4499/    1C87 : 00                  		db 0
(1) 4500/    1C88 : 00 01               wave_Pitch	dw 0100h	; 01.00h
(1) 4501/    1C8A : 00                  wave_Flags	db 0		; WAVE playback flags (%10x: 1 loop / 0 no loop)
(1) 4502/    1C8B : 00                  currTickBits	db 0		; Current Tick/Subbeat flags (000000BTb B-beat, T-tick)
(1) 4503/    1C8C : 00                  x68ksrclsb	db 0		; transferRom temporal LSB
(1) 4504/    1C8D : 00                  x68ksrcmid	db 0		; transferRom temporal MID
(1) 4505/    1C8E : 00 00               sbeatAcc	dw 0		; Accumulates on each tick to trigger the sub beats
(1) 4506/    1C90 : D5 00               sbeatPtck	dw 200+13	; Default global subbeats (this-32 for PAL)
(1) 4507/    1C92 :                     headerOut	ds 00Eh		; Temporal storage for 68k pointers
(1) 4508/    1CA0 :                     headerOut_e	ds 2		; <-- reverse readpoint
(1) 4509/    1CA2 :                     trkInfoCach	;ds 4
(1) 4510/    1CA2 :                     sampleHead	ds 006h
(1) 4511/    1CA8 :                     
(1) 4512/    1CA8 :                     ; ====================================================================
(1) 4513/    1CA8 :                     ; ----------------------------------------------------------------
(1) 4514/    1CA8 :                     ; Special aligned buffers
(1) 4515/    1CA8 :                     ;
(1) 4516/    1CA8 :                     ; Located at 1D00h
(1) 4517/    1CA8 :                     ; ----------------------------------------------------------------
(1) 4518/    1CA8 :                     
(1) 4519/    1D00 :                     		org 1D00h
(1) 4520/    1D00 :                     dWaveBuff	ds 100h		; WAVE data buffer: 100h bytes, updates every 80h
(1) 4521/    1E00 :                     trkChnls	ds 8*MAX_TRKCHN
(1) 4522/    1F00 :                     trkCach_0	ds MAX_RCACH
(1) 4523/    1F20 :                     trkCach_1	ds MAX_RCACH
(1) 4524/    1F40 :                     trkCach_2	ds MAX_RCACH
(1) 4525/    1F60 :                     trkCach_3	ds MAX_RCACH
(1) 4526/    1F80 :                     
(1) 4527/    1F80 :                     ; --------------------------------------------------------
(1) 4528/    1F80 :                     
(1) 4529/    35A6 :                     		dephase
(1) 4530/    35A6 :                     		cpu 68000		; [AS] Return to 68k
(1) 4531/    35A6 :                     		padding off		; [AS] NO padding
(1) 4532/    35A6 :                     		align 2
(1) 4533/    35A6 :                     
     287/    35A6 :                     Z80_CODE_END:
     291/    35A6 :                     
     293/    35A6 :                     
     294/    35A6 :                     ; ===========================================================================
     295/    35A6 :                     ; ----------------------------------------------------------------
     296/    35A6 :                     ; DATA section shared on both Cartridge or Disc
     297/    35A6 :                     ; ----------------------------------------------------------------
     298/    35A6 :                     
     299/    35A6 :                     ; --------------------------------------------------------
     300/    35A6 :                     ; CD/CD32X ISO header and files
     301/    35A6 :                     ; --------------------------------------------------------
     302/    35A6 :                     
     318/    35A6 :                     
     319/    35A6 :                     ; ====================================================================
     320/    35A6 :                     ; --------------------------------------------------------
     321/    35A6 :                     ; SEGA CD SUB-CPU data
     322/    35A6 :                     ; --------------------------------------------------------
     323/    35A6 :                     
     336/    35A6 :                     
     337/    35A6 :                     ; ====================================================================
     338/    35A6 :                     ; ----------------------------------------------------------------
     339/    35A6 :                     ; SH2 code sent to SDRAM area
     340/    35A6 :                     ; ----------------------------------------------------------------
     341/    35A6 :                     
     347/    35A6 :                     MARS_RAMCODE:
     351/    35A6 :                     MARS_RAMCODE_E:
     356/    35A6 :                     
     357/    35A6 :                     ; ====================================================================
     358/    35A6 :                     ; --------------------------------------------------------
     359/    35A6 :                     ; Screen modes
     360/    35A6 :                     ;
     361/    35A6 :                     ; For SegaCD/CD32X these are stored as separate files
     362/    35A6 :                     ; on disc
     363/    35A6 :                     ;
     364/    35A6 :                     ; Usage:
     365/    35A6 :                     ; screen_code START_LABEL,END_LABEL,CODE_PATH
     366/    35A6 :                     ;
     367/    35A6 :                     ; Set your data banks manually on your screen code.
     368/    35A6 :                     ; --------------------------------------------------------
     369/    35A6 :                     
     370/    35A6 : (MACRO)              	screen_code Md_Screen00,Md_Screen00_e,"game/screen_0/code.asm"
     370/    35A6 : =$35A6               MD_SCREEN00 label *
     370/    35A6 :                     
     370/    35A6 :                     mctopscrn:
     370/    35A6 :                     mcscrn_s:
     370/    35A6 :                             include "game/screen_0/code.asm";"game/screen_0/code.asm"
(1)    1/    35A6 :                     ; ====================================================================
(1)    2/    35A6 :                     ; ----------------------------------------------------------------
(1)    3/    35A6 :                     ; SCREEN MODE 0
(1)    4/    35A6 :                     ; ----------------------------------------------------------------
(1)    5/    35A6 :                     
(1)    6/    35A6 :                     ; ====================================================================
(1)    7/    35A6 :                     ; ------------------------------------------------------
(1)    8/    35A6 :                     ; Variables
(1)    9/    35A6 :                     ; ------------------------------------------------------
(1)   10/    35A6 :                     
(1)   11/    35A6 : =$440                setVram_Mikami	equ $0440
(1)   12/    35A6 : =$480                setVram_Sisi	equ $0480
(1)   13/    35A6 :                     
(1)   14/    35A6 :                     ; ====================================================================
(1)   15/    35A6 :                     ; ------------------------------------------------------
(1)   16/    35A6 :                     ; Structs
(1)   17/    35A6 :                     ; ------------------------------------------------------
(1)   18/    35A6 :                     
(1)   19/    35A6 :                     ; 		strct 0
(1)   20/    35A6 :                     ; strc_xpos	ds.w 1
(1)   21/    35A6 :                     ; strc_ypos	ds.w 1
(1)   22/    35A6 :                     ; 		endstrct
(1)   23/    35A6 :                     
(1)   24/    35A6 :                     ; ====================================================================
(1)   25/    35A6 :                     ; ------------------------------------------------------
(1)   26/    35A6 :                     ; This mode's RAM
(1)   27/    35A6 :                     ; ------------------------------------------------------
(1)   28/    35A6 :                     
(1)   29/    35A6 :  (MACRO-2)           			strct RAM_ScrnBuff
(1)   29/    35A6 : =$35A6               GLBL_LASTPC     set *
(1)   29/FFFFFFFFFFFFE52A :                                     dephase
(1)   29/FFFFFFFFFFFFD204 :                                     phase RAM_SCRNBUFF
(1)   29/FFFFFFFFFFFFD204 : =$FFFFFFFFFFFFD204   GLBL_LASTORG    set *
(1)   30/FFFFFFFFFFFFD204 :                     RAM_CurrPick		ds.w 1
(1)   31/FFFFFFFFFFFFD206 :                     RAM_GemaArg0		ds.w 1
(1)   32/FFFFFFFFFFFFD208 :                     RAM_GemaArg1		ds.w 1
(1)   33/FFFFFFFFFFFFD20A :                     RAM_GemaArg2		ds.w 1
(1)   34/FFFFFFFFFFFFD20C :                     
(1)   35/FFFFFFFFFFFFD20C :                     RAM_GemaArg3		ds.w 1
(1)   36/FFFFFFFFFFFFD20E :                     RAM_GemaArg4		ds.w 1
(1)   37/FFFFFFFFFFFFD210 :                     RAM_GemaArg5		ds.w 1
(1)   38/FFFFFFFFFFFFD212 :                     RAM_ChnlLinks		ds.w 26
(1)   39/FFFFFFFFFFFFD246 :                     sizeof_thisbuff		ds.l 0
(1)   40/FFFFFFFFFFFFD24C :  (MACRO-2)           			endstrct
(1)   40/FFFFFFFFFFFFD204 :                                     org GLBL_LASTORG
(1)   40/    35A6 :                                     phase GLBL_LASTPC
(1)   41/    35A6 :  (MACRO-2)           			erreport "SCREEN BUFFER",sizeof_thisbuff-RAM_ScrnBuff,MAX_ScrnBuff
(1)   42/    35A6 :                     
(1)   43/    35A6 :                     ; ====================================================================
(1)   44/    35A6 :                     ; ------------------------------------------------------
(1)   45/    35A6 :                     ; Init
(1)   46/    35A6 :                     ; ------------------------------------------------------
(1)   47/    35A6 :                     
(1)   48/    35A6 : 6100 DF6A           		bsr	Mode_Init
(1)   49/    35AA :  (MACRO-2)           		set_dbanks file_mddata_def,pointr_marsdata_def
(1)   50/    35AA :                     
(1)   51/    35AA :                     	; ----------------------------------------------
(1)   52/    35AA :                     	; Load assets
(1)   79/    35AA : 203C 0003 32D0      		move.l	#ART_TEST,d0
(1)   80/    35B0 : 323C 0020           		move.w	#cell_vram($0001),d1
(1)   81/    35B4 : 343C 8780           		move.w	#ART_TEST_E-ART_TEST,d2
(1)   82/    35B8 : 6100 D3AE           		bsr	Video_LoadArt
(1)   83/    35BC : 41F8 397E           		lea	(MAP_TEST),a0			; long lea
(1)   84/    35C0 : 203C 0001 0000      		move.l	#locate(0,0,1),d0
(1)   85/    35C6 : 223C 0027 001B      		move.l	#map_size(320,224),d1
(1)   86/    35CC : 343C 0001           		move.w	#$0001,d2
(1)   87/    35D0 : 6100 D53A           		bsr	Video_LoadMap
(1)   89/    35D4 : 41F9 0003 26D0      		lea	(ASCII_FONT).l,a0
(1)   90/    35DA : 43F9 0000 054C      		lea	(ASCII_PAL).l,a1
(1)   91/    35E0 : 6100 D580           		bsr	Video_PrintInit
(1)   92/    35E4 : 203C 0003 BA50      		move.l	#Art_Sisi,d0
(1)   93/    35EA : 323C 9000           		move.w	#cell_vram(setVram_Sisi),d1
(1)   94/    35EE : 343C 05E0           		move.w	#Art_Sisi_e-Art_Sisi,d2
(1)   95/    35F2 : 6100 D374           		bsr	Video_LoadArt
(1)   96/    35F6 :                     
(1)   97/    35F6 : 41FA 02A2           		lea	PAL_TEST(pc),a0
(1)   98/    35FA : 7000                		moveq	#0,d0
(1)   99/    35FC : 323C 0010           		move.w	#16,d1
(1)  100/    3600 : 6100 D04A           		bsr	Video_FadePal
(1)  101/    3604 : 41F8 468E           		lea	(objPal_Sisi),a0
(1)  102/    3608 : 7010                		moveq	#16,d0
(1)  103/    360A : 323C 0010           		move.w	#16,d1
(1)  104/    360E : 6100 D03C           		bsr	Video_FadePal
(1)  105/    3612 : 41FA 02A2           		lea	str_TesterInit(pc),a0
(1)  106/    3616 : 203C 0000 0101      		move.l	#locate(1,1,0),d0
(1)  107/    361C : 6100 D56E           		bsr	Video_Print
(1)  108/    3620 :                     ; 		move.l	#Object_Mikami,d0
(1)  109/    3620 :                     ; 		moveq	#0,d1
(1)  110/    3620 :                     ; 		bsr	Objects_Set
(1)  111/    3620 : 203C 0000 3824      		move.l	#Object_Sisi,d0
(1)  112/    3626 : 6100 D7A8           		bsr	Objects_Add
(1)  113/    362A :                     	; ----------------------------------------------
(1)  114/    362A : 4278 D206           		clr.w	(RAM_GemaArg0).w
(1)  115/    362E : 4278 D208           		clr.w	(RAM_GemaArg1).w
(1)  116/    3632 : 4278 D20A           		clr.w	(RAM_GemaArg2).w
(1)  117/    3636 : 4278 D20C           		clr.w	(RAM_GemaArg3).w
(1)  118/    363A : 4278 D20E           		clr.w	(RAM_GemaArg4).w
(1)  119/    363E : 4278 D210           		clr.w	(RAM_GemaArg5).w
(1)  120/    3642 : 303C 00E8           		move.w	#200+32,d0
(1)  121/    3646 : 6100 CE90           		bsr	gemaSetBeats
(1)  122/    364A :                     ; 		moveq	#1,d0
(1)  123/    364A :                     ; 		bsr	gemaPlayTrack
(1)  124/    364A :                     
(1)  125/    364A :                     	; ----------------------------------------------
(1)  126/    364A : 6174                		bsr	.show_me
(1)  127/    364C :                     ; 		bsr	.steal_vars
(1)  128/    364C : 6100 D73A           		bsr	Objects_Run
(1)  129/    3650 :                     	; ----------------------------------------------
(1)  130/    3650 : 08F9 0006 FFFF      		bset	#bitDispEnbl,(RAM_VdpRegs+1).l		; Enable display
             3656 : BDF7             
(1)  131/    3658 : 11FC 0081 BE02      		move.b	#%10000001,(RAM_VdpRegs+$C).w		; H40 + shadow mode
(1)  132/    365E : 6100 CEBA           		bsr	Video_Update
(1)  133/    3662 : 6100 CF84           		bsr	Video_FadeIn
(1)  134/    3666 :                     
(1)  135/    3666 :                     ; ====================================================================
(1)  136/    3666 :                     ; ------------------------------------------------------
(1)  137/    3666 :                     ; Loop
(1)  138/    3666 :                     ; ------------------------------------------------------
(1)  139/    3666 :                     
(1)  140/    3666 :                     .loop:
(1)  141/    3666 : 6100 DA96           		bsr	System_Render
(1)  142/    366A :                     
(1)  143/    366A :                     ; 		bsr	.steal_vars
(1)  144/    366A : 6100 D71C           		bsr	Objects_Run
(1)  145/    366E : 41FA 0306           		lea	str_Info(pc),a0
(1)  146/    3672 : 203C 0000 1F1A      		move.l	#locate(31,26,0),d0
(1)  147/    3678 : 6100 D512           		bsr	Video_Print
(1)  148/    367C :                     
(1)  149/    367C :                     	; Controls
(1)  162/    367C :                     
(1)  163/    367C : 4DF8 C004           		lea	(Controller_1).w,a6
(1)  164/    3680 : 4BF8 D204           		lea	(RAM_CurrPick).w,a5
(1)  165/    3684 :                     	; UP/DOWN
(1)  166/    3684 : 3E2E 0002           		move.w	on_hold(a6),d7
(1)  167/    3688 : 0807 0004           		btst	#bitJoyB,d7
(1)  168/    368C : 6626                		bne.s.	.n_up
(1)  169/    368E : 3E2E 0004           		move.w	on_press(a6),d7
(1)  170/    3692 : 0807 0001           		btst	#bitJoyDown,d7
(1)  171/    3696 : 670A                		beq.s	.n_down
(1)  172/    3698 : 0C55 0004           		cmp.w	#4,(a5)		; MAX OPTIONS
(1)  173/    369C : 6704                		beq.s	.n_down
(1)  174/    369E : 5255                		addq.w	#1,(a5)
(1)  175/    36A0 : 611E                		bsr.s	.show_me
(1)  176/    36A2 :                     .n_down:
(1)  177/    36A2 : 3E2E 0004           		move.w	on_press(a6),d7
(1)  178/    36A6 : 0807 0000           		btst	#bitJoyUp,d7
(1)  179/    36AA : 6708                		beq.s	.n_up
(1)  180/    36AC : 4A55                		tst.w	(a5)
(1)  181/    36AE : 6704                		beq.s	.n_up
(1)  182/    36B0 : 5355                		subq.w	#1,(a5)
(1)  183/    36B2 : 610C                		bsr.s	.show_me
(1)  184/    36B4 :                     .n_up:
(1)  185/    36B4 : 3E38 D204           		move.w	(RAM_CurrPick).w,d7
(1)  186/    36B8 : E54F                		lsl.w	#2,d7
(1)  187/    36BA : 4EBB 7012           		jsr	.jump_list(pc,d7.w)
(1)  188/    36BE :                     .n_cbtn:
(1)  189/    36BE : 60A6                		bra	.loop
(1)  190/    36C0 :                     ; ------------------------------------------------------
(1)  191/    36C0 :                     
(1)  192/    36C0 :                     .show_me:
(1)  193/    36C0 : 41FA 0288           		lea	str_ShowMe(pc),a0
(1)  194/    36C4 : 203C 0000 1705      		move.l	#locate(23,5,0),d0
(1)  195/    36CA : 6000 D4C0           		bra	Video_Print
(1)  196/    36CE :                     
(1)  197/    36CE :                     ; ------------------------------------------------------
(1)  198/    36CE :                     
(1)  199/    36CE :                     .jump_list:
(1)  200/    36CE : 6000 001E           		bra.w	.nothing
(1)  201/    36D2 : 6000 002C           		bra.w	.option_1
(1)  202/    36D6 : 6000 00AE           		bra.w	.option_2
(1)  203/    36DA : 6000 00C4           		bra.w	.option_3
(1)  204/    36DE : 6000 00DC           		bra.w	.option_4
(1)  205/    36E2 : 6000 000A           		bra.w	.nothing
(1)  206/    36E6 : 6000 0006           		bra.w	.nothing
(1)  207/    36EA : 6000 0002           		bra.w	.nothing
(1)  208/    36EE :                     
(1)  209/    36EE :                     ; ------------------------------------------------------
(1)  210/    36EE :                     ; OPTION 0
(1)  211/    36EE :                     ; ------------------------------------------------------
(1)  212/    36EE :                     
(1)  213/    36EE :                     .nothing:
(1)  214/    36EE : 3E2E 0004           		move.w	on_press(a6),d7
(1)  215/    36F2 : 0807 0007           		btst	#bitJoyStart,d7
(1)  216/    36F6 : 6706                		beq.s	.no_press
(1)  217/    36F8 : 61C6                		bsr.s	.show_me
(1)  218/    36FA : 6000 CD40           		bra	gemaTest
(1)  219/    36FE :                     .no_press:
(1)  220/    36FE : 4E75                		rts
(1)  221/    3700 :                     
(1)  222/    3700 :                     ; ------------------------------------------------------
(1)  223/    3700 :                     ; OPTION 1
(1)  224/    3700 :                     ; ------------------------------------------------------
(1)  225/    3700 :                     
(1)  226/    3700 :                     .option_1:
(1)  227/    3700 : 4BF8 D206           		lea	(RAM_GemaArg0).w,a5
(1)  228/    3704 : 3E2E 0004           		move.w	on_press(a6),d7
(1)  229/    3708 : 0807 0007           		btst	#bitJoyStart,d7
(1)  230/    370C : 671E                		beq.s	.option1_args
(1)  231/    370E : 301D                		move.w	(a5)+,d0
(1)  232/    3710 : 321D                		move.w	(a5)+,d1
(1)  233/    3712 : 341D                		move.w	(a5)+,d2
(1)  234/    3714 : 6100 CD4C           		bsr	gemaPlayTrack
(1)  235/    3718 : 3038 D208           		move.w	(RAM_GemaArg1).w,d0
(1)  236/    371C : 3200                		move.w	d0,d1
(1)  237/    371E : D241                		add.w	d1,d1
(1)  238/    3720 : 41FA 00B6           		lea	.extnal_beats(pc),a0
(1)  239/    3724 : 3030 1000           		move.w	(a0,d1.w),d0
(1)  240/    3728 : 6000 CDAE           		bra	gemaSetBeats
(1)  241/    372C :                     ; 		bra.s	.show_me
(1)  242/    372C :                     .option1_args:
(1)  243/    372C : 3E2E 0002           		move.w	on_hold(a6),d7
(1)  244/    3730 : 3C07                		move.w	d7,d6
(1)  245/    3732 : 0246 0070           		andi.w	#JoyA+JoyB+JoyC,d6
(1)  246/    3736 : 67C6                		beq.s	.no_press
(1)  247/    3738 : 0807 0004           		btst	#bitJoyB,d7
(1)  248/    373C : 6704                		beq.s	.d2_opt
(1)  249/    373E : DAFC 0002           		adda	#2,a5
(1)  250/    3742 :                     .d2_opt:
(1)  251/    3742 : 0807 0005           		btst	#bitJoyC,d7
(1)  252/    3746 : 6704                		beq.s	.d3_opt
(1)  253/    3748 : DAFC 0004           		adda	#4,a5
(1)  254/    374C :                     .d3_opt:
(1)  255/    374C : 3E2E 0004           		move.w	on_press(a6),d7
(1)  256/    3750 : 0807 0003           		btst	#bitJoyRight,d7
(1)  257/    3754 : 6706                		beq.s	.op1_right
(1)  258/    3756 : 5255                		addq.w	#1,(a5)
(1)  259/    3758 : 6000 FF66           		bra	.show_me
(1)  260/    375C :                     .op1_right:
(1)  261/    375C : 0807 0002           		btst	#bitJoyLeft,d7
(1)  262/    3760 : 6706                		beq.s	.op1_left
(1)  263/    3762 : 5355                		subq.w	#1,(a5)
(1)  264/    3764 : 6000 FF5A           		bra	.show_me
(1)  265/    3768 :                     .op1_left:
(1)  266/    3768 : 3E2E 0002           		move.w	on_hold(a6),d7
(1)  267/    376C : 0807 0000           		btst	#bitJoyUp,d7
(1)  268/    3770 : 6706                		beq.s	.op1_down
(1)  269/    3772 : 5255                		addq.w	#1,(a5)
(1)  270/    3774 : 6000 FF4A           		bra	.show_me
(1)  271/    3778 :                     .op1_down:
(1)  272/    3778 : 0807 0001           		btst	#bitJoyDown,d7
(1)  273/    377C : 6706                		beq.s	.op1_up
(1)  274/    377E : 5355                		subq.w	#1,(a5)
(1)  275/    3780 : 6000 FF3E           		bra	.show_me
(1)  276/    3784 :                     .op1_up:
(1)  277/    3784 :                     
(1)  278/    3784 : 4E75                		rts
(1)  279/    3786 :                     
(1)  280/    3786 :                     ; ------------------------------------------------------
(1)  281/    3786 :                     ; OPTION 2
(1)  282/    3786 :                     ; ------------------------------------------------------
(1)  283/    3786 :                     
(1)  284/    3786 :                     .option_2:
(1)  285/    3786 : 4BF8 D206           		lea	(RAM_GemaArg0).w,a5
(1)  286/    378A : 3E2E 0004           		move.w	on_press(a6),d7
(1)  287/    378E : 0807 0007           		btst	#bitJoyStart,d7
(1)  288/    3792 : 6798                		beq.s	.option1_args
(1)  289/    3794 : 301D                		move.w	(a5)+,d0
(1)  290/    3796 : 321D                		move.w	(a5)+,d1
(1)  291/    3798 : 6000 CCEA           		bra	gemaStopTrack
(1)  292/    379C : 6000 FF22           		bra	.show_me
(1)  293/    37A0 :                     
(1)  294/    37A0 :                     ; ------------------------------------------------------
(1)  295/    37A0 :                     ; OPTION 3
(1)  296/    37A0 :                     ; ------------------------------------------------------
(1)  297/    37A0 :                     
(1)  298/    37A0 :                     .option_3:
(1)  299/    37A0 : 4BF8 D20C           		lea	(RAM_GemaArg3).w,a5
(1)  300/    37A4 : 3E2E 0004           		move.w	on_press(a6),d7
(1)  301/    37A8 : 0807 0007           		btst	#bitJoyStart,d7
(1)  302/    37AC : 6700 FF7E           		beq	.option1_args
(1)  303/    37B0 : 301D                		move.w	(a5)+,d0
(1)  304/    37B2 : 321D                		move.w	(a5)+,d1
(1)  305/    37B4 : 6000 CCEA           		bra	gemaFadeTrack
(1)  306/    37B8 : 6000 FF06           		bra	.show_me
(1)  307/    37BC :                     
(1)  308/    37BC :                     ; ------------------------------------------------------
(1)  309/    37BC :                     ; OPTION 4
(1)  310/    37BC :                     ; ------------------------------------------------------
(1)  311/    37BC :                     
(1)  312/    37BC :                     .option_4:
(1)  313/    37BC : 4BF8 D20C           		lea	(RAM_GemaArg3).w,a5
(1)  314/    37C0 : 3E2E 0004           		move.w	on_press(a6),d7
(1)  315/    37C4 : 0807 0007           		btst	#bitJoyStart,d7
(1)  316/    37C8 : 6700 FF62           		beq	.option1_args
(1)  317/    37CC : 301D                		move.w	(a5)+,d0
(1)  318/    37CE : 321D                		move.w	(a5)+,d1
(1)  319/    37D0 : 6000 CCEA           		bra	gemaSetTrackVol
(1)  320/    37D4 : 6000 FEEA           		bra	.show_me
(1)  321/    37D8 :                     
(1)  322/    37D8 :                     ; ------------------------------------------------------
(1)  323/    37D8 :                     ; EXTERNAL BEATS FOR EACH TRACK
(1)  324/    37D8 :                     ; ------------------------------------------------------
(1)  325/    37D8 :                     
(1)  326/    37D8 :                     .extnal_beats:
(1)  327/    37D8 : 00E8                	dc.w 200+32
(1)  328/    37DA : 00DC                	dc.w 200+20
(1)  329/    37DC : 00E8                	dc.w 200+32
(1)  330/    37DE : 00E8                	dc.w 200+32
(1)  331/    37E0 : 00E8                	dc.w 200+32
(1)  332/    37E2 : 00CC                	dc.w 200+4
(1)  333/    37E4 : 00E8                	dc.w 200+32
(1)  334/    37E6 : 00E8                	dc.w 200+32
(1)  335/    37E8 : 00E8                	dc.w 200+32
(1)  336/    37EA : 00E8                	dc.w 200+32
(1)  337/    37EC : 00E8                	dc.w 200+32
(1)  338/    37EE : 00E8                	dc.w 200+32
(1)  339/    37F0 : 00E8                	dc.w 200+32
(1)  340/    37F2 : 00E8                	dc.w 200+32
(1)  341/    37F4 : 00E8                	dc.w 200+32
(1)  342/    37F6 : 00E8                	dc.w 200+32
(1)  343/    37F8 : 00E8                	dc.w 200+32
(1)  344/    37FA : 00E8                	dc.w 200+32
(1)  345/    37FC : 00E8                	dc.w 200+32
(1)  346/    37FE : 00E8                	dc.w 200+32
(1)  347/    3800 : 00E8                	dc.w 200+32
(1)  348/    3802 : 00E8                	dc.w 200+32
(1)  349/    3804 :                     
(1)  350/    3804 :                     ; ====================================================================
(1)  351/    3804 :                     ; ------------------------------------------------------
(1)  352/    3804 :                     ; DATA assets locations for 68K and SH2
(1)  353/    3804 :                     ; ------------------------------------------------------
(1)  354/    3804 :                     
(1)  355/    3804 :                     file_mddata_def:
(1)  356/    3804 : 4441 5441 424E      		dc.b "DATABNKD.BIN",0		; CD Filename
             380A : 4B44 2E42 494E 00 
(1)  357/    3811 :                     		align 2
(1)  358/    3812 :                     
(1)  359/    3812 :                     pointr_marsdata_def:
(1)  360/    3812 : 0002 0ECE           		dc.l MARSDATA_DEFAULT		; 32X Cartridge point
(1)  361/    3816 : 4D41 5253 445F      		dc.b "MARSD_00.BIN",0		; CD Filename
             381C : 3030 2E42 494E 00 
(1)  362/    3823 :                     		align 2
(1)  363/    3824 :                     
(1)  364/    3824 :                     ; ====================================================================
(1)  365/    3824 :                     ; ------------------------------------------------------
(1)  366/    3824 :                     ; Objects
(1)  367/    3824 :                     ; ------------------------------------------------------
(1)  368/    3824 :                     
(1)  369/    3824 :                     ; ; --------------------------------------------------
(1)  370/    3824 :                     ; ; Mikami
(1)  371/    3824 :                     ; ; --------------------------------------------------
(1)  372/    3824 :                     ;
(1)  373/    3824 :                     ; Object_Mikami:
(1)  374/    3824 :                     ; 		moveq	#0,d0
(1)  375/    3824 :                     ; 		move.b	obj_index(a6),d0
(1)  376/    3824 :                     ; 		add.w	d0,d0
(1)  377/    3824 :                     ; 		move.w	.list(pc,d0.w),d1
(1)  378/    3824 :                     ; 		jmp	.list(pc,d1.w)
(1)  379/    3824 :                     ; ; ----------------------------------------------
(1)  380/    3824 :                     ; .list:		dc.w .init-.list
(1)  381/    3824 :                     ; 		dc.w .main-.list
(1)  382/    3824 :                     ; ; ----------------------------------------------
(1)  383/    3824 :                     ; .init:
(1)  384/    3824 :                     ; 		move.b	#1,obj_index(a6)
(1)  385/    3824 :                     ; 		move.l	#objMap_Mikami,obj_map(a6)
(1)  386/    3824 :                     ; 		move.l	#objDma_Mikami,obj_dma(a6)
(1)  387/    3824 :                     ; 		move.w	#setVram_Mikami|$2000,obj_vram(a6)
(1)  388/    3824 :                     ; 		bclr	#bitobj_Mars,obj_set(a6)	; Genesis object
(1)  389/    3824 :                     ; 		move.w	#(320/2)+48,obj_x(a6)
(1)  390/    3824 :                     ; 		move.w	#(224/2)+64,obj_y(a6)
(1)  391/    3824 :                     ; 		clr.w	obj_frame(a6)
(1)  392/    3824 :                     ; 		bsr	object_AnimReset
(1)  393/    3824 :                     ; 		bset	#0,obj_status(a6)
(1)  394/    3824 :                     ; 		bset	#bitobj_flipH,obj_set(a6)
(1)  395/    3824 :                     ;
(1)  396/    3824 :                     ; ; ----------------------------------------------
(1)  397/    3824 :                     ; .main:
(1)  398/    3824 :                     ; 		lea	(Controller_2),a3
(1)  399/    3824 :                     ; 		btst	#0,obj_status(a6)
(1)  400/    3824 :                     ; 		beq.s	.no_fallspd
(1)  401/    3824 :                     ; 		add.w	#$40,obj_y_spd(a6)
(1)  402/    3824 :                     ; .no_fallspd:
(1)  403/    3824 :                     ;
(1)  404/    3824 :                     ; ; .fake_col_c:
(1)  405/    3824 :                     ; 		move.w	on_press(a3),d7
(1)  406/    3824 :                     ; 		btst	#bitJoyC,d7
(1)  407/    3824 :                     ; 		beq.s	.fake_jump
(1)  408/    3824 :                     ; 		btst	#0,obj_status(a6)
(1)  409/    3824 :                     ; 		bne.s	.fake_jump
(1)  410/    3824 :                     ; 		move.w	#-$500,obj_y_spd(a6)
(1)  411/    3824 :                     ; 		move.b	#2,obj_anim_id(a6)
(1)  412/    3824 :                     ; 		bset	#0,obj_status(a6)
(1)  413/    3824 :                     ;
(1)  414/    3824 :                     ; 		moveq	#$0F,d0
(1)  415/    3824 :                     ; 		moveq	#1,d1
(1)  416/    3824 :                     ; 		bsr	gemaPlayFromBlk
(1)  417/    3824 :                     ;
(1)  418/    3824 :                     ; .fake_jump:
(1)  419/    3824 :                     ; 		move.w	on_press(a3),d7
(1)  420/    3824 :                     ; 		btst	#bitJoyB,d7
(1)  421/    3824 :                     ; 		beq.s	.no_slash
(1)  422/    3824 :                     ; 		tst.w	obj_y_spd(a6)
(1)  423/    3824 :                     ; 		bne.s	.no_slash
(1)  424/    3824 :                     ; 		clr.w	obj_anim_indx(a6)
(1)  425/    3824 :                     ; 		move.b	#4,obj_anim_id(a6)
(1)  426/    3824 :                     ; 		move.w	#$10,obj_ram+2(a6)
(1)  427/    3824 :                     ;
(1)  428/    3824 :                     ; 		moveq	#$0F,d0
(1)  429/    3824 :                     ; 		moveq	#0,d1
(1)  430/    3824 :                     ; 		bsr	gemaPlayFromBlk
(1)  431/    3824 :                     ;
(1)  432/    3824 :                     ; .no_slash:
(1)  433/    3824 :                     ; 		clr.w	obj_x_spd(a6)
(1)  434/    3824 :                     ;
(1)  435/    3824 :                     ; 		moveq	#0,d0
(1)  436/    3824 :                     ; 		moveq	#0,d1
(1)  437/    3824 :                     ; 		move.w	on_hold(a3),d7
(1)  438/    3824 :                     ; 		move.w	d7,d6
(1)  439/    3824 :                     ; 		andi.w	#JoyLeft+JoyRight,d6
(1)  440/    3824 :                     ; 		beq.s	.move_mika
(1)  441/    3824 :                     ; 		clr.w	obj_ram+2(a6)
(1)  442/    3824 :                     ; 		move.w	#$180,d6
(1)  443/    3824 :                     ; 		btst	#bitJoyRight,d7
(1)  444/    3824 :                     ; 		beq.s	.no_l
(1)  445/    3824 :                     ; 		move.w	d6,obj_x_spd(a6)
(1)  446/    3824 :                     ; .no_l
(1)  447/    3824 :                     ; 		neg.w	d6
(1)  448/    3824 :                     ; 		btst	#bitJoyLeft,d7
(1)  449/    3824 :                     ; 		beq.s	.move_mika
(1)  450/    3824 :                     ; 		move.w	d6,obj_x_spd(a6)
(1)  451/    3824 :                     ; .move_mika:
(1)  452/    3824 :                     ;
(1)  453/    3824 :                     ;
(1)  454/    3824 :                     ; 		moveq	#0,d6
(1)  455/    3824 :                     ; 		tst.w	obj_x_spd(a6)
(1)  456/    3824 :                     ; 		beq.s	.r_spd
(1)  457/    3824 :                     ; 		moveq	#1,d6
(1)  458/    3824 :                     ; 		move.b	obj_set(a6),d7
(1)  459/    3824 :                     ; 		bclr	#bitobj_flipH,d7
(1)  460/    3824 :                     ; 		tst.w	obj_x_spd(a6)
(1)  461/    3824 :                     ; 		bpl.s	.r_flip
(1)  462/    3824 :                     ; 		bset	#bitobj_flipH,d7
(1)  463/    3824 :                     ; .r_flip:
(1)  464/    3824 :                     ; 		move.b	d7,obj_set(a6)
(1)  465/    3824 :                     ; .r_spd:
(1)  466/    3824 :                     ;
(1)  467/    3824 :                     ; 		tst.w	obj_ram+2(a6)
(1)  468/    3824 :                     ; 		beq.s	.free_anim
(1)  469/    3824 :                     ; 		subi.w	#1,obj_ram+2(a6)
(1)  470/    3824 :                     ; 		bne.s	.no_anim
(1)  471/    3824 :                     ; .free_anim:
(1)  472/    3824 :                     ; 		btst	#0,obj_status(a6)
(1)  473/    3824 :                     ; 		bne.s	.no_anim
(1)  474/    3824 :                     ; 		tst.w	obj_y_spd(a6)
(1)  475/    3824 :                     ; 		bmi.s	.is_jumpin
(1)  476/    3824 :                     ; 		move.b	d6,obj_anim_id(a6)
(1)  477/    3824 :                     ; .is_jumpin:
(1)  478/    3824 :                     ; 		tst.w	obj_y_spd(a6)
(1)  479/    3824 :                     ; 		beq.s	.no_anim
(1)  480/    3824 :                     ; 		move.b	#3,obj_anim_id(a6)
(1)  481/    3824 :                     ; .no_anim:
(1)  482/    3824 :                     ; 		bsr	object_Speed
(1)  483/    3824 :                     ;
(1)  484/    3824 :                     ; 		move.w	#(224-16)-32,d7
(1)  485/    3824 :                     ; 		move.w	obj_y(a6),d0
(1)  486/    3824 :                     ; 		cmp.w	d7,d0
(1)  487/    3824 :                     ; 		blt.s	.fake_col
(1)  488/    3824 :                     ; 		clr.w	obj_y_spd(a6)
(1)  489/    3824 :                     ; 		andi.w	#-$10,obj_y(a6)
(1)  490/    3824 :                     ; 		bclr	#0,obj_status(a6)
(1)  491/    3824 :                     ; .fake_col:
(1)  492/    3824 :                     ;
(1)  493/    3824 :                     ; ; 		move.w	(Controller_2+on_press),d7
(1)  494/    3824 :                     ; ; 		btst	#bitClickM,d7
(1)  495/    3824 :                     ; ; 		beq.s	.no_reset
(1)  496/    3824 :                     ; ; 		move.w	#320/2,obj_x(a6)
(1)  497/    3824 :                     ; ; 		move.w	#224/2,obj_y(a6)
(1)  498/    3824 :                     ; ; .no_reset:
(1)  499/    3824 :                     ; 		lea	.anim_data(pc),a0
(1)  500/    3824 :                     ; 		bsr	object_Animate
(1)  501/    3824 :                     ; 		bra	object_Display
(1)  502/    3824 :                     ;
(1)  503/    3824 :                     ; ; ----------------------------------------------
(1)  504/    3824 :                     ;
(1)  505/    3824 :                     ; .anim_data:
(1)  506/    3824 :                     ; 		dc.w .anim_stand-.anim_data
(1)  507/    3824 :                     ; 		dc.w .anim_move-.anim_data
(1)  508/    3824 :                     ; 		dc.w .anim_jump-.anim_data
(1)  509/    3824 :                     ; 		dc.w .anim_fall-.anim_data
(1)  510/    3824 :                     ; 		dc.w .anim_slash-.anim_data
(1)  511/    3824 :                     ; .anim_stand:
(1)  512/    3824 :                     ; 		dc.w 6
(1)  513/    3824 :                     ; 		dc.w 0,-1
(1)  514/    3824 :                     ; 		align 2
(1)  515/    3824 :                     ; .anim_move:
(1)  516/    3824 :                     ; 		dc.w 5
(1)  517/    3824 :                     ; 		dc.w 2,3,4,5,6,7,8,-3,1
(1)  518/    3824 :                     ; 		align 2
(1)  519/    3824 :                     ; .anim_jump:
(1)  520/    3824 :                     ; 		dc.w 5
(1)  521/    3824 :                     ; 		dc.w 10,11,12,-3,2
(1)  522/    3824 :                     ; 		align 2
(1)  523/    3824 :                     ; .anim_fall:
(1)  524/    3824 :                     ; 		dc.w 5
(1)  525/    3824 :                     ; 		dc.w 11,12,-3,1
(1)  526/    3824 :                     ; 		align 2
(1)  527/    3824 :                     ; .anim_slash:
(1)  528/    3824 :                     ; 		dc.w 1
(1)  529/    3824 :                     ; 		dc.w 14,15,16,17,-2
(1)  530/    3824 :                     ; 		align 2
(1)  531/    3824 :                     ;
(1)  532/    3824 :                     ; --------------------------------------------------
(1)  533/    3824 :                     ; Sisi
(1)  534/    3824 :                     ; --------------------------------------------------
(1)  535/    3824 :                     
(1)  536/    3824 :                     Object_Sisi:
(1)  537/    3824 : 7000                		moveq	#0,d0
(1)  538/    3826 : 102E 0021           		move.b	obj_index(a6),d0
(1)  539/    382A : D040                		add.w	d0,d0
(1)  540/    382C : 323B 0006           		move.w	.list(pc,d0.w),d1
(1)  541/    3830 : 4EFB 1002           		jmp	.list(pc,d1.w)
(1)  542/    3834 :                     ; ----------------------------------------------
(1)  543/    3834 : 0004                .list:		dc.w .init-.list
(1)  544/    3836 : 002E                		dc.w .main-.list
(1)  545/    3838 :                     ; ----------------------------------------------
(1)  546/    3838 :                     .init:
(1)  547/    3838 : 1D7C 0001 0021      		move.b	#1,obj_index(a6)
(1)  548/    383E : 2D7C 0000 46AE      		move.l	#objMap_Sisi,obj_map(a6)
             3844 : 000C             
(1)  549/    3846 : 2D7C 0000 0000      		move.l	#0,obj_dma(a6)
             384C : 0010             
(1)  550/    384E : 3D7C 2480 0014      		move.w	#setVram_Sisi|$2000,obj_vram(a6)
(1)  551/    3854 : 08AE 0007 0022      		bclr	#bitobj_Mars,obj_set(a6)	; Genesis object
(1)  552/    385A :                     ; 		move.w	#320/2,obj_x(a6)
(1)  553/    385A :                     ; 		move.w	#224/2,obj_y(a6)
(1)  554/    385A : 426E 001E           		clr.w	obj_frame(a6)
(1)  555/    385E : 6100 D7F2           		bsr	object_AnimReset
(1)  556/    3862 :                     
(1)  557/    3862 :                     ; ----------------------------------------------
(1)  558/    3862 :                     .main:
(1)  559/    3862 :                     ; 		move.w	obj_ram(a6),d0
(1)  560/    3862 :                     ; 		move.w	obj_ram+2(a6),d1
(1)  561/    3862 :                     
(1)  562/    3862 :                     
(1)  563/    3862 : 7000                		moveq	#0,d0
(1)  564/    3864 :                     
(1)  565/    3864 : 3238 D204           		move.w	(RAM_CurrPick).w,d1
(1)  566/    3868 : E749                		lsl.w	#3,d1
(1)  567/    386A :                     
(1)  568/    386A : 0640 0018           		addi.w	#$18,d0
(1)  569/    386E : 0641 0020           		addi.w	#$20,d1
(1)  570/    3872 : 3D40 0004           		move.w	d0,obj_x(a6)
(1)  571/    3876 : 3D41 0008           		move.w	d1,obj_y(a6)
(1)  572/    387A :                     
(1)  573/    387A :                     ; 		lea	(RAM_Objects),a0
(1)  574/    387A :                     ; 		cmp.l	#Object_Mikami,obj_code(a0)
(1)  575/    387A :                     ; 		bne.s	.dont_link
(1)  576/    387A :                     ; 		move.w	obj_ram+2(a6),d7
(1)  577/    387A :                     ; 		cmp.w	#24<<1,d7
(1)  578/    387A :                     ; 		bge.s	.dont_incr
(1)  579/    387A :                     ; 		add.w	#2,d7
(1)  580/    387A :                     ; .dont_incr:
(1)  581/    387A :                     ; 		move.w	d7,obj_ram+2(a6)
(1)  582/    387A :                     ;
(1)  583/    387A :                     ; 		move.w	obj_x(a0),d7
(1)  584/    387A :                     ; 		move.w	obj_y(a0),d6
(1)  585/    387A :                     ; 		move.w	#24,d5
(1)  586/    387A :                     ; 		sub.w	d5,d6
(1)  587/    387A :                     ; 		move.w	obj_ram(a6),d0
(1)  588/    387A :                     ; 		moveq	#4,d1
(1)  589/    387A :                     ; 		bsr	System_SineWave
(1)  590/    387A :                     ; 		asr.w	#8,d2
(1)  591/    387A :                     ; 		add.w	d2,d6
(1)  592/    387A :                     ; 		moveq	#5,d1
(1)  593/    387A :                     ; 		bsr	System_SineWave_Cos
(1)  594/    387A :                     ; 		asr.w	#8,d2
(1)  595/    387A :                     ; 		add.w	d2,d7
(1)  596/    387A :                     ;
(1)  597/    387A :                     ; 		move.b	obj_set(a6),d0
(1)  598/    387A :                     ; 		move.b	obj_set(a0),d1
(1)  599/    387A :                     ; 		eor.w	d1,d0
(1)  600/    387A :                     ; 		andi.w	#1,d0
(1)  601/    387A :                     ; 		beq.s	.same_h
(1)  602/    387A :                     ; 		clr.w	obj_ram+2(a6)
(1)  603/    387A :                     ; .same_h:
(1)  604/    387A :                     ; 		move.w	obj_ram+2(a6),d4
(1)  605/    387A :                     ; 		bclr	#bitobj_flipH,obj_set(a6)
(1)  606/    387A :                     ; 		btst	#bitobj_flipH,obj_set(a0)
(1)  607/    387A :                     ; 		beq.s	.dont_flipx
(1)  608/    387A :                     ; 		neg.w	d4
(1)  609/    387A :                     ; 		bset	#bitobj_flipH,obj_set(a6)
(1)  610/    387A :                     ; .dont_flipx:
(1)  611/    387A :                     ; 		lsr.w	#1,d4
(1)  612/    387A :                     ; 		add.w	d4,d7
(1)  613/    387A :                     ; 		move.w	d6,obj_y(a6)
(1)  614/    387A :                     ; 		move.w	d7,obj_x(a6)
(1)  615/    387A :                     ; 		add.w	#4,obj_ram(a6)
(1)  616/    387A :                     
(1)  617/    387A :                     .dont_link:
(1)  618/    387A : 41FA 000A           		lea	.anim_data(pc),a0
(1)  619/    387E : 6100 D746           		bsr	object_Animate
(1)  620/    3882 : 6000 D6A6           		bra	object_Display
(1)  621/    3886 :                     
(1)  622/    3886 :                     ; ----------------------------------------------
(1)  623/    3886 :                     
(1)  624/    3886 :                     .anim_data:
(1)  625/    3886 : 0008                		dc.w .anim_00-.anim_data
(1)  626/    3888 : 0008                		dc.w .anim_00-.anim_data
(1)  627/    388A : 0008                		dc.w .anim_00-.anim_data
(1)  628/    388C : 0008                		dc.w .anim_00-.anim_data
(1)  629/    388E :                     .anim_00:
(1)  630/    388E : 0008                		dc.w 8
(1)  631/    3890 : 0000 0001 0002      		dc.w 0,1,2,1,-1
             3896 : 0001 FFFF          
(1)  632/    389A :                     		align 2
(1)  633/    389A :                     ;
(1)  634/    389A :                     ; ; --------------------------------------------------
(1)  635/    389A :                     ; ; Ball
(1)  636/    389A :                     ; ; --------------------------------------------------
(1)  637/    389A :                     ;
(1)  638/    389A :                     ; Object_ball:
(1)  639/    389A :                     ; 		moveq	#0,d0
(1)  640/    389A :                     ; 		move.b	obj_index(a6),d0
(1)  641/    389A :                     ; 		add.w	d0,d0
(1)  642/    389A :                     ; 		move.w	.list(pc,d0.w),d1
(1)  643/    389A :                     ; 		jmp	.list(pc,d1.w)
(1)  644/    389A :                     ; ; ----------------------------------------------
(1)  645/    389A :                     ; .list:		dc.w .init-.list
(1)  646/    389A :                     ; 		dc.w .main-.list
(1)  647/    389A :                     ; ; ----------------------------------------------
(1)  648/    389A :                     ; .init:
(1)  649/    389A :                     ; 		move.b	#1,obj_index(a6)
(1)  650/    389A :                     ; 		move.l	#objMap_Sisi,obj_map(a6)
(1)  651/    389A :                     ; 		move.l	#0,obj_dma(a6)
(1)  652/    389A :                     ; 		move.w	#setVram_Sisi|$0000,obj_vram(a6)
(1)  653/    389A :                     ; 		bclr	#bitobj_Mars,obj_set(a6)	; Genesis object
(1)  654/    389A :                     ; 		move.w	#320/2,obj_x(a6)
(1)  655/    389A :                     ; 		move.w	#224/2,obj_y(a6)
(1)  656/    389A :                     ; 		clr.w	obj_frame(a6)
(1)  657/    389A :                     ; 		bsr	object_AnimReset
(1)  658/    389A :                     ;
(1)  659/    389A :                     ; 		move.w	#$180,obj_x_spd(a6)
(1)  660/    389A :                     ; 		move.w	#$180,obj_y_spd(a6)
(1)  661/    389A :                     ;
(1)  662/    389A :                     ; ; ----------------------------------------------
(1)  663/    389A :                     ; .main:
(1)  664/    389A :                     ; 		move.w	obj_x(a6),d0
(1)  665/    389A :                     ; 		move.w	obj_y(a6),d1
(1)  666/    389A :                     ; 		sub.w	#16,d0
(1)  667/    389A :                     ; 		sub.w	#16,d1
(1)  668/    389A :                     ; 		move.w	#320-32,d2
(1)  669/    389A :                     ; 		move.w	#(224-16)-32,d3
(1)  670/    389A :                     ;
(1)  671/    389A :                     ; 		tst.w	d1
(1)  672/    389A :                     ; 		bpl.s	.on_scrn_yu
(1)  673/    389A :                     ; 		neg.w	obj_y_spd(a6)
(1)  674/    389A :                     ; 		bsr	.playit
(1)  675/    389A :                     ; .on_scrn_yu:
(1)  676/    389A :                     ; 		cmp.w	d3,d1
(1)  677/    389A :                     ; 		blt.s	.on_scrn_yd
(1)  678/    389A :                     ; 		neg.w	obj_y_spd(a6)
(1)  679/    389A :                     ; 		bsr	.playit
(1)  680/    389A :                     ; .on_scrn_yd:
(1)  681/    389A :                     ;
(1)  682/    389A :                     ; 		tst.w	d0
(1)  683/    389A :                     ; 		bpl.s	.on_scrn_xu
(1)  684/    389A :                     ; 		neg.w	obj_x_spd(a6)
(1)  685/    389A :                     ; 		bsr.s	.playit
(1)  686/    389A :                     ; .on_scrn_xu:
(1)  687/    389A :                     ; 		cmp.w	d2,d0
(1)  688/    389A :                     ; 		blt.s	.on_scrn_xd
(1)  689/    389A :                     ; 		neg.w	obj_x_spd(a6)
(1)  690/    389A :                     ; 		bsr.s	.playit
(1)  691/    389A :                     ; .on_scrn_xd:
(1)  692/    389A :                     ;
(1)  693/    389A :                     ; 		bsr	object_Speed
(1)  694/    389A :                     ;
(1)  695/    389A :                     ; 		lea	.anim_data(pc),a0
(1)  696/    389A :                     ; 		bsr	object_Animate
(1)  697/    389A :                     ; 		bra	object_Display
(1)  698/    389A :                     ; .playit:
(1)  699/    389A :                     ; 		moveq	#$0F,d0
(1)  700/    389A :                     ; 		moveq	#2,d1
(1)  701/    389A :                     ; 		bra	gemaPlayFromBlk
(1)  702/    389A :                     ;
(1)  703/    389A :                     ; ; ----------------------------------------------
(1)  704/    389A :                     ;
(1)  705/    389A :                     ; .anim_data:
(1)  706/    389A :                     ; 		dc.w .anim_00-.anim_data
(1)  707/    389A :                     ; 		dc.w .anim_00-.anim_data
(1)  708/    389A :                     ; 		dc.w .anim_00-.anim_data
(1)  709/    389A :                     ; 		dc.w .anim_00-.anim_data
(1)  710/    389A :                     ; .anim_00:
(1)  711/    389A :                     ; 		dc.w 8
(1)  712/    389A :                     ; 		dc.w 0,1,2,1,-1
(1)  713/    389A :                     ; 		align 2
(1)  714/    389A :                     
(1)  715/    389A :                     ; ====================================================================
(1)  716/    389A :                     ; ------------------------------------------------------
(1)  717/    389A :                     ; Subroutines
(1)  718/    389A :                     ; ------------------------------------------------------
(1)  719/    389A :                     
(1)  720/    389A :                     ; ====================================================================
(1)  721/    389A :                     ; ------------------------------------------------------
(1)  722/    389A :                     ; Custom VBlank
(1)  723/    389A :                     ; ------------------------------------------------------
(1)  724/    389A :                     
(1)  725/    389A :                     ; ------------------------------------------------------
(1)  726/    389A :                     ; Custom HBlank
(1)  727/    389A :                     ; ------------------------------------------------------
(1)  728/    389A :                     
(1)  729/    389A :                     ; ====================================================================
(1)  730/    389A :                     ; ------------------------------------------------------
(1)  731/    389A :                     ; Small DATA section
(1)  732/    389A :                     ; ------------------------------------------------------
(1)  733/    389A :                     
(1)  734/    389A :                     PAL_TEST:
(1)  735/    389A :                     		binclude "game/screen_0/data/maps/md/test/md_pal.bin"
(1)  736/    38B6 :                     		align 2
(1)  737/    38B6 :                     
(1)  738/    38B6 :                     ; str_ShowPsg:	dc.b "\\w \\w \\w \\w",0
(1)  739/    38B6 :                     ; 		dc.l RAM_ChnlLinks,RAM_ChnlLinks+2,RAM_ChnlLinks+4,RAM_ChnlLinks+6
(1)  740/    38B6 :                     ; 		align 2
(1)  741/    38B6 :                     ; str_ShowFm:	dc.b "\\w \\w \\w \\w \\w \\w",0
(1)  742/    38B6 :                     ; 		dc.l RAM_ChnlLinks+8,RAM_ChnlLinks+10,RAM_ChnlLinks+12
(1)  743/    38B6 :                     ; 		dc.l RAM_ChnlLinks+14,RAM_ChnlLinks+16,RAM_ChnlLinks+18
(1)  744/    38B6 :                     ; 		align 2
(1)  745/    38B6 :                     ; str_ShowPcm:	dc.b "\\w \\w \\w \\w",$0A
(1)  746/    38B6 :                     ; 		dc.b "\\w \\w \\w \\w",0
(1)  747/    38B6 :                     ; 		dc.l RAM_ChnlLinks+20,RAM_ChnlLinks+22,RAM_ChnlLinks+24,RAM_ChnlLinks+26
(1)  748/    38B6 :                     ; 		dc.l RAM_ChnlLinks+28,RAM_ChnlLinks+30,RAM_ChnlLinks+32,RAM_ChnlLinks+34
(1)  749/    38B6 :                     ; 		align 2
(1)  750/    38B6 :                     ; str_ShowPwm:	dc.b "\\w \\w \\w \\w",$0A
(1)  751/    38B6 :                     ; 		dc.b "\\w \\w \\w",0
(1)  752/    38B6 :                     ; 		dc.l RAM_ChnlLinks+36,RAM_ChnlLinks+38,RAM_ChnlLinks+40,RAM_ChnlLinks+42
(1)  753/    38B6 :                     ; 		dc.l RAM_ChnlLinks+44,RAM_ChnlLinks+46,RAM_ChnlLinks+48,RAM_ChnlLinks+50
(1)  754/    38B6 :                     ; 		align 2
(1)  755/    38B6 :                     
(1)  756/    38B6 :                     str_TesterInit:
(1)  757/    38B6 : 4745 4D41 2F4E      		dc.b "GEMA/Nikona tester",$0A
             38BC : 696B 6F6E 6120 
             38C2 : 7465 7374 6572 0A 
(1)  758/    38C9 : 2020 2020 2020      		dc.b "                \{DATE} \{TIME}",$0A
             38CF : 2020 2020 2020 
             38D5 : 2020 2020 3033 
             38DB : 2F30 352F 3230 
             38E1 : 3234 2031 313A 
             38E7 : 3439 3A32 3220 
             38ED : 504D 0A          
(1)  759/    38F0 : 0A                  		dc.b $0A
(1)  760/    38F1 : 2020 2020 6765      		dc.b "    gemaTest",$0A
             38F7 : 6D61 5465 7374 0A 
(1)  761/    38FE : 2020 2020 6765      		dc.b "    gemaPlayTrack",$0A
             3904 : 6D61 506C 6179 
             390A : 5472 6163 6B0A    
(1)  762/    3910 : 2020 2020 6765      		dc.b "    gemaStopTrack",$0A
             3916 : 6D61 5374 6F70 
             391C : 5472 6163 6B0A    
(1)  763/    3922 : 2020 2020 6765      		dc.b "    gemaFadeTrack",$0A
             3928 : 6D61 4661 6465 
             392E : 5472 6163 6B0A    
(1)  764/    3934 : 2020 2020 6765      		dc.b "    gemaSetTrackVol",0
             393A : 6D61 5365 7454 
             3940 : 7261 636B 566F 
             3946 : 6C00             
(1)  765/    3948 : 00                  		dc.b 0
(1)  766/    3949 :                     		align 2
(1)  767/    394A : 5C77 205C 7720      str_ShowMe:	dc.b "\\w \\w \\w",$A
             3950 : 5C77 0A          
(1)  768/    3953 : 0A                  		dc.b $A
(1)  769/    3954 : 5C77 205C 7720      		dc.b "\\w \\w \\w",0
             395A : 5C77 00          
(1)  770/    395D : FFFF D206 FFFF      		dc.l RAM_GemaArg0,RAM_GemaArg1,RAM_GemaArg2
             3963 : D208 FFFF D20A    
(1)  771/    3969 : FFFF D20C FFFF      		dc.l RAM_GemaArg3,RAM_GemaArg4,RAM_GemaArg5
             396F : D20E FFFF D210    
(1)  772/    3975 :                     		align 2
(1)  773/    3976 :                     str_Info:
(1)  774/    3976 : 5C6C 00             		dc.b "\\l",0
(1)  775/    3979 : FFFF BDD4           		dc.l RAM_Framecount
(1)  776/    397D :                     		align 2
(1)  777/    397E :                     ; str_Notes:
(1)  778/    397E :                     ;  dc.b "---",0,"C#0",0,"D-0",0,"D#0",0,"E-0",0,"F-0",0,"F#0",0,"G-0",0,"G#0",0,"A-0",0,"A#0",0,"B-0",0
(1)  779/    397E :                     ;  dc.b "C-1",0,"C#1",0,"D-1",0,"D#1",0,"E-1",0,"F-1",0,"F#1",0,"G-1",0,"G#1",0,"A-1",0,"A#1",0,"B-1",0
(1)  780/    397E :                     ;  dc.b "C-2",0,"C#2",0,"D-2",0,"D#2",0,"E-2",0,"F-2",0,"F#2",0,"G-2",0,"G#2",0,"A-2",0,"A#2",0,"B-2",0
(1)  781/    397E :                     ;  dc.b "C-3",0,"C#3",0,"D-3",0,"D#3",0,"E-3",0,"F-3",0,"F#3",0,"G-3",0,"G#3",0,"A-3",0,"A#3",0,"B-3",0
(1)  782/    397E :                     ;  dc.b "C-4",0,"C#4",0,"D-4",0,"D#4",0,"E-4",0,"F-4",0,"F#4",0,"G-4",0,"G#4",0,"A-4",0,"A#4",0,"B-4",0
(1)  783/    397E :                     ;  dc.b "C-5",0,"C#5",0,"D-5",0,"D#5",0,"E-5",0,"F-5",0,"F#5",0,"G-5",0,"G#5",0,"A-5",0,"A#5",0,"B-5",0
(1)  784/    397E :                     ;  dc.b "C-6",0,"C#6",0,"D-6",0,"D#6",0,"E-6",0,"F-6",0,"F#6",0,"G-6",0,"G#6",0,"A-6",0,"A#6",0,"B-6",0
(1)  785/    397E :                     ;  dc.b "C-7",0,"C#7",0,"D-7",0,"D#7",0,"E-7",0,"F-7",0,"F#7",0,"G-7",0,"G#7",0,"A-7",0,"A#7",0,"B-7",0
(1)  786/    397E :                     ;  dc.b "C-8",0,"C#8",0,"D-8",0,"D#8",0,"E-8",0,"F-8",0,"F#8",0,"G-8",0,"G#8",0,"A-8",0,"A#8",0,"B-8",0
(1)  787/    397E :                     ;  dc.b "C-9",0,"C#9",0,"D-9",0,"D#9",0,"E-9",0,"F-9",0,"F#9",0,"G-9",0,"G#9",0,"A-9",0,"A#9",0,"B-9",0
(1)  788/    397E :                     ;  align 2
(1)  789/    397E :                     ; str_Notes_FM:
(1)  790/    397E :                     ;  dc.b "---",0
(1)  791/    397E :                     ;  dc.b "C-",0,0,"C#",0,0,"D-",0,0,"D#",0,0,"E-",0,0,"F-",0,0
(1)  792/    397E :                     ;  dc.b "F#",0,0,"G-",0,0,"G#",0,0,"A-",0,0,"A#",0,0,"B-",0,0
(1)  793/    397E :                     ;  align 2
(1)  794/    397E :                     ; str_Octv_FM:
(1)  795/    397E :                     ;  dc.b "0",0,"1",0,"2",0,"3",0,"4",0,"5",0,"6",0,"7",0
(1)  796/    397E :                     ;  align 2
(1)  797/    397E :                     
     370/    397E :                     mcscrn_e:
     371/    397E :                     ; 	screen_code Md_Screen01,Md_Screen01_e,"game/screen_1/code.asm"
     372/    397E :                     
     373/    397E :                     ; ====================================================================
     374/    397E :                     ; ----------------------------------------------------------------
     375/    397E :                     ; DATA SECTION
     376/    397E :                     ; ----------------------------------------------------------------
     377/    397E :                     
     378/    397E :                     ; ====================================================================
     379/    397E :                     ; ----------------------------------------------------------------
     380/    397E :                     ; 68K DATA BANKs
     381/    397E :                     ;
     382/    397E :                     ; SEGA CD / CD32X:
     383/    397E :                     ; Stored in WORD-RAM pieces
     384/    397E :                     ; limited to 256KB 2M or 128KB 1M/1M (*UNTESTED*)
     385/    397E :                     ; ** WORD-RAM CANNOT BE USED IF USING ASIC STAMPS **
     386/    397E :                     ;
     387/    397E :                     ; SEGA 32X Cartridge:
     388/    397E :                     ; Limited to 1MB, bankswitchable if needed. (TODO bankswitching)
     389/    397E :                     ; ONLY 4 banks can be used, Bank 0 already uses the
     390/    397E :                     ; first 512KB for the code.
     391/    397E :                     ;
     392/    397E :                     ; To keep multi-porting limit your screen's data to 256KB
     393/    397E :                     ; ----------------------------------------------------------------
     394/    397E :                     
     395/    397E :                     ; --------------------------------------------------------
     396/    397E :                     ; DEFAULT BANK
     397/    397E :                     ;
     398/    397E :                     ; CD/CD32X:
     399/    397E :                     ; $200000 256KB (WORD-RAM)
     400/    397E :                     ;
     401/    397E :                     ; 32X:
     402/    397E :                     ; $900000 1MB (Bankswichable area)
     403/    397E :                     ;
     404/    397E :                     ; Usage:
     405/    397E :                     ; data_bkset LABEL_START,OPTION
     406/    397E :                     ; (add your includes and bincludes)
     407/    397E :                     ; data_bkend LABEL_START,LABEL_END,used_size
     408/    397E :                     ;
     409/    397E :                     ; OPTION (32X Cartridge ONLY):
     410/    397E :                     ;  0, Normal 32X $900000 bank
     411/    397E :                     ; -1, This bank is the first one
     412/    397E :                     ;
     413/    397E :                     ; This is ignored on other systems.
     414/    397E :                     ; --------------------------------------------------------
     415/    397E :                     
     416/    397E : (MACRO)              	data_bkset MCD_DBANK0,-1	; <-- note the -1
     416/    397E :                     ; MCD_DBANK0:
     416/    397E : =$397E               MCD_DBANK0 label *
     417/    397E :                     mdbank0:
     418/    397E :                     		include "game/screen_0/data_bank.asm"
(1)    1/    397E :                     ; ====================================================================
(1)    2/    397E :                     ; ----------------------------------------------------------------
(1)    3/    397E :                     ; 68K SCREEN MODE DATA
(1)    4/    397E :                     ; for big stuff like maps, level, etc.
(1)    5/    397E :                     ;
(1)    6/    397E :                     ; For Genesis graphics use data_dma.asm
(1)    7/    397E :                     ; and for 32X graphics use data_mgfx.asm
(1)    8/    397E :                     ;
(1)    9/    397E :                     ; 32X 256-COLOR PALETTES GO HERE.
(1)   10/    397E :                     ;
(1)   11/    397E :                     ; Maximum size: $0FFFFF bytes per bank
(1)   12/    397E :                     ; ----------------------------------------------------------------
(1)   13/    397E :                     
(1)   14/    397E :                     ; ----------------------------------------------------------------
(1)   15/    397E :                     ; 32X Screen maps
(1)   16/    397E :                     ; ----------------------------------------------------------------
(1)   17/    397E :                     
(1)   18/    397E :                     MAP_TEST:
(1)   19/    397E :                     		binclude "game/screen_0/data/maps/md/test/md_map.bin"
(1)   20/    423E :                     		align 2
(1)   21/    423E :                     MapMars_TEST:
(1)   22/    423E :                     		binclude "game/screen_0/data/maps/mars/test/data_map.bin"
(1)   23/    446E :                     		align 2
(1)   24/    446E :                     
(1)   25/    446E :                     ; ----------------------------------------------------------------
(1)   26/    446E :                     ; 32X Palettes
(1)   27/    446E :                     ; ----------------------------------------------------------------
(1)   28/    446E :                     
(1)   29/    446E :                     PalMars_TEST:
(1)   30/    446E :                     		binclude "game/screen_0/data/maps/mars/test/data_pal.bin"
(1)   31/    466E :                     		align 2
(1)   32/    466E :                     PalMars_Sabrina:
(1)   33/    466E :                     		binclude "game/screen_0/data/objects/mars/sabrina/sabrina_pal.bin"
(1)   34/    468E :                     		align 2
(1)   35/    468E :                     
(1)   36/    468E :                     ; ----------------------------------------------------------------
(1)   37/    468E :                     ; Object palettes
(1)   38/    468E :                     ; ----------------------------------------------------------------
(1)   39/    468E :                     
(1)   40/    468E :                     objPal_Sisi:
(1)   41/    468E :                     		binclude "game/screen_0/data/objects/md/sisi/sisi_pal.bin"
(1)   42/    46AE :                     		align 2
(1)   43/    46AE :                     
(1)   44/    46AE :                     ; ----------------------------------------------------------------
(1)   45/    46AE :                     ; Object maps
(1)   46/    46AE :                     ; ----------------------------------------------------------------
(1)   47/    46AE :                     
(1)   48/    46AE :                     objMap_Sisi:
(1)   49/    46AE :                     		binclude "game/screen_0/data/objects/md/sisi/sisi_map.bin"
(1)   50/    470A :                     		align 2
(1)   51/    470A :                     
     422/    470A :                     		include "sound/tracks.asm"		; GEMA: Track data
(1)    1/    470A :                     ; ===========================================================================
(1)    2/    470A :                     ; ------------------------------------------------------------
(1)    3/    470A :                     ; SOUND TRACKS SECTION
(1)    4/    470A :                     ; ------------------------------------------------------------
(1)    5/    470A :                     
(1)    6/    470A :                     ; ====================================================================
(1)    7/    470A :                     ; ------------------------------------------------------------
(1)    8/    470A :                     ; Instrument macros
(1)    9/    470A :                     ; ------------------------------------------------------------
(1)   10/    470A :                     
(1)   11/    470A :                     gInsNull macro
(1)   12/    470A :                     	dc.b $00,$00,$00,$00
(1)   13/    470A :                     	dc.b $00,$00,$00,$00
(1)   14/    470A :                     	endm
(1)   15/    470A :                     
(1)   16/    470A :                     ; alv: attack level
(1)   17/    470A :                     ; atk: attack rate
(1)   18/    470A :                     ; slv: sustain
(1)   19/    470A :                     ; dky: decay rate (up)
(1)   20/    470A :                     ; rrt: release rate (down)
(1)   21/    470A :                     ; vib: (TODO)
(1)   22/    470A :                     gInsPsg	macro pitch,alv,atk,slv,dky,rrt,vib
(1)   23/    470A :                     	dc.b $80,pitch,alv,atk
(1)   24/    470A :                     	dc.b slv,dky,rrt,vib
(1)   25/    470A :                     	endm
(1)   26/    470A :                     
(1)   27/    470A :                     ; same args as gInsPsg
(1)   28/    470A :                     ; but this has one more argument for the noise type:
(1)   29/    470A :                     ; mode: noise mode
(1)   30/    470A :                     ;       %tmm
(1)   31/    470A :                     ;        t  - Bass(0)|Noise(1)
(1)   32/    470A :                     ;         mm- Clock(0)|Clock/2(1)|Clock/4(2)|Tone3(3)
(1)   33/    470A :                     ;
(1)   34/    470A :                     gInsPsgN macro pitch,alv,atk,slv,dky,rrt,vib,mode
(1)   35/    470A :                     	dc.b $90|mode,pitch,alv,atk
(1)   36/    470A :                     	dc.b slv,dky,rrt,vib
(1)   37/    470A :                     	endm
(1)   38/    470A :                     
(1)   39/    470A :                     ; 24-bit 68k pointer to FM patch data
(1)   40/    470A :                     gInsFm macro pitch,fmins
(1)   41/    470A :                     	dc.b $A0,pitch,((fmins>>16)&$FF),((fmins>>8)&$FF)
(1)   42/    470A :                     	dc.b fmins&$FF,$00,$00,$00
(1)   43/    470A :                     	endm
(1)   44/    470A :                     
(1)   45/    470A :                     ; Same args as gInsFm but for FM3 special.
(1)   46/    470A :                     ;
(1)   47/    470A :                     ; ** Pitch is useless here, set to 0 **
(1)   48/    470A :                     gInsFm3	macro pitch,fmins
(1)   49/    470A :                     	dc.b $B0,pitch,((fmins>>16)&$FF),((fmins>>8)&$FF)
(1)   50/    470A :                     	dc.b fmins&$FF,$00,$00,$00
(1)   51/    470A :                     	endm
(1)   52/    470A :                     
(1)   53/    470A :                     ; DAC Sample
(1)   54/    470A :                     ;
(1)   55/    470A :                     ; flags: %000L
(1)   56/    470A :                     ;        L - Loop sample No/Yes
(1)   57/    470A :                     gInsDac	macro pitch,start,flags
(1)   58/    470A :                     	dc.b $C0|flags,pitch,((start>>16)&$FF),((start>>8)&$FF)
(1)   59/    470A :                     	dc.b start&$FF,0,0,0
(1)   60/    470A :                     	endm
(1)   61/    470A :                     
(1)   62/    470A :                     ; Sega CD PCM Sample
(1)   63/    470A :                     ;
(1)   64/    470A :                     ; flags: %000L
(1)   65/    470A :                     ;        L - Loop sample No/Yes
(1)   66/    470A :                     gInsPcm	macro pitch,start,flags
(1)   67/    470A :                      if MCD|MARSCD
(1)   68/    470A :                     	dc.b $D0|flags,pitch,((start>>16)&$FF),((start>>8)&$FF)
(1)   69/    470A :                     	dc.b start&$FF,0,0,0
(1)   70/    470A :                      else
(1)   71/    470A :                     	dc.b $00,$00,$00,$00
(1)   72/    470A :                     	dc.b $00,$00,$00,$00
(1)   73/    470A :                      endif
(1)   74/    470A :                     	endm
(1)   75/    470A :                     
(1)   76/    470A :                     ; Sega 32X PWM Sample
(1)   77/    470A :                     ;
(1)   78/    470A :                     ; flags: %00SL
(1)   79/    470A :                     ;        L - Loop sample No/Yes
(1)   80/    470A :                     ;        S - Sample data is in STEREO
(1)   81/    470A :                     gInsPwm	macro pitch,start,flags
(1)   82/    470A :                      if MARS|MARSCD
(1)   83/    470A :                     	dc.b $E0|flags,pitch,((start>>24)&$FF),((start>>16)&$FF)
(1)   84/    470A :                     	dc.b ((start>>8)&$FF),start&$FF,0,0
(1)   85/    470A :                      else
(1)   86/    470A :                     	dc.b $00,$00,$00,$00
(1)   87/    470A :                     	dc.b $00,$00,$00,$00
(1)   88/    470A :                      endif
(1)   89/    470A :                     	endm
(1)   90/    470A :                     
(1)   91/    470A :                     ; ticks - %gttttttt
(1)   92/    470A :                     ;   loc - 68k pointer
(1)   93/    470A :                     ;
(1)   94/    470A :                     ; t-Ticks
(1)   95/    470A :                     ; g-Use global tempo
(1)   96/    470A :                     gemaTrk macro ticks,loc
(1)   97/    470A :                     	dc.l ((ticks&$FF)<<24)|loc&$FFFFFF
(1)   98/    470A :                     	endm
(1)   99/    470A :                     
(1)  100/    470A :                     ; gemaHead
(1)  101/    470A :                     ;
(1)  102/    470A :                     ; blk_data,patt_data,ins_list,num_chnlsused
(1)  103/    470A :                     gemaHead macro blk,pat,ins,num
(1)  104/    470A :                     	dc.w num
(1)  105/    470A :                     	dc.l blk
(1)  106/    470A :                     	dc.l pat
(1)  107/    470A :                     	dc.l ins
(1)  108/    470A :                     	endm
(1)  109/    470A :                     
(1)  110/    470A :                     ; ====================================================================
(1)  111/    470A :                     ; ------------------------------------------------------------
(1)  112/    470A :                     ; Nikona DEFAULT track-list
(1)  113/    470A :                     ;
(1)  114/    470A :                     ; gemaTrk ticks+beatsbit*,track_data
(1)  115/    470A :                     ; Add $80 ($80|ticks) to make the track use global sub-beats
(1)  116/    470A :                     ;
(1)  117/    470A :                     ; To use sub-beats call gemaSetBeats command
(1)  118/    470A :                     ; BEFORE playing your track:
(1)  119/    470A :                     ; 	move.w	#new_beats,d0
(1)  120/    470A :                     ; 	bsr	gemaSetBeats
(1)  121/    470A :                     ; 	move.w	#track_id,d0
(1)  122/    470A :                     ;	bsr	gemaPlayTrack
(1)  123/    470A :                     ; ------------------------------------------------------------
(1)  124/    470A :                     
(1)  125/    470A :                     	align 2
(1)  126/    470A :                     Gema_MasterList:
(1)  127/    470A : (MACRO)              	gemaTrk 12,GemaTrk_TEST_0
(1)  127/    470A : 0C00 4826                   dc.l ((12&$FF)<<24)|GEMATRK_TEST_0&$FFFFFF
(1)  128/    470E : (MACRO)              	gemaTrk 6|$80,GemaTrk_MOVEME
(1)  128/    470E : 8600 7D63                   dc.l ((6|$80&$FF)<<24)|GEMATRK_MOVEME&$FFFFFF
(1)  129/    4712 : (MACRO)              	gemaTrk 6|$80,GemaTrk_NadieMD
(1)  129/    4712 : 8600 B6C2                   dc.l ((6|$80&$FF)<<24)|GEMATRK_NADIEMD&$FFFFFF
(1)  130/    4716 : (MACRO)              	gemaTrk 6|$80,GemaTrk_NadieMCD
(1)  130/    4716 : 8600 C9B0                   dc.l ((6|$80&$FF)<<24)|GEMATRK_NADIEMCD&$FFFFFF
(1)  131/    471A : (MACRO)              	gemaTrk 6|$80,GemaTrk_NadieMARS
(1)  131/    471A : 8600 DC5E                   dc.l ((6|$80&$FF)<<24)|GEMATRK_NADIEMARS&$FFFFFF
(1)  132/    471E : (MACRO)              	gemaTrk 3|$80,GemaTrk_Crystal
(1)  132/    471E : 8300 A488                   dc.l ((3|$80&$FF)<<24)|GEMATRK_CRYSTAL&$FFFFFF
(1)  133/    4722 : (MACRO)              	gemaTrk 7,GemaTrk_Arena1
(1)  133/    4722 : 0700 48A0                   dc.l ((7&$FF)<<24)|GEMATRK_ARENA1&$FFFFFF
(1)  134/    4726 : (MACRO)              	gemaTrk 3,GemaTrk_Dream
(1)  134/    4726 : 0300 8D38                   dc.l ((3&$FF)<<24)|GEMATRK_DREAM&$FFFFFF
(1)  135/    472A :                     
(1)  136/    472A :                     ; ------------------------------------------------------------
(1)  137/    472A :                     ; BGM tracks
(1)  138/    472A :                     ; ------------------------------------------------------------
(1)  139/    472A :                     
(1)  140/    472A :                     GemaSfx_All:
(1)  141/    472A : (MACRO)              	gemaHead .blk,.pat,.ins,1
(1)  141/    472A : 0001                        dc.w 1
(1)  141/    472C : 0000 4738                   dc.l .BLK
(1)  141/    4730 : 0000 473E                   dc.l .PAT
(1)  141/    4734 : 0000 47FE                   dc.l .INS
(1)  142/    4738 :                     .blk:
(1)  143/    4738 :                     	binclude "sound/tracks/sfxall_blk.bin"
(1)  144/    473D :                     	align 2
(1)  145/    473E :                     .pat:
(1)  146/    473E :                     	binclude "sound/tracks/sfxall_patt.bin"
(1)  147/    47FD :                     	align 2
(1)  148/    47FE :                     .ins:
(1)  149/    47FE : (MACRO)              	gInsPsgN 0,$00,$00,$00,$00,$00,0,%100
(1)  149/    47FE : 9400 0000                   dc.b $90|%100,0,$00,$00
(1)  149/    4802 : 0000 0000                   dc.b $00,$00,$00,0
(1)  150/    4806 : (MACRO)              	gInsPsgN 0,$00,$00,$00,$00,$00,0,%101
(1)  150/    4806 : 9500 0000                   dc.b $90|%101,0,$00,$00
(1)  150/    480A : 0000 0000                   dc.b $00,$00,$00,0
(1)  151/    480E : (MACRO)              	gInsPsgN 0,$00,$00,$00,$00,$00,0,%110
(1)  151/    480E : 9600 0000                   dc.b $90|%110,0,$00,$00
(1)  151/    4812 : 0000 0000                   dc.b $00,$00,$00,0
(1)  152/    4816 : (MACRO)              	gInsFm 0,FmIns_Ding_1
(1)  152/    4816 : A000 00F3                   dc.b $A0,0,((FMINS_DING_1>>16)&$FF),((FMINS_DING_1>>8)&$FF)
(1)  152/    481A : AC00 0000                   dc.b FMINS_DING_1&$FF,$00,$00,$00
(1)  153/    481E : (MACRO)              	gInsFm3 0,FmIns_Fm3_Explosion
(1)  153/    481E : B000 00EF                   dc.b $B0,0,((FMINS_FM3_EXPLOSION>>16)&$FF),((FMINS_FM3_EXPLOSION>>8)&$FF)
(1)  153/    4822 : 0C00 0000                   dc.b FMINS_FM3_EXPLOSION&$FF,$00,$00,$00
(1)  154/    4826 :                     
(1)  155/    4826 :                     ; ------------------------------------------------------------
(1)  156/    4826 :                     
(1)  157/    4826 :                     GemaTrk_TEST_0:
(1)  158/    4826 : (MACRO)              	gemaHead .blk,.pat,.ins,3
(1)  158/    4826 : 0003                        dc.w 3
(1)  158/    4828 : 0000 483C                   dc.l .BLK
(1)  158/    482C : 0000 483F                   dc.l .PAT
(1)  158/    4830 : 0000 4834                   dc.l .INS
(1)  159/    4834 :                     .ins:
(1)  160/    4834 :                     ; 	gInsPsgN 0,$00,$00,$00,$00,$00,0,%101
(1)  161/    4834 :                     ; 	gInsFm -36-6,FmIns_Ambient_dark
(1)  162/    4834 : (MACRO)              	gInsPcm -12,PcmIns_MoveMe_BrassL,%11
(1)  162/    4834 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  162/    4838 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  163/    483C :                     ; 	gInsPwm 0,PwmIns_Piano,%00
(1)  164/    483C :                     .blk:
(1)  165/    483C :                     	binclude "sound/tracks/test_blk.bin"
(1)  166/    483F :                     .pat:
(1)  167/    483F :                     	binclude "sound/tracks/test_patt.bin"
(1)  168/    48A0 :                     
(1)  169/    48A0 :                     GemaTrk_Arena1:
(1)  170/    48A0 : (MACRO)              	gemaHead shrd_blk,shrd_pat,.ins,6
(1)  170/    48A0 : 0006                        dc.w 6
(1)  170/    48A2 : 0000 492E                   dc.l SHRD_BLK
(1)  170/    48A6 : 0000 4947                   dc.l SHRD_PAT
(1)  170/    48AA : 0000 48AE                   dc.l .INS
(1)  171/    48AE :                     .ins:
(1)  172/    48AE : (MACRO)              	gInsPcm -17-7,PcmIns_Menu_01,1
(1)  172/    48AE : 0000 0000                   dc.b $00,$00,$00,$00
(1)  172/    48B2 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  173/    48B6 : (MACRO)              	gInsPcm -17-7,PcmIns_Menu_02,1
(1)  173/    48B6 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  173/    48BA : 0000 0000                   dc.b $00,$00,$00,$00
(1)  174/    48BE : (MACRO)              	gInsPcm -17-7,PcmIns_Menu_03,0
(1)  174/    48BE : 0000 0000                   dc.b $00,$00,$00,$00
(1)  174/    48C2 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  175/    48C6 : (MACRO)              	gInsNull
(1)  175/    48C6 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  175/    48CA : 0000 0000                   dc.b $00,$00,$00,$00
(1)  176/    48CE : (MACRO)              	gInsPcm -17-7,PcmIns_Menu_05,1
(1)  176/    48CE : 0000 0000                   dc.b $00,$00,$00,$00
(1)  176/    48D2 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  177/    48D6 : (MACRO)              	gInsPcm -17-7,PcmIns_Menu_06,0
(1)  177/    48D6 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  177/    48DA : 0000 0000                   dc.b $00,$00,$00,$00
(1)  178/    48DE : (MACRO)              	gInsPcm -17-7,PcmIns_Menu_07,0
(1)  178/    48DE : 0000 0000                   dc.b $00,$00,$00,$00
(1)  178/    48E2 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  179/    48E6 : (MACRO)              	gInsPcm -17-7,PcmIns_Menu_08,0
(1)  179/    48E6 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  179/    48EA : 0000 0000                   dc.b $00,$00,$00,$00
(1)  180/    48EE : (MACRO)              	gInsPcm -17-7,PcmIns_Menu_09,0
(1)  180/    48EE : 0000 0000                   dc.b $00,$00,$00,$00
(1)  180/    48F2 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  181/    48F6 : (MACRO)              	gInsNull
(1)  181/    48F6 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  181/    48FA : 0000 0000                   dc.b $00,$00,$00,$00
(1)  182/    48FE : (MACRO)              	gInsPcm -17-7,PcmIns_Menu_11,0
(1)  182/    48FE : 0000 0000                   dc.b $00,$00,$00,$00
(1)  182/    4902 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  183/    4906 : (MACRO)              	gInsPcm -17-7,PcmIns_Menu_12,0
(1)  183/    4906 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  183/    490A : 0000 0000                   dc.b $00,$00,$00,$00
(1)  184/    490E : (MACRO)              	gInsPcm -17-7,PcmIns_Menu_13,0
(1)  184/    490E : 0000 0000                   dc.b $00,$00,$00,$00
(1)  184/    4912 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  185/    4916 : (MACRO)              	gInsPcm -17-7,PcmIns_Menu_14,1
(1)  185/    4916 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  185/    491A : 0000 0000                   dc.b $00,$00,$00,$00
(1)  186/    491E : (MACRO)              	gInsPcm -17-7,PcmIns_Menu_15,0
(1)  186/    491E : 0000 0000                   dc.b $00,$00,$00,$00
(1)  186/    4922 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  187/    4926 : (MACRO)              	gInsPcm -17-7,PcmIns_Menu_16,0
(1)  187/    4926 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  187/    492A : 0000 0000                   dc.b $00,$00,$00,$00
(1)  188/    492E :                     shrd_blk:
(1)  189/    492E :                     	binclude "sound/tracks/menu_blk.bin"
(1)  190/    4947 :                     shrd_pat:
(1)  191/    4947 :                     	binclude "sound/tracks/menu_patt.bin"
(1)  192/    7D63 :                     
(1)  193/    7D63 :                     ; ------------------------------------------------------------
(1)  194/    7D63 :                     
(1)  195/    7D63 :                     GemaTrk_MOVEME:
(1)  196/    7D63 : (MACRO)              	gemaHead .blk,.pat,.ins,13
(1)  196/    7D63 : 000D                        dc.w 13
(1)  196/    7D65 : 0000 7D71                   dc.l .BLK
(1)  196/    7D69 : 0000 7D88                   dc.l .PAT
(1)  196/    7D6D : 0000 8CA0                   dc.l .INS
(1)  197/    7D71 :                     .blk:
(1)  198/    7D71 :                     	binclude "sound/tracks/moveme_blk.bin"
(1)  199/    7D88 :                     	align 2
(1)  200/    7D88 :                     .pat:
(1)  201/    7D88 :                     	binclude "sound/tracks/moveme_patt.bin"
(1)  202/    8CA0 :                     	align 2
(1)  203/    8CA0 :                     .ins:
(1)  204/    8CA0 : (MACRO)              	gInsPcm -12,PcmIns_MoveMe_Hit,%10
(1)  204/    8CA0 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  204/    8CA4 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  205/    8CA8 : (MACRO)              	gInsFm 0,FmIns_Bass_Duck
(1)  205/    8CA8 : A000 00F0                   dc.b $A0,0,((FMINS_BASS_DUCK>>16)&$FF),((FMINS_BASS_DUCK>>8)&$FF)
(1)  205/    8CAC : 8C00 0000                   dc.b FMINS_BASS_DUCK&$FF,$00,$00,$00
(1)  206/    8CB0 : (MACRO)              	gInsPcm -12,PcmIns_MoveMe_BrassL,%11
(1)  206/    8CB0 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  206/    8CB4 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  207/    8CB8 : (MACRO)              	gInsFm 0,FmIns_ClosedHat
(1)  207/    8CB8 : A000 00F4                   dc.b $A0,0,((FMINS_CLOSEDHAT>>16)&$FF),((FMINS_CLOSEDHAT>>8)&$FF)
(1)  207/    8CBC : 6C00 0000                   dc.b FMINS_CLOSEDHAT&$FF,$00,$00,$00
(1)  208/    8CC0 : (MACRO)              	gInsPsgN 0,$00,$00,$00,$00,$04,0,%110
(1)  208/    8CC0 : 9600 0000                   dc.b $90|%110,0,$00,$00
(1)  208/    8CC4 : 0000 0400                   dc.b $00,$00,$04,0
(1)  209/    8CC8 : (MACRO)              	gInsFm -12,FmIns_HBeat_tom
(1)  209/    8CC8 : A0F4 00F3                   dc.b $A0,-12,((FMINS_HBEAT_TOM>>16)&$FF),((FMINS_HBEAT_TOM>>8)&$FF)
(1)  209/    8CCC : EC00 0000                   dc.b FMINS_HBEAT_TOM&$FF,$00,$00,$00
(1)  210/    8CD0 : (MACRO)              	gInsPcm -12,PcmIns_Snare,%10
(1)  210/    8CD0 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  210/    8CD4 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  211/    8CD8 : (MACRO)              	gInsPcm -12,PcmIns_Kick,%10		;gInsFm -38,FmIns_DrumKick_gem
(1)  211/    8CD8 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  211/    8CDC : 0000 0000                   dc.b $00,$00,$00,$00
(1)  212/    8CE0 : (MACRO)              	gInsFm -12,FmIns_Trumpet_carnival	;FmIns_Trumpet_2
(1)  212/    8CE0 : A0F4 00F2                   dc.b $A0,-12,((FMINS_TRUMPET_CARNIVAL>>16)&$FF),((FMINS_TRUMPET_CARNIVAL>>8)&$FF)
(1)  212/    8CE4 : 0C00 0000                   dc.b FMINS_TRUMPET_CARNIVAL&$FF,$00,$00,$00
(1)  213/    8CE8 : (MACRO)              	gInsPsg 0,$20,$20,$10,$01,$08,0		;gInsFm -12,FmIns_Ding_Baseball;
(1)  213/    8CE8 : 8000 2020                   dc.b $80,0,$20,$20
(1)  213/    8CEC : 1001 0800                   dc.b $10,$01,$08,0
(1)  214/    8CF0 : (MACRO)              	gInsFm3 0,FmIns_Sp_OpenHat
(1)  214/    8CF0 : B000 00EF                   dc.b $B0,0,((FMINS_SP_OPENHAT>>16)&$FF),((FMINS_SP_OPENHAT>>8)&$FF)
(1)  214/    8CF4 : 3400 0000                   dc.b FMINS_SP_OPENHAT&$FF,$00,$00,$00
(1)  215/    8CF8 : (MACRO)              	gInsNull;gInsPwm -17,PwmIns_MyTime,%10
(1)  215/    8CF8 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  215/    8CFC : 0000 0000                   dc.b $00,$00,$00,$00
(1)  216/    8D00 : (MACRO)              	gInsPsg +12,$20,$10,$10,$0C,$0C,0
(1)  216/    8D00 : 800C 2010                   dc.b $80,+12,$20,$10
(1)  216/    8D04 : 100C 0C00                   dc.b $10,$0C,$0C,0
(1)  217/    8D08 : (MACRO)              	gInsPsg 0,$00,$00,$00,$00,$06,0
(1)  217/    8D08 : 8000 0000                   dc.b $80,0,$00,$00
(1)  217/    8D0C : 0000 0600                   dc.b $00,$00,$06,0
(1)  218/    8D10 : (MACRO)              	gInsPcm -12,PcmIns_MoveMe_BrassR,%11
(1)  218/    8D10 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  218/    8D14 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  219/    8D18 : (MACRO)              	gInsNull
(1)  219/    8D18 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  219/    8D1C : 0000 0000                   dc.b $00,$00,$00,$00
(1)  220/    8D20 : (MACRO)              	gInsNull
(1)  220/    8D20 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  220/    8D24 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  221/    8D28 : (MACRO)              	gInsNull
(1)  221/    8D28 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  221/    8D2C : 0000 0000                   dc.b $00,$00,$00,$00
(1)  222/    8D30 : (MACRO)              	gInsNull
(1)  222/    8D30 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  222/    8D34 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  223/    8D38 :                     
(1)  224/    8D38 :                     ; ------------------------------------------------------------
(1)  225/    8D38 :                     
(1)  226/    8D38 :                     GemaTrk_Dream:
(1)  227/    8D38 : (MACRO)              	gemaHead .blk,.pat,.ins,8
(1)  227/    8D38 : 0008                        dc.w 8
(1)  227/    8D3A : 0000 8D46                   dc.l .BLK
(1)  227/    8D3E : 0000 8D53                   dc.l .PAT
(1)  227/    8D42 : 0000 A410                   dc.l .INS
(1)  228/    8D46 :                     .blk:
(1)  229/    8D46 :                     	binclude "sound/tracks/dream_blk.bin"
(1)  230/    8D53 :                     .pat:
(1)  231/    8D53 :                     	binclude "sound/tracks/dream_patt.bin"
(1)  232/    A410 :                     .ins:
(1)  233/    A410 : (MACRO)              	gInsFm 0,FmIns_Hats_closed
(1)  233/    A410 : A000 00F4                   dc.b $A0,0,((FMINS_HATS_CLOSED>>16)&$FF),((FMINS_HATS_CLOSED>>8)&$FF)
(1)  233/    A414 : 4C00 0000                   dc.b FMINS_HATS_CLOSED&$FF,$00,$00,$00
(1)  234/    A418 : (MACRO)              	gInsDac +12,DacIns_Kick_wegot,0
(1)  234/    A418 : C00C 0207                   dc.b $C0|0,+12,((DACINS_KICK_WEGOT>>16)&$FF),((DACINS_KICK_WEGOT>>8)&$FF)
(1)  234/    A41C : 5400 0000                   dc.b DACINS_KICK_WEGOT&$FF,0,0,0
(1)  235/    A420 : (MACRO)              	gInsFm -12,FmIns_brass_eur
(1)  235/    A420 : A0F4 00F2                   dc.b $A0,-12,((FMINS_BRASS_EUR>>16)&$FF),((FMINS_BRASS_EUR>>8)&$FF)
(1)  235/    A424 : 2C00 0000                   dc.b FMINS_BRASS_EUR&$FF,$00,$00,$00
(1)  236/    A428 : (MACRO)              	gInsFm -24,FmIns_Trumpet_carnival
(1)  236/    A428 : A0E8 00F2                   dc.b $A0,-24,((FMINS_TRUMPET_CARNIVAL>>16)&$FF),((FMINS_TRUMPET_CARNIVAL>>8)&$FF)
(1)  236/    A42C : 0C00 0000                   dc.b FMINS_TRUMPET_CARNIVAL&$FF,$00,$00,$00
(1)  237/    A430 : (MACRO)              	gInsPsg  0,$00,$20,$00,$02,$10,0
(1)  237/    A430 : 8000 0020                   dc.b $80,0,$00,$20
(1)  237/    A434 : 0002 1000                   dc.b $00,$02,$10,0
(1)  238/    A438 : (MACRO)              	gInsPsgN 0,$00,$10,$00,$01,$04,0,%100
(1)  238/    A438 : 9400 0010                   dc.b $90|%100,0,$00,$10
(1)  238/    A43C : 0001 0400                   dc.b $00,$01,$04,0
(1)  239/    A440 : (MACRO)              	gInsFm 0,FmIns_Bass_low_1
(1)  239/    A440 : A000 00F1                   dc.b $A0,0,((FMINS_BASS_LOW_1>>16)&$FF),((FMINS_BASS_LOW_1>>8)&$FF)
(1)  239/    A444 : 2C00 0000                   dc.b FMINS_BASS_LOW_1&$FF,$00,$00,$00
(1)  240/    A448 : (MACRO)              	gInsFm 0,FmIns_Hats_1
(1)  240/    A448 : A000 00F4                   dc.b $A0,0,((FMINS_HATS_1>>16)&$FF),((FMINS_HATS_1>>8)&$FF)
(1)  240/    A44C : 2C00 0000                   dc.b FMINS_HATS_1&$FF,$00,$00,$00
(1)  241/    A450 : (MACRO)              	gInsPsgN 0,$00,$10,$00,$01,$08,0,%101
(1)  241/    A450 : 9500 0010                   dc.b $90|%101,0,$00,$10
(1)  241/    A454 : 0001 0800                   dc.b $00,$01,$08,0
(1)  242/    A458 : (MACRO)              	gInsNull
(1)  242/    A458 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  242/    A45C : 0000 0000                   dc.b $00,$00,$00,$00
(1)  243/    A460 : (MACRO)              	gInsNull
(1)  243/    A460 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  243/    A464 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  244/    A468 : (MACRO)              	gInsNull
(1)  244/    A468 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  244/    A46C : 0000 0000                   dc.b $00,$00,$00,$00
(1)  245/    A470 : (MACRO)              	gInsNull
(1)  245/    A470 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  245/    A474 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  246/    A478 : (MACRO)              	gInsPsg  0,$40,$00,$00,$00,$00,0
(1)  246/    A478 : 8000 4000                   dc.b $80,0,$40,$00
(1)  246/    A47C : 0000 0000                   dc.b $00,$00,$00,0
(1)  247/    A480 : (MACRO)              	gInsFm -12,FmIns_Trumpet_1
(1)  247/    A480 : A0F4 00F1                   dc.b $A0,-12,((FMINS_TRUMPET_1>>16)&$FF),((FMINS_TRUMPET_1>>8)&$FF)
(1)  247/    A484 : EC00 0000                   dc.b FMINS_TRUMPET_1&$FF,$00,$00,$00
(1)  248/    A488 :                     
(1)  249/    A488 :                     ; Ticks: 3-1
(1)  250/    A488 :                     ; TEMPO: 170
(1)  251/    A488 :                     GemaTrk_Crystal:
(1)  252/    A488 : (MACRO)              	gemaHead .blk,.pat,.ins,7
(1)  252/    A488 : 0007                        dc.w 7
(1)  252/    A48A : 0000 A496                   dc.l .BLK
(1)  252/    A48E : 0000 A49E                   dc.l .PAT
(1)  252/    A492 : 0000 B692                   dc.l .INS
(1)  253/    A496 :                     .blk:
(1)  254/    A496 :                     	binclude "sound/tracks/crystal_blk.bin"
(1)  255/    A49E :                     .pat:
(1)  256/    A49E :                     	binclude "sound/tracks/crystal_patt.bin"
(1)  257/    B692 :                     .ins:
(1)  258/    B692 : (MACRO)              	gInsFm 0,FmIns_Organ2a
(1)  258/    B692 : A000 00EE                   dc.b $A0,0,((FMINS_ORGAN2A>>16)&$FF),((FMINS_ORGAN2A>>8)&$FF)
(1)  258/    B696 : EC00 0000                   dc.b FMINS_ORGAN2A&$FF,$00,$00,$00
(1)  259/    B69A : (MACRO)              	gInsPsgN 0,$00,$10,$00,$01,$10,0,%100
(1)  259/    B69A : 9400 0010                   dc.b $90|%100,0,$00,$10
(1)  259/    B69E : 0001 1000                   dc.b $00,$01,$10,0
(1)  260/    B6A2 : (MACRO)              	gInsDac 0,DacIns_Kick_wegot,0
(1)  260/    B6A2 : C000 0207                   dc.b $C0|0,0,((DACINS_KICK_WEGOT>>16)&$FF),((DACINS_KICK_WEGOT>>8)&$FF)
(1)  260/    B6A6 : 5400 0000                   dc.b DACINS_KICK_WEGOT&$FF,0,0,0
(1)  261/    B6AA : (MACRO)              	gInsFm3 0,FmIns_Sp_OpenHat
(1)  261/    B6AA : B000 00EF                   dc.b $B0,0,((FMINS_SP_OPENHAT>>16)&$FF),((FMINS_SP_OPENHAT>>8)&$FF)
(1)  261/    B6AE : 3400 0000                   dc.b FMINS_SP_OPENHAT&$FF,$00,$00,$00
(1)  262/    B6B2 : (MACRO)              	gInsNull
(1)  262/    B6B2 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  262/    B6B6 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  263/    B6BA : (MACRO)              	gInsFm 0,FmIns_Bass_low_1
(1)  263/    B6BA : A000 00F1                   dc.b $A0,0,((FMINS_BASS_LOW_1>>16)&$FF),((FMINS_BASS_LOW_1>>8)&$FF)
(1)  263/    B6BE : 2C00 0000                   dc.b FMINS_BASS_LOW_1&$FF,$00,$00,$00
(1)  264/    B6C2 :                     
(1)  265/    B6C2 :                     ; ------------------------------------------------------------
(1)  266/    B6C2 :                     
(1)  267/    B6C2 :                     GemaTrk_NadieMD:
(1)  268/    B6C2 : (MACRO)              	gemaHead .blk,.patt,.inst,7
(1)  268/    B6C2 : 0007                        dc.w 7
(1)  268/    B6C4 : 0000 B6D0                   dc.l .BLK
(1)  268/    B6C8 : 0000 B6D8                   dc.l .PATT
(1)  268/    B6CC : 0000 C968                   dc.l .INST
(1)  269/    B6D0 :                     .blk:
(1)  270/    B6D0 :                     	binclude "sound/tracks/nadie_md_blk.bin"
(1)  271/    B6D7 :                     	align 2
(1)  272/    B6D8 :                     .patt:
(1)  273/    B6D8 :                     	binclude "sound/tracks/nadie_md_patt.bin"
(1)  274/    C968 :                     	align 2
(1)  275/    C968 :                     .inst:
(1)  276/    C968 : (MACRO)              	gInsDac 0,DacIns_Nadie,0
(1)  276/    C968 : C000 0100                   dc.b $C0|0,0,((DACINS_NADIE>>16)&$FF),((DACINS_NADIE>>8)&$FF)
(1)  276/    C96C : 0000 0000                   dc.b DACINS_NADIE&$FF,0,0,0
(1)  277/    C970 : (MACRO)              	gInsFm -36,FmIns_Piano_Aqua
(1)  277/    C970 : A0DC 00F1                   dc.b $A0,-36,((FMINS_PIANO_AQUA>>16)&$FF),((FMINS_PIANO_AQUA>>8)&$FF)
(1)  277/    C974 : 8C00 0000                   dc.b FMINS_PIANO_AQUA&$FF,$00,$00,$00
(1)  278/    C978 : (MACRO)              	gInsFm -12,FmIns_HBeat_tom
(1)  278/    C978 : A0F4 00F3                   dc.b $A0,-12,((FMINS_HBEAT_TOM>>16)&$FF),((FMINS_HBEAT_TOM>>8)&$FF)
(1)  278/    C97C : EC00 0000                   dc.b FMINS_HBEAT_TOM&$FF,$00,$00,$00
(1)  279/    C980 : (MACRO)              	gInsFm -37,FmIns_DrumKick_gem
(1)  279/    C980 : A0DB 00F2                   dc.b $A0,-37,((FMINS_DRUMKICK_GEM>>16)&$FF),((FMINS_DRUMKICK_GEM>>8)&$FF)
(1)  279/    C984 : AC00 0000                   dc.b FMINS_DRUMKICK_GEM&$FF,$00,$00,$00
(1)  280/    C988 : (MACRO)              	gInsPsg 0,$50,$70,$00,$06,$08,0
(1)  280/    C988 : 8000 5070                   dc.b $80,0,$50,$70
(1)  280/    C98C : 0006 0800                   dc.b $00,$06,$08,0
(1)  281/    C990 : (MACRO)              	gInsFm 0,FmIns_Trumpet_1
(1)  281/    C990 : A000 00F1                   dc.b $A0,0,((FMINS_TRUMPET_1>>16)&$FF),((FMINS_TRUMPET_1>>8)&$FF)
(1)  281/    C994 : EC00 0000                   dc.b FMINS_TRUMPET_1&$FF,$00,$00,$00
(1)  282/    C998 : (MACRO)              	gInsNull
(1)  282/    C998 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  282/    C99C : 0000 0000                   dc.b $00,$00,$00,$00
(1)  283/    C9A0 : (MACRO)              	gInsFm3 0,FmIns_Sp_ClosedHat
(1)  283/    C9A0 : B000 00EF                   dc.b $B0,0,((FMINS_SP_CLOSEDHAT>>16)&$FF),((FMINS_SP_CLOSEDHAT>>8)&$FF)
(1)  283/    C9A4 : 5C00 0000                   dc.b FMINS_SP_CLOSEDHAT&$FF,$00,$00,$00
(1)  284/    C9A8 : (MACRO)              	gInsFm3 0,FmIns_Sp_OpenHat
(1)  284/    C9A8 : B000 00EF                   dc.b $B0,0,((FMINS_SP_OPENHAT>>16)&$FF),((FMINS_SP_OPENHAT>>8)&$FF)
(1)  284/    C9AC : 3400 0000                   dc.b FMINS_SP_OPENHAT&$FF,$00,$00,$00
(1)  285/    C9B0 :                     
(1)  286/    C9B0 :                     GemaTrk_NadieMCD:
(1)  287/    C9B0 : (MACRO)              	gemaHead .blk,.patt,.inst,11
(1)  287/    C9B0 : 000B                        dc.w 11
(1)  287/    C9B2 : 0000 C9BE                   dc.l .BLK
(1)  287/    C9B6 : 0000 C9C6                   dc.l .PATT
(1)  287/    C9BA : 0000 DC16                   dc.l .INST
(1)  288/    C9BE :                     .blk:
(1)  289/    C9BE :                     	binclude "sound/tracks/nadie_mcd_blk.bin"
(1)  290/    C9C5 :                     	align 2
(1)  291/    C9C6 :                     .patt
(1)  292/    C9C6 :                     	binclude "sound/tracks/nadie_mcd_patt.bin"
(1)  293/    DC16 :                     	align 2
(1)  294/    DC16 :                     .inst:
(1)  295/    DC16 : (MACRO)              	gInsPcm -12,PcmIns_NadieL,%10
(1)  295/    DC16 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  295/    DC1A : 0000 0000                   dc.b $00,$00,$00,$00
(1)  296/    DC1E : (MACRO)              	gInsFm -36,FmIns_Piano_Aqua
(1)  296/    DC1E : A0DC 00F1                   dc.b $A0,-36,((FMINS_PIANO_AQUA>>16)&$FF),((FMINS_PIANO_AQUA>>8)&$FF)
(1)  296/    DC22 : 8C00 0000                   dc.b FMINS_PIANO_AQUA&$FF,$00,$00,$00
(1)  297/    DC26 : (MACRO)              	gInsFm -12,FmIns_HBeat_tom
(1)  297/    DC26 : A0F4 00F3                   dc.b $A0,-12,((FMINS_HBEAT_TOM>>16)&$FF),((FMINS_HBEAT_TOM>>8)&$FF)
(1)  297/    DC2A : EC00 0000                   dc.b FMINS_HBEAT_TOM&$FF,$00,$00,$00
(1)  298/    DC2E : (MACRO)              	gInsPcm -12-12,PcmIns_PKick,%00
(1)  298/    DC2E : 0000 0000                   dc.b $00,$00,$00,$00
(1)  298/    DC32 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  299/    DC36 : (MACRO)              	gInsPsg 0,$50,$70,$00,$06,$08,0
(1)  299/    DC36 : 8000 5070                   dc.b $80,0,$50,$70
(1)  299/    DC3A : 0006 0800                   dc.b $00,$06,$08,0
(1)  300/    DC3E : (MACRO)              	gInsFm 0,FmIns_Trumpet_1
(1)  300/    DC3E : A000 00F1                   dc.b $A0,0,((FMINS_TRUMPET_1>>16)&$FF),((FMINS_TRUMPET_1>>8)&$FF)
(1)  300/    DC42 : EC00 0000                   dc.b FMINS_TRUMPET_1&$FF,$00,$00,$00
(1)  301/    DC46 : (MACRO)              	gInsPcm 0-12,PcmIns_Piano,%00
(1)  301/    DC46 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  301/    DC4A : 0000 0000                   dc.b $00,$00,$00,$00
(1)  302/    DC4E : (MACRO)              	gInsPcm -12-12,PcmIns_PTom,%00
(1)  302/    DC4E : 0000 0000                   dc.b $00,$00,$00,$00
(1)  302/    DC52 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  303/    DC56 : (MACRO)              	gInsPcm -12,PcmIns_NadieR,%10
(1)  303/    DC56 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  303/    DC5A : 0000 0000                   dc.b $00,$00,$00,$00
(1)  304/    DC5E :                     
(1)  305/    DC5E :                     GemaTrk_NadieMARS:
(1)  306/    DC5E : (MACRO)              	gemaHead .blk,.patt,.inst,11
(1)  306/    DC5E : 000B                        dc.w 11
(1)  306/    DC60 : 0000 DC6C                   dc.l .BLK
(1)  306/    DC64 : 0000 DC74                   dc.l .PATT
(1)  306/    DC68 : 0000 EE84                   dc.l .INST
(1)  307/    DC6C :                     .blk:
(1)  308/    DC6C :                     	binclude "sound/tracks/nadie_blk.bin"
(1)  309/    DC73 :                     	align 2
(1)  310/    DC74 :                     .patt
(1)  311/    DC74 :                     	binclude "sound/tracks/nadie_patt.bin"
(1)  312/    EE84 :                     	align 2
(1)  313/    EE84 :                     .inst:
(1)  314/    EE84 : (MACRO)              	gInsPwm 0,PwmIns_Nadie,%10
(1)  314/    EE84 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  314/    EE88 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  315/    EE8C : (MACRO)              	gInsFm -36,FmIns_Piano_Aqua
(1)  315/    EE8C : A0DC 00F1                   dc.b $A0,-36,((FMINS_PIANO_AQUA>>16)&$FF),((FMINS_PIANO_AQUA>>8)&$FF)
(1)  315/    EE90 : 8C00 0000                   dc.b FMINS_PIANO_AQUA&$FF,$00,$00,$00
(1)  316/    EE94 : (MACRO)              	gInsFm -12,FmIns_HBeat_tom
(1)  316/    EE94 : A0F4 00F3                   dc.b $A0,-12,((FMINS_HBEAT_TOM>>16)&$FF),((FMINS_HBEAT_TOM>>8)&$FF)
(1)  316/    EE98 : EC00 0000                   dc.b FMINS_HBEAT_TOM&$FF,$00,$00,$00
(1)  317/    EE9C : (MACRO)              	gInsPwm -12,PwmIns_PKick,%00
(1)  317/    EE9C : 0000 0000                   dc.b $00,$00,$00,$00
(1)  317/    EEA0 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  318/    EEA4 : (MACRO)              	gInsPsg 0,$50,$70,$00,$06,$08,0
(1)  318/    EEA4 : 8000 5070                   dc.b $80,0,$50,$70
(1)  318/    EEA8 : 0006 0800                   dc.b $00,$06,$08,0
(1)  319/    EEAC : (MACRO)              	gInsFm 0,FmIns_Trumpet_1
(1)  319/    EEAC : A000 00F1                   dc.b $A0,0,((FMINS_TRUMPET_1>>16)&$FF),((FMINS_TRUMPET_1>>8)&$FF)
(1)  319/    EEB0 : EC00 0000                   dc.b FMINS_TRUMPET_1&$FF,$00,$00,$00
(1)  320/    EEB4 : (MACRO)              	gInsPwm 0,PwmIns_Piano,%00
(1)  320/    EEB4 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  320/    EEB8 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  321/    EEBC : (MACRO)              	gInsPwm -12,PwmIns_PTom,%00
(1)  321/    EEBC : 0000 0000                   dc.b $00,$00,$00,$00
(1)  321/    EEC0 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  322/    EEC4 : (MACRO)              	gInsNull
(1)  322/    EEC4 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  322/    EEC8 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  323/    EECC :                     
     423/    EECC :                     		include "sound/instr.asm"		; GEMA: FM instruments
(1)    1/    EECC :                     ; ===========================================================================
(1)    2/    EECC :                     ; --------------------------------------------------------
(1)    3/    EECC :                     ; GEMA/Nikona FM instruments "patches"
(1)    4/    EECC :                     ;
(1)    5/    EECC :                     ; Using .gsx save state for easy editing, use
(1)    6/    EECC :                     ; FM_EDITOR.bin in Fusion or any gsx compatible emulator
(1)    7/    EECC :                     ; to make or modify instrument data
(1)    8/    EECC :                     ; --------------------------------------------------------
(1)    9/    EECC :                     
(1)   10/    EECC :                     ; FM_EDITOR savestate data is located at:
(1)   11/    EECC :                     ; $2478
(1)   12/    EECC :                     ;
(1)   13/    EECC :                     ; Sizes:
(1)   14/    EECC :                     ; Normal FM ins: $20
(1)   15/    EECC :                     ; Special FM ins: $28
(1)   16/    EECC :                     ;
(1)   17/    EECC :                     ; INTRUMENT FORMAT:
(1)   18/    EECC :                     ; dc.b $30,$34,$38,$3C	; Register data following this order
(1)   19/    EECC :                     ; dc.b $40,$44,$48,$4C	; **
(1)   20/    EECC :                     ; dc.b $50,$54,$58,$5C	; **
(1)   21/    EECC :                     ; dc.b $60,$64,$68,$6C	; **
(1)   22/    EECC :                     ; dc.b $70,$74,$78,$7C	; **
(1)   23/    EECC :                     ; dc.b $80,$84,$88,$8C	; **
(1)   24/    EECC :                     ; dc.b $90,$94,$98,$9C	; **
(1)   25/    EECC :                     ; dc.b $B0,$B4,$22,$28	; **
(1)   26/    EECC :                     ; ** Extra words for FM3 special:
(1)   27/    EECC :                     ; dc.w OP1,OP2,OP3,OP4	; FM3 special ONLY: Manual frequencies
(1)   28/    EECC :                     ;
(1)   29/    EECC :                     ; $90,$94,$98,$9C: SSG-EG
(1)   30/    EECC :                     ; This CAN be used, but can be problematic on clone systems.
(1)   31/    EECC :                     ;
(1)   32/    EECC :                     ; $B4 PAN, PMS, AMS: %00aa0ppp
(1)   33/    EECC :                     ; Keep panning bits 0, set the panning in your track.
(1)   34/    EECC :                     ;
(1)   35/    EECC :                     ; $22 LFO: %0000evvv
(1)   36/    EECC :                     ; e - Enable
(1)   37/    EECC :                     ; v - Value
(1)   38/    EECC :                     ; $28 KEYS: %oooo0000
(1)   39/    EECC :                     ; o - Operators 4-1
(1)   40/    EECC :                     ; --------------------------------------------------------
(1)   41/    EECC :                     
(1)   42/    EECC :                     ; TODO: a macro for this.
(1)   43/    EECC :                     
(1)   44/    EECC :                     FmIns_Organ2:
(1)   45/    EECC :                     		binclude "sound/instr/fm/organ2.gsx",$2478,$20
(1)   46/    EEEC :                     FmIns_Organ2a:
(1)   47/    EEEC :                     		binclude "sound/instr/fm/organ2a.gsx",$2478,$20
(1)   48/    EF0C :                     
(1)   49/    EF0C :                     ; FM3 Special
(1)   50/    EF0C :                     FmIns_Fm3_Explosion:
(1)   51/    EF0C :                     		binclude "sound/instr/fm/OLD/fm3_sfx_boomworm.gsx",$2478,$28
(1)   52/    EF34 :                     FmIns_Sp_OpenHat:
(1)   53/    EF34 :                     		binclude "sound/instr/fm/OLD/fm3_openhat.gsx",$2478,$28
(1)   54/    EF5C :                     FmIns_Sp_ClosedHat:
(1)   55/    EF5C :                     		binclude "sound/instr/fm/OLD/fm3_closedhat.gsx",$2478,$28
(1)   56/    EF84 :                     FmIns_Sp_Cowbell:
(1)   57/    EF84 :                     		binclude "sound/instr/fm/OLD/fm3_cowbell.gsx",$2478,$28
(1)   58/    EFAC :                     ; BASS
(1)   59/    EFAC :                     FmIns_Bass_1:
(1)   60/    EFAC :                     		binclude "sound/instr/fm/OLD/bass_low.gsx",$2478,$20
(1)   61/    EFCC :                     FmIns_Bass_2:
(1)   62/    EFCC :                     		binclude "sound/instr/fm/OLD/bass_strong.gsx",$2478,$20
(1)   63/    EFEC :                     FmIns_Bass_donna:
(1)   64/    EFEC :                     		binclude "sound/instr/fm/OLD/bass_feellove.gsx",$2478,$20
(1)   65/    F00C :                     FmIns_Bass_groove:
(1)   66/    F00C :                     		binclude "sound/instr/fm/OLD/bass_groove.gsx",$2478,$20
(1)   67/    F02C :                     FmIns_Bass_groove_2:
(1)   68/    F02C :                     		binclude "sound/instr/fm/OLD/bass_groove_2.gsx",$2478,$20
(1)   69/    F04C :                     FmIns_Bass_groove_gem:
(1)   70/    F04C :                     		binclude "sound/instr/fm/OLD/bass_groove_gem.gsx",$2478,$20
(1)   71/    F06C :                     FmIns_Bass_italo:
(1)   72/    F06C :                     		binclude "sound/instr/fm/OLD/bass_italo.gsx",$2478,$20
(1)   73/    F08C :                     FmIns_Bass_duck:
(1)   74/    F08C :                     		binclude "sound/instr/fm/OLD/bass_duck.gsx",$2478,$20
(1)   75/    F0AC :                     FmIns_Bass_4:
(1)   76/    F0AC :                     		binclude "sound/instr/fm/OLD/bass_4.gsx",$2478,$20
(1)   77/    F0CC :                     FmIns_Bass_8:
(1)   78/    F0CC :                     		binclude "sound/instr/fm/OLD/bass_8.gsx",$2478,$20
(1)   79/    F0EC :                     FmIns_Bass_club:
(1)   80/    F0EC :                     		binclude "sound/instr/fm/OLD/OLD_bass_club.gsx",$2478,$20
(1)   81/    F10C :                     FmIns_Bass_calm:
(1)   82/    F10C :                     		binclude "sound/instr/fm/OLD/bass_calm.gsx",$2478,$20
(1)   83/    F12C :                     FmIns_Bass_low_1:
(1)   84/    F12C :                     		binclude "sound/instr/fm/OLD/bass_low_1.bin"
(1)   85/    F14C :                     FmIns_Bass_Oil:
(1)   86/    F14C :                     		binclude "sound/instr/fm/OLD/bass_oil.gsx",$2478,$20
(1)   87/    F16C :                     
(1)   88/    F16C :                     ; PIANO
(1)   89/    F16C :                     FmIns_PianoM1:
(1)   90/    F16C :                     		binclude "sound/instr/fm/OLD/piano_m1.gsx",$2478,$20
(1)   91/    F18C :                     FmIns_Piano_Aqua:
(1)   92/    F18C :                     		binclude "sound/instr/fm/OLD/piano_aqua.gsx",$2478,$20
(1)   93/    F1AC :                     FmIns_Piano_Hard:
(1)   94/    F1AC :                     		binclude "sound/instr/fm/OLD/piano_hard.bin"
(1)   95/    F1CC :                     ; FmIns_Piano_m1:
(1)   96/    F1CC :                     ; 		binclude "sound/instr/fm/OLD/piano_m1.gsx",$2478,$20
(1)   97/    F1CC :                     
(1)   98/    F1CC :                     
(1)   99/    F1CC :                     FmIns_Synth_Plus:
(1)  100/    F1CC :                     		binclude "sound/instr/fm/OLD/OLD_synthplus.gsx",$2478,$20
(1)  101/    F1EC :                     
(1)  102/    F1EC :                     FmIns_Trumpet_1:
(1)  103/    F1EC :                     		binclude "sound/instr/fm/OLD/OLD_trumpet_1.gsx",$2478,$20
(1)  104/    F20C :                     FmIns_Trumpet_carnival:
(1)  105/    F20C :                     		binclude "sound/instr/fm/OLD/OLD_trumpet_carnivl.gsx",$2478,$20
(1)  106/    F22C :                     
(1)  107/    F22C :                     
(1)  108/    F22C :                     FmIns_brass_eur:
(1)  109/    F22C :                     		binclude "sound/instr/fm/OLD/OLD_brass_eur.gsx",$2478,$20
(1)  110/    F24C :                     FmIns_Brass_Puy:
(1)  111/    F24C :                     		binclude "sound/instr/fm/OLD/brass_puy.gsx",$2478,$20
(1)  112/    F26C :                     
(1)  113/    F26C :                     
(1)  114/    F26C :                     FmIns_Organ_Ito:
(1)  115/    F26C :                     		binclude "sound/instr/fm/OLD/organ_ito.gsx",$2478,$20
(1)  116/    F28C :                     FmIns_Ding_Baseball:
(1)  117/    F28C :                     		binclude "sound/instr/fm/OLD/ding_baseball.gsx",$2478,$20
(1)  118/    F2AC :                     FmIns_DrumKick_gem:
(1)  119/    F2AC :                     		binclude "sound/instr/fm/OLD/drum_kick_gem.gsx",$2478,$20
(1)  120/    F2CC :                     
(1)  121/    F2CC :                     
(1)  122/    F2CC :                     FmIns_Trumpet_2:
(1)  123/    F2CC :                     		binclude "sound/instr/fm/OLD/trumpet_2.gsx",$2478,$20
(1)  124/    F2EC :                     FmIns_Trumpet_puy:
(1)  125/    F2EC :                     		binclude "sound/instr/fm/OLD/trumpet_puy.gsx",$2478,$20
(1)  126/    F30C :                     FmIns_Marimba:
(1)  127/    F30C :                     		binclude "sound/instr/fm/OLD/marimba.gsx",$2478,$20
(1)  128/    F32C :                     
(1)  129/    F32C :                     FmIns_Ding_toy:
(1)  130/    F32C :                     		binclude "sound/instr/fm/OLD/ding_toy.gsx",$2478,$20
(1)  131/    F34C :                     
(1)  132/    F34C :                     FmIns_Flaute_cave:
(1)  133/    F34C :                     		binclude "sound/instr/fm/OLD/flaute_sea.gsx",$2478,$20
(1)  134/    F36C :                     FmIns_Banjo_puy:
(1)  135/    F36C :                     		binclude "sound/instr/fm/OLD/banjo_puy.gsx",$2478,$20
(1)  136/    F38C :                     FmIns_PSynth_plus:
(1)  137/    F38C :                     		binclude "sound/instr/fm/OLD/psynth_plus.gsx",$2478,$20
(1)  138/    F3AC :                     FmIns_Ding_1:
(1)  139/    F3AC :                     		binclude "sound/instr/fm/OLD/ding_gem.gsx",$2478,$20
(1)  140/    F3CC :                     FmIns_Trombone_gem:
(1)  141/    F3CC :                     		binclude "sound/instr/fm/OLD/trombone_gem.gsx",$2478,$20
(1)  142/    F3EC :                     FmIns_HBeat_tom:
(1)  143/    F3EC :                     		binclude "sound/instr/fm/OLD/nadia_tom.gsx",$2478,$20
(1)  144/    F40C :                     FmIns_Guitar_bball:
(1)  145/    F40C :                     		binclude "sound/instr/fm/OLD/guitar_bball.gsx",$2478,$20
(1)  146/    F42C :                     
(1)  147/    F42C :                     FmIns_Hats_1:
(1)  148/    F42C :                     		binclude "sound/instr/fm/OLD/fm_hats_spot.bin"
(1)  149/    F44C :                     FmIns_Hats_closed:
(1)  150/    F44C :                     		binclude "sound/instr/fm/OLD/hats_closed.gsx",$2478,$20
(1)  151/    F46C :                     FmIns_ClosedHat:
(1)  152/    F46C :                     		binclude "sound/instr/fm/OLD/hats_closed.gsx",$2478,$20
(1)  153/    F48C :                     
(1)  154/    F48C :                     FmIns_Sewer_1:
(1)  155/    F48C :                     		binclude "sound/instr/fm/OLD/sewer_1.bin"
(1)  156/    F4AC :                     
(1)  157/    F4AC :                     
(1)  158/    F4AC :                     FmIns_Ambient_dark:
(1)  159/    F4AC :                     		binclude "sound/instr/fm/OLD/ambient_dark.gsx",$2478,$20
(1)  160/    F4CC :                     FmIns_Ambient_spook:
(1)  161/    F4CC :                     		binclude "sound/instr/fm/OLD/ambient_spook.gsx",$2478,$20
(1)  162/    F4EC :                     FmIns_Ambient_3:
(1)  163/    F4EC :                     		binclude "sound/instr/fm/OLD/ambient_3.gsx",$2478,$20
(1)  164/    F50C :                     
(1)  165/    F50C :                     
(1)  166/    F50C :                     ; FmIns_Guitar_bball:
(1)  167/    F50C :                     ; 		binclude "sound/instr/fm/guitar_bball.gsx",$2478,$20
(1)  168/    F50C :                     
     424/    F50C :                     		include "sound/smpl_dac.asm"		; (MCD/CD32X ONLY) GEMA: DAC samples
(1)    1/    F50C :                     ; ===========================================================================
(1)    2/    F50C :                     ; --------------------------------------------------------
(1)    3/    F50C :                     ; GEMA/Nikona DAC instruments
(1)    4/    F50C :                     ;
(1)    5/    F50C :                     ; This must be located at the 68k's 900000 area.
(1)    6/    F50C :                     ; ** 68K BANK 0 only **
(1)    7/    F50C :                     ;
(1)    8/    F50C :                     ; BASE Samplerate is at 16000hz
(1)    9/    F50C :                     ; --------------------------------------------------------
(1)   10/    F50C :                     
(1)   11/    F50C :                     	align $8000	; Start from a safe ROM-bank
(1)   12/   10000 :                     
(1)   13/   10000 :                     ; --------------------------------------------------------
(1)   14/   10000 :                     
(1)   15/   10000 :                     ; 	gSmplData Label,"filepath",loop_point(0-start)
(1)   16/   10000 : (MACRO)              	gSmplData DacIns_Nadie,"sound/instr/smpl/nadie.wav",0
(1)   16/   10000 : =$10000              DACINS_NADIE    label *
(1)   16/   10000 : B4DF 00                     dc.b ((DACINS_NADIE_e-DACINS_NADIE_s)&$FF),(((DACINS_NADIE_e-DACINS_NADIE_s)>>8)&$FF),(((DACINS_NADIE_e-DACINS_NADIE_s)>>16)&$FF)
(1)   16/   10003 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   16/   10006 :                     DACINS_NADIE_s:
(1)   16/   10006 :                             binclude "sound/instr/smpl/nadie.wav",$2C
(1)   16/   1DFBA :                     DACINS_NADIE_e:
(1)   17/   1DFBA : (MACRO)              	gSmplData DacIns_Kick_techno,"sound/instr/smpl/ST-72_kick.wav",0
(1)   17/   1DFBA : =$1DFBA              DACINS_KICK_TECHNO    label *
(1)   17/   1DFBA : 9C06 00                     dc.b ((DACINS_KICK_TECHNO_e-DACINS_KICK_TECHNO_s)&$FF),(((DACINS_KICK_TECHNO_e-DACINS_KICK_TECHNO_s)>>8)&$FF),(((DACINS_KICK_TECHNO_e-DACINS_KICK_TECHNO_s)>>16)&$FF)
(1)   17/   1DFBD : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   17/   1DFC0 :                     DACINS_KICK_TECHNO_s:
(1)   17/   1DFC0 :                             binclude "sound/instr/smpl/ST-72_kick.wav",$2C
(1)   17/   1E65C :                     DACINS_KICK_TECHNO_e:
(1)   18/   1E65C : (MACRO)              	gSmplData DacIns_Snare_techno,"sound/instr/smpl/ST-79_snare.wav",0
(1)   18/   1E65C : =$1E65C              DACINS_SNARE_TECHNO    label *
(1)   18/   1E65C : F220 00                     dc.b ((DACINS_SNARE_TECHNO_e-DACINS_SNARE_TECHNO_s)&$FF),(((DACINS_SNARE_TECHNO_e-DACINS_SNARE_TECHNO_s)>>8)&$FF),(((DACINS_SNARE_TECHNO_e-DACINS_SNARE_TECHNO_s)>>16)&$FF)
(1)   18/   1E65F : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   18/   1E662 :                     DACINS_SNARE_TECHNO_s:
(1)   18/   1E662 :                             binclude "sound/instr/smpl/ST-79_snare.wav",$2C
(1)   18/   20754 :                     DACINS_SNARE_TECHNO_e:
(1)   19/   20754 : (MACRO)              	gSmplData DacIns_Kick_wegot,"sound/instr/smpl/wegot_kick.wav",0
(1)   19/   20754 : =$20754              DACINS_KICK_WEGOT    label *
(1)   19/   20754 : 7407 00                     dc.b ((DACINS_KICK_WEGOT_e-DACINS_KICK_WEGOT_s)&$FF),(((DACINS_KICK_WEGOT_e-DACINS_KICK_WEGOT_s)>>8)&$FF),(((DACINS_KICK_WEGOT_e-DACINS_KICK_WEGOT_s)>>16)&$FF)
(1)   19/   20757 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   19/   2075A :                     DACINS_KICK_WEGOT_s:
(1)   19/   2075A :                             binclude "sound/instr/smpl/wegot_kick.wav",$2C
(1)   19/   20ECE :                     DACINS_KICK_WEGOT_e:
(1)   20/   20ECE :                     
     425/   20ECE :                     mdbank0_e:
     426/   20ECE : (MACRO)              	data_bkend MCD_DBANK0,MCD_DBANK0_e,mdbank0_e-mdbank0
     426/   20ECE :                     
     427/   20ECE :                     
     428/   20ECE :                     ; --------------------------------------------------------
     429/   20ECE :                     ; BANK 1
     430/   20ECE :                     ; --------------------------------------------------------
     431/   20ECE :                     
     432/   20ECE :                     ; 	data_bank MCD_DBANK1,-1
     433/   20ECE :                     ; 		org $200000-4
     434/   20ECE :                     ; 		dc.b "BNK1"
     435/   20ECE :                     ; 	data_bank_e MCD_DBANK1_e
     436/   20ECE :                     
     437/   20ECE :                     ; --------------------------------------------------------
     438/   20ECE :                     ; BANK 2
     439/   20ECE :                     ; --------------------------------------------------------
     440/   20ECE :                     
     441/   20ECE :                     ; 	data_bank MCD_DBANK2,-1
     442/   20ECE :                     ; 		org $300000-4
     443/   20ECE :                     ; 		dc.b "BNK2"
     444/   20ECE :                     ; 	data_bank_e MCD_DBANK2_e
     445/   20ECE :                     
     446/   20ECE :                     ; --------------------------------------------------------
     447/   20ECE :                     ; BANK 3
     448/   20ECE :                     ; --------------------------------------------------------
     449/   20ECE :                     
     450/   20ECE :                     ; 	data_bank MCD_DBANK3,-1
     451/   20ECE :                     ; 		org $400000-4
     452/   20ECE :                     ; 		dc.b "BNK3"
     453/   20ECE :                     ; 	data_bank_e MCD_DBANK3_e
     454/   20ECE :                     
     455/   20ECE :                     ; ====================================================================
     456/   20ECE :                     ; ----------------------------------------------------------------
     457/   20ECE :                     ; 32X/CD32X ONLY
     458/   20ECE :                     ;
     459/   20ECE :                     ; SDRAM DATA packages for each screen mode
     460/   20ECE :                     ;
     461/   20ECE :                     ; Usage:
     462/   20ECE :                     ; sdram_bank START_LABEL,END_LABEL
     463/   20ECE :                     ; (includes and bincludes)
     464/   20ECE :                     ; sdram_bank_e START_LABEL,END_LABEL
     465/   20ECE :                     ; ----------------------------------------------------------------
     466/   20ECE :                     
     467/   20ECE :                     ; ---------------------------------------------
     468/   20ECE :                     ; DEFAULT
     469/   20ECE :                     ; ---------------------------------------------
     470/   20ECE :                     
     471/   20ECE : (MACRO)              	sdram_bkset MARSDATA_DEFAULT,MARSDATA_DEFAULT_e
     471/   20ECE :                     ; MARSDATA_DEFAULT:
     471/   20ECE : =$20ECE              MARSDATA_DEFAULT label *
     472/   20ECE :                     	include "game/screen_0/data_mgfx.asm"
(1)    1/   20ECE :                     ; ====================================================================
(1)    2/   20ECE :                     ; ----------------------------------------------------------------
(1)    3/   20ECE :                     ; Put your 32X graphics here, indexed or direct
(1)    4/   20ECE :                     ;
(1)    5/   20ECE :                     ; These are located on the SH2's ROM area, this will be gone
(1)    6/   20ECE :                     ; if RV is set to 1
(1)    7/   20ECE :                     ;
(1)    8/   20ECE :                     ; Labels MUST be aligned by 4
(1)    9/   20ECE :                     ; ----------------------------------------------------------------
(1)   10/   20ECE :                     
(1)   11/   20ECE :                     		align 4
(1)   12/   20ED0 :                     ; ArtMars_Sabrina:
(1)   13/   20ED0 :                     ; 		binclude "game/screen_0/data/objects/mars/sabrina/sabrina_art.bin"
(1)   14/   20ED0 :                     ; 		align 4
(1)   15/   20ED0 :                     ArtMars_TEST:
(1)   16/   20ED0 :                     		binclude "game/screen_0/data/maps/mars/test/data_art.bin"
(1)   17/   326D0 :                     		align 4
(1)   18/   326D0 :                     
(1)   19/   326D0 :                     
(1)   20/   326D0 :                     
     473/   326D0 : (MACRO)              	sdram_bkend MARSDATA_DEFAULT,MARSDATA_DEFAULT_e
     473/   326D0 :                     
     474/   326D0 :                     
     475/   326D0 :                     ; ====================================================================
     476/   326D0 :                     ; ----------------------------------------------------------------
     477/   326D0 :                     ; Cartridge DMA graphics data
     478/   326D0 :                     ;
     479/   326D0 :                     ; BANK-free on 32X Cartridge
     480/   326D0 :                     ; ----------------------------------------------------------------
     481/   326D0 :                     
     483/   326D0 :                     		include "game/screen_0/data_dma.asm"
(1)    1/   326D0 :                     ; ====================================================================
(1)    2/   326D0 :                     ; ----------------------------------------------------------------
(1)    3/   326D0 :                     ; DMA Graphics for this screen
(1)    4/   326D0 :                     ; ----------------------------------------------------------------
(1)    5/   326D0 :                     
(1)    6/   326D0 :                     ASCII_FONT:	binclude "system/md/data/font.bin"
(1)    7/   332D0 :                     
(1)    8/   332D0 :                     ; ----------------------------------------------------------------
(1)    9/   332D0 :                     ; Commmon graphics
(1)   10/   332D0 :                     ; ----------------------------------------------------------------
(1)   11/   332D0 :                     
(1)   12/   332D0 :                     ART_TEST:
(1)   13/   332D0 :                     		binclude "game/screen_0/data/maps/md/test/md_art.bin"
(1)   14/   3BA50 :                     ART_TEST_e:
(1)   15/   3BA50 :                     		align 2
(1)   16/   3BA50 :                     
(1)   17/   3BA50 :                     ; ----------------------------------------------------------------
(1)   18/   3BA50 :                     ; Object graphics
(1)   19/   3BA50 :                     ; ----------------------------------------------------------------
(1)   20/   3BA50 :                     
(1)   21/   3BA50 :                     Art_Sisi:	binclude "game/screen_0/data/objects/md/sisi/sisi_art.bin"
(1)   22/   3C030 :                     Art_Sisi_e:
(1)   23/   3C030 :                     		align 2
(1)   24/   3C030 :                     
     485/   3C030 :                     
     486/   3C030 :                     ; ====================================================================
     487/   3C030 :                     ; ---------------------------------------------
     488/   3C030 :                     ; End
     489/   3C030 :                     ; ---------------------------------------------
     490/   3C030 :                     
     491/   3C030 :                     ROM_END:
     496/   3C030 :                     		align $8000			; Cartridge padding
     498/   40000 :                     
 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 3 - 03/05/2024 11:49:23 PM


  Symbol Table (* = unused):
  --------------------------

*ADAPTER :                        0 - | *ADEN :                           2 - |
 ALV :                           24 - |
*ARCHITECTURE :                                      "x86_64-unknown-linux" - |
*ARTMARS_TEST :               20ED0 C |  ART_SISI :                   3BA50 C |
 ART_SISI_E :                 3C030 C |  ART_TEST :                   332D0 C |
 ART_TEST_E :                 3BA50 C |  ASCII_FONT :                 326D0 C |
 ASCII_PAL :                    54C C |  ATK :                            8 - |
*BIGENDIAN :                      0 - | *BITBGON :                        7 - |
*BITCLICKL :                      0 - | *BITCLICKM :                      2 - |
*BITCLICKR :                      1 - | *BITCLICKS :                      3 - |
 BITDISPENBL :                    6 - |  BITDMA :                         1 - |
 BITDMAENBL :                     4 - | *BITDRWD :                        2 - |
*BITDRWL :                        1 - | *BITDRWR :                        0 - |
*BITDRWU :                        3 - | *BITFIFOE :                       9 - |
*BITFIFOF :                       8 - | *BITHBLK :                        2 - |
*BITHINTENBL :                    4 - | *BITHVSTOP :                      1 - |
*BITJOYA :                        6 - |  BITJOYB :                        4 - |
 BITJOYC :                        5 - |  BITJOYDOWN :                     1 - |
 BITJOYLEFT :                     2 - | *BITJOYMODE :                     B - |
 BITJOYRIGHT :                    3 - |  BITJOYSTART :                    7 - |
 BITJOYUP :                       0 - | *BITJOYX :                        A - |
*BITJOYY :                        9 - | *BITJOYZ :                        8 - |
*BITMAPMD :                       1 - | *BITMARSBG :                      6 - |
 BITOBJ_FLIPH :                   0 - |  BITOBJ_FLIPV :                   1 - |
 BITOBJ_MARS :                    7 - | *BITODD :                         4 - |
*BITPAL :                         0 - | *BITSPRCOL :                      5 - |
*BITSPROVR :                      6 - | *BITV30 :                         3 - |
 BITVBLK :                        3 - | *BITVINT :                        7 - |
*BITVINTENBL :                    5 - | *BITWRAMMODE :                    2 - |
*BRANCHEXT :                      0 - | *CART :                           1 - |
*CASESENSITIVE :                  0 - |  CDRAMDST :                      31 C |
 CDRAMLEN :                      30 C |  CDRAMSRC :                      33 C |
 CDRAMSRCB :                     35 C |  CHECK_THISRAM :   FFFFFFFFFFFFA000 C |
 CHIP_ENV :                    1072 C |  CHIP_ENV.ATKEND :             10F5 C |
*CHIP_ENV.ATKZERO :            10F8 C |  CHIP_ENV.CHK2 :               10FE C |
 CHIP_ENV.CHK4 :               1133 C |  CHIP_ENV.CKOF :               1096 C |
 CHIP_ENV.CKON :               10A9 C | *CHIP_ENV.DECTMR :             1102 C |
 CHIP_ENV.DKADD :              111C C |  CHIP_ENV.DKSAV :              1124 C |
 CHIP_ENV.DKYEND :             1129 C |  CHIP_ENV.DO_NFREQ :           1188 C |
 CHIP_ENV.ENVPROC :            10C7 C |  CHIP_ENV.KILLENV :            1149 C |
*CHIP_ENV.NBLOCK :             10C7 C |  CHIP_ENV.NORMAL :             1183 C |
 CHIP_ENV.NOUPD :              11C9 C |  CHIP_ENV.NSKIP :              10BE C |
 CHIP_ENV.SILNC_3 :            117F C |  CHIP_ENV.VEDLP :              1151 C |
 CHIP_ENV.VLMUCH :             11B5 C |  CHIP_ENV.VLOOP :              107E C |
 CHIP_ENV.VONLY :              11AB C |  CHNL_CHIP :                      1 - |
 CHNL_EFFARG :                    6 - |  CHNL_EFFID :                     5 - |
 CHNL_FLAGS :                     0 - |  CHNL_INS :                       3 - |
 CHNL_NOTE :                      2 - |  CHNL_TYPE :                      7 - |
 CHNL_VOL :                       4 - | *CLICKL :                         2 - |
*CLICKM :                         4 - | *CLICKR :                         1 - |
*CLICKS :                         8 - | *CMDINTCLR :                     1A - |
*CMDIRQ_ON :                      2 - |  COM :                            0 - |
*COMM0 :                         20 - | *COMM1 :                         21 - |
*COMM10 :                        2A - | *COMM11 :                        2B - |
*COMM12 :                        2C - | *COMM13 :                        2D - |
*COMM14 :                        2E - | *COMM15 :                        2F - |
*COMM2 :                         22 - | *COMM3 :                         23 - |
*COMM4 :                         24 - | *COMM5 :                         25 - |
*COMM6 :                         26 - | *COMM7 :                         27 - |
*COMM8 :                         28 - | *COMM9 :                         29 - |
 COMMZFIFO :                     40 C |  COMMZREAD :                   1C7C C |
 COMMZROMBLK :                   2F C |  COMMZWRITE :                    2E C |
*COMPMODE :                       0 - | *CONSTPI :        3.141592653589793 - |
 CONTROLLER_1 :    FFFFFFFFFFFFC004 - | *CONTROLLER_2 :    FFFFFFFFFFFFC014 - |
*CS0 :                            0 - | *CS1 :                      2000000 - |
 CS2 :                      4000000 - | *CS3 :                      6000000 - |
*CURRPADDING :                    0 - |  CURRTICKBITS :                1C8B C |
*CUSTOM :                         0 - | *CYCLE :                         32 - |
*DACINS_KICK_TECHNO :         1DFBA C |  DACINS_KICK_WEGOT :          20754 C |
 DACINS_NADIE :               10000 C | *DACINS_SNARE_TECHNO :        1E65C C |
 DAC_FILL :                      20 C |  DAC_ME :                         8 C |
 DAC_OFF :                     1204 C |  DAC_ON :                      11EF C |
 DAC_PLAY :                    1219 C |  DAC_REFILL :                  124D C |
 DAC_REFILL.DACFILL_END :      130C C |  DAC_REFILL.DACFILL_LOOP :     12C5 C |
 DAC_REFILL.DACFILL_RET :      130F C |  DAC_REFILL.DAC_OVER :         129B C |
 DATE :                "03/05/2024" - |  DDACCNTR :                    1C79 C |
 DDACFIFOMID :                 1C75 C |  DDACPNTR :                    1C76 C |
*DISPENBL :                      40 - |  DKY :                            C - |
*DMAENBL :                       10 - | *DOTTEDSTRUCTS :                  0 - |
*DREQCTL :                        6 - | *DREQDEST :                       C - |
*DREQFIFO :                      12 - | *DREQLEN :                       10 - |
*DREQSOURCE :                     8 - |  DRV_LOOP :                      54 C |
 DRV_LOOP.CMND_0 :               EA C |  DRV_LOOP.CMND_1 :               ED C |
 DRV_LOOP.CMND_2 :              106 C |  DRV_LOOP.CMND_3 :              142 C |
 DRV_LOOP.CMND_5 :              17B C |  DRV_LOOP.CMND_6 :              1B3 C |
 DRV_LOOP.CMND_7 :              1EB C |  DRV_LOOP.CMND_RDSLOT :         1FC C |
 DRV_LOOP.GETCBYTEL :            BD C |  DRV_LOOP.GRAB_ARG :             BB C |
 DRV_LOOP.LIST :                 DA C |  DRV_LOOP.NEITHER :              94 C |
 DRV_LOOP.NEXT_CMD :             98 C |  DRV_LOOP.NOBEATS :              7B C |
 DRV_LOOP.NOTICKS :              6E C |  DRV_LOOP.SRCH_DEL :            15F C |
 DRV_LOOP.SRCH_FVOL :           198 C |  DRV_LOOP.SRCH_MODE :           128 C |
 DRV_LOOP.SRCH_SLOT :           20F C |  DRV_LOOP.SRCH_VOL :            1D0 C |
 DRV_LOOP.WRTTO_DEL :           16C C |  DRV_LOOP.WRTTO_FVOL :          1A5 C |
 DRV_LOOP.WRTTO_SLOT :          137 C |  DRV_LOOP.WRTTO_VOL :           1DD C |
 DTBL_MULTI :                   82F C |  DTBL_SINGL :                   845 C |
 DTBL_SINGL.CHNL_ULNK :         F11 C |  DTBL_SINGL.CHNL_ULNKCUT :      F0B C |
 DTBL_SINGL.CHNL_ULNKOFF :      F11 C |  DTBL_SINGL.COMN_PANLIST :      CB9 C |
 DTBL_SINGL.DAC_CUT :           B8E C |  DTBL_SINGL.DAC_OFF :           B94 C |
 DTBL_SINGL.DAC_PITCH :         B97 C |  DTBL_SINGL.D_CONT :            C72 C |
 DTBL_SINGL.EFFC :              BDF C |  DTBL_SINGL.EFFC_D :            BFA C |
 DTBL_SINGL.EFFC_E :            C3D C |  DTBL_SINGL.EFFC_F :            C52 C |
 DTBL_SINGL.EFFC_X :            C73 C |  DTBL_SINGL.FINE_DOWN :         C15 C |
 DTBL_SINGL.FINE_UP :           C29 C |  DTBL_SINGL.FM_CINDX :          B28 C |
 DTBL_SINGL.FM_CUT :            A73 C |  DTBL_SINGL.FM_HASVOL :         EA5 C |
 DTBL_SINGL.FM_KEYOFF :         A7C C |  DTBL_SINGL.FM_OFF :            A6D C |
 DTBL_SINGL.FM_SETFREQ :        A9B C |  DTBL_SINGL.FM_SETRLIST :       DBC C |
 DTBL_SINGL.FM_TLOFF :          A84 C |  DTBL_SINGL.FM_WRTALPAN :       B30 C |
 DTBL_SINGL.FM_WRTLVOL :        AB2 C |  DTBL_SINGL.FND_OCT :           EF6 C |
 DTBL_SINGL.FROM_PSGN :         93F C |  DTBL_SINGL.GET_OCT :           EEB C |
 DTBL_SINGL.INST :              CEA C |  DTBL_SINGL.INS_DAC :           DCC C |
 DTBL_SINGL.INS_FM :            D4B C |  DTBL_SINGL.INS_PCM :           E20 C |
 DTBL_SINGL.INS_PSG :           D15 C |  DTBL_SINGL.INS_PSGN :          D0F C |
 DTBL_SINGL.INS_PWM :           E58 C | *DTBL_SINGL.INVL_INS :          D0E C |
 DTBL_SINGL.KEEP_TLMX :         B1D C |  DTBL_SINGL.KYCUT_PSG :         98B C |
 DTBL_SINGL.KYCUT_PSGN :        988 C |  DTBL_SINGL.KYOFF_PSG :         97E C |
 DTBL_SINGL.KYOFF_PSGN :        97B C |  DTBL_SINGL.KYPSGN_HATOFF :     995 C |
 DTBL_SINGL.LINKED :            8AF C |  DTBL_SINGL.MKFM_SET :          9FE C |
 DTBL_SINGL.MK_DAC :            B66 C |  DTBL_SINGL.MK_FM :             99C C |
 DTBL_SINGL.MK_FMSPC :          A12 C |  DTBL_SINGL.MK_LIST :           8EA C |
 DTBL_SINGL.MK_PCM :            BBD C |  DTBL_SINGL.MK_PSG :            91E C |
 DTBL_SINGL.MK_PSGN :           8F8 C |  DTBL_SINGL.MK_PWM :            BBE C |
 DTBL_SINGL.NEW_ROMDAT :        D7F C | *DTBL_SINGL.NOFM_NOTE :         A11 C |
 DTBL_SINGL.NORM_DOWN :         C13 C |  DTBL_SINGL.NORM_UP :           C2B C |
 DTBL_SINGL.NOTE :              E9B C |  DTBL_SINGL.NOT_DAC :           9BB C |
 DTBL_SINGL.NOT_DSPC :          9D0 C |  DTBL_SINGL.NO_LFO :            B65 C |
 DTBL_SINGL.N_FM :              EE1 C |  DTBL_SINGL.N_INDX :            ECD C |
 DTBL_SINGL.N_PSGN :            EDC C |  DTBL_SINGL.N_STFREQ :          ECE C |
 DTBL_SINGL.PAN_MCD :           CA3 C |  DTBL_SINGL.PCM_PANLIST :       CC1 C |
 DTBL_SINGL.PSG_KEYON :         966 C |  DTBL_SINGL.RCYL_COM :          89A C |
*DTBL_SINGL.READFREQ_PCM :      BBF C | *DTBL_SINGL.READFREQ_PWM :      BC4 C |
 DTBL_SINGL.RES_PAN :           C99 C |  DTBL_SINGL.SAME_PATCH :        DB7 C |
 DTBL_SINGL.SAVE_ARG :          C67 C |  DTBL_SINGL.SET_WAVFREQ :       BC7 C |
 DTBL_SINGL.SILN_DAC :          8A6 C |  DTBL_SINGL.SILN_FM :           8A9 C |
 DTBL_SINGL.SILN_PCM :          884 C |  DTBL_SINGL.SILN_PSG :          87D C |
 DTBL_SINGL.SILN_PSG_N :        879 C |  DTBL_SINGL.SILN_PWM :          890 C |
 DTBL_SINGL.SPCREGLIST :        A65 C |  DTBL_SINGL.TL_DOWN :           A90 C |
 DTBL_SINGL.VMUCH :             975 C |  DTBL_SINGL.VOLU :              CE1 C |
 DTBL_SINGL.VOL_DVLD :          C39 C |  DTBL_SINGL.WRITE_TL :          B16 C |
 DTBL_SINGL.WR_SPC :            A48 C |  DTH :                           20 - |
 DTL :                           1C - |  DWAVEBUFF :                   1D00 C |
*EMU :                            0 - | *EXT_3 :                          C C |
*EXT_4 :                          E C | *FALSE :                          0 - |
*FEN :                            2 - | *FILLDATA :                       8 - |
*FILLLENGTH :                     4 - | *FILLSTART :                      6 - |
 FLG :                           28 - | *FM :                            80 - |
 FMCACH_1 :                    153A C |  FMCACH_2 :                    1562 C |
 FMCACH_3 :                    158A C |  FMCACH_4 :                    15B2 C |
 FMCACH_5 :                    15DA C |  FMCACH_6 :                    1602 C |
 FMCACH_LIST :                 131E C |  FMFREQ_LIST :                 132C C |
*FMINS_AMBIENT_3 :             F4EC C | *FMINS_AMBIENT_DARK :          F4AC C |
*FMINS_AMBIENT_SPOOK :         F4CC C | *FMINS_BANJO_PUY :             F36C C |
*FMINS_BASS_1 :                EFAC C | *FMINS_BASS_2 :                EFCC C |
*FMINS_BASS_4 :                F0AC C | *FMINS_BASS_8 :                F0CC C |
*FMINS_BASS_CALM :             F10C C | *FMINS_BASS_CLUB :             F0EC C |
*FMINS_BASS_DONNA :            EFEC C |  FMINS_BASS_DUCK :             F08C C |
*FMINS_BASS_GROOVE :           F00C C | *FMINS_BASS_GROOVE_2 :         F02C C |
*FMINS_BASS_GROOVE_GEM :       F04C C | *FMINS_BASS_ITALO :            F06C C |
 FMINS_BASS_LOW_1 :            F12C C | *FMINS_BASS_OIL :              F14C C |
 FMINS_BRASS_EUR :             F22C C | *FMINS_BRASS_PUY :             F24C C |
 FMINS_CLOSEDHAT :             F46C C |  FMINS_DING_1 :                F3AC C |
*FMINS_DING_BASEBALL :         F28C C | *FMINS_DING_TOY :              F32C C |
 FMINS_DRUMKICK_GEM :          F2AC C | *FMINS_FLAUTE_CAVE :           F34C C |
 FMINS_FM3_EXPLOSION :         EF0C C | *FMINS_GUITAR_BBALL :          F40C C |
 FMINS_HATS_1 :                F42C C |  FMINS_HATS_CLOSED :           F44C C |
 FMINS_HBEAT_TOM :             F3EC C | *FMINS_MARIMBA :               F30C C |
*FMINS_ORGAN2 :                EECC C |  FMINS_ORGAN2A :               EEEC C |
*FMINS_ORGAN_ITO :             F26C C | *FMINS_PIANOM1 :               F16C C |
 FMINS_PIANO_AQUA :            F18C C | *FMINS_PIANO_HARD :            F1AC C |
*FMINS_PSYNTH_PLUS :           F38C C | *FMINS_SEWER_1 :               F48C C |
 FMINS_SP_CLOSEDHAT :          EF5C C | *FMINS_SP_COWBELL :            EF84 C |
 FMINS_SP_OPENHAT :            EF34 C | *FMINS_SYNTH_PLUS :            F1CC C |
*FMINS_TROMBONE_GEM :          F3CC C |  FMINS_TRUMPET_1 :             F1EC C |
*FMINS_TRUMPET_2 :             F2CC C |  FMINS_TRUMPET_CARNIVAL :      F20C C |
*FMINS_TRUMPET_PUY :           F2EC C |  FMSPECIAL :                   1C74 C |
 FM_AUTOREG :                  11D5 C |  FM_SEND_1 :                   11D9 C |
 FM_SEND_2 :                   11E4 C | *FRAMECTL :                       B - |
*FREEFLAG :                      3F C | *FS :                             1 - |
*FULLPMMU :                       1 - |  GEMADMAPAUSE :                 3C4 C |
 GEMADMAPAUSEROM :              400 C |  GEMADMARESUME :                3E6 C |
 GEMADMARESUMEROM :             422 C |  GEMAFADETRACK :                4A0 C |
 GEMAMSTRLISTPOS :               1C C |  GEMAPLAYTRACK :                462 C |
 GEMASETBEATS :                 4D8 C |  GEMASETMASTERLIST :            44C C |
 GEMASETTRACKVOL :              4BC C | *GEMASFX_ALL :                 472A C |
 GEMASFX_ALL.BLK :             4738 C |  GEMASFX_ALL.INS :             47FE C |
 GEMASFX_ALL.PAT :             473E C |  GEMASTOPTRACK :                484 C |
 GEMATEST :                     43C C |  GEMATRK_ARENA1 :              48A0 C |
 GEMATRK_ARENA1.INS :          48AE C |  GEMATRK_CRYSTAL :             A488 C |
 GEMATRK_CRYSTAL.BLK :         A496 C |  GEMATRK_CRYSTAL.INS :         B692 C |
 GEMATRK_CRYSTAL.PAT :         A49E C |  GEMATRK_DREAM :               8D38 C |
 GEMATRK_DREAM.BLK :           8D46 C |  GEMATRK_DREAM.INS :           A410 C |
 GEMATRK_DREAM.PAT :           8D53 C |  GEMATRK_MOVEME :              7D63 C |
 GEMATRK_MOVEME.BLK :          7D71 C |  GEMATRK_MOVEME.INS :          8CA0 C |
 GEMATRK_MOVEME.PAT :          7D88 C |  GEMATRK_NADIEMARS :           DC5E C |
 GEMATRK_NADIEMARS.BLK :       DC6C C |  GEMATRK_NADIEMARS.INST :      EE84 C |
 GEMATRK_NADIEMARS.PATT :      DC74 C |  GEMATRK_NADIEMCD :            C9B0 C |
 GEMATRK_NADIEMCD.BLK :        C9BE C |  GEMATRK_NADIEMCD.INST :       DC16 C |
 GEMATRK_NADIEMCD.PATT :       C9C6 C |  GEMATRK_NADIEMD :             B6C2 C |
 GEMATRK_NADIEMD.BLK :         B6D0 C |  GEMATRK_NADIEMD.INST :        C968 C |
 GEMATRK_NADIEMD.PATT :        B6D8 C |  GEMATRK_TEST_0 :              4826 C |
 GEMATRK_TEST_0.BLK :          483C C |  GEMATRK_TEST_0.INS :          4834 C |
 GEMATRK_TEST_0.PAT :          483F C |  GEMA_INIT :                    F2D C |
 GEMA_INIT.END_SETUP :          F98 C |  GEMA_INIT.SETUP_LIST :         F6D C |
 GEMA_INIT.ST_COPY :            F8C C |  GEMA_LASTBANK :               1313 C |
 GEMA_LASTBANK.WRITE :         1318 C |  GEMA_MASTERLIST :             470A C |
 GET_TICK :                     F99 C |  GET_TICK.CTNOTICK :            FB6 C |
 GLBL_LASTORG :    FFFFFFFFFFFFD204 - |  GLBL_LASTPC :                 35A6 - |
*HAS64 :                          1 - | *HASDSP :                         0 - |
*HASFPU :                         0 - | *HASPMMU :                        0 - |
*HBLK :                          40 - | *HCOUNT :                         5 - |
 HEADEROUT :                   1C92 C |  HEADEROUT_E :                 1CA0 C |
*HINTCLR :                       18 - | *HINTENBL :                      10 - |
 HINT_DEFAULT :                15C2 C | *HIRQ_ON :                        4 - |
*HVSTOP :                         2 - | *INEXTMODE :                      0 - |
*INLWORDMODE :                    0 - | *INMAXMODE :                      0 - |
*INSRCMODE :                      0 - |  INSTLISTOUT :                 17CA C |
*INSUPMODE :                      1 - | *INTMASK :                        1 - |
 JOYA :                          40 - |  JOYB :                          10 - |
 JOYC :                          20 - | *JOYDOWN :                        2 - |
*JOYLEFT :                        4 - | *JOYMODE :                      800 - |
*JOYRIGHT :                       8 - | *JOYSTART :                      80 - |
*JOYUP :                          1 - | *JOYX :                         400 - |
*JOYY :                         200 - | *JOYZ :                         100 - |
*LCHWIDTH :                      34 - |  LEV :                            4 - |
*LISTON :                         3 - |  LIST_VDPREGS :                 538 C |
*MACEXP :                         7 - | *MAPMARS_TEST :                423E C |
 MAP_TEST :                    397E C |  MARS :                           0 - |
 MARSBLOCK :                     37 C |  MARSCD :                         0 - |
 MARSDATA_DEFAULT :           20ECE C |  MARSUPD :                     1C7D C |
*MARS_RAMCODE :                35A6 C | *MARS_RAMCODE_E :              35A6 C |
 MAX_BUFFNTRY :                   8 - |  MAX_MDDMATSK :                  18 - |
 MAX_MDOBJ :                     18 - |  MAX_MDOTHER :                  C00 - |
 MAX_MDSYSTEM :                 600 - |  MAX_MDVIDEO :                 2000 - |
 MAX_RCACH :                     20 - |  MAX_SCRNBUFF :                1800 - |
 MAX_SRAMSIZE :                 400 - |  MAX_SYSCODE :                 2000 - |
 MAX_TBLSIZE :                   18 - |  MAX_TRFRPZ :                     8 - |
 MAX_TRKCHN :                    20 - |  MAX_TRKINDX :                   1A - |
 MAX_USERCODE :                8000 - |  MAX_ZCMND :                     10 - |
 MCD :                            0 - |  MCDBLOCK :                      36 C |
 MCDUPD :                      1C7E C | *MCD_COMM_M :                     E - |
*MCD_COMM_S :                     F - | *MCD_DBANK0 :                  397E C |
*MCD_DCOMM_M :                   10 - | *MCD_DCOMM_S :                   20 - |
*MCD_HINT :                       6 - | *MCD_INTMASK :                   32 - |
*MCD_MEMORY :                     3 - | *MDBANK0 :                     397E C |
*MDBANK0_E :                  20ECE C |  MDSYS_SINEDATA :              1368 C |
 MD_BANK_SRAM :              A130F1 - |  MD_ENTRY :                     202 C |
 MD_ENTRY.LOOP_RAM :            236 C |  MD_ENTRY.OLDMD :               21C C |
 MD_ENTRY.PALCLEAR :            260 C |  MD_ENTRY.WAIT_DMA :            24A C |
 MD_ERRADDR :                   200 C |  MD_ERRBUS :                    200 C |
 MD_ERRCHK :                    200 C |  MD_ERRILL :                    200 C |
 MD_ERROREX :                   200 C |  MD_ERRORTRAP :                 200 C |
 MD_ERRPRIVL :                  200 C |  MD_ERRTRAPV :                  200 C |
 MD_ERRZDIV :                   200 C |  MD_LINE1010 :                  200 C |
 MD_LINE1111 :                  200 C |  MD_READMODES :                15C6 C |
 MD_READMODES.PICK_MODE :      15E2 C |  MD_SCREEN00 :                 35A6 C |
*MD_SYSCODE_E :                1626 C |  MD_TRACE :                     200 C |
 MODE :                          18 - | *MODE_FADEIN :                 1544 C |
 MODE_FADEIN.LOOPW :           156C C | *MODE_FADEOUT :                1578 C |
 MODE_FADEOUT.LOOPW :          15A0 C |  MODE_INIT :                   1512 C |
 MODE_INIT.CLR :               153C C | *MOMCPU :                     68000 - |
*MOMCPUNAME :               "68000" - | *MONOWIDTH :                     38 - |
 MOUSE_X :                        8 C |  MOUSE_Y :                        A C |
*NESTMAX :                      100 - |  NIKONA_BUFFLIST :             1464 C |
 NIKONA_BUFFLIST_E :           1484 C |  OBJECTS_ADD :                  DD0 C |
 OBJECTS_ADD.CLR :              DEE C |  OBJECTS_ADD.SEARCH :           DD8 C |
 OBJECTS_ADD.USE_IT :           DE8 C |  OBJECTS_CLEAR :                D60 C |
 OBJECTS_CLEAR.CLR :            D68 C |  OBJECTS_CLEAR.CLR_D :          D76 C |
 OBJECTS_RUN :                  D88 C |  OBJECTS_RUN.NEXT_ONE :         D90 C |
 OBJECTS_RUN.NO_CODE :          D9C C | *OBJECTS_SET :                  DA6 C |
 OBJECTS_SET.CLR :              DB0 C |  OBJECTS_SHOW :                 E06 C |
 OBJECTS_SHOW.FINISH :          F06 C |  OBJECTS_SHOW.MK_PZ :           E84 C |
 OBJECTS_SHOW.MK_SPR :          F00 C |  OBJECTS_SHOW.NEXT :            E56 C |
 OBJECTS_SHOW.NEXTS :           E28 C |  OBJECTS_SHOW.NO_SPRDRW :       E4E C |
 OBJECTS_SHOW.RAN_OUT :         F24 C |  OBJECTS_SHOW.VRAM_H :          ED6 C |
 OBJECTS_SHOW.VRAM_V :          EBC C |  OBJECT_ANIMATE :               FC6 C |
 OBJECT_ANIMATE.GOTOFRAME :    1042 C |  OBJECT_ANIMATE.KEEPSPD :      1008 C |
 OBJECT_ANIMATE.LASTFRAME :    104C C |  OBJECT_ANIMATE.NOANIM :       1034 C |
 OBJECT_ANIMATE.RETURN :       1032 C |  OBJECT_ANIMATE.SAMETHING :     FE0 C |
 OBJECT_ANIMRESET :            1052 C |  OBJECT_DISPLAY :               F2A C |
 OBJECT_DISPLAY.NEXT_PZ :       F6C C |  OBJECT_DISPLAY.NO_DMA :        F96 C |
 OBJECT_DISPLAY.SRCH :          F32 C |  OBJECT_DISPLAY.THIS_ONE :      F3E C |
*OBJECT_MKSPRPZ :               F98 C |  OBJECT_MKSPRPZ.NOPE :          FC4 C |
*OBJECT_SPEED :                1062 C |  OBJMAP_SISI :                 46AE C |
 OBJPAL_SISI :                 468E C |  OBJ_ANIM_ID :                   1C C |
 OBJ_ANIM_INDX :                 1A C |  OBJ_ANIM_SPD :                  20 C |
 OBJ_CODE :                       0 C |  OBJ_DMA :                       10 C |
 OBJ_FRAME :                     1E C | *OBJ_FREE :                      25 C |
 OBJ_INDEX :                     21 C |  OBJ_MAP :                        C C |
*OBJ_RAM :                       26 C |  OBJ_SET :                       22 C |
*OBJ_STATUS :                    24 C | *OBJ_SUBID :                     23 C |
 OBJ_VRAM :                      14 C |  OBJ_X :                          4 C |
 OBJ_X_SPD :                     16 C |  OBJ_Y :                          8 C |
 OBJ_Y_SPD :                     18 C |  ON_HOLD :                        2 C |
 ON_PRESS :                       4 C | *ON_RELEASE :                     6 C |
*PACKING :                        0 - | *PADDING :                        0 - |
 PAD_ID :                         0 C |  PAD_VER :                        1 C |
*PALMARS_SABRINA :             466E C | *PALMARS_TEST :                446E C |
*PALMODE :                       3E C |  PARP :                          34 - |
 PCMCOM :                      1486 C | *PEN :                           20 - |
 PICO :                           0 - |  PROC_CHIPS :                   62A C |
 PSGCOM :                      14FE C |  PSGFREQ_LIST :                1344 C |
 PSGHATMODE :                  1C73 C | *PSG_CTRL :                  C00011 - |
 PTMR :                          38 - |  PVOL :                          30 - |
 PWMCOM :                      14C6 C | *PWMCTL :                        31 - |
*PWMINTCLR :                     1C - | *PWMIRQ_ON :                      1 - |
 RAM_FADEMARSDELAY :                                       FFFFFFFFFFFFBDF0 C |
 RAM_FADEMARSINCR :                                        FFFFFFFFFFFFBDEE C |
 RAM_FADEMARSREQ : FFFFFFFFFFFFBDEC C | *RAM_FADEMARSTMR : FFFFFFFFFFFFBDF2 C |
 RAM_FADEMDDELAY : FFFFFFFFFFFFBDE8 C |  RAM_FADEMDINCR :  FFFFFFFFFFFFBDE6 C |
 RAM_FADEMDREQ :   FFFFFFFFFFFFBDE4 C |  RAM_FADEMDTMR :   FFFFFFFFFFFFBDEA C |
 RAM_FRAMECOUNT :  FFFFFFFFFFFFBDD4 C | *RAM_GLBL_FILLER : FFFFFFFFFFFFEA04 C |
 RAM_HORSCROLL :   FFFFFFFFFFFFA004 C |  RAM_INPUTDATA :   FFFFFFFFFFFFC004 C |
*RAM_MDDREQ :      FFFFFFFFFFFFC604 C |  RAM_MDGLOBAL :    FFFFFFFFFFFFEA04 C |
 RAM_MDMARSHINT :  FFFFFFFFFFFFC452 C | *RAM_MDMARSPALFD : FFFFFFFFFFFFAE94 C |
 RAM_MDMARSVINT :  FFFFFFFFFFFFC44C C |
*RAM_MDMARS_DRAWALL :                                      FFFFFFFFFFFFBDF4 C |
 RAM_MDOTHER :     FFFFFFFFFFFFC604 C |  RAM_MDSYSTEM :    FFFFFFFFFFFFC004 C |
 RAM_MDVIDEO :     FFFFFFFFFFFFA004 C |  RAM_MEGACD :              FFFFFD00 - |
 RAM_OBJDISPLIST : FFFFFFFFFFFFBC24 C |  RAM_OBJECTS :     FFFFFFFFFFFFB294 C |
 RAM_PALETTE :     FFFFFFFFFFFFAE14 C |  RAM_PALETTEFD :   FFFFFFFFFFFFB094 C |
 RAM_SAVEDATA :    FFFFFFFFFFFFC044 C |  RAM_SCREENMODE :  FFFFFFFFFFFFC458 C |
 RAM_SCRNBUFF :    FFFFFFFFFFFFD204 C |  RAM_SPRDRWCNTR :  FFFFFFFFFFFFBDD8 C |
 RAM_SPRDRWPZ :    FFFFFFFFFFFFA914 C |  RAM_SPRITES :     FFFFFFFFFFFFA414 C |
 RAM_SPRLINKNUM :  FFFFFFFFFFFFBDDA C |  RAM_STACK :               FFFFFD00 - |
 RAM_SYSRANDSEED : FFFFFFFFFFFFC448 C |  RAM_SYSRANDVAL :  FFFFFFFFFFFFC444 C |
*RAM_SYSTEMCODE :  FFFFFFFFFFFF0000 C | *RAM_USERCODE :    FFFFFFFFFFFF2000 C |
 RAM_VDPDMAINDX :  FFFFFFFFFFFFBDDE C |  RAM_VDPDMALIST :  FFFFFFFFFFFFB114 C |
 RAM_VDPDMAMOD :   FFFFFFFFFFFFBDE0 C | *RAM_VDPEXWRITE :  FFFFFFFFFFFFBDDC C |
 RAM_VDPREGS :     FFFFFFFFFFFFBDF6 C |  RAM_VERSCROLL :   FFFFFFFFFFFFA3C4 C |
 RAM_VIDPRNTLIST : FFFFFFFFFFFFBC54 C |  RAM_VIDPRNTVRAM : FFFFFFFFFFFFBDE2 C |
 RAM_ZCDFLAG_D :           FFFFFF00 - |  RAM_ZSNDBUFF :            FFFFFF00 - |
*RCHWIDTH :                      36 - | *RELAXED :                        0 - |
 ROM_END :                    3C030 C |  RRT :                           14 - |
 SAMPLEHEAD :                  1CA2 C |  SBEATACC :                    1C8E C |
 SBEATPTCK :                   1C90 C | *SETVRAM_MIKAMI :               440 - |
 SETVRAM_SISI :                 480 - |  SET_CHIPS :                    60C C |
 SET_CHIPS.TRK_BUFFRS :         614 C | *SHIFT :                          2 - |
 SHRD_BLK :                    492E C |  SHRD_PAT :                    4947 C |
 SIZEOF_INPUT :                  10 C |  SIZEOF_MDGLBL :   FFFFFFFFFFFFEA08 C |
 SIZEOF_MDOBJ :                  66 C |  SIZEOF_MDRAM :    FFFFFFFFFFFFD40C C |
*SIZEOF_MDSYS :    FFFFFFFFFFFFC45A C |  SIZEOF_MDVID :    FFFFFFFFFFFFBE0E C |
*SIZEOF_RAMOTHER : FFFFFFFFFFFFD204 C |  SLV :                           10 - |
 SNDLOCKZ80 :                   338 C |  SNDLOCKZ80.WAIT :              340 C |
 SNDREQ_ENTER :                 356 C |  SNDREQ_ENTER.WAIT :            376 C |
 SNDREQ_EXIT :                  386 C | *SNDREQ_SADDR :                 3AE C |
 SNDREQ_SBYTE :                 3B6 C |  SNDREQ_SCMD :                  39C C |
 SNDREQ_SLONG :                 3AA C |  SNDREQ_SWORD :                 3B2 C |
 SNDUNLOCKZ80 :                 34C C |  SOUND_INIT :                   27A C |
 SOUND_INIT.CLEANUP :           2A4 C |  SOUND_INIT.COPY :              2BA C |
 SOUND_INIT.WAIT :              28E C |  SOUND_UPDATE :                 2EC C |
 SOUND_UPDATE.COPY_BYTES :      326 C |  SOUND_UPDATE.NO_SIZE :         334 C |
 SOUND_UPDATE.NO_TASK :         336 C | *STANDBY :                        3 - |
*SYSMARS_ID :                A130EC - | *SYSMARS_REG :               A15100 - |
*SYSMCD_REG :                A12000 - | *SYSMCD_WRAM :               200000 - |
 SYSTEM_DMAENTER_RAM :         1144 C |  SYSTEM_DMAENTER_ROM :         114C C |
 SYSTEM_DMAEXIT_RAM :          1148 C |  SYSTEM_DMAEXIT_ROM :          1150 C |
*SYSTEM_GRABRAMCODE :          15C4 C |  SYSTEM_INIT :                 1080 C |
 SYSTEM_INIT.CLRINPUT :        10D8 C |  SYSTEM_INIT.WAIT :            108C C |
 SYSTEM_INPUT :                1154 C |  SYSTEM_INPUT.EXIT :           1182 C |
 SYSTEM_INPUT.ID_03 :          11A8 C |  SYSTEM_INPUT.ID_0D :          1252 C |
 SYSTEM_INPUT.INVALID :        124C C |  SYSTEM_INPUT.LIST :           1188 C |
 SYSTEM_INPUT.OLDPAD :         12CA C |  SYSTEM_INPUT.PICK_ID :        12D0 C |
 SYSTEM_INPUT.READ :           12E6 C |  SYSTEM_INPUT.STEP_1 :         12F2 C |
 SYSTEM_INPUT.STEP_2 :         12FE C |  SYSTEM_INPUT.THIS_ONE :       1168 C |
 SYSTEM_INPUT.X_NEG :          121A C |  SYSTEM_INPUT.Y_NEG :          1246 C |
*SYSTEM_RANDOM :               1300 C |  SYSTEM_RANDOM.GOOD_S :        130E C |
 SYSTEM_RENDER :               10FE C |  SYSTEM_RENDER.FORGOT_DISP :   1142 C |
 SYSTEM_RENDER.WAIT_IN :       1120 C |  SYSTEM_RENDER.WAIT_LAG :      1108 C |
 SYSTEM_SETINTS :              1468 C |  SYSTEM_SETINTS.NOHINT :       1478 C |
 SYSTEM_SETINTS.NOVINT :       1470 C | *SYSTEM_SINEWAVE :             134A C |
 SYSTEM_SINEWAVE.DONT_NEG :    1366 C | *SYSTEM_SINEWAVE_COS :         132A C |
 SYSTEM_SINEWAVE_COS.DONT_NEG :                                        1344 C |
 SYSTEM_SRAMINIT :             147A C |  SYSTEM_SRAMINIT.CLR_SRAM :    1490 C |
 SYSTEM_SRAMINIT.DONT_CLEAR :  14A0 C |  SYSTEM_SRAMLOAD :             14DA C |
*SYSTEM_SRAMLOAD.DONT_RESET :  1504 C |  SYSTEM_SRAMLOAD.LOAD :        14F8 C |
 SYSTEM_SRAMSAVE :             14A2 C | *SYSTEM_SRAMSAVE.DONT_RESET :  14CC C |
 SYSTEM_SRAMSAVE.SAVE :        14C0 C |  SYS_CTRL_1 :                A10009 - |
 SYS_CTRL_2 :                A1000B - |  SYS_CTRL_3 :                A1000D - |
 SYS_DATA_1 :                A10003 - | *SYS_DATA_2 :                A10005 - |
*SYS_DATA_3 :                A10007 - | *SYS_EXRAM :                 200000 - |
 SYS_IO :                    A10001 - |  SYS_TMSS :                  A14000 - |
 TAG_SRAMDATA :              "SAVE" - |  TBLBUFF_READ :                 653 C |
 TBLBUFF_READ.CHK_PSG :         763 C |  TBLBUFF_READ.CLRFULL :         825 C |
 TBLBUFF_READ.DO_CHIP :         6BD C |  TBLBUFF_READ.FIRST_INS :       6D3 C |
 TBLBUFF_READ.GRAB_LINK :       715 C |  TBLBUFF_READ.HAS_INDX :        699 C |
 TBLBUFF_READ.INVLDL :          74C C |  TBLBUFF_READ.KEEP_IT :         6F7 C |
 TBLBUFF_READ.L_HIPRIO :        7D7 C |  TBLBUFF_READ.NEW_CHIP :        78A C |
 TBLBUFF_READ.NEW_LINK :        7D4 C |  TBLBUFF_READ.NEW_LINK_O :      7CC C |
 TBLBUFF_READ.NEW_LINK_Z :      7C8 C |  TBLBUFF_READ.NEXTSRCH_TBL :    7C1 C |
 TBLBUFF_READ.NEXT_INDX :       68A C |  TBLBUFF_READ.NEXT_PRIO :       7AA C |
 TBLBUFF_READ.NO_INDX :         6B5 C |  TBLBUFF_READ.PASS_2 :          7A9 C |
 TBLBUFF_READ.PICK_TBL :        7FA C |  TBLBUFF_READ.REFILL :          787 C |
 TBLBUFF_READ.REROLL :          754 C |  TBLBUFF_READ.RESET_LINK :      814 C |
 TBLBUFF_READ.RNOT_PSG :        785 C |  TBLBUFF_READ.SET_ASFULL :      7F7 C |
 TBLBUFF_READ.SINGL_FREE :      7E5 C |  TBLBUFF_READ.SINGL_LINK :      77A C |
 TBLBUFF_READ.SRCH_FREE :       799 C |  TBLBUFF_READ.SRCH_LINK :       733 C |
 TBLBUFF_READ.SRCH_LLOOP :      73D C |  TBLBUFF_READ.TRACK_CONT :      673 C |
 TBLBUFF_READ.VALID :           688 C |  TBLFM :                       1A72 C |
 TBLFM3 :                      1AD2 C |  TBLFM6 :                      1AEA C |
 TBLLIST :                     1A00 C |  TBLPCM :                      1B04 C |
 TBLPSG :                      1A10 C |  TBLPSGN :                     1A5A C |
 TBLPWM :                      1BC6 C |  TH :                      20000000 - |
 TICKCNT :                     1C72 C |  TICKFLAG :                    1C71 C |
 TICKSPSET :                   1C70 C |  TIME :               "11:49:22 PM" - |
*TIMERCTL :                      30 - | *TMR :                           2C - |
 TRACK_OUT :                    5C7 C |  TRACK_OUT.INDX_DEL :           5D5 C |
 TRACK_OUT.NOTHIN :             603 C |  TRANSFERROM :                  FBA C |
 TRANSFERROM.DOUBLE :           FDD C |  TRANSFERROM.FROM_RAM :        1001 C |
 TRANSFERROM.TRANSFER :        101F C |  TRANSFERROM.WAIT :            1018 C |
 TRANSFERROM.X68KLAST :        1058 C |  TRANSFERROM.X68KLOOP :        1044 C |
 TRANSFERROM.X68KLPWT :        1066 C |  TRANSFERROM.X68KNOCARRY :      FFB C |
 TRANSFERROM.X68KPWTLP :       1068 C |  TRKBLKS_0 :                   16AA C |
 TRKBLKS_1 :                   16B2 C |  TRKBLKS_2 :                   16BA C |
 TRKBLKS_3 :                   16C2 C |  TRKBUFF_0 :                   16CA C |
 TRKBUFF_1 :                   170A C |  TRKBUFF_2 :                   174A C |
 TRKBUFF_3 :                   178A C |  TRKCACH_0 :                   1F00 C |
 TRKCACH_1 :                   1F20 C |  TRKCACH_2 :                   1F40 C |
 TRKCACH_3 :                   1F60 C |  TRKCHNLS :                    1E00 C |
 TRKHDRS_0 :                   162A C |  TRKHDRS_1 :                   164A C |
 TRKHDRS_2 :                   166A C |  TRKHDRS_3 :                   168A C |
 TRKINFOCACH :                 1CA2 C |  TRK_BANKBLK :                   17 - |
 TRK_BANKHEADS :                 16 - |  TRK_BANKINS :                   15 - |
 TRK_BLOCKS :                     4 - |  TRK_CACH :                       8 - |
 TRK_CACHHALF :                  10 - |  TRK_CHNINDX :                   26 - |
 TRK_CURRBLK :                   13 - |  TRK_MAXCHNL :                   18 - |
 TRK_PATT :                       6 - |  TRK_PRIORITY :                  14 - |
 TRK_READ :                       A - |  TRK_ROMBLKS :                   23 - |
 TRK_ROMINST :                   20 - |  TRK_ROMPATT :                   1D - |
 TRK_ROMPATTREAD :               1A - |  TRK_ROWPAUSE :                  11 - |
 TRK_ROWS :                       C - |  TRK_SEQID :                      1 - |
 TRK_SETBLK :                     2 - |  TRK_STATUS :                     0 - |
 TRK_TICKSET :                    3 - |  TRK_TICKTMR :                   12 - |
 TRK_VOLFDTARGET :               19 - |  TRK_VOLMASTER :                  E - |
*TRUE :                           1 - | *TVMODE :                         0 - |
 UPD_TRACK :                    222 C |  UPD_TRACK.CHNL_FREE :          33C C |
 UPD_TRACK.CONT_CHNL :          347 C |  UPD_TRACK.DECROW :             2EB C |
 UPD_TRACK.DECROW_E :           2EE C |  UPD_TRACK.EFFECT_FILL :        517 C |
 UPD_TRACK.EFF_A :              3C1 C |  UPD_TRACK.EFF_B :              3D2 C |
 UPD_TRACK.EFF_C :              3F0 C |  UPD_TRACK.EXIT :               2DF C |
 UPD_TRACK.FADE_OUT :           26C C |  UPD_TRACK.FIRST_BLK :          447 C |
 UPD_TRACK.FIRST_FILL :         51E C |  UPD_TRACK.FIRST_HEAD :         48F C |
 UPD_TRACK.GRAB_RHEAD :         5B4 C |  UPD_TRACK.HAS_NOTE :           2F6 C |
 UPD_TRACK.INC_CPATT :          3F3 C |  UPD_TRACK.KEEP_BLK :           465 C |
 UPD_TRACK.KEEP_IT :            4B5 C |  UPD_TRACK.KEEP_VOL :           282 C |
 UPD_TRACK.NEXT_CHNL :          321 C |  UPD_TRACK.NEXT_NOTE :          2CF C |
 UPD_TRACK.NO_EFF :             38D C |  UPD_TRACK.NO_GLBL :            55E C |
 UPD_TRACK.NO_INS :             36F C |  UPD_TRACK.NO_NOTE :            364 C |
 UPD_TRACK.NO_VOL :             37A C |  UPD_TRACK.OLD_TYPE :           358 C |
 UPD_TRACK.RAN_OUT :            401 C |  UPD_TRACK.READ_TRACK :         23F C |
 UPD_TRACK.ROW_ACTIVE :         2C8 C |  UPD_TRACK.SET_TRACK :          42B C |
 UPD_TRACK.SFXMD :              28C C |  UPD_TRACK.SRCH_NEW :           31C C |
 UPD_TRACK.TOO_MUCH :           278 C |  UPD_TRACK.TRACK_END :          504 C |
 UPD_TRACK.TRK_BUFFRS :         22A C |  VARNULLVRAM :                  7FF - |
 VARPRINTPAL :                    3 - |  VARPRINTVRAM :                 580 - |
*VBLK :                          80 - | *VDPSTS :                         A - |
 VDP_CTRL :                  C00004 - |  VDP_DATA :                  C00000 - |
*VERSION :                     142F - |  VIDEO_CLEAR :                  56C C |
*VIDEO_CLEARSCREEN :            56C C |  VIDEO_CLEARSCREEN.PNEXT :      5DE C |
 VIDEO_CLEARSCREEN.SNEXT :      5CC C |  VIDEO_CLEARSCREEN.XNEXT :      5B0 C |
 VIDEO_CLEARSCREEN.YNEXT :      5BE C | *VIDEO_COPY :                   8E4 C |
 VIDEO_COPY.DMAW :              8F8 C |  VIDEO_COPY.DMA_W :             950 C |
*VIDEO_DMABLAST :               AB0 C |  VIDEO_DMABLAST.END :           AF4 C |
 VIDEO_DMABLAST.EXIT :          B02 C |  VIDEO_DMABLAST.NEXT :          AD8 C |
 VIDEO_DMAMKENTRY :             7C0 C |  VIDEO_DMAMKENTRY.MK_SET :      7FC C |
 VIDEO_DMAMKENTRY.NORMAL :      7F6 C |  VIDEO_DMAMKENTRY.RAN_OUT :     86C C |
 VIDEO_DOPALFADE :              67A C |  VIDEO_DOPALFADE.ACTIVE :       696 C |
 VIDEO_DOPALFADE.FADE_DONE :    69E C |  VIDEO_DOPALFADE.FADE_IN :      6A0 C |
 VIDEO_DOPALFADE.FADE_LIST :    698 C |  VIDEO_DOPALFADE.FADE_OUT :     742 C |
 VIDEO_DOPALFADE.NO_BLU :       71A C |  VIDEO_DOPALFADE.NO_BLU_O :     79C C |
 VIDEO_DOPALFADE.NO_FNSH :      732 C |  VIDEO_DOPALFADE.NO_FNSH_O :    7B0 C |
 VIDEO_DOPALFADE.NO_GRN :       6FA C |  VIDEO_DOPALFADE.NO_GRN_O :     784 C |
 VIDEO_DOPALFADE.NO_MOVE :      740 C |  VIDEO_DOPALFADE.NO_MOVE_O :    7BE C |
 VIDEO_DOPALFADE.NO_RED :       6DA C |  VIDEO_DOPALFADE.NO_RED_O :     76C C |
 VIDEO_DOPALFADE.NXT_PAL :      6B8 C |  VIDEO_DOPALFADE.NXT_PAL_O :    754 C |
 VIDEO_FADEIN :                 5E8 C | *VIDEO_FADEOUT :                60E C |
 VIDEO_FADEPAL :                64C C | *VIDEO_FADEPAL_MARS :           B08 C |
 VIDEO_FILL :                   86E C |  VIDEO_FILL.DMAW :              882 C |
 VIDEO_FILL.DMA_W :             8CC C |  VIDEO_INIT :                   4EE C |
 VIDEO_INIT.CLRRAM :            4FA C |  VIDEO_INIT.LOOP :              512 C |
 VIDEO_LOADART :                968 C | *VIDEO_LOADART.FROM_RAM :       9D2 C |
 VIDEO_LOADART.MK_SET :         9A4 C |  VIDEO_LOADART.NORMAL :         99E C |
 VIDEO_LOADART.SHARED_SETUP :   9D4 C |  VIDEO_LOADMAP :                B0C C |
 VIDEO_LOADMAP.CONT :           B32 C |  VIDEO_LOADMAP.NODBLE :         B50 C |
 VIDEO_LOADMAP.NONULL :         B30 C |  VIDEO_LOADMAP.XLOOP :          B22 C |
 VIDEO_LOADMAP.YLOOP :          B18 C |  VIDEO_LOADPAL :                656 C |
*VIDEO_MARSGFXMODE :            B04 C | *VIDEO_MARSPALFADE :            B0A C |
*VIDEO_MARS_SYNCFRAME :         B06 C |  VIDEO_PRINT :                  B8C C |
 VIDEO_PRINT.DONIBL :           CA8 C |  VIDEO_PRINT.EXIT :             C18 C |
 VIDEO_PRINT.ISBYTE :           BE2 C |  VIDEO_PRINT.ISLONG :           C06 C |
 VIDEO_PRINT.ISWORD :           BF4 C |  VIDEO_PRINT.LNGLOOP :          C98 C |
 VIDEO_PRINT.LOOP :             BA4 C |  VIDEO_PRINT.LOWR :             CB8 C |
 VIDEO_PRINT.NEWJUMP :          B9E C |  VIDEO_PRINT.NEXT :             BDE C |
 VIDEO_PRINT.NEXTV :            C22 C |  VIDEO_PRINT.NOTHING :          CC4 C |
 VIDEO_PRINT.PUTTEXT :          BD0 C |  VIDEO_PRINT.VBYTE :            C54 C |
 VIDEO_PRINT.VLONG :            CA0 C |  VIDEO_PRINT.VWORD :            C76 C |
 VIDEO_PRINTINIT :              B62 C | *VIDEO_PRINTPAL :               B7C C |
 VIDEO_RENDER :                 A1C C |  VIDEO_RUNFADE :                644 C |
 VIDEO_UPDATE :                 51A C | *VIDEO_UPDATE.EXIT :            536 C |
 VIDEO_UPDATE.LOOP :            52A C |  VIDEO_WAITFADE :               634 C |
 VIDMD_PAL :                    65A C |  VIDMD_PAL.LOOP :               672 C |
 VID_PICKLAYER :                CCA C |  VID_PICKLAYER.GOLYR :          D14 C |
 VID_PICKLAYER.NOWD :           CFE C |  VID_PICKLAYER.PLAWND :         CF0 C |
 VID_PICKLAYER.THISSZ :         D34 C |  VID_PICKLAYER.THISSZJ :        D5C C |
*VINTCLR :                       16 - | *VINTENBL :                      20 - |
 VINT_DEFAULT :                15AC C | *VIRQ_ON :                        8 - |
*VRESINTCLR :                    14 - |  WAVE_FLAGS :                  1C8A C |
 WAVE_LEN :                    1C82 C |  WAVE_LOOP :                   1C85 C |
 WAVE_PITCH :                  1C88 C |  WAVE_START :                  1C7F C |
 WAVFREQ_CDPCM :               1404 C |  WAVFREQ_LIST :                13A4 C |
 X68KSRCLSB :                  1C8C C |  X68KSRCMID :                  1C8D C |
*YM_CTRL_1 :                 A04000 - | *YM_CTRL_2 :                 A04002 - |
*YM_DATA_1 :                 A04001 - | *YM_DATA_2 :                 A04003 - |
*Z80SYNTAX :                      0 - |  Z80_BUS :                   A11100 - |
 Z80_CODE :                    1626 C |  Z80_CODE_END :                35A6 C |
 Z80_CPU :                   A00000 - |  Z80_INIT :                      50 C |
 Z80_RESET :                 A11200 - | *ZBANK :                       6000 - |
 ZDRVFIFO :                      40 - |  ZDRVFWRT :                      2E - |
*ZDRVMARSBLK :                   37 - | *ZDRVMCDBLK :                    36 - |
 ZDRVRAMLEN :                    30 - |  ZDRVRAMSRC :                    35 - |
 ZDRVROMBLK :                    2F - | *ZMARS_SEND :                   F2C C |
*ZOPCEX :                         8 - |  ZOPCEXX :                       D9 - |
*ZOPCNOP :                        0 - |  ZOPCPUSHAF :                    F5 - |
 ZOPCRET :                       C9 - |  ZPSG_CTRL :                   7F11 - |
 ZSET_TESTME :                    0 - |  ZYM_CTRL_1 :                  4000 - |
 ZYM_CTRL_2 :                  4002 - |  ZYM_DATA_1 :                  4001 - |
 ZYM_DATA_2 :                  4003 - | *_CCR :                    FFFFFE92 - |
*_DMACHANNEL0 :            FFFFFF8C - | *_DMACHANNEL1 :            FFFFFF9C - |
*_DMACOUNT0 :              FFFFFF88 - | *_DMACOUNT1 :              FFFFFF98 - |
*_DMADEST0 :               FFFFFF84 - | *_DMADEST1 :               FFFFFF94 - |
*_DMAOPERATION :           FFFFFFB0 - | *_DMAREQACK0 :             FFFFFFB4 - |
*_DMAREQACK1 :             FFFFFFB8 - | *_DMASOURCE0 :             FFFFFF80 - |
*_DMASOURCE1 :             FFFFFF90 - | *_DMAVECTORE0 :            FFFFFFA4 - |
*_DMAVECTORE1 :            FFFFFFAC - | *_DMAVECTORN0 :            FFFFFFA0 - |
*_DMAVECTORN1 :            FFFFFFA8 - | *_FRAMEBUFFER :            24000000 - |
*_FRC_H :                         2 - | *_FRC_L :                         3 - |
*_FRT :                    FFFFFE10 - | *_HRH :                    FFFFFF10 - |
*_HRL :                    FFFFFF14 - | *_HRL32 :                  FFFFFF04 - |
*_JR :                     FFFFFF00 - | *_OCR_H :                         4 - |
*_OCR_L :                         5 - | *_OVERWRITE :              24020000 - |
*_PALETTE :                20004200 - | *_SERIAL :                 FFFFFE00 - |
*_SYSREG :                 20004000 - | *_TCR :                           6 - |
*_TCSR :                          1 - | *_TIER :                          0 - |
*_TOCR :                          7 - | *_VDPREG :                 20004100 - |

   1077 symbols
    295 unused symbols

 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 4 - 03/05/2024 11:49:23 PM


  Defined Macros:
  ---------------

DATA_BKEND                            | DATA_BKSET                           
ENDSTRCT                              | ERREPORT                             
GEMAHEAD                              | GEMATRK                              
GINSDAC                               | GINSFM                               
GINSFM3                               | GINSNULL                             
GINSPCM                               | GINSPSG                              
GINSPSGN                              | GINSPWM                              
GSMPLDATA                             | ISO_FILE                             
ISO_SETFS                             | REPORT                               
ROMPAD                                | SCREEN_CODE                          
SDRAM_BKEND                           | SDRAM_BKSET                          
SET_DBANKS                            | STRCT                                
VDP_SHOWME                            |

     25 macros

 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 5 - 03/05/2024 11:49:23 PM


  Defined Functions:
  ------------------

NOTZ80                                | MAP_SIZE                             
CELL_VRAM                             | LOCATE                               

 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 6 - 03/05/2024 11:49:23 PM


  Code Pages:
  ----------

STANDARD (0 changed characters)

1 code page

0.15 seconds assembly time

  11316 lines source file
  11901 lines incl. macro expansions
      5 passes
      0 errors
      0 warnings
