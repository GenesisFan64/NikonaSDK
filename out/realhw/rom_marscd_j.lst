 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 1 - 03/26/2024 04:57:42 AM


       1/       0 :                     ; ===========================================================================
       2/       0 :                     ; NIKONA MD 16-BIT/32-BIT SDK
       3/       0 :                     ; by GenesisFan64 2023-2024
       4/       0 :                     ;
       5/       0 :                     ; For developing games on the Genesis-family of systems:
       6/       0 :                     ; Genesis only, Sega CD, Sega 32X, Sega CD32X and Sega Pico
       7/       0 :                     ;
       8/       0 :                     ; Assemble with a modified AS Macro Assembler by flamewing
       9/       0 :                     ; and a custom version of p2bin:
      10/       0 :                     ;
      11/       0 :                     ; asl main.asm -i "." -olist ROM_list.lst -q -xx -A -L -D (flags=value)
      12/       0 :                     ; p2bin -p=00 main.p ROM.bin
      13/       0 :                     ;
      14/       0 :                     ; ASSEMBLER FLAGS:
      15/       0 :                     ; MCD,MARS,MARSCD,PICO,CDREGION,EMU
      16/       0 :                     ;
      17/       0 :                     ; * System targets *
      18/       0 :                     ;    MCD - Sega CD
      19/       0 :                     ;   MARS - Sega 32X
      20/       0 :                     ; MARSCD - Sega CD32X
      21/       0 :                     ;   PICO - Sega Pico
      22/       0 :                     ; The code builds to stock Genesis by default.
      23/       0 :                     ;
      24/       0 :                     ; ONLY enable ONE TARGET at the time (as 1)
      25/       0 :                     ; and set the others to 0
      26/       0 :                     ;
      27/       0 :                     ; CDREGION - SEGACD/CD32X ONLY: Set ROM region
      28/       0 :                     ;            0=Japan 1=USA 2=Europe
      29/       0 :                     ;      EMU - EMULATOR PATCHES TO ROMS
      30/       0 :                     ;            0=Runs on hardware only, 1=Run on emulation
      31/       0 :                     ;
      32/       0 :                     ; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣴⣶⡿⠿⠿⠿⣶⣦⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀
      33/       0 :                     ; ⠀⠀⠀⠀⠀⠀⢀⣠⣶⢟⣿⠟⠁⢰⢋⣽⡆⠈⠙⣿⡿⣶⣄⡀⠀⠀⠀⠀⠀⠀
      34/       0 :                     ; ⠀⠀⠀⠀⣠⣴⠟⠋⢠⣾⠋⠀⣀⠘⠿⠿⠃⣀⠀⠈⣿⡄⠙⠻⣦⣄⠀⠀⠀⠀
      35/       0 :                     ; ⠀⢀⣴⡿⠋⠁⠀⢀⣼⠏⠺⠛⠛⠻⠂⠐⠟⠛⠛⠗⠘⣷⡀⠀⠈⠙⢿⣦⡀⠀
      36/       0 :                     ; ⣴⡟⢁⣀⣠⣤⡾⢿⡟⠀⠀⠀⠘⢷⠾⠷⡾⠃⠀⠀⠀⢻⡿⢷⣤⣄⣀⡈⢻⣦
      37/       0 :                     ; ⠙⠛⠛⠋⠉⠁⠀⢸⡇⠀⠀⢠⣄⠀⠀⠀⠀⣠⡄⠀⠀⢸⡇⠀⠈⠉⠙⠛⠛⠋
      38/       0 :                     ; ⠀⠀⠀⠀⠀⠀⠀⢸⡇⢾⣦⣀⣹⡧⠀⠀⢼⣏⣀⣴⡷⢸⡇⠀⠀⠀⠀⠀⠀⠀
      39/       0 :                     ; ⠀⠀⠀⠀⠀⠀⠀⠸⣧⡀⠈⠛⠛⠁⠀⠀⠈⠛⠛⠁⢀⣼⠇⠀⠀⠀⠀⠀⠀⠀
      40/       0 :                     ; ⠀⠀⠀⠀⠀⠀⠀⢀⣘⣿⣶⣤⣀⣀⣀⣀⣀⣀⣤⣶⣿⣃⠀⠀⠀⠀⠀⠀⠀⠀
      41/       0 :                     ; ⠀⠀⠀⠀⠀⣠⡶⠟⠋⢉⣀⣽⠿⠉⠉⠉⠹⢿⣍⣈⠉⠛⠷⣦⡀⠀⠀⠀⠀⠀
      42/       0 :                     ; ⠀⠀⠀⠀⢾⣯⣤⣴⡾⠟⠋⠁⠀⠀⠀⠀⠀⠀⠉⠛⠷⣶⣤⣬⣿⠀⠀⠀⠀⠀
      43/       0 :                     ; ⠀⠀⠀⠀⠀⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠁⠀⠀⠀⠀⠀
      44/       0 :                     ; ===========================================================================
      45/       0 :                     
      46/       0 :                     ; ====================================================================
      47/       0 :                     ; ----------------------------------------------------------------
      48/       0 :                     ; USER SETTINGS
      49/       0 :                     ; ----------------------------------------------------------------
      50/       0 :                     
      51/       0 : =$1                  SET_INITMODE	equ 1		; Starting screen mode number
      52/       0 :                     
      53/       0 :                     ; --------------------------------------------------------
      54/       0 :                     ; 68000 RAM SIZES (SegaCD: MAIN-CPU)
      55/       0 :                     ;
      56/       0 :                     ; MAX_SysCode, MAX_UserCode are only
      57/       0 :                     ; used in Sega CD, 32X and CD32X.
      58/       0 :                     ;
      59/       0 :                     ; Check system/ram.asm for more details.
      60/       0 :                     ; --------------------------------------------------------
 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 2 - 03/26/2024 04:57:42 AM


      61/       0 :                     
      62/       0 : =$2000               MAX_SysCode	equ $2000	; Common routines ** CD/32X/CD32X ONLY **
      63/       0 : =$8000               MAX_UserCode	equ $8000	; Current screen code and small data ** CD/32X/CD32X ONLY **
      64/       0 : =$1800               MAX_ScrnBuff	equ $1800	; Current screen's RAM buffer
      65/       0 : =$2000               MAX_MdVideo	equ $2000	; Video cache'd RAM for visuals, registers, etc.
      66/       0 : =$600                MAX_MdSystem	equ $0600	; Internal lib stuff and a safe copy of save data for reading/writing
      67/       0 : =$E00                MAX_MdOther	equ $0E00	; Add-on stuff
      68/       0 :                     
      69/       0 :                     ; ====================================================================
      70/       0 :                     
      71/       0 :                     		org 0
      72/       0 :                     		cpu 		68000		; Starting CPU is 68000
      73/       0 :                     		padding		off		; Dont pad dc.b
      74/       0 :                     		listing 	purecode	; Want listing file
      75/       0 :                     		supmode 	on 		; Supervisor mode (68000)
      76/       0 :                     		dottedstructs	off
      77/       0 :                     		page 		0
      78/       0 :                     
      79/       0 :                     ; ====================================================================
      80/       0 :                     ; ----------------------------------------------------------------
      81/       0 :                     ; Includes
      82/       0 :                     ; ----------------------------------------------------------------
      83/       0 :                     
      84/       0 :                     		include	"macros.asm"		; Assembler macros
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; -------------------------------------------------------------------
(1)    3/       0 :                     ; MACROS Section
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; *** THIS MUST BE INCLUDED AT START OF THE CODE ***
(1)    6/       0 :                     ; -------------------------------------------------------------------
(1)    7/       0 :                     
(1)    8/       0 :                     ; ====================================================================
(1)    9/       0 :                     ; ------------------------------------------------------------
(1)   10/       0 :                     ; AS Functions
(1)   11/       0 :                     ; ------------------------------------------------------------
(1)   12/       0 :                     
(1)   13/       0 :                     ; vdp_ctrl command
(1)   14/       0 :                     vdp_addr	function a,(((a&$3FFF)|$4000)<<16)|(a>>14)&%11		; .l
(1)   15/       0 :                     vdp_addr_l	function a,((a&$3FFF)|$4000)				; .w
(1)   16/       0 :                     vdp_addr_r	function a,(a>>14)&%11					; .w
(1)   17/       0 :                     cell_vram	function a,(a<<5)					; .w VRAM position in CELLs 8x8
(1)   18/       0 :                     cell_size	function a,(a>>5)					; .w Graphics size in CELLs 8x8
(1)   19/       0 :                     map_size	function l,r,(((l-1)/8)<<16&$FFFF0000|((r-1)/8)&$FFFF)	; .l Full W/H sizes to CELLs 8x8
(1)   20/       0 :                     
(1)   21/       0 :                     ; Code-specific functions
(1)   22/       0 :                     ; locate: $00llxxyy
(1)   23/       0 :                     locate		function a,b,c,(b&$FF)|(a<<8&$FF00)|(c<<16&$FF0000)	; .l CUSTOM screen locator: X,Y,layer
(1)   24/       0 :                     
(1)   25/       0 :                     ; ====================================================================
(1)   26/       0 :                     ; ------------------------------------------------------------
(1)   27/       0 :                     ; Macros
(1)   28/       0 :                     ; ------------------------------------------------------------
(1)   29/       0 :                     
(1)   30/       0 :                     ; --------------------------------------------
(1)   31/       0 :                     ; Custom struct function
(1)   32/       0 :                     ;
(1)   33/       0 :                     ; (Doesn't work on Z80)
(1)   34/       0 :                     ; --------------------------------------------
(1)   35/       0 :                     
(1)   36/       0 :                     strct		macro thisinput			; Reserve memory address
(1)   37/       0 :                     GLBL_LASTPC	set *
(1)   38/       0 :                     		dephase
(1)   39/       0 :                     		phase thisinput
(1)   40/       0 :                     GLBL_LASTORG	set *
(1)   41/       0 :                     		endm
(1)   42/       0 :                     
(1)   43/       0 :                     ; --------------------------------------------
(1)   44/       0 :                     ; Finish struct
(1)   45/       0 :                     ; --------------------------------------------
(1)   46/       0 :                     
(1)   47/       0 :                     endstrct	macro				; Then finish the custom struct.
(1)   48/       0 :                     		org GLBL_LASTORG
(1)   49/       0 :                     		phase GLBL_LASTPC
(1)   50/       0 :                     		endm
(1)   51/       0 :                     
(1)   52/       0 :                     ; --------------------------------------------
(1)   53/       0 :                     ; Report memory usage
(1)   54/       0 :                     ; --------------------------------------------
(1)   55/       0 :                     
(1)   56/       0 :                     report		macro text,dis,dat
(1)   57/       0 :                     	if MOMPASS == 2
(1)   58/       0 :                     		if dat == -1
(1)   59/       0 :                     			message text+": \{(dis)&$FFFFFF}"
(1)   60/       0 :                     		else
(1)   61/       0 :                     			if dis > dat
(1)   62/       0 :                     				warning "RAN OUT OF "+text+" SPACE (\{(dis)&$FFFFFF} of \{(dat)&$FFFFFF})"
(1)   63/       0 :                     			else
(1)   64/       0 :                     				message text+" uses \{(dis)&$FFFFFF} of \{(dat)&$FFFFFF}"
(1)   65/       0 :                     			endif
(1)   66/       0 :                     		endif
(1)   67/       0 :                     	endif
(1)   68/       0 :                     		endm
(1)   69/       0 :                     
(1)   70/       0 :                     ; --------------------------------------------
(1)   71/       0 :                     ; Same as report but only show on error
(1)   72/       0 :                     ; --------------------------------------------
(1)   73/       0 :                     
(1)   74/       0 :                     erreport	macro text,dis,dat
(1)   75/       0 :                     	if MOMPASS == 2
(1)   76/       0 :                     		if dat == -1
(1)   77/       0 :                     			message text+": \{(dis)&$FFFFFF}"
(1)   78/       0 :                     		else
(1)   79/       0 :                     			if dis > dat
(1)   80/       0 :                     				error "RAN OUT OF "+text+" (\{(dis)&$FFFFFF} of \{(dat)&$FFFFFF})"
(1)   81/       0 :                     ; 			else
(1)   82/       0 :                     ; 				message text+" uses \{(dis)&$FFFFFF} of \{(dat)&$FFFFFF}"
(1)   83/       0 :                     			endif
(1)   84/       0 :                     		endif
(1)   85/       0 :                     	endif
(1)   86/       0 :                     		endm
(1)   87/       0 :                     
(1)   88/       0 :                     ; --------------------------------------------
(1)   89/       0 :                     ; ZERO Fill padding
(1)   90/       0 :                     ; --------------------------------------------
(1)   91/       0 :                     
(1)   92/       0 :                     rompad		macro address			; Zero fill
(1)   93/       0 :                     diff := address - *
(1)   94/       0 :                     		if diff < 0
(1)   95/       0 :                     			error "too much stuff before org $\{address} ($\{(-diff)} bytes)"
(1)   96/       0 :                     		else
(1)   97/       0 :                     			while diff > 1024
(1)   98/       0 :                     				; AS can only generate 1 kb of code on a single line
(1)   99/       0 :                     				dc.b [1024]0
(1)  100/       0 :                     diff := diff - 1024
(1)  101/       0 :                     			endm
(1)  102/       0 :                     			dc.b [diff]0
(1)  103/       0 :                     		endif
(1)  104/       0 :                     	endm
(1)  105/       0 :                     
(1)  106/       0 :                     ; ====================================================================
(1)  107/       0 :                     ; ------------------------------------------------------------
(1)  108/       0 :                     ; ISO filesystem macros
(1)  109/       0 :                     ; ------------------------------------------------------------
(1)  110/       0 :                     
(1)  111/       0 :                     ; Set a ISO file
(1)  112/       0 :                     ; NOTE: a valid ISO head is required from $8000 to $B7FF
(1)  113/       0 :                     ; Info data is incorrect but it will load just fine.
(1)  114/       0 :                     
(1)  115/       0 :                     iso_setfs	macro type,start,end
(1)  116/       0 :                     .fstrt:
(1)  117/       0 :                     		dc.b .fend-.fstrt				; Block size
(1)  118/       0 :                     		dc.b 0						; Zero
(1)  119/       0 :                     		dc.b (start>>11&$FF),(start>>19&$FF)		; Start sector, little endian
(1)  120/       0 :                     		dc.b (start>>27&$FF),(start>>35&$FF)
(1)  121/       0 :                     		dc.l start>>11					; Start sector, big endian
(1)  122/       0 :                     		dc.b ((end-start)&$FF),((end-start)>>8&$FF)	; Filesize, little endian
(1)  123/       0 :                     		dc.b ((end-start)>>16&$FF),((end-start)>>24&$FF)
(1)  124/       0 :                     		dc.l end-start					; Filesize, big endian
(1)  125/       0 :                     		dc.b (2024-1900)+1				; Year
(1)  126/       0 :                     		dc.b 0,0,0,0,0,0				; **never done**
(1)  127/       0 :                     		dc.b 2						; File flags
(1)  128/       0 :                     		dc.b 0,0
(1)  129/       0 :                     		dc.b 1,0					; Volume sequence number, little
(1)  130/       0 :                     		dc.b 0,1					; Volume sequence number, big
(1)  131/       0 :                     		dc.b 1,type
(1)  132/       0 :                     .fend:
(1)  133/       0 :                     		endm
(1)  134/       0 :                     
(1)  135/       0 :                     iso_file	macro filename,start,end
(1)  136/       0 :                     .fstrt:		dc.b .fend-.fstrt				; Block size
(1)  137/       0 :                     		dc.b 0						; zero
(1)  138/       0 :                     		dc.b (start>>11&$FF),(start>>19&$FF)		; Start sector, little
(1)  139/       0 :                     		dc.b (start>>27&$FF),(start>>35&$FF)
(1)  140/       0 :                     		dc.l start>>11					; Start sector, big
(1)  141/       0 :                     		dc.b ((end-start)&$FF),((end-start)>>8&$FF)	; Filesize, little
(1)  142/       0 :                     		dc.b ((end-start)>>16&$FF),((end-start)>>24&$FF)
(1)  143/       0 :                     		dc.l end-start					; Filesize, big
(1)  144/       0 :                     		dc.b (2024-1900)+1				; Year
(1)  145/       0 :                     		dc.b 0,0,0,0,0,0				; TODO
(1)  146/       0 :                     		dc.b 0						; File flags
(1)  147/       0 :                     		dc.b 0,0
(1)  148/       0 :                     		dc.b 1,0					; Volume sequence number, little
(1)  149/       0 :                     		dc.b 0,1					; Volume sequence number, big
(1)  150/       0 :                     		dc.b .flend-.flen
(1)  151/       0 :                     .flen:		dc.b filename,";1"
(1)  152/       0 :                     .flend:		dc.b 0
(1)  153/       0 :                     .fend:
(1)  154/       0 :                     		endm
(1)  155/       0 :                     
(1)  156/       0 :                     ; ====================================================================
(1)  157/       0 :                     ; ------------------------------------------------------------
(1)  158/       0 :                     ; Nikona macros
(1)  159/       0 :                     ; ------------------------------------------------------------
(1)  160/       0 :                     
(1)  161/       0 :                     ; --------------------------------------------
(1)  162/       0 :                     ; Screen mode code
(1)  163/       0 :                     ; --------------------------------------------
(1)  164/       0 :                     
(1)  165/       0 :                     screen_code macro lblstart,lblend,path
(1)  166/       0 :                     	if MCD|MARSCD
(1)  167/       0 :                     		align $800		; SCD/CD32X sector align
(1)  168/       0 :                     	elseif MARS
(1)  169/       0 :                     		align 4
(1)  170/       0 :                     		phase $880000+*		; 32X ROM-area
(1)  171/       0 :                     	endif
(1)  172/       0 :                     lblstart label *
(1)  173/       0 :                     	if MARS
(1)  174/       0 :                     		dephase
(1)  175/       0 :                     	endif
(1)  176/       0 :                     
(1)  177/       0 :                     mctopscrn:
(1)  178/       0 :                     	if MARS|MCD|MARSCD
(1)  179/       0 :                     		phase RAM_UserCode	; SCD/32X/CD32X relocate to RAM area
(1)  180/       0 :                     	endif
(1)  181/       0 :                     mcscrn_s:
(1)  182/       0 :                     	include path;"game/screen_0/code.asm"
(1)  183/       0 :                     mcscrn_e:
(1)  184/       0 :                     	if MARS
(1)  185/       0 :                     		dephase	; dephase RAM section
(1)  186/       0 :                     		dephase ; dephase $880000+ section
(1)  187/       0 :                     	elseif MCD|MARSCD
(1)  188/       0 :                     		dephase
(1)  189/       0 :                     		phase mctopscrn+(mcscrn_e-RAM_UserCode)
(1)  190/       0 :                     		align $800
(1)  191/       0 :                     	endif
(1)  192/       0 :                     ; Md_Screen00_e:
(1)  193/       0 :                     lblend label *
(1)  194/       0 :                     	if MCD|MARS|MARSCD
(1)  195/       0 :                     		report "SCREEN MODE: lblstart",mcscrn_e-RAM_UserCode,MAX_UserCode
(1)  196/       0 :                     	else
(1)  197/       0 :                     		if lblend-lblstart > MAX_UserCode
(1)  198/       0 :                     			warning "THIS SCREEN CODE IS TOO LARGE FOR SCD, 32X and CD32X"
(1)  199/       0 :                     		endif
(1)  200/       0 :                     	endif
(1)  201/       0 :                     	endm
(1)  202/       0 :                     
(1)  203/       0 :                     ; --------------------------------------------
(1)  204/       0 :                     ; 68K data bank
(1)  205/       0 :                     ; --------------------------------------------
(1)  206/       0 :                     
(1)  207/       0 :                     data_bkset macro startlbl,except
(1)  208/       0 :                     	if MCD|MARSCD
(1)  209/       0 :                     		align $800
(1)  210/       0 :                     	elseif MARS
(1)  211/       0 :                     		align 4
(1)  212/       0 :                     		if except==-1
(1)  213/       0 :                     			phase $900000+*	; First 32X data bank
(1)  214/       0 :                     		else
(1)  215/       0 :                     			phase $900000
(1)  216/       0 :                     		endif
(1)  217/       0 :                     	endif
(1)  218/       0 :                     ; MCD_DBANK0:
(1)  219/       0 :                     startlbl label *
(1)  220/       0 :                     	if MCD|MARSCD
(1)  221/       0 :                     		phase sysmcd_wram
(1)  222/       0 :                     	elseif MARS
(1)  223/       0 :                     ; 		dephase
(1)  224/       0 :                     	endif
(1)  225/       0 :                     	endm
(1)  226/       0 :                     
(1)  227/       0 :                     data_bkend macro startlbl,endlbl,thissize
(1)  228/       0 :                     	if MARS
(1)  229/       0 :                     		dephase
(1)  230/       0 :                     		report "68K DATA BANK: startlbl ($900000)",thissize,$100000
(1)  231/       0 :                     	elseif MCD|MARSCD
(1)  232/       0 :                     		dephase
(1)  233/       0 :                     		align $800
(1)  234/       0 :                     endlbl label *	; <-- CD/CD32X ONLY
(1)  235/       0 :                     		report "68K DATA BANK: startlbl (WORD-RAM)",thissize,$40000
(1)  236/       0 :                     	endif
(1)  237/       0 :                     
(1)  238/       0 :                     	if MARS
(1)  239/       0 :                     		if thissize > $100000
(1)  240/       0 :                     			warning "THIS BANK SIZE IS TOO LARGE FOR A 32X BANK"
(1)  241/       0 :                     		endif
(1)  242/       0 :                     	endif
(1)  243/       0 :                     
(1)  244/       0 :                     	if thissize > $40000
(1)  245/       0 :                     		warning "THIS BANK SIZE IS TOO LARGE FOR SCD and CD32X (WORD-RAM)"
(1)  246/       0 :                     	endif
(1)  247/       0 :                     	endm
(1)  248/       0 :                     
(1)  249/       0 :                     ; --------------------------------------------
(1)  250/       0 :                     ; 32X ONLY
(1)  251/       0 :                     ; --------------------------------------------
(1)  252/       0 :                     
(1)  253/       0 :                     sdram_bkset macro thislbl,endlbl
(1)  254/       0 :                     	if MCD|MARSCD
(1)  255/       0 :                     		align $800
(1)  256/       0 :                     	elseif MARS
(1)  257/       0 :                     		align 4
(1)  258/       0 :                     		phase $880000+*
(1)  259/       0 :                     	endif
(1)  260/       0 :                     ; MARSDATA_DEFAULT:
(1)  261/       0 :                     thislbl label *
(1)  262/       0 :                     	if MARS
(1)  263/       0 :                     		dephase
(1)  264/       0 :                     	endif
(1)  265/       0 :                     	if MARS|MARSCD
(1)  266/       0 :                     		dc.l endlbl-thislbl
(1)  267/       0 :                     		phase SH2_USER_DATA
(1)  268/       0 :                     	endif
(1)  269/       0 :                     	endm
(1)  270/       0 :                     
(1)  271/       0 :                     ; --------------------------------------------
(1)  272/       0 :                     
(1)  273/       0 :                     sdram_bkend macro thislbl,endlbl
(1)  274/       0 :                     		align $2000	; DREQ data-pack alignment
(1)  275/       0 :                     	if MARS|MARSCD
(1)  276/       0 :                     		dephase
(1)  277/       0 :                     	endif
(1)  278/       0 :                     	if MCD|MARSCD
(1)  279/       0 :                     endlbl label *
(1)  280/       0 :                     		align $800
(1)  281/       0 :                     	elseif MARS
(1)  282/       0 :                     		phase $880000+*
(1)  283/       0 :                     endlbl label *
(1)  284/       0 :                     		dephase
(1)  285/       0 :                     	endif
(1)  286/       0 :                     
(1)  287/       0 :                     	if MARS|MARSCD
(1)  288/       0 :                     
(1)  289/       0 :                     		report "SH2 SDRAM DATA: thislbl",endlbl-thislbl,((CS3+$40000)-SH2_USER_DATA)
(1)  290/       0 :                     	endif
(1)  291/       0 :                     	endm
(1)  292/       0 :                     
(1)  293/       0 :                     ; ====================================================================
(1)  294/       0 :                     ; ------------------------------------------------------------
(1)  295/       0 :                     ; CODE MACROS
(1)  296/       0 :                     ; ------------------------------------------------------------
(1)  297/       0 :                     
(1)  298/       0 :                     ; --------------------------------------------
(1)  299/       0 :                     ; Set data bank(s) for the current screen
(1)  300/       0 :                     ;
(1)  301/       0 :                     ; Data pointers:
(1)  302/       0 :                     ;
(1)  303/       0 :                     ; mcdpos:
(1)  304/       0 :                     ; 	dc.b "FILENAME.BIN",0
(1)  305/       0 :                     ; 	align 2
(1)  306/       0 :                     ;
(1)  307/       0 :                     ; marspos:
(1)  308/       0 :                     ; 	dc.l MARSDATA_DEFAULT	; 32X Cartridge point (UNUSED on CD32X)
(1)  309/       0 :                     ; 	dc.b "MARSD_00.BIN",0	; CD32X Filename (UNUSED on 32X Cartridge)
(1)  310/       0 :                     ; 	align 2
(1)  311/       0 :                     ; --------------------------------------------
(1)  312/       0 :                     
(1)  313/       0 :                     load_banks macro mcdpos,marspos
(1)  314/       0 :                     	if MARS|MARSCD
(1)  315/       0 :                     		lea	marspos(pc),a0		; 32X/CD32X: SH2 side data
(1)  316/       0 :                     		bsr	System_MarsDataPack	; MUST be first for CD32X
(1)  317/       0 :                     		bsr	Video_MdMars_SyncFrame
(1)  318/       0 :                     	endif
(1)  319/       0 :                     	if MCD|MARSCD
(1)  320/       0 :                     		bsr	System_MdMcd_SubWait
(1)  321/       0 :                     		lea	mcdpos(pc),a0		; CD/CD32X
(1)  322/       0 :                     		bsr	System_McdTrnsfr_WRAM	; WORD-RAM stays loaded
(1)  323/       0 :                     	endif
(1)  324/       0 :                     	endm
(1)  325/       0 :                     
(1)  326/       0 :                     ; --------------------------------------------
(1)  327/       0 :                     ; VDP color debug
(1)  328/       0 :                     ; --------------------------------------------
(1)  329/       0 :                     
(1)  330/       0 :                     vdp_showme	macro color
(1)  331/       0 :                     		move.l	#$C0000000,(vdp_ctrl).l
(1)  332/       0 :                     		move.w	#color,(vdp_data).l
(1)  333/       0 :                     		endm
(1)  334/       0 :                     
      85/       0 :                     		include "game/globals.asm"	; USER variables
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; GLOBAL RAM for ALL screen modes
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; Score, Lives, Level number, etc.
(1)    6/       0 :                     ; ----------------------------------------------------------------
(1)    7/       0 :                     
(1)    8/       0 : (MACRO)              			strct RAM_MdGlobal
(1)    8/       0 : =$0                  GLBL_LASTPC     set *
(1)    8/       0 :                                     dephase
(1)    8/FFFFFFFFFFFFEC04 :                                     phase RAM_MDGLOBAL
(1)    8/FFFFFFFFFFFFEC04 : =$FFFFFFFFFFFFEC04   GLBL_LASTORG    set *
(1)    9/FFFFFFFFFFFFEC04 :                     
(1)   10/FFFFFFFFFFFFEC04 :                     ; ------------------------------------------------------------
(1)   11/FFFFFFFFFFFFEC04 :                     ; Examples:
(1)   12/FFFFFFFFFFFFEC04 :                     ;
(1)   13/FFFFFFFFFFFFEC04 :                     ; RAM_Glbl_ExmpL ds.l 8 ; reserve 4 LONGS ($20 bytes)
(1)   14/FFFFFFFFFFFFEC04 :                     ; RAM_Glbl_ExmpW ds.w 6 ; reserve 3 WORDS ($0C bytes)
(1)   15/FFFFFFFFFFFFEC04 :                     ; RAM_Glbl_ExmpB ds.b 5 ; reserve 5 bytes
(1)   16/FFFFFFFFFFFFEC04 :                     ;
(1)   17/FFFFFFFFFFFFEC04 :                     ; Careful with bytes, everything needs to be word-algined
(1)   18/FFFFFFFFFFFFEC04 :                     ; or your will get an ADDRESS ERROR.
(1)   19/FFFFFFFFFFFFEC04 :                     ; ------------------------------------------------------------
(1)   20/FFFFFFFFFFFFEC04 :                     
(1)   21/FFFFFFFFFFFFEC04 :                     RAM_Glbl_Filler		ds.l 1		; 1 long (4 bytes)
(1)   22/FFFFFFFFFFFFEC08 :                     
(1)   23/FFFFFFFFFFFFEC08 :                     
(1)   24/FFFFFFFFFFFFEC08 :                     ; ------------------------------------------------------------
(1)   25/FFFFFFFFFFFFEC08 :                     sizeof_MdGlbl		ds.l 0		; size label
(1)   26/FFFFFFFFFFFFEC0C : (MACRO)              			endstrct
(1)   26/FFFFFFFFFFFFEC04 :                                     org GLBL_LASTORG
(1)   26/       0 :                                     phase GLBL_LASTPC
(1)   27/       0 :                     
      86/       0 :                     		include	"system/shared.asm"	; Shared variables and specials
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Shared variables
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; ====================================================================
(1)    7/       0 :                     ; ----------------------------------------------------------------
(1)    8/       0 :                     ; 32X SECTION
(1)    9/       0 :                     ; ----------------------------------------------------------------
(1)   10/       0 :                     
(1)   12/       0 :                     
(1)   13/       0 :                     ; --------------------------------------------------------
(1)   14/       0 :                     ; Settings
(1)   15/       0 :                     ; --------------------------------------------------------
(1)   16/       0 :                     
(1)   17/       0 : =$10                 MAX_MARSSPR	equ 16
(1)   18/       0 :                     
(1)   19/       0 :                     ; --------------------------------------------------------
(1)   20/       0 :                     ; Structs
(1)   21/       0 :                     ; --------------------------------------------------------
(1)   22/       0 :                     
(1)   23/       0 :                     ; ------------------------------------------------
(1)   24/       0 :                     ; Scrollable 256-color playfield using
(1)   25/       0 :                     ; 16x16 blocks
(1)   26/       0 :                     ; ------------------------------------------------
(1)   27/       0 :                     
(1)   28/       0 : (MACRO)              		strct 0
(1)   28/       0 : =$0                  GLBL_LASTPC     set *
(1)   28/FFFFFFFFFFFFEC04 :                                     dephase
(1)   28/       0 :                                     phase 0
(1)   28/       0 : =$0                  GLBL_LASTORG    set *
(1)   29/       0 :                     mscrl_Ybot	ds.w 1	; ** later
(1)   30/       2 :                     mscrl_Ytop	ds.w 1	; **
(1)   31/       4 :                     mscrl_Xpos	ds.l 1	; xxxx.0000
(1)   32/       8 :                     mscrl_Ypos	ds.l 1	; yyyy.0000
(1)   33/       C :                     mscrl_Art	ds.l 1	; Graphics as 16x16 blocks data in SH2's view (always at SDRAM)
(1)   34/      10 :                     sizeof_marsscrl	ds.l 1
(1)   35/      14 : (MACRO)              		endstrct
(1)   35/       0 :                                     org GLBL_LASTORG
(1)   35/       0 :                                     phase GLBL_LASTPC
(1)   36/       0 :                     
(1)   37/       0 :                     ; ------------------------------------------------
(1)   38/       0 :                     ; "Super" Sprite
(1)   39/       0 :                     ;
(1)   40/       0 :                     ; sspr_Flags: %000000yx
(1)   41/       0 :                     ; 	| x - Flip X
(1)   42/       0 :                     ; 	| y - Flip Y
(1)   43/       0 :                     ;
(1)   44/       0 :                     ; sspr_Size: $xxyy
(1)   45/       0 :                     ; 	| xx - Width / 8
(1)   46/       0 :                     ; 	| yy - Height / 8
(1)   47/       0 :                     ; ------------------------------------------------
(1)   48/       0 :                     
(1)   49/       0 : (MACRO)              		strct 0
(1)   49/       0 : =$0                  GLBL_LASTPC     set *
(1)   49/       0 :                                     dephase
(1)   49/       0 :                                     phase 0
(1)   49/       0 : =$0                  GLBL_LASTORG    set *
(1)   50/       0 :                     sspr_Flags	ds.w 1	; %000000yx
(1)   51/       2 :                     sspr_Frame	ds.w 1	; Current frame
(1)   52/       4 :                     sspr_Size	ds.w 1	; $XXYY
(1)   53/       6 :                     sspr_Indx	ds.w 1	; 256-index color increment TODO
(1)   54/       8 :                     sspr_Xpos	ds.w 1	; X position
(1)   55/       A :                     sspr_Ypos	ds.w 1	; Y position
(1)   56/       C :                     sspr_Art	ds.l 1	; Graphics data in SH2's view (always at SDRAM)
(1)   57/      10 :                     sizeof_marsspr	ds.l 1
(1)   58/      14 : (MACRO)              		endstrct
(1)   58/       0 :                                     org GLBL_LASTORG
(1)   58/       0 :                                     phase GLBL_LASTPC
(1)   59/       0 :                     
(1)   60/       0 :                     ; ----------------------------------------------------------------
(1)   61/       0 :                     ; 32X DREQ "RAM"
(1)   62/       0 :                     ;
(1)   63/       0 :                     ; To read these labels:
(1)   64/       0 :                     ;
(1)   65/       0 :                     ; On the Genesis:
(1)   66/       0 :                     ; 	lea	(RAM_MdDreq+DREQ_LABEL),aX ; As this or use an
(1)   67/       0 :                     ;                                          ; alias below
(1)   68/       0 :                     ; On the 32X:
(1)   69/       0 :                     ; 	mov	#DREQ_LABEL,rX
(1)   70/       0 :                     ; 	mov	@(marsGbl_DmaRead,gbr),r0
(1)   71/       0 :                     ;	add	r0,rX
(1)   72/       0 :                     ; ----------------------------------------------------------------
(1)   73/       0 :                     
(1)   74/       0 :                     ; *** List MUST be aligned by 8bytes, end with 0 or 8 ***
(1)   75/       0 :                     
(1)   76/       0 : (MACRO)              		strct 0
(1)   76/       0 : =$0                  GLBL_LASTPC     set *
(1)   76/       0 :                                     dephase
(1)   76/       0 :                                     phase 0
(1)   76/       0 : =$0                  GLBL_LASTORG    set *
(1)   77/       0 :                     Dreq_Palette	ds.w 256			; 256-color palette *DON'T MOVE THIS*
(1)   78/     200 :                     Dreq_ScrlData	ds.w (512/16)*(256/16)
(1)   79/     600 :                     Dreq_ScrlBuff	ds.b sizeof_marsscrl
(1)   80/     610 :                     Dreq_SuperSpr	ds.b sizeof_marsspr*MAX_MARSSPR
(1)   81/     710 :                     sizeof_dreq	ds.l 0
(1)   82/     710 : (MACRO)              		endstrct
(1)   82/       0 :                                     org GLBL_LASTORG
(1)   82/       0 :                                     phase GLBL_LASTPC
(1)   83/       0 :                     
(1)   91/       0 :                     
(1)   92/       0 :                     ; ----------------------------------------------------------------
(1)   93/       0 :                     ; Aliases labels
(1)   94/       0 :                     ; ----------------------------------------------------------------
(1)   95/       0 :                     
(1)   96/       0 : =$FFFFFFFFFFFFC604   RAM_MdMars_Palette	equ RAM_MdDreq+Dreq_Palette
(1)   97/       0 : =$FFFFFFFFFFFFCC14   RAM_MdMars_SuperSpr	equ RAM_MdDreq+Dreq_SuperSpr
(1)   98/       0 : =$FFFFFFFFFFFFC804   RAM_MdMars_ScrlData	equ RAM_MdDreq+Dreq_ScrlData
(1)   99/       0 : =$FFFFFFFFFFFFCC04   RAM_MdMars_Screen	equ RAM_MdDreq+Dreq_ScrlBuff
(1)  100/       0 :                     
(1)  101/       0 :                     ; ----------------------------------------------------------------
(1)  102/       0 :                     
(1)  104/       0 :                     
(1)  105/       0 :                     ; ====================================================================
(1)  106/       0 :                     
      87/       0 :                     		include	"system/mcd/map.asm"	; Sega CD hardware map (shared with Sub-CPU)
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; SEGA CD SUB-CPU MAP
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; ------------------------------------------------
(1)    7/       0 :                     ; Register area
(1)    8/       0 :                     ;
(1)    9/       0 :                     ; MAIN-CPU: $A12000 (sysmcd_reg)
(1)   10/       0 :                     ; SUB-CPU:  $FF8000 (scpu_reg)
(1)   11/       0 :                     ; ------------------------------------------------
(1)   12/       0 :                     
(1)   13/       0 :                     ; -------------
(1)   14/       0 :                     ; bits
(1)   15/       0 :                     ; -------------
(1)   16/       0 :                     
(1)   17/       0 : =$2                  bitWRamMode	equ 2		;2M | 1M
(1)   18/       0 :                     
(1)   19/       0 :                     ; -------------
(1)   20/       0 :                     ; Registers
(1)   21/       0 :                     ; -------------
(1)   22/       0 :                     
(1)   23/       0 : =$3                  mcd_memory	equ $03
(1)   24/       0 : =$6                  mcd_hint	equ $06		; [W] HBlank RAM redirection-jump (MAIN CPU ONLY)
(1)   25/       0 : =$E                  mcd_comm_m	equ $0E		; [B] Comm port MAIN R/W | SUB READ ONLY
(1)   26/       0 : =$F                  mcd_comm_s	equ $0F		; [B] Comm port SUB R/W  | MAIN READ ONLY
(1)   27/       0 : =$10                 mcd_dcomm_m	equ $10		; [S: $0E] Communication MAIN
(1)   28/       0 : =$20                 mcd_dcomm_s	equ $20		; [S: $0E] Communication SUB
(1)   29/       0 : =$32                 mcd_intmask	equ $32		;
(1)   30/       0 :                     
(1)   31/       0 :                     ; ====================================================================
(1)   32/       0 :                     
      88/       0 :                     		include	"system/mars/map.asm"	; 32X hardware map (shared with SH2)
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; -------------------------------------------------------------------
(1)    3/       0 :                     ; SH2 MAP
(1)    4/       0 :                     ; -------------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; ------------------------------------------------------------
(1)    7/       0 :                     ; SH2 SIDE MAP
(1)    8/       0 :                     ; ------------------------------------------------------------
(1)    9/       0 :                     
(1)   10/       0 : =$0                  CS0		equ	$00000000	; Boot ROM & System registers
(1)   11/       0 : =$2000000            CS1		equ	$02000000	; ROM data all 4MB, Gone if RV=1
(1)   12/       0 : =$4000000            CS2		equ	$04000000	; Framebuffer area
(1)   13/       0 : =$6000000            CS3		equ	$06000000	; SDRAM
(1)   14/       0 : =$20000000           TH		equ	$20000000	; OR value for CacheThru
(1)   15/       0 : =$20004000           _sysreg		equ	$00004000|TH	; MARS System registers
(1)   16/       0 : =$20004100           _vdpreg		equ	$00004100|TH	; SuperVDP registers
(1)   17/       0 : =$20004200           _palette	equ	$00004200|TH	; Palette RAM for Pixel-Packed or RLE mode
(1)   18/       0 : =$24000000           _framebuffer:	equ	CS2|TH		; Framebuffer: First 240 words are the linetable
(1)   19/       0 : =$24020000           _overwrite:	equ	CS2|TH+$20000	; Overwrite: $00 writes are ignored
(1)   20/       0 :                     
(1)   21/       0 :                     ; ------------------------------------------------------------
(1)   22/       0 :                     ; Variables
(1)   23/       0 :                     ; ------------------------------------------------------------
(1)   24/       0 :                     
(1)   25/       0 :                     ; ------------------------------------------------
(1)   26/       0 :                     ; System
(1)   27/       0 :                     ; ------------------------------------------------
(1)   28/       0 :                     
(1)   29/       0 :                     ; _sysreg
(1)   30/       0 : =$0                  adapter		equ	$00		; adapter control register (Read as WORD)
(1)   31/       0 : =$1                  intmask		equ	$01		; SH2 CPU ONLY: interrupts mask
(1)   32/       0 : =$3                  standby		equ	$03		; CMD interrupt request bit by MD side (slave|master) (BYTE)
(1)   33/       0 : =$5                  hcount		equ	$05		; H Counter (BYTE)
(1)   34/       0 : =$6                  dreqctl		equ	$06		; DREQ control (WORD)
(1)   35/       0 : =$8                  dreqsource	equ	$08		; DREQ source address
(1)   36/       0 : =$C                  dreqdest	equ	$0C		; DREQ destination address
(1)   37/       0 : =$10                 dreqlen		equ	$10		; DREQ length
(1)   38/       0 : =$12                 dreqfifo	equ	$12		; DREQ FIFO
(1)   39/       0 : =$14                 vresintclr	equ	$14		; VRES interrupt clear
(1)   40/       0 : =$16                 vintclr		equ	$16		; V interrupt clear
(1)   41/       0 : =$18                 hintclr		equ	$18		; H interrupt clear
(1)   42/       0 : =$1A                 cmdintclr	equ	$1a		; CMD interrupt clear
(1)   43/       0 : =$1C                 pwmintclr	equ	$1C		; PWM interrupt clear
(1)   44/       0 : =$20                 comm0		equ	$20		; Communication ports ***
(1)   45/       0 : =$21                 comm1		equ	$21		; ALL CPUs can see this ports: including Z80
(1)   46/       0 : =$22                 comm2		equ	$22		; only be careful with the read/write directions.
(1)   47/       0 : =$23                 comm3		equ	$23		; ODD addresses (1,3,5...) are BYTE-read only.
(1)   48/       0 : =$24                 comm4		equ	$24		; EVEN addresses (0,2,4...) can be read as WORDs
(1)   49/       0 : =$25                 comm5		equ	$25		; Writing LONG addreses are possible depending
(1)   50/       0 : =$26                 comm6		equ	$26		; of the CPU's aligment limitations.
(1)   51/       0 : =$27                 comm7		equ	$27		;
(1)   52/       0 : =$28                 comm8		equ	$28		;
(1)   53/       0 : =$29                 comm9		equ	$29		;
(1)   54/       0 : =$2A                 comm10		equ	$2A		;
(1)   55/       0 : =$2B                 comm11		equ	$2B		;
(1)   56/       0 : =$2C                 comm12		equ	$2C		;
(1)   57/       0 : =$2D                 comm13		equ	$2D		;
(1)   58/       0 : =$2E                 comm14		equ	$2E		;
(1)   59/       0 : =$2F                 comm15		equ	$2F		;
(1)   60/       0 : =$30                 timerctl	equ	$30		; PWM Timer Control
(1)   61/       0 : =$31                 pwmctl		equ	$31		; PWM Control
(1)   62/       0 : =$32                 cycle		equ	$32		; PWM Cycle
(1)   63/       0 : =$34                 lchwidth	equ	$34		; PWM L ch Width
(1)   64/       0 : =$36                 rchwidth	equ	$36		; PWM R ch Width
(1)   65/       0 : =$38                 monowidth	equ	$38		; PWM Monaural Width
(1)   66/       0 :                     
(1)   67/       0 :                     ; _sysreg
(1)   68/       0 :                     ; adapter
(1)   69/       0 : =$1                  ADEN		equ	%00000001	; MARS Enabled: No/Yes
(1)   70/       0 : =$2                  RES		equ	%00000010	; SH2 Reset: Yes/Cancelled
(1)   71/       0 : =$80                 FM		equ	%10000000	; SuperVDP permission: MD or SH
(1)   72/       0 :                     
(1)   73/       0 :                     ; framectl
(1)   74/       0 : =$1                  FS		equ	%00000001	; Current framebuffer DRAM pixel data
(1)   75/       0 : =$2                  FEN		equ	%00000010	; Can write to Framebuffer: Yes/No
(1)   76/       0 :                     ; vdpsts
(1)   77/       0 : =$80                 VBLK		equ	%10000000	; VBlank bit
(1)   78/       0 : =$40                 HBLK		equ	%01000000	; HBlank bit
(1)   79/       0 : =$20                 PEN		equ	%00100000	; Can write to Palette: Yes/No
(1)   80/       0 :                     ; intmask
(1)   81/       0 : =$8                  VIRQ_ON		equ	$08		; IRQ masks for IRQ mask register
(1)   82/       0 : =$4                  HIRQ_ON		equ	$04
(1)   83/       0 : =$2                  CMDIRQ_ON	equ	$02
(1)   84/       0 : =$1                  PWMIRQ_ON	equ	$01
(1)   85/       0 :                     
(1)   86/       0 :                     ; _vdpreg
(1)   87/       0 : =$0                  tvmode		equ	$00		; TV mode
(1)   88/       0 : =$1                  bitmapmd	equ	$01		; Bitmap mode
(1)   89/       0 : =$2                  shift		equ	$02		; Lineshift bit
(1)   90/       0 : =$4                  filllength	equ	$04		; Auto Fill Length register
(1)   91/       0 : =$6                  fillstart	equ	$06		; Auto Fill Start Address register
(1)   92/       0 : =$8                  filldata	equ	$08		; Auto Fill Data register
(1)   93/       0 : =$A                  vdpsts		equ	$0A		; VDP Status register
(1)   94/       0 : =$B                  framectl	equ	$0B		; Frame Buffer Control register
(1)   95/       0 :                     
(1)   96/       0 :                     ; ------------------------------------------------------------
(1)   97/       0 :                     ; SH2 Internal registers, for each CPU
(1)   98/       0 :                     ; ------------------------------------------------------------
(1)   99/       0 :                     
(1)  100/       0 :                     ; DMA Channel 0: DREQ
(1)  101/       0 :                     ; DMA Channel 1: PWM
(1)  102/       0 :                     
(1)  103/       0 : =$FFFFFE00           _SERIAL		equ	$FFFFFE00	; Serial Control
(1)  104/       0 : =$FFFFFE10           _FRT		equ	$FFFFFE10	; Free run timer
(1)  105/       0 : =$0                  _TIER		equ	$00		; Timer interrupt enable register
(1)  106/       0 : =$1                  _TCSR		equ	$01		; Timer control & status register
(1)  107/       0 : =$2                  _FRC_H		equ	$02		; Free running counter High
(1)  108/       0 : =$3                  _FRC_L		equ	$03		; Free running counter Low
(1)  109/       0 : =$4                  _OCR_H		equ	$04		; Output compare register High
(1)  110/       0 : =$5                  _OCR_L		equ	$05		; Output compare register Low
(1)  111/       0 : =$6                  _TCR		equ	$06		; Timer control register
(1)  112/       0 : =$7                  _TOCR		equ	$07		; Timer output compare control register
(1)  113/       0 : =$FFFFFE92           _CCR		equ	$FFFFFE92	; Cache register (WORD)
(1)  114/       0 : =$FFFFFF00           _JR		equ	$FFFFFF00	; DIVU (--- / val)
(1)  115/       0 : =$FFFFFF04           _HRL32		equ	$FFFFFF04	; DIVU (val / ---) or RIGHT-long result if read
(1)  116/       0 : =$FFFFFF10           _HRH		equ	$FFFFFF10	; DIVU Result: LEFT long
(1)  117/       0 : =$FFFFFF14           _HRL		equ	$FFFFFF14	; DIVU Result: RIGHT long
(1)  118/       0 : =$FFFFFF80           _DMASOURCE0	equ	$FFFFFF80	; DMA source address 0
(1)  119/       0 : =$FFFFFF84           _DMADEST0	equ	$FFFFFF84	; DMA destination address 0
(1)  120/       0 : =$FFFFFF88           _DMACOUNT0	equ	$FFFFFF88	; DMA transfer count 0
(1)  121/       0 : =$FFFFFF8C           _DMACHANNEL0	equ	$FFFFFF8C	; DMA channel control 0
(1)  122/       0 : =$FFFFFF90           _DMASOURCE1	equ	$FFFFFF90	; DMA source address 1
(1)  123/       0 : =$FFFFFF94           _DMADEST1	equ	$FFFFFF94	; DMA destination address 1
(1)  124/       0 : =$FFFFFF98           _DMACOUNT1	equ	$FFFFFF98	; DMA transfer count 1
(1)  125/       0 : =$FFFFFF9C           _DMACHANNEL1	equ	$FFFFFF9C	; DMA channel control 1
(1)  126/       0 : =$FFFFFFA0           _DMAVECTORN0	equ	$FFFFFFA0	; DMA vector number N0
(1)  127/       0 : =$FFFFFFA4           _DMAVECTORE0	equ	$FFFFFFA4	; DMA vector number E0
(1)  128/       0 : =$FFFFFFA8           _DMAVECTORN1	equ	$FFFFFFA8	; DMA vector number N1
(1)  129/       0 : =$FFFFFFAC           _DMAVECTORE1	equ	$FFFFFFAC	; DMA vector number E1
(1)  130/       0 : =$FFFFFFB0           _DMAOPERATION	equ	$FFFFFFB0	; DMA operation
(1)  131/       0 : =$FFFFFFB4           _DMAREQACK0	equ	$FFFFFFB4	; DMA request/ack select control 0
(1)  132/       0 : =$FFFFFFB8           _DMAREQACK1	equ	$FFFFFFB8	; DMA request/ack select control 1
(1)  133/       0 :                     
      89/       0 :                     		include	"system/md/map.asm"	; Genesis hardware map and other areas
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Genesis / Pico 68000 map
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 : =$200000             sys_exram	equ	$200000		; Second half of 4MB rom or external RAM (Normal or save data)
(1)    7/       0 : =$A00000             z80_cpu		equ	$A00000		; Z80 CPU area, size: $2000
(1)    8/       0 : =$A04000             ym_ctrl_1	equ	$A04000		; YM2612 reg 1
(1)    9/       0 : =$A04001             ym_data_1	equ	$A04001		; YM2612 reg 2
(1)   10/       0 : =$A04002             ym_ctrl_2	equ	$A04002		; YM2612 reg 1
(1)   11/       0 : =$A04003             ym_data_2	equ	$A04003		; YM2612 reg 2
(1)   12/       0 : =$A10001             sys_io		equ	$A10001		; bits: OVRSEAS(7)|PAL(6)|DISK(5)|VER(3-0)
(1)   13/       0 : =$A10003             sys_data_1	equ	$A10003		; Port 1 DATA
(1)   14/       0 : =$A10005             sys_data_2	equ	$A10005		; Port 2 DATA
(1)   15/       0 : =$A10007             sys_data_3	equ	$A10007		; Modem DATA
(1)   16/       0 : =$A10009             sys_ctrl_1	equ	$A10009		; Port 1 CTRL
(1)   17/       0 : =$A1000B             sys_ctrl_2	equ	$A1000B		; Port 2 CTRL
(1)   18/       0 : =$A1000D             sys_ctrl_3	equ	$A1000D		; Modem CTRL
(1)   19/       0 : =$A11100             z80_bus 	equ	$A11100		; only use bit 0 (bit 8 as WORD)
(1)   20/       0 : =$A11200             z80_reset	equ	$A11200		; WRITE only ($0000 reset/$0100 cancel)
(1)   21/       0 : =$A130F1             md_bank_sram	equ	$A130F1		; Make SRAM visible at $200000
(1)   22/       0 : =$A14000             sys_tmss	equ	$A14000		; write "SEGA" here for ver > 0
(1)   23/       0 : =$C00000             vdp_data	equ	$C00000		; video data port
(1)   24/       0 : =$C00004             vdp_ctrl	equ	$C00004		; video control port
(1)   25/       0 : =$C00011             psg_ctrl	equ	$C00011		; PSG control
(1)   26/       0 :                     
(1)   27/       0 :                     ; ----------------------------------------------------------------
(1)   28/       0 :                     ; SEGA CD map
(1)   29/       0 :                     ; ----------------------------------------------------------------
(1)   30/       0 :                     
(1)   31/       0 : =$200000             sysmcd_wram	equ	$200000
(1)   32/       0 : =$A12000             sysmcd_reg	equ	$A12000
(1)   33/       0 :                     
(1)   34/       0 :                     ; ----------------------------------------------------------------
(1)   35/       0 :                     ; 32X map
(1)   36/       0 :                     ; ----------------------------------------------------------------
(1)   37/       0 :                     
(1)   38/       0 : =$A130EC             sysmars_id	equ	$A130EC		; 32X's ID: "MARS"
(1)   39/       0 : =$A15100             sysmars_reg	equ	$A15100		; MARS 32X registers area, see system/mars/map.asm for variables
(1)   40/       0 :                     
(1)   41/       0 :                     ; ----------------------------------------------------------------
(1)   42/       0 :                     ; Genesis / Mega drive Z80 map
(1)   43/       0 :                     ; ----------------------------------------------------------------
(1)   44/       0 :                     
(1)   45/       0 : =$4000               zym_ctrl_1	equ	$4000		; YM2612 reg 1
(1)   46/       0 : =$4001               zym_data_1	equ	$4001		; YM2612 reg 2
(1)   47/       0 : =$4002               zym_ctrl_2	equ	$4002		; YM2612 reg 1
(1)   48/       0 : =$4003               zym_data_2	equ	$4003		; YM2612 reg 2
(1)   49/       0 : =$6000               zbank		equ	$6000		; Z80 ROM BANK: %XXXXXXXX X0000000 00000000 (9 writes)
(1)   50/       0 :                     ; zvdp_data	equ	$7F00		; video data port
(1)   51/       0 :                     ; zvdp_ctrl	equ	$7F04		; video control port
(1)   52/       0 : =$7F11               zpsg_ctrl	equ	$7F11		; PSG control
(1)   53/       0 :                     
      90/       0 :                     		include	"system/md/ram.asm"	; Genesis RAM sections
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Genesis 68000 "MAIN-CPU" RAM section
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; RESERVED RAM areas:
(1)    6/       0 :                     ; $FFFB00-$FFFD00 | Stack area a7
(1)    7/       0 :                     ; $FFFD00-$FFFDFF | RESERVED for the Sega CD Vector jumps,
(1)    8/       0 :                     ;                   * FREE to use if running on Cartridge.
(1)    9/       0 :                     ;                   (Genesis,32X,Pico.)
(1)   10/       0 :                     ; $FFFE00-$FFFEFF | USED in Sega CD for the BIOS, BUT this might
(1)   11/       0 :                     ;                   be free to use after booting **NEEDS testing**
(1)   12/       0 :                     ;                   * FREE to use on Cartridge.
(1)   13/       0 :                     ; $FFFF00-$FFFFFF | RESERVED for the Sound Driver
(1)   14/       0 :                     ;                   This area will probably be used for the 68k
(1)   15/       0 :                     ;                   version of GEMA for the Pico, but currently
(1)   16/       0 :                     ;                   the Z80 sets a flag around here for a
(1)   17/       0 :                     ;                   workaround to read data located at the
(1)   18/       0 :                     ;                   RAM area, it will be required if the
(1)   19/       0 :                     ;                   SegaCD does stamp processing and the game
(1)   20/       0 :                     ;                   still needs sound.
(1)   21/       0 :                     ; ----------------------------------------------------------------
(1)   22/       0 :                     
(1)   23/       0 :                     ; --------------------------------------------------------
(1)   24/       0 :                     ; Settings
(1)   25/       0 :                     ; --------------------------------------------------------
(1)   26/       0 :                     
(1)   27/       0 : (MACRO)              			strct $FFFF0000
(1)   27/       0 : =$0                  GLBL_LASTPC     set *
(1)   27/       0 :                                     dephase
(1)   27/FFFFFFFFFFFF0000 :                                     phase $FFFF0000
(1)   27/FFFFFFFFFFFF0000 : =$FFFFFFFFFFFF0000   GLBL_LASTORG    set *
(1)   28/FFFFFFFFFFFF0000 :                     RAM_SystemCode		ds.b MAX_SysCode	; CD/32X/CD32X
(1)   29/FFFFFFFFFFFF2000 :                     RAM_UserCode		ds.b MAX_UserCode	; CD/32X/CD32X
(1)   30/FFFFFFFFFFFFA000 :                     
(1)   31/FFFFFFFFFFFFA000 :                     ; ------------------------------------------------
(1)   32/FFFFFFFFFFFFA000 :                     ; > $FF8000 section
(1)   33/FFFFFFFFFFFFA000 :                     ; ------------------------------------------------
(1)   34/FFFFFFFFFFFFA000 :                     
(1)   35/FFFFFFFFFFFFA000 :                     check_thisram		ds.l 0			; <-- get current pos
(1)   39/FFFFFFFFFFFFA004 :                     RAM_MdVideo		ds.b MAX_MdVideo	; $FF8000
(1)   40/FFFFFFFFFFFFC004 :                     RAM_MdSystem		ds.b MAX_MdSystem	;
(1)   41/FFFFFFFFFFFFC604 :                     RAM_MdOther		ds.b MAX_MdOther	; 32X's DREQ goes here
(1)   42/FFFFFFFFFFFFD404 :                     RAM_ScrnBuff		ds.b MAX_ScrnBuff
(1)   43/FFFFFFFFFFFFEC04 :                     RAM_MdGlobal		ds.b sizeof_MdGlbl
(1)   44/FFFFFFFFFFFFD80C :                     sizeof_MdRam		ds.l 0
(1)   45/FFFFFFFFFFFFD810 : (MACRO)              			endstrct
(1)   45/FFFFFFFFFFFF0000 :                                     org GLBL_LASTORG
(1)   45/       0 :                                     phase GLBL_LASTPC
(1)   49/       0 :                     
(1)   50/       0 :                     ; ------------------------------------------------
(1)   51/       0 :                     ; Add-on area
(1)   52/       0 :                     ; ------------------------------------------------
(1)   53/       0 :                     
(1)   54/       0 : (MACRO)              			strct RAM_MdOther
(1)   54/       0 : =$0                  GLBL_LASTPC     set *
(1)   54/FFFFFFFFFFFF0000 :                                     dephase
(1)   54/FFFFFFFFFFFFC604 :                                     phase RAM_MDOTHER
(1)   54/FFFFFFFFFFFFC604 : =$FFFFFFFFFFFFC604   GLBL_LASTORG    set *
(1)   55/FFFFFFFFFFFFC604 :                     RAM_MdDreq		ds.b $E00		; 32X DREQ RAM size (MANUALLY SET)
(1)   56/FFFFFFFFFFFFD404 :                     sizeof_RamOther		ds.l 0
(1)   57/FFFFFFFFFFFFD408 : (MACRO)              			endstrct
(1)   57/FFFFFFFFFFFFC604 :                                     org GLBL_LASTORG
(1)   57/       0 :                                     phase GLBL_LASTPC
(1)   58/       0 : (MACRO)              			erreport "32X DREQ RAM USES",(sizeof_RamOther-RAM_MdOther),MAX_MdOther
(1)   59/       0 :                     
(1)   60/       0 :                     ; ------------------------------------------------
(1)   61/       0 :                     ; Reserved areas
(1)   62/       0 :                     ; ------------------------------------------------
(1)   63/       0 :                     
(1)   64/       0 : =$FFFFFD00           RAM_Stack		equ RAM_MegaCd		; <-- goes backwards
(1)   65/       0 : =$FFFFFD00           RAM_MegaCd		equ $FFFFFD00
(1)   66/       0 : =$FFFFFF00           RAM_ZSndBuff		equ $FFFFFF00
(1)   67/       0 :                     
      91/       0 :                     
      92/       0 :                     ; ====================================================================
      93/       0 :                     ; ----------------------------------------------------------------
      94/       0 :                     ; Init procedures for all systems
      95/       0 :                     ; ----------------------------------------------------------------
      96/       0 :                     
      97/       0 :                     ; ---------------------------------------------
      98/       0 :                     ; SEGA 32X
      99/       0 :                     ; ---------------------------------------------
     100/       0 :                     
     122/       0 :                     		include	"system/head_mcd.asm"			; Sega CD header
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; SEGA CD header
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; Header shared for both CD and CD32X
(1)    6/       0 :                     ; ----------------------------------------------------------------
(1)    7/       0 :                     
(1)    8/       0 : 5345 4741 4449      		dc.b "SEGADISCSYSTEM  "		; Disc Type (Must be SEGADISCSYSTEM)
                6 : 5343 5359 5354 
                C : 454D 2020          
(1)    9/      10 : 4E49 4B4F 4E41      		dc.b "NIKONA-CD  ",0		; Disc ID
               16 : 2D43 4420 2000    
(1)   10/      1C : 0100 0001           		dc.w $100,1			; System ID, Type
(1)   11/      20 : 4E49 4B4F 4E41      		dc.b "NIKONA-SYS ",0		; System Name
               26 : 2D53 5953 2000    
(1)   12/      2C : 0000 0000           		dc.w 0,0			; System Version, Type
(1)   13/      30 : 0000 0356           		dc.l IP_Start
(1)   14/      34 : 0000 0388           		dc.l IP_End
(1)   15/      38 : 0000 0000           		dc.l 0
(1)   16/      3C : 0000 0000           		dc.l 0
(1)   17/      40 : 0000 0800           		dc.l SP_Start
(1)   18/      44 : 0000 1180           		dc.l SP_End
(1)   19/      48 : 0000 0000           		dc.l 0
(1)   20/      4C : 0000 0000           		dc.l 0
(1)   21/      50 :                     		align $100			; Pad to $100
(1)   22/     100 : 5345 4741 2047      		dc.b "SEGA GENESIS    "
              106 : 454E 4553 4953 
              10C : 2020 2020          
(1)   23/     110 : 2843 2947 4636      		dc.b "(C)GF64 2024.???"
              116 : 3420 3230 3234 
              11C : 2E3F 3F3F          
(1)   25/     120 : 4E69 6B6F 6E61      		dc.b "Nikona CD32X                                    "
              126 : 2043 4433 3258 
              12C : 2020 2020 2020 
              132 : 2020 2020 2020 
              138 : 2020 2020 2020 
              13E : 2020 2020 2020 
              144 : 2020 2020 2020 
              14A : 2020 2020 2020    
(1)   26/     150 : 4E69 6B6F 6E61                      dc.b "Nikona CD32X                                    "
              156 : 2043 4433 3258 
              15C : 2020 2020 2020 
              162 : 2020 2020 2020 
              168 : 2020 2020 2020 
              16E : 2020 2020 2020 
              174 : 2020 2020 2020 
              17A : 2020 2020 2020    
(1)   31/     180 : 474D 2048 4F4D      		dc.b "GM HOMEBREW-02  "
              186 : 4542 5245 572D 
              18C : 3032 2020          
(1)   32/     190 : 4A36 4D20 2020      		dc.b "J6M             "
              196 : 2020 2020 2020 
              19C : 2020 2020          
(1)   33/     1A0 :                     		align $1F0
(1)   34/     1F0 : 4A55 4520 2020      		dc.b "JUE             "
              1F6 : 2020 2020 2020 
              1FC : 2020 2020          
(1)   35/     200 :                     
(1)   37/     200 :                     		binclude "system/mcd/region/jap.bin"
(1)   43/     356 :                     
(1)   44/     356 :                     ; ====================================================================
(1)   45/     356 :                     ; ----------------------------------------------------------------
(1)   46/     356 :                     ; IP
(1)   47/     356 :                     ; ----------------------------------------------------------------
(1)   48/     356 :                     
(1)   49/     356 :                     IP_Start:
(1)   50/     356 : 41F9 00C0 0000      		lea	(vdp_data).l,a0
(1)   51/     35C : 3028 0004           .wait_vint:	move.w	4(a0),d0
(1)   52/     360 : 0800 0003           		btst	#3,d0
(1)   53/     364 : 67F6                		beq.s	.wait_vint
(1)   54/     366 : 217C C000 0000      		move.l	#$C0000000,4(a0)
              36C : 0004             
(1)   55/     36E : 323C 003F           		move.w	#64-1,d1
(1)   56/     372 : 7000                		moveq	#0,d0
(1)   57/     374 :                     .color_out:
(1)   58/     374 : 3080                		move.w	d0,(a0)
(1)   59/     376 : 51C9 FFFC           		dbf	d1,.color_out
(1)   60/     37A : 33FC FD0C 00A1      		move.w	#$FD0C,(sysmcd_reg+mcd_hint).l	; Relocate HBlank jump
              380 : 2006             
(1)   61/     382 : 4EF9 00FF 2000      		jmp	($FF0600+MCD_Main).l
(1)   62/     388 :                     IP_End:
(1)   63/     388 :                     		align 2
(1)   64/     388 :                     
(1)   65/     388 :                     ; ====================================================================
(1)   66/     388 :                     ; ----------------------------------------------------------------
(1)   67/     388 :                     ; SP
(1)   68/     388 :                     ; ----------------------------------------------------------------
(1)   69/     388 :                     
(1)   70/     388 :                     		align $800
(1)   71/     800 :                     SP_Start:
(1)   72/     800 :                     		include "system/mcd/subcpu.asm"
(2)    1/     800 :                     ; ====================================================================
(2)    2/     800 :                     ; ----------------------------------------------------------------
(2)    3/     800 :                     ; SegaCD SUB-CPU
(2)    4/     800 :                     ;
(2)    5/     800 :                     ; TOP CODE loaded on BOOT
(2)    6/     800 :                     ; ----------------------------------------------------------------
(2)    7/     800 :                     
(2)    8/     800 :                     ; ====================================================================
(2)    9/     800 :                     ; ----------------------------------------------------------------
(2)   10/     800 :                     ; Variables
(2)   11/     800 :                     ; ----------------------------------------------------------------
(2)   12/     800 :                     
(2)   13/     800 : =$80000              scpu_wram	equ $00080000
(2)   14/     800 : =$FFFE8000           scpu_bram	equ $FFFE8000
(2)   15/     800 : =$FFFF0000           scpu_pcm	equ $FFFF0000
(2)   16/     800 :                     ; scpu_pcmwave	equ $FFFF2001	; <-- ODD WRITES ONLY
(2)   17/     800 : =$FFFF8000           scpu_reg	equ $FFFF8000
(2)   18/     800 :                     
(2)   19/     800 : =$0                  PCM		equ $00
(2)   20/     800 : =$1                  ENV		equ $01		; Envelope "Volume"
(2)   21/     800 : =$3                  PAN		equ $03		; Panning (%bbbbaaaa, aaaa = left, bbbb = right)
(2)   22/     800 : =$5                  FDL		equ $05		; Sample rate $00xx
(2)   23/     800 : =$7                  FDH		equ $07		; Sample rate $xx00
(2)   24/     800 : =$9                  LSL		equ $09		; Loop address $xx00
(2)   25/     800 : =$B                  LSH		equ $0B		; Loop address $00xx
(2)   26/     800 : =$D                  ST		equ $0D		; Start address (only $x0, $x000)
(2)   27/     800 : =$F                  CTREG		equ $0F		; Control register ($80 - Bank select, $C0 - Channel select)
(2)   28/     800 : =$11                 ONREG		equ $11		; Channel On/Off (BITS: 1 - off, 0 - on)
(2)   29/     800 :                     
(2)   30/     800 :                     ; ====================================================================
(2)   31/     800 :                     ; ----------------------------------------------------------------
(2)   32/     800 :                     ; Structs
(2)   33/     800 :                     ; ----------------------------------------------------------------
(2)   34/     800 :                     
(2)   35/     800 :                     ; cdpcm_flags:
(2)   36/     800 :                     ; %EFSU ---l
(2)   37/     800 :                     ; E-Enabled
(2)   38/     800 :                     ; F-First fill / Restart
(2)   39/     800 :                     ; S-Force stop (keyoff)
(2)   40/     800 :                     ; U-Update channel freq/vol/pan only
(2)   41/     800 :                     ; l-loop channel
(2)   42/     800 :                     
(2)   43/     800 :                     ; SIZE MUST BE $20
(2)   44/     800 : (MACRO)              		strct 0
(2)   44/     800 : =$800                GLBL_LASTPC     set *
(2)   44/FFFFFFFFFFFFCE04 :                                     dephase
(2)   44/       0 :                                     phase 0
(2)   44/       0 : =$0                  GLBL_LASTORG    set *
(2)   45/       0 :                     cdpcm_flags	ds.b 1		; %
(2)   46/       1 :                     cdpcm_strmf	ds.b 1
(2)   47/       2 :                     cdpcm_strmhalf	ds.b 1		; Halfway MSB $00/$04/$08/$0C
(2)   48/       3 :                     cdpcm_freeb	ds.b 1
(2)   49/       4 :                     cdpcm_clen	ds.l 1
(2)   50/       8 :                     cdpcm_cread	ds.l 1
(2)   51/       C :                     cdpcm_pan	ds.b 1
(2)   52/       D :                     cdpcm_env	ds.b 1
(2)   53/       E :                     cdpcm_pitch	ds.w 1
(2)   54/      10 :                     cdpcm_start	ds.l 1
(2)   55/      14 :                     cdpcm_len	ds.l 1
(2)   56/      18 :                     cdpcm_loop	ds.l 1
(2)   57/      1C :                     cdpcm_nstart	ds.l 1
(2)   58/      20 :                     cdpcm_nlen	ds.l 1
(2)   59/      24 :                     cdpcm_nloop	ds.l 1
(2)   60/      28 :                     sizeof_cdpcm	ds.l 0
(2)   61/      28 : (MACRO)              		endstrct
(2)   61/       0 :                                     org GLBL_LASTORG
(2)   61/     800 :                                     phase GLBL_LASTPC
(2)   62/     800 :                     
(2)   63/     800 :                     ; ====================================================================
(2)   64/     800 :                     ; ----------------------------------------------------------------
(2)   65/     800 :                     ; Includes
(2)   66/     800 :                     ; ----------------------------------------------------------------
(2)   67/     800 :                     
(2)   68/     800 :                     		include "system/mcd/cdbios.asm"
(3)    1/     800 : =$2                  MSCSTOP           equ	$0002
(3)    2/     800 : =$3                  MSCPAUSEON        equ	$0003
(3)    3/     800 : =$4                  MSCPAUSEOFF       equ	$0004
(3)    4/     800 : =$5                  MSCSCANFF         equ	$0005
(3)    5/     800 : =$6                  MSCSCANFR         equ	$0006
(3)    6/     800 : =$7                  MSCSCANOFF        equ	$0007
(3)    7/     800 : =$8                  ROMPAUSEON        equ	$0008
(3)    8/     800 : =$9                  ROMPAUSEOFF       equ	$0009
(3)    9/     800 : =$A                  DRVOPEN           equ	$000A
(3)   10/     800 :                     
(3)   11/     800 : =$10                 DRVINIT           equ	$0010
(3)   12/     800 : =$11                 MSCPLAY           equ	$0011
(3)   13/     800 : =$12                 MSCPLAY1          equ	$0012
(3)   14/     800 : =$13                 MSCPLAYR          equ	$0013
(3)   15/     800 : =$14                 MSCPLAYT          equ	$0014
(3)   16/     800 : =$15                 MSCSEEK           equ	$0015
(3)   17/     800 : =$16                 MSCSEEKT          equ	$0016
(3)   18/     800 : =$17                 ROMREAD           equ	$0017
(3)   19/     800 : =$18                 ROMSEEK           equ	$0018
(3)   20/     800 : =$19                 MSCSEEK1          equ	$0019
(3)   21/     800 :                     
(3)   22/     800 : =$1E                 TESTENTRY         equ	$001E
(3)   23/     800 : =$1F                 TESTENTRYLOOP     equ	$001F
(3)   24/     800 : =$20                 ROMREADN          equ	$0020
(3)   25/     800 : =$21                 ROMREADE          equ	$0021
(3)   26/     800 :                     
(3)   27/     800 : =$80                 CDBCHK            equ	$0080
(3)   28/     800 : =$81                 CDBSTAT           equ	$0081
(3)   29/     800 : =$82                 CDBTOCWRITE       equ	$0082
(3)   30/     800 : =$83                 CDBTOCREAD        equ	$0083
(3)   31/     800 : =$84                 CDBPAUSE          equ	$0084
(3)   32/     800 : =$85                 FDRSET            equ	$0085
(3)   33/     800 : =$86                 FDRCHG            equ	$0086
(3)   34/     800 : =$87                 CDCSTART          equ	$0087
(3)   35/     800 : =$88                 CDCSTARTP         equ	$0088
(3)   36/     800 : =$89                 CDCSTOP           equ	$0089
(3)   37/     800 : =$8A                 CDCSTAT           equ	$008A
(3)   38/     800 : =$8B                 CDCREAD           equ	$008B
(3)   39/     800 : =$8C                 CDCTRN            equ	$008C
(3)   40/     800 : =$8D                 CDCACK            equ	$008D
(3)   41/     800 : =$8E                 SCDINIT           equ	$008E
(3)   42/     800 : =$8F                 SCDSTART          equ	$008F
(3)   43/     800 : =$90                 SCDSTOP           equ	$0090
(3)   44/     800 : =$91                 SCDSTAT           equ	$0091
(3)   45/     800 : =$92                 SCDREAD           equ	$0092
(3)   46/     800 : =$93                 SCDPQ             equ	$0093
(3)   47/     800 : =$94                 SCDPQL            equ	$0094
(3)   48/     800 : =$95                 LEDSET            equ	$0095
(3)   49/     800 : =$96                 CDCSETMODE        equ	$0096
(3)   50/     800 : =$97                 WONDERREQ         equ	$0097
(3)   51/     800 : =$98                 WONDERCHK         equ	$0098
(3)   52/     800 :                     
(3)   53/     800 : =$0                  CBTINIT           equ	$0000
(3)   54/     800 : =$1                  CBTINT            equ	$0001
(3)   55/     800 : =$2                  CBTOPENDISC       equ	$0002
(3)   56/     800 : =$3                  CBTOPENSTAT       equ	$0003
(3)   57/     800 : =$4                  CBTCHKDISC        equ	$0004
(3)   58/     800 : =$5                  CBTCHKSTAT        equ	$0005
(3)   59/     800 : =$6                  CBTIPDISC         equ	$0006
(3)   60/     800 : =$7                  CBTIPSTAT         equ	$0007
(3)   61/     800 : =$8                  CBTSPDISC         equ	$0008
(3)   62/     800 : =$9                  CBTSPSTAT         equ	$0009
(3)   63/     800 :                     
(3)   64/     800 : =$0                  BRMINIT           equ	$0000
(3)   65/     800 : =$1                  BRMSTAT           equ	$0001
(3)   66/     800 : =$2                  BRMSERCH          equ	$0002
(3)   67/     800 : =$3                  BRMREAD           equ	$0003
(3)   68/     800 : =$4                  BRMWRITE          equ	$0004
(3)   69/     800 : =$5                  BRMDEL            equ	$0005
(3)   70/     800 : =$6                  BRMFORMAT         equ	$0006
(3)   71/     800 : =$7                  BRMDIR            equ	$0007
(3)   72/     800 : =$8                  BRMVERIFY         equ	$0008
(3)   73/     800 :                     
(3)   74/     800 :                     ;-----------------------------------------------------------------------
(3)   75/     800 :                     ; BIOS ENTRY POINTS
(3)   76/     800 :                     ;-----------------------------------------------------------------------
(3)   77/     800 :                     
(3)   78/     800 : =$5F40               _ADRERR           equ	$00005F40
(3)   79/     800 : =$5EA0               _BOOTSTAT         equ	$00005EA0
(3)   80/     800 : =$5F16               _BURAM            equ	$00005F16
(3)   81/     800 : =$5F22               _CDBIOS           equ	$00005F22
(3)   82/     800 : =$5F1C               _CDBOOT           equ	$00005F1C
(3)   83/     800 : =$5E80               _CDSTAT           equ	$00005E80
(3)   84/     800 : =$5F52               _CHKERR           equ	$00005F52
(3)   85/     800 : =$5F46               _CODERR           equ	$00005F46
(3)   86/     800 : =$5F4C               _DEVERR           equ	$00005F4C
(3)   87/     800 : =$5F76               _LEVEL1           equ	$00005F76
(3)   88/     800 : =$5F7C               _LEVEL2           equ	$00005F7C
(3)   89/     800 : =$5F82               _LEVEL3           equ	$00005F82 ;TIMER INTERRUPT
(3)   90/     800 : =$5F88               _LEVEL4           equ	$00005F88
(3)   91/     800 : =$5F8E               _LEVEL5           equ	$00005F8E
(3)   92/     800 : =$5F94               _LEVEL6           equ	$00005F94
(3)   93/     800 : =$5F9A               _LEVEL7           equ	$00005F9A
(3)   94/     800 : =$5F6A               _NOCOD0           equ	$00005F6A
(3)   95/     800 : =$5F70               _NOCOD1           equ	$00005F70
(3)   96/     800 : =$5F0A               _SETJMPTBL        equ	$00005F0A
(3)   97/     800 : =$5F5E               _SPVERR           equ	$00005F5E
(3)   98/     800 : =$5F64               _TRACE            equ	$00005F64
(3)   99/     800 : =$5FA0               _TRAP00           equ	$00005FA0
(3)  100/     800 : =$5FA6               _TRAP01           equ	$00005FA6
(3)  101/     800 : =$5FAC               _TRAP02           equ	$00005FAC
(3)  102/     800 : =$5FB2               _TRAP03           equ	$00005FB2
(3)  103/     800 : =$5FB8               _TRAP04           equ	$00005FB8
(3)  104/     800 : =$5FBE               _TRAP05           equ	$00005FBE
(3)  105/     800 : =$5FC4               _TRAP06           equ	$00005FC4
(3)  106/     800 : =$5FCA               _TRAP07           equ	$00005FCA
(3)  107/     800 : =$5FD0               _TRAP08           equ	$00005FD0
(3)  108/     800 : =$5FD6               _TRAP09           equ	$00005FD6
(3)  109/     800 : =$5FDC               _TRAP10           equ	$00005FDC
(3)  110/     800 : =$5FE2               _TRAP11           equ	$00005FE2
(3)  111/     800 : =$5FE8               _TRAP12           equ	$00005FE8
(3)  112/     800 : =$5FEE               _TRAP13           equ	$00005FEE
(3)  113/     800 : =$5FF4               _TRAP14           equ	$00005FF4
(3)  114/     800 : =$5FFA               _TRAP15           equ	$00005FFA
(3)  115/     800 : =$5F58               _TRPERR           equ	$00005F58
(3)  116/     800 : =$5F28               _USERCALL0        equ	$00005F28 ;INIT
(3)  117/     800 : =$5F2E               _USERCALL1        equ	$00005F2E ;MAIN
(3)  118/     800 : =$5F34               _USERCALL2        equ	$00005F34 ;VINT
(3)  119/     800 : =$5F3A               _USERCALL3        equ	$00005F3A ;NOT DEFINED
(3)  120/     800 : =$5EA6               _USERMODE         equ	$00005EA6
(3)  121/     800 : =$5F10               _WAITVSYNC        equ	$00005F10
(3)  122/     800 :                     
(2)   69/     800 :                     
(2)   70/     800 :                     ; ====================================================================
(2)   71/     800 :                     ; ----------------------------------------------------------------
(2)   72/     800 :                     ; MAIN CODE
(2)   73/     800 :                     ; ----------------------------------------------------------------
(2)   74/     800 :                     
(2)   75/    6000 :                     		phase $6000
(2)   76/    6000 : 4D41 494E 2D4E      		dc.b "MAIN-NIKONA",0
             6006 : 494B 4F4E 4100    
(2)   77/    600C : 0000 0000           		dc.w 0,0
(2)   78/    6010 : 0000 0000           		dc.l 0
(2)   79/    6014 : 0000 0000           		dc.l 0
(2)   80/    6018 : 0000 0020           		dc.l $20
(2)   81/    601C : 0000 0000           		dc.l 0
(2)   82/    6020 :                     .table:
(2)   83/    6020 : 000A                		dc.w SP_Init-.table
(2)   84/    6022 : 00C4                		dc.w SP_Main-.table
(2)   85/    6024 : 004A                		dc.w SP_IRQ-.table
(2)   86/    6026 : 0048                		dc.w SP_User-.table
(2)   87/    6028 : 0000                		dc.w 0
(2)   88/    602A :                     
(2)   89/    602A :                     ; ====================================================================
(2)   90/    602A :                     ; ----------------------------------------------------------------
(2)   91/    602A :                     ; Init
(2)   92/    602A :                     ; ----------------------------------------------------------------
(2)   93/    602A :                     
(2)   94/    602A :                     SP_Init:
(2)   95/    602A :                     ; 		bclr	#3,(scpu_reg+$33).w
(2)   96/    602A :                     ; 		move.b	#$2F,(scpu_reg+$31).w
(2)   97/    602A :                     ; 		move.l	#SP_Timer,(_LEVEL3+2).l
(2)   98/    602A : 6100 02E4           		bsr	subCDDA_ResetVolume
(2)   99/    602E : 13FC 0000 FFFF      		move.b	#0,(scpu_reg+mcd_memory).l
             6034 : 8003             
(2)  100/    6036 : 6100 0374           		bsr	spInitFS
(2)  101/    603A : 41FA 001C           		lea	file_subdata(pc),a0
(2)  102/    603E : 6100 03A6           		bsr	spSearchFile
(2)  103/    6042 : 41F9 0002 0000      		lea	(SUBCPU_DATA),a0		; Get PCM samples
(2)  104/    6048 : 6100 02EA           		bsr	spReadSectorsN
(2)  105/    604C : 6100 03EE           		bsr	CDPCM_Init
(2)  106/    6050 : 11FC 0000 800F      		move.b	#0,(scpu_reg+mcd_comm_s).w	; Reset SUB-status
(2)  107/    6056 :                     
(2)  108/    6056 :                     ; 		bset	#3,(scpu_reg+$33).w
(2)  109/    6056 : 4E75                		rts
(2)  110/    6058 :                     
(2)  111/    6058 :                     ; --------------------------------------------------------
(2)  112/    6058 :                     
(2)  113/    6058 :                     file_subdata:
(2)  114/    6058 : 5355 425F 4441      		dc.b "SUB_DATA.BIN",0
             605E : 5441 2E42 494E 00 
(2)  115/    6065 :                     		align 2
(2)  116/    6066 :                     
(2)  117/    6066 :                     ; =====================================================================
(2)  118/    6066 :                     ; ----------------------------------------------------------------
(2)  119/    6066 :                     ; Level 3 IRQ
(2)  120/    6066 :                     ; ----------------------------------------------------------------
(2)  121/    6066 :                     
(2)  122/    6066 :                     SP_Timer:
(2)  123/    6066 :                     ; 		movem.l	d0-a6,-(sp)
(2)  124/    6066 :                     ; 		bsr	CDPCM_Stream_IRQ
(2)  125/    6066 :                     ; 		movem.l	(sp)+,d0-a6
(2)  126/    6066 : 4E73                		rte	; rte
(2)  127/    6068 :                     
(2)  128/    6068 :                     ; =====================================================================
(2)  129/    6068 :                     ; ----------------------------------------------------------------
(2)  130/    6068 :                     ; User interrupt
(2)  131/    6068 :                     ; ----------------------------------------------------------------
(2)  132/    6068 :                     
(2)  133/    6068 :                     SP_User:
(2)  134/    6068 : 4E75                		rts
(2)  135/    606A :                     
(2)  136/    606A :                     ; =====================================================================
(2)  137/    606A :                     ; ----------------------------------------------------------------
(2)  138/    606A :                     ; Level 2 IRQ
(2)  139/    606A :                     ;
(2)  140/    606A :                     ; WARNING: The SEGA intro before starting
(2)  141/    606A :                     ; the game calls this every frame.
(2)  142/    606A :                     ; ----------------------------------------------------------------
(2)  143/    606A :                     
(2)  144/    606A :                     SP_IRQ:
(2)  145/    606A : 1038 800E           		move.b	(scpu_reg+mcd_comm_m).w,d0
(2)  146/    606E : 0240 00F0           		andi.w	#$F0,d0
(2)  147/    6072 : 0C40 00F0           		cmpi.w	#$F0,d0				; Z80 wants to enter ($F0)?
(2)  148/    6076 : 666A                		bne	.not_now
(2)  149/    6078 :                     ; 		bclr	#3,(scpu_reg+$33).w		; Disable Timer interrupt
(2)  150/    6078 : 11FC 00FF 800F      		move.b	#-1,(scpu_reg+mcd_comm_s).w	; Respond to Z80
(2)  151/    607E :                     .wait_start:
(2)  152/    607E : 1038 800E           		move.b	(scpu_reg+mcd_comm_m).w,d0	; MAIN is ready?
(2)  153/    6082 : 0800 0001           		btst	#1,d0
(2)  154/    6086 : 67F6                		beq.s	.wait_start
(2)  155/    6088 : 6100 0514           		bsr	CDPCM_Stream_IRQ
(2)  156/    608C : 43F8 6AC0           		lea	(RAM_CdSub_PcmTable),a1
(2)  157/    6090 : 45F8 8018           		lea	(scpu_reg+mcd_dcomm_m+8).w,a2
(2)  158/    6094 : 11FC 0000 800F      		move.b	#$00,(scpu_reg+mcd_comm_s).w
(2)  159/    609A :                     
(2)  160/    609A :                     ; ----------------------------------------------------------------
(2)  161/    609A :                     ; a1 - table
(2)  162/    609A :                     ; a2 - MAIN data
(2)  163/    609A :                     
(2)  164/    609A :                     .next_packet:
(2)  165/    609A : 1039 FFFF 800E      		move.b	(scpu_reg+mcd_comm_m).l,d0	; Wait PASS
(2)  166/    60A0 : 0800 0001           		btst	#1,d0				; LOCK enabled?
(2)  167/    60A4 : 6734                		beq.s	.exit_now
(2)  168/    60A6 : 0800 0000           		btst	#0,d0				; MAIN passed the packet?
(2)  169/    60AA : 67EE                		beq.s	.next_packet
(2)  170/    60AC : 204A                		move.l	a2,a0
(2)  171/    60AE : 32D8                		move.w	(a0)+,(a1)+			; WORD passes
(2)  172/    60B0 : 32D8                		move.w	(a0)+,(a1)+
(2)  173/    60B2 : 32D8                		move.w	(a0)+,(a1)+
(2)  174/    60B4 : 32D8                		move.w	(a0)+,(a1)+
(2)  175/    60B6 : 48E7 8060           		movem.l	d0/a1-a2,-(sp)
(2)  176/    60BA : 6100 04E2           		bsr	CDPCM_Stream_IRQ
(2)  177/    60BE : 4CDF 0601           		movem.l	(sp)+,d0/a1-a2
(2)  178/    60C2 : 11FC 0001 800F      		move.b	#$01,(scpu_reg+mcd_comm_s).w	; Sub-CPU got the data
(2)  179/    60C8 : 1038 800E           .wait_main:	move.b	(scpu_reg+mcd_comm_m).w,d0	; Wait Z80 bit
(2)  180/    60CC : 0800 0000           		btst	#0,d0
(2)  181/    60D0 : 66F6                		bne.s	.wait_main
(2)  182/    60D2 : 11FC 0000 800F      		move.b	#$00,(scpu_reg+mcd_comm_s).w	; Sub-CPU is free
(2)  183/    60D8 : 60C0                		bra	.next_packet
(2)  184/    60DA : 6100 04C2           .exit_now:	bsr	CDPCM_Stream_IRQ
(2)  185/    60DE : 6100 03D8           		bsr	CDPCM_ReadTable
(2)  186/    60E2 :                     .not_now:
(2)  187/    60E2 :                     ; 		bset	#3,(scpu_reg+$33).w		; Enable Timer interrupt
(2)  188/    60E2 : 4E75                		rts
(2)  189/    60E4 :                     
(2)  190/    60E4 :                     ; ====================================================================
(2)  191/    60E4 :                     ; ----------------------------------------------------------------
(2)  192/    60E4 :                     ; Main
(2)  193/    60E4 :                     ;
(2)  194/    60E4 :                     ; mcd_comm_m COMMAND READ ONLY:
(2)  195/    60E4 :                     ; %lp0iiiii
(2)  196/    60E4 :                     ;
(2)  197/    60E4 :                     ; mcd_comm_s STATUS READ/WRITE:
(2)  198/    60E4 :                     ; %bp000000
(2)  199/    60E4 :                     ;
(2)  200/    60E4 :                     ; a6 - comm data MAIN (READ ONLY)
(2)  201/    60E4 :                     ; a5 - comm data SUB (READ/WRITE)
(2)  202/    60E4 :                     ; ----------------------------------------------------------------
(2)  203/    60E4 :                     
(2)  204/    60E4 :                     SP_Main:
(2)  205/    60E4 :                     	rept 5
(2)  206/    60E4 :                     		bsr	CDPCM_Stream
(2)  207/    60E4 :                     	endm
(2)  206/    60E4 : 6100 04AC           		bsr	CDPCM_Stream
(2)  206/    60E8 : 6100 04A8           		bsr	CDPCM_Stream
(2)  206/    60EC : 6100 04A4           		bsr	CDPCM_Stream
(2)  206/    60F0 : 6100 04A0           		bsr	CDPCM_Stream
(2)  206/    60F4 : 6100 049C           		bsr	CDPCM_Stream
(2)  208/    60F8 : 1038 800E           		move.b	(scpu_reg+mcd_comm_m).w,d0
(2)  209/    60FC : 1200                		move.b	d0,d1
(2)  210/    60FE : 0241 00F0           		andi.w	#$F0,d1
(2)  211/    6102 : 0C01 00F0           		cmpi.b	#$F0,d1					; Z80 got first?
(2)  212/    6106 : 67DC                		beq.s	SP_Main
(2)  213/    6108 : 2F00                		move.l	d0,-(sp)
(2)  214/    610A : 6100 0486           		bsr	CDPCM_Stream
(2)  215/    610E : 201F                		move.l	(sp)+,d0
(2)  216/    6110 : 0240 003F           		andi.w	#%00111111,d0				; <-- current limit
(2)  217/    6114 : 67CE                		beq.s	SP_Main
(2)  218/    6116 :                     ; 		bclr	#3,(scpu_reg+$33).w
(2)  219/    6116 : 2F00                		move.l	d0,-(sp)
(2)  220/    6118 : 6100 0478           		bsr	CDPCM_Stream
(2)  221/    611C : 201F                		move.l	(sp)+,d0
(2)  222/    611E : 1E38 800F           		move.b	(scpu_reg+mcd_comm_s).w,d7
(2)  223/    6122 : 08C7 0007           		bset	#7,d7
(2)  224/    6126 : 11C7 800F           		move.b	d7,(scpu_reg+mcd_comm_s).w		; Tell MAIN we are working.
(2)  225/    612A : D040                		add.w	d0,d0					; index*2
(2)  226/    612C : 323B 0014           		move.w	SP_cmdlist(pc,d0.w),d1
(2)  227/    6130 : 4EBB 1010           		jsr	SP_cmdlist(pc,d1.w)
(2)  228/    6134 : 1E38 800F           		move.b	(scpu_reg+mcd_comm_s).w,d7
(2)  229/    6138 : 0887 0007           		bclr	#7,d7
(2)  230/    613C : 11C7 800F           		move.b	d7,(scpu_reg+mcd_comm_s).w		; Tell MAIN we finished.
(2)  231/    6140 :                     ; 		bset	#3,(scpu_reg+$33).w
(2)  232/    6140 : 60A2                		bra	SP_Main
(2)  233/    6142 :                     
(2)  234/    6142 :                     	; ** DO NOT RETURN WITH RTS **
(2)  235/    6142 :                     	; On return it goes on a loop expecting a flag set
(2)  236/    6142 :                     	; by VBlank, the IRQ is now used by the Z80
(2)  237/    6142 :                     	; to Transfer the PCM table (Z80->here)
(2)  238/    6142 :                     
(2)  239/    6142 :                     ; =====================================================================
(2)  240/    6142 :                     ; ----------------------------------------------------------------
(2)  241/    6142 :                     ; Commands list
(2)  242/    6142 :                     ; ----------------------------------------------------------------
(2)  243/    6142 :                     
(2)  244/    6142 :                     ; Struct
(2)  245/    6142 :                     ; $01-$0F: Common memory handling
(2)  246/    6142 :                     ; $10-$1F: CDDA Playback control
(2)  247/    6142 :                     ; $20-$2F: ???
(2)  248/    6142 :                     ; $30-$3F: ???
(2)  249/    6142 :                     
(2)  250/    6142 :                     SP_cmdlist:
(2)  251/    6142 : 0060                		dc.w SP_cmnd00-SP_cmdlist	; $00 | **INVALID**
(2)  252/    6144 : 0062                		dc.w SP_cmnd01-SP_cmdlist	; $01 | Read file from disc, copy data through mcd_dcomm_s
(2)  253/    6146 : 00E4                		dc.w SP_cmnd02-SP_cmdlist	; $02 | Read file from disc, sends output to WORD-RAM
(2)  254/    6148 : 0060                		dc.w SP_cmnd00-SP_cmdlist	; $03
(2)  255/    614A : 0060                		dc.w SP_cmnd00-SP_cmdlist	; $04
(2)  256/    614C : 0060                		dc.w SP_cmnd00-SP_cmdlist	; $05
(2)  257/    614E : 0060                		dc.w SP_cmnd00-SP_cmdlist	; $06
(2)  258/    6150 : 0060                		dc.w SP_cmnd00-SP_cmdlist	; $07 | Set 2M WORD-RAM permission to MAIN
(2)  259/    6152 : 0116                		dc.w SP_cmnd08-SP_cmdlist	; $08 | Get data from MAIN through mcd_dcomm_m
(2)  260/    6154 : 0060                		dc.w SP_cmnd00-SP_cmdlist	; $09
(2)  261/    6156 : 0060                		dc.w SP_cmnd00-SP_cmdlist	; $0A
(2)  262/    6158 : 0060                		dc.w SP_cmnd00-SP_cmdlist	; $0B
(2)  263/    615A : 0060                		dc.w SP_cmnd00-SP_cmdlist	; $0C
(2)  264/    615C : 0060                		dc.w SP_cmnd00-SP_cmdlist	; $0D
(2)  265/    615E : 0060                		dc.w SP_cmnd00-SP_cmdlist	; $0E
(2)  266/    6160 : 0060                		dc.w SP_cmnd00-SP_cmdlist	; $0F
(2)  267/    6162 :                     
(2)  268/    6162 : 0186                		dc.w SP_cmnd10-SP_cmdlist	; $10 | Play CDDA once
(2)  269/    6164 : 019E                		dc.w SP_cmnd11-SP_cmdlist	; $11 | Play CDDA and loop
(2)  270/    6166 : 0060                		dc.w SP_cmnd00-SP_cmdlist	; $12 |
(2)  271/    6168 : 0060                		dc.w SP_cmnd00-SP_cmdlist	; $13 |
(2)  272/    616A : 01B6                		dc.w SP_cmnd14-SP_cmdlist	; $14 | Stop CDDA
(2)  273/    616C : 0060                		dc.w SP_cmnd00-SP_cmdlist	; $15 |
(2)  274/    616E : 01C0                		dc.w SP_cmnd16-SP_cmdlist	; $16 | CDDA fade-out
(2)  275/    6170 : 01CE                		dc.w SP_cmnd17-SP_cmdlist	; $17 | CDDA Reset volumes
(2)  276/    6172 : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  277/    6174 : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  278/    6176 : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  279/    6178 : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  280/    617A : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  281/    617C : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  282/    617E : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  283/    6180 : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  284/    6182 :                     
(2)  285/    6182 : 01F0                		dc.w SP_cmnd20-SP_cmdlist
(2)  286/    6184 : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  287/    6186 : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  288/    6188 : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  289/    618A : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  290/    618C : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  291/    618E : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  292/    6190 : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  293/    6192 : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  294/    6194 : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  295/    6196 : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  296/    6198 : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  297/    619A : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  298/    619C : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  299/    619E : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  300/    61A0 : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  301/    61A2 :                     
(2)  302/    61A2 :                     ; =====================================================================
(2)  303/    61A2 :                     ; ----------------------------------------------------------------
(2)  304/    61A2 :                     ; Commands $01-$0F
(2)  305/    61A2 :                     ;
(2)  306/    61A2 :                     ; General purpose data transfering
(2)  307/    61A2 :                     ; ----------------------------------------------------------------
(2)  308/    61A2 :                     
(2)  309/    61A2 :                     ; --------------------------------------------------------
(2)  310/    61A2 :                     ; NULL COMMAND
(2)  311/    61A2 :                     ; --------------------------------------------------------
(2)  312/    61A2 :                     
(2)  313/    61A2 :                     SP_cmnd00:
(2)  314/    61A2 : 4E75                		rts
(2)  315/    61A4 :                     
(2)  316/    61A4 :                     ; --------------------------------------------------------
(2)  317/    61A4 :                     ; Command $01
(2)  318/    61A4 :                     ;
(2)  319/    61A4 :                     ; Read data from disc and transfer through
(2)  320/    61A4 :                     ; dcomm_s as packets of $10 bytes
(2)  321/    61A4 :                     ;
(2)  322/    61A4 :                     ; Input:
(2)  323/    61A4 :                     ; mcd_comm_m  | %lp------
(2)  324/    61A4 :                     ;               l - LOCK bit set by MAIN-CPU
(2)  325/    61A4 :                     ;               p - Data-PASS bit
(2)  326/    61A4 :                     ;
(2)  327/    61A4 :                     ; mcd_dcomm_m | "FILENAME.BIN",0
(2)  328/    61A4 :                     ;               Filename string 8.3 zero terminated
(2)  329/    61A4 :                     ;
(2)  330/    61A4 :                     ; Returns:
(2)  331/    61A4 :                     ; mcd_comm_s  | %-p------
(2)  332/    61A4 :                     ;               p - SUB-CPU reports that data passed
(2)  333/    61A4 :                     ;
(2)  334/    61A4 :                     ; Uses:
(2)  335/    61A4 :                     ; mcd_dcomm_s $00 to $10
(2)  336/    61A4 :                     ; --------------------------------------------------------
(2)  337/    61A4 :                     
(2)  338/    61A4 :                     SP_cmnd01:
(2)  339/    61A4 : 303C 0002           		move.w	#MSCSTOP,d0			; Stop CDDA music
(2)  340/    61A8 : 4EB8 5F22           		jsr	(_CDBIOS).w
(2)  341/    61AC : 41F8 8010           		lea	(scpu_reg+mcd_dcomm_m).w,a0	; a0 - Filename
(2)  342/    61B0 : 6100 0234           		bsr	spSearchFile
(2)  343/    61B4 : 41F9 0000 EB04      		lea	(ISO_Output),a0
(2)  344/    61BA : 6100 0178           		bsr	spReadSectorsN
(2)  345/    61BE : 41F9 0000 EB04      		lea	(ISO_Output),a0
(2)  346/    61C4 : 45F8 8020           		lea	(scpu_reg+mcd_dcomm_s).w,a2
(2)  347/    61C8 :                     .next_packet:
(2)  348/    61C8 : 224A                		move.l	a2,a1
(2)  349/    61CA : 32D8                		move.w	(a0)+,(a1)+			; WORD writes
(2)  350/    61CC : 32D8                		move.w	(a0)+,(a1)+
(2)  351/    61CE : 32D8                		move.w	(a0)+,(a1)+
(2)  352/    61D0 : 32D8                		move.w	(a0)+,(a1)+
(2)  353/    61D2 : 32D8                		move.w	(a0)+,(a1)+
(2)  354/    61D4 : 32D8                		move.w	(a0)+,(a1)+
(2)  355/    61D6 : 32D8                		move.w	(a0)+,(a1)+
(2)  356/    61D8 : 32D8                		move.w	(a0)+,(a1)+
(2)  357/    61DA : 1E38 800F           		move.b	(scpu_reg+mcd_comm_s).w,d7	; Sub PASS bit
(2)  358/    61DE : 08C7 0006           		bset	#6,d7
(2)  359/    61E2 : 11C7 800F           		move.b	d7,(scpu_reg+mcd_comm_s).w
(2)  360/    61E6 : 1E38 800E           .wait_main:	move.b	(scpu_reg+mcd_comm_m).w,d7	; MAIN got data?
(2)  361/    61EA : 0807 0007           		btst	#7,d7				; Unlocked?
(2)  362/    61EE : 671E                		beq.s	.exit_now
(2)  363/    61F0 : 0807 0006           		btst	#6,d7				; MAIN got the data?
(2)  364/    61F4 : 67F0                		beq.s	.wait_main
(2)  365/    61F6 : 1E38 800F           		move.b	(scpu_reg+mcd_comm_s).w,d7	; Clear Sub PASS
(2)  366/    61FA : 0887 0006           		bclr	#6,d7
(2)  367/    61FE : 11C7 800F           		move.b	d7,(scpu_reg+mcd_comm_s).w
(2)  368/    6202 : 1E38 800E           .wait_main_o:	move.b	(scpu_reg+mcd_comm_m).w,d7	; Wait MAIN response.
(2)  369/    6206 : 0807 0006           		btst	#6,d7
(2)  370/    620A : 66F6                		bne.s	.wait_main_o
(2)  371/    620C : 60BA                		bra.s	.next_packet
(2)  372/    620E : 1E38 800F           .exit_now:	move.b	(scpu_reg+mcd_comm_s).w,d7	; Clear Sub PASS
(2)  373/    6212 : 0887 0006           		bclr	#6,d7
(2)  374/    6216 : 11C7 800F           		move.b	d7,(scpu_reg+mcd_comm_s).w
(2)  375/    621A : 08F9 0000 FFFF      .wait_ret:	bset	#0,(scpu_reg+mcd_memory).l	; Return 2M WORDRAM to MAIN, RET=1
             6220 : 8003             
(2)  376/    6222 : 67F6                		beq.s	.wait_ret
(2)  377/    6224 : 4E75                		rts
(2)  378/    6226 :                     
(2)  379/    6226 :                     ; --------------------------------------------------------
(2)  380/    6226 :                     ; Command $02
(2)  381/    6226 :                     ;
(2)  382/    6226 :                     ; Read data from disc directly to WORD-RAM
(2)  383/    6226 :                     ;
(2)  384/    6226 :                     ; Input:
(2)  385/    6226 :                     ; mcd_dcomm_m | "FILENAME.BIN",0
(2)  386/    6226 :                     ;               Filename string 8.3 zero terminated
(2)  387/    6226 :                     ; --------------------------------------------------------
(2)  388/    6226 :                     
(2)  389/    6226 :                     SP_cmnd02:
(2)  390/    6226 : 1039 FFFF 8003      		move.b	(scpu_reg+mcd_memory).l,d0
(2)  391/    622C : 0800 0001           		btst	#1,d0
(2)  392/    6230 : 67F4                		beq.s	SP_cmnd02
(2)  393/    6232 : 303C 0002           		move.w	#MSCSTOP,d0			; Stop CDDA music
(2)  394/    6236 : 4EB8 5F22           		jsr	(_CDBIOS).w
(2)  395/    623A : 41F8 8010           		lea	(scpu_reg+mcd_dcomm_m).w,a0	; a0 - filename
(2)  396/    623E : 6100 01A6           		bsr	spSearchFile
(2)  397/    6242 : 41F9 0008 0000      		lea	(scpu_wram),a0
(2)  398/    6248 : 6100 00EA           		bsr	spReadSectorsN
(2)  399/    624C : 08F9 0000 FFFF      .wait_ret:	bset	#0,(scpu_reg+mcd_memory).l	; Return WORDRAM to MAIN, RET=1
             6252 : 8003             
(2)  400/    6254 : 67F6                		beq.s	.wait_ret
(2)  401/    6256 : 4E75                		rts
(2)  402/    6258 :                     
(2)  403/    6258 :                     ; --------------------------------------------------------
(2)  404/    6258 :                     ; Command $08
(2)  405/    6258 :                     ;
(2)  406/    6258 :                     ; Transfer memory from MAIN-CPU to SUB-CPU
(2)  407/    6258 :                     ;
(2)  408/    6258 :                     ; Input:
(2)  409/    6258 :                     ; mcd_comm_m  | %lp------
(2)  410/    6258 :                     ;               l - LOCK bit set by MAIN-CPU
(2)  411/    6258 :                     ;               p - Data-PASS bit
(2)  412/    6258 :                     ;
(2)  413/    6258 :                     ; mcd_dcomm_m | From $00 to $07
(2)  414/    6258 :                     ;               Data packets
(2)  415/    6258 :                     ;
(2)  416/    6258 :                     ; Returns:
(2)  417/    6258 :                     ; mcd_comm_s  | %-p------
(2)  418/    6258 :                     ;               p - SUB-CPU reports that data passed
(2)  419/    6258 :                     ; --------------------------------------------------------
(2)  420/    6258 :                     
(2)  421/    6258 :                     SP_cmnd08:
(2)  422/    6258 : 45F8 8010           		lea	(scpu_reg+mcd_dcomm_m).w,a2
(2)  423/    625C : 3012                		move.w	(a2),d0				; a1 - Destination
(2)  424/    625E : 4840                		swap	d0
(2)  425/    6260 : 302A 0002           		move.w	2(a2),d0
(2)  426/    6264 : 2240                		move.l	d0,a1
(2)  427/    6266 : 1E38 800F           		move.b	(scpu_reg+mcd_comm_s).w,d7	; Tell MAIN we got the a1
(2)  428/    626A : 08C7 0006           		bset	#6,d7
(2)  429/    626E : 11C7 800F           		move.b	d7,(scpu_reg+mcd_comm_s).w
(2)  430/    6272 : 1038 800E           .wait_start:	move.b	(scpu_reg+mcd_comm_m).w,d0	; Wait for MAIN
(2)  431/    6276 : 0800 0007           		btst	#7,d0
(2)  432/    627A : 67F6                		beq.s	.wait_start
(2)  433/    627C : 1E38 800F           		move.b	(scpu_reg+mcd_comm_s).w,d7
(2)  434/    6280 : 0887 0006           		bclr	#6,d7
(2)  435/    6284 : 11C7 800F           		move.b	d7,(scpu_reg+mcd_comm_s).w
(2)  436/    6288 :                     .next_packet:
(2)  437/    6288 : 1E38 800E           		move.b	(scpu_reg+mcd_comm_m).w,d7
(2)  438/    628C : 0807 0007           		btst	#7,d7
(2)  439/    6290 : 6734                		beq.s	.exit_now
(2)  440/    6292 : 0807 0006           		btst	#6,d7
(2)  441/    6296 : 67F0                		beq.s	.next_packet
(2)  442/    6298 : 204A                		move.l	a2,a0
(2)  443/    629A : 32D8                		move.w	(a0)+,(a1)+			; WORD writes to be safe...
(2)  444/    629C : 32D8                		move.w	(a0)+,(a1)+
(2)  445/    629E : 32D8                		move.w	(a0)+,(a1)+
(2)  446/    62A0 : 32D8                		move.w	(a0)+,(a1)+
(2)  447/    62A2 :                     ; 		move.w	(a0)+,(a1)+
(2)  448/    62A2 :                     ; 		move.w	(a0)+,(a1)+
(2)  449/    62A2 :                     ; 		move.w	(a0)+,(a1)+
(2)  450/    62A2 :                     ; 		move.w	(a0)+,(a1)+
(2)  451/    62A2 : 1E38 800F           		move.b	(scpu_reg+mcd_comm_s).w,d7
(2)  452/    62A6 : 08C7 0006           		bset	#6,d7
(2)  453/    62AA : 11C7 800F           		move.b	d7,(scpu_reg+mcd_comm_s).w
(2)  454/    62AE : 1E38 800E           .wait_main:	move.b	(scpu_reg+mcd_comm_m).w,d7	; Wait MAIN
(2)  455/    62B2 : 0807 0006           		btst	#6,d7
(2)  456/    62B6 : 66F6                		bne.s	.wait_main
(2)  457/    62B8 : 1E38 800F           		move.b	(scpu_reg+mcd_comm_s).w,d7
(2)  458/    62BC : 0887 0006           		bclr	#6,d7
(2)  459/    62C0 : 11C7 800F           		move.b	d7,(scpu_reg+mcd_comm_s).w
(2)  460/    62C4 : 60C2                		bra	.next_packet
(2)  461/    62C6 :                     .exit_now:
(2)  462/    62C6 : 4E75                		rts
(2)  463/    62C8 :                     
(2)  464/    62C8 :                     ; =====================================================================
(2)  465/    62C8 :                     ; ----------------------------------------------------------------
(2)  466/    62C8 :                     ; Commands $10-$1F
(2)  467/    62C8 :                     ;
(2)  468/    62C8 :                     ; CDDA
(2)  469/    62C8 :                     ; ----------------------------------------------------------------
(2)  470/    62C8 :                     
(2)  471/    62C8 :                     ; --------------------------------------------------------
(2)  472/    62C8 :                     ; Command $10
(2)  473/    62C8 :                     ;
(2)  474/    62C8 :                     ; Play CDDA Track, once
(2)  475/    62C8 :                     ;
(2)  476/    62C8 :                     ; Input:
(2)  477/    62C8 :                     ; mcd_dcomm_m | dc.w CD track number
(2)  478/    62C8 :                     ;                    - DO NOT USE TRACK 1
(2)  479/    62C8 :                     ;                    - TRACK 0 IS INVALID
(2)  480/    62C8 :                     ; --------------------------------------------------------
(2)  481/    62C8 :                     
(2)  482/    62C8 :                     SP_cmnd10:
(2)  483/    62C8 : 303C 0002           		move.w	#MSCSTOP,d0
(2)  484/    62CC : 4EB8 5F22           		jsr	(_CDBIOS).w
(2)  485/    62D0 : 613E                		bsr	subCDDA_ResetVolume
(2)  486/    62D2 : 41F8 8010           		lea	(scpu_reg+mcd_dcomm_m).w,a0
(2)  487/    62D6 : 303C 0012           		move.w	#MSCPLAY1,d0
(2)  488/    62DA : 4EB8 5F22           		jsr	(_CDBIOS).w
(2)  489/    62DE : 4E75                		rts
(2)  490/    62E0 :                     
(2)  491/    62E0 :                     ; --------------------------------------------------------
(2)  492/    62E0 :                     ; Command $11
(2)  493/    62E0 :                     ;
(2)  494/    62E0 :                     ; Play CDDA Track, loops
(2)  495/    62E0 :                     ;
(2)  496/    62E0 :                     ; Input:
(2)  497/    62E0 :                     ; mcd_dcomm_m | dc.w track_num ; Track number
(2)  498/    62E0 :                     ;                    - DO NOT USE TRACK 1
(2)  499/    62E0 :                     ;                    - TRACK 0 IS INVALID
(2)  500/    62E0 :                     ; --------------------------------------------------------
(2)  501/    62E0 :                     
(2)  502/    62E0 :                     SP_cmnd11:
(2)  503/    62E0 : 303C 0002           		move.w	#MSCSTOP,d0
(2)  504/    62E4 : 4EB8 5F22           		jsr	(_CDBIOS).w
(2)  505/    62E8 : 6126                		bsr	subCDDA_ResetVolume
(2)  506/    62EA : 41F8 8010           		lea	(scpu_reg+mcd_dcomm_m).w,a0
(2)  507/    62EE : 303C 0013           		move.w	#MSCPLAYR,d0
(2)  508/    62F2 : 4EB8 5F22           		jsr	(_CDBIOS).w
(2)  509/    62F6 : 4E75                		rts
(2)  510/    62F8 :                     
(2)  511/    62F8 :                     ; --------------------------------------------------------
(2)  512/    62F8 :                     ; Command $14
(2)  513/    62F8 :                     ;
(2)  514/    62F8 :                     ; Stop CDDA Track
(2)  515/    62F8 :                     ; --------------------------------------------------------
(2)  516/    62F8 :                     
(2)  517/    62F8 :                     SP_cmnd14:
(2)  518/    62F8 : 303C 0002           		move.w	#MSCSTOP,d0
(2)  519/    62FC : 4EB8 5F22           		jsr	(_CDBIOS).w
(2)  520/    6300 : 600E                		bra	subCDDA_ResetVolume
(2)  521/    6302 :                     
(2)  522/    6302 :                     ; --------------------------------------------------------
(2)  523/    6302 :                     ; Command $16
(2)  524/    6302 :                     ;
(2)  525/    6302 :                     ; Fade-out/Fade-in CD Volume
(2)  526/    6302 :                     ;
(2)  527/    6302 :                     ; Input:
(2)  528/    6302 :                     ; mcd_dcomm_m | dc.w target_vol,fade_speed
(2)  529/    6302 :                     ;
(2)  530/    6302 :                     ;               Target volume: $000-$400 Max-Min
(2)  531/    6302 :                     ;               Fade Speed:    $001-$200 Slow-Fast
(2)  532/    6302 :                     ;                                   $400 Set once
(2)  533/    6302 :                     ; --------------------------------------------------------
(2)  534/    6302 :                     
(2)  535/    6302 :                     SP_cmnd16:
(2)  536/    6302 : 2238 8010           		move.l	(scpu_reg+mcd_dcomm_m).w,d1
(2)  537/    6306 : 303C 0086           		move.w	#FDRCHG,d0
(2)  538/    630A : 4EB8 5F22           		jsr	_CDBIOS.w
(2)  539/    630E : 4E75                		rts
(2)  540/    6310 :                     
(2)  541/    6310 :                     ; --------------------------------------------------------
(2)  542/    6310 :                     ; Command $17
(2)  543/    6310 :                     ;
(2)  544/    6310 :                     ; CDDA Fade-out
(2)  545/    6310 :                     ; --------------------------------------------------------
(2)  546/    6310 :                     
(2)  547/    6310 :                     SP_cmnd17:
(2)  548/    6310 :                     ; 		move.l	#$0380,d1
(2)  549/    6310 :                     ; 		move.w	#FDRSET,d0			; Set CDDA music volume
(2)  550/    6310 :                     ; 		jsr	(_CDBIOS).w
(2)  551/    6310 :                     ; 		move.l	#$0380|$8000,d1
(2)  552/    6310 :                     ; 		move.w	#FDRSET,d0			; Set CDDA music master volume
(2)  553/    6310 :                     ; 		jsr	(_CDBIOS).w
(2)  554/    6310 :                     ; 		rts
(2)  555/    6310 :                     
(2)  556/    6310 :                     ; --------------------------------------------------------
(2)  557/    6310 :                     ; CDDA subroutines:
(2)  558/    6310 :                     
(2)  559/    6310 :                     subCDDA_ResetVolume:
(2)  560/    6310 : 48E7 C0C0           		movem.l	d0-d1/a0-a1,-(sp)
(2)  561/    6314 : 323C 0400           		move.w	#$0400,d1
(2)  562/    6318 : 303C 0085           		move.w	#FDRSET,d0			; Set CDDA music volume
(2)  563/    631C : 4EB8 5F22           		jsr	(_CDBIOS).w
(2)  564/    6320 : 323C 8400           		move.w	#$0400|$8000,d1
(2)  565/    6324 : 303C 0085           		move.w	#FDRSET,d0			; Set CDDA music master volume
(2)  566/    6328 : 4EB8 5F22           		jsr	(_CDBIOS).w
(2)  567/    632C : 4CDF 0303           		movem.l	(sp)+,d0-d1/a0-a1
(2)  568/    6330 : 4E75                		rts
(2)  569/    6332 :                     
(2)  570/    6332 :                     ; =====================================================================
(2)  571/    6332 :                     ; ----------------------------------------------------------------
(2)  572/    6332 :                     ; Commands $20-$2F
(2)  573/    6332 :                     ;
(2)  574/    6332 :                     ; Stamps
(2)  575/    6332 :                     ; ----------------------------------------------------------------
(2)  576/    6332 :                     
(2)  577/    6332 :                     ; --------------------------------------------------------
(2)  578/    6332 :                     ; Command $20
(2)  579/    6332 :                     ; --------------------------------------------------------
(2)  580/    6332 :                     
(2)  581/    6332 :                     SP_cmnd20:
(2)  582/    6332 : 4E75                		rts
(2)  583/    6334 :                     
(2)  584/    6334 :                     ; =====================================================================
(2)  585/    6334 :                     ; ----------------------------------------------------------------
(2)  586/    6334 :                     ; Subroutines
(2)  587/    6334 :                     ; ----------------------------------------------------------------
(2)  588/    6334 :                     
(2)  589/    6334 :                     ; --------------------------------------------------------
(2)  590/    6334 :                     ; CD-ROM data
(2)  591/    6334 :                     ; --------------------------------------------------------
(2)  592/    6334 :                     
(2)  593/    6334 :                     ; ------------------------------------------------
(2)  594/    6334 :                     ; spReadSectorsN
(2)  595/    6334 :                     ;
(2)  596/    6334 :                     ; Input:
(2)  597/    6334 :                     ; a0 - Destination
(2)  598/    6334 :                     ; d0 - Sector start
(2)  599/    6334 :                     ; d1 - Number of sectors
(2)  600/    6334 :                     ; d2 - Destination increment (Only 0 or $800)
(2)  601/    6334 :                     ; ------------------------------------------------
(2)  602/    6334 :                     
(2)  603/    6334 :                     spReadSectorsN:
(2)  604/    6334 : 4BF9 0001 6B04      		lea	(RAM_CdSub_FsBuff),a5
(2)  605/    633A : 0280 0000 FFFF      		andi.l	#$FFFF,d0
(2)  606/    6340 : 0281 0000 FFFF      		andi.l	#$FFFF,d1
(2)  607/    6346 : 2A80                		move.l	d0,(a5)
(2)  608/    6348 : 2B41 0004           		move.l	d1,4(a5)
(2)  609/    634C : 2B48 0008           		move.l	a0,8(a5)
(2)  610/    6350 : 11FC 0003 8004      		move.b	#%011,(scpu_reg+4).w		; Set CDC device to "Sub CPU"
(2)  611/    6356 : 303C 0089           		move.w	#CDCSTOP,d0			; Stop CDC
(2)  612/    635A : 4EB8 5F22           		jsr	(_CDBIOS).w
(2)  613/    635E : 204D                		move.l	a5,a0
(2)  614/    6360 : 303C 0020           		move.w	#ROMREADN,d0			; Read sector by count
(2)  615/    6364 : 4EB8 5F22           		jsr	(_CDBIOS).w
(2)  616/    6368 :                     .wait_STAT:
(2)  617/    6368 : 303C 008A           		move.w	#CDCSTAT,d0			; Get CDC Status
(2)  618/    636C : 4EB8 5F22           		jsr	(_CDBIOS).w
(2)  619/    6370 : 65F6                 		bcs.s	.wait_STAT
(2)  620/    6372 :                     .wait_READ:
(2)  621/    6372 : 303C 008B           		move.w	#CDCREAD,d0			; CDC Read mode
(2)  622/    6376 : 4EB8 5F22           		jsr	(_CDBIOS).w
(2)  623/    637A : 65F6                		bcs.s	.wait_READ
(2)  624/    637C : 2B40 0010           		move.l	d0,$10(a5)
(2)  625/    6380 :                     .WaitTransfer:
(2)  626/    6380 : 206D 0008           		movea.l	8(a5),a0		; a0 - DATA Destination
(2)  627/    6384 : 43ED 0010           		lea	$10(a5),a1			; a1 - HEADER out
(2)  628/    6388 : 303C 008C           		move.w	#CDCTRN,d0			; CDC Transfer data
(2)  629/    638C : 4EB8 5F22           		jsr	(_CDBIOS).w
(2)  630/    6390 : 65EE                		bcs.s	.waitTransfer			; If not done, branch
(2)  631/    6392 :                     
(2)  632/    6392 : 303C 008D           		move.w	#CDCACK,d0			; Finish read
(2)  633/    6396 : 4EB8 5F22           		jsr	(_CDBIOS).w
(2)  634/    639A :                     
(2)  635/    639A : 06AD 0000 0800      		addi.l	#$800,8(a5)
             63A0 : 0008             
(2)  636/    63A2 : 5295                		addq.l	#1,(a5)
(2)  637/    63A4 : 53AD 0004           		subq.l	#1,4(a5)
(2)  638/    63A8 : 66BE                		bne.s	.wait_STAT
(2)  639/    63AA : 4E75                		rts
(2)  640/    63AC :                     
(2)  641/    63AC :                     ; ------------------------------------------------
(2)  642/    63AC :                     ; ISO9660 Driver
(2)  643/    63AC :                     ; ------------------------------------------------
(2)  644/    63AC :                     
(2)  645/    63AC :                     spInitFS:
(2)  646/    63AC : 48E7 FFFE           		movem.l	d0-d7/a0-a6,-(a7)
(2)  647/    63B0 :                     	; Load Volume VolumeDescriptor
(2)  648/    63B0 : 7010                		moveq	#$10,d0			; Start Sector (at $8000)
(2)  649/    63B2 : 7210                		moveq	#$10,d1			; Sector size
(2)  650/    63B4 : 41F8 6B04           		lea	(ISO_Filelist),a0	; Destination
(2)  651/    63B8 : 6100 FF7A           		bsr	spReadSectorsN
(2)  652/    63BC :                     	; Load Root Directory
(2)  653/    63BC : 41F8 6B04           		lea	(ISO_Filelist),a0	; Get pointer to sector buffer
(2)  654/    63C0 : 43E8 009C           		lea.l	$9C(a0),a1		; Get root directory record
(2)  655/    63C4 : 1029 0006           		move.b	6(a1),d0		; Get first part of Sector address
(2)  656/    63C8 : E188                		lsl.l	#8,d0			; bitshift
(2)  657/    63CA : 1029 0007           		move.b	7(a1),d0		; Get next part of sector address
(2)  658/    63CE : E188                		lsl.l	#8,d0			; bitshift
(2)  659/    63D0 : 1029 0008           		move.b	8(a1),d0		; get next part of sector address
(2)  660/    63D4 : E188                		lsl.l	#8,d0			; bitshift
(2)  661/    63D6 : 1029 0009           		move.b	9(a1),d0		; get final part of sector address
(2)  662/    63DA :                     	; d0 now contains start sector address
(2)  663/    63DA : 7210                		moveq	#$10,d1			; Size ($20 Sectors)
(2)  664/    63DC : 6100 FF56           		bsr	spReadSectorsN
(2)  665/    63E0 : 4CDF 7FFF           		movem.l	(a7)+,d0-d7/a0-a6	; Restore all registers
(2)  666/    63E4 : 4E75                		rts
(2)  667/    63E6 :                     
(2)  668/    63E6 :                     ; --------------------------------------------------------
(2)  669/    63E6 :                     ; spSearchFile
(2)  670/    63E6 :                     ;
(2)  671/    63E6 :                     ; Search a file on the disc
(2)  672/    63E6 :                     ;
(2)  673/    63E6 :                     ; FILETABLE MUST BE LOADED FIRST WITH spInitFS
(2)  674/    63E6 :                     ;
(2)  675/    63E6 :                     ; Input
(2)  676/    63E6 :                     ; a0 - Filename string zero terminated
(2)  677/    63E6 :                     ;
(2)  678/    63E6 :                     ; Output:
(2)  679/    63E6 :                     ; d0.l - Start sector
(2)  680/    63E6 :                     ; d1.l - Number of sectors
(2)  681/    63E6 :                     ; d2.l - Filesize
(2)  682/    63E6 :                     ;
(2)  683/    63E6 :                     ; Breaks:
(2)  684/    63E6 :                     ; d4-d7,a6
(2)  685/    63E6 :                     ; --------------------------------------------------------
(2)  686/    63E6 :                     
(2)  687/    63E6 :                     ; TODO: A ZERO-SIZE CHECK
(2)  688/    63E6 :                     
(2)  689/    63E6 :                     spSearchFile:
(2)  690/    63E6 :                     ; 		movem.l	a1/a2/a6,-(a7)
(2)  691/    63E6 : 49F8 6B04           		lea	(ISO_Filelist),a4		; a4 - TOP
(2)  692/    63EA : 7000                		moveq	#0,d0
(2)  693/    63EC : 7200                		moveq	#0,d1
(2)  694/    63EE : 7400                		moveq	#0,d2
(2)  695/    63F0 :                     .next_file:
(2)  696/    63F0 : 1E14                		move.b	(a4),d7			; d7 - Block size
(2)  697/    63F2 : 673A                		beq.s	.failed_srch
(2)  698/    63F4 : 0247 00FF           		andi.w	#$FF,d7
(2)  699/    63F8 : 264C                		move.l	a4,a3			; a3 - To search for
(2)  700/    63FA : D6FC 0019           		adda	#$19,a3			; Go to flags
(2)  701/    63FE : 1C13                		move.b	(a3),d6
(2)  702/    6400 : 6618                		bne.s	.non_file		; $00: iso_file, non-Zero: iso_setfs
(2)  703/    6402 : D6FC 0007           		adda	#$07,a3			; Go to filename
(2)  704/    6406 : 7C00                		moveq	#0,d6
(2)  705/    6408 : 1C1B                		move.b	(a3)+,d6
(2)  706/    640A : 5946                		subq.w	#3+1,d6
(2)  707/    640C : 2448                		move.l	a0,a2			; a2 - string to seach
(2)  708/    640E :                     .chk_str:
(2)  709/    640E : 1A1B                		move.b	(a3)+,d5
(2)  710/    6410 : BA1A                		cmp.b	(a2)+,d5
(2)  711/    6412 : 6606                		bne.s	.non_file
(2)  712/    6414 : 51CE FFF8           		dbf	d6,.chk_str
(2)  713/    6418 : 6004                		bra.s	.found_file
(2)  714/    641A :                     .non_file:
(2)  715/    641A : D8C7                		adda	d7,a4
(2)  716/    641C : 60D2                		bra.s	.next_file
(2)  717/    641E :                     .found_file:
(2)  718/    641E : 202C 0006           		move.l	6(a4),d0		; d0 - Sector position
(2)  719/    6422 : 222C 000E           		move.l	$E(a4),d1		; d1 - Number of sectors
(2)  720/    6426 : 2401                		move.l	d1,d2			; d2 - ORIGINAL filesize
(2)  721/    6428 : E089                		lsr.l	#8,d1			; Bitshift numof_sectors
(2)  722/    642A : E689                		lsr.l	#3,d1
(2)  723/    642C : 4E75                		rts
(2)  724/    642E :                     .failed_srch:
(2)  725/    642E : 7000                		moveq	#0,d0
(2)  726/    6430 : 4A40                		tst.w	d0
(2)  727/    6432 : 4E75                		rts
(2)  728/    6434 :                     
(2)  729/    6434 :                     ; =====================================================================
(2)  730/    6434 :                     ; ----------------------------------------------------------------
(2)  731/    6434 :                     ; PCM sound
(2)  732/    6434 :                     ; ----------------------------------------------------------------
(2)  733/    6434 :                     
(2)  734/    6434 :                     ; --------------------------------------------------------
(2)  735/    6434 :                     ; CDPCM_Wait
(2)  736/    6434 :                     ;
(2)  737/    6434 :                     ; MUST Call this after writing any PCM register.
(2)  738/    6434 :                     ; --------------------------------------------------------
(2)  739/    6434 :                     
(2)  740/    6434 :                     CDPCM_Wait:
(2)  741/    6434 : 4E71                		nop
(2)  742/    6436 : 4E71                		nop
(2)  743/    6438 : 4E71                		nop
(2)  744/    643A :                     ; 		move.l	d7,-(sp)
(2)  745/    643A :                     ; 		move.w	#4,d7
(2)  746/    643A :                     ; .WaitLoop:
(2)  747/    643A :                     ; 		dbf	d7,.WaitLoop
(2)  748/    643A :                     ; 		move.l	(sp)+,d7
(2)  749/    643A : 4E75                		rts
(2)  750/    643C :                     
(2)  751/    643C :                     ; --------------------------------------------------------
(2)  752/    643C :                     ; CDPCM_Init
(2)  753/    643C :                     ; --------------------------------------------------------
(2)  754/    643C :                     
(2)  755/    643C :                     CDPCM_Init:
(2)  756/    643C :                     	; $0000-$7FFF is blank
(2)  757/    643C :                     	; $8000 is the Silence block until the
(2)  758/    643C :                     	;       streaming routine detects it and
(2)  759/    643C :                     	;       manually stops the channel
(2)  760/    643C :                     	; $8002-$FFFF is unused
(2)  761/    643C : 4DF9 FFFF 0000      		lea	(scpu_pcm),a6
(2)  762/    6442 : 7000                		moveq	#0,d0
(2)  763/    6444 : 72FF                		moveq	#-1,d1
(2)  764/    6446 : 183C 0080           		move.b	#$80,d4		; d4 - CTRL in memory mode
(2)  765/    644A : 7E0F                		moveq	#$0F,d7		; $0000-$7FFF
(2)  766/    644C : 4BEE 2001           		lea	$2001(a6),a5
(2)  767/    6450 :                     .clr_pwm:
(2)  768/    6450 : 1D44 000F           		move.b	d4,CTREG(a6)
(2)  769/    6454 :                     ; 		bsr	CDPCM_Wait
(2)  770/    6454 : 284D                		move.l	a5,a4
(2)  771/    6456 : 3C3C 0FFC           		move.w	#$0FFC,d6
(2)  772/    645A : 1880                .wr_end:	move.b	d0,(a4)
(2)  773/    645C : 548C                		addq.l	#2,a4
(2)  774/    645E : 51CE FFFA           		dbf	d6,.wr_end
(2)  775/    6462 :                     	rept 4
(2)  776/    6462 :                     		move.b	d1,(a4)
(2)  777/    6462 :                     		addq.l	#2,a4
(2)  778/    6462 :                     	endm
(2)  776/    6462 : 1881                		move.b	d1,(a4)
(2)  777/    6464 : 548C                		addq.l	#2,a4
(2)  776/    6466 : 1881                		move.b	d1,(a4)
(2)  777/    6468 : 548C                		addq.l	#2,a4
(2)  776/    646A : 1881                		move.b	d1,(a4)
(2)  777/    646C : 548C                		addq.l	#2,a4
(2)  776/    646E : 1881                		move.b	d1,(a4)
(2)  777/    6470 : 548C                		addq.l	#2,a4
(2)  779/    6472 : 5204                		addq.b	#$01,d4
(2)  780/    6474 : 51CF FFDA           		dbf	d7,.clr_pwm
(2)  781/    6478 : 183C 0088           		move.b	#$88,d4		; Make silence block
(2)  782/    647C : 41FA 001A           		lea	.data_blk(pc),a0
(2)  783/    6480 : 1D44 000F           		move.b	d4,CTREG(a6)	; Slot $8000 for pre-silence
(2)  784/    6484 :                     ; 		bsr	CDPCM_Wait
(2)  785/    6484 : 7E1F                		moveq	#32-1,d7
(2)  786/    6486 :                     .copy_data:
(2)  787/    6486 : 1018                		move.b	(a0)+,d0
(2)  788/    6488 : 1A80                		move.b	d0,(a5)
(2)  789/    648A : 548D                		addq.l	#2,a5
(2)  790/    648C : 51CF FFF8           		dbf	d7,.copy_data
(2)  791/    6490 : 1D7C 00FF 0011      		move.b	#-1,ONREG(a6)
(2)  792/    6496 : 609C                		bra	CDPCM_Wait
(2)  793/    6498 :                     .data_blk:
(2)  794/    6498 : 0000 0000 0000      		dc.b $00,$00,$00,$00,$00,$00,$00,$00
             649E : 0000             
(2)  795/    64A0 : 0000 0000 0000      		dc.b $00,$00,$00,$00,$00,$00,$00,$00
             64A6 : 0000             
(2)  796/    64A8 : FFFF FFFF FFFF      		dc.b $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
             64AE : FFFF             
(2)  797/    64B0 : FFFF FFFF FFFF      		dc.b $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
             64B6 : FFFF             
(2)  798/    64B8 :                     		align 2
(2)  799/    64B8 :                     
(2)  800/    64B8 :                     ; --------------------------------------------------------
(2)  801/    64B8 :                     ; CDPCM_ReadTable
(2)  802/    64B8 :                     ; --------------------------------------------------------
(2)  803/    64B8 :                     
(2)  804/    64B8 :                     CDPCM_ReadTable:
(2)  805/    64B8 : 4DF8 6980           		lea	(RAM_CdSub_PcmBuff),a6
(2)  806/    64BC : 4BF8 6AC0           		lea	(RAM_CdSub_PcmTable),a5
(2)  807/    64C0 : 7E07                		moveq	#8-1,d7			; 8 channels
(2)  808/    64C2 : 7C00                		moveq	#0,d6			; Starting channel number
(2)  809/    64C4 :                     .get_tbl:
(2)  810/    64C4 : 1A15                		move.b	(a5),d5
(2)  811/    64C6 : 0885 0002           		bclr	#2,d5			; Key-cut?
(2)  812/    64CA : 6702                		beq.s	.no_keyoff
(2)  813/    64CC : 6122                		bsr	.cdcom_keyoff
(2)  814/    64CE :                     .no_keyoff:
(2)  815/    64CE : 0885 0001           		bclr	#1,d5			; Key-off?
(2)  816/    64D2 : 6702                		beq.s	.no_keycut
(2)  817/    64D4 : 611A                		bsr	.cdcom_keyoff
(2)  818/    64D6 :                     .no_keycut:
(2)  819/    64D6 : 0885 0000           		bclr	#0,d5			; Key-on?
(2)  820/    64DA : 6702                		beq.s	.no_comm
(2)  821/    64DC : 611E                		bsr	.cdcom_keyon
(2)  822/    64DE :                     .no_comm:
(2)  823/    64DE : 1A85                		move.b	d5,(a5)
(2)  824/    64E0 : DCFC 0028           		adda	#sizeof_cdpcm,a6	; Next PCM buffer
(2)  825/    64E4 : DAFC 0001           		adda	#1,a5			; Next PCM table column
(2)  826/    64E8 : 5246                		addq.w	#1,d6
(2)  827/    64EA : 51CF FFD8           		dbf	d7,.get_tbl
(2)  828/    64EE :                     .dont_upd:
(2)  829/    64EE : 4E75                		rts
(2)  830/    64F0 :                     
(2)  831/    64F0 :                     ; --------------------------------------------------------
(2)  832/    64F0 :                     ; pcmcom:
(2)  833/    64F0 :                     ; 0 - Playback bits: %0000PCOK /Pitchbend/keyCut/keyOff/KeyOn
(2)  834/    64F0 :                     ; 8 - Pitch MSB
(2)  835/    64F0 :                     ; 16 - Pitch LSB
(2)  836/    64F0 :                     ; 24 - Volume
(2)  837/    64F0 :                     ; 32 - Panning %RRRRLLLL
(2)  838/    64F0 :                     ; 40 - LoopEnable bit | 24-bit sample location in Sub-CPU area
(2)  839/    64F0 :                     ; 48
(2)  840/    64F0 :                     ; 56
(2)  841/    64F0 :                     .cdcom_keyoff:
(2)  842/    64F0 : 0DB9 0000 6B00      		bclr	d6,(RAM_CdSub_PcmEnbl).l
(2)  843/    64F6 : 1CBC 00A0           		move.b	#$80|$20,cdpcm_flags(a6)
(2)  844/    64FA : 4E75                		rts
(2)  845/    64FC :                     
(2)  846/    64FC :                     ; a0 - table data
(2)  847/    64FC :                     ; a1 - buffer
(2)  848/    64FC :                     .cdcom_keyon:
(2)  849/    64FC : 0885 0003           		bclr	#3,d5			; Effect update ONLY?
(2)  850/    6500 : 665E                		bne	.effect_only
(2)  851/    6502 : 61EC                		bsr.s	.cdcom_keyoff
(2)  852/    6504 : 615E                		bsr.s	.effect_mod
(2)  853/    6506 : 7000                		moveq	#0,d0
(2)  854/    6508 : 1010                		move.b	(a0),d0		; 40
(2)  855/    650A : 1600                		move.b	d0,d3
(2)  856/    650C : D0FC 0008           		adda	#8,a0
(2)  857/    6510 : 0240 007F           		andi.w	#$7F,d0
(2)  858/    6514 : 4840                		swap	d0
(2)  859/    6516 : 1010                		move.b	(a0),d0		; 48
(2)  860/    6518 : D0FC 0008           		adda	#8,a0
(2)  861/    651C : E148                		lsl.w	#8,d0
(2)  862/    651E : 1010                		move.b	(a0),d0		; 56
(2)  863/    6520 : 2440                		move.l	d0,a2
(2)  864/    6522 : 7000                		moveq	#0,d0
(2)  865/    6524 : 7200                		moveq	#0,d1			; Read LEN
(2)  866/    6526 : 101A                		move.b	(a2)+,d0
(2)  867/    6528 : E158                		rol.w	#8,d0
(2)  868/    652A : 101A                		move.b	(a2)+,d0
(2)  869/    652C : E058                		ror.w	#8,d0
(2)  870/    652E : 121A                		move.b	(a2)+,d1
(2)  871/    6530 : 4841                		swap	d1
(2)  872/    6532 : 8081                		or.l	d1,d0
(2)  873/    6534 : 2D40 0020           		move.l	d0,cdpcm_nlen(a6)
(2)  874/    6538 : 7200                		moveq	#0,d1			; Read LEN
(2)  875/    653A : 7000                		moveq	#0,d0
(2)  876/    653C : 101A                		move.b	(a2)+,d0
(2)  877/    653E : E158                		rol.w	#8,d0
(2)  878/    6540 : 101A                		move.b	(a2)+,d0
(2)  879/    6542 : E058                		ror.w	#8,d0
(2)  880/    6544 : 121A                		move.b	(a2)+,d1
(2)  881/    6546 : 4841                		swap	d1
(2)  882/    6548 : 8081                		or.l	d1,d0
(2)  883/    654A : 2D40 0024           		move.l	d0,cdpcm_nloop(a6)
(2)  884/    654E : 2D4A 001C           		move.l	a2,cdpcm_nstart(a6)
(2)  885/    6552 : E31B                		rol.b	#1,d3
(2)  886/    6554 : 0203 0001           		andi.b	#1,d3
(2)  887/    6558 : 863C 00C0           		or.b	#$C0,d3
(2)  888/    655C : 1C83                		move.b	d3,cdpcm_flags(a6)
(2)  889/    655E : 4E75                		rts
(2)  890/    6560 :                     .effect_only:
(2)  891/    6560 : 0016 0010           		or.b	#$10,cdpcm_flags(a6)
(2)  892/    6564 :                     .effect_mod:
(2)  893/    6564 : 204D                		move.l	a5,a0
(2)  894/    6566 : D0FC 0008           		adda	#8,a0
(2)  895/    656A : 1010                		move.b	(a0),d0		; 8 - Pitch MSB
(2)  896/    656C : D0FC 0008           		adda	#8,a0
(2)  897/    6570 : E148                		lsl.w	#8,d0
(2)  898/    6572 : 1010                		move.b	(a0),d0		; 16 - Pitch LSB
(2)  899/    6574 : D0FC 0008           		adda	#8,a0
(2)  900/    6578 : 1210                		move.b	(a0),d1		; 24 - Volume
(2)  901/    657A : D0FC 0008           		adda	#8,a0
(2)  902/    657E : 1410                		move.b	(a0),d2		; 32 - Panning
(2)  903/    6580 : D0FC 0008           		adda	#8,a0
(2)  904/    6584 : 3D40 000E           		move.w	d0,cdpcm_pitch(a6)
(2)  905/    6588 : 1D41 000D           		move.b	d1,cdpcm_env(a6)
(2)  906/    658C : 1D42 000C           		move.b	d2,cdpcm_pan(a6)
(2)  907/    6590 : 4E75                		rts
(2)  908/    6592 :                     
(2)  909/    6592 :                     ; --------------------------------------------------------
(2)  910/    6592 :                     ; PCM streaming
(2)  911/    6592 :                     ; --------------------------------------------------------
(2)  912/    6592 :                     
(2)  913/    6592 :                     CDPCM_Stream:
(2)  914/    6592 :                     ; 		movem.l	d0-a6,-(sp)
(2)  915/    6592 : 50F8 6B02           		st.b	(RAM_CdSub_PcmMidStrm).w
(2)  916/    6596 : 610E                		bsr.s	CDPCM_Stream_Run
(2)  917/    6598 : 4238 6B02           		clr.b	(RAM_CdSub_PcmMidStrm).w
(2)  918/    659C :                     ; 		movem.l	(sp)+,d0-a6
(2)  919/    659C : 4E75                		rts
(2)  920/    659E :                     CDPCM_Stream_IRQ:
(2)  921/    659E : 4A38 6B02           		tst.b	(RAM_CdSub_PcmMidStrm).w
(2)  922/    65A2 : 6702                		beq.s	CDPCM_Stream_Run
(2)  923/    65A4 : 4E75                		rts
(2)  924/    65A6 :                     CDPCM_Stream_Run:
(2)  925/    65A6 : 4DF8 6980           		lea	(RAM_CdSub_PcmBuff),a6
(2)  926/    65AA : 4BF9 FFFF 0000      		lea	(scpu_pcm),a5
(2)  927/    65B0 : 49ED 0023           		lea	$23(a5),a4			; <-- RAM-addr MSBs (ODDs)
(2)  928/    65B4 : 7E07                		moveq	#8-1,d7				; 8 channels, 8 pseudo-buffers
(2)  929/    65B6 : 7C00                		moveq	#0,d6				; Current channel (also for BTST/BSET/BCLR)
(2)  930/    65B8 : 1A39 0000 6B00      		move.b	(RAM_CdSub_PcmEnbl).l,d5	; Global OFF/ON bits
(2)  931/    65BE : 4645                		not.w	d5				; reverse the bits
(2)  932/    65C0 :                     .get_addr:
(2)  933/    65C0 : 0816 0007           		btst	#7,cdpcm_flags(a6)
(2)  934/    65C4 : 676E                		beq.s	.non_strm
(2)  935/    65C6 : 0896 0006           		bclr	#6,cdpcm_flags(a6)		; Restart bit?
(2)  936/    65CA : 6706                		beq.s	.no_refill
(2)  937/    65CC : 6100 0140           		bsr	.first_fill
(2)  938/    65D0 : 6062                		bra	.non_strm
(2)  939/    65D2 :                     .no_refill:
(2)  940/    65D2 : 0896 0005           		bclr	#5,cdpcm_flags(a6)
(2)  941/    65D6 : 660A                		bne.s	.force_off
(2)  942/    65D8 : 1614                		move.b	(a4),d3				; Get playback MSB
(2)  943/    65DA : 6A10                		bpl.s	.keep_strm
(2)  944/    65DC : 0816 0000           		btst	#0,cdpcm_flags(a6)
(2)  945/    65E0 : 660A                		bne.s	.keep_strm
(2)  946/    65E2 :                     .force_off:
(2)  947/    65E2 : 0DC5                		bset	d6,d5
(2)  948/    65E4 : 1B45 0011           		move.b	d5,ONREG(a5)
(2)  949/    65E8 : 4216                		clr.b	cdpcm_flags(a6)
(2)  950/    65EA : 6048                		bra.s	.non_strm
(2)  951/    65EC :                     .keep_strm:
(2)  952/    65EC : 0896 0004           		bclr	#4,cdpcm_flags(a6)
(2)  953/    65F0 : 6704                		beq.s	.non_upd
(2)  954/    65F2 : 6100 00E2           		bsr	.update_set
(2)  955/    65F6 :                     .non_upd:
(2)  956/    65F6 : 182E 0002           		move.b	cdpcm_strmhalf(a6),d4		; Check halfway $x0/$x4/$x8/$xC
(2)  957/    65FA : 0203 000E           		andi.b	#$0E,d3
(2)  958/    65FE : B604                		cmp.b	d4,d3
(2)  959/    6600 : 6632                		bne.s	.non_strm
(2)  960/    6602 : 3803                		move.w	d3,d4
(2)  961/    6604 : 5444                		addq.w	#$02,d4
(2)  962/    6606 : 0244 000E           		andi.w	#$0E,d4
(2)  963/    660A : 1D44 0002           		move.b	d4,cdpcm_strmhalf(a6)
(2)  964/    660E : 206E 0008           		move.l	cdpcm_cread(a6),a0
(2)  965/    6612 : 222E 0004           		move.l	cdpcm_clen(a6),d1
(2)  966/    6616 : E14C                		lsl.w	#8,d4				; << 8
(2)  967/    6618 : 263C 0000 0200      		move.l	#$0200,d3			; d3 - Block size
(2)  968/    661E : B87C 0E00           		cmp.w	#$0E00,d4			; Looping block?
(2)  969/    6622 : 6606                		bne.s	.lowhalf
(2)  970/    6624 : 96BC 0000 0004      		sub.l	#4,d3				; loop block is -4
(2)  971/    662A :                     .lowhalf:
(2)  972/    662A : 6120                		bsr	.make_blk_strm
(2)  973/    662C : 2D41 0004           		move.l	d1,cdpcm_clen(a6)
(2)  974/    6630 : 2D48 0008           		move.l	a0,cdpcm_cread(a6)
(2)  975/    6634 :                     .non_strm:
(2)  976/    6634 : DCFC 0028           		adda	#sizeof_cdpcm,a6		; Next PCM buffer
(2)  977/    6638 : D8FC 0004           		adda	#4,a4				; Next MSB
(2)  978/    663C : 5246                		addq.w	#1,d6				; Next channel
(2)  979/    663E : 51CF FF80           		dbf	d7,.get_addr
(2)  980/    6642 : 4645                		not.w	d5				; reverse return bits
(2)  981/    6644 : 13C5 0000 6B00      		move.b	d5,(RAM_CdSub_PcmEnbl).l
(2)  982/    664A : 4E75                		rts
(2)  983/    664C :                     
(2)  984/    664C :                     ; --------------------------------------------------------
(2)  985/    664C :                     ; a0 - wave data to write
(2)  986/    664C :                     ; d1 - channel current length
(2)  987/    664C :                     ; d3 - block size
(2)  988/    664C :                     ; d4 - current block slot to write
(2)  989/    664C :                     ; d6 - current channel
(2)  990/    664C :                     
(2)  991/    664C :                     .make_blk_strm:
(2)  992/    664C : 1006                		move.b	d6,d0
(2)  993/    664E : 803C 0080           		or.b	#$80,d0
(2)  994/    6652 : 1B40 000F           		move.b	d0,CTREG(a5)
(2)  995/    6656 :                     ; 		bsr	CDPCM_Wait
(2)  996/    6656 : 43ED 2001           		lea	$2001(a5),a1
(2)  997/    665A : D844                		add.w	d4,d4
(2)  998/    665C : D2C4                		adda	d4,a1
(2)  999/    665E : 3803                		move.w	d3,d4
(2) 1000/    6660 :                     ; 		lsr.w	#2,d3		; /4
(2) 1001/    6660 : 5344                		subq.w	#1,d4
(2) 1002/    6662 : 0816 0000           		btst	#0,cdpcm_flags(a6)
(2) 1003/    6666 : 672C                		beq	.end_point
(2) 1004/    6668 :                     
(2) 1005/    6668 :                     ; ----------------------------------------
(2) 1006/    6668 :                     ; Wave has loop
(2) 1007/    6668 :                     ; ----------------------------------------
(2) 1008/    6668 :                     
(2) 1009/    6668 :                     .loop_point:
(2) 1010/    6668 : 246E 0010           		movea.l	cdpcm_start(a6),a2
(2) 1011/    666C : 202E 0018           		move.l	cdpcm_loop(a6),d0
(2) 1012/    6670 : D5C0                		add.l	d0,a2
(2) 1013/    6672 : 242E 0014           		move.l	cdpcm_len(a6),d2
(2) 1014/    6676 : 9480                		sub.l	d0,d2
(2) 1015/    6678 :                     .loop_strm:
(2) 1016/    6678 : 5381                		subq.l	#1,d1
(2) 1017/    667A : 6608                		bne.s	.strlen_it
(2) 1018/    667C : 204A                		move.l	a2,a0
(2) 1019/    667E : 2202                		move.l	d2,d1
(2) 1020/    6680 : 2D41 0004           		move.l	d1,cdpcm_clen(a6)
(2) 1021/    6684 :                     .strlen_it:
(2) 1022/    6684 : 1018                		move.b	(a0)+,d0
(2) 1023/    6686 : 6100 0184           		bsr	CDPCM_WavToPcm
(2) 1024/    668A : 1280                		move.b	d0,(a1)
(2) 1025/    668C :                     ; 		bsr	CDPCM_Wait
(2) 1026/    668C : 5489                		addq.l	#2,a1
(2) 1027/    668E : 51CC FFE8           		dbf	d4,.loop_strm
(2) 1028/    6692 : 4E75                		rts
(2) 1029/    6694 :                     
(2) 1030/    6694 :                     ; ----------------------------------------
(2) 1031/    6694 :                     ; Wave doesn't loop
(2) 1032/    6694 :                     ; ----------------------------------------
(2) 1033/    6694 :                     
(2) 1034/    6694 :                     .end_point:
(2) 1035/    6694 : 70FF                		moveq	#-1,d0
(2) 1036/    6696 : 5381                		subq.l	#1,d1
(2) 1037/    6698 : 6708                		beq.s	.stlen_it
(2) 1038/    669A : 6B06                		bmi.s	.stlen_it
(2) 1039/    669C : 1018                		move.b	(a0)+,d0
(2) 1040/    669E : 6100 016C           		bsr	CDPCM_WavToPcm
(2) 1041/    66A2 :                     .stlen_it:
(2) 1042/    66A2 : 1280                		move.b	d0,(a1)
(2) 1043/    66A4 :                     ; 		bsr	CDPCM_Wait
(2) 1044/    66A4 : 5489                		addq.l	#2,a1
(2) 1045/    66A6 : 51CC FFEC           		dbf	d4,.end_point
(2) 1046/    66AA : 4A81                		tst.l	d1
(2) 1047/    66AC : 6A26                		bpl.s	.not_end
(2) 1048/    66AE : 1006                		move.b	d6,d0
(2) 1049/    66B0 : 803C 00C0           		or.b	#$C0,d0
(2) 1050/    66B4 : 1B40 000F           		move.b	d0,CTREG(a5)
(2) 1051/    66B8 : 6100 FD7A           		bsr	CDPCM_Wait
(2) 1052/    66BC : 303C 8000           		move.w	#$8000,d0	; Relocate PCM to SILENCE block on LOOP -1
(2) 1053/    66C0 : 1B40 0009           		move.b	d0,LSL(a5)
(2) 1054/    66C4 : 6100 FD6E           		bsr	CDPCM_Wait
(2) 1055/    66C8 : E048                		lsr.w	#8,d0
(2) 1056/    66CA : 1B40 000B           		move.b	d0,LSH(a5)
(2) 1057/    66CE : 6100 FD64           		bsr	CDPCM_Wait
(2) 1058/    66D2 : 0D85                		bclr	d6,d5
(2) 1059/    66D4 :                     .not_end:
(2) 1060/    66D4 : 4E75                		rts
(2) 1061/    66D6 :                     
(2) 1062/    66D6 :                     ; --------------------------------------------------------
(2) 1063/    66D6 :                     ; Channel changes
(2) 1064/    66D6 :                     ; --------------------------------------------------------
(2) 1065/    66D6 :                     
(2) 1066/    66D6 :                     .update_set:
(2) 1067/    66D6 : 1006                		move.b	d6,d0
(2) 1068/    66D8 : 803C 00C0           		or.b	#$C0,d0
(2) 1069/    66DC : 1B40 000F           		move.b	d0,CTREG(a5)
(2) 1070/    66E0 : 342E 000E           		move.w	cdpcm_pitch(a6),d2
(2) 1071/    66E4 : 1B42 0005           		move.b	d2,FDL(a5)
(2) 1072/    66E8 : 6100 FD4A           		bsr	CDPCM_Wait
(2) 1073/    66EC : E04A                		lsr.w	#8,d2
(2) 1074/    66EE : 1B42 0007           		move.b	d2,FDH(a5)
(2) 1075/    66F2 : 6100 FD40           		bsr	CDPCM_Wait
(2) 1076/    66F6 : 142E 000C           		move.b	cdpcm_pan(a6),d2	; Panning
(2) 1077/    66FA : 1B42 0003           		move.b	d2,PAN(a5)
(2) 1078/    66FE : 6100 FD34           		bsr	CDPCM_Wait
(2) 1079/    6702 : 142E 000D           		move.b	cdpcm_env(a6),d2	; Envelope
(2) 1080/    6706 : 1B42 0001           		move.b	d2,ENV(a5)
(2) 1081/    670A : 6000 FD28           		bra	CDPCM_Wait
(2) 1082/    670E :                     
(2) 1083/    670E :                     ; --------------------------------------------------------
(2) 1084/    670E :                     ; First fill
(2) 1085/    670E :                     ; --------------------------------------------------------
(2) 1086/    670E :                     
(2) 1087/    670E :                     .first_fill:
(2) 1088/    670E : 0DC5                		bset	d6,d5
(2) 1089/    6710 : 1B45 0011           		move.b	d5,ONREG(a5)		; Stop channel first
(2) 1090/    6714 : 6100 FD1E           		bsr	CDPCM_Wait
(2) 1091/    6718 : 2D6E 001C 0010      		move.l	cdpcm_nstart(a6),cdpcm_start(a6)
(2) 1092/    671E : 2D6E 0020 0014      		move.l	cdpcm_nlen(a6),cdpcm_len(a6)
(2) 1093/    6724 : 2D6E 0024 0018      		move.l	cdpcm_nloop(a6),cdpcm_loop(a6)
(2) 1094/    672A :                     
(2) 1095/    672A : 206E 0010           		move.l	cdpcm_start(a6),a0	; Make first block
(2) 1096/    672E : 222E 0014           		move.l	cdpcm_len(a6),d1
(2) 1097/    6732 : 6164                		bsr	.make_lblk
(2) 1098/    6734 : 2D48 0008           		move.l	a0,cdpcm_cread(a6)
(2) 1099/    6738 : 2D41 0004           		move.l	d1,cdpcm_clen(a6)
(2) 1100/    673C : 1006                		move.b	d6,d0
(2) 1101/    673E : 803C 00C0           		or.b	#$C0,d0
(2) 1102/    6742 : 1B40 000F           		move.b	d0,CTREG(a5)
(2) 1103/    6746 : 6100 FCEC           		bsr	CDPCM_Wait
(2) 1104/    674A : 618A                		bsr	.update_set
(2) 1105/    674C : 1006                		move.b	d6,d0
(2) 1106/    674E : E948                		lsl.w	#4,d0
(2) 1107/    6750 : 1400                		move.b	d0,d2
(2) 1108/    6752 : 1B40 000D           		move.b	d0,ST(a5)		; Start MSB
(2) 1109/    6756 : 6100 FCDC           		bsr	CDPCM_Wait
(2) 1110/    675A : E148                		lsl.w	#8,d0
(2) 1111/    675C : 4A81                		tst.l	d1
(2) 1112/    675E : 6B0A                		bmi.s	.small_sampl
(2) 1113/    6760 : 6708                		beq.s	.small_sampl
(2) 1114/    6762 : 1D7C 0000 0002      		move.b	#0,cdpcm_strmhalf(a6)
(2) 1115/    6768 : 6012                		bra.s	.set_nonstop
(2) 1116/    676A :                     
(2) 1117/    676A :                     ; --------------------------------------------------------
(2) 1118/    676A :                     
(2) 1119/    676A :                     .small_sampl:
(2) 1120/    676A : 0816 0000           		btst	#0,cdpcm_flags(a6)
(2) 1121/    676E : 6708                		beq.s	.set_endloop
(2) 1122/    6770 : 262E 0018           		move.l	cdpcm_loop(a6),d3
(2) 1123/    6774 : 2003                		move.l	d3,d0
(2) 1124/    6776 : 6004                		bra	.set_nonstop
(2) 1125/    6778 :                     .set_endloop:
(2) 1126/    6778 : 303C 8000           		move.w	#$8000,d0		; BLANK WAVE pointer
(2) 1127/    677C :                     .set_nonstop:
(2) 1128/    677C : 1B40 0009           		move.b	d0,LSL(a5)
(2) 1129/    6780 : 6100 FCB2           		bsr	CDPCM_Wait
(2) 1130/    6784 : E048                		lsr.w	#8,d0
(2) 1131/    6786 : 1B40 000B           		move.b	d0,LSH(a5)
(2) 1132/    678A : 6100 FCA8           		bsr	CDPCM_Wait
(2) 1133/    678E : 0D85                		bclr	d6,d5
(2) 1134/    6790 : 1B45 0011           		move.b	d5,ONREG(a5)
(2) 1135/    6794 : 6000 FC9E           		bra	CDPCM_Wait
(2) 1136/    6798 :                     
(2) 1137/    6798 :                     ; --------------------------------------------------------
(2) 1138/    6798 :                     ; a0 - Wave data
(2) 1139/    6798 :                     ; a1 - Output to memory (set with CTREG first)
(2) 1140/    6798 :                     ; d1 - Wave length counter
(2) 1141/    6798 :                     ; d6 - current channel
(2) 1142/    6798 :                     
(2) 1143/    6798 :                     .make_lblk:
(2) 1144/    6798 : 1006                		move.b	d6,d0		; Set channel as memory slot
(2) 1145/    679A : 803C 0080           		or.b	#$80,d0
(2) 1146/    679E : 1B40 000F           		move.b	d0,CTREG(a5)
(2) 1147/    67A2 : 6100 FC90           		bsr	CDPCM_Wait
(2) 1148/    67A6 : 43ED 2001           		lea	$2001(a5),a1
(2) 1149/    67AA : 363C 0200           		move.w	#$200,d3	; BLOCK SIZE
(2) 1150/    67AE : E44B                		lsr.w	#2,d3		; /4
(2) 1151/    67B0 : 5343                		subq.w	#1,d3
(2) 1152/    67B2 :                     .wave_blkl:
(2) 1153/    67B2 : 4A81                		tst.l	d1
(2) 1154/    67B4 : 6B3E                		bmi.s	.fill_mode
(2) 1155/    67B6 :                     	rept 4
(2) 1156/    67B6 :                     		moveq	#-1,d0		; Set loop flag
(2) 1157/    67B6 :                     		subq.l	#1,d1		; Len counter
(2) 1158/    67B6 :                     		beq.s	.len_it		; If ran out of wave data, write -1 now.
(2) 1159/    67B6 :                     		move.b	(a0)+,d0	; Read wave and convert
(2) 1160/    67B6 :                     		bsr	CDPCM_WavToPcm
(2) 1161/    67B6 :                     .len_it:
(2) 1162/    67B6 :                     		move.b	d0,(a1)
(2) 1163/    67B6 :                     ; 		bsr	CDPCM_Wait
(2) 1164/    67B6 :                     		addq.l	#2,a1
(2) 1165/    67B6 :                     	endm
(2) 1156/    67B6 : 70FF                		moveq	#-1,d0		; Set loop flag
(2) 1157/    67B8 : 5381                		subq.l	#1,d1		; Len counter
(2) 1158/    67BA : 6704                		beq.s	.len_it		; If ran out of wave data, write -1 now.
(2) 1159/    67BC : 1018                		move.b	(a0)+,d0	; Read wave and convert
(2) 1160/    67BE : 614C                		bsr	CDPCM_WavToPcm
(2) 1161/    67C0 :                     .len_it:
(2) 1162/    67C0 : 1280                		move.b	d0,(a1)
(2) 1163/    67C2 :                     ; 		bsr	CDPCM_Wait
(2) 1164/    67C2 : 5489                		addq.l	#2,a1
(2) 1156/    67C4 : 70FF                		moveq	#-1,d0		; Set loop flag
(2) 1157/    67C6 : 5381                		subq.l	#1,d1		; Len counter
(2) 1158/    67C8 : 6704                		beq.s	.len_it		; If ran out of wave data, write -1 now.
(2) 1159/    67CA : 1018                		move.b	(a0)+,d0	; Read wave and convert
(2) 1160/    67CC : 613E                		bsr	CDPCM_WavToPcm
(2) 1161/    67CE :                     .len_it:
(2) 1162/    67CE : 1280                		move.b	d0,(a1)
(2) 1163/    67D0 :                     ; 		bsr	CDPCM_Wait
(2) 1164/    67D0 : 5489                		addq.l	#2,a1
(2) 1156/    67D2 : 70FF                		moveq	#-1,d0		; Set loop flag
(2) 1157/    67D4 : 5381                		subq.l	#1,d1		; Len counter
(2) 1158/    67D6 : 6704                		beq.s	.len_it		; If ran out of wave data, write -1 now.
(2) 1159/    67D8 : 1018                		move.b	(a0)+,d0	; Read wave and convert
(2) 1160/    67DA : 6130                		bsr	CDPCM_WavToPcm
(2) 1161/    67DC :                     .len_it:
(2) 1162/    67DC : 1280                		move.b	d0,(a1)
(2) 1163/    67DE :                     ; 		bsr	CDPCM_Wait
(2) 1164/    67DE : 5489                		addq.l	#2,a1
(2) 1156/    67E0 : 70FF                		moveq	#-1,d0		; Set loop flag
(2) 1157/    67E2 : 5381                		subq.l	#1,d1		; Len counter
(2) 1158/    67E4 : 6704                		beq.s	.len_it		; If ran out of wave data, write -1 now.
(2) 1159/    67E6 : 1018                		move.b	(a0)+,d0	; Read wave and convert
(2) 1160/    67E8 : 6122                		bsr	CDPCM_WavToPcm
(2) 1161/    67EA :                     .len_it:
(2) 1162/    67EA : 1280                		move.b	d0,(a1)
(2) 1163/    67EC :                     ; 		bsr	CDPCM_Wait
(2) 1164/    67EC : 5489                		addq.l	#2,a1
(2) 1166/    67EE : 51CB FFC2           		dbf	d3,.wave_blkl
(2) 1167/    67F2 : 4E75                		rts
(2) 1168/    67F4 :                     ; Fill unused block
(2) 1169/    67F4 :                     .fill_mode:
(2) 1170/    67F4 : 70FF                		moveq	#-1,d0
(2) 1171/    67F6 :                     .loop_blkl:
(2) 1172/    67F6 :                     	rept 4
(2) 1173/    67F6 :                     		move.b	d0,(a1)
(2) 1174/    67F6 :                     ; 		bsr	CDPCM_Wait
(2) 1175/    67F6 :                     		addq.l	#2,a1
(2) 1176/    67F6 :                     	endm
(2) 1173/    67F6 : 1280                		move.b	d0,(a1)
(2) 1174/    67F8 :                     ; 		bsr	CDPCM_Wait
(2) 1175/    67F8 : 5489                		addq.l	#2,a1
(2) 1173/    67FA : 1280                		move.b	d0,(a1)
(2) 1174/    67FC :                     ; 		bsr	CDPCM_Wait
(2) 1175/    67FC : 5489                		addq.l	#2,a1
(2) 1173/    67FE : 1280                		move.b	d0,(a1)
(2) 1174/    6800 :                     ; 		bsr	CDPCM_Wait
(2) 1175/    6800 : 5489                		addq.l	#2,a1
(2) 1173/    6802 : 1280                		move.b	d0,(a1)
(2) 1174/    6804 :                     ; 		bsr	CDPCM_Wait
(2) 1175/    6804 : 5489                		addq.l	#2,a1
(2) 1177/    6806 : 51CB FFEE           		dbf	d3,.loop_blkl
(2) 1178/    680A : 4E75                		rts
(2) 1179/    680C :                     
(2) 1180/    680C :                     ; --------------------------------------------------------
(2) 1181/    680C :                     
(2) 1182/    680C :                     CDPCM_WavToPcm:
(2) 1183/    680C : 0240 00FF           		andi.w	#$FF,d0
(2) 1184/    6810 : 103B 0004           		move.b	.wave_list(pc,d0.w),d0
(2) 1185/    6814 : 4E75                		rts
(2) 1186/    6816 :                     .wave_list:
(2) 1187/    6816 : FEFE FDFC FBFA      	dc.b $FE,$FE,$FD,$FC,$FB,$FA,$F9,$F8,$F7,$F6,$F5,$F4,$F3,$F2,$F1,$F0
             681C : F9F8 F7F6 F5F4 
             6822 : F3F2 F1F0          
(2) 1188/    6826 : EFEE EDEC EBEA      	dc.b $EF,$EE,$ED,$EC,$EB,$EA,$E9,$E8,$E7,$E6,$E5,$E4,$E3,$E2,$E1,$E0
             682C : E9E8 E7E6 E5E4 
             6832 : E3E2 E1E0          
(2) 1189/    6836 : DFDE DDDC DBDA      	dc.b $DF,$DE,$DD,$DC,$DB,$DA,$D9,$D8,$D7,$D6,$D5,$D4,$D3,$D2,$D1,$D0
             683C : D9D8 D7D6 D5D4 
             6842 : D3D2 D1D0          
(2) 1190/    6846 : CFCE CDCC CBCA      	dc.b $CF,$CE,$CD,$CC,$CB,$CA,$C9,$C8,$C7,$C6,$C5,$C4,$C3,$C2,$C1,$C0
             684C : C9C8 C7C6 C5C4 
             6852 : C3C2 C1C0          
(2) 1191/    6856 : BFBE BDBC BBBA      	dc.b $BF,$BE,$BD,$BC,$BB,$BA,$B9,$B8,$B7,$B6,$B5,$B4,$B3,$B2,$B1,$B0
             685C : B9B8 B7B6 B5B4 
             6862 : B3B2 B1B0          
(2) 1192/    6866 : AFAE ADAC ABAA      	dc.b $AF,$AE,$AD,$AC,$AB,$AA,$A9,$A8,$A7,$A6,$A5,$A4,$A3,$A2,$A1,$A0
             686C : A9A8 A7A6 A5A4 
             6872 : A3A2 A1A0          
(2) 1193/    6876 : 9F9E 9D9C 9B9A      	dc.b $9F,$9E,$9D,$9C,$9B,$9A,$99,$98,$97,$96,$95,$94,$93,$92,$91,$90
             687C : 9998 9796 9594 
             6882 : 9392 9190          
(2) 1194/    6886 : 8F8E 8D8C 8B8A      	dc.b $8F,$8E,$8D,$8C,$8B,$8A,$89,$88,$87,$86,$85,$84,$83,$82,$81,$80
             688C : 8988 8786 8584 
             6892 : 8382 8180          
(2) 1195/    6896 : 0001 0203 0405      	dc.b $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0A,$0B,$0C,$0D,$0E,$0F
             689C : 0607 0809 0A0B 
             68A2 : 0C0D 0E0F          
(2) 1196/    68A6 : 1011 1213 1415      	dc.b $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1A,$1B,$1C,$1D,$1E,$1F
             68AC : 1617 1819 1A1B 
             68B2 : 1C1D 1E1F          
(2) 1197/    68B6 : 2021 2223 2425      	dc.b $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2A,$2B,$2C,$2D,$2E,$2F
             68BC : 2627 2829 2A2B 
             68C2 : 2C2D 2E2F          
(2) 1198/    68C6 : 3031 3233 3435      	dc.b $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3A,$3B,$3C,$3D,$3E,$3F
             68CC : 3637 3839 3A3B 
             68D2 : 3C3D 3E3F          
(2) 1199/    68D6 : 4041 4243 4445      	dc.b $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4A,$4B,$4C,$4D,$4E,$4F
             68DC : 4647 4849 4A4B 
             68E2 : 4C4D 4E4F          
(2) 1200/    68E6 : 5051 5253 5455      	dc.b $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5A,$5B,$5C,$5D,$5E,$5F
             68EC : 5657 5859 5A5B 
             68F2 : 5C5D 5E5F          
(2) 1201/    68F6 : 6061 6263 6465      	dc.b $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6A,$6B,$6C,$6D,$6E,$6F
             68FC : 6667 6869 6A6B 
             6902 : 6C6D 6E6F          
(2) 1202/    6906 : 7071 7273 7475      	dc.b $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7A,$7B,$7C,$7D,$7E,$7F
             690C : 7677 7879 7A7B 
             6912 : 7C7D 7E7F          
(2) 1203/    6916 :                     	align 2
(2) 1204/    6916 :                     
(2) 1205/    6916 :                     ; --------------------------------------------------------
(2) 1206/    6916 :                     ; CDPCM_Update
(2) 1207/    6916 :                     ;
(2) 1208/    6916 :                     ; Only checks for playback changes
(2) 1209/    6916 :                     ; --------------------------------------------------------
(2) 1210/    6916 :                     
(2) 1211/    6916 :                     ; CDPCM_Update:
(2) 1212/    6916 :                     ; 		lea	(RAM_CdSub_PcmBuff),a6
(2) 1213/    6916 :                     ; 		lea	(scpu_pcm),a5
(2) 1214/    6916 :                     ; 		lea	$23(a5),a4			; <-- RAM-addr MSBs (ODDs)
(2) 1215/    6916 :                     ; 		moveq	#8-1,d7				; 8 channels, 8 pseudo-buffers
(2) 1216/    6916 :                     ; 		moveq	#0,d6				; Current channel (also for BTST/BSET/BCLR)
(2) 1217/    6916 :                     ; 		move.b	(RAM_CdSub_PcmEnbl).l,d5	; Global OFF/ON bits
(2) 1218/    6916 :                     ; 		not.w	d5				; reverse the bits
(2) 1219/    6916 :                     ; .get_addr:
(2) 1220/    6916 :                     ; 		btst	#7,cdpcm_flags(a6)	; Channel active?
(2) 1221/    6916 :                     ; 		beq	.non_upd
(2) 1222/    6916 :                     ; 		bclr	#6,cdpcm_flags(a6)	; Restart bit?
(2) 1223/    6916 :                     ; 		beq.s	.no_refill
(2) 1224/    6916 :                     ; 		bsr	.first_fill
(2) 1225/    6916 :                     ; .no_refill:
(2) 1226/    6916 :                     ;
(2) 1227/    6916 :                     ; ; .stop_bit:	bclr	#5,cdpcm_flags(a6)	; Stop bit?
(2) 1228/    6916 :                     ; ; 		beq.s	.not_stop
(2) 1229/    6916 :                     ; ; 		bset	d6,d5
(2) 1230/    6916 :                     ; ; 		move.b	d5,ONREG(a5)		; Stop channel first
(2) 1231/    6916 :                     ; ; ; 		bsr	CDPCM_Wait
(2) 1232/    6916 :                     ; ; 		clr.b	cdpcm_flags(a6)
(2) 1233/    6916 :                     ; ; .not_stop:
(2) 1234/    6916 :                     ; ; 		bclr	#4,cdpcm_flags(a6)
(2) 1235/    6916 :                     ; ; 		beq.s	.non_upd
(2) 1236/    6916 :                     ; ; 		bsr	.update_set
(2) 1237/    6916 :                     ; ; .non_upd:
(2) 1238/    6916 :                     ; 		adda	#sizeof_cdpcm,a6	; Next PCM buffer
(2) 1239/    6916 :                     ; 		adda	#4,a4			; Next MSB
(2) 1240/    6916 :                     ; 		addq.w	#1,d6			; Next channel
(2) 1241/    6916 :                     ; 		dbf	d7,.get_addr
(2) 1242/    6916 :                     ; .non_chng:
(2) 1243/    6916 :                     ; 		not.w	d5			; reverse return bits
(2) 1244/    6916 :                     ; 		move.b	d5,(RAM_CdSub_PcmEnbl).l
(2) 1245/    6916 :                     ; 		rts
(2) 1246/    6916 :                     
(2) 1247/    6916 :                     ; ====================================================================
(2) 1248/    6916 :                     ; ----------------------------------------------------------------
(2) 1249/    6916 :                     ; Internal buffers
(2) 1250/    6916 :                     ; ----------------------------------------------------------------
(2) 1251/    6916 :                     
(2) 1252/    6916 :                     ; 			align $80
(2) 1253/    6916 :                     
(2) 1254/    6916 :                     ; ====================================================================
(2) 1255/    6916 :                     ; ----------------------------------------------------------------
(2) 1256/    6916 :                     ; RAM
(2) 1257/    6916 :                     ; ----------------------------------------------------------------
(2) 1258/    6916 :                     
(2) 1259/    6916 :                     			align $80
(2) 1260/    6980 :                     SP_RAM:
(2) 1261/    6980 : (MACRO)              			strct SP_RAM
(2) 1261/    6980 : =$6980               GLBL_LASTPC     set *
(2) 1261/    1180 :                                     dephase
(2) 1261/    6980 :                                     phase SP_RAM
(2) 1261/    6980 : =$6980               GLBL_LASTORG    set *
(2) 1262/    6980 :                     RAM_CdSub_PcmBuff	ds.b 8*sizeof_cdpcm
(2) 1263/    6AC0 :                     RAM_CdSub_PcmTable	ds.b 8*8		; Z80 table
(2) 1264/    6B00 :                     RAM_CdSub_PcmEnbl	ds.b 1			; PCM enable bits
(2) 1265/    6B01 :                     RAM_CdSub_PcmPlay	ds.b 1
(2) 1266/    6B02 :                     RAM_CdSub_PcmMidStrm	ds.b 1
(2) 1267/    6B03 :                     RAM_CdSub_PcmTblUpd	ds.b 1
(2) 1268/    6B04 :                     ; BRAM_Buff		ds.b $640
(2) 1269/    6B04 :                     ISO_Filelist		ds.b $800*$10
(2) 1270/    EB04 :                     ISO_Output		ds.b $800*$10
(2) 1271/   16B04 :                     RAM_CdSub_FsBuff	ds.l $20
(2) 1272/   16B84 :                     sizeof_subcpu		ds.l 0
(2) 1273/   16B84 : (MACRO)              			endstrct
(2) 1273/    6980 :                                     org GLBL_LASTORG
(2) 1273/    6980 :                                     phase GLBL_LASTPC
(2) 1274/    6980 :                     
(2) 1275/    6980 : (MACRO)              			erreport "SUB-CPU IP",sizeof_subcpu,$20000
(2) 1276/    6980 :                     
(2) 1277/    6980 :                     ; ====================================================================
(2) 1278/    6980 :                     ; ----------------------------------------------------------------
(2) 1279/    6980 :                     ; SUB-CPU data
(2) 1280/    6980 :                     ; ----------------------------------------------------------------
(2) 1281/    6980 :                     
(2) 1282/    6980 :                     			dephase
(2) 1283/   20000 :                     			phase $20000
(2) 1284/   20000 :                     SUBCPU_DATA:
(2) 1285/    6980 :                     			dephase
(2) 1286/    1180 :                     			dephase
(2) 1287/    1180 :                     
(1)   73/    1180 :                     SP_End:
(1)   74/    1180 :                     		align 2
(1)   75/    1180 :                     
(1)   76/    1180 :                     ; ====================================================================
(1)   77/    1180 :                     ; ----------------------------------------------------------------
(1)   78/    1180 :                     ; Super-jump to a section already loaded
(1)   79/    1180 :                     ; on RAM
(1)   80/    1180 :                     ; ----------------------------------------------------------------
(1)   81/    1180 :                     
(1)   82/    1180 :                     		align $2000-$600
(1)   83/    1A00 :                     MCD_Main:
(1)   84/    1A00 :                     
     123/    1A00 :                     mcdin_top:
     124/    1A00 : 41FA 2228           		lea	Md_SysCode(pc),a0			; Copy SYSTEM routines
     125/    1A04 : 43F9 FFFF 0000      		lea	(RAM_SystemCode),a1
     126/    1A0A : 303C 1993           		move.w	#((Md_SysCode_e-Md_SysCode))-1,d0
     127/    1A0E :                     .copy_1:
     128/    1A0E : 12D8                		move.b	(a0)+,(a1)+
     129/    1A10 : 51C8 FFFC           		dbf	d0,.copy_1
     131/    1A14 :                     		include "system/mcd/marscd.asm"
(1)    1/    1A14 :                     ; ====================================================================
(1)    2/    1A14 :                     ; ----------------------------------------------------------------
(1)    3/    1A14 :                     ; 32X BOOT ON SEGA CD
(1)    4/    1A14 :                     ; ----------------------------------------------------------------
(1)    5/    1A14 :                     
(1)    6/    1A14 :                     ; Load the SH2 code from disc to WORD-RAM from here:
(1)    7/    1A14 :                     
(1)    8/    1A14 : 41FA 000A           		lea	.file_marscode(pc),a0		; Load SH2 code from disc to WORD-RAM
(1)    9/    1A18 : 4EB9 FFFF 1694      		jsr	(System_McdTrnsfr_WRAM).l
(1)   10/    1A1E : 600E                		bra.s	MarsCd_Boot
(1)   11/    1A20 :                     .file_marscode:
(1)   12/    1A20 : 4D41 5253 434F      		dc.b "MARSCODE.BIN",0
             1A26 : 4445 2E42 494E 00 
(1)   13/    1A2D :                     		align 2
(1)   14/    1A2E :                     
(1)   15/    1A2E :                     ; ----------------------------------------------------------------
(1)   16/    1A2E :                     
(1)   17/    1A2E :                     ; MarsCd_Retry:
(1)   18/    1A2E :                     ; 		lea	($A15100).l,a5
(1)   19/    1A2E :                     ; 		move.b	#0,1(a5)
(1)   20/    1A2E :                     MarsCd_Boot:
(1)   21/    1A2E : 4BF9 00A1 0000      		lea	($A10000).l,a5
(1)   22/    1A34 : 0CAD 4D41 5253      		cmp.l	#"MARS",$30EC(a5)	; check MARS ID
             1A3A : 30EC             
(1)   23/    1A3C : 6600 012A           		bne	MarsError
(1)   24/    1A40 :                     .sh_wait:
(1)   25/    1A40 : 082D 0007 5101      		btst.b	#7,$5101(a5)		; adapter control reg. REN=1 ?
(1)   26/    1A46 : 67F8                		beq.b	.sh_wait
(1)   27/    1A48 : 082D 0000 5101      		btst.b	#0,$5101(a5)		; check adapter mode
(1)   28/    1A4E : 6600 0108           		bne	Hot_Start
(1)   29/    1A52 :                     .cold_start:					; power on (cold_start)
(1)   30/    1A52 : 1B7C 0001 5101      		move.b	#1,$5101(a5)		; MARS mode
(1)   31/    1A58 :                     						; SH2 reset - wait 10ms -
(1)   32/    1A58 : 606A                		bra	RestartPrg
(1)   33/    1A5A :                     
(1)   34/    1A5A :                     ; ----------------------------------------------------------------
(1)   35/    1A5A :                     ; Clear framebuffer
(1)   36/    1A5A :                     ; ----------------------------------------------------------------
(1)   37/    1A5A :                     
(1)   38/    1A5A :                     		align 4
(1)   39/    1A5C :                     FrameClear:
(1)   40/    1A5C : 48E7 C140           		movem.l	d0/d1/d7/a1,-(a7)
(1)   41/    1A60 : 43F9 00A1 5180      		lea	($A15180).l,a1
(1)   42/    1A66 :                     .fm1
(1)   43/    1A66 : 08A9 0007 FF80      		bclr.b	#7,-$80(a1)		; MD access
(1)   44/    1A6C : 66F8                		bne.b	.fm1
(1)   45/    1A6E : 3E3C 00FF           		move.w	#($20000/$200-1),d7
(1)   46/    1A72 : 7000                		moveq	#0,d0
(1)   47/    1A74 : 7200                		moveq	#0,d1
(1)   48/    1A76 : 337C FFFF 0004      		move.w	#-1,$4(a1)		; Fill Length Reg.
(1)   49/    1A7C :                     .fill0:
(1)   50/    1A7C : 3341 0006           		move.w	d1,$6(a1)		; Fill Start Address Reg.
(1)   51/    1A80 : 3340 0008           		move.w	d0,$8(a1)		; Fill Data Reg.
(1)   52/    1A84 : 4E71                		nop
(1)   53/    1A86 :                     .fen0:
(1)   54/    1A86 : 0829 0001 000B      		btst.b	#1,$B(a1)		; FEN = 0 ?
(1)   55/    1A8C : 66F8                		bne.b	.fen0
(1)   56/    1A8E : D27C 0100           		add.w	#$100,d1		; Address = +200H
(1)   57/    1A92 : 51CF FFE8           		dbra	d7,.fill0
(1)   58/    1A96 : 4CDF 0283           		movem.l	(a7)+,d0/d1/d7/a1
(1)   59/    1A9A : 4E75                		rts
(1)   60/    1A9C :                     
(1)   61/    1A9C :                     ; ----------------------------------------------------------------
(1)   62/    1A9C :                     ; Palette RAM Clear
(1)   63/    1A9C :                     ; ----------------------------------------------------------------
(1)   64/    1A9C :                     
(1)   65/    1A9C :                     PaletteClear:
(1)   66/    1A9C : 48E7 8180           		movem.l	d0/d7/a0,-(a7)
(1)   67/    1AA0 : 41F9 00A1 5200      		lea	($A15200).l,a0
(1)   68/    1AA6 :                     .fm2
(1)   69/    1AA6 : 08A8 0007 FF00      		bclr.b	#7,-$100(a0)		; MD access
(1)   70/    1AAC : 66F8                		bne.b	.fm2
(1)   71/    1AAE : 3E3C 001F           		move.w	#(256/2/4-1),d7
(1)   72/    1AB2 :                     .pl:
(1)   73/    1AB2 : 20C0                		move.l	d0,(a0)+
(1)   74/    1AB4 : 20C0                		move.l	d0,(a0)+
(1)   75/    1AB6 : 20C0                		move.l	d0,(a0)+
(1)   76/    1AB8 : 20C0                		move.l	d0,(a0)+
(1)   77/    1ABA : 51CF FFF6           		dbra	d7,.pl
(1)   78/    1ABE : 4CDF 0181           		movem.l	(a7)+,d0/d7/a0
(1)   79/    1AC2 : 4E75                		rts
(1)   80/    1AC4 :                     
(1)   81/    1AC4 :                     ; ----------------------------------------------------------------
(1)   82/    1AC4 :                     ; (Re)Start
(1)   83/    1AC4 :                     ; ----------------------------------------------------------------
(1)   84/    1AC4 :                     
(1)   85/    1AC4 :                     RestartPrg:
(1)   86/    1AC4 : 3E3C 4AE2           		move.w	#19170,d7		; 8
(1)   87/    1AC8 :                     .res_wait:
(1)   88/    1AC8 : 51CF FFFE           		dbra	d7,.res_wait		; 12*d7+10
(1)   89/    1ACC : 43F9 00A1 5100      		lea	($A15100).l,a1		; ----	Mars Register Initialize
(1)   90/    1AD2 : 7000                		moveq	#0,d0			; ----	Communication Reg. Clear
(1)   91/    1AD4 : 2340 0020           		move.l	d0,$20(a1)		; 0
(1)   92/    1AD8 : 2340 0024           		move.l	d0,$24(a1)		; 4
(1)   93/    1ADC : 1B7C 0003 5101      		move.b	#3,$5101(a5)		; SH2 start
(1)   94/    1AE2 :                     .fm3
(1)   95/    1AE2 : 0891 0007           		bclr.b	#7,(a1)			; MD access
(1)   96/    1AE6 : 66FA                		bne.b	.fm3
(1)   97/    1AE8 : 7000                		moveq	#0,d0
(1)   98/    1AEA : 3340 0002           		move.w	d0,2(a1)		; Interrupt Reg.
(1)   99/    1AEE : 3340 0004           		move.w	d0,4(a1)		; Bank Reg.
(1)  100/    1AF2 : 3340 0006           		move.w	d0,6(a1)		; DREQ Control Reg.
(1)  101/    1AF6 : 2340 0008           		move.l	d0,8(a1)		; DREQ Source Address Reg.
(1)  102/    1AFA : 2340 000C           		move.l	d0,$c(a1)		; DREQ Destination Address Reg.
(1)  103/    1AFE : 3340 0010           		move.w	d0,$10(a1)		; DREQ Length Reg.
(1)  104/    1B02 : 3340 0030           		move.w	d0,$30(a1)		; PWM Control
(1)  105/    1B06 : 3340 0032           		move.w	d0,$32(a1)		; PWM fs Reg.
(1)  106/    1B0A : 3340 0038           		move.w	d0,$38(a1)		; PWM Mono Reg.
(1)  107/    1B0E : 3340 0080           		move.w	d0,$80(a1)		; Bitmap Mode Reg.
(1)  108/    1B12 : 3340 0082           		move.w	d0,$82(a1)		; Shift Reg.
(1)  109/    1B16 :                     .fs0:						; ----	Mars Frame Buffer Clear
(1)  110/    1B16 : 08A9 0000 008B      		bclr.b	#0,$8b(a1)		; FS = 0
(1)  111/    1B1C : 66F8                		bne.b	.fs0
(1)  112/    1B1E : 6100 FF3C           		bsr	FrameClear
(1)  113/    1B22 :                     .fs1:
(1)  114/    1B22 : 08E9 0000 008B      		bset.b	#0,$8b(a1)		; FS = 1
(1)  115/    1B28 : 67F8                		beq.b	.fs1
(1)  116/    1B2A : 6100 FF30           		bsr	FrameClear
(1)  117/    1B2E : 08A9 0000 008B      		bclr.b	#0,$8b(a1)		; FS = 0
(1)  118/    1B34 : 6100 FF66           		bsr	PaletteClear		; ----	Palette RAM Clear
(1)  119/    1B38 : 303C 0080           		move	#$80,d0			; ----	SH2 Check
(1)  120/    1B3C : 2229 0020           		move.l	$20(a1),d1		; SDRAM Self Check
(1)  121/    1B40 : B2BC 5344 4552      		cmp.l	#"SDER",d1
(1)  122/    1B46 : 6720                		beq	MarsError
(1)  123/    1B48 : 7000                		moveq	#0,d0			; ----	Communication Reg. Clear
(1)  124/    1B4A : 2340 0028           		move.l	d0,$28(a1)		; 8
(1)  125/    1B4E : 2340 002C           		move.l	d0,$2C(a1)		; 12
(1)  126/    1B52 :                     ; 		movea.l	#-64,a6
(1)  127/    1B52 :                     ; 		movem.l	(a6),d0/d3-d7/a0-a6
(1)  128/    1B52 : 44FC 0000           		move	#0,ccr			; Complete
(1)  129/    1B56 : 6028                		bra.b	IcdAllEnd
(1)  130/    1B58 :                     Hot_Start:
(1)  131/    1B58 : 43F9 00A1 5100      		lea	($A15100).l,a1
(1)  132/    1B5E : 3340 0006           		move.w	d0,6(a1)		; DREQ Control Reg.
(1)  133/    1B62 : 303C 8000           		move.w	#$8000,d0
(1)  134/    1B66 : 6018                		bra.b	IcdAllEnd
(1)  135/    1B68 :                     MarsError:
(1)  136/    1B68 : 44FC 0001           		move	#1,ccr			; Error
(1)  137/    1B6C : (MACRO)              		vdp_showme $00E
(1)  137/    1B6C : 23FC C000 0000                      move.l  #$C0000000,(vdp_ctrl).l
             1B72 : 00C0 0004          
(1)  137/    1B76 : 33FC 000E 00C0                      move.w  #$00E,(vdp_data).l
             1B7C : 0000             
(1)  138/    1B7E : 60FE                		bra	*
(1)  139/    1B80 :                     IcdAllEnd:
(1)  140/    1B80 :                     ; 		bcs	_error
(1)  141/    1B80 :                     
(1)  142/    1B80 :                     ; ----------------------------------------------------------------
(1)  143/    1B80 :                     ; Send the entire SH2 code in split FrameBuffer sections
(1)  144/    1B80 :                     ; ----------------------------------------------------------------
(1)  145/    1B80 :                     
(1)  146/    1B80 : 4DF9 00A1 5100      		lea	(sysmars_reg).l,a6
(1)  147/    1B86 :                     .wait_fb:
(1)  148/    1B86 : 0896 0007           		bclr	#7,(a6)				; Set FM bit to MD
(1)  149/    1B8A : 66FA                		bne.s	.wait_fb			; Wait until it accepts.
(1)  150/    1B8C :                     	; --------------------------------
(1)  151/    1B8C :                     	; FRAMEBUFFER 1
(1)  152/    1B8C : 08EE 0000 008B      .wait_f1:	bset	#0,$8B(a6)			; Set BUFFER 1
(1)  153/    1B92 : 67F8                		beq.s	.wait_f1
(1)  154/    1B94 : 43F9 0084 0000      		lea	($840000).l,a1
(1)  155/    1B9A : 41F9 0021 FFC8      		lea	($200000+($20000-$38)).l,a0	; Read SECOND half of SH2
(1)  156/    1BA0 : 2E3C 0000 7FFF      		move.l	#(($20000)/4)-1,d7		; Size for this section
(1)  157/    1BA6 :                     .send_half:
(1)  158/    1BA6 : 22D8                		move.l	(a0)+,(a1)+
(1)  159/    1BA8 : 51CF FFFC           		dbf	d7,.send_half
(1)  160/    1BAC :                     	; --------------------------------
(1)  161/    1BAC :                     	; FRAMEBUFFER 0
(1)  162/    1BAC : 08AE 0000 008B      .wait_f0:	bclr	#0,$8B(a6)			; Set BUFFER 0
(1)  163/    1BB2 : 66F8                		bne.s	.wait_f0
(1)  164/    1BB4 : 43F9 0084 0000      		lea	($840000).l,a1
(1)  165/    1BBA : 41FA 007E           		lea	MarsInitHeader(pc),a0		; Module header
(1)  166/    1BBE : 3E3C 000D           		move.w	#$0E-1,d7
(1)  167/    1BC2 :                     .send_head:
(1)  168/    1BC2 : 22D8                		move.l	(a0)+,(a1)+
(1)  169/    1BC4 : 51CF FFFC           		dbf	d7,.send_head
(1)  170/    1BC8 : 41F9 0020 0000      		lea	($200000).l,a0			; Read the FIRST half of SH2
(1)  171/    1BCE : 2E3C 0000 7FF1      		move.l	#(($20000-$38)/4)-1,d7		; Size for this section
(1)  172/    1BD4 :                     .send_code:
(1)  173/    1BD4 : 22D8                		move.l	(a0)+,(a1)+
(1)  174/    1BD6 : 51CF FFFC           		dbf	d7,.send_code
(1)  175/    1BDA :                     	; --------------------------------
(1)  176/    1BDA :                     .wait_adapter:
(1)  177/    1BDA : 08D6 0007           		bset	#7,(a6)				; Set FM bit to 32X
(1)  178/    1BDE : 67FA                		beq.s	.wait_adapter
(1)  179/    1BE0 : 4DF9 00A1 5100      		lea	($A15100).l,a6
(1)  180/    1BE6 : 2D7C 5F43 445F      		move.l	#"_CD_",$20(a6)			; Write CD32X boot flag.
             1BEC : 0020             
(1)  181/    1BEE : 082E 0007 008A      .wait_f1fb:	btst	#7,$8A(a6)			; Wait SVDP's VBlank
(1)  182/    1BF4 : 67F8                		beq.s	.wait_f1fb
(1)  183/    1BF6 : 0CAE 4D5F 4F4B      .master:	cmp.l	#"M_OK",$20(a6)			; Check SH2 status tags
             1BFC : 0020             
(1)  184/    1BFE : 66F6                		bne.s	.master
(1)  185/    1C00 : 0CAE 535F 4F4B      .slave:		cmp.l	#"S_OK",$24(a6)
             1C06 : 0024             
(1)  186/    1C08 : 66F6                		bne.s	.slave
(1)  187/    1C0A : 202E 0020           .wait_mstr:	move.l	$20(a6),d0			; Status tags cleared?
(1)  188/    1C0E : 66FA                		bne.s	.wait_mstr
(1)  189/    1C10 : 202E 0024           .wait_slv:	move.l	$24(a6),d0
(1)  190/    1C14 : 66FA                		bne.s	.wait_slv
(1)  191/    1C16 : 4DF9 00C0 0004      		lea	(vdp_ctrl).l,a6
(1)  192/    1C1C : 2CBC 8004 8104      		move.l	#$80048104,(a6)			; Default top VDP regs
(1)  193/    1C22 : 7000                		moveq	#0,d0				; Clear both Master and Slave comm's
(1)  194/    1C24 : 2B40 002C           		move.l	d0,comm12(a5)
(1)  195/    1C28 : 3E3C 00FF           		move.w	#$FF,d7				; Delay until SH2 gets first.
(1)  196/    1C2C :                     .wait_sh2:
(1)  197/    1C2C : 3C3C 007F           		move.w	#$7F,d6
(1)  198/    1C30 : 51CE FFFE           		dbf	d6,*
(1)  199/    1C34 : 51CF FFF6           		dbf	d7,.wait_sh2
(1)  200/    1C38 : 6038                		bra	MarsJumpHere
(1)  201/    1C3A :                     
(1)  202/    1C3A :                     ; ----------------------------------------------------------------
(1)  203/    1C3A :                     ; MARS CD header
(1)  204/    1C3A :                     ; ----------------------------------------------------------------
(1)  205/    1C3A :                     MarsInitHeader:
(1)  206/    1C3A : 4D41 5253 2043      		dc.b "MARS CDROM      "			; Module name
             1C40 : 4452 4F4D 2020 
             1C46 : 2020 2020          
(1)  207/    1C4A : 0000 0000           		dc.l $00000000				; Version
(1)  208/    1C4E : 0000 0000           		dc.l $00000000				; Not Used
(1)  209/    1C52 : 0600 0000           		dc.l $06000000				; SDRAM area
(1)  213/    1C56 : 0001 FFC8           		dc.l $1FFC8				; SDRAM code size, maximum: $1FFC8
(1)  215/    1C5A : 0600 06F8           		dc.l SH2_M_Entry			; Master SH2 PC (SH2 area)
(1)  216/    1C5E : 0600 0AAC           		dc.l SH2_S_Entry			; Slave SH2 PC (SH2 area)
(1)  217/    1C62 : 0600 0000           		dc.l SH2_Master				; Master SH2 default VBR
(1)  218/    1C66 : 0600 0128           		dc.l SH2_Slave				; Slave SH2 default VBR
(1)  219/    1C6A : 0000 0000           		dc.l $00000000				; Not Used
(1)  220/    1C6E : 0000 0000           		dc.l $00000000				; Not Used
(1)  221/    1C72 :                     		align 2
(1)  222/    1C72 :                     ; ----------------------------------------------------------------
(1)  223/    1C72 :                     MarsJumpHere:
(1)  224/    1C72 :                     
     133/    1C72 : 41F8 A004           		lea	(RAM_MdVideo),a0			; Clean our "work" RAM starting from here
     134/    1C76 : 223C FFFF D80C      		move.l	#sizeof_mdram,d1
     135/    1C7C : 7000                		moveq	#0,d0
     136/    1C7E : 30C0                .loop_ram:	move.w	d0,(a0)+
     137/    1C80 : B1C1                		cmp.l	d1,a0
     138/    1C82 : 65FA                		bcs.s	.loop_ram
     139/    1C84 : 4EB9 FFFF 166A      		jsr	(System_MdMcd_SubWait).l		; Wait Sub-CPU first.
     140/    1C8A : 4EB9 FFFF 0000      		jsr	(Sound_init).l				; Init Sound driver (FIRST)
     141/    1C90 : 4EB9 FFFF 0264      		jsr	(Video_init).l				; Init Video
     142/    1C96 : 4EB9 FFFF 1216      		jsr	(System_Init).l				; Init System
     143/    1C9C : 31FC 0001 C458      		move.w	#SET_INITMODE,(RAM_ScreenMode).w	; Reset screen mode
     144/    1CA2 : 4EF9 FFFF 1930      		jmp	(Md_ReadModes).l			; Go to SCREEN LOAD section
     145/FFFFFFFFFFFF22A8 :                     		phase $FFFF0600+*
     146/FFFFFFFFFFFF22A8 :                     Z80_CODE:	include "sound/driver/gema_zdrv.asm"		; Z80 code loaded once on boot.
(1)    1/FFFFFFFFFFFF22A8 :                     ; ===========================================================================
(1)    2/FFFFFFFFFFFF22A8 :                     ; -------------------------------------------------------------------
(1)    3/FFFFFFFFFFFF22A8 :                     ; GEMA/Nikona Z80 code v1.0
(1)    4/FFFFFFFFFFFF22A8 :                     ; by GenesisFan64 2023-2024
(1)    5/FFFFFFFFFFFF22A8 :                     ; -------------------------------------------------------------------
(1)    6/FFFFFFFFFFFF22A8 :                     
(1)    7/       0 :                     		phase 0
(1)    8/       0 :                     		cpu Z80		; Enter Z80 CPU
(1)    9/       0 :                     
(1)   10/       0 :                     ; --------------------------------------------------------
(1)   11/       0 :                     ; SETTINGS
(1)   12/       0 :                     ; --------------------------------------------------------
(1)   13/       0 :                     
(1)   14/       0 :                     ; !! = HARDCODED
(1)   15/       0 : =8H                  MAX_TRFRPZ	equ 8		; !! Max transferRom packets(bytes) **AFFECTS WAVE QUALITY**
(1)   16/       0 : =20H                 MAX_TRKCHN	equ 32		; !! Max internal shared tracker channel slots *** LIMTED to 32 ***
(1)   17/       0 : =20H                 MAX_RCACH	equ 20h		; !! Max storage for ROM pattern data *** 1-BIT SIZES ONLY, MUST BE ALIGNED ***
(1)   18/       0 : =8H                  MAX_BUFFNTRY	equ 4*2		; !! nikona_BuffList buffer entry size
(1)   19/       0 : =18H                 MAX_TBLSIZE	equ 18h		; Maximum size for chip tables (MINIMUM: 10h)
(1)   20/       0 : =1AH                 MAX_TRKINDX	equ 26		; Max channel indexes per buffer: 4PSG+6FM+8PCM+8PWM
(1)   21/       0 : =10H                 MAX_ZCMND	equ 10h		; Size of command array ** 1-bit SIZES ONLY ** (68k uses this label too)
(1)   22/       0 :                     
(1)   23/       0 :                     ; Debug:
(1)   24/       0 : =0H                  ZSET_TESTME	equ 0		; Set to 1 to check the DAC playback quality
(1)   25/       0 :                     
(1)   26/       0 :                     ; --------------------------------------------------------
(1)   27/       0 :                     ; Structs
(1)   28/       0 :                     ; --------------------------------------------------------
(1)   29/       0 :                     
(1)   30/       0 :                     ; trkBuff struct
(1)   31/       0 :                     ;
(1)   32/       0 :                     ; trk_Status: %ERP- V--0
(1)   33/       0 :                     ; E - enabled
(1)   34/       0 :                     ; R - Init|Restart track
(1)   35/       0 :                     ; P - refill-on-playback
(1)   36/       0 :                     ; V - volume change flag
(1)   37/       0 :                     ; 0 - Use global sub-beats
(1)   38/       0 : =0H                  trk_Status	equ 00h	; ** Track Status and Flags (MUST BE at 00h)
(1)   39/       0 : =1H                  trk_SeqId	equ 01h ; ** Track ID to play.
(1)   40/       0 : =2H                  trk_SetBlk	equ 02h	; ** Start on this block
(1)   41/       0 : =3H                  trk_TickSet	equ 03h	; ** Ticks for this track
(1)   42/       0 : =4H                  trk_Blocks	equ 04h ; ** [W] Current track's blocks
(1)   43/       0 : =6H                  trk_Patt	equ 06h ; ** [W] Current track's heads and patterns
(1)   44/       0 : =8H                  trk_Cach	equ 08h	; ** [W] Current track's cache notedata
(1)   45/       0 : =0AH                 trk_Read	equ 0Ah	; [W] Track current pattern read
(1)   46/       0 : =0CH                 trk_Rows	equ 0Ch	; [W] Track row counter
(1)   47/       0 : =0EH                 trk_VolMaster	equ 0Eh ; [W] Master volume for this track slot (00-max), +80h update
(1)   48/       0 : =10H                 trk_cachHalf	equ 10h ; ROM-cache halfcheck
(1)   49/       0 : =11H                 trk_rowPause	equ 11h	; Row-pause timer
(1)   50/       0 : =12H                 trk_tickTmr	equ 12h	; Ticks timer
(1)   51/       0 : =13H                 trk_currBlk	equ 13h	; Current block
(1)   52/       0 : =14H                 trk_Priority	equ 14h ; Priority level for this buffer
(1)   53/       0 : =15H                 trk_BankIns	equ 15h ; Instrument bank
(1)   54/       0 : =16H                 trk_BankHeads	equ 16h ; Header bank
(1)   55/       0 : =17H                 trk_BankBlk	equ 17h	; Block bank
(1)   56/       0 : =18H                 trk_MaxChnl	equ 18h ; MAX channels used in this track
(1)   57/       0 : =19H                 trk_VolFdTarget	equ 19h	; Target fade volume
(1)   58/       0 : =1AH                 trk_RomPattRead	equ 1Ah ; [3b] ROM current pattern data to be cache'd
(1)   59/       0 : =1DH                 trk_RomPatt	equ 1Dh ; [3b] ROM BASE pattern data
(1)   60/       0 : =20H                 trk_RomInst	equ 20h ; [3b] ROM instrument data
(1)   61/       0 : =23H                 trk_RomBlks	equ 23h ; [3b] ROM blocks data
(1)   62/       0 : =26H                 trk_ChnIndx	equ 26h	; CHANNEL INDEXES START HERE
(1)   63/       0 :                     
(1)   64/       0 :                     ; chnBuff struct: 8 bytes ONLY
(1)   65/       0 :                     ;
(1)   66/       0 :                     ; chnl_Flags: E0LRevin
(1)   67/       0 :                     ; E  - Channel is active
(1)   68/       0 :                     ; LR - Global left/Right panning bits (reverse bits: 0-ON 1-OFF)
(1)   69/       0 :                     ; e  - Effect*
(1)   70/       0 :                     ; v  - Volume*
(1)   71/       0 :                     ; i  - Intrument*
(1)   72/       0 :                     ; n  - Note*
(1)   73/       0 : =0H                  chnl_Flags	equ 0	; Playback flags ** DON'T MOVE THIS **
(1)   74/       0 : =1H                  chnl_Chip	equ 1	; %ccccpppp c - Current Chip ID / p - Priority level
(1)   75/       0 : =2H                  chnl_Note	equ 2
(1)   76/       0 : =3H                  chnl_Ins	equ 3	; Starting from 1, 0 is invalid
(1)   77/       0 : =4H                  chnl_Vol	equ 4	; MAX to MIN: 40h-00h
(1)   78/       0 : =5H                  chnl_EffId	equ 5
(1)   79/       0 : =6H                  chnl_EffArg	equ 6
(1)   80/       0 : =7H                  chnl_Type	equ 7	; Impulse-note update bits
(1)   81/       0 :                     
(1)   82/       0 :                     ; --------------------------------------------------------
(1)   83/       0 :                     ; Variables
(1)   84/       0 :                     ; --------------------------------------------------------
(1)   85/       0 :                     
(1)   86/       0 :                     ; Z80 opcode labels for the wave playback routines
(1)   87/       0 : =0H                  zopcNop		equ 00h
(1)   88/       0 : =8H                  zopcEx		equ 08h
(1)   89/       0 : =0C9H                zopcRet		equ 0C9h
(1)   90/       0 : =0D9H                zopcExx		equ 0D9h		; (dac_me ONLY)
(1)   91/       0 : =0F5H                zopcPushAf	equ 0F5h		; (dac_fill ONLY)
(1)   92/       0 :                     
(1)   93/       0 :                     ; PSG external control
(1)   94/       0 : =0H                  COM		equ 0
(1)   95/       0 : =4H                  LEV		equ 4
(1)   96/       0 : =8H                  ATK		equ 8
(1)   97/       0 : =0CH                 DKY		equ 12
(1)   98/       0 : =10H                 SLV		equ 16
(1)   99/       0 : =14H                 RRT		equ 20
(1)  100/       0 : =18H                 MODE		equ 24
(1)  101/       0 : =1CH                 DTL		equ 28
(1)  102/       0 : =20H                 DTH		equ 32
(1)  103/       0 : =24H                 ALV		equ 36
(1)  104/       0 : =28H                 FLG		equ 40
(1)  105/       0 : =2CH                 TMR		equ 44
(1)  106/       0 : =30H                 PVOL		equ 48
(1)  107/       0 : =34H                 PARP		equ 52
(1)  108/       0 : =38H                 PTMR		equ 56
(1)  109/       0 :                     
(1)  110/       0 :                     ; PWM control
(1)  111/       0 :                     ; PWCOM		equ 0
(1)  112/       0 :                     ; PWPTH_V	equ 8	; Volume | Pitch MSB (VVVVVVPPb)
(1)  113/       0 :                     ; PWPHL		equ 16	; Pitch LSB
(1)  114/       0 :                     ; PWOUTF	equ 24	; Output mode/bits | 32-bit address (%SlLRxiix) ii=$02 or $06
(1)  115/       0 :                     ; PWINSH	equ 32	; **
(1)  116/       0 :                     ; PWINSM	equ 40	; **
(1)  117/       0 :                     ; PWINSL	equ 48	; **
(1)  118/       0 :                     
(1)  119/       0 :                     ; ====================================================================
(1)  120/       0 :                     ; --------------------------------------------------------
(1)  121/       0 :                     ; Code starts here
(1)  122/       0 :                     ; --------------------------------------------------------
(1)  123/       0 :                     
(1)  124/       0 : F3                  		di			; Disable interrputs first
(1)  125/       1 : ED 56               		im	1		; Set Interrupt mode 1
(1)  126/       3 : 31 00 20            		ld	sp,2000h	; Set stack at the end of Z80
(1)  127/       6 : 18 48               		jr	z80_init	; Jump to z80_init
(1)  128/       8 :                     
(1)  129/       8 :                     ; --------------------------------------------------------
(1)  130/       8 :                     ; RST 8 (dac_me)
(1)  131/       8 :                     ; *** self-modifiable code ***
(1)  132/       8 :                     ;
(1)  133/       8 :                     ; Writes wave data to DAC using data stored
(1)  134/       8 :                     ; on the wave buffer, call this routine every 6 or 8
(1)  135/       8 :                     ; instructions to keep the samplerate stable.
(1)  136/       8 :                     ;
(1)  137/       8 :                     ; Input (EXX):
(1)  138/       8 :                     ;  c - WAVE buffer MSB
(1)  139/       8 :                     ; de - Pitch (xx.00)
(1)  140/       8 :                     ; h  - WAVE buffer LSB (as xx.00)
(1)  141/       8 :                     ;
(1)  142/       8 :                     ; Uses (EXX):
(1)  143/       8 :                     ; b
(1)  144/       8 :                     ;
(1)  145/       8 :                     ; Notes:
(1)  146/       8 :                     ; ONLY USE dac_on and dac_off to control
(1)  147/       8 :                     ; wave playback.
(1)  148/       8 :                     ;
(1)  149/       8 :                     ; call dac_on to enable wave playback, locks FM6
(1)  150/       8 :                     ; and
(1)  151/       8 :                     ; call dac_off to disable wave and unlock FM6.
(1)  152/       8 :                     ; --------------------------------------------------------
(1)  153/       8 :                     
(1)  154/       8 :                     ; Samplerate is at 16000hz with minimal quality loss.
(1)  155/       8 :                     ; 		org 8
(1)  156/       8 : D9                  dac_me:		exx			; * swap regs <-- Changes between EXX(play) and RET(stop)
(1)  157/       9 : 08                  		ex	af,af'		; Swap af
(1)  158/       A : 45                  		ld	b,l		; Save pitch .00 to b
(1)  159/       B : 6C                  		ld	l,h		; l - xx.00 to 00xx
(1)  160/       C : 61                  		ld	h,c		; h - Wave buffer MSB + 00xx
(1)  161/       D : 3E 2A               		ld	a,2Ah		; YM register 2Ah
(1)  162/       F : 32 00 40            		ld	(Zym_ctrl_1),a	; Set DAC write
(1)  163/      12 : 7E                  		ld	a,(hl)		; Read wave byte
(1)  164/      13 : 32 01 40            		ld	(Zym_data_1),a	; Write it to DAC
(1)  165/      16 : 65                  		ld	h,l		; get hl back
(1)  166/      17 : 68                  		ld	l,b		; Get .00 back from b to l
(1)  167/      18 : 19                  		add	hl,de		; Pitch increment hl
(1)  168/      19 : 08                  		ex	af,af'		; Return af
(1)  169/      1A : D9                  		exx			; * swap regs
(1)  170/      1B : C9                  		ret
(1)  171/      1C :                     
(1)  172/      1C :                     ; --------------------------------------------------------
(1)  173/      1C :                     ; 1Ch - Master tracklist pointer
(1)  174/      1C :                     gemaMstrListPos:
(1)  175/      1C : 00                  		db 0				; ** 32-bit 68k address **
(1)  176/      1D : 00                  		db 0
(1)  177/      1E : 00                  		db 0
(1)  178/      1F : 00                  		db 0
(1)  179/      20 :                     
(1)  180/      20 :                     ; --------------------------------------------------------
(1)  181/      20 :                     ; RST 20h (dac_me)
(1)  182/      20 :                     ; *** self-modifiable code ***
(1)  183/      20 :                     ;
(1)  184/      20 :                     ; Checks if the WAVE cache needs refilling to keep
(1)  185/      20 :                     ; it playing.
(1)  186/      20 :                     ; --------------------------------------------------------
(1)  187/      20 :                     
(1)  188/      20 :                     ; 		org 20h
(1)  189/      20 : F5                  dac_fill:	push	af		; <-- Changes between PUSH AF(play) and RET(stop)
(1)  190/      21 : 3A 83 1C            		ld	a,(dDacFifoMid)	; a - Get half-way value
(1)  191/      24 : D9                  		exx			; * swap regs
(1)  192/      25 : AC                  		xor	h		; Grab LSB.00
(1)  193/      26 : D9                  		exx			; * swap regs
(1)  194/      27 : E6 80               		and	80h		; Check if bit changed
(1)  195/      29 : C4 9D 14            		call	nz,dac_refill	; If yes, Refill and update LSB to check
(1)  196/      2C : F1                  		pop	af
(1)  197/      2D : C9                  		ret
(1)  198/      2E :                     
(1)  199/      2E :                     ; --------------------------------------------------------
(1)  200/      2E :                     ; 02Eh - User read/write values
(1)  201/      2E : 00                  commZWrite	db 0			; 2Eh: cmd fifo wptr (from 68k)
(1)  202/      2F : 00                  commZRomBlk	db 0			; 2Fh: 68k ROM block flag
(1)  203/      30 : 00                  cdRamLen	db 0			; 30h: Size + status flag
(1)  204/      31 : 00 00               cdRamDst	db 0,0			; 31h: ** Z80 destination
(1)  205/      33 : 00 00               cdRamSrc	db 0,0			; 33h: ** 68k 24-bit source
(1)  206/      35 : 00                  cdRamSrcB	db 0			; 35h: **
(1)  207/      36 : 00                  mcdBlock	db 0			; 36h: Flag to BLOCK SCD comm
(1)  208/      37 : 00                  marsBlock	db 0			; 37h: Flag to BLOCK PWM transfers.
(1)  209/      38 :                     
(1)  210/      38 :                     ; --------------------------------------------------------
(1)  211/      38 :                     ; Z80 Interrupt at 0038h
(1)  212/      38 :                     ; --------------------------------------------------------
(1)  213/      38 :                     
(1)  214/      38 :                     ; 		org 38h			; Align 38h
(1)  215/      38 : ED 73 7E 1C         		ld	(tickSpSet),sp	; Write TICK flag using sp (xx1F, read as tickFlag+1)
(1)  216/      3C : F3                  		di			; Disable interrupt
(1)  217/      3D : C9                  		ret
(1)  218/      3E :                     
(1)  219/      3E :                     ; --------------------------------------------------------
(1)  220/      3E :                     ; 03Eh - More user settings
(1)  221/      3E : 00                  palMode		db 0		; 3Eh: PAL mode flag
(1)  222/      3F : 00                  commZRead	db 0		; cmd fifo READ pointer (here)
(1)  223/      40 :                     
(1)  224/      40 :                     ; --------------------------------------------------------
(1)  225/      40 :                     ; 68K Read/Write area at 40h
(1)  226/      40 :                     ; --------------------------------------------------------
(1)  227/      40 :                     
(1)  228/      40 :                     ; 		org 40h
(1)  229/      40 :                     commZfifo	ds MAX_ZCMND			; Buffer for commands from 68k side
(1)  230/      50 :                     
(1)  231/      50 :                     ; --------------------------------------------------------
(1)  232/      50 :                     ; Initialize
(1)  233/      50 :                     ; --------------------------------------------------------
(1)  234/      50 :                     
(1)  235/      50 :                     z80_init:
(1)  236/      50 : CD 7A 11            		call	gema_init		; Init values
(1)  237/      53 : FB                  		ei
(1)  238/      54 :                     
(1)  239/      54 :                     ; --------------------------------------------------------
(1)  240/      54 :                     ; MAIN LOOP
(1)  241/      54 :                     ; --------------------------------------------------------
(1)  242/      54 :                     
(1)  243/      54 :                     drv_loop:
(1)  244/      54 : CF                  		rst	8
(1)  245/      55 : CD E6 11            		call	get_tick		; Check tick on VBlank
(1)  246/      58 : E7                  		rst	20h			; Refill wave here
(1)  247/      59 : CF                  		rst	8
(1)  248/      5A : 06 00               		ld	b,0			; b - Reset current flags (beat|tick)
(1)  249/      5C : 3A 80 1C            		ld	a,(tickCnt)		; Decrement tick counter
(1)  250/      5F : D6 01               		sub	1
(1)  251/      61 : 38 0B               		jr	c,.noticks		; If non-zero, no tick passed.
(1)  252/      63 : 32 80 1C            		ld	(tickCnt),a
(1)  253/      66 : CD BF 12            		call	chip_env		; Process PSG and YM
(1)  254/      69 : CD E6 11            		call	get_tick		; Check for another tick
(1)  255/      6C : 06 01               		ld 	b,01b			; Set TICK and clear BEAT flags (01b)
(1)  256/      6E :                     .noticks:
(1)  257/      6E : 3A 9C 1C            		ld	a,(sbeatAcc+1)		; check beat counter (scaled by tempo)
(1)  258/      71 : D6 01               		sub	1
(1)  259/      73 : 38 06               		jr	c,.nobeats
(1)  260/      75 : CF                  		rst	8
(1)  261/      76 : 32 9C 1C            		ld	(sbeatAcc+1),a		; 1/24 beat passed.
(1)  262/      79 : CB C8               		set	1,b			; Set BEAT (10b) flag
(1)  263/      7B :                     .nobeats:
(1)  264/      7B : CF                  		rst	8
(1)  265/      7C : 78                  		ld	a,b			; Any beat/tick bits set?
(1)  266/      7D : B7                  		or	a
(1)  267/      7E : 28 14               		jr	z,.neither
(1)  268/      80 : 32 98 1C            		ld	(currTickBits),a	; Save BEAT/TICK bits
(1)  269/      83 : CF                  		rst	8
(1)  270/      84 : CD E6 11            		call	get_tick
(1)  271/      87 : CD 24 06            		call	set_chips		; Send changes to sound chips
(1)  272/      8A : CD E6 11            		call	get_tick
(1)  273/      8D : CF                  		rst	8
(1)  274/      8E : CD 3A 02            		call	upd_track		; Update track data
(1)  275/      91 : CD E6 11            		call	get_tick
(1)  276/      94 :                     .neither:
(1)  277/      94 : CF                  		rst	8
(1)  279/      95 : CD 58 10            		call	zmars_send		; External communication
(1)  281/      98 : CD E6 11            		call	get_tick
(1)  282/      9B :                     .next_cmd:
(1)  283/      9B : 3A 2E 00            		ld	a,(commZWrite)		; Check if commZ R/W indexes
(1)  284/      9E : 47                  		ld	b,a			; are in the same spot a == b
(1)  285/      9F : 3A 3F 00            		ld	a,(commZRead)
(1)  286/      A2 : B8                  		cp	b			; If equal, loop back.
(1)  287/      A3 : 28 AF               		jr	z,drv_loop
(1)  288/      A5 : CF                  		rst	8
(1)  289/      A6 : CD BE 00            		call	.grab_arg		; Read staring flag -1
(1)  290/      A9 : FE FF               		cp	-1			; Got START -1?
(1)  291/      AB : 20 A7               		jr	nz,drv_loop		; If not, end of commands
(1)  292/      AD : CD BE 00            		call	.grab_arg		; Read command number
(1)  293/      B0 : 87                  		add	a,a			; ID * 2
(1)  294/      B1 : 21 DD 00            		ld	hl,.list		; Index-jump...
(1)  295/      B4 : 16 00               		ld	d,0
(1)  296/      B6 : 5F                  		ld	e,a
(1)  297/      B7 : 19                  		add	hl,de
(1)  298/      B8 : 7E                  		ld	a,(hl)
(1)  299/      B9 : 23                  		inc	hl
(1)  300/      BA : 66                  		ld	h,(hl)
(1)  301/      BB : CF                  		rst	8
(1)  302/      BC : 6F                  		ld	l,a
(1)  303/      BD : E9                  		jp	(hl)
(1)  304/      BE :                     
(1)  305/      BE :                     ; --------------------------------------------------------
(1)  306/      BE :                     ; Read cmd byte, auto re-rolls to 3Fh
(1)  307/      BE :                     ; --------------------------------------------------------
(1)  308/      BE :                     
(1)  309/      BE :                     .grab_arg:
(1)  310/      BE : D5                  		push	de
(1)  311/      BF : E5                  		push	hl
(1)  312/      C0 :                     .getcbytel:
(1)  313/      C0 : 3A 2E 00            		ld	a,(commZWrite)
(1)  314/      C3 : 57                  		ld	d,a
(1)  315/      C4 : CF                  		rst	8
(1)  316/      C5 : 3A 3F 00            		ld	a,(commZRead)
(1)  317/      C8 : BA                  		cp	d		; commZ R/W indexes are the same?
(1)  318/      C9 : 28 F5               		jr	z,.getcbytel	; wait until these counters change.
(1)  319/      CB : 16 00               		ld	d,0
(1)  320/      CD : 5F                  		ld	e,a
(1)  321/      CE : 21 40 00            		ld	hl,commZfifo	; Read commZ list + index
(1)  322/      D1 : 19                  		add	hl,de
(1)  323/      D2 : CF                  		rst	8
(1)  324/      D3 : 3C                  		inc	a
(1)  325/      D4 : E6 0F               		and	MAX_ZCMND-1	; ** commZ list buffer limit
(1)  326/      D6 : 32 3F 00            		ld	(commZRead),a
(1)  327/      D9 : 7E                  		ld	a,(hl)		; a - got this byte from the buffer
(1)  328/      DA : E1                  		pop	hl
(1)  329/      DB : D1                  		pop	de
(1)  330/      DC : C9                  		ret
(1)  331/      DD :                     
(1)  332/      DD :                     ; --------------------------------------------------------
(1)  333/      DD :                     
(1)  334/      DD :                     .list:
(1)  335/      DD : ED 00               		dw .cmnd_0		; 00h -
(1)  336/      DF : F0 00               		dw .cmnd_1		; 01h - Set Master tracklist
(1)  337/      E1 : 09 01               		dw .cmnd_2		; 02h - Play by track number
(1)  338/      E3 : 46 01               		dw .cmnd_3		; 03h - Stop by track number
(1)  339/      E5 : ED 00               		dw .cmnd_0		; 04h - **
(1)  340/      E7 : 84 01               		dw .cmnd_5		; 05h - Fade volume (FadeIn/FadeOut)
(1)  341/      E9 : BD 01               		dw .cmnd_6		; 06h - Set maximum volume to slot
(1)  342/      EB : F6 01               		dw .cmnd_7		; 07h - Set GLOBAL sub-beats
(1)  343/      ED :                     
(1)  344/      ED :                     ; --------------------------------------------------------
(1)  345/      ED :                     ; Command 00h
(1)  346/      ED :                     ;
(1)  347/      ED :                     ; Reserved for TESTING purposes.
(1)  348/      ED :                     ; --------------------------------------------------------
(1)  349/      ED :                     
(1)  350/      ED :                     .cmnd_0:
(1)  351/      ED :                     ; 		ld	a,DacIns_TEST>>16
(1)  352/      ED :                     ; 		ld	hl,(DacIns_TEST+6)&0FFFFh
(1)  353/      ED :                     ; 		ld	(wave_Start),hl
(1)  354/      ED :                     ; 		ld	(wave_Start+2),a
(1)  355/      ED :                     ; 		ld	a,02h
(1)  356/      ED :                     ; 		ld	hl,04000h
(1)  357/      ED :                     ; 		ld	(wave_Len),hl
(1)  358/      ED :                     ; 		ld	(wave_Len+2),a
(1)  359/      ED :                     ; 		ld	bc,0
(1)  360/      ED :                     ; 		ld	(wave_Loop),bc
(1)  361/      ED :                     ; 		ld	hl,100h
(1)  362/      ED :                     ; 		ld	(wave_Pitch),hl
(1)  363/      ED :                     ; 		ld	a,1
(1)  364/      ED :                     ; 		ld	(wave_Flags),a
(1)  365/      ED :                     ; 		call	dac_play
(1)  366/      ED :                     
(1)  367/      ED :                     ; 		ld	iy,trkBuff_0
(1)  368/      ED :                     ; 		ld	(iy+trk_VolMaster),64-16
(1)  369/      ED :                     ; 		ld	(iy+trk_VolFdTarget),64
(1)  370/      ED :                     
(1)  371/      ED : C3 9B 00            		jp	.next_cmd
(1)  372/      F0 :                     
(1)  373/      F0 :                     ; --------------------------------------------------------
(1)  374/      F0 :                     ; Command 01h:
(1)  375/      F0 :                     ;
(1)  376/      F0 :                     ; Set the Track MASTER-list.
(1)  377/      F0 :                     ; --------------------------------------------------------
(1)  378/      F0 :                     
(1)  379/      F0 :                     .cmnd_1:
(1)  380/      F0 : 21 1F 00            		ld	hl,gemaMstrListPos+3	; 32-bit big endian
(1)  381/      F3 : CD BE 00            		call	.grab_arg		; $000000xx
(1)  382/      F6 : 77                  		ld	(hl),a
(1)  383/      F7 : 2B                  		dec	hl
(1)  384/      F8 : CD BE 00            		call	.grab_arg		; $0000xx00
(1)  385/      FB : 77                  		ld	(hl),a
(1)  386/      FC : 2B                  		dec	hl
(1)  387/      FD : CD BE 00            		call	.grab_arg		; $00xx0000
(1)  388/     100 : 77                  		ld	(hl),a
(1)  389/     101 : 2B                  		dec	hl
(1)  390/     102 : CD BE 00            		call	.grab_arg		; $xx000000 (filler)
(1)  391/     105 : 77                  		ld	(hl),a
(1)  392/     106 : C3 9B 00            		jp	.next_cmd
(1)  393/     109 :                     
(1)  394/     109 :                     ; --------------------------------------------------------
(1)  395/     109 :                     ; Command 02h:
(1)  396/     109 :                     ;
(1)  397/     109 :                     ; Make new track by sequence number
(1)  398/     109 :                     ;
(1)  399/     109 :                     ; Arguments:
(1)  400/     109 :                     ; SeqID,BlockPos,SlotIndex(If -1 autofill)
(1)  401/     109 :                     ; --------------------------------------------------------
(1)  402/     109 :                     
(1)  403/     109 :                     .cmnd_2:
(1)  404/     109 : CD BE 00            		call	.grab_arg		; d1: Sequence ID
(1)  405/     10C : 4F                  		ld	c,a			; copy as c
(1)  406/     10D : CD BE 00            		call	.grab_arg		; d2: Block from
(1)  407/     110 : 47                  		ld	b,a			; copy as b
(1)  408/     111 : CF                  		rst	8
(1)  409/     112 : CD BE 00            		call	.grab_arg		; d0: Slot index
(1)  410/     115 : FD 21 A6 16         		ld	iy,nikona_BuffList	; iy - Slot buffer list
(1)  411/     119 : B7                  		or	a
(1)  412/     11A : FA 2C 01            		jp	m,.srch_mode
(1)  413/     11D :                     ; 		cp	-1			; if d2 == -1, search
(1)  414/     11D :                     ; 		jr	z,.srch_mode
(1)  415/     11D : FE 04               		cp	(nikona_BuffList_e-nikona_BuffList)/MAX_BUFFNTRY	; If maxed out slots
(1)  416/     11F : D2 9B 00            		jp	nc,.next_cmd
(1)  417/     122 : CF                  		rst	8
(1)  418/     123 : CD 14 02            		call	.cmnd_rdslot
(1)  419/     126 : CD 3B 01            		call	.wrtto_slot
(1)  420/     129 : C3 9B 00            		jp	.next_cmd
(1)  421/     12C :                     ; -1
(1)  422/     12C :                     .srch_mode:
(1)  423/     12C : CD 27 02            		call	.srch_slot
(1)  424/     12F : FE FF               		cp	-1
(1)  425/     131 : CA 9B 00            		jp	z,.next_cmd		; Then skip, no free slot.
(1)  426/     134 : CB 7E               		bit	7,(hl)			; Is this track free?
(1)  427/     136 : CA 3B 01            		jp	z,.wrtto_slot
(1)  428/     139 : 18 F1               		jr	.srch_mode
(1)  429/     13B :                     .wrtto_slot:
(1)  430/     13B : 36 C0               		ld	(hl),0C0h		; ** Write trk_Status flags: Enable+Restart
(1)  431/     13D : 23                  		inc	hl
(1)  432/     13E : CF                  		rst	8
(1)  433/     13F : 71                  		ld	(hl),c			; ** write trk_SeqId
(1)  434/     140 : 23                  		inc	hl
(1)  435/     141 : 70                  		ld	(hl),b			; ** write trk_SetBlk
(1)  436/     142 : 79                  		ld	a,c
(1)  437/     143 : C3 9B 00            		jp	.next_cmd
(1)  438/     146 :                     
(1)  439/     146 :                     ; --------------------------------------------------------
(1)  440/     146 :                     ; Command 03h:
(1)  441/     146 :                     ;
(1)  442/     146 :                     ; Stop track with the same sequence number
(1)  443/     146 :                     ;
(1)  444/     146 :                     ; SeqID,SlotIndex(-1 allslots)
(1)  445/     146 :                     ; --------------------------------------------------------
(1)  446/     146 :                     
(1)  447/     146 :                     .cmnd_3:
(1)  448/     146 : CD BE 00            		call	.grab_arg		; d1: Sequence ID
(1)  449/     149 : 4F                  		ld	c,a			; copy to c
(1)  450/     14A : CD BE 00            		call	.grab_arg		; d0: Slot index
(1)  451/     14D : FD 21 A6 16         		ld	iy,nikona_BuffList	; iy - Slot buffer list
(1)  452/     151 : B7                  		or	a
(1)  453/     152 : FA 64 01            		jp	m,.srch_del
(1)  454/     155 :                     ; 		cp	-1			; if -1, search for all with same ID
(1)  455/     155 :                     ; 		jr	z,.srch_del
(1)  456/     155 : FE 04               		cp	(nikona_BuffList_e-nikona_BuffList)/MAX_BUFFNTRY	; If maxed out slots
(1)  457/     157 : D2 9B 00            		jp	nc,.next_cmd
(1)  458/     15A : CF                  		rst	8
(1)  459/     15B : CD 14 02            		call	.cmnd_rdslot
(1)  460/     15E : CD 71 01            		call	.wrtto_del
(1)  461/     161 : C3 9B 00            		jp	.next_cmd
(1)  462/     164 :                     ; -1
(1)  463/     164 :                     .srch_del:
(1)  464/     164 : CD 27 02            		call	.srch_slot
(1)  465/     167 : FE FF               		cp	-1
(1)  466/     169 : CA 9B 00            		jp	z,.next_cmd
(1)  467/     16C : CD 71 01            		call	.wrtto_del
(1)  468/     16F : 18 F3               		jr	.srch_del
(1)  469/     171 :                     .wrtto_del:
(1)  470/     171 : CB 7E               		bit	7,(hl)
(1)  471/     173 : C8                  		ret	z
(1)  472/     174 : CB 79               		bit	7,c		; <-- lazy -1 check
(1)  473/     176 : 20 05               		jr	nz,.del_all
(1)  474/     178 : DD 7E 01            		ld	a,(ix+trk_SeqId)
(1)  475/     17B : B9                  		cp	c
(1)  476/     17C : C0                  		ret	nz
(1)  477/     17D :                     .del_all:
(1)  478/     17D : 36 FF               		ld	(hl),-1		; -1 flag, stop channel and clear slot
(1)  479/     17F : 23                  		inc	hl
(1)  480/     180 : 36 FF               		ld	(hl),-1		; Reset seqId
(1)  481/     182 : CF                  		rst	8
(1)  482/     183 : C9                  		ret
(1)  483/     184 :                     
(1)  484/     184 :                     ; --------------------------------------------------------
(1)  485/     184 :                     ; Command 05h:
(1)  486/     184 :                     ;
(1)  487/     184 :                     ; Fade volume (FadeIn/FadeOut)
(1)  488/     184 :                     ;
(1)  489/     184 :                     ; Arguments:
(1)  490/     184 :                     ; TargetVol,SlotIndex(If -1 autofill)
(1)  491/     184 :                     ; --------------------------------------------------------
(1)  492/     184 :                     
(1)  493/     184 :                     .cmnd_5:
(1)  494/     184 : CD BE 00            		call	.grab_arg		; d1: Master volume
(1)  495/     187 : 4F                  		ld	c,a			; copy to c
(1)  496/     188 : CD BE 00            		call	.grab_arg		; d0: Slot index
(1)  497/     18B : FD 21 A6 16         		ld	iy,nikona_BuffList	; iy - Slot buffer list
(1)  498/     18F : B7                  		or	a
(1)  499/     190 : FA A2 01            		jp	m,.srch_fvol
(1)  500/     193 :                     ; 		cp	-1			; if -1, search for all with same ID
(1)  501/     193 :                     ; 		jr	z,.srch_fvol
(1)  502/     193 : FE 04               		cp	(nikona_BuffList_e-nikona_BuffList)/MAX_BUFFNTRY	; If maxed out slots
(1)  503/     195 : D2 9B 00            		jp	nc,.next_cmd
(1)  504/     198 : CF                  		rst	8
(1)  505/     199 : CD 14 02            		call	.cmnd_rdslot
(1)  506/     19C : CD AF 01            		call	.wrtto_fvol
(1)  507/     19F : C3 9B 00            		jp	.next_cmd
(1)  508/     1A2 :                     ; -1
(1)  509/     1A2 :                     .srch_fvol:
(1)  510/     1A2 : CD 27 02            		call	.srch_slot
(1)  511/     1A5 : FE FF               		cp	-1
(1)  512/     1A7 : CA 9B 00            		jp	z,.next_cmd		; Then skip, no free slot.
(1)  513/     1AA : CD AF 01            		call	.wrtto_fvol
(1)  514/     1AD : 18 F3               		jr	.srch_fvol
(1)  515/     1AF :                     .wrtto_fvol:
(1)  516/     1AF : CB 7E               		bit	7,(hl)			; Active?
(1)  517/     1B1 : C8                  		ret	z
(1)  518/     1B2 : CB DE               		set	3,(hl)			; Volume update flag
(1)  519/     1B4 : DD 71 19            		ld	(ix+trk_VolFdTarget),c
(1)  520/     1B7 : DD 36 0F 00         		ld	(ix+trk_VolMaster+1),0
(1)  521/     1BB : CF                  		rst	8
(1)  522/     1BC : C9                  		ret
(1)  523/     1BD :                     
(1)  524/     1BD :                     ; --------------------------------------------------------
(1)  525/     1BD :                     ; Command 06h:
(1)  526/     1BD :                     ;
(1)  527/     1BD :                     ; Set track's master volume
(1)  528/     1BD :                     ;
(1)  529/     1BD :                     ; Arguments:
(1)  530/     1BD :                     ; MasterVol,SlotIndex(If -1 autofill)
(1)  531/     1BD :                     ; --------------------------------------------------------
(1)  532/     1BD :                     
(1)  533/     1BD :                     .cmnd_6:
(1)  534/     1BD : CD BE 00            		call	.grab_arg		; d1: Master volume
(1)  535/     1C0 : 4F                  		ld	c,a			; copy to c
(1)  536/     1C1 : CD BE 00            		call	.grab_arg		; d0: Slot index
(1)  537/     1C4 : FD 21 A6 16         		ld	iy,nikona_BuffList	; iy - Slot buffer list
(1)  538/     1C8 : B7                  		or	a
(1)  539/     1C9 : FA DB 01            		jp	m,.srch_vol
(1)  540/     1CC :                     ; 		cp	-1			; if -1, search for all with same ID
(1)  541/     1CC :                     ; 		jr	z,.srch_vol
(1)  542/     1CC : FE 04               		cp	(nikona_BuffList_e-nikona_BuffList)/MAX_BUFFNTRY	; If maxed out slots
(1)  543/     1CE : D2 9B 00            		jp	nc,.next_cmd
(1)  544/     1D1 : CF                  		rst	8
(1)  545/     1D2 : CD 14 02            		call	.cmnd_rdslot
(1)  546/     1D5 : CD E8 01            		call	.wrtto_vol
(1)  547/     1D8 : C3 9B 00            		jp	.next_cmd
(1)  548/     1DB :                     ; -1
(1)  549/     1DB :                     .srch_vol:
(1)  550/     1DB : CD 27 02            		call	.srch_slot
(1)  551/     1DE : FE FF               		cp	-1
(1)  552/     1E0 : CA 9B 00            		jp	z,.next_cmd		; Then skip, no free slot.
(1)  553/     1E3 : CD E8 01            		call	.wrtto_vol
(1)  554/     1E6 : 18 F3               		jr	.srch_vol
(1)  555/     1E8 :                     .wrtto_vol:
(1)  556/     1E8 : CB DE               		set	3,(hl)			; Volume update flag
(1)  557/     1EA : DD 71 0E            		ld	(ix+trk_VolMaster),c
(1)  558/     1ED : DD 71 19            		ld	(ix+trk_VolFdTarget),c
(1)  559/     1F0 : DD 36 0F 00         		ld	(ix+trk_VolMaster+1),0
(1)  560/     1F4 : CF                  		rst	8
(1)  561/     1F5 : C9                  		ret
(1)  562/     1F6 :                     
(1)  563/     1F6 :                     ; --------------------------------------------------------
(1)  564/     1F6 :                     ; Command 07h:
(1)  565/     1F6 :                     ;
(1)  566/     1F6 :                     ; Set global sub-beats
(1)  567/     1F6 :                     ; --------------------------------------------------------
(1)  568/     1F6 :                     
(1)  569/     1F6 :                     .cmnd_7:
(1)  570/     1F6 : CD BE 00            		call	.grab_arg	; d0.w: $00xx
(1)  571/     1F9 : 4F                  		ld	c,a
(1)  572/     1FA : CD BE 00            		call	.grab_arg	; d0.w: $xx00
(1)  573/     1FD : 67                  		ld	h,a
(1)  574/     1FE : 69                  		ld	l,c
(1)  575/     1FF : 3A 3E 00            		ld	a,(palMode)
(1)  576/     202 : B7                  		or	a
(1)  577/     203 : 28 04               		jr	z,.not_pal
(1)  578/     205 : 11 20 00            		ld	de,32
(1)  579/     208 : 19                  		add	hl,de
(1)  580/     209 :                     .not_pal:
(1)  581/     209 : 7C                  		ld	a,h
(1)  582/     20A : 32 9E 1C            		ld	(sbeatPtck+1),a
(1)  583/     20D : 7D                  		ld	a,l
(1)  584/     20E : 32 9D 1C            		ld	(sbeatPtck),a
(1)  585/     211 : C3 9B 00            		jp	.next_cmd
(1)  586/     214 :                     
(1)  587/     214 :                     ; --------------------------------------------------------
(1)  588/     214 :                     ; Shared subs
(1)  589/     214 :                     ; --------------------------------------------------------
(1)  590/     214 :                     
(1)  591/     214 :                     .cmnd_rdslot:
(1)  592/     214 : 87                  		add	a,a			; ** MANUAL MAX_BUFFNTRY
(1)  593/     215 : 87                  		add	a,a			; id*8
(1)  594/     216 : 87                  		add	a,a
(1)  595/     217 : 16 00               		ld	d,0
(1)  596/     219 : 5F                  		ld	e,a
(1)  597/     21A : FD 19               		add	iy,de
(1)  598/     21C : FD 7E 00            		ld	a,(iy)
(1)  599/     21F : FD 66 01            		ld	h,(iy+1)
(1)  600/     222 : 6F                  		ld	l,a
(1)  601/     223 : E5                  		push	hl
(1)  602/     224 : DD E1               		pop	ix
(1)  603/     226 : C9                  		ret
(1)  604/     227 :                     
(1)  605/     227 :                     ; ------------------------------------------------
(1)  606/     227 :                     ; iy - nikona_BuffList
(1)  607/     227 :                     
(1)  608/     227 :                     .srch_slot:
(1)  609/     227 : FD 7E 00            		ld	a,(iy)
(1)  610/     22A : FE FF               		cp	-1			; End of list?
(1)  611/     22C : C8                  		ret	z
(1)  612/     22D : FD 66 01            		ld	h,(iy+1)		; hl - Current track slot
(1)  613/     230 : 6F                  		ld	l,a
(1)  614/     231 : E5                  		push	hl
(1)  615/     232 : DD E1               		pop	ix
(1)  616/     234 : 11 08 00            		ld	de,MAX_BUFFNTRY
(1)  617/     237 : FD 19               		add	iy,de			; Next entry for later
(1)  618/     239 : C9                  		ret
(1)  619/     23A :                     
(1)  620/     23A :                     ; ====================================================================
(1)  621/     23A :                     ; ----------------------------------------------------------------
(1)  622/     23A :                     ; MAIN Playback section
(1)  623/     23A :                     ; ----------------------------------------------------------------
(1)  624/     23A :                     
(1)  625/     23A :                     ; --------------------------------------------------------
(1)  626/     23A :                     ; Read mini-impulse-tracker data
(1)  627/     23A :                     ; --------------------------------------------------------
(1)  628/     23A :                     
(1)  629/     23A :                     upd_track:
(1)  630/     23A : E7                  		rst	20h			; Refill wave
(1)  631/     23B : CD E6 11            		call	get_tick		; Check for tick flag
(1)  632/     23E : FD 21 A6 16         		ld	iy,nikona_BuffList	; iy - slot buffer List
(1)  633/     242 :                     .trk_buffrs:
(1)  634/     242 : FD 7E 00            		ld	a,(iy)			; if -1, end here.
(1)  635/     245 : FE FF               		cp	-1
(1)  636/     247 : C8                  		ret	z
(1)  637/     248 : CF                  		rst	8
(1)  638/     249 : FD E5               		push	iy
(1)  639/     24B : CD 57 02            		call	.read_track
(1)  640/     24E : FD E1               		pop	iy
(1)  641/     250 : 11 08 00            		ld	de,MAX_BUFFNTRY
(1)  642/     253 : FD 19               		add	iy,de
(1)  643/     255 : 18 EB               		jr	.trk_buffrs
(1)  644/     257 :                     
(1)  645/     257 :                     ; ----------------------------------------
(1)  646/     257 :                     ; iy - Track buffer
(1)  647/     257 :                     ; ----------------------------------------
(1)  648/     257 :                     
(1)  649/     257 :                     .read_track:
(1)  650/     257 : FD 6E 00            		ld	l,(iy)			; hl - current track slot
(1)  651/     25A : FD 66 01            		ld	h,(iy+1)
(1)  652/     25D : CF                  		rst	8
(1)  653/     25E : E5                  		push	hl
(1)  654/     25F : FD E1               		pop	iy			; change iy to hl
(1)  655/     261 : FD 46 00            		ld	b,(iy+trk_Status)	; b - Track status and settings
(1)  656/     264 : CB 78               		bit	7,b			; bit7: Track active?
(1)  657/     266 : C8                  		ret	z			; Return if not.
(1)  658/     267 : 78                  		ld	a,b
(1)  659/     268 : FE FF               		cp	-1			; Flag is -1?
(1)  660/     26A : C8                  		ret	z			; Return if mid-flag
(1)  661/     26B : CF                  		rst	8
(1)  662/     26C :                     	; ----------------------------------------
(1)  663/     26C :                     	; Track volume changes
(1)  664/     26C : FD 6E 0F            		ld	l,(iy+trk_VolMaster+1)
(1)  665/     26F : FD 66 0E            		ld	h,(iy+trk_VolMaster)
(1)  666/     272 : FD 4E 19            		ld	c,(iy+trk_VolFdTarget)
(1)  667/     275 : 11 00 01            		ld	de,0100h		; <-- Manual volfade speed MAX 0100h
(1)  668/     278 : 79                  		ld	a,c
(1)  669/     279 : BC                  		cp	h
(1)  670/     27A : 28 1E               		jr	z,.keep_vol
(1)  671/     27C : 30 06               		jr	nc,.fade_out
(1)  672/     27E : 11 80 FF            		ld	de,-80h
(1)  673/     281 : 19                  		add	hl,de
(1)  674/     282 : 18 0C               		jr	.too_much
(1)  675/     284 :                     .fade_out:
(1)  676/     284 : 19                  		add	hl,de
(1)  677/     285 : CF                  		rst	8
(1)  678/     286 : 7C                  		ld	a,h
(1)  679/     287 : B9                  		cp	c
(1)  680/     288 : 38 06               		jr	c,.too_much
(1)  681/     28A : 61                  		ld	h,c
(1)  682/     28B : 2E 00               		ld	l,0
(1)  683/     28D : FD 71 19            		ld	(iy+trk_VolFdTarget),c
(1)  684/     290 :                     .too_much:
(1)  685/     290 : FD CB 00 DE         		set	3,(iy+trk_Status)	; Volume update flag
(1)  686/     294 : FD 75 0F            		ld	(iy+trk_VolMaster+1),l
(1)  687/     297 : FD 74 0E            		ld	(iy+trk_VolMaster),h
(1)  688/     29A :                     .keep_vol:
(1)  689/     29A :                     	; ----------------------------------------
(1)  690/     29A : 3A 98 1C            		ld	a,(currTickBits)	; a - Tick/Beat bits
(1)  691/     29D : CB 40               		bit	0,b			; bit0: This track uses Beats?
(1)  692/     29F : 28 03               		jr	z,.sfxmd
(1)  693/     2A1 : CB 4F               		bit	1,a			; BEAT passed?
(1)  694/     2A3 : C8                  		ret	z			; No BEAT.
(1)  695/     2A4 :                     .sfxmd:
(1)  696/     2A4 : CB 47               		bit	0,a			; TICK passed?
(1)  697/     2A6 : C8                  		ret	z			; No TICK.
(1)  698/     2A7 : CF                  		rst	8
(1)  699/     2A8 :                     	; ----------------------------------------
(1)  700/     2A8 :                     	; Start reading notes
(1)  701/     2A8 : CB 70               		bit	6,b			; bit6: Restart/First time?
(1)  702/     2AA : C4 36 05            		call	nz,.first_fill
(1)  703/     2AD : CB 68               		bit	5,b			; bit5: FILL request by effect?
(1)  704/     2AF : C4 2F 05            		call	nz,.effect_fill
(1)  705/     2B2 : FD 7E 12            		ld	a,(iy+trk_tickTmr)	; TICK ex-timer for this track
(1)  706/     2B5 : 3D                  		dec	a
(1)  707/     2B6 : FD 77 12            		ld	(iy+trk_tickTmr),a
(1)  708/     2B9 : B7                  		or	a			; Check a
(1)  709/     2BA : C0                  		ret	nz			; If Tick timer != 0, exit.
(1)  710/     2BB : CF                  		rst	8
(1)  711/     2BC : FD 7E 03            		ld	a,(iy+trk_TickSet)	; Set new tick timer
(1)  712/     2BF : FD 77 12            		ld	(iy+trk_tickTmr),a
(1)  713/     2C2 : FD 4E 0C            		ld	c,(iy+trk_Rows)		; bc - Set row counter
(1)  714/     2C5 : FD 46 0D            		ld	b,(iy+(trk_Rows+1))
(1)  715/     2C8 : 79                  		ld	a,c			; Check rowcount
(1)  716/     2C9 : B0                  		or	b
(1)  717/     2CA : 20 14               		jr	nz,.row_active		; If bc != 0: row is currenly playing.
(1)  718/     2CC : CF                  		rst	8			; If bc == 0 ...
(1)  719/     2CD : FD 7E 13            		ld	a,(iy+trk_currBlk)	; Next block
(1)  720/     2D0 : 3C                  		inc	a
(1)  721/     2D1 : FD 77 13            		ld 	(iy+trk_currBlk),a
(1)  722/     2D4 : CD 43 04            		call	.set_track		; Read track data ** ROM ACCESS **
(1)  723/     2D7 : FE FF               		cp	-1			; Track finished?
(1)  724/     2D9 : C8                  		ret	z
(1)  725/     2DA : FD 4E 0C            		ld	c,(iy+trk_Rows)		; Set new rowcount to bc
(1)  726/     2DD : FD 46 0D            		ld	b,(iy+(trk_Rows+1))
(1)  727/     2E0 :                     .row_active:
(1)  728/     2E0 : CF                  		rst	8
(1)  729/     2E1 : FD 6E 0A            		ld	l,(iy+trk_Read)		; hl - CURRENT pattern to read
(1)  730/     2E4 : FD 66 0B            		ld	h,(iy+((trk_Read+1)))
(1)  731/     2E7 :                     
(1)  732/     2E7 :                     ; --------------------------------
(1)  733/     2E7 :                     ; Main read-loop
(1)  734/     2E7 :                     ; --------------------------------
(1)  735/     2E7 :                     
(1)  736/     2E7 :                     .next_note:
(1)  737/     2E7 : FD 7E 11            		ld	a,(iy+trk_rowPause)	; Check rowtimer
(1)  738/     2EA : B7                  		or	a
(1)  739/     2EB : 20 16               		jr	nz,.decrow
(1)  740/     2ED : 7E                  		ld	a,(hl)			; Check if byte is a timer or a note
(1)  741/     2EE : B7                  		or	a
(1)  742/     2EF : 28 06               		jr	z,.exit			; If == 00h: exit
(1)  743/     2F1 : FA 0E 03            		jp	m,.has_note		; If 80h-0FFh: Note data
(1)  744/     2F4 : FD 77 11            		ld	(iy+trk_rowPause),a	; If 01h-07Fh: Row-pause timer
(1)  745/     2F7 :                     
(1)  746/     2F7 :                     ; --------------------------------
(1)  747/     2F7 :                     ; Exit
(1)  748/     2F7 :                     ; --------------------------------
(1)  749/     2F7 :                     
(1)  750/     2F7 :                     .exit:
(1)  751/     2F7 : CF                  		rst	8
(1)  752/     2F8 : CD 0B 04            		call	.inc_cpatt		; * Increment patt pos
(1)  753/     2FB : FD 75 0A            		ld	(iy+trk_Read),l		; Update READ location
(1)  754/     2FE : FD 74 0B            		ld	(iy+((trk_Read+1))),h
(1)  755/     301 : 18 03               		jr	.decrow_e
(1)  756/     303 :                     .decrow:
(1)  757/     303 : FD 35 11            		dec	(iy+trk_rowPause)	; Decrement row-pause timer
(1)  758/     306 :                     .decrow_e:
(1)  759/     306 : 0B                  		dec	bc			; Decrement rowcount
(1)  760/     307 : FD 71 0C            		ld	(iy+trk_Rows),c		; Write last row to memory
(1)  761/     30A : FD 70 0D            		ld	(iy+(trk_Rows+1)),b
(1)  762/     30D : C9                  		ret	; Exit.
(1)  763/     30E :                     
(1)  764/     30E :                     ; --------------------------------
(1)  765/     30E :                     ; New note request
(1)  766/     30E :                     ;
(1)  767/     30E :                     ; a - %1tcccccc
(1)  768/     30E :                     ;   | t - next byte has new type
(1)  769/     30E :                     ;   | c - channel
(1)  770/     30E :                     ; --------------------------------
(1)  771/     30E :                     
(1)  772/     30E :                     .has_note:
(1)  773/     30E : CF                  		rst	8
(1)  774/     30F : C5                  		push	bc			; Save rowcount
(1)  775/     310 : 4F                  		ld	c,a			; Copy patt byte control to c
(1)  776/     311 : CD 0B 04            		call	.inc_cpatt		; * Increment patt pos
(1)  777/     314 : E5                  		push	hl			; Save hl patt pos
(1)  778/     315 : FD E5               		push	iy
(1)  779/     317 : E1                  		pop	hl
(1)  780/     318 : DD 21 00 1E         		ld	ix,trkChnls		; ix - Channels buffer
(1)  781/     31C : 11 26 00            		ld	de,trk_ChnIndx		; <-- this also clears d
(1)  782/     31F : CF                  		rst	8
(1)  783/     320 : 19                  		add	hl,de			; hl - Track's index points buffer
(1)  784/     321 : 79                  		ld	a,c			; Get patt note position
(1)  785/     322 : E6 1F               		and	00011111b		; Filter index bits
(1)  786/     324 : 5F                  		ld	e,a			; Save as e
(1)  787/     325 : 19                  		add	hl,de			; Increment more by this pos
(1)  788/     326 : 7E                  		ld	a,(hl)			; Check if this index is occupied.
(1)  789/     327 : B7                  		or	a
(1)  790/     328 : 28 0A               		jr	z,.srch_new		; If == 0, new index
(1)  791/     32A : E6 1F               		and	00011111b		; If already used, read that channel
(1)  792/     32C : 87                  		add	a,a
(1)  793/     32D : 87                  		add	a,a
(1)  794/     32E : 87                  		add	a,a
(1)  795/     32F : 5F                  		ld	e,a
(1)  796/     330 : DD 19               		add	ix,de
(1)  797/     332 : 18 2B               		jr	.cont_chnl
(1)  798/     334 :                     
(1)  799/     334 :                     ; Make NEW channel
(1)  800/     334 :                     ; ix - channel list start
(1)  801/     334 :                     .srch_new:
(1)  802/     334 : CF                  		rst	8
(1)  803/     335 : 06 1F               		ld	b,MAX_TRKCHN-1	; Max channels to check - 1
(1)  804/     337 : 16 00               		ld	d,0		; Reset out index
(1)  805/     339 :                     .next_chnl:
(1)  806/     339 : DD 7E 00            		ld	a,(ix)		; Read chnl_Flags
(1)  807/     33C : B7                  		or	a		; If plus, track channel is free
(1)  808/     33D : F2 54 03            		jp	p,.chnl_free
(1)  809/     340 : DD 23               		inc	ix		; Search next channel, increment by 8
(1)  810/     342 : DD 23               		inc	ix
(1)  811/     344 : DD 23               		inc	ix
(1)  812/     346 : DD 23               		inc	ix
(1)  813/     348 : CF                  		rst	8
(1)  814/     349 : DD 23               		inc	ix
(1)  815/     34B : DD 23               		inc	ix
(1)  816/     34D : DD 23               		inc	ix
(1)  817/     34F : DD 23               		inc	ix
(1)  818/     351 : 14                  		inc	d		; Increment out index
(1)  819/     352 : 10 E5               		djnz	.next_chnl
(1)  820/     354 :                     .chnl_free:
(1)  821/     354 : CF                  		rst	8
(1)  822/     355 : 7A                  		ld	a,d			; Read index we got
(1)  823/     356 : E6 1F               		and	00011111b		; Filter bits
(1)  824/     358 : F6 80               		or	10000000b		; + set as used
(1)  825/     35A : 77                  		ld	(hl),a			; Write index slot
(1)  826/     35B : DD CB 00 FE         		set	7,(ix+chnl_Flags)	; Enable channel on the list
(1)  827/     35F :                     .cont_chnl:
(1)  828/     35F : E1                  		pop	hl			; Recover patt pos
(1)  829/     360 :                     	; ix - current channel
(1)  830/     360 : CF                  		rst	8
(1)  831/     361 : DD 46 07            		ld	b,(ix+chnl_Type)	; b - current TYPE byte
(1)  832/     364 : CB 71               		bit	6,c			; This byte has new TYPE setting?
(1)  833/     366 : 28 08               		jr	z,.old_type
(1)  834/     368 : 7E                  		ld	a,(hl)
(1)  835/     369 : DD 77 07            		ld	(ix+chnl_Type),a	; Update TYPE byte
(1)  836/     36C : 47                  		ld	b,a			; Set to b
(1)  837/     36D : CD 0B 04            		call	.inc_cpatt		; Next patt pos
(1)  838/     370 :                     .old_type:
(1)  839/     370 :                     	; b - evinEVIN
(1)  840/     370 :                     	;     E-effect/V-volume/I-instrument/N-note
(1)  841/     370 :                     	;     evin: byte is already stored on track-channel buffer
(1)  842/     370 :                     	;     EVIN: next byte(s) contain a new value. for eff:2 bytes
(1)  843/     370 :                     
(1)  844/     370 : CF                  		rst	8
(1)  845/     371 : CB 40               		bit	0,b			; New NOTE?
(1)  846/     373 : 28 07               		jr	z,.no_note
(1)  847/     375 : 7E                  		ld	a,(hl)			; Set NOTE and increment patt
(1)  848/     376 : DD 77 02            		ld	(ix+chnl_Note),a
(1)  849/     379 : CD 0B 04            		call	.inc_cpatt
(1)  850/     37C :                     .no_note:
(1)  851/     37C : CB 48               		bit	1,b			; New INS?
(1)  852/     37E : 28 07               		jr	z,.no_ins
(1)  853/     380 : 7E                  		ld	a,(hl)			; Set INS and increment patt
(1)  854/     381 : DD 77 03            		ld	(ix+chnl_Ins),a
(1)  855/     384 : CD 0B 04            		call	.inc_cpatt
(1)  856/     387 :                     .no_ins:
(1)  857/     387 : CB 50               		bit	2,b			; New VOL?
(1)  858/     389 : 28 07               		jr	z,.no_vol
(1)  859/     38B : 7E                  		ld	a,(hl)			; Set VOL and increment patt
(1)  860/     38C : DD 77 04            		ld	(ix+chnl_Vol),a
(1)  861/     38F : CD 0B 04            		call	.inc_cpatt
(1)  862/     392 :                     .no_vol:
(1)  863/     392 : CB 58               		bit	3,b			; New EFFECT?
(1)  864/     394 : 28 0F               		jr	z,.no_eff
(1)  865/     396 : 7E                  		ld	a,(hl)			; Set EFFECT ID, incr patt
(1)  866/     397 : DD 77 05            		ld	(ix+chnl_EffId),a
(1)  867/     39A : CD 0B 04            		call	.inc_cpatt
(1)  868/     39D : CF                  		rst	8
(1)  869/     39E : 7E                  		ld	a,(hl)			; Set EFFECT ARG, incr patt
(1)  870/     39F : DD 77 06            		ld	(ix+chnl_EffArg),a
(1)  871/     3A2 : CD 0B 04            		call	.inc_cpatt
(1)  872/     3A5 :                     .no_eff:
(1)  873/     3A5 : 78                  		ld	a,b			; Merge the Impulse evin bits into main EVIN bits
(1)  874/     3A6 : 0F                  		rrca
(1)  875/     3A7 : 0F                  		rrca
(1)  876/     3A8 : 0F                  		rrca
(1)  877/     3A9 : 0F                  		rrca
(1)  878/     3AA : E6 0F               		and	00001111b		; Filter bits
(1)  879/     3AC : 4F                  		ld	c,a			; Save as c
(1)  880/     3AD : 78                  		ld	a,b
(1)  881/     3AE : E6 0F               		and	00001111b		; Filter again
(1)  882/     3B0 : B1                  		or	c			; Merge c with a
(1)  883/     3B1 : CF                  		rst	8
(1)  884/     3B2 : 4F                  		ld	c,a			; Save bit flags
(1)  885/     3B3 : DD 7E 00            		ld	a,(ix+chnl_Flags)
(1)  886/     3B6 : B1                  		or	c
(1)  887/     3B7 : DD 77 00            		ld	(ix+chnl_Flags),a
(1)  888/     3BA :                     	; Check for effects that affect
(1)  889/     3BA :                     	; internal playback:
(1)  890/     3BA :                     	; Jump, Ticks, etc.
(1)  891/     3BA : C1                  		pop	bc		; Restore rowcount
(1)  892/     3BB : DD 7E 00            		ld	a,(ix+chnl_Flags)
(1)  893/     3BE : E6 08               		and	1000b		; ONLY check for the EFFECT bit
(1)  894/     3C0 : CA E7 02            		jp	z,.next_note
(1)  895/     3C3 : DD 7E 05            		ld	a,(ix+chnl_EffId)
(1)  896/     3C6 : B7                  		or	a		; 00h = invalid effect
(1)  897/     3C7 : CA E7 02            		jp	z,.next_note
(1)  898/     3CA : FE 01               		cp	1		; Effect A: Tick set
(1)  899/     3CC : 28 0B               		jr	z,.eff_A
(1)  900/     3CE : FE 02               		cp	2		; Effect B: Position Jump
(1)  901/     3D0 : 28 18               		jr	z,.eff_B
(1)  902/     3D2 : FE 03               		cp	3		; Effect C: Pattern break
(1)  903/     3D4 : 28 32               		jr	z,.eff_C	; <-- JUMP and exit.
(1)  904/     3D6 : C3 E7 02            		jp	.next_note
(1)  905/     3D9 :                     
(1)  906/     3D9 :                     ; ----------------------------------------
(1)  907/     3D9 :                     ; Effect A: Set ticks
(1)  908/     3D9 :                     ; ----------------------------------------
(1)  909/     3D9 :                     
(1)  910/     3D9 :                     .eff_A:
(1)  911/     3D9 : CF                  		rst	8
(1)  912/     3DA : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - ticks number
(1)  913/     3DD : FD 73 03            		ld	(iy+trk_TickSet),e	; set for both Set and Timer.
(1)  914/     3E0 : FD 73 12            		ld	(iy+trk_tickTmr),e
(1)  915/     3E3 : DD CB 00 9E         		res	3,(ix+chnl_Flags)	; <-- Clear EFFECT bit
(1)  916/     3E7 : C3 E7 02            		jp	.next_note
(1)  917/     3EA :                     
(1)  918/     3EA :                     ; ----------------------------------------
(1)  919/     3EA :                     ; Effect B: jump to a new block
(1)  920/     3EA :                     ; ----------------------------------------
(1)  921/     3EA :                     
(1)  922/     3EA :                     .eff_B:
(1)  923/     3EA : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - Block SLOT to jump
(1)  924/     3ED : FD 73 13            		ld 	(iy+trk_currBlk),e
(1)  925/     3F0 : CF                  		rst	8
(1)  926/     3F1 : FD 36 11 00         		ld	(iy+trk_rowPause),0	; Reset rowpause
(1)  927/     3F5 : DD CB 00 9E         		res	3,(ix+chnl_Flags)	; <-- Clear EFFECT bit
(1)  928/     3F9 : FD CB 00 EE         		set	5,(iy+trk_Status)	; set fill-from-effect flag on exit
(1)  929/     3FD : 3E 80               		ld	a,80h
(1)  930/     3FF : FD 77 16            		ld	(iy+trk_BankHeads),a
(1)  931/     402 : FD 77 17            		ld	(iy+trk_BankBlk),a
(1)  932/     405 : C3 E7 02            		jp	.next_note
(1)  933/     408 :                     
(1)  934/     408 :                     ; ----------------------------------------
(1)  935/     408 :                     ; Effect C: Pattern break/exit
(1)  936/     408 :                     ;
(1)  937/     408 :                     ; Only used on SFX, arguments ignored.
(1)  938/     408 :                     ; ----------------------------------------
(1)  939/     408 :                     
(1)  940/     408 :                     .eff_C:
(1)  941/     408 : C3 1C 05            		jp	.track_end
(1)  942/     40B :                     
(1)  943/     40B :                     ; ----------------------------------------
(1)  944/     40B :                     ; Increment the current patt position
(1)  945/     40B :                     ; and recieve more data
(1)  946/     40B :                     ;
(1)  947/     40B :                     ; Breaks:
(1)  948/     40B :                     ; a,e
(1)  949/     40B :                     ; ----------------------------------------
(1)  950/     40B :                     
(1)  951/     40B :                     .inc_cpatt:
(1)  952/     40B : FD 5E 08            		ld	e,(iy+trk_Cach)	; Read curret cache LSB
(1)  953/     40E : 7D                  		ld	a,l
(1)  954/     40F : 3C                  		inc	a
(1)  955/     410 : E6 1F               		and	MAX_RCACH-1
(1)  956/     412 : FE 1E               		cp	MAX_RCACH-2	; RAN OUT of bytes?
(1)  957/     414 : 30 03               		jr	nc,.ran_out
(1)  958/     416 : B3                  		or	e
(1)  959/     417 : 6F                  		ld	l,a
(1)  960/     418 : C9                  		ret
(1)  961/     419 :                     .ran_out:
(1)  962/     419 : FD 6E 08            		ld	l,(iy+trk_Cach)
(1)  963/     41C : E5                  		push	hl
(1)  964/     41D : C5                  		push	bc
(1)  965/     41E : 06 00               		ld	b,0
(1)  966/     420 : 4F                  		ld	c,a
(1)  967/     421 : CF                  		rst	8
(1)  968/     422 : 5D                  		ld	e,l
(1)  969/     423 : 54                  		ld	d,h
(1)  970/     424 : FD 6E 1A            		ld	l,(iy+trk_RomPattRead)
(1)  971/     427 : FD 66 1B            		ld	h,(iy+(trk_RomPattRead+1))
(1)  972/     42A : FD 7E 1C            		ld	a,(iy+(trk_RomPattRead+2))
(1)  973/     42D : 09                  		add	hl,bc
(1)  974/     42E : CE 00               		adc	a,0
(1)  975/     430 : FD 75 1A            		ld	(iy+trk_RomPattRead),l
(1)  976/     433 : FD 74 1B            		ld	(iy+(trk_RomPattRead+1)),h
(1)  977/     436 : CF                  		rst	8
(1)  978/     437 : FD 77 1C            		ld	(iy+(trk_RomPattRead+2)),a
(1)  979/     43A : 01 20 00            		ld	bc,MAX_RCACH
(1)  980/     43D : CD 07 12            		call	transferRom	; *** ROM ACCESS ***
(1)  981/     440 : C1                  		pop	bc
(1)  982/     441 : E1                  		pop	hl
(1)  983/     442 : C9                  		ret
(1)  984/     443 :                     
(1)  985/     443 :                     ; ----------------------------------------
(1)  986/     443 :                     ; Set track pattern by trk_currBlk
(1)  987/     443 :                     ; ----------------------------------------
(1)  988/     443 :                     
(1)  989/     443 :                     .set_track:
(1)  990/     443 : FD 5E 04            		ld	e,(iy+trk_Blocks)
(1)  991/     446 : FD 56 05            		ld	d,(iy+(trk_Blocks+1))
(1)  992/     449 : FD 7E 13            		ld	a,(iy+trk_currBlk)
(1)  993/     44C : 4F                  		ld	c,a
(1)  994/     44D : C5                  		push	bc
(1)  995/     44E : D5                  		push	de
(1)  996/     44F : CF                  		rst	8
(1)  997/     450 : 0F                  		rrca
(1)  998/     451 : 0F                  		rrca
(1)  999/     452 : 0F                  		rrca
(1) 1000/     453 : E6 1F               		and	00011111b
(1) 1001/     455 : FD 4E 17            		ld	c,(iy+trk_BankBlk)	; c - current block bank
(1) 1002/     458 : CB 79               		bit	7,c			; First time?
(1) 1003/     45A : 20 03               		jr	nz,.first_blk
(1) 1004/     45C : B9                  		cp	c			; SAME instrument data?
(1) 1005/     45D : 28 1E               		jr	z,.keep_blk
(1) 1006/     45F :                     .first_blk:
(1) 1007/     45F : CF                  		rst	8
(1) 1008/     460 : FD 77 17            		ld	(iy+trk_BankBlk),a	; Save inst number
(1) 1009/     463 : 07                  		rlca
(1) 1010/     464 : 07                  		rlca
(1) 1011/     465 : 07                  		rlca
(1) 1012/     466 : 06 00               		ld	b,0
(1) 1013/     468 : 4F                  		ld	c,a
(1) 1014/     469 : FD 6E 23            		ld	l,(iy+trk_RomBlks)	; Transfer FIRST patt
(1) 1015/     46C : FD 66 24            		ld	h,(iy+(trk_RomBlks+1))	; packet
(1) 1016/     46F : FD 7E 25            		ld	a,(iy+(trk_RomBlks+2))
(1) 1017/     472 : E7                  		rst	20h
(1) 1018/     473 : CF                  		rst	8
(1) 1019/     474 : 09                  		add	hl,bc
(1) 1020/     475 : CE 00               		adc	a,0
(1) 1021/     477 : 01 08 00            		ld	bc,8			; 8 blocks stored
(1) 1022/     47A : CD 07 12            		call	transferRom		; ** ROM ACCESS **
(1) 1023/     47D :                     .keep_blk:
(1) 1024/     47D : E1                  		pop	hl
(1) 1025/     47E : C1                  		pop	bc
(1) 1026/     47F : 79                  		ld	a,c
(1) 1027/     480 : E6 07               		and	00000111b
(1) 1028/     482 : CF                  		rst	8
(1) 1029/     483 : 16 00               		ld	d,0
(1) 1030/     485 : 5F                  		ld	e,a
(1) 1031/     486 : 19                  		add	hl,de
(1) 1032/     487 : 7E                  		ld	a,(hl)			; Read byte
(1) 1033/     488 : FE FF               		cp	-1			; If block == -1, end track
(1) 1034/     48A : CA 1C 05            		jp	z,.track_end
(1) 1035/     48D : CF                  		rst	8
(1) 1036/     48E :                     
(1) 1037/     48E : FD 5E 06            		ld	e,(iy+trk_Patt)		; Read CACHE patt heads
(1) 1038/     491 : FD 56 07            		ld	d,(iy+(trk_Patt+1))
(1) 1039/     494 : 4F                  		ld	c,a
(1) 1040/     495 : D5                  		push	de
(1) 1041/     496 : C5                  		push	bc
(1) 1042/     497 : CF                  		rst	8
(1) 1043/     498 : 0F                  		rrca
(1) 1044/     499 : 0F                  		rrca
(1) 1045/     49A : 0F                  		rrca
(1) 1046/     49B : E6 1F               		and	00011111b
(1) 1047/     49D : FD 4E 16            		ld	c,(iy+trk_BankHeads)	; c - current intrument loaded
(1) 1048/     4A0 : CB 79               		bit	7,c			; First time?
(1) 1049/     4A2 : 20 03               		jr	nz,.first_head
(1) 1050/     4A4 : B9                  		cp	c			; SAME instrument data?
(1) 1051/     4A5 : 28 26               		jr	z,.keep_it
(1) 1052/     4A7 :                     .first_head:
(1) 1053/     4A7 : CF                  		rst	8
(1) 1054/     4A8 : FD 77 16            		ld	(iy+trk_BankHeads),a	; Save inst number
(1) 1055/     4AB : 47                  		ld	b,a
(1) 1056/     4AC : 0F                  		rrca
(1) 1057/     4AD : 0F                  		rrca
(1) 1058/     4AE : 0F                  		rrca
(1) 1059/     4AF : E6 E0               		and	11100000b
(1) 1060/     4B1 : 4F                  		ld	c,a
(1) 1061/     4B2 : 78                  		ld	a,b
(1) 1062/     4B3 : 0F                  		rrca
(1) 1063/     4B4 : 0F                  		rrca
(1) 1064/     4B5 : 0F                  		rrca
(1) 1065/     4B6 : E6 03               		and	00000011b
(1) 1066/     4B8 : 47                  		ld	b,a
(1) 1067/     4B9 :                     
(1) 1068/     4B9 : FD 6E 1D            		ld	l,(iy+trk_RomPatt)	; Transfer FIRST patt
(1) 1069/     4BC : FD 66 1E            		ld	h,(iy+(trk_RomPatt+1))	; packet
(1) 1070/     4BF : FD 7E 1F            		ld	a,(iy+(trk_RomPatt+2))
(1) 1071/     4C2 : E7                  		rst	20h
(1) 1072/     4C3 : CF                  		rst	8
(1) 1073/     4C4 : 09                  		add	hl,bc
(1) 1074/     4C5 : CE 00               		adc	a,0
(1) 1075/     4C7 : 01 20 00            		ld	bc,4*8			; 8 heads stored
(1) 1076/     4CA : CD 07 12            		call	transferRom		; ** ROM ACCESS **
(1) 1077/     4CD :                     .keep_it:
(1) 1078/     4CD : C1                  		pop	bc
(1) 1079/     4CE : 79                  		ld	a,c
(1) 1080/     4CF : E6 07               		and	00000111b
(1) 1081/     4D1 : 87                  		add	a,a
(1) 1082/     4D2 : 87                  		add	a,a
(1) 1083/     4D3 : 57                  		ld	d,a
(1) 1084/     4D4 : CF                  		rst	8
(1) 1085/     4D5 : E6 FC               		and	11111100b
(1) 1086/     4D7 : 5F                  		ld	e,a
(1) 1087/     4D8 : 7A                  		ld	a,d
(1) 1088/     4D9 : E6 03               		and	00000011b
(1) 1089/     4DB : 57                  		ld	d,a
(1) 1090/     4DC : E1                  		pop	hl
(1) 1091/     4DD : 19                  		add	hl,de
(1) 1092/     4DE : 5E                  		ld	e,(hl)			; de - Pos
(1) 1093/     4DF : 23                  		inc	hl
(1) 1094/     4E0 : CF                  		rst	8
(1) 1095/     4E1 : 56                  		ld	d,(hl)
(1) 1096/     4E2 : 23                  		inc	hl
(1) 1097/     4E3 : 7E                  		ld	a,(hl)
(1) 1098/     4E4 : 23                  		inc	hl
(1) 1099/     4E5 : FD 77 0C            		ld	(iy+trk_Rows),a
(1) 1100/     4E8 : 7E                  		ld	a,(hl)
(1) 1101/     4E9 : 23                  		inc	hl
(1) 1102/     4EA : FD 77 0D            		ld	(iy+(trk_Rows+1)),a
(1) 1103/     4ED : FD 6E 1D            		ld	l,(iy+trk_RomPatt)	; Transfer FIRST patt
(1) 1104/     4F0 : FD 66 1E            		ld	h,(iy+(trk_RomPatt+1))	; packet
(1) 1105/     4F3 : CF                  		rst	8
(1) 1106/     4F4 : FD 7E 1F            		ld	a,(iy+(trk_RomPatt+2))
(1) 1107/     4F7 : 19                  		add	hl,de
(1) 1108/     4F8 : CE 00               		adc	a,0
(1) 1109/     4FA : FD 75 1A            		ld	(iy+trk_RomPattRead),l
(1) 1110/     4FD : FD 74 1B            		ld	(iy+(trk_RomPattRead+1)),h
(1) 1111/     500 : FD 77 1C            		ld	(iy+(trk_RomPattRead+2)),a
(1) 1112/     503 : FD 5E 08            		ld	e,(iy+trk_Cach)
(1) 1113/     506 : FD 56 09            		ld	d,(iy+(trk_Cach+1))
(1) 1114/     509 :                     
(1) 1115/     509 : FD 73 0A            		ld	(iy+trk_Read),e
(1) 1116/     50C : FD 72 0B            		ld	(iy+(trk_Read+1)),d
(1) 1117/     50F : 0E 20               		ld	c,MAX_RCACH
(1) 1118/     511 : FD 36 10 00         		ld	(iy+trk_cachHalf),0
(1) 1119/     515 : FD 36 11 00         		ld	(iy+trk_rowPause),0
(1) 1120/     519 : C3 07 12            		jp	transferRom		; ** ROM access **
(1) 1121/     51C :                     
(1) 1122/     51C :                     ; ----------------------------------------
(1) 1123/     51C :                     ; **JUMP ONLY**
(1) 1124/     51C :                     .track_end:
(1) 1125/     51C : CD DF 05            		call	track_out
(1) 1126/     51F : CF                  		rst	8
(1) 1127/     520 : AF                  		xor	a
(1) 1128/     521 : FD 77 11            		ld	(iy+trk_rowPause),a
(1) 1129/     524 : FD 77 12            		ld	(iy+trk_tickTmr),a
(1) 1130/     527 : FD 77 00            		ld	(iy+trk_Status),a	; Disable track slot
(1) 1131/     52A : FD 36 15 80         		ld	(iy+trk_BankIns),80h
(1) 1132/     52E : C9                  		ret
(1) 1133/     52F :                     
(1) 1134/     52F :                     ; ----------------------------------------
(1) 1135/     52F :                     ; Track refill
(1) 1136/     52F :                     ; ----------------------------------------
(1) 1137/     52F :                     
(1) 1138/     52F :                     .effect_fill:
(1) 1139/     52F : FD CB 00 AE         		res	5,(iy+trk_Status)	; Reset refill-from-effect flag
(1) 1140/     533 : C3 43 04            		jp	.set_track
(1) 1141/     536 :                     
(1) 1142/     536 :                     ; ----------------------------------------
(1) 1143/     536 :                     ; Track Start/Reset
(1) 1144/     536 :                     ;
(1) 1145/     536 :                     ; iy - Track buffer
(1) 1146/     536 :                     ; ----------------------------------------
(1) 1147/     536 :                     
(1) 1148/     536 :                     .first_fill:
(1) 1149/     536 : FD CB 00 B6         		res	6,(iy+trk_Status)	; Clear FILL flag
(1) 1150/     53A : CD DF 05            		call	track_out
(1) 1151/     53D : FD 36 12 01         		ld	(iy+trk_tickTmr),1	; <-- Reset tick timer
(1) 1152/     541 : FD 7E 02            		ld	a,(iy+trk_SetBlk)	; Make start block as current block
(1) 1153/     544 : CF                  		rst	8
(1) 1154/     545 : FD 77 13            		ld 	(iy+trk_currBlk),a	; block
(1) 1155/     548 : FD 7E 01            		ld	a,(iy+trk_SeqId)
(1) 1156/     54B : FE FF               		cp	-1			; TODO
(1) 1157/     54D : C8                  		ret	z
(1) 1158/     54E : 87                  		add	a,a
(1) 1159/     54F : 87                  		add	a,a
(1) 1160/     550 : 16 00               		ld	d,0
(1) 1161/     552 : 5F                  		ld	e,a
(1) 1162/     553 : 21 1C 00            		ld	hl,gemaMstrListPos
(1) 1163/     556 : 23                  		inc	hl
(1) 1164/     557 : 7E                  		ld	a,(hl)		; $00xx0000
(1) 1165/     558 : 23                  		inc	hl
(1) 1166/     559 : 4E                  		ld	c,(hl)		; $0000xx00
(1) 1167/     55A : 23                  		inc	hl
(1) 1168/     55B : 6E                  		ld	l,(hl)		; $000000xx
(1) 1169/     55C : CF                  		rst	8
(1) 1170/     55D : 61                  		ld	h,c
(1) 1171/     55E : 19                  		add	hl,de
(1) 1172/     55F : CE 00               		adc	a,0
(1) 1173/     561 : 11 AF 1C            		ld	de,trkInfoCach
(1) 1174/     564 : D5                  		push	de
(1) 1175/     565 : 01 04 00            		ld	bc,4
(1) 1176/     568 : CD 07 12            		call	transferRom	; *** ROM ACCESS ***
(1) 1177/     56B : E1                  		pop	hl
(1) 1178/     56C : 7E                  		ld	a,(hl)
(1) 1179/     56D : 23                  		inc	hl
(1) 1180/     56E : CB 7F               		bit	7,a
(1) 1181/     570 : 28 04               		jr	z,.no_glbl
(1) 1182/     572 : FD CB 00 C6         		set	0,(iy+trk_Status)	; Enable GLOBAL sub-beats
(1) 1183/     576 :                     .no_glbl:
(1) 1184/     576 : CF                  		rst	8
(1) 1185/     577 : E6 7F               		and	01111111b
(1) 1186/     579 : FD 77 03            		ld	(iy+trk_TickSet),a
(1) 1187/     57C : 7E                  		ld	a,(hl)			; Read and temporally
(1) 1188/     57D : 23                  		inc	hl			; grab it's pointers
(1) 1189/     57E : 4E                  		ld	c,(hl)
(1) 1190/     57F : 23                  		inc	hl
(1) 1191/     580 : 6E                  		ld	l,(hl)
(1) 1192/     581 : 61                  		ld	h,c
(1) 1193/     582 : 11 9F 1C            		ld	de,headerOut
(1) 1194/     585 : 0E 0E               		ld	c,0Eh
(1) 1195/     587 : CD 07 12            		call	transferRom		; ** ROM access **
(1) 1196/     58A : DD 21 AC 1C         		ld	ix,headerOut_e-1	; Read temp header BACKWARDS
(1) 1197/     58E : CF                  		rst	8
(1) 1198/     58F :                     
(1) 1199/     58F :                     	; headerOut:
(1) 1200/     58F :                     	; dc.w numof_chnls
(1) 1201/     58F :                     	; dc.l .blk,.pat,.ins
(1) 1202/     58F :                     	; *** READING BACKWARDS
(1) 1203/     58F : CD CC 05            		call	.grab_rhead		; Instrument data
(1) 1204/     592 : FD 75 20            		ld	(iy+trk_RomInst),l
(1) 1205/     595 : FD 74 21            		ld	(iy+(trk_RomInst+1)),h
(1) 1206/     598 : FD 70 22            		ld	(iy+(trk_RomInst+2)),b
(1) 1207/     59B : FD 36 15 80         		ld	(iy+trk_BankIns),80h	; Reset instrument banking
(1) 1208/     59F : E7                  		rst	20h
(1) 1209/     5A0 : CF                  		rst	8
(1) 1210/     5A1 : CD CC 05            		call	.grab_rhead		; Pattern heads
(1) 1211/     5A4 : FD 75 1D            		ld	(iy+trk_RomPatt),l	; Save ROM patt base
(1) 1212/     5A7 : FD 74 1E            		ld	(iy+(trk_RomPatt+1)),h
(1) 1213/     5AA : FD 70 1F            		ld	(iy+(trk_RomPatt+2)),b
(1) 1214/     5AD : FD 36 16 80         		ld	(iy+trk_BankHeads),80h	; Reset pattern banking
(1) 1215/     5B1 : CF                  		rst	8
(1) 1216/     5B2 : CD CC 05            		call	.grab_rhead		; Block data
(1) 1217/     5B5 : FD 75 23            		ld	(iy+trk_RomBlks),l	; Save ROM patt base
(1) 1218/     5B8 : FD 74 24            		ld	(iy+(trk_RomBlks+1)),h
(1) 1219/     5BB : FD 70 25            		ld	(iy+(trk_RomBlks+2)),b
(1) 1220/     5BE : FD 36 17 80         		ld	(iy+trk_BankBlk),80h	; Reset pattern banking
(1) 1221/     5C2 : CF                  		rst	8
(1) 1222/     5C3 : DD 7E 00            		ld	a,(ix)			; dc.w numof_chnls
(1) 1223/     5C6 : FD 77 18            		ld	(iy+trk_MaxChnl),a
(1) 1224/     5C9 : C3 43 04            		jp	.set_track
(1) 1225/     5CC :                     
(1) 1226/     5CC :                     ; Read 68K pointer:
(1) 1227/     5CC :                     ; hl - 00xxxx
(1) 1228/     5CC :                     ;  b - xx0000
(1) 1229/     5CC :                     .grab_rhead:
(1) 1230/     5CC : DD 6E 00            		ld	l,(ix)
(1) 1231/     5CF : DD 2B               		dec	ix
(1) 1232/     5D1 : DD 66 00            		ld	h,(ix)
(1) 1233/     5D4 : CF                  		rst	8
(1) 1234/     5D5 : DD 2B               		dec	ix
(1) 1235/     5D7 : DD 46 00            		ld	b,(ix)
(1) 1236/     5DA : DD 2B               		dec	ix
(1) 1237/     5DC :                     ; 		ld	c,(ix)
(1) 1238/     5DC : DD 2B               		dec	ix
(1) 1239/     5DE : C9                  		ret
(1) 1240/     5DF :                     
(1) 1241/     5DF :                     ; ----------------------------------------
(1) 1242/     5DF :                     ; Reset tracker channels
(1) 1243/     5DF :                     ;
(1) 1244/     5DF :                     ; iy - Track buffer
(1) 1245/     5DF :                     ;
(1) 1246/     5DF :                     ; Breaks:
(1) 1247/     5DF :                     ; b ,de,hl,ix
(1) 1248/     5DF :                     ; ----------------------------------------
(1) 1249/     5DF :                     
(1) 1250/     5DF :                     track_out:
(1) 1251/     5DF : FD E5               		push	iy
(1) 1252/     5E1 : E1                  		pop	hl
(1) 1253/     5E2 : DD 21 00 1E         		ld	ix,trkChnls
(1) 1254/     5E6 : CF                  		rst	8
(1) 1255/     5E7 : 11 26 00            		ld	de,trk_ChnIndx
(1) 1256/     5EA : 19                  		add	hl,de
(1) 1257/     5EB : 06 1A               		ld	b,MAX_TRKINDX
(1) 1258/     5ED :                     .indx_del:
(1) 1259/     5ED : 7E                  		ld	a,(hl)
(1) 1260/     5EE : B7                  		or	a
(1) 1261/     5EF : 28 2A               		jr	z,.nothin
(1) 1262/     5F1 : CF                  		rst	8
(1) 1263/     5F2 : DD E5               		push	ix
(1) 1264/     5F4 : E6 1F               		and	00011111b
(1) 1265/     5F6 : 87                  		add	a,a
(1) 1266/     5F7 : 87                  		add	a,a
(1) 1267/     5F8 : 87                  		add	a,a
(1) 1268/     5F9 : 5F                  		ld	e,a
(1) 1269/     5FA : CF                  		rst	8
(1) 1270/     5FB : DD 19               		add	ix,de
(1) 1271/     5FD : AF                  		xor	a
(1) 1272/     5FE : DD 36 02 FE         		ld	(ix+chnl_Note),-2
(1) 1273/     602 : DD 36 00 01         		ld	(ix+chnl_Flags),1
(1) 1274/     606 : DD 36 04 40         		ld	(ix+chnl_Vol),64
(1) 1275/     60A : DD 77 05            		ld	(ix+chnl_EffId),a
(1) 1276/     60D : CF                  		rst	8
(1) 1277/     60E : DD 77 06            		ld	(ix+chnl_EffArg),a
(1) 1278/     611 : DD 77 03            		ld	(ix+chnl_Ins),a
(1) 1279/     614 : DD 77 07            		ld	(ix+chnl_Type),a
(1) 1280/     617 : DD E1               		pop	ix
(1) 1281/     619 : 77                  		ld	(hl),a
(1) 1282/     61A : 00                  		nop
(1) 1283/     61B :                     .nothin:
(1) 1284/     61B : 23                  		inc	hl
(1) 1285/     61C : 10 CF               		djnz	.indx_del
(1) 1286/     61E : 3E 01               		ld	a,1
(1) 1287/     620 : 32 8A 1C            		ld	(marsUpd),a
(1) 1288/     623 : C9                  		ret
(1) 1289/     624 :                     
(1) 1290/     624 :                     ; ============================================================
(1) 1291/     624 :                     ; --------------------------------------------------------
(1) 1292/     624 :                     ; Process track channels to the sound chips
(1) 1293/     624 :                     ; --------------------------------------------------------
(1) 1294/     624 :                     
(1) 1295/     624 :                     set_chips:
(1) 1296/     624 : E7                  		rst	20h			; Refill wave
(1) 1297/     625 : CD E6 11            		call	get_tick
(1) 1298/     628 : FD 21 A6 16         		ld	iy,nikona_BuffList
(1) 1299/     62C :                     .trk_buffrs:
(1) 1300/     62C : FD 7E 00            		ld	a,(iy)
(1) 1301/     62F : FE FF               		cp	-1
(1) 1302/     631 : 28 0F               		jr	z,proc_chips
(1) 1303/     633 : CF                  		rst	8
(1) 1304/     634 : FD E5               		push	iy
(1) 1305/     636 : CD 6B 06            		call	tblbuff_read
(1) 1306/     639 : FD E1               		pop	iy
(1) 1307/     63B : 11 08 00            		ld	de,MAX_BUFFNTRY
(1) 1308/     63E : FD 19               		add	iy,de
(1) 1309/     640 : 18 EA               		jr	.trk_buffrs
(1) 1310/     642 :                     proc_chips:
(1) 1311/     642 : E7                  		rst	20h			; Refill wave
(1) 1312/     643 : CF                  		rst	8
(1) 1313/     644 : FD 21 5A 1A         		ld	iy,tblPSGN		; PSG Noise
(1) 1314/     648 : CD 5D 08            		call	dtbl_singl
(1) 1315/     64B : CF                  		rst	8
(1) 1316/     64C : FD 21 10 1A         		ld	iy,tblPSG		; PSG Squares
(1) 1317/     650 : CD 47 08            		call	dtbl_multi
(1) 1318/     653 : CF                  		rst	8
(1) 1319/     654 : FD 21 72 1A         		ld	iy,tblFM		; FM/FM3/DAC
(1) 1320/     658 : CD 47 08            		call	dtbl_multi
(1) 1321/     65B : CF                  		rst	8
(1) 1322/     65C : FD 21 04 1B         		ld	iy,tblPCM		; SEGA CD PCM
(1) 1323/     660 : CD 47 08            		call	dtbl_multi
(1) 1324/     663 : CF                  		rst	8
(1) 1325/     664 : FD 21 C6 1B         		ld	iy,tblPWM		; 32X PWM
(1) 1326/     668 : C3 47 08            		jp	dtbl_multi
(1) 1327/     66B :                     
(1) 1328/     66B :                     ; ----------------------------------------
(1) 1329/     66B :                     ; Read current track
(1) 1330/     66B :                     ;
(1) 1331/     66B :                     ; iy - Buffer
(1) 1332/     66B :                     tblbuff_read:
(1) 1333/     66B : FD 6E 00            		ld	l,(iy)
(1) 1334/     66E : FD 66 01            		ld	h,(iy+1)
(1) 1335/     671 : CD E6 11            		call	get_tick
(1) 1336/     674 : CF                  		rst	8
(1) 1337/     675 : E5                  		push	hl
(1) 1338/     676 : FD E1               		pop	iy
(1) 1339/     678 : FD 46 00            		ld	b,(iy+trk_Status)	; bit7: Track active?
(1) 1340/     67B : CB 78               		bit	7,b
(1) 1341/     67D : C8                  		ret	z
(1) 1342/     67E : 78                  		ld	a,b			; trk_Status == -1?
(1) 1343/     67F : FE FF               		cp	-1
(1) 1344/     681 : C2 8B 06            		jp	nz,.track_cont
(1) 1345/     684 : CD DF 05            		call	track_out
(1) 1346/     687 : FD 36 00 00         		ld	(iy+trk_Status),0
(1) 1347/     68B :                     .track_cont:
(1) 1348/     68B : E7                  		rst	20h
(1) 1349/     68C : FD E5               		push	iy
(1) 1350/     68E : E1                  		pop	hl
(1) 1351/     68F : CF                  		rst	8
(1) 1352/     690 : DD 21 00 1E         		ld	ix,trkChnls
(1) 1353/     694 : 11 26 00            		ld	de,trk_ChnIndx
(1) 1354/     697 : 19                  		add	hl,de
(1) 1355/     698 : FD 7E 18            		ld	a,(iy+trk_MaxChnl)	; LAZY MODE: If zero, Read ALL channels
(1) 1356/     69B : B7                  		or	a
(1) 1357/     69C : 20 02               		jr	nz,.valid
(1) 1358/     69E : 3E 1A               		ld	a,MAX_TRKINDX
(1) 1359/     6A0 :                     .valid:
(1) 1360/     6A0 : CF                  		rst	8
(1) 1361/     6A1 : 47                  		ld	b,a
(1) 1362/     6A2 :                     .next_indx:
(1) 1363/     6A2 : 7E                  		ld	a,(hl)			; Read index
(1) 1364/     6A3 : B7                  		or	a
(1) 1365/     6A4 : 20 0B               		jr	nz,.has_indx		; If non-zero: valid
(1) 1366/     6A6 : C5                  		push	bc			; ** wave sync
(1) 1367/     6A7 : 06 04               		ld	b,4
(1) 1368/     6A9 : 00                  		nop
(1) 1369/     6AA : 00                  		nop
(1) 1370/     6AB : CF                  		rst	8
(1) 1371/     6AC : 10 FE               		djnz	$
(1) 1372/     6AE : C1                  		pop	bc			; **
(1) 1373/     6AF : 18 1C               		jr	.no_indx
(1) 1374/     6B1 :                     .has_indx:
(1) 1375/     6B1 : E6 1F               		and	00011111b
(1) 1376/     6B3 : 87                  		add	a,a
(1) 1377/     6B4 : 87                  		add	a,a
(1) 1378/     6B5 : 87                  		add	a,a
(1) 1379/     6B6 : CF                  		rst	8
(1) 1380/     6B7 : 16 00               		ld	d,0
(1) 1381/     6B9 : 5F                  		ld	e,a
(1) 1382/     6BA : C5                  		push	bc
(1) 1383/     6BB : E5                  		push	hl
(1) 1384/     6BC : DD E5               		push	ix
(1) 1385/     6BE : DD 19               		add	ix,de
(1) 1386/     6C0 : DD 7E 00            		ld	a,(ix)			; Read 0000evin
(1) 1387/     6C3 : E6 0F               		and	00001111b
(1) 1388/     6C5 : C4 D5 06            		call	nz,.do_chip		; Call if non-zero
(1) 1389/     6C8 : CF                  		rst	8
(1) 1390/     6C9 : DD E1               		pop	ix
(1) 1391/     6CB : E1                  		pop	hl
(1) 1392/     6CC : C1                  		pop	bc
(1) 1393/     6CD :                     .no_indx:
(1) 1394/     6CD : 23                  		inc	hl
(1) 1395/     6CE : 10 D2               		djnz	.next_indx
(1) 1396/     6D0 : FD CB 00 9E         		res	3,(iy+trk_Status)	; RESET Volume update bit
(1) 1397/     6D4 : C9                  		ret
(1) 1398/     6D5 :                     
(1) 1399/     6D5 :                     ; ----------------------------------------
(1) 1400/     6D5 :                     ; iy - Track buffer
(1) 1401/     6D5 :                     ; ix - Current channel
(1) 1402/     6D5 :                     
(1) 1403/     6D5 :                     .do_chip:
(1) 1404/     6D5 : DD 7E 03            		ld	a,(ix+chnl_Ins)		; Check intrument type FIRST
(1) 1405/     6D8 : B7                  		or	a
(1) 1406/     6D9 : C8                  		ret	z			; If 0 == stop
(1) 1407/     6DA : CF                  		rst	8
(1) 1408/     6DB : 3D                  		dec	a			; inst-1
(1) 1409/     6DC : E6 7F               		and	01111111b
(1) 1410/     6DE : 21 B9 1C            		ld	hl,instListOut		; hl - Temporal storage for instrument
(1) 1411/     6E1 : FD 4E 15            		ld	c,(iy+trk_BankIns)	;  c - Current intrument loaded
(1) 1412/     6E4 : CB 79               		bit	7,c			; First time?
(1) 1413/     6E6 : 20 03               		jr	nz,.first_ins
(1) 1414/     6E8 : B9                  		cp	c			; SAME instrument data?
(1) 1415/     6E9 : 28 24               		jr	z,.keep_it
(1) 1416/     6EB :                     .first_ins:
(1) 1417/     6EB : E5                  		push	hl
(1) 1418/     6EC : FD 77 15            		ld	(iy+trk_BankIns),a	; Save inst number
(1) 1419/     6EF : 07                  		rlca
(1) 1420/     6F0 : 07                  		rlca
(1) 1421/     6F1 : 07                  		rlca
(1) 1422/     6F2 : 47                  		ld	b,a
(1) 1423/     6F3 : E6 F8               		and	11111000b
(1) 1424/     6F5 : 4F                  		ld	c,a
(1) 1425/     6F6 : 78                  		ld	a,b
(1) 1426/     6F7 : E6 07               		and	00000111b
(1) 1427/     6F9 : CF                  		rst	8
(1) 1428/     6FA : 47                  		ld	b,a
(1) 1429/     6FB : EB                  		ex	hl,de
(1) 1430/     6FC : FD 6E 20            		ld	l,(iy+trk_RomInst)
(1) 1431/     6FF : FD 66 21            		ld	h,(iy+(trk_RomInst+1))
(1) 1432/     702 : FD 7E 22            		ld	a,(iy+(trk_RomInst+2))
(1) 1433/     705 : 09                  		add	hl,bc
(1) 1434/     706 : CE 00               		adc	a,0
(1) 1435/     708 : 01 08 00            		ld	bc,8			; 8 bytes
(1) 1436/     70B : CD 07 12            		call	transferRom		; ** ROM access **
(1) 1437/     70E : E1                  		pop	hl
(1) 1438/     70F :                     .keep_it:
(1) 1439/     70F : E5                  		push	hl			; <-- save hl
(1) 1440/     710 : CD 2D 07            		call	.grab_link
(1) 1441/     713 : D1                  		pop	de			; --> recover as de
(1) 1442/     714 :                     	; hl - current table
(1) 1443/     714 :                     	; de - instrument data
(1) 1444/     714 : FE FF               		cp	-1			; Found any link?
(1) 1445/     716 : C8                  		ret	z
(1) 1446/     717 : 23                  		inc	hl			; Skip link
(1) 1447/     718 : 23                  		inc	hl
(1) 1448/     719 : FD 7E 14            		ld	a,(iy+trk_Priority)
(1) 1449/     71C : 77                  		ld	(hl),a			; Write priority level
(1) 1450/     71D : 23                  		inc	hl
(1) 1451/     71E : FD 7E 0E            		ld	a,(iy+trk_VolMaster)
(1) 1452/     721 : 77                  		ld	(hl),a			; Write current MASTER volume
(1) 1453/     722 : 01 0D 00            		ld	bc,10h-3		; Move to instr data
(1) 1454/     725 : 09                  		add	hl,bc
(1) 1455/     726 : EB                  		ex	hl,de			; <-- swap for ldir
(1) 1456/     727 : 01 08 00            		ld	bc,8
(1) 1457/     72A : ED B0               		ldir				; COPYPASTE instr data from temporal
(1) 1458/     72C : C9                  		ret
(1) 1459/     72D :                     
(1) 1460/     72D :                     ; ----------------------------------------
(1) 1461/     72D :                     ; Search for a linked channel on the
(1) 1462/     72D :                     ; chip table
(1) 1463/     72D :                     ;
(1) 1464/     72D :                     ; Input:
(1) 1465/     72D :                     ; iy - Track buffer
(1) 1466/     72D :                     ; ix - Current channel
(1) 1467/     72D :                     ; hl - Intrument data
(1) 1468/     72D :                     ;
(1) 1469/     72D :                     ; Returns:
(1) 1470/     72D :                     ; hl - Channel table to use
(1) 1471/     72D :                     ;  a - Return value:
(1) 1472/     72D :                     ;       0 - Found
(1) 1473/     72D :                     ;      -1 - Not found
(1) 1474/     72D :                     ; ----------------------------------------
(1) 1475/     72D :                     
(1) 1476/     72D :                     .grab_link:
(1) 1477/     72D : 7E                  		ld	a,(hl)			; Check INSTRUMENT type
(1) 1478/     72E : E6 F0               		and	11110000b		; Filter bits
(1) 1479/     730 : 5F                  		ld	e,a			; e - NEW chip
(1) 1480/     731 : DD 7E 01            		ld	a,(ix+chnl_Chip)	; a - our current chip
(1) 1481/     734 : E6 F0               		and	11110000b		; Filter bits too.
(1) 1482/     736 : 28 6A               		jr	z,.new_chip		; If 0: It's a NEW chip
(1) 1483/     738 : BB                  		cp 	e			; Same chip as NEW?
(1) 1484/     739 : 28 10               		jr	z,.srch_link		; then re-use the slot
(1) 1485/     73B : CF                  		rst	8
(1) 1486/     73C : 57                  		ld	d,a			; d - Chip to silence
(1) 1487/     73D : D5                  		push	de
(1) 1488/     73E : CD 4B 07            		call	.srch_link		; Search our link (first)
(1) 1489/     741 : D1                  		pop	de
(1) 1490/     742 : FE FF               		cp	-1
(1) 1491/     744 : C8                  		ret	z
(1) 1492/     745 : CF                  		rst	8
(1) 1493/     746 : CD 2C 08            		call	.reset_link
(1) 1494/     749 : 18 57               		jr	.new_chip
(1) 1495/     74B :                     
(1) 1496/     74B :                     ; ----------------------------------------
(1) 1497/     74B :                     ; ** RELINK **
(1) 1498/     74B :                     ; e - Our current chip
(1) 1499/     74B :                     .srch_link:
(1) 1500/     74B : CD 12 08            		call	.pick_tbl	; Pick chip table in hl
(1) 1501/     74E : DD E5               		push	ix		; copy ix to bc
(1) 1502/     750 : C1                  		pop	bc
(1) 1503/     751 : B7                  		or	a
(1) 1504/     752 : FA 92 07            		jp	m,.singl_link
(1) 1505/     755 :                     .srch_lloop:
(1) 1506/     755 : 7E                  		ld	a,(hl)		; Read LSB
(1) 1507/     756 : FE FF               		cp	-1		; If -1, return -1
(1) 1508/     758 : 28 45               		jr	z,.refill
(1) 1509/     75A : B9                  		cp	c
(1) 1510/     75B : 20 07               		jr	nz,.invldl
(1) 1511/     75D : CF                  		rst	8
(1) 1512/     75E : 23                  		inc	hl
(1) 1513/     75F : 7E                  		ld	a,(hl)
(1) 1514/     760 : 2B                  		dec	hl
(1) 1515/     761 : B8                  		cp	b
(1) 1516/     762 : 28 08               		jr	z,.reroll
(1) 1517/     764 :                     .invldl:
(1) 1518/     764 : D5                  		push	de
(1) 1519/     765 : 11 18 00            		ld	de,MAX_TBLSIZE
(1) 1520/     768 :                     ; 		rst	8		; *** wave sync
(1) 1521/     768 :                     ; 		nop
(1) 1522/     768 : 19                  		add	hl,de
(1) 1523/     769 : D1                  		pop	de
(1) 1524/     76A : 18 E9               		jr	.srch_lloop
(1) 1525/     76C :                     .reroll:
(1) 1526/     76C :                     
(1) 1527/     76C :                     	; ----------------------------------------
(1) 1528/     76C :                     	; *** Special re-roll check ***
(1) 1529/     76C : E5                  		push	hl
(1) 1530/     76D : 01 04 00            		ld	bc,4		; <-- fake iy+04h
(1) 1531/     770 : 09                  		add	hl,bc
(1) 1532/     771 : CF                  		rst	8
(1) 1533/     772 : 4E                  		ld	c,(hl)		; c - ID
(1) 1534/     773 : E1                  		pop	hl
(1) 1535/     774 : 7B                  		ld	a,e
(1) 1536/     775 : FE 80               		cp	80h		; PSG?
(1) 1537/     777 : 28 02               		jr	z,.chk_psg
(1) 1538/     779 :                     ; 		cp	0A0h		; FM normal?
(1) 1539/     779 :                     ; 		jr	z,.chk_fm
(1) 1540/     779 : 18 22               		jr	.rnot_psg
(1) 1541/     77B :                     .chk_psg:
(1) 1542/     77B : 3A 81 1C            		ld	a,(psgHatMode)
(1) 1543/     77E : E6 03               		and	011b
(1) 1544/     780 : FE 03               		cp	011b
(1) 1545/     782 : 20 19               		jr	nz,.rnot_psg
(1) 1546/     784 : 79                  		ld	a,c
(1) 1547/     785 : FE 02               		cp	2
(1) 1548/     787 : 20 14               		jr	nz,.rnot_psg
(1) 1549/     789 : CF                  		rst	8
(1) 1550/     78A : 16 80               		ld	d,80h		; Set PSG silence
(1) 1551/     78C : CD 2C 08            		call	.reset_link	; on PSG3
(1) 1552/     78F : C3 0F 08            		jp	.set_asfull
(1) 1553/     792 :                     
(1) 1554/     792 :                     ; ----------------------
(1) 1555/     792 :                     ; PSGN/FM3/FM6
(1) 1556/     792 :                     .singl_link:
(1) 1557/     792 : 23                  		inc	hl			; Read MSB first
(1) 1558/     793 : 7E                  		ld	a,(hl)
(1) 1559/     794 : 2B                  		dec	hl
(1) 1560/     795 : CF                  		rst	8
(1) 1561/     796 : B8                  		cp	b			; MSB match?
(1) 1562/     797 : 20 06               		jr	nz,.refill
(1) 1563/     799 : 7E                  		ld	a,(hl)			; Read LSB
(1) 1564/     79A : B9                  		cp	c
(1) 1565/     79B : 20 02               		jr	nz,.refill
(1) 1566/     79D :                     ; ----------------------
(1) 1567/     79D :                     .rnot_psg:
(1) 1568/     79D : AF                  		xor	a
(1) 1569/     79E : C9                  		ret
(1) 1570/     79F :                     ; ***
(1) 1571/     79F :                     .refill:
(1) 1572/     79F : DD 5E 01            		ld	e,(ix+chnl_Chip)
(1) 1573/     7A2 :                     
(1) 1574/     7A2 :                     ; ----------------------------------------
(1) 1575/     7A2 :                     ; *** NEW CHIP ***
(1) 1576/     7A2 :                     ; e - Chip to set
(1) 1577/     7A2 :                     .new_chip:
(1) 1578/     7A2 : 7B                  		ld	a,e			; Read NEW chip
(1) 1579/     7A3 : B7                  		or	a			; If non-minus, exit.
(1) 1580/     7A4 : F0                  		ret	p
(1) 1581/     7A5 : CD 12 08            		call	.pick_tbl
(1) 1582/     7A8 : CF                  		rst	8
(1) 1583/     7A9 : FD 4E 14            		ld	c,(iy+trk_Priority)	; c - OUR priority level
(1) 1584/     7AC : B7                  		or	a
(1) 1585/     7AD : FA FD 07            		jp	m,.singl_free
(1) 1586/     7B0 : E5                  		push	hl			; Backup START table
(1) 1587/     7B1 :                     ; PASS 1
(1) 1588/     7B1 :                     .srch_free:
(1) 1589/     7B1 : 7E                  		ld	a,(hl)			; Read LSB
(1) 1590/     7B2 : FE FF               		cp	-1			; If -1, return -1
(1) 1591/     7B4 : 28 0B               		jr	z,.pass_2
(1) 1592/     7B6 : 23                  		inc	hl
(1) 1593/     7B7 : 46                  		ld	b,(hl)			; Read MSB
(1) 1594/     7B8 : 2B                  		dec	hl
(1) 1595/     7B9 :                     ; 		nop	; wave sync
(1) 1596/     7B9 :                     ; 		nop
(1) 1597/     7B9 :                     ; 		rst	8
(1) 1598/     7B9 :                     ; 		nop
(1) 1599/     7B9 :                     ; 		nop
(1) 1600/     7B9 : B0                  		or	b
(1) 1601/     7BA : 28 24               		jr	z,.new_link_z
(1) 1602/     7BC : CD D9 07            		call	.nextsrch_tbl
(1) 1603/     7BF : 18 F0               		jr	.srch_free
(1) 1604/     7C1 :                     
(1) 1605/     7C1 :                     ; PASS 2
(1) 1606/     7C1 :                     ; Rewrite mode
(1) 1607/     7C1 :                     .pass_2:
(1) 1608/     7C1 : E1                  		pop	hl
(1) 1609/     7C2 :                     .next_prio:
(1) 1610/     7C2 : 7E                  		ld	a,(hl)		; Read LSB
(1) 1611/     7C3 : FE FF               		cp	-1		; If -1, return -1
(1) 1612/     7C5 : C8                  		ret	z
(1) 1613/     7C6 : 23                  		inc	hl
(1) 1614/     7C7 : 23                  		inc	hl
(1) 1615/     7C8 : 7E                  		ld	a,(hl)		; Read priority
(1) 1616/     7C9 : 2B                  		dec	hl
(1) 1617/     7CA : 2B                  		dec	hl
(1) 1618/     7CB : B9                  		cp	c
(1) 1619/     7CC : 28 16               		jr	z,.new_link_o
(1) 1620/     7CE : 38 14               		jr	c,.new_link_o
(1) 1621/     7D0 : B7                  		or	a
(1) 1622/     7D1 : 28 11               		jr	z,.new_link_o
(1) 1623/     7D3 : CF                  		rst	8
(1) 1624/     7D4 : CD D9 07            		call	.nextsrch_tbl
(1) 1625/     7D7 : 18 E9               		jr	.next_prio
(1) 1626/     7D9 :                     .nextsrch_tbl:
(1) 1627/     7D9 : D5                  		push	de
(1) 1628/     7DA : 11 18 00            		ld	de,MAX_TBLSIZE
(1) 1629/     7DD : 19                  		add	hl,de
(1) 1630/     7DE : D1                  		pop	de
(1) 1631/     7DF :                     ; 		nop	; wave sync
(1) 1632/     7DF :                     ; 		nop
(1) 1633/     7DF :                     ; 		rst	8
(1) 1634/     7DF :                     ; 		nop
(1) 1635/     7DF :                     ; 		nop
(1) 1636/     7DF : C9                  		ret
(1) 1637/     7E0 :                     .new_link_z:
(1) 1638/     7E0 : 33                  		inc	sp		; skip backup
(1) 1639/     7E1 : 33                  		inc	sp
(1) 1640/     7E2 : 18 08               		jr	.new_link
(1) 1641/     7E4 :                     
(1) 1642/     7E4 :                     ; OVERWRITE link
(1) 1643/     7E4 :                     .new_link_o:
(1) 1644/     7E4 : E5                  		push	hl
(1) 1645/     7E5 : DD 56 01            		ld	d,(ix+chnl_Chip)
(1) 1646/     7E8 : CD 2C 08            		call	.reset_link
(1) 1647/     7EB : E1                  		pop	hl
(1) 1648/     7EC :                     ; NEW link
(1) 1649/     7EC :                     .new_link:
(1) 1650/     7EC : CF                  		rst	8
(1) 1651/     7ED : 23                  		inc	hl
(1) 1652/     7EE : 23                  		inc	hl
(1) 1653/     7EF :                     ; hl+2
(1) 1654/     7EF :                     .l_hiprio:
(1) 1655/     7EF : DD 73 01            		ld	(ix+chnl_Chip),e
(1) 1656/     7F2 : DD E5               		push	ix
(1) 1657/     7F4 : D1                  		pop	de
(1) 1658/     7F5 : 71                  		ld	(hl),c		; write priority
(1) 1659/     7F6 : 2B                  		dec	hl
(1) 1660/     7F7 : CF                  		rst	8
(1) 1661/     7F8 : 72                  		ld 	(hl),d		; MSB
(1) 1662/     7F9 : 2B                  		dec	hl
(1) 1663/     7FA : 73                  		ld	(hl),e		; LSB
(1) 1664/     7FB : AF                  		xor	a
(1) 1665/     7FC : C9                  		ret
(1) 1666/     7FD :                     
(1) 1667/     7FD :                     ; Single slot
(1) 1668/     7FD :                     ; c - priority
(1) 1669/     7FD :                     ; e - chip
(1) 1670/     7FD :                     .singl_free:
(1) 1671/     7FD : 46                  		ld	b,(hl)
(1) 1672/     7FE : 23                  		inc	hl
(1) 1673/     7FF : 7E                  		ld	a,(hl)
(1) 1674/     800 : 23                  		inc	hl
(1) 1675/     801 : B0                  		or	b
(1) 1676/     802 : 28 EB               		jr	z,.l_hiprio
(1) 1677/     804 : CF                  		rst	8
(1) 1678/     805 : 7E                  		ld	a,(hl)
(1) 1679/     806 : B9                  		cp	c
(1) 1680/     807 : 28 E6               		jr	z,.l_hiprio
(1) 1681/     809 : 38 E4               		jr	c,.l_hiprio		; PRIORITY
(1) 1682/     80B : B7                  		or	a
(1) 1683/     80C : 28 E1               		jr	z,.l_hiprio
(1) 1684/     80E : CF                  		rst	8
(1) 1685/     80F :                     .set_asfull:
(1) 1686/     80F : 3E FF               		ld	a,-1			; Return -1, can't use instrument.
(1) 1687/     811 : C9                  		ret
(1) 1688/     812 :                     
(1) 1689/     812 :                     ; Pick chip table
(1) 1690/     812 :                     ; In:
(1) 1691/     812 :                     ;  a - ID
(1) 1692/     812 :                     ;
(1) 1693/     812 :                     ; Out:
(1) 1694/     812 :                     ;  a - Special bit + ID
(1) 1695/     812 :                     ;
(1) 1696/     812 :                     ; hl - Table
(1) 1697/     812 :                     .pick_tbl:
(1) 1698/     812 : D5                  		push	de
(1) 1699/     813 : 0F                  		rrca
(1) 1700/     814 : 0F                  		rrca
(1) 1701/     815 : 0F                  		rrca
(1) 1702/     816 : 0F                  		rrca
(1) 1703/     817 : E6 07               		and	00000111b
(1) 1704/     819 : 87                  		add	a,a
(1) 1705/     81A : 21 00 1A            		ld	hl,tblList
(1) 1706/     81D : E5                  		push	hl
(1) 1707/     81E : 16 00               		ld	d,0
(1) 1708/     820 : 5F                  		ld	e,a
(1) 1709/     821 : 19                  		add	hl,de
(1) 1710/     822 : 5E                  		ld	e,(hl)
(1) 1711/     823 : 23                  		inc	hl
(1) 1712/     824 : 7E                  		ld	a,(hl)
(1) 1713/     825 : 57                  		ld	d,a
(1) 1714/     826 : CB BA               		res	7,d
(1) 1715/     828 : E1                  		pop	hl
(1) 1716/     829 : 19                  		add	hl,de
(1) 1717/     82A : D1                  		pop	de
(1) 1718/     82B : C9                  		ret
(1) 1719/     82C :                     
(1) 1720/     82C :                     ; d - Silence chip
(1) 1721/     82C :                     ;
(1) 1722/     82C :                     ; Uses:
(1) 1723/     82C :                     ; bc
(1) 1724/     82C :                     .reset_link:
(1) 1725/     82C : CF                  		rst	8
(1) 1726/     82D : 36 00               		ld	(hl),0			; Delete link
(1) 1727/     82F : 23                  		inc	hl
(1) 1728/     830 : 36 00               		ld	(hl),0
(1) 1729/     832 : 23                  		inc	hl
(1) 1730/     833 : 72                  		ld	(hl),d			; Set "silence" chip ID.
(1) 1731/     834 : 23                  		inc	hl
(1) 1732/     835 : 36 00               		ld	(hl),0			; Clear master volume
(1) 1733/     837 : 01 05 00            		ld	bc,8-3			; Go to 08h
(1) 1734/     83A : 09                  		add	hl,bc
(1) 1735/     83B : 06 04               		ld	b,8/2
(1) 1736/     83D :                     .clrfull:
(1) 1737/     83D : 36 00               		ld	(hl),0			; Reset settings 08-0Bh
(1) 1738/     83F : 23                  		inc	hl
(1) 1739/     840 : 36 00               		ld	(hl),0
(1) 1740/     842 : 23                  		inc	hl
(1) 1741/     843 : CF                  		rst	8
(1) 1742/     844 : 10 F7               		djnz	.clrfull
(1) 1743/     846 : C9                  		ret
(1) 1744/     847 :                     
(1) 1745/     847 :                     ; ============================================
(1) 1746/     847 :                     ; ----------------------------------------
(1) 1747/     847 :                     ; Process chip using it's table
(1) 1748/     847 :                     ;
(1) 1749/     847 :                     ; iy - table to read
(1) 1750/     847 :                     ; ----------------------------------------
(1) 1751/     847 :                     
(1) 1752/     847 :                     dtbl_multi:
(1) 1753/     847 : FD 7E 00            		ld	a,(iy)
(1) 1754/     84A : FE FF               		cp	-1
(1) 1755/     84C : C8                  		ret	z
(1) 1756/     84D : CD 5D 08            		call	dtbl_singl
(1) 1757/     850 : CF                  		rst	8
(1) 1758/     851 : 11 18 00            		ld	de,MAX_TBLSIZE
(1) 1759/     854 : FD 19               		add	iy,de
(1) 1760/     856 : 06 03               		ld	b,3		; wave sync ** IMPORTANT **
(1) 1761/     858 : 10 FE               		djnz	$
(1) 1762/     85A : CF                  		rst	8
(1) 1763/     85B : 18 EA               		jr	dtbl_multi
(1) 1764/     85D :                     dtbl_singl:
(1) 1765/     85D : FD 5E 00            		ld	e,(iy)		; Read link
(1) 1766/     860 : FD 56 01            		ld	d,(iy+1)
(1) 1767/     863 : 7A                  		ld	a,d		; If no-zero, active
(1) 1768/     864 : B3                  		or	e
(1) 1769/     865 : 20 60               		jr	nz,.linked
(1) 1770/     867 : FD 7E 02            		ld	a,(iy+2)	; Silence request?
(1) 1771/     86A : B7                  		or	a
(1) 1772/     86B : F0                  		ret	p		; Return if not.
(1) 1773/     86C : CF                  		rst	8
(1) 1774/     86D : FD 36 02 00         		ld	(iy+2),0	; Reset request on memory
(1) 1775/     871 :                     
(1) 1776/     871 :                     ; ----------------------------------------
(1) 1777/     871 :                     ; chip-silence request
(1) 1778/     871 :                     ; iy - Table
(1) 1779/     871 : E6 F0               		and	11110000b
(1) 1780/     873 : FE 80               		cp	80h
(1) 1781/     875 : 28 1E               		jr	z,.siln_psg
(1) 1782/     877 : FE 90               		cp	90h
(1) 1783/     879 : 28 16               		jr	z,.siln_psg_n
(1) 1784/     87B : FE A0               		cp	0A0h
(1) 1785/     87D : 28 42               		jr	z,.siln_fm
(1) 1786/     87F : FE B0               		cp	0B0h
(1) 1787/     881 : 28 3E               		jr	z,.siln_fm
(1) 1788/     883 : CF                  		rst	8
(1) 1789/     884 : FE C0               		cp	0C0h
(1) 1790/     886 : 28 36               		jr	z,.siln_dac
(1) 1791/     888 : FE D0               		cp	0D0h
(1) 1792/     88A : 28 10               		jr	z,.siln_pcm
(1) 1793/     88C : FE E0               		cp	0E0h
(1) 1794/     88E : 28 18               		jr	z,.siln_pwm
(1) 1795/     890 : C9                  		ret
(1) 1796/     891 :                     .siln_psg_n:
(1) 1797/     891 : AF                  		xor	a
(1) 1798/     892 : 32 81 1C            		ld	(psgHatMode),a
(1) 1799/     895 :                     .siln_psg:
(1) 1800/     895 : CF                  		rst	8
(1) 1801/     896 : DD 21 40 17         		ld	ix,psgcom
(1) 1802/     89A : 18 16               		jr	.rcyl_com
(1) 1803/     89C :                     
(1) 1804/     89C :                     ; --------------------------------
(1) 1805/     89C :                     
(1) 1806/     89C :                     .siln_pcm:
(1) 1807/     89C : 3E 01               		ld	a,1
(1) 1808/     89E : 32 8B 1C            		ld	(mcdUpd),a
(1) 1809/     8A1 : CF                  		rst	8
(1) 1810/     8A2 : DD 21 C8 16         		ld	ix,pcmcom
(1) 1811/     8A6 : 18 0A               		jr	.rcyl_com
(1) 1812/     8A8 :                     .siln_pwm:
(1) 1813/     8A8 : 3E 01               		ld	a,1
(1) 1814/     8AA : 32 8A 1C            		ld	(marsUpd),a
(1) 1815/     8AD : CF                  		rst	8
(1) 1816/     8AE : DD 21 08 17         		ld	ix,pwmcom
(1) 1817/     8B2 :                     ; 		jr	.rcyl_com
(1) 1818/     8B2 :                     
(1) 1819/     8B2 :                     ; --------------------------------
(1) 1820/     8B2 :                     
(1) 1821/     8B2 :                     .rcyl_com:
(1) 1822/     8B2 : 06 00               		ld	b,0
(1) 1823/     8B4 : FD 4E 04            		ld	c,(iy+04h)
(1) 1824/     8B7 : DD 09               		add	ix,bc
(1) 1825/     8B9 : DD 36 00 04         		ld	(ix),100b	; key-cut
(1) 1826/     8BD : C9                  		ret
(1) 1827/     8BE :                     
(1) 1828/     8BE :                     ; --------------------------------
(1) 1829/     8BE :                     
(1) 1830/     8BE :                     .siln_dac:
(1) 1831/     8BE : CD 54 14            		call	dac_off
(1) 1832/     8C1 :                     .siln_fm:
(1) 1833/     8C1 : CD 94 0A            		call	.fm_keyoff
(1) 1834/     8C4 : C3 9C 0A            		jp	.fm_tloff
(1) 1835/     8C7 :                     
(1) 1836/     8C7 :                     ; ----------------------------------------
(1) 1837/     8C7 :                     ; Process channel now
(1) 1838/     8C7 :                     ; iy - Table
(1) 1839/     8C7 :                     ; ix - Tracker channel
(1) 1840/     8C7 :                     .linked:
(1) 1841/     8C7 : 1A                  		ld	a,(de)		; ** chnl_Flags
(1) 1842/     8C8 : 47                  		ld	b,a		; b - flags to check
(1) 1843/     8C9 : E6 0F               		and	00001111b	; evin flags?
(1) 1844/     8CB : C8                  		ret	z
(1) 1845/     8CC : 78                  		ld	a,b
(1) 1846/     8CD : E6 F0               		and	11110000b	; Keep OTHER bits
(1) 1847/     8CF : 12                  		ld	(de),a		; ** clear chnl_Flags
(1) 1848/     8D0 : D5                  		push	de
(1) 1849/     8D1 : DD E1               		pop	ix
(1) 1850/     8D3 : FD E5               		push	iy		; table+10h instrment data
(1) 1851/     8D5 : E1                  		pop	hl
(1) 1852/     8D6 : 11 10 00            		ld	de,10h
(1) 1853/     8D9 : 19                  		add	hl,de
(1) 1854/     8DA :                     	;  b - Flags LR00evin (Eff|Vol|Ins|Note)
(1) 1855/     8DA :                     	; iy - Our chip table
(1) 1856/     8DA :                     	; ix - Track channel
(1) 1857/     8DA :                     	; hl - Intrument data
(1) 1858/     8DA : CB 40               		bit	0,b		; Note
(1) 1859/     8DC : C4 C7 0F            		call	nz,.note
(1) 1860/     8DF : CB 48               		bit	1,b		; Intrument
(1) 1861/     8E1 : C4 16 0E            		call	nz,.inst
(1) 1862/     8E4 : CF                  		rst	8
(1) 1863/     8E5 : CB 50               		bit	2,b		; Volume
(1) 1864/     8E7 : C4 0D 0E            		call	nz,.volu
(1) 1865/     8EA : CB 58               		bit	3,b		; Effect
(1) 1866/     8EC : C4 0B 0D            		call	nz,.effc
(1) 1867/     8EF : 7E                  		ld	a,(hl)		; Read INS type
(1) 1868/     8F0 : E6 70               		and	01110000b	; Filter bits
(1) 1869/     8F2 : 0F                  		rrca
(1) 1870/     8F3 : 0F                  		rrca
(1) 1871/     8F4 : 0F                  		rrca
(1) 1872/     8F5 : CF                  		rst	8
(1) 1873/     8F6 : 16 00               		ld	d,0
(1) 1874/     8F8 : 5F                  		ld	e,a
(1) 1875/     8F9 : 21 02 09            		ld	hl,.mk_list
(1) 1876/     8FC : 19                  		add	hl,de
(1) 1877/     8FD : 7E                  		ld	a,(hl)
(1) 1878/     8FE : 23                  		inc	hl
(1) 1879/     8FF : 66                  		ld	h,(hl)
(1) 1880/     900 : 6F                  		ld	l,a
(1) 1881/     901 : E9                  		jp	(hl)
(1) 1882/     902 :                     ; --------------------------------
(1) 1883/     902 :                     .mk_list:
(1) 1884/     902 : 36 09               		dw .mk_psg
(1) 1885/     904 : 10 09               		dw .mk_psgn
(1) 1886/     906 : B4 09               		dw .mk_fm
(1) 1887/     908 : 2A 0A               		dw .mk_fmspc
(1) 1888/     90A : 7E 0B               		dw .mk_dac
(1) 1889/     90C : D2 0B               		dw .mk_pcm
(1) 1890/     90E : 63 0C               		dw .mk_pwm
(1) 1891/     910 :                     
(1) 1892/     910 :                     ; --------------------------------
(1) 1893/     910 :                     ; PSGN
(1) 1894/     910 :                     ; --------------------------------
(1) 1895/     910 :                     
(1) 1896/     910 :                     .mk_psgn:
(1) 1897/     910 : CB 40               		bit	0,b
(1) 1898/     912 : 28 6A               		jr	z,.psg_keyon
(1) 1899/     914 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 1900/     917 : DD E5               		push	ix
(1) 1901/     919 : DD 21 43 17         		ld	ix,psgcom+3	; Steal PSG3
(1) 1902/     91D : CF                  		rst	8
(1) 1903/     91E : FE FE               		cp	-2
(1) 1904/     920 : 28 7E               		jr	z,.kycut_psgn
(1) 1905/     922 : FE FF               		cp	-1
(1) 1906/     924 : 28 6D               		jr	z,.kyoff_psgn
(1) 1907/     926 : DD 36 00 01         		ld	(ix+COM),001b	; Key ON
(1) 1908/     92A : 5F                  		ld	e,a
(1) 1909/     92B : 3A 81 1C            		ld	a,(psgHatMode)	; Tone 3?
(1) 1910/     92E : E6 03               		and	011b
(1) 1911/     930 : FE 03               		cp	011b
(1) 1912/     932 : 20 4A               		jr	nz,.psg_keyon	; Normal
(1) 1913/     934 : 18 21               		jr	.from_psgn	; Tone 3
(1) 1914/     936 :                     
(1) 1915/     936 :                     ; --------------------------------
(1) 1916/     936 :                     ; PSG
(1) 1917/     936 :                     ; --------------------------------
(1) 1918/     936 :                     
(1) 1919/     936 :                     .mk_psg:
(1) 1920/     936 : CB 40               		bit	0,b
(1) 1921/     938 : 28 44               		jr	z,.psg_keyon
(1) 1922/     93A : CF                  		rst	8
(1) 1923/     93B : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 1924/     93E : DD E5               		push	ix
(1) 1925/     940 : DD 21 40 17         		ld	ix,psgcom	; ix - psgcom
(1) 1926/     944 : FD 5E 04            		ld	e,(iy+04h)
(1) 1927/     947 : 16 00               		ld	d,0
(1) 1928/     949 : DD 19               		add	ix,de
(1) 1929/     94B : FE FE               		cp	-2
(1) 1930/     94D : 28 54               		jr	z,.kycut_psg
(1) 1931/     94F : FE FF               		cp	-1
(1) 1932/     951 : 28 43               		jr	z,.kyoff_psg
(1) 1933/     953 : DD 36 00 01         		ld	(ix+COM),001b	; Key ON
(1) 1934/     957 :                     .from_psgn:
(1) 1935/     957 : CF                  		rst	8
(1) 1936/     958 : 16 00               		ld	d,0		; de - note*2
(1) 1937/     95A : FD 5E 06            		ld	e,(iy+06h)	; Freq index
(1) 1938/     95D : 21 3E 15            		ld	hl,psgFreq_List-(36*2)
(1) 1939/     960 : 19                  		add	hl,de
(1) 1940/     961 : 7E                  		ld	a,(hl)
(1) 1941/     962 : 23                  		inc	hl
(1) 1942/     963 : 66                  		ld	h,(hl)
(1) 1943/     964 : 6F                  		ld	l,a
(1) 1944/     965 : FD 7E 07            		ld	a,(iy+07h)	; pitchbend
(1) 1945/     968 : 07                  		rlca			; << 3
(1) 1946/     969 : 07                  		rlca
(1) 1947/     96A : CF                  		rst	8
(1) 1948/     96B : 07                  		rlca
(1) 1949/     96C : 57                  		ld	d,a
(1) 1950/     96D : E6 F8               		and	11111000b
(1) 1951/     96F : 5F                  		ld	e,a
(1) 1952/     970 : 7A                  		ld	a,d
(1) 1953/     971 : E6 07               		and	00000111b
(1) 1954/     973 : 57                  		ld	d,a
(1) 1955/     974 : 37                  		scf
(1) 1956/     975 : 3F                  		ccf
(1) 1957/     976 : ED 52               		sbc	hl,de
(1) 1958/     978 : DD 75 1C            		ld	(ix+DTL),l
(1) 1959/     97B : DD 74 20            		ld	(ix+DTH),h
(1) 1960/     97E :                     .psg_keyon:
(1) 1961/     97E : FD 7E 08            		ld	a,(iy+08h)	; Set current Volume
(1) 1962/     981 : FD 96 03            		sub	a,(iy+03h)	; + MASTER vol
(1) 1963/     984 : ED 44               		neg	a
(1) 1964/     986 : CF                  		rst	8
(1) 1965/     987 : 87                  		add	a,a
(1) 1966/     988 : 87                  		add	a,a
(1) 1967/     989 : 30 02               		jr	nc,.vmuch
(1) 1968/     98B : 3E FF               		ld	a,-1
(1) 1969/     98D :                     .vmuch:
(1) 1970/     98D : DD 77 30            		ld	(ix+PVOL),a
(1) 1971/     990 : DD E1               		pop	ix
(1) 1972/     992 : C9                  		ret
(1) 1973/     993 :                     
(1) 1974/     993 :                     ; --------------------------------
(1) 1975/     993 :                     
(1) 1976/     993 :                     ; -1
(1) 1977/     993 :                     .kyoff_psgn:
(1) 1978/     993 : CD AD 09            		call	.kypsgn_hatoff
(1) 1979/     996 :                     .kyoff_psg:
(1) 1980/     996 : 0E 02               		ld	c,010b
(1) 1981/     998 : DD 71 00            		ld	(ix),c
(1) 1982/     99B : DD E1               		pop	ix
(1) 1983/     99D : C3 3D 10            		jp	.chnl_ulnkoff
(1) 1984/     9A0 :                     ; -2
(1) 1985/     9A0 :                     .kycut_psgn:
(1) 1986/     9A0 : CD AD 09            		call	.kypsgn_hatoff
(1) 1987/     9A3 :                     .kycut_psg:
(1) 1988/     9A3 : 0E 04               		ld	c,100b
(1) 1989/     9A5 : DD 71 00            		ld	(ix),c
(1) 1990/     9A8 : DD E1               		pop	ix
(1) 1991/     9AA : C3 37 10            		jp	.chnl_ulnkcut
(1) 1992/     9AD :                     .kypsgn_hatoff:
(1) 1993/     9AD : 3E 00               		ld	a,000b
(1) 1994/     9AF : 32 81 1C            		ld	(psgHatMode),a	; ** GLOBAL SETTING
(1) 1995/     9B2 : CF                  		rst	8
(1) 1996/     9B3 : C9                  		ret
(1) 1997/     9B4 :                     
(1) 1998/     9B4 :                     ; --------------------------------
(1) 1999/     9B4 :                     ; FM
(1) 2000/     9B4 :                     ; --------------------------------
(1) 2001/     9B4 :                     
(1) 2002/     9B4 :                     .mk_fm:
(1) 2003/     9B4 : CB 40               		bit	0,b		; NEW note?
(1) 2004/     9B6 : 28 5E               		jr	z,.mkfm_set
(1) 2005/     9B8 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 2006/     9BB : FE FE               		cp	-2
(1) 2007/     9BD : CA 8B 0A            		jp	z,.fm_cut
(1) 2008/     9C0 : FE FF               		cp	-1
(1) 2009/     9C2 : CA 85 0A            		jp	z,.fm_off
(1) 2010/     9C5 :                     ; 		call	.fm_tloff
(1) 2011/     9C5 : CF                  		rst	8
(1) 2012/     9C6 : FD 4E 04            		ld	c,(iy+04h)	; c - KeyID
(1) 2013/     9C9 : 79                  		ld	a,c
(1) 2014/     9CA : FE 06               		cp	6
(1) 2015/     9CC : 20 05               		jr	nz,.not_dac
(1) 2016/     9CE : CD 54 14            		call	dac_off
(1) 2017/     9D1 : 18 15               		jr	.not_dspc
(1) 2018/     9D3 :                     .not_dac:
(1) 2019/     9D3 :                     ; 		ld	a,c
(1) 2020/     9D3 : FE 02               		cp	2
(1) 2021/     9D5 : 20 11               		jr	nz,.not_dspc
(1) 2022/     9D7 : 3A 82 1C            		ld	a,(fmSpecial)
(1) 2023/     9DA : B7                  		or	a
(1) 2024/     9DB : 28 0B               		jr	z,.not_dspc
(1) 2025/     9DD : 11 00 27            		ld	de,2700h	; CH3 off
(1) 2026/     9E0 : CD 29 14            		call	fm_send_1
(1) 2027/     9E3 : 3E 00               		ld	a,0
(1) 2028/     9E5 : 32 82 1C            		ld	(fmSpecial),a
(1) 2029/     9E8 :                     .not_dspc:
(1) 2030/     9E8 : CD 94 0A            		call	.fm_keyoff
(1) 2031/     9EB : C5                  		push	bc
(1) 2032/     9EC : FD 7E 06            		ld	a,(iy+06h)
(1) 2033/     9EF : 47                  		ld	b,a
(1) 2034/     9F0 : E6 1F               		and	00011111b
(1) 2035/     9F2 : 5F                  		ld	e,a
(1) 2036/     9F3 : 16 00               		ld	d,0
(1) 2037/     9F5 : 21 6E 15            		ld	hl,fmFreq_List
(1) 2038/     9F8 : 19                  		add	hl,de
(1) 2039/     9F9 : 7E                  		ld	a,(hl)
(1) 2040/     9FA : CF                  		rst	8
(1) 2041/     9FB : 23                  		inc	hl
(1) 2042/     9FC : 66                  		ld	h,(hl)
(1) 2043/     9FD : 6F                  		ld	l,a
(1) 2044/     9FE : 78                  		ld	a,b
(1) 2045/     9FF : E6 E0               		and	11100000b
(1) 2046/     A01 : 0F                  		rrca
(1) 2047/     A02 : 0F                  		rrca
(1) 2048/     A03 : B4                  		or	h
(1) 2049/     A04 : 67                  		ld	h,a
(1) 2050/     A05 : FD 5E 07            		ld	e,(iy+07h)	; pitchbend
(1) 2051/     A08 : CF                  		rst	8
(1) 2052/     A09 : AF                  		xor	a		; Clear high
(1) 2053/     A0A : 3F                  		ccf			; Clear carry
(1) 2054/     A0B : CB 23               		sla	e		; << 2
(1) 2055/     A0D : CB 23               		sla	e
(1) 2056/     A0F : 9F                  		sbc	a,a		; -1 if carry is set
(1) 2057/     A10 : 57                  		ld	d,a
(1) 2058/     A11 : 19                  		add	hl,de
(1) 2059/     A12 : CD B3 0A            		call	.fm_setfreq
(1) 2060/     A15 : C1                  		pop	bc
(1) 2061/     A16 :                     
(1) 2062/     A16 :                     ; --------------------------------
(1) 2063/     A16 :                     
(1) 2064/     A16 :                     .mkfm_set:
(1) 2068/     A16 : CD 48 0B            		call	.fm_wrtalpan	; Panning and effects
(1) 2069/     A19 : CD CA 0A            		call	.fm_wrtlvol	; FM volume control
(1) 2070/     A1C : FD 7E 0F            		ld	a,(iy+0Fh)	; 0Fh - keys ***
(1) 2071/     A1F : E6 F0               		and	11110000b
(1) 2072/     A21 : B1                  		or	c		; Merge FM channel
(1) 2073/     A22 : 5F                  		ld	e,a
(1) 2074/     A23 : 16 28               		ld	d,28h
(1) 2075/     A25 : CD 29 14            		call	fm_send_1	; Set keys
(1) 2076/     A28 : CF                  		rst	8
(1) 2077/     A29 :                     .nofm_note:
(1) 2078/     A29 : C9                  		ret
(1) 2080/     A2A :                     
(1) 2081/     A2A :                     ; --------------------------------
(1) 2082/     A2A :                     ; FM3 special
(1) 2083/     A2A :                     ; --------------------------------
(1) 2084/     A2A :                     
(1) 2085/     A2A :                     .mk_fmspc:
(1) 2086/     A2A : CB 40               		bit	0,b		; NEW Note?
(1) 2087/     A2C : 28 E8               		jr	z,.mkfm_set
(1) 2088/     A2E : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 2089/     A31 : FE FE               		cp	-2
(1) 2090/     A33 : CA 8B 0A            		jp	z,.fm_cut
(1) 2091/     A36 : FE FF               		cp	-1
(1) 2092/     A38 : CA 85 0A            		jp	z,.fm_off
(1) 2093/     A3B : FD 4E 04            		ld	c,(iy+04h)	; c - KeyID (011b always)
(1) 2094/     A3E : CD 94 0A            		call	.fm_keyoff
(1) 2095/     A41 : 21 70 1C            		ld	hl,fmcach_list	; Read external freqs
(1) 2096/     A44 : FD 7E 04            		ld	a,(iy+04h)
(1) 2097/     A47 : E6 07               		and	0111b
(1) 2098/     A49 : 16 00               		ld	d,0
(1) 2099/     A4B : 87                  		add	a,a
(1) 2100/     A4C : 5F                  		ld	e,a
(1) 2101/     A4D : CF                  		rst	8
(1) 2102/     A4E : 19                  		add	hl,de
(1) 2103/     A4F : 7E                  		ld	a,(hl)
(1) 2104/     A50 : 23                  		inc	hl
(1) 2105/     A51 : 66                  		ld	h,(hl)
(1) 2106/     A52 : 6F                  		ld	l,a
(1) 2107/     A53 : CF                  		rst	8
(1) 2108/     A54 : 11 20 00            		ld	de,20h		; point to regs
(1) 2109/     A57 : 19                  		add	hl,de
(1) 2110/     A58 : DD E5               		push	ix
(1) 2111/     A5A : DD 21 7D 0A         		ld	ix,.spcreglist
(1) 2112/     A5E : 06 08               		ld	b,8
(1) 2113/     A60 :                     .wr_spc:
(1) 2114/     A60 : DD 56 00            		ld	d,(ix)
(1) 2115/     A63 : 5E                  		ld	e,(hl)
(1) 2116/     A64 : CD 29 14            		call	fm_send_1
(1) 2117/     A67 : CF                  		rst	8
(1) 2118/     A68 : 23                  		inc	hl
(1) 2119/     A69 : DD 23               		inc	ix
(1) 2120/     A6B : 10 F3               		djnz	.wr_spc
(1) 2121/     A6D : DD E1               		pop	ix
(1) 2122/     A6F : 11 40 27            		ld	de,2740h	; CH3 on
(1) 2123/     A72 : CD 29 14            		call	fm_send_1
(1) 2124/     A75 : 3E 01               		ld	a,1
(1) 2125/     A77 : 32 82 1C            		ld	(fmSpecial),a
(1) 2126/     A7A : C3 16 0A            		jp	.mkfm_set
(1) 2127/     A7D :                     .spcreglist:
(1) 2128/     A7D : AD A9               		db 0ADh,0A9h
(1) 2129/     A7F : AC A8               		db 0ACh,0A8h
(1) 2130/     A81 : AE AA               		db 0AEh,0AAh
(1) 2131/     A83 : A6 A2               		db 0A6h,0A2h
(1) 2132/     A85 :                     
(1) 2133/     A85 :                     ; ----------------------------------------
(1) 2134/     A85 :                     
(1) 2135/     A85 :                     .fm_off:
(1) 2136/     A85 : CD 94 0A            		call	.fm_keyoff
(1) 2137/     A88 : C3 3D 10            		jp	.chnl_ulnkoff
(1) 2138/     A8B :                     .fm_cut:
(1) 2139/     A8B : CD 94 0A            		call	.fm_keyoff
(1) 2140/     A8E : CD 9C 0A            		call	.fm_tloff
(1) 2141/     A91 : C3 37 10            		jp	.chnl_ulnkcut
(1) 2142/     A94 :                     
(1) 2143/     A94 :                     ; ----------------------------------------
(1) 2144/     A94 :                     
(1) 2145/     A94 :                     .fm_keyoff:
(1) 2146/     A94 : 16 28               		ld	d,28h
(1) 2147/     A96 : FD 5E 04            		ld	e,(iy+04h)
(1) 2148/     A99 : C3 29 14            		jp	fm_send_1
(1) 2149/     A9C :                     .fm_tloff:
(1) 2150/     A9C : 06 04               		ld	b,4
(1) 2151/     A9E : FD 4E 04            		ld	c,(iy+04h)
(1) 2152/     AA1 : 79                  		ld	a,c
(1) 2153/     AA2 : E6 03               		and	011b
(1) 2154/     AA4 : F6 40               		or	40h	; TL regs
(1) 2155/     AA6 : 1E 7F               		ld	e,7Fh
(1) 2156/     AA8 :                     .tl_down:
(1) 2157/     AA8 : 57                  		ld	d,a
(1) 2158/     AA9 :                     ; 		ld	e,7Fh
(1) 2159/     AA9 : CD 25 14            		call	fm_autoreg
(1) 2160/     AAC : CF                  		rst	8
(1) 2161/     AAD : 7A                  		ld	a,d
(1) 2162/     AAE : C6 04               		add	a,4
(1) 2163/     AB0 : 10 F6               		djnz	.tl_down
(1) 2164/     AB2 : C9                  		ret
(1) 2165/     AB3 :                     ; c - KeyID
(1) 2166/     AB3 :                     .fm_setfreq:
(1) 2167/     AB3 : 79                  		ld	a,c
(1) 2168/     AB4 : E6 03               		and	011b
(1) 2169/     AB6 : F6 A4               		or	0A4h
(1) 2170/     AB8 : 57                  		ld	d,a
(1) 2171/     AB9 : 5C                  		ld	e,h
(1) 2172/     ABA : CF                  		rst	8
(1) 2173/     ABB : CD 25 14            		call	fm_autoreg
(1) 2174/     ABE : 79                  		ld	a,c
(1) 2175/     ABF : E6 03               		and	011b
(1) 2176/     AC1 : F6 A0               		or	0A0h
(1) 2177/     AC3 : 57                  		ld	d,a
(1) 2178/     AC4 : 5D                  		ld	e,l
(1) 2179/     AC5 : CD 25 14            		call	fm_autoreg
(1) 2180/     AC8 : CF                  		rst	8
(1) 2181/     AC9 : C9                  		ret
(1) 2182/     ACA :                     
(1) 2183/     ACA :                     ; --------------------------------
(1) 2184/     ACA :                     ; WRITE TL volume
(1) 2185/     ACA :                     
(1) 2186/     ACA :                     .fm_wrtlvol:
(1) 2187/     ACA : 21 70 1C            		ld	hl,fmcach_list
(1) 2188/     ACD : FD 7E 04            		ld	a,(iy+04h)
(1) 2189/     AD0 : E6 07               		and	0111b
(1) 2190/     AD2 : 16 00               		ld	d,0
(1) 2191/     AD4 : CF                  		rst	8
(1) 2192/     AD5 : 87                  		add	a,a
(1) 2193/     AD6 : 5F                  		ld	e,a
(1) 2194/     AD7 : 19                  		add	hl,de
(1) 2195/     AD8 : 7E                  		ld	a,(hl)
(1) 2196/     AD9 : 23                  		inc	hl
(1) 2197/     ADA : 66                  		ld	h,(hl)
(1) 2198/     ADB : 6F                  		ld	l,a
(1) 2199/     ADC : 23                  		inc	hl
(1) 2200/     ADD : 23                  		inc	hl
(1) 2201/     ADE : 23                  		inc	hl
(1) 2202/     ADF : CF                  		rst	8
(1) 2203/     AE0 : 23                  		inc	hl		; Point to TL's
(1) 2204/     AE1 : FD 7E 04            		ld	a,(iy+04h)
(1) 2205/     AE4 : E6 03               		and	011b
(1) 2206/     AE6 : F6 40               		or	40h		; TL registers
(1) 2207/     AE8 : 57                  		ld	d,a
(1) 2208/     AE9 :                     ; d - 40h+
(1) 2209/     AE9 :                     ; hl - TL data
(1) 2210/     AE9 :                     ; .fm_wrtlvol:
(1) 2211/     AE9 : C5                  		push	bc
(1) 2212/     AEA : E5                  		push	hl
(1) 2213/     AEB : 21 40 0B            		ld	hl,.fm_cindx	; hl - jump carry list
(1) 2214/     AEE : FD 7E 0C            		ld	a,(iy+0Ch)	; Read 0B0h copy
(1) 2215/     AF1 : E6 07               		and	0111b
(1) 2216/     AF3 : 06 00               		ld	b,0
(1) 2217/     AF5 : 4F                  		ld	c,a
(1) 2218/     AF6 : 09                  		add	hl,bc
(1) 2219/     AF7 : FD 7E 08            		ld	a,(iy+08h)	; Read current Volume
(1) 2220/     AFA : CF                  		rst	8
(1) 2221/     AFB : FD 96 03            		sub	a,(iy+03h)	; + MASTER vol
(1) 2222/     AFE : 4F                  		ld	c,a		; c - Current Volume
(1) 2223/     AFF : 46                  		ld	b,(hl)		; b - Current jump-carry byte
(1) 2224/     B00 : E1                  		pop	hl
(1) 2225/     B01 : CB 08               		rrc	b		; OP1
(1) 2226/     B03 : DC 2E 0B            		call	c,.write_tl
(1) 2227/     B06 : 23                  		inc	hl
(1) 2228/     B07 : 14                  		inc	d
(1) 2229/     B08 : 14                  		inc	d
(1) 2230/     B09 : CF                  		rst	8
(1) 2231/     B0A : 14                  		inc	d
(1) 2232/     B0B : 14                  		inc	d
(1) 2233/     B0C : CB 08               		rrc	b		; OP2
(1) 2234/     B0E : DC 2E 0B            		call	c,.write_tl
(1) 2235/     B11 : 23                  		inc	hl
(1) 2236/     B12 : 14                  		inc	d
(1) 2237/     B13 : 14                  		inc	d
(1) 2238/     B14 : 14                  		inc	d
(1) 2239/     B15 : 14                  		inc	d
(1) 2240/     B16 : CB 08               		rrc	b		; OP3
(1) 2241/     B18 : DC 2E 0B            		call	c,.write_tl
(1) 2242/     B1B : 23                  		inc	hl
(1) 2243/     B1C : CF                  		rst	8
(1) 2244/     B1D : 14                  		inc	d
(1) 2245/     B1E : 14                  		inc	d
(1) 2246/     B1F : 14                  		inc	d
(1) 2247/     B20 : 14                  		inc	d
(1) 2248/     B21 : CB 08               		rrc	b		; OP4
(1) 2249/     B23 : DC 2E 0B            		call	c,.write_tl
(1) 2250/     B26 : 23                  		inc	hl
(1) 2251/     B27 : 14                  		inc	d
(1) 2252/     B28 : 14                  		inc	d
(1) 2253/     B29 : 14                  		inc	d
(1) 2254/     B2A : 14                  		inc	d
(1) 2255/     B2B : CF                  		rst	8
(1) 2256/     B2C : C1                  		pop	bc
(1) 2257/     B2D : C9                  		ret
(1) 2258/     B2E :                     .write_tl:
(1) 2259/     B2E : 7E                  		ld	a,(hl)
(1) 2260/     B2F : 91                  		sub	a,c		; reg - volume
(1) 2261/     B30 : F2 35 0B            		jp	p,.keep_tlmx
(1) 2262/     B33 : 3E 7F               		ld	a,7Fh		; <-- maximum TL
(1) 2263/     B35 :                     .keep_tlmx:
(1) 2264/     B35 : C5                  		push	bc
(1) 2265/     B36 : 5F                  		ld	e,a
(1) 2266/     B37 : FD 4E 04            		ld	c,(iy+04h)
(1) 2267/     B3A : CD 25 14            		call	fm_autoreg
(1) 2268/     B3D : CF                  		rst	8
(1) 2269/     B3E : C1                  		pop	bc
(1) 2270/     B3F : C9                  		ret
(1) 2271/     B40 :                     ; Jump carry list
(1) 2272/     B40 :                     .fm_cindx:
(1) 2273/     B40 : 08                  		db 1000b
(1) 2274/     B41 : 08                  		db 1000b
(1) 2275/     B42 : 08                  		db 1000b
(1) 2276/     B43 : 08                  		db 1000b
(1) 2277/     B44 : 0C                  		db 1100b
(1) 2278/     B45 : 0E                  		db 1110b
(1) 2279/     B46 : 0E                  		db 1110b
(1) 2280/     B47 : 0F                  		db 1111b
(1) 2281/     B48 :                     ; c - KeyId
(1) 2282/     B48 :                     .fm_wrtalpan:
(1) 2283/     B48 : FD 7E 0C            		ld	a,(iy+0Ch)		; 0B0h algorithm
(1) 2284/     B4B : 5F                  		ld	e,a
(1) 2285/     B4C : 79                  		ld	a,c
(1) 2286/     B4D : E6 03               		and	011b
(1) 2287/     B4F : F6 B0               		or	0B0h
(1) 2288/     B51 : 57                  		ld	d,a
(1) 2289/     B52 : CD 25 14            		call	fm_autoreg		; Write algorithm
(1) 2290/     B55 : CF                  		rst	8
(1) 2291/     B56 : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Read panning bits
(1) 2292/     B59 : 2F                  		cpl				; REVERSE bits
(1) 2293/     B5A : E6 30               		and	00110000b
(1) 2294/     B5C : 07                  		rlca				; << 2
(1) 2295/     B5D : 07                  		rlca
(1) 2296/     B5E : 5F                  		ld	e,a			; save as e
(1) 2297/     B5F : FD 7E 0D            		ld	a,(iy+0Dh)		; 0B4h %00aa0ppp
(1) 2298/     B62 : E6 3F               		and	00111111b
(1) 2299/     B64 : B3                  		or	e			; Merge panning
(1) 2300/     B65 : 5F                  		ld	e,a
(1) 2301/     B66 : 79                  		ld	a,c
(1) 2302/     B67 : CF                  		rst	8
(1) 2303/     B68 : E6 03               		and	011b
(1) 2304/     B6A : F6 B4               		or	0B4h
(1) 2305/     B6C : 57                  		ld	d,a
(1) 2306/     B6D : CD 25 14            		call	fm_autoreg
(1) 2307/     B70 : FD 7E 0E            		ld	a,(iy+0Eh)		; Read LFO
(1) 2308/     B73 : CB 5F               		bit	3,a			; Intrument wants LFO?
(1) 2309/     B75 : 28 06               		jr	z,.no_lfo
(1) 2310/     B77 : 5F                  		ld	e,a
(1) 2311/     B78 : 16 22               		ld	d,22h
(1) 2312/     B7A : CD 29 14            		call	fm_send_1
(1) 2313/     B7D :                     .no_lfo:
(1) 2314/     B7D : C9                  		ret
(1) 2315/     B7E :                     
(1) 2316/     B7E :                     ; --------------------------------
(1) 2317/     B7E :                     ; DAC
(1) 2318/     B7E :                     ; --------------------------------
(1) 2319/     B7E :                     
(1) 2320/     B7E :                     .mk_dac:
(1) 2321/     B7E : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 2322/     B81 : FE FE               		cp	-2
(1) 2323/     B83 : CA A3 0B            		jp	z,.dac_cut
(1) 2324/     B86 : FE FF               		cp	-1
(1) 2325/     B88 : CA A9 0B            		jp	z,.dac_off
(1) 2326/     B8B : CD AC 0B            		call	.dac_pitch
(1) 2327/     B8E : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Read panning
(1) 2328/     B91 : 2F                  		cpl				; REVERSE bits
(1) 2329/     B92 : E6 30               		and	00110000b
(1) 2330/     B94 : 07                  		rlca
(1) 2331/     B95 : 07                  		rlca
(1) 2332/     B96 : CF                  		rst	8
(1) 2333/     B97 : 5F                  		ld	e,a
(1) 2334/     B98 : 16 B6               		ld	d,0B6h			; Channel 6 panning
(1) 2335/     B9A : CD 34 14            		call	fm_send_2
(1) 2336/     B9D :                     ; 		bit	0,b			; Note update?
(1) 2337/     B9D :                     ; 		ret	z
(1) 2338/     B9D : CD 54 14            		call	dac_off
(1) 2339/     BA0 : C3 69 14            		jp	dac_play
(1) 2340/     BA3 :                     .dac_cut:
(1) 2341/     BA3 : CD 54 14            		call	dac_off
(1) 2342/     BA6 : C3 3D 10            		jp	.chnl_ulnkoff
(1) 2343/     BA9 :                     .dac_off:
(1) 2344/     BA9 : C3 37 10            		jp	.chnl_ulnkcut
(1) 2345/     BAC :                     .dac_pitch:
(1) 2346/     BAC : 16 00               		ld	d,0		; Freq index
(1) 2347/     BAE : FD 5E 06            		ld	e,(iy+06h)
(1) 2348/     BB1 : 21 9E 15            		ld	hl,wavFreq_List-(2*36)
(1) 2349/     BB4 : 19                  		add	hl,de
(1) 2350/     BB5 : 7E                  		ld	a,(hl)
(1) 2351/     BB6 : 23                  		inc	hl
(1) 2352/     BB7 : 66                  		ld	h,(hl)
(1) 2353/     BB8 : 6F                  		ld	l,a
(1) 2354/     BB9 : FD 5E 07            		ld	e,(iy+07h)	; pitchbend
(1) 2355/     BBC : CF                  		rst	8
(1) 2356/     BBD : AF                  		xor	a		; Clear high
(1) 2357/     BBE : 3F                  		ccf			; Clear carry
(1) 2358/     BBF : CB 23               		sla	e		; << 3
(1) 2359/     BC1 : CB 23               		sla	e
(1) 2360/     BC3 : CB 23               		sla	e
(1) 2361/     BC5 : 9F                  		sbc	a,a		; -1 if carry is set
(1) 2362/     BC6 : 57                  		ld	d,a
(1) 2363/     BC7 : 19                  		add	hl,de
(1) 2364/     BC8 : 22 95 1C            		ld	(wave_Pitch),hl
(1) 2365/     BCB : D9                  		exx			; *
(1) 2366/     BCC : ED 5B 95 1C         		ld	de,(wave_Pitch)	; *
(1) 2367/     BD0 : D9                  		exx			; *
(1) 2368/     BD1 : C9                  		ret
(1) 2369/     BD2 :                     
(1) 2370/     BD2 :                     ; --------------------------------
(1) 2371/     BD2 :                     ; PCM
(1) 2372/     BD2 :                     ; --------------------------------
(1) 2373/     BD2 :                     
(1) 2374/     BD2 :                     .mk_pcm:
(1) 2376/     BD2 :                     ; 		bit	0,b			; Note update?
(1) 2377/     BD2 :                     ; 		ret	z
(1) 2378/     BD2 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 2379/     BD5 : 16 00               		ld	d,0
(1) 2380/     BD7 : FD 5E 04            		ld	e,(iy+04h)		; e - Channel ID
(1) 2381/     BDA : DD 4E 00            		ld	c,(ix+chnl_Flags)	; c - Panning bits
(1) 2382/     BDD : DD 21 C8 16         		ld	ix,pcmcom
(1) 2383/     BE1 : DD 19               		add	ix,de
(1) 2384/     BE3 : FE FE               		cp	-2
(1) 2385/     BE5 : CA 56 0C            		jp	z,.pcm_cut
(1) 2386/     BE8 : FE FF               		cp	-1
(1) 2387/     BEA : CA 4F 0C            		jp	z,.pcm_off
(1) 2388/     BED : CF                  		rst	8
(1) 2389/     BEE : CB 40               		bit	0,b			; Note flag?
(1) 2390/     BF0 : 20 0D               		jr	nz,.pcm_note
(1) 2391/     BF2 : CB 58               		bit	3,b			; Effect flag?
(1) 2392/     BF4 : 20 05               		jr	nz,.pcm_effc
(1) 2393/     BF6 : CB 50               		bit	2,b			; Volume flag?
(1) 2394/     BF8 : 20 01               		jr	nz,.pcm_effc
(1) 2395/     BFA : C9                  		ret
(1) 2396/     BFB :                     
(1) 2397/     BFB :                     ; --------------------------------
(1) 2398/     BFB :                     
(1) 2399/     BFB :                     .pcm_effc:
(1) 2400/     BFB : 1E 09               		ld	e,00001001b
(1) 2401/     BFD : 18 0C               		jr	.mkpcm_wrton
(1) 2402/     BFF :                     .pcm_note:
(1) 2403/     BFF : 79                  		ld	a,c		; <-- Lazy panning reset
(1) 2404/     C00 : E6 30               		and	00110000b	; Read LR bits
(1) 2405/     C02 : B7                  		or	a
(1) 2406/     C03 : 20 04               		jr	nz,.mp_reset
(1) 2407/     C05 : FD 36 0A 00         		ld	(iy+0Ah),0	; If 0, reset panning on table
(1) 2408/     C09 :                     .mp_reset:
(1) 2409/     C09 : 1E 01               		ld	e,00000001b	; KeyON request
(1) 2410/     C0B :                     .mkpcm_wrton:
(1) 2411/     C0B : DD 73 00            		ld	(ix),e		; Write key-on bit
(1) 2412/     C0E :                     .mkpcm_proc:
(1) 2413/     C0E : CD EB 0C            		call	.readfreq_pcm
(1) 2414/     C11 : 11 08 00            		ld	de,8		; Go to Pitch
(1) 2415/     C14 : DD 19               		add	ix,de
(1) 2416/     C16 : DD 74 00            		ld	(ix),h		; Set pitch
(1) 2417/     C19 : DD 19               		add	ix,de
(1) 2418/     C1B : DD 75 00            		ld	(ix),l
(1) 2419/     C1E : DD 19               		add	ix,de
(1) 2420/     C20 : 0E FF               		ld	c,-1
(1) 2421/     C22 : FD 7E 03            		ld	a,(iy+03h)
(1) 2422/     C25 : FE 40               		cp	40h
(1) 2423/     C27 : 28 10               		jr	z,.vpcm_siln
(1) 2424/     C29 : 30 0E               		jr	nc,.vpcm_siln
(1) 2425/     C2B : B7                  		or	a
(1) 2426/     C2C : FA 39 0C            		jp	m,.vpcm_siln
(1) 2427/     C2F : 87                  		add	a,a
(1) 2428/     C30 : 47                  		ld	b,a
(1) 2429/     C31 : FD 7E 08            		ld	a,(iy+08h)	; Read current Volume
(1) 2430/     C34 : 3F                  		ccf
(1) 2431/     C35 : 98                  		sbc	a,b		; + MASTER vol
(1) 2432/     C36 : 87                  		add	a,a		; *2
(1) 2433/     C37 : 38 03               		jr	c,.vpcm_carry
(1) 2434/     C39 :                     .vpcm_siln:
(1) 2435/     C39 : AF                  		xor	a
(1) 2436/     C3A : 18 01               		jr	.vpcm_zero
(1) 2437/     C3C :                     .vpcm_carry:
(1) 2438/     C3C : 81                  		add	a,c
(1) 2439/     C3D :                     .vpcm_zero:
(1) 2440/     C3D :                     ; 		ld	(1),a
(1) 2441/     C3D : DD 77 00            		ld	(ix),a
(1) 2442/     C40 : DD 19               		add	ix,de
(1) 2443/     C42 : FD 7E 0A            		ld	a,(iy+0Ah)
(1) 2444/     C45 : 2F                  		cpl
(1) 2445/     C46 : DD 77 00            		ld	(ix),a
(1) 2447/     C49 : 3E 01               		ld	a,1
(1) 2448/     C4B : 32 8B 1C            		ld	(mcdUpd),a
(1) 2450/     C4E : C9                  		ret
(1) 2451/     C4F :                     
(1) 2452/     C4F :                     ; --------------------------------
(1) 2453/     C4F :                     ; -1
(1) 2454/     C4F :                     .pcm_off:
(1) 2455/     C4F : CF                  		rst	8
(1) 2456/     C50 : DD 36 00 02         		ld	(ix),010b
(1) 2457/     C54 : 18 05               		jr	.pcm_setcoff
(1) 2458/     C56 :                     ; -2
(1) 2459/     C56 :                     .pcm_cut:
(1) 2460/     C56 : CF                  		rst	8
(1) 2461/     C57 : DD 36 00 04         		ld	(ix),100b
(1) 2462/     C5B :                     .pcm_setcoff:
(1) 2463/     C5B : 3E 01               		ld	a,1
(1) 2464/     C5D : 32 8B 1C            		ld	(mcdUpd),a
(1) 2465/     C60 : C3 3D 10            		jp	.chnl_ulnkoff
(1) 2469/     C63 :                     
(1) 2470/     C63 :                     ; --------------------------------
(1) 2471/     C63 :                     ; PWM
(1) 2472/     C63 :                     ; --------------------------------
(1) 2473/     C63 :                     
(1) 2474/     C63 :                     .mk_pwm:
(1) 2475/     C63 :                     ; 		bit	0,b			; Note update?
(1) 2476/     C63 :                     ; 		ret	z
(1) 2478/     C63 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 2479/     C66 : 16 00               		ld	d,0
(1) 2480/     C68 : FD 5E 04            		ld	e,(iy+04h)		; e - Channel ID
(1) 2481/     C6B : DD 4E 00            		ld	c,(ix+chnl_Flags)	; c - Panning bits
(1) 2482/     C6E : DD 21 08 17         		ld	ix,pwmcom
(1) 2483/     C72 : DD 19               		add	ix,de
(1) 2484/     C74 : FE FE               		cp	-2
(1) 2485/     C76 : CA DC 0C            		jp	z,.pwm_cut
(1) 2486/     C79 : FE FF               		cp	-1
(1) 2487/     C7B : CA D5 0C            		jp	z,.pwm_off
(1) 2488/     C7E : CF                  		rst	8
(1) 2489/     C7F : 78                  		ld	a,b
(1) 2490/     C80 : CB 40               		bit	0,b			; Note?
(1) 2491/     C82 : 20 0D               		jr	nz,.pw_note
(1) 2492/     C84 : CB 58               		bit	3,b			; Effect?
(1) 2493/     C86 : 20 05               		jr	nz,.pw_effc
(1) 2494/     C88 : CB 50               		bit	2,b			; Volume?
(1) 2495/     C8A : 20 01               		jr	nz,.pw_effc
(1) 2496/     C8C : C9                  		ret
(1) 2497/     C8D :                     .pw_effc:
(1) 2498/     C8D : 1E 09               		ld	e,00001001b
(1) 2499/     C8F : 18 02               		jr	.pw_send
(1) 2500/     C91 :                     .pw_note:
(1) 2501/     C91 : 1E 01               		ld	e,00000001b	; KeyON request
(1) 2502/     C93 :                     .pw_send:
(1) 2503/     C93 : DD 73 00            		ld	(ix),e		; Set command
(1) 2504/     C96 : CD F0 0C            		call	.readfreq_pwm
(1) 2505/     C99 : 79                  		ld	a,c		; Read panning bits
(1) 2506/     C9A : 2F                  		cpl			; Reverse and filter bits
(1) 2507/     C9B : E6 30               		and	00110000b
(1) 2508/     C9D : CF                  		rst	8
(1) 2509/     C9E : 5F                  		ld	e,a		; Save panning to e
(1) 2510/     C9F : FD 7E 03            		ld	a,(iy+03h)
(1) 2511/     CA2 : FE 40               		cp	40h
(1) 2512/     CA4 : 28 09               		jr	z,.vpwm_siln
(1) 2513/     CA6 : 30 07               		jr	nc,.vpwm_siln
(1) 2514/     CA8 : 4F                  		ld	c,a
(1) 2515/     CA9 : FD 7E 08            		ld	a,(iy+08h)	; Read current volume
(1) 2516/     CAC : 91                  		sub	a,c		; + MASTER vol
(1) 2517/     CAD : 18 02               		jr	.vpwm_much
(1) 2518/     CAF :                     .vpwm_siln:
(1) 2519/     CAF : 3E C0               		ld	a,-40h
(1) 2520/     CB1 :                     .vpwm_much:
(1) 2521/     CB1 : ED 44               		neg	a
(1) 2522/     CB3 : E6 FC               		and	11111100b
(1) 2523/     CB5 : B4                  		or	h		; Merge MSB freq
(1) 2524/     CB6 : 01 08 00            		ld	bc,8
(1) 2525/     CB9 : DD 09               		add	ix,bc
(1) 2526/     CBB : DD 77 00            		ld	(ix),a
(1) 2527/     CBE : DD 09               		add	ix,bc
(1) 2528/     CC0 : DD 75 00            		ld	(ix),l
(1) 2529/     CC3 : DD 09               		add	ix,bc
(1) 2530/     CC5 : CF                  		rst	8
(1) 2531/     CC6 : DD 7E 00            		ld	a,(ix)
(1) 2532/     CC9 : E6 CF               		and	11001111b
(1) 2533/     CCB : B3                  		or	e		; Set panning bits
(1) 2534/     CCC : DD 77 00            		ld	(ix),a
(1) 2536/     CCF : 3E 01               		ld	a,1
(1) 2537/     CD1 : 32 8A 1C            		ld	(marsUpd),a
(1) 2539/     CD4 : C9                  		ret
(1) 2540/     CD5 :                     
(1) 2541/     CD5 :                     ; --------------------------------
(1) 2542/     CD5 :                     ; -1
(1) 2543/     CD5 :                     .pwm_off:
(1) 2544/     CD5 : CF                  		rst	8
(1) 2545/     CD6 : DD 36 00 02         		ld	(ix),010b
(1) 2546/     CDA : 18 05               		jr	.pwm_setcoff
(1) 2547/     CDC :                     ; -2
(1) 2548/     CDC :                     .pwm_cut:
(1) 2549/     CDC : CF                  		rst	8
(1) 2550/     CDD : DD 36 00 04         		ld	(ix),100b
(1) 2551/     CE1 :                     .pwm_setcoff:
(1) 2552/     CE1 : 3E 01               		ld	a,1
(1) 2553/     CE3 : 32 8A 1C            		ld	(marsUpd),a
(1) 2554/     CE6 : DD E1               		pop	ix
(1) 2555/     CE8 : C3 3D 10            		jp	.chnl_ulnkoff
(1) 2559/     CEB :                     
(1) 2560/     CEB :                     ; --------------------------------
(1) 2561/     CEB :                     ; SHARED routine
(1) 2562/     CEB :                     
(1) 2563/     CEB :                     .readfreq_pcm:
(1) 2564/     CEB : 21 FE 15            		ld	hl,wavFreq_CdPcm-(2*36)	; <-- one octave lower
(1) 2565/     CEE : 18 03               		jr	.set_wavfreq
(1) 2566/     CF0 :                     .readfreq_pwm:
(1) 2567/     CF0 : 21 9E 15            		ld	hl,wavFreq_List-(2*36)
(1) 2568/     CF3 :                     .set_wavfreq:
(1) 2569/     CF3 : 16 00               		ld	d,0		; Freq index
(1) 2570/     CF5 : FD 5E 06            		ld	e,(iy+06h)
(1) 2571/     CF8 : 19                  		add	hl,de
(1) 2572/     CF9 : 7E                  		ld	a,(hl)
(1) 2573/     CFA : 23                  		inc	hl
(1) 2574/     CFB : 66                  		ld	h,(hl)
(1) 2575/     CFC : 6F                  		ld	l,a
(1) 2576/     CFD : FD 5E 07            		ld	e,(iy+07h)	; pitchbend
(1) 2577/     D00 : CF                  		rst	8
(1) 2578/     D01 : AF                  		xor	a		; Clear high
(1) 2579/     D02 : 3F                  		ccf			; Clear carry
(1) 2580/     D03 : CB 23               		sla	e		; << 2
(1) 2581/     D05 : CB 23               		sla	e
(1) 2582/     D07 : 9F                  		sbc	a,a		; -1 if carry is set
(1) 2583/     D08 : 57                  		ld	d,a
(1) 2584/     D09 : 19                  		add	hl,de
(1) 2585/     D0A : C9                  		ret
(1) 2586/     D0B :                     
(1) 2587/     D0B :                     ; ----------------------------------------
(1) 2588/     D0B :                     ; NEW effect
(1) 2589/     D0B :                     ; ----------------------------------------
(1) 2590/     D0B :                     
(1) 2591/     D0B :                     .effc:
(1) 2592/     D0B : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - effect data
(1) 2593/     D0E : DD 7E 05            		ld	a,(ix+chnl_EffId)	; d - effect id
(1) 2594/     D11 : 57                  		ld	d,a
(1) 2595/     D12 : CF                  		rst	8
(1) 2596/     D13 : FE 04               		cp	4			; Effect D?
(1) 2597/     D15 : 28 0F               		jr	z,.effc_D
(1) 2598/     D17 : FE 05               		cp	5			; Effect E?
(1) 2599/     D19 : 28 4E               		jr	z,.effc_E
(1) 2600/     D1B : FE 06               		cp	6			; Effect F?
(1) 2601/     D1D : 28 5F               		jr	z,.effc_F
(1) 2602/     D1F : CF                  		rst	8
(1) 2603/     D20 : FE 18               		cp	24			; Effect X?
(1) 2604/     D22 : CA 9F 0D            		jp	z,.effc_X
(1) 2605/     D25 : C9                  		ret
(1) 2606/     D26 :                     
(1) 2607/     D26 :                     ; ----------------------------------------
(1) 2608/     D26 :                     ; Effect D
(1) 2609/     D26 :                     ;
(1) 2610/     D26 :                     ; Volume slide down
(1) 2611/     D26 :                     ;
(1) 2612/     D26 :                     ; 0xh-Exh - Normal
(1) 2613/     D26 :                     ; Fxh-Fxh - Fine slide / 2
(1) 2614/     D26 :                     ; ----------------------------------------
(1) 2615/     D26 :                     
(1) 2616/     D26 :                     .effc_D:
(1) 2617/     D26 : CD 93 0D            		call	.save_arg
(1) 2618/     D29 : 79                  		ld	a,c		; Setting == 0?
(1) 2619/     D2A : B7                  		or	a
(1) 2620/     D2B : C8                  		ret	z
(1) 2621/     D2C : E6 F0               		and	0F0h
(1) 2622/     D2E : 28 0F               		jr	z,.norm_down	; 0xh
(1) 2623/     D30 : FE F0               		cp	0F0h
(1) 2624/     D32 : 28 0D               		jr	z,.fine_down	; Fxh
(1) 2625/     D34 : CF                  		rst	8
(1) 2626/     D35 : 79                  		ld	a,c
(1) 2627/     D36 : E6 0F               		and	00Fh
(1) 2628/     D38 : 28 1D               		jr	z,.norm_up	; x0h
(1) 2629/     D3A : FE 0F               		cp	00Fh
(1) 2630/     D3C : 28 17               		jr	z,.fine_up	; xFh
(1) 2631/     D3E : C9                  		ret
(1) 2632/     D3F :                     ; Go down
(1) 2633/     D3F :                     .norm_down:
(1) 2634/     D3F : CB 21               		sla	c
(1) 2635/     D41 :                     .fine_down:
(1) 2636/     D41 : CB 21               		sla	c
(1) 2637/     D43 : 79                  		ld	a,c
(1) 2638/     D44 : E6 3C               		and	00111100b
(1) 2639/     D46 : 4F                  		ld	c,a
(1) 2640/     D47 : FD 7E 08            		ld	a,(iy+08h)	; Current volume
(1) 2641/     D4A : CF                  		rst	8
(1) 2642/     D4B : 91                  		sub	a,c
(1) 2643/     D4C : 1E C0               		ld	e,0C0h
(1) 2644/     D4E : BB                  		cp	e
(1) 2645/     D4F : D2 65 0D            		jp	nc,.vol_dvld
(1) 2646/     D52 : 7B                  		ld	a,e
(1) 2647/     D53 : 18 10               		jr 	.vol_dvld
(1) 2648/     D55 :                     ; Go up
(1) 2649/     D55 :                     .fine_up:
(1) 2650/     D55 : CB 39               		srl	c
(1) 2651/     D57 :                     .norm_up:
(1) 2652/     D57 : CB 39               		srl	c
(1) 2653/     D59 : 79                  		ld	a,c
(1) 2654/     D5A : E6 3C               		and	00111100b
(1) 2655/     D5C : 4F                  		ld	c,a
(1) 2656/     D5D : FD 7E 08            		ld	a,(iy+08h)	; Current volume
(1) 2657/     D60 : CF                  		rst	8
(1) 2658/     D61 : 81                  		add	a,c
(1) 2659/     D62 : 38 01               		jr	c,.vol_dvld
(1) 2660/     D64 : AF                  		xor	a
(1) 2661/     D65 :                     .vol_dvld:
(1) 2662/     D65 : FD 77 08            		ld	(iy+08h),a
(1) 2663/     D68 : C9                  		ret
(1) 2664/     D69 :                     
(1) 2665/     D69 :                     ; ----------------------------------------
(1) 2666/     D69 :                     ; Effect E
(1) 2667/     D69 :                     ; ----------------------------------------
(1) 2668/     D69 :                     
(1) 2669/     D69 :                     .effc_E:
(1) 2670/     D69 : CD 93 0D            		call	.save_arg
(1) 2671/     D6C : 79                  		ld	a,c
(1) 2672/     D6D : E6 F0               		and	0F0h
(1) 2673/     D6F : FE F0               		cp	0F0h
(1) 2674/     D71 : C8                  		ret	z
(1) 2675/     D72 : FE E0               		cp	0E0h
(1) 2676/     D74 : C8                  		ret	z
(1) 2677/     D75 : CF                  		rst	8
(1) 2678/     D76 : FD 7E 07            		ld	a,(iy+07h)
(1) 2679/     D79 : 91                  		sub	a,c
(1) 2680/     D7A : FD 77 07            		ld	(iy+07h),a
(1) 2681/     D7D : C9                  		ret
(1) 2682/     D7E :                     
(1) 2683/     D7E :                     ; ----------------------------------------
(1) 2684/     D7E :                     ; Effect F
(1) 2685/     D7E :                     ; ----------------------------------------
(1) 2686/     D7E :                     
(1) 2687/     D7E :                     .effc_F:
(1) 2688/     D7E : CD 93 0D            		call	.save_arg
(1) 2689/     D81 : 79                  		ld	a,c
(1) 2690/     D82 : E6 F0               		and	0F0h
(1) 2691/     D84 : FE F0               		cp	0F0h
(1) 2692/     D86 : C8                  		ret	z
(1) 2693/     D87 : FE E0               		cp	0E0h
(1) 2694/     D89 : C8                  		ret	z
(1) 2695/     D8A : CF                  		rst	8
(1) 2696/     D8B : FD 7E 07            		ld	a,(iy+07h)
(1) 2697/     D8E : 81                  		add	a,c
(1) 2698/     D8F : FD 77 07            		ld	(iy+07h),a
(1) 2699/     D92 : C9                  		ret
(1) 2700/     D93 :                     
(1) 2701/     D93 :                     ; --------------------------------
(1) 2702/     D93 :                     ; e - got arg
(1) 2703/     D93 :                     ; c - new arg
(1) 2704/     D93 :                     .save_arg:
(1) 2705/     D93 : FD 4E 09            		ld	c,(iy+09h)	; Current slide setting
(1) 2706/     D96 : 7B                  		ld	a,e		; EffArg is non-zero?
(1) 2707/     D97 : B7                  		or	a
(1) 2708/     D98 : 28 04               		jr	z,.D_cont	; 00h = slide continue
(1) 2709/     D9A : 4F                  		ld	c,a
(1) 2710/     D9B : FD 71 09            		ld	(iy+09h),c	; Store NEW slide setting
(1) 2711/     D9E :                     .D_cont:
(1) 2712/     D9E : C9                  		ret
(1) 2713/     D9F :                     
(1) 2714/     D9F :                     ; ----------------------------------------
(1) 2715/     D9F :                     ; Effect X
(1) 2716/     D9F :                     ;
(1) 2717/     D9F :                     ; Common panning values:
(1) 2718/     D9F :                     ;  00h LEFT
(1) 2719/     D9F :                     ;  80h MIDDLE
(1) 2720/     D9F :                     ; 0FFh RIGHT
(1) 2721/     D9F :                     ; ----------------------------------------
(1) 2722/     D9F :                     
(1) 2723/     D9F :                     .effc_X:
(1) 2724/     D9F : 16 00               		ld	d,0
(1) 2725/     DA1 : 7E                  		ld	a,(hl)
(1) 2726/     DA2 : E6 F0               		and	11110000b
(1) 2727/     DA4 : FE 80               		cp	80h		; PSG?
(1) 2728/     DA6 : 28 1D               		jr	z,.res_pan
(1) 2729/     DA8 : FE 90               		cp	90h		; PSGN?
(1) 2730/     DAA : 28 19               		jr	z,.res_pan
(1) 2731/     DAC : FE D0               		cp	0D0h		; MCD: write separate PAN values
(1) 2732/     DAE : CC CF 0D            		call	z,.pan_mcd	; <-- CALL, not JP
(1) 2733/     DB1 :                     
(1) 2734/     DB1 :                     	; ----------------------------------------
(1) 2735/     DB1 :                     	; Common panning bits: %00LR0000
(1) 2736/     DB1 :                     	; (REVERSE: 0-on 1-off)
(1) 2737/     DB1 : FD 36 09 00         		ld	(iy+09h),0
(1) 2738/     DB5 : CF                  		rst	8
(1) 2739/     DB6 : E5                  		push	hl
(1) 2740/     DB7 : 21 E5 0D            		ld	hl,.comn_panlist
(1) 2741/     DBA : 7B                  		ld	a,e
(1) 2742/     DBB : 07                  		rlca
(1) 2743/     DBC : 07                  		rlca
(1) 2744/     DBD : 07                  		rlca
(1) 2745/     DBE : E6 07               		and	0111b
(1) 2746/     DC0 :                     ; 		ld	d,0
(1) 2747/     DC0 : 5F                  		ld	e,a
(1) 2748/     DC1 : CF                  		rst	8
(1) 2749/     DC2 : 19                  		add	hl,de
(1) 2750/     DC3 : 56                  		ld	d,(hl)
(1) 2751/     DC4 : E1                  		pop	hl
(1) 2752/     DC5 :                     .res_pan:
(1) 2753/     DC5 : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Save panning
(1) 2754/     DC8 : E6 CF               		and	11001111b
(1) 2755/     DCA : B2                  		or	d
(1) 2756/     DCB : DD 77 00            		ld	(ix+chnl_Flags),a
(1) 2757/     DCE : C9                  		ret
(1) 2758/     DCF :                     
(1) 2759/     DCF :                     	; ----------------------------------------
(1) 2760/     DCF :                     	; MCD panning
(1) 2761/     DCF :                     .pan_mcd:
(1) 2762/     DCF : E5                  		push	hl
(1) 2763/     DD0 : D5                  		push	de
(1) 2764/     DD1 : 16 00               		ld	d,0
(1) 2765/     DD3 : 21 ED 0D            		ld	hl,.pcm_panlist
(1) 2766/     DD6 : 7B                  		ld	a,e
(1) 2767/     DD7 : E6 F8               		and	0F8h
(1) 2768/     DD9 : 0F                  		rrca
(1) 2769/     DDA : 0F                  		rrca
(1) 2770/     DDB : 0F                  		rrca
(1) 2771/     DDC : 5F                  		ld	e,a
(1) 2772/     DDD : 19                  		add	hl,de
(1) 2773/     DDE : 7E                  		ld	a,(hl)
(1) 2774/     DDF : FD 77 0A            		ld	(iy+0Ah),a
(1) 2775/     DE2 : D1                  		pop	de
(1) 2776/     DE3 : E1                  		pop	hl
(1) 2777/     DE4 : C9                  		ret
(1) 2778/     DE5 :                     
(1) 2779/     DE5 :                     ; 0 - ENABLE, 1 - DISABLE
(1) 2780/     DE5 :                     ; 00LR0000b
(1) 2781/     DE5 :                     .comn_panlist:
(1) 2782/     DE5 : 10                  		db 00010000b
(1) 2783/     DE6 : 10                  		db 00010000b
(1) 2784/     DE7 : 10                  		db 00010000b
(1) 2785/     DE8 : 00                  		db 00000000b
(1) 2786/     DE9 : 00                  		db 00000000b
(1) 2787/     DEA : 20                  		db 00100000b
(1) 2788/     DEB : 20                  		db 00100000b
(1) 2789/     DEC : 20                  		db 00100000b
(1) 2790/     DED :                     
(1) 2791/     DED :                     ; REVERSE OUTPUT BITS
(1) 2792/     DED :                     ; RRRR | LLLL
(1) 2793/     DED :                     .pcm_panlist:
(1) 2794/     DED : F0                  		db 0F0h	; 00h
(1) 2795/     DEE : E0                  		db 0E0h
(1) 2796/     DEF : D0                  		db 0D0h	; 10h
(1) 2797/     DF0 : C0                  		db 0C0h
(1) 2798/     DF1 : B0                  		db 0B0h	; 20h
(1) 2799/     DF2 : A0                  		db 0A0h
(1) 2800/     DF3 : 90                  		db 090h	; 30h
(1) 2801/     DF4 : 80                  		db 080h
(1) 2802/     DF5 : 70                  		db 070h	; 40h
(1) 2803/     DF6 : 60                  		db 060h
(1) 2804/     DF7 : 50                  		db 050h	; 50h
(1) 2805/     DF8 : 40                  		db 040h
(1) 2806/     DF9 : 30                  		db 030h	; 60h
(1) 2807/     DFA : 20                  		db 020h
(1) 2808/     DFB : 10                  		db 010h	; 70h
(1) 2809/     DFC : 00                  		db 000h
(1) 2810/     DFD : 00                  		db 000h ; 80h
(1) 2811/     DFE : 01                  		db 001h
(1) 2812/     DFF : 02                  		db 002h ; 90h
(1) 2813/     E00 : 03                  		db 003h
(1) 2814/     E01 : 04                  		db 004h ; A0h
(1) 2815/     E02 : 05                  		db 005h
(1) 2816/     E03 : 06                  		db 006h ; B0h
(1) 2817/     E04 : 07                  		db 007h
(1) 2818/     E05 : 08                  		db 008h ; C0h
(1) 2819/     E06 : 09                  		db 009h
(1) 2820/     E07 : 0A                  		db 00Ah ; D0h
(1) 2821/     E08 : 0B                  		db 00Bh
(1) 2822/     E09 : 0C                  		db 00Ch ; E0h
(1) 2823/     E0A : 0D                  		db 00Dh
(1) 2824/     E0B : 0E                  		db 00Eh ; F0h
(1) 2825/     E0C : 0F                  		db 00Fh
(1) 2826/     E0D :                     
(1) 2827/     E0D :                     ; ----------------------------------------
(1) 2828/     E0D :                     ; NEW volume
(1) 2829/     E0D :                     ; ----------------------------------------
(1) 2830/     E0D :                     
(1) 2831/     E0D :                     .volu:
(1) 2832/     E0D : DD 7E 04            		ld	a,(ix+chnl_Vol)
(1) 2833/     E10 : D6 40               		sub	a,64
(1) 2834/     E12 : FD 77 08            		ld	(iy+08h),a	; BASE volume
(1) 2835/     E15 : C9                  		ret
(1) 2836/     E16 :                     
(1) 2837/     E16 :                     ; ----------------------------------------
(1) 2838/     E16 :                     ; NEW instrument
(1) 2839/     E16 :                     ; ----------------------------------------
(1) 2840/     E16 :                     
(1) 2841/     E16 :                     .inst:
(1) 2842/     E16 : 7E                  		ld	a,(hl)
(1) 2843/     E17 : E6 F0               		and	11110000b
(1) 2844/     E19 : FE 80               		cp	080h
(1) 2845/     E1B : 28 24               		jr	z,.ins_psg
(1) 2846/     E1D : FE 90               		cp	090h
(1) 2847/     E1F : 28 1A               		jr	z,.ins_psgn
(1) 2848/     E21 : FE A0               		cp	0A0h
(1) 2849/     E23 : 28 52               		jr	z,.ins_fm
(1) 2850/     E25 : CF                  		rst	8
(1) 2851/     E26 : FE B0               		cp	0B0h
(1) 2852/     E28 : 28 4D               		jr	z,.ins_fm
(1) 2853/     E2A : FE C0               		cp	0C0h
(1) 2854/     E2C : CA F8 0E            		jp	z,.ins_dac
(1) 2855/     E2F : FE D0               		cp	0D0h
(1) 2856/     E31 : CA 4C 0F            		jp	z,.ins_pcm
(1) 2857/     E34 : FE E0               		cp	0E0h
(1) 2858/     E36 : CA 84 0F            		jp	z,.ins_pwm
(1) 2859/     E39 : CF                  		rst	8
(1) 2860/     E3A :                     .invl_ins:
(1) 2861/     E3A : C9                  		ret
(1) 2862/     E3B :                     
(1) 2863/     E3B :                     ; ----------------------------------------
(1) 2864/     E3B :                     ; PSG
(1) 2865/     E3B :                     
(1) 2866/     E3B :                     .ins_psgn:
(1) 2867/     E3B : 7E                  		ld	a,(hl)		; Grab noise setting
(1) 2868/     E3C : E6 07               		and	0111b
(1) 2869/     E3E : 32 81 1C            		ld	(psgHatMode),a	; ** SET GLOBAL SETTING
(1) 2870/     E41 :                     .ins_psg:
(1) 2871/     E41 : CF                  		rst	8
(1) 2872/     E42 : DD E5               		push	ix
(1) 2873/     E44 : E5                  		push	hl
(1) 2874/     E45 : 23                  		inc	hl		; Skip ID
(1) 2875/     E46 : DD 21 40 17         		ld	ix,psgcom	; Read psg control
(1) 2876/     E4A : FD 5E 04            		ld	e,(iy+04h)
(1) 2877/     E4D : 16 00               		ld	d,0
(1) 2878/     E4F : DD 19               		add	ix,de
(1) 2879/     E51 : 7E                  		ld	a,(hl)
(1) 2880/     E52 : CF                  		rst	8
(1) 2881/     E53 : 23                  		inc	hl
(1) 2882/     E54 : 7E                  		ld	a,(hl)
(1) 2883/     E55 : DD 77 24            		ld	(ix+ALV),a	; ALV
(1) 2884/     E58 : 23                  		inc	hl
(1) 2885/     E59 : 7E                  		ld	a,(hl)
(1) 2886/     E5A : DD 77 08            		ld	(ix+ATK),a	; ATK
(1) 2887/     E5D : 23                  		inc	hl
(1) 2888/     E5E : 7E                  		ld	a,(hl)
(1) 2889/     E5F : CF                  		rst	8
(1) 2890/     E60 : DD 77 10            		ld	(ix+SLV),a	; SLV
(1) 2891/     E63 : 23                  		inc	hl
(1) 2892/     E64 : 7E                  		ld	a,(hl)
(1) 2893/     E65 : DD 77 0C            		ld	(ix+DKY),a	; DKY
(1) 2894/     E68 : 23                  		inc	hl
(1) 2895/     E69 : 7E                  		ld	a,(hl)
(1) 2896/     E6A : DD 77 14            		ld	(ix+RRT),a	; RRT
(1) 2897/     E6D : 23                  		inc	hl
(1) 2898/     E6E : 7E                  		ld	a,(hl)
(1) 2899/     E6F : CF                  		rst	8
(1) 2900/     E70 : DD 77 34            		ld	(ix+PARP),a	; ARP
(1) 2901/     E73 : E1                  		pop	hl
(1) 2902/     E74 : DD E1               		pop	ix
(1) 2903/     E76 : C9                  		ret
(1) 2904/     E77 :                     
(1) 2905/     E77 :                     ; ----------------------------------------
(1) 2906/     E77 :                     ; FM/FM3
(1) 2907/     E77 :                     
(1) 2908/     E77 :                     .ins_fm:
(1) 2909/     E77 : DD E5               		push	ix
(1) 2910/     E79 : E5                  		push	hl
(1) 2911/     E7A : C5                  		push	bc
(1) 2912/     E7B :                     ; 		ld	b,(ix+chnl_Ins)	; b - current Ins
(1) 2913/     E7B : FD 46 02            		ld	b,(iy+02h)
(1) 2914/     E7E : FD 7E 04            		ld	a,(iy+04h)
(1) 2915/     E81 : E6 07               		and	0111b
(1) 2916/     E83 : 16 00               		ld	d,0
(1) 2917/     E85 : 87                  		add	a,a
(1) 2918/     E86 : 5F                  		ld	e,a
(1) 2919/     E87 : DD 21 70 1C         		ld	ix,fmcach_list
(1) 2920/     E8B : DD 19               		add	ix,de
(1) 2921/     E8D : CF                  		rst	8
(1) 2922/     E8E : DD 5E 00            		ld	e,(ix)
(1) 2923/     E91 : DD 23               		inc	ix
(1) 2924/     E93 : DD 56 00            		ld	d,(ix)
(1) 2925/     E96 :                     
(1) 2926/     E96 :                     ; 		ld	a,(iy+0Bh)	; 0Bh: DON'T reload flag
(1) 2927/     E96 :                     ; 		cp	b
(1) 2928/     E96 :                     ; 		jr	z,.same_patch
(1) 2929/     E96 :                     ; 		ld	(iy+0Bh),b
(1) 2930/     E96 : 23                  		inc	hl		; Skip id and pitch
(1) 2931/     E97 : 23                  		inc	hl
(1) 2932/     E98 :                     
(1) 2933/     E98 : 46                  		ld	b,(hl)
(1) 2934/     E99 : 23                  		inc	hl
(1) 2935/     E9A : 4E                  		ld	c,(hl)
(1) 2936/     E9B : 23                  		inc	hl
(1) 2937/     E9C : 6E                  		ld	l,(hl)
(1) 2938/     E9D : 61                  		ld	h,c
(1) 2939/     E9E :                     
(1) 2940/     E9E : FD 7E 0A            		ld	a,(iy+0Ah)
(1) 2941/     EA1 : BC                  		cp	h
(1) 2942/     EA2 : 20 07               		jr	nz,.new_romdat
(1) 2943/     EA4 : CF                  		rst	8
(1) 2944/     EA5 : FD 7E 0B            		ld	a,(iy+0Bh)
(1) 2945/     EA8 : BD                  		cp	l
(1) 2946/     EA9 : 28 38               		jr	z,.same_patch
(1) 2947/     EAB :                     .new_romdat:
(1) 2948/     EAB : FD 74 0A            		ld	(iy+0Ah),h
(1) 2949/     EAE : FD 75 0B            		ld	(iy+0Bh),l
(1) 2950/     EB1 : 78                  		ld	a,b
(1) 2951/     EB2 : 01 28 00            		ld	bc,28h		; <- size
(1) 2952/     EB5 : D5                  		push	de
(1) 2953/     EB6 : CD 07 12            		call	transferRom	; *** ROM ACCESS ***
(1) 2954/     EB9 :                     
(1) 2955/     EB9 : E1                  		pop	hl
(1) 2956/     EBA : FD 7E 04            		ld	a,(iy+04h)
(1) 2957/     EBD : 4F                  		ld	c,a		; c - FM Key ID
(1) 2958/     EBE :                     
(1) 2959/     EBE :                     	; hl - fmcach intrument
(1) 2960/     EBE :                     	; de - FM reg and data: 3000h
(1) 2961/     EBE :                     	;  c - FM keyChannel
(1) 2962/     EBE : 79                  		ld	a,c
(1) 2963/     EBF : E6 03               		and	011b
(1) 2964/     EC1 : F6 30               		or	30h		; Start at reg 30h
(1) 2965/     EC3 : 57                  		ld	d,a
(1) 2966/     EC4 : 1E 00               		ld	e,0
(1) 2967/     EC6 : CF                  		rst	8
(1) 2968/     EC7 : 06 1C               		ld	b,7*4		; Write ALL base FM registers
(1) 2969/     EC9 : CD E8 0E            		call	.fm_setrlist
(1) 2970/     ECC :                     ; 		ld	b,4
(1) 2971/     ECC :                     ; 		call	.fm_setrlist
(1) 2972/     ECC :                     ; 		ld	b,5*4
(1) 2973/     ECC :                     ; 		call	.fm_setrlist
(1) 2974/     ECC : 7E                  		ld	a,(hl)		; 0B0h
(1) 2975/     ECD : FD 77 0C            		ld	(iy+0Ch),a	; ** Save 0B0h to 0Ch
(1) 2976/     ED0 : 23                  		inc	hl
(1) 2977/     ED1 : 7E                  		ld	a,(hl)		; 0B4h
(1) 2978/     ED2 : FD 77 0D            		ld	(iy+0Dh),a	; ** Save 0B4h to 0Dh
(1) 2979/     ED5 : 23                  		inc	hl
(1) 2980/     ED6 : CF                  		rst	8
(1) 2981/     ED7 : 7E                  		ld	a,(hl)
(1) 2982/     ED8 : FD 77 0E            		ld	(iy+0Eh),a	; LFO
(1) 2983/     EDB : 23                  		inc	hl
(1) 2984/     EDC : 7E                  		ld	a,(hl)		; 028h keys
(1) 2985/     EDD : E6 F0               		and	11110000b
(1) 2986/     EDF : CF                  		rst	8
(1) 2987/     EE0 : FD 77 0F            		ld	(iy+0Fh),a	; ** Save keys to 0Eh
(1) 2988/     EE3 :                     .same_patch:
(1) 2989/     EE3 : C1                  		pop	bc
(1) 2990/     EE4 : E1                  		pop	hl
(1) 2991/     EE5 : DD E1               		pop	ix
(1) 2992/     EE7 : C9                  		ret
(1) 2993/     EE8 :                     ; b - numof_regs
(1) 2994/     EE8 :                     .fm_setrlist:
(1) 2995/     EE8 : 5E                  		ld	e,(hl)
(1) 2996/     EE9 : 23                  		inc	hl
(1) 2997/     EEA : CD 25 14            		call	fm_autoreg
(1) 2998/     EED : 00                  		nop
(1) 2999/     EEE : 00                  		nop
(1) 3000/     EEF : CF                  		rst	8
(1) 3001/     EF0 : 00                  		nop
(1) 3002/     EF1 : 14                  		inc	d		; +4
(1) 3003/     EF2 : 14                  		inc	d
(1) 3004/     EF3 : 14                  		inc	d
(1) 3005/     EF4 : 14                  		inc	d
(1) 3006/     EF5 : 10 F1               		djnz	.fm_setrlist
(1) 3007/     EF7 : C9                  		ret
(1) 3008/     EF8 :                     
(1) 3009/     EF8 :                     ; ----------------------------------------
(1) 3010/     EF8 :                     
(1) 3011/     EF8 :                     .ins_dac:
(1) 3012/     EF8 : E5                  		push	hl
(1) 3013/     EF9 : C5                  		push	bc
(1) 3014/     EFA : CD 54 14            		call	dac_off
(1) 3015/     EFD : 7E                  		ld	a,(hl)
(1) 3016/     EFE : E6 0F               		and	00001111b
(1) 3017/     F00 : 32 97 1C            		ld	(wave_Flags),a
(1) 3018/     F03 : CF                  		rst	8
(1) 3019/     F04 : 23                  		inc	hl
(1) 3020/     F05 : 23                  		inc	hl
(1) 3021/     F06 : 5E                  		ld	e,(hl)
(1) 3022/     F07 : 23                  		inc	hl
(1) 3023/     F08 : 7E                  		ld	a,(hl)
(1) 3024/     F09 : 23                  		inc	hl
(1) 3025/     F0A : 6E                  		ld	l,(hl)
(1) 3026/     F0B : 67                  		ld	h,a
(1) 3027/     F0C : E5                  		push	hl
(1) 3028/     F0D : 7B                  		ld	a,e
(1) 3029/     F0E : 01 06 00            		ld	bc,6		; Skip head
(1) 3030/     F11 : 09                  		add	hl,bc
(1) 3031/     F12 : CE 00               		adc	a,0
(1) 3032/     F14 : 22 8C 1C            		ld	(wave_Start),hl	; Set START point
(1) 3033/     F17 : 32 8E 1C            		ld	(wave_Start+2),a
(1) 3034/     F1A : E1                  		pop	hl
(1) 3035/     F1B : 7B                  		ld	a,e
(1) 3036/     F1C : 11 B3 1C            		ld	de,sampleHead
(1) 3037/     F1F : 01 06 00            		ld	bc,6
(1) 3038/     F22 : D5                  		push	de
(1) 3039/     F23 : CF                  		rst	8
(1) 3040/     F24 : CD 07 12            		call	transferRom	; *** ROM ACCESS ***
(1) 3041/     F27 : E1                  		pop	hl
(1) 3042/     F28 :                     	; hl - temporal header
(1) 3043/     F28 : 5E                  		ld	e,(hl)
(1) 3044/     F29 : 23                  		inc	hl
(1) 3045/     F2A : 56                  		ld	d,(hl)
(1) 3046/     F2B : 23                  		inc	hl
(1) 3047/     F2C : 7E                  		ld	a,(hl)
(1) 3048/     F2D : 23                  		inc	hl
(1) 3049/     F2E : ED 53 8F 1C         		ld	(wave_Len),de	; LEN
(1) 3050/     F32 : 32 91 1C            		ld	(wave_Len+2),a
(1) 3051/     F35 : 5E                  		ld	e,(hl)
(1) 3052/     F36 : 23                  		inc	hl
(1) 3053/     F37 : CF                  		rst	8
(1) 3054/     F38 : 56                  		ld	d,(hl)
(1) 3055/     F39 : 23                  		inc	hl
(1) 3056/     F3A : 7E                  		ld	a,(hl)
(1) 3057/     F3B : 23                  		inc	hl
(1) 3058/     F3C : ED 53 92 1C         		ld	(wave_Loop),de	; LOOP
(1) 3059/     F40 : 32 94 1C            		ld	(wave_Loop+2),a
(1) 3060/     F43 : 11 06 28            		ld	de,2806h	; keys off
(1) 3061/     F46 : CD 29 14            		call	fm_send_1
(1) 3062/     F49 : C1                  		pop	bc
(1) 3063/     F4A : E1                  		pop	hl
(1) 3064/     F4B :                     ; .same_dac:
(1) 3065/     F4B : C9                  		ret
(1) 3066/     F4C :                     
(1) 3067/     F4C :                     ; ----------------------------------------
(1) 3068/     F4C :                     
(1) 3069/     F4C :                     .ins_pcm:
(1) 3070/     F4C : DD E5               		push	ix
(1) 3071/     F4E : E5                  		push	hl
(1) 3072/     F4F : C5                  		push	bc
(1) 3073/     F50 : 7E                  		ld	a,(hl)		; Stereo|Loop bits
(1) 3074/     F51 : E6 01               		and	00000001b	; Read loop bit
(1) 3075/     F53 : 0F                  		rrca			; Move to MSB
(1) 3076/     F54 : CF                  		rst	8
(1) 3077/     F55 : 23                  		inc	hl		; Skip ID and Pitch
(1) 3078/     F56 : 23                  		inc	hl
(1) 3079/     F57 : 5E                  		ld	e,(hl)		; Read 24-bit pointer
(1) 3080/     F58 : B3                  		or	e
(1) 3081/     F59 : 5F                  		ld	e,a
(1) 3082/     F5A : 23                  		inc	hl
(1) 3083/     F5B : 7E                  		ld	a,(hl)
(1) 3084/     F5C : 23                  		inc	hl
(1) 3085/     F5D : 6E                  		ld	l,(hl)
(1) 3086/     F5E : 67                  		ld	h,a
(1) 3087/     F5F :                     	; d    - Loop enable bit
(1) 3088/     F5F :                     	; e,hl - 24-bit pointer + loop bit
(1) 3089/     F5F : DD 21 C8 16         		ld	ix,pcmcom
(1) 3090/     F63 : 06 00               		ld	b,0
(1) 3091/     F65 : FD 4E 04            		ld	c,(iy+04h)
(1) 3092/     F68 : DD 09               		add	ix,bc
(1) 3093/     F6A : 01 28 00            		ld	bc,40		; Go to 40
(1) 3094/     F6D : DD 09               		add	ix,bc
(1) 3095/     F6F : 01 08 00            		ld	bc,8
(1) 3096/     F72 : DD 73 00            		ld	(ix),e		; Write 24-bit pointer
(1) 3097/     F75 : DD 09               		add	ix,bc
(1) 3098/     F77 : DD 74 00            		ld	(ix),h
(1) 3099/     F7A : DD 09               		add	ix,bc
(1) 3100/     F7C : DD 75 00            		ld	(ix),l
(1) 3101/     F7F : C1                  		pop	bc
(1) 3102/     F80 : E1                  		pop	hl
(1) 3103/     F81 : DD E1               		pop	ix
(1) 3104/     F83 : C9                  		ret
(1) 3105/     F84 :                     
(1) 3106/     F84 :                     ; ----------------------------------------
(1) 3107/     F84 :                     
(1) 3108/     F84 :                     .ins_pwm:
(1) 3109/     F84 : DD E5               		push	ix
(1) 3110/     F86 : E5                  		push	hl
(1) 3111/     F87 : C5                  		push	bc
(1) 3112/     F88 : 7E                  		ld	a,(hl)		; Stereo|Loop bits
(1) 3113/     F89 : E6 03               		and	00000011b
(1) 3114/     F8B : 0F                  		rrca
(1) 3115/     F8C : 0F                  		rrca
(1) 3116/     F8D : 4F                  		ld	c,a
(1) 3117/     F8E : CF                  		rst	8
(1) 3118/     F8F : 23                  		inc	hl		; Skip ID and Pitch
(1) 3119/     F90 : 23                  		inc	hl
(1) 3120/     F91 : 56                  		ld	d,(hl)
(1) 3121/     F92 : 23                  		inc	hl
(1) 3122/     F93 : 5E                  		ld	e,(hl)
(1) 3123/     F94 : 23                  		inc	hl
(1) 3124/     F95 : 7E                  		ld	a,(hl)
(1) 3125/     F96 : 23                  		inc	hl
(1) 3126/     F97 : 6E                  		ld	l,(hl)
(1) 3127/     F98 : 67                  		ld	h,a
(1) 3128/     F99 : 79                  		ld	a,c
(1) 3129/     F9A : B2                  		or	d
(1) 3130/     F9B : 57                  		ld	d,a
(1) 3131/     F9C : CF                  		rst	8
(1) 3132/     F9D :                     	; de,hl - 32-bit PWM pointer
(1) 3133/     F9D : DD 21 08 17         		ld	ix,pwmcom
(1) 3134/     FA1 : 06 00               		ld	b,0
(1) 3135/     FA3 : FD 4E 04            		ld	c,(iy+04h)
(1) 3136/     FA6 : DD 09               		add	ix,bc
(1) 3137/     FA8 : 01 18 00            		ld	bc,24
(1) 3138/     FAB : DD 09               		add	ix,bc	; Move to PWOUTF
(1) 3139/     FAD : 01 08 00            		ld	bc,8
(1) 3140/     FB0 : DD 72 00            		ld	(ix),d
(1) 3141/     FB3 : DD 09               		add	ix,bc
(1) 3142/     FB5 : DD 73 00            		ld	(ix),e
(1) 3143/     FB8 : DD 09               		add	ix,bc
(1) 3144/     FBA : DD 74 00            		ld	(ix),h
(1) 3145/     FBD : DD 09               		add	ix,bc
(1) 3146/     FBF : DD 75 00            		ld	(ix),l
(1) 3147/     FC2 : C1                  		pop	bc
(1) 3148/     FC3 : E1                  		pop	hl
(1) 3149/     FC4 : DD E1               		pop	ix
(1) 3150/     FC6 : C9                  		ret
(1) 3151/     FC7 :                     
(1) 3152/     FC7 :                     ; ----------------------------------------
(1) 3153/     FC7 :                     ; NEW note
(1) 3154/     FC7 :                     ; ----------------------------------------
(1) 3155/     FC7 :                     
(1) 3156/     FC7 :                     .note:
(1) 3157/     FC7 : 78                  		ld	a,b		; Volume bit?
(1) 3158/     FC8 : E6 04               		and	0100b
(1) 3159/     FCA : 20 05               		jr	nz,.fm_hasvol
(1) 3160/     FCC : FD 36 08 00         		ld	(iy+08h),0	; Reset to default volume
(1) 3161/     FD0 : CF                  		rst	8
(1) 3162/     FD1 :                     .fm_hasvol:
(1) 3163/     FD1 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 3164/     FD4 : 4F                  		ld	c,a
(1) 3165/     FD5 : FE FF               		cp	-1
(1) 3166/     FD7 : C8                  		ret	z
(1) 3167/     FD8 : FE FE               		cp	-2
(1) 3168/     FDA : C8                  		ret	z
(1) 3169/     FDB : E7                  		rst	20h
(1) 3170/     FDC : 7E                  		ld	a,(hl)
(1) 3171/     FDD : E6 F0               		and	11110000b
(1) 3172/     FDF : FE 80               		cp	80h
(1) 3173/     FE1 : 28 16               		jr	z,.n_indx
(1) 3174/     FE3 : CF                  		rst	8
(1) 3175/     FE4 : FE 90               		cp	90h
(1) 3176/     FE6 : 28 20               		jr	z,.n_psgn
(1) 3177/     FE8 : FE A0               		cp	0A0h
(1) 3178/     FEA : 28 21               		jr	z,.n_fm
(1) 3179/     FEC :                     ; 		cp	0B0h		; ** Can't use notes on FM special **
(1) 3180/     FEC :                     ; 		jr	z,.n_fm
(1) 3181/     FEC : FE C0               		cp	0C0h
(1) 3182/     FEE : 28 09               		jr	z,.n_indx
(1) 3183/     FF0 : FE D0               		cp	0D0h
(1) 3184/     FF2 : 28 05               		jr	z,.n_indx
(1) 3185/     FF4 : FE E0               		cp	0E0h
(1) 3186/     FF6 : 28 01               		jr	z,.n_indx
(1) 3187/     FF8 : C9                  		ret
(1) 3188/     FF9 :                     
(1) 3189/     FF9 :                     ; --------------------------------
(1) 3190/     FF9 :                     
(1) 3191/     FF9 :                     .n_indx:
(1) 3192/     FF9 : 79                  		ld	a,c
(1) 3193/     FFA :                     .n_stfreq:
(1) 3194/     FFA : 23                  		inc	hl		; Skip ID
(1) 3195/     FFB : 5E                  		ld	e,(hl)		; Read pitch
(1) 3196/     FFC : 2B                  		dec	hl
(1) 3197/     FFD : 83                  		add	a,e		; Note + pitch
(1) 3198/     FFE : CF                  		rst	8
(1) 3199/     FFF : 87                  		add	a,a		; * 2
(1) 3200/    1000 : FD 77 06            		ld	(iy+06h),a
(1) 3201/    1003 : FD 36 07 00         		ld	(iy+07h),0	; reset pitchbend
(1) 3202/    1007 : C9                  		ret
(1) 3203/    1008 :                     .n_psgn:
(1) 3204/    1008 : 79                  		ld	a,c
(1) 3205/    1009 : C6 0C               		add	a,12		; <-- Manual adjust for NOISE
(1) 3206/    100B : 18 ED               		jr	.n_stfreq
(1) 3207/    100D :                     
(1) 3208/    100D :                     ; FM freqs
(1) 3209/    100D :                     .n_fm:
(1) 3210/    100D : 79                  		ld	a,c
(1) 3211/    100E : 23                  		inc	hl		; Skip ID
(1) 3212/    100F : 5E                  		ld	e,(hl)		; Read pitch
(1) 3213/    1010 : 2B                  		dec	hl
(1) 3214/    1011 : CF                  		rst	8
(1) 3215/    1012 : 83                  		add	a,e		; Note + pitch
(1) 3216/    1013 :                     	; Search for octave and note...
(1) 3217/    1013 : 0E 00               		ld	c,0		; c - octave
(1) 3218/    1015 : 16 07               		ld	d,7
(1) 3219/    1017 :                     .get_oct:
(1) 3220/    1017 : 5F                  		ld	e,a		; e - note
(1) 3221/    1018 : D6 0C               		sub	12
(1) 3222/    101A : B7                  		or	a
(1) 3223/    101B : FA 22 10            		jp	m,.fnd_oct
(1) 3224/    101E : 0C                  		inc	c
(1) 3225/    101F :                     ; 		nop
(1) 3226/    101F :                     ; 		nop
(1) 3227/    101F :                     ; 		rst	8
(1) 3228/    101F :                     ; 		nop
(1) 3229/    101F :                     ; 		nop
(1) 3230/    101F : 15                  		dec	d
(1) 3231/    1020 : 20 F5               		jr	nz,.get_oct
(1) 3232/    1022 :                     .fnd_oct:
(1) 3233/    1022 : CF                  		rst	8
(1) 3234/    1023 : 7B                  		ld	a,e
(1) 3235/    1024 : 87                  		add	a,a		; Note * 2
(1) 3236/    1025 : E6 1F               		and	00011111b
(1) 3237/    1027 : CB 09               		rrc	c
(1) 3238/    1029 : CB 09               		rrc	c
(1) 3239/    102B : CB 09               		rrc	c
(1) 3240/    102D : CF                  		rst	8
(1) 3241/    102E : B1                  		or	c
(1) 3242/    102F : FD 77 06            		ld	(iy+06h),a	; Save octave + index: OOOiiiiib
(1) 3243/    1032 : FD 36 07 00         		ld	(iy+07h),0
(1) 3244/    1036 : C9                  		ret
(1) 3245/    1037 :                     
(1) 3246/    1037 :                     ; ----------------------------------------
(1) 3247/    1037 :                     
(1) 3248/    1037 :                     .chnl_ulnkcut:
(1) 3249/    1037 : DD 4E 01            		ld	c,(ix+chnl_Chip)
(1) 3250/    103A : C3 3D 10            		jp	.chnl_ulnk
(1) 3251/    103D :                     .chnl_ulnkoff:
(1) 3252/    103D :                     ; 		ld	c,0
(1) 3253/    103D :                     .chnl_ulnk:
(1) 3254/    103D : AF                  		xor	a
(1) 3255/    103E : CF                  		rst	8
(1) 3256/    103F : FD 77 00            		ld	(iy),a			; Delete link, chip and prio
(1) 3257/    1042 : FD 77 01            		ld	(iy+1),a
(1) 3258/    1045 : FD 77 02            		ld	(iy+2),a
(1) 3259/    1048 : FD 77 03            		ld	(iy+3),a
(1) 3260/    104B : FD 77 08            		ld	(iy+08h),a
(1) 3261/    104E : FD 77 09            		ld	(iy+09h),a
(1) 3262/    1051 : FD 77 0A            		ld	(iy+0Ah),a
(1) 3263/    1054 : FD 77 0B            		ld	(iy+0Bh),a
(1) 3264/    1057 : C9                  		ret
(1) 3265/    1058 :                     
(1) 3266/    1058 :                     ; 		push	iy
(1) 3267/    1058 :                     ; 		pop	hl
(1) 3268/    1058 :                     ; 		ld	bc,8-2		; Go to 08h
(1) 3269/    1058 :                     ; 		add	hl,bc
(1) 3270/    1058 :                     ; 		rst	8
(1) 3271/    1058 :                     ; 		ld	b,8/2
(1) 3272/    1058 :                     ; .clrfull:
(1) 3273/    1058 :                     ; 		ld	(hl),0		; Reset settings 08-0Bh
(1) 3274/    1058 :                     ; 		inc	hl
(1) 3275/    1058 :                     ; 		ld	(hl),0
(1) 3276/    1058 :                     ; 		inc	hl
(1) 3277/    1058 :                     ; 		rst	8
(1) 3278/    1058 :                     ; 		djnz	.clrfull
(1) 3279/    1058 :                     ; 		ret
(1) 3280/    1058 :                     
(1) 3281/    1058 :                     ; ============================================================
(1) 3282/    1058 :                     ; --------------------------------------------------------
(1) 3283/    1058 :                     ; Communication with the SCD and 32X
(1) 3284/    1058 :                     ;
(1) 3285/    1058 :                     ; SCD: Sends a level2 interrupt to Sub-CPU*
(1) 3286/    1058 :                     ; 32X: Interrupts Slave SH2 with CMD request
(1) 3287/    1058 :                     ;
(1) 3288/    1058 :                     ; *Originally meant for waiting VBlank, that's
(1) 3289/    1058 :                     ; the only one available for sending the table
(1) 3290/    1058 :                     ; --------------------------------------------------------
(1) 3291/    1058 :                     
(1) 3292/    1058 :                     ; NOTE: careful modifing this
(1) 3293/    1058 :                     
(1) 3294/    1058 :                     zmars_send:
(1) 3295/    1058 :                     	; ----------------------------------------
(1) 3296/    1058 :                     	; Send PCM table
(1) 3298/    1058 : 3A 36 00            		ld	a,(mcdBlock)	; Enable MARS requests?
(1) 3299/    105B : B7                  		or	a
(1) 3300/    105C : C2 CA 10            		jp	nz,.mcdt_blocked
(1) 3301/    105F : FD 21 0E A0         		ld	iy,8000h|200Eh	; iy - command ports
(1) 3302/    1063 : 3A 8B 1C            		ld	a,(mcdUpd)	; NEW transfer?
(1) 3303/    1066 : B7                  		or	a
(1) 3304/    1067 : CA D4 10            		jp	z,.mcdt_noupd
(1) 3305/    106A : AF                  		xor	a
(1) 3306/    106B : 32 8B 1C            		ld	(mcdUpd),a
(1) 3307/    106E : E7                  		rst	20h
(1) 3308/    106F : CD 63 11            		call	.set_combank
(1) 3309/    1072 : DD 21 C8 16         		ld	ix,pcmcom
(1) 3310/    1076 : 21 00 A0            		ld	hl,8000h|2000h
(1) 3311/    1079 :                     .wait_in:
(1) 3312/    1079 : FD 7E 00            		ld	a,(iy)		; MAIN got first?
(1) 3313/    107C : B7                  		or	a		; != 0
(1) 3314/    107D : 20 FA               		jr	nz,.wait_in
(1) 3315/    107F : FD 7E 01            		ld	a,(iy+1)	; SUB is busy?
(1) 3316/    1082 : B7                  		or	a		; 80h
(1) 3317/    1083 : FA 79 10            		jp	m,.wait_in
(1) 3318/    1086 : FD 36 00 F0         		ld	(iy),0F0h	; Set our entrance ticket.
(1) 3319/    108A : 36 81               		ld	(hl),81h	; Request IRQ
(1) 3320/    108C : CF                  		rst	8
(1) 3321/    108D :                     ; .test_irq:
(1) 3322/    108D :                     ; 		ld	a,(hl)
(1) 3323/    108D :                     ; 		and	1
(1) 3324/    108D :                     ; 		jr	nz,.test_irq
(1) 3325/    108D :                     .test_sub:
(1) 3326/    108D : FD 7E 01            		ld	a,(iy+1)	; Sub response?
(1) 3327/    1090 : FE FF               		cp	-1
(1) 3328/    1092 : 20 F9               		jr	nz,.test_sub
(1) 3329/    1094 : FD CB 00 CE         		set	1,(iy)		; "MAIN" lock
(1) 3330/    1098 : CF                  		rst	8
(1) 3331/    1099 : 11 18 00            		ld	de,18h		; ix - MAIN comm ports
(1) 3332/    109C : 19                  		add	hl,de
(1) 3333/    109D :                     	; ix - table
(1) 3334/    109D :                     	; hl - main data
(1) 3335/    109D : 0E 08               		ld	c,40h/8	; c - Packets to send
(1) 3336/    109F :                     .mcd_nextp:
(1) 3337/    109F : FD CB 01 46         		bit	0,(iy+1)	; SUB is busy?
(1) 3338/    10A3 : 20 FA               		jr	nz,.mcd_nextp
(1) 3339/    10A5 : 06 08               		ld	b,8		; 2words to write
(1) 3340/    10A7 : E5                  		push	hl
(1) 3341/    10A8 :                     .copy_bytes:
(1) 3342/    10A8 : DD 7E 00            		ld	a,(ix)
(1) 3343/    10AB : 77                  		ld	(hl),a
(1) 3344/    10AC : DD 23               		inc	ix
(1) 3345/    10AE : 23                  		inc	hl
(1) 3346/    10AF : 10 F7               		djnz	.copy_bytes
(1) 3347/    10B1 : E1                  		pop	hl
(1) 3348/    10B2 : FD CB 00 C6         		set	0,(iy)		; PASS bit
(1) 3349/    10B6 : CF                  		rst	8
(1) 3350/    10B7 :                     .wait_sub:
(1) 3351/    10B7 : FD CB 01 46         		bit	0,(iy+1)	; SUB is busy?
(1) 3352/    10BB : 28 FA               		jr	z,.wait_sub
(1) 3353/    10BD : FD CB 00 86         		res	0,(iy)		; Clear PASS bit
(1) 3354/    10C1 : CF                  		rst	8
(1) 3355/    10C2 : 0D                  		dec	c
(1) 3356/    10C3 : 20 DA               		jr	nz,.mcd_nextp
(1) 3357/    10C5 : FD 36 00 00         		ld	(iy),0		; "MAIN" unlock
(1) 3358/    10C9 : CF                  		rst	8
(1) 3359/    10CA :                     .mcdt_blocked:
(1) 3360/    10CA : 21 C8 16            		ld	hl,pcmcom
(1) 3361/    10CD : AF                  		xor	a
(1) 3362/    10CE : 06 08               		ld	b,8		; MAX PCM channels
(1) 3363/    10D0 :                     .clr_pcm:
(1) 3364/    10D0 : 77                  		ld	(hl),a
(1) 3365/    10D1 : 23                  		inc	hl
(1) 3366/    10D2 : 10 FC               		djnz	.clr_pcm
(1) 3367/    10D4 :                     .mcdt_noupd:
(1) 3376/    10D4 :                     	; ----------------------------------------
(1) 3377/    10D4 :                     	; Send PWM table
(1) 3379/    10D4 : 3A 37 00            		ld	a,(marsBlock)	; Enable MARS requests?
(1) 3380/    10D7 : B7                  		or	a
(1) 3381/    10D8 : C2 51 11            		jp	nz,.blocked_m
(1) 3382/    10DB : CF                  		rst	8
(1) 3383/    10DC : 3A 8A 1C            		ld	a,(marsUpd)	; NEW transfer?
(1) 3384/    10DF : B7                  		or	a
(1) 3385/    10E0 : 28 79               		jr	z,.pwm_exit
(1) 3386/    10E2 : AF                  		xor	a
(1) 3387/    10E3 : 32 8A 1C            		ld	(marsUpd),a
(1) 3388/    10E6 : E7                  		rst	20h
(1) 3389/    10E7 : CD 63 11            		call	.set_combank
(1) 3390/    10EA : FD 21 00 D1         		ld	iy,8000h|5100h	; iy - mars sysreg
(1) 3391/    10EE : DD 21 08 17         		ld	ix,pwmcom
(1) 3392/    10F2 :                     .wait_enter:
(1) 3393/    10F2 : 00                  		nop
(1) 3394/    10F3 : 00                  		nop
(1) 3395/    10F4 : FD 7E 2E            		ld	a,(iy+comm14)	; check if 68k got first.
(1) 3396/    10F7 : CB 7F               		bit	7,a
(1) 3397/    10F9 : 20 F7               		jr	nz,.wait_enter
(1) 3398/    10FB : E6 F0               		and	11110000b
(1) 3399/    10FD : F6 01               		or	1		; Set CMD task mode $01
(1) 3400/    10FF : FD 77 2E            		ld	(iy+comm14),a
(1) 3401/    1102 : CF                  		rst	8
(1) 3402/    1103 : E6 0F               		and	00001111b	; Did it write?
(1) 3403/    1105 : FE 01               		cp	1
(1) 3404/    1107 : 20 E9               		jr	nz,.wait_enter	; If not, retry
(1) 3405/    1109 : FD CB 2E FE         		set	7,(iy+comm14)	; LOCK bit
(1) 3406/    110D : FD CB 03 CE         		set	1,(iy+standby)	; Request Slave CMD
(1) 3407/    1111 : 00                  		nop	; wave sync AND wait using nops
(1) 3408/    1112 : 00                  		nop
(1) 3409/    1113 : 00                  		nop
(1) 3410/    1114 : 00                  		nop
(1) 3411/    1115 : 00                  		nop
(1) 3412/    1116 : CF                  		rst	8
(1) 3413/    1117 : 00                  		nop
(1) 3414/    1118 : 00                  		nop
(1) 3415/    1119 : 00                  		nop
(1) 3416/    111A : 00                  		nop
(1) 3417/    111B : 00                  		nop
(1) 3418/    111C :                     ; .wait_cmd:
(1) 3419/    111C :                     ; 		bit	1,(iy+standby)	; <-- unstable on HW
(1) 3420/    111C :                     ; 		jr	nz,.wait_cmd
(1) 3421/    111C : 0E 0E               		ld	c,14		; c - 14 words/2-byte
(1) 3422/    111E :                     .next_packet:
(1) 3423/    111E : CF                  		rst	8
(1) 3424/    111F : FD E5               		push	iy
(1) 3425/    1121 : E1                  		pop	hl
(1) 3426/    1122 : 11 28 00            		ld	de,comm8	; hl - comm8
(1) 3427/    1125 : 19                  		add	hl,de
(1) 3428/    1126 : 06 02               		ld	b,2
(1) 3429/    1128 : CF                  		rst	8
(1) 3430/    1129 :                     .next_comm:
(1) 3431/    1129 : DD 56 00            		ld	d,(ix)
(1) 3432/    112C : DD 5E 01            		ld	e,(ix+1)
(1) 3433/    112F : DD 23               		inc	ix
(1) 3434/    1131 : DD 23               		inc	ix
(1) 3435/    1133 : CF                  		rst	8
(1) 3436/    1134 : 72                  		ld	(hl),d
(1) 3437/    1135 : 23                  		inc	hl
(1) 3438/    1136 : 73                  		ld	(hl),e
(1) 3439/    1137 : 23                  		inc	hl
(1) 3440/    1138 : 10 EF               		djnz	.next_comm
(1) 3441/    113A : FD CB 2E F6         		set	6,(iy+comm14)	; PASS data bit
(1) 3442/    113E : CF                  		rst	8
(1) 3443/    113F :                     .w_pass2:
(1) 3444/    113F : 00                  		nop
(1) 3445/    1140 : FD CB 2E 76         		bit	6,(iy+comm14)	; PASS cleared?
(1) 3446/    1144 : 20 F9               		jr	nz,.w_pass2
(1) 3447/    1146 : 0D                  		dec	c
(1) 3448/    1147 : 20 D5               		jr	nz,.next_packet
(1) 3449/    1149 : FD CB 2E BE         		res	7,(iy+comm14)	; Break transfer loop
(1) 3450/    114D : FD CB 2E B6         		res	6,(iy+comm14)	; Clear PASS
(1) 3451/    1151 :                     ; Reset comm ports
(1) 3452/    1151 :                     .blocked_m:
(1) 3453/    1151 : AF                  		xor	a
(1) 3454/    1152 : 21 08 17            		ld	hl,pwmcom
(1) 3455/    1155 : 06 08               		ld	b,8
(1) 3456/    1157 :                     .clr_pwm:
(1) 3457/    1157 : 77                  		ld	(hl),a		; Reset our COM bytes
(1) 3458/    1158 : 23                  		inc	hl
(1) 3459/    1159 : 10 FC               		djnz	.clr_pwm
(1) 3460/    115B :                     .pwm_exit:
(1) 3462/    115B : CF                  		rst	8		; <-- non-EMU wave sync
(1) 3463/    115C : 06 03               		ld	b,3
(1) 3464/    115E : 10 FE               		djnz	$
(1) 3465/    1160 : 00                  		nop
(1) 3466/    1161 : 00                  		nop
(1) 3469/    1162 : C9                  		ret
(1) 3470/    1163 :                     
(1) 3471/    1163 :                     ; --------------------------------------------------------
(1) 3472/    1163 :                     ; Set bank to $A10000 area
(1) 3474/    1163 :                     .set_combank:
(1) 3475/    1163 : 21 00 60            		ld	hl,6000h
(1) 3476/    1166 : 36 00               		ld	(hl),0
(1) 3477/    1168 : 36 01               		ld	(hl),1
(1) 3478/    116A : 36 00               		ld	(hl),0
(1) 3479/    116C : 36 00               		ld	(hl),0
(1) 3480/    116E : CF                  		rst	8
(1) 3481/    116F : 36 00               		ld	(hl),0
(1) 3482/    1171 : 36 00               		ld	(hl),0
(1) 3483/    1173 : 36 01               		ld	(hl),1
(1) 3484/    1175 : 36 00               		ld	(hl),0
(1) 3485/    1177 : 36 01               		ld	(hl),1
(1) 3486/    1179 : C9                  		ret
(1) 3488/    117A :                     
(1) 3489/    117A :                     ; ====================================================================
(1) 3490/    117A :                     ; ----------------------------------------------------------------
(1) 3491/    117A :                     ; Subroutines
(1) 3492/    117A :                     ; ----------------------------------------------------------------
(1) 3493/    117A :                     
(1) 3494/    117A :                     ; --------------------------------------------------------
(1) 3495/    117A :                     ; Init sound engine
(1) 3496/    117A :                     ; --------------------------------------------------------
(1) 3497/    117A :                     
(1) 3498/    117A :                     gema_init:
(1) 3499/    117A : CD 54 14            		call	dac_off
(1) 3500/    117D : AF                  		xor	a
(1) 3501/    117E :                     ; 		ld	(marsUpd),a
(1) 3502/    117E :                     ; 		ld	(mcdUpd),a
(1) 3503/    117E : 32 30 00            		ld	(cdRamLen),a
(1) 3504/    1181 : CD 63 15            		call	gema_lastbank	; Set last bank slot BEFORE writing to PSG (32X bus problem)
(1) 3505/    1184 : 21 11 7F            		ld	hl,Zpsg_ctrl	; Silence PSG channels
(1) 3506/    1187 : 36 9F               		ld	(hl),09Fh
(1) 3507/    1189 : 36 BF               		ld	(hl),0BFh
(1) 3508/    118B : 36 DF               		ld	(hl),0DFh
(1) 3509/    118D : 36 FF               		ld	(hl),0FFh
(1) 3510/    118F : 11 0B 22            		ld	de,2208h|03h	; Set Default LFO
(1) 3511/    1192 : CD 29 14            		call	fm_send_1
(1) 3512/    1195 : 11 00 27            		ld	de,2700h	; CH3 special and timers off
(1) 3513/    1198 : CD 29 14            		call	fm_send_1
(1) 3514/    119B :                     ; 		ld	de,2800h
(1) 3515/    119B : 14                  		inc	d		; FM KEYS off
(1) 3516/    119C : CD 29 14            		call	fm_send_1
(1) 3517/    119F : 1C                  		inc	e
(1) 3518/    11A0 : CD 29 14            		call	fm_send_1
(1) 3519/    11A3 : 1C                  		inc	e
(1) 3520/    11A4 : CD 29 14            		call	fm_send_1
(1) 3521/    11A7 : 1C                  		inc	e
(1) 3522/    11A8 : 1C                  		inc	e
(1) 3523/    11A9 : CD 29 14            		call	fm_send_1
(1) 3524/    11AC : 1C                  		inc	e
(1) 3525/    11AD : CD 29 14            		call	fm_send_1
(1) 3526/    11B0 : 1C                  		inc	e
(1) 3527/    11B1 : CD 29 14            		call	fm_send_1
(1) 3528/    11B4 : FD 21 A6 16         		ld	iy,nikona_BuffList
(1) 3529/    11B8 : 0E 01               		ld	c,1			; Start at this priority
(1) 3530/    11BA :                     .setup_list:
(1) 3531/    11BA : FD 7E 00            		ld	a,(iy)
(1) 3532/    11BD : FE FF               		cp	-1
(1) 3533/    11BF : 28 24               		jr	z,.end_setup
(1) 3534/    11C1 : FD 23               		inc	iy
(1) 3535/    11C3 : 6F                  		ld	l,a
(1) 3536/    11C4 : FD 66 00            		ld	h,(iy)
(1) 3537/    11C7 : E5                  		push	hl
(1) 3538/    11C8 : DD E1               		pop	ix
(1) 3539/    11CA : DD 71 14            		ld	(ix+trk_Priority),c
(1) 3540/    11CD : DD 36 01 FF         		ld	(ix+trk_SeqId),-1	; Reset sequence ID
(1) 3541/    11D1 : FD 23               		inc	iy
(1) 3542/    11D3 :                     	; iy - src
(1) 3543/    11D3 :                     	; hl - dst
(1) 3544/    11D3 : 11 04 00            		ld	de,trk_Blocks
(1) 3545/    11D6 : 19                  		add	hl,de
(1) 3546/    11D7 : 06 06               		ld	b,MAX_BUFFNTRY-2
(1) 3547/    11D9 :                     .st_copy:
(1) 3548/    11D9 : FD 7E 00            		ld	a,(iy)
(1) 3549/    11DC : 77                  		ld	(hl),a
(1) 3550/    11DD : FD 23               		inc	iy
(1) 3551/    11DF : 23                  		inc	hl
(1) 3552/    11E0 : 10 F7               		djnz	.st_copy
(1) 3553/    11E2 : 0C                  		inc	c
(1) 3554/    11E3 : 18 D5               		jr	.setup_list
(1) 3555/    11E5 :                     .end_setup:
(1) 3556/    11E5 : C9                  		ret
(1) 3557/    11E6 :                     
(1) 3558/    11E6 :                     ; --------------------------------------------------------
(1) 3559/    11E6 :                     ; get_tick
(1) 3560/    11E6 :                     ;
(1) 3561/    11E6 :                     ; Checks if VBlank triggred a TICK
(1) 3562/    11E6 :                     ; (1/150 NTSC, 1/120 PAL)
(1) 3563/    11E6 :                     ; --------------------------------------------------------
(1) 3564/    11E6 :                     
(1) 3565/    11E6 :                     get_tick:
(1) 3566/    11E6 : F3                  		di				; Disable ints
(1) 3567/    11E7 : F5                  		push	af
(1) 3568/    11E8 : E5                  		push	hl
(1) 3569/    11E9 : 21 7F 1C            		ld	hl,tickFlag		; read last TICK flag
(1) 3570/    11EC : 7E                  		ld	a,(hl)			; non-zero value (1Fh)?
(1) 3571/    11ED : B7                  		or 	a
(1) 3572/    11EE : 28 13               		jr	z,.ctnotick
(1) 3573/    11F0 : 36 00               		ld	(hl),0			; Reset TICK flag
(1) 3574/    11F2 : 23                  		inc	hl			; Move to tickCnt
(1) 3575/    11F3 : 34                  		inc	(hl)			; and increment
(1) 3576/    11F4 : CF                  		rst	8
(1) 3577/    11F5 : D5                  		push	de
(1) 3578/    11F6 : 2A 9B 1C            		ld	hl,(sbeatAcc)		; Increment subbeats
(1) 3579/    11F9 : ED 5B 9D 1C         		ld	de,(sbeatPtck)
(1) 3580/    11FD : CF                  		rst	8
(1) 3581/    11FE : 19                  		add	hl,de
(1) 3582/    11FF : 22 9B 1C            		ld	(sbeatAcc),hl
(1) 3583/    1202 : D1                  		pop	de
(1) 3584/    1203 :                     .ctnotick:
(1) 3585/    1203 : E1                  		pop	hl
(1) 3586/    1204 : F1                  		pop	af
(1) 3587/    1205 : FB                  		ei				; Enable ints again
(1) 3588/    1206 : C9                  		ret
(1) 3589/    1207 :                     
(1) 3590/    1207 :                     ; --------------------------------------------------------
(1) 3591/    1207 :                     ; transferRom
(1) 3592/    1207 :                     ;
(1) 3593/    1207 :                     ; Transfer bytes from ROM to RAM. This also tells
(1) 3594/    1207 :                     ; to 68k that we want to access ROM
(1) 3595/    1207 :                     ;
(1) 3596/    1207 :                     ; Input:
(1) 3597/    1207 :                     ; a  - 68K Address $xx0000
(1) 3598/    1207 :                     ;  c - Byte count (size 0 NOT allowed, MAX: 0FFh)
(1) 3599/    1207 :                     ; hl - 68K Address $00xxxx
(1) 3600/    1207 :                     ; de - Destination pointer
(1) 3601/    1207 :                     ;
(1) 3602/    1207 :                     ; Uses:
(1) 3603/    1207 :                     ; b
(1) 3604/    1207 :                     ;
(1) 3605/    1207 :                     ; Notes:
(1) 3606/    1207 :                     ; call RST 20h first if transfering anything other
(1) 3607/    1207 :                     ; than sample data, just to be safe.
(1) 3608/    1207 :                     ; --------------------------------------------------------
(1) 3609/    1207 :                     
(1) 3610/    1207 :                     transferRom:
(1) 3611/    1207 : FE FF               		cp	0FFh		; <-- WORKAROUND FOR $FF0000 area
(1) 3612/    1209 : 28 43               		jr	z,.from_ram
(1) 3613/    120B : CF                  		rst	8
(1) 3614/    120C : DD E5               		push	ix
(1) 3615/    120E : DD 21 2F 00         		ld	ix,commZRomBlk	; ix - rom read/block flags
(1) 3616/    1212 : 22 99 1C            		ld	(x68ksrclsb),hl	; save hl copy
(1) 3617/    1215 : CB BC               		res	7,h
(1) 3618/    1217 : 06 00               		ld	b,0
(1) 3619/    1219 : 0B                  		dec	bc
(1) 3620/    121A : 09                  		add	hl,bc
(1) 3621/    121B : CB 7C               		bit	7,h
(1) 3622/    121D : 20 0B               		jr	nz,.double
(1) 3623/    121F : 2A 99 1C            		ld	hl,(x68ksrclsb)	; single transfer
(1) 3624/    1222 : 0C                  		inc	c
(1) 3625/    1223 : 47                  		ld	b,a
(1) 3626/    1224 : CD 6C 12            		call	.transfer
(1) 3627/    1227 : DD E1               		pop	ix
(1) 3628/    1229 : C9                  		ret
(1) 3629/    122A :                     .double:
(1) 3630/    122A : CF                  		rst	8
(1) 3631/    122B : 47                  		ld	b,a		; double transfer
(1) 3632/    122C : C5                  		push	bc
(1) 3633/    122D : E5                  		push	hl
(1) 3634/    122E : 79                  		ld	a,c
(1) 3635/    122F : 95                  		sub	a,l
(1) 3636/    1230 : 4F                  		ld	c,a
(1) 3637/    1231 : 2A 99 1C            		ld	hl,(x68ksrclsb)
(1) 3638/    1234 : CD 6C 12            		call	.transfer
(1) 3639/    1237 : E1                  		pop	hl
(1) 3640/    1238 : C1                  		pop	bc
(1) 3641/    1239 :                     ; 		rst	8
(1) 3642/    1239 : 4D                  		ld	c,l
(1) 3643/    123A : 0C                  		inc	c
(1) 3644/    123B : 3A 9A 1C            		ld	a,(x68ksrcmid)
(1) 3645/    123E : E6 80               		and	80h
(1) 3646/    1240 : C6 80               		add	a,80h
(1) 3647/    1242 : 67                  		ld	h,a
(1) 3648/    1243 : 2E 00               		ld	l,0
(1) 3649/    1245 : 30 01               		jr	nc,.x68knocarry
(1) 3650/    1247 : 04                  		inc	b
(1) 3651/    1248 :                     .x68knocarry:
(1) 3652/    1248 : CD 6C 12            		call	.transfer
(1) 3653/    124B : DD E1               		pop	ix
(1) 3654/    124D : C9                  		ret
(1) 3655/    124E :                     
(1) 3656/    124E :                     ; ------------------------------------------------
(1) 3657/    124E :                     ; WORKAROUND FOR READING FROM $FF0000 RAM
(1) 3658/    124E :                     ;
(1) 3659/    124E :                     ; On the 68K side YOU MUST CALL
(1) 3660/    124E :                     ; Sound_Update on a loop during Display.
(1) 3661/    124E :                     ; ------------------------------------------------
(1) 3662/    124E :                     
(1) 3663/    124E :                     .from_ram:
(1) 3664/    124E : ED 53 31 00         		ld	(cdRamDst),de
(1) 3665/    1252 : 22 33 00            		ld	(cdRamSrc),hl
(1) 3666/    1255 : 32 35 00            		ld	(cdRamSrcB),a
(1) 3667/    1258 : CD 63 15            		call	gema_lastbank			; ** Set bank to $FF8000 area
(1) 3668/    125B : CF                  		rst	8
(1) 3669/    125C : 79                  		ld	a,c
(1) 3670/    125D : 32 30 00            		ld	(cdRamLen),a
(1) 3671/    1260 : 21 00 FF            		ld	hl,RAM_ZCdFlag_D&07FFFh+8000h	; ** EXTERNAL WRITE TO 68K RAM **
(1) 3672/    1263 : 36 01               		ld	(hl),1				; WRITE TO RAM: Set request, 68k clears.
(1) 3673/    1265 :                     .wait:
(1) 3674/    1265 : 3A 30 00            		ld	a,(cdRamLen)			; Wait until 68K clears this
(1) 3675/    1268 : B7                  		or	a
(1) 3676/    1269 : 20 FA               		jr	nz,.wait
(1) 3677/    126B : C9                  		ret
(1) 3678/    126C :                     
(1) 3679/    126C :                     ; ------------------------------------------------
(1) 3680/    126C :                     ; b  - Source ROM bank
(1) 3681/    126C :                     ;  c - Bytes to transfer (00h is invalid)
(1) 3682/    126C :                     ; hl - Source ROM $00xxxx | 8000h
(1) 3683/    126C :                     ; de - Destination address
(1) 3684/    126C :                     ; ix - ROM-block flag
(1) 3685/    126C :                     ; ------------------------------------------------
(1) 3686/    126C :                     
(1) 3687/    126C :                     .transfer:
(1) 3688/    126C : CF                  		rst	8
(1) 3689/    126D : D5                  		push	de
(1) 3690/    126E : 11 00 60            		ld	de,6000h
(1) 3691/    1271 : 7C                  		ld	a,h
(1) 3692/    1272 : 07                  		rlca
(1) 3693/    1273 : 12                  		ld	(de),a
(1) 3694/    1274 : 78                  		ld	a,b
(1) 3695/    1275 : CF                  		rst	8
(1) 3696/    1276 : 12                  		ld	(de),a
(1) 3697/    1277 : 0F                  		rrca
(1) 3698/    1278 : 12                  		ld	(de),a
(1) 3699/    1279 : 0F                  		rrca
(1) 3700/    127A : 12                  		ld	(de),a
(1) 3701/    127B : 0F                  		rrca
(1) 3702/    127C : 12                  		ld	(de),a
(1) 3703/    127D : 0F                  		rrca
(1) 3704/    127E : CF                  		rst	8
(1) 3705/    127F : 12                  		ld	(de),a
(1) 3706/    1280 : 0F                  		rrca
(1) 3707/    1281 : 12                  		ld	(de),a
(1) 3708/    1282 : 0F                  		rrca
(1) 3709/    1283 : 12                  		ld	(de),a
(1) 3710/    1284 : 0F                  		rrca
(1) 3711/    1285 : 12                  		ld	(de),a
(1) 3712/    1286 : D1                  		pop	de
(1) 3713/    1287 : CB FC               		set	7,h
(1) 3714/    1289 : CF                  		rst	8
(1) 3715/    128A :                     
(1) 3716/    128A :                     	; Transfer ROM data in packets
(1) 3717/    128A :                     	; while playing the cache'd sample
(1) 3718/    128A :                     	; *** CRITICAL PROCESS ***
(1) 3719/    128A :                     	;
(1) 3720/    128A :                     	; pseudo-ref for ldir:
(1) 3721/    128A :                     	; ld (de),(hl)	; load (hl) to (de) directly
(1) 3722/    128A :                     	; inc de	; next de
(1) 3723/    128A :                     	; inc hl	; next hl
(1) 3724/    128A :                     	; dec bc	; decrement bc
(1) 3725/    128A :                     	;
(1) 3726/    128A : 06 00               		ld	b,0
(1) 3727/    128C : 79                  		ld	a,c		; a - Size counter
(1) 3728/    128D :                     ; 		set	1,(ix)
(1) 3729/    128D : D6 08               		sub	MAX_TRFRPZ	; Length lower than MAX_TRFRPZ?
(1) 3730/    128F : 38 14               		jr	c,.x68klast	; Process single piece only
(1) 3731/    1291 :                     .x68kloop:
(1) 3732/    1291 : CF                  		rst	8
(1) 3733/    1292 : 00                  		nop
(1) 3734/    1293 : 0E 07               		ld	c,MAX_TRFRPZ-1
(1) 3735/    1295 : DD CB 00 46         		bit	0,(ix)		; Genesis requests BUS?
(1) 3736/    1299 : C4 B3 12            		call	nz,.x68klpwt
(1) 3737/    129C : ED B0               		ldir			; (de) to (hl) until bc == 0
(1) 3738/    129E : CF                  		rst	8
(1) 3739/    129F : 00                  		nop
(1) 3740/    12A0 : D6 07               		sub	a,MAX_TRFRPZ-1
(1) 3741/    12A2 : D2 91 12            		jp	nc,.x68kloop
(1) 3742/    12A5 :                     ; last block
(1) 3743/    12A5 :                     .x68klast:
(1) 3744/    12A5 : C6 08               		add	a,MAX_TRFRPZ
(1) 3745/    12A7 : 4F                  		ld	c,a
(1) 3746/    12A8 : DD CB 00 46         		bit	0,(ix)		; Genesis requests BUS?
(1) 3747/    12AC : C4 B3 12            		call	nz,.x68klpwt
(1) 3748/    12AF : ED B0               		ldir
(1) 3749/    12B1 : CF                  		rst	8
(1) 3750/    12B2 : C9                  		ret
(1) 3751/    12B3 :                     
(1) 3752/    12B3 :                     ; Wait here until Genesis unlocks ROM
(1) 3753/    12B3 :                     .x68klpwt:
(1) 3754/    12B3 : 00                  		nop	; WAVE SYNC
(1) 3755/    12B4 : 00                  		nop
(1) 3756/    12B5 :                     .x68kpwtlp:
(1) 3757/    12B5 : CF                  		rst	8
(1) 3758/    12B6 : 00                  		nop	; WAVE SYNC
(1) 3759/    12B7 : 00                  		nop
(1) 3760/    12B8 : DD CB 00 46         		bit	0,(ix)		; 68k finished?
(1) 3761/    12BC : 20 F7               		jr	nz,.x68kpwtlp
(1) 3762/    12BE : C9                  		ret
(1) 3763/    12BF :                     
(1) 3764/    12BF :                     ; ====================================================================
(1) 3765/    12BF :                     ; ----------------------------------------------------------------
(1) 3766/    12BF :                     ; Sound chip routines
(1) 3767/    12BF :                     ; ----------------------------------------------------------------
(1) 3768/    12BF :                     
(1) 3769/    12BF :                     ; --------------------------------------------------------
(1) 3770/    12BF :                     ; chip_env
(1) 3771/    12BF :                     ;
(1) 3772/    12BF :                     ; Process the PSG
(1) 3773/    12BF :                     ; --------------------------------------------------------
(1) 3774/    12BF :                     
(1) 3775/    12BF :                     chip_env:
(1) 3777/    12BF : CD 63 15            		call	gema_lastbank		; Keep bank out of ROM before writing PSG
(1) 3779/    12C2 : FD 21 43 17         		ld	iy,psgcom+3		; Start from NOISE first
(1) 3780/    12C6 : DD 21 11 7F         		ld	ix,Zpsg_ctrl
(1) 3781/    12CA : 0E E0               		ld	c,0E0h			; c - PSG first ctrl command
(1) 3782/    12CC : 06 04               		ld	b,4			; b - 4 channels
(1) 3783/    12CE :                     .vloop:
(1) 3784/    12CE : CF                  		rst	8
(1) 3785/    12CF : FD 5E 00            		ld	e,(iy+COM)		; e - current command
(1) 3786/    12D2 : FD 36 00 00         		ld	(iy+COM),0
(1) 3787/    12D6 :                     
(1) 3788/    12D6 :                     	; ----------------------------
(1) 3789/    12D6 :                     	; bit 2 - stop sound
(1) 3790/    12D6 : CB 53               		bit	2,e
(1) 3791/    12D8 : 28 0C               		jr	z,.ckof
(1) 3792/    12DA : FD 36 04 FF         		ld	(iy+LEV),-1		; reset level
(1) 3793/    12DE : FD 36 28 01         		ld	(iy+FLG),1		; and update
(1) 3794/    12E2 : FD 36 18 00         		ld	(iy+MODE),0		; envelope off
(1) 3795/    12E6 :                     .ckof:
(1) 3796/    12E6 :                     	; ----------------------------
(1) 3797/    12E6 :                     	; bit 1 - key off
(1) 3798/    12E6 : CB 4B               		bit	1,e
(1) 3799/    12E8 : 28 0F               		jr      z,.ckon
(1) 3800/    12EA : FD 7E 18            		ld	a,(iy+MODE)		; mode 0?
(1) 3801/    12ED : B7                  		or	a
(1) 3802/    12EE : 28 09               		jr	z,.ckon
(1) 3803/    12F0 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3804/    12F4 : FD 36 18 04         		ld	(iy+MODE),100b		; set envelope mode 100b
(1) 3805/    12F8 : CF                  		rst	8
(1) 3806/    12F9 :                     .ckon:
(1) 3807/    12F9 :                     	; ----------------------------
(1) 3808/    12F9 :                     	; bit 0 - key on
(1) 3809/    12F9 : CB 43               		bit	0,e
(1) 3810/    12FB : 28 1A               		jr	z,.envproc
(1) 3811/    12FD : FD 36 04 FF         		ld	(iy+LEV),-1		; reset level
(1) 3812/    1301 : 78                  		ld	a,b
(1) 3813/    1302 : FE 04               		cp	4			; NOISE channel?
(1) 3814/    1304 : 20 08               		jr	nz,.nskip
(1) 3815/    1306 : CF                  		rst	8			; Set NOISE mode
(1) 3816/    1307 : 3A 81 1C            		ld	a,(psgHatMode)		; write hat mode only.
(1) 3817/    130A : B1                  		or	c
(1) 3818/    130B : DD 77 00            		ld	(ix),a			; WRITE PSG
(1) 3819/    130E :                     .nskip:
(1) 3820/    130E : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3821/    1312 : CF                  		rst	8
(1) 3822/    1313 : FD 36 18 01         		ld	(iy+MODE),001b		; set to attack mode
(1) 3823/    1317 :                     .nblock:
(1) 3824/    1317 :                     
(1) 3825/    1317 :                     	; ----------------------------
(1) 3826/    1317 :                     	; Process effects
(1) 3827/    1317 :                     	; ----------------------------
(1) 3828/    1317 :                     .envproc:
(1) 3829/    1317 : FD 7E 18            		ld	a,(iy+MODE)
(1) 3830/    131A : B7                  		or	a			; no modes
(1) 3831/    131B : CA A1 13            		jp	z,.vedlp
(1) 3832/    131E : FE 01               		cp 	001b			; Attack mode
(1) 3833/    1320 : 20 2C               		jr	nz,.chk2
(1) 3834/    1322 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3835/    1326 : FD 5E 24            		ld	e,(iy+ALV)
(1) 3836/    1329 : FD 7E 08            		ld	a,(iy+ATK)		; if ATK == 0, don't use
(1) 3837/    132C : B7                  		or	a
(1) 3838/    132D : 28 16               		jr	z,.atkend
(1) 3839/    132F : 57                  		ld	d,a			; c - attack rate
(1) 3840/    1330 : 7B                  		ld	a,e			; a - attack level
(1) 3841/    1331 : CF                  		rst	8
(1) 3842/    1332 : FD 5E 24            		ld	e,(iy+ALV)		; b - OLD attack level
(1) 3843/    1335 : 92                  		sub	a,d			; (attack rate) - (level)
(1) 3844/    1336 : 38 0D               		jr	c,.atkend		; if carry: already finished
(1) 3845/    1338 : 28 0B               		jr	z,.atkend		; if zero: no attack rate
(1) 3846/    133A : BB                  		cp	e			; attack rate == level?
(1) 3847/    133B : 38 08               		jr	c,.atkend
(1) 3848/    133D : 28 06               		jr	z,.atkend
(1) 3849/    133F : FD 77 04            		ld	(iy+LEV),a		; set new level
(1) 3850/    1342 : CF                  		rst	8
(1) 3851/    1343 : 18 5C               		jr	.vedlp
(1) 3852/    1345 :                     .atkend:
(1) 3853/    1345 : FD 73 04            		ld	(iy+LEV),e		; attack level = new level
(1) 3854/    1348 :                     .atkzero:
(1) 3855/    1348 : FD 36 18 02         		ld	(iy+MODE),010b		; set to decay mode
(1) 3856/    134C : 18 53               		jr	.vedlp
(1) 3857/    134E :                     .chk2:
(1) 3858/    134E :                     
(1) 3859/    134E : FE 02               		cp	010b			; Decay mode
(1) 3860/    1350 : 20 31               		jr	nz,.chk4
(1) 3861/    1352 :                     .dectmr:
(1) 3862/    1352 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3863/    1356 : FD 7E 04            		ld	a,(iy+LEV)		; a - Level
(1) 3864/    1359 : FD 5E 10            		ld	e,(iy+SLV)		; b - Sustain
(1) 3865/    135C : BB                  		cp	e
(1) 3866/    135D : 38 0D               		jr	c,.dkadd		; if carry: add
(1) 3867/    135F : 28 18               		jr	z,.dkyend		; if zero:  finish
(1) 3868/    1361 : CF                  		rst	8
(1) 3869/    1362 : FD 96 0C            		sub	(iy+DKY)		; substract decay rate
(1) 3870/    1365 : 38 12               		jr	c,.dkyend		; finish if wraped.
(1) 3871/    1367 : BB                  		cp	e			; compare level
(1) 3872/    1368 : 38 0F               		jr	c,.dkyend		; and finish
(1) 3873/    136A : 18 08               		jr	.dksav
(1) 3874/    136C :                     .dkadd:
(1) 3875/    136C : FD 86 0C            		add	a,(iy+DKY)		;  (level) + (decay rate)
(1) 3876/    136F : 38 08               		jr	c,.dkyend		; finish if wraped.
(1) 3877/    1371 : BB                  		cp	e			; compare level
(1) 3878/    1372 : 30 05               		jr	nc,.dkyend
(1) 3879/    1374 :                     .dksav:
(1) 3880/    1374 : FD 77 04            		ld	(iy+LEV),a		; save new level
(1) 3881/    1377 : 18 28               		jr	.vedlp
(1) 3882/    1379 :                     .dkyend:
(1) 3883/    1379 : CF                  		rst	8
(1) 3884/    137A : FD 73 04            		ld	(iy+LEV),e		; save last attack
(1) 3885/    137D : FD 36 18 04         		ld	(iy+MODE),100b		; and set to sustain
(1) 3886/    1381 : 18 1E               		jr	.vedlp
(1) 3887/    1383 :                     .chk4:
(1) 3888/    1383 : FE 04               		cp	100b			; Sustain phase
(1) 3889/    1385 : 20 1A               		jr	nz,.vedlp
(1) 3890/    1387 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3891/    138B : FD 7E 04            		ld	a,(iy+LEV)		; a - Level
(1) 3892/    138E : CF                  		rst	8
(1) 3893/    138F : FD 86 14            		add 	a,(iy+RRT)		; add Release Rate
(1) 3894/    1392 : 38 05               		jr	c,.killenv		; release done
(1) 3895/    1394 : FD 77 04            		ld	(iy+LEV),a		; set new Level
(1) 3896/    1397 : 18 08               		jr	.vedlp
(1) 3897/    1399 :                     .killenv:
(1) 3898/    1399 : FD 36 04 FF         		ld	(iy+LEV),-1		; Silence this channel
(1) 3899/    139D : FD 36 18 00         		ld	(iy+MODE),0		; Reset mode
(1) 3900/    13A1 :                     .vedlp:
(1) 3901/    13A1 :                     
(1) 3902/    13A1 :                     	; ----------------------------
(1) 3903/    13A1 :                     	; PSG UPDATE
(1) 3904/    13A1 :                     	; ----------------------------
(1) 3905/    13A1 : FD 7E 28            		ld	a,(iy+FLG)
(1) 3906/    13A4 : B7                  		or	a
(1) 3907/    13A5 : 28 72               		jr	z,.noupd
(1) 3908/    13A7 : FD 36 28 00         		ld	(iy+FLG),0	; Reset until next one
(1) 3909/    13AB : 59                  		ld	e,c
(1) 3910/    13AC : 3A 81 1C            		ld	a,(psgHatMode)
(1) 3911/    13AF : 57                  		ld	d,a
(1) 3912/    13B0 : E6 03               		and	011b
(1) 3913/    13B2 : FE 03               		cp	011b
(1) 3914/    13B4 : 20 1D               		jr	nz,.normal
(1) 3915/    13B6 : CF                  		rst	8
(1) 3916/    13B7 : 78                  		ld	a,b		; Channel 4?
(1) 3917/    13B8 : FE 03               		cp	3
(1) 3918/    13BA : 28 13               		jr	z,.silnc_3
(1) 3919/    13BC : FE 04               		cp	4
(1) 3920/    13BE : 20 18               		jr	nz,.do_nfreq
(1) 3921/    13C0 : 3A 81 1C            		ld	a,(psgHatMode)
(1) 3922/    13C3 : 57                  		ld	d,a
(1) 3923/    13C4 : E6 03               		and	011b
(1) 3924/    13C6 : CF                  		rst	8
(1) 3925/    13C7 : FE 03               		cp	011b
(1) 3926/    13C9 : 20 30               		jr	nz,.vonly
(1) 3927/    13CB : 1E C0               		ld	e,0C0h
(1) 3928/    13CD : 18 09               		jr	.do_nfreq
(1) 3929/    13CF :                     .silnc_3:
(1) 3930/    13CF : 3E FF               		ld	a,-1
(1) 3931/    13D1 : 18 32               		jr	.vlmuch
(1) 3932/    13D3 :                     .normal:
(1) 3933/    13D3 : 78                  		ld	a,b
(1) 3934/    13D4 : FE 04               		cp	4
(1) 3935/    13D6 : 28 23               		jr	z,.vonly
(1) 3936/    13D8 :                     .do_nfreq:
(1) 3937/    13D8 : FD 6E 1C            		ld	l,(iy+DTL)
(1) 3938/    13DB : FD 66 20            		ld	h,(iy+DTH)
(1) 3939/    13DE :                     
(1) 3940/    13DE :                     	; freq effects go here
(1) 3941/    13DE :                     	; (save e FIRST.)
(1) 3942/    13DE :                     	;	push	de
(1) 3943/    13DE :                     	;	pop	de
(1) 3944/    13DE : 7D                  		ld	a,l		; Grab LSB 4 right bits
(1) 3945/    13DF : E6 0F               		and	00001111b
(1) 3946/    13E1 : B3                  		or	e		; OR with channel set in e
(1) 3947/    13E2 : CF                  		rst	8
(1) 3948/    13E3 : DD 77 00            		ld	(ix),a		; write it
(1) 3949/    13E6 : 7D                  		ld	a,l		; Grab LSB 4 left bits
(1) 3950/    13E7 : 0F                  		rrca
(1) 3951/    13E8 : 0F                  		rrca
(1) 3952/    13E9 : 0F                  		rrca
(1) 3953/    13EA : 0F                  		rrca
(1) 3954/    13EB : E6 0F               		and	00001111b
(1) 3955/    13ED : 5F                  		ld	e,a
(1) 3956/    13EE : 7C                  		ld	a,h		; Grab MSB bits
(1) 3957/    13EF : CF                  		rst	8
(1) 3958/    13F0 : 07                  		rlca
(1) 3959/    13F1 : 07                  		rlca
(1) 3960/    13F2 : 07                  		rlca
(1) 3961/    13F3 : 07                  		rlca
(1) 3962/    13F4 : E6 30               		and	00110000b
(1) 3963/    13F6 : B3                  		or	e
(1) 3964/    13F7 : DD 77 00            		ld	(ix),a
(1) 3965/    13FA : CF                  		rst	8
(1) 3966/    13FB :                     .vonly:
(1) 3967/    13FB : FD 7E 30            		ld	a,(iy+PVOL)		; c - Level
(1) 3968/    13FE : FD 86 04            		add	a,(iy+LEV)		; Add MASTER volume
(1) 3969/    1401 : 30 02               		jr	nc,.vlmuch
(1) 3970/    1403 : 3E FF               		ld	a,-1
(1) 3971/    1405 :                     .vlmuch:
(1) 3972/    1405 : CB 3F               		srl	a			; (Level >> 4)
(1) 3973/    1407 : CB 3F               		srl	a
(1) 3974/    1409 : CB 3F               		srl	a
(1) 3975/    140B : CF                  		rst	8
(1) 3976/    140C : CB 3F               		srl	a
(1) 3977/    140E : E6 0F               		and	00001111b		; Filter volume value
(1) 3978/    1410 : B1                  		or	c			; and OR with current channel
(1) 3979/    1411 : F6 90               		or	90h			; Set volume-set mode
(1) 3981/    1413 : DD 77 00            		ld	(ix),a			; *** WRITE volume
(1) 3983/    1416 : FD 34 38            		inc	(iy+PTMR)		; Update general timer
(1) 3984/    1419 :                     .noupd:
(1) 3985/    1419 :                     	; ----------------------------
(1) 3986/    1419 : FD 2B               		dec	iy			; next COM to check (backwards)
(1) 3987/    141B : 79                  		ld	a,c
(1) 3988/    141C : CF                  		rst	8
(1) 3989/    141D : D6 20               		sub	a,20h			; next PSG (backwards)
(1) 3990/    141F : 4F                  		ld	c,a
(1) 3991/    1420 : 05                  		dec	b
(1) 3992/    1421 : C2 CE 12            		jp	nz,.vloop
(1) 3993/    1424 : C9                  		ret
(1) 3994/    1425 :                     
(1) 3995/    1425 :                     ; ---------------------------------------------
(1) 3996/    1425 :                     ; FM register writes
(1) 3997/    1425 :                     ;
(1) 3998/    1425 :                     ; Input:
(1) 3999/    1425 :                     ; d - ctrl
(1) 4000/    1425 :                     ; e - data
(1) 4001/    1425 :                     ; ---------------------------------------------
(1) 4002/    1425 :                     
(1) 4003/    1425 :                     ; c - KeyID
(1) 4004/    1425 :                     fm_autoreg:
(1) 4005/    1425 : CB 51               		bit	2,c
(1) 4006/    1427 : 20 0B               		jr	nz,fm_send_2
(1) 4007/    1429 :                     
(1) 4008/    1429 :                     ; Channels 1-3 and global registers
(1) 4009/    1429 :                     fm_send_1:
(1) 4010/    1429 : 7A                  		ld	a,d
(1) 4011/    142A : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 4012/    142D : 00                  		nop
(1) 4013/    142E : 7B                  		ld	a,e
(1) 4014/    142F : 32 01 40            		ld	(Zym_data_1),a
(1) 4015/    1432 : 00                  		nop
(1) 4016/    1433 : C9                  		ret
(1) 4017/    1434 :                     ; Channels 4-6
(1) 4018/    1434 :                     fm_send_2:
(1) 4019/    1434 : 7A                  		ld	a,d
(1) 4020/    1435 : 32 02 40            		ld	(Zym_ctrl_2),a
(1) 4021/    1438 : 00                  		nop
(1) 4022/    1439 : 7B                  		ld	a,e
(1) 4023/    143A : 32 03 40            		ld	(Zym_data_2),a
(1) 4024/    143D : 00                  		nop
(1) 4025/    143E : C9                  		ret
(1) 4026/    143F :                     
(1) 4027/    143F :                     ; --------------------------------------------------------
(1) 4028/    143F :                     ; brute-force WAVE ON/OFF playback
(1) 4029/    143F :                     ; --------------------------------------------------------
(1) 4030/    143F :                     
(1) 4031/    143F :                     dac_on:
(1) 4032/    143F : 3E 2B               		ld	a,2Bh
(1) 4033/    1441 : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 4034/    1444 : 3E 80               		ld	a,80h
(1) 4035/    1446 : 32 01 40            		ld	(Zym_data_1),a
(1) 4036/    1449 : 3E D9               		ld 	a,zopcExx
(1) 4037/    144B : 32 08 00            		ld	(dac_me),a
(1) 4038/    144E : 3E F5               		ld 	a,zopcPushAf
(1) 4039/    1450 : 32 20 00            		ld	(dac_fill),a
(1) 4040/    1453 : C9                  		ret
(1) 4041/    1454 :                     dac_off:
(1) 4042/    1454 : 3E 2B               		ld	a,2Bh
(1) 4043/    1456 : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 4044/    1459 : 3E 00               		ld	a,00h
(1) 4045/    145B : 32 01 40            		ld	(Zym_data_1),a
(1) 4046/    145E : 3E C9               		ld 	a,zopcRet
(1) 4047/    1460 : 32 08 00            		ld	(dac_me),a
(1) 4048/    1463 : 3E C9               		ld 	a,zopcRet
(1) 4049/    1465 : 32 20 00            		ld	(dac_fill),a
(1) 4050/    1468 : C9                  		ret
(1) 4051/    1469 :                     
(1) 4052/    1469 :                     ; --------------------------------------------------------
(1) 4053/    1469 :                     ; dac_play
(1) 4054/    1469 :                     ;
(1) 4055/    1469 :                     ; Plays a new sample
(1) 4056/    1469 :                     ;
(1) 4057/    1469 :                     ; NOTE:
(1) 4058/    1469 :                     ; Set wave_Flags and wave_Pitch externally
(1) 4059/    1469 :                     ; getting here.
(1) 4060/    1469 :                     ; --------------------------------------------------------
(1) 4061/    1469 :                     
(1) 4062/    1469 :                     dac_play:
(1) 4063/    1469 : F3                  		di
(1) 4064/    146A : CD 54 14            		call	dac_off
(1) 4065/    146D : D9                  		exx				; flip exx regs
(1) 4066/    146E : 01 1D 00            		ld	bc,dWaveBuff>>8		; bc - WAVFIFO MSB
(1) 4067/    1471 : ED 5B 95 1C         		ld	de,(wave_Pitch)		; de - Pitch
(1) 4068/    1475 : 21 00 00            		ld	hl,(dWaveBuff&0FFh)<<8	; hl - WAVFIFO LSB pointer (xx.00)
(1) 4069/    1478 : D9                  		exx				; move them back
(1) 4070/    1479 : 2A 8C 1C            		ld	hl,(wave_Start)		; copy Start and length
(1) 4071/    147C : 3A 8E 1C            		ld 	a,(wave_Start+2)
(1) 4072/    147F : 22 84 1C            		ld	(dDacPntr),hl
(1) 4073/    1482 : 32 86 1C            		ld	(dDacPntr+2),a
(1) 4074/    1485 : 2A 8F 1C            		ld	hl,(wave_Len)
(1) 4075/    1488 : 3A 91 1C            		ld 	a,(wave_Len+2)
(1) 4076/    148B : 22 87 1C            		ld	(dDacCntr),hl
(1) 4077/    148E : 32 89 1C            		ld	(dDacCntr+2),a
(1) 4078/    1491 : AF                  		xor	a
(1) 4079/    1492 : 32 83 1C            		ld	(dDacFifoMid),a		; Reset half-way
(1) 4080/    1495 : CD 9D 14            		call	dac_refill
(1) 4081/    1498 : CD 3F 14            		call	dac_on
(1) 4082/    149B : FB                  		ei
(1) 4083/    149C : C9                  		ret
(1) 4084/    149D :                     
(1) 4085/    149D :                     ; --------------------------------------------------------
(1) 4086/    149D :                     
(1) 4087/    149D :                     dac_refill:
(1) 4088/    149D : CF                  		rst	8
(1) 4089/    149E : C5                  		push	bc
(1) 4090/    149F : D5                  		push	de
(1) 4091/    14A0 : E5                  		push	hl
(1) 4092/    14A1 : 3A 97 1C            		ld	a,(wave_Flags)	; Already finished?
(1) 4093/    14A4 : FE 07               		cp	111b
(1) 4094/    14A6 : D2 5C 15            		jp	nc,.dacfill_end
(1) 4095/    14A9 : 3A 89 1C            		ld	a,(dDacCntr+2)	; Last bytes
(1) 4096/    14AC : 2A 87 1C            		ld	hl,(dDacCntr)
(1) 4097/    14AF : 01 80 00            		ld	bc,80h
(1) 4098/    14B2 : 37                  		scf
(1) 4099/    14B3 : 3F                  		ccf
(1) 4100/    14B4 : ED 42               		sbc	hl,bc
(1) 4101/    14B6 : DE 00               		sbc	a,0
(1) 4102/    14B8 : 32 89 1C            		ld	(dDacCntr+2),a
(1) 4103/    14BB : 22 87 1C            		ld	(dDacCntr),hl
(1) 4104/    14BE : 16 1D               		ld	d,dWaveBuff>>8
(1) 4105/    14C0 : B7                  		or	a
(1) 4106/    14C1 : FA EB 14            		jp	m,.dac_over
(1) 4107/    14C4 : 3A 83 1C            		ld	a,(dDacFifoMid)	; Update halfway value
(1) 4108/    14C7 : 5F                  		ld	e,a
(1) 4109/    14C8 : C6 80               		add 	a,80h
(1) 4110/    14CA : 32 83 1C            		ld	(dDacFifoMid),a
(1) 4111/    14CD : 2A 84 1C            		ld	hl,(dDacPntr)
(1) 4112/    14D0 : 3A 86 1C            		ld	a,(dDacPntr+2)
(1) 4113/    14D3 : CD 07 12            		call	transferRom	; *** ROM ACCESS ***
(1) 4114/    14D6 : 2A 84 1C            		ld	hl,(dDacPntr)
(1) 4115/    14D9 : 3A 86 1C            		ld	a,(dDacPntr+2)
(1) 4116/    14DC : 01 80 00            		ld	bc,80h
(1) 4117/    14DF : 09                  		add	hl,bc
(1) 4118/    14E0 : CE 00               		adc	a,0
(1) 4119/    14E2 : 22 84 1C            		ld	(dDacPntr),hl
(1) 4120/    14E5 : 32 86 1C            		ld	(dDacPntr+2),a
(1) 4121/    14E8 : C3 5F 15            		jp	.dacfill_ret
(1) 4122/    14EB :                     
(1) 4123/    14EB :                     ; NOTE: This doesn't finish at the exact END point
(1) 4124/    14EB :                     ; but the USER won't notice it.
(1) 4125/    14EB :                     
(1) 4126/    14EB :                     .dac_over:
(1) 4127/    14EB : 16 1D               		ld	d,dWaveBuff>>8
(1) 4128/    14ED : 3A 97 1C            		ld	a,(wave_Flags)	; LOOP enabled?
(1) 4129/    14F0 : E6 01               		and	001b
(1) 4130/    14F2 : C2 15 15            		jp	nz,.dacfill_loop
(1) 4131/    14F5 : 7D                  		ld	a,l
(1) 4132/    14F6 : C6 80               		add	a,80h
(1) 4133/    14F8 : 4F                  		ld	c,a
(1) 4134/    14F9 : 06 00               		ld	b,0
(1) 4135/    14FB : C5                  		push	bc
(1) 4136/    14FC : 3A 83 1C            		ld	a,(dDacFifoMid)
(1) 4137/    14FF : 5F                  		ld	e,a
(1) 4138/    1500 : C6 80               		add	a,80h
(1) 4139/    1502 : 32 83 1C            		ld	(dDacFifoMid),a
(1) 4140/    1505 : C1                  		pop	bc
(1) 4141/    1506 : 79                  		ld	a,c
(1) 4142/    1507 : B0                  		or	b
(1) 4143/    1508 : 28 52               		jr	z,.dacfill_end
(1) 4144/    150A : 2A 84 1C            		ld	hl,(dDacPntr)
(1) 4145/    150D : 3A 86 1C            		ld	a,(dDacPntr+2)
(1) 4146/    1510 : CD 07 12            		call	transferRom	; *** ROM ACCESS ***
(1) 4147/    1513 : 18 47               		jr	.dacfill_end
(1) 4148/    1515 :                     .dacfill_loop:
(1) 4149/    1515 :                     	; loop sample
(1) 4150/    1515 : C5                  		push	bc
(1) 4151/    1516 : D5                  		push	de
(1) 4152/    1517 : 3A 94 1C            		ld	a,(wave_Loop+2)
(1) 4153/    151A : 4F                  		ld	c,a
(1) 4154/    151B : ED 5B 92 1C         		ld	de,(wave_Loop)
(1) 4155/    151F : 2A 8C 1C            		ld	hl,(wave_Start)
(1) 4156/    1522 : 3A 8E 1C            		ld 	a,(wave_Start+2)
(1) 4157/    1525 : 81                  		add	a,c
(1) 4158/    1526 : 19                  		add	hl,de
(1) 4159/    1527 : CE 00               		adc	a,0
(1) 4160/    1529 : 22 84 1C            		ld	(dDacPntr),hl
(1) 4161/    152C : 32 86 1C            		ld	(dDacPntr+2),a
(1) 4162/    152F : 2A 8F 1C            		ld	hl,(wave_Len)
(1) 4163/    1532 : 3A 91 1C            		ld 	a,(wave_Len+2)
(1) 4164/    1535 : 91                  		sub	a,c
(1) 4165/    1536 : 37                  		scf
(1) 4166/    1537 : 3F                  		ccf
(1) 4167/    1538 : ED 52               		sbc	hl,de
(1) 4168/    153A : DE 00               		sbc	a,0
(1) 4169/    153C : 22 87 1C            		ld	(dDacCntr),hl
(1) 4170/    153F : 32 89 1C            		ld	(dDacCntr+2),a
(1) 4171/    1542 : D1                  		pop	de
(1) 4172/    1543 : C1                  		pop	bc
(1) 4173/    1544 : 78                  		ld	a,b
(1) 4174/    1545 : B1                  		or	c
(1) 4175/    1546 : 28 17               		jr	z,.dacfill_ret
(1) 4176/    1548 : 3A 83 1C            		ld	a,(dDacFifoMid)
(1) 4177/    154B : 5F                  		ld	e,a
(1) 4178/    154C : C6 80               		add	a,80h
(1) 4179/    154E : 32 83 1C            		ld	(dDacFifoMid),a
(1) 4180/    1551 : 2A 84 1C            		ld	hl,(dDacPntr)
(1) 4181/    1554 : 3A 86 1C            		ld	a,(dDacPntr+2)
(1) 4182/    1557 : CD 07 12            		call	transferRom	; *** ROM ACCESS ***
(1) 4183/    155A : 18 03               		jr	.dacfill_ret
(1) 4184/    155C :                     .dacfill_end:
(1) 4185/    155C : CD 54 14            		call	dac_off		; DAC finished
(1) 4186/    155F :                     .dacfill_ret:
(1) 4187/    155F : E1                  		pop	hl
(1) 4188/    1560 : D1                  		pop	de
(1) 4189/    1561 : C1                  		pop	bc
(1) 4190/    1562 : C9                  		ret
(1) 4191/    1563 :                     
(1) 4192/    1563 :                     ; ----------------------------------------------------------------
(1) 4193/    1563 :                     ; Two purposes:
(1) 4194/    1563 :                     ;
(1) 4195/    1563 :                     ; Set the BANK to the very last part of memory for the
(1) 4196/    1563 :                     ; transferRom to read from RAM
(1) 4197/    1563 :                     ;
(1) 4198/    1563 :                     ; On 32X this sets the bank out of the ROM-reading areas due
(1) 4199/    1563 :                     ; to a conflict with the PSG
(1) 4200/    1563 :                     ;
(1) 4201/    1563 :                     ; Uses:
(1) 4202/    1563 :                     ; hl,b
(1) 4203/    1563 :                     ; ----------------------------------------------------------------
(1) 4204/    1563 :                     
(1) 4205/    1563 :                     gema_lastbank:
(1) 4206/    1563 : 21 00 60            		ld	hl,6000h
(1) 4207/    1566 : 06 09               		ld	b,9		; 9 bits
(1) 4208/    1568 :                     .write:
(1) 4209/    1568 : 36 01               		ld	(hl),1
(1) 4210/    156A : 10 FC               		djnz	.write
(1) 4211/    156C : CF                  		rst	8
(1) 4212/    156D : C9                  		ret
(1) 4213/    156E :                     
(1) 4214/    156E :                     ; ====================================================================
(1) 4215/    156E :                     ; ----------------------------------------------------------------
(1) 4216/    156E :                     ; Tables
(1) 4217/    156E :                     ; ----------------------------------------------------------------
(1) 4218/    156E :                     
(1) 4219/    156E : 84 02               fmFreq_List:	dw 644
(1) 4220/    1570 : A9 02               		dw 681
(1) 4221/    1572 : D2 02               		dw 722
(1) 4222/    1574 : FD 02               		dw 765
(1) 4223/    1576 : 2A 03               		dw 810
(1) 4224/    1578 : 5A 03               		dw 858
(1) 4225/    157A : 8E 03               		dw 910
(1) 4226/    157C : C4 03               		dw 964
(1) 4227/    157E : FD 03               		dw 1021
(1) 4228/    1580 : 39 04               		dw 1081
(1) 4229/    1582 : 7A 04               		dw 1146
(1) 4230/    1584 : BE 04               		dw 1214
(1) 4231/    1586 :                     
(1) 4232/    1586 :                     ; ----------------------------------------
(1) 4233/    1586 :                     ; DAC and PWM
(1) 4234/    1586 :                     ; ----------------------------------------
(1) 4235/    1586 :                     
(1) 4236/    1586 :                     psgFreq_List:
(1) 4237/    1586 :                     ; 	dw    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1	; x-0
(1) 4238/    1586 :                     ; 	dw    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1	; x-1
(1) 4239/    1586 :                     ; 	dw    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1	; x-2
(1) 4240/    1586 : FF FF FF FF FF FF   	dw    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,03F8h,03BFh,0389h	; x-3
             158C : FF FF FF FF FF FF 
             1592 : FF FF FF FF FF FF 
             1598 : F8 03 BF 03 89 03 
(1) 4241/    159E : 56 03 26 03 F9 02   	dw 0356h,0326h,02F9h,02CEh,02A5h,0280h,025Ch,023Ah,021Ah,01FBh,01DFh,01C4h	; x-4
             15A4 : CE 02 A5 02 80 02 
             15AA : 5C 02 3A 02 1A 02 
             15B0 : FB 01 DF 01 C4 01 
(1) 4242/    15B6 : AB 01 93 01 7D 01   	dw 01ABh,0193h,017Dh,0167h,0153h,0140h,012Eh,011Dh,010Dh,00FEh,00EFh,00E2h	; x-5
             15BC : 67 01 53 01 40 01 
             15C2 : 2E 01 1D 01 0D 01 
             15C8 : FE 00 EF 00 E2 00 
(1) 4243/    15CE : D6 00 C9 00 BE 00   	dw 00D6h,00C9h,00BEh,00B4h,00A9h,00A0h,0097h,008Fh,0087h,007Fh,0078h,0071h	; x-6
             15D4 : B4 00 A9 00 A0 00 
             15DA : 97 00 8F 00 87 00 
             15E0 : 7F 00 78 00 71 00 
(1) 4244/    15E6 :                     ; 	dw 006Bh,0065h,005Fh,005Ah,0055h,0050h,004Bh,0047h,0043h,0040h,003Ch,0039h	; x-7
(1) 4245/    15E6 :                     ; 	dw 0036h,0033h,0030h,002Dh,002Bh,0028h,0026h,0024h,0022h,0020h,001Fh,001Dh	; x-8 *
(1) 4246/    15E6 :                     ; 	dw 001Bh,001Ah,0018h,0017h,0016h,0015h,0013h,0012h,0011h,0010h,0009h,0008h	; x-9 *
(1) 4247/    15E6 :                     
(1) 4248/    15E6 :                     
(1) 4249/    15E6 :                     ; ----------------------------------------
(1) 4250/    15E6 :                     ; DAC and PWM shared list
(1) 4251/    15E6 :                     ; ----------------------------------------
(1) 4252/    15E6 :                     
(1) 4253/    15E6 :                     ; TODO
(1) 4254/    15E6 :                     wavFreq_List:
(1) 4255/    15E6 :                     	;   C     C#    D     D#    E     F     F#    G     G#    A     A#    B
(1) 4256/    15E6 :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-0
(1) 4257/    15E6 :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-1
(1) 4258/    15E6 :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0036h,003Bh	; x-2
(1) 4259/    15E6 : 40 00 44 00 48 00   	dw 0040h,0044h,0048h,004Ch,0052h,0056h,005Ah,0060h,0066h,006Ch,0071h,0079h	; x-3 4000 ok
             15EC : 4C 00 52 00 56 00 
             15F2 : 5A 00 60 00 66 00 
             15F8 : 6C 00 71 00 79 00 
(1) 4260/    15FE : 80 00 88 00 90 00   	dw 0080h,0088h,0090h,0098h,00A2h,00ACh,00B4h,00C2h,00CCh,00D7h,00E4h,00F0h	; x-4 8000 ok
             1604 : 98 00 A2 00 AC 00 
             160A : B4 00 C2 00 CC 00 
             1610 : D7 00 E4 00 F0 00 
(1) 4261/    1616 : 00 01 10 01 20 01   	dw 0100h,0110h,0120h,012Eh,0147h,015Ah,016Ah,017Fh,0191h,01ACh,01C2h,01E0h	; x-5 16000 ok
             161C : 2E 01 47 01 5A 01 
             1622 : 6A 01 7F 01 91 01 
             1628 : AC 01 C2 01 E0 01 
(1) 4262/    162E : F8 01 10 02 40 02   	dw 01F8h,0210h,0240h,0260h,0280h,02A0h,02D0h,02F8h,0320h,0350h,0380h,03C0h	; x-6 32000 UNTESTED
             1634 : 60 02 80 02 A0 02 
             163A : D0 02 F8 02 20 03 
             1640 : 50 03 80 03 C0 03 
(1) 4263/    1646 :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-7
(1) 4264/    1646 :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-8
(1) 4265/    1646 :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-9
(1) 4266/    1646 :                     
(1) 4267/    1646 :                     ; ----------------------------------------
(1) 4268/    1646 :                     ; SegaCD PCM
(1) 4269/    1646 :                     ; ----------------------------------------
(1) 4270/    1646 :                     wavFreq_CdPcm:
(1) 4271/    1646 :                     	;     C     C#     D      D#     E      F      F#     G      G#     A      A#     B
(1) 4272/    1646 :                     ; 	dw  0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h	; x-0
(1) 4273/    1646 :                     ; 	dw  0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h	; x-1
(1) 4274/    1646 : F8 00 08 01 1C 01   	dw  00F8h, 0108h, 011Ch, 0128h, 013Ch, 014Ch, 0160h, 017Ch, 0188h, 01A0h, 01BCh, 01DCh	; x-2  4000 ok
             164C : 28 01 3C 01 4C 01 
             1652 : 60 01 7C 01 88 01 
             1658 : A0 01 BC 01 DC 01 
(1) 4275/    165E : F8 01 14 02 3C 02   	dw  01F8h, 0214h, 023Ch, 0258h, 027Ch, 02A0h, 02C8h, 02F4h, 031Ch, 0348h, 037Ch, 03B0h	; x-3  8000 ok
             1664 : 58 02 7C 02 A0 02 
             166A : C8 02 F4 02 1C 03 
             1670 : 48 03 7C 03 B0 03 
(1) 4276/    1676 : F0 03 24 04 68 04   	dw  03F0h, 0424h, 0468h, 04A8h, 04ECh, 0540h, 0590h, 05E4h, 063Ch, 0698h, 0704h, 0760h	; x-4 16000 ok
             167C : A8 04 EC 04 40 05 
             1682 : 90 05 E4 05 3C 06 
             1688 : 98 06 04 07 60 07 
(1) 4277/    168E : DC 07 48 08 D4 08   	dw  07DCh, 0848h, 08D4h, 0960h, 09F0h, 0A64h, 0B04h, 0BAAh, 0C60h, 0D18h, 0DE4h, 0EB8h	; x-5 32000 ok
             1694 : 60 09 F0 09 64 0A 
             169A : 04 0B AA 0B 60 0C 
             16A0 : 18 0D E4 0D B8 0E 
(1) 4278/    16A6 :                     ; 	dw  0FB0h, 1074h, 1184h, 1280h, 139Ch, 14C8h, 1624h, 174Ch, 18DCh, 1A38h, 1BE0h, 1D94h	; x-6 64000 unstable
(1) 4279/    16A6 :                     ; 	dw  1F64h, 20FCh, 2330h, 2524h, 2750h, 29B4h, 2C63h, 2F63h, 31E0h, 347Bh, 377Bh, 3B41h	; x-7 128000 bad
(1) 4280/    16A6 :                     ; 	dw  3EE8h, 4206h, 4684h, 4A5Ah, 4EB5h, 5379h, 58E1h, 5DE0h, 63C0h, 68FFh, 6EFFh, 783Ch	; x-8 256000 bad
(1) 4281/    16A6 :                     ; 	dw  7FC2h, 83FCh, 8D14h, 9780h,0AA5Dh,0B1F9h,   -1 ,   -1 ,   -1 ,   -1 ,   -1 ,   -1 	; x-9 bad
(1) 4282/    16A6 :                     
(1) 4283/    16A6 :                     ; ====================================================================
(1) 4284/    16A6 :                     ; ----------------------------------------------------------------
(1) 4285/    16A6 :                     ; MASTER buffers list
(1) 4286/    16A6 :                     ;
(1) 4287/    16A6 :                     ; dw track_buffer
(1) 4288/    16A6 :                     ; dw channel_list,block_cache,header_cache,track_cache
(1) 4289/    16A6 :                     ;
(1) 4290/    16A6 :                     ; (track_cache: 1BIT SIZES ONLY, ALIGNED)
(1) 4291/    16A6 :                     ; ----------------------------------------------------------------
(1) 4292/    16A6 :                     
(1) 4293/    16A6 :                     nikona_BuffList:
(1) 4294/    16A6 : 0C 19 EC 18 6C 18   	dw trkBuff_0,trkBlks_0,trkHdrs_0,trkCach_0
             16AC : 00 1F             
(1) 4295/    16AE : 4C 19 F4 18 8C 18   	dw trkBuff_1,trkBlks_1,trkHdrs_1,trkCach_1
             16B4 : 20 1F             
(1) 4296/    16B6 : 8C 19 FC 18 AC 18   	dw trkBuff_2,trkBlks_2,trkHdrs_2,trkCach_2
             16BC : 40 1F             
(1) 4297/    16BE : CC 19 04 19 CC 18   	dw trkBuff_3,trkBlks_3,trkHdrs_3,trkCach_3
             16C4 : 60 1F             
(1) 4298/    16C6 :                     nikona_BuffList_e:
(1) 4299/    16C6 : FF FF               	dw -1	; ENDOFLIST
(1) 4300/    16C8 :                     
(1) 4301/    16C8 :                     ; ====================================================================
(1) 4302/    16C8 :                     ; ----------------------------------------------------------------
(1) 4303/    16C8 :                     ; Buffer section
(1) 4304/    16C8 :                     ; ----------------------------------------------------------------
(1) 4305/    16C8 :                     
(1) 4306/    16C8 : 00 00 00 00 00 00   pcmcom:	db 00h,00h,00h,00h,00h,00h,00h,00h	; 0 - Playback bits: %0000PCOK /Pitchbend/keyCut/keyOff/KeyOn
             16CE : 00 00             
(1) 4307/    16D0 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 8 - Pitch MSB
             16D6 : 00 00             
(1) 4308/    16D8 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 16 - Pitch LSB
             16DE : 00 00             
(1) 4309/    16E0 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 24 - Volume
             16E6 : 00 00             
(1) 4310/    16E8 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 32 - Panning %RRRRLLLL
             16EE : 00 00             
(1) 4311/    16F0 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 40 - LoopEnable bit | 24-bit sample location in Sub-CPU area
             16F6 : 00 00             
(1) 4312/    16F8 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 48
             16FE : 00 00             
(1) 4313/    1700 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 56
             1706 : 00 00             
(1) 4314/    1708 :                     
(1) 4315/    1708 : 00 00 00 00 00 00   pwmcom:	db 00h,00h,00h,00h,00h,00h,00h,00h	; 0 - Playback bits: %0000PCOK Pitchbend/keyCut/keyOff/KeyOn
             170E : 00 00             
(1) 4316/    1710 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 8 - Volume | Pitch MSB
             1716 : 00 00             
(1) 4317/    1718 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 16 - Pitch LSB
             171E : 00 00             
(1) 4318/    1720 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 24 - Flags+MSB bits of sample %SlLRxxxx Stereo/Loop/Left/Right
             1726 : 00 00             
(1) 4319/    1728 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 32 -
             172E : 00 00             
(1) 4320/    1730 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h
             1736 : 00 00             
(1) 4321/    1738 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h
             173E : 00 00             
(1) 4322/    1740 :                     
(1) 4323/    1740 : 00 00 00 00         psgcom:	db 00h,00h,00h,00h	;  0 - command 1 = key on, 2 = key off, 4 = stop snd
(1) 4324/    1744 : FF FF FF FF         	db -1, -1, -1, -1	;  4 - output level attenuation (%llll.0000, -1 = silent)
(1) 4325/    1748 : 00 00 00 00         	db 00h,00h,00h,00h	;  8 - attack rate (START)
(1) 4326/    174C : 00 00 00 00         	db 00h,00h,00h,00h	; 12 - decay rate
(1) 4327/    1750 : 00 00 00 00         	db 00h,00h,00h,00h	; 16 - sustain level attenuation (MAXIMUM)
(1) 4328/    1754 : 00 00 00 00         	db 00h,00h,00h,00h	; 20 - release rate
(1) 4329/    1758 : 00 00 00 00         	db 00h,00h,00h,00h	; 24 - envelope mode 0 = off, 1 = attack, 2 = decay, 3 = sustain
(1) 4330/    175C : 00 00 00 00         	db 00h,00h,00h,00h	; 28 - freq bottom 4 bits
(1) 4331/    1760 : 00 00 00 00         	db 00h,00h,00h,00h	; 32 - freq upper 6 bits
(1) 4332/    1764 : 00 00 00 00         	db 00h,00h,00h,00h	; 36 - attack level attenuation
(1) 4333/    1768 : 00 00 00 00         	db 00h,00h,00h,00h	; 40 - flags to indicate hardware should be updated
(1) 4334/    176C : 00 00 00 00         	db 00h,00h,00h,00h	; 44 - timer for sustain
(1) 4335/    1770 : 00 00 00 00         	db 00h,00h,00h,00h	; 48 - MAX Volume
(1) 4336/    1774 : 00 00 00 00         	db 00h,00h,00h,00h	; 52 - Vibrato value
(1) 4337/    1778 : 00 00 00 00         	db 00h,00h,00h,00h	; 56 - General timer
(1) 4338/    177C :                     
(1) 4339/    177C :                     ; --------------------------------------------------------
(1) 4340/    177C :                     ; FM instrument storage
(1) 4341/    177C :                     fmcach_1	ds 28h
(1) 4342/    17A4 :                     fmcach_2	ds 28h
(1) 4343/    17CC :                     fmcach_3	ds 28h
(1) 4344/    17F4 :                     fmcach_4	ds 28h
(1) 4345/    181C :                     fmcach_5	ds 28h
(1) 4346/    1844 :                     fmcach_6	ds 28h
(1) 4347/    186C :                     
(1) 4348/    186C :                     ; --------------------------------------------------------
(1) 4349/    186C :                     ; * USER customizable section *
(1) 4350/    186C :                     ;
(1) 4351/    186C :                     ; trkCach's MUST BE 00h ALIGNED.
(1) 4352/    186C :                     ; --------------------------------------------------------
(1) 4353/    186C :                     
(1) 4354/    186C :                     trkHdrs_0	ds 8*4			; dw point,rowcntr
(1) 4355/    188C :                     trkHdrs_1	ds 8*4
(1) 4356/    18AC :                     trkHdrs_2	ds 8*4
(1) 4357/    18CC :                     trkHdrs_3	ds 8*4
(1) 4358/    18EC :                     trkBlks_0	ds 8
(1) 4359/    18F4 :                     trkBlks_1	ds 8
(1) 4360/    18FC :                     trkBlks_2	ds 8
(1) 4361/    1904 :                     trkBlks_3	ds 8
(1) 4362/    190C :                     trkBuff_0	ds trk_ChnIndx+MAX_TRKINDX
(1) 4363/    194C :                     trkBuff_1	ds trk_ChnIndx+MAX_TRKINDX
(1) 4364/    198C :                     trkBuff_2	ds trk_ChnIndx+MAX_TRKINDX
(1) 4365/    19CC :                     trkBuff_3	ds trk_ChnIndx+MAX_TRKINDX
(1) 4366/    1A0C :                     
(1) 4367/    1A0C :                     ; ====================================================================
(1) 4368/    1A0C :                     ; --------------------------------------------------------
(1) 4369/    1A0C :                     ; Channel table struct:
(1) 4370/    1A0C :                     ; 00  - DIRECT Linked channel from trkChnls
(1) 4371/    1A0C :                     ; 02  - 00h-7Fh: Priority level or 80h+ Silence request (chip ID)
(1) 4372/    1A0C :                     ; 03  - MASTER Volume for this channel
(1) 4373/    1A0C :                     ; 04  - Chip index (YM2612: KEY index)
(1) 4374/    1A0C :                     ; 05  - FREE
(1) 4375/    1A0C :                     ; 06  - Frequency list index (YM2612: %oooiiiii oct|index)
(1) 4376/    1A0C :                     ; 07  - Pitchbend add/sub
(1) 4377/    1A0C :                     ; 08  - Current volume: 00-max
(1) 4378/    1A0C :                     ; 09  - Stored effect setting
(1) 4379/    1A0C :                     ; 0A  - FREE
(1) 4380/    1A0C :                     ; 0B  - FREE
(1) 4381/    1A0C :                     ; 0C+ - Misc. settings for the current chip
(1) 4382/    1A0C :                     ; 10+ - Intrument data
(1) 4383/    1A0C :                     ;
(1) 4384/    1A0C :                     ; PSG   80h
(1) 4385/    1A0C :                     ; PSGN  90h
(1) 4386/    1A0C :                     ; FM   0A0h
(1) 4387/    1A0C :                     ; FM3  0B0h
(1) 4388/    1A0C :                     ; DAC  0C0h
(1) 4389/    1A0C :                     ; PCM  0D0h
(1) 4390/    1A0C :                     ; PWM  0E0h
(1) 4391/    1A0C :                     ; --------------------------------------------------------
(1) 4392/    1A0C :                     
(1) 4393/    1A00 :                     		org 1A00h			; <-- MUST BE 00h ALIGNED
(1) 4394/    1A00 : 10 00               tblList:	dw tblPSG-tblList		;  80h
(1) 4395/    1A02 : 5A 80               		dw tblPSGN-tblList|8000h	;  90h *
(1) 4396/    1A04 : 72 00               		dw tblFM-tblList		; 0A0h
(1) 4397/    1A06 : D2 80               		dw tblFM3-tblList|8000h		; 0B0h *
(1) 4398/    1A08 : EA 80               		dw tblFM6-tblList|8000h		; 0C0h *
(1) 4399/    1A0A : 04 01               		dw tblPCM-tblList		; 0D0h
(1) 4400/    1A0C : C6 01               		dw tblPWM-tblList		; 0E0h
(1) 4401/    1A0E : 00 00               		dw 0
(1) 4402/    1A10 : 00 00 00 00 00 00   tblPSG:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             1A16 : 00 00             
(1) 4403/    1A18 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A1E : 00 00             
(1) 4404/    1A20 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A26 : 00 00             
(1) 4405/    1A28 : 00 00 00 00 01 00   		db 00h,00h,00h,00h,01h,00h,00h,00h	; Channel 2
             1A2E : 00 00             
(1) 4406/    1A30 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A36 : 00 00             
(1) 4407/    1A38 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A3E : 00 00             
(1) 4408/    1A40 : 00 00 00 00 02 00   		db 00h,00h,00h,00h,02h,00h,00h,00h	; Channel 3
             1A46 : 00 00             
(1) 4409/    1A48 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A4E : 00 00             
(1) 4410/    1A50 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A56 : 00 00             
(1) 4411/    1A58 : FF FF               		dw -1	; end-of-list
(1) 4412/    1A5A : 00 00 00 00 03 00   tblPSGN:	db 00h,00h,00h,00h,03h,00h,00h,03h	; Noise
             1A60 : 00 03             
(1) 4413/    1A62 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A68 : 00 00             
(1) 4414/    1A6A : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A70 : 00 00             
(1) 4415/    1A72 : 00 00 00 00 00 00   tblFM:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             1A78 : 00 00             
(1) 4416/    1A7A : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A80 : 00 00             
(1) 4417/    1A82 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A88 : 00 00             
(1) 4418/    1A8A : 00 00 00 00 01 00   		db 00h,00h,00h,00h,01h,00h,00h,00h	; Channel 2
             1A90 : 00 00             
(1) 4419/    1A92 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A98 : 00 00             
(1) 4420/    1A9A : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1AA0 : 00 00             
(1) 4421/    1AA2 : 00 00 00 00 04 00   		db 00h,00h,00h,00h,04h,00h,00h,00h	; Channel 4 <--
             1AA8 : 00 00             
(1) 4422/    1AAA : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1AB0 : 00 00             
(1) 4423/    1AB2 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1AB8 : 00 00             
(1) 4424/    1ABA : 00 00 00 00 05 00   		db 00h,00h,00h,00h,05h,00h,00h,00h	; Channel 5
             1AC0 : 00 00             
(1) 4425/    1AC2 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1AC8 : 00 00             
(1) 4426/    1ACA : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1AD0 : 00 00             
(1) 4427/    1AD2 : 00 00 00 00 02 00   tblFM3:		db 00h,00h,00h,00h,02h,00h,00h,00h	; Channel 3 <--
             1AD8 : 00 00             
(1) 4428/    1ADA : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1AE0 : 00 00             
(1) 4429/    1AE2 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1AE8 : 00 00             
(1) 4430/    1AEA : 00 00 00 00 06 00   tblFM6:		db 00h,00h,00h,00h,06h,00h,00h,00h	; Channel 6 <--
             1AF0 : 00 00             
(1) 4431/    1AF2 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1AF8 : 00 00             
(1) 4432/    1AFA : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B00 : 00 00             
(1) 4433/    1B02 : FF FF               		dw -1	; end-of-list
(1) 4434/    1B04 : 00 00 00 00 00 00   tblPCM:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             1B0A : 00 00             
(1) 4435/    1B0C : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B12 : 00 00             
(1) 4436/    1B14 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B1A : 00 00             
(1) 4437/    1B1C : 00 00 00 00 01 00   		db 00h,00h,00h,00h,01h,00h,00h,00h	; Channel 2
             1B22 : 00 00             
(1) 4438/    1B24 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B2A : 00 00             
(1) 4439/    1B2C : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B32 : 00 00             
(1) 4440/    1B34 : 00 00 00 00 02 00   		db 00h,00h,00h,00h,02h,00h,00h,00h	; Channel 3
             1B3A : 00 00             
(1) 4441/    1B3C : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B42 : 00 00             
(1) 4442/    1B44 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B4A : 00 00             
(1) 4443/    1B4C : 00 00 00 00 03 00   		db 00h,00h,00h,00h,03h,00h,00h,00h	; Channel 4
             1B52 : 00 00             
(1) 4444/    1B54 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B5A : 00 00             
(1) 4445/    1B5C : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B62 : 00 00             
(1) 4446/    1B64 : 00 00 00 00 04 00   		db 00h,00h,00h,00h,04h,00h,00h,00h	; Channel 5
             1B6A : 00 00             
(1) 4447/    1B6C : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B72 : 00 00             
(1) 4448/    1B74 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B7A : 00 00             
(1) 4449/    1B7C : 00 00 00 00 05 00   		db 00h,00h,00h,00h,05h,00h,00h,00h	; Channel 6
             1B82 : 00 00             
(1) 4450/    1B84 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B8A : 00 00             
(1) 4451/    1B8C : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B92 : 00 00             
(1) 4452/    1B94 : 00 00 00 00 06 00   		db 00h,00h,00h,00h,06h,00h,00h,00h	; Channel 7
             1B9A : 00 00             
(1) 4453/    1B9C : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BA2 : 00 00             
(1) 4454/    1BA4 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BAA : 00 00             
(1) 4455/    1BAC : 00 00 00 00 07 00   		db 00h,00h,00h,00h,07h,00h,00h,00h	; Channel 7
             1BB2 : 00 00             
(1) 4456/    1BB4 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BBA : 00 00             
(1) 4457/    1BBC : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BC2 : 00 00             
(1) 4458/    1BC4 : FF FF               		dw -1	; end-of-list
(1) 4459/    1BC6 : 00 00 00 00 00 00   tblPWM:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             1BCC : 00 00             
(1) 4460/    1BCE : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BD4 : 00 00             
(1) 4461/    1BD6 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BDC : 00 00             
(1) 4462/    1BDE : 00 00 00 00 01 00   		db 00h,00h,00h,00h,01h,00h,00h,00h	; Channel 2
             1BE4 : 00 00             
(1) 4463/    1BE6 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BEC : 00 00             
(1) 4464/    1BEE : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BF4 : 00 00             
(1) 4465/    1BF6 : 00 00 00 00 02 00   		db 00h,00h,00h,00h,02h,00h,00h,00h	; Channel 3
             1BFC : 00 00             
(1) 4466/    1BFE : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C04 : 00 00             
(1) 4467/    1C06 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C0C : 00 00             
(1) 4468/    1C0E : 00 00 00 00 03 00   		db 00h,00h,00h,00h,03h,00h,00h,00h	; Channel 4
             1C14 : 00 00             
(1) 4469/    1C16 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C1C : 00 00             
(1) 4470/    1C1E : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C24 : 00 00             
(1) 4471/    1C26 : 00 00 00 00 04 00   		db 00h,00h,00h,00h,04h,00h,00h,00h	; Channel 5
             1C2C : 00 00             
(1) 4472/    1C2E : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C34 : 00 00             
(1) 4473/    1C36 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C3C : 00 00             
(1) 4474/    1C3E : 00 00 00 00 05 00   		db 00h,00h,00h,00h,05h,00h,00h,00h	; Channel 6
             1C44 : 00 00             
(1) 4475/    1C46 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C4C : 00 00             
(1) 4476/    1C4E : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C54 : 00 00             
(1) 4477/    1C56 : 00 00 00 00 06 00   		db 00h,00h,00h,00h,06h,00h,00h,00h	; Channel 7
             1C5C : 00 00             
(1) 4478/    1C5E : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C64 : 00 00             
(1) 4479/    1C66 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C6C : 00 00             
(1) 4480/    1C6E : FF FF               		dw -1	; end-of-list
(1) 4481/    1C70 :                     
(1) 4482/    1C70 :                     ; ----------------------------------------------------------------
(1) 4483/    1C70 :                     
(1) 4484/    1C70 : 7C 17               fmcach_list:	dw fmcach_1
(1) 4485/    1C72 : A4 17               		dw fmcach_2
(1) 4486/    1C74 : CC 17               		dw fmcach_3
(1) 4487/    1C76 : 00 00               		dw 0		; <-- skipped
(1) 4488/    1C78 : F4 17               		dw fmcach_4
(1) 4489/    1C7A : 1C 18               		dw fmcach_5
(1) 4490/    1C7C : 44 18               		dw fmcach_6
(1) 4491/    1C7E :                     
(1) 4492/    1C7E :                     ; ----------------------------------------------------------------
(1) 4493/    1C7E :                     ; Variables to fill this space
(1) 4494/    1C7E : 00                  tickSpSet	db 0		; **
(1) 4495/    1C7F : 00                  tickFlag	db 0		; Tick flag from VBlank
(1) 4496/    1C80 : 00                  tickCnt		db 0		; ** Tick counter (PUT THIS AFTER tickFlag)
(1) 4497/    1C81 : 00                  psgHatMode	db 0		; Current PSGN mode
(1) 4498/    1C82 : 00                  fmSpecial	db 0		; copy of FM3 enable bit
(1) 4499/    1C83 : 00                  dDacFifoMid	db 0		; WAVE play halfway refill flag (00h/80h)
(1) 4500/    1C84 : 00 00 00            dDacPntr	db 0,0,0	; WAVE play current ROM position
(1) 4501/    1C87 : 00 00 00            dDacCntr	db 0,0,0	; WAVE play length counter
(1) 4502/    1C8A : 00                  marsUpd		db 0		; Flag to request a PWM transfer
(1) 4503/    1C8B : 00                  mcdUpd		db 0		; Flag to request a PCM transfer
(1) 4504/    1C8C : 00 00               wave_Start	dw 0		; START: 68k 24-bit pointer
(1) 4505/    1C8E : 00                  		db 0
(1) 4506/    1C8F : 00 00               wave_Len	dw 0		; LENGTH 24-bit
(1) 4507/    1C91 : 00                  		db 0
(1) 4508/    1C92 : 00 00               wave_Loop	dw 0		; LOOP POINT 24-bit
(1) 4509/    1C94 : 00                  		db 0
(1) 4510/    1C95 : 00 01               wave_Pitch	dw 0100h	; 01.00h
(1) 4511/    1C97 : 00                  wave_Flags	db 0		; WAVE playback flags (%10x: 1 loop / 0 no loop)
(1) 4512/    1C98 : 00                  currTickBits	db 0		; Current Tick/Subbeat flags (000000BTb B-beat, T-tick)
(1) 4513/    1C99 : 00                  x68ksrclsb	db 0		; transferRom temporal LSB
(1) 4514/    1C9A : 00                  x68ksrcmid	db 0		; transferRom temporal MID
(1) 4515/    1C9B : 00 00               sbeatAcc	dw 0		; Accumulates on each tick to trigger the sub beats
(1) 4516/    1C9D : D6 00               sbeatPtck	dw 214		; Default global subbeats (this-32 for PAL) 214=125
(1) 4517/    1C9F :                     headerOut	ds 00Eh		; Temporal storage for 68k pointers
(1) 4518/    1CAD :                     headerOut_e	ds 2		; <-- reverse readpoint
(1) 4519/    1CAF :                     trkInfoCach	ds 4
(1) 4520/    1CB3 :                     sampleHead	ds 006h
(1) 4521/    1CB9 :                     instListOut	ds 8
(1) 4522/    1CC1 :                     
(1) 4523/    1CC1 :                     ; ====================================================================
(1) 4524/    1CC1 :                     ; ----------------------------------------------------------------
(1) 4525/    1CC1 :                     ; Special aligned buffers
(1) 4526/    1CC1 :                     ;
(1) 4527/    1CC1 :                     ; Located at 1D00h
(1) 4528/    1CC1 :                     ; ----------------------------------------------------------------
(1) 4529/    1CC1 :                     
(1) 4530/    1D00 :                     		org 1D00h
(1) 4531/    1D00 :                     dWaveBuff	ds 100h		; WAVE data buffer: 100h bytes, updates every 80h
(1) 4532/    1E00 :                     trkChnls	ds 8*MAX_TRKCHN
(1) 4533/    1F00 :                     trkCach_0	ds MAX_RCACH
(1) 4534/    1F20 :                     trkCach_1	ds MAX_RCACH
(1) 4535/    1F40 :                     trkCach_2	ds MAX_RCACH
(1) 4536/    1F60 :                     trkCach_3	ds MAX_RCACH
(1) 4537/    1F80 :                     
(1) 4538/    1F80 :                     ; --------------------------------------------------------
(1) 4539/    1F80 :                     
(1) 4540/FFFFFFFFFFFF4228 :                     		dephase
(1) 4541/FFFFFFFFFFFF4228 :                     		cpu 68000		; [AS] Return to 68k
(1) 4542/FFFFFFFFFFFF4228 :                     		padding off		; [AS] NO padding
(1) 4543/FFFFFFFFFFFF4228 :                     		align 2
(1) 4544/FFFFFFFFFFFF422A :                     
     147/FFFFFFFFFFFF422A :                     Z80_CODE_END:
     148/    3C2A :                     		dephase
     149/    3C2A :                     
     150/    3C2A :                     ; ---------------------------------------------
     151/    3C2A :                     ; SEGA PICO
     152/    3C2A :                     ;
     153/    3C2A :                     ; This recycles the MD's routines.
     154/    3C2A :                     ; ---------------------------------------------
     176/    3C2A :                     
     177/    3C2A :                     ; ====================================================================
     178/    3C2A :                     ; --------------------------------------------------------
     179/    3C2A :                     ; SYSTEM routines and MODE switching code
     180/    3C2A :                     ;
     181/    3C2A :                     ; MD and PICO: Normal ROM locations
     182/    3C2A :                     ; CD/32X/CD32X: Loaded into RAM, This includes cartridge
     183/    3C2A :                     ;               to prevent bus-conflict with the SH2's
     184/    3C2A :                     ;               ROM area
     185/    3C2A :                     ; --------------------------------------------------------
     186/    3C2A :                     
     188/    3C2A :                     Md_SysCode:
     189/FFFFFFFFFFFF0000 :                     		phase RAM_SystemCode
     191/FFFFFFFFFFFF0000 :                     ; ---------------------------------------------
     192/FFFFFFFFFFFF0000 :                     
     193/FFFFFFFFFFFF0000 :                     		include	"sound/driver/gema.asm"
(1)    1/FFFFFFFFFFFF0000 :                     ; ===========================================================================
(1)    2/FFFFFFFFFFFF0000 :                     ; -------------------------------------------------------------------
(1)    3/FFFFFFFFFFFF0000 :                     ; GEMA/Nikona Sound Driver v1.0
(1)    4/FFFFFFFFFFFF0000 :                     ; by GenesisFan64 2023-2024
(1)    5/FFFFFFFFFFFF0000 :                     ;
(1)    6/FFFFFFFFFFFF0000 :                     ; Features:
(1)    7/FFFFFFFFFFFF0000 :                     ; - Support for SEGA CD's PCM channels:
(1)    8/FFFFFFFFFFFF0000 :                     ;   | All 8 channels with streaming support
(1)    9/FFFFFFFFFFFF0000 :                     ;   | for larger samples.
(1)   10/FFFFFFFFFFFF0000 :                     ;
(1)   11/FFFFFFFFFFFF0000 :                     ; - Support for 32X's PWM:
(1)   12/FFFFFFFFFFFF0000 :                     ;   | 7 pseudo-channels in either MONO
(1)   13/FFFFFFFFFFFF0000 :                     ;   | or STEREO.
(1)   14/FFFFFFFFFFFF0000 :                     ;
(1)   15/FFFFFFFFFFFF0000 :                     ; - WAVE playback at 16000hz base for all
(1)   16/FFFFFFFFFFFF0000 :                     ;   channels that play samples.
(1)   17/FFFFFFFFFFFF0000 :                     ;   | (DAC, PCM and PWM)
(1)   18/FFFFFFFFFFFF0000 :                     
(1)   19/FFFFFFFFFFFF0000 :                     ; - DMA ROM protection for DAC
(1)   20/FFFFFFFFFFFF0000 :                     ;   | This keeps the wave playback in a
(1)   21/FFFFFFFFFFFF0000 :                     ;   | decent quality while doing any DMA
(1)   22/FFFFFFFFFFFF0000 :                     ;   | task in the 68k side.
(1)   23/FFFFFFFFFFFF0000 :                     ;
(1)   24/FFFFFFFFFFFF0000 :                     ; - FM special mode with custom frequencies
(1)   25/FFFFFFFFFFFF0000 :                     ;
(1)   26/FFFFFFFFFFFF0000 :                     ; - Autodetection for the PSG's Tone3 mode
(1)   27/FFFFFFFFFFFF0000 :                     ;
(1)   28/FFFFFFFFFFFF0000 :                     ; Notes:
(1)   29/FFFFFFFFFFFF0000 :                     ; Thie RAM area $FFFF00-$FFFFFF is reserved
(1)   30/FFFFFFFFFFFF0000 :                     ; for this driver
(1)   31/FFFFFFFFFFFF0000 :                     ; Currently the Z80 writes a flag directly to
(1)   32/FFFFFFFFFFFF0000 :                     ; RAM for a workaround to bypass a data-reading
(1)   33/FFFFFFFFFFFF0000 :                     ; hardware limitation. (see Sound_Update)
(1)   34/FFFFFFFFFFFF0000 :                     ; The entire RAM section will be used in case
(1)   35/FFFFFFFFFFFF0000 :                     ; I translate the Z80 code to the 68K just for
(1)   36/FFFFFFFFFFFF0000 :                     ; the Sega PICO
(1)   37/FFFFFFFFFFFF0000 :                     ;
(1)   38/FFFFFFFFFFFF0000 :                     ; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣴⣶⡿⠿⠿⠿⣶⣦⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀
(1)   39/FFFFFFFFFFFF0000 :                     ; ⠀⠀⠀⠀⠀⠀⢀⣠⣶⢟⣿⠟⠁⢰⢋⣽⡆⠈⠙⣿⡿⣶⣄⡀⠀⠀⠀⠀⠀⠀
(1)   40/FFFFFFFFFFFF0000 :                     ; ⠀⠀⠀⠀⣠⣴⠟⠋⢠⣾⠋⠀⣀⠘⠿⠿⠃⣀⠀⠈⣿⡄⠙⠻⣦⣄⠀⠀⠀⠀
(1)   41/FFFFFFFFFFFF0000 :                     ; ⠀⢀⣴⡿⠋⠁⠀⢀⣼⠏⠺⠛⠛⠻⠂⠐⠟⠛⠛⠗⠘⣷⡀⠀⠈⠙⢿⣦⡀⠀
(1)   42/FFFFFFFFFFFF0000 :                     ; ⣴⡟⢁⣀⣠⣤⡾⢿⡟⠀⠀⠀⠘⢷⠾⠷⡾⠃⠀⠀⠀⢻⡿⢷⣤⣄⣀⡈⢻⣦
(1)   43/FFFFFFFFFFFF0000 :                     ; ⠙⠛⠛⠋⠉⠁⠀⢸⡇⠀⠀⢠⣄⠀⠀⠀⠀⣠⡄⠀⠀⢸⡇⠀⠈⠉⠙⠛⠛⠋
(1)   44/FFFFFFFFFFFF0000 :                     ; ⠀⠀⠀⠀⠀⠀⠀⢸⡇⢾⣦⣀⣹⡧⠀⠀⢼⣏⣀⣴⡷⢸⡇⠀⠀⠀⠀⠀⠀⠀
(1)   45/FFFFFFFFFFFF0000 :                     ; ⠀⠀⠀⠀⠀⠀⠀⠸⣧⡀⠈⠛⠛⠁⠀⠀⠈⠛⠛⠁⢀⣼⠇⠀⠀⠀⠀⠀⠀⠀
(1)   46/FFFFFFFFFFFF0000 :                     ; ⠀⠀⠀⠀⠀⠀⠀⢀⣘⣿⣶⣤⣀⣀⣀⣀⣀⣀⣤⣶⣿⣃⠀⠀⠀⠀⠀⠀⠀⠀
(1)   47/FFFFFFFFFFFF0000 :                     ; ⠀⠀⠀⠀⠀⣠⡶⠟⠋⢉⣀⣽⠿⠉⠉⠉⠹⢿⣍⣈⠉⠛⠷⣦⡀⠀⠀⠀⠀⠀
(1)   48/FFFFFFFFFFFF0000 :                     ; ⠀⠀⠀⠀⢾⣯⣤⣴⡾⠟⠋⠁⠀⠀⠀⠀⠀⠀⠉⠛⠷⣶⣤⣬⣿⠀⠀⠀⠀⠀
(1)   49/FFFFFFFFFFFF0000 :                     ; ⠀⠀⠀⠀⠀⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠁⠀⠀⠀⠀⠀
(1)   50/FFFFFFFFFFFF0000 :                     ; -------------------------------------------------------------------
(1)   51/FFFFFFFFFFFF0000 :                     
(1)   52/FFFFFFFFFFFF0000 :                     ; ====================================================================
(1)   53/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)   54/FFFFFFFFFFFF0000 :                     ; Macros
(1)   55/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)   56/FFFFFFFFFFFF0000 :                     
(1)   57/FFFFFFFFFFFF0000 :                     ; ------------------------------------------------------------
(1)   58/FFFFFFFFFFFF0000 :                     ; Sample include
(1)   59/FFFFFFFFFFFF0000 :                     ;
(1)   60/FFFFFFFFFFFF0000 :                     ; Shared for all DAC, PCM, PWM
(1)   61/FFFFFFFFFFFF0000 :                     ; FOR WAV SAMPLES, OFFSET STARTS AT $2C
(1)   62/FFFFFFFFFFFF0000 :                     ;
(1)   63/FFFFFFFFFFFF0000 :                     ; gSmplData Label,"filepath",loop_point(0-beginning)
(1)   64/FFFFFFFFFFFF0000 :                     ; If not doing loop, write 0.
(1)   65/FFFFFFFFFFFF0000 :                     gSmplData macro labl,file,loop
(1)   66/FFFFFFFFFFFF0000 :                     	if MARS|MARSCD		; <-- label align for 32X
(1)   67/FFFFFFFFFFFF0000 :                     		align 4
(1)   68/FFFFFFFFFFFF0000 :                     	endif
(1)   69/FFFFFFFFFFFF0000 :                     labl	label *
(1)   70/FFFFFFFFFFFF0000 :                     	dc.b ((labl_e-labl_s)&$FF),(((labl_e-labl_s)>>8)&$FF),(((labl_e-labl_s)>>16)&$FF)
(1)   71/FFFFFFFFFFFF0000 :                     	dc.b ((loop)&$FF),(((loop)>>8)&$FF),(((loop)>>16)&$FF)
(1)   72/FFFFFFFFFFFF0000 :                     labl_s:
(1)   73/FFFFFFFFFFFF0000 :                     	binclude file,$2C
(1)   74/FFFFFFFFFFFF0000 :                     labl_e:
(1)   75/FFFFFFFFFFFF0000 :                     	endm
(1)   76/FFFFFFFFFFFF0000 :                     
(1)   77/FFFFFFFFFFFF0000 :                     ; ====================================================================
(1)   78/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)   79/FFFFFFFFFFFF0000 :                     ; Variables
(1)   80/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)   81/FFFFFFFFFFFF0000 :                     
(1)   82/FFFFFFFFFFFF0000 :                     ; z80_cpu	equ $A00000		; Z80 CPU area, size: $2000
(1)   83/FFFFFFFFFFFF0000 :                     ; z80_bus 	equ $A11100		; only read bit 0 (bit 8 as WORD)
(1)   84/FFFFFFFFFFFF0000 :                     ; z80_reset	equ $A11200		; WRITE only: $0000 reset/$0100 cancel
(1)   85/FFFFFFFFFFFF0000 :                     
(1)   86/FFFFFFFFFFFF0000 :                     ; Z80-area points:
(1)   87/FFFFFFFFFFFF0000 : =$40                 zDrvFifo	equ commZfifo		; FIFO command storage
(1)   88/FFFFFFFFFFFF0000 : =$2E                 zDrvFWrt	equ commZWrite		; FIFO command index
(1)   89/FFFFFFFFFFFF0000 : =$2F                 zDrvRomBlk	equ commZRomBlk		; ROM block flag
(1)   90/FFFFFFFFFFFF0000 : =$37                 zDrvMarsBlk	equ marsBlock		; Flag to disable 32X's PWM
(1)   91/FFFFFFFFFFFF0000 : =$36                 zDrvMcdBlk	equ mcdBlock		; Flag to disable SegaCD's PCM
(1)   92/FFFFFFFFFFFF0000 : =$35                 zDrvRamSrc	equ cdRamSrcB		; RAM-read source+dest pointers
(1)   93/FFFFFFFFFFFF0000 : =$30                 zDrvRamLen	equ cdRamLen		; RAM-read length and flag
(1)   94/FFFFFFFFFFFF0000 :                     
(1)   95/FFFFFFFFFFFF0000 :                     ; ====================================================================
(1)   96/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)   97/FFFFFFFFFFFF0000 :                     ; Labels
(1)   98/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)   99/FFFFFFFFFFFF0000 :                     
(1)  100/FFFFFFFFFFFF0000 : =$FFFFFF00           RAM_ZCdFlag_D	equ RAM_ZSndBuff	; transferRom flag
(1)  101/FFFFFFFFFFFF0000 :                     
(1)  102/FFFFFFFFFFFF0000 :                     ; ====================================================================
(1)  103/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)  104/FFFFFFFFFFFF0000 :                     ; Initialize Sound
(1)  105/FFFFFFFFFFFF0000 :                     ;
(1)  106/FFFFFFFFFFFF0000 :                     ; Uses:
(1)  107/FFFFFFFFFFFF0000 :                     ; a0-a1,d0-d1
(1)  108/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)  109/FFFFFFFFFFFF0000 :                     
(1)  110/FFFFFFFFFFFF0000 :                     ; 		align $80
(1)  111/FFFFFFFFFFFF0000 :                     Sound_Init:
(1)  112/FFFFFFFFFFFF0000 : 007C 0700           		ori.w	#$0700,sr
(1)  116/FFFFFFFFFFFF0004 : 33FC 0100 00A1      		move.w	#$0100,(z80_bus).l		; Get Z80 bus
         FFFFFFFFFFFF000A : 1100             
(1)  117/FFFFFFFFFFFF000C : 33FC 0100 00A1      		move.w	#$0100,(z80_reset).l		; Z80 reset
         FFFFFFFFFFFF0012 : 1200             
(1)  118/FFFFFFFFFFFF0014 :                     .wait:
(1)  119/FFFFFFFFFFFF0014 : 0839 0000 00A1      		btst	#0,(z80_bus).l
         FFFFFFFFFFFF001A : 1100             
(1)  120/FFFFFFFFFFFF001C : 66F6                		bne.s	.wait
(1)  121/FFFFFFFFFFFF001E : 41F9 00A0 0000      		lea	(z80_cpu).l,a0			; Clean entire Z80 FIRST.
(1)  122/FFFFFFFFFFFF0024 : 303C 1FFF           		move.w	#$1FFF,d0
(1)  123/FFFFFFFFFFFF0028 : 7200                		moveq	#0,d1
(1)  124/FFFFFFFFFFFF002A :                     .cleanup:
(1)  125/FFFFFFFFFFFF002A : 10C1                		move.b	d1,(a0)+
(1)  126/FFFFFFFFFFFF002C : 51C8 FFFC           		dbf	d0,.cleanup
(1)  127/FFFFFFFFFFFF0030 : 41F9 FFFF 22A8      		lea	(Z80_CODE).l,a0			; a0 - Z80 code (on $880000)
(1)  128/FFFFFFFFFFFF0036 : 43F9 00A0 0000      		lea	(z80_cpu).l,a1			; a1 - Z80 CPU area
(1)  129/FFFFFFFFFFFF003C : 303C 1F81           		move.w	#(Z80_CODE_END-Z80_CODE)-1,d0	; d0 - Size
(1)  130/FFFFFFFFFFFF0040 :                     
(1)  131/FFFFFFFFFFFF0040 :                     .copy:
(1)  132/FFFFFFFFFFFF0040 : 12D8                		move.b	(a0)+,(a1)+
(1)  133/FFFFFFFFFFFF0042 : 51C8 FFFC           		dbf	d0,.copy
(1)  134/FFFFFFFFFFFF0046 : 33FC 0000 00A1      		move.w	#0,(z80_reset).l		; Reset cancel
         FFFFFFFFFFFF004C : 1200             
(1)  135/FFFFFFFFFFFF004E : 4238 FF00           		clr.b	(RAM_ZCdFlag_D).w		; Reset Z80 transferRom flag
(1)  136/FFFFFFFFFFFF0052 : 1039 00A1 0001      		move.b	(sys_io).l,d0			;
(1)  137/FFFFFFFFFFFF0058 : 0800 0006           		btst	#6,d0
(1)  138/FFFFFFFFFFFF005C : 6708                		beq.s	.not_pal
(1)  139/FFFFFFFFFFFF005E : 13FC 0001 00A0      		move.b	#1,(z80_cpu+palMode).l
         FFFFFFFFFFFF0064 : 003E             
(1)  140/FFFFFFFFFFFF0066 :                     .not_pal:
(1)  141/FFFFFFFFFFFF0066 : 4E71                		nop
(1)  142/FFFFFFFFFFFF0068 : 4E71                		nop
(1)  143/FFFFFFFFFFFF006A : 33FC 0100 00A1      		move.w	#$100,(z80_reset).l
         FFFFFFFFFFFF0070 : 1200             
(1)  144/FFFFFFFFFFFF0072 : 33FC 0000 00A1      		move.w	#0,(z80_bus).l			; Start Z80
         FFFFFFFFFFFF0078 : 1100             
(1)  146/FFFFFFFFFFFF007A : 203C 0021 A274      		move.l	#Gema_MasterList,d0
(1)  147/FFFFFFFFFFFF0080 : 6000 012C           		bra	gemaSetMasterList
(1)  148/FFFFFFFFFFFF0084 :                     
(1)  149/FFFFFFFFFFFF0084 :                     ; ----------------------------------------------------------------
(1)  150/FFFFFFFFFFFF0084 :                     ; Sound_Update
(1)  151/FFFFFFFFFFFF0084 :                     ;
(1)  152/FFFFFFFFFFFF0084 :                     ; Call this during DISPLAY or call it during a pre-VBlank
(1)  153/FFFFFFFFFFFF0084 :                     ; wait-loop to communicate and sycronize with the Z80
(1)  154/FFFFFFFFFFFF0084 :                     ;
(1)  155/FFFFFFFFFFFF0084 :                     ; RAM-to-Z80 transferRom workaround:
(1)  156/FFFFFFFFFFFF0084 :                     ; This checks if the Z80 wants to read from RAM (as it can't
(1)  157/FFFFFFFFFFFF0084 :                     ; see it) then this CPU manually writes the RAM bytes from
(1)  158/FFFFFFFFFFFF0084 :                     ; here to the Z80's RAM
(1)  159/FFFFFFFFFFFF0084 :                     ; THIS IS REQUIRED if you want to play your the tracks
(1)  160/FFFFFFFFFFFF0084 :                     ; (and instruments) in case you do ASIC-Stamp scaling and
(1)  161/FFFFFFFFFFFF0084 :                     ; rotation.
(1)  162/FFFFFFFFFFFF0084 :                     ;
(1)  163/FFFFFFFFFFFF0084 :                     ; DAC samples are safe to read from WORD-RAM (NOT
(1)  164/FFFFFFFFFFFF0084 :                     ; during Stamp processing)
(1)  165/FFFFFFFFFFFF0084 :                     ; Be careful when loading new data with gemaSetMasterList to
(1)  166/FFFFFFFFFFFF0084 :                     ; WORD-RAM, make sure MAIN-CPU has the permission set to read
(1)  167/FFFFFFFFFFFF0084 :                     ; the data.
(1)  168/FFFFFFFFFFFF0084 :                     ;
(1)  169/FFFFFFFFFFFF0084 :                     ; Sega Pico:
(1)  170/FFFFFFFFFFFF0084 :                     ; The entire Sound Driver will be here, translated from Z80 to 68k.
(1)  171/FFFFFFFFFFFF0084 :                     ; NO plans for it yet, it just returns as normal.
(1)  172/FFFFFFFFFFFF0084 :                     ;
(1)  173/FFFFFFFFFFFF0084 :                     ; Uses:
(1)  174/FFFFFFFFFFFF0084 :                     ; d5-d7,a4-a6
(1)  175/FFFFFFFFFFFF0084 :                     ; ----------------------------------------------------------------
(1)  176/FFFFFFFFFFFF0084 :                     
(1)  177/FFFFFFFFFFFF0084 :                     Sound_Update:
(1)  181/FFFFFFFFFFFF0084 :                     	; ------------------------------------------------
(1)  182/FFFFFFFFFFFF0084 :                     	; If transferRom wants to read from 68k RAM
(1)  183/FFFFFFFFFFFF0084 : 4A38 FF00           		tst.b	(RAM_ZCdFlag_D).w		; Z80 wrote the flag?
(1)  184/FFFFFFFFFFFF0088 : 6744                		beq.s	.no_task
(1)  185/FFFFFFFFFFFF008A : 4238 FF00           		clr.b	(RAM_ZCdFlag_D).w		; Clear here
(1)  186/FFFFFFFFFFFF008E : 7E00                		moveq	#0,d7
(1)  187/FFFFFFFFFFFF0090 : 613E                		bsr	sndLockZ80
(1)  188/FFFFFFFFFFFF0092 : 1E39 00A0 0030      		move.b	(z80_cpu+zDrvRamLen).l,d7	; Size != 0?
(1)  189/FFFFFFFFFFFF0098 : 6732                		beq.s	.no_size
(1)  190/FFFFFFFFFFFF009A : 5347                		subq.w	#1,d7
(1)  191/FFFFFFFFFFFF009C : 4DF9 00A0 0036      		lea	(z80_cpu+(zDrvRamSrc+1)),a6
(1)  192/FFFFFFFFFFFF00A2 : 4BF9 00A0 0000      		lea	(z80_cpu),a5
(1)  193/FFFFFFFFFFFF00A8 : 1C26                		move.b	-(a6),d6			; d6 - Source
(1)  194/FFFFFFFFFFFF00AA : 4846                		swap	d6
(1)  195/FFFFFFFFFFFF00AC : 1C26                		move.b	-(a6),d6
(1)  196/FFFFFFFFFFFF00AE : E14E                		lsl.w	#8,d6
(1)  197/FFFFFFFFFFFF00B0 : 1C26                		move.b	-(a6),d6
(1)  198/FFFFFFFFFFFF00B2 : 7A00                		moveq	#0,d5
(1)  199/FFFFFFFFFFFF00B4 : 1A26                		move.b	-(a6),d5			; d5 - Dest
(1)  200/FFFFFFFFFFFF00B6 : E14D                		lsl.w	#8,d5
(1)  201/FFFFFFFFFFFF00B8 : 1A26                		move.b	-(a6),d5
(1)  202/FFFFFFFFFFFF00BA : DBC5                		add.l	d5,a5
(1)  203/FFFFFFFFFFFF00BC : 2846                		move.l	d6,a4
(1)  204/FFFFFFFFFFFF00BE :                     .copy_bytes:
(1)  205/FFFFFFFFFFFF00BE : 1ADC                		move.b	(a4)+,(a5)+
(1)  206/FFFFFFFFFFFF00C0 : 51CF FFFC           		dbf	d7,.copy_bytes
(1)  207/FFFFFFFFFFFF00C4 : 13FC 0000 00A0      		move.b	#0,(z80_cpu+zDrvRamLen).l	; Clear Len, breaks Z80 loop
         FFFFFFFFFFFF00CA : 0030             
(1)  208/FFFFFFFFFFFF00CC :                     .no_size:
(1)  209/FFFFFFFFFFFF00CC : 6116                		bsr	sndUnlockZ80
(1)  210/FFFFFFFFFFFF00CE :                     .no_task:
(1)  212/FFFFFFFFFFFF00CE : 4E75                		rts
(1)  213/FFFFFFFFFFFF00D0 :                     
(1)  214/FFFFFFFFFFFF00D0 :                     ; ====================================================================
(1)  215/FFFFFFFFFFFF00D0 :                     ; ----------------------------------------------------------------
(1)  216/FFFFFFFFFFFF00D0 :                     ; Subroutines
(1)  217/FFFFFFFFFFFF00D0 :                     ; ----------------------------------------------------------------
(1)  218/FFFFFFFFFFFF00D0 :                     
(1)  219/FFFFFFFFFFFF00D0 :                     ; ------------------------------------------------
(1)  220/FFFFFFFFFFFF00D0 :                     ; Lock Z80, get bus
(1)  221/FFFFFFFFFFFF00D0 :                     ; ------------------------------------------------
(1)  222/FFFFFFFFFFFF00D0 :                     
(1)  223/FFFFFFFFFFFF00D0 :                     sndLockZ80:
(1)  225/FFFFFFFFFFFF00D0 : 33FC 0100 00A1      		move.w	#$0100,(z80_bus).l
         FFFFFFFFFFFF00D6 : 1100             
(1)  226/FFFFFFFFFFFF00D8 :                     .wait:
(1)  227/FFFFFFFFFFFF00D8 : 0839 0000 00A1      		btst	#0,(z80_bus).l
         FFFFFFFFFFFF00DE : 1100             
(1)  228/FFFFFFFFFFFF00E0 : 66F6                		bne.s	.wait
(1)  230/FFFFFFFFFFFF00E2 : 4E75                		rts
(1)  231/FFFFFFFFFFFF00E4 :                     
(1)  232/FFFFFFFFFFFF00E4 :                     ; ------------------------------------------------
(1)  233/FFFFFFFFFFFF00E4 :                     ; Unlock Z80, return bus
(1)  234/FFFFFFFFFFFF00E4 :                     ; ------------------------------------------------
(1)  235/FFFFFFFFFFFF00E4 :                     
(1)  236/FFFFFFFFFFFF00E4 :                     sndUnlockZ80:
(1)  238/FFFFFFFFFFFF00E4 : 33FC 0000 00A1      		move.w	#0,(z80_bus).l
         FFFFFFFFFFFF00EA : 1100             
(1)  240/FFFFFFFFFFFF00EC : 4E75                		rts
(1)  241/FFFFFFFFFFFF00EE :                     
(1)  242/FFFFFFFFFFFF00EE :                     ; ------------------------------------------------
(1)  243/FFFFFFFFFFFF00EE :                     ; 68K-to-Z80 sound request enter/exit routines
(1)  244/FFFFFFFFFFFF00EE :                     ;
(1)  245/FFFFFFFFFFFF00EE :                     ; d6 - commFifo index
(1)  246/FFFFFFFFFFFF00EE :                     ; ------------------------------------------------
(1)  247/FFFFFFFFFFFF00EE :                     
(1)  248/FFFFFFFFFFFF00EE :                     sndReq_Enter:
(1)  249/FFFFFFFFFFFF00EE : 007C 0700           		ori.w	#$0700,sr			; Disable interrupts
(1)  251/FFFFFFFFFFFF00F2 : 33FC 0100 00A1      		move.w	#$0100,(z80_bus).l		; Request Z80 Stop
         FFFFFFFFFFFF00F8 : 1100             
(1)  253/FFFFFFFFFFFF00FA : 9EFC 0004           		suba	#4,sp				; Extra jump return
(1)  254/FFFFFFFFFFFF00FE : 48E7 0306           		movem.l	d6-d7/a5-a6,-(sp)		; Save these regs to the stack
(1)  255/FFFFFFFFFFFF0102 : DEFC 0014           		adda	#(4*4)+4,sp			; Go back to the RTS jump
(1)  256/FFFFFFFFFFFF0106 : 4BF9 00A0 002E      		lea	(z80_cpu+zDrvFWrt),a5		; a5 - commZWrite
(1)  257/FFFFFFFFFFFF010C : 4DF9 00A0 0040      		lea	(z80_cpu+zDrvFifo),a6		; a6 - fifo command list
(1)  258/FFFFFFFFFFFF0112 :                     .wait:
(1)  260/FFFFFFFFFFFF0112 : 0839 0000 00A1      		btst	#0,(z80_bus).l			; Wait for Z80
         FFFFFFFFFFFF0118 : 1100             
(1)  261/FFFFFFFFFFFF011A : 66F6                		bne.s	.wait
(1)  263/FFFFFFFFFFFF011C : 1C15                		move.b	(a5),d6				; d6 - index fifo position
(1)  264/FFFFFFFFFFFF011E : 4886                		ext.w	d6				; extend to 16 bits
(1)  265/FFFFFFFFFFFF0120 : 4E75                		rts
(1)  266/FFFFFFFFFFFF0122 :                     ; JUMP ONLY
(1)  267/FFFFFFFFFFFF0122 :                     sndReq_Exit:
(1)  269/FFFFFFFFFFFF0122 : 33FC 0000 00A1      		move.w	#0,(z80_bus).l
         FFFFFFFFFFFF0128 : 1100             
(1)  271/FFFFFFFFFFFF012A : 9EFC 0018           		suba	#8+(4*4),sp
(1)  272/FFFFFFFFFFFF012E : 4CDF 60C0           		movem.l	(sp)+,d6-d7/a5-a6		; And pop those back
(1)  273/FFFFFFFFFFFF0132 : DEFC 0008           		adda	#8,sp
(1)  274/FFFFFFFFFFFF0136 : 027C F8FF           		andi.w	#$F8FF,sr			; Enable interrupts
(1)  275/FFFFFFFFFFFF013A : 4E75                		rts
(1)  276/FFFFFFFFFFFF013C :                     
(1)  277/FFFFFFFFFFFF013C :                     ; ------------------------------------------------
(1)  278/FFFFFFFFFFFF013C :                     ; Send request id and arguments
(1)  279/FFFFFFFFFFFF013C :                     ;
(1)  280/FFFFFFFFFFFF013C :                     ; Input:
(1)  281/FFFFFFFFFFFF013C :                     ; d7 - byte to write
(1)  282/FFFFFFFFFFFF013C :                     ; d6 - index pointer
(1)  283/FFFFFFFFFFFF013C :                     ; a5 - commZWrite, update index
(1)  284/FFFFFFFFFFFF013C :                     ; a6 - commZfifo command list
(1)  285/FFFFFFFFFFFF013C :                     ;
(1)  286/FFFFFFFFFFFF013C :                     ; *** CALL sndReq_Enter FIRST ***
(1)  287/FFFFFFFFFFFF013C :                     ; ------------------------------------------------
(1)  288/FFFFFFFFFFFF013C :                     
(1)  289/FFFFFFFFFFFF013C :                     sndReq_scmd:
(1)  290/FFFFFFFFFFFF013C : 1DBC 00FF 6000      		move.b	#-1,(a6,d6.w)			; write command-start flag
(1)  291/FFFFFFFFFFFF0142 : 5206                		addq.b	#1,d6				; next fifo pos
(1)  292/FFFFFFFFFFFF0144 : 0206 000F           		andi.b	#MAX_ZCMND-1,d6			; * Z80 label *
(1)  293/FFFFFFFFFFFF0148 : 600C                		bra.s	sndReq_sbyte
(1)  294/FFFFFFFFFFFF014A :                     sndReq_slong:
(1)  295/FFFFFFFFFFFF014A : 610A                		bsr	sndReq_sbyte
(1)  296/FFFFFFFFFFFF014C : E09F                		ror.l	#8,d7
(1)  297/FFFFFFFFFFFF014E :                     sndReq_saddr:	; 24-bit address
(1)  298/FFFFFFFFFFFF014E : 6106                		bsr	sndReq_sbyte
(1)  299/FFFFFFFFFFFF0150 : E09F                		ror.l	#8,d7
(1)  300/FFFFFFFFFFFF0152 :                     sndReq_sword:
(1)  301/FFFFFFFFFFFF0152 : 6102                		bsr	sndReq_sbyte
(1)  302/FFFFFFFFFFFF0154 : E09F                		ror.l	#8,d7
(1)  303/FFFFFFFFFFFF0156 :                     sndReq_sbyte:
(1)  304/FFFFFFFFFFFF0156 : 1D87 6000           		move.b	d7,(a6,d6.w)			; write byte
(1)  305/FFFFFFFFFFFF015A : 5206                		addq.b	#1,d6				; next fifo pos
(1)  306/FFFFFFFFFFFF015C : 0206 000F           		andi.b	#MAX_ZCMND-1,d6			; * Z80 label *
(1)  307/FFFFFFFFFFFF0160 : 1A86                		move.b	d6,(a5)				; update commZWrite
(1)  308/FFFFFFFFFFFF0162 : 4E75                		rts
(1)  309/FFFFFFFFFFFF0164 :                     
(1)  310/FFFFFFFFFFFF0164 :                     ; --------------------------------------------------------
(1)  311/FFFFFFFFFFFF0164 :                     ; gemaDmaPause
(1)  312/FFFFFFFFFFFF0164 :                     ;
(1)  313/FFFFFFFFFFFF0164 :                     ; Call this BEFORE doing any DMA transfer
(1)  314/FFFFFFFFFFFF0164 :                     ;
(1)  315/FFFFFFFFFFFF0164 :                     ; 32X: Set RV bit manually AFTER calling this.
(1)  316/FFFFFFFFFFFF0164 :                     ; --------------------------------------------------------
(1)  317/FFFFFFFFFFFF0164 :                     
(1)  318/FFFFFFFFFFFF0164 :                     gemaDmaPause:
(1)  322/FFFFFFFFFFFF0164 : 4847                		swap	d7
(1)  323/FFFFFFFFFFFF0166 : 4846                		swap	d6
(1)  324/FFFFFFFFFFFF0168 : 6100 FF66           		bsr	sndLockZ80
(1)  325/FFFFFFFFFFFF016C : 13FC 0001 00A0      		move.b	#1,(z80_cpu+zDrvRomBlk)		; Block flag for Z80
         FFFFFFFFFFFF0172 : 002F             
(1)  326/FFFFFFFFFFFF0174 : 6100 FF6E           		bsr	sndUnlockZ80
(1)  327/FFFFFFFFFFFF0178 : 3E3C 0060           		move.w	#96,d7				; ...Small delay...
(1)  328/FFFFFFFFFFFF017C : 51CF FFFE           		dbf	d7,*
(1)  329/FFFFFFFFFFFF0180 : 4846                		swap	d6
(1)  330/FFFFFFFFFFFF0182 : 4847                		swap	d7
(1)  331/FFFFFFFFFFFF0184 : 4E75                		rts
(1)  333/FFFFFFFFFFFF0186 :                     
(1)  334/FFFFFFFFFFFF0186 :                     ; --------------------------------------------------------
(1)  335/FFFFFFFFFFFF0186 :                     ; gemaDmaResume
(1)  336/FFFFFFFFFFFF0186 :                     ;
(1)  337/FFFFFFFFFFFF0186 :                     ; Call this AFTER finishing DMA transfer
(1)  338/FFFFFFFFFFFF0186 :                     ;
(1)  339/FFFFFFFFFFFF0186 :                     ; 32X: Clear the RV bit manually AFTER calling this.
(1)  340/FFFFFFFFFFFF0186 :                     ; --------------------------------------------------------
(1)  341/FFFFFFFFFFFF0186 :                     
(1)  342/FFFFFFFFFFFF0186 :                     gemaDmaResume:
(1)  346/FFFFFFFFFFFF0186 : 4847                		swap	d7
(1)  347/FFFFFFFFFFFF0188 : 4846                		swap	d6
(1)  348/FFFFFFFFFFFF018A : 6100 FF44           		bsr	sndLockZ80
(1)  349/FFFFFFFFFFFF018E : 13FC 0000 00A0      		move.b	#0,(z80_cpu+zDrvRomBlk)		; Unblock flag for Z80
         FFFFFFFFFFFF0194 : 002F             
(1)  350/FFFFFFFFFFFF0196 : 6100 FF4C           		bsr	sndUnlockZ80
(1)  351/FFFFFFFFFFFF019A : 4846                		swap	d6
(1)  352/FFFFFFFFFFFF019C : 4847                		swap	d7
(1)  353/FFFFFFFFFFFF019E : 4E75                		rts
(1)  355/FFFFFFFFFFFF01A0 :                     
(1)  356/FFFFFFFFFFFF01A0 :                     ; ====================================================================
(1)  357/FFFFFFFFFFFF01A0 :                     ; --------------------------------------------------------
(1)  358/FFFFFFFFFFFF01A0 :                     ; USER CALLS
(1)  359/FFFFFFFFFFFF01A0 :                     ; --------------------------------------------------------
(1)  360/FFFFFFFFFFFF01A0 :                     
(1)  361/FFFFFFFFFFFF01A0 :                     ; --------------------------------------------------------
(1)  362/FFFFFFFFFFFF01A0 :                     ; gemaTest
(1)  363/FFFFFFFFFFFF01A0 :                     ;
(1)  364/FFFFFFFFFFFF01A0 :                     ; For TESTING only.
(1)  365/FFFFFFFFFFFF01A0 :                     ; --------------------------------------------------------
(1)  366/FFFFFFFFFFFF01A0 :                     
(1)  367/FFFFFFFFFFFF01A0 :                     gemaTest:
(1)  368/FFFFFFFFFFFF01A0 : 6100 FF4C           		bsr	sndReq_Enter
(1)  369/FFFFFFFFFFFF01A4 : 3E3C 0000           		move.w	#$00,d7		; Command $00
(1)  370/FFFFFFFFFFFF01A8 : 6192                		bsr	sndReq_scmd
(1)  371/FFFFFFFFFFFF01AA : 6000 FF76           		bra 	sndReq_Exit
(1)  372/FFFFFFFFFFFF01AE :                     
(1)  373/FFFFFFFFFFFF01AE :                     ; --------------------------------------------------------
(1)  374/FFFFFFFFFFFF01AE :                     ; gemaSetMasterList
(1)  375/FFFFFFFFFFFF01AE :                     ;
(1)  376/FFFFFFFFFFFF01AE :                     ; Set Tracklist location
(1)  377/FFFFFFFFFFFF01AE :                     ;
(1)  378/FFFFFFFFFFFF01AE :                     ; Input:
(1)  379/FFFFFFFFFFFF01AE :                     ; d0.l | 68k pointer
(1)  380/FFFFFFFFFFFF01AE :                     ; --------------------------------------------------------
(1)  381/FFFFFFFFFFFF01AE :                     
(1)  382/FFFFFFFFFFFF01AE :                     gemaSetMasterList:
(1)  383/FFFFFFFFFFFF01AE : 6100 FF3E           		bsr	sndReq_Enter
(1)  384/FFFFFFFFFFFF01B2 : 3E3C 0001           		move.w	#$01,d7		; Command $01
(1)  385/FFFFFFFFFFFF01B6 : 6184                		bsr	sndReq_scmd
(1)  386/FFFFFFFFFFFF01B8 : 2E00                		move.l	d0,d7
(1)  387/FFFFFFFFFFFF01BA : 618E                		bsr	sndReq_slong
(1)  388/FFFFFFFFFFFF01BC : 6000 FF64           		bra 	sndReq_Exit
(1)  389/FFFFFFFFFFFF01C0 :                     
(1)  390/FFFFFFFFFFFF01C0 :                     ; --------------------------------------------------------
(1)  391/FFFFFFFFFFFF01C0 :                     ; gemaPlayTrack
(1)  392/FFFFFFFFFFFF01C0 :                     ;
(1)  393/FFFFFFFFFFFF01C0 :                     ; Play a sequence with arguments
(1)  394/FFFFFFFFFFFF01C0 :                     ;
(1)  395/FFFFFFFFFFFF01C0 :                     ; Input:
(1)  396/FFFFFFFFFFFF01C0 :                     ; d0.b | Playback slot number
(1)  397/FFFFFFFFFFFF01C0 :                     ;        If -1: use auto-search
(1)  398/FFFFFFFFFFFF01C0 :                     ; d1.b | Sequence number
(1)  399/FFFFFFFFFFFF01C0 :                     ; d2.b | Starting block
(1)  400/FFFFFFFFFFFF01C0 :                     ; --------------------------------------------------------
(1)  401/FFFFFFFFFFFF01C0 :                     
(1)  402/FFFFFFFFFFFF01C0 :                     gemaPlayTrack:
(1)  403/FFFFFFFFFFFF01C0 : 6100 FF2C           		bsr	sndReq_Enter
(1)  404/FFFFFFFFFFFF01C4 : 3E3C 0002           		move.w	#$02,d7		; Command $02
(1)  405/FFFFFFFFFFFF01C8 : 6100 FF72           		bsr	sndReq_scmd
(1)  406/FFFFFFFFFFFF01CC : 1E01                		move.b	d1,d7		; d1.b Seq number
(1)  407/FFFFFFFFFFFF01CE : 6186                		bsr	sndReq_sbyte
(1)  408/FFFFFFFFFFFF01D0 : 1E02                		move.b	d2,d7		; d2.b Block <--
(1)  409/FFFFFFFFFFFF01D2 : 6182                		bsr	sndReq_sbyte
(1)  410/FFFFFFFFFFFF01D4 : 1E00                		move.b	d0,d7		; d0.b Slot
(1)  411/FFFFFFFFFFFF01D6 : 6100 FF7E           		bsr	sndReq_sbyte
(1)  412/FFFFFFFFFFFF01DA : 6000 FF46           		bra 	sndReq_Exit
(1)  413/FFFFFFFFFFFF01DE :                     
(1)  414/FFFFFFFFFFFF01DE :                     ; --------------------------------------------------------
(1)  415/FFFFFFFFFFFF01DE :                     ; gemaStopTrack
(1)  416/FFFFFFFFFFFF01DE :                     ;
(1)  417/FFFFFFFFFFFF01DE :                     ; Stops tracks with the same sequence number
(1)  418/FFFFFFFFFFFF01DE :                     ;
(1)  419/FFFFFFFFFFFF01DE :                     ; Input:
(1)  420/FFFFFFFFFFFF01DE :                     ; d0.b | Playback slot number
(1)  421/FFFFFFFFFFFF01DE :                     ;        If -1: Read all slots
(1)  422/FFFFFFFFFFFF01DE :                     ; d1.b | Sequence number to search for
(1)  423/FFFFFFFFFFFF01DE :                     ;        If -1: stop tracks with any sequence
(1)  424/FFFFFFFFFFFF01DE :                     ; --------------------------------------------------------
(1)  425/FFFFFFFFFFFF01DE :                     
(1)  426/FFFFFFFFFFFF01DE :                     gemaStopTrack:
(1)  427/FFFFFFFFFFFF01DE : 6100 FF0E           		bsr	sndReq_Enter
(1)  428/FFFFFFFFFFFF01E2 : 3E3C 0003           		move.w	#$03,d7		; Command $03
(1)  429/FFFFFFFFFFFF01E6 : 6100 FF54           		bsr	sndReq_scmd
(1)  430/FFFFFFFFFFFF01EA : 1E01                		move.b	d1,d7		; d0.b Seq number
(1)  431/FFFFFFFFFFFF01EC : 6100 FF68           		bsr	sndReq_sbyte
(1)  432/FFFFFFFFFFFF01F0 : 1E00                		move.b	d0,d7		; d1.b Slot
(1)  433/FFFFFFFFFFFF01F2 : 6100 FF62           		bsr	sndReq_sbyte
(1)  434/FFFFFFFFFFFF01F6 : 6000 FF2A           		bra 	sndReq_Exit
(1)  435/FFFFFFFFFFFF01FA :                     
(1)  436/FFFFFFFFFFFF01FA :                     ; --------------------------------------------------------
(1)  437/FFFFFFFFFFFF01FA :                     ; gemaStopAll
(1)  438/FFFFFFFFFFFF01FA :                     ;
(1)  439/FFFFFFFFFFFF01FA :                     ; Stops ALL tracks
(1)  440/FFFFFFFFFFFF01FA :                     ; --------------------------------------------------------
(1)  441/FFFFFFFFFFFF01FA :                     
(1)  442/FFFFFFFFFFFF01FA :                     gemaStopAll:
(1)  443/FFFFFFFFFFFF01FA : 6100 FEF2           		bsr	sndReq_Enter
(1)  444/FFFFFFFFFFFF01FE : 3E3C 0003           		move.w	#$03,d7		; Command $03
(1)  445/FFFFFFFFFFFF0202 : 6100 FF38           		bsr	sndReq_scmd
(1)  446/FFFFFFFFFFFF0206 : 7EFF                		moveq	#-1,d7		; d0.b Seq number
(1)  447/FFFFFFFFFFFF0208 : 6100 FF4C           		bsr	sndReq_sbyte
(1)  448/FFFFFFFFFFFF020C : 7EFF                		moveq	#-1,d7		; d1.b Slot
(1)  449/FFFFFFFFFFFF020E : 6100 FF46           		bsr	sndReq_sbyte
(1)  450/FFFFFFFFFFFF0212 : 6000 FF0E           		bra 	sndReq_Exit
(1)  451/FFFFFFFFFFFF0216 :                     
(1)  452/FFFFFFFFFFFF0216 :                     ; --------------------------------------------------------
(1)  453/FFFFFFFFFFFF0216 :                     ; gemaFadeTrack
(1)  454/FFFFFFFFFFFF0216 :                     ;
(1)  455/FFFFFFFFFFFF0216 :                     ; Set Master volume to a track slot.
(1)  456/FFFFFFFFFFFF0216 :                     ;
(1)  457/FFFFFFFFFFFF0216 :                     ; Input:
(1)  458/FFFFFFFFFFFF0216 :                     ; d0.b | Playback slot number
(1)  459/FFFFFFFFFFFF0216 :                     ;        If -1: Apply to all slots
(1)  460/FFFFFFFFFFFF0216 :                     ; d1.b | Target volume
(1)  461/FFFFFFFFFFFF0216 :                     ; d2.b | Fade speed TODO
(1)  462/FFFFFFFFFFFF0216 :                     ;
(1)  463/FFFFFFFFFFFF0216 :                     ; Notes:
(1)  464/FFFFFFFFFFFF0216 :                     ; - DO NOT MIX THIS WITH gemaSetTrackVol
(1)  465/FFFFFFFFFFFF0216 :                     ; - In v1.0 this only works during new notes on playback.
(1)  466/FFFFFFFFFFFF0216 :                     ; --------------------------------------------------------
(1)  467/FFFFFFFFFFFF0216 :                     
(1)  468/FFFFFFFFFFFF0216 :                     gemaFadeTrack:
(1)  469/FFFFFFFFFFFF0216 : 6100 FED6           		bsr	sndReq_Enter
(1)  470/FFFFFFFFFFFF021A : 3E3C 0005           		move.w	#$05,d7		; Command $05
(1)  471/FFFFFFFFFFFF021E : 6100 FF1C           		bsr	sndReq_scmd
(1)  472/FFFFFFFFFFFF0222 : 1E01                		move.b	d1,d7		; d0.b Target volume
(1)  473/FFFFFFFFFFFF0224 : 6100 FF30           		bsr	sndReq_sbyte
(1)  474/FFFFFFFFFFFF0228 : 1E00                		move.b	d0,d7		; d1.b Slot
(1)  475/FFFFFFFFFFFF022A : 6100 FF2A           		bsr	sndReq_sbyte
(1)  476/FFFFFFFFFFFF022E : 6000 FEF2           		bra 	sndReq_Exit
(1)  477/FFFFFFFFFFFF0232 :                     
(1)  478/FFFFFFFFFFFF0232 :                     ; --------------------------------------------------------
(1)  479/FFFFFFFFFFFF0232 :                     ; gemaSetTrackVol
(1)  480/FFFFFFFFFFFF0232 :                     ;
(1)  481/FFFFFFFFFFFF0232 :                     ; Set Master volume to a track slot.
(1)  482/FFFFFFFFFFFF0232 :                     ;
(1)  483/FFFFFFFFFFFF0232 :                     ; Input:
(1)  484/FFFFFFFFFFFF0232 :                     ; d0.b | Playback slot number
(1)  485/FFFFFFFFFFFF0232 :                     ;        If -1: Set to all slots
(1)  486/FFFFFFFFFFFF0232 :                     ; d1.b | Master volume:
(1)  487/FFFFFFFFFFFF0232 :                     ;        $00-max $40-min
(1)  488/FFFFFFFFFFFF0232 :                     ;
(1)  489/FFFFFFFFFFFF0232 :                     ; Notes:
(1)  490/FFFFFFFFFFFF0232 :                     ; - DO NOT MIX THIS WITH gemaFadeTrack
(1)  491/FFFFFFFFFFFF0232 :                     ; - In v1.0 this only works on (re)start
(1)  492/FFFFFFFFFFFF0232 :                     ;   or during new notes on playback.
(1)  493/FFFFFFFFFFFF0232 :                     ; --------------------------------------------------------
(1)  494/FFFFFFFFFFFF0232 :                     
(1)  495/FFFFFFFFFFFF0232 :                     gemaSetTrackVol:
(1)  496/FFFFFFFFFFFF0232 : 6100 FEBA           		bsr	sndReq_Enter
(1)  497/FFFFFFFFFFFF0236 : 3E3C 0006           		move.w	#$06,d7		; Command $06
(1)  498/FFFFFFFFFFFF023A : 6100 FF00           		bsr	sndReq_scmd
(1)  499/FFFFFFFFFFFF023E : 1E01                		move.b	d1,d7		; d0.b Volume data <--
(1)  500/FFFFFFFFFFFF0240 : 6100 FF14           		bsr	sndReq_sbyte
(1)  501/FFFFFFFFFFFF0244 : 1E00                		move.b	d0,d7		; d1.b Slot
(1)  502/FFFFFFFFFFFF0246 : 6100 FF0E           		bsr	sndReq_sbyte
(1)  503/FFFFFFFFFFFF024A : 6000 FED6           		bra 	sndReq_Exit
(1)  504/FFFFFFFFFFFF024E :                     
(1)  505/FFFFFFFFFFFF024E :                     ; --------------------------------------------------------
(1)  506/FFFFFFFFFFFF024E :                     ; gemaSetBeats
(1)  507/FFFFFFFFFFFF024E :                     ;
(1)  508/FFFFFFFFFFFF024E :                     ; Sets global sub-beats, affects ALL tracks.
(1)  509/FFFFFFFFFFFF024E :                     ;
(1)  510/FFFFFFFFFFFF024E :                     ; Input:
(1)  511/FFFFFFFFFFFF024E :                     ; d0.w | sub-beats
(1)  512/FFFFFFFFFFFF024E :                     ; --------------------------------------------------------
(1)  513/FFFFFFFFFFFF024E :                     
(1)  514/FFFFFFFFFFFF024E :                     ; TODO: Find a way to calculate this to a tempo
(1)  515/FFFFFFFFFFFF024E :                     ; Value 212 is tempo 125 on NTSC speed
(1)  516/FFFFFFFFFFFF024E :                     
(1)  517/FFFFFFFFFFFF024E :                     gemaSetBeats:
(1)  518/FFFFFFFFFFFF024E : 6100 FE9E           		bsr	sndReq_Enter
(1)  519/FFFFFFFFFFFF0252 : 3E3C 0007           		move.w	#$07,d7		; Command $07
(1)  520/FFFFFFFFFFFF0256 : 6100 FEE4           		bsr	sndReq_scmd
(1)  521/FFFFFFFFFFFF025A : 3E00                		move.w	d0,d7
(1)  522/FFFFFFFFFFFF025C : 6100 FEF4           		bsr	sndReq_sword
(1)  523/FFFFFFFFFFFF0260 : 6000 FEC0           		bra 	sndReq_Exit
(1)  524/FFFFFFFFFFFF0264 :                     
     194/FFFFFFFFFFFF0264 :                     		include	"system/md/video.asm"
(1)    1/FFFFFFFFFFFF0264 :                     ; ===========================================================================
(1)    2/FFFFFFFFFFFF0264 :                     ; ----------------------------------------------------------------
(1)    3/FFFFFFFFFFFF0264 :                     ; Genesis VDP section
(1)    4/FFFFFFFFFFFF0264 :                     ; ----------------------------------------------------------------
(1)    5/FFFFFFFFFFFF0264 :                     
(1)    6/FFFFFFFFFFFF0264 :                     ; ====================================================================
(1)    7/FFFFFFFFFFFF0264 :                     ; --------------------------------------------------------
(1)    8/FFFFFFFFFFFF0264 :                     ; Settings
(1)    9/FFFFFFFFFFFF0264 :                     ; --------------------------------------------------------
(1)   10/FFFFFFFFFFFF0264 :                     
(1)   11/FFFFFFFFFFFF0264 : =$18                 MAX_MDOBJ	equ 24		; MAX Objects
(1)   12/FFFFFFFFFFFF0264 : =$18                 MAX_MDDMATSK	equ 24		; MAX DMA BLAST entries
(1)   13/FFFFFFFFFFFF0264 : =$7FF                SET_NullVram	equ $07FF	; Default Blank cell
(1)   14/FFFFFFFFFFFF0264 : =$580                SET_PrintVram	equ $0580	; Default VRAM location of the PRINT text graphics
(1)   15/FFFFFFFFFFFF0264 : =$480                SET_DefAutoDma	equ $0480	; Default VRAM location for auto-DMA storage
(1)   16/FFFFFFFFFFFF0264 : =$3                  SET_PrintPal	equ 3		; Palette line to use for the printable text
(1)   17/FFFFFFFFFFFF0264 :                     
(1)   18/FFFFFFFFFFFF0264 :                     ; --------------------------------------------------------
(1)   19/FFFFFFFFFFFF0264 :                     ; Variables
(1)   20/FFFFFFFFFFFF0264 :                     ; --------------------------------------------------------
(1)   21/FFFFFFFFFFFF0264 :                     
(1)   22/FFFFFFFFFFFF0264 :                     ; ------------------------------------------------
(1)   23/FFFFFFFFFFFF0264 :                     ; VDP Register $80
(1)   24/FFFFFFFFFFFF0264 :                     ; ------------------------------------------------
(1)   25/FFFFFFFFFFFF0264 :                     
(1)   26/FFFFFFFFFFFF0264 : =$2                  HVStop		equ $02
(1)   27/FFFFFFFFFFFF0264 : =$10                 HintEnbl	equ $10
(1)   28/FFFFFFFFFFFF0264 : =$1                  bitHVStop	equ 1
(1)   29/FFFFFFFFFFFF0264 : =$4                  bitHintEnbl	equ 4
(1)   30/FFFFFFFFFFFF0264 :                     
(1)   31/FFFFFFFFFFFF0264 :                     ; ------------------------------------------------
(1)   32/FFFFFFFFFFFF0264 :                     ; VDP Register $81
(1)   33/FFFFFFFFFFFF0264 :                     ; ------------------------------------------------
(1)   34/FFFFFFFFFFFF0264 :                     
(1)   35/FFFFFFFFFFFF0264 : =$40                 DispEnbl 	equ $40
(1)   36/FFFFFFFFFFFF0264 : =$20                 VintEnbl 	equ $20
(1)   37/FFFFFFFFFFFF0264 : =$10                 DmaEnbl		equ $10
(1)   38/FFFFFFFFFFFF0264 : =$6                  bitDispEnbl	equ 6
(1)   39/FFFFFFFFFFFF0264 : =$5                  bitVintEnbl	equ 5
(1)   40/FFFFFFFFFFFF0264 : =$4                  bitDmaEnbl	equ 4
(1)   41/FFFFFFFFFFFF0264 : =$3                  bitV30		equ 3
(1)   42/FFFFFFFFFFFF0264 :                     
(1)   43/FFFFFFFFFFFF0264 :                     ; ------------------------------------------------
(1)   44/FFFFFFFFFFFF0264 :                     ; vdp_ctrl READ bits (full WORD)
(1)   45/FFFFFFFFFFFF0264 :                     ; ------------------------------------------------
(1)   46/FFFFFFFFFFFF0264 :                     
(1)   47/FFFFFFFFFFFF0264 : =$9                  bitFifoE	equ 9		; DMA FIFO empty
(1)   48/FFFFFFFFFFFF0264 : =$8                  bitFifoF	equ 8		; DMA FIFO full
(1)   49/FFFFFFFFFFFF0264 : =$7                  bitVInt		equ 7		; Vertical interrupt
(1)   50/FFFFFFFFFFFF0264 : =$6                  bitSprOvr	equ 6		; Sprite overflow
(1)   51/FFFFFFFFFFFF0264 : =$5                  bitSprCol	equ 5		; Sprite collision
(1)   52/FFFFFFFFFFFF0264 : =$4                  bitOdd		equ 4		; EVEN or ODD frame displayed on interlace mode
(1)   53/FFFFFFFFFFFF0264 : =$3                  bitVBlk		equ 3		; Inside VBlank
(1)   54/FFFFFFFFFFFF0264 : =$2                  bitHBlk		equ 2		; Inside HBlank
(1)   55/FFFFFFFFFFFF0264 : =$1                  bitDma		equ 1		; This bit only works on FILL and COPY
(1)   56/FFFFFFFFFFFF0264 : =$0                  bitPal		equ 0
(1)   57/FFFFFFFFFFFF0264 :                     
(1)   58/FFFFFFFFFFFF0264 :                     ; ====================================================================
(1)   59/FFFFFFFFFFFF0264 :                     ; ----------------------------------------------------------------
(1)   60/FFFFFFFFFFFF0264 :                     ; Structs
(1)   61/FFFFFFFFFFFF0264 :                     ; ----------------------------------------------------------------
(1)   62/FFFFFFFFFFFF0264 :                     
(1)   63/FFFFFFFFFFFF0264 :                     ; ------------------------------------------------
(1)   64/FFFFFFFFFFFF0264 :                     ; Genesis object
(1)   65/FFFFFFFFFFFF0264 :                     ;
(1)   66/FFFFFFFFFFFF0264 :                     ; obj_set: %M--- --vh
(1)   67/FFFFFFFFFFFF0264 :                     ; 	| M - Draw this object on
(1)   68/FFFFFFFFFFFF0264 :                     ;             Genesis or 32X
(1)   69/FFFFFFFFFFFF0264 :                     ; 	| h - Flip Y
(1)   70/FFFFFFFFFFFF0264 :                     ; 	| v - Flip X
(1)   71/FFFFFFFFFFFF0264 :                     ;
(1)   72/FFFFFFFFFFFF0264 :                     ; obj_size: $uuddllrr
(1)   73/FFFFFFFFFFFF0264 :                     ; 	| u - Up/8
(1)   74/FFFFFFFFFFFF0264 :                     ; 	| d - Down/8
(1)   75/FFFFFFFFFFFF0264 :                     ; 	| l - Left/8
(1)   76/FFFFFFFFFFFF0264 :                     ; 	| r - Right/8
(1)   77/FFFFFFFFFFFF0264 :                     ; ------------------------------------------------
(1)   78/FFFFFFFFFFFF0264 :                     
(1)   79/FFFFFFFFFFFF0264 : (MACRO)              		strct 0
(1)   79/FFFFFFFFFFFF0264 : =$FFFFFFFFFFFF0264   GLBL_LASTPC     set *
(1)   79/    3E8E :                                     dephase
(1)   79/       0 :                                     phase 0
(1)   79/       0 : =$0                  GLBL_LASTORG    set *
(1)   80/       0 :                     obj_code	ds.l 1		; Object code, If 0 slot is unused.
(1)   81/       4 :                     obj_x		ds.l 1		; Object X Position $xxxx.0000
(1)   82/       8 :                     obj_y		ds.l 1		; Object Y Position $yyyy.0000
(1)   83/       C :                     obj_map		ds.l 1		; Object Sprite-map data location
(1)   84/      10 :                     obj_size	ds.l 1		; Object Size starting from center point X/Y, also used for obj-to-obj collision detection.
(1)   85/      14 :                     obj_vram	ds.w 1		; Object VRAM position (If DMA enabled: output location)
(1)   86/      16 :                     obj_x_spd	ds.w 1		; Object X Speed $xx.00
(1)   87/      18 :                     obj_y_spd	ds.w 1		; Object Y Speed $yy.00
(1)   88/      1A :                     obj_anim_indx	ds.w 1		; *internal* Object animation script index (obj_anim + obj_anim_indx)
(1)   89/      1C :                     obj_frame	ds.w 1		; Object current frame (overwritten by object_Animate)
(1)   90/      1E :                     obj_anim_id	ds.b 1		; Object animation number
(1)   91/      1F :                     obj_anim_icur	ds.b 1		; *internal* Object current animation id (DONT SEPARATE THIS FROM obj_anim_id)
(1)   92/      20 :                     obj_anim_spd	ds.b 1		; *internal* Object animation delay
(1)   93/      21 :                     obj_index	ds.b 1		; Object code-index
(1)   94/      22 :                     obj_set		ds.b 1		; Object settings
(1)   95/      23 :                     obj_subid	ds.b 1		; Object Sub-ID (for object placement)
(1)   96/      24 :                     obj_status	ds.b 1		; Object USER status (falling, collision, etc.)
(1)   97/      25 :                     obj_FREE	ds.b 1		; (FILLER align byte)
(1)   98/      26 :                     obj_ram		ds.b $40	; Object's own RAM
(1)   99/      66 :                     sizeof_mdobj	ds.l 0
(1)  100/      68 : (MACRO)              		endstrct
(1)  100/       0 :                                     org GLBL_LASTORG
(1)  100/FFFFFFFFFFFF0264 :                                     phase GLBL_LASTPC
(1)  101/FFFFFFFFFFFF0264 :                     ; 		message "\{sizeof_mdobj}"
(1)  102/FFFFFFFFFFFF0264 :                     
(1)  103/FFFFFFFFFFFF0264 :                     ; ------------------------------------------------
(1)  104/FFFFFFFFFFFF0264 :                     ; ** obj_set
(1)  105/FFFFFFFFFFFF0264 :                     ; ------------------------------------------------
(1)  106/FFFFFFFFFFFF0264 :                     
(1)  107/FFFFFFFFFFFF0264 : =$7                  bitobj_Mars	equ	7	; 32X ONLY: This objects draws to the 32X side (256-color sprite)
(1)  108/FFFFFFFFFFFF0264 : =$1                  bitobj_flipV	equ	1	; Set to flip object Vertically
(1)  109/FFFFFFFFFFFF0264 : =$0                  bitobj_flipH	equ	0	; Set to flip object Horizontally
(1)  110/FFFFFFFFFFFF0264 :                     
(1)  111/FFFFFFFFFFFF0264 :                     ; ====================================================================
(1)  112/FFFFFFFFFFFF0264 :                     ; ----------------------------------------------------------------
(1)  113/FFFFFFFFFFFF0264 :                     ; Video RAM
(1)  114/FFFFFFFFFFFF0264 :                     ; ----------------------------------------------------------------
(1)  115/FFFFFFFFFFFF0264 :                     
(1)  116/FFFFFFFFFFFF0264 : (MACRO)              			strct RAM_MdVideo
(1)  116/FFFFFFFFFFFF0264 : =$FFFFFFFFFFFF0264   GLBL_LASTPC     set *
(1)  116/       0 :                                     dephase
(1)  116/FFFFFFFFFFFFA004 :                                     phase RAM_MDVIDEO
(1)  116/FFFFFFFFFFFFA004 : =$FFFFFFFFFFFFA004   GLBL_LASTORG    set *
(1)  117/FFFFFFFFFFFFA004 :                     RAM_HorScroll		ds.l 240			; DMA Horizontal scroll data
(1)  118/FFFFFFFFFFFFA3C4 :                     RAM_VerScroll		ds.l 320/16			; DMA Vertical scroll data
(1)  119/FFFFFFFFFFFFA414 :                     RAM_Sprites		ds.w 8*80			; DMA Sprites
(1)  120/FFFFFFFFFFFFA914 :                     RAM_Palette		ds.w 64				; DMA palette
(1)  121/FFFFFFFFFFFFA994 :                     ; RAM_SprDrwPz		ds.w 8*80			; External sprite pieces
(1)  122/FFFFFFFFFFFFA994 :                     RAM_MdMarsPalFd		ds.w 256			; Target 32X palette for FadeIn/Out
(1)  123/FFFFFFFFFFFFAB94 :                     RAM_PaletteFd		ds.w 64				; Target MD palette for FadeIn/Out
(1)  124/FFFFFFFFFFFFAC14 :                     RAM_VdpDmaList		ds.b $10*MAX_MDDMATSK		; DMA BLAST list for VBlank
(1)  125/FFFFFFFFFFFFAD94 :                     RAM_Objects		ds.b MAX_MDOBJ*sizeof_mdobj	; Objects
(1)  126/FFFFFFFFFFFFB724 :                     RAM_ObjDispList		ds.w MAX_MDOBJ			; half-RAM pointers for display (Obj|Extra)
(1)  127/FFFFFFFFFFFFB754 :                     RAM_VidPrntList		ds.w 3*64			; Video_Print list: Address, Type
(1)  128/FFFFFFFFFFFFB8D4 :                     RAM_FrameCount		ds.l 1				; Frames counter
(1)  129/FFFFFFFFFFFFB8D8 :                     RAM_SprAutoDmaSet	ds.w 1				; VRAM location setting for Auto-DMA VRAM
(1)  130/FFFFFFFFFFFFB8DA :                     RAM_SprAutoDmaCurr	ds.w 1				; CURRENT reading location for Auto-DMA
(1)  131/FFFFFFFFFFFFB8DC :                     RAM_SprDrwCntr		ds.w 1				; TODO
(1)  132/FFFFFFFFFFFFB8DE :                     RAM_SprLinkNum		ds.w 1				; Current sprite-link for building sprites
(1)  133/FFFFFFFFFFFFB8E0 :                     ; RAM_VdpExWrite		ds.w 1
(1)  134/FFFFFFFFFFFFB8E0 :                     RAM_VdpDmaIndx		ds.w 1				; Current index in DMA BLAST list
(1)  135/FFFFFFFFFFFFB8E2 :                     RAM_VdpDmaMod		ds.w 1				; Mid-write flag
(1)  136/FFFFFFFFFFFFB8E4 :                     RAM_VidPrntVram		ds.w 1				; Default VRAM location for ASCII text used by Video_Print
(1)  137/FFFFFFFFFFFFB8E6 :                     RAM_FadeMdReq		ds.w 1				; FadeIn/Out request for Genesis palette (01-FadeIn 02-FadeOut)
(1)  138/FFFFFFFFFFFFB8E8 :                     RAM_FadeMdIncr		ds.w 1				; Fading increment count
(1)  139/FFFFFFFFFFFFB8EA :                     RAM_FadeMdDelay		ds.w 1				; Fading delay
(1)  140/FFFFFFFFFFFFB8EC :                     RAM_FadeMdTmr		ds.w 1				; Fading delay timer
(1)  141/FFFFFFFFFFFFB8EE :                     RAM_FadeMarsReq		ds.w 1				; Same thing but for 32X's 256-color (01-FadeIn 02-FadeOut)
(1)  142/FFFFFFFFFFFFB8F0 :                     RAM_FadeMarsIncr	ds.w 1				; (Hint: Set to 4 to syncronize with Genesis' FadeIn/Out)
(1)  143/FFFFFFFFFFFFB8F2 :                     RAM_FadeMarsDelay	ds.w 1
(1)  144/FFFFFFFFFFFFB8F4 :                     RAM_FadeMarsTmr		ds.w 1
(1)  145/FFFFFFFFFFFFB8F6 :                     RAM_MdMars_DrawAll	ds.w 1
(1)  146/FFFFFFFFFFFFB8F8 :                     RAM_VdpRegs		ds.b 24				; VDP Register cache
(1)  147/FFFFFFFFFFFFB910 :                     sizeof_mdvid		ds.l 0
(1)  148/FFFFFFFFFFFFB914 : (MACRO)              			endstrct
(1)  148/FFFFFFFFFFFFA004 :                                     org GLBL_LASTORG
(1)  148/FFFFFFFFFFFF0264 :                                     phase GLBL_LASTPC
(1)  149/FFFFFFFFFFFF0264 :                     
(1)  150/FFFFFFFFFFFF0264 : (MACRO)              		erreport "MD VIDEO RAM",sizeof_mdvid-RAM_MdVideo,MAX_MdVideo
(1)  151/FFFFFFFFFFFF0264 :                     
(1)  152/FFFFFFFFFFFF0264 :                     ; ====================================================================
(1)  153/FFFFFFFFFFFF0264 :                     ; --------------------------------------------------------
(1)  154/FFFFFFFFFFFF0264 :                     ; Initialize Genesis video
(1)  155/FFFFFFFFFFFF0264 :                     ;
(1)  156/FFFFFFFFFFFF0264 :                     ; Breaks:
(1)  157/FFFFFFFFFFFF0264 :                     ; d6-d7/a5-a6
(1)  158/FFFFFFFFFFFF0264 :                     ; --------------------------------------------------------
(1)  159/FFFFFFFFFFFF0264 :                     
(1)  160/FFFFFFFFFFFF0264 :                     Video_Init:
(1)  161/FFFFFFFFFFFF0264 : 4DF8 A004           		lea	(RAM_MdVideo).w,a6		; Clear our RAM section
(1)  162/FFFFFFFFFFFF0268 : 3C3C 8000           		move.w	#$8000,d6
(1)  163/FFFFFFFFFFFF026C : 3E3C 190B           		move.w	#(sizeof_mdvid-RAM_MdVideo)-1,d7
(1)  164/FFFFFFFFFFFF0270 :                     .clr_ram:
(1)  165/FFFFFFFFFFFF0270 : 1CC6                		move.b	d6,(a6)+			; (Write the LSB zero)
(1)  166/FFFFFFFFFFFF0272 : 51CF FFFC           		dbf	d7,.clr_ram
(1)  167/FFFFFFFFFFFF0276 : 4DF8 AC14           		lea	(RAM_VdpDmaList),a6
(1)  168/FFFFFFFFFFFF027A : 4BFA 0054           		lea	.dma_entry(pc),a5
(1)  169/FFFFFFFFFFFF027E : 3E3C 0018           		move.w	#MAX_MDDMATSK,d7
(1)  170/FFFFFFFFFFFF0282 :                     .copy_dma:
(1)  171/FFFFFFFFFFFF0282 : 2CD5                		move.l	(a5),(a6)+
(1)  172/FFFFFFFFFFFF0284 : 2CED 0004           		move.l	4(a5),(a6)+
(1)  173/FFFFFFFFFFFF0288 : 2CED 0008           		move.l	8(a5),(a6)+
(1)  174/FFFFFFFFFFFF028C : 2CED 000C           		move.l	$C(a5),(a6)+
(1)  175/FFFFFFFFFFFF0290 : 51CF FFF0           		dbf	d7,.copy_dma
(1)  176/FFFFFFFFFFFF0294 : 31FC 0480 B8D8      		move.w	#SET_DefAutoDma,(RAM_SprAutoDmaSet).w
(1)  177/FFFFFFFFFFFF029A : 31FC 0001 B8DE      		move.w	#1,(RAM_SprLinkNum).w
(1)  178/FFFFFFFFFFFF02A0 : 31F8 B8D8 B8DA      		move.w	(RAM_SprAutoDmaSet).w,(RAM_SprAutoDmaCurr).w
(1)  179/FFFFFFFFFFFF02A6 : 4DFA 0014           		lea	.list_vdpregs(pc),a6		; Write "cache'd" VDP registers
(1)  180/FFFFFFFFFFFF02AA : 4BF8 B8F8           		lea	(RAM_VdpRegs).w,a5
(1)  181/FFFFFFFFFFFF02AE : 3E3C 0010           		move.w	#17-1,d7
(1)  182/FFFFFFFFFFFF02B2 :                     .loop:
(1)  183/FFFFFFFFFFFF02B2 : 1C1E                		move.b	(a6)+,d6
(1)  184/FFFFFFFFFFFF02B4 : 1AC6                		move.b	d6,(a5)+
(1)  185/FFFFFFFFFFFF02B6 : 51CF FFFA           		dbf	d7,.loop
(1)  186/FFFFFFFFFFFF02BA : 6048                		bra	Video_Update
(1)  187/FFFFFFFFFFFF02BC :                     
(1)  188/FFFFFFFFFFFF02BC :                     ; ------------------------------------------------
(1)  189/FFFFFFFFFFFF02BC :                     ; Default VDP register settings
(1)  190/FFFFFFFFFFFF02BC :                     ; ------------------------------------------------
(1)  191/FFFFFFFFFFFF02BC :                     
(1)  192/FFFFFFFFFFFF02BC :                     .list_vdpregs:
(1)  193/FFFFFFFFFFFF02BC : 04                  		dc.b $04			; No HBlank interrupt, HV Counter on
(1)  194/FFFFFFFFFFFF02BD : 04                  		dc.b $04			; Display ON, No VBlank interrupt
(1)  195/FFFFFFFFFFFF02BE : 30                  		dc.b (($C000)>>10)		; Layer A at VRAM $C000 (%00xxx000)
(1)  196/FFFFFFFFFFFF02BF : 34                  		dc.b (($D000)>>10)		; Window  at VRAM $D000 (%00xxxxy0)
(1)  197/FFFFFFFFFFFF02C0 : 07                  		dc.b (($E000)>>13)		; Layer B at VRAM $E000 (%00000xxx)
(1)  198/FFFFFFFFFFFF02C1 : 7C                  		dc.b (($F800)>>9)		; Sprites at VRAM $F800 (%0xxxxxxy) (OLD $F800)
(1)  199/FFFFFFFFFFFF02C2 : 00                  		dc.b $00			; Unused
(1)  200/FFFFFFFFFFFF02C3 : 00                  		dc.b $00			; Background color: $00
(1)  201/FFFFFFFFFFFF02C4 : 00                  		dc.b $00			; Unused
(1)  202/FFFFFFFFFFFF02C5 : 00                  		dc.b $00			; Unused
(1)  203/FFFFFFFFFFFF02C6 : 00                  		dc.b $00			; HInt line number trigger
(1)  204/FFFFFFFFFFFF02C7 : 00                  		dc.b (%000|%00)			; No ExtInt, Scroll: VSCR:full HSCR:full
(1)  205/FFFFFFFFFFFF02C8 : 81                  		dc.b $81			; H40, No shadow mode, 320-pixel resolution mode
(1)  206/FFFFFFFFFFFF02C9 : 3F                  		dc.b (($FC00)>>10)		; HScroll at VRAM $FC00 (%00xxxxxx)
(1)  207/FFFFFFFFFFFF02CA : 00                  		dc.b $00			; Unused
(1)  208/FFFFFFFFFFFF02CB : 02                  		dc.b $02			; VDP auto-increment: $02
(1)  209/FFFFFFFFFFFF02CC : 01                  		dc.b (%00<<4)|%01		; Scroll area size: V32 H64
(1)  210/FFFFFFFFFFFF02CD : 00                  		dc.b $00
(1)  211/FFFFFFFFFFFF02CE : 00                  		dc.b $00
(1)  212/FFFFFFFFFFFF02CF :                     		align 2
(1)  213/FFFFFFFFFFFF02D0 :                     
(1)  214/FFFFFFFFFFFF02D0 :                     ; ------------------------------------------------
(1)  215/FFFFFFFFFFFF02D0 :                     ; DMA blast entry
(1)  216/FFFFFFFFFFFF02D0 :                     ; ------------------------------------------------
(1)  217/FFFFFFFFFFFF02D0 :                     
(1)  218/FFFFFFFFFFFF02D0 :                     .dma_entry:
(1)  219/FFFFFFFFFFFF02D0 : 9400 9300           		dc.w $9400,$9300		; Size
(1)  220/FFFFFFFFFFFF02D4 : 9600 9500 9700      		dc.w $9600,$9500,$9700		; Source
(1)  221/FFFFFFFFFFFF02DA : 4000 0080           		dc.l $40000080 			; VDP destination with DMA bit
(1)  222/FFFFFFFFFFFF02DE : 0000                		dc.w $0000			; SegaCD/CD32X only: Patch for the first 4 pixels
(1)  223/FFFFFFFFFFFF02E0 :                     		align 2
(1)  224/FFFFFFFFFFFF02E2 :                     
(1)  225/FFFFFFFFFFFF02E2 :                     ; ------------------------------------------------
(1)  226/FFFFFFFFFFFF02E2 :                     
(1)  227/FFFFFFFFFFFF02E2 :                     ; Default ASCII PRINT palette
(1)  228/FFFFFFFFFFFF02E2 : 0000 0EEE 0CCC      ASCII_PAL:	dc.w $0000,$0EEE,$0CCC,$0AAA,$0888,$0444,$000E,$0008
         FFFFFFFFFFFF02E8 : 0AAA 0888 0444 
         FFFFFFFFFFFF02EE : 000E 0008          
(1)  229/FFFFFFFFFFFF02F2 : 00EE 0088 00E0      		dc.w $00EE,$0088,$00E0,$0080,$0E00,$0800,$0000,$0000
         FFFFFFFFFFFF02F8 : 0080 0E00 0800 
         FFFFFFFFFFFF02FE : 0000 0000          
(1)  230/FFFFFFFFFFFF0302 :                     		align 2
(1)  231/FFFFFFFFFFFF0304 :                     
(1)  232/FFFFFFFFFFFF0304 :                     ; --------------------------------------------------------
(1)  233/FFFFFFFFFFFF0304 :                     ; Video_Update
(1)  234/FFFFFFFFFFFF0304 :                     ;
(1)  235/FFFFFFFFFFFF0304 :                     ; Writes register data stored in RAM to VDP
(1)  236/FFFFFFFFFFFF0304 :                     ; from registers $80 to $90
(1)  237/FFFFFFFFFFFF0304 :                     ;
(1)  238/FFFFFFFFFFFF0304 :                     ; WINDOW registers $91 and $92 are written
(1)  239/FFFFFFFFFFFF0304 :                     ; manually.
(1)  240/FFFFFFFFFFFF0304 :                     ;
(1)  241/FFFFFFFFFFFF0304 :                     ; Breaks:
(1)  242/FFFFFFFFFFFF0304 :                     ; d6-d7/a5-a6
(1)  243/FFFFFFFFFFFF0304 :                     ; --------------------------------------------------------
(1)  244/FFFFFFFFFFFF0304 :                     
(1)  245/FFFFFFFFFFFF0304 :                     Video_Update:
(1)  246/FFFFFFFFFFFF0304 : 4DF8 B8F8           		lea	(RAM_VdpRegs).w,a6
(1)  247/FFFFFFFFFFFF0308 : 4BF9 00C0 0004      		lea	(vdp_ctrl),a5
(1)  248/FFFFFFFFFFFF030E : 3C3C 8000           		move.w	#$8000,d6
(1)  249/FFFFFFFFFFFF0312 : 7E10                		moveq	#17-1,d7
(1)  250/FFFFFFFFFFFF0314 :                     .loop:
(1)  251/FFFFFFFFFFFF0314 : 1C1E                		move.b	(a6)+,d6
(1)  252/FFFFFFFFFFFF0316 : 3A86                		move.w	d6,(a5)
(1)  253/FFFFFFFFFFFF0318 : 0646 0100           		addi.w	#$0100,d6
(1)  254/FFFFFFFFFFFF031C : 51CF FFF6           		dbf	d7,.loop
(1)  255/FFFFFFFFFFFF0320 :                     .exit:
(1)  256/FFFFFFFFFFFF0320 : 4E75                		rts
(1)  257/FFFFFFFFFFFF0322 :                     
(1)  258/FFFFFFFFFFFF0322 :                     
(1)  259/FFFFFFFFFFFF0322 :                     
(1)  260/FFFFFFFFFFFF0322 :                     ; --------------------------------------------------------
(1)  261/FFFFFFFFFFFF0322 :                     ; Video_Clear
(1)  262/FFFFFFFFFFFF0322 :                     ;
(1)  263/FFFFFFFFFFFF0322 :                     ; Clear all video data from VRAM
(1)  264/FFFFFFFFFFFF0322 :                     ;
(1)  265/FFFFFFFFFFFF0322 :                     ; Breaks:
(1)  266/FFFFFFFFFFFF0322 :                     ; ALL
(1)  267/FFFFFFFFFFFF0322 :                     ; --------------------------------------------------------
(1)  268/FFFFFFFFFFFF0322 :                     
(1)  269/FFFFFFFFFFFF0322 :                     Video_Clear:
(1)  270/FFFFFFFFFFFF0322 :                     ; 		move.w	#0,d0			; Clears until $57F
(1)  271/FFFFFFFFFFFF0322 :                     ; 		move.w	#0,d1
(1)  272/FFFFFFFFFFFF0322 :                     ; 		move.w	#$57F*$20,d2
(1)  273/FFFFFFFFFFFF0322 :                     ; 		bsr	Video_Fill
(1)  274/FFFFFFFFFFFF0322 :                     
(1)  275/FFFFFFFFFFFF0322 :                     ; --------------------------------------------------------
(1)  276/FFFFFFFFFFFF0322 :                     ; Video_ClearScreen
(1)  277/FFFFFFFFFFFF0322 :                     ;
(1)  278/FFFFFFFFFFFF0322 :                     ; Clears ALL Genesis screens FG/BG/WIN
(1)  279/FFFFFFFFFFFF0322 :                     ;
(1)  280/FFFFFFFFFFFF0322 :                     ; Breaks:
(1)  281/FFFFFFFFFFFF0322 :                     ; d0-d2/d6-d7/a5-a6
(1)  282/FFFFFFFFFFFF0322 :                     ; --------------------------------------------------------
(1)  283/FFFFFFFFFFFF0322 :                     
(1)  284/FFFFFFFFFFFF0322 :                     Video_ClearScreen:
(1)  285/FFFFFFFFFFFF0322 : 7000                		moveq	#0,d0
(1)  286/FFFFFFFFFFFF0324 : 343C 1000           		move.w	#$1000,d2		; FG/BG size
(1)  287/FFFFFFFFFFFF0328 : 1238 B8FA           		move.b	(RAM_VdpRegs+2).w,d1	; FG
(1)  288/FFFFFFFFFFFF032C : 0241 0038           		andi.w	#%111000,d1
(1)  289/FFFFFFFFFFFF0330 : E149                		lsl.w	#8,d1
(1)  290/FFFFFFFFFFFF0332 : E549                		lsl.w	#2,d1
(1)  291/FFFFFFFFFFFF0334 : 6100 0452           		bsr	Video_Fill
(1)  292/FFFFFFFFFFFF0338 : 1238 B8FC           		move.b	(RAM_VdpRegs+4).w,d1	; BG
(1)  293/FFFFFFFFFFFF033C : 0241 0007           		andi.w	#%000111,d1
(1)  294/FFFFFFFFFFFF0340 : E149                		lsl.w	#8,d1
(1)  295/FFFFFFFFFFFF0342 : EB49                		lsl.w	#5,d1
(1)  296/FFFFFFFFFFFF0344 : 6100 0442           		bsr	Video_Fill
(1)  297/FFFFFFFFFFFF0348 : 343C 1000           		move.w	#$1000,d2		; WD Size
(1)  298/FFFFFFFFFFFF034C : 1238 B8FB           		move.b	(RAM_VdpRegs+3).w,d1	; Window
(1)  299/FFFFFFFFFFFF0350 : 0241 003E           		andi.w	#%111110,d1
(1)  300/FFFFFFFFFFFF0354 : E149                		lsl.w	#8,d1
(1)  301/FFFFFFFFFFFF0356 : E549                		lsl.w	#2,d1
(1)  302/FFFFFFFFFFFF0358 : 6100 042E           		bsr	Video_Fill
(1)  303/FFFFFFFFFFFF035C : 4DF8 A004           		lea	(RAM_HorScroll).w,a6	; RAM cleanup
(1)  304/FFFFFFFFFFFF0360 : 3E3C 00EF           		move.w	#240-1,d7
(1)  305/FFFFFFFFFFFF0364 : 7C00                		moveq	#0,d6
(1)  306/FFFFFFFFFFFF0366 :                     .xnext:
(1)  307/FFFFFFFFFFFF0366 : 2CC6                		move.l	d6,(a6)+
(1)  308/FFFFFFFFFFFF0368 : 51CF FFFC           		dbf	d7,.xnext
(1)  309/FFFFFFFFFFFF036C : 4DF8 A3C4           		lea	(RAM_VerScroll).w,a6
(1)  310/FFFFFFFFFFFF0370 : 3E3C 0013           		move.w	#(320/16)-1,d7
(1)  311/FFFFFFFFFFFF0374 :                     .ynext:
(1)  312/FFFFFFFFFFFF0374 : 2CC6                		move.l	d6,(a6)+
(1)  313/FFFFFFFFFFFF0376 : 51CF FFFC           		dbf	d7,.ynext
(1)  314/FFFFFFFFFFFF037A : 4DF8 A414           		lea	(RAM_Sprites).w,a6
(1)  315/FFFFFFFFFFFF037E : 3E3C 009F           		move.w	#((80*8)/4)-1,d7
(1)  316/FFFFFFFFFFFF0382 :                     .snext:
(1)  317/FFFFFFFFFFFF0382 : 2CC6                		move.l	d6,(a6)+
(1)  318/FFFFFFFFFFFF0384 : 51CF FFFC           		dbf	d7,.snext
(1)  319/FFFFFFFFFFFF0388 : 4DF8 A914           		lea	(RAM_Palette).w,a6
(1)  320/FFFFFFFFFFFF038C : 4BF8 AB94           		lea	(RAM_PaletteFd).w,a5
(1)  321/FFFFFFFFFFFF0390 : 3E3C 001F           		move.w	#(64/2)-1,d7
(1)  322/FFFFFFFFFFFF0394 :                     .pnext:
(1)  323/FFFFFFFFFFFF0394 : 2CC6                		move.l	d6,(a6)+
(1)  324/FFFFFFFFFFFF0396 : 2AC6                		move.l	d6,(a5)+
(1)  325/FFFFFFFFFFFF0398 : 51CF FFFA           		dbf	d7,.pnext
(1)  327/FFFFFFFFFFFF039C : 4DF8 C604           		lea	(RAM_MdDreq+Dreq_Palette).w,a6
(1)  328/FFFFFFFFFFFF03A0 : 4BF8 A994           		lea	(RAM_MdMarsPalFd).w,a5
(1)  329/FFFFFFFFFFFF03A4 : 3E3C 007F           		move.w	#(256/2)-1,d7
(1)  330/FFFFFFFFFFFF03A8 :                     ; 		moveq	#0,d6
(1)  331/FFFFFFFFFFFF03A8 :                     .pmnext:
(1)  332/FFFFFFFFFFFF03A8 : 2CC6                		move.l	d6,(a6)+
(1)  333/FFFFFFFFFFFF03AA : 2AC6                		move.l	d6,(a5)+
(1)  334/FFFFFFFFFFFF03AC : 51CF FFFA           		dbf	d7,.pmnext
(1)  335/FFFFFFFFFFFF03B0 : 4DF8 CC14           		lea	(RAM_MdDreq+Dreq_SuperSpr).w,a6
(1)  336/FFFFFFFFFFFF03B4 : 3E3C 007F           		move.w	#((sizeof_marsspr*MAX_MARSSPR)/2)-1,d7
(1)  337/FFFFFFFFFFFF03B8 :                     .ssp_next:
(1)  338/FFFFFFFFFFFF03B8 : 3CC6                		move.w	d6,(a6)+
(1)  339/FFFFFFFFFFFF03BA : 51CF FFFC           		dbf	d7,.ssp_next
(1)  341/FFFFFFFFFFFF03BE : 4E75                		rts
(1)  342/FFFFFFFFFFFF03C0 :                     
(1)  343/FFFFFFFFFFFF03C0 :                     ; ====================================================================
(1)  344/FFFFFFFFFFFF03C0 :                     ; ----------------------------------------------------------------
(1)  345/FFFFFFFFFFFF03C0 :                     ; Palette fading system
(1)  346/FFFFFFFFFFFF03C0 :                     ; ----------------------------------------------------------------
(1)  347/FFFFFFFFFFFF03C0 :                     
(1)  348/FFFFFFFFFFFF03C0 :                     ; --------------------------------------------------------
(1)  349/FFFFFFFFFFFF03C0 :                     ; FULL Fade in
(1)  350/FFFFFFFFFFFF03C0 :                     ; --------------------------------------------------------
(1)  351/FFFFFFFFFFFF03C0 :                     
(1)  352/FFFFFFFFFFFF03C0 :                     Video_FullFadeIn:
(1)  353/FFFFFFFFFFFF03C0 : 31FC 0001 B8E6      		move.w	#1,(RAM_FadeMdReq).w	; Fade-in mode
(1)  354/FFFFFFFFFFFF03C6 : 31FC 0001 B8EE      		move.w	#1,(RAM_FadeMarsReq).w
(1)  355/FFFFFFFFFFFF03CC : 31FC 0001 B8E8      		move.w	#1,(RAM_FadeMdIncr).w
(1)  356/FFFFFFFFFFFF03D2 : 31FC 0001 B8EA      		move.w	#1,(RAM_FadeMdDelay).w
(1)  357/FFFFFFFFFFFF03D8 : 31FC 0002 B8F0      		move.w	#2,(RAM_FadeMarsIncr).w
(1)  358/FFFFFFFFFFFF03DE : 31FC 0000 B8F2      		move.w	#0,(RAM_FadeMarsDelay).w
(1)  359/FFFFFFFFFFFF03E4 : 6024                		bra	Video_WaitFade
(1)  360/FFFFFFFFFFFF03E6 :                     
(1)  361/FFFFFFFFFFFF03E6 :                     ; --------------------------------------------------------
(1)  362/FFFFFFFFFFFF03E6 :                     ; FULL Fade out
(1)  363/FFFFFFFFFFFF03E6 :                     ; --------------------------------------------------------
(1)  364/FFFFFFFFFFFF03E6 :                     
(1)  365/FFFFFFFFFFFF03E6 :                     Video_FullFadeOut:
(1)  366/FFFFFFFFFFFF03E6 : 31FC 0002 B8E6      		move.w	#2,(RAM_FadeMdReq).w	; Fade-out mode
(1)  367/FFFFFFFFFFFF03EC : 31FC 0002 B8EE      		move.w	#2,(RAM_FadeMarsReq).w
(1)  368/FFFFFFFFFFFF03F2 : 31FC 0001 B8E8      		move.w	#1,(RAM_FadeMdIncr).w
(1)  369/FFFFFFFFFFFF03F8 : 31FC 0001 B8EA      		move.w	#1,(RAM_FadeMdDelay).w
(1)  370/FFFFFFFFFFFF03FE : 31FC 0002 B8F0      		move.w	#2,(RAM_FadeMarsIncr).w
(1)  371/FFFFFFFFFFFF0404 : 31FC 0000 B8F2      		move.w	#0,(RAM_FadeMarsDelay).w
(1)  372/FFFFFFFFFFFF040A :                     ; 		bra	Video_WaitFade
(1)  373/FFFFFFFFFFFF040A :                     
(1)  374/FFFFFFFFFFFF040A :                     ; --------------------------------------------------------
(1)  375/FFFFFFFFFFFF040A :                     ; Video_WaitFade
(1)  376/FFFFFFFFFFFF040A :                     ;
(1)  377/FFFFFFFFFFFF040A :                     ; *** External VBlank loop ***
(1)  378/FFFFFFFFFFFF040A :                     ; --------------------------------------------------------
(1)  379/FFFFFFFFFFFF040A :                     
(1)  380/FFFFFFFFFFFF040A :                     Video_WaitFade:
(1)  381/FFFFFFFFFFFF040A : 6100 0E88           		bsr	System_Render		; Render one frame normally
(1)  382/FFFFFFFFFFFF040E :                     .wait_fade:
(1)  383/FFFFFFFFFFFF040E : 3E39 00C0 0004      		move.w	(vdp_ctrl).l,d7		; Wait VBlank
(1)  384/FFFFFFFFFFFF0414 : 0807 0003           		btst	#bitVBlk,d7
(1)  385/FFFFFFFFFFFF0418 : 67F4                		beq.s	.wait_fade
(1)  386/FFFFFFFFFFFF041A : 6100 0476           		bsr	Video_Render		; Render VDP Visuals
(1)  388/FFFFFFFFFFFF041E : 6100 1468           		bsr	System_MarsUpdate	; Update DREQ RAM
(1)  389/FFFFFFFFFFFF0422 : 6154                		bsr	Video_DoPalFade
(1)  390/FFFFFFFFFFFF0424 : 6100 05D8           		bsr	Video_MdMars_DoPalFade
(1)  391/FFFFFFFFFFFF0428 : 3E38 B8E6           		move.w	(RAM_FadeMdReq).w,d7	; Check both req status.
(1)  392/FFFFFFFFFFFF042C : 3C38 B8EE           		move.w	(RAM_FadeMarsReq).w,d6
(1)  393/FFFFFFFFFFFF0430 : 8E46                		or.w	d6,d7
(1)  398/FFFFFFFFFFFF0432 : 4A47                		tst.w	d7
(1)  399/FFFFFFFFFFFF0434 : 66D8                		bne.s	.wait_fade
(1)  400/FFFFFFFFFFFF0436 : 4E75                		rts
(1)  401/FFFFFFFFFFFF0438 :                     
(1)  402/FFFFFFFFFFFF0438 :                     ; --------------------------------------------------------
(1)  403/FFFFFFFFFFFF0438 :                     ; Video_LoadPal, Video_FadePal
(1)  404/FFFFFFFFFFFF0438 :                     ;
(1)  405/FFFFFFFFFFFF0438 :                     ; Loads VDP palette data to either
(1)  406/FFFFFFFFFFFF0438 :                     ; CURRENT palette or FADING palette buffers.
(1)  407/FFFFFFFFFFFF0438 :                     ;
(1)  408/FFFFFFFFFFFF0438 :                     ; Input:
(1)  409/FFFFFFFFFFFF0438 :                     ; a0   | Palette data
(1)  410/FFFFFFFFFFFF0438 :                     ; d0.w | Starting color index
(1)  411/FFFFFFFFFFFF0438 :                     ; d1.w | Number of colors
(1)  412/FFFFFFFFFFFF0438 :                     ;
(1)  413/FFFFFFFFFFFF0438 :                     ; Breaks:
(1)  414/FFFFFFFFFFFF0438 :                     ; d6-d7,a6
(1)  415/FFFFFFFFFFFF0438 :                     ; --------------------------------------------------------
(1)  416/FFFFFFFFFFFF0438 :                     
(1)  417/FFFFFFFFFFFF0438 :                     Video_FadePal:
(1)  418/FFFFFFFFFFFF0438 : 4DF8 AB94           		lea	(RAM_PaletteFd).w,a6
(1)  419/FFFFFFFFFFFF043C : 4278 B8EC           		clr.w	(RAM_FadeMdTmr).w	; Clear fading timer.
(1)  420/FFFFFFFFFFFF0440 : 6004                		bra.s	vidMd_Pal
(1)  421/FFFFFFFFFFFF0442 :                     Video_LoadPal:
(1)  422/FFFFFFFFFFFF0442 : 4DF8 A914           		lea	(RAM_Palette).w,a6
(1)  423/FFFFFFFFFFFF0446 :                     vidMd_Pal:
(1)  424/FFFFFFFFFFFF0446 : 2A48                		move.l	a0,a5
(1)  425/FFFFFFFFFFFF0448 : 7E00                		moveq	#0,d7
(1)  426/FFFFFFFFFFFF044A : 3E00                		move.w	d0,d7
(1)  427/FFFFFFFFFFFF044C : DE47                		add.w	d7,d7
(1)  428/FFFFFFFFFFFF044E : DCC7                		adda	d7,a6
(1)  429/FFFFFFFFFFFF0450 : 3E01                		move.w	d1,d7
(1)  430/FFFFFFFFFFFF0452 : 0447 0001           		subi.w	#1,d7
(1)  431/FFFFFFFFFFFF0456 : 3C02                		move.w	d2,d6
(1)  432/FFFFFFFFFFFF0458 : 0246 0001           		andi.w	#1,d6
(1)  433/FFFFFFFFFFFF045C : E25E                		ror.w	#1,d6
(1)  434/FFFFFFFFFFFF045E :                     .loop:
(1)  435/FFFFFFFFFFFF045E : 3CDD                		move.w	(a5)+,(a6)+
(1)  436/FFFFFFFFFFFF0460 : 51CF FFFC           		dbf	d7,.loop
(1)  437/FFFFFFFFFFFF0464 : 4E75                		rts
(1)  438/FFFFFFFFFFFF0466 :                     
(1)  439/FFFFFFFFFFFF0466 :                     ; --------------------------------------------------------
(1)  440/FFFFFFFFFFFF0466 :                     ; Video_RunFade
(1)  441/FFFFFFFFFFFF0466 :                     ;
(1)  442/FFFFFFFFFFFF0466 :                     ; Processes palette fading for one frame
(1)  443/FFFFFFFFFFFF0466 :                     ;
(1)  444/FFFFFFFFFFFF0466 :                     ; Returns:
(1)  445/FFFFFFFFFFFF0466 :                     ; bne | Still active
(1)  446/FFFFFFFFFFFF0466 :                     ; beq | Finished
(1)  447/FFFFFFFFFFFF0466 :                     ;
(1)  448/FFFFFFFFFFFF0466 :                     ; Breaks:
(1)  449/FFFFFFFFFFFF0466 :                     ; ALL
(1)  450/FFFFFFFFFFFF0466 :                     ;
(1)  451/FFFFFFFFFFFF0466 :                     ; Notes:
(1)  452/FFFFFFFFFFFF0466 :                     ; Call this during DISPLAY only.
(1)  453/FFFFFFFFFFFF0466 :                     ; --------------------------------------------------------
(1)  454/FFFFFFFFFFFF0466 :                     
(1)  455/FFFFFFFFFFFF0466 :                     Video_RunFade:
(1)  457/FFFFFFFFFFFF0466 : 6110                		bsr	Video_DoPalFade
(1)  458/FFFFFFFFFFFF0468 : 6100 0594           		bsr	Video_MdMars_DoPalFade
(1)  459/FFFFFFFFFFFF046C : 3E38 B8E6           		move.w	(RAM_FadeMdReq).w,d7
(1)  460/FFFFFFFFFFFF0470 : 3C38 B8EE           		move.w	(RAM_FadeMarsReq).w,d6
(1)  461/FFFFFFFFFFFF0474 : 8E46                		or.w	d6,d7
(1)  466/FFFFFFFFFFFF0476 : 4E75                		rts
(1)  467/FFFFFFFFFFFF0478 :                     
(1)  468/FFFFFFFFFFFF0478 :                     ; --------------------------------------------------------
(1)  469/FFFFFFFFFFFF0478 :                     ; Video_DoPalFade
(1)  470/FFFFFFFFFFFF0478 :                     ; --------------------------------------------------------
(1)  471/FFFFFFFFFFFF0478 :                     
(1)  472/FFFFFFFFFFFF0478 :                     Video_DoPalFade:
(1)  473/FFFFFFFFFFFF0478 : 0478 0001 B8EC      		subi.w	#1,(RAM_FadeMdTmr).w
(1)  474/FFFFFFFFFFFF047E : 6A14                		bpl.s	.active
(1)  475/FFFFFFFFFFFF0480 : 31F8 B8EA B8EC      		move.w	(RAM_FadeMdDelay).w,(RAM_FadeMdTmr).w
(1)  476/FFFFFFFFFFFF0486 : 3E38 B8E6           		move.w	(RAM_FadeMdReq).w,d7
(1)  477/FFFFFFFFFFFF048A : DE47                		add.w	d7,d7
(1)  478/FFFFFFFFFFFF048C : 3E3B 7008           		move.w	.fade_list(pc,d7.w),d7
(1)  479/FFFFFFFFFFFF0490 : 4EFB 7004           		jmp	.fade_list(pc,d7.w)
(1)  480/FFFFFFFFFFFF0494 :                     .active:
(1)  481/FFFFFFFFFFFF0494 : 4E75                		rts
(1)  482/FFFFFFFFFFFF0496 :                     
(1)  483/FFFFFFFFFFFF0496 :                     ; --------------------------------------------
(1)  484/FFFFFFFFFFFF0496 :                     
(1)  485/FFFFFFFFFFFF0496 :                     .fade_list:
(1)  486/FFFFFFFFFFFF0496 : 0006                		dc.w .fade_done-.fade_list
(1)  487/FFFFFFFFFFFF0498 : 0008                		dc.w .fade_in-.fade_list
(1)  488/FFFFFFFFFFFF049A : 00AA                		dc.w .fade_out-.fade_list
(1)  489/FFFFFFFFFFFF049C :                     
(1)  490/FFFFFFFFFFFF049C :                     ; --------------------------------------------
(1)  491/FFFFFFFFFFFF049C :                     ; No fade or finished.
(1)  492/FFFFFFFFFFFF049C :                     ; --------------------------------------------
(1)  493/FFFFFFFFFFFF049C :                     
(1)  494/FFFFFFFFFFFF049C :                     .fade_done:
(1)  495/FFFFFFFFFFFF049C : 4E75                		rts
(1)  496/FFFFFFFFFFFF049E :                     
(1)  497/FFFFFFFFFFFF049E :                     ; --------------------------------------------
(1)  498/FFFFFFFFFFFF049E :                     ; Fade in
(1)  499/FFFFFFFFFFFF049E :                     ; --------------------------------------------
(1)  500/FFFFFFFFFFFF049E :                     
(1)  501/FFFFFFFFFFFF049E :                     .fade_in:
(1)  502/FFFFFFFFFFFF049E : 4DF8 AB94           		lea	(RAM_PaletteFd).w,a6
(1)  503/FFFFFFFFFFFF04A2 : 4BF8 A914           		lea	(RAM_Palette).w,a5
(1)  504/FFFFFFFFFFFF04A6 : 7040                		moveq	#64,d0				; Num of colors
(1)  505/FFFFFFFFFFFF04A8 : 3238 B8E8           		move.w	(RAM_FadeMdIncr).w,d1		; Speed
(1)  506/FFFFFFFFFFFF04AC : D241                		add.w	d1,d1
(1)  507/FFFFFFFFFFFF04AE : 3C00                		move.w	d0,d6
(1)  508/FFFFFFFFFFFF04B0 : 4846                		swap	d6
(1)  509/FFFFFFFFFFFF04B2 : 0440 0001           		subi.w	#1,d0
(1)  510/FFFFFFFFFFFF04B6 :                     .nxt_pal:
(1)  511/FFFFFFFFFFFF04B6 : 4242                		clr.w	d2		; Reset finished colorbits
(1)  512/FFFFFFFFFFFF04B8 : 3E16                		move.w	(a6),d7		; d7 - Input
(1)  513/FFFFFFFFFFFF04BA : 3C15                		move.w	(a5),d6		; d6 - Output
(1)  514/FFFFFFFFFFFF04BC : 3607                		move.w	d7,d3		; RED
(1)  515/FFFFFFFFFFFF04BE : 3806                		move.w	d6,d4
(1)  516/FFFFFFFFFFFF04C0 : 0246 0EE0           		andi.w	#%0000111011100000,d6
(1)  517/FFFFFFFFFFFF04C4 : 0244 000E           		andi.w	#%0000000000001110,d4
(1)  518/FFFFFFFFFFFF04C8 : 0243 000E           		andi.w	#%0000000000001110,d3
(1)  519/FFFFFFFFFFFF04CC : D841                		add.w	d1,d4
(1)  520/FFFFFFFFFFFF04CE : B843                		cmp.w	d3,d4
(1)  521/FFFFFFFFFFFF04D0 : 6506                		bcs.s	.no_red
(1)  522/FFFFFFFFFFFF04D2 : 3803                		move.w	d3,d4
(1)  523/FFFFFFFFFFFF04D4 : 0042 0001           		ori.w	#%001,d2	; RED is ready
(1)  524/FFFFFFFFFFFF04D8 :                     .no_red:
(1)  525/FFFFFFFFFFFF04D8 : 8C44                		or.w	d4,d6
(1)  526/FFFFFFFFFFFF04DA : E949                		lsl.w	#4,d1
(1)  527/FFFFFFFFFFFF04DC : 3607                		move.w	d7,d3		; GREEN
(1)  528/FFFFFFFFFFFF04DE : 3806                		move.w	d6,d4
(1)  529/FFFFFFFFFFFF04E0 : 0246 0E0E           		andi.w	#%0000111000001110,d6
(1)  530/FFFFFFFFFFFF04E4 : 0244 00E0           		andi.w	#%0000000011100000,d4
(1)  531/FFFFFFFFFFFF04E8 : 0243 00E0           		andi.w	#%0000000011100000,d3
(1)  532/FFFFFFFFFFFF04EC : D841                		add.w	d1,d4
(1)  533/FFFFFFFFFFFF04EE : B843                		cmp.w	d3,d4
(1)  534/FFFFFFFFFFFF04F0 : 6506                		bcs.s	.no_grn
(1)  535/FFFFFFFFFFFF04F2 : 3803                		move.w	d3,d4
(1)  536/FFFFFFFFFFFF04F4 : 0042 0002           		ori.w	#%010,d2	; GREEN is ready
(1)  537/FFFFFFFFFFFF04F8 :                     .no_grn:
(1)  538/FFFFFFFFFFFF04F8 : 8C44                		or.w	d4,d6
(1)  539/FFFFFFFFFFFF04FA : E949                		lsl.w	#4,d1
(1)  540/FFFFFFFFFFFF04FC : 3607                		move.w	d7,d3		; BLUE
(1)  541/FFFFFFFFFFFF04FE : 3806                		move.w	d6,d4
(1)  542/FFFFFFFFFFFF0500 : 0246 00EE           		andi.w	#%0000000011101110,d6
(1)  543/FFFFFFFFFFFF0504 : 0244 0E00           		andi.w	#%0000111000000000,d4
(1)  544/FFFFFFFFFFFF0508 : 0243 0E00           		andi.w	#%0000111000000000,d3
(1)  545/FFFFFFFFFFFF050C : D841                		add.w	d1,d4
(1)  546/FFFFFFFFFFFF050E : B843                		cmp.w	d3,d4
(1)  547/FFFFFFFFFFFF0510 : 6506                		bcs.s	.no_blu
(1)  548/FFFFFFFFFFFF0512 : 3803                		move.w	d3,d4
(1)  549/FFFFFFFFFFFF0514 : 0042 0004           		ori.w	#%100,d2	; BLUE is ready
(1)  550/FFFFFFFFFFFF0518 :                     .no_blu:
(1)  551/FFFFFFFFFFFF0518 : 8C44                		or.w	d4,d6
(1)  552/FFFFFFFFFFFF051A : E049                		lsr.w	#8,d1
(1)  553/FFFFFFFFFFFF051C : 3AC6                		move.w	d6,(a5)+
(1)  554/FFFFFFFFFFFF051E : DCFC 0002           		adda	#2,a6
(1)  555/FFFFFFFFFFFF0522 : 0C42 0007           		cmpi.w	#%111,d2
(1)  556/FFFFFFFFFFFF0526 : 6608                		bne.s	.no_fnsh
(1)  557/FFFFFFFFFFFF0528 : 4846                		swap	d6
(1)  558/FFFFFFFFFFFF052A : 0446 0001           		subi.w	#1,d6
(1)  559/FFFFFFFFFFFF052E : 4846                		swap	d6
(1)  560/FFFFFFFFFFFF0530 :                     .no_fnsh:
(1)  561/FFFFFFFFFFFF0530 : 51C8 FF84           		dbf	d0,.nxt_pal
(1)  562/FFFFFFFFFFFF0534 : 4846                		swap	d6
(1)  563/FFFFFFFFFFFF0536 : 4A46                		tst.w	d6
(1)  564/FFFFFFFFFFFF0538 : 6604                		bne.s	.no_move
(1)  565/FFFFFFFFFFFF053A : 4278 B8E6           		clr.w	(RAM_FadeMdReq).w
(1)  566/FFFFFFFFFFFF053E :                     .no_move:
(1)  567/FFFFFFFFFFFF053E : 4E75                		rts
(1)  568/FFFFFFFFFFFF0540 :                     
(1)  569/FFFFFFFFFFFF0540 :                     ; --------------------------------------------
(1)  570/FFFFFFFFFFFF0540 :                     ; Fade out
(1)  571/FFFFFFFFFFFF0540 :                     ; --------------------------------------------
(1)  572/FFFFFFFFFFFF0540 :                     
(1)  573/FFFFFFFFFFFF0540 :                     .fade_out:
(1)  574/FFFFFFFFFFFF0540 : 4DF8 A914           		lea	(RAM_Palette).w,a6
(1)  575/FFFFFFFFFFFF0544 : 7040                		moveq	#64,d0				; Num of colors
(1)  576/FFFFFFFFFFFF0546 : 3238 B8E8           		move.w	(RAM_FadeMdIncr).w,d1		; Speed
(1)  577/FFFFFFFFFFFF054A : 3C00                		move.w	d0,d6
(1)  578/FFFFFFFFFFFF054C : 4846                		swap	d6
(1)  579/FFFFFFFFFFFF054E : 0440 0001           		subi.w	#1,d0
(1)  580/FFFFFFFFFFFF0552 :                     .nxt_pal_o:
(1)  581/FFFFFFFFFFFF0552 : 4242                		clr.w	d2			; Reset finished colorbits
(1)  582/FFFFFFFFFFFF0554 : 3E16                		move.w	(a6),d7			; d7 - Input
(1)  583/FFFFFFFFFFFF0556 : 3C07                		move.w	d7,d6
(1)  584/FFFFFFFFFFFF0558 : 0247 0EE0           		andi.w	#%0000111011100000,d7
(1)  585/FFFFFFFFFFFF055C : 0246 000E           		andi.w	#%0000000000001110,d6
(1)  586/FFFFFFFFFFFF0560 : 9C41                		sub.w	d1,d6
(1)  587/FFFFFFFFFFFF0562 : 6A06                		bpl.s	.no_red_o
(1)  588/FFFFFFFFFFFF0564 : 4246                		clr.w	d6
(1)  589/FFFFFFFFFFFF0566 : 0042 0001           		ori.w	#%001,d2		; RED is ready
(1)  590/FFFFFFFFFFFF056A :                     .no_red_o:
(1)  591/FFFFFFFFFFFF056A : 8E46                		or.w	d6,d7
(1)  592/FFFFFFFFFFFF056C : E949                		lsl.w	#4,d1
(1)  593/FFFFFFFFFFFF056E : 3C07                		move.w	d7,d6
(1)  594/FFFFFFFFFFFF0570 : 0247 0E0E           		andi.w	#%0000111000001110,d7
(1)  595/FFFFFFFFFFFF0574 : 0246 00E0           		andi.w	#%0000000011100000,d6
(1)  596/FFFFFFFFFFFF0578 : 9C41                		sub.w	d1,d6
(1)  597/FFFFFFFFFFFF057A : 6A06                		bpl.s	.no_grn_o
(1)  598/FFFFFFFFFFFF057C : 4246                		clr.w	d6
(1)  599/FFFFFFFFFFFF057E : 0042 0002           		ori.w	#%010,d2		; GREEN is ready
(1)  600/FFFFFFFFFFFF0582 :                     .no_grn_o:
(1)  601/FFFFFFFFFFFF0582 : 8E46                		or.w	d6,d7
(1)  602/FFFFFFFFFFFF0584 : E949                		lsl.w	#4,d1
(1)  603/FFFFFFFFFFFF0586 : 3C07                		move.w	d7,d6
(1)  604/FFFFFFFFFFFF0588 : 0247 00EE           		andi.w	#%0000000011101110,d7
(1)  605/FFFFFFFFFFFF058C : 0246 0E00           		andi.w	#%0000111000000000,d6
(1)  606/FFFFFFFFFFFF0590 : 9C41                		sub.w	d1,d6
(1)  607/FFFFFFFFFFFF0592 : 6A06                		bpl.s	.no_blu_o
(1)  608/FFFFFFFFFFFF0594 : 4246                		clr.w	d6
(1)  609/FFFFFFFFFFFF0596 : 0042 0004           		ori.w	#%100,d2		; BLUE is ready
(1)  610/FFFFFFFFFFFF059A :                     .no_blu_o:
(1)  611/FFFFFFFFFFFF059A : 8E46                		or.w	d6,d7
(1)  612/FFFFFFFFFFFF059C : E049                		lsr.w	#8,d1
(1)  613/FFFFFFFFFFFF059E : 3CC7                		move.w	d7,(a6)+
(1)  614/FFFFFFFFFFFF05A0 : 0C42 0007           		cmpi.w	#%111,d2
(1)  615/FFFFFFFFFFFF05A4 : 6608                		bne.s	.no_fnsh_o
(1)  616/FFFFFFFFFFFF05A6 : 4846                		swap	d6
(1)  617/FFFFFFFFFFFF05A8 : 0446 0001           		subi.w	#1,d6
(1)  618/FFFFFFFFFFFF05AC : 4846                		swap	d6
(1)  619/FFFFFFFFFFFF05AE :                     .no_fnsh_o:
(1)  620/FFFFFFFFFFFF05AE : 51C8 FFA2           		dbf	d0,.nxt_pal_o
(1)  621/FFFFFFFFFFFF05B2 : 4846                		swap	d6
(1)  622/FFFFFFFFFFFF05B4 : 4A46                		tst.w	d6
(1)  623/FFFFFFFFFFFF05B6 : 6604                		bne.s	.no_move_o
(1)  624/FFFFFFFFFFFF05B8 : 4278 B8E6           		clr.w	(RAM_FadeMdReq).w
(1)  625/FFFFFFFFFFFF05BC :                     .no_move_o:
(1)  626/FFFFFFFFFFFF05BC : 4E75                		rts
(1)  627/FFFFFFFFFFFF05BE :                     
(1)  628/FFFFFFFFFFFF05BE :                     ; ====================================================================
(1)  629/FFFFFFFFFFFF05BE :                     ; --------------------------------------------------------
(1)  630/FFFFFFFFFFFF05BE :                     ; Genesis DMA
(1)  631/FFFFFFFFFFFF05BE :                     ; --------------------------------------------------------
(1)  632/FFFFFFFFFFFF05BE :                     
(1)  633/FFFFFFFFFFFF05BE :                     ; --------------------------------------------------------
(1)  634/FFFFFFFFFFFF05BE :                     ; Video_LoadArt
(1)  635/FFFFFFFFFFFF05BE :                     ;
(1)  636/FFFFFFFFFFFF05BE :                     ; Loads VDP Graphics using DMA
(1)  637/FFFFFFFFFFFF05BE :                     ;
(1)  638/FFFFFFFFFFFF05BE :                     ; Input:
(1)  639/FFFFFFFFFFFF05BE :                     ; d0.l | Graphics data (NOT a0)
(1)  640/FFFFFFFFFFFF05BE :                     ; d1.w | VRAM location, cell_vram(vram_pos)
(1)  641/FFFFFFFFFFFF05BE :                     ; d2.w | Size (FULL)
(1)  642/FFFFFFFFFFFF05BE :                     ;
(1)  643/FFFFFFFFFFFF05BE :                     ; Breaks:
(1)  644/FFFFFFFFFFFF05BE :                     ; d4-d7,a4
(1)  645/FFFFFFFFFFFF05BE :                     ;
(1)  646/FFFFFFFFFFFF05BE :                     ; Notes:
(1)  647/FFFFFFFFFFFF05BE :                     ; - For a fast transfer call this during VBlank
(1)  648/FFFFFFFFFFFF05BE :                     ; * 32X: MAKE SURE THE SH2 SIDE IS NOT READING ROM
(1)  649/FFFFFFFFFFFF05BE :                     ;        WHEN GETTING HERE.
(1)  650/FFFFFFFFFFFF05BE :                     ; --------------------------------------------------------
(1)  651/FFFFFFFFFFFF05BE :                     
(1)  652/FFFFFFFFFFFF05BE :                     Video_LoadArt:
(1)  653/FFFFFFFFFFFF05BE : 2A00                		move.l	d0,d5
(1)  654/FFFFFFFFFFFF05C0 : DA42                		add.w	d2,d5
(1)  655/FFFFFFFFFFFF05C2 : 6430                		bcc.s	.normal
(1)  656/FFFFFFFFFFFF05C4 : 2A00                		move.l	d0,d5		; <-- DOUBLE TRANSFER
(1)  657/FFFFFFFFFFFF05C6 : 3C01                		move.w	d1,d6
(1)  658/FFFFFFFFFFFF05C8 : 2E05                		move.l	d5,d7		; Top
(1)  659/FFFFFFFFFFFF05CA : 0687 0001 0000      		addi.l	#$010000,d7
(1)  660/FFFFFFFFFFFF05D0 : 0287 00FF 0000      		andi.l	#$FF0000,d7
(1)  661/FFFFFFFFFFFF05D6 : 9E80                		sub.l	d0,d7
(1)  662/FFFFFFFFFFFF05D8 : 6120                		bsr.s	.mk_set
(1)  663/FFFFFFFFFFFF05DA : 2A00                		move.l	d0,d5		; Bottom
(1)  664/FFFFFFFFFFFF05DC : 0685 0001 0000      		addi.l	#$010000,d5
(1)  665/FFFFFFFFFFFF05E2 : 0285 00FF 0000      		andi.l	#$FF0000,d5
(1)  666/FFFFFFFFFFFF05E8 : 2C05                		move.l	d5,d6
(1)  667/FFFFFFFFFFFF05EA : 9C80                		sub.l	d0,d6
(1)  668/FFFFFFFFFFFF05EC : 3E02                		move.w	d2,d7
(1)  669/FFFFFFFFFFFF05EE : 9E46                		sub.w	d6,d7
(1)  670/FFFFFFFFFFFF05F0 : DC41                		add.w	d1,d6
(1)  671/FFFFFFFFFFFF05F2 : 6006                		bra.s	.mk_set
(1)  672/FFFFFFFFFFFF05F4 :                     .normal:
(1)  673/FFFFFFFFFFFF05F4 : 2A00                		move.l	d0,d5
(1)  674/FFFFFFFFFFFF05F6 : 3C01                		move.w	d1,d6
(1)  675/FFFFFFFFFFFF05F8 : 3E02                		move.w	d2,d7
(1)  676/FFFFFFFFFFFF05FA :                     ; d7 - size
(1)  677/FFFFFFFFFFFF05FA :                     ; d6 - vram
(1)  678/FFFFFFFFFFFF05FA :                     ; d5 - data
(1)  679/FFFFFFFFFFFF05FA :                     .mk_set:
(1)  680/FFFFFFFFFFFF05FA : 49F9 00C0 0004      		lea	(vdp_ctrl),a4
(1)  681/FFFFFFFFFFFF0600 : 383C 8100           		move.w	#$8100,d4		; DMA ON
(1)  682/FFFFFFFFFFFF0604 : 1838 B8F9           		move.b	(RAM_VdpRegs+1).w,d4
(1)  683/FFFFFFFFFFFF0608 : 08C4 0004           		bset	#bitDmaEnbl,d4
(1)  684/FFFFFFFFFFFF060C : 3884                		move.w	d4,(a4)
(1)  685/FFFFFFFFFFFF060E : 0287 0000 FFFE      		andi.l	#$0000FFFE,d7
(1)  686/FFFFFFFFFFFF0614 : 6768                		beq.s	.bad_size
(1)  687/FFFFFFFFFFFF0616 :                     ; 		tst.w	d7
(1)  688/FFFFFFFFFFFF0616 :                     ; 		bmi.s	.bad_size
(1)  690/FFFFFFFFFFFF0616 : 4846                		swap	d6
(1)  691/FFFFFFFFFFFF0618 : 4845                		swap	d5
(1)  692/FFFFFFFFFFFF061A : 3C05                		move.w	d5,d6
(1)  693/FFFFFFFFFFFF061C : 4845                		swap	d5
(1)  694/FFFFFFFFFFFF061E : 0246 00F0           		andi.w	#$F0,d6
(1)  695/FFFFFFFFFFFF0622 : 0C06 0020           		cmpi.b	#$20,d6
(1)  696/FFFFFFFFFFFF0626 : 660A                		bne.s	.non_wram
(1)  697/FFFFFFFFFFFF0628 : 48E7 0600           		movem.l	d5-d6,-(sp)		; <-- Save data on stack
(1)  698/FFFFFFFFFFFF062C : 0685 0000 0002      		addi.l	#2,d5
(1)  699/FFFFFFFFFFFF0632 :                     .non_wram:
(1)  700/FFFFFFFFFFFF0632 : 4846                		swap	d6
(1)  702/FFFFFFFFFFFF0634 : 614C                		bsr.s	.shared_setup
(1)  703/FFFFFFFFFFFF0636 : 3886                		move.w	d6,(a4)
(1)  704/FFFFFFFFFFFF0638 : 6100 0CA8           		bsr	System_DmaEnter_ROM
(1)  705/FFFFFFFFFFFF063C : 3887                		move.w	d7,(a4)			; <-- second write
(1)  706/FFFFFFFFFFFF063E : 6100 0CA8           		bsr	System_DmaExit_ROM
(1)  707/FFFFFFFFFFFF0642 : 383C 8100           		move.w	#$8100,d4		; DMA OFF
(1)  708/FFFFFFFFFFFF0646 : 1838 B8F9           		move.b	(RAM_VdpRegs+1).w,d4
(1)  709/FFFFFFFFFFFF064A : 3884                		move.w	d4,(a4)
(1)  711/FFFFFFFFFFFF064C : 4CDF 0060           		movem.l	(sp)+,d5-d6		; --> Get data as d7
(1)  712/FFFFFFFFFFFF0650 : 2E05                		move.l	d5,d7
(1)  713/FFFFFFFFFFFF0652 : 0C06 0020           		cmpi.b	#$20,d6			; Word-RAM?
(1)  714/FFFFFFFFFFFF0656 : 6626                		bne.s	.non_wram_l
(1)  715/FFFFFFFFFFFF0658 : 4846                		swap	d6
(1)  716/FFFFFFFFFFFF065A : 3E06                		move.w	d6,d7			; Destination
(1)  717/FFFFFFFFFFFF065C : 0286 0000 3FFF      		andi.l	#$3FFF,d6
(1)  718/FFFFFFFFFFFF0662 : 0046 4000           		ori.w	#$4000,d6
(1)  719/FFFFFFFFFFFF0666 : E04F                		lsr.w	#8,d7
(1)  720/FFFFFFFFFFFF0668 : EC4F                		lsr.w	#6,d7
(1)  721/FFFFFFFFFFFF066A : 0247 0003           		andi.w	#%11,d7
(1)  722/FFFFFFFFFFFF066E : 3886                		move.w	d6,(a4)			; VDP destination
(1)  723/FFFFFFFFFFFF0670 : 3887                		move.w	d7,(a4)			;
(1)  724/FFFFFFFFFFFF0672 : 2E0C                		move.l	a4,d7
(1)  725/FFFFFFFFFFFF0674 : 2845                		move.l	d5,a4
(1)  726/FFFFFFFFFFFF0676 : 3C14                		move.w	(a4),d6
(1)  727/FFFFFFFFFFFF0678 : 2847                		move.l	d7,a4
(1)  728/FFFFFFFFFFFF067A : 3946 FFFC           		move.w	d6,-4(a4)		; DATA port -4
(1)  729/FFFFFFFFFFFF067E :                     .non_wram_l:
(1)  731/FFFFFFFFFFFF067E :                     .bad_size:
(1)  732/FFFFFFFFFFFF067E : 4E75                		rts
(1)  733/FFFFFFFFFFFF0680 :                     
(1)  734/FFFFFFFFFFFF0680 :                     ; --------------------------------------------------------
(1)  735/FFFFFFFFFFFF0680 :                     
(1)  736/FFFFFFFFFFFF0680 :                     .from_ram:
(1)  737/FFFFFFFFFFFF0680 :                     	; TODO
(1)  738/FFFFFFFFFFFF0680 : 4E75                		rts
(1)  739/FFFFFFFFFFFF0682 :                     
(1)  740/FFFFFFFFFFFF0682 :                     ; --------------------------------------------------------
(1)  741/FFFFFFFFFFFF0682 :                     
(1)  742/FFFFFFFFFFFF0682 :                     .shared_setup:
(1)  743/FFFFFFFFFFFF0682 : EF8F                		lsl.l	#7,d7
(1)  744/FFFFFFFFFFFF0684 : E04F                		lsr.w	#8,d7
(1)  745/FFFFFFFFFFFF0686 : 0087 9400 9300      		ori.l	#$94009300,d7
(1)  746/FFFFFFFFFFFF068C : 2887                		move.l	d7,(a4)
(1)  747/FFFFFFFFFFFF068E : E28D                  		lsr.l	#1,d5			; d5 - Source
(1)  748/FFFFFFFFFFFF0690 : 2E3C 9600 9500       		move.l	#$96009500,d7
(1)  749/FFFFFFFFFFFF0696 : 1E05                 		move.b	d5,d7
(1)  750/FFFFFFFFFFFF0698 : E08D                 		lsr.l	#8,d5
(1)  751/FFFFFFFFFFFF069A : 4847                 		swap	d7
(1)  752/FFFFFFFFFFFF069C : 1E05                 		move.b	d5,d7
(1)  753/FFFFFFFFFFFF069E : 2887                 		move.l	d7,(a4)
(1)  754/FFFFFFFFFFFF06A0 : 3E3C 9700            		move.w	#$9700,d7
(1)  755/FFFFFFFFFFFF06A4 : E08D                 		lsr.l	#8,d5
(1)  756/FFFFFFFFFFFF06A6 : 1E05                 		move.b	d5,d7
(1)  757/FFFFFFFFFFFF06A8 : 3887                 		move.w	d7,(a4)
(1)  758/FFFFFFFFFFFF06AA : 3E06                		move.w	d6,d7			; Destination
(1)  759/FFFFFFFFFFFF06AC : 0286 0000 3FFF      		andi.l	#$3FFF,d6
(1)  760/FFFFFFFFFFFF06B2 : 0046 4000           		ori.w	#$4000,d6
(1)  761/FFFFFFFFFFFF06B6 : E04F                		lsr.w	#8,d7
(1)  762/FFFFFFFFFFFF06B8 : EC4F                		lsr.w	#6,d7
(1)  763/FFFFFFFFFFFF06BA : 0247 0003           		andi.w	#%11,d7
(1)  764/FFFFFFFFFFFF06BE : 0047 0080           		ori.w	#$80,d7
(1)  765/FFFFFFFFFFFF06C2 : 4E75                		rts
(1)  766/FFFFFFFFFFFF06C4 :                     
(1)  767/FFFFFFFFFFFF06C4 :                     ; --------------------------------------------------------
(1)  768/FFFFFFFFFFFF06C4 :                     ; Video_DmaMkEntry
(1)  769/FFFFFFFFFFFF06C4 :                     ;
(1)  770/FFFFFFFFFFFF06C4 :                     ; Makes a new entry in the DMA BLAST list
(1)  771/FFFFFFFFFFFF06C4 :                     ; to be processed on VBlank for the next frame.
(1)  772/FFFFFFFFFFFF06C4 :                     ;
(1)  773/FFFFFFFFFFFF06C4 :                     ; Input:
(1)  774/FFFFFFFFFFFF06C4 :                     ; d0.l | Graphics data location
(1)  775/FFFFFFFFFFFF06C4 :                     ; d1.w | VRAM location - cell_vram(vram_pos)
(1)  776/FFFFFFFFFFFF06C4 :                     ; d2.w | Size
(1)  777/FFFFFFFFFFFF06C4 :                     ;
(1)  778/FFFFFFFFFFFF06C4 :                     ; Breaks:
(1)  779/FFFFFFFFFFFF06C4 :                     ; d5-d7,a6
(1)  780/FFFFFFFFFFFF06C4 :                     ;
(1)  781/FFFFFFFFFFFF06C4 :                     ; Notes:
(1)  782/FFFFFFFFFFFF06C4 :                     ; - Can only be called during DISPLAY ONLY.
(1)  783/FFFFFFFFFFFF06C4 :                     ; - For loading graphics as normal use Video_LoadArt
(1)  784/FFFFFFFFFFFF06C4 :                     ; - SegaCD/CD32X:
(1)  785/FFFFFFFFFFFF06C4 :                     ;   The 4 pixels patch is always applied even
(1)  786/FFFFFFFFFFFF06C4 :                     ;   if not reading from WORD-RAM
(1)  787/FFFFFFFFFFFF06C4 :                     ; --------------------------------------------------------
(1)  788/FFFFFFFFFFFF06C4 :                     
(1)  789/FFFFFFFFFFFF06C4 :                     Video_DmaMkEntry:
(1)  790/FFFFFFFFFFFF06C4 : 2A00                		move.l	d0,d5
(1)  791/FFFFFFFFFFFF06C6 : DA42                		add.w	d2,d5
(1)  792/FFFFFFFFFFFF06C8 : 6430                		bcc.s	.normal
(1)  793/FFFFFFFFFFFF06CA : 2A00                		move.l	d0,d5		; d5 - TOP point
(1)  794/FFFFFFFFFFFF06CC : 3C01                		move.w	d1,d6		; d6 - VRAM position
(1)  795/FFFFFFFFFFFF06CE : 2E05                		move.l	d5,d7
(1)  796/FFFFFFFFFFFF06D0 : 0287 00FF 0000      		andi.l	#$FF0000,d7
(1)  797/FFFFFFFFFFFF06D6 : 0687 0001 0000      		addi.l	#$010000,d7
(1)  798/FFFFFFFFFFFF06DC : 9E80                		sub.l	d0,d7		; d7 - TOP Size
(1)  799/FFFFFFFFFFFF06DE : 6120                		bsr.s	.mk_set
(1)  800/FFFFFFFFFFFF06E0 : 2A00                		move.l	d0,d5		; d5 - BOTTOM point
(1)  801/FFFFFFFFFFFF06E2 : 0685 0001 0000      		addi.l	#$010000,d5
(1)  802/FFFFFFFFFFFF06E8 : 0285 00FF 0000      		andi.l	#$FF0000,d5
(1)  803/FFFFFFFFFFFF06EE : 2C05                		move.l	d5,d6
(1)  804/FFFFFFFFFFFF06F0 : 9C80                		sub.l	d0,d6
(1)  805/FFFFFFFFFFFF06F2 : 3E02                		move.w	d2,d7
(1)  806/FFFFFFFFFFFF06F4 : 9E46                		sub.w	d6,d7
(1)  807/FFFFFFFFFFFF06F6 : DC41                		add.w	d1,d6
(1)  808/FFFFFFFFFFFF06F8 : 6006                		bra.s	.mk_set
(1)  809/FFFFFFFFFFFF06FA :                     .normal:
(1)  810/FFFFFFFFFFFF06FA : 2A00                		move.l	d0,d5
(1)  811/FFFFFFFFFFFF06FC : 3C01                		move.w	d1,d6
(1)  812/FFFFFFFFFFFF06FE : 3E02                		move.w	d2,d7
(1)  813/FFFFFFFFFFFF0700 :                     ; d7 - size
(1)  814/FFFFFFFFFFFF0700 :                     ; d6 - vram
(1)  815/FFFFFFFFFFFF0700 :                     ; d5 - data
(1)  816/FFFFFFFFFFFF0700 :                     .mk_set:
(1)  817/FFFFFFFFFFFF0700 : 4847                		swap	d7
(1)  818/FFFFFFFFFFFF0702 : 3E38 B8E0           		move.w	(RAM_VdpDmaIndx).w,d7
(1)  819/FFFFFFFFFFFF0706 : 0C47 0018           		cmpi.w	#MAX_MDDMATSK,d7
(1)  820/FFFFFFFFFFFF070A : 6C7A                		bge	.ran_out
(1)  821/FFFFFFFFFFFF070C : E94F                		lsl.w	#4,d7			; Size $10
(1)  822/FFFFFFFFFFFF070E : 4DF8 AC14           		lea	(RAM_VdpDmaList).w,a6
(1)  823/FFFFFFFFFFFF0712 : DCC7                		adda	d7,a6
(1)  824/FFFFFFFFFFFF0714 : 4847                		swap	d7
(1)  825/FFFFFFFFFFFF0716 : 0287 0000 FFFE      		andi.l	#$0000FFFE,d7		; d7 - Size
(1)  826/FFFFFFFFFFFF071C : 6768                		beq.s	.ran_out		; If == 0, bad
(1)  827/FFFFFFFFFFFF071E : 4A47                		tst.w	d7
(1)  828/FFFFFFFFFFFF0720 : 6B64                		bmi.s	.ran_out		; If negative, bad
(1)  829/FFFFFFFFFFFF0722 : 31FC 0001 B8E2      		move.w	#1,(RAM_VdpDmaMod).w
(1)  830/FFFFFFFFFFFF0728 : 5278 B8E0           		addq.w	#1,(RAM_VdpDmaIndx).w
(1)  831/FFFFFFFFFFFF072C : E24F                		lsr.w	#1,d7
(1)  832/FFFFFFFFFFFF072E : 0F8E 0001           		movep.w	d7,1(a6)
(1)  834/FFFFFFFFFFFF0732 : 2F05                  		move.l	d5,-(sp)		; Save TOP point
(1)  835/FFFFFFFFFFFF0734 : 2E05                  		move.l	d5,d7
(1)  836/FFFFFFFFFFFF0736 : 0287 00F0 0000        		andi.l	#$F00000,d7
(1)  837/FFFFFFFFFFFF073C : 0C87 0020 0000        		cmpi.l	#$200000,d7
(1)  838/FFFFFFFFFFFF0742 : 6602                  		bne.s	.not_wram
(1)  839/FFFFFFFFFFFF0744 : 5485                  		addq.l	#2,d5			; WORD-RAM patch
(1)  840/FFFFFFFFFFFF0746 :                     .not_wram:
(1)  842/FFFFFFFFFFFF0746 : E28D                  		lsr.l	#1,d5			; d5 - Source
(1)  843/FFFFFFFFFFFF0748 : 2E05                  		move.l	d5,d7
(1)  844/FFFFFFFFFFFF074A : 4847                  		swap	d7
(1)  845/FFFFFFFFFFFF074C : 0B8E 0005            		movep.w	d5,5(a6)
(1)  846/FFFFFFFFFFFF0750 : 1D47 0009            		move.b	d7,9(a6)
(1)  847/FFFFFFFFFFFF0754 : 3E06                		move.w	d6,d7			; Destination
(1)  848/FFFFFFFFFFFF0756 : 0286 0000 3FFF      		andi.l	#$3FFF,d6
(1)  849/FFFFFFFFFFFF075C : 0046 4000           		ori.w	#$4000,d6
(1)  850/FFFFFFFFFFFF0760 : E04F                		lsr.w	#8,d7
(1)  851/FFFFFFFFFFFF0762 : EC4F                		lsr.w	#6,d7
(1)  852/FFFFFFFFFFFF0764 : 0247 0003           		andi.w	#%11,d7
(1)  853/FFFFFFFFFFFF0768 : 0047 0080           		ori.w	#$80,d7
(1)  854/FFFFFFFFFFFF076C : 3D46 000A           		move.w	d6,$A(a6)
(1)  855/FFFFFFFFFFFF0770 : 3D47 000C           		move.w	d7,$C(a6)
(1)  857/FFFFFFFFFFFF0774 :                     	; *** 4pixel PATCH IS ALWAYS APPLIED
(1)  858/FFFFFFFFFFFF0774 :                     	; EVEN IF NOT IN WORD-RAM ***
(1)  859/FFFFFFFFFFFF0774 : 2E0E                		move.l	a6,d7		; Save a6
(1)  860/FFFFFFFFFFFF0776 : 2C5F                		move.l	(sp)+,a6	; Restore TOP point
(1)  861/FFFFFFFFFFFF0778 : 3C16                		move.w	(a6),d6		; Grab the graphs first word
(1)  862/FFFFFFFFFFFF077A : 2C47                		move.l	d7,a6		; Restore a6
(1)  863/FFFFFFFFFFFF077C : 3D46 000E           		move.w	d6,$E(a6)	; Copy to last entry
(1)  865/FFFFFFFFFFFF0780 : 31FC 0000 B8E2      		move.w	#0,(RAM_VdpDmaMod).w
(1)  866/FFFFFFFFFFFF0786 :                     .ran_out:
(1)  867/FFFFFFFFFFFF0786 : 4E75                		rts
(1)  868/FFFFFFFFFFFF0788 :                     
(1)  869/FFFFFFFFFFFF0788 :                     ; --------------------------------------------------------
(1)  870/FFFFFFFFFFFF0788 :                     ; Video_Fill
(1)  871/FFFFFFFFFFFF0788 :                     ;
(1)  872/FFFFFFFFFFFF0788 :                     ; Fill data to VRAM
(1)  873/FFFFFFFFFFFF0788 :                     ;
(1)  874/FFFFFFFFFFFF0788 :                     ; d0.w | WORD to fill
(1)  875/FFFFFFFFFFFF0788 :                     ; d1.w | VRAM destination - cell_vram(dest)
(1)  876/FFFFFFFFFFFF0788 :                     ; d2.w | Size
(1)  877/FFFFFFFFFFFF0788 :                     ;
(1)  878/FFFFFFFFFFFF0788 :                     ; Notes:
(1)  879/FFFFFFFFFFFF0788 :                     ; FILL writes in this order: $56781234, Size $0001 is
(1)  880/FFFFFFFFFFFF0788 :                     ; invalid.
(1)  881/FFFFFFFFFFFF0788 :                     ; --------------------------------------------------------
(1)  882/FFFFFFFFFFFF0788 :                     
(1)  883/FFFFFFFFFFFF0788 :                     Video_Fill:
(1)  884/FFFFFFFFFFFF0788 : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1)  885/FFFFFFFFFFFF078C : 4DF9 00C0 0004      		lea	(vdp_ctrl).l,a6
(1)  886/FFFFFFFFFFFF0792 : 3E3C 8100           		move.w	#$8100,d7
(1)  887/FFFFFFFFFFFF0796 : 1E38 B8F9           		move.b	(RAM_VdpRegs+1).w,d7
(1)  888/FFFFFFFFFFFF079A : 08C7 0004           		bset	#bitDmaEnbl,d7
(1)  889/FFFFFFFFFFFF079E : 3C87                		move.w	d7,(a6)
(1)  890/FFFFFFFFFFFF07A0 : 3E16                .dmaw:		move.w	(a6),d7
(1)  891/FFFFFFFFFFFF07A2 : 0807 0001           		btst	#bitDma,d7
(1)  892/FFFFFFFFFFFF07A6 : 66F8                		bne.s	.dmaw
(1)  893/FFFFFFFFFFFF07A8 : 3CBC 8F01           		move.w	#$8F01,(a6)	; Set increment to $01
(1)  894/FFFFFFFFFFFF07AC : 3E02                		move.w	d2,d7		; d2 - Size
(1)  895/FFFFFFFFFFFF07AE : 0447 0001           		subi.w	#1,d7
(1)  896/FFFFFFFFFFFF07B2 : 2C3C 9400 9300      		move.l	#$94009300,d6
(1)  897/FFFFFFFFFFFF07B8 : 1C07                		move.b	d7,d6
(1)  898/FFFFFFFFFFFF07BA : 4846                		swap	d6
(1)  899/FFFFFFFFFFFF07BC : E04F                		lsr.w	#8,d7
(1)  900/FFFFFFFFFFFF07BE : 1C07                		move.b	d7,d6
(1)  901/FFFFFFFFFFFF07C0 : 4846                		swap	d6
(1)  902/FFFFFFFFFFFF07C2 : 2C86                		move.l	d6,(a6)
(1)  903/FFFFFFFFFFFF07C4 : 3CBC 9780           		move.w	#$9780,(a6)	; DMA Fill mode
(1)  904/FFFFFFFFFFFF07C8 : 3E01                		move.w	d1,d7		; d1 - Destination
(1)  905/FFFFFFFFFFFF07CA : 3C07                		move.w	d7,d6
(1)  906/FFFFFFFFFFFF07CC : 0246 3FFF           		andi.w	#$3FFF,d6
(1)  907/FFFFFFFFFFFF07D0 : 0046 4000           		ori.w	#$4000,d6
(1)  908/FFFFFFFFFFFF07D4 : 4846                		swap	d6
(1)  909/FFFFFFFFFFFF07D6 : 3C07                		move.w	d7,d6
(1)  910/FFFFFFFFFFFF07D8 : E04E                		lsr.w	#8,d6
(1)  911/FFFFFFFFFFFF07DA : EC4E                		lsr.w	#6,d6
(1)  912/FFFFFFFFFFFF07DC : 0246 0003           		andi.w	#%11,d6
(1)  913/FFFFFFFFFFFF07E0 : 0046 0080           		ori.w	#$80,d6
(1)  914/FFFFFFFFFFFF07E4 : 2C86                		move.l	d6,(a6)
(1)  915/FFFFFFFFFFFF07E6 : 3D40 FFFC           		move.w	d0,-4(a6)
(1)  916/FFFFFFFFFFFF07EA : 3E16                .dma_w:		move.w	(a6),d7
(1)  917/FFFFFFFFFFFF07EC : 0807 0001           		btst	#bitDma,d7
(1)  918/FFFFFFFFFFFF07F0 : 66F8                		bne.s	.dma_w
(1)  919/FFFFFFFFFFFF07F2 : 3CBC 8F02           		move.w	#$8F02,(a6)	; Set increment to $02
(1)  920/FFFFFFFFFFFF07F6 : 3E3C 8100           		move.w	#$8100,d7
(1)  921/FFFFFFFFFFFF07FA : 1E38 B8F9           		move.b	(RAM_VdpRegs+1).w,d7
(1)  922/FFFFFFFFFFFF07FE : 3C87                		move.w	d7,(a6)
(1)  923/FFFFFFFFFFFF0800 : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1)  924/FFFFFFFFFFFF0804 : 4E75                		rts
(1)  925/FFFFFFFFFFFF0806 :                     
(1)  926/FFFFFFFFFFFF0806 :                     ; --------------------------------------------------------
(1)  927/FFFFFFFFFFFF0806 :                     ; Video_Copy
(1)  928/FFFFFFFFFFFF0806 :                     ;
(1)  929/FFFFFFFFFFFF0806 :                     ; Copy VRAM data to another location
(1)  930/FFFFFFFFFFFF0806 :                     ;
(1)  931/FFFFFFFFFFFF0806 :                     ; Input:
(1)  932/FFFFFFFFFFFF0806 :                     ; d0.w | VRAM Source      - cell_vram(src)
(1)  933/FFFFFFFFFFFF0806 :                     ; d1.w | VRAM Destination - cell_vram(dest)
(1)  934/FFFFFFFFFFFF0806 :                     ; d2.w | Size
(1)  935/FFFFFFFFFFFF0806 :                     ; --------------------------------------------------------
(1)  936/FFFFFFFFFFFF0806 :                     
(1)  937/FFFFFFFFFFFF0806 :                     ; TODO: test if this works again...
(1)  938/FFFFFFFFFFFF0806 :                     Video_Copy:
(1)  939/FFFFFFFFFFFF0806 : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1)  940/FFFFFFFFFFFF080A : 4DF9 00C0 0004      		lea	(vdp_ctrl),a6
(1)  941/FFFFFFFFFFFF0810 : 3E3C 8100           		move.w	#$8100,d7
(1)  942/FFFFFFFFFFFF0814 : 1E38 B8F9           		move.b	(RAM_VdpRegs+1).w,d7
(1)  943/FFFFFFFFFFFF0818 : 08C7 0004           		bset	#bitDmaEnbl,d7
(1)  944/FFFFFFFFFFFF081C : 3C87                		move.w	d7,(a6)
(1)  945/FFFFFFFFFFFF081E : 3E16                .dmaw:		move.w	(a6),d7
(1)  946/FFFFFFFFFFFF0820 : 0807 0001           		btst	#bitDma,d7
(1)  947/FFFFFFFFFFFF0824 : 66F8                		bne.s	.dmaw
(1)  948/FFFFFFFFFFFF0826 : 3CBC 8F01           		move.w	#$8F01,(a6)		; Increment $01
(1)  949/FFFFFFFFFFFF082A : 3E02                		move.w	d2,d7			; SIZE
(1)  950/FFFFFFFFFFFF082C : 2C3C 9400 9300      		move.l	#$94009300,d6
(1)  951/FFFFFFFFFFFF0832 :                     ; 		lsr.w	#1,d7
(1)  952/FFFFFFFFFFFF0832 : 1C07                		move.b	d7,d6
(1)  953/FFFFFFFFFFFF0834 : 4846                		swap	d6
(1)  954/FFFFFFFFFFFF0836 : E04F                		lsr.w	#8,d7
(1)  955/FFFFFFFFFFFF0838 : 1C07                		move.b	d7,d6
(1)  956/FFFFFFFFFFFF083A : 4846                		swap	d6
(1)  957/FFFFFFFFFFFF083C : 2C86                		move.l	d6,(a6)
(1)  958/FFFFFFFFFFFF083E : 2C3C 9600 9500      		move.l	#$96009500,d6		; SOURCE
(1)  959/FFFFFFFFFFFF0844 : 3E00                		move.w	d0,d7
(1)  960/FFFFFFFFFFFF0846 : 1C07                		move.b	d7,d6
(1)  961/FFFFFFFFFFFF0848 : 4846                		swap	d6
(1)  962/FFFFFFFFFFFF084A : E04F                		lsr.w	#8,d7
(1)  963/FFFFFFFFFFFF084C : 1C07                		move.b	d7,d6
(1)  964/FFFFFFFFFFFF084E : 2C86                		move.l	d6,(a6)
(1)  965/FFFFFFFFFFFF0850 : 3CBC 97C0           		move.w	#$97C0,(a6)		; DMA Copy mode
(1)  966/FFFFFFFFFFFF0854 : 2E02                		move.l	d2,d7			; DESTINATION
(1)  967/FFFFFFFFFFFF0856 : 3C07                		move.w	d7,d6
(1)  968/FFFFFFFFFFFF0858 : 0246 3FFF           		andi.w	#$3FFF,d6
(1)  969/FFFFFFFFFFFF085C : 0046 4000           		ori.w	#$4000,d6
(1)  970/FFFFFFFFFFFF0860 : 4846                		swap	d6
(1)  971/FFFFFFFFFFFF0862 : 3C07                		move.w	d7,d6
(1)  972/FFFFFFFFFFFF0864 : E04E                		lsr.w	#8,d6
(1)  973/FFFFFFFFFFFF0866 : EC4E                		lsr.w	#6,d6
(1)  974/FFFFFFFFFFFF0868 : 0246 0003           		andi.w	#%11,d6
(1)  975/FFFFFFFFFFFF086C : 0046 00C0           		ori.w	#$C0,d6
(1)  976/FFFFFFFFFFFF0870 : 2C86                		move.l	d6,(a6)
(1)  977/FFFFFFFFFFFF0872 : 3D41 FFFC           		move.w	d1,-4(a6)
(1)  978/FFFFFFFFFFFF0876 : 3E16                .dma_w:		move.w	(a6),d7
(1)  979/FFFFFFFFFFFF0878 : 0807 0001           		btst	#bitDma,d7
(1)  980/FFFFFFFFFFFF087C : 66F8                		bne.s	.dma_w
(1)  981/FFFFFFFFFFFF087E : 3CBC 8F02           		move.w	#$8F02,(a6)		; Increment $02
(1)  982/FFFFFFFFFFFF0882 : 3E3C 8100           		move.w	#$8100,d7
(1)  983/FFFFFFFFFFFF0886 : 1E38 B8F9           		move.b	(RAM_VdpRegs+1).w,d7
(1)  984/FFFFFFFFFFFF088A : 3C87                		move.w	d7,(a6)
(1)  985/FFFFFFFFFFFF088C : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1)  986/FFFFFFFFFFFF0890 : 4E75                		rts
(1)  987/FFFFFFFFFFFF0892 :                     
(1)  988/FFFFFFFFFFFF0892 :                     ; --------------------------------------------------------
(1)  989/FFFFFFFFFFFF0892 :                     ; Video_Render
(1)  990/FFFFFFFFFFFF0892 :                     ;
(1)  991/FFFFFFFFFFFF0892 :                     ; Call this during VBlank to update visuals, watch out
(1)  992/FFFFFFFFFFFF0892 :                     ; for the timing for this to properly hide the CRAM dots.
(1)  993/FFFFFFFFFFFF0892 :                     ;
(1)  994/FFFFFFFFFFFF0892 :                     ; This gets normally called on System_Render
(1)  995/FFFFFFFFFFFF0892 :                     ; --------------------------------------------------------
(1)  996/FFFFFFFFFFFF0892 :                     
(1)  997/FFFFFFFFFFFF0892 :                     ; TODO: automate the DMA destination(s)
(1)  998/FFFFFFFFFFFF0892 :                     
(1)  999/FFFFFFFFFFFF0892 :                     Video_Render:
(1) 1000/FFFFFFFFFFFF0892 : 4DF9 00C0 0004      		lea	(vdp_ctrl),a6
(1) 1001/FFFFFFFFFFFF0898 : 3E3C 8100           		move.w	#$8100,d7		; DMA ON
(1) 1002/FFFFFFFFFFFF089C : 1E38 B8F9           		move.b	(RAM_VdpRegs+1).w,d7
(1) 1003/FFFFFFFFFFFF08A0 : 08C7 0004           		bset	#bitDmaEnbl,d7
(1) 1004/FFFFFFFFFFFF08A4 : 3C87                		move.w	d7,(a6)
(1) 1005/FFFFFFFFFFFF08A6 : 6100 0A32           		bsr	System_DmaEnter_RAM
(1) 1006/FFFFFFFFFFFF08AA : 2CBC 9400 9328      		move.l	#$94009328,(a6)
(1) 1007/FFFFFFFFFFFF08B0 : 2CBC 96D1 95E2      		move.l	#$96009500|(RAM_VerScroll<<7&$FF0000)|(RAM_VerScroll>>1&$FF),(a6)
(1) 1008/FFFFFFFFFFFF08B6 : 3CBC 977F           		move.w	#$9700|(RAM_VerScroll>>17&$7F),(a6)
(1) 1009/FFFFFFFFFFFF08BA : 3CBC 4000           		move.w	#$4000,(a6)
(1) 1010/FFFFFFFFFFFF08BE : 3F3C 0090           		move.w	#$0010|$80,-(sp)
(1) 1011/FFFFFFFFFFFF08C2 : 3C9F                		move.w	(sp)+,(a6)
(1) 1012/FFFFFFFFFFFF08C4 : 2CBC 9401 93E0      		move.l	#$940193E0,(a6)
(1) 1013/FFFFFFFFFFFF08CA : 2CBC 96D0 9502      		move.l	#$96009500|(RAM_HorScroll<<7&$FF0000)|(RAM_HorScroll>>1&$FF),(a6)
(1) 1014/FFFFFFFFFFFF08D0 : 3CBC 977F           		move.w	#$9700|(RAM_HorScroll>>17&$7F),(a6)
(1) 1015/FFFFFFFFFFFF08D4 : 3CBC 7C00           		move.w	#$7C00,(a6)
(1) 1016/FFFFFFFFFFFF08D8 : 3F3C 0083           		move.w	#$0003|$80,-(sp)
(1) 1017/FFFFFFFFFFFF08DC : 3C9F                		move.w	(sp)+,(a6)
(1) 1018/FFFFFFFFFFFF08DE : 2CBC 9402 9300      		move.l	#$94029300,(a6)
(1) 1019/FFFFFFFFFFFF08E4 : 2CBC 96D2 950A      		move.l	#$96009500|(RAM_Sprites<<7&$FF0000)|(RAM_Sprites>>1&$FF),(a6)
(1) 1020/FFFFFFFFFFFF08EA : 3CBC 977F           		move.w	#$9700|(RAM_Sprites>>17&$7F),(a6)
(1) 1021/FFFFFFFFFFFF08EE : 3CBC 7800           		move.w	#$7800,(a6)
(1) 1022/FFFFFFFFFFFF08F2 : 3F3C 0083           		move.w	#$0003|$80,-(sp)
(1) 1023/FFFFFFFFFFFF08F6 : 3C9F                		move.w	(sp)+,(a6)
(1) 1024/FFFFFFFFFFFF08F8 : 2CBC 9400 9340      		move.l	#$94009340,(a6)
(1) 1025/FFFFFFFFFFFF08FE : 2CBC 96D4 958A      		move.l	#$96009500|(RAM_Palette<<7&$FF0000)|(RAM_Palette>>1&$FF),(a6)
(1) 1026/FFFFFFFFFFFF0904 : 3CBC 977F           		move.w	#$9700|(RAM_Palette>>17&$7F),(a6)
(1) 1027/FFFFFFFFFFFF0908 : 3CBC C000           		move.w	#$C000,(a6)
(1) 1028/FFFFFFFFFFFF090C : 3F3C 0080           		move.w	#$0000|$80,-(sp)
(1) 1029/FFFFFFFFFFFF0910 : 3C9F                		move.w	(sp)+,(a6)
(1) 1030/FFFFFFFFFFFF0912 : 6100 09CA           		bsr	System_DmaExit_RAM
(1) 1031/FFFFFFFFFFFF0916 : 3E3C 8100           		move.w	#$8100,d7
(1) 1032/FFFFFFFFFFFF091A : 1E38 B8F9           		move.b	(RAM_VdpRegs+1).w,d7
(1) 1033/FFFFFFFFFFFF091E : 3C87                		move.w	d7,(a6)
(1) 1034/FFFFFFFFFFFF0920 : 31FC 0001 B8DE      		move.w	#1,(RAM_SprLinkNum).w				; Reset SPRITE LINK number
(1) 1035/FFFFFFFFFFFF0926 : 31F8 B8D8 B8DA      		move.w	(RAM_SprAutoDmaSet).w,(RAM_SprAutoDmaCurr).w	; Reset Auto-DMA VRAM
(1) 1036/FFFFFFFFFFFF092C :                     
(1) 1037/FFFFFFFFFFFF092C :                     ; --------------------------------------------------------
(1) 1038/FFFFFFFFFFFF092C :                     ; Video_DmaBlast
(1) 1039/FFFFFFFFFFFF092C :                     ;
(1) 1040/FFFFFFFFFFFF092C :                     ; Process DMA tasks from a predefined list in RAM
(1) 1041/FFFFFFFFFFFF092C :                     ;
(1) 1042/FFFFFFFFFFFF092C :                     ; Breaks:
(1) 1043/FFFFFFFFFFFF092C :                     ; d5-d7,a3-a4
(1) 1044/FFFFFFFFFFFF092C :                     ;
(1) 1045/FFFFFFFFFFFF092C :                     ; Notes:
(1) 1046/FFFFFFFFFFFF092C :                     ; - Call this on VBlank ONLY
(1) 1047/FFFFFFFFFFFF092C :                     ; * 32X: This code must be located on RAM as this
(1) 1048/FFFFFFFFFFFF092C :                     ;        sets the RV bit
(1) 1049/FFFFFFFFFFFF092C :                     ; --------------------------------------------------------
(1) 1050/FFFFFFFFFFFF092C :                     
(1) 1051/FFFFFFFFFFFF092C :                     ; Struct:
(1) 1052/FFFFFFFFFFFF092C :                     ; dc.w $94xx,$93xx		; Size
(1) 1053/FFFFFFFFFFFF092C :                     ; dc.w $96xx,$95xx,$97xx	; Source
(1) 1054/FFFFFFFFFFFF092C :                     ; dc.l $4xxx008x 		; VDP destination with DMA bit
(1) 1055/FFFFFFFFFFFF092C :                     ; dc.w $xxxx			; SegaCD/CD32X only: Patch for the first 4 pixels
(1) 1056/FFFFFFFFFFFF092C :                     
(1) 1057/FFFFFFFFFFFF092C :                     ; Video_DmaBlast:
(1) 1058/FFFFFFFFFFFF092C : 4A78 B8E2           		tst.w	(RAM_VdpDmaMod).w		; Got mid-write?
(1) 1059/FFFFFFFFFFFF0930 : 6658                		bne.s	.exit				; then can't transfer this.
(1) 1060/FFFFFFFFFFFF0932 : 4A78 B8E0           		tst.w	(RAM_VdpDmaIndx).w		; Any requests?
(1) 1061/FFFFFFFFFFFF0936 : 6752                		beq.s	.exit
(1) 1062/FFFFFFFFFFFF0938 : 49F9 00C0 0004      		lea	(vdp_ctrl),a4			; a4 - vdp_ctrl
(1) 1063/FFFFFFFFFFFF093E : 47F8 AC14           		lea	(RAM_VdpDmaList).w,a3		; a3 - Blast list
(1) 1064/FFFFFFFFFFFF0942 : 3E3C 8100           		move.w	#$8100,d7			; DMA ON
(1) 1065/FFFFFFFFFFFF0946 : 1E38 B8F9           		move.b	(RAM_VdpRegs+1).w,d7
(1) 1066/FFFFFFFFFFFF094A : 08C7 0004           		bset	#bitDmaEnbl,d7
(1) 1067/FFFFFFFFFFFF094E : 3887                		move.w	d7,(a4)
(1) 1068/FFFFFFFFFFFF0950 : 6100 0990           		bsr	System_DmaEnter_ROM
(1) 1069/FFFFFFFFFFFF0954 : 4A78 B8E0           .next:		tst.w	(RAM_VdpDmaIndx).w
(1) 1070/FFFFFFFFFFFF0958 : 6722                		beq.s	.end
(1) 1071/FFFFFFFFFFFF095A : 289B                		move.l	(a3)+,(a4)		; Size
(1) 1072/FFFFFFFFFFFF095C : 289B                		move.l	(a3)+,(a4)		; Source
(1) 1073/FFFFFFFFFFFF095E : 389B                		move.w	(a3)+,(a4)
(1) 1075/FFFFFFFFFFFF0960 : 361B                		move.w	(a3)+,d3		; Destination
(1) 1076/FFFFFFFFFFFF0962 : 341B                		move.w	(a3)+,d2
(1) 1077/FFFFFFFFFFFF0964 : 3F02                		move.w	d2,-(sp)		; Use stack for this write
(1) 1078/FFFFFFFFFFFF0966 : 3883                		move.w	d3,(a4)
(1) 1079/FFFFFFFFFFFF0968 : 389F                		move.w	(sp)+,(a4)		; *** CPU freezes ***
(1) 1080/FFFFFFFFFFFF096A : 0242 FF7F           		andi.w	#$FF7F,d2		; Remove DMA bit
(1) 1081/FFFFFFFFFFFF096E : 3883                		move.w	d3,(a4)			; Set VDP control normally
(1) 1082/FFFFFFFFFFFF0970 : 3882                		move.w	d2,(a4)
(1) 1083/FFFFFFFFFFFF0972 : 395B FFFC           		move.w	(a3)+,-4(a4)		; Write the patched pixels
(1) 1089/FFFFFFFFFFFF0976 : 5378 B8E0           		subq.w	#1,(RAM_VdpDmaIndx).w
(1) 1090/FFFFFFFFFFFF097A : 60D8                		bra.s	.next
(1) 1091/FFFFFFFFFFFF097C :                     .end:
(1) 1092/FFFFFFFFFFFF097C : 6100 096A           		bsr	System_DmaExit_ROM
(1) 1093/FFFFFFFFFFFF0980 : 3E3C 8100           		move.w	#$8100,d7		; DMA OFF
(1) 1094/FFFFFFFFFFFF0984 : 1E38 B8F9           		move.b	(RAM_VdpRegs+1).w,d7
(1) 1095/FFFFFFFFFFFF0988 : 3887                		move.w	d7,(a4)
(1) 1096/FFFFFFFFFFFF098A :                     .exit:
(1) 1097/FFFFFFFFFFFF098A : 4E75                		rts
(1) 1098/FFFFFFFFFFFF098C :                     
(1) 1099/FFFFFFFFFFFF098C :                     ; ====================================================================
(1) 1100/FFFFFFFFFFFF098C :                     ; ----------------------------------------------------------------
(1) 1101/FFFFFFFFFFFF098C :                     ; Video routines for 32X
(1) 1102/FFFFFFFFFFFF098C :                     ; ----------------------------------------------------------------
(1) 1103/FFFFFFFFFFFF098C :                     
(1) 1104/FFFFFFFFFFFF098C :                     ; --------------------------------------------------------
(1) 1105/FFFFFFFFFFFF098C :                     ; Video_MdMars_SyncFrame
(1) 1106/FFFFFFFFFFFF098C :                     ;
(1) 1107/FFFFFFFFFFFF098C :                     ; Syncronize VBlank with the 32X
(1) 1108/FFFFFFFFFFFF098C :                     ; --------------------------------------------------------
(1) 1109/FFFFFFFFFFFF098C :                     
(1) 1110/FFFFFFFFFFFF098C :                     Video_MdMars_SyncFrame:
(1) 1112/FFFFFFFFFFFF098C : 08F9 0004 00A1      		bset	#4,(sysmars_reg+comm12+1).l
         FFFFFFFFFFFF0992 : 512D             
(1) 1113/FFFFFFFFFFFF0994 : 0839 0004 00A1      .wait_mars:	btst	#4,(sysmars_reg+comm12+1).l
         FFFFFFFFFFFF099A : 512D             
(1) 1114/FFFFFFFFFFFF099C : 66F6                		bne.s	.wait_mars
(1) 1116/FFFFFFFFFFFF099E : 4E75                		rts
(1) 1117/FFFFFFFFFFFF09A0 :                     
(1) 1118/FFFFFFFFFFFF09A0 :                     ; --------------------------------------------------------
(1) 1119/FFFFFFFFFFFF09A0 :                     ; Video_MdMars_VideoMode
(1) 1120/FFFFFFFFFFFF09A0 :                     ;
(1) 1121/FFFFFFFFFFFF09A0 :                     ; Sets Pseudo-Graphics mode on the 32X side.
(1) 1122/FFFFFFFFFFFF09A0 :                     ;
(1) 1123/FFFFFFFFFFFF09A0 :                     ; Input:
(1) 1124/FFFFFFFFFFFF09A0 :                     ; d0.w | Mode number
(1) 1125/FFFFFFFFFFFF09A0 :                     ;        Write $00 to disable all 32X visuals.
(1) 1126/FFFFFFFFFFFF09A0 :                     ;
(1) 1127/FFFFFFFFFFFF09A0 :                     ; Uses:
(1) 1128/FFFFFFFFFFFF09A0 :                     ; d7/a0
(1) 1129/FFFFFFFFFFFF09A0 :                     ;
(1) 1130/FFFFFFFFFFFF09A0 :                     ; Notes:
(1) 1131/FFFFFFFFFFFF09A0 :                     ; Changing modes takes 3 FRAMES to process.
(1) 1132/FFFFFFFFFFFF09A0 :                     ; --------------------------------------------------------
(1) 1133/FFFFFFFFFFFF09A0 :                     
(1) 1134/FFFFFFFFFFFF09A0 :                     Video_MdMars_VideoMode:
(1) 1136/FFFFFFFFFFFF09A0 : 48E7 0180           		movem.l	d7/a0,-(sp)
(1) 1137/FFFFFFFFFFFF09A4 : 2F00                		move.l	d0,-(sp)
(1) 1138/FFFFFFFFFFFF09A6 :                     	rept 3
(1) 1139/FFFFFFFFFFFF09A6 :                     		bsr	Video_MdMars_SyncFrame	; Wait frame and update DREQ RAM
(1) 1140/FFFFFFFFFFFF09A6 :                     		bsr	System_MarsUpdate
(1) 1141/FFFFFFFFFFFF09A6 :                     	endm
(1) 1139/FFFFFFFFFFFF09A6 : 61E4                		bsr	Video_MdMars_SyncFrame	; Wait frame and update DREQ RAM
(1) 1140/FFFFFFFFFFFF09A8 : 6100 0EDE           		bsr	System_MarsUpdate
(1) 1139/FFFFFFFFFFFF09AC : 61DE                		bsr	Video_MdMars_SyncFrame	; Wait frame and update DREQ RAM
(1) 1140/FFFFFFFFFFFF09AE : 6100 0ED8           		bsr	System_MarsUpdate
(1) 1139/FFFFFFFFFFFF09B2 : 61D8                		bsr	Video_MdMars_SyncFrame	; Wait frame and update DREQ RAM
(1) 1140/FFFFFFFFFFFF09B4 : 6100 0ED2           		bsr	System_MarsUpdate
(1) 1142/FFFFFFFFFFFF09B8 : 201F                		move.l	(sp)+,d0
(1) 1143/FFFFFFFFFFFF09BA : 3E00                		move.w	d0,d7
(1) 1144/FFFFFFFFFFFF09BC : 0047 0008           		ori.w	#%00001000,d7
(1) 1145/FFFFFFFFFFFF09C0 : 13C7 00A1 512D      		move.b	d7,(sysmars_reg+(comm12+1)).l
(1) 1146/FFFFFFFFFFFF09C6 : 4CDF 0180           		movem.l	(sp)+,d7/a0
(1) 1148/FFFFFFFFFFFF09CA : 4E75                		rts
(1) 1149/FFFFFFFFFFFF09CC :                     
(1) 1150/FFFFFFFFFFFF09CC :                     ; --------------------------------------------------------
(1) 1151/FFFFFFFFFFFF09CC :                     ; Video_MdMars_LoadPal, Video_MdMars_FadePal
(1) 1152/FFFFFFFFFFFF09CC :                     ;
(1) 1153/FFFFFFFFFFFF09CC :                     ; Loads SVDP 256-color palette data to either
(1) 1154/FFFFFFFFFFFF09CC :                     ; CURRENT palette or FADING palette buffers.
(1) 1155/FFFFFFFFFFFF09CC :                     ;
(1) 1156/FFFFFFFFFFFF09CC :                     ; Input:
(1) 1157/FFFFFFFFFFFF09CC :                     ; d0.w | Start from
(1) 1158/FFFFFFFFFFFF09CC :                     ; d1.w | Number of colors
(1) 1159/FFFFFFFFFFFF09CC :                     ; d2.w | Priority bit 0/1
(1) 1160/FFFFFFFFFFFF09CC :                     ;
(1) 1161/FFFFFFFFFFFF09CC :                     ; Breaks:
(1) 1162/FFFFFFFFFFFF09CC :                     ; d5-d7/a6
(1) 1163/FFFFFFFFFFFF09CC :                     ; --------------------------------------------------------
(1) 1164/FFFFFFFFFFFF09CC :                     
(1) 1165/FFFFFFFFFFFF09CC :                     Video_MdMars_FadePal:
(1) 1167/FFFFFFFFFFFF09CC : 4DF8 A994           		lea	(RAM_MdMarsPalFd).w,a6
(1) 1168/FFFFFFFFFFFF09D0 : 4278 B8F4           		clr.w	(RAM_FadeMarsTmr).w	; Clear fade timer
(1) 1169/FFFFFFFFFFFF09D4 : 6004                		bra.s	vidMars_Pal
(1) 1170/FFFFFFFFFFFF09D6 :                     Video_MdMars_LoadPal:
(1) 1171/FFFFFFFFFFFF09D6 : 4DF8 C604           		lea	(RAM_MdDreq+Dreq_Palette).w,a6
(1) 1172/FFFFFFFFFFFF09DA :                     vidMars_Pal:
(1) 1173/FFFFFFFFFFFF09DA : 2A48                		move.l	a0,a5
(1) 1174/FFFFFFFFFFFF09DC : 7E00                		moveq	#0,d7
(1) 1175/FFFFFFFFFFFF09DE : 3E00                		move.w	d0,d7
(1) 1176/FFFFFFFFFFFF09E0 : DE47                		add.w	d7,d7
(1) 1177/FFFFFFFFFFFF09E2 : DCC7                		adda	d7,a6
(1) 1178/FFFFFFFFFFFF09E4 : 3E01                		move.w	d1,d7
(1) 1179/FFFFFFFFFFFF09E6 : 0447 0001           		subi.w	#1,d7
(1) 1180/FFFFFFFFFFFF09EA : 3C02                		move.w	d2,d6
(1) 1181/FFFFFFFFFFFF09EC : 0246 0001           		andi.w	#1,d6
(1) 1182/FFFFFFFFFFFF09F0 : E25E                		ror.w	#1,d6
(1) 1183/FFFFFFFFFFFF09F2 :                     .loop:
(1) 1184/FFFFFFFFFFFF09F2 : 3A1D                		move.w	(a5)+,d5
(1) 1185/FFFFFFFFFFFF09F4 : 8A46                		or.w	d6,d5
(1) 1186/FFFFFFFFFFFF09F6 : 3CC5                		move.w	d5,(a6)+
(1) 1187/FFFFFFFFFFFF09F8 : 51CF FFF8           		dbf	d7,.loop
(1) 1189/FFFFFFFFFFFF09FC : 4E75                		rts
(1) 1190/FFFFFFFFFFFF09FE :                     
(1) 1191/FFFFFFFFFFFF09FE :                     ; --------------------------------------------------------
(1) 1192/FFFFFFFFFFFF09FE :                     ; Video_MdMars_DoPalFade
(1) 1193/FFFFFFFFFFFF09FE :                     ;
(1) 1194/FFFFFFFFFFFF09FE :                     ; Process the 256-color fading
(1) 1195/FFFFFFFFFFFF09FE :                     ;
(1) 1196/FFFFFFFFFFFF09FE :                     ; Input:
(1) 1197/FFFFFFFFFFFF09FE :                     ; a0   | Palette data
(1) 1198/FFFFFFFFFFFF09FE :                     ; d0.w | Number of colors
(1) 1199/FFFFFFFFFFFF09FE :                     ; d1.w | Speed
(1) 1200/FFFFFFFFFFFF09FE :                     ;
(1) 1201/FFFFFFFFFFFF09FE :                     ; Breaks:
(1) 1202/FFFFFFFFFFFF09FE :                     ; ALL
(1) 1203/FFFFFFFFFFFF09FE :                     ;
(1) 1204/FFFFFFFFFFFF09FE :                     ; Notes:
(1) 1205/FFFFFFFFFFFF09FE :                     ; - CALL THIS OUTSIDE OF VBLANK
(1) 1206/FFFFFFFFFFFF09FE :                     ; - This keeps the Priority bit intact.
(1) 1207/FFFFFFFFFFFF09FE :                     ; ** This takes A LOT of CPU if fading all 256-colors **
(1) 1208/FFFFFFFFFFFF09FE :                     ; --------------------------------------------------------
(1) 1209/FFFFFFFFFFFF09FE :                     
(1) 1210/FFFFFFFFFFFF09FE :                     Video_MdMars_DoPalFade:
(1) 1212/FFFFFFFFFFFF09FE : 0478 0001 B8F4      		subi.w	#1,(RAM_FadeMarsTmr).w
(1) 1213/FFFFFFFFFFFF0A04 : 6A24                		bpl.s	.active
(1) 1214/FFFFFFFFFFFF0A06 : 08F9 0005 00A1      		bset	#5,(sysmars_reg+comm12+1).l		; PAUSE rendering
         FFFFFFFFFFFF0A0C : 512D             
(1) 1215/FFFFFFFFFFFF0A0E : 31F8 B8F2 B8F4      		move.w	(RAM_FadeMarsDelay).w,(RAM_FadeMarsTmr).w
(1) 1216/FFFFFFFFFFFF0A14 : 3E38 B8EE           		move.w	(RAM_FadeMarsReq).w,d7
(1) 1217/FFFFFFFFFFFF0A18 : DE47                		add.w	d7,d7
(1) 1218/FFFFFFFFFFFF0A1A : 3E3B 7010           		move.w	.fade_list(pc,d7.w),d7
(1) 1219/FFFFFFFFFFFF0A1E : 4EBB 700C           		jsr	.fade_list(pc,d7.w)
(1) 1220/FFFFFFFFFFFF0A22 : 08B9 0005 00A1      		bclr	#5,(sysmars_reg+comm12+1).l		; RESTORE rendering
         FFFFFFFFFFFF0A28 : 512D             
(1) 1221/FFFFFFFFFFFF0A2A :                     .active:
(1) 1222/FFFFFFFFFFFF0A2A : 4E75                		rts
(1) 1223/FFFFFFFFFFFF0A2C :                     
(1) 1224/FFFFFFFFFFFF0A2C :                     ; --------------------------------------------
(1) 1225/FFFFFFFFFFFF0A2C :                     
(1) 1226/FFFFFFFFFFFF0A2C :                     .fade_list:
(1) 1227/FFFFFFFFFFFF0A2C : 0006                		dc.w .fade_done-.fade_list
(1) 1228/FFFFFFFFFFFF0A2E : 0008                		dc.w .fade_in-.fade_list
(1) 1229/FFFFFFFFFFFF0A30 : 00B2                		dc.w .fade_out-.fade_list
(1) 1230/FFFFFFFFFFFF0A32 :                     
(1) 1231/FFFFFFFFFFFF0A32 :                     ; --------------------------------------------
(1) 1232/FFFFFFFFFFFF0A32 :                     ; No fade or finished.
(1) 1233/FFFFFFFFFFFF0A32 :                     ; --------------------------------------------
(1) 1234/FFFFFFFFFFFF0A32 :                     
(1) 1235/FFFFFFFFFFFF0A32 :                     .fade_done:
(1) 1236/FFFFFFFFFFFF0A32 : 4E75                		rts
(1) 1237/FFFFFFFFFFFF0A34 :                     
(1) 1238/FFFFFFFFFFFF0A34 :                     ; --------------------------------------------
(1) 1239/FFFFFFFFFFFF0A34 :                     ; Fade in
(1) 1240/FFFFFFFFFFFF0A34 :                     ; --------------------------------------------
(1) 1241/FFFFFFFFFFFF0A34 :                     
(1) 1242/FFFFFFFFFFFF0A34 :                     .fade_in:
(1) 1243/FFFFFFFFFFFF0A34 : 4DF8 A994           		lea	(RAM_MdMarsPalFd).w,a6
(1) 1244/FFFFFFFFFFFF0A38 : 4BF8 C604           		lea	(RAM_MdDreq+Dreq_Palette).w,a5
(1) 1245/FFFFFFFFFFFF0A3C : 303C 0100           		move.w	#256,d0				; Num of colors
(1) 1246/FFFFFFFFFFFF0A40 : 3238 B8F0           		move.w	(RAM_FadeMarsIncr).w,d1		; Speed
(1) 1247/FFFFFFFFFFFF0A44 : 3C00                		move.w	d0,d6
(1) 1248/FFFFFFFFFFFF0A46 : 4846                		swap	d6
(1) 1249/FFFFFFFFFFFF0A48 : 0440 0001           		subi.w	#1,d0
(1) 1250/FFFFFFFFFFFF0A4C :                     .nxt_pal:
(1) 1251/FFFFFFFFFFFF0A4C : 4242                		clr.w	d2		; Reset finished colorbits
(1) 1252/FFFFFFFFFFFF0A4E : 3E16                		move.w	(a6),d7		; d7 - Input
(1) 1253/FFFFFFFFFFFF0A50 : 3C15                		move.w	(a5),d6		; d6 - Output
(1) 1254/FFFFFFFFFFFF0A52 : 3607                		move.w	d7,d3		; RED
(1) 1255/FFFFFFFFFFFF0A54 : 3806                		move.w	d6,d4
(1) 1256/FFFFFFFFFFFF0A56 : 0246 FFE0           		andi.w	#%1111111111100000,d6
(1) 1257/FFFFFFFFFFFF0A5A : 0244 001F           		andi.w	#%0000000000011111,d4
(1) 1258/FFFFFFFFFFFF0A5E : 0243 001F           		andi.w	#%0000000000011111,d3
(1) 1259/FFFFFFFFFFFF0A62 : D841                		add.w	d1,d4
(1) 1260/FFFFFFFFFFFF0A64 : B843                		cmp.w	d3,d4
(1) 1261/FFFFFFFFFFFF0A66 : 6506                		bcs.s	.no_red
(1) 1262/FFFFFFFFFFFF0A68 : 3803                		move.w	d3,d4
(1) 1263/FFFFFFFFFFFF0A6A : 0042 0001           		ori.w	#%001,d2	; RED is ready
(1) 1264/FFFFFFFFFFFF0A6E :                     .no_red:
(1) 1265/FFFFFFFFFFFF0A6E : 8C44                		or.w	d4,d6
(1) 1266/FFFFFFFFFFFF0A70 : EB49                		lsl.w	#5,d1
(1) 1267/FFFFFFFFFFFF0A72 : 3607                		move.w	d7,d3		; GREEN
(1) 1268/FFFFFFFFFFFF0A74 : 3806                		move.w	d6,d4
(1) 1269/FFFFFFFFFFFF0A76 : 0246 FC1F           		andi.w	#%1111110000011111,d6
(1) 1270/FFFFFFFFFFFF0A7A : 0244 03E0           		andi.w	#%0000001111100000,d4
(1) 1271/FFFFFFFFFFFF0A7E : 0243 03E0           		andi.w	#%0000001111100000,d3
(1) 1272/FFFFFFFFFFFF0A82 : D841                		add.w	d1,d4
(1) 1273/FFFFFFFFFFFF0A84 : B843                		cmp.w	d3,d4
(1) 1274/FFFFFFFFFFFF0A86 : 6506                		bcs.s	.no_grn
(1) 1275/FFFFFFFFFFFF0A88 : 3803                		move.w	d3,d4
(1) 1276/FFFFFFFFFFFF0A8A : 0042 0002           		ori.w	#%010,d2	; GREEN is ready
(1) 1277/FFFFFFFFFFFF0A8E :                     .no_grn:
(1) 1278/FFFFFFFFFFFF0A8E : 8C44                		or.w	d4,d6
(1) 1279/FFFFFFFFFFFF0A90 : EB49                		lsl.w	#5,d1
(1) 1280/FFFFFFFFFFFF0A92 : 3607                		move.w	d7,d3		; BLUE
(1) 1281/FFFFFFFFFFFF0A94 : 3806                		move.w	d6,d4
(1) 1282/FFFFFFFFFFFF0A96 : 0246 83FF           		andi.w	#%1000001111111111,d6
(1) 1283/FFFFFFFFFFFF0A9A : 0244 7C00           		andi.w	#%0111110000000000,d4
(1) 1284/FFFFFFFFFFFF0A9E : 0243 7C00           		andi.w	#%0111110000000000,d3
(1) 1285/FFFFFFFFFFFF0AA2 : D841                		add.w	d1,d4
(1) 1286/FFFFFFFFFFFF0AA4 : B843                		cmp.w	d3,d4
(1) 1287/FFFFFFFFFFFF0AA6 : 6506                		bcs.s	.no_blu
(1) 1288/FFFFFFFFFFFF0AA8 : 3803                		move.w	d3,d4
(1) 1289/FFFFFFFFFFFF0AAA : 0042 0004           		ori.w	#%100,d2	; BLUE is ready
(1) 1290/FFFFFFFFFFFF0AAE :                     .no_blu:
(1) 1291/FFFFFFFFFFFF0AAE : 8C44                		or.w	d4,d6
(1) 1292/FFFFFFFFFFFF0AB0 : E049                		lsr.w	#8,d1
(1) 1293/FFFFFFFFFFFF0AB2 : E449                		lsr.w	#2,d1
(1) 1294/FFFFFFFFFFFF0AB4 : 0247 8000           		andi.w	#$8000,d7	; Keep priority bit
(1) 1295/FFFFFFFFFFFF0AB8 : 8C47                		or.w	d7,d6
(1) 1296/FFFFFFFFFFFF0ABA : 3AC6                		move.w	d6,(a5)+
(1) 1297/FFFFFFFFFFFF0ABC : DCFC 0002           		adda	#2,a6
(1) 1298/FFFFFFFFFFFF0AC0 : 0C42 0007           		cmpi.w	#%111,d2
(1) 1299/FFFFFFFFFFFF0AC4 : 6608                		bne.s	.no_fnsh
(1) 1300/FFFFFFFFFFFF0AC6 : 4846                		swap	d6
(1) 1301/FFFFFFFFFFFF0AC8 : 0446 0001           		subi.w	#1,d6
(1) 1302/FFFFFFFFFFFF0ACC : 4846                		swap	d6
(1) 1303/FFFFFFFFFFFF0ACE :                     .no_fnsh:
(1) 1304/FFFFFFFFFFFF0ACE : 51C8 FF7C           		dbf	d0,.nxt_pal
(1) 1305/FFFFFFFFFFFF0AD2 : 4846                		swap	d6
(1) 1306/FFFFFFFFFFFF0AD4 : 4A46                		tst.w	d6
(1) 1307/FFFFFFFFFFFF0AD6 : 6604                		bne.s	.no_move
(1) 1308/FFFFFFFFFFFF0AD8 : 4278 B8EE           		clr.w	(RAM_FadeMarsReq).w
(1) 1309/FFFFFFFFFFFF0ADC :                     .no_move:
(1) 1310/FFFFFFFFFFFF0ADC : 4E75                		rts
(1) 1311/FFFFFFFFFFFF0ADE :                     
(1) 1312/FFFFFFFFFFFF0ADE :                     ; --------------------------------------------
(1) 1313/FFFFFFFFFFFF0ADE :                     ; Fade out
(1) 1314/FFFFFFFFFFFF0ADE :                     ; --------------------------------------------
(1) 1315/FFFFFFFFFFFF0ADE :                     
(1) 1316/FFFFFFFFFFFF0ADE :                     .fade_out:
(1) 1317/FFFFFFFFFFFF0ADE : 4DF8 C604           		lea	(RAM_MdDreq+Dreq_Palette).w,a6
(1) 1318/FFFFFFFFFFFF0AE2 : 303C 0100           		move.w	#256,d0				; Num of colors
(1) 1319/FFFFFFFFFFFF0AE6 : 3238 B8F0           		move.w	(RAM_FadeMarsIncr).w,d1		; Speed
(1) 1320/FFFFFFFFFFFF0AEA : 3C00                		move.w	d0,d6
(1) 1321/FFFFFFFFFFFF0AEC : 4846                		swap	d6
(1) 1322/FFFFFFFFFFFF0AEE : 0440 0001           		subi.w	#1,d0
(1) 1323/FFFFFFFFFFFF0AF2 :                     .nxt_pal_o:
(1) 1324/FFFFFFFFFFFF0AF2 : 4242                		clr.w	d2		; Reset finished colorbits
(1) 1325/FFFFFFFFFFFF0AF4 : 3E16                		move.w	(a6),d7		; d7 - Input
(1) 1326/FFFFFFFFFFFF0AF6 : 3C07                		move.w	d7,d6
(1) 1327/FFFFFFFFFFFF0AF8 : 0247 FFE0           		andi.w	#%1111111111100000,d7
(1) 1328/FFFFFFFFFFFF0AFC : 0246 001F           		andi.w	#%0000000000011111,d6
(1) 1329/FFFFFFFFFFFF0B00 : 9C41                		sub.w	d1,d6
(1) 1330/FFFFFFFFFFFF0B02 : 6A06                		bpl.s	.no_red_o
(1) 1331/FFFFFFFFFFFF0B04 : 4246                		clr.w	d6
(1) 1332/FFFFFFFFFFFF0B06 : 0042 0001           		ori.w	#%001,d2	; RED is ready
(1) 1333/FFFFFFFFFFFF0B0A :                     .no_red_o:
(1) 1334/FFFFFFFFFFFF0B0A : 8E46                		or.w	d6,d7
(1) 1335/FFFFFFFFFFFF0B0C : EB49                		lsl.w	#5,d1
(1) 1336/FFFFFFFFFFFF0B0E : 3C07                		move.w	d7,d6
(1) 1337/FFFFFFFFFFFF0B10 : 0247 FC1F           		andi.w	#%1111110000011111,d7
(1) 1338/FFFFFFFFFFFF0B14 : 0246 03E0           		andi.w	#%0000001111100000,d6
(1) 1339/FFFFFFFFFFFF0B18 : 9C41                		sub.w	d1,d6
(1) 1340/FFFFFFFFFFFF0B1A : 6A06                		bpl.s	.no_grn_o
(1) 1341/FFFFFFFFFFFF0B1C : 4246                		clr.w	d6
(1) 1342/FFFFFFFFFFFF0B1E : 0042 0002           		ori.w	#%010,d2	; GREEN is ready
(1) 1343/FFFFFFFFFFFF0B22 :                     .no_grn_o:
(1) 1344/FFFFFFFFFFFF0B22 : 8E46                		or.w	d6,d7
(1) 1345/FFFFFFFFFFFF0B24 : EB49                		lsl.w	#5,d1
(1) 1346/FFFFFFFFFFFF0B26 : 3C07                		move.w	d7,d6
(1) 1347/FFFFFFFFFFFF0B28 : 0247 83FF           		andi.w	#%1000001111111111,d7
(1) 1348/FFFFFFFFFFFF0B2C : 0246 7C00           		andi.w	#%0111110000000000,d6
(1) 1349/FFFFFFFFFFFF0B30 : 9C41                		sub.w	d1,d6
(1) 1350/FFFFFFFFFFFF0B32 : 6A06                		bpl.s	.no_blu_o
(1) 1351/FFFFFFFFFFFF0B34 : 4246                		clr.w	d6
(1) 1352/FFFFFFFFFFFF0B36 : 0042 0004           		ori.w	#%100,d2	; BLUE is ready
(1) 1353/FFFFFFFFFFFF0B3A :                     .no_blu_o:
(1) 1354/FFFFFFFFFFFF0B3A : 8E46                		or.w	d6,d7
(1) 1355/FFFFFFFFFFFF0B3C : E049                		lsr.w	#8,d1
(1) 1356/FFFFFFFFFFFF0B3E : E449                		lsr.w	#2,d1
(1) 1357/FFFFFFFFFFFF0B40 : 3CC7                		move.w	d7,(a6)+
(1) 1358/FFFFFFFFFFFF0B42 : 0C42 0007           		cmpi.w	#%111,d2
(1) 1359/FFFFFFFFFFFF0B46 : 6608                		bne.s	.no_fnsh_o
(1) 1360/FFFFFFFFFFFF0B48 : 4846                		swap	d6
(1) 1361/FFFFFFFFFFFF0B4A : 0446 0001           		subi.w	#1,d6
(1) 1362/FFFFFFFFFFFF0B4E : 4846                		swap	d6
(1) 1363/FFFFFFFFFFFF0B50 :                     .no_fnsh_o:
(1) 1364/FFFFFFFFFFFF0B50 : 51C8 FFA0           		dbf	d0,.nxt_pal_o
(1) 1365/FFFFFFFFFFFF0B54 : 4846                		swap	d6
(1) 1366/FFFFFFFFFFFF0B56 : 4A46                		tst.w	d6
(1) 1367/FFFFFFFFFFFF0B58 : 6604                		bne.s	.no_move_o
(1) 1368/FFFFFFFFFFFF0B5A : 4278 B8EE           		clr.w	(RAM_FadeMarsReq).w
(1) 1369/FFFFFFFFFFFF0B5E :                     .no_move_o:
(1) 1371/FFFFFFFFFFFF0B5E : 4E75                		rts
(1) 1372/FFFFFFFFFFFF0B60 :                     
(1) 1373/FFFFFFFFFFFF0B60 :                     ; ====================================================================
(1) 1374/FFFFFFFFFFFF0B60 :                     ; ----------------------------------------------------------------
(1) 1375/FFFFFFFFFFFF0B60 :                     ; Genesis VDP screen layer routines
(1) 1376/FFFFFFFFFFFF0B60 :                     ; ----------------------------------------------------------------
(1) 1377/FFFFFFFFFFFF0B60 :                     
(1) 1378/FFFFFFFFFFFF0B60 :                     ; --------------------------------------------------------
(1) 1379/FFFFFFFFFFFF0B60 :                     ; Video_LoadMap
(1) 1380/FFFFFFFFFFFF0B60 :                     ;
(1) 1381/FFFFFFFFFFFF0B60 :                     ; Loads screen map data
(1) 1382/FFFFFFFFFFFF0B60 :                     ; Horizontal order: LEFT to RIGHT, TOP to BOTTOM
(1) 1383/FFFFFFFFFFFF0B60 :                     ;
(1) 1384/FFFFFFFFFFFF0B60 :                     ; Input:
(1) 1385/FFFFFFFFFFFF0B60 :                     ; a0   | Map data
(1) 1386/FFFFFFFFFFFF0B60 :                     ; d0.l | Screen location:
(1) 1387/FFFFFFFFFFFF0B60 :                     ;        locate(x_pos,y_pos,layer)
(1) 1388/FFFFFFFFFFFF0B60 :                     ; d1.l | Map size X/Y:
(1) 1389/FFFFFFFFFFFF0B60 :                     ;        map_size(width,height)
(1) 1390/FFFFFFFFFFFF0B60 :                     ; d2.l | VRAM-cell increment
(1) 1391/FFFFFFFFFFFF0B60 :                     ;
(1) 1392/FFFFFFFFFFFF0B60 :                     ; Breaks:
(1) 1393/FFFFFFFFFFFF0B60 :                     ; --------------------------------------------------------
(1) 1394/FFFFFFFFFFFF0B60 :                     
(1) 1395/FFFFFFFFFFFF0B60 :                     Video_LoadMap:
(1) 1396/FFFFFFFFFFFF0B60 : 48E7 0F02           		movem.l	d4-d7/a6,-(sp)
(1) 1397/FFFFFFFFFFFF0B64 : 4DF9 00C0 0000      		lea	(vdp_data),a6
(1) 1398/FFFFFFFFFFFF0B6A : 6100 01C6           		bsr	vid_PickLayer
(1) 1399/FFFFFFFFFFFF0B6E : 3801                		move.w	d1,d4			; d4 - Y-cell loop
(1) 1400/FFFFFFFFFFFF0B70 :                     .yloop:
(1) 1401/FFFFFFFFFFFF0B70 : 4844                		swap	d4			; YYYY----
(1) 1402/FFFFFFFFFFFF0B72 : 2D45 0004           		move.l	d5,4(a6)		; d5 - Set VDP address
(1) 1403/FFFFFFFFFFFF0B76 : 2E01                		move.l	d1,d7
(1) 1404/FFFFFFFFFFFF0B78 : 4847                		swap	d7			; d7 - X-cell loop
(1) 1405/FFFFFFFFFFFF0B7A :                     .xloop:
(1) 1406/FFFFFFFFFFFF0B7A : 3818                		move.w	(a0)+,d4
(1) 1407/FFFFFFFFFFFF0B7C : 0C44 FFFF           		cmpi.w	#-1,d4			; -1?
(1) 1408/FFFFFFFFFFFF0B80 : 660C                		bne.s	.nonull
(1) 1409/FFFFFFFFFFFF0B82 : 3802                		move.w	d2,d4
(1) 1410/FFFFFFFFFFFF0B84 : 0244 8000           		andi.w	#$8000,d4
(1) 1411/FFFFFFFFFFFF0B88 : 0644 07FF           		addi.w	#SET_NullVram,d4		; Replace with custom blank tile plus priority
(1) 1412/FFFFFFFFFFFF0B8C : 6002                		bra.s	.cont
(1) 1413/FFFFFFFFFFFF0B8E :                     .nonull:
(1) 1414/FFFFFFFFFFFF0B8E : D842                		add.w	d2,d4
(1) 1415/FFFFFFFFFFFF0B90 :                     .cont:
(1) 1416/FFFFFFFFFFFF0B90 : 4847                		swap	d7			; Check for double interlace
(1) 1417/FFFFFFFFFFFF0B92 : 1E38 B904           		move.b	(RAM_VdpRegs+$C).w,d7
(1) 1418/FFFFFFFFFFFF0B96 : 0247 0006           		andi.w	#%110,d7
(1) 1419/FFFFFFFFFFFF0B9A : 0C47 0006           		cmpi.w	#%110,d7
(1) 1420/FFFFFFFFFFFF0B9E : 660E                		bne.s	.nodble
(1) 1421/FFFFFFFFFFFF0BA0 : 3E04                		move.w	d4,d7
(1) 1422/FFFFFFFFFFFF0BA2 : E24F                		lsr.w	#1,d7
(1) 1423/FFFFFFFFFFFF0BA4 : 0247 07FF           		andi.w	#$7FF,d7
(1) 1424/FFFFFFFFFFFF0BA8 : 0244 F800           		andi.w	#$F800,d4
(1) 1425/FFFFFFFFFFFF0BAC : 8847                		or.w	d7,d4
(1) 1426/FFFFFFFFFFFF0BAE :                     .nodble:
(1) 1427/FFFFFFFFFFFF0BAE : 4847                		swap	d7
(1) 1428/FFFFFFFFFFFF0BB0 : 3C84                		move.w	d4,(a6)
(1) 1429/FFFFFFFFFFFF0BB2 : 51CF FFC6           		dbf	d7,.xloop
(1) 1430/FFFFFFFFFFFF0BB6 : DA86                		add.l	d6,d5
(1) 1431/FFFFFFFFFFFF0BB8 : 4844                		swap	d4			; ----YYYY
(1) 1432/FFFFFFFFFFFF0BBA : 51CC FFB4           		dbf	d4,.yloop
(1) 1433/FFFFFFFFFFFF0BBE : 4CDF 40F0           		movem.l	(sp)+,d4-d7/a6
(1) 1434/FFFFFFFFFFFF0BC2 : 4E75                		rts
(1) 1435/FFFFFFFFFFFF0BC4 :                     
(1) 1436/FFFFFFFFFFFF0BC4 :                     ; ====================================================================
(1) 1437/FFFFFFFFFFFF0BC4 :                     ; ----------------------------------------------------------------
(1) 1438/FFFFFFFFFFFF0BC4 :                     ; Text PRINT system, for debugging or quick texts.
(1) 1439/FFFFFFFFFFFF0BC4 :                     ; ----------------------------------------------------------------
(1) 1440/FFFFFFFFFFFF0BC4 :                     
(1) 1441/FFFFFFFFFFFF0BC4 :                     ; --------------------------------------------------------
(1) 1442/FFFFFFFFFFFF0BC4 :                     ; Video_PrintInit
(1) 1443/FFFFFFFFFFFF0BC4 :                     ;
(1) 1444/FFFFFFFFFFFF0BC4 :                     ; Initializes the default Graphics and Palette
(1) 1445/FFFFFFFFFFFF0BC4 :                     ; for the font.
(1) 1446/FFFFFFFFFFFF0BC4 :                     ;
(1) 1447/FFFFFFFFFFFF0BC4 :                     ; Input:
(1) 1448/FFFFFFFFFFFF0BC4 :                     ; a0 | Graphics for the ASCII characters from
(1) 1449/FFFFFFFFFFFF0BC4 :                     ;      $20 (" ") to $7F ("[DEL]")
(1) 1450/FFFFFFFFFFFF0BC4 :                     ; a1 | Palette data to load and use
(1) 1451/FFFFFFFFFFFF0BC4 :                     ;      - Set to 0 to skip
(1) 1452/FFFFFFFFFFFF0BC4 :                     ;
(1) 1453/FFFFFFFFFFFF0BC4 :                     ; Breaks:
(1) 1454/FFFFFFFFFFFF0BC4 :                     ; ALL
(1) 1455/FFFFFFFFFFFF0BC4 :                     ;
(1) 1456/FFFFFFFFFFFF0BC4 :                     ; Notes:
(1) 1457/FFFFFFFFFFFF0BC4 :                     ; - Only call this when the VDP DISPLAY is Off, or
(1) 1458/FFFFFFFFFFFF0BC4 :                     ;   during VBlank
(1) 1459/FFFFFFFFFFFF0BC4 :                     ; --------------------------------------------------------
(1) 1460/FFFFFFFFFFFF0BC4 :                     
(1) 1461/FFFFFFFFFFFF0BC4 :                     Video_PrintInit:
(1) 1462/FFFFFFFFFFFF0BC4 :                     ; 		lea	(ASCII_FONT).l,a0
(1) 1463/FFFFFFFFFFFF0BC4 :                     ; 		lea	(ASCII_PAL).l,a1
(1) 1464/FFFFFFFFFFFF0BC4 : 2008                		move.l	a0,d0
(1) 1465/FFFFFFFFFFFF0BC6 : 323C B000           		move.w	#cell_vram(SET_PrintVram),d1
(1) 1466/FFFFFFFFFFFF0BCA : 343C 0C00           		move.w	#($60*$20),d2			; Graphics data from " " to "[DEL]"
(1) 1467/FFFFFFFFFFFF0BCE : 363C 6580           		move.w	#(SET_PrintPal<<13)|SET_PrintVram,d3
(1) 1468/FFFFFFFFFFFF0BD2 : 0443 0020           		subi.w	#$20,d3
(1) 1469/FFFFFFFFFFFF0BD6 : 31C3 B8E4           		move.w	d3,(RAM_VidPrntVram).w
(1) 1470/FFFFFFFFFFFF0BDA : 6100 F9E2           		bsr	Video_LoadArt
(1) 1471/FFFFFFFFFFFF0BDE :                     Video_PrintPal:
(1) 1472/FFFFFFFFFFFF0BDE : 2009                		move.l	a1,d0
(1) 1473/FFFFFFFFFFFF0BE0 : 6710                		beq.s	.skip_pal
(1) 1474/FFFFFFFFFFFF0BE2 : 2040                		movea.l	d0,a0
(1) 1475/FFFFFFFFFFFF0BE4 : 7030                		moveq	#(SET_PrintPal<<4),d0
(1) 1476/FFFFFFFFFFFF0BE6 : 323C 000F           		move.w	#$0F,d1
(1) 1477/FFFFFFFFFFFF0BEA : 6100 F856           		bsr	Video_LoadPal			; Write to both palette buffers
(1) 1478/FFFFFFFFFFFF0BEE : 6000 F848           		bra	Video_FadePal
(1) 1479/FFFFFFFFFFFF0BF2 :                     .skip_pal:
(1) 1480/FFFFFFFFFFFF0BF2 : 4E75                		rts
(1) 1481/FFFFFFFFFFFF0BF4 :                     
(1) 1482/FFFFFFFFFFFF0BF4 :                     ; --------------------------------------------------------
(1) 1483/FFFFFFFFFFFF0BF4 :                     ; Video_Print
(1) 1484/FFFFFFFFFFFF0BF4 :                     ;
(1) 1485/FFFFFFFFFFFF0BF4 :                     ; Prints string to layer
(1) 1486/FFFFFFFFFFFF0BF4 :                     ;
(1) 1487/FFFFFFFFFFFF0BF4 :                     ; Input:
(1) 1488/FFFFFFFFFFFF0BF4 :                     ; a0   | String data incl. RAM locations if used.
(1) 1489/FFFFFFFFFFFF0BF4 :                     ; d0.l | Screen location:
(1) 1490/FFFFFFFFFFFF0BF4 :                     ;        locate(x_pos,y_pos,layer)
(1) 1491/FFFFFFFFFFFF0BF4 :                     ;
(1) 1492/FFFFFFFFFFFF0BF4 :                     ; Notes:
(1) 1493/FFFFFFFFFFFF0BF4 :                     ; - CALL Video_PrintInit FIRST
(1) 1494/FFFFFFFFFFFF0BF4 :                     ; - YOU MUST put an "align 2" at the end of the
(1) 1495/FFFFFFFFFFFF0BF4 :                     ;   text string to prevent an ADDRESS ERROR
(1) 1496/FFFFFFFFFFFF0BF4 :                     ; --------------------------------------------------------
(1) 1497/FFFFFFFFFFFF0BF4 :                     
(1) 1498/FFFFFFFFFFFF0BF4 :                     ; Text string special codes:
(1) 1499/FFFFFFFFFFFF0BF4 :                     ; $00 - End of line
(1) 1500/FFFFFFFFFFFF0BF4 :                     ; $0A - Next line
(1) 1501/FFFFFFFFFFFF0BF4 :                     ; "//b" - Show BYTE value
(1) 1502/FFFFFFFFFFFF0BF4 :                     ; "//w" - Show WORD value
(1) 1503/FFFFFFFFFFFF0BF4 :                     ; "//l" - Show LONG value
(1) 1504/FFFFFFFFFFFF0BF4 :                     ;
(1) 1505/FFFFFFFFFFFF0BF4 :                     ; If using //b //w //l:
(1) 1506/FFFFFFFFFFFF0BF4 :                     ; After $00, put your RAM addresses in LONGS in the
(1) 1507/FFFFFFFFFFFF0BF4 :                     ; same order you placed your value tags, don't forget to
(1) 1508/FFFFFFFFFFFF0BF4 :                     ; put "align 2" at the end of the string or it will
(1) 1509/FFFFFFFFFFFF0BF4 :                     ; trigger and ADDRESS ERROR
(1) 1510/FFFFFFFFFFFF0BF4 :                     ;
(1) 1511/FFFFFFFFFFFF0BF4 :                     ; TODO: negative values might break
(1) 1512/FFFFFFFFFFFF0BF4 :                     
(1) 1513/FFFFFFFFFFFF0BF4 :                     Video_Print:
(1) 1514/FFFFFFFFFFFF0BF4 : 48E7 0F0E           		movem.l	d4-d7/a4-a6,-(sp)
(1) 1515/FFFFFFFFFFFF0BF8 : 4DF9 00C0 0000      		lea	(vdp_data).l,a6
(1) 1516/FFFFFFFFFFFF0BFE : 6100 0132           		bsr	vid_PickLayer
(1) 1517/FFFFFFFFFFFF0C02 : 4BF8 B754           		lea	(RAM_VidPrntList).w,a5
(1) 1518/FFFFFFFFFFFF0C06 :                     .newjump:
(1) 1519/FFFFFFFFFFFF0C06 : 2D45 0004           		move.l	d5,4(a6)
(1) 1520/FFFFFFFFFFFF0C0A : 2805                		move.l	d5,d4
(1) 1521/FFFFFFFFFFFF0C0C :                     .loop:
(1) 1522/FFFFFFFFFFFF0C0C : 1E18                		move.b	(a0)+,d7
(1) 1523/FFFFFFFFFFFF0C0E : 0247 00FF           		andi.w	#$FF,d7
(1) 1524/FFFFFFFFFFFF0C12 : 676C                		beq	.exit
(1) 1525/FFFFFFFFFFFF0C14 : 0C07 000A           		cmpi.b	#$0A,d7			; $0A - next line?
(1) 1526/FFFFFFFFFFFF0C18 : 672C                		beq.s	.next
(1) 1527/FFFFFFFFFFFF0C1A : 0C07 005C           		cmpi.b	#$5C,d7			; $5C ("\") special?
(1) 1528/FFFFFFFFFFFF0C1E : 6618                		bne.s	.puttext
(1) 1529/FFFFFFFFFFFF0C20 : 1E18                		move.b	(a0)+,d7		; Read next chr
(1) 1530/FFFFFFFFFFFF0C22 : 0C07 0062           		cmpi.b	#"b",d7
(1) 1531/FFFFFFFFFFFF0C26 : 6722                		beq.s	.isbyte
(1) 1532/FFFFFFFFFFFF0C28 : 0C07 0077           		cmpi.b	#"w",d7
(1) 1533/FFFFFFFFFFFF0C2C : 672E                		beq.s	.isword
(1) 1534/FFFFFFFFFFFF0C2E : 0C07 006C           		cmpi.b	#"l",d7
(1) 1535/FFFFFFFFFFFF0C32 : 673A                		beq.s	.islong
(1) 1536/FFFFFFFFFFFF0C34 : 3E3C 005C           		move.w	#"\\",d7		; normal "\"
(1) 1537/FFFFFFFFFFFF0C38 :                     .puttext:
(1) 1538/FFFFFFFFFFFF0C38 : DE78 B8E4           		add.w	(RAM_VidPrntVram).w,d7	; VRAM pos increment
(1) 1539/FFFFFFFFFFFF0C3C : 3C87                		move.w	d7,(a6)
(1) 1540/FFFFFFFFFFFF0C3E : 0684 0002 0000      		addi.l	#$20000,d4		; Next X
(1) 1541/FFFFFFFFFFFF0C44 : 60C6                		bra.s	.loop
(1) 1542/FFFFFFFFFFFF0C46 :                     .next:
(1) 1543/FFFFFFFFFFFF0C46 : DA86                		add.l	d6,d5			; Next line
(1) 1544/FFFFFFFFFFFF0C48 : 60BC                		bra.s	.newjump
(1) 1545/FFFFFFFFFFFF0C4A :                     
(1) 1546/FFFFFFFFFFFF0C4A :                     ; Set print values
(1) 1547/FFFFFFFFFFFF0C4A :                     .isbyte:
(1) 1548/FFFFFFFFFFFF0C4A : 2AC4                		move.l	d4,(a5)+
(1) 1549/FFFFFFFFFFFF0C4C : 3AFC 0001           		move.w	#1,(a5)+
(1) 1550/FFFFFFFFFFFF0C50 : 0684 0004 0000      		addi.l	#$40000,d4
(1) 1551/FFFFFFFFFFFF0C56 : 2D44 0004           		move.l	d4,4(a6)
(1) 1552/FFFFFFFFFFFF0C5A : 60B0                		bra	.loop
(1) 1553/FFFFFFFFFFFF0C5C :                     .isword:
(1) 1554/FFFFFFFFFFFF0C5C : 2AC4                		move.l	d4,(a5)+
(1) 1555/FFFFFFFFFFFF0C5E : 3AFC 0002           		move.w	#2,(a5)+
(1) 1556/FFFFFFFFFFFF0C62 : 0684 0008 0000      		addi.l	#$80000,d4
(1) 1557/FFFFFFFFFFFF0C68 : 2D44 0004           		move.l	d4,4(a6)
(1) 1558/FFFFFFFFFFFF0C6C : 609E                		bra	.loop
(1) 1559/FFFFFFFFFFFF0C6E :                     .islong:
(1) 1560/FFFFFFFFFFFF0C6E : 2AC4                		move.l	d4,(a5)+
(1) 1561/FFFFFFFFFFFF0C70 : 3AFC 0003           		move.w	#3,(a5)+
(1) 1562/FFFFFFFFFFFF0C74 : 0684 0010 0000      		addi.l	#$100000,d4
(1) 1563/FFFFFFFFFFFF0C7A : 2D44 0004           		move.l	d4,4(a6)
(1) 1564/FFFFFFFFFFFF0C7E : 608C                		bra	.loop
(1) 1565/FFFFFFFFFFFF0C80 :                     .exit:
(1) 1566/FFFFFFFFFFFF0C80 :                     
(1) 1567/FFFFFFFFFFFF0C80 :                     ; ----------------------------------------
(1) 1568/FFFFFFFFFFFF0C80 :                     ; Print values
(1) 1569/FFFFFFFFFFFF0C80 :                     ;
(1) 1570/FFFFFFFFFFFF0C80 :                     ; vvvv vvvv tttt
(1) 1571/FFFFFFFFFFFF0C80 :                     ; v - vdp pos
(1) 1572/FFFFFFFFFFFF0C80 :                     ; t - value type
(1) 1573/FFFFFFFFFFFF0C80 :                     ; ----------------------------------------
(1) 1574/FFFFFFFFFFFF0C80 :                     
(1) 1575/FFFFFFFFFFFF0C80 :                     ; reading byte by byte so you don't need
(1) 1576/FFFFFFFFFFFF0C80 :                     ; to re-align anything...
(1) 1577/FFFFFFFFFFFF0C80 : 7800                		moveq	#0,d4
(1) 1578/FFFFFFFFFFFF0C82 : 7A00                		moveq	#0,d5
(1) 1579/FFFFFFFFFFFF0C84 : 7C00                		moveq	#0,d6
(1) 1580/FFFFFFFFFFFF0C86 : 4BF8 B754           		lea	(RAM_VidPrntList).w,a5
(1) 1581/FFFFFFFFFFFF0C8A :                     .nextv:
(1) 1582/FFFFFFFFFFFF0C8A : 4A95                		tst.l	(a5)
(1) 1583/FFFFFFFFFFFF0C8C : 6700 009E           		beq	.nothing
(1) 1584/FFFFFFFFFFFF0C90 : 7800                		moveq	#0,d4		; grab value
(1) 1585/FFFFFFFFFFFF0C92 : 1818                		move.b	(a0)+,d4
(1) 1586/FFFFFFFFFFFF0C94 : E19C                		rol.l	#8,d4
(1) 1587/FFFFFFFFFFFF0C96 : 1818                		move.b	(a0)+,d4
(1) 1588/FFFFFFFFFFFF0C98 : E19C                		rol.l	#8,d4
(1) 1589/FFFFFFFFFFFF0C9A : 1818                		move.b	(a0)+,d4
(1) 1590/FFFFFFFFFFFF0C9C : E19C                		rol.l	#8,d4
(1) 1591/FFFFFFFFFFFF0C9E : 1818                		move.b	(a0)+,d4
(1) 1592/FFFFFFFFFFFF0CA0 : 2844                		movea.l	d4,a4
(1) 1593/FFFFFFFFFFFF0CA2 : 7800                		moveq	#0,d4
(1) 1594/FFFFFFFFFFFF0CA4 :                     	; get value
(1) 1595/FFFFFFFFFFFF0CA4 : 3C2D 0004           		move.w	4(a5),d6
(1) 1596/FFFFFFFFFFFF0CA8 : 0C46 0001           		cmpi.w	#1,d6		; byte?
(1) 1597/FFFFFFFFFFFF0CAC : 660E                		bne.s	.vbyte
(1) 1598/FFFFFFFFFFFF0CAE : 1814                		move.b	(a4),d4
(1) 1599/FFFFFFFFFFFF0CB0 : 2D55 0004           		move.l	(a5),4(a6)
(1) 1600/FFFFFFFFFFFF0CB4 : E91C                		rol.b	#4,d4
(1) 1601/FFFFFFFFFFFF0CB6 : 6158                		bsr.s	.donibl
(1) 1602/FFFFFFFFFFFF0CB8 : E91C                		rol.b	#4,d4
(1) 1603/FFFFFFFFFFFF0CBA : 6154                		bsr.s	.donibl
(1) 1604/FFFFFFFFFFFF0CBC :                     .vbyte:
(1) 1605/FFFFFFFFFFFF0CBC : 0C46 0002           		cmpi.w	#2,d6		; word?
(1) 1606/FFFFFFFFFFFF0CC0 : 661C                		bne.s	.vword
(1) 1607/FFFFFFFFFFFF0CC2 : 1814                		move.b	(a4),d4
(1) 1608/FFFFFFFFFFFF0CC4 : E15C                		rol.w	#8,d4
(1) 1609/FFFFFFFFFFFF0CC6 : 182C 0001           		move.b	1(a4),d4
(1) 1610/FFFFFFFFFFFF0CCA : 2D55 0004           		move.l	(a5),4(a6)
(1) 1611/FFFFFFFFFFFF0CCE : E95C                		rol.w	#4,d4
(1) 1612/FFFFFFFFFFFF0CD0 : 613E                		bsr.s	.donibl
(1) 1613/FFFFFFFFFFFF0CD2 : E95C                		rol.w	#4,d4
(1) 1614/FFFFFFFFFFFF0CD4 : 613A                		bsr.s	.donibl
(1) 1615/FFFFFFFFFFFF0CD6 : E95C                		rol.w	#4,d4
(1) 1616/FFFFFFFFFFFF0CD8 : 6136                		bsr.s	.donibl
(1) 1617/FFFFFFFFFFFF0CDA : E95C                		rol.w	#4,d4
(1) 1618/FFFFFFFFFFFF0CDC : 6132                		bsr.s	.donibl
(1) 1619/FFFFFFFFFFFF0CDE :                     .vword:
(1) 1620/FFFFFFFFFFFF0CDE : 0C46 0003           		cmpi.w	#3,d6		; long?
(1) 1621/FFFFFFFFFFFF0CE2 : 6624                		bne.s	.vlong
(1) 1622/FFFFFFFFFFFF0CE4 : 1814                		move.b	(a4),d4
(1) 1623/FFFFFFFFFFFF0CE6 : E19C                		rol.l	#8,d4
(1) 1624/FFFFFFFFFFFF0CE8 : 182C 0001           		move.b	1(a4),d4
(1) 1625/FFFFFFFFFFFF0CEC : E19C                		rol.l	#8,d4
(1) 1626/FFFFFFFFFFFF0CEE : 182C 0002           		move.b	2(a4),d4
(1) 1627/FFFFFFFFFFFF0CF2 : E19C                		rol.l	#8,d4
(1) 1628/FFFFFFFFFFFF0CF4 : 182C 0003           		move.b	3(a4),d4
(1) 1629/FFFFFFFFFFFF0CF8 : 2D55 0004           		move.l	(a5),4(a6)
(1) 1630/FFFFFFFFFFFF0CFC : 3C3C 0007           		move.w	#7,d6
(1) 1631/FFFFFFFFFFFF0D00 : E99C                .lngloop:	rol.l	#4,d4
(1) 1632/FFFFFFFFFFFF0D02 : 610C                		bsr.s	.donibl
(1) 1633/FFFFFFFFFFFF0D04 : 51CE FFFA           		dbf	d6,.lngloop
(1) 1634/FFFFFFFFFFFF0D08 :                     .vlong:
(1) 1635/FFFFFFFFFFFF0D08 : 429D                		clr.l	(a5)+
(1) 1636/FFFFFFFFFFFF0D0A : 425D                		clr.w	(a5)+
(1) 1637/FFFFFFFFFFFF0D0C : 6000 FF7C           		bra	.nextv
(1) 1638/FFFFFFFFFFFF0D10 :                     ; make nibble byte
(1) 1639/FFFFFFFFFFFF0D10 :                     .donibl:
(1) 1640/FFFFFFFFFFFF0D10 : 3A04                		move.w	d4,d5
(1) 1641/FFFFFFFFFFFF0D12 : 0245 000F           		andi.w	#%1111,d5
(1) 1642/FFFFFFFFFFFF0D16 : 0C05 000A           		cmpi.b	#$A,d5
(1) 1643/FFFFFFFFFFFF0D1A : 6D04                		blt.s	.lowr
(1) 1644/FFFFFFFFFFFF0D1C : DA3C 0007           		add.b	#7,d5
(1) 1645/FFFFFFFFFFFF0D20 :                     .lowr:
(1) 1646/FFFFFFFFFFFF0D20 : DA7C 0030           		add.w	#"0",d5
(1) 1647/FFFFFFFFFFFF0D24 : DA78 B8E4           		add.w	(RAM_VidPrntVram).w,d5
(1) 1648/FFFFFFFFFFFF0D28 : 3C85                		move.w	d5,(a6)
(1) 1649/FFFFFFFFFFFF0D2A : 4E75                		rts
(1) 1650/FFFFFFFFFFFF0D2C :                     ; exit
(1) 1651/FFFFFFFFFFFF0D2C :                     .nothing:
(1) 1652/FFFFFFFFFFFF0D2C : 4CDF 70F0           		movem.l	(sp)+,d4-d7/a4-a6
(1) 1653/FFFFFFFFFFFF0D30 : 4E75                		rts
(1) 1654/FFFFFFFFFFFF0D32 :                     
(1) 1655/FFFFFFFFFFFF0D32 :                     ; ------------------------------------------------
(1) 1656/FFFFFFFFFFFF0D32 :                     ; Shared: pick layer / x pos / y pos and set size
(1) 1657/FFFFFFFFFFFF0D32 :                     ;
(1) 1658/FFFFFFFFFFFF0D32 :                     ; Input:
(1) 1659/FFFFFFFFFFFF0D32 :                     ; d0.l | locate(layer,x,y)
(1) 1660/FFFFFFFFFFFF0D32 :                     ;
(1) 1661/FFFFFFFFFFFF0D32 :                     ; Returns:
(1) 1662/FFFFFFFFFFFF0D32 :                     ; d5.l | VRAM position
(1) 1663/FFFFFFFFFFFF0D32 :                     ; d6.l | Width
(1) 1664/FFFFFFFFFFFF0D32 :                     ; ------------------------------------------------
(1) 1665/FFFFFFFFFFFF0D32 :                     
(1) 1666/FFFFFFFFFFFF0D32 :                     vid_PickLayer:
(1) 1667/FFFFFFFFFFFF0D32 : 2C00                		move.l	d0,d6			; d6 - pick layer
(1) 1668/FFFFFFFFFFFF0D34 : 4846                		swap	d6
(1) 1669/FFFFFFFFFFFF0D36 : 0806 0000           		btst	#0,d6
(1) 1670/FFFFFFFFFFFF0D3A : 671C                		beq.s	.plawnd
(1) 1671/FFFFFFFFFFFF0D3C : 1A38 B8FC           		move.b	(RAM_VdpRegs+4).w,d5	; BG
(1) 1672/FFFFFFFFFFFF0D40 : 3805                		move.w	d5,d4
(1) 1673/FFFFFFFFFFFF0D42 : E24C                		lsr.w	#1,d4
(1) 1674/FFFFFFFFFFFF0D44 : 0244 0003           		andi.w	#%11,d4
(1) 1675/FFFFFFFFFFFF0D48 : 4845                		swap	d5
(1) 1676/FFFFFFFFFFFF0D4A : 3A04                		move.w	d4,d5
(1) 1677/FFFFFFFFFFFF0D4C : 4845                		swap	d5
(1) 1678/FFFFFFFFFFFF0D4E : 0245 0001           		andi.w	#1,d5
(1) 1679/FFFFFFFFFFFF0D52 : E14D                		lsl.w	#8,d5
(1) 1680/FFFFFFFFFFFF0D54 : EB4D                		lsl.w	#5,d5
(1) 1681/FFFFFFFFFFFF0D56 : 6024                		bra.s	.golyr
(1) 1682/FFFFFFFFFFFF0D58 :                     .plawnd:
(1) 1683/FFFFFFFFFFFF0D58 : 1A38 B8FA           		move.b	(RAM_VdpRegs+2).w,d5	; FG
(1) 1684/FFFFFFFFFFFF0D5C : 0806 0001           		btst	#1,d6
(1) 1685/FFFFFFFFFFFF0D60 : 6704                		beq.s	.nowd
(1) 1686/FFFFFFFFFFFF0D62 : 1A38 B8FB           		move.b	(RAM_VdpRegs+3).w,d5	; WINDOW
(1) 1687/FFFFFFFFFFFF0D66 :                     .nowd:
(1) 1688/FFFFFFFFFFFF0D66 : 3805                		move.w	d5,d4
(1) 1689/FFFFFFFFFFFF0D68 : E84C                		lsr.w	#4,d4
(1) 1690/FFFFFFFFFFFF0D6A : 0244 0003           		andi.w	#%11,d4
(1) 1691/FFFFFFFFFFFF0D6E : 4845                		swap	d5
(1) 1692/FFFFFFFFFFFF0D70 : 3A04                		move.w	d4,d5
(1) 1693/FFFFFFFFFFFF0D72 : 4845                		swap	d5
(1) 1694/FFFFFFFFFFFF0D74 : 0245 000E           		andi.w	#%00001110,d5
(1) 1695/FFFFFFFFFFFF0D78 : E14D                		lsl.w	#8,d5
(1) 1696/FFFFFFFFFFFF0D7A : E54D                		lsl.w	#2,d5
(1) 1697/FFFFFFFFFFFF0D7C :                     .golyr:
(1) 1698/FFFFFFFFFFFF0D7C : 0045 4000           		ori.w	#$4000,d5
(1) 1699/FFFFFFFFFFFF0D80 : 3800                		move.w	d0,d4			; Y start pos
(1) 1700/FFFFFFFFFFFF0D82 : 0244 00FF           		andi.w	#$FF,d4			; Y only
(1) 1701/FFFFFFFFFFFF0D86 : ED4C                		lsl.w	#6,d4
(1) 1702/FFFFFFFFFFFF0D88 : 1C38 B908           		move.b	(RAM_VdpRegs+$10).w,d6
(1) 1703/FFFFFFFFFFFF0D8C : 0246 0003           		andi.w	#%11,d6
(1) 1704/FFFFFFFFFFFF0D90 : 670A                		beq.s	.thissz
(1) 1705/FFFFFFFFFFFF0D92 : D844                		add.w	d4,d4			; H64
(1) 1706/FFFFFFFFFFFF0D94 : 0246 0002           		andi.w	#%10,d6
(1) 1707/FFFFFFFFFFFF0D98 : 6702                		beq.s	.thissz
(1) 1708/FFFFFFFFFFFF0D9A : D844                		add.w	d4,d4			; H128
(1) 1709/FFFFFFFFFFFF0D9C :                     .thissz:
(1) 1710/FFFFFFFFFFFF0D9C : DA44                		add.w	d4,d5
(1) 1711/FFFFFFFFFFFF0D9E : 3800                		move.w	d0,d4
(1) 1712/FFFFFFFFFFFF0DA0 : 0244 FF00           		andi.w	#$FF00,d4		; X only
(1) 1713/FFFFFFFFFFFF0DA4 : EE4C                		lsr.w	#7,d4
(1) 1714/FFFFFFFFFFFF0DA6 : DA44                		add.w	d4,d5			; X add
(1) 1715/FFFFFFFFFFFF0DA8 : 4845                		swap	d5
(1) 1716/FFFFFFFFFFFF0DAA : 7C00                		moveq	#0,d6
(1) 1717/FFFFFFFFFFFF0DAC : 3C3C 0040           		move.w	#$40,d6			; Set jump size
(1) 1718/FFFFFFFFFFFF0DB0 : 1838 B908           		move.b	(RAM_VdpRegs+$10).w,d4
(1) 1719/FFFFFFFFFFFF0DB4 : 0244 0003           		andi.w	#%11,d4
(1) 1720/FFFFFFFFFFFF0DB8 : 670A                		beq.s	.thisszj
(1) 1721/FFFFFFFFFFFF0DBA : DC46                		add.w	d6,d6			; H64
(1) 1722/FFFFFFFFFFFF0DBC : 0244 0002           		andi.w	#%10,d4
(1) 1723/FFFFFFFFFFFF0DC0 : 6702                		beq.s	.thisszj
(1) 1724/FFFFFFFFFFFF0DC2 : DC46                		add.w	d6,d6			; H128
(1) 1725/FFFFFFFFFFFF0DC4 :                     .thisszj:
(1) 1726/FFFFFFFFFFFF0DC4 : 4846                		swap	d6
(1) 1727/FFFFFFFFFFFF0DC6 : 4E75                		rts
(1) 1728/FFFFFFFFFFFF0DC8 :                     
(1) 1729/FFFFFFFFFFFF0DC8 :                     ; ====================================================================
(1) 1730/FFFFFFFFFFFF0DC8 :                     ; ----------------------------------------------------------------
(1) 1731/FFFFFFFFFFFF0DC8 :                     ; Objects system
(1) 1732/FFFFFFFFFFFF0DC8 :                     ; ----------------------------------------------------------------
(1) 1733/FFFFFFFFFFFF0DC8 :                     
(1) 1734/FFFFFFFFFFFF0DC8 :                     ; --------------------------------------------------------
(1) 1735/FFFFFFFFFFFF0DC8 :                     ; Init/Clear Objects system
(1) 1736/FFFFFFFFFFFF0DC8 :                     ; --------------------------------------------------------
(1) 1737/FFFFFFFFFFFF0DC8 :                     
(1) 1738/FFFFFFFFFFFF0DC8 :                     Objects_Clear:
(1) 1739/FFFFFFFFFFFF0DC8 : 4DF8 AD94           		lea	(RAM_Objects).w,a6
(1) 1740/FFFFFFFFFFFF0DCC : 3E3C 098F           		move.w	#(sizeof_mdobj*MAX_MDOBJ)-1,d7
(1) 1741/FFFFFFFFFFFF0DD0 :                     .clr:
(1) 1742/FFFFFFFFFFFF0DD0 : 421E                		clr.b	(a6)+
(1) 1743/FFFFFFFFFFFF0DD2 : 51CF FFFC           		dbf	d7,.clr
(1) 1744/FFFFFFFFFFFF0DD6 : 4DF8 B724           		lea	(RAM_ObjDispList).w,a6
(1) 1745/FFFFFFFFFFFF0DDA : 3E3C 0017           		move.w	#MAX_MDOBJ-1,d7
(1) 1746/FFFFFFFFFFFF0DDE :                     .clr_d:
(1) 1747/FFFFFFFFFFFF0DDE : 425E                		clr.w	(a6)+
(1) 1748/FFFFFFFFFFFF0DE0 : 51CF FFFC           		dbf	d7,.clr_d
(1) 1749/FFFFFFFFFFFF0DE4 : 31FC 0001 B8DE      		move.w	#1,(RAM_SprLinkNum).w
(1) 1750/FFFFFFFFFFFF0DEA : 31F8 B8D8 B8DA      		move.w	(RAM_SprAutoDmaSet).w,(RAM_SprAutoDmaCurr).w
(1) 1751/FFFFFFFFFFFF0DF0 : 4278 B8DC           		clr.w	(RAM_SprDrwCntr).w
(1) 1752/FFFFFFFFFFFF0DF4 : 4E75                		rts
(1) 1753/FFFFFFFFFFFF0DF6 :                     
(1) 1754/FFFFFFFFFFFF0DF6 :                     ; --------------------------------------------------------
(1) 1755/FFFFFFFFFFFF0DF6 :                     ; Process object code
(1) 1756/FFFFFFFFFFFF0DF6 :                     ; --------------------------------------------------------
(1) 1757/FFFFFFFFFFFF0DF6 :                     
(1) 1758/FFFFFFFFFFFF0DF6 :                     Objects_Run:
(1) 1759/FFFFFFFFFFFF0DF6 : 4DF8 AD94           		lea	(RAM_Objects).w,a6
(1) 1760/FFFFFFFFFFFF0DFA : 3E3C 0017           		move.w	#MAX_MDOBJ-1,d7
(1) 1761/FFFFFFFFFFFF0DFE :                     .next_one:
(1) 1762/FFFFFFFFFFFF0DFE : 2C16                		move.l	obj_code(a6),d6
(1) 1763/FFFFFFFFFFFF0E00 : 6708                		beq.s	.no_code	; Free slot
(1) 1764/FFFFFFFFFFFF0E02 : 2F07                		move.l	d7,-(sp)
(1) 1765/FFFFFFFFFFFF0E04 : 2A46                		move.l	d6,a5
(1) 1766/FFFFFFFFFFFF0E06 : 4E95                		jsr	(a5)
(1) 1767/FFFFFFFFFFFF0E08 : 2E1F                		move.l	(sp)+,d7
(1) 1768/FFFFFFFFFFFF0E0A :                     .no_code:
(1) 1769/FFFFFFFFFFFF0E0A : DCFC 0066           		adda	#sizeof_mdobj,a6
(1) 1770/FFFFFFFFFFFF0E0E : 51CF FFEE           		dbf	d7,.next_one
(1) 1771/FFFFFFFFFFFF0E12 : 4E75                		rts
(1) 1772/FFFFFFFFFFFF0E14 :                     
(1) 1773/FFFFFFFFFFFF0E14 :                     ; --------------------------------------------------------
(1) 1774/FFFFFFFFFFFF0E14 :                     ; Objects_Set
(1) 1775/FFFFFFFFFFFF0E14 :                     ;
(1) 1776/FFFFFFFFFFFF0E14 :                     ; Input:
(1) 1777/FFFFFFFFFFFF0E14 :                     ; d0.l | Object code pointer
(1) 1778/FFFFFFFFFFFF0E14 :                     ;        If 0: Delete the object
(1) 1779/FFFFFFFFFFFF0E14 :                     ; d1.w | Object slot
(1) 1780/FFFFFFFFFFFF0E14 :                     ; d2.b | Object sub-type (obj_subid)
(1) 1781/FFFFFFFFFFFF0E14 :                     ;
(1) 1782/FFFFFFFFFFFF0E14 :                     ; Breaks:
(1) 1783/FFFFFFFFFFFF0E14 :                     ; d7,a5-a6
(1) 1784/FFFFFFFFFFFF0E14 :                     ; --------------------------------------------------------
(1) 1785/FFFFFFFFFFFF0E14 :                     
(1) 1786/FFFFFFFFFFFF0E14 :                     Objects_Set:
(1) 1787/FFFFFFFFFFFF0E14 : 48E7 0106           		movem.l	d7/a5-a6,-(sp)
(1) 1788/FFFFFFFFFFFF0E18 : 4DF8 AD94           		lea	(RAM_Objects).w,a6
(1) 1789/FFFFFFFFFFFF0E1C : 2A4E                		move.l	a6,a5
(1) 1790/FFFFFFFFFFFF0E1E : 3E3C 0065           		move.w	#sizeof_mdobj-1,d7
(1) 1791/FFFFFFFFFFFF0E22 :                     .clr:
(1) 1792/FFFFFFFFFFFF0E22 : 421D                		clr.b	(a5)+
(1) 1793/FFFFFFFFFFFF0E24 : 51CF FFFC           		dbf	d7,.clr
(1) 1794/FFFFFFFFFFFF0E28 : 3E01                		move.w	d1,d7
(1) 1795/FFFFFFFFFFFF0E2A : CEFC 0066           		mulu.w	#sizeof_mdobj,d7
(1) 1796/FFFFFFFFFFFF0E2E : DCC7                		adda	d7,a6
(1) 1797/FFFFFFFFFFFF0E30 : 4A80                		tst.l	d0
(1) 1798/FFFFFFFFFFFF0E32 : 6706                		beq.s	.from_del
(1) 1799/FFFFFFFFFFFF0E34 : 2C80                		move.l	d0,obj_code(a6)
(1) 1800/FFFFFFFFFFFF0E36 : 1D42 0023           		move.b	d2,obj_subid(a6)
(1) 1801/FFFFFFFFFFFF0E3A :                     .from_del:
(1) 1802/FFFFFFFFFFFF0E3A : 4DF8 B724           		lea	(RAM_ObjDispList).w,a6	; Remove last display slot
(1) 1803/FFFFFFFFFFFF0E3E : 3E01                		move.w	d1,d7
(1) 1804/FFFFFFFFFFFF0E40 : DE47                		add.w	d7,d7
(1) 1805/FFFFFFFFFFFF0E42 : 3DBC 0000 7000      		move.w	#0,(a6,d7.w)
(1) 1806/FFFFFFFFFFFF0E48 : 4CDF 6080           		movem.l	(sp)+,d7/a5-a6
(1) 1807/FFFFFFFFFFFF0E4C : 4E75                		rts
(1) 1808/FFFFFFFFFFFF0E4E :                     
(1) 1809/FFFFFFFFFFFF0E4E :                     ; --------------------------------------------------------
(1) 1810/FFFFFFFFFFFF0E4E :                     ; Objects_Add
(1) 1811/FFFFFFFFFFFF0E4E :                     ;
(1) 1812/FFFFFFFFFFFF0E4E :                     ; Input:
(1) 1813/FFFFFFFFFFFF0E4E :                     ; d0.l | Object code pointer
(1) 1814/FFFFFFFFFFFF0E4E :                     ; d1.b | Object sub-type (obj_subid)
(1) 1815/FFFFFFFFFFFF0E4E :                     ;
(1) 1816/FFFFFFFFFFFF0E4E :                     ; Returns:
(1) 1817/FFFFFFFFFFFF0E4E :                     ; d0.l | Sets -1 if no free slot found.
(1) 1818/FFFFFFFFFFFF0E4E :                     ;
(1) 1819/FFFFFFFFFFFF0E4E :                     ; Breaks:
(1) 1820/FFFFFFFFFFFF0E4E :                     ; d6-d7,a5-a6
(1) 1821/FFFFFFFFFFFF0E4E :                     ; --------------------------------------------------------
(1) 1822/FFFFFFFFFFFF0E4E :                     
(1) 1823/FFFFFFFFFFFF0E4E :                     Objects_Add:
(1) 1824/FFFFFFFFFFFF0E4E : 48E7 0306           		movem.l	d6-d7/a5-a6,-(sp)
(1) 1825/FFFFFFFFFFFF0E52 : 4DF8 AD94           		lea	(RAM_Objects).w,a6
(1) 1826/FFFFFFFFFFFF0E56 : 4BF8 B724           		lea	(RAM_ObjDispList).w,a5
(1) 1827/FFFFFFFFFFFF0E5A : 7C00                		moveq	#0,d6
(1) 1828/FFFFFFFFFFFF0E5C : 3E3C 0017           		move.w	#MAX_MDOBJ-1,d7
(1) 1829/FFFFFFFFFFFF0E60 :                     .search:
(1) 1830/FFFFFFFFFFFF0E60 : 2E16                		move.l	obj_code(a6),d7
(1) 1831/FFFFFFFFFFFF0E62 : 670E                		beq.s	.use_it
(1) 1832/FFFFFFFFFFFF0E64 : 5446                		addq.w	#1*2,d6
(1) 1833/FFFFFFFFFFFF0E66 : DCFC 0066           		adda	#sizeof_mdobj,a6
(1) 1834/FFFFFFFFFFFF0E6A : 51CF FFF4           		dbf	d7,.search
(1) 1835/FFFFFFFFFFFF0E6E : 70FF                		moveq	#-1,d0			; Return ran-out flag
(1) 1836/FFFFFFFFFFFF0E70 : 4E75                		rts
(1) 1837/FFFFFFFFFFFF0E72 :                     .use_it:
(1) 1838/FFFFFFFFFFFF0E72 :                     ; 		add.w	d6,d6
(1) 1839/FFFFFFFFFFFF0E72 : 3BBC 0000 6000      		move.w	#0,(a5,d6.w)		; Remove last display slot
(1) 1840/FFFFFFFFFFFF0E78 : 2A4E                		move.l	a6,a5
(1) 1841/FFFFFFFFFFFF0E7A : 3E3C 0065           		move.w	#sizeof_mdobj-1,d7
(1) 1842/FFFFFFFFFFFF0E7E :                     .clr:
(1) 1843/FFFFFFFFFFFF0E7E : 421D                		clr.b	(a5)+
(1) 1844/FFFFFFFFFFFF0E80 : 51CF FFFC           		dbf	d7,.clr
(1) 1845/FFFFFFFFFFFF0E84 : 4A80                		tst.l	d0
(1) 1846/FFFFFFFFFFFF0E86 : 6706                		beq.s	.from_del
(1) 1847/FFFFFFFFFFFF0E88 : 2C80                		move.l	d0,obj_code(a6)
(1) 1848/FFFFFFFFFFFF0E8A : 1D41 0023           		move.b	d1,obj_subid(a6)
(1) 1849/FFFFFFFFFFFF0E8E :                     .from_del:
(1) 1850/FFFFFFFFFFFF0E8E : 4CDF 60C0           		movem.l	(sp)+,d6-d7/a5-a6
(1) 1851/FFFFFFFFFFFF0E92 : 4E75                		rts
(1) 1852/FFFFFFFFFFFF0E94 :                     
(1) 1853/FFFFFFFFFFFF0E94 :                     ; --------------------------------------------------------
(1) 1854/FFFFFFFFFFFF0E94 :                     ; Draw ALL Objects from display list
(1) 1855/FFFFFFFFFFFF0E94 :                     ;
(1) 1856/FFFFFFFFFFFF0E94 :                     ; Call this BEFORE VBlank.
(1) 1857/FFFFFFFFFFFF0E94 :                     ;
(1) 1858/FFFFFFFFFFFF0E94 :                     ; Breaks:
(1) 1859/FFFFFFFFFFFF0E94 :                     ; d0-d7/a4-a6
(1) 1860/FFFFFFFFFFFF0E94 :                     ; --------------------------------------------------------
(1) 1861/FFFFFFFFFFFF0E94 :                     
(1) 1862/FFFFFFFFFFFF0E94 :                     Objects_Show:
(1) 1863/FFFFFFFFFFFF0E94 : 3C38 B8DE           		move.w	(RAM_SprLinkNum).w,d6	; d6 - Starting sprite link
(1) 1864/FFFFFFFFFFFF0E98 : 4DF8 A414           		lea	(RAM_Sprites).w,a6	; a6 - Genesis sprites
(1) 1865/FFFFFFFFFFFF0E9C : 4BF8 B724           		lea	(RAM_ObjDispList).w,a5
(1) 1866/FFFFFFFFFFFF0EA0 : 3E3C 0017           		move.w	#MAX_MDOBJ-1,d7
(1) 1867/FFFFFFFFFFFF0EA4 :                     .next:
(1) 1868/FFFFFFFFFFFF0EA4 : 3015                		move.w	(a5),d0
(1) 1869/FFFFFFFFFFFF0EA6 : 6700 00AA           		beq	.finish
(1) 1870/FFFFFFFFFFFF0EAA : 425D                		clr.w	(a5)+			; Clear original slot
(1) 1871/FFFFFFFFFFFF0EAC : 72FF                		moveq	#-1,d1			; Write the $FFFFxxxx part and
(1) 1872/FFFFFFFFFFFF0EAE : 3200                		move.w	d0,d1			; the half-address
(1) 1873/FFFFFFFFFFFF0EB0 : 2841                		move.l	d1,a4			; Read object to a4
(1) 1874/FFFFFFFFFFFF0EB2 : 206C 000C           		move.l	obj_map(a4),a0		; Read this object's map
(1) 1875/FFFFFFFFFFFF0EB6 : 302C 001C           		move.w	obj_frame(a4),d0
(1) 1876/FFFFFFFFFFFF0EBA : 182C 0022           		move.b	obj_set(a4),d4
(1) 1877/FFFFFFFFFFFF0EBE : D040                		add.w	d0,d0
(1) 1878/FFFFFFFFFFFF0EC0 : 3030 0000           		move.w	(a0,d0.w),d0
(1) 1879/FFFFFFFFFFFF0EC4 : 41F0 0000           		lea	(a0,d0.w),a0
(1) 1880/FFFFFFFFFFFF0EC8 : 3A18                		move.w	(a0)+,d5
(1) 1881/FFFFFFFFFFFF0ECA : 6700 0082           		beq	.mk_spr
(1) 1882/FFFFFFFFFFFF0ECE : 0445 0001           		subi.w	#1,d5
(1) 1883/FFFFFFFFFFFF0ED2 :                     .mk_pz:
(1) 1884/FFFFFFFFFFFF0ED2 : 0C46 0050           		cmpi.w	#80,d6
(1) 1885/FFFFFFFFFFFF0ED6 : 6E00 0098           		bgt	.ran_out
(1) 1886/FFFFFFFFFFFF0EDA : 4845                		swap	d5
(1) 1887/FFFFFFFFFFFF0EDC : 4846                		swap	d6
(1) 1888/FFFFFFFFFFFF0EDE : 1018                		move.b	(a0)+,d0		; d0 - Y pos
(1) 1889/FFFFFFFFFFFF0EE0 : 1218                		move.b	(a0)+,d1		; d1 - Size
(1) 1890/FFFFFFFFFFFF0EE2 : 3418                		move.w	(a0)+,d2		; d2 - VRAM main
(1) 1891/FFFFFFFFFFFF0EE4 : D0FC 0002           		adda	#2,a0			; <-- Reserved for VRAM double-interlace
(1) 1892/FFFFFFFFFFFF0EE8 : 3618                		move.w	(a0)+,d3		; d3 - X pos
(1) 1893/FFFFFFFFFFFF0EEA : 4880                		ext.w	d0
(1) 1894/FFFFFFFFFFFF0EEC :                     	; X/Y flip checks
(1) 1895/FFFFFFFFFFFF0EEC : 3A2C 0014           		move.w	obj_vram(a4),d5
(1) 1896/FFFFFFFFFFFF0EF0 : 0804 0001           		btst	#bitobj_flipV,d4
(1) 1897/FFFFFFFFFFFF0EF4 : 6714                		beq.s	.vram_v
(1) 1898/FFFFFFFFFFFF0EF6 : 4440                		neg.w	d0
(1) 1899/FFFFFFFFFFFF0EF8 : 0440 0008           		subi.w	#8,d0
(1) 1900/FFFFFFFFFFFF0EFC : 3C01                		move.w	d1,d6
(1) 1901/FFFFFFFFFFFF0EFE : 0246 0003           		andi.w	#%0011,d6
(1) 1902/FFFFFFFFFFFF0F02 : E74E                		lsl.w	#3,d6
(1) 1903/FFFFFFFFFFFF0F04 : 9046                		sub.w	d6,d0
(1) 1904/FFFFFFFFFFFF0F06 : 0045 1000           		ori.w	#$1000,d5
(1) 1905/FFFFFFFFFFFF0F0A :                     .vram_v:
(1) 1906/FFFFFFFFFFFF0F0A : 0804 0000           		btst	#bitobj_flipH,d4
(1) 1907/FFFFFFFFFFFF0F0E : 6714                		beq.s	.vram_h
(1) 1908/FFFFFFFFFFFF0F10 : 4443                		neg.w	d3
(1) 1909/FFFFFFFFFFFF0F12 : 0443 0008           		subi.w	#8,d3
(1) 1910/FFFFFFFFFFFF0F16 : 3C01                		move.w	d1,d6
(1) 1911/FFFFFFFFFFFF0F18 : 0246 000C           		andi.w	#%1100,d6
(1) 1912/FFFFFFFFFFFF0F1C : DC46                		add.w	d6,d6
(1) 1913/FFFFFFFFFFFF0F1E : 9646                		sub.w	d6,d3
(1) 1914/FFFFFFFFFFFF0F20 : 0045 0800           		ori.w	#$0800,d5
(1) 1915/FFFFFFFFFFFF0F24 :                     .vram_h:
(1) 1916/FFFFFFFFFFFF0F24 : D445                		add.w	d5,d2
(1) 1917/FFFFFFFFFFFF0F26 : D06C 0008           		add.w	obj_y(a4),d0
(1) 1918/FFFFFFFFFFFF0F2A : D66C 0004           		add.w	obj_x(a4),d3
(1) 1919/FFFFFFFFFFFF0F2E : D07C 0080           		add.w	#$80,d0
(1) 1920/FFFFFFFFFFFF0F32 : D67C 0080           		add.w	#$80,d3
(1) 1921/FFFFFFFFFFFF0F36 : 4846                		swap	d6
(1) 1922/FFFFFFFFFFFF0F38 : E149                		lsl.w	#8,d1			; Size + Link
(1) 1923/FFFFFFFFFFFF0F3A : 8246                		or.w	d6,d1
(1) 1924/FFFFFFFFFFFF0F3C : 3CC0                		move.w	d0,(a6)+
(1) 1925/FFFFFFFFFFFF0F3E : 3CC1                		move.w	d1,(a6)+
(1) 1926/FFFFFFFFFFFF0F40 : 3CC2                		move.w	d2,(a6)+
(1) 1927/FFFFFFFFFFFF0F42 : 3CC3                		move.w	d3,(a6)+
(1) 1928/FFFFFFFFFFFF0F44 : DC7C 0001           		add.w	#1,d6
(1) 1929/FFFFFFFFFFFF0F48 : 4845                		swap	d5
(1) 1930/FFFFFFFFFFFF0F4A : 51CD FF86           		dbf	d5,.mk_pz
(1) 1931/FFFFFFFFFFFF0F4E :                     .mk_spr:
(1) 1932/FFFFFFFFFFFF0F4E : 51CF FF54           		dbf	d7,.next
(1) 1933/FFFFFFFFFFFF0F52 :                     .finish:
(1) 1934/FFFFFFFFFFFF0F52 : 4DF8 A414           		lea	(RAM_Sprites).w,a6	; Check last sprite piece
(1) 1935/FFFFFFFFFFFF0F56 : 0C46 0001           		cmpi.w	#1,d6
(1) 1936/FFFFFFFFFFFF0F5A : 6714                		beq.s	.ran_out
(1) 1937/FFFFFFFFFFFF0F5C : 0C46 0050           		cmpi.w	#80,d6
(1) 1938/FFFFFFFFFFFF0F60 : 6E0E                		bgt.s	.ran_out
(1) 1939/FFFFFFFFFFFF0F62 : 3E06                		move.w	d6,d7
(1) 1940/FFFFFFFFFFFF0F64 : 0447 0001           		subi.w	#1,d7
(1) 1941/FFFFFFFFFFFF0F68 : E74F                		lsl.w	#3,d7
(1) 1942/FFFFFFFFFFFF0F6A : DCC7                		adda	d7,a6
(1) 1943/FFFFFFFFFFFF0F6C : 429E                		clr.l	(a6)+
(1) 1944/FFFFFFFFFFFF0F6E : 429E                		clr.l	(a6)+
(1) 1945/FFFFFFFFFFFF0F70 :                     .ran_out:
(1) 1946/FFFFFFFFFFFF0F70 : 31C6 B8DE           		move.w	d6,(RAM_SprLinkNum).w
(1) 1947/FFFFFFFFFFFF0F74 : 4E75                		rts
(1) 1948/FFFFFFFFFFFF0F76 :                     
(1) 1949/FFFFFFFFFFFF0F76 :                     ; ====================================================================
(1) 1950/FFFFFFFFFFFF0F76 :                     ; --------------------------------------------------------
(1) 1951/FFFFFFFFFFFF0F76 :                     ; Object subroutines
(1) 1952/FFFFFFFFFFFF0F76 :                     ;
(1) 1953/FFFFFFFFFFFF0F76 :                     ; These can ONLY be called on the current object's code.
(1) 1954/FFFFFFFFFFFF0F76 :                     ; --------------------------------------------------------
(1) 1955/FFFFFFFFFFFF0F76 :                     
(1) 1956/FFFFFFFFFFFF0F76 :                     ; --------------------------------------------------------
(1) 1957/FFFFFFFFFFFF0F76 :                     ; object_ResetVars
(1) 1958/FFFFFFFFFFFF0F76 :                     ;
(1) 1959/FFFFFFFFFFFF0F76 :                     ; Call this BEFORE using animation
(1) 1960/FFFFFFFFFFFF0F76 :                     ;
(1) 1961/FFFFFFFFFFFF0F76 :                     ; Input:
(1) 1962/FFFFFFFFFFFF0F76 :                     ; a6 | This object
(1) 1963/FFFFFFFFFFFF0F76 :                     ;
(1) 1964/FFFFFFFFFFFF0F76 :                     ; Breaks:
(1) 1965/FFFFFFFFFFFF0F76 :                     ; d7
(1) 1966/FFFFFFFFFFFF0F76 :                     ; --------------------------------------------------------
(1) 1967/FFFFFFFFFFFF0F76 :                     
(1) 1968/FFFFFFFFFFFF0F76 :                     object_ResetVars:
(1) 1969/FFFFFFFFFFFF0F76 : 48E7 0304           		movem.l	d6-d7/a5,-(sp)
(1) 1970/FFFFFFFFFFFF0F7A : 4BEE 0026           		lea	obj_ram(a6),a5
(1) 1971/FFFFFFFFFFFF0F7E : 3C3C 003F           		move.w	#(sizeof_mdobj-obj_ram)-1,d6
(1) 1972/FFFFFFFFFFFF0F82 : 7E00                		moveq	#0,d7
(1) 1973/FFFFFFFFFFFF0F84 : 1AC7                .clr_ram:	move.b	d7,(a5)+
(1) 1974/FFFFFFFFFFFF0F86 : 51CE FFFC           		dbf	d6,.clr_ram
(1) 1975/FFFFFFFFFFFF0F8A : 4CDF 20C0           		movem.l	(sp)+,d6-d7/a5
(1) 1976/FFFFFFFFFFFF0F8E : 4E75                		rts
(1) 1977/FFFFFFFFFFFF0F90 :                     
(1) 1978/FFFFFFFFFFFF0F90 :                     ; --------------------------------------------------------
(1) 1979/FFFFFFFFFFFF0F90 :                     ; object_Display
(1) 1980/FFFFFFFFFFFF0F90 :                     ;
(1) 1981/FFFFFFFFFFFF0F90 :                     ; Makes this object visible, requires sprite map data
(1) 1982/FFFFFFFFFFFF0F90 :                     ; (obj_map) and VRAM location (obj_vram) set up
(1) 1983/FFFFFFFFFFFF0F90 :                     ; before calling this.
(1) 1984/FFFFFFFFFFFF0F90 :                     ;
(1) 1985/FFFFFFFFFFFF0F90 :                     ; Input:
(1) 1986/FFFFFFFFFFFF0F90 :                     ; a6 | This object
(1) 1987/FFFFFFFFFFFF0F90 :                     ;
(1) 1988/FFFFFFFFFFFF0F90 :                     ; Returns:
(1) 1989/FFFFFFFFFFFF0F90 :                     ; d0 | -1 If ran out of display slots
(1) 1990/FFFFFFFFFFFF0F90 :                     ;
(1) 1991/FFFFFFFFFFFF0F90 :                     ; Breaks:
(1) 1992/FFFFFFFFFFFF0F90 :                     ; a5,d4-d7
(1) 1993/FFFFFFFFFFFF0F90 :                     ; --------------------------------------------------------
(1) 1994/FFFFFFFFFFFF0F90 :                     
(1) 1995/FFFFFFFFFFFF0F90 :                     ; *** GENESIS map ***
(1) 1996/FFFFFFFFFFFF0F90 :                     ; mapdata:
(1) 1997/FFFFFFFFFFFF0F90 :                     ;       dc.w .frame0-mapdata
(1) 1998/FFFFFFFFFFFF0F90 :                     ;       dc.w .frame1-mapdata
(1) 1999/FFFFFFFFFFFF0F90 :                     ;       ...
(1) 2000/FFFFFFFFFFFF0F90 :                     ; .frame0:
(1) 2001/FFFFFFFFFFFF0F90 :                     ;       dc.w numofpz
(1) 2002/FFFFFFFFFFFF0F90 :                     ;       dc.b YY,SS
(1) 2003/FFFFFFFFFFFF0F90 :                     ;       dc.w vram_normal
(1) 2004/FFFFFFFFFFFF0F90 :                     ;       dc.w vram_half
(1) 2005/FFFFFFFFFFFF0F90 :                     ;       dc.w XXXX
(1) 2006/FFFFFFFFFFFF0F90 :                     ;       ; next frame
(1) 2007/FFFFFFFFFFFF0F90 :                     ;       align 2
(1) 2008/FFFFFFFFFFFF0F90 :                     ;
(1) 2009/FFFFFFFFFFFF0F90 :                     ; *** 32X map ***
(1) 2010/FFFFFFFFFFFF0F90 :                     ; TODO
(1) 2011/FFFFFFFFFFFF0F90 :                     
(1) 2012/FFFFFFFFFFFF0F90 :                     object_Display:
(1) 2013/FFFFFFFFFFFF0F90 : 48E7 0104           		movem.l	d7/a5,-(sp)
(1) 2014/FFFFFFFFFFFF0F94 : 4BF8 B724           		lea	(RAM_ObjDispList).w,a5
(1) 2015/FFFFFFFFFFFF0F98 : 3E3C 0017           		move.w	#MAX_MDOBJ-1,d7
(1) 2016/FFFFFFFFFFFF0F9C :                     .srch:
(1) 2017/FFFFFFFFFFFF0F9C : 4A55                		tst.w	(a5)
(1) 2018/FFFFFFFFFFFF0F9E : 670C                		beq.s	.this_one
(1) 2019/FFFFFFFFFFFF0FA0 : DAFC 0002           		adda	#2,a5
(1) 2020/FFFFFFFFFFFF0FA4 : 51CF FFF6           		dbf	d7,.srch
(1) 2021/FFFFFFFFFFFF0FA8 : 70FF                		moveq	#-1,d0
(1) 2022/FFFFFFFFFFFF0FAA : 6002                		bra.s	.ran_out
(1) 2023/FFFFFFFFFFFF0FAC :                     .this_one:
(1) 2024/FFFFFFFFFFFF0FAC : 3A8E                		move.w	a6,(a5)
(1) 2025/FFFFFFFFFFFF0FAE :                     .ran_out:
(1) 2026/FFFFFFFFFFFF0FAE : 4CDF 2080           		movem.l	(sp)+,d7/a5
(1) 2027/FFFFFFFFFFFF0FB2 : 4E75                		rts
(1) 2028/FFFFFFFFFFFF0FB4 :                     
(1) 2029/FFFFFFFFFFFF0FB4 :                     ; --------------------------------------------------------
(1) 2030/FFFFFFFFFFFF0FB4 :                     ; object_DMA, object_DMA_Auto
(1) 2031/FFFFFFFFFFFF0FB4 :                     ;
(1) 2032/FFFFFFFFFFFF0FB4 :                     ; Makes DMA graphics entry for this object,
(1) 2033/FFFFFFFFFFFF0FB4 :                     ; for Genesis VDP Sprites ONLY.
(1) 2034/FFFFFFFFFFFF0FB4 :                     ;
(1) 2035/FFFFFFFFFFFF0FB4 :                     ; Input:
(1) 2036/FFFFFFFFFFFF0FB4 :                     ; a6   | This object
(1) 2037/FFFFFFFFFFFF0FB4 :                     ; a0   | DMA map data
(1) 2038/FFFFFFFFFFFF0FB4 :                     ; a1   | Graphics data
(1) 2039/FFFFFFFFFFFF0FB4 :                     ;
(1) 2040/FFFFFFFFFFFF0FB4 :                     ; Returns:
(1) 2041/FFFFFFFFFFFF0FB4 :                     ; d1.w | New VRAM Position for _Auto
(1) 2042/FFFFFFFFFFFF0FB4 :                     ;
(1) 2043/FFFFFFFFFFFF0FB4 :                     ; Notes:
(1) 2044/FFFFFFFFFFFF0FB4 :                     ; - Calling the _Auto version will
(1) 2045/FFFFFFFFFFFF0FB4 :                     ;   OVERWRITE obj_vram with the available
(1) 2046/FFFFFFFFFFFF0FB4 :                     ;   position for output.
(1) 2047/FFFFFFFFFFFF0FB4 :                     ; --------------------------------------------------------
(1) 2048/FFFFFFFFFFFF0FB4 :                     
(1) 2049/FFFFFFFFFFFF0FB4 :                     object_DMA_Auto:
(1) 2050/FFFFFFFFFFFF0FB4 : 48E7 EF04           		movem.l	d0-d2/d4-d7/a5,-(sp)
(1) 2051/FFFFFFFFFFFF0FB8 : 3238 B8DA           		move.w	(RAM_SprAutoDmaCurr).w,d1
(1) 2052/FFFFFFFFFFFF0FBC : 382E 0014           		move.w	obj_vram(a6),d4
(1) 2053/FFFFFFFFFFFF0FC0 : 0244 F800           		andi.w	#$F800,d4
(1) 2054/FFFFFFFFFFFF0FC4 : 8841                		or.w	d1,d4
(1) 2055/FFFFFFFFFFFF0FC6 : 3D44 0014           		move.w	d4,obj_vram(a6)
(1) 2056/FFFFFFFFFFFF0FCA : 6116                		bsr.s	objMkDMA_Go
(1) 2057/FFFFFFFFFFFF0FCC : 31C1 B8DA           		move.w	d1,(RAM_SprAutoDmaCurr).w
(1) 2058/FFFFFFFFFFFF0FD0 : 4CDF 20F7           		movem.l	(sp)+,d0-d2/d4-d7/a5
(1) 2059/FFFFFFFFFFFF0FD4 : 4E75                		rts
(1) 2060/FFFFFFFFFFFF0FD6 :                     
(1) 2061/FFFFFFFFFFFF0FD6 :                     ; ------------------------------------------------
(1) 2062/FFFFFFFFFFFF0FD6 :                     
(1) 2063/FFFFFFFFFFFF0FD6 :                     object_DMA:
(1) 2064/FFFFFFFFFFFF0FD6 : 48E7 EF04           		movem.l	d0-d2/d4-d7/a5,-(sp)
(1) 2065/FFFFFFFFFFFF0FDA : 6106                		bsr.s	objMkDMA_Go
(1) 2066/FFFFFFFFFFFF0FDC : 4CDF 20F7           		movem.l	(sp)+,d0-d2/d4-d7/a5
(1) 2067/FFFFFFFFFFFF0FE0 : 4E75                		rts
(1) 2068/FFFFFFFFFFFF0FE2 :                     
(1) 2069/FFFFFFFFFFFF0FE2 :                     ; ------------------------------------------------
(1) 2070/FFFFFFFFFFFF0FE2 :                     
(1) 2071/FFFFFFFFFFFF0FE2 :                     objMkDMA_Go:
(1) 2072/FFFFFFFFFFFF0FE2 : 082E 0007 0022      		btst	#bitobj_Mars,obj_set(a6)
(1) 2073/FFFFFFFFFFFF0FE8 : 6650                		bne.s	.no_dma
(1) 2074/FFFFFFFFFFFF0FEA : 2609                		move.l	a1,d3			; d3 - BASE graphics data
(1) 2075/FFFFFFFFFFFF0FEC : 382E 001C           		move.w	obj_frame(a6),d4	; d4 - Current frame
(1) 2076/FFFFFFFFFFFF0FF0 : D844                 		add.w	d4,d4
(1) 2077/FFFFFFFFFFFF0FF2 : 3830 4000           		move.w	(a0,d4.w),d4
(1) 2078/FFFFFFFFFFFF0FF6 : D0C4                 		adda	d4,a0
(1) 2079/FFFFFFFFFFFF0FF8 : 7800                 		moveq	#0,d4
(1) 2080/FFFFFFFFFFFF0FFA : 3818                 		move.w	(a0)+,d4
(1) 2081/FFFFFFFFFFFF0FFC : 673C                 		beq.s	.no_dma			; If no valid entries, skip
(1) 2082/FFFFFFFFFFFF0FFE : 6B3A                 		bmi.s	.no_dma
(1) 2083/FFFFFFFFFFFF1000 : 5344                 		subq.w	#1,d4
(1) 2084/FFFFFFFFFFFF1002 : 322E 0014           		move.w	obj_vram(a6),d1
(1) 2085/FFFFFFFFFFFF1006 : 0241 07FF           		andi.w	#$7FF,d1
(1) 2086/FFFFFFFFFFFF100A : EB49                		lsl.w	#5,d1
(1) 2087/FFFFFFFFFFFF100C : 2F0E                		move.l	a6,-(sp)		; SAVE a6
(1) 2088/FFFFFFFFFFFF100E :                     .next_pz:
(1) 2089/FFFFFFFFFFFF100E : 4844                		swap	d4
(1) 2090/FFFFFFFFFFFF1010 : 3818                		move.w	(a0)+,d4
(1) 2091/FFFFFFFFFFFF1012 : 3404                		move.w	d4,d2
(1) 2092/FFFFFFFFFFFF1014 : EE4A                		lsr.w	#7,d2
(1) 2093/FFFFFFFFFFFF1016 : 0242 01E0           		andi.w	#$1E0,d2
(1) 2094/FFFFFFFFFFFF101A : D47C 0020           		add.w	#$20,d2
(1) 2095/FFFFFFFFFFFF101E : 7000                		moveq	#0,d0
(1) 2096/FFFFFFFFFFFF1020 : 3004                		move.w	d4,d0
(1) 2097/FFFFFFFFFFFF1022 : 0240 0FFF           		andi.w	#$FFF,d0
(1) 2098/FFFFFFFFFFFF1026 : EB48                		lsl.w	#5,d0
(1) 2099/FFFFFFFFFFFF1028 : D083                		add.l	d3,d0
(1) 2100/FFFFFFFFFFFF102A : 6100 F698           		bsr	Video_DmaMkEntry
(1) 2101/FFFFFFFFFFFF102E : D242                		add.w	d2,d1
(1) 2102/FFFFFFFFFFFF1030 : 4844                		swap	d4
(1) 2103/FFFFFFFFFFFF1032 : 51CC FFDA           		dbf	d4,.next_pz
(1) 2104/FFFFFFFFFFFF1036 : 2C5F                		move.l	(sp)+,a6		; Restore a6
(1) 2105/FFFFFFFFFFFF1038 : EA49                		lsr.w	#5,d1			; Return d1
(1) 2106/FFFFFFFFFFFF103A :                     .no_dma:
(1) 2107/FFFFFFFFFFFF103A : 4E75                		rts
(1) 2108/FFFFFFFFFFFF103C :                     
(1) 2109/FFFFFFFFFFFF103C :                     ; --------------------------------------------------------
(1) 2110/FFFFFFFFFFFF103C :                     ; object_Animate
(1) 2111/FFFFFFFFFFFF103C :                     ;
(1) 2112/FFFFFFFFFFFF103C :                     ; Animates the sprite
(1) 2113/FFFFFFFFFFFF103C :                     ;
(1) 2114/FFFFFFFFFFFF103C :                     ; Input:
(1) 2115/FFFFFFFFFFFF103C :                     ; a6 | This object
(1) 2116/FFFFFFFFFFFF103C :                     ; a0 | Animation data
(1) 2117/FFFFFFFFFFFF103C :                     ;
(1) 2118/FFFFFFFFFFFF103C :                     ; Notes:
(1) 2119/FFFFFFFFFFFF103C :                     ; - Calling this will OVERWRITE obj_frame with the
(1) 2120/FFFFFFFFFFFF103C :                     ;   new frame number set on the animation sequence.
(1) 2121/FFFFFFFFFFFF103C :                     ; --------------------------------------------------------
(1) 2122/FFFFFFFFFFFF103C :                     
(1) 2123/FFFFFFFFFFFF103C :                     ; anim_data:
(1) 2124/FFFFFFFFFFFF103C :                     ; 	dc.w .frame_1-anim_data
(1) 2125/FFFFFFFFFFFF103C :                     ; 	dc.w .frame_2-anim_data
(1) 2126/FFFFFFFFFFFF103C :                     ; 	;...
(1) 2127/FFFFFFFFFFFF103C :                     ;
(1) 2128/FFFFFFFFFFFF103C :                     ; .frame_num:
(1) 2129/FFFFFFFFFFFF103C :                     ; 	dc.w $speed			; Animation speed
(1) 2130/FFFFFFFFFFFF103C :                     ; 	dc.w $frame_0,$frame_1,...	; Frames list
(1) 2131/FFFFFFFFFFFF103C :                     ; 	dc.w $command			; End-of-data action command
(1) 2132/FFFFFFFFFFFF103C :                     ;
(1) 2133/FFFFFFFFFFFF103C :                     ; $command:
(1) 2134/FFFFFFFFFFFF103C :                     ; | -1 Finish animation, ends at last frame
(1) 2135/FFFFFFFFFFFF103C :                     ; | -2 Loop animation, goes back to index 0
(1) 2136/FFFFFFFFFFFF103C :                     ; | -3 Go to index:
(1) 2137/FFFFFFFFFFFF103C :                     ; |    dc.w -3,to_slot
(1) 2138/FFFFFFFFFFFF103C :                     
(1) 2139/FFFFFFFFFFFF103C :                     object_Animate:
(1) 2140/FFFFFFFFFFFF103C : 48E7 0780           		movem.l	a0/d5-d7,-(sp)
(1) 2141/FFFFFFFFFFFF1040 : 7E00                		moveq	#0,d7
(1) 2142/FFFFFFFFFFFF1042 : 1E2E 001F            		move.b	obj_anim_icur(a6),d7
(1) 2143/FFFFFFFFFFFF1046 : BE2E 001E            		cmp.b	obj_anim_id(a6),d7
(1) 2144/FFFFFFFFFFFF104A : 670E                 		beq.s	.sameThing
(1) 2145/FFFFFFFFFFFF104C : 1D6E 001E 001F       		move.b	obj_anim_id(a6),obj_anim_icur(a6)
(1) 2146/FFFFFFFFFFFF1052 : 426E 001A            		clr.w	obj_anim_indx(a6)
(1) 2147/FFFFFFFFFFFF1056 : 422E 0020            		clr.b	obj_anim_spd(a6)
(1) 2148/FFFFFFFFFFFF105A :                     .sameThing:
(1) 2149/FFFFFFFFFFFF105A : 1E2E 001E            		move.b	obj_anim_id(a6),d7
(1) 2150/FFFFFFFFFFFF105E : 0C07 00FF            		cmpi.b	#-1,d7
(1) 2151/FFFFFFFFFFFF1062 : 6748                 		beq.s	.return
(1) 2152/FFFFFFFFFFFF1064 : DE47                 		add.w	d7,d7
(1) 2153/FFFFFFFFFFFF1066 : 3E30 7000            		move.w	(a0,d7.w),d7
(1) 2154/FFFFFFFFFFFF106A : 41F0 7000            		lea	(a0,d7.w),a0
(1) 2155/FFFFFFFFFFFF106E : 3E18                 		move.w	(a0)+,d7
(1) 2156/FFFFFFFFFFFF1070 : 0C47 FFFF            		cmpi.w	#-1,d7
(1) 2157/FFFFFFFFFFFF1074 : 670C                 		beq.s	.keepspd
(1) 2158/FFFFFFFFFFFF1076 : 042E 0001 0020       		subi.b	#1,obj_anim_spd(a6)
(1) 2159/FFFFFFFFFFFF107C : 6A2E                 		bpl.s	.return
(1) 2160/FFFFFFFFFFFF107E : 1D47 0020           		move.b	d7,obj_anim_spd(a6)
(1) 2161/FFFFFFFFFFFF1082 :                     .keepspd:
(1) 2162/FFFFFFFFFFFF1082 : 7C00                 		moveq	#0,d6
(1) 2163/FFFFFFFFFFFF1084 : 3E2E 001A            		move.w	obj_anim_indx(a6),d7
(1) 2164/FFFFFFFFFFFF1088 : DE47                 		add.w	d7,d7
(1) 2165/FFFFFFFFFFFF108A : 3C10                 		move.w	(a0),d6
(1) 2166/FFFFFFFFFFFF108C : D0C7                 		adda	d7,a0
(1) 2167/FFFFFFFFFFFF108E : 3A10                 		move.w	(a0),d5
(1) 2168/FFFFFFFFFFFF1090 : 0C45 FFFF            		cmpi.w	#-1,d5
(1) 2169/FFFFFFFFFFFF1094 : 6730                 		beq.s	.lastFrame	; finish
(1) 2170/FFFFFFFFFFFF1096 : 0C45 FFFE            		cmpi.w	#-2,d5
(1) 2171/FFFFFFFFFFFF109A : 6712                 		beq.s	.noAnim		; loop animation
(1) 2172/FFFFFFFFFFFF109C : 0C45 FFFD            		cmpi.w	#-3,d5
(1) 2173/FFFFFFFFFFFF10A0 : 671A                 		beq.s	.goToFrame
(1) 2174/FFFFFFFFFFFF10A2 : 3D45 001C            		move.w	d5,obj_frame(a6)
(1) 2175/FFFFFFFFFFFF10A6 : 066E 0001 001A       		add.w	#1,obj_anim_indx(a6)
(1) 2176/FFFFFFFFFFFF10AC :                     .return:
(1) 2177/FFFFFFFFFFFF10AC : 601C                 		bra.s	.exit_anim
(1) 2178/FFFFFFFFFFFF10AE :                     .noAnim:
(1) 2179/FFFFFFFFFFFF10AE : 3D7C 0001 001A       		move.w	#1,obj_anim_indx(a6)
(1) 2180/FFFFFFFFFFFF10B4 : 3A06                 		move.w	d6,d5
(1) 2181/FFFFFFFFFFFF10B6 : 3D45 001C            		move.w	d5,obj_frame(a6)
(1) 2182/FFFFFFFFFFFF10BA : 600E                		bra.s	.exit_anim
(1) 2183/FFFFFFFFFFFF10BC :                     .goToFrame:
(1) 2184/FFFFFFFFFFFF10BC : 426E 001A           		clr.w	obj_anim_indx(a6)
(1) 2185/FFFFFFFFFFFF10C0 : 3D68 0002 001A      		move.w	2(a0),obj_anim_indx(a6)
(1) 2186/FFFFFFFFFFFF10C6 :                     .lastFrame:
(1) 2187/FFFFFFFFFFFF10C6 : 422E 0020            		clr.b	obj_anim_spd(a6)
(1) 2188/FFFFFFFFFFFF10CA :                     .exit_anim:
(1) 2189/FFFFFFFFFFFF10CA : 4CDF 01E0           		movem.l	(sp)+,a0/d5-d7
(1) 2190/FFFFFFFFFFFF10CE : 4E75                		rts
(1) 2191/FFFFFFFFFFFF10D0 :                     
(1) 2192/FFFFFFFFFFFF10D0 :                     ; --------------------------------------------------------
(1) 2193/FFFFFFFFFFFF10D0 :                     ; object_ResetAnim
(1) 2194/FFFFFFFFFFFF10D0 :                     ;
(1) 2195/FFFFFFFFFFFF10D0 :                     ; Call this to reset animation
(1) 2196/FFFFFFFFFFFF10D0 :                     ;
(1) 2197/FFFFFFFFFFFF10D0 :                     ; Input:
(1) 2198/FFFFFFFFFFFF10D0 :                     ; a6 | This object
(1) 2199/FFFFFFFFFFFF10D0 :                     ; --------------------------------------------------------
(1) 2200/FFFFFFFFFFFF10D0 :                     
(1) 2201/FFFFFFFFFFFF10D0 :                     object_ResetAnim:
(1) 2202/FFFFFFFFFFFF10D0 : 426E 001A            		clr.w	obj_anim_indx(a6)
(1) 2203/FFFFFFFFFFFF10D4 : 422E 0020            		clr.b	obj_anim_spd(a6)
(1) 2204/FFFFFFFFFFFF10D8 : 1D7C 0000 001F      		move.b	#0,obj_anim_icur(a6)
(1) 2205/FFFFFFFFFFFF10DE : 4E75                		rts
(1) 2206/FFFFFFFFFFFF10E0 :                     
(1) 2207/FFFFFFFFFFFF10E0 :                     ; --------------------------------------------------------
(1) 2208/FFFFFFFFFFFF10E0 :                     ; object_Speed
(1) 2209/FFFFFFFFFFFF10E0 :                     ;
(1) 2210/FFFFFFFFFFFF10E0 :                     ; Moves the object using speed variables
(1) 2211/FFFFFFFFFFFF10E0 :                     ;
(1) 2212/FFFFFFFFFFFF10E0 :                     ; Input:
(1) 2213/FFFFFFFFFFFF10E0 :                     ; a6 | This object
(1) 2214/FFFFFFFFFFFF10E0 :                     ;
(1) 2215/FFFFFFFFFFFF10E0 :                     ; Breaks:
(1) 2216/FFFFFFFFFFFF10E0 :                     ; d7
(1) 2217/FFFFFFFFFFFF10E0 :                     ; --------------------------------------------------------
(1) 2218/FFFFFFFFFFFF10E0 :                     
(1) 2219/FFFFFFFFFFFF10E0 :                     object_Speed:
(1) 2220/FFFFFFFFFFFF10E0 : 2F07                		move.l	d7,-(sp)
(1) 2221/FFFFFFFFFFFF10E2 : 7E00                		moveq	#0,d7
(1) 2222/FFFFFFFFFFFF10E4 : 3E2E 0016           		move.w	obj_x_spd(a6),d7
(1) 2223/FFFFFFFFFFFF10E8 : 48C7                		ext.l	d7
(1) 2224/FFFFFFFFFFFF10EA : E187                		asl.l	#8,d7
(1) 2225/FFFFFFFFFFFF10EC : DFAE 0004           		add.l	d7,obj_x(a6)
(1) 2226/FFFFFFFFFFFF10F0 : 7E00                		moveq	#0,d7
(1) 2227/FFFFFFFFFFFF10F2 : 3E2E 0018           		move.w	obj_y_spd(a6),d7
(1) 2228/FFFFFFFFFFFF10F6 : 48C7                		ext.l	d7
(1) 2229/FFFFFFFFFFFF10F8 : E187                		asl.l	#8,d7
(1) 2230/FFFFFFFFFFFF10FA : DFAE 0008           		add.l	d7,obj_y(a6)
(1) 2231/FFFFFFFFFFFF10FE : 2E1F                		move.l	(sp)+,d7
(1) 2232/FFFFFFFFFFFF1100 : 4E75                		rts
(1) 2233/FFFFFFFFFFFF1102 :                     
(1) 2234/FFFFFFFFFFFF1102 :                     ; --------------------------------------------------------
(1) 2235/FFFFFFFFFFFF1102 :                     ; object_Collision
(1) 2236/FFFFFFFFFFFF1102 :                     ;
(1) 2237/FFFFFFFFFFFF1102 :                     ; Detects collision with another Object from
(1) 2238/FFFFFFFFFFFF1102 :                     ; the list TOP to BOTTOM
(1) 2239/FFFFFFFFFFFF1102 :                     ; Reads ALL objects except the one that called this.
(1) 2240/FFFFFFFFFFFF1102 :                     ;
(1) 2241/FFFFFFFFFFFF1102 :                     ; Input:
(1) 2242/FFFFFFFFFFFF1102 :                     ; a6 | Object
(1) 2243/FFFFFFFFFFFF1102 :                     ;
(1) 2244/FFFFFFFFFFFF1102 :                     ; Returns:
(1) 2245/FFFFFFFFFFFF1102 :                     ; d0 | If Nothing: Zero
(1) 2246/FFFFFFFFFFFF1102 :                     ;      If Found: The object's RAM location it got.
(1) 2247/FFFFFFFFFFFF1102 :                     ;
(1) 2248/FFFFFFFFFFFF1102 :                     ; Breaks:
(1) 2249/FFFFFFFFFFFF1102 :                     ; d1-d7,a5
(1) 2250/FFFFFFFFFFFF1102 :                     ; --------------------------------------------------------
(1) 2251/FFFFFFFFFFFF1102 :                     
(1) 2252/FFFFFFFFFFFF1102 :                     object_Collision:
(1) 2253/FFFFFFFFFFFF1102 : 48E7 7F04           		movem.l	d1-d7/a5,-(sp)
(1) 2254/FFFFFFFFFFFF1106 : 4BF8 AD94           		lea	(RAM_Objects).w,a5
(1) 2255/FFFFFFFFFFFF110A : 7E17                		moveq	#MAX_MDOBJ-1,d7
(1) 2256/FFFFFFFFFFFF110C :                     .next:
(1) 2257/FFFFFFFFFFFF110C : BBCE                		cmp.l	a6,a5		; If reading THIS object, skip
(1) 2258/FFFFFFFFFFFF110E : 670A                		beq.s	.skip
(1) 2259/FFFFFFFFFFFF1110 : 4A95                		tst.l	obj_code(a5)	; This object has code?
(1) 2260/FFFFFFFFFFFF1112 : 6706                		beq.s	.skip
(1) 2261/FFFFFFFFFFFF1114 : 6114                		bsr.s	.check_this
(1) 2262/FFFFFFFFFFFF1116 : 4A40                		tst.w	d0
(1) 2263/FFFFFFFFFFFF1118 : 660A                		bne.s	.exit_this	; Exit if Found already.
(1) 2264/FFFFFFFFFFFF111A : DAFC 0066           .skip:		adda	#sizeof_mdobj,a5
(1) 2265/FFFFFFFFFFFF111E : 51CF FFEC           		dbf	d7,.next
(1) 2266/FFFFFFFFFFFF1122 : 7000                		moveq	#0,d0
(1) 2267/FFFFFFFFFFFF1124 :                     .exit_this:
(1) 2268/FFFFFFFFFFFF1124 : 4CDF 20FE           		movem.l	(sp)+,d1-d7/a5
(1) 2269/FFFFFFFFFFFF1128 : 4E75                		rts
(1) 2270/FFFFFFFFFFFF112A :                     .check_this:
(1) 2271/FFFFFFFFFFFF112A : 7000                		moveq	#0,d0			; Reset Return
(1) 2272/FFFFFFFFFFFF112C :                     	; d6 - Y current top
(1) 2273/FFFFFFFFFFFF112C :                     	; d5 - Y current bottom
(1) 2274/FFFFFFFFFFFF112C :                     	; d4 - Y target top
(1) 2275/FFFFFFFFFFFF112C :                     	; d3 - Y target bottom
(1) 2276/FFFFFFFFFFFF112C : 3C2E 0008           		move.w	obj_y(a6),d6		; d6 - Up point
(1) 2277/FFFFFFFFFFFF1130 : 3A06                		move.w	d6,d5			; d5 - Down point
(1) 2278/FFFFFFFFFFFF1132 : 322E 0010           		move.w	obj_size(a6),d1		; $UDxx
(1) 2279/FFFFFFFFFFFF1136 : 3401                		move.w	d1,d2
(1) 2280/FFFFFFFFFFFF1138 : E049                		lsr.w	#8,d1			; d1 - Up size
(1) 2281/FFFFFFFFFFFF113A : 0242 00FF           		andi.w	#$FF,d2			; d2 - Down size
(1) 2282/FFFFFFFFFFFF113E : E749                		lsl.w	#3,d1
(1) 2283/FFFFFFFFFFFF1140 : E74A                		lsl.w	#3,d2
(1) 2284/FFFFFFFFFFFF1142 : 9C41                		sub.w	d1,d6
(1) 2285/FFFFFFFFFFFF1144 : DA42                		add.w	d2,d5
(1) 2286/FFFFFFFFFFFF1146 : 382D 0008           		move.w	obj_y(a5),d4		; d4 - Up point
(1) 2287/FFFFFFFFFFFF114A : 3604                		move.w	d4,d3			; d3 - Down point
(1) 2288/FFFFFFFFFFFF114C : 322D 0010           		move.w	obj_size(a5),d1		; $UDxx
(1) 2289/FFFFFFFFFFFF1150 : 3401                		move.w	d1,d2
(1) 2290/FFFFFFFFFFFF1152 : E049                		lsr.w	#8,d1			; d1 - Up size
(1) 2291/FFFFFFFFFFFF1154 : 0242 00FF           		andi.w	#$FF,d2			; d2 - Down size
(1) 2292/FFFFFFFFFFFF1158 : E749                		lsl.w	#3,d1
(1) 2293/FFFFFFFFFFFF115A : E74A                		lsl.w	#3,d2
(1) 2294/FFFFFFFFFFFF115C : 9841                		sub.w	d1,d4
(1) 2295/FFFFFFFFFFFF115E : D642                		add.w	d2,d3
(1) 2296/FFFFFFFFFFFF1160 : B646                		cmp.w	d6,d3			; Target's YB > Our YT?
(1) 2297/FFFFFFFFFFFF1162 : 6D42                		blt.s	.not_ytop
(1) 2298/FFFFFFFFFFFF1164 : B845                		cmp.w	d5,d4			; Target's YT > Our YB?
(1) 2299/FFFFFFFFFFFF1166 : 6C3E                		bge.s	.not_ytop
(1) 2300/FFFFFFFFFFFF1168 :                     	; Now check X
(1) 2301/FFFFFFFFFFFF1168 : 3C2E 0004           		move.w	obj_x(a6),d6		; d6 - Left point
(1) 2302/FFFFFFFFFFFF116C : 3A06                		move.w	d6,d5			; d5 - Right point
(1) 2303/FFFFFFFFFFFF116E : 322E 0012           		move.w	obj_size+2(a6),d1	; $xxLR
(1) 2304/FFFFFFFFFFFF1172 : 3401                		move.w	d1,d2
(1) 2305/FFFFFFFFFFFF1174 : E049                		lsr.w	#8,d1			; d1 - Left size
(1) 2306/FFFFFFFFFFFF1176 : 0242 00FF           		andi.w	#$FF,d2			; d2 - Right size
(1) 2307/FFFFFFFFFFFF117A : E749                		lsl.w	#3,d1
(1) 2308/FFFFFFFFFFFF117C : E74A                		lsl.w	#3,d2
(1) 2309/FFFFFFFFFFFF117E : 9C41                		sub.w	d1,d6
(1) 2310/FFFFFFFFFFFF1180 : DA42                		add.w	d2,d5
(1) 2311/FFFFFFFFFFFF1182 : 382D 0004           		move.w	obj_x(a5),d4		; d4 - Left point
(1) 2312/FFFFFFFFFFFF1186 : 3604                		move.w	d4,d3			; d3 - Right point
(1) 2313/FFFFFFFFFFFF1188 : 322D 0012           		move.w	obj_size+2(a5),d1	; $UDxx
(1) 2314/FFFFFFFFFFFF118C : 3401                		move.w	d1,d2
(1) 2315/FFFFFFFFFFFF118E : E049                		lsr.w	#8,d1			; d1 - Left size
(1) 2316/FFFFFFFFFFFF1190 : 0242 00FF           		andi.w	#$FF,d2			; d2 - Right size
(1) 2317/FFFFFFFFFFFF1194 : E749                		lsl.w	#3,d1
(1) 2318/FFFFFFFFFFFF1196 : E74A                		lsl.w	#3,d2
(1) 2319/FFFFFFFFFFFF1198 : 9841                		sub.w	d1,d4
(1) 2320/FFFFFFFFFFFF119A : D642                		add.w	d2,d3
(1) 2321/FFFFFFFFFFFF119C : B646                		cmp.w	d6,d3
(1) 2322/FFFFFFFFFFFF119E : 6D06                		blt.s	.not_ytop
(1) 2323/FFFFFFFFFFFF11A0 : B845                		cmp.w	d5,d4
(1) 2324/FFFFFFFFFFFF11A2 : 6C02                		bge.s	.not_ytop
(1) 2325/FFFFFFFFFFFF11A4 : 200D                		move.l	a5,d0		; FOUND OBJECT
(1) 2326/FFFFFFFFFFFF11A6 :                     .not_ytop:
(1) 2327/FFFFFFFFFFFF11A6 : 4E75                		rts
(1) 2328/FFFFFFFFFFFF11A8 :                     
(1) 2329/FFFFFFFFFFFF11A8 :                     ; ====================================================================
(1) 2330/FFFFFFFFFFFF11A8 :                     ; ----------------------------------------------------------------
(1) 2331/FFFFFFFFFFFF11A8 :                     ; 32X ONLY
(1) 2332/FFFFFFFFFFFF11A8 :                     ; ----------------------------------------------------------------
(1) 2333/FFFFFFFFFFFF11A8 :                     
(1) 2335/FFFFFFFFFFFF11A8 :                     
(1) 2336/FFFFFFFFFFFF11A8 :                     ; --------------------------------------------------------
(1) 2337/FFFFFFFFFFFF11A8 :                     ; Video_MdMarsMap_Set
(1) 2338/FFFFFFFFFFFF11A8 :                     ; --------------------------------------------------------
(1) 2339/FFFFFFFFFFFF11A8 :                     
(1) 2340/FFFFFFFFFFFF11A8 :                     Video_MdMarsMap_Set:
(1) 2341/FFFFFFFFFFFF11A8 : 4DF8 CC04           		lea	(RAM_MdDreq+Dreq_ScrlBuff).w,a6
(1) 2342/FFFFFFFFFFFF11AC : 2D40 000C           		move.l	d0,mscrl_Art(a6)
(1) 2343/FFFFFFFFFFFF11B0 : 42AE 0004           		clr.l	mscrl_Xpos(a6)
(1) 2344/FFFFFFFFFFFF11B4 : 42AE 0008           		clr.l	mscrl_Ypos(a6)
(1) 2345/FFFFFFFFFFFF11B8 : 3D41 0004           		move.w	d1,mscrl_Xpos(a6)
(1) 2346/FFFFFFFFFFFF11BC : 3D42 0008           		move.w	d2,mscrl_Ypos(a6)
(1) 2347/FFFFFFFFFFFF11C0 : 4E75                		rts
(1) 2348/FFFFFFFFFFFF11C2 :                     
(1) 2349/FFFFFFFFFFFF11C2 :                     ; --------------------------------------------------------
(1) 2350/FFFFFFFFFFFF11C2 :                     ; Video_MdMarsMap_Load
(1) 2351/FFFFFFFFFFFF11C2 :                     ;
(1) 2352/FFFFFFFFFFFF11C2 :                     ; Input:
(1) 2353/FFFFFFFFFFFF11C2 :                     ; a0   | Map data
(1) 2354/FFFFFFFFFFFF11C2 :                     ; d0.w | X block pos
(1) 2355/FFFFFFFFFFFF11C2 :                     ; d1.w | Y block pos
(1) 2356/FFFFFFFFFFFF11C2 :                     ; d2.w | X block size
(1) 2357/FFFFFFFFFFFF11C2 :                     ; d3.w | Y block size
(1) 2358/FFFFFFFFFFFF11C2 :                     ; d4.w | Starting color index
(1) 2359/FFFFFFFFFFFF11C2 :                     ;
(1) 2360/FFFFFFFFFFFF11C2 :                     ; Breaks:
(1) 2361/FFFFFFFFFFFF11C2 :                     ; d5-d7/a2-a5
(1) 2362/FFFFFFFFFFFF11C2 :                     ; --------------------------------------------------------
(1) 2363/FFFFFFFFFFFF11C2 :                     
(1) 2364/FFFFFFFFFFFF11C2 :                     Video_MdMarsMap_Load:
(1) 2365/FFFFFFFFFFFF11C2 : 4BF8 C804           		lea	(RAM_MdDreq+Dreq_ScrlData).w,a5
(1) 2366/FFFFFFFFFFFF11C6 : 7C00                		moveq	#0,d6
(1) 2367/FFFFFFFFFFFF11C8 : 3C01                		move.w	d1,d6
(1) 2368/FFFFFFFFFFFF11CA : EF4E                		lsl.w	#7,d6	; Manual Y size
(1) 2369/FFFFFFFFFFFF11CC : DBC6                		add.l	d6,a5
(1) 2370/FFFFFFFFFFFF11CE : 3C00                		move.w	d0,d6
(1) 2371/FFFFFFFFFFFF11D0 : DC46                		add.w	d6,d6
(1) 2372/FFFFFFFFFFFF11D2 : DAC6                		adda	d6,a5
(1) 2373/FFFFFFFFFFFF11D4 :                     
(1) 2374/FFFFFFFFFFFF11D4 : 2448                		move.l	a0,a2
(1) 2375/FFFFFFFFFFFF11D6 : 3A04                		move.w	d4,d5
(1) 2376/FFFFFFFFFFFF11D8 : 0245 00F8           		andi.w	#$F8,d5
(1) 2377/FFFFFFFFFFFF11DC : E14D                		lsl.w	#8,d5
(1) 2378/FFFFFFFFFFFF11DE : 3E03                		move.w	d3,d7
(1) 2379/FFFFFFFFFFFF11E0 : 5347                		subq.w	#1,d7
(1) 2380/FFFFFFFFFFFF11E2 :                     .copy_y:
(1) 2381/FFFFFFFFFFFF11E2 : 4847                		swap	d7
(1) 2382/FFFFFFFFFFFF11E4 : 4846                		swap	d6
(1) 2383/FFFFFFFFFFFF11E6 : 264A                		move.l	a2,a3
(1) 2384/FFFFFFFFFFFF11E8 : 284D                		move.l	a5,a4
(1) 2385/FFFFFFFFFFFF11EA : 3E02                		move.w	d2,d7
(1) 2386/FFFFFFFFFFFF11EC : 5347                		subq.w	#1,d7
(1) 2387/FFFFFFFFFFFF11EE :                     .copy_x:
(1) 2388/FFFFFFFFFFFF11EE : 3C1B                		move.w	(a3)+,d6
(1) 2389/FFFFFFFFFFFF11F0 : 0246 07FF           		andi.w	#$7FF,d6
(1) 2390/FFFFFFFFFFFF11F4 : DC45                		add.w	d5,d6
(1) 2391/FFFFFFFFFFFF11F6 : 38C6                		move.w	d6,(a4)+
(1) 2392/FFFFFFFFFFFF11F8 : 51CF FFF4           		dbf	d7,.copy_x
(1) 2393/FFFFFFFFFFFF11FC :                     
(1) 2394/FFFFFFFFFFFF11FC : 3C3C 0020           		move.w	#512/16,d6
(1) 2395/FFFFFFFFFFFF1200 :                     ; 		move.l	a3,a0
(1) 2396/FFFFFFFFFFFF1200 : 3E02                		move.w	d2,d7
(1) 2397/FFFFFFFFFFFF1202 : DE47                		add.w	d7,d7
(1) 2398/FFFFFFFFFFFF1204 : D4C7                		adda	d7,a2
(1) 2399/FFFFFFFFFFFF1206 : 3E06                		move.w	d6,d7
(1) 2400/FFFFFFFFFFFF1208 : DE47                		add.w	d7,d7
(1) 2401/FFFFFFFFFFFF120A : DAC7                		adda	d7,a5
(1) 2402/FFFFFFFFFFFF120C :                     
(1) 2403/FFFFFFFFFFFF120C : 4846                		swap	d6
(1) 2404/FFFFFFFFFFFF120E : 4847                		swap	d7
(1) 2405/FFFFFFFFFFFF1210 : 51CF FFD0           		dbf	d7,.copy_y
(1) 2406/FFFFFFFFFFFF1214 : 4E75                		rts
(1) 2407/FFFFFFFFFFFF1216 :                     
(1) 2408/FFFFFFFFFFFF1216 :                     ; --------------------------------------------------------
(1) 2409/FFFFFFFFFFFF1216 :                     
(1) 2411/FFFFFFFFFFFF1216 :                     
     195/FFFFFFFFFFFF1216 :                     		include	"system/md/system.asm"
(1)    1/FFFFFFFFFFFF1216 :                     ; ===========================================================================
(1)    2/FFFFFFFFFFFF1216 :                     ; ----------------------------------------------------------------
(1)    3/FFFFFFFFFFFF1216 :                     ; Genesis system routines, including SCD and 32X
(1)    4/FFFFFFFFFFFF1216 :                     ; ----------------------------------------------------------------
(1)    5/FFFFFFFFFFFF1216 :                     
(1)    6/FFFFFFFFFFFF1216 :                     ; ** CAN BE RECYCLED FOR SEGA PICO, ONLY IGNORE Z80 ACCESS OR
(1)    7/FFFFFFFFFFFF1216 :                     ; THE CONTROL ROUTINE **
(1)    8/FFFFFFFFFFFF1216 :                     
(1)    9/FFFFFFFFFFFF1216 :                     ; ===================================================================
(1)   10/FFFFFFFFFFFF1216 :                     ; --------------------------------------------------------
(1)   11/FFFFFFFFFFFF1216 :                     ; Settings
(1)   12/FFFFFFFFFFFF1216 :                     ; --------------------------------------------------------
(1)   13/FFFFFFFFFFFF1216 :                     
(1)   14/FFFFFFFFFFFF1216 : =$400                MAX_SRAMSIZE	equ $400
(1)   15/FFFFFFFFFFFF1216 : ="SAVE"              TAG_SRAMDATA	equ "SAVE"	; 4-letter savefile signature
(1)   16/FFFFFFFFFFFF1216 :                     
(1)   17/FFFFFFFFFFFF1216 :                     ; ===================================================================
(1)   18/FFFFFFFFFFFF1216 :                     ; --------------------------------------------------------
(1)   19/FFFFFFFFFFFF1216 :                     ; Variables
(1)   20/FFFFFFFFFFFF1216 :                     ; --------------------------------------------------------
(1)   21/FFFFFFFFFFFF1216 :                     
(1)   22/FFFFFFFFFFFF1216 :                     ; ------------------------------------------------
(1)   23/FFFFFFFFFFFF1216 :                     ; Controller buffer data
(1)   24/FFFFFFFFFFFF1216 :                     ;
(1)   25/FFFFFFFFFFFF1216 :                     ; MUST call System_Input on VBlank.
(1)   26/FFFFFFFFFFFF1216 :                     ; ------------------------------------------------
(1)   27/FFFFFFFFFFFF1216 :                     
(1)   28/FFFFFFFFFFFF1216 :                     ; ------------------------------------------------
(1)   29/FFFFFFFFFFFF1216 :                     ; pad_id
(1)   30/FFFFFFFFFFFF1216 :                     ;
(1)   31/FFFFFFFFFFFF1216 :                     ; JoyID_MD:
(1)   32/FFFFFFFFFFFF1216 :                     ; Read pad_ver separately to check if controller
(1)   33/FFFFFFFFFFFF1216 :                     ; is 3button(0) or 6button(1)
(1)   34/FFFFFFFFFFFF1216 :                     ; ------------------------------------------------
(1)   35/FFFFFFFFFFFF1216 :                     
(1)   36/FFFFFFFFFFFF1216 : =$3                  JoyID_Mouse	equ $03
(1)   37/FFFFFFFFFFFF1216 : =$D                  JoyID_MD	equ $0D
(1)   38/FFFFFFFFFFFF1216 : =$F                  JoyID_MS	equ $0F		; <-- Disconnected too.
(1)   39/FFFFFFFFFFFF1216 :                     
(1)   40/FFFFFFFFFFFF1216 :                     ; ------------------------------------------------
(1)   41/FFFFFFFFFFFF1216 :                     ; on_hold or on_press
(1)   42/FFFFFFFFFFFF1216 :                     ;
(1)   43/FFFFFFFFFFFF1216 :                     ; Read these as WORD
(1)   44/FFFFFFFFFFFF1216 :                     ;
(1)   45/FFFFFFFFFFFF1216 :                     ; Don't do btst directly, read as dX
(1)   46/FFFFFFFFFFFF1216 :                     ; and do btst on register.
(1)   47/FFFFFFFFFFFF1216 :                     ; ------------------------------------------------
(1)   48/FFFFFFFFFFFF1216 :                     
(1)   49/FFFFFFFFFFFF1216 : =$1                  JoyUp		equ $0001
(1)   50/FFFFFFFFFFFF1216 : =$2                  JoyDown		equ $0002
(1)   51/FFFFFFFFFFFF1216 : =$4                  JoyLeft		equ $0004
(1)   52/FFFFFFFFFFFF1216 : =$8                  JoyRight	equ $0008
(1)   53/FFFFFFFFFFFF1216 : =$10                 JoyB		equ $0010
(1)   54/FFFFFFFFFFFF1216 : =$20                 JoyC		equ $0020
(1)   55/FFFFFFFFFFFF1216 : =$40                 JoyA		equ $0040
(1)   56/FFFFFFFFFFFF1216 : =$80                 JoyStart	equ $0080
(1)   57/FFFFFFFFFFFF1216 : =$100                JoyZ		equ $0100
(1)   58/FFFFFFFFFFFF1216 : =$200                JoyY		equ $0200
(1)   59/FFFFFFFFFFFF1216 : =$400                JoyX		equ $0400
(1)   60/FFFFFFFFFFFF1216 : =$800                JoyMode		equ $0800
(1)   61/FFFFFFFFFFFF1216 : =$0                  bitJoyUp	equ 0
(1)   62/FFFFFFFFFFFF1216 : =$1                  bitJoyDown	equ 1
(1)   63/FFFFFFFFFFFF1216 : =$2                  bitJoyLeft	equ 2
(1)   64/FFFFFFFFFFFF1216 : =$3                  bitJoyRight	equ 3
(1)   65/FFFFFFFFFFFF1216 : =$4                  bitJoyB		equ 4
(1)   66/FFFFFFFFFFFF1216 : =$5                  bitJoyC		equ 5
(1)   67/FFFFFFFFFFFF1216 : =$6                  bitJoyA		equ 6
(1)   68/FFFFFFFFFFFF1216 : =$7                  bitJoyStart	equ 7
(1)   69/FFFFFFFFFFFF1216 : =$8                  bitJoyZ		equ 8
(1)   70/FFFFFFFFFFFF1216 : =$9                  bitJoyY		equ 9
(1)   71/FFFFFFFFFFFF1216 : =$A                  bitJoyX		equ 10
(1)   72/FFFFFFFFFFFF1216 : =$B                  bitJoyMode	equ 11
(1)   73/FFFFFFFFFFFF1216 :                     
(1)   74/FFFFFFFFFFFF1216 :                     ; ------------------------------------------------
(1)   75/FFFFFFFFFFFF1216 :                     ; Mega Mouse ONLY
(1)   76/FFFFFFFFFFFF1216 :                     ; ------------------------------------------------
(1)   77/FFFFFFFFFFFF1216 :                     
(1)   78/FFFFFFFFFFFF1216 : =$1                  ClickR		equ $0001
(1)   79/FFFFFFFFFFFF1216 : =$2                  ClickL		equ $0002
(1)   80/FFFFFFFFFFFF1216 : =$4                  ClickM		equ $0004	; US MOUSE ONLY
(1)   81/FFFFFFFFFFFF1216 : =$8                  ClickS		equ $0008	; (Untested)
(1)   82/FFFFFFFFFFFF1216 : =$0                  bitClickL	equ 0
(1)   83/FFFFFFFFFFFF1216 : =$1                  bitClickR	equ 1
(1)   84/FFFFFFFFFFFF1216 : =$2                  bitClickM	equ 2
(1)   85/FFFFFFFFFFFF1216 : =$3                  bitClickS	equ 3
(1)   86/FFFFFFFFFFFF1216 :                     
(1)   87/FFFFFFFFFFFF1216 :                     ; ------------------------------------------------
(1)   88/FFFFFFFFFFFF1216 :                     ; Controller_1 / Controller_2
(1)   89/FFFFFFFFFFFF1216 :                     ; ------------------------------------------------
(1)   90/FFFFFFFFFFFF1216 :                     
(1)   91/FFFFFFFFFFFF1216 : (MACRO)              		strct 0
(1)   91/FFFFFFFFFFFF1216 : =$FFFFFFFFFFFF1216   GLBL_LASTPC     set *
(1)   91/FFFFFFFFFFFFAFB6 :                                     dephase
(1)   91/       0 :                                     phase 0
(1)   91/       0 : =$0                  GLBL_LASTORG    set *
(1)   92/       0 :                     pad_id		ds.b 1			; Controller ID
(1)   93/       1 :                     pad_ver		ds.b 1			; Controller type/revision
(1)   94/       2 :                     on_hold		ds.w 1			; User HOLD bits
(1)   95/       4 :                     on_press	ds.w 1			; User PRESSED bits
(1)   96/       6 :                     on_release	ds.w 1			; (RESERVED)
(1)   97/       8 :                     mouse_x		ds.w 1			; Mouse/Pen X speed
(1)   98/       A :                     mouse_y		ds.w 1			; Mouse/pen Y speed
(1)   99/       C :                     ext_3		ds.w 1
(1)  100/       E :                     ext_4		ds.w 1
(1)  101/      10 :                     sizeof_input	ds.l 0
(1)  102/      10 : (MACRO)              		endstrct
(1)  102/       0 :                                     org GLBL_LASTORG
(1)  102/FFFFFFFFFFFF1216 :                                     phase GLBL_LASTPC
(1)  103/FFFFFFFFFFFF1216 :                     
(1)  104/FFFFFFFFFFFF1216 :                     ; ====================================================================
(1)  105/FFFFFFFFFFFF1216 :                     ; --------------------------------------------------------
(1)  106/FFFFFFFFFFFF1216 :                     ; RAM section
(1)  107/FFFFFFFFFFFF1216 :                     ; --------------------------------------------------------
(1)  108/FFFFFFFFFFFF1216 :                     
(1)  109/FFFFFFFFFFFF1216 : (MACRO)              		strct RAM_MdSystem
(1)  109/FFFFFFFFFFFF1216 : =$FFFFFFFFFFFF1216   GLBL_LASTPC     set *
(1)  109/       0 :                                     dephase
(1)  109/FFFFFFFFFFFFC004 :                                     phase RAM_MDSYSTEM
(1)  109/FFFFFFFFFFFFC004 : =$FFFFFFFFFFFFC004   GLBL_LASTORG    set *
(1)  110/FFFFFFFFFFFFC004 :                     RAM_InputData	ds.b sizeof_input*4		; Input data section
(1)  111/FFFFFFFFFFFFC044 :                     RAM_SaveData	ds.b MAX_SRAMSIZE		; Read/Write of the SAVE data
(1)  112/FFFFFFFFFFFFC444 :                     RAM_SysRandVal	ds.l 1				; Random value
(1)  113/FFFFFFFFFFFFC448 :                     RAM_SysRandSeed	ds.l 1				; Randomness seed
(1)  114/FFFFFFFFFFFFC44C :                     RAM_MdMarsVInt	ds.w 3				; VBlank jump (JMP xxxx xxxx)
(1)  115/FFFFFFFFFFFFC452 :                     RAM_MdMarsHint	ds.w 3				; HBlank jump (JMP xxxx xxxx)
(1)  116/FFFFFFFFFFFFC458 :                     RAM_ScreenMode	ds.w 1
(1)  117/FFFFFFFFFFFFC45A :                     sizeof_mdsys	ds.l 0
(1)  118/FFFFFFFFFFFFC460 : (MACRO)              		endstrct
(1)  118/FFFFFFFFFFFFC004 :                                     org GLBL_LASTORG
(1)  118/FFFFFFFFFFFF1216 :                                     phase GLBL_LASTPC
(1)  119/FFFFFFFFFFFF1216 : (MACRO)              		erreport "MD SYSTEM RAM",sizeof_mdsys-RAM_MdSystem,MAX_MdSystem
(1)  120/FFFFFFFFFFFF1216 :                     
(1)  121/FFFFFFFFFFFF1216 :                     ; ====================================================================
(1)  122/FFFFFFFFFFFF1216 :                     ; --------------------------------------------------------
(1)  123/FFFFFFFFFFFF1216 :                     ; Aliases labels
(1)  124/FFFFFFFFFFFF1216 :                     ; --------------------------------------------------------
(1)  125/FFFFFFFFFFFF1216 :                     
(1)  126/FFFFFFFFFFFF1216 : =$FFFFFFFFFFFFC004   Controller_1	equ RAM_InputData
(1)  127/FFFFFFFFFFFF1216 : =$FFFFFFFFFFFFC014   Controller_2	equ RAM_InputData+sizeof_input
(1)  128/FFFFFFFFFFFF1216 :                     
(1)  129/FFFFFFFFFFFF1216 :                     ; ====================================================================
(1)  130/FFFFFFFFFFFF1216 :                     ; --------------------------------------------------------
(1)  131/FFFFFFFFFFFF1216 :                     ; Init System
(1)  132/FFFFFFFFFFFF1216 :                     ; 
(1)  133/FFFFFFFFFFFF1216 :                     ; Uses:
(1)  134/FFFFFFFFFFFF1216 :                     ; a0-a2,d0-d1
(1)  135/FFFFFFFFFFFF1216 :                     ; --------------------------------------------------------
(1)  136/FFFFFFFFFFFF1216 :                     
(1)  137/FFFFFFFFFFFF1216 :                     System_Init:
(1)  138/FFFFFFFFFFFF1216 : 007C 0700           		or.w	#$0700,sr
(1)  140/FFFFFFFFFFFF121A : 33FC 0100 00A1      		move.w	#$0100,(z80_bus).l	; Stop Z80
         FFFFFFFFFFFF1220 : 1100             
(1)  141/FFFFFFFFFFFF1222 :                     .wait:
(1)  142/FFFFFFFFFFFF1222 : 0839 0000 00A1      		btst	#0,(z80_bus).l		; Wait Z80
         FFFFFFFFFFFF1228 : 1100             
(1)  143/FFFFFFFFFFFF122A : 66F6                		bne.s	.wait
(1)  144/FFFFFFFFFFFF122C : 7040                		moveq	#%01000000,d0		; Init ports, TH=1
(1)  145/FFFFFFFFFFFF122E : 13C0 00A1 0009      		move.b	d0,(sys_ctrl_1).l	; Controller 1
(1)  146/FFFFFFFFFFFF1234 : 13C0 00A1 000B      		move.b	d0,(sys_ctrl_2).l	; Controller 2
(1)  147/FFFFFFFFFFFF123A : 13C0 00A1 000D      		move.b	d0,(sys_ctrl_3).l	; Modem
(1)  148/FFFFFFFFFFFF1240 : 33FC 0000 00A1      		move.w	#0,(z80_bus).l		; Enable Z80
         FFFFFFFFFFFF1246 : 1100             
(1)  150/FFFFFFFFFFFF1248 : 303C 4EF9           		move.w	#$4EF9,d0		; Set JMP opcode for the Hblank/VBlank jumps
(1)  151/FFFFFFFFFFFF124C : 31C0 C44C            		move.w	d0,(RAM_MdMarsVInt).w
(1)  152/FFFFFFFFFFFF1250 : 31C0 C452           		move.w	d0,(RAM_MdMarsHInt).w
(1)  153/FFFFFFFFFFFF1254 : 203C FFFF 1652      		move.l	#VInt_Default,d0	; Set default interrupt jumps
(1)  154/FFFFFFFFFFFF125A : 223C FFFF 1668      		move.l	#Hint_Default,d1
(1)  155/FFFFFFFFFFFF1260 : 6100 03A0           		bsr	System_SetInts
(1)  156/FFFFFFFFFFFF1264 : 41F8 C004           		lea	(RAM_InputData).w,a0	; Clear input data buffer
(1)  157/FFFFFFFFFFFF1268 : 323C 0007           		move.w	#(sizeof_input/2)-1,d1
(1)  158/FFFFFFFFFFFF126C : 7000                		moveq	#0,d0
(1)  159/FFFFFFFFFFFF126E :                     .clrinput:
(1)  160/FFFFFFFFFFFF126E : 30C0                		move.w	d0,(a0)+
(1)  161/FFFFFFFFFFFF1270 : 51C9 FFFC           		dbf	d1,.clrinput
(1)  162/FFFFFFFFFFFF1274 : 203C 5625 5769      		move.l	#$56255769,d0		; Set these random values
(1)  163/FFFFFFFFFFFF127A : 223C 9511 6102      		move.l	#$95116102,d1
(1)  164/FFFFFFFFFFFF1280 : 23C0 FFFF C444      		move.l	d0,(RAM_SysRandVal).l
(1)  165/FFFFFFFFFFFF1286 : 23C1 FFFF C448      		move.l	d1,(RAM_SysRandSeed).l
(1)  166/FFFFFFFFFFFF128C : 027C F8FF           		andi.w	#$F8FF,sr
(1)  167/FFFFFFFFFFFF1290 : 6000 0382           		bra	System_SramInit
(1)  168/FFFFFFFFFFFF1294 :                     
(1)  169/FFFFFFFFFFFF1294 :                     ; --------------------------------------------------------
(1)  170/FFFFFFFFFFFF1294 :                     ; System_Render
(1)  171/FFFFFFFFFFFF1294 :                     ;
(1)  172/FFFFFFFFFFFF1294 :                     ; Call this on the loop your current screen.
(1)  173/FFFFFFFFFFFF1294 :                     ; ** VDP DISPLAY MUST BE ON TO USE THIS **
(1)  174/FFFFFFFFFFFF1294 :                     ;
(1)  175/FFFFFFFFFFFF1294 :                     ; This will:
(1)  176/FFFFFFFFFFFF1294 :                     ; - Update the sound driver for any changes that
(1)  177/FFFFFFFFFFFF1294 :                     ;   need communication with 68K
(1)  178/FFFFFFFFFFFF1294 :                     ; - Build the object sprites
(1)  179/FFFFFFFFFFFF1294 :                     ; - 32X/CD32X:
(1)  180/FFFFFFFFFFFF1294 :                     ;   Update the DREQ data
(1)  181/FFFFFFFFFFFF1294 :                     ;
(1)  182/FFFFFFFFFFFF1294 :                     ; On VBLANK:
(1)  183/FFFFFFFFFFFF1294 :                     ; - Update the input data
(1)  184/FFFFFFFFFFFF1294 :                     ; - Transfer the Genesis palette, sprites and scroll
(1)  185/FFFFFFFFFFFF1294 :                     ;   data from from RAM to VDP
(1)  186/FFFFFFFFFFFF1294 :                     ;   (32X: RV bit is not required.)
(1)  187/FFFFFFFFFFFF1294 :                     ; - Process the DMA BLAST list (32X: Uses RV bit)
(1)  188/FFFFFFFFFFFF1294 :                     ; --------------------------------------------------------
(1)  189/FFFFFFFFFFFF1294 :                     
(1)  190/FFFFFFFFFFFF1294 :                     System_Render:
(1)  191/FFFFFFFFFFFF1294 : 1E38 B8F9           		move.b	(RAM_VdpRegs+1).w,d7		; ** If the user forgets to enable
(1)  192/FFFFFFFFFFFF1298 : 0807 0006           		btst	#bitDispEnbl,d7			; ** DISPLAY skip all of this
(1)  193/FFFFFFFFFFFF129C : 673A                		beq.s	.forgot_disp			; **
(1)  194/FFFFFFFFFFFF129E :                     .wait_lag:
(1)  195/FFFFFFFFFFFF129E : 6100 EDE4           		bsr	Sound_Update			; Syncronize/Update sound on lag
(1)  196/FFFFFFFFFFFF12A2 : 3E39 00C0 0004      		move.w	(vdp_ctrl).l,d7			; Got here during VBlank?
(1)  197/FFFFFFFFFFFF12A8 : 0807 0003           		btst	#bitVBlk,d7			; If yes, drop frame and wait
(1)  198/FFFFFFFFFFFF12AC : 66F0                		bne.s	.wait_lag
(1)  199/FFFFFFFFFFFF12AE : 6100 EDD4           		bsr	Sound_Update			; Update sound
(1)  200/FFFFFFFFFFFF12B2 : 6100 FBE0           		bsr	Objects_Show			; Build sprite data from Objects
(1)  202/FFFFFFFFFFFF12B6 : 6100 05D0           		bsr	System_MarsUpdate		; Send DREQ changes
(1)  204/FFFFFFFFFFFF12BA :                     .wait_in:
(1)  205/FFFFFFFFFFFF12BA : 6100 EDC8           		bsr	Sound_Update			; Syncronize/Update sound during Display
(1)  206/FFFFFFFFFFFF12BE : 3E39 00C0 0004      		move.w	(vdp_ctrl).l,d7
(1)  207/FFFFFFFFFFFF12C4 : 0807 0003           		btst	#bitVBlk,d7			; VBlank started?
(1)  208/FFFFFFFFFFFF12C8 : 67F0                		beq.s	.wait_in
(1)  209/FFFFFFFFFFFF12CA :                     .lost_frame:
(1)  210/FFFFFFFFFFFF12CA : 6122                		bsr	System_Input			; Read input data FIRST
(1)  211/FFFFFFFFFFFF12CC : 6100 F5C4           		bsr	Video_Render			; Render visuals
(1)  212/FFFFFFFFFFFF12D0 : 6100 EDB2           		bsr	Sound_Update			; Update sound
(1)  213/FFFFFFFFFFFF12D4 : 52B8 B8D4           		addq.l	#1,(RAM_Framecount).w		; Count the frame.
(1)  214/FFFFFFFFFFFF12D8 :                     
(1)  215/FFFFFFFFFFFF12D8 :                     .forgot_disp:
(1)  216/FFFFFFFFFFFF12D8 : 4E75                		rts
(1)  217/FFFFFFFFFFFF12DA :                     
(1)  218/FFFFFFFFFFFF12DA :                     ; ====================================================================
(1)  219/FFFFFFFFFFFF12DA :                     ; --------------------------------------------------------
(1)  220/FFFFFFFFFFFF12DA :                     ; System_DmaEnter_(from) and System_DmaEnter_(from)
(1)  221/FFFFFFFFFFFF12DA :                     ; from ROM or RAM
(1)  222/FFFFFFFFFFFF12DA :                     ;
(1)  223/FFFFFFFFFFFF12DA :                     ; Call to these labels BEFORE and AFTER
(1)  224/FFFFFFFFFFFF12DA :                     ; DMA-to-VDP transers, these calls are NOT
(1)  225/FFFFFFFFFFFF12DA :                     ; required for FILL or COPY
(1)  226/FFFFFFFFFFFF12DA :                     ;
(1)  227/FFFFFFFFFFFF12DA :                     ; This is where you put your Sound driver's Z80 stop
(1)  228/FFFFFFFFFFFF12DA :                     ; or pause calls here.
(1)  229/FFFFFFFFFFFF12DA :                     ; --------------------------------------------------------
(1)  230/FFFFFFFFFFFF12DA :                     
(1)  231/FFFFFFFFFFFF12DA :                     System_DmaEnter_RAM:
(1)  232/FFFFFFFFFFFF12DA : 6000 EE88           		bra	gemaDmaPause
(1)  233/FFFFFFFFFFFF12DE :                     System_DmaExit_RAM:
(1)  234/FFFFFFFFFFFF12DE : 6000 EEA6           		bra	gemaDmaResume
(1)  235/FFFFFFFFFFFF12E2 :                     
(1)  236/FFFFFFFFFFFF12E2 :                     ; --------------------------------------------------------
(1)  237/FFFFFFFFFFFF12E2 :                     ; *** THESE ENABLE AND DISABLE THE RV BIT ***
(1)  238/FFFFFFFFFFFF12E2 :                     
(1)  239/FFFFFFFFFFFF12E2 :                     System_DmaEnter_ROM:
(1)  240/FFFFFFFFFFFF12E2 : 6100 EE80           		bsr	gemaDmaPause
(1)  244/FFFFFFFFFFFF12E6 : 4E75                		rts
(1)  245/FFFFFFFFFFFF12E8 :                     
(1)  246/FFFFFFFFFFFF12E8 :                     System_DmaExit_ROM:
(1)  247/FFFFFFFFFFFF12E8 : 6100 EE9C           		bsr	gemaDmaResume
(1)  251/FFFFFFFFFFFF12EC : 4E75                		rts
(1)  252/FFFFFFFFFFFF12EE :                     
(1)  253/FFFFFFFFFFFF12EE :                     ; ====================================================================
(1)  254/FFFFFFFFFFFF12EE :                     ; ----------------------------------------------------------------
(1)  255/FFFFFFFFFFFF12EE :                     ; Subroutines
(1)  256/FFFFFFFFFFFF12EE :                     ; ----------------------------------------------------------------
(1)  257/FFFFFFFFFFFF12EE :                     
(1)  258/FFFFFFFFFFFF12EE :                     ; --------------------------------------------------------
(1)  259/FFFFFFFFFFFF12EE :                     ; System_Input
(1)  260/FFFFFFFFFFFF12EE :                     ;
(1)  261/FFFFFFFFFFFF12EE :                     ; Reads data from the Controller ports
(1)  262/FFFFFFFFFFFF12EE :                     ; *** CALL THIS ON VBLANK ONLY ***
(1)  263/FFFFFFFFFFFF12EE :                     ;
(1)  264/FFFFFFFFFFFF12EE :                     ; Uses:
(1)  265/FFFFFFFFFFFF12EE :                     ; d5-d7,a5-a6
(1)  266/FFFFFFFFFFFF12EE :                     ; --------------------------------------------------------
(1)  267/FFFFFFFFFFFF12EE :                     
(1)  268/FFFFFFFFFFFF12EE :                     ; ----------------------------------------
(1)  269/FFFFFFFFFFFF12EE :                     ; PICO input is hard-coded to
(1)  270/FFFFFFFFFFFF12EE :                     ; Controller_1
(1)  271/FFFFFFFFFFFF12EE :                     ;
(1)  272/FFFFFFFFFFFF12EE :                     ; on_hold/on_press:
(1)  273/FFFFFFFFFFFF12EE :                     ; %P00BRLDU
(1)  274/FFFFFFFFFFFF12EE :                     ; UDLR - Arrows
(1)  275/FFFFFFFFFFFF12EE :                     ;    B - BIG button red
(1)  276/FFFFFFFFFFFF12EE :                     ;    P - Pen press/click
(1)  277/FFFFFFFFFFFF12EE :                     ;
(1)  278/FFFFFFFFFFFF12EE :                     ; mouse_x/mouse_y:
(1)  279/FFFFFFFFFFFF12EE :                     ; Pen X/Y position
(1)  280/FFFFFFFFFFFF12EE :                     ; ----------------------------------------
(1)  281/FFFFFFFFFFFF12EE :                     
(1)  282/FFFFFFFFFFFF12EE :                     System_Input:
(1)  283/FFFFFFFFFFFF12EE :                     
(1)  330/FFFFFFFFFFFF12EE :                     	; ----------------------------------------
(1)  331/FFFFFFFFFFFF12EE :                     	; Normal Genesis controls
(1)  332/FFFFFFFFFFFF12EE :                     
(1)  333/FFFFFFFFFFFF12EE : 4DF8 C004           		lea	(RAM_InputData).w,a6	; a6 - Output
(1)  334/FFFFFFFFFFFF12F2 : 4BF9 00A1 0003      		lea	(sys_data_1),a5		; a5 - BASE Genesis Input regs area
(1)  335/FFFFFFFFFFFF12F8 : 6108                		bsr.s	.this_one
(1)  336/FFFFFFFFFFFF12FA : DAFC 0002           		adda	#2,a5
(1)  337/FFFFFFFFFFFF12FE : DCFC 0010           		adda	#sizeof_input,a6
(1)  338/FFFFFFFFFFFF1302 :                     
(1)  339/FFFFFFFFFFFF1302 :                     ; ----------------------------------------
(1)  340/FFFFFFFFFFFF1302 :                     ; Read port
(1)  341/FFFFFFFFFFFF1302 :                     ;
(1)  342/FFFFFFFFFFFF1302 :                     ; a5 - Current port
(1)  343/FFFFFFFFFFFF1302 :                     ; a6 - Output data
(1)  344/FFFFFFFFFFFF1302 :                     ; ----------------------------------------
(1)  345/FFFFFFFFFFFF1302 :                     
(1)  346/FFFFFFFFFFFF1302 :                     .this_one:
(1)  347/FFFFFFFFFFFF1302 : 6100 0166           		bsr	.pick_id
(1)  348/FFFFFFFFFFFF1306 : 1C87                		move.b	d7,pad_id(a6)
(1)  349/FFFFFFFFFFFF1308 : 0C47 000F           		cmpi.w	#$0F,d7
(1)  350/FFFFFFFFFFFF130C : 670E                		beq.s	.exit
(1)  351/FFFFFFFFFFFF130E : 0247 000F           		andi.w	#$0F,d7
(1)  352/FFFFFFFFFFFF1312 : DE47                		add.w	d7,d7
(1)  353/FFFFFFFFFFFF1314 : 3C3B 700C           		move.w	.list(pc,d7.w),d6
(1)  354/FFFFFFFFFFFF1318 : 4EFB 6008           		jmp	.list(pc,d6.w)
(1)  355/FFFFFFFFFFFF131C :                     .exit:
(1)  356/FFFFFFFFFFFF131C : 422E 0001           		clr.b	pad_ver(a6)
(1)  357/FFFFFFFFFFFF1320 : 4E75                		rts
(1)  358/FFFFFFFFFFFF1322 :                     
(1)  359/FFFFFFFFFFFF1322 :                     ; ----------------------------------------
(1)  360/FFFFFFFFFFFF1322 :                     ; Grab ID
(1)  361/FFFFFFFFFFFF1322 :                     ; ----------------------------------------
(1)  362/FFFFFFFFFFFF1322 :                     
(1)  363/FFFFFFFFFFFF1322 :                     .list:
(1)  364/FFFFFFFFFFFF1322 : FFFA                		dc.w .exit-.list	; $00
(1)  365/FFFFFFFFFFFF1324 : FFFA                		dc.w .exit-.list
(1)  366/FFFFFFFFFFFF1326 : FFFA                		dc.w .exit-.list
(1)  367/FFFFFFFFFFFF1328 : 0020                		dc.w .id_03-.list	; $03 - Mega mouse
(1)  368/FFFFFFFFFFFF132A : FFFA                		dc.w .exit-.list	; $04
(1)  369/FFFFFFFFFFFF132C : FFFA                		dc.w .exit-.list
(1)  370/FFFFFFFFFFFF132E : FFFA                		dc.w .exit-.list
(1)  371/FFFFFFFFFFFF1330 : FFFA                		dc.w .exit-.list
(1)  372/FFFFFFFFFFFF1332 : FFFA                		dc.w .exit-.list	; $08
(1)  373/FFFFFFFFFFFF1334 : FFFA                		dc.w .exit-.list
(1)  374/FFFFFFFFFFFF1336 : FFFA                		dc.w .exit-.list
(1)  375/FFFFFFFFFFFF1338 : FFFA                		dc.w .exit-.list
(1)  376/FFFFFFFFFFFF133A : FFFA                		dc.w .exit-.list	; $0C
(1)  377/FFFFFFFFFFFF133C : 00CA                		dc.w .id_0D-.list	; $0D - Genesis controller (3 or 6 button)
(1)  378/FFFFFFFFFFFF133E : FFFA                		dc.w .exit-.list
(1)  379/FFFFFFFFFFFF1340 : FFFA                		dc.w .exit-.list	; $0F - No controller OR Master System controller (2 Buttons: 1(B),2(C))
(1)  380/FFFFFFFFFFFF1342 :                     
(1)  381/FFFFFFFFFFFF1342 :                     ; ----------------------------------------
(1)  382/FFFFFFFFFFFF1342 :                     ; ID $03
(1)  383/FFFFFFFFFFFF1342 :                     ;
(1)  384/FFFFFFFFFFFF1342 :                     ; Mega Mouse
(1)  385/FFFFFFFFFFFF1342 :                     ; ----------------------------------------
(1)  386/FFFFFFFFFFFF1342 :                     
(1)  387/FFFFFFFFFFFF1342 :                     ; *** NOT TESTED ON HARDWARE ***
(1)  388/FFFFFFFFFFFF1342 :                     .id_03:
(1)  389/FFFFFFFFFFFF1342 : 1ABC 0020           		move.b	#$20,(a5)
(1)  390/FFFFFFFFFFFF1346 : 1B7C 0060 0006      		move.b	#$60,6(a5)
(1)  391/FFFFFFFFFFFF134C : 0815 0004           		btst	#4,(a5)
(1)  392/FFFFFFFFFFFF1350 : 6700 0094           		beq.w	.invalid
(1)  393/FFFFFFFFFFFF1354 : 1ABC 0000           		move.b	#$00,(a5)	; $0F
(1)  394/FFFFFFFFFFFF1358 : 4E71                		nop
(1)  395/FFFFFFFFFFFF135A : 4E71                		nop
(1)  396/FFFFFFFFFFFF135C : 1ABC 0020           		move.b	#$20,(a5)	; $0F
(1)  397/FFFFFFFFFFFF1360 : 4E71                		nop
(1)  398/FFFFFFFFFFFF1362 : 4E71                		nop
(1)  399/FFFFFFFFFFFF1364 : 1ABC 0000           		move.b	#$00,(a5)	; Yo | Xo | Ys | Xs
(1)  400/FFFFFFFFFFFF1368 : 4E71                		nop
(1)  401/FFFFFFFFFFFF136A : 4E71                		nop
(1)  402/FFFFFFFFFFFF136C : 1A15                		move.b	(a5),d5		; d5 - X/Y direction bits (Ys Xs)
(1)  403/FFFFFFFFFFFF136E : 1ABC 0020           		move.b	#$20,(a5)	; C | M | R | L
(1)  404/FFFFFFFFFFFF1372 : 4E71                		nop
(1)  405/FFFFFFFFFFFF1374 : 4E71                		nop
(1)  406/FFFFFFFFFFFF1376 : 1E15                		move.b	(a5),d7
(1)  407/FFFFFFFFFFFF1378 : 0247 000F            		andi.w	#%1111,d7
(1)  408/FFFFFFFFFFFF137C : 3C2E 0002           		move.w	on_hold(a6),d6
(1)  409/FFFFFFFFFFFF1380 : BF46                		eor.w	d7,d6
(1)  410/FFFFFFFFFFFF1382 : 3D47 0002           		move.w	d7,on_hold(a6)
(1)  411/FFFFFFFFFFFF1386 : CC47                		and.w	d7,d6
(1)  412/FFFFFFFFFFFF1388 : 3D46 0004           		move.w	d6,on_press(a6)
(1)  413/FFFFFFFFFFFF138C : 1ABC 0000           		move.b	#$00,(a5)	; X7 | X6 | X5 | X4
(1)  414/FFFFFFFFFFFF1390 : 4E71                		nop
(1)  415/FFFFFFFFFFFF1392 : 4E71                		nop
(1)  416/FFFFFFFFFFFF1394 : 1E15                		move.b	(a5),d7
(1)  417/FFFFFFFFFFFF1396 : 1ABC 0020           		move.b	#$20,(a5)	; X3 | X2 | X1 | X0
(1)  418/FFFFFFFFFFFF139A : 0247 000F           		andi.w	#%1111,d7
(1)  419/FFFFFFFFFFFF139E : E94F                		lsl.w	#4,d7
(1)  420/FFFFFFFFFFFF13A0 : 4E71                		nop
(1)  421/FFFFFFFFFFFF13A2 : 1C15                		move.b	(a5),d6
(1)  422/FFFFFFFFFFFF13A4 : 0246 000F           		andi.w	#%1111,d6
(1)  423/FFFFFFFFFFFF13A8 : 8E46                		or.w	d6,d7
(1)  424/FFFFFFFFFFFF13AA : 0805 0000           		btst    #0,d5
(1)  425/FFFFFFFFFFFF13AE : 6704                		beq.s	.x_neg
(1)  426/FFFFFFFFFFFF13B0 : 4407                		neg.b	d7
(1)  427/FFFFFFFFFFFF13B2 : 4447                		neg.w	d7
(1)  428/FFFFFFFFFFFF13B4 :                     .x_neg:
(1)  429/FFFFFFFFFFFF13B4 : 3D47 0008           		move.w	d7,mouse_x(a6)
(1)  430/FFFFFFFFFFFF13B8 : 1ABC 0000           		move.b	#$00,(a5)	; Y7 | Y6 | Y5 | Y4
(1)  431/FFFFFFFFFFFF13BC : 4E71                		nop
(1)  432/FFFFFFFFFFFF13BE : 4E71                		nop
(1)  433/FFFFFFFFFFFF13C0 : 1E15                		move.b	(a5),d7
(1)  434/FFFFFFFFFFFF13C2 : 1ABC 0020           		move.b	#$20,(a5)	; Y3 | Y2 | Y1 | Y0
(1)  435/FFFFFFFFFFFF13C6 : 0247 000F           		andi.w	#%1111,d7
(1)  436/FFFFFFFFFFFF13CA : E94F                		lsl.w	#4,d7
(1)  437/FFFFFFFFFFFF13CC : 4E71                		nop
(1)  438/FFFFFFFFFFFF13CE : 1C15                		move.b	(a5),d6
(1)  439/FFFFFFFFFFFF13D0 : 0246 000F           		andi.w	#%1111,d6
(1)  440/FFFFFFFFFFFF13D4 : 8E46                		or.w	d6,d7
(1)  441/FFFFFFFFFFFF13D6 : 0805 0001           		btst    #1,d5
(1)  442/FFFFFFFFFFFF13DA : 6704                		beq.s	.y_neg
(1)  443/FFFFFFFFFFFF13DC : 4407                		neg.b	d7
(1)  444/FFFFFFFFFFFF13DE : 4447                		neg.w	d7
(1)  445/FFFFFFFFFFFF13E0 :                     .y_neg:
(1)  446/FFFFFFFFFFFF13E0 : 4447                		neg.w	d7		; Reverse Y
(1)  447/FFFFFFFFFFFF13E2 : 3D47 000A           		move.w	d7,mouse_y(a6)
(1)  448/FFFFFFFFFFFF13E6 :                     
(1)  449/FFFFFFFFFFFF13E6 :                     .invalid:
(1)  450/FFFFFFFFFFFF13E6 : 1ABC 0060           		move.b	#$60,(a5)
(1)  451/FFFFFFFFFFFF13EA : 4E75                		rts
(1)  452/FFFFFFFFFFFF13EC :                     
(1)  453/FFFFFFFFFFFF13EC :                     ; ----------------------------------------
(1)  454/FFFFFFFFFFFF13EC :                     ; ID $0D
(1)  455/FFFFFFFFFFFF13EC :                     ;
(1)  456/FFFFFFFFFFFF13EC :                     ; Normal controller: 3 button or 6 button.
(1)  457/FFFFFFFFFFFF13EC :                     ; ----------------------------------------
(1)  458/FFFFFFFFFFFF13EC :                     
(1)  459/FFFFFFFFFFFF13EC :                     .id_0D:
(1)  460/FFFFFFFFFFFF13EC : 1ABC 0040           		move.b	#$40,(a5)	; Show CB|RLDU
(1)  461/FFFFFFFFFFFF13F0 : 4E71                		nop
(1)  462/FFFFFFFFFFFF13F2 : 4E71                		nop
(1)  463/FFFFFFFFFFFF13F4 : 1A15                		move.b	(a5),d5
(1)  464/FFFFFFFFFFFF13F6 : 0245 003F           		andi.w	#%00111111,d5
(1)  465/FFFFFFFFFFFF13FA : 1ABC 0000           		move.b	#$00,(a5)	; Show SA|RLDU
(1)  466/FFFFFFFFFFFF13FE : 4E71                		nop
(1)  467/FFFFFFFFFFFF1400 : 4E71                		nop
(1)  468/FFFFFFFFFFFF1402 : 1E15                		move.b	(a5),d7		; The following flips are for
(1)  469/FFFFFFFFFFFF1404 : E54F                		lsl.w	#2,d7		; the 6pad's internal counter:
(1)  470/FFFFFFFFFFFF1406 : 0247 00C0           		andi.w	#%11000000,d7
(1)  471/FFFFFFFFFFFF140A : 8E45                		or.w	d5,d7
(1)  472/FFFFFFFFFFFF140C : 1ABC 0040           		move.b	#$40,(a5)	; Show CB|RLDU (2)
(1)  473/FFFFFFFFFFFF1410 : 4647                		not.w	d7
(1)  474/FFFFFFFFFFFF1412 : 1A2E 0003           		move.b	on_hold+1(a6),d5
(1)  475/FFFFFFFFFFFF1416 : BF05                		eor.b	d7,d5
(1)  476/FFFFFFFFFFFF1418 : 1ABC 0000           		move.b	#$00,(a5)	; Show SA|RLDU (3)
(1)  477/FFFFFFFFFFFF141C : 1D47 0003           		move.b	d7,on_hold+1(a6)
(1)  478/FFFFFFFFFFFF1420 : CA07                		and.b	d7,d5
(1)  479/FFFFFFFFFFFF1422 : 1D45 0005           		move.b	d5,on_press+1(a6)
(1)  480/FFFFFFFFFFFF1426 : 1ABC 0040           		move.b	#$40,(a5)	; 6 button responds (4)
(1)  481/FFFFFFFFFFFF142A : 4E71                		nop
(1)  482/FFFFFFFFFFFF142C : 4E71                		nop
(1)  483/FFFFFFFFFFFF142E : 1E15                		move.b	(a5),d7		; Grab ??|MXYZ
(1)  484/FFFFFFFFFFFF1430 : 1ABC 0000            		move.b	#$00,(a5)	; (5)
(1)  485/FFFFFFFFFFFF1434 : 4E71                  		nop
(1)  486/FFFFFFFFFFFF1436 : 4E71                  		nop
(1)  487/FFFFFFFFFFFF1438 : 1C15                 		move.b	(a5),d6		; Type: $03 old, $0F new
(1)  488/FFFFFFFFFFFF143A : 1ABC 0040            		move.b	#$40,(a5)	; (6)
(1)  489/FFFFFFFFFFFF143E : 4E71                 		nop
(1)  490/FFFFFFFFFFFF1440 : 4E71                 		nop
(1)  491/FFFFFFFFFFFF1442 : 0246 000F           		andi.w	#$F,d6
(1)  492/FFFFFFFFFFFF1446 : E44E                		lsr.w	#2,d6
(1)  493/FFFFFFFFFFFF1448 : 0246 0001           		andi.w	#1,d6
(1)  494/FFFFFFFFFFFF144C : 6716                		beq.s	.oldpad
(1)  495/FFFFFFFFFFFF144E : 4607                		not.b	d7
(1)  496/FFFFFFFFFFFF1450 : 0247 000F            		andi.w	#%1111,d7
(1)  497/FFFFFFFFFFFF1454 : 1A2E 0002           		move.b	on_hold(a6),d5
(1)  498/FFFFFFFFFFFF1458 : BF05                		eor.b	d7,d5
(1)  499/FFFFFFFFFFFF145A : 1D47 0002           		move.b	d7,on_hold(a6)
(1)  500/FFFFFFFFFFFF145E : CA07                		and.b	d7,d5
(1)  501/FFFFFFFFFFFF1460 : 1D45 0004           		move.b	d5,on_press(a6)
(1)  502/FFFFFFFFFFFF1464 :                     .oldpad:
(1)  503/FFFFFFFFFFFF1464 : 1D46 0001           		move.b	d6,pad_ver(a6)
(1)  504/FFFFFFFFFFFF1468 : 4E75                		rts
(1)  505/FFFFFFFFFFFF146A :                     
(1)  506/FFFFFFFFFFFF146A :                     ; ----------------------------------------
(1)  507/FFFFFFFFFFFF146A :                     ; Grab ID
(1)  508/FFFFFFFFFFFF146A :                     ; ----------------------------------------
(1)  509/FFFFFFFFFFFF146A :                     
(1)  510/FFFFFFFFFFFF146A :                     .pick_id:
(1)  511/FFFFFFFFFFFF146A : 7E00                		moveq	#0,d7
(1)  512/FFFFFFFFFFFF146C : 1ABC 0070           		move.b	#%01110000,(a5)		; TH=1,TR=1,TL=1
(1)  513/FFFFFFFFFFFF1470 : 4E71                		nop
(1)  514/FFFFFFFFFFFF1472 : 4E71                		nop
(1)  515/FFFFFFFFFFFF1474 : 610A                		bsr	.read
(1)  516/FFFFFFFFFFFF1476 : 1ABC 0030           		move.b	#%00110000,(a5)		; TH=0,TR=1,TL=1
(1)  517/FFFFFFFFFFFF147A : 4E71                		nop
(1)  518/FFFFFFFFFFFF147C : 4E71                		nop
(1)  519/FFFFFFFFFFFF147E : DE47                		add.w	d7,d7
(1)  520/FFFFFFFFFFFF1480 :                     .read:
(1)  521/FFFFFFFFFFFF1480 : 1A15                		move.b	(a5),d5
(1)  522/FFFFFFFFFFFF1482 : 1C05                		move.b	d5,d6
(1)  523/FFFFFFFFFFFF1484 : 0206 000C           		andi.b	#%1100,d6
(1)  524/FFFFFFFFFFFF1488 : 6702                		beq.s	.step_1
(1)  525/FFFFFFFFFFFF148A : 5247                		addq.w	#1,d7
(1)  526/FFFFFFFFFFFF148C :                     .step_1:
(1)  527/FFFFFFFFFFFF148C : DE47                		add.w	d7,d7
(1)  528/FFFFFFFFFFFF148E : 1C05                		move.b	d5,d6
(1)  529/FFFFFFFFFFFF1490 : 0246 0003           		andi.w	#%0011,d6
(1)  530/FFFFFFFFFFFF1494 : 6702                		beq.s	.step_2
(1)  531/FFFFFFFFFFFF1496 : 5247                		addq.w	#1,d7
(1)  532/FFFFFFFFFFFF1498 :                     .step_2:
(1)  533/FFFFFFFFFFFF1498 : 4E75                		rts
(1)  535/FFFFFFFFFFFF149A :                     
(1)  536/FFFFFFFFFFFF149A :                     ; --------------------------------------------------------
(1)  537/FFFFFFFFFFFF149A :                     ; System_Random
(1)  538/FFFFFFFFFFFF149A :                     ;
(1)  539/FFFFFFFFFFFF149A :                     ; Makes a random number.
(1)  540/FFFFFFFFFFFF149A :                     ;
(1)  541/FFFFFFFFFFFF149A :                     ; Returns:
(1)  542/FFFFFFFFFFFF149A :                     ; d0.l | Result value
(1)  543/FFFFFFFFFFFF149A :                     ;
(1)  544/FFFFFFFFFFFF149A :                     ; Uses:
(1)  545/FFFFFFFFFFFF149A :                     ; d4
(1)  546/FFFFFFFFFFFF149A :                     ; --------------------------------------------------------
(1)  547/FFFFFFFFFFFF149A :                     
(1)  548/FFFFFFFFFFFF149A :                     System_Random:
(1)  549/FFFFFFFFFFFF149A : 2F04                		move.l	d4,-(sp)
(1)  550/FFFFFFFFFFFF149C : 2838 C448           		move.l	(RAM_SysRandSeed).w,d4
(1)  551/FFFFFFFFFFFF14A0 : 6606                		bne.s	.good_s
(1)  552/FFFFFFFFFFFF14A2 : 283C 23B5 1947      		move.l	#$23B51947,d4
(1)  553/FFFFFFFFFFFF14A8 :                     .good_s:
(1)  554/FFFFFFFFFFFF14A8 : 2004                		move.l	d4,d0
(1)  555/FFFFFFFFFFFF14AA : EB9C                		rol.l	#5,d4
(1)  556/FFFFFFFFFFFF14AC : D880                		add.l	d0,d4
(1)  557/FFFFFFFFFFFF14AE : E644                		asr.w	#3,d4
(1)  558/FFFFFFFFFFFF14B0 : D880                		add.l	d0,d4
(1)  559/FFFFFFFFFFFF14B2 : 3004                		move.w	d4,d0
(1)  560/FFFFFFFFFFFF14B4 : 4844                		swap	d4
(1)  561/FFFFFFFFFFFF14B6 : D044                		add.w	d4,d0
(1)  562/FFFFFFFFFFFF14B8 : 3800                		move.w	d0,d4
(1)  563/FFFFFFFFFFFF14BA : 4844                		swap	d4
(1)  564/FFFFFFFFFFFF14BC : 21C4 C448           		move.l	d4,(RAM_SysRandSeed).w
(1)  565/FFFFFFFFFFFF14C0 : 281F                		move.l	(sp)+,d4
(1)  566/FFFFFFFFFFFF14C2 : 4E75                		rts
(1)  567/FFFFFFFFFFFF14C4 :                     
(1)  568/FFFFFFFFFFFF14C4 :                     ; --------------------------------------------------------
(1)  569/FFFFFFFFFFFF14C4 :                     ; System_SineWave, System_SineWave_Cos
(1)  570/FFFFFFFFFFFF14C4 :                     ;
(1)  571/FFFFFFFFFFFF14C4 :                     ; Get sine or cosine value
(1)  572/FFFFFFFFFFFF14C4 :                     ;
(1)  573/FFFFFFFFFFFF14C4 :                     ; Input:
(1)  574/FFFFFFFFFFFF14C4 :                     ; d0.w | Tan value
(1)  575/FFFFFFFFFFFF14C4 :                     ; d1.w | Multiply by
(1)  576/FFFFFFFFFFFF14C4 :                     ;
(1)  577/FFFFFFFFFFFF14C4 :                     ; Returns:
(1)  578/FFFFFFFFFFFF14C4 :                     ; d2.l | Result as $0000.0000
(1)  579/FFFFFFFFFFFF14C4 :                     ; --------------------------------------------------------
(1)  580/FFFFFFFFFFFF14C4 :                     
(1)  581/FFFFFFFFFFFF14C4 :                     System_SineWave_Cos:
(1)  582/FFFFFFFFFFFF14C4 : 48A7 8000           		movem.w	d0,-(sp)
(1)  583/FFFFFFFFFFFF14C8 : 7400                		moveq	#0,d2
(1)  584/FFFFFFFFFFFF14CA : 0600 0040           		addi.b	#$40,d0
(1)  585/FFFFFFFFFFFF14CE : 1400                		move.b	d0,d2
(1)  586/FFFFFFFFFFFF14D0 : E302                		asl.b	#1,d2
(1)  587/FFFFFFFFFFFF14D2 : 343B 202E           		move.w	MdSys_SineData(pc,d2.w),d2
(1)  588/FFFFFFFFFFFF14D6 : C4C1                		mulu.w	d1,d2
(1)  589/FFFFFFFFFFFF14D8 : 8000                		or.b	d0,d0
(1)  590/FFFFFFFFFFFF14DA : 6A02                		bpl.s	.dont_neg
(1)  591/FFFFFFFFFFFF14DC : 4482                		neg.l	d2
(1)  592/FFFFFFFFFFFF14DE :                     .dont_neg:
(1)  593/FFFFFFFFFFFF14DE : 4C9F 0001           		movem.w	(sp)+,d0
(1)  594/FFFFFFFFFFFF14E2 : 4E75                		rts
(1)  595/FFFFFFFFFFFF14E4 :                     
(1)  596/FFFFFFFFFFFF14E4 :                     System_SineWave:
(1)  597/FFFFFFFFFFFF14E4 : 48A7 8000           		movem.w	d0,-(sp)
(1)  598/FFFFFFFFFFFF14E8 : 0240 007F           		andi.w	#$7F,d0
(1)  599/FFFFFFFFFFFF14EC : E340                		asl.w	#1,d0
(1)  600/FFFFFFFFFFFF14EE : 343B 0012           		move.w	MdSys_SineData(pc,d0.w),d2
(1)  601/FFFFFFFFFFFF14F2 : C4C1                		mulu.w	d1,d2
(1)  602/FFFFFFFFFFFF14F4 : 4C9F 0001           		movem.w	(sp)+,d0
(1)  603/FFFFFFFFFFFF14F8 : 5182                		subq.l	#8,d2
(1)  604/FFFFFFFFFFFF14FA : 8000                		or.b	d0,d0
(1)  605/FFFFFFFFFFFF14FC : 6A02                		bpl.s	.dont_neg
(1)  606/FFFFFFFFFFFF14FE : 4482                		neg.l	d2
(1)  607/FFFFFFFFFFFF1500 :                     .dont_neg:
(1)  608/FFFFFFFFFFFF1500 : 4E75                		rts
(1)  609/FFFFFFFFFFFF1502 :                     
(1)  610/FFFFFFFFFFFF1502 : 0000 0006 000D      MdSys_SineData:	dc.w 0,	6, $D, $13, $19, $1F, $26, $2C,	$32, $38, $3E
         FFFFFFFFFFFF1508 : 0013 0019 001F 
         FFFFFFFFFFFF150E : 0026 002C 0032 
         FFFFFFFFFFFF1514 : 0038 003E          
(1)  611/FFFFFFFFFFFF1518 : 0044 004A 0050      		dc.w $44, $4A, $50, $56, $5C, $62, $68,	$6D, $73, $79
         FFFFFFFFFFFF151E : 0056 005C 0062 
         FFFFFFFFFFFF1524 : 0068 006D 0073 
         FFFFFFFFFFFF152A : 0079             
(1)  612/FFFFFFFFFFFF152C : 007E 0084 0089      		dc.w $7E, $84, $89, $8E, $93, $98, $9D,	$A2, $A7, $AC
         FFFFFFFFFFFF1532 : 008E 0093 0098 
         FFFFFFFFFFFF1538 : 009D 00A2 00A7 
         FFFFFFFFFFFF153E : 00AC             
(1)  613/FFFFFFFFFFFF1540 : 00B1 00B5 00B9      		dc.w $B1, $B5, $B9, $BE, $C2, $C6, $CA,	$CE, $D1, $D5
         FFFFFFFFFFFF1546 : 00BE 00C2 00C6 
         FFFFFFFFFFFF154C : 00CA 00CE 00D1 
         FFFFFFFFFFFF1552 : 00D5             
(1)  614/FFFFFFFFFFFF1554 : 00D8 00DC 00DF      		dc.w $D8, $DC, $DF, $E2, $E5, $E7, $EA,	$ED, $EF, $F1
         FFFFFFFFFFFF155A : 00E2 00E5 00E7 
         FFFFFFFFFFFF1560 : 00EA 00ED 00EF 
         FFFFFFFFFFFF1566 : 00F1             
(1)  615/FFFFFFFFFFFF1568 : 00F3 00F5 00F7      		dc.w $F3, $F5, $F7, $F8, $FA, $FB, $FC,	$FD, $FE, $FF
         FFFFFFFFFFFF156E : 00F8 00FA 00FB 
         FFFFFFFFFFFF1574 : 00FC 00FD 00FE 
         FFFFFFFFFFFF157A : 00FF             
(1)  616/FFFFFFFFFFFF157C : 00FF 0100 0100      		dc.w $FF, $100,	$100, $100, $100, $100,	$FF, $FF, $FE
         FFFFFFFFFFFF1582 : 0100 0100 0100 
         FFFFFFFFFFFF1588 : 00FF 00FF 00FE    
(1)  617/FFFFFFFFFFFF158E : 00FD 00FC 00FB      		dc.w $FD, $FC, $FB, $FA, $F8, $F7, $F5,	$F3, $F1, $EF
         FFFFFFFFFFFF1594 : 00FA 00F8 00F7 
         FFFFFFFFFFFF159A : 00F5 00F3 00F1 
         FFFFFFFFFFFF15A0 : 00EF             
(1)  618/FFFFFFFFFFFF15A2 : 00ED 00EA 00E7      		dc.w $ED, $EA, $E7, $E5, $E2, $DF, $DC,	$D8, $D5, $D1
         FFFFFFFFFFFF15A8 : 00E5 00E2 00DF 
         FFFFFFFFFFFF15AE : 00DC 00D8 00D5 
         FFFFFFFFFFFF15B4 : 00D1             
(1)  619/FFFFFFFFFFFF15B6 : 00CE 00CA 00C6      		dc.w $CE, $CA, $C6, $C2, $BE, $B9, $B5,	$B1, $AC, $A7
         FFFFFFFFFFFF15BC : 00C2 00BE 00B9 
         FFFFFFFFFFFF15C2 : 00B5 00B1 00AC 
         FFFFFFFFFFFF15C8 : 00A7             
(1)  620/FFFFFFFFFFFF15CA : 00A2 009D 0098      		dc.w $A2, $9D, $98, $93, $8E, $89, $84,	$7E, $79, $73
         FFFFFFFFFFFF15D0 : 0093 008E 0089 
         FFFFFFFFFFFF15D6 : 0084 007E 0079 
         FFFFFFFFFFFF15DC : 0073             
(1)  621/FFFFFFFFFFFF15DE : 006D 0068 0062      		dc.w $6D, $68, $62, $5C, $56, $50, $4A,	$44, $3E, $38
         FFFFFFFFFFFF15E4 : 005C 0056 0050 
         FFFFFFFFFFFF15EA : 004A 0044 003E 
         FFFFFFFFFFFF15F0 : 0038             
(1)  622/FFFFFFFFFFFF15F2 : 0032 002C 0026      		dc.w $32, $2C, $26, $1F, $19, $13, $D, 6
         FFFFFFFFFFFF15F8 : 001F 0019 0013 
         FFFFFFFFFFFF15FE : 000D 0006          
(1)  623/FFFFFFFFFFFF1602 :                     
(1)  624/FFFFFFFFFFFF1602 :                     ; --------------------------------------------------------
(1)  625/FFFFFFFFFFFF1602 :                     ; System_SetInts
(1)  626/FFFFFFFFFFFF1602 :                     ;
(1)  627/FFFFFFFFFFFF1602 :                     ; Set new interrputs
(1)  628/FFFFFFFFFFFF1602 :                     ;
(1)  629/FFFFFFFFFFFF1602 :                     ; d0.l - VBlank (if 0: Skip write)
(1)  630/FFFFFFFFFFFF1602 :                     ; d1.l - HBlank (if 0: Skip write)
(1)  631/FFFFFFFFFFFF1602 :                     ;
(1)  632/FFFFFFFFFFFF1602 :                     ; Uses:
(1)  633/FFFFFFFFFFFF1602 :                     ; d4
(1)  634/FFFFFFFFFFFF1602 :                     ; --------------------------------------------------------
(1)  635/FFFFFFFFFFFF1602 :                     
(1)  636/FFFFFFFFFFFF1602 :                     System_SetInts:
(1)  637/FFFFFFFFFFFF1602 : 2800                		move.l	d0,d4
(1)  638/FFFFFFFFFFFF1604 : 6704                		beq.s	.novint
(1)  640/FFFFFFFFFFFF1606 : 21C4 FD08           		move.l	d4,($FFFFFD06+2).w
(1)  644/FFFFFFFFFFFF160A :                     .novint:
(1)  645/FFFFFFFFFFFF160A : 2801                		move.l	d1,d4
(1)  646/FFFFFFFFFFFF160C : 6704                		beq.s	.nohint
(1)  648/FFFFFFFFFFFF160E : 21C4 FD0E           		move.l	d4,($FFFFFD0C+2).w
(1)  652/FFFFFFFFFFFF1612 :                     .nohint:
(1)  653/FFFFFFFFFFFF1612 : 4E75                		rts
(1)  654/FFFFFFFFFFFF1614 :                     
(1)  655/FFFFFFFFFFFF1614 :                     ; --------------------------------------------------------
(1)  656/FFFFFFFFFFFF1614 :                     ; System_SramInit
(1)  657/FFFFFFFFFFFF1614 :                     ;
(1)  658/FFFFFFFFFFFF1614 :                     ; Init save data
(1)  659/FFFFFFFFFFFF1614 :                     ;
(1)  660/FFFFFFFFFFFF1614 :                     ; Uses:
(1)  661/FFFFFFFFFFFF1614 :                     ; a4,d4-d5
(1)  662/FFFFFFFFFFFF1614 :                     ; --------------------------------------------------------
(1)  663/FFFFFFFFFFFF1614 :                     
(1)  664/FFFFFFFFFFFF1614 :                     System_SramInit:
(1)  668/FFFFFFFFFFFF1614 : 4E71                		nop			; TODO
(1)  683/FFFFFFFFFFFF1616 : 4E75                		rts
(1)  684/FFFFFFFFFFFF1618 :                     
(1)  685/FFFFFFFFFFFF1618 :                     ; --------------------------------------------------------
(1)  686/FFFFFFFFFFFF1618 :                     ; System_SramSave
(1)  687/FFFFFFFFFFFF1618 :                     ; --------------------------------------------------------
(1)  688/FFFFFFFFFFFF1618 :                     
(1)  689/FFFFFFFFFFFF1618 :                     System_SramSave:
(1)  693/FFFFFFFFFFFF1618 : 4E71                		nop
(1)  720/FFFFFFFFFFFF161A : 4E75                		rts
(1)  721/FFFFFFFFFFFF161C :                     
(1)  722/FFFFFFFFFFFF161C :                     ; --------------------------------------------------------
(1)  723/FFFFFFFFFFFF161C :                     ; System_SramLoad
(1)  724/FFFFFFFFFFFF161C :                     ; --------------------------------------------------------
(1)  725/FFFFFFFFFFFF161C :                     
(1)  726/FFFFFFFFFFFF161C :                     System_SramLoad:
(1)  730/FFFFFFFFFFFF161C : 4E71                		nop
(1)  757/FFFFFFFFFFFF161E : 4E75                		rts
(1)  758/FFFFFFFFFFFF1620 :                     
(1)  759/FFFFFFFFFFFF1620 :                     ; ====================================================================
(1)  760/FFFFFFFFFFFF1620 :                     ; ----------------------------------------------------------------
(1)  761/FFFFFFFFFFFF1620 :                     ; Screen mode subroutines
(1)  762/FFFFFFFFFFFF1620 :                     ; ----------------------------------------------------------------
(1)  763/FFFFFFFFFFFF1620 :                     
(1)  764/FFFFFFFFFFFF1620 :                     ; --------------------------------------------------------
(1)  765/FFFFFFFFFFFF1620 :                     ; Initialize current screen mode
(1)  766/FFFFFFFFFFFF1620 :                     ;
(1)  767/FFFFFFFFFFFF1620 :                     ; MUST call this at the very start of your screen code.
(1)  768/FFFFFFFFFFFF1620 :                     ; --------------------------------------------------------
(1)  769/FFFFFFFFFFFF1620 :                     
(1)  770/FFFFFFFFFFFF1620 :                     Mode_Init:
(1)  771/FFFFFFFFFFFF1620 : 007C 0700           		ori.w	#$0700,sr			; Disable interrupts.
(1)  772/FFFFFFFFFFFF1624 : 13FC 0004 FFFF      		move.b	#$04,(RAM_VdpRegs).l
         FFFFFFFFFFFF162A : B8F8             
(1)  773/FFFFFFFFFFFF162C : 13FC 0004 FFFF      		move.b	#$04,(RAM_VdpRegs+1).l
         FFFFFFFFFFFF1632 : B8F9             
(1)  774/FFFFFFFFFFFF1634 : 6100 ECCE           		bsr	Video_Update
(1)  775/FFFFFFFFFFFF1638 : 6100 ECE8           		bsr	Video_Clear
(1)  776/FFFFFFFFFFFF163C : 6100 F78A           		bsr	Objects_Clear
(1)  777/FFFFFFFFFFFF1640 : 49F8 D404           		lea	(RAM_ScrnBuff).w,a4
(1)  778/FFFFFFFFFFFF1644 : 3A3C 0BFF           		move.w	#(MAX_ScrnBuff/2)-1,d5
(1)  779/FFFFFFFFFFFF1648 : 7800                		moveq	#0,d4
(1)  780/FFFFFFFFFFFF164A :                     .clr:
(1)  781/FFFFFFFFFFFF164A : 38C4                		move.w	d4,(a4)+
(1)  782/FFFFFFFFFFFF164C : 51CD FFFC           		dbf	d5,.clr
(1)  783/FFFFFFFFFFFF1650 : 4E75                		rts
(1)  784/FFFFFFFFFFFF1652 :                     
(1)  785/FFFFFFFFFFFF1652 :                     ; ; --------------------------------------------------------
(1)  786/FFFFFFFFFFFF1652 :                     ; ; Syncronized Fade-in/Fade-out for both VDP and SuperVDP
(1)  787/FFFFFFFFFFFF1652 :                     ; ; --------------------------------------------------------
(1)  788/FFFFFFFFFFFF1652 :                     ;
(1)  789/FFFFFFFFFFFF1652 :                     ; Mode_FadeIn:
(1)  790/FFFFFFFFFFFF1652 :                     ; 		bsr	Objects_Run
(1)  791/FFFFFFFFFFFF1652 :                     ; 		move.w	#1,(RAM_FadeMdReq).w
(1)  792/FFFFFFFFFFFF1652 :                     ; 		move.w	#1,(RAM_FadeMarsReq).w
(1)  793/FFFFFFFFFFFF1652 :                     ; 		move.w	#1,(RAM_FadeMdIncr).w
(1)  794/FFFFFFFFFFFF1652 :                     ; 		move.w	#2,(RAM_FadeMarsIncr).w
(1)  795/FFFFFFFFFFFF1652 :                     ; 		move.w	#1,(RAM_FadeMdDelay).w
(1)  796/FFFFFFFFFFFF1652 :                     ; 		move.w	#0,(RAM_FadeMarsDelay).w
(1)  797/FFFFFFFFFFFF1652 :                     ; .loopw:
(1)  798/FFFFFFFFFFFF1652 :                     ; 		bsr	System_Render
(1)  799/FFFFFFFFFFFF1652 :                     ; 		bsr	Video_RunFade
(1)  800/FFFFFFFFFFFF1652 :                     ; 		bne.s	.loopw
(1)  801/FFFFFFFFFFFF1652 :                     ; 		rts
(1)  802/FFFFFFFFFFFF1652 :                     ;
(1)  803/FFFFFFFFFFFF1652 :                     ; Mode_FadeOut:
(1)  804/FFFFFFFFFFFF1652 :                     ; 		bsr	Objects_Run
(1)  805/FFFFFFFFFFFF1652 :                     ; 		move.w	#2,(RAM_FadeMdReq).w
(1)  806/FFFFFFFFFFFF1652 :                     ; 		move.w	#2,(RAM_FadeMarsReq).w
(1)  807/FFFFFFFFFFFF1652 :                     ; 		move.w	#1,(RAM_FadeMdIncr).w
(1)  808/FFFFFFFFFFFF1652 :                     ; 		move.w	#2,(RAM_FadeMarsIncr).w
(1)  809/FFFFFFFFFFFF1652 :                     ; 		move.w	#1,(RAM_FadeMdDelay).w
(1)  810/FFFFFFFFFFFF1652 :                     ; 		move.w	#0,(RAM_FadeMarsDelay).w
(1)  811/FFFFFFFFFFFF1652 :                     ; .loopw:
(1)  812/FFFFFFFFFFFF1652 :                     ; 		bsr	System_Render
(1)  813/FFFFFFFFFFFF1652 :                     ; 		bsr	Video_RunFade
(1)  814/FFFFFFFFFFFF1652 :                     ; 		bne.s	.loopw
(1)  815/FFFFFFFFFFFF1652 :                     ; 		rts
(1)  816/FFFFFFFFFFFF1652 :                     
(1)  817/FFFFFFFFFFFF1652 :                     ; ====================================================================
(1)  818/FFFFFFFFFFFF1652 :                     ; ----------------------------------------------------------------
(1)  819/FFFFFFFFFFFF1652 :                     ; Default interrupts
(1)  820/FFFFFFFFFFFF1652 :                     ; ----------------------------------------------------------------
(1)  821/FFFFFFFFFFFF1652 :                     
(1)  822/FFFFFFFFFFFF1652 :                     ; --------------------------------------------------------
(1)  823/FFFFFFFFFFFF1652 :                     ; VBlank
(1)  824/FFFFFFFFFFFF1652 :                     ; --------------------------------------------------------
(1)  825/FFFFFFFFFFFF1652 :                     
(1)  826/FFFFFFFFFFFF1652 :                     VInt_Default:
(1)  827/FFFFFFFFFFFF1652 : 48E7 FFFE           		movem.l	d0-a6,-(sp)
(1)  828/FFFFFFFFFFFF1656 : 6100 FC96           		bsr	System_Input
(1)  829/FFFFFFFFFFFF165A : 06B8 0000 0001      		addi.l	#1,(RAM_FrameCount).w
         FFFFFFFFFFFF1660 : B8D4             
(1)  830/FFFFFFFFFFFF1662 : 4CDF 7FFF           		movem.l	(sp)+,d0-a6
(1)  831/FFFFFFFFFFFF1666 : 4E73                		rte
(1)  832/FFFFFFFFFFFF1668 :                     
(1)  833/FFFFFFFFFFFF1668 :                     ; --------------------------------------------------------
(1)  834/FFFFFFFFFFFF1668 :                     ; HBlank
(1)  835/FFFFFFFFFFFF1668 :                     ; --------------------------------------------------------
(1)  836/FFFFFFFFFFFF1668 :                     
(1)  837/FFFFFFFFFFFF1668 :                     HInt_Default:
(1)  838/FFFFFFFFFFFF1668 : 4E73                		rte
(1)  839/FFFFFFFFFFFF166A :                     
(1)  840/FFFFFFFFFFFF166A :                     ; ====================================================================
(1)  841/FFFFFFFFFFFF166A :                     ; ----------------------------------------------------------------
(1)  842/FFFFFFFFFFFF166A :                     ; SEGA CD / CD32X ONLY
(1)  843/FFFFFFFFFFFF166A :                     ; ----------------------------------------------------------------
(1)  844/FFFFFFFFFFFF166A :                     
(1)  845/FFFFFFFFFFFF166A :                     ; --------------------------------------------------------
(1)  846/FFFFFFFFFFFF166A :                     ; System_MdMcd_SubWait
(1)  847/FFFFFFFFFFFF166A :                     ;
(1)  848/FFFFFFFFFFFF166A :                     ; Waits until Sub-CPU finishes.
(1)  849/FFFFFFFFFFFF166A :                     ;
(1)  850/FFFFFFFFFFFF166A :                     ; Uses:
(1)  851/FFFFFFFFFFFF166A :                     ; a6,d7
(1)  852/FFFFFFFFFFFF166A :                     ; --------------------------------------------------------
(1)  853/FFFFFFFFFFFF166A :                     
(1)  854/FFFFFFFFFFFF166A :                     System_MdMcd_SubWait:
(1)  856/FFFFFFFFFFFF166A : 4DF9 00A1 200E      		lea	(sysmcd_reg+mcd_comm_m),a6
(1)  857/FFFFFFFFFFFF1670 : 1E2E 0001           .wait_sub_o:	move.b	1(a6),d7
(1)  858/FFFFFFFFFFFF1674 : 6BFA                		bmi.s	.wait_sub_o
(1)  860/FFFFFFFFFFFF1676 : 4E75                		rts
(1)  861/FFFFFFFFFFFF1678 :                     
(1)  862/FFFFFFFFFFFF1678 :                     ; --------------------------------------------------------
(1)  863/FFFFFFFFFFFF1678 :                     ; System_MdMcd_SubTask
(1)  864/FFFFFFFFFFFF1678 :                     ;
(1)  865/FFFFFFFFFFFF1678 :                     ; Request task to Sub-CPU
(1)  866/FFFFFFFFFFFF1678 :                     ; ** Exits without waiting SUB to finish, call
(1)  867/FFFFFFFFFFFF1678 :                     ; System_MdMcd_SubWait after this IF required **
(1)  868/FFFFFFFFFFFF1678 :                     ;
(1)  869/FFFFFFFFFFFF1678 :                     ; Input:
(1)  870/FFFFFFFFFFFF1678 :                     ; d0.b | Task number
(1)  871/FFFFFFFFFFFF1678 :                     ;
(1)  872/FFFFFFFFFFFF1678 :                     ; Uses:
(1)  873/FFFFFFFFFFFF1678 :                     ; d7/a6
(1)  874/FFFFFFFFFFFF1678 :                     ; --------------------------------------------------------
(1)  875/FFFFFFFFFFFF1678 :                     
(1)  876/FFFFFFFFFFFF1678 :                     System_MdMcd_SubTask:
(1)  878/FFFFFFFFFFFF1678 : 61F0                		bsr	System_MdMcd_SubWait
(1)  879/FFFFFFFFFFFF167A :                     ; 		lea	(sysmcd_reg+mcd_comm_m),a6
(1)  880/FFFFFFFFFFFF167A : 1E16                .wait_else:	move.b	(a6),d7
(1)  881/FFFFFFFFFFFF167C : 0247 00F0           		andi.w	#$F0,d7
(1)  882/FFFFFFFFFFFF1680 : 0C47 00F0           		cmpi.w	#$F0,d7			; Z80 got first?
(1)  883/FFFFFFFFFFFF1684 : 67F4                		beq.s	.wait_else
(1)  884/FFFFFFFFFFFF1686 : 1C80                		move.b	d0,(a6)			; Set this command
(1)  885/FFFFFFFFFFFF1688 : 1E2E 0001           .wait_sub_i:	move.b	1(a6),d7		; Wait until SUB gets busy
(1)  886/FFFFFFFFFFFF168C : 6AFA                		bpl.s	.wait_sub_i
(1)  887/FFFFFFFFFFFF168E : 1CBC 0000           		move.b	#$00,(a6)		; Clear value, SUB already got the ID
(1)  889/FFFFFFFFFFFF1692 : 4E75                		rts
(1)  890/FFFFFFFFFFFF1694 :                     
(1)  891/FFFFFFFFFFFF1694 :                     ; --------------------------------------------------------
(1)  892/FFFFFFFFFFFF1694 :                     ; System_McdTrnsfr_WRAM
(1)  893/FFFFFFFFFFFF1694 :                     ;
(1)  894/FFFFFFFFFFFF1694 :                     ; Read file from disc and sends it to WORD-RAM,
(1)  895/FFFFFFFFFFFF1694 :                     ; waits on finish.
(1)  896/FFFFFFFFFFFF1694 :                     ;
(1)  897/FFFFFFFFFFFF1694 :                     ; Input:
(1)  898/FFFFFFFFFFFF1694 :                     ; a0 | Filename string "FILENAME.BIN",0
(1)  899/FFFFFFFFFFFF1694 :                     ; a1 | Output location
(1)  900/FFFFFFFFFFFF1694 :                     ;
(1)  901/FFFFFFFFFFFF1694 :                     ; Uses:
(1)  902/FFFFFFFFFFFF1694 :                     ; d0/d7/a5-a6
(1)  903/FFFFFFFFFFFF1694 :                     ;
(1)  904/FFFFFFFFFFFF1694 :                     ; This calls Sub-Task $02, NEEDS WORD-RAM permission in 2M
(1)  905/FFFFFFFFFFFF1694 :                     ; --------------------------------------------------------
(1)  906/FFFFFFFFFFFF1694 :                     
(1)  907/FFFFFFFFFFFF1694 :                     System_McdTrnsfr_WRAM:
(1)  909/FFFFFFFFFFFF1694 : 48E7 8106           		movem.l	d0/d7/a5-a6,-(sp)
(1)  910/FFFFFFFFFFFF1698 : 4BF9 00A1 2010      		lea	(sysmcd_reg+mcd_dcomm_m),a5
(1)  911/FFFFFFFFFFFF169E : 3AD8                		move.w	(a0)+,(a5)+				; 0 copy filename
(1)  912/FFFFFFFFFFFF16A0 : 3AD8                		move.w	(a0)+,(a5)+				; 2
(1)  913/FFFFFFFFFFFF16A2 : 3AD8                		move.w	(a0)+,(a5)+				; 4
(1)  914/FFFFFFFFFFFF16A4 : 3AD8                		move.w	(a0)+,(a5)+				; 6
(1)  915/FFFFFFFFFFFF16A6 : 3AD8                		move.w	(a0)+,(a5)+				; 8
(1)  916/FFFFFFFFFFFF16A8 : 3AD8                		move.w	(a0)+,(a5)+				; 8
(1)  917/FFFFFFFFFFFF16AA : 3AFC 0000           		move.w	#0,(a5)+				; A <-- zero end
(1)  918/FFFFFFFFFFFF16AE :                     ; 		move.w	d0,d1
(1)  919/FFFFFFFFFFFF16AE : 08F9 0001 00A1      .set_perm:	bset	#1,(sysmcd_reg+mcd_memory).l		; Set WORD-RAM permission to SUB
         FFFFFFFFFFFF16B4 : 2003             
(1)  920/FFFFFFFFFFFF16B6 : 67F6                		beq.s	.set_perm
(1)  921/FFFFFFFFFFFF16B8 : 303C 0002           		move.w	#$02,d0					; COMMAND $02
(1)  922/FFFFFFFFFFFF16BC : 61BA                		bsr	System_MdMcd_SubTask
(1)  923/FFFFFFFFFFFF16BE : 61AA                		bsr	System_MdMcd_SubWait
(1)  924/FFFFFFFFFFFF16C0 : 4CDF 6081           		movem.l	(sp)+,d0/d7/a5-a6
(1)  926/FFFFFFFFFFFF16C4 : 4E75                		rts
(1)  927/FFFFFFFFFFFF16C6 :                     
(1)  928/FFFFFFFFFFFF16C6 :                     ; --------------------------------------------------------
(1)  929/FFFFFFFFFFFF16C6 :                     ; System_McdTrnsfr_RAM
(1)  930/FFFFFFFFFFFF16C6 :                     ;
(1)  931/FFFFFFFFFFFF16C6 :                     ; Read file from disc and transfer output the
(1)  932/FFFFFFFFFFFF16C6 :                     ; data to a1, uses communication ports.
(1)  933/FFFFFFFFFFFF16C6 :                     ;
(1)  934/FFFFFFFFFFFF16C6 :                     ; Input:
(1)  935/FFFFFFFFFFFF16C6 :                     ; a0   | Filename string: "FILENAME.BIN",0
(1)  936/FFFFFFFFFFFF16C6 :                     ; a1   | Output location
(1)  937/FFFFFFFFFFFF16C6 :                     ; d0.w | Size, $10-aligned sizes only
(1)  938/FFFFFFFFFFFF16C6 :                     ;
(1)  939/FFFFFFFFFFFF16C6 :                     ; Uses:
(1)  940/FFFFFFFFFFFF16C6 :                     ; d7,a0-a1,a5-a6
(1)  941/FFFFFFFFFFFF16C6 :                     ;
(1)  942/FFFFFFFFFFFF16C6 :                     ; This calls Sub-Task $01
(1)  943/FFFFFFFFFFFF16C6 :                     ; --------------------------------------------------------
(1)  944/FFFFFFFFFFFF16C6 :                     
(1)  945/FFFFFFFFFFFF16C6 :                     ; TODO: I think the Sega CD has a CDC mode to
(1)  946/FFFFFFFFFFFF16C6 :                     ; transfer disc memory to MAIN (here) directly
(1)  947/FFFFFFFFFFFF16C6 :                     ; but this works without problem.
(1)  948/FFFFFFFFFFFF16C6 :                     
(1)  949/FFFFFFFFFFFF16C6 :                     System_McdTrnsfr_RAM:
(1)  951/FFFFFFFFFFFF16C6 : 48E7 8106           		movem.l	d0/d7/a5-a6,-(sp)
(1)  952/FFFFFFFFFFFF16CA : 4BF9 00A1 2010      		lea	(sysmcd_reg+mcd_dcomm_m),a5
(1)  953/FFFFFFFFFFFF16D0 : 3AD8                		move.w	(a0)+,(a5)+			; 0 copy filename
(1)  954/FFFFFFFFFFFF16D2 : 3AD8                		move.w	(a0)+,(a5)+			; 2
(1)  955/FFFFFFFFFFFF16D4 : 3AD8                		move.w	(a0)+,(a5)+			; 4
(1)  956/FFFFFFFFFFFF16D6 : 3AD8                		move.w	(a0)+,(a5)+			; 6
(1)  957/FFFFFFFFFFFF16D8 : 3AD8                		move.w	(a0)+,(a5)+			; 8
(1)  958/FFFFFFFFFFFF16DA : 3AD8                		move.w	(a0)+,(a5)+			; 8
(1)  959/FFFFFFFFFFFF16DC : 3AFC 0000           		move.w	#0,(a5)+			; A <-- zero end
(1)  960/FFFFFFFFFFFF16E0 : 3200                		move.w	d0,d1
(1)  961/FFFFFFFFFFFF16E2 : 7001                		moveq	#$01,d0				; COMMAND: READ CD AND PASS DATA
(1)  962/FFFFFFFFFFFF16E4 : 6192                		bsr	System_MdMcd_SubTask
(1)  963/FFFFFFFFFFFF16E6 : 3001                		move.w	d1,d0
(1)  964/FFFFFFFFFFFF16E8 :                     	; a0 - Output location
(1)  965/FFFFFFFFFFFF16E8 :                     	; d0 - Number of $10-byte packets
(1)  966/FFFFFFFFFFFF16E8 : E848                		lsr.w	#4,d0				; size >> 4
(1)  967/FFFFFFFFFFFF16EA : 5340                		subq.w	#1,d0				; -1
(1)  968/FFFFFFFFFFFF16EC : 4DF9 00A1 2020      		lea	(sysmcd_reg+mcd_dcomm_s),a6
(1)  969/FFFFFFFFFFFF16F2 : 1E39 00A1 200E      		move.b	(sysmcd_reg+mcd_comm_m).l,d7	; LOCK HERE
(1)  970/FFFFFFFFFFFF16F8 : 08C7 0007           		bset	#7,d7
(1)  971/FFFFFFFFFFFF16FC : 13C7 00A1 200E      		move.b	d7,(sysmcd_reg+mcd_comm_m).l
(1)  972/FFFFFFFFFFFF1702 : 1E39 00A1 200F      .copy_ram:	move.b	(sysmcd_reg+mcd_comm_s).l,d7	; Wait if sub PASSed the packet
(1)  973/FFFFFFFFFFFF1708 : 0807 0006           		btst	#6,d7
(1)  974/FFFFFFFFFFFF170C : 67F4                		beq.s	.copy_ram
(1)  975/FFFFFFFFFFFF170E : 2A4E                		move.l	a6,a5
(1)  976/FFFFFFFFFFFF1710 : 32DD                		move.w	(a5)+,(a1)+
(1)  977/FFFFFFFFFFFF1712 : 32DD                		move.w	(a5)+,(a1)+
(1)  978/FFFFFFFFFFFF1714 : 32DD                		move.w	(a5)+,(a1)+
(1)  979/FFFFFFFFFFFF1716 : 32DD                		move.w	(a5)+,(a1)+
(1)  980/FFFFFFFFFFFF1718 : 32DD                		move.w	(a5)+,(a1)+
(1)  981/FFFFFFFFFFFF171A : 32DD                		move.w	(a5)+,(a1)+
(1)  982/FFFFFFFFFFFF171C : 32DD                		move.w	(a5)+,(a1)+
(1)  983/FFFFFFFFFFFF171E : 32DD                		move.w	(a5)+,(a1)+
(1)  984/FFFFFFFFFFFF1720 : 1E39 00A1 200E      		move.b	(sysmcd_reg+mcd_comm_m).l,d7	; Tell SUB we got the pack
(1)  985/FFFFFFFFFFFF1726 : 08C7 0006           		bset	#6,d7
(1)  986/FFFFFFFFFFFF172A : 13C7 00A1 200E      		move.b	d7,(sysmcd_reg+mcd_comm_m).l
(1)  987/FFFFFFFFFFFF1730 : 1E39 00A1 200F      .wait_sub:	move.b	(sysmcd_reg+mcd_comm_s).l,d7	; Wait clear
(1)  988/FFFFFFFFFFFF1736 : 0807 0006           		btst	#6,d7
(1)  989/FFFFFFFFFFFF173A : 66F4                		bne.s	.wait_sub
(1)  990/FFFFFFFFFFFF173C : 1E39 00A1 200E      		move.b	(sysmcd_reg+mcd_comm_m).l,d7	; and clear our bit too.
(1)  991/FFFFFFFFFFFF1742 : 0887 0006           		bclr	#6,d7
(1)  992/FFFFFFFFFFFF1746 : 13C7 00A1 200E      		move.b	d7,(sysmcd_reg+mcd_comm_m).l
(1)  993/FFFFFFFFFFFF174C : 51C8 FFB4           		dbf	d0,.copy_ram
(1)  994/FFFFFFFFFFFF1750 : 1E39 00A1 200E      		move.b	(sysmcd_reg+mcd_comm_m).l,d7	; UNLOCK
(1)  995/FFFFFFFFFFFF1756 : 0887 0007           		bclr	#7,d7
(1)  996/FFFFFFFFFFFF175A : 13C7 00A1 200E      		move.b	d7,(sysmcd_reg+mcd_comm_m).l
(1)  997/FFFFFFFFFFFF1760 : 4CDF 6081           		movem.l	(sp)+,d0/d7/a5-a6
(1)  999/FFFFFFFFFFFF1764 : 4E75                		rts
(1) 1000/FFFFFFFFFFFF1766 :                     
(1) 1001/FFFFFFFFFFFF1766 :                     ; --------------------------------------------------------
(1) 1002/FFFFFFFFFFFF1766 :                     ; System_McdSendBuff
(1) 1003/FFFFFFFFFFFF1766 :                     ;
(1) 1004/FFFFFFFFFFFF1766 :                     ; Send data memory-to-memory from
(1) 1005/FFFFFFFFFFFF1766 :                     ; MAIN-CPU to SUB-CPU
(1) 1006/FFFFFFFFFFFF1766 :                     ;
(1) 1007/FFFFFFFFFFFF1766 :                     ; Input:
(1) 1008/FFFFFFFFFFFF1766 :                     ; a0   | Input data
(1) 1009/FFFFFFFFFFFF1766 :                     ; a1   | Output location in SUB-CPU area
(1) 1010/FFFFFFFFFFFF1766 :                     ; d0.w | Size, 8-aligned sizes only
(1) 1011/FFFFFFFFFFFF1766 :                     ;
(1) 1012/FFFFFFFFFFFF1766 :                     ; Uses:
(1) 1013/FFFFFFFFFFFF1766 :                     ; d7,a0-a1/a5-a6
(1) 1014/FFFFFFFFFFFF1766 :                     ;
(1) 1015/FFFFFFFFFFFF1766 :                     ; This calls Sub-Task $08
(1) 1016/FFFFFFFFFFFF1766 :                     ; --------------------------------------------------------
(1) 1017/FFFFFFFFFFFF1766 :                     
(1) 1018/FFFFFFFFFFFF1766 :                     System_McdSendBuff:
(1) 1020/FFFFFFFFFFFF1766 : 48E7 8106           		movem.l	d0/d7/a5-a6,-(sp)
(1) 1021/FFFFFFFFFFFF176A : 2E09                		move.l	a1,d7				; Write a1 to dcomm_m $00-$03
(1) 1022/FFFFFFFFFFFF176C : 33C7 00A1 2012      		move.w	d7,(sysmcd_reg+mcd_dcomm_m+2).l
(1) 1023/FFFFFFFFFFFF1772 : 4847                		swap	d7
(1) 1024/FFFFFFFFFFFF1774 : 33C7 00A1 2010      		move.w	d7,(sysmcd_reg+mcd_dcomm_m).l
(1) 1025/FFFFFFFFFFFF177A : 3C00                		move.w	d0,d6
(1) 1026/FFFFFFFFFFFF177C : 7008                		moveq	#$08,d0				; COMMAND $08
(1) 1027/FFFFFFFFFFFF177E : 6100 FEF8           		bsr	System_MdMcd_SubTask
(1) 1028/FFFFFFFFFFFF1782 : E64E                		lsr.w	#3,d6				; size >> 3
(1) 1029/FFFFFFFFFFFF1784 : 5346                		subq.w	#1,d6				; -1
(1) 1030/FFFFFFFFFFFF1786 : 4DF9 00A1 2010      		lea	(sysmcd_reg+mcd_dcomm_m),a6
(1) 1031/FFFFFFFFFFFF178C : 1039 00A1 200F      .wait_pre:	move.b	(sysmcd_reg+mcd_comm_s).l,d0	; SUB got the a0?
(1) 1032/FFFFFFFFFFFF1792 : 0800 0006           		btst	#6,d0
(1) 1033/FFFFFFFFFFFF1796 : 67F4                		beq.s	.wait_pre
(1) 1034/FFFFFFFFFFFF1798 : 08F9 0007 00A1      		bset	#7,(sysmcd_reg+mcd_comm_m).l	; MAIN lock
         FFFFFFFFFFFF179E : 200E             
(1) 1035/FFFFFFFFFFFF17A0 : 1039 00A1 200F      .copy_ram:	move.b	(sysmcd_reg+mcd_comm_s).l,d0	; Sub is busy?
(1) 1036/FFFFFFFFFFFF17A6 : 0800 0006           		btst	#6,d0
(1) 1037/FFFFFFFFFFFF17AA : 66F4                		bne.s	.copy_ram
(1) 1038/FFFFFFFFFFFF17AC : 2A4E                		move.l	a6,a5
(1) 1039/FFFFFFFFFFFF17AE : 3AD8                		move.w	(a0)+,(a5)+
(1) 1040/FFFFFFFFFFFF17B0 : 3AD8                		move.w	(a0)+,(a5)+
(1) 1041/FFFFFFFFFFFF17B2 : 3AD8                		move.w	(a0)+,(a5)+
(1) 1042/FFFFFFFFFFFF17B4 : 3AD8                		move.w	(a0)+,(a5)+
(1) 1043/FFFFFFFFFFFF17B6 :                     ; 		move.w	(a0)+,(a5)+
(1) 1044/FFFFFFFFFFFF17B6 :                     ; 		move.w	(a0)+,(a5)+
(1) 1045/FFFFFFFFFFFF17B6 :                     ; 		move.w	(a0)+,(a5)+
(1) 1046/FFFFFFFFFFFF17B6 :                     ; 		move.w	(a0)+,(a5)+
(1) 1047/FFFFFFFFFFFF17B6 : 1039 00A1 200E      		move.b	(sysmcd_reg+mcd_comm_m).l,d0
(1) 1048/FFFFFFFFFFFF17BC : 08C0 0006           		bset	#6,d0
(1) 1049/FFFFFFFFFFFF17C0 : 13C0 00A1 200E      		move.b	d0,(sysmcd_reg+mcd_comm_m).l	; Set PASS bit
(1) 1050/FFFFFFFFFFFF17C6 : 1039 00A1 200F      .wait_sub:	move.b	(sysmcd_reg+mcd_comm_s).l,d0	; Sub got the data?
(1) 1051/FFFFFFFFFFFF17CC : 0800 0006           		btst	#6,d0
(1) 1052/FFFFFFFFFFFF17D0 : 67F4                		beq.s	.wait_sub
(1) 1053/FFFFFFFFFFFF17D2 : 1039 00A1 200E      		move.b	(sysmcd_reg+mcd_comm_m).l,d0
(1) 1054/FFFFFFFFFFFF17D8 : 0880 0006           		bclr	#6,d0
(1) 1055/FFFFFFFFFFFF17DC : 13C0 00A1 200E      		move.b	d0,(sysmcd_reg+mcd_comm_m).l	; Clear PASS bit
(1) 1056/FFFFFFFFFFFF17E2 : 51CE FFBC           		dbf	d6,.copy_ram
(1) 1057/FFFFFFFFFFFF17E6 : 08B9 0007 00A1      		bclr	#7,(sysmcd_reg+mcd_comm_m).l	; UNLOCK
         FFFFFFFFFFFF17EC : 200E             
(1) 1058/FFFFFFFFFFFF17EE : 4CDF 6081           		movem.l	(sp)+,d0/d7/a5-a6
(1) 1060/FFFFFFFFFFFF17F2 : 4E75                		rts
(1) 1061/FFFFFFFFFFFF17F4 :                     
(1) 1062/FFFFFFFFFFFF17F4 :                     ; ================================================================
(1) 1063/FFFFFFFFFFFF17F4 :                     ; --------------------------------------------------------
(1) 1064/FFFFFFFFFFFF17F4 :                     ; CDDA PLAYBACK
(1) 1065/FFFFFFFFFFFF17F4 :                     ; --------------------------------------------------------
(1) 1066/FFFFFFFFFFFF17F4 :                     
(1) 1067/FFFFFFFFFFFF17F4 :                     ; --------------------------------------------------------
(1) 1068/FFFFFFFFFFFF17F4 :                     ; System_MdMcd_CdPlay, System_MdMcd_CdPlay_L
(1) 1069/FFFFFFFFFFFF17F4 :                     ;
(1) 1070/FFFFFFFFFFFF17F4 :                     ; Play CDDA track, normal or looped.
(1) 1071/FFFFFFFFFFFF17F4 :                     ;
(1) 1072/FFFFFFFFFFFF17F4 :                     ; Input:
(1) 1073/FFFFFFFFFFFF17F4 :                     ; d0.w | CD track number
(1) 1074/FFFFFFFFFFFF17F4 :                     ; 	 DO NOT USE TRACK $01
(1) 1075/FFFFFFFFFFFF17F4 :                     ;
(1) 1076/FFFFFFFFFFFF17F4 :                     ; This calls Sub-Task $10 for normal playback
(1) 1077/FFFFFFFFFFFF17F4 :                     ; and $11 for looped
(1) 1078/FFFFFFFFFFFF17F4 :                     ;
(1) 1079/FFFFFFFFFFFF17F4 :                     ; Uses:
(1) 1080/FFFFFFFFFFFF17F4 :                     ; d4
(1) 1081/FFFFFFFFFFFF17F4 :                     ; --------------------------------------------------------
(1) 1082/FFFFFFFFFFFF17F4 :                     
(1) 1083/FFFFFFFFFFFF17F4 :                     System_MdMcd_CdPlay:
(1) 1084/FFFFFFFFFFFF17F4 : 48E7 8102           		movem.l	d0/d7/a6,-(sp)
(1) 1085/FFFFFFFFFFFF17F8 : 383C 0010           		move.w	#$0010,d4
(1) 1086/FFFFFFFFFFFF17FC : 6008                		bra	sysMdMcd_SetCdda
(1) 1087/FFFFFFFFFFFF17FE :                     
(1) 1088/FFFFFFFFFFFF17FE :                     System_MdMcd_CdPlay_L:
(1) 1089/FFFFFFFFFFFF17FE : 48E7 8102           		movem.l	d0/d7/a6,-(sp)
(1) 1090/FFFFFFFFFFFF1802 : 383C 0011           		move.w	#$0011,d4
(1) 1091/FFFFFFFFFFFF1806 :                     sysMdMcd_SetCdda:
(1) 1093/FFFFFFFFFFFF1806 : 4A40                		tst.w	d0
(1) 1094/FFFFFFFFFFFF1808 : 6714                		beq.s	.fail_safe
(1) 1095/FFFFFFFFFFFF180A : 6B12                		bmi.s	.fail_safe
(1) 1096/FFFFFFFFFFFF180C : B07C 0001           		cmp.w	#$0001,d0
(1) 1097/FFFFFFFFFFFF1810 : 670C                		beq.s	.fail_safe
(1) 1098/FFFFFFFFFFFF1812 : 33C0 00A1 2010      		move.w	d0,(sysmcd_reg+mcd_dcomm_m).l
(1) 1099/FFFFFFFFFFFF1818 : 3004                		move.w	d4,d0
(1) 1100/FFFFFFFFFFFF181A : 6100 FE5C           		bsr	System_MdMcd_SubTask
(1) 1101/FFFFFFFFFFFF181E :                     .fail_safe:
(1) 1103/FFFFFFFFFFFF181E : 4CDF 4081           		movem.l	(sp)+,d0/d7/a6
(1) 1104/FFFFFFFFFFFF1822 : 4E75                		rts
(1) 1105/FFFFFFFFFFFF1824 :                     
(1) 1106/FFFFFFFFFFFF1824 :                     ; --------------------------------------------------------
(1) 1107/FFFFFFFFFFFF1824 :                     ; System_MdMcd_CdFade
(1) 1108/FFFFFFFFFFFF1824 :                     ;
(1) 1109/FFFFFFFFFFFF1824 :                     ; Fade the CDDA Volume
(1) 1110/FFFFFFFFFFFF1824 :                     ;
(1) 1111/FFFFFFFFFFFF1824 :                     ; Input:
(1) 1112/FFFFFFFFFFFF1824 :                     ; d0.w | Target volume
(1) 1113/FFFFFFFFFFFF1824 :                     ;        $000-$400 - Min to Max
(1) 1114/FFFFFFFFFFFF1824 :                     ; d1.w | Fading speed
(1) 1115/FFFFFFFFFFFF1824 :                     ;        $001-$200 - Slow to Fast
(1) 1116/FFFFFFFFFFFF1824 :                     ;             $400 - Set once
(1) 1117/FFFFFFFFFFFF1824 :                     ;
(1) 1118/FFFFFFFFFFFF1824 :                     ; This calls Sub-Task $10 for normal playback
(1) 1119/FFFFFFFFFFFF1824 :                     ; and $11 for looped
(1) 1120/FFFFFFFFFFFF1824 :                     ;
(1) 1121/FFFFFFFFFFFF1824 :                     ; Uses:
(1) 1122/FFFFFFFFFFFF1824 :                     ; d4
(1) 1123/FFFFFFFFFFFF1824 :                     
(1) 1124/FFFFFFFFFFFF1824 :                     ; This calls Sub-Task $16
(1) 1125/FFFFFFFFFFFF1824 :                     ; --------------------------------------------------------
(1) 1126/FFFFFFFFFFFF1824 :                     
(1) 1127/FFFFFFFFFFFF1824 :                     System_MdMcd_CdFade:
(1) 1128/FFFFFFFFFFFF1824 : 48E7 C102           		movem.l	d0-d1/d7/a6,-(sp)
(1) 1129/FFFFFFFFFFFF1828 : 33C0 00A1 2010      		move.w	d0,(sysmcd_reg+mcd_dcomm_m).l
(1) 1130/FFFFFFFFFFFF182E : 33C1 00A1 2012      		move.w	d1,(sysmcd_reg+mcd_dcomm_m+2).l
(1) 1131/FFFFFFFFFFFF1834 : 303C 0016           		move.w	#$0016,d0
(1) 1132/FFFFFFFFFFFF1838 : 6100 FE3E           		bsr	System_MdMcd_SubTask
(1) 1133/FFFFFFFFFFFF183C : 4CDF 4083           		movem.l	(sp)+,d0-d1/d7/a6
(1) 1134/FFFFFFFFFFFF1840 : 4E75                		rts
(1) 1135/FFFFFFFFFFFF1842 :                     
(1) 1136/FFFFFFFFFFFF1842 :                     ; ====================================================================
(1) 1137/FFFFFFFFFFFF1842 :                     ; ----------------------------------------------------------------
(1) 1138/FFFFFFFFFFFF1842 :                     ; 32X and CD32X ONLY
(1) 1139/FFFFFFFFFFFF1842 :                     ; ----------------------------------------------------------------
(1) 1140/FFFFFFFFFFFF1842 :                     
(1) 1141/FFFFFFFFFFFF1842 :                     ; --------------------------------------------------------
(1) 1142/FFFFFFFFFFFF1842 :                     ; System_MarsDataPack
(1) 1143/FFFFFFFFFFFF1842 :                     ;
(1) 1144/FFFFFFFFFFFF1842 :                     ; BOTH 32X AND CD32X
(1) 1145/FFFFFFFFFFFF1842 :                     ;
(1) 1146/FFFFFFFFFFFF1842 :                     ; Sends graphics data to the SDRAM area
(1) 1147/FFFFFFFFFFFF1842 :                     ; call this BEFORE doing any visuals.
(1) 1148/FFFFFFFFFFFF1842 :                     ;
(1) 1149/FFFFFFFFFFFF1842 :                     ; Input:
(1) 1150/FFFFFFFFFFFF1842 :                     ; a0 | Cartridge pointer and Filename:
(1) 1151/FFFFFFFFFFFF1842 :                     ;      dc.l cart_pointer ; Cartridge only
(1) 1152/FFFFFFFFFFFF1842 :                     ;      dc.b "FILENAME.BIN" ; CD32X only
(1) 1153/FFFFFFFFFFFF1842 :                     ;
(1) 1154/FFFFFFFFFFFF1842 :                     ;      The SDRAM data MUST have the size at the
(1) 1155/FFFFFFFFFFFF1842 :                     ;      begining of the data package:
(1) 1156/FFFFFFFFFFFF1842 :                     ;      dc.l end_point-start_label
(1) 1157/FFFFFFFFFFFF1842 :                     ;      dc.b (data)
(1) 1158/FFFFFFFFFFFF1842 :                     ;
(1) 1159/FFFFFFFFFFFF1842 :                     ; Uses:
(1) 1160/FFFFFFFFFFFF1842 :                     ; a4-a5,d3-d7
(1) 1161/FFFFFFFFFFFF1842 :                     ; --------------------------------------------------------
(1) 1162/FFFFFFFFFFFF1842 :                     
(1) 1163/FFFFFFFFFFFF1842 :                     System_MarsDataPack:
(1) 1166/FFFFFFFFFFFF1842 : D0FC 0004           		adda	#4,a0			; Skip cartridge label
(1) 1167/FFFFFFFFFFFF1846 : 6100 FE4C           		bsr	System_McdTrnsfr_WRAM
(1) 1168/FFFFFFFFFFFF184A : 49F9 0020 0000      		lea	(sysmcd_wram).l,a4
(1) 1172/FFFFFFFFFFFF1850 : 201C                		move.l	(a4)+,d0		; Read size
(1) 1173/FFFFFFFFFFFF1852 : 204C                		move.l	a4,a0
(1) 1174/FFFFFFFFFFFF1854 : 43F9 0600 5110      		lea	(SH2_USER_DATA).l,a1	; Output location in SH2's area
(1) 1175/FFFFFFFFFFFF185A : 263C 0000 FFF8      		move.l	#$00FFF8,d3
(1) 1176/FFFFFFFFFFFF1860 : 78F8                		moveq	#-8,d4
(1) 1177/FFFFFFFFFFFF1862 : C084                		and.l	d4,d0
(1) 1178/FFFFFFFFFFFF1864 : 2800                		move.l	d0,d4
(1) 1179/FFFFFFFFFFFF1866 : B883                		cmp.l	d3,d4
(1) 1180/FFFFFFFFFFFF1868 : 6E04                		bgt.s	.large_pack
(1) 1181/FFFFFFFFFFFF186A : 6118                		bsr	System_MarsSendDreq	; Small package
(1) 1182/FFFFFFFFFFFF186C : 6014                		bra.s	.exit_now
(1) 1183/FFFFFFFFFFFF186E :                     .large_pack:
(1) 1184/FFFFFFFFFFFF186E : 3003                		move.w	d3,d0
(1) 1185/FFFFFFFFFFFF1870 : 6112                		bsr	System_MarsSendDreq
(1) 1186/FFFFFFFFFFFF1872 : 9883                		sub.l	d3,d4
(1) 1187/FFFFFFFFFFFF1874 : B883                		cmp.l	d3,d4
(1) 1188/FFFFFFFFFFFF1876 : 6CF6                		bge.s	.large_pack
(1) 1189/FFFFFFFFFFFF1878 : 4A84                		tst.l	d4
(1) 1190/FFFFFFFFFFFF187A : 6706                		beq.s	.exit_now
(1) 1191/FFFFFFFFFFFF187C : 6B04                		bmi.s	.exit_now
(1) 1192/FFFFFFFFFFFF187E : 3004                		move.w	d4,d0
(1) 1193/FFFFFFFFFFFF1880 : 6102                		bsr	System_MarsSendDreq
(1) 1194/FFFFFFFFFFFF1882 :                     .exit_now:
(1) 1196/FFFFFFFFFFFF1882 : 4E75                		rts
(1) 1197/FFFFFFFFFFFF1884 :                     
(1) 1198/FFFFFFFFFFFF1884 :                     ; --------------------------------------------------------
(1) 1199/FFFFFFFFFFFF1884 :                     ; System_MarsSendDreq
(1) 1200/FFFFFFFFFFFF1884 :                     ;
(1) 1201/FFFFFFFFFFFF1884 :                     ; Transfers data to the 32X using DREQ
(1) 1202/FFFFFFFFFFFF1884 :                     ;
(1) 1203/FFFFFFFFFFFF1884 :                     ; Input:
(1) 1204/FFFFFFFFFFFF1884 :                     ; a0   | Source data
(1) 1205/FFFFFFFFFFFF1884 :                     ; a1   | Destination in SH2's SDRAM area
(1) 1206/FFFFFFFFFFFF1884 :                     ; d0.w | Size, MUST end with 0 or 8
(1) 1207/FFFFFFFFFFFF1884 :                     ; d1.w | Data transfer type
(1) 1208/FFFFFFFFFFFF1884 :                     ;
(1) 1209/FFFFFFFFFFFF1884 :                     ; Uses:
(1) 1210/FFFFFFFFFFFF1884 :                     ; a4-a5,d5-d7
(1) 1211/FFFFFFFFFFFF1884 :                     ;
(1) 1212/FFFFFFFFFFFF1884 :                     ; Notes:
(1) 1213/FFFFFFFFFFFF1884 :                     ; Call this during DISPLAY ONLY, NOT during VBlank.
(1) 1214/FFFFFFFFFFFF1884 :                     ;
(1) 1215/FFFFFFFFFFFF1884 :                     ; * SOME 32X EMULATORS WILL GET STUCK WAITING
(1) 1216/FFFFFFFFFFFF1884 :                     ; FOR DMA EXIT *
(1) 1217/FFFFFFFFFFFF1884 :                     ; --------------------------------------------------------
(1) 1218/FFFFFFFFFFFF1884 :                     
(1) 1219/FFFFFFFFFFFF1884 :                     System_MarsSendDreq:
(1) 1221/FFFFFFFFFFFF1884 : 7201                		moveq	#1,d1
(1) 1222/FFFFFFFFFFFF1886 : 600A                		bra.s	sys_MSendDreq
(1) 1226/FFFFFFFFFFFF1888 :                     
(1) 1227/FFFFFFFFFFFF1888 :                     ; --------------------------------------------------------
(1) 1228/FFFFFFFFFFFF1888 :                     ; System_MarsUpdate
(1) 1229/FFFFFFFFFFFF1888 :                     ;
(1) 1230/FFFFFFFFFFFF1888 :                     ; Send a small section of RAM to SH2 for updating
(1) 1231/FFFFFFFFFFFF1888 :                     ; the visuals.
(1) 1232/FFFFFFFFFFFF1888 :                     ;
(1) 1233/FFFFFFFFFFFF1888 :                     ; Uses:
(1) 1234/FFFFFFFFFFFF1888 :                     ; a4-a5,d5-d7
(1) 1235/FFFFFFFFFFFF1888 :                     ;
(1) 1236/FFFFFFFFFFFF1888 :                     ; Notes:
(1) 1237/FFFFFFFFFFFF1888 :                     ; - Call this during DISPLAY ONLY
(1) 1238/FFFFFFFFFFFF1888 :                     ; --------------------------------------------------------
(1) 1239/FFFFFFFFFFFF1888 :                     
(1) 1240/FFFFFFFFFFFF1888 :                     System_MarsUpdate:
(1) 1242/FFFFFFFFFFFF1888 : 41F8 C604           		lea	(RAM_MdDreq).w,a0
(1) 1243/FFFFFFFFFFFF188C : 303C 0710           		move.w	#sizeof_dreq,d0
(1) 1244/FFFFFFFFFFFF1890 : 7200                		moveq	#0,d1
(1) 1248/FFFFFFFFFFFF1892 :                     
(1) 1249/FFFFFFFFFFFF1892 :                     ; --------------------------------------------------------
(1) 1250/FFFFFFFFFFFF1892 :                     
(1) 1251/FFFFFFFFFFFF1892 :                     sys_MSendDreq:
(1) 1253/FFFFFFFFFFFF1892 : 48E7 070C           		movem.l	a4-a5/d5-d7,-(sp)
(1) 1254/FFFFFFFFFFFF1896 : 40C7                		move.w	sr,d7
(1) 1255/FFFFFFFFFFFF1898 : 007C 0700           		ori.w	#$0700,sr		; Disable interrupts
(1) 1256/FFFFFFFFFFFF189C : 4BF9 00A1 5100      		lea	(sysmars_reg).l,a5
(1) 1257/FFFFFFFFFFFF18A2 : 49ED 0012           		lea	dreqfifo(a5),a4
(1) 1258/FFFFFFFFFFFF18A6 : 4A41                		tst.w	d1			; CMD zero?
(1) 1259/FFFFFFFFFFFF18A8 : 670C                		beq.s	.no_src
(1) 1260/FFFFFFFFFFFF18AA : 2A09                		move.l	a1,d5
(1) 1261/FFFFFFFFFFFF18AC : 2B45 000C           		move.l	d5,dreqdest(a5)
(1) 1262/FFFFFFFFFFFF18B0 : 7A00                		moveq	#0,d5			; Increment a1 on exit.
(1) 1263/FFFFFFFFFFFF18B2 : 3A00                		move.w	d0,d5
(1) 1264/FFFFFFFFFFFF18B4 : D3C5                		add.l	d5,a1
(1) 1265/FFFFFFFFFFFF18B6 :                     .no_src:
(1) 1266/FFFFFFFFFFFF18B6 : 1B41 002C           		move.b	d1,comm12(a5)		; d6 - Set CMD mode
(1) 1267/FFFFFFFFFFFF18BA : 3B7C 0000 0006      		move.w	#%000,dreqctl(a5)	; Reset 68S
(1) 1268/FFFFFFFFFFFF18C0 : 3C00                		move.w	d0,d6			; d6 - Size in bytes
(1) 1269/FFFFFFFFFFFF18C2 : E24E                		lsr.w	#1,d6			; (length/2)
(1) 1270/FFFFFFFFFFFF18C4 : 3B46 0010           		move.w	d6,dreqlen(a5)		; Set transfer length (size/2)
(1) 1271/FFFFFFFFFFFF18C8 : 3A06                		move.w	d6,d5			; d5 - (length/2)/4
(1) 1272/FFFFFFFFFFFF18CA : E44D                		lsr.w	#2,d5
(1) 1273/FFFFFFFFFFFF18CC : 0445 0001           		subi.w	#1,d5
(1) 1274/FFFFFFFFFFFF18D0 : 08ED 0000 0003      		bset	#0,standby(a5)		; Call CMD interrupt to MASTER
(1) 1275/FFFFFFFFFFFF18D6 : 082D 0006 002C      .wait_bit:	btst	#6,comm12(a5)		; Wait ENTRANCE signal
(1) 1276/FFFFFFFFFFFF18DC : 67F8                		beq.s	.wait_bit
(1) 1277/FFFFFFFFFFFF18DE : 3B7C 0004 0006      		move.w	#%100,dreqctl(a5)	; Set 68S and RV
(1) 1278/FFFFFFFFFFFF18E4 :                     	; *** CRITICAL PART ***
(1) 1279/FFFFFFFFFFFF18E4 : 082D 0007 0006      .loop_fifo:	btst	#7,dreqctl(a5)		; FIFO full?
(1) 1280/FFFFFFFFFFFF18EA : 66F8                		bne.s	.loop_fifo
(1) 1281/FFFFFFFFFFFF18EC : 3898                		move.w  (a0)+,(a4)
(1) 1282/FFFFFFFFFFFF18EE : 3898                		move.w  (a0)+,(a4)
(1) 1283/FFFFFFFFFFFF18F0 : 3898                		move.w  (a0)+,(a4)
(1) 1284/FFFFFFFFFFFF18F2 : 3898                		move.w  (a0)+,(a4)
(1) 1285/FFFFFFFFFFFF18F4 : 51CD FFEE           		dbf	d5,.loop_fifo
(1) 1287/FFFFFFFFFFFF18F8 : 082D 0006 002C      .wait_bit_e:	btst	#6,comm12(a5)		; Wait EXIT signal
(1) 1288/FFFFFFFFFFFF18FE : 66F8                		bne.s	.wait_bit_e
(1) 1290/FFFFFFFFFFFF1900 : 3B7C 0000 0006      		move.w	#%000,dreqctl(a5)	; Clear 68S and RV
(1) 1291/FFFFFFFFFFFF1906 : 46C7                		move.w	d7,sr			; Restore interrupts
(1) 1292/FFFFFFFFFFFF1908 : 4CDF 30E0           		movem.l	(sp)+,a4-a5/d5-d7
(1) 1294/FFFFFFFFFFFF190C : 4E75                		rts
(1) 1295/FFFFFFFFFFFF190E :                     
(1) 1296/FFFFFFFFFFFF190E :                     ; ====================================================================
(1) 1297/FFFFFFFFFFFF190E :                     ; ----------------------------------------------------------------
(1) 1298/FFFFFFFFFFFF190E :                     ; Shared subs for the add-ons
(1) 1299/FFFFFFFFFFFF190E :                     ; ----------------------------------------------------------------
(1) 1300/FFFFFFFFFFFF190E :                     
(1) 1301/FFFFFFFFFFFF190E :                     ; --------------------------------------------------------
(1) 1302/FFFFFFFFFFFF190E :                     ; System_GrabRamCode
(1) 1303/FFFFFFFFFFFF190E :                     ;
(1) 1304/FFFFFFFFFFFF190E :                     ; Shared routine for MCD, 32X and CD32X.
(1) 1305/FFFFFFFFFFFF190E :                     ;
(1) 1306/FFFFFFFFFFFF190E :                     ; Send new code to the USER side of RAM and
(1) 1307/FFFFFFFFFFFF190E :                     ; jumps into it.
(1) 1308/FFFFFFFFFFFF190E :                     ;
(1) 1309/FFFFFFFFFFFF190E :                     ; Input:
(1) 1310/FFFFFFFFFFFF190E :                     ; a0 | SEGA CD/CD+32X:
(1) 1311/FFFFFFFFFFFF190E :                     ;      - Filename string 8-bytes
(1) 1312/FFFFFFFFFFFF190E :                     ;      SEGA 32X:
(1) 1313/FFFFFFFFFFFF190E :                     ;      - Location of the RAM-code to copy from
(1) 1314/FFFFFFFFFFFF190E :                     ;        in the $880000/$900000 areas
(1) 1315/FFFFFFFFFFFF190E :                     ; --------------------------------------------------------
(1) 1316/FFFFFFFFFFFF190E :                     
(1) 1317/FFFFFFFFFFFF190E :                     System_GrabRamCode:
(1) 1319/FFFFFFFFFFFF190E : 7000                		moveq	#0,d0			; Turn OFF all 32X visuals
(1) 1320/FFFFFFFFFFFF1910 : 6100 F08E           		bsr	Video_MdMars_VideoMode
(1) 1323/FFFFFFFFFFFF1914 : 6100 FD54           		bsr	System_MdMcd_SubWait
(1) 1324/FFFFFFFFFFFF1918 :                     		; a0 - filename string,0
(1) 1325/FFFFFFFFFFFF1918 : 43F9 FFFF 2000      		lea	(RAM_UserCode).l,a1
(1) 1326/FFFFFFFFFFFF191E : 303C 8000           		move.w	#MAX_UserCode,d0
(1) 1327/FFFFFFFFFFFF1922 : 6100 FDA2           		bsr	System_McdTrnsfr_RAM
(1) 1328/FFFFFFFFFFFF1926 : 6100 FD42           		bsr	System_MdMcd_SubWait
(1) 1329/FFFFFFFFFFFF192A : 4EF9 FFFF 2000      		jmp	(RAM_UserCode).l
(1) 1340/FFFFFFFFFFFF1930 :                     
(1) 1341/FFFFFFFFFFFF1930 :                     ; ====================================================================
(1) 1342/FFFFFFFFFFFF1930 :                     
     196/FFFFFFFFFFFF1930 :                     
     197/FFFFFFFFFFFF1930 :                     ; ====================================================================
     198/FFFFFFFFFFFF1930 :                     ; --------------------------------------------------------
     199/FFFFFFFFFFFF1930 :                     ; MAIN SCREEN MODE LOOP
     200/FFFFFFFFFFFF1930 :                     ;
     201/FFFFFFFFFFFF1930 :                     ;   MD/Pico: Direct ROM jump
     202/FFFFFFFFFFFF1930 :                     ; SCD/CD32X: Reads file from DISC and
     203/FFFFFFFFFFFF1930 :                     ;            transfers code to RAM
     204/FFFFFFFFFFFF1930 :                     ;       32X: Read from ROM and copies code to
     205/FFFFFFFFFFFF1930 :                     ;            RAM so it's problematic with DMA
     206/FFFFFFFFFFFF1930 :                     ;            and the SH2
     207/FFFFFFFFFFFF1930 :                     ;
     208/FFFFFFFFFFFF1930 :                     ; - Returning in your current screen code
     209/FFFFFFFFFFFF1930 :                     ;   will loop here and reload the entire
     210/FFFFFFFFFFFF1930 :                     ;   screen code.
     211/FFFFFFFFFFFF1930 :                     ; - DO NOT JUMP TO SCREEN MODES DIRECTLY
     212/FFFFFFFFFFFF1930 :                     ; - 32X/CD32X:
     213/FFFFFFFFFFFF1930 :                     ;   This will turn OFF any pseudo-Video mode
     214/FFFFFFFFFFFF1930 :                     ;   in use.
     215/FFFFFFFFFFFF1930 :                     ; --------------------------------------------------------
     216/FFFFFFFFFFFF1930 :                     
     217/FFFFFFFFFFFF1930 :                     Md_ReadModes:
     218/FFFFFFFFFFFF1930 : 007C 0700           		ori.w	#$0700,sr		; Disable interrupts
     219/FFFFFFFFFFFF1934 : 7000                		moveq	#0,d0
     220/FFFFFFFFFFFF1936 : 3038 C458           		move.w	(RAM_ScreenMode).w,d0
     221/FFFFFFFFFFFF193A : C07C 007F           		and.w	#$7F,d0			; <-- CURRENT LIMIT
     222/FFFFFFFFFFFF193E : E948                		lsl.w	#4,d0			; * $10
     223/FFFFFFFFFFFF1940 : 41FB 000E           		lea	.pick_mode(pc,d0.w),a0	; LEA the filename
     225/FFFFFFFFFFFF1944 : D0FC 0004           		adda	#4,a0
     226/FFFFFFFFFFFF1948 : 4EB9 FFFF 190E      		jsr	(System_GrabRamCode).l
     234/FFFFFFFFFFFF194E : 60E0                		bra.s	Md_ReadModes		; Loop on rts
     235/FFFFFFFFFFFF1950 :                     
     236/FFFFFFFFFFFF1950 :                     ; ---------------------------------------------
     237/FFFFFFFFFFFF1950 :                     ; ** ADD SCREEN MODES HERE **
     238/FFFFFFFFFFFF1950 :                     ;
     239/FFFFFFFFFFFF1950 :                     ; SegaCD/CD32X:
     240/FFFFFFFFFFFF1950 :                     ; DON'T FORGET to add the file to the
     241/FFFFFFFFFFFF1950 :                     ; ISO filelist.
     242/FFFFFFFFFFFF1950 :                     ; ---------------------------------------------
     243/FFFFFFFFFFFF1950 :                     
     244/FFFFFFFFFFFF1950 :                     .pick_mode:
     245/FFFFFFFFFFFF1950 : 0005 C000           		dc.l Md_Screen00	; Cartridge label *unused on CD
     246/FFFFFFFFFFFF1954 : 5343 5245 454E      		dc.b "SCREEN00.BIN"	; ISO Filename *unused on Cartridge
         FFFFFFFFFFFF195A : 3030 2E42 494E    
     247/FFFFFFFFFFFF1960 : 0005 C800           		dc.l Md_Screen01
     248/FFFFFFFFFFFF1964 : 5343 5245 454E      		dc.b "SCREEN01.BIN"
         FFFFFFFFFFFF196A : 3031 2E42 494E    
     249/FFFFFFFFFFFF1970 : 0005 C000           		dc.l Md_Screen00
     250/FFFFFFFFFFFF1974 : 5343 5245 454E      		dc.b "SCREEN00.BIN"
         FFFFFFFFFFFF197A : 3030 2E42 494E    
     251/FFFFFFFFFFFF1980 : 0005 C000           		dc.l Md_Screen00
     252/FFFFFFFFFFFF1984 : 5343 5245 454E      		dc.b "SCREEN00.BIN"
         FFFFFFFFFFFF198A : 3030 2E42 494E    
     253/FFFFFFFFFFFF1990 : 0005 C000           		dc.l Md_Screen00
     254/FFFFFFFFFFFF1994 :                     
     255/FFFFFFFFFFFF1994 :                     ; ---------------------------------------------
     256/FFFFFFFFFFFF1994 :                     
     258/FFFFFFFFFFFF1994 :                     .end:
     259/FFFFFFFFFFFF1994 : (MACRO)              		erreport "SYSTEM TOP RAM-CODE",(.end-RAM_SystemCode),MAX_SysCode
     260/FFFFFFFFFFFFC782 :                     		dephase
     261/    55BE :                     		phase (.end-RAM_SystemCode)+Md_SysCode
     263/    55BE :                     Md_SysCode_e:
     264/    55BE :                     		align 2
     265/    55BE :                     
     266/    55BE :                     ; ===========================================================================
     267/    55BE :                     ; --------------------------------------------------------
     268/    55BE :                     ; Z80 include on Cartridge ONLY (NOT on Disc)
     269/    55BE :                     ; --------------------------------------------------------
     270/    55BE :                     
     289/    55BE :                     
     290/    55BE :                     ; ===========================================================================
     291/    55BE :                     ; ----------------------------------------------------------------
     292/    55BE :                     ; DATA section shared on both Cartridge or Disc
     293/    55BE :                     ; ----------------------------------------------------------------
     294/    55BE :                     
     295/    55BE :                     ; --------------------------------------------------------
     296/    55BE :                     ; CD/CD32X ISO header and files
     297/    55BE :                     ; --------------------------------------------------------
     298/    55BE :                     
     300/    55BE :                     		align $8000
     301/    8000 :                     ; 		dephase
     302/    8000 :                     		binclude "system/mcd/fshead.bin"	; Include ISO header
     303/    B800 : (MACRO)              		iso_setfs 0,IsoFileList,IsoFileList_e	; TWO pointers to the filelist:
     303/    B800 :                     .fstrt:
     303/    B800 : 22                                  dc.b .fend-.fstrt                               ; Block size
     303/    B801 : 00                                  dc.b 0                                          ; Zero
     303/    B802 : 1700                                dc.b (ISOFILELIST>>11&$FF),(ISOFILELIST>>19&$FF)            ; ISOFILELIST sector, little endian
     303/    B804 : 0000                                dc.b (ISOFILELIST>>27&$FF),(ISOFILELIST>>35&$FF)
     303/    B806 : 0000 0017                           dc.l ISOFILELIST>>11                                  ; ISOFILELIST sector, big endian
     303/    B80A : BC07                                dc.b ((ISOFILELIST_E-ISOFILELIST)&$FF),((ISOFILELIST_E-ISOFILELIST)>>8&$FF)     ; Filesize, little endian
     303/    B80C : 0000                                dc.b ((ISOFILELIST_E-ISOFILELIST)>>16&$FF),((ISOFILELIST_E-ISOFILELIST)>>24&$FF)
     303/    B80E : 0000 07BC                           dc.l ISOFILELIST_E-ISOFILELIST                                  ; Filesize, big endian
     303/    B812 : 7D                                  dc.b (2024-1900)+1                              ; Year
     303/    B813 : 0000 0000 0000                      dc.b 0,0,0,0,0,0                                ; **never done**
     303/    B819 : 02                                  dc.b 2                                          ; File flags
     303/    B81A : 0000                                dc.b 0,0
     303/    B81C : 0100                                dc.b 1,0                                        ; Volume sequence number, little
     303/    B81E : 0001                                dc.b 0,1                                        ; Volume sequence number, big
     303/    B820 : 0100                                dc.b 1,0
     303/    B822 :                     .fend:
     304/    B822 : (MACRO)              		iso_setfs 1,IsoFileList,IsoFileList_e
     304/    B822 :                     .fstrt:
     304/    B822 : 22                                  dc.b .fend-.fstrt                               ; Block size
     304/    B823 : 00                                  dc.b 0                                          ; Zero
     304/    B824 : 1700                                dc.b (ISOFILELIST>>11&$FF),(ISOFILELIST>>19&$FF)            ; ISOFILELIST sector, little endian
     304/    B826 : 0000                                dc.b (ISOFILELIST>>27&$FF),(ISOFILELIST>>35&$FF)
     304/    B828 : 0000 0017                           dc.l ISOFILELIST>>11                                  ; ISOFILELIST sector, big endian
     304/    B82C : BC07                                dc.b ((ISOFILELIST_E-ISOFILELIST)&$FF),((ISOFILELIST_E-ISOFILELIST)>>8&$FF)     ; Filesize, little endian
     304/    B82E : 0000                                dc.b ((ISOFILELIST_E-ISOFILELIST)>>16&$FF),((ISOFILELIST_E-ISOFILELIST)>>24&$FF)
     304/    B830 : 0000 07BC                           dc.l ISOFILELIST_E-ISOFILELIST                                  ; Filesize, big endian
     304/    B834 : 7D                                  dc.b (2024-1900)+1                              ; Year
     304/    B835 : 0000 0000 0000                      dc.b 0,0,0,0,0,0                                ; **never done**
     304/    B83B : 02                                  dc.b 2                                          ; File flags
     304/    B83C : 0000                                dc.b 0,0
     304/    B83E : 0100                                dc.b 1,0                                        ; Volume sequence number, little
     304/    B840 : 0001                                dc.b 0,1                                        ; Volume sequence number, big
     304/    B842 : 0101                                dc.b 1,1
     304/    B844 :                     .fend:
     305/    B844 :                     IsoFileList:
     306/    B844 : (MACRO)              		iso_file "SUB_DATA.BIN",MCD_SUBDATA,MCD_SUBDATA_e
     306/    B844 : 30                  .fstrt:         dc.b .fend-.fstrt                               ; Block size
     306/    B845 : 00                                  dc.b 0                                          ; zero
     306/    B846 : 1800                                dc.b (MCD_SUBDATA>>11&$FF),(MCD_SUBDATA>>19&$FF)            ; MCD_SUBDATA sector, little
     306/    B848 : 0000                                dc.b (MCD_SUBDATA>>27&$FF),(MCD_SUBDATA>>35&$FF)
     306/    B84A : 0000 0018                           dc.l MCD_SUBDATA>>11                                  ; MCD_SUBDATA sector, big
     306/    B84E : 00A8                                dc.b ((MCD_SUBDATA_E-MCD_SUBDATA)&$FF),((MCD_SUBDATA_E-MCD_SUBDATA)>>8&$FF)     ; Filesize, little
     306/    B850 : 0400                                dc.b ((MCD_SUBDATA_E-MCD_SUBDATA)>>16&$FF),((MCD_SUBDATA_E-MCD_SUBDATA)>>24&$FF)
     306/    B852 : 0004 A800                           dc.l MCD_SUBDATA_E-MCD_SUBDATA                                  ; Filesize, big
     306/    B856 : 7D                                  dc.b (2024-1900)+1                              ; Year
     306/    B857 : 0000 0000 0000                      dc.b 0,0,0,0,0,0                                ; TODO
     306/    B85D : 00                                  dc.b 0                                          ; File flags
     306/    B85E : 0000                                dc.b 0,0
     306/    B860 : 0100                                dc.b 1,0                                        ; Volume sequence number, little
     306/    B862 : 0001                                dc.b 0,1                                        ; Volume sequence number, big
     306/    B864 : 0E                                  dc.b .flend-.flen
     306/    B865 : 5355 425F 4441      .flen:          dc.b "SUB_DATA.BIN",";1"
             B86B : 5441 2E42 494E 
             B871 : 3B31             
     306/    B873 : 00                  .flend:         dc.b 0
     306/    B874 :                     .fend:
     307/    B874 : (MACRO)              		iso_file "MARSCODE.BIN",MARS_RAMCODE,MARS_RAMCODE_eof
     307/    B874 : 30                  .fstrt:         dc.b .fend-.fstrt                               ; Block size
     307/    B875 : 00                                  dc.b 0                                          ; zero
     307/    B876 : AD00                                dc.b (MARS_RAMCODE>>11&$FF),(MARS_RAMCODE>>19&$FF)            ; MARS_RAMCODE sector, little
     307/    B878 : 0000                                dc.b (MARS_RAMCODE>>27&$FF),(MARS_RAMCODE>>35&$FF)
     307/    B87A : 0000 00AD                           dc.l MARS_RAMCODE>>11                                  ; MARS_RAMCODE sector, big
     307/    B87E : 0058                                dc.b ((MARS_RAMCODE_EOF-MARS_RAMCODE)&$FF),((MARS_RAMCODE_EOF-MARS_RAMCODE)>>8&$FF)     ; Filesize, little
     307/    B880 : 0000                                dc.b ((MARS_RAMCODE_EOF-MARS_RAMCODE)>>16&$FF),((MARS_RAMCODE_EOF-MARS_RAMCODE)>>24&$FF)
     307/    B882 : 0000 5800                           dc.l MARS_RAMCODE_EOF-MARS_RAMCODE                                  ; Filesize, big
     307/    B886 : 7D                                  dc.b (2024-1900)+1                              ; Year
     307/    B887 : 0000 0000 0000                      dc.b 0,0,0,0,0,0                                ; TODO
     307/    B88D : 00                                  dc.b 0                                          ; File flags
     307/    B88E : 0000                                dc.b 0,0
     307/    B890 : 0100                                dc.b 1,0                                        ; Volume sequence number, little
     307/    B892 : 0001                                dc.b 0,1                                        ; Volume sequence number, big
     307/    B894 : 0E                                  dc.b .flend-.flen
     307/    B895 : 4D41 5253 434F      .flen:          dc.b "MARSCODE.BIN",";1"
             B89B : 4445 2E42 494E 
             B8A1 : 3B31             
     307/    B8A3 : 00                  .flend:         dc.b 0
     307/    B8A4 :                     .fend:
     308/    B8A4 : (MACRO)              		iso_file "SCREEN00.BIN",Md_Screen00,Md_Screen00_e
     308/    B8A4 : 30                  .fstrt:         dc.b .fend-.fstrt                               ; Block size
     308/    B8A5 : 00                                  dc.b 0                                          ; zero
     308/    B8A6 : B800                                dc.b (MD_SCREEN00>>11&$FF),(MD_SCREEN00>>19&$FF)            ; MD_SCREEN00 sector, little
     308/    B8A8 : 0000                                dc.b (MD_SCREEN00>>27&$FF),(MD_SCREEN00>>35&$FF)
     308/    B8AA : 0000 00B8                           dc.l MD_SCREEN00>>11                                  ; MD_SCREEN00 sector, big
     308/    B8AE : 0008                                dc.b ((MD_SCREEN00_E-MD_SCREEN00)&$FF),((MD_SCREEN00_E-MD_SCREEN00)>>8&$FF)     ; Filesize, little
     308/    B8B0 : 0000                                dc.b ((MD_SCREEN00_E-MD_SCREEN00)>>16&$FF),((MD_SCREEN00_E-MD_SCREEN00)>>24&$FF)
     308/    B8B2 : 0000 0800                           dc.l MD_SCREEN00_E-MD_SCREEN00                                  ; Filesize, big
     308/    B8B6 : 7D                                  dc.b (2024-1900)+1                              ; Year
     308/    B8B7 : 0000 0000 0000                      dc.b 0,0,0,0,0,0                                ; TODO
     308/    B8BD : 00                                  dc.b 0                                          ; File flags
     308/    B8BE : 0000                                dc.b 0,0
     308/    B8C0 : 0100                                dc.b 1,0                                        ; Volume sequence number, little
     308/    B8C2 : 0001                                dc.b 0,1                                        ; Volume sequence number, big
     308/    B8C4 : 0E                                  dc.b .flend-.flen
     308/    B8C5 : 5343 5245 454E      .flen:          dc.b "SCREEN00.BIN",";1"
             B8CB : 3030 2E42 494E 
             B8D1 : 3B31             
     308/    B8D3 : 00                  .flend:         dc.b 0
     308/    B8D4 :                     .fend:
     309/    B8D4 : (MACRO)              		iso_file "DATABNKD.BIN",MCD_DBANK0,MCD_DBANK0_e
     309/    B8D4 : 30                  .fstrt:         dc.b .fend-.fstrt                               ; Block size
     309/    B8D5 : 00                                  dc.b 0                                          ; zero
     309/    B8D6 : BA00                                dc.b (MCD_DBANK0>>11&$FF),(MCD_DBANK0>>19&$FF)            ; MCD_DBANK0 sector, little
     309/    B8D8 : 0000                                dc.b (MCD_DBANK0>>27&$FF),(MCD_DBANK0>>35&$FF)
     309/    B8DA : 0000 00BA                           dc.l MCD_DBANK0>>11                                  ; MCD_DBANK0 sector, big
     309/    B8DE : 0000                                dc.b ((MCD_DBANK0_E-MCD_DBANK0)&$FF),((MCD_DBANK0_E-MCD_DBANK0)>>8&$FF)     ; Filesize, little
     309/    B8E0 : 0200                                dc.b ((MCD_DBANK0_E-MCD_DBANK0)>>16&$FF),((MCD_DBANK0_E-MCD_DBANK0)>>24&$FF)
     309/    B8E2 : 0002 0000                           dc.l MCD_DBANK0_E-MCD_DBANK0                                  ; Filesize, big
     309/    B8E6 : 7D                                  dc.b (2024-1900)+1                              ; Year
     309/    B8E7 : 0000 0000 0000                      dc.b 0,0,0,0,0,0                                ; TODO
     309/    B8ED : 00                                  dc.b 0                                          ; File flags
     309/    B8EE : 0000                                dc.b 0,0
     309/    B8F0 : 0100                                dc.b 1,0                                        ; Volume sequence number, little
     309/    B8F2 : 0001                                dc.b 0,1                                        ; Volume sequence number, big
     309/    B8F4 : 0E                                  dc.b .flend-.flen
     309/    B8F5 : 4441 5441 424E      .flen:          dc.b "DATABNKD.BIN",";1"
             B8FB : 4B44 2E42 494E 
             B901 : 3B31             
     309/    B903 : 00                  .flend:         dc.b 0
     309/    B904 :                     .fend:
     310/    B904 : (MACRO)              		iso_file "MARSD_00.BIN",MARSDATA_SCREEN00,MARSDATA_SCREEN00_E
     310/    B904 : 30                  .fstrt:         dc.b .fend-.fstrt                               ; Block size
     310/    B905 : 00                                  dc.b 0                                          ; zero
     310/    B906 : FA00                                dc.b (MARSDATA_SCREEN00>>11&$FF),(MARSDATA_SCREEN00>>19&$FF)            ; MARSDATA_SCREEN00 sector, little
     310/    B908 : 0000                                dc.b (MARSDATA_SCREEN00>>27&$FF),(MARSDATA_SCREEN00>>35&$FF)
     310/    B90A : 0000 00FA                           dc.l MARSDATA_SCREEN00>>11                                  ; MARSDATA_SCREEN00 sector, big
     310/    B90E : F40E                                dc.b ((MARSDATA_SCREEN00_E-MARSDATA_SCREEN00)&$FF),((MARSDATA_SCREEN00_E-MARSDATA_SCREEN00)>>8&$FF)     ; Filesize, little
     310/    B910 : 0200                                dc.b ((MARSDATA_SCREEN00_E-MARSDATA_SCREEN00)>>16&$FF),((MARSDATA_SCREEN00_E-MARSDATA_SCREEN00)>>24&$FF)
     310/    B912 : 0002 0EF4                           dc.l MARSDATA_SCREEN00_E-MARSDATA_SCREEN00                                  ; Filesize, big
     310/    B916 : 7D                                  dc.b (2024-1900)+1                              ; Year
     310/    B917 : 0000 0000 0000                      dc.b 0,0,0,0,0,0                                ; TODO
     310/    B91D : 00                                  dc.b 0                                          ; File flags
     310/    B91E : 0000                                dc.b 0,0
     310/    B920 : 0100                                dc.b 1,0                                        ; Volume sequence number, little
     310/    B922 : 0001                                dc.b 0,1                                        ; Volume sequence number, big
     310/    B924 : 0E                                  dc.b .flend-.flen
     310/    B925 : 4D41 5253 445F      .flen:          dc.b "MARSD_00.BIN",";1"
             B92B : 3030 2E42 494E 
             B931 : 3B31             
     310/    B933 : 00                  .flend:         dc.b 0
     310/    B934 :                     .fend:
     311/    B934 :                     
     312/    B934 : (MACRO)              		iso_file "SCREEN01.BIN",Md_Screen01,Md_Screen01_e
     312/    B934 : 30                  .fstrt:         dc.b .fend-.fstrt                               ; Block size
     312/    B935 : 00                                  dc.b 0                                          ; zero
     312/    B936 : B900                                dc.b (MD_SCREEN01>>11&$FF),(MD_SCREEN01>>19&$FF)            ; MD_SCREEN01 sector, little
     312/    B938 : 0000                                dc.b (MD_SCREEN01>>27&$FF),(MD_SCREEN01>>35&$FF)
     312/    B93A : 0000 00B9                           dc.l MD_SCREEN01>>11                                  ; MD_SCREEN01 sector, big
     312/    B93E : 0008                                dc.b ((MD_SCREEN01_E-MD_SCREEN01)&$FF),((MD_SCREEN01_E-MD_SCREEN01)>>8&$FF)     ; Filesize, little
     312/    B940 : 0000                                dc.b ((MD_SCREEN01_E-MD_SCREEN01)>>16&$FF),((MD_SCREEN01_E-MD_SCREEN01)>>24&$FF)
     312/    B942 : 0000 0800                           dc.l MD_SCREEN01_E-MD_SCREEN01                                  ; Filesize, big
     312/    B946 : 7D                                  dc.b (2024-1900)+1                              ; Year
     312/    B947 : 0000 0000 0000                      dc.b 0,0,0,0,0,0                                ; TODO
     312/    B94D : 00                                  dc.b 0                                          ; File flags
     312/    B94E : 0000                                dc.b 0,0
     312/    B950 : 0100                                dc.b 1,0                                        ; Volume sequence number, little
     312/    B952 : 0001                                dc.b 0,1                                        ; Volume sequence number, big
     312/    B954 : 0E                                  dc.b .flend-.flen
     312/    B955 : 5343 5245 454E      .flen:          dc.b "SCREEN01.BIN",";1"
             B95B : 3031 2E42 494E 
             B961 : 3B31             
     312/    B963 : 00                  .flend:         dc.b 0
     312/    B964 :                     .fend:
     313/    B964 :                     ; 		iso_file "DATABNKD.BIN",MCD_DBANK1,MCD_DBANK1_e
     314/    B964 : (MACRO)              		iso_file "MARSD_01.BIN",MARSDATA_SCREEN01,MARSDATA_SCREEN01_E
     314/    B964 : 30                  .fstrt:         dc.b .fend-.fstrt                               ; Block size
     314/    B965 : 00                                  dc.b 0                                          ; zero
     314/    B966 : 3C01                                dc.b (MARSDATA_SCREEN01>>11&$FF),(MARSDATA_SCREEN01>>19&$FF)            ; MARSDATA_SCREEN01 sector, little
     314/    B968 : 0000                                dc.b (MARSDATA_SCREEN01>>27&$FF),(MARSDATA_SCREEN01>>35&$FF)
     314/    B96A : 0000 013C                           dc.l MARSDATA_SCREEN01>>11                                  ; MARSDATA_SCREEN01 sector, big
     314/    B96E : F42E                                dc.b ((MARSDATA_SCREEN01_E-MARSDATA_SCREEN01)&$FF),((MARSDATA_SCREEN01_E-MARSDATA_SCREEN01)>>8&$FF)     ; Filesize, little
     314/    B970 : 0100                                dc.b ((MARSDATA_SCREEN01_E-MARSDATA_SCREEN01)>>16&$FF),((MARSDATA_SCREEN01_E-MARSDATA_SCREEN01)>>24&$FF)
     314/    B972 : 0001 2EF4                           dc.l MARSDATA_SCREEN01_E-MARSDATA_SCREEN01                                  ; Filesize, big
     314/    B976 : 7D                                  dc.b (2024-1900)+1                              ; Year
     314/    B977 : 0000 0000 0000                      dc.b 0,0,0,0,0,0                                ; TODO
     314/    B97D : 00                                  dc.b 0                                          ; File flags
     314/    B97E : 0000                                dc.b 0,0
     314/    B980 : 0100                                dc.b 1,0                                        ; Volume sequence number, little
     314/    B982 : 0001                                dc.b 0,1                                        ; Volume sequence number, big
     314/    B984 : 0E                                  dc.b .flend-.flen
     314/    B985 : 4D41 5253 445F      .flen:          dc.b "MARSD_01.BIN",";1"
             B98B : 3031 2E42 494E 
             B991 : 3B31             
     314/    B993 : 00                  .flend:         dc.b 0
     314/    B994 :                     .fend:
     315/    B994 :                     		align $800
     316/    C000 :                     IsoFileList_e:
     318/    C000 :                     
     319/    C000 :                     ; ====================================================================
     320/    C000 :                     ; --------------------------------------------------------
     321/    C000 :                     ; SEGA CD SUB-CPU data
     322/    C000 :                     ; --------------------------------------------------------
     323/    C000 :                     
     325/    C000 :                     		align $800
     326/    C000 :                     MCD_SUBDATA:
     327/   20000 :                     		phase $20000			; <-- OUTPUT location on Sub-CPU area
     328/   20000 :                     		include "sound/smpl_pcm.asm"	; PCM samples
(1)    1/   20000 :                     ; ===========================================================================
(1)    2/   20000 :                     ; --------------------------------------------------------
(1)    3/   20000 :                     ; GEMA/Nikona PCM instruments for Sega CD
(1)    4/   20000 :                     ;
(1)    5/   20000 :                     ; Stored on DISC and loaded to Sub-CPU
(1)    6/   20000 :                     ;
(1)    7/   20000 :                     ; *** DO NOT LEAVE THIS SECTION EMPTY ***
(1)    8/   20000 :                     ; --------------------------------------------------------
(1)    9/   20000 :                     ; 	gSmplData Label,"file",loop_point(0-start)
(1)   10/   20000 :                     
(1)   11/   20000 :                     	align $800
(1)   12/   20000 :                     
(1)   13/   20000 : (MACRO)               	gSmplData PcmIns_techno_01,"sound/instr/smpl/techno/01.wav",0
(1)   13/   20000 :                                     align 4
(1)   13/   20000 : =$20000              PCMINS_TECHNO_01    label *
(1)   13/   20000 : 5427 00                     dc.b ((PCMINS_TECHNO_01_e-PCMINS_TECHNO_01_s)&$FF),(((PCMINS_TECHNO_01_e-PCMINS_TECHNO_01_s)>>8)&$FF),(((PCMINS_TECHNO_01_e-PCMINS_TECHNO_01_s)>>16)&$FF)
(1)   13/   20003 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   13/   20006 :                     PCMINS_TECHNO_01_s:
(1)   13/   20006 :                             binclude "sound/instr/smpl/techno/01.wav",$2C
(1)   13/   2275A :                     PCMINS_TECHNO_01_e:
(1)   14/   2275A : (MACRO)               	gSmplData PcmIns_techno_02,"sound/instr/smpl/techno/02.wav",0
(1)   14/   2275A :                                     align 4
(1)   14/   2275C : =$2275C              PCMINS_TECHNO_02    label *
(1)   14/   2275C : C24F 00                     dc.b ((PCMINS_TECHNO_02_e-PCMINS_TECHNO_02_s)&$FF),(((PCMINS_TECHNO_02_e-PCMINS_TECHNO_02_s)>>8)&$FF),(((PCMINS_TECHNO_02_e-PCMINS_TECHNO_02_s)>>16)&$FF)
(1)   14/   2275F : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   14/   22762 :                     PCMINS_TECHNO_02_s:
(1)   14/   22762 :                             binclude "sound/instr/smpl/techno/02.wav",$2C
(1)   14/   27724 :                     PCMINS_TECHNO_02_e:
(1)   15/   27724 : (MACRO)                	gSmplData PcmIns_techno_03,"sound/instr/smpl/techno/03.wav",0
(1)   15/   27724 :                                     align 4
(1)   15/   27724 : =$27724              PCMINS_TECHNO_03    label *
(1)   15/   27724 : 4613 00                     dc.b ((PCMINS_TECHNO_03_e-PCMINS_TECHNO_03_s)&$FF),(((PCMINS_TECHNO_03_e-PCMINS_TECHNO_03_s)>>8)&$FF),(((PCMINS_TECHNO_03_e-PCMINS_TECHNO_03_s)>>16)&$FF)
(1)   15/   27727 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   15/   2772A :                     PCMINS_TECHNO_03_s:
(1)   15/   2772A :                             binclude "sound/instr/smpl/techno/03.wav",$2C
(1)   15/   28A70 :                     PCMINS_TECHNO_03_e:
(1)   16/   28A70 : (MACRO)                	gSmplData PcmIns_techno_04,"sound/instr/smpl/techno/04.wav",0
(1)   16/   28A70 :                                     align 4
(1)   16/   28A70 : =$28A70              PCMINS_TECHNO_04    label *
(1)   16/   28A70 : 1E0E 00                     dc.b ((PCMINS_TECHNO_04_e-PCMINS_TECHNO_04_s)&$FF),(((PCMINS_TECHNO_04_e-PCMINS_TECHNO_04_s)>>8)&$FF),(((PCMINS_TECHNO_04_e-PCMINS_TECHNO_04_s)>>16)&$FF)
(1)   16/   28A73 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   16/   28A76 :                     PCMINS_TECHNO_04_s:
(1)   16/   28A76 :                             binclude "sound/instr/smpl/techno/04.wav",$2C
(1)   16/   29894 :                     PCMINS_TECHNO_04_e:
(1)   17/   29894 : (MACRO)               	gSmplData PcmIns_techno_05,"sound/instr/smpl/techno/05.wav",0
(1)   17/   29894 :                                     align 4
(1)   17/   29894 : =$29894              PCMINS_TECHNO_05    label *
(1)   17/   29894 : 0A3C 00                     dc.b ((PCMINS_TECHNO_05_e-PCMINS_TECHNO_05_s)&$FF),(((PCMINS_TECHNO_05_e-PCMINS_TECHNO_05_s)>>8)&$FF),(((PCMINS_TECHNO_05_e-PCMINS_TECHNO_05_s)>>16)&$FF)
(1)   17/   29897 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   17/   2989A :                     PCMINS_TECHNO_05_s:
(1)   17/   2989A :                             binclude "sound/instr/smpl/techno/05.wav",$2C
(1)   17/   2D4A4 :                     PCMINS_TECHNO_05_e:
(1)   18/   2D4A4 : (MACRO)                	gSmplData PcmIns_techno_06,"sound/instr/smpl/techno/06.wav",53501
(1)   18/   2D4A4 :                                     align 4
(1)   18/   2D4A4 : =$2D4A4              PCMINS_TECHNO_06    label *
(1)   18/   2D4A4 : 40E0 00                     dc.b ((PCMINS_TECHNO_06_e-PCMINS_TECHNO_06_s)&$FF),(((PCMINS_TECHNO_06_e-PCMINS_TECHNO_06_s)>>8)&$FF),(((PCMINS_TECHNO_06_e-PCMINS_TECHNO_06_s)>>16)&$FF)
(1)   18/   2D4A7 : FDD0 00                     dc.b ((53501)&$FF),(((53501)>>8)&$FF),(((53501)>>16)&$FF)
(1)   18/   2D4AA :                     PCMINS_TECHNO_06_s:
(1)   18/   2D4AA :                             binclude "sound/instr/smpl/techno/06.wav",$2C
(1)   18/   3B4EA :                     PCMINS_TECHNO_06_e:
(1)   19/   3B4EA : (MACRO)               	gSmplData PcmIns_techno_07,"sound/instr/smpl/techno/07.wav",11812
(1)   19/   3B4EA :                                     align 4
(1)   19/   3B4EC : =$3B4EC              PCMINS_TECHNO_07    label *
(1)   19/   3B4EC : F854 00                     dc.b ((PCMINS_TECHNO_07_e-PCMINS_TECHNO_07_s)&$FF),(((PCMINS_TECHNO_07_e-PCMINS_TECHNO_07_s)>>8)&$FF),(((PCMINS_TECHNO_07_e-PCMINS_TECHNO_07_s)>>16)&$FF)
(1)   19/   3B4EF : 242E 00                     dc.b ((11812)&$FF),(((11812)>>8)&$FF),(((11812)>>16)&$FF)
(1)   19/   3B4F2 :                     PCMINS_TECHNO_07_s:
(1)   19/   3B4F2 :                             binclude "sound/instr/smpl/techno/07.wav",$2C
(1)   19/   409EA :                     PCMINS_TECHNO_07_e:
(1)   20/   409EA : (MACRO)                	gSmplData PcmIns_techno_08,"sound/instr/smpl/techno/08.wav",456
(1)   20/   409EA :                                     align 4
(1)   20/   409EC : =$409EC              PCMINS_TECHNO_08    label *
(1)   20/   409EC : 1A31 00                     dc.b ((PCMINS_TECHNO_08_e-PCMINS_TECHNO_08_s)&$FF),(((PCMINS_TECHNO_08_e-PCMINS_TECHNO_08_s)>>8)&$FF),(((PCMINS_TECHNO_08_e-PCMINS_TECHNO_08_s)>>16)&$FF)
(1)   20/   409EF : C801 00                     dc.b ((456)&$FF),(((456)>>8)&$FF),(((456)>>16)&$FF)
(1)   20/   409F2 :                     PCMINS_TECHNO_08_s:
(1)   20/   409F2 :                             binclude "sound/instr/smpl/techno/08.wav",$2C
(1)   20/   43B0C :                     PCMINS_TECHNO_08_e:
(1)   21/   43B0C : (MACRO)               	gSmplData PcmIns_techno_09,"sound/instr/smpl/techno/09.wav",728
(1)   21/   43B0C :                                     align 4
(1)   21/   43B0C : =$43B0C              PCMINS_TECHNO_09    label *
(1)   21/   43B0C : BA32 00                     dc.b ((PCMINS_TECHNO_09_e-PCMINS_TECHNO_09_s)&$FF),(((PCMINS_TECHNO_09_e-PCMINS_TECHNO_09_s)>>8)&$FF),(((PCMINS_TECHNO_09_e-PCMINS_TECHNO_09_s)>>16)&$FF)
(1)   21/   43B0F : D802 00                     dc.b ((728)&$FF),(((728)>>8)&$FF),(((728)>>16)&$FF)
(1)   21/   43B12 :                     PCMINS_TECHNO_09_s:
(1)   21/   43B12 :                             binclude "sound/instr/smpl/techno/09.wav",$2C
(1)   21/   46DCC :                     PCMINS_TECHNO_09_e:
(1)   22/   46DCC : (MACRO)                	gSmplData PcmIns_techno_10,"sound/instr/smpl/techno/10.wav",132
(1)   22/   46DCC :                                     align 4
(1)   22/   46DCC : =$46DCC              PCMINS_TECHNO_10    label *
(1)   22/   46DCC : 5634 00                     dc.b ((PCMINS_TECHNO_10_e-PCMINS_TECHNO_10_s)&$FF),(((PCMINS_TECHNO_10_e-PCMINS_TECHNO_10_s)>>8)&$FF),(((PCMINS_TECHNO_10_e-PCMINS_TECHNO_10_s)>>16)&$FF)
(1)   22/   46DCF : 8400 00                     dc.b ((132)&$FF),(((132)>>8)&$FF),(((132)>>16)&$FF)
(1)   22/   46DD2 :                     PCMINS_TECHNO_10_s:
(1)   22/   46DD2 :                             binclude "sound/instr/smpl/techno/10.wav",$2C
(1)   22/   4A228 :                     PCMINS_TECHNO_10_e:
(1)   23/   4A228 : (MACRO)                	gSmplData PcmIns_techno_11,"sound/instr/smpl/techno/11.wav",0
(1)   23/   4A228 :                                     align 4
(1)   23/   4A228 : =$4A228              PCMINS_TECHNO_11    label *
(1)   23/   4A228 : 5A41 00                     dc.b ((PCMINS_TECHNO_11_e-PCMINS_TECHNO_11_s)&$FF),(((PCMINS_TECHNO_11_e-PCMINS_TECHNO_11_s)>>8)&$FF),(((PCMINS_TECHNO_11_e-PCMINS_TECHNO_11_s)>>16)&$FF)
(1)   23/   4A22B : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   23/   4A22E :                     PCMINS_TECHNO_11_s:
(1)   23/   4A22E :                             binclude "sound/instr/smpl/techno/11.wav",$2C
(1)   23/   4E388 :                     PCMINS_TECHNO_11_e:
(1)   24/   4E388 :                     
(1)   25/   4E388 : (MACRO)              	gSmplData PcmIns_astral_01,"sound/instr/smpl/astral/01.wav",5812
(1)   25/   4E388 :                                     align 4
(1)   25/   4E388 : =$4E388              PCMINS_ASTRAL_01    label *
(1)   25/   4E388 : 8C20 00                     dc.b ((PCMINS_ASTRAL_01_e-PCMINS_ASTRAL_01_s)&$FF),(((PCMINS_ASTRAL_01_e-PCMINS_ASTRAL_01_s)>>8)&$FF),(((PCMINS_ASTRAL_01_e-PCMINS_ASTRAL_01_s)>>16)&$FF)
(1)   25/   4E38B : B416 00                     dc.b ((5812)&$FF),(((5812)>>8)&$FF),(((5812)>>16)&$FF)
(1)   25/   4E38E :                     PCMINS_ASTRAL_01_s:
(1)   25/   4E38E :                             binclude "sound/instr/smpl/astral/01.wav",$2C
(1)   25/   5041A :                     PCMINS_ASTRAL_01_e:
(1)   26/   5041A : (MACRO)               	gSmplData PcmIns_astral_02,"sound/instr/smpl/astral/02.wav",6384
(1)   26/   5041A :                                     align 4
(1)   26/   5041C : =$5041C              PCMINS_ASTRAL_02    label *
(1)   26/   5041C : 8821 00                     dc.b ((PCMINS_ASTRAL_02_e-PCMINS_ASTRAL_02_s)&$FF),(((PCMINS_ASTRAL_02_e-PCMINS_ASTRAL_02_s)>>8)&$FF),(((PCMINS_ASTRAL_02_e-PCMINS_ASTRAL_02_s)>>16)&$FF)
(1)   26/   5041F : F018 00                     dc.b ((6384)&$FF),(((6384)>>8)&$FF),(((6384)>>16)&$FF)
(1)   26/   50422 :                     PCMINS_ASTRAL_02_s:
(1)   26/   50422 :                             binclude "sound/instr/smpl/astral/02.wav",$2C
(1)   26/   525AA :                     PCMINS_ASTRAL_02_e:
(1)   27/   525AA : (MACRO)                	gSmplData PcmIns_astral_03,"sound/instr/smpl/astral/03.wav",0
(1)   27/   525AA :                                     align 4
(1)   27/   525AC : =$525AC              PCMINS_ASTRAL_03    label *
(1)   27/   525AC : D018 00                     dc.b ((PCMINS_ASTRAL_03_e-PCMINS_ASTRAL_03_s)&$FF),(((PCMINS_ASTRAL_03_e-PCMINS_ASTRAL_03_s)>>8)&$FF),(((PCMINS_ASTRAL_03_e-PCMINS_ASTRAL_03_s)>>16)&$FF)
(1)   27/   525AF : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   27/   525B2 :                     PCMINS_ASTRAL_03_s:
(1)   27/   525B2 :                             binclude "sound/instr/smpl/astral/03.wav",$2C
(1)   27/   53E82 :                     PCMINS_ASTRAL_03_e:
(1)   28/   53E82 : (MACRO)                	gSmplData PcmIns_astral_04,"sound/instr/smpl/astral/04.wav",0
(1)   28/   53E82 :                                     align 4
(1)   28/   53E84 : =$53E84              PCMINS_ASTRAL_04    label *
(1)   28/   53E84 : 0C06 00                     dc.b ((PCMINS_ASTRAL_04_e-PCMINS_ASTRAL_04_s)&$FF),(((PCMINS_ASTRAL_04_e-PCMINS_ASTRAL_04_s)>>8)&$FF),(((PCMINS_ASTRAL_04_e-PCMINS_ASTRAL_04_s)>>16)&$FF)
(1)   28/   53E87 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   28/   53E8A :                     PCMINS_ASTRAL_04_s:
(1)   28/   53E8A :                             binclude "sound/instr/smpl/astral/04.wav",$2C
(1)   28/   54496 :                     PCMINS_ASTRAL_04_e:
(1)   29/   54496 : (MACRO)               	gSmplData PcmIns_astral_05,"sound/instr/smpl/astral/05.wav",0
(1)   29/   54496 :                                     align 4
(1)   29/   54498 : =$54498              PCMINS_ASTRAL_05    label *
(1)   29/   54498 : A002 00                     dc.b ((PCMINS_ASTRAL_05_e-PCMINS_ASTRAL_05_s)&$FF),(((PCMINS_ASTRAL_05_e-PCMINS_ASTRAL_05_s)>>8)&$FF),(((PCMINS_ASTRAL_05_e-PCMINS_ASTRAL_05_s)>>16)&$FF)
(1)   29/   5449B : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   29/   5449E :                     PCMINS_ASTRAL_05_s:
(1)   29/   5449E :                             binclude "sound/instr/smpl/astral/05.wav",$2C
(1)   29/   5473E :                     PCMINS_ASTRAL_05_e:
(1)   30/   5473E : (MACRO)                	gSmplData PcmIns_astral_06,"sound/instr/smpl/astral/06.wav",0
(1)   30/   5473E :                                     align 4
(1)   30/   54740 : =$54740              PCMINS_ASTRAL_06    label *
(1)   30/   54740 : 720D 00                     dc.b ((PCMINS_ASTRAL_06_e-PCMINS_ASTRAL_06_s)&$FF),(((PCMINS_ASTRAL_06_e-PCMINS_ASTRAL_06_s)>>8)&$FF),(((PCMINS_ASTRAL_06_e-PCMINS_ASTRAL_06_s)>>16)&$FF)
(1)   30/   54743 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   30/   54746 :                     PCMINS_ASTRAL_06_s:
(1)   30/   54746 :                             binclude "sound/instr/smpl/astral/06.wav",$2C
(1)   30/   554B8 :                     PCMINS_ASTRAL_06_e:
(1)   31/   554B8 : (MACRO)               	gSmplData PcmIns_astral_07,"sound/instr/smpl/astral/07.wav",0
(1)   31/   554B8 :                                     align 4
(1)   31/   554B8 : =$554B8              PCMINS_ASTRAL_07    label *
(1)   31/   554B8 : DE08 00                     dc.b ((PCMINS_ASTRAL_07_e-PCMINS_ASTRAL_07_s)&$FF),(((PCMINS_ASTRAL_07_e-PCMINS_ASTRAL_07_s)>>8)&$FF),(((PCMINS_ASTRAL_07_e-PCMINS_ASTRAL_07_s)>>16)&$FF)
(1)   31/   554BB : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   31/   554BE :                     PCMINS_ASTRAL_07_s:
(1)   31/   554BE :                             binclude "sound/instr/smpl/astral/07.wav",$2C
(1)   31/   55D9C :                     PCMINS_ASTRAL_07_e:
(1)   32/   55D9C : (MACRO)                	gSmplData PcmIns_astral_08,"sound/instr/smpl/astral/08.wav",0
(1)   32/   55D9C :                                     align 4
(1)   32/   55D9C : =$55D9C              PCMINS_ASTRAL_08    label *
(1)   32/   55D9C : 2E15 00                     dc.b ((PCMINS_ASTRAL_08_e-PCMINS_ASTRAL_08_s)&$FF),(((PCMINS_ASTRAL_08_e-PCMINS_ASTRAL_08_s)>>8)&$FF),(((PCMINS_ASTRAL_08_e-PCMINS_ASTRAL_08_s)>>16)&$FF)
(1)   32/   55D9F : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   32/   55DA2 :                     PCMINS_ASTRAL_08_s:
(1)   32/   55DA2 :                             binclude "sound/instr/smpl/astral/08.wav",$2C
(1)   32/   572D0 :                     PCMINS_ASTRAL_08_e:
(1)   33/   572D0 : (MACRO)               	gSmplData PcmIns_astral_09,"sound/instr/smpl/astral/09.wav",0
(1)   33/   572D0 :                                     align 4
(1)   33/   572D0 : =$572D0              PCMINS_ASTRAL_09    label *
(1)   33/   572D0 : 6E0B 00                     dc.b ((PCMINS_ASTRAL_09_e-PCMINS_ASTRAL_09_s)&$FF),(((PCMINS_ASTRAL_09_e-PCMINS_ASTRAL_09_s)>>8)&$FF),(((PCMINS_ASTRAL_09_e-PCMINS_ASTRAL_09_s)>>16)&$FF)
(1)   33/   572D3 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   33/   572D6 :                     PCMINS_ASTRAL_09_s:
(1)   33/   572D6 :                             binclude "sound/instr/smpl/astral/09.wav",$2C
(1)   33/   57E44 :                     PCMINS_ASTRAL_09_e:
(1)   34/   57E44 : (MACRO)              	gSmplData PcmIns_astral_10,"sound/instr/smpl/astral/10.wav",0
(1)   34/   57E44 :                                     align 4
(1)   34/   57E44 : =$57E44              PCMINS_ASTRAL_10    label *
(1)   34/   57E44 : 040C 00                     dc.b ((PCMINS_ASTRAL_10_e-PCMINS_ASTRAL_10_s)&$FF),(((PCMINS_ASTRAL_10_e-PCMINS_ASTRAL_10_s)>>8)&$FF),(((PCMINS_ASTRAL_10_e-PCMINS_ASTRAL_10_s)>>16)&$FF)
(1)   34/   57E47 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   34/   57E4A :                     PCMINS_ASTRAL_10_s:
(1)   34/   57E4A :                             binclude "sound/instr/smpl/astral/10.wav",$2C
(1)   34/   58A4E :                     PCMINS_ASTRAL_10_e:
(1)   35/   58A4E : (MACRO)              	gSmplData PcmIns_astral_11,"sound/instr/smpl/astral/11.wav",0
(1)   35/   58A4E :                                     align 4
(1)   35/   58A50 : =$58A50              PCMINS_ASTRAL_11    label *
(1)   35/   58A50 : DC1D 00                     dc.b ((PCMINS_ASTRAL_11_e-PCMINS_ASTRAL_11_s)&$FF),(((PCMINS_ASTRAL_11_e-PCMINS_ASTRAL_11_s)>>8)&$FF),(((PCMINS_ASTRAL_11_e-PCMINS_ASTRAL_11_s)>>16)&$FF)
(1)   35/   58A53 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   35/   58A56 :                     PCMINS_ASTRAL_11_s:
(1)   35/   58A56 :                             binclude "sound/instr/smpl/astral/11.wav",$2C
(1)   35/   5A832 :                     PCMINS_ASTRAL_11_e:
(1)   36/   5A832 : (MACRO)               	gSmplData PcmIns_astral_12,"sound/instr/smpl/astral/12.wav",0
(1)   36/   5A832 :                                     align 4
(1)   36/   5A834 : =$5A834              PCMINS_ASTRAL_12    label *
(1)   36/   5A834 : D80C 00                     dc.b ((PCMINS_ASTRAL_12_e-PCMINS_ASTRAL_12_s)&$FF),(((PCMINS_ASTRAL_12_e-PCMINS_ASTRAL_12_s)>>8)&$FF),(((PCMINS_ASTRAL_12_e-PCMINS_ASTRAL_12_s)>>16)&$FF)
(1)   36/   5A837 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   36/   5A83A :                     PCMINS_ASTRAL_12_s:
(1)   36/   5A83A :                             binclude "sound/instr/smpl/astral/12.wav",$2C
(1)   36/   5B512 :                     PCMINS_ASTRAL_12_e:
(1)   37/   5B512 : (MACRO)                	gSmplData PcmIns_astral_13,"sound/instr/smpl/astral/13.wav",0
(1)   37/   5B512 :                                     align 4
(1)   37/   5B514 : =$5B514              PCMINS_ASTRAL_13    label *
(1)   37/   5B514 : 8A0D 00                     dc.b ((PCMINS_ASTRAL_13_e-PCMINS_ASTRAL_13_s)&$FF),(((PCMINS_ASTRAL_13_e-PCMINS_ASTRAL_13_s)>>8)&$FF),(((PCMINS_ASTRAL_13_e-PCMINS_ASTRAL_13_s)>>16)&$FF)
(1)   37/   5B517 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   37/   5B51A :                     PCMINS_ASTRAL_13_s:
(1)   37/   5B51A :                             binclude "sound/instr/smpl/astral/13.wav",$2C
(1)   37/   5C2A4 :                     PCMINS_ASTRAL_13_e:
(1)   38/   5C2A4 : (MACRO)                	gSmplData PcmIns_astral_14,"sound/instr/smpl/astral/14.wav",0
(1)   38/   5C2A4 :                                     align 4
(1)   38/   5C2A4 : =$5C2A4              PCMINS_ASTRAL_14    label *
(1)   38/   5C2A4 : 862C 00                     dc.b ((PCMINS_ASTRAL_14_e-PCMINS_ASTRAL_14_s)&$FF),(((PCMINS_ASTRAL_14_e-PCMINS_ASTRAL_14_s)>>8)&$FF),(((PCMINS_ASTRAL_14_e-PCMINS_ASTRAL_14_s)>>16)&$FF)
(1)   38/   5C2A7 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   38/   5C2AA :                     PCMINS_ASTRAL_14_s:
(1)   38/   5C2AA :                             binclude "sound/instr/smpl/astral/14.wav",$2C
(1)   38/   5EF30 :                     PCMINS_ASTRAL_14_e:
(1)   39/   5EF30 : (MACRO)               	gSmplData PcmIns_astral_15,"sound/instr/smpl/astral/15.wav",0
(1)   39/   5EF30 :                                     align 4
(1)   39/   5EF30 : =$5EF30              PCMINS_ASTRAL_15    label *
(1)   39/   5EF30 : 0C0D 00                     dc.b ((PCMINS_ASTRAL_15_e-PCMINS_ASTRAL_15_s)&$FF),(((PCMINS_ASTRAL_15_e-PCMINS_ASTRAL_15_s)>>8)&$FF),(((PCMINS_ASTRAL_15_e-PCMINS_ASTRAL_15_s)>>16)&$FF)
(1)   39/   5EF33 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   39/   5EF36 :                     PCMINS_ASTRAL_15_s:
(1)   39/   5EF36 :                             binclude "sound/instr/smpl/astral/15.wav",$2C
(1)   39/   5FC42 :                     PCMINS_ASTRAL_15_e:
(1)   40/   5FC42 : (MACRO)                	gSmplData PcmIns_astral_16,"sound/instr/smpl/astral/16.wav",0
(1)   40/   5FC42 :                                     align 4
(1)   40/   5FC44 : =$5FC44              PCMINS_ASTRAL_16    label *
(1)   40/   5FC44 : 9A0B 00                     dc.b ((PCMINS_ASTRAL_16_e-PCMINS_ASTRAL_16_s)&$FF),(((PCMINS_ASTRAL_16_e-PCMINS_ASTRAL_16_s)>>8)&$FF),(((PCMINS_ASTRAL_16_e-PCMINS_ASTRAL_16_s)>>16)&$FF)
(1)   40/   5FC47 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   40/   5FC4A :                     PCMINS_ASTRAL_16_s:
(1)   40/   5FC4A :                             binclude "sound/instr/smpl/astral/16.wav",$2C
(1)   40/   607E4 :                     PCMINS_ASTRAL_16_e:
(1)   41/   607E4 : (MACRO)               	gSmplData PcmIns_astral_17,"sound/instr/smpl/astral/17.wav",0
(1)   41/   607E4 :                                     align 4
(1)   41/   607E4 : =$607E4              PCMINS_ASTRAL_17    label *
(1)   41/   607E4 : AA0B 00                     dc.b ((PCMINS_ASTRAL_17_e-PCMINS_ASTRAL_17_s)&$FF),(((PCMINS_ASTRAL_17_e-PCMINS_ASTRAL_17_s)>>8)&$FF),(((PCMINS_ASTRAL_17_e-PCMINS_ASTRAL_17_s)>>16)&$FF)
(1)   41/   607E7 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   41/   607EA :                     PCMINS_ASTRAL_17_s:
(1)   41/   607EA :                             binclude "sound/instr/smpl/astral/17.wav",$2C
(1)   41/   61394 :                     PCMINS_ASTRAL_17_e:
(1)   42/   61394 : (MACRO)                	gSmplData PcmIns_astral_18,"sound/instr/smpl/astral/18.wav",0
(1)   42/   61394 :                                     align 4
(1)   42/   61394 : =$61394              PCMINS_ASTRAL_18    label *
(1)   42/   61394 : AA02 00                     dc.b ((PCMINS_ASTRAL_18_e-PCMINS_ASTRAL_18_s)&$FF),(((PCMINS_ASTRAL_18_e-PCMINS_ASTRAL_18_s)>>8)&$FF),(((PCMINS_ASTRAL_18_e-PCMINS_ASTRAL_18_s)>>16)&$FF)
(1)   42/   61397 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   42/   6139A :                     PCMINS_ASTRAL_18_s:
(1)   42/   6139A :                             binclude "sound/instr/smpl/astral/18.wav",$2C
(1)   42/   61644 :                     PCMINS_ASTRAL_18_e:
(1)   43/   61644 : (MACRO)               	gSmplData PcmIns_astral_19,"sound/instr/smpl/astral/19.wav",432
(1)   43/   61644 :                                     align 4
(1)   43/   61644 : =$61644              PCMINS_ASTRAL_19    label *
(1)   43/   61644 : 1819 00                     dc.b ((PCMINS_ASTRAL_19_e-PCMINS_ASTRAL_19_s)&$FF),(((PCMINS_ASTRAL_19_e-PCMINS_ASTRAL_19_s)>>8)&$FF),(((PCMINS_ASTRAL_19_e-PCMINS_ASTRAL_19_s)>>16)&$FF)
(1)   43/   61647 : B001 00                     dc.b ((432)&$FF),(((432)>>8)&$FF),(((432)>>16)&$FF)
(1)   43/   6164A :                     PCMINS_ASTRAL_19_s:
(1)   43/   6164A :                             binclude "sound/instr/smpl/astral/19.wav",$2C
(1)   43/   62F62 :                     PCMINS_ASTRAL_19_e:
(1)   44/   62F62 : (MACRO)                	gSmplData PcmIns_astral_20,"sound/instr/smpl/astral/20.wav",250
(1)   44/   62F62 :                                     align 4
(1)   44/   62F64 : =$62F64              PCMINS_ASTRAL_20    label *
(1)   44/   62F64 : 0017 00                     dc.b ((PCMINS_ASTRAL_20_e-PCMINS_ASTRAL_20_s)&$FF),(((PCMINS_ASTRAL_20_e-PCMINS_ASTRAL_20_s)>>8)&$FF),(((PCMINS_ASTRAL_20_e-PCMINS_ASTRAL_20_s)>>16)&$FF)
(1)   44/   62F67 : FA00 00                     dc.b ((250)&$FF),(((250)>>8)&$FF),(((250)>>16)&$FF)
(1)   44/   62F6A :                     PCMINS_ASTRAL_20_s:
(1)   44/   62F6A :                             binclude "sound/instr/smpl/astral/20.wav",$2C
(1)   44/   6466A :                     PCMINS_ASTRAL_20_e:
(1)   45/   6466A : (MACRO)              	gSmplData PcmIns_astral_21,"sound/instr/smpl/astral/21.wav",6386
(1)   45/   6466A :                                     align 4
(1)   45/   6466C : =$6466C              PCMINS_ASTRAL_21    label *
(1)   45/   6466C : 4630 00                     dc.b ((PCMINS_ASTRAL_21_e-PCMINS_ASTRAL_21_s)&$FF),(((PCMINS_ASTRAL_21_e-PCMINS_ASTRAL_21_s)>>8)&$FF),(((PCMINS_ASTRAL_21_e-PCMINS_ASTRAL_21_s)>>16)&$FF)
(1)   45/   6466F : F218 00                     dc.b ((6386)&$FF),(((6386)>>8)&$FF),(((6386)>>16)&$FF)
(1)   45/   64672 :                     PCMINS_ASTRAL_21_s:
(1)   45/   64672 :                             binclude "sound/instr/smpl/astral/21.wav",$2C
(1)   45/   676B8 :                     PCMINS_ASTRAL_21_e:
(1)   46/   676B8 : (MACRO)               	gSmplData PcmIns_astral_22,"sound/instr/smpl/astral/22.wav",0
(1)   46/   676B8 :                                     align 4
(1)   46/   676B8 : =$676B8              PCMINS_ASTRAL_22    label *
(1)   46/   676B8 : 060A 00                     dc.b ((PCMINS_ASTRAL_22_e-PCMINS_ASTRAL_22_s)&$FF),(((PCMINS_ASTRAL_22_e-PCMINS_ASTRAL_22_s)>>8)&$FF),(((PCMINS_ASTRAL_22_e-PCMINS_ASTRAL_22_s)>>16)&$FF)
(1)   46/   676BB : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   46/   676BE :                     PCMINS_ASTRAL_22_s:
(1)   46/   676BE :                             binclude "sound/instr/smpl/astral/22.wav",$2C
(1)   46/   680C4 :                     PCMINS_ASTRAL_22_e:
(1)   47/   680C4 : (MACRO)                	gSmplData PcmIns_astral_23,"sound/instr/smpl/astral/23.wav",0
(1)   47/   680C4 :                                     align 4
(1)   47/   680C4 : =$680C4              PCMINS_ASTRAL_23    label *
(1)   47/   680C4 : 3403 00                     dc.b ((PCMINS_ASTRAL_23_e-PCMINS_ASTRAL_23_s)&$FF),(((PCMINS_ASTRAL_23_e-PCMINS_ASTRAL_23_s)>>8)&$FF),(((PCMINS_ASTRAL_23_e-PCMINS_ASTRAL_23_s)>>16)&$FF)
(1)   47/   680C7 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   47/   680CA :                     PCMINS_ASTRAL_23_s:
(1)   47/   680CA :                             binclude "sound/instr/smpl/astral/23.wav",$2C
(1)   47/   683FE :                     PCMINS_ASTRAL_23_e:
(1)   48/   683FE : (MACRO)                	gSmplData PcmIns_astral_24,"sound/instr/smpl/astral/24.wav",0
(1)   48/   683FE :                                     align 4
(1)   48/   68400 : =$68400              PCMINS_ASTRAL_24    label *
(1)   48/   68400 : DE02 00                     dc.b ((PCMINS_ASTRAL_24_e-PCMINS_ASTRAL_24_s)&$FF),(((PCMINS_ASTRAL_24_e-PCMINS_ASTRAL_24_s)>>8)&$FF),(((PCMINS_ASTRAL_24_e-PCMINS_ASTRAL_24_s)>>16)&$FF)
(1)   48/   68403 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   48/   68406 :                     PCMINS_ASTRAL_24_s:
(1)   48/   68406 :                             binclude "sound/instr/smpl/astral/24.wav",$2C
(1)   48/   686E4 :                     PCMINS_ASTRAL_24_e:
(1)   49/   686E4 : (MACRO)               	gSmplData PcmIns_astral_25,"sound/instr/smpl/astral/25.wav",0
(1)   49/   686E4 :                                     align 4
(1)   49/   686E4 : =$686E4              PCMINS_ASTRAL_25    label *
(1)   49/   686E4 : 4E08 00                     dc.b ((PCMINS_ASTRAL_25_e-PCMINS_ASTRAL_25_s)&$FF),(((PCMINS_ASTRAL_25_e-PCMINS_ASTRAL_25_s)>>8)&$FF),(((PCMINS_ASTRAL_25_e-PCMINS_ASTRAL_25_s)>>16)&$FF)
(1)   49/   686E7 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   49/   686EA :                     PCMINS_ASTRAL_25_s:
(1)   49/   686EA :                             binclude "sound/instr/smpl/astral/25.wav",$2C
(1)   49/   68F38 :                     PCMINS_ASTRAL_25_e:
(1)   50/   68F38 : (MACRO)               	gSmplData PcmIns_astral_26,"sound/instr/smpl/astral/26.wav",0
(1)   50/   68F38 :                                     align 4
(1)   50/   68F38 : =$68F38              PCMINS_ASTRAL_26    label *
(1)   50/   68F38 : 0A16 00                     dc.b ((PCMINS_ASTRAL_26_e-PCMINS_ASTRAL_26_s)&$FF),(((PCMINS_ASTRAL_26_e-PCMINS_ASTRAL_26_s)>>8)&$FF),(((PCMINS_ASTRAL_26_e-PCMINS_ASTRAL_26_s)>>16)&$FF)
(1)   50/   68F3B : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   50/   68F3E :                     PCMINS_ASTRAL_26_s:
(1)   50/   68F3E :                             binclude "sound/instr/smpl/astral/26.wav",$2C
(1)   50/   6A548 :                     PCMINS_ASTRAL_26_e:
(1)   51/   6A548 :                     
(1)   52/   6A548 :                     ;   	gSmplData PcmIns_PKick,"sound/instr/smpl/wegot_kick.wav",0
(1)   53/   6A548 :                     ;  	gSmplData PcmIns_Piano,"sound/instr/smpl/piano.wav",0
(1)   54/   6A548 :                     ;   	gSmplData PcmIns_PTom,"sound/instr/smpl/sauron_tom.wav",0
(1)   55/   6A548 :                     ;  	gSmplData PcmIns_NadieL,"sound/instr/smpl/nadie_l.wav",0
(1)   56/   6A548 :                     ;  	gSmplData PcmIns_NadieR,"sound/instr/smpl/nadie_r.wav",0
(1)   57/   6A548 :                     ;  	gSmplData PcmIns_MoveMe_Hit,"sound/instr/smpl/moveme_hit.wav",0
(1)   58/   6A548 :                     ;   	gSmplData PcmIns_Kick,"sound/instr/smpl/kick_moveme.wav",0
(1)   59/   6A548 :                     ;   	gSmplData PcmIns_Snare,"sound/instr/smpl/snare_moveme.wav",0
(1)   60/   6A548 :                     ;   	gSmplData PcmIns_MoveMe_BrassL,"sound/instr/smpl/brass_move_l.wav",6478
(1)   61/   6A548 :                     ;   	gSmplData PcmIns_MoveMe_BrassR,"sound/instr/smpl/brass_move_r.wav",6478
(1)   62/   6A548 :                     
(1)   63/   6A548 :                     ;  	gSmplData PcmIns_test8,"sound/instr/smpl/test_8.wav",0
(1)   64/   6A548 :                     
     329/   6A548 :                     .here:
     330/   6A548 : (MACRO)              		erreport "SUB-CPU DATA",.here,$80000
     331/   56548 :                     		dephase
     332/   56548 :                     		phase MCD_SUBDATA+(.here-$20000)
     333/   56548 :                     		align $800
     334/   56800 :                     MCD_SUBDATA_E:
     336/   56800 :                     
     337/   56800 :                     ; ====================================================================
     338/   56800 :                     ; ----------------------------------------------------------------
     339/   56800 :                     ; SH2 code sent to SDRAM area
     340/   56800 :                     ; ----------------------------------------------------------------
     341/   56800 :                     
     343/   56800 :                     		align $800
     347/   56800 :                     MARS_RAMCODE:
     349/   56800 :                     		include "system/mars/code.asm"
(1)    1/   56800 :                     ; ====================================================================
(1)    2/   56800 :                     ; ----------------------------------------------------------------
(1)    3/   56800 :                     ; MARS SH2 SDRAM section, shared for both SH2 CPUs
(1)    4/   56800 :                     ;
(1)    5/   56800 :                     ; comm port usage:
(1)    6/   56800 :                     ; comm0-comm7  | FREE to USE, comm2 and comm4 will get
(1)    7/   56800 :                     ;              | overwritten on error
(1)    8/   56800 :                     ; comm8-comm11 | Used by Z80 for the PWM table transfer
(1)    9/   56800 :                     ; comm12       | Master CPU control
(1)   10/   56800 :                     ; comm14       | Slave CPU control
(1)   11/   56800 :                     ; ----------------------------------------------------------------
(1)   12/   56800 :                     
(1)   13/ 6000000 :                     		phase CS3	; Now we are at SDRAM
(1)   14/ 6000000 :                     		cpu SH7600	; Should be SH7095 but this CPU mode works.
(1)   15/ 6000000 :                     
(1)   16/ 6000000 :                     ; ====================================================================
(1)   17/ 6000000 :                     ; ----------------------------------------------------------------
(1)   18/ 6000000 :                     ; Macros
(1)   19/ 6000000 :                     ; ----------------------------------------------------------------
(1)   20/ 6000000 :                     
(1)   21/ 6000000 :                     cpu_me macro color
(1)   22/ 6000000 :                     	if MARSCD=0	; <-- Doesn't work on FUSION
(1)   23/ 6000000 :                     		mov	#color,r1
(1)   24/ 6000000 :                     		mov	#_vdpreg,r2
(1)   25/ 6000000 :                     		mov	#_vdpreg+bitmapmd,r3
(1)   26/ 6000000 :                     .hblk:		mov.b	@(vdpsts,r2),r0
(1)   27/ 6000000 :                     		tst	#HBLK,r0
(1)   28/ 6000000 :                     		bt	.hblk
(1)   29/ 6000000 :                     		mov.b	r1,@r3
(1)   30/ 6000000 :                     		nop
(1)   31/ 6000000 :                     	endif
(1)   32/ 6000000 :                     	endm
(1)   33/ 6000000 :                     
(1)   34/ 6000000 :                     ; ====================================================================
(1)   35/ 6000000 :                     ; ----------------------------------------------------------------
(1)   36/ 6000000 :                     ; Settings
(1)   37/ 6000000 :                     ; ----------------------------------------------------------------
(1)   38/ 6000000 :                     
(1)   39/ 6000000 : =$0                  SH2_DEBUG	equ 0				; Set to 1 too see if CPUs are active using comm's 0 and 1
(1)   40/ 6000000 : =$C0000800           STACK_MSTR	equ $C0000800			; Master's STACK point (OLD: CS3|$40000)
(1)   41/ 6000000 : =$C0000800           STACK_SLV	equ $C0000800			; Slave's STACK point (OLD: CS3|$3F800)
(1)   42/ 6000000 :                     
(1)   43/ 6000000 :                     ; ====================================================================
(1)   44/ 6000000 :                     ; ----------------------------------------------------------------
(1)   45/ 6000000 :                     ; MASTER CPU VECTOR LIST (vbr)
(1)   46/ 6000000 :                     ; ----------------------------------------------------------------
(1)   47/ 6000000 :                     
(1)   48/ 6000000 :                     		align 4
(1)   49/ 6000000 :                     SH2_Master:
(1)   50/ 6000000 : 0600 06F8 C000      		dc.l SH2_M_Entry,STACK_MSTR	; Power PC, Stack
          6000006 : 0800             
(1)   51/ 6000008 : 0600 06F8 C000      		dc.l SH2_M_Entry,STACK_MSTR	; Reset PC, Stack
          600000E : 0800             
(1)   52/ 6000010 : 0600 0324           		dc.l SH2_M_ErrIllg		; Illegal instruction
(1)   53/ 6000014 : 0000 0000           		dc.l 0				; reserved
(1)   54/ 6000018 : 0600 0328           		dc.l SH2_M_ErrInvl		; Invalid slot instruction
(1)   55/ 600001C : 2010 0400           		dc.l $20100400			; reserved
(1)   56/ 6000020 : 2010 0420           		dc.l $20100420			; reserved
(1)   57/ 6000024 : 0600 032C           		dc.l SH2_M_ErrAddr		; CPU address error
(1)   58/ 6000028 : 0600 0330           		dc.l SH2_M_ErrDma		; DMA address error
(1)   59/ 600002C : 0600 0334           		dc.l SH2_M_ErrNmi		; NMI vector
(1)   60/ 6000030 : 0600 0338           		dc.l SH2_M_ErrUser		; User break vector
(1)   61/ 6000034 : 0000 0000 0000      		dc.l 0,0,0,0,0,0,0,0,0		; reserved
          600003A : 0000 0000 0000 
          6000040 : 0000 0000 0000 
          6000046 : 0000 0000 0000 
          600004C : 0000 0000 0000 
          6000052 : 0000 0000 0000    
(1)   62/ 6000058 : 0000 0000 0000      		dc.l 0,0,0,0,0,0,0,0,0
          600005E : 0000 0000 0000 
          6000064 : 0000 0000 0000 
          600006A : 0000 0000 0000 
          6000070 : 0000 0000 0000 
          6000076 : 0000 0000 0000    
(1)   63/ 600007C : 0000 0000           		dc.l 0
(1)   64/ 6000080 : 0600 0320           		dc.l SH2_M_Error		; Trap user vectors
(1)   65/ 6000084 : 0600 0320           		dc.l SH2_M_Error
(1)   66/ 6000088 : 0600 0320           		dc.l SH2_M_Error
(1)   67/ 600008C : 0600 0320           		dc.l SH2_M_Error
(1)   68/ 6000090 : 0600 0320           		dc.l SH2_M_Error
(1)   69/ 6000094 : 0600 0320           		dc.l SH2_M_Error
(1)   70/ 6000098 : 0600 0320           		dc.l SH2_M_Error
(1)   71/ 600009C : 0600 0320           		dc.l SH2_M_Error
(1)   72/ 60000A0 : 0600 0320           		dc.l SH2_M_Error
(1)   73/ 60000A4 : 0600 0320           		dc.l SH2_M_Error
(1)   74/ 60000A8 : 0600 0320           		dc.l SH2_M_Error
(1)   75/ 60000AC : 0600 0320           		dc.l SH2_M_Error
(1)   76/ 60000B0 : 0600 0320           		dc.l SH2_M_Error
(1)   77/ 60000B4 : 0600 0320           		dc.l SH2_M_Error
(1)   78/ 60000B8 : 0600 0320           		dc.l SH2_M_Error
(1)   79/ 60000BC : 0600 0320           		dc.l SH2_M_Error
(1)   80/ 60000C0 : 0600 0320           		dc.l SH2_M_Error
(1)   81/ 60000C4 : 0600 0320           		dc.l SH2_M_Error
(1)   82/ 60000C8 : 0600 0320           		dc.l SH2_M_Error
(1)   83/ 60000CC : 0600 0320           		dc.l SH2_M_Error
(1)   84/ 60000D0 : 0600 0320           		dc.l SH2_M_Error
(1)   85/ 60000D4 : 0600 0320           		dc.l SH2_M_Error
(1)   86/ 60000D8 : 0600 0320           		dc.l SH2_M_Error
(1)   87/ 60000DC : 0600 0320           		dc.l SH2_M_Error
(1)   88/ 60000E0 : 0600 0320           		dc.l SH2_M_Error
(1)   89/ 60000E4 : 0600 0320           		dc.l SH2_M_Error
(1)   90/ 60000E8 : 0600 0320           		dc.l SH2_M_Error
(1)   91/ 60000EC : 0600 0320           		dc.l SH2_M_Error
(1)   92/ 60000F0 : 0600 0320           		dc.l SH2_M_Error
(1)   93/ 60000F4 : 0600 0320           		dc.l SH2_M_Error
(1)   94/ 60000F8 : 0600 0320           		dc.l SH2_M_Error
(1)   95/ 60000FC : 0600 0320           		dc.l SH2_M_Error
(1)   96/ 6000100 : 0600 0250            		dc.l master_irq		; Level 1 IRQ
(1)   97/ 6000104 : 0600 0250           		dc.l master_irq		; Level 2 & 3 IRQ
(1)   98/ 6000108 : 0600 0250           		dc.l master_irq		; Level 4 & 5 IRQ
(1)   99/ 600010C : 0600 0250           		dc.l master_irq		; Level 6 & 7 IRQ: PWM interupt
(1)  100/ 6000110 : 0600 0250           		dc.l master_irq		; Level 8 & 9 IRQ: Command interupt
(1)  101/ 6000114 : 0600 0250           		dc.l master_irq		; Level 10 & 11 IRQ: H Blank interupt
(1)  102/ 6000118 : 0600 0250           		dc.l master_irq		; Level 12 & 13 IRQ: V Blank interupt
(1)  103/ 600011C : 0600 0250           		dc.l master_irq		; Level 14 & 15 IRQ: Reset Button
(1)  104/ 6000120 :                     	; Extra ON-chip interrupts (vbr+$120)
(1)  105/ 6000120 : 0600 0250           		dc.l master_irq		; Watchdog (custom)
(1)  106/ 6000124 : 0600 0250           		dc.l master_irq		; DMA
(1)  107/ 6000128 :                     
(1)  108/ 6000128 :                     ; ====================================================================
(1)  109/ 6000128 :                     ; ----------------------------------------------------------------
(1)  110/ 6000128 :                     ; SLAVE CPU VECTOR LIST (vbr)
(1)  111/ 6000128 :                     ; ----------------------------------------------------------------
(1)  112/ 6000128 :                     
(1)  113/ 6000128 :                     		align 4
(1)  114/ 6000128 :                     SH2_Slave:
(1)  115/ 6000128 : 0600 0AAC C000      		dc.l SH2_S_Entry,STACK_SLV	; Cold PC,SP
          600012E : 0800             
(1)  116/ 6000130 : 0600 0AAC C000      		dc.l SH2_S_Entry,STACK_SLV	; Manual PC,SP
          6000136 : 0800             
(1)  117/ 6000138 : 0600 0350           		dc.l SH2_S_ErrIllg		; Illegal instruction
(1)  118/ 600013C : 0000 0000           		dc.l 0				; reserved
(1)  119/ 6000140 : 0600 0354           		dc.l SH2_S_ErrInvl		; Invalid slot instruction
(1)  120/ 6000144 : 2010 0400           		dc.l $20100400			; reserved
(1)  121/ 6000148 : 2010 0420           		dc.l $20100420			; reserved
(1)  122/ 600014C : 0600 0358           		dc.l SH2_S_ErrAddr		; CPU address error
(1)  123/ 6000150 : 0600 035C           		dc.l SH2_S_ErrDma		; DMA address error
(1)  124/ 6000154 : 0600 0360           		dc.l SH2_S_ErrNmi		; NMI vector
(1)  125/ 6000158 : 0600 0364           		dc.l SH2_S_ErrUser		; User break vector
(1)  126/ 600015C : 0000 0000 0000      		dc.l 0,0,0,0,0,0,0,0,0		; reserved
          6000162 : 0000 0000 0000 
          6000168 : 0000 0000 0000 
          600016E : 0000 0000 0000 
          6000174 : 0000 0000 0000 
          600017A : 0000 0000 0000    
(1)  127/ 6000180 : 0000 0000 0000      		dc.l 0,0,0,0,0,0,0,0,0
          6000186 : 0000 0000 0000 
          600018C : 0000 0000 0000 
          6000192 : 0000 0000 0000 
          6000198 : 0000 0000 0000 
          600019E : 0000 0000 0000    
(1)  128/ 60001A4 : 0000 0000           		dc.l 0
(1)  129/ 60001A8 : 0600 034C           		dc.l SH2_S_Error		; Trap user vectors
(1)  130/ 60001AC : 0600 034C           		dc.l SH2_S_Error
(1)  131/ 60001B0 : 0600 034C           		dc.l SH2_S_Error
(1)  132/ 60001B4 : 0600 034C           		dc.l SH2_S_Error
(1)  133/ 60001B8 : 0600 034C           		dc.l SH2_S_Error
(1)  134/ 60001BC : 0600 034C           		dc.l SH2_S_Error
(1)  135/ 60001C0 : 0600 034C           		dc.l SH2_S_Error
(1)  136/ 60001C4 : 0600 034C           		dc.l SH2_S_Error
(1)  137/ 60001C8 : 0600 034C           		dc.l SH2_S_Error
(1)  138/ 60001CC : 0600 034C           		dc.l SH2_S_Error
(1)  139/ 60001D0 : 0600 034C           		dc.l SH2_S_Error
(1)  140/ 60001D4 : 0600 034C           		dc.l SH2_S_Error
(1)  141/ 60001D8 : 0600 034C           		dc.l SH2_S_Error
(1)  142/ 60001DC : 0600 034C           		dc.l SH2_S_Error
(1)  143/ 60001E0 : 0600 034C           		dc.l SH2_S_Error
(1)  144/ 60001E4 : 0600 034C           		dc.l SH2_S_Error
(1)  145/ 60001E8 : 0600 034C           		dc.l SH2_S_Error
(1)  146/ 60001EC : 0600 034C           		dc.l SH2_S_Error
(1)  147/ 60001F0 : 0600 034C           		dc.l SH2_S_Error
(1)  148/ 60001F4 : 0600 034C           		dc.l SH2_S_Error
(1)  149/ 60001F8 : 0600 034C           		dc.l SH2_S_Error
(1)  150/ 60001FC : 0600 034C           		dc.l SH2_S_Error
(1)  151/ 6000200 : 0600 034C           		dc.l SH2_S_Error
(1)  152/ 6000204 : 0600 034C           		dc.l SH2_S_Error
(1)  153/ 6000208 : 0600 034C           		dc.l SH2_S_Error
(1)  154/ 600020C : 0600 034C           		dc.l SH2_S_Error
(1)  155/ 6000210 : 0600 034C           		dc.l SH2_S_Error
(1)  156/ 6000214 : 0600 034C           		dc.l SH2_S_Error
(1)  157/ 6000218 : 0600 034C           		dc.l SH2_S_Error
(1)  158/ 600021C : 0600 034C           		dc.l SH2_S_Error
(1)  159/ 6000220 : 0600 034C           		dc.l SH2_S_Error
(1)  160/ 6000224 : 0600 034C           		dc.l SH2_S_Error
(1)  161/ 6000228 : 0600 0278            		dc.l slave_irq		; Level 1 IRQ
(1)  162/ 600022C : 0600 0278           		dc.l slave_irq		; Level 2 & 3 IRQ
(1)  163/ 6000230 : 0600 0278           		dc.l slave_irq		; Level 4 & 5 IRQ
(1)  164/ 6000234 : 0600 0278           		dc.l slave_irq		; Level 6 & 7 IRQ: PWM interupt
(1)  165/ 6000238 : 0600 0278           		dc.l slave_irq		; Level 8 & 9 IRQ: Command interupt
(1)  166/ 600023C : 0600 0278           		dc.l slave_irq		; Level 10 & 11 IRQ: H Blank interupt
(1)  167/ 6000240 : 0600 0278           		dc.l slave_irq		; Level 12 & 13 IRQ: V Blank interupt
(1)  168/ 6000244 : 0600 0278           		dc.l slave_irq		; Level 14 & 15 IRQ: Reset Button
(1)  169/ 6000248 :                     	; Extra ON-chip interrupts (vbr+$120)
(1)  170/ 6000248 : 0600 0278           		dc.l slave_irq		; Watchdog
(1)  171/ 600024C : 0600 0278           		dc.l slave_irq		; DMA
(1)  172/ 6000250 :                     
(1)  173/ 6000250 :                     ; ====================================================================
(1)  174/ 6000250 :                     ; ----------------------------------------------------------------
(1)  175/ 6000250 :                     ; IRQ on both SH2's
(1)  176/ 6000250 :                     ;
(1)  177/ 6000250 :                     ; r0-r1 are saved
(1)  178/ 6000250 :                     ; ----------------------------------------------------------------
(1)  179/ 6000250 :                     
(1)  180/ 6000250 :                     ; sr: %xxxxMQIIIIxxST
(1)  181/ 6000250 :                     
(1)  182/ 6000250 :                     		align 4
(1)  183/ 6000250 :                     master_irq:
(1)  184/ 6000250 : 2F06                		mov	r0,@-r15
(1)  185/ 6000252 : 2F16                		mov	r1,@-r15
(1)  186/ 6000254 : 4F22                		sts	pr,@-r15
(1)  187/ 6000256 : 0002                		stc	sr,r0
(1)  188/ 6000258 : 4009                		shlr2	r0
(1)  189/ 600025A : C93C                		and	#$3C,r0
(1)  190/ 600025C : 6103                		mov	r0,r1
(1)  191/ 600025E : E0F0                		mov.b	#$F0,r0		; ** $F0
(1)  192/ 6000260 : 600C                		extu.b	r0,r0
(1)  193/ 6000262 : 400E                		ldc	r0,sr
(1)  194/ 6000264 : C70E                		mova	int_m_list,r0
(1)  195/ 6000266 : 301C                		add	r1,r0
(1)  196/ 6000268 : 6102                		mov	@r0,r1
(1)  197/ 600026A : 410B                		jsr	@r1
(1)  198/ 600026C : 0009                		nop
(1)  199/ 600026E : 4F26                		lds	@r15+,pr
(1)  200/ 6000270 : 61F6                		mov	@r15+,r1
(1)  201/ 6000272 : 60F6                		mov	@r15+,r0
(1)  202/ 6000274 : 002B                		rte
(1)  203/ 6000276 : 0009                		nop
(1)  204/ 6000278 :                     		align 4
(1)  205/ 6000278 :                     
(1)  206/ 6000278 :                     ; ====================================================================
(1)  207/ 6000278 :                     
(1)  208/ 6000278 :                     slave_irq:
(1)  209/ 6000278 : 2F06                		mov	r0,@-r15
(1)  210/ 600027A : 2F16                		mov	r1,@-r15
(1)  211/ 600027C : 4F22                		sts	pr,@-r15
(1)  212/ 600027E : 0002                		stc	sr,r0
(1)  213/ 6000280 : 4009                		shlr2	r0
(1)  214/ 6000282 : C93C                		and	#$3C,r0
(1)  215/ 6000284 : 6103                		mov	r0,r1
(1)  216/ 6000286 : E0F0                		mov.b	#$F0,r0		; ** $F0
(1)  217/ 6000288 : 600C                		extu.b	r0,r0
(1)  218/ 600028A : 400E                		ldc	r0,sr
(1)  219/ 600028C : C714                		mova	int_s_list,r0
(1)  220/ 600028E : 301C                		add	r1,r0
(1)  221/ 6000290 : 6102                		mov	@r0,r1
(1)  222/ 6000292 : 410B                		jsr	@r1
(1)  223/ 6000294 : 0009                		nop
(1)  224/ 6000296 : 4F26                		lds	@r15+,pr
(1)  225/ 6000298 : 61F6                		mov	@r15+,r1
(1)  226/ 600029A : 60F6                		mov	@r15+,r0
(1)  227/ 600029C : 002B                		rte
(1)  228/ 600029E : 0009                		nop
(1)  229/ 60002A0 :                     		align 4
(1)  230/ 60002A0 :                     
(1)  231/ 60002A0 :                     ; ====================================================================
(1)  232/ 60002A0 :                     ; ------------------------------------------------
(1)  233/ 60002A0 :                     ; irq list
(1)  234/ 60002A0 :                     ; ------------------------------------------------
(1)  235/ 60002A0 :                     
(1)  236/ 60002A0 :                     		align 4
(1)  237/ 60002A0 :                     
(1)  238/ 60002A0 :                     ;				  		  IRQ Level:
(1)  239/ 60002A0 :                     int_m_list:
(1)  240/ 60002A0 : 0600 0380           		dc.l m_irq_bad			; 0
(1)  241/ 60002A4 : 0600 0380           		dc.l m_irq_bad			; 1
(1)  242/ 60002A8 : 0600 0380           		dc.l m_irq_bad			; 2
(1)  243/ 60002AC : 0600 0398           		dc.l m_irq_wdg			; 3 Watchdog
(1)  244/ 60002B0 : 0600 0380           		dc.l m_irq_bad			; 4
(1)  245/ 60002B4 : 0600 03B0           		dc.l m_irq_dma			; 5 DMA exit
(1)  246/ 60002B8 : 0600 03D4           		dc.l m_irq_pwm			; 6
(1)  247/ 60002BC : 0600 03D4           		dc.l m_irq_pwm			; 7
(1)  248/ 60002C0 : 0600 03E4           		dc.l m_irq_cmd			; 8
(1)  249/ 60002C4 : 0600 03E4           		dc.l m_irq_cmd			; 9
(1)  250/ 60002C8 : 0600 0438           		dc.l m_irq_h			; A
(1)  251/ 60002CC : 0600 0438           		dc.l m_irq_h			; B
(1)  252/ 60002D0 : 0600 0448           		dc.l m_irq_v			; C
(1)  253/ 60002D4 : 0600 0448           		dc.l m_irq_v			; D
(1)  254/ 60002D8 : 0600 0458           		dc.l m_irq_vres			; E
(1)  255/ 60002DC : 0600 0458           		dc.l m_irq_vres			; F
(1)  256/ 60002E0 :                     int_s_list:
(1)  257/ 60002E0 : 0600 04D0           		dc.l s_irq_bad			; 0
(1)  258/ 60002E4 : 0600 04D0           		dc.l s_irq_bad			; 1
(1)  259/ 60002E8 : 0600 04D0           		dc.l s_irq_bad			; 2
(1)  260/ 60002EC : 0600 04D4           		dc.l s_irq_wdg			; 3 Watchdog
(1)  261/ 60002F0 : 0600 04D0           		dc.l s_irq_bad			; 4
(1)  262/ 60002F4 : 0600 04E0           		dc.l s_irq_dma			; 5 DMA exit
(1)  263/ 60002F8 : C000 0000           		dc.l s_irq_pwm|$C0000000	; 6
(1)  264/ 60002FC : C000 0000           		dc.l s_irq_pwm|$C0000000	; 7
(1)  265/ 6000300 : 0600 04F0           		dc.l s_irq_cmd			; 8
(1)  266/ 6000304 : 0600 04F0           		dc.l s_irq_cmd			; 9
(1)  267/ 6000308 : 0600 0676           		dc.l s_irq_h			; A
(1)  268/ 600030C : 0600 0676           		dc.l s_irq_h			; B
(1)  269/ 6000310 : 0600 0688           		dc.l s_irq_v			; C
(1)  270/ 6000314 : 0600 0688           		dc.l s_irq_v			; D
(1)  271/ 6000318 : 0600 0698           		dc.l s_irq_vres			; E
(1)  272/ 600031C : 0600 0698           		dc.l s_irq_vres			; F
(1)  273/ 6000320 :                     
(1)  274/ 6000320 :                     ; ====================================================================
(1)  275/ 6000320 :                     ; ----------------------------------------------------------------
(1)  276/ 6000320 :                     ; Error handler
(1)  277/ 6000320 :                     ; ----------------------------------------------------------------
(1)  278/ 6000320 :                     
(1)  279/ 6000320 :                     ; *** Only works on HARDWARE ***
(1)  280/ 6000320 :                     ;
(1)  281/ 6000320 :                     ; comm2: (CPU)(CODE)
(1)  282/ 6000320 :                     ; comm4: PC counter
(1)  283/ 6000320 :                     ;
(1)  284/ 6000320 :                     ;  CPU | The CPU who got the error:
(1)  285/ 6000320 :                     ;        $00 - Master
(1)  286/ 6000320 :                     ;        $01 - Slave
(1)  287/ 6000320 :                     ;
(1)  288/ 6000320 :                     ; CODE | Error type:
(1)  289/ 6000320 :                     ;	 $00: Unknown error
(1)  290/ 6000320 :                     ;	 $01: Illegal instruction
(1)  291/ 6000320 :                     ;	 $02: Invalid slot instruction
(1)  292/ 6000320 :                     ;	 $03: Address error
(1)  293/ 6000320 :                     ;	 $04: DMA error
(1)  294/ 6000320 :                     ;	 $05: NMI vector
(1)  295/ 6000320 :                     ;	 $06: User break
(1)  296/ 6000320 :                     
(1)  297/ 6000320 :                     SH2_M_Error:
(1)  298/ 6000320 : A00C                		bra	SH2_M_ErrCode
(1)  299/ 6000322 : E000                		mov	#0,r0
(1)  300/ 6000324 :                     SH2_M_ErrIllg:
(1)  301/ 6000324 : A00A                		bra	SH2_M_ErrCode
(1)  302/ 6000326 : E001                		mov	#1,r0
(1)  303/ 6000328 :                     SH2_M_ErrInvl:
(1)  304/ 6000328 : A008                		bra	SH2_M_ErrCode
(1)  305/ 600032A : E002                		mov	#2,r0
(1)  306/ 600032C :                     SH2_M_ErrAddr:
(1)  307/ 600032C : A006                		bra	SH2_M_ErrCode
(1)  308/ 600032E : E003                		mov	#3,r0
(1)  309/ 6000330 :                     SH2_M_ErrDma:
(1)  310/ 6000330 : A004                		bra	SH2_M_ErrCode
(1)  311/ 6000332 : E004                		mov	#4,r0
(1)  312/ 6000334 :                     SH2_M_ErrNmi:
(1)  313/ 6000334 : A002                		bra	SH2_M_ErrCode
(1)  314/ 6000336 : E005                		mov	#5,r0
(1)  315/ 6000338 :                     SH2_M_ErrUser:
(1)  316/ 6000338 : A000                		bra	SH2_M_ErrCode
(1)  317/ 600033A : E006                		mov	#6,r0
(1)  318/ 600033C :                     ; r0 - value
(1)  319/ 600033C :                     SH2_M_ErrCode:
(1)  320/ 600033C : D10E                		mov	#_sysreg+comm2,r1
(1)  321/ 600033E : 2101                		mov.w	r0,@r1
(1)  322/ 6000340 : D10E                		mov	#_sysreg+comm4,r1
(1)  323/ 6000342 : 60F2                		mov	@r15,r0
(1)  324/ 6000344 : 2102                		mov	r0,@r1
(1)  325/ 6000346 : AFFE                		bra	*
(1)  326/ 6000348 : 0009                		nop
(1)  327/ 600034A :                     		align 4
(1)  328/ 600034C :                     
(1)  329/ 600034C :                     ; ----------------------------------------------------
(1)  330/ 600034C :                     
(1)  331/ 600034C :                     SH2_S_Error:
(1)  332/ 600034C : A00C                		bra	SH2_S_ErrCode
(1)  333/ 600034E : E000                		mov	#0,r0
(1)  334/ 6000350 :                     SH2_S_ErrIllg:
(1)  335/ 6000350 : A00A                		bra	SH2_S_ErrCode
(1)  336/ 6000352 : E0FF                		mov	#-1,r0
(1)  337/ 6000354 :                     SH2_S_ErrInvl:
(1)  338/ 6000354 : A008                		bra	SH2_S_ErrCode
(1)  339/ 6000356 : E0FE                		mov	#-2,r0
(1)  340/ 6000358 :                     SH2_S_ErrAddr:
(1)  341/ 6000358 : A006                		bra	SH2_S_ErrCode
(1)  342/ 600035A : E0FD                		mov	#-3,r0
(1)  343/ 600035C :                     SH2_S_ErrDma:
(1)  344/ 600035C : A004                		bra	SH2_S_ErrCode
(1)  345/ 600035E : E0FC                		mov	#-4,r0
(1)  346/ 6000360 :                     SH2_S_ErrNmi:
(1)  347/ 6000360 : A002                		bra	SH2_S_ErrCode
(1)  348/ 6000362 : E0FB                		mov	#-5,r0
(1)  349/ 6000364 :                     SH2_S_ErrUser:
(1)  350/ 6000364 : A000                		bra	SH2_S_ErrCode
(1)  351/ 6000366 : E0FA                		mov	#-6,r0
(1)  352/ 6000368 :                     ; r0 - value
(1)  353/ 6000368 :                     SH2_S_ErrCode:
(1)  354/ 6000368 : D103                		mov	#_sysreg+comm2,r1
(1)  355/ 600036A : 2101                		mov.w	r0,@r1
(1)  356/ 600036C : D103                		mov	#_sysreg+comm4,r1
(1)  357/ 600036E : 60F2                		mov	@r15,r0
(1)  358/ 6000370 : 2102                		mov	r0,@r1
(1)  359/ 6000372 : AFFE                		bra	*
(1)  360/ 6000374 : 0009                		nop
(1)  361/ 6000376 :                     		align 4
(1)  362/ 6000378 : 2000 4022 2000      		ltorg
          600037E : 4024             
(1)  363/ 6000380 :                     
(1)  364/ 6000380 :                     ; ====================================================================
(1)  365/ 6000380 :                     ; ----------------------------------------------------------------
(1)  366/ 6000380 :                     ; Interrupts
(1)  367/ 6000380 :                     ; ----------------------------------------------------------------
(1)  368/ 6000380 :                     
(1)  369/ 6000380 :                     ; =================================================================
(1)  370/ 6000380 :                     ; ------------------------------------------------
(1)  371/ 6000380 :                     ; Master | Unused interrupt
(1)  372/ 6000380 :                     ; ------------------------------------------------
(1)  373/ 6000380 :                     
(1)  374/ 6000380 :                     		align 4
(1)  375/ 6000380 :                     m_irq_bad:
(1)  376/ 6000380 : 91A2                		mov	#_FRT,r1
(1)  377/ 6000382 : 8417                		mov.b	@(7,r1),r0
(1)  378/ 6000384 : CA02                		xor	#2,r0
(1)  379/ 6000386 : 8017                		mov.b	r0,@(7,r1)
(1)  380/ 6000388 : 0009                		nop
(1)  381/ 600038A : 0009                		nop
(1)  382/ 600038C : 0009                		nop
(1)  383/ 600038E : 0009                		nop
(1)  384/ 6000390 : 0009                		nop
(1)  385/ 6000392 : 000B                		rts
(1)  386/ 6000394 : 0009                		nop
(1)  387/ 6000396 :                     		align 4
(1)  388/ 6000398 :                     
(1)  389/ 6000398 :                     ; =================================================================
(1)  390/ 6000398 :                     ; ------------------------------------------------
(1)  391/ 6000398 :                     ; Master | Watchdog
(1)  392/ 6000398 :                     ; ------------------------------------------------
(1)  393/ 6000398 :                     
(1)  394/ 6000398 :                     m_irq_wdg:
(1)  395/ 6000398 : 9196                		mov	#_FRT,r1
(1)  396/ 600039A : 8417                		mov.b	@(7,r1),r0
(1)  397/ 600039C : CA02                		xor	#2,r0
(1)  398/ 600039E : 8017                		mov.b	r0,@(7,r1)
(1)  399/ 60003A0 : 0009                		nop
(1)  400/ 60003A2 : 0009                		nop
(1)  401/ 60003A4 : 0009                		nop
(1)  402/ 60003A6 : 0009                		nop
(1)  403/ 60003A8 : 0009                		nop
(1)  404/ 60003AA : 000B                		rts
(1)  405/ 60003AC : 0009                		nop
(1)  406/ 60003AE :                     		align 4
(1)  407/ 60003B0 :                     
(1)  408/ 60003B0 :                     ; =================================================================
(1)  409/ 60003B0 :                     ; ------------------------------------------------
(1)  410/ 60003B0 :                     ; Master | DMA Exit
(1)  411/ 60003B0 :                     ; ------------------------------------------------
(1)  412/ 60003B0 :                     
(1)  413/ 60003B0 :                     m_irq_dma:
(1)  414/ 60003B0 : 918A                		mov	#_FRT,r1
(1)  415/ 60003B2 : 8417                		mov.b	@(7,r1),r0
(1)  416/ 60003B4 : CA02                		xor	#2,r0
(1)  417/ 60003B6 : 8017                		mov.b	r0,@(7,r1)
(1)  418/ 60003B8 : E18C                		mov	#_DMACHANNEL0,r1
(1)  419/ 60003BA : 6012                .wait_dma:	mov	@r1,r0				; <-- Fail-safe
(1)  420/ 60003BC : C802                		tst	#%10,r0
(1)  421/ 60003BE : 89FC                		bt	.wait_dma
(1)  422/ 60003C0 : 6012                		mov	@r1,r0				; Dummy read
(1)  423/ 60003C2 : 9082                		mov	#%0100010011100000,r0
(1)  424/ 60003C4 : 2102                		mov	r0,@r1				; Turn this DMA off.
(1)  425/ 60003C6 : D134                		mov	#_sysreg+comm12,r1
(1)  426/ 60003C8 : 6010                		mov.b	@r1,r0
(1)  427/ 60003CA : C9BF                		and	#%10111111,r0			; Report EXIT status
(1)  428/ 60003CC : 2100                		mov.b	r0,@r1
(1)  429/ 60003CE : 000B                		rts
(1)  430/ 60003D0 : 0009                		nop
(1)  431/ 60003D2 :                     		align 4
(1)  432/ 60003D4 :                     
(1)  433/ 60003D4 :                     ; =================================================================
(1)  434/ 60003D4 :                     ; ------------------------------------------------
(1)  435/ 60003D4 :                     ; Master | PWM Interrupt
(1)  436/ 60003D4 :                     ; ------------------------------------------------
(1)  437/ 60003D4 :                     
(1)  438/ 60003D4 :                     m_irq_pwm:
(1)  439/ 60003D4 : 9178                		mov	#_FRT,r1
(1)  440/ 60003D6 : 8417                		mov.b	@(7,r1),r0
(1)  441/ 60003D8 : CA02                		xor	#2,r0
(1)  442/ 60003DA : 8017                		mov.b	r0,@(7,r1)
(1)  443/ 60003DC : D12F                		mov	#_sysreg+pwmintclr,r1
(1)  444/ 60003DE : 2101                		mov.w	r0,@r1
(1)  445/ 60003E0 : 000B                		rts
(1)  446/ 60003E2 : 0009                		nop
(1)  447/ 60003E4 :                     		align 4
(1)  448/ 60003E4 :                     
(1)  449/ 60003E4 :                     ; =================================================================
(1)  450/ 60003E4 :                     ; ------------------------------------------------
(1)  451/ 60003E4 :                     ; Master | CMD Interrupt
(1)  452/ 60003E4 :                     ; ------------------------------------------------
(1)  453/ 60003E4 :                     
(1)  454/ 60003E4 :                     m_irq_cmd:
(1)  455/ 60003E4 : 9170                		mov	#_FRT,r1
(1)  456/ 60003E6 : 8417                		mov.b	@(7,r1),r0
(1)  457/ 60003E8 : CA02                		xor	#2,r0
(1)  458/ 60003EA : 8017                		mov.b	r0,@(7,r1)
(1)  459/ 60003EC : D12C                		mov	#_sysreg+cmdintclr,r1		; Clear CMD interrupt
(1)  460/ 60003EE : 2101                		mov.w	r0,@r1
(1)  461/ 60003F0 : 2F26                		mov	r2,@-r15
(1)  462/ 60003F2 : 2F36                		mov	r3,@-r15
(1)  463/ 60003F4 : 2F46                		mov	r4,@-r15
(1)  464/ 60003F6 : D42B                		mov	#_sysreg,r4			; r4 - sysreg base
(1)  465/ 60003F8 : E380                		mov	#_DMASOURCE0,r3			; r3 - DMA base register
(1)  466/ 60003FA : D227                		mov	#_sysreg+comm12,r2		; r2 - comm to write the signal
(1)  467/ 60003FC : 9065                		mov	#%0100010011100000,r0		; Transfer mode + DMA enable OFF
(1)  468/ 60003FE : 1303                		mov	r0,@($C,r3)
(1)  469/ 6000400 : 6020                		mov.b	@r2,r0
(1)  470/ 6000402 : C90F                		and	#%1111,r0
(1)  471/ 6000404 : 2008                		tst	r0,r0
(1)  472/ 6000406 : 8903                		bt	.dreq_ram			; CMD mode $00
(1)  473/ 6000408 : 5043                		mov	@(dreqdest,r4),r0
(1)  474/ 600040A : D127                		mov	#CS3,r1
(1)  475/ 600040C : A001                		bra	.dreq_setdest
(1)  476/ 600040E : 201B                		or	r1,r0
(1)  477/ 6000410 :                     .dreq_ram:
(1)  478/ 6000410 : C603                		mov	@(marsGbl_DreqWrite,gbr),r0	; Pick current WRITE buffer
(1)  479/ 6000412 :                     .dreq_setdest:
(1)  480/ 6000412 : D126                		mov	#TH,r1				; as Cache-thru
(1)  481/ 6000414 : 201B                		or	r1,r0
(1)  482/ 6000416 : 1301                		mov	r0,@(4,r3)			; Set Destination
(1)  483/ 6000418 : 8548                		mov.w	@(dreqlen,r4),r0		; NOTE: NO size check
(1)  484/ 600041A : 600D                		extu.w	r0,r0
(1)  485/ 600041C : 1302                		mov	r0,@(8,r3)			; Length set by 68k
(1)  486/ 600041E : D124                		mov	#_sysreg+dreqfifo,r1
(1)  487/ 6000420 : 2312                		mov	r1,@r3				; Source point: DREQ FIFO
(1)  488/ 6000422 : 9053                		mov	#%0100010011100101,r0		; Transfer mode + DMA enable + Use DMA interrupt
(1)  489/ 6000424 :                     ; 		mov	#%0100010011100001,r0		; Transfer mode + DMA enable
(1)  490/ 6000424 : 1303                		mov	r0,@($C,r3)			; Dest:Incr(01) Src:Keep(00) Size:Word(01)
(1)  491/ 6000426 : 6020                		mov.b	@r2,r0
(1)  492/ 6000428 : CB40                		or	#%01000000,r0			; Report ENTER status
(1)  493/ 600042A : 2200                		mov.b	r0,@r2
(1)  494/ 600042C :                     
(1)  495/ 600042C :                     	; ********************************
(1)  496/ 600042C :                     	; Wait here if not using
(1)  497/ 600042C :                     	; DMA interrupt
(1)  498/ 600042C :                     	; ********************************
(1)  499/ 600042C :                     ; 		mov	#_DMACHANNEL0,r1
(1)  500/ 600042C :                     ; .wait_dma:
(1)  501/ 600042C :                     ; 		mov	@r1,r0
(1)  502/ 600042C :                     ; 		tst	#%10,r0
(1)  503/ 600042C :                     ; 		bt	.wait_dma
(1)  504/ 600042C :                     ; 		mov	@r1,r0				; Dummy read
(1)  505/ 600042C :                     ; 		mov	#%0100010011100000,r0
(1)  506/ 600042C :                     ; 		mov	r0,@r1
(1)  507/ 600042C :                     ; 		mov	#_sysreg+comm12,r1
(1)  508/ 600042C :                     ; 		mov.b	@r1,r0
(1)  509/ 600042C :                     ; 		and	#%10111111,r0			; Report EXIT status
(1)  510/ 600042C :                     ; 		mov.b	r0,@r1
(1)  511/ 600042C :                     	; ********************************
(1)  512/ 600042C :                     
(1)  513/ 600042C : 64F6                		mov	@r15+,r4
(1)  514/ 600042E : 63F6                		mov	@r15+,r3
(1)  515/ 6000430 : 62F6                		mov	@r15+,r2
(1)  516/ 6000432 : 000B                		rts
(1)  517/ 6000434 : 0009                		nop
(1)  518/ 6000436 :                     		align 4
(1)  519/ 6000438 :                     
(1)  520/ 6000438 :                     ; =================================================================
(1)  521/ 6000438 :                     ; ------------------------------------------------
(1)  522/ 6000438 :                     ; Master | HBlank
(1)  523/ 6000438 :                     ; ------------------------------------------------
(1)  524/ 6000438 :                     
(1)  525/ 6000438 :                     m_irq_h:
(1)  526/ 6000438 : 9146                		mov	#_FRT,r1
(1)  527/ 600043A : 8417                		mov.b	@(7,r1),r0
(1)  528/ 600043C : CA02                		xor	#2,r0
(1)  529/ 600043E : 8017                		mov.b	r0,@(7,r1)
(1)  530/ 6000440 : D11C                		mov	#_sysreg+hintclr,r1
(1)  531/ 6000442 : 2101                		mov.w	r0,@r1
(1)  532/ 6000444 : 000B                		rts
(1)  533/ 6000446 : 0009                		nop
(1)  534/ 6000448 :                     		align 4
(1)  535/ 6000448 :                     
(1)  536/ 6000448 :                     ; =================================================================
(1)  537/ 6000448 :                     ; ------------------------------------------------
(1)  538/ 6000448 :                     ; Master | VBlank
(1)  539/ 6000448 :                     ; ------------------------------------------------
(1)  540/ 6000448 :                     
(1)  541/ 6000448 :                     m_irq_v:
(1)  542/ 6000448 : 913E                		mov	#_FRT,r1
(1)  543/ 600044A : 8417                		mov.b	@(7,r1),r0
(1)  544/ 600044C : CA02                		xor	#2,r0
(1)  545/ 600044E : 8017                		mov.b	r0,@(7,r1)
(1)  546/ 6000450 : D119                		mov	#_sysreg+vintclr,r1
(1)  547/ 6000452 : 2101                		mov.w	r0,@r1
(1)  548/ 6000454 : 000B                		rts
(1)  549/ 6000456 : 0009                		nop
(1)  550/ 6000458 :                     		align 4
(1)  551/ 6000458 :                     
(1)  552/ 6000458 :                     ; =================================================================
(1)  553/ 6000458 :                     ; ------------------------------------------------
(1)  554/ 6000458 :                     ; Master | VRES Interrupt (RESET button)
(1)  555/ 6000458 :                     ; ------------------------------------------------
(1)  556/ 6000458 :                     
(1)  557/ 6000458 :                     m_irq_vres:
(1)  558/ 6000458 : D112                		mov	#_sysreg,r1
(1)  559/ 600045A : 60F3                		mov	r15,r0
(1)  560/ 600045C : 811A                		mov.w	r0,@(vresintclr,r1)
(1)  561/ 600045E : 8513                		mov.w	@(dreqctl,r1),r0
(1)  562/ 6000460 : C801                		tst	#1,r0
(1)  563/ 6000462 : 8B13                		bf	.rv_busy
(1)  564/ 6000464 : E0F0                		mov.b	#$F0,r0			; ** $F0
(1)  565/ 6000466 : 600C                		extu.b	r0,r0
(1)  566/ 6000468 : 400E                		ldc	r0,sr
(1)  567/ 600046A : E000                		mov	#0,r0			; Disable interrupt bits
(1)  568/ 600046C : 2101                		mov.w	r0,@r1
(1)  569/ 600046E : D10A                		mov	#_sysreg+comm12,r1	; Clear our comm
(1)  570/ 6000470 : 2101                		mov.w	r0,@r1
(1)  571/ 6000472 : E1B0                		mov	#_DMAOPERATION,r1	; Quickly cancel DMA's
(1)  572/ 6000474 : 2102                		mov	r0,@r1
(1)  573/ 6000476 : DF11                		mov	#(STACK_MSTR)-8,r15	; Reset Master's STACK
(1)  574/ 6000478 : D011                		mov	#SH2_M_HotStart,r0	; Write return point and status
(1)  575/ 600047A : 2F02                		mov	r0,@r15
(1)  576/ 600047C : 9027                		mov.w   #$F0,r0
(1)  577/ 600047E : 1F01                		mov	r0,@(4,r15)
(1)  578/ 6000480 : D108                		mov	#_sysreg,r1		; Report Master as OK
(1)  579/ 6000482 : D010                		mov	#"M_OK",r0
(1)  580/ 6000484 : 1108                		mov	r0,@(comm0,r1)
(1)  581/ 6000486 : 002B                		rte
(1)  582/ 6000488 : 0009                		nop
(1)  583/ 600048A :                     		align 4
(1)  584/ 600048C :                     .rv_busy:
(1)  585/ 600048C : 911C                		mov	#_FRT,r1
(1)  586/ 600048E : 8417                		mov.b	@(7,r1),r0
(1)  587/ 6000490 : CA02                		xor	#2,r0
(1)  588/ 6000492 : 8017                		mov.b	r0,@(7,r1)
(1)  589/ 6000494 : AFFE                		bra	*
(1)  590/ 6000496 : 0009                		nop
(1)  591/ 6000498 :                     		align 4
(1)  592/ 6000498 : 2000 402C 2000      		ltorg
          600049E : 401C 2000 401A 
          60004A4 : 2000 4000 0600 
          60004AA : 0000 2000 0000 
          60004B0 : 2000 4012 2000 
          60004B6 : 4018 2000 4016 
          60004BC : C000 07F8 0600 
          60004C2 : 078E 4D5F 4F4B 
          60004C8 : FE10 44E0 44E5 
          60004CE : 00F0             
(1)  593/ 60004D0 :                     
(1)  594/ 60004D0 :                     ; =================================================================
(1)  595/ 60004D0 :                     ; ------------------------------------------------
(1)  596/ 60004D0 :                     ; Slave | Unused Interrupt
(1)  597/ 60004D0 :                     ; ------------------------------------------------
(1)  598/ 60004D0 :                     
(1)  599/ 60004D0 :                     		align 4
(1)  600/ 60004D0 :                     s_irq_bad:
(1)  601/ 60004D0 : 000B                		rts
(1)  602/ 60004D2 : 0009                		nop
(1)  603/ 60004D4 :                     		align 4
(1)  604/ 60004D4 :                     
(1)  605/ 60004D4 :                     ; =================================================================
(1)  606/ 60004D4 :                     ; ------------------------------------------------
(1)  607/ 60004D4 :                     ; Slave | Watchdog
(1)  608/ 60004D4 :                     ; ------------------------------------------------
(1)  609/ 60004D4 :                     
(1)  610/ 60004D4 :                     s_irq_wdg:
(1)  611/ 60004D4 : 910A                		mov	#_FRT,r1
(1)  612/ 60004D6 : 8417                		mov.b	@(7,r1),r0
(1)  613/ 60004D8 : CA02                		xor	#2,r0
(1)  614/ 60004DA : 8017                		mov.b	r0,@(7,r1)
(1)  615/ 60004DC : 000B                		rts
(1)  616/ 60004DE : 0009                		nop
(1)  617/ 60004E0 :                     		align 4
(1)  618/ 60004E0 :                     
(1)  619/ 60004E0 :                     ; =================================================================
(1)  620/ 60004E0 :                     ; ------------------------------------------------
(1)  621/ 60004E0 :                     ; Slave | DMA Exit
(1)  622/ 60004E0 :                     ; ------------------------------------------------
(1)  623/ 60004E0 :                     
(1)  624/ 60004E0 :                     		align 4
(1)  625/ 60004E0 :                     s_irq_dma:
(1)  626/ 60004E0 : 9104                		mov	#_FRT,r1
(1)  627/ 60004E2 : 8417                		mov.b	@(7,r1),r0
(1)  628/ 60004E4 : CA02                		xor	#2,r0
(1)  629/ 60004E6 : 8017                		mov.b	r0,@(7,r1)
(1)  630/ 60004E8 : 000B                		rts
(1)  631/ 60004EA : 0009                		nop
(1)  632/ 60004EC :                     		align 4
(1)  633/ 60004EC :                     
(1)  634/ 60004EC :                     ; =================================================================
(1)  635/ 60004EC :                     ; ------------------------------------------------
(1)  636/ 60004EC :                     ; Slave | PWM Interrupt
(1)  637/ 60004EC :                     ; ------------------------------------------------
(1)  638/ 60004EC :                     
(1)  639/ 60004EC :                     ; located on cache/cache_slv.asm
(1)  640/ 60004EC :                     ;
(1)  641/ 60004EC :                     ; s_irq_pwm:
(1)  642/ 60004EC : FE10                		ltorg	; Save literals
(1)  643/ 60004EE :                     
(1)  644/ 60004EE :                     ; =================================================================
(1)  645/ 60004EE :                     ; ------------------------------------------------
(1)  646/ 60004EE :                     ; Slave | CMD Interrupt
(1)  647/ 60004EE :                     ; ------------------------------------------------
(1)  648/ 60004EE :                     
(1)  649/ 60004EE :                     		align 4
(1)  650/ 60004F0 :                     s_irq_cmd:
(1)  651/ 60004F0 : 91BE                		mov	#_FRT,r1
(1)  652/ 60004F2 : 8417                		mov.b	@(7,r1),r0
(1)  653/ 60004F4 : CA02                		xor	#2,r0
(1)  654/ 60004F6 : 8017                		mov.b	r0,@(7,r1)
(1)  655/ 60004F8 : D157                		mov	#_sysreg+cmdintclr,r1	; Clear CMD flag
(1)  656/ 60004FA : 2101                		mov.w	r0,@r1
(1)  657/ 60004FC :                     	; --------------------------------
(1)  658/ 60004FC : 2F26                		mov	r2,@-r15
(1)  659/ 60004FE : 2F36                		mov	r3,@-r15
(1)  660/ 6000500 : 2F46                		mov	r4,@-r15
(1)  661/ 6000502 : 2F56                		mov	r5,@-r15
(1)  662/ 6000504 : 2F66                		mov	r6,@-r15
(1)  663/ 6000506 : 2F76                		mov	r7,@-r15
(1)  664/ 6000508 : 2F86                		mov	r8,@-r15
(1)  665/ 600050A : 4F22                		sts	pr,@-r15
(1)  666/ 600050C : D153                		mov	#_sysreg+comm14,r1
(1)  667/ 600050E : 6010                		mov.b	@r1,r0
(1)  668/ 6000510 : C90F                		and	#%00001111,r0
(1)  669/ 6000512 : 4008                		shll2	r0
(1)  670/ 6000514 : 6103                		mov	r0,r1
(1)  671/ 6000516 : C702                		mova	.scmd_tasks,r0
(1)  672/ 6000518 : 301C                		add	r1,r0
(1)  673/ 600051A : 6102                		mov	@r0,r1
(1)  674/ 600051C : 412B                		jmp	@r1
(1)  675/ 600051E : 0009                		nop
(1)  676/ 6000520 :                     		align 4
(1)  677/ 6000520 :                     
(1)  678/ 6000520 :                     ; --------------------------------
(1)  679/ 6000520 :                     
(1)  680/ 6000520 :                     .scmd_tasks:
(1)  681/ 6000520 : 0600 0530           		dc.l .scmd_task00	; <-- unused
(1)  682/ 6000524 : 0600 0534           		dc.l .scmd_task01
(1)  683/ 6000528 : 0600 0534           		dc.l .scmd_task01
(1)  684/ 600052C : 0600 0534           		dc.l .scmd_task01
(1)  685/ 6000530 :                     
(1)  686/ 6000530 :                     ; --------------------------------
(1)  687/ 6000530 :                     ; Task $00
(1)  688/ 6000530 :                     ; --------------------------------
(1)  689/ 6000530 :                     
(1)  690/ 6000530 :                     .scmd_task00:
(1)  691/ 6000530 : A085                		bra	.exit_scmd
(1)  692/ 6000532 : 0009                		nop
(1)  693/ 6000534 :                     
(1)  694/ 6000534 :                     ; --------------------------------
(1)  695/ 6000534 :                     ; Task $01
(1)  696/ 6000534 :                     ; --------------------------------
(1)  697/ 6000534 :                     
(1)  698/ 6000534 :                     .scmd_task01:
(1)  699/ 6000534 : D14A                		mov	#_sysreg+comm8,r1		; Input
(1)  700/ 6000536 : D24B                		mov	#$C0000000|RAM_Mars_PwmTable,r2	; Output
(1)  701/ 6000538 : D348                		mov	#_sysreg+comm14,r3		; comm
(1)  702/ 600053A : 0009                		nop
(1)  703/ 600053C :                     .wait_1:
(1)  704/ 600053C : 6030                		mov.b	@r3,r0
(1)  705/ 600053E : C9F0                		and	#%11110000,r0
(1)  706/ 6000540 : C880                		tst	#%10000000,r0			; LOCK exit?
(1)  707/ 6000542 : 8908                		bt	.exit_c
(1)  708/ 6000544 : C840                		tst	#%01000000,r0			; Wait PASS
(1)  709/ 6000546 : 89F9                		bt	.wait_1
(1)  710/ 6000548 :                     .copy_1:
(1)  711/ 6000548 : 6012                		mov	@r1,r0				; Copy entire LONG
(1)  712/ 600054A : 2202                		mov	r0,@r2
(1)  713/ 600054C : 7204                		add	#4,r2				; Increment table pos
(1)  714/ 600054E : 6030                		mov.b	@r3,r0
(1)  715/ 6000550 : C9BF                		and	#%10111111,r0
(1)  716/ 6000552 : AFF3                		bra	.wait_1
(1)  717/ 6000554 : 2300                		mov.b	r0,@r3				; Clear PASS bit, Z80 loops
(1)  718/ 6000556 :                     .exit_c:
(1)  719/ 6000556 :                     
(1)  720/ 6000556 :                     ; --------------------------------
(1)  721/ 6000556 :                     ; Process changes
(1)  722/ 6000556 :                     
(1)  723/ 6000556 :                     .proc_pwm:
(1)  724/ 6000556 : D844                		mov	#$C0000000|RAM_Mars_PwmTable,r8	; Input
(1)  725/ 6000558 : D744                		mov	#$C0000000|RAM_Mars_PwmList,r7	; Output
(1)  726/ 600055A : 968A                		mov	#MAX_PWMCHNL,r6
(1)  727/ 600055C :                     .next_chnl:
(1)  728/ 600055C : 6383                		mov	r8,r3				; r3 - current table column
(1)  729/ 600055E : 6030                		mov.b	@r3,r0				; r0: %kfo o-on f-off k-cut
(1)  730/ 6000560 : C91F                		and	#%00011111,r0
(1)  731/ 6000562 : 2008                		tst	r0,r0
(1)  732/ 6000564 : 8966                		bt	.no_chng
(1)  733/ 6000566 :                     .no_keycut:
(1)  734/ 6000566 : C802                		tst	#%00000010,r0
(1)  735/ 6000568 : 8B62                		bf	.is_keycut
(1)  736/ 600056A : C804                		tst	#%00000100,r0
(1)  737/ 600056C : 8B60                		bf	.is_keycut
(1)  738/ 600056E : C801                		tst	#%00000001,r0
(1)  739/ 6000570 : 8960                		bt	.no_chng
(1)  740/ 6000572 : C808                		tst	#%00001000,r0
(1)  741/ 6000574 : 8910                		bt	.no_pitchbnd
(1)  742/ 6000576 :                     
(1)  743/ 6000576 :                     	; copypasted
(1)  744/ 6000576 : 5070                		mov	@(mchnsnd_enbl,r7),r0
(1)  745/ 6000578 : C880                		tst	#$80,r0
(1)  746/ 600057A : 895B                		bt	.no_chng
(1)  747/ 600057C :                     ; 		mov	#0,r0
(1)  748/ 600057C :                     ; 		mov	r0,@(mchnsnd_enbl,r7)
(1)  749/ 600057C : 7308                		add	#8,r3			; Next: Volume and Pitch MSB
(1)  750/ 600057E : 6030                		mov.b	@r3,r0			; r0: %vvvvvvpp
(1)  751/ 6000580 : 6203                		mov	r0,r2			; Save pp-pitch
(1)  752/ 6000582 : C9FC                		and	#%11111100,r0		; first 2 bits lost/ignored
(1)  753/ 6000584 : 1707                		mov	r0,@(mchnsnd_vol,r7)
(1)  754/ 6000586 : 7308                		add	#8,r3			; Next: Pitch LSB
(1)  755/ 6000588 : 6130                		mov.b	@r3,r1			; r0: %pppppppp
(1)  756/ 600058A : 611C                		extu.b	r1,r1
(1)  757/ 600058C : 6023                		mov	r2,r0
(1)  758/ 600058E : C903                		and	#%11,r0
(1)  759/ 6000590 : 4018                		shll8	r0
(1)  760/ 6000592 : 201B                		or	r1,r0
(1)  761/ 6000594 : A04E                		bra	.no_chng
(1)  762/ 6000596 : 1706                		mov	r0,@(mchnsnd_pitch,r7)
(1)  763/ 6000598 :                     
(1)  764/ 6000598 :                     .no_pitchbnd:
(1)  765/ 6000598 : E000                		mov	#0,r0
(1)  766/ 600059A : 1700                		mov	r0,@(mchnsnd_enbl,r7)
(1)  767/ 600059C : 7308                		add	#8,r3			; Next: Volume and Pitch MSB
(1)  768/ 600059E : 6030                		mov.b	@r3,r0			; r0: %vvvvvvpp
(1)  769/ 60005A0 : 6203                		mov	r0,r2			; Save pp-pitch
(1)  770/ 60005A2 : C9FC                		and	#%11111100,r0
(1)  771/ 60005A4 : 1707                		mov	r0,@(mchnsnd_vol,r7)
(1)  772/ 60005A6 : 7308                		add	#8,r3			; Next: Pitch LSB
(1)  773/ 60005A8 : 6130                		mov.b	@r3,r1			; r0: %pppppppp
(1)  774/ 60005AA : 611C                		extu.b	r1,r1
(1)  775/ 60005AC : 6023                		mov	r2,r0
(1)  776/ 60005AE : C903                		and	#%11,r0
(1)  777/ 60005B0 : 4018                		shll8	r0
(1)  778/ 60005B2 : 201B                		or	r1,r0
(1)  779/ 60005B4 : 1706                		mov	r0,@(mchnsnd_pitch,r7)
(1)  780/ 60005B6 : 7308                		add	#8,r3			; Next: Stereo/Loop/Left/Right | 32-bit**
(1)  781/ 60005B8 : 6030                		mov.b	@r3,r0			; r0: %SLlraaaa
(1)  782/ 60005BA : 6103                		mov	r0,r1			; Save aaaa-address
(1)  783/ 60005BC : C9F0                		and	#%11110000,r0
(1)  784/ 60005BE : 4009                		shlr2	r0
(1)  785/ 60005C0 : 4009                		shlr2	r0
(1)  786/ 60005C2 : CB80                		or	#$80,r0			; Set as Enabled
(1)  787/ 60005C4 : 6403                		mov	r0,r4
(1)  788/ 60005C6 : 6013                		mov	r1,r0
(1)  789/ 60005C8 : C90F                		and	#%00001111,r0
(1)  790/ 60005CA : 4028                		shll16	r0
(1)  791/ 60005CC : 4018                		shll8	r0
(1)  792/ 60005CE : 1702                		mov	r0,@(mchnsnd_bank,r7)
(1)  793/ 60005D0 : 6103                		mov	r0,r1			; r1 - BANK
(1)  794/ 60005D2 : 7308                		add	#8,r3			; Next: Pointer $xx0000
(1)  795/ 60005D4 : 6030                		mov.b	@r3,r0
(1)  796/ 60005D6 : 600C                		extu.b	r0,r0
(1)  797/ 60005D8 : 4028                		shll16	r0
(1)  798/ 60005DA : 6203                		mov	r0,r2			; r2: $xx0000
(1)  799/ 60005DC : 7308                		add	#8,r3			; Next: Pointer $00xx00
(1)  800/ 60005DE : 6030                		mov.b	@r3,r0
(1)  801/ 60005E0 : 600C                		extu.b	r0,r0
(1)  802/ 60005E2 : 4018                		shll8	r0
(1)  803/ 60005E4 : 220B                		or	r0,r2			; r2: $xxxx00
(1)  804/ 60005E6 : 7308                		add	#8,r3			; Next: Pointer $0000xx
(1)  805/ 60005E8 : 6030                		mov.b	@r3,r0
(1)  806/ 60005EA : 600C                		extu.b	r0,r0
(1)  807/ 60005EC : 202B                		or	r2,r0			; r0: $00xxxxxx
(1)  808/ 60005EE : 310C                		add	r0,r1
(1)  809/ 60005F0 :                     	; Read LEN and LOOP
(1)  810/ 60005F0 : 6014                		mov.b	@r1+,r0
(1)  811/ 60005F2 : 630C                		extu.b	r0,r3
(1)  812/ 60005F4 : 6214                		mov.b	@r1+,r2
(1)  813/ 60005F6 : 622C                		extu.b	r2,r2
(1)  814/ 60005F8 : 4218                		shll8	r2
(1)  815/ 60005FA : 232B                		or	r2,r3
(1)  816/ 60005FC : 6214                		mov.b	@r1+,r2
(1)  817/ 60005FE : 622C                		extu.b	r2,r2
(1)  818/ 6000600 : 4228                		shll16	r2
(1)  819/ 6000602 : 232B                		or	r2,r3
(1)  820/ 6000604 : 6014                		mov.b	@r1+,r0
(1)  821/ 6000606 : 600C                		extu.b	r0,r0
(1)  822/ 6000608 : 6214                		mov.b	@r1+,r2
(1)  823/ 600060A : 622C                		extu.b	r2,r2
(1)  824/ 600060C : 4218                		shll8	r2
(1)  825/ 600060E : 202B                		or	r2,r0
(1)  826/ 6000610 : 6214                		mov.b	@r1+,r2
(1)  827/ 6000612 : 622C                		extu.b	r2,r2
(1)  828/ 6000614 : 4228                		shll16	r2
(1)  829/ 6000616 : 202B                		or	r2,r0
(1)  830/ 6000618 : 4018                		shll8	r0
(1)  831/ 600061A : 1705                		mov	r0,@(mchnsnd_loop,r7)
(1)  832/ 600061C : 6013                		mov	r1,r0
(1)  833/ 600061E : 4018                		shll8	r0
(1)  834/ 6000620 : 1703                		mov	r0,@(mchnsnd_start,r7)
(1)  835/ 6000622 : 1701                		mov	r0,@(mchnsnd_read,r7)
(1)  836/ 6000624 : 6013                		mov	r1,r0
(1)  837/ 6000626 : 303C                		add	r3,r0
(1)  838/ 6000628 : 4018                		shll8	r0
(1)  839/ 600062A : 1704                		mov	r0,@(mchnsnd_len,r7)
(1)  840/ 600062C : A002                		bra	.no_chng
(1)  841/ 600062E : 1740                		mov	r4,@(mchnsnd_enbl,r7)
(1)  842/ 6000630 :                     .is_keycut:
(1)  843/ 6000630 : E000                		mov	#0,r0
(1)  844/ 6000632 : 1700                		mov	r0,@(mchnsnd_enbl,r7)
(1)  845/ 6000634 :                     .no_chng:
(1)  846/ 6000634 :                     ; 		add	#$40,r6
(1)  847/ 6000634 : 901E                		mov	#sizeof_marssnd,r0
(1)  848/ 6000636 : 370C                		add	r0,r7
(1)  849/ 6000638 : 4610                		dt	r6
(1)  850/ 600063A : 8F8F                		bf/s	.next_chnl
(1)  851/ 600063C : 7801                		add	#1,r8
(1)  852/ 600063E :                     .exit_scmd:
(1)  853/ 600063E :                     	; --------------------------------
(1)  854/ 600063E : D107                		mov	#_sysreg+comm14,r1	; Clear cmd number
(1)  855/ 6000640 : E000                		mov	#0,r0
(1)  856/ 6000642 : 2100                		mov.b	r0,@r1
(1)  857/ 6000644 : 4F26                		lds	@r15+,pr
(1)  858/ 6000646 : 68F6                		mov	@r15+,r8
(1)  859/ 6000648 : 67F6                		mov	@r15+,r7
(1)  860/ 600064A : 66F6                		mov	@r15+,r6
(1)  861/ 600064C : 65F6                		mov	@r15+,r5
(1)  862/ 600064E : 64F6                		mov	@r15+,r4
(1)  863/ 6000650 : 63F6                		mov	@r15+,r3
(1)  864/ 6000652 : 62F6                		mov	@r15+,r2
(1)  865/ 6000654 : 000B                		rts
(1)  866/ 6000656 : 0009                		nop
(1)  867/ 6000658 :                     		align 4
(1)  868/ 6000658 : 2000 401A 2000      		ltorg
          600065E : 402E 2000 4028 
          6000664 : C000 0220 C000 
          600066A : 0220 C000 0140 
          6000670 : FE10 0007 0020    
(1)  869/ 6000676 :                     
(1)  870/ 6000676 :                     ; =================================================================
(1)  871/ 6000676 :                     ; ------------------------------------------------
(1)  872/ 6000676 :                     ; Slave | HBlank
(1)  873/ 6000676 :                     ; ------------------------------------------------
(1)  874/ 6000676 :                     
(1)  875/ 6000676 :                     s_irq_h:
(1)  876/ 6000676 : 913D                		mov	#_FRT,r1
(1)  877/ 6000678 : 8417                		mov.b	@(7,r1),r0
(1)  878/ 600067A : CA02                		xor	#2,r0
(1)  879/ 600067C : 8017                		mov.b	r0,@(7,r1)
(1)  880/ 600067E : D116                		mov	#_sysreg+hintclr,r1
(1)  881/ 6000680 : 2101                		mov.w	r0,@r1
(1)  882/ 6000682 : 000B                		rts
(1)  883/ 6000684 : 0009                		nop
(1)  884/ 6000686 :                     		align 4
(1)  885/ 6000688 :                     
(1)  886/ 6000688 :                     ; =================================================================
(1)  887/ 6000688 :                     ; ------------------------------------------------
(1)  888/ 6000688 :                     ; Slave | VBlank
(1)  889/ 6000688 :                     ; ------------------------------------------------
(1)  890/ 6000688 :                     
(1)  891/ 6000688 :                     s_irq_v:
(1)  892/ 6000688 : 9134                		mov	#_FRT,r1
(1)  893/ 600068A : 8417                		mov.b	@(7,r1),r0
(1)  894/ 600068C : CA02                		xor	#2,r0
(1)  895/ 600068E : 8017                		mov.b	r0,@(7,r1)
(1)  896/ 6000690 : D112                		mov	#_sysreg+vintclr,r1
(1)  897/ 6000692 : 2101                		mov.w	r0,@r1
(1)  898/ 6000694 : 000B                		rts
(1)  899/ 6000696 : 0009                		nop
(1)  900/ 6000698 :                     		align 4
(1)  901/ 6000698 :                     
(1)  902/ 6000698 :                     ; =================================================================
(1)  903/ 6000698 :                     ; ------------------------------------------------
(1)  904/ 6000698 :                     ; Slave | VRES Interrupt (RESET button on Genesis)
(1)  905/ 6000698 :                     ; ------------------------------------------------
(1)  906/ 6000698 :                     
(1)  907/ 6000698 :                     s_irq_vres:
(1)  908/ 6000698 : D111                		mov	#_sysreg,r1
(1)  909/ 600069A : 60F3                		mov	r15,r0
(1)  910/ 600069C : 811A                		mov.w	r0,@(vresintclr,r1)
(1)  911/ 600069E : 8513                		mov.w	@(dreqctl,r1),r0
(1)  912/ 60006A0 : C801                		tst	#1,r0
(1)  913/ 60006A2 : 8B13                		bf	.rv_busy
(1)  914/ 60006A4 : E0F0                		mov.b	#$F0,r0			; ** $F0
(1)  915/ 60006A6 : 600C                		extu.b	r0,r0
(1)  916/ 60006A8 : 400E                		ldc	r0,sr
(1)  917/ 60006AA : E000                		mov	#0,r0			; Disable interrupt bits
(1)  918/ 60006AC : 2101                		mov.w	r0,@r1
(1)  919/ 60006AE : D10D                		mov	#_sysreg+comm14,r1	; Clear our comm
(1)  920/ 60006B0 : 2101                		mov.w	r0,@r1
(1)  921/ 60006B2 : E1B0                		mov	#_DMAOPERATION,r1	; Quickly cancel DMA's
(1)  922/ 60006B4 : 2102                		mov	r0,@r1
(1)  923/ 60006B6 : DF0C                		mov	#(STACK_SLV)-8,r15	; Reset Slave's STACK
(1)  924/ 60006B8 : D00C                		mov	#SH2_S_HotStart,r0	; Write return point and status
(1)  925/ 60006BA : 2F02                		mov	r0,@r15
(1)  926/ 60006BC : 901B                		mov.w   #$F0,r0
(1)  927/ 60006BE : 1F01                		mov	r0,@(4,r15)
(1)  928/ 60006C0 : D107                		mov	#_sysreg,r1
(1)  929/ 60006C2 : D00B                		mov	#"S_OK",r0		; Report Slave as OK
(1)  930/ 60006C4 : 1109                		mov	r0,@(comm4,r1)
(1)  931/ 60006C6 : 002B                		rte
(1)  932/ 60006C8 : 0009                		nop
(1)  933/ 60006CA :                     		align 4
(1)  934/ 60006CC :                     .rv_busy:
(1)  935/ 60006CC : 9112                		mov	#_FRT,r1
(1)  936/ 60006CE : 8417                		mov.b	@(7,r1),r0
(1)  937/ 60006D0 : CA02                		xor	#2,r0
(1)  938/ 60006D2 : 8017                		mov.b	r0,@(7,r1)
(1)  939/ 60006D4 : AFFE                		bra	*
(1)  940/ 60006D6 : 0009                		nop
(1)  941/ 60006D8 :                     		align 4
(1)  942/ 60006D8 :                     
(1)  943/ 60006D8 : 2000 4018 2000      		ltorg		; Save literals
          60006DE : 4016 2000 4000 
          60006E4 : 2000 402E C000 
          60006EA : 07F8 0600 0B0A 
          60006F0 : 535F 4F4B FE10 
          60006F6 : 00F0             
(1)  944/ 60006F8 :                     
(1)  945/ 60006F8 :                     ; ====================================================================
(1)  946/ 60006F8 :                     ; ----------------------------------------------------------------
(1)  947/ 60006F8 :                     ; Master entry point
(1)  948/ 60006F8 :                     ; ----------------------------------------------------------------
(1)  949/ 60006F8 :                     
(1)  950/ 60006F8 :                     		align 4
(1)  951/ 60006F8 :                     SH2_M_Entry:
(1)  952/ 60006F8 : DF32                		mov	#STACK_MSTR,r15			; Reset stack
(1)  953/ 60006FA : D033                		mov	#SH2_Master,r0			; Reset vbr
(1)  954/ 60006FC : 402E                		ldc	r0,vbr
(1)  955/ 60006FE : 917B                		mov.l	#_FRT,r1
(1)  956/ 6000700 : E000                		mov	#$00,r0
(1)  957/ 6000702 : 8010                		mov.b	r0,@(0,r1)
(1)  958/ 6000704 : E0E2                		mov.b	#$E2,r0
(1)  959/ 6000706 : 8017                		mov.b	r0,@(7,r1)
(1)  960/ 6000708 : E000                		mov	#$00,r0
(1)  961/ 600070A : 8014                		mov.b	r0,@(4,r1)
(1)  962/ 600070C : E001                		mov	#$01,r0
(1)  963/ 600070E : 8015                		mov.b	r0,@(5,r1)
(1)  964/ 6000710 : E000                		mov	#$00,r0
(1)  965/ 6000712 : 8016                		mov.b	r0,@(6,r1)
(1)  966/ 6000714 : E001                		mov	#$01,r0
(1)  967/ 6000716 : 8011                		mov.b	r0,@(1,r1)
(1)  968/ 6000718 : E000                		mov	#$00,r0
(1)  969/ 600071A : 8013                		mov.b	r0,@(3,r1)
(1)  970/ 600071C : 8012                		mov.b	r0,@(2,r1)
(1)  971/ 600071E : E0F2                		mov.b	#$F2,r0				; <-- VRES wake up
(1)  972/ 6000720 : 8017                		mov.b	r0,@(7,r1)
(1)  973/ 6000722 : E000                		mov	#0,r0
(1)  974/ 6000724 : 8014                		mov.b	r0,@(4,r1)
(1)  975/ 6000726 : E001                		mov	#1,r0
(1)  976/ 6000728 : 8015                		mov.b	r0,@(5,r1)
(1)  977/ 600072A : E0E2                		mov.b	#$E2,r0
(1)  978/ 600072C : 8017                		mov.b	r0,@(7,r1)
(1)  979/ 600072E :                     
(1)  980/ 600072E :                     	; --------------------------------------------------------
(1)  981/ 600072E :                     	; Extra interrupt settings
(1)  982/ 600072E : 9064                		mov.w   #$FEE2,r0			; Extra interrupt priority levels ($FFFFFEE2)
(1)  983/ 6000730 : 9164                		mov     #(3<<4)|(5<<8),r1		; (DMA_LVL<<8)|(WDG_LVL<<4) Current: WDG 3 DMA 5
(1)  984/ 6000732 : 2011                		mov.w   r1,@r0
(1)  985/ 6000734 : 9063                		mov.w   #$FEE4,r0			; Vector jump number for Watchdog ($FFFFFEE4)
(1)  986/ 6000736 : 9163                		mov     #($120/4)<<8,r1			; (vbr+POINTER)<<8
(1)  987/ 6000738 : 2011                		mov.w   r1,@r0
(1)  988/ 600073A : E0A0                		mov.b	#$A0,r0				; Vector jump number for DMACHANNEL0 ($FFFFFFA0)
(1)  989/ 600073C : E149                		mov     #($124/4),r1			; (vbr+POINTER)
(1)  990/ 600073E : 2012                		mov	r1,@r0
(1)  991/ 6000740 : D022                		mov	#RAM_Mars_Global,r0		; Reset gbr
(1)  992/ 6000742 : 401E                		ldc	r0,gbr
(1)  993/ 6000744 :                     
(1)  994/ 6000744 :                     	; --------------------------------------------------------
(1)  995/ 6000744 :                     	; CD32X initialization
(1)  996/ 6000744 :                     	;
(1)  997/ 6000744 :                     	; *** FUSION: Framebuffer flipping fails if
(1)  998/ 6000744 :                     	; bitmapmd is 0
(1)  999/ 6000744 :                     	; --------------------------------------------------------
(1) 1000/ 6000744 :                     
(1) 1014/ 6000744 : D122                		mov 	#_vdpreg,r1
(1) 1015/ 6000746 : 841A                .waite:		mov.b	@(vdpsts,r1),r0		; Wait VBlank
(1) 1016/ 6000748 : C880                		tst	#VBLK,r0
(1) 1017/ 600074A : 8BFC                		bf	.waite
(1) 1018/ 600074C : 841A                .waitl:		mov.b	@(vdpsts,r1),r0
(1) 1019/ 600074E : C880                		tst	#VBLK,r0
(1) 1020/ 6000750 : 89FC                		bt	.waitl
(1) 1021/ 6000752 : E201                		mov	#1,r2			; Set Framebuffer 1
(1) 1022/ 6000754 : 6023                		mov	r2,r0
(1) 1023/ 6000756 : 801B                		mov.b	r0,@(framectl,r1)
(1) 1024/ 6000758 : 841B                .wait_frm:	mov.b	@(framectl,r1),r0
(1) 1025/ 600075A : 3020                		cmp/eq	r2,r0
(1) 1026/ 600075C : 8BFC                		bf	.wait_frm
(1) 1028/ 600075E : E000                		mov	#0,r0
(1) 1029/ 6000760 : D21C                		mov	#CS3+($20000-$38),r2	; Cleanup FIRST
(1) 1030/ 6000762 : D31D                		mov	#CS3+($40000),r3
(1) 1031/ 6000764 :                     .clean_up:
(1) 1032/ 6000764 : 3233                		cmp/ge	r3,r2
(1) 1033/ 6000766 : 8902                		bt	.exit_clean
(1) 1034/ 6000768 : 2202                		mov	r0,@r2
(1) 1035/ 600076A : AFFB                		bra	.clean_up
(1) 1036/ 600076C : 7204                		add	#4,r2
(1) 1037/ 600076E :                     .exit_clean:
(1) 1038/ 600076E : D11B                		mov	#_framebuffer,r1	; Copy the other half of SDRAM
(1) 1039/ 6000770 : D218                		mov	#CS3+($20000-$38),r2
(1) 1040/ 6000772 : D31B                		mov	#CS3+(SH2_END&$3FFFFF),r3
(1) 1041/ 6000774 :                     .copy_new:
(1) 1042/ 6000774 : 3233                		cmp/ge	r3,r2
(1) 1043/ 6000776 : 8903                		bt	.exit_send
(1) 1044/ 6000778 : 6016                		mov	@r1+,r0
(1) 1045/ 600077A : 2202                		mov	r0,@r2
(1) 1046/ 600077C : AFFA                		bra	.copy_new
(1) 1047/ 600077E : 7204                		add	#4,r2
(1) 1048/ 6000780 :                     .exit_send:
(1) 1049/ 6000780 : D118                		mov	#_sysreg+comm0,r1
(1) 1050/ 6000782 : E000                		mov	#0,r0
(1) 1051/ 6000784 : 2102                		mov	r0,@r1
(1) 1053/ 6000786 : D018                		mov	#RAM_Mars_DreqBuff_0,r0
(1) 1054/ 6000788 : C202                		mov	r0,@(marsGbl_DreqRead,gbr)
(1) 1055/ 600078A : D018                		mov	#RAM_Mars_DreqBuff_1,r0
(1) 1056/ 600078C : C203                		mov	r0,@(marsGbl_DreqWrite,gbr)
(1) 1057/ 600078E :                     
(1) 1058/ 600078E :                     ; ====================================================================
(1) 1059/ 600078E :                     ; ----------------------------------------------------------------
(1) 1060/ 600078E :                     ; Master MAIN code
(1) 1061/ 600078E :                     ; ----------------------------------------------------------------
(1) 1062/ 600078E :                     
(1) 1063/ 600078E :                     SH2_M_HotStart:
(1) 1064/ 600078E : E0F0                		mov.b	#$F0,r0			; ** $F0
(1) 1065/ 6000790 : 600C                		extu.b	r0,r0
(1) 1066/ 6000792 : 400E                		ldc	r0,sr
(1) 1067/ 6000794 : 9135                		mov.w	#$FE80,r1		; $FFFFFE80
(1) 1068/ 6000796 : 9035                		mov.w	#$A518,r0		; Disable Watchdog
(1) 1069/ 6000798 : 2101                		mov.w	r0,@r1
(1) 1070/ 600079A : B209                		bsr	Mars_CachePurge
(1) 1071/ 600079C : 0009                		nop
(1) 1072/ 600079E : B26B                		bsr	MarsVideo_Init
(1) 1073/ 60007A0 : 0009                		nop
(1) 1074/ 60007A2 : D113                		mov	#_sysreg,r1
(1) 1075/ 60007A4 : 6011                		mov.w	@r1,r0
(1) 1076/ 60007A6 : CB02                		or	#CMDIRQ_ON,r0
(1) 1077/ 60007A8 : 2101                		mov.w	r0,@r1
(1) 1078/ 60007AA : D112                		mov	#_sysreg+comm14,r1
(1) 1079/ 60007AC : 6011                .wait_slv:	mov.w	@r1,r0
(1) 1080/ 60007AE : 2008                		tst	r0,r0
(1) 1081/ 60007B0 : 8BFC                		bf	.wait_slv
(1) 1082/ 60007B2 : E1B0                		mov	#_DMAOPERATION,r1		; Enable DMA operation
(1) 1083/ 60007B4 : E001                		mov	#1,r0
(1) 1084/ 60007B6 : 2102                		mov	r0,@r1
(1) 1085/ 60007B8 : E020                		mov.b	#$20,r0				; Interrupts ON
(1) 1086/ 60007BA : 400E                		ldc	r0,sr
(1) 1087/ 60007BC : A024                		bra	master_loop
(1) 1088/ 60007BE : 0009                		nop
(1) 1089/ 60007C0 :                     		align 4
(1) 1090/ 60007C0 :                     litr_MarsVideo_Init:
(1) 1091/ 60007C0 : 0600 0C78           		dc.l MarsVideo_Init
(1) 1092/ 60007C4 : C000 0800 0600      		ltorg
          60007CA : 0000 0600 1690 
          60007D0 : 2000 4100 0601 
          60007D6 : FFC8 0604 0000 
          60007DC : 2400 0000 0600 
          60007E2 : 5110 2000 4020 
          60007E8 : 2600 1AE0 2600 
          60007EE : 21F0 2000 4000 
          60007F4 : 2000 402E FE10 
          60007FA : FEE2 0530 FEE4 
          6000800 : 4800 FE80 A518    
(1) 1093/ 6000806 :                     		align 4
(1) 1094/ 6000808 :                     
(1) 1095/ 6000808 :                     ; ----------------------------------------------------------------
(1) 1096/ 6000808 :                     ; MASTER CPU loop
(1) 1097/ 6000808 :                     ;
(1) 1098/ 6000808 :                     ; comm12: %BD00cccc 00PFRmmm
(1) 1099/ 6000808 :                     
(1) 1100/ 6000808 :                     ; B | TODO
(1) 1101/ 6000808 :                     ; D | DREQ DMA Busy bit
(1) 1102/ 6000808 :                     ; c | CMD task number
(1) 1103/ 6000808 :                     ;
(1) 1104/ 6000808 :                     ; P | Pause rendering/drawing, for the Full Fade-In/Fade-Out sequences
(1) 1105/ 6000808 :                     ; F | Frame-ready flag, clears when frame is ready.
(1) 1106/ 6000808 :                     ; R | Graphics mode INIT flag
(1) 1107/ 6000808 :                     ; m | Pseudo-Graphics mode
(1) 1108/ 6000808 :                     ; ----------------------------------------------------------------
(1) 1109/ 6000808 :                     
(1) 1110/ 6000808 :                     		align 4
(1) 1111/ 6000808 :                     master_loop:
(1) 1118/ 6000808 :                     
(1) 1119/ 6000808 :                     	; ---------------------------------------
(1) 1120/ 6000808 :                     	; Flip the DREQ Read/Write points
(1) 1121/ 6000808 :                     	; ---------------------------------------
(1) 1122/ 6000808 :                     
(1) 1124/ 6000808 :                     .too_late:
(1) 1125/ 6000808 : D140                		mov	#_sysreg+comm12,r1
(1) 1126/ 600080A : 6010                		mov.b	@r1,r0
(1) 1127/ 600080C : C840                		tst	#%01000000,r0
(1) 1128/ 600080E : 8BFB                		bf	.too_late
(1) 1130/ 6000810 : 4F03                		stc	sr,@-r15
(1) 1131/ 6000812 : E0F0                		mov.b	#$F0,r0				; ** $F0
(1) 1132/ 6000814 : 600C                		extu.b	r0,r0
(1) 1133/ 6000816 : 400E                		ldc	r0,sr
(1) 1134/ 6000818 : C603                		mov	@(marsGbl_DreqWrite,gbr),r0	; Flip DMA Read/Write buffers
(1) 1135/ 600081A : 6103                		mov	r0,r1
(1) 1136/ 600081C : C602                		mov	@(marsGbl_DreqRead,gbr),r0
(1) 1137/ 600081E : C203                		mov	r0,@(marsGbl_DreqWrite,gbr)
(1) 1138/ 6000820 : 6013                		mov	r1,r0
(1) 1139/ 6000822 : C202                		mov	r0,@(marsGbl_DreqRead,gbr)
(1) 1140/ 6000824 : 4F07                		ldc	@r15+,sr
(1) 1141/ 6000826 : D13A                		mov	#_vdpreg,r1			; Check if we got late
(1) 1142/ 6000828 : 841A                .waitl:		mov.b	@(vdpsts,r1),r0			; on VBlank
(1) 1143/ 600082A : C880                		tst	#VBLK,r0
(1) 1144/ 600082C : 8BFC                		bf	.waitl
(1) 1145/ 600082E : D139                		mov	#_sysreg+comm12+1,r1		; Reset FrameWait bit from 68K
(1) 1146/ 6000830 : 6010                		mov.b	@r1,r0
(1) 1147/ 6000832 : C9EF                		and	#%11101111,r0
(1) 1148/ 6000834 : 2100                		mov.b	r0,@r1
(1) 1149/ 6000836 : B1BB                		bsr	Mars_CachePurge			; Purge cache
(1) 1150/ 6000838 : 0009                		nop
(1) 1151/ 600083A :                     
(1) 1152/ 600083A :                     	; ---------------------------------------
(1) 1153/ 600083A :                     	; Write palette using DREQ data
(1) 1154/ 600083A :                     	; ---------------------------------------
(1) 1155/ 600083A : D135                		mov	#_vdpreg,r1			; Wait until VBlank
(1) 1156/ 600083C : 841A                .waitv:		mov.b	@(vdpsts,r1),r0
(1) 1157/ 600083E : C880                		tst	#VBLK,r0
(1) 1158/ 6000840 : 89FC                		bt	.waitv
(1) 1159/ 6000842 : D133                		mov	#_vdpreg,r1
(1) 1160/ 6000844 : C501                		mov.w	@(marsGbl_ThisFrame,gbr),r0	; Set current framebuffer
(1) 1161/ 6000846 : C901                		and	#1,r0
(1) 1162/ 6000848 : 801B                		mov.b	r0,@(framectl,r1)
(1) 1163/ 600084A : C500                 		mov.w	@(marsGbl_XShift,gbr),r0	; Set SHIFT bit (Xpos & 1)
(1) 1164/ 600084C : C901                		and	#1,r0
(1) 1165/ 600084E : 8111                		mov.w	r0,@(shift,r1)
(1) 1166/ 6000850 : C602                		mov	@(marsGbl_DreqRead,gbr),r0
(1) 1167/ 6000852 :                     ; 		mov	#Dreq_Palette,r1		; PALETTE MUST BE AT THE TOP OF DREQ DATA
(1) 1168/ 6000852 :                     ; 		add	r0,r1				; so I don't need to add Dreq_Palette...
(1) 1169/ 6000852 : 6103                		mov	r0,r1
(1) 1170/ 6000854 : D230                		mov	#_palette,r2
(1) 1171/ 6000856 : E320                 		mov	#(256/8),r3
(1) 1172/ 6000858 :                     .copy_pal:
(1) 1173/ 6000858 :                     	rept 8/2
(1) 1174/ 6000858 :                     		mov	@r1+,r0				; Copy 2 colors as LONGs
(1) 1175/ 6000858 :                     		mov	r0,@r2
(1) 1176/ 6000858 :                     		add	#4,r2
(1) 1177/ 6000858 :                     	endm
(1) 1174/ 6000858 : 6016                		mov	@r1+,r0				; Copy 2 colors as LONGs
(1) 1175/ 600085A : 2202                		mov	r0,@r2
(1) 1176/ 600085C : 7204                		add	#4,r2
(1) 1174/ 600085E : 6016                		mov	@r1+,r0				; Copy 2 colors as LONGs
(1) 1175/ 6000860 : 2202                		mov	r0,@r2
(1) 1176/ 6000862 : 7204                		add	#4,r2
(1) 1174/ 6000864 : 6016                		mov	@r1+,r0				; Copy 2 colors as LONGs
(1) 1175/ 6000866 : 2202                		mov	r0,@r2
(1) 1176/ 6000868 : 7204                		add	#4,r2
(1) 1174/ 600086A : 6016                		mov	@r1+,r0				; Copy 2 colors as LONGs
(1) 1175/ 600086C : 2202                		mov	r0,@r2
(1) 1176/ 600086E : 7204                		add	#4,r2
(1) 1178/ 6000870 : 4310                		dt	r3
(1) 1179/ 6000872 : 8BF1                		bf	.copy_pal
(1) 1180/ 6000874 : D125                		mov	#_sysreg+comm12,r1
(1) 1181/ 6000876 : 6011                		mov.w	@r1,r0
(1) 1182/ 6000878 :                     ; 		tst	#%00100000,r0
(1) 1183/ 6000878 :                     ; 		bf	master_loop
(1) 1184/ 6000878 : D128                		mov	#mstr_list,r1
(1) 1185/ 600087A : C808                		tst	#%00001000,r0
(1) 1186/ 600087C : 8900                		bt	.non_init
(1) 1187/ 600087E : 7104                		add	#4,r1
(1) 1188/ 6000880 :                     .non_init:
(1) 1189/ 6000880 : C907                		and	#%00000111,r0		; <-- Current limit
(1) 1190/ 6000882 : 4008                		shll2	r0
(1) 1191/ 6000884 : 4000                		shll	r0
(1) 1192/ 6000886 : 310C                		add	r0,r1
(1) 1193/ 6000888 : 6012                		mov	@r1,r0
(1) 1194/ 600088A : 402B                		jmp	@r0
(1) 1195/ 600088C : 0009                		nop
(1) 1196/ 600088E :                     		align 4
(1) 1197/ 6000890 :                     mstr_list:
(1) 1198/ 6000890 : 0600 08C8 0600      		dc.l MstrMode_0,MstrMode_0_i
          6000896 : 08A0             
(1) 1199/ 6000898 : 0600 0930 0600      		dc.l MstrMode_2D,MstrMode_2D_i
          600089E : 08D4             
(1) 1200/ 60008A0 :                     
(1) 1201/ 60008A0 :                     ; ====================================================================
(1) 1202/ 60008A0 :                     ; ----------------------------------------------------------------
(1) 1203/ 60008A0 :                     ; NOTHING
(1) 1204/ 60008A0 :                     ; ----------------------------------------------------------------
(1) 1205/ 60008A0 :                     
(1) 1206/ 60008A0 :                     		align 4
(1) 1207/ 60008A0 :                     MstrMode_0_i:
(1) 1208/ 60008A0 : D11B                		mov 	#_vdpreg,r1
(1) 1209/ 60008A2 : E000                		mov	#0,r0
(1) 1210/ 60008A4 : 8011                		mov.b	r0,@(bitmapmd,r1)
(1) 1211/ 60008A6 : C204                		mov	r0,@(marsGbl_Scrl_Xpos,gbr)
(1) 1212/ 60008A8 : C205                		mov	r0,@(marsGbl_Scrl_Ypos,gbr)
(1) 1213/ 60008AA : C208                		mov	r0,@(marsGbl_Scrl_FbTL,gbr)
(1) 1214/ 60008AC : C209                		mov	r0,@(marsGbl_Scrl_FbY,gbr)
(1) 1215/ 60008AE : C20B                		mov	r0,@(marsGbl_Scrl_DrwAll,gbr)
(1) 1216/ 60008B0 : C20C                		mov	r0,@(marsGbl_Scrl_DrwR,gbr)
(1) 1217/ 60008B2 : C20D                		mov	r0,@(marsGbl_Scrl_DrwL,gbr)
(1) 1218/ 60008B4 : C20E                		mov	r0,@(marsGbl_Scrl_DrwD,gbr)
(1) 1219/ 60008B6 : C20F                		mov	r0,@(marsGbl_Scrl_DrwU,gbr)
(1) 1220/ 60008B8 : E100                		mov	#0,r1
(1) 1221/ 60008BA : 9235                		mov	#240,r2				; Show scroll area 0 to 240
(1) 1222/ 60008BC : B316                		bsr	MarsVideo_ShowScrlBg
(1) 1223/ 60008BE : 0009                		nop
(1) 1224/ 60008C0 : D114                		mov	#_sysreg+comm12+1,r1
(1) 1225/ 60008C2 : 6010                		mov.b	@r1,r0
(1) 1226/ 60008C4 : C9F7                		and	#%11110111,r0
(1) 1227/ 60008C6 : 2100                		mov.b	r0,@r1
(1) 1228/ 60008C8 :                     MstrMode_0:
(1) 1229/ 60008C8 : D111                		mov	#_vdpreg,r1
(1) 1230/ 60008CA : 841A                .waitl:		mov.b	@(vdpsts,r1),r0
(1) 1231/ 60008CC : C880                		tst	#VBLK,r0
(1) 1232/ 60008CE : 8BFC                		bf	.waitl
(1) 1233/ 60008D0 : AF9A                		bra	master_loop
(1) 1234/ 60008D2 : 0009                		nop
(1) 1235/ 60008D4 :                     
(1) 1236/ 60008D4 :                     ; ====================================================================
(1) 1237/ 60008D4 :                     ; ----------------------------------------------------------------
(1) 1238/ 60008D4 :                     ; 256-color tiled scrolling layer with "Super" Sprites
(1) 1239/ 60008D4 :                     ;
(1) 1240/ 60008D4 :                     ; NOTES:
(1) 1241/ 60008D4 :                     ; - STOP SCROLLING FIRST
(1) 1242/ 60008D4 :                     ; - MAXIMUM scrolling speed is 8 pixels for both axis
(1) 1243/ 60008D4 :                     ; ----------------------------------------------------------------
(1) 1244/ 60008D4 :                     
(1) 1245/ 60008D4 :                     		align 4
(1) 1246/ 60008D4 :                     
(1) 1247/ 60008D4 :                     ; ---------------------------------------
(1) 1248/ 60008D4 :                     ; Init
(1) 1249/ 60008D4 :                     ; ---------------------------------------
(1) 1250/ 60008D4 :                     
(1) 1251/ 60008D4 :                     MstrMode_2D_i:
(1) 1252/ 60008D4 : D112                		mov	#CACHE_MASTER,r1
(1) 1253/ 60008D6 : 9228                		mov	#CACHE_MASTER_E-CACHE_MASTER,r2
(1) 1254/ 60008D8 : D012                		mov	#Mars_CacheRamCode,r0
(1) 1255/ 60008DA : 400B                		jsr	@r0
(1) 1256/ 60008DC : 0009                		nop
(1) 1257/ 60008DE : 9E25                		mov	#Dreq_ScrlBuff,r14
(1) 1258/ 60008E0 : C602                		mov	@(marsGbl_DreqRead,gbr),r0
(1) 1259/ 60008E2 : 3E0C                		add	r0,r14
(1) 1260/ 60008E4 : 51E1                		mov	@(mscrl_xpos,r14),r1
(1) 1261/ 60008E6 : 4129                		shlr16	r1
(1) 1262/ 60008E8 : 52E2                		mov	@(mscrl_ypos,r14),r2
(1) 1263/ 60008EA : 4229                		shlr16	r2
(1) 1264/ 60008EC : 50E3                		mov	@(mscrl_Art,r14),r0
(1) 1265/ 60008EE : D308                		mov 	#_vdpreg,r3
(1) 1266/ 60008F0 : C20A                		mov	r0,@(marsGbl_Scrl_Art,gbr)
(1) 1267/ 60008F2 : 602F                		exts.w	r2,r0
(1) 1268/ 60008F4 : C205                		mov	r0,@(marsGbl_Scrl_Ypos,gbr)
(1) 1269/ 60008F6 : 601F                		exts.w	r1,r0
(1) 1270/ 60008F8 : C204                		mov	r0,@(marsGbl_Scrl_Xpos,gbr)
(1) 1271/ 60008FA : E002                		mov	#2,r0
(1) 1272/ 60008FC : C20B                		mov	r0,@(marsGbl_Scrl_DrwAll,gbr)
(1) 1273/ 60008FE : E001                		mov	#1,r0
(1) 1274/ 6000900 : 8031                		mov.b	r0,@(bitmapmd,r3)
(1) 1275/ 6000902 : D104                		mov	#_sysreg+comm12+1,r1
(1) 1276/ 6000904 : 6010                		mov.b	@r1,r0
(1) 1277/ 6000906 : C9F7                		and	#%11110111,r0
(1) 1278/ 6000908 : A012                		bra	MstrMode_2D
(1) 1279/ 600090A : 2100                		mov.b	r0,@r1
(1) 1280/ 600090C :                     		align 4
(1) 1281/ 600090C : 2000 402C 2000      		ltorg
          6000912 : 4100 2000 402D 
          6000918 : 2000 4200 0600 
          600091E : 0890 0600 1418 
          6000924 : 0600 0BE4 00F0 
          600092A : 0018 0600          
(1) 1282/ 600092E :                     
(1) 1283/ 600092E :                     ; ---------------------------------------
(1) 1284/ 600092E :                     ; Loop
(1) 1285/ 600092E :                     ; ---------------------------------------
(1) 1286/ 600092E :                     
(1) 1287/ 600092E :                     		align 4
(1) 1288/ 6000930 :                     MstrMode_2D:
(1) 1289/ 6000930 :                     	; ---------------------------------------
(1) 1290/ 6000930 :                     	; Set scrolling varaibles
(1) 1291/ 6000930 : C602                		mov	@(marsGbl_DreqRead,gbr),r0
(1) 1292/ 6000932 : 9EB5                		mov	#Dreq_ScrlBuff,r14
(1) 1293/ 6000934 : 3E0C                		add	r0,r14
(1) 1294/ 6000936 : E100                		mov	#0,r1				; X increment
(1) 1295/ 6000938 : E200                		mov	#0,r2				; Y increment
(1) 1296/ 600093A : E302                		mov	#2,r3				; Drawflags counter
(1) 1297/ 600093C : 56E1                		mov	@(mscrl_xpos,r14),r6
(1) 1298/ 600093E : 94B0                		mov	#SET_MSCRLSIZE/2,r4		; Scroll speed limit
(1) 1299/ 6000940 : C604                		mov	@(marsGbl_Scrl_Xpos,gbr),r0
(1) 1300/ 6000942 : 95AF                		mov	#-SET_MSCRLSIZE,r5		; -block_size
(1) 1301/ 6000944 : 58E2                		mov	@(mscrl_ypos,r14),r8
(1) 1302/ 6000946 : 6703                		mov	r0,r7
(1) 1303/ 6000948 : C605                		mov	@(marsGbl_Scrl_Ypos,gbr),r0
(1) 1304/ 600094A : 6903                		mov	r0,r9
(1) 1305/ 600094C : 4629                		shlr16	r6			; X >> 16
(1) 1306/ 600094E : 666F                		exts.w	r6,r6			; extend
(1) 1307/ 6000950 : 3670                		cmp/eq	r7,r6			; Xpos == Xold?
(1) 1308/ 6000952 : 891A                		bt	.x_old
(1) 1309/ 6000954 : 6163                		mov	r6,r1			; Make X increment
(1) 1310/ 6000956 : 3178                		sub	r7,r1
(1) 1311/ 6000958 :                     
(1) 1312/ 6000958 : 6063                		mov	r6,r0			; Check X&blocksize
(1) 1313/ 600095A : 2059                		and	r5,r0
(1) 1314/ 600095C : 2759                		and	r5,r7
(1) 1315/ 600095E : 3070                		cmp/eq	r7,r0
(1) 1316/ 6000960 : 8913                		bt	.x_old
(1) 1317/ 6000962 : 4111                		cmp/pz	r1
(1) 1318/ 6000964 : 8B0A                		bf	.x_dirl
(1) 1319/ 6000966 : 0009                		nop
(1) 1320/ 6000968 : C60C                		mov	@(marsGbl_Scrl_DrwR,gbr),r0
(1) 1321/ 600096A : 2008                		tst	r0,r0
(1) 1322/ 600096C : 8B0D                		bf	.x_new
(1) 1323/ 600096E : E000                		mov	#0,r0
(1) 1324/ 6000970 : C20D                		mov	r0,@(marsGbl_Scrl_DrwL,gbr)
(1) 1325/ 6000972 : 6033                		mov	r3,r0
(1) 1326/ 6000974 : C20C                		mov	r0,@(marsGbl_Scrl_DrwR,gbr)
(1) 1327/ 6000976 : A008                		bra	.x_new
(1) 1328/ 6000978 : 0009                		nop
(1) 1329/ 600097A : 0009                		nop ; align
(1) 1330/ 600097C :                     .x_dirl:
(1) 1331/ 600097C : C60D                		mov	@(marsGbl_Scrl_DrwL,gbr),r0
(1) 1332/ 600097E : 2008                		tst	r0,r0
(1) 1333/ 6000980 : 8B03                		bf	.x_new
(1) 1334/ 6000982 : E000                		mov	#0,r0
(1) 1335/ 6000984 : C20C                		mov	r0,@(marsGbl_Scrl_DrwR,gbr)
(1) 1336/ 6000986 : 6033                		mov	r3,r0
(1) 1337/ 6000988 : C20D                		mov	r0,@(marsGbl_Scrl_DrwL,gbr)
(1) 1338/ 600098A :                     .x_new:
(1) 1339/ 600098A :                     .x_old:
(1) 1340/ 600098A : 4829                		shlr16	r8				; Y >> 16
(1) 1341/ 600098C : 688F                		exts.w	r8,r8				; extend
(1) 1342/ 600098E : 3890                		cmp/eq	r9,r8				; Ypos == Yold?
(1) 1343/ 6000990 : 8919                		bt	.y_old
(1) 1344/ 6000992 : 6283                		mov	r8,r2				; Make Y increment
(1) 1345/ 6000994 : 3298                		sub	r9,r2
(1) 1346/ 6000996 :                     
(1) 1347/ 6000996 : 6083                		mov	r8,r0				; Check Y&blocksize
(1) 1348/ 6000998 : 2059                		and	r5,r0
(1) 1349/ 600099A : 2959                		and	r5,r9
(1) 1350/ 600099C : 3090                		cmp/eq	r9,r0
(1) 1351/ 600099E : 8912                		bt	.y_old
(1) 1352/ 60009A0 : 4215                		cmp/pl	r2
(1) 1353/ 60009A2 : 8B09                		bf	.y_dirl
(1) 1354/ 60009A4 : C60E                		mov	@(marsGbl_Scrl_DrwD,gbr),r0
(1) 1355/ 60009A6 : 2008                		tst	r0,r0
(1) 1356/ 60009A8 : 8B0D                		bf	.y_new
(1) 1357/ 60009AA : E000                		mov	#0,r0
(1) 1358/ 60009AC : C20F                		mov	r0,@(marsGbl_Scrl_DrwU,gbr)
(1) 1359/ 60009AE : 6033                		mov	r3,r0
(1) 1360/ 60009B0 : C20E                		mov	r0,@(marsGbl_Scrl_DrwD,gbr)
(1) 1361/ 60009B2 : A008                		bra	.y_new
(1) 1362/ 60009B4 : 0009                		nop
(1) 1363/ 60009B6 : 0009                		nop ; align
(1) 1364/ 60009B8 :                     .y_dirl:
(1) 1365/ 60009B8 : C60F                		mov	@(marsGbl_Scrl_DrwU,gbr),r0
(1) 1366/ 60009BA : 2008                		tst	r0,r0
(1) 1367/ 60009BC : 8B03                		bf	.y_new
(1) 1368/ 60009BE : E000                		mov	#0,r0
(1) 1369/ 60009C0 : C20E                		mov	r0,@(marsGbl_Scrl_DrwD,gbr)
(1) 1370/ 60009C2 : 6033                		mov	r3,r0
(1) 1371/ 60009C4 : C20F                		mov	r0,@(marsGbl_Scrl_DrwU,gbr)
(1) 1372/ 60009C6 :                     .y_new:
(1) 1373/ 60009C6 :                     
(1) 1374/ 60009C6 :                     .y_old:
(1) 1375/ 60009C6 : 6083                		mov	r8,r0
(1) 1376/ 60009C8 : C205                		mov	r0,@(marsGbl_Scrl_Ypos,gbr)
(1) 1377/ 60009CA :                     ; 		mov	r8,r0
(1) 1378/ 60009CA :                     ; 		mov	r0,@(marsGbl_Scrl_Yold,gbr)	; Update Yold
(1) 1379/ 60009CA :                     ; 		mov	r6,r0
(1) 1380/ 60009CA :                     ; 		mov	r0,@(marsGbl_Scrl_Xold,gbr)	; Update Xold
(1) 1381/ 60009CA : 6063                		mov	r6,r0
(1) 1382/ 60009CC : C204                		mov	r0,@(marsGbl_Scrl_Xpos,gbr)
(1) 1383/ 60009CE : 611F                		exts.w	r1,r1
(1) 1384/ 60009D0 : C100                		mov.w	r0,@(marsGbl_XShift,gbr)	; Write Xshift here
(1) 1385/ 60009D2 : 622F                		exts.w	r2,r2
(1) 1386/ 60009D4 :                     
(1) 1387/ 60009D4 :                     	; ---------------------------------------
(1) 1388/ 60009D4 :                     	; Increment FB draw TL and Y pos
(1) 1389/ 60009D4 :                     	; r1 - X increment
(1) 1390/ 60009D4 :                     	; r2 - Y increment
(1) 1391/ 60009D4 : C612                		mov	@(marsGbl_Scrl_Hght,gbr),r0
(1) 1392/ 60009D6 : 6603                		mov	r0,r6
(1) 1393/ 60009D8 : C609                		mov	@(marsGbl_Scrl_FbY,gbr),r0
(1) 1394/ 60009DA : 6503                		mov	r0,r5
(1) 1395/ 60009DC : C610                		mov	@(marsGbl_Scrl_Size,gbr),r0
(1) 1396/ 60009DE : 6403                		mov	r0,r4
(1) 1397/ 60009E0 : C608                		mov	@(marsGbl_Scrl_FbTL,gbr),r0
(1) 1398/ 60009E2 : 301C                		add	r1,r0		; Add X
(1) 1399/ 60009E4 : 4115                		cmp/pl	r1
(1) 1400/ 60009E6 : 8B02                		bf	.yx_negtv
(1) 1401/ 60009E8 : 3043                		cmp/ge	r4,r0
(1) 1402/ 60009EA : 8B00                		bf	.yx_negtv
(1) 1403/ 60009EC : 3048                		sub	r4,r0
(1) 1404/ 60009EE :                     .yx_negtv:
(1) 1405/ 60009EE : 4111                		cmp/pz	r1
(1) 1406/ 60009F0 : 8902                		bt	.yx_postv
(1) 1407/ 60009F2 : 4011                		cmp/pz	r0
(1) 1408/ 60009F4 : 8900                		bt	.yx_postv
(1) 1409/ 60009F6 : 304C                		add	r4,r0
(1) 1410/ 60009F8 :                     .yx_postv:
(1) 1411/ 60009F8 : 352C                		add	r2,r5		; Add Y
(1) 1412/ 60009FA : 4215                		cmp/pl	r2
(1) 1413/ 60009FC : 8B02                		bf	.ypu_negtv
(1) 1414/ 60009FE : 3563                		cmp/ge	r6,r5
(1) 1415/ 6000A00 : 8B00                		bf	.ypu_negtv
(1) 1416/ 6000A02 : 3568                		sub	r6,r5
(1) 1417/ 6000A04 :                     .ypu_negtv:
(1) 1418/ 6000A04 : 4211                		cmp/pz	r2
(1) 1419/ 6000A06 : 8902                		bt	.ypu_postv
(1) 1420/ 6000A08 : 4511                		cmp/pz	r5
(1) 1421/ 6000A0A : 8900                		bt	.ypu_postv
(1) 1422/ 6000A0C : 356C                		add	r6,r5
(1) 1423/ 6000A0E :                     .ypu_postv:
(1) 1424/ 6000A0E : 0009                		nop
(1) 1425/ 6000A10 : C208                		mov	r0,@(marsGbl_Scrl_FbTL,gbr)
(1) 1426/ 6000A12 : 6053                		mov	r5,r0
(1) 1427/ 6000A14 : C209                		mov	r0,@(marsGbl_Scrl_FbY,gbr)
(1) 1428/ 6000A16 :                     	; ---------------------------------------
(1) 1429/ 6000A16 :                     	; DRAW the blocks now
(1) 1430/ 6000A16 :                     	; ---------------------------------------
(1) 1431/ 6000A16 :                     ; 	cpu_me 2
(1) 1432/ 6000A16 :                     ; 		mov	#_sysreg+comm14+1,r1		; Pre-draw the Super Sprites
(1) 1433/ 6000A16 :                     ; .wait_slv_i:	mov.b	@r1,r0				; using Slave SH2
(1) 1434/ 6000A16 :                     ; 		tst	r0,r0
(1) 1435/ 6000A16 :                     ; 		bf	.wait_slv_i
(1) 1436/ 6000A16 :                     ; 		mov	#1,r0				; Slave task $01
(1) 1437/ 6000A16 :                     ; 		mov.b	r0,@r1
(1) 1438/ 6000A16 : DE20                		mov	#_framebuffer,r14
(1) 1439/ 6000A18 : C610                		mov	@(marsGbl_Scrl_Size,gbr),r0
(1) 1440/ 6000A1A : 6D03                		mov	r0,r13
(1) 1441/ 6000A1C : C612                		mov	@(marsGbl_Scrl_Hght,gbr),r0
(1) 1442/ 6000A1E : 6C03                		mov	r0,r12
(1) 1443/ 6000A20 : C611                		mov	@(marsGbl_Scrl_Wdth,gbr),r0
(1) 1444/ 6000A22 : 6B03                		mov	r0,r11
(1) 1445/ 6000A24 : C608                		mov	@(marsGbl_Scrl_FbTL,gbr),r0
(1) 1446/ 6000A26 : 6A03                		mov	r0,r10
(1) 1447/ 6000A28 : C609                		mov	@(marsGbl_Scrl_FbY,gbr),r0
(1) 1448/ 6000A2A : 6903                		mov	r0,r9
(1) 1449/ 6000A2C : C60A                		mov	@(marsGbl_Scrl_Art,gbr),r0
(1) 1450/ 6000A2E : 6803                		mov	r0,r8
(1) 1451/ 6000A30 : C605                		mov	@(marsGbl_Scrl_Ypos,gbr),r0
(1) 1452/ 6000A32 : 6603                		mov	r0,r6
(1) 1453/ 6000A34 : C604                		mov	@(marsGbl_Scrl_Xpos,gbr),r0
(1) 1454/ 6000A36 : 6503                		mov	r0,r5
(1) 1455/ 6000A38 : C613                		mov	@(marsGbl_Scrl_FbOut,gbr),r0
(1) 1456/ 6000A3A : 3E0C                		add	r0,r14
(1) 1457/ 6000A3C : C602                		mov	@(marsGbl_DreqRead,gbr),r0
(1) 1458/ 6000A3E : 9732                		mov	#Dreq_ScrlData,r7
(1) 1459/ 6000A40 : 370C                		add	r0,r7
(1) 1460/ 6000A42 : 9031                		mov	#-SET_MSCRLSIZE,r0	; -MSCRL_BLKSIZE
(1) 1461/ 6000A44 : 2A09                		and	r0,r10			; Set FB top-left
(1) 1462/ 6000A46 : 2909                		and	r0,r9
(1) 1463/ 6000A48 : C60B                		mov	@(marsGbl_Scrl_DrwAll,gbr),r0
(1) 1464/ 6000A4A : 2008                		tst	r0,r0
(1) 1465/ 6000A4C : 8905                		bt	.clr_init
(1) 1466/ 6000A4E : 4010                		dt	r0
(1) 1467/ 6000A50 : C20B                		mov	r0,@(marsGbl_Scrl_DrwAll,gbr)
(1) 1468/ 6000A52 : B161                		bsr	MarsVideo_MapDrawAll
(1) 1469/ 6000A54 : 0009                		nop
(1) 1470/ 6000A56 : A008                		bra	.from_full
(1) 1471/ 6000A58 : 0009                		nop
(1) 1472/ 6000A5A :                     .clr_init:
(1) 1473/ 6000A5A : B0A9                 		bsr	Mars_CachePurge
(1) 1474/ 6000A5C : 0009                		nop
(1) 1475/ 6000A5E : B33D                		bsr	MarsVideo_DrawFillBlk		; Redraw from refill boxes
(1) 1476/ 6000A60 : 0009                		nop
(1) 1477/ 6000A62 : B1F1                 		bsr	MarsVideo_MapScrlUD
(1) 1478/ 6000A64 : 0009                		nop
(1) 1479/ 6000A66 : B1A1                		bsr	MarsVideo_MapScrlLR
(1) 1480/ 6000A68 : 0009                		nop
(1) 1481/ 6000A6A :                     .from_full:
(1) 1482/ 6000A6A : B0A1                		bsr	Mars_CachePurge
(1) 1483/ 6000A6C : 0009                		nop
(1) 1484/ 6000A6E : B27D                		bsr	MarsVideo_SuperSpr_Draw
(1) 1485/ 6000A70 : 0009                		nop
(1) 1486/ 6000A72 :                     ; 	cpu_me 1
(1) 1487/ 6000A72 : E100                		mov	#0,r1
(1) 1488/ 6000A74 : 9219                		mov	#240,r2				; Show scroll area 0 to 240
(1) 1489/ 6000A76 : B239                		bsr	MarsVideo_ShowScrlBg
(1) 1490/ 6000A78 : 0009                		nop
(1) 1491/ 6000A7A : B2C5                		bsr	MarsVideo_MkFillBlk		; Build refill boxes
(1) 1492/ 6000A7C : 0009                		nop
(1) 1493/ 6000A7E :                     ; 		mov	#_sysreg+comm14+1,r1
(1) 1494/ 6000A7E :                     ; .wait_slv_e:	mov.b	@r1,r0
(1) 1495/ 6000A7E :                     ; 		tst	r0,r0
(1) 1496/ 6000A7E :                     ; 		bf	.wait_slv_e
(1) 1497/ 6000A7E : B25D                		bsr	marsScrl_CopyTopBot
(1) 1498/ 6000A80 : 0009                		nop
(1) 1499/ 6000A82 : 9212                		mov	#240,r2				; $xxFF patcher
(1) 1500/ 6000A84 : D305                		mov	#SET_FBVRAM_PATCH,r3
(1) 1501/ 6000A86 : B10F                		bsr	MarsVideo_FixTblShift
(1) 1502/ 6000A88 : E100                		mov	#0,r1
(1) 1503/ 6000A8A :                     
(1) 1504/ 6000A8A :                     	; ---------------------------------------
(1) 1505/ 6000A8A :                     	; Make the scroll area visible and
(1) 1506/ 6000A8A :                     	; fix the broken lines.
(1) 1507/ 6000A8A : 0009                 		nop
(1) 1508/ 6000A8C : C501                		mov.w	@(marsGbl_ThisFrame,gbr),r0
(1) 1509/ 6000A8E : CA01                		xor	#1,r0
(1) 1510/ 6000A90 : C101                		mov.w	r0,@(marsGbl_ThisFrame,gbr)
(1) 1511/ 6000A92 : AEB9                		bra	master_loop
(1) 1512/ 6000A94 : 0009                		nop
(1) 1513/ 6000A96 :                     		align 4
(1) 1514/ 6000A98 : 2400 0000 0001      		ltorg
          6000A9E : E000 0600 0008 
          6000AA4 : FFF0 0200 FFF0 
          6000AAA : 00F0             
(1) 1515/ 6000AAC :                     
(1) 1516/ 6000AAC :                     ; ====================================================================
(1) 1517/ 6000AAC :                     ; ----------------------------------------------------------------
(1) 1518/ 6000AAC :                     ; Slave entry point
(1) 1519/ 6000AAC :                     ; ----------------------------------------------------------------
(1) 1520/ 6000AAC :                     
(1) 1521/ 6000AAC :                     		align 4
(1) 1522/ 6000AAC :                     SH2_S_Entry:
(1) 1523/ 6000AAC : DF25                		mov	#STACK_SLV,r15		; Reset stack
(1) 1524/ 6000AAE : D026                		mov	#SH2_Slave,r0		; Reset vbr
(1) 1525/ 6000AB0 : 402E                		ldc	r0,vbr
(1) 1526/ 6000AB2 : 9159                		mov.l	#_FRT,r1		; Free-run timer settings
(1) 1527/ 6000AB4 : E000                		mov	#0,r0			; ** REQUIRED FOR REAL HARDWARE **
(1) 1528/ 6000AB6 : 8010                		mov.b	r0,@(0,r1)
(1) 1529/ 6000AB8 : E0E2                		mov.b	#$E2,r0
(1) 1530/ 6000ABA : 8017                		mov.b	r0,@(7,r1)
(1) 1531/ 6000ABC : E000                		mov	#0,r0
(1) 1532/ 6000ABE : 8014                		mov.b	r0,@(4,r1)
(1) 1533/ 6000AC0 : E001                		mov	#1,r0
(1) 1534/ 6000AC2 : 8015                		mov.b	r0,@(5,r1)
(1) 1535/ 6000AC4 : E000                		mov	#0,r0
(1) 1536/ 6000AC6 : 8016                		mov.b	r0,@(6,r1)
(1) 1537/ 6000AC8 : E001                		mov	#1,r0
(1) 1538/ 6000ACA : 8011                		mov.b	r0,@(1,r1)
(1) 1539/ 6000ACC : E000                		mov	#0,r0
(1) 1540/ 6000ACE : 8013                		mov.b	r0,@(3,r1)
(1) 1541/ 6000AD0 : 8012                		mov.b	r0,@(2,r1)
(1) 1542/ 6000AD2 : E0F2                		mov.b	#$F2,r0			; <-- PWM interrupt needs this
(1) 1543/ 6000AD4 : 8017                		mov.b	r0,@(7,r1)
(1) 1544/ 6000AD6 : E000                		mov	#0,r0
(1) 1545/ 6000AD8 : 8014                		mov.b	r0,@(4,r1)
(1) 1546/ 6000ADA : E001                		mov	#1,r0
(1) 1547/ 6000ADC : 8015                		mov.b	r0,@(5,r1)
(1) 1548/ 6000ADE : E0E2                		mov.b	#$E2,r0
(1) 1549/ 6000AE0 : 8017                		mov.b	r0,@(7,r1)		; <-- ***
(1) 1550/ 6000AE2 :                     
(1) 1551/ 6000AE2 :                     	; --------------------------------------------------------
(1) 1552/ 6000AE2 :                     	; Extra interrupt settings
(1) 1553/ 6000AE2 : 9042                		mov.w   #$FEE2,r0		; Extra interrupt priority levels ($FFFFFEE2)
(1) 1554/ 6000AE4 : 9142                		mov     #(3<<4)|(5<<8),r1	; (DMA_LVL<<8)|(WDG_LVL<<4) Current: WDG 3 DMA 5
(1) 1555/ 6000AE6 : 2011                		mov.w   r1,@r0
(1) 1556/ 6000AE8 : 9041                		mov.w   #$FEE4,r0		; Vector jump number for Watchdog ($FFFFFEE4)
(1) 1557/ 6000AEA : 9141                		mov     #($120/4)<<8,r1		; (vbr+POINTER)<<8
(1) 1558/ 6000AEC : 2011                		mov.w   r1,@r0
(1) 1559/ 6000AEE : E0A8                		mov.b	#$A8,r0			; Vector jump number for DMACHANNEL1 ($FFFFFFA8)
(1) 1560/ 6000AF0 : E149                		mov     #($124/4),r1		; (vbr+POINTER)
(1) 1561/ 6000AF2 : 2012                		mov	r1,@r0
(1) 1562/ 6000AF4 : D015                		mov	#RAM_Mars_Global,r0	; Reset gbr
(1) 1563/ 6000AF6 : 401E                		ldc	r0,gbr
(1) 1564/ 6000AF8 :                     
(1) 1565/ 6000AF8 :                     	; --------------------------------------------------------
(1) 1566/ 6000AF8 :                     	; CD32X
(1) 1567/ 6000AF8 :                     	; --------------------------------------------------------
(1) 1569/ 6000AF8 : D115                		mov	#_sysreg+comm0,r1
(1) 1570/ 6000AFA : 6012                .wait_mstr:	mov	@r1,r0
(1) 1571/ 6000AFC : 2008                		tst	r0,r0
(1) 1572/ 6000AFE : 8BFC                		bf	.wait_mstr
(1) 1573/ 6000B00 : 7104                		add	#4,r1
(1) 1574/ 6000B02 : E000                		mov	#0,r0			; clear comm4
(1) 1575/ 6000B04 : 2102                		mov	r0,@r1
(1) 1577/ 6000B06 : B0A5                		bsr	MarsSound_Init		; Init sound
(1) 1578/ 6000B08 : 0009                		nop
(1) 1579/ 6000B0A :                     
(1) 1580/ 6000B0A :                     ; ====================================================================
(1) 1581/ 6000B0A :                     ; ----------------------------------------------------------------
(1) 1582/ 6000B0A :                     ; Slave MAIN code
(1) 1583/ 6000B0A :                     ; ----------------------------------------------------------------
(1) 1584/ 6000B0A :                     
(1) 1585/ 6000B0A :                     SH2_S_HotStart:
(1) 1586/ 6000B0A : E0F0                		mov.b	#$F0,r0			; ** $F0
(1) 1587/ 6000B0C : 600C                		extu.b	r0,r0
(1) 1588/ 6000B0E : 400E                		ldc	r0,sr
(1) 1589/ 6000B10 : 912F                		mov.w	#$FE80,r1		; $FFFFFE80
(1) 1590/ 6000B12 : 902F                		mov.w	#$A518,r0		; Disable Watchdog
(1) 1591/ 6000B14 : 2101                		mov.w	r0,@r1
(1) 1592/ 6000B16 : B04B                		bsr	Mars_CachePurge
(1) 1593/ 6000B18 : 0009                		nop
(1) 1594/ 6000B1A : D10E                		mov	#CACHE_SLAVE,r1
(1) 1595/ 6000B1C : 922B                		mov	#CACHE_SLAVE_E-CACHE_SLAVE,r2
(1) 1596/ 6000B1E : D00E                		mov	#Mars_CacheRamCode,r0
(1) 1597/ 6000B20 : 400B                		jsr	@r0
(1) 1598/ 6000B22 : 0009                		nop
(1) 1599/ 6000B24 : D10D                		mov	#_sysreg,r1
(1) 1600/ 6000B26 : 6011                		mov.w	@r1,r0
(1) 1601/ 6000B28 : CB03                		or	#CMDIRQ_ON|PWMIRQ_ON,r0		; Enable these interrupts
(1) 1602/ 6000B2A : 2101                		mov.w	r0,@r1
(1) 1603/ 6000B2C : D10C                		mov	#_sysreg+comm12,r1
(1) 1604/ 6000B2E : 6011                .wait_mst:	mov.w	@r1,r0
(1) 1605/ 6000B30 : 2008                		tst	r0,r0
(1) 1606/ 6000B32 : 8BFC                		bf	.wait_mst
(1) 1607/ 6000B34 : E1B0                		mov	#_DMAOPERATION,r1		; Enable DMA operation
(1) 1608/ 6000B36 : E001                		mov	#1,r0
(1) 1609/ 6000B38 : 2102                		mov	r0,@r1
(1) 1610/ 6000B3A : E020                		mov.b	#$20,r0				; Interrupts ON
(1) 1611/ 6000B3C : 400E                		ldc	r0,sr
(1) 1612/ 6000B3E : D009                		mov	#slave_loop,r0
(1) 1613/ 6000B40 : 402B                		jmp	@r0
(1) 1614/ 6000B42 : 0009                		nop
(1) 1615/ 6000B44 :                     		align 4
(1) 1616/ 6000B44 : C000 0800 0600      		ltorg
          6000B4A : 0128 0600 1690 
          6000B50 : 2000 4020 0600 
          6000B56 : 1430 0600 0BE4 
          6000B5C : 2000 4000 2000 
          6000B62 : 402C 0600 0B78 
          6000B68 : FE10 FEE2 0530 
          6000B6E : FEE4 4800 FE80 
          6000B74 : A518 0260          
(1) 1617/ 6000B78 :                     
(1) 1618/ 6000B78 :                     ; ----------------------------------------------------------------
(1) 1619/ 6000B78 :                     ; SLAVE CPU loop
(1) 1620/ 6000B78 :                     ; ----------------------------------------------------------------
(1) 1621/ 6000B78 :                     
(1) 1622/ 6000B78 :                     		align 4
(1) 1623/ 6000B78 :                     slave_loop:
(1) 1630/ 6000B78 : D10B                		mov	#_sysreg+comm14,r1		; Frame-ready bitclear
(1) 1631/ 6000B7A : 6011                		mov.w	@r1,r0
(1) 1632/ 6000B7C : D103                		mov	slv_list,r1
(1) 1633/ 6000B7E : C97F                		and	#$7F,r0
(1) 1634/ 6000B80 : 4008                		shll2	r0
(1) 1635/ 6000B82 : 310C                		add	r0,r1
(1) 1636/ 6000B84 : 6012                		mov	@r1,r0
(1) 1637/ 6000B86 : 402B                		jmp	@r0
(1) 1638/ 6000B88 : 0009                		nop
(1) 1639/ 6000B8A :                     		align 4
(1) 1640/ 6000B8C :                     
(1) 1641/ 6000B8C :                     ; ====================================================================
(1) 1642/ 6000B8C :                     
(1) 1643/ 6000B8C :                     slv_list:
(1) 1644/ 6000B8C : 0600 0B94           		dc.l SlvMode_00
(1) 1645/ 6000B90 : 0600 0B98           		dc.l SlvMode_01
(1) 1646/ 6000B94 :                     
(1) 1647/ 6000B94 :                     ; ====================================================================
(1) 1648/ 6000B94 :                     ; ----------------------------------------------------------------
(1) 1649/ 6000B94 :                     ; NOTHING
(1) 1650/ 6000B94 :                     ; ----------------------------------------------------------------
(1) 1651/ 6000B94 :                     
(1) 1652/ 6000B94 :                     SlvMode_00:
(1) 1653/ 6000B94 : AFF0                		bra	slave_loop
(1) 1654/ 6000B96 : 0009                		nop
(1) 1655/ 6000B98 :                     
(1) 1656/ 6000B98 :                     ; ====================================================================
(1) 1657/ 6000B98 :                     ; ----------------------------------------------------------------
(1) 1658/ 6000B98 :                     ; Slave mode 01
(1) 1659/ 6000B98 :                     ; ----------------------------------------------------------------
(1) 1660/ 6000B98 :                     
(1) 1661/ 6000B98 :                     		align 4
(1) 1662/ 6000B98 :                     SlvMode_01:
(1) 1663/ 6000B98 : B00A                		bsr	Mars_CachePurge
(1) 1664/ 6000B9A : 0009                		nop
(1) 1665/ 6000B9C : D103                		mov	#_sysreg+comm14+1,r1
(1) 1666/ 6000B9E : E000                		mov	#0,r0
(1) 1667/ 6000BA0 : 2100                		mov.b	r0,@r1
(1) 1668/ 6000BA2 : AFE9                		bra	slave_loop
(1) 1669/ 6000BA4 : 0009                		nop
(1) 1670/ 6000BA6 :                     		align 4
(1) 1671/ 6000BA8 : 2000 402E 2000      		ltorg
          6000BAE : 402F             
(1) 1672/ 6000BB0 :                     
(1) 1673/ 6000BB0 :                     ; ====================================================================
(1) 1674/ 6000BB0 :                     ; ----------------------------------------------------------------
(1) 1675/ 6000BB0 :                     ; Shared routines
(1) 1676/ 6000BB0 :                     ; ----------------------------------------------------------------
(1) 1677/ 6000BB0 :                     
(1) 1678/ 6000BB0 :                     ; --------------------------------------------------------
(1) 1679/ 6000BB0 :                     ; Mars_CachePurge
(1) 1680/ 6000BB0 :                     ;
(1) 1681/ 6000BB0 :                     ; Purges the internal cache, call this often.
(1) 1682/ 6000BB0 :                     ;
(1) 1683/ 6000BB0 :                     ; Breaks:
(1) 1684/ 6000BB0 :                     ; r0-r1
(1) 1685/ 6000BB0 :                     ; --------------------------------------------------------
(1) 1686/ 6000BB0 :                     
(1) 1687/ 6000BB0 :                     		align 4
(1) 1688/ 6000BB0 :                     Mars_CachePurge:
(1) 1689/ 6000BB0 : 9136                		mov.w	#_CCR&$FFFF,r1		; Purge ON, Cache OFF
(1) 1690/ 6000BB2 : E010                		mov	#%10000,r0
(1) 1691/ 6000BB4 : 2100                		mov.b	r0,@r1
(1) 1692/ 6000BB6 : 0009                		nop
(1) 1693/ 6000BB8 : 0009                		nop
(1) 1694/ 6000BBA : 0009                		nop
(1) 1695/ 6000BBC : 0009                		nop
(1) 1696/ 6000BBE : 0009                		nop
(1) 1697/ 6000BC0 : 0009                		nop
(1) 1698/ 6000BC2 : 0009                		nop
(1) 1699/ 6000BC4 : E009                		mov	#%01001,r0		; Purge OFF, Two-Way mode, Cache ON
(1) 1700/ 6000BC6 : 000B                		rts
(1) 1701/ 6000BC8 : 2100                		mov.b	r0,@r1
(1) 1702/ 6000BCA :                     
(1) 1703/ 6000BCA :                     ; --------------------------------------------------------
(1) 1704/ 6000BCA :                     ; Mars_ClearCacheCode
(1) 1705/ 6000BCA :                     ;
(1) 1706/ 6000BCA :                     ; Clear the entire "fast code" section for the
(1) 1707/ 6000BCA :                     ; current CPU
(1) 1708/ 6000BCA :                     ;
(1) 1709/ 6000BCA :                     ; Breaks:
(1) 1710/ 6000BCA :                     ; r0-r2
(1) 1711/ 6000BCA :                     ; --------------------------------------------------------
(1) 1712/ 6000BCA :                     
(1) 1713/ 6000BCA :                     		align 4
(1) 1714/ 6000BCC :                     Mars_ClearCacheCode:
(1) 1715/ 6000BCC : D112                		mov.l	#$C0000000+$800,r1
(1) 1716/ 6000BCE : E000                		mov	#0,r0
(1) 1717/ 6000BD0 : 9227                		mov.w	#$80,r2
(1) 1718/ 6000BD2 :                     .loop:
(1) 1719/ 6000BD2 : 2106                		mov	r0,@-r1
(1) 1720/ 6000BD4 : 2106                		mov	r0,@-r1
(1) 1721/ 6000BD6 : 2106                		mov	r0,@-r1
(1) 1722/ 6000BD8 : 2106                		mov	r0,@-r1
(1) 1723/ 6000BDA : 4210                		dt	r2
(1) 1724/ 6000BDC : 8BF9                		bf	.loop
(1) 1725/ 6000BDE : 000B                		rts
(1) 1726/ 6000BE0 : 0009                		nop
(1) 1727/ 6000BE2 :                     		align 4
(1) 1728/ 6000BE4 :                     
(1) 1729/ 6000BE4 :                     ; ----------------------------------------------------------------
(1) 1730/ 6000BE4 :                     ; Mars_CacheRamCode
(1) 1731/ 6000BE4 :                     ;
(1) 1732/ 6000BE4 :                     ; Loads "fast code" into the SH2's cache, maximum size is
(1) 1733/ 6000BE4 :                     ; $700 bytes aprox.
(1) 1734/ 6000BE4 :                     ;
(1) 1735/ 6000BE4 :                     ; Input:
(1) 1736/ 6000BE4 :                     ; r1 | Code to send
(1) 1737/ 6000BE4 :                     ; r2 | Size
(1) 1738/ 6000BE4 :                     ;
(1) 1739/ 6000BE4 :                     ; Breaks:
(1) 1740/ 6000BE4 :                     ; r0/r3
(1) 1741/ 6000BE4 :                     ; ----------------------------------------------------------------
(1) 1742/ 6000BE4 :                     
(1) 1743/ 6000BE4 :                     		align 4
(1) 1744/ 6000BE4 :                     Mars_CacheRamCode:
(1) 1745/ 6000BE4 : 4F03                		stc	sr,@-r15	; Interrupts OFF
(1) 1746/ 6000BE6 : E0F0                		mov.b	#$F0,r0		; ** $F0
(1) 1747/ 6000BE8 : 600C                		extu.b	r0,r0
(1) 1748/ 6000BEA : 400E                		ldc	r0,sr
(1) 1749/ 6000BEC : 9318                		mov	#_CCR,r3
(1) 1750/ 6000BEE : E010                		mov	#%00010000,r0	; Cache purge + Disable
(1) 1751/ 6000BF0 : 2301                		mov.w	r0,@r3
(1) 1752/ 6000BF2 : 0009                		nop
(1) 1753/ 6000BF4 : 0009                		nop
(1) 1754/ 6000BF6 : 0009                		nop
(1) 1755/ 6000BF8 : 0009                		nop
(1) 1756/ 6000BFA : 0009                		nop
(1) 1757/ 6000BFC : 0009                		nop
(1) 1758/ 6000BFE : 0009                		nop
(1) 1759/ 6000C00 : 0009                		nop
(1) 1760/ 6000C02 : E009                		mov	#%00001001,r0	; Cache two-way mode + Enable
(1) 1761/ 6000C04 : 2301                		mov.w	r0,@r3
(1) 1762/ 6000C06 : D305                		mov 	#$C0000000,r3
(1) 1763/ 6000C08 : 4209                		shlr2	r2
(1) 1764/ 6000C0A :                     .copy:
(1) 1765/ 6000C0A : 6016                		mov 	@r1+,r0
(1) 1766/ 6000C0C : 2302                		mov 	r0,@r3
(1) 1767/ 6000C0E : 4210                		dt	r2
(1) 1768/ 6000C10 : 8FFB                		bf/s	.copy
(1) 1769/ 6000C12 : 7304                		add 	#4,r3
(1) 1770/ 6000C14 : 000B                		rts
(1) 1771/ 6000C16 : 4F07                		ldc	@r15+,sr
(1) 1772/ 6000C18 :                     		align 4
(1) 1773/ 6000C18 : C000 0800 C000      		ltorg
          6000C1E : 0000 FE92 0080    
(1) 1774/ 6000C24 :                     
(1) 1775/ 6000C24 :                     ; --------------------------------------------------------
(1) 1776/ 6000C24 :                     ; Mars_SetWatchdog
(1) 1777/ 6000C24 :                     ;
(1) 1778/ 6000C24 :                     ; Prepares watchdog interrupt
(1) 1779/ 6000C24 :                     ;
(1) 1780/ 6000C24 :                     ; Input:
(1) 1781/ 6000C24 :                     ; r1 | Watchdog CPU clock divider
(1) 1782/ 6000C24 :                     ; r2 | Watchdog Pre-timer
(1) 1783/ 6000C24 :                     ; --------------------------------------------------------
(1) 1784/ 6000C24 :                     
(1) 1785/ 6000C24 :                     		align 4
(1) 1786/ 6000C24 :                     Mars_SetWatchdog:
(1) 1787/ 6000C24 : 0402                		stc	sr,r4
(1) 1788/ 6000C26 : E0F0                		mov.b	#$F0,r0			; ** $F0
(1) 1789/ 6000C28 : 600C                		extu.b	r0,r0
(1) 1790/ 6000C2A : 400E                		ldc 	r0,sr
(1) 1791/ 6000C2C : 930E                		mov.l	#_CCR,r3		; Refresh Cache
(1) 1792/ 6000C2E : E008                		mov	#%00001000,r0		; Two-way mode
(1) 1793/ 6000C30 : 2301                		mov.w	r0,@r3
(1) 1794/ 6000C32 : E019                		mov	#%00011001,r0		; Cache purge / Two-way mode / Cache ON
(1) 1795/ 6000C34 : 2301                		mov.w	r0,@r3
(1) 1796/ 6000C36 : 930A                		mov.w	#$FE80,r3		; $FFFFFE80
(1) 1797/ 6000C38 : 900A                		mov.w	#$5A00,r0		; Watchdog pre-timer
(1) 1798/ 6000C3A : 202B                		or	r2,r0
(1) 1799/ 6000C3C : 2301                		mov.w	r0,@r3
(1) 1800/ 6000C3E : 9008                		mov.w	#$A538,r0		; Enable Watchdog
(1) 1801/ 6000C40 : 201B                		or	r1,r0
(1) 1802/ 6000C42 : 2301                		mov.w	r0,@r3
(1) 1803/ 6000C44 : 440E                		ldc	r4,sr
(1) 1804/ 6000C46 : 000B                		rts
(1) 1805/ 6000C48 : 0009                		nop
(1) 1806/ 6000C4A :                     		align 4
(1) 1807/ 6000C4C : FE92 FE80 5A00      		ltorg
          6000C52 : A538             
(1) 1808/ 6000C54 :                     
(1) 1809/ 6000C54 :                     ; ====================================================================
(1) 1810/ 6000C54 :                     ; ----------------------------------------------------------------
(1) 1811/ 6000C54 :                     ; Includes
(1) 1812/ 6000C54 :                     ; ----------------------------------------------------------------
(1) 1813/ 6000C54 :                     
(1) 1814/ 6000C54 :                     		align 4
(1) 1815/ 6000C54 :                     		include "system/mars/sound.asm"
(2)    1/ 6000C54 :                     ; ====================================================================
(2)    2/ 6000C54 :                     ; ----------------------------------------------------------------
(2)    3/ 6000C54 :                     ; 32X Sound, SLAVE CPU
(2)    4/ 6000C54 :                     ;
(2)    5/ 6000C54 :                     ; Playback code (the PWM interrupt) is located at cache_slv.asm
(2)    6/ 6000C54 :                     ; ----------------------------------------------------------------
(2)    7/ 6000C54 :                     
(2)    8/ 6000C54 :                     ; --------------------------------------------------------
(2)    9/ 6000C54 :                     ; Settings
(2)   10/ 6000C54 :                     ; --------------------------------------------------------
(2)   11/ 6000C54 :                     
(2)   12/ 6000C54 : =$3E80               SAMPLE_RATE	equ 16000	; Best one for CPU speed reasons
(2)   13/ 6000C54 : =$7                  MAX_PWMCHNL	equ 7
(2)   14/ 6000C54 :                     
(2)   15/ 6000C54 :                     ; --------------------------------------------------------
(2)   16/ 6000C54 :                     ; Structs
(2)   17/ 6000C54 :                     ; --------------------------------------------------------
(2)   18/ 6000C54 :                     
(2)   19/ 6000C54 :                     ; 32X sound channel
(2)   20/ 6000C54 : (MACRO)              		strct 0
(2)   20/ 6000C54 : =$6000C54            GLBL_LASTPC     set *
(2)   20/   57454 :                                     dephase
(2)   20/       0 :                                     phase 0
(2)   20/       0 : =$0                  GLBL_LASTORG    set *
(2)   21/       0 :                     mchnsnd_enbl	ds.l 1		; %E000 SLlr | Enable-Stereo,Loop,left,right
(2)   22/       4 :                     mchnsnd_read	ds.l 1		; READ point
(2)   23/       8 :                     mchnsnd_bank	ds.l 1		; CS1 or CS3
(2)   24/       C :                     mchnsnd_start	ds.l 1		; Start point $00xxxxxx << 8
(2)   25/      10 :                     mchnsnd_len	ds.l 1		; Lenght << 8
(2)   26/      14 :                     mchnsnd_loop	ds.l 1		; Loop point << 8
(2)   27/      18 :                     mchnsnd_pitch	ds.l 1		; Pitch $xx.xx
(2)   28/      1C :                     mchnsnd_vol	ds.l 1		; Volume ($0000-Max)
(2)   29/      20 :                     sizeof_marssnd	ds.l 0
(2)   30/      20 : (MACRO)              		endstrct
(2)   30/       0 :                                     org GLBL_LASTORG
(2)   30/ 6000C54 :                                     phase GLBL_LASTPC
(2)   31/ 6000C54 :                     
(2)   32/ 6000C54 :                     ; ====================================================================
(2)   33/ 6000C54 :                     ; --------------------------------------------------------
(2)   34/ 6000C54 :                     ; Init Sound PWM
(2)   35/ 6000C54 :                     ;
(2)   36/ 6000C54 :                     ; Cycle register formulas:
(2)   37/ 6000C54 :                     ; NTSC ((((23011361<<1)/SAMPLE_RATE+1)>>1)+1)
(2)   38/ 6000C54 :                     ; PAL  ((((22801467<<1)/SAMPLE_RATE+1)>>1)+1)
(2)   39/ 6000C54 :                     ;
(2)   40/ 6000C54 :                     ; NOTE: The CLICK sound after calling this is normal.
(2)   41/ 6000C54 :                     ; --------------------------------------------------------
(2)   42/ 6000C54 :                     
(2)   43/ 6000C54 :                     		align 4
(2)   44/ 6000C54 :                     MarsSound_Init:
(2)   45/ 6000C54 : 4F13                		stc	gbr,@-r15
(2)   46/ 6000C56 : D006                		mov	#_sysreg,r0
(2)   47/ 6000C58 : 401E                		ldc	r0,gbr
(2)   48/ 6000C5A : 900B                		mov	#$0105,r0					; Timing interval $01, output L/R
(2)   49/ 6000C5C : C118                		mov.w	r0,@(timerctl,gbr)
(2)   50/ 6000C5E : 900A                		mov	#((((23011361<<1)/SAMPLE_RATE+1)>>1)+1),r0	; Sample rate
(2)   51/ 6000C60 : C119                		mov.w	r0,@(cycle,gbr)
(2)   52/ 6000C62 : E001                		mov	#1,r0
(2)   53/ 6000C64 : C11C                		mov.w	r0,@(monowidth,gbr)
(2)   54/ 6000C66 : C11C                		mov.w	r0,@(monowidth,gbr)
(2)   55/ 6000C68 : C11C                		mov.w	r0,@(monowidth,gbr)
(2)   56/ 6000C6A : 4F17                		ldc	@r15+,gbr
(2)   57/ 6000C6C : 000B                		rts
(2)   58/ 6000C6E : 0009                		nop
(2)   59/ 6000C70 :                     		align 4
(2)   60/ 6000C70 :                     
(2)   61/ 6000C70 :                     ; ====================================================================
(2)   62/ 6000C70 :                     
(2)   63/ 6000C70 : 2000 4000 0105      		ltorg			; Save literals
          6000C76 : 059F             
(2)   64/ 6000C78 :                     
(1) 1816/ 6000C78 :                     		include "system/mars/video.asm"
(2)    1/ 6000C78 :                     ; ===========================================================================
(2)    2/ 6000C78 :                     ; ----------------------------------------------------------------
(2)    3/ 6000C78 :                     ; 32X Video, MASTER side.
(2)    4/ 6000C78 :                     ;
(2)    5/ 6000C78 :                     ; SOME routines are located on the cache for speed reasons.
(2)    6/ 6000C78 :                     ; ----------------------------------------------------------------
(2)    7/ 6000C78 :                     
(2)    8/ 6000C78 :                     ; ====================================================================
(2)    9/ 6000C78 :                     ; --------------------------------------------------------
(2)   10/ 6000C78 :                     ; Settings
(2)   11/ 6000C78 :                     ; --------------------------------------------------------
(2)   12/ 6000C78 :                     
(2)   13/ 6000C78 : =$10                 SET_MSCRLSIZE		equ 16		; !! Hard-coded, can't change for now.
(2)   14/ 6000C78 : =$140                SET_MSCRLWDTH		equ 320		; Affects scrolling and SuperSprites
(2)   15/ 6000C78 : =$F0                 SET_MSCRLHGHT		equ 240		;                 ''
(2)   16/ 6000C78 : =$1FD80              SET_FBVRAM_BLANK	equ $1FD80	; Framebuffer location of the BLANK line
(2)   17/ 6000C78 : =$1E000              SET_FBVRAM_PATCH	equ $1E000	; Framebuffer location to store the affected XShift lines.
(2)   18/ 6000C78 :                     
(2)   19/ 6000C78 :                     ; --------------------------------------------------------
(2)   20/ 6000C78 :                     ; Variables
(2)   21/ 6000C78 :                     ; --------------------------------------------------------
(2)   22/ 6000C78 :                     
(2)   23/ 6000C78 :                     ; --------------------------------------------------------
(2)   24/ 6000C78 :                     ; Structs
(2)   25/ 6000C78 :                     ; --------------------------------------------------------
(2)   26/ 6000C78 :                     
(2)   27/ 6000C78 :                     ; ** see shared.asm
(2)   28/ 6000C78 :                     
(2)   29/ 6000C78 :                     ; ====================================================================
(2)   30/ 6000C78 :                     ; --------------------------------------------------------
(2)   31/ 6000C78 :                     ; Init MARS Video
(2)   32/ 6000C78 :                     ;
(2)   33/ 6000C78 :                     ; Breaks:
(2)   34/ 6000C78 :                     ; r1-r4
(2)   35/ 6000C78 :                     ; --------------------------------------------------------
(2)   36/ 6000C78 :                     
(2)   37/ 6000C78 :                     		align 4
(2)   38/ 6000C78 :                     MarsVideo_Init:
(2)   39/ 6000C78 : D121                		mov	#_sysreg,r1
(2)   40/ 6000C7A : 9047                		mov 	#FM,r0				; Set SuperVDP permission for SH2
(2)   41/ 6000C7C : 8010                  		mov.b	r0,@(adapter,r1)		; ** The Genesis side will write the palette**
(2)   42/ 6000C7E : D121                		mov	#_vdpreg,r1
(2)   43/ 6000C80 : E000                		mov	#0,r0				; BLANK mode
(2)   44/ 6000C82 : 8011                		mov.b	r0,@(bitmapmd,r1)
(2)   45/ 6000C84 : 9143                		mov	#SET_MSCRLWDTH+SET_MSCRLSIZE,r1	; Set scroll-area settings
(2)   46/ 6000C86 : 9243                		mov	#SET_MSCRLHGHT+SET_MSCRLSIZE,r2
(2)   47/ 6000C88 : 221E                		mulu	r1,r2
(2)   48/ 6000C8A : 6013                		mov	r1,r0
(2)   49/ 6000C8C : C211                		mov	r0,@(marsGbl_Scrl_Wdth,gbr)
(2)   50/ 6000C8E : 6023                		mov	r2,r0
(2)   51/ 6000C90 : C212                		mov	r0,@(marsGbl_Scrl_Hght,gbr)
(2)   52/ 6000C92 : 001A                		sts	macl,r0
(2)   53/ 6000C94 : C210                		mov	r0,@(marsGbl_Scrl_Size,gbr)
(2)   54/ 6000C96 : 903C                		mov	#$200,r0
(2)   55/ 6000C98 : C213                		mov	r0,@(marsGbl_Scrl_FbOut,gbr)
(2)   56/ 6000C9A : E000                		mov	#0,r0
(2)   57/ 6000C9C : C101                		mov.w	r0,@(marsGbl_ThisFrame,gbr)
(2)   58/ 6000C9E : C209                		mov	r0,@(marsGbl_Scrl_FbY,gbr)
(2)   59/ 6000CA0 : C208                		mov	r0,@(marsGbl_Scrl_FbTL,gbr)
(2)   60/ 6000CA2 :                     ; 		mov	r0,@(marsGbl_Scrl_Xpos,gbr)	; break on HW on reset
(2)   61/ 6000CA2 :                     ; 		mov	r0,@(marsGbl_Scrl_Ypos,gbr)
(2)   62/ 6000CA2 : 000B                		rts
(2)   63/ 6000CA4 : 0009                		nop
(2)   64/ 6000CA6 :                     		align 4
(2)   65/ 6000CA8 :                     ; 		ltorg
(2)   66/ 6000CA8 :                     
(2)   67/ 6000CA8 :                     ; ====================================================================
(2)   68/ 6000CA8 :                     ; ----------------------------------------------------------------
(2)   69/ 6000CA8 :                     ; Subroutines
(2)   70/ 6000CA8 :                     ; ----------------------------------------------------------------
(2)   71/ 6000CA8 :                     
(2)   72/ 6000CA8 :                     ; --------------------------------------------------------
(2)   73/ 6000CA8 :                     ; MarsVideo_FixTblShift
(2)   74/ 6000CA8 :                     ;
(2)   75/ 6000CA8 :                     ; Fix the affected $xxFF lines by scrolling using the
(2)   76/ 6000CA8 :                     ; linetable. MUST call this BEFORE flipping
(2)   77/ 6000CA8 :                     ; the Framebuffer.
(2)   78/ 6000CA8 :                     ;
(2)   79/ 6000CA8 :                     ; Input:
(2)   80/ 6000CA8 :                     ; r1 | Start line
(2)   81/ 6000CA8 :                     ; r2 | Number of lines
(2)   82/ 6000CA8 :                     ; r3 | Location for the fixed lines
(2)   83/ 6000CA8 :                     ;
(2)   84/ 6000CA8 :                     ; Breaks:
(2)   85/ 6000CA8 :                     ; r7-r14
(2)   86/ 6000CA8 :                     ; --------------------------------------------------------
(2)   87/ 6000CA8 :                     
(2)   88/ 6000CA8 :                     		align 4
(2)   89/ 6000CA8 :                     MarsVideo_FixTblShift:
(2)   90/ 6000CA8 : DE16                		mov	#_vdpreg,r14
(2)   91/ 6000CAA : 84E1                		mov.b	@(bitmapmd,r14),r0		; Check if we are on indexed mode
(2)   92/ 6000CAC : C903                		and	#%11,r0
(2)   93/ 6000CAE : 8801                		cmp/eq	#1,r0
(2)   94/ 6000CB0 : 8B23                		bf	.ptchset
(2)   95/ 6000CB2 : C500                		mov.w	@(marsGbl_XShift,gbr),r0	; XShift is set? (EXTERNAL value)
(2)   96/ 6000CB4 : C901                		and	#1,r0
(2)   97/ 6000CB6 : 2008                		tst	r0,r0
(2)   98/ 6000CB8 : 891F                		bt	.ptchset
(2)   99/ 6000CBA :                     
(2)  100/ 6000CBA : DE13                		mov	#_framebuffer,r14		; r14 - Framebuffer BASE
(2)  101/ 6000CBC : 6CE3                		mov	r14,r12				; r12 - Framebuffer output for the patched pixel lines
(2)  102/ 6000CBE : 3C3C                		add	r3,r12
(2)  103/ 6000CC0 : 6013                		mov	r1,r0
(2)  104/ 6000CC2 : 4008                		shll2	r0
(2)  105/ 6000CC4 : 3E0C                		add	r0,r14
(2)  106/ 6000CC6 : 6DE3                		mov	r14,r13				; r13 - Framebuffer lines to check
(2)  107/ 6000CC8 : 6B23                		mov	r2,r11				; r11 - Lines to check
(2)  108/ 6000CCA : E0FF                		mov	#-1,r0
(2)  109/ 6000CCC : 6A0C                		extu.b	r0,r10				; r10 - AND byte to check ($FF)
(2)  110/ 6000CCE : 690D                		extu.w	r0,r9				;  r9 - AND word limit ($FFFF)
(2)  111/ 6000CD0 :                     .loop:
(2)  112/ 6000CD0 : 60D1                		mov.w	@r13,r0
(2)  113/ 6000CD2 : 2099                		and	r9,r0
(2)  114/ 6000CD4 : 6703                		mov	r0,r7
(2)  115/ 6000CD6 : 20A9                		and	r10,r0
(2)  116/ 6000CD8 : 30A0                		cmp/eq	r10,r0
(2)  117/ 6000CDA : 8B0B                		bf	.tblexit
(2)  118/ 6000CDC : 4700                		shll	r7
(2)  119/ 6000CDE : 37EC                		add	r14,r7
(2)  120/ 6000CE0 : 60C3                		mov	r12,r0
(2)  121/ 6000CE2 : 4001                		shlr	r0
(2)  122/ 6000CE4 : 2D01                		mov.w	r0,@r13
(2)  123/ 6000CE6 : 9315                		mov	#(320+4)/2,r3
(2)  124/ 6000CE8 :                     .copy:
(2)  125/ 6000CE8 : 6071                		mov.w	@r7,r0
(2)  126/ 6000CEA : 2C01                		mov.w	r0,@r12
(2)  127/ 6000CEC : 7702                		add	#2,r7
(2)  128/ 6000CEE : 4310                		dt	r3
(2)  129/ 6000CF0 : 8FFA                		bf/s	.copy
(2)  130/ 6000CF2 : 7C02                		add	#2,r12
(2)  131/ 6000CF4 :                     .tblexit:
(2)  132/ 6000CF4 : 4B10                		dt	r11
(2)  133/ 6000CF6 : 8FEB                		bf/s	.loop
(2)  134/ 6000CF8 : 7D02                		add	#2,r13
(2)  135/ 6000CFA :                     .ptchset:
(2)  136/ 6000CFA : 000B                		rts
(2)  137/ 6000CFC : 0009                		nop
(2)  138/ 6000CFE :                     		align 4
(2)  139/ 6000D00 : 2000 4000 2000      		ltorg
          6000D06 : 4100 2400 0000 
          6000D0C : 0080 0150 0100 
          6000D12 : 0200 00A2          
(2)  140/ 6000D16 :                     
(2)  141/ 6000D16 :                     ; ====================================================================
(2)  142/ 6000D16 :                     ; ----------------------------------------------------------------
(2)  143/ 6000D16 :                     ; 2D scrolling-area section
(2)  144/ 6000D16 :                     ; ----------------------------------------------------------------
(2)  145/ 6000D16 :                     
(2)  146/ 6000D16 :                     ; ----------------------------------------------------------------
(2)  147/ 6000D16 :                     ; MarsVideo_MapDrawAll
(2)  148/ 6000D16 :                     ;
(2)  149/ 6000D16 :                     ; Draw the scrolling area to the framebuffer
(2)  150/ 6000D16 :                     ;
(2)  151/ 6000D16 :                     ; Input:
(2)  152/ 6000D16 :                     ; r14 | Framebuffer output
(2)  153/ 6000D16 :                     ; r13 | Scroll size W*H
(2)  154/ 6000D16 :                     ; r12 | Scroll height
(2)  155/ 6000D16 :                     ; r11 | Scroll width
(2)  156/ 6000D16 :                     ; r10 | Scroll TL-pos read / 16 *
(2)  157/ 6000D16 :                     ;  r9 | Scroll Y-pos read / 16 *
(2)  158/ 6000D16 :                     ;  r8 | Graphics data
(2)  159/ 6000D16 :                     ;  r7 | Map data
(2)  160/ 6000D16 :                     ;  r6 | Map Y read index
(2)  161/ 6000D16 :                     ;  r5 | Map X read index
(2)  162/ 6000D16 :                     ;
(2)  163/ 6000D16 :                     ; ** CPU HEAVY ROUTINE **
(2)  164/ 6000D16 :                     ; ----------------------------------------------------------------
(2)  165/ 6000D16 :                     
(2)  166/ 6000D16 :                     		align 4
(2)  167/ 6000D18 :                     MarsVideo_MapDrawAll:
(2)  168/ 6000D18 : 4F22                		sts	pr,@-r15
(2)  169/ 6000D1A : 2F56                		mov	r5,@-r15
(2)  170/ 6000D1C : 2F66                		mov	r6,@-r15
(2)  171/ 6000D1E : 2F96                		mov	r9,@-r15
(2)  172/ 6000D20 : 2FA6                		mov	r10,@-r15
(2)  173/ 6000D22 :                     
(2)  174/ 6000D22 : 6093                		mov	r9,r0
(2)  175/ 6000D24 : E4F0                		mov	#-16,r4
(2)  176/ 6000D26 : 2049                		and	r4,r0
(2)  177/ 6000D28 : 2B0F                		muls	r0,r11
(2)  178/ 6000D2A : 001A                		sts	macl,r0		; Y block pos
(2)  179/ 6000D2C : 64A3                		mov	r10,r4
(2)  180/ 6000D2E : 340C                		add	r0,r4
(2)  181/ 6000D30 : E2FC                		mov	#-4,r2
(2)  182/ 6000D32 : 2429                		and	r2,r4
(2)  183/ 6000D34 :                     
(2)  184/ 6000D34 : 6AB3                		mov	r11,r10
(2)  185/ 6000D36 : 4A09                		shlr2	r10
(2)  186/ 6000D38 : 4A09                		shlr2	r10
(2)  187/ 6000D3A :                     .x_loop:
(2)  188/ 6000D3A : 6963                		mov	r6,r9
(2)  189/ 6000D3C : 34D3                		cmp/ge	r13,r4
(2)  190/ 6000D3E : 8B00                		bf	.tl_snap
(2)  191/ 6000D40 : 34D8                		sub	r13,r4
(2)  192/ 6000D42 :                     .tl_snap:
(2)  193/ 6000D42 : 6243                		mov	r4,r2
(2)  194/ 6000D44 : 63C3                		mov	r12,r3
(2)  195/ 6000D46 : 4309                		shlr2	r3
(2)  196/ 6000D48 : 4309                		shlr2	r3
(2)  197/ 6000D4A :                     .y_loop:
(2)  198/ 6000D4A : 430A                		lds	r3,mach
(2)  199/ 6000D4C : 441A                		lds	r4,macl
(2)  200/ 6000D4E : E30F                		mov	#(256/16)-1,r3
(2)  201/ 6000D50 : 6493                		mov	r9,r4		; Y pos
(2)  202/ 6000D52 : 4409                		shlr2	r4
(2)  203/ 6000D54 : 4409                		shlr2	r4
(2)  204/ 6000D56 : 2439                		and	r3,r4
(2)  205/ 6000D58 : 4408                		shll2	r4
(2)  206/ 6000D5A : 4408                		shll2	r4
(2)  207/ 6000D5C : 4400                		shll	r4
(2)  208/ 6000D5E : E31F                		mov	#(512/16)-1,r3
(2)  209/ 6000D60 : 6053                		mov	r5,r0		; X pos
(2)  210/ 6000D62 : 4009                		shlr2	r0
(2)  211/ 6000D64 : 4009                		shlr2	r0
(2)  212/ 6000D66 : 2039                		and	r3,r0
(2)  213/ 6000D68 : 304C                		add	r4,r0
(2)  214/ 6000D6A : 4000                		shll	r0
(2)  215/ 6000D6C : 6373                		mov	r7,r3
(2)  216/ 6000D6E : 330C                		add	r0,r3
(2)  217/ 6000D70 : 91F8                		mov	#$7FF,r1
(2)  218/ 6000D72 : 6031                		mov.w	@r3,r0
(2)  219/ 6000D74 : 6303                		mov	r0,r3
(2)  220/ 6000D76 : 2319                		and	r1,r3
(2)  221/ 6000D78 : E100                		mov	#0,r1
(2)  222/ 6000D7A : 2338                		tst	r3,r3
(2)  223/ 6000D7C : 8903                		bt	.blank
(2)  224/ 6000D7E : 4310                		dt	r3
(2)  225/ 6000D80 : 4318                		shll8	r3		; 16x16
(2)  226/ 6000D82 : 6133                		mov	r3,r1
(2)  227/ 6000D84 : 318C                		add	r8,r1
(2)  228/ 6000D86 :                     .blank:
(2)  229/ 6000D86 : 041A                		sts	macl,r4
(2)  230/ 6000D88 : 030A                		sts	mach,r3
(2)  231/ 6000D8A : B2C1                		bsr	scrlDrw_DrawBlk
(2)  232/ 6000D8C : 2F46                		mov	r4,@-r15
(2)  233/ 6000D8E : 64F6                		mov	@r15+,r4
(2)  234/ 6000D90 : 4310                		dt	r3
(2)  235/ 6000D92 : 8FDA                		bf/s	.y_loop
(2)  236/ 6000D94 : 7910                		add	#16,r9
(2)  237/ 6000D96 : 7410                		add	#16,r4
(2)  238/ 6000D98 : 4A10                		dt	r10
(2)  239/ 6000D9A : 8FCE                		bf/s	.x_loop
(2)  240/ 6000D9C : 7510                		add	#16,r5
(2)  241/ 6000D9E :                     .exit_lr:
(2)  242/ 6000D9E : 6AF6                		mov	@r15+,r10
(2)  243/ 6000DA0 : 69F6                		mov	@r15+,r9
(2)  244/ 6000DA2 : 66F6                		mov	@r15+,r6
(2)  245/ 6000DA4 : 65F6                		mov	@r15+,r5
(2)  246/ 6000DA6 : 4F26                		lds	@r15+,pr
(2)  247/ 6000DA8 : 000B                		rts
(2)  248/ 6000DAA : 0009                		nop
(2)  249/ 6000DAC :                     		align 4
(2)  250/ 6000DAC :                     
(2)  251/ 6000DAC :                     ; ----------------------------------------------------------------
(2)  252/ 6000DAC :                     ; MarsVideo_MapScrlLR
(2)  253/ 6000DAC :                     ;
(2)  254/ 6000DAC :                     ; Draws Left or Right scroll areas outside of
(2)  255/ 6000DAC :                     ; the screen.
(2)  256/ 6000DAC :                     ;
(2)  257/ 6000DAC :                     ; Input:
(2)  258/ 6000DAC :                     ; r14 | Framebuffer output
(2)  259/ 6000DAC :                     ; r13 | Scroll size W*H
(2)  260/ 6000DAC :                     ; r12 | Scroll height
(2)  261/ 6000DAC :                     ; r11 | Scroll width
(2)  262/ 6000DAC :                     ; r10 | Scroll TL-pos read
(2)  263/ 6000DAC :                     ;  r9 | Scroll Y-pos read
(2)  264/ 6000DAC :                     ;  r8 | Graphics data
(2)  265/ 6000DAC :                     ;  r7 | Map data
(2)  266/ 6000DAC :                     ;  r6 | Y pos
(2)  267/ 6000DAC :                     ;  r5 | X pos
(2)  268/ 6000DAC :                     ; ----------------------------------------------------------------
(2)  269/ 6000DAC :                     
(2)  270/ 6000DAC :                     		align 4
(2)  271/ 6000DAC :                     MarsVideo_MapScrlLR:
(2)  272/ 6000DAC : 4F22                		sts	pr,@-r15
(2)  273/ 6000DAE : 2F56                		mov	r5,@-r15
(2)  274/ 6000DB0 : 2F66                		mov	r6,@-r15
(2)  275/ 6000DB2 :                     
(2)  276/ 6000DB2 : 2888                		tst	r8,r8
(2)  277/ 6000DB4 : 8943                		bt	.exit_lr
(2)  278/ 6000DB6 : E300                		mov	#0,r3
(2)  279/ 6000DB8 : C60D                		mov	@(marsGbl_Scrl_DrwL,gbr),r0
(2)  280/ 6000DBA : 2008                		tst	r0,r0
(2)  281/ 6000DBC : 8B06                		bf	.dir_l
(2)  282/ 6000DBE : 93D2                		mov	#SET_MSCRLWDTH,r3
(2)  283/ 6000DC0 : C60C                		mov	@(marsGbl_Scrl_DrwR,gbr),r0
(2)  284/ 6000DC2 : 2008                		tst	r0,r0
(2)  285/ 6000DC4 : 8B05                		bf	.dir_r
(2)  286/ 6000DC6 : A03A                		bra	.exit_lr
(2)  287/ 6000DC8 : 0009                		nop	; align
(2)  288/ 6000DCA : 0009                		nop
(2)  289/ 6000DCC :                     .dir_l:
(2)  290/ 6000DCC : 4010                		dt	r0
(2)  291/ 6000DCE : A002                		bra	.go_lr
(2)  292/ 6000DD0 : C20D                		mov	r0,@(marsGbl_Scrl_DrwL,gbr)
(2)  293/ 6000DD2 :                     .dir_r:
(2)  294/ 6000DD2 : 4010                		dt	r0
(2)  295/ 6000DD4 : C20C                		mov	r0,@(marsGbl_Scrl_DrwR,gbr)
(2)  296/ 6000DD6 :                     .go_lr:
(2)  297/ 6000DD6 : 353C                		add	r3,r5
(2)  298/ 6000DD8 : 6093                		mov	r9,r0
(2)  299/ 6000DDA : E2F0                		mov	#-16,r2
(2)  300/ 6000DDC : 2029                		and	r2,r0
(2)  301/ 6000DDE : 2B0F                		muls	r0,r11
(2)  302/ 6000DE0 : 001A                		sts	macl,r0		; Y block pos
(2)  303/ 6000DE2 : 62A3                		mov	r10,r2
(2)  304/ 6000DE4 : 323C                		add	r3,r2
(2)  305/ 6000DE6 : 320C                		add	r0,r2
(2)  306/ 6000DE8 : E3F0                		mov	#-16,r3
(2)  307/ 6000DEA : 2239                		and	r3,r2
(2)  308/ 6000DEC :                     
(2)  309/ 6000DEC : 63C3                		mov	r12,r3
(2)  310/ 6000DEE : 4309                		shlr2	r3
(2)  311/ 6000DF0 : 4309                		shlr2	r3
(2)  312/ 6000DF2 :                     .y_loop:
(2)  313/ 6000DF2 : 430A                		lds	r3,mach
(2)  314/ 6000DF4 : 441A                		lds	r4,macl
(2)  315/ 6000DF6 :                     
(2)  316/ 6000DF6 : E30F                		mov	#(256/16)-1,r3
(2)  317/ 6000DF8 : 6463                		mov	r6,r4	; Y pos
(2)  318/ 6000DFA : 4409                		shlr2	r4
(2)  319/ 6000DFC : 4409                		shlr2	r4
(2)  320/ 6000DFE : 2439                		and	r3,r4
(2)  321/ 6000E00 : 4408                		shll2	r4
(2)  322/ 6000E02 : 4408                		shll2	r4
(2)  323/ 6000E04 : 4400                		shll	r4
(2)  324/ 6000E06 : E31F                		mov	#(512/16)-1,r3
(2)  325/ 6000E08 : 6053                		mov	r5,r0	; X pos
(2)  326/ 6000E0A : 4009                		shlr2	r0
(2)  327/ 6000E0C : 4009                		shlr2	r0
(2)  328/ 6000E0E : 2039                		and	r3,r0
(2)  329/ 6000E10 : 304C                		add	r4,r0
(2)  330/ 6000E12 : 4000                		shll	r0
(2)  331/ 6000E14 : 6373                		mov	r7,r3
(2)  332/ 6000E16 : 330C                		add	r0,r3
(2)  333/ 6000E18 :                     
(2)  334/ 6000E18 : 91A4                		mov	#$7FF,r1
(2)  335/ 6000E1A : 6031                		mov.w	@r3,r0
(2)  336/ 6000E1C : 6303                		mov	r0,r3
(2)  337/ 6000E1E : 2319                		and	r1,r3
(2)  338/ 6000E20 : E100                		mov	#0,r1
(2)  339/ 6000E22 : 2338                		tst	r3,r3
(2)  340/ 6000E24 : 8903                		bt	.blank
(2)  341/ 6000E26 : 4310                		dt	r3
(2)  342/ 6000E28 : 4318                		shll8	r3		; 16x16
(2)  343/ 6000E2A : 6133                		mov	r3,r1
(2)  344/ 6000E2C : 318C                		add	r8,r1
(2)  345/ 6000E2E :                     .blank:
(2)  346/ 6000E2E : 041A                		sts	macl,r4
(2)  347/ 6000E30 : 030A                		sts	mach,r3
(2)  348/ 6000E32 : B26D                		bsr	scrlDrw_DrawBlk
(2)  349/ 6000E34 : 2F46                		mov	r4,@-r15
(2)  350/ 6000E36 : 64F6                		mov	@r15+,r4
(2)  351/ 6000E38 : 4310                		dt	r3
(2)  352/ 6000E3A : 8FDA                		bf/s	.y_loop
(2)  353/ 6000E3C : 7610                		add	#16,r6
(2)  354/ 6000E3E :                     .exit_lr:
(2)  355/ 6000E3E : 66F6                		mov	@r15+,r6
(2)  356/ 6000E40 : 65F6                		mov	@r15+,r5
(2)  357/ 6000E42 : 4F26                		lds	@r15+,pr
(2)  358/ 6000E44 : 000B                		rts
(2)  359/ 6000E46 : 0009                		nop
(2)  360/ 6000E48 :                     		align 4
(2)  361/ 6000E48 :                     
(2)  362/ 6000E48 :                     ; ----------------------------------------------------------------
(2)  363/ 6000E48 :                     ; MarsVideo_MapScrlUD
(2)  364/ 6000E48 :                     ;
(2)  365/ 6000E48 :                     ; Draws Up or Down scroll areas outside of
(2)  366/ 6000E48 :                     ; the screen.
(2)  367/ 6000E48 :                     ;
(2)  368/ 6000E48 :                     ; Input:
(2)  369/ 6000E48 :                     ; r14 | Framebuffer output
(2)  370/ 6000E48 :                     ; r13 | Scroll size W*H
(2)  371/ 6000E48 :                     ; r12 | Scroll height
(2)  372/ 6000E48 :                     ; r11 | Scroll width
(2)  373/ 6000E48 :                     ; r10 | Scroll TL-pos read
(2)  374/ 6000E48 :                     ;  r9 | Scroll Y-pos read
(2)  375/ 6000E48 :                     ;  r8 | Graphics data
(2)  376/ 6000E48 :                     ;  r7 | Map data
(2)  377/ 6000E48 :                     ;  r6 | Y pos
(2)  378/ 6000E48 :                     ;  r5 | X pos
(2)  379/ 6000E48 :                     ; ----------------------------------------------------------------
(2)  380/ 6000E48 :                     
(2)  381/ 6000E48 :                     		align 4
(2)  382/ 6000E48 :                     MarsVideo_MapScrlUD:
(2)  383/ 6000E48 : 4F22                		sts	pr,@-r15
(2)  384/ 6000E4A : 2F56                		mov	r5,@-r15
(2)  385/ 6000E4C : 2F66                		mov	r6,@-r15
(2)  386/ 6000E4E : 2888                		tst	r8,r8
(2)  387/ 6000E50 : 8946                		bt	.exit_ud
(2)  388/ 6000E52 : E300                		mov	#0,r3
(2)  389/ 6000E54 : C60F                		mov	@(marsGbl_Scrl_DrwU,gbr),r0
(2)  390/ 6000E56 : 2008                		tst	r0,r0
(2)  391/ 6000E58 : 8B06                		bf	.dir_u
(2)  392/ 6000E5A : 9385                		mov	#SET_MSCRLHGHT,r3
(2)  393/ 6000E5C : C60E                		mov	@(marsGbl_Scrl_DrwD,gbr),r0
(2)  394/ 6000E5E : 2008                		tst	r0,r0
(2)  395/ 6000E60 : 8B05                		bf	.dir_d
(2)  396/ 6000E62 : A03D                		bra	.exit_ud
(2)  397/ 6000E64 : 0009                		nop
(2)  398/ 6000E66 : 0009                		nop
(2)  399/ 6000E68 :                     .dir_u:
(2)  400/ 6000E68 : 4010                		dt	r0
(2)  401/ 6000E6A : A002                		bra	.go_ud
(2)  402/ 6000E6C : C20F                		mov	r0,@(marsGbl_Scrl_DrwU,gbr)
(2)  403/ 6000E6E :                     .dir_d:
(2)  404/ 6000E6E : 4010                		dt	r0
(2)  405/ 6000E70 : C20E                		mov	r0,@(marsGbl_Scrl_DrwD,gbr)
(2)  406/ 6000E72 :                     .go_ud:
(2)  407/ 6000E72 : 363C                		add	r3,r6
(2)  408/ 6000E74 : 6093                		mov	r9,r0
(2)  409/ 6000E76 : 303C                		add	r3,r0
(2)  410/ 6000E78 : E4F0                		mov	#-16,r4
(2)  411/ 6000E7A : 2049                		and	r4,r0
(2)  412/ 6000E7C : 2B0F                		muls	r0,r11
(2)  413/ 6000E7E : 001A                		sts	macl,r0		; Y block pos
(2)  414/ 6000E80 : 64A3                		mov	r10,r4
(2)  415/ 6000E82 : 340C                		add	r0,r4
(2)  416/ 6000E84 : E3F0                		mov	#-16,r3
(2)  417/ 6000E86 : 2439                		and	r3,r4
(2)  418/ 6000E88 : 63B3                		mov	r11,r3
(2)  419/ 6000E8A : 4309                		shlr2	r3
(2)  420/ 6000E8C : 4309                		shlr2	r3
(2)  421/ 6000E8E :                     .y_loop:
(2)  422/ 6000E8E : 6243                		mov	r4,r2
(2)  423/ 6000E90 : 430A                		lds	r3,mach
(2)  424/ 6000E92 : 441A                		lds	r4,macl
(2)  425/ 6000E94 : E30F                		mov	#(256/16)-1,r3
(2)  426/ 6000E96 : 6463                		mov	r6,r4	; Y pos
(2)  427/ 6000E98 : 4409                		shlr2	r4
(2)  428/ 6000E9A : 4409                		shlr2	r4
(2)  429/ 6000E9C : 2439                		and	r3,r4
(2)  430/ 6000E9E : 4408                		shll2	r4
(2)  431/ 6000EA0 : 4408                		shll2	r4
(2)  432/ 6000EA2 : 4400                		shll	r4
(2)  433/ 6000EA4 : E31F                		mov	#(512/16)-1,r3
(2)  434/ 6000EA6 : 6053                		mov	r5,r0	; X pos
(2)  435/ 6000EA8 : 4009                		shlr2	r0
(2)  436/ 6000EAA : 4009                		shlr2	r0
(2)  437/ 6000EAC : 2039                		and	r3,r0
(2)  438/ 6000EAE : 304C                		add	r4,r0
(2)  439/ 6000EB0 : 4000                		shll	r0
(2)  440/ 6000EB2 : 6373                		mov	r7,r3
(2)  441/ 6000EB4 : 330C                		add	r0,r3
(2)  442/ 6000EB6 :                     
(2)  443/ 6000EB6 : 9155                		mov	#$7FF,r1
(2)  444/ 6000EB8 : 6031                		mov.w	@r3,r0
(2)  445/ 6000EBA : 6303                		mov	r0,r3
(2)  446/ 6000EBC : 2319                		and	r1,r3
(2)  447/ 6000EBE : E100                		mov	#0,r1
(2)  448/ 6000EC0 : 2338                		tst	r3,r3
(2)  449/ 6000EC2 : 8903                		bt	.blank_lr
(2)  450/ 6000EC4 : 4310                		dt	r3
(2)  451/ 6000EC6 : 4318                		shll8	r3		; 16x16
(2)  452/ 6000EC8 : 6133                		mov	r3,r1
(2)  453/ 6000ECA : 318C                		add	r8,r1
(2)  454/ 6000ECC :                     .blank_lr:
(2)  455/ 6000ECC : 041A                		sts	macl,r4
(2)  456/ 6000ECE : 030A                		sts	mach,r3
(2)  457/ 6000ED0 : 0009                		nop ; align
(2)  458/ 6000ED2 : B21D                		bsr	scrlDrw_DrawBlk
(2)  459/ 6000ED4 : 2F46                		mov	r4,@-r15
(2)  460/ 6000ED6 : 64F6                		mov	@r15+,r4
(2)  461/ 6000ED8 : 7410                		add	#16,r4	; <--
(2)  462/ 6000EDA : 4310                		dt	r3
(2)  463/ 6000EDC : 8FD7                		bf/s	.y_loop
(2)  464/ 6000EDE : 7510                		add	#16,r5
(2)  465/ 6000EE0 :                     .exit_ud:
(2)  466/ 6000EE0 : 66F6                		mov	@r15+,r6
(2)  467/ 6000EE2 : 65F6                		mov	@r15+,r5
(2)  468/ 6000EE4 : 4F26                		lds	@r15+,pr
(2)  469/ 6000EE6 : 000B                		rts
(2)  470/ 6000EE8 : 0009                		nop
(2)  471/ 6000EEA :                     		align 4
(2)  472/ 6000EEC :                     ; 		ltorg
(2)  473/ 6000EEC :                     
(2)  474/ 6000EEC :                     ; --------------------------------------------------------
(2)  475/ 6000EEC :                     ; MarsVideo_ShowScrlBg
(2)  476/ 6000EEC :                     ;
(2)  477/ 6000EEC :                     ; Make a visible section of any scrolling area
(2)  478/ 6000EEC :                     ; into the current framebuffer.
(2)  479/ 6000EEC :                     ;
(2)  480/ 6000EEC :                     ; Input:
(2)  481/ 6000EEC :                     ; r1 | Top Y
(2)  482/ 6000EEC :                     ; r2 | Bottom Y
(2)  483/ 6000EEC :                     ;
(2)  484/ 6000EEC :                     ; Breaks:
(2)  485/ 6000EEC :                     ; r4-r14
(2)  486/ 6000EEC :                     ;
(2)  487/ 6000EEC :                     ; NOTE:
(2)  488/ 6000EEC :                     ; After finishing all your screens call
(2)  489/ 6000EEC :                     ; MarsVideo_FixTblShift before doing frameswap
(2)  490/ 6000EEC :                     ; --------------------------------------------------------
(2)  491/ 6000EEC :                     
(2)  492/ 6000EEC :                     		align 4
(2)  493/ 6000EEC :                     MarsVideo_ShowScrlBg:
(2)  494/ 6000EEC : DE1C                		mov	#_framebuffer,r14		; r14 - Framebuffer BASE
(2)  495/ 6000EEE : EB00                		mov	#0,r11				; r11 - line counter
(2)  496/ 6000EF0 : C613                		mov	@(marsGbl_Scrl_FbOut,gbr),r0	; r13 - Framebuffer pixeldata position
(2)  497/ 6000EF2 : 6D03                		mov	r0,r13
(2)  498/ 6000EF4 : C610                		mov	@(marsGbl_Scrl_Size,gbr),r0	; r12 - Full size of screen-scroll
(2)  499/ 6000EF6 : 6C03                		mov	r0,r12
(2)  500/ 6000EF8 : C611                		mov	@(marsGbl_Scrl_Wdth,gbr),r0
(2)  501/ 6000EFA : 6A03                		mov	r0,r10
(2)  502/ 6000EFC : C608                		mov	@(marsGbl_Scrl_FbTL,gbr),r0
(2)  503/ 6000EFE : 6903                		mov	r0,r9
(2)  504/ 6000F00 : C609                		mov	@(marsGbl_Scrl_FbY,gbr),r0
(2)  505/ 6000F02 : 6803                		mov	r0,r8
(2)  506/ 6000F04 : 3120                		cmp/eq	r2,r1
(2)  507/ 6000F06 : 8916                		bt	.bad_y
(2)  508/ 6000F08 : 3123                		cmp/ge	r2,r1
(2)  509/ 6000F0A : 8914                		bt	.bad_y
(2)  510/ 6000F0C : 6613                		mov	r1,r6
(2)  511/ 6000F0E : 6013                		mov	r1,r0
(2)  512/ 6000F10 : 4000                		shll	r0
(2)  513/ 6000F12 : 3E0C                		add	r0,r14
(2)  514/ 6000F14 : 28AE                		mulu	r10,r8
(2)  515/ 6000F16 : 001A                		sts	macl,r0
(2)  516/ 6000F18 : 390C                		add	r0,r9
(2)  517/ 6000F1A :                     .ln_loop:
(2)  518/ 6000F1A : 6893                		mov	r9,r8
(2)  519/ 6000F1C : 38C3                		cmp/ge	r12,r8
(2)  520/ 6000F1E : 8B00                		bf	.xl_r
(2)  521/ 6000F20 : 38C8                		sub	r12,r8
(2)  522/ 6000F22 :                     .xl_r:
(2)  523/ 6000F22 :                     ; 		cmp/pz	r8
(2)  524/ 6000F22 :                     ; 		bt	.xl_l
(2)  525/ 6000F22 :                     ; 		add	r12,r8
(2)  526/ 6000F22 :                     ; .xl_l:
(2)  527/ 6000F22 : 6983                		mov	r8,r9
(2)  528/ 6000F24 : 39AC                		add	r10,r9			; Add Y
(2)  529/ 6000F26 : 38DC                		add	r13,r8			; Add Framebuffer position
(2)  530/ 6000F28 : 4801                		shlr	r8			; Divide by 2, use Xshift for the missing bit
(2)  531/ 6000F2A : 2E81                		mov.w	r8,@r14			; Send to FB's table
(2)  532/ 6000F2C : 7E02                		add	#2,r14
(2)  533/ 6000F2E : 7B02                		add	#2,r11
(2)  534/ 6000F30 : 3620                		cmp/eq	r2,r6
(2)  535/ 6000F32 : 8FF2                		bf/s	.ln_loop
(2)  536/ 6000F34 : 7601                		add	#1,r6
(2)  537/ 6000F36 :                     .bad_y:
(2)  538/ 6000F36 : 000B                		rts
(2)  539/ 6000F38 : 0009                		nop
(2)  540/ 6000F3A :                     		align 4
(2)  541/ 6000F3C :                     
(2)  542/ 6000F3C :                     ; --------------------------------------------------------
(2)  543/ 6000F3C :                     ; Call this AFTER after drawing anything to the
(2)  544/ 6000F3C :                     ; scrolling area.
(2)  545/ 6000F3C :                     ; --------------------------------------------------------
(2)  546/ 6000F3C :                     
(2)  547/ 6000F3C :                     		align 4
(2)  548/ 6000F3C :                     marsScrl_CopyTopBot:
(2)  549/ 6000F3C : C613                		mov	@(marsGbl_Scrl_FbOut,gbr),r0
(2)  550/ 6000F3E : 6103                		mov	r0,r1
(2)  551/ 6000F40 : C610                		mov	@(marsGbl_Scrl_Size,gbr),r0
(2)  552/ 6000F42 : 6303                		mov	r0,r3
(2)  553/ 6000F44 : D006                		mov	#_framebuffer,r0
(2)  554/ 6000F46 : 310C                		add	r0,r1
(2)  555/ 6000F48 : 6213                		mov	r1,r2
(2)  556/ 6000F4A : 323C                		add	r3,r2
(2)  557/ 6000F4C : E350                		mov	#320/4,r3
(2)  558/ 6000F4E : 0009                		nop
(2)  559/ 6000F50 :                     .copy_top:
(2)  560/ 6000F50 : 6016                		mov	@r1+,r0
(2)  561/ 6000F52 : 0009                		nop
(2)  562/ 6000F54 : 2202                		mov	r0,@r2
(2)  563/ 6000F56 : 7204                		add	#4,r2
(2)  564/ 6000F58 : 4310                		dt	r3
(2)  565/ 6000F5A : 8BF9                		bf	.copy_top
(2)  566/ 6000F5C : 000B                		rts
(2)  567/ 6000F5E : 0009                		nop
(2)  568/ 6000F60 :                     		align 4
(2)  569/ 6000F60 : 2400 0000 07FF      		ltorg
          6000F66 : 0140 00F0          
(2)  570/ 6000F6A :                     
(2)  571/ 6000F6A :                     ; ====================================================================
(2)  572/ 6000F6A :                     ; ----------------------------------------------------------------
(2)  573/ 6000F6A :                     ; Super sprites
(2)  574/ 6000F6A :                     ; ----------------------------------------------------------------
(2)  575/ 6000F6A :                     
(2)  576/ 6000F6A :                     ; --------------------------------------------------------
(2)  577/ 6000F6A :                     ; MarsVideo_SuperSpr_Draw
(2)  578/ 6000F6A :                     ; --------------------------------------------------------
(2)  579/ 6000F6A :                     
(2)  580/ 6000F6A :                     		align 4
(2)  581/ 6000F6C :                     MarsVideo_SuperSpr_Draw:
(2)  582/ 6000F6C : 4F22                		sts	pr,@-r15
(2)  583/ 6000F6E : DE24                		mov	#_overwrite,r14	; <--
(2)  584/ 6000F70 : C610                		mov	@(marsGbl_Scrl_Size,gbr),r0
(2)  585/ 6000F72 : 6D03                		mov	r0,r13
(2)  586/ 6000F74 : C612                		mov	@(marsGbl_Scrl_Hght,gbr),r0
(2)  587/ 6000F76 : 6C03                		mov	r0,r12
(2)  588/ 6000F78 : C611                		mov	@(marsGbl_Scrl_Wdth,gbr),r0
(2)  589/ 6000F7A : 6B03                		mov	r0,r11
(2)  590/ 6000F7C : C608                		mov	@(marsGbl_Scrl_FbTL,gbr),r0
(2)  591/ 6000F7E : 6A03                		mov	r0,r10
(2)  592/ 6000F80 : C609                		mov	@(marsGbl_Scrl_FbY,gbr),r0
(2)  593/ 6000F82 : 6903                		mov	r0,r9
(2)  594/ 6000F84 : C613                		mov	@(marsGbl_Scrl_FbOut,gbr),r0
(2)  595/ 6000F86 : 6203                		mov	r0,r2
(2)  596/ 6000F88 : C602                		mov	@(marsGbl_DreqRead,gbr),r0
(2)  597/ 6000F8A : 3E2C                		add	r2,r14
(2)  598/ 6000F8C : 983A                		mov	#Dreq_SuperSpr,r8
(2)  599/ 6000F8E : 380C                		add	r0,r8
(2)  600/ 6000F90 :                     
(2)  601/ 6000F90 :                     	; ----------------------------------------
(2)  602/ 6000F90 :                     	; r14 - Framebuffer output
(2)  603/ 6000F90 :                     	; r13 - Scroll size W*H
(2)  604/ 6000F90 :                     	; r12 - Scroll height
(2)  605/ 6000F90 :                     	; r11 - Scroll width
(2)  606/ 6000F90 :                     	; r10 - Scroll TL-pos read *
(2)  607/ 6000F90 :                     	;  r9 - Scroll Y-pos read *
(2)  608/ 6000F90 :                     	;  r8 - Current SuperSprite
(2)  609/ 6000F90 :                     	;  r7 - Current Canvas box addr
(2)  610/ 6000F90 :                     	;  r6 - Numof sprites
(2)  611/ 6000F90 :                     	;  r5 - Index counter
(2)  612/ 6000F90 :                     	;  r4 -
(2)  613/ 6000F90 :                     	;  r3 -
(2)  614/ 6000F90 :                     	;  r2 -
(2)  615/ 6000F90 :                     
(2)  616/ 6000F90 : E710                		mov	#MAX_MARSSPR,r7
(2)  617/ 6000F92 :                     .next_sspr:
(2)  618/ 6000F92 : 5083                		mov	@(sspr_Art,r8),r0
(2)  619/ 6000F94 : 2008                		tst	r0,r0
(2)  620/ 6000F96 : 892C                		bt	.off_sspr
(2)  621/ 6000F98 : 400A                		lds	r0,mach
(2)  622/ 6000F9A : 8580                		mov.w	@(sspr_Flags,r8),r0
(2)  623/ 6000F9C : 660D                		extu.w	r0,r6
(2)  624/ 6000F9E : 4628                		shll16	r6
(2)  625/ 6000FA0 : 8583                		mov.w	@(sspr_Indx,r8),r0
(2)  626/ 6000FA2 : 600C                		extu.b	r0,r0
(2)  627/ 6000FA4 : 260B                		or	r0,r6			; r6 - $ffff00ii: f-Flags i-Index
(2)  628/ 6000FA6 : 8582                		mov.w	@(sspr_Size,r8),r0
(2)  629/ 6000FA8 : 650C                		extu.b	r0,r5			; Y size
(2)  630/ 6000FAA : 4019                		shlr8	r0
(2)  631/ 6000FAC : 640C                		extu.b	r0,r4			; X size
(2)  632/ 6000FAE : 8584                		mov.w	@(sspr_Xpos,r8),r0
(2)  633/ 6000FB0 : 620F                		exts.w	r0,r2
(2)  634/ 6000FB2 : 8585                		mov.w	@(sspr_Ypos,r8),r0
(2)  635/ 6000FB4 : 630F                		exts.w	r0,r3
(2)  636/ 6000FB6 : 7401                		add	#1,r4
(2)  637/ 6000FB8 : 7501                		add	#1,r5
(2)  638/ 6000FBA : 4408                		shll2	r4		; Expand sizes to 8pixels(cells)
(2)  639/ 6000FBC : 4508                		shll2	r5
(2)  640/ 6000FBE : 4400                		shll	r4
(2)  641/ 6000FC0 : 4500                		shll	r5
(2)  642/ 6000FC2 : 6023                		mov	r2,r0		; Offscreen checks
(2)  643/ 6000FC4 : 304C                		add	r4,r0
(2)  644/ 6000FC6 : 4015                		cmp/pl	r0
(2)  645/ 6000FC8 : 8B13                		bf	.off_sspr
(2)  646/ 6000FCA : 6033                		mov	r3,r0
(2)  647/ 6000FCC : 305C                		add	r5,r0
(2)  648/ 6000FCE : 4015                		cmp/pl	r0
(2)  649/ 6000FD0 : 8B0F                		bf	.off_sspr
(2)  650/ 6000FD2 : E050                		mov	#SET_MSCRLWDTH>>2,r0
(2)  651/ 6000FD4 : 4008                		shll2	r0
(2)  652/ 6000FD6 : 3203                		cmp/ge	r0,r2
(2)  653/ 6000FD8 : 890B                		bt	.off_sspr
(2)  654/ 6000FDA : E03C                		mov	#SET_MSCRLHGHT>>2,r0
(2)  655/ 6000FDC : 4008                		shll2	r0
(2)  656/ 6000FDE : 3303                		cmp/ge	r0,r3
(2)  657/ 6000FE0 : 8907                		bt	.off_sspr
(2)  658/ 6000FE2 :                     
(2)  659/ 6000FE2 : 8581                		mov.w	@(sspr_Frame,r8),r0
(2)  660/ 6000FE4 : 254E                		mulu	r4,r5
(2)  661/ 6000FE6 : 011A                		sts	macl,r1
(2)  662/ 6000FE8 : 210E                		mulu	r0,r1
(2)  663/ 6000FEA : 001A                		sts	macl,r0
(2)  664/ 6000FEC : 010A                		sts	mach,r1
(2)  665/ 6000FEE : B0D5                		bsr	scrlDrw_SSprDraw
(2)  666/ 6000FF0 : 310C                		add	r0,r1
(2)  667/ 6000FF2 :                     .off_sspr:
(2)  668/ 6000FF2 : E010                		mov	#sizeof_marsspr,r0
(2)  669/ 6000FF4 : 4710                		dt	r7
(2)  670/ 6000FF6 : 8FCC                		bf/s	.next_sspr
(2)  671/ 6000FF8 : 380C                		add	r0,r8
(2)  672/ 6000FFA :                     .exit_sspr:
(2)  673/ 6000FFA :                     
(2)  674/ 6000FFA : 4F26                		lds	@r15+,pr
(2)  675/ 6000FFC : 000B                		rts
(2)  676/ 6000FFE : 0009                		nop
(2)  677/ 6001000 :                     		align 4
(2)  678/ 6001000 : 2402 0000 0610      		ltorg
(2)  679/ 6001006 :                     
(2)  680/ 6001006 :                     ; --------------------------------------------------------
(2)  681/ 6001006 :                     ; MarsVideo_MkFillBlk
(2)  682/ 6001006 :                     ;
(2)  683/ 6001006 :                     ; Generate Block-Refill blocks from Super sprites
(2)  684/ 6001006 :                     ; for the next frame
(2)  685/ 6001006 :                     ;
(2)  686/ 6001006 :                     ; 16x16 blocks.
(2)  687/ 6001006 :                     ; --------------------------------------------------------
(2)  688/ 6001006 :                     
(2)  689/ 6001006 :                     		align 4
(2)  690/ 6001008 :                     MarsVideo_MkFillBlk:
(2)  691/ 6001008 : 4F22                		sts	pr,@-r15
(2)  692/ 600100A : 9EC5                		mov	#Dreq_SuperSpr,r14
(2)  693/ 600100C : C602                		mov	@(marsGbl_DreqRead,gbr),r0
(2)  694/ 600100E : 3E0C                		add	r0,r14
(2)  695/ 6001010 : DD5F                		mov	#RAM_Mars_ScrlRefill_0,r13
(2)  696/ 6001012 : EC10                		mov	#MAX_MARSSPR,r12
(2)  697/ 6001014 :                     .next_sspr:
(2)  698/ 6001014 : 50E3                		mov	@(sspr_Art,r14),r0
(2)  699/ 6001016 : 2008                		tst	r0,r0
(2)  700/ 6001018 : 8958                		bt	.off_sspr
(2)  701/ 600101A : 0009                		nop
(2)  702/ 600101C : 85E2                		mov.w	@(sspr_Size,r14),r0
(2)  703/ 600101E : 650C                		extu.b	r0,r5			; Y size
(2)  704/ 6001020 : 4019                		shlr8	r0
(2)  705/ 6001022 : 640C                		extu.b	r0,r4			; X size
(2)  706/ 6001024 : 85E4                		mov.w	@(sspr_Xpos,r14),r0
(2)  707/ 6001026 : 620F                		exts.w	r0,r2
(2)  708/ 6001028 : 85E5                		mov.w	@(sspr_Ypos,r14),r0
(2)  709/ 600102A : 630F                		exts.w	r0,r3
(2)  710/ 600102C : 4401                		shlr	r4		; /2 for 16
(2)  711/ 600102E : 4501                		shlr	r5
(2)  712/ 6001030 : 7401                		add	#1,r4
(2)  713/ 6001032 : 7501                		add	#1,r5
(2)  714/ 6001034 : C604                		mov	@(marsGbl_Scrl_Xpos,gbr),r0
(2)  715/ 6001036 : 680F                		exts.w	r0,r8
(2)  716/ 6001038 : E60F                		mov	#16-1,r6	; MANUAL SIZE 16x16
(2)  717/ 600103A : 0009                		nop
(2)  718/ 600103C : C605                		mov	@(marsGbl_Scrl_Ypos,gbr),r0
(2)  719/ 600103E : 690F                		exts.w	r0,r9
(2)  720/ 6001040 : 6023                		mov	r2,r0
(2)  721/ 6001042 : 308C                		add	r8,r0
(2)  722/ 6001044 : 2069                		and	r6,r0
(2)  723/ 6001046 : 2008                		tst	r0,r0
(2)  724/ 6001048 : 8900                		bt	.x_szex
(2)  725/ 600104A : 7401                		add	#1,r4
(2)  726/ 600104C :                     .x_szex:
(2)  727/ 600104C : 6033                		mov	r3,r0
(2)  728/ 600104E : 309C                		add	r9,r0
(2)  729/ 6001050 : 2069                		and	r6,r0
(2)  730/ 6001052 : 2008                		tst	r0,r0
(2)  731/ 6001054 : 8900                		bt	.y_szex
(2)  732/ 6001056 : 7501                		add	#1,r5
(2)  733/ 6001058 :                     .y_szex:
(2)  734/ 6001058 : 4408                		shll2	r4		; Expand sizes to 16pixels
(2)  735/ 600105A : 4408                		shll2	r4
(2)  736/ 600105C : 4508                		shll2	r5
(2)  737/ 600105E : 4508                		shll2	r5
(2)  738/ 6001060 :                     
(2)  739/ 6001060 : 342C                		add	r2,r4
(2)  740/ 6001062 : 353C                		add	r3,r5
(2)  741/ 6001064 : E650                		mov	#SET_MSCRLWDTH>>2,r6
(2)  742/ 6001066 : E73C                		mov	#SET_MSCRLHGHT>>2,r7
(2)  743/ 6001068 : 4608                		shll2	r6
(2)  744/ 600106A : 4708                		shll2	r7
(2)  745/ 600106C :                     	; Off-screen limits
(2)  746/ 600106C : 4415                		cmp/pl	r4
(2)  747/ 600106E : 8B2D                		bf	.off_sspr
(2)  748/ 6001070 : 4515                		cmp/pl	r5
(2)  749/ 6001072 : 8B2B                		bf	.off_sspr
(2)  750/ 6001074 : 3263                		cmp/ge	r6,r2		; Xleft < 0?
(2)  751/ 6001076 : 8929                		bt	.off_sspr
(2)  752/ 6001078 : 3373                		cmp/ge	r7,r3		; Yup < 0?
(2)  753/ 600107A : 8927                		bt	.off_sspr
(2)  754/ 600107C :                     	; Squeeze screen coords
(2)  755/ 600107C : 7610                		add	#16,r6
(2)  756/ 600107E : 7710                		add	#16,r7
(2)  757/ 6001080 : 4215                		cmp/pl	r2
(2)  758/ 6001082 : 8900                		bt	.x_sqz
(2)  759/ 6001084 : E200                		mov	#0,r2
(2)  760/ 6001086 : 4315                .x_sqz:		cmp/pl	r3
(2)  761/ 6001088 : 8900                		bt	.y_sqz
(2)  762/ 600108A : E300                		mov	#0,r3
(2)  763/ 600108C : 3463                .y_sqz:		cmp/ge	r6,r4
(2)  764/ 600108E : 8B00                		bf	.x_sqend
(2)  765/ 6001090 : 6463                		mov	r6,r4
(2)  766/ 6001092 : 3573                .x_sqend:	cmp/ge	r7,r5
(2)  767/ 6001094 : 8B00                		bf	.y_sqend
(2)  768/ 6001096 : 6573                		mov	r7,r5
(2)  769/ 6001098 :                     .y_sqend:
(2)  770/ 6001098 :                     
(2)  771/ 6001098 :                     	; r2 - X pos
(2)  772/ 6001098 :                     	; r3 - Y pos
(2)  773/ 6001098 :                     	; r4 - X end
(2)  774/ 6001098 :                     	; r5 - Y end
(2)  775/ 6001098 :                     .y_row:
(2)  776/ 6001098 : 6623                		mov	r2,r6
(2)  777/ 600109A :                     .x_row:
(2)  778/ 600109A : 6033                		mov	r3,r0
(2)  779/ 600109C : 309C                		add	r9,r0
(2)  780/ 600109E : 4009                		shlr2	r0
(2)  781/ 60010A0 : 4009                		shlr2	r0
(2)  782/ 60010A2 : C90F                		and	#(256/16)-1,r0
(2)  783/ 60010A4 : 4008                		shll2	r0
(2)  784/ 60010A6 : 4008                		shll2	r0
(2)  785/ 60010A8 : 4008                		shll2	r0
(2)  786/ 60010AA : 6703                		mov	r0,r7
(2)  787/ 60010AC : 6063                		mov	r6,r0
(2)  788/ 60010AE : 308C                		add	r8,r0
(2)  789/ 60010B0 : 4009                		shlr2	r0
(2)  790/ 60010B2 : 4009                		shlr2	r0
(2)  791/ 60010B4 : C91F                		and	#(512/16)-1,r0
(2)  792/ 60010B6 : 4000                		shll	r0
(2)  793/ 60010B8 : 370C                		add	r0,r7
(2)  794/ 60010BA : 37DC                		add	r13,r7
(2)  795/ 60010BC : E003                		mov	#%11,r0		; Write flag
(2)  796/ 60010BE : 2701                		mov.w	r0,@r7
(2)  797/ 60010C0 : 7610                		add	#16,r6
(2)  798/ 60010C2 : 3643                		cmp/ge	r4,r6
(2)  799/ 60010C4 : 8BE9                		bf	.x_row
(2)  800/ 60010C6 : 7310                		add	#16,r3
(2)  801/ 60010C8 : 3353                		cmp/ge	r5,r3
(2)  802/ 60010CA : 8BE5                		bf	.y_row
(2)  803/ 60010CC :                     
(2)  804/ 60010CC :                     .off_sspr:
(2)  805/ 60010CC : E010                		mov	#sizeof_marsspr,r0
(2)  806/ 60010CE : 4C10                		dt	r12
(2)  807/ 60010D0 : 8FA0                		bf/s	.next_sspr
(2)  808/ 60010D2 : 3E0C                		add	r0,r14
(2)  809/ 60010D4 :                     
(2)  810/ 60010D4 :                     .exit_sspr:
(2)  811/ 60010D4 : 4F26                		lds	@r15+,pr
(2)  812/ 60010D6 : 000B                		rts
(2)  813/ 60010D8 : 0009                		nop
(2)  814/ 60010DA :                     		align 4
(2)  815/ 60010DC :                     
(2)  816/ 60010DC :                     ; --------------------------------------------------------
(2)  817/ 60010DC :                     ; MarsVideo_DrawFillBlk
(2)  818/ 60010DC :                     ;
(2)  819/ 60010DC :                     ; r14 - Framebuffer output
(2)  820/ 60010DC :                     ; r13 - Scroll size W*H
(2)  821/ 60010DC :                     ; r12 - Scroll height
(2)  822/ 60010DC :                     ; r11 - Scroll width
(2)  823/ 60010DC :                     ; r10 - Scroll TL-pos read / 16 *
(2)  824/ 60010DC :                     ;  r9 - Scroll Y-pos read / 16 *
(2)  825/ 60010DC :                     ;  r8 - Graphics data
(2)  826/ 60010DC :                     ;  r7 - Map data
(2)  827/ 60010DC :                     ;  r6 - Map Y read index
(2)  828/ 60010DC :                     ;  r5 - Map X read index
(2)  829/ 60010DC :                     ; --------------------------------------------------------
(2)  830/ 60010DC :                     
(2)  831/ 60010DC :                     		align 4
(2)  832/ 60010DC :                     MarsVideo_DrawFillBlk:
(2)  833/ 60010DC : 4F22                		sts	pr,@-r15
(2)  834/ 60010DE : 2F56                		mov	r5,@-r15
(2)  835/ 60010E0 : 2F66                		mov	r6,@-r15
(2)  836/ 60010E2 : 2F96                		mov	r9,@-r15
(2)  837/ 60010E4 : 2FA6                		mov	r10,@-r15
(2)  838/ 60010E6 : C502                		mov.w	@(marsGbl_SSprFlip,gbr),r0
(2)  839/ 60010E8 : D32A                		mov	#RAM_Mars_ScrlRefill_0,r3
(2)  840/ 60010EA : 6093                		mov	r9,r0
(2)  841/ 60010EC : E4F0                		mov	#-16,r4
(2)  842/ 60010EE : 2049                		and	r4,r0
(2)  843/ 60010F0 : 2B0F                		muls	r0,r11
(2)  844/ 60010F2 : 001A                		sts	macl,r0		; Y block pos
(2)  845/ 60010F4 : 64A3                		mov	r10,r4
(2)  846/ 60010F6 : 340C                		add	r0,r4
(2)  847/ 60010F8 : E2FC                		mov	#-4,r2
(2)  848/ 60010FA : 2429                		and	r2,r4
(2)  849/ 60010FC :                     
(2)  850/ 60010FC : 6AB3                		mov	r11,r10
(2)  851/ 60010FE : 4A09                		shlr2	r10
(2)  852/ 6001100 : 4A09                		shlr2	r10
(2)  853/ 6001102 :                     .x_loop:
(2)  854/ 6001102 : 6963                		mov	r6,r9
(2)  855/ 6001104 : 34D3                		cmp/ge	r13,r4
(2)  856/ 6001106 : 8B00                		bf	.tl_snap
(2)  857/ 6001108 : 34D8                		sub	r13,r4
(2)  858/ 600110A :                     .tl_snap:
(2)  859/ 600110A : 6243                		mov	r4,r2
(2)  860/ 600110C : 2F46                		mov	r4,@-r15
(2)  861/ 600110E : 2FC6                		mov	r12,@-r15
(2)  862/ 6001110 : 4C09                		shlr2	r12
(2)  863/ 6001112 : 4C09                		shlr2	r12
(2)  864/ 6001114 :                     .y_loop:
(2)  865/ 6001114 : E00F                		mov	#(256/16)-1,r0
(2)  866/ 6001116 : 6493                		mov	r9,r4		; Y pos
(2)  867/ 6001118 : 4409                		shlr2	r4
(2)  868/ 600111A : 4409                		shlr2	r4
(2)  869/ 600111C : 2409                		and	r0,r4
(2)  870/ 600111E : 4408                		shll2	r4
(2)  871/ 6001120 : 4408                		shll2	r4
(2)  872/ 6001122 : 4400                		shll	r4
(2)  873/ 6001124 : E01F                		mov	#(512/16)-1,r0
(2)  874/ 6001126 : 6153                		mov	r5,r1		; X pos
(2)  875/ 6001128 : 4109                		shlr2	r1
(2)  876/ 600112A : 4109                		shlr2	r1
(2)  877/ 600112C : 2109                		and	r0,r1
(2)  878/ 600112E : 314C                		add	r4,r1
(2)  879/ 6001130 : 4100                		shll	r1
(2)  880/ 6001132 : 411A                		lds	r1,macl
(2)  881/ 6001134 :                     
(2)  882/ 6001134 : 313C                		add	r3,r1
(2)  883/ 6001136 : 6011                		mov.w	@r1,r0
(2)  884/ 6001138 : 2008                		tst	r0,r0
(2)  885/ 600113A : 8915                		bt	.no_flag
(2)  886/ 600113C : 4001                		shlr	r0
(2)  887/ 600113E : 2101                		mov.w	r0,@r1
(2)  888/ 6001140 :                     
(2)  889/ 6001140 : 011A                		sts	macl,r1
(2)  890/ 6001142 : 317C                		add	r7,r1
(2)  891/ 6001144 : 430A                		lds	r3,mach
(2)  892/ 6001146 : 6011                		mov.w	@r1,r0
(2)  893/ 6001148 : 9127                		mov	#$7FF,r1
(2)  894/ 600114A : 6303                		mov	r0,r3
(2)  895/ 600114C : 2319                		and	r1,r3
(2)  896/ 600114E : E100                		mov	#0,r1
(2)  897/ 6001150 : 2338                		tst	r3,r3
(2)  898/ 6001152 : 8903                		bt	.blank
(2)  899/ 6001154 : 4310                		dt	r3
(2)  900/ 6001156 : 4318                		shll8	r3		; 16x16
(2)  901/ 6001158 : 6133                		mov	r3,r1
(2)  902/ 600115A : 318C                		add	r8,r1
(2)  903/ 600115C :                     .blank:
(2)  904/ 600115C : 030A                		sts	mach,r3
(2)  905/ 600115E :                     ; 		mov	#0,r1	; TEMPORAL
(2)  906/ 600115E : B0D7                		bsr	scrlDrw_DrawBlk
(2)  907/ 6001160 : 2F46                		mov	r4,@-r15
(2)  908/ 6001162 : 64F6                		mov	@r15+,r4
(2)  909/ 6001164 : A004                		bra	.next_yblk
(2)  910/ 6001166 : 0009                		nop
(2)  911/ 6001168 :                     .no_flag:
(2)  912/ 6001168 : E010                		mov	#16,r0
(2)  913/ 600116A : 20BE                		mulu	r11,r0
(2)  914/ 600116C : 001A                		sts	macl,r0
(2)  915/ 600116E : 320C                		add	r0,r2
(2)  916/ 6001170 :                     .next_yblk:
(2)  917/ 6001170 : 4C10                		dt	r12
(2)  918/ 6001172 : 8FCF                		bf/s	.y_loop
(2)  919/ 6001174 : 7910                		add	#16,r9
(2)  920/ 6001176 : 6CF6                		mov	@r15+,r12
(2)  921/ 6001178 : 64F6                		mov	@r15+,r4
(2)  922/ 600117A : 7410                		add	#16,r4
(2)  923/ 600117C : 4A10                		dt	r10
(2)  924/ 600117E : 8FC0                		bf/s	.x_loop
(2)  925/ 6001180 : 7510                		add	#16,r5
(2)  926/ 6001182 :                     .exit_lr:
(2)  927/ 6001182 : 6AF6                		mov	@r15+,r10
(2)  928/ 6001184 : 69F6                		mov	@r15+,r9
(2)  929/ 6001186 : 66F6                		mov	@r15+,r6
(2)  930/ 6001188 : 65F6                		mov	@r15+,r5
(2)  931/ 600118A : 4F26                		lds	@r15+,pr
(2)  932/ 600118C : 000B                		rts
(2)  933/ 600118E : 0009                		nop
(2)  934/ 6001190 :                     		align 4
(2)  935/ 6001190 : 0600 16E0 0600      		ltorg
          6001196 : 16E0 0610 07FF    
(2)  936/ 600119C :                     
(2)  937/ 600119C :                     ; --------------------------------------------------------
(2)  938/ 600119C :                     ; scrlDrw_SSprDraw
(2)  939/ 600119C :                     ;
(2)  940/ 600119C :                     ; Inputs:
(2)  941/ 600119C :                     ; r1 - Graphics data *
(2)  942/ 600119C :                     ; r2 - Xpos *
(2)  943/ 600119C :                     ; r3 - Ypos *
(2)  944/ 600119C :                     ; r4 - Xsize *
(2)  945/ 600119C :                     ; r5 - Ysize *
(2)  946/ 600119C :                     ; r6 - Flags | Pixel increment *
(2)  947/ 600119C :                     ;
(2)  948/ 600119C :                     ; In Loop:
(2)  949/ 600119C :                     ; r14 - Framebuffer output
(2)  950/ 600119C :                     ; r13 - Scroll size W*H
(2)  951/ 600119C :                     ; r12 - Scroll height
(2)  952/ 600119C :                     ; r11 - Scroll width
(2)  953/ 600119C :                     ; r10 - Scroll TL-pos read
(2)  954/ 600119C :                     ;  r9 - Scroll Y-pos read
(2)  955/ 600119C :                     ;
(2)  956/ 600119C :                     ; Breaks:
(2)  957/ 600119C :                     ; r1-r6
(2)  958/ 600119C :                     ; --------------------------------------------------------
(2)  959/ 600119C :                     
(2)  960/ 600119C :                     		align 4
(2)  961/ 600119C :                     scrlDrw_SSprDraw:
(2)  962/ 600119C : 2F76                		mov	r7,@-r15
(2)  963/ 600119E : 2F86                		mov	r8,@-r15
(2)  964/ 60011A0 : 2F96                		mov	r9,@-r15
(2)  965/ 60011A2 : 2FA6                		mov	r10,@-r15
(2)  966/ 60011A4 : 2FC6                		mov	r12,@-r15
(2)  967/ 60011A6 :                     
(2)  968/ 60011A6 :                     	; Y limits
(2)  969/ 60011A6 : 6033                		mov	r3,r0
(2)  970/ 60011A8 : 4011                .y_low:		cmp/pz	r0
(2)  971/ 60011AA : 8900                		bt	.y_mid
(2)  972/ 60011AC : E000                		mov	#0,r0
(2)  973/ 60011AE : 30C3                .y_mid:		cmp/ge	r12,r0
(2)  974/ 60011B0 : 8B01                		bf	.y_ok
(2)  975/ 60011B2 : E03C                		mov	#(SET_MSCRLHGHT)>>2,r0	; 240
(2)  976/ 60011B4 : 4008                		shll2	r0
(2)  977/ 60011B6 :                     .y_ok:
(2)  978/ 60011B6 : 309C                		add	r9,r0
(2)  979/ 60011B8 : 20BF                		muls	r11,r0	; macl - Y pos
(2)  980/ 60011BA :                     	; No X limits
(2)  981/ 60011BA : 6723                		mov	r2,r7	; X-pos
(2)  982/ 60011BC : 37AC                		add	r10,r7
(2)  983/ 60011BE : 001A                		sts	macl,r0
(2)  984/ 60011C0 : 370C                		add	r0,r7
(2)  985/ 60011C2 : 37D3                		cmp/ge	r13,r7
(2)  986/ 60011C4 : 8B00                		bf	.xy_flip
(2)  987/ 60011C6 : 37D8                		sub	r13,r7
(2)  988/ 60011C8 :                     .xy_flip:
(2)  989/ 60011C8 : 6069                		swap	r6,r0		; Y flip? start
(2)  990/ 60011CA : C802                		tst	#%10,r0
(2)  991/ 60011CC : 8903                		bt	.y_flip
(2)  992/ 60011CE : 254F                		muls	r4,r5
(2)  993/ 60011D0 : 001A                		sts	macl,r0
(2)  994/ 60011D2 : 310C                		add	r0,r1		; Flip Y src
(2)  995/ 60011D4 : 3148                		sub	r4,r1
(2)  996/ 60011D6 :                     .y_flip:
(2)  997/ 60011D6 : E804                		mov	#4,r8
(2)  998/ 60011D8 : 6069                		swap	r6,r0		; X flip?
(2)  999/ 60011DA : C801                		tst	#%01,r0
(2) 1000/ 60011DC : 8903                		bt	.x_flip
(2) 1001/ 60011DE : 688B                		neg	r8,r8
(2) 1002/ 60011E0 : 6043                		mov	r4,r0
(2) 1003/ 60011E2 : 70FC                		add	#-4,r0
(2) 1004/ 60011E4 : 310C                		add	r0,r1
(2) 1005/ 60011E6 :                     .x_flip:
(2) 1006/ 60011E6 :                     
(2) 1007/ 60011E6 :                     	; ---------------------------------------
(2) 1008/ 60011E6 :                     	; LOOP
(2) 1009/ 60011E6 :                     	; ---------------------------------------
(2) 1010/ 60011E6 : 4311                		cmp/pz	r3
(2) 1011/ 60011E8 : 8909                		bt	.y_top
(2) 1012/ 60011EA : 353C                		add	r3,r5
(2) 1013/ 60011EC : 234F                		muls	r4,r3
(2) 1014/ 60011EE : 6069                		swap	r6,r0
(2) 1015/ 60011F0 : C802                		tst	#%10,r0
(2) 1016/ 60011F2 : 8902                		bt	.y_rflip
(2) 1017/ 60011F4 : 001A                		sts	macl,r0
(2) 1018/ 60011F6 : A001                		bra	.y_rflipc
(2) 1019/ 60011F8 : 600B                		neg	r0,r0
(2) 1020/ 60011FA :                     .y_rflip:
(2) 1021/ 60011FA : 001A                		sts	macl,r0
(2) 1022/ 60011FC :                     .y_rflipc:
(2) 1023/ 60011FC : 3108                		sub	r0,r1
(2) 1024/ 60011FE :                     
(2) 1025/ 60011FE :                     .y_top:
(2) 1026/ 60011FE : 6033                		mov	r3,r0
(2) 1027/ 6001200 : 305C                		add	r5,r0
(2) 1028/ 6001202 : EA3D                		mov	#(SET_MSCRLHGHT+4)>>2,r10	; 240
(2) 1029/ 6001204 : 4A08                		shll2	r10
(2) 1030/ 6001206 : 30A3                		cmp/ge	r10,r0
(2) 1031/ 6001208 : 8B01                		bf	.y_bot
(2) 1032/ 600120A : 30A8                		sub	r10,r0
(2) 1033/ 600120C : 3508                		sub	r0,r5
(2) 1034/ 600120E :                     .y_bot:
(2) 1035/ 600120E : 0009                		nop
(2) 1036/ 6001210 : 6A43                		mov	r4,r10
(2) 1037/ 6001212 : 6069                		swap	r6,r0		; Y flip? start
(2) 1038/ 6001214 : C802                		tst	#%10,r0
(2) 1039/ 6001216 : 8900                		bt	.y_loop
(2) 1040/ 6001218 : 644B                		neg	r4,r4
(2) 1041/ 600121A :                     
(2) 1042/ 600121A :                     	; r1 - Frame data line pos
(2) 1043/ 600121A :                     	; r2 - X pos
(2) 1044/ 600121A :                     	; r3 -
(2) 1045/ 600121A :                     	; r4 - Y increment f/b
(2) 1046/ 600121A :                     	; r5 - Y lines / X current beam
(2) 1047/ 600121A :                     	; r6 - flags (X flip only) | pixel increment
(2) 1048/ 600121A :                     	; r7 - current TL pos
(2) 1049/ 600121A :                     	; r8 - X increment f/b
(2) 1050/ 600121A :                     	; r9 -
(2) 1051/ 600121A :                     	; r10 - X loop current
(2) 1052/ 600121A :                     	; r11
(2) 1053/ 600121A :                     	; r12
(2) 1054/ 600121A :                     .y_loop:
(2) 1055/ 600121A : 470A                		lds	r7,mach
(2) 1056/ 600121C : 451A                		lds	r5,macl
(2) 1057/ 600121E : 6CA3                		mov	r10,r12
(2) 1058/ 6001220 : 4C09                		shlr2	r12
(2) 1059/ 6001222 : 2CC8                		tst	r12,r12
(2) 1060/ 6001224 : 896B                		bt	.y_last
(2) 1061/ 6001226 : 6313                		mov	r1,r3		; Line in
(2) 1062/ 6001228 : 6523                		mov	r2,r5
(2) 1063/ 600122A :                     .x_loop:
(2) 1064/ 600122A : 37D3                		cmp/ge	r13,r7
(2) 1065/ 600122C : 8B00                		bf	.tl_snap
(2) 1066/ 600122E : 37D8                		sub	r13,r7
(2) 1067/ 6001230 :                     .tl_snap:
(2) 1068/ 6001230 :                     
(2) 1069/ 6001230 :                     ; ---------------------------------------
(2) 1070/ 6001230 :                     ; r3 - Pixel data pos
(2) 1071/ 6001230 :                     ; r5 - Current X pos
(2) 1072/ 6001230 :                     ;
(2) 1073/ 6001230 :                     ; r9 - Pixel data $12345678
(2) 1074/ 6001230 :                     
(2) 1075/ 6001230 :                     .x_swap:
(2) 1076/ 6001230 : 6032                		mov	@r3,r0
(2) 1077/ 6001232 : 696C                		extu.b	r6,r9
(2) 1078/ 6001234 : 6009                		swap.w	r0,r0		; 3 4 1 2
(2) 1079/ 6001236 : 6008                		swap.b	r0,r0		; 3 4 2 1
(2) 1080/ 6001238 : C8FF                		tst	#$FF,r0
(2) 1081/ 600123A : 8900                		bt	.z_0
(2) 1082/ 600123C : 309C                		add	r9,r0
(2) 1083/ 600123E : 6008                .z_0:		swap.b	r0,r0		; 3 4 1 2
(2) 1084/ 6001240 : C8FF                		tst	#$FF,r0
(2) 1085/ 6001242 : 8900                		bt	.z_1
(2) 1086/ 6001244 : 309C                		add	r9,r0
(2) 1087/ 6001246 : 6009                .z_1:		swap.w	r0,r0		; 1 2 3 4
(2) 1088/ 6001248 : 6008                		swap.b	r0,r0		; 1 2 4 3
(2) 1089/ 600124A : C8FF                		tst	#$FF,r0
(2) 1090/ 600124C : 8900                		bt	.z_2
(2) 1091/ 600124E : 309C                		add	r9,r0
(2) 1092/ 6001250 : 6008                .z_2:		swap.b	r0,r0		; 1 2 3 4
(2) 1093/ 6001252 : C8FF                		tst	#$FF,r0
(2) 1094/ 6001254 : 8900                		bt	.z_3
(2) 1095/ 6001256 : 309C                		add	r9,r0
(2) 1096/ 6001258 :                     .z_3:
(2) 1097/ 6001258 : 6903                		mov	r0,r9
(2) 1098/ 600125A : 6069                		swap	r6,r0
(2) 1099/ 600125C : C801                		tst	#%01,r0
(2) 1100/ 600125E : 8902                		bt	.x_mswap
(2) 1101/ 6001260 : 6998                		swap.b	r9,r9
(2) 1102/ 6001262 : 6999                		swap.w	r9,r9
(2) 1103/ 6001264 : 6998                		swap.b	r9,r9
(2) 1104/ 6001266 :                     .x_mswap:
(2) 1105/ 6001266 : 4511                		cmp/pz	r5
(2) 1106/ 6001268 : 8B19                		bf	.x_left
(2) 1107/ 600126A : 904F                		mov	#SET_MSCRLWDTH,r0
(2) 1108/ 600126C : 3503                		cmp/ge	r0,r5
(2) 1109/ 600126E : 8B31                		bf	.x_mid
(2) 1110/ 6001270 :                     
(2) 1111/ 6001270 :                     ; ---------------------------------------
(2) 1112/ 6001270 :                     ; RIGHT SIDE
(2) 1113/ 6001270 :                     ;
(2) 1114/ 6001270 :                     ; r5 is lost after this
(2) 1115/ 6001270 :                     ; ---------------------------------------
(2) 1116/ 6001270 :                     
(2) 1117/ 6001270 : 6053                		mov	r5,r0
(2) 1118/ 6001272 : C903                		and	#%011,r0
(2) 1119/ 6001274 : 2008                		tst	r0,r0
(2) 1120/ 6001276 : 893C                		bt	.x_end
(2) 1121/ 6001278 : E504                		mov	#4,r5
(2) 1122/ 600127A : 3508                		sub	r0,r5
(2) 1123/ 600127C : 6998                		swap.b	r9,r9	; 1 2 4 3
(2) 1124/ 600127E : 6999                		swap.w	r9,r9	; 4 3 1 2
(2) 1125/ 6001280 : 6998                		swap.b	r9,r9	; 4 3 2 1
(2) 1126/ 6001282 : 6073                		mov	r7,r0
(2) 1127/ 6001284 : 30EC                		add	r14,r0
(2) 1128/ 6001286 : 2090                		mov.b	r9,@r0
(2) 1129/ 6001288 : 4919                		shlr8	r9
(2) 1130/ 600128A : 7001                		add	#1,r0
(2) 1131/ 600128C : 4510                		dt	r5
(2) 1132/ 600128E : 8930                		bt	.x_end
(2) 1133/ 6001290 : 2090                		mov.b	r9,@r0
(2) 1134/ 6001292 : 4919                		shlr8	r9
(2) 1135/ 6001294 : 7001                		add	#1,r0
(2) 1136/ 6001296 : 4510                		dt	r5
(2) 1137/ 6001298 : 892B                		bt	.x_end
(2) 1138/ 600129A : A02A                		bra	.x_end
(2) 1139/ 600129C : 2090                		mov.b	r9,@r0
(2) 1140/ 600129E :                     
(2) 1141/ 600129E :                     ; ---------------------------------------
(2) 1142/ 600129E :                     ; LEFT SIDE
(2) 1143/ 600129E :                     ; ---------------------------------------
(2) 1144/ 600129E :                     
(2) 1145/ 600129E :                     .x_left:
(2) 1146/ 600129E : E0FC                		mov	#-4,r0
(2) 1147/ 60012A0 : 3507                		cmp/gt	r0,r5
(2) 1148/ 60012A2 : 8B15                		bf	.xl_far
(2) 1149/ 60012A4 : 605B                		neg	r5,r0
(2) 1150/ 60012A6 : 7003                		add	#3,r0
(2) 1151/ 60012A8 : 305C                		add	r5,r0
(2) 1152/ 60012AA : C903                		and	#%011,r0
(2) 1153/ 60012AC : 7001                		add	#1,r0
(2) 1154/ 60012AE : 307C                		add	r7,r0
(2) 1155/ 60012B0 : 30EC                		add	r14,r0
(2) 1156/ 60012B2 : 7504                		add	#4,r5
(2) 1157/ 60012B4 :                     	rept 3
(2) 1158/ 60012B4 :                     		mov.b	r9,@-r0
(2) 1159/ 60012B4 :                     		shlr8	r9
(2) 1160/ 60012B4 :                     		dt	r5
(2) 1161/ 60012B4 :                     		bt	.xl_far
(2) 1162/ 60012B4 :                     	endm
(2) 1158/ 60012B4 : 2094                		mov.b	r9,@-r0
(2) 1159/ 60012B6 : 4919                		shlr8	r9
(2) 1160/ 60012B8 : 4510                		dt	r5
(2) 1161/ 60012BA : 8909                		bt	.xl_far
(2) 1158/ 60012BC : 2094                		mov.b	r9,@-r0
(2) 1159/ 60012BE : 4919                		shlr8	r9
(2) 1160/ 60012C0 : 4510                		dt	r5
(2) 1161/ 60012C2 : 8905                		bt	.xl_far
(2) 1158/ 60012C4 : 2094                		mov.b	r9,@-r0
(2) 1159/ 60012C6 : 4919                		shlr8	r9
(2) 1160/ 60012C8 : 4510                		dt	r5
(2) 1161/ 60012CA : 8901                		bt	.xl_far
(2) 1163/ 60012CC : E0FC                		mov	#-4,r0
(2) 1164/ 60012CE : 2059                		and	r5,r0
(2) 1165/ 60012D0 :                     .xl_far:
(2) 1166/ 60012D0 : A00B                		bra	.x_bad
(2) 1167/ 60012D2 : 7504                		add	#4,r5
(2) 1168/ 60012D4 :                     
(2) 1169/ 60012D4 :                     ; ---------------------------------------
(2) 1170/ 60012D4 :                     ; MIDDLE SIDE
(2) 1171/ 60012D4 :                     ; ---------------------------------------
(2) 1172/ 60012D4 :                     
(2) 1173/ 60012D4 :                     .x_mid:
(2) 1174/ 60012D4 : 6073                		mov	r7,r0
(2) 1175/ 60012D6 : 30EC                		add	r14,r0
(2) 1176/ 60012D8 : 7004                		add	#4,r0
(2) 1177/ 60012DA : 2094                		mov.b	r9,@-r0
(2) 1178/ 60012DC : 4919                		shlr8	r9
(2) 1179/ 60012DE : 2094                		mov.b	r9,@-r0
(2) 1180/ 60012E0 : 4919                		shlr8	r9
(2) 1181/ 60012E2 : 2094                		mov.b	r9,@-r0
(2) 1182/ 60012E4 : 4919                		shlr8	r9
(2) 1183/ 60012E6 : 2094                		mov.b	r9,@-r0
(2) 1184/ 60012E8 : 7504                		add	#4,r5
(2) 1185/ 60012EA :                     .x_bad:
(2) 1186/ 60012EA : 338C                		add	r8,r3
(2) 1187/ 60012EC : 4C10                		dt	r12
(2) 1188/ 60012EE : 8F9C                		bf/s	.x_loop
(2) 1189/ 60012F0 : 7704                		add	#4,r7
(2) 1190/ 60012F2 :                     .x_end:
(2) 1191/ 60012F2 :                     
(2) 1192/ 60012F2 :                     ; ---------------------------------------
(2) 1193/ 60012F2 : 051A                		sts	macl,r5
(2) 1194/ 60012F4 : 070A                		sts	mach,r7
(2) 1195/ 60012F6 : 314C                		add	r4,r1		; Next line FOWARD
(2) 1196/ 60012F8 : 4510                		dt	r5
(2) 1197/ 60012FA : 8F8E                		bf/s	.y_loop
(2) 1198/ 60012FC : 37BC                		add	r11,r7
(2) 1199/ 60012FE :                     .y_last:
(2) 1200/ 60012FE :                     
(2) 1201/ 60012FE :                     .y_end:
(2) 1202/ 60012FE : 6CF6                		mov	@r15+,r12
(2) 1203/ 6001300 : 6AF6                		mov	@r15+,r10
(2) 1204/ 6001302 : 69F6                		mov	@r15+,r9
(2) 1205/ 6001304 : 68F6                		mov	@r15+,r8
(2) 1206/ 6001306 : 67F6                		mov	@r15+,r7
(2) 1207/ 6001308 : 000B                		rts
(2) 1208/ 600130A : 0009                		nop
(2) 1209/ 600130C :                     		align 4
(2) 1210/ 600130C : 0140                		ltorg
(2) 1211/ 600130E :                     
(2) 1212/ 600130E :                     ; --------------------------------------------------------
(2) 1213/ 600130E :                     ; scrlDrw_DrawBlk
(2) 1214/ 600130E :                     ;
(2) 1215/ 600130E :                     ; Currents:
(2) 1216/ 600130E :                     ; r0 - Block data and index flags (if r1 != 0)
(2) 1217/ 600130E :                     ; r1 - Graphics data, 0 = blank mode
(2) 1218/ 600130E :                     ; r2 - FB TL position
(2) 1219/ 600130E :                     ;
(2) 1220/ 600130E :                     ; InLoop:
(2) 1221/ 600130E :                     ; r14 - Framebuffer BASE
(2) 1222/ 600130E :                     ; r13 - Scrl W*H
(2) 1223/ 600130E :                     ; r11 - Scrl width
(2) 1224/ 600130E :                     ;
(2) 1225/ 600130E :                     ; Uses:
(2) 1226/ 600130E :                     ; r4,macl,mach
(2) 1227/ 600130E :                     ; --------------------------------------------------------
(2) 1228/ 600130E :                     
(2) 1229/ 600130E :                     		align 4
(2) 1230/ 6001310 :                     scrlDrw_DrawBlk:
(2) 1231/ 6001310 : 4115                		cmp/pl	r1
(2) 1232/ 6001312 : 8B01                		bf	.blank
(2) 1233/ 6001314 : A016                		bra	.normal
(2) 1234/ 6001316 : 0009                		nop
(2) 1235/ 6001318 :                     ; TODO: CHECAR ESTO EN HARDWARE
(2) 1236/ 6001318 :                     .blank:
(2) 1237/ 6001318 : E000                		mov	#0,r0
(2) 1238/ 600131A : E410                		mov	#16,r4
(2) 1239/ 600131C :                     .blnk_line:
(2) 1240/ 600131C : 32D3                		cmp/ge	r13,r2
(2) 1241/ 600131E : 8B00                		bf	.tl_snapb
(2) 1242/ 6001320 :                     ; 		bra	.blnk_line		; <-- Broken
(2) 1243/ 6001320 : 32D8                		sub	r13,r2
(2) 1244/ 6001322 :                     .tl_snapb:
(2) 1245/ 6001322 : 421A                		lds	r2,macl
(2) 1246/ 6001324 : 32EC                		add	r14,r2
(2) 1247/ 6001326 :                     	rept 16/4
(2) 1248/ 6001326 :                     		mov	r0,@r2
(2) 1249/ 6001326 :                     		add	#4,r2
(2) 1250/ 6001326 :                     	endm
(2) 1248/ 6001326 : 2202                		mov	r0,@r2
(2) 1249/ 6001328 : 7204                		add	#4,r2
(2) 1248/ 600132A : 2202                		mov	r0,@r2
(2) 1249/ 600132C : 7204                		add	#4,r2
(2) 1248/ 600132E : 2202                		mov	r0,@r2
(2) 1249/ 6001330 : 7204                		add	#4,r2
(2) 1248/ 6001332 : 2202                		mov	r0,@r2
(2) 1249/ 6001334 : 7204                		add	#4,r2
(2) 1251/ 6001336 : 021A                		sts	macl,r2
(2) 1252/ 6001338 : 4410                		dt	r4
(2) 1253/ 600133A : 8FEF                		bf/s	.blnk_line
(2) 1254/ 600133C : 32BC                		add	r11,r2
(2) 1255/ 600133E : 000B                		rts
(2) 1256/ 6001340 : 0009                		nop
(2) 1257/ 6001342 :                     		align 4
(2) 1258/ 6001344 :                     
(2) 1259/ 6001344 :                     ; ----------------------------------------
(2) 1260/ 6001344 :                     
(2) 1261/ 6001344 :                     .normal:
(2) 1262/ 6001344 : 430A                		lds	r3,mach
(2) 1263/ 6001346 : 4019                		shlr8	r0		; Get index increment
(2) 1264/ 6001348 : C9F8                		and	#$F8,r0		; Filter these bits only
(2) 1265/ 600134A : 6303                		mov	r0,r3
(2) 1266/ 600134C : E410                		mov	#16,r4
(2) 1267/ 600134E :                     .next_line:
(2) 1268/ 600134E : 32D3                		cmp/ge	r13,r2
(2) 1269/ 6001350 : 8B01                		bf	.tl_snap
(2) 1270/ 6001352 : AFFC                		bra	.next_line
(2) 1271/ 6001354 : 32D8                		sub	r13,r2
(2) 1272/ 6001356 :                     .tl_snap:
(2) 1273/ 6001356 : 421A                		lds	r2,macl
(2) 1274/ 6001358 : 32EC                		add	r14,r2
(2) 1275/ 600135A :                     	rept 16/4
(2) 1276/ 600135A :                     		mov	@r1,r0
(2) 1277/ 600135A :                     		swap.w	r0,r0		; 3 4 1 2
(2) 1278/ 600135A :                     		swap.b	r0,r0		; 3 4 2 1
(2) 1279/ 600135A :                     		tst	#$FF,r0
(2) 1280/ 600135A :                     		bt	.z_0
(2) 1281/ 600135A :                     		add	r3,r0
(2) 1282/ 600135A :                     .z_0:		swap.b	r0,r0		; 3 4 1 2
(2) 1283/ 600135A :                     		tst	#$FF,r0
(2) 1284/ 600135A :                     		bt	.z_1
(2) 1285/ 600135A :                     		add	r3,r0
(2) 1286/ 600135A :                     .z_1:		swap.w	r0,r0		; 1 2 3 4
(2) 1287/ 600135A :                     		swap.b	r0,r0		; 1 2 4 3
(2) 1288/ 600135A :                     		tst	#$FF,r0
(2) 1289/ 600135A :                     		bt	.z_2
(2) 1290/ 600135A :                     		add	r3,r0
(2) 1291/ 600135A :                     .z_2:		swap.b	r0,r0		; 1 2 3 4
(2) 1292/ 600135A :                     		tst	#$FF,r0
(2) 1293/ 600135A :                     		bt	.z_3
(2) 1294/ 600135A :                     		add	r3,r0
(2) 1295/ 600135A :                     .z_3:
(2) 1296/ 600135A :                     		add	#4,r1		; <-- src incr
(2) 1297/ 600135A :                     		mov	r0,@r2
(2) 1298/ 600135A :                     		add	#4,r2
(2) 1299/ 600135A :                     	endm
(2) 1276/ 600135A : 6012                		mov	@r1,r0
(2) 1277/ 600135C : 6009                		swap.w	r0,r0		; 3 4 1 2
(2) 1278/ 600135E : 6008                		swap.b	r0,r0		; 3 4 2 1
(2) 1279/ 6001360 : C8FF                		tst	#$FF,r0
(2) 1280/ 6001362 : 8900                		bt	.z_0
(2) 1281/ 6001364 : 303C                		add	r3,r0
(2) 1282/ 6001366 : 6008                .z_0:		swap.b	r0,r0		; 3 4 1 2
(2) 1283/ 6001368 : C8FF                		tst	#$FF,r0
(2) 1284/ 600136A : 8900                		bt	.z_1
(2) 1285/ 600136C : 303C                		add	r3,r0
(2) 1286/ 600136E : 6009                .z_1:		swap.w	r0,r0		; 1 2 3 4
(2) 1287/ 6001370 : 6008                		swap.b	r0,r0		; 1 2 4 3
(2) 1288/ 6001372 : C8FF                		tst	#$FF,r0
(2) 1289/ 6001374 : 8900                		bt	.z_2
(2) 1290/ 6001376 : 303C                		add	r3,r0
(2) 1291/ 6001378 : 6008                .z_2:		swap.b	r0,r0		; 1 2 3 4
(2) 1292/ 600137A : C8FF                		tst	#$FF,r0
(2) 1293/ 600137C : 8900                		bt	.z_3
(2) 1294/ 600137E : 303C                		add	r3,r0
(2) 1295/ 6001380 :                     .z_3:
(2) 1296/ 6001380 : 7104                		add	#4,r1		; <-- src incr
(2) 1297/ 6001382 : 2202                		mov	r0,@r2
(2) 1298/ 6001384 : 7204                		add	#4,r2
(2) 1276/ 6001386 : 6012                		mov	@r1,r0
(2) 1277/ 6001388 : 6009                		swap.w	r0,r0		; 3 4 1 2
(2) 1278/ 600138A : 6008                		swap.b	r0,r0		; 3 4 2 1
(2) 1279/ 600138C : C8FF                		tst	#$FF,r0
(2) 1280/ 600138E : 8900                		bt	.z_0
(2) 1281/ 6001390 : 303C                		add	r3,r0
(2) 1282/ 6001392 : 6008                .z_0:		swap.b	r0,r0		; 3 4 1 2
(2) 1283/ 6001394 : C8FF                		tst	#$FF,r0
(2) 1284/ 6001396 : 8900                		bt	.z_1
(2) 1285/ 6001398 : 303C                		add	r3,r0
(2) 1286/ 600139A : 6009                .z_1:		swap.w	r0,r0		; 1 2 3 4
(2) 1287/ 600139C : 6008                		swap.b	r0,r0		; 1 2 4 3
(2) 1288/ 600139E : C8FF                		tst	#$FF,r0
(2) 1289/ 60013A0 : 8900                		bt	.z_2
(2) 1290/ 60013A2 : 303C                		add	r3,r0
(2) 1291/ 60013A4 : 6008                .z_2:		swap.b	r0,r0		; 1 2 3 4
(2) 1292/ 60013A6 : C8FF                		tst	#$FF,r0
(2) 1293/ 60013A8 : 8900                		bt	.z_3
(2) 1294/ 60013AA : 303C                		add	r3,r0
(2) 1295/ 60013AC :                     .z_3:
(2) 1296/ 60013AC : 7104                		add	#4,r1		; <-- src incr
(2) 1297/ 60013AE : 2202                		mov	r0,@r2
(2) 1298/ 60013B0 : 7204                		add	#4,r2
(2) 1276/ 60013B2 : 6012                		mov	@r1,r0
(2) 1277/ 60013B4 : 6009                		swap.w	r0,r0		; 3 4 1 2
(2) 1278/ 60013B6 : 6008                		swap.b	r0,r0		; 3 4 2 1
(2) 1279/ 60013B8 : C8FF                		tst	#$FF,r0
(2) 1280/ 60013BA : 8900                		bt	.z_0
(2) 1281/ 60013BC : 303C                		add	r3,r0
(2) 1282/ 60013BE : 6008                .z_0:		swap.b	r0,r0		; 3 4 1 2
(2) 1283/ 60013C0 : C8FF                		tst	#$FF,r0
(2) 1284/ 60013C2 : 8900                		bt	.z_1
(2) 1285/ 60013C4 : 303C                		add	r3,r0
(2) 1286/ 60013C6 : 6009                .z_1:		swap.w	r0,r0		; 1 2 3 4
(2) 1287/ 60013C8 : 6008                		swap.b	r0,r0		; 1 2 4 3
(2) 1288/ 60013CA : C8FF                		tst	#$FF,r0
(2) 1289/ 60013CC : 8900                		bt	.z_2
(2) 1290/ 60013CE : 303C                		add	r3,r0
(2) 1291/ 60013D0 : 6008                .z_2:		swap.b	r0,r0		; 1 2 3 4
(2) 1292/ 60013D2 : C8FF                		tst	#$FF,r0
(2) 1293/ 60013D4 : 8900                		bt	.z_3
(2) 1294/ 60013D6 : 303C                		add	r3,r0
(2) 1295/ 60013D8 :                     .z_3:
(2) 1296/ 60013D8 : 7104                		add	#4,r1		; <-- src incr
(2) 1297/ 60013DA : 2202                		mov	r0,@r2
(2) 1298/ 60013DC : 7204                		add	#4,r2
(2) 1276/ 60013DE : 6012                		mov	@r1,r0
(2) 1277/ 60013E0 : 6009                		swap.w	r0,r0		; 3 4 1 2
(2) 1278/ 60013E2 : 6008                		swap.b	r0,r0		; 3 4 2 1
(2) 1279/ 60013E4 : C8FF                		tst	#$FF,r0
(2) 1280/ 60013E6 : 8900                		bt	.z_0
(2) 1281/ 60013E8 : 303C                		add	r3,r0
(2) 1282/ 60013EA : 6008                .z_0:		swap.b	r0,r0		; 3 4 1 2
(2) 1283/ 60013EC : C8FF                		tst	#$FF,r0
(2) 1284/ 60013EE : 8900                		bt	.z_1
(2) 1285/ 60013F0 : 303C                		add	r3,r0
(2) 1286/ 60013F2 : 6009                .z_1:		swap.w	r0,r0		; 1 2 3 4
(2) 1287/ 60013F4 : 6008                		swap.b	r0,r0		; 1 2 4 3
(2) 1288/ 60013F6 : C8FF                		tst	#$FF,r0
(2) 1289/ 60013F8 : 8900                		bt	.z_2
(2) 1290/ 60013FA : 303C                		add	r3,r0
(2) 1291/ 60013FC : 6008                .z_2:		swap.b	r0,r0		; 1 2 3 4
(2) 1292/ 60013FE : C8FF                		tst	#$FF,r0
(2) 1293/ 6001400 : 8900                		bt	.z_3
(2) 1294/ 6001402 : 303C                		add	r3,r0
(2) 1295/ 6001404 :                     .z_3:
(2) 1296/ 6001404 : 7104                		add	#4,r1		; <-- src incr
(2) 1297/ 6001406 : 2202                		mov	r0,@r2
(2) 1298/ 6001408 : 7204                		add	#4,r2
(2) 1300/ 600140A : 021A                		sts	macl,r2
(2) 1301/ 600140C : 4410                		dt	r4
(2) 1302/ 600140E : 8F9E                		bf/s	.next_line
(2) 1303/ 6001410 : 32BC                		add	r11,r2
(2) 1304/ 6001412 :                     
(2) 1305/ 6001412 : 030A                		sts	mach,r3
(2) 1306/ 6001414 : 000B                		rts
(2) 1307/ 6001416 : 0009                		nop
(2) 1308/ 6001418 :                     		align 4
(2) 1309/ 6001418 :                     		ltorg
(2) 1310/ 6001418 :                     
(1) 1817/ 6001418 :                     		include "system/mars/cache/cache_mstr.asm"
(2)    1/ 6001418 :                     ; ====================================================================
(2)    2/ 6001418 :                     ; ----------------------------------------------------------------
(2)    3/ 6001418 :                     ; CACHE code
(2)    4/ 6001418 :                     ;
(2)    5/ 6001418 :                     ; LIMIT: $600 bytes
(2)    6/ 6001418 :                     ; ----------------------------------------------------------------
(2)    7/ 6001418 :                     
(2)    8/ 6001418 :                     		align 4
(2)    9/ 6001418 :                     CACHE_MASTER:
(2)   10/       0 :                     		phase 0		; AS can't phase $C0000000
(2)   11/       0 :                     
(2)   12/       0 :                     ; ====================================================================
(2)   13/       0 :                     
(2)   14/       0 : 4D41 5354 4552      		dc.b "MASTER CACHE GOES HERE"
                6 : 2043 4143 4845 
                C : 2047 4F45 5320 
               12 : 4845 5245          
(2)   15/      16 :                     		align 4
(2)   16/      18 :                     
(2)   17/      18 :                     ; ====================================================================
(2)   18/      18 :                     
(2)   19/ 6001430 :                     		dephase
(2)   20/ 6001430 :                     		align 4
(2)   21/ 6001430 :                     CACHE_MASTER_E:
SH2 MASTER CACHE uses: 18
(2)   23/ 6001430 :                     		message "SH2 MASTER CACHE uses: \{(CACHE_MASTER_E-CACHE_MASTER)}"
(2)   25/ 6001430 :                     
(1) 1818/ 6001430 :                     		include "system/mars/cache/cache_slv.asm"
(2)    1/ 6001430 :                     ; ====================================================================
(2)    2/ 6001430 :                     ; ----------------------------------------------------------------
(2)    3/ 6001430 :                     ; CACHE code
(2)    4/ 6001430 :                     ;
(2)    5/ 6001430 :                     ; LIMIT: $600 bytes
(2)    6/ 6001430 :                     ; ----------------------------------------------------------------
(2)    7/ 6001430 :                     
(2)    8/ 6001430 :                     		align 4
(2)    9/ 6001430 :                     CACHE_SLAVE:
(2)   10/       0 :                     		phase 0		; AS can't phase $C0000000
(2)   11/       0 :                     
(2)   12/       0 :                     ; ====================================================================
(2)   13/       0 :                     ; --------------------------------------------------------
(2)   14/       0 :                     ; PWM Interrupt
(2)   15/       0 :                     ; --------------------------------------------------------
(2)   16/       0 :                     
(2)   17/       0 :                     ; MarsPwm_Playback:
(2)   18/       0 :                     s_irq_pwm:
(2)   19/       0 : 9194                		mov	#_FRT,r1
(2)   20/       2 : 8417                		mov.b	@(7,r1),r0
(2)   21/       4 : CA02                		xor	#2,r0
(2)   22/       6 : 8017                		mov.b	r0,@(7,r1)
(2)   23/       8 : D144                		mov	#_sysreg+pwmintclr,r1
(2)   24/       A : 2101                		mov.w	r0,@r1
(2)   25/       C : 6011                		mov.w	@r1,r0
(2)   26/       E : D144                		mov	#_sysreg+monowidth,r1
(2)   27/      10 : 6011                		mov.w	@r1,r0
(2)   28/      12 : 4019                		shlr8	r0
(2)   29/      14 : C880                		tst	#$80,r0
(2)   30/      16 : 8B7F                		bf	.pwm_full
(2)   31/      18 : 2F26                		mov	r2,@-r15
(2)   32/      1A : 2F36                		mov	r3,@-r15
(2)   33/      1C : 2F46                		mov	r4,@-r15
(2)   34/      1E : 2F56                		mov	r5,@-r15
(2)   35/      20 : 2F66                		mov	r6,@-r15
(2)   36/      22 : 2F76                		mov	r7,@-r15
(2)   37/      24 : 2F86                		mov	r8,@-r15
(2)   38/      26 : 2F96                		mov	r9,@-r15
(2)   39/      28 : 2FA6                		mov	r10,@-r15
(2)   40/      2A : 4F12                		sts	macl,@-r15
(2)   41/      2C :                     ; ------------------------------------------------
(2)   42/      2C :                     
(2)   43/      2C :                     .fifo_loop:
(2)   44/      2C : DA3D                		mov	#$C0000000|RAM_Mars_PwmList,r10
(2)   45/      2E : E907                		mov	#MAX_PWMCHNL,r9
(2)   46/      30 : E600                		mov	#0,r6			; r6 - left
(2)   47/      32 : E700                		mov	#0,r7			; r7 - right
(2)   48/      34 :                     .next_chnl:
(2)   49/      34 : 54A0                		mov	@(mchnsnd_enbl,r10),r4
(2)   50/      36 : 6043                		mov	r4,r0
(2)   51/      38 : C880                		tst	#$80,r0
(2)   52/      3A : 8B02                		bf	.enabled
(2)   53/      3C : 9177                .chnl_siln:	mov	#$80,r1
(2)   54/      3E : A04C                		bra	.chnl_off
(2)   55/      40 : 6213                		mov	r1,r2
(2)   56/      42 :                     .enabled:
(2)   57/      42 : 0009                		nop
(2)   58/      44 : 53A6                		mov	@(mchnsnd_pitch,r10),r3
(2)   59/      46 : C808                		tst	#%1000,r0
(2)   60/      48 : 8900                		bt	.st_pitch
(2)   61/      4A : 4300                		shll	r3
(2)   62/      4C :                     .st_pitch:
(2)   63/      4C : 55A1                		mov	@(mchnsnd_read,r10),r5
(2)   64/      4E : 353C                		add	r3,r5
(2)   65/      50 : 50A4                		mov	@(mchnsnd_len,r10),r0
(2)   66/      52 : 3038                		sub	r3,r0
(2)   67/      54 : 3503                		cmp/ge	r0,r5
(2)   68/      56 : 8B08                		bf	.keep
(2)   69/      58 : 6043                		mov	r4,r0
(2)   70/      5A : C804                		tst	#%0100,r0
(2)   71/      5C : 8B02                		bf	.loopit
(2)   72/      5E : 200A                		xor	r0,r0
(2)   73/      60 : AFEC                		bra	.chnl_siln
(2)   74/      62 : 1A00                		mov	r0,@(mchnsnd_enbl,r10)
(2)   75/      64 :                     .loopit:
(2)   76/      64 : 55A3                		mov	@(mchnsnd_start,r10),r5
(2)   77/      66 : 53A5                		mov	@(mchnsnd_loop,r10),r3
(2)   78/      68 : 353C                		add	r3,r5
(2)   79/      6A :                     .keep:
(2)   80/      6A : 1A51                		mov	r5,@(mchnsnd_read,r10)
(2)   81/      6C : 6043                		mov	r4,r0
(2)   82/      6E :                     
(2)   83/      6E :                     	; Make wave address point
(2)   84/      6E :                     	; r5 - xxxxxx.00
(2)   85/      6E : 54A2                		mov	@(mchnsnd_bank,r10),r4
(2)   86/      70 : 4519                		shlr8	r5
(2)   87/      72 : 254B                		or	r4,r5
(2)   88/      74 :                     .read_wav:
(2)   89/      74 : C808                		tst	#%1000,r0
(2)   90/      76 : 8901                		bt	.stand
(2)   91/      78 : E3FE                		mov	#-2,r3
(2)   92/      7A : 2539                		and	r3,r5
(2)   93/      7C :                     .stand:
(2)   94/      7C : 6354                		mov.b	@r5+,r3
(2)   95/      7E : 633C                		extu.b	r3,r3
(2)   96/      80 : C808                		tst	#%1000,r0
(2)   97/      82 : 8902                		bt	.do_mono
(2)   98/      84 : 6454                		mov.b	@r5+,r4
(2)   99/      86 : A001                		bra	.go_wave
(2)  100/      88 : 644C                		extu.b	r4,r4
(2)  101/      8A :                     .do_mono:
(2)  102/      8A : 6433                		mov	r3,r4
(2)  103/      8C :                     
(2)  104/      8C :                     ; r3 - left byte
(2)  105/      8C :                     ; r4 - right byte
(2)  106/      8C :                     .go_wave:
(2)  107/      8C : 7301                		add	#1,r3
(2)  108/      8E : 7401                		add	#1,r4
(2)  109/      90 : E180                		mov.b	#$80,r1
(2)  110/      92 : 611C                		extu.b	r1,r1
(2)  111/      94 : 6213                		mov	r1,r2
(2)  112/      96 : C802                .mnon_z:	tst	#%0010,r0
(2)  113/      98 : 8900                		bt	.ml_out
(2)  114/      9A : 6133                		mov	r3,r1
(2)  115/      9C : C801                .ml_out:	tst	#%0001,r0
(2)  116/      9E : 8900                		bt	.do_vol
(2)  117/      A0 : 6243                		mov	r4,r2
(2)  118/      A2 :                     ; r1 - left
(2)  119/      A2 :                     ; r2 - right
(2)  120/      A2 :                     .do_vol:
(2)  121/      A2 : 50A7                		mov	@(mchnsnd_vol,r10),r0
(2)  122/      A4 : 4015                		cmp/pl	r0
(2)  123/      A6 : 8B18                		bf	.chnl_off
(2)  124/      A8 : E440                		mov	#64,r4
(2)  125/      AA : 3043                		cmp/ge	r4,r0
(2)  126/      AC : 89C6                		bt	.chnl_siln
(2)  127/      AE : 7001                		add	#1,r0
(2)  128/      B0 : 4008                		shll2	r0
(2)  129/      B2 : 210E                		mulu	r0,r1
(2)  130/      B4 : 041A                		sts	macl,r4
(2)  131/      B6 : 4419                		shlr8	r4
(2)  132/      B8 : 3148                		sub	r4,r1
(2)  133/      BA : 220E                		mulu	r0,r2
(2)  134/      BC : 041A                		sts	macl,r4
(2)  135/      BE : 4419                		shlr8	r4
(2)  136/      C0 : 3248                		sub	r4,r2
(2)  137/      C2 : 4115                		cmp/pl	r1
(2)  138/      C4 : 8900                		bt	.l_low
(2)  139/      C6 : E100                		mov	#0,r1
(2)  140/      C8 : 4215                .l_low:		cmp/pl	r2
(2)  141/      CA : 8900                		bt	.r_low
(2)  142/      CC : E200                		mov	#0,r2
(2)  143/      CE : 942E                .r_low:		mov	#$80,r4		; <-- This prevents a click
(2)  144/      D0 : 240E                		mulu	r0,r4
(2)  145/      D2 : 001A                		sts	macl,r0
(2)  146/      D4 : 4019                		shlr8	r0
(2)  147/      D6 : 310C                		add	r0,r1
(2)  148/      D8 : 320C                		add	r0,r2
(2)  149/      DA :                     .chnl_off:
(2)  150/      DA : 361C                		add	r1,r6
(2)  151/      DC : 372C                		add	r2,r7
(2)  152/      DE : 4910                		dt	r9
(2)  153/      E0 : 8FA8                		bf/s	.next_chnl
(2)  154/      E2 : 7A20                		add	#sizeof_marssnd,r10
(2)  155/      E4 : 9024                		mov	#$7FF,r0
(2)  156/      E6 : 3603                		cmp/ge	r0,r6
(2)  157/      E8 : 8B00                		bf	.l_max
(2)  158/      EA : 6603                		mov	r0,r6
(2)  159/      EC :                     .l_max:
(2)  160/      EC : 3703                		cmp/ge	r0,r7
(2)  161/      EE : 8B00                		bf	.r_max
(2)  162/      F0 : 6703                		mov	r0,r7
(2)  163/      F2 :                     .r_max:
(2)  164/      F2 : 4628                		shll16	r6
(2)  165/      F4 : 276B                		or	r6,r7
(2)  166/      F6 : D00C                		mov	#_sysreg+lchwidth,r0
(2)  167/      F8 : 2072                		mov	r7,@r0
(2)  168/      FA : D109                		mov	#_sysreg+monowidth,r1
(2)  169/      FC : 6011                		mov.w	@r1,r0
(2)  170/      FE : 4019                		shlr8	r0
(2)  171/     100 : C880                		tst	#$80,r0
(2)  172/     102 : 8993                		bt	.fifo_loop
(2)  173/     104 :                     
(2)  174/     104 :                     ; ------------------------------------------------
(2)  175/     104 : 4F16                		lds	@r15+,macl
(2)  176/     106 : 6AF6                		mov	@r15+,r10
(2)  177/     108 : 69F6                		mov	@r15+,r9
(2)  178/     10A : 68F6                		mov	@r15+,r8
(2)  179/     10C : 67F6                		mov	@r15+,r7
(2)  180/     10E : 66F6                		mov	@r15+,r6
(2)  181/     110 : 65F6                		mov	@r15+,r5
(2)  182/     112 : 64F6                		mov	@r15+,r4
(2)  183/     114 : 63F6                		mov	@r15+,r3
(2)  184/     116 : 62F6                		mov	@r15+,r2
(2)  185/     118 :                     .pwm_full:
(2)  186/     118 : 000B                		rts
(2)  187/     11A : 0009                		nop
(2)  188/     11C :                     		align 4
(2)  189/     11C : 2000 401C 2000      		ltorg
              122 : 4038 C000 0140 
              128 : 2000 4034 FE10 
              12E : 0080 07FF          
(2)  190/     132 :                     
(2)  191/     132 :                     ; ====================================================================
(2)  192/     132 :                     
(2)  193/     132 :                     			align $10
(2)  194/     140 :                     RAM_Mars_PwmList	ds.b sizeof_marssnd*MAX_PWMCHNL		; PWM list
(2)  195/     220 :                     RAM_Mars_PwmTable	ds.b 8*8				; Gema Z80 table
(2)  196/     260 :                     
(2)  197/     260 :                     ; ------------------------------------------------
(2)  198/ 6001690 :                     		dephase
(2)  199/ 6001690 :                     ; .end:		phase CACHE_SLAVE+.end&$1FFF
(2)  200/ 6001690 :                     
(2)  201/ 6001690 :                     		align 4
(2)  202/ 6001690 :                     CACHE_SLAVE_E:
SH2 SLAVE CACHE uses: 260
(2)  204/ 6001690 :                     		message "SH2 SLAVE CACHE uses: \{(CACHE_SLAVE_E-CACHE_SLAVE)}"
(2)  206/ 6001690 :                     
(1) 1819/ 6001690 :                     
(1) 1820/ 6001690 :                     ; ====================================================================
(1) 1821/ 6001690 :                     ; ----------------------------------------------------------------
(1) 1822/ 6001690 :                     ; GLOBAL GBR Variables
(1) 1823/ 6001690 :                     ;
(1) 1824/ 6001690 :                     ; SHARED FOR BOTH CPUS, watch out for the Read/Write conflicts.
(1) 1825/ 6001690 :                     ; ----------------------------------------------------------------
(1) 1826/ 6001690 :                     
(1) 1827/ 6001690 :                     			align $10
(1) 1828/ 6001690 :                     RAM_Mars_Global:
(1) 1829/ 6001690 : (MACRO)              			strct 0
(1) 1829/ 6001690 : =$6001690            GLBL_LASTPC     set *
(1) 1829/     A3C :                                     dephase
(1) 1829/       0 :                                     phase 0
(1) 1829/       0 : =$0                  GLBL_LASTORG    set *
(1) 1830/       0 : 0000                marsGbl_XShift		dc.w 0					; **** Xscroll bit for indexed scrolling
(1) 1831/       2 : 0000                marsGbl_ThisFrame	dc.w 0
(1) 1832/       4 : 0000                marsGbl_SSprFlip	dc.w 0
(1) 1833/       6 : 0000                marsGbl_FreeW1		dc.w 0
(1) 1834/       8 : 0000 0000           marsGbl_DreqRead	dc.l 0					; **** RAM_Mars_DreqBuff_0|TH
(1) 1835/       C : 0000 0000           marsGbl_DreqWrite	dc.l 0					; RAM_Mars_DreqBuff_1|TH
(1) 1836/      10 : 0000 0000           marsGbl_Scrl_Xpos	dc.l 0					; ****
(1) 1837/      14 : 0000 0000           marsGbl_Scrl_Ypos	dc.l 0
(1) 1838/      18 : 0000 0000           marsGbl_Scrl_FREE0	dc.l 0
(1) 1839/      1C : 0000 0000           marsGbl_Scrl_FREE1	dc.l 0
(1) 1840/      20 : 0000 0000           marsGbl_Scrl_FbTL	dc.l 0					; ****
(1) 1841/      24 : 0000 0000           marsGbl_Scrl_FbY	dc.l 0
(1) 1842/      28 : 0000 0000           marsGbl_Scrl_Art	dc.l 0
(1) 1843/      2C : 0000 0000           marsGbl_Scrl_DrwAll	dc.l 0
(1) 1844/      30 : 0000 0000           marsGbl_Scrl_DrwR	dc.l 0					; ****
(1) 1845/      34 : 0000 0000           marsGbl_Scrl_DrwL	dc.l 0
(1) 1846/      38 : 0000 0000           marsGbl_Scrl_DrwD	dc.l 0
(1) 1847/      3C : 0000 0000           marsGbl_Scrl_DrwU	dc.l 0
(1) 1848/      40 : 0000 0000           marsGbl_Scrl_Size	dc.l 0					; ****
(1) 1849/      44 : 0000 0000           marsGbl_Scrl_Wdth	dc.l 0
(1) 1850/      48 : 0000 0000           marsGbl_Scrl_Hght	dc.l 0
(1) 1851/      4C : 0000 0000           marsGbl_Scrl_FbOut	dc.l 0
(1) 1852/      50 : 0000 0000           sizeof_MarsGbl		dc.l 0
(1) 1853/      54 : (MACRO)              			endstrct
(1) 1853/       0 :                                     org GLBL_LASTORG
(1) 1853/ 6001690 :                                     phase GLBL_LASTPC
(1) 1854/ 6001690 :                     			ds.b sizeof_MarsGbl
(1) 1855/ 60016E0 :                     
(1) 1856/ 60016E0 :                     ; ====================================================================
(1) 1857/ 60016E0 :                     ; ----------------------------------------------------------------
(1) 1858/ 60016E0 :                     ; CACHED RAM
(1) 1859/ 60016E0 :                     ; ----------------------------------------------------------------
(1) 1860/ 60016E0 :                     
(1) 1861/ 60016E0 :                     			align $10
(1) 1862/ 60016E0 :                     SH2_RAM:
(1) 1863/ 60016E0 :                     			phase SH2_RAM
(1) 1864/ 60016E0 :                     RAM_Mars_ScrlRefill_0	ds.w (512/SET_MSCRLSIZE)*(256/SET_MSCRLSIZE)	; Redraw blk timers (WORDS)
(1) 1865/ 6001AE0 :                     			dephase
(1) 1866/ 6001AE0 :                     
(1) 1867/ 6001AE0 :                     ; ====================================================================
(1) 1868/ 6001AE0 :                     ; ----------------------------------------------------------------
(1) 1869/ 6001AE0 :                     ; NON-CACHED RAM
(1) 1870/ 6001AE0 :                     ; ----------------------------------------------------------------
(1) 1871/ 6001AE0 :                     
(1) 1872/ 6001AE0 :                     			align $10
(1) 1873/ 6001AE0 :                     SH2_RAM_TH:
(1) 1874/26001AE0 :                     			phase SH2_RAM_TH|TH
(1) 1875/26001AE0 :                     RAM_Mars_DreqBuff_0	ds.b sizeof_dreq			; DREQ data from Genesis
(1) 1876/260021F0 :                     RAM_Mars_DreqBuff_1	ds.b sizeof_dreq			; ****
(1) 1877/ 6002900 :                     			dephase
(1) 1878/ 6002900 :                     
(1) 1879/ 6002900 : (MACRO)              		report "SH2 code uses",*-SH2_Master,-1
(1) 1880/ 6002900 :                     
(1) 1881/ 6002900 :                     ; ====================================================================
(1) 1882/ 6002900 :                     ; ----------------------------------------------------------------
(1) 1883/ 6002900 :                     ; Data
(1) 1884/ 6002900 :                     ; ----------------------------------------------------------------
(1) 1885/ 6002900 :                     
(1) 1886/ 6002900 :                     		align 4
(1) 1887/ 6002900 :                     sin_table	binclude "system/mars/data/sinedata.bin"
(1) 1888/ 6005100 :                     		align 4
(1) 1889/ 6005100 :                     		include "sound/smpl_pwm.asm"		; GEMA: PWM samples
(2)    1/ 6005100 :                     ; ===========================================================================
(2)    2/ 6005100 :                     ; --------------------------------------------------------
(2)    3/ 6005100 :                     ; GEMA/Nikona PWM instruments
(2)    4/ 6005100 :                     ;
(2)    5/ 6005100 :                     ; Located at SDRAM, SAMPLES MUST BE SMALL
(2)    6/ 6005100 :                     ;
(2)    7/ 6005100 :                     ; *** PUT align 4 AT THE TOP OF EVERY LABEL ***
(2)    8/ 6005100 :                     ; --------------------------------------------------------
(2)    9/ 6005100 :                     ; 	gSmplData Label,"file",loop_point(0-start)
(2)   10/ 6005100 :                     
(2)   11/ 6005100 :                     	align 4
(2)   12/ 6005100 : 5057 4D20 474F      	dc.b "PWM GOES HERE"
          6005106 : 4553 2048 4552 45 
(2)   13/ 600510D :                     ;  	gSmplData PwmIns_techno_01,"sound/instr/smpl/techno/01.wav",0
(2)   14/ 600510D :                     ;  	gSmplData PwmIns_techno_02,"sound/instr/smpl/techno/02.wav",0
(2)   15/ 600510D :                     ;   	gSmplData PwmIns_techno_03,"sound/instr/smpl/techno/03.wav",0
(2)   16/ 600510D :                     ;   	gSmplData PwmIns_techno_04,"sound/instr/smpl/techno/04.wav",0
(2)   17/ 600510D :                     ;  	gSmplData PwmIns_techno_05,"sound/instr/smpl/techno/05.wav",0
(2)   18/ 600510D :                     ;   	gSmplData PwmIns_techno_06,"sound/instr/smpl/techno/06.wav",53501
(2)   19/ 600510D :                     ;  	gSmplData PwmIns_techno_07,"sound/instr/smpl/techno/07.wav",11812
(2)   20/ 600510D :                     ;   	gSmplData PwmIns_techno_08,"sound/instr/smpl/techno/08.wav",456
(2)   21/ 600510D :                     ;  	gSmplData PwmIns_techno_09,"sound/instr/smpl/techno/09.wav",728
(2)   22/ 600510D :                     ;   	gSmplData PwmIns_techno_10,"sound/instr/smpl/techno/10.wav",132
(2)   23/ 600510D :                     ;   	gSmplData PwmIns_techno_11,"sound/instr/smpl/techno/11.wav",0
(2)   24/ 600510D :                     
(2)   25/ 600510D :                     ; 	gSmplData PwmIns_astral_01,"sound/instr/smpl/astral/01.wav",5812
(2)   26/ 600510D :                     ;  	gSmplData PwmIns_astral_02,"sound/instr/smpl/astral/02.wav",6384
(2)   27/ 600510D :                     ;   	gSmplData PwmIns_astral_03,"sound/instr/smpl/astral/03.wav",0
(2)   28/ 600510D :                     ;   	gSmplData PwmIns_astral_04,"sound/instr/smpl/astral/04.wav",0
(2)   29/ 600510D :                     ;  	gSmplData PwmIns_astral_05,"sound/instr/smpl/astral/05.wav",0
(2)   30/ 600510D :                     ;   	gSmplData PwmIns_astral_06,"sound/instr/smpl/astral/06.wav",0
(2)   31/ 600510D :                     ;  	gSmplData PwmIns_astral_07,"sound/instr/smpl/astral/07.wav",0
(2)   32/ 600510D :                     ;   	gSmplData PwmIns_astral_08,"sound/instr/smpl/astral/08.wav",0
(2)   33/ 600510D :                     ;  	gSmplData PwmIns_astral_09,"sound/instr/smpl/astral/09.wav",0
(2)   34/ 600510D :                     ; 	gSmplData PwmIns_astral_10,"sound/instr/smpl/astral/10.wav",0
(2)   35/ 600510D :                     ; 	gSmplData PwmIns_astral_11,"sound/instr/smpl/astral/11.wav",0
(2)   36/ 600510D :                     ;  	gSmplData PwmIns_astral_12,"sound/instr/smpl/astral/12.wav",0
(2)   37/ 600510D :                     ;   	gSmplData PwmIns_astral_13,"sound/instr/smpl/astral/13.wav",0
(2)   38/ 600510D :                     ;   	gSmplData PwmIns_astral_14,"sound/instr/smpl/astral/14.wav",0
(2)   39/ 600510D :                     ;  	gSmplData PwmIns_astral_15,"sound/instr/smpl/astral/15.wav",0
(2)   40/ 600510D :                     ;   	gSmplData PwmIns_astral_16,"sound/instr/smpl/astral/16.wav",0
(2)   41/ 600510D :                     ;  	gSmplData PwmIns_astral_17,"sound/instr/smpl/astral/17.wav",0
(2)   42/ 600510D :                     ;   	gSmplData PwmIns_astral_18,"sound/instr/smpl/astral/18.wav",0
(2)   43/ 600510D :                     ;  	gSmplData PwmIns_astral_19,"sound/instr/smpl/astral/19.wav",432
(2)   44/ 600510D :                     ;   	gSmplData PwmIns_astral_20,"sound/instr/smpl/astral/20.wav",250
(2)   45/ 600510D :                     ; 	gSmplData PwmIns_astral_21,"sound/instr/smpl/astral/21.wav",6386
(2)   46/ 600510D :                     ;  	gSmplData PwmIns_astral_22,"sound/instr/smpl/astral/22.wav",0
(2)   47/ 600510D :                     ;   	gSmplData PwmIns_astral_23,"sound/instr/smpl/astral/23.wav",0
(2)   48/ 600510D :                     ;   	gSmplData PwmIns_astral_24,"sound/instr/smpl/astral/24.wav",0
(2)   49/ 600510D :                     ;  	gSmplData PwmIns_astral_25,"sound/instr/smpl/astral/25.wav",0
(2)   50/ 600510D :                     ;  	gSmplData PwmIns_astral_26,"sound/instr/smpl/astral/26.wav",0
(2)   51/ 600510D :                     
(2)   52/ 600510D :                     ; ; 	gSmplData Label,"filepath",loop_point(0-start)
(2)   53/ 600510D :                     ; ;  	gSmplData PwmIns_Nadie,"sound/instr/smpl/STEREO/nadie_st.wav",0
(2)   54/ 600510D :                     ; ;  	gSmplData PwmIns_PKick,"sound/instr/smpl/wegot_kick.wav",0
(2)   55/ 600510D :                     ; ;  	gSmplData PwmIns_Piano,"sound/instr/smpl/piano.wav",0
(2)   56/ 600510D :                     ; ;  	gSmplData PwmIns_PTom,"sound/instr/smpl/sauron_tom.wav",0
(2)   57/ 600510D :                     ;
(2)   58/ 600510D :                     ; 	align 4
(2)   59/ 600510D :                     ;  	gSmplData PwmIns_test8,"sound/instr/smpl/test_8.wav",0
(2)   60/ 600510D :                     
(1) 1890/ 600510D :                     
(1) 1891/ 600510D :                     ; ====================================================================
(1) 1892/ 600510D :                     ; ----------------------------------------------------------------
(1) 1893/ 600510D :                     ; Data
(1) 1894/ 600510D :                     ; ----------------------------------------------------------------
(1) 1895/ 600510D :                     
(1) 1896/ 600510D :                     		align $10
(1) 1897/ 6005110 :                     SH2_END:
(1) 1898/ 6005110 : (MACRO)              		report "All SH2 SDRAM uses",SH2_END&$FFFFFF,-1
(1) 1899/ 6005110 :                     
(1) 1900/ 6005110 :                     ; ====================================================================
(1) 1901/ 6005110 :                     ; ----------------------------------------------------------------
(1) 1902/ 6005110 :                     ; USER data pointer
(1) 1903/ 6005110 :                     ; ----------------------------------------------------------------
(1) 1904/ 6005110 :                     
(1) 1905/ 6005110 :                     
(1) 1906/ 6005110 :                     SH2_USER_DATA:
(1) 1907/ 6005110 :                     		cpu 68000
(1) 1908/ 6005110 :                     		padding off
(1) 1909/    3A80 :                     		dephase
(1) 1910/   5B910 :                     		phase (SH2_END-SH2_Master)+MARS_RAMCODE
(1) 1911/   5B910 :                     		align 4
(1) 1912/   5B910 :                     
     351/   5B910 :                     MARS_RAMCODE_E:
     353/   5B910 :                     		align $800
     354/   5C000 :                     MARS_RAMCODE_eof:
     356/   5C000 :                     
     357/   5C000 :                     ; ====================================================================
     358/   5C000 :                     ; --------------------------------------------------------
     359/   5C000 :                     ; Screen modes
     360/   5C000 :                     ;
     361/   5C000 :                     ; For SegaCD/CD32X these are stored as separate files
     362/   5C000 :                     ; on disc
     363/   5C000 :                     ;
     364/   5C000 :                     ; Usage:
     365/   5C000 :                     ; screen_code START_LABEL,END_LABEL,CODE_PATH
     366/   5C000 :                     ;
     367/   5C000 :                     ; Set your data banks manually on your screen code.
     368/   5C000 :                     ; --------------------------------------------------------
     369/   5C000 :                     
     370/   5C000 : (MACRO)              	screen_code Md_Screen00,Md_Screen00_e,"game/screen_0/code.asm"
     370/   5C000 :                                     align $800              ; SCD/CD32X sector align
     370/   5C000 : =$5C000              MD_SCREEN00 label *
     370/   5C000 :                     
     370/   5C000 :                     mctopscrn:
     370/FFFFFFFFFFFF2000 :                                     phase RAM_UserCode      ; SCD/32X/CD32X relocate to RAM area
     370/FFFFFFFFFFFF2000 :                     mcscrn_s:
     370/FFFFFFFFFFFF2000 :                             include "game/screen_0/code.asm";"game/screen_0/code.asm"
(1)    1/FFFFFFFFFFFF2000 :                     ; ===========================================================================
(1)    2/FFFFFFFFFFFF2000 :                     ; ----------------------------------------------------------------
(1)    3/FFFFFFFFFFFF2000 :                     ; SCREEN CODE
(1)    4/FFFFFFFFFFFF2000 :                     ; ----------------------------------------------------------------
(1)    5/FFFFFFFFFFFF2000 :                     
(1)    6/FFFFFFFFFFFF2000 :                     ; ====================================================================
(1)    7/FFFFFFFFFFFF2000 :                     ; ------------------------------------------------------
(1)    8/FFFFFFFFFFFF2000 :                     ; Variables
(1)    9/FFFFFFFFFFFF2000 :                     ; ------------------------------------------------------
(1)   10/FFFFFFFFFFFF2000 :                     
(1)   11/FFFFFFFFFFFF2000 : =$460                setVram_Emily		equ $460
(1)   12/FFFFFFFFFFFF2000 : =$478                setVram_Doremi		equ $460+(4*6)
(1)   13/FFFFFFFFFFFF2000 : =$490                setVram_Sophie		equ $460+((4*6)*2)
(1)   14/FFFFFFFFFFFF2000 : =$4A8                setVram_Nicole		equ $460+((4*6)*3)
(1)   15/FFFFFFFFFFFF2000 : =$4D0                setVram_Bibi		equ $4D0
(1)   16/FFFFFFFFFFFF2000 :                     
(1)   17/FFFFFFFFFFFF2000 :                     ; ====================================================================
(1)   18/FFFFFFFFFFFF2000 :                     ; ------------------------------------------------------
(1)   19/FFFFFFFFFFFF2000 :                     ; Structs
(1)   20/FFFFFFFFFFFF2000 :                     ; ------------------------------------------------------
(1)   21/FFFFFFFFFFFF2000 :                     
(1)   22/FFFFFFFFFFFF2000 :                     ; 			strct 0
(1)   23/FFFFFFFFFFFF2000 :                     ; strc_xpos		ds.w 1
(1)   24/FFFFFFFFFFFF2000 :                     ; strc_ypos		ds.w 1
(1)   25/FFFFFFFFFFFF2000 :                     ; 			endstrct
(1)   26/FFFFFFFFFFFF2000 :                     
(1)   27/FFFFFFFFFFFF2000 :                     ; ====================================================================
(1)   28/FFFFFFFFFFFF2000 :                     ; ------------------------------------------------------
(1)   29/FFFFFFFFFFFF2000 :                     ; This mode's RAM
(1)   30/FFFFFFFFFFFF2000 :                     ; ------------------------------------------------------
(1)   31/FFFFFFFFFFFF2000 :                     
(1)   32/FFFFFFFFFFFF2000 :  (MACRO-2)           			strct RAM_ScrnBuff
(1)   32/FFFFFFFFFFFF2000 : =$FFFFFFFFFFFF2000   GLBL_LASTPC     set *
(1)   32/   5C000 :                                     dephase
(1)   32/FFFFFFFFFFFFD404 :                                     phase RAM_SCRNBUFF
(1)   32/FFFFFFFFFFFFD404 : =$FFFFFFFFFFFFD404   GLBL_LASTORG    set *
(1)   33/FFFFFFFFFFFFD404 :                     RAM_SC0_Null		ds.l 1
(1)   34/FFFFFFFFFFFFD408 :                     RAM_TempAnim		ds.w 1
(1)   35/FFFFFFFFFFFFD40A :                     RAM_TempAnim2		ds.w 1
(1)   36/FFFFFFFFFFFFD40C :                     RAM_SC0_Cmnd		ds.w 1
(1)   37/FFFFFFFFFFFFD40E :                     sizeof_thisbuff		ds.l 0
(1)   38/FFFFFFFFFFFFD414 :  (MACRO-2)           			endstrct
(1)   38/FFFFFFFFFFFFD404 :                                     org GLBL_LASTORG
(1)   38/FFFFFFFFFFFF2000 :                                     phase GLBL_LASTPC
(1)   39/FFFFFFFFFFFF2000 :                     
(1)   40/FFFFFFFFFFFF2000 :  (MACRO-2)           	erreport "SCREEN",sizeof_thisbuff-RAM_ScrnBuff,MAX_ScrnBuff
(1)   41/FFFFFFFFFFFF2000 :                     
(1)   42/FFFFFFFFFFFF2000 :                     ; ====================================================================
(1)   43/FFFFFFFFFFFF2000 :                     ; ------------------------------------------------------
(1)   44/FFFFFFFFFFFF2000 :                     ; Init
(1)   45/FFFFFFFFFFFF2000 :                     ; ------------------------------------------------------
(1)   46/FFFFFFFFFFFF2000 :                     
(1)   47/FFFFFFFFFFFF2000 : 6100 F61E           		bsr	Mode_Init
(1)   48/FFFFFFFFFFFF2004 :  (MACRO-2)           		load_banks file_mddata_def,pointr_marsdata_def
(1)   48/FFFFFFFFFFFF2004 : 41FA 01A0                           lea     POINTR_MARSDATA_DEF(pc),a0          ; 32X/CD32X: SH2 side data
(1)   48/FFFFFFFFFFFF2008 : 6100 F838                           bsr     System_MarsDataPack     ; MUST be first for CD32X
(1)   48/FFFFFFFFFFFF200C : 6100 E97E                           bsr     Video_MdMars_SyncFrame
(1)   48/FFFFFFFFFFFF2010 : 6100 F658                           bsr     System_MdMcd_SubWait
(1)   48/FFFFFFFFFFFF2014 : 41FA 0182                           lea     FILE_MDDATA_DEF(pc),a0           ; CD/CD32X
(1)   48/FFFFFFFFFFFF2018 : 6100 F67A                           bsr     System_McdTrnsfr_WRAM   ; WORD-RAM stays loaded
(1)   49/FFFFFFFFFFFF201C : 41F9 0020 1E94      		lea	(ASCII_FONT).l,a0
(1)   50/FFFFFFFFFFFF2022 : 227C 0000 0000      		move.l	#0,a1
(1)   51/FFFFFFFFFFFF2028 : 6100 EB9A           		bsr	Video_PrintInit
(1)   52/FFFFFFFFFFFF202C :                     
(1)   53/FFFFFFFFFFFF202C :                     ; 		lea	($FF0000),a0
(1)   54/FFFFFFFFFFFF202C :                     ; 		move.l	#$11223344,d0
(1)   55/FFFFFFFFFFFF202C :                     ; 		movep.w	d0,(a0)
(1)   56/FFFFFFFFFFFF202C :                     
(1)   57/FFFFFFFFFFFF202C :                     	; ----------------------------------------------
(1)   58/FFFFFFFFFFFF202C :                     	; Load assets
(1)   60/FFFFFFFFFFFF202C : 41F9 0020 0230      		lea	(PalMars_Doremi),a0
(1)   61/FFFFFFFFFFFF2032 : 303C 0000           		move.w	#0,d0
(1)   62/FFFFFFFFFFFF2036 : 323C 0040           		move.w	#64,d1
(1)   63/FFFFFFFFFFFF203A : 7400                		moveq	#0,d2
(1)   64/FFFFFFFFFFFF203C : 6100 E98E           		bsr	Video_MdMars_FadePal
(1)   65/FFFFFFFFFFFF2040 : 41F9 0020 02B0      		lea	(PalMars_Sophie),a0
(1)   66/FFFFFFFFFFFF2046 : 303C 0040           		move.w	#64,d0
(1)   67/FFFFFFFFFFFF204A : 323C 0040           		move.w	#64,d1
(1)   68/FFFFFFFFFFFF204E : 7400                		moveq	#0,d2
(1)   69/FFFFFFFFFFFF2050 : 6100 E97A           		bsr	Video_MdMars_FadePal
(1)   70/FFFFFFFFFFFF2054 :                     
(1)   71/FFFFFFFFFFFF2054 : 41F8 CC14           		lea	(RAM_MdMars_SuperSpr),a0
(1)   72/FFFFFFFFFFFF2058 : 217C 0600 5110      		move.l	#ArtSSpr_Doremi,sspr_Art(a0)
         FFFFFFFFFFFF205E : 000C             
(1)   73/FFFFFFFFFFFF2060 : 117C 0007 0004      		move.b	#(64/8)-1,sspr_Size(a0)
(1)   74/FFFFFFFFFFFF2066 : 117C 000C 0005      		move.b	#(104/8)-1,sspr_Size+1(a0)
(1)   75/FFFFFFFFFFFF206C : 317C 0010 0008      		move.w	#$10,sspr_Xpos(a0)
(1)   76/FFFFFFFFFFFF2072 : 317C 0070 000A      		move.w	#$70,sspr_Ypos(a0)
(1)   77/FFFFFFFFFFFF2078 : 317C 0000 0006      		move.w	#0,sspr_Indx(a0)
(1)   78/FFFFFFFFFFFF207E : 317C 0000 0002      		move.w	#0,sspr_Frame(a0)
(1)   79/FFFFFFFFFFFF2084 : D0FC 0010           		adda	#sizeof_marsspr,a0
(1)   80/FFFFFFFFFFFF2088 : 217C 0600 ED10      		move.l	#ArtSSpr_Sophie,sspr_Art(a0)
         FFFFFFFFFFFF208E : 000C             
(1)   81/FFFFFFFFFFFF2090 : 117C 0005 0004      		move.b	#(48/8)-1,sspr_Size(a0)
(1)   82/FFFFFFFFFFFF2096 : 117C 000C 0005      		move.b	#(104/8)-1,sspr_Size+1(a0)
(1)   83/FFFFFFFFFFFF209C : 317C 0104 0008      		move.w	#$104,sspr_Xpos(a0)
(1)   84/FFFFFFFFFFFF20A2 : 317C 0070 000A      		move.w	#$70,sspr_Ypos(a0)
(1)   85/FFFFFFFFFFFF20A8 : 317C 0040 0006      		move.w	#64,sspr_Indx(a0)
(1)   86/FFFFFFFFFFFF20AE : 317C 0000 0002      		move.w	#0,sspr_Frame(a0)
(1)   87/FFFFFFFFFFFF20B4 : 08E8 0000 0001      		bset	#0,sspr_Flags+1(a0)
(1)   88/FFFFFFFFFFFF20BA : 4278 D408           		clr.w	(RAM_TempAnim).w
(1)   89/FFFFFFFFFFFF20BE :                     
(1)   90/FFFFFFFFFFFF20BE : 41F9 0020 0330      		lea	(PalMars_Scrn0),a0
(1)   91/FFFFFFFFFFFF20C4 : 303C 0080           		move.w	#128,d0
(1)   92/FFFFFFFFFFFF20C8 : 323C 0040           		move.w	#64,d1
(1)   93/FFFFFFFFFFFF20CC : 7400                		moveq	#0,d2
(1)   94/FFFFFFFFFFFF20CE : 6100 E8FC           		bsr	Video_MdMars_FadePal
(1)   95/FFFFFFFFFFFF20D2 : 41F9 0020 0000      		lea	(MapMars_Scrn0),a0
(1)   96/FFFFFFFFFFFF20D8 : 7000                		moveq	#0,d0
(1)   97/FFFFFFFFFFFF20DA : 7200                		moveq	#0,d1
(1)   98/FFFFFFFFFFFF20DC : 343C 0014           		move.w	#320/16,d2
(1)   99/FFFFFFFFFFFF20E0 : 363C 000E           		move.w	#224/16,d3
(1)  100/FFFFFFFFFFFF20E4 : 383C 0080           		move.w	#128,d4
(1)  101/FFFFFFFFFFFF20E8 : 6100 F0D8           		bsr	Video_MdMarsMap_Load
(1)  102/FFFFFFFFFFFF20EC : 203C 0601 3B10      		move.l	#ArtMars_Scrn0,d0
(1)  103/FFFFFFFFFFFF20F2 : 7200                		moveq	#0,d1
(1)  104/FFFFFFFFFFFF20F4 : 7400                		moveq	#0,d2
(1)  105/FFFFFFFFFFFF20F6 : 6100 F0B0           		bsr	Video_MdMarsMap_Set
(1)  106/FFFFFFFFFFFF20FA : 7001                		moveq	#1,d0
(1)  107/FFFFFFFFFFFF20FC : 6100 E8A2           		bsr	Video_MdMars_VideoMode
(1)  119/FFFFFFFFFFFF2100 : 41FA 04A0           		lea	PAL_SCR0_TEST(pc),a0
(1)  120/FFFFFFFFFFFF2104 : 7030                		moveq	#48,d0
(1)  121/FFFFFFFFFFFF2106 : 323C 0010           		move.w	#16,d1
(1)  122/FFFFFFFFFFFF210A : 6100 E32C           		bsr	Video_FadePal
(1)  123/FFFFFFFFFFFF210E :                     
(1)  124/FFFFFFFFFFFF210E : 41F9 0020 0C70      		lea	(objPal_Emily),a0
(1)  125/FFFFFFFFFFFF2114 : 7000                		moveq	#0,d0
(1)  126/FFFFFFFFFFFF2116 : 323C 0010           		move.w	#16,d1
(1)  127/FFFFFFFFFFFF211A : 6100 E31C           		bsr	Video_FadePal
(1)  128/FFFFFFFFFFFF211E : 41F9 0020 0EE6      		lea	(objPal_Doremi),a0
(1)  129/FFFFFFFFFFFF2124 : 7010                		moveq	#16,d0
(1)  130/FFFFFFFFFFFF2126 : 323C 0010           		move.w	#16,d1
(1)  131/FFFFFFFFFFFF212A : 6100 E30C           		bsr	Video_FadePal
(1)  132/FFFFFFFFFFFF212E : 41F9 0020 1072      		lea	(objPal_Sophie),a0
(1)  133/FFFFFFFFFFFF2134 : 7020                		moveq	#32,d0
(1)  134/FFFFFFFFFFFF2136 : 323C 0010           		move.w	#16,d1
(1)  135/FFFFFFFFFFFF213A : 6100 E2FC           		bsr	Video_FadePal
(1)  136/FFFFFFFFFFFF213E : 41FA 0484           		lea	str_Scrn0Intro(pc),a0
(1)  137/FFFFFFFFFFFF2142 : 203C 0000 0101      		move.l	#locate(1,1,0),d0
(1)  138/FFFFFFFFFFFF2148 : 6100 EAAA           		bsr	Video_Print
(1)  139/FFFFFFFFFFFF214C :                     
(1)  157/FFFFFFFFFFFF214C :                     
(1)  158/FFFFFFFFFFFF214C :                     	; ----------------------------------------------
(1)  160/FFFFFFFFFFFF214C : 7002                		moveq	#2,d0
(1)  161/FFFFFFFFFFFF214E : 6100 F6AE           		bsr	System_MdMcd_CdPlay_L
(1)  163/FFFFFFFFFFFF2152 :                     
(1)  164/FFFFFFFFFFFF2152 :                     ; 		move.w	#214,d0
(1)  165/FFFFFFFFFFFF2152 :                     ; 		bsr	gemaSetBeats
(1)  166/FFFFFFFFFFFF2152 :                     ; 		moveq	#0,d0
(1)  167/FFFFFFFFFFFF2152 :                     ; 		moveq	#0,d1
(1)  168/FFFFFFFFFFFF2152 :                     ; 		moveq	#0,d2
(1)  169/FFFFFFFFFFFF2152 :                     ; 		bsr	gemaPlayTrack
(1)  170/FFFFFFFFFFFF2152 :                     	; ----------------------------------------------
(1)  171/FFFFFFFFFFFF2152 :                     ; 		bsr	.show_me
(1)  172/FFFFFFFFFFFF2152 :                     ; 		bsr	.steal_vars
(1)  173/FFFFFFFFFFFF2152 : 6100 ECA2           		bsr	Objects_Run
(1)  174/FFFFFFFFFFFF2156 : 6100 038C           		bsr	ShowMe_Who
(1)  175/FFFFFFFFFFFF215A :                     	; ----------------------------------------------
(1)  176/FFFFFFFFFFFF215A : 08F9 0006 FFFF      		bset	#bitDispEnbl,(RAM_VdpRegs+1).l		; Enable display
         FFFFFFFFFFFF2160 : B8F9             
(1)  177/FFFFFFFFFFFF2162 : 11FC 0081 B904      		move.b	#%10000001,(RAM_VdpRegs+$C).w		; H40 + shadow mode
(1)  178/FFFFFFFFFFFF2168 : 6100 E19A           		bsr	Video_Update
(1)  179/FFFFFFFFFFFF216C : 6100 E252           		bsr	Video_FullFadeIn
(1)  180/FFFFFFFFFFFF2170 :                     
(1)  181/FFFFFFFFFFFF2170 :                     ; ====================================================================
(1)  182/FFFFFFFFFFFF2170 :                     ; ------------------------------------------------------
(1)  183/FFFFFFFFFFFF2170 :                     ; Loop
(1)  184/FFFFFFFFFFFF2170 :                     ; ------------------------------------------------------
(1)  185/FFFFFFFFFFFF2170 :                     
(1)  186/FFFFFFFFFFFF2170 :                     .loop:
(1)  187/FFFFFFFFFFFF2170 : 6100 F122           		bsr	System_Render
(1)  188/FFFFFFFFFFFF2174 : 6100 EC80           		bsr	Objects_Run
(1)  189/FFFFFFFFFFFF2178 : 6100 036A           		bsr	ShowMe_Who
(1)  190/FFFFFFFFFFFF217C : 3E38 C008           		move.w	(Controller_1+on_press),d7
(1)  191/FFFFFFFFFFFF2180 : 0807 0007           		btst	#bitJoyStart,d7
(1)  192/FFFFFFFFFFFF2184 : 6602                		bne.s	.snd_test
(1)  193/FFFFFFFFFFFF2186 : 60E8                		bra.s	.loop
(1)  194/FFFFFFFFFFFF2188 :                     
(1)  195/FFFFFFFFFFFF2188 :                     .snd_test:
(1)  196/FFFFFFFFFFFF2188 : 6100 E070           		bsr	gemaStopAll
(1)  197/FFFFFFFFFFFF218C : 6100 E258           		bsr	Video_FullFadeOut
(1)  198/FFFFFFFFFFFF2190 : 31FC 0001 C458      		move.w	#1,(RAM_ScreenMode).w
(1)  199/FFFFFFFFFFFF2196 : 4E75                		rts		; EXIT
(1)  200/FFFFFFFFFFFF2198 :                     
(1)  201/FFFFFFFFFFFF2198 :                     ; ====================================================================
(1)  202/FFFFFFFFFFFF2198 :                     ; ------------------------------------------------------
(1)  203/FFFFFFFFFFFF2198 :                     ; DATA assets locations for 68K and SH2
(1)  204/FFFFFFFFFFFF2198 :                     ; ------------------------------------------------------
(1)  205/FFFFFFFFFFFF2198 :                     
(1)  206/FFFFFFFFFFFF2198 :                     file_mddata_def:
(1)  207/FFFFFFFFFFFF2198 : 4441 5441 424E      		dc.b "DATABNKD.BIN",0		; CD Filename
         FFFFFFFFFFFF219E : 4B44 2E42 494E 00 
(1)  208/FFFFFFFFFFFF21A5 :                     		align 2
(1)  209/FFFFFFFFFFFF21A6 :                     pointr_marsdata_def:
(1)  210/FFFFFFFFFFFF21A6 : 0007 D000           		dc.l MARSDATA_SCREEN00		; 32X Cartridge point
(1)  211/FFFFFFFFFFFF21AA : 4D41 5253 445F      		dc.b "MARSD_00.BIN",0		; CD Filename
         FFFFFFFFFFFF21B0 : 3030 2E42 494E 00 
(1)  212/FFFFFFFFFFFF21B7 :                     		align 2
(1)  213/FFFFFFFFFFFF21B8 :                     
(1)  214/FFFFFFFFFFFF21B8 :                     ; ====================================================================
(1)  215/FFFFFFFFFFFF21B8 :                     ; ------------------------------------------------------
(1)  216/FFFFFFFFFFFF21B8 :                     ; Objects
(1)  217/FFFFFFFFFFFF21B8 :                     ; ------------------------------------------------------
(1)  218/FFFFFFFFFFFF21B8 :                     
(1)  219/FFFFFFFFFFFF21B8 :                     ; --------------------------------------------------
(1)  220/FFFFFFFFFFFF21B8 :                     ; Emily
(1)  221/FFFFFFFFFFFF21B8 :                     ; --------------------------------------------------
(1)  222/FFFFFFFFFFFF21B8 :                     
(1)  223/FFFFFFFFFFFF21B8 :                     Obj_Emily:
(1)  224/FFFFFFFFFFFF21B8 : 7000                		moveq	#0,d0
(1)  225/FFFFFFFFFFFF21BA : 102E 0021           		move.b	obj_index(a6),d0
(1)  226/FFFFFFFFFFFF21BE : D040                		add.w	d0,d0
(1)  227/FFFFFFFFFFFF21C0 : 323B 0006           		move.w	.list(pc,d0.w),d1
(1)  228/FFFFFFFFFFFF21C4 : 4EFB 1002           		jmp	.list(pc,d1.w)
(1)  229/FFFFFFFFFFFF21C8 :                     ; ----------------------------------------------
(1)  230/FFFFFFFFFFFF21C8 : 0004                .list:		dc.w .init-.list
(1)  231/FFFFFFFFFFFF21CA : 003C                		dc.w .main-.list
(1)  232/FFFFFFFFFFFF21CC :                     ; ----------------------------------------------
(1)  233/FFFFFFFFFFFF21CC :                     .init:
(1)  234/FFFFFFFFFFFF21CC : 1D7C 0001 0021      		move.b	#1,obj_index(a6)
(1)  235/FFFFFFFFFFFF21D2 : 2D7C 0020 0C86      		move.l	#objMap_Emily,obj_map(a6)
         FFFFFFFFFFFF21D8 : 000C             
(1)  236/FFFFFFFFFFFF21DA : 3D7C 8460 0014      		move.w	#setVram_Emily|$8000,obj_vram(a6)
(1)  237/FFFFFFFFFFFF21E0 : 2D7C 0303 0202      		move.l	#$03030202,obj_size(a6)		; UDLR sizes
         FFFFFFFFFFFF21E6 : 0010             
(1)  238/FFFFFFFFFFFF21E8 : 3D7C 0080 0004      		move.w	#(320/2)-32,obj_x(a6)
(1)  239/FFFFFFFFFFFF21EE : 3D7C 0050 0008      		move.w	#(224/2)-32,obj_y(a6)
(1)  240/FFFFFFFFFFFF21F4 : 426E 001C           		clr.w	obj_frame(a6)
(1)  241/FFFFFFFFFFFF21F8 : 426E 0026           		clr.w	obj_ram(a6)
(1)  242/FFFFFFFFFFFF21FC : 426E 0028           		clr.w	obj_ram+2(a6)
(1)  243/FFFFFFFFFFFF2200 : 6100 EECE           		bsr	object_ResetAnim
(1)  244/FFFFFFFFFFFF2204 :                     
(1)  245/FFFFFFFFFFFF2204 :                     ; ----------------------------------------------
(1)  246/FFFFFFFFFFFF2204 :                     .main:
(1)  247/FFFFFFFFFFFF2204 : 4BEE 0026           		lea	obj_ram(a6),a5
(1)  248/FFFFFFFFFFFF2208 : 49F8 C004           		lea	(Controller_1),a4
(1)  249/FFFFFFFFFFFF220C :                     
(1)  250/FFFFFFFFFFFF220C : 426E 0016           		clr.w	obj_x_spd(a6)
(1)  251/FFFFFFFFFFFF2210 : 426E 0018           		clr.w	obj_y_spd(a6)
(1)  252/FFFFFFFFFFFF2214 : 382C 0002           		move.w	on_hold(a4),d4
(1)  253/FFFFFFFFFFFF2218 : 0804 0001           		btst	#bitJoyDown,d4
(1)  254/FFFFFFFFFFFF221C : 670A                		beq.s	.go_down
(1)  255/FFFFFFFFFFFF221E : 3ABC 0000           		move.w	#0,(a5)		; <--
(1)  256/FFFFFFFFFFFF2222 : 3D7C 0140 0018      		move.w	#$140,obj_y_spd(a6)
(1)  257/FFFFFFFFFFFF2228 :                     .go_down:
(1)  258/FFFFFFFFFFFF2228 : 0804 0000           		btst	#bitJoyUp,d4
(1)  259/FFFFFFFFFFFF222C : 670A                		beq.s	.go_up
(1)  260/FFFFFFFFFFFF222E : 3ABC 0004           		move.w	#4,(a5)
(1)  261/FFFFFFFFFFFF2232 : 3D7C FEC0 0018      		move.w	#-$140,obj_y_spd(a6)
(1)  262/FFFFFFFFFFFF2238 :                     .go_up:
(1)  263/FFFFFFFFFFFF2238 : 0804 0003           		btst	#bitJoyRight,d4
(1)  264/FFFFFFFFFFFF223C : 670A                		beq.s	.go_r
(1)  265/FFFFFFFFFFFF223E : 3ABC 0008           		move.w	#8,(a5)
(1)  266/FFFFFFFFFFFF2242 : 3D7C 0140 0016      		move.w	#$140,obj_x_spd(a6)
(1)  267/FFFFFFFFFFFF2248 :                     .go_r:
(1)  268/FFFFFFFFFFFF2248 : 0804 0002           		btst	#bitJoyLeft,d4
(1)  269/FFFFFFFFFFFF224C : 670A                		beq.s	.go_l
(1)  270/FFFFFFFFFFFF224E : 3ABC 000C           		move.w	#$C,(a5)
(1)  271/FFFFFFFFFFFF2252 : 3D7C FEC0 0016      		move.w	#-$140,obj_x_spd(a6)
(1)  272/FFFFFFFFFFFF2258 :                     .go_l:
(1)  273/FFFFFFFFFFFF2258 : 3015                		move.w	(a5),d0
(1)  274/FFFFFFFFFFFF225A : 382C 0002           		move.w	on_hold(a4),d4
(1)  275/FFFFFFFFFFFF225E : 0244 000F           		andi.w	#JoyUp+JoyDown+JoyLeft+JoyRight,d4
(1)  276/FFFFFFFFFFFF2262 : 670A                		beq.s	.stay
(1)  277/FFFFFFFFFFFF2264 : 122D 0002           		move.b	2(a5),d1
(1)  278/FFFFFFFFFFFF2268 : 0241 0003           		andi.w	#%11,d1
(1)  279/FFFFFFFFFFFF226C : D041                		add.w	d1,d0
(1)  280/FFFFFFFFFFFF226E :                     .stay:
(1)  281/FFFFFFFFFFFF226E : 3D40 001C           		move.w	d0,obj_frame(a6)
(1)  282/FFFFFFFFFFFF2272 : 066D 0020 0002      		addi.w	#$0020,2(a5)		; Speed
(1)  283/FFFFFFFFFFFF2278 : 026D 03FF 0002      		andi.w	#$03FF,2(a5)		; limit
(1)  284/FFFFFFFFFFFF227E : 6100 EE60           		bsr	object_Speed
(1)  285/FFFFFFFFFFFF2282 :                     
(1)  286/FFFFFFFFFFFF2282 : 4AAE 0004           		tst.l	obj_x(a6)
(1)  287/FFFFFFFFFFFF2286 : 6A04                		bpl.s	.x_neg
(1)  288/FFFFFFFFFFFF2288 : 42AE 0004           		clr.l	obj_x(a6)
(1)  289/FFFFFFFFFFFF228C :                     .x_neg:
(1)  290/FFFFFFFFFFFF228C : 0C6E 0140 0004      		cmp.w	#320,obj_x(a6)
(1)  291/FFFFFFFFFFFF2292 : 6D06                		blt.s	.x_posi
(1)  292/FFFFFFFFFFFF2294 : 3D7C 0140 0004      		move.w	#320,obj_x(a6)
(1)  293/FFFFFFFFFFFF229A :                     .x_posi:
(1)  294/FFFFFFFFFFFF229A : 4AAE 0008           		tst.l	obj_y(a6)
(1)  295/FFFFFFFFFFFF229E : 6A04                		bpl.s	.y_neg
(1)  296/FFFFFFFFFFFF22A0 : 42AE 0008           		clr.l	obj_y(a6)
(1)  297/FFFFFFFFFFFF22A4 :                     .y_neg:
(1)  298/FFFFFFFFFFFF22A4 : 0C6E 00E0 0008      		cmp.w	#224,obj_y(a6)
(1)  299/FFFFFFFFFFFF22AA : 6D06                		blt.s	.y_posi
(1)  300/FFFFFFFFFFFF22AC : 3D7C 00E0 0008      		move.w	#224,obj_y(a6)
(1)  301/FFFFFFFFFFFF22B2 :                     .y_posi:
(1)  302/FFFFFFFFFFFF22B2 :                     ; 		clr.l	(RAM_WhoIAm).w
(1)  303/FFFFFFFFFFFF22B2 :                     ; 		bsr	object_Collision
(1)  304/FFFFFFFFFFFF22B2 :                     ; 		tst.l	d0
(1)  305/FFFFFFFFFFFF22B2 :                     ; 		beq.s	.no_one
(1)  306/FFFFFFFFFFFF22B2 :                     ; 		move.l	d0,(RAM_WhoIAm).w
(1)  307/FFFFFFFFFFFF22B2 :                     ; .no_one:
(1)  308/FFFFFFFFFFFF22B2 : 41F9 0020 0E46      		lea	(objDma_Emily),a0
(1)  309/FFFFFFFFFFFF22B8 : 43F9 0020 D274      		lea	(Art_Emily),a1
(1)  310/FFFFFFFFFFFF22BE : 6100 ECF4           		bsr	object_DMA_Auto
(1)  311/FFFFFFFFFFFF22C2 : 6000 ECCC           		bra	object_Display
(1)  312/FFFFFFFFFFFF22C6 :                     
(1)  313/FFFFFFFFFFFF22C6 :                     ; ----------------------------------------------
(1)  314/FFFFFFFFFFFF22C6 :                     
(1)  315/FFFFFFFFFFFF22C6 :                     .anim_data:
(1)  316/FFFFFFFFFFFF22C6 : 0008                		dc.w .anim_d-.anim_data
(1)  317/FFFFFFFFFFFF22C8 : 0016                		dc.w .anim_u-.anim_data
(1)  318/FFFFFFFFFFFF22CA : 0024                		dc.w .anim_r-.anim_data
(1)  319/FFFFFFFFFFFF22CC : 0032                		dc.w .anim_l-.anim_data
(1)  320/FFFFFFFFFFFF22CE :                     .anim_d:
(1)  321/FFFFFFFFFFFF22CE : 0008                		dc.w 8
(1)  322/FFFFFFFFFFFF22D0 : 0000 0001 0002      		dc.w 0,1,2,3
         FFFFFFFFFFFF22D6 : 0003             
(1)  323/FFFFFFFFFFFF22D8 : FFFE                		dc.w -2
(1)  324/FFFFFFFFFFFF22DA :                     		align 2
(1)  325/FFFFFFFFFFFF22DC :                     .anim_u:
(1)  326/FFFFFFFFFFFF22DC : 0008                		dc.w 8
(1)  327/FFFFFFFFFFFF22DE : 0004 0005 0006      		dc.w 4,5,6,7
         FFFFFFFFFFFF22E4 : 0007             
(1)  328/FFFFFFFFFFFF22E6 : FFFE                		dc.w -2
(1)  329/FFFFFFFFFFFF22E8 :                     		align 2
(1)  330/FFFFFFFFFFFF22EA :                     .anim_r:
(1)  331/FFFFFFFFFFFF22EA : 0008                		dc.w 8
(1)  332/FFFFFFFFFFFF22EC : 0008 0009 000A      		dc.w 8,9,10,11
         FFFFFFFFFFFF22F2 : 000B             
(1)  333/FFFFFFFFFFFF22F4 : FFFE                		dc.w -2
(1)  334/FFFFFFFFFFFF22F6 :                     		align 2
(1)  335/FFFFFFFFFFFF22F8 :                     .anim_l:
(1)  336/FFFFFFFFFFFF22F8 : 0008                		dc.w 8
(1)  337/FFFFFFFFFFFF22FA : 000C 000D 000E      		dc.w 12,13,14,15
         FFFFFFFFFFFF2300 : 000F             
(1)  338/FFFFFFFFFFFF2302 : FFFE                		dc.w -2
(1)  339/FFFFFFFFFFFF2304 :                     		align 2
(1)  340/FFFFFFFFFFFF2306 :                     
(1)  341/FFFFFFFFFFFF2306 :                     ; --------------------------------------------------
(1)  342/FFFFFFFFFFFF2306 :                     ; Doremi, Sophie o Nicole
(1)  343/FFFFFFFFFFFF2306 :                     ; --------------------------------------------------
(1)  344/FFFFFFFFFFFF2306 :                     
(1)  345/FFFFFFFFFFFF2306 :                     Obj_Doremi:
(1)  346/FFFFFFFFFFFF2306 : 7000                		moveq	#0,d0
(1)  347/FFFFFFFFFFFF2308 : 102E 0021           		move.b	obj_index(a6),d0
(1)  348/FFFFFFFFFFFF230C : D040                		add.w	d0,d0
(1)  349/FFFFFFFFFFFF230E : 323B 0006           		move.w	.list(pc,d0.w),d1
(1)  350/FFFFFFFFFFFF2312 : 4EFB 1002           		jmp	.list(pc,d1.w)
(1)  351/FFFFFFFFFFFF2316 :                     ; ----------------------------------------------
(1)  352/FFFFFFFFFFFF2316 : 0004                .list:		dc.w .init-.list
(1)  353/FFFFFFFFFFFF2318 : 003E                		dc.w .main-.list
(1)  354/FFFFFFFFFFFF231A :                     ; ----------------------------------------------
(1)  355/FFFFFFFFFFFF231A :                     .init:
(1)  356/FFFFFFFFFFFF231A : 1D7C 0001 0021      		move.b	#1,obj_index(a6)
(1)  357/FFFFFFFFFFFF2320 : 2D7C 0303 0202      		move.l	#$03030202,obj_size(a6)		; UDLR sizes
         FFFFFFFFFFFF2326 : 0010             
(1)  358/FFFFFFFFFFFF2328 : 102E 0023           		move.b	obj_subid(a6),d0
(1)  359/FFFFFFFFFFFF232C : E948                		lsl.w	#4,d0
(1)  360/FFFFFFFFFFFF232E : 41FA 0070           		lea	.sub_list(pc),a0
(1)  361/FFFFFFFFFFFF2332 : D0C0                		adda	d0,a0
(1)  362/FFFFFFFFFFFF2334 : 2D58 000C           		move.l	(a0)+,obj_map(a6)
(1)  363/FFFFFFFFFFFF2338 : 3D58 0014           		move.w	(a0)+,obj_vram(a6)
(1)  364/FFFFFFFFFFFF233C : 3D58 0004           		move.w	(a0)+,obj_x(a6)
(1)  365/FFFFFFFFFFFF2340 : 3D58 0008           		move.w	(a0)+,obj_y(a6)
(1)  366/FFFFFFFFFFFF2344 : 3D58 0028           		move.w	(a0)+,obj_ram+2(a6)
(1)  367/FFFFFFFFFFFF2348 :                     
(1)  368/FFFFFFFFFFFF2348 : 426E 001C           		clr.w	obj_frame(a6)
(1)  369/FFFFFFFFFFFF234C : 426E 0026           		clr.w	obj_ram(a6)
(1)  370/FFFFFFFFFFFF2350 : 6100 ED7E           		bsr	object_ResetAnim
(1)  371/FFFFFFFFFFFF2354 :                     
(1)  372/FFFFFFFFFFFF2354 :                     ; ----------------------------------------------
(1)  373/FFFFFFFFFFFF2354 :                     .main:
(1)  374/FFFFFFFFFFFF2354 : 7000                		moveq	#0,d0
(1)  375/FFFFFFFFFFFF2356 : 102E 0026           		move.b	obj_ram(a6),d0
(1)  376/FFFFFFFFFFFF235A : D06E 0028           		add.w	obj_ram+2(a6),d0
(1)  377/FFFFFFFFFFFF235E : 3D40 001C           		move.w	d0,obj_frame(a6)
(1)  378/FFFFFFFFFFFF2362 : 066E 0010 0026      		addi.w	#$0010,obj_ram(a6)		; Speed
(1)  379/FFFFFFFFFFFF2368 : 026E 01FF 0026      		andi.w	#$01FF,obj_ram(a6)		; limit
(1)  380/FFFFFFFFFFFF236E :                     
(1)  381/FFFFFFFFFFFF236E : 7000                		moveq	#0,d0
(1)  382/FFFFFFFFFFFF2370 : 102E 0023           		move.b	obj_subid(a6),d0
(1)  383/FFFFFFFFFFFF2374 : E748                		lsl.w	#3,d0
(1)  384/FFFFFFFFFFFF2376 : 45FA 0010           		lea	.sub_dma(pc),a2
(1)  385/FFFFFFFFFFFF237A : D4C0                		adda	d0,a2
(1)  386/FFFFFFFFFFFF237C : 205A                		move.l	(a2)+,a0
(1)  387/FFFFFFFFFFFF237E : 225A                		move.l	(a2)+,a1
(1)  388/FFFFFFFFFFFF2380 : 6100 EC32           		bsr	object_DMA_Auto
(1)  389/FFFFFFFFFFFF2384 : 6000 EC0A           		bra	object_Display
(1)  390/FFFFFFFFFFFF2388 :                     
(1)  391/FFFFFFFFFFFF2388 :                     ; ----------------------------------------------
(1)  392/FFFFFFFFFFFF2388 :                     
(1)  393/FFFFFFFFFFFF2388 :                     .sub_dma:
(1)  394/FFFFFFFFFFFF2388 : 0020 0F2C 0020      		dc.l objDma_Doremi,Art_Doremi
         FFFFFFFFFFFF238E : CC74             
(1)  395/FFFFFFFFFFFF2390 : 0020 1100 0020      		dc.l objDma_Sophie,Art_Sophie
         FFFFFFFFFFFF2396 : FDF4             
(1)  396/FFFFFFFFFFFF2398 : 0020 1100 0020      		dc.l objDma_Sophie,Art_Sophie
         FFFFFFFFFFFF239E : FDF4             
(1)  397/FFFFFFFFFFFF23A0 :                     .sub_list:
(1)  398/FFFFFFFFFFFF23A0 : 0020 0F04           		dc.l objMap_Doremi
(1)  399/FFFFFFFFFFFF23A4 : 2478                		dc.w setVram_Doremi|$2000
(1)  400/FFFFFFFFFFFF23A6 : 003C 005A           		dc.w 60,90
(1)  401/FFFFFFFFFFFF23AA : 0000                		dc.w 0
(1)  402/FFFFFFFFFFFF23AC : 0000 0000           		dc.l 0
(1)  403/FFFFFFFFFFFF23B0 : 0020 1090           		dc.l objMap_Sophie
(1)  404/FFFFFFFFFFFF23B4 : 4490                		dc.w setVram_Sophie|$4000
(1)  405/FFFFFFFFFFFF23B6 : 0100 003C           		dc.w 256,60
(1)  406/FFFFFFFFFFFF23BA : 0000                		dc.w 0
(1)  407/FFFFFFFFFFFF23BC : 0000 0000           		dc.l 0
(1)  408/FFFFFFFFFFFF23C0 : 0020 1090           		dc.l objMap_Sophie
(1)  409/FFFFFFFFFFFF23C4 : 44A8                		dc.w setVram_Nicole|$4000
(1)  410/FFFFFFFFFFFF23C6 : 0116 00BE           		dc.w 278,190
(1)  411/FFFFFFFFFFFF23CA : 0002                		dc.w 2
(1)  412/FFFFFFFFFFFF23CC : 0000 0000           		dc.l 0
(1)  413/FFFFFFFFFFFF23D0 :                     
(1)  414/FFFFFFFFFFFF23D0 :                     ; --------------------------------------------------
(1)  415/FFFFFFFFFFFF23D0 :                     ; Bibi
(1)  416/FFFFFFFFFFFF23D0 :                     ; --------------------------------------------------
(1)  417/FFFFFFFFFFFF23D0 :                     
(1)  418/FFFFFFFFFFFF23D0 :                     Obj_Bibi:
(1)  419/FFFFFFFFFFFF23D0 : 7000                		moveq	#0,d0
(1)  420/FFFFFFFFFFFF23D2 : 102E 0021           		move.b	obj_index(a6),d0
(1)  421/FFFFFFFFFFFF23D6 : D040                		add.w	d0,d0
(1)  422/FFFFFFFFFFFF23D8 : 323B 0006           		move.w	.list(pc,d0.w),d1
(1)  423/FFFFFFFFFFFF23DC : 4EFB 1002           		jmp	.list(pc,d1.w)
(1)  424/FFFFFFFFFFFF23E0 :                     ; ----------------------------------------------
(1)  425/FFFFFFFFFFFF23E0 : 0004                .list:		dc.w .init-.list
(1)  426/FFFFFFFFFFFF23E2 : 0038                		dc.w .main-.list
(1)  427/FFFFFFFFFFFF23E4 :                     ; ----------------------------------------------
(1)  428/FFFFFFFFFFFF23E4 :                     .init:
(1)  429/FFFFFFFFFFFF23E4 : 1D7C 0001 0021      		move.b	#1,obj_index(a6)
(1)  430/FFFFFFFFFFFF23EA : 2D7C 0203 0202      		move.l	#$02030202,obj_size(a6)		; UDLR sizes
         FFFFFFFFFFFF23F0 : 0010             
(1)  431/FFFFFFFFFFFF23F2 : 3D7C 00A0 0004      		move.w	#(320/2),obj_x(a6)
(1)  432/FFFFFFFFFFFF23F8 : 3D7C 0070 0008      		move.w	#(224/2),obj_y(a6)
(1)  433/FFFFFFFFFFFF23FE : 2D7C 0020 0F3C      		move.l	#objMap_Bibi,obj_map(a6)
         FFFFFFFFFFFF2404 : 000C             
(1)  434/FFFFFFFFFFFF2406 : 3D7C 24D0 0014      		move.w	#setVram_Bibi|$2000,obj_vram(a6)
(1)  435/FFFFFFFFFFFF240C : 426E 001C           		clr.w	obj_frame(a6)
(1)  436/FFFFFFFFFFFF2410 : 6100 ECBE           		bsr	object_ResetAnim
(1)  437/FFFFFFFFFFFF2414 : 6100 EB60           		bsr	object_ResetVars
(1)  438/FFFFFFFFFFFF2418 :                     
(1)  439/FFFFFFFFFFFF2418 :                     ; ----------------------------------------------
(1)  440/FFFFFFFFFFFF2418 :                     .main:
(1)  441/FFFFFFFFFFFF2418 : 7000                		moveq	#0,d0
(1)  442/FFFFFFFFFFFF241A : 4BF8 C014           		lea	(Controller_2).w,a5
(1)  443/FFFFFFFFFFFF241E : 0C15 0003           		cmp.b	#JoyID_Mouse,pad_id(a5)
(1)  444/FFFFFFFFFFFF2422 : 6662                		bne.s	.no_mouse
(1)  445/FFFFFFFFFFFF2424 : 3E2D 0002           		move.w	on_hold(a5),d7
(1)  446/FFFFFFFFFFFF2428 : 0807 0000           		btst	#bitClickL,d7
(1)  447/FFFFFFFFFFFF242C : 6704                		beq.s	.no_click
(1)  448/FFFFFFFFFFFF242E : 7001                		moveq	#1,d0
(1)  449/FFFFFFFFFFFF2430 : 6054                		bra.s	.no_mouse
(1)  450/FFFFFFFFFFFF2432 :                     .no_click:
(1)  451/FFFFFFFFFFFF2432 : 426E 0016           		clr.w	obj_x_spd(a6)
(1)  452/FFFFFFFFFFFF2436 : 426E 0018           		clr.w	obj_y_spd(a6)
(1)  453/FFFFFFFFFFFF243A : 3E2D 0008           		move.w	mouse_x(a5),d7
(1)  454/FFFFFFFFFFFF243E : 3C2D 000A           		move.w	mouse_y(a5),d6
(1)  455/FFFFFFFFFFFF2442 : 3A07                		move.w	d7,d5
(1)  456/FFFFFFFFFFFF2444 : 8A46                		or.w	d6,d5
(1)  457/FFFFFFFFFFFF2446 : 673E                		beq.s	.no_mouse
(1)  458/FFFFFFFFFFFF2448 :                     
(1)  459/FFFFFFFFFFFF2448 : 4A46                		tst.w	d6
(1)  460/FFFFFFFFFFFF244A : 671C                		beq.s	.no_y_spd
(1)  461/FFFFFFFFFFFF244C : 7003                		moveq	#3,d0
(1)  462/FFFFFFFFFFFF244E : 08EE 0000 0022      		bset	#bitobj_flipH,obj_set(a6)
(1)  463/FFFFFFFFFFFF2454 : 3A06                		move.w	d6,d5
(1)  464/FFFFFFFFFFFF2456 : ED45                		asl.w	#6,d5
(1)  465/FFFFFFFFFFFF2458 : 4A46                		tst.w	d6
(1)  466/FFFFFFFFFFFF245A : 6A08                		bpl.s	.plus_y_spd
(1)  467/FFFFFFFFFFFF245C : 08AE 0000 0022      		bclr	#bitobj_flipH,obj_set(a6)
(1)  468/FFFFFFFFFFFF2462 : 5240                		addq.w	#1,d0
(1)  469/FFFFFFFFFFFF2464 :                     .plus_y_spd:
(1)  470/FFFFFFFFFFFF2464 : 3D45 0018           		move.w	d5,obj_y_spd(a6)
(1)  471/FFFFFFFFFFFF2468 :                     .no_y_spd:
(1)  472/FFFFFFFFFFFF2468 : 4A47                		tst.w	d7
(1)  473/FFFFFFFFFFFF246A : 671A                		beq.s	.no_x_spd
(1)  474/FFFFFFFFFFFF246C : 7002                		moveq	#2,d0
(1)  475/FFFFFFFFFFFF246E : 08EE 0000 0022      		bset	#bitobj_flipH,obj_set(a6)
(1)  476/FFFFFFFFFFFF2474 : 3A07                		move.w	d7,d5
(1)  477/FFFFFFFFFFFF2476 : ED45                		asl.w	#6,d5
(1)  478/FFFFFFFFFFFF2478 : 4A47                		tst.w	d7
(1)  479/FFFFFFFFFFFF247A : 6A06                		bpl.s	.plus_x_spd
(1)  480/FFFFFFFFFFFF247C : 08AE 0000 0022      		bclr	#bitobj_flipH,obj_set(a6)
(1)  481/FFFFFFFFFFFF2482 :                     .plus_x_spd:
(1)  482/FFFFFFFFFFFF2482 : 3D45 0016           		move.w	d5,obj_x_spd(a6)
(1)  483/FFFFFFFFFFFF2486 :                     .no_x_spd:
(1)  484/FFFFFFFFFFFF2486 :                     
(1)  485/FFFFFFFFFFFF2486 :                     ;
(1)  486/FFFFFFFFFFFF2486 :                     ; 		moveq	#2,d0
(1)  487/FFFFFFFFFFFF2486 :                     ; 		bset	#bitobj_flipH,obj_set(a6)
(1)  488/FFFFFFFFFFFF2486 :                     ; 		move.w	d7,d5
(1)  489/FFFFFFFFFFFF2486 :                     ; 		lsl.w	#3,d5
(1)  490/FFFFFFFFFFFF2486 :                     ; 		tst.w	d7
(1)  491/FFFFFFFFFFFF2486 :                     ; 		bpl.s	.no_x_spd
(1)  492/FFFFFFFFFFFF2486 :                     ; 		neg.w	d5
(1)  493/FFFFFFFFFFFF2486 :                     ; 		bclr	#bitobj_flipH,obj_set(a6)
(1)  494/FFFFFFFFFFFF2486 :                     ; .no_x_spd:
(1)  495/FFFFFFFFFFFF2486 :                     ; 		move.w	d5,obj_x_spd(a6)
(1)  496/FFFFFFFFFFFF2486 :                     
(1)  497/FFFFFFFFFFFF2486 :                     .no_mouse:
(1)  498/FFFFFFFFFFFF2486 : 1D40 001E           		move.b	d0,obj_anim_id(a6)
(1)  499/FFFFFFFFFFFF248A :                     ; 		lea	obj_ram(a6),a5
(1)  500/FFFFFFFFFFFF248A :                     ; 		sub.w	#1,(a5)
(1)  501/FFFFFFFFFFFF248A :                     ; 		bpl.s	.keep_moving
(1)  502/FFFFFFFFFFFF248A :                     ; 		move.w	2(a5),d1
(1)  503/FFFFFFFFFFFF248A :                     ; 		addq.w	#4,d1			; Start at 4
(1)  504/FFFFFFFFFFFF248A :                     ; 		move.b	d1,obj_anim_id(a6)
(1)  505/FFFFFFFFFFFF248A :                     ; 		lsl.w	#2,d1
(1)  506/FFFFFFFFFFFF248A :                     ; 		lea	.set_spds(pc,d1.w),a0
(1)  507/FFFFFFFFFFFF248A :                     ; 		move.w	(a0),obj_x_spd(a6)
(1)  508/FFFFFFFFFFFF248A :                     ; 		move.w	2(a0),obj_y_spd(a6)
(1)  509/FFFFFFFFFFFF248A :                     ; 		bclr	#bitobj_flipH,obj_set(a6)
(1)  510/FFFFFFFFFFFF248A :                     ; 		tst.w	obj_x_spd(a6)
(1)  511/FFFFFFFFFFFF248A :                     ; 		bmi.s	.flip_x
(1)  512/FFFFFFFFFFFF248A :                     ; 		bset	#bitobj_flipH,obj_set(a6)
(1)  513/FFFFFFFFFFFF248A :                     ; .flip_x:
(1)  514/FFFFFFFFFFFF248A :                     ; 		addq.w	#1,2(a5)
(1)  515/FFFFFFFFFFFF248A :                     ; 		andi.w	#%11,2(a5)
(1)  516/FFFFFFFFFFFF248A :                     ; 		move.w	#$100,(a5)		; Reset timer
(1)  517/FFFFFFFFFFFF248A :                     ; .keep_moving:
(1)  518/FFFFFFFFFFFF248A : 6100 EC54           		bsr	object_Speed
(1)  519/FFFFFFFFFFFF248E : 41FA 001A           		lea	.anim_data(pc),a0
(1)  520/FFFFFFFFFFFF2492 : 6100 EBA8           		bsr	object_Animate
(1)  521/FFFFFFFFFFFF2496 :                     
(1)  522/FFFFFFFFFFFF2496 : 41F9 0020 101C      		lea	(objDma_Bibi),a0
(1)  523/FFFFFFFFFFFF249C : 43F9 0020 B454      		lea	(Art_Bibi),a1
(1)  524/FFFFFFFFFFFF24A2 : 6100 EB10           		bsr	object_DMA_Auto
(1)  525/FFFFFFFFFFFF24A6 : 6000 EAE8           		bra	object_Display
(1)  526/FFFFFFFFFFFF24AA :                     
(1)  527/FFFFFFFFFFFF24AA :                     ; ----------------------------------------------
(1)  528/FFFFFFFFFFFF24AA :                     
(1)  529/FFFFFFFFFFFF24AA :                     ; .set_spds:
(1)  530/FFFFFFFFFFFF24AA :                     ; 		dc.w  $0080, $0000	; Right
(1)  531/FFFFFFFFFFFF24AA :                     ; 		dc.w  $0000, $0080	; Down
(1)  532/FFFFFFFFFFFF24AA :                     ; 		dc.w -$0080, $0000	; Left
(1)  533/FFFFFFFFFFFF24AA :                     ; 		dc.w  $0000,-$0080	; Up
(1)  534/FFFFFFFFFFFF24AA :                     .anim_data:
(1)  535/FFFFFFFFFFFF24AA : 000A                		dc.w .stand-.anim_data
(1)  536/FFFFFFFFFFFF24AC : 0034                		dc.w .yatta-.anim_data
(1)  537/FFFFFFFFFFFF24AE : 0028                		dc.w .walk_lr-.anim_data
(1)  538/FFFFFFFFFFFF24B0 : 0010                		dc.w .walk_d-.anim_data
(1)  539/FFFFFFFFFFFF24B2 : 001C                		dc.w .walk_u-.anim_data
(1)  540/FFFFFFFFFFFF24B4 :                     .stand:
(1)  541/FFFFFFFFFFFF24B4 : 0007                		dc.w 7
(1)  542/FFFFFFFFFFFF24B6 : 0000                		dc.w 0
(1)  543/FFFFFFFFFFFF24B8 : FFFE                		dc.w -2
(1)  544/FFFFFFFFFFFF24BA :                     .walk_d:
(1)  545/FFFFFFFFFFFF24BA : 0007                		dc.w 7
(1)  546/FFFFFFFFFFFF24BC : 0000 0001 0000      		dc.w 0,1,0,2
         FFFFFFFFFFFF24C2 : 0002             
(1)  547/FFFFFFFFFFFF24C4 : FFFE                		dc.w -2
(1)  548/FFFFFFFFFFFF24C6 :                     .walk_u:
(1)  549/FFFFFFFFFFFF24C6 : 0007                		dc.w 7
(1)  550/FFFFFFFFFFFF24C8 : 0003 0004 0003      		dc.w 3,4,3,5
         FFFFFFFFFFFF24CE : 0005             
(1)  551/FFFFFFFFFFFF24D0 : FFFE                		dc.w -2
(1)  552/FFFFFFFFFFFF24D2 :                     .walk_lr:
(1)  553/FFFFFFFFFFFF24D2 : 0007                		dc.w 7
(1)  554/FFFFFFFFFFFF24D4 : 0006 0007 0006      		dc.w 6,7,6,8
         FFFFFFFFFFFF24DA : 0008             
(1)  555/FFFFFFFFFFFF24DC : FFFE                		dc.w -2
(1)  556/FFFFFFFFFFFF24DE :                     .yatta:
(1)  557/FFFFFFFFFFFF24DE : 0007                		dc.w 7
(1)  558/FFFFFFFFFFFF24E0 : 0009                		dc.w 9
(1)  559/FFFFFFFFFFFF24E2 : FFFE                		dc.w -2
(1)  560/FFFFFFFFFFFF24E4 :                     
(1)  561/FFFFFFFFFFFF24E4 :                     ; ====================================================================
(1)  562/FFFFFFFFFFFF24E4 :                     ; ------------------------------------------------------
(1)  563/FFFFFFFFFFFF24E4 :                     ; Subroutines
(1)  564/FFFFFFFFFFFF24E4 :                     ; ------------------------------------------------------
(1)  565/FFFFFFFFFFFF24E4 :                     
(1)  566/FFFFFFFFFFFF24E4 :                     ShowMe_Who:
(1)  568/FFFFFFFFFFFF24E4 : 41F8 CC14           		lea	(RAM_MdMars_SuperSpr),a0
(1)  569/FFFFFFFFFFFF24E8 : 3038 D408           		move.w	(RAM_TempAnim).w,d0
(1)  570/FFFFFFFFFFFF24EC : E048                		lsr.w	#8,d0
(1)  571/FFFFFFFFFFFF24EE : 3140 0002           		move.w	d0,sspr_Frame(a0)
(1)  572/FFFFFFFFFFFF24F2 : 0678 0020 D408      		add.w	#$0020,(RAM_TempAnim).w
(1)  573/FFFFFFFFFFFF24F8 : 0C78 0500 D408      		cmp.w	#$0500,(RAM_TempAnim).w
(1)  574/FFFFFFFFFFFF24FE : 6D04                		blt.s	.lower_frm
(1)  575/FFFFFFFFFFFF2500 : 4278 D408           		clr.w	(RAM_TempAnim).w
(1)  576/FFFFFFFFFFFF2504 :                     .lower_frm:
(1)  577/FFFFFFFFFFFF2504 : 41F8 CC24           		lea	(RAM_MdMars_SuperSpr+sizeof_marsspr),a0
(1)  578/FFFFFFFFFFFF2508 : 3038 D40A           		move.w	(RAM_TempAnim2).w,d0
(1)  579/FFFFFFFFFFFF250C : E048                		lsr.w	#8,d0
(1)  580/FFFFFFFFFFFF250E : 3140 0002           		move.w	d0,sspr_Frame(a0)
(1)  581/FFFFFFFFFFFF2512 : 0678 0018 D40A      		addi.w	#$0018,(RAM_TempAnim2).w
(1)  582/FFFFFFFFFFFF2518 : 0C78 0300 D40A      		cmpi.w	#$0300,(RAM_TempAnim2).w
(1)  583/FFFFFFFFFFFF251E : 6D04                		blt.s	.lower_frm2
(1)  584/FFFFFFFFFFFF2520 : 4278 D40A           		clr.w	(RAM_TempAnim2).w
(1)  585/FFFFFFFFFFFF2524 :                     .lower_frm2:
(1)  586/FFFFFFFFFFFF2524 :                     
(1)  587/FFFFFFFFFFFF2524 : 41F8 CC14           		lea	(RAM_MdMars_SuperSpr),a0
(1)  588/FFFFFFFFFFFF2528 : 49F8 C004           		lea	(Controller_1),a4
(1)  589/FFFFFFFFFFFF252C : 426E 0016           		clr.w	obj_x_spd(a6)
(1)  590/FFFFFFFFFFFF2530 : 426E 0018           		clr.w	obj_y_spd(a6)
(1)  591/FFFFFFFFFFFF2534 : 382C 0002           		move.w	on_hold(a4),d4
(1)  592/FFFFFFFFFFFF2538 : 0804 0001           		btst	#bitJoyDown,d4
(1)  593/FFFFFFFFFFFF253C : 6706                		beq.s	.go_down
(1)  594/FFFFFFFFFFFF253E : 0668 0004 000A      		addi.w	#4,sspr_Ypos(a0)
(1)  595/FFFFFFFFFFFF2544 :                     .go_down:
(1)  596/FFFFFFFFFFFF2544 : 0804 0000           		btst	#bitJoyUp,d4
(1)  597/FFFFFFFFFFFF2548 : 6706                		beq.s	.go_up
(1)  598/FFFFFFFFFFFF254A : 0468 0004 000A      		subi.w	#4,sspr_Ypos(a0)
(1)  599/FFFFFFFFFFFF2550 :                     .go_up:
(1)  600/FFFFFFFFFFFF2550 : 0804 0003           		btst	#bitJoyRight,d4
(1)  601/FFFFFFFFFFFF2554 : 6706                		beq.s	.go_r
(1)  602/FFFFFFFFFFFF2556 : 0668 0004 0008      		addi.w	#4,sspr_Xpos(a0)
(1)  603/FFFFFFFFFFFF255C :                     .go_r:
(1)  604/FFFFFFFFFFFF255C : 0804 0002           		btst	#bitJoyLeft,d4
(1)  605/FFFFFFFFFFFF2560 : 6706                		beq.s	.go_l
(1)  606/FFFFFFFFFFFF2562 : 0468 0004 0008      		subi.w	#4,sspr_Xpos(a0)
(1)  607/FFFFFFFFFFFF2568 :                     .go_l:
(1)  608/FFFFFFFFFFFF2568 :                     
(1)  609/FFFFFFFFFFFF2568 : 41F8 CC04           		lea	(RAM_MdMars_Screen),a0
(1)  610/FFFFFFFFFFFF256C : 0804 0009           		btst	#bitJoyY,d4
(1)  611/FFFFFFFFFFFF2570 : 6706                		beq.s	.go_y
(1)  612/FFFFFFFFFFFF2572 : 0668 0004 0008      		addi.w	#4,mscrl_Ypos(a0)
(1)  613/FFFFFFFFFFFF2578 :                     .go_y:
(1)  614/FFFFFFFFFFFF2578 : 0804 000A           		btst	#bitJoyX,d4
(1)  615/FFFFFFFFFFFF257C : 6706                		beq.s	.go_x
(1)  616/FFFFFFFFFFFF257E : 0468 0004 0008      		subi.w	#4,mscrl_Ypos(a0)
(1)  617/FFFFFFFFFFFF2584 :                     .go_x:
(1)  618/FFFFFFFFFFFF2584 : 41F8 CC04           		lea	(RAM_MdMars_Screen),a0
(1)  619/FFFFFFFFFFFF2588 : 0804 0004           		btst	#bitJoyB,d4
(1)  620/FFFFFFFFFFFF258C : 6706                		beq.s	.go_b
(1)  621/FFFFFFFFFFFF258E : 0668 0004 0004      		addi.w	#4,mscrl_Xpos(a0)
(1)  622/FFFFFFFFFFFF2594 :                     .go_b:
(1)  623/FFFFFFFFFFFF2594 : 0804 0006           		btst	#bitJoyA,d4
(1)  624/FFFFFFFFFFFF2598 : 6706                		beq.s	.go_a
(1)  625/FFFFFFFFFFFF259A : 0468 0004 0004      		subi.w	#4,mscrl_Xpos(a0)
(1)  626/FFFFFFFFFFFF25A0 :                     .go_a:
(1)  627/FFFFFFFFFFFF25A0 :                     
(1)  650/FFFFFFFFFFFF25A0 : 4E75                		rts
(1)  651/FFFFFFFFFFFF25A2 :                     ; 		lea	str_Nadie(pc),a0
(1)  652/FFFFFFFFFFFF25A2 :                     ; 		move.l	#locate(1,3,0),d0
(1)  653/FFFFFFFFFFFF25A2 :                     ; 		bra	Video_Print
(1)  654/FFFFFFFFFFFF25A2 :                     ; 		rts
(1)  655/FFFFFFFFFFFF25A2 :                     
(1)  656/FFFFFFFFFFFF25A2 :                     ; ====================================================================
(1)  657/FFFFFFFFFFFF25A2 :                     ; ------------------------------------------------------
(1)  658/FFFFFFFFFFFF25A2 :                     ; Custom VBlank
(1)  659/FFFFFFFFFFFF25A2 :                     ; ------------------------------------------------------
(1)  660/FFFFFFFFFFFF25A2 :                     
(1)  661/FFFFFFFFFFFF25A2 :                     ; ------------------------------------------------------
(1)  662/FFFFFFFFFFFF25A2 :                     ; Custom HBlank
(1)  663/FFFFFFFFFFFF25A2 :                     ; ------------------------------------------------------
(1)  664/FFFFFFFFFFFF25A2 :                     
(1)  665/FFFFFFFFFFFF25A2 :                     ; ====================================================================
(1)  666/FFFFFFFFFFFF25A2 :                     ; ------------------------------------------------------
(1)  667/FFFFFFFFFFFF25A2 :                     ; Small DATA section
(1)  668/FFFFFFFFFFFF25A2 :                     ; ------------------------------------------------------
(1)  669/FFFFFFFFFFFF25A2 :                     
(1)  670/FFFFFFFFFFFF25A2 :                     PAL_SCR0_TEST:
(1)  671/FFFFFFFFFFFF25A2 :                     		binclude "game/screen_0/data/md/maps/test/md_pal.bin"
(1)  672/FFFFFFFFFFFF25C2 :                     		align 2
(1)  673/FFFFFFFFFFFF25C4 :                     str_Scrn0Intro:
(1)  674/FFFFFFFFFFFF25C4 : 4368 6563 6B69      		dc.b "Checking 32X visuals",0
         FFFFFFFFFFFF25CA : 6E67 2033 3258 
         FFFFFFFFFFFF25D0 : 2076 6973 7561 
         FFFFFFFFFFFF25D6 : 6C73 00          
(1)  675/FFFFFFFFFFFF25D9 :                     		align 2
(1)  676/FFFFFFFFFFFF25DA :                     ; str_Nadie:	dc.b "\\w",0
(1)  677/FFFFFFFFFFFF25DA :                     ; 		dc.l RAM_SC0_Cmnd
(1)  678/FFFFFFFFFFFF25DA :                     ; 		align 2
(1)  679/FFFFFFFFFFFF25DA :                     
(1)  680/FFFFFFFFFFFF25DA :                     
(1)  681/FFFFFFFFFFFF25DA :                     ; str_ListWho:	dc.b "Bibi   ",0
(1)  682/FFFFFFFFFFFF25DA :                     ; 		dc.b "Doremi ",0
(1)  683/FFFFFFFFFFFF25DA :                     ; 		dc.b "Sophie ",0
(1)  684/FFFFFFFFFFFF25DA :                     ; 		dc.b "Nicole ",0
(1)  685/FFFFFFFFFFFF25DA :                     ; 		dc.b "Nikona ",0
(1)  686/FFFFFFFFFFFF25DA :                     ; list_WhoIAm:	dc.l Obj_Bibi
(1)  687/FFFFFFFFFFFF25DA :                     ; 		dc.w 0
(1)  688/FFFFFFFFFFFF25DA :                     ; 		dc.l Obj_Doremi
(1)  689/FFFFFFFFFFFF25DA :                     ; 		dc.w 0
(1)  690/FFFFFFFFFFFF25DA :                     ; 		dc.l Obj_Doremi
(1)  691/FFFFFFFFFFFF25DA :                     ; 		dc.w 1
(1)  692/FFFFFFFFFFFF25DA :                     ; 		dc.l Obj_Doremi
(1)  693/FFFFFFFFFFFF25DA :                     ; 		dc.w 2
(1)  694/FFFFFFFFFFFF25DA :                     ; 		dc.l -1
(1)  695/FFFFFFFFFFFF25DA :                     ; 		dc.w 0
(1)  696/FFFFFFFFFFFF25DA :                     ;
(1)  697/FFFFFFFFFFFF25DA :                     ; str_ShowMe:	dc.b "\\w | \\w \\w",0
(1)  698/FFFFFFFFFFFF25DA :                     ; 		dc.l $FF0000,$FF0004,$FF0006
(1)  699/FFFFFFFFFFFF25DA :                     ; 		align 2
(1)  700/FFFFFFFFFFFF25DA :                     
(1)  701/FFFFFFFFFFFF25DA :                     ; List_ObjPos:	dc.w 1
(1)  702/FFFFFFFFFFFF25DA :                     ; 		dc.w 215,164
(1)  703/FFFFFFFFFFFF25DA :                     ; 		dc.w $4000|setVram_Generic+(4*6)
(1)  704/FFFFFFFFFFFF25DA :                     ; 		dc.l objMap_Doremi
(1)  705/FFFFFFFFFFFF25DA :                     ; 		dc.l objDma_Doremi
(1)  706/FFFFFFFFFFFF25DA :                     ; 		dc.w $70,$40
(1)  707/FFFFFFFFFFFF25DA :                     ; 		dc.w $4000|setVram_Generic+(4*6)
(1)  708/FFFFFFFFFFFF25DA :                     ; 		dc.l objMap_Doremi
(1)  709/FFFFFFFFFFFF25DA :                     ; 		dc.l objDma_Doremi
(1)  710/FFFFFFFFFFFF25DA :                     ; 		dc.w $50,$80
(1)  711/FFFFFFFFFFFF25DA :                     ; 		dc.w $4000|setVram_Generic+(4*6)
(1)  712/FFFFFFFFFFFF25DA :                     ; 		dc.l objMap_Doremi
(1)  713/FFFFFFFFFFFF25DA :                     ; 		dc.l objDma_Doremi
(1)  714/FFFFFFFFFFFF25DA :                     ; 		dc.w $30,$C0
(1)  715/FFFFFFFFFFFF25DA :                     ; 		dc.w $4000|setVram_Generic+(4*6)
(1)  716/FFFFFFFFFFFF25DA :                     ; 		dc.l objMap_Doremi
(1)  717/FFFFFFFFFFFF25DA :                     ; 		dc.l objDma_Doremi
(1)  718/FFFFFFFFFFFF25DA :                     
     370/FFFFFFFFFFFF25DA :                     mcscrn_e:
     370/FFFFFFFFFFFFD9DE :                                     dephase
     370/   5C5DA :                                     phase mctopscrn+(mcscrn_e-RAM_UserCode)
     370/   5C5DA :                                     align $800
     370/   5C800 :                     ; Md_Screen00_e:
     370/   5C800 : =$5C800              MD_SCREEN00_E label *
     370/   5C800 :  (MACRO-2)                           report "SCREEN MODE: MD_SCREEN00",mcscrn_e-RAM_UserCode,MAX_UserCode
     371/   5C800 : (MACRO)              	screen_code Md_Screen01,Md_Screen01_e,"game/screen_1/code.asm"
     371/   5C800 :                                     align $800              ; SCD/CD32X sector align
     371/   5C800 : =$5C800              MD_SCREEN01 label *
     371/   5C800 :                     
     371/   5C800 :                     mctopscrn:
     371/FFFFFFFFFFFF2000 :                                     phase RAM_UserCode      ; SCD/32X/CD32X relocate to RAM area
     371/FFFFFFFFFFFF2000 :                     mcscrn_s:
     371/FFFFFFFFFFFF2000 :                             include "game/screen_1/code.asm";"game/screen_0/code.asm"
(1)    1/FFFFFFFFFFFF2000 :                     ; ===========================================================================
(1)    2/FFFFFFFFFFFF2000 :                     ; ----------------------------------------------------------------
(1)    3/FFFFFFFFFFFF2000 :                     ; SCREEN CODE
(1)    4/FFFFFFFFFFFF2000 :                     ; ----------------------------------------------------------------
(1)    5/FFFFFFFFFFFF2000 :                     
(1)    6/FFFFFFFFFFFF2000 :                     ; ====================================================================
(1)    7/FFFFFFFFFFFF2000 :                     ; ------------------------------------------------------
(1)    8/FFFFFFFFFFFF2000 :                     ; Variables
(1)    9/FFFFFFFFFFFF2000 :                     ; ------------------------------------------------------
(1)   10/FFFFFFFFFFFF2000 :                     
(1)   11/FFFFFFFFFFFF2000 : =$440                setVram_Mikami		equ $0440
(1)   12/FFFFFFFFFFFF2000 : =$480                setVram_Sisi		equ $0480
(1)   13/FFFFFFFFFFFF2000 :                     
(1)   14/FFFFFFFFFFFF2000 :                     ; ====================================================================
(1)   15/FFFFFFFFFFFF2000 :                     ; ------------------------------------------------------
(1)   16/FFFFFFFFFFFF2000 :                     ; Structs
(1)   17/FFFFFFFFFFFF2000 :                     ; ------------------------------------------------------
(1)   18/FFFFFFFFFFFF2000 :                     
(1)   19/FFFFFFFFFFFF2000 :                     ; 			strct 0
(1)   20/FFFFFFFFFFFF2000 :                     ; strc_xpos		ds.w 1
(1)   21/FFFFFFFFFFFF2000 :                     ; strc_ypos		ds.w 1
(1)   22/FFFFFFFFFFFF2000 :                     ; 			endstrct
(1)   23/FFFFFFFFFFFF2000 :                     
(1)   24/FFFFFFFFFFFF2000 :                     ; ====================================================================
(1)   25/FFFFFFFFFFFF2000 :                     ; ------------------------------------------------------
(1)   26/FFFFFFFFFFFF2000 :                     ; This mode's RAM
(1)   27/FFFFFFFFFFFF2000 :                     ; ------------------------------------------------------
(1)   28/FFFFFFFFFFFF2000 :                     
(1)   29/FFFFFFFFFFFF2000 :  (MACRO-2)           			strct RAM_ScrnBuff
(1)   29/FFFFFFFFFFFF2000 : =$FFFFFFFFFFFF2000   GLBL_LASTPC     set *
(1)   29/   5C800 :                                     dephase
(1)   29/FFFFFFFFFFFFD404 :                                     phase RAM_SCRNBUFF
(1)   29/FFFFFFFFFFFFD404 : =$FFFFFFFFFFFFD404   GLBL_LASTORG    set *
(1)   30/FFFFFFFFFFFFD404 :                     RAM_CurrPick		ds.w 1
(1)   31/FFFFFFFFFFFFD406 :                     RAM_GemaArg0		ds.w 1
(1)   32/FFFFFFFFFFFFD408 :                     RAM_GemaArg1		ds.w 1
(1)   33/FFFFFFFFFFFFD40A :                     RAM_GemaArg2		ds.w 1
(1)   34/FFFFFFFFFFFFD40C :                     RAM_GemaArg3		ds.w 1
(1)   35/FFFFFFFFFFFFD40E :                     RAM_GemaArg4		ds.w 1
(1)   36/FFFFFFFFFFFFD410 :                     RAM_GemaArg5		ds.w 1
(1)   37/FFFFFFFFFFFFD412 :                     RAM_GemaArg6		ds.w 1
(1)   38/FFFFFFFFFFFFD414 :                     RAM_ChnlLinks		ds.w 26
(1)   39/FFFFFFFFFFFFD448 :                     sizeof_thisbuff		ds.l 0
(1)   40/FFFFFFFFFFFFD44C :  (MACRO-2)           			endstrct
(1)   40/FFFFFFFFFFFFD404 :                                     org GLBL_LASTORG
(1)   40/FFFFFFFFFFFF2000 :                                     phase GLBL_LASTPC
(1)   41/FFFFFFFFFFFF2000 :                     
(1)   42/FFFFFFFFFFFF2000 :  (MACRO-2)           	erreport "SCREEN",sizeof_thisbuff-RAM_ScrnBuff,MAX_ScrnBuff
(1)   43/FFFFFFFFFFFF2000 :                     
(1)   44/FFFFFFFFFFFF2000 :                     ; ====================================================================
(1)   45/FFFFFFFFFFFF2000 :                     ; ------------------------------------------------------
(1)   46/FFFFFFFFFFFF2000 :                     ; Init
(1)   47/FFFFFFFFFFFF2000 :                     ; ------------------------------------------------------
(1)   48/FFFFFFFFFFFF2000 :                     
(1)   49/FFFFFFFFFFFF2000 : 6100 F61E           		bsr	Mode_Init
(1)   50/FFFFFFFFFFFF2004 :  (MACRO-2)           		load_banks file_mddata_def,pointr_marsdata_def
(1)   50/FFFFFFFFFFFF2004 : 41FA 0320                           lea     POINTR_MARSDATA_DEF(pc),a0          ; 32X/CD32X: SH2 side data
(1)   50/FFFFFFFFFFFF2008 : 6100 F838                           bsr     System_MarsDataPack     ; MUST be first for CD32X
(1)   50/FFFFFFFFFFFF200C : 6100 E97E                           bsr     Video_MdMars_SyncFrame
(1)   50/FFFFFFFFFFFF2010 : 6100 F658                           bsr     System_MdMcd_SubWait
(1)   50/FFFFFFFFFFFF2014 : 41FA 0302                           lea     FILE_MDDATA_DEF(pc),a0           ; CD/CD32X
(1)   50/FFFFFFFFFFFF2018 : 6100 F67A                           bsr     System_McdTrnsfr_WRAM   ; WORD-RAM stays loaded
(1)   51/FFFFFFFFFFFF201C :                     
(1)   52/FFFFFFFFFFFF201C :                     	; ----------------------------------------------
(1)   53/FFFFFFFFFFFF201C :                     	; Load assets
(1)   55/FFFFFFFFFFFF201C :                     ; 		lea	(RAM_MdMars_SuperSpr),a0
(1)   56/FFFFFFFFFFFF201C :                     ; 		move.l	#0,sspr_Art(a0)
(1)   57/FFFFFFFFFFFF201C :                     
(1)   58/FFFFFFFFFFFF201C : 41F9 0020 1358      		lea	(PalMars_TEST),a0
(1)   59/FFFFFFFFFFFF2022 : 303C 0000           		move.w	#0,d0
(1)   60/FFFFFFFFFFFF2026 : 323C 0100           		move.w	#256,d1
(1)   61/FFFFFFFFFFFF202A : 7400                		moveq	#0,d2
(1)   62/FFFFFFFFFFFF202C : 6100 E99E           		bsr	Video_MdMars_FadePal
(1)   63/FFFFFFFFFFFF2030 : 203C 0600 5110      		move.l	#ArtMars_TEST,d0
(1)   64/FFFFFFFFFFFF2036 : 7200                		moveq	#0,d1
(1)   65/FFFFFFFFFFFF2038 : 7400                		moveq	#0,d2
(1)   66/FFFFFFFFFFFF203A : 6100 F16C           		bsr	Video_MdMarsMap_Set
(1)   67/FFFFFFFFFFFF203E : 41F9 0020 1128      		lea	(MapMars_TEST),a0
(1)   68/FFFFFFFFFFFF2044 : 7000                		moveq	#0,d0
(1)   69/FFFFFFFFFFFF2046 : 7200                		moveq	#0,d1
(1)   70/FFFFFFFFFFFF2048 : 343C 0014           		move.w	#320/16,d2
(1)   71/FFFFFFFFFFFF204C : 363C 000E           		move.w	#224/16,d3
(1)   72/FFFFFFFFFFFF2050 : 383C 0000           		move.w	#0,d4
(1)   73/FFFFFFFFFFFF2054 : 6100 F16C           		bsr	Video_MdMarsMap_Load
(1)   74/FFFFFFFFFFFF2058 : 7001                		moveq	#1,d0
(1)   75/FFFFFFFFFFFF205A : 6100 E944           		bsr	Video_MdMars_VideoMode
(1)   88/FFFFFFFFFFFF205E : 41F9 0021 0914      		lea	(ASCII_FONT_S1).l,a0
(1)   89/FFFFFFFFFFFF2064 : 43F9 FFFF 02E2      		lea	(ASCII_PAL).l,a1
(1)   90/FFFFFFFFFFFF206A : 6100 EB58           		bsr	Video_PrintInit
(1)   91/FFFFFFFFFFFF206E : 203C 0021 9C94      		move.l	#Art_Sisi,d0
(1)   92/FFFFFFFFFFFF2074 : 323C 9000           		move.w	#cell_vram(setVram_Sisi),d1
(1)   93/FFFFFFFFFFFF2078 : 343C 05E0           		move.w	#Art_Sisi_e-Art_Sisi,d2
(1)   94/FFFFFFFFFFFF207C : 6100 E540           		bsr	Video_LoadArt
(1)   95/FFFFFFFFFFFF2080 :                     
(1)   96/FFFFFFFFFFFF2080 : 41FA 0320           		lea	PAL_TEST(pc),a0
(1)   97/FFFFFFFFFFFF2084 : 7000                		moveq	#0,d0
(1)   98/FFFFFFFFFFFF2086 : 323C 0010           		move.w	#16,d1
(1)   99/FFFFFFFFFFFF208A : 6100 E3AC           		bsr	Video_FadePal
(1)  100/FFFFFFFFFFFF208E : 41F9 0020 1E18      		lea	(objPal_Sisi),a0
(1)  101/FFFFFFFFFFFF2094 : 7010                		moveq	#16,d0
(1)  102/FFFFFFFFFFFF2096 : 323C 0010           		move.w	#16,d1
(1)  103/FFFFFFFFFFFF209A : 6100 E39C           		bsr	Video_FadePal
(1)  104/FFFFFFFFFFFF209E : 41FA 0320           		lea	str_TesterInit(pc),a0
(1)  105/FFFFFFFFFFFF20A2 : 203C 0000 0101      		move.l	#locate(1,1,0),d0
(1)  106/FFFFFFFFFFFF20A8 : 6100 EB4A           		bsr	Video_Print
(1)  107/FFFFFFFFFFFF20AC :                     ; 		move.l	#Object_Mikami,d0
(1)  108/FFFFFFFFFFFF20AC :                     ; 		moveq	#0,d1
(1)  109/FFFFFFFFFFFF20AC :                     ; 		bsr	Objects_Set
(1)  110/FFFFFFFFFFFF20AC : 203C FFFF 2338      		move.l	#Object_Sisi,d0
(1)  111/FFFFFFFFFFFF20B2 : 6100 ED9A           		bsr	Objects_Add
(1)  112/FFFFFFFFFFFF20B6 :                     	; ----------------------------------------------
(1)  113/FFFFFFFFFFFF20B6 : 4278 D406           		clr.w	(RAM_GemaArg0).w
(1)  114/FFFFFFFFFFFF20BA : 4278 D408           		clr.w	(RAM_GemaArg1).w
(1)  115/FFFFFFFFFFFF20BE : 4278 D40A           		clr.w	(RAM_GemaArg2).w
(1)  116/FFFFFFFFFFFF20C2 : 4278 D40C           		clr.w	(RAM_GemaArg3).w
(1)  117/FFFFFFFFFFFF20C6 : 4278 D40E           		clr.w	(RAM_GemaArg4).w
(1)  118/FFFFFFFFFFFF20CA : 4278 D410           		clr.w	(RAM_GemaArg5).w
(1)  119/FFFFFFFFFFFF20CE : 31FC 00D4 D412      		move.w	#212,(RAM_GemaArg6).w
(1)  120/FFFFFFFFFFFF20D4 : 303C 00D4           		move.w	#212,d0
(1)  121/FFFFFFFFFFFF20D8 : 6100 E174           		bsr	gemaSetBeats
(1)  122/FFFFFFFFFFFF20DC :                     ; 		moveq	#1,d0
(1)  123/FFFFFFFFFFFF20DC :                     ; 		bsr	gemaPlayTrack
(1)  124/FFFFFFFFFFFF20DC :                     
(1)  125/FFFFFFFFFFFF20DC :                     	; ----------------------------------------------
(1)  126/FFFFFFFFFFFF20DC : 6100 008C           		bsr	.show_me
(1)  127/FFFFFFFFFFFF20E0 :                     ; 		bsr	.steal_vars
(1)  128/FFFFFFFFFFFF20E0 : 6100 ED14           		bsr	Objects_Run
(1)  129/FFFFFFFFFFFF20E4 :                     	; ----------------------------------------------
(1)  130/FFFFFFFFFFFF20E4 : 08F9 0006 FFFF      		bset	#bitDispEnbl,(RAM_VdpRegs+1).l		; Enable display
         FFFFFFFFFFFF20EA : B8F9             
(1)  131/FFFFFFFFFFFF20EC : 11FC 0081 B904      		move.b	#%10000001,(RAM_VdpRegs+$C).w		; H40 + shadow mode
(1)  132/FFFFFFFFFFFF20F2 : 6100 E210           		bsr	Video_Update
(1)  133/FFFFFFFFFFFF20F6 : 6100 E2C8           		bsr	Video_FullFadeIn
(1)  134/FFFFFFFFFFFF20FA :                     
(1)  135/FFFFFFFFFFFF20FA :                     ; ====================================================================
(1)  136/FFFFFFFFFFFF20FA :                     ; ------------------------------------------------------
(1)  137/FFFFFFFFFFFF20FA :                     ; Loop
(1)  138/FFFFFFFFFFFF20FA :                     ; ------------------------------------------------------
(1)  139/FFFFFFFFFFFF20FA :                     
(1)  140/FFFFFFFFFFFF20FA :                     .loop:
(1)  141/FFFFFFFFFFFF20FA : 6100 F198           		bsr	System_Render
(1)  142/FFFFFFFFFFFF20FE :                     
(1)  143/FFFFFFFFFFFF20FE :                     ; 		bsr	.steal_vars
(1)  144/FFFFFFFFFFFF20FE : 6100 ECF6           		bsr	Objects_Run
(1)  145/FFFFFFFFFFFF2102 : 41FA 03D8           		lea	str_Info(pc),a0
(1)  146/FFFFFFFFFFFF2106 : 203C 0000 1F1A      		move.l	#locate(31,26,0),d0
(1)  147/FFFFFFFFFFFF210C : 6100 EAE6           		bsr	Video_Print
(1)  148/FFFFFFFFFFFF2110 :                     
(1)  149/FFFFFFFFFFFF2110 :                     ; 	; Controls
(1)  150/FFFFFFFFFFFF2110 :                     ; 	if MCD|MARSCD
(1)  151/FFFFFFFFFFFF2110 :                     ; 		lea	(Controller_1).w,a6
(1)  152/FFFFFFFFFFFF2110 :                     ; 		move.w	on_press(a6),d7
(1)  153/FFFFFFFFFFFF2110 :                     ; 		btst	#bitJoyMode,d7
(1)  154/FFFFFFFFFFFF2110 :                     ; 		beq.s	.n_aplay
(1)  155/FFFFFFFFFFFF2110 :                     ; ; 		moveq	#1,d0
(1)  156/FFFFFFFFFFFF2110 :                     ; ; 		bsr	Video_MdMarsGfxMode
(1)  157/FFFFFFFFFFFF2110 :                     ; 		move.w	#$0002,(sysmcd_reg+mcd_dcomm_m).l
(1)  158/FFFFFFFFFFFF2110 :                     ; 		move.w	#$0010,d0
(1)  159/FFFFFFFFFFFF2110 :                     ; 		bsr	System_McdSubTask
(1)  160/FFFFFFFFFFFF2110 :                     ; .n_aplay:
(1)  161/FFFFFFFFFFFF2110 :                     ; 	endif
(1)  162/FFFFFFFFFFFF2110 :                     
(1)  163/FFFFFFFFFFFF2110 : 4DF8 C004           		lea	(Controller_1).w,a6
(1)  164/FFFFFFFFFFFF2114 : 4BF8 D404           		lea	(RAM_CurrPick).w,a5
(1)  165/FFFFFFFFFFFF2118 :                     	; UP/DOWN
(1)  166/FFFFFFFFFFFF2118 : 3E2E 0002           		move.w	on_hold(a6),d7
(1)  167/FFFFFFFFFFFF211C : 0247 0070           		andi.w	#JoyA+JoyB+JoyC,d7
(1)  168/FFFFFFFFFFFF2120 : 6626                		bne.s	.n_up
(1)  169/FFFFFFFFFFFF2122 : 3E2E 0004           		move.w	on_press(a6),d7
(1)  170/FFFFFFFFFFFF2126 : 0807 0001           		btst	#bitJoyDown,d7
(1)  171/FFFFFFFFFFFF212A : 670A                		beq.s	.n_down
(1)  172/FFFFFFFFFFFF212C : 0C55 0007           		cmp.w	#7,(a5)		; MAX OPTIONS
(1)  173/FFFFFFFFFFFF2130 : 6704                		beq.s	.n_down
(1)  174/FFFFFFFFFFFF2132 : 5255                		addq.w	#1,(a5)
(1)  175/FFFFFFFFFFFF2134 : 6134                		bsr.s	.show_me
(1)  176/FFFFFFFFFFFF2136 :                     .n_down:
(1)  177/FFFFFFFFFFFF2136 : 3E2E 0004           		move.w	on_press(a6),d7
(1)  178/FFFFFFFFFFFF213A : 0807 0000           		btst	#bitJoyUp,d7
(1)  179/FFFFFFFFFFFF213E : 6708                		beq.s	.n_up
(1)  180/FFFFFFFFFFFF2140 : 4A55                		tst.w	(a5)
(1)  181/FFFFFFFFFFFF2142 : 6704                		beq.s	.n_up
(1)  182/FFFFFFFFFFFF2144 : 5355                		subq.w	#1,(a5)
(1)  183/FFFFFFFFFFFF2146 : 6122                		bsr.s	.show_me
(1)  184/FFFFFFFFFFFF2148 :                     .n_up:
(1)  185/FFFFFFFFFFFF2148 : 3E38 D404           		move.w	(RAM_CurrPick).w,d7
(1)  186/FFFFFFFFFFFF214C : E54F                		lsl.w	#2,d7
(1)  187/FFFFFFFFFFFF214E : 4EBB 7028           		jsr	.jump_list(pc,d7.w)
(1)  188/FFFFFFFFFFFF2152 : 4A78 C458           		tst.w	(RAM_ScreenMode).w	; Check -1
(1)  189/FFFFFFFFFFFF2156 : 6A10                		bpl.s	.n_cbtn
(1)  190/FFFFFFFFFFFF2158 : 6100 E0A0           		bsr	gemaStopAll
(1)  191/FFFFFFFFFFFF215C : 6100 E288           		bsr	Video_FullFadeOut
(1)  192/FFFFFFFFFFFF2160 : 31FC 0000 C458      		move.w	#0,(RAM_ScreenMode).w	; Return to mode 0
(1)  193/FFFFFFFFFFFF2166 : 4E75                		rts				; EXIT
(1)  194/FFFFFFFFFFFF2168 :                     .n_cbtn:
(1)  195/FFFFFFFFFFFF2168 : 6090                		bra	.loop
(1)  196/FFFFFFFFFFFF216A :                     ; ------------------------------------------------------
(1)  197/FFFFFFFFFFFF216A :                     
(1)  198/FFFFFFFFFFFF216A :                     .show_me:
(1)  199/FFFFFFFFFFFF216A : 41FA 033A           		lea	str_ShowMe(pc),a0
(1)  200/FFFFFFFFFFFF216E : 203C 0000 1705      		move.l	#locate(23,5,0),d0
(1)  201/FFFFFFFFFFFF2174 : 6000 EA7E           		bra	Video_Print
(1)  202/FFFFFFFFFFFF2178 :                     
(1)  203/FFFFFFFFFFFF2178 :                     ; ------------------------------------------------------
(1)  204/FFFFFFFFFFFF2178 :                     
(1)  205/FFFFFFFFFFFF2178 :                     .jump_list:
(1)  206/FFFFFFFFFFFF2178 : 6000 001E           		bra.w	.nothing
(1)  207/FFFFFFFFFFFF217C : 6000 002C           		bra.w	.option_1
(1)  208/FFFFFFFFFFFF2180 : 6000 00AE           		bra.w	.option_2
(1)  209/FFFFFFFFFFFF2184 : 6000 00C0           		bra.w	.option_3
(1)  210/FFFFFFFFFFFF2188 : 6000 00D2           		bra.w	.option_4
(1)  211/FFFFFFFFFFFF218C : 6000 00E6           		bra.w	.option_5
(1)  212/FFFFFFFFFFFF2190 : 6000 00F6           		bra.w	.option_6
(1)  213/FFFFFFFFFFFF2194 : 6000 0144           		bra.w	.option_7
(1)  214/FFFFFFFFFFFF2198 :                     
(1)  215/FFFFFFFFFFFF2198 :                     ; ------------------------------------------------------
(1)  216/FFFFFFFFFFFF2198 :                     ; OPTION 0
(1)  217/FFFFFFFFFFFF2198 :                     ; ------------------------------------------------------
(1)  218/FFFFFFFFFFFF2198 :                     
(1)  219/FFFFFFFFFFFF2198 :                     .nothing:
(1)  220/FFFFFFFFFFFF2198 : 3E2E 0004           		move.w	on_press(a6),d7
(1)  221/FFFFFFFFFFFF219C : 0807 0007           		btst	#bitJoyStart,d7
(1)  222/FFFFFFFFFFFF21A0 : 6706                		beq.s	.no_press
(1)  223/FFFFFFFFFFFF21A2 : 61C6                		bsr.s	.show_me
(1)  224/FFFFFFFFFFFF21A4 : 6000 DFFA           		bra	gemaTest
(1)  225/FFFFFFFFFFFF21A8 :                     .no_press:
(1)  226/FFFFFFFFFFFF21A8 : 4E75                		rts
(1)  227/FFFFFFFFFFFF21AA :                     
(1)  228/FFFFFFFFFFFF21AA :                     ; ------------------------------------------------------
(1)  229/FFFFFFFFFFFF21AA :                     ; OPTION 1
(1)  230/FFFFFFFFFFFF21AA :                     ; ------------------------------------------------------
(1)  231/FFFFFFFFFFFF21AA :                     
(1)  232/FFFFFFFFFFFF21AA :                     .option_1:
(1)  233/FFFFFFFFFFFF21AA : 4BF8 D406           		lea	(RAM_GemaArg0).w,a5
(1)  234/FFFFFFFFFFFF21AE : 3E2E 0004           		move.w	on_press(a6),d7
(1)  235/FFFFFFFFFFFF21B2 : 0807 0007           		btst	#bitJoyStart,d7
(1)  236/FFFFFFFFFFFF21B6 : 671E                		beq.s	.option1_args
(1)  237/FFFFFFFFFFFF21B8 : 301D                		move.w	(a5)+,d0
(1)  238/FFFFFFFFFFFF21BA : 321D                		move.w	(a5)+,d1
(1)  239/FFFFFFFFFFFF21BC : 341D                		move.w	(a5)+,d2
(1)  240/FFFFFFFFFFFF21BE : 6100 E000           		bsr	gemaPlayTrack
(1)  241/FFFFFFFFFFFF21C2 : 3038 D408           		move.w	(RAM_GemaArg1).w,d0
(1)  242/FFFFFFFFFFFF21C6 : 3200                		move.w	d0,d1
(1)  243/FFFFFFFFFFFF21C8 : D241                		add.w	d1,d1
(1)  244/FFFFFFFFFFFF21CA : 41FA 0120           		lea	.extnal_beats(pc),a0
(1)  245/FFFFFFFFFFFF21CE : 3030 1000           		move.w	(a0,d1.w),d0
(1)  246/FFFFFFFFFFFF21D2 : 6000 E07A           		bra	gemaSetBeats
(1)  247/FFFFFFFFFFFF21D6 :                     ; 		bra.s	.show_me
(1)  248/FFFFFFFFFFFF21D6 :                     .option1_args:
(1)  249/FFFFFFFFFFFF21D6 : 3E2E 0002           		move.w	on_hold(a6),d7
(1)  250/FFFFFFFFFFFF21DA : 3C07                		move.w	d7,d6
(1)  251/FFFFFFFFFFFF21DC : 0246 0070           		andi.w	#JoyA+JoyB+JoyC,d6
(1)  252/FFFFFFFFFFFF21E0 : 67C6                		beq.s	.no_press
(1)  253/FFFFFFFFFFFF21E2 : 0807 0004           		btst	#bitJoyB,d7
(1)  254/FFFFFFFFFFFF21E6 : 6704                		beq.s	.d2_opt
(1)  255/FFFFFFFFFFFF21E8 : DAFC 0002           		adda	#2,a5
(1)  256/FFFFFFFFFFFF21EC :                     .d2_opt:
(1)  257/FFFFFFFFFFFF21EC : 0807 0005           		btst	#bitJoyC,d7
(1)  258/FFFFFFFFFFFF21F0 : 6704                		beq.s	.d3_opt
(1)  259/FFFFFFFFFFFF21F2 : DAFC 0004           		adda	#4,a5
(1)  260/FFFFFFFFFFFF21F6 :                     .d3_opt:
(1)  261/FFFFFFFFFFFF21F6 : 3E2E 0004           		move.w	on_press(a6),d7
(1)  262/FFFFFFFFFFFF21FA : 0807 0003           		btst	#bitJoyRight,d7
(1)  263/FFFFFFFFFFFF21FE : 6706                		beq.s	.op1_right
(1)  264/FFFFFFFFFFFF2200 : 5255                		addq.w	#1,(a5)
(1)  265/FFFFFFFFFFFF2202 : 6000 FF66           		bra	.show_me
(1)  266/FFFFFFFFFFFF2206 :                     .op1_right:
(1)  267/FFFFFFFFFFFF2206 : 0807 0002           		btst	#bitJoyLeft,d7
(1)  268/FFFFFFFFFFFF220A : 6706                		beq.s	.op1_left
(1)  269/FFFFFFFFFFFF220C : 5355                		subq.w	#1,(a5)
(1)  270/FFFFFFFFFFFF220E : 6000 FF5A           		bra	.show_me
(1)  271/FFFFFFFFFFFF2212 :                     .op1_left:
(1)  272/FFFFFFFFFFFF2212 : 3E2E 0002           		move.w	on_hold(a6),d7
(1)  273/FFFFFFFFFFFF2216 : 0807 0000           		btst	#bitJoyUp,d7
(1)  274/FFFFFFFFFFFF221A : 6706                		beq.s	.op1_down
(1)  275/FFFFFFFFFFFF221C : 5255                		addq.w	#1,(a5)
(1)  276/FFFFFFFFFFFF221E : 6000 FF4A           		bra	.show_me
(1)  277/FFFFFFFFFFFF2222 :                     .op1_down:
(1)  278/FFFFFFFFFFFF2222 : 0807 0001           		btst	#bitJoyDown,d7
(1)  279/FFFFFFFFFFFF2226 : 6706                		beq.s	.op1_up
(1)  280/FFFFFFFFFFFF2228 : 5355                		subq.w	#1,(a5)
(1)  281/FFFFFFFFFFFF222A : 6000 FF3E           		bra	.show_me
(1)  282/FFFFFFFFFFFF222E :                     .op1_up:
(1)  283/FFFFFFFFFFFF222E :                     
(1)  284/FFFFFFFFFFFF222E : 4E75                		rts
(1)  285/FFFFFFFFFFFF2230 :                     
(1)  286/FFFFFFFFFFFF2230 :                     ; ------------------------------------------------------
(1)  287/FFFFFFFFFFFF2230 :                     ; OPTION 2
(1)  288/FFFFFFFFFFFF2230 :                     ; ------------------------------------------------------
(1)  289/FFFFFFFFFFFF2230 :                     
(1)  290/FFFFFFFFFFFF2230 :                     .option_2:
(1)  291/FFFFFFFFFFFF2230 : 4BF8 D406           		lea	(RAM_GemaArg0).w,a5
(1)  292/FFFFFFFFFFFF2234 : 3E2E 0004           		move.w	on_press(a6),d7
(1)  293/FFFFFFFFFFFF2238 : 0807 0007           		btst	#bitJoyStart,d7
(1)  294/FFFFFFFFFFFF223C : 6798                		beq.s	.option1_args
(1)  295/FFFFFFFFFFFF223E : 301D                		move.w	(a5)+,d0
(1)  296/FFFFFFFFFFFF2240 : 321D                		move.w	(a5)+,d1
(1)  297/FFFFFFFFFFFF2242 : 6000 DF9A           		bra	gemaStopTrack
(1)  298/FFFFFFFFFFFF2246 :                     
(1)  299/FFFFFFFFFFFF2246 :                     ; ------------------------------------------------------
(1)  300/FFFFFFFFFFFF2246 :                     ; OPTION 3
(1)  301/FFFFFFFFFFFF2246 :                     ; ------------------------------------------------------
(1)  302/FFFFFFFFFFFF2246 :                     
(1)  303/FFFFFFFFFFFF2246 :                     .option_3:
(1)  304/FFFFFFFFFFFF2246 : 4BF8 D40C           		lea	(RAM_GemaArg3).w,a5
(1)  305/FFFFFFFFFFFF224A : 3E2E 0004           		move.w	on_press(a6),d7
(1)  306/FFFFFFFFFFFF224E : 0807 0007           		btst	#bitJoyStart,d7
(1)  307/FFFFFFFFFFFF2252 : 6782                		beq	.option1_args
(1)  308/FFFFFFFFFFFF2254 : 301D                		move.w	(a5)+,d0
(1)  309/FFFFFFFFFFFF2256 : 321D                		move.w	(a5)+,d1
(1)  310/FFFFFFFFFFFF2258 : 6000 DFBC           		bra	gemaFadeTrack
(1)  311/FFFFFFFFFFFF225C :                     
(1)  312/FFFFFFFFFFFF225C :                     ; ------------------------------------------------------
(1)  313/FFFFFFFFFFFF225C :                     ; OPTION 4
(1)  314/FFFFFFFFFFFF225C :                     ; ------------------------------------------------------
(1)  315/FFFFFFFFFFFF225C :                     
(1)  316/FFFFFFFFFFFF225C :                     .option_4:
(1)  317/FFFFFFFFFFFF225C : 4BF8 D40C           		lea	(RAM_GemaArg3).w,a5
(1)  318/FFFFFFFFFFFF2260 : 3E2E 0004           		move.w	on_press(a6),d7
(1)  319/FFFFFFFFFFFF2264 : 0807 0007           		btst	#bitJoyStart,d7
(1)  320/FFFFFFFFFFFF2268 : 6700 FF6C           		beq	.option1_args
(1)  321/FFFFFFFFFFFF226C : 301D                		move.w	(a5)+,d0
(1)  322/FFFFFFFFFFFF226E : 321D                		move.w	(a5)+,d1
(1)  323/FFFFFFFFFFFF2270 : 6000 DFC0           		bra	gemaSetTrackVol
(1)  324/FFFFFFFFFFFF2274 :                     
(1)  325/FFFFFFFFFFFF2274 :                     ; ------------------------------------------------------
(1)  326/FFFFFFFFFFFF2274 :                     ; OPTION 5
(1)  327/FFFFFFFFFFFF2274 :                     ; ------------------------------------------------------
(1)  328/FFFFFFFFFFFF2274 :                     
(1)  329/FFFFFFFFFFFF2274 :                     .option_5:
(1)  330/FFFFFFFFFFFF2274 : 3E2E 0004           		move.w	on_press(a6),d7
(1)  331/FFFFFFFFFFFF2278 : 0807 0007           		btst	#bitJoyStart,d7
(1)  332/FFFFFFFFFFFF227C : 6708                		beq.s	.no_press2
(1)  333/FFFFFFFFFFFF227E : 6100 FEEA           		bsr	.show_me
(1)  334/FFFFFFFFFFFF2282 : 6000 DF76           		bra	gemaStopAll
(1)  335/FFFFFFFFFFFF2286 :                     .no_press2:
(1)  336/FFFFFFFFFFFF2286 : 4E75                		rts
(1)  337/FFFFFFFFFFFF2288 :                     
(1)  338/FFFFFFFFFFFF2288 :                     ; ------------------------------------------------------
(1)  339/FFFFFFFFFFFF2288 :                     ; OPTION 6
(1)  340/FFFFFFFFFFFF2288 :                     ; ------------------------------------------------------
(1)  341/FFFFFFFFFFFF2288 :                     
(1)  342/FFFFFFFFFFFF2288 :                     .option_6:
(1)  343/FFFFFFFFFFFF2288 : 4BF8 D412           		lea	(RAM_GemaArg6).w,a5
(1)  344/FFFFFFFFFFFF228C : 3E2E 0002           		move.w	on_hold(a6),d7
(1)  345/FFFFFFFFFFFF2290 : 0247 0010           		andi.w	#JoyB,d7
(1)  346/FFFFFFFFFFFF2294 : 67F0                		beq.s	.no_press2
(1)  347/FFFFFFFFFFFF2296 : 3E2E 0004           		move.w	on_press(a6),d7
(1)  348/FFFFFFFFFFFF229A : 0807 0003           		btst	#bitJoyRight,d7
(1)  349/FFFFFFFFFFFF229E : 6704                		beq.s	.op2_right
(1)  350/FFFFFFFFFFFF22A0 : 5255                		addq.w	#1,(a5)
(1)  351/FFFFFFFFFFFF22A2 : 602C                		bra	.show_me_2
(1)  352/FFFFFFFFFFFF22A4 :                     .op2_right:
(1)  353/FFFFFFFFFFFF22A4 : 0807 0002           		btst	#bitJoyLeft,d7
(1)  354/FFFFFFFFFFFF22A8 : 6704                		beq.s	.op2_left
(1)  355/FFFFFFFFFFFF22AA : 5355                		subq.w	#1,(a5)
(1)  356/FFFFFFFFFFFF22AC : 6122                		bsr	.show_me_2
(1)  357/FFFFFFFFFFFF22AE :                     .op2_left:
(1)  358/FFFFFFFFFFFF22AE : 3E2E 0002           		move.w	on_hold(a6),d7
(1)  359/FFFFFFFFFFFF22B2 : 0807 0001           		btst	#bitJoyDown,d7
(1)  360/FFFFFFFFFFFF22B6 : 6704                		beq.s	.op2_down
(1)  361/FFFFFFFFFFFF22B8 : 5255                		addq.w	#1,(a5)
(1)  362/FFFFFFFFFFFF22BA : 6114                		bsr	.show_me_2
(1)  363/FFFFFFFFFFFF22BC :                     .op2_down:
(1)  364/FFFFFFFFFFFF22BC : 0807 0000           		btst	#bitJoyUp,d7
(1)  365/FFFFFFFFFFFF22C0 : 6704                		beq.s	.op2_up
(1)  366/FFFFFFFFFFFF22C2 : 5355                		subq.w	#1,(a5)
(1)  367/FFFFFFFFFFFF22C4 : 610A                		bsr	.show_me_2
(1)  368/FFFFFFFFFFFF22C6 :                     .op2_up:
(1)  369/FFFFFFFFFFFF22C6 : 3E2E 0004           		move.w	on_press(a6),d7
(1)  370/FFFFFFFFFFFF22CA : 0807 0007           		btst	#bitJoyStart,d7
(1)  371/FFFFFFFFFFFF22CE : 67B6                		beq.s	.no_press2
(1)  372/FFFFFFFFFFFF22D0 :                     .show_me_2:
(1)  373/FFFFFFFFFFFF22D0 : 6100 FE98           		bsr	.show_me
(1)  374/FFFFFFFFFFFF22D4 : 3015                		move.w	(a5),d0
(1)  375/FFFFFFFFFFFF22D6 : 6000 DF76           		bra	gemaSetBeats
(1)  376/FFFFFFFFFFFF22DA :                     
(1)  377/FFFFFFFFFFFF22DA :                     ; ------------------------------------------------------
(1)  378/FFFFFFFFFFFF22DA :                     ; OPTION 7
(1)  379/FFFFFFFFFFFF22DA :                     ; ------------------------------------------------------
(1)  380/FFFFFFFFFFFF22DA :                     
(1)  381/FFFFFFFFFFFF22DA :                     .option_7:
(1)  382/FFFFFFFFFFFF22DA : 3E2E 0004           		move.w	on_press(a6),d7
(1)  383/FFFFFFFFFFFF22DE : 0807 0007           		btst	#bitJoyStart,d7
(1)  384/FFFFFFFFFFFF22E2 : 67A2                		beq.s	.no_press2
(1)  385/FFFFFFFFFFFF22E4 : 31FC FFFF C458      		move.w	#-1,(RAM_ScreenMode).w	; risky but whatever.
(1)  386/FFFFFFFFFFFF22EA : 4E75                		rts
(1)  387/FFFFFFFFFFFF22EC :                     
(1)  388/FFFFFFFFFFFF22EC :                     ; ------------------------------------------------------
(1)  389/FFFFFFFFFFFF22EC :                     ; EXTERNAL BEATS FOR EACH TRACK
(1)  390/FFFFFFFFFFFF22EC :                     ; ------------------------------------------------------
(1)  391/FFFFFFFFFFFF22EC :                     
(1)  392/FFFFFFFFFFFF22EC :                     .extnal_beats:
(1)  393/FFFFFFFFFFFF22EC : 00D6                	dc.w 214
(1)  394/FFFFFFFFFFFF22EE : 00D6                	dc.w 214
(1)  395/FFFFFFFFFFFF22F0 : 00D6                	dc.w 214
(1)  396/FFFFFFFFFFFF22F2 : 00D6                	dc.w 214
(1)  397/FFFFFFFFFFFF22F4 : 00D6                	dc.w 214
(1)  398/FFFFFFFFFFFF22F6 : 00D6                	dc.w 214
(1)  399/FFFFFFFFFFFF22F8 : 00E8                	dc.w 200+32
(1)  400/FFFFFFFFFFFF22FA : 00E8                	dc.w 200+32
(1)  401/FFFFFFFFFFFF22FC : 00E8                	dc.w 200+32
(1)  402/FFFFFFFFFFFF22FE : 00E8                	dc.w 200+32
(1)  403/FFFFFFFFFFFF2300 : 00E8                	dc.w 200+32
(1)  404/FFFFFFFFFFFF2302 : 00E8                	dc.w 200+32
(1)  405/FFFFFFFFFFFF2304 : 00E8                	dc.w 200+32
(1)  406/FFFFFFFFFFFF2306 : 00E8                	dc.w 200+32
(1)  407/FFFFFFFFFFFF2308 : 00E8                	dc.w 200+32
(1)  408/FFFFFFFFFFFF230A : 00E8                	dc.w 200+32
(1)  409/FFFFFFFFFFFF230C : 00E8                	dc.w 200+32
(1)  410/FFFFFFFFFFFF230E : 00E8                	dc.w 200+32
(1)  411/FFFFFFFFFFFF2310 : 00E8                	dc.w 200+32
(1)  412/FFFFFFFFFFFF2312 : 00E8                	dc.w 200+32
(1)  413/FFFFFFFFFFFF2314 : 00E8                	dc.w 200+32
(1)  414/FFFFFFFFFFFF2316 : 00E8                	dc.w 200+32
(1)  415/FFFFFFFFFFFF2318 :                     
(1)  416/FFFFFFFFFFFF2318 :                     ; ====================================================================
(1)  417/FFFFFFFFFFFF2318 :                     ; ------------------------------------------------------
(1)  418/FFFFFFFFFFFF2318 :                     ; DATA assets locations for 68K and SH2
(1)  419/FFFFFFFFFFFF2318 :                     ; ------------------------------------------------------
(1)  420/FFFFFFFFFFFF2318 :                     
(1)  421/FFFFFFFFFFFF2318 :                     file_mddata_def:
(1)  422/FFFFFFFFFFFF2318 : 4441 5441 424E      		dc.b "DATABNKD.BIN",0		; CD Filename
         FFFFFFFFFFFF231E : 4B44 2E42 494E 00 
(1)  423/FFFFFFFFFFFF2325 :                     		align 2
(1)  424/FFFFFFFFFFFF2326 :                     pointr_marsdata_def:
(1)  425/FFFFFFFFFFFF2326 : 0009 E000           		dc.l MARSDATA_SCREEN01		; 32X Cartridge point
(1)  426/FFFFFFFFFFFF232A : 4D41 5253 445F      		dc.b "MARSD_01.BIN",0		; CD Filename
         FFFFFFFFFFFF2330 : 3031 2E42 494E 00 
(1)  427/FFFFFFFFFFFF2337 :                     		align 2
(1)  428/FFFFFFFFFFFF2338 :                     
(1)  429/FFFFFFFFFFFF2338 :                     ; ====================================================================
(1)  430/FFFFFFFFFFFF2338 :                     ; ------------------------------------------------------
(1)  431/FFFFFFFFFFFF2338 :                     ; Objects
(1)  432/FFFFFFFFFFFF2338 :                     ; ------------------------------------------------------
(1)  433/FFFFFFFFFFFF2338 :                     
(1)  434/FFFFFFFFFFFF2338 :                     ; ; --------------------------------------------------
(1)  435/FFFFFFFFFFFF2338 :                     ; ; Mikami
(1)  436/FFFFFFFFFFFF2338 :                     ; ; --------------------------------------------------
(1)  437/FFFFFFFFFFFF2338 :                     ;
(1)  438/FFFFFFFFFFFF2338 :                     ; Object_Mikami:
(1)  439/FFFFFFFFFFFF2338 :                     ; 		moveq	#0,d0
(1)  440/FFFFFFFFFFFF2338 :                     ; 		move.b	obj_index(a6),d0
(1)  441/FFFFFFFFFFFF2338 :                     ; 		add.w	d0,d0
(1)  442/FFFFFFFFFFFF2338 :                     ; 		move.w	.list(pc,d0.w),d1
(1)  443/FFFFFFFFFFFF2338 :                     ; 		jmp	.list(pc,d1.w)
(1)  444/FFFFFFFFFFFF2338 :                     ; ; ----------------------------------------------
(1)  445/FFFFFFFFFFFF2338 :                     ; .list:		dc.w .init-.list
(1)  446/FFFFFFFFFFFF2338 :                     ; 		dc.w .main-.list
(1)  447/FFFFFFFFFFFF2338 :                     ; ; ----------------------------------------------
(1)  448/FFFFFFFFFFFF2338 :                     ; .init:
(1)  449/FFFFFFFFFFFF2338 :                     ; 		move.b	#1,obj_index(a6)
(1)  450/FFFFFFFFFFFF2338 :                     ; 		move.l	#objMap_Mikami,obj_map(a6)
(1)  451/FFFFFFFFFFFF2338 :                     ; 		move.l	#objDma_Mikami,obj_dma(a6)
(1)  452/FFFFFFFFFFFF2338 :                     ; 		move.w	#setVram_Mikami|$2000,obj_vram(a6)
(1)  453/FFFFFFFFFFFF2338 :                     ; 		bclr	#bitobj_Mars,obj_set(a6)	; Genesis object
(1)  454/FFFFFFFFFFFF2338 :                     ; 		move.w	#(320/2)+48,obj_x(a6)
(1)  455/FFFFFFFFFFFF2338 :                     ; 		move.w	#(224/2)+64,obj_y(a6)
(1)  456/FFFFFFFFFFFF2338 :                     ; 		clr.w	obj_frame(a6)
(1)  457/FFFFFFFFFFFF2338 :                     ; 		bsr	object_ResetAnim
(1)  458/FFFFFFFFFFFF2338 :                     ; 		bset	#0,obj_status(a6)
(1)  459/FFFFFFFFFFFF2338 :                     ; 		bset	#bitobj_flipH,obj_set(a6)
(1)  460/FFFFFFFFFFFF2338 :                     ;
(1)  461/FFFFFFFFFFFF2338 :                     ; ; ----------------------------------------------
(1)  462/FFFFFFFFFFFF2338 :                     ; .main:
(1)  463/FFFFFFFFFFFF2338 :                     ; 		lea	(Controller_2),a3
(1)  464/FFFFFFFFFFFF2338 :                     ; 		btst	#0,obj_status(a6)
(1)  465/FFFFFFFFFFFF2338 :                     ; 		beq.s	.no_fallspd
(1)  466/FFFFFFFFFFFF2338 :                     ; 		add.w	#$40,obj_y_spd(a6)
(1)  467/FFFFFFFFFFFF2338 :                     ; .no_fallspd:
(1)  468/FFFFFFFFFFFF2338 :                     ;
(1)  469/FFFFFFFFFFFF2338 :                     ; ; .fake_col_c:
(1)  470/FFFFFFFFFFFF2338 :                     ; 		move.w	on_press(a3),d7
(1)  471/FFFFFFFFFFFF2338 :                     ; 		btst	#bitJoyC,d7
(1)  472/FFFFFFFFFFFF2338 :                     ; 		beq.s	.fake_jump
(1)  473/FFFFFFFFFFFF2338 :                     ; 		btst	#0,obj_status(a6)
(1)  474/FFFFFFFFFFFF2338 :                     ; 		bne.s	.fake_jump
(1)  475/FFFFFFFFFFFF2338 :                     ; 		move.w	#-$500,obj_y_spd(a6)
(1)  476/FFFFFFFFFFFF2338 :                     ; 		move.b	#2,obj_anim_id(a6)
(1)  477/FFFFFFFFFFFF2338 :                     ; 		bset	#0,obj_status(a6)
(1)  478/FFFFFFFFFFFF2338 :                     ;
(1)  479/FFFFFFFFFFFF2338 :                     ; 		moveq	#$0F,d0
(1)  480/FFFFFFFFFFFF2338 :                     ; 		moveq	#1,d1
(1)  481/FFFFFFFFFFFF2338 :                     ; 		bsr	gemaPlayFromBlk
(1)  482/FFFFFFFFFFFF2338 :                     ;
(1)  483/FFFFFFFFFFFF2338 :                     ; .fake_jump:
(1)  484/FFFFFFFFFFFF2338 :                     ; 		move.w	on_press(a3),d7
(1)  485/FFFFFFFFFFFF2338 :                     ; 		btst	#bitJoyB,d7
(1)  486/FFFFFFFFFFFF2338 :                     ; 		beq.s	.no_slash
(1)  487/FFFFFFFFFFFF2338 :                     ; 		tst.w	obj_y_spd(a6)
(1)  488/FFFFFFFFFFFF2338 :                     ; 		bne.s	.no_slash
(1)  489/FFFFFFFFFFFF2338 :                     ; 		clr.w	obj_anim_indx(a6)
(1)  490/FFFFFFFFFFFF2338 :                     ; 		move.b	#4,obj_anim_id(a6)
(1)  491/FFFFFFFFFFFF2338 :                     ; 		move.w	#$10,obj_ram+2(a6)
(1)  492/FFFFFFFFFFFF2338 :                     ;
(1)  493/FFFFFFFFFFFF2338 :                     ; 		moveq	#$0F,d0
(1)  494/FFFFFFFFFFFF2338 :                     ; 		moveq	#0,d1
(1)  495/FFFFFFFFFFFF2338 :                     ; 		bsr	gemaPlayFromBlk
(1)  496/FFFFFFFFFFFF2338 :                     ;
(1)  497/FFFFFFFFFFFF2338 :                     ; .no_slash:
(1)  498/FFFFFFFFFFFF2338 :                     ; 		clr.w	obj_x_spd(a6)
(1)  499/FFFFFFFFFFFF2338 :                     ;
(1)  500/FFFFFFFFFFFF2338 :                     ; 		moveq	#0,d0
(1)  501/FFFFFFFFFFFF2338 :                     ; 		moveq	#0,d1
(1)  502/FFFFFFFFFFFF2338 :                     ; 		move.w	on_hold(a3),d7
(1)  503/FFFFFFFFFFFF2338 :                     ; 		move.w	d7,d6
(1)  504/FFFFFFFFFFFF2338 :                     ; 		andi.w	#JoyLeft+JoyRight,d6
(1)  505/FFFFFFFFFFFF2338 :                     ; 		beq.s	.move_mika
(1)  506/FFFFFFFFFFFF2338 :                     ; 		clr.w	obj_ram+2(a6)
(1)  507/FFFFFFFFFFFF2338 :                     ; 		move.w	#$180,d6
(1)  508/FFFFFFFFFFFF2338 :                     ; 		btst	#bitJoyRight,d7
(1)  509/FFFFFFFFFFFF2338 :                     ; 		beq.s	.no_l
(1)  510/FFFFFFFFFFFF2338 :                     ; 		move.w	d6,obj_x_spd(a6)
(1)  511/FFFFFFFFFFFF2338 :                     ; .no_l
(1)  512/FFFFFFFFFFFF2338 :                     ; 		neg.w	d6
(1)  513/FFFFFFFFFFFF2338 :                     ; 		btst	#bitJoyLeft,d7
(1)  514/FFFFFFFFFFFF2338 :                     ; 		beq.s	.move_mika
(1)  515/FFFFFFFFFFFF2338 :                     ; 		move.w	d6,obj_x_spd(a6)
(1)  516/FFFFFFFFFFFF2338 :                     ; .move_mika:
(1)  517/FFFFFFFFFFFF2338 :                     ;
(1)  518/FFFFFFFFFFFF2338 :                     ;
(1)  519/FFFFFFFFFFFF2338 :                     ; 		moveq	#0,d6
(1)  520/FFFFFFFFFFFF2338 :                     ; 		tst.w	obj_x_spd(a6)
(1)  521/FFFFFFFFFFFF2338 :                     ; 		beq.s	.r_spd
(1)  522/FFFFFFFFFFFF2338 :                     ; 		moveq	#1,d6
(1)  523/FFFFFFFFFFFF2338 :                     ; 		move.b	obj_set(a6),d7
(1)  524/FFFFFFFFFFFF2338 :                     ; 		bclr	#bitobj_flipH,d7
(1)  525/FFFFFFFFFFFF2338 :                     ; 		tst.w	obj_x_spd(a6)
(1)  526/FFFFFFFFFFFF2338 :                     ; 		bpl.s	.r_flip
(1)  527/FFFFFFFFFFFF2338 :                     ; 		bset	#bitobj_flipH,d7
(1)  528/FFFFFFFFFFFF2338 :                     ; .r_flip:
(1)  529/FFFFFFFFFFFF2338 :                     ; 		move.b	d7,obj_set(a6)
(1)  530/FFFFFFFFFFFF2338 :                     ; .r_spd:
(1)  531/FFFFFFFFFFFF2338 :                     ;
(1)  532/FFFFFFFFFFFF2338 :                     ; 		tst.w	obj_ram+2(a6)
(1)  533/FFFFFFFFFFFF2338 :                     ; 		beq.s	.free_anim
(1)  534/FFFFFFFFFFFF2338 :                     ; 		subi.w	#1,obj_ram+2(a6)
(1)  535/FFFFFFFFFFFF2338 :                     ; 		bne.s	.no_anim
(1)  536/FFFFFFFFFFFF2338 :                     ; .free_anim:
(1)  537/FFFFFFFFFFFF2338 :                     ; 		btst	#0,obj_status(a6)
(1)  538/FFFFFFFFFFFF2338 :                     ; 		bne.s	.no_anim
(1)  539/FFFFFFFFFFFF2338 :                     ; 		tst.w	obj_y_spd(a6)
(1)  540/FFFFFFFFFFFF2338 :                     ; 		bmi.s	.is_jumpin
(1)  541/FFFFFFFFFFFF2338 :                     ; 		move.b	d6,obj_anim_id(a6)
(1)  542/FFFFFFFFFFFF2338 :                     ; .is_jumpin:
(1)  543/FFFFFFFFFFFF2338 :                     ; 		tst.w	obj_y_spd(a6)
(1)  544/FFFFFFFFFFFF2338 :                     ; 		beq.s	.no_anim
(1)  545/FFFFFFFFFFFF2338 :                     ; 		move.b	#3,obj_anim_id(a6)
(1)  546/FFFFFFFFFFFF2338 :                     ; .no_anim:
(1)  547/FFFFFFFFFFFF2338 :                     ; 		bsr	object_Speed
(1)  548/FFFFFFFFFFFF2338 :                     ;
(1)  549/FFFFFFFFFFFF2338 :                     ; 		move.w	#(224-16)-32,d7
(1)  550/FFFFFFFFFFFF2338 :                     ; 		move.w	obj_y(a6),d0
(1)  551/FFFFFFFFFFFF2338 :                     ; 		cmp.w	d7,d0
(1)  552/FFFFFFFFFFFF2338 :                     ; 		blt.s	.fake_col
(1)  553/FFFFFFFFFFFF2338 :                     ; 		clr.w	obj_y_spd(a6)
(1)  554/FFFFFFFFFFFF2338 :                     ; 		andi.w	#-$10,obj_y(a6)
(1)  555/FFFFFFFFFFFF2338 :                     ; 		bclr	#0,obj_status(a6)
(1)  556/FFFFFFFFFFFF2338 :                     ; .fake_col:
(1)  557/FFFFFFFFFFFF2338 :                     ;
(1)  558/FFFFFFFFFFFF2338 :                     ; ; 		move.w	(Controller_2+on_press),d7
(1)  559/FFFFFFFFFFFF2338 :                     ; ; 		btst	#bitClickM,d7
(1)  560/FFFFFFFFFFFF2338 :                     ; ; 		beq.s	.no_reset
(1)  561/FFFFFFFFFFFF2338 :                     ; ; 		move.w	#320/2,obj_x(a6)
(1)  562/FFFFFFFFFFFF2338 :                     ; ; 		move.w	#224/2,obj_y(a6)
(1)  563/FFFFFFFFFFFF2338 :                     ; ; .no_reset:
(1)  564/FFFFFFFFFFFF2338 :                     ; 		lea	.anim_data(pc),a0
(1)  565/FFFFFFFFFFFF2338 :                     ; 		bsr	object_Animate
(1)  566/FFFFFFFFFFFF2338 :                     ; 		bra	object_Display
(1)  567/FFFFFFFFFFFF2338 :                     ;
(1)  568/FFFFFFFFFFFF2338 :                     ; ; ----------------------------------------------
(1)  569/FFFFFFFFFFFF2338 :                     ;
(1)  570/FFFFFFFFFFFF2338 :                     ; .anim_data:
(1)  571/FFFFFFFFFFFF2338 :                     ; 		dc.w .anim_stand-.anim_data
(1)  572/FFFFFFFFFFFF2338 :                     ; 		dc.w .anim_move-.anim_data
(1)  573/FFFFFFFFFFFF2338 :                     ; 		dc.w .anim_jump-.anim_data
(1)  574/FFFFFFFFFFFF2338 :                     ; 		dc.w .anim_fall-.anim_data
(1)  575/FFFFFFFFFFFF2338 :                     ; 		dc.w .anim_slash-.anim_data
(1)  576/FFFFFFFFFFFF2338 :                     ; .anim_stand:
(1)  577/FFFFFFFFFFFF2338 :                     ; 		dc.w 6
(1)  578/FFFFFFFFFFFF2338 :                     ; 		dc.w 0,-1
(1)  579/FFFFFFFFFFFF2338 :                     ; 		align 2
(1)  580/FFFFFFFFFFFF2338 :                     ; .anim_move:
(1)  581/FFFFFFFFFFFF2338 :                     ; 		dc.w 5
(1)  582/FFFFFFFFFFFF2338 :                     ; 		dc.w 2,3,4,5,6,7,8,-3,1
(1)  583/FFFFFFFFFFFF2338 :                     ; 		align 2
(1)  584/FFFFFFFFFFFF2338 :                     ; .anim_jump:
(1)  585/FFFFFFFFFFFF2338 :                     ; 		dc.w 5
(1)  586/FFFFFFFFFFFF2338 :                     ; 		dc.w 10,11,12,-3,2
(1)  587/FFFFFFFFFFFF2338 :                     ; 		align 2
(1)  588/FFFFFFFFFFFF2338 :                     ; .anim_fall:
(1)  589/FFFFFFFFFFFF2338 :                     ; 		dc.w 5
(1)  590/FFFFFFFFFFFF2338 :                     ; 		dc.w 11,12,-3,1
(1)  591/FFFFFFFFFFFF2338 :                     ; 		align 2
(1)  592/FFFFFFFFFFFF2338 :                     ; .anim_slash:
(1)  593/FFFFFFFFFFFF2338 :                     ; 		dc.w 1
(1)  594/FFFFFFFFFFFF2338 :                     ; 		dc.w 14,15,16,17,-2
(1)  595/FFFFFFFFFFFF2338 :                     ; 		align 2
(1)  596/FFFFFFFFFFFF2338 :                     ;
(1)  597/FFFFFFFFFFFF2338 :                     ; --------------------------------------------------
(1)  598/FFFFFFFFFFFF2338 :                     ; Sisi
(1)  599/FFFFFFFFFFFF2338 :                     ; --------------------------------------------------
(1)  600/FFFFFFFFFFFF2338 :                     
(1)  601/FFFFFFFFFFFF2338 :                     Object_Sisi:
(1)  602/FFFFFFFFFFFF2338 : 7000                		moveq	#0,d0
(1)  603/FFFFFFFFFFFF233A : 102E 0021           		move.b	obj_index(a6),d0
(1)  604/FFFFFFFFFFFF233E : D040                		add.w	d0,d0
(1)  605/FFFFFFFFFFFF2340 : 323B 0006           		move.w	.list(pc,d0.w),d1
(1)  606/FFFFFFFFFFFF2344 : 4EFB 1002           		jmp	.list(pc,d1.w)
(1)  607/FFFFFFFFFFFF2348 :                     ; ----------------------------------------------
(1)  608/FFFFFFFFFFFF2348 : 0004                .list:		dc.w .init-.list
(1)  609/FFFFFFFFFFFF234A : 0020                		dc.w .main-.list
(1)  610/FFFFFFFFFFFF234C :                     ; ----------------------------------------------
(1)  611/FFFFFFFFFFFF234C :                     .init:
(1)  612/FFFFFFFFFFFF234C : 1D7C 0001 0021      		move.b	#1,obj_index(a6)
(1)  613/FFFFFFFFFFFF2352 : 2D7C 0020 1E38      		move.l	#objMap_Sisi,obj_map(a6)
         FFFFFFFFFFFF2358 : 000C             
(1)  614/FFFFFFFFFFFF235A : 3D7C 2480 0014      		move.w	#setVram_Sisi|$2000,obj_vram(a6)
(1)  615/FFFFFFFFFFFF2360 :                     ; 		move.w	#320/2,obj_x(a6)
(1)  616/FFFFFFFFFFFF2360 :                     ; 		move.w	#224/2,obj_y(a6)
(1)  617/FFFFFFFFFFFF2360 : 426E 001C           		clr.w	obj_frame(a6)
(1)  618/FFFFFFFFFFFF2364 : 6100 ED6A           		bsr	object_ResetAnim
(1)  619/FFFFFFFFFFFF2368 :                     
(1)  620/FFFFFFFFFFFF2368 :                     ; ----------------------------------------------
(1)  621/FFFFFFFFFFFF2368 :                     .main:
(1)  622/FFFFFFFFFFFF2368 :                     ; 		move.w	obj_ram(a6),d0
(1)  623/FFFFFFFFFFFF2368 :                     ; 		move.w	obj_ram+2(a6),d1
(1)  624/FFFFFFFFFFFF2368 :                     
(1)  625/FFFFFFFFFFFF2368 :                     
(1)  626/FFFFFFFFFFFF2368 : 7000                		moveq	#0,d0
(1)  627/FFFFFFFFFFFF236A :                     
(1)  628/FFFFFFFFFFFF236A : 3238 D404           		move.w	(RAM_CurrPick).w,d1
(1)  629/FFFFFFFFFFFF236E : E749                		lsl.w	#3,d1
(1)  630/FFFFFFFFFFFF2370 :                     
(1)  631/FFFFFFFFFFFF2370 : 0640 0018           		addi.w	#$18,d0
(1)  632/FFFFFFFFFFFF2374 : 0641 0020           		addi.w	#$20,d1
(1)  633/FFFFFFFFFFFF2378 : 3D40 0004           		move.w	d0,obj_x(a6)
(1)  634/FFFFFFFFFFFF237C : 3D41 0008           		move.w	d1,obj_y(a6)
(1)  635/FFFFFFFFFFFF2380 :                     
(1)  636/FFFFFFFFFFFF2380 :                     ; 		lea	(RAM_Objects),a0
(1)  637/FFFFFFFFFFFF2380 :                     ; 		cmp.l	#Object_Mikami,obj_code(a0)
(1)  638/FFFFFFFFFFFF2380 :                     ; 		bne.s	.dont_link
(1)  639/FFFFFFFFFFFF2380 :                     ; 		move.w	obj_ram+2(a6),d7
(1)  640/FFFFFFFFFFFF2380 :                     ; 		cmp.w	#24<<1,d7
(1)  641/FFFFFFFFFFFF2380 :                     ; 		bge.s	.dont_incr
(1)  642/FFFFFFFFFFFF2380 :                     ; 		add.w	#2,d7
(1)  643/FFFFFFFFFFFF2380 :                     ; .dont_incr:
(1)  644/FFFFFFFFFFFF2380 :                     ; 		move.w	d7,obj_ram+2(a6)
(1)  645/FFFFFFFFFFFF2380 :                     ;
(1)  646/FFFFFFFFFFFF2380 :                     ; 		move.w	obj_x(a0),d7
(1)  647/FFFFFFFFFFFF2380 :                     ; 		move.w	obj_y(a0),d6
(1)  648/FFFFFFFFFFFF2380 :                     ; 		move.w	#24,d5
(1)  649/FFFFFFFFFFFF2380 :                     ; 		sub.w	d5,d6
(1)  650/FFFFFFFFFFFF2380 :                     ; 		move.w	obj_ram(a6),d0
(1)  651/FFFFFFFFFFFF2380 :                     ; 		moveq	#4,d1
(1)  652/FFFFFFFFFFFF2380 :                     ; 		bsr	System_SineWave
(1)  653/FFFFFFFFFFFF2380 :                     ; 		asr.w	#8,d2
(1)  654/FFFFFFFFFFFF2380 :                     ; 		add.w	d2,d6
(1)  655/FFFFFFFFFFFF2380 :                     ; 		moveq	#5,d1
(1)  656/FFFFFFFFFFFF2380 :                     ; 		bsr	System_SineWave_Cos
(1)  657/FFFFFFFFFFFF2380 :                     ; 		asr.w	#8,d2
(1)  658/FFFFFFFFFFFF2380 :                     ; 		add.w	d2,d7
(1)  659/FFFFFFFFFFFF2380 :                     ;
(1)  660/FFFFFFFFFFFF2380 :                     ; 		move.b	obj_set(a6),d0
(1)  661/FFFFFFFFFFFF2380 :                     ; 		move.b	obj_set(a0),d1
(1)  662/FFFFFFFFFFFF2380 :                     ; 		eor.w	d1,d0
(1)  663/FFFFFFFFFFFF2380 :                     ; 		andi.w	#1,d0
(1)  664/FFFFFFFFFFFF2380 :                     ; 		beq.s	.same_h
(1)  665/FFFFFFFFFFFF2380 :                     ; 		clr.w	obj_ram+2(a6)
(1)  666/FFFFFFFFFFFF2380 :                     ; .same_h:
(1)  667/FFFFFFFFFFFF2380 :                     ; 		move.w	obj_ram+2(a6),d4
(1)  668/FFFFFFFFFFFF2380 :                     ; 		bclr	#bitobj_flipH,obj_set(a6)
(1)  669/FFFFFFFFFFFF2380 :                     ; 		btst	#bitobj_flipH,obj_set(a0)
(1)  670/FFFFFFFFFFFF2380 :                     ; 		beq.s	.dont_flipx
(1)  671/FFFFFFFFFFFF2380 :                     ; 		neg.w	d4
(1)  672/FFFFFFFFFFFF2380 :                     ; 		bset	#bitobj_flipH,obj_set(a6)
(1)  673/FFFFFFFFFFFF2380 :                     ; .dont_flipx:
(1)  674/FFFFFFFFFFFF2380 :                     ; 		lsr.w	#1,d4
(1)  675/FFFFFFFFFFFF2380 :                     ; 		add.w	d4,d7
(1)  676/FFFFFFFFFFFF2380 :                     ; 		move.w	d6,obj_y(a6)
(1)  677/FFFFFFFFFFFF2380 :                     ; 		move.w	d7,obj_x(a6)
(1)  678/FFFFFFFFFFFF2380 :                     ; 		add.w	#4,obj_ram(a6)
(1)  679/FFFFFFFFFFFF2380 :                     
(1)  680/FFFFFFFFFFFF2380 :                     .dont_link:
(1)  681/FFFFFFFFFFFF2380 : 41FA 000A           		lea	.anim_data(pc),a0
(1)  682/FFFFFFFFFFFF2384 : 6100 ECB6           		bsr	object_Animate
(1)  683/FFFFFFFFFFFF2388 : 6000 EC06           		bra	object_Display
(1)  684/FFFFFFFFFFFF238C :                     
(1)  685/FFFFFFFFFFFF238C :                     ; ----------------------------------------------
(1)  686/FFFFFFFFFFFF238C :                     
(1)  687/FFFFFFFFFFFF238C :                     .anim_data:
(1)  688/FFFFFFFFFFFF238C : 0008                		dc.w .anim_00-.anim_data
(1)  689/FFFFFFFFFFFF238E : 0008                		dc.w .anim_00-.anim_data
(1)  690/FFFFFFFFFFFF2390 : 0008                		dc.w .anim_00-.anim_data
(1)  691/FFFFFFFFFFFF2392 : 0008                		dc.w .anim_00-.anim_data
(1)  692/FFFFFFFFFFFF2394 :                     .anim_00:
(1)  693/FFFFFFFFFFFF2394 : 0008                		dc.w 8
(1)  694/FFFFFFFFFFFF2396 : 0000 0001 0002      		dc.w 0,1,2,1
         FFFFFFFFFFFF239C : 0001             
(1)  695/FFFFFFFFFFFF239E : FFFE                		dc.w -2
(1)  696/FFFFFFFFFFFF23A0 :                     		align 2
(1)  697/FFFFFFFFFFFF23A2 :                     ;
(1)  698/FFFFFFFFFFFF23A2 :                     ; ; --------------------------------------------------
(1)  699/FFFFFFFFFFFF23A2 :                     ; ; Ball
(1)  700/FFFFFFFFFFFF23A2 :                     ; ; --------------------------------------------------
(1)  701/FFFFFFFFFFFF23A2 :                     ;
(1)  702/FFFFFFFFFFFF23A2 :                     ; Object_ball:
(1)  703/FFFFFFFFFFFF23A2 :                     ; 		moveq	#0,d0
(1)  704/FFFFFFFFFFFF23A2 :                     ; 		move.b	obj_index(a6),d0
(1)  705/FFFFFFFFFFFF23A2 :                     ; 		add.w	d0,d0
(1)  706/FFFFFFFFFFFF23A2 :                     ; 		move.w	.list(pc,d0.w),d1
(1)  707/FFFFFFFFFFFF23A2 :                     ; 		jmp	.list(pc,d1.w)
(1)  708/FFFFFFFFFFFF23A2 :                     ; ; ----------------------------------------------
(1)  709/FFFFFFFFFFFF23A2 :                     ; .list:		dc.w .init-.list
(1)  710/FFFFFFFFFFFF23A2 :                     ; 		dc.w .main-.list
(1)  711/FFFFFFFFFFFF23A2 :                     ; ; ----------------------------------------------
(1)  712/FFFFFFFFFFFF23A2 :                     ; .init:
(1)  713/FFFFFFFFFFFF23A2 :                     ; 		move.b	#1,obj_index(a6)
(1)  714/FFFFFFFFFFFF23A2 :                     ; 		move.l	#objMap_Sisi,obj_map(a6)
(1)  715/FFFFFFFFFFFF23A2 :                     ; 		move.l	#0,obj_dma(a6)
(1)  716/FFFFFFFFFFFF23A2 :                     ; 		move.w	#setVram_Sisi|$0000,obj_vram(a6)
(1)  717/FFFFFFFFFFFF23A2 :                     ; 		bclr	#bitobj_Mars,obj_set(a6)	; Genesis object
(1)  718/FFFFFFFFFFFF23A2 :                     ; 		move.w	#320/2,obj_x(a6)
(1)  719/FFFFFFFFFFFF23A2 :                     ; 		move.w	#224/2,obj_y(a6)
(1)  720/FFFFFFFFFFFF23A2 :                     ; 		clr.w	obj_frame(a6)
(1)  721/FFFFFFFFFFFF23A2 :                     ; 		bsr	object_ResetAnim
(1)  722/FFFFFFFFFFFF23A2 :                     ;
(1)  723/FFFFFFFFFFFF23A2 :                     ; 		move.w	#$180,obj_x_spd(a6)
(1)  724/FFFFFFFFFFFF23A2 :                     ; 		move.w	#$180,obj_y_spd(a6)
(1)  725/FFFFFFFFFFFF23A2 :                     ;
(1)  726/FFFFFFFFFFFF23A2 :                     ; ; ----------------------------------------------
(1)  727/FFFFFFFFFFFF23A2 :                     ; .main:
(1)  728/FFFFFFFFFFFF23A2 :                     ; 		move.w	obj_x(a6),d0
(1)  729/FFFFFFFFFFFF23A2 :                     ; 		move.w	obj_y(a6),d1
(1)  730/FFFFFFFFFFFF23A2 :                     ; 		sub.w	#16,d0
(1)  731/FFFFFFFFFFFF23A2 :                     ; 		sub.w	#16,d1
(1)  732/FFFFFFFFFFFF23A2 :                     ; 		move.w	#320-32,d2
(1)  733/FFFFFFFFFFFF23A2 :                     ; 		move.w	#(224-16)-32,d3
(1)  734/FFFFFFFFFFFF23A2 :                     ;
(1)  735/FFFFFFFFFFFF23A2 :                     ; 		tst.w	d1
(1)  736/FFFFFFFFFFFF23A2 :                     ; 		bpl.s	.on_scrn_yu
(1)  737/FFFFFFFFFFFF23A2 :                     ; 		neg.w	obj_y_spd(a6)
(1)  738/FFFFFFFFFFFF23A2 :                     ; 		bsr	.playit
(1)  739/FFFFFFFFFFFF23A2 :                     ; .on_scrn_yu:
(1)  740/FFFFFFFFFFFF23A2 :                     ; 		cmp.w	d3,d1
(1)  741/FFFFFFFFFFFF23A2 :                     ; 		blt.s	.on_scrn_yd
(1)  742/FFFFFFFFFFFF23A2 :                     ; 		neg.w	obj_y_spd(a6)
(1)  743/FFFFFFFFFFFF23A2 :                     ; 		bsr	.playit
(1)  744/FFFFFFFFFFFF23A2 :                     ; .on_scrn_yd:
(1)  745/FFFFFFFFFFFF23A2 :                     ;
(1)  746/FFFFFFFFFFFF23A2 :                     ; 		tst.w	d0
(1)  747/FFFFFFFFFFFF23A2 :                     ; 		bpl.s	.on_scrn_xu
(1)  748/FFFFFFFFFFFF23A2 :                     ; 		neg.w	obj_x_spd(a6)
(1)  749/FFFFFFFFFFFF23A2 :                     ; 		bsr.s	.playit
(1)  750/FFFFFFFFFFFF23A2 :                     ; .on_scrn_xu:
(1)  751/FFFFFFFFFFFF23A2 :                     ; 		cmp.w	d2,d0
(1)  752/FFFFFFFFFFFF23A2 :                     ; 		blt.s	.on_scrn_xd
(1)  753/FFFFFFFFFFFF23A2 :                     ; 		neg.w	obj_x_spd(a6)
(1)  754/FFFFFFFFFFFF23A2 :                     ; 		bsr.s	.playit
(1)  755/FFFFFFFFFFFF23A2 :                     ; .on_scrn_xd:
(1)  756/FFFFFFFFFFFF23A2 :                     ;
(1)  757/FFFFFFFFFFFF23A2 :                     ; 		bsr	object_Speed
(1)  758/FFFFFFFFFFFF23A2 :                     ;
(1)  759/FFFFFFFFFFFF23A2 :                     ; 		lea	.anim_data(pc),a0
(1)  760/FFFFFFFFFFFF23A2 :                     ; 		bsr	object_Animate
(1)  761/FFFFFFFFFFFF23A2 :                     ; 		bra	object_Display
(1)  762/FFFFFFFFFFFF23A2 :                     ; .playit:
(1)  763/FFFFFFFFFFFF23A2 :                     ; 		moveq	#$0F,d0
(1)  764/FFFFFFFFFFFF23A2 :                     ; 		moveq	#2,d1
(1)  765/FFFFFFFFFFFF23A2 :                     ; 		bra	gemaPlayFromBlk
(1)  766/FFFFFFFFFFFF23A2 :                     ;
(1)  767/FFFFFFFFFFFF23A2 :                     ; ; ----------------------------------------------
(1)  768/FFFFFFFFFFFF23A2 :                     ;
(1)  769/FFFFFFFFFFFF23A2 :                     ; .anim_data:
(1)  770/FFFFFFFFFFFF23A2 :                     ; 		dc.w .anim_00-.anim_data
(1)  771/FFFFFFFFFFFF23A2 :                     ; 		dc.w .anim_00-.anim_data
(1)  772/FFFFFFFFFFFF23A2 :                     ; 		dc.w .anim_00-.anim_data
(1)  773/FFFFFFFFFFFF23A2 :                     ; 		dc.w .anim_00-.anim_data
(1)  774/FFFFFFFFFFFF23A2 :                     ; .anim_00:
(1)  775/FFFFFFFFFFFF23A2 :                     ; 		dc.w 8
(1)  776/FFFFFFFFFFFF23A2 :                     ; 		dc.w 0,1,2,1,-1
(1)  777/FFFFFFFFFFFF23A2 :                     ; 		align 2
(1)  778/FFFFFFFFFFFF23A2 :                     
(1)  779/FFFFFFFFFFFF23A2 :                     ; ====================================================================
(1)  780/FFFFFFFFFFFF23A2 :                     ; ------------------------------------------------------
(1)  781/FFFFFFFFFFFF23A2 :                     ; Subroutines
(1)  782/FFFFFFFFFFFF23A2 :                     ; ------------------------------------------------------
(1)  783/FFFFFFFFFFFF23A2 :                     
(1)  784/FFFFFFFFFFFF23A2 :                     ; ====================================================================
(1)  785/FFFFFFFFFFFF23A2 :                     ; ------------------------------------------------------
(1)  786/FFFFFFFFFFFF23A2 :                     ; Custom VBlank
(1)  787/FFFFFFFFFFFF23A2 :                     ; ------------------------------------------------------
(1)  788/FFFFFFFFFFFF23A2 :                     
(1)  789/FFFFFFFFFFFF23A2 :                     ; ------------------------------------------------------
(1)  790/FFFFFFFFFFFF23A2 :                     ; Custom HBlank
(1)  791/FFFFFFFFFFFF23A2 :                     ; ------------------------------------------------------
(1)  792/FFFFFFFFFFFF23A2 :                     
(1)  793/FFFFFFFFFFFF23A2 :                     ; ====================================================================
(1)  794/FFFFFFFFFFFF23A2 :                     ; ------------------------------------------------------
(1)  795/FFFFFFFFFFFF23A2 :                     ; Small DATA section
(1)  796/FFFFFFFFFFFF23A2 :                     ; ------------------------------------------------------
(1)  797/FFFFFFFFFFFF23A2 :                     
(1)  798/FFFFFFFFFFFF23A2 :                     PAL_TEST:
(1)  799/FFFFFFFFFFFF23A2 :                     		binclude "game/screen_1/data/md/maps/test/md_pal.bin"
(1)  800/FFFFFFFFFFFF23BE :                     		align 2
(1)  801/FFFFFFFFFFFF23C0 :                     
(1)  802/FFFFFFFFFFFF23C0 :                     ; str_ShowPsg:	dc.b "\\w \\w \\w \\w",0
(1)  803/FFFFFFFFFFFF23C0 :                     ; 		dc.l RAM_ChnlLinks,RAM_ChnlLinks+2,RAM_ChnlLinks+4,RAM_ChnlLinks+6
(1)  804/FFFFFFFFFFFF23C0 :                     ; 		align 2
(1)  805/FFFFFFFFFFFF23C0 :                     ; str_ShowFm:	dc.b "\\w \\w \\w \\w \\w \\w",0
(1)  806/FFFFFFFFFFFF23C0 :                     ; 		dc.l RAM_ChnlLinks+8,RAM_ChnlLinks+10,RAM_ChnlLinks+12
(1)  807/FFFFFFFFFFFF23C0 :                     ; 		dc.l RAM_ChnlLinks+14,RAM_ChnlLinks+16,RAM_ChnlLinks+18
(1)  808/FFFFFFFFFFFF23C0 :                     ; 		align 2
(1)  809/FFFFFFFFFFFF23C0 :                     ; str_ShowPcm:	dc.b "\\w \\w \\w \\w",$0A
(1)  810/FFFFFFFFFFFF23C0 :                     ; 		dc.b "\\w \\w \\w \\w",0
(1)  811/FFFFFFFFFFFF23C0 :                     ; 		dc.l RAM_ChnlLinks+20,RAM_ChnlLinks+22,RAM_ChnlLinks+24,RAM_ChnlLinks+26
(1)  812/FFFFFFFFFFFF23C0 :                     ; 		dc.l RAM_ChnlLinks+28,RAM_ChnlLinks+30,RAM_ChnlLinks+32,RAM_ChnlLinks+34
(1)  813/FFFFFFFFFFFF23C0 :                     ; 		align 2
(1)  814/FFFFFFFFFFFF23C0 :                     ; str_ShowPwm:	dc.b "\\w \\w \\w \\w",$0A
(1)  815/FFFFFFFFFFFF23C0 :                     ; 		dc.b "\\w \\w \\w",0
(1)  816/FFFFFFFFFFFF23C0 :                     ; 		dc.l RAM_ChnlLinks+36,RAM_ChnlLinks+38,RAM_ChnlLinks+40,RAM_ChnlLinks+42
(1)  817/FFFFFFFFFFFF23C0 :                     ; 		dc.l RAM_ChnlLinks+44,RAM_ChnlLinks+46,RAM_ChnlLinks+48,RAM_ChnlLinks+50
(1)  818/FFFFFFFFFFFF23C0 :                     ; 		align 2
(1)  819/FFFFFFFFFFFF23C0 :                     
(1)  820/FFFFFFFFFFFF23C0 :                     str_TesterInit:
(1)  821/FFFFFFFFFFFF23C0 : 4745 4D41 2F4E      		dc.b "GEMA/Nikona sound driver tester",$0A
         FFFFFFFFFFFF23C6 : 696B 6F6E 6120 
         FFFFFFFFFFFF23CC : 736F 756E 6420 
         FFFFFFFFFFFF23D2 : 6472 6976 6572 
         FFFFFFFFFFFF23D8 : 2074 6573 7465 
         FFFFFFFFFFFF23DE : 720A             
(1)  822/FFFFFFFFFFFF23E0 : 2020 2020 2020      		dc.b "                \{DATE} \{TIME}",$0A
         FFFFFFFFFFFF23E6 : 2020 2020 2020 
         FFFFFFFFFFFF23EC : 2020 2020 3033 
         FFFFFFFFFFFF23F2 : 2F32 362F 3230 
         FFFFFFFFFFFF23F8 : 3234 2030 343A 
         FFFFFFFFFFFF23FE : 3537 3A34 3220 
         FFFFFFFFFFFF2404 : 414D 0A          
(1)  823/FFFFFFFFFFFF2407 : 0A                  		dc.b $0A
(1)  824/FFFFFFFFFFFF2408 : 2020 2020 6765      		dc.b "    gemaTest          (A)  (B)  (C)",$0A
         FFFFFFFFFFFF240E : 6D61 5465 7374 
         FFFFFFFFFFFF2414 : 2020 2020 2020 
         FFFFFFFFFFFF241A : 2020 2020 2841 
         FFFFFFFFFFFF2420 : 2920 2028 4229 
         FFFFFFFFFFFF2426 : 2020 2843 290A    
(1)  825/FFFFFFFFFFFF242C : 2020 2020 6765      		dc.b "    gemaPlayTrack",$0A
         FFFFFFFFFFFF2432 : 6D61 506C 6179 
         FFFFFFFFFFFF2438 : 5472 6163 6B0A    
(1)  826/FFFFFFFFFFFF243E : 2020 2020 6765      		dc.b "    gemaStopTrack",$0A
         FFFFFFFFFFFF2444 : 6D61 5374 6F70 
         FFFFFFFFFFFF244A : 5472 6163 6B0A    
(1)  827/FFFFFFFFFFFF2450 : 2020 2020 6765      		dc.b "    gemaFadeTrack",$0A
         FFFFFFFFFFFF2456 : 6D61 4661 6465 
         FFFFFFFFFFFF245C : 5472 6163 6B0A    
(1)  828/FFFFFFFFFFFF2462 : 2020 2020 6765      		dc.b "    gemaSetTrackVol",$0A
         FFFFFFFFFFFF2468 : 6D61 5365 7454 
         FFFFFFFFFFFF246E : 7261 636B 566F 
         FFFFFFFFFFFF2474 : 6C0A             
(1)  829/FFFFFFFFFFFF2476 : 2020 2020 6765      		dc.b "    gemaStopAll",$0A
         FFFFFFFFFFFF247C : 6D61 5374 6F70 
         FFFFFFFFFFFF2482 : 416C 6C0A          
(1)  830/FFFFFFFFFFFF2486 : 2020 2020 6765      		dc.b "    gemaSetBeats",$0A
         FFFFFFFFFFFF248C : 6D61 5365 7442 
         FFFFFFFFFFFF2492 : 6561 7473 0A       
(1)  831/FFFFFFFFFFFF2497 : 2020 2020 2D2D      		dc.b "    --> EXIT"
         FFFFFFFFFFFF249D : 3E20 4558 4954    
(1)  832/FFFFFFFFFFFF24A3 : 00                  		dc.b 0
(1)  833/FFFFFFFFFFFF24A4 :                     		align 2
(1)  834/FFFFFFFFFFFF24A6 : 5C77 205C 7720      str_ShowMe:	dc.b "\\w \\w \\w",$A,$A
         FFFFFFFFFFFF24AC : 5C77 0A0A          
(1)  835/FFFFFFFFFFFF24B0 : 5C77 205C 7720      		dc.b "\\w \\w \\w",$A,$A,$A
         FFFFFFFFFFFF24B6 : 5C77 0A0A 0A       
(1)  836/FFFFFFFFFFFF24BB : 5C77 00             		dc.b "\\w",0
(1)  837/FFFFFFFFFFFF24BE : FFFF D406 FFFF      		dc.l RAM_GemaArg0,RAM_GemaArg1,RAM_GemaArg2
         FFFFFFFFFFFF24C4 : D408 FFFF D40A    
(1)  838/FFFFFFFFFFFF24CA : FFFF D40C FFFF      		dc.l RAM_GemaArg3,RAM_GemaArg4,RAM_GemaArg5
         FFFFFFFFFFFF24D0 : D40E FFFF D410    
(1)  839/FFFFFFFFFFFF24D6 : FFFF D412           		dc.l RAM_GemaArg6
(1)  840/FFFFFFFFFFFF24DA :                     		align 2
(1)  841/FFFFFFFFFFFF24DC :                     str_Info:
(1)  842/FFFFFFFFFFFF24DC : 5C6C 00             		dc.b "\\l",0
(1)  843/FFFFFFFFFFFF24DF : FFFF B8D4           		dc.l RAM_Framecount
(1)  844/FFFFFFFFFFFF24E3 :                     		align 2
(1)  845/FFFFFFFFFFFF24E4 :                     ; str_Notes:
(1)  846/FFFFFFFFFFFF24E4 :                     ;  dc.b "---",0,"C#0",0,"D-0",0,"D#0",0,"E-0",0,"F-0",0,"F#0",0,"G-0",0,"G#0",0,"A-0",0,"A#0",0,"B-0",0
(1)  847/FFFFFFFFFFFF24E4 :                     ;  dc.b "C-1",0,"C#1",0,"D-1",0,"D#1",0,"E-1",0,"F-1",0,"F#1",0,"G-1",0,"G#1",0,"A-1",0,"A#1",0,"B-1",0
(1)  848/FFFFFFFFFFFF24E4 :                     ;  dc.b "C-2",0,"C#2",0,"D-2",0,"D#2",0,"E-2",0,"F-2",0,"F#2",0,"G-2",0,"G#2",0,"A-2",0,"A#2",0,"B-2",0
(1)  849/FFFFFFFFFFFF24E4 :                     ;  dc.b "C-3",0,"C#3",0,"D-3",0,"D#3",0,"E-3",0,"F-3",0,"F#3",0,"G-3",0,"G#3",0,"A-3",0,"A#3",0,"B-3",0
(1)  850/FFFFFFFFFFFF24E4 :                     ;  dc.b "C-4",0,"C#4",0,"D-4",0,"D#4",0,"E-4",0,"F-4",0,"F#4",0,"G-4",0,"G#4",0,"A-4",0,"A#4",0,"B-4",0
(1)  851/FFFFFFFFFFFF24E4 :                     ;  dc.b "C-5",0,"C#5",0,"D-5",0,"D#5",0,"E-5",0,"F-5",0,"F#5",0,"G-5",0,"G#5",0,"A-5",0,"A#5",0,"B-5",0
(1)  852/FFFFFFFFFFFF24E4 :                     ;  dc.b "C-6",0,"C#6",0,"D-6",0,"D#6",0,"E-6",0,"F-6",0,"F#6",0,"G-6",0,"G#6",0,"A-6",0,"A#6",0,"B-6",0
(1)  853/FFFFFFFFFFFF24E4 :                     ;  dc.b "C-7",0,"C#7",0,"D-7",0,"D#7",0,"E-7",0,"F-7",0,"F#7",0,"G-7",0,"G#7",0,"A-7",0,"A#7",0,"B-7",0
(1)  854/FFFFFFFFFFFF24E4 :                     ;  dc.b "C-8",0,"C#8",0,"D-8",0,"D#8",0,"E-8",0,"F-8",0,"F#8",0,"G-8",0,"G#8",0,"A-8",0,"A#8",0,"B-8",0
(1)  855/FFFFFFFFFFFF24E4 :                     ;  dc.b "C-9",0,"C#9",0,"D-9",0,"D#9",0,"E-9",0,"F-9",0,"F#9",0,"G-9",0,"G#9",0,"A-9",0,"A#9",0,"B-9",0
(1)  856/FFFFFFFFFFFF24E4 :                     ;  align 2
(1)  857/FFFFFFFFFFFF24E4 :                     ; str_Notes_FM:
(1)  858/FFFFFFFFFFFF24E4 :                     ;  dc.b "---",0
(1)  859/FFFFFFFFFFFF24E4 :                     ;  dc.b "C-",0,0,"C#",0,0,"D-",0,0,"D#",0,0,"E-",0,0,"F-",0,0
(1)  860/FFFFFFFFFFFF24E4 :                     ;  dc.b "F#",0,0,"G-",0,0,"G#",0,0,"A-",0,0,"A#",0,0,"B-",0,0
(1)  861/FFFFFFFFFFFF24E4 :                     ;  align 2
(1)  862/FFFFFFFFFFFF24E4 :                     ; str_Octv_FM:
(1)  863/FFFFFFFFFFFF24E4 :                     ;  dc.b "0",0,"1",0,"2",0,"3",0,"4",0,"5",0,"6",0,"7",0
(1)  864/FFFFFFFFFFFF24E4 :                     ;  align 2
(1)  865/FFFFFFFFFFFF24E4 :                     
     371/FFFFFFFFFFFF24E4 :                     mcscrn_e:
     371/FFFFFFFFFFFFD8E8 :                                     dephase
     371/   5CCE4 :                                     phase mctopscrn+(mcscrn_e-RAM_UserCode)
     371/   5CCE4 :                                     align $800
     371/   5D000 :                     ; Md_Screen00_e:
     371/   5D000 : =$5D000              MD_SCREEN01_E label *
     371/   5D000 :  (MACRO-2)                           report "SCREEN MODE: MD_SCREEN01",mcscrn_e-RAM_UserCode,MAX_UserCode
     372/   5D000 :                     
     373/   5D000 :                     ; ====================================================================
     374/   5D000 :                     ; ----------------------------------------------------------------
     375/   5D000 :                     ; DATA SECTION
     376/   5D000 :                     ; ----------------------------------------------------------------
     377/   5D000 :                     
     378/   5D000 :                     ; ====================================================================
     379/   5D000 :                     ; ----------------------------------------------------------------
     380/   5D000 :                     ; 68K DATA BANKs
     381/   5D000 :                     ;
     382/   5D000 :                     ; SEGA CD / CD32X:
     383/   5D000 :                     ; Stored in WORD-RAM pieces
     384/   5D000 :                     ; limited to 256KB 2M or 128KB 1M/1M (*UNTESTED*)
     385/   5D000 :                     ; ** WORD-RAM CANNOT BE USED IF USING ASIC STAMPS **
     386/   5D000 :                     ;
     387/   5D000 :                     ; SEGA 32X Cartridge:
     388/   5D000 :                     ; Limited to 1MB, bankswitchable if needed. (TODO bankswitching)
     389/   5D000 :                     ; ONLY 4 banks can be used, Bank 0 already uses the
     390/   5D000 :                     ; first 512KB for the code.
     391/   5D000 :                     ;
     392/   5D000 :                     ; To keep multi-porting limit your screen's data to 256KB
     393/   5D000 :                     ; ----------------------------------------------------------------
     394/   5D000 :                     
     395/   5D000 :                     ; --------------------------------------------------------
     396/   5D000 :                     ; DEFAULT BANK
     397/   5D000 :                     ;
     398/   5D000 :                     ; CD/CD32X:
     399/   5D000 :                     ; $200000 256KB (WORD-RAM)
     400/   5D000 :                     ;
     401/   5D000 :                     ; 32X:
     402/   5D000 :                     ; $900000 1MB (Bankswichable area)
     403/   5D000 :                     ;
     404/   5D000 :                     ; Usage:
     405/   5D000 :                     ; data_bkset LABEL_START,OPTION
     406/   5D000 :                     ; (add your includes and bincludes)
     407/   5D000 :                     ; data_bkend LABEL_START,LABEL_END,used_size
     408/   5D000 :                     ;
     409/   5D000 :                     ; OPTION (32X Cartridge ONLY):
     410/   5D000 :                     ;  0, Normal 32X $900000 bank
     411/   5D000 :                     ; -1, This bank is the first one
     412/   5D000 :                     ;
     413/   5D000 :                     ; This is ignored on other systems.
     414/   5D000 :                     ; --------------------------------------------------------
     415/   5D000 :                     
     416/   5D000 : (MACRO)              	data_bkset MCD_DBANK0,-1	; <-- note the -1
     416/   5D000 :                                     align $800
     416/   5D000 :                     ; MCD_DBANK0:
     416/   5D000 : =$5D000              MCD_DBANK0 label *
     416/  200000 :                                     phase sysmcd_wram
     417/  200000 :                     mdbank0:
     418/  200000 :                     		include "game/screen_0/data_bank.asm"
(1)    1/  200000 :                     ; ===========================================================================
(1)    2/  200000 :                     ; ----------------------------------------------------------------
(1)    3/  200000 :                     ; 68K SCREEN MODE DATA
(1)    4/  200000 :                     ; for big stuff like maps, level, etc.
(1)    5/  200000 :                     ;
(1)    6/  200000 :                     ; For Genesis graphics use data_dma.asm
(1)    7/  200000 :                     ; and for 32X graphics use data_mgfx.asm
(1)    8/  200000 :                     ;
(1)    9/  200000 :                     ; For 32X, CD32X:
(1)   10/  200000 :                     ; THE 256-COLOR PALETTES GO HERE.
(1)   11/  200000 :                     ; ----------------------------------------------------------------
(1)   12/  200000 :                     
(1)   13/  200000 :                     ; ----------------------------------------------------------------
(1)   14/  200000 :                     ; 32X Screen maps
(1)   15/  200000 :                     ; ----------------------------------------------------------------
(1)   16/  200000 :                     
(1)   17/  200000 :                     MapMars_Scrn0:
(1)   18/  200000 :                     		binclude "game/screen_0/data/mars/maps/test/data_map.bin"
(1)   19/  200230 :                     		align 2
(1)   20/  200230 :                     
(1)   21/  200230 :                     ; ----------------------------------------------------------------
(1)   22/  200230 :                     ; 32X Palettes
(1)   23/  200230 :                     ; ----------------------------------------------------------------
(1)   24/  200230 :                     
(1)   25/  200230 :                     PalMars_Doremi:
(1)   26/  200230 :                     		binclude "game/screen_0/data/mars/objects/doremi/doremi_pal.bin"
(1)   27/  2002B0 :                     		align 2
(1)   28/  2002B0 :                     PalMars_Sophie:
(1)   29/  2002B0 :                     		binclude "game/screen_0/data/mars/objects/sophie/sophie_pal.bin"
(1)   30/  200330 :                     		align 2
(1)   31/  200330 :                     PalMars_Scrn0:
(1)   32/  200330 :                     		binclude "game/screen_0/data/mars/maps/test/data_pal.bin"
(1)   33/  2003B0 :                     		align 2
(1)   34/  2003B0 :                     
(1)   35/  2003B0 :                     ; ----------------------------------------------------------------
(1)   36/  2003B0 :                     ; Screen maps
(1)   37/  2003B0 :                     ; ----------------------------------------------------------------
(1)   38/  2003B0 :                     
(1)   39/  2003B0 :                     MAP_Scr0_BG:
(1)   40/  2003B0 :                     		binclude "game/screen_0/data/md/maps/test/md_map.bin"
(1)   41/  200C70 :                     		align 2
(1)   42/  200C70 :                     
(1)   43/  200C70 :                     ; ----------------------------------------------------------------
(1)   44/  200C70 :                     ; Object data
(1)   45/  200C70 :                     ; ----------------------------------------------------------------
(1)   46/  200C70 :                     
(1)   47/  200C70 :                     ; Emily
(1)   48/  200C70 :                     objPal_Emily:
(1)   49/  200C70 :                     		binclude "game/screen_0/data/md/objects/emily/emi_pal.bin"
(1)   50/  200C86 :                     		align 2
(1)   51/  200C86 :                     objMap_Emily:
(1)   52/  200C86 :                     		binclude "game/screen_0/data/md/objects/emily/emi_map.bin"
(1)   53/  200E46 :                     		align 2
(1)   54/  200E46 :                     objDma_Emily:
(1)   55/  200E46 :                     		binclude "game/screen_0/data/md/objects/emily/emi_plc.bin"
(1)   56/  200EE6 :                     		align 2
(1)   57/  200EE6 :                     
(1)   58/  200EE6 :                     ; Doremi
(1)   59/  200EE6 :                     objPal_Doremi:
(1)   60/  200EE6 :                     		binclude "game/screen_0/data/md/objects/doremi/doremi_pal.bin"
(1)   61/  200F04 :                     		align 2
(1)   62/  200F04 :                     objMap_Doremi:
(1)   63/  200F04 :                     		binclude "game/screen_0/data/md/objects/doremi/doremi_map.bin"
(1)   64/  200F2C :                     		align 2
(1)   65/  200F2C :                     objDma_Doremi:
(1)   66/  200F2C :                     		binclude "game/screen_0/data/md/objects/doremi/doremi_plc.bin"
(1)   67/  200F3C :                     		align 2
(1)   68/  200F3C :                     
(1)   69/  200F3C :                     ; Bibi
(1)   70/  200F3C :                     ; objPal_Doremi:
(1)   71/  200F3C :                     ; 		binclude "game/screen_0/data/md/objects/doremi/doremi_pal.bin"
(1)   72/  200F3C :                     ; 		align 2
(1)   73/  200F3C :                     objMap_Bibi:
(1)   74/  200F3C :                     		binclude "game/screen_0/data/md/objects/bibi/bibi_map.bin"
(1)   75/  20101C :                     		align 2
(1)   76/  20101C :                     objDma_Bibi:
(1)   77/  20101C :                     		binclude "game/screen_0/data/md/objects/bibi/bibi_plc.bin"
(1)   78/  201072 :                     		align 2
(1)   79/  201072 :                     
(1)   80/  201072 :                     ; Sophie
(1)   81/  201072 :                     objPal_Sophie:
(1)   82/  201072 :                     		binclude "game/screen_0/data/md/objects/sophie/sophie_pal.bin"
(1)   83/  201090 :                     		align 2
(1)   84/  201090 :                     objMap_Sophie:
(1)   85/  201090 :                     		binclude "game/screen_0/data/md/objects/sophie/sophie_map.bin"
(1)   86/  201100 :                     		align 2
(1)   87/  201100 :                     objDma_Sophie:
(1)   88/  201100 :                     		binclude "game/screen_0/data/md/objects/sophie/sophie_plc.bin"
(1)   89/  201128 :                     		align 2
(1)   90/  201128 :                     
     419/  201128 :                     		include "game/screen_1/data_bank.asm"
(1)    1/  201128 :                     ; ===========================================================================
(1)    2/  201128 :                     ; ----------------------------------------------------------------
(1)    3/  201128 :                     ; 68K SCREEN MODE DATA
(1)    4/  201128 :                     ; for big stuff like maps, level, etc.
(1)    5/  201128 :                     ;
(1)    6/  201128 :                     ; For Genesis graphics use data_dma.asm
(1)    7/  201128 :                     ; and for 32X graphics use data_mgfx.asm
(1)    8/  201128 :                     ;
(1)    9/  201128 :                     ; For 32X, CD32X:
(1)   10/  201128 :                     ; THE 256-COLOR PALETTES GO HERE.
(1)   11/  201128 :                     ; ----------------------------------------------------------------
(1)   12/  201128 :                     
(1)   13/  201128 :                     ; ----------------------------------------------------------------
(1)   14/  201128 :                     ; 32X Screen maps
(1)   15/  201128 :                     ; ----------------------------------------------------------------
(1)   16/  201128 :                     
(1)   17/  201128 :                     MapMars_TEST:
(1)   18/  201128 :                     		binclude "game/screen_1/data/mars/maps/test/data_map.bin"
(1)   19/  201358 :                     		align 2
(1)   20/  201358 :                     
(1)   21/  201358 :                     ; ----------------------------------------------------------------
(1)   22/  201358 :                     ; 32X Palettes
(1)   23/  201358 :                     ; ----------------------------------------------------------------
(1)   24/  201358 :                     
(1)   25/  201358 :                     PalMars_TEST:
(1)   26/  201358 :                     		binclude "game/screen_1/data/mars/maps/test/data_pal.bin"
(1)   27/  201558 :                     		align 2
(1)   28/  201558 :                     
(1)   29/  201558 :                     ; ----------------------------------------------------------------
(1)   30/  201558 :                     ; Screen maps
(1)   31/  201558 :                     ; ----------------------------------------------------------------
(1)   32/  201558 :                     
(1)   33/  201558 :                     MAP_TEST:
(1)   34/  201558 :                     		binclude "game/screen_1/data/md/maps/test/md_map.bin"
(1)   35/  201E18 :                     		align 2
(1)   36/  201E18 :                     
(1)   37/  201E18 :                     ; ----------------------------------------------------------------
(1)   38/  201E18 :                     ; Object maps
(1)   39/  201E18 :                     ; ----------------------------------------------------------------
(1)   40/  201E18 :                     
(1)   41/  201E18 :                     objPal_Sisi:
(1)   42/  201E18 :                     		binclude "game/screen_1/data/md/objects/sisi/sisi_pal.bin"
(1)   43/  201E38 :                     		align 2
(1)   44/  201E38 :                     objMap_Sisi:
(1)   45/  201E38 :                     		binclude "game/screen_1/data/md/objects/sisi/sisi_map.bin"
(1)   46/  201E94 :                     		align 2
(1)   47/  201E94 :                     
     421/  201E94 :                     		include "game/screen_0/data_dma.asm"	; SEGA CD / CD32X ONLY.
(1)    1/  201E94 :                     ; ===========================================================================
(1)    2/  201E94 :                     ; ----------------------------------------------------------------
(1)    3/  201E94 :                     ; DMA Genesis graphics for this screen mode
(1)    4/  201E94 :                     ; ----------------------------------------------------------------
(1)    5/  201E94 :                     
(1)    6/  201E94 :                     ASCII_FONT:	binclude "system/md/data/font.bin"
(1)    7/  202A94 :                     
(1)    8/  202A94 :                     ; ----------------------------------------------------------------
(1)    9/  202A94 :                     
(1)   10/  202A94 :                     Art_Scn0_BG:	binclude "game/screen_0/data/md/maps/test/md_art.bin"
(1)   11/  20B454 :                     Art_Scn0_BG_e:
(1)   12/  20B454 :                     		align 2
(1)   13/  20B454 :                     Art_Bibi:	binclude "game/screen_0/data/md/objects/bibi/bibi_art.bin"
(1)   14/  20CC74 :                     Art_Bibi_e:
(1)   15/  20CC74 :                     		align 2
(1)   16/  20CC74 :                     Art_Doremi:	binclude "game/screen_0/data/md/objects/doremi/doremi_art.bin"
(1)   17/  20D274 :                     Art_Doremi_e:
(1)   18/  20D274 :                     		align 2
(1)   19/  20D274 :                     Art_Emily:	binclude "game/screen_0/data/md/objects/emily/emi_art.bin"
(1)   20/  20FDF4 :                     Art_Emily_e:
(1)   21/  20FDF4 :                     		align 2
(1)   22/  20FDF4 :                     Art_Sophie:	binclude "game/screen_0/data/md/objects/sophie/sophie_art.bin"
(1)   23/  210914 :                     Art_Sophie_e:
(1)   24/  210914 :                     		align 2
(1)   25/  210914 :                     
(1)   26/  210914 :                     
(1)   27/  210914 :                     
     422/  210914 :                     		include "game/screen_1/data_dma.asm"
(1)    1/  210914 :                     ; ===========================================================================
(1)    2/  210914 :                     ; ----------------------------------------------------------------
(1)    3/  210914 :                     ; DMA Genesis graphics for this screen mode
(1)    4/  210914 :                     ; ----------------------------------------------------------------
(1)    5/  210914 :                     
(1)    6/  210914 :                     ASCII_FONT_S1:	binclude "system/md/data/font.bin"
(1)    7/  211514 :                     
(1)    8/  211514 :                     ; ----------------------------------------------------------------
(1)    9/  211514 :                     
(1)   10/  211514 :                     ART_TEST:	binclude "game/screen_1/data/md/maps/test/md_art.bin"
(1)   11/  219C94 :                     ART_TEST_e:
(1)   12/  219C94 :                     		align 2
(1)   13/  219C94 :                     Art_Sisi:	binclude "game/screen_1/data/md/objects/sisi/sisi_art.bin"
(1)   14/  21A274 :                     Art_Sisi_e:
(1)   15/  21A274 :                     		align 2
(1)   16/  21A274 :                     
     424/  21A274 :                     		include "sound/tracks.asm"		; GEMA: Track data
(1)    1/  21A274 :                     ; ===========================================================================
(1)    2/  21A274 :                     ; ------------------------------------------------------------
(1)    3/  21A274 :                     ; SOUNDTRACK SECTION
(1)    4/  21A274 :                     ; ------------------------------------------------------------
(1)    5/  21A274 :                     
(1)    6/  21A274 :                     ; ------------------------------------------------------------
(1)    7/  21A274 :                     ; Instrument macros
(1)    8/  21A274 :                     gInsNull macro
(1)    9/  21A274 :                     	dc.b $00,$00,$00,$00
(1)   10/  21A274 :                     	dc.b $00,$00,$00,$00
(1)   11/  21A274 :                     	endm
(1)   12/  21A274 :                     
(1)   13/  21A274 :                     ; alv: attack level
(1)   14/  21A274 :                     ; atk: attack rate
(1)   15/  21A274 :                     ; slv: sustain
(1)   16/  21A274 :                     ; dky: decay rate (up)
(1)   17/  21A274 :                     ; rrt: release rate (down)
(1)   18/  21A274 :                     ; vib: (TODO)
(1)   19/  21A274 :                     gInsPsg	macro pitch,alv,atk,slv,dky,rrt,vib
(1)   20/  21A274 :                     	dc.b $80,pitch,alv,atk
(1)   21/  21A274 :                     	dc.b slv,dky,rrt,vib
(1)   22/  21A274 :                     	endm
(1)   23/  21A274 :                     
(1)   24/  21A274 :                     ; same args as gInsPsg
(1)   25/  21A274 :                     ; but this has one more argument for the noise type:
(1)   26/  21A274 :                     ; mode: noise mode
(1)   27/  21A274 :                     ;       %tmm
(1)   28/  21A274 :                     ;        t  - Bass(0)|Noise(1)
(1)   29/  21A274 :                     ;         mm- Clock(0)|Clock/2(1)|Clock/4(2)|Tone3(3)
(1)   30/  21A274 :                     ;
(1)   31/  21A274 :                     gInsPsgN macro pitch,alv,atk,slv,dky,rrt,vib,mode
(1)   32/  21A274 :                     	dc.b $90|mode,pitch,alv,atk
(1)   33/  21A274 :                     	dc.b slv,dky,rrt,vib
(1)   34/  21A274 :                     	endm
(1)   35/  21A274 :                     
(1)   36/  21A274 :                     ; 24-bit 68k pointer to FM patch data
(1)   37/  21A274 :                     gInsFm macro pitch,fmins
(1)   38/  21A274 :                     	dc.b $A0,pitch,((fmins>>16)&$FF),((fmins>>8)&$FF)
(1)   39/  21A274 :                     	dc.b fmins&$FF,$00,$00,$00
(1)   40/  21A274 :                     	endm
(1)   41/  21A274 :                     
(1)   42/  21A274 :                     ; Same args as gInsFm but for FM3 special.
(1)   43/  21A274 :                     ;
(1)   44/  21A274 :                     ; ** Pitch is useless here, set to 0 **
(1)   45/  21A274 :                     gInsFm3	macro pitch,fmins
(1)   46/  21A274 :                     	dc.b $B0,pitch,((fmins>>16)&$FF),((fmins>>8)&$FF)
(1)   47/  21A274 :                     	dc.b fmins&$FF,$00,$00,$00
(1)   48/  21A274 :                     	endm
(1)   49/  21A274 :                     
(1)   50/  21A274 :                     ; DAC Sample
(1)   51/  21A274 :                     ;
(1)   52/  21A274 :                     ; flags: %000L
(1)   53/  21A274 :                     ;        L - Loop sample No/Yes
(1)   54/  21A274 :                     gInsDac	macro pitch,start,flags
(1)   55/  21A274 :                     	dc.b $C0|flags,pitch,((start>>16)&$FF),((start>>8)&$FF)
(1)   56/  21A274 :                     	dc.b start&$FF,0,0,0
(1)   57/  21A274 :                     	endm
(1)   58/  21A274 :                     
(1)   59/  21A274 :                     ; Sega CD PCM Sample
(1)   60/  21A274 :                     ;
(1)   61/  21A274 :                     ; flags: %000L
(1)   62/  21A274 :                     ;        L - Loop sample No/Yes
(1)   63/  21A274 :                     ;
(1)   64/  21A274 :                     ; pitch:
(1)   65/  21A274 :                     ; -17-7 = 8000 hz
(1)   66/  21A274 :                     gInsPcm	macro pitch,start,flags
(1)   67/  21A274 :                      if MCD|MARSCD
(1)   68/  21A274 :                     	dc.b $D0|flags,pitch,((start>>16)&$FF),((start>>8)&$FF)
(1)   69/  21A274 :                     	dc.b start&$FF,0,0,0
(1)   70/  21A274 :                      else
(1)   71/  21A274 :                     	dc.b $00,$00,$00,$00
(1)   72/  21A274 :                     	dc.b $00,$00,$00,$00
(1)   73/  21A274 :                      endif
(1)   74/  21A274 :                     	endm
(1)   75/  21A274 :                     
(1)   76/  21A274 :                     ; Sega 32X PWM Sample
(1)   77/  21A274 :                     ;
(1)   78/  21A274 :                     ; flags: %00SL
(1)   79/  21A274 :                     ;        L - Loop sample No/Yes
(1)   80/  21A274 :                     ;        S - Sample data is in STEREO
(1)   81/  21A274 :                     gInsPwm	macro pitch,start,flags
(1)   82/  21A274 :                      if MARS|MARSCD
(1)   83/  21A274 :                     	dc.b $E0|flags,pitch,((start>>24)&$FF),((start>>16)&$FF)
(1)   84/  21A274 :                     	dc.b ((start>>8)&$FF),start&$FF,0,0
(1)   85/  21A274 :                      else
(1)   86/  21A274 :                     	dc.b $00,$00,$00,$00
(1)   87/  21A274 :                     	dc.b $00,$00,$00,$00
(1)   88/  21A274 :                      endif
(1)   89/  21A274 :                     	endm
(1)   90/  21A274 :                     
(1)   91/  21A274 :                     ; ticks - %gttttttt
(1)   92/  21A274 :                     ;   loc - 68k pointer
(1)   93/  21A274 :                     ;
(1)   94/  21A274 :                     ; t-Ticks
(1)   95/  21A274 :                     ; g-Use global tempo
(1)   96/  21A274 :                     gemaTrk macro ticks,loc
(1)   97/  21A274 :                     	dc.l ((ticks&$FF)<<24)|loc&$FFFFFF
(1)   98/  21A274 :                     	endm
(1)   99/  21A274 :                     
(1)  100/  21A274 :                     ; gemaHead
(1)  101/  21A274 :                     ;
(1)  102/  21A274 :                     ; blk_data,patt_data,ins_list,num_chnlsused
(1)  103/  21A274 :                     gemaHead macro blk,pat,ins,num
(1)  104/  21A274 :                     	dc.w num
(1)  105/  21A274 :                     	dc.l blk
(1)  106/  21A274 :                     	dc.l pat
(1)  107/  21A274 :                     	dc.l ins
(1)  108/  21A274 :                     	endm
(1)  109/  21A274 :                     
(1)  110/  21A274 :                     ; Track data format:
(1)  111/  21A274 :                     ; 	gemaHead .blk,.pat,.ins,3
(1)  112/  21A274 :                     ; .blk:
(1)  113/  21A274 :                     ; 	binclude "sound/tracks/track_blk.bin"
(1)  114/  21A274 :                     ; .pat:
(1)  115/  21A274 :                     ; 	binclude "sound/tracks/track_patt.bin"
(1)  116/  21A274 :                     ; .ins:
(1)  117/  21A274 :                     ; 	gIns??? pitch,ins_data,flags
(1)  118/  21A274 :                     ; 	; ...
(1)  119/  21A274 :                     ; 	; Entry for each instrument
(1)  120/  21A274 :                     ; 	; starts from 1, not 0.
(1)  121/  21A274 :                     ;
(1)  122/  21A274 :                     ; Default Samplerate for samples: 16000hz
(1)  123/  21A274 :                     ; APPLIES TO ALL.
(1)  124/  21A274 :                     
(1)  125/  21A274 :                     ; ====================================================================
(1)  126/  21A274 :                     ; ------------------------------------------------------------
(1)  127/  21A274 :                     ; Nikona DEFAULT track-list
(1)  128/  21A274 :                     ;
(1)  129/  21A274 :                     ; Entry:
(1)  130/  21A274 :                     ; gemaTrk ticks,track_data	; Without global beats
(1)  131/  21A274 :                     ; gemaTrk ticks|$80,track_data	; With global beats
(1)  132/  21A274 :                     ;
(1)  133/  21A274 :                     ; To use sub-beats call gemaSetBeats extenally
(1)  134/  21A274 :                     ; BEFORE playing your track:
(1)  135/  21A274 :                     ; 	move.w	#new_beats,d0
(1)  136/  21A274 :                     ; 	bsr	gemaSetBeats
(1)  137/  21A274 :                     ; 	move.w	#track_id,d0
(1)  138/  21A274 :                     ;	bsr	gemaPlayTrack
(1)  139/  21A274 :                     ; ------------------------------------------------------------
(1)  140/  21A274 :                     
(1)  141/  21A274 :                     	align 2
(1)  142/  21A274 :                     Gema_MasterList:
(1)  143/  21A274 : (MACRO)              	gemaTrk $3F,GemaTrk_Test
(1)  143/  21A274 : 3F21 A280                   dc.l (($3F&$FF)<<24)|GEMATRK_TEST&$FFFFFF
(1)  144/  21A278 : (MACRO)              	gemaTrk 4|$80,GemaTrk_Astral
(1)  144/  21A278 : 8421 D251                   dc.l ((4|$80&$FF)<<24)|GEMATRK_ASTRAL&$FFFFFF
(1)  145/  21A27C : (MACRO)              	gemaTrk 3|$80,GemaTrk_Arena1
(1)  145/  21A27C : 8321 A2EF                   dc.l ((3|$80&$FF)<<24)|GEMATRK_ARENA1&$FFFFFF
(1)  146/  21A280 :                     
(1)  147/  21A280 :                     ; ------------------------------------------------------------
(1)  148/  21A280 :                     
(1)  149/  21A280 :                     GemaTrk_Test:
(1)  150/  21A280 : (MACRO)              	gemaHead .blk,.pat,.ins,3
(1)  150/  21A280 : 0003                        dc.w 3
(1)  150/  21A282 : 0021 A28E                   dc.l .BLK
(1)  150/  21A286 : 0021 A291                   dc.l .PAT
(1)  150/  21A28A : 0021 A2E7                   dc.l .INS
(1)  151/  21A28E :                     .blk:
(1)  152/  21A28E :                     	binclude "sound/tracks/test_blk.bin"
(1)  153/  21A291 :                     .pat:
(1)  154/  21A291 :                     	binclude "sound/tracks/test_patt.bin"
(1)  155/  21A2E7 :                     .ins:
(1)  156/  21A2E7 : (MACRO)              	gInsNull
(1)  156/  21A2E7 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  156/  21A2EB : 0000 0000                   dc.b $00,$00,$00,$00
(1)  157/  21A2EF :                     ; 	gInsPwm -12,PwmIns_test8,0
(1)  158/  21A2EF :                     
(1)  159/  21A2EF :                     ; ------------------------------------------------------------
(1)  160/  21A2EF :                     
(1)  161/  21A2EF :                     GemaTrk_Arena1:
(1)  162/  21A2EF : (MACRO)              	gemaHead .blk,.patt,.ins,4
(1)  162/  21A2EF : 0004                        dc.w 4
(1)  162/  21A2F1 : 0021 A2FD                   dc.l .BLK
(1)  162/  21A2F5 : 0021 A327                   dc.l .PATT
(1)  162/  21A2F9 : 0021 D1F9                   dc.l .INS
(1)  163/  21A2FD :                     .blk:
(1)  164/  21A2FD :                     	binclude "sound/tracks/techno_blk.bin"
(1)  165/  21A327 :                     .patt:
(1)  166/  21A327 :                     	binclude "sound/tracks/techno_patt.bin"
(1)  167/  21D1F9 :                     .ins:
(1)  168/  21D1F9 : (MACRO)              	gInsPcm -12,PcmIns_techno_01,0
(1)  168/  21D1F9 : D0F4 0200                   dc.b $D0|0,-12,((PCMINS_TECHNO_01>>16)&$FF),((PCMINS_TECHNO_01>>8)&$FF)
(1)  168/  21D1FD : 0000 0000                   dc.b PCMINS_TECHNO_01&$FF,0,0,0
(1)  169/  21D201 : (MACRO)              	gInsPcm -12,PcmIns_techno_02,0
(1)  169/  21D201 : D0F4 0227                   dc.b $D0|0,-12,((PCMINS_TECHNO_02>>16)&$FF),((PCMINS_TECHNO_02>>8)&$FF)
(1)  169/  21D205 : 5C00 0000                   dc.b PCMINS_TECHNO_02&$FF,0,0,0
(1)  170/  21D209 : (MACRO)              	gInsPcm -12,PcmIns_techno_03,0
(1)  170/  21D209 : D0F4 0277                   dc.b $D0|0,-12,((PCMINS_TECHNO_03>>16)&$FF),((PCMINS_TECHNO_03>>8)&$FF)
(1)  170/  21D20D : 2400 0000                   dc.b PCMINS_TECHNO_03&$FF,0,0,0
(1)  171/  21D211 : (MACRO)              	gInsPcm -12,PcmIns_techno_04,0
(1)  171/  21D211 : D0F4 028A                   dc.b $D0|0,-12,((PCMINS_TECHNO_04>>16)&$FF),((PCMINS_TECHNO_04>>8)&$FF)
(1)  171/  21D215 : 7000 0000                   dc.b PCMINS_TECHNO_04&$FF,0,0,0
(1)  172/  21D219 : (MACRO)              	gInsPcm -12,PcmIns_techno_05,0
(1)  172/  21D219 : D0F4 0298                   dc.b $D0|0,-12,((PCMINS_TECHNO_05>>16)&$FF),((PCMINS_TECHNO_05>>8)&$FF)
(1)  172/  21D21D : 9400 0000                   dc.b PCMINS_TECHNO_05&$FF,0,0,0
(1)  173/  21D221 : (MACRO)              	gInsPcm -12,PcmIns_techno_06,1
(1)  173/  21D221 : D1F4 02D4                   dc.b $D0|1,-12,((PCMINS_TECHNO_06>>16)&$FF),((PCMINS_TECHNO_06>>8)&$FF)
(1)  173/  21D225 : A400 0000                   dc.b PCMINS_TECHNO_06&$FF,0,0,0
(1)  174/  21D229 : (MACRO)              	gInsPcm -12,PcmIns_techno_07,1
(1)  174/  21D229 : D1F4 03B4                   dc.b $D0|1,-12,((PCMINS_TECHNO_07>>16)&$FF),((PCMINS_TECHNO_07>>8)&$FF)
(1)  174/  21D22D : EC00 0000                   dc.b PCMINS_TECHNO_07&$FF,0,0,0
(1)  175/  21D231 : (MACRO)              	gInsPcm -12,PcmIns_techno_08,1
(1)  175/  21D231 : D1F4 0409                   dc.b $D0|1,-12,((PCMINS_TECHNO_08>>16)&$FF),((PCMINS_TECHNO_08>>8)&$FF)
(1)  175/  21D235 : EC00 0000                   dc.b PCMINS_TECHNO_08&$FF,0,0,0
(1)  176/  21D239 : (MACRO)              	gInsPcm -12,PcmIns_techno_09,1
(1)  176/  21D239 : D1F4 043B                   dc.b $D0|1,-12,((PCMINS_TECHNO_09>>16)&$FF),((PCMINS_TECHNO_09>>8)&$FF)
(1)  176/  21D23D : 0C00 0000                   dc.b PCMINS_TECHNO_09&$FF,0,0,0
(1)  177/  21D241 : (MACRO)              	gInsPcm -12,PcmIns_techno_10,1
(1)  177/  21D241 : D1F4 046D                   dc.b $D0|1,-12,((PCMINS_TECHNO_10>>16)&$FF),((PCMINS_TECHNO_10>>8)&$FF)
(1)  177/  21D245 : CC00 0000                   dc.b PCMINS_TECHNO_10&$FF,0,0,0
(1)  178/  21D249 : (MACRO)              	gInsPcm -12,PcmIns_techno_11,0
(1)  178/  21D249 : D0F4 04A2                   dc.b $D0|0,-12,((PCMINS_TECHNO_11>>16)&$FF),((PCMINS_TECHNO_11>>8)&$FF)
(1)  178/  21D24D : 2800 0000                   dc.b PCMINS_TECHNO_11&$FF,0,0,0
(1)  179/  21D251 :                     
(1)  180/  21D251 :                     ; ------------------------------------------------------------
(1)  181/  21D251 :                     
(1)  182/  21D251 :                     GemaTrk_Astral:
(1)  183/  21D251 : (MACRO)              	gemaHead .blk,.patt,.ins,4
(1)  183/  21D251 : 0004                        dc.w 4
(1)  183/  21D253 : 0021 D25F                   dc.l .BLK
(1)  183/  21D257 : 0021 D27B                   dc.l .PATT
(1)  183/  21D25B : 0021 EED8                   dc.l .INS
(1)  184/  21D25F :                     .blk:
(1)  185/  21D25F :                     	binclude "sound/tracks/astral_blk.bin"
(1)  186/  21D27B :                     .patt:
(1)  187/  21D27B :                     	binclude "sound/tracks/astral_patt.bin"
(1)  188/  21EED8 :                     .ins:
(1)  189/  21EED8 : (MACRO)              	gInsPcm -12,PcmIns_astral_01,1
(1)  189/  21EED8 : D1F4 04E3                   dc.b $D0|1,-12,((PCMINS_ASTRAL_01>>16)&$FF),((PCMINS_ASTRAL_01>>8)&$FF)
(1)  189/  21EEDC : 8800 0000                   dc.b PCMINS_ASTRAL_01&$FF,0,0,0
(1)  190/  21EEE0 : (MACRO)              	gInsPcm -12,PcmIns_astral_02,1
(1)  190/  21EEE0 : D1F4 0504                   dc.b $D0|1,-12,((PCMINS_ASTRAL_02>>16)&$FF),((PCMINS_ASTRAL_02>>8)&$FF)
(1)  190/  21EEE4 : 1C00 0000                   dc.b PCMINS_ASTRAL_02&$FF,0,0,0
(1)  191/  21EEE8 : (MACRO)              	gInsPcm -12,PcmIns_astral_03,0
(1)  191/  21EEE8 : D0F4 0525                   dc.b $D0|0,-12,((PCMINS_ASTRAL_03>>16)&$FF),((PCMINS_ASTRAL_03>>8)&$FF)
(1)  191/  21EEEC : AC00 0000                   dc.b PCMINS_ASTRAL_03&$FF,0,0,0
(1)  192/  21EEF0 : (MACRO)              	gInsPcm -12,PcmIns_astral_04,0
(1)  192/  21EEF0 : D0F4 053E                   dc.b $D0|0,-12,((PCMINS_ASTRAL_04>>16)&$FF),((PCMINS_ASTRAL_04>>8)&$FF)
(1)  192/  21EEF4 : 8400 0000                   dc.b PCMINS_ASTRAL_04&$FF,0,0,0
(1)  193/  21EEF8 : (MACRO)              	gInsPcm -12,PcmIns_astral_05,0
(1)  193/  21EEF8 : D0F4 0544                   dc.b $D0|0,-12,((PCMINS_ASTRAL_05>>16)&$FF),((PCMINS_ASTRAL_05>>8)&$FF)
(1)  193/  21EEFC : 9800 0000                   dc.b PCMINS_ASTRAL_05&$FF,0,0,0
(1)  194/  21EF00 : (MACRO)              	gInsPcm -12,PcmIns_astral_06,0
(1)  194/  21EF00 : D0F4 0547                   dc.b $D0|0,-12,((PCMINS_ASTRAL_06>>16)&$FF),((PCMINS_ASTRAL_06>>8)&$FF)
(1)  194/  21EF04 : 4000 0000                   dc.b PCMINS_ASTRAL_06&$FF,0,0,0
(1)  195/  21EF08 : (MACRO)              	gInsPcm -12,PcmIns_astral_07,0
(1)  195/  21EF08 : D0F4 0554                   dc.b $D0|0,-12,((PCMINS_ASTRAL_07>>16)&$FF),((PCMINS_ASTRAL_07>>8)&$FF)
(1)  195/  21EF0C : B800 0000                   dc.b PCMINS_ASTRAL_07&$FF,0,0,0
(1)  196/  21EF10 : (MACRO)              	gInsPcm -12,PcmIns_astral_08,0
(1)  196/  21EF10 : D0F4 055D                   dc.b $D0|0,-12,((PCMINS_ASTRAL_08>>16)&$FF),((PCMINS_ASTRAL_08>>8)&$FF)
(1)  196/  21EF14 : 9C00 0000                   dc.b PCMINS_ASTRAL_08&$FF,0,0,0
(1)  197/  21EF18 : (MACRO)              	gInsPcm -12,PcmIns_astral_09,0
(1)  197/  21EF18 : D0F4 0572                   dc.b $D0|0,-12,((PCMINS_ASTRAL_09>>16)&$FF),((PCMINS_ASTRAL_09>>8)&$FF)
(1)  197/  21EF1C : D000 0000                   dc.b PCMINS_ASTRAL_09&$FF,0,0,0
(1)  198/  21EF20 : (MACRO)              	gInsPcm -12,PcmIns_astral_10,0
(1)  198/  21EF20 : D0F4 057E                   dc.b $D0|0,-12,((PCMINS_ASTRAL_10>>16)&$FF),((PCMINS_ASTRAL_10>>8)&$FF)
(1)  198/  21EF24 : 4400 0000                   dc.b PCMINS_ASTRAL_10&$FF,0,0,0
(1)  199/  21EF28 : (MACRO)              	gInsPcm -12,PcmIns_astral_11,0
(1)  199/  21EF28 : D0F4 058A                   dc.b $D0|0,-12,((PCMINS_ASTRAL_11>>16)&$FF),((PCMINS_ASTRAL_11>>8)&$FF)
(1)  199/  21EF2C : 5000 0000                   dc.b PCMINS_ASTRAL_11&$FF,0,0,0
(1)  200/  21EF30 : (MACRO)              	gInsPcm -12,PcmIns_astral_12,0
(1)  200/  21EF30 : D0F4 05A8                   dc.b $D0|0,-12,((PCMINS_ASTRAL_12>>16)&$FF),((PCMINS_ASTRAL_12>>8)&$FF)
(1)  200/  21EF34 : 3400 0000                   dc.b PCMINS_ASTRAL_12&$FF,0,0,0
(1)  201/  21EF38 : (MACRO)              	gInsPcm -12,PcmIns_astral_13,0
(1)  201/  21EF38 : D0F4 05B5                   dc.b $D0|0,-12,((PCMINS_ASTRAL_13>>16)&$FF),((PCMINS_ASTRAL_13>>8)&$FF)
(1)  201/  21EF3C : 1400 0000                   dc.b PCMINS_ASTRAL_13&$FF,0,0,0
(1)  202/  21EF40 : (MACRO)              	gInsPcm -12,PcmIns_astral_14,0
(1)  202/  21EF40 : D0F4 05C2                   dc.b $D0|0,-12,((PCMINS_ASTRAL_14>>16)&$FF),((PCMINS_ASTRAL_14>>8)&$FF)
(1)  202/  21EF44 : A400 0000                   dc.b PCMINS_ASTRAL_14&$FF,0,0,0
(1)  203/  21EF48 : (MACRO)              	gInsPcm -12,PcmIns_astral_15,0
(1)  203/  21EF48 : D0F4 05EF                   dc.b $D0|0,-12,((PCMINS_ASTRAL_15>>16)&$FF),((PCMINS_ASTRAL_15>>8)&$FF)
(1)  203/  21EF4C : 3000 0000                   dc.b PCMINS_ASTRAL_15&$FF,0,0,0
(1)  204/  21EF50 : (MACRO)              	gInsPcm -12,PcmIns_astral_16,0
(1)  204/  21EF50 : D0F4 05FC                   dc.b $D0|0,-12,((PCMINS_ASTRAL_16>>16)&$FF),((PCMINS_ASTRAL_16>>8)&$FF)
(1)  204/  21EF54 : 4400 0000                   dc.b PCMINS_ASTRAL_16&$FF,0,0,0
(1)  205/  21EF58 : (MACRO)              	gInsPcm -12,PcmIns_astral_17,0
(1)  205/  21EF58 : D0F4 0607                   dc.b $D0|0,-12,((PCMINS_ASTRAL_17>>16)&$FF),((PCMINS_ASTRAL_17>>8)&$FF)
(1)  205/  21EF5C : E400 0000                   dc.b PCMINS_ASTRAL_17&$FF,0,0,0
(1)  206/  21EF60 : (MACRO)              	gInsPcm -12,PcmIns_astral_18,0
(1)  206/  21EF60 : D0F4 0613                   dc.b $D0|0,-12,((PCMINS_ASTRAL_18>>16)&$FF),((PCMINS_ASTRAL_18>>8)&$FF)
(1)  206/  21EF64 : 9400 0000                   dc.b PCMINS_ASTRAL_18&$FF,0,0,0
(1)  207/  21EF68 : (MACRO)              	gInsPcm -12,PcmIns_astral_19,1
(1)  207/  21EF68 : D1F4 0616                   dc.b $D0|1,-12,((PCMINS_ASTRAL_19>>16)&$FF),((PCMINS_ASTRAL_19>>8)&$FF)
(1)  207/  21EF6C : 4400 0000                   dc.b PCMINS_ASTRAL_19&$FF,0,0,0
(1)  208/  21EF70 : (MACRO)              	gInsPcm -12,PcmIns_astral_20,1
(1)  208/  21EF70 : D1F4 062F                   dc.b $D0|1,-12,((PCMINS_ASTRAL_20>>16)&$FF),((PCMINS_ASTRAL_20>>8)&$FF)
(1)  208/  21EF74 : 6400 0000                   dc.b PCMINS_ASTRAL_20&$FF,0,0,0
(1)  209/  21EF78 : (MACRO)              	gInsPcm -12,PcmIns_astral_21,1
(1)  209/  21EF78 : D1F4 0646                   dc.b $D0|1,-12,((PCMINS_ASTRAL_21>>16)&$FF),((PCMINS_ASTRAL_21>>8)&$FF)
(1)  209/  21EF7C : 6C00 0000                   dc.b PCMINS_ASTRAL_21&$FF,0,0,0
(1)  210/  21EF80 : (MACRO)              	gInsPcm -12,PcmIns_astral_22,0
(1)  210/  21EF80 : D0F4 0676                   dc.b $D0|0,-12,((PCMINS_ASTRAL_22>>16)&$FF),((PCMINS_ASTRAL_22>>8)&$FF)
(1)  210/  21EF84 : B800 0000                   dc.b PCMINS_ASTRAL_22&$FF,0,0,0
(1)  211/  21EF88 : (MACRO)              	gInsPcm -12,PcmIns_astral_23,0
(1)  211/  21EF88 : D0F4 0680                   dc.b $D0|0,-12,((PCMINS_ASTRAL_23>>16)&$FF),((PCMINS_ASTRAL_23>>8)&$FF)
(1)  211/  21EF8C : C400 0000                   dc.b PCMINS_ASTRAL_23&$FF,0,0,0
(1)  212/  21EF90 : (MACRO)              	gInsPcm -12,PcmIns_astral_24,0
(1)  212/  21EF90 : D0F4 0684                   dc.b $D0|0,-12,((PCMINS_ASTRAL_24>>16)&$FF),((PCMINS_ASTRAL_24>>8)&$FF)
(1)  212/  21EF94 : 0000 0000                   dc.b PCMINS_ASTRAL_24&$FF,0,0,0
(1)  213/  21EF98 : (MACRO)              	gInsPcm -12,PcmIns_astral_25,0
(1)  213/  21EF98 : D0F4 0686                   dc.b $D0|0,-12,((PCMINS_ASTRAL_25>>16)&$FF),((PCMINS_ASTRAL_25>>8)&$FF)
(1)  213/  21EF9C : E400 0000                   dc.b PCMINS_ASTRAL_25&$FF,0,0,0
(1)  214/  21EFA0 : (MACRO)              	gInsPcm -12,PcmIns_astral_26,0
(1)  214/  21EFA0 : D0F4 068F                   dc.b $D0|0,-12,((PCMINS_ASTRAL_26>>16)&$FF),((PCMINS_ASTRAL_26>>8)&$FF)
(1)  214/  21EFA4 : 3800 0000                   dc.b PCMINS_ASTRAL_26&$FF,0,0,0
(1)  215/  21EFA8 :                     
     425/  21EFA8 :                     		include "sound/instr.asm"		; GEMA: FM instruments
(1)    1/  21EFA8 :                     ; ===========================================================================
(1)    2/  21EFA8 :                     ; --------------------------------------------------------
(1)    3/  21EFA8 :                     ; GEMA/Nikona FM instruments "patches"
(1)    4/  21EFA8 :                     ;
(1)    5/  21EFA8 :                     ; Using .gsx save state for easy editing, use
(1)    6/  21EFA8 :                     ; FM_EDITOR.bin in Fusion or any gsx compatible emulator
(1)    7/  21EFA8 :                     ; to make or modify instrument data
(1)    8/  21EFA8 :                     ; --------------------------------------------------------
(1)    9/  21EFA8 :                     
(1)   10/  21EFA8 :                     ; FM_EDITOR savestate data is located at:
(1)   11/  21EFA8 :                     ; $2478
(1)   12/  21EFA8 :                     ;
(1)   13/  21EFA8 :                     ; Sizes:
(1)   14/  21EFA8 :                     ; Normal FM ins: $20
(1)   15/  21EFA8 :                     ; Special FM ins: $28
(1)   16/  21EFA8 :                     ;
(1)   17/  21EFA8 :                     ; INTRUMENT FORMAT:
(1)   18/  21EFA8 :                     ; dc.b $30,$34,$38,$3C	; Register data following this order
(1)   19/  21EFA8 :                     ; dc.b $40,$44,$48,$4C	; **
(1)   20/  21EFA8 :                     ; dc.b $50,$54,$58,$5C	; **
(1)   21/  21EFA8 :                     ; dc.b $60,$64,$68,$6C	; **
(1)   22/  21EFA8 :                     ; dc.b $70,$74,$78,$7C	; **
(1)   23/  21EFA8 :                     ; dc.b $80,$84,$88,$8C	; **
(1)   24/  21EFA8 :                     ; dc.b $90,$94,$98,$9C	; **
(1)   25/  21EFA8 :                     ; dc.b $B0,$B4,$22,$28	; **
(1)   26/  21EFA8 :                     ; ** Extra words for FM3 special:
(1)   27/  21EFA8 :                     ; dc.w OP1,OP2,OP3,OP4	; FM3 special ONLY: Manual frequencies
(1)   28/  21EFA8 :                     ;
(1)   29/  21EFA8 :                     ; $90,$94,$98,$9C: SSG-EG
(1)   30/  21EFA8 :                     ; These CAN be used, but can be problematic
(1)   31/  21EFA8 :                     ; on non-genuine systems.
(1)   32/  21EFA8 :                     ;
(1)   33/  21EFA8 :                     ; $B4: %00aa0ppp
(1)   34/  21EFA8 :                     ; a - AMS
(1)   35/  21EFA8 :                     ; p - PMS
(1)   36/  21EFA8 :                     ; Keep panning bits 0, set the panning in your track.
(1)   37/  21EFA8 :                     ;
(1)   38/  21EFA8 :                     ; $22 LFO: %0000evvv
(1)   39/  21EFA8 :                     ; e - Enable
(1)   40/  21EFA8 :                     ; v - Value
(1)   41/  21EFA8 :                     ; $28 KEYS: %oooo0000
(1)   42/  21EFA8 :                     ; o - Operators 4-1
(1)   43/  21EFA8 :                     ; --------------------------------------------------------
(1)   44/  21EFA8 :                     
(1)   45/  21EFA8 :                     ; TODO: a macro for this.
(1)   46/  21EFA8 :                     
(1)   47/  21EFA8 :                     FmIns_Organ2:
(1)   48/  21EFA8 :                     		binclude "sound/instr/fm/organ2.gsx",$2478,$20
(1)   49/  21EFC8 :                     FmIns_Organ2a:
(1)   50/  21EFC8 :                     		binclude "sound/instr/fm/organ2a.gsx",$2478,$20
(1)   51/  21EFE8 :                     
(1)   52/  21EFE8 :                     ; FM3 Special
(1)   53/  21EFE8 :                     FmIns_Fm3_Explosion:
(1)   54/  21EFE8 :                     		binclude "sound/instr/fm/OLD/fm3_sfx_boomworm.gsx",$2478,$28
(1)   55/  21F010 :                     FmIns_Sp_OpenHat:
(1)   56/  21F010 :                     		binclude "sound/instr/fm/OLD/fm3_openhat.gsx",$2478,$28
(1)   57/  21F038 :                     FmIns_Sp_ClosedHat:
(1)   58/  21F038 :                     		binclude "sound/instr/fm/OLD/fm3_closedhat.gsx",$2478,$28
(1)   59/  21F060 :                     FmIns_Sp_Cowbell:
(1)   60/  21F060 :                     		binclude "sound/instr/fm/OLD/fm3_cowbell.gsx",$2478,$28
(1)   61/  21F088 :                     ; BASS
(1)   62/  21F088 :                     FmIns_Bass_1:
(1)   63/  21F088 :                     		binclude "sound/instr/fm/OLD/bass_low.gsx",$2478,$20
(1)   64/  21F0A8 :                     FmIns_Bass_2:
(1)   65/  21F0A8 :                     		binclude "sound/instr/fm/OLD/bass_strong.gsx",$2478,$20
(1)   66/  21F0C8 :                     FmIns_Bass_donna:
(1)   67/  21F0C8 :                     		binclude "sound/instr/fm/OLD/bass_feellove.gsx",$2478,$20
(1)   68/  21F0E8 :                     FmIns_Bass_groove:
(1)   69/  21F0E8 :                     		binclude "sound/instr/fm/OLD/bass_groove.gsx",$2478,$20
(1)   70/  21F108 :                     FmIns_Bass_groove_2:
(1)   71/  21F108 :                     		binclude "sound/instr/fm/OLD/bass_groove_2.gsx",$2478,$20
(1)   72/  21F128 :                     FmIns_Bass_groove_gem:
(1)   73/  21F128 :                     		binclude "sound/instr/fm/OLD/bass_groove_gem.gsx",$2478,$20
(1)   74/  21F148 :                     FmIns_Bass_italo:
(1)   75/  21F148 :                     		binclude "sound/instr/fm/OLD/bass_italo.gsx",$2478,$20
(1)   76/  21F168 :                     FmIns_Bass_duck:
(1)   77/  21F168 :                     		binclude "sound/instr/fm/OLD/bass_duck.gsx",$2478,$20
(1)   78/  21F188 :                     FmIns_Bass_4:
(1)   79/  21F188 :                     		binclude "sound/instr/fm/OLD/bass_4.gsx",$2478,$20
(1)   80/  21F1A8 :                     FmIns_Bass_8:
(1)   81/  21F1A8 :                     		binclude "sound/instr/fm/OLD/bass_8.gsx",$2478,$20
(1)   82/  21F1C8 :                     FmIns_Bass_club:
(1)   83/  21F1C8 :                     		binclude "sound/instr/fm/OLD/OLD_bass_club.gsx",$2478,$20
(1)   84/  21F1E8 :                     FmIns_Bass_calm:
(1)   85/  21F1E8 :                     		binclude "sound/instr/fm/OLD/bass_calm.gsx",$2478,$20
(1)   86/  21F208 :                     FmIns_Bass_low_1:
(1)   87/  21F208 :                     		binclude "sound/instr/fm/OLD/bass_low_1.bin"
(1)   88/  21F228 :                     FmIns_Bass_Oil:
(1)   89/  21F228 :                     		binclude "sound/instr/fm/OLD/bass_oil.gsx",$2478,$20
(1)   90/  21F248 :                     
(1)   91/  21F248 :                     ; PIANO
(1)   92/  21F248 :                     FmIns_PianoM1:
(1)   93/  21F248 :                     		binclude "sound/instr/fm/OLD/piano_m1.gsx",$2478,$20
(1)   94/  21F268 :                     FmIns_Piano_Aqua:
(1)   95/  21F268 :                     		binclude "sound/instr/fm/OLD/piano_aqua.gsx",$2478,$20
(1)   96/  21F288 :                     FmIns_Piano_Hard:
(1)   97/  21F288 :                     		binclude "sound/instr/fm/OLD/piano_hard.bin"
(1)   98/  21F2A8 :                     ; FmIns_Piano_m1:
(1)   99/  21F2A8 :                     ; 		binclude "sound/instr/fm/OLD/piano_m1.gsx",$2478,$20
(1)  100/  21F2A8 :                     
(1)  101/  21F2A8 :                     
(1)  102/  21F2A8 :                     FmIns_Synth_Plus:
(1)  103/  21F2A8 :                     		binclude "sound/instr/fm/OLD/OLD_synthplus.gsx",$2478,$20
(1)  104/  21F2C8 :                     
(1)  105/  21F2C8 :                     FmIns_Trumpet_1:
(1)  106/  21F2C8 :                     		binclude "sound/instr/fm/OLD/OLD_trumpet_1.gsx",$2478,$20
(1)  107/  21F2E8 :                     FmIns_Trumpet_carnival:
(1)  108/  21F2E8 :                     		binclude "sound/instr/fm/OLD/OLD_trumpet_carnivl.gsx",$2478,$20
(1)  109/  21F308 :                     
(1)  110/  21F308 :                     
(1)  111/  21F308 :                     FmIns_brass_eur:
(1)  112/  21F308 :                     		binclude "sound/instr/fm/OLD/OLD_brass_eur.gsx",$2478,$20
(1)  113/  21F328 :                     FmIns_Brass_Puy:
(1)  114/  21F328 :                     		binclude "sound/instr/fm/OLD/brass_puy.gsx",$2478,$20
(1)  115/  21F348 :                     
(1)  116/  21F348 :                     
(1)  117/  21F348 :                     FmIns_Organ_Ito:
(1)  118/  21F348 :                     		binclude "sound/instr/fm/OLD/organ_ito.gsx",$2478,$20
(1)  119/  21F368 :                     FmIns_Ding_Baseball:
(1)  120/  21F368 :                     		binclude "sound/instr/fm/OLD/ding_baseball.gsx",$2478,$20
(1)  121/  21F388 :                     FmIns_DrumKick_gem:
(1)  122/  21F388 :                     		binclude "sound/instr/fm/OLD/drum_kick_gem.gsx",$2478,$20
(1)  123/  21F3A8 :                     
(1)  124/  21F3A8 :                     
(1)  125/  21F3A8 :                     FmIns_Trumpet_2:
(1)  126/  21F3A8 :                     		binclude "sound/instr/fm/OLD/trumpet_2.gsx",$2478,$20
(1)  127/  21F3C8 :                     FmIns_Trumpet_puy:
(1)  128/  21F3C8 :                     		binclude "sound/instr/fm/OLD/trumpet_puy.gsx",$2478,$20
(1)  129/  21F3E8 :                     FmIns_Marimba:
(1)  130/  21F3E8 :                     		binclude "sound/instr/fm/OLD/marimba.gsx",$2478,$20
(1)  131/  21F408 :                     
(1)  132/  21F408 :                     FmIns_Ding_toy:
(1)  133/  21F408 :                     		binclude "sound/instr/fm/OLD/ding_toy.gsx",$2478,$20
(1)  134/  21F428 :                     
(1)  135/  21F428 :                     FmIns_Flaute_cave:
(1)  136/  21F428 :                     		binclude "sound/instr/fm/OLD/flaute_sea.gsx",$2478,$20
(1)  137/  21F448 :                     FmIns_Banjo_puy:
(1)  138/  21F448 :                     		binclude "sound/instr/fm/OLD/banjo_puy.gsx",$2478,$20
(1)  139/  21F468 :                     FmIns_PSynth_plus:
(1)  140/  21F468 :                     		binclude "sound/instr/fm/OLD/psynth_plus.gsx",$2478,$20
(1)  141/  21F488 :                     FmIns_Ding_1:
(1)  142/  21F488 :                     		binclude "sound/instr/fm/OLD/ding_gem.gsx",$2478,$20
(1)  143/  21F4A8 :                     FmIns_Trombone_gem:
(1)  144/  21F4A8 :                     		binclude "sound/instr/fm/OLD/trombone_gem.gsx",$2478,$20
(1)  145/  21F4C8 :                     FmIns_HBeat_tom:
(1)  146/  21F4C8 :                     		binclude "sound/instr/fm/OLD/nadia_tom.gsx",$2478,$20
(1)  147/  21F4E8 :                     FmIns_Guitar_bball:
(1)  148/  21F4E8 :                     		binclude "sound/instr/fm/OLD/guitar_bball.gsx",$2478,$20
(1)  149/  21F508 :                     
(1)  150/  21F508 :                     FmIns_Hats_1:
(1)  151/  21F508 :                     		binclude "sound/instr/fm/OLD/fm_hats_spot.bin"
(1)  152/  21F528 :                     FmIns_Hats_closed:
(1)  153/  21F528 :                     		binclude "sound/instr/fm/OLD/hats_closed.gsx",$2478,$20
(1)  154/  21F548 :                     FmIns_ClosedHat:
(1)  155/  21F548 :                     		binclude "sound/instr/fm/OLD/hats_closed.gsx",$2478,$20
(1)  156/  21F568 :                     
(1)  157/  21F568 :                     FmIns_Sewer_1:
(1)  158/  21F568 :                     		binclude "sound/instr/fm/OLD/sewer_1.bin"
(1)  159/  21F588 :                     
(1)  160/  21F588 :                     
(1)  161/  21F588 :                     FmIns_Ambient_dark:
(1)  162/  21F588 :                     		binclude "sound/instr/fm/OLD/ambient_dark.gsx",$2478,$20
(1)  163/  21F5A8 :                     FmIns_Ambient_spook:
(1)  164/  21F5A8 :                     		binclude "sound/instr/fm/OLD/ambient_spook.gsx",$2478,$20
(1)  165/  21F5C8 :                     FmIns_Ambient_3:
(1)  166/  21F5C8 :                     		binclude "sound/instr/fm/OLD/ambient_3.gsx",$2478,$20
(1)  167/  21F5E8 :                     
(1)  168/  21F5E8 :                     
(1)  169/  21F5E8 :                     ; FmIns_Guitar_bball:
(1)  170/  21F5E8 :                     ; 		binclude "sound/instr/fm/guitar_bball.gsx",$2478,$20
(1)  171/  21F5E8 :                     
     426/  21F5E8 :                     		include "sound/smpl_dac.asm"		; (MCD/CD32X ONLY) GEMA: DAC samples
(1)    1/  21F5E8 :                     ; ===========================================================================
(1)    2/  21F5E8 :                     ; --------------------------------------------------------
(1)    3/  21F5E8 :                     ; GEMA/Nikona DAC instruments
(1)    4/  21F5E8 :                     ;
(1)    5/  21F5E8 :                     ; This must be located at the 68k's 900000 area.
(1)    6/  21F5E8 :                     ; ** 68K BANK 0 only **
(1)    7/  21F5E8 :                     ;
(1)    8/  21F5E8 :                     ; BASE Samplerate is at 16000hz
(1)    9/  21F5E8 :                     ; --------------------------------------------------------
(1)   10/  21F5E8 :                     
(1)   11/  21F5E8 :                     	align $8000	; Start from a safe ROM-bank
(1)   12/  220000 :                     
(1)   13/  220000 :                     ; --------------------------------------------------------
(1)   14/  220000 :                     
(1)   15/  220000 :                     ; 	gSmplData Label,"filepath",loop_point(0-start)
(1)   16/  220000 :                     ;  	gSmplData PcmIns_test8,"sound/instr/smpl/test_8.wav",0
(1)   17/  220000 :                     ; 	gSmplData DacIns_Kick_techno,"sound/instr/smpl/ST-72_kick.wav",0
(1)   18/  220000 :                     ; 	gSmplData DacIns_Snare_techno,"sound/instr/smpl/ST-79_snare.wav",0
(1)   19/  220000 :                     ; 	gSmplData DacIns_Kick_wegot,"sound/instr/smpl/wegot_kick.wav",0
(1)   20/  220000 :                     
     427/  220000 :                     mdbank0_e:
     428/  220000 : (MACRO)              	data_bkend MCD_DBANK0,MCD_DBANK0_e,mdbank0_e-mdbank0
     428/   7D000 :                                     dephase
     428/   7D000 :                                     align $800
     428/   7D000 : =$7D000              MCD_DBANK0_E label *  ; <-- CD/CD32X ONLY
     428/   7D000 :  (MACRO-2)                           report "68K DATA BANK: MCD_DBANK0 (WORD-RAM)",MDBANK0_E-MDBANK0,$40000
     428/   7D000 :                     
     428/   7D000 :                     
     429/   7D000 :                     
     430/   7D000 :                     ; --------------------------------------------------------
     431/   7D000 :                     ; BANK 1
     432/   7D000 :                     ; --------------------------------------------------------
     433/   7D000 :                     
     434/   7D000 :                     ; 	data_bank MCD_DBANK1,-1
     435/   7D000 :                     ; 		org $200000-4
     436/   7D000 :                     ; 		dc.b "BNK1"
     437/   7D000 :                     ; 	data_bank_e MCD_DBANK1_e
     438/   7D000 :                     
     439/   7D000 :                     ; --------------------------------------------------------
     440/   7D000 :                     ; BANK 2
     441/   7D000 :                     ; --------------------------------------------------------
     442/   7D000 :                     
     443/   7D000 :                     ; 	data_bank MCD_DBANK2,-1
     444/   7D000 :                     ; 		org $300000-4
     445/   7D000 :                     ; 		dc.b "BNK2"
     446/   7D000 :                     ; 	data_bank_e MCD_DBANK2_e
     447/   7D000 :                     
     448/   7D000 :                     ; --------------------------------------------------------
     449/   7D000 :                     ; BANK 3
     450/   7D000 :                     ; --------------------------------------------------------
     451/   7D000 :                     
     452/   7D000 :                     ; 	data_bank MCD_DBANK3,-1
     453/   7D000 :                     ; 		org $400000-4
     454/   7D000 :                     ; 		dc.b "BNK3"
     455/   7D000 :                     ; 	data_bank_e MCD_DBANK3_e
     456/   7D000 :                     
     457/   7D000 :                     ; ====================================================================
     458/   7D000 :                     ; ----------------------------------------------------------------
     459/   7D000 :                     ; 32X/CD32X ONLY
     460/   7D000 :                     ;
     461/   7D000 :                     ; SDRAM DATA packages for each screen mode
     462/   7D000 :                     ;
     463/   7D000 :                     ; Usage:
     464/   7D000 :                     ; sdram_bank START_LABEL,END_LABEL
     465/   7D000 :                     ; (includes and bincludes)
     466/   7D000 :                     ; sdram_bank_e START_LABEL,END_LABEL
     467/   7D000 :                     ; ----------------------------------------------------------------
     468/   7D000 :                     
     469/   7D000 :                     ; ---------------------------------------------
     470/   7D000 :                     ; SCREEN 00
     471/   7D000 :                     ; ---------------------------------------------
     472/   7D000 :                     
     473/   7D000 : (MACRO)              	sdram_bkset MARSDATA_SCREEN00,MARSDATA_SCREEN00_e
     473/   7D000 :                                     align $800
     473/   7D000 :                     ; MARSDATA_DEFAULT:
     473/   7D000 : =$7D000              MARSDATA_SCREEN00 label *
     473/   7D000 : 0002 0EF4                           dc.l MARSDATA_SCREEN00_E-MARSDATA_SCREEN00
     473/ 6005110 :                                     phase SH2_USER_DATA
     474/ 6005110 :                     	include "game/screen_0/data_mgfx.asm"
(1)    1/ 6005110 :                     ; ===========================================================================
(1)    2/ 6005110 :                     ; ----------------------------------------------------------------
(1)    3/ 6005110 :                     ; Put your 32X graphics here
(1)    4/ 6005110 :                     ;
(1)    5/ 6005110 :                     ; This is stored on the Genesis side and then
(1)    6/ 6005110 :                     ; sent to SDRAM using DREQ.
(1)    7/ 6005110 :                     ;
(1)    8/ 6005110 :                     ; Labels MUST be aligned by 4
(1)    9/ 6005110 :                     ; ----------------------------------------------------------------
(1)   10/ 6005110 :                     
(1)   11/ 6005110 :                     		align 4
(1)   12/ 6005110 :                     ArtSSpr_Doremi:
(1)   13/ 6005110 :                     		binclude "game/screen_0/data/mars/objects/doremi/doremi_art.bin"
(1)   14/ 600ED10 :                     		align 4
(1)   15/ 600ED10 :                     ArtSSpr_Sophie:
(1)   16/ 600ED10 :                     		binclude "game/screen_0/data/mars/objects/sophie/sophie_art.bin"
(1)   17/ 6013B10 :                     		align 4
(1)   18/ 6013B10 :                     ArtMars_Scrn0:
(1)   19/ 6013B10 :                     		binclude "game/screen_0/data/mars/maps/test/data_art.bin"
(1)   20/ 6025310 :                     		align 4
(1)   21/ 6025310 :                     
(1)   22/ 6025310 :                     
(1)   23/ 6025310 :                     
     475/ 6025310 : (MACRO)              	sdram_bkend MARSDATA_SCREEN00,MARSDATA_SCREEN00_e
     475/ 6025310 :                                     align $2000     ; DREQ data-pack alignment
     475/   9DEF4 :                                     dephase
     475/   9DEF4 : =$9DEF4              MARSDATA_SCREEN00_E label *
     475/   9DEF4 :                                     align $800
     475/   9E000 :                     
     475/   9E000 :                     
     475/   9E000 :  (MACRO-2)                           report "SH2 SDRAM DATA: MARSDATA_SCREEN00",MARSDATA_SCREEN00_E-MARSDATA_SCREEN00,((CS3+$40000)-SH2_USER_DATA)
     476/   9E000 :                     
     477/   9E000 :                     ; ---------------------------------------------
     478/   9E000 :                     ; SCREEN 01
     479/   9E000 :                     ; ---------------------------------------------
     480/   9E000 :                     
     481/   9E000 : (MACRO)              	sdram_bkset MARSDATA_SCREEN01,MARSDATA_SCREEN01_e
     481/   9E000 :                                     align $800
     481/   9E000 :                     ; MARSDATA_DEFAULT:
     481/   9E000 : =$9E000              MARSDATA_SCREEN01 label *
     481/   9E000 : 0001 2EF4                           dc.l MARSDATA_SCREEN01_E-MARSDATA_SCREEN01
     481/ 6005110 :                                     phase SH2_USER_DATA
     482/ 6005110 :                     	include "game/screen_1/data_mgfx.asm"
(1)    1/ 6005110 :                     ; ===========================================================================
(1)    2/ 6005110 :                     ; ----------------------------------------------------------------
(1)    3/ 6005110 :                     ; Put your 32X graphics here, indexed or direct
(1)    4/ 6005110 :                     ;
(1)    5/ 6005110 :                     ; This is stored on the Genesis side and then
(1)    6/ 6005110 :                     ; sent to SDRAM using DREQ.
(1)    7/ 6005110 :                     ;
(1)    8/ 6005110 :                     ; Labels MUST be aligned by 4
(1)    9/ 6005110 :                     ; ----------------------------------------------------------------
(1)   10/ 6005110 :                     
(1)   11/ 6005110 :                     		align 4
(1)   12/ 6005110 :                     ArtMars_TEST:
(1)   13/ 6005110 :                     		binclude "game/screen_1/data/mars/maps/test/data_art.bin"
(1)   14/ 6016910 :                     		align 4
(1)   15/ 6016910 :                     
(1)   16/ 6016910 :                     
(1)   17/ 6016910 :                     
     483/ 6016910 : (MACRO)              	sdram_bkend MARSDATA_SCREEN01,MARSDATA_SCREEN01_e
     483/ 6016910 :                                     align $2000     ; DREQ data-pack alignment
     483/   B0EF4 :                                     dephase
     483/   B0EF4 : =$B0EF4              MARSDATA_SCREEN01_E label *
     483/   B0EF4 :                                     align $800
     483/   B1000 :                     
     483/   B1000 :                     
     483/   B1000 :  (MACRO-2)                           report "SH2 SDRAM DATA: MARSDATA_SCREEN01",MARSDATA_SCREEN01_E-MARSDATA_SCREEN01,((CS3+$40000)-SH2_USER_DATA)
     484/   B1000 :                     
     485/   B1000 :                     ; ====================================================================
     486/   B1000 :                     ; ----------------------------------------------------------------
     487/   B1000 :                     ; Cartridge DMA graphics data
     488/   B1000 :                     ;
     489/   B1000 :                     ; BANK-free on 32X Cartridge
     490/   B1000 :                     ; ----------------------------------------------------------------
     491/   B1000 :                     
     496/   B1000 :                     
     497/   B1000 :                     ; ====================================================================
     498/   B1000 :                     ; ---------------------------------------------
     499/   B1000 :                     ; End
     500/   B1000 :                     ; ---------------------------------------------
     501/   B1000 :                     
     502/   B1000 :                     ROM_END:
     504/   B1000 : (MACRO)              		rompad (ROM_END&$FFFF00)+$10
     504/   B1000 : =$10                 diff := (ROM_END&$FFFF00)+$10 - *
     504/   B1000 : 0000 0000 0000                              dc.b [diff]0
            B1006 : 0000 0000 0000 
            B100C : 0000 0000          
     505/   B1010 :                     ; .here:		rompad .here&$FF0000+$10000
     509/   B1010 :                     
 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 3 - 03/26/2024 04:57:42 AM


  Symbol Table (* = unused):
  --------------------------

 ADAPTER :                        0 - | *ADEN :                           1 - |
 ALV :                           24 - |
*ARCHITECTURE :                                      "x86_64-unknown-linux" - |
 ARTMARS_SCRN0 :            6013B10 C |  ARTMARS_TEST :             6005110 C |
 ARTSSPR_DOREMI :           6005110 C |  ARTSSPR_SOPHIE :           600ED10 C |
 ART_BIBI :                  20B454 C | *ART_BIBI_E :                20CC74 C |
 ART_DOREMI :                20CC74 C | *ART_DOREMI_E :              20D274 C |
 ART_EMILY :                 20D274 C | *ART_EMILY_E :               20FDF4 C |
*ART_SCN0_BG :               202A94 C | *ART_SCN0_BG_E :             20B454 C |
 ART_SISI :                  219C94 C |  ART_SISI_E :                21A274 C |
 ART_SOPHIE :                20FDF4 C | *ART_SOPHIE_E :              210914 C |
*ART_TEST :                  211514 C | *ART_TEST_E :                219C94 C |
 ASCII_FONT :                201E94 C |  ASCII_FONT_S1 :             210914 C |
 ASCII_PAL :       FFFFFFFFFFFF02E2 C |  ATK :                            8 - |
*BIGENDIAN :                      0 - |  BITCLICKL :                      0 - |
*BITCLICKM :                      2 - | *BITCLICKR :                      1 - |
*BITCLICKS :                      3 - |  BITDISPENBL :                    6 - |
 BITDMA :                         1 - |  BITDMAENBL :                     4 - |
*BITFIFOE :                       9 - | *BITFIFOF :                       8 - |
*BITHBLK :                        2 - | *BITHINTENBL :                    4 - |
*BITHVSTOP :                      1 - |  BITJOYA :                        6 - |
 BITJOYB :                        4 - |  BITJOYC :                        5 - |
 BITJOYDOWN :                     1 - |  BITJOYLEFT :                     2 - |
*BITJOYMODE :                     B - |  BITJOYRIGHT :                    3 - |
 BITJOYSTART :                    7 - |  BITJOYUP :                       0 - |
 BITJOYX :                        A - |  BITJOYY :                        9 - |
*BITJOYZ :                        8 - |  BITMAPMD :                       1 - |
 BITOBJ_FLIPH :                   0 - |  BITOBJ_FLIPV :                   1 - |
 BITOBJ_MARS :                    7 - | *BITODD :                         4 - |
*BITPAL :                         0 - | *BITSPRCOL :                      5 - |
*BITSPROVR :                      6 - | *BITV30 :                         3 - |
 BITVBLK :                        3 - | *BITVINT :                        7 - |
*BITVINTENBL :                    5 - | *BITWRAMMODE :                    2 - |
*BRANCHEXT :                      0 - | *BRMDEL :                         5 - |
*BRMDIR :                         7 - | *BRMFORMAT :                      6 - |
*BRMINIT :                        0 - | *BRMREAD :                        3 - |
*BRMSERCH :                       2 - | *BRMSTAT :                        1 - |
*BRMVERIFY :                      8 - | *BRMWRITE :                       4 - |
 CACHE_MASTER :             6001418 C |  CACHE_MASTER_E :           6001430 C |
 CACHE_SLAVE :              6001430 C |  CACHE_SLAVE_E :            6001690 C |
*CASESENSITIVE :                  0 - | *CBTCHKDISC :                     4 - |
*CBTCHKSTAT :                     5 - | *CBTINIT :                        0 - |
*CBTINT :                         1 - | *CBTIPDISC :                      6 - |
*CBTIPSTAT :                      7 - | *CBTOPENDISC :                    2 - |
*CBTOPENSTAT :                    3 - | *CBTSPDISC :                      8 - |
*CBTSPSTAT :                      9 - | *CDBCHK :                        80 - |
*CDBPAUSE :                      84 - | *CDBSTAT :                       81 - |
*CDBTOCREAD :                    83 - | *CDBTOCWRITE :                   82 - |
 CDCACK :                        8D - |  CDCREAD :                       8B - |
*CDCSETMODE :                    96 - | *CDCSTART :                      87 - |
*CDCSTARTP :                     88 - |  CDCSTAT :                       8A - |
 CDCSTOP :                       89 - |  CDCTRN :                        8C - |
 CDPCM_CLEN :                     4 C |  CDPCM_CREAD :                    8 C |
 CDPCM_ENV :                      D C |  CDPCM_FLAGS :                    0 C |
*CDPCM_FREEB :                    3 C |  CDPCM_INIT :                  643C C |
 CDPCM_INIT.CLR_PWM :          6450 C |  CDPCM_INIT.COPY_DATA :        6486 C |
 CDPCM_INIT.DATA_BLK :         6498 C |  CDPCM_INIT.WR_END :           645A C |
 CDPCM_LEN :                     14 C |  CDPCM_LOOP :                    18 C |
 CDPCM_NLEN :                    20 C |  CDPCM_NLOOP :                   24 C |
 CDPCM_NSTART :                  1C C |  CDPCM_PAN :                      C C |
 CDPCM_PITCH :                    E C |  CDPCM_READTABLE :             64B8 C |
 CDPCM_READTABLE.CDCOM_KEYOFF :                                        64F0 C |
 CDPCM_READTABLE.CDCOM_KEYON : 64FC C | *CDPCM_READTABLE.DONT_UPD :    64EE C |
 CDPCM_READTABLE.EFFECT_MOD :  6564 C |  CDPCM_READTABLE.EFFECT_ONLY : 6560 C |
 CDPCM_READTABLE.GET_TBL :     64C4 C |  CDPCM_READTABLE.NO_COMM :     64DE C |
 CDPCM_READTABLE.NO_KEYCUT :   64D6 C |  CDPCM_READTABLE.NO_KEYOFF :   64CE C |
 CDPCM_START :                   10 C |  CDPCM_STREAM :                6592 C |
 CDPCM_STREAM_IRQ :            659E C |  CDPCM_STREAM_RUN :            65A6 C |
 CDPCM_STREAM_RUN.END_POINT :  6694 C |  CDPCM_STREAM_RUN.FILL_MODE :  67F4 C |
 CDPCM_STREAM_RUN.FIRST_FILL : 670E C |  CDPCM_STREAM_RUN.FORCE_OFF :  65E2 C |
 CDPCM_STREAM_RUN.GET_ADDR :   65C0 C |  CDPCM_STREAM_RUN.KEEP_STRM :  65EC C |
 CDPCM_STREAM_RUN.LOOP_BLKL :  67F6 C | *CDPCM_STREAM_RUN.LOOP_POINT : 6668 C |
 CDPCM_STREAM_RUN.LOOP_STRM :  6678 C |  CDPCM_STREAM_RUN.LOWHALF :    662A C |
 CDPCM_STREAM_RUN.MAKE_BLK_STRM :                                      664C C |
 CDPCM_STREAM_RUN.MAKE_LBLK :  6798 C |  CDPCM_STREAM_RUN.NON_STRM :   6634 C |
 CDPCM_STREAM_RUN.NON_UPD :    65F6 C |  CDPCM_STREAM_RUN.NOT_END :    66D4 C |
 CDPCM_STREAM_RUN.NO_REFILL :  65D2 C |
 CDPCM_STREAM_RUN.SET_ENDLOOP :                                        6778 C |
 CDPCM_STREAM_RUN.SET_NONSTOP :                                        677C C |
 CDPCM_STREAM_RUN.SMALL_SAMPL :                                        676A C |
 CDPCM_STREAM_RUN.STLEN_IT :   66A2 C |  CDPCM_STREAM_RUN.STRLEN_IT :  6684 C |
 CDPCM_STREAM_RUN.UPDATE_SET : 66D6 C |  CDPCM_STREAM_RUN.WAVE_BLKL :  67B2 C |
*CDPCM_STRMF :                    1 C |  CDPCM_STRMHALF :                 2 C |
 CDPCM_WAIT :                  6434 C |  CDPCM_WAVTOPCM :              680C C |
 CDPCM_WAVTOPCM.WAVE_LIST :    6816 C |  CDRAMDST :                      31 C |
 CDRAMLEN :                      30 C |  CDRAMSRC :                      33 C |
 CDRAMSRCB :                     35 C |  CDREGION :                       0 - |
 CHECK_THISRAM :   FFFFFFFFFFFFA000 C |  CHIP_ENV :                    12BF C |
 CHIP_ENV.ATKEND :             1345 C | *CHIP_ENV.ATKZERO :            1348 C |
 CHIP_ENV.CHK2 :               134E C |  CHIP_ENV.CHK4 :               1383 C |
 CHIP_ENV.CKOF :               12E6 C |  CHIP_ENV.CKON :               12F9 C |
*CHIP_ENV.DECTMR :             1352 C |  CHIP_ENV.DKADD :              136C C |
 CHIP_ENV.DKSAV :              1374 C |  CHIP_ENV.DKYEND :             1379 C |
 CHIP_ENV.DO_NFREQ :           13D8 C |  CHIP_ENV.ENVPROC :            1317 C |
 CHIP_ENV.KILLENV :            1399 C | *CHIP_ENV.NBLOCK :             1317 C |
 CHIP_ENV.NORMAL :             13D3 C |  CHIP_ENV.NOUPD :              1419 C |
 CHIP_ENV.NSKIP :              130E C |  CHIP_ENV.SILNC_3 :            13CF C |
 CHIP_ENV.VEDLP :              13A1 C |  CHIP_ENV.VLMUCH :             1405 C |
 CHIP_ENV.VLOOP :              12CE C |  CHIP_ENV.VONLY :              13FB C |
 CHNL_CHIP :                      1 - |  CHNL_EFFARG :                    6 - |
 CHNL_EFFID :                     5 - |  CHNL_FLAGS :                     0 - |
 CHNL_INS :                       3 - |  CHNL_NOTE :                      2 - |
 CHNL_TYPE :                      7 - |  CHNL_VOL :                       4 - |
*CLICKL :                         2 - | *CLICKM :                         4 - |
*CLICKR :                         1 - | *CLICKS :                         8 - |
 CMDINTCLR :                     1A - |  CMDIRQ_ON :                      2 - |
 COM :                            0 - |  COMM0 :                         20 - |
*COMM1 :                         21 - | *COMM10 :                        2A - |
*COMM11 :                        2B - |  COMM12 :                        2C - |
*COMM13 :                        2D - |  COMM14 :                        2E - |
*COMM15 :                        2F - |  COMM2 :                         22 - |
*COMM3 :                         23 - |  COMM4 :                         24 - |
*COMM5 :                         25 - | *COMM6 :                         26 - |
*COMM7 :                         27 - |  COMM8 :                         28 - |
*COMM9 :                         29 - |  COMMZFIFO :                     40 C |
 COMMZREAD :                     3F C |  COMMZROMBLK :                   2F C |
 COMMZWRITE :                    2E C | *COMPMODE :                       0 - |
*CONSTPI :        3.141592653589793 - |  CONTROLLER_1 :    FFFFFFFFFFFFC004 - |
 CONTROLLER_2 :    FFFFFFFFFFFFC014 - | *CS0 :                            0 - |
*CS1 :                      2000000 - |  CS2 :                      4000000 - |
 CS3 :                      6000000 - |  CTREG :                          F - |
 CURRTICKBITS :                1C98 C | *CUSTOM :                         0 - |
 CYCLE :                         32 - |  DAC_FILL :                      20 C |
 DAC_ME :                         8 C |  DAC_OFF :                     1454 C |
 DAC_ON :                      143F C |  DAC_PLAY :                    1469 C |
 DAC_REFILL :                  149D C |  DAC_REFILL.DACFILL_END :      155C C |
 DAC_REFILL.DACFILL_LOOP :     1515 C |  DAC_REFILL.DACFILL_RET :      155F C |
 DAC_REFILL.DAC_OVER :         14EB C |  DATE :                "03/26/2024" - |
 DDACCNTR :                    1C87 C |  DDACFIFOMID :                 1C83 C |
 DDACPNTR :                    1C84 C |  DIFF :                          10 - |
*DISPENBL :                      40 - |  DKY :                            C - |
*DMAENBL :                       10 - | *DOTTEDSTRUCTS :                  0 - |
 DREQCTL :                        6 - |  DREQDEST :                       C - |
 DREQFIFO :                      12 - |  DREQLEN :                       10 - |
*DREQSOURCE :                     8 - |  DREQ_PALETTE :                   0 C |
 DREQ_SCRLBUFF :                600 C |  DREQ_SCRLDATA :                200 C |
 DREQ_SUPERSPR :                610 C | *DRVINIT :                       10 - |
*DRVOPEN :                        A - |  DRV_LOOP :                      54 C |
 DRV_LOOP.CMND_0 :               ED C |  DRV_LOOP.CMND_1 :               F0 C |
 DRV_LOOP.CMND_2 :              109 C |  DRV_LOOP.CMND_3 :              146 C |
 DRV_LOOP.CMND_5 :              184 C |  DRV_LOOP.CMND_6 :              1BD C |
 DRV_LOOP.CMND_7 :              1F6 C |  DRV_LOOP.CMND_RDSLOT :         214 C |
 DRV_LOOP.DEL_ALL :             17D C |  DRV_LOOP.GETCBYTEL :            C0 C |
 DRV_LOOP.GRAB_ARG :             BE C |  DRV_LOOP.LIST :                 DD C |
 DRV_LOOP.NEITHER :              94 C |  DRV_LOOP.NEXT_CMD :             9B C |
 DRV_LOOP.NOBEATS :              7B C |  DRV_LOOP.NOTICKS :              6E C |
 DRV_LOOP.NOT_PAL :             209 C |  DRV_LOOP.SRCH_DEL :            164 C |
 DRV_LOOP.SRCH_FVOL :           1A2 C |  DRV_LOOP.SRCH_MODE :           12C C |
 DRV_LOOP.SRCH_SLOT :           227 C |  DRV_LOOP.SRCH_VOL :            1DB C |
 DRV_LOOP.WRTTO_DEL :           171 C |  DRV_LOOP.WRTTO_FVOL :          1AF C |
 DRV_LOOP.WRTTO_SLOT :          13B C |  DRV_LOOP.WRTTO_VOL :           1E8 C |
 DTBL_MULTI :                   847 C |  DTBL_SINGL :                   85D C |
 DTBL_SINGL.CHNL_ULNK :        103D C |  DTBL_SINGL.CHNL_ULNKCUT :     1037 C |
 DTBL_SINGL.CHNL_ULNKOFF :     103D C |  DTBL_SINGL.COMN_PANLIST :      DE5 C |
 DTBL_SINGL.DAC_CUT :           BA3 C |  DTBL_SINGL.DAC_OFF :           BA9 C |
 DTBL_SINGL.DAC_PITCH :         BAC C |  DTBL_SINGL.D_CONT :            D9E C |
 DTBL_SINGL.EFFC :              D0B C |  DTBL_SINGL.EFFC_D :            D26 C |
 DTBL_SINGL.EFFC_E :            D69 C |  DTBL_SINGL.EFFC_F :            D7E C |
 DTBL_SINGL.EFFC_X :            D9F C |  DTBL_SINGL.FINE_DOWN :         D41 C |
 DTBL_SINGL.FINE_UP :           D55 C |  DTBL_SINGL.FM_CINDX :          B40 C |
 DTBL_SINGL.FM_CUT :            A8B C |  DTBL_SINGL.FM_HASVOL :         FD1 C |
 DTBL_SINGL.FM_KEYOFF :         A94 C |  DTBL_SINGL.FM_OFF :            A85 C |
 DTBL_SINGL.FM_SETFREQ :        AB3 C |  DTBL_SINGL.FM_SETRLIST :       EE8 C |
 DTBL_SINGL.FM_TLOFF :          A9C C |  DTBL_SINGL.FM_WRTALPAN :       B48 C |
 DTBL_SINGL.FM_WRTLVOL :        ACA C |  DTBL_SINGL.FND_OCT :          1022 C |
 DTBL_SINGL.FROM_PSGN :         957 C |  DTBL_SINGL.GET_OCT :          1017 C |
 DTBL_SINGL.INST :              E16 C |  DTBL_SINGL.INS_DAC :           EF8 C |
 DTBL_SINGL.INS_FM :            E77 C |  DTBL_SINGL.INS_PCM :           F4C C |
 DTBL_SINGL.INS_PSG :           E41 C |  DTBL_SINGL.INS_PSGN :          E3B C |
 DTBL_SINGL.INS_PWM :           F84 C | *DTBL_SINGL.INVL_INS :          E3A C |
 DTBL_SINGL.KEEP_TLMX :         B35 C |  DTBL_SINGL.KYCUT_PSG :         9A3 C |
 DTBL_SINGL.KYCUT_PSGN :        9A0 C |  DTBL_SINGL.KYOFF_PSG :         996 C |
 DTBL_SINGL.KYOFF_PSGN :        993 C |  DTBL_SINGL.KYPSGN_HATOFF :     9AD C |
 DTBL_SINGL.LINKED :            8C7 C |  DTBL_SINGL.MKFM_SET :          A16 C |
*DTBL_SINGL.MKPCM_PROC :        C0E C |  DTBL_SINGL.MKPCM_WRTON :       C0B C |
 DTBL_SINGL.MK_DAC :            B7E C |  DTBL_SINGL.MK_FM :             9B4 C |
 DTBL_SINGL.MK_FMSPC :          A2A C |  DTBL_SINGL.MK_LIST :           902 C |
 DTBL_SINGL.MK_PCM :            BD2 C |  DTBL_SINGL.MK_PSG :            936 C |
 DTBL_SINGL.MK_PSGN :           910 C |  DTBL_SINGL.MK_PWM :            C63 C |
 DTBL_SINGL.MP_RESET :          C09 C |  DTBL_SINGL.NEW_ROMDAT :        EAB C |
*DTBL_SINGL.NOFM_NOTE :         A29 C |  DTBL_SINGL.NORM_DOWN :         D3F C |
 DTBL_SINGL.NORM_UP :           D57 C |  DTBL_SINGL.NOTE :              FC7 C |
 DTBL_SINGL.NOT_DAC :           9D3 C |  DTBL_SINGL.NOT_DSPC :          9E8 C |
 DTBL_SINGL.NO_LFO :            B7D C |  DTBL_SINGL.N_FM :             100D C |
 DTBL_SINGL.N_INDX :            FF9 C |  DTBL_SINGL.N_PSGN :           1008 C |
 DTBL_SINGL.N_STFREQ :          FFA C |  DTBL_SINGL.PAN_MCD :           DCF C |
 DTBL_SINGL.PCM_CUT :           C56 C |  DTBL_SINGL.PCM_EFFC :          BFB C |
 DTBL_SINGL.PCM_NOTE :          BFF C |  DTBL_SINGL.PCM_OFF :           C4F C |
 DTBL_SINGL.PCM_PANLIST :       DED C |  DTBL_SINGL.PCM_SETCOFF :       C5B C |
 DTBL_SINGL.PSG_KEYON :         97E C |  DTBL_SINGL.PWM_CUT :           CDC C |
 DTBL_SINGL.PWM_OFF :           CD5 C |  DTBL_SINGL.PWM_SETCOFF :       CE1 C |
 DTBL_SINGL.PW_EFFC :           C8D C |  DTBL_SINGL.PW_NOTE :           C91 C |
 DTBL_SINGL.PW_SEND :           C93 C |  DTBL_SINGL.RCYL_COM :          8B2 C |
 DTBL_SINGL.READFREQ_PCM :      CEB C |  DTBL_SINGL.READFREQ_PWM :      CF0 C |
 DTBL_SINGL.RES_PAN :           DC5 C |  DTBL_SINGL.SAME_PATCH :        EE3 C |
 DTBL_SINGL.SAVE_ARG :          D93 C |  DTBL_SINGL.SET_WAVFREQ :       CF3 C |
 DTBL_SINGL.SILN_DAC :          8BE C |  DTBL_SINGL.SILN_FM :           8C1 C |
 DTBL_SINGL.SILN_PCM :          89C C |  DTBL_SINGL.SILN_PSG :          895 C |
 DTBL_SINGL.SILN_PSG_N :        891 C |  DTBL_SINGL.SILN_PWM :          8A8 C |
 DTBL_SINGL.SPCREGLIST :        A7D C |  DTBL_SINGL.TL_DOWN :           AA8 C |
 DTBL_SINGL.VMUCH :             98D C |  DTBL_SINGL.VOLU :              E0D C |
 DTBL_SINGL.VOL_DVLD :          D65 C |  DTBL_SINGL.VPCM_CARRY :        C3C C |
 DTBL_SINGL.VPCM_SILN :         C39 C |  DTBL_SINGL.VPCM_ZERO :         C3D C |
 DTBL_SINGL.VPWM_MUCH :         CB1 C |  DTBL_SINGL.VPWM_SILN :         CAF C |
 DTBL_SINGL.WRITE_TL :          B2E C |  DTBL_SINGL.WR_SPC :            A60 C |
 DTH :                           20 - |  DTL :                           1C - |
 DWAVEBUFF :                   1D00 C |  EMU :                            0 - |
 ENV :                            1 - | *EXT_3 :                          C C |
*EXT_4 :                          E C | *FALSE :                          0 - |
 FDH :                            7 - |  FDL :                            5 - |
 FDRCHG :                        86 - |  FDRSET :                        85 - |
*FEN :                            2 - |  FILE_SUBDATA :                6058 C |
*FILLDATA :                       8 - | *FILLLENGTH :                     4 - |
*FILLSTART :                      6 - |  FLG :                           28 - |
 FM :                            80 - |  FMCACH_1 :                    177C C |
 FMCACH_2 :                    17A4 C |  FMCACH_3 :                    17CC C |
 FMCACH_4 :                    17F4 C |  FMCACH_5 :                    181C C |
 FMCACH_6 :                    1844 C |  FMCACH_LIST :                 1C70 C |
 FMFREQ_LIST :                 156E C | *FMINS_AMBIENT_3 :           21F5C8 C |
*FMINS_AMBIENT_DARK :        21F588 C | *FMINS_AMBIENT_SPOOK :       21F5A8 C |
*FMINS_BANJO_PUY :           21F448 C | *FMINS_BASS_1 :              21F088 C |
*FMINS_BASS_2 :              21F0A8 C | *FMINS_BASS_4 :              21F188 C |
*FMINS_BASS_8 :              21F1A8 C | *FMINS_BASS_CALM :           21F1E8 C |
*FMINS_BASS_CLUB :           21F1C8 C | *FMINS_BASS_DONNA :          21F0C8 C |
*FMINS_BASS_DUCK :           21F168 C | *FMINS_BASS_GROOVE :         21F0E8 C |
*FMINS_BASS_GROOVE_2 :       21F108 C | *FMINS_BASS_GROOVE_GEM :     21F128 C |
*FMINS_BASS_ITALO :          21F148 C | *FMINS_BASS_LOW_1 :          21F208 C |
*FMINS_BASS_OIL :            21F228 C | *FMINS_BRASS_EUR :           21F308 C |
*FMINS_BRASS_PUY :           21F328 C | *FMINS_CLOSEDHAT :           21F548 C |
*FMINS_DING_1 :              21F488 C | *FMINS_DING_BASEBALL :       21F368 C |
*FMINS_DING_TOY :            21F408 C | *FMINS_DRUMKICK_GEM :        21F388 C |
*FMINS_FLAUTE_CAVE :         21F428 C | *FMINS_FM3_EXPLOSION :       21EFE8 C |
*FMINS_GUITAR_BBALL :        21F4E8 C | *FMINS_HATS_1 :              21F508 C |
*FMINS_HATS_CLOSED :         21F528 C | *FMINS_HBEAT_TOM :           21F4C8 C |
*FMINS_MARIMBA :             21F3E8 C | *FMINS_ORGAN2 :              21EFA8 C |
*FMINS_ORGAN2A :             21EFC8 C | *FMINS_ORGAN_ITO :           21F348 C |
*FMINS_PIANOM1 :             21F248 C | *FMINS_PIANO_AQUA :          21F268 C |
*FMINS_PIANO_HARD :          21F288 C | *FMINS_PSYNTH_PLUS :         21F468 C |
*FMINS_SEWER_1 :             21F568 C | *FMINS_SP_CLOSEDHAT :        21F038 C |
*FMINS_SP_COWBELL :          21F060 C | *FMINS_SP_OPENHAT :          21F010 C |
*FMINS_SYNTH_PLUS :          21F2A8 C | *FMINS_TROMBONE_GEM :        21F4A8 C |
*FMINS_TRUMPET_1 :           21F2C8 C | *FMINS_TRUMPET_2 :           21F3A8 C |
*FMINS_TRUMPET_CARNIVAL :    21F2E8 C | *FMINS_TRUMPET_PUY :         21F3C8 C |
 FMSPECIAL :                   1C82 C |  FM_AUTOREG :                  1425 C |
 FM_SEND_1 :                   1429 C |  FM_SEND_2 :                   1434 C |
 FRAMECLEAR :                  1A5C C |  FRAMECLEAR.FEN0 :             1A86 C |
 FRAMECLEAR.FILL0 :            1A7C C |  FRAMECLEAR.FM1 :              1A66 C |
 FRAMECTL :                       B - | *FS :                             1 - |
*FULLPMMU :                       1 - |  GEMADMAPAUSE :    FFFFFFFFFFFF0164 C |
 GEMADMARESUME :   FFFFFFFFFFFF0186 C |  GEMAFADETRACK :   FFFFFFFFFFFF0216 C |
 GEMAMSTRLISTPOS :               1C C |  GEMAPLAYTRACK :   FFFFFFFFFFFF01C0 C |
 GEMASETBEATS :    FFFFFFFFFFFF024E C |
 GEMASETMASTERLIST :                                       FFFFFFFFFFFF01AE C |
 GEMASETTRACKVOL : FFFFFFFFFFFF0232 C |  GEMASTOPALL :     FFFFFFFFFFFF01FA C |
 GEMASTOPTRACK :   FFFFFFFFFFFF01DE C |  GEMATEST :        FFFFFFFFFFFF01A0 C |
 GEMATRK_ARENA1 :            21A2EF C |  GEMATRK_ARENA1.BLK :        21A2FD C |
 GEMATRK_ARENA1.INS :        21D1F9 C |  GEMATRK_ARENA1.PATT :       21A327 C |
 GEMATRK_ASTRAL :            21D251 C |  GEMATRK_ASTRAL.BLK :        21D25F C |
 GEMATRK_ASTRAL.INS :        21EED8 C |  GEMATRK_ASTRAL.PATT :       21D27B C |
 GEMATRK_TEST :              21A280 C |  GEMATRK_TEST.BLK :          21A28E C |
 GEMATRK_TEST.INS :          21A2E7 C |  GEMATRK_TEST.PAT :          21A291 C |
 GEMA_INIT :                   117A C |  GEMA_INIT.END_SETUP :         11E5 C |
 GEMA_INIT.SETUP_LIST :        11BA C |  GEMA_INIT.ST_COPY :           11D9 C |
 GEMA_LASTBANK :               1563 C |  GEMA_LASTBANK.WRITE :         1568 C |
 GEMA_MASTERLIST :           21A274 C |  GET_TICK :                    11E6 C |
 GET_TICK.CTNOTICK :           1203 C |  GLBL_LASTORG :    FFFFFFFFFFFFD404 - |
 GLBL_LASTPC :     FFFFFFFFFFFF2000 - | *HAS64 :                          1 - |
*HASDSP :                         0 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - | *HBLK :                          40 - |
*HCOUNT :                         5 - |  HEADEROUT :                   1C9F C |
 HEADEROUT_E :                 1CAD C |  HINTCLR :                       18 - |
*HINTENBL :                      10 - |  HINT_DEFAULT :    FFFFFFFFFFFF1668 C |
*HIRQ_ON :                        4 - |  HOT_START :                   1B58 C |
*HVSTOP :                         2 - |  ICDALLEND :                   1B80 C |
 ICDALLEND.MASTER :            1BF6 C |  ICDALLEND.SEND_CODE :         1BD4 C |
 ICDALLEND.SEND_HALF :         1BA6 C |  ICDALLEND.SEND_HEAD :         1BC2 C |
 ICDALLEND.SLAVE :             1C00 C |  ICDALLEND.WAIT_ADAPTER :      1BDA C |
 ICDALLEND.WAIT_F0 :           1BAC C |  ICDALLEND.WAIT_F1 :           1B8C C |
 ICDALLEND.WAIT_F1FB :         1BEE C |  ICDALLEND.WAIT_FB :           1B86 C |
 ICDALLEND.WAIT_MSTR :         1C0A C |  ICDALLEND.WAIT_SH2 :          1C2C C |
 ICDALLEND.WAIT_SLV :          1C10 C | *INEXTMODE :                      0 - |
*INLWORDMODE :                    0 - | *INMAXMODE :                      0 - |
*INSRCMODE :                      0 - |  INSTLISTOUT :                 1CB9 C |
*INSUPMODE :                      1 - | *INTMASK :                        1 - |
 INT_M_LIST :               60002A0 C |  INT_S_LIST :               60002E0 C |
 IP_END :                       388 C |  IP_START :                     356 C |
 IP_START.COLOR_OUT :           374 C |  IP_START.WAIT_VINT :           35C C |
 ISOFILELIST :                 B844 C |  ISOFILELIST_E :               C000 C |
 ISO_FILELIST :                6B04 C |  ISO_OUTPUT :                  EB04 C |
 JOYA :                          40 - |  JOYB :                          10 - |
 JOYC :                          20 - |  JOYDOWN :                        2 - |
*JOYID_MD :                       D - |  JOYID_MOUSE :                    3 - |
*JOYID_MS :                       F - |  JOYLEFT :                        4 - |
*JOYMODE :                      800 - |  JOYRIGHT :                       8 - |
*JOYSTART :                      80 - |  JOYUP :                          1 - |
*JOYX :                         400 - | *JOYY :                         200 - |
*JOYZ :                         100 - |  LCHWIDTH :                      34 - |
*LEDSET :                        95 - |  LEV :                            4 - |
*LISTON :                         3 - |  LITERAL_F_00000000_1 :     60004C0 C |
 LITERAL_F_00000001_1 :     6000664 C |  LITERAL_F_00000002_1 :     6000668 C |
 LITERAL_F_00000003_1 :     600066C C |  LITERAL_F_00000004_1 :     6000672 C |
 LITERAL_F_00000005_1 :     6000674 C |  LITERAL_F_00000006_1 :     60006EC C |
 LITERAL_F_00000007_1 :     60007CC C |  LITERAL_F_00000008_1 :     60007E0 C |
 LITERAL_F_00000009_1 :     60007E8 C |  LITERAL_F_0000000A_1 :     60007EC C |
 LITERAL_F_0000000B_1 :     600091C C |  LITERAL_F_0000000C_1 :     6000920 C |
 LITERAL_F_0000000D_1 :     600092A C |  LITERAL_F_0000000E_1 :     6000924 C |
 LITERAL_F_0000000F_1 :     6000AA2 C |  LITERAL_F_00000010_1 :     6000AA4 C |
 LITERAL_F_00000011_1 :     6000AA8 C |  LITERAL_F_00000012_1 :     6000A9C C |
 LITERAL_F_00000013_1 :     6000B4C C |  LITERAL_F_00000014_1 :     6000B54 C |
 LITERAL_F_00000015_1 :     6000B76 C |  LITERAL_F_00000016_1 :     6000B58 C |
 LITERAL_F_00000017_1 :     6000B64 C |  LITERAL_F_00000018_1 :     6001190 C |
 LITERAL_F_00000019_1 :     6001194 C |  LITERAL_F_0000001A_1 :         124 C |
 LITERAL_L_06000000_1 :     60004A8 C |  LITERAL_L_06000000_2 :     60007C8 C |
 LITERAL_L_06000128_1 :     6000B48 C |  LITERAL_L_0601FFC8_1 :     60007D4 C |
 LITERAL_L_06040000_1 :     60007D8 C |  LITERAL_L_20000000_1 :     60004AC C |
 LITERAL_L_20004000_1 :     60004A4 C |  LITERAL_L_20004000_2 :     60006E0 C |
 LITERAL_L_20004000_3 :     60007F0 C |  LITERAL_L_20004000_4 :     6000B5C C |
 LITERAL_L_20004000_5 :     6000C70 C |  LITERAL_L_20004000_6 :     6000D00 C |
 LITERAL_L_20004012_1 :     60004B0 C |  LITERAL_L_20004016_1 :     60004B8 C |
 LITERAL_L_20004016_2 :     60006DC C |  LITERAL_L_20004018_1 :     60004B4 C |
 LITERAL_L_20004018_2 :     60006D8 C |  LITERAL_L_2000401A_1 :     60004A0 C |
 LITERAL_L_2000401A_2 :     6000658 C |  LITERAL_L_2000401C_1 :     600049C C |
 LITERAL_L_2000401C_2 :         11C C |  LITERAL_L_20004020_1 :     60007E4 C |
 LITERAL_L_20004020_2 :     6000B50 C |  LITERAL_L_20004022_1 :     6000378 C |
 LITERAL_L_20004024_1 :     600037C C |  LITERAL_L_20004028_1 :     6000660 C |
 LITERAL_L_2000402C_1 :     6000498 C |  LITERAL_L_2000402C_2 :     600090C C |
 LITERAL_L_2000402C_3 :     6000B60 C |  LITERAL_L_2000402D_1 :     6000914 C |
 LITERAL_L_2000402E_1 :     600065C C |  LITERAL_L_2000402E_2 :     60006E4 C |
 LITERAL_L_2000402E_3 :     60007F4 C |  LITERAL_L_2000402E_4 :     6000BA8 C |
 LITERAL_L_2000402F_1 :     6000BAC C |  LITERAL_L_20004034_1 :         128 C |
 LITERAL_L_20004038_1 :         120 C |  LITERAL_L_20004100_1 :     60007D0 C |
 LITERAL_L_20004100_2 :     6000910 C |  LITERAL_L_20004100_3 :     6000D04 C |
 LITERAL_L_20004200_1 :     6000918 C |  LITERAL_L_24000000_1 :     60007DC C |
 LITERAL_L_24000000_2 :     6000A98 C |  LITERAL_L_24000000_3 :     6000D08 C |
 LITERAL_L_24000000_4 :     6000F60 C |  LITERAL_L_24020000_1 :     6001000 C |
 LITERAL_L_4D5F4F4B_1 :     60004C4 C |  LITERAL_L_535F4F4B_1 :     60006F0 C |
 LITERAL_L_FFFFFFFFC0000000_1 :                                     6000C1C C |
 LITERAL_L_FFFFFFFFC00007F8_1 :                                     60004BC C |
 LITERAL_L_FFFFFFFFC00007F8_2 :                                     60006E8 C |
 LITERAL_L_FFFFFFFFC0000800_1 :                                     60007C4 C |
 LITERAL_L_FFFFFFFFC0000800_2 :                                     6000B44 C |
 LITERAL_L_FFFFFFFFC0000800_3 :                                     6000C18 C |
 LITERAL_W_0080_1 :         6000C22 C |  LITERAL_W_0080_2 :         6000D0C C |
 LITERAL_W_0080_3 :             12E C |  LITERAL_W_00A2_1 :         6000D14 C |
 LITERAL_W_00F0_1 :         60004CE C |  LITERAL_W_00F0_2 :         60006F6 C |
 LITERAL_W_00F0_3 :         6000928 C |  LITERAL_W_00F0_4 :         6000AAA C |
 LITERAL_W_00F0_5 :         6000F68 C |  LITERAL_W_0100_1 :         6000D10 C |
 LITERAL_W_0105_1 :         6000C74 C |  LITERAL_W_0140_1 :         6000F66 C |
 LITERAL_W_0140_2 :         600130C C |  LITERAL_W_0150_1 :         6000D0E C |
 LITERAL_W_0200_1 :         6000AA6 C |  LITERAL_W_0200_2 :         6000D12 C |
 LITERAL_W_0530_1 :         60007FC C |  LITERAL_W_0530_2 :         6000B6C C |
 LITERAL_W_059F_1 :         6000C76 C |  LITERAL_W_0600_1 :         600092C C |
 LITERAL_W_0600_2 :         6000AA0 C |  LITERAL_W_0610_1 :         6001004 C |
 LITERAL_W_0610_2 :         6001198 C |  LITERAL_W_07FF_1 :         6000F64 C |
 LITERAL_W_07FF_2 :         600119A C |  LITERAL_W_07FF_3 :             130 C |
 LITERAL_W_44E0_1 :         60004CA C |  LITERAL_W_44E5_1 :         60004CC C |
 LITERAL_W_4800_1 :         6000800 C |  LITERAL_W_4800_2 :         6000B70 C |
 LITERAL_W_5A00_1 :         6000C50 C |  LITERAL_W_A518_1 :         6000804 C |
 LITERAL_W_A518_2 :         6000B74 C |  LITERAL_W_A538_1 :         6000C52 C |
 LITERAL_W_FE10_1 :         60004C8 C |  LITERAL_W_FE10_2 :         60004EC C |
 LITERAL_W_FE10_3 :         6000670 C |  LITERAL_W_FE10_4 :         60006F4 C |
 LITERAL_W_FE10_5 :         60007F8 C |  LITERAL_W_FE10_6 :         6000B68 C |
 LITERAL_W_FE10_7 :             12C C |  LITERAL_W_FE80_1 :         6000802 C |
 LITERAL_W_FE80_2 :         6000B72 C |  LITERAL_W_FE80_3 :         6000C4E C |
 LITERAL_W_FE92_1 :         6000C20 C |  LITERAL_W_FE92_2 :         6000C4C C |
 LITERAL_W_FEE2_1 :         60007FA C |  LITERAL_W_FEE2_2 :         6000B6A C |
 LITERAL_W_FEE4_1 :         60007FE C |  LITERAL_W_FEE4_2 :         6000B6E C |
*LITR_MARSVIDEO_INIT :      60007C0 C |  LSH :                            B - |
 LSL :                            9 - | *MACEXP :                         7 - |
 MAPMARS_SCRN0 :             200000 C |  MAPMARS_TEST :              201128 C |
*MAP_SCR0_BG :               2003B0 C | *MAP_TEST :                  201558 C |
 MARS :                           0 - |  MARSBLOCK :                     37 C |
 MARSCD :                         1 - |  MARSCD_BOOT :                 1A2E C |
*MARSCD_BOOT.COLD_START :      1A52 C |  MARSCD_BOOT.SH_WAIT :         1A40 C |
 MARSDATA_SCREEN00 :          7D000 C |  MARSDATA_SCREEN00_E :        9DEF4 C |
 MARSDATA_SCREEN01 :          9E000 C |  MARSDATA_SCREEN01_E :        B0EF4 C |
 MARSERROR :                   1B68 C |  MARSGBL_DREQREAD :               8 C |
 MARSGBL_DREQWRITE :              C C | *MARSGBL_FREEW1 :                 6 C |
 MARSGBL_SCRL_ART :              28 C |  MARSGBL_SCRL_DRWALL :           2C C |
 MARSGBL_SCRL_DRWD :             38 C |  MARSGBL_SCRL_DRWL :             34 C |
 MARSGBL_SCRL_DRWR :             30 C |  MARSGBL_SCRL_DRWU :             3C C |
 MARSGBL_SCRL_FBOUT :            4C C |  MARSGBL_SCRL_FBTL :             20 C |
 MARSGBL_SCRL_FBY :              24 C | *MARSGBL_SCRL_FREE0 :            18 C |
*MARSGBL_SCRL_FREE1 :            1C C |  MARSGBL_SCRL_HGHT :             48 C |
 MARSGBL_SCRL_SIZE :             40 C |  MARSGBL_SCRL_WDTH :             44 C |
 MARSGBL_SCRL_XPOS :             10 C |  MARSGBL_SCRL_YPOS :             14 C |
 MARSGBL_SSPRFLIP :               4 C |  MARSGBL_THISFRAME :              2 C |
 MARSGBL_XSHIFT :                 0 C |  MARSINITHEADER :              1C3A C |
 MARSJUMPHERE :                1C72 C |  MARSJUMPHERE.LOOP_RAM :       1C7E C |
 MARSSCRL_COPYTOPBOT :      6000F3C C |
 MARSSCRL_COPYTOPBOT.COPY_TOP :                                     6000F50 C |
 MARSSOUND_INIT :           6000C54 C |  MARSUPD :                     1C8A C |
 MARSVIDEO_DRAWFILLBLK :    60010DC C |
 MARSVIDEO_DRAWFILLBLK.BLANK :                                      600115C C |
*MARSVIDEO_DRAWFILLBLK.EXIT_LR :                                    6001182 C |
 MARSVIDEO_DRAWFILLBLK.NEXT_YBLK :                                  6001170 C |
 MARSVIDEO_DRAWFILLBLK.NO_FLAG :                                    6001168 C |
 MARSVIDEO_DRAWFILLBLK.TL_SNAP :                                    600110A C |
 MARSVIDEO_DRAWFILLBLK.X_LOOP :                                     6001102 C |
 MARSVIDEO_DRAWFILLBLK.Y_LOOP :                                     6001114 C |
 MARSVIDEO_FIXTBLSHIFT :    6000CA8 C |
 MARSVIDEO_FIXTBLSHIFT.COPY :                                       6000CE8 C |
 MARSVIDEO_FIXTBLSHIFT.LOOP :                                       6000CD0 C |
 MARSVIDEO_FIXTBLSHIFT.PTCHSET :                                    6000CFA C |
 MARSVIDEO_FIXTBLSHIFT.TBLEXIT :                                    6000CF4 C |
 MARSVIDEO_INIT :           6000C78 C |  MARSVIDEO_MAPDRAWALL :     6000D18 C |
 MARSVIDEO_MAPDRAWALL.BLANK :                                       6000D86 C |
*MARSVIDEO_MAPDRAWALL.EXIT_LR :                                     6000D9E C |
 MARSVIDEO_MAPDRAWALL.TL_SNAP :                                     6000D42 C |
 MARSVIDEO_MAPDRAWALL.X_LOOP :                                      6000D3A C |
 MARSVIDEO_MAPDRAWALL.Y_LOOP :                                      6000D4A C |
 MARSVIDEO_MAPSCRLLR :      6000DAC C |
 MARSVIDEO_MAPSCRLLR.BLANK :                                        6000E2E C |
 MARSVIDEO_MAPSCRLLR.DIR_L :                                        6000DCC C |
 MARSVIDEO_MAPSCRLLR.DIR_R :                                        6000DD2 C |
 MARSVIDEO_MAPSCRLLR.EXIT_LR :                                      6000E3E C |
 MARSVIDEO_MAPSCRLLR.GO_LR :                                        6000DD6 C |
 MARSVIDEO_MAPSCRLLR.Y_LOOP :                                       6000DF2 C |
 MARSVIDEO_MAPSCRLUD :      6000E48 C |
 MARSVIDEO_MAPSCRLUD.BLANK_LR :                                     6000ECC C |
 MARSVIDEO_MAPSCRLUD.DIR_D :                                        6000E6E C |
 MARSVIDEO_MAPSCRLUD.DIR_U :                                        6000E68 C |
 MARSVIDEO_MAPSCRLUD.EXIT_UD :                                      6000EE0 C |
 MARSVIDEO_MAPSCRLUD.GO_UD :                                        6000E72 C |
 MARSVIDEO_MAPSCRLUD.Y_LOOP :                                       6000E8E C |
 MARSVIDEO_MKFILLBLK :      6001008 C |
*MARSVIDEO_MKFILLBLK.EXIT_SSPR :                                    60010D4 C |
 MARSVIDEO_MKFILLBLK.NEXT_SSPR :                                    6001014 C |
 MARSVIDEO_MKFILLBLK.OFF_SSPR :                                     60010CC C |
 MARSVIDEO_MKFILLBLK.X_ROW :                                        600109A C |
 MARSVIDEO_MKFILLBLK.X_SQEND :                                      6001092 C |
 MARSVIDEO_MKFILLBLK.X_SQZ :                                        6001086 C |
 MARSVIDEO_MKFILLBLK.X_SZEX :                                       600104C C |
 MARSVIDEO_MKFILLBLK.Y_ROW :                                        6001098 C |
 MARSVIDEO_MKFILLBLK.Y_SQEND :                                      6001098 C |
 MARSVIDEO_MKFILLBLK.Y_SQZ :                                        600108C C |
 MARSVIDEO_MKFILLBLK.Y_SZEX :                                       6001058 C |
 MARSVIDEO_SHOWSCRLBG :     6000EEC C |
 MARSVIDEO_SHOWSCRLBG.BAD_Y :                                       6000F36 C |
 MARSVIDEO_SHOWSCRLBG.LN_LOOP :                                     6000F1A C |
 MARSVIDEO_SHOWSCRLBG.XL_R :                                        6000F22 C |
 MARSVIDEO_SUPERSPR_DRAW :  6000F6C C |
*MARSVIDEO_SUPERSPR_DRAW.EXIT_SSPR :                                6000FFA C |
 MARSVIDEO_SUPERSPR_DRAW.NEXT_SSPR :                                6000F92 C |
 MARSVIDEO_SUPERSPR_DRAW.OFF_SSPR :                                 6000FF2 C |
 MARS_CACHEPURGE :          6000BB0 C |  MARS_CACHERAMCODE :        6000BE4 C |
 MARS_CACHERAMCODE.COPY :   6000C0A C | *MARS_CLEARCACHECODE :      6000BCC C |
 MARS_CLEARCACHECODE.LOOP : 6000BD2 C |  MARS_RAMCODE :               56800 C |
*MARS_RAMCODE_E :             5B910 C |  MARS_RAMCODE_EOF :           5C000 C |
*MARS_SETWATCHDOG :         6000C24 C |  MASTER_IRQ :               6000250 C |
 MASTER_LOOP :              6000808 C |  MASTER_LOOP.COPY_PAL :     6000858 C |
 MASTER_LOOP.NON_INIT :     6000880 C |  MASTER_LOOP.TOO_LATE :     6000808 C |
 MASTER_LOOP.WAITL :        6000828 C |  MASTER_LOOP.WAITV :        600083C C |
 MAX_BUFFNTRY :                   8 - |  MAX_MARSSPR :                   10 - |
 MAX_MDDMATSK :                  18 - |  MAX_MDOBJ :                     18 - |
 MAX_MDOTHER :                  E00 - |  MAX_MDSYSTEM :                 600 - |
 MAX_MDVIDEO :                 2000 - |  MAX_PWMCHNL :                    7 - |
 MAX_RCACH :                     20 - |  MAX_SCRNBUFF :                1800 - |
 MAX_SRAMSIZE :                 400 - |  MAX_SYSCODE :                 2000 - |
 MAX_TBLSIZE :                   18 - |  MAX_TRFRPZ :                     8 - |
 MAX_TRKCHN :                    20 - |  MAX_TRKINDX :                   1A - |
 MAX_USERCODE :                8000 - |  MAX_ZCMND :                     10 - |
 MCD :                            0 - |  MCDBLOCK :                      36 C |
*MCDIN_TOP :                   1A00 C |  MCDIN_TOP.COPY_1 :            1A0E C |
 MCDIN_TOP.FILE_MARSCODE :     1A20 C |  MCDUPD :                      1C8B C |
 MCD_COMM_M :                     E - |  MCD_COMM_S :                     F - |
 MCD_DBANK0 :                 5D000 C |  MCD_DBANK0_E :               7D000 C |
 MCD_DCOMM_M :                   10 - |  MCD_DCOMM_S :                   20 - |
 MCD_HINT :                       6 - | *MCD_INTMASK :                   32 - |
 MCD_MAIN :                    1A00 C |  MCD_MEMORY :                     3 - |
 MCD_SUBDATA :                 C000 C |  MCD_SUBDATA_E :              56800 C |
 MCHNSND_BANK :                   8 C |  MCHNSND_ENBL :                   0 C |
 MCHNSND_LEN :                   10 C |  MCHNSND_LOOP :                  14 C |
 MCHNSND_PITCH :                 18 C |  MCHNSND_READ :                   4 C |
 MCHNSND_START :                  C C |  MCHNSND_VOL :                   1C C |
 MDBANK0 :                   200000 C |  MDBANK0_E :                 220000 C |
 MDSYS_SINEDATA :  FFFFFFFFFFFF1502 C | *MD_BANK_SRAM :              A130F1 - |
 MD_READMODES :    FFFFFFFFFFFF1930 C |
 MD_READMODES.END :                                        FFFFFFFFFFFF1994 C |
 MD_READMODES.PICK_MODE :                                  FFFFFFFFFFFF1950 C |
 MD_SCREEN00 :                5C000 C |  MD_SCREEN00_E :              5C800 C |
 MD_SCREEN01 :                5C800 C |  MD_SCREEN01_E :              5D000 C |
 MD_SYSCODE :                  3C2A C |  MD_SYSCODE_E :                55BE C |
 MODE :                          18 - |  MODE_INIT :       FFFFFFFFFFFF1620 C |
 MODE_INIT.CLR :   FFFFFFFFFFFF164A C | *MOMCPU :                     68000 - |
*MOMCPUNAME :               "68000" - |  MONOWIDTH :                     38 - |
 MOUSE_X :                        8 C |  MOUSE_Y :                        A C |
*MSCPAUSEOFF :                    4 - | *MSCPAUSEON :                     3 - |
*MSCPLAY :                       11 - |  MSCPLAY1 :                      12 - |
 MSCPLAYR :                      13 - | *MSCPLAYT :                      14 - |
 MSCRL_ART :                      C C |  MSCRL_XPOS :                     4 C |
*MSCRL_YBOT :                     0 C |  MSCRL_YPOS :                     8 C |
*MSCRL_YTOP :                     2 C | *MSCSCANFF :                      5 - |
*MSCSCANFR :                      6 - | *MSCSCANOFF :                     7 - |
*MSCSEEK :                       15 - | *MSCSEEK1 :                      19 - |
*MSCSEEKT :                      16 - |  MSCSTOP :                        2 - |
 MSTRMODE_0 :               60008C8 C |  MSTRMODE_0.WAITL :         60008CA C |
 MSTRMODE_0_I :             60008A0 C |  MSTRMODE_2D :              6000930 C |
 MSTRMODE_2D.CLR_INIT :     6000A5A C |  MSTRMODE_2D.FROM_FULL :    6000A6A C |
 MSTRMODE_2D.X_DIRL :       600097C C |  MSTRMODE_2D.X_NEW :        600098A C |
 MSTRMODE_2D.X_OLD :        600098A C |  MSTRMODE_2D.YPU_NEGTV :    6000A04 C |
 MSTRMODE_2D.YPU_POSTV :    6000A0E C |  MSTRMODE_2D.YX_NEGTV :     60009EE C |
 MSTRMODE_2D.YX_POSTV :     60009F8 C |  MSTRMODE_2D.Y_DIRL :       60009B8 C |
 MSTRMODE_2D.Y_NEW :        60009C6 C |  MSTRMODE_2D.Y_OLD :        60009C6 C |
 MSTRMODE_2D_I :            60008D4 C |  MSTR_LIST :                6000890 C |
 M_IRQ_BAD :                6000380 C |  M_IRQ_CMD :                60003E4 C |
 M_IRQ_CMD.DREQ_RAM :       6000410 C |  M_IRQ_CMD.DREQ_SETDEST :   6000412 C |
 M_IRQ_DMA :                60003B0 C |  M_IRQ_DMA.WAIT_DMA :       60003BA C |
 M_IRQ_H :                  6000438 C |  M_IRQ_PWM :                60003D4 C |
 M_IRQ_V :                  6000448 C |  M_IRQ_VRES :               6000458 C |
 M_IRQ_VRES.RV_BUSY :       600048C C |  M_IRQ_WDG :                6000398 C |
*NESTMAX :                      100 - |  NIKONA_BUFFLIST :             16A6 C |
 NIKONA_BUFFLIST_E :           16C6 C |  OBJDMA_BIBI :               20101C C |
 OBJDMA_DOREMI :             200F2C C |  OBJDMA_EMILY :              200E46 C |
 OBJDMA_SOPHIE :             201100 C |  OBJECTS_ADD :     FFFFFFFFFFFF0E4E C |
 OBJECTS_ADD.CLR : FFFFFFFFFFFF0E7E C |
 OBJECTS_ADD.FROM_DEL :                                    FFFFFFFFFFFF0E8E C |
 OBJECTS_ADD.SEARCH :                                      FFFFFFFFFFFF0E60 C |
 OBJECTS_ADD.USE_IT :                                      FFFFFFFFFFFF0E72 C |
 OBJECTS_CLEAR :   FFFFFFFFFFFF0DC8 C |
 OBJECTS_CLEAR.CLR :                                       FFFFFFFFFFFF0DD0 C |
 OBJECTS_CLEAR.CLR_D :                                     FFFFFFFFFFFF0DDE C |
 OBJECTS_RUN :     FFFFFFFFFFFF0DF6 C |
 OBJECTS_RUN.NEXT_ONE :                                    FFFFFFFFFFFF0DFE C |
 OBJECTS_RUN.NO_CODE :                                     FFFFFFFFFFFF0E0A C |
*OBJECTS_SET :     FFFFFFFFFFFF0E14 C |  OBJECTS_SET.CLR : FFFFFFFFFFFF0E22 C |
 OBJECTS_SET.FROM_DEL :                                    FFFFFFFFFFFF0E3A C |
 OBJECTS_SHOW :    FFFFFFFFFFFF0E94 C |
 OBJECTS_SHOW.FINISH :                                     FFFFFFFFFFFF0F52 C |
 OBJECTS_SHOW.MK_PZ :                                      FFFFFFFFFFFF0ED2 C |
 OBJECTS_SHOW.MK_SPR :                                     FFFFFFFFFFFF0F4E C |
 OBJECTS_SHOW.NEXT :                                       FFFFFFFFFFFF0EA4 C |
 OBJECTS_SHOW.RAN_OUT :                                    FFFFFFFFFFFF0F70 C |
 OBJECTS_SHOW.VRAM_H :                                     FFFFFFFFFFFF0F24 C |
 OBJECTS_SHOW.VRAM_V :                                     FFFFFFFFFFFF0F0A C |
 OBJECT_ANIMATE :  FFFFFFFFFFFF103C C |
 OBJECT_ANIMATE.EXIT_ANIM :                                FFFFFFFFFFFF10CA C |
 OBJECT_ANIMATE.GOTOFRAME :                                FFFFFFFFFFFF10BC C |
 OBJECT_ANIMATE.KEEPSPD :                                  FFFFFFFFFFFF1082 C |
 OBJECT_ANIMATE.LASTFRAME :                                FFFFFFFFFFFF10C6 C |
 OBJECT_ANIMATE.NOANIM :                                   FFFFFFFFFFFF10AE C |
 OBJECT_ANIMATE.RETURN :                                   FFFFFFFFFFFF10AC C |
 OBJECT_ANIMATE.SAMETHING :                                FFFFFFFFFFFF105A C |
*OBJECT_COLLISION :                                        FFFFFFFFFFFF1102 C |
 OBJECT_COLLISION.CHECK_THIS :                             FFFFFFFFFFFF112A C |
 OBJECT_COLLISION.EXIT_THIS :                              FFFFFFFFFFFF1124 C |
 OBJECT_COLLISION.NEXT :                                   FFFFFFFFFFFF110C C |
 OBJECT_COLLISION.NOT_YTOP :                               FFFFFFFFFFFF11A6 C |
 OBJECT_COLLISION.SKIP :                                   FFFFFFFFFFFF111A C |
 OBJECT_DISPLAY :  FFFFFFFFFFFF0F90 C |
 OBJECT_DISPLAY.RAN_OUT :                                  FFFFFFFFFFFF0FAE C |
 OBJECT_DISPLAY.SRCH :                                     FFFFFFFFFFFF0F9C C |
 OBJECT_DISPLAY.THIS_ONE :                                 FFFFFFFFFFFF0FAC C |
*OBJECT_DMA :      FFFFFFFFFFFF0FD6 C |  OBJECT_DMA_AUTO : FFFFFFFFFFFF0FB4 C |
 OBJECT_RESETANIM :                                        FFFFFFFFFFFF10D0 C |
 OBJECT_RESETVARS :                                        FFFFFFFFFFFF0F76 C |
 OBJECT_RESETVARS.CLR_RAM :                                FFFFFFFFFFFF0F84 C |
 OBJECT_SPEED :    FFFFFFFFFFFF10E0 C |  OBJMAP_BIBI :               200F3C C |
 OBJMAP_DOREMI :             200F04 C |  OBJMAP_EMILY :              200C86 C |
 OBJMAP_SISI :               201E38 C |  OBJMAP_SOPHIE :             201090 C |
 OBJMKDMA_GO :     FFFFFFFFFFFF0FE2 C |
 OBJMKDMA_GO.NEXT_PZ :                                     FFFFFFFFFFFF100E C |
 OBJMKDMA_GO.NO_DMA :                                      FFFFFFFFFFFF103A C |
 OBJPAL_DOREMI :             200EE6 C |  OBJPAL_EMILY :              200C70 C |
 OBJPAL_SISI :               201E18 C |  OBJPAL_SOPHIE :             201072 C |
 OBJ_ANIM_ICUR :                 1F C |  OBJ_ANIM_ID :                   1E C |
 OBJ_ANIM_INDX :                 1A C |  OBJ_ANIM_SPD :                  20 C |
 OBJ_CODE :                       0 C |  OBJ_FRAME :                     1C C |
*OBJ_FREE :                      25 C |  OBJ_INDEX :                     21 C |
 OBJ_MAP :                        C C |  OBJ_RAM :                       26 C |
 OBJ_SET :                       22 C |  OBJ_SIZE :                      10 C |
*OBJ_STATUS :                    24 C |  OBJ_SUBID :                     23 C |
 OBJ_VRAM :                      14 C |  OBJ_X :                          4 C |
 OBJ_X_SPD :                     16 C |  OBJ_Y :                          8 C |
 OBJ_Y_SPD :                     18 C |  ONREG :                         11 - |
 ON_HOLD :                        2 C |  ON_PRESS :                       4 C |
*ON_RELEASE :                     6 C | *PACKING :                        0 - |
*PADDING :                        0 - |  PAD_ID :                         0 C |
 PAD_VER :                        1 C |  PALETTECLEAR :                1A9C C |
 PALETTECLEAR.FM2 :            1AA6 C |  PALETTECLEAR.PL :             1AB2 C |
 PALMARS_DOREMI :            200230 C |  PALMARS_SCRN0 :             200330 C |
 PALMARS_SOPHIE :            2002B0 C |  PALMARS_TEST :              201358 C |
 PALMODE :                       3E C |  PAN :                            3 - |
 PARP :                          34 - | *PCM :                            0 - |
 PCMCOM :                      16C8 C |  PCMINS_ASTRAL_01 :           4E388 C |
 PCMINS_ASTRAL_02 :           5041C C |  PCMINS_ASTRAL_03 :           525AC C |
 PCMINS_ASTRAL_04 :           53E84 C |  PCMINS_ASTRAL_05 :           54498 C |
 PCMINS_ASTRAL_06 :           54740 C |  PCMINS_ASTRAL_07 :           554B8 C |
 PCMINS_ASTRAL_08 :           55D9C C |  PCMINS_ASTRAL_09 :           572D0 C |
 PCMINS_ASTRAL_10 :           57E44 C |  PCMINS_ASTRAL_11 :           58A50 C |
 PCMINS_ASTRAL_12 :           5A834 C |  PCMINS_ASTRAL_13 :           5B514 C |
 PCMINS_ASTRAL_14 :           5C2A4 C |  PCMINS_ASTRAL_15 :           5EF30 C |
 PCMINS_ASTRAL_16 :           5FC44 C |  PCMINS_ASTRAL_17 :           607E4 C |
 PCMINS_ASTRAL_18 :           61394 C |  PCMINS_ASTRAL_19 :           61644 C |
 PCMINS_ASTRAL_20 :           62F64 C |  PCMINS_ASTRAL_21 :           6466C C |
 PCMINS_ASTRAL_22 :           676B8 C |  PCMINS_ASTRAL_23 :           680C4 C |
 PCMINS_ASTRAL_24 :           68400 C |  PCMINS_ASTRAL_25 :           686E4 C |
 PCMINS_ASTRAL_26 :           68F38 C |  PCMINS_ASTRAL_26_E.HERE :    6A548 C |
 PCMINS_TECHNO_01 :           20000 C |  PCMINS_TECHNO_02 :           2275C C |
 PCMINS_TECHNO_03 :           27724 C |  PCMINS_TECHNO_04 :           28A70 C |
 PCMINS_TECHNO_05 :           29894 C |  PCMINS_TECHNO_06 :           2D4A4 C |
 PCMINS_TECHNO_07 :           3B4EC C |  PCMINS_TECHNO_08 :           409EC C |
 PCMINS_TECHNO_09 :           43B0C C |  PCMINS_TECHNO_10 :           46DCC C |
 PCMINS_TECHNO_11 :           4A228 C | *PEN :                           20 - |
 PICO :                           0 - |  PROC_CHIPS :                   642 C |
 PSGCOM :                      1740 C |  PSGFREQ_LIST :                1586 C |
 PSGHATMODE :                  1C81 C | *PSG_CTRL :                  C00011 - |
 PTMR :                          38 - |  PVOL :                          30 - |
 PWMCOM :                      1708 C | *PWMCTL :                        31 - |
 PWMINTCLR :                     1C - |  PWMIRQ_ON :                      1 - |
 RAM_CDSUB_FSBUFF :           16B04 C |  RAM_CDSUB_PCMBUFF :           6980 C |
 RAM_CDSUB_PCMENBL :           6B00 C |  RAM_CDSUB_PCMMIDSTRM :        6B02 C |
*RAM_CDSUB_PCMPLAY :           6B01 C |  RAM_CDSUB_PCMTABLE :          6AC0 C |
*RAM_CDSUB_PCMTBLUPD :         6B03 C |
 RAM_FADEMARSDELAY :                                       FFFFFFFFFFFFB8F2 C |
 RAM_FADEMARSINCR :                                        FFFFFFFFFFFFB8F0 C |
 RAM_FADEMARSREQ : FFFFFFFFFFFFB8EE C |  RAM_FADEMARSTMR : FFFFFFFFFFFFB8F4 C |
 RAM_FADEMDDELAY : FFFFFFFFFFFFB8EA C |  RAM_FADEMDINCR :  FFFFFFFFFFFFB8E8 C |
 RAM_FADEMDREQ :   FFFFFFFFFFFFB8E6 C |  RAM_FADEMDTMR :   FFFFFFFFFFFFB8EC C |
 RAM_FRAMECOUNT :  FFFFFFFFFFFFB8D4 C | *RAM_GLBL_FILLER : FFFFFFFFFFFFEC04 C |
 RAM_HORSCROLL :   FFFFFFFFFFFFA004 C |  RAM_INPUTDATA :   FFFFFFFFFFFFC004 C |
 RAM_MARS_DREQBUFF_0 :     26001AE0 C |  RAM_MARS_DREQBUFF_1 :     260021F0 C |
 RAM_MARS_GLOBAL :          6001690 C |  RAM_MARS_PWMLIST :             140 C |
 RAM_MARS_PWMTABLE :            220 C |  RAM_MARS_SCRLREFILL_0 :    60016E0 C |
 RAM_MDDREQ :      FFFFFFFFFFFFC604 C |  RAM_MDGLOBAL :    FFFFFFFFFFFFEC04 C |
 RAM_MDMARSHINT :  FFFFFFFFFFFFC452 C |  RAM_MDMARSPALFD : FFFFFFFFFFFFA994 C |
 RAM_MDMARSVINT :  FFFFFFFFFFFFC44C C |
*RAM_MDMARS_DRAWALL :                                      FFFFFFFFFFFFB8F6 C |
*RAM_MDMARS_PALETTE :                                      FFFFFFFFFFFFC604 - |
 RAM_MDMARS_SCREEN :                                       FFFFFFFFFFFFCC04 - |
*RAM_MDMARS_SCRLDATA :                                     FFFFFFFFFFFFC804 - |
 RAM_MDMARS_SUPERSPR :                                     FFFFFFFFFFFFCC14 - |
 RAM_MDOTHER :     FFFFFFFFFFFFC604 C |  RAM_MDSYSTEM :    FFFFFFFFFFFFC004 C |
 RAM_MDVIDEO :     FFFFFFFFFFFFA004 C |  RAM_MEGACD :              FFFFFD00 - |
 RAM_OBJDISPLIST : FFFFFFFFFFFFB724 C |  RAM_OBJECTS :     FFFFFFFFFFFFAD94 C |
 RAM_PALETTE :     FFFFFFFFFFFFA914 C |  RAM_PALETTEFD :   FFFFFFFFFFFFAB94 C |
*RAM_SAVEDATA :    FFFFFFFFFFFFC044 C |  RAM_SCREENMODE :  FFFFFFFFFFFFC458 C |
 RAM_SCRNBUFF :    FFFFFFFFFFFFD404 C |
 RAM_SPRAUTODMACURR :                                      FFFFFFFFFFFFB8DA C |
 RAM_SPRAUTODMASET :                                       FFFFFFFFFFFFB8D8 C |
 RAM_SPRDRWCNTR :  FFFFFFFFFFFFB8DC C |  RAM_SPRITES :     FFFFFFFFFFFFA414 C |
 RAM_SPRLINKNUM :  FFFFFFFFFFFFB8DE C | *RAM_STACK :               FFFFFD00 - |
 RAM_SYSRANDSEED : FFFFFFFFFFFFC448 C |  RAM_SYSRANDVAL :  FFFFFFFFFFFFC444 C |
 RAM_SYSTEMCODE :  FFFFFFFFFFFF0000 C |  RAM_USERCODE :    FFFFFFFFFFFF2000 C |
 RAM_VDPDMAINDX :  FFFFFFFFFFFFB8E0 C |  RAM_VDPDMALIST :  FFFFFFFFFFFFAC14 C |
 RAM_VDPDMAMOD :   FFFFFFFFFFFFB8E2 C |  RAM_VDPREGS :     FFFFFFFFFFFFB8F8 C |
 RAM_VERSCROLL :   FFFFFFFFFFFFA3C4 C |  RAM_VIDPRNTLIST : FFFFFFFFFFFFB754 C |
 RAM_VIDPRNTVRAM : FFFFFFFFFFFFB8E4 C |  RAM_ZCDFLAG_D :           FFFFFF00 - |
 RAM_ZSNDBUFF :            FFFFFF00 - | *RCHWIDTH :                      36 - |
*RELAXED :                        0 - | *RES :                            2 - |
 RESTARTPRG :                  1AC4 C |  RESTARTPRG.FM3 :              1AE2 C |
 RESTARTPRG.FS0 :              1B16 C |  RESTARTPRG.FS1 :              1B22 C |
 RESTARTPRG.RES_WAIT :         1AC8 C | *ROMPAUSEOFF :                    9 - |
*ROMPAUSEON :                     8 - | *ROMREAD :                       17 - |
*ROMREADE :                      21 - |  ROMREADN :                      20 - |
*ROMSEEK :                       18 - |  ROM_END :                    B1000 C |
 RRT :                           14 - |  SAMPLEHEAD :                  1CB3 C |
 SAMPLE_RATE :                 3E80 - |  SBEATACC :                    1C9B C |
 SBEATPTCK :                   1C9D C | *SCDINIT :                       8E - |
*SCDPQ :                         93 - | *SCDPQL :                        94 - |
*SCDREAD :                       92 - | *SCDSTART :                      8F - |
*SCDSTAT :                       91 - | *SCDSTOP :                       90 - |
*SCPU_BRAM :               FFFE8000 - |  SCPU_PCM :                FFFF0000 - |
 SCPU_REG :                FFFF8000 - |  SCPU_WRAM :                  80000 - |
 SCRLDRW_DRAWBLK :          6001310 C |  SCRLDRW_DRAWBLK.BLANK :    6001318 C |
 SCRLDRW_DRAWBLK.BLNK_LINE :                                        600131C C |
 SCRLDRW_DRAWBLK.NEXT_LINE :                                        600134E C |
 SCRLDRW_DRAWBLK.NORMAL :   6001344 C |  SCRLDRW_DRAWBLK.TL_SNAP :  6001356 C |
 SCRLDRW_DRAWBLK.TL_SNAPB : 6001322 C |  SCRLDRW_SSPRDRAW :         600119C C |
 SCRLDRW_SSPRDRAW.TL_SNAP : 6001230 C |  SCRLDRW_SSPRDRAW.XL_FAR :  60012D0 C |
 SCRLDRW_SSPRDRAW.XY_FLIP : 60011C8 C |  SCRLDRW_SSPRDRAW.X_BAD :   60012EA C |
 SCRLDRW_SSPRDRAW.X_END :   60012F2 C |  SCRLDRW_SSPRDRAW.X_FLIP :  60011E6 C |
 SCRLDRW_SSPRDRAW.X_LEFT :  600129E C |  SCRLDRW_SSPRDRAW.X_LOOP :  600122A C |
 SCRLDRW_SSPRDRAW.X_MID :   60012D4 C |  SCRLDRW_SSPRDRAW.X_MSWAP : 6001266 C |
*SCRLDRW_SSPRDRAW.X_SWAP :  6001230 C |  SCRLDRW_SSPRDRAW.Y_BOT :   600120E C |
*SCRLDRW_SSPRDRAW.Y_END :   60012FE C |  SCRLDRW_SSPRDRAW.Y_FLIP :  60011D6 C |
 SCRLDRW_SSPRDRAW.Y_LAST :  60012FE C |  SCRLDRW_SSPRDRAW.Y_LOOP :  600121A C |
*SCRLDRW_SSPRDRAW.Y_LOW :   60011A8 C |  SCRLDRW_SSPRDRAW.Y_MID :   60011AE C |
 SCRLDRW_SSPRDRAW.Y_OK :    60011B6 C |  SCRLDRW_SSPRDRAW.Y_RFLIP : 60011FA C |
 SCRLDRW_SSPRDRAW.Y_RFLIPC :                                        60011FC C |
 SCRLDRW_SSPRDRAW.Y_TOP :   60011FE C |  SCRLDRW_SSPRDRAW.Z_0 :     600123E C |
 SCRLDRW_SSPRDRAW.Z_1 :     6001246 C |  SCRLDRW_SSPRDRAW.Z_2 :     6001250 C |
 SCRLDRW_SSPRDRAW.Z_3 :     6001258 C |  SETVRAM_BIBI :                 4D0 - |
 SETVRAM_DOREMI :               478 - |  SETVRAM_EMILY :                460 - |
*SETVRAM_MIKAMI :               440 - |  SETVRAM_NICOLE :               4A8 - |
 SETVRAM_SISI :                 480 - |  SETVRAM_SOPHIE :               490 - |
 SET_CHIPS :                    624 C |  SET_CHIPS.TRK_BUFFRS :         62C C |
 SET_DEFAUTODMA :               480 - | *SET_FBVRAM_BLANK :           1FD80 - |
 SET_FBVRAM_PATCH :           1E000 - |  SET_INITMODE :                   1 - |
 SET_MSCRLHGHT :                 F0 - |  SET_MSCRLSIZE :                 10 - |
 SET_MSCRLWDTH :                140 - |  SET_NULLVRAM :                 7FF - |
 SET_PRINTPAL :                   3 - |  SET_PRINTVRAM :                580 - |
 SH2_DEBUG :                      0 - |  SH2_END :                  6005110 C |
 SH2_MASTER :               6000000 C |  SH2_M_ENTRY :              60006F8 C |
 SH2_M_ENTRY.CLEAN_UP :     6000764 C |  SH2_M_ENTRY.COPY_NEW :     6000774 C |
 SH2_M_ENTRY.EXIT_CLEAN :   600076E C |  SH2_M_ENTRY.EXIT_SEND :    6000780 C |
 SH2_M_ENTRY.WAITE :        6000746 C |  SH2_M_ENTRY.WAITL :        600074C C |
 SH2_M_ENTRY.WAIT_FRM :     6000758 C |  SH2_M_ERRADDR :            600032C C |
 SH2_M_ERRCODE :            600033C C |  SH2_M_ERRDMA :             6000330 C |
 SH2_M_ERRILLG :            6000324 C |  SH2_M_ERRINVL :            6000328 C |
 SH2_M_ERRNMI :             6000334 C |  SH2_M_ERROR :              6000320 C |
 SH2_M_ERRUSER :            6000338 C |  SH2_M_HOTSTART :           600078E C |
 SH2_M_HOTSTART.WAIT_SLV :  60007AC C |  SH2_RAM :                  60016E0 C |
 SH2_RAM_TH :               6001AE0 C |  SH2_SLAVE :                6000128 C |
 SH2_S_ENTRY :              6000AAC C |  SH2_S_ENTRY.WAIT_MSTR :    6000AFA C |
 SH2_S_ERRADDR :            6000358 C |  SH2_S_ERRCODE :            6000368 C |
 SH2_S_ERRDMA :             600035C C |  SH2_S_ERRILLG :            6000350 C |
 SH2_S_ERRINVL :            6000354 C |  SH2_S_ERRNMI :             6000360 C |
 SH2_S_ERROR :              600034C C |  SH2_S_ERRUSER :            6000364 C |
 SH2_S_HOTSTART :           6000B0A C |  SH2_S_HOTSTART.WAIT_MST :  6000B2E C |
 SH2_USER_DATA :            6005110 C |  SHIFT :                          2 - |
*SIN_TABLE :                6002900 C |  SIZEOF_CDPCM :                  28 C |
 SIZEOF_DREQ :                  710 C |  SIZEOF_INPUT :                  10 C |
 SIZEOF_MARSGBL :                50 C |  SIZEOF_MARSSCRL :               10 C |
 SIZEOF_MARSSND :                20 C |  SIZEOF_MARSSPR :                10 C |
 SIZEOF_MDGLBL :   FFFFFFFFFFFFEC08 C |  SIZEOF_MDOBJ :                  66 C |
 SIZEOF_MDRAM :    FFFFFFFFFFFFD80C C | *SIZEOF_MDSYS :    FFFFFFFFFFFFC45A C |
 SIZEOF_MDVID :    FFFFFFFFFFFFB910 C | *SIZEOF_RAMOTHER : FFFFFFFFFFFFD404 C |
*SIZEOF_SUBCPU :              16B84 C |  SLAVE_IRQ :                6000278 C |
 SLAVE_LOOP :               6000B78 C |  SLV :                           10 - |
 SLVMODE_00 :               6000B94 C |  SLVMODE_01 :               6000B98 C |
 SLV_LIST :                 6000B8C C |  SNDLOCKZ80 :      FFFFFFFFFFFF00D0 C |
 SNDLOCKZ80.WAIT : FFFFFFFFFFFF00D8 C |  SNDREQ_ENTER :    FFFFFFFFFFFF00EE C |
 SNDREQ_ENTER.WAIT :                                       FFFFFFFFFFFF0112 C |
 SNDREQ_EXIT :     FFFFFFFFFFFF0122 C | *SNDREQ_SADDR :    FFFFFFFFFFFF014E C |
 SNDREQ_SBYTE :    FFFFFFFFFFFF0156 C |  SNDREQ_SCMD :     FFFFFFFFFFFF013C C |
 SNDREQ_SLONG :    FFFFFFFFFFFF014A C |  SNDREQ_SWORD :    FFFFFFFFFFFF0152 C |
 SNDUNLOCKZ80 :    FFFFFFFFFFFF00E4 C |  SOUND_INIT :      FFFFFFFFFFFF0000 C |
 SOUND_INIT.CLEANUP :                                      FFFFFFFFFFFF002A C |
 SOUND_INIT.COPY : FFFFFFFFFFFF0040 C |
 SOUND_INIT.NOT_PAL :                                      FFFFFFFFFFFF0066 C |
 SOUND_INIT.WAIT : FFFFFFFFFFFF0014 C |  SOUND_UPDATE :    FFFFFFFFFFFF0084 C |
 SOUND_UPDATE.COPY_BYTES :                                 FFFFFFFFFFFF00BE C |
 SOUND_UPDATE.NO_SIZE :                                    FFFFFFFFFFFF00CC C |
 SOUND_UPDATE.NO_TASK :                                    FFFFFFFFFFFF00CE C |
 SPINITFS :                    63AC C |  SPREADSECTORSN :              6334 C |
 SPREADSECTORSN.WAITTRANSFER : 6380 C |  SPREADSECTORSN.WAIT_READ :    6372 C |
 SPREADSECTORSN.WAIT_STAT :    6368 C |  SPSEARCHFILE :                63E6 C |
 SPSEARCHFILE.CHK_STR :        640E C |  SPSEARCHFILE.FAILED_SRCH :    642E C |
 SPSEARCHFILE.FOUND_FILE :     641E C |  SPSEARCHFILE.NEXT_FILE :      63F0 C |
 SPSEARCHFILE.NON_FILE :       641A C |  SP_CMDLIST :                  6142 C |
 SP_CMND00 :                   61A2 C |  SP_CMND01 :                   61A4 C |
 SP_CMND01.EXIT_NOW :          620E C |  SP_CMND01.NEXT_PACKET :       61C8 C |
 SP_CMND01.WAIT_MAIN :         61E6 C |  SP_CMND01.WAIT_MAIN_O :       6202 C |
 SP_CMND01.WAIT_RET :          621A C |  SP_CMND02 :                   6226 C |
 SP_CMND02.WAIT_RET :          624C C |  SP_CMND08 :                   6258 C |
 SP_CMND08.EXIT_NOW :          62C6 C |  SP_CMND08.NEXT_PACKET :       6288 C |
 SP_CMND08.WAIT_MAIN :         62AE C |  SP_CMND08.WAIT_START :        6272 C |
 SP_CMND10 :                   62C8 C |  SP_CMND11 :                   62E0 C |
 SP_CMND14 :                   62F8 C |  SP_CMND16 :                   6302 C |
 SP_CMND17 :                   6310 C |  SP_CMND20 :                   6332 C |
 SP_END :                      1180 C |  SP_INIT :                     602A C |
 SP_IRQ :                      606A C |  SP_IRQ.EXIT_NOW :             60DA C |
 SP_IRQ.NEXT_PACKET :          609A C |  SP_IRQ.NOT_NOW :              60E2 C |
 SP_IRQ.WAIT_MAIN :            60C8 C |  SP_IRQ.WAIT_START :           607E C |
 SP_MAIN :                     60E4 C |  SP_RAM :                      6980 C |
 SP_START :                     800 C | *SP_TIMER :                    6066 C |
 SP_USER :                     6068 C |  SSPR_ART :                       C C |
 SSPR_FLAGS :                     0 C |  SSPR_FRAME :                     2 C |
 SSPR_INDX :                      6 C |  SSPR_SIZE :                      4 C |
 SSPR_XPOS :                      8 C |  SSPR_YPOS :                      A C |
 ST :                             D - |  STACK_MSTR :              C0000800 - |
 STACK_SLV :               C0000800 - |  STANDBY :                        3 - |
 SUBCDDA_RESETVOLUME :         6310 C |  SUBCPU_DATA :                20000 C |
*SYSMARS_ID :                A130EC - |  SYSMARS_REG :               A15100 - |
 SYSMCD_REG :                A12000 - |  SYSMCD_WRAM :               200000 - |
 SYSMDMCD_SETCDDA :                                        FFFFFFFFFFFF1806 C |
 SYSMDMCD_SETCDDA.FAIL_SAFE :                              FFFFFFFFFFFF181E C |
 SYSTEM_DMAENTER_RAM :                                     FFFFFFFFFFFF12DA C |
 SYSTEM_DMAENTER_ROM :                                     FFFFFFFFFFFF12E2 C |
 SYSTEM_DMAEXIT_RAM :                                      FFFFFFFFFFFF12DE C |
 SYSTEM_DMAEXIT_ROM :                                      FFFFFFFFFFFF12E8 C |
 SYSTEM_GRABRAMCODE :                                      FFFFFFFFFFFF190E C |
 SYSTEM_INIT :     FFFFFFFFFFFF1216 C |
 SYSTEM_INIT.CLRINPUT :                                    FFFFFFFFFFFF126E C |
 SYSTEM_INIT.WAIT :                                        FFFFFFFFFFFF1222 C |
 SYSTEM_INPUT :    FFFFFFFFFFFF12EE C |
 SYSTEM_INPUT.EXIT :                                       FFFFFFFFFFFF131C C |
 SYSTEM_INPUT.ID_03 :                                      FFFFFFFFFFFF1342 C |
 SYSTEM_INPUT.ID_0D :                                      FFFFFFFFFFFF13EC C |
 SYSTEM_INPUT.INVALID :                                    FFFFFFFFFFFF13E6 C |
 SYSTEM_INPUT.LIST :                                       FFFFFFFFFFFF1322 C |
 SYSTEM_INPUT.OLDPAD :                                     FFFFFFFFFFFF1464 C |
 SYSTEM_INPUT.PICK_ID :                                    FFFFFFFFFFFF146A C |
 SYSTEM_INPUT.READ :                                       FFFFFFFFFFFF1480 C |
 SYSTEM_INPUT.STEP_1 :                                     FFFFFFFFFFFF148C C |
 SYSTEM_INPUT.STEP_2 :                                     FFFFFFFFFFFF1498 C |
 SYSTEM_INPUT.THIS_ONE :                                   FFFFFFFFFFFF1302 C |
 SYSTEM_INPUT.X_NEG :                                      FFFFFFFFFFFF13B4 C |
 SYSTEM_INPUT.Y_NEG :                                      FFFFFFFFFFFF13E0 C |
 SYSTEM_MARSDATAPACK :                                     FFFFFFFFFFFF1842 C |
 SYSTEM_MARSDATAPACK.EXIT_NOW :                            FFFFFFFFFFFF1882 C |
 SYSTEM_MARSDATAPACK.LARGE_PACK :                          FFFFFFFFFFFF186E C |
 SYSTEM_MARSSENDDREQ :                                     FFFFFFFFFFFF1884 C |
 SYSTEM_MARSUPDATE :                                       FFFFFFFFFFFF1888 C |
*SYSTEM_MCDSENDBUFF :                                      FFFFFFFFFFFF1766 C |
 SYSTEM_MCDSENDBUFF.COPY_RAM :                             FFFFFFFFFFFF17A0 C |
 SYSTEM_MCDSENDBUFF.WAIT_PRE :                             FFFFFFFFFFFF178C C |
 SYSTEM_MCDSENDBUFF.WAIT_SUB :                             FFFFFFFFFFFF17C6 C |
 SYSTEM_MCDTRNSFR_RAM :                                    FFFFFFFFFFFF16C6 C |
 SYSTEM_MCDTRNSFR_RAM.COPY_RAM :                           FFFFFFFFFFFF1702 C |
 SYSTEM_MCDTRNSFR_RAM.WAIT_SUB :                           FFFFFFFFFFFF1730 C |
 SYSTEM_MCDTRNSFR_WRAM :                                   FFFFFFFFFFFF1694 C |
 SYSTEM_MCDTRNSFR_WRAM.SET_PERM :                          FFFFFFFFFFFF16AE C |
*SYSTEM_MDMCD_CDFADE :                                     FFFFFFFFFFFF1824 C |
*SYSTEM_MDMCD_CDPLAY :                                     FFFFFFFFFFFF17F4 C |
 SYSTEM_MDMCD_CDPLAY_L :                                   FFFFFFFFFFFF17FE C |
 SYSTEM_MDMCD_SUBTASK :                                    FFFFFFFFFFFF1678 C |
 SYSTEM_MDMCD_SUBTASK.WAIT_ELSE :                          FFFFFFFFFFFF167A C |
 SYSTEM_MDMCD_SUBTASK.WAIT_SUB_I :                         FFFFFFFFFFFF1688 C |
 SYSTEM_MDMCD_SUBWAIT :                                    FFFFFFFFFFFF166A C |
 SYSTEM_MDMCD_SUBWAIT.WAIT_SUB_O :                         FFFFFFFFFFFF1670 C |
*SYSTEM_RANDOM :   FFFFFFFFFFFF149A C |
 SYSTEM_RANDOM.GOOD_S :                                    FFFFFFFFFFFF14A8 C |
 SYSTEM_RENDER :   FFFFFFFFFFFF1294 C |
 SYSTEM_RENDER.FORGOT_DISP :                               FFFFFFFFFFFF12D8 C |
*SYSTEM_RENDER.LOST_FRAME :                                FFFFFFFFFFFF12CA C |
 SYSTEM_RENDER.WAIT_IN :                                   FFFFFFFFFFFF12BA C |
 SYSTEM_RENDER.WAIT_LAG :                                  FFFFFFFFFFFF129E C |
 SYSTEM_SETINTS :  FFFFFFFFFFFF1602 C |
 SYSTEM_SETINTS.NOHINT :                                   FFFFFFFFFFFF1612 C |
 SYSTEM_SETINTS.NOVINT :                                   FFFFFFFFFFFF160A C |
*SYSTEM_SINEWAVE : FFFFFFFFFFFF14E4 C |
 SYSTEM_SINEWAVE.DONT_NEG :                                FFFFFFFFFFFF1500 C |
*SYSTEM_SINEWAVE_COS :                                     FFFFFFFFFFFF14C4 C |
 SYSTEM_SINEWAVE_COS.DONT_NEG :                            FFFFFFFFFFFF14DE C |
 SYSTEM_SRAMINIT : FFFFFFFFFFFF1614 C | *SYSTEM_SRAMLOAD : FFFFFFFFFFFF161C C |
*SYSTEM_SRAMSAVE : FFFFFFFFFFFF1618 C |  SYS_CTRL_1 :                A10009 - |
 SYS_CTRL_2 :                A1000B - |  SYS_CTRL_3 :                A1000D - |
 SYS_DATA_1 :                A10003 - | *SYS_DATA_2 :                A10005 - |
*SYS_DATA_3 :                A10007 - | *SYS_EXRAM :                 200000 - |
 SYS_IO :                    A10001 - |  SYS_MSENDDREQ :   FFFFFFFFFFFF1892 C |
 SYS_MSENDDREQ.LOOP_FIFO :                                 FFFFFFFFFFFF18E4 C |
 SYS_MSENDDREQ.NO_SRC :                                    FFFFFFFFFFFF18B6 C |
 SYS_MSENDDREQ.WAIT_BIT :                                  FFFFFFFFFFFF18D6 C |
 SYS_MSENDDREQ.WAIT_BIT_E :                                FFFFFFFFFFFF18F8 C |
*SYS_TMSS :                  A14000 - |  S_IRQ_BAD :                60004D0 C |
 S_IRQ_CMD :                60004F0 C | *S_IRQ_CMD.COPY_1 :         6000548 C |
 S_IRQ_CMD.EXIT_C :         6000556 C |  S_IRQ_CMD.EXIT_SCMD :      600063E C |
 S_IRQ_CMD.IS_KEYCUT :      6000630 C |  S_IRQ_CMD.NEXT_CHNL :      600055C C |
 S_IRQ_CMD.NO_CHNG :        6000634 C | *S_IRQ_CMD.NO_KEYCUT :      6000566 C |
 S_IRQ_CMD.NO_PITCHBND :    6000598 C | *S_IRQ_CMD.PROC_PWM :       6000556 C |
 S_IRQ_CMD.SCMD_TASK00 :    6000530 C |  S_IRQ_CMD.SCMD_TASK01 :    6000534 C |
 S_IRQ_CMD.SCMD_TASKS :     6000520 C |  S_IRQ_CMD.WAIT_1 :         600053C C |
 S_IRQ_DMA :                60004E0 C |  S_IRQ_H :                  6000676 C |
 S_IRQ_PWM :                      0 C |  S_IRQ_PWM.CHNL_OFF :            DA C |
 S_IRQ_PWM.CHNL_SILN :           3C C |  S_IRQ_PWM.DO_MONO :             8A C |
 S_IRQ_PWM.DO_VOL :              A2 C |  S_IRQ_PWM.ENABLED :             42 C |
 S_IRQ_PWM.FIFO_LOOP :           2C C |  S_IRQ_PWM.GO_WAVE :             8C C |
 S_IRQ_PWM.KEEP :                6A C |  S_IRQ_PWM.LOOPIT :              64 C |
 S_IRQ_PWM.L_LOW :               C8 C |  S_IRQ_PWM.L_MAX :               EC C |
 S_IRQ_PWM.ML_OUT :              9C C | *S_IRQ_PWM.MNON_Z :              96 C |
 S_IRQ_PWM.NEXT_CHNL :           34 C |  S_IRQ_PWM.PWM_FULL :           118 C |
*S_IRQ_PWM.READ_WAV :            74 C |  S_IRQ_PWM.R_LOW :               CE C |
 S_IRQ_PWM.R_MAX :               F2 C |  S_IRQ_PWM.STAND :               7C C |
 S_IRQ_PWM.ST_PITCH :            4C C |  S_IRQ_V :                  6000688 C |
 S_IRQ_VRES :               6000698 C |  S_IRQ_VRES.RV_BUSY :       60006CC C |
 S_IRQ_WDG :                60004D4 C | *TAG_SRAMDATA :              "SAVE" - |
 TBLBUFF_READ :                 66B C |  TBLBUFF_READ.CHK_PSG :         77B C |
 TBLBUFF_READ.CLRFULL :         83D C |  TBLBUFF_READ.DO_CHIP :         6D5 C |
 TBLBUFF_READ.FIRST_INS :       6EB C |  TBLBUFF_READ.GRAB_LINK :       72D C |
 TBLBUFF_READ.HAS_INDX :        6B1 C |  TBLBUFF_READ.INVLDL :          764 C |
 TBLBUFF_READ.KEEP_IT :         70F C |  TBLBUFF_READ.L_HIPRIO :        7EF C |
 TBLBUFF_READ.NEW_CHIP :        7A2 C |  TBLBUFF_READ.NEW_LINK :        7EC C |
 TBLBUFF_READ.NEW_LINK_O :      7E4 C |  TBLBUFF_READ.NEW_LINK_Z :      7E0 C |
 TBLBUFF_READ.NEXTSRCH_TBL :    7D9 C |  TBLBUFF_READ.NEXT_INDX :       6A2 C |
 TBLBUFF_READ.NEXT_PRIO :       7C2 C |  TBLBUFF_READ.NO_INDX :         6CD C |
 TBLBUFF_READ.PASS_2 :          7C1 C |  TBLBUFF_READ.PICK_TBL :        812 C |
 TBLBUFF_READ.REFILL :          79F C |  TBLBUFF_READ.REROLL :          76C C |
 TBLBUFF_READ.RESET_LINK :      82C C |  TBLBUFF_READ.RNOT_PSG :        79D C |
 TBLBUFF_READ.SET_ASFULL :      80F C |  TBLBUFF_READ.SINGL_FREE :      7FD C |
 TBLBUFF_READ.SINGL_LINK :      792 C |  TBLBUFF_READ.SRCH_FREE :       7B1 C |
 TBLBUFF_READ.SRCH_LINK :       74B C |  TBLBUFF_READ.SRCH_LLOOP :      755 C |
 TBLBUFF_READ.TRACK_CONT :      68B C |  TBLBUFF_READ.VALID :           6A0 C |
 TBLFM :                       1A72 C |  TBLFM3 :                      1AD2 C |
 TBLFM6 :                      1AEA C |  TBLLIST :                     1A00 C |
 TBLPCM :                      1B04 C |  TBLPSG :                      1A10 C |
 TBLPSGN :                     1A5A C |  TBLPWM :                      1BC6 C |
*TESTENTRY :                     1E - | *TESTENTRYLOOP :                 1F - |
 TH :                      20000000 - |  TICKCNT :                     1C80 C |
 TICKFLAG :                    1C7F C |  TICKSPSET :                   1C7E C |
 TIME :               "04:57:42 AM" - |  TIMERCTL :                      30 - |
*TMR :                           2C - |  TRACK_OUT :                    5DF C |
 TRACK_OUT.INDX_DEL :           5ED C |  TRACK_OUT.NOTHIN :             61B C |
 TRANSFERROM :                 1207 C |  TRANSFERROM.DOUBLE :          122A C |
 TRANSFERROM.FROM_RAM :        124E C |  TRANSFERROM.TRANSFER :        126C C |
 TRANSFERROM.WAIT :            1265 C |  TRANSFERROM.X68KLAST :        12A5 C |
 TRANSFERROM.X68KLOOP :        1291 C |  TRANSFERROM.X68KLPWT :        12B3 C |
 TRANSFERROM.X68KNOCARRY :     1248 C |  TRANSFERROM.X68KPWTLP :       12B5 C |
 TRKBLKS_0 :                   18EC C |  TRKBLKS_1 :                   18F4 C |
 TRKBLKS_2 :                   18FC C |  TRKBLKS_3 :                   1904 C |
 TRKBUFF_0 :                   190C C |  TRKBUFF_1 :                   194C C |
 TRKBUFF_2 :                   198C C |  TRKBUFF_3 :                   19CC C |
 TRKCACH_0 :                   1F00 C |  TRKCACH_1 :                   1F20 C |
 TRKCACH_2 :                   1F40 C |  TRKCACH_3 :                   1F60 C |
 TRKCHNLS :                    1E00 C |  TRKHDRS_0 :                   186C C |
 TRKHDRS_1 :                   188C C |  TRKHDRS_2 :                   18AC C |
 TRKHDRS_3 :                   18CC C |  TRKINFOCACH :                 1CAF C |
 TRK_BANKBLK :                   17 - |  TRK_BANKHEADS :                 16 - |
 TRK_BANKINS :                   15 - |  TRK_BLOCKS :                     4 - |
 TRK_CACH :                       8 - |  TRK_CACHHALF :                  10 - |
 TRK_CHNINDX :                   26 - |  TRK_CURRBLK :                   13 - |
 TRK_MAXCHNL :                   18 - |  TRK_PATT :                       6 - |
 TRK_PRIORITY :                  14 - |  TRK_READ :                       A - |
 TRK_ROMBLKS :                   23 - |  TRK_ROMINST :                   20 - |
 TRK_ROMPATT :                   1D - |  TRK_ROMPATTREAD :               1A - |
 TRK_ROWPAUSE :                  11 - |  TRK_ROWS :                       C - |
 TRK_SEQID :                      1 - |  TRK_SETBLK :                     2 - |
 TRK_STATUS :                     0 - |  TRK_TICKSET :                    3 - |
 TRK_TICKTMR :                   12 - |  TRK_VOLFDTARGET :               19 - |
 TRK_VOLMASTER :                  E - | *TRUE :                           1 - |
*TVMODE :                         0 - |  UPD_TRACK :                    23A C |
 UPD_TRACK.CHNL_FREE :          354 C |  UPD_TRACK.CONT_CHNL :          35F C |
 UPD_TRACK.DECROW :             303 C |  UPD_TRACK.DECROW_E :           306 C |
 UPD_TRACK.EFFECT_FILL :        52F C |  UPD_TRACK.EFF_A :              3D9 C |
 UPD_TRACK.EFF_B :              3EA C |  UPD_TRACK.EFF_C :              408 C |
 UPD_TRACK.EXIT :               2F7 C |  UPD_TRACK.FADE_OUT :           284 C |
 UPD_TRACK.FIRST_BLK :          45F C |  UPD_TRACK.FIRST_FILL :         536 C |
 UPD_TRACK.FIRST_HEAD :         4A7 C |  UPD_TRACK.GRAB_RHEAD :         5CC C |
 UPD_TRACK.HAS_NOTE :           30E C |  UPD_TRACK.INC_CPATT :          40B C |
 UPD_TRACK.KEEP_BLK :           47D C |  UPD_TRACK.KEEP_IT :            4CD C |
 UPD_TRACK.KEEP_VOL :           29A C |  UPD_TRACK.NEXT_CHNL :          339 C |
 UPD_TRACK.NEXT_NOTE :          2E7 C |  UPD_TRACK.NO_EFF :             3A5 C |
 UPD_TRACK.NO_GLBL :            576 C |  UPD_TRACK.NO_INS :             387 C |
 UPD_TRACK.NO_NOTE :            37C C |  UPD_TRACK.NO_VOL :             392 C |
 UPD_TRACK.OLD_TYPE :           370 C |  UPD_TRACK.RAN_OUT :            419 C |
 UPD_TRACK.READ_TRACK :         257 C |  UPD_TRACK.ROW_ACTIVE :         2E0 C |
 UPD_TRACK.SET_TRACK :          443 C |  UPD_TRACK.SFXMD :              2A4 C |
 UPD_TRACK.SRCH_NEW :           334 C |  UPD_TRACK.TOO_MUCH :           290 C |
 UPD_TRACK.TRACK_END :          51C C |  UPD_TRACK.TRK_BUFFRS :         242 C |
 VBLK :                          80 - |  VDPSTS :                         A - |
 VDP_CTRL :                  C00004 - |  VDP_DATA :                  C00000 - |
*VERSION :                     142F - |  VIDEO_CLEAR :     FFFFFFFFFFFF0322 C |
*VIDEO_CLEARSCREEN :                                       FFFFFFFFFFFF0322 C |
 VIDEO_CLEARSCREEN.PMNEXT :                                FFFFFFFFFFFF03A8 C |
 VIDEO_CLEARSCREEN.PNEXT :                                 FFFFFFFFFFFF0394 C |
 VIDEO_CLEARSCREEN.SNEXT :                                 FFFFFFFFFFFF0382 C |
 VIDEO_CLEARSCREEN.SSP_NEXT :                              FFFFFFFFFFFF03B8 C |
 VIDEO_CLEARSCREEN.XNEXT :                                 FFFFFFFFFFFF0366 C |
 VIDEO_CLEARSCREEN.YNEXT :                                 FFFFFFFFFFFF0374 C |
*VIDEO_COPY :      FFFFFFFFFFFF0806 C |  VIDEO_COPY.DMAW : FFFFFFFFFFFF081E C |
 VIDEO_COPY.DMA_W :                                        FFFFFFFFFFFF0876 C |
 VIDEO_DMAMKENTRY :                                        FFFFFFFFFFFF06C4 C |
 VIDEO_DMAMKENTRY.MK_SET :                                 FFFFFFFFFFFF0700 C |
 VIDEO_DMAMKENTRY.NORMAL :                                 FFFFFFFFFFFF06FA C |
 VIDEO_DMAMKENTRY.NOT_WRAM :                               FFFFFFFFFFFF0746 C |
 VIDEO_DMAMKENTRY.RAN_OUT :                                FFFFFFFFFFFF0786 C |
 VIDEO_DOPALFADE : FFFFFFFFFFFF0478 C |
 VIDEO_DOPALFADE.ACTIVE :                                  FFFFFFFFFFFF0494 C |
 VIDEO_DOPALFADE.FADE_DONE :                               FFFFFFFFFFFF049C C |
 VIDEO_DOPALFADE.FADE_IN :                                 FFFFFFFFFFFF049E C |
 VIDEO_DOPALFADE.FADE_LIST :                               FFFFFFFFFFFF0496 C |
 VIDEO_DOPALFADE.FADE_OUT :                                FFFFFFFFFFFF0540 C |
 VIDEO_DOPALFADE.NO_BLU :                                  FFFFFFFFFFFF0518 C |
 VIDEO_DOPALFADE.NO_BLU_O :                                FFFFFFFFFFFF059A C |
 VIDEO_DOPALFADE.NO_FNSH :                                 FFFFFFFFFFFF0530 C |
 VIDEO_DOPALFADE.NO_FNSH_O :                               FFFFFFFFFFFF05AE C |
 VIDEO_DOPALFADE.NO_GRN :                                  FFFFFFFFFFFF04F8 C |
 VIDEO_DOPALFADE.NO_GRN_O :                                FFFFFFFFFFFF0582 C |
 VIDEO_DOPALFADE.NO_MOVE :                                 FFFFFFFFFFFF053E C |
 VIDEO_DOPALFADE.NO_MOVE_O :                               FFFFFFFFFFFF05BC C |
 VIDEO_DOPALFADE.NO_RED :                                  FFFFFFFFFFFF04D8 C |
 VIDEO_DOPALFADE.NO_RED_O :                                FFFFFFFFFFFF056A C |
 VIDEO_DOPALFADE.NXT_PAL :                                 FFFFFFFFFFFF04B6 C |
 VIDEO_DOPALFADE.NXT_PAL_O :                               FFFFFFFFFFFF0552 C |
 VIDEO_FADEPAL :   FFFFFFFFFFFF0438 C |  VIDEO_FILL :      FFFFFFFFFFFF0788 C |
 VIDEO_FILL.DMAW : FFFFFFFFFFFF07A0 C |
 VIDEO_FILL.DMA_W :                                        FFFFFFFFFFFF07EA C |
 VIDEO_FULLFADEIN :                                        FFFFFFFFFFFF03C0 C |
 VIDEO_FULLFADEOUT :                                       FFFFFFFFFFFF03E6 C |
 VIDEO_INIT :      FFFFFFFFFFFF0264 C |
 VIDEO_INIT.CLR_RAM :                                      FFFFFFFFFFFF0270 C |
 VIDEO_INIT.COPY_DMA :                                     FFFFFFFFFFFF0282 C |
 VIDEO_INIT.DMA_ENTRY :                                    FFFFFFFFFFFF02D0 C |
 VIDEO_INIT.LIST_VDPREGS :                                 FFFFFFFFFFFF02BC C |
 VIDEO_INIT.LOOP : FFFFFFFFFFFF02B2 C |  VIDEO_LOADART :   FFFFFFFFFFFF05BE C |
 VIDEO_LOADART.BAD_SIZE :                                  FFFFFFFFFFFF067E C |
*VIDEO_LOADART.FROM_RAM :                                  FFFFFFFFFFFF0680 C |
 VIDEO_LOADART.MK_SET :                                    FFFFFFFFFFFF05FA C |
 VIDEO_LOADART.NON_WRAM :                                  FFFFFFFFFFFF0632 C |
 VIDEO_LOADART.NON_WRAM_L :                                FFFFFFFFFFFF067E C |
 VIDEO_LOADART.NORMAL :                                    FFFFFFFFFFFF05F4 C |
 VIDEO_LOADART.SHARED_SETUP :                              FFFFFFFFFFFF0682 C |
*VIDEO_LOADMAP :   FFFFFFFFFFFF0B60 C |
 VIDEO_LOADMAP.CONT :                                      FFFFFFFFFFFF0B90 C |
 VIDEO_LOADMAP.NODBLE :                                    FFFFFFFFFFFF0BAE C |
 VIDEO_LOADMAP.NONULL :                                    FFFFFFFFFFFF0B8E C |
 VIDEO_LOADMAP.XLOOP :                                     FFFFFFFFFFFF0B7A C |
 VIDEO_LOADMAP.YLOOP :                                     FFFFFFFFFFFF0B70 C |
 VIDEO_LOADPAL :   FFFFFFFFFFFF0442 C |
 VIDEO_MDMARSMAP_LOAD :                                    FFFFFFFFFFFF11C2 C |
 VIDEO_MDMARSMAP_LOAD.COPY_X :                             FFFFFFFFFFFF11EE C |
 VIDEO_MDMARSMAP_LOAD.COPY_Y :                             FFFFFFFFFFFF11E2 C |
 VIDEO_MDMARSMAP_SET :                                     FFFFFFFFFFFF11A8 C |
 VIDEO_MDMARS_DOPALFADE :                                  FFFFFFFFFFFF09FE C |
 VIDEO_MDMARS_DOPALFADE.ACTIVE :                           FFFFFFFFFFFF0A2A C |
 VIDEO_MDMARS_DOPALFADE.FADE_DONE :                        FFFFFFFFFFFF0A32 C |
 VIDEO_MDMARS_DOPALFADE.FADE_IN :                          FFFFFFFFFFFF0A34 C |
 VIDEO_MDMARS_DOPALFADE.FADE_LIST :                        FFFFFFFFFFFF0A2C C |
 VIDEO_MDMARS_DOPALFADE.FADE_OUT :                         FFFFFFFFFFFF0ADE C |
 VIDEO_MDMARS_DOPALFADE.NO_BLU :                           FFFFFFFFFFFF0AAE C |
 VIDEO_MDMARS_DOPALFADE.NO_BLU_O :                         FFFFFFFFFFFF0B3A C |
 VIDEO_MDMARS_DOPALFADE.NO_FNSH :                          FFFFFFFFFFFF0ACE C |
 VIDEO_MDMARS_DOPALFADE.NO_FNSH_O :                        FFFFFFFFFFFF0B50 C |
 VIDEO_MDMARS_DOPALFADE.NO_GRN :                           FFFFFFFFFFFF0A8E C |
 VIDEO_MDMARS_DOPALFADE.NO_GRN_O :                         FFFFFFFFFFFF0B22 C |
 VIDEO_MDMARS_DOPALFADE.NO_MOVE :                          FFFFFFFFFFFF0ADC C |
 VIDEO_MDMARS_DOPALFADE.NO_MOVE_O :                        FFFFFFFFFFFF0B5E C |
 VIDEO_MDMARS_DOPALFADE.NO_RED :                           FFFFFFFFFFFF0A6E C |
 VIDEO_MDMARS_DOPALFADE.NO_RED_O :                         FFFFFFFFFFFF0B0A C |
 VIDEO_MDMARS_DOPALFADE.NXT_PAL :                          FFFFFFFFFFFF0A4C C |
 VIDEO_MDMARS_DOPALFADE.NXT_PAL_O :                        FFFFFFFFFFFF0AF2 C |
 VIDEO_MDMARS_FADEPAL :                                    FFFFFFFFFFFF09CC C |
*VIDEO_MDMARS_LOADPAL :                                    FFFFFFFFFFFF09D6 C |
 VIDEO_MDMARS_SYNCFRAME :                                  FFFFFFFFFFFF098C C |
 VIDEO_MDMARS_SYNCFRAME.WAIT_MARS :                        FFFFFFFFFFFF0994 C |
 VIDEO_MDMARS_VIDEOMODE :                                  FFFFFFFFFFFF09A0 C |
 VIDEO_PRINT :     FFFFFFFFFFFF0BF4 C |
 VIDEO_PRINT.DONIBL :                                      FFFFFFFFFFFF0D10 C |
 VIDEO_PRINT.EXIT :                                        FFFFFFFFFFFF0C80 C |
 VIDEO_PRINT.ISBYTE :                                      FFFFFFFFFFFF0C4A C |
 VIDEO_PRINT.ISLONG :                                      FFFFFFFFFFFF0C6E C |
 VIDEO_PRINT.ISWORD :                                      FFFFFFFFFFFF0C5C C |
 VIDEO_PRINT.LNGLOOP :                                     FFFFFFFFFFFF0D00 C |
 VIDEO_PRINT.LOOP :                                        FFFFFFFFFFFF0C0C C |
 VIDEO_PRINT.LOWR :                                        FFFFFFFFFFFF0D20 C |
 VIDEO_PRINT.NEWJUMP :                                     FFFFFFFFFFFF0C06 C |
 VIDEO_PRINT.NEXT :                                        FFFFFFFFFFFF0C46 C |
 VIDEO_PRINT.NEXTV :                                       FFFFFFFFFFFF0C8A C |
 VIDEO_PRINT.NOTHING :                                     FFFFFFFFFFFF0D2C C |
 VIDEO_PRINT.PUTTEXT :                                     FFFFFFFFFFFF0C38 C |
 VIDEO_PRINT.VBYTE :                                       FFFFFFFFFFFF0CBC C |
 VIDEO_PRINT.VLONG :                                       FFFFFFFFFFFF0D08 C |
 VIDEO_PRINT.VWORD :                                       FFFFFFFFFFFF0CDE C |
 VIDEO_PRINTINIT : FFFFFFFFFFFF0BC4 C | *VIDEO_PRINTPAL :  FFFFFFFFFFFF0BDE C |
 VIDEO_PRINTPAL.SKIP_PAL :                                 FFFFFFFFFFFF0BF2 C |
 VIDEO_RENDER :    FFFFFFFFFFFF0892 C |
 VIDEO_RENDER.END :                                        FFFFFFFFFFFF097C C |
 VIDEO_RENDER.EXIT :                                       FFFFFFFFFFFF098A C |
 VIDEO_RENDER.NEXT :                                       FFFFFFFFFFFF0954 C |
*VIDEO_RUNFADE :   FFFFFFFFFFFF0466 C |  VIDEO_UPDATE :    FFFFFFFFFFFF0304 C |
*VIDEO_UPDATE.EXIT :                                       FFFFFFFFFFFF0320 C |
 VIDEO_UPDATE.LOOP :                                       FFFFFFFFFFFF0314 C |
 VIDEO_WAITFADE :  FFFFFFFFFFFF040A C |
 VIDEO_WAITFADE.WAIT_FADE :                                FFFFFFFFFFFF040E C |
 VIDMARS_PAL :     FFFFFFFFFFFF09DA C |
 VIDMARS_PAL.LOOP :                                        FFFFFFFFFFFF09F2 C |
 VIDMD_PAL :       FFFFFFFFFFFF0446 C |  VIDMD_PAL.LOOP :  FFFFFFFFFFFF045E C |
 VID_PICKLAYER :   FFFFFFFFFFFF0D32 C |
 VID_PICKLAYER.GOLYR :                                     FFFFFFFFFFFF0D7C C |
 VID_PICKLAYER.NOWD :                                      FFFFFFFFFFFF0D66 C |
 VID_PICKLAYER.PLAWND :                                    FFFFFFFFFFFF0D58 C |
 VID_PICKLAYER.THISSZ :                                    FFFFFFFFFFFF0D9C C |
 VID_PICKLAYER.THISSZJ :                                   FFFFFFFFFFFF0DC4 C |
 VINTCLR :                       16 - | *VINTENBL :                      20 - |
 VINT_DEFAULT :    FFFFFFFFFFFF1652 C | *VIRQ_ON :                        8 - |
 VRESINTCLR :                    14 - |  WAVE_FLAGS :                  1C97 C |
 WAVE_LEN :                    1C8F C |  WAVE_LOOP :                   1C92 C |
 WAVE_PITCH :                  1C95 C |  WAVE_START :                  1C8C C |
 WAVFREQ_CDPCM :               1646 C |  WAVFREQ_LIST :                15E6 C |
*WONDERCHK :                     98 - | *WONDERREQ :                     97 - |
 X68KSRCLSB :                  1C99 C |  X68KSRCMID :                  1C9A C |
*YM_CTRL_1 :                 A04000 - | *YM_CTRL_2 :                 A04002 - |
*YM_DATA_1 :                 A04001 - | *YM_DATA_2 :                 A04003 - |
*Z80SYNTAX :                      0 - |  Z80_BUS :                   A11100 - |
 Z80_CODE :        FFFFFFFFFFFF22A8 C |  Z80_CODE_END :    FFFFFFFFFFFF422A C |
 Z80_CPU :                   A00000 - |  Z80_INIT :                      50 C |
 Z80_RESET :                 A11200 - | *ZBANK :                       6000 - |
 ZDRVFIFO :                      40 - |  ZDRVFWRT :                      2E - |
*ZDRVMARSBLK :                   37 - | *ZDRVMCDBLK :                    36 - |
 ZDRVRAMLEN :                    30 - |  ZDRVRAMSRC :                    35 - |
 ZDRVROMBLK :                    2F - |  ZMARS_SEND :                  1058 C |
 ZMARS_SEND.BLOCKED_M :        1151 C |  ZMARS_SEND.CLR_PCM :          10D0 C |
 ZMARS_SEND.CLR_PWM :          1157 C |  ZMARS_SEND.COPY_BYTES :       10A8 C |
 ZMARS_SEND.MCDT_BLOCKED :     10CA C |  ZMARS_SEND.MCDT_NOUPD :       10D4 C |
 ZMARS_SEND.MCD_NEXTP :        109F C |  ZMARS_SEND.NEXT_COMM :        1129 C |
 ZMARS_SEND.NEXT_PACKET :      111E C |  ZMARS_SEND.PWM_EXIT :         115B C |
 ZMARS_SEND.SET_COMBANK :      1163 C |  ZMARS_SEND.TEST_SUB :         108D C |
 ZMARS_SEND.WAIT_ENTER :       10F2 C |  ZMARS_SEND.WAIT_IN :          1079 C |
 ZMARS_SEND.WAIT_SUB :         10B7 C |  ZMARS_SEND.W_PASS2 :          113F C |
*ZOPCEX :                         8 - |  ZOPCEXX :                       D9 - |
*ZOPCNOP :                        0 - |  ZOPCPUSHAF :                    F5 - |
 ZOPCRET :                       C9 - |  ZPSG_CTRL :                   7F11 - |
 ZSET_TESTME :                    0 - |  ZYM_CTRL_1 :                  4000 - |
 ZYM_CTRL_2 :                  4002 - |  ZYM_DATA_1 :                  4001 - |
 ZYM_DATA_2 :                  4003 - | *_ADRERR :                     5F40 - |
*_BOOTSTAT :                   5EA0 - | *_BURAM :                      5F16 - |
 _CCR :                    FFFFFE92 - |  _CDBIOS :                     5F22 - |
*_CDBOOT :                     5F1C - | *_CDSTAT :                     5E80 - |
*_CHKERR :                     5F52 - | *_CODERR :                     5F46 - |
*_DEVERR :                     5F4C - |  _DMACHANNEL0 :            FFFFFF8C - |
*_DMACHANNEL1 :            FFFFFF9C - | *_DMACOUNT0 :              FFFFFF88 - |
*_DMACOUNT1 :              FFFFFF98 - | *_DMADEST0 :               FFFFFF84 - |
*_DMADEST1 :               FFFFFF94 - |  _DMAOPERATION :           FFFFFFB0 - |
*_DMAREQACK0 :             FFFFFFB4 - | *_DMAREQACK1 :             FFFFFFB8 - |
 _DMASOURCE0 :             FFFFFF80 - | *_DMASOURCE1 :             FFFFFF90 - |
*_DMAVECTORE0 :            FFFFFFA4 - | *_DMAVECTORE1 :            FFFFFFAC - |
*_DMAVECTORN0 :            FFFFFFA0 - | *_DMAVECTORN1 :            FFFFFFA8 - |
 _FRAMEBUFFER :            24000000 - | *_FRC_H :                         2 - |
*_FRC_L :                         3 - |  _FRT :                    FFFFFE10 - |
*_HRH :                    FFFFFF10 - | *_HRL :                    FFFFFF14 - |
*_HRL32 :                  FFFFFF04 - | *_JR :                     FFFFFF00 - |
*_LEVEL1 :                     5F76 - | *_LEVEL2 :                     5F7C - |
*_LEVEL3 :                     5F82 - | *_LEVEL4 :                     5F88 - |
*_LEVEL5 :                     5F8E - | *_LEVEL6 :                     5F94 - |
*_LEVEL7 :                     5F9A - | *_NOCOD0 :                     5F6A - |
*_NOCOD1 :                     5F70 - | *_OCR_H :                         4 - |
*_OCR_L :                         5 - |  _OVERWRITE :              24020000 - |
 _PALETTE :                20004200 - | *_SERIAL :                 FFFFFE00 - |
*_SETJMPTBL :                  5F0A - | *_SPVERR :                     5F5E - |
 _SYSREG :                 20004000 - | *_TCR :                           6 - |
*_TCSR :                          1 - | *_TIER :                          0 - |
*_TOCR :                          7 - | *_TRACE :                      5F64 - |
*_TRAP00 :                     5FA0 - | *_TRAP01 :                     5FA6 - |
*_TRAP02 :                     5FAC - | *_TRAP03 :                     5FB2 - |
*_TRAP04 :                     5FB8 - | *_TRAP05 :                     5FBE - |
*_TRAP06 :                     5FC4 - | *_TRAP07 :                     5FCA - |
*_TRAP08 :                     5FD0 - | *_TRAP09 :                     5FD6 - |
*_TRAP10 :                     5FDC - | *_TRAP11 :                     5FE2 - |
*_TRAP12 :                     5FE8 - | *_TRAP13 :                     5FEE - |
*_TRAP14 :                     5FF4 - | *_TRAP15 :                     5FFA - |
*_TRPERR :                     5F58 - | *_USERCALL0 :                  5F28 - |
*_USERCALL1 :                  5F2E - | *_USERCALL2 :                  5F34 - |
*_USERCALL3 :                  5F3A - | *_USERMODE :                   5EA6 - |
 _VDPREG :                 20004100 - | *_WAITVSYNC :                  5F10 - |
 _WAITVSYNC.TABLE :            6020 C |

   1934 symbols
    371 unused symbols

 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 4 - 03/26/2024 04:57:42 AM


  Defined Macros:
  ---------------

CPU_ME                                | DATA_BKEND                           
DATA_BKSET                            | ENDSTRCT                             
ERREPORT                              | GEMAHEAD                             
GEMATRK                               | GINSDAC                              
GINSFM                                | GINSFM3                              
GINSNULL                              | GINSPCM                              
GINSPSG                               | GINSPSGN                             
GINSPWM                               | GSMPLDATA                            
ISO_FILE                              | ISO_SETFS                            
LOAD_BANKS                            | REPORT                               
ROMPAD                                | SCREEN_CODE                          
SDRAM_BKEND                           | SDRAM_BKSET                          
STRCT                                 | VDP_SHOWME                           

     26 macros

 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 5 - 03/26/2024 04:57:42 AM


  Defined Functions:
  ------------------

LOCATE                                | MAP_SIZE                             
CELL_SIZE                             | CELL_VRAM                            
VDP_ADDR_R                            | VDP_ADDR_L                           
VDP_ADDR                              |

 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 6 - 03/26/2024 04:57:42 AM


  Code Pages:
  ----------

STANDARD (0 changed characters)

1 code page

0.33 seconds assembly time

  17649 lines source file
  19073 lines incl. macro expansions
      6 passes
      0 errors
      0 warnings
