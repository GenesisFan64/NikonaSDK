 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 1 - 02/08/2024 04:21:45 AM


       1/       0 :                     ; ===========================================================================
       2/       0 :                     ; NIKONA MD 16-BIT/32-BIT SDK
       3/       0 :                     ; (C)2023-2024 GenesisFan64
       4/       0 :                     ;
       5/       0 :                     ; For developing games on the Genesis-family of systems
       6/       0 :                     ; including Sega CD, Sega 32X, Sega CD32X and Sega Pico
       7/       0 :                     ;
       8/       0 :                     ; Assemble with a modified AS Macro Assembler by flamewing
       9/       0 :                     ; and a custom version of p2bin:
      10/       0 :                     ;
      11/       0 :                     ; asl main.asm -i "." -olist ROM.lst -q -xx -A -L -D (flags)
      12/       0 :                     ; p2bin -p=00 main.p ROM.bin
      13/       0 :                     ;
      14/       0 :                     ; ASSEMBLER FLAGS:
      15/       0 :                     ; MCD,MARS,MARSCD,PICO,CDREGION,EMU
      16/       0 :                     
      17/       0 :                     ; * System targets, MUST include ALL and set 1 to
      18/       0 :                     ; the target console and the others to 0
      19/       0 :                     ;    MCD - Sega CD
      20/       0 :                     ;   MARS - Sega 32X
      21/       0 :                     ; MARSCD - Sega CD32X
      22/       0 :                     ;   PICO - Sega Pico
      23/       0 :                     ; The code builds to stock Genesis by default,
      24/       0 :                     ; ONLY CHOOSE ONE TARGET AT THE TIME.
      25/       0 :                     ;
      26/       0 :                     ; CDREGION - SEGACD/CD32X ONLY, Set ROM region:
      27/       0 :                     ;            0=Japan 1=USA 2=Europe
      28/       0 :                     ;      EMU - 0=Real hardware, 1=Emulator only
      29/       0 :                     ;
      30/       0 :                     ; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣴⣶⡿⠿⠿⠿⣶⣦⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀
      31/       0 :                     ; ⠀⠀⠀⠀⠀⠀⢀⣠⣶⢟⣿⠟⠁⢰⢋⣽⡆⠈⠙⣿⡿⣶⣄⡀⠀⠀⠀⠀⠀⠀
      32/       0 :                     ; ⠀⠀⠀⠀⣠⣴⠟⠋⢠⣾⠋⠀⣀⠘⠿⠿⠃⣀⠀⠈⣿⡄⠙⠻⣦⣄⠀⠀⠀⠀
      33/       0 :                     ; ⠀⢀⣴⡿⠋⠁⠀⢀⣼⠏⠺⠛⠛⠻⠂⠐⠟⠛⠛⠗⠘⣷⡀⠀⠈⠙⢿⣦⡀⠀
      34/       0 :                     ; ⣴⡟⢁⣀⣠⣤⡾⢿⡟⠀⠀⠀⠘⢷⠾⠷⡾⠃⠀⠀⠀⢻⡿⢷⣤⣄⣀⡈⢻⣦
      35/       0 :                     ; ⠙⠛⠛⠋⠉⠁⠀⢸⡇⠀⠀⢠⣄⠀⠀⠀⠀⣠⡄⠀⠀⢸⡇⠀⠈⠉⠙⠛⠛⠋
      36/       0 :                     ; ⠀⠀⠀⠀⠀⠀⠀⢸⡇⢾⣦⣀⣹⡧⠀⠀⢼⣏⣀⣴⡷⢸⡇⠀⠀⠀⠀⠀⠀⠀
      37/       0 :                     ; ⠀⠀⠀⠀⠀⠀⠀⠸⣧⡀⠈⠛⠛⠁⠀⠀⠈⠛⠛⠁⢀⣼⠇⠀⠀⠀⠀⠀⠀⠀
      38/       0 :                     ; ⠀⠀⠀⠀⠀⠀⠀⢀⣘⣿⣶⣤⣀⣀⣀⣀⣀⣀⣤⣶⣿⣃⠀⠀⠀⠀⠀⠀⠀⠀
      39/       0 :                     ; ⠀⠀⠀⠀⠀⣠⡶⠟⠋⢉⣀⣽⠿⠉⠉⠉⠹⢿⣍⣈⠉⠛⠷⣦⡀⠀⠀⠀⠀⠀
      40/       0 :                     ; ⠀⠀⠀⠀⢾⣯⣤⣴⡾⠟⠋⠁⠀⠀⠀⠀⠀⠀⠉⠛⠷⣶⣤⣬⣿⠀⠀⠀⠀⠀
      41/       0 :                     ; ⠀⠀⠀⠀⠀⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠁⠀⠀⠀⠀⠀
      42/       0 :                     ; ===========================================================================
      43/       0 :                     
      44/       0 :                     ; ====================================================================
      45/       0 :                     ; ----------------------------------------------------------------
      46/       0 :                     ; USER SETTINGS
      47/       0 :                     ; ----------------------------------------------------------------
      48/       0 :                     
      49/       0 :                     ; --------------------------------------------------------
      50/       0 :                     ; 68000 RAM SIZES (MAIN-CPU)
      51/       0 :                     ;
      52/       0 :                     ; MAX_SysCode, MAX_UserCode are only used in Sega CD
      53/       0 :                     ; Sega 32X and CD32X.
      54/       0 :                     ; These sections are free to use on stock Genesis
      55/       0 :                     ; and Pico in case you are not interested on the add-ons.
      56/       0 :                     ;
      57/       0 :                     ; RESERVED RAM ADDRESSES:
      58/       0 :                     ; $FFFB00-$FFFD00 | Stack a7
      59/       0 :                     ; $FFFD00-$FFFDFF | RESERVED for the Sega CD Vector jumps
      60/       0 :                     ;                   FREE if running on cartridge
 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 2 - 02/08/2024 04:21:45 AM


      61/       0 :                     ;                   (Genesis,32X,Pico)
      62/       0 :                     ; $FFFE00-$FFFEFF | RESERVED for Sega CD, BIOS uses this area
      63/       0 :                     ;                   temporals
      64/       0 :                     ;                   ** Not sure if this can be used after
      65/       0 :                     ;                   during the application **
      66/       0 :                     ; $FFFF00-$FFFFFF | RESERVED for the Sound Driver,
      67/       0 :                     ;                   The Z80 driver writes to this area
      68/       0 :                     ; --------------------------------------------------------
      69/       0 :                     
      70/       0 : =$2000               MAX_SysCode	equ $2000	; Task routines ** CD/32X/CD32X ONLY **
      71/       0 : =$8000               MAX_UserCode	equ $8000	; USER code ** CD/32X/CD32X ONLY **
      72/       0 : =$1800               MAX_ScrnBuff	equ $1800	; Current screen buffer
      73/       0 : =$2000               MAX_MdVideo	equ $2000	; Video cache'd visuals, registers, etc.
      74/       0 : =$600                MAX_MdSystem	equ $0600	; Internal lib stuff and a copy of save data for reading/writing
      75/       0 : =$C00                MAX_MdOther	equ $0C00	; Add-on stuff
      76/       0 :                     
      77/       0 :                     ; ====================================================================
      78/       0 :                     
      79/       0 :                     		org 0
      80/       0 :                     		cpu 		68000		; Starting CPU is 68000
      81/       0 :                     		padding		off		; Dont pad dc.b
      82/       0 :                     		listing 	purecode	; Want listing file
      83/       0 :                     		supmode 	on 		; Supervisor mode (68K)
      84/       0 :                     		dottedstructs	off
      85/       0 :                     		page 		0
      86/       0 :                     
      87/       0 :                     ; ====================================================================
      88/       0 :                     ; ----------------------------------------------------------------
      89/       0 :                     ; Includes
      90/       0 :                     ; ----------------------------------------------------------------
      91/       0 :                     
      92/       0 :                     		include	"macros.asm"		; Assembler macros
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; MACROS section
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; THIS MUST BE INCLUDED AT THE VERY START.
(1)    6/       0 :                     ; ----------------------------------------------------------------
(1)    7/       0 :                     
(1)    8/       0 :                     ; ====================================================================
(1)    9/       0 :                     ; --------------------------------------------------------
(1)   10/       0 :                     ; Functions
(1)   11/       0 :                     ; --------------------------------------------------------
(1)   12/       0 :                     
(1)   13/       0 :                     locate		function a,b,c,(b&$FF)|(a<<8&$FF00)|(c<<16&$FF0000)	; VDP locate: X pos|Y pos|Layer for some video
(1)   14/       0 :                     cell_vram	function a,(a<<5)					; Vram position in 8x8 CELLS
(1)   15/       0 :                     map_size	function l,r,(((l-1)/8)<<16&$FFFF0000|((r-1)/8)&$FFFF)	; Full w/h sizes, for cell sizes use doubleword
(1)   16/       0 :                     ; md_ramloc	function x,-(-x)&$FFFFFFFF
(1)   17/       0 :                     
(1)   18/       0 :                     ; ====================================================================
(1)   19/       0 :                     ; --------------------------------------------------------
(1)   20/       0 :                     ; Macros
(1)   21/       0 :                     ; --------------------------------------------------------
(1)   22/       0 :                     
(1)   23/       0 : =$0                  currPadding	set 0
(1)   24/       0 :                     notZ80		function cpu,(cpu<>128)&&(cpu<>32988)
(1)   25/       0 :                     
(1)   26/       0 :                     ; -------------------------------------
(1)   27/       0 :                     ; Reserve memory
(1)   28/       0 :                     ;
(1)   29/       0 :                     ; (Doesn't work on Z80)
(1)   30/       0 :                     ; -------------------------------------
(1)   31/       0 :                     
(1)   32/       0 :                     strct		macro thisinput			; Reserve memory address
(1)   33/       0 :                     GLBL_LASTPC	set *
(1)   34/       0 :                     		dephase
(1)   35/       0 :                     		phase thisinput
(1)   36/       0 :                     GLBL_LASTORG	set *
(1)   37/       0 :                     		endm
(1)   38/       0 :                     
(1)   39/       0 :                     ; -------------------------------------
(1)   40/       0 :                     ; Finish struct
(1)   41/       0 :                     ; -------------------------------------
(1)   42/       0 :                     
(1)   43/       0 :                     endstrct	macro				; Then finish the custom struct.
(1)   44/       0 :                     		org GLBL_LASTORG
(1)   45/       0 :                     		phase GLBL_LASTPC
(1)   46/       0 :                     		endm
(1)   47/       0 :                     
(1)   48/       0 :                     ; -------------------------------------
(1)   49/       0 :                     ; Report memory usage
(1)   50/       0 :                     ; -------------------------------------
(1)   51/       0 :                     
(1)   52/       0 :                     report		macro text,dis,dat
(1)   53/       0 :                     	if MOMPASS == 2
(1)   54/       0 :                     		if dat == -1
(1)   55/       0 :                     			message text+": \{(dis)&$FFFFFF}"
(1)   56/       0 :                     		else
(1)   57/       0 :                     			if dis > dat
(1)   58/       0 :                     				warning "RAN OUT OF "+text+" SPACE (\{(dis)&$FFFFFF} of \{(dat)&$FFFFFF})"
(1)   59/       0 :                     			else
(1)   60/       0 :                     				message text+" uses \{(dis)&$FFFFFF} of \{(dat)&$FFFFFF}"
(1)   61/       0 :                     			endif
(1)   62/       0 :                     		endif
(1)   63/       0 :                     	endif
(1)   64/       0 :                     		endm
(1)   65/       0 :                     
(1)   66/       0 :                     ; -------------------------------------
(1)   67/       0 :                     ; Same thing but only show on error
(1)   68/       0 :                     ; -------------------------------------
(1)   69/       0 :                     
(1)   70/       0 :                     erreport	macro text,dis,dat
(1)   71/       0 :                     	if MOMPASS == 2
(1)   72/       0 :                     		if dat == -1
(1)   73/       0 :                     			message text+": \{(dis)&$FFFFFF}"
(1)   74/       0 :                     		else
(1)   75/       0 :                     			if dis > dat
(1)   76/       0 :                     				error "RAN OUT OF "+text+" (\{(dis)&$FFFFFF} of \{(dat)&$FFFFFF})"
(1)   77/       0 :                     ; 			else
(1)   78/       0 :                     ; 				message text+" uses \{(dis)&$FFFFFF} of \{(dat)&$FFFFFF}"
(1)   79/       0 :                     			endif
(1)   80/       0 :                     		endif
(1)   81/       0 :                     	endif
(1)   82/       0 :                     		endm
(1)   83/       0 :                     
(1)   84/       0 :                     ; -------------------------------------
(1)   85/       0 :                     ; ZERO Fill padding
(1)   86/       0 :                     ; -------------------------------------
(1)   87/       0 :                     
(1)   88/       0 :                     rompad		macro address			; Zero fill
(1)   89/       0 :                     diff := address - *
(1)   90/       0 :                     		if diff < 0
(1)   91/       0 :                     			error "too much stuff before org $\{address} ($\{(-diff)} bytes)"
(1)   92/       0 :                     		else
(1)   93/       0 :                     			while diff > 1024
(1)   94/       0 :                     				; AS can only generate 1 kb of code on a single line
(1)   95/       0 :                     				dc.b [1024]0
(1)   96/       0 :                     diff := diff - 1024
(1)   97/       0 :                     			endm
(1)   98/       0 :                     			dc.b [diff]0
(1)   99/       0 :                     		endif
(1)  100/       0 :                     	endm
(1)  101/       0 :                     
(1)  102/       0 :                     ; ====================================================================
(1)  103/       0 :                     ; --------------------------------------------------------
(1)  104/       0 :                     ; ISO filesystem macros
(1)  105/       0 :                     ; --------------------------------------------------------
(1)  106/       0 :                     
(1)  107/       0 :                     ; Set a ISO file
(1)  108/       0 :                     ; NOTE: a valid ISO head is required from $8000 to $B7FF
(1)  109/       0 :                     ; DATES are random here
(1)  110/       0 :                     
(1)  111/       0 :                     iso_setfs	macro type,start,end
(1)  112/       0 :                     .fstrt:
(1)  113/       0 :                     		dc.b .fend-.fstrt				; Block size
(1)  114/       0 :                     		dc.b 0						; zero
(1)  115/       0 :                     		dc.b (start>>11&$FF),(start>>19&$FF)		; Start sector, little
(1)  116/       0 :                     		dc.b (start>>27&$FF),(start>>35&$FF)
(1)  117/       0 :                     		dc.l start>>11					; Start sector, big
(1)  118/       0 :                     		dc.b ((end-start)&$FF),((end-start)>>8&$FF)	; Filesize, little
(1)  119/       0 :                     		dc.b ((end-start)>>16&$FF),((end-start)>>24&$FF)
(1)  120/       0 :                     		dc.l end-start					; Filesize, big
(1)  121/       0 :                     		dc.b (2023-1900)+1				; Year
(1)  122/       0 :                     		dc.b 0,0,0,0,0,0				; TODO
(1)  123/       0 :                     		dc.b 2						; File flags
(1)  124/       0 :                     		dc.b 0,0
(1)  125/       0 :                     		dc.b 1,0					; Volume sequence number, little
(1)  126/       0 :                     		dc.b 0,1					; Volume sequence number, big
(1)  127/       0 :                     		dc.b 1,type
(1)  128/       0 :                     .fend:
(1)  129/       0 :                     		endm
(1)  130/       0 :                     
(1)  131/       0 :                     iso_file	macro filename,start,end
(1)  132/       0 :                     .fstrt:		dc.b .fend-.fstrt				; Block size
(1)  133/       0 :                     		dc.b 0						; zero
(1)  134/       0 :                     		dc.b (start>>11&$FF),(start>>19&$FF)		; Start sector, little
(1)  135/       0 :                     		dc.b (start>>27&$FF),(start>>35&$FF)
(1)  136/       0 :                     		dc.l start>>11					; Start sector, big
(1)  137/       0 :                     		dc.b ((end-start)&$FF),((end-start)>>8&$FF)	; Filesize, little
(1)  138/       0 :                     		dc.b ((end-start)>>16&$FF),((end-start)>>24&$FF)
(1)  139/       0 :                     		dc.l end-start					; Filesize, big
(1)  140/       0 :                     		dc.b (2023-1900)+1				; Year
(1)  141/       0 :                     		dc.b 0,0,0,0,0,0				; TODO
(1)  142/       0 :                     		dc.b 0						; File flags
(1)  143/       0 :                     		dc.b 0,0
(1)  144/       0 :                     		dc.b 1,0					; Volume sequence number, little
(1)  145/       0 :                     		dc.b 0,1					; Volume sequence number, big
(1)  146/       0 :                     		dc.b .flend-.flen
(1)  147/       0 :                     .flen:		dc.b filename,";1"
(1)  148/       0 :                     .flend:		dc.b 0
(1)  149/       0 :                     .fend:
(1)  150/       0 :                     		endm
(1)  151/       0 :                     
(1)  152/       0 :                     ; ====================================================================
(1)  153/       0 :                     ; --------------------------------------------------------
(1)  154/       0 :                     ; Nikona macros
(1)  155/       0 :                     ; --------------------------------------------------------
(1)  156/       0 :                     
(1)  157/       0 :                     ; ---------------------------------------------
(1)  158/       0 :                     ; Screen mode code
(1)  159/       0 :                     ; ---------------------------------------------
(1)  160/       0 :                     
(1)  161/       0 :                     screen_code macro lblstart,lblend,path
(1)  162/       0 :                     	if MCD|MARSCD
(1)  163/       0 :                     		align $800		; SCD/CD32X sector align
(1)  164/       0 :                     	elseif MARS
(1)  165/       0 :                     		align 4
(1)  166/       0 :                     		phase $880000+*		; 32X ROM-area
(1)  167/       0 :                     	endif
(1)  168/       0 :                     ; Md_Screen00:
(1)  169/       0 :                     lblstart label *
(1)  170/       0 :                     	if MARS
(1)  171/       0 :                     		dephase
(1)  172/       0 :                     	endif
(1)  173/       0 :                     mctopscrn:
(1)  174/       0 :                     	if MARS|MCD|MARSCD
(1)  175/       0 :                     		phase RAM_UserCode	; SCD/32X/CD32X relocate to RAM area
(1)  176/       0 :                     	endif
(1)  177/       0 :                     mcscrn_s:
(1)  178/       0 :                     	include path;"game/screen_0/code.asm"
(1)  179/       0 :                     mcscrn_e:
(1)  180/       0 :                     	if MARS
(1)  181/       0 :                     		dephase
(1)  182/       0 :                     	elseif MCD|MARSCD
(1)  183/       0 :                     		dephase
(1)  184/       0 :                     		phase mctopscrn+(mcscrn_e-RAM_UserCode)
(1)  185/       0 :                     		align $800
(1)  186/       0 :                     ; Md_Screen00_e:
(1)  187/       0 :                     lblend label *
(1)  188/       0 :                     	endif
(1)  189/       0 :                     	if MCD|MARS|MARSCD
(1)  190/       0 :                     		report "THIS SCREEN's code",mcscrn_e-RAM_UserCode,MAX_UserCode
(1)  191/       0 :                     	endif
(1)  192/       0 :                     	endm
(1)  193/       0 :                     
(1)  194/       0 :                     ; ---------------------------------------------
(1)  195/       0 :                     ; 68K data bank
(1)  196/       0 :                     ; ---------------------------------------------
(1)  197/       0 :                     
(1)  198/       0 :                     data_bkset macro startlbl,except
(1)  199/       0 :                     	if MCD|MARSCD
(1)  200/       0 :                     		align $800
(1)  201/       0 :                     	elseif MARS
(1)  202/       0 :                     		align 4
(1)  203/       0 :                     	endif
(1)  204/       0 :                     ; MCD_DBANK0:
(1)  205/       0 :                     startlbl label *
(1)  206/       0 :                     	if MCD|MARSCD
(1)  207/       0 :                     		phase sysmcd_wram
(1)  208/       0 :                     	elseif MARS
(1)  209/       0 :                     		dephase
(1)  210/       0 :                     	if except==-1
(1)  211/       0 :                     		phase $900000+*	; First 32X data bank
(1)  212/       0 :                     	else
(1)  213/       0 :                     		phase $900000
(1)  214/       0 :                     	endif
(1)  215/       0 :                     	endif
(1)  216/       0 :                     	endm
(1)  217/       0 :                     
(1)  218/       0 :                     data_bkend macro startlbl,endlbl,thissize
(1)  219/       0 :                     
(1)  220/       0 :                     	if MARS
(1)  221/       0 :                     		dephase
(1)  222/       0 :                     		if thissize > $40000
(1)  223/       0 :                     			warning "THIS BANK SIZE IS TOO LARGE FOR WORD-RAM (CD/CD32X)"
(1)  224/       0 :                     		endif
(1)  225/       0 :                     		report "THIS 68K DATA BANK at $900000",thissize,$100000
(1)  226/       0 :                     	elseif MCD|MARSCD
(1)  227/       0 :                     		phase startlbl+(thissize)
(1)  228/       0 :                     		align $800
(1)  229/       0 :                     endlbl label *
(1)  230/       0 :                     ; MCD_DBANK0_e:
(1)  231/       0 :                     		report "THIS 68K DATA BANK at WORD-RAM",thissize,$40000
(1)  232/       0 :                     	endif
(1)  233/       0 :                     	endm
(1)  234/       0 :                     
(1)  235/       0 :                     ; --------------------------------------------------------
(1)  236/       0 :                     ; 32X ONLY
(1)  237/       0 :                     ; --------------------------------------------------------
(1)  238/       0 :                     
(1)  239/       0 :                     sdram_bkset macro thislbl,endlbl
(1)  240/       0 :                     	if MCD|MARSCD
(1)  241/       0 :                     		align $800
(1)  242/       0 :                     	elseif MARS
(1)  243/       0 :                     		align 4
(1)  244/       0 :                     		phase $880000+*
(1)  245/       0 :                     	endif
(1)  246/       0 :                     ; MARSDATA_DEFAULT:
(1)  247/       0 :                     thislbl label *
(1)  248/       0 :                     	if MARS|MARSCD
(1)  249/       0 :                     		dephase
(1)  250/       0 :                     		dc.l endlbl-thislbl
(1)  251/       0 :                     		phase SH2_USER_DATA
(1)  252/       0 :                     	endif
(1)  253/       0 :                     	endm
(1)  254/       0 :                     
(1)  255/       0 :                     ; ---------------------------------------------
(1)  256/       0 :                     
(1)  257/       0 :                     sdram_bkend macro thislbl,endlbl
(1)  258/       0 :                     	if MARS|MARSCD
(1)  259/       0 :                     		dephase
(1)  260/       0 :                     		align 8	; <-- DREQ alignment
(1)  261/       0 :                     	endif
(1)  262/       0 :                     	if MCD|MARSCD
(1)  263/       0 :                     		dephase
(1)  264/       0 :                     		phase thislbl+(endlbl-thislbl)
(1)  265/       0 :                     		align $800
(1)  266/       0 :                     	elseif MARS
(1)  267/       0 :                     		phase $880000+*
(1)  268/       0 :                     	endif
(1)  269/       0 :                     endlbl label *
(1)  270/       0 :                     	if MARS
(1)  271/       0 :                     		dephase
(1)  272/       0 :                     	endif
(1)  273/       0 :                     	if MARS|MARSCD
(1)  274/       0 :                     		report "SH2 SDRAM DATA: thislbl",endlbl-thislbl,(CS3|$40000)-SH2_USER_DATA
(1)  275/       0 :                     	endif
(1)  276/       0 :                     	endm
(1)  277/       0 :                     
(1)  278/       0 :                     ; --------------------------------------------------------
(1)  279/       0 :                     ; Set data bank(s) for the current screen
(1)  280/       0 :                     ;
(1)  281/       0 :                     ; mcdpos:
(1)  282/       0 :                     ; 	dc.b "FILENAME.BIN",0
(1)  283/       0 :                     ; 	align 2
(1)  284/       0 :                     ;
(1)  285/       0 :                     ; marspos:
(1)  286/       0 :                     ; 	dc.l MARSDATA_DEFAULT		; 32X Cartridge point (UNUSED on CD32X)
(1)  287/       0 :                     ; 	dc.b "MARSD_00.BIN",0		; CD32X Filename (UNUSED on 32X Cartridge)
(1)  288/       0 :                     ; 	align 2
(1)  289/       0 :                     ; --------------------------------------------------------
(1)  290/       0 :                     
(1)  291/       0 :                     set_dbanks macro mcdpos,marspos
(1)  292/       0 :                     	if MARS|MARSCD
(1)  293/       0 :                     		lea	marspos(pc),a0		; 32X/CD32X: SH2 side data
(1)  294/       0 :                     		bsr	System_MarsDataPack
(1)  295/       0 :                     	endif
(1)  296/       0 :                     	if MCD|MARSCD
(1)  297/       0 :                     		bsr	System_McdSubWait
(1)  298/       0 :                     		lea	mcdpos(pc),a0		; CD/CD32X: Genesis data
(1)  299/       0 :                     		bsr	System_McdTrnsfr_WRAM
(1)  300/       0 :                     	endif
(1)  301/       0 :                     	endm
(1)  302/       0 :                     
(1)  303/       0 :                     ; ---------------------------------------------
(1)  304/       0 :                     ; VDP color debug
(1)  305/       0 :                     ; ---------------------------------------------
(1)  306/       0 :                     
(1)  307/       0 :                     vdp_showme	macro color
(1)  308/       0 :                     		move.l	#$C0000000,(vdp_ctrl).l
(1)  309/       0 :                     		move.w	#color,(vdp_data).l
(1)  310/       0 :                     		endm
(1)  311/       0 :                     
      93/       0 :                     		include "game/globals.asm"	; USER variables
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; GLOBAL RAM for ALL screen modes
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; Score, Lives, Level number, etc.
(1)    6/       0 :                     ; ----------------------------------------------------------------
(1)    7/       0 :                     
(1)    8/       0 : (MACRO)              			strct RAM_MdGlobal
(1)    8/       0 : =$0                  GLBL_LASTPC     set *
(1)    8/       0 :                                     dephase
(1)    8/FFFFFFFFFFFFEA04 :                                     phase RAM_MDGLOBAL
(1)    8/FFFFFFFFFFFFEA04 : =$FFFFFFFFFFFFEA04   GLBL_LASTORG    set *
(1)    9/FFFFFFFFFFFFEA04 :                     
(1)   10/FFFFFFFFFFFFEA04 :                     ; ------------------------------------------------------------
(1)   11/FFFFFFFFFFFFEA04 :                     ; Examples:
(1)   12/FFFFFFFFFFFFEA04 :                     ;
(1)   13/FFFFFFFFFFFFEA04 :                     ; RAM_Glbl_ExmpL ds.l 8 ; reserve 4 LONGS ($20 bytes)
(1)   14/FFFFFFFFFFFFEA04 :                     ; RAM_Glbl_ExmpW ds.w 6 ; reserve 3 WORDS ($0C bytes)
(1)   15/FFFFFFFFFFFFEA04 :                     ; RAM_Glbl_ExmpB ds.b 5 ; reserve 5 bytes
(1)   16/FFFFFFFFFFFFEA04 :                     ;
(1)   17/FFFFFFFFFFFFEA04 :                     ; Careful with bytes, everything needs to be word-algined
(1)   18/FFFFFFFFFFFFEA04 :                     ; or your will get an ADDRESS ERROR.
(1)   19/FFFFFFFFFFFFEA04 :                     ; ------------------------------------------------------------
(1)   20/FFFFFFFFFFFFEA04 :                     
(1)   21/FFFFFFFFFFFFEA04 :                     RAM_Glbl_Filler		ds.l 1		; 1 long (4 bytes)
(1)   22/FFFFFFFFFFFFEA08 :                     
(1)   23/FFFFFFFFFFFFEA08 :                     
(1)   24/FFFFFFFFFFFFEA08 :                     ; ------------------------------------------------------------
(1)   25/FFFFFFFFFFFFEA08 :                     sizeof_MdGlbl		ds.l 0		; size label
(1)   26/FFFFFFFFFFFFEA0C : (MACRO)              			endstrct
(1)   26/FFFFFFFFFFFFEA04 :                                     org GLBL_LASTORG
(1)   26/       0 :                                     phase GLBL_LASTPC
(1)   27/       0 :                     
      94/       0 :                     		include	"system/mcd/map.asm"	; Sega CD hardware map (shared with Sub-CPU)
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; SEGA CD SUB-CPU MAP
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; ------------------------------------------------
(1)    7/       0 :                     ; Register area
(1)    8/       0 :                     ;
(1)    9/       0 :                     ; MAIN-CPU: $A12000 (sysmcd_reg)
(1)   10/       0 :                     ; SUB-CPU:  $FF8000 (scpu_reg)
(1)   11/       0 :                     ; ------------------------------------------------
(1)   12/       0 :                     
(1)   13/       0 :                     ; -------------
(1)   14/       0 :                     ; bits
(1)   15/       0 :                     ; -------------
(1)   16/       0 :                     
(1)   17/       0 : =$2                  bitWRamMode	equ 2		;2M | 1M
(1)   18/       0 :                     
(1)   19/       0 :                     ; -------------
(1)   20/       0 :                     ; Registers
(1)   21/       0 :                     ; -------------
(1)   22/       0 :                     
(1)   23/       0 : =$3                  mcd_memory	equ $03
(1)   24/       0 : =$6                  mcd_hint	equ $06		; [W] HBlank RAM redirection-jump (MAIN CPU ONLY)
(1)   25/       0 : =$E                  mcd_comm_m	equ $0E		; [B] Comm port MAIN R/W | SUB READ ONLY
(1)   26/       0 : =$F                  mcd_comm_s	equ $0F		; [B] Comm port SUB R/W  | MAIN READ ONLY
(1)   27/       0 : =$10                 mcd_dcomm_m	equ $10		; [S: $0E] Communication MAIN
(1)   28/       0 : =$20                 mcd_dcomm_s	equ $20		; [S: $0E] Communication SUB
(1)   29/       0 : =$32                 mcd_intmask	equ $32		;
(1)   30/       0 :                     
(1)   31/       0 :                     ; ====================================================================
(1)   32/       0 :                     
      95/       0 :                     		include	"system/mars/map.asm"	; 32X hardware map (shared with SH2)
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; SH2 MAP
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; --------------------------------------------------------
(1)    7/       0 :                     ; SH2 SIDE MAP
(1)    8/       0 :                     ; --------------------------------------------------------
(1)    9/       0 :                     
(1)   10/       0 : =$0                  CS0		equ	$00000000	; Boot ROM & System registers
(1)   11/       0 : =$2000000            CS1		equ	$02000000	; ROM data all 4MB, Gone if RV=1
(1)   12/       0 : =$4000000            CS2		equ	$04000000	; Framebuffer area
(1)   13/       0 : =$6000000            CS3		equ	$06000000	; SDRAM
(1)   14/       0 : =$20000000           TH		equ	$20000000	; OR value for CacheThru
(1)   15/       0 : =$20004000           _sysreg		equ	$00004000|TH	; MARS System registers
(1)   16/       0 : =$20004100           _vdpreg		equ	$00004100|TH	; SuperVDP registers
(1)   17/       0 : =$20004200           _palette	equ	$00004200|TH	; Palette RAM for Pixel-Packed or RLE mode
(1)   18/       0 : =$24000000           _framebuffer:	equ	CS2|TH		; Framebuffer: First 240 words are the linetable
(1)   19/       0 : =$24020000           _overwrite:	equ	CS2|TH+$20000	; Overwrite: $00 writes are ignored
(1)   20/       0 :                     
(1)   21/       0 :                     ; --------------------------------------------------------
(1)   22/       0 :                     ; Variables
(1)   23/       0 :                     ; --------------------------------------------------------
(1)   24/       0 :                     
(1)   25/       0 :                     ; ------------------------------------------------
(1)   26/       0 :                     ; System
(1)   27/       0 :                     ; ------------------------------------------------
(1)   28/       0 :                     
(1)   29/       0 :                     ; _sysreg
(1)   30/       0 : =$0                  adapter		equ	$00		; adapter control register (Read as WORD)
(1)   31/       0 : =$1                  intmask		equ	$01		; SH2 CPU ONLY: interrupts mask
(1)   32/       0 : =$3                  standby		equ	$03		; CMD interrupt request bit by MD side (slave|master) (BYTE)
(1)   33/       0 : =$5                  hcount		equ	$05		; H Counter (BYTE)
(1)   34/       0 : =$6                  dreqctl		equ	$06		; DREQ control (WORD)
(1)   35/       0 : =$8                  dreqsource	equ	$08		; DREQ source address
(1)   36/       0 : =$C                  dreqdest	equ	$0C		; DREQ destination address
(1)   37/       0 : =$10                 dreqlen		equ	$10		; DREQ length
(1)   38/       0 : =$12                 dreqfifo	equ	$12		; DREQ FIFO
(1)   39/       0 : =$14                 vresintclr	equ	$14		; VRES interrupt clear
(1)   40/       0 : =$16                 vintclr		equ	$16		; V interrupt clear
(1)   41/       0 : =$18                 hintclr		equ	$18		; H interrupt clear
(1)   42/       0 : =$1A                 cmdintclr	equ	$1a		; CMD interrupt clear
(1)   43/       0 : =$1C                 pwmintclr	equ	$1C		; PWM interrupt clear
(1)   44/       0 : =$20                 comm0		equ	$20		; Communication ports ***
(1)   45/       0 : =$21                 comm1		equ	$21		; ALL CPUs can see this ports: including Z80
(1)   46/       0 : =$22                 comm2		equ	$22		; only be careful with the read/write directions.
(1)   47/       0 : =$23                 comm3		equ	$23		; ODD addresses (1,3,5...) are BYTE-read only.
(1)   48/       0 : =$24                 comm4		equ	$24		; EVEN addresses (0,2,4...) can be read as WORDs
(1)   49/       0 : =$25                 comm5		equ	$25		; Writing LONG addreses are possible depending
(1)   50/       0 : =$26                 comm6		equ	$26		; of the CPU's aligment limitations.
(1)   51/       0 : =$27                 comm7		equ	$27		;
(1)   52/       0 : =$28                 comm8		equ	$28		;
(1)   53/       0 : =$29                 comm9		equ	$29		;
(1)   54/       0 : =$2A                 comm10		equ	$2A		;
(1)   55/       0 : =$2B                 comm11		equ	$2B		;
(1)   56/       0 : =$2C                 comm12		equ	$2C		;
(1)   57/       0 : =$2D                 comm13		equ	$2D		;
(1)   58/       0 : =$2E                 comm14		equ	$2E		;
(1)   59/       0 : =$2F                 comm15		equ	$2F		;
(1)   60/       0 : =$30                 timerctl	equ	$30		; PWM Timer Control
(1)   61/       0 : =$31                 pwmctl		equ	$31		; PWM Control
(1)   62/       0 : =$32                 cycle		equ	$32		; PWM Cycle
(1)   63/       0 : =$34                 lchwidth	equ	$34		; PWM L ch Width
(1)   64/       0 : =$36                 rchwidth	equ	$36		; PWM R ch Width
(1)   65/       0 : =$38                 monowidth	equ	$38		; PWM Monaural Width
(1)   66/       0 :                     
(1)   67/       0 :                     ; _sysreg
(1)   68/       0 :                     ; adapter
(1)   69/       0 : =$1                  CART		equ	%00000001	; CD or Cartridge
(1)   70/       0 : =$2                  ADEN		equ	%00000010	; MARS Enabled: No/Yes
(1)   71/       0 : =$80                 FM		equ	%10000000	; SuperVDP permission: MD or SH
(1)   72/       0 :                     ; framectl
(1)   73/       0 : =$1                  FS		equ	%00000001	; Current framebuffer DRAM pixel data
(1)   74/       0 : =$2                  FEN		equ	%00000010	; Can write to Framebuffer: Yes/No
(1)   75/       0 :                     ; vdpsts
(1)   76/       0 : =$80                 VBLK		equ	%10000000	; VBlank bit
(1)   77/       0 : =$40                 HBLK		equ	%01000000	; HBlank bit
(1)   78/       0 : =$20                 PEN		equ	%00100000	; Can write to Palette: Yes/No
(1)   79/       0 :                     ; intmask
(1)   80/       0 : =$8                  VIRQ_ON		equ	$08		; IRQ masks for IRQ mask register
(1)   81/       0 : =$4                  HIRQ_ON		equ	$04
(1)   82/       0 : =$2                  CMDIRQ_ON	equ	$02
(1)   83/       0 : =$1                  PWMIRQ_ON	equ	$01
(1)   84/       0 :                     
(1)   85/       0 :                     ; _vdpreg
(1)   86/       0 : =$0                  tvmode		equ	$00		; TV mode
(1)   87/       0 : =$1                  bitmapmd	equ	$01		; Bitmap mode
(1)   88/       0 : =$2                  shift		equ	$02		; Lineshift bit
(1)   89/       0 : =$4                  filllength	equ	$04		; Auto Fill Length register
(1)   90/       0 : =$6                  fillstart	equ	$06		; Auto Fill Start Address register
(1)   91/       0 : =$8                  filldata	equ	$08		; Auto Fill Data register
(1)   92/       0 : =$A                  vdpsts		equ	$0A		; VDP Status register
(1)   93/       0 : =$B                  framectl	equ	$0B		; Frame Buffer Control register
(1)   94/       0 :                     
(1)   95/       0 :                     ; --------------------------------------------------------
(1)   96/       0 :                     ; SH2 Internal registers, independent for each CPU
(1)   97/       0 :                     ; --------------------------------------------------------
(1)   98/       0 :                     
(1)   99/       0 :                     ; DMA Channel 0: General data transfer
(1)  100/       0 :                     ; DMA Channel 1: PWM only
(1)  101/       0 :                     
(1)  102/       0 : =$FFFFFE00           _SERIAL		equ	$FFFFFE00	; Serial Control
(1)  103/       0 : =$FFFFFE10           _FRT		equ	$FFFFFE10	; Free run timer
(1)  104/       0 : =$0                  _TIER		equ	$00		; Timer interrupt enable register
(1)  105/       0 : =$1                  _TCSR		equ	$01		; Timer control & status register
(1)  106/       0 : =$2                  _FRC_H		equ	$02		; Free running counter High
(1)  107/       0 : =$3                  _FRC_L		equ	$03		; Free running counter Low
(1)  108/       0 : =$4                  _OCR_H		equ	$04		; Output compare register High
(1)  109/       0 : =$5                  _OCR_L		equ	$05		; Output compare register Low
(1)  110/       0 : =$6                  _TCR		equ	$06		; Timer control register
(1)  111/       0 : =$7                  _TOCR		equ	$07		; Timer output compare control register
(1)  112/       0 : =$FFFFFE92           _CCR		equ	$FFFFFE92	; Cache register (WORD)
(1)  113/       0 : =$FFFFFF00           _JR		equ	$FFFFFF00	; DIVU (--- / val)
(1)  114/       0 : =$FFFFFF04           _HRL32		equ	$FFFFFF04	; DIVU (val / ---) or RIGHT-long result if read
(1)  115/       0 : =$FFFFFF10           _HRH		equ	$FFFFFF10	; DIVU Result: LEFT long
(1)  116/       0 : =$FFFFFF14           _HRL		equ	$FFFFFF14	; DIVU Result: RIGHT long
(1)  117/       0 : =$FFFFFF80           _DMASOURCE0	equ	$FFFFFF80	; DMA source address 0
(1)  118/       0 : =$FFFFFF84           _DMADEST0	equ	$FFFFFF84	; DMA destination address 0
(1)  119/       0 : =$FFFFFF88           _DMACOUNT0	equ	$FFFFFF88	; DMA transfer count 0
(1)  120/       0 : =$FFFFFF8C           _DMACHANNEL0	equ	$FFFFFF8C	; DMA channel control 0
(1)  121/       0 : =$FFFFFF90           _DMASOURCE1	equ	$FFFFFF90	; DMA source address 1
(1)  122/       0 : =$FFFFFF94           _DMADEST1	equ	$FFFFFF94	; DMA destination address 1
(1)  123/       0 : =$FFFFFF98           _DMACOUNT1	equ	$FFFFFF98	; DMA transfer count 1
(1)  124/       0 : =$FFFFFF9C           _DMACHANNEL1	equ	$FFFFFF9C	; DMA channel control 1
(1)  125/       0 : =$FFFFFFA0           _DMAVECTORN0	equ	$FFFFFFA0	; DMA vector number N0
(1)  126/       0 : =$FFFFFFA4           _DMAVECTORE0	equ	$FFFFFFA4	; DMA vector number E0
(1)  127/       0 : =$FFFFFFA8           _DMAVECTORN1	equ	$FFFFFFA8	; DMA vector number N1
(1)  128/       0 : =$FFFFFFAC           _DMAVECTORE1	equ	$FFFFFFAC	; DMA vector number E1
(1)  129/       0 : =$FFFFFFB0           _DMAOPERATION	equ	$FFFFFFB0	; DMA operation
(1)  130/       0 : =$FFFFFFB4           _DMAREQACK0	equ	$FFFFFFB4	; DMA request/ack select control 0
(1)  131/       0 : =$FFFFFFB8           _DMAREQACK1	equ	$FFFFFFB8	; DMA request/ack select control 1
(1)  132/       0 :                     
      96/       0 :                     		include	"system/md/map.asm"	; Genesis hardware map and other areas
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Genesis / Pico 68000 map
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 : =$200000             sys_exram	equ	$200000		; Second half of 4MB rom or external RAM (Normal or save data)
(1)    7/       0 : =$A00000             z80_cpu		equ	$A00000		; Z80 CPU area, size: $2000
(1)    8/       0 : =$A04000             ym_ctrl_1	equ	$A04000		; YM2612 reg 1
(1)    9/       0 : =$A04001             ym_data_1	equ	$A04001		; YM2612 reg 2
(1)   10/       0 : =$A04002             ym_ctrl_2	equ	$A04002		; YM2612 reg 1
(1)   11/       0 : =$A04003             ym_data_2	equ	$A04003		; YM2612 reg 2
(1)   12/       0 : =$A10001             sys_io		equ	$A10001		; bits: OVRSEAS(7)|PAL(6)|DISK(5)|VER(3-0)
(1)   13/       0 : =$A10003             sys_data_1	equ	$A10003		; Port 1 DATA
(1)   14/       0 : =$A10005             sys_data_2	equ	$A10005		; Port 2 DATA
(1)   15/       0 : =$A10007             sys_data_3	equ	$A10007		; Modem DATA
(1)   16/       0 : =$A10009             sys_ctrl_1	equ	$A10009		; Port 1 CTRL
(1)   17/       0 : =$A1000B             sys_ctrl_2	equ	$A1000B		; Port 2 CTRL
(1)   18/       0 : =$A1000D             sys_ctrl_3	equ	$A1000D		; Modem CTRL
(1)   19/       0 : =$A11100             z80_bus 	equ	$A11100		; only use bit 0 (bit 8 as WORD)
(1)   20/       0 : =$A11200             z80_reset	equ	$A11200		; WRITE only ($0000 reset/$0100 cancel)
(1)   21/       0 : =$A130F1             md_bank_sram	equ	$A130F1		; Make SRAM visible at $200000
(1)   22/       0 : =$A14000             sys_tmss	equ	$A14000		; write "SEGA" here for ver > 0
(1)   23/       0 : =$C00000             vdp_data	equ	$C00000		; video data port
(1)   24/       0 : =$C00004             vdp_ctrl	equ	$C00004		; video control port
(1)   25/       0 : =$C00011             psg_ctrl	equ	$C00011		; PSG control
(1)   26/       0 :                     
(1)   27/       0 :                     ; ----------------------------------------------------------------
(1)   28/       0 :                     ; SEGA CD map
(1)   29/       0 :                     ; ----------------------------------------------------------------
(1)   30/       0 :                     
(1)   31/       0 : =$200000             sysmcd_wram	equ	$200000
(1)   32/       0 : =$A12000             sysmcd_reg	equ	$A12000
(1)   33/       0 :                     
(1)   34/       0 :                     ; ----------------------------------------------------------------
(1)   35/       0 :                     ; 32X map
(1)   36/       0 :                     ; ----------------------------------------------------------------
(1)   37/       0 :                     
(1)   38/       0 : =$A130EC             sysmars_id	equ	$A130EC		; 32X's ID: "MARS"
(1)   39/       0 : =$A15100             sysmars_reg	equ	$A15100		; MARS 32X registers section, see system/mars/map.asm for variables
(1)   40/       0 :                     
(1)   41/       0 :                     ; ----------------------------------------------------------------
(1)   42/       0 :                     ; Genesis / Mega drive Z80 map
(1)   43/       0 :                     ; ----------------------------------------------------------------
(1)   44/       0 :                     
(1)   45/       0 : =$4000               zym_ctrl_1	equ	$4000		; YM2612 reg 1
(1)   46/       0 : =$4001               zym_data_1	equ	$4001		; YM2612 reg 2
(1)   47/       0 : =$4002               zym_ctrl_2	equ	$4002		; YM2612 reg 1
(1)   48/       0 : =$4003               zym_data_2	equ	$4003		; YM2612 reg 2
(1)   49/       0 : =$6000               zbank		equ	$6000		; Z80 ROM BANK: %XXXXXXXX X0000000 00000000 (9 writes)
(1)   50/       0 :                     ; zvdp_data	equ	$7F00		; video data port
(1)   51/       0 :                     ; zvdp_ctrl	equ	$7F04		; video control port
(1)   52/       0 : =$7F11               zpsg_ctrl	equ	$7F11		; PSG control
(1)   53/       0 :                     
      97/       0 :                     		include	"system/md/ram.asm"	; Genesis RAM sections
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; MD RAM
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; Reserved RAM sections:
(1)    6/       0 :                     ; $FFFD00-$FFFDFF: Sega CD's vectors
(1)    7/       0 :                     ; $FFFE80-$FFFFFF: Z80 write-only scratchpad
(1)    8/       0 :                     ; ----------------------------------------------------------------
(1)    9/       0 :                     
(1)   10/       0 :                     ; --------------------------------------------------------
(1)   11/       0 :                     ; Settings
(1)   12/       0 :                     ; --------------------------------------------------------
(1)   13/       0 :                     
(1)   14/       0 : (MACRO)              			strct $FFFF0000
(1)   14/       0 : =$0                  GLBL_LASTPC     set *
(1)   14/FFFFFFFFFFFFEA04 :                                     dephase
(1)   14/FFFFFFFFFFFF0000 :                                     phase $FFFF0000
(1)   14/FFFFFFFFFFFF0000 : =$FFFFFFFFFFFF0000   GLBL_LASTORG    set *
(1)   15/FFFFFFFFFFFF0000 :                     RAM_SystemCode		ds.b MAX_SysCode	; CD/32X/CD32X
(1)   16/FFFFFFFFFFFF2000 :                     RAM_UserCode		ds.b MAX_UserCode	; CD/32X/CD32X
(1)   17/FFFFFFFFFFFFA000 :                     
(1)   18/FFFFFFFFFFFFA000 :                     ; ------------------------------------------------
(1)   19/FFFFFFFFFFFFA000 :                     ; > $FF8000 section
(1)   20/FFFFFFFFFFFFA000 :                     ; ------------------------------------------------
(1)   21/FFFFFFFFFFFFA000 :                     
(1)   22/FFFFFFFFFFFFA000 :                     check_thisram		ds.l 0			; <-- get current pos
(1)   26/FFFFFFFFFFFFA004 :                     RAM_MdVideo		ds.b MAX_MdVideo	; $FF8000
(1)   27/FFFFFFFFFFFFC004 :                     RAM_MdSystem		ds.b MAX_MdSystem	;
(1)   28/FFFFFFFFFFFFC604 :                     RAM_MdOther		ds.b MAX_MdOther	; 32X's DREQ goes here
(1)   29/FFFFFFFFFFFFD204 :                     RAM_ScrnBuff		ds.b MAX_ScrnBuff
(1)   30/FFFFFFFFFFFFEA04 :                     RAM_MdGlobal		ds.b sizeof_MdGlbl
(1)   31/FFFFFFFFFFFFD40C :                     sizeof_MdRam		ds.l 0
(1)   32/FFFFFFFFFFFFD410 : (MACRO)              			endstrct
(1)   32/FFFFFFFFFFFF0000 :                                     org GLBL_LASTORG
(1)   32/       0 :                                     phase GLBL_LASTPC
(1)   36/       0 :                     
(1)   37/       0 :                     ; ------------------------------------------------
(1)   38/       0 :                     ; Add-on area
(1)   39/       0 :                     ; ------------------------------------------------
(1)   40/       0 :                     
(1)   41/       0 : (MACRO)              			strct RAM_MdOther
(1)   41/       0 : =$0                  GLBL_LASTPC     set *
(1)   41/FFFFFFFFFFFF0000 :                                     dephase
(1)   41/FFFFFFFFFFFFC604 :                                     phase RAM_MDOTHER
(1)   41/FFFFFFFFFFFFC604 : =$FFFFFFFFFFFFC604   GLBL_LASTORG    set *
(1)   42/FFFFFFFFFFFFC604 :                     RAM_MdDreq		ds.b $C00		; 32X DREQ area (MANUAL SIZE)
(1)   43/FFFFFFFFFFFFD204 :                     sizeof_RamOther		ds.l 0
(1)   44/FFFFFFFFFFFFD208 : (MACRO)              			endstrct
(1)   44/FFFFFFFFFFFFC604 :                                     org GLBL_LASTORG
(1)   44/       0 :                                     phase GLBL_LASTPC
(1)   45/       0 : (MACRO)              			erreport "ADD-ON RAM USES",(sizeof_RamOther-RAM_MdOther),MAX_MdOther
(1)   46/       0 :                     
(1)   47/       0 :                     ; ------------------------------------------------
(1)   48/       0 :                     ; Other
(1)   49/       0 :                     ; ------------------------------------------------
(1)   50/       0 :                     
(1)   51/       0 : =$FFFFFD00           RAM_Stack		equ RAM_MegaCd			; <-- goes backwards
(1)   52/       0 : =$FFFFFD00           RAM_MegaCd		equ $FFFFFD00
(1)   53/       0 : =$FFFFFF00           RAM_ZSndBuff		equ $FFFFFF00
(1)   54/       0 :                     
      98/       0 :                     		include	"system/shared.asm"	; Shared variables and specials
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Shared variables
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; ====================================================================
(1)    7/       0 :                     ; ----------------------------------------------------------------
(1)    8/       0 :                     ; 32X SECTION
(1)    9/       0 :                     ; ----------------------------------------------------------------
(1)   10/       0 :                     
(1)   87/       0 :                     
      99/       0 :                     
     100/       0 :                     ; ====================================================================
     101/       0 :                     ; ----------------------------------------------------------------
     102/       0 :                     ; Init procedures for all systems
     103/       0 :                     ; ----------------------------------------------------------------
     104/       0 :                     
     105/       0 :                     ; ---------------------------------------------
     106/       0 :                     ; SEGA 32X
     107/       0 :                     ; ---------------------------------------------
     108/       0 :                     
     163/       0 :                     		include	"system/head_pico.asm"		; Pico header
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; PICO header
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; REMINDER: NO Z80 CPU, DO NOT USE THE Z80 AREA IF
(1)    6/       0 :                     ; RECYCLING THE GENESIS CODE.
(1)    7/       0 :                     ; ----------------------------------------------------------------
(1)    8/       0 :                     
(1)    9/       0 : FFFF FD00           		dc.l RAM_Stack		; Stack point
(1)   10/       4 : 0000 0204           		dc.l Pico_Entry		; Entry point MUST point to $3F0
(1)   11/       8 : 0000 0200           		dc.l Pico_ErrBus	; Bus error
(1)   12/       C : 0000 0200           		dc.l Pico_ErrAddr	; Address error
(1)   13/      10 : 0000 0200           		dc.l Pico_ErrIll	; ILLEGAL Instruction
(1)   14/      14 : 0000 0200           		dc.l Pico_ErrZDiv	; Divide by 0
(1)   15/      18 : 0000 0200           		dc.l Pico_ErrChk	; CHK Instruction
(1)   16/      1C : 0000 0200           		dc.l Pico_ErrTrapV	; TRAPV Instruction
(1)   17/      20 : 0000 0200           		dc.l Pico_ErrPrivl	; Privilege violation
(1)   18/      24 : 0000 0200           		dc.l Pico_Trace		; Trace
(1)   19/      28 : 0000 0200           		dc.l Pico_Line1010	; Line 1010 Emulator
(1)   20/      2C : 0000 0200           		dc.l Pico_Line1111	; Line 1111 Emulator
(1)   21/      30 : 0000 0200           		dc.l Pico_ErrorEx	; Error exception
(1)   22/      34 : 0000 0200           		dc.l Pico_ErrorEx
(1)   23/      38 : 0000 0200           		dc.l Pico_ErrorEx
(1)   24/      3C : 0000 0200           		dc.l Pico_ErrorEx
(1)   25/      40 : 0000 0200           		dc.l Pico_ErrorEx
(1)   26/      44 : 0000 0200           		dc.l Pico_ErrorEx
(1)   27/      48 : 0000 0200           		dc.l Pico_ErrorEx
(1)   28/      4C : 0000 0200           		dc.l Pico_ErrorEx
(1)   29/      50 : 0000 0200           		dc.l Pico_ErrorEx
(1)   30/      54 : 0000 0200           		dc.l Pico_ErrorEx
(1)   31/      58 : 0000 0200           		dc.l Pico_ErrorEx
(1)   32/      5C : 0000 0200           		dc.l Pico_ErrorEx
(1)   33/      60 : 0000 0200           		dc.l Pico_ErrorEx
(1)   34/      64 : 0000 0200           		dc.l Pico_Error
(1)   35/      68 : 0000 0202           		dc.l Pico_UserInt	; PICO: User interrupt
(1)   36/      6C : 0000 0202           		dc.l Pico_PcmInt	; PICO: PCM-full interrupt
(1)   37/      70 : FFFF C452           		dc.l RAM_MdMarsHInt	; RAM jump for HBlank (JMP xxxx xxxx)
(1)   38/      74 : 0000 0202           		dc.l Pico_UnkInt	; PICO: Unknown
(1)   39/      78 : FFFF C44C           		dc.l RAM_MdMarsVInt	; RAM jump for VBlank (JMP xxxx xxxx)
(1)   40/      7C : 0000 0200           		dc.l Pico_Error
(1)   41/      80 : 0000 0200           		dc.l Pico_Error
(1)   42/      84 : 0000 0200           		dc.l Pico_Error
(1)   43/      88 : 0000 0200           		dc.l Pico_Error
(1)   44/      8C : 0000 0200           		dc.l Pico_Error
(1)   45/      90 : 0000 0200           		dc.l Pico_Error
(1)   46/      94 : 0000 0200           		dc.l Pico_Error
(1)   47/      98 : 0000 0200           		dc.l Pico_Error
(1)   48/      9C : 0000 0200           		dc.l Pico_Error
(1)   49/      A0 : 0000 0200           		dc.l Pico_Error
(1)   50/      A4 : 0000 0200           		dc.l Pico_Error
(1)   51/      A8 : 0000 0200           		dc.l Pico_Error
(1)   52/      AC : 0000 0200           		dc.l Pico_Error
(1)   53/      B0 : 0000 0200           		dc.l Pico_Error
(1)   54/      B4 : 0000 0200           		dc.l Pico_Error
(1)   55/      B8 : 0000 0200           		dc.l Pico_Error
(1)   56/      BC : 0000 0200           		dc.l Pico_Error
(1)   57/      C0 : 0000 0200           		dc.l Pico_Error
(1)   58/      C4 : 0000 0200           		dc.l Pico_Error
(1)   59/      C8 : 0000 0200           		dc.l Pico_Error
(1)   60/      CC : 0000 0200           		dc.l Pico_Error
(1)   61/      D0 : 0000 0200           		dc.l Pico_Error
(1)   62/      D4 : 0000 0200           		dc.l Pico_Error
(1)   63/      D8 : 0000 0200           		dc.l Pico_Error
(1)   64/      DC : 0000 0200           		dc.l Pico_Error
(1)   65/      E0 : 0000 0200           		dc.l Pico_Error
(1)   66/      E4 : 0000 0200           		dc.l Pico_Error
(1)   67/      E8 : 0000 0200           		dc.l Pico_Error
(1)   68/      EC : 0000 0200           		dc.l Pico_Error
(1)   69/      F0 : 0000 0200           		dc.l Pico_Error
(1)   70/      F4 : 0000 0200           		dc.l Pico_Error
(1)   71/      F8 : 0000 0200           		dc.l Pico_Error
(1)   72/      FC : 0000 0200           		dc.l Pico_Error
(1)   73/     100 : 5345 4741 2050      		dc.b "SEGA PICO       "
              106 : 4943 4F20 2020 
              10C : 2020 2020          
(1)   74/     110 : 2843 2947 4636      		dc.b "(C)GF64 2024.???"
              116 : 3420 3230 3234 
              11C : 2E3F 3F3F          
(1)   75/     120 : 4E69 6B6F 6E61      		dc.b "Nikona PICO                                     "
              126 : 2050 4943 4F20 
              12C : 2020 2020 2020 
              132 : 2020 2020 2020 
              138 : 2020 2020 2020 
              13E : 2020 2020 2020 
              144 : 2020 2020 2020 
              14A : 2020 2020 2020    
(1)   76/     150 : 4E69 6B6F 6E61      		dc.b "Nikona PICO                                     "
              156 : 2050 4943 4F20 
              15C : 2020 2020 2020 
              162 : 2020 2020 2020 
              168 : 2020 2020 2020 
              16E : 2020 2020 2020 
              174 : 2020 2020 2020 
              17A : 2020 2020 2020    
(1)   77/     180 : 474D 2048 4F4D      		dc.b "GM HOMEBREW-02"
              186 : 4542 5245 572D 
              18C : 3032             
(1)   78/     18E : 0000                		dc.w 0
(1)   79/     190 : 2020 2020 2020      		dc.b "                "
              196 : 2020 2020 2020 
              19C : 2020 2020          
(1)   80/     1A0 : 0000 0000           		dc.l 0
(1)   81/     1A4 : 0003 CDBC           		dc.l ROM_END
(1)   82/     1A8 : 00FF 0000           		dc.l $FF0000
(1)   83/     1AC : 00FF FFFF           		dc.l $FFFFFF
(1)   84/     1B0 : 2020 2020           		dc.l $20202020		; dc.b "RA",$F8,$20
(1)   85/     1B4 : 2020 2020           		dc.l $20202020		; $200000
(1)   86/     1B8 : 2020 2020           		dc.l $20202020		; $203FFF
(1)   87/     1BC :                     		align $1F0
(1)   88/     1F0 : 4620 2020 2020      		dc.b "F               "
              1F6 : 2020 2020 2020 
              1FC : 2020 2020          
(1)   89/     200 :                     
(1)   90/     200 :                     ; ====================================================================
(1)   91/     200 :                     ; ----------------------------------------------------------------
(1)   92/     200 :                     ; Error handlers
(1)   93/     200 :                     ;
(1)   94/     200 :                     ; all these do nothing currently
(1)   95/     200 :                     ; ----------------------------------------------------------------
(1)   96/     200 :                     
(1)   97/     200 :                     Pico_ErrBus:				; Bus error
(1)   98/     200 :                     Pico_ErrAddr:				; Address error
(1)   99/     200 :                     Pico_ErrIll:				; ILLEGAL Instruction
(1)  100/     200 :                     Pico_ErrZDiv:				; Divide by 0
(1)  101/     200 :                     Pico_ErrChk:				; CHK Instruction
(1)  102/     200 :                     Pico_ErrTrapV:				; TRAPV Instruction
(1)  103/     200 :                     Pico_ErrPrivl:				; Privilege violation
(1)  104/     200 :                     Pico_Trace:				; Trace
(1)  105/     200 :                     Pico_Line1010:				; Line 1010 Emulator
(1)  106/     200 :                     Pico_Line1111:				; Line 1111 Emulator
(1)  107/     200 :                     Pico_ErrorEx:				; Error exception
(1)  108/     200 :                     Pico_Error:
(1)  109/     200 : 4E73                		rte			; Return from Exception
(1)  110/     202 :                     
(1)  111/     202 :                     ; ----------------------------------------------------------------
(1)  112/     202 :                     ; PICO-exclusive interrupts
(1)  113/     202 :                     ; ----------------------------------------------------------------
(1)  114/     202 :                     
(1)  115/     202 :                     Pico_UserInt:
(1)  116/     202 :                     Pico_PcmInt:	; <-- Interrupt when the PCM chips gets full, Ojamajo# uses this.
(1)  117/     202 :                     Pico_UnkInt:
(1)  118/     202 : 4E73                		rte
(1)  119/     204 :                     
(1)  120/     204 :                     ; ====================================================================
(1)  121/     204 :                     ; ----------------------------------------------------------------
(1)  122/     204 :                     ; Entry point
(1)  123/     204 :                     ; ----------------------------------------------------------------
(1)  124/     204 :                     
(1)  125/     204 :                     Pico_Entry:
(1)  126/     204 :                     	; --------------------------------
(1)  127/     204 :                     	; Activate PICO system
(1)  128/     204 : 46FC 2700           		move	#$2700,sr		; Disable interrputs
(1)  129/     208 : 41F9 0080 0019      		lea	($800019),a0
(1)  130/     20E : 203C 5345 4741      		move.l	#"SEGA",d0
(1)  131/     214 : 01C8 0000           		movep.l	d0,(a0)			; Unlock PICO system
(1)  132/     218 : 4A79 00C0 0004      		tst.w	(vdp_ctrl).l		; Random VDP test to unlock video
(1)  133/     21E :                     
(1)  134/     21E :                     	; --------------------------------
(1)  135/     21E : 7000                		moveq	#0,d0
(1)  136/     220 : 2C40                		movea.l	d0,a6
(1)  137/     222 : 4E66                		move.l	a6,usp
(1)  138/     224 : 41F9 FFFF 0000      		lea	($FFFF0000),a0		; Clean our "work" RAM
(1)  139/     22A : 223C FFFF D40C      		move.l	#sizeof_mdram,d1
(1)  140/     230 : 7000                		moveq	#0,d0
(1)  141/     232 : 30C0                .loop_ram:	move.w	d0,(a0)+
(1)  142/     234 : B1C1                		cmp.l	d1,a0
(1)  143/     236 : 65FA                		bcs.s	.loop_ram
(1)  144/     238 : 4CF9 7FFF 00FF      		movem.l	($FF0000),d0-a6		; Clean registers using zeros from RAM
              23E : 0000             
(1)  145/     240 : 4DF9 00C0 0004      		lea	(vdp_ctrl).l,a6
(1)  146/     246 : 3E16                .wait_dma:	move.w	(a6),d7			; Check if our DMA is active.
(1)  147/     248 : 0807 0001           		btst	#1,d7
(1)  148/     24C : 66F8                		bne.s	.wait_dma
(1)  149/     24E :                     
     164/     24E : 6112                		bsr	Sound_init			; Init Sound driver FIRST
     165/     250 : 6100 00FA           		bsr	Video_init			;  ''  Video
     166/     254 : 6100 0C88           		bsr	System_Init			;  ''  Values
     167/     258 : 31FC 0000 C458      		move.w	#0,(RAM_ScreenMode).w		; Start at screen 0
     168/     25E : 6000 0FC8           		bra.w	Md_ReadModes			; Go to SCREENJUMP section
     169/     262 :                     
     170/     262 :                     ; ---------------------------------------------
     171/     262 :                     ; MD
     172/     262 :                     ; ---------------------------------------------
     183/     262 :                     
     184/     262 :                     ; ====================================================================
     185/     262 :                     ; --------------------------------------------------------
     186/     262 :                     ; SYSTEM routines and MODE switching code
     187/     262 :                     ;
     188/     262 :                     ; MD and PICO: Normal ROM locations
     189/     262 :                     ; CD/32X/CD32X: Loaded into RAM
     190/     262 :                     ; --------------------------------------------------------
     191/     262 :                     
     196/     262 :                     ; ---------------------------------------------
     197/     262 :                     
     198/     262 :                     		include	"sound/driver/gema.asm"
(1)    1/     262 :                     ; ====================================================================
(1)    2/     262 :                     ; --------------------------------------------------------
(1)    3/     262 :                     ; GEMA/Nikona sound driver v0.9
(1)    4/     262 :                     ; (C)2023-2024 GenesisFan64
(1)    5/     262 :                     ;
(1)    6/     262 :                     ; Features:
(1)    7/     262 :                     ; - Support for SEGA CD's PCM channels:
(1)    8/     262 :                     ;   | All 8 channels with streaming support
(1)    9/     262 :                     ;   | for larger samples.
(1)   10/     262 :                     ;
(1)   11/     262 :                     ; - Support for 32X's PWM:
(1)   12/     262 :                     ;   | 7 pseudo-channels in either MONO
(1)   13/     262 :                     ;   | or STEREO.
(1)   14/     262 :                     ;
(1)   15/     262 :                     ; - DMA ROM protection
(1)   16/     262 :                     ;   | This keeps DAC in a decent quality while
(1)   17/     262 :                     ;   | doing any DMA jobs in the 68k side.
(1)   18/     262 :                     ; - DAC Playback at 16000hz
(1)   19/     262 :                     ; - FM special mode with custom frequencies
(1)   20/     262 :                     ; - Autodetection for the PSG's Tone3 mode
(1)   21/     262 :                     ;
(1)   22/     262 :                     ; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣴⣶⡿⠿⠿⠿⣶⣦⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀
(1)   23/     262 :                     ; ⠀⠀⠀⠀⠀⠀⢀⣠⣶⢟⣿⠟⠁⢰⢋⣽⡆⠈⠙⣿⡿⣶⣄⡀⠀⠀⠀⠀⠀⠀
(1)   24/     262 :                     ; ⠀⠀⠀⠀⣠⣴⠟⠋⢠⣾⠋⠀⣀⠘⠿⠿⠃⣀⠀⠈⣿⡄⠙⠻⣦⣄⠀⠀⠀⠀
(1)   25/     262 :                     ; ⠀⢀⣴⡿⠋⠁⠀⢀⣼⠏⠺⠛⠛⠻⠂⠐⠟⠛⠛⠗⠘⣷⡀⠀⠈⠙⢿⣦⡀⠀
(1)   26/     262 :                     ; ⣴⡟⢁⣀⣠⣤⡾⢿⡟⠀⠀⠀⠘⢷⠾⠷⡾⠃⠀⠀⠀⢻⡿⢷⣤⣄⣀⡈⢻⣦
(1)   27/     262 :                     ; ⠙⠛⠛⠋⠉⠁⠀⢸⡇⠀⠀⢠⣄⠀⠀⠀⠀⣠⡄⠀⠀⢸⡇⠀⠈⠉⠙⠛⠛⠋
(1)   28/     262 :                     ; ⠀⠀⠀⠀⠀⠀⠀⢸⡇⢾⣦⣀⣹⡧⠀⠀⢼⣏⣀⣴⡷⢸⡇⠀⠀⠀⠀⠀⠀⠀
(1)   29/     262 :                     ; ⠀⠀⠀⠀⠀⠀⠀⠸⣧⡀⠈⠛⠛⠁⠀⠀⠈⠛⠛⠁⢀⣼⠇⠀⠀⠀⠀⠀⠀⠀
(1)   30/     262 :                     ; ⠀⠀⠀⠀⠀⠀⠀⢀⣘⣿⣶⣤⣀⣀⣀⣀⣀⣀⣤⣶⣿⣃⠀⠀⠀⠀⠀⠀⠀⠀
(1)   31/     262 :                     ; ⠀⠀⠀⠀⠀⣠⡶⠟⠋⢉⣀⣽⠿⠉⠉⠉⠹⢿⣍⣈⠉⠛⠷⣦⡀⠀⠀⠀⠀⠀
(1)   32/     262 :                     ; ⠀⠀⠀⠀⢾⣯⣤⣴⡾⠟⠋⠁⠀⠀⠀⠀⠀⠀⠉⠛⠷⣶⣤⣬⣿⠀⠀⠀⠀⠀
(1)   33/     262 :                     ; ⠀⠀⠀⠀⠀⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠁⠀⠀⠀⠀⠀
(1)   34/     262 :                     ; --------------------------------------------------------
(1)   35/     262 :                     
(1)   36/     262 :                     ; ====================================================================
(1)   37/     262 :                     ; --------------------------------------------------------
(1)   38/     262 :                     ; Macros
(1)   39/     262 :                     ; --------------------------------------------------------
(1)   40/     262 :                     
(1)   41/     262 :                     gSmpHead macro len,loop
(1)   42/     262 :                     	dc.b ((len)&$FF),(((len)>>8)&$FF),(((len)>>16)&$FF)	; length
(1)   43/     262 :                     	dc.b ((loop)&$FF),(((loop)>>8)&$FF),(((loop)>>16)&$FF)
(1)   44/     262 :                     	endm
(1)   45/     262 :                     
(1)   46/     262 :                     ; --------------------------------------------------------
(1)   47/     262 :                     ; Variables
(1)   48/     262 :                     ; --------------------------------------------------------
(1)   49/     262 :                     
(1)   50/     262 :                     ; z80_cpu	equ $A00000		; Z80 CPU area, size: $2000
(1)   51/     262 :                     ; z80_bus 	equ $A11100		; only read bit 0 (bit 8 as WORD)
(1)   52/     262 :                     ; z80_reset	equ $A11200		; WRITE only: $0000 reset/$0100 cancel
(1)   53/     262 :                     
(1)   54/     262 :                     ; Z80-area points:
(1)   55/     262 : =$40                 zDrvFifo	equ commZfifo		; FIFO command storage
(1)   56/     262 : =$2E                 zDrvFWrt	equ commZWrite		; FIFO command index
(1)   57/     262 : =$2F                 zDrvRomBlk	equ commZRomBlk		; ROM block flag
(1)   58/     262 : =$37                 zDrvMarsBlk	equ marsBlock		; Flag to disable 32X's PWM
(1)   59/     262 : =$36                 zDrvMcdBlk	equ mcdBlock		; Flag to disable SegaCD's PCM
(1)   60/     262 : =$35                 zDrvRamSrc	equ cdRamSrcB		; RAM-read source+dest pointers
(1)   61/     262 : =$30                 zDrvRamLen	equ cdRamLen		; RAM-read length and flag
(1)   62/     262 :                     
(1)   63/     262 :                     ; --------------------------------------------------------
(1)   64/     262 :                     ; Variables
(1)   65/     262 :                     ; --------------------------------------------------------
(1)   66/     262 :                     
(1)   67/     262 : =$FFFFFF00           RAM_ZCdFlag_D	equ RAM_ZSndBuff	; transferRom flag
(1)   68/     262 :                     
(1)   69/     262 :                     ; ====================================================================
(1)   70/     262 :                     ; --------------------------------------------------------
(1)   71/     262 :                     ; Initialize Sound
(1)   72/     262 :                     ;
(1)   73/     262 :                     ; Uses:
(1)   74/     262 :                     ; a0-a1,d0-d1
(1)   75/     262 :                     ;
(1)   76/     262 :                     ; NOTE:
(1)   77/     262 :                     ; Place the Z80 code separaetly from this file
(1)   78/     262 :                     ; on a safe place depending of the system.
(1)   79/     262 :                     ; --------------------------------------------------------
(1)   80/     262 :                     
(1)   81/     262 :                     ; 		align $80
(1)   82/     262 :                     Sound_Init:
(1)   83/     262 : 007C 0700           		ori.w	#$0700,sr
(1)   85/     266 :                     		; PICO driver init...
(1)  113/     266 : 203C 0000 35BC      		move.l	#Gema_MasterList,d0
(1)  114/     26C : 606E                		bra	gemaSetMasterList
(1)  115/     26E :                     
(1)  116/     26E :                     ; ----------------------------------------------------------------
(1)  117/     26E :                     ; Sound_Update
(1)  118/     26E :                     ;
(1)  119/     26E :                     ; Call and LOOP this during DISPLAY to communicate
(1)  120/     26E :                     ; with the Z80
(1)  121/     26E :                     ;
(1)  122/     26E :                     ; SegaCD/CD32X:
(1)  123/     26E :                     ; This checks if the Z80 wants to read from RAM (as it can't
(1)  124/     26E :                     ; see it) then this CPU manually writes the RAM bytes from
(1)  125/     26E :                     ; here to the Z80's RAM
(1)  126/     26E :                     ; THIS IS REQUIRED for the tracks and instruments stored
(1)  127/     26E :                     ; on RAM in case you are doing ASIC-Stamps.
(1)  128/     26E :                     ;
(1)  129/     26E :                     ; DAC samples are safe to read from WORD-RAM (if NOT using Stamps)
(1)  130/     26E :                     ; but careful when loading new data, and make sure MAIN
(1)  131/     26E :                     ; has the permission to read the data.
(1)  132/     26E :                     ;
(1)  133/     26E :                     ; Sega Pico:
(1)  134/     26E :                     ; * For later *
(1)  135/     26E :                     ;
(1)  136/     26E :                     ; Uses:
(1)  137/     26E :                     ; d5-d7,a4-a6
(1)  138/     26E :                     ; ----------------------------------------------------------------
(1)  139/     26E :                     
(1)  140/     26E :                     Sound_Update:
(1)  142/     26E : 4E75                		rts		; entire Sound driver for Pico goes here
(1)  176/     270 : 4E75                		rts
(1)  177/     272 :                     
(1)  178/     272 :                     ; ====================================================================
(1)  179/     272 :                     ; ----------------------------------------------------------------
(1)  180/     272 :                     ; Subroutines
(1)  181/     272 :                     ; ----------------------------------------------------------------
(1)  182/     272 :                     
(1)  183/     272 :                     ; ------------------------------------------------
(1)  184/     272 :                     ; Lock Z80, get bus
(1)  185/     272 :                     ; ------------------------------------------------
(1)  186/     272 :                     
(1)  187/     272 :                     sndLockZ80:
(1)  194/     272 : 4E75                		rts
(1)  195/     274 :                     
(1)  196/     274 :                     ; ------------------------------------------------
(1)  197/     274 :                     ; Unlock Z80, return bus
(1)  198/     274 :                     ; ------------------------------------------------
(1)  199/     274 :                     
(1)  200/     274 :                     sndUnlockZ80:
(1)  204/     274 : 4E75                		rts
(1)  205/     276 :                     
(1)  206/     276 :                     ; ------------------------------------------------
(1)  207/     276 :                     ; 68K-to-Z80 sound request enter/exit routines
(1)  208/     276 :                     ;
(1)  209/     276 :                     ; d6 - commFifo index
(1)  210/     276 :                     ; ------------------------------------------------
(1)  211/     276 :                     
(1)  212/     276 :                     sndReq_Enter:
(1)  216/     276 :                     ; 		or.w	#$0700,sr			; Disable interrupts
(1)  217/     276 : 9EFC 0004           		suba	#4,sp				; Extra jump return
(1)  218/     27A : 48E7 0306           		movem.l	d6-d7/a5-a6,-(sp)		; Save these regs to the stack
(1)  219/     27E : DEFC 0014           		adda	#(4*4)+4,sp			; Go back to the RTS jump
(1)  220/     282 : 4BF9 00A0 002E      		lea	(z80_cpu+zDrvFWrt),a5		; a5 - commZWrite
(1)  221/     288 : 4DF9 00A0 0040      		lea	(z80_cpu+zDrvFifo),a6		; a6 - fifo command list
(1)  222/     28E :                     .wait:
(1)  227/     28E : 1C15                		move.b	(a5),d6				; d6 - index fifo position
(1)  228/     290 : 4886                		ext.w	d6				; extend to 16 bits
(1)  229/     292 : 4E75                		rts
(1)  230/     294 :                     ; JUMP ONLY
(1)  231/     294 :                     sndReq_Exit:
(1)  235/     294 : 9EFC 0018           		suba	#8+(4*4),sp
(1)  236/     298 : 4CDF 60C0           		movem.l	(sp)+,d6-d7/a5-a6		; And pop those back
(1)  237/     29C : DEFC 0008           		adda	#8,sp
(1)  238/     2A0 :                     ; 		andi.w	#$F8FF,sr			; Enable interrupts
(1)  239/     2A0 : 4E75                		rts
(1)  240/     2A2 :                     
(1)  241/     2A2 :                     ; ------------------------------------------------
(1)  242/     2A2 :                     ; Send request id and arguments
(1)  243/     2A2 :                     ;
(1)  244/     2A2 :                     ; Input:
(1)  245/     2A2 :                     ; d7 - byte to write
(1)  246/     2A2 :                     ; d6 - index pointer
(1)  247/     2A2 :                     ; a5 - commZWrite, update index
(1)  248/     2A2 :                     ; a6 - commZfifo command list
(1)  249/     2A2 :                     ;
(1)  250/     2A2 :                     ; *** CALL sndReq_Enter FIRST ***
(1)  251/     2A2 :                     ; ------------------------------------------------
(1)  252/     2A2 :                     
(1)  253/     2A2 :                     sndReq_scmd:
(1)  254/     2A2 : 1DBC 00FF 6000      		move.b	#-1,(a6,d6.w)			; write command-start flag
(1)  255/     2A8 : 5206                		addq.b	#1,d6				; next fifo pos
(1)  256/     2AA : 0206 003F           		andi.b	#MAX_ZCMND-1,d6			; COMMAND BUFFSIZE
(1)  257/     2AE : 600C                		bra.s	sndReq_sbyte
(1)  258/     2B0 :                     sndReq_slong:
(1)  259/     2B0 : 610A                		bsr	sndReq_sbyte
(1)  260/     2B2 : E09F                		ror.l	#8,d7
(1)  261/     2B4 :                     sndReq_saddr:	; 24-bit address
(1)  262/     2B4 : 6106                		bsr	sndReq_sbyte
(1)  263/     2B6 : E09F                		ror.l	#8,d7
(1)  264/     2B8 :                     sndReq_sword:
(1)  265/     2B8 : 6102                		bsr	sndReq_sbyte
(1)  266/     2BA : E09F                		ror.l	#8,d7
(1)  267/     2BC :                     sndReq_sbyte:
(1)  268/     2BC : 1D87 6000           		move.b	d7,(a6,d6.w)			; write byte
(1)  269/     2C0 : 5206                		addq.b	#1,d6				; next fifo pos
(1)  270/     2C2 : 0206 003F           		andi.b	#MAX_ZCMND-1,d6			; COMMAND BUFFSIZE
(1)  271/     2C6 : 1A86                		move.b	d6,(a5)				; update commZWrite
(1)  272/     2C8 : 4E75                		rts
(1)  273/     2CA :                     
(1)  274/     2CA :                     ; --------------------------------------------------------
(1)  275/     2CA :                     ; gemaDmaPause
(1)  276/     2CA :                     ;
(1)  277/     2CA :                     ; Call this BEFORE doing any DMA transfer
(1)  278/     2CA :                     ; --------------------------------------------------------
(1)  279/     2CA :                     
(1)  280/     2CA :                     gemaDmaPause:
(1)  282/     2CA : 4E75                		rts
(1)  296/     2CC :                     
(1)  297/     2CC :                     ; --------------------------------------------------------
(1)  298/     2CC :                     ; gemaDmaResume
(1)  299/     2CC :                     ;
(1)  300/     2CC :                     ; Call this AFTER finishing DMA transfer
(1)  301/     2CC :                     ; --------------------------------------------------------
(1)  302/     2CC :                     
(1)  303/     2CC :                     gemaDmaResume:
(1)  305/     2CC : 4E75                		rts
(1)  316/     2CE :                     
(1)  317/     2CE :                     ; --------------------------------------------------------
(1)  318/     2CE :                     ; gemaDmaPauseRom
(1)  319/     2CE :                     ;
(1)  320/     2CE :                     ; Call this BEFORE doing any DMA transfer
(1)  321/     2CE :                     ;
(1)  322/     2CE :                     ; *** BANKS $880000/$900000 WILL BE GONE ***
(1)  323/     2CE :                     ; --------------------------------------------------------
(1)  324/     2CE :                     
(1)  325/     2CE :                     gemaDmaPauseRom:
(1)  327/     2CE : 4E75                		rts
(1)  347/     2D0 :                     
(1)  348/     2D0 :                     ; --------------------------------------------------------
(1)  349/     2D0 :                     ; gemaDmaResumeRom
(1)  350/     2D0 :                     ;
(1)  351/     2D0 :                     ; Call this AFTER finishing DMA transfer
(1)  352/     2D0 :                     ;
(1)  353/     2D0 :                     ; *** BANKS $880000/$900000 GET RESTORED ***
(1)  354/     2D0 :                     ; --------------------------------------------------------
(1)  355/     2D0 :                     
(1)  356/     2D0 :                     gemaDmaResumeRom:
(1)  358/     2D0 : 4E75                		rts
(1)  376/     2D2 :                     
(1)  377/     2D2 :                     ; ====================================================================
(1)  378/     2D2 :                     ; --------------------------------------------------------
(1)  379/     2D2 :                     ; USER CALLS
(1)  380/     2D2 :                     ; --------------------------------------------------------
(1)  381/     2D2 :                     
(1)  382/     2D2 :                     ; --------------------------------------------------------
(1)  383/     2D2 :                     ; gemaTest
(1)  384/     2D2 :                     ;
(1)  385/     2D2 :                     ; For TESTING only.
(1)  386/     2D2 :                     ; --------------------------------------------------------
(1)  387/     2D2 :                     
(1)  388/     2D2 :                     gemaTest:
(1)  389/     2D2 : 61A2                		bsr	sndReq_Enter
(1)  390/     2D4 : 3E3C 0000           		move.w	#$00,d7		; Command $00
(1)  391/     2D8 : 61C8                		bsr	sndReq_scmd
(1)  392/     2DA : 60B8                		bra 	sndReq_Exit
(1)  393/     2DC :                     
(1)  394/     2DC :                     ; --------------------------------------------------------
(1)  395/     2DC :                     ; gemaSetMasterList
(1)  396/     2DC :                     ;
(1)  397/     2DC :                     ; Set Tracklist location
(1)  398/     2DC :                     ;
(1)  399/     2DC :                     ; Input:
(1)  400/     2DC :                     ; d0.l - 68k pointer
(1)  401/     2DC :                     ; --------------------------------------------------------
(1)  402/     2DC :                     
(1)  403/     2DC :                     gemaSetMasterList:
(1)  404/     2DC : 6198                		bsr	sndReq_Enter
(1)  405/     2DE : 3E3C 0001           		move.w	#$01,d7		; Command $01
(1)  406/     2E2 : 61BE                		bsr	sndReq_scmd
(1)  407/     2E4 : 2E00                		move.l	d0,d7
(1)  408/     2E6 : 61C8                		bsr	sndReq_slong
(1)  409/     2E8 : 60AA                		bra 	sndReq_Exit
(1)  410/     2EA :                     
(1)  411/     2EA :                     ; --------------------------------------------------------
(1)  412/     2EA :                     ; gemaPlayTrack
(1)  413/     2EA :                     ;
(1)  414/     2EA :                     ; Play a sequence with arguments
(1)  415/     2EA :                     ;
(1)  416/     2EA :                     ; Input:
(1)  417/     2EA :                     ; d0.b - Sequence number
(1)  418/     2EA :                     ; d1.b - Playback slot number
(1)  419/     2EA :                     ;        If -1: use auto-search
(1)  420/     2EA :                     ; d2.b - Starting block
(1)  421/     2EA :                     ; --------------------------------------------------------
(1)  422/     2EA :                     
(1)  423/     2EA :                     gemaPlayTrack:
(1)  424/     2EA : 618A                		bsr	sndReq_Enter
(1)  425/     2EC : 3E3C 0002           		move.w	#$02,d7		; Command $02
(1)  426/     2F0 : 61B0                		bsr	sndReq_scmd
(1)  427/     2F2 : 1E00                		move.b	d0,d7		; d0.b Seq number
(1)  428/     2F4 : 61C6                		bsr	sndReq_sbyte
(1)  429/     2F6 : 1E02                		move.b	d2,d7		; d2.b Block <--
(1)  430/     2F8 : 61C2                		bsr	sndReq_sbyte
(1)  431/     2FA : 1E01                		move.b	d1,d7		; d1.b Slot
(1)  432/     2FC : 61BE                		bsr	sndReq_sbyte
(1)  433/     2FE : 6094                		bra 	sndReq_Exit
(1)  434/     300 :                     
(1)  435/     300 :                     ; --------------------------------------------------------
(1)  436/     300 :                     ; gemaPlayQuick
(1)  437/     300 :                     ;
(1)  438/     300 :                     ; Play a sequence, pick free slot, starting at block 0
(1)  439/     300 :                     ;
(1)  440/     300 :                     ; Input:
(1)  441/     300 :                     ; d0.b - Track number
(1)  442/     300 :                     ; --------------------------------------------------------
(1)  443/     300 :                     
(1)  444/     300 :                     gemaPlayQuick:
(1)  445/     300 : 6100 FF74           		bsr	sndReq_Enter
(1)  446/     304 : 3E3C 0002           		move.w	#$02,d7		; Command $02
(1)  447/     308 : 6198                		bsr	sndReq_scmd
(1)  448/     30A : 1E00                		move.b	d0,d7		; d0.b Sequence number
(1)  449/     30C : 61AE                		bsr	sndReq_sbyte
(1)  450/     30E : 7E00                		moveq	#0,d7		; Start at block 0
(1)  451/     310 : 61AA                		bsr	sndReq_sbyte
(1)  452/     312 : 1E3C 00FF           		move.b	#-1,d7		; Auto-slot mode
(1)  453/     316 : 61A4                		bsr	sndReq_sbyte
(1)  454/     318 : 6000 FF7A           		bra 	sndReq_Exit
(1)  455/     31C :                     
(1)  456/     31C :                     ; --------------------------------------------------------
(1)  457/     31C :                     ; gemaStopTrack
(1)  458/     31C :                     ;
(1)  459/     31C :                     ; Play a sequence with arguments
(1)  460/     31C :                     ;
(1)  461/     31C :                     ; Input:
(1)  462/     31C :                     ; d0.b - Sequence number
(1)  463/     31C :                     ; d1.b - Playback slot number
(1)  464/     31C :                     ;        If -1: use auto-search
(1)  465/     31C :                     ; --------------------------------------------------------
(1)  466/     31C :                     
(1)  467/     31C :                     gemaStopTrack:
(1)  468/     31C : 6100 FF58           		bsr	sndReq_Enter
(1)  469/     320 : 3E3C 0003           		move.w	#$03,d7		; Command $03
(1)  470/     324 : 6100 FF7C           		bsr	sndReq_scmd
(1)  471/     328 : 1E00                		move.b	d0,d7		; d0.b Seq number
(1)  472/     32A : 6190                		bsr	sndReq_sbyte
(1)  473/     32C : 1E01                		move.b	d1,d7		; d1.b Slot
(1)  474/     32E : 618C                		bsr	sndReq_sbyte
(1)  475/     330 : 6000 FF62           		bra 	sndReq_Exit
(1)  476/     334 :                     
(1)  477/     334 :                     ; --------------------------------------------------------
(1)  478/     334 :                     ; gemaStopAll
(1)  479/     334 :                     ;
(1)  480/     334 :                     ; Stop ALL tracks from ALL buffers.
(1)  481/     334 :                     ;
(1)  482/     334 :                     ; No arguments.
(1)  483/     334 :                     ; --------------------------------------------------------
(1)  484/     334 :                     
(1)  485/     334 :                     gemaStopAll:
(1)  487/     334 : 4E75                		rts
(1)  494/     336 :                     
(1)  495/     336 :                     ; --------------------------------------------------------
(1)  496/     336 :                     ; gemaSetBeats
(1)  497/     336 :                     ;
(1)  498/     336 :                     ; Sets global subbeats
(1)  499/     336 :                     ;
(1)  500/     336 :                     ; d0.w - sub-beats
(1)  501/     336 :                     ; --------------------------------------------------------
(1)  502/     336 :                     
(1)  503/     336 :                     gemaSetBeats:
(1)  504/     336 : 6100 FF3E           		bsr	sndReq_Enter
(1)  505/     33A : 3E3C 000C           		move.w	#$0C,d7		; Command $0C
(1)  506/     33E : 6100 FF62           		bsr	sndReq_scmd
(1)  507/     342 : 3E00                		move.w	d0,d7
(1)  508/     344 : 6100 FF72           		bsr	sndReq_sword
(1)  509/     348 : 6000 FF4A           		bra 	sndReq_Exit
(1)  510/     34C :                     
     199/     34C :                     		include	"system/md/video.asm"
(1)    1/     34C :                     ; ====================================================================
(1)    2/     34C :                     ; ----------------------------------------------------------------
(1)    3/     34C :                     ; Genesis VDP
(1)    4/     34C :                     ; ----------------------------------------------------------------
(1)    5/     34C :                     
(1)    6/     34C :                     ; ====================================================================
(1)    7/     34C :                     ; --------------------------------------------------------
(1)    8/     34C :                     ; Settings
(1)    9/     34C :                     ; --------------------------------------------------------
(1)   10/     34C :                     
(1)   11/     34C : =$18                 MAX_MDOBJ	equ 24		; MAX Objects
(1)   12/     34C : =$18                 MAX_MDDMATSK	equ 24		; MAX DMA BLAST entries
(1)   13/     34C : =$7FF                varNullVram	equ $07FF	; Default Blank cell
(1)   14/     34C : =$580                varPrintVram	equ $0580	; Default location of the PRINT text graphics
(1)   15/     34C : =$3                  varPrintPal	equ 3		; Palette to use for the printable text
(1)   16/     34C :                     
(1)   17/     34C :                     ; --------------------------------------------------------
(1)   18/     34C :                     ; Variables
(1)   19/     34C :                     ; --------------------------------------------------------
(1)   20/     34C :                     
(1)   21/     34C :                     ; VDP Register $80
(1)   22/     34C : =$2                  HVStop		equ $02
(1)   23/     34C : =$10                 HintEnbl	equ $10
(1)   24/     34C : =$1                  bitHVStop	equ 1
(1)   25/     34C : =$4                  bitHintEnbl	equ 4
(1)   26/     34C :                     
(1)   27/     34C :                     ; VDP Register $81
(1)   28/     34C : =$40                 DispEnbl 	equ $40
(1)   29/     34C : =$20                 VintEnbl 	equ $20
(1)   30/     34C : =$10                 DmaEnbl		equ $10
(1)   31/     34C : =$6                  bitDispEnbl	equ 6
(1)   32/     34C : =$5                  bitVintEnbl	equ 5
(1)   33/     34C : =$4                  bitDmaEnbl	equ 4
(1)   34/     34C : =$3                  bitV30		equ 3
(1)   35/     34C :                     
(1)   36/     34C :                     ; vdp_ctrl READ bits (full WORD)
(1)   37/     34C : =$9                  bitFifoE	equ 9		; DMA FIFO empty
(1)   38/     34C : =$8                  bitFifoF	equ 8		; DMA FIFO full
(1)   39/     34C : =$7                  bitVInt		equ 7		; Vertical interrupt
(1)   40/     34C : =$6                  bitSprOvr	equ 6		; Sprite overflow
(1)   41/     34C : =$5                  bitSprCol	equ 5		; Sprite collision
(1)   42/     34C : =$4                  bitOdd		equ 4		; EVEN or ODD frame displayed on interlace mode
(1)   43/     34C : =$3                  bitVBlk		equ 3		; Inside VBlank
(1)   44/     34C : =$2                  bitHBlk		equ 2		; Inside HBlank
(1)   45/     34C : =$1                  bitDma		equ 1		; Only works for FILL and COPY
(1)   46/     34C : =$0                  bitPal		equ 0
(1)   47/     34C :                     
(1)   48/     34C :                     ; md_bg_flags
(1)   49/     34C : =$0                  bitDrwR		equ 0
(1)   50/     34C : =$1                  bitDrwL		equ 1
(1)   51/     34C : =$2                  bitDrwD		equ 2
(1)   52/     34C : =$3                  bitDrwU		equ 3
(1)   53/     34C : =$6                  bitMarsBg	equ 6
(1)   54/     34C : =$7                  bitBgOn		equ 7
(1)   55/     34C :                     
(1)   56/     34C :                     ; ====================================================================
(1)   57/     34C :                     ; ----------------------------------------------------------------
(1)   58/     34C :                     ; Structs
(1)   59/     34C :                     ; ----------------------------------------------------------------
(1)   60/     34C :                     
(1)   61/     34C :                     ; --------------------------------
(1)   62/     34C :                     ; object strct
(1)   63/     34C :                     ; --------------------------------
(1)   64/     34C :                     
(1)   65/     34C : (MACRO)              		strct 0
(1)   65/     34C : =$34C                GLBL_LASTPC     set *
(1)   65/FFFFFFFFFFFFC950 :                                     dephase
(1)   65/       0 :                                     phase 0
(1)   65/       0 : =$0                  GLBL_LASTORG    set *
(1)   66/       0 :                     obj_code	ds.l 1		; Object code, 0 == no object
(1)   67/       4 :                     obj_x		ds.l 1		; Object X Position 0000.0000
(1)   68/       8 :                     obj_y		ds.l 1		; Object Y Position 0000.0000
(1)   69/       C :                     obj_map		ds.l 1		; Object Sprite map data location
(1)   70/      10 :                     obj_dma		ds.l 1		; Object DMA map, 0 == Don't use DMA
(1)   71/      14 :                     obj_vram	ds.w 1		; Object VRAM position (If DMA enabled: output location)
(1)   72/      16 :                     obj_x_spd	ds.w 1		; Object X Speed 00.00
(1)   73/      18 :                     obj_y_spd	ds.w 1		; Object Y Speed 00.00
(1)   74/      1A :                     obj_anim_indx	ds.w 1		; * Object animation script index (obj_anim + obj_anim_indx)
(1)   75/      1C :                     obj_anim_id	ds.w 1		; * Object animation number: $ccss c-current s-saved
(1)   76/      1E :                     obj_frame	ds.w 1		; * Object current frame
(1)   77/      20 :                     obj_anim_spd	ds.b 1		; * Object animation delay
(1)   78/      21 :                     obj_index	ds.b 1		; Object code index
(1)   79/      22 :                     obj_set		ds.b 1		; Object settings
(1)   80/      23 :                     obj_subid	ds.b 1		; Object Sub-ID for Object placement
(1)   81/      24 :                     obj_status	ds.b 1		; Object custom status
(1)   82/      25 :                     obj_FREE	ds.b 1		; (FILLER align byte)
(1)   83/      26 :                     obj_ram		ds.b $40	; Object's own RAM
(1)   84/      66 :                     sizeof_mdobj	ds.l 0
(1)   85/      68 : (MACRO)              		endstrct
(1)   85/       0 :                                     org GLBL_LASTORG
(1)   85/     34C :                                     phase GLBL_LASTPC
(1)   86/     34C :                     ; 		message "\{sizeof_mdobj}"
(1)   87/     34C :                     
(1)   88/     34C :                     ; --------------------------------
(1)   89/     34C :                     ; ** obj_set
(1)   90/     34C : =$7                  bitobj_Mars	equ	7	; 32X ONLY: This objects draws to the 32X side (256-color sprite)
(1)   91/     34C : =$1                  bitobj_flipV	equ	1	; Set to flip object Vertically
(1)   92/     34C : =$0                  bitobj_flipH	equ	0	; Set to flip object Horizontally
(1)   93/     34C :                     
(1)   94/     34C :                     ; --------------------------------
(1)   95/     34C :                     ; ** obj_set
(1)   96/     34C :                     ; bitobj_air	equ	0	; set if floating/jumping
(1)   97/     34C :                     
(1)   98/     34C :                     ; --------------------------------
(1)   99/     34C :                     ; ** obj_size
(1)  100/     34C :                     ; at_u		equ	3
(1)  101/     34C :                     ; at_d		equ	2
(1)  102/     34C :                     ; at_l		equ	1
(1)  103/     34C :                     ; at_r		equ	0
(1)  104/     34C :                     
(1)  105/     34C :                     ; ====================================================================
(1)  106/     34C :                     ; ----------------------------------------------------------------
(1)  107/     34C :                     ; Video RAM
(1)  108/     34C :                     ; ----------------------------------------------------------------
(1)  109/     34C :                     
(1)  110/     34C : (MACRO)              			strct RAM_MdVideo
(1)  110/     34C : =$34C                GLBL_LASTPC     set *
(1)  110/       0 :                                     dephase
(1)  110/FFFFFFFFFFFFA004 :                                     phase RAM_MDVIDEO
(1)  110/FFFFFFFFFFFFA004 : =$FFFFFFFFFFFFA004   GLBL_LASTORG    set *
(1)  111/FFFFFFFFFFFFA004 :                     RAM_HorScroll		ds.l 240			; DMA Horizontal scroll data
(1)  112/FFFFFFFFFFFFA3C4 :                     RAM_VerScroll		ds.l 320/16			; DMA Vertical scroll data
(1)  113/FFFFFFFFFFFFA414 :                     RAM_Sprites		ds.w 8*80			; DMA Sprites
(1)  114/FFFFFFFFFFFFA914 :                     RAM_SprDrwPz		ds.w 8*80			; External sprite pieces
(1)  115/FFFFFFFFFFFFAE14 :                     RAM_Palette		ds.w 64				; DMA palette
(1)  116/FFFFFFFFFFFFAE94 :                     RAM_MdMarsPalFd		ds.w 256			; Target 32X palette for FadeIn/Out (NOTE: CPU intensive)
(1)  117/FFFFFFFFFFFFB094 :                     RAM_PaletteFd		ds.w 64				; Target MD palette for FadeIn/Out
(1)  118/FFFFFFFFFFFFB114 :                     RAM_VdpDmaList		ds.b $10*MAX_MDDMATSK		; DMA BLAST list for VBlank
(1)  119/FFFFFFFFFFFFB294 :                     RAM_Objects		ds.b MAX_MDOBJ*sizeof_mdobj	; Objects
(1)  120/FFFFFFFFFFFFBC24 :                     RAM_ObjDispList		ds.w MAX_MDOBJ			; half-RAM pointers for display (Obj|Extra)
(1)  121/FFFFFFFFFFFFBC54 :                     RAM_VidPrntList		ds.w 3*64			; Video_Print list: Address, Type
(1)  122/FFFFFFFFFFFFBDD4 :                     RAM_FrameCount		ds.l 1				; Frames counter
(1)  123/FFFFFFFFFFFFBDD8 :                     RAM_SprDrwCntr		ds.w 1
(1)  124/FFFFFFFFFFFFBDDA :                     RAM_SprLinkNum		ds.w 1
(1)  125/FFFFFFFFFFFFBDDC :                     RAM_VdpExWrite		ds.w 1
(1)  126/FFFFFFFFFFFFBDDE :                     RAM_VdpDmaIndx		ds.w 1				; Current index in DMA BLAST list
(1)  127/FFFFFFFFFFFFBDE0 :                     RAM_VdpDmaMod		ds.w 1				; Mid-write flag
(1)  128/FFFFFFFFFFFFBDE2 :                     RAM_VidPrntVram		ds.w 1				; Default VRAM location for ASCII text used by Video_Print
(1)  129/FFFFFFFFFFFFBDE4 :                     RAM_FadeMdReq		ds.w 1				; FadeIn/Out request for Genesis palette (01-FadeIn 02-FadeOut)
(1)  130/FFFFFFFFFFFFBDE6 :                     RAM_FadeMdIncr		ds.w 1				; Fading increment count
(1)  131/FFFFFFFFFFFFBDE8 :                     RAM_FadeMdDelay		ds.w 1				; Fading delay
(1)  132/FFFFFFFFFFFFBDEA :                     RAM_FadeMdTmr		ds.w 1				; Fading delay timer
(1)  133/FFFFFFFFFFFFBDEC :                     RAM_FadeMarsReq		ds.w 1				; Same thing but for 32X's 256-color (01-FadeIn 02-FadeOut)
(1)  134/FFFFFFFFFFFFBDEE :                     RAM_FadeMarsIncr	ds.w 1				; (Hint: Set to 4 to syncronize with Genesis' FadeIn/Out)
(1)  135/FFFFFFFFFFFFBDF0 :                     RAM_FadeMarsDelay	ds.w 1
(1)  136/FFFFFFFFFFFFBDF2 :                     RAM_FadeMarsTmr		ds.w 1
(1)  137/FFFFFFFFFFFFBDF4 :                     RAM_MdMars_DrawAll	ds.w 1
(1)  138/FFFFFFFFFFFFBDF6 :                     RAM_VdpRegs		ds.b 24				; VDP Register cache
(1)  139/FFFFFFFFFFFFBE0E :                     sizeof_mdvid		ds.l 0
(1)  140/FFFFFFFFFFFFBE14 : (MACRO)              			endstrct
(1)  140/FFFFFFFFFFFFA004 :                                     org GLBL_LASTORG
(1)  140/     34C :                                     phase GLBL_LASTPC
(1)  141/     34C :                     
(1)  142/     34C : (MACRO)              		erreport "MD VIDEO RAM",sizeof_mdvid-RAM_MdVideo,MAX_MdVideo
(1)  143/     34C :                     
(1)  144/     34C :                     ; ====================================================================
(1)  145/     34C :                     ; --------------------------------------------------------
(1)  146/     34C :                     ; Initialize Genesis video
(1)  147/     34C :                     ;
(1)  148/     34C :                     ; Breaks:
(1)  149/     34C :                     ; d6-d7/a5-a6
(1)  150/     34C :                     ; --------------------------------------------------------
(1)  151/     34C :                     
(1)  152/     34C :                     Video_Init:
(1)  153/     34C : 4DF8 A004           		lea	(RAM_MdVideo).w,a6		; Clear our RAM section
(1)  154/     350 : 3C3C 8000           		move.w	#$8000,d6
(1)  155/     354 : 3E3C 1E09           		move.w	#(sizeof_mdvid-RAM_MdVideo)-1,d7
(1)  156/     358 :                     .clrram:
(1)  157/     358 : 1CC6                		move.b	d6,(a6)+			; (Write the LSB zero)
(1)  158/     35A : 51CF FFFC           		dbf	d7,.clrram
(1)  159/     35E : 31FC 0001 BDDA      		move.w	#1,(RAM_SprLinkNum).w
(1)  160/     364 : 4DFA 0030           		lea	list_vdpregs(pc),a6		; Write "cache'd" VDP registers
(1)  161/     368 : 4BF8 BDF6           		lea	(RAM_VdpRegs).w,a5
(1)  162/     36C : 3E3C 0010           		move.w	#17-1,d7
(1)  163/     370 :                     .loop:
(1)  164/     370 : 1C1E                		move.b	(a6)+,d6
(1)  165/     372 : 1AC6                		move.b	d6,(a5)+
(1)  166/     374 : 51CF FFFA           		dbf	d7,.loop
(1)  167/     378 :                     
(1)  168/     378 :                     ; --------------------------------------------------------
(1)  169/     378 :                     ; Video_Update
(1)  170/     378 :                     ;
(1)  171/     378 :                     ; Writes register data stored in RAM to VDP
(1)  172/     378 :                     ; from registers $80 to $90
(1)  173/     378 :                     ;
(1)  174/     378 :                     ; WINDOW registers $91 and $92 are written
(1)  175/     378 :                     ; manually.
(1)  176/     378 :                     ;
(1)  177/     378 :                     ; Breaks:
(1)  178/     378 :                     ; d6-d7/a5-a6
(1)  179/     378 :                     ; --------------------------------------------------------
(1)  180/     378 :                     
(1)  181/     378 :                     Video_Update:
(1)  182/     378 : 4DF8 BDF6           		lea	(RAM_VdpRegs).w,a6
(1)  183/     37C : 4BF9 00C0 0004      		lea	(vdp_ctrl),a5
(1)  184/     382 : 3C3C 8000           		move.w	#$8000,d6
(1)  185/     386 : 7E10                		moveq	#17-1,d7
(1)  186/     388 :                     .loop:
(1)  187/     388 : 1C1E                		move.b	(a6)+,d6
(1)  188/     38A : 3A86                		move.w	d6,(a5)
(1)  189/     38C : 0646 0100           		addi.w	#$0100,d6
(1)  190/     390 : 51CF FFF6           		dbf	d7,.loop
(1)  191/     394 :                     .exit:
(1)  192/     394 : 4E75                		rts
(1)  193/     396 :                     
(1)  194/     396 :                     ; ------------------------------------------------
(1)  195/     396 :                     ; Default VDP register settings
(1)  196/     396 :                     ; ------------------------------------------------
(1)  197/     396 :                     
(1)  198/     396 :                     list_vdpregs:
(1)  199/     396 : 04                  		dc.b $04			; No HBlank interrupt, HV Counter on
(1)  200/     397 : 04                  		dc.b $04			; Display ON, No VBlank interrupt
(1)  201/     398 : 30                  		dc.b (($C000)>>10)		; Layer A at VRAM $C000 (%00xxx000)
(1)  202/     399 : 34                  		dc.b (($D000)>>10)		; Window  at VRAM $D000 (%00xxxxy0)
(1)  203/     39A : 07                  		dc.b (($E000)>>13)		; Layer B at VRAM $E000 (%00000xxx)
(1)  204/     39B : 7C                  		dc.b (($F800)>>9)		; Sprites at VRAM $F800 (%0xxxxxxy)
(1)  205/     39C : 00                  		dc.b $00			; Unused
(1)  206/     39D : 00                  		dc.b $00			; Background color: $00
(1)  207/     39E : 00                  		dc.b $00			; Unused
(1)  208/     39F : 00                  		dc.b $00			; Unused
(1)  209/     3A0 : 00                  		dc.b $00			; HInt line number trigger
(1)  210/     3A1 : 00                  		dc.b (%000|%00)			; No ExtInt, Scroll: VSCR:full HSCR:full
(1)  211/     3A2 : 81                  		dc.b $81			; H40, No shadow mode, 320-pixel resolution mode
(1)  212/     3A3 : 3F                  		dc.b (($FC00)>>10)		; HScroll at VRAM $FC00 (%00xxxxxx)
(1)  213/     3A4 : 00                  		dc.b $00			; Unused
(1)  214/     3A5 : 02                  		dc.b $02			; VDP auto-increment: $02
(1)  215/     3A6 : 01                  		dc.b (%00<<4)|%01		; Scroll area size: V32 H64
(1)  216/     3A7 : 00                  		dc.b $00
(1)  217/     3A8 : 00                  		dc.b $00
(1)  218/     3A9 :                     		align 2
(1)  219/     3AA :                     ; Default PRINT palette
(1)  220/     3AA : 0000 0EEE 0CCC      ASCII_PAL:	dc.w $0000,$0EEE,$0CCC,$0AAA,$0888,$0444,$000E,$0008
              3B0 : 0AAA 0888 0444 
              3B6 : 000E 0008          
(1)  221/     3BA : 00EE 0088 00E0      		dc.w $00EE,$0088,$00E0,$0080,$0E00,$0800,$0000,$0000
              3C0 : 0080 0E00 0800 
              3C6 : 0000 0000          
(1)  222/     3CA :                     		align 2
(1)  223/     3CA :                     
(1)  224/     3CA :                     ; --------------------------------------------------------
(1)  225/     3CA :                     ; Video_Clear
(1)  226/     3CA :                     ;
(1)  227/     3CA :                     ; Clear all video data from VRAM
(1)  228/     3CA :                     ;
(1)  229/     3CA :                     ; Breaks:
(1)  230/     3CA :                     ; ALL
(1)  231/     3CA :                     ; --------------------------------------------------------
(1)  232/     3CA :                     
(1)  233/     3CA :                     Video_Clear:
(1)  234/     3CA :                     ; 		move.w	#0,d0			; Clears until $57F
(1)  235/     3CA :                     ; 		move.w	#0,d1
(1)  236/     3CA :                     ; 		move.w	#$57F*$20,d2
(1)  237/     3CA :                     ; 		bsr	Video_Fill
(1)  238/     3CA :                     
(1)  239/     3CA :                     ; --------------------------------------------------------
(1)  240/     3CA :                     ; Video_ClearScreen
(1)  241/     3CA :                     ;
(1)  242/     3CA :                     ; Clears ALL Genesis screens FG/BG/WIN
(1)  243/     3CA :                     ;
(1)  244/     3CA :                     ; Breaks:
(1)  245/     3CA :                     ; d0-d2/d6-d7/a5-a6
(1)  246/     3CA :                     ; --------------------------------------------------------
(1)  247/     3CA :                     
(1)  248/     3CA :                     Video_ClearScreen:
(1)  249/     3CA : 7000                		moveq	#0,d0
(1)  250/     3CC : 343C 1000           		move.w	#$1000,d2		; FG/BG size
(1)  251/     3D0 : 1238 BDF8           		move.b	(RAM_VdpRegs+2).w,d1	; FG
(1)  252/     3D4 : 0241 0038           		andi.w	#%111000,d1
(1)  253/     3D8 : E149                		lsl.w	#8,d1
(1)  254/     3DA : E549                		lsl.w	#2,d1
(1)  255/     3DC : 6100 02EE           		bsr	Video_Fill
(1)  256/     3E0 : 1238 BDFA           		move.b	(RAM_VdpRegs+4).w,d1	; BG
(1)  257/     3E4 : 0241 0007           		andi.w	#%000111,d1
(1)  258/     3E8 : E149                		lsl.w	#8,d1
(1)  259/     3EA : EB49                		lsl.w	#5,d1
(1)  260/     3EC : 6100 02DE           		bsr	Video_Fill
(1)  261/     3F0 : 343C 1000           		move.w	#$1000,d2		; WD Size
(1)  262/     3F4 : 1238 BDF9           		move.b	(RAM_VdpRegs+3).w,d1	; Window
(1)  263/     3F8 : 0241 003E           		andi.w	#%111110,d1
(1)  264/     3FC : E149                		lsl.w	#8,d1
(1)  265/     3FE : E549                		lsl.w	#2,d1
(1)  266/     400 : 6100 02CA           		bsr	Video_Fill
(1)  267/     404 : 4DF8 A004           		lea	(RAM_HorScroll).w,a6	; RAM cleanup
(1)  268/     408 : 3E3C 00EF           		move.w	#240-1,d7
(1)  269/     40C : 7C00                		moveq	#0,d6
(1)  270/     40E :                     .xnext:
(1)  271/     40E : 2CC6                		move.l	d6,(a6)+
(1)  272/     410 : 51CF FFFC           		dbf	d7,.xnext
(1)  273/     414 : 4DF8 A3C4           		lea	(RAM_VerScroll).w,a6
(1)  274/     418 : 3E3C 0013           		move.w	#(320/16)-1,d7
(1)  275/     41C :                     .ynext:
(1)  276/     41C : 2CC6                		move.l	d6,(a6)+
(1)  277/     41E : 51CF FFFC           		dbf	d7,.ynext
(1)  278/     422 : 4DF8 A414           		lea	(RAM_Sprites).w,a6
(1)  279/     426 : 3E3C 009F           		move.w	#((80*8)/4)-1,d7
(1)  280/     42A :                     .snext:
(1)  281/     42A : 2CC6                		move.l	d6,(a6)+
(1)  282/     42C : 51CF FFFC           		dbf	d7,.snext
(1)  283/     430 : 4DF8 AE14           		lea	(RAM_Palette).w,a6
(1)  284/     434 : 4BF8 B094           		lea	(RAM_PaletteFd).w,a5
(1)  285/     438 : 3E3C 001F           		move.w	#(64/2)-1,d7
(1)  286/     43C :                     .pnext:
(1)  287/     43C : 2CC6                		move.l	d6,(a6)+
(1)  288/     43E : 2AC6                		move.l	d6,(a5)+
(1)  289/     440 : 51CF FFFA           		dbf	d7,.pnext
(1)  300/     444 : 4E75                		rts
(1)  301/     446 :                     
(1)  302/     446 :                     ; ====================================================================
(1)  303/     446 :                     ; ----------------------------------------------------------------
(1)  304/     446 :                     ; Palette fade system, Genesis side
(1)  305/     446 :                     ; ----------------------------------------------------------------
(1)  306/     446 :                     
(1)  307/     446 :                     ; --------------------------------------------------------
(1)  308/     446 :                     ; FULL Fade in
(1)  309/     446 :                     ; --------------------------------------------------------
(1)  310/     446 :                     
(1)  311/     446 :                     Video_FadeIn:
(1)  312/     446 : 31FC 0001 BDE6      		move.w	#1,(RAM_FadeMdIncr).w	; Increment speed
(1)  313/     44C : 31FC 0002 BDEE      		move.w	#2,(RAM_FadeMarsIncr).w
(1)  314/     452 : 31FC 0001 BDE8      		move.w	#1,(RAM_FadeMdDelay).w	; Delay by
(1)  315/     458 : 31FC 0000 BDF0      		move.w	#0,(RAM_FadeMarsDelay).w
(1)  316/     45E : 31FC 0001 BDE4      		move.w	#1,(RAM_FadeMdReq).w	; Fade-in task
(1)  317/     464 : 31FC 0001 BDEC      		move.w	#1,(RAM_FadeMarsReq).w
(1)  318/     46A : 6026                		bra	Video_WaitFade
(1)  319/     46C :                     
(1)  320/     46C :                     ; --------------------------------------------------------
(1)  321/     46C :                     ; FULL Fade out
(1)  322/     46C :                     ; --------------------------------------------------------
(1)  323/     46C :                     
(1)  324/     46C :                     Video_FadeOut:
(1)  325/     46C : 31FC 0001 BDE6      		move.w	#1,(RAM_FadeMdIncr).w	; Increment speed
(1)  326/     472 : 31FC 0002 BDEE      		move.w	#2,(RAM_FadeMarsIncr).w
(1)  327/     478 : 31FC 0001 BDE8      		move.w	#1,(RAM_FadeMdDelay).w	; Delay by
(1)  328/     47E : 31FC 0000 BDF0      		move.w	#0,(RAM_FadeMarsDelay).w
(1)  329/     484 : 31FC 0002 BDE4      		move.w	#2,(RAM_FadeMdReq).w	; Fade-in task
(1)  330/     48A : 31FC 0002 BDEC      		move.w	#2,(RAM_FadeMarsReq).w
(1)  331/     490 : 4E71                		bra	Video_WaitFade
(1)  332/     492 :                     
(1)  333/     492 :                     ; --------------------------------------------------------
(1)  334/     492 :                     ; Video_WaitFade
(1)  335/     492 :                     ; --------------------------------------------------------
(1)  336/     492 :                     
(1)  337/     492 :                     Video_WaitFade:
(1)  338/     492 : 6100 0A9A           		bsr	System_Render
(1)  346/     496 : 6140                		bsr	Video_DoPalFade
(1)  347/     498 : 3E38 BDE4           		move.w	(RAM_FadeMdReq).w,d7
(1)  349/     49C : 4A47                		tst.w	d7
(1)  350/     49E : 66F2                		bne.s	Video_WaitFade
(1)  351/     4A0 : 4E75                		rts
(1)  352/     4A2 :                     
(1)  353/     4A2 :                     ; --------------------------------------------------------
(1)  354/     4A2 :                     ; Video_RunFade
(1)  355/     4A2 :                     ;
(1)  356/     4A2 :                     ; Processes palette fading for one frame returns
(1)  357/     4A2 :                     ; status on exit.
(1)  358/     4A2 :                     ;
(1)  359/     4A2 :                     ; Returns:
(1)  360/     4A2 :                     ; bne - Still active, jump back.
(1)  361/     4A2 :                     ; beq - Finished
(1)  362/     4A2 :                     ;
(1)  363/     4A2 :                     ; Breaks:
(1)  364/     4A2 :                     ; All
(1)  365/     4A2 :                     ;
(1)  366/     4A2 :                     ; Notes:
(1)  367/     4A2 :                     ; Call System_Render FIRST before calling this
(1)  368/     4A2 :                     ; --------------------------------------------------------
(1)  369/     4A2 :                     
(1)  370/     4A2 :                     Video_RunFade:
(1)  378/     4A2 : 6134                		bsr	Video_DoPalFade
(1)  379/     4A4 : 3E38 BDE4           		move.w	(RAM_FadeMdReq).w,d7
(1)  381/     4A8 : 4E75                		rts
(1)  382/     4AA :                     
(1)  383/     4AA :                     ; --------------------------------------------------------
(1)  384/     4AA :                     ; Video_LoadPal
(1)  385/     4AA :                     ;
(1)  386/     4AA :                     ; Input:
(1)  387/     4AA :                     ; a0 - Palette data
(1)  388/     4AA :                     ; d0 - Start position
(1)  389/     4AA :                     ; d1 - Number of colors
(1)  390/     4AA :                     ;
(1)  391/     4AA :                     ; Breaks:
(1)  392/     4AA :                     ; d5-d7,a6
(1)  393/     4AA :                     ; --------------------------------------------------------
(1)  394/     4AA :                     
(1)  395/     4AA :                     Video_FadePal:
(1)  396/     4AA : 4DF8 B094           		lea	(RAM_PaletteFd).w,a6
(1)  397/     4AE : 4278 BDEA           		clr.w	(RAM_FadeMdTmr).w
(1)  398/     4B2 : 6004                		bra.s	vidMd_Pal
(1)  399/     4B4 :                     Video_LoadPal:
(1)  400/     4B4 : 4DF8 AE14           		lea	(RAM_Palette).w,a6
(1)  401/     4B8 :                     vidMd_Pal:
(1)  402/     4B8 : 2A48                		move.l	a0,a5
(1)  403/     4BA : 7E00                		moveq	#0,d7
(1)  404/     4BC : 3E00                		move.w	d0,d7
(1)  405/     4BE : DE47                		add.w	d7,d7
(1)  406/     4C0 : DCC7                		adda	d7,a6
(1)  407/     4C2 : 3E01                		move.w	d1,d7
(1)  408/     4C4 : 0447 0001           		subi.w	#1,d7
(1)  409/     4C8 : 3C02                		move.w	d2,d6
(1)  410/     4CA : 0246 0001           		andi.w	#1,d6
(1)  411/     4CE : E25E                		ror.w	#1,d6
(1)  412/     4D0 :                     .loop:
(1)  413/     4D0 : 3CDD                		move.w	(a5)+,(a6)+
(1)  414/     4D2 : 51CF FFFC           		dbf	d7,.loop
(1)  415/     4D6 : 4E75                		rts
(1)  416/     4D8 :                     
(1)  417/     4D8 :                     ; --------------------------------------------------------
(1)  418/     4D8 :                     ; Video_DoPalFade
(1)  419/     4D8 :                     ;
(1)  420/     4D8 :                     ; RAM_ReqFadeMars: (WORD)
(1)  421/     4D8 :                     ; $00 - No task or finished.
(1)  422/     4D8 :                     ; $01 - Fade in
(1)  423/     4D8 :                     ; $02 - Fade out to black
(1)  424/     4D8 :                     ;
(1)  425/     4D8 :                     ; NOTE: ONLY CALL THIS OUTSIDE OF VBLANK
(1)  426/     4D8 :                     ; --------------------------------------------------------
(1)  427/     4D8 :                     
(1)  428/     4D8 :                     Video_DoPalFade:
(1)  429/     4D8 : 0478 0001 BDEA      		subi.w	#1,(RAM_FadeMdTmr).w
(1)  430/     4DE : 6A14                		bpl.s	.active
(1)  431/     4E0 : 31F8 BDE8 BDEA      		move.w	(RAM_FadeMdDelay).w,(RAM_FadeMdTmr).w
(1)  432/     4E6 : 3E38 BDE4           		move.w	(RAM_FadeMdReq).w,d7
(1)  433/     4EA : DE47                		add.w	d7,d7
(1)  434/     4EC : 3E3B 7008           		move.w	.fade_list(pc,d7.w),d7
(1)  435/     4F0 : 4EFB 7004           		jmp	.fade_list(pc,d7.w)
(1)  436/     4F4 :                     .active:
(1)  437/     4F4 : 4E75                		rts
(1)  438/     4F6 :                     
(1)  439/     4F6 :                     ; --------------------------------------------
(1)  440/     4F6 :                     
(1)  441/     4F6 :                     .fade_list:
(1)  442/     4F6 : 0006                		dc.w .fade_done-.fade_list
(1)  443/     4F8 : 0008                		dc.w .fade_in-.fade_list
(1)  444/     4FA : 00AA                		dc.w .fade_out-.fade_list
(1)  445/     4FC :                     
(1)  446/     4FC :                     ; --------------------------------------------
(1)  447/     4FC :                     ; No fade or finished.
(1)  448/     4FC :                     ; --------------------------------------------
(1)  449/     4FC :                     
(1)  450/     4FC :                     .fade_done:
(1)  451/     4FC : 4E75                		rts
(1)  452/     4FE :                     
(1)  453/     4FE :                     ; --------------------------------------------
(1)  454/     4FE :                     ; Fade in
(1)  455/     4FE :                     ; --------------------------------------------
(1)  456/     4FE :                     
(1)  457/     4FE :                     .fade_in:
(1)  458/     4FE : 4DF8 B094           		lea	(RAM_PaletteFd).w,a6
(1)  459/     502 : 4BF8 AE14           		lea	(RAM_Palette).w,a5
(1)  460/     506 : 7040                		moveq	#64,d0				; Num of colors
(1)  461/     508 : 3238 BDE6           		move.w	(RAM_FadeMdIncr).w,d1		; Speed
(1)  462/     50C : D241                		add.w	d1,d1
(1)  463/     50E : 3C00                		move.w	d0,d6
(1)  464/     510 : 4846                		swap	d6
(1)  465/     512 : 0440 0001           		subi.w	#1,d0
(1)  466/     516 :                     .nxt_pal:
(1)  467/     516 : 4242                		clr.w	d2		; Reset finished colorbits
(1)  468/     518 : 3E16                		move.w	(a6),d7		; d7 - Input
(1)  469/     51A : 3C15                		move.w	(a5),d6		; d6 - Output
(1)  470/     51C : 3607                		move.w	d7,d3		; RED
(1)  471/     51E : 3806                		move.w	d6,d4
(1)  472/     520 : 0246 0EE0           		andi.w	#%0000111011100000,d6
(1)  473/     524 : 0244 000E           		andi.w	#%0000000000001110,d4
(1)  474/     528 : 0243 000E           		andi.w	#%0000000000001110,d3
(1)  475/     52C : D841                		add.w	d1,d4
(1)  476/     52E : B843                		cmp.w	d3,d4
(1)  477/     530 : 6506                		bcs.s	.no_red
(1)  478/     532 : 3803                		move.w	d3,d4
(1)  479/     534 : 0042 0001           		ori.w	#%001,d2	; RED is ready
(1)  480/     538 :                     .no_red:
(1)  481/     538 : 8C44                		or.w	d4,d6
(1)  482/     53A : E949                		lsl.w	#4,d1
(1)  483/     53C : 3607                		move.w	d7,d3		; GREEN
(1)  484/     53E : 3806                		move.w	d6,d4
(1)  485/     540 : 0246 0E0E           		andi.w	#%0000111000001110,d6
(1)  486/     544 : 0244 00E0           		andi.w	#%0000000011100000,d4
(1)  487/     548 : 0243 00E0           		andi.w	#%0000000011100000,d3
(1)  488/     54C : D841                		add.w	d1,d4
(1)  489/     54E : B843                		cmp.w	d3,d4
(1)  490/     550 : 6506                		bcs.s	.no_grn
(1)  491/     552 : 3803                		move.w	d3,d4
(1)  492/     554 : 0042 0002           		ori.w	#%010,d2	; GREEN is ready
(1)  493/     558 :                     .no_grn:
(1)  494/     558 : 8C44                		or.w	d4,d6
(1)  495/     55A : E949                		lsl.w	#4,d1
(1)  496/     55C : 3607                		move.w	d7,d3		; BLUE
(1)  497/     55E : 3806                		move.w	d6,d4
(1)  498/     560 : 0246 00EE           		andi.w	#%0000000011101110,d6
(1)  499/     564 : 0244 0E00           		andi.w	#%0000111000000000,d4
(1)  500/     568 : 0243 0E00           		andi.w	#%0000111000000000,d3
(1)  501/     56C : D841                		add.w	d1,d4
(1)  502/     56E : B843                		cmp.w	d3,d4
(1)  503/     570 : 6506                		bcs.s	.no_blu
(1)  504/     572 : 3803                		move.w	d3,d4
(1)  505/     574 : 0042 0004           		ori.w	#%100,d2	; BLUE is ready
(1)  506/     578 :                     .no_blu:
(1)  507/     578 : 8C44                		or.w	d4,d6
(1)  508/     57A : E049                		lsr.w	#8,d1
(1)  509/     57C : 3AC6                		move.w	d6,(a5)+
(1)  510/     57E : DCFC 0002           		adda	#2,a6
(1)  511/     582 : 0C42 0007           		cmpi.w	#%111,d2
(1)  512/     586 : 6608                		bne.s	.no_fnsh
(1)  513/     588 : 4846                		swap	d6
(1)  514/     58A : 0446 0001           		subi.w	#1,d6
(1)  515/     58E : 4846                		swap	d6
(1)  516/     590 :                     .no_fnsh:
(1)  517/     590 : 51C8 FF84           		dbf	d0,.nxt_pal
(1)  518/     594 : 4846                		swap	d6
(1)  519/     596 : 4A46                		tst.w	d6
(1)  520/     598 : 6604                		bne.s	.no_move
(1)  521/     59A : 4278 BDE4           		clr.w	(RAM_FadeMdReq).w
(1)  522/     59E :                     .no_move:
(1)  523/     59E : 4E75                		rts
(1)  524/     5A0 :                     
(1)  525/     5A0 :                     ; --------------------------------------------
(1)  526/     5A0 :                     ; Fade out
(1)  527/     5A0 :                     ; --------------------------------------------
(1)  528/     5A0 :                     
(1)  529/     5A0 :                     .fade_out:
(1)  530/     5A0 : 4DF8 AE14           		lea	(RAM_Palette).w,a6
(1)  531/     5A4 : 7040                		moveq	#64,d0				; Num of colors
(1)  532/     5A6 : 3238 BDE6           		move.w	(RAM_FadeMdIncr).w,d1		; Speed
(1)  533/     5AA : 3C00                		move.w	d0,d6
(1)  534/     5AC : 4846                		swap	d6
(1)  535/     5AE : 0440 0001           		subi.w	#1,d0
(1)  536/     5B2 :                     .nxt_pal_o:
(1)  537/     5B2 : 4242                		clr.w	d2			; Reset finished colorbits
(1)  538/     5B4 : 3E16                		move.w	(a6),d7			; d7 - Input
(1)  539/     5B6 : 3C07                		move.w	d7,d6
(1)  540/     5B8 : 0247 0EE0           		andi.w	#%0000111011100000,d7
(1)  541/     5BC : 0246 000E           		andi.w	#%0000000000001110,d6
(1)  542/     5C0 : 9C41                		sub.w	d1,d6
(1)  543/     5C2 : 6A06                		bpl.s	.no_red_o
(1)  544/     5C4 : 4246                		clr.w	d6
(1)  545/     5C6 : 0042 0001           		ori.w	#%001,d2		; RED is ready
(1)  546/     5CA :                     .no_red_o:
(1)  547/     5CA : 8E46                		or.w	d6,d7
(1)  548/     5CC : E949                		lsl.w	#4,d1
(1)  549/     5CE : 3C07                		move.w	d7,d6
(1)  550/     5D0 : 0247 0E0E           		andi.w	#%0000111000001110,d7
(1)  551/     5D4 : 0246 00E0           		andi.w	#%0000000011100000,d6
(1)  552/     5D8 : 9C41                		sub.w	d1,d6
(1)  553/     5DA : 6A06                		bpl.s	.no_grn_o
(1)  554/     5DC : 4246                		clr.w	d6
(1)  555/     5DE : 0042 0002           		ori.w	#%010,d2		; GREEN is ready
(1)  556/     5E2 :                     .no_grn_o:
(1)  557/     5E2 : 8E46                		or.w	d6,d7
(1)  558/     5E4 : E949                		lsl.w	#4,d1
(1)  559/     5E6 : 3C07                		move.w	d7,d6
(1)  560/     5E8 : 0247 00EE           		andi.w	#%0000000011101110,d7
(1)  561/     5EC : 0246 0E00           		andi.w	#%0000111000000000,d6
(1)  562/     5F0 : 9C41                		sub.w	d1,d6
(1)  563/     5F2 : 6A06                		bpl.s	.no_blu_o
(1)  564/     5F4 : 4246                		clr.w	d6
(1)  565/     5F6 : 0042 0004           		ori.w	#%100,d2		; BLUE is ready
(1)  566/     5FA :                     .no_blu_o:
(1)  567/     5FA : 8E46                		or.w	d6,d7
(1)  568/     5FC : E049                		lsr.w	#8,d1
(1)  569/     5FE : 3CC7                		move.w	d7,(a6)+
(1)  570/     600 : 0C42 0007           		cmpi.w	#%111,d2
(1)  571/     604 : 6608                		bne.s	.no_fnsh_o
(1)  572/     606 : 4846                		swap	d6
(1)  573/     608 : 0446 0001           		subi.w	#1,d6
(1)  574/     60C : 4846                		swap	d6
(1)  575/     60E :                     .no_fnsh_o:
(1)  576/     60E : 51C8 FFA2           		dbf	d0,.nxt_pal_o
(1)  577/     612 : 4846                		swap	d6
(1)  578/     614 : 4A46                		tst.w	d6
(1)  579/     616 : 6604                		bne.s	.no_move_o
(1)  580/     618 : 4278 BDE4           		clr.w	(RAM_FadeMdReq).w
(1)  581/     61C :                     .no_move_o:
(1)  582/     61C : 4E75                		rts
(1)  583/     61E :                     
(1)  584/     61E :                     ; ====================================================================
(1)  585/     61E :                     ; --------------------------------------------------------
(1)  586/     61E :                     ; Genesis DMA
(1)  587/     61E :                     ; --------------------------------------------------------
(1)  588/     61E :                     
(1)  589/     61E :                     ; --------------------------------------------------------
(1)  590/     61E :                     ; Video_DmaMkEntry
(1)  591/     61E :                     ;
(1)  592/     61E :                     ; Sets a new DMA transfer entry to the BLAST list
(1)  593/     61E :                     ;
(1)  594/     61E :                     ; *** CALL THIS OUTSIDE OF VBLANK ONLY ***
(1)  595/     61E :                     ;
(1)  596/     61E :                     ; d0.l - Art data Real-ROM location
(1)  597/     61E :                     ; d1.w - VRAM location cell_vram()
(1)  598/     61E :                     ; d2.w - Size
(1)  599/     61E :                     ;
(1)  600/     61E :                     ; Breaks:
(1)  601/     61E :                     ; d5-d7,a6
(1)  602/     61E :                     ; --------------------------------------------------------
(1)  603/     61E :                     
(1)  604/     61E :                     Video_DmaMkEntry:
(1)  605/     61E : 2A00                		move.l	d0,d5
(1)  606/     620 : DA42                		add.w	d2,d5
(1)  607/     622 : 6430                		bcc.s	.normal
(1)  608/     624 : 2A00                		move.l	d0,d5		; <-- DOUBLE TRANSFER
(1)  609/     626 : 3C01                		move.w	d1,d6
(1)  610/     628 : 2E05                		move.l	d5,d7		; Top
(1)  611/     62A : 0687 0001 0000      		addi.l	#$010000,d7
(1)  612/     630 : 0287 00FF 0000      		andi.l	#$FF0000,d7
(1)  613/     636 : 9E80                		sub.l	d0,d7
(1)  614/     638 : 6120                		bsr.s	.mk_set
(1)  615/     63A : 2A00                		move.l	d0,d5		; Bottom
(1)  616/     63C : 0685 0001 0000      		addi.l	#$010000,d5
(1)  617/     642 : 0285 00FF 0000      		andi.l	#$FF0000,d5
(1)  618/     648 : 2C05                		move.l	d5,d6
(1)  619/     64A : 9C80                		sub.l	d0,d6
(1)  620/     64C : 3E02                		move.w	d2,d7
(1)  621/     64E : 9E46                		sub.w	d6,d7
(1)  622/     650 : DC41                		add.w	d1,d6
(1)  623/     652 : 6006                		bra.s	.mk_set
(1)  624/     654 :                     .normal:
(1)  625/     654 : 2A00                		move.l	d0,d5
(1)  626/     656 : 3C01                		move.w	d1,d6
(1)  627/     658 : 3E02                		move.w	d2,d7
(1)  628/     65A :                     ; d7 - size
(1)  629/     65A :                     ; d6 - vram
(1)  630/     65A :                     ; d5 - data
(1)  631/     65A :                     .mk_set:
(1)  632/     65A : 4847                		swap	d7
(1)  633/     65C : 3E38 BDDE           		move.w	(RAM_VdpDmaIndx).w,d7
(1)  634/     660 : 0C47 0018           		cmpi.w	#MAX_MDDMATSK,d7
(1)  635/     664 : 6C64                		bge.s	.ran_out
(1)  636/     666 : E94F                		lsl.w	#4,d7			; Size $10
(1)  637/     668 : 4DF8 B114           		lea	(RAM_VdpDmaList).w,a6
(1)  638/     66C : DCC7                		adda	d7,a6
(1)  639/     66E : 4847                		swap	d7
(1)  640/     670 : 31FC 0001 BDE0      		move.w	#1,(RAM_VdpDmaMod).w
(1)  641/     676 : 5278 BDDE           		addq.w	#1,(RAM_VdpDmaIndx).w
(1)  642/     67A :                     
(1)  643/     67A : 0287 0000 FFFE      		andi.l	#$0000FFFE,d7
(1)  644/     680 : EF8F                		lsl.l	#7,d7
(1)  645/     682 : E04F                		lsr.w	#8,d7
(1)  646/     684 : 0087 9400 9300      		ori.l	#$94009300,d7
(1)  647/     68A : 2CC7                		move.l	d7,(a6)+
(1)  648/     68C : E28D                  		lsr.l	#1,d5			; d5 - Source
(1)  649/     68E : 2E3C 9600 9500       		move.l	#$96009500,d7
(1)  650/     694 : 1E05                 		move.b	d5,d7
(1)  651/     696 : E08D                 		lsr.l	#8,d5
(1)  652/     698 : 4847                 		swap	d7
(1)  653/     69A : 1E05                 		move.b	d5,d7
(1)  654/     69C : 2CC7                 		move.l	d7,(a6)+
(1)  655/     69E : 3E3C 9700            		move.w	#$9700,d7
(1)  656/     6A2 : E08D                 		lsr.l	#8,d5
(1)  657/     6A4 : 1E05                 		move.b	d5,d7
(1)  658/     6A6 : 3CC7                 		move.w	d7,(a6)+
(1)  659/     6A8 : 3E06                		move.w	d6,d7			; Destination
(1)  660/     6AA : 0286 0000 3FFF      		andi.l	#$3FFF,d6
(1)  661/     6B0 : 0046 4000           		ori.w	#$4000,d6
(1)  662/     6B4 : E04F                		lsr.w	#8,d7
(1)  663/     6B6 : EC4F                		lsr.w	#6,d7
(1)  664/     6B8 : 0247 0003           		andi.w	#%11,d7
(1)  665/     6BC : 0047 0080           		ori.w	#$80,d7
(1)  666/     6C0 : 3CC6                		move.w	d6,(a6)+
(1)  667/     6C2 : 3CC7                		move.w	d7,(a6)+
(1)  675/     6C4 : 31FC 0000 BDE0      		move.w	#0,(RAM_VdpDmaMod).w
(1)  676/     6CA :                     .ran_out:
(1)  677/     6CA : 4E75                		rts
(1)  678/     6CC :                     
(1)  679/     6CC :                     ; --------------------------------------------------------
(1)  680/     6CC :                     ; Video_Fill
(1)  681/     6CC :                     ;
(1)  682/     6CC :                     ; Fill data to VRAM
(1)  683/     6CC :                     ;
(1)  684/     6CC :                     ; d0.w - WORD to fill
(1)  685/     6CC :                     ; d1.w - VRAM location cell_vram()
(1)  686/     6CC :                     ; d2.w - Size
(1)  687/     6CC :                     ;
(1)  688/     6CC :                     ; Breaks:
(1)  689/     6CC :                     ; d6-d7,a6
(1)  690/     6CC :                     ;
(1)  691/     6CC :                     ; Notes:
(1)  692/     6CC :                     ; Size $0001 is invalid, writes in this order: $56781234
(1)  693/     6CC :                     ; --------------------------------------------------------
(1)  694/     6CC :                     
(1)  695/     6CC :                     Video_Fill:
(1)  696/     6CC : 4DF9 00C0 0004      		lea	(vdp_ctrl).l,a6
(1)  697/     6D2 : 3E3C 8100           		move.w	#$8100,d7
(1)  698/     6D6 : 1E38 BDF7           		move.b	(RAM_VdpRegs+1).w,d7
(1)  699/     6DA : 08C7 0004           		bset	#bitDmaEnbl,d7
(1)  700/     6DE : 3C87                		move.w	d7,(a6)
(1)  701/     6E0 : 3E16                .dmaw:		move.w	(a6),d7
(1)  702/     6E2 : 0807 0001           		btst	#bitDma,d7
(1)  703/     6E6 : 66F8                		bne.s	.dmaw
(1)  704/     6E8 : 3CBC 8F01           		move.w	#$8F01,(a6)	; Increment $01
(1)  705/     6EC : 3E02                		move.w	d2,d7		; d2 - Size
(1)  706/     6EE : 0447 0001           		subi.w	#1,d7
(1)  707/     6F2 : 2C3C 9400 9300      		move.l	#$94009300,d6
(1)  708/     6F8 : 1C07                		move.b	d7,d6
(1)  709/     6FA : 4846                		swap	d6
(1)  710/     6FC : E04F                		lsr.w	#8,d7
(1)  711/     6FE : 1C07                		move.b	d7,d6
(1)  712/     700 : 4846                		swap	d6
(1)  713/     702 : 2C86                		move.l	d6,(a6)
(1)  714/     704 : 3CBC 9780           		move.w	#$9780,(a6)	; DMA Fill mode
(1)  715/     708 : 3E01                		move.w	d1,d7		; d1 - Destination
(1)  716/     70A : 3C07                		move.w	d7,d6
(1)  717/     70C : 0246 3FFF           		andi.w	#$3FFF,d6
(1)  718/     710 : 0046 4000           		ori.w	#$4000,d6
(1)  719/     714 : 4846                		swap	d6
(1)  720/     716 : 3C07                		move.w	d7,d6
(1)  721/     718 : E04E                		lsr.w	#8,d6
(1)  722/     71A : EC4E                		lsr.w	#6,d6
(1)  723/     71C : 0246 0003           		andi.w	#%11,d6
(1)  724/     720 : 0046 0080           		ori.w	#$80,d6
(1)  725/     724 : 2C86                		move.l	d6,(a6)
(1)  726/     726 : 3D40 FFFC           		move.w	d0,-4(a6)
(1)  727/     72A : 3E16                .dma_w:		move.w	(a6),d7
(1)  728/     72C : 0807 0001           		btst	#bitDma,d7
(1)  729/     730 : 66F8                		bne.s	.dma_w
(1)  730/     732 : 3CBC 8F02           		move.w	#$8F02,(a6)	; Increment $02
(1)  731/     736 : 3E3C 8100           		move.w	#$8100,d7
(1)  732/     73A : 1E38 BDF7           		move.b	(RAM_VdpRegs+1).w,d7
(1)  733/     73E : 3C87                		move.w	d7,(a6)
(1)  734/     740 : 4E75                		rts
(1)  735/     742 :                     
(1)  736/     742 :                     ; --------------------------------------------------------
(1)  737/     742 :                     ; Video_Copy
(1)  738/     742 :                     ;
(1)  739/     742 :                     ; Copy VRAM data to another location
(1)  740/     742 :                     ;
(1)  741/     742 :                     ; d0.w - VRAM Source cell_vram()
(1)  742/     742 :                     ; d1.w - VRAM Destination cell_vram()
(1)  743/     742 :                     ; d2.w - Size
(1)  744/     742 :                     ;
(1)  745/     742 :                     ; Breaks:
(1)  746/     742 :                     ; d6-d7,a6
(1)  747/     742 :                     ; --------------------------------------------------------
(1)  748/     742 :                     
(1)  749/     742 :                     ; TODO: test if this works again...
(1)  750/     742 :                     
(1)  751/     742 :                     Video_Copy:
(1)  752/     742 : 4DF9 00C0 0004      		lea	(vdp_ctrl),a6
(1)  753/     748 : 3E3C 8100           		move.w	#$8100,d7
(1)  754/     74C : 1E38 BDF7           		move.b	(RAM_VdpRegs+1).w,d7
(1)  755/     750 : 08C7 0004           		bset	#bitDmaEnbl,d7
(1)  756/     754 : 3C87                		move.w	d7,(a6)
(1)  757/     756 : 3E16                .dmaw:		move.w	(a6),d7
(1)  758/     758 : 0807 0001           		btst	#bitDma,d7
(1)  759/     75C : 66F8                		bne.s	.dmaw
(1)  760/     75E : 3CBC 8F01           		move.w	#$8F01,(a6)		; Increment $01
(1)  761/     762 : 3E02                		move.w	d2,d7			; SIZE
(1)  762/     764 : 2C3C 9400 9300      		move.l	#$94009300,d6
(1)  763/     76A :                     ; 		lsr.w	#1,d7
(1)  764/     76A : 1C07                		move.b	d7,d6
(1)  765/     76C : 4846                		swap	d6
(1)  766/     76E : E04F                		lsr.w	#8,d7
(1)  767/     770 : 1C07                		move.b	d7,d6
(1)  768/     772 : 4846                		swap	d6
(1)  769/     774 : 2C86                		move.l	d6,(a6)
(1)  770/     776 : 2C3C 9600 9500      		move.l	#$96009500,d6		; SOURCE
(1)  771/     77C : 3E00                		move.w	d0,d7
(1)  772/     77E : 1C07                		move.b	d7,d6
(1)  773/     780 : 4846                		swap	d6
(1)  774/     782 : E04F                		lsr.w	#8,d7
(1)  775/     784 : 1C07                		move.b	d7,d6
(1)  776/     786 : 2C86                		move.l	d6,(a6)
(1)  777/     788 : 3CBC 97C0           		move.w	#$97C0,(a6)		; DMA Copy mode
(1)  778/     78C : 2E02                		move.l	d2,d7			; DESTINATION
(1)  779/     78E : 3C07                		move.w	d7,d6
(1)  780/     790 : 0246 3FFF           		andi.w	#$3FFF,d6
(1)  781/     794 : 0046 4000           		ori.w	#$4000,d6
(1)  782/     798 : 4846                		swap	d6
(1)  783/     79A : 3C07                		move.w	d7,d6
(1)  784/     79C : E04E                		lsr.w	#8,d6
(1)  785/     79E : EC4E                		lsr.w	#6,d6
(1)  786/     7A0 : 0246 0003           		andi.w	#%11,d6
(1)  787/     7A4 : 0046 00C0           		ori.w	#$C0,d6
(1)  788/     7A8 : 2C86                		move.l	d6,(a6)
(1)  789/     7AA : 3D41 FFFC           		move.w	d1,-4(a6)
(1)  790/     7AE : 3E16                .dma_w:		move.w	(a6),d7
(1)  791/     7B0 : 0807 0001           		btst	#bitDma,d7
(1)  792/     7B4 : 66F8                		bne.s	.dma_w
(1)  793/     7B6 : 3CBC 8F02           		move.w	#$8F02,(a6)		; Increment $02
(1)  794/     7BA : 3E3C 8100           		move.w	#$8100,d7
(1)  795/     7BE : 1E38 BDF7           		move.b	(RAM_VdpRegs+1).w,d7
(1)  796/     7C2 : 3C87                		move.w	d7,(a6)
(1)  797/     7C4 : 4E75                		rts
(1)  798/     7C6 :                     
(1)  799/     7C6 :                     ; --------------------------------------------------------
(1)  800/     7C6 :                     ; Load graphics using DMA manually
(1)  801/     7C6 :                     ;
(1)  802/     7C6 :                     ; Input:
(1)  803/     7C6 :                     ; d0.l - Graphics data pointer (NOT a0)
(1)  804/     7C6 :                     ; d1.w - cell_vram(vram_pos)
(1)  805/     7C6 :                     ; d2.w - Size
(1)  806/     7C6 :                     ;
(1)  807/     7C6 :                     ; Breaks:
(1)  808/     7C6 :                     ; d4-d7,a4
(1)  809/     7C6 :                     ;
(1)  810/     7C6 :                     ; Notes:
(1)  811/     7C6 :                     ; - For a faster transfer call this during VBlank
(1)  812/     7C6 :                     ; - 32X: MAKE SURE THE SH2 SIDE IS NOT READING ROM
(1)  813/     7C6 :                     ;        BEFORE CALLING THIS.
(1)  814/     7C6 :                     ; --------------------------------------------------------
(1)  815/     7C6 :                     
(1)  816/     7C6 :                     Video_LoadArt:
(1)  817/     7C6 : 2A00                		move.l	d0,d5
(1)  818/     7C8 : DA42                		add.w	d2,d5
(1)  819/     7CA : 6430                		bcc.s	.normal
(1)  820/     7CC : 2A00                		move.l	d0,d5		; <-- DOUBLE TRANSFER
(1)  821/     7CE : 3C01                		move.w	d1,d6
(1)  822/     7D0 : 2E05                		move.l	d5,d7		; Top
(1)  823/     7D2 : 0687 0001 0000      		addi.l	#$010000,d7
(1)  824/     7D8 : 0287 00FF 0000      		andi.l	#$FF0000,d7
(1)  825/     7DE : 9E80                		sub.l	d0,d7
(1)  826/     7E0 : 6120                		bsr.s	.mk_set
(1)  827/     7E2 : 2A00                		move.l	d0,d5		; Bottom
(1)  828/     7E4 : 0685 0001 0000      		addi.l	#$010000,d5
(1)  829/     7EA : 0285 00FF 0000      		andi.l	#$FF0000,d5
(1)  830/     7F0 : 2C05                		move.l	d5,d6
(1)  831/     7F2 : 9C80                		sub.l	d0,d6
(1)  832/     7F4 : 3E02                		move.w	d2,d7
(1)  833/     7F6 : 9E46                		sub.w	d6,d7
(1)  834/     7F8 : DC41                		add.w	d1,d6
(1)  835/     7FA : 6006                		bra.s	.mk_set
(1)  836/     7FC :                     .normal:
(1)  837/     7FC : 2A00                		move.l	d0,d5
(1)  838/     7FE : 3C01                		move.w	d1,d6
(1)  839/     800 : 3E02                		move.w	d2,d7
(1)  840/     802 :                     ; d7 - size
(1)  841/     802 :                     ; d6 - vram
(1)  842/     802 :                     ; d5 - data
(1)  843/     802 :                     .mk_set:
(1)  844/     802 : 49F9 00C0 0004      		lea	(vdp_ctrl),a4
(1)  845/     808 : 383C 8100           		move.w	#$8100,d4		; DMA ON
(1)  846/     80C : 1838 BDF7           		move.b	(RAM_VdpRegs+1).w,d4
(1)  847/     810 : 08C4 0004           		bset	#bitDmaEnbl,d4
(1)  848/     814 : 3884                		move.w	d4,(a4)
(1)  849/     816 :                     
(1)  864/     816 : 611A                		bsr.s	.shared_setup
(1)  865/     818 : 3886                		move.w	d6,(a4)
(1)  866/     81A : 6100 0760           		bsr	System_DmaEnter_ROM
(1)  867/     81E : 3887                		move.w	d7,(a4)			; <-- second write
(1)  868/     820 : 6100 075E           		bsr	System_DmaExit_ROM
(1)  869/     824 : 383C 8100           		move.w	#$8100,d4		; DMA OFF
(1)  870/     828 : 1838 BDF7           		move.b	(RAM_VdpRegs+1).w,d4
(1)  871/     82C : 3884                		move.w	d4,(a4)
(1)  872/     82E :                     
(1)  894/     82E : 4E75                		rts
(1)  895/     830 :                     
(1)  896/     830 :                     .from_ram:
(1)  897/     830 : 4E75                		rts
(1)  898/     832 :                     
(1)  899/     832 :                     .shared_setup:
(1)  900/     832 : 0287 0000 FFFE      		andi.l	#$0000FFFE,d7
(1)  901/     838 : EF8F                		lsl.l	#7,d7
(1)  902/     83A : E04F                		lsr.w	#8,d7
(1)  903/     83C : 0087 9400 9300      		ori.l	#$94009300,d7
(1)  904/     842 : 2887                		move.l	d7,(a4)
(1)  905/     844 : E28D                  		lsr.l	#1,d5			; d5 - Source
(1)  906/     846 : 2E3C 9600 9500       		move.l	#$96009500,d7
(1)  907/     84C : 1E05                 		move.b	d5,d7
(1)  908/     84E : E08D                 		lsr.l	#8,d5
(1)  909/     850 : 4847                 		swap	d7
(1)  910/     852 : 1E05                 		move.b	d5,d7
(1)  911/     854 : 2887                 		move.l	d7,(a4)
(1)  912/     856 : 3E3C 9700            		move.w	#$9700,d7
(1)  913/     85A : E08D                 		lsr.l	#8,d5
(1)  914/     85C : 1E05                 		move.b	d5,d7
(1)  915/     85E : 3887                 		move.w	d7,(a4)
(1)  916/     860 : 3E06                		move.w	d6,d7			; Destination
(1)  917/     862 : 0286 0000 3FFF      		andi.l	#$3FFF,d6
(1)  918/     868 : 0046 4000           		ori.w	#$4000,d6
(1)  919/     86C : E04F                		lsr.w	#8,d7
(1)  920/     86E : EC4F                		lsr.w	#6,d7
(1)  921/     870 : 0247 0003           		andi.w	#%11,d7
(1)  922/     874 : 0047 0080           		ori.w	#$80,d7
(1)  923/     878 : 4E75                		rts
(1)  924/     87A :                     
(1)  925/     87A :                     ; --------------------------------------------------------
(1)  926/     87A :                     ; Video_Render
(1)  927/     87A :                     ;
(1)  928/     87A :                     ; Call this during VBlank to update
(1)  929/     87A :                     ; visuals.
(1)  930/     87A :                     ; --------------------------------------------------------
(1)  931/     87A :                     
(1)  932/     87A :                     Video_Render:
(1)  933/     87A : 4DF9 00C0 0004      		lea	(vdp_ctrl),a6
(1)  934/     880 : 3E3C 8100           		move.w	#$8100,d7		; DMA ON
(1)  935/     884 : 1E38 BDF7           		move.b	(RAM_VdpRegs+1).w,d7
(1)  936/     888 : 08C7 0004           		bset	#bitDmaEnbl,d7
(1)  937/     88C : 3C87                		move.w	d7,(a6)
(1)  938/     88E : 6100 06E4           		bsr	System_DmaEnter_RAM
(1)  939/     892 : 2CBC 9400 9328      		move.l	#$94009328,(a6)
(1)  940/     898 : 2CBC 96D1 95E2      		move.l	#$96009500|(RAM_VerScroll<<7&$FF0000)|(RAM_VerScroll>>1&$FF),(a6)
(1)  941/     89E : 3CBC 977F           		move.w	#$9700|(RAM_VerScroll>>17&$7F),(a6)
(1)  942/     8A2 : 3CBC 4000           		move.w	#$4000,(a6)
(1)  943/     8A6 : 3F3C 0090           		move.w	#$0010|$80,-(sp)
(1)  944/     8AA : 3C9F                		move.w	(sp)+,(a6)
(1)  945/     8AC : 2CBC 9401 93E0      		move.l	#$940193E0,(a6)
(1)  946/     8B2 : 2CBC 96D0 9502      		move.l	#$96009500|(RAM_HorScroll<<7&$FF0000)|(RAM_HorScroll>>1&$FF),(a6)
(1)  947/     8B8 : 3CBC 977F           		move.w	#$9700|(RAM_HorScroll>>17&$7F),(a6)
(1)  948/     8BC : 3CBC 7C00           		move.w	#$7C00,(a6)
(1)  949/     8C0 : 3F3C 0083           		move.w	#$0003|$80,-(sp)
(1)  950/     8C4 : 3C9F                		move.w	(sp)+,(a6)
(1)  951/     8C6 : 2CBC 9402 9300      		move.l	#$94029300,(a6)
(1)  952/     8CC : 2CBC 96D2 950A      		move.l	#$96009500|(RAM_Sprites<<7&$FF0000)|(RAM_Sprites>>1&$FF),(a6)
(1)  953/     8D2 : 3CBC 977F           		move.w	#$9700|(RAM_Sprites>>17&$7F),(a6)
(1)  954/     8D6 : 3CBC 7800           		move.w	#$7800,(a6)
(1)  955/     8DA : 3F3C 0083           		move.w	#$0003|$80,-(sp)
(1)  956/     8DE : 3C9F                		move.w	(sp)+,(a6)
(1)  957/     8E0 : 2CBC 9400 9340      		move.l	#$94009340,(a6)
(1)  958/     8E6 : 2CBC 96D7 950A      		move.l	#$96009500|(RAM_Palette<<7&$FF0000)|(RAM_Palette>>1&$FF),(a6)
(1)  959/     8EC : 3CBC 977F           		move.w	#$9700|(RAM_Palette>>17&$7F),(a6)
(1)  960/     8F0 : 3CBC C000           		move.w	#$C000,(a6)
(1)  961/     8F4 : 3F3C 0080           		move.w	#$0000|$80,-(sp)
(1)  962/     8F8 : 3C9F                		move.w	(sp)+,(a6)
(1)  963/     8FA : 6100 067C           		bsr	System_DmaExit_RAM
(1)  964/     8FE : 3E3C 8100           		move.w	#$8100,d7
(1)  965/     902 : 1E38 BDF7           		move.b	(RAM_VdpRegs+1).w,d7
(1)  966/     906 : 3C87                		move.w	d7,(a6)
(1)  967/     908 : 31FC 0001 BDDA      		move.w	#1,(RAM_SprLinkNum).w	; Reset SPRITE LINK number
(1)  968/     90E :                     
(1)  969/     90E :                     	; Process DMA BLAST from here
(1)  970/     90E :                     
(1)  971/     90E :                     ; --------------------------------------------------------
(1)  972/     90E :                     ; Video_DmaBlast
(1)  973/     90E :                     ;
(1)  974/     90E :                     ; Process DMA tasks from a predefined list in RAM
(1)  975/     90E :                     ;
(1)  976/     90E :                     ; Breaks:
(1)  977/     90E :                     ; d5-d7,a3-a4
(1)  978/     90E :                     ;
(1)  979/     90E :                     ; *** Call this on VBlank ONLY ***
(1)  980/     90E :                     ;
(1)  981/     90E :                     ; NOTE:
(1)  982/     90E :                     ; For 32X this code MUST be located on RAM as it
(1)  983/     90E :                     ; writes the RV from ROM access
(1)  984/     90E :                     ; --------------------------------------------------------
(1)  985/     90E :                     
(1)  986/     90E :                     ; Format:
(1)  987/     90E :                     ; dc.w $94xx,$93xx		; Size
(1)  988/     90E :                     ; dc.w $96xx,$95xx,$97xx	; Source
(1)  989/     90E :                     ; dc.l $4xxx008x 		; VDP output + DMA bit
(1)  990/     90E :                     ; dc.w $xxxx			; SegaCD/CD32X only: graphics word patch
(1)  991/     90E :                     
(1)  992/     90E :                     Video_DmaBlast:
(1)  993/     90E : 4A78 BDE0           		tst.w	(RAM_VdpDmaMod).w		; Got mid-write?
(1)  994/     912 : 664C                		bne.s	.exit				; then can't transfer.
(1)  995/     914 : 4A78 BDDE           		tst.w	(RAM_VdpDmaIndx).w		; Any requests?
(1)  996/     918 : 6746                		beq.s	.exit
(1)  997/     91A : 49F9 00C0 0004      		lea	(vdp_ctrl),a4			; Enter processing loop
(1)  998/     920 : 47F8 B114           		lea	(RAM_VdpDmaList).w,a3
(1)  999/     924 : 3E3C 8100           		move.w	#$8100,d7			; DMA ON
(1) 1000/     928 : 1E38 BDF7           		move.b	(RAM_VdpRegs+1).w,d7
(1) 1001/     92C : 08C7 0004           		bset	#bitDmaEnbl,d7
(1) 1002/     930 : 3887                		move.w	d7,(a4)
(1) 1003/     932 : 6100 0648           		bsr	System_DmaEnter_ROM		; Request Z80 stop and SH2 backup
(1) 1004/     936 : 4A78 BDDE           .next:		tst.w	(RAM_VdpDmaIndx).w
(1) 1005/     93A : 6716                		beq.s	.end
(1) 1029/     93C : 289B                		move.l	(a3)+,(a4)		; Size
(1) 1030/     93E : 289B                		move.l	(a3)+,(a4)		; Source
(1) 1031/     940 : 389B                		move.w	(a3)+,(a4)
(1) 1032/     942 : 389B                		move.w	(a3)+,(a4)		; Destination
(1) 1033/     944 : 389B                		move.w	(a3)+,(a4)		; *** CPU freezes ***
(1) 1034/     946 : D6FC 0002           		adda	#2,a3
(1) 1036/     94A : 0478 0001 BDDE      		subi.w	#1,(RAM_VdpDmaIndx).w
(1) 1037/     950 : 60E4                		bra.s	.next
(1) 1038/     952 :                     .end:
(1) 1039/     952 : 6100 062C           		bsr	System_DmaExit_ROM	; Resume Z80 and SH2 direct
(1) 1040/     956 : 3E3C 8100           		move.w	#$8100,d7		; DMA OFF
(1) 1041/     95A : 1E38 BDF7           		move.b	(RAM_VdpRegs+1).w,d7
(1) 1042/     95E : 3887                		move.w	d7,(a4)
(1) 1043/     960 :                     .exit:
(1) 1044/     960 : 4E75                		rts
(1) 1045/     962 :                     
(1) 1046/     962 :                     ; ====================================================================
(1) 1047/     962 :                     ; ----------------------------------------------------------------
(1) 1048/     962 :                     ; Video routines for 32X
(1) 1049/     962 :                     ; ----------------------------------------------------------------
(1) 1050/     962 :                     
(1) 1051/     962 :                     ; --------------------------------------------------------
(1) 1052/     962 :                     ; Video_MarsGfxMode
(1) 1053/     962 :                     ; Sets graphics mode on the 32X side
(1) 1054/     962 :                     ;
(1) 1055/     962 :                     ; Input:
(1) 1056/     962 :                     ; d0 - Graphics mode number
(1) 1057/     962 :                     ;
(1) 1058/     962 :                     ; Uses:
(1) 1059/     962 :                     ; d7
(1) 1060/     962 :                     ;
(1) 1061/     962 :                     ; Notes:
(1) 1062/     962 :                     ; Changing modes takes 3 FRAMES to process.
(1) 1063/     962 :                     ; --------------------------------------------------------
(1) 1064/     962 :                     
(1) 1065/     962 :                     Video_MarsGfxMode:
(1) 1081/     962 : 4E75                		rts
(1) 1082/     964 :                     
(1) 1083/     964 :                     ; --------------------------------------------------------
(1) 1084/     964 :                     ; Video_Mars_SyncFrame
(1) 1085/     964 :                     ; --------------------------------------------------------
(1) 1086/     964 :                     
(1) 1087/     964 :                     Video_Mars_SyncFrame:
(1) 1093/     964 : 4E75                		rts
(1) 1094/     966 :                     
(1) 1095/     966 :                     ; --------------------------------------------------------
(1) 1096/     966 :                     ; Video_LoadPal_Mars
(1) 1097/     966 :                     ;
(1) 1098/     966 :                     ; Load Indexed palette directly to Buffer
(1) 1099/     966 :                     ;
(1) 1100/     966 :                     ; d0 - Start at
(1) 1101/     966 :                     ; d1 - Number of colors
(1) 1102/     966 :                     ; d2 - Priority bit OFF/ON
(1) 1103/     966 :                     ; --------------------------------------------------------
(1) 1104/     966 :                     
(1) 1105/     966 :                     Video_FadePal_Mars:
(1) 1129/     966 : 4E75                		rts
(1) 1130/     968 :                     
(1) 1131/     968 :                     ; --------------------------------------------------------
(1) 1132/     968 :                     ; Video_MarsPalFade
(1) 1133/     968 :                     ;
(1) 1134/     968 :                     ; Input:
(1) 1135/     968 :                     ; a0 - Palette data
(1) 1136/     968 :                     ; d0 - Number of colors
(1) 1137/     968 :                     ; d1 - Speed
(1) 1138/     968 :                     ;
(1) 1139/     968 :                     ; RAM_ReqFadeMars: (WORD)
(1) 1140/     968 :                     ; $00 - No task (or finished)
(1) 1141/     968 :                     ; $01 - Fade in
(1) 1142/     968 :                     ; $02 - Fade out to black
(1) 1143/     968 :                     ;
(1) 1144/     968 :                     ; CALL THIS OUTSIDE OF VBLANK
(1) 1145/     968 :                     ; --------------------------------------------------------
(1) 1146/     968 :                     
(1) 1147/     968 :                     ; TODO: luego ver que hago con el priority bit
(1) 1148/     968 :                     
(1) 1149/     968 :                     Video_MarsPalFade:
(1) 1308/     968 : 4E75                		rts
(1) 1309/     96A :                     
(1) 1310/     96A :                     
(1) 1311/     96A :                     ; ====================================================================
(1) 1312/     96A :                     ; ----------------------------------------------------------------
(1) 1313/     96A :                     ; Common screen routines
(1) 1314/     96A :                     ; ----------------------------------------------------------------
(1) 1315/     96A :                     
(1) 1316/     96A :                     ; --------------------------------------------------------
(1) 1317/     96A :                     ; Video_LoadMap
(1) 1318/     96A :                     ;
(1) 1319/     96A :                     ; Loads map data, in Horizontal order
(1) 1320/     96A :                     ; Can autodetect layer width, height and
(1) 1321/     96A :                     ; double interlace mode
(1) 1322/     96A :                     ;
(1) 1323/     96A :                     ; Input:
(1) 1324/     96A :                     ; a0   - Map data
(1) 1325/     96A :                     ; d0.l - locate(lyr,x,y) / 00|Layer|X|Y
(1) 1326/     96A :                     ; d1.l - mapsize(x,y) / Width|Height (in cells)
(1) 1327/     96A :                     ; d2.l - VRAM cell increment
(1) 1328/     96A :                     ;
(1) 1329/     96A :                     ; Breaks:
(1) 1330/     96A :                     ; d4-d7/a6
(1) 1331/     96A :                     ; --------------------------------------------------------
(1) 1332/     96A :                     
(1) 1333/     96A :                     Video_LoadMap:
(1) 1334/     96A : 4DF9 00C0 0000      		lea	(vdp_data),a6
(1) 1335/     970 : 6100 01B6           		bsr	vid_PickLayer
(1) 1336/     974 : 3801                		move.w	d1,d4			; Start here
(1) 1337/     976 :                     .yloop:
(1) 1338/     976 : 4844                		swap	d4
(1) 1339/     978 : 2D45 0004           		move.l	d5,4(a6)
(1) 1340/     97C : 2E01                		move.l	d1,d7
(1) 1341/     97E : 4847                		swap	d7
(1) 1342/     980 :                     .xloop:
(1) 1343/     980 : 3818                		move.w	(a0)+,d4
(1) 1344/     982 : 0C44 FFFF           		cmpi.w	#-1,d4			; -1 ? TODO
(1) 1345/     986 : 6606                		bne.s	.nonull
(1) 1346/     988 : 383C 07FF           		move.w	#varNullVram,d4		; Replace with custom blank tile
(1) 1347/     98C : 6002                		bra.s	.cont
(1) 1348/     98E :                     .nonull:
(1) 1349/     98E : D842                		add.w	d2,d4
(1) 1350/     990 :                     .cont:
(1) 1351/     990 :                     	; Check for double interlace
(1) 1352/     990 : 4847                		swap	d7
(1) 1353/     992 : 1E38 BE02           		move.b	(RAM_VdpRegs+$C).w,d7
(1) 1354/     996 : 0247 0006           		andi.w	#%110,d7
(1) 1355/     99A : 0C47 0006           		cmpi.w	#%110,d7
(1) 1356/     99E : 660E                		bne.s	.nodble
(1) 1357/     9A0 : 3E04                		move.w	d4,d7
(1) 1358/     9A2 : E24F                		lsr.w	#1,d7
(1) 1359/     9A4 : 0247 07FF           		andi.w	#$7FF,d7
(1) 1360/     9A8 : 0244 F800           		andi.w	#$F800,d4
(1) 1361/     9AC : 8847                		or.w	d7,d4
(1) 1362/     9AE :                     .nodble:
(1) 1363/     9AE : 4847                		swap	d7
(1) 1364/     9B0 : 3C84                		move.w	d4,(a6)
(1) 1365/     9B2 : 51CF FFCC           		dbf	d7,.xloop
(1) 1366/     9B6 : DA86                		add.l	d6,d5
(1) 1367/     9B8 : 4844                		swap	d4
(1) 1368/     9BA : 51CC FFBA           		dbf	d4,.yloop
(1) 1369/     9BE : 4E75                		rts
(1) 1370/     9C0 :                     
(1) 1371/     9C0 :                     ; ; --------------------------------------------------------
(1) 1372/     9C0 :                     ; ; Video_LoadMap_Vert
(1) 1373/     9C0 :                     ; ;
(1) 1374/     9C0 :                     ; ; Load map data, Vertical order
(1) 1375/     9C0 :                     ; ;
(1) 1376/     9C0 :                     ; ; a0 - Map data
(1) 1377/     9C0 :                     ; ; d0 | LONG - 00|Lyr|X|Y,  locate(lyr,x,y)
(1) 1378/     9C0 :                     ; ; d1 | LONG - Width|Height (cells),  mapsize(x,y)
(1) 1379/     9C0 :                     ; ; d2 | WORD - VRAM
(1) 1380/     9C0 :                     ;
(1) 1381/     9C0 :                     ; ; Breaks:
(1) 1382/     9C0 :                     ; ; a4-a5,d4-d7
(1) 1383/     9C0 :                     ; ; --------------------------------------------------------
(1) 1384/     9C0 :                     ;
(1) 1385/     9C0 :                     ; Video_LoadMap_Vert:
(1) 1386/     9C0 :                     ; 		lea	(vdp_data),a4
(1) 1387/     9C0 :                     ; 		bsr	vid_PickLayer
(1) 1388/     9C0 :                     ; 		move.l	d1,d5		; Start here
(1) 1389/     9C0 :                     ; 		swap	d5
(1) 1390/     9C0 :                     ; .xloop:
(1) 1391/     9C0 :                     ; 		swap	d5
(1) 1392/     9C0 :                     ; 		move.l	d4,-(sp)
(1) 1393/     9C0 :                     ; 		move.w	d1,d7
(1) 1394/     9C0 :                     ; 		btst	#2,(RAM_VdpRegs+$C).w
(1) 1395/     9C0 :                     ; 		beq.s	.yloop
(1) 1396/     9C0 :                     ; 		lsr.w	#1,d7
(1) 1397/     9C0 :                     ; .yloop:
(1) 1398/     9C0 :                     ; 		move.l	d4,4(a4)
(1) 1399/     9C0 :                     ; 		move.w	(a0),d5
(1) 1400/     9C0 :                     ; 		cmpi.w	#-1,d5
(1) 1401/     9C0 :                     ; 		bne.s	.nonull
(1) 1402/     9C0 :                     ; 		move.w	#varNullVram,d5
(1) 1403/     9C0 :                     ; 		bra.s	.cont
(1) 1404/     9C0 :                     ; .nonull:
(1) 1405/     9C0 :                     ; 		add.w	d2,d5
(1) 1406/     9C0 :                     ; .cont:
(1) 1407/     9C0 :                     ; 		swap	d7
(1) 1408/     9C0 :                     ; 		adda	#2,a0
(1) 1409/     9C0 :                     ; 		btst	#2,(RAM_VdpRegs+$C).w
(1) 1410/     9C0 :                     ; 		beq.s	.nodble
(1) 1411/     9C0 :                     ; 		adda	#2,a0
(1) 1412/     9C0 :                     ; 		move.w	d5,d7
(1) 1413/     9C0 :                     ; 		lsr.w	#1,d7
(1) 1414/     9C0 :                     ; 		andi.w	#$7FF,d7
(1) 1415/     9C0 :                     ; 		andi.w	#$F800,d5
(1) 1416/     9C0 :                     ; 		or.w	d7,d5
(1) 1417/     9C0 :                     ; .nodble:
(1) 1418/     9C0 :                     ; 		swap	d7
(1) 1419/     9C0 :                     ; 		move.w	d5,(a4)
(1) 1420/     9C0 :                     ; 		add.l	d6,d4
(1) 1421/     9C0 :                     ; 		dbf	d7,.yloop
(1) 1422/     9C0 :                     ; .outdbl:
(1) 1423/     9C0 :                     ; 		move.l	(sp)+,d4
(1) 1424/     9C0 :                     ; 		add.l	#$20000,d4
(1) 1425/     9C0 :                     ; 		swap	d5
(1) 1426/     9C0 :                     ; 		dbf	d5,.xloop
(1) 1427/     9C0 :                     ; 		rts
(1) 1428/     9C0 :                     
(1) 1429/     9C0 :                     ; ====================================================================
(1) 1430/     9C0 :                     ; ----------------------------------------------------------------
(1) 1431/     9C0 :                     ; Text PRINT system, for debugging or quick texts.
(1) 1432/     9C0 :                     ; ----------------------------------------------------------------
(1) 1433/     9C0 :                     
(1) 1434/     9C0 :                     ; --------------------------------------------------------
(1) 1435/     9C0 :                     ; Video_PrintInit
(1) 1436/     9C0 :                     ;
(1) 1437/     9C0 :                     ; Initializes the default Graphics and Palette
(1) 1438/     9C0 :                     ; for the font.
(1) 1439/     9C0 :                     ;
(1) 1440/     9C0 :                     ; Input:
(1) 1441/     9C0 :                     ; a0 | ASCII Graphics location
(1) 1442/     9C0 :                     ; a1 | ASCII Palette
(1) 1443/     9C0 :                     ;
(1) 1444/     9C0 :                     ; Breaks:
(1) 1445/     9C0 :                     ; ALL
(1) 1446/     9C0 :                     ;
(1) 1447/     9C0 :                     ; Notes:
(1) 1448/     9C0 :                     ; * Requires ASCII font graphics starting from $20
(1) 1449/     9C0 :                     ; (" ") to $7F ("[DEL]")
(1) 1450/     9C0 :                     ; * CALL THIS ONLY IF DISPLAY IS OFF OR DURING VBLANK
(1) 1451/     9C0 :                     ; * 32X: MAKE SURE SH2 IS NOT READING ROM DATA
(1) 1452/     9C0 :                     ; --------------------------------------------------------
(1) 1453/     9C0 :                     
(1) 1454/     9C0 :                     Video_PrintInit:
(1) 1455/     9C0 :                     ; 		lea	(ASCII_FONT).l,a0
(1) 1456/     9C0 :                     ; 		lea	(ASCII_PAL).l,a1
(1) 1457/     9C0 : 2008                		move.l	a0,d0
(1) 1458/     9C2 : 323C B000           		move.w	#cell_vram(varPrintVram),d1
(1) 1459/     9C6 : 343C 0C00           		move.w	#($60*$20),d2			; From " " to "[DEL]"
(1) 1460/     9CA : 363C 6580           		move.w	#(varPrintPal<<13)|varPrintVram,d3
(1) 1461/     9CE : 0443 0020           		subi.w	#$20,d3
(1) 1462/     9D2 : 31C3 BDE2           		move.w	d3,(RAM_VidPrntVram).w
(1) 1463/     9D6 : 6100 FDEE           		bsr	Video_LoadArt
(1) 1464/     9DA :                     Video_PrintPal:
(1) 1465/     9DA : 2049                		movea.l	a1,a0
(1) 1466/     9DC : 7030                		moveq	#(varPrintPal<<4),d0
(1) 1467/     9DE : 323C 000F           		move.w	#$0F,d1
(1) 1468/     9E2 : 6100 FAD0           		bsr	Video_LoadPal	; Write to both palette buffers
(1) 1469/     9E6 : 6000 FAC2           		bra	Video_FadePal
(1) 1470/     9EA :                     
(1) 1471/     9EA :                     ; --------------------------------------------------------
(1) 1472/     9EA :                     ; Video_Print
(1) 1473/     9EA :                     ;
(1) 1474/     9EA :                     ; Prints string to layer
(1) 1475/     9EA :                     ;
(1) 1476/     9EA :                     ; Input:
(1) 1477/     9EA :                     ; a0   - String data w/special characters +
(1) 1478/     9EA :                     ;        list of RAM locations to read
(1) 1479/     9EA :                     ; d0.l - Print location on-screen: locate(layer,x,y)
(1) 1480/     9EA :                     ;        ( 00|Lyr|X|Y )
(1) 1481/     9EA :                     ;
(1) 1482/     9EA :                     ; Breaks:
(1) 1483/     9EA :                     ; d4-d7,a4-a6
(1) 1484/     9EA :                     ;
(1) 1485/     9EA :                     ; Notes:
(1) 1486/     9EA :                     ; CALL Video_PrintInit FIRST
(1) 1487/     9EA :                     ;
(1) 1488/     9EA :                     ; Text string special codes:
(1) 1489/     9EA :                     ; $00 - End of line
(1) 1490/     9EA :                     ; $0A - Next line
(1) 1491/     9EA :                     ; "//b" - Show BYTE value
(1) 1492/     9EA :                     ; "//w" - Show WORD value
(1) 1493/     9EA :                     ; "//l" - Show LONG value
(1) 1494/     9EA :                     ;
(1) 1495/     9EA :                     ; If using //b //w //l:
(1) 1496/     9EA :                     ; After $00, put your RAM addresses in LONGS in the
(1) 1497/     9EA :                     ; same order you placed your value tags, don't forget to
(1) 1498/     9EA :                     ; put "align 2" at the end of the string or it will
(1) 1499/     9EA :                     ; trigger and ADDRESS ERROR
(1) 1500/     9EA :                     ; --------------------------------------------------------
(1) 1501/     9EA :                     
(1) 1502/     9EA :                     ; TODO: negative values might break
(1) 1503/     9EA :                     
(1) 1504/     9EA :                     Video_Print:
(1) 1505/     9EA : 48E7 0F0E           		movem.l	d4-d7/a4-a6,-(sp)
(1) 1506/     9EE : 4DF9 00C0 0000      		lea	(vdp_data).l,a6
(1) 1507/     9F4 : 6100 0132           		bsr	vid_PickLayer
(1) 1508/     9F8 : 4BF8 BC54           		lea	(RAM_VidPrntList).w,a5
(1) 1509/     9FC :                     .newjump:
(1) 1510/     9FC : 2D45 0004           		move.l	d5,4(a6)
(1) 1511/     A00 : 2805                		move.l	d5,d4
(1) 1512/     A02 :                     .loop:
(1) 1513/     A02 : 1E18                		move.b	(a0)+,d7
(1) 1514/     A04 : 0247 00FF           		andi.w	#$FF,d7
(1) 1515/     A08 : 676C                		beq	.exit
(1) 1516/     A0A : 0C07 000A           		cmpi.b	#$0A,d7			; $0A - next line?
(1) 1517/     A0E : 672C                		beq.s	.next
(1) 1518/     A10 : 0C07 005C           		cmpi.b	#$5C,d7			; $5C ("\") special?
(1) 1519/     A14 : 6618                		bne.s	.puttext
(1) 1520/     A16 : 1E18                		move.b	(a0)+,d7		; Read next chr
(1) 1521/     A18 : 0C07 0062           		cmpi.b	#"b",d7
(1) 1522/     A1C : 6722                		beq.s	.isbyte
(1) 1523/     A1E : 0C07 0077           		cmpi.b	#"w",d7
(1) 1524/     A22 : 672E                		beq.s	.isword
(1) 1525/     A24 : 0C07 006C           		cmpi.b	#"l",d7
(1) 1526/     A28 : 673A                		beq.s	.islong
(1) 1527/     A2A : 3E3C 005C           		move.w	#"\\",d7		; normal "\"
(1) 1528/     A2E :                     .puttext:
(1) 1529/     A2E : DE78 BDE2           		add.w	(RAM_VidPrntVram).w,d7	; VRAM pos increment
(1) 1530/     A32 : 3C87                		move.w	d7,(a6)
(1) 1531/     A34 : 0684 0002 0000      		addi.l	#$20000,d4
(1) 1532/     A3A : 60C6                		bra.s	.loop
(1) 1533/     A3C :                     .next:
(1) 1534/     A3C : DA86                		add.l	d6,d5			; Next line
(1) 1535/     A3E : 60BC                		bra.s	.newjump
(1) 1536/     A40 :                     
(1) 1537/     A40 :                     	; Set print values
(1) 1538/     A40 :                     .isbyte:
(1) 1539/     A40 : 2AC4                		move.l	d4,(a5)+
(1) 1540/     A42 : 3AFC 0001           		move.w	#1,(a5)+
(1) 1541/     A46 : 0684 0004 0000      		addi.l	#$40000,d4
(1) 1542/     A4C : 2D44 0004           		move.l	d4,4(a6)
(1) 1543/     A50 : 60B0                		bra	.loop
(1) 1544/     A52 :                     .isword:
(1) 1545/     A52 : 2AC4                		move.l	d4,(a5)+
(1) 1546/     A54 : 3AFC 0002           		move.w	#2,(a5)+
(1) 1547/     A58 : 0684 0008 0000      		addi.l	#$80000,d4
(1) 1548/     A5E : 2D44 0004           		move.l	d4,4(a6)
(1) 1549/     A62 : 609E                		bra	.loop
(1) 1550/     A64 :                     .islong:
(1) 1551/     A64 : 2AC4                		move.l	d4,(a5)+
(1) 1552/     A66 : 3AFC 0003           		move.w	#3,(a5)+
(1) 1553/     A6A : 0684 0010 0000      		addi.l	#$100000,d4
(1) 1554/     A70 : 2D44 0004           		move.l	d4,4(a6)
(1) 1555/     A74 : 608C                		bra	.loop
(1) 1556/     A76 :                     .exit:
(1) 1557/     A76 :                     
(1) 1558/     A76 :                     	; ----------------------------------------
(1) 1559/     A76 :                     	; Print values
(1) 1560/     A76 :                     	;
(1) 1561/     A76 :                     	; vvvv vvvv tttt
(1) 1562/     A76 :                     	; v - vdp pos
(1) 1563/     A76 :                     	; t - value type
(1) 1564/     A76 :                     	; ----------------------------------------
(1) 1565/     A76 :                     
(1) 1566/     A76 :                     	; reading byte by byte because longs doesn't get
(1) 1567/     A76 :                     	; aligned after $00...
(1) 1568/     A76 :                     
(1) 1569/     A76 : 7800                		moveq	#0,d4
(1) 1570/     A78 : 7A00                		moveq	#0,d5
(1) 1571/     A7A : 7C00                		moveq	#0,d6
(1) 1572/     A7C : 4BF8 BC54           		lea	(RAM_VidPrntList).w,a5
(1) 1573/     A80 :                     .nextv:
(1) 1574/     A80 : 4A95                		tst.l	(a5)
(1) 1575/     A82 : 6700 009E           		beq	.nothing
(1) 1576/     A86 :                     
(1) 1577/     A86 :                     	; grab value
(1) 1578/     A86 : 7800                		moveq	#0,d4
(1) 1579/     A88 : 1818                		move.b	(a0)+,d4
(1) 1580/     A8A : E19C                		rol.l	#8,d4
(1) 1581/     A8C : 1818                		move.b	(a0)+,d4
(1) 1582/     A8E : E19C                		rol.l	#8,d4
(1) 1583/     A90 : 1818                		move.b	(a0)+,d4
(1) 1584/     A92 : E19C                		rol.l	#8,d4
(1) 1585/     A94 : 1818                		move.b	(a0)+,d4
(1) 1586/     A96 : 2844                		movea.l	d4,a4
(1) 1587/     A98 : 7800                		moveq	#0,d4
(1) 1588/     A9A :                     
(1) 1589/     A9A :                     	; get value
(1) 1590/     A9A : 3C2D 0004           		move.w	4(a5),d6
(1) 1591/     A9E : 0C46 0001           		cmpi.w	#1,d6		; byte?
(1) 1592/     AA2 : 660E                		bne.s	.vbyte
(1) 1593/     AA4 : 1814                		move.b	(a4),d4
(1) 1594/     AA6 : 2D55 0004           		move.l	(a5),4(a6)
(1) 1595/     AAA : E91C                		rol.b	#4,d4
(1) 1596/     AAC : 6158                		bsr.s	.donibl
(1) 1597/     AAE : E91C                		rol.b	#4,d4
(1) 1598/     AB0 : 6154                		bsr.s	.donibl
(1) 1599/     AB2 :                     .vbyte:
(1) 1600/     AB2 : 0C46 0002           		cmpi.w	#2,d6		; word?
(1) 1601/     AB6 : 661C                		bne.s	.vword
(1) 1602/     AB8 : 1814                		move.b	(a4),d4
(1) 1603/     ABA : E15C                		rol.w	#8,d4
(1) 1604/     ABC : 182C 0001           		move.b	1(a4),d4
(1) 1605/     AC0 : 2D55 0004           		move.l	(a5),4(a6)
(1) 1606/     AC4 : E95C                		rol.w	#4,d4
(1) 1607/     AC6 : 613E                		bsr.s	.donibl
(1) 1608/     AC8 : E95C                		rol.w	#4,d4
(1) 1609/     ACA : 613A                		bsr.s	.donibl
(1) 1610/     ACC : E95C                		rol.w	#4,d4
(1) 1611/     ACE : 6136                		bsr.s	.donibl
(1) 1612/     AD0 : E95C                		rol.w	#4,d4
(1) 1613/     AD2 : 6132                		bsr.s	.donibl
(1) 1614/     AD4 :                     .vword:
(1) 1615/     AD4 : 0C46 0003           		cmpi.w	#3,d6		; long?
(1) 1616/     AD8 : 6624                		bne.s	.vlong
(1) 1617/     ADA : 1814                		move.b	(a4),d4
(1) 1618/     ADC : E19C                		rol.l	#8,d4
(1) 1619/     ADE : 182C 0001           		move.b	1(a4),d4
(1) 1620/     AE2 : E19C                		rol.l	#8,d4
(1) 1621/     AE4 : 182C 0002           		move.b	2(a4),d4
(1) 1622/     AE8 : E19C                		rol.l	#8,d4
(1) 1623/     AEA : 182C 0003           		move.b	3(a4),d4
(1) 1624/     AEE : 2D55 0004           		move.l	(a5),4(a6)
(1) 1625/     AF2 : 3C3C 0007           		move.w	#7,d6
(1) 1626/     AF6 : E99C                .lngloop:	rol.l	#4,d4
(1) 1627/     AF8 : 610C                		bsr.s	.donibl
(1) 1628/     AFA : 51CE FFFA           		dbf	d6,.lngloop
(1) 1629/     AFE :                     .vlong:
(1) 1630/     AFE : 429D                		clr.l	(a5)+
(1) 1631/     B00 : 425D                		clr.w	(a5)+
(1) 1632/     B02 : 6000 FF7C           		bra	.nextv
(1) 1633/     B06 :                     
(1) 1634/     B06 :                     ; make nibble byte
(1) 1635/     B06 :                     .donibl:
(1) 1636/     B06 : 3A04                		move.w	d4,d5
(1) 1637/     B08 : 0245 000F           		andi.w	#%1111,d5
(1) 1638/     B0C : 0C05 000A           		cmpi.b	#$A,d5
(1) 1639/     B10 : 6D04                		blt.s	.lowr
(1) 1640/     B12 : DA3C 0007           		add.b	#7,d5
(1) 1641/     B16 :                     .lowr:
(1) 1642/     B16 : DA7C 0030           		add.w	#"0",d5
(1) 1643/     B1A : DA78 BDE2           		add.w	(RAM_VidPrntVram).w,d5
(1) 1644/     B1E : 3C85                		move.w	d5,(a6)
(1) 1645/     B20 : 4E75                		rts
(1) 1646/     B22 :                     ; exit
(1) 1647/     B22 :                     .nothing:
(1) 1648/     B22 : 4CDF 70F0           		movem.l	(sp)+,d4-d7/a4-a6
(1) 1649/     B26 : 4E75                		rts
(1) 1650/     B28 :                     
(1) 1651/     B28 :                     ; ------------------------------------------------
(1) 1652/     B28 :                     ; Shared: pick layer / x pos / y pos and set size
(1) 1653/     B28 :                     ;
(1) 1654/     B28 :                     ; Input:
(1) 1655/     B28 :                     ; d0.l - locate(layer,x,y)
(1) 1656/     B28 :                     ;
(1) 1657/     B28 :                     ; Returns:
(1) 1658/     B28 :                     ; d5 - VRAM position
(1) 1659/     B28 :                     ; d6 - Width
(1) 1660/     B28 :                     ; ------------------------------------------------
(1) 1661/     B28 :                     
(1) 1662/     B28 :                     vid_PickLayer:
(1) 1663/     B28 : 2C00                		move.l	d0,d6			; d6 - pick layer
(1) 1664/     B2A : 4846                		swap	d6
(1) 1665/     B2C : 0806 0000           		btst	#0,d6
(1) 1666/     B30 : 671C                		beq.s	.plawnd
(1) 1667/     B32 : 1A38 BDFA           		move.b	(RAM_VdpRegs+4).w,d5	; BG
(1) 1668/     B36 : 3805                		move.w	d5,d4
(1) 1669/     B38 : E24C                		lsr.w	#1,d4
(1) 1670/     B3A : 0244 0003           		andi.w	#%11,d4
(1) 1671/     B3E : 4845                		swap	d5
(1) 1672/     B40 : 3A04                		move.w	d4,d5
(1) 1673/     B42 : 4845                		swap	d5
(1) 1674/     B44 : 0245 0001           		andi.w	#1,d5
(1) 1675/     B48 : E14D                		lsl.w	#8,d5
(1) 1676/     B4A : EB4D                		lsl.w	#5,d5
(1) 1677/     B4C : 6024                		bra.s	.golyr
(1) 1678/     B4E :                     .plawnd:
(1) 1679/     B4E : 1A38 BDF8           		move.b	(RAM_VdpRegs+2).w,d5	; FG
(1) 1680/     B52 : 0806 0001           		btst	#1,d6
(1) 1681/     B56 : 6704                		beq.s	.nowd
(1) 1682/     B58 : 1A38 BDF9           		move.b	(RAM_VdpRegs+3).w,d5	; WINDOW
(1) 1683/     B5C :                     .nowd:
(1) 1684/     B5C : 3805                		move.w	d5,d4
(1) 1685/     B5E : E84C                		lsr.w	#4,d4
(1) 1686/     B60 : 0244 0003           		andi.w	#%11,d4
(1) 1687/     B64 : 4845                		swap	d5
(1) 1688/     B66 : 3A04                		move.w	d4,d5
(1) 1689/     B68 : 4845                		swap	d5
(1) 1690/     B6A : 0245 000E           		andi.w	#%00001110,d5
(1) 1691/     B6E : E14D                		lsl.w	#8,d5
(1) 1692/     B70 : E54D                		lsl.w	#2,d5
(1) 1693/     B72 :                     .golyr:
(1) 1694/     B72 : 0045 4000           		ori.w	#$4000,d5
(1) 1695/     B76 : 3800                		move.w	d0,d4			; Y start pos
(1) 1696/     B78 : 0244 00FF           		andi.w	#$FF,d4			; Y only
(1) 1697/     B7C : ED4C                		lsl.w	#6,d4
(1) 1698/     B7E : 1C38 BE06           		move.b	(RAM_VdpRegs+$10).w,d6
(1) 1699/     B82 : 0246 0003           		andi.w	#%11,d6
(1) 1700/     B86 : 670A                		beq.s	.thissz
(1) 1701/     B88 : D844                		add.w	d4,d4			; H64
(1) 1702/     B8A : 0246 0002           		andi.w	#%10,d6
(1) 1703/     B8E : 6702                		beq.s	.thissz
(1) 1704/     B90 : D844                		add.w	d4,d4			; H128
(1) 1705/     B92 :                     .thissz:
(1) 1706/     B92 : DA44                		add.w	d4,d5
(1) 1707/     B94 : 3800                		move.w	d0,d4
(1) 1708/     B96 : 0244 FF00           		andi.w	#$FF00,d4		; X only
(1) 1709/     B9A : EE4C                		lsr.w	#7,d4
(1) 1710/     B9C : DA44                		add.w	d4,d5			; X add
(1) 1711/     B9E : 4845                		swap	d5
(1) 1712/     BA0 : 7C00                		moveq	#0,d6
(1) 1713/     BA2 : 3C3C 0040           		move.w	#$40,d6			; Set jump size
(1) 1714/     BA6 : 1838 BE06           		move.b	(RAM_VdpRegs+$10).w,d4
(1) 1715/     BAA : 0244 0003           		andi.w	#%11,d4
(1) 1716/     BAE : 670A                		beq.s	.thisszj
(1) 1717/     BB0 : DC46                		add.w	d6,d6			; H64
(1) 1718/     BB2 : 0244 0002           		andi.w	#%10,d4
(1) 1719/     BB6 : 6702                		beq.s	.thisszj
(1) 1720/     BB8 : DC46                		add.w	d6,d6			; H128
(1) 1721/     BBA :                     .thisszj:
(1) 1722/     BBA : 4846                		swap	d6
(1) 1723/     BBC : 4E75                		rts
(1) 1724/     BBE :                     
(1) 1725/     BBE :                     ; ====================================================================
(1) 1726/     BBE :                     ; ----------------------------------------------------------------
(1) 1727/     BBE :                     ; Objects system
(1) 1728/     BBE :                     ; ----------------------------------------------------------------
(1) 1729/     BBE :                     
(1) 1730/     BBE :                     ; --------------------------------------------------------
(1) 1731/     BBE :                     ; Init objects system
(1) 1732/     BBE :                     ; --------------------------------------------------------
(1) 1733/     BBE :                     
(1) 1734/     BBE :                     Objects_Clear:
(1) 1735/     BBE : 4DF8 B294           		lea	(RAM_Objects).w,a6
(1) 1736/     BC2 : 3E3C 098F           		move.w	#(sizeof_mdobj*MAX_MDOBJ)-1,d7
(1) 1737/     BC6 :                     .clr:
(1) 1738/     BC6 : 421E                		clr.b	(a6)+
(1) 1739/     BC8 : 51CF FFFC           		dbf	d7,.clr
(1) 1740/     BCC : 4DF8 BC24           		lea	(RAM_ObjDispList).w,a6
(1) 1741/     BD0 : 3E3C 0017           		move.w	#MAX_MDOBJ-1,d7
(1) 1742/     BD4 :                     .clr_d:
(1) 1743/     BD4 : 425E                		clr.w	(a6)+
(1) 1744/     BD6 : 51CF FFFC           		dbf	d7,.clr_d
(1) 1745/     BDA : 31FC 0001 BDDA      		move.w	#1,(RAM_SprLinkNum).w
(1) 1746/     BE0 : 4278 BDD8           		clr.w	(RAM_SprDrwCntr).w
(1) 1747/     BE4 : 4E75                		rts
(1) 1748/     BE6 :                     
(1) 1749/     BE6 :                     ; --------------------------------------------------------
(1) 1750/     BE6 :                     ; Process objects
(1) 1751/     BE6 :                     ; --------------------------------------------------------
(1) 1752/     BE6 :                     
(1) 1753/     BE6 :                     Objects_Run:
(1) 1754/     BE6 : 4DF8 B294           		lea	(RAM_Objects).w,a6
(1) 1755/     BEA : 3E3C 0017           		move.w	#MAX_MDOBJ-1,d7
(1) 1756/     BEE :                     .next_one:
(1) 1757/     BEE : 2C16                		move.l	obj_code(a6),d6
(1) 1758/     BF0 : 6708                		beq.s	.no_code	; Free slot
(1) 1759/     BF2 : 2F07                		move.l	d7,-(sp)
(1) 1760/     BF4 : 2A46                		move.l	d6,a5
(1) 1761/     BF6 : 4E95                		jsr	(a5)
(1) 1762/     BF8 : 2E1F                		move.l	(sp)+,d7
(1) 1763/     BFA :                     .no_code:
(1) 1764/     BFA : DCFC 0066           		adda	#sizeof_mdobj,a6
(1) 1765/     BFE : 51CF FFEE           		dbf	d7,.next_one
(1) 1766/     C02 : 4E75                		rts
(1) 1767/     C04 :                     
(1) 1768/     C04 :                     ; --------------------------------------------------------
(1) 1769/     C04 :                     ; Objects_Set
(1) 1770/     C04 :                     ;
(1) 1771/     C04 :                     ; Input:
(1) 1772/     C04 :                     ; d0 - Object code location (0 - delete)
(1) 1773/     C04 :                     ; d1 - Object slot
(1) 1774/     C04 :                     ;
(1) 1775/     C04 :                     ; Uses:
(1) 1776/     C04 :                     ; d7,a5-a6
(1) 1777/     C04 :                     ; --------------------------------------------------------
(1) 1778/     C04 :                     
(1) 1779/     C04 :                     Objects_Set:
(1) 1780/     C04 : 4DF8 B294           		lea	(RAM_Objects).w,a6
(1) 1781/     C08 : 2A4E                		move.l	a6,a5
(1) 1782/     C0A : 3E3C 0065           		move.w	#sizeof_mdobj-1,d7
(1) 1783/     C0E :                     .clr:
(1) 1784/     C0E : 421D                		clr.b	(a5)+
(1) 1785/     C10 : 51CF FFFC           		dbf	d7,.clr
(1) 1786/     C14 : 3E01                		move.w	d1,d7
(1) 1787/     C16 : CEFC 0066           		mulu.w	#sizeof_mdobj,d7
(1) 1788/     C1A : DCC7                		adda	d7,a6
(1) 1789/     C1C : 2C80                		move.l	d0,obj_code(a6)
(1) 1790/     C1E : 4DF8 BC24           		lea	(RAM_ObjDispList).w,a6
(1) 1791/     C22 : 3E01                		move.w	d1,d7
(1) 1792/     C24 : DE47                		add.w	d7,d7
(1) 1793/     C26 : 3DBC 0000 7000      		move.w	#0,(a6,d7.w)
(1) 1794/     C2C : 4E75                		rts
(1) 1795/     C2E :                     
(1) 1796/     C2E :                     ; --------------------------------------------------------
(1) 1797/     C2E :                     ; Objects_Add
(1) 1798/     C2E :                     ;
(1) 1799/     C2E :                     ; Returns:
(1) 1800/     C2E :                     ; d0 - -1 if ran out of Objects
(1) 1801/     C2E :                     ; --------------------------------------------------------
(1) 1802/     C2E :                     
(1) 1803/     C2E :                     Objects_Add:
(1) 1804/     C2E : 4DF8 B294           		lea	(RAM_Objects).w,a6
(1) 1805/     C32 : 3E3C 0017           		move.w	#MAX_MDOBJ-1,d7
(1) 1806/     C36 :                     .search:
(1) 1807/     C36 : 2E16                		move.l	obj_code(a6),d7
(1) 1808/     C38 : 670C                		beq.s	.use_it
(1) 1809/     C3A : DCFC 0066           		adda	#sizeof_mdobj,a6
(1) 1810/     C3E : 51CF FFF6           		dbf	d7,.search
(1) 1811/     C42 : 70FF                		moveq	#-1,d0		; Return ran-out flag
(1) 1812/     C44 : 4E75                		rts
(1) 1813/     C46 :                     .use_it:
(1) 1814/     C46 : 2A4E                		move.l	a6,a5
(1) 1815/     C48 : 3E3C 0065           		move.w	#sizeof_mdobj-1,d7
(1) 1816/     C4C :                     .clr:
(1) 1817/     C4C : 421D                		clr.b	(a5)+
(1) 1818/     C4E : 51CF FFFC           		dbf	d7,.clr
(1) 1819/     C52 : 2C80                		move.l	d0,obj_code(a6)
(1) 1820/     C54 : 4DF8 BC24           		lea	(RAM_ObjDispList).w,a6
(1) 1821/     C58 : 3E01                		move.w	d1,d7
(1) 1822/     C5A : DE47                		add.w	d7,d7
(1) 1823/     C5C : 3DBC 0000 7000      		move.w	#0,(a6,d7.w)
(1) 1824/     C62 : 4E75                		rts
(1) 1825/     C64 :                     
(1) 1826/     C64 :                     ; --------------------------------------------------------
(1) 1827/     C64 :                     ; Draw ALL Objects from display list
(1) 1828/     C64 :                     ;
(1) 1829/     C64 :                     ; Call this BEFORE VBlank.
(1) 1830/     C64 :                     ; --------------------------------------------------------
(1) 1831/     C64 :                     
(1) 1832/     C64 :                     Objects_Show:
(1) 1833/     C64 : 3C38 BDDA           		move.w	(RAM_SprLinkNum).w,d6		; d6 - Starting sprite link
(1) 1834/     C68 : 4DF8 A414           		lea	(RAM_Sprites),a6		; a6 - Genesis sprites
(1) 1835/     C6C : 3E06                		move.w	d6,d7
(1) 1836/     C6E : 5347                		subq.w	#1,d7
(1) 1837/     C70 : E74F                		lsl.w	#3,d7
(1) 1838/     C72 : DCC7                		adda	d7,a6
(1) 1839/     C74 :                     
(1) 1840/     C74 : 3E38 BDD8           		move.w	(RAM_SprDrwCntr),d7
(1) 1841/     C78 : 6732                		beq.s	.no_sprdrw
(1) 1842/     C7A : 4278 BDD8           		clr.w	(RAM_SprDrwCntr).w
(1) 1843/     C7E : 4BF8 A914           		lea	(RAM_SprDrwPz),a5
(1) 1844/     C82 : 9E7C 0001           		sub.w	#1,d7
(1) 1845/     C86 :                     .nexts:
(1) 1846/     C86 : BC7C 0050           		cmp.w	#80,d6
(1) 1847/     C8A : 6C20                		bge.s	.no_sprdrw
(1) 1848/     C8C : 301D                		move.w	(a5)+,d0
(1) 1849/     C8E : 321D                		move.w	(a5)+,d1	; custom
(1) 1850/     C90 : C27C 00FF           		and.w	#$FF,d1
(1) 1851/     C94 : E149                		lsl.w	#8,d1
(1) 1852/     C96 : 8246                		or.w	d6,d1
(1) 1853/     C98 : 341D                		move.w	(a5)+,d2
(1) 1854/     C9A : 361D                		move.w	(a5)+,d3
(1) 1855/     C9C : 3CC0                		move.w	d0,(a6)+
(1) 1856/     C9E : 3CC1                		move.w	d1,(a6)+
(1) 1857/     CA0 : 3CC2                		move.w	d2,(a6)+
(1) 1858/     CA2 : 3CC3                		move.w	d3,(a6)+
(1) 1859/     CA4 : DC7C 0001           		add.w	#1,d6
(1) 1860/     CA8 : 51CF FFDC           		dbf	d7,.nexts
(1) 1861/     CAC :                     .no_sprdrw:
(1) 1862/     CAC :                     
(1) 1863/     CAC :                     ; 		move.w	(RAM_SprLinkNum).w,d6	; d6 - Starting sprite link
(1) 1864/     CAC :                     ; 		lea	(RAM_Sprites).w,a6	; a6 - Genesis sprites
(1) 1865/     CAC : 4BF8 BC24           		lea	(RAM_ObjDispList).w,a5
(1) 1866/     CB0 : 3E3C 0017           		move.w	#MAX_MDOBJ-1,d7
(1) 1867/     CB4 :                     .next:
(1) 1868/     CB4 : 3015                		move.w	(a5),d0
(1) 1869/     CB6 : 6700 00AC           		beq	.finish
(1) 1870/     CBA : 4255                		clr.w	(a5)
(1) 1871/     CBC : 72FF                		moveq	#-1,d1			; Write the $FFFFxxxx part
(1) 1872/     CBE : 3200                		move.w	d0,d1			; get the half-address
(1) 1873/     CC0 : 2841                		move.l	d1,a4			; set to a4
(1) 1874/     CC2 : 206C 000C           		move.l	obj_map(a4),a0		; Read this object's map
(1) 1875/     CC6 : 302C 001E           		move.w	obj_frame(a4),d0
(1) 1876/     CCA : 182C 0022           		move.b	obj_set(a4),d4
(1) 1877/     CCE : D040                		add.w	d0,d0
(1) 1878/     CD0 : 3030 0000           		move.w	(a0,d0.w),d0
(1) 1879/     CD4 : 41F0 0000           		lea	(a0,d0.w),a0
(1) 1880/     CD8 : 3A18                		move.w	(a0)+,d5
(1) 1881/     CDA : 6700 0082           		beq	.mk_spr
(1) 1882/     CDE : 0445 0001           		subi.w	#1,d5
(1) 1883/     CE2 :                     .mk_pz:
(1) 1884/     CE2 : 0C46 0050           		cmpi.w	#80,d6
(1) 1885/     CE6 : 6E00 009A           		bgt	.ran_out
(1) 1886/     CEA : 4845                		swap	d5
(1) 1887/     CEC : 4846                		swap	d6
(1) 1888/     CEE : 1018                		move.b	(a0)+,d0		; d0 - Y pos
(1) 1889/     CF0 : 1218                		move.b	(a0)+,d1		; d1 - Size
(1) 1890/     CF2 : 3418                		move.w	(a0)+,d2		; d2 - VRAM main
(1) 1891/     CF4 : D0FC 0002           		adda	#2,a0			; TODO: VRAM double later
(1) 1892/     CF8 : 3618                		move.w	(a0)+,d3		; d3 - X pos
(1) 1893/     CFA : 4880                		ext.w	d0
(1) 1894/     CFC :                     
(1) 1895/     CFC :                     	; X/Y flip checks
(1) 1896/     CFC : 3A2C 0014           		move.w	obj_vram(a4),d5
(1) 1897/     D00 : 0804 0001           		btst	#bitobj_flipV,d4
(1) 1898/     D04 : 6714                		beq.s	.vram_v
(1) 1899/     D06 : 4440                		neg.w	d0
(1) 1900/     D08 : 0440 0008           		subi.w	#8,d0
(1) 1901/     D0C : 3C01                		move.w	d1,d6
(1) 1902/     D0E : 0246 0003           		andi.w	#%0011,d6
(1) 1903/     D12 : E74E                		lsl.w	#3,d6
(1) 1904/     D14 : 9046                		sub.w	d6,d0
(1) 1905/     D16 : 0045 1000           		ori.w	#$1000,d5
(1) 1906/     D1A :                     .vram_v:
(1) 1907/     D1A : 0804 0000           		btst	#bitobj_flipH,d4
(1) 1908/     D1E : 6714                		beq.s	.vram_h
(1) 1909/     D20 : 4443                		neg.w	d3
(1) 1910/     D22 : 0443 0008           		subi.w	#8,d3
(1) 1911/     D26 : 3C01                		move.w	d1,d6
(1) 1912/     D28 : 0246 000C           		andi.w	#%1100,d6
(1) 1913/     D2C : DC46                		add.w	d6,d6
(1) 1914/     D2E : 9646                		sub.w	d6,d3
(1) 1915/     D30 : 0045 0800           		ori.w	#$0800,d5
(1) 1916/     D34 :                     .vram_h:
(1) 1917/     D34 : D445                		add.w	d5,d2
(1) 1918/     D36 : D06C 0008           		add.w	obj_y(a4),d0
(1) 1919/     D3A : D66C 0004           		add.w	obj_x(a4),d3
(1) 1920/     D3E : D07C 0080           		add.w	#$80,d0
(1) 1921/     D42 : D67C 0080           		add.w	#$80,d3
(1) 1922/     D46 : 4846                		swap	d6
(1) 1923/     D48 : E149                		lsl.w	#8,d1			; Size + Link
(1) 1924/     D4A : 8246                		or.w	d6,d1
(1) 1925/     D4C : 3CC0                		move.w	d0,(a6)+
(1) 1926/     D4E : 3CC1                		move.w	d1,(a6)+
(1) 1927/     D50 : 3CC2                		move.w	d2,(a6)+
(1) 1928/     D52 : 3CC3                		move.w	d3,(a6)+
(1) 1929/     D54 : DC7C 0001           		add.w	#1,d6
(1) 1930/     D58 : 4845                		swap	d5
(1) 1931/     D5A : 51CD FF86           		dbf	d5,.mk_pz
(1) 1932/     D5E :                     .mk_spr:
(1) 1933/     D5E : 425D                		clr.w	(a5)+			; Clear request
(1) 1934/     D60 : 51CF FF52           		dbf	d7,.next
(1) 1935/     D64 :                     .finish:
(1) 1936/     D64 : 4DF8 A414           		lea	(RAM_Sprites).w,a6
(1) 1937/     D68 : 0C46 0001           		cmpi.w	#1,d6
(1) 1938/     D6C : 6714                		beq.s	.ran_out
(1) 1939/     D6E : 0C46 0050           		cmpi.w	#80,d6
(1) 1940/     D72 : 6E0E                		bgt.s	.ran_out
(1) 1941/     D74 : 3E06                		move.w	d6,d7
(1) 1942/     D76 : 0447 0001           		subi.w	#1,d7
(1) 1943/     D7A : E74F                		lsl.w	#3,d7
(1) 1944/     D7C : DCC7                		adda	d7,a6
(1) 1945/     D7E : 429E                		clr.l	(a6)+
(1) 1946/     D80 : 429E                		clr.l	(a6)+
(1) 1947/     D82 :                     .ran_out:
(1) 1948/     D82 : 31C6 BDDA           		move.w	d6,(RAM_SprLinkNum).w
(1) 1949/     D86 : 4E75                		rts
(1) 1950/     D88 :                     
(1) 1951/     D88 :                     ; --------------------------------------------------------
(1) 1952/     D88 :                     ; Objects system subroutines
(1) 1953/     D88 :                     ; --------------------------------------------------------
(1) 1954/     D88 :                     
(1) 1955/     D88 :                     ; --------------------------------------------------------
(1) 1956/     D88 :                     ; obj_Display
(1) 1957/     D88 :                     ;
(1) 1958/     D88 :                     ; Builds a sprite using map data specified in
(1) 1959/     D88 :                     ; obj_map(a6)
(1) 1960/     D88 :                     ;
(1) 1961/     D88 :                     ; *** GENESIS map ***
(1) 1962/     D88 :                     ; mapdata:
(1) 1963/     D88 :                     ;       dc.w .frame0-mapdata
(1) 1964/     D88 :                     ;       dc.w .frame1-mapdata
(1) 1965/     D88 :                     ;       ...
(1) 1966/     D88 :                     ; .frame0:
(1) 1967/     D88 :                     ;       dc.w numofpz
(1) 1968/     D88 :                     ;       dc.b YY,SS
(1) 1969/     D88 :                     ;       dc.w vram_normal
(1) 1970/     D88 :                     ;       dc.w vram_half
(1) 1971/     D88 :                     ;       dc.w XXXX
(1) 1972/     D88 :                     ;       ; next frame
(1) 1973/     D88 :                     ;       align 2
(1) 1974/     D88 :                     ;
(1) 1975/     D88 :                     ; *** 32X map ***
(1) 1976/     D88 :                     ; mapdata:
(1) 1977/     D88 :                     ; 	dc.l SH2_ADDR|TH ; Spritesheet location (TH opt.)
(1) 1978/     D88 :                     ; 	dc.w 512	 ; Spritesheet WIDTH
(1) 1979/     D88 :                     ; 	dc.b 64,72	 ; Frame width and height
(1) 1980/     D88 :                     ; 	dc.w $80	 ; Palette index
(1) 1981/     D88 :                     ;
(1) 1982/     D88 :                     ; obj_frame(a6) is in YYXX direction
(1) 1983/     D88 :                     ;
(1) 1984/     D88 :                     ; Input:
(1) 1985/     D88 :                     ; a6 - Object
(1) 1986/     D88 :                     ;
(1) 1987/     D88 :                     ; Uses:
(1) 1988/     D88 :                     ; a5,d4-d7
(1) 1989/     D88 :                     ; --------------------------------------------------------
(1) 1990/     D88 :                     
(1) 1991/     D88 :                     object_Display:
(1) 1992/     D88 : 4BF8 BC24           		lea	(RAM_ObjDispList).w,a5
(1) 1993/     D8C : 3E3C 0017           		move.w	#MAX_MDOBJ-1,d7
(1) 1994/     D90 :                     .srch:
(1) 1995/     D90 : 4A55                		tst.w	(a5)
(1) 1996/     D92 : 6708                		beq.s	.this_one
(1) 1997/     D94 : DAFC 0002           		adda	#2,a5
(1) 1998/     D98 : 51CF FFF6           		dbf	d7,.srch
(1) 1999/     D9C :                     .this_one:
(1) 2000/     D9C : 3A8E                		move.w	a6,(a5)
(1) 2001/     D9E : 4AAE 0010           		tst.l	obj_dma(a6)
(1) 2002/     DA2 : 6750                		beq.s	.no_dma
(1) 2003/     DA4 : 206E 0010           		move.l	obj_dma(a6),a0
(1) 2004/     DA8 : 2618                		move.l	(a0)+,d3		; d3 - Art data
(1) 2005/     DAA : 382E 001E           		move.w	obj_frame(a6),d4
(1) 2006/     DAE : D844                 		add.w	d4,d4
(1) 2007/     DB0 : 3830 4000           		move.w	(a0,d4.w),d4
(1) 2008/     DB4 : D0C4                 		adda	d4,a0
(1) 2009/     DB6 : 7800                 		moveq	#0,d4
(1) 2010/     DB8 : 3818                 		move.w	(a0)+,d4
(1) 2011/     DBA : 6738                 		beq.s	.no_dma
(1) 2012/     DBC : 5344                 		subq.w	#1,d4
(1) 2013/     DBE : 322E 0014           		move.w	obj_vram(a6),d1
(1) 2014/     DC2 : 0241 07FF           		andi.w	#$7FF,d1
(1) 2015/     DC6 : EB49                		lsl.w	#5,d1
(1) 2016/     DC8 : 2F0E                		move.l	a6,-(sp)		; SAVE a6
(1) 2017/     DCA :                     .next_pz:
(1) 2018/     DCA : 4844                		swap	d4
(1) 2019/     DCC : 3818                		move.w	(a0)+,d4
(1) 2020/     DCE : 3404                		move.w	d4,d2
(1) 2021/     DD0 : EE4A                		lsr.w	#7,d2
(1) 2022/     DD2 : 0242 01E0           		andi.w	#$1E0,d2
(1) 2023/     DD6 : D47C 0020           		add.w	#$20,d2
(1) 2024/     DDA : 7000                		moveq	#0,d0
(1) 2025/     DDC : 3004                		move.w	d4,d0
(1) 2026/     DDE : 0240 0FFF           		andi.w	#$FFF,d0
(1) 2027/     DE2 : EB48                		lsl.w	#5,d0
(1) 2028/     DE4 : D083                		add.l	d3,d0
(1) 2029/     DE6 : 6100 F836           		bsr	Video_DmaMkEntry	; kills a6
(1) 2030/     DEA : D242                		add.w	d2,d1
(1) 2031/     DEC : 4844                		swap	d4
(1) 2032/     DEE : 51CC FFDA           		dbf	d4,.next_pz
(1) 2033/     DF2 : 2C5F                		move.l	(sp)+,a6
(1) 2034/     DF4 :                     .no_dma:
(1) 2035/     DF4 : 4E75                		rts
(1) 2036/     DF6 :                     
(1) 2037/     DF6 :                     ; --------------------------------------------------------
(1) 2038/     DF6 :                     ; object_MkSprPz
(1) 2039/     DF6 :                     ;
(1) 2040/     DF6 :                     ; Makes separate sprite pieces using
(1) 2041/     DF6 :                     ;
(1) 2042/     DF6 :                     ; Input:
(1) 2043/     DF6 :                     ; d0 - X pos
(1) 2044/     DF6 :                     ; d1 - Y pos
(1) 2045/     DF6 :                     ; d2 - VRAM
(1) 2046/     DF6 :                     ; d3 - Size
(1) 2047/     DF6 :                     :
(1) 2048/     DF6 :                     ; Uses:
(1) 2049/     DF6 :                     ; a5,d7
(1) 2050/     DF6 :                     ; --------------------------------------------------------
(1) 2051/     DF6 :                     
(1) 2052/     DF6 :                     object_MkSprPz:
(1) 2053/     DF6 : 3E38 BDD8           		move.w	(RAM_SprDrwCntr).w,d7
(1) 2054/     DFA : BE7C 0050           		cmp.w	#80,d7
(1) 2055/     DFE : 6C22                		bge.s	.nope
(1) 2056/     E00 : E74F                		lsl.w	#3,d7
(1) 2057/     E02 : 4BF8 A914           		lea	(RAM_SprDrwPz).w,a5
(1) 2058/     E06 : DAC7                		adda	d7,a5
(1) 2059/     E08 : D07C 0080           		add.w	#$80,d0
(1) 2060/     E0C : D27C 0080           		add.w	#$80,d1
(1) 2061/     E10 : C67C 00FF           		and.w	#$FF,d3
(1) 2062/     E14 :                     ; 		lsl.w	#8,d3
(1) 2063/     E14 : 3AC1                		move.w	d1,(a5)+
(1) 2064/     E16 : 3AC3                		move.w	d3,(a5)+
(1) 2065/     E18 : 3AC2                		move.w	d2,(a5)+
(1) 2066/     E1A : 3AC0                		move.w	d0,(a5)+
(1) 2067/     E1C : 0678 0001 BDD8      		add.w	#1,(RAM_SprDrwCntr).w
(1) 2068/     E22 :                     .nope:
(1) 2069/     E22 : 4E75                		rts
(1) 2070/     E24 :                     
(1) 2071/     E24 :                     ; --------------------------------------------------------
(1) 2072/     E24 :                     ; object_Animate
(1) 2073/     E24 :                     ;
(1) 2074/     E24 :                     ; Animates the sprite
(1) 2075/     E24 :                     ;
(1) 2076/     E24 :                     ; Input
(1) 2077/     E24 :                     ; a0.l - Animation data
(1) 2078/     E24 :                     ;
(1) 2079/     E24 :                     ; Uses:
(1) 2080/     E24 :                     ; d2
(1) 2081/     E24 :                     ; --------------------------------------------------------
(1) 2082/     E24 :                     
(1) 2083/     E24 :                     object_Animate:
(1) 2084/     E24 : 7E00                		moveq	#0,d7
(1) 2085/     E26 : 1E2E 001D            		move.b	obj_anim_id+1(a6),d7
(1) 2086/     E2A : BE2E 001C            		cmp.b	obj_anim_id(a6),d7
(1) 2087/     E2E : 670E                 		beq.s	.sameThing
(1) 2088/     E30 : 1D6E 001C 001D       		move.b	obj_anim_id(a6),obj_anim_id+1(a6)
(1) 2089/     E36 : 426E 001A            		clr.w	obj_anim_indx(a6)
(1) 2090/     E3A : 422E 0020            		clr.b	obj_anim_spd(a6)
(1) 2091/     E3E :                     .sameThing:
(1) 2092/     E3E : 1E2E 001C            		move.b	obj_anim_id(a6),d7
(1) 2093/     E42 : 0C07 00FF            		cmpi.b	#-1,d7
(1) 2094/     E46 : 6748                 		beq.s	.return
(1) 2095/     E48 : DE47                 		add.w	d7,d7
(1) 2096/     E4A : 3E30 7000            		move.w	(a0,d7.w),d7
(1) 2097/     E4E : 41F0 7000            		lea	(a0,d7.w),a0
(1) 2098/     E52 : 3E18                 		move.w	(a0)+,d7
(1) 2099/     E54 : 0C47 FFFF            		cmpi.w	#-1,d7
(1) 2100/     E58 : 670C                 		beq.s	.keepspd
(1) 2101/     E5A : 042E 0001 0020       		subi.b	#1,obj_anim_spd(a6)
(1) 2102/     E60 : 6A2E                 		bpl.s	.return
(1) 2103/     E62 : 1D47 0020           		move.b	d7,obj_anim_spd(a6)
(1) 2104/     E66 :                     .keepspd:
(1) 2105/     E66 : 7C00                 		moveq	#0,d6
(1) 2106/     E68 : 3E2E 001A            		move.w	obj_anim_indx(a6),d7
(1) 2107/     E6C : DE47                 		add.w	d7,d7
(1) 2108/     E6E : 3C10                 		move.w	(a0),d6
(1) 2109/     E70 : D0C7                 		adda	d7,a0
(1) 2110/     E72 : 3A10                 		move.w	(a0),d5
(1) 2111/     E74 : 0C45 FFFF            		cmpi.w	#-1,d5
(1) 2112/     E78 : 6718                 		beq.s	.noAnim		; loop
(1) 2113/     E7A : 0C45 FFFE            		cmpi.w	#-2,d5
(1) 2114/     E7E : 672A                 		beq.s	.lastFrame	; finish
(1) 2115/     E80 : 0C45 FFFD            		cmpi.w	#-3,d5
(1) 2116/     E84 : 671A                 		beq.s	.goToFrame
(1) 2117/     E86 : 3D45 001E            		move.w	d5,obj_frame(a6)
(1) 2118/     E8A : 066E 0001 001A       		add.w	#1,obj_anim_indx(a6)
(1) 2119/     E90 :                     .return:
(1) 2120/     E90 : 4E75                 		rts
(1) 2121/     E92 :                     .noAnim:
(1) 2122/     E92 : 3D7C 0001 001A       		move.w	#1,obj_anim_indx(a6)
(1) 2123/     E98 : 3A06                 		move.w	d6,d5
(1) 2124/     E9A : 3D45 001E            		move.w	d5,obj_frame(a6)
(1) 2125/     E9E : 4E75                		rts
(1) 2126/     EA0 :                     .goToFrame:
(1) 2127/     EA0 : 426E 001A           		clr.w	obj_anim_indx(a6)
(1) 2128/     EA4 : 3D68 0002 001A      		move.w	2(a0),obj_anim_indx(a6)
(1) 2129/     EAA :                     .lastFrame:
(1) 2130/     EAA : 422E 0020            		clr.b	obj_anim_spd(a6)
(1) 2131/     EAE : 4E75                		rts
(1) 2132/     EB0 :                     
(1) 2133/     EB0 :                     ; --------------------------------------------------------
(1) 2134/     EB0 :                     ; object_AnimReset
(1) 2135/     EB0 :                     ;
(1) 2136/     EB0 :                     ; Call this BEFORE using animation
(1) 2137/     EB0 :                     ;
(1) 2138/     EB0 :                     ; Input:
(1) 2139/     EB0 :                     ; a6 - Object
(1) 2140/     EB0 :                     ;
(1) 2141/     EB0 :                     ; Uses:
(1) 2142/     EB0 :                     ; d7
(1) 2143/     EB0 :                     ; --------------------------------------------------------
(1) 2144/     EB0 :                     
(1) 2145/     EB0 :                     object_AnimReset:
(1) 2146/     EB0 : 426E 001A            		clr.w	obj_anim_indx(a6)
(1) 2147/     EB4 : 422E 0020            		clr.b	obj_anim_spd(a6)
(1) 2148/     EB8 : 1D7C 0000 001D      		move.b	#0,obj_anim_id+1(a6)
(1) 2149/     EBE : 4E75                		rts
(1) 2150/     EC0 :                     
(1) 2151/     EC0 :                     ; --------------------------------------------------------
(1) 2152/     EC0 :                     ; object_Speed
(1) 2153/     EC0 :                     ;
(1) 2154/     EC0 :                     ; Moves the object using speed variables
(1) 2155/     EC0 :                     ;
(1) 2156/     EC0 :                     ; Input:
(1) 2157/     EC0 :                     ; a6 - Object
(1) 2158/     EC0 :                     ;
(1) 2159/     EC0 :                     ; Uses:
(1) 2160/     EC0 :                     ; d7
(1) 2161/     EC0 :                     ; --------------------------------------------------------
(1) 2162/     EC0 :                     
(1) 2163/     EC0 :                     object_Speed:
(1) 2164/     EC0 : 7E00                		moveq	#0,d7
(1) 2165/     EC2 : 3E2E 0016           		move.w	obj_x_spd(a6),d7
(1) 2166/     EC6 : 48C7                		ext.l	d7
(1) 2167/     EC8 : E187                		asl.l	#8,d7
(1) 2168/     ECA : DFAE 0004           		add.l	d7,obj_x(a6)
(1) 2169/     ECE : 7E00                		moveq	#0,d7
(1) 2170/     ED0 : 3E2E 0018           		move.w	obj_y_spd(a6),d7
(1) 2171/     ED4 : 48C7                		ext.l	d7
(1) 2172/     ED6 : E187                		asl.l	#8,d7
(1) 2173/     ED8 : DFAE 0008           		add.l	d7,obj_y(a6)
(1) 2174/     EDC : 4E75                		rts
(1) 2175/     EDE :                     
(1) 2176/     EDE :                     ; ====================================================================
(1) 2177/     EDE :                     ; ----------------------------------------------------------------
(1) 2178/     EDE :                     ; 32X ONLY
(1) 2179/     EDE :                     ; ----------------------------------------------------------------
(1) 2180/     EDE :                     
(1) 2285/     EDE :                     
     200/     EDE :                     		include	"system/md/system.asm"
(1)    1/     EDE :                     ; ====================================================================
(1)    2/     EDE :                     ; ----------------------------------------------------------------
(1)    3/     EDE :                     ; Genesis system routines, and some SegaCD and 32X routines.
(1)    4/     EDE :                     ;
(1)    5/     EDE :                     ; * CAN BE RECYCLED FOR SEGA PICO, ONLY IGNORE Z80 ACCESS OR
(1)    6/     EDE :                     ; THE CONTROL ROUTINE **
(1)    7/     EDE :                     ; ----------------------------------------------------------------
(1)    8/     EDE :                     
(1)    9/     EDE :                     ; ====================================================================
(1)   10/     EDE :                     ; ----------------------------------------------------------------
(1)   11/     EDE :                     ; Settings
(1)   12/     EDE :                     ; ----------------------------------------------------------------
(1)   13/     EDE :                     
(1)   14/     EDE : =$400                MAX_SRAMSIZE	equ $400
(1)   15/     EDE :                     
(1)   16/     EDE :                     ; ====================================================================
(1)   17/     EDE :                     ; ----------------------------------------------------------------
(1)   18/     EDE :                     ; Variables
(1)   19/     EDE :                     ; ----------------------------------------------------------------
(1)   20/     EDE :                     
(1)   21/     EDE :                     ; Controller buffer data, MUST call System_Input on VBlank.
(1)   22/     EDE :                     ;
(1)   23/     EDE :                     ; Type/Revision byte:
(1)   24/     EDE :                     ;
(1)   25/     EDE :                     ; ID    |
(1)   26/     EDE :                     ; $0D   | $00 - Original 3 button
(1)   27/     EDE :                     ;       | $01 - 6 button version: XYZM
(1)   28/     EDE :                     
(1)   29/     EDE :                     ; Read WORD in +on_hold or +on_press
(1)   30/     EDE : =$1                  JoyUp		equ $0001
(1)   31/     EDE : =$2                  JoyDown		equ $0002
(1)   32/     EDE : =$4                  JoyLeft		equ $0004
(1)   33/     EDE : =$8                  JoyRight	equ $0008
(1)   34/     EDE : =$10                 JoyB		equ $0010
(1)   35/     EDE : =$20                 JoyC		equ $0020
(1)   36/     EDE : =$40                 JoyA		equ $0040
(1)   37/     EDE : =$80                 JoyStart	equ $0080
(1)   38/     EDE : =$100                JoyZ		equ $0100
(1)   39/     EDE : =$200                JoyY		equ $0200
(1)   40/     EDE : =$400                JoyX		equ $0400
(1)   41/     EDE : =$800                JoyMode		equ $0800
(1)   42/     EDE : =$0                  bitJoyUp	equ 0		; READ THESE AS A WORD
(1)   43/     EDE : =$1                  bitJoyDown	equ 1
(1)   44/     EDE : =$2                  bitJoyLeft	equ 2
(1)   45/     EDE : =$3                  bitJoyRight	equ 3
(1)   46/     EDE : =$4                  bitJoyB		equ 4
(1)   47/     EDE : =$5                  bitJoyC		equ 5
(1)   48/     EDE : =$6                  bitJoyA		equ 6
(1)   49/     EDE : =$7                  bitJoyStart	equ 7
(1)   50/     EDE : =$8                  bitJoyZ		equ 8
(1)   51/     EDE : =$9                  bitJoyY		equ 9
(1)   52/     EDE : =$A                  bitJoyX		equ 10
(1)   53/     EDE : =$B                  bitJoyMode	equ 11
(1)   54/     EDE :                     
(1)   55/     EDE :                     ; Mega Mouse
(1)   56/     EDE :                     ; Read WORD as +on_hold or +on_press
(1)   57/     EDE : =$1                  ClickR		equ $0001
(1)   58/     EDE : =$2                  ClickL		equ $0002
(1)   59/     EDE : =$4                  ClickM		equ $0004	; US MOUSE ONLY
(1)   60/     EDE : =$8                  ClickS		equ $0008	; (Untested)
(1)   61/     EDE : =$0                  bitClickL	equ 0
(1)   62/     EDE : =$1                  bitClickR	equ 1
(1)   63/     EDE : =$2                  bitClickM	equ 2
(1)   64/     EDE : =$3                  bitClickS	equ 3
(1)   65/     EDE :                     
(1)   66/     EDE :                     ; Controller_1 / Controller_2
(1)   67/     EDE : (MACRO)              		strct 0
(1)   67/     EDE : =$EDE                GLBL_LASTPC     set *
(1)   67/FFFFFFFFFFFFAB96 :                                     dephase
(1)   67/       0 :                                     phase 0
(1)   67/       0 : =$0                  GLBL_LASTORG    set *
(1)   68/       0 :                     pad_id		ds.b 1			; Controller ID
(1)   69/       1 :                     pad_ver		ds.b 1			; Controller type/revision
(1)   70/       2 :                     on_hold		ds.w 1			; User HOLD bits
(1)   71/       4 :                     on_press	ds.w 1			; User PRESSED bits
(1)   72/       6 :                     on_release	ds.w 1			; (RESERVED)
(1)   73/       8 :                     mouse_x		ds.w 1			; Mouse/Pen X position or speed
(1)   74/       A :                     mouse_y		ds.w 1			; Mouse/pen Y position or speed
(1)   75/       C :                     ext_3		ds.w 1
(1)   76/       E :                     ext_4		ds.w 1
(1)   77/      10 :                     sizeof_input	ds.l 0
(1)   78/      10 : (MACRO)              		endstrct
(1)   78/       0 :                                     org GLBL_LASTORG
(1)   78/     EDE :                                     phase GLBL_LASTPC
(1)   79/     EDE :                     
(1)   80/     EDE :                     ; ====================================================================
(1)   81/     EDE :                     ; ----------------------------------------------------------------
(1)   82/     EDE :                     ; RAM section
(1)   83/     EDE :                     ; ----------------------------------------------------------------
(1)   84/     EDE :                     
(1)   85/     EDE : (MACRO)              		strct RAM_MdSystem
(1)   85/     EDE : =$EDE                GLBL_LASTPC     set *
(1)   85/       0 :                                     dephase
(1)   85/FFFFFFFFFFFFC004 :                                     phase RAM_MDSYSTEM
(1)   85/FFFFFFFFFFFFC004 : =$FFFFFFFFFFFFC004   GLBL_LASTORG    set *
(1)   86/FFFFFFFFFFFFC004 :                     RAM_InputData	ds.b sizeof_input*4		; Input data section
(1)   87/FFFFFFFFFFFFC044 :                     RAM_SaveData	ds.b MAX_SRAMSIZE		; Read/Write of the SAVE data
(1)   88/FFFFFFFFFFFFC444 :                     RAM_SysRandVal	ds.l 1				; Random value
(1)   89/FFFFFFFFFFFFC448 :                     RAM_SysRandSeed	ds.l 1				; Randomness seed
(1)   90/FFFFFFFFFFFFC44C :                     RAM_MdMarsVInt	ds.w 3				; VBlank jump (JMP xxxx xxxx)
(1)   91/FFFFFFFFFFFFC452 :                     RAM_MdMarsHint	ds.w 3				; HBlank jump (JMP xxxx xxxx)
(1)   92/FFFFFFFFFFFFC458 :                     RAM_ScreenMode	ds.w 1
(1)   93/FFFFFFFFFFFFC45A :                     sizeof_mdsys	ds.l 0
(1)   94/FFFFFFFFFFFFC460 : (MACRO)              		endstrct
(1)   94/FFFFFFFFFFFFC004 :                                     org GLBL_LASTORG
(1)   94/     EDE :                                     phase GLBL_LASTPC
(1)   95/     EDE : (MACRO)              		erreport "MD SYSTEM RAM",sizeof_mdsys-RAM_MdSystem,MAX_MdSystem
(1)   96/     EDE :                     
(1)   97/     EDE :                     ; ====================================================================
(1)   98/     EDE :                     ; ----------------------------------------------------------------
(1)   99/     EDE :                     ; Alias labels
(1)  100/     EDE :                     ; ----------------------------------------------------------------
(1)  101/     EDE :                     
(1)  102/     EDE : =$FFFFFFFFFFFFC004   Controller_1	equ RAM_InputData
(1)  103/     EDE : =$FFFFFFFFFFFFC014   Controller_2	equ RAM_InputData+sizeof_input
(1)  104/     EDE :                     
(1)  105/     EDE :                     ; ====================================================================
(1)  106/     EDE :                     ; --------------------------------------------------------
(1)  107/     EDE :                     ; Init System
(1)  108/     EDE :                     ; 
(1)  109/     EDE :                     ; Uses:
(1)  110/     EDE :                     ; a0-a2,d0-d1
(1)  111/     EDE :                     ; --------------------------------------------------------
(1)  112/     EDE :                     
(1)  113/     EDE :                     System_Init:
(1)  114/     EDE : 007C 0700           		or.w	#$0700,sr
(1)  126/     EE2 : 303C 4EF9           		move.w	#$4EF9,d0		; Set JMP opcode for the Hblank/VBlank jumps
(1)  127/     EE6 : 31C0 C44C            		move.w	d0,(RAM_MdMarsVInt).w
(1)  128/     EEA : 31C0 C452           		move.w	d0,(RAM_MdMarsHInt).w
(1)  129/     EEE : 203C 0000 120E      		move.l	#VInt_Default,d0	; Set default ints
(1)  130/     EF4 : 223C 0000 1224      		move.l	#Hint_Default,d1
(1)  131/     EFA : 6100 025A           		bsr	System_SetInts
(1)  132/     EFE : 41F8 C004           		lea	(RAM_InputData),a0	; Clear input data buffer
(1)  133/     F02 : 323C 0007           		move.w	#(sizeof_input/2)-1,d1
(1)  134/     F06 : 7000                		moveq	#0,d0
(1)  135/     F08 :                     .clrinput:
(1)  136/     F08 : 30C0                		move.w	d0,(a0)+
(1)  137/     F0A : 51C9 FFFC           		dbf	d1,.clrinput
(1)  138/     F0E : 203C 5625 5769      		move.l	#$56255769,d0		; Set these random values
(1)  139/     F14 : 223C 9511 6102      		move.l	#$95116102,d1
(1)  140/     F1A : 23C0 FFFF C444      		move.l	d0,(RAM_SysRandVal).l
(1)  141/     F20 : 23C1 FFFF C448      		move.l	d1,(RAM_SysRandSeed).l
(1)  145/     F26 : 027C F8FF           		andi.w	#$F8FF,sr
(1)  146/     F2A : 6000 023C           		bra	System_SramInit
(1)  147/     F2E :                     
(1)  148/     F2E :                     ; --------------------------------------------------------
(1)  149/     F2E :                     ; System_Render
(1)  150/     F2E :                     ;
(1)  151/     F2E :                     ; Call this on the loop your current screen.
(1)  152/     F2E :                     ; ** VDP DISPLAY MUST BE ON TO USE THIS **
(1)  153/     F2E :                     ;
(1)  154/     F2E :                     ; This will:
(1)  155/     F2E :                     ; - Update the sound driver for any changes that
(1)  156/     F2E :                     ;   need communication with 68K
(1)  157/     F2E :                     ; - Build the object sprites
(1)  158/     F2E :                     ; - 32X/CD32X:
(1)  159/     F2E :                     ;   Update the DREQ data
(1)  160/     F2E :                     ;
(1)  161/     F2E :                     ; On VBLANK:
(1)  162/     F2E :                     ; - Update the input data
(1)  163/     F2E :                     ; - Transfer the Genesis palette, sprites and scroll
(1)  164/     F2E :                     ;   data from from RAM to VDP
(1)  165/     F2E :                     ;   (32X: RV bit is not required.)
(1)  166/     F2E :                     ; - Process the DMA BLAST list (32X: Uses RV bit)
(1)  167/     F2E :                     ; --------------------------------------------------------
(1)  168/     F2E :                     
(1)  169/     F2E :                     System_Render:
(1)  170/     F2E : 1E38 BDF7           		move.b	(RAM_VdpRegs+1).w,d7
(1)  171/     F32 : 0807 0006           		btst	#bitDispEnbl,d7
(1)  172/     F36 : 673A                		beq.s	.forgot_disp		; <-- Failsafe
(1)  173/     F38 :                     .wait_lag:
(1)  174/     F38 : 6100 F334           		bsr	Sound_Update		; Syncronize/Update sound on lag
(1)  175/     F3C : 3E39 00C0 0004      		move.w	(vdp_ctrl).l,d7		; Got here during VBlank?
(1)  176/     F42 : 0807 0003           		btst	#bitVBlk,d7		; If yes, drop frame
(1)  177/     F46 : 66F0                		bne.s	.wait_lag
(1)  178/     F48 : 6100 F324           		bsr	Sound_Update
(1)  179/     F4C : 6100 FD16           		bsr	Objects_Show		; Build sprite data from Objects
(1)  180/     F50 :                     .wait_in:
(1)  181/     F50 : 6100 F31C           		bsr	Sound_Update		; Syncronize/Update sound during Display
(1)  182/     F54 : 3E39 00C0 0004      		move.w	(vdp_ctrl).l,d7		; Wait until VBlank
(1)  183/     F5A : 0807 0003           		btst	#bitVBlk,d7
(1)  184/     F5E : 67F0                		beq.s	.wait_in
(1)  185/     F60 : 6122                		bsr	System_Input		; Read input data FIRST
(1)  186/     F62 : 6100 F916           		bsr	Video_Render		; Render visuals
(1)  187/     F66 : 6100 F306           		bsr	Sound_Update
(1)  188/     F6A : 52B8 BDD4           		addq.l	#1,(RAM_Framecount).w
(1)  192/     F6E : 6100 F2FE           		bsr	Sound_Update
(1)  193/     F72 :                     .forgot_disp:
(1)  194/     F72 : 4E75                		rts
(1)  195/     F74 :                     
(1)  196/     F74 :                     ; --------------------------------------------------------
(1)  197/     F74 :                     ; System_DmaEnter_(from) and System_DmaEnter_(from)
(1)  198/     F74 :                     ; ROM or RAM
(1)  199/     F74 :                     ;
(1)  200/     F74 :                     ; Call to these labels BEFORE and AFTER doing
(1)  201/     F74 :                     ; DMA-to-VDP transers, these calls are NOT
(1)  202/     F74 :                     ; required for FILL or COPY
(1)  203/     F74 :                     ;
(1)  204/     F74 :                     ; This is where you put your Sound driver's Z80 stop
(1)  205/     F74 :                     ; or pause calls go here.
(1)  206/     F74 :                     ; --------------------------------------------------------
(1)  207/     F74 :                     
(1)  208/     F74 :                     System_DmaEnter_RAM:
(1)  209/     F74 : 6000 F354           		bra	gemaDmaPause
(1)  210/     F78 :                     System_DmaExit_RAM:
(1)  211/     F78 : 6000 F352           		bra	gemaDmaResume
(1)  212/     F7C :                     
(1)  213/     F7C :                     ; --------------------------------------------------------
(1)  214/     F7C :                     
(1)  215/     F7C :                     System_DmaEnter_ROM:
(1)  216/     F7C : 6000 F350           		bra	gemaDmaPauseRom
(1)  217/     F80 :                     System_DmaExit_ROM:
(1)  218/     F80 : 6000 F34E           		bra	gemaDmaResumeRom
(1)  219/     F84 :                     
(1)  220/     F84 :                     ; ====================================================================
(1)  221/     F84 :                     ; ----------------------------------------------------------------
(1)  222/     F84 :                     ; Subroutines
(1)  223/     F84 :                     ; ----------------------------------------------------------------
(1)  224/     F84 :                     
(1)  225/     F84 :                     ; --------------------------------------------------------
(1)  226/     F84 :                     ; System_Input
(1)  227/     F84 :                     ;
(1)  228/     F84 :                     ; Reads data from the Controller ports
(1)  229/     F84 :                     ; *** CALL THIS ON VBLANK ONLY ***
(1)  230/     F84 :                     ;
(1)  231/     F84 :                     ; Uses:
(1)  232/     F84 :                     ; d5-d7,a5-a6
(1)  233/     F84 :                     ; --------------------------------------------------------
(1)  234/     F84 :                     
(1)  235/     F84 :                     System_Input:
(1)  236/     F84 :                     
(1)  237/     F84 :                     	; ----------------------------------------
(1)  238/     F84 :                     	; PICO input is hard-coded to Controller_1
(1)  239/     F84 :                     	;
(1)  240/     F84 :                     	; on_hold/on_press:
(1)  241/     F84 :                     	; %P00BRLDU
(1)  242/     F84 :                     	; UDLR - Arrows
(1)  243/     F84 :                     	;    B - BIG button red
(1)  244/     F84 :                     	;    P - Pen press/click
(1)  245/     F84 :                     	;
(1)  246/     F84 :                     	; mouse_x/mouse_y:
(1)  247/     F84 :                     	; Pen X/Y position
(1)  248/     F84 :                     	; depen
(1)  249/     F84 :                     	; ----------------------------------------
(1)  251/     F84 : 4DF8 C004           		lea	(RAM_InputData),a6
(1)  252/     F88 : 4BF9 0080 0003      		lea	($800003),a5
(1)  253/     F8E : 7E00                		moveq	#0,d7
(1)  254/     F90 : 1E15                		move.b	(a5),d7		; $800003: %P00RLDU
(1)  255/     F92 : 0A47 00FF           		eori.w	#$FF,d7
(1)  256/     F96 : 3C07                		move.w	d7,d6
(1)  257/     F98 :                     ; 		move.b	on_release(a6),d2
(1)  258/     F98 :                     ; 		eor.b	d2,d7
(1)  259/     F98 :                     ; 		and.b	d2,d7
(1)  260/     F98 :                     ; 		move.b	d7,on_release(a6)
(1)  261/     F98 : 3A2E 0002           		move.w	on_hold(a6),d5
(1)  262/     F9C : 0A45 00FF           		eori.w	#$FF,d5
(1)  263/     FA0 : CA46                		and.w	d6,d5
(1)  264/     FA2 : 3D45 0004           		move.w	d5,on_press(a6)
(1)  265/     FA6 : 3D46 0002           		move.w	d6,on_hold(a6)
(1)  266/     FAA : 1E2D 0002           		move.b	2(a5),d7
(1)  267/     FAE : E14F                		lsl.w	#8,d7
(1)  268/     FB0 : 1E2D 0004           		move.b	4(a5),d7
(1)  269/     FB4 : 9E7C 003C           		sub.w	#$3C,d7
(1)  270/     FB8 : 6A02                		bpl.s	.x_valid	 ; <-- Failsafe negative X
(1)  271/     FBA : 4247                		clr.w	d7
(1)  272/     FBC :                     .x_valid:
(1)  273/     FBC : 3D47 0008           		move.w	d7,mouse_x(a6)
(1)  274/     FC0 :                     	; $0000-$00EF - Tablet
(1)  275/     FC0 :                     	; $0100-$01EF - Storyware
(1)  276/     FC0 : 7E00                		moveq	#0,d7
(1)  277/     FC2 : 1C2D 0006           		move.b	6(a5),d6
(1)  278/     FC6 : E14E                		lsl.w	#8,d6
(1)  279/     FC8 : 1C2D 0008           		move.b	8(a5),d6
(1)  280/     FCC : 0446 01FC           		subi.w	#$1FC,d6
(1)  281/     FD0 : 6B02                		bmi.s	.bad_y
(1)  282/     FD2 : 3E06                		move.w	d6,d7
(1)  283/     FD4 :                     .bad_y:
(1)  284/     FD4 : 3D47 000A           		move.w	d7,mouse_y(a6)
(1)  285/     FD8 : 1C2D 000A           		move.b	10(a5),d6
(1)  286/     FDC : 7E00                		moveq	#0,d7
(1)  287/     FDE : 7A05                		moveq	#6-1,d5		; 6 pages
(1)  288/     FE0 :                     .page_it:
(1)  289/     FE0 : E24E                		lsr.w	#1,d6
(1)  290/     FE2 : 6402                		bcc.s	.no_bit
(1)  291/     FE4 : 5247                		addq.w	#1,d7
(1)  292/     FE6 :                     .no_bit:
(1)  293/     FE6 : 51CD FFF8           		dbf	d5,.page_it
(1)  294/     FEA : 1D47 000C           		move.b	d7,ext_3(a6)
(1)  500/     FEE :                     
(1)  501/     FEE :                     ; --------------------------------------------------------
(1)  502/     FEE :                     ; System_Random
(1)  503/     FEE :                     ;
(1)  504/     FEE :                     ; Makes a random number.
(1)  505/     FEE :                     ;
(1)  506/     FEE :                     ; Input:
(1)  507/     FEE :                     ; d0 | Seed
(1)  508/     FEE :                     ;
(1)  509/     FEE :                     ; Output:
(1)  510/     FEE :                     ; d0 | LONG
(1)  511/     FEE :                     ;
(1)  512/     FEE :                     ; Uses:
(1)  513/     FEE :                     ; d4-d5
(1)  514/     FEE :                     ; --------------------------------------------------------
(1)  515/     FEE :                     
(1)  516/     FEE :                     System_Random:
(1)  517/     FEE : 2F04                		move.l	d4,-(sp)
(1)  518/     FF0 : 2838 C448           		move.l	(RAM_SysRandSeed).w,d4
(1)  519/     FF4 : 6606                		bne.s	.good_s
(1)  520/     FF6 : 283C 23B5 1947      		move.l	#$23B51947,d4
(1)  521/     FFC :                     .good_s:
(1)  522/     FFC : 2004                		move.l	d4,d0
(1)  523/     FFE : EB9C                		rol.l	#5,d4
(1)  524/    1000 : D880                		add.l	d0,d4
(1)  525/    1002 : E644                		asr.w	#3,d4
(1)  526/    1004 : D880                		add.l	d0,d4
(1)  527/    1006 : 3004                		move.w	d4,d0
(1)  528/    1008 : 4844                		swap	d4
(1)  529/    100A : D044                		add.w	d4,d0
(1)  530/    100C : 3800                		move.w	d0,d4
(1)  531/    100E : 4844                		swap	d4
(1)  532/    1010 : 21C4 C448           		move.l	d4,(RAM_SysRandSeed).w
(1)  533/    1014 : 281F                		move.l	(sp)+,d4
(1)  534/    1016 : 4E75                		rts
(1)  535/    1018 :                     
(1)  536/    1018 :                     ; --------------------------------------------------------
(1)  537/    1018 :                     ; System_SineWave_Cos / System_SineWave
(1)  538/    1018 :                     ;
(1)  539/    1018 :                     ; Get sinewave value
(1)  540/    1018 :                     ;
(1)  541/    1018 :                     ; Input:
(1)  542/    1018 :                     ; d0 | WORD - Tan
(1)  543/    1018 :                     ; d1 | WORD - Multiply
(1)  544/    1018 :                     ;
(1)  545/    1018 :                     ; Output:
(1)  546/    1018 :                     ; d2 | LONG - Result (as 0000.0000)
(1)  547/    1018 :                     ; --------------------------------------------------------
(1)  548/    1018 :                     
(1)  549/    1018 :                     System_SineWave_Cos:
(1)  550/    1018 : 48A7 8000           		movem.w	d0,-(sp)
(1)  551/    101C : 7400                		moveq	#0,d2
(1)  552/    101E : 0600 0040           		addi.b	#$40,d0
(1)  553/    1022 : 1400                		move.b	d0,d2
(1)  554/    1024 : E302                		asl.b	#1,d2
(1)  555/    1026 : 343B 202E           		move.w	MdSys_SineData(pc,d2.w),d2
(1)  556/    102A : C4C1                		mulu.w	d1,d2
(1)  557/    102C : 8000                		or.b	d0,d0
(1)  558/    102E : 6A02                		bpl.s	.dont_neg
(1)  559/    1030 : 4482                		neg.l	d2
(1)  560/    1032 :                     .dont_neg:
(1)  561/    1032 : 4C9F 0001           		movem.w	(sp)+,d0
(1)  562/    1036 : 4E75                		rts
(1)  563/    1038 :                     
(1)  564/    1038 :                     System_SineWave:
(1)  565/    1038 : 48A7 8000           		movem.w	d0,-(sp)
(1)  566/    103C : 0240 007F           		andi.w	#$7F,d0
(1)  567/    1040 : E340                		asl.w	#1,d0
(1)  568/    1042 : 343B 0012           		move.w	MdSys_SineData(pc,d0.w),d2
(1)  569/    1046 : C4C1                		mulu.w	d1,d2
(1)  570/    1048 : 4C9F 0001           		movem.w	(sp)+,d0
(1)  571/    104C : 5182                		subq.l	#8,d2
(1)  572/    104E : 8000                		or.b	d0,d0
(1)  573/    1050 : 6A02                		bpl.s	.dont_neg
(1)  574/    1052 : 4482                		neg.l	d2
(1)  575/    1054 :                     .dont_neg:
(1)  576/    1054 : 4E75                		rts
(1)  577/    1056 :                     
(1)  578/    1056 : 0000 0006 000D      MdSys_SineData:	dc.w 0,	6, $D, $13, $19, $1F, $26, $2C,	$32, $38, $3E
             105C : 0013 0019 001F 
             1062 : 0026 002C 0032 
             1068 : 0038 003E          
(1)  579/    106C : 0044 004A 0050      		dc.w $44, $4A, $50, $56, $5C, $62, $68,	$6D, $73, $79
             1072 : 0056 005C 0062 
             1078 : 0068 006D 0073 
             107E : 0079             
(1)  580/    1080 : 007E 0084 0089      		dc.w $7E, $84, $89, $8E, $93, $98, $9D,	$A2, $A7, $AC
             1086 : 008E 0093 0098 
             108C : 009D 00A2 00A7 
             1092 : 00AC             
(1)  581/    1094 : 00B1 00B5 00B9      		dc.w $B1, $B5, $B9, $BE, $C2, $C6, $CA,	$CE, $D1, $D5
             109A : 00BE 00C2 00C6 
             10A0 : 00CA 00CE 00D1 
             10A6 : 00D5             
(1)  582/    10A8 : 00D8 00DC 00DF      		dc.w $D8, $DC, $DF, $E2, $E5, $E7, $EA,	$ED, $EF, $F1
             10AE : 00E2 00E5 00E7 
             10B4 : 00EA 00ED 00EF 
             10BA : 00F1             
(1)  583/    10BC : 00F3 00F5 00F7      		dc.w $F3, $F5, $F7, $F8, $FA, $FB, $FC,	$FD, $FE, $FF
             10C2 : 00F8 00FA 00FB 
             10C8 : 00FC 00FD 00FE 
             10CE : 00FF             
(1)  584/    10D0 : 00FF 0100 0100      		dc.w $FF, $100,	$100, $100, $100, $100,	$FF, $FF, $FE
             10D6 : 0100 0100 0100 
             10DC : 00FF 00FF 00FE    
(1)  585/    10E2 : 00FD 00FC 00FB      		dc.w $FD, $FC, $FB, $FA, $F8, $F7, $F5,	$F3, $F1, $EF
             10E8 : 00FA 00F8 00F7 
             10EE : 00F5 00F3 00F1 
             10F4 : 00EF             
(1)  586/    10F6 : 00ED 00EA 00E7      		dc.w $ED, $EA, $E7, $E5, $E2, $DF, $DC,	$D8, $D5, $D1
             10FC : 00E5 00E2 00DF 
             1102 : 00DC 00D8 00D5 
             1108 : 00D1             
(1)  587/    110A : 00CE 00CA 00C6      		dc.w $CE, $CA, $C6, $C2, $BE, $B9, $B5,	$B1, $AC, $A7
             1110 : 00C2 00BE 00B9 
             1116 : 00B5 00B1 00AC 
             111C : 00A7             
(1)  588/    111E : 00A2 009D 0098      		dc.w $A2, $9D, $98, $93, $8E, $89, $84,	$7E, $79, $73
             1124 : 0093 008E 0089 
             112A : 0084 007E 0079 
             1130 : 0073             
(1)  589/    1132 : 006D 0068 0062      		dc.w $6D, $68, $62, $5C, $56, $50, $4A,	$44, $3E, $38
             1138 : 005C 0056 0050 
             113E : 004A 0044 003E 
             1144 : 0038             
(1)  590/    1146 : 0032 002C 0026      		dc.w $32, $2C, $26, $1F, $19, $13, $D, 6
             114C : 001F 0019 0013 
             1152 : 000D 0006          
(1)  591/    1156 :                     
(1)  592/    1156 :                     ; --------------------------------------------------------
(1)  593/    1156 :                     ; System_SetInts
(1)  594/    1156 :                     ;
(1)  595/    1156 :                     ; Set new interrputs
(1)  596/    1156 :                     ;
(1)  597/    1156 :                     ; d0 | LONG - VBlank
(1)  598/    1156 :                     ; d1 | LONG - HBlank
(1)  599/    1156 :                     ;
(1)  600/    1156 :                     ; Uses:
(1)  601/    1156 :                     ; d4
(1)  602/    1156 :                     ;
(1)  603/    1156 :                     ; Notes:
(1)  604/    1156 :                     ; Writing 0 or a negative number will skip change
(1)  605/    1156 :                     ; to the interrupt pointer
(1)  606/    1156 :                     ; --------------------------------------------------------
(1)  607/    1156 :                     
(1)  608/    1156 :                     System_SetInts:
(1)  609/    1156 : 2800                		move.l	d0,d4
(1)  610/    1158 : 6704                		beq.s	.novint
(1)  614/    115A : 21C4 C44E            		move.l	d4,(RAM_MdMarsVInt+2).w
(1)  616/    115E :                     .novint:
(1)  617/    115E : 2801                		move.l	d1,d4
(1)  618/    1160 : 6704                		beq.s	.nohint
(1)  622/    1162 : 21C4 C454            		move.l	d4,(RAM_MdMarsHInt+2).w
(1)  624/    1166 :                     .nohint:
(1)  625/    1166 : 4E75                		rts
(1)  626/    1168 :                     
(1)  627/    1168 :                     ; --------------------------------------------------------
(1)  628/    1168 :                     ; System_SramInit
(1)  629/    1168 :                     ;
(1)  630/    1168 :                     ; Init save data
(1)  631/    1168 :                     ;
(1)  632/    1168 :                     ; Uses:
(1)  633/    1168 :                     ; a4,d4-d5
(1)  634/    1168 :                     ; --------------------------------------------------------
(1)  635/    1168 :                     
(1)  636/    1168 :                     System_SramInit:
(1)  638/    1168 : 4E71                		nop			; Pico has no SRAM
(1)  657/    116A : 4E75                		rts
(1)  658/    116C :                     
(1)  659/    116C :                     ; --------------------------------------------------------
(1)  660/    116C :                     ; System_SramSave
(1)  661/    116C :                     ; --------------------------------------------------------
(1)  662/    116C :                     
(1)  663/    116C :                     System_SramSave:
(1)  665/    116C : 4E71                		nop
(1)  694/    116E : 4E75                		rts
(1)  695/    1170 :                     
(1)  696/    1170 :                     ; --------------------------------------------------------
(1)  697/    1170 :                     ; System_SramLoad
(1)  698/    1170 :                     ; --------------------------------------------------------
(1)  699/    1170 :                     
(1)  700/    1170 :                     System_SramLoad:
(1)  702/    1170 : 4E71                		nop
(1)  731/    1172 : 4E75                		rts
(1)  732/    1174 :                     
(1)  733/    1174 :                     ; ====================================================================
(1)  734/    1174 :                     ; ----------------------------------------------------------------
(1)  735/    1174 :                     ; Screen mode subroutines
(1)  736/    1174 :                     ; ----------------------------------------------------------------
(1)  737/    1174 :                     
(1)  738/    1174 :                     ; --------------------------------------------------------
(1)  739/    1174 :                     ; Initialize current screen mode
(1)  740/    1174 :                     ;
(1)  741/    1174 :                     ; MUST call this at the very start of your screen code.
(1)  742/    1174 :                     ; --------------------------------------------------------
(1)  743/    1174 :                     
(1)  744/    1174 :                     Mode_Init:
(1)  745/    1174 : 007C 0700           		ori.w	#$0700,sr			; Disable interrupts.
(1)  746/    1178 : 13FC 0004 FFFF      		move.b	#$04,(RAM_VdpRegs).l
             117E : BDF6             
(1)  747/    1180 : 13FC 0004 FFFF      		move.b	#$04,(RAM_VdpRegs+1).l
             1186 : BDF7             
(1)  748/    1188 : 6100 F1EE           		bsr	Video_Update
(1)  749/    118C : 6100 F23C           		bsr	Video_Clear
(1)  750/    1190 : 6100 FA2C           		bsr	Objects_Clear
(1)  751/    1194 : 49F8 1800           		lea	(MAX_ScrnBuff),a4
(1)  752/    1198 : 3A3C 0BFF           		move.w	#(MAX_ScrnBuff/2)-1,d5
(1)  753/    119C : 7800                		moveq	#0,d4
(1)  754/    119E :                     .clr:
(1)  755/    119E : 38C4                		move.w	d4,(a4)+
(1)  756/    11A0 : 51CD FFFC           		dbf	d5,.clr
(1)  757/    11A4 : 4E75                		rts
(1)  758/    11A6 :                     
(1)  759/    11A6 :                     ; --------------------------------------------------------
(1)  760/    11A6 :                     ; Syncronized Fade-in/Fade-out for both VDP and SuperVDP
(1)  761/    11A6 :                     ; --------------------------------------------------------
(1)  762/    11A6 :                     
(1)  763/    11A6 :                     Mode_FadeIn:
(1)  764/    11A6 : 6100 FA3E           		bsr	Objects_Run
(1)  765/    11AA : 31FC 0001 BDE4      		move.w	#1,(RAM_FadeMdReq).w
(1)  766/    11B0 : 31FC 0001 BDEC      		move.w	#1,(RAM_FadeMarsReq).w
(1)  767/    11B6 : 31FC 0001 BDE6      		move.w	#1,(RAM_FadeMdIncr).w
(1)  768/    11BC : 31FC 0002 BDEE      		move.w	#2,(RAM_FadeMarsIncr).w
(1)  769/    11C2 : 31FC 0001 BDE8      		move.w	#1,(RAM_FadeMdDelay).w
(1)  770/    11C8 : 31FC 0000 BDF0      		move.w	#0,(RAM_FadeMarsDelay).w
(1)  771/    11CE :                     .loopw:
(1)  772/    11CE : 6100 FD5E           		bsr	System_Render
(1)  773/    11D2 : 6100 F2CE           		bsr	Video_RunFade
(1)  774/    11D6 : 66F6                		bne.s	.loopw
(1)  775/    11D8 : 4E75                		rts
(1)  776/    11DA :                     
(1)  777/    11DA :                     Mode_FadeOut:
(1)  778/    11DA : 6100 FA0A           		bsr	Objects_Run
(1)  779/    11DE : 31FC 0002 BDE4      		move.w	#2,(RAM_FadeMdReq).w
(1)  780/    11E4 : 31FC 0002 BDEC      		move.w	#2,(RAM_FadeMarsReq).w
(1)  781/    11EA : 31FC 0001 BDE6      		move.w	#1,(RAM_FadeMdIncr).w
(1)  782/    11F0 : 31FC 0002 BDEE      		move.w	#2,(RAM_FadeMarsIncr).w
(1)  783/    11F6 : 31FC 0001 BDE8      		move.w	#1,(RAM_FadeMdDelay).w
(1)  784/    11FC : 31FC 0000 BDF0      		move.w	#0,(RAM_FadeMarsDelay).w
(1)  785/    1202 :                     .loopw:
(1)  786/    1202 : 6100 FD2A           		bsr	System_Render
(1)  787/    1206 : 6100 F29A           		bsr	Video_RunFade
(1)  788/    120A : 66F6                		bne.s	.loopw
(1)  789/    120C : 4E75                		rts
(1)  790/    120E :                     
(1)  791/    120E :                     ; ====================================================================
(1)  792/    120E :                     ; ----------------------------------------------------------------
(1)  793/    120E :                     ; Default interrupts
(1)  794/    120E :                     ; ----------------------------------------------------------------
(1)  795/    120E :                     
(1)  796/    120E :                     ; --------------------------------------------------------
(1)  797/    120E :                     ; VBlank
(1)  798/    120E :                     ; --------------------------------------------------------
(1)  799/    120E :                     
(1)  800/    120E :                     VInt_Default:
(1)  801/    120E : 48E7 FFFE           		movem.l	d0-a6,-(sp)
(1)  802/    1212 : 6100 FD70           		bsr	System_Input
(1)  803/    1216 : 06B8 0000 0001      		addi.l	#1,(RAM_FrameCount).w
             121C : BDD4             
(1)  804/    121E : 4CDF 7FFF           		movem.l	(sp)+,d0-a6
(1)  805/    1222 : 4E73                		rte
(1)  806/    1224 :                     
(1)  807/    1224 :                     ; --------------------------------------------------------
(1)  808/    1224 :                     ; HBlank
(1)  809/    1224 :                     ; --------------------------------------------------------
(1)  810/    1224 :                     
(1)  811/    1224 :                     HInt_Default:
(1)  812/    1224 : 4E73                		rte
(1)  813/    1226 :                     
(1)  814/    1226 :                     ; ====================================================================
(1)  815/    1226 :                     ; ----------------------------------------------------------------
(1)  816/    1226 :                     ; SEGA CD / CD32X ONLY
(1)  817/    1226 :                     ; ----------------------------------------------------------------
(1)  818/    1226 :                     
(1) 1022/    1226 :                     
(1) 1023/    1226 :                     ; ====================================================================
(1) 1024/    1226 :                     ; ----------------------------------------------------------------
(1) 1025/    1226 :                     ; 32X and CD32X ONLY
(1) 1026/    1226 :                     ; ----------------------------------------------------------------
(1) 1027/    1226 :                     
(1) 1172/    1226 :                     
(1) 1173/    1226 :                     ; ====================================================================
(1) 1174/    1226 :                     ; ----------------------------------------------------------------
(1) 1175/    1226 :                     ; Shared subs for the add-ons
(1) 1176/    1226 :                     ; ----------------------------------------------------------------
(1) 1177/    1226 :                     
(1) 1178/    1226 :                     ; --------------------------------------------------------
(1) 1179/    1226 :                     ; System_GrabRamCode
(1) 1180/    1226 :                     ;
(1) 1181/    1226 :                     ; Shared routine for MCD, 32X and CD32X.
(1) 1182/    1226 :                     ;
(1) 1183/    1226 :                     ; Send new code to the USER side of RAM and
(1) 1184/    1226 :                     ; jumps into it.
(1) 1185/    1226 :                     ;
(1) 1186/    1226 :                     ; ** FOR SEGA CD/CD+32X
(1) 1187/    1226 :                     ; Input:
(1) 1188/    1226 :                     ; a0 - Filename string 8-bytes
(1) 1189/    1226 :                     ;
(1) 1190/    1226 :                     ; ** FOR SEGA 32X
(1) 1191/    1226 :                     ; Input:
(1) 1192/    1226 :                     ; a0 - Location of the RAM-code to copy from
(1) 1193/    1226 :                     ;      in the $880000/$900000 areas
(1) 1194/    1226 :                     ; --------------------------------------------------------
(1) 1195/    1226 :                     
(1) 1196/    1226 :                     System_GrabRamCode:
(1) 1211/    1226 : 4E75                		rts
(1) 1213/    1228 :                     
(1) 1214/    1228 :                     ; ====================================================================
(1) 1215/    1228 :                     
     201/    1228 :                     
     202/    1228 :                     ; ---------------------------------------------
     203/    1228 :                     ; Read screen modes
     204/    1228 :                     ;
     205/    1228 :                     ;   MD/Pico: Direct ROM jump
     206/    1228 :                     ; SCD/CD32X: Reads file from disc and
     207/    1228 :                     ;            transfers code to RAM
     208/    1228 :                     ;       32X: Read from ROM and copies code to
     209/    1228 :                     ;            RAM so it's problematic with DMA
     210/    1228 :                     ;            and the SH2
     211/    1228 :                     ;
     212/    1228 :                     ; - Returning in your current screen code will
     213/    1228 :                     ; loop here.
     214/    1228 :                     ; - DO NOT JUMP TO SCREEN MODES DIRECTLY
     215/    1228 :                     ; ---------------------------------------------
     216/    1228 :                     
     217/    1228 :                     Md_ReadModes:
     218/    1228 : 007C 0700           		ori.w	#$0700,sr		; Disable interrupts
     219/    122C : 7000                		moveq	#0,d0
     220/    122E : 3038 C458           		move.w	(RAM_ScreenMode).w,d0
     221/    1232 : C07C 007F           		and.w	#$7F,d0			; <-- CURRENT LIMIT
     222/    1236 : E948                		lsl.w	#4,d0			; * $10
     223/    1238 : 41FB 000A           		lea	.pick_mode(pc,d0.w),a0	; LEA the filename
     231/    123C : 207B 0006           		movea.l	.pick_mode(pc,d0.w),a0	; Location to JUMP to.
     232/    1240 : 4E90                		jsr	(a0)
     234/    1242 : 60E4                		bra.s	Md_ReadModes		; Loop on rts
     235/    1244 :                     
     236/    1244 :                     ; ---------------------------------------------
     237/    1244 :                     ; ** ADD SCREEN MODES HERE **
     238/    1244 :                     ; ---------------------------------------------
     239/    1244 :                     
     240/    1244 :                     .pick_mode:
     241/    1244 : 0000 3242           		dc.l Md_Screen00	; Cartridge label (unused on CD)
     242/    1248 : 5343 5245 454E      		dc.b "SCREEN00.BIN"	; ISO Filename (unused on Cartridge)
             124E : 3030 2E42 494E    
     243/    1254 : 0000 3242           		dc.l Md_Screen00
     244/    1258 : 5343 5245 454E      		dc.b "SCREEN00.BIN"
             125E : 3030 2E42 494E    
     245/    1264 : 0000 3242           		dc.l Md_Screen00
     246/    1268 : 5343 5245 454E      		dc.b "SCREEN00.BIN"
             126E : 3030 2E42 494E    
     247/    1274 : 0000 3242           		dc.l Md_Screen00
     248/    1278 : 5343 5245 454E      		dc.b "SCREEN00.BIN"
             127E : 3030 2E42 494E    
     249/    1284 : 0000 3242           		dc.l Md_Screen00
     250/    1288 :                     
     251/    1288 :                     ; ---------------------------------------------
     252/    1288 :                     
     259/    1288 :                     Md_SysCode_e:
     260/    1288 :                     		align 2
     261/    1288 :                     
     262/    1288 :                     ; ===========================================================================
     263/    1288 :                     ; --------------------------------------------------------
     264/    1288 :                     ; Z80 include on Cartridge ONLY (NOT on Disc)
     265/    1288 :                     ; --------------------------------------------------------
     266/    1288 :                     
     268/    1288 :                     Z80_STPOS:
     272/    1288 :                     Z80_CODE:	include "sound/driver/gema_zdrv.asm"
(1)    1/    1288 :                     ; ====================================================================
(1)    2/    1288 :                     ; --------------------------------------------------------
(1)    3/    1288 :                     ; GEMA/Nikona Z80 code v0.9
(1)    4/    1288 :                     ; (C)2023-2024 GenesisFan64
(1)    5/    1288 :                     ; --------------------------------------------------------
(1)    6/    1288 :                     
(1)    7/       0 :                     		phase 0
(1)    8/       0 :                     		cpu Z80		; Enter Z80
(1)    9/       0 :                     
(1)   10/       0 :                     ; --------------------------------------------------------
(1)   11/       0 :                     ; SETTINGS
(1)   12/       0 :                     ; --------------------------------------------------------
(1)   13/       0 :                     
(1)   14/       0 :                     ; !! = leave as-is unless you know what you are doing.
(1)   15/       0 :                     
(1)   16/       0 : =8H                  MAX_TRFRPZ	equ 8		; !! Max transferRom packets(bytes) | **AFFECTS WAVE QUALITY**
(1)   17/       0 : =20H                 MAX_TRKCHN	equ 32		; !! Max internal shared tracker channel slots | *** LIMTED to 32 ***
(1)   18/       0 : =20H                 MAX_RCACH	equ 20h		; !! Max storage for ROM pattern data | *** 1-BIT SIZES ONLY, MUST BE ALIGNED ***
(1)   19/       0 :                     
(1)   20/       0 : =18H                 MAX_TBLSIZE	equ 18h		; Max size for chip tables
(1)   21/       0 : =1AH                 MAX_TRKINDX	equ 26		; Max channel indexes PER buffer: 4PSG+6FM+8PCM+8PWM
(1)   22/       0 : =8H                  MAX_BLOCKS	equ 8		; Max Cache'd ROM blocks per track
(1)   23/       0 : =8H                  SIZE_BUFFLIST	equ 4*2
(1)   24/       0 :                     
(1)   25/       0 : =0H                  ZSET_TESTME	equ 0		; Set to 1 to "hear"-test the DAC playback
(1)   26/       0 : =40H                 MAX_ZCMND	equ 40h		; Size of commands array, 1-bit SIZES ONLY
(1)   27/       0 :                     
(1)   28/       0 :                     ; --------------------------------------------------------
(1)   29/       0 :                     ; Structs
(1)   30/       0 :                     ; --------------------------------------------------------
(1)   31/       0 :                     
(1)   32/       0 :                     ; trkBuff struct: 00h-30h
(1)   33/       0 :                     ; unused bytes are free.
(1)   34/       0 :                     ;
(1)   35/       0 :                     ; trk_Status: %ERPx xxx0
(1)   36/       0 :                     ; E - enabled
(1)   37/       0 :                     ; R - Init|Restart track
(1)   38/       0 :                     ; P - refill-on-playback
(1)   39/       0 :                     ; 0 - Use global sub-beat
(1)   40/       0 : =0H                  trk_Status	equ 00h	; ** Track Status and Flags (MUST BE at 00h)
(1)   41/       0 : =1H                  trk_SeqId	equ 01h ; ** Track ID to play.
(1)   42/       0 : =2H                  trk_SetBlk	equ 02h	; ** Start on this block
(1)   43/       0 : =3H                  trk_TickSet	equ 03h	; ** Ticks for this track
(1)   44/       0 : =4H                  trk_Blocks	equ 04h ; ** [W] Current track's blocks
(1)   45/       0 : =6H                  trk_Patt	equ 06h ; ** [W] Current track's heads and patterns
(1)   46/       0 : =8H                  trk_Cach	equ 08h	; ** [W] Current track's cache notedata
(1)   47/       0 : =0AH                 trk_Read	equ 0Ah	; [W] Track current pattern read
(1)   48/       0 : =0CH                 trk_Rows	equ 0Ch	; [W] Track row counter
(1)   49/       0 : =0DH                 trk_cachHalf	equ 0Dh ; ROM-cache halfcheck
(1)   50/       0 : =0EH                 trk_rowPause	equ 0Eh	; Row-pause timer
(1)   51/       0 : =0FH                 trk_tickTmr	equ 0Fh	; Ticks timer
(1)   52/       0 : =10H                 trk_currBlk	equ 10h	; Current block
(1)   53/       0 : =11H                 trk_Priority	equ 11h ; Priority level for this buffer
(1)   54/       0 : =12H                 trk_BankIns	equ 12h ;
(1)   55/       0 : =13H                 trk_BankHeads	equ 13h ;
(1)   56/       0 : =14H                 trk_BankBlk	equ 14h	;
(1)   57/       0 : =15H                 trk_MaxChnl	equ 15h ; MAX channels used in this track
(1)   58/       0 : =16H                 trk_RomPattRead	equ 16h ; [3b] ROM current pattern data to be cache'd
(1)   59/       0 : =19H                 trk_RomPatt	equ 19h ; [3b] ROM BASE pattern data
(1)   60/       0 : =1CH                 trk_RomInst	equ 1Ch ; [3b] ROM instrument data
(1)   61/       0 : =1FH                 trk_RomBlks	equ 1Fh ; [3b] ROM blocks data
(1)   62/       0 : =22H                 trk_ChnIndx	equ 22h	; CHANNEL INDEXES START HERE
(1)   63/       0 :                     
(1)   64/       0 :                     ; chnBuff struct, 8 bytes ONLY
(1)   65/       0 :                     ;
(1)   66/       0 :                     ; chnl_Flags: E0LRevin
(1)   67/       0 :                     ; E  - Channel is active
(1)   68/       0 :                     ; LR - Global left/Right panning bits (0-ON 1-OFF)
(1)   69/       0 :                     ; e  - Effect*
(1)   70/       0 :                     ; v  - Volume*
(1)   71/       0 :                     ; i  - Intrument*
(1)   72/       0 :                     ; n  - Note*
(1)   73/       0 :                     ; * cleared afterwards.
(1)   74/       0 : =0H                  chnl_Flags	equ 0	; Playback flags ** DON'T MOVE **
(1)   75/       0 : =1H                  chnl_Chip	equ 1	; Current Chip ID + priority for this channel
(1)   76/       0 : =2H                  chnl_Note	equ 2
(1)   77/       0 : =3H                  chnl_Ins	equ 3	; Starting from 1, 0 is invalid
(1)   78/       0 : =4H                  chnl_Vol	equ 4	; MAX to MIN: 40h-00h
(1)   79/       0 : =5H                  chnl_EffId	equ 5
(1)   80/       0 : =6H                  chnl_EffArg	equ 6
(1)   81/       0 : =7H                  chnl_Type	equ 7	; Impulse-note update bits
(1)   82/       0 :                     
(1)   83/       0 :                     ; --------------------------------------------------------
(1)   84/       0 :                     ; Variables
(1)   85/       0 :                     ; --------------------------------------------------------
(1)   86/       0 :                     
(1)   87/       0 :                     ; Z80 opcode labels for the wave playback routines
(1)   88/       0 : =0H                  zopcNop		equ 00h
(1)   89/       0 : =8H                  zopcEx		equ 08h
(1)   90/       0 : =0C9H                zopcRet		equ 0C9h
(1)   91/       0 : =0D9H                zopcExx		equ 0D9h		; (dac_me ONLY)
(1)   92/       0 : =0F5H                zopcPushAf	equ 0F5h		; (dac_fill ONLY)
(1)   93/       0 :                     
(1)   94/       0 :                     ; PSG external control
(1)   95/       0 : =0H                  COM		equ 0
(1)   96/       0 : =4H                  LEV		equ 4
(1)   97/       0 : =8H                  ATK		equ 8
(1)   98/       0 : =0CH                 DKY		equ 12
(1)   99/       0 : =10H                 SLV		equ 16
(1)  100/       0 : =14H                 RRT		equ 20
(1)  101/       0 : =18H                 MODE		equ 24
(1)  102/       0 : =1CH                 DTL		equ 28
(1)  103/       0 : =20H                 DTH		equ 32
(1)  104/       0 : =24H                 ALV		equ 36
(1)  105/       0 : =28H                 FLG		equ 40
(1)  106/       0 : =2CH                 TMR		equ 44
(1)  107/       0 : =30H                 PVOL		equ 48
(1)  108/       0 : =34H                 PARP		equ 52
(1)  109/       0 : =38H                 PTMR		equ 56
(1)  110/       0 :                     
(1)  111/       0 :                     ; PWM control
(1)  112/       0 :                     ; PWCOM		equ 0
(1)  113/       0 :                     ; PWPTH_V	equ 8	; Volume | Pitch MSB (VVVVVVPPb)
(1)  114/       0 :                     ; PWPHL		equ 16	; Pitch LSB
(1)  115/       0 :                     ; PWOUTF	equ 24	; Output mode/bits | 32-bit address (%SlLRxiix) ii=$02 or $06
(1)  116/       0 :                     ; PWINSH	equ 32	; **
(1)  117/       0 :                     ; PWINSM	equ 40	; **
(1)  118/       0 :                     ; PWINSL	equ 48	; **
(1)  119/       0 :                     
(1)  120/       0 :                     ; ====================================================================
(1)  121/       0 :                     ; --------------------------------------------------------
(1)  122/       0 :                     ; Code starts here
(1)  123/       0 :                     ; --------------------------------------------------------
(1)  124/       0 :                     
(1)  125/       0 : F3                  		di			; Disable interrputs
(1)  126/       1 : ED 56               		im	1		; Interrupt mode 1
(1)  127/       3 : 31 00 20            		ld	sp,2000h	; Set stack at the end of Z80
(1)  128/       6 : 18 78               		jr	z80_init	; Jump to z80_init
(1)  129/       8 :                     
(1)  130/       8 :                     ; --------------------------------------------------------
(1)  131/       8 :                     ; RST 8 (dac_me)
(1)  132/       8 :                     ; *** self-modifiable code ***
(1)  133/       8 :                     ;
(1)  134/       8 :                     ; Writes wave data to DAC using data stored
(1)  135/       8 :                     ; on the wave buffer, call this routine every 6 or 8
(1)  136/       8 :                     ; opcodes to keep the samplerate stable.
(1)  137/       8 :                     ;
(1)  138/       8 :                     ; Input (EXX):
(1)  139/       8 :                     ;  c - WAVE buffer MSB
(1)  140/       8 :                     ; de - Pitch (xx.00)
(1)  141/       8 :                     ; h  - WAVE buffer LSB (as xx.00)
(1)  142/       8 :                     ;
(1)  143/       8 :                     ; Uses (EXX):
(1)  144/       8 :                     ; b
(1)  145/       8 :                     ;
(1)  146/       8 :                     ; Notes:
(1)  147/       8 :                     ; ONLY USE dac_on and dac_off to control
(1)  148/       8 :                     ; wave playback.
(1)  149/       8 :                     ;
(1)  150/       8 :                     ; call dac_on to enable wave playback, locks FM6
(1)  151/       8 :                     ; and
(1)  152/       8 :                     ; call dac_off to disable and enable FM6.
(1)  153/       8 :                     ; --------------------------------------------------------
(1)  154/       8 :                     
(1)  155/       8 :                     ; Samplerate is at 16000hz with minimal quality loss.
(1)  156/       8 :                     ; 		org 8
(1)  157/       8 : D9                  dac_me:		exx			; Swap regs <-- Changes between EXX(play) and RET(stop)
(1)  158/       9 : 08                  		ex	af,af'		; Swap af
(1)  159/       A : 45                  		ld	b,l		; Save pitch .00 to b
(1)  160/       B : 6C                  		ld	l,h		; l - xx.00 to 00xx
(1)  161/       C : 61                  		ld	h,c		; h - Wave buffer MSB + 00xx
(1)  162/       D : 3E 2A               		ld	a,2Ah		; YM register 2Ah
(1)  163/       F : 32 00 40            		ld	(Zym_ctrl_1),a	; Set DAC write
(1)  164/      12 : 7E                  		ld	a,(hl)		; Read wave byte
(1)  165/      13 : 32 01 40            		ld	(Zym_data_1),a	; Write it to DAC
(1)  166/      16 : 65                  		ld	h,l		; get hl back
(1)  167/      17 : 68                  		ld	l,b		; Get .00 back from b to l
(1)  168/      18 : 19                  		add	hl,de		; Pitch increment hl
(1)  169/      19 : 08                  		ex	af,af'		; Return af
(1)  170/      1A : D9                  		exx			; Return the other regs
(1)  171/      1B : C9                  		ret
(1)  172/      1C :                     
(1)  173/      1C :                     ; --------------------------------------------------------
(1)  174/      1C :                     ; 1Ch - Master tracklist pointer
(1)  175/      1C :                     gemaMstrListPos:
(1)  176/      1C : 00                  		db 0				; ** 32-bit 68k address **
(1)  177/      1D : 00                  		db 0
(1)  178/      1E : 00                  		db 0
(1)  179/      1F : 00                  		db 0
(1)  180/      20 :                     
(1)  181/      20 :                     ; --------------------------------------------------------
(1)  182/      20 :                     ; RST 20h (dac_me)
(1)  183/      20 :                     ; *** self-modifiable code ***
(1)  184/      20 :                     ;
(1)  185/      20 :                     ; Checks if the WAVE cache needs refilling to keep
(1)  186/      20 :                     ; it playing.
(1)  187/      20 :                     ;
(1)  188/      20 :                     ; *** THIS BREAKS ALL REGISTERS IF REFILL
(1)  189/      20 :                     ; IS REQUESTED ***
(1)  190/      20 :                     ; --------------------------------------------------------
(1)  191/      20 :                     
(1)  192/      20 :                     ; 		org 20h
(1)  193/      20 : F5                  dac_fill:	push	af		; <-- Changes between PUSH AF(play) and RET(stop)
(1)  194/      21 : 3A 97 1F            		ld	a,(dDacFifoMid)	; a - Get mid-way value
(1)  195/      24 : D9                  		exx
(1)  196/      25 : AC                  		xor	h		; Grab LSB.00
(1)  197/      26 : D9                  		exx
(1)  198/      27 : E6 80               		and	80h		; Check if bit changed
(1)  199/      29 : C4 65 13            		call	nz,dac_refill	; If yes: Refill and update LSB to check
(1)  200/      2C : F1                  		pop	af
(1)  201/      2D : C9                  		ret
(1)  202/      2E :                     
(1)  203/      2E :                     ; --------------------------------------------------------
(1)  204/      2E :                     ; 02Eh - User read/write values
(1)  205/      2E : 00                  commZWrite	db 0			; 2Eh: cmd fifo wptr (from 68k)
(1)  206/      2F : 00                  commZRomBlk	db 0			; 2Fh: 68k ROM block flag
(1)  207/      30 : 00                  cdRamLen	db 0			; 30h: Lenght + status
(1)  208/      31 : 00 00               cdRamDst	db 0,0			; 31h: ** Z80 destination
(1)  209/      33 : 00 00               cdRamSrc	db 0,0			; 33h: ** Source
(1)  210/      35 : 00                  cdRamSrcB	db 0			; 35h: **
(1)  211/      36 : 00                  mcdBlock	db 0			; 36h: flag to BLOCK SCD comm
(1)  212/      37 : 00                  marsBlock	db 0			; 37h: flag to BLOCK PWM transfers.
(1)  213/      38 :                     
(1)  214/      38 :                     ; --------------------------------------------------------
(1)  215/      38 :                     ; Z80 Interrupt at 0038h
(1)  216/      38 :                     ; --------------------------------------------------------
(1)  217/      38 :                     
(1)  218/      38 :                     ; 		org 38h			; Align 38h
(1)  219/      38 : ED 73 80 1F         		ld	(tickSpSet),sp	; Write TICK flag using sp (xx1F, read as tickFlag+1)
(1)  220/      3C : F3                  		di			; Disable interrupt
(1)  221/      3D : C9                  		ret
(1)  222/      3E :                     
(1)  223/      3E :                     ; --------------------------------------------------------
(1)  224/      3E :                     ; 03Eh - More user settings
(1)  225/      3E : 00                  palMode		db 0			; 3Eh: PAL mode flag
(1)  226/      3F : 00                  freeFlag	db 0
(1)  227/      40 :                     
(1)  228/      40 :                     ; --------------------------------------------------------
(1)  229/      40 :                     ; 68K Read/Write area at 40h
(1)  230/      40 :                     ; --------------------------------------------------------
(1)  231/      40 :                     
(1)  232/      40 :                     ; 		org 40h
(1)  233/      40 :                     commZfifo	ds MAX_ZCMND			; Buffer for commands: 40h bytes
(1)  234/      80 :                     
(1)  235/      80 :                     ; --------------------------------------------------------
(1)  236/      80 :                     ; Initialize
(1)  237/      80 :                     ; --------------------------------------------------------
(1)  238/      80 :                     
(1)  239/      80 :                     z80_init:
(1)  240/      80 : CD 3D 10            		call	gema_init		; Init values
(1)  241/      83 : FB                  		ei
(1)  242/      84 :                     
(1)  243/      84 :                     ; --------------------------------------------------------
(1)  244/      84 :                     ; MAIN LOOP
(1)  245/      84 :                     ; --------------------------------------------------------
(1)  246/      84 :                     
(1)  247/      84 :                     drv_loop:
(1)  248/      84 : CF                  		rst	8
(1)  249/      85 : CD B1 10            		call	get_tick		; Check tick on VBlank
(1)  250/      88 : E7                  		rst	20h			; Refill wave
(1)  251/      89 : CF                  		rst	8
(1)  252/      8A : 06 00               		ld	b,0			; b - Reset current flags (beat|tick)
(1)  253/      8C : 3A 82 1F            		ld	a,(tickCnt)		; Decrement tick counter
(1)  254/      8F : D6 01               		sub	1
(1)  255/      91 : 38 0B               		jr	c,.noticks
(1)  256/      93 : 32 82 1F            		ld	(tickCnt),a
(1)  257/      96 : CD 8A 11            		call	chip_env		; Process PSG and YM
(1)  258/      99 : CD B1 10            		call	get_tick		; Check for another tick
(1)  259/      9C : 06 01               		ld 	b,01b			; Set TICK (01b) flag, and clear BEAT
(1)  260/      9E :                     .noticks:
(1)  261/      9E : 3A A1 1F            		ld	a,(sbeatAcc+1)		; check beat counter (scaled by tempo)
(1)  262/      A1 : D6 01               		sub	1
(1)  263/      A3 : 38 06               		jr	c,.nobeats
(1)  264/      A5 : CF                  		rst	8
(1)  265/      A6 : 32 A1 1F            		ld	(sbeatAcc+1),a		; 1/24 beat passed.
(1)  266/      A9 : CB C8               		set	1,b			; Set BEAT (10b) flag
(1)  267/      AB :                     .nobeats:
(1)  268/      AB : CF                  		rst	8
(1)  269/      AC : 78                  		ld	a,b			; Any beat/tick change?
(1)  270/      AD : B7                  		or	a
(1)  271/      AE : 28 14               		jr	z,.neither
(1)  272/      B0 : 32 96 1F            		ld	(currTickBits),a	; Save BEAT/TICK bits
(1)  273/      B3 : CF                  		rst	8
(1)  274/      B4 : CD B1 10            		call	get_tick
(1)  275/      B7 : CD 13 06            		call	set_chips		; Send changes to sound chips
(1)  276/      BA : CD B1 10            		call	get_tick
(1)  277/      BD : CF                  		rst	8
(1)  278/      BE : CD 36 02            		call	upd_track		; Update track data
(1)  279/      C1 : CD B1 10            		call	get_tick
(1)  280/      C4 :                     .neither:
(1)  281/      C4 : CF                  		rst	8
(1)  285/      C5 : CD B1 10            		call	get_tick
(1)  286/      C8 :                     .next_cmd:
(1)  287/      C8 : 3A 2E 00            		ld	a,(commZWrite)		; Check command READ and WRITE indexes
(1)  288/      CB : 47                  		ld	b,a
(1)  289/      CC : 3A 85 1F            		ld	a,(commZRead)
(1)  290/      CF : B8                  		cp	b
(1)  291/      D0 : 28 B2               		jr	z,drv_loop		; If both are equal: no requests
(1)  292/      D2 : CF                  		rst	8
(1)  293/      D3 : CD EB 00            		call	.grab_arg
(1)  294/      D6 : FE FF               		cp	-1			; Got -1? (Start of command)
(1)  295/      D8 : 20 AA               		jr	nz,drv_loop
(1)  296/      DA : CD EB 00            		call	.grab_arg		; Read command number
(1)  297/      DD : 87                  		add	a,a			; * 2
(1)  298/      DE : 21 0A 01            		ld	hl,.list		; Then jump to one of these...
(1)  299/      E1 : 16 00               		ld	d,0
(1)  300/      E3 : 5F                  		ld	e,a
(1)  301/      E4 : 19                  		add	hl,de
(1)  302/      E5 : 7E                  		ld	a,(hl)
(1)  303/      E6 : 23                  		inc	hl
(1)  304/      E7 : 66                  		ld	h,(hl)
(1)  305/      E8 : CF                  		rst	8
(1)  306/      E9 : 6F                  		ld	l,a
(1)  307/      EA : E9                  		jp	(hl)
(1)  308/      EB :                     
(1)  309/      EB :                     ; --------------------------------------------------------
(1)  310/      EB :                     ; Read cmd byte, auto re-rolls to 3Fh
(1)  311/      EB :                     ; --------------------------------------------------------
(1)  312/      EB :                     
(1)  313/      EB :                     .grab_arg:
(1)  314/      EB : D5                  		push	de
(1)  315/      EC : E5                  		push	hl
(1)  316/      ED :                     .getcbytel:
(1)  317/      ED : 3A 2E 00            		ld	a,(commZWrite)
(1)  318/      F0 : 57                  		ld	d,a
(1)  319/      F1 : CF                  		rst	8
(1)  320/      F2 : 3A 85 1F            		ld	a,(commZRead)
(1)  321/      F5 : BA                  		cp	d
(1)  322/      F6 : 28 F5               		jr	z,.getcbytel	; wait until these counters change.
(1)  323/      F8 : 16 00               		ld	d,0
(1)  324/      FA : 5F                  		ld	e,a
(1)  325/      FB : 21 40 00            		ld	hl,commZfifo
(1)  326/      FE : 19                  		add	hl,de
(1)  327/      FF : CF                  		rst	8
(1)  328/     100 : 3C                  		inc	a
(1)  329/     101 : E6 3F               		and	MAX_ZCMND-1		; ** command list limit
(1)  330/     103 : 32 85 1F            		ld	(commZRead),a
(1)  331/     106 : 7E                  		ld	a,(hl)		; a - the byte we got
(1)  332/     107 : E1                  		pop	hl
(1)  333/     108 : D1                  		pop	de
(1)  334/     109 : C9                  		ret
(1)  335/     10A :                     
(1)  336/     10A :                     ; --------------------------------------------------------
(1)  337/     10A :                     
(1)  338/     10A :                     .list:
(1)  339/     10A : 2A 01               		dw .cmnd_0		; 00h -
(1)  340/     10C : 2D 01               		dw .cmnd_1		; 01h - Set Master tracklist
(1)  341/     10E : 46 01               		dw .cmnd_2		; 02h - Play by track number
(1)  342/     110 : 99 01               		dw .cmnd_3		; 03h - Stop by track number
(1)  343/     112 : 2A 01               		dw .cmnd_0		; 04h -
(1)  344/     114 : 2A 01               		dw .cmnd_0		; 05h -
(1)  345/     116 : 2A 01               		dw .cmnd_0		; 06h -
(1)  346/     118 : 2A 01               		dw .cmnd_0		; 07h -
(1)  347/     11A : DD 01               		dw .cmnd_8		; 08h - Stop ALL
(1)  348/     11C : 2A 01               		dw .cmnd_0		; 09h -
(1)  349/     11E : 2A 01               		dw .cmnd_0		; 0Ah -
(1)  350/     120 : 2A 01               		dw .cmnd_0		; 0Bh -
(1)  351/     122 : FF 01               		dw .cmnd_C		; 0Ch - Set GLOBAL sub-beats
(1)  352/     124 : 2A 01               		dw .cmnd_0		; 0Dh -
(1)  353/     126 : 2A 01               		dw .cmnd_0		; 0Eh -
(1)  354/     128 : 2A 01               		dw .cmnd_0		; 0Fh -
(1)  355/     12A :                     
(1)  356/     12A :                     ; --------------------------------------------------------
(1)  357/     12A :                     ; Command 00h
(1)  358/     12A :                     ;
(1)  359/     12A :                     ; Reserved for TESTING purposes.
(1)  360/     12A :                     ; --------------------------------------------------------
(1)  361/     12A :                     
(1)  362/     12A :                     ; TEST COMMAND
(1)  363/     12A :                     
(1)  364/     12A :                     .cmnd_0:
(1)  365/     12A :                     ; 		ld	a,DacIns_TEST>>16
(1)  366/     12A :                     ; 		ld	hl,(DacIns_TEST+6)&0FFFFh
(1)  367/     12A :                     ; 		ld	(wave_Start),hl
(1)  368/     12A :                     ; 		ld	(wave_Start+2),a
(1)  369/     12A :                     ; 		ld	a,02h
(1)  370/     12A :                     ; 		ld	hl,04000h
(1)  371/     12A :                     ; 		ld	(wave_Len),hl
(1)  372/     12A :                     ; 		ld	(wave_Len+2),a
(1)  373/     12A :                     ; 		ld	bc,0
(1)  374/     12A :                     ; 		ld	(wave_Loop),bc
(1)  375/     12A :                     ; 		ld	hl,100h
(1)  376/     12A :                     ; 		ld	(wave_Pitch),hl
(1)  377/     12A :                     ; 		ld	a,1
(1)  378/     12A :                     ; 		ld	(wave_Flags),a
(1)  379/     12A :                     ; 		call	dac_play
(1)  380/     12A : C3 C8 00            		jp	.next_cmd
(1)  381/     12D :                     
(1)  382/     12D :                     ; --------------------------------------------------------
(1)  383/     12D :                     ; Command 01h:
(1)  384/     12D :                     ;
(1)  385/     12D :                     ; Set Tracks MASTER list.
(1)  386/     12D :                     ; --------------------------------------------------------
(1)  387/     12D :                     
(1)  388/     12D :                     .cmnd_1:
(1)  389/     12D : 21 1F 00            		ld	hl,gemaMstrListPos+3
(1)  390/     130 : CD EB 00            		call	.grab_arg	; $000000xx
(1)  391/     133 : 77                  		ld	(hl),a
(1)  392/     134 : 2B                  		dec	hl
(1)  393/     135 : CD EB 00            		call	.grab_arg	; $0000xx00
(1)  394/     138 : 77                  		ld	(hl),a
(1)  395/     139 : 2B                  		dec	hl
(1)  396/     13A : CD EB 00            		call	.grab_arg	; $00xx0000
(1)  397/     13D : 77                  		ld	(hl),a
(1)  398/     13E : 2B                  		dec	hl
(1)  399/     13F : CD EB 00            		call	.grab_arg	; $0000xx00
(1)  400/     142 : 77                  		ld	(hl),a
(1)  401/     143 : C3 C8 00            		jp	.next_cmd
(1)  402/     146 :                     
(1)  403/     146 :                     ; --------------------------------------------------------
(1)  404/     146 :                     ; Command 02h:
(1)  405/     146 :                     ;
(1)  406/     146 :                     ; Make new track by sequence number
(1)  407/     146 :                     ;
(1)  408/     146 :                     ; SeqID,BlockPos,SlotIndex(-1 searchfree)
(1)  409/     146 :                     ; --------------------------------------------------------
(1)  410/     146 :                     
(1)  411/     146 :                     .cmnd_2:
(1)  412/     146 : CD EB 00            		call	.grab_arg	; d0: Sequence ID
(1)  413/     149 : 4F                  		ld	c,a		; copy to c
(1)  414/     14A : CD EB 00            		call	.grab_arg	; d1: Block from
(1)  415/     14D : 47                  		ld	b,a
(1)  416/     14E : CF                  		rst	8
(1)  417/     14F : CD EB 00            		call	.grab_arg	; d2: Slot index
(1)  418/     152 : FD 21 C6 18         		ld	iy,nikona_BuffList
(1)  419/     156 : FE FF               		cp	-1
(1)  420/     158 : 28 16               		jr	z,.srch_mode
(1)  421/     15A : FE 03               		cp	(nikona_BuffList_e-nikona_BuffList)/SIZE_BUFFLIST	; <-- limit trick
(1)  422/     15C : D2 C8 00            		jp	nc,.next_cmd
(1)  423/     15F : 87                  		add	a,a		; ** MANUAL SIZE_BUFFLIST
(1)  424/     160 : 87                  		add	a,a		; id*8
(1)  425/     161 : 87                  		add	a,a
(1)  426/     162 : 16 00               		ld	d,0
(1)  427/     164 : 5F                  		ld	e,a
(1)  428/     165 : FD 19               		add	iy,de
(1)  429/     167 : FD 7E 00            		ld	a,(iy)
(1)  430/     16A : FD 66 01            		ld	h,(iy+1)
(1)  431/     16D : 6F                  		ld	l,a
(1)  432/     16E : 18 1B               		jr	.wrtto_slot
(1)  433/     170 :                     ; -1
(1)  434/     170 :                     .srch_mode:
(1)  435/     170 : 16 00               		ld	d,0
(1)  436/     172 :                     .next:
(1)  437/     172 : FD 7E 00            		ld	a,(iy)
(1)  438/     175 : FE FF               		cp	-1
(1)  439/     177 : CA C8 00            		jp	z,.next_cmd		; Failed search
(1)  440/     17A : FD 66 01            		ld	h,(iy+1)
(1)  441/     17D : 6F                  		ld	l,a
(1)  442/     17E : CF                  		rst	8
(1)  443/     17F : 7E                  		ld	a,(hl)			; trk_Status: Track is active != 0?
(1)  444/     180 : B7                  		or	a
(1)  445/     181 : 28 08               		jr	z,.wrtto_slot
(1)  446/     183 : 11 08 00            		ld	de,SIZE_BUFFLIST
(1)  447/     186 : FD 19               		add	iy,de
(1)  448/     188 : CF                  		rst	8
(1)  449/     189 : 18 E7               		jr	.next
(1)  450/     18B :                     .wrtto_slot:
(1)  451/     18B : 36 C0               		ld	(hl),0C0h	; ** Write trk_Status flags: Enable+Restart
(1)  452/     18D : 23                  		inc	hl
(1)  453/     18E : CF                  		rst	8
(1)  454/     18F : 71                  		ld	(hl),c		; ** write trk_SeqId
(1)  455/     190 : 23                  		inc	hl
(1)  456/     191 : 70                  		ld	(hl),b		; ** write trk_SetBlk
(1)  457/     192 : 79                  		ld	a,c
(1)  458/     193 : CD E5 05            		call	get_RomTrcks
(1)  459/     196 : C3 C8 00            		jp	.next_cmd
(1)  460/     199 :                     
(1)  461/     199 :                     ; --------------------------------------------------------
(1)  462/     199 :                     ; Command 03h:
(1)  463/     199 :                     ;
(1)  464/     199 :                     ; Stop track by sequence number
(1)  465/     199 :                     ;
(1)  466/     199 :                     ; SeqID,SlotIndex(-1 allslots)
(1)  467/     199 :                     ; --------------------------------------------------------
(1)  468/     199 :                     
(1)  469/     199 :                     .cmnd_3:
(1)  470/     199 : CD EB 00            		call	.grab_arg	; d0: Sequence ID
(1)  471/     19C : 4F                  		ld	c,a		; copy to c
(1)  472/     19D : CD EB 00            		call	.grab_arg	; d1: Slot index
(1)  473/     1A0 : FD 21 C6 18         		ld	iy,nikona_BuffList
(1)  474/     1A4 : FE FF               		cp	-1
(1)  475/     1A6 : 28 1A               		jr	z,.srch_del
(1)  476/     1A8 : FE 03               		cp	(nikona_BuffList_e-nikona_BuffList)/SIZE_BUFFLIST	; <-- limit trick
(1)  477/     1AA : D2 C8 00            		jp	nc,.next_cmd
(1)  478/     1AD : 87                  		add	a,a		; ** MANUAL SIZE_BUFFLIST
(1)  479/     1AE : 87                  		add	a,a		; id*8
(1)  480/     1AF : 87                  		add	a,a
(1)  481/     1B0 : 16 00               		ld	d,0
(1)  482/     1B2 : 5F                  		ld	e,a
(1)  483/     1B3 : FD 19               		add	iy,de
(1)  484/     1B5 : FD 7E 00            		ld	a,(iy)
(1)  485/     1B8 : FD 66 01            		ld	h,(iy+1)
(1)  486/     1BB : 6F                  		ld	l,a
(1)  487/     1BC : CD D6 01            		call	.wrtto_del
(1)  488/     1BF : C3 C8 00            		jp	.next_cmd
(1)  489/     1C2 :                     ; -1
(1)  490/     1C2 :                     .srch_del:
(1)  491/     1C2 : CD 10 02            		call	.srch_for
(1)  492/     1C5 : FE FF               		cp	-1
(1)  493/     1C7 : CA C8 00            		jp	z,.next_cmd
(1)  494/     1CA : 7E                  		ld	a,(hl)
(1)  495/     1CB : CB 7F               		bit	7,a
(1)  496/     1CD : CA C2 01            		jp	z,.srch_del
(1)  497/     1D0 : CD D6 01            		call	.wrtto_del
(1)  498/     1D3 : C3 C2 01            		jp	.srch_del
(1)  499/     1D6 :                     
(1)  500/     1D6 :                     .wrtto_del:
(1)  501/     1D6 : 36 FF               		ld	(hl),-1		; Flags | Enable+Restart bits
(1)  502/     1D8 : 23                  		inc	hl
(1)  503/     1D9 : 36 FF               		ld	(hl),-1		; Reset seqId
(1)  504/     1DB : CF                  		rst	8
(1)  505/     1DC : C9                  		ret
(1)  506/     1DD :                     
(1)  507/     1DD :                     ; --------------------------------------------------------
(1)  508/     1DD :                     ; Command 08h:
(1)  509/     1DD :                     ;
(1)  510/     1DD :                     ; Stop ALL tracks
(1)  511/     1DD :                     ; --------------------------------------------------------
(1)  512/     1DD :                     
(1)  513/     1DD :                     .cmnd_8:
(1)  514/     1DD : DD 21 C6 18         		ld	ix,nikona_BuffList
(1)  515/     1E1 :                     .next_sall:
(1)  516/     1E1 : DD 7E 00            		ld	a,(ix)
(1)  517/     1E4 : FE FF               		cp	-1
(1)  518/     1E6 : CA C8 00            		jp	z,.next_cmd
(1)  519/     1E9 : DD 66 01            		ld	h,(ix+1)
(1)  520/     1EC : 6F                  		ld	l,a
(1)  521/     1ED : 7E                  		ld	a,(hl)		; *** trk_Status
(1)  522/     1EE : CB 7F               		bit	7,a
(1)  523/     1F0 : 28 05               		jr	z,.not_on
(1)  524/     1F2 : 36 FF               		ld	(hl),-1		; *** trk_Status: -1 request
(1)  525/     1F4 : 23                  		inc	hl
(1)  526/     1F5 : 36 FF               		ld	(hl),-1		; Reset seqId
(1)  527/     1F7 :                     .not_on:
(1)  528/     1F7 : 11 08 00            		ld	de,SIZE_BUFFLIST
(1)  529/     1FA : DD 19               		add	ix,de
(1)  530/     1FC : C3 E1 01            		jp	.next_sall
(1)  531/     1FF :                     
(1)  532/     1FF :                     ; --------------------------------------------------------
(1)  533/     1FF :                     ; Command 0Ch:
(1)  534/     1FF :                     ;
(1)  535/     1FF :                     ; Set global sub-beats
(1)  536/     1FF :                     ; --------------------------------------------------------
(1)  537/     1FF :                     
(1)  538/     1FF :                     .cmnd_C:
(1)  539/     1FF : CD EB 00            		call	.grab_arg	; d0.w: $00xx
(1)  540/     202 : 4F                  		ld	c,a
(1)  541/     203 : CD EB 00            		call	.grab_arg	; d0.w: $xx00
(1)  542/     206 : 32 A3 1F            		ld	(sbeatPtck+1),a
(1)  543/     209 : 79                  		ld	a,c
(1)  544/     20A : 32 A2 1F            		ld	(sbeatPtck),a
(1)  545/     20D : C3 C8 00            		jp	.next_cmd
(1)  546/     210 :                     
(1)  547/     210 :                     
(1)  548/     210 :                     ; ------------------------------------------------
(1)  549/     210 :                     ; c - Sequence ID to search
(1)  550/     210 :                     
(1)  551/     210 :                     .srch_for:
(1)  552/     210 : 16 00               		ld	d,0
(1)  553/     212 :                     .next_f:
(1)  554/     212 : FD 7E 00            		ld	a,(iy)
(1)  555/     215 : FE FF               		cp	-1
(1)  556/     217 : C8                  		ret	z
(1)  557/     218 : FD 66 01            		ld	h,(iy+1)
(1)  558/     21B : 6F                  		ld	l,a
(1)  559/     21C : 11 08 00            		ld	de,SIZE_BUFFLIST
(1)  560/     21F : FD 19               		add	iy,de
(1)  561/     221 : E5                  		push	hl
(1)  562/     222 : DD E1               		pop	ix
(1)  563/     224 : CF                  		rst	8
(1)  564/     225 : DD 7E 00            		ld	a,(ix+trk_Status)			; trk_Status: Track is active != 0?
(1)  565/     228 : B7                  		or	a
(1)  566/     229 : 28 E7               		jr	z,.next_f
(1)  567/     22B : DD 7E 01            		ld	a,(ix+trk_SeqId)
(1)  568/     22E : B9                  		cp	c
(1)  569/     22F : 28 03               		jr	z,.found_f
(1)  570/     231 : CF                  		rst	8
(1)  571/     232 : 18 DE               		jr	.next_f
(1)  572/     234 :                     .found_f:
(1)  573/     234 : AF                  		xor	a
(1)  574/     235 : C9                  		ret
(1)  575/     236 :                     
(1)  576/     236 :                     ; ====================================================================
(1)  577/     236 :                     ; ----------------------------------------------------------------
(1)  578/     236 :                     ; MAIN Playback section
(1)  579/     236 :                     ; ----------------------------------------------------------------
(1)  580/     236 :                     
(1)  581/     236 :                     ; ============================================================
(1)  582/     236 :                     ; --------------------------------------------------------
(1)  583/     236 :                     ; Read INTERNAL mini-impulse-tracker data
(1)  584/     236 :                     ; --------------------------------------------------------
(1)  585/     236 :                     
(1)  586/     236 :                     upd_track:
(1)  587/     236 : E7                  		rst	20h
(1)  588/     237 : CD B1 10            		call	get_tick
(1)  589/     23A : FD 21 C6 18         		ld	iy,nikona_BuffList
(1)  590/     23E :                     .trk_buffrs:
(1)  591/     23E : FD 7E 00            		ld	a,(iy)
(1)  592/     241 : FE FF               		cp	-1
(1)  593/     243 : C8                  		ret	z
(1)  594/     244 : CF                  		rst	8
(1)  595/     245 : FD E5               		push	iy
(1)  596/     247 : FD 6E 00            		ld	l,(iy)
(1)  597/     24A : FD 66 01            		ld	h,(iy+1)
(1)  598/     24D : CD 59 02            		call	.read_track
(1)  599/     250 : FD E1               		pop	iy
(1)  600/     252 : 11 08 00            		ld	de,SIZE_BUFFLIST
(1)  601/     255 : FD 19               		add	iy,de
(1)  602/     257 : 18 E5               		jr	.trk_buffrs
(1)  603/     259 :                     ; ----------------------------------------
(1)  604/     259 :                     ; iy - Track buffer
(1)  605/     259 :                     
(1)  606/     259 :                     .read_track:
(1)  607/     259 : CF                  		rst	8
(1)  608/     25A : E5                  		push	hl
(1)  609/     25B : FD E1               		pop	iy
(1)  610/     25D : FD 46 00            		ld	b,(iy+trk_Status)	; b - Track status and settings
(1)  611/     260 : CB 78               		bit	7,b			; bit7: Track active?
(1)  612/     262 : C8                  		ret	z
(1)  613/     263 : 78                  		ld	a,b
(1)  614/     264 : FE FF               		cp	-1			; Mid-silence request?
(1)  615/     266 : C8                  		ret	z
(1)  616/     267 : CF                  		rst	8
(1)  617/     268 : 3A 96 1F            		ld	a,(currTickBits)	; a - Tick/Beat bits
(1)  618/     26B : CB 40               		bit	0,b			; bit0: This track uses Beats?
(1)  619/     26D : 28 03               		jr	z,.sfxmd
(1)  620/     26F : CB 4F               		bit	1,a			; BEAT passed?
(1)  621/     271 : C8                  		ret	z			;
(1)  622/     272 :                     .sfxmd:
(1)  623/     272 : CB 47               		bit	0,a			; TICK passed?
(1)  624/     274 : C8                  		ret	z
(1)  625/     275 : CF                  		rst	8
(1)  626/     276 :                     	; *** Start reading notes ***
(1)  627/     276 : CB 70               		bit	6,b			; bit6: Restart/First time?
(1)  628/     278 : C4 07 05            		call	nz,.first_fill
(1)  629/     27B : CB 68               		bit	5,b			; bit5: FILL request by effect?
(1)  630/     27D : C4 00 05            		call	nz,.effect_fill
(1)  631/     280 : FD 7E 0F            		ld	a,(iy+trk_tickTmr)	; TICK ex-timer for this track
(1)  632/     283 : 3D                  		dec	a
(1)  633/     284 : FD 77 0F            		ld	(iy+trk_tickTmr),a
(1)  634/     287 : B7                  		or	a
(1)  635/     288 : C0                  		ret	nz			; If TICK != 0, Exit
(1)  636/     289 : CF                  		rst	8
(1)  637/     28A : FD 7E 03            		ld	a,(iy+trk_TickSet)	; Set new tick timer
(1)  638/     28D : FD 77 0F            		ld	(iy+trk_tickTmr),a
(1)  639/     290 : FD 4E 0C            		ld	c,(iy+trk_Rows)		; bc - Set row counter
(1)  640/     293 : FD 46 0D            		ld	b,(iy+(trk_Rows+1))
(1)  641/     296 : 79                  		ld	a,c			; Check rowcount
(1)  642/     297 : B0                  		or	b
(1)  643/     298 : 20 14               		jr	nz,.row_active
(1)  644/     29A : CF                  		rst	8
(1)  645/     29B : FD 7E 10            		ld	a,(iy+trk_currBlk)	; If bc == 0: Next block
(1)  646/     29E : 3C                  		inc	a
(1)  647/     29F : FD 77 10            		ld 	(iy+trk_currBlk),a
(1)  648/     2A2 : CD 14 04            		call	.set_track
(1)  649/     2A5 : FE FF               		cp	-1			; Track finished?
(1)  650/     2A7 : C8                  		ret	z
(1)  651/     2A8 : FD 4E 0C            		ld	c,(iy+trk_Rows)
(1)  652/     2AB : FD 46 0D            		ld	b,(iy+(trk_Rows+1))
(1)  653/     2AE :                     .row_active:
(1)  654/     2AE : CF                  		rst	8
(1)  655/     2AF : FD 6E 0A            		ld	l,(iy+trk_Read)		; hl - CURRENT pattern to read
(1)  656/     2B2 : FD 66 0B            		ld	h,(iy+((trk_Read+1)))
(1)  657/     2B5 :                     
(1)  658/     2B5 :                     ; --------------------------------
(1)  659/     2B5 :                     ; Main reading loop
(1)  660/     2B5 :                     ; --------------------------------
(1)  661/     2B5 :                     
(1)  662/     2B5 :                     .next_note:
(1)  663/     2B5 : FD 7E 0E            		ld	a,(iy+trk_rowPause)	; Check rowtimer
(1)  664/     2B8 : B7                  		or	a
(1)  665/     2B9 : 20 16               		jr	nz,.decrow
(1)  666/     2BB : 7E                  		ld	a,(hl)			; Check if timer or note
(1)  667/     2BC : B7                  		or	a
(1)  668/     2BD : 28 06               		jr	z,.exit			; If == 00h: exit
(1)  669/     2BF : FA DC 02            		jp	m,.has_note		; 80h-0FFh: note data
(1)  670/     2C2 : FD 77 0E            		ld	(iy+trk_rowPause),a
(1)  671/     2C5 :                     
(1)  672/     2C5 :                     ; --------------------------------
(1)  673/     2C5 :                     ; Exit
(1)  674/     2C5 :                     ; --------------------------------
(1)  675/     2C5 :                     
(1)  676/     2C5 :                     .exit:
(1)  677/     2C5 : CF                  		rst	8
(1)  678/     2C6 : CD DC 03            		call	.inc_cpatt
(1)  679/     2C9 : FD 75 0A            		ld	(iy+trk_Read),l		; Update read location
(1)  680/     2CC : FD 74 0B            		ld	(iy+((trk_Read+1))),h
(1)  681/     2CF : 18 03               		jr	.decrow_e
(1)  682/     2D1 :                     .decrow:
(1)  683/     2D1 : FD 35 0E            		dec	(iy+trk_rowPause)
(1)  684/     2D4 :                     .decrow_e:
(1)  685/     2D4 : 0B                  		dec	bc			; Decrement this row
(1)  686/     2D5 : FD 71 0C            		ld	(iy+trk_Rows),c		; Write last row and exit.
(1)  687/     2D8 : FD 70 0D            		ld	(iy+(trk_Rows+1)),b
(1)  688/     2DB : C9                  		ret
(1)  689/     2DC :                     
(1)  690/     2DC :                     ; --------------------------------
(1)  691/     2DC :                     ; New note request
(1)  692/     2DC :                     ;
(1)  693/     2DC :                     ; a - %1tcccccc
(1)  694/     2DC :                     ;   | t - type setup
(1)  695/     2DC :                     ;   | c - channel
(1)  696/     2DC :                     ; --------------------------------
(1)  697/     2DC :                     
(1)  698/     2DC :                     .has_note:
(1)  699/     2DC : CF                  		rst	8
(1)  700/     2DD : C5                  		push	bc			; Save rowcount
(1)  701/     2DE :                     
(1)  702/     2DE : 4F                  		ld	c,a
(1)  703/     2DF : CD DC 03            		call	.inc_cpatt
(1)  704/     2E2 : E5                  		push	hl
(1)  705/     2E3 : FD E5               		push	iy
(1)  706/     2E5 : E1                  		pop	hl
(1)  707/     2E6 : DD 21 00 1E         		ld	ix,trkChnls
(1)  708/     2EA : 11 22 00            		ld	de,trk_ChnIndx
(1)  709/     2ED : CF                  		rst	8
(1)  710/     2EE : 19                  		add	hl,de
(1)  711/     2EF : 79                  		ld	a,c
(1)  712/     2F0 : E6 1F               		and	00011111b
(1)  713/     2F2 : 5F                  		ld	e,a
(1)  714/     2F3 : 19                  		add	hl,de
(1)  715/     2F4 : 7E                  		ld	a,(hl)		; Check index byte
(1)  716/     2F5 : B7                  		or	a
(1)  717/     2F6 : 28 0A               		jr	z,.srch_new	; If == 0, new index
(1)  718/     2F8 : E6 1F               		and	00011111b
(1)  719/     2FA : 87                  		add	a,a
(1)  720/     2FB : 87                  		add	a,a
(1)  721/     2FC : 87                  		add	a,a
(1)  722/     2FD : 5F                  		ld	e,a
(1)  723/     2FE : DD 19               		add	ix,de
(1)  724/     300 :                     ; 		ld	a,(ix+chnl_Flags)
(1)  725/     300 :                     ; 		and	10000000b
(1)  726/     300 :                     ; 		jr	z,$
(1)  727/     300 : 18 2B               		jr	.cont_chnl
(1)  728/     302 :                     ; Make NEW channel
(1)  729/     302 :                     ; ix - channel list start
(1)  730/     302 :                     .srch_new:
(1)  731/     302 : CF                  		rst	8
(1)  732/     303 : 06 1F               		ld	b,MAX_TRKCHN-1
(1)  733/     305 : 16 00               		ld	d,0
(1)  734/     307 :                     .next_chnl:
(1)  735/     307 : DD 7E 00            		ld	a,(ix)			; chnl_Flags
(1)  736/     30A : B7                  		or	a
(1)  737/     30B : F2 22 03            		jp	p,.chnl_free
(1)  738/     30E : DD 23               		inc	ix			; <-- manual increment
(1)  739/     310 : DD 23               		inc	ix
(1)  740/     312 : DD 23               		inc	ix
(1)  741/     314 : DD 23               		inc	ix
(1)  742/     316 : CF                  		rst	8
(1)  743/     317 : DD 23               		inc	ix
(1)  744/     319 : DD 23               		inc	ix
(1)  745/     31B : DD 23               		inc	ix
(1)  746/     31D : DD 23               		inc	ix
(1)  747/     31F : 14                  		inc	d
(1)  748/     320 : 10 E5               		djnz	.next_chnl
(1)  749/     322 :                     .chnl_free:
(1)  750/     322 : CF                  		rst	8
(1)  751/     323 : 7A                  		ld	a,d
(1)  752/     324 : E6 1F               		and	00011111b
(1)  753/     326 : F6 80               		or	10000000b
(1)  754/     328 : 77                  		ld	(hl),a			; Set index slot
(1)  755/     329 : DD CB 00 FE         		set	7,(ix+chnl_Flags)	; Enable this channel
(1)  756/     32D :                     .cont_chnl:
(1)  757/     32D : E1                  		pop	hl
(1)  758/     32E : CF                  		rst	8
(1)  759/     32F :                     	; ix - current channel
(1)  760/     32F : DD 46 07            		ld	b,(ix+chnl_Type)	; b - Current TYPE byte
(1)  761/     332 : CB 71               		bit	6,c			; Next byte is new type?
(1)  762/     334 : 28 08               		jr	z,.old_type
(1)  763/     336 : 7E                  		ld	a,(hl)
(1)  764/     337 : DD 77 07            		ld	(ix+chnl_Type),a	; Update TYPE byte
(1)  765/     33A : 47                  		ld	b,a			; Set to b
(1)  766/     33B : CD DC 03            		call	.inc_cpatt
(1)  767/     33E :                     .old_type:
(1)  768/     33E :                     	; b - evinEVIN
(1)  769/     33E :                     	;     E-effect/V-volume/I-instrument/N-note
(1)  770/     33E :                     	;     evin: byte is already stored on track-channel buffer
(1)  771/     33E :                     	;     EVIN: next byte(s) contain a new value. for eff:2 bytes
(1)  772/     33E : CF                  		rst	8
(1)  773/     33F : CB 40               		bit	0,b
(1)  774/     341 : 28 07               		jr	z,.no_note
(1)  775/     343 : 7E                  		ld	a,(hl)
(1)  776/     344 : DD 77 02            		ld	(ix+chnl_Note),a
(1)  777/     347 : CD DC 03            		call	.inc_cpatt
(1)  778/     34A :                     .no_note:
(1)  779/     34A : CB 48               		bit	1,b
(1)  780/     34C : 28 07               		jr	z,.no_ins
(1)  781/     34E : 7E                  		ld	a,(hl)
(1)  782/     34F : DD 77 03            		ld	(ix+chnl_Ins),a
(1)  783/     352 : CD DC 03            		call	.inc_cpatt
(1)  784/     355 :                     .no_ins:
(1)  785/     355 : CB 50               		bit	2,b
(1)  786/     357 : 28 07               		jr	z,.no_vol
(1)  787/     359 : 7E                  		ld	a,(hl)
(1)  788/     35A : DD 77 04            		ld	(ix+chnl_Vol),a
(1)  789/     35D : CD DC 03            		call	.inc_cpatt
(1)  790/     360 :                     .no_vol:
(1)  791/     360 : CB 58               		bit	3,b
(1)  792/     362 : 28 0F               		jr	z,.no_eff
(1)  793/     364 : 7E                  		ld	a,(hl)
(1)  794/     365 : DD 77 05            		ld	(ix+chnl_EffId),a
(1)  795/     368 : CD DC 03            		call	.inc_cpatt
(1)  796/     36B : CF                  		rst	8
(1)  797/     36C : 7E                  		ld	a,(hl)
(1)  798/     36D : DD 77 06            		ld	(ix+chnl_EffArg),a
(1)  799/     370 : CD DC 03            		call	.inc_cpatt
(1)  800/     373 :                     .no_eff:
(1)  801/     373 : 78                  		ld	a,b		; Merge the Impulse recycle bits into main bits
(1)  802/     374 : 0F                  		rrca
(1)  803/     375 : 0F                  		rrca
(1)  804/     376 : 0F                  		rrca
(1)  805/     377 : 0F                  		rrca
(1)  806/     378 : E6 0F               		and	00001111b
(1)  807/     37A : 4F                  		ld	c,a
(1)  808/     37B : 78                  		ld	a,b
(1)  809/     37C : E6 0F               		and	00001111b
(1)  810/     37E : B1                  		or	c
(1)  811/     37F : CF                  		rst	8
(1)  812/     380 : 4F                  		ld	c,a
(1)  813/     381 : DD 7E 00            		ld	a,(ix+chnl_Flags)
(1)  814/     384 : B1                  		or	c
(1)  815/     385 : DD 77 00            		ld	(ix+chnl_Flags),a
(1)  816/     388 :                     	; Check for effects that affect
(1)  817/     388 :                     	; internal playback:
(1)  818/     388 :                     	; Jump, Ticks, etc.
(1)  819/     388 : C1                  		pop	bc		; Restore rowcount
(1)  820/     389 : DD 7E 00            		ld	a,(ix+chnl_Flags)
(1)  821/     38C : E6 08               		and	1000b		; Only check for the EFFECT bit
(1)  822/     38E : CA B5 02            		jp	z,.next_note
(1)  823/     391 : DD 7E 05            		ld	a,(ix+chnl_EffId)
(1)  824/     394 : B7                  		or	a		; 00h = invalid effect
(1)  825/     395 : CA B5 02            		jp	z,.next_note
(1)  826/     398 : FE 01               		cp	1		; Effect A: Tick set
(1)  827/     39A : CC AA 03            		call	z,.eff_A
(1)  828/     39D : FE 02               		cp	2		; Effect B: Position Jump
(1)  829/     39F : CC BB 03            		call	z,.eff_B
(1)  830/     3A2 : FE 03               		cp	3		; Effect C: Pattern break
(1)  831/     3A4 : CA D9 03            		jp	z,.eff_C	; <-- JUMP and exit.
(1)  832/     3A7 : C3 B5 02            		jp	.next_note
(1)  833/     3AA :                     
(1)  834/     3AA :                     ; ----------------------------------------
(1)  835/     3AA :                     ; Effect A: Set ticks
(1)  836/     3AA :                     ; ----------------------------------------
(1)  837/     3AA :                     
(1)  838/     3AA :                     .eff_A:
(1)  839/     3AA : F5                  		push	af
(1)  840/     3AB : CF                  		rst	8
(1)  841/     3AC : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - ticks number
(1)  842/     3AF : FD 73 03            		ld	(iy+trk_TickSet),e	; set for both Set and Timer.
(1)  843/     3B2 : FD 73 0F            		ld	(iy+trk_tickTmr),e
(1)  844/     3B5 : DD CB 00 9E         		res	3,(ix+chnl_Flags)	; <-- Clear EFFECT bit
(1)  845/     3B9 : F1                  		pop	af
(1)  846/     3BA : C9                  		ret
(1)  847/     3BB :                     
(1)  848/     3BB :                     ; ----------------------------------------
(1)  849/     3BB :                     ; Effect B: jump to a new block
(1)  850/     3BB :                     ; ----------------------------------------
(1)  851/     3BB :                     
(1)  852/     3BB :                     .eff_B:
(1)  853/     3BB : F5                  		push	af			; Save Flagbits
(1)  854/     3BC : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - Block SLOT to jump
(1)  855/     3BF : FD 73 10            		ld 	(iy+trk_currBlk),e
(1)  856/     3C2 : CF                  		rst	8
(1)  857/     3C3 : FD 36 0E 00         		ld	(iy+trk_rowPause),0	; Reset rowpause
(1)  858/     3C7 : DD CB 00 9E         		res	3,(ix+chnl_Flags)	; <-- Clear EFFECT bit
(1)  859/     3CB : FD CB 00 EE         		set	5,(iy+trk_Status)	; set fill-from-effect flag on exit
(1)  860/     3CF : 3E 80               		ld	a,80h
(1)  861/     3D1 : FD 77 13            		ld	(iy+trk_BankHeads),a
(1)  862/     3D4 : FD 77 14            		ld	(iy+trk_BankBlk),a
(1)  863/     3D7 : F1                  		pop	af
(1)  864/     3D8 : C9                  		ret
(1)  865/     3D9 :                     
(1)  866/     3D9 :                     ; ----------------------------------------
(1)  867/     3D9 :                     ; Effect C: Pattern break/exit
(1)  868/     3D9 :                     ;
(1)  869/     3D9 :                     ; Only used on SFX, arguments ignored.
(1)  870/     3D9 :                     ; ----------------------------------------
(1)  871/     3D9 :                     
(1)  872/     3D9 :                     .eff_C:
(1)  873/     3D9 : C3 ED 04            		jp	.track_end
(1)  874/     3DC :                     
(1)  875/     3DC :                     ; ----------------------------------------
(1)  876/     3DC :                     ; Increment the current patt position
(1)  877/     3DC :                     ; and recieve more data
(1)  878/     3DC :                     ;
(1)  879/     3DC :                     ; Breaks:
(1)  880/     3DC :                     ; a,e
(1)  881/     3DC :                     ; ----------------------------------------
(1)  882/     3DC :                     
(1)  883/     3DC :                     .inc_cpatt:
(1)  884/     3DC : FD 5E 08            		ld	e,(iy+trk_Cach)
(1)  885/     3DF : 7D                  		ld	a,l
(1)  886/     3E0 : 3C                  		inc	a
(1)  887/     3E1 : E6 1F               		and	MAX_RCACH-1
(1)  888/     3E3 : FE 1E               		cp	MAX_RCACH-2	; RAN OUT of bytes?
(1)  889/     3E5 : 30 03               		jr	nc,.ran_out
(1)  890/     3E7 : B3                  		or	e
(1)  891/     3E8 : 6F                  		ld	l,a
(1)  892/     3E9 : C9                  		ret
(1)  893/     3EA :                     .ran_out:
(1)  894/     3EA : FD 6E 08            		ld	l,(iy+trk_Cach)
(1)  895/     3ED : E5                  		push	hl
(1)  896/     3EE : C5                  		push	bc
(1)  897/     3EF : 06 00               		ld	b,0
(1)  898/     3F1 : 4F                  		ld	c,a
(1)  899/     3F2 : CF                  		rst	8
(1)  900/     3F3 : 5D                  		ld	e,l
(1)  901/     3F4 : 54                  		ld	d,h
(1)  902/     3F5 : FD 6E 16            		ld	l,(iy+trk_RomPattRead)
(1)  903/     3F8 : FD 66 17            		ld	h,(iy+(trk_RomPattRead+1))
(1)  904/     3FB : FD 7E 18            		ld	a,(iy+(trk_RomPattRead+2))
(1)  905/     3FE : 09                  		add	hl,bc
(1)  906/     3FF : CE 00               		adc	a,0
(1)  907/     401 : FD 75 16            		ld	(iy+trk_RomPattRead),l
(1)  908/     404 : FD 74 17            		ld	(iy+(trk_RomPattRead+1)),h
(1)  909/     407 : CF                  		rst	8
(1)  910/     408 : FD 77 18            		ld	(iy+(trk_RomPattRead+2)),a
(1)  911/     40B : 01 20 00            		ld	bc,MAX_RCACH
(1)  912/     40E : CD D2 10            		call	transferRom	; *** ROM ACCESS ***
(1)  913/     411 : C1                  		pop	bc
(1)  914/     412 : E1                  		pop	hl
(1)  915/     413 : C9                  		ret
(1)  916/     414 :                     
(1)  917/     414 :                     ; ----------------------------------------
(1)  918/     414 :                     ; Set track pattern by trk_currBlk
(1)  919/     414 :                     ; ----------------------------------------
(1)  920/     414 :                     
(1)  921/     414 :                     .set_track:
(1)  922/     414 : FD 5E 04            		ld	e,(iy+trk_Blocks)
(1)  923/     417 : FD 56 05            		ld	d,(iy+(trk_Blocks+1))
(1)  924/     41A : FD 7E 10            		ld	a,(iy+trk_currBlk)
(1)  925/     41D : 4F                  		ld	c,a
(1)  926/     41E : C5                  		push	bc
(1)  927/     41F : D5                  		push	de
(1)  928/     420 : CF                  		rst	8
(1)  929/     421 : 0F                  		rrca
(1)  930/     422 : 0F                  		rrca
(1)  931/     423 : 0F                  		rrca
(1)  932/     424 : E6 1F               		and	00011111b
(1)  933/     426 : FD 4E 14            		ld	c,(iy+trk_BankBlk)	; c - current block bank
(1)  934/     429 : CB 79               		bit	7,c			; First time?
(1)  935/     42B : 20 03               		jr	nz,.first_blk
(1)  936/     42D : B9                  		cp	c			; SAME instrument data?
(1)  937/     42E : 28 1E               		jr	z,.keep_blk
(1)  938/     430 :                     .first_blk:
(1)  939/     430 : CF                  		rst	8
(1)  940/     431 : FD 77 14            		ld	(iy+trk_BankBlk),a	; Save inst number
(1)  941/     434 : 07                  		rlca
(1)  942/     435 : 07                  		rlca
(1)  943/     436 : 07                  		rlca
(1)  944/     437 : 06 00               		ld	b,0
(1)  945/     439 : 4F                  		ld	c,a
(1)  946/     43A : FD 6E 1F            		ld	l,(iy+trk_RomBlks)	; Transfer FIRST patt
(1)  947/     43D : FD 66 20            		ld	h,(iy+(trk_RomBlks+1))	; packet
(1)  948/     440 : FD 7E 21            		ld	a,(iy+(trk_RomBlks+2))
(1)  949/     443 : E7                  		rst	20h
(1)  950/     444 : CF                  		rst	8
(1)  951/     445 : 09                  		add	hl,bc
(1)  952/     446 : CE 00               		adc	a,0
(1)  953/     448 : 01 08 00            		ld	bc,8			; 8 blocks stored
(1)  954/     44B : CD D2 10            		call	transferRom		; ** ROM ACCESS **
(1)  955/     44E :                     .keep_blk:
(1)  956/     44E : E1                  		pop	hl
(1)  957/     44F : C1                  		pop	bc
(1)  958/     450 : 79                  		ld	a,c
(1)  959/     451 : E6 07               		and	00000111b
(1)  960/     453 : CF                  		rst	8
(1)  961/     454 : 16 00               		ld	d,0
(1)  962/     456 : 5F                  		ld	e,a
(1)  963/     457 : 19                  		add	hl,de
(1)  964/     458 : 7E                  		ld	a,(hl)			; Read byte
(1)  965/     459 : FE FF               		cp	-1			; If block == -1, end track
(1)  966/     45B : CA ED 04            		jp	z,.track_end
(1)  967/     45E : CF                  		rst	8
(1)  968/     45F :                     
(1)  969/     45F : FD 5E 06            		ld	e,(iy+trk_Patt)		; Read CACHE patt heads
(1)  970/     462 : FD 56 07            		ld	d,(iy+(trk_Patt+1))
(1)  971/     465 : 4F                  		ld	c,a
(1)  972/     466 : D5                  		push	de
(1)  973/     467 : C5                  		push	bc
(1)  974/     468 : CF                  		rst	8
(1)  975/     469 : 0F                  		rrca
(1)  976/     46A : 0F                  		rrca
(1)  977/     46B : 0F                  		rrca
(1)  978/     46C : E6 1F               		and	00011111b
(1)  979/     46E : FD 4E 13            		ld	c,(iy+trk_BankHeads)	; c - current intrument loaded
(1)  980/     471 : CB 79               		bit	7,c			; First time?
(1)  981/     473 : 20 03               		jr	nz,.first_head
(1)  982/     475 : B9                  		cp	c			; SAME instrument data?
(1)  983/     476 : 28 26               		jr	z,.keep_it
(1)  984/     478 :                     .first_head:
(1)  985/     478 : CF                  		rst	8
(1)  986/     479 : FD 77 13            		ld	(iy+trk_BankHeads),a	; Save inst number
(1)  987/     47C : 47                  		ld	b,a
(1)  988/     47D : 0F                  		rrca
(1)  989/     47E : 0F                  		rrca
(1)  990/     47F : 0F                  		rrca
(1)  991/     480 : E6 E0               		and	11100000b
(1)  992/     482 : 4F                  		ld	c,a
(1)  993/     483 : 78                  		ld	a,b
(1)  994/     484 : 0F                  		rrca
(1)  995/     485 : 0F                  		rrca
(1)  996/     486 : 0F                  		rrca
(1)  997/     487 : E6 03               		and	00000011b
(1)  998/     489 : 47                  		ld	b,a
(1)  999/     48A :                     
(1) 1000/     48A : FD 6E 19            		ld	l,(iy+trk_RomPatt)	; Transfer FIRST patt
(1) 1001/     48D : FD 66 1A            		ld	h,(iy+(trk_RomPatt+1))	; packet
(1) 1002/     490 : FD 7E 1B            		ld	a,(iy+(trk_RomPatt+2))
(1) 1003/     493 : E7                  		rst	20h
(1) 1004/     494 : CF                  		rst	8
(1) 1005/     495 : 09                  		add	hl,bc
(1) 1006/     496 : CE 00               		adc	a,0
(1) 1007/     498 : 01 20 00            		ld	bc,4*8			; 8 heads stored
(1) 1008/     49B : CD D2 10            		call	transferRom		; ** ROM ACCESS **
(1) 1009/     49E :                     .keep_it:
(1) 1010/     49E : C1                  		pop	bc
(1) 1011/     49F : 79                  		ld	a,c
(1) 1012/     4A0 : E6 07               		and	00000111b
(1) 1013/     4A2 : 87                  		add	a,a
(1) 1014/     4A3 : 87                  		add	a,a
(1) 1015/     4A4 : 57                  		ld	d,a
(1) 1016/     4A5 : CF                  		rst	8
(1) 1017/     4A6 : E6 FC               		and	11111100b
(1) 1018/     4A8 : 5F                  		ld	e,a
(1) 1019/     4A9 : 7A                  		ld	a,d
(1) 1020/     4AA : E6 03               		and	00000011b
(1) 1021/     4AC : 57                  		ld	d,a
(1) 1022/     4AD : E1                  		pop	hl
(1) 1023/     4AE : 19                  		add	hl,de
(1) 1024/     4AF : 5E                  		ld	e,(hl)			; de - Pos
(1) 1025/     4B0 : 23                  		inc	hl
(1) 1026/     4B1 : CF                  		rst	8
(1) 1027/     4B2 : 56                  		ld	d,(hl)
(1) 1028/     4B3 : 23                  		inc	hl
(1) 1029/     4B4 : 7E                  		ld	a,(hl)
(1) 1030/     4B5 : 23                  		inc	hl
(1) 1031/     4B6 : FD 77 0C            		ld	(iy+trk_Rows),a
(1) 1032/     4B9 : 7E                  		ld	a,(hl)
(1) 1033/     4BA : 23                  		inc	hl
(1) 1034/     4BB : FD 77 0D            		ld	(iy+(trk_Rows+1)),a
(1) 1035/     4BE : FD 6E 19            		ld	l,(iy+trk_RomPatt)	; Transfer FIRST patt
(1) 1036/     4C1 : FD 66 1A            		ld	h,(iy+(trk_RomPatt+1))	; packet
(1) 1037/     4C4 : CF                  		rst	8
(1) 1038/     4C5 : FD 7E 1B            		ld	a,(iy+(trk_RomPatt+2))
(1) 1039/     4C8 : 19                  		add	hl,de
(1) 1040/     4C9 : CE 00               		adc	a,0
(1) 1041/     4CB : FD 75 16            		ld	(iy+trk_RomPattRead),l
(1) 1042/     4CE : FD 74 17            		ld	(iy+(trk_RomPattRead+1)),h
(1) 1043/     4D1 : FD 77 18            		ld	(iy+(trk_RomPattRead+2)),a
(1) 1044/     4D4 : FD 5E 08            		ld	e,(iy+trk_Cach)
(1) 1045/     4D7 : FD 56 09            		ld	d,(iy+(trk_Cach+1))
(1) 1046/     4DA :                     
(1) 1047/     4DA : FD 73 0A            		ld	(iy+trk_Read),e
(1) 1048/     4DD : FD 72 0B            		ld	(iy+(trk_Read+1)),d
(1) 1049/     4E0 : 0E 20               		ld	c,MAX_RCACH
(1) 1050/     4E2 : FD 36 0D 00         		ld	(iy+trk_cachHalf),0
(1) 1051/     4E6 : FD 36 0E 00         		ld	(iy+trk_rowPause),0
(1) 1052/     4EA : C3 D2 10            		jp	transferRom		; ** ROM access **
(1) 1053/     4ED :                     
(1) 1054/     4ED :                     ; ----------------------------------------
(1) 1055/     4ED :                     ; **JUMP ONLY**
(1) 1056/     4ED :                     .track_end:
(1) 1057/     4ED : CD 9C 05            		call	track_out
(1) 1058/     4F0 : CF                  		rst	8
(1) 1059/     4F1 : AF                  		xor	a
(1) 1060/     4F2 : FD 77 0E            		ld	(iy+trk_rowPause),a
(1) 1061/     4F5 : FD 77 0F            		ld	(iy+trk_tickTmr),a
(1) 1062/     4F8 : FD 77 00            		ld	(iy+trk_Status),a	; Disable track slot
(1) 1063/     4FB : FD 36 12 80         		ld	(iy+trk_BankIns),80h
(1) 1064/     4FF : C9                  		ret
(1) 1065/     500 :                     
(1) 1066/     500 :                     ; ----------------------------------------
(1) 1067/     500 :                     ; Track refill
(1) 1068/     500 :                     ; ----------------------------------------
(1) 1069/     500 :                     
(1) 1070/     500 :                     .effect_fill:
(1) 1071/     500 : FD CB 00 AE         		res	5,(iy+trk_Status)	; Reset refill-from-effect flag
(1) 1072/     504 : C3 14 04            		jp	.set_track
(1) 1073/     507 :                     
(1) 1074/     507 :                     ; ----------------------------------------
(1) 1075/     507 :                     ; Track Start/Reset
(1) 1076/     507 :                     ;
(1) 1077/     507 :                     ; iy - Track buffer
(1) 1078/     507 :                     ; ----------------------------------------
(1) 1079/     507 :                     
(1) 1080/     507 :                     .first_fill:
(1) 1081/     507 : FD CB 00 B6         		res	6,(iy+trk_Status)	; Clear FILL flag
(1) 1082/     50B : CD 9C 05            		call	track_out
(1) 1083/     50E : FD 36 0F 01         		ld	(iy+trk_tickTmr),1	; <-- Reset tick timer
(1) 1084/     512 : FD 7E 02            		ld	a,(iy+trk_SetBlk)	; Make start block as current block
(1) 1085/     515 : CF                  		rst	8
(1) 1086/     516 : FD 77 10            		ld 	(iy+trk_currBlk),a	; block
(1) 1087/     519 : 11 00 00            		ld	de,0
(1) 1088/     51C : 21 B0 1B            		ld	hl,trkListCach		; Read MASTER Nikona track list
(1) 1089/     51F : FD 7E 01            		ld	a,(iy+trk_SeqId)
(1) 1090/     522 : E6 07               		and	00000111b		; Filter sequence bits
(1) 1091/     524 : 87                  		add	a,a			; *4
(1) 1092/     525 : CF                  		rst	8
(1) 1093/     526 : 87                  		add	a,a
(1) 1094/     527 : 5F                  		ld	e,a
(1) 1095/     528 : 19                  		add	hl,de
(1) 1096/     529 : 7E                  		ld	a,(hl)
(1) 1097/     52A : 23                  		inc	hl
(1) 1098/     52B : CB 7F               		bit	7,a
(1) 1099/     52D : 28 04               		jr	z,.no_glbl
(1) 1100/     52F : FD CB 00 C6         		set	0,(iy+trk_Status)	; Enable GLOBAL sub-beats
(1) 1101/     533 :                     .no_glbl:
(1) 1102/     533 : CF                  		rst	8
(1) 1103/     534 : E6 7F               		and	01111111b
(1) 1104/     536 : FD 77 03            		ld	(iy+trk_TickSet),a
(1) 1105/     539 : 7E                  		ld	a,(hl)			; Read and temporally
(1) 1106/     53A : 23                  		inc	hl			; grab it's pointers
(1) 1107/     53B : 4E                  		ld	c,(hl)
(1) 1108/     53C : 23                  		inc	hl
(1) 1109/     53D : 6E                  		ld	l,(hl)
(1) 1110/     53E : 61                  		ld	h,c
(1) 1111/     53F : 11 A4 1F            		ld	de,headerOut
(1) 1112/     542 : 0E 0E               		ld	c,0Eh
(1) 1113/     544 : CD D2 10            		call	transferRom		; ** ROM access **
(1) 1114/     547 : DD 21 B1 1F         		ld	ix,headerOut_e-1	; Read temp header BACKWARDS
(1) 1115/     54B : CF                  		rst	8
(1) 1116/     54C :                     
(1) 1117/     54C :                     	; headerOut:
(1) 1118/     54C :                     	; dc.w numof_chnls
(1) 1119/     54C :                     	; dc.l .blk,.pat,.ins
(1) 1120/     54C :                     	; *** READING BACKWARDS
(1) 1121/     54C : CD 89 05            		call	.grab_rhead		; Instrument data
(1) 1122/     54F : FD 75 1C            		ld	(iy+trk_RomInst),l
(1) 1123/     552 : FD 74 1D            		ld	(iy+(trk_RomInst+1)),h
(1) 1124/     555 : FD 70 1E            		ld	(iy+(trk_RomInst+2)),b
(1) 1125/     558 : FD 36 12 80         		ld	(iy+trk_BankIns),80h	; Reset instrument banking
(1) 1126/     55C : E7                  		rst	20h
(1) 1127/     55D : CF                  		rst	8
(1) 1128/     55E : CD 89 05            		call	.grab_rhead		; Pattern heads
(1) 1129/     561 : FD 75 19            		ld	(iy+trk_RomPatt),l	; Save ROM patt base
(1) 1130/     564 : FD 74 1A            		ld	(iy+(trk_RomPatt+1)),h
(1) 1131/     567 : FD 70 1B            		ld	(iy+(trk_RomPatt+2)),b
(1) 1132/     56A : FD 36 13 80         		ld	(iy+trk_BankHeads),80h	; Reset pattern banking
(1) 1133/     56E : CF                  		rst	8
(1) 1134/     56F : CD 89 05            		call	.grab_rhead		; Block data
(1) 1135/     572 : FD 75 1F            		ld	(iy+trk_RomBlks),l	; Save ROM patt base
(1) 1136/     575 : FD 74 20            		ld	(iy+(trk_RomBlks+1)),h
(1) 1137/     578 : FD 70 21            		ld	(iy+(trk_RomBlks+2)),b
(1) 1138/     57B : FD 36 14 80         		ld	(iy+trk_BankBlk),80h	; Reset pattern banking
(1) 1139/     57F : CF                  		rst	8
(1) 1140/     580 : DD 7E 00            		ld	a,(ix)			; dc.w numof_chnls
(1) 1141/     583 : FD 77 15            		ld	(iy+trk_MaxChnl),a
(1) 1142/     586 : C3 14 04            		jp	.set_track
(1) 1143/     589 :                     
(1) 1144/     589 :                     ; Read 68K pointer:
(1) 1145/     589 :                     ; hl - 00xxxx
(1) 1146/     589 :                     ;  b - xx0000
(1) 1147/     589 :                     .grab_rhead:
(1) 1148/     589 : DD 6E 00            		ld	l,(ix)
(1) 1149/     58C : DD 2B               		dec	ix
(1) 1150/     58E : DD 66 00            		ld	h,(ix)
(1) 1151/     591 : CF                  		rst	8
(1) 1152/     592 : DD 2B               		dec	ix
(1) 1153/     594 : DD 46 00            		ld	b,(ix)
(1) 1154/     597 : DD 2B               		dec	ix
(1) 1155/     599 :                     ; 		ld	c,(ix)
(1) 1156/     599 : DD 2B               		dec	ix
(1) 1157/     59B : C9                  		ret
(1) 1158/     59C :                     
(1) 1159/     59C :                     ; ----------------------------------------
(1) 1160/     59C :                     ; Reset tracker channels
(1) 1161/     59C :                     ;
(1) 1162/     59C :                     ; iy - Track buffer
(1) 1163/     59C :                     ;
(1) 1164/     59C :                     ; Breaks:
(1) 1165/     59C :                     ; ix
(1) 1166/     59C :                     ; ----------------------------------------
(1) 1167/     59C :                     
(1) 1168/     59C :                     ; ----------------------------------------
(1) 1169/     59C :                     ; Reset tracker channels
(1) 1170/     59C :                     ;
(1) 1171/     59C :                     ; iy - Track buffer
(1) 1172/     59C :                     ;
(1) 1173/     59C :                     ; Breaks:
(1) 1174/     59C :                     ; b ,de,hl,ix
(1) 1175/     59C :                     ; ----------------------------------------
(1) 1176/     59C :                     
(1) 1177/     59C :                     track_out:
(1) 1178/     59C : FD E5               		push	iy
(1) 1179/     59E : E1                  		pop	hl
(1) 1180/     59F : DD 21 00 1E         		ld	ix,trkChnls
(1) 1181/     5A3 : CF                  		rst	8
(1) 1182/     5A4 : 11 22 00            		ld	de,trk_ChnIndx
(1) 1183/     5A7 : 19                  		add	hl,de
(1) 1184/     5A8 : 06 1A               		ld	b,MAX_TRKINDX
(1) 1185/     5AA :                     .indx_del:
(1) 1186/     5AA : 7E                  		ld	a,(hl)
(1) 1187/     5AB : B7                  		or	a
(1) 1188/     5AC : 28 2E               		jr	z,.nothin
(1) 1189/     5AE : CF                  		rst	8
(1) 1190/     5AF : DD E5               		push	ix
(1) 1191/     5B1 : E6 1F               		and	00011111b
(1) 1192/     5B3 : 87                  		add	a,a
(1) 1193/     5B4 : 87                  		add	a,a
(1) 1194/     5B5 : 87                  		add	a,a
(1) 1195/     5B6 : 5F                  		ld	e,a
(1) 1196/     5B7 : CF                  		rst	8
(1) 1197/     5B8 : DD 19               		add	ix,de
(1) 1198/     5BA : DD 36 02 FE         		ld	(ix+chnl_Note),-2
(1) 1199/     5BE : DD 36 00 01         		ld	(ix+chnl_Flags),1
(1) 1200/     5C2 : DD 36 04 40         		ld	(ix+chnl_Vol),64
(1) 1201/     5C6 : DD 36 05 00         		ld	(ix+chnl_EffId),0
(1) 1202/     5CA : CF                  		rst	8
(1) 1203/     5CB : DD 36 06 00         		ld	(ix+chnl_EffArg),0
(1) 1204/     5CF : DD 36 03 00         		ld	(ix+chnl_Ins),0
(1) 1205/     5D3 : DD 36 07 00         		ld	(ix+chnl_Type),0
(1) 1206/     5D7 : DD E1               		pop	ix
(1) 1207/     5D9 : 36 00               		ld	(hl),0
(1) 1208/     5DB : 00                  		nop
(1) 1209/     5DC :                     .nothin:
(1) 1210/     5DC : 23                  		inc	hl
(1) 1211/     5DD : 10 CB               		djnz	.indx_del
(1) 1212/     5DF : 3E 01               		ld	a,1
(1) 1213/     5E1 : 32 87 1F            		ld	(marsUpd),a
(1) 1214/     5E4 : C9                  		ret
(1) 1215/     5E5 :                     
(1) 1216/     5E5 :                     ; ----------------------------------------
(1) 1217/     5E5 :                     ; Load tracklist from ROM
(1) 1218/     5E5 :                     ;
(1) 1219/     5E5 :                     ; a - SeqID
(1) 1220/     5E5 :                     ; ----------------------------------------
(1) 1221/     5E5 :                     
(1) 1222/     5E5 :                     get_RomTrcks:
(1) 1223/     5E5 : E6 F8               		and	11111000b
(1) 1224/     5E7 : 5F                  		ld	e,a
(1) 1225/     5E8 : 3A 86 1F            		ld	a,(trkListPage)
(1) 1226/     5EB : BB                  		cp	e
(1) 1227/     5EC : C8                  		ret	z
(1) 1228/     5ED : 7B                  		ld	a,e
(1) 1229/     5EE : 32 86 1F            		ld	(trkListPage),a
(1) 1230/     5F1 :                     init_RomTrcks:
(1) 1231/     5F1 : 07                  		rlca
(1) 1232/     5F2 : 07                  		rlca			; 10h*4=40h
(1) 1233/     5F3 : 57                  		ld	d,a
(1) 1234/     5F4 : E6 E0               		and	11100000b
(1) 1235/     5F6 : 5F                  		ld	e,a
(1) 1236/     5F7 : 7A                  		ld	a,d
(1) 1237/     5F8 : CF                  		rst	8
(1) 1238/     5F9 : E6 03               		and	00000011b	; * 40h
(1) 1239/     5FB : 57                  		ld	d,a
(1) 1240/     5FC : 21 1C 00            		ld	hl,gemaMstrListPos
(1) 1241/     5FF : 23                  		inc	hl
(1) 1242/     600 : 7E                  		ld	a,(hl)
(1) 1243/     601 : 23                  		inc	hl
(1) 1244/     602 : 4E                  		ld	c,(hl)
(1) 1245/     603 : 23                  		inc	hl
(1) 1246/     604 : 6E                  		ld	l,(hl)
(1) 1247/     605 : CF                  		rst	8
(1) 1248/     606 : 61                  		ld	h,c
(1) 1249/     607 : 19                  		add	hl,de
(1) 1250/     608 : CE 00               		adc	a,0
(1) 1251/     60A : 11 B0 1B            		ld	de,trkListCach
(1) 1252/     60D : 01 20 00            		ld	bc,4*8
(1) 1253/     610 : C3 D2 10            		jp	transferRom	; *** ROM ACCESS ***
(1) 1254/     613 :                     
(1) 1255/     613 :                     ; ============================================================
(1) 1256/     613 :                     ; --------------------------------------------------------
(1) 1257/     613 :                     ; Convert notes to soundchips
(1) 1258/     613 :                     ; --------------------------------------------------------
(1) 1259/     613 :                     
(1) 1260/     613 :                     set_chips:
(1) 1261/     613 : E7                  		rst	20h			; Refill wave
(1) 1262/     614 : CD B1 10            		call	get_tick
(1) 1263/     617 : FD 21 C6 18         		ld	iy,nikona_BuffList
(1) 1264/     61B :                     .trk_buffrs:
(1) 1265/     61B : FD 7E 00            		ld	a,(iy)
(1) 1266/     61E : FE FF               		cp	-1
(1) 1267/     620 : 28 15               		jr	z,proc_chips
(1) 1268/     622 : CF                  		rst	8
(1) 1269/     623 : FD E5               		push	iy
(1) 1270/     625 : FD 6E 00            		ld	l,(iy)
(1) 1271/     628 : FD 66 01            		ld	h,(iy+1)
(1) 1272/     62B : CD 61 06            		call	tblbuff_read
(1) 1273/     62E : FD E1               		pop	iy
(1) 1274/     630 : 11 08 00            		ld	de,SIZE_BUFFLIST
(1) 1275/     633 : FD 19               		add	iy,de
(1) 1276/     635 : 18 E4               		jr	.trk_buffrs
(1) 1277/     637 :                     proc_chips:
(1) 1278/     637 : E7                  		rst	20h
(1) 1279/     638 : CF                  		rst	8
(1) 1280/     639 : FD 21 B0 16         		ld	iy,tblPSGN		; PSG Noise
(1) 1281/     63D : CD 52 08            		call	dtbl_singl
(1) 1282/     640 : CF                  		rst	8
(1) 1283/     641 : FD 21 66 16         		ld	iy,tblPSG		; PSG Squares
(1) 1284/     645 : CD 3C 08            		call	dtbl_multi
(1) 1285/     648 : CF                  		rst	8
(1) 1286/     649 : FD 21 C8 16         		ld	iy,tblFM		; FM/FM3/DAC
(1) 1287/     64D : CD 3C 08            		call	dtbl_multi
(1) 1288/     650 : CF                  		rst	8
(1) 1289/     651 : FD 21 5A 17         		ld	iy,tblPCM		; SEGA CD PCM
(1) 1290/     655 : CD 3C 08            		call	dtbl_multi
(1) 1291/     658 : CF                  		rst	8
(1) 1292/     659 : FD 21 1C 18         		ld	iy,tblPWM		; 32X PWM
(1) 1293/     65D : C3 3C 08            		jp	dtbl_multi
(1) 1294/     660 : C9                  		ret
(1) 1295/     661 :                     
(1) 1296/     661 :                     ; ----------------------------------------
(1) 1297/     661 :                     ; Read current track
(1) 1298/     661 :                     ;
(1) 1299/     661 :                     ; iy - Buffer
(1) 1300/     661 :                     tblbuff_read:
(1) 1301/     661 : CD B1 10            		call	get_tick
(1) 1302/     664 : CF                  		rst	8
(1) 1303/     665 : E5                  		push	hl
(1) 1304/     666 : FD E1               		pop	iy
(1) 1305/     668 : FD 46 00            		ld	b,(iy+trk_Status)	; bit7: Track active?
(1) 1306/     66B : CB 78               		bit	7,b
(1) 1307/     66D : C8                  		ret	z
(1) 1308/     66E : 78                  		ld	a,b			; trk_Status == -1?
(1) 1309/     66F : FE FF               		cp	-1
(1) 1310/     671 : C2 7B 06            		jp	nz,.track_cont
(1) 1311/     674 : CD 9C 05            		call	track_out
(1) 1312/     677 : FD 36 00 00         		ld	(iy+trk_Status),0
(1) 1313/     67B :                     .track_cont:
(1) 1314/     67B : E7                  		rst	20h
(1) 1315/     67C : FD E5               		push	iy
(1) 1316/     67E : E1                  		pop	hl
(1) 1317/     67F : CF                  		rst	8
(1) 1318/     680 : DD 21 00 1E         		ld	ix,trkChnls
(1) 1319/     684 : 11 22 00            		ld	de,trk_ChnIndx
(1) 1320/     687 : 19                  		add	hl,de
(1) 1321/     688 : FD 7E 15            		ld	a,(iy+trk_MaxChnl)	; If zero, read ALL indexes (lazy mode)
(1) 1322/     68B : B7                  		or	a
(1) 1323/     68C : 20 02               		jr	nz,.valid
(1) 1324/     68E : 06 1A               		ld	b,MAX_TRKINDX
(1) 1325/     690 :                     .valid:
(1) 1326/     690 : CF                  		rst	8
(1) 1327/     691 : 47                  		ld	b,a
(1) 1328/     692 :                     .next_indx:
(1) 1329/     692 :                     ; 		rst	20h			; Refill wave
(1) 1330/     692 : 7E                  		ld	a,(hl)			; Read index
(1) 1331/     693 : B7                  		or	a
(1) 1332/     694 : 20 0B               		jr	nz,.has_indx		; non-zero: valid
(1) 1333/     696 : C5                  		push	bc			; waste CPU to
(1) 1334/     697 : 06 04               		ld	b,4			; sync the wave
(1) 1335/     699 : 00                  		nop
(1) 1336/     69A : 00                  		nop
(1) 1337/     69B : CF                  		rst	8
(1) 1338/     69C : 10 FE               		djnz	$
(1) 1339/     69E : C1                  		pop	bc
(1) 1340/     69F : 18 1C               		jr	.no_indx
(1) 1341/     6A1 :                     .has_indx:
(1) 1342/     6A1 : E6 1F               		and	00011111b
(1) 1343/     6A3 : 87                  		add	a,a
(1) 1344/     6A4 : 87                  		add	a,a
(1) 1345/     6A5 : 87                  		add	a,a
(1) 1346/     6A6 : CF                  		rst	8
(1) 1347/     6A7 : 16 00               		ld	d,0
(1) 1348/     6A9 : 5F                  		ld	e,a
(1) 1349/     6AA : C5                  		push	bc
(1) 1350/     6AB : E5                  		push	hl
(1) 1351/     6AC : DD E5               		push	ix
(1) 1352/     6AE : DD 19               		add	ix,de
(1) 1353/     6B0 : DD 7E 00            		ld	a,(ix)			; ** chnl_Flags
(1) 1354/     6B3 : E6 0F               		and	00001111b
(1) 1355/     6B5 : C4 C1 06            		call	nz,.do_chip
(1) 1356/     6B8 : CF                  		rst	8
(1) 1357/     6B9 : DD E1               		pop	ix
(1) 1358/     6BB : E1                  		pop	hl
(1) 1359/     6BC : C1                  		pop	bc
(1) 1360/     6BD :                     .no_indx:
(1) 1361/     6BD : 23                  		inc	hl
(1) 1362/     6BE : 10 D2               		djnz	.next_indx
(1) 1363/     6C0 : C9                  		ret
(1) 1364/     6C1 :                     
(1) 1365/     6C1 :                     ; ----------------------------------------
(1) 1366/     6C1 :                     ; iy - Track buffer
(1) 1367/     6C1 :                     ; ix - Current channel
(1) 1368/     6C1 :                     
(1) 1369/     6C1 :                     .do_chip:
(1) 1370/     6C1 : DD 7E 03            		ld	a,(ix+chnl_Ins)		; Check intrument type FIRST
(1) 1371/     6C4 : B7                  		or	a
(1) 1372/     6C5 : C8                  		ret	z			; If 0 == stop
(1) 1373/     6C6 : CF                  		rst	8
(1) 1374/     6C7 : 3D                  		dec	a			; inst-1
(1) 1375/     6C8 : E6 7F               		and	01111111b
(1) 1376/     6CA : 21 C8 1B            		ld	hl,instListOut		; temporal storage for instrument
(1) 1377/     6CD : 16 00               		ld	d,0
(1) 1378/     6CF : FD 5E 11            		ld	e,(iy+trk_Priority)
(1) 1379/     6D2 : CB 03               		rlc	e
(1) 1380/     6D4 : CB 03               		rlc	e
(1) 1381/     6D6 : CB 03               		rlc	e
(1) 1382/     6D8 : 19                  		add	hl,de
(1) 1383/     6D9 : FD 4E 12            		ld	c,(iy+trk_BankIns)	; c - current intrument loaded
(1) 1384/     6DC : CB 79               		bit	7,c			; First time?
(1) 1385/     6DE : 20 03               		jr	nz,.first_ins
(1) 1386/     6E0 : B9                  		cp	c			; SAME instrument data?
(1) 1387/     6E1 : 28 24               		jr	z,.keep_it
(1) 1388/     6E3 :                     .first_ins:
(1) 1389/     6E3 : E5                  		push	hl
(1) 1390/     6E4 : FD 77 12            		ld	(iy+trk_BankIns),a	; Save inst number
(1) 1391/     6E7 : 07                  		rlca
(1) 1392/     6E8 : 07                  		rlca
(1) 1393/     6E9 : 07                  		rlca
(1) 1394/     6EA : 47                  		ld	b,a
(1) 1395/     6EB : E6 F8               		and	11111000b
(1) 1396/     6ED : 4F                  		ld	c,a
(1) 1397/     6EE : 78                  		ld	a,b
(1) 1398/     6EF : E6 07               		and	00000111b
(1) 1399/     6F1 : CF                  		rst	8
(1) 1400/     6F2 : 47                  		ld	b,a
(1) 1401/     6F3 : EB                  		ex	hl,de
(1) 1402/     6F4 : FD 6E 1C            		ld	l,(iy+trk_RomInst)
(1) 1403/     6F7 : FD 66 1D            		ld	h,(iy+(trk_RomInst+1))
(1) 1404/     6FA : FD 7E 1E            		ld	a,(iy+(trk_RomInst+2))
(1) 1405/     6FD : 09                  		add	hl,bc
(1) 1406/     6FE : CE 00               		adc	a,0
(1) 1407/     700 : 01 08 00            		ld	bc,8			; 8 bytes
(1) 1408/     703 : CD D2 10            		call	transferRom		; ** ROM access **
(1) 1409/     706 : E1                  		pop	hl
(1) 1410/     707 :                     .keep_it:
(1) 1411/     707 : E5                  		push	hl			; <-- save hl
(1) 1412/     708 : CD 20 07            		call	.grab_link
(1) 1413/     70B : D1                  		pop	de			; --> recover as de
(1) 1414/     70C :                     	; hl - current table
(1) 1415/     70C :                     	; de - instrument data
(1) 1416/     70C : FE FF               		cp	-1			; Found any link?
(1) 1417/     70E : C8                  		ret	z
(1) 1418/     70F : FD 7E 11            		ld	a,(iy+trk_Priority)	; a - Set priority level
(1) 1419/     712 : 23                  		inc	hl			; Skip link
(1) 1420/     713 : 23                  		inc	hl
(1) 1421/     714 : 77                  		ld	(hl),a			; Write priority
(1) 1422/     715 : 01 0E 00            		ld	bc,10h-2		; Move to instr data
(1) 1423/     718 : 09                  		add	hl,bc
(1) 1424/     719 : EB                  		ex	hl,de			; <-- swap for ldir
(1) 1425/     71A : 01 08 00            		ld	bc,8
(1) 1426/     71D : ED B0               		ldir				; COPYPASTE instr data from temporal
(1) 1427/     71F : C9                  		ret
(1) 1428/     720 :                     
(1) 1429/     720 :                     ; ----------------------------------------
(1) 1430/     720 :                     ; Search for a linked channel on the
(1) 1431/     720 :                     ; chip table
(1) 1432/     720 :                     ;
(1) 1433/     720 :                     ; Input:
(1) 1434/     720 :                     ; iy - Track buffer
(1) 1435/     720 :                     ; ix - Current channel
(1) 1436/     720 :                     ; hl - Intrument data
(1) 1437/     720 :                     ;
(1) 1438/     720 :                     ; Returns:
(1) 1439/     720 :                     ; hl - Channel table to use
(1) 1440/     720 :                     ;  a - Return value:
(1) 1441/     720 :                     ;       0 - Found
(1) 1442/     720 :                     ;      -1 - Not found
(1) 1443/     720 :                     ; ----------------------------------------
(1) 1444/     720 :                     
(1) 1445/     720 :                     ; TODO: wave timing is a little off here.
(1) 1446/     720 :                     
(1) 1447/     720 :                     .grab_link:
(1) 1448/     720 :                     ; 		rst	8
(1) 1449/     720 :                     ; 		nop	; wave sync
(1) 1450/     720 :                     ; 		nop
(1) 1451/     720 : 7E                  		ld	a,(hl)			; Check INSTRUMENT type
(1) 1452/     721 : E6 F0               		and	11110000b		; Filter 0F0h
(1) 1453/     723 : F2 07 08            		jp	p,.set_asfull		; If non 80h: Invalid
(1) 1454/     726 : 5F                  		ld	e,a			; e - NEW chip
(1) 1455/     727 : DD 7E 01            		ld	a,(ix+chnl_Chip)	; a - our current chip
(1) 1456/     72A : E6 F0               		and	11110000b		; Filter bits
(1) 1457/     72C : CA 9A 07            		jp	z,.new_chip		; If 0: It's a NEW chip
(1) 1458/     72F : BB                  		cp 	e			; Same chip as NEW?
(1) 1459/     730 : CA 43 07            		jp	z,.srch_link		;
(1) 1460/     733 : 57                  		ld	d,a			; d - Chip to silence
(1) 1461/     734 : D5                  		push	de
(1) 1462/     735 : CD 43 07            		call	.srch_link		; Search our link (first)
(1) 1463/     738 : D1                  		pop	de
(1) 1464/     739 : FE FF               		cp	-1
(1) 1465/     73B : C8                  		ret	z
(1) 1466/     73C : CF                  		rst	8
(1) 1467/     73D : CD 24 08            		call	.reset_link
(1) 1468/     740 : C3 9A 07            		jp	.new_chip
(1) 1469/     743 :                     
(1) 1470/     743 :                     ; ----------------------------------------
(1) 1471/     743 :                     ; ** RELINK **
(1) 1472/     743 :                     ; e - Our current chip
(1) 1473/     743 :                     .srch_link:
(1) 1474/     743 : CD 0A 08            		call	.pick_tbl	; Pick chip table in hl
(1) 1475/     746 : DD E5               		push	ix		; copy ix to bc
(1) 1476/     748 : C1                  		pop	bc
(1) 1477/     749 : B7                  		or	a
(1) 1478/     74A : FA 8A 07            		jp	m,.singl_link
(1) 1479/     74D :                     .srch_lloop:
(1) 1480/     74D : 7E                  		ld	a,(hl)		; Read LSB
(1) 1481/     74E : FE FF               		cp	-1		; If -1, return -1
(1) 1482/     750 : 28 45               		jr	z,.refill
(1) 1483/     752 : B9                  		cp	c
(1) 1484/     753 : 20 07               		jr	nz,.invldl
(1) 1485/     755 : CF                  		rst	8
(1) 1486/     756 : 23                  		inc	hl
(1) 1487/     757 : 7E                  		ld	a,(hl)
(1) 1488/     758 : 2B                  		dec	hl
(1) 1489/     759 : B8                  		cp	b
(1) 1490/     75A : 28 08               		jr	z,.reroll
(1) 1491/     75C :                     .invldl:
(1) 1492/     75C : D5                  		push	de
(1) 1493/     75D : 11 18 00            		ld	de,MAX_TBLSIZE
(1) 1494/     760 :                     ; 		rst	8
(1) 1495/     760 :                     ; 		nop	; wave sync *
(1) 1496/     760 : 19                  		add	hl,de
(1) 1497/     761 : D1                  		pop	de
(1) 1498/     762 : 18 E9               		jr	.srch_lloop
(1) 1499/     764 :                     .reroll:
(1) 1500/     764 :                     	; *** Special re-roll check ***
(1) 1501/     764 : E5                  		push	hl
(1) 1502/     765 : 01 05 00            		ld	bc,5		; <-- fake iy+05h
(1) 1503/     768 : 09                  		add	hl,bc
(1) 1504/     769 : CF                  		rst	8
(1) 1505/     76A : 4E                  		ld	c,(hl)		; c - ID
(1) 1506/     76B : E1                  		pop	hl
(1) 1507/     76C : 7B                  		ld	a,e
(1) 1508/     76D : FE 80               		cp	80h		; PSG?
(1) 1509/     76F : 28 02               		jr	z,.chk_psg
(1) 1510/     771 :                     ; 		cp	0A0h		; FM normal?
(1) 1511/     771 :                     ; 		jr	z,.chk_fm
(1) 1512/     771 : 18 22               		jr	.rnot_psg
(1) 1513/     773 :                     .chk_psg:
(1) 1514/     773 : 3A 83 1F            		ld	a,(psgHatMode)
(1) 1515/     776 : E6 03               		and	011b
(1) 1516/     778 : FE 03               		cp	011b
(1) 1517/     77A : 20 19               		jr	nz,.rnot_psg
(1) 1518/     77C : 79                  		ld	a,c
(1) 1519/     77D : FE 02               		cp	2
(1) 1520/     77F : 20 14               		jr	nz,.rnot_psg
(1) 1521/     781 : CF                  		rst	8
(1) 1522/     782 : 16 80               		ld	d,80h		; Set PSG silence
(1) 1523/     784 : CD 24 08            		call	.reset_link	; on PSG3
(1) 1524/     787 : C3 07 08            		jp	.set_asfull
(1) 1525/     78A :                     
(1) 1526/     78A :                     ; ----------------------
(1) 1527/     78A :                     ; PSGN/FM3/FM6
(1) 1528/     78A :                     .singl_link:
(1) 1529/     78A : 23                  		inc	hl			; Read MSB first
(1) 1530/     78B : 7E                  		ld	a,(hl)
(1) 1531/     78C : 2B                  		dec	hl
(1) 1532/     78D : CF                  		rst	8
(1) 1533/     78E : B8                  		cp	b			; MSB match?
(1) 1534/     78F : 20 06               		jr	nz,.refill
(1) 1535/     791 : 7E                  		ld	a,(hl)			; Read LSB
(1) 1536/     792 : B9                  		cp	c
(1) 1537/     793 : 20 02               		jr	nz,.refill
(1) 1538/     795 :                     
(1) 1539/     795 :                     ; ----------------------
(1) 1540/     795 :                     
(1) 1541/     795 :                     .rnot_psg:
(1) 1542/     795 : AF                  		xor	a
(1) 1543/     796 : C9                  		ret
(1) 1544/     797 :                     ; ***
(1) 1545/     797 :                     .refill:
(1) 1546/     797 : DD 5E 01            		ld	e,(ix+chnl_Chip)
(1) 1547/     79A :                     
(1) 1548/     79A :                     ; ----------------------------------------
(1) 1549/     79A :                     ; *** NEW CHIP ***
(1) 1550/     79A :                     ; e - Chip to set
(1) 1551/     79A :                     .new_chip:
(1) 1552/     79A : 7B                  		ld	a,e			; Read NEW chip
(1) 1553/     79B : B7                  		or	a			; If non-minus, exit.
(1) 1554/     79C : F0                  		ret	p
(1) 1555/     79D : CD 0A 08            		call	.pick_tbl
(1) 1556/     7A0 : CF                  		rst	8
(1) 1557/     7A1 : FD 4E 11            		ld	c,(iy+trk_Priority)	; c - OUR priority level
(1) 1558/     7A4 : B7                  		or	a
(1) 1559/     7A5 : FA F5 07            		jp	m,.singl_free
(1) 1560/     7A8 : E5                  		push	hl			; Backup START table
(1) 1561/     7A9 :                     ; PASS 1
(1) 1562/     7A9 :                     .srch_free:
(1) 1563/     7A9 : 7E                  		ld	a,(hl)			; Read LSB
(1) 1564/     7AA : FE FF               		cp	-1			; If -1, return -1
(1) 1565/     7AC : 28 0B               		jr	z,.pass_2
(1) 1566/     7AE : 23                  		inc	hl
(1) 1567/     7AF : 46                  		ld	b,(hl)			; Read MSB
(1) 1568/     7B0 : 2B                  		dec	hl
(1) 1569/     7B1 :                     ; 		nop	; wave sync
(1) 1570/     7B1 :                     ; 		nop
(1) 1571/     7B1 :                     ; 		rst	8
(1) 1572/     7B1 :                     ; 		nop
(1) 1573/     7B1 :                     ; 		nop
(1) 1574/     7B1 : B0                  		or	b
(1) 1575/     7B2 : 28 24               		jr	z,.new_link_z
(1) 1576/     7B4 : CD D1 07            		call	.nextsrch_tbl
(1) 1577/     7B7 : 18 F0               		jr	.srch_free
(1) 1578/     7B9 :                     
(1) 1579/     7B9 :                     ; PASS 2
(1) 1580/     7B9 :                     ; Rewrite mode
(1) 1581/     7B9 :                     .pass_2:
(1) 1582/     7B9 : E1                  		pop	hl
(1) 1583/     7BA :                     .next_prio:
(1) 1584/     7BA : 7E                  		ld	a,(hl)		; Read LSB
(1) 1585/     7BB : FE FF               		cp	-1		; If -1, return -1
(1) 1586/     7BD : C8                  		ret	z
(1) 1587/     7BE : 23                  		inc	hl
(1) 1588/     7BF : 23                  		inc	hl
(1) 1589/     7C0 : 7E                  		ld	a,(hl)		; Read priority
(1) 1590/     7C1 : 2B                  		dec	hl
(1) 1591/     7C2 : 2B                  		dec	hl
(1) 1592/     7C3 : B9                  		cp	c
(1) 1593/     7C4 : 28 16               		jr	z,.new_link_o
(1) 1594/     7C6 : 38 14               		jr	c,.new_link_o
(1) 1595/     7C8 : B7                  		or	a
(1) 1596/     7C9 : 28 11               		jr	z,.new_link_o
(1) 1597/     7CB : CF                  		rst	8
(1) 1598/     7CC : CD D1 07            		call	.nextsrch_tbl
(1) 1599/     7CF : 18 E9               		jr	.next_prio
(1) 1600/     7D1 :                     .nextsrch_tbl:
(1) 1601/     7D1 : D5                  		push	de
(1) 1602/     7D2 : 11 18 00            		ld	de,MAX_TBLSIZE
(1) 1603/     7D5 : 19                  		add	hl,de
(1) 1604/     7D6 : D1                  		pop	de
(1) 1605/     7D7 :                     ; 		nop	; wave sync
(1) 1606/     7D7 :                     ; 		nop
(1) 1607/     7D7 :                     ; 		rst	8
(1) 1608/     7D7 :                     ; 		nop
(1) 1609/     7D7 :                     ; 		nop
(1) 1610/     7D7 : C9                  		ret
(1) 1611/     7D8 :                     .new_link_z:
(1) 1612/     7D8 : 33                  		inc	sp		; skip backup
(1) 1613/     7D9 : 33                  		inc	sp
(1) 1614/     7DA : 18 08               		jr	.new_link
(1) 1615/     7DC :                     
(1) 1616/     7DC :                     ; OVERWRITE link
(1) 1617/     7DC :                     .new_link_o:
(1) 1618/     7DC : E5                  		push	hl
(1) 1619/     7DD : DD 56 01            		ld	d,(ix+chnl_Chip)
(1) 1620/     7E0 : CD 24 08            		call	.reset_link
(1) 1621/     7E3 : E1                  		pop	hl
(1) 1622/     7E4 :                     ; NEW link
(1) 1623/     7E4 :                     .new_link:
(1) 1624/     7E4 : CF                  		rst	8
(1) 1625/     7E5 : 23                  		inc	hl
(1) 1626/     7E6 : 23                  		inc	hl
(1) 1627/     7E7 :                     ; hl+2
(1) 1628/     7E7 :                     .l_hiprio:
(1) 1629/     7E7 : DD 73 01            		ld	(ix+chnl_Chip),e
(1) 1630/     7EA : DD E5               		push	ix
(1) 1631/     7EC : D1                  		pop	de
(1) 1632/     7ED : 71                  		ld	(hl),c		; write priority
(1) 1633/     7EE : 2B                  		dec	hl
(1) 1634/     7EF : CF                  		rst	8
(1) 1635/     7F0 : 72                  		ld 	(hl),d		; MSB
(1) 1636/     7F1 : 2B                  		dec	hl
(1) 1637/     7F2 : 73                  		ld	(hl),e		; LSB
(1) 1638/     7F3 : AF                  		xor	a
(1) 1639/     7F4 : C9                  		ret
(1) 1640/     7F5 :                     
(1) 1641/     7F5 :                     ; Single slot
(1) 1642/     7F5 :                     ; c - priority
(1) 1643/     7F5 :                     ; e - chip
(1) 1644/     7F5 :                     .singl_free:
(1) 1645/     7F5 : 46                  		ld	b,(hl)
(1) 1646/     7F6 : 23                  		inc	hl
(1) 1647/     7F7 : 7E                  		ld	a,(hl)
(1) 1648/     7F8 : 23                  		inc	hl
(1) 1649/     7F9 : B0                  		or	b
(1) 1650/     7FA : 28 EB               		jr	z,.l_hiprio
(1) 1651/     7FC : CF                  		rst	8
(1) 1652/     7FD : 7E                  		ld	a,(hl)
(1) 1653/     7FE : B9                  		cp	c
(1) 1654/     7FF : 28 E6               		jr	z,.l_hiprio
(1) 1655/     801 : 38 E4               		jr	c,.l_hiprio		; PRIORITY
(1) 1656/     803 : B7                  		or	a
(1) 1657/     804 : 28 E1               		jr	z,.l_hiprio
(1) 1658/     806 : CF                  		rst	8
(1) 1659/     807 :                     .set_asfull:
(1) 1660/     807 : 3E FF               		ld	a,-1		; Return -1, can't use instrument.
(1) 1661/     809 : C9                  		ret
(1) 1662/     80A :                     
(1) 1663/     80A :                     ; Pick chip table
(1) 1664/     80A :                     ; In:
(1) 1665/     80A :                     ;  a - ID
(1) 1666/     80A :                     ;
(1) 1667/     80A :                     ; Out:
(1) 1668/     80A :                     ;  a - Special bit + ID
(1) 1669/     80A :                     ;
(1) 1670/     80A :                     ; hl - Table
(1) 1671/     80A :                     .pick_tbl:
(1) 1672/     80A : D5                  		push	de
(1) 1673/     80B : 0F                  		rrca
(1) 1674/     80C : 0F                  		rrca
(1) 1675/     80D : 0F                  		rrca
(1) 1676/     80E : 0F                  		rrca
(1) 1677/     80F : E6 07               		and	00000111b
(1) 1678/     811 : 87                  		add	a,a
(1) 1679/     812 : 21 56 16            		ld	hl,tblList
(1) 1680/     815 : E5                  		push	hl
(1) 1681/     816 : 16 00               		ld	d,0
(1) 1682/     818 : 5F                  		ld	e,a
(1) 1683/     819 : 19                  		add	hl,de
(1) 1684/     81A : 5E                  		ld	e,(hl)
(1) 1685/     81B : 23                  		inc	hl
(1) 1686/     81C : 7E                  		ld	a,(hl)
(1) 1687/     81D : 57                  		ld	d,a
(1) 1688/     81E : CB BA               		res	7,d
(1) 1689/     820 : E1                  		pop	hl
(1) 1690/     821 : 19                  		add	hl,de
(1) 1691/     822 : D1                  		pop	de
(1) 1692/     823 : C9                  		ret
(1) 1693/     824 :                     
(1) 1694/     824 :                     ; d - Silence chip
(1) 1695/     824 :                     ;
(1) 1696/     824 :                     ; Uses:
(1) 1697/     824 :                     ; bc
(1) 1698/     824 :                     .reset_link:
(1) 1699/     824 : CF                  		rst	8
(1) 1700/     825 : 36 00               		ld	(hl),0			; Delete link
(1) 1701/     827 : 23                  		inc	hl
(1) 1702/     828 : 36 00               		ld	(hl),0
(1) 1703/     82A : 23                  		inc	hl
(1) 1704/     82B : 72                  		ld	(hl),d			; Set "silence" chip ID.
(1) 1705/     82C : 01 06 00            		ld	bc,8-2			; Go to 08h
(1) 1706/     82F : 09                  		add	hl,bc
(1) 1707/     830 : 06 04               		ld	b,8/2
(1) 1708/     832 :                     .clrfull:
(1) 1709/     832 : 36 00               		ld	(hl),0			; Reset settings 08-0Bh
(1) 1710/     834 : 23                  		inc	hl
(1) 1711/     835 : 36 00               		ld	(hl),0
(1) 1712/     837 : 23                  		inc	hl
(1) 1713/     838 : CF                  		rst	8
(1) 1714/     839 : 10 F7               		djnz	.clrfull
(1) 1715/     83B : C9                  		ret
(1) 1716/     83C :                     
(1) 1717/     83C :                     ; ============================================
(1) 1718/     83C :                     ; ----------------------------------------
(1) 1719/     83C :                     ; Process chip using it's table
(1) 1720/     83C :                     ;
(1) 1721/     83C :                     ; iy - table to read
(1) 1722/     83C :                     ; ----------------------------------------
(1) 1723/     83C :                     
(1) 1724/     83C :                     dtbl_multi:
(1) 1725/     83C : FD 7E 00            		ld	a,(iy)
(1) 1726/     83F : FE FF               		cp	-1
(1) 1727/     841 : C8                  		ret	z
(1) 1728/     842 : CD 52 08            		call	dtbl_frommul
(1) 1729/     845 : CF                  		rst	8
(1) 1730/     846 : 11 18 00            		ld	de,MAX_TBLSIZE
(1) 1731/     849 : FD 19               		add	iy,de
(1) 1732/     84B : 06 03               		ld	b,3	; wave sync ** IMPORTANT **
(1) 1733/     84D : 10 FE               		djnz	$
(1) 1734/     84F : CF                  		rst	8
(1) 1735/     850 : 18 EA               		jr	dtbl_multi
(1) 1736/     852 :                     dtbl_singl:
(1) 1737/     852 :                     ; 		rst	8
(1) 1738/     852 :                     
(1) 1739/     852 :                     dtbl_frommul:
(1) 1740/     852 : FD 5E 00            		ld	e,(iy)
(1) 1741/     855 : FD 56 01            		ld	d,(iy+1)
(1) 1742/     858 : 7A                  		ld	a,d
(1) 1743/     859 : B3                  		or	e
(1) 1744/     85A : 20 63               		jr	nz,.linked
(1) 1745/     85C : FD 7E 02            		ld	a,(iy+2)	; Any 80h+ Flag?
(1) 1746/     85F : B7                  		or	a
(1) 1747/     860 : F0                  		ret	p
(1) 1748/     861 : FD 7E 02            		ld	a,(iy+2)	; a - chip type
(1) 1749/     864 : CF                  		rst	8
(1) 1750/     865 : FD 36 02 00         		ld	(iy+2),0	; Reset priority
(1) 1751/     869 :                     
(1) 1752/     869 :                     ; ----------------------------------------
(1) 1753/     869 :                     ; chip-silence request
(1) 1754/     869 :                     ; iy - Table
(1) 1755/     869 : E6 F0               		and	11110000b
(1) 1756/     86B : FE 80               		cp	80h
(1) 1757/     86D : 28 1E               		jr	z,.siln_psg
(1) 1758/     86F : FE 90               		cp	90h
(1) 1759/     871 : 28 16               		jr	z,.siln_psg_n
(1) 1760/     873 : FE A0               		cp	0A0h
(1) 1761/     875 : 28 42               		jr	z,.siln_fm
(1) 1762/     877 : FE B0               		cp	0B0h
(1) 1763/     879 : 28 3E               		jr	z,.siln_fm
(1) 1764/     87B : CF                  		rst	8
(1) 1765/     87C : FE C0               		cp	0C0h
(1) 1766/     87E : 28 36               		jr	z,.siln_dac
(1) 1767/     880 : FE D0               		cp	0D0h
(1) 1768/     882 : 28 10               		jr	z,.siln_pcm
(1) 1769/     884 : FE E0               		cp	0E0h
(1) 1770/     886 : 28 18               		jr	z,.siln_pwm
(1) 1771/     888 : C9                  		ret
(1) 1772/     889 :                     .siln_psg_n:
(1) 1773/     889 : AF                  		xor	a
(1) 1774/     88A : 32 83 1F            		ld	(psgHatMode),a
(1) 1775/     88D :                     .siln_psg:
(1) 1776/     88D : CF                  		rst	8
(1) 1777/     88E : DD 21 58 19         		ld	ix,psgcom
(1) 1778/     892 : 18 16               		jr	.rcyl_com
(1) 1779/     894 :                     
(1) 1780/     894 :                     ; --------------------------------
(1) 1781/     894 :                     
(1) 1782/     894 :                     .siln_pcm:
(1) 1783/     894 : 3E 01               		ld	a,1
(1) 1784/     896 : 32 88 1F            		ld	(mcdUpd),a
(1) 1785/     899 : CF                  		rst	8
(1) 1786/     89A : DD 21 E0 18         		ld	ix,pcmcom
(1) 1787/     89E : 18 0A               		jr	.rcyl_com
(1) 1788/     8A0 :                     .siln_pwm:
(1) 1789/     8A0 : 3E 01               		ld	a,1
(1) 1790/     8A2 : 32 87 1F            		ld	(marsUpd),a
(1) 1791/     8A5 : CF                  		rst	8
(1) 1792/     8A6 : DD 21 20 19         		ld	ix,pwmcom
(1) 1793/     8AA :                     ; 		jr	.rcyl_com
(1) 1794/     8AA :                     
(1) 1795/     8AA :                     ; --------------------------------
(1) 1796/     8AA :                     
(1) 1797/     8AA :                     .rcyl_com:
(1) 1798/     8AA : 06 00               		ld	b,0
(1) 1799/     8AC : FD 4E 05            		ld	c,(iy+05h)
(1) 1800/     8AF : DD 09               		add	ix,bc
(1) 1801/     8B1 : DD 36 00 04         		ld	(ix),100b	; key-off
(1) 1802/     8B5 : C9                  		ret
(1) 1803/     8B6 :                     
(1) 1804/     8B6 :                     ; --------------------------------
(1) 1805/     8B6 :                     
(1) 1806/     8B6 :                     .siln_dac:
(1) 1807/     8B6 : CD 1C 13            		call	dac_off
(1) 1808/     8B9 :                     .siln_fm:
(1) 1809/     8B9 : CD 88 0A            		call	.fm_keyoff
(1) 1810/     8BC : C3 90 0A            		jp	.fm_tloff
(1) 1811/     8BF :                     
(1) 1812/     8BF :                     ; ----------------------------------------
(1) 1813/     8BF :                     ; Process channel now
(1) 1814/     8BF :                     ; iy - Table
(1) 1815/     8BF :                     ; ix - Tracker channel
(1) 1816/     8BF :                     .linked:
(1) 1817/     8BF : 1A                  		ld	a,(de)		; ** chnl_Flags
(1) 1818/     8C0 : 47                  		ld	b,a		; b - flags to check
(1) 1819/     8C1 : E6 0F               		and	00001111b	; Filter flags
(1) 1820/     8C3 : C8                  		ret	z
(1) 1821/     8C4 : 78                  		ld	a,b
(1) 1822/     8C5 : E6 F0               		and	11110000b	; Keep OTHER bits
(1) 1823/     8C7 : 12                  		ld	(de),a		; ** clear chnl_Flags
(1) 1824/     8C8 : D5                  		push	de
(1) 1825/     8C9 : DD E1               		pop	ix
(1) 1826/     8CB : FD E5               		push	iy		; table+10h instrment data
(1) 1827/     8CD : E1                  		pop	hl
(1) 1828/     8CE : 11 10 00            		ld	de,10h
(1) 1829/     8D1 : 19                  		add	hl,de
(1) 1830/     8D2 :                     
(1) 1831/     8D2 :                     ; 		ld	l,(iy+03h)	; trk_Instr
(1) 1832/     8D2 :                     ; 		ld	h,(iy+04h)
(1) 1833/     8D2 :                     
(1) 1834/     8D2 :                     	;  b - Flags LR00evin (Eff|Vol|Ins|Note)
(1) 1835/     8D2 :                     	; iy - Our chip table
(1) 1836/     8D2 :                     	; ix - Track channel
(1) 1837/     8D2 :                     	; hl - Intrument data
(1) 1838/     8D2 : CB 40               		bit	0,b		; Note
(1) 1839/     8D4 : C4 AE 0F            		call	nz,.note
(1) 1840/     8D7 : CB 48               		bit	1,b		; Intrument
(1) 1841/     8D9 : C4 FD 0D            		call	nz,.inst
(1) 1842/     8DC : CF                  		rst	8
(1) 1843/     8DD : CB 50               		bit	2,b		; Volume
(1) 1844/     8DF : C4 F4 0D            		call	nz,.volu
(1) 1845/     8E2 : CB 58               		bit	3,b		; Effect
(1) 1846/     8E4 : C4 F2 0C            		call	nz,.effc
(1) 1847/     8E7 : 78                  		ld	a,b
(1) 1848/     8E8 : E6 0F               		and	00001111b
(1) 1849/     8EA : C8                  		ret	z
(1) 1850/     8EB : CF                  		rst	8
(1) 1851/     8EC :                     
(1) 1852/     8EC :                     ; ----------------------------------------
(1) 1853/     8EC :                     ; Process channel now
(1) 1854/     8EC :                     ;
(1) 1855/     8EC :                     ; b - Note bits
(1) 1856/     8EC :                     ; ----------------------------------------
(1) 1857/     8EC :                     
(1) 1858/     8EC : 7E                  		ld	a,(hl)
(1) 1859/     8ED : E6 70               		and	01110000b	; <--
(1) 1860/     8EF : 0F                  		rrca
(1) 1861/     8F0 : 0F                  		rrca
(1) 1862/     8F1 : 0F                  		rrca
(1) 1863/     8F2 : 16 00               		ld	d,0
(1) 1864/     8F4 : 5F                  		ld	e,a
(1) 1865/     8F5 : 21 FE 08            		ld	hl,.mk_list
(1) 1866/     8F8 : 19                  		add	hl,de
(1) 1867/     8F9 : 7E                  		ld	a,(hl)
(1) 1868/     8FA : 23                  		inc	hl
(1) 1869/     8FB : 66                  		ld	h,(hl)
(1) 1870/     8FC : 6F                  		ld	l,a
(1) 1871/     8FD : E9                  		jp	(hl)
(1) 1872/     8FE :                     ; --------------------------------
(1) 1873/     8FE :                     .mk_list:
(1) 1874/     8FE : 2A 09               		dw .mk_psg
(1) 1875/     900 : 0C 09               		dw .mk_psgn
(1) 1876/     902 : A4 09               		dw .mk_fm
(1) 1877/     904 : 19 0A               		dw .mk_fmspc
(1) 1878/     906 : 6E 0B               		dw .mk_dac
(1) 1879/     908 : CD 0B               		dw .mk_pcm
(1) 1880/     90A : 49 0C               		dw .mk_pwm
(1) 1881/     90C :                     ; 		dw 0	; TODO
(1) 1882/     90C :                     
(1) 1883/     90C :                     ; --------------------------------
(1) 1884/     90C :                     
(1) 1885/     90C :                     .mk_psgn:
(1) 1886/     90C : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 1887/     90F : DD E5               		push	ix
(1) 1888/     911 : DD 21 5B 19         		ld	ix,psgcom+3	; <-- direct ix point
(1) 1889/     915 : CF                  		rst	8
(1) 1890/     916 : FE FE               		cp	-2
(1) 1891/     918 : 28 7A               		jr	z,.kycut_psgn
(1) 1892/     91A : FE FF               		cp	-1
(1) 1893/     91C : 28 66               		jr	z,.kyoff_psgn
(1) 1894/     91E : 5F                  		ld	e,a
(1) 1895/     91F : 3A 83 1F            		ld	a,(psgHatMode)	; Tone 3?
(1) 1896/     922 : E6 03               		and	011b
(1) 1897/     924 : FE 03               		cp	011b
(1) 1898/     926 : 20 42               		jr	nz,.psg_keyon	; Normal
(1) 1899/     928 : 18 19               		jr	.from_psgn	; Tone 3
(1) 1900/     92A :                     .mk_psg:
(1) 1901/     92A : CF                  		rst	8
(1) 1902/     92B : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 1903/     92E : DD E5               		push	ix
(1) 1904/     930 : DD 21 58 19         		ld	ix,psgcom	; ix - psgcom
(1) 1905/     934 : FD 5E 05            		ld	e,(iy+05h)
(1) 1906/     937 : 16 00               		ld	d,0
(1) 1907/     939 : DD 19               		add	ix,de
(1) 1908/     93B : FE FE               		cp	-2
(1) 1909/     93D : 28 5A               		jr	z,.kycut_psg
(1) 1910/     93F : FE FF               		cp	-1
(1) 1911/     941 : 28 46               		jr	z,.kyoff_psg
(1) 1912/     943 :                     .from_psgn:
(1) 1913/     943 : CF                  		rst	8
(1) 1914/     944 : 16 00               		ld	d,0		; de - note*2
(1) 1915/     946 : FD 5E 06            		ld	e,(iy+06h)	; Freq index
(1) 1916/     949 : 21 06 14            		ld	hl,psgFreq_List-(36*2)
(1) 1917/     94C : 19                  		add	hl,de
(1) 1918/     94D : 7E                  		ld	a,(hl)
(1) 1919/     94E : 23                  		inc	hl
(1) 1920/     94F : 66                  		ld	h,(hl)
(1) 1921/     950 : 6F                  		ld	l,a
(1) 1922/     951 : FD 7E 07            		ld	a,(iy+07h)	; pitchbend
(1) 1923/     954 : 07                  		rlca			; << 3
(1) 1924/     955 : 07                  		rlca
(1) 1925/     956 : CF                  		rst	8
(1) 1926/     957 : 07                  		rlca
(1) 1927/     958 : 57                  		ld	d,a
(1) 1928/     959 : E6 F8               		and	11111000b
(1) 1929/     95B : 5F                  		ld	e,a
(1) 1930/     95C : 7A                  		ld	a,d
(1) 1931/     95D : E6 07               		and	00000111b
(1) 1932/     95F : 57                  		ld	d,a
(1) 1933/     960 : 37                  		scf
(1) 1934/     961 : 3F                  		ccf
(1) 1935/     962 : ED 52               		sbc	hl,de
(1) 1936/     964 : DD 75 1C            		ld	(ix+DTL),l
(1) 1937/     967 : DD 74 20            		ld	(ix+DTH),h
(1) 1938/     96A :                     .psg_keyon:
(1) 1939/     96A : FD 7E 08            		ld	a,(iy+08h)	; Set volume
(1) 1940/     96D : ED 44               		neg	a
(1) 1941/     96F : CF                  		rst	8
(1) 1942/     970 : 87                  		add	a,a
(1) 1943/     971 : 87                  		add	a,a
(1) 1944/     972 : 30 02               		jr	nc,.vmuch
(1) 1945/     974 : 3E FF               		ld	a,-1
(1) 1946/     976 :                     .vmuch:
(1) 1947/     976 : DD 77 30            		ld	(ix+PVOL),a
(1) 1948/     979 : CB 40               		bit	0,b		; Note change?
(1) 1949/     97B : 28 04               		jr	z,.psgnone
(1) 1950/     97D : DD 36 00 01         		ld	(ix+COM),001b	; Key ON
(1) 1951/     981 :                     .psgnone:
(1) 1952/     981 : DD E1               		pop	ix
(1) 1953/     983 : C9                  		ret
(1) 1954/     984 :                     ; -1
(1) 1955/     984 :                     .kyoff_psgn:
(1) 1956/     984 : 3E 00               		ld	a,000b
(1) 1957/     986 : 32 83 1F            		ld	(psgHatMode),a	; ** GLOBAL SETTING
(1) 1958/     989 :                     .kyoff_psg:
(1) 1959/     989 : CF                  		rst	8
(1) 1960/     98A : 0E 02               		ld	c,010b
(1) 1961/     98C : DD 71 00            		ld	(ix),c
(1) 1962/     98F : DD E1               		pop	ix
(1) 1963/     991 : C3 1E 10            		jp	.chnl_ulnkoff
(1) 1964/     994 :                     ; -2
(1) 1965/     994 :                     .kycut_psgn:
(1) 1966/     994 : 3E 00               		ld	a,000b
(1) 1967/     996 : 32 83 1F            		ld	(psgHatMode),a	; ** GLOBAL SETTING
(1) 1968/     999 :                     .kycut_psg:
(1) 1969/     999 : CF                  		rst	8
(1) 1970/     99A : 0E 04               		ld	c,100b
(1) 1971/     99C : DD 71 00            		ld	(ix),c
(1) 1972/     99F : DD E1               		pop	ix
(1) 1973/     9A1 : C3 36 10            		jp	.chnl_ulnkcut
(1) 1974/     9A4 :                     
(1) 1975/     9A4 :                     ; --------------------------------
(1) 1976/     9A4 :                     
(1) 1977/     9A4 :                     .mk_fm:
(1) 1978/     9A4 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 1979/     9A7 : FE FE               		cp	-2
(1) 1980/     9A9 : CA 7F 0A            		jp	z,.fm_cut
(1) 1981/     9AC : FE FF               		cp	-1
(1) 1982/     9AE : CA 79 0A            		jp	z,.fm_off
(1) 1983/     9B1 :                     ; 		call	.fm_tloff
(1) 1984/     9B1 : CF                  		rst	8
(1) 1985/     9B2 : FD 4E 05            		ld	c,(iy+05h)	; c - KeyID
(1) 1986/     9B5 : 78                  		ld	a,b		; Note bit?
(1) 1987/     9B6 : E6 01               		and	0001b
(1) 1988/     9B8 : C8                  		ret	z
(1) 1989/     9B9 : 79                  		ld	a,c
(1) 1990/     9BA : FE 06               		cp	6
(1) 1991/     9BC : 20 05               		jr	nz,.not_dac
(1) 1992/     9BE : CD 1C 13            		call	dac_off
(1) 1993/     9C1 : 18 16               		jr	.not_dspc
(1) 1994/     9C3 :                     .not_dac:
(1) 1995/     9C3 : 79                  		ld	a,c
(1) 1996/     9C4 : FE 02               		cp	2
(1) 1997/     9C6 : 20 11               		jr	nz,.not_dspc
(1) 1998/     9C8 : 3A 84 1F            		ld	a,(fmSpecial)
(1) 1999/     9CB : B7                  		or	a
(1) 2000/     9CC : 28 0B               		jr	z,.not_dspc
(1) 2001/     9CE : 11 00 27            		ld	de,2700h	; CH3 off
(1) 2002/     9D1 : CD F1 12            		call	fm_send_1
(1) 2003/     9D4 : 3E 00               		ld	a,0
(1) 2004/     9D6 : 32 84 1F            		ld	(fmSpecial),a
(1) 2005/     9D9 :                     .not_dspc:
(1) 2006/     9D9 : CD 88 0A            		call	.fm_keyoff
(1) 2007/     9DC :                     
(1) 2008/     9DC : FD 7E 06            		ld	a,(iy+06h)
(1) 2009/     9DF : 47                  		ld	b,a
(1) 2010/     9E0 : E6 1F               		and	00011111b
(1) 2011/     9E2 : 5F                  		ld	e,a
(1) 2012/     9E3 : 16 00               		ld	d,0
(1) 2013/     9E5 : 21 36 14            		ld	hl,fmFreq_List
(1) 2014/     9E8 : 19                  		add	hl,de
(1) 2015/     9E9 : 7E                  		ld	a,(hl)
(1) 2016/     9EA : CF                  		rst	8
(1) 2017/     9EB : 23                  		inc	hl
(1) 2018/     9EC : 66                  		ld	h,(hl)
(1) 2019/     9ED : 6F                  		ld	l,a
(1) 2020/     9EE : 78                  		ld	a,b
(1) 2021/     9EF : E6 E0               		and	11100000b
(1) 2022/     9F1 : 0F                  		rrca
(1) 2023/     9F2 : 0F                  		rrca
(1) 2024/     9F3 : B4                  		or	h
(1) 2025/     9F4 : 67                  		ld	h,a
(1) 2026/     9F5 : FD 5E 07            		ld	e,(iy+07h)	; pitchbend
(1) 2027/     9F8 : CF                  		rst	8
(1) 2028/     9F9 : AF                  		xor	a		; Clear high
(1) 2029/     9FA : 3F                  		ccf			; Clear carry
(1) 2030/     9FB : CB 23               		sla	e		; << 2
(1) 2031/     9FD : CB 23               		sla	e
(1) 2032/     9FF : 9F                  		sbc	a,a		; -1 if carry is set
(1) 2033/     A00 : 57                  		ld	d,a
(1) 2034/     A01 : 19                  		add	hl,de
(1) 2035/     A02 : CD A7 0A            		call	.fm_setfreq
(1) 2036/     A05 :                     .fmspc_set:
(1) 2037/     A05 : CD 38 0B            		call	.fm_wrtalpan	; Panning and effects
(1) 2038/     A08 : CD BE 0A            		call	.fm_wrtlvol	; FM volume control
(1) 2042/     A0B : FD 7E 0F            		ld	a,(iy+0Fh)	; 0Fh - keys ***
(1) 2043/     A0E : E6 F0               		and	11110000b
(1) 2044/     A10 : B1                  		or	c
(1) 2045/     A11 : 5F                  		ld	e,a
(1) 2046/     A12 : 16 28               		ld	d,28h
(1) 2047/     A14 : CD F1 12            		call	fm_send_1
(1) 2048/     A17 : CF                  		rst	8
(1) 2049/     A18 :                     .nofm_note:
(1) 2050/     A18 : C9                  		ret
(1) 2052/     A19 :                     
(1) 2053/     A19 :                     ; --------------------------------
(1) 2054/     A19 :                     
(1) 2055/     A19 :                     .mk_fmspc:
(1) 2056/     A19 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 2057/     A1C : FE FE               		cp	-2
(1) 2058/     A1E : CA 7F 0A            		jp	z,.fm_cut
(1) 2059/     A21 : FE FF               		cp	-1
(1) 2060/     A23 : CA 79 0A            		jp	z,.fm_off
(1) 2061/     A26 :                     
(1) 2062/     A26 : 78                  		ld	a,b		; Note bit?
(1) 2063/     A27 : E6 01               		and	0001b
(1) 2064/     A29 : C8                  		ret	z
(1) 2065/     A2A :                     
(1) 2066/     A2A : FD 4E 05            		ld	c,(iy+05h)	; c - KeyID
(1) 2067/     A2D : 78                  		ld	a,b
(1) 2068/     A2E : E6 01               		and	0001b
(1) 2069/     A30 : 28 D3               		jr	z,.fmspc_set
(1) 2070/     A32 : CD 88 0A            		call	.fm_keyoff
(1) 2071/     A35 : 21 F8 14            		ld	hl,fmcach_list	; Manual freqs
(1) 2072/     A38 : FD 7E 05            		ld	a,(iy+05h)
(1) 2073/     A3B : E6 07               		and	0111b
(1) 2074/     A3D : 16 00               		ld	d,0
(1) 2075/     A3F : 87                  		add	a,a
(1) 2076/     A40 : 5F                  		ld	e,a
(1) 2077/     A41 : CF                  		rst	8
(1) 2078/     A42 : 19                  		add	hl,de
(1) 2079/     A43 : 7E                  		ld	a,(hl)
(1) 2080/     A44 : 23                  		inc	hl
(1) 2081/     A45 : 66                  		ld	h,(hl)
(1) 2082/     A46 : 6F                  		ld	l,a
(1) 2083/     A47 : CF                  		rst	8
(1) 2084/     A48 : 11 20 00            		ld	de,20h		; point to regs
(1) 2085/     A4B : 19                  		add	hl,de
(1) 2086/     A4C : DD E5               		push	ix
(1) 2087/     A4E : DD 21 71 0A         		ld	ix,.spcreglist
(1) 2088/     A52 : 06 08               		ld	b,8
(1) 2089/     A54 :                     .wr_spc:
(1) 2090/     A54 : DD 56 00            		ld	d,(ix)
(1) 2091/     A57 : 5E                  		ld	e,(hl)
(1) 2092/     A58 : CD F1 12            		call	fm_send_1
(1) 2093/     A5B : CF                  		rst	8
(1) 2094/     A5C : 23                  		inc	hl
(1) 2095/     A5D : DD 23               		inc	ix
(1) 2096/     A5F : 10 F3               		djnz	.wr_spc
(1) 2097/     A61 : DD E1               		pop	ix
(1) 2098/     A63 : 11 40 27            		ld	de,2740h	; CH3 on
(1) 2099/     A66 : CD F1 12            		call	fm_send_1
(1) 2100/     A69 : 3E 01               		ld	a,1
(1) 2101/     A6B : 32 84 1F            		ld	(fmSpecial),a
(1) 2102/     A6E : C3 05 0A            		jp	.fmspc_set
(1) 2103/     A71 :                     .spcreglist:
(1) 2104/     A71 : AD A9               		db 0ADh,0A9h
(1) 2105/     A73 : AC A8               		db 0ACh,0A8h
(1) 2106/     A75 : AE AA               		db 0AEh,0AAh
(1) 2107/     A77 : A6 A2               		db 0A6h,0A2h
(1) 2108/     A79 :                     
(1) 2109/     A79 :                     ; --------------------------------
(1) 2110/     A79 :                     
(1) 2111/     A79 :                     .fm_off:
(1) 2112/     A79 : CD 88 0A            		call	.fm_keyoff
(1) 2113/     A7C : C3 1E 10            		jp	.chnl_ulnkoff
(1) 2114/     A7F :                     .fm_cut:
(1) 2115/     A7F : CD 88 0A            		call	.fm_keyoff
(1) 2116/     A82 : CD 90 0A            		call	.fm_tloff
(1) 2117/     A85 : C3 36 10            		jp	.chnl_ulnkcut
(1) 2118/     A88 :                     
(1) 2119/     A88 :                     ; ----------------------------------------
(1) 2120/     A88 :                     
(1) 2121/     A88 :                     .fm_keyoff:
(1) 2122/     A88 : 16 28               		ld	d,28h
(1) 2123/     A8A : FD 5E 05            		ld	e,(iy+05h)
(1) 2124/     A8D : C3 F1 12            		jp	fm_send_1
(1) 2125/     A90 :                     .fm_tloff:
(1) 2126/     A90 : 06 04               		ld	b,4
(1) 2127/     A92 : FD 4E 05            		ld	c,(iy+05h)
(1) 2128/     A95 : 79                  		ld	a,c
(1) 2129/     A96 : E6 03               		and	011b
(1) 2130/     A98 : F6 40               		or	40h	; TL regs
(1) 2131/     A9A :                     .tl_down:
(1) 2132/     A9A : 57                  		ld	d,a
(1) 2133/     A9B : 1E 7F               		ld	e,7Fh
(1) 2134/     A9D : CD ED 12            		call	fm_autoreg
(1) 2135/     AA0 : CF                  		rst	8
(1) 2136/     AA1 : 7A                  		ld	a,d
(1) 2137/     AA2 : C6 04               		add	a,4
(1) 2138/     AA4 : 10 F4               		djnz	.tl_down
(1) 2139/     AA6 : C9                  		ret
(1) 2140/     AA7 :                     ; c - KeyID
(1) 2141/     AA7 :                     .fm_setfreq:
(1) 2142/     AA7 : 79                  		ld	a,c
(1) 2143/     AA8 : E6 03               		and	011b
(1) 2144/     AAA : F6 A4               		or	0A4h
(1) 2145/     AAC : 57                  		ld	d,a
(1) 2146/     AAD : 5C                  		ld	e,h
(1) 2147/     AAE : CF                  		rst	8
(1) 2148/     AAF : CD ED 12            		call	fm_autoreg
(1) 2149/     AB2 : 79                  		ld	a,c
(1) 2150/     AB3 : E6 03               		and	011b
(1) 2151/     AB5 : F6 A0               		or	0A0h
(1) 2152/     AB7 : 57                  		ld	d,a
(1) 2153/     AB8 : 5D                  		ld	e,l
(1) 2154/     AB9 : CD ED 12            		call	fm_autoreg
(1) 2155/     ABC : CF                  		rst	8
(1) 2156/     ABD : C9                  		ret
(1) 2157/     ABE :                     
(1) 2158/     ABE :                     ; --------------------------------
(1) 2159/     ABE :                     ; WRITE TL volume
(1) 2160/     ABE :                     
(1) 2161/     ABE :                     .fm_wrtlvol:
(1) 2162/     ABE : 21 F8 14            		ld	hl,fmcach_list
(1) 2163/     AC1 : FD 7E 05            		ld	a,(iy+05h)
(1) 2164/     AC4 : E6 07               		and	0111b
(1) 2165/     AC6 : 16 00               		ld	d,0
(1) 2166/     AC8 : CF                  		rst	8
(1) 2167/     AC9 : 87                  		add	a,a
(1) 2168/     ACA : 5F                  		ld	e,a
(1) 2169/     ACB : 19                  		add	hl,de
(1) 2170/     ACC : 7E                  		ld	a,(hl)
(1) 2171/     ACD : 23                  		inc	hl
(1) 2172/     ACE : 66                  		ld	h,(hl)
(1) 2173/     ACF : 6F                  		ld	l,a
(1) 2174/     AD0 : 23                  		inc	hl
(1) 2175/     AD1 : 23                  		inc	hl
(1) 2176/     AD2 : 23                  		inc	hl
(1) 2177/     AD3 : CF                  		rst	8
(1) 2178/     AD4 : 23                  		inc	hl		; Point to TL's
(1) 2179/     AD5 : FD 7E 05            		ld	a,(iy+05h)
(1) 2180/     AD8 : E6 03               		and	011b
(1) 2181/     ADA : F6 40               		or	40h		; TL registers
(1) 2182/     ADC : 57                  		ld	d,a
(1) 2183/     ADD :                     ; d - 40h+
(1) 2184/     ADD :                     ; hl - TL data
(1) 2185/     ADD :                     ; .fm_wrtlvol:
(1) 2186/     ADD : C5                  		push	bc
(1) 2187/     ADE : E5                  		push	hl
(1) 2188/     ADF : 21 30 0B            		ld	hl,.fm_cindx
(1) 2189/     AE2 : FD 7E 0C            		ld	a,(iy+0Ch)	; Read 0B0h copy
(1) 2190/     AE5 : E6 07               		and	0111b
(1) 2191/     AE7 : 06 00               		ld	b,0
(1) 2192/     AE9 : 4F                  		ld	c,a
(1) 2193/     AEA : 09                  		add	hl,bc
(1) 2194/     AEB : FD 7E 08            		ld	a,(iy+08h)
(1) 2195/     AEE : CB 2F               		sra	a		; volume / 2
(1) 2196/     AF0 : E6 7F               		and	01111111b
(1) 2197/     AF2 : 4F                  		ld	c,a
(1) 2198/     AF3 : CF                  		rst	8
(1) 2199/     AF4 : 46                  		ld	b,(hl)
(1) 2200/     AF5 : E1                  		pop	hl
(1) 2201/     AF6 : CB 08               		rrc	b		; OP1
(1) 2202/     AF8 : DC 23 0B            		call	c,.write_tl
(1) 2203/     AFB : 23                  		inc	hl
(1) 2204/     AFC : 14                  		inc	d
(1) 2205/     AFD : 14                  		inc	d
(1) 2206/     AFE : CF                  		rst	8
(1) 2207/     AFF : 14                  		inc	d
(1) 2208/     B00 : 14                  		inc	d
(1) 2209/     B01 : CB 08               		rrc	b		; OP2
(1) 2210/     B03 : DC 23 0B            		call	c,.write_tl
(1) 2211/     B06 : 23                  		inc	hl
(1) 2212/     B07 : 14                  		inc	d
(1) 2213/     B08 : 14                  		inc	d
(1) 2214/     B09 : 14                  		inc	d
(1) 2215/     B0A : 14                  		inc	d
(1) 2216/     B0B : CB 08               		rrc	b		; OP3
(1) 2217/     B0D : DC 23 0B            		call	c,.write_tl
(1) 2218/     B10 : 23                  		inc	hl
(1) 2219/     B11 : CF                  		rst	8
(1) 2220/     B12 : 14                  		inc	d
(1) 2221/     B13 : 14                  		inc	d
(1) 2222/     B14 : 14                  		inc	d
(1) 2223/     B15 : 14                  		inc	d
(1) 2224/     B16 : CB 08               		rrc	b		; OP4
(1) 2225/     B18 : DC 23 0B            		call	c,.write_tl
(1) 2226/     B1B : 23                  		inc	hl
(1) 2227/     B1C : 14                  		inc	d
(1) 2228/     B1D : 14                  		inc	d
(1) 2229/     B1E : 14                  		inc	d
(1) 2230/     B1F : 14                  		inc	d
(1) 2231/     B20 : CF                  		rst	8
(1) 2232/     B21 : C1                  		pop	bc
(1) 2233/     B22 : C9                  		ret
(1) 2234/     B23 :                     .write_tl:
(1) 2235/     B23 : 7E                  		ld	a,(hl)
(1) 2236/     B24 : 91                  		sub	a,c
(1) 2237/     B25 : C5                  		push	bc
(1) 2238/     B26 : 5F                  		ld	e,a
(1) 2239/     B27 : FD 4E 05            		ld	c,(iy+05h)
(1) 2240/     B2A : CD ED 12            		call	fm_autoreg
(1) 2241/     B2D : CF                  		rst	8
(1) 2242/     B2E : C1                  		pop	bc
(1) 2243/     B2F : C9                  		ret
(1) 2244/     B30 :                     ; Jump carry list
(1) 2245/     B30 :                     .fm_cindx:
(1) 2246/     B30 : 08                  		db 1000b
(1) 2247/     B31 : 08                  		db 1000b
(1) 2248/     B32 : 08                  		db 1000b
(1) 2249/     B33 : 08                  		db 1000b
(1) 2250/     B34 : 0C                  		db 1100b
(1) 2251/     B35 : 0E                  		db 1110b
(1) 2252/     B36 : 0E                  		db 1110b
(1) 2253/     B37 : 0F                  		db 1111b
(1) 2254/     B38 :                     ; c - KeyId
(1) 2255/     B38 :                     .fm_wrtalpan:
(1) 2256/     B38 : FD 7E 0C            		ld	a,(iy+0Ch)		; 0B0h algorithm
(1) 2257/     B3B : 5F                  		ld	e,a
(1) 2258/     B3C : 79                  		ld	a,c
(1) 2259/     B3D : E6 03               		and	011b
(1) 2260/     B3F : F6 B0               		or	0B0h
(1) 2261/     B41 : 57                  		ld	d,a
(1) 2262/     B42 : CD ED 12            		call	fm_autoreg
(1) 2263/     B45 : CF                  		rst	8
(1) 2264/     B46 : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Read panning bits
(1) 2265/     B49 : 2F                  		cpl				; REVERSE bits
(1) 2266/     B4A : E6 30               		and	00110000b
(1) 2267/     B4C : 07                  		rlca
(1) 2268/     B4D : 07                  		rlca
(1) 2269/     B4E : 5F                  		ld	e,a
(1) 2270/     B4F : FD 7E 0D            		ld	a,(iy+0Dh)		; 0B4h %LRaa0ppp
(1) 2271/     B52 : E6 3F               		and	00111111b
(1) 2272/     B54 : B3                  		or	e
(1) 2273/     B55 : 5F                  		ld	e,a
(1) 2274/     B56 : 79                  		ld	a,c
(1) 2275/     B57 : E6 03               		and	011b
(1) 2276/     B59 : F6 B4               		or	0B4h
(1) 2277/     B5B : 57                  		ld	d,a
(1) 2278/     B5C : CD ED 12            		call	fm_autoreg
(1) 2279/     B5F : CF                  		rst	8
(1) 2280/     B60 : FD 7E 0E            		ld	a,(iy+0Eh)
(1) 2281/     B63 : CB 5F               		bit	3,a
(1) 2282/     B65 : 28 06               		jr	z,.no_lfo
(1) 2283/     B67 : 5F                  		ld	e,a
(1) 2284/     B68 : 16 22               		ld	d,22h
(1) 2285/     B6A : CD F1 12            		call	fm_send_1
(1) 2286/     B6D :                     .no_lfo:
(1) 2287/     B6D : C9                  		ret
(1) 2288/     B6E :                     
(1) 2289/     B6E :                     ; --------------------------------
(1) 2290/     B6E :                     
(1) 2291/     B6E :                     .mk_dac:
(1) 2292/     B6E : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 2293/     B71 : FE FE               		cp	-2
(1) 2294/     B73 : CA 9E 0B            		jp	z,.dac_cut
(1) 2295/     B76 : FE FF               		cp	-1
(1) 2296/     B78 : CA A4 0B            		jp	z,.dac_off
(1) 2297/     B7B : CD A7 0B            		call	.dac_pitch
(1) 2298/     B7E :                     
(1) 2299/     B7E : CB 40               		bit	0,b
(1) 2300/     B80 : 20 13               		jr	nz,.dac_note
(1) 2301/     B82 : CB 58               		bit	3,b
(1) 2302/     B84 : C8                  		ret	z
(1) 2303/     B85 :                     .dac_pan:
(1) 2304/     B85 : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Read panning
(1) 2305/     B88 : 2F                  		cpl				; REVERSE bits
(1) 2306/     B89 : E6 30               		and	00110000b
(1) 2307/     B8B : 07                  		rlca
(1) 2308/     B8C : 07                  		rlca
(1) 2309/     B8D : 5F                  		ld	e,a
(1) 2310/     B8E : 16 B6               		ld	d,0B6h			; Channel 6 panning
(1) 2311/     B90 : CD FC 12            		call	fm_send_2
(1) 2312/     B93 : CF                  		rst	8
(1) 2313/     B94 : C9                  		ret
(1) 2314/     B95 :                     .dac_note:
(1) 2315/     B95 : CD 1C 13            		call	dac_off
(1) 2316/     B98 : CD 85 0B            		call	.dac_pan
(1) 2317/     B9B : C3 31 13            		jp	dac_play
(1) 2318/     B9E :                     .dac_cut:
(1) 2319/     B9E : CD 1C 13            		call	dac_off
(1) 2320/     BA1 : C3 1E 10            		jp	.chnl_ulnkoff
(1) 2321/     BA4 :                     .dac_off:
(1) 2322/     BA4 : C3 36 10            		jp	.chnl_ulnkcut
(1) 2323/     BA7 :                     .dac_pitch:
(1) 2324/     BA7 : 16 00               		ld	d,0		; Freq index
(1) 2325/     BA9 : FD 5E 06            		ld	e,(iy+06h)
(1) 2326/     BAC : 21 BE 14            		ld	hl,wavFreq_List-(36*2)
(1) 2327/     BAF : 19                  		add	hl,de
(1) 2328/     BB0 : 7E                  		ld	a,(hl)
(1) 2329/     BB1 : 23                  		inc	hl
(1) 2330/     BB2 : 66                  		ld	h,(hl)
(1) 2331/     BB3 : CF                  		rst	8
(1) 2332/     BB4 : 6F                  		ld	l,a
(1) 2333/     BB5 : FD 5E 07            		ld	e,(iy+07h)	; pitchbend
(1) 2334/     BB8 : AF                  		xor	a		; Clear high
(1) 2335/     BB9 : 3F                  		ccf			; Clear carry
(1) 2336/     BBA : CB 23               		sla	e		; << 3
(1) 2337/     BBC : CB 23               		sla	e
(1) 2338/     BBE : CB 23               		sla	e
(1) 2339/     BC0 : 9F                  		sbc	a,a		; -1 if carry is set
(1) 2340/     BC1 : 57                  		ld	d,a
(1) 2341/     BC2 : 19                  		add	hl,de
(1) 2342/     BC3 : 22 92 1F            		ld	(wave_Pitch),hl
(1) 2343/     BC6 : D9                  		exx			; *
(1) 2344/     BC7 : ED 5B 92 1F         		ld	de,(wave_Pitch)	; *
(1) 2345/     BCB : D9                  		exx			; *
(1) 2346/     BCC : C9                  		ret
(1) 2347/     BCD :                     
(1) 2348/     BCD :                     ; --------------------------------
(1) 2349/     BCD :                     ; PCM
(1) 2350/     BCD :                     .mk_pcm:
(1) 2351/     BCD : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 2352/     BD0 : 16 00               		ld	d,0
(1) 2353/     BD2 : FD 5E 05            		ld	e,(iy+05h)
(1) 2354/     BD5 : DD 4E 00            		ld	c,(ix+chnl_Flags)	; c - Panning bits TODO
(1) 2355/     BD8 : DD E5               		push	ix
(1) 2356/     BDA : DD 21 E0 18         		ld	ix,pcmcom
(1) 2357/     BDE : DD 19               		add	ix,de
(1) 2358/     BE0 : FE FE               		cp	-2
(1) 2359/     BE2 : CA FE 0B            		jp	z,.pcm_cut
(1) 2360/     BE5 : FE FF               		cp	-1
(1) 2361/     BE7 : CA F7 0B            		jp	z,.pcm_off
(1) 2362/     BEA : CF                  		rst	8
(1) 2363/     BEB : 78                  		ld	a,b
(1) 2364/     BEC : CB 40               		bit	0,b			; Note?
(1) 2365/     BEE : 20 24               		jr	nz,.pcm_note
(1) 2366/     BF0 : CB 58               		bit	3,b			; Effect?
(1) 2367/     BF2 : 20 19               		jr	nz,.pcm_effc
(1) 2368/     BF4 : DD E1               		pop	ix
(1) 2369/     BF6 : C9                  		ret
(1) 2370/     BF7 :                     
(1) 2371/     BF7 :                     ; --------------------------------
(1) 2372/     BF7 :                     ; -1
(1) 2373/     BF7 :                     .pcm_off:
(1) 2374/     BF7 : CF                  		rst	8
(1) 2375/     BF8 : DD 36 00 02         		ld	(ix),010b
(1) 2376/     BFC : 18 05               		jr	.pcm_setcoff
(1) 2377/     BFE :                     ; -2
(1) 2378/     BFE :                     .pcm_cut:
(1) 2379/     BFE : CF                  		rst	8
(1) 2380/     BFF : DD 36 00 04         		ld	(ix),100b
(1) 2381/     C03 :                     .pcm_setcoff:
(1) 2382/     C03 : 3E 01               		ld	a,1
(1) 2383/     C05 : 32 88 1F            		ld	(mcdUpd),a
(1) 2384/     C08 : DD E1               		pop	ix
(1) 2385/     C0A : C3 1E 10            		jp	.chnl_ulnkoff
(1) 2386/     C0D :                     
(1) 2387/     C0D :                     ; --------------------------------
(1) 2388/     C0D :                     
(1) 2389/     C0D :                     .pcm_effc:
(1) 2390/     C0D : CD D2 0C            		call	.setpcm_freq
(1) 2391/     C10 : 0E 09               		ld	c,00001001b
(1) 2392/     C12 : 18 05               		jr	.pcm_send
(1) 2393/     C14 :                     .pcm_note:
(1) 2394/     C14 : CD D2 0C            		call	.setpcm_freq
(1) 2395/     C17 : 0E 01               		ld	c,00000001b	; KeyON request
(1) 2396/     C19 :                     .pcm_send:
(1) 2397/     C19 : DD 71 00            		ld	(ix),c		; Write key-on bit
(1) 2398/     C1C : 01 08 00            		ld	bc,8		; Go to Pitch
(1) 2399/     C1F : DD 09               		add	ix,bc
(1) 2400/     C21 : DD 74 00            		ld	(ix),h
(1) 2401/     C24 : DD 09               		add	ix,bc
(1) 2402/     C26 : DD 75 00            		ld	(ix),l
(1) 2403/     C29 : DD 09               		add	ix,bc
(1) 2404/     C2B : 1E FF               		ld	e,-1
(1) 2405/     C2D : FD 7E 08            		ld	a,(iy+08h)
(1) 2406/     C30 : 87                  		add	a,a
(1) 2407/     C31 : 87                  		add	a,a
(1) 2408/     C32 : 38 01               		jr	c,.v_overfl
(1) 2409/     C34 : 83                  		add	a,e
(1) 2410/     C35 :                     .v_overfl:
(1) 2411/     C35 : DD 77 00            		ld	(ix),a
(1) 2412/     C38 : DD 09               		add	ix,bc
(1) 2413/     C3A : FD 7E 0A            		ld	a,(iy+0Ah)
(1) 2414/     C3D : 2F                  		cpl
(1) 2415/     C3E : DD 77 00            		ld	(ix),a
(1) 2417/     C41 : 3E 01               		ld	a,1
(1) 2418/     C43 : 32 88 1F            		ld	(mcdUpd),a
(1) 2420/     C46 : DD E1               		pop	ix
(1) 2421/     C48 : C9                  		ret
(1) 2422/     C49 :                     
(1) 2423/     C49 :                     ; --------------------------------
(1) 2424/     C49 :                     ; PWM
(1) 2425/     C49 :                     
(1) 2426/     C49 :                     .mk_pwm:
(1) 2427/     C49 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 2428/     C4C : 16 00               		ld	d,0
(1) 2429/     C4E : FD 5E 05            		ld	e,(iy+05h)
(1) 2430/     C51 : DD 4E 00            		ld	c,(ix+chnl_Flags)	; c - Panning bits
(1) 2431/     C54 : DD E5               		push	ix
(1) 2432/     C56 : DD 21 20 19         		ld	ix,pwmcom
(1) 2433/     C5A : DD 19               		add	ix,de
(1) 2434/     C5C : FE FE               		cp	-2
(1) 2435/     C5E : CA 7A 0C            		jp	z,.pwm_cut
(1) 2436/     C61 : FE FF               		cp	-1
(1) 2437/     C63 : CA 73 0C            		jp	z,.pwm_off
(1) 2438/     C66 : CF                  		rst	8
(1) 2439/     C67 : 78                  		ld	a,b
(1) 2440/     C68 : CB 40               		bit	0,b			; Note?
(1) 2441/     C6A : 20 24               		jr	nz,.pw_note
(1) 2442/     C6C : CB 58               		bit	3,b			; Effect?
(1) 2443/     C6E : 20 19               		jr	nz,.pw_effc
(1) 2444/     C70 : DD E1               		pop	ix
(1) 2445/     C72 : C9                  		ret
(1) 2446/     C73 :                     
(1) 2447/     C73 :                     ; --------------------------------
(1) 2448/     C73 :                     ; -1
(1) 2449/     C73 :                     .pwm_off:
(1) 2450/     C73 : CF                  		rst	8
(1) 2451/     C74 : DD 36 00 02         		ld	(ix),010b
(1) 2452/     C78 : 18 05               		jr	.pwm_setcoff
(1) 2453/     C7A :                     ; -2
(1) 2454/     C7A :                     .pwm_cut:
(1) 2455/     C7A : CF                  		rst	8
(1) 2456/     C7B : DD 36 00 04         		ld	(ix),100b
(1) 2457/     C7F :                     .pwm_setcoff:
(1) 2458/     C7F : 3E 01               		ld	a,1
(1) 2459/     C81 : 32 87 1F            		ld	(marsUpd),a
(1) 2460/     C84 : DD E1               		pop	ix
(1) 2461/     C86 : C3 1E 10            		jp	.chnl_ulnkoff
(1) 2462/     C89 :                     
(1) 2463/     C89 :                     ; --------------------------------
(1) 2464/     C89 :                     
(1) 2465/     C89 :                     .pw_effc:
(1) 2466/     C89 : CD B9 0C            		call	.pw_setup
(1) 2467/     C8C : 0E 09               		ld	c,00001001b
(1) 2468/     C8E : 18 05               		jr	.pw_send
(1) 2469/     C90 :                     .pw_note:
(1) 2470/     C90 : CD B9 0C            		call	.pw_setup
(1) 2471/     C93 : 0E 01               		ld	c,00000001b	; KeyON request
(1) 2472/     C95 :                     .pw_send:
(1) 2473/     C95 : DD 71 00            		ld	(ix),c		; Set command
(1) 2474/     C98 : 01 08 00            		ld	bc,8
(1) 2475/     C9B : DD 09               		add	ix,bc
(1) 2476/     C9D : DD 77 00            		ld	(ix),a
(1) 2477/     CA0 : DD 09               		add	ix,bc
(1) 2478/     CA2 : DD 75 00            		ld	(ix),l
(1) 2479/     CA5 : DD 09               		add	ix,bc
(1) 2480/     CA7 : CF                  		rst	8
(1) 2481/     CA8 : DD 7E 00            		ld	a,(ix)
(1) 2482/     CAB : E6 CF               		and	11001111b
(1) 2483/     CAD : B3                  		or	e
(1) 2484/     CAE : DD 77 00            		ld	(ix),a
(1) 2486/     CB1 : 3E 01               		ld	a,1
(1) 2487/     CB3 : 32 87 1F            		ld	(marsUpd),a
(1) 2489/     CB6 : DD E1               		pop	ix
(1) 2490/     CB8 : C9                  		ret
(1) 2491/     CB9 :                     .pw_setup:
(1) 2492/     CB9 : CD D7 0C            		call	.setpwm_freq
(1) 2493/     CBC : 79                  		ld	a,c
(1) 2494/     CBD :                     ; 		rrca
(1) 2495/     CBD :                     ; 		rrca
(1) 2496/     CBD : 2F                  		cpl
(1) 2497/     CBE : E6 30               		and	00110000b
(1) 2498/     CC0 : CF                  		rst	8
(1) 2499/     CC1 : 5F                  		ld	e,a
(1) 2500/     CC2 : AF                  		xor	a
(1) 2501/     CC3 : FD 7E 08            		ld	a,(iy+08h)	; Read volume
(1) 2502/     CC6 : ED 44               		neg	a
(1) 2503/     CC8 : 87                  		add	a,a
(1) 2504/     CC9 : 87                  		add	a,a
(1) 2505/     CCA :                     ; 		sla	a
(1) 2506/     CCA :                     ; 		sla	a
(1) 2507/     CCA :                     ; 		sla	a
(1) 2508/     CCA : 30 02               		jr	nc,.pwv_much
(1) 2509/     CCC : 3E FF               		ld	a,-1
(1) 2510/     CCE :                     .pwv_much:
(1) 2511/     CCE : E6 FC               		and	11111100b
(1) 2512/     CD0 : B4                  		or	h		; Merge MSB freq
(1) 2513/     CD1 : C9                  		ret
(1) 2514/     CD2 :                     
(1) 2515/     CD2 :                     ; --------------------------------
(1) 2516/     CD2 :                     ; SHARED routine
(1) 2517/     CD2 :                     
(1) 2518/     CD2 :                     .setpcm_freq:
(1) 2519/     CD2 : 21 66 15            		ld	hl,wavFreq_CdPcm-(36*2)
(1) 2520/     CD5 : 18 03               		jr	.set_wavfreq
(1) 2521/     CD7 :                     .setpwm_freq:
(1) 2522/     CD7 : 21 BE 14            		ld	hl,wavFreq_List-(36*2)
(1) 2523/     CDA :                     
(1) 2524/     CDA :                     .set_wavfreq:
(1) 2525/     CDA : 16 00               		ld	d,0		; Freq index
(1) 2526/     CDC : FD 5E 06            		ld	e,(iy+06h)
(1) 2527/     CDF : 19                  		add	hl,de
(1) 2528/     CE0 : 7E                  		ld	a,(hl)
(1) 2529/     CE1 : 23                  		inc	hl
(1) 2530/     CE2 : 66                  		ld	h,(hl)
(1) 2531/     CE3 : 6F                  		ld	l,a
(1) 2532/     CE4 : FD 5E 07            		ld	e,(iy+07h)	; pitchbend
(1) 2533/     CE7 : CF                  		rst	8
(1) 2534/     CE8 : AF                  		xor	a		; Clear high
(1) 2535/     CE9 : 3F                  		ccf			; Clear carry
(1) 2536/     CEA : CB 23               		sla	e		; << 2
(1) 2537/     CEC : CB 23               		sla	e
(1) 2538/     CEE : 9F                  		sbc	a,a		; -1 if carry is set
(1) 2539/     CEF : 57                  		ld	d,a
(1) 2540/     CF0 : 19                  		add	hl,de
(1) 2541/     CF1 : C9                  		ret
(1) 2542/     CF2 :                     
(1) 2543/     CF2 :                     ; ----------------------------------------
(1) 2544/     CF2 :                     ; NEW effect
(1) 2545/     CF2 :                     ; ----------------------------------------
(1) 2546/     CF2 :                     
(1) 2547/     CF2 :                     .effc:
(1) 2548/     CF2 : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - effect data
(1) 2549/     CF5 : DD 7E 05            		ld	a,(ix+chnl_EffId)	; d - effect id
(1) 2550/     CF8 : 57                  		ld	d,a
(1) 2551/     CF9 : CF                  		rst	8
(1) 2552/     CFA : FE 04               		cp	4			; Effect D?
(1) 2553/     CFC : 28 0F               		jr	z,.effc_D
(1) 2554/     CFE : FE 05               		cp	5			; Effect E?
(1) 2555/     D00 : 28 4E               		jr	z,.effc_E
(1) 2556/     D02 : FE 06               		cp	6			; Effect F?
(1) 2557/     D04 : 28 5F               		jr	z,.effc_F
(1) 2558/     D06 : CF                  		rst	8
(1) 2559/     D07 : FE 18               		cp	24			; Effect X?
(1) 2560/     D09 : CA 86 0D            		jp	z,.effc_X
(1) 2561/     D0C : C9                  		ret
(1) 2562/     D0D :                     
(1) 2563/     D0D :                     ; ----------------------------------------
(1) 2564/     D0D :                     ; Effect D
(1) 2565/     D0D :                     ;
(1) 2566/     D0D :                     ; Volume slide down
(1) 2567/     D0D :                     ;
(1) 2568/     D0D :                     ; 0xh-Exh - Normal
(1) 2569/     D0D :                     ; Fxh-Fxh - Fine slide / 2
(1) 2570/     D0D :                     ; ----------------------------------------
(1) 2571/     D0D :                     
(1) 2572/     D0D :                     .effc_D:
(1) 2573/     D0D : CD 7A 0D            		call	.save_arg
(1) 2574/     D10 : 79                  		ld	a,c		; Setting == 0?
(1) 2575/     D11 : B7                  		or	a
(1) 2576/     D12 : C8                  		ret	z
(1) 2577/     D13 : E6 F0               		and	0F0h
(1) 2578/     D15 : 28 0F               		jr	z,.norm_down	; 0xh
(1) 2579/     D17 : FE F0               		cp	0F0h
(1) 2580/     D19 : 28 0D               		jr	z,.fine_down	; Fxh
(1) 2581/     D1B : CF                  		rst	8
(1) 2582/     D1C : 79                  		ld	a,c
(1) 2583/     D1D : E6 0F               		and	00Fh
(1) 2584/     D1F : 28 1D               		jr	z,.norm_up	; x0h
(1) 2585/     D21 : FE 0F               		cp	00Fh
(1) 2586/     D23 : 28 17               		jr	z,.fine_up	; xFh
(1) 2587/     D25 : C9                  		ret
(1) 2588/     D26 :                     ; Go down
(1) 2589/     D26 :                     .norm_down:
(1) 2590/     D26 : CB 21               		sla	c
(1) 2591/     D28 :                     .fine_down:
(1) 2592/     D28 : CB 21               		sla	c
(1) 2593/     D2A : 79                  		ld	a,c
(1) 2594/     D2B : E6 3C               		and	00111100b
(1) 2595/     D2D : 4F                  		ld	c,a
(1) 2596/     D2E : FD 7E 08            		ld	a,(iy+08h)	; Current volume
(1) 2597/     D31 : CF                  		rst	8
(1) 2598/     D32 : 91                  		sub	a,c
(1) 2599/     D33 : 1E C0               		ld	e,0C0h
(1) 2600/     D35 : BB                  		cp	e
(1) 2601/     D36 : D2 4C 0D            		jp	nc,.vol_dvld
(1) 2602/     D39 : 7B                  		ld	a,e
(1) 2603/     D3A : 18 10               		jr 	.vol_dvld
(1) 2604/     D3C :                     ; Go up
(1) 2605/     D3C :                     .fine_up:
(1) 2606/     D3C : CB 39               		srl	c
(1) 2607/     D3E :                     .norm_up:
(1) 2608/     D3E : CB 39               		srl	c
(1) 2609/     D40 : 79                  		ld	a,c
(1) 2610/     D41 : E6 3C               		and	00111100b
(1) 2611/     D43 : 4F                  		ld	c,a
(1) 2612/     D44 : FD 7E 08            		ld	a,(iy+08h)	; Current volume
(1) 2613/     D47 : CF                  		rst	8
(1) 2614/     D48 : 81                  		add	a,c
(1) 2615/     D49 : 38 01               		jr	c,.vol_dvld
(1) 2616/     D4B : AF                  		xor	a
(1) 2617/     D4C :                     .vol_dvld:
(1) 2618/     D4C : FD 77 08            		ld	(iy+08h),a
(1) 2619/     D4F : C9                  		ret
(1) 2620/     D50 :                     
(1) 2621/     D50 :                     ; ----------------------------------------
(1) 2622/     D50 :                     ; Effect E
(1) 2623/     D50 :                     ; ----------------------------------------
(1) 2624/     D50 :                     
(1) 2625/     D50 :                     .effc_E:
(1) 2626/     D50 : CD 7A 0D            		call	.save_arg
(1) 2627/     D53 : 79                  		ld	a,c
(1) 2628/     D54 : E6 F0               		and	0F0h
(1) 2629/     D56 : FE F0               		cp	0F0h
(1) 2630/     D58 : C8                  		ret	z
(1) 2631/     D59 : FE E0               		cp	0E0h
(1) 2632/     D5B : C8                  		ret	z
(1) 2633/     D5C : CF                  		rst	8
(1) 2634/     D5D : FD 7E 07            		ld	a,(iy+07h)
(1) 2635/     D60 : 91                  		sub	a,c
(1) 2636/     D61 : FD 77 07            		ld	(iy+07h),a
(1) 2637/     D64 : C9                  		ret
(1) 2638/     D65 :                     
(1) 2639/     D65 :                     ; ----------------------------------------
(1) 2640/     D65 :                     ; Effect F
(1) 2641/     D65 :                     ; ----------------------------------------
(1) 2642/     D65 :                     
(1) 2643/     D65 :                     .effc_F:
(1) 2644/     D65 : CD 7A 0D            		call	.save_arg
(1) 2645/     D68 : 79                  		ld	a,c
(1) 2646/     D69 : E6 F0               		and	0F0h
(1) 2647/     D6B : FE F0               		cp	0F0h
(1) 2648/     D6D : C8                  		ret	z
(1) 2649/     D6E : FE E0               		cp	0E0h
(1) 2650/     D70 : C8                  		ret	z
(1) 2651/     D71 : CF                  		rst	8
(1) 2652/     D72 : FD 7E 07            		ld	a,(iy+07h)
(1) 2653/     D75 : 81                  		add	a,c
(1) 2654/     D76 : FD 77 07            		ld	(iy+07h),a
(1) 2655/     D79 : C9                  		ret
(1) 2656/     D7A :                     
(1) 2657/     D7A :                     ; --------------------------------
(1) 2658/     D7A :                     ; e - got arg
(1) 2659/     D7A :                     ; c - new arg
(1) 2660/     D7A :                     .save_arg:
(1) 2661/     D7A : FD 4E 09            		ld	c,(iy+09h)	; Current slide setting
(1) 2662/     D7D : 7B                  		ld	a,e		; EffArg is non-zero?
(1) 2663/     D7E : B7                  		or	a
(1) 2664/     D7F : 28 04               		jr	z,.D_cont	; 00h = slide continue
(1) 2665/     D81 : 4F                  		ld	c,a
(1) 2666/     D82 : FD 71 09            		ld	(iy+09h),c	; Store NEW slide setting
(1) 2667/     D85 :                     .D_cont:
(1) 2668/     D85 : C9                  		ret
(1) 2669/     D86 :                     
(1) 2670/     D86 :                     ; ----------------------------------------
(1) 2671/     D86 :                     ; Effect X
(1) 2672/     D86 :                     ;
(1) 2673/     D86 :                     ; Panning format:
(1) 2674/     D86 :                     ;  00h LEFT
(1) 2675/     D86 :                     ;  80h MIDDLE
(1) 2676/     D86 :                     ; 0FFh RIGHT
(1) 2677/     D86 :                     ; ----------------------------------------
(1) 2678/     D86 :                     
(1) 2679/     D86 :                     .effc_X:
(1) 2680/     D86 : 16 00               		ld	d,0
(1) 2681/     D88 : 7E                  		ld	a,(hl)
(1) 2682/     D89 : E6 F0               		and	11110000b
(1) 2683/     D8B : FE D0               		cp	0D0h
(1) 2684/     D8D : 28 26               		jr	z,.pan_mcd
(1) 2685/     D8F : FE 80               		cp	80h		; PSG?
(1) 2686/     D91 : 28 18               		jr	z,.res_pan
(1) 2687/     D93 : FE 90               		cp	90h		; PSGN?
(1) 2688/     D95 : 28 14               		jr	z,.res_pan
(1) 2689/     D97 :                     
(1) 2690/     D97 :                     	; ----------------------------------------
(1) 2691/     D97 :                     	; FM panning
(1) 2692/     D97 :                     	; %LR000000 (REVERSE: 0-on 1-off)
(1) 2693/     D97 : FD 36 09 00         		ld	(iy+09h),0
(1) 2694/     D9B : CF                  		rst	8
(1) 2695/     D9C : E5                  		push	hl
(1) 2696/     D9D : 21 CC 0D            		ld	hl,.fm_panlist
(1) 2697/     DA0 : 7B                  		ld	a,e
(1) 2698/     DA1 : 07                  		rlca
(1) 2699/     DA2 : 07                  		rlca
(1) 2700/     DA3 : 07                  		rlca
(1) 2701/     DA4 : E6 07               		and	0111b
(1) 2702/     DA6 :                     ; 		ld	d,0
(1) 2703/     DA6 : 5F                  		ld	e,a
(1) 2704/     DA7 : CF                  		rst	8
(1) 2705/     DA8 : 19                  		add	hl,de
(1) 2706/     DA9 : 56                  		ld	d,(hl)
(1) 2707/     DAA : E1                  		pop	hl
(1) 2708/     DAB :                     .res_pan:
(1) 2709/     DAB : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Save panning
(1) 2710/     DAE : E6 CF               		and	11001111b
(1) 2711/     DB0 : B2                  		or	d
(1) 2712/     DB1 : DD 77 00            		ld	(ix+chnl_Flags),a
(1) 2713/     DB4 : C9                  		ret
(1) 2714/     DB5 :                     
(1) 2715/     DB5 :                     	; ----------------------------------------
(1) 2716/     DB5 :                     	; MCD panning
(1) 2717/     DB5 :                     .pan_mcd:
(1) 2718/     DB5 : E5                  		push	hl
(1) 2719/     DB6 : 16 00               		ld	d,0
(1) 2720/     DB8 : 21 D4 0D            		ld	hl,.pcm_panlist
(1) 2721/     DBB : 7B                  		ld	a,e
(1) 2722/     DBC : E6 F8               		and	0F8h
(1) 2723/     DBE : 0F                  		rrca
(1) 2724/     DBF : 0F                  		rrca
(1) 2725/     DC0 : 0F                  		rrca
(1) 2726/     DC1 : 5F                  		ld	e,a
(1) 2727/     DC2 : 19                  		add	hl,de
(1) 2728/     DC3 : 7E                  		ld	a,(hl)
(1) 2729/     DC4 : FD 5E 05            		ld	e,(iy+05h)
(1) 2730/     DC7 : FD 77 0A            		ld	(iy+0Ah),a
(1) 2731/     DCA : E1                  		pop	hl
(1) 2732/     DCB : C9                  		ret
(1) 2733/     DCC :                     
(1) 2734/     DCC :                     ; 0 - ENABLE, 1 - DISABLE
(1) 2735/     DCC :                     ; 00LR0000b
(1) 2736/     DCC :                     .fm_panlist:
(1) 2737/     DCC : 10                  		db 00010000b
(1) 2738/     DCD : 10                  		db 00010000b
(1) 2739/     DCE : 10                  		db 00010000b
(1) 2740/     DCF : 00                  		db 00000000b
(1) 2741/     DD0 : 00                  		db 00000000b
(1) 2742/     DD1 : 20                  		db 00100000b
(1) 2743/     DD2 : 20                  		db 00100000b
(1) 2744/     DD3 : 20                  		db 00100000b
(1) 2745/     DD4 :                     
(1) 2746/     DD4 :                     ; REVERSED BITS
(1) 2747/     DD4 :                     ; RRRR | LLLL
(1) 2748/     DD4 :                     .pcm_panlist:
(1) 2749/     DD4 : F0                  		db 0F0h	; 00h
(1) 2750/     DD5 : E0                  		db 0E0h
(1) 2751/     DD6 : D0                  		db 0D0h	; 10h
(1) 2752/     DD7 : C0                  		db 0C0h
(1) 2753/     DD8 : B0                  		db 0B0h	; 20h
(1) 2754/     DD9 : A0                  		db 0A0h
(1) 2755/     DDA : 90                  		db 090h	; 30h
(1) 2756/     DDB : 80                  		db 080h
(1) 2757/     DDC : 70                  		db 070h	; 40h
(1) 2758/     DDD : 60                  		db 060h
(1) 2759/     DDE : 50                  		db 050h	; 50h
(1) 2760/     DDF : 40                  		db 040h
(1) 2761/     DE0 : 30                  		db 030h	; 60h
(1) 2762/     DE1 : 20                  		db 020h
(1) 2763/     DE2 : 10                  		db 010h	; 70h
(1) 2764/     DE3 : 00                  		db 000h
(1) 2765/     DE4 : 00                  		db 000h ; 80h
(1) 2766/     DE5 : 01                  		db 001h
(1) 2767/     DE6 : 02                  		db 002h ; 90h
(1) 2768/     DE7 : 03                  		db 003h
(1) 2769/     DE8 : 04                  		db 004h ; A0h
(1) 2770/     DE9 : 05                  		db 005h
(1) 2771/     DEA : 06                  		db 006h ; B0h
(1) 2772/     DEB : 07                  		db 007h
(1) 2773/     DEC : 08                  		db 008h ; C0h
(1) 2774/     DED : 09                  		db 009h
(1) 2775/     DEE : 0A                  		db 00Ah ; D0h
(1) 2776/     DEF : 0B                  		db 00Bh
(1) 2777/     DF0 : 0C                  		db 00Ch ; E0h
(1) 2778/     DF1 : 0D                  		db 00Dh
(1) 2779/     DF2 : 0E                  		db 00Eh ; F0h
(1) 2780/     DF3 : 0F                  		db 00Fh
(1) 2781/     DF4 :                     
(1) 2782/     DF4 :                     ; ----------------------------------------
(1) 2783/     DF4 :                     ; NEW volume
(1) 2784/     DF4 :                     ; ----------------------------------------
(1) 2785/     DF4 :                     
(1) 2786/     DF4 :                     .volu:
(1) 2787/     DF4 : DD 7E 04            		ld	a,(ix+chnl_Vol)
(1) 2788/     DF7 : D6 40               		sub	a,64
(1) 2789/     DF9 : FD 77 08            		ld	(iy+08h),a	; BASE volume
(1) 2790/     DFC : C9                  		ret
(1) 2791/     DFD :                     
(1) 2792/     DFD :                     ; ----------------------------------------
(1) 2793/     DFD :                     ; NEW instrument
(1) 2794/     DFD :                     ; ----------------------------------------
(1) 2795/     DFD :                     
(1) 2796/     DFD :                     .inst:
(1) 2797/     DFD : 7E                  		ld	a,(hl)
(1) 2798/     DFE : E6 F0               		and	11110000b
(1) 2799/     E00 : FE 80               		cp	080h
(1) 2800/     E02 : 28 24               		jr	z,.ins_psg
(1) 2801/     E04 : FE 90               		cp	090h
(1) 2802/     E06 : 28 1A               		jr	z,.ins_psgn
(1) 2803/     E08 : FE A0               		cp	0A0h
(1) 2804/     E0A : 28 52               		jr	z,.ins_fm
(1) 2805/     E0C : CF                  		rst	8
(1) 2806/     E0D : FE B0               		cp	0B0h
(1) 2807/     E0F : 28 4D               		jr	z,.ins_fm
(1) 2808/     E11 : FE C0               		cp	0C0h
(1) 2809/     E13 : CA DF 0E            		jp	z,.ins_dac
(1) 2810/     E16 : FE D0               		cp	0D0h
(1) 2811/     E18 : CA 33 0F            		jp	z,.ins_pcm
(1) 2812/     E1B : FE E0               		cp	0E0h
(1) 2813/     E1D : CA 6B 0F            		jp	z,.ins_pwm
(1) 2814/     E20 : CF                  		rst	8
(1) 2815/     E21 :                     .invl_ins:
(1) 2816/     E21 : C9                  		ret
(1) 2817/     E22 :                     
(1) 2818/     E22 :                     ; ----------------------------------------
(1) 2819/     E22 :                     ; PSG
(1) 2820/     E22 :                     
(1) 2821/     E22 :                     .ins_psgn:
(1) 2822/     E22 : 7E                  		ld	a,(hl)		; Grab noise setting
(1) 2823/     E23 : E6 07               		and	0111b
(1) 2824/     E25 : 32 83 1F            		ld	(psgHatMode),a	; ** GLOBAL SETTING
(1) 2825/     E28 :                     .ins_psg:
(1) 2826/     E28 : CF                  		rst	8
(1) 2827/     E29 : DD E5               		push	ix
(1) 2828/     E2B : E5                  		push	hl
(1) 2829/     E2C : 23                  		inc	hl		; Skip ID
(1) 2830/     E2D : DD 21 58 19         		ld	ix,psgcom	; Read psg control
(1) 2831/     E31 : FD 5E 05            		ld	e,(iy+05h)
(1) 2832/     E34 : 16 00               		ld	d,0
(1) 2833/     E36 : DD 19               		add	ix,de
(1) 2834/     E38 : 7E                  		ld	a,(hl)
(1) 2835/     E39 : CF                  		rst	8
(1) 2836/     E3A : 23                  		inc	hl
(1) 2837/     E3B : 7E                  		ld	a,(hl)
(1) 2838/     E3C : DD 77 24            		ld	(ix+ALV),a	; ALV
(1) 2839/     E3F : 23                  		inc	hl
(1) 2840/     E40 : 7E                  		ld	a,(hl)
(1) 2841/     E41 : DD 77 08            		ld	(ix+ATK),a	; ATK
(1) 2842/     E44 : 23                  		inc	hl
(1) 2843/     E45 : 7E                  		ld	a,(hl)
(1) 2844/     E46 : CF                  		rst	8
(1) 2845/     E47 : DD 77 10            		ld	(ix+SLV),a	; SLV
(1) 2846/     E4A : 23                  		inc	hl
(1) 2847/     E4B : 7E                  		ld	a,(hl)
(1) 2848/     E4C : DD 77 0C            		ld	(ix+DKY),a	; DKY
(1) 2849/     E4F : 23                  		inc	hl
(1) 2850/     E50 : 7E                  		ld	a,(hl)
(1) 2851/     E51 : DD 77 14            		ld	(ix+RRT),a	; RRT
(1) 2852/     E54 : 23                  		inc	hl
(1) 2853/     E55 : 7E                  		ld	a,(hl)
(1) 2854/     E56 : CF                  		rst	8
(1) 2855/     E57 : DD 77 34            		ld	(ix+PARP),a	; ARP
(1) 2856/     E5A : E1                  		pop	hl
(1) 2857/     E5B : DD E1               		pop	ix
(1) 2858/     E5D : C9                  		ret
(1) 2859/     E5E :                     
(1) 2860/     E5E :                     ; ----------------------------------------
(1) 2861/     E5E :                     ; FM/FM3
(1) 2862/     E5E :                     
(1) 2863/     E5E :                     .ins_fm:
(1) 2864/     E5E : DD E5               		push	ix
(1) 2865/     E60 : E5                  		push	hl
(1) 2866/     E61 : C5                  		push	bc
(1) 2867/     E62 :                     ; 		ld	b,(ix+chnl_Ins)	; b - current Ins
(1) 2868/     E62 : FD 46 02            		ld	b,(iy+02h)
(1) 2869/     E65 : FD 7E 05            		ld	a,(iy+05h)
(1) 2870/     E68 : E6 07               		and	0111b
(1) 2871/     E6A : 16 00               		ld	d,0
(1) 2872/     E6C : 87                  		add	a,a
(1) 2873/     E6D : 5F                  		ld	e,a
(1) 2874/     E6E : DD 21 F8 14         		ld	ix,fmcach_list
(1) 2875/     E72 : DD 19               		add	ix,de
(1) 2876/     E74 : CF                  		rst	8
(1) 2877/     E75 : DD 5E 00            		ld	e,(ix)
(1) 2878/     E78 : DD 23               		inc	ix
(1) 2879/     E7A : DD 56 00            		ld	d,(ix)
(1) 2880/     E7D :                     
(1) 2881/     E7D :                     ; 		ld	a,(iy+0Bh)	; 0Bh: DON'T reload flag
(1) 2882/     E7D :                     ; 		cp	b
(1) 2883/     E7D :                     ; 		jr	z,.same_patch
(1) 2884/     E7D :                     ; 		ld	(iy+0Bh),b
(1) 2885/     E7D : 23                  		inc	hl		; Skip id and pitch
(1) 2886/     E7E : 23                  		inc	hl
(1) 2887/     E7F :                     
(1) 2888/     E7F : 46                  		ld	b,(hl)
(1) 2889/     E80 : 23                  		inc	hl
(1) 2890/     E81 : 4E                  		ld	c,(hl)
(1) 2891/     E82 : 23                  		inc	hl
(1) 2892/     E83 : 6E                  		ld	l,(hl)
(1) 2893/     E84 : 61                  		ld	h,c
(1) 2894/     E85 :                     
(1) 2895/     E85 : FD 7E 0A            		ld	a,(iy+0Ah)
(1) 2896/     E88 : BC                  		cp	h
(1) 2897/     E89 : 20 07               		jr	nz,.new_romdat
(1) 2898/     E8B : CF                  		rst	8
(1) 2899/     E8C : FD 7E 0B            		ld	a,(iy+0Bh)
(1) 2900/     E8F : BD                  		cp	l
(1) 2901/     E90 : 28 38               		jr	z,.same_patch
(1) 2902/     E92 :                     .new_romdat:
(1) 2903/     E92 : FD 74 0A            		ld	(iy+0Ah),h
(1) 2904/     E95 : FD 75 0B            		ld	(iy+0Bh),l
(1) 2905/     E98 : 78                  		ld	a,b
(1) 2906/     E99 : 01 28 00            		ld	bc,28h		; <- size
(1) 2907/     E9C : D5                  		push	de
(1) 2908/     E9D : CD D2 10            		call	transferRom	; *** ROM ACCESS ***
(1) 2909/     EA0 :                     
(1) 2910/     EA0 : E1                  		pop	hl
(1) 2911/     EA1 : FD 7E 05            		ld	a,(iy+05h)
(1) 2912/     EA4 : 4F                  		ld	c,a		; c - FM Key ID
(1) 2913/     EA5 :                     
(1) 2914/     EA5 :                     	; hl - fmcach intrument
(1) 2915/     EA5 :                     	; de - FM reg and data: 3000h
(1) 2916/     EA5 :                     	;  c - FM keyChannel
(1) 2917/     EA5 : 79                  		ld	a,c
(1) 2918/     EA6 : E6 03               		and	011b
(1) 2919/     EA8 : F6 30               		or	30h		; Start at reg 30h
(1) 2920/     EAA : 57                  		ld	d,a
(1) 2921/     EAB : 1E 00               		ld	e,0
(1) 2922/     EAD : CF                  		rst	8
(1) 2923/     EAE : 06 1C               		ld	b,7*4		; Write ALL base FM registers
(1) 2924/     EB0 : CD CF 0E            		call	.fm_setrlist
(1) 2925/     EB3 :                     ; 		ld	b,4
(1) 2926/     EB3 :                     ; 		call	.fm_setrlist
(1) 2927/     EB3 :                     ; 		ld	b,5*4
(1) 2928/     EB3 :                     ; 		call	.fm_setrlist
(1) 2929/     EB3 : 7E                  		ld	a,(hl)		; 0B0h
(1) 2930/     EB4 : FD 77 0C            		ld	(iy+0Ch),a	; ** Save 0B0h to 0Ch
(1) 2931/     EB7 : 23                  		inc	hl
(1) 2932/     EB8 : 7E                  		ld	a,(hl)		; 0B4h
(1) 2933/     EB9 : FD 77 0D            		ld	(iy+0Dh),a	; ** Save 0B4h to 0Dh
(1) 2934/     EBC : 23                  		inc	hl
(1) 2935/     EBD : CF                  		rst	8
(1) 2936/     EBE : 7E                  		ld	a,(hl)
(1) 2937/     EBF : FD 77 0E            		ld	(iy+0Eh),a	; LFO
(1) 2938/     EC2 : 23                  		inc	hl
(1) 2939/     EC3 : 7E                  		ld	a,(hl)		; 028h keys
(1) 2940/     EC4 : E6 F0               		and	11110000b
(1) 2941/     EC6 : CF                  		rst	8
(1) 2942/     EC7 : FD 77 0F            		ld	(iy+0Fh),a	; ** Save keys to 0Eh
(1) 2943/     ECA :                     .same_patch:
(1) 2944/     ECA : C1                  		pop	bc
(1) 2945/     ECB : E1                  		pop	hl
(1) 2946/     ECC : DD E1               		pop	ix
(1) 2947/     ECE : C9                  		ret
(1) 2948/     ECF :                     ; b - numof_regs
(1) 2949/     ECF :                     .fm_setrlist:
(1) 2950/     ECF : 5E                  		ld	e,(hl)
(1) 2951/     ED0 : 23                  		inc	hl
(1) 2952/     ED1 : CD ED 12            		call	fm_autoreg
(1) 2953/     ED4 : 00                  		nop
(1) 2954/     ED5 : 00                  		nop
(1) 2955/     ED6 : CF                  		rst	8
(1) 2956/     ED7 : 00                  		nop
(1) 2957/     ED8 : 14                  		inc	d		; +4
(1) 2958/     ED9 : 14                  		inc	d
(1) 2959/     EDA : 14                  		inc	d
(1) 2960/     EDB : 14                  		inc	d
(1) 2961/     EDC : 10 F1               		djnz	.fm_setrlist
(1) 2962/     EDE : C9                  		ret
(1) 2963/     EDF :                     
(1) 2964/     EDF :                     ; ----------------------------------------
(1) 2965/     EDF :                     
(1) 2966/     EDF :                     .ins_dac:
(1) 2967/     EDF :                     ; 		ld	e,(ix+chnl_Ins)	; b - current Ins
(1) 2968/     EDF :                     ; 		ld	a,(iy+0Bh)	; 0Bh: DON'T reload flag
(1) 2969/     EDF :                     ; 		cp	e
(1) 2970/     EDF :                     ; 		jr	z,.same_dac
(1) 2971/     EDF :                     ; 		ld	(iy+0Bh),e
(1) 2972/     EDF : E5                  		push	hl
(1) 2973/     EE0 : C5                  		push	bc
(1) 2974/     EE1 : CD 1C 13            		call	dac_off
(1) 2975/     EE4 : 7E                  		ld	a,(hl)
(1) 2976/     EE5 : E6 0F               		and	00001111b
(1) 2977/     EE7 : 32 94 1F            		ld	(wave_Flags),a
(1) 2978/     EEA : CF                  		rst	8
(1) 2979/     EEB : 23                  		inc	hl
(1) 2980/     EEC : 23                  		inc	hl
(1) 2981/     EED : 5E                  		ld	e,(hl)
(1) 2982/     EEE : 23                  		inc	hl
(1) 2983/     EEF : 7E                  		ld	a,(hl)
(1) 2984/     EF0 : 23                  		inc	hl
(1) 2985/     EF1 : 6E                  		ld	l,(hl)
(1) 2986/     EF2 : 67                  		ld	h,a
(1) 2987/     EF3 : E5                  		push	hl
(1) 2988/     EF4 : 7B                  		ld	a,e
(1) 2989/     EF5 : 01 06 00            		ld	bc,6		; Skip head
(1) 2990/     EF8 : 09                  		add	hl,bc
(1) 2991/     EF9 : CE 00               		adc	a,0
(1) 2992/     EFB : 22 89 1F            		ld	(wave_Start),hl	; Set START point
(1) 2993/     EFE : 32 8B 1F            		ld	(wave_Start+2),a
(1) 2994/     F01 : E1                  		pop	hl
(1) 2995/     F02 : 7B                  		ld	a,e
(1) 2996/     F03 : 11 B4 1F            		ld	de,sampleHead
(1) 2997/     F06 : 01 06 00            		ld	bc,6
(1) 2998/     F09 : D5                  		push	de
(1) 2999/     F0A : CF                  		rst	8
(1) 3000/     F0B : CD D2 10            		call	transferRom	; *** ROM ACCESS ***
(1) 3001/     F0E : E1                  		pop	hl
(1) 3002/     F0F :                     	; hl - temporal header
(1) 3003/     F0F : 5E                  		ld	e,(hl)
(1) 3004/     F10 : 23                  		inc	hl
(1) 3005/     F11 : 56                  		ld	d,(hl)
(1) 3006/     F12 : 23                  		inc	hl
(1) 3007/     F13 : 7E                  		ld	a,(hl)
(1) 3008/     F14 : 23                  		inc	hl
(1) 3009/     F15 : ED 53 8C 1F         		ld	(wave_Len),de	; LEN
(1) 3010/     F19 : 32 8E 1F            		ld	(wave_Len+2),a
(1) 3011/     F1C : 5E                  		ld	e,(hl)
(1) 3012/     F1D : 23                  		inc	hl
(1) 3013/     F1E : CF                  		rst	8
(1) 3014/     F1F : 56                  		ld	d,(hl)
(1) 3015/     F20 : 23                  		inc	hl
(1) 3016/     F21 : 7E                  		ld	a,(hl)
(1) 3017/     F22 : 23                  		inc	hl
(1) 3018/     F23 : ED 53 8F 1F         		ld	(wave_Loop),de	; LOOP
(1) 3019/     F27 : 32 91 1F            		ld	(wave_Loop+2),a
(1) 3020/     F2A : 11 06 28            		ld	de,2806h	; keys off
(1) 3021/     F2D : CD F1 12            		call	fm_send_1
(1) 3022/     F30 : C1                  		pop	bc
(1) 3023/     F31 : E1                  		pop	hl
(1) 3024/     F32 :                     ; .same_dac:
(1) 3025/     F32 : C9                  		ret
(1) 3026/     F33 :                     
(1) 3027/     F33 :                     ; ----------------------------------------
(1) 3028/     F33 :                     
(1) 3029/     F33 :                     .ins_pcm:
(1) 3030/     F33 : DD E5               		push	ix
(1) 3031/     F35 : E5                  		push	hl
(1) 3032/     F36 : C5                  		push	bc
(1) 3033/     F37 : 7E                  		ld	a,(hl)		; Stereo|Loop bits
(1) 3034/     F38 : E6 01               		and	00000001b	; Read loop bit
(1) 3035/     F3A : 0F                  		rrca			; Move to MSB
(1) 3036/     F3B : CF                  		rst	8
(1) 3037/     F3C : 23                  		inc	hl		; Skip ID and Pitch
(1) 3038/     F3D : 23                  		inc	hl
(1) 3039/     F3E : 5E                  		ld	e,(hl)		; Read 24-bit pointer
(1) 3040/     F3F : B3                  		or	e
(1) 3041/     F40 : 5F                  		ld	e,a
(1) 3042/     F41 : 23                  		inc	hl
(1) 3043/     F42 : 7E                  		ld	a,(hl)
(1) 3044/     F43 : 23                  		inc	hl
(1) 3045/     F44 : 6E                  		ld	l,(hl)
(1) 3046/     F45 : 67                  		ld	h,a
(1) 3047/     F46 :                     	; d    - Loop enable bit
(1) 3048/     F46 :                     	; e,hl - 24-bit pointer + loop bit
(1) 3049/     F46 : DD 21 E0 18         		ld	ix,pcmcom
(1) 3050/     F4A : 06 00               		ld	b,0
(1) 3051/     F4C : FD 4E 05            		ld	c,(iy+05h)
(1) 3052/     F4F : DD 09               		add	ix,bc
(1) 3053/     F51 : 01 28 00            		ld	bc,40		; Go to 40
(1) 3054/     F54 : DD 09               		add	ix,bc
(1) 3055/     F56 : 01 08 00            		ld	bc,8
(1) 3056/     F59 : DD 73 00            		ld	(ix),e		; Write 24-bit pointer
(1) 3057/     F5C : DD 09               		add	ix,bc
(1) 3058/     F5E : DD 74 00            		ld	(ix),h
(1) 3059/     F61 : DD 09               		add	ix,bc
(1) 3060/     F63 : DD 75 00            		ld	(ix),l
(1) 3061/     F66 : C1                  		pop	bc
(1) 3062/     F67 : E1                  		pop	hl
(1) 3063/     F68 : DD E1               		pop	ix
(1) 3064/     F6A : C9                  		ret
(1) 3065/     F6B :                     
(1) 3066/     F6B :                     ; ----------------------------------------
(1) 3067/     F6B :                     
(1) 3068/     F6B :                     .ins_pwm:
(1) 3069/     F6B : DD E5               		push	ix
(1) 3070/     F6D : E5                  		push	hl
(1) 3071/     F6E : C5                  		push	bc
(1) 3072/     F6F : 7E                  		ld	a,(hl)		; Stereo|Loop bits
(1) 3073/     F70 : E6 03               		and	00000011b
(1) 3074/     F72 : 0F                  		rrca
(1) 3075/     F73 : 0F                  		rrca
(1) 3076/     F74 : 4F                  		ld	c,a
(1) 3077/     F75 : CF                  		rst	8
(1) 3078/     F76 : 23                  		inc	hl		; Skip ID and Pitch
(1) 3079/     F77 : 23                  		inc	hl
(1) 3080/     F78 : 56                  		ld	d,(hl)
(1) 3081/     F79 : 23                  		inc	hl
(1) 3082/     F7A : 5E                  		ld	e,(hl)
(1) 3083/     F7B : 23                  		inc	hl
(1) 3084/     F7C : 7E                  		ld	a,(hl)
(1) 3085/     F7D : 23                  		inc	hl
(1) 3086/     F7E : 6E                  		ld	l,(hl)
(1) 3087/     F7F : 67                  		ld	h,a
(1) 3088/     F80 : 79                  		ld	a,c
(1) 3089/     F81 : B2                  		or	d
(1) 3090/     F82 : 57                  		ld	d,a
(1) 3091/     F83 : CF                  		rst	8
(1) 3092/     F84 :                     	; de,hl - 32-bit PWM pointer
(1) 3093/     F84 : DD 21 20 19         		ld	ix,pwmcom
(1) 3094/     F88 : 06 00               		ld	b,0
(1) 3095/     F8A : FD 4E 05            		ld	c,(iy+05h)
(1) 3096/     F8D : DD 09               		add	ix,bc
(1) 3097/     F8F : 01 18 00            		ld	bc,24
(1) 3098/     F92 : DD 09               		add	ix,bc	; Move to PWOUTF
(1) 3099/     F94 : 01 08 00            		ld	bc,8
(1) 3100/     F97 : DD 72 00            		ld	(ix),d
(1) 3101/     F9A : DD 09               		add	ix,bc
(1) 3102/     F9C : DD 73 00            		ld	(ix),e
(1) 3103/     F9F : DD 09               		add	ix,bc
(1) 3104/     FA1 : DD 74 00            		ld	(ix),h
(1) 3105/     FA4 : DD 09               		add	ix,bc
(1) 3106/     FA6 : DD 75 00            		ld	(ix),l
(1) 3107/     FA9 : C1                  		pop	bc
(1) 3108/     FAA : E1                  		pop	hl
(1) 3109/     FAB : DD E1               		pop	ix
(1) 3110/     FAD : C9                  		ret
(1) 3111/     FAE :                     
(1) 3112/     FAE :                     ; ----------------------------------------
(1) 3113/     FAE :                     ; NEW note
(1) 3114/     FAE :                     ; ----------------------------------------
(1) 3115/     FAE :                     
(1) 3116/     FAE :                     .note:
(1) 3117/     FAE : 78                  		ld	a,b		; Volume bit?
(1) 3118/     FAF : E6 04               		and	0100b
(1) 3119/     FB1 : 20 05               		jr	nz,.fm_hasvol
(1) 3120/     FB3 : FD 36 08 00         		ld	(iy+08h),0	; Reset to default volume
(1) 3121/     FB7 : CF                  		rst	8
(1) 3122/     FB8 :                     .fm_hasvol:
(1) 3123/     FB8 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 3124/     FBB : 4F                  		ld	c,a
(1) 3125/     FBC : FE FF               		cp	-1
(1) 3126/     FBE : C8                  		ret	z
(1) 3127/     FBF : FE FE               		cp	-2
(1) 3128/     FC1 : C8                  		ret	z
(1) 3129/     FC2 : E7                  		rst	20h
(1) 3130/     FC3 : 7E                  		ld	a,(hl)
(1) 3131/     FC4 : E6 F0               		and	11110000b
(1) 3132/     FC6 : FE 80               		cp	80h
(1) 3133/     FC8 : 28 16               		jr	z,.n_indx
(1) 3134/     FCA : CF                  		rst	8
(1) 3135/     FCB : FE 90               		cp	90h
(1) 3136/     FCD : 28 20               		jr	z,.n_psgn
(1) 3137/     FCF : FE A0               		cp	0A0h
(1) 3138/     FD1 : 28 21               		jr	z,.n_fm
(1) 3139/     FD3 :                     ; 		cp	0B0h		; ** Can't use notes on FM special **
(1) 3140/     FD3 :                     ; 		jr	z,.n_fm
(1) 3141/     FD3 : FE C0               		cp	0C0h
(1) 3142/     FD5 : 28 09               		jr	z,.n_indx
(1) 3143/     FD7 : FE D0               		cp	0D0h
(1) 3144/     FD9 : 28 05               		jr	z,.n_indx
(1) 3145/     FDB : FE E0               		cp	0E0h
(1) 3146/     FDD : 28 01               		jr	z,.n_indx
(1) 3147/     FDF : C9                  		ret
(1) 3148/     FE0 :                     
(1) 3149/     FE0 :                     ; --------------------------------
(1) 3150/     FE0 :                     
(1) 3151/     FE0 :                     .n_indx:
(1) 3152/     FE0 : 79                  		ld	a,c
(1) 3153/     FE1 :                     .n_stfreq:
(1) 3154/     FE1 : 23                  		inc	hl		; Skip ID
(1) 3155/     FE2 : 5E                  		ld	e,(hl)		; Read pitch
(1) 3156/     FE3 : 2B                  		dec	hl
(1) 3157/     FE4 : 83                  		add	a,e		; Note + pitch
(1) 3158/     FE5 : CF                  		rst	8
(1) 3159/     FE6 : 87                  		add	a,a		; * 2
(1) 3160/     FE7 : FD 77 06            		ld	(iy+06h),a
(1) 3161/     FEA : FD 36 07 00         		ld	(iy+07h),0	; reset pitchbend
(1) 3162/     FEE : C9                  		ret
(1) 3163/     FEF :                     .n_psgn:
(1) 3164/     FEF : 79                  		ld	a,c
(1) 3165/     FF0 : C6 0C               		add	a,12		; <-- Manual adjust for NOISE
(1) 3166/     FF2 : 18 ED               		jr	.n_stfreq
(1) 3167/     FF4 :                     
(1) 3168/     FF4 :                     ; FM freqs
(1) 3169/     FF4 :                     .n_fm:
(1) 3170/     FF4 : 79                  		ld	a,c
(1) 3171/     FF5 : 23                  		inc	hl		; Skip ID
(1) 3172/     FF6 : 5E                  		ld	e,(hl)		; Read pitch
(1) 3173/     FF7 : 2B                  		dec	hl
(1) 3174/     FF8 : CF                  		rst	8
(1) 3175/     FF9 : 83                  		add	a,e		; Note + pitch
(1) 3176/     FFA :                     	; Search for octave and note...
(1) 3177/     FFA : 0E 00               		ld	c,0		; c - octave
(1) 3178/     FFC : 16 07               		ld	d,7
(1) 3179/     FFE :                     .get_oct:
(1) 3180/     FFE : 5F                  		ld	e,a		; e - note
(1) 3181/     FFF : D6 0C               		sub	12
(1) 3182/    1001 : B7                  		or	a
(1) 3183/    1002 : FA 09 10            		jp	m,.fnd_oct
(1) 3184/    1005 : 0C                  		inc	c
(1) 3185/    1006 :                     ; 		nop
(1) 3186/    1006 :                     ; 		nop
(1) 3187/    1006 :                     ; 		rst	8
(1) 3188/    1006 :                     ; 		nop
(1) 3189/    1006 :                     ; 		nop
(1) 3190/    1006 : 15                  		dec	d
(1) 3191/    1007 : 20 F5               		jr	nz,.get_oct
(1) 3192/    1009 :                     .fnd_oct:
(1) 3193/    1009 : CF                  		rst	8
(1) 3194/    100A : 7B                  		ld	a,e
(1) 3195/    100B : 87                  		add	a,a		; Note * 2
(1) 3196/    100C : E6 1F               		and	00011111b
(1) 3197/    100E : CB 09               		rrc	c
(1) 3198/    1010 : CB 09               		rrc	c
(1) 3199/    1012 : CB 09               		rrc	c
(1) 3200/    1014 : CF                  		rst	8
(1) 3201/    1015 : B1                  		or	c
(1) 3202/    1016 : FD 77 06            		ld	(iy+06h),a	; Save octave + index: OOOiiiiib
(1) 3203/    1019 : FD 36 07 00         		ld	(iy+07h),0
(1) 3204/    101D : C9                  		ret
(1) 3205/    101E :                     
(1) 3206/    101E :                     ; ----------------------------------------
(1) 3207/    101E :                     
(1) 3208/    101E :                     .chnl_ulnkoff:
(1) 3209/    101E :                     ; 		ld	c,0
(1) 3210/    101E :                     .chnl_ulnk:
(1) 3211/    101E : AF                  		xor	a
(1) 3212/    101F :                     ; 		res	7,(ix+chnl_Flags)	; Unlock this channel
(1) 3213/    101F :                     ; 		ld	(ix+chnl_Chip),a
(1) 3214/    101F : CF                  		rst	8
(1) 3215/    1020 : FD 77 00            		ld	(iy),a			; Delete link, chip and prio
(1) 3216/    1023 : FD 77 01            		ld	(iy+1),a
(1) 3217/    1026 : FD 77 02            		ld	(iy+2),a
(1) 3218/    1029 : FD 77 08            		ld	(iy+08h),a
(1) 3219/    102C : FD 77 09            		ld	(iy+09h),a
(1) 3220/    102F : FD 77 0A            		ld	(iy+0Ah),a
(1) 3221/    1032 : FD 77 0B            		ld	(iy+0Bh),a
(1) 3222/    1035 : C9                  		ret
(1) 3223/    1036 :                     .chnl_ulnkcut:
(1) 3224/    1036 : DD 4E 01            		ld	c,(ix+chnl_Chip)
(1) 3225/    1039 : C3 1E 10            		jp	.chnl_ulnk
(1) 3226/    103C :                     ; 		push	iy
(1) 3227/    103C :                     ; 		pop	hl
(1) 3228/    103C :                     ; 		ld	bc,8-2		; Go to 08h
(1) 3229/    103C :                     ; 		add	hl,bc
(1) 3230/    103C :                     ; 		rst	8
(1) 3231/    103C :                     ; 		ld	b,8/2
(1) 3232/    103C :                     ; .clrfull:
(1) 3233/    103C :                     ; 		ld	(hl),0		; Reset settings 08-0Bh
(1) 3234/    103C :                     ; 		inc	hl
(1) 3235/    103C :                     ; 		ld	(hl),0
(1) 3236/    103C :                     ; 		inc	hl
(1) 3237/    103C :                     ; 		rst	8
(1) 3238/    103C :                     ; 		djnz	.clrfull
(1) 3239/    103C :                     ; 		ret
(1) 3240/    103C :                     
(1) 3241/    103C :                     ; ============================================================
(1) 3242/    103C :                     ; --------------------------------------------------------
(1) 3243/    103C :                     ; Communication with the SCD and 32X
(1) 3244/    103C :                     ;
(1) 3245/    103C :                     ; SCD: Sends a level2 interrupt to Sub-CPU
(1) 3246/    103C :                     ; 32X: Interrupts Slave SH2 directly
(1) 3247/    103C :                     ; --------------------------------------------------------
(1) 3248/    103C :                     
(1) 3249/    103C :                     ; TODO: careful modifing this
(1) 3250/    103C :                     
(1) 3251/    103C :                     zmars_send:
(1) 3252/    103C :                     	; ----------------------------------------
(1) 3253/    103C :                     	; Send PCM table
(1) 3329/    103C :                     	; ----------------------------------------
(1) 3330/    103C :                     	; Send PWM table
(1) 3415/    103C : C9                  		ret
(1) 3416/    103D :                     
(1) 3417/    103D :                     ; --------------------------------------------------------
(1) 3418/    103D :                     ; Set bank to $A10000
(1) 3434/    103D :                     
(1) 3435/    103D :                     ; ====================================================================
(1) 3436/    103D :                     ; ----------------------------------------------------------------
(1) 3437/    103D :                     ; Subroutines
(1) 3438/    103D :                     ; ----------------------------------------------------------------
(1) 3439/    103D :                     
(1) 3440/    103D :                     ; --------------------------------------------------------
(1) 3441/    103D :                     ; Init sound engine
(1) 3442/    103D :                     ; --------------------------------------------------------
(1) 3443/    103D :                     
(1) 3444/    103D :                     gema_init:
(1) 3445/    103D : CD 1C 13            		call	dac_off
(1) 3446/    1040 : AF                  		xor	a
(1) 3447/    1041 :                     ; 		ld	(marsUpd),a
(1) 3448/    1041 :                     ; 		ld	(mcdUpd),a
(1) 3449/    1041 : 32 30 00            		ld	(cdRamLen),a
(1) 3450/    1044 : CD 2B 14            		call	gema_lastbank	; Set last bank slot BEFORE writing to PSG (32X bus problem)
(1) 3451/    1047 : 21 11 7F            		ld	hl,Zpsg_ctrl	; Silence PSG channels
(1) 3452/    104A : 36 9F               		ld	(hl),09Fh
(1) 3453/    104C : 36 BF               		ld	(hl),0BFh
(1) 3454/    104E : 36 DF               		ld	(hl),0DFh
(1) 3455/    1050 : 36 FF               		ld	(hl),0FFh
(1) 3456/    1052 : 11 0B 22            		ld	de,2208h|3	; Set Default LFO
(1) 3457/    1055 : CD F1 12            		call	fm_send_1
(1) 3458/    1058 : 11 00 27            		ld	de,2700h	; CH3 special and timers off
(1) 3459/    105B : CD F1 12            		call	fm_send_1
(1) 3460/    105E :                     ; 		ld	de,2800h	; FM KEYS off
(1) 3461/    105E : 14                  		inc	d
(1) 3462/    105F : CD F1 12            		call	fm_send_1
(1) 3463/    1062 : 1C                  		inc	e
(1) 3464/    1063 : CD F1 12            		call	fm_send_1
(1) 3465/    1066 : 1C                  		inc	e
(1) 3466/    1067 : CD F1 12            		call	fm_send_1
(1) 3467/    106A : 1C                  		inc	e
(1) 3468/    106B : 1C                  		inc	e
(1) 3469/    106C : CD F1 12            		call	fm_send_1
(1) 3470/    106F : 1C                  		inc	e
(1) 3471/    1070 : CD F1 12            		call	fm_send_1
(1) 3472/    1073 : 1C                  		inc	e
(1) 3473/    1074 : CD F1 12            		call	fm_send_1
(1) 3474/    1077 : FD 21 C6 18         		ld	iy,nikona_BuffList
(1) 3475/    107B : 0E 01               		ld	c,1			; Start at this priority
(1) 3476/    107D :                     .setup_list:
(1) 3477/    107D : FD 7E 00            		ld	a,(iy)
(1) 3478/    1080 : FE FF               		cp	-1
(1) 3479/    1082 : 28 24               		jr	z,.end_setup
(1) 3480/    1084 : FD 23               		inc	iy
(1) 3481/    1086 : 6F                  		ld	l,a
(1) 3482/    1087 : FD 66 00            		ld	h,(iy)
(1) 3483/    108A : E5                  		push	hl
(1) 3484/    108B : DD E1               		pop	ix
(1) 3485/    108D : DD 71 11            		ld	(ix+trk_Priority),c
(1) 3486/    1090 : DD 36 01 FF         		ld	(ix+trk_SeqId),-1	; Reset sequence ID
(1) 3487/    1094 : FD 23               		inc	iy
(1) 3488/    1096 :                     	; iy - src
(1) 3489/    1096 :                     	; hl - dst
(1) 3490/    1096 : 11 04 00            		ld	de,trk_Blocks
(1) 3491/    1099 : 19                  		add	hl,de
(1) 3492/    109A : 06 06               		ld	b,SIZE_BUFFLIST-2
(1) 3493/    109C :                     .st_copy:
(1) 3494/    109C : FD 7E 00            		ld	a,(iy)
(1) 3495/    109F : 77                  		ld	(hl),a
(1) 3496/    10A0 : FD 23               		inc	iy
(1) 3497/    10A2 : 23                  		inc	hl
(1) 3498/    10A3 : 10 F7               		djnz	.st_copy
(1) 3499/    10A5 : 0C                  		inc	c
(1) 3500/    10A6 : 18 D5               		jr	.setup_list
(1) 3501/    10A8 :                     .end_setup:
(1) 3502/    10A8 : 3E FF               		ld	a,-1			; Reset
(1) 3503/    10AA : 32 86 1F            		ld	(trkListPage),a
(1) 3504/    10AD : AF                  		xor	a
(1) 3505/    10AE : C3 F1 05            		jp	init_RomTrcks
(1) 3506/    10B1 :                     
(1) 3507/    10B1 :                     ; --------------------------------------------------------
(1) 3508/    10B1 :                     ; get_tick
(1) 3509/    10B1 :                     ;
(1) 3510/    10B1 :                     ; Checks if VBlank triggred a TICK
(1) 3511/    10B1 :                     ; (1/150 NTSC, 1/120 PAL)
(1) 3512/    10B1 :                     ; --------------------------------------------------------
(1) 3513/    10B1 :                     
(1) 3514/    10B1 :                     get_tick:
(1) 3515/    10B1 : F3                  		di				; Disable ints
(1) 3516/    10B2 : F5                  		push	af
(1) 3517/    10B3 : E5                  		push	hl
(1) 3518/    10B4 : 21 81 1F            		ld	hl,tickFlag		; read last TICK flag
(1) 3519/    10B7 : 7E                  		ld	a,(hl)			; non-zero value (1Fh)?
(1) 3520/    10B8 : B7                  		or 	a
(1) 3521/    10B9 : 28 13               		jr	z,.ctnotick
(1) 3522/    10BB : 36 00               		ld	(hl),0			; Reset TICK flag
(1) 3523/    10BD : 23                  		inc	hl			; Move to tickCnt
(1) 3524/    10BE : 34                  		inc	(hl)			; and increment
(1) 3525/    10BF : CF                  		rst	8
(1) 3526/    10C0 : D5                  		push	de
(1) 3527/    10C1 : 2A A0 1F            		ld	hl,(sbeatAcc)		; Increment subbeats
(1) 3528/    10C4 : ED 5B A2 1F         		ld	de,(sbeatPtck)
(1) 3529/    10C8 : CF                  		rst	8
(1) 3530/    10C9 : 19                  		add	hl,de
(1) 3531/    10CA : 22 A0 1F            		ld	(sbeatAcc),hl
(1) 3532/    10CD : D1                  		pop	de
(1) 3533/    10CE :                     .ctnotick:
(1) 3534/    10CE : E1                  		pop	hl
(1) 3535/    10CF : F1                  		pop	af
(1) 3536/    10D0 : FB                  		ei				; Enable ints again
(1) 3537/    10D1 : C9                  		ret
(1) 3538/    10D2 :                     
(1) 3539/    10D2 :                     ; --------------------------------------------------------
(1) 3540/    10D2 :                     ; transferRom
(1) 3541/    10D2 :                     ;
(1) 3542/    10D2 :                     ; Transfer bytes from ROM to RAM. This also tells
(1) 3543/    10D2 :                     ; to 68k that we want to access ROM
(1) 3544/    10D2 :                     ;
(1) 3545/    10D2 :                     ; Input:
(1) 3546/    10D2 :                     ; a  - 68K Address $xx0000
(1) 3547/    10D2 :                     ;  c - Byte count (size 0 NOT allowed, MAX: 0FFh)
(1) 3548/    10D2 :                     ; hl - 68K Address $00xxxx
(1) 3549/    10D2 :                     ; de - Destination pointer
(1) 3550/    10D2 :                     ;
(1) 3551/    10D2 :                     ; Uses:
(1) 3552/    10D2 :                     ; b
(1) 3553/    10D2 :                     ;
(1) 3554/    10D2 :                     ; Notes:
(1) 3555/    10D2 :                     ; call RST 20h first if transfering anything other
(1) 3556/    10D2 :                     ; than sample data, just to be safe.
(1) 3557/    10D2 :                     ; --------------------------------------------------------
(1) 3558/    10D2 :                     
(1) 3559/    10D2 :                     transferRom:
(1) 3560/    10D2 : FE FF               		cp	0FFh		; ** WORKAROUND FOR $FF0000 area
(1) 3561/    10D4 : 28 43               		jr	z,.from_ram
(1) 3562/    10D6 : CF                  		rst	8
(1) 3563/    10D7 : DD E5               		push	ix
(1) 3564/    10D9 : DD 21 2F 00         		ld	ix,commZRomBlk	; ix - rom read/block flags
(1) 3565/    10DD : 22 9E 1F            		ld	(x68ksrclsb),hl	; save hl copy
(1) 3566/    10E0 : CB BC               		res	7,h
(1) 3567/    10E2 : 06 00               		ld	b,0
(1) 3568/    10E4 : 0B                  		dec	bc
(1) 3569/    10E5 : 09                  		add	hl,bc
(1) 3570/    10E6 : CB 7C               		bit	7,h
(1) 3571/    10E8 : 20 0B               		jr	nz,.double
(1) 3572/    10EA : 2A 9E 1F            		ld	hl,(x68ksrclsb)	; single transfer
(1) 3573/    10ED : 0C                  		inc	c
(1) 3574/    10EE : 47                  		ld	b,a
(1) 3575/    10EF : CD 37 11            		call	.transfer
(1) 3576/    10F2 : DD E1               		pop	ix
(1) 3577/    10F4 : C9                  		ret
(1) 3578/    10F5 :                     .double:
(1) 3579/    10F5 : CF                  		rst	8
(1) 3580/    10F6 : 47                  		ld	b,a		; double transfer
(1) 3581/    10F7 : C5                  		push	bc
(1) 3582/    10F8 : E5                  		push	hl
(1) 3583/    10F9 : 79                  		ld	a,c
(1) 3584/    10FA : 95                  		sub	a,l
(1) 3585/    10FB : 4F                  		ld	c,a
(1) 3586/    10FC : 2A 9E 1F            		ld	hl,(x68ksrclsb)
(1) 3587/    10FF : CD 37 11            		call	.transfer
(1) 3588/    1102 : E1                  		pop	hl
(1) 3589/    1103 : C1                  		pop	bc
(1) 3590/    1104 :                     ; 		rst	8
(1) 3591/    1104 : 4D                  		ld	c,l
(1) 3592/    1105 : 0C                  		inc	c
(1) 3593/    1106 : 3A 9F 1F            		ld	a,(x68ksrcmid)
(1) 3594/    1109 : E6 80               		and	80h
(1) 3595/    110B : C6 80               		add	a,80h
(1) 3596/    110D : 67                  		ld	h,a
(1) 3597/    110E : 2E 00               		ld	l,0
(1) 3598/    1110 : 30 01               		jr	nc,.x68knocarry
(1) 3599/    1112 : 04                  		inc	b
(1) 3600/    1113 :                     .x68knocarry:
(1) 3601/    1113 : CD 37 11            		call	.transfer
(1) 3602/    1116 : DD E1               		pop	ix
(1) 3603/    1118 : C9                  		ret
(1) 3604/    1119 :                     
(1) 3605/    1119 :                     ; ------------------------------------------------
(1) 3606/    1119 :                     ; WORKAROUND FOR READING FROM $FF0000 RAM
(1) 3607/    1119 :                     ; SEGA CD ONLY
(1) 3608/    1119 :                     ;
(1) 3609/    1119 :                     ; On the 68K side YOU MUST CALL
(1) 3610/    1119 :                     ; Sound_Update on a loop during Display.
(1) 3611/    1119 :                     ; ------------------------------------------------
(1) 3612/    1119 :                     
(1) 3613/    1119 :                     .from_ram:
(1) 3614/    1119 : ED 53 31 00         		ld	(cdRamDst),de
(1) 3615/    111D : 22 33 00            		ld	(cdRamSrc),hl
(1) 3616/    1120 : 32 35 00            		ld	(cdRamSrcB),a
(1) 3617/    1123 : CD 2B 14            		call	gema_lastbank			; Set bank to $FF8000 area
(1) 3618/    1126 : CF                  		rst	8
(1) 3619/    1127 : 79                  		ld	a,c
(1) 3620/    1128 : 32 30 00            		ld	(cdRamLen),a
(1) 3621/    112B : 21 00 FF            		ld	hl,RAM_ZCdFlag_D&07FFFh+8000h	; ** EXTERNAL **
(1) 3622/    112E : 36 01               		ld	(hl),1				; WRITE TO RAM: Set request, 68k clears.
(1) 3623/    1130 :                     .wait:
(1) 3624/    1130 : 3A 30 00            		ld	a,(cdRamLen)
(1) 3625/    1133 : B7                  		or	a
(1) 3626/    1134 : 20 FA               		jr	nz,.wait
(1) 3627/    1136 : C9                  		ret
(1) 3628/    1137 :                     
(1) 3629/    1137 :                     ; ------------------------------------------------
(1) 3630/    1137 :                     ; b  - Source ROM bank
(1) 3631/    1137 :                     ;  c - Bytes to transfer (00h is invalid)
(1) 3632/    1137 :                     ; hl - Source ROM $00xxxx | 8000h
(1) 3633/    1137 :                     ; de - Destination address
(1) 3634/    1137 :                     ; ix - ROM-block flag
(1) 3635/    1137 :                     ; ------------------------------------------------
(1) 3636/    1137 :                     
(1) 3637/    1137 :                     .transfer:
(1) 3638/    1137 : CF                  		rst	8
(1) 3639/    1138 : D5                  		push	de
(1) 3640/    1139 : 11 00 60            		ld	de,6000h
(1) 3641/    113C : 7C                  		ld	a,h
(1) 3642/    113D : 07                  		rlca
(1) 3643/    113E : 12                  		ld	(de),a
(1) 3644/    113F : 78                  		ld	a,b
(1) 3645/    1140 : CF                  		rst	8
(1) 3646/    1141 : 12                  		ld	(de),a
(1) 3647/    1142 : 0F                  		rrca
(1) 3648/    1143 : 12                  		ld	(de),a
(1) 3649/    1144 : 0F                  		rrca
(1) 3650/    1145 : 12                  		ld	(de),a
(1) 3651/    1146 : 0F                  		rrca
(1) 3652/    1147 : 12                  		ld	(de),a
(1) 3653/    1148 : 0F                  		rrca
(1) 3654/    1149 : CF                  		rst	8
(1) 3655/    114A : 12                  		ld	(de),a
(1) 3656/    114B : 0F                  		rrca
(1) 3657/    114C : 12                  		ld	(de),a
(1) 3658/    114D : 0F                  		rrca
(1) 3659/    114E : 12                  		ld	(de),a
(1) 3660/    114F : 0F                  		rrca
(1) 3661/    1150 : 12                  		ld	(de),a
(1) 3662/    1151 : D1                  		pop	de
(1) 3663/    1152 : CB FC               		set	7,h
(1) 3664/    1154 : CF                  		rst	8
(1) 3665/    1155 :                     
(1) 3666/    1155 :                     	; Transfer ROM data in packets
(1) 3667/    1155 :                     	; while playing the cache'd sample
(1) 3668/    1155 :                     	; *** CRITICAL PROCESS ***
(1) 3669/    1155 :                     	;
(1) 3670/    1155 :                     	; pseudo-reference for ldir:
(1) 3671/    1155 :                     	; ld (de),(hl)	; load (hl) to (de) directly
(1) 3672/    1155 :                     	; inc de	; next de
(1) 3673/    1155 :                     	; inc hl	; next hl
(1) 3674/    1155 :                     	; dec bc	; decrement bc
(1) 3675/    1155 :                     	;
(1) 3676/    1155 : 06 00               		ld	b,0
(1) 3677/    1157 : 79                  		ld	a,c		; a - Size counter
(1) 3678/    1158 :                     ; 		set	1,(ix)
(1) 3679/    1158 : D6 08               		sub	MAX_TRFRPZ	; Length lower than MAX_TRFRPZ?
(1) 3680/    115A : 38 14               		jr	c,.x68klast	; Process single piece only
(1) 3681/    115C :                     .x68kloop:
(1) 3682/    115C : CF                  		rst	8
(1) 3683/    115D : 00                  		nop
(1) 3684/    115E : 0E 07               		ld	c,MAX_TRFRPZ-1
(1) 3685/    1160 : DD CB 00 46         		bit	0,(ix)		; Genesis requests LOCK?
(1) 3686/    1164 : C4 7E 11            		call	nz,.x68klpwt
(1) 3687/    1167 : ED B0               		ldir			; (de) to (hl) until bc == 0
(1) 3688/    1169 : CF                  		rst	8
(1) 3689/    116A : 00                  		nop
(1) 3690/    116B : D6 07               		sub	a,MAX_TRFRPZ-1
(1) 3691/    116D : D2 5C 11            		jp	nc,.x68kloop
(1) 3692/    1170 :                     ; last block
(1) 3693/    1170 :                     .x68klast:
(1) 3694/    1170 : C6 08               		add	a,MAX_TRFRPZ
(1) 3695/    1172 : 4F                  		ld	c,a
(1) 3696/    1173 : DD CB 00 46         		bit	0,(ix)		; Genesis requests LOCK?
(1) 3697/    1177 : C4 7E 11            		call	nz,.x68klpwt
(1) 3698/    117A : ED B0               		ldir
(1) 3699/    117C : CF                  		rst	8
(1) 3700/    117D : C9                  		ret
(1) 3701/    117E :                     
(1) 3702/    117E :                     ; Wait here until Genesis unlocks ROM
(1) 3703/    117E :                     .x68klpwt:
(1) 3704/    117E : 00                  		nop	; WAVE SYNC
(1) 3705/    117F : 00                  		nop
(1) 3706/    1180 :                     .x68kpwtlp:
(1) 3707/    1180 : CF                  		rst	8
(1) 3708/    1181 : 00                  		nop	; WAVE SYNC
(1) 3709/    1182 : 00                  		nop
(1) 3710/    1183 : DD CB 00 46         		bit	0,(ix)		; 68k finished?
(1) 3711/    1187 : 20 F7               		jr	nz,.x68kpwtlp
(1) 3712/    1189 : C9                  		ret
(1) 3713/    118A :                     
(1) 3714/    118A :                     ; ====================================================================
(1) 3715/    118A :                     ; ----------------------------------------------------------------
(1) 3716/    118A :                     ; Sound chip routines
(1) 3717/    118A :                     ; ----------------------------------------------------------------
(1) 3718/    118A :                     
(1) 3719/    118A :                     ; --------------------------------------------------------
(1) 3720/    118A :                     ; chip_env
(1) 3721/    118A :                     ;
(1) 3722/    118A :                     ; Process PSG
(1) 3723/    118A :                     ; --------------------------------------------------------
(1) 3724/    118A :                     
(1) 3725/    118A :                     chip_env:
(1) 3729/    118A : FD 21 5B 19         		ld	iy,psgcom+3		; Start from NOISE first
(1) 3730/    118E : DD 21 11 7F         		ld	ix,Zpsg_ctrl
(1) 3731/    1192 : 0E E0               		ld	c,0E0h			; c - PSG first ctrl command
(1) 3732/    1194 : 06 04               		ld	b,4			; b - 4 channels
(1) 3733/    1196 :                     .vloop:
(1) 3734/    1196 : CF                  		rst	8
(1) 3735/    1197 : FD 5E 00            		ld	e,(iy+COM)		; e - current command
(1) 3736/    119A : FD 36 00 00         		ld	(iy+COM),0
(1) 3737/    119E :                     
(1) 3738/    119E :                     	; ----------------------------
(1) 3739/    119E :                     	; bit 2 - stop sound
(1) 3740/    119E : CB 53               		bit	2,e
(1) 3741/    11A0 : 28 0C               		jr	z,.ckof
(1) 3742/    11A2 : FD 36 04 FF         		ld	(iy+LEV),-1		; reset level
(1) 3743/    11A6 : FD 36 28 01         		ld	(iy+FLG),1		; and update
(1) 3744/    11AA : FD 36 18 00         		ld	(iy+MODE),0		; envelope off
(1) 3745/    11AE :                     .ckof:
(1) 3746/    11AE :                     	; ----------------------------
(1) 3747/    11AE :                     	; bit 1 - key off
(1) 3748/    11AE : CB 4B               		bit	1,e
(1) 3749/    11B0 : 28 0F               		jr      z,.ckon
(1) 3750/    11B2 : FD 7E 18            		ld	a,(iy+MODE)		; mode 0?
(1) 3751/    11B5 : B7                  		or	a
(1) 3752/    11B6 : 28 09               		jr	z,.ckon
(1) 3753/    11B8 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3754/    11BC : FD 36 18 04         		ld	(iy+MODE),100b		; set envelope mode 100b
(1) 3755/    11C0 : CF                  		rst	8
(1) 3756/    11C1 :                     .ckon:
(1) 3757/    11C1 :                     	; ----------------------------
(1) 3758/    11C1 :                     	; bit 0 - key on
(1) 3759/    11C1 : CB 43               		bit	0,e
(1) 3760/    11C3 : 28 1A               		jr	z,.envproc
(1) 3761/    11C5 : FD 36 04 FF         		ld	(iy+LEV),-1		; reset level
(1) 3762/    11C9 : 78                  		ld	a,b
(1) 3763/    11CA : FE 04               		cp	4			; NOISE channel?
(1) 3764/    11CC : 20 08               		jr	nz,.nskip
(1) 3765/    11CE : CF                  		rst	8			; Set NOISE mode
(1) 3766/    11CF : 3A 83 1F            		ld	a,(psgHatMode)		; write hat mode only.
(1) 3767/    11D2 : B1                  		or	c
(1) 3768/    11D3 : DD 77 00            		ld	(ix),a			; WRITE PSG
(1) 3769/    11D6 :                     .nskip:
(1) 3770/    11D6 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3771/    11DA : CF                  		rst	8
(1) 3772/    11DB : FD 36 18 01         		ld	(iy+MODE),001b		; set to attack mode
(1) 3773/    11DF :                     .nblock:
(1) 3774/    11DF :                     
(1) 3775/    11DF :                     	; ----------------------------
(1) 3776/    11DF :                     	; Process effects
(1) 3777/    11DF :                     	; ----------------------------
(1) 3778/    11DF :                     .envproc:
(1) 3779/    11DF : FD 7E 18            		ld	a,(iy+MODE)
(1) 3780/    11E2 : B7                  		or	a			; no modes
(1) 3781/    11E3 : CA 69 12            		jp	z,.vedlp
(1) 3782/    11E6 : FE 01               		cp 	001b			; Attack mode
(1) 3783/    11E8 : 20 2C               		jr	nz,.chk2
(1) 3784/    11EA : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3785/    11EE : FD 5E 24            		ld	e,(iy+ALV)
(1) 3786/    11F1 : FD 7E 08            		ld	a,(iy+ATK)		; if ATK == 0, don't use
(1) 3787/    11F4 : B7                  		or	a
(1) 3788/    11F5 : 28 16               		jr	z,.atkend
(1) 3789/    11F7 : 57                  		ld	d,a			; c - attack rate
(1) 3790/    11F8 : 7B                  		ld	a,e			; a - attack level
(1) 3791/    11F9 : CF                  		rst	8
(1) 3792/    11FA : FD 5E 24            		ld	e,(iy+ALV)		; b - OLD attack level
(1) 3793/    11FD : 92                  		sub	a,d			; (attack rate) - (level)
(1) 3794/    11FE : 38 0D               		jr	c,.atkend		; if carry: already finished
(1) 3795/    1200 : 28 0B               		jr	z,.atkend		; if zero: no attack rate
(1) 3796/    1202 : BB                  		cp	e			; attack rate == level?
(1) 3797/    1203 : 38 08               		jr	c,.atkend
(1) 3798/    1205 : 28 06               		jr	z,.atkend
(1) 3799/    1207 : FD 77 04            		ld	(iy+LEV),a		; set new level
(1) 3800/    120A : CF                  		rst	8
(1) 3801/    120B : 18 5C               		jr	.vedlp
(1) 3802/    120D :                     .atkend:
(1) 3803/    120D : FD 73 04            		ld	(iy+LEV),e		; attack level = new level
(1) 3804/    1210 :                     .atkzero:
(1) 3805/    1210 : FD 36 18 02         		ld	(iy+MODE),010b		; set to decay mode
(1) 3806/    1214 : 18 53               		jr	.vedlp
(1) 3807/    1216 :                     .chk2:
(1) 3808/    1216 :                     
(1) 3809/    1216 : FE 02               		cp	010b			; Decay mode
(1) 3810/    1218 : 20 31               		jr	nz,.chk4
(1) 3811/    121A :                     .dectmr:
(1) 3812/    121A : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3813/    121E : FD 7E 04            		ld	a,(iy+LEV)		; a - Level
(1) 3814/    1221 : FD 5E 10            		ld	e,(iy+SLV)		; b - Sustain
(1) 3815/    1224 : BB                  		cp	e
(1) 3816/    1225 : 38 0D               		jr	c,.dkadd		; if carry: add
(1) 3817/    1227 : 28 18               		jr	z,.dkyend		; if zero:  finish
(1) 3818/    1229 : CF                  		rst	8
(1) 3819/    122A : FD 96 0C            		sub	(iy+DKY)		; substract decay rate
(1) 3820/    122D : 38 12               		jr	c,.dkyend		; finish if wraped.
(1) 3821/    122F : BB                  		cp	e			; compare level
(1) 3822/    1230 : 38 0F               		jr	c,.dkyend		; and finish
(1) 3823/    1232 : 18 08               		jr	.dksav
(1) 3824/    1234 :                     .dkadd:
(1) 3825/    1234 : FD 86 0C            		add	a,(iy+DKY)		;  (level) + (decay rate)
(1) 3826/    1237 : 38 08               		jr	c,.dkyend		; finish if wraped.
(1) 3827/    1239 : BB                  		cp	e			; compare level
(1) 3828/    123A : 30 05               		jr	nc,.dkyend
(1) 3829/    123C :                     .dksav:
(1) 3830/    123C : FD 77 04            		ld	(iy+LEV),a		; save new level
(1) 3831/    123F : 18 28               		jr	.vedlp
(1) 3832/    1241 :                     .dkyend:
(1) 3833/    1241 : CF                  		rst	8
(1) 3834/    1242 : FD 73 04            		ld	(iy+LEV),e		; save last attack
(1) 3835/    1245 : FD 36 18 04         		ld	(iy+MODE),100b		; and set to sustain
(1) 3836/    1249 : 18 1E               		jr	.vedlp
(1) 3837/    124B :                     .chk4:
(1) 3838/    124B : FE 04               		cp	100b			; Sustain phase
(1) 3839/    124D : 20 1A               		jr	nz,.vedlp
(1) 3840/    124F : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3841/    1253 : FD 7E 04            		ld	a,(iy+LEV)		; a - Level
(1) 3842/    1256 : CF                  		rst	8
(1) 3843/    1257 : FD 86 14            		add 	a,(iy+RRT)		; add Release Rate
(1) 3844/    125A : 38 05               		jr	c,.killenv		; release done
(1) 3845/    125C : FD 77 04            		ld	(iy+LEV),a		; set new Level
(1) 3846/    125F : 18 08               		jr	.vedlp
(1) 3847/    1261 :                     .killenv:
(1) 3848/    1261 : FD 36 04 FF         		ld	(iy+LEV),-1		; Silence this channel
(1) 3849/    1265 : FD 36 18 00         		ld	(iy+MODE),0		; Reset mode
(1) 3850/    1269 :                     .vedlp:
(1) 3851/    1269 :                     
(1) 3852/    1269 :                     	; ----------------------------
(1) 3853/    1269 :                     	; PSG UPDATE
(1) 3854/    1269 :                     	; ----------------------------
(1) 3855/    1269 : FD 7E 28            		ld	a,(iy+FLG)
(1) 3856/    126C : B7                  		or	a
(1) 3857/    126D : 28 72               		jr	z,.noupd
(1) 3858/    126F : FD 36 28 00         		ld	(iy+FLG),0	; Reset until next one
(1) 3859/    1273 : 59                  		ld	e,c
(1) 3860/    1274 : 3A 83 1F            		ld	a,(psgHatMode)
(1) 3861/    1277 : 57                  		ld	d,a
(1) 3862/    1278 : E6 03               		and	011b
(1) 3863/    127A : FE 03               		cp	011b
(1) 3864/    127C : 20 1D               		jr	nz,.normal
(1) 3865/    127E : CF                  		rst	8
(1) 3866/    127F : 78                  		ld	a,b		; Channel 4?
(1) 3867/    1280 : FE 03               		cp	3
(1) 3868/    1282 : 28 13               		jr	z,.silnc_3
(1) 3869/    1284 : FE 04               		cp	4
(1) 3870/    1286 : 20 18               		jr	nz,.do_nfreq
(1) 3871/    1288 : 3A 83 1F            		ld	a,(psgHatMode)
(1) 3872/    128B : 57                  		ld	d,a
(1) 3873/    128C : E6 03               		and	011b
(1) 3874/    128E : CF                  		rst	8
(1) 3875/    128F : FE 03               		cp	011b
(1) 3876/    1291 : 20 30               		jr	nz,.vonly
(1) 3877/    1293 : 1E C0               		ld	e,0C0h
(1) 3878/    1295 : 18 09               		jr	.do_nfreq
(1) 3879/    1297 :                     .silnc_3:
(1) 3880/    1297 : 3E FF               		ld	a,-1
(1) 3881/    1299 : 18 32               		jr	.vlmuch
(1) 3882/    129B :                     .normal:
(1) 3883/    129B : 78                  		ld	a,b
(1) 3884/    129C : FE 04               		cp	4
(1) 3885/    129E : 28 23               		jr	z,.vonly
(1) 3886/    12A0 :                     .do_nfreq:
(1) 3887/    12A0 : FD 6E 1C            		ld	l,(iy+DTL)
(1) 3888/    12A3 : FD 66 20            		ld	h,(iy+DTH)
(1) 3889/    12A6 :                     
(1) 3890/    12A6 :                     	; freq effects go here
(1) 3891/    12A6 :                     	; (save e FIRST.)
(1) 3892/    12A6 :                     	;	push	de
(1) 3893/    12A6 :                     	;	pop	de
(1) 3894/    12A6 : 7D                  		ld	a,l		; Grab LSB 4 right bits
(1) 3895/    12A7 : E6 0F               		and	00001111b
(1) 3896/    12A9 : B3                  		or	e		; OR with channel set in e
(1) 3897/    12AA : CF                  		rst	8
(1) 3898/    12AB : DD 77 00            		ld	(ix),a		; write it
(1) 3899/    12AE : 7D                  		ld	a,l		; Grab LSB 4 left bits
(1) 3900/    12AF : 0F                  		rrca
(1) 3901/    12B0 : 0F                  		rrca
(1) 3902/    12B1 : 0F                  		rrca
(1) 3903/    12B2 : 0F                  		rrca
(1) 3904/    12B3 : E6 0F               		and	00001111b
(1) 3905/    12B5 : 5F                  		ld	e,a
(1) 3906/    12B6 : 7C                  		ld	a,h		; Grab MSB bits
(1) 3907/    12B7 : CF                  		rst	8
(1) 3908/    12B8 : 07                  		rlca
(1) 3909/    12B9 : 07                  		rlca
(1) 3910/    12BA : 07                  		rlca
(1) 3911/    12BB : 07                  		rlca
(1) 3912/    12BC : E6 30               		and	00110000b
(1) 3913/    12BE : B3                  		or	e
(1) 3914/    12BF : DD 77 00            		ld	(ix),a
(1) 3915/    12C2 : CF                  		rst	8
(1) 3916/    12C3 :                     .vonly:
(1) 3917/    12C3 : FD 7E 30            		ld	a,(iy+PVOL)		; c - Level
(1) 3918/    12C6 : FD 86 04            		add	a,(iy+LEV)		; Add MASTER volume
(1) 3919/    12C9 : 30 02               		jr	nc,.vlmuch
(1) 3920/    12CB : 3E FF               		ld	a,-1
(1) 3921/    12CD :                     .vlmuch:
(1) 3922/    12CD : CB 3F               		srl	a			; (Level >> 4)
(1) 3923/    12CF : CB 3F               		srl	a
(1) 3924/    12D1 : CB 3F               		srl	a
(1) 3925/    12D3 : CF                  		rst	8
(1) 3926/    12D4 : CB 3F               		srl	a
(1) 3927/    12D6 : E6 0F               		and	00001111b		; Filter volume value
(1) 3928/    12D8 : B1                  		or	c			; and OR with current channel
(1) 3929/    12D9 : F6 90               		or	90h			; Set volume-set mode
(1) 3931/    12DB : DD 77 00            		ld	(ix),a			; *** WRITE volume
(1) 3933/    12DE : FD 34 38            		inc	(iy+PTMR)		; Update general timer
(1) 3934/    12E1 :                     .noupd:
(1) 3935/    12E1 :                     	; ----------------------------
(1) 3936/    12E1 : FD 2B               		dec	iy			; next COM to check (backwards)
(1) 3937/    12E3 : 79                  		ld	a,c
(1) 3938/    12E4 : CF                  		rst	8
(1) 3939/    12E5 : D6 20               		sub	a,20h			; next PSG (backwards)
(1) 3940/    12E7 : 4F                  		ld	c,a
(1) 3941/    12E8 : 05                  		dec	b
(1) 3942/    12E9 : C2 96 11            		jp	nz,.vloop
(1) 3943/    12EC : C9                  		ret
(1) 3944/    12ED :                     
(1) 3945/    12ED :                     ; ---------------------------------------------
(1) 3946/    12ED :                     ; FM register writes
(1) 3947/    12ED :                     ;
(1) 3948/    12ED :                     ; Input:
(1) 3949/    12ED :                     ; d - ctrl
(1) 3950/    12ED :                     ; e - data
(1) 3951/    12ED :                     ; ---------------------------------------------
(1) 3952/    12ED :                     
(1) 3953/    12ED :                     ; c - KeyID
(1) 3954/    12ED :                     fm_autoreg:
(1) 3955/    12ED : CB 51               		bit	2,c
(1) 3956/    12EF : 20 0B               		jr	nz,fm_send_2
(1) 3957/    12F1 :                     
(1) 3958/    12F1 :                     ; Channels 1-3 and global registers
(1) 3959/    12F1 :                     fm_send_1:
(1) 3960/    12F1 : 7A                  		ld	a,d
(1) 3961/    12F2 : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 3962/    12F5 : 00                  		nop
(1) 3963/    12F6 : 7B                  		ld	a,e
(1) 3964/    12F7 : 32 01 40            		ld	(Zym_data_1),a
(1) 3965/    12FA : 00                  		nop
(1) 3966/    12FB : C9                  		ret
(1) 3967/    12FC :                     ; Channels 4-6
(1) 3968/    12FC :                     fm_send_2:
(1) 3969/    12FC : 7A                  		ld	a,d
(1) 3970/    12FD : 32 02 40            		ld	(Zym_ctrl_2),a
(1) 3971/    1300 : 00                  		nop
(1) 3972/    1301 : 7B                  		ld	a,e
(1) 3973/    1302 : 32 03 40            		ld	(Zym_data_2),a
(1) 3974/    1305 : 00                  		nop
(1) 3975/    1306 : C9                  		ret
(1) 3976/    1307 :                     
(1) 3977/    1307 :                     ; --------------------------------------------------------
(1) 3978/    1307 :                     ; brute-force WAVE ON/OFF playback
(1) 3979/    1307 :                     ; --------------------------------------------------------
(1) 3980/    1307 :                     
(1) 3981/    1307 :                     dac_on:
(1) 3982/    1307 : 3E 2B               		ld	a,2Bh
(1) 3983/    1309 : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 3984/    130C : 3E 80               		ld	a,80h
(1) 3985/    130E : 32 01 40            		ld	(Zym_data_1),a
(1) 3986/    1311 : 3E D9               		ld 	a,zopcExx
(1) 3987/    1313 : 32 08 00            		ld	(dac_me),a
(1) 3988/    1316 : 3E F5               		ld 	a,zopcPushAf
(1) 3989/    1318 : 32 20 00            		ld	(dac_fill),a
(1) 3990/    131B : C9                  		ret
(1) 3991/    131C :                     dac_off:
(1) 3992/    131C : 3E 2B               		ld	a,2Bh
(1) 3993/    131E : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 3994/    1321 : 3E 00               		ld	a,00h
(1) 3995/    1323 : 32 01 40            		ld	(Zym_data_1),a
(1) 3996/    1326 : 3E C9               		ld 	a,zopcRet
(1) 3997/    1328 : 32 08 00            		ld	(dac_me),a
(1) 3998/    132B : 3E C9               		ld 	a,zopcRet
(1) 3999/    132D : 32 20 00            		ld	(dac_fill),a
(1) 4000/    1330 : C9                  		ret
(1) 4001/    1331 :                     
(1) 4002/    1331 :                     ; --------------------------------------------------------
(1) 4003/    1331 :                     ; dac_play
(1) 4004/    1331 :                     ;
(1) 4005/    1331 :                     ; Plays a new sample
(1) 4006/    1331 :                     ;
(1) 4007/    1331 :                     ; NOTE:
(1) 4008/    1331 :                     ; Set wave_Flags and wave_Pitch externally
(1) 4009/    1331 :                     ; getting here.
(1) 4010/    1331 :                     ; --------------------------------------------------------
(1) 4011/    1331 :                     
(1) 4012/    1331 :                     dac_play:
(1) 4013/    1331 : F3                  		di
(1) 4014/    1332 : CD 1C 13            		call	dac_off
(1) 4015/    1335 : D9                  		exx				; flip exx regs
(1) 4016/    1336 : 01 1D 00            		ld	bc,dWaveBuff>>8		; bc - WAVFIFO MSB
(1) 4017/    1339 : ED 5B 92 1F         		ld	de,(wave_Pitch)		; de - Pitch
(1) 4018/    133D : 21 00 00            		ld	hl,(dWaveBuff&0FFh)<<8	; hl - WAVFIFO LSB pointer (xx.00)
(1) 4019/    1340 : D9                  		exx				; move them back
(1) 4020/    1341 : 2A 89 1F            		ld	hl,(wave_Start)
(1) 4021/    1344 : 3A 8B 1F            		ld 	a,(wave_Start+2)
(1) 4022/    1347 : 22 98 1F            		ld	(dDacPntr),hl
(1) 4023/    134A : 32 9A 1F            		ld	(dDacPntr+2),a
(1) 4024/    134D : 2A 8C 1F            		ld	hl,(wave_Len)
(1) 4025/    1350 : 3A 8E 1F            		ld 	a,(wave_Len+2)
(1) 4026/    1353 : 22 9B 1F            		ld	(dDacCntr),hl
(1) 4027/    1356 : 32 9D 1F            		ld	(dDacCntr+2),a
(1) 4028/    1359 : AF                  		xor	a
(1) 4029/    135A : 32 97 1F            		ld	(dDacFifoMid),a
(1) 4030/    135D : CD 65 13            		call	dac_refill
(1) 4031/    1360 : CD 07 13            		call	dac_on
(1) 4032/    1363 : FB                  		ei
(1) 4033/    1364 : C9                  		ret
(1) 4034/    1365 :                     
(1) 4035/    1365 :                     ; --------------------------------------------------------
(1) 4036/    1365 :                     
(1) 4037/    1365 :                     dac_refill:
(1) 4038/    1365 : CF                  		rst	8
(1) 4039/    1366 : C5                  		push	bc
(1) 4040/    1367 : D5                  		push	de
(1) 4041/    1368 : E5                  		push	hl
(1) 4042/    1369 : 3A 94 1F            		ld	a,(wave_Flags)	; Already finished?
(1) 4043/    136C : FE 07               		cp	111b
(1) 4044/    136E : D2 24 14            		jp	nc,.dacfill_end
(1) 4045/    1371 : 3A 9D 1F            		ld	a,(dDacCntr+2)	; Last bytes
(1) 4046/    1374 : 2A 9B 1F            		ld	hl,(dDacCntr)
(1) 4047/    1377 : 01 80 00            		ld	bc,80h
(1) 4048/    137A : 37                  		scf
(1) 4049/    137B : 3F                  		ccf
(1) 4050/    137C : ED 42               		sbc	hl,bc
(1) 4051/    137E : DE 00               		sbc	a,0
(1) 4052/    1380 : 32 9D 1F            		ld	(dDacCntr+2),a
(1) 4053/    1383 : 22 9B 1F            		ld	(dDacCntr),hl
(1) 4054/    1386 : 16 1D               		ld	d,dWaveBuff>>8
(1) 4055/    1388 : B7                  		or	a
(1) 4056/    1389 : FA B3 13            		jp	m,.dac_over
(1) 4057/    138C : 3A 97 1F            		ld	a,(dDacFifoMid)	; Update halfway value
(1) 4058/    138F : 5F                  		ld	e,a
(1) 4059/    1390 : C6 80               		add 	a,80h
(1) 4060/    1392 : 32 97 1F            		ld	(dDacFifoMid),a
(1) 4061/    1395 : 2A 98 1F            		ld	hl,(dDacPntr)
(1) 4062/    1398 : 3A 9A 1F            		ld	a,(dDacPntr+2)
(1) 4063/    139B : CD D2 10            		call	transferRom	; *** ROM ACCESS ***
(1) 4064/    139E : 2A 98 1F            		ld	hl,(dDacPntr)
(1) 4065/    13A1 : 3A 9A 1F            		ld	a,(dDacPntr+2)
(1) 4066/    13A4 : 01 80 00            		ld	bc,80h
(1) 4067/    13A7 : 09                  		add	hl,bc
(1) 4068/    13A8 : CE 00               		adc	a,0
(1) 4069/    13AA : 22 98 1F            		ld	(dDacPntr),hl
(1) 4070/    13AD : 32 9A 1F            		ld	(dDacPntr+2),a
(1) 4071/    13B0 : C3 27 14            		jp	.dacfill_ret
(1) 4072/    13B3 :                     
(1) 4073/    13B3 :                     ; NOTE:
(1) 4074/    13B3 :                     ; This doesn't finish at the exact END point.
(1) 4075/    13B3 :                     .dac_over:
(1) 4076/    13B3 : 16 1D               		ld	d,dWaveBuff>>8
(1) 4077/    13B5 : 3A 94 1F            		ld	a,(wave_Flags)	; LOOP enabled?
(1) 4078/    13B8 : E6 01               		and	001b
(1) 4079/    13BA : C2 DD 13            		jp	nz,.dacfill_loop
(1) 4080/    13BD : 7D                  		ld	a,l
(1) 4081/    13BE : C6 80               		add	a,80h
(1) 4082/    13C0 : 4F                  		ld	c,a
(1) 4083/    13C1 : 06 00               		ld	b,0
(1) 4084/    13C3 : C5                  		push	bc
(1) 4085/    13C4 : 3A 97 1F            		ld	a,(dDacFifoMid)
(1) 4086/    13C7 : 5F                  		ld	e,a
(1) 4087/    13C8 : C6 80               		add	a,80h
(1) 4088/    13CA : 32 97 1F            		ld	(dDacFifoMid),a
(1) 4089/    13CD : C1                  		pop	bc
(1) 4090/    13CE : 79                  		ld	a,c
(1) 4091/    13CF : B0                  		or	b
(1) 4092/    13D0 : 28 52               		jr	z,.dacfill_end
(1) 4093/    13D2 : 2A 98 1F            		ld	hl,(dDacPntr)
(1) 4094/    13D5 : 3A 9A 1F            		ld	a,(dDacPntr+2)
(1) 4095/    13D8 : CD D2 10            		call	transferRom	; *** ROM ACCESS ***
(1) 4096/    13DB : 18 47               		jr	.dacfill_end
(1) 4097/    13DD :                     .dacfill_loop:
(1) 4098/    13DD :                     	; loop sample
(1) 4099/    13DD : C5                  		push	bc
(1) 4100/    13DE : D5                  		push	de
(1) 4101/    13DF : 3A 91 1F            		ld	a,(wave_Loop+2)
(1) 4102/    13E2 : 4F                  		ld	c,a
(1) 4103/    13E3 : ED 5B 8F 1F         		ld	de,(wave_Loop)
(1) 4104/    13E7 : 2A 89 1F            		ld	hl,(wave_Start)
(1) 4105/    13EA : 3A 8B 1F            		ld 	a,(wave_Start+2)
(1) 4106/    13ED : 81                  		add	a,c
(1) 4107/    13EE : 19                  		add	hl,de
(1) 4108/    13EF : CE 00               		adc	a,0
(1) 4109/    13F1 : 22 98 1F            		ld	(dDacPntr),hl
(1) 4110/    13F4 : 32 9A 1F            		ld	(dDacPntr+2),a
(1) 4111/    13F7 : 2A 8C 1F            		ld	hl,(wave_Len)
(1) 4112/    13FA : 3A 8E 1F            		ld 	a,(wave_Len+2)
(1) 4113/    13FD : 91                  		sub	a,c
(1) 4114/    13FE : 37                  		scf
(1) 4115/    13FF : 3F                  		ccf
(1) 4116/    1400 : ED 52               		sbc	hl,de
(1) 4117/    1402 : DE 00               		sbc	a,0
(1) 4118/    1404 : 22 9B 1F            		ld	(dDacCntr),hl
(1) 4119/    1407 : 32 9D 1F            		ld	(dDacCntr+2),a
(1) 4120/    140A : D1                  		pop	de
(1) 4121/    140B : C1                  		pop	bc
(1) 4122/    140C : 78                  		ld	a,b
(1) 4123/    140D : B1                  		or	c
(1) 4124/    140E : 28 17               		jr	z,.dacfill_ret
(1) 4125/    1410 : 3A 97 1F            		ld	a,(dDacFifoMid)
(1) 4126/    1413 : 5F                  		ld	e,a
(1) 4127/    1414 : C6 80               		add	a,80h
(1) 4128/    1416 : 32 97 1F            		ld	(dDacFifoMid),a
(1) 4129/    1419 : 2A 98 1F            		ld	hl,(dDacPntr)
(1) 4130/    141C : 3A 9A 1F            		ld	a,(dDacPntr+2)
(1) 4131/    141F : CD D2 10            		call	transferRom	; *** ROM ACCESS ***
(1) 4132/    1422 : 18 03               		jr	.dacfill_ret
(1) 4133/    1424 :                     .dacfill_end:
(1) 4134/    1424 : CD 1C 13            		call	dac_off		; DAC finished
(1) 4135/    1427 :                     .dacfill_ret:
(1) 4136/    1427 : E1                  		pop	hl
(1) 4137/    1428 : D1                  		pop	de
(1) 4138/    1429 : C1                  		pop	bc
(1) 4139/    142A : C9                  		ret
(1) 4140/    142B :                     
(1) 4141/    142B :                     ; ----------------------------------------------------------------
(1) 4142/    142B :                     ; Two purposes:
(1) 4143/    142B :                     ;
(1) 4144/    142B :                     ; Set the BANK to the very last part of memory for the
(1) 4145/    142B :                     ; transferRom to read from RAM
(1) 4146/    142B :                     ;
(1) 4147/    142B :                     ; On 32X, sets the bank out of the ROM reading areas due
(1) 4148/    142B :                     ; to a conflict with the PSG
(1) 4149/    142B :                     ;
(1) 4150/    142B :                     ; Uses:
(1) 4151/    142B :                     ; hl,b
(1) 4152/    142B :                     ; ----------------------------------------------------------------
(1) 4153/    142B :                     
(1) 4154/    142B :                     gema_lastbank:
(1) 4155/    142B : 21 00 60            		ld	hl,6000h
(1) 4156/    142E : 06 09               		ld	b,9		; 9 bits
(1) 4157/    1430 :                     .write:
(1) 4158/    1430 : 36 01               		ld	(hl),1
(1) 4159/    1432 : 10 FC               		djnz	.write
(1) 4160/    1434 : CF                  		rst	8
(1) 4161/    1435 : C9                  		ret
(1) 4162/    1436 :                     
(1) 4163/    1436 :                     ; ====================================================================
(1) 4164/    1436 :                     ; ----------------------------------------------------------------
(1) 4165/    1436 :                     ; Tables
(1) 4166/    1436 :                     ; ----------------------------------------------------------------
(1) 4167/    1436 :                     
(1) 4168/    1436 : 84 02               fmFreq_List:	dw 644
(1) 4169/    1438 : A9 02               		dw 681
(1) 4170/    143A : D2 02               		dw 722
(1) 4171/    143C : FD 02               		dw 765
(1) 4172/    143E : 2A 03               		dw 810
(1) 4173/    1440 : 5A 03               		dw 858
(1) 4174/    1442 : 8E 03               		dw 910
(1) 4175/    1444 : C4 03               		dw 964
(1) 4176/    1446 : FD 03               		dw 1021
(1) 4177/    1448 : 39 04               		dw 1081
(1) 4178/    144A : 7A 04               		dw 1146
(1) 4179/    144C : BE 04               		dw 1214
(1) 4180/    144E :                     psgFreq_List:
(1) 4181/    144E :                     ; 		dw -1		; C-0 00
(1) 4182/    144E :                     ; 		dw -1
(1) 4183/    144E :                     ; 		dw -1
(1) 4184/    144E :                     ; 		dw -1
(1) 4185/    144E :                     ; 		dw -1
(1) 4186/    144E :                     ; 		dw -1
(1) 4187/    144E :                     ; 		dw -1
(1) 4188/    144E :                     ; 		dw -1
(1) 4189/    144E :                     ; 		dw -1
(1) 4190/    144E :                     ; 		dw -1
(1) 4191/    144E :                     ; 		dw -1
(1) 4192/    144E :                     ; 		dw -1
(1) 4193/    144E :                     ; 		dw -1		; C-1 0C
(1) 4194/    144E :                     ; 		dw -1
(1) 4195/    144E :                     ; 		dw -1
(1) 4196/    144E :                     ; 		dw -1
(1) 4197/    144E :                     ; 		dw -1
(1) 4198/    144E :                     ; 		dw -1
(1) 4199/    144E :                     ; 		dw -1
(1) 4200/    144E :                     ; 		dw -1
(1) 4201/    144E :                     ; 		dw -1
(1) 4202/    144E :                     ; 		dw -1
(1) 4203/    144E :                     ; 		dw -1
(1) 4204/    144E :                     ; 		dw -1
(1) 4205/    144E :                     ; 		dw -1		; C-2 18
(1) 4206/    144E :                     ; 		dw -1
(1) 4207/    144E :                     ; 		dw -1
(1) 4208/    144E :                     ; 		dw -1
(1) 4209/    144E :                     ; 		dw -1
(1) 4210/    144E :                     ; 		dw -1
(1) 4211/    144E :                     ; 		dw -1
(1) 4212/    144E :                     ; 		dw -1
(1) 4213/    144E :                     ; 		dw -1
(1) 4214/    144E :                     ; 		dw -1
(1) 4215/    144E :                     ; 		dw -1
(1) 4216/    144E :                     ; 		dw -1
(1) 4217/    144E : FF FF               		dw -1		; C-3 24
(1) 4218/    1450 : FF FF               		dw -1
(1) 4219/    1452 : FF FF               		dw -1
(1) 4220/    1454 : FF FF               		dw -1
(1) 4221/    1456 : FF FF               		dw -1
(1) 4222/    1458 : FF FF               		dw -1
(1) 4223/    145A : FF FF               		dw -1
(1) 4224/    145C : FF FF               		dw -1
(1) 4225/    145E : FF FF               		dw -1
(1) 4226/    1460 : F8 03               		dw 3F8h
(1) 4227/    1462 : BF 03               		dw 3BFh
(1) 4228/    1464 : 89 03               		dw 389h
(1) 4229/    1466 : 56 03               		dw 356h		; C-4 30
(1) 4230/    1468 : 26 03               		dw 326h
(1) 4231/    146A : F9 02               		dw 2F9h
(1) 4232/    146C : CE 02               		dw 2CEh
(1) 4233/    146E : A5 02               		dw 2A5h
(1) 4234/    1470 : 80 02               		dw 280h
(1) 4235/    1472 : 5C 02               		dw 25Ch
(1) 4236/    1474 : 3A 02               		dw 23Ah
(1) 4237/    1476 : 1A 02               		dw 21Ah
(1) 4238/    1478 : FB 01               		dw 1FBh
(1) 4239/    147A : DF 01               		dw 1DFh
(1) 4240/    147C : C4 01               		dw 1C4h
(1) 4241/    147E : AB 01               		dw 1ABh		; C-5 3C
(1) 4242/    1480 : 93 01               		dw 193h
(1) 4243/    1482 : 7D 01               		dw 17Dh
(1) 4244/    1484 : 67 01               		dw 167h
(1) 4245/    1486 : 53 01               		dw 153h
(1) 4246/    1488 : 40 01               		dw 140h
(1) 4247/    148A : 2E 01               		dw 12Eh
(1) 4248/    148C : 1D 01               		dw 11Dh
(1) 4249/    148E : 0D 01               		dw 10Dh
(1) 4250/    1490 : FE 00               		dw 0FEh
(1) 4251/    1492 : EF 00               		dw 0EFh
(1) 4252/    1494 : E2 00               		dw 0E2h
(1) 4253/    1496 : D6 00               		dw 0D6h		; C-6 48
(1) 4254/    1498 : C9 00               		dw 0C9h
(1) 4255/    149A : BE 00               		dw 0BEh
(1) 4256/    149C : B4 00               		dw 0B4h
(1) 4257/    149E : A9 00               		dw 0A9h
(1) 4258/    14A0 : A0 00               		dw 0A0h
(1) 4259/    14A2 : 97 00               		dw 097h
(1) 4260/    14A4 : 8F 00               		dw 08Fh
(1) 4261/    14A6 : 87 00               		dw 087h
(1) 4262/    14A8 : 7F 00               		dw 07Fh
(1) 4263/    14AA : 78 00               		dw 078h
(1) 4264/    14AC : 71 00               		dw 071h
(1) 4265/    14AE : 6B 00               		dw 06Bh		; C-7 54
(1) 4266/    14B0 : 65 00               		dw 065h
(1) 4267/    14B2 : 5F 00               		dw 05Fh
(1) 4268/    14B4 : 5A 00               		dw 05Ah
(1) 4269/    14B6 : 55 00               		dw 055h
(1) 4270/    14B8 : 50 00               		dw 050h
(1) 4271/    14BA : 4B 00               		dw 04Bh
(1) 4272/    14BC : 47 00               		dw 047h
(1) 4273/    14BE : 43 00               		dw 043h
(1) 4274/    14C0 : 40 00               		dw 040h
(1) 4275/    14C2 : 3C 00               		dw 03Ch
(1) 4276/    14C4 : 39 00               		dw 039h
(1) 4277/    14C6 : 36 00               		dw 036h		; C-8 60
(1) 4278/    14C8 : 33 00               		dw 033h
(1) 4279/    14CA : 30 00               		dw 030h
(1) 4280/    14CC : 2D 00               		dw 02Dh
(1) 4281/    14CE : 2B 00               		dw 02Bh
(1) 4282/    14D0 : 28 00               		dw 028h
(1) 4283/    14D2 : 26 00               		dw 026h
(1) 4284/    14D4 : 24 00               		dw 024h
(1) 4285/    14D6 : 22 00               		dw 022h
(1) 4286/    14D8 : 20 00               		dw 020h
(1) 4287/    14DA : 1F 00               		dw 01Fh
(1) 4288/    14DC : 1D 00               		dw 01Dh
(1) 4289/    14DE : 1B 00               		dw 01Bh		; C-9 6C
(1) 4290/    14E0 : 1A 00               		dw 01Ah
(1) 4291/    14E2 : 18 00               		dw 018h
(1) 4292/    14E4 : 17 00               		dw 017h
(1) 4293/    14E6 : 16 00               		dw 016h
(1) 4294/    14E8 : 15 00               		dw 015h
(1) 4295/    14EA : 13 00               		dw 013h
(1) 4296/    14EC : 12 00               		dw 012h
(1) 4297/    14EE : 11 00               		dw 011h
(1) 4298/    14F0 : 10 00                		dw 010h
(1) 4299/    14F2 : 09 00                		dw 009h
(1) 4300/    14F4 : 08 00                		dw 008h
(1) 4301/    14F6 : 06 00               		dw 006h
(1) 4302/    14F8 : 94 19               fmcach_list:	dw fmcach_1
(1) 4303/    14FA : BC 19               		dw fmcach_2
(1) 4304/    14FC : E4 19               		dw fmcach_3
(1) 4305/    14FE : 00 00               		dw 0		; <-- skipped
(1) 4306/    1500 : 0C 1A               		dw fmcach_4
(1) 4307/    1502 : 34 1A               		dw fmcach_5
(1) 4308/    1504 : 5C 1A               		dw fmcach_6
(1) 4309/    1506 :                     
(1) 4310/    1506 :                     ; ----------------------------------------
(1) 4311/    1506 :                     ; DAC and PWM
(1) 4312/    1506 :                     ;
(1) 4313/    1506 :                     ; DAC base: 16000hz
(1) 4314/    1506 :                     ; PWM base: 22050hz
(1) 4315/    1506 :                     ; ----------------------------------------
(1) 4316/    1506 :                     wavFreq_List:
(1) 4317/    1506 :                     	;   C     C#    D     D#    E     F     F#    G     G#    A     A#    B
(1) 4318/    1506 :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-0
(1) 4319/    1506 :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-1
(1) 4320/    1506 :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0036h,003Bh	; x-2
(1) 4321/    1506 : 3E 00 43 00 46 00   	dw 003Eh,0043h,0046h,0049h,004Eh,0054h,0058h,005Eh,0063h,0068h,0070h,0075h	; x-3
             150C : 49 00 4E 00 54 00 
             1512 : 58 00 5E 00 63 00 
             1518 : 68 00 70 00 75 00 
(1) 4322/    151E : 85 00 87 00 8C 00   	dw 0085h,0087h,008Ch,009Ah,00A4h,00ADh,00B2h,00C0h,00CCh,00D7h,00E6h,00F0h	; x-4
             1524 : 9A 00 A4 00 AD 00 
             152A : B2 00 C0 00 CC 00 
             1530 : D7 00 E6 00 F0 00 
(1) 4323/    1536 : 00 01 10 01 20 01   	dw 0100h,0110h,0120h,012Eh,0147h,015Ah,016Ah,017Fh,0191h,01ACh,01C2h,01E0h	; x-5
             153C : 2E 01 47 01 5A 01 
             1542 : 6A 01 7F 01 91 01 
             1548 : AC 01 C2 01 E0 01 
(1) 4324/    154E : F8 01 10 02 40 02   	dw 01F8h,0210h,0240h,0260h,0280h,02A0h,02D0h,02F8h,0320h,0350h,0380h,03C0h	; x-6
             1554 : 60 02 80 02 A0 02 
             155A : D0 02 F8 02 20 03 
             1560 : 50 03 80 03 C0 03 
(1) 4325/    1566 : 00 01 00 01 00 01   	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-7
             156C : 00 01 00 01 00 01 
             1572 : 00 01 00 01 00 01 
             1578 : 00 01 00 01 00 01 
(1) 4326/    157E : 00 01 00 01 00 01   	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-8
             1584 : 00 01 00 01 00 01 
             158A : 00 01 00 01 00 01 
             1590 : 00 01 00 01 00 01 
(1) 4327/    1596 : 00 01 00 01 00 01   	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-9
             159C : 00 01 00 01 00 01 
             15A2 : 00 01 00 01 00 01 
             15A8 : 00 01 00 01 00 01 
(1) 4328/    15AE :                     
(1) 4329/    15AE :                     ; ----------------------------------------
(1) 4330/    15AE :                     ; SegaCD PCM ONLY
(1) 4331/    15AE :                     ;
(1) 4332/    15AE :                     ; PCM base: 32000hz
(1) 4333/    15AE :                     ; ----------------------------------------
(1) 4334/    15AE :                     wavFreq_CdPcm:
(1) 4335/    15AE :                     	;     C     C#     D      D#     E      F      F#     G      G#     A      A#     B
(1) 4336/    15AE :                     ; 	dw  0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h	; x-0
(1) 4337/    15AE :                     ; 	dw  0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h	; x-1
(1) 4338/    15AE :                     ; 	dw  0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h	; x-2  4000 unchecked
(1) 4339/    15AE : F8 01 14 02 3C 02   	dw  01F8h, 0214h, 023Ch, 0258h, 027Ch, 02A0h, 02C8h, 02F4h, 031Ch, 0348h, 037Ch, 03B0h	; x-3  8000 ok
             15B4 : 58 02 7C 02 A0 02 
             15BA : C8 02 F4 02 1C 03 
             15C0 : 48 03 7C 03 B0 03 
(1) 4340/    15C6 : F0 03 24 04 68 04   	dw  03F0h, 0424h, 0468h, 04A8h, 04ECh, 0540h, 0590h, 05E4h, 063Ch, 0698h, 0704h, 0760h	; x-4 16000 ok
             15CC : A8 04 EC 04 40 05 
             15D2 : 90 05 E4 05 3C 06 
             15D8 : 98 06 04 07 60 07 
(1) 4341/    15DE : DC 07 48 08 D4 08   	dw  07DCh, 0848h, 08D4h, 0960h, 09F0h, 0A64h, 0B04h, 0BAAh, 0C60h, 0D18h, 0DE4h, 0EB6h	; x-5 32000 ok
             15E4 : 60 09 F0 09 64 0A 
             15EA : 04 0B AA 0B 60 0C 
             15F0 : 18 0D E4 0D B6 0E 
(1) 4342/    15F6 : B0 0F 74 10 84 11   	dw  0FB0h, 1074h, 1184h, 1280h, 139Ch, 14C8h, 1624h, 174Ch, 18DCh, 1A38h, 1BE0h, 1D94h	; x-6 64000 unstable
             15FC : 80 12 9C 13 C8 14 
             1602 : 24 16 4C 17 DC 18 
             1608 : 38 1A E0 1B 94 1D 
(1) 4343/    160E : 64 1F FC 20 30 23   	dw  1F64h, 20FCh, 2330h, 2524h, 2750h, 29B4h, 2C63h, 2F63h, 31E0h, 347Bh, 377Bh, 3B41h	; x-7 128000 bad
             1614 : 24 25 50 27 B4 29 
             161A : 63 2C 63 2F E0 31 
             1620 : 7B 34 7B 37 41 3B 
(1) 4344/    1626 : E8 3E 06 42 84 46   	dw  3EE8h, 4206h, 4684h, 4A5Ah, 4EB5h, 5379h, 58E1h, 5DE0h, 63C0h, 68FFh, 6EFFh, 783Ch	; x-8 256000 bad
             162C : 5A 4A B5 4E 79 53 
             1632 : E1 58 E0 5D C0 63 
             1638 : FF 68 FF 6E 3C 78 
(1) 4345/    163E : C2 7F FC 83 14 8D   	dw  7FC2h, 83FCh, 8D14h, 9780h,0AA5Dh,0B1F9h,   -1 ,   -1 ,   -1 ,   -1 ,   -1 ,   -1 	; x-9 bad
             1644 : 80 97 5D AA F9 B1 
             164A : FF FF FF FF FF FF 
             1650 : FF FF FF FF FF FF 
(1) 4346/    1656 :                     
(1) 4347/    1656 :                     ; --------------------------------------------------------
(1) 4348/    1656 :                     ; Channel table struct:
(1) 4349/    1656 :                     ; 00  - DIRECT Linked channel from trkChnls
(1) 4350/    1656 :                     ; 02  - 00h-7Fh: Priority level / 80h+ Silence request (chip ID)
(1) 4351/    1656 :                     ; 03  - FREE
(1) 4352/    1656 :                     ; 05  - Chip index (YM2612: KEY index)
(1) 4353/    1656 :                     ; 06  - Frequency list index (YM2612: %oooiiiii oct|index)
(1) 4354/    1656 :                     ; 07  - Pitchbend add/sub
(1) 4355/    1656 :                     ; 08  - Current volume: 00-max
(1) 4356/    1656 :                     ; 09  - Stored effect setting
(1) 4357/    1656 :                     ; 0A  - FREE
(1) 4358/    1656 :                     ; 0B  - FREE
(1) 4359/    1656 :                     ; 0C+ - Misc. settings for the current chip
(1) 4360/    1656 :                     ; 10+ - Intrument data
(1) 4361/    1656 :                     ;
(1) 4362/    1656 :                     ; PSG   80h
(1) 4363/    1656 :                     ; PSGN  90h
(1) 4364/    1656 :                     ; FM   0A0h
(1) 4365/    1656 :                     ; FM3  0B0h
(1) 4366/    1656 :                     ; DAC  0C0h
(1) 4367/    1656 :                     ; PCM  0D0h
(1) 4368/    1656 :                     ; PWM  0E0h
(1) 4369/    1656 :                     ; --------------------------------------------------------
(1) 4370/    1656 :                     
(1) 4371/    1656 : 10 00               tblList:	dw tblPSG-tblList		;  80h
(1) 4372/    1658 : 5A 80               		dw tblPSGN-tblList|8000h	;  90h *
(1) 4373/    165A : 72 00               		dw tblFM-tblList		; 0A0h
(1) 4374/    165C : D2 80               		dw tblFM3-tblList|8000h		; 0B0h *
(1) 4375/    165E : EA 80               		dw tblFM6-tblList|8000h		; 0C0h *
(1) 4376/    1660 : 04 01               		dw tblPCM-tblList		; 0D0h
(1) 4377/    1662 : C6 01               		dw tblPWM-tblList		; 0E0h
(1) 4378/    1664 : 00 00               		dw 0
(1) 4379/    1666 : 00 00 00 00 00 00   tblPSG:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             166C : 00 00             
(1) 4380/    166E : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1674 : 00 00             
(1) 4381/    1676 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             167C : 00 00             
(1) 4382/    167E : 00 00 00 00 00 01   		db 00h,00h,00h,00h,00h,01h,00h,00h	; Channel 2
             1684 : 00 00             
(1) 4383/    1686 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             168C : 00 00             
(1) 4384/    168E : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1694 : 00 00             
(1) 4385/    1696 : 00 00 00 00 00 02   		db 00h,00h,00h,00h,00h,02h,00h,00h	; Channel 3
             169C : 00 00             
(1) 4386/    169E : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             16A4 : 00 00             
(1) 4387/    16A6 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             16AC : 00 00             
(1) 4388/    16AE : FF FF               		dw -1	; end-of-list
(1) 4389/    16B0 : 00 00 00 00 00 03   tblPSGN:	db 00h,00h,00h,00h,00h,03h,00h,03h	; Noise
             16B6 : 00 03             
(1) 4390/    16B8 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             16BE : 00 00             
(1) 4391/    16C0 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             16C6 : 00 00             
(1) 4392/    16C8 : 00 00 00 00 00 00   tblFM:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             16CE : 00 00             
(1) 4393/    16D0 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             16D6 : 00 00             
(1) 4394/    16D8 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             16DE : 00 00             
(1) 4395/    16E0 : 00 00 00 00 00 01   		db 00h,00h,00h,00h,00h,01h,00h,00h	; Channel 2
             16E6 : 00 00             
(1) 4396/    16E8 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             16EE : 00 00             
(1) 4397/    16F0 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             16F6 : 00 00             
(1) 4398/    16F8 : 00 00 00 00 00 04   		db 00h,00h,00h,00h,00h,04h,00h,00h	; Channel 4 <--
             16FE : 00 00             
(1) 4399/    1700 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1706 : 00 00             
(1) 4400/    1708 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             170E : 00 00             
(1) 4401/    1710 : 00 00 00 00 00 05   		db 00h,00h,00h,00h,00h,05h,00h,00h	; Channel 5
             1716 : 00 00             
(1) 4402/    1718 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             171E : 00 00             
(1) 4403/    1720 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1726 : 00 00             
(1) 4404/    1728 : 00 00 00 00 00 02   tblFM3:		db 00h,00h,00h,00h,00h,02h,00h,00h	; Channel 3 <--
             172E : 00 00             
(1) 4405/    1730 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1736 : 00 00             
(1) 4406/    1738 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             173E : 00 00             
(1) 4407/    1740 : 00 00 00 00 00 06   tblFM6:		db 00h,00h,00h,00h,00h,06h,00h,00h	; Channel 6 <--
             1746 : 00 00             
(1) 4408/    1748 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             174E : 00 00             
(1) 4409/    1750 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1756 : 00 00             
(1) 4410/    1758 : FF FF               		dw -1	; end-of-list
(1) 4411/    175A : 00 00 00 00 00 00   tblPCM:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             1760 : 00 00             
(1) 4412/    1762 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1768 : 00 00             
(1) 4413/    176A : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1770 : 00 00             
(1) 4414/    1772 : 00 00 00 00 00 01   		db 00h,00h,00h,00h,00h,01h,00h,00h	; Channel 2
             1778 : 00 00             
(1) 4415/    177A : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1780 : 00 00             
(1) 4416/    1782 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1788 : 00 00             
(1) 4417/    178A : 00 00 00 00 00 02   		db 00h,00h,00h,00h,00h,02h,00h,00h	; Channel 3
             1790 : 00 00             
(1) 4418/    1792 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1798 : 00 00             
(1) 4419/    179A : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             17A0 : 00 00             
(1) 4420/    17A2 : 00 00 00 00 00 03   		db 00h,00h,00h,00h,00h,03h,00h,00h	; Channel 4
             17A8 : 00 00             
(1) 4421/    17AA : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             17B0 : 00 00             
(1) 4422/    17B2 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             17B8 : 00 00             
(1) 4423/    17BA : 00 00 00 00 00 04   		db 00h,00h,00h,00h,00h,04h,00h,00h	; Channel 5
             17C0 : 00 00             
(1) 4424/    17C2 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             17C8 : 00 00             
(1) 4425/    17CA : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             17D0 : 00 00             
(1) 4426/    17D2 : 00 00 00 00 00 05   		db 00h,00h,00h,00h,00h,05h,00h,00h	; Channel 6
             17D8 : 00 00             
(1) 4427/    17DA : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             17E0 : 00 00             
(1) 4428/    17E2 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             17E8 : 00 00             
(1) 4429/    17EA : 00 00 00 00 00 06   		db 00h,00h,00h,00h,00h,06h,00h,00h	; Channel 7
             17F0 : 00 00             
(1) 4430/    17F2 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             17F8 : 00 00             
(1) 4431/    17FA : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1800 : 00 00             
(1) 4432/    1802 : 00 00 00 00 00 07   		db 00h,00h,00h,00h,00h,07h,00h,00h	; Channel 7
             1808 : 00 00             
(1) 4433/    180A : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1810 : 00 00             
(1) 4434/    1812 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1818 : 00 00             
(1) 4435/    181A : FF FF               		dw -1	; end-of-list
(1) 4436/    181C : 00 00 00 00 00 00   tblPWM:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             1822 : 00 00             
(1) 4437/    1824 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             182A : 00 00             
(1) 4438/    182C : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1832 : 00 00             
(1) 4439/    1834 : 00 00 00 00 00 01   		db 00h,00h,00h,00h,00h,01h,00h,00h	; Channel 2
             183A : 00 00             
(1) 4440/    183C : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1842 : 00 00             
(1) 4441/    1844 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             184A : 00 00             
(1) 4442/    184C : 00 00 00 00 00 02   		db 00h,00h,00h,00h,00h,02h,00h,00h	; Channel 3
             1852 : 00 00             
(1) 4443/    1854 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             185A : 00 00             
(1) 4444/    185C : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1862 : 00 00             
(1) 4445/    1864 : 00 00 00 00 00 03   		db 00h,00h,00h,00h,00h,03h,00h,00h	; Channel 4
             186A : 00 00             
(1) 4446/    186C : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1872 : 00 00             
(1) 4447/    1874 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             187A : 00 00             
(1) 4448/    187C : 00 00 00 00 00 04   		db 00h,00h,00h,00h,00h,04h,00h,00h	; Channel 5
             1882 : 00 00             
(1) 4449/    1884 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             188A : 00 00             
(1) 4450/    188C : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1892 : 00 00             
(1) 4451/    1894 : 00 00 00 00 00 05   		db 00h,00h,00h,00h,00h,05h,00h,00h	; Channel 6
             189A : 00 00             
(1) 4452/    189C : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             18A2 : 00 00             
(1) 4453/    18A4 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             18AA : 00 00             
(1) 4454/    18AC : 00 00 00 00 00 06   		db 00h,00h,00h,00h,00h,06h,00h,00h	; Channel 7
             18B2 : 00 00             
(1) 4455/    18B4 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             18BA : 00 00             
(1) 4456/    18BC : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             18C2 : 00 00             
(1) 4457/    18C4 : FF FF               		dw -1	; end-of-list
(1) 4458/    18C6 :                     
(1) 4459/    18C6 :                     ; ====================================================================
(1) 4460/    18C6 :                     ; ----------------------------------------------------------------
(1) 4461/    18C6 :                     ; MASTER buffers list
(1) 4462/    18C6 :                     ;
(1) 4463/    18C6 :                     ; dw track_buffer
(1) 4464/    18C6 :                     ; dw channel_list,block_cache,header_cache,track_cache
(1) 4465/    18C6 :                     ;
(1) 4466/    18C6 :                     ; (track_cache: 1BIT SIZES ONLY, ALIGNED)
(1) 4467/    18C6 :                     ; ----------------------------------------------------------------
(1) 4468/    18C6 :                     
(1) 4469/    18C6 :                     nikona_BuffList:
(1) 4470/    18C6 : E4 1A 98 1B 84 1A   	dw trkBuff_0,trkBlks_0,trkHdrs_0,trkCach_0
             18CC : 00 1F             
(1) 4471/    18CE : 20 1B A0 1B A4 1A   	dw trkBuff_1,trkBlks_1,trkHdrs_1,trkCach_1
             18D4 : 20 1F             
(1) 4472/    18D6 : 5C 1B A8 1B C4 1A   	dw trkBuff_2,trkBlks_2,trkHdrs_2,trkCach_2
             18DC : 40 1F             
(1) 4473/    18DE :                     ; 	dw trkBuff_3,trkBlks_3,trkHdrs_3,trkCach_3
(1) 4474/    18DE :                     nikona_BuffList_e:
(1) 4475/    18DE : FF FF               	dw -1
(1) 4476/    18E0 :                     
(1) 4477/    18E0 :                     ; ====================================================================
(1) 4478/    18E0 :                     ; ----------------------------------------------------------------
(1) 4479/    18E0 :                     ; Buffer section
(1) 4480/    18E0 :                     ; ----------------------------------------------------------------
(1) 4481/    18E0 :                     
(1) 4482/    18E0 : 00 00 00 00 00 00   pcmcom:	db 00h,00h,00h,00h,00h,00h,00h,00h	; 0 - Playback bits: %0000PCOK /Pitchbend/keyCut/keyOff/KeyOn
             18E6 : 00 00             
(1) 4483/    18E8 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 8 - Pitch MSB
             18EE : 00 00             
(1) 4484/    18F0 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 16 - Pitch LSB
             18F6 : 00 00             
(1) 4485/    18F8 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 24 - Volume
             18FE : 00 00             
(1) 4486/    1900 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 32 - Panning %RRRRLLLL
             1906 : 00 00             
(1) 4487/    1908 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 40 - LoopEnable bit | 24-bit sample location in Sub-CPU area
             190E : 00 00             
(1) 4488/    1910 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 48
             1916 : 00 00             
(1) 4489/    1918 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 56
             191E : 00 00             
(1) 4490/    1920 :                     
(1) 4491/    1920 : 00 00 00 00 00 00   pwmcom:	db 00h,00h,00h,00h,00h,00h,00h,00h	; 0 - Playback bits: %0000PCOK Pitchbend/keyCut/keyOff/KeyOn
             1926 : 00 00             
(1) 4492/    1928 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 8 - Volume | Pitch MSB
             192E : 00 00             
(1) 4493/    1930 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 16 - Pitch LSB
             1936 : 00 00             
(1) 4494/    1938 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 24 - Flags+MSB bits of sample %SlLRxxxx Stereo/Loop/Left/Right
             193E : 00 00             
(1) 4495/    1940 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 32 -
             1946 : 00 00             
(1) 4496/    1948 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h
             194E : 00 00             
(1) 4497/    1950 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h
             1956 : 00 00             
(1) 4498/    1958 :                     
(1) 4499/    1958 : 00 00 00 00         psgcom:	db 00h,00h,00h,00h	;  0 - command 1 = key on, 2 = key off, 4 = stop snd
(1) 4500/    195C : FF FF FF FF         	db -1, -1, -1, -1	;  4 - output level attenuation (%llll.0000, -1 = silent)
(1) 4501/    1960 : 00 00 00 00         	db 00h,00h,00h,00h	;  8 - attack rate (START)
(1) 4502/    1964 : 00 00 00 00         	db 00h,00h,00h,00h	; 12 - decay rate
(1) 4503/    1968 : 00 00 00 00         	db 00h,00h,00h,00h	; 16 - sustain level attenuation (MAXIMUM)
(1) 4504/    196C : 00 00 00 00         	db 00h,00h,00h,00h	; 20 - release rate
(1) 4505/    1970 : 00 00 00 00         	db 00h,00h,00h,00h	; 24 - envelope mode 0 = off, 1 = attack, 2 = decay, 3 = sustain
(1) 4506/    1974 : 00 00 00 00         	db 00h,00h,00h,00h	; 28 - freq bottom 4 bits
(1) 4507/    1978 : 00 00 00 00         	db 00h,00h,00h,00h	; 32 - freq upper 6 bits
(1) 4508/    197C : 00 00 00 00         	db 00h,00h,00h,00h	; 36 - attack level attenuation
(1) 4509/    1980 : 00 00 00 00         	db 00h,00h,00h,00h	; 40 - flags to indicate hardware should be updated
(1) 4510/    1984 : 00 00 00 00         	db 00h,00h,00h,00h	; 44 - timer for sustain
(1) 4511/    1988 : 00 00 00 00         	db 00h,00h,00h,00h	; 48 - MAX Volume
(1) 4512/    198C : 00 00 00 00         	db 00h,00h,00h,00h	; 52 - Vibrato value
(1) 4513/    1990 : 00 00 00 00         	db 00h,00h,00h,00h	; 56 - General timer
(1) 4514/    1994 :                     ; FM instrument storage
(1) 4515/    1994 :                     fmcach_1	ds 28h
(1) 4516/    19BC :                     fmcach_2	ds 28h
(1) 4517/    19E4 :                     fmcach_3	ds 28h
(1) 4518/    1A0C :                     fmcach_4	ds 28h
(1) 4519/    1A34 :                     fmcach_5	ds 28h
(1) 4520/    1A5C :                     fmcach_6	ds 28h
(1) 4521/    1A84 :                     
(1) 4522/    1A84 :                     ; --------------------------------------------------------
(1) 4523/    1A84 :                     ; * USER customizable section *
(1) 4524/    1A84 :                     ;
(1) 4525/    1A84 :                     ; trkCach's MUST BE 00h ALIGNED.
(1) 4526/    1A84 :                     ; --------------------------------------------------------
(1) 4527/    1A84 :                     
(1) 4528/    1A84 :                     trkHdrs_0	ds 8*4			; dw point,rowcntr
(1) 4529/    1AA4 :                     trkHdrs_1	ds 8*4
(1) 4530/    1AC4 :                     trkHdrs_2	ds 8*4
(1) 4531/    1AE4 :                     trkBuff_0	ds trk_ChnIndx+MAX_TRKINDX
(1) 4532/    1B20 :                     trkBuff_1	ds trk_ChnIndx+MAX_TRKINDX
(1) 4533/    1B5C :                     trkBuff_2	ds trk_ChnIndx+MAX_TRKINDX
(1) 4534/    1B98 :                     trkBlks_0	ds 8
(1) 4535/    1BA0 :                     trkBlks_1	ds 8
(1) 4536/    1BA8 :                     trkBlks_2	ds 8
(1) 4537/    1BB0 :                     
(1) 4538/    1BB0 :                     trkListCach	ds 8*3		; per track slot
(1) 4539/    1BC8 :                     instListOut	ds 8*3
(1) 4540/    1BE0 :                     
(1) 4541/    1BE0 :                     ; ====================================================================
(1) 4542/    1BE0 :                     ; ----------------------------------------------------------------
(1) 4543/    1BE0 :                     ; Special aligned buffers
(1) 4544/    1BE0 :                     ;
(1) 4545/    1BE0 :                     ; Located at 1D00h
(1) 4546/    1BE0 :                     ; ----------------------------------------------------------------
(1) 4547/    1BE0 :                     
(1) 4548/    1D00 :                     		org 1D00h
(1) 4549/    1D00 :                     dWaveBuff	ds 100h		; WAVE data buffer: 100h bytes, updates every 80h
(1) 4550/    1E00 :                     trkChnls	ds 8*MAX_TRKCHN
(1) 4551/    1F00 :                     trkCach_0	ds MAX_RCACH	; <--
(1) 4552/    1F20 :                     trkCach_1	ds MAX_RCACH
(1) 4553/    1F40 :                     trkCach_2	ds MAX_RCACH
(1) 4554/    1F60 :                     trkCach_3	ds MAX_RCACH
(1) 4555/    1F80 :                     
(1) 4556/    1F80 :                     ; --------------------------------------------------------
(1) 4557/    1F80 :                     
(1) 4558/    1F80 :                     ; last temporals...
(1) 4559/    1F80 : 00                  tickSpSet	db 0		; **
(1) 4560/    1F81 : 00                  tickFlag	db 0		; Tick flag from VBlank
(1) 4561/    1F82 : 00                  tickCnt		db 0		; ** Tick counter (PUT THIS AFTER tickFlag)
(1) 4562/    1F83 : 00                  psgHatMode	db 0		; Current PSGN mode
(1) 4563/    1F84 : 00                  fmSpecial	db 0		; copy of FM3 enable bit
(1) 4564/    1F85 : 00                  commZRead	db 0		; cmd fifo READ pointer (here)
(1) 4565/    1F86 : 00                  trkListPage	db 0
(1) 4566/    1F87 : 00                  marsUpd		db 0		; Flag to request a PWM transfer
(1) 4567/    1F88 : 00                  mcdUpd		db 0		; Flag to request a PCM transfer
(1) 4568/    1F89 : 00 00               wave_Start	dw 0		; START: 68k 24-bit pointer
(1) 4569/    1F8B : 00                  		db 0
(1) 4570/    1F8C : 00 00               wave_Len	dw 0		; LENGTH 24-bit
(1) 4571/    1F8E : 00                  		db 0
(1) 4572/    1F8F : 00 00               wave_Loop	dw 0		; LOOP POINT 24-bit
(1) 4573/    1F91 : 00                  		db 0
(1) 4574/    1F92 : 00 01               wave_Pitch	dw 0100h	; 01.00h
(1) 4575/    1F94 : 00                  wave_Flags	db 0		; WAVE playback flags (%10x: 1 loop / 0 no loop)
(1) 4576/    1F95 : 00                  wave_Priority	db 0
(1) 4577/    1F96 : 00                  currTickBits	db 0		; Current Tick/Subbeat flags (000000BTb B-beat, T-tick)
(1) 4578/    1F97 : 00                  dDacFifoMid	db 0		; WAVE play halfway refill flag (00h/80h)
(1) 4579/    1F98 : 00 00 00            dDacPntr	db 0,0,0	; WAVE play current ROM position
(1) 4580/    1F9B : 00 00 00            dDacCntr	db 0,0,0	; WAVE play length counter
(1) 4581/    1F9E : 00                  x68ksrclsb	db 0		; transferRom temporal LSB
(1) 4582/    1F9F : 00                  x68ksrcmid	db 0		; transferRom temporal MID
(1) 4583/    1FA0 : 00 00               sbeatAcc	dw 0		; Accumulates on each tick to trigger the sub beats
(1) 4584/    1FA2 : D5 00               sbeatPtck	dw 200+13	; Default global subbeats (-32 for PAL)
(1) 4585/    1FA4 :                     headerOut	ds 00Eh		; Temporal storage for 68k pointers
(1) 4586/    1FB2 :                     headerOut_e	ds 2		; reverse readpoint
(1) 4587/    1FB4 :                     sampleHead	ds 006h
(1) 4588/    1FBA :                     
(1) 4589/    1FBA :                     ; --------------------------------------------------------
(1) 4590/    1FBA :                     
(1) 4591/    3242 :                     		dephase
(1) 4592/    3242 :                     		cpu 68000		; [AS] Return to 68k
(1) 4593/    3242 :                     		padding off		; [AS] NO padding
(1) 4594/    3242 :                     		align 2
(1) 4595/    3242 :                     
     273/    3242 :                     Z80_CODE_END:
     279/    3242 :                     
     280/    3242 :                     ; ===========================================================================
     281/    3242 :                     ; ----------------------------------------------------------------
     282/    3242 :                     ; DATA section shared on both Cartridge or Disc
     283/    3242 :                     ; ----------------------------------------------------------------
     284/    3242 :                     
     285/    3242 :                     ; --------------------------------------------------------
     286/    3242 :                     ; CD/CD32X ISO header and files
     287/    3242 :                     ; --------------------------------------------------------
     288/    3242 :                     
     303/    3242 :                     
     304/    3242 :                     ; ====================================================================
     305/    3242 :                     ; --------------------------------------------------------
     306/    3242 :                     ; SEGA CD SUB-CPU data
     307/    3242 :                     ; --------------------------------------------------------
     308/    3242 :                     
     321/    3242 :                     
     322/    3242 :                     ; ----------------------------------------------------------------
     323/    3242 :                     ; SH2 code and shared data stored in SDRAM
     324/    3242 :                     ; ----------------------------------------------------------------
     325/    3242 :                     
     331/    3242 :                     MARS_RAMCODE:
     338/    3242 :                     MARS_RAMCODE_E:
     339/    3242 :                     
     340/    3242 :                     ; ====================================================================
     341/    3242 :                     ; --------------------------------------------------------
     342/    3242 :                     ; Screen modes
     343/    3242 :                     ;
     344/    3242 :                     ; These are stored as separate files on DISC
     345/    3242 :                     ;
     346/    3242 :                     ; Usage:
     347/    3242 :                     ; screen_code START_LABEL,END_LABEL,CODE_PATH
     348/    3242 :                     ; --------------------------------------------------------
     349/    3242 :                     
     350/    3242 : (MACRO)              	screen_code Md_Screen00,Md_Screen00_e,"game/screen_0/code.asm"
     350/    3242 :                     ; Md_Screen00:
     350/    3242 : =$3242               MD_SCREEN00 label *
     350/    3242 :                     mctopscrn:
     350/    3242 :                     mcscrn_s:
     350/    3242 :                             include "game/screen_0/code.asm";"game/screen_0/code.asm"
(1)    1/    3242 :                     ; ====================================================================
(1)    2/    3242 :                     ; ----------------------------------------------------------------
(1)    3/    3242 :                     ; SCREEN MODE 0
(1)    4/    3242 :                     ; ----------------------------------------------------------------
(1)    5/    3242 :                     
(1)    6/    3242 :                     ; ====================================================================
(1)    7/    3242 :                     ; ------------------------------------------------------
(1)    8/    3242 :                     ; Variables
(1)    9/    3242 :                     ; ------------------------------------------------------
(1)   10/    3242 :                     
(1)   11/    3242 : =$440                setVram_Mikami	equ $0440
(1)   12/    3242 : =$480                setVram_Sisi	equ $0480
(1)   13/    3242 :                     
(1)   14/    3242 :                     ; ====================================================================
(1)   15/    3242 :                     ; ------------------------------------------------------
(1)   16/    3242 :                     ; Structs
(1)   17/    3242 :                     ; ------------------------------------------------------
(1)   18/    3242 :                     
(1)   19/    3242 :                     ; 		strct 0
(1)   20/    3242 :                     ; strc_xpos	ds.w 1
(1)   21/    3242 :                     ; strc_ypos	ds.w 1
(1)   22/    3242 :                     ; 		endstrct
(1)   23/    3242 :                     
(1)   24/    3242 :                     ; ====================================================================
(1)   25/    3242 :                     ; ------------------------------------------------------
(1)   26/    3242 :                     ; This mode's RAM
(1)   27/    3242 :                     ; ------------------------------------------------------
(1)   28/    3242 :                     
(1)   29/    3242 :  (MACRO-2)           			strct RAM_ScrnBuff
(1)   29/    3242 : =$3242               GLBL_LASTPC     set *
(1)   29/FFFFFFFFFFFFE368 :                                     dephase
(1)   29/FFFFFFFFFFFFD204 :                                     phase RAM_SCRNBUFF
(1)   29/FFFFFFFFFFFFD204 : =$FFFFFFFFFFFFD204   GLBL_LASTORG    set *
(1)   30/FFFFFFFFFFFFD204 :                     RAM_CurrPick		ds.w 1
(1)   31/FFFFFFFFFFFFD206 :                     RAM_GemaArg0		ds.w 1
(1)   32/FFFFFFFFFFFFD208 :                     RAM_GemaArg1		ds.w 1
(1)   33/FFFFFFFFFFFFD20A :                     RAM_GemaArg2		ds.w 1
(1)   34/FFFFFFFFFFFFD20C :                     RAM_ChnlLinks		ds.w 26
(1)   35/FFFFFFFFFFFFD240 :                     sizeof_thisbuff		ds.l 0
(1)   36/FFFFFFFFFFFFD244 :  (MACRO-2)           			endstrct
(1)   36/FFFFFFFFFFFFD204 :                                     org GLBL_LASTORG
(1)   36/    3242 :                                     phase GLBL_LASTPC
(1)   37/    3242 :  (MACRO-2)           			erreport "SCREEN BUFFER",sizeof_thisbuff-RAM_ScrnBuff,MAX_ScrnBuff
(1)   38/    3242 :                     
(1)   39/    3242 :                     ; ====================================================================
(1)   40/    3242 :                     ; ------------------------------------------------------
(1)   41/    3242 :                     ; Init
(1)   42/    3242 :                     ; ------------------------------------------------------
(1)   43/    3242 :                     
(1)   44/    3242 : 6100 DF30           		bsr	Mode_Init
(1)   45/    3246 :  (MACRO-2)           		set_dbanks file_mddata_def,pointr_marsdata_def
(1)   46/    3246 :                     
(1)   47/    3246 :                     	; ----------------------------------------------
(1)   48/    3246 :                     	; Load assets
(1)   75/    3246 : 203C 0003 405C      		move.l	#ART_TEST,d0
(1)   76/    324C : 323C 0020           		move.w	#cell_vram($0001),d1
(1)   77/    3250 : 343C 8780           		move.w	#ART_TEST_E-ART_TEST,d2
(1)   78/    3254 : 6100 D570           		bsr	Video_LoadArt
(1)   79/    3258 : 41F9 0002 0ECE      		lea	(MAP_TEST),a0			; long lea
(1)   80/    325E : 203C 0001 0000      		move.l	#locate(0,0,1),d0
(1)   81/    3264 : 223C 0027 001B      		move.l	#map_size(320,224),d1
(1)   82/    326A : 343C 0001           		move.w	#$0001,d2
(1)   83/    326E : 6100 D6FA           		bsr	Video_LoadMap
(1)   85/    3272 : 41F9 0003 345C      		lea	(ASCII_FONT).l,a0
(1)   86/    3278 : 43F9 0000 03AA      		lea	(ASCII_PAL).l,a1
(1)   87/    327E : 6100 D740           		bsr	Video_PrintInit
(1)   88/    3282 : 203C 0003 C7DC      		move.l	#Art_Sisi,d0
(1)   89/    3288 : 323C 9000           		move.w	#cell_vram(setVram_Sisi),d1
(1)   90/    328C : 343C 05E0           		move.w	#Art_Sisi_e-Art_Sisi,d2
(1)   91/    3290 : 6100 D534           		bsr	Video_LoadArt
(1)   92/    3294 :                     
(1)   93/    3294 : 41FA 022A           		lea	PAL_TEST(pc),a0
(1)   94/    3298 : 7000                		moveq	#0,d0
(1)   95/    329A : 323C 0010           		move.w	#16,d1
(1)   96/    329E : 6100 D20A           		bsr	Video_FadePal
(1)   97/    32A2 : 41F9 0002 1BDE      		lea	(objPal_Sisi),a0
(1)   98/    32A8 : 7010                		moveq	#16,d0
(1)   99/    32AA : 323C 0010           		move.w	#16,d1
(1)  100/    32AE : 6100 D1FA           		bsr	Video_FadePal
(1)  101/    32B2 : 41FA 0228           		lea	str_TesterInit(pc),a0
(1)  102/    32B6 : 203C 0000 0101      		move.l	#locate(1,1,0),d0
(1)  103/    32BC : 6100 D72C           		bsr	Video_Print
(1)  104/    32C0 :                     ; 		move.l	#Object_Mikami,d0
(1)  105/    32C0 :                     ; 		moveq	#0,d1
(1)  106/    32C0 :                     ; 		bsr	Objects_Set
(1)  107/    32C0 : 203C 0000 344A      		move.l	#Object_Sisi,d0
(1)  108/    32C6 : 6100 D966           		bsr	Objects_Add
(1)  109/    32CA :                     	; ----------------------------------------------
(1)  110/    32CA : 4278 D206           		clr.w	(RAM_GemaArg0).w
(1)  111/    32CE : 4278 D208           		clr.w	(RAM_GemaArg1).w
(1)  112/    32D2 : 4278 D20A           		clr.w	(RAM_GemaArg2).w
(1)  113/    32D6 : 303C 00E8           		move.w	#200+32,d0
(1)  114/    32DA : 6100 D05A           		bsr	gemaSetBeats
(1)  115/    32DE :                     ; 		moveq	#1,d0
(1)  116/    32DE :                     ; 		bsr	gemaPlayTrack
(1)  117/    32DE :                     	; ----------------------------------------------
(1)  118/    32DE : 616A                		bsr	.show_me
(1)  119/    32E0 :                     ; 		bsr	.steal_vars
(1)  120/    32E0 : 6100 D904           		bsr	Objects_Run
(1)  121/    32E4 :                     	; ----------------------------------------------
(1)  122/    32E4 : 08F9 0006 FFFF      		bset	#bitDispEnbl,(RAM_VdpRegs+1).l		; Enable display
             32EA : BDF7             
(1)  123/    32EC : 11FC 0081 BE02      		move.b	#%10000001,(RAM_VdpRegs+$C).w		; H40 + shadow mode
(1)  124/    32F2 : 6100 D084           		bsr	Video_Update
(1)  125/    32F6 : 6100 D14E           		bsr	Video_FadeIn
(1)  126/    32FA :                     
(1)  127/    32FA :                     ; ====================================================================
(1)  128/    32FA :                     ; ------------------------------------------------------
(1)  129/    32FA :                     ; Loop
(1)  130/    32FA :                     ; ------------------------------------------------------
(1)  131/    32FA :                     
(1)  132/    32FA :                     .loop:
(1)  133/    32FA : 6100 DC32           		bsr	System_Render
(1)  134/    32FE :                     
(1)  135/    32FE :                     ; 		bsr	.steal_vars
(1)  136/    32FE : 6100 D8E6           		bsr	Objects_Run
(1)  137/    3302 : 41FA 02B0           		lea	str_Info(pc),a0
(1)  138/    3306 : 203C 0000 1F1A      		move.l	#locate(31,26,0),d0
(1)  139/    330C : 6100 D6DC           		bsr	Video_Print
(1)  140/    3310 :                     
(1)  141/    3310 :                     	; Controls
(1)  154/    3310 :                     
(1)  155/    3310 : 4DF8 C004           		lea	(Controller_1).w,a6
(1)  156/    3314 : 4BF8 D204           		lea	(RAM_CurrPick).w,a5
(1)  157/    3318 :                     	; UP/DOWN
(1)  158/    3318 : 3E2E 0004           		move.w	on_press(a6),d7
(1)  159/    331C : 0807 0001           		btst	#bitJoyDown,d7
(1)  160/    3320 : 670A                		beq.s	.n_down
(1)  161/    3322 : 0C55 0009           		cmp.w	#9,(a5)		; MAX OPTIONS
(1)  162/    3326 : 6704                		beq.s	.n_down
(1)  163/    3328 : 5255                		addq.w	#1,(a5)
(1)  164/    332A : 611E                		bsr.s	.show_me
(1)  165/    332C :                     .n_down:
(1)  166/    332C : 3E2E 0004           		move.w	on_press(a6),d7
(1)  167/    3330 : 0807 0000           		btst	#bitJoyUp,d7
(1)  168/    3334 : 6708                		beq.s	.n_up
(1)  169/    3336 : 4A55                		tst.w	(a5)
(1)  170/    3338 : 6704                		beq.s	.n_up
(1)  171/    333A : 5355                		subq.w	#1,(a5)
(1)  172/    333C : 610C                		bsr.s	.show_me
(1)  173/    333E :                     .n_up:
(1)  174/    333E : 3E38 D204           		move.w	(RAM_CurrPick).w,d7
(1)  175/    3342 : E54F                		lsl.w	#2,d7
(1)  176/    3344 : 4EBB 7012           		jsr	.jump_list(pc,d7.w)
(1)  177/    3348 :                     .n_cbtn:
(1)  178/    3348 : 60B0                		bra	.loop
(1)  179/    334A :                     ; ------------------------------------------------------
(1)  180/    334A :                     
(1)  181/    334A :                     .show_me:
(1)  182/    334A : 41FA 0252           		lea	str_ShowMe(pc),a0
(1)  183/    334E : 203C 0000 1705      		move.l	#locate(23,5,0),d0
(1)  184/    3354 : 6000 D694           		bra	Video_Print
(1)  185/    3358 :                     
(1)  186/    3358 :                     ; ------------------------------------------------------
(1)  187/    3358 :                     
(1)  188/    3358 :                     .jump_list:
(1)  189/    3358 : 6000 001E           		bra.w	.nothing
(1)  190/    335C : 6000 002C           		bra.w	.option_1
(1)  191/    3360 : 6000 0080           		bra.w	.option_2
(1)  192/    3364 : 6000 0012           		bra.w	.nothing
(1)  193/    3368 : 6000 000E           		bra.w	.nothing
(1)  194/    336C : 6000 000A           		bra.w	.nothing
(1)  195/    3370 : 6000 0006           		bra.w	.nothing
(1)  196/    3374 : 6000 0002           		bra.w	.nothing
(1)  197/    3378 :                     
(1)  198/    3378 :                     ; ------------------------------------------------------
(1)  199/    3378 :                     ; OPTION 0
(1)  200/    3378 :                     ; ------------------------------------------------------
(1)  201/    3378 :                     
(1)  202/    3378 :                     .nothing:
(1)  203/    3378 : 3E2E 0004           		move.w	on_press(a6),d7
(1)  204/    337C : 0807 0007           		btst	#bitJoyStart,d7
(1)  205/    3380 : 6706                		beq.s	.no_press
(1)  206/    3382 : 61C6                		bsr.s	.show_me
(1)  207/    3384 : 6000 CF4C           		bra	gemaTest
(1)  208/    3388 :                     .no_press:
(1)  209/    3388 : 4E75                		rts
(1)  210/    338A :                     
(1)  211/    338A :                     ; ------------------------------------------------------
(1)  212/    338A :                     ; OPTION 1
(1)  213/    338A :                     ; ------------------------------------------------------
(1)  214/    338A :                     
(1)  215/    338A :                     .option_1:
(1)  216/    338A : 4BF8 D206           		lea	(RAM_GemaArg0).w,a5
(1)  217/    338E : 3E2E 0004           		move.w	on_press(a6),d7
(1)  218/    3392 : 0807 0007           		btst	#bitJoyStart,d7
(1)  219/    3396 : 670C                		beq.s	.option1_args
(1)  220/    3398 : 301D                		move.w	(a5)+,d0
(1)  221/    339A : 321D                		move.w	(a5)+,d1
(1)  222/    339C : 341D                		move.w	(a5)+,d2
(1)  223/    339E : 6000 CF4A           		bra	gemaPlayTrack
(1)  224/    33A2 : 60A6                		bra.s	.show_me
(1)  225/    33A4 :                     .option1_args:
(1)  226/    33A4 : 3E2E 0002           		move.w	on_hold(a6),d7
(1)  227/    33A8 : 3C07                		move.w	d7,d6
(1)  228/    33AA : 0246 0070           		andi.w	#JoyA+JoyB+JoyC,d6
(1)  229/    33AE : 67D8                		beq.s	.no_press
(1)  230/    33B0 : 0807 0004           		btst	#bitJoyB,d7
(1)  231/    33B4 : 6704                		beq.s	.d2_opt
(1)  232/    33B6 : DAFC 0002           		adda	#2,a5
(1)  233/    33BA :                     .d2_opt:
(1)  234/    33BA : 0807 0005           		btst	#bitJoyC,d7
(1)  235/    33BE : 6704                		beq.s	.d3_opt
(1)  236/    33C0 : DAFC 0004           		adda	#4,a5
(1)  237/    33C4 :                     .d3_opt:
(1)  238/    33C4 : 3E2E 0004           		move.w	on_press(a6),d7
(1)  239/    33C8 : 0807 0003           		btst	#bitJoyRight,d7
(1)  240/    33CC : 6706                		beq.s	.op1_right
(1)  241/    33CE : 5255                		addq.w	#1,(a5)
(1)  242/    33D0 : 6000 FF78           		bra	.show_me
(1)  243/    33D4 :                     .op1_right:
(1)  244/    33D4 : 0807 0002           		btst	#bitJoyLeft,d7
(1)  245/    33D8 : 6706                		beq.s	.op1_left
(1)  246/    33DA : 5355                		subq.w	#1,(a5)
(1)  247/    33DC : 6000 FF6C           		bra	.show_me
(1)  248/    33E0 :                     .op1_left:
(1)  249/    33E0 : 4E75                		rts
(1)  250/    33E2 :                     
(1)  251/    33E2 :                     ; ------------------------------------------------------
(1)  252/    33E2 :                     ; OPTION 2
(1)  253/    33E2 :                     ; ------------------------------------------------------
(1)  254/    33E2 :                     
(1)  255/    33E2 :                     .option_2:
(1)  256/    33E2 : 4BF8 D206           		lea	(RAM_GemaArg0).w,a5
(1)  257/    33E6 : 3E2E 0004           		move.w	on_press(a6),d7
(1)  258/    33EA : 0807 0007           		btst	#bitJoyStart,d7
(1)  259/    33EE : 67B4                		beq.s	.option1_args
(1)  260/    33F0 : 301D                		move.w	(a5)+,d0
(1)  261/    33F2 : 321D                		move.w	(a5)+,d1
(1)  262/    33F4 : 6000 CF26           		bra	gemaStopTrack
(1)  263/    33F8 : 6000 FF50           		bra	.show_me
(1)  264/    33FC :                     
(1)  265/    33FC :                     ; ------------------------------------------------------
(1)  266/    33FC :                     ; OPTION 3
(1)  267/    33FC :                     ; ------------------------------------------------------
(1)  268/    33FC :                     
(1)  269/    33FC :                     .option_3:
(1)  270/    33FC : 4E75                		rts
(1)  271/    33FE :                     
(1)  272/    33FE :                     
(1)  273/    33FE :                     ; ------------------------------------------------------
(1)  274/    33FE :                     
(1)  275/    33FE :                     ; .steal_vars:
(1)  276/    33FE :                     ; 	if PICO=0
(1)  277/    33FE :                     ; 		lea	(RAM_ChnlLinks),a6
(1)  278/    33FE :                     ; 		lea	(z80_cpu+tblPSG+6),a5
(1)  279/    33FE :                     ; 		move.w	#MAX_TBLSIZE,d6
(1)  280/    33FE :                     ; 		move.w	#$0100,(z80_bus).l		; Request Z80 Stop
(1)  281/    33FE :                     ; .wait:		btst	#0,(z80_bus).l			; Wait for Z80
(1)  282/    33FE :                     ; 		bne.s	.wait
(1)  283/    33FE :                     ; 	; PSG LINKS
(1)  284/    33FE :                     ; 		moveq	#0,d5
(1)  285/    33FE :                     ; 		moveq	#4-2,d7				; PSG1-3
(1)  286/    33FE :                     ; .psg_go:
(1)  287/    33FE :                     ; 		move.b	(a5),d5
(1)  288/    33FE :                     ; 		move.w	d5,(a6)+
(1)  289/    33FE :                     ; 		adda	d6,a5
(1)  290/    33FE :                     ; 		dbf	d7,.psg_go
(1)  291/    33FE :                     ; 		adda	#2,a5				; skip -1
(1)  292/    33FE :                     ; 		move.b	(a5),d5
(1)  293/    33FE :                     ; 		move.w	#0,(z80_bus).l
(1)  294/    33FE :                     ; 		move.w	d5,(a6)+
(1)  295/    33FE :                     ; 		adda	d6,a5
(1)  296/    33FE :                     ; 		lea	(z80_cpu+tblFM+6),a5
(1)  297/    33FE :                     ; 		move.w	#$0100,(z80_bus).l		; Request Z80 Stop
(1)  298/    33FE :                     ; .wait2:		btst	#0,(z80_bus).l			; Wait for Z80
(1)  299/    33FE :                     ; 		bne.s	.wait2
(1)  300/    33FE :                     ; 	; FM LINKS
(1)  301/    33FE :                     ; 		moveq	#6-2,d7				; FM1-6
(1)  302/    33FE :                     ; 		moveq	#0,d5
(1)  303/    33FE :                     ; .fm_go:
(1)  304/    33FE :                     ; 		move.b	(a5),d5
(1)  305/    33FE :                     ; 		move.w	d5,(a6)+
(1)  306/    33FE :                     ; 		adda	d6,a5
(1)  307/    33FE :                     ; 		dbf	d7,.fm_go
(1)  308/    33FE :                     ; 		move.b	(a5),d5
(1)  309/    33FE :                     ; 		move.w	#0,(z80_bus).l
(1)  310/    33FE :                     ; 		move.w	d5,(a6)+
(1)  311/    33FE :                     ; 		adda	d6,a5
(1)  312/    33FE :                     ; 		lea	(z80_cpu+tblPCM+6),a5
(1)  313/    33FE :                     ; 		move.w	#$0100,(z80_bus).l		; Request Z80 Stop
(1)  314/    33FE :                     ; .wait3:		btst	#0,(z80_bus).l			; Wait for Z80
(1)  315/    33FE :                     ; 		bne.s	.wait3
(1)  316/    33FE :                     ; 	; PCM LINKS
(1)  317/    33FE :                     ; 		moveq	#8-2,d7				; PCM1-8
(1)  318/    33FE :                     ; 		moveq	#0,d5
(1)  319/    33FE :                     ; .pcm_go:
(1)  320/    33FE :                     ; 		move.b	(a5),d5
(1)  321/    33FE :                     ; 		move.w	d5,(a6)+
(1)  322/    33FE :                     ; 		adda	d6,a5
(1)  323/    33FE :                     ; 		dbf	d7,.pcm_go
(1)  324/    33FE :                     ; 		move.b	(a5),d5
(1)  325/    33FE :                     ; 		move.w	#0,(z80_bus).l
(1)  326/    33FE :                     ; 		move.w	d5,(a6)+
(1)  327/    33FE :                     ; 		lea	(z80_cpu+tblPWM+6),a5
(1)  328/    33FE :                     ; 		move.w	#$0100,(z80_bus).l		; Request Z80 Stop
(1)  329/    33FE :                     ; .wait4:		btst	#0,(z80_bus).l			; Wait for Z80
(1)  330/    33FE :                     ; 		bne.s	.wait4
(1)  331/    33FE :                     ; 	; PCM LINKS
(1)  332/    33FE :                     ; 		moveq	#7-2,d7				; PCM1-8
(1)  333/    33FE :                     ; 		moveq	#0,d5
(1)  334/    33FE :                     ; .pwm_go:
(1)  335/    33FE :                     ; 		move.b	(a5),d5
(1)  336/    33FE :                     ; 		move.w	d5,(a6)+
(1)  337/    33FE :                     ; 		adda	d6,a5
(1)  338/    33FE :                     ; 		dbf	d7,.pwm_go
(1)  339/    33FE :                     ; 		move.b	(a5),d5
(1)  340/    33FE :                     ; 		move.w	#0,(z80_bus).l
(1)  341/    33FE :                     ; 		move.w	d5,(a6)+
(1)  342/    33FE :                     ;
(1)  343/    33FE :                     ; ; 		lea	(RAM_ChnlLinks).w,a3
(1)  344/    33FE :                     ; ; 		lea	str_Notes(pc),a2
(1)  345/    33FE :                     ; ; 	; PSG labels
(1)  346/    33FE :                     ; ; 		move.l	#locate(5,5,0),d2
(1)  347/    33FE :                     ; ; 		moveq	#4-1,d3
(1)  348/    33FE :                     ; ; .next_psg:
(1)  349/    33FE :                     ; ; 		move.l	a2,a0
(1)  350/    33FE :                     ; ; 		moveq	#0,d1
(1)  351/    33FE :                     ; ; 		move.w	(a3)+,d1
(1)  352/    33FE :                     ; ; 		beq.s	.zvalid_psg
(1)  353/    33FE :                     ; ; 		sub.w	#36*2,d1
(1)  354/    33FE :                     ; ; 		lsl.w	#2,d1
(1)  355/    33FE :                     ; ; 		add.l	d1,a0
(1)  356/    33FE :                     ; ; .zvalid_psg:
(1)  357/    33FE :                     ; ; 		move.l	d2,d0
(1)  358/    33FE :                     ; ; 		bsr	Video_Print
(1)  359/    33FE :                     ; ; 		add.l	#$000400,d2
(1)  360/    33FE :                     ; ; 		dbf	d3,.next_psg
(1)  361/    33FE :                     ; ; 	; FM labels
(1)  362/    33FE :                     ; ; 		move.l	#locate(5,7,0),d2
(1)  363/    33FE :                     ; ; 		moveq	#6-1,d3
(1)  364/    33FE :                     ; ; .next_fm:
(1)  365/    33FE :                     ; ; 		lea	str_Notes_FM(pc),a0
(1)  366/    33FE :                     ; ; 		lea	str_Octv_FM(pc),a1
(1)  367/    33FE :                     ; ; 		moveq	#0,d0
(1)  368/    33FE :                     ; ; 		move.w	(a3)+,d0
(1)  369/    33FE :                     ; ; 		beq.s	.zvalid_fm
(1)  370/    33FE :                     ; ; 		move.w	d0,d1
(1)  371/    33FE :                     ; ; 		move.l	a0,d4
(1)  372/    33FE :                     ; ; 		andi.w	#%11100000,d0
(1)  373/    33FE :                     ; ; 		lsr.w	#4,d0
(1)  374/    33FE :                     ; ; 		adda	d0,a1
(1)  375/    33FE :                     ; ; 		move.l	d2,d0
(1)  376/    33FE :                     ; ; 		move.l	a1,a0
(1)  377/    33FE :                     ; ; 		add.l	#$000200,d0
(1)  378/    33FE :                     ; ; 		bsr	Video_Print
(1)  379/    33FE :                     ; ; 		move.l	d4,a0
(1)  380/    33FE :                     ; ; 		adda	#4,a0
(1)  381/    33FE :                     ; ; 		andi.w	#%00011111,d1
(1)  382/    33FE :                     ; ; 		lsl.w	#1,d1
(1)  383/    33FE :                     ; ; 		add.l	d1,a0
(1)  384/    33FE :                     ; ; .zvalid_fm:
(1)  385/    33FE :                     ; ; 		move.l	d2,d0
(1)  386/    33FE :                     ; ; 		bsr	Video_Print
(1)  387/    33FE :                     ; ; 		add.l	#$000400,d2
(1)  388/    33FE :                     ; ; 		dbf	d3,.next_fm
(1)  389/    33FE :                     ; ; 	; PCM labels
(1)  390/    33FE :                     ; ; 		move.l	#locate(5,9,0),d2
(1)  391/    33FE :                     ; ; 		moveq	#4-1,d3
(1)  392/    33FE :                     ; ; .next_pcm0:
(1)  393/    33FE :                     ; ; 		move.l	a2,a0
(1)  394/    33FE :                     ; ; 		moveq	#0,d1
(1)  395/    33FE :                     ; ; 		move.w	(a3)+,d1
(1)  396/    33FE :                     ; ; 		beq.s	.zvalid_pcm0
(1)  397/    33FE :                     ; ; 		sub.w	#36,d1
(1)  398/    33FE :                     ; ; 		lsl.w	#2,d1
(1)  399/    33FE :                     ; ; 		add.l	d1,a0
(1)  400/    33FE :                     ; ; .zvalid_pcm0:
(1)  401/    33FE :                     ; ; 		move.l	d2,d0
(1)  402/    33FE :                     ; ; 		bsr	Video_Print
(1)  403/    33FE :                     ; ; 		add.l	#$000400,d2
(1)  404/    33FE :                     ; ; 		dbf	d3,.next_pcm0
(1)  405/    33FE :                     ; ; 		move.l	#locate(5,10,0),d2
(1)  406/    33FE :                     ; ; 		moveq	#4-1,d3
(1)  407/    33FE :                     ; ; .next_pcm1:
(1)  408/    33FE :                     ; ; 		move.l	a2,a0
(1)  409/    33FE :                     ; ; 		moveq	#0,d1
(1)  410/    33FE :                     ; ; 		move.w	(a3)+,d1
(1)  411/    33FE :                     ; ; 		beq.s	.zvalid_pcm1
(1)  412/    33FE :                     ; ; 		sub.w	#36,d1
(1)  413/    33FE :                     ; ; 		lsl.w	#2,d1
(1)  414/    33FE :                     ; ; 		add.l	d1,a0
(1)  415/    33FE :                     ; ; .zvalid_pcm1:
(1)  416/    33FE :                     ; ; 		move.l	d2,d0
(1)  417/    33FE :                     ; ; 		bsr	Video_Print
(1)  418/    33FE :                     ; ; 		add.l	#$000400,d2
(1)  419/    33FE :                     ; ; 		dbf	d3,.next_pcm1
(1)  420/    33FE :                     ;
(1)  421/    33FE :                     ; ; 		lea	str_ShowPsg(pc),a0
(1)  422/    33FE :                     ; ; 		move.l	#locate(5,5,0),d0
(1)  423/    33FE :                     ; ; 		bsr	Video_Print
(1)  424/    33FE :                     ; ; 		lea	str_ShowFm(pc),a0
(1)  425/    33FE :                     ; ; 		move.l	#locate(5,7,0),d0
(1)  426/    33FE :                     ; ; 		bsr	Video_Print
(1)  427/    33FE :                     ; ; 		lea	str_ShowPcm(pc),a0
(1)  428/    33FE :                     ; ; 		move.l	#locate(5,9,0),d0
(1)  429/    33FE :                     ; ; 		bsr	Video_Print
(1)  430/    33FE :                     ; ; 		lea	str_ShowPwm(pc),a0
(1)  431/    33FE :                     ; ; 		move.l	#locate(5,12,0),d0
(1)  432/    33FE :                     ; ; 		bsr	Video_Print
(1)  433/    33FE :                     ;
(1)  434/    33FE :                     ;
(1)  435/    33FE :                     ; 	endif
(1)  436/    33FE :                     ; 		rts
(1)  437/    33FE :                     
(1)  438/    33FE :                     	; C
(1)  439/    33FE :                     
(1)  440/    33FE :                     ; 		lea	(RAM_GemaArg0).w,a5
(1)  441/    33FE :                     ; 		move.w	on_press(a6),d7
(1)  442/    33FE :                     ; 		btst	#bitJoyRight,d7
(1)  443/    33FE :                     ; 		beq.s	.n_right
(1)  444/    33FE :                     ; 		addq.w	#1,(a5)
(1)  445/    33FE :                     ; 		bsr.s	.show_me
(1)  446/    33FE :                     ; .n_right:
(1)  447/    33FE :                     ; 		move.w	on_press(a6),d7
(1)  448/    33FE :                     ; 		btst	#bitJoyLeft,d7
(1)  449/    33FE :                     ; 		beq.s	.n_left
(1)  450/    33FE :                     ; 		tst.w	(a5)
(1)  451/    33FE :                     ; 		beq.s	.n_left
(1)  452/    33FE :                     ; 		subq.w	#1,(a5)
(1)  453/    33FE :                     ; 		bsr.s	.show_me
(1)  454/    33FE :                     ; .n_left:
(1)  455/    33FE :                     ; 		move.w	on_press(a6),d7
(1)  456/    33FE :                     ; 		btst	#bitJoyC,d7
(1)  457/    33FE :                     ; 		beq.s	.n_cplay
(1)  458/    33FE :                     ; 		move.w	(a5),d0
(1)  459/    33FE :                     ; 		move.w	d0,d1
(1)  460/    33FE :                     ; 		add.w	d1,d1
(1)  461/    33FE :                     ; 		lea	.extnal_beats(pc),a0
(1)  462/    33FE :                     ; 		move.w	(a0,d1.w),d0
(1)  463/    33FE :                     ; 		bsr	gemaSetBeats
(1)  464/    33FE :                     ; 		move.w	(a5),d0
(1)  465/    33FE :                     ; 		moveq	#0,d1
(1)  466/    33FE :                     ; 		moveq	#0,d2
(1)  467/    33FE :                     ; 		bsr	gemaPlayTrackM
(1)  468/    33FE :                     ; .n_cplay:
(1)  469/    33FE :                     ; 		move.w	on_press(a6),d7
(1)  470/    33FE :                     ; 		btst	#bitJoyStart,d7
(1)  471/    33FE :                     ; 		beq.s	.n_stplay
(1)  472/    33FE :                     ; 		bsr	gemaTest
(1)  473/    33FE :                     ; .n_stplay:
(1)  474/    33FE :                     ; 		move.w	on_press(a6),d7
(1)  475/    33FE :                     ; 		btst	#bitJoyB,d7
(1)  476/    33FE :                     ; 		beq.s	.n_bplay
(1)  477/    33FE :                     ; 		move.w	(a5),d0
(1)  478/    33FE :                     ; 		bsr	gemaStopTrack
(1)  479/    33FE :                     ; .n_bplay:
(1)  480/    33FE :                     ; 		move.w	on_press(a6),d7
(1)  481/    33FE :                     ; 		btst	#bitJoyMode,d7
(1)  482/    33FE :                     ; 		beq.s	.n_aplay
(1)  483/    33FE :                     ; 		moveq	#1,d0
(1)  484/    33FE :                     ; 		bsr	Video_MarsGfxMode
(1)  485/    33FE :                     ; 	if MCD|MARSCD
(1)  486/    33FE :                     ; 		move.w	#$0002,(sysmcd_reg+mcd_dcomm_m).l
(1)  487/    33FE :                     ; 		move.w	#$0010,d0
(1)  488/    33FE :                     ; 		bsr	System_McdSubTask
(1)  489/    33FE :                     ; 	endif
(1)  490/    33FE :                     ; 		nop
(1)  491/    33FE :                     ; .n_aplay:
(1)  492/    33FE :                     
(1)  493/    33FE :                     ; ------------------------------------------------------
(1)  494/    33FE :                     ; CUSTOM BEATS FOR EACH TRACK
(1)  495/    33FE :                     ; ------------------------------------------------------
(1)  496/    33FE :                     
(1)  497/    33FE :                     .extnal_beats:
(1)  498/    33FE : 00DC                	dc.w 200+20
(1)  499/    3400 : 00E8                	dc.w 200+32
(1)  500/    3402 : 00E8                	dc.w 200+32
(1)  501/    3404 : 00E8                	dc.w 200+32
(1)  502/    3406 : 00E8                	dc.w 200+32
(1)  503/    3408 : 00CC                	dc.w 200+4
(1)  504/    340A : 00E8                	dc.w 200+32
(1)  505/    340C : 00E8                	dc.w 200+32
(1)  506/    340E : 00E8                	dc.w 200+32
(1)  507/    3410 : 00E8                	dc.w 200+32
(1)  508/    3412 : 00E8                	dc.w 200+32
(1)  509/    3414 : 00E8                	dc.w 200+32
(1)  510/    3416 : 00E8                	dc.w 200+32
(1)  511/    3418 : 00E8                	dc.w 200+32
(1)  512/    341A : 00E8                	dc.w 200+32
(1)  513/    341C : 00E8                	dc.w 200+32
(1)  514/    341E : 00E8                	dc.w 200+32
(1)  515/    3420 : 00E8                	dc.w 200+32
(1)  516/    3422 : 00E8                	dc.w 200+32
(1)  517/    3424 : 00E8                	dc.w 200+32
(1)  518/    3426 : 00E8                	dc.w 200+32
(1)  519/    3428 : 00E8                	dc.w 200+32
(1)  520/    342A :                     
(1)  521/    342A :                     ; ====================================================================
(1)  522/    342A :                     ; ------------------------------------------------------
(1)  523/    342A :                     ; DATA assets locations for 68K and SH2
(1)  524/    342A :                     ; ------------------------------------------------------
(1)  525/    342A :                     
(1)  526/    342A :                     file_mddata_def:
(1)  527/    342A : 4441 5441 424E      		dc.b "DATABNKD.BIN",0		; CD Filename
             3430 : 4B44 2E42 494E 00 
(1)  528/    3437 :                     		align 2
(1)  529/    3438 :                     
(1)  530/    3438 :                     pointr_marsdata_def:
(1)  531/    3438 : 0002 1C5A           		dc.l MARSDATA_DEFAULT		; 32X Cartridge point
(1)  532/    343C : 4D41 5253 445F      		dc.b "MARSD_00.BIN",0		; CD Filename
             3442 : 3030 2E42 494E 00 
(1)  533/    3449 :                     		align 2
(1)  534/    344A :                     
(1)  535/    344A :                     ; ====================================================================
(1)  536/    344A :                     ; ------------------------------------------------------
(1)  537/    344A :                     ; Objects
(1)  538/    344A :                     ; ------------------------------------------------------
(1)  539/    344A :                     
(1)  540/    344A :                     ; ; --------------------------------------------------
(1)  541/    344A :                     ; ; Mikami
(1)  542/    344A :                     ; ; --------------------------------------------------
(1)  543/    344A :                     ;
(1)  544/    344A :                     ; Object_Mikami:
(1)  545/    344A :                     ; 		moveq	#0,d0
(1)  546/    344A :                     ; 		move.b	obj_index(a6),d0
(1)  547/    344A :                     ; 		add.w	d0,d0
(1)  548/    344A :                     ; 		move.w	.list(pc,d0.w),d1
(1)  549/    344A :                     ; 		jmp	.list(pc,d1.w)
(1)  550/    344A :                     ; ; ----------------------------------------------
(1)  551/    344A :                     ; .list:		dc.w .init-.list
(1)  552/    344A :                     ; 		dc.w .main-.list
(1)  553/    344A :                     ; ; ----------------------------------------------
(1)  554/    344A :                     ; .init:
(1)  555/    344A :                     ; 		move.b	#1,obj_index(a6)
(1)  556/    344A :                     ; 		move.l	#objMap_Mikami,obj_map(a6)
(1)  557/    344A :                     ; 		move.l	#objDma_Mikami,obj_dma(a6)
(1)  558/    344A :                     ; 		move.w	#setVram_Mikami|$2000,obj_vram(a6)
(1)  559/    344A :                     ; 		bclr	#bitobj_Mars,obj_set(a6)	; Genesis object
(1)  560/    344A :                     ; 		move.w	#(320/2)+48,obj_x(a6)
(1)  561/    344A :                     ; 		move.w	#(224/2)+64,obj_y(a6)
(1)  562/    344A :                     ; 		clr.w	obj_frame(a6)
(1)  563/    344A :                     ; 		bsr	object_AnimReset
(1)  564/    344A :                     ; 		bset	#0,obj_status(a6)
(1)  565/    344A :                     ; 		bset	#bitobj_flipH,obj_set(a6)
(1)  566/    344A :                     ;
(1)  567/    344A :                     ; ; ----------------------------------------------
(1)  568/    344A :                     ; .main:
(1)  569/    344A :                     ; 		lea	(Controller_2),a3
(1)  570/    344A :                     ; 		btst	#0,obj_status(a6)
(1)  571/    344A :                     ; 		beq.s	.no_fallspd
(1)  572/    344A :                     ; 		add.w	#$40,obj_y_spd(a6)
(1)  573/    344A :                     ; .no_fallspd:
(1)  574/    344A :                     ;
(1)  575/    344A :                     ; ; .fake_col_c:
(1)  576/    344A :                     ; 		move.w	on_press(a3),d7
(1)  577/    344A :                     ; 		btst	#bitJoyC,d7
(1)  578/    344A :                     ; 		beq.s	.fake_jump
(1)  579/    344A :                     ; 		btst	#0,obj_status(a6)
(1)  580/    344A :                     ; 		bne.s	.fake_jump
(1)  581/    344A :                     ; 		move.w	#-$500,obj_y_spd(a6)
(1)  582/    344A :                     ; 		move.b	#2,obj_anim_id(a6)
(1)  583/    344A :                     ; 		bset	#0,obj_status(a6)
(1)  584/    344A :                     ;
(1)  585/    344A :                     ; 		moveq	#$0F,d0
(1)  586/    344A :                     ; 		moveq	#1,d1
(1)  587/    344A :                     ; 		bsr	gemaPlayFromBlk
(1)  588/    344A :                     ;
(1)  589/    344A :                     ; .fake_jump:
(1)  590/    344A :                     ; 		move.w	on_press(a3),d7
(1)  591/    344A :                     ; 		btst	#bitJoyB,d7
(1)  592/    344A :                     ; 		beq.s	.no_slash
(1)  593/    344A :                     ; 		tst.w	obj_y_spd(a6)
(1)  594/    344A :                     ; 		bne.s	.no_slash
(1)  595/    344A :                     ; 		clr.w	obj_anim_indx(a6)
(1)  596/    344A :                     ; 		move.b	#4,obj_anim_id(a6)
(1)  597/    344A :                     ; 		move.w	#$10,obj_ram+2(a6)
(1)  598/    344A :                     ;
(1)  599/    344A :                     ; 		moveq	#$0F,d0
(1)  600/    344A :                     ; 		moveq	#0,d1
(1)  601/    344A :                     ; 		bsr	gemaPlayFromBlk
(1)  602/    344A :                     ;
(1)  603/    344A :                     ; .no_slash:
(1)  604/    344A :                     ; 		clr.w	obj_x_spd(a6)
(1)  605/    344A :                     ;
(1)  606/    344A :                     ; 		moveq	#0,d0
(1)  607/    344A :                     ; 		moveq	#0,d1
(1)  608/    344A :                     ; 		move.w	on_hold(a3),d7
(1)  609/    344A :                     ; 		move.w	d7,d6
(1)  610/    344A :                     ; 		andi.w	#JoyLeft+JoyRight,d6
(1)  611/    344A :                     ; 		beq.s	.move_mika
(1)  612/    344A :                     ; 		clr.w	obj_ram+2(a6)
(1)  613/    344A :                     ; 		move.w	#$180,d6
(1)  614/    344A :                     ; 		btst	#bitJoyRight,d7
(1)  615/    344A :                     ; 		beq.s	.no_l
(1)  616/    344A :                     ; 		move.w	d6,obj_x_spd(a6)
(1)  617/    344A :                     ; .no_l
(1)  618/    344A :                     ; 		neg.w	d6
(1)  619/    344A :                     ; 		btst	#bitJoyLeft,d7
(1)  620/    344A :                     ; 		beq.s	.move_mika
(1)  621/    344A :                     ; 		move.w	d6,obj_x_spd(a6)
(1)  622/    344A :                     ; .move_mika:
(1)  623/    344A :                     ;
(1)  624/    344A :                     ;
(1)  625/    344A :                     ; 		moveq	#0,d6
(1)  626/    344A :                     ; 		tst.w	obj_x_spd(a6)
(1)  627/    344A :                     ; 		beq.s	.r_spd
(1)  628/    344A :                     ; 		moveq	#1,d6
(1)  629/    344A :                     ; 		move.b	obj_set(a6),d7
(1)  630/    344A :                     ; 		bclr	#bitobj_flipH,d7
(1)  631/    344A :                     ; 		tst.w	obj_x_spd(a6)
(1)  632/    344A :                     ; 		bpl.s	.r_flip
(1)  633/    344A :                     ; 		bset	#bitobj_flipH,d7
(1)  634/    344A :                     ; .r_flip:
(1)  635/    344A :                     ; 		move.b	d7,obj_set(a6)
(1)  636/    344A :                     ; .r_spd:
(1)  637/    344A :                     ;
(1)  638/    344A :                     ; 		tst.w	obj_ram+2(a6)
(1)  639/    344A :                     ; 		beq.s	.free_anim
(1)  640/    344A :                     ; 		subi.w	#1,obj_ram+2(a6)
(1)  641/    344A :                     ; 		bne.s	.no_anim
(1)  642/    344A :                     ; .free_anim:
(1)  643/    344A :                     ; 		btst	#0,obj_status(a6)
(1)  644/    344A :                     ; 		bne.s	.no_anim
(1)  645/    344A :                     ; 		tst.w	obj_y_spd(a6)
(1)  646/    344A :                     ; 		bmi.s	.is_jumpin
(1)  647/    344A :                     ; 		move.b	d6,obj_anim_id(a6)
(1)  648/    344A :                     ; .is_jumpin:
(1)  649/    344A :                     ; 		tst.w	obj_y_spd(a6)
(1)  650/    344A :                     ; 		beq.s	.no_anim
(1)  651/    344A :                     ; 		move.b	#3,obj_anim_id(a6)
(1)  652/    344A :                     ; .no_anim:
(1)  653/    344A :                     ; 		bsr	object_Speed
(1)  654/    344A :                     ;
(1)  655/    344A :                     ; 		move.w	#(224-16)-32,d7
(1)  656/    344A :                     ; 		move.w	obj_y(a6),d0
(1)  657/    344A :                     ; 		cmp.w	d7,d0
(1)  658/    344A :                     ; 		blt.s	.fake_col
(1)  659/    344A :                     ; 		clr.w	obj_y_spd(a6)
(1)  660/    344A :                     ; 		andi.w	#-$10,obj_y(a6)
(1)  661/    344A :                     ; 		bclr	#0,obj_status(a6)
(1)  662/    344A :                     ; .fake_col:
(1)  663/    344A :                     ;
(1)  664/    344A :                     ; ; 		move.w	(Controller_2+on_press),d7
(1)  665/    344A :                     ; ; 		btst	#bitClickM,d7
(1)  666/    344A :                     ; ; 		beq.s	.no_reset
(1)  667/    344A :                     ; ; 		move.w	#320/2,obj_x(a6)
(1)  668/    344A :                     ; ; 		move.w	#224/2,obj_y(a6)
(1)  669/    344A :                     ; ; .no_reset:
(1)  670/    344A :                     ; 		lea	.anim_data(pc),a0
(1)  671/    344A :                     ; 		bsr	object_Animate
(1)  672/    344A :                     ; 		bra	object_Display
(1)  673/    344A :                     ;
(1)  674/    344A :                     ; ; ----------------------------------------------
(1)  675/    344A :                     ;
(1)  676/    344A :                     ; .anim_data:
(1)  677/    344A :                     ; 		dc.w .anim_stand-.anim_data
(1)  678/    344A :                     ; 		dc.w .anim_move-.anim_data
(1)  679/    344A :                     ; 		dc.w .anim_jump-.anim_data
(1)  680/    344A :                     ; 		dc.w .anim_fall-.anim_data
(1)  681/    344A :                     ; 		dc.w .anim_slash-.anim_data
(1)  682/    344A :                     ; .anim_stand:
(1)  683/    344A :                     ; 		dc.w 6
(1)  684/    344A :                     ; 		dc.w 0,-1
(1)  685/    344A :                     ; 		align 2
(1)  686/    344A :                     ; .anim_move:
(1)  687/    344A :                     ; 		dc.w 5
(1)  688/    344A :                     ; 		dc.w 2,3,4,5,6,7,8,-3,1
(1)  689/    344A :                     ; 		align 2
(1)  690/    344A :                     ; .anim_jump:
(1)  691/    344A :                     ; 		dc.w 5
(1)  692/    344A :                     ; 		dc.w 10,11,12,-3,2
(1)  693/    344A :                     ; 		align 2
(1)  694/    344A :                     ; .anim_fall:
(1)  695/    344A :                     ; 		dc.w 5
(1)  696/    344A :                     ; 		dc.w 11,12,-3,1
(1)  697/    344A :                     ; 		align 2
(1)  698/    344A :                     ; .anim_slash:
(1)  699/    344A :                     ; 		dc.w 1
(1)  700/    344A :                     ; 		dc.w 14,15,16,17,-2
(1)  701/    344A :                     ; 		align 2
(1)  702/    344A :                     ;
(1)  703/    344A :                     ; --------------------------------------------------
(1)  704/    344A :                     ; Sisi
(1)  705/    344A :                     ; --------------------------------------------------
(1)  706/    344A :                     
(1)  707/    344A :                     Object_Sisi:
(1)  708/    344A : 7000                		moveq	#0,d0
(1)  709/    344C : 102E 0021           		move.b	obj_index(a6),d0
(1)  710/    3450 : D040                		add.w	d0,d0
(1)  711/    3452 : 323B 0006           		move.w	.list(pc,d0.w),d1
(1)  712/    3456 : 4EFB 1002           		jmp	.list(pc,d1.w)
(1)  713/    345A :                     ; ----------------------------------------------
(1)  714/    345A : 0004                .list:		dc.w .init-.list
(1)  715/    345C : 002E                		dc.w .main-.list
(1)  716/    345E :                     ; ----------------------------------------------
(1)  717/    345E :                     .init:
(1)  718/    345E : 1D7C 0001 0021      		move.b	#1,obj_index(a6)
(1)  719/    3464 : 2D7C 0002 1BFE      		move.l	#objMap_Sisi,obj_map(a6)
             346A : 000C             
(1)  720/    346C : 2D7C 0000 0000      		move.l	#0,obj_dma(a6)
             3472 : 0010             
(1)  721/    3474 : 3D7C 2480 0014      		move.w	#setVram_Sisi|$2000,obj_vram(a6)
(1)  722/    347A : 08AE 0007 0022      		bclr	#bitobj_Mars,obj_set(a6)	; Genesis object
(1)  723/    3480 :                     ; 		move.w	#320/2,obj_x(a6)
(1)  724/    3480 :                     ; 		move.w	#224/2,obj_y(a6)
(1)  725/    3480 : 426E 001E           		clr.w	obj_frame(a6)
(1)  726/    3484 : 6100 DA2A           		bsr	object_AnimReset
(1)  727/    3488 :                     
(1)  728/    3488 :                     ; ----------------------------------------------
(1)  729/    3488 :                     .main:
(1)  730/    3488 :                     ; 		move.w	obj_ram(a6),d0
(1)  731/    3488 :                     ; 		move.w	obj_ram+2(a6),d1
(1)  732/    3488 :                     
(1)  733/    3488 :                     
(1)  734/    3488 : 7000                		moveq	#0,d0
(1)  735/    348A :                     
(1)  736/    348A : 3238 D204           		move.w	(RAM_CurrPick).w,d1
(1)  737/    348E : E749                		lsl.w	#3,d1
(1)  738/    3490 :                     
(1)  739/    3490 : 0640 0018           		addi.w	#$18,d0
(1)  740/    3494 : 0641 0020           		addi.w	#$20,d1
(1)  741/    3498 : 3D40 0004           		move.w	d0,obj_x(a6)
(1)  742/    349C : 3D41 0008           		move.w	d1,obj_y(a6)
(1)  743/    34A0 :                     
(1)  744/    34A0 :                     ; 		lea	(RAM_Objects),a0
(1)  745/    34A0 :                     ; 		cmp.l	#Object_Mikami,obj_code(a0)
(1)  746/    34A0 :                     ; 		bne.s	.dont_link
(1)  747/    34A0 :                     ; 		move.w	obj_ram+2(a6),d7
(1)  748/    34A0 :                     ; 		cmp.w	#24<<1,d7
(1)  749/    34A0 :                     ; 		bge.s	.dont_incr
(1)  750/    34A0 :                     ; 		add.w	#2,d7
(1)  751/    34A0 :                     ; .dont_incr:
(1)  752/    34A0 :                     ; 		move.w	d7,obj_ram+2(a6)
(1)  753/    34A0 :                     ;
(1)  754/    34A0 :                     ; 		move.w	obj_x(a0),d7
(1)  755/    34A0 :                     ; 		move.w	obj_y(a0),d6
(1)  756/    34A0 :                     ; 		move.w	#24,d5
(1)  757/    34A0 :                     ; 		sub.w	d5,d6
(1)  758/    34A0 :                     ; 		move.w	obj_ram(a6),d0
(1)  759/    34A0 :                     ; 		moveq	#4,d1
(1)  760/    34A0 :                     ; 		bsr	System_SineWave
(1)  761/    34A0 :                     ; 		asr.w	#8,d2
(1)  762/    34A0 :                     ; 		add.w	d2,d6
(1)  763/    34A0 :                     ; 		moveq	#5,d1
(1)  764/    34A0 :                     ; 		bsr	System_SineWave_Cos
(1)  765/    34A0 :                     ; 		asr.w	#8,d2
(1)  766/    34A0 :                     ; 		add.w	d2,d7
(1)  767/    34A0 :                     ;
(1)  768/    34A0 :                     ; 		move.b	obj_set(a6),d0
(1)  769/    34A0 :                     ; 		move.b	obj_set(a0),d1
(1)  770/    34A0 :                     ; 		eor.w	d1,d0
(1)  771/    34A0 :                     ; 		andi.w	#1,d0
(1)  772/    34A0 :                     ; 		beq.s	.same_h
(1)  773/    34A0 :                     ; 		clr.w	obj_ram+2(a6)
(1)  774/    34A0 :                     ; .same_h:
(1)  775/    34A0 :                     ; 		move.w	obj_ram+2(a6),d4
(1)  776/    34A0 :                     ; 		bclr	#bitobj_flipH,obj_set(a6)
(1)  777/    34A0 :                     ; 		btst	#bitobj_flipH,obj_set(a0)
(1)  778/    34A0 :                     ; 		beq.s	.dont_flipx
(1)  779/    34A0 :                     ; 		neg.w	d4
(1)  780/    34A0 :                     ; 		bset	#bitobj_flipH,obj_set(a6)
(1)  781/    34A0 :                     ; .dont_flipx:
(1)  782/    34A0 :                     ; 		lsr.w	#1,d4
(1)  783/    34A0 :                     ; 		add.w	d4,d7
(1)  784/    34A0 :                     ; 		move.w	d6,obj_y(a6)
(1)  785/    34A0 :                     ; 		move.w	d7,obj_x(a6)
(1)  786/    34A0 :                     ; 		add.w	#4,obj_ram(a6)
(1)  787/    34A0 :                     
(1)  788/    34A0 :                     .dont_link:
(1)  789/    34A0 : 41FA 000A           		lea	.anim_data(pc),a0
(1)  790/    34A4 : 6100 D97E           		bsr	object_Animate
(1)  791/    34A8 : 6000 D8DE           		bra	object_Display
(1)  792/    34AC :                     
(1)  793/    34AC :                     ; ----------------------------------------------
(1)  794/    34AC :                     
(1)  795/    34AC :                     .anim_data:
(1)  796/    34AC : 0008                		dc.w .anim_00-.anim_data
(1)  797/    34AE : 0008                		dc.w .anim_00-.anim_data
(1)  798/    34B0 : 0008                		dc.w .anim_00-.anim_data
(1)  799/    34B2 : 0008                		dc.w .anim_00-.anim_data
(1)  800/    34B4 :                     .anim_00:
(1)  801/    34B4 : 0008                		dc.w 8
(1)  802/    34B6 : 0000 0001 0002      		dc.w 0,1,2,1,-1
             34BC : 0001 FFFF          
(1)  803/    34C0 :                     		align 2
(1)  804/    34C0 :                     ;
(1)  805/    34C0 :                     ; ; --------------------------------------------------
(1)  806/    34C0 :                     ; ; Ball
(1)  807/    34C0 :                     ; ; --------------------------------------------------
(1)  808/    34C0 :                     ;
(1)  809/    34C0 :                     ; Object_ball:
(1)  810/    34C0 :                     ; 		moveq	#0,d0
(1)  811/    34C0 :                     ; 		move.b	obj_index(a6),d0
(1)  812/    34C0 :                     ; 		add.w	d0,d0
(1)  813/    34C0 :                     ; 		move.w	.list(pc,d0.w),d1
(1)  814/    34C0 :                     ; 		jmp	.list(pc,d1.w)
(1)  815/    34C0 :                     ; ; ----------------------------------------------
(1)  816/    34C0 :                     ; .list:		dc.w .init-.list
(1)  817/    34C0 :                     ; 		dc.w .main-.list
(1)  818/    34C0 :                     ; ; ----------------------------------------------
(1)  819/    34C0 :                     ; .init:
(1)  820/    34C0 :                     ; 		move.b	#1,obj_index(a6)
(1)  821/    34C0 :                     ; 		move.l	#objMap_Sisi,obj_map(a6)
(1)  822/    34C0 :                     ; 		move.l	#0,obj_dma(a6)
(1)  823/    34C0 :                     ; 		move.w	#setVram_Sisi|$0000,obj_vram(a6)
(1)  824/    34C0 :                     ; 		bclr	#bitobj_Mars,obj_set(a6)	; Genesis object
(1)  825/    34C0 :                     ; 		move.w	#320/2,obj_x(a6)
(1)  826/    34C0 :                     ; 		move.w	#224/2,obj_y(a6)
(1)  827/    34C0 :                     ; 		clr.w	obj_frame(a6)
(1)  828/    34C0 :                     ; 		bsr	object_AnimReset
(1)  829/    34C0 :                     ;
(1)  830/    34C0 :                     ; 		move.w	#$180,obj_x_spd(a6)
(1)  831/    34C0 :                     ; 		move.w	#$180,obj_y_spd(a6)
(1)  832/    34C0 :                     ;
(1)  833/    34C0 :                     ; ; ----------------------------------------------
(1)  834/    34C0 :                     ; .main:
(1)  835/    34C0 :                     ; 		move.w	obj_x(a6),d0
(1)  836/    34C0 :                     ; 		move.w	obj_y(a6),d1
(1)  837/    34C0 :                     ; 		sub.w	#16,d0
(1)  838/    34C0 :                     ; 		sub.w	#16,d1
(1)  839/    34C0 :                     ; 		move.w	#320-32,d2
(1)  840/    34C0 :                     ; 		move.w	#(224-16)-32,d3
(1)  841/    34C0 :                     ;
(1)  842/    34C0 :                     ; 		tst.w	d1
(1)  843/    34C0 :                     ; 		bpl.s	.on_scrn_yu
(1)  844/    34C0 :                     ; 		neg.w	obj_y_spd(a6)
(1)  845/    34C0 :                     ; 		bsr	.playit
(1)  846/    34C0 :                     ; .on_scrn_yu:
(1)  847/    34C0 :                     ; 		cmp.w	d3,d1
(1)  848/    34C0 :                     ; 		blt.s	.on_scrn_yd
(1)  849/    34C0 :                     ; 		neg.w	obj_y_spd(a6)
(1)  850/    34C0 :                     ; 		bsr	.playit
(1)  851/    34C0 :                     ; .on_scrn_yd:
(1)  852/    34C0 :                     ;
(1)  853/    34C0 :                     ; 		tst.w	d0
(1)  854/    34C0 :                     ; 		bpl.s	.on_scrn_xu
(1)  855/    34C0 :                     ; 		neg.w	obj_x_spd(a6)
(1)  856/    34C0 :                     ; 		bsr.s	.playit
(1)  857/    34C0 :                     ; .on_scrn_xu:
(1)  858/    34C0 :                     ; 		cmp.w	d2,d0
(1)  859/    34C0 :                     ; 		blt.s	.on_scrn_xd
(1)  860/    34C0 :                     ; 		neg.w	obj_x_spd(a6)
(1)  861/    34C0 :                     ; 		bsr.s	.playit
(1)  862/    34C0 :                     ; .on_scrn_xd:
(1)  863/    34C0 :                     ;
(1)  864/    34C0 :                     ; 		bsr	object_Speed
(1)  865/    34C0 :                     ;
(1)  866/    34C0 :                     ; 		lea	.anim_data(pc),a0
(1)  867/    34C0 :                     ; 		bsr	object_Animate
(1)  868/    34C0 :                     ; 		bra	object_Display
(1)  869/    34C0 :                     ; .playit:
(1)  870/    34C0 :                     ; 		moveq	#$0F,d0
(1)  871/    34C0 :                     ; 		moveq	#2,d1
(1)  872/    34C0 :                     ; 		bra	gemaPlayFromBlk
(1)  873/    34C0 :                     ;
(1)  874/    34C0 :                     ; ; ----------------------------------------------
(1)  875/    34C0 :                     ;
(1)  876/    34C0 :                     ; .anim_data:
(1)  877/    34C0 :                     ; 		dc.w .anim_00-.anim_data
(1)  878/    34C0 :                     ; 		dc.w .anim_00-.anim_data
(1)  879/    34C0 :                     ; 		dc.w .anim_00-.anim_data
(1)  880/    34C0 :                     ; 		dc.w .anim_00-.anim_data
(1)  881/    34C0 :                     ; .anim_00:
(1)  882/    34C0 :                     ; 		dc.w 8
(1)  883/    34C0 :                     ; 		dc.w 0,1,2,1,-1
(1)  884/    34C0 :                     ; 		align 2
(1)  885/    34C0 :                     
(1)  886/    34C0 :                     ; ====================================================================
(1)  887/    34C0 :                     ; ------------------------------------------------------
(1)  888/    34C0 :                     ; Subroutines
(1)  889/    34C0 :                     ; ------------------------------------------------------
(1)  890/    34C0 :                     
(1)  891/    34C0 :                     ; ====================================================================
(1)  892/    34C0 :                     ; ------------------------------------------------------
(1)  893/    34C0 :                     ; Custom VBlank
(1)  894/    34C0 :                     ; ------------------------------------------------------
(1)  895/    34C0 :                     
(1)  896/    34C0 :                     ; ------------------------------------------------------
(1)  897/    34C0 :                     ; Custom HBlank
(1)  898/    34C0 :                     ; ------------------------------------------------------
(1)  899/    34C0 :                     
(1)  900/    34C0 :                     ; ====================================================================
(1)  901/    34C0 :                     ; ------------------------------------------------------
(1)  902/    34C0 :                     ; Small DATA section
(1)  903/    34C0 :                     ; ------------------------------------------------------
(1)  904/    34C0 :                     
(1)  905/    34C0 :                     PAL_TEST:
(1)  906/    34C0 :                     		binclude "game/screen_0/data/maps/md/test/md_pal.bin"
(1)  907/    34DC :                     		align 2
(1)  908/    34DC :                     
(1)  909/    34DC :                     ; str_ShowPsg:	dc.b "\\w \\w \\w \\w",0
(1)  910/    34DC :                     ; 		dc.l RAM_ChnlLinks,RAM_ChnlLinks+2,RAM_ChnlLinks+4,RAM_ChnlLinks+6
(1)  911/    34DC :                     ; 		align 2
(1)  912/    34DC :                     ; str_ShowFm:	dc.b "\\w \\w \\w \\w \\w \\w",0
(1)  913/    34DC :                     ; 		dc.l RAM_ChnlLinks+8,RAM_ChnlLinks+10,RAM_ChnlLinks+12
(1)  914/    34DC :                     ; 		dc.l RAM_ChnlLinks+14,RAM_ChnlLinks+16,RAM_ChnlLinks+18
(1)  915/    34DC :                     ; 		align 2
(1)  916/    34DC :                     ; str_ShowPcm:	dc.b "\\w \\w \\w \\w",$0A
(1)  917/    34DC :                     ; 		dc.b "\\w \\w \\w \\w",0
(1)  918/    34DC :                     ; 		dc.l RAM_ChnlLinks+20,RAM_ChnlLinks+22,RAM_ChnlLinks+24,RAM_ChnlLinks+26
(1)  919/    34DC :                     ; 		dc.l RAM_ChnlLinks+28,RAM_ChnlLinks+30,RAM_ChnlLinks+32,RAM_ChnlLinks+34
(1)  920/    34DC :                     ; 		align 2
(1)  921/    34DC :                     ; str_ShowPwm:	dc.b "\\w \\w \\w \\w",$0A
(1)  922/    34DC :                     ; 		dc.b "\\w \\w \\w",0
(1)  923/    34DC :                     ; 		dc.l RAM_ChnlLinks+36,RAM_ChnlLinks+38,RAM_ChnlLinks+40,RAM_ChnlLinks+42
(1)  924/    34DC :                     ; 		dc.l RAM_ChnlLinks+44,RAM_ChnlLinks+46,RAM_ChnlLinks+48,RAM_ChnlLinks+50
(1)  925/    34DC :                     ; 		align 2
(1)  926/    34DC :                     
(1)  927/    34DC :                     str_TesterInit:
(1)  928/    34DC : 4745 4D41 2F4E      		dc.b "GEMA/Nikona player",$0A
             34E2 : 696B 6F6E 6120 
             34E8 : 706C 6179 6572 0A 
(1)  929/    34EF : 2020 2020 2020      		dc.b "                \{DATE} \{TIME}",$0A
             34F5 : 2020 2020 2020 
             34FB : 2020 2020 3032 
             3501 : 2F30 382F 3230 
             3507 : 3234 2030 343A 
             350D : 3231 3A34 3520 
             3513 : 414D 0A          
(1)  930/    3516 : 0A                  		dc.b $0A
(1)  931/    3517 : 2020 2020 6765      		dc.b "    gemaTest",$0A
             351D : 6D61 5465 7374 0A 
(1)  932/    3524 : 2020 2020 6765      		dc.b "    gemaPlayTrack",$0A
             352A : 6D61 506C 6179 
             3530 : 5472 6163 6B0A    
(1)  933/    3536 : 2020 2020 6765      		dc.b "    gemaStopTrack",$0A
             353C : 6D61 5374 6F70 
             3542 : 5472 6163 6B0A    
(1)  934/    3548 : 2020 2020 6765      		dc.b "    gemaPlayQuick",$0A
             354E : 6D61 506C 6179 
             3554 : 5175 6963 6B0A    
(1)  935/    355A : 2020 2020 5445      		dc.b "    TEST 5",$0A
             3560 : 5354 2035 0A       
(1)  936/    3565 : 2020 2020 5445      		dc.b "    TEST 6",$0A
             356B : 5354 2036 0A       
(1)  937/    3570 : 2020 2020 5445      		dc.b "    TEST 7",$0A
             3576 : 5354 2037 0A       
(1)  938/    357B : 2020 2020 5445      		dc.b "    TEST 8",$0A
             3581 : 5354 2038 0A       
(1)  939/    3586 : 2020 2020 5445      		dc.b "    TEST 9",$0A
             358C : 5354 2039 0A       
(1)  940/    3591 : 2020 2020 5445      		dc.b "    TEST 10",$0A
             3597 : 5354 2031 300A    
(1)  941/    359D : 00                  		dc.b 0
(1)  942/    359E :                     		align 2
(1)  943/    359E : 5C77 205C 7720      str_ShowMe:	dc.b "\\w \\w \\w",0
             35A4 : 5C77 00          
(1)  944/    35A7 : FFFF D206 FFFF      		dc.l RAM_GemaArg0,RAM_GemaArg1,RAM_GemaArg2
             35AD : D208 FFFF D20A    
(1)  945/    35B3 :                     		align 2
(1)  946/    35B4 :                     str_Info:
(1)  947/    35B4 : 5C6C 00             		dc.b "\\l",0
(1)  948/    35B7 : FFFF BDD4           		dc.l RAM_Framecount
(1)  949/    35BB :                     		align 2
(1)  950/    35BC :                     ; str_Notes:
(1)  951/    35BC :                     ;  dc.b "---",0,"C#0",0,"D-0",0,"D#0",0,"E-0",0,"F-0",0,"F#0",0,"G-0",0,"G#0",0,"A-0",0,"A#0",0,"B-0",0
(1)  952/    35BC :                     ;  dc.b "C-1",0,"C#1",0,"D-1",0,"D#1",0,"E-1",0,"F-1",0,"F#1",0,"G-1",0,"G#1",0,"A-1",0,"A#1",0,"B-1",0
(1)  953/    35BC :                     ;  dc.b "C-2",0,"C#2",0,"D-2",0,"D#2",0,"E-2",0,"F-2",0,"F#2",0,"G-2",0,"G#2",0,"A-2",0,"A#2",0,"B-2",0
(1)  954/    35BC :                     ;  dc.b "C-3",0,"C#3",0,"D-3",0,"D#3",0,"E-3",0,"F-3",0,"F#3",0,"G-3",0,"G#3",0,"A-3",0,"A#3",0,"B-3",0
(1)  955/    35BC :                     ;  dc.b "C-4",0,"C#4",0,"D-4",0,"D#4",0,"E-4",0,"F-4",0,"F#4",0,"G-4",0,"G#4",0,"A-4",0,"A#4",0,"B-4",0
(1)  956/    35BC :                     ;  dc.b "C-5",0,"C#5",0,"D-5",0,"D#5",0,"E-5",0,"F-5",0,"F#5",0,"G-5",0,"G#5",0,"A-5",0,"A#5",0,"B-5",0
(1)  957/    35BC :                     ;  dc.b "C-6",0,"C#6",0,"D-6",0,"D#6",0,"E-6",0,"F-6",0,"F#6",0,"G-6",0,"G#6",0,"A-6",0,"A#6",0,"B-6",0
(1)  958/    35BC :                     ;  dc.b "C-7",0,"C#7",0,"D-7",0,"D#7",0,"E-7",0,"F-7",0,"F#7",0,"G-7",0,"G#7",0,"A-7",0,"A#7",0,"B-7",0
(1)  959/    35BC :                     ;  dc.b "C-8",0,"C#8",0,"D-8",0,"D#8",0,"E-8",0,"F-8",0,"F#8",0,"G-8",0,"G#8",0,"A-8",0,"A#8",0,"B-8",0
(1)  960/    35BC :                     ;  dc.b "C-9",0,"C#9",0,"D-9",0,"D#9",0,"E-9",0,"F-9",0,"F#9",0,"G-9",0,"G#9",0,"A-9",0,"A#9",0,"B-9",0
(1)  961/    35BC :                     ;  align 2
(1)  962/    35BC :                     ; str_Notes_FM:
(1)  963/    35BC :                     ;  dc.b "---",0
(1)  964/    35BC :                     ;  dc.b "C-",0,0,"C#",0,0,"D-",0,0,"D#",0,0,"E-",0,0,"F-",0,0
(1)  965/    35BC :                     ;  dc.b "F#",0,0,"G-",0,0,"G#",0,0,"A-",0,0,"A#",0,0,"B-",0,0
(1)  966/    35BC :                     ;  align 2
(1)  967/    35BC :                     ; str_Octv_FM:
(1)  968/    35BC :                     ;  dc.b "0",0,"1",0,"2",0,"3",0,"4",0,"5",0,"6",0,"7",0
(1)  969/    35BC :                     ;  align 2
(1)  970/    35BC :                     
     350/    35BC :                     mcscrn_e:
     351/    35BC :                     ; 	screen_code Md_Screen01,Md_Screen01_e,"game/screen_1/code.asm"
     352/    35BC :                     
     353/    35BC :                     ; ====================================================================
     354/    35BC :                     ; ----------------------------------------------------------------
     355/    35BC :                     ; 68K DATA BANKs
     356/    35BC :                     ;
     357/    35BC :                     ; SEGA CD / CD32X:
     358/    35BC :                     ; Stored in WORD-RAM pieces
     359/    35BC :                     ; limited to 256KB 2M or 128KB 1M/1M
     360/    35BC :                     ; ** WORD-RAM CANNOT BE USED IF USING ASIC STAMPS **
     361/    35BC :                     ;
     362/    35BC :                     ; SEGA 32X Cartridge:
     363/    35BC :                     ; Limited to 1MB bankswitchable.
     364/    35BC :                     ; ONLY 4 banks can be used, Bank 0 already uses the
     365/    35BC :                     ; first 512KB for the code.
     366/    35BC :                     ;
     367/    35BC :                     ; For multi-porting keep the data size limited to 256KB.
     368/    35BC :                     ; ----------------------------------------------------------------
     369/    35BC :                     
     370/    35BC :                     ; --------------------------------------------------------
     371/    35BC :                     ; DEFAULT BANK
     372/    35BC :                     ;
     373/    35BC :                     ; CD/CD32X:
     374/    35BC :                     ; $200000 256KB (WORD-RAM)
     375/    35BC :                     ;
     376/    35BC :                     ; 32X:
     377/    35BC :                     ; $900000 1MB (Bankswichable area)
     378/    35BC :                     ;
     379/    35BC :                     ; Usage:
     380/    35BC :                     ; data_bkset LABEL_START,OPTION
     381/    35BC :                     ; (your includes and bincludes)
     382/    35BC :                     ; data_bkend LABEL_START,LABEL_END,used_size
     383/    35BC :                     ;
     384/    35BC :                     ; OPTION (32X Cartridge ONLY):
     385/    35BC :                     ;  0, Normal 32X $900000 bank
     386/    35BC :                     ; -1, First 32X $900000 bank
     387/    35BC :                     ; * Ignored on other systems.
     388/    35BC :                     ; --------------------------------------------------------
     389/    35BC :                     
     390/    35BC : (MACRO)              	data_bkset MCD_DBANK0,-1
     390/    35BC :                     ; MCD_DBANK0:
     390/    35BC : =$35BC               MCD_DBANK0 label *
     391/    35BC :                     mdbank0:
     392/    35BC :                     		include "sound/tracks.asm"		; GEMA: Track data
(1)    1/    35BC :                     ; ================================================================
(1)    2/    35BC :                     ; ------------------------------------------------------------
(1)    3/    35BC :                     ; SOUND DATA SECTION
(1)    4/    35BC :                     ; ------------------------------------------------------------
(1)    5/    35BC :                     
(1)    6/    35BC :                     ; --------------------------------------------
(1)    7/    35BC :                     ; Instrument macros
(1)    8/    35BC :                     ; --------------------------------------------
(1)    9/    35BC :                     
(1)   10/    35BC :                     gInsNull macro
(1)   11/    35BC :                     	dc.b $00,$00,$00,$00
(1)   12/    35BC :                     	dc.b $00,$00,$00,$00
(1)   13/    35BC :                     	endm
(1)   14/    35BC :                     
(1)   15/    35BC :                     ; alv: attack level
(1)   16/    35BC :                     ; atk: attack rate
(1)   17/    35BC :                     ; slv: sustain
(1)   18/    35BC :                     ; dky: decay rate (up)
(1)   19/    35BC :                     ; rrt: release rate (down)
(1)   20/    35BC :                     ; vib: (TODO)
(1)   21/    35BC :                     gInsPsg	macro pitch,alv,atk,slv,dky,rrt,vib
(1)   22/    35BC :                     	dc.b $80,pitch,alv,atk
(1)   23/    35BC :                     	dc.b slv,dky,rrt,vib
(1)   24/    35BC :                     	endm
(1)   25/    35BC :                     
(1)   26/    35BC :                     ; same args as gInsPsg
(1)   27/    35BC :                     ; only one more argument for the noise type:
(1)   28/    35BC :                     ; mode: noise mode
(1)   29/    35BC :                     ;       %tmm
(1)   30/    35BC :                     ;        t  - Bass(0)|Noise(1)
(1)   31/    35BC :                     ;         mm- Clock(0)|Clock/2(1)|Clock/4(2)|Tone3(3)
(1)   32/    35BC :                     ;
(1)   33/    35BC :                     gInsPsgN macro pitch,alv,atk,slv,dky,rrt,vib,mode
(1)   34/    35BC :                     	dc.b $90|mode,pitch,alv,atk
(1)   35/    35BC :                     	dc.b slv,dky,rrt,vib
(1)   36/    35BC :                     	endm
(1)   37/    35BC :                     
(1)   38/    35BC :                     ; 24-bit ROM pointer to FM patch data
(1)   39/    35BC :                     gInsFm macro pitch,fmins
(1)   40/    35BC :                     	dc.b $A0,pitch,((fmins>>16)&$FF),((fmins>>8)&$FF)
(1)   41/    35BC :                     	dc.b fmins&$FF,$00,$00,$00
(1)   42/    35BC :                     	endm
(1)   43/    35BC :                     
(1)   44/    35BC :                     ; Same args as gInsFm, but the last 4 words of the data
(1)   45/    35BC :                     ; are the custom freqs for each operator in this order:
(1)   46/    35BC :                     ; OP1 OP2 OP3 OP4
(1)   47/    35BC :                     ;
(1)   48/    35BC :                     ; Pitch is useless here, set to 0
(1)   49/    35BC :                     gInsFm3	macro pitch,fmins
(1)   50/    35BC :                     	dc.b $B0,pitch,((fmins>>16)&$FF),((fmins>>8)&$FF)
(1)   51/    35BC :                     	dc.b fmins&$FF,$00,$00,$00
(1)   52/    35BC :                     	endm
(1)   53/    35BC :                     
(1)   54/    35BC :                     ; flags: %000L
(1)   55/    35BC :                     ;        L - Loop sample No/Yes
(1)   56/    35BC :                     gInsDac	macro pitch,start,flags
(1)   57/    35BC :                     	dc.b $C0|flags,pitch,((start>>16)&$FF),((start>>8)&$FF)
(1)   58/    35BC :                     	dc.b start&$FF,0,0,0
(1)   59/    35BC :                     	endm
(1)   60/    35BC :                     
(1)   61/    35BC :                     ; flags: %000L
(1)   62/    35BC :                     ;        L - Loop sample No/Yes
(1)   63/    35BC :                     gInsPcm	macro pitch,start,flags
(1)   64/    35BC :                      if MCD|MARSCD
(1)   65/    35BC :                     	dc.b $D0|flags,pitch,((start>>16)&$FF),((start>>8)&$FF)
(1)   66/    35BC :                     	dc.b start&$FF,0,0,0
(1)   67/    35BC :                      else
(1)   68/    35BC :                     	dc.b $00,$00,$00,$00
(1)   69/    35BC :                     	dc.b $00,$00,$00,$00
(1)   70/    35BC :                      endif
(1)   71/    35BC :                     	endm
(1)   72/    35BC :                     
(1)   73/    35BC :                     ; flags: %00SL
(1)   74/    35BC :                     ;        L - Loop sample No/Yes
(1)   75/    35BC :                     ;        S  - Sample data is on STEREO
(1)   76/    35BC :                     gInsPwm	macro pitch,start,flags
(1)   77/    35BC :                      if MARS|MARSCD
(1)   78/    35BC :                     	dc.b $E0|flags,pitch,((start>>24)&$FF),((start>>16)&$FF)
(1)   79/    35BC :                     	dc.b ((start>>8)&$FF),start&$FF,0,0
(1)   80/    35BC :                      else
(1)   81/    35BC :                     	dc.b $00,$00,$00,$00
(1)   82/    35BC :                     	dc.b $00,$00,$00,$00
(1)   83/    35BC :                      endif
(1)   84/    35BC :                     	endm
(1)   85/    35BC :                     
(1)   86/    35BC :                     ; ticks - %gttttttt
(1)   87/    35BC :                     ;   loc - 68k pointer
(1)   88/    35BC :                     ;
(1)   89/    35BC :                     ; t-Ticks
(1)   90/    35BC :                     ; g-Use global tempo
(1)   91/    35BC :                     gemaTrk macro ticks,loc
(1)   92/    35BC :                     	dc.l ((ticks&$FF)<<24)|loc&$FFFFFF
(1)   93/    35BC :                     	endm
(1)   94/    35BC :                     
(1)   95/    35BC :                     ; gemaHead
(1)   96/    35BC :                     ; block point, patt point, ins point
(1)   97/    35BC :                     ; numof_blocks,numof_patts,numof_ins
(1)   98/    35BC :                     gemaHead macro blk,pat,ins,num
(1)   99/    35BC :                     	dc.w num
(1)  100/    35BC :                     	dc.l blk
(1)  101/    35BC :                     	dc.l pat
(1)  102/    35BC :                     	dc.l ins
(1)  103/    35BC :                     	endm
(1)  104/    35BC :                     
(1)  105/    35BC :                     ; gemaTrack macro num,name
(1)  106/    35BC :                     ; 	gemaHead .blk,.pat,.ins,num
(1)  107/    35BC :                     ; .blk:
(1)  108/    35BC :                     ; 	binclude "sound/tracks/"+name+"_blk.bin"
(1)  109/    35BC :                     ; .pat:
(1)  110/    35BC :                     ; 	binclude "sound/tracks/"+name+"_patt.bin"
(1)  111/    35BC :                     ; .ins:
(1)  112/    35BC :                     ; 	endm
(1)  113/    35BC :                     
(1)  114/    35BC :                     ; ================================================================
(1)  115/    35BC :                     ; ------------------------------------------------------------
(1)  116/    35BC :                     ; Nikona MAIN track-list
(1)  117/    35BC :                     ;
(1)  118/    35BC :                     ; gemaTrk ticks+beatsbit*,track_data
(1)  119/    35BC :                     ; Add $80 ($80|ticks) to make the track use global sub-beats
(1)  120/    35BC :                     ;
(1)  121/    35BC :                     ; To use sub-beats call gemaSetBeats command
(1)  122/    35BC :                     ; BEFORE playing your track:
(1)  123/    35BC :                     ; 	move.w	#new_beats,d0
(1)  124/    35BC :                     ; 	bsr	gemaSetBeats
(1)  125/    35BC :                     ; 	move.w	#track_id,d0
(1)  126/    35BC :                     ;	bsr	gemaPlayTrack
(1)  127/    35BC :                     ; ------------------------------------------------------------
(1)  128/    35BC :                     
(1)  129/    35BC :                     	align 2
(1)  130/    35BC :                     Gema_MasterList:
(1)  131/    35BC : (MACRO)              	gemaTrk 6|$80,GemaTrk_MOVEME
(1)  131/    35BC : 8600 4D7F                   dc.l ((6|$80&$FF)<<24)|GEMATRK_MOVEME&$FFFFFF
(1)  132/    35C0 : (MACRO)              	gemaTrk 6|$80,GemaTrk_NadieMD
(1)  132/    35C0 : 8600 86DE                   dc.l ((6|$80&$FF)<<24)|GEMATRK_NADIEMD&$FFFFFF
(1)  133/    35C4 : (MACRO)              	gemaTrk 6|$80,GemaTrk_NadieMCD
(1)  133/    35C4 : 8600 99CC                   dc.l ((6|$80&$FF)<<24)|GEMATRK_NADIEMCD&$FFFFFF
(1)  134/    35C8 : (MACRO)              	gemaTrk 6|$80,GemaTrk_NadieMARS
(1)  134/    35C8 : 8600 AC7A                   dc.l ((6|$80&$FF)<<24)|GEMATRK_NADIEMARS&$FFFFFF
(1)  135/    35CC : (MACRO)              	gemaTrk 7,GemaTrk_Arena1
(1)  135/    35CC : 0700 36D4                   dc.l ((7&$FF)<<24)|GEMATRK_ARENA1&$FFFFFF
(1)  136/    35D0 : (MACRO)              	gemaTrk 3|$80,GemaTrk_Crystal
(1)  136/    35D0 : 8300 74A4                   dc.l ((3|$80&$FF)<<24)|GEMATRK_CRYSTAL&$FFFFFF
(1)  137/    35D4 : (MACRO)              	gemaTrk 3,GemaTrk_Dream
(1)  137/    35D4 : 0300 5D54                   dc.l ((3&$FF)<<24)|GEMATRK_DREAM&$FFFFFF
(1)  138/    35D8 :                     
(1)  139/    35D8 :                     ; ------------------------------------------------------------
(1)  140/    35D8 :                     ; BGM tracks
(1)  141/    35D8 :                     ; ------------------------------------------------------------
(1)  142/    35D8 :                     
(1)  143/    35D8 :                     GemaSfx_All:
(1)  144/    35D8 : (MACRO)              	gemaHead .blk,.pat,.ins,1
(1)  144/    35D8 : 0001                        dc.w 1
(1)  144/    35DA : 0000 35E6                   dc.l .BLK
(1)  144/    35DE : 0000 35EC                   dc.l .PAT
(1)  144/    35E2 : 0000 36AC                   dc.l .INS
(1)  145/    35E6 :                     .blk:
(1)  146/    35E6 :                     	binclude "sound/tracks/sfxall_blk.bin"
(1)  147/    35EB :                     	align 2
(1)  148/    35EC :                     .pat:
(1)  149/    35EC :                     	binclude "sound/tracks/sfxall_patt.bin"
(1)  150/    36AB :                     	align 2
(1)  151/    36AC :                     .ins:
(1)  152/    36AC : (MACRO)              	gInsPsgN 0,$00,$00,$00,$00,$00,0,%100
(1)  152/    36AC : 9400 0000                   dc.b $90|%100,0,$00,$00
(1)  152/    36B0 : 0000 0000                   dc.b $00,$00,$00,0
(1)  153/    36B4 : (MACRO)              	gInsPsgN 0,$00,$00,$00,$00,$00,0,%101
(1)  153/    36B4 : 9500 0000                   dc.b $90|%101,0,$00,$00
(1)  153/    36B8 : 0000 0000                   dc.b $00,$00,$00,0
(1)  154/    36BC : (MACRO)              	gInsPsgN 0,$00,$00,$00,$00,$00,0,%110
(1)  154/    36BC : 9600 0000                   dc.b $90|%110,0,$00,$00
(1)  154/    36C0 : 0000 0000                   dc.b $00,$00,$00,0
(1)  155/    36C4 : (MACRO)              	gInsFm 0,FmIns_Ding_1
(1)  155/    36C4 : A000 00C3                   dc.b $A0,0,((FMINS_DING_1>>16)&$FF),((FMINS_DING_1>>8)&$FF)
(1)  155/    36C8 : C800 0000                   dc.b FMINS_DING_1&$FF,$00,$00,$00
(1)  156/    36CC : (MACRO)              	gInsFm3 0,FmIns_Fm3_Explosion
(1)  156/    36CC : B000 00BF                   dc.b $B0,0,((FMINS_FM3_EXPLOSION>>16)&$FF),((FMINS_FM3_EXPLOSION>>8)&$FF)
(1)  156/    36D0 : 2800 0000                   dc.b FMINS_FM3_EXPLOSION&$FF,$00,$00,$00
(1)  157/    36D4 :                     
(1)  158/    36D4 :                     ; ------------------------------------------------------------
(1)  159/    36D4 :                     
(1)  160/    36D4 :                     GemaTrk_TEST_0:
(1)  161/    36D4 :                     
(1)  162/    36D4 :                     GemaTrk_Arena1:
(1)  163/    36D4 : (MACRO)              	gemaHead shrd_blk,shrd_pat,.ins,5
(1)  163/    36D4 : 0005                        dc.w 5
(1)  163/    36D6 : 0000 3752                   dc.l SHRD_BLK
(1)  163/    36DA : 0000 3760                   dc.l SHRD_PAT
(1)  163/    36DE : 0000 36E2                   dc.l .INS
(1)  164/    36E2 :                     .ins:
(1)  165/    36E2 : (MACRO)              	gInsPcm -17-6,PcmIns_Arena1_01,0
(1)  165/    36E2 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  165/    36E6 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  166/    36EA : (MACRO)              	gInsPcm -17-6,PcmIns_Arena1_02,0
(1)  166/    36EA : 0000 0000                   dc.b $00,$00,$00,$00
(1)  166/    36EE : 0000 0000                   dc.b $00,$00,$00,$00
(1)  167/    36F2 : (MACRO)              	gInsPcm -17-6,PcmIns_Arena1_03,0
(1)  167/    36F2 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  167/    36F6 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  168/    36FA : (MACRO)              	gInsPcm -17-6,PcmIns_Arena1_04,0
(1)  168/    36FA : 0000 0000                   dc.b $00,$00,$00,$00
(1)  168/    36FE : 0000 0000                   dc.b $00,$00,$00,$00
(1)  169/    3702 : (MACRO)              	gInsPcm -17-6,PcmIns_Arena1_05,1
(1)  169/    3702 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  169/    3706 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  170/    370A : (MACRO)              	gInsPcm -17-6,PcmIns_Arena1_06,0
(1)  170/    370A : 0000 0000                   dc.b $00,$00,$00,$00
(1)  170/    370E : 0000 0000                   dc.b $00,$00,$00,$00
(1)  171/    3712 : (MACRO)              	gInsPcm -17-6,PcmIns_Arena1_07,0
(1)  171/    3712 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  171/    3716 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  172/    371A : (MACRO)              	gInsPcm -17-6,PcmIns_Arena1_08,0
(1)  172/    371A : 0000 0000                   dc.b $00,$00,$00,$00
(1)  172/    371E : 0000 0000                   dc.b $00,$00,$00,$00
(1)  173/    3722 : (MACRO)              	gInsPcm -17-6,PcmIns_Arena1_09,0
(1)  173/    3722 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  173/    3726 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  174/    372A : (MACRO)              	gInsPcm -17-6,PcmIns_Arena1_10,0
(1)  174/    372A : 0000 0000                   dc.b $00,$00,$00,$00
(1)  174/    372E : 0000 0000                   dc.b $00,$00,$00,$00
(1)  175/    3732 : (MACRO)              	gInsPcm -17-6,PcmIns_Arena1_11,0
(1)  175/    3732 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  175/    3736 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  176/    373A : (MACRO)              	gInsPcm -17-6,PcmIns_Arena1_12,0
(1)  176/    373A : 0000 0000                   dc.b $00,$00,$00,$00
(1)  176/    373E : 0000 0000                   dc.b $00,$00,$00,$00
(1)  177/    3742 : (MACRO)              	gInsPcm -17-6,PcmIns_Arena1_13,0
(1)  177/    3742 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  177/    3746 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  178/    374A : (MACRO)              	gInsPcm -17-6,PcmIns_Arena1_14,0
(1)  178/    374A : 0000 0000                   dc.b $00,$00,$00,$00
(1)  178/    374E : 0000 0000                   dc.b $00,$00,$00,$00
(1)  179/    3752 :                     shrd_blk:
(1)  180/    3752 :                     	binclude "sound/tracks/arena1_blk.bin"
(1)  181/    3760 :                     shrd_pat:
(1)  182/    3760 :                     	binclude "sound/tracks/arena1_patt.bin"
(1)  183/    4D7F :                     
(1)  184/    4D7F :                     ; ------------------------------------------------------------
(1)  185/    4D7F :                     
(1)  186/    4D7F :                     GemaTrk_MOVEME:
(1)  187/    4D7F : (MACRO)              	gemaHead .blk,.pat,.ins,13
(1)  187/    4D7F : 000D                        dc.w 13
(1)  187/    4D81 : 0000 4D8D                   dc.l .BLK
(1)  187/    4D85 : 0000 4DA4                   dc.l .PAT
(1)  187/    4D89 : 0000 5CBC                   dc.l .INS
(1)  188/    4D8D :                     .blk:
(1)  189/    4D8D :                     	binclude "sound/tracks/moveme_blk.bin"
(1)  190/    4DA4 :                     	align 2
(1)  191/    4DA4 :                     .pat:
(1)  192/    4DA4 :                     	binclude "sound/tracks/moveme_patt.bin"
(1)  193/    5CBC :                     	align 2
(1)  194/    5CBC :                     .ins:
(1)  195/    5CBC : (MACRO)              	gInsPcm -12,PcmIns_MoveMe_Hit,%10
(1)  195/    5CBC : 0000 0000                   dc.b $00,$00,$00,$00
(1)  195/    5CC0 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  196/    5CC4 : (MACRO)              	gInsFm 0,FmIns_Bass_Duck
(1)  196/    5CC4 : A000 00C0                   dc.b $A0,0,((FMINS_BASS_DUCK>>16)&$FF),((FMINS_BASS_DUCK>>8)&$FF)
(1)  196/    5CC8 : A800 0000                   dc.b FMINS_BASS_DUCK&$FF,$00,$00,$00
(1)  197/    5CCC : (MACRO)              	gInsPcm -12,PcmIns_MoveMe_BrassL,%11
(1)  197/    5CCC : 0000 0000                   dc.b $00,$00,$00,$00
(1)  197/    5CD0 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  198/    5CD4 : (MACRO)              	gInsFm 0,FmIns_ClosedHat
(1)  198/    5CD4 : A000 00C4                   dc.b $A0,0,((FMINS_CLOSEDHAT>>16)&$FF),((FMINS_CLOSEDHAT>>8)&$FF)
(1)  198/    5CD8 : 8800 0000                   dc.b FMINS_CLOSEDHAT&$FF,$00,$00,$00
(1)  199/    5CDC : (MACRO)              	gInsPsgN 0,$00,$00,$00,$00,$04,0,%110
(1)  199/    5CDC : 9600 0000                   dc.b $90|%110,0,$00,$00
(1)  199/    5CE0 : 0000 0400                   dc.b $00,$00,$04,0
(1)  200/    5CE4 : (MACRO)              	gInsFm -12,FmIns_HBeat_tom
(1)  200/    5CE4 : A0F4 00C4                   dc.b $A0,-12,((FMINS_HBEAT_TOM>>16)&$FF),((FMINS_HBEAT_TOM>>8)&$FF)
(1)  200/    5CE8 : 0800 0000                   dc.b FMINS_HBEAT_TOM&$FF,$00,$00,$00
(1)  201/    5CEC : (MACRO)              	gInsPcm -12,PcmIns_Snare,%10
(1)  201/    5CEC : 0000 0000                   dc.b $00,$00,$00,$00
(1)  201/    5CF0 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  202/    5CF4 : (MACRO)              	gInsPcm -12,PcmIns_Kick,%10		;gInsFm -38,FmIns_DrumKick_gem
(1)  202/    5CF4 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  202/    5CF8 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  203/    5CFC : (MACRO)              	gInsFm -12,FmIns_Trumpet_carnival	;FmIns_Trumpet_2
(1)  203/    5CFC : A0F4 00C2                   dc.b $A0,-12,((FMINS_TRUMPET_CARNIVAL>>16)&$FF),((FMINS_TRUMPET_CARNIVAL>>8)&$FF)
(1)  203/    5D00 : 2800 0000                   dc.b FMINS_TRUMPET_CARNIVAL&$FF,$00,$00,$00
(1)  204/    5D04 : (MACRO)              	gInsPsg 0,$20,$20,$10,$01,$08,0		;gInsFm -12,FmIns_Ding_Baseball;
(1)  204/    5D04 : 8000 2020                   dc.b $80,0,$20,$20
(1)  204/    5D08 : 1001 0800                   dc.b $10,$01,$08,0
(1)  205/    5D0C : (MACRO)              	gInsFm3 0,FmIns_Sp_OpenHat
(1)  205/    5D0C : B000 00BF                   dc.b $B0,0,((FMINS_SP_OPENHAT>>16)&$FF),((FMINS_SP_OPENHAT>>8)&$FF)
(1)  205/    5D10 : 5000 0000                   dc.b FMINS_SP_OPENHAT&$FF,$00,$00,$00
(1)  206/    5D14 : (MACRO)              	gInsNull;gInsPwm -17,PwmIns_MyTime,%10
(1)  206/    5D14 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  206/    5D18 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  207/    5D1C : (MACRO)              	gInsPsg +12,$20,$10,$10,$0C,$0C,0
(1)  207/    5D1C : 800C 2010                   dc.b $80,+12,$20,$10
(1)  207/    5D20 : 100C 0C00                   dc.b $10,$0C,$0C,0
(1)  208/    5D24 : (MACRO)              	gInsPsg 0,$00,$00,$00,$00,$06,0
(1)  208/    5D24 : 8000 0000                   dc.b $80,0,$00,$00
(1)  208/    5D28 : 0000 0600                   dc.b $00,$00,$06,0
(1)  209/    5D2C : (MACRO)              	gInsPcm -12,PcmIns_MoveMe_BrassR,%11
(1)  209/    5D2C : 0000 0000                   dc.b $00,$00,$00,$00
(1)  209/    5D30 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  210/    5D34 : (MACRO)              	gInsNull
(1)  210/    5D34 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  210/    5D38 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  211/    5D3C : (MACRO)              	gInsNull
(1)  211/    5D3C : 0000 0000                   dc.b $00,$00,$00,$00
(1)  211/    5D40 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  212/    5D44 : (MACRO)              	gInsNull
(1)  212/    5D44 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  212/    5D48 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  213/    5D4C : (MACRO)              	gInsNull
(1)  213/    5D4C : 0000 0000                   dc.b $00,$00,$00,$00
(1)  213/    5D50 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  214/    5D54 :                     
(1)  215/    5D54 :                     ; ------------------------------------------------------------
(1)  216/    5D54 :                     
(1)  217/    5D54 :                     GemaTrk_Dream:
(1)  218/    5D54 : (MACRO)              	gemaHead .blk,.pat,.ins,8
(1)  218/    5D54 : 0008                        dc.w 8
(1)  218/    5D56 : 0000 5D62                   dc.l .BLK
(1)  218/    5D5A : 0000 5D6F                   dc.l .PAT
(1)  218/    5D5E : 0000 742C                   dc.l .INS
(1)  219/    5D62 :                     .blk:
(1)  220/    5D62 :                     	binclude "sound/tracks/dream_blk.bin"
(1)  221/    5D6F :                     .pat:
(1)  222/    5D6F :                     	binclude "sound/tracks/dream_patt.bin"
(1)  223/    742C :                     .ins:
(1)  224/    742C : (MACRO)              	gInsFm 0,FmIns_Hats_closed
(1)  224/    742C : A000 00C4                   dc.b $A0,0,((FMINS_HATS_CLOSED>>16)&$FF),((FMINS_HATS_CLOSED>>8)&$FF)
(1)  224/    7430 : 6800 0000                   dc.b FMINS_HATS_CLOSED&$FF,$00,$00,$00
(1)  225/    7434 : (MACRO)              	gInsDac +12,DacIns_Kick_wegot,0
(1)  225/    7434 : C00C 0207                   dc.b $C0|0,+12,((DACINS_KICK_WEGOT>>16)&$FF),((DACINS_KICK_WEGOT>>8)&$FF)
(1)  225/    7438 : 5400 0000                   dc.b DACINS_KICK_WEGOT&$FF,0,0,0
(1)  226/    743C : (MACRO)              	gInsFm -12,FmIns_brass_eur
(1)  226/    743C : A0F4 00C2                   dc.b $A0,-12,((FMINS_BRASS_EUR>>16)&$FF),((FMINS_BRASS_EUR>>8)&$FF)
(1)  226/    7440 : 4800 0000                   dc.b FMINS_BRASS_EUR&$FF,$00,$00,$00
(1)  227/    7444 : (MACRO)              	gInsFm -24,FmIns_Trumpet_carnival
(1)  227/    7444 : A0E8 00C2                   dc.b $A0,-24,((FMINS_TRUMPET_CARNIVAL>>16)&$FF),((FMINS_TRUMPET_CARNIVAL>>8)&$FF)
(1)  227/    7448 : 2800 0000                   dc.b FMINS_TRUMPET_CARNIVAL&$FF,$00,$00,$00
(1)  228/    744C : (MACRO)              	gInsPsg  0,$00,$20,$00,$02,$10,0
(1)  228/    744C : 8000 0020                   dc.b $80,0,$00,$20
(1)  228/    7450 : 0002 1000                   dc.b $00,$02,$10,0
(1)  229/    7454 : (MACRO)              	gInsPsgN 0,$00,$10,$00,$01,$04,0,%100
(1)  229/    7454 : 9400 0010                   dc.b $90|%100,0,$00,$10
(1)  229/    7458 : 0001 0400                   dc.b $00,$01,$04,0
(1)  230/    745C : (MACRO)              	gInsFm 0,FmIns_Bass_low_1
(1)  230/    745C : A000 00C1                   dc.b $A0,0,((FMINS_BASS_LOW_1>>16)&$FF),((FMINS_BASS_LOW_1>>8)&$FF)
(1)  230/    7460 : 4800 0000                   dc.b FMINS_BASS_LOW_1&$FF,$00,$00,$00
(1)  231/    7464 : (MACRO)              	gInsFm 0,FmIns_Hats_1
(1)  231/    7464 : A000 00C4                   dc.b $A0,0,((FMINS_HATS_1>>16)&$FF),((FMINS_HATS_1>>8)&$FF)
(1)  231/    7468 : 4800 0000                   dc.b FMINS_HATS_1&$FF,$00,$00,$00
(1)  232/    746C : (MACRO)              	gInsPsgN 0,$00,$10,$00,$01,$08,0,%101
(1)  232/    746C : 9500 0010                   dc.b $90|%101,0,$00,$10
(1)  232/    7470 : 0001 0800                   dc.b $00,$01,$08,0
(1)  233/    7474 : (MACRO)              	gInsNull
(1)  233/    7474 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  233/    7478 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  234/    747C : (MACRO)              	gInsNull
(1)  234/    747C : 0000 0000                   dc.b $00,$00,$00,$00
(1)  234/    7480 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  235/    7484 : (MACRO)              	gInsNull
(1)  235/    7484 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  235/    7488 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  236/    748C : (MACRO)              	gInsNull
(1)  236/    748C : 0000 0000                   dc.b $00,$00,$00,$00
(1)  236/    7490 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  237/    7494 : (MACRO)              	gInsPsg  0,$40,$00,$00,$00,$00,0
(1)  237/    7494 : 8000 4000                   dc.b $80,0,$40,$00
(1)  237/    7498 : 0000 0000                   dc.b $00,$00,$00,0
(1)  238/    749C : (MACRO)              	gInsFm -12,FmIns_Trumpet_1
(1)  238/    749C : A0F4 00C2                   dc.b $A0,-12,((FMINS_TRUMPET_1>>16)&$FF),((FMINS_TRUMPET_1>>8)&$FF)
(1)  238/    74A0 : 0800 0000                   dc.b FMINS_TRUMPET_1&$FF,$00,$00,$00
(1)  239/    74A4 :                     
(1)  240/    74A4 :                     ; Ticks: 3-1
(1)  241/    74A4 :                     ; TEMPO: 170
(1)  242/    74A4 :                     GemaTrk_Crystal:
(1)  243/    74A4 : (MACRO)              	gemaHead .blk,.pat,.ins,7
(1)  243/    74A4 : 0007                        dc.w 7
(1)  243/    74A6 : 0000 74B2                   dc.l .BLK
(1)  243/    74AA : 0000 74BA                   dc.l .PAT
(1)  243/    74AE : 0000 86AE                   dc.l .INS
(1)  244/    74B2 :                     .blk:
(1)  245/    74B2 :                     	binclude "sound/tracks/crystal_blk.bin"
(1)  246/    74BA :                     .pat:
(1)  247/    74BA :                     	binclude "sound/tracks/crystal_patt.bin"
(1)  248/    86AE :                     .ins:
(1)  249/    86AE : (MACRO)              	gInsFm 0,FmIns_Organ2a
(1)  249/    86AE : A000 00BF                   dc.b $A0,0,((FMINS_ORGAN2A>>16)&$FF),((FMINS_ORGAN2A>>8)&$FF)
(1)  249/    86B2 : 0800 0000                   dc.b FMINS_ORGAN2A&$FF,$00,$00,$00
(1)  250/    86B6 : (MACRO)              	gInsPsgN 0,$00,$10,$00,$01,$10,0,%100
(1)  250/    86B6 : 9400 0010                   dc.b $90|%100,0,$00,$10
(1)  250/    86BA : 0001 1000                   dc.b $00,$01,$10,0
(1)  251/    86BE : (MACRO)              	gInsDac 0,DacIns_Kick_wegot,0
(1)  251/    86BE : C000 0207                   dc.b $C0|0,0,((DACINS_KICK_WEGOT>>16)&$FF),((DACINS_KICK_WEGOT>>8)&$FF)
(1)  251/    86C2 : 5400 0000                   dc.b DACINS_KICK_WEGOT&$FF,0,0,0
(1)  252/    86C6 : (MACRO)              	gInsFm3 0,FmIns_Sp_OpenHat
(1)  252/    86C6 : B000 00BF                   dc.b $B0,0,((FMINS_SP_OPENHAT>>16)&$FF),((FMINS_SP_OPENHAT>>8)&$FF)
(1)  252/    86CA : 5000 0000                   dc.b FMINS_SP_OPENHAT&$FF,$00,$00,$00
(1)  253/    86CE : (MACRO)              	gInsNull
(1)  253/    86CE : 0000 0000                   dc.b $00,$00,$00,$00
(1)  253/    86D2 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  254/    86D6 : (MACRO)              	gInsFm 0,FmIns_Bass_low_1
(1)  254/    86D6 : A000 00C1                   dc.b $A0,0,((FMINS_BASS_LOW_1>>16)&$FF),((FMINS_BASS_LOW_1>>8)&$FF)
(1)  254/    86DA : 4800 0000                   dc.b FMINS_BASS_LOW_1&$FF,$00,$00,$00
(1)  255/    86DE :                     
(1)  256/    86DE :                     GemaTrk_NadieMD:
(1)  257/    86DE : (MACRO)              	gemaHead .blk,.patt,.inst,7
(1)  257/    86DE : 0007                        dc.w 7
(1)  257/    86E0 : 0000 86EC                   dc.l .BLK
(1)  257/    86E4 : 0000 86F4                   dc.l .PATT
(1)  257/    86E8 : 0000 9984                   dc.l .INST
(1)  258/    86EC :                     .blk:
(1)  259/    86EC :                     	binclude "sound/tracks/nadie_md_blk.bin"
(1)  260/    86F3 :                     	align 2
(1)  261/    86F4 :                     .patt:
(1)  262/    86F4 :                     	binclude "sound/tracks/nadie_md_patt.bin"
(1)  263/    9984 :                     	align 2
(1)  264/    9984 :                     .inst:
(1)  265/    9984 : (MACRO)              	gInsDac 0,DacIns_Nadie,0
(1)  265/    9984 : C000 0100                   dc.b $C0|0,0,((DACINS_NADIE>>16)&$FF),((DACINS_NADIE>>8)&$FF)
(1)  265/    9988 : 0000 0000                   dc.b DACINS_NADIE&$FF,0,0,0
(1)  266/    998C : (MACRO)              	gInsFm -36,FmIns_Piano_Aqua
(1)  266/    998C : A0DC 00C1                   dc.b $A0,-36,((FMINS_PIANO_AQUA>>16)&$FF),((FMINS_PIANO_AQUA>>8)&$FF)
(1)  266/    9990 : A800 0000                   dc.b FMINS_PIANO_AQUA&$FF,$00,$00,$00
(1)  267/    9994 : (MACRO)              	gInsFm -12,FmIns_HBeat_tom
(1)  267/    9994 : A0F4 00C4                   dc.b $A0,-12,((FMINS_HBEAT_TOM>>16)&$FF),((FMINS_HBEAT_TOM>>8)&$FF)
(1)  267/    9998 : 0800 0000                   dc.b FMINS_HBEAT_TOM&$FF,$00,$00,$00
(1)  268/    999C : (MACRO)              	gInsFm -37,FmIns_DrumKick_gem
(1)  268/    999C : A0DB 00C2                   dc.b $A0,-37,((FMINS_DRUMKICK_GEM>>16)&$FF),((FMINS_DRUMKICK_GEM>>8)&$FF)
(1)  268/    99A0 : C800 0000                   dc.b FMINS_DRUMKICK_GEM&$FF,$00,$00,$00
(1)  269/    99A4 : (MACRO)              	gInsPsg 0,$50,$70,$00,$06,$08,0
(1)  269/    99A4 : 8000 5070                   dc.b $80,0,$50,$70
(1)  269/    99A8 : 0006 0800                   dc.b $00,$06,$08,0
(1)  270/    99AC : (MACRO)              	gInsFm 0,FmIns_Trumpet_1
(1)  270/    99AC : A000 00C2                   dc.b $A0,0,((FMINS_TRUMPET_1>>16)&$FF),((FMINS_TRUMPET_1>>8)&$FF)
(1)  270/    99B0 : 0800 0000                   dc.b FMINS_TRUMPET_1&$FF,$00,$00,$00
(1)  271/    99B4 : (MACRO)              	gInsNull
(1)  271/    99B4 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  271/    99B8 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  272/    99BC : (MACRO)              	gInsFm3 0,FmIns_Sp_ClosedHat
(1)  272/    99BC : B000 00BF                   dc.b $B0,0,((FMINS_SP_CLOSEDHAT>>16)&$FF),((FMINS_SP_CLOSEDHAT>>8)&$FF)
(1)  272/    99C0 : 7800 0000                   dc.b FMINS_SP_CLOSEDHAT&$FF,$00,$00,$00
(1)  273/    99C4 : (MACRO)              	gInsFm3 0,FmIns_Sp_OpenHat
(1)  273/    99C4 : B000 00BF                   dc.b $B0,0,((FMINS_SP_OPENHAT>>16)&$FF),((FMINS_SP_OPENHAT>>8)&$FF)
(1)  273/    99C8 : 5000 0000                   dc.b FMINS_SP_OPENHAT&$FF,$00,$00,$00
(1)  274/    99CC :                     
(1)  275/    99CC :                     GemaTrk_NadieMCD:
(1)  276/    99CC : (MACRO)              	gemaHead .blk,.patt,.inst,11
(1)  276/    99CC : 000B                        dc.w 11
(1)  276/    99CE : 0000 99DA                   dc.l .BLK
(1)  276/    99D2 : 0000 99E2                   dc.l .PATT
(1)  276/    99D6 : 0000 AC32                   dc.l .INST
(1)  277/    99DA :                     .blk:
(1)  278/    99DA :                     	binclude "sound/tracks/nadie_mcd_blk.bin"
(1)  279/    99E1 :                     	align 2
(1)  280/    99E2 :                     .patt
(1)  281/    99E2 :                     	binclude "sound/tracks/nadie_mcd_patt.bin"
(1)  282/    AC32 :                     	align 2
(1)  283/    AC32 :                     .inst:
(1)  284/    AC32 : (MACRO)              	gInsPcm -12,PcmIns_NadieL,%10
(1)  284/    AC32 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  284/    AC36 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  285/    AC3A : (MACRO)              	gInsFm -36,FmIns_Piano_Aqua
(1)  285/    AC3A : A0DC 00C1                   dc.b $A0,-36,((FMINS_PIANO_AQUA>>16)&$FF),((FMINS_PIANO_AQUA>>8)&$FF)
(1)  285/    AC3E : A800 0000                   dc.b FMINS_PIANO_AQUA&$FF,$00,$00,$00
(1)  286/    AC42 : (MACRO)              	gInsFm -12,FmIns_HBeat_tom
(1)  286/    AC42 : A0F4 00C4                   dc.b $A0,-12,((FMINS_HBEAT_TOM>>16)&$FF),((FMINS_HBEAT_TOM>>8)&$FF)
(1)  286/    AC46 : 0800 0000                   dc.b FMINS_HBEAT_TOM&$FF,$00,$00,$00
(1)  287/    AC4A : (MACRO)              	gInsPcm -12-12,PcmIns_PKick,%00
(1)  287/    AC4A : 0000 0000                   dc.b $00,$00,$00,$00
(1)  287/    AC4E : 0000 0000                   dc.b $00,$00,$00,$00
(1)  288/    AC52 : (MACRO)              	gInsPsg 0,$50,$70,$00,$06,$08,0
(1)  288/    AC52 : 8000 5070                   dc.b $80,0,$50,$70
(1)  288/    AC56 : 0006 0800                   dc.b $00,$06,$08,0
(1)  289/    AC5A : (MACRO)              	gInsFm 0,FmIns_Trumpet_1
(1)  289/    AC5A : A000 00C2                   dc.b $A0,0,((FMINS_TRUMPET_1>>16)&$FF),((FMINS_TRUMPET_1>>8)&$FF)
(1)  289/    AC5E : 0800 0000                   dc.b FMINS_TRUMPET_1&$FF,$00,$00,$00
(1)  290/    AC62 : (MACRO)              	gInsPcm 0-12,PcmIns_Piano,%00
(1)  290/    AC62 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  290/    AC66 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  291/    AC6A : (MACRO)              	gInsPcm -12-12,PcmIns_PTom,%00
(1)  291/    AC6A : 0000 0000                   dc.b $00,$00,$00,$00
(1)  291/    AC6E : 0000 0000                   dc.b $00,$00,$00,$00
(1)  292/    AC72 : (MACRO)              	gInsPcm -12,PcmIns_NadieR,%10
(1)  292/    AC72 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  292/    AC76 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  293/    AC7A :                     
(1)  294/    AC7A :                     GemaTrk_NadieMARS:
(1)  295/    AC7A : (MACRO)              	gemaHead .blk,.patt,.inst,11
(1)  295/    AC7A : 000B                        dc.w 11
(1)  295/    AC7C : 0000 AC88                   dc.l .BLK
(1)  295/    AC80 : 0000 AC90                   dc.l .PATT
(1)  295/    AC84 : 0000 BEA0                   dc.l .INST
(1)  296/    AC88 :                     .blk:
(1)  297/    AC88 :                     	binclude "sound/tracks/nadie_blk.bin"
(1)  298/    AC8F :                     	align 2
(1)  299/    AC90 :                     .patt
(1)  300/    AC90 :                     	binclude "sound/tracks/nadie_patt.bin"
(1)  301/    BEA0 :                     	align 2
(1)  302/    BEA0 :                     .inst:
(1)  303/    BEA0 : (MACRO)              	gInsPwm 0,PwmIns_Nadie,%10
(1)  303/    BEA0 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  303/    BEA4 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  304/    BEA8 : (MACRO)              	gInsFm -36,FmIns_Piano_Aqua
(1)  304/    BEA8 : A0DC 00C1                   dc.b $A0,-36,((FMINS_PIANO_AQUA>>16)&$FF),((FMINS_PIANO_AQUA>>8)&$FF)
(1)  304/    BEAC : A800 0000                   dc.b FMINS_PIANO_AQUA&$FF,$00,$00,$00
(1)  305/    BEB0 : (MACRO)              	gInsFm -12,FmIns_HBeat_tom
(1)  305/    BEB0 : A0F4 00C4                   dc.b $A0,-12,((FMINS_HBEAT_TOM>>16)&$FF),((FMINS_HBEAT_TOM>>8)&$FF)
(1)  305/    BEB4 : 0800 0000                   dc.b FMINS_HBEAT_TOM&$FF,$00,$00,$00
(1)  306/    BEB8 : (MACRO)              	gInsPwm -12,PwmIns_PKick,%00
(1)  306/    BEB8 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  306/    BEBC : 0000 0000                   dc.b $00,$00,$00,$00
(1)  307/    BEC0 : (MACRO)              	gInsPsg 0,$50,$70,$00,$06,$08,0
(1)  307/    BEC0 : 8000 5070                   dc.b $80,0,$50,$70
(1)  307/    BEC4 : 0006 0800                   dc.b $00,$06,$08,0
(1)  308/    BEC8 : (MACRO)              	gInsFm 0,FmIns_Trumpet_1
(1)  308/    BEC8 : A000 00C2                   dc.b $A0,0,((FMINS_TRUMPET_1>>16)&$FF),((FMINS_TRUMPET_1>>8)&$FF)
(1)  308/    BECC : 0800 0000                   dc.b FMINS_TRUMPET_1&$FF,$00,$00,$00
(1)  309/    BED0 : (MACRO)              	gInsPwm 0,PwmIns_Piano,%00
(1)  309/    BED0 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  309/    BED4 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  310/    BED8 : (MACRO)              	gInsPwm -12,PwmIns_PTom,%00
(1)  310/    BED8 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  310/    BEDC : 0000 0000                   dc.b $00,$00,$00,$00
(1)  311/    BEE0 : (MACRO)              	gInsNull
(1)  311/    BEE0 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  311/    BEE4 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  312/    BEE8 :                     
     393/    BEE8 :                     		include "sound/instr.asm"		; GEMA: FM instruments
(1)    1/    BEE8 :                     ; ====================================================================
(1)    2/    BEE8 :                     ; --------------------------------------------------------
(1)    3/    BEE8 :                     ; GEMA/Nikona FM instruments "patches"
(1)    4/    BEE8 :                     ;
(1)    5/    BEE8 :                     ; Use the included FM_EDITOR.bin ROM to make your
(1)    6/    BEE8 :                     ; own instruments/patches
(1)    7/    BEE8 :                     ; --------------------------------------------------------
(1)    8/    BEE8 :                     
(1)    9/    BEE8 :                     ; FM_EDITOR savestate data is located at:
(1)   10/    BEE8 :                     ; $2478
(1)   11/    BEE8 :                     ;
(1)   12/    BEE8 :                     ; Sizes:
(1)   13/    BEE8 :                     ; Normal FM ins: $20
(1)   14/    BEE8 :                     ; Special FM ins: $28
(1)   15/    BEE8 :                     ;
(1)   16/    BEE8 :                     ; REGISTER FORMAT:
(1)   17/    BEE8 :                     ; dc.b $30,$34,$38,$3C
(1)   18/    BEE8 :                     ; dc.b $40,$44,$48,$4C
(1)   19/    BEE8 :                     ; dc.b $50,$54,$58,$5C
(1)   20/    BEE8 :                     ; dc.b $60,$64,$68,$6C
(1)   21/    BEE8 :                     ; dc.b $70,$74,$78,$7C
(1)   22/    BEE8 :                     ; dc.b $80,$84,$88,$8C
(1)   23/    BEE8 :                     ; dc.b $90,$94,$98,$9C
(1)   24/    BEE8 :                     ; dc.b $B0,$B4,$22,$28
(1)   25/    BEE8 :                     ; ** Extra words for FM3 special:
(1)   26/    BEE8 :                     ; dc.w OP1,OP2,OP3,OP4
(1)   27/    BEE8 :                     ;
(1)   28/    BEE8 :                     ; $22 LFO: %0000evvv
(1)   29/    BEE8 :                     ; e - Enable
(1)   30/    BEE8 :                     ; v - Value
(1)   31/    BEE8 :                     ;
(1)   32/    BEE8 :                     ; $28 KEYS: %oooo0000
(1)   33/    BEE8 :                     ; o - Operators 4-1
(1)   34/    BEE8 :                     
(1)   35/    BEE8 :                     FmIns_Organ2:
(1)   36/    BEE8 :                     		binclude "sound/instr/fm/organ2.gsx",$2478,$20
(1)   37/    BF08 :                     FmIns_Organ2a:
(1)   38/    BF08 :                     		binclude "sound/instr/fm/organ2a.gsx",$2478,$20
(1)   39/    BF28 :                     
(1)   40/    BF28 :                     ; FM3 Special
(1)   41/    BF28 :                     FmIns_Fm3_Explosion:
(1)   42/    BF28 :                     		binclude "sound/instr/fm/OLD/fm3_sfx_boomworm.gsx",$2478,$28
(1)   43/    BF50 :                     FmIns_Sp_OpenHat:
(1)   44/    BF50 :                     		binclude "sound/instr/fm/OLD/fm3_openhat.gsx",$2478,$28
(1)   45/    BF78 :                     FmIns_Sp_ClosedHat:
(1)   46/    BF78 :                     		binclude "sound/instr/fm/OLD/fm3_closedhat.gsx",$2478,$28
(1)   47/    BFA0 :                     FmIns_Sp_Cowbell:
(1)   48/    BFA0 :                     		binclude "sound/instr/fm/OLD/fm3_cowbell.gsx",$2478,$28
(1)   49/    BFC8 :                     ; BASS
(1)   50/    BFC8 :                     FmIns_Bass_1:
(1)   51/    BFC8 :                     		binclude "sound/instr/fm/OLD/bass_low.gsx",$2478,$20
(1)   52/    BFE8 :                     FmIns_Bass_2:
(1)   53/    BFE8 :                     		binclude "sound/instr/fm/OLD/bass_strong.gsx",$2478,$20
(1)   54/    C008 :                     FmIns_Bass_donna:
(1)   55/    C008 :                     		binclude "sound/instr/fm/OLD/bass_feellove.gsx",$2478,$20
(1)   56/    C028 :                     FmIns_Bass_groove:
(1)   57/    C028 :                     		binclude "sound/instr/fm/OLD/bass_groove.gsx",$2478,$20
(1)   58/    C048 :                     FmIns_Bass_groove_2:
(1)   59/    C048 :                     		binclude "sound/instr/fm/OLD/bass_groove_2.gsx",$2478,$20
(1)   60/    C068 :                     FmIns_Bass_groove_gem:
(1)   61/    C068 :                     		binclude "sound/instr/fm/OLD/bass_groove_gem.gsx",$2478,$20
(1)   62/    C088 :                     FmIns_Bass_italo:
(1)   63/    C088 :                     		binclude "sound/instr/fm/OLD/bass_italo.gsx",$2478,$20
(1)   64/    C0A8 :                     FmIns_Bass_duck:
(1)   65/    C0A8 :                     		binclude "sound/instr/fm/OLD/bass_duck.gsx",$2478,$20
(1)   66/    C0C8 :                     FmIns_Bass_4:
(1)   67/    C0C8 :                     		binclude "sound/instr/fm/OLD/bass_4.gsx",$2478,$20
(1)   68/    C0E8 :                     FmIns_Bass_8:
(1)   69/    C0E8 :                     		binclude "sound/instr/fm/OLD/bass_8.gsx",$2478,$20
(1)   70/    C108 :                     FmIns_Bass_club:
(1)   71/    C108 :                     		binclude "sound/instr/fm/OLD/OLD_bass_club.gsx",$2478,$20
(1)   72/    C128 :                     FmIns_Bass_calm:
(1)   73/    C128 :                     		binclude "sound/instr/fm/OLD/bass_calm.gsx",$2478,$20
(1)   74/    C148 :                     FmIns_Bass_low_1:
(1)   75/    C148 :                     		binclude "sound/instr/fm/OLD/bass_low_1.bin"
(1)   76/    C168 :                     FmIns_Bass_Oil:
(1)   77/    C168 :                     		binclude "sound/instr/fm/OLD/bass_oil.gsx",$2478,$20
(1)   78/    C188 :                     
(1)   79/    C188 :                     ; PIANO
(1)   80/    C188 :                     FmIns_PianoM1:
(1)   81/    C188 :                     		binclude "sound/instr/fm/OLD/piano_m1.gsx",$2478,$20
(1)   82/    C1A8 :                     FmIns_Piano_Aqua:
(1)   83/    C1A8 :                     		binclude "sound/instr/fm/OLD/piano_aqua.gsx",$2478,$20
(1)   84/    C1C8 :                     FmIns_Piano_Hard:
(1)   85/    C1C8 :                     		binclude "sound/instr/fm/OLD/piano_hard.bin"
(1)   86/    C1E8 :                     ; FmIns_Piano_m1:
(1)   87/    C1E8 :                     ; 		binclude "sound/instr/fm/OLD/piano_m1.gsx",$2478,$20
(1)   88/    C1E8 :                     
(1)   89/    C1E8 :                     
(1)   90/    C1E8 :                     FmIns_Synth_Plus:
(1)   91/    C1E8 :                     		binclude "sound/instr/fm/OLD/OLD_synthplus.gsx",$2478,$20
(1)   92/    C208 :                     
(1)   93/    C208 :                     FmIns_Trumpet_1:
(1)   94/    C208 :                     		binclude "sound/instr/fm/OLD/OLD_trumpet_1.gsx",$2478,$20
(1)   95/    C228 :                     FmIns_Trumpet_carnival:
(1)   96/    C228 :                     		binclude "sound/instr/fm/OLD/OLD_trumpet_carnivl.gsx",$2478,$20
(1)   97/    C248 :                     
(1)   98/    C248 :                     
(1)   99/    C248 :                     FmIns_brass_eur:
(1)  100/    C248 :                     		binclude "sound/instr/fm/OLD/OLD_brass_eur.gsx",$2478,$20
(1)  101/    C268 :                     FmIns_Brass_Puy:
(1)  102/    C268 :                     		binclude "sound/instr/fm/OLD/brass_puy.gsx",$2478,$20
(1)  103/    C288 :                     
(1)  104/    C288 :                     
(1)  105/    C288 :                     FmIns_Organ_Ito:
(1)  106/    C288 :                     		binclude "sound/instr/fm/OLD/organ_ito.gsx",$2478,$20
(1)  107/    C2A8 :                     FmIns_Ding_Baseball:
(1)  108/    C2A8 :                     		binclude "sound/instr/fm/OLD/ding_baseball.gsx",$2478,$20
(1)  109/    C2C8 :                     FmIns_DrumKick_gem:
(1)  110/    C2C8 :                     		binclude "sound/instr/fm/OLD/drum_kick_gem.gsx",$2478,$20
(1)  111/    C2E8 :                     
(1)  112/    C2E8 :                     
(1)  113/    C2E8 :                     FmIns_Trumpet_2:
(1)  114/    C2E8 :                     		binclude "sound/instr/fm/OLD/trumpet_2.gsx",$2478,$20
(1)  115/    C308 :                     FmIns_Trumpet_puy:
(1)  116/    C308 :                     		binclude "sound/instr/fm/OLD/trumpet_puy.gsx",$2478,$20
(1)  117/    C328 :                     FmIns_Marimba:
(1)  118/    C328 :                     		binclude "sound/instr/fm/OLD/marimba.gsx",$2478,$20
(1)  119/    C348 :                     
(1)  120/    C348 :                     FmIns_Ding_toy:
(1)  121/    C348 :                     		binclude "sound/instr/fm/OLD/ding_toy.gsx",$2478,$20
(1)  122/    C368 :                     
(1)  123/    C368 :                     FmIns_Flaute_cave:
(1)  124/    C368 :                     		binclude "sound/instr/fm/OLD/flaute_sea.gsx",$2478,$20
(1)  125/    C388 :                     FmIns_Banjo_puy:
(1)  126/    C388 :                     		binclude "sound/instr/fm/OLD/banjo_puy.gsx",$2478,$20
(1)  127/    C3A8 :                     FmIns_PSynth_plus:
(1)  128/    C3A8 :                     		binclude "sound/instr/fm/OLD/psynth_plus.gsx",$2478,$20
(1)  129/    C3C8 :                     FmIns_Ding_1:
(1)  130/    C3C8 :                     		binclude "sound/instr/fm/OLD/ding_gem.gsx",$2478,$20
(1)  131/    C3E8 :                     FmIns_Trombone_gem:
(1)  132/    C3E8 :                     		binclude "sound/instr/fm/OLD/trombone_gem.gsx",$2478,$20
(1)  133/    C408 :                     FmIns_HBeat_tom:
(1)  134/    C408 :                     		binclude "sound/instr/fm/OLD/nadia_tom.gsx",$2478,$20
(1)  135/    C428 :                     FmIns_Guitar_bball:
(1)  136/    C428 :                     		binclude "sound/instr/fm/OLD/guitar_bball.gsx",$2478,$20
(1)  137/    C448 :                     
(1)  138/    C448 :                     FmIns_Hats_1:
(1)  139/    C448 :                     		binclude "sound/instr/fm/OLD/fm_hats_spot.bin"
(1)  140/    C468 :                     FmIns_Hats_closed:
(1)  141/    C468 :                     		binclude "sound/instr/fm/OLD/hats_closed.gsx",$2478,$20
(1)  142/    C488 :                     FmIns_ClosedHat:
(1)  143/    C488 :                     		binclude "sound/instr/fm/OLD/hats_closed.gsx",$2478,$20
(1)  144/    C4A8 :                     
(1)  145/    C4A8 :                     FmIns_Sewer_1:
(1)  146/    C4A8 :                     		binclude "sound/instr/fm/OLD/sewer_1.bin"
(1)  147/    C4C8 :                     
(1)  148/    C4C8 :                     
(1)  149/    C4C8 :                     FmIns_Ambient_dark:
(1)  150/    C4C8 :                     		binclude "sound/instr/fm/OLD/ambient_dark.gsx",$2478,$20
(1)  151/    C4E8 :                     FmIns_Ambient_spook:
(1)  152/    C4E8 :                     		binclude "sound/instr/fm/OLD/ambient_spook.gsx",$2478,$20
(1)  153/    C508 :                     FmIns_Ambient_3:
(1)  154/    C508 :                     		binclude "sound/instr/fm/OLD/ambient_3.gsx",$2478,$20
(1)  155/    C528 :                     
(1)  156/    C528 :                     
(1)  157/    C528 :                     ; FmIns_Guitar_bball:
(1)  158/    C528 :                     ; 		binclude "sound/instr/fm/guitar_bball.gsx",$2478,$20
(1)  159/    C528 :                     
     394/    C528 :                     		include "sound/smpl_dac.asm"		; (MCD/CD32X ONLY) GEMA: DAC samples
(1)    1/    C528 :                     ; ====================================================================
(1)    2/    C528 :                     ; --------------------------------------------------------
(1)    3/    C528 :                     ; GEMA/Nikona DAC instruments
(1)    4/    C528 :                     ;
(1)    5/    C528 :                     ; This must be located at the 68k's 900000 area.
(1)    6/    C528 :                     ; ** 68K BANK 0 only **
(1)    7/    C528 :                     ;
(1)    8/    C528 :                     ; BASE Samplerate is at 16000hz
(1)    9/    C528 :                     ; --------------------------------------------------------
(1)   10/    C528 :                     
(1)   11/    C528 :                     	align $8000
(1)   12/   10000 :                     
(1)   13/   10000 :                     ; --------------------------------------------------------
(1)   14/   10000 :                     
(1)   15/   10000 :                     DacIns_Nadie:
(1)   16/   10000 : (MACRO)              	gSmpHead .end-.start,0
(1)   16/   10000 : B4DF 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   16/   10003 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   17/   10006 :                     .start:	binclude "sound/instr/smpl/nadie.wav",$2C
(1)   18/   1DFBA :                     .end:
(1)   19/   1DFBA :                     DacIns_Kick_techno:
(1)   20/   1DFBA : (MACRO)              	gSmpHead .end-.start,0
(1)   20/   1DFBA : 9C06 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   20/   1DFBD : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   21/   1DFC0 :                     .start:	binclude "sound/instr/smpl/ST-72_kick.wav",$2C
(1)   22/   1E65C :                     .end:
(1)   23/   1E65C :                     DacIns_Snare_techno:
(1)   24/   1E65C : (MACRO)              	gSmpHead .end-.start,0
(1)   24/   1E65C : F220 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   24/   1E65F : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   25/   1E662 :                     .start:	binclude "sound/instr/smpl/ST-79_snare.wav",$2C
(1)   26/   20754 :                     .end:
(1)   27/   20754 :                     DacIns_Kick_wegot:
(1)   28/   20754 : (MACRO)              	gSmpHead .end-.start,0
(1)   28/   20754 : 7407 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   28/   20757 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   29/   2075A :                     .start:	binclude "sound/instr/smpl/wegot_kick.wav",$2C
(1)   30/   20ECE :                     .end:
(1)   31/   20ECE :                     
     395/   20ECE :                     		include "game/screen_0/data_bank.asm"
(1)    1/   20ECE :                     ; ====================================================================
(1)    2/   20ECE :                     ; ----------------------------------------------------------------
(1)    3/   20ECE :                     ; 68K SCREEN MODE DATA
(1)    4/   20ECE :                     ; for big stuff like maps, level, etc.
(1)    5/   20ECE :                     ;
(1)    6/   20ECE :                     ; For Genesis graphics use data_dma.asm
(1)    7/   20ECE :                     ; and for 32X graphics use data_mgfx.asm
(1)    8/   20ECE :                     ;
(1)    9/   20ECE :                     ; 32X 256-COLOR PALETTES GO HERE.
(1)   10/   20ECE :                     ;
(1)   11/   20ECE :                     ; Maximum size: $0FFFFF bytes per bank
(1)   12/   20ECE :                     ; ----------------------------------------------------------------
(1)   13/   20ECE :                     
(1)   14/   20ECE :                     ; ----------------------------------------------------------------
(1)   15/   20ECE :                     ; 32X Screen maps
(1)   16/   20ECE :                     ; ----------------------------------------------------------------
(1)   17/   20ECE :                     
(1)   18/   20ECE :                     MAP_TEST:
(1)   19/   20ECE :                     		binclude "game/screen_0/data/maps/md/test/md_map.bin"
(1)   20/   2178E :                     		align 2
(1)   21/   2178E :                     MapMars_TEST:
(1)   22/   2178E :                     		binclude "game/screen_0/data/maps/mars/test/data_map.bin"
(1)   23/   219BE :                     		align 2
(1)   24/   219BE :                     
(1)   25/   219BE :                     ; ----------------------------------------------------------------
(1)   26/   219BE :                     ; 32X Palettes
(1)   27/   219BE :                     ; ----------------------------------------------------------------
(1)   28/   219BE :                     
(1)   29/   219BE :                     PalMars_TEST:
(1)   30/   219BE :                     		binclude "game/screen_0/data/maps/mars/test/data_pal.bin"
(1)   31/   21BBE :                     		align 2
(1)   32/   21BBE :                     PalMars_Sabrina:
(1)   33/   21BBE :                     		binclude "game/screen_0/data/objects/mars/sabrina/sabrina_pal.bin"
(1)   34/   21BDE :                     		align 2
(1)   35/   21BDE :                     
(1)   36/   21BDE :                     ; ----------------------------------------------------------------
(1)   37/   21BDE :                     ; Object palettes
(1)   38/   21BDE :                     ; ----------------------------------------------------------------
(1)   39/   21BDE :                     
(1)   40/   21BDE :                     objPal_Sisi:
(1)   41/   21BDE :                     		binclude "game/screen_0/data/objects/md/sisi/sisi_pal.bin"
(1)   42/   21BFE :                     		align 2
(1)   43/   21BFE :                     
(1)   44/   21BFE :                     ; ----------------------------------------------------------------
(1)   45/   21BFE :                     ; Object maps
(1)   46/   21BFE :                     ; ----------------------------------------------------------------
(1)   47/   21BFE :                     
(1)   48/   21BFE :                     objMap_Sisi:
(1)   49/   21BFE :                     		binclude "game/screen_0/data/objects/md/sisi/sisi_map.bin"
(1)   50/   21C5A :                     		align 2
(1)   51/   21C5A :                     
     399/   21C5A :                     mdbank0_e:
     400/   21C5A : (MACRO)              	data_bkend MCD_DBANK0,MCD_DBANK0_e,mdbank0_e-mdbank0
     400/   21C5A :                     
     401/   21C5A :                     
     402/   21C5A :                     ; --------------------------------------------------------
     403/   21C5A :                     ; BANK 1
     404/   21C5A :                     ; --------------------------------------------------------
     405/   21C5A :                     
     406/   21C5A :                     ; 	data_bank MCD_DBANK1,-1
     407/   21C5A :                     ; 		org $200000-4
     408/   21C5A :                     ; 		dc.b "BNK1"
     409/   21C5A :                     ; 	data_bank_e MCD_DBANK1_e
     410/   21C5A :                     
     411/   21C5A :                     ; --------------------------------------------------------
     412/   21C5A :                     ; BANK 2
     413/   21C5A :                     ; --------------------------------------------------------
     414/   21C5A :                     
     415/   21C5A :                     ; 	data_bank MCD_DBANK2,-1
     416/   21C5A :                     ; 		org $300000-4
     417/   21C5A :                     ; 		dc.b "BNK2"
     418/   21C5A :                     ; 	data_bank_e MCD_DBANK2_e
     419/   21C5A :                     
     420/   21C5A :                     ; --------------------------------------------------------
     421/   21C5A :                     ; BANK 3
     422/   21C5A :                     ; --------------------------------------------------------
     423/   21C5A :                     
     424/   21C5A :                     ; 	data_bank MCD_DBANK3,-1
     425/   21C5A :                     ; 		org $400000-4
     426/   21C5A :                     ; 		dc.b "BNK3"
     427/   21C5A :                     ; 	data_bank_e MCD_DBANK3_e
     428/   21C5A :                     
     429/   21C5A :                     ; ====================================================================
     430/   21C5A :                     ; ----------------------------------------------------------------
     431/   21C5A :                     ; 32X/CD32X ONLY
     432/   21C5A :                     ;
     433/   21C5A :                     ; SDRAM DATA packages for each screen mode
     434/   21C5A :                     ;
     435/   21C5A :                     ; Usage:
     436/   21C5A :                     ; sdram_bank START_LABEL,END_LABEL
     437/   21C5A :                     ; (includes and bincludes)
     438/   21C5A :                     ; sdram_bank_e START_LABEL,END_LABEL
     439/   21C5A :                     ; ----------------------------------------------------------------
     440/   21C5A :                     
     441/   21C5A :                     ; ---------------------------------------------
     442/   21C5A :                     ; DEFAULT
     443/   21C5A :                     ; ---------------------------------------------
     444/   21C5A :                     
     445/   21C5A : (MACRO)              	sdram_bkset MARSDATA_DEFAULT,MARSDATA_DEFAULT_e
     445/   21C5A :                     ; MARSDATA_DEFAULT:
     445/   21C5A : =$21C5A              MARSDATA_DEFAULT label *
     446/   21C5A :                     	include "game/screen_0/data_mgfx.asm"
(1)    1/   21C5A :                     ; ====================================================================
(1)    2/   21C5A :                     ; ----------------------------------------------------------------
(1)    3/   21C5A :                     ; Put your 32X graphics here, indexed or direct
(1)    4/   21C5A :                     ;
(1)    5/   21C5A :                     ; These are located on the SH2's ROM area, this will be gone
(1)    6/   21C5A :                     ; if RV is set to 1
(1)    7/   21C5A :                     ;
(1)    8/   21C5A :                     ; Labels MUST be aligned by 4
(1)    9/   21C5A :                     ; ----------------------------------------------------------------
(1)   10/   21C5A :                     
(1)   11/   21C5A :                     		align 4
(1)   12/   21C5C :                     ; ArtMars_Sabrina:
(1)   13/   21C5C :                     ; 		binclude "game/screen_0/data/objects/mars/sabrina/sabrina_art.bin"
(1)   14/   21C5C :                     ; 		align 4
(1)   15/   21C5C :                     ArtMars_TEST:
(1)   16/   21C5C :                     		binclude "game/screen_0/data/maps/mars/test/data_art.bin"
(1)   17/   3345C :                     		align 4
(1)   18/   3345C :                     
(1)   19/   3345C :                     
(1)   20/   3345C :                     
     447/   3345C : (MACRO)              	sdram_bkend MARSDATA_DEFAULT,MARSDATA_DEFAULT_e
     447/   3345C : =$3345C              MARSDATA_DEFAULT_E label *
     448/   3345C :                     
     449/   3345C :                     ; ====================================================================
     450/   3345C :                     ; ----------------------------------------------------------------
     451/   3345C :                     ; Cartridge DMA graphics data
     452/   3345C :                     ;
     453/   3345C :                     ; BANK-free on 32X Cartridge
     454/   3345C :                     ; ----------------------------------------------------------------
     455/   3345C :                     
     457/   3345C :                     		include "game/screen_0/data_dma.asm"
(1)    1/   3345C :                     ; ====================================================================
(1)    2/   3345C :                     ; ----------------------------------------------------------------
(1)    3/   3345C :                     ; DMA Graphics for this screen
(1)    4/   3345C :                     ; ----------------------------------------------------------------
(1)    5/   3345C :                     
(1)    6/   3345C :                     ASCII_FONT:	binclude "system/md/data/font.bin"
(1)    7/   3405C :                     
(1)    8/   3405C :                     ; ----------------------------------------------------------------
(1)    9/   3405C :                     ; Commmon graphics
(1)   10/   3405C :                     ; ----------------------------------------------------------------
(1)   11/   3405C :                     
(1)   12/   3405C :                     ART_TEST:
(1)   13/   3405C :                     		binclude "game/screen_0/data/maps/md/test/md_art.bin"
(1)   14/   3C7DC :                     ART_TEST_e:
(1)   15/   3C7DC :                     		align 2
(1)   16/   3C7DC :                     
(1)   17/   3C7DC :                     ; ----------------------------------------------------------------
(1)   18/   3C7DC :                     ; Object graphics
(1)   19/   3C7DC :                     ; ----------------------------------------------------------------
(1)   20/   3C7DC :                     
(1)   21/   3C7DC :                     Art_Sisi:	binclude "game/screen_0/data/objects/md/sisi/sisi_art.bin"
(1)   22/   3CDBC :                     Art_Sisi_e:
(1)   23/   3CDBC :                     		align 2
(1)   24/   3CDBC :                     
     459/   3CDBC :                     
     460/   3CDBC :                     ; ====================================================================
     461/   3CDBC :                     ; ---------------------------------------------
     462/   3CDBC :                     ; End
     463/   3CDBC :                     ; ---------------------------------------------
     464/   3CDBC :                     
     465/   3CDBC :                     ROM_END:
     471/   3CDBC :                     		align $8000			; Cartridge padding
     473/   40000 :                     
 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 3 - 02/08/2024 04:21:46 AM


  Symbol Table (* = unused):
  --------------------------

*ADAPTER :                        0 - | *ADEN :                           2 - |
 ALV :                           24 - |
*ARCHITECTURE :                                      "x86_64-unknown-linux" - |
*ARTMARS_TEST :               21C5C C |  ART_SISI :                   3C7DC C |
 ART_SISI_E :                 3CDBC C |  ART_TEST :                   3405C C |
 ART_TEST_E :                 3C7DC C |  ASCII_FONT :                 3345C C |
 ASCII_PAL :                    3AA C |  ATK :                            8 - |
*BIGENDIAN :                      0 - | *BITBGON :                        7 - |
*BITCLICKL :                      0 - | *BITCLICKM :                      2 - |
*BITCLICKR :                      1 - | *BITCLICKS :                      3 - |
 BITDISPENBL :                    6 - |  BITDMA :                         1 - |
 BITDMAENBL :                     4 - | *BITDRWD :                        2 - |
*BITDRWL :                        1 - | *BITDRWR :                        0 - |
*BITDRWU :                        3 - | *BITFIFOE :                       9 - |
*BITFIFOF :                       8 - | *BITHBLK :                        2 - |
*BITHINTENBL :                    4 - | *BITHVSTOP :                      1 - |
*BITJOYA :                        6 - |  BITJOYB :                        4 - |
 BITJOYC :                        5 - |  BITJOYDOWN :                     1 - |
 BITJOYLEFT :                     2 - | *BITJOYMODE :                     B - |
 BITJOYRIGHT :                    3 - |  BITJOYSTART :                    7 - |
 BITJOYUP :                       0 - | *BITJOYX :                        A - |
*BITJOYY :                        9 - | *BITJOYZ :                        8 - |
*BITMAPMD :                       1 - | *BITMARSBG :                      6 - |
 BITOBJ_FLIPH :                   0 - |  BITOBJ_FLIPV :                   1 - |
 BITOBJ_MARS :                    7 - | *BITODD :                         4 - |
*BITPAL :                         0 - | *BITSPRCOL :                      5 - |
*BITSPROVR :                      6 - | *BITV30 :                         3 - |
 BITVBLK :                        3 - | *BITVINT :                        7 - |
*BITVINTENBL :                    5 - | *BITWRAMMODE :                    2 - |
*BRANCHEXT :                      0 - | *CART :                           1 - |
*CASESENSITIVE :                  0 - |  CDRAMDST :                      31 C |
 CDRAMLEN :                      30 C |  CDRAMSRC :                      33 C |
 CDRAMSRCB :                     35 C |  CHECK_THISRAM :   FFFFFFFFFFFFA000 C |
 CHIP_ENV :                    118A C |  CHIP_ENV.ATKEND :             120D C |
*CHIP_ENV.ATKZERO :            1210 C |  CHIP_ENV.CHK2 :               1216 C |
 CHIP_ENV.CHK4 :               124B C |  CHIP_ENV.CKOF :               11AE C |
 CHIP_ENV.CKON :               11C1 C | *CHIP_ENV.DECTMR :             121A C |
 CHIP_ENV.DKADD :              1234 C |  CHIP_ENV.DKSAV :              123C C |
 CHIP_ENV.DKYEND :             1241 C |  CHIP_ENV.DO_NFREQ :           12A0 C |
 CHIP_ENV.ENVPROC :            11DF C |  CHIP_ENV.KILLENV :            1261 C |
*CHIP_ENV.NBLOCK :             11DF C |  CHIP_ENV.NORMAL :             129B C |
 CHIP_ENV.NOUPD :              12E1 C |  CHIP_ENV.NSKIP :              11D6 C |
 CHIP_ENV.SILNC_3 :            1297 C |  CHIP_ENV.VEDLP :              1269 C |
 CHIP_ENV.VLMUCH :             12CD C |  CHIP_ENV.VLOOP :              1196 C |
 CHIP_ENV.VONLY :              12C3 C |  CHNL_CHIP :                      1 - |
 CHNL_EFFARG :                    6 - |  CHNL_EFFID :                     5 - |
 CHNL_FLAGS :                     0 - |  CHNL_INS :                       3 - |
 CHNL_NOTE :                      2 - |  CHNL_TYPE :                      7 - |
 CHNL_VOL :                       4 - | *CLICKL :                         2 - |
*CLICKM :                         4 - | *CLICKR :                         1 - |
*CLICKS :                         8 - | *CMDINTCLR :                     1A - |
*CMDIRQ_ON :                      2 - |  COM :                            0 - |
*COMM0 :                         20 - | *COMM1 :                         21 - |
*COMM10 :                        2A - | *COMM11 :                        2B - |
*COMM12 :                        2C - | *COMM13 :                        2D - |
*COMM14 :                        2E - | *COMM15 :                        2F - |
*COMM2 :                         22 - | *COMM3 :                         23 - |
*COMM4 :                         24 - | *COMM5 :                         25 - |
*COMM6 :                         26 - | *COMM7 :                         27 - |
*COMM8 :                         28 - | *COMM9 :                         29 - |
 COMMZFIFO :                     40 C |  COMMZREAD :                   1F85 C |
 COMMZROMBLK :                   2F C |  COMMZWRITE :                    2E C |
*COMPMODE :                       0 - | *CONSTPI :        3.141592653589793 - |
 CONTROLLER_1 :    FFFFFFFFFFFFC004 - | *CONTROLLER_2 :    FFFFFFFFFFFFC014 - |
*CS0 :                            0 - | *CS1 :                      2000000 - |
 CS2 :                      4000000 - | *CS3 :                      6000000 - |
*CURRPADDING :                    0 - |  CURRTICKBITS :                1F96 C |
*CUSTOM :                         0 - | *CYCLE :                         32 - |
*DACINS_KICK_TECHNO :         1DFBA C |  DACINS_KICK_TECHNO.END :     1E65C C |
 DACINS_KICK_TECHNO.START :   1DFC0 C |  DACINS_KICK_WEGOT :          20754 C |
 DACINS_KICK_WEGOT.END :      20ECE C |  DACINS_KICK_WEGOT.START :    2075A C |
 DACINS_NADIE :               10000 C |  DACINS_NADIE.END :           1DFBA C |
 DACINS_NADIE.START :         10006 C | *DACINS_SNARE_TECHNO :        1E65C C |
 DACINS_SNARE_TECHNO.END :    20754 C |  DACINS_SNARE_TECHNO.START :  1E662 C |
 DAC_FILL :                      20 C |  DAC_ME :                         8 C |
 DAC_OFF :                     131C C |  DAC_ON :                      1307 C |
 DAC_PLAY :                    1331 C |  DAC_REFILL :                  1365 C |
 DAC_REFILL.DACFILL_END :      1424 C |  DAC_REFILL.DACFILL_LOOP :     13DD C |
 DAC_REFILL.DACFILL_RET :      1427 C |  DAC_REFILL.DAC_OVER :         13B3 C |
 DATE :                "02/08/2024" - |  DDACCNTR :                    1F9B C |
 DDACFIFOMID :                 1F97 C |  DDACPNTR :                    1F98 C |
*DISPENBL :                      40 - |  DKY :                            C - |
*DMAENBL :                       10 - | *DOTTEDSTRUCTS :                  0 - |
*DREQCTL :                        6 - | *DREQDEST :                       C - |
*DREQFIFO :                      12 - | *DREQLEN :                       10 - |
*DREQSOURCE :                     8 - |  DRV_LOOP :                      84 C |
 DRV_LOOP.CMND_0 :              12A C |  DRV_LOOP.CMND_1 :              12D C |
 DRV_LOOP.CMND_2 :              146 C |  DRV_LOOP.CMND_3 :              199 C |
 DRV_LOOP.CMND_8 :              1DD C |  DRV_LOOP.CMND_C :              1FF C |
 DRV_LOOP.FOUND_F :             234 C |  DRV_LOOP.GETCBYTEL :            ED C |
 DRV_LOOP.GRAB_ARG :             EB C |  DRV_LOOP.LIST :                10A C |
 DRV_LOOP.NEITHER :              C4 C |  DRV_LOOP.NEXT :                172 C |
 DRV_LOOP.NEXT_CMD :             C8 C |  DRV_LOOP.NEXT_F :              212 C |
 DRV_LOOP.NEXT_SALL :           1E1 C |  DRV_LOOP.NOBEATS :              AB C |
 DRV_LOOP.NOTICKS :              9E C |  DRV_LOOP.NOT_ON :              1F7 C |
 DRV_LOOP.SRCH_DEL :            1C2 C |  DRV_LOOP.SRCH_FOR :            210 C |
 DRV_LOOP.SRCH_MODE :           170 C |  DRV_LOOP.WRTTO_DEL :           1D6 C |
 DRV_LOOP.WRTTO_SLOT :          18B C |  DTBL_FROMMUL :                 852 C |
 DTBL_FROMMUL.CHNL_ULNK :      101E C |  DTBL_FROMMUL.CHNL_ULNKCUT :   1036 C |
 DTBL_FROMMUL.CHNL_ULNKOFF :   101E C |  DTBL_FROMMUL.DAC_CUT :         B9E C |
 DTBL_FROMMUL.DAC_NOTE :        B95 C |  DTBL_FROMMUL.DAC_OFF :         BA4 C |
 DTBL_FROMMUL.DAC_PAN :         B85 C |  DTBL_FROMMUL.DAC_PITCH :       BA7 C |
 DTBL_FROMMUL.D_CONT :          D85 C |  DTBL_FROMMUL.EFFC :            CF2 C |
 DTBL_FROMMUL.EFFC_D :          D0D C |  DTBL_FROMMUL.EFFC_E :          D50 C |
 DTBL_FROMMUL.EFFC_F :          D65 C |  DTBL_FROMMUL.EFFC_X :          D86 C |
 DTBL_FROMMUL.FINE_DOWN :       D28 C |  DTBL_FROMMUL.FINE_UP :         D3C C |
 DTBL_FROMMUL.FMSPC_SET :       A05 C |  DTBL_FROMMUL.FM_CINDX :        B30 C |
 DTBL_FROMMUL.FM_CUT :          A7F C |  DTBL_FROMMUL.FM_HASVOL :       FB8 C |
 DTBL_FROMMUL.FM_KEYOFF :       A88 C |  DTBL_FROMMUL.FM_OFF :          A79 C |
 DTBL_FROMMUL.FM_PANLIST :      DCC C |  DTBL_FROMMUL.FM_SETFREQ :      AA7 C |
 DTBL_FROMMUL.FM_SETRLIST :     ECF C |  DTBL_FROMMUL.FM_TLOFF :        A90 C |
 DTBL_FROMMUL.FM_WRTALPAN :     B38 C |  DTBL_FROMMUL.FM_WRTLVOL :      ABE C |
 DTBL_FROMMUL.FND_OCT :        1009 C |  DTBL_FROMMUL.FROM_PSGN :       943 C |
 DTBL_FROMMUL.GET_OCT :         FFE C |  DTBL_FROMMUL.INST :            DFD C |
 DTBL_FROMMUL.INS_DAC :         EDF C |  DTBL_FROMMUL.INS_FM :          E5E C |
 DTBL_FROMMUL.INS_PCM :         F33 C |  DTBL_FROMMUL.INS_PSG :         E28 C |
 DTBL_FROMMUL.INS_PSGN :        E22 C |  DTBL_FROMMUL.INS_PWM :         F6B C |
*DTBL_FROMMUL.INVL_INS :        E21 C |  DTBL_FROMMUL.KYCUT_PSG :       999 C |
 DTBL_FROMMUL.KYCUT_PSGN :      994 C |  DTBL_FROMMUL.KYOFF_PSG :       989 C |
 DTBL_FROMMUL.KYOFF_PSGN :      984 C |  DTBL_FROMMUL.LINKED :          8BF C |
 DTBL_FROMMUL.MK_DAC :          B6E C |  DTBL_FROMMUL.MK_FM :           9A4 C |
 DTBL_FROMMUL.MK_FMSPC :        A19 C |  DTBL_FROMMUL.MK_LIST :         8FE C |
 DTBL_FROMMUL.MK_PCM :          BCD C |  DTBL_FROMMUL.MK_PSG :          92A C |
 DTBL_FROMMUL.MK_PSGN :         90C C |  DTBL_FROMMUL.MK_PWM :          C49 C |
 DTBL_FROMMUL.NEW_ROMDAT :      E92 C | *DTBL_FROMMUL.NOFM_NOTE :       A18 C |
 DTBL_FROMMUL.NORM_DOWN :       D26 C |  DTBL_FROMMUL.NORM_UP :         D3E C |
 DTBL_FROMMUL.NOTE :            FAE C |  DTBL_FROMMUL.NOT_DAC :         9C3 C |
 DTBL_FROMMUL.NOT_DSPC :        9D9 C |  DTBL_FROMMUL.NO_LFO :          B6D C |
 DTBL_FROMMUL.N_FM :            FF4 C |  DTBL_FROMMUL.N_INDX :          FE0 C |
 DTBL_FROMMUL.N_PSGN :          FEF C |  DTBL_FROMMUL.N_STFREQ :        FE1 C |
 DTBL_FROMMUL.PAN_MCD :         DB5 C |  DTBL_FROMMUL.PCM_CUT :         BFE C |
 DTBL_FROMMUL.PCM_EFFC :        C0D C |  DTBL_FROMMUL.PCM_NOTE :        C14 C |
 DTBL_FROMMUL.PCM_OFF :         BF7 C |  DTBL_FROMMUL.PCM_PANLIST :     DD4 C |
 DTBL_FROMMUL.PCM_SEND :        C19 C |  DTBL_FROMMUL.PCM_SETCOFF :     C03 C |
 DTBL_FROMMUL.PSGNONE :         981 C |  DTBL_FROMMUL.PSG_KEYON :       96A C |
 DTBL_FROMMUL.PWM_CUT :         C7A C |  DTBL_FROMMUL.PWM_OFF :         C73 C |
 DTBL_FROMMUL.PWM_SETCOFF :     C7F C |  DTBL_FROMMUL.PWV_MUCH :        CCE C |
 DTBL_FROMMUL.PW_EFFC :         C89 C |  DTBL_FROMMUL.PW_NOTE :         C90 C |
 DTBL_FROMMUL.PW_SEND :         C95 C |  DTBL_FROMMUL.PW_SETUP :        CB9 C |
 DTBL_FROMMUL.RCYL_COM :        8AA C |  DTBL_FROMMUL.RES_PAN :         DAB C |
 DTBL_FROMMUL.SAME_PATCH :      ECA C |  DTBL_FROMMUL.SAVE_ARG :        D7A C |
 DTBL_FROMMUL.SETPCM_FREQ :     CD2 C |  DTBL_FROMMUL.SETPWM_FREQ :     CD7 C |
 DTBL_FROMMUL.SET_WAVFREQ :     CDA C |  DTBL_FROMMUL.SILN_DAC :        8B6 C |
 DTBL_FROMMUL.SILN_FM :         8B9 C |  DTBL_FROMMUL.SILN_PCM :        894 C |
 DTBL_FROMMUL.SILN_PSG :        88D C |  DTBL_FROMMUL.SILN_PSG_N :      889 C |
 DTBL_FROMMUL.SILN_PWM :        8A0 C |  DTBL_FROMMUL.SPCREGLIST :      A71 C |
 DTBL_FROMMUL.TL_DOWN :         A9A C |  DTBL_FROMMUL.VMUCH :           976 C |
 DTBL_FROMMUL.VOLU :            DF4 C |  DTBL_FROMMUL.VOL_DVLD :        D4C C |
 DTBL_FROMMUL.V_OVERFL :        C35 C |  DTBL_FROMMUL.WRITE_TL :        B23 C |
 DTBL_FROMMUL.WR_SPC :          A54 C |  DTBL_MULTI :                   83C C |
 DTBL_SINGL :                   852 C |  DTH :                           20 - |
 DTL :                           1C - |  DWAVEBUFF :                   1D00 C |
*EMU :                            1 - |  EXT_3 :                          C C |
*EXT_4 :                          E C | *FALSE :                          0 - |
*FEN :                            2 - | *FILLDATA :                       8 - |
*FILLLENGTH :                     4 - | *FILLSTART :                      6 - |
 FLG :                           28 - | *FM :                            80 - |
 FMCACH_1 :                    1994 C |  FMCACH_2 :                    19BC C |
 FMCACH_3 :                    19E4 C |  FMCACH_4 :                    1A0C C |
 FMCACH_5 :                    1A34 C |  FMCACH_6 :                    1A5C C |
 FMCACH_LIST :                 14F8 C |  FMFREQ_LIST :                 1436 C |
*FMINS_AMBIENT_3 :             C508 C | *FMINS_AMBIENT_DARK :          C4C8 C |
*FMINS_AMBIENT_SPOOK :         C4E8 C | *FMINS_BANJO_PUY :             C388 C |
*FMINS_BASS_1 :                BFC8 C | *FMINS_BASS_2 :                BFE8 C |
*FMINS_BASS_4 :                C0C8 C | *FMINS_BASS_8 :                C0E8 C |
*FMINS_BASS_CALM :             C128 C | *FMINS_BASS_CLUB :             C108 C |
*FMINS_BASS_DONNA :            C008 C |  FMINS_BASS_DUCK :             C0A8 C |
*FMINS_BASS_GROOVE :           C028 C | *FMINS_BASS_GROOVE_2 :         C048 C |
*FMINS_BASS_GROOVE_GEM :       C068 C | *FMINS_BASS_ITALO :            C088 C |
 FMINS_BASS_LOW_1 :            C148 C | *FMINS_BASS_OIL :              C168 C |
 FMINS_BRASS_EUR :             C248 C | *FMINS_BRASS_PUY :             C268 C |
 FMINS_CLOSEDHAT :             C488 C |  FMINS_DING_1 :                C3C8 C |
*FMINS_DING_BASEBALL :         C2A8 C | *FMINS_DING_TOY :              C348 C |
 FMINS_DRUMKICK_GEM :          C2C8 C | *FMINS_FLAUTE_CAVE :           C368 C |
 FMINS_FM3_EXPLOSION :         BF28 C | *FMINS_GUITAR_BBALL :          C428 C |
 FMINS_HATS_1 :                C448 C |  FMINS_HATS_CLOSED :           C468 C |
 FMINS_HBEAT_TOM :             C408 C | *FMINS_MARIMBA :               C328 C |
*FMINS_ORGAN2 :                BEE8 C |  FMINS_ORGAN2A :               BF08 C |
*FMINS_ORGAN_ITO :             C288 C | *FMINS_PIANOM1 :               C188 C |
 FMINS_PIANO_AQUA :            C1A8 C | *FMINS_PIANO_HARD :            C1C8 C |
*FMINS_PSYNTH_PLUS :           C3A8 C | *FMINS_SEWER_1 :               C4A8 C |
 FMINS_SP_CLOSEDHAT :          BF78 C | *FMINS_SP_COWBELL :            BFA0 C |
 FMINS_SP_OPENHAT :            BF50 C | *FMINS_SYNTH_PLUS :            C1E8 C |
*FMINS_TROMBONE_GEM :          C3E8 C |  FMINS_TRUMPET_1 :             C208 C |
*FMINS_TRUMPET_2 :             C2E8 C |  FMINS_TRUMPET_CARNIVAL :      C228 C |
*FMINS_TRUMPET_PUY :           C308 C |  FMSPECIAL :                   1F84 C |
 FM_AUTOREG :                  12ED C |  FM_SEND_1 :                   12F1 C |
 FM_SEND_2 :                   12FC C | *FRAMECTL :                       B - |
*FREEFLAG :                      3F C | *FS :                             1 - |
*FULLPMMU :                       1 - |  GEMADMAPAUSE :                 2CA C |
 GEMADMAPAUSEROM :              2CE C |  GEMADMARESUME :                2CC C |
 GEMADMARESUMEROM :             2D0 C |  GEMAMSTRLISTPOS :               1C C |
*GEMAPLAYQUICK :                300 C |  GEMAPLAYTRACK :                2EA C |
 GEMASETBEATS :                 336 C |  GEMASETMASTERLIST :            2DC C |
*GEMASFX_ALL :                 35D8 C |  GEMASFX_ALL.BLK :             35E6 C |
 GEMASFX_ALL.INS :             36AC C |  GEMASFX_ALL.PAT :             35EC C |
*GEMASTOPALL :                  334 C |  GEMASTOPTRACK :                31C C |
 GEMATEST :                     2D2 C |  GEMATRK_ARENA1 :              36D4 C |
 GEMATRK_ARENA1.INS :          36E2 C |  GEMATRK_CRYSTAL :             74A4 C |
 GEMATRK_CRYSTAL.BLK :         74B2 C |  GEMATRK_CRYSTAL.INS :         86AE C |
 GEMATRK_CRYSTAL.PAT :         74BA C |  GEMATRK_DREAM :               5D54 C |
 GEMATRK_DREAM.BLK :           5D62 C |  GEMATRK_DREAM.INS :           742C C |
 GEMATRK_DREAM.PAT :           5D6F C |  GEMATRK_MOVEME :              4D7F C |
 GEMATRK_MOVEME.BLK :          4D8D C |  GEMATRK_MOVEME.INS :          5CBC C |
 GEMATRK_MOVEME.PAT :          4DA4 C |  GEMATRK_NADIEMARS :           AC7A C |
 GEMATRK_NADIEMARS.BLK :       AC88 C |  GEMATRK_NADIEMARS.INST :      BEA0 C |
 GEMATRK_NADIEMARS.PATT :      AC90 C |  GEMATRK_NADIEMCD :            99CC C |
 GEMATRK_NADIEMCD.BLK :        99DA C |  GEMATRK_NADIEMCD.INST :       AC32 C |
 GEMATRK_NADIEMCD.PATT :       99E2 C |  GEMATRK_NADIEMD :             86DE C |
 GEMATRK_NADIEMD.BLK :         86EC C |  GEMATRK_NADIEMD.INST :        9984 C |
 GEMATRK_NADIEMD.PATT :        86F4 C | *GEMATRK_TEST_0 :              36D4 C |
 GEMA_INIT :                   103D C |  GEMA_INIT.END_SETUP :         10A8 C |
 GEMA_INIT.SETUP_LIST :        107D C |  GEMA_INIT.ST_COPY :           109C C |
 GEMA_LASTBANK :               142B C |  GEMA_LASTBANK.WRITE :         1430 C |
 GEMA_MASTERLIST :             35BC C |  GET_ROMTRCKS :                 5E5 C |
 GET_TICK :                    10B1 C |  GET_TICK.CTNOTICK :           10CE C |
 GLBL_LASTORG :    FFFFFFFFFFFFD204 - |  GLBL_LASTPC :                 3242 - |
*HAS64 :                          1 - | *HASDSP :                         0 - |
*HASFPU :                         0 - | *HASPMMU :                        0 - |
*HBLK :                          40 - | *HCOUNT :                         5 - |
 HEADEROUT :                   1FA4 C |  HEADEROUT_E :                 1FB2 C |
*HINTCLR :                       18 - | *HINTENBL :                      10 - |
 HINT_DEFAULT :                1224 C | *HIRQ_ON :                        4 - |
*HVSTOP :                         2 - | *INEXTMODE :                      0 - |
 INIT_ROMTRCKS :                5F1 C | *INLWORDMODE :                    0 - |
*INMAXMODE :                      0 - | *INSRCMODE :                      0 - |
 INSTLISTOUT :                 1BC8 C | *INSUPMODE :                      1 - |
*INTMASK :                        1 - |  JOYA :                          40 - |
 JOYB :                          10 - |  JOYC :                          20 - |
*JOYDOWN :                        2 - | *JOYLEFT :                        4 - |
*JOYMODE :                      800 - | *JOYRIGHT :                       8 - |
*JOYSTART :                      80 - | *JOYUP :                          1 - |
*JOYX :                         400 - | *JOYY :                         200 - |
*JOYZ :                         100 - | *LCHWIDTH :                      34 - |
 LEV :                            4 - | *LISTON :                         3 - |
 LIST_VDPREGS :                 396 C | *MACEXP :                         7 - |
*MAPMARS_TEST :               2178E C |  MAP_TEST :                   20ECE C |
 MARS :                           0 - |  MARSBLOCK :                     37 C |
 MARSCD :                         0 - |  MARSDATA_DEFAULT :           21C5A C |
*MARSDATA_DEFAULT_E :         3345C C |  MARSUPD :                     1F87 C |
*MARS_RAMCODE :                3242 C | *MARS_RAMCODE_E :              3242 C |
*MAX_BLOCKS :                     8 - |  MAX_MDDMATSK :                  18 - |
 MAX_MDOBJ :                     18 - |  MAX_MDOTHER :                  C00 - |
 MAX_MDSYSTEM :                 600 - |  MAX_MDVIDEO :                 2000 - |
 MAX_RCACH :                     20 - |  MAX_SCRNBUFF :                1800 - |
 MAX_SRAMSIZE :                 400 - |  MAX_SYSCODE :                 2000 - |
 MAX_TBLSIZE :                   18 - |  MAX_TRFRPZ :                     8 - |
 MAX_TRKCHN :                    20 - |  MAX_TRKINDX :                   1A - |
 MAX_USERCODE :                8000 - |  MAX_ZCMND :                     40 - |
 MCD :                            0 - |  MCDBLOCK :                      36 C |
 MCDUPD :                      1F88 C | *MCD_COMM_M :                     E - |
*MCD_COMM_S :                     F - | *MCD_DBANK0 :                  35BC C |
*MCD_DCOMM_M :                   10 - | *MCD_DCOMM_S :                   20 - |
*MCD_HINT :                       6 - | *MCD_INTMASK :                   32 - |
*MCD_MEMORY :                     3 - | *MDBANK0 :                     35BC C |
*MDBANK0_E :                  21C5A C |  MDSYS_SINEDATA :              1056 C |
*MD_BANK_SRAM :              A130F1 - |  MD_READMODES :                1228 C |
 MD_READMODES.PICK_MODE :      1244 C |  MD_SCREEN00 :                 3242 C |
*MD_SYSCODE_E :                1288 C |  MODE :                          18 - |
*MODE_FADEIN :                 11A6 C |  MODE_FADEIN.LOOPW :           11CE C |
*MODE_FADEOUT :                11DA C |  MODE_FADEOUT.LOOPW :          1202 C |
 MODE_INIT :                   1174 C |  MODE_INIT.CLR :               119E C |
*MOMCPU :                     68000 - | *MOMCPUNAME :               "68000" - |
*MONOWIDTH :                     38 - |  MOUSE_X :                        8 C |
 MOUSE_Y :                        A C | *NESTMAX :                      100 - |
 NIKONA_BUFFLIST :             18C6 C |  NIKONA_BUFFLIST_E :           18DE C |
 OBJECTS_ADD :                  C2E C |  OBJECTS_ADD.CLR :              C4C C |
 OBJECTS_ADD.SEARCH :           C36 C |  OBJECTS_ADD.USE_IT :           C46 C |
 OBJECTS_CLEAR :                BBE C |  OBJECTS_CLEAR.CLR :            BC6 C |
 OBJECTS_CLEAR.CLR_D :          BD4 C |  OBJECTS_RUN :                  BE6 C |
 OBJECTS_RUN.NEXT_ONE :         BEE C |  OBJECTS_RUN.NO_CODE :          BFA C |
*OBJECTS_SET :                  C04 C |  OBJECTS_SET.CLR :              C0E C |
 OBJECTS_SHOW :                 C64 C |  OBJECTS_SHOW.FINISH :          D64 C |
 OBJECTS_SHOW.MK_PZ :           CE2 C |  OBJECTS_SHOW.MK_SPR :          D5E C |
 OBJECTS_SHOW.NEXT :            CB4 C |  OBJECTS_SHOW.NEXTS :           C86 C |
 OBJECTS_SHOW.NO_SPRDRW :       CAC C |  OBJECTS_SHOW.RAN_OUT :         D82 C |
 OBJECTS_SHOW.VRAM_H :          D34 C |  OBJECTS_SHOW.VRAM_V :          D1A C |
 OBJECT_ANIMATE :               E24 C |  OBJECT_ANIMATE.GOTOFRAME :     EA0 C |
 OBJECT_ANIMATE.KEEPSPD :       E66 C |  OBJECT_ANIMATE.LASTFRAME :     EAA C |
 OBJECT_ANIMATE.NOANIM :        E92 C |  OBJECT_ANIMATE.RETURN :        E90 C |
 OBJECT_ANIMATE.SAMETHING :     E3E C |  OBJECT_ANIMRESET :             EB0 C |
 OBJECT_DISPLAY :               D88 C |  OBJECT_DISPLAY.NEXT_PZ :       DCA C |
 OBJECT_DISPLAY.NO_DMA :        DF4 C |  OBJECT_DISPLAY.SRCH :          D90 C |
 OBJECT_DISPLAY.THIS_ONE :      D9C C | *OBJECT_MKSPRPZ :               DF6 C |
 OBJECT_MKSPRPZ.NOPE :          E22 C | *OBJECT_SPEED :                 EC0 C |
 OBJMAP_SISI :                21BFE C |  OBJPAL_SISI :                21BDE C |
 OBJ_ANIM_ID :                   1C C |  OBJ_ANIM_INDX :                 1A C |
 OBJ_ANIM_SPD :                  20 C |  OBJ_CODE :                       0 C |
 OBJ_DMA :                       10 C |  OBJ_FRAME :                     1E C |
*OBJ_FREE :                      25 C |  OBJ_INDEX :                     21 C |
 OBJ_MAP :                        C C | *OBJ_RAM :                       26 C |
 OBJ_SET :                       22 C | *OBJ_STATUS :                    24 C |
*OBJ_SUBID :                     23 C |  OBJ_VRAM :                      14 C |
 OBJ_X :                          4 C |  OBJ_X_SPD :                     16 C |
 OBJ_Y :                          8 C |  OBJ_Y_SPD :                     18 C |
 ON_HOLD :                        2 C |  ON_PRESS :                       4 C |
*ON_RELEASE :                     6 C | *PACKING :                        0 - |
*PADDING :                        0 - | *PAD_ID :                         0 C |
*PAD_VER :                        1 C | *PALMARS_SABRINA :            21BBE C |
*PALMARS_TEST :               219BE C | *PALMODE :                       3E C |
 PARP :                          34 - |  PCMCOM :                      18E0 C |
*PEN :                           20 - |  PICO :                           1 - |
 PICO_ENTRY :                   204 C |  PICO_ENTRY.LOOP_RAM :          232 C |
 PICO_ENTRY.WAIT_DMA :          246 C |  PICO_ERRADDR :                 200 C |
 PICO_ERRBUS :                  200 C |  PICO_ERRCHK :                  200 C |
 PICO_ERRILL :                  200 C |  PICO_ERROR :                   200 C |
 PICO_ERROREX :                 200 C |  PICO_ERRPRIVL :                200 C |
 PICO_ERRTRAPV :                200 C |  PICO_ERRZDIV :                 200 C |
 PICO_LINE1010 :                200 C |  PICO_LINE1111 :                200 C |
 PICO_PCMINT :                  202 C |  PICO_TRACE :                   200 C |
 PICO_UNKINT :                  202 C |  PICO_USERINT :                 202 C |
 PROC_CHIPS :                   637 C |  PSGCOM :                      1958 C |
 PSGFREQ_LIST :                144E C |  PSGHATMODE :                  1F83 C |
*PSG_CTRL :                  C00011 - |  PTMR :                          38 - |
 PVOL :                          30 - |  PWMCOM :                      1920 C |
*PWMCTL :                        31 - | *PWMINTCLR :                     1C - |
*PWMIRQ_ON :                      1 - |
 RAM_FADEMARSDELAY :                                       FFFFFFFFFFFFBDF0 C |
 RAM_FADEMARSINCR :                                        FFFFFFFFFFFFBDEE C |
 RAM_FADEMARSREQ : FFFFFFFFFFFFBDEC C | *RAM_FADEMARSTMR : FFFFFFFFFFFFBDF2 C |
 RAM_FADEMDDELAY : FFFFFFFFFFFFBDE8 C |  RAM_FADEMDINCR :  FFFFFFFFFFFFBDE6 C |
 RAM_FADEMDREQ :   FFFFFFFFFFFFBDE4 C |  RAM_FADEMDTMR :   FFFFFFFFFFFFBDEA C |
 RAM_FRAMECOUNT :  FFFFFFFFFFFFBDD4 C | *RAM_GLBL_FILLER : FFFFFFFFFFFFEA04 C |
 RAM_HORSCROLL :   FFFFFFFFFFFFA004 C |  RAM_INPUTDATA :   FFFFFFFFFFFFC004 C |
*RAM_MDDREQ :      FFFFFFFFFFFFC604 C |  RAM_MDGLOBAL :    FFFFFFFFFFFFEA04 C |
 RAM_MDMARSHINT :  FFFFFFFFFFFFC452 C | *RAM_MDMARSPALFD : FFFFFFFFFFFFAE94 C |
 RAM_MDMARSVINT :  FFFFFFFFFFFFC44C C |
*RAM_MDMARS_DRAWALL :                                      FFFFFFFFFFFFBDF4 C |
 RAM_MDOTHER :     FFFFFFFFFFFFC604 C |  RAM_MDSYSTEM :    FFFFFFFFFFFFC004 C |
 RAM_MDVIDEO :     FFFFFFFFFFFFA004 C |  RAM_MEGACD :              FFFFFD00 - |
 RAM_OBJDISPLIST : FFFFFFFFFFFFBC24 C |  RAM_OBJECTS :     FFFFFFFFFFFFB294 C |
 RAM_PALETTE :     FFFFFFFFFFFFAE14 C |  RAM_PALETTEFD :   FFFFFFFFFFFFB094 C |
*RAM_SAVEDATA :    FFFFFFFFFFFFC044 C |  RAM_SCREENMODE :  FFFFFFFFFFFFC458 C |
 RAM_SCRNBUFF :    FFFFFFFFFFFFD204 C |  RAM_SPRDRWCNTR :  FFFFFFFFFFFFBDD8 C |
 RAM_SPRDRWPZ :    FFFFFFFFFFFFA914 C |  RAM_SPRITES :     FFFFFFFFFFFFA414 C |
 RAM_SPRLINKNUM :  FFFFFFFFFFFFBDDA C |  RAM_STACK :               FFFFFD00 - |
 RAM_SYSRANDSEED : FFFFFFFFFFFFC448 C |  RAM_SYSRANDVAL :  FFFFFFFFFFFFC444 C |
*RAM_SYSTEMCODE :  FFFFFFFFFFFF0000 C | *RAM_USERCODE :    FFFFFFFFFFFF2000 C |
 RAM_VDPDMAINDX :  FFFFFFFFFFFFBDDE C |  RAM_VDPDMALIST :  FFFFFFFFFFFFB114 C |
 RAM_VDPDMAMOD :   FFFFFFFFFFFFBDE0 C | *RAM_VDPEXWRITE :  FFFFFFFFFFFFBDDC C |
 RAM_VDPREGS :     FFFFFFFFFFFFBDF6 C |  RAM_VERSCROLL :   FFFFFFFFFFFFA3C4 C |
 RAM_VIDPRNTLIST : FFFFFFFFFFFFBC54 C |  RAM_VIDPRNTVRAM : FFFFFFFFFFFFBDE2 C |
 RAM_ZCDFLAG_D :           FFFFFF00 - |  RAM_ZSNDBUFF :            FFFFFF00 - |
*RCHWIDTH :                      36 - | *RELAXED :                        0 - |
 ROM_END :                    3CDBC C |  RRT :                           14 - |
 SAMPLEHEAD :                  1FB4 C |  SBEATACC :                    1FA0 C |
 SBEATPTCK :                   1FA2 C | *SETVRAM_MIKAMI :               440 - |
 SETVRAM_SISI :                 480 - |  SET_CHIPS :                    613 C |
 SET_CHIPS.TRK_BUFFRS :         61B C | *SHIFT :                          2 - |
 SHRD_BLK :                    3752 C |  SHRD_PAT :                    3760 C |
 SIZEOF_INPUT :                  10 C |  SIZEOF_MDGLBL :   FFFFFFFFFFFFEA08 C |
 SIZEOF_MDOBJ :                  66 C |  SIZEOF_MDRAM :    FFFFFFFFFFFFD40C C |
*SIZEOF_MDSYS :    FFFFFFFFFFFFC45A C |  SIZEOF_MDVID :    FFFFFFFFFFFFBE0E C |
*SIZEOF_RAMOTHER : FFFFFFFFFFFFD204 C |  SIZE_BUFFLIST :                  8 - |
 SLV :                           10 - | *SNDLOCKZ80 :                   272 C |
 SNDREQ_ENTER :                 276 C | *SNDREQ_ENTER.WAIT :            28E C |
 SNDREQ_EXIT :                  294 C | *SNDREQ_SADDR :                 2B4 C |
 SNDREQ_SBYTE :                 2BC C |  SNDREQ_SCMD :                  2A2 C |
 SNDREQ_SLONG :                 2B0 C |  SNDREQ_SWORD :                 2B8 C |
*SNDUNLOCKZ80 :                 274 C |  SOUND_INIT :                   262 C |
 SOUND_UPDATE :                 26E C | *STANDBY :                        3 - |
*SYSMARS_ID :                A130EC - | *SYSMARS_REG :               A15100 - |
*SYSMCD_REG :                A12000 - | *SYSMCD_WRAM :               200000 - |
 SYSTEM_DMAENTER_RAM :          F74 C |  SYSTEM_DMAENTER_ROM :          F7C C |
 SYSTEM_DMAEXIT_RAM :           F78 C |  SYSTEM_DMAEXIT_ROM :           F80 C |
*SYSTEM_GRABRAMCODE :          1226 C |  SYSTEM_INIT :                  EDE C |
 SYSTEM_INIT.CLRINPUT :         F08 C |  SYSTEM_INPUT :                 F84 C |
 SYSTEM_INPUT.BAD_Y :           FD4 C |  SYSTEM_INPUT.NO_BIT :          FE6 C |
 SYSTEM_INPUT.PAGE_IT :         FE0 C |  SYSTEM_INPUT.X_VALID :         FBC C |
*SYSTEM_RANDOM :                FEE C |  SYSTEM_RANDOM.GOOD_S :         FFC C |
 SYSTEM_RENDER :                F2E C |  SYSTEM_RENDER.FORGOT_DISP :    F72 C |
 SYSTEM_RENDER.WAIT_IN :        F50 C |  SYSTEM_RENDER.WAIT_LAG :       F38 C |
 SYSTEM_SETINTS :              1156 C |  SYSTEM_SETINTS.NOHINT :       1166 C |
 SYSTEM_SETINTS.NOVINT :       115E C | *SYSTEM_SINEWAVE :             1038 C |
 SYSTEM_SINEWAVE.DONT_NEG :    1054 C | *SYSTEM_SINEWAVE_COS :         1018 C |
 SYSTEM_SINEWAVE_COS.DONT_NEG :                                        1032 C |
 SYSTEM_SRAMINIT :             1168 C | *SYSTEM_SRAMLOAD :             1170 C |
*SYSTEM_SRAMSAVE :             116C C | *SYS_CTRL_1 :                A10009 - |
*SYS_CTRL_2 :                A1000B - | *SYS_CTRL_3 :                A1000D - |
*SYS_DATA_1 :                A10003 - | *SYS_DATA_2 :                A10005 - |
*SYS_DATA_3 :                A10007 - | *SYS_EXRAM :                 200000 - |
*SYS_IO :                    A10001 - | *SYS_TMSS :                  A14000 - |
 TBLBUFF_READ :                 661 C |  TBLBUFF_READ.CHK_PSG :         773 C |
 TBLBUFF_READ.CLRFULL :         832 C |  TBLBUFF_READ.DO_CHIP :         6C1 C |
 TBLBUFF_READ.FIRST_INS :       6E3 C |  TBLBUFF_READ.GRAB_LINK :       720 C |
 TBLBUFF_READ.HAS_INDX :        6A1 C |  TBLBUFF_READ.INVLDL :          75C C |
 TBLBUFF_READ.KEEP_IT :         707 C |  TBLBUFF_READ.L_HIPRIO :        7E7 C |
 TBLBUFF_READ.NEW_CHIP :        79A C |  TBLBUFF_READ.NEW_LINK :        7E4 C |
 TBLBUFF_READ.NEW_LINK_O :      7DC C |  TBLBUFF_READ.NEW_LINK_Z :      7D8 C |
 TBLBUFF_READ.NEXTSRCH_TBL :    7D1 C |  TBLBUFF_READ.NEXT_INDX :       692 C |
 TBLBUFF_READ.NEXT_PRIO :       7BA C |  TBLBUFF_READ.NO_INDX :         6BD C |
 TBLBUFF_READ.PASS_2 :          7B9 C |  TBLBUFF_READ.PICK_TBL :        80A C |
 TBLBUFF_READ.REFILL :          797 C |  TBLBUFF_READ.REROLL :          764 C |
 TBLBUFF_READ.RESET_LINK :      824 C |  TBLBUFF_READ.RNOT_PSG :        795 C |
 TBLBUFF_READ.SET_ASFULL :      807 C |  TBLBUFF_READ.SINGL_FREE :      7F5 C |
 TBLBUFF_READ.SINGL_LINK :      78A C |  TBLBUFF_READ.SRCH_FREE :       7A9 C |
 TBLBUFF_READ.SRCH_LINK :       743 C |  TBLBUFF_READ.SRCH_LLOOP :      74D C |
 TBLBUFF_READ.TRACK_CONT :      67B C |  TBLBUFF_READ.VALID :           690 C |
 TBLFM :                       16C8 C |  TBLFM3 :                      1728 C |
 TBLFM6 :                      1740 C |  TBLLIST :                     1656 C |
 TBLPCM :                      175A C |  TBLPSG :                      1666 C |
 TBLPSGN :                     16B0 C |  TBLPWM :                      181C C |
 TH :                      20000000 - |  TICKCNT :                     1F82 C |
 TICKFLAG :                    1F81 C |  TICKSPSET :                   1F80 C |
 TIME :               "04:21:45 AM" - | *TIMERCTL :                      30 - |
*TMR :                           2C - |  TRACK_OUT :                    59C C |
 TRACK_OUT.INDX_DEL :           5AA C |  TRACK_OUT.NOTHIN :             5DC C |
 TRANSFERROM :                 10D2 C |  TRANSFERROM.DOUBLE :          10F5 C |
 TRANSFERROM.FROM_RAM :        1119 C |  TRANSFERROM.TRANSFER :        1137 C |
 TRANSFERROM.WAIT :            1130 C |  TRANSFERROM.X68KLAST :        1170 C |
 TRANSFERROM.X68KLOOP :        115C C |  TRANSFERROM.X68KLPWT :        117E C |
 TRANSFERROM.X68KNOCARRY :     1113 C |  TRANSFERROM.X68KPWTLP :       1180 C |
 TRKBLKS_0 :                   1B98 C |  TRKBLKS_1 :                   1BA0 C |
 TRKBLKS_2 :                   1BA8 C |  TRKBUFF_0 :                   1AE4 C |
 TRKBUFF_1 :                   1B20 C |  TRKBUFF_2 :                   1B5C C |
 TRKCACH_0 :                   1F00 C |  TRKCACH_1 :                   1F20 C |
 TRKCACH_2 :                   1F40 C | *TRKCACH_3 :                   1F60 C |
 TRKCHNLS :                    1E00 C |  TRKHDRS_0 :                   1A84 C |
 TRKHDRS_1 :                   1AA4 C |  TRKHDRS_2 :                   1AC4 C |
 TRKLISTCACH :                 1BB0 C |  TRKLISTPAGE :                 1F86 C |
 TRK_BANKBLK :                   14 - |  TRK_BANKHEADS :                 13 - |
 TRK_BANKINS :                   12 - |  TRK_BLOCKS :                     4 - |
 TRK_CACH :                       8 - |  TRK_CACHHALF :                   D - |
 TRK_CHNINDX :                   22 - |  TRK_CURRBLK :                   10 - |
 TRK_MAXCHNL :                   15 - |  TRK_PATT :                       6 - |
 TRK_PRIORITY :                  11 - |  TRK_READ :                       A - |
 TRK_ROMBLKS :                   1F - |  TRK_ROMINST :                   1C - |
 TRK_ROMPATT :                   19 - |  TRK_ROMPATTREAD :               16 - |
 TRK_ROWPAUSE :                   E - |  TRK_ROWS :                       C - |
 TRK_SEQID :                      1 - |  TRK_SETBLK :                     2 - |
 TRK_STATUS :                     0 - |  TRK_TICKSET :                    3 - |
 TRK_TICKTMR :                    F - | *TRUE :                           1 - |
*TVMODE :                         0 - |  UPD_TRACK :                    236 C |
 UPD_TRACK.CHNL_FREE :          322 C |  UPD_TRACK.CONT_CHNL :          32D C |
 UPD_TRACK.DECROW :             2D1 C |  UPD_TRACK.DECROW_E :           2D4 C |
 UPD_TRACK.EFFECT_FILL :        500 C |  UPD_TRACK.EFF_A :              3AA C |
 UPD_TRACK.EFF_B :              3BB C |  UPD_TRACK.EFF_C :              3D9 C |
 UPD_TRACK.EXIT :               2C5 C |  UPD_TRACK.FIRST_BLK :          430 C |
 UPD_TRACK.FIRST_FILL :         507 C |  UPD_TRACK.FIRST_HEAD :         478 C |
 UPD_TRACK.GRAB_RHEAD :         589 C |  UPD_TRACK.HAS_NOTE :           2DC C |
 UPD_TRACK.INC_CPATT :          3DC C |  UPD_TRACK.KEEP_BLK :           44E C |
 UPD_TRACK.KEEP_IT :            49E C |  UPD_TRACK.NEXT_CHNL :          307 C |
 UPD_TRACK.NEXT_NOTE :          2B5 C |  UPD_TRACK.NO_EFF :             373 C |
 UPD_TRACK.NO_GLBL :            533 C |  UPD_TRACK.NO_INS :             355 C |
 UPD_TRACK.NO_NOTE :            34A C |  UPD_TRACK.NO_VOL :             360 C |
 UPD_TRACK.OLD_TYPE :           33E C |  UPD_TRACK.RAN_OUT :            3EA C |
 UPD_TRACK.READ_TRACK :         259 C |  UPD_TRACK.ROW_ACTIVE :         2AE C |
 UPD_TRACK.SET_TRACK :          414 C |  UPD_TRACK.SFXMD :              272 C |
 UPD_TRACK.SRCH_NEW :           302 C |  UPD_TRACK.TRACK_END :          4ED C |
 UPD_TRACK.TRK_BUFFRS :         23E C |  VARNULLVRAM :                  7FF - |
 VARPRINTPAL :                    3 - |  VARPRINTVRAM :                 580 - |
*VBLK :                          80 - | *VDPSTS :                         A - |
 VDP_CTRL :                  C00004 - |  VDP_DATA :                  C00000 - |
*VERSION :                     142F - |  VIDEO_CLEAR :                  3CA C |
*VIDEO_CLEARSCREEN :            3CA C |  VIDEO_CLEARSCREEN.PNEXT :      43C C |
 VIDEO_CLEARSCREEN.SNEXT :      42A C |  VIDEO_CLEARSCREEN.XNEXT :      40E C |
 VIDEO_CLEARSCREEN.YNEXT :      41C C | *VIDEO_COPY :                   742 C |
 VIDEO_COPY.DMAW :              756 C |  VIDEO_COPY.DMA_W :             7AE C |
*VIDEO_DMABLAST :               90E C |  VIDEO_DMABLAST.END :           952 C |
 VIDEO_DMABLAST.EXIT :          960 C |  VIDEO_DMABLAST.NEXT :          936 C |
 VIDEO_DMAMKENTRY :             61E C |  VIDEO_DMAMKENTRY.MK_SET :      65A C |
 VIDEO_DMAMKENTRY.NORMAL :      654 C |  VIDEO_DMAMKENTRY.RAN_OUT :     6CA C |
 VIDEO_DOPALFADE :              4D8 C |  VIDEO_DOPALFADE.ACTIVE :       4F4 C |
 VIDEO_DOPALFADE.FADE_DONE :    4FC C |  VIDEO_DOPALFADE.FADE_IN :      4FE C |
 VIDEO_DOPALFADE.FADE_LIST :    4F6 C |  VIDEO_DOPALFADE.FADE_OUT :     5A0 C |
 VIDEO_DOPALFADE.NO_BLU :       578 C |  VIDEO_DOPALFADE.NO_BLU_O :     5FA C |
 VIDEO_DOPALFADE.NO_FNSH :      590 C |  VIDEO_DOPALFADE.NO_FNSH_O :    60E C |
 VIDEO_DOPALFADE.NO_GRN :       558 C |  VIDEO_DOPALFADE.NO_GRN_O :     5E2 C |
 VIDEO_DOPALFADE.NO_MOVE :      59E C |  VIDEO_DOPALFADE.NO_MOVE_O :    61C C |
 VIDEO_DOPALFADE.NO_RED :       538 C |  VIDEO_DOPALFADE.NO_RED_O :     5CA C |
 VIDEO_DOPALFADE.NXT_PAL :      516 C |  VIDEO_DOPALFADE.NXT_PAL_O :    5B2 C |
 VIDEO_FADEIN :                 446 C | *VIDEO_FADEOUT :                46C C |
 VIDEO_FADEPAL :                4AA C | *VIDEO_FADEPAL_MARS :           966 C |
 VIDEO_FILL :                   6CC C |  VIDEO_FILL.DMAW :              6E0 C |
 VIDEO_FILL.DMA_W :             72A C |  VIDEO_INIT :                   34C C |
 VIDEO_INIT.CLRRAM :            358 C |  VIDEO_INIT.LOOP :              370 C |
 VIDEO_LOADART :                7C6 C | *VIDEO_LOADART.FROM_RAM :       830 C |
 VIDEO_LOADART.MK_SET :         802 C |  VIDEO_LOADART.NORMAL :         7FC C |
 VIDEO_LOADART.SHARED_SETUP :   832 C |  VIDEO_LOADMAP :                96A C |
 VIDEO_LOADMAP.CONT :           990 C |  VIDEO_LOADMAP.NODBLE :         9AE C |
 VIDEO_LOADMAP.NONULL :         98E C |  VIDEO_LOADMAP.XLOOP :          980 C |
 VIDEO_LOADMAP.YLOOP :          976 C |  VIDEO_LOADPAL :                4B4 C |
*VIDEO_MARSGFXMODE :            962 C | *VIDEO_MARSPALFADE :            968 C |
*VIDEO_MARS_SYNCFRAME :         964 C |  VIDEO_PRINT :                  9EA C |
 VIDEO_PRINT.DONIBL :           B06 C |  VIDEO_PRINT.EXIT :             A76 C |
 VIDEO_PRINT.ISBYTE :           A40 C |  VIDEO_PRINT.ISLONG :           A64 C |
 VIDEO_PRINT.ISWORD :           A52 C |  VIDEO_PRINT.LNGLOOP :          AF6 C |
 VIDEO_PRINT.LOOP :             A02 C |  VIDEO_PRINT.LOWR :             B16 C |
 VIDEO_PRINT.NEWJUMP :          9FC C |  VIDEO_PRINT.NEXT :             A3C C |
 VIDEO_PRINT.NEXTV :            A80 C |  VIDEO_PRINT.NOTHING :          B22 C |
 VIDEO_PRINT.PUTTEXT :          A2E C |  VIDEO_PRINT.VBYTE :            AB2 C |
 VIDEO_PRINT.VLONG :            AFE C |  VIDEO_PRINT.VWORD :            AD4 C |
 VIDEO_PRINTINIT :              9C0 C | *VIDEO_PRINTPAL :               9DA C |
 VIDEO_RENDER :                 87A C |  VIDEO_RUNFADE :                4A2 C |
 VIDEO_UPDATE :                 378 C | *VIDEO_UPDATE.EXIT :            394 C |
 VIDEO_UPDATE.LOOP :            388 C |  VIDEO_WAITFADE :               492 C |
 VIDMD_PAL :                    4B8 C |  VIDMD_PAL.LOOP :               4D0 C |
 VID_PICKLAYER :                B28 C |  VID_PICKLAYER.GOLYR :          B72 C |
 VID_PICKLAYER.NOWD :           B5C C |  VID_PICKLAYER.PLAWND :         B4E C |
 VID_PICKLAYER.THISSZ :         B92 C |  VID_PICKLAYER.THISSZJ :        BBA C |
*VINTCLR :                       16 - | *VINTENBL :                      20 - |
 VINT_DEFAULT :                120E C | *VIRQ_ON :                        8 - |
*VRESINTCLR :                    14 - |  WAVE_FLAGS :                  1F94 C |
 WAVE_LEN :                    1F8C C |  WAVE_LOOP :                   1F8F C |
 WAVE_PITCH :                  1F92 C | *WAVE_PRIORITY :               1F95 C |
 WAVE_START :                  1F89 C |  WAVFREQ_CDPCM :               15AE C |
 WAVFREQ_LIST :                1506 C |  X68KSRCLSB :                  1F9E C |
 X68KSRCMID :                  1F9F C | *YM_CTRL_1 :                 A04000 - |
*YM_CTRL_2 :                 A04002 - | *YM_DATA_1 :                 A04001 - |
*YM_DATA_2 :                 A04003 - | *Z80SYNTAX :                      0 - |
*Z80_BUS :                   A11100 - | *Z80_CODE :                    1288 C |
*Z80_CODE_END :                3242 C |  Z80_CPU :                   A00000 - |
 Z80_INIT :                      80 C | *Z80_RESET :                 A11200 - |
*Z80_STPOS :                   1288 C | *ZBANK :                       6000 - |
 ZDRVFIFO :                      40 - |  ZDRVFWRT :                      2E - |
*ZDRVMARSBLK :                   37 - | *ZDRVMCDBLK :                    36 - |
*ZDRVRAMLEN :                    30 - | *ZDRVRAMSRC :                    35 - |
*ZDRVROMBLK :                    2F - | *ZMARS_SEND :                  103C C |
*ZOPCEX :                         8 - |  ZOPCEXX :                       D9 - |
*ZOPCNOP :                        0 - |  ZOPCPUSHAF :                    F5 - |
 ZOPCRET :                       C9 - |  ZPSG_CTRL :                   7F11 - |
 ZSET_TESTME :                    0 - |  ZYM_CTRL_1 :                  4000 - |
 ZYM_CTRL_2 :                  4002 - |  ZYM_DATA_1 :                  4001 - |
 ZYM_DATA_2 :                  4003 - | *_CCR :                    FFFFFE92 - |
*_DMACHANNEL0 :            FFFFFF8C - | *_DMACHANNEL1 :            FFFFFF9C - |
*_DMACOUNT0 :              FFFFFF88 - | *_DMACOUNT1 :              FFFFFF98 - |
*_DMADEST0 :               FFFFFF84 - | *_DMADEST1 :               FFFFFF94 - |
*_DMAOPERATION :           FFFFFFB0 - | *_DMAREQACK0 :             FFFFFFB4 - |
*_DMAREQACK1 :             FFFFFFB8 - | *_DMASOURCE0 :             FFFFFF80 - |
*_DMASOURCE1 :             FFFFFF90 - | *_DMAVECTORE0 :            FFFFFFA4 - |
*_DMAVECTORE1 :            FFFFFFAC - | *_DMAVECTORN0 :            FFFFFFA0 - |
*_DMAVECTORN1 :            FFFFFFA8 - | *_FRAMEBUFFER :            24000000 - |
*_FRC_H :                         2 - | *_FRC_L :                         3 - |
*_FRT :                    FFFFFE10 - | *_HRH :                    FFFFFF10 - |
*_HRL :                    FFFFFF14 - | *_HRL32 :                  FFFFFF04 - |
*_JR :                     FFFFFF00 - | *_OCR_H :                         4 - |
*_OCR_L :                         5 - | *_OVERWRITE :              24020000 - |
*_PALETTE :                20004200 - | *_SERIAL :                 FFFFFE00 - |
*_SYSREG :                 20004000 - | *_TCR :                           6 - |
*_TCSR :                          1 - | *_TIER :                          0 - |
*_TOCR :                          7 - | *_VDPREG :                 20004100 - |

   1074 symbols
    320 unused symbols

 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 4 - 02/08/2024 04:21:46 AM


  Defined Macros:
  ---------------

DATA_BKEND                            | DATA_BKSET                           
ENDSTRCT                              | ERREPORT                             
GEMAHEAD                              | GEMATRK                              
GINSDAC                               | GINSFM                               
GINSFM3                               | GINSNULL                             
GINSPCM                               | GINSPSG                              
GINSPSGN                              | GINSPWM                              
GSMPHEAD                              | ISO_FILE                             
ISO_SETFS                             | REPORT                               
ROMPAD                                | SCREEN_CODE                          
SDRAM_BKEND                           | SDRAM_BKSET                          
SET_DBANKS                            | STRCT                                
VDP_SHOWME                            |

     25 macros

 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 5 - 02/08/2024 04:21:46 AM


  Defined Functions:
  ------------------

NOTZ80                                | MAP_SIZE                             
CELL_VRAM                             | LOCATE                               

 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 6 - 02/08/2024 04:21:46 AM


  Code Pages:
  ----------

STANDARD (0 changed characters)

1 code page

0.13 seconds assembly time

  11490 lines source file
  12042 lines incl. macro expansions
      5 passes
      0 errors
      0 warnings
