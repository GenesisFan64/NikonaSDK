 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 1 - 02/21/2024 06:05:23 PM


       1/       0 :                     ; ===========================================================================
       2/       0 :                     ; NIKONA MD 16-BIT/32-BIT SDK
       3/       0 :                     ; (C)2023-2024 GenesisFan64
       4/       0 :                     ;
       5/       0 :                     ; For developing games on the Genesis-family of systems
       6/       0 :                     ; including Sega CD, Sega 32X, Sega CD32X and Sega Pico
       7/       0 :                     ;
       8/       0 :                     ; Assemble with a modified AS Macro Assembler by flamewing
       9/       0 :                     ; and a custom version of p2bin:
      10/       0 :                     ;
      11/       0 :                     ; asl main.asm -i "." -olist ROM.lst -q -xx -A -L -D (flags)
      12/       0 :                     ; p2bin -p=00 main.p ROM.bin
      13/       0 :                     ;
      14/       0 :                     ; ASSEMBLER FLAGS:
      15/       0 :                     ; MCD,MARS,MARSCD,PICO,CDREGION,EMU
      16/       0 :                     
      17/       0 :                     ; * System targets, MUST include ALL and set 1 to
      18/       0 :                     ; the target console and the others to 0
      19/       0 :                     ;    MCD - Sega CD
      20/       0 :                     ;   MARS - Sega 32X
      21/       0 :                     ; MARSCD - Sega CD32X
      22/       0 :                     ;   PICO - Sega Pico
      23/       0 :                     ; * ONLY CHOOSE ONE TARGET AT THE TIME *
      24/       0 :                     ;
      25/       0 :                     ; By default the code builds to stock Genesis
      26/       0 :                     ;
      27/       0 :                     ; CDREGION - SEGACD/CD32X ONLY, Set ROM region:
      28/       0 :                     ;            0=Japan 1=USA 2=Europe
      29/       0 :                     ;      EMU - 0=Real hardware, 1=Emulator only
      30/       0 :                     ;
      31/       0 :                     ; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣴⣶⡿⠿⠿⠿⣶⣦⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀
      32/       0 :                     ; ⠀⠀⠀⠀⠀⠀⢀⣠⣶⢟⣿⠟⠁⢰⢋⣽⡆⠈⠙⣿⡿⣶⣄⡀⠀⠀⠀⠀⠀⠀
      33/       0 :                     ; ⠀⠀⠀⠀⣠⣴⠟⠋⢠⣾⠋⠀⣀⠘⠿⠿⠃⣀⠀⠈⣿⡄⠙⠻⣦⣄⠀⠀⠀⠀
      34/       0 :                     ; ⠀⢀⣴⡿⠋⠁⠀⢀⣼⠏⠺⠛⠛⠻⠂⠐⠟⠛⠛⠗⠘⣷⡀⠀⠈⠙⢿⣦⡀⠀
      35/       0 :                     ; ⣴⡟⢁⣀⣠⣤⡾⢿⡟⠀⠀⠀⠘⢷⠾⠷⡾⠃⠀⠀⠀⢻⡿⢷⣤⣄⣀⡈⢻⣦
      36/       0 :                     ; ⠙⠛⠛⠋⠉⠁⠀⢸⡇⠀⠀⢠⣄⠀⠀⠀⠀⣠⡄⠀⠀⢸⡇⠀⠈⠉⠙⠛⠛⠋
      37/       0 :                     ; ⠀⠀⠀⠀⠀⠀⠀⢸⡇⢾⣦⣀⣹⡧⠀⠀⢼⣏⣀⣴⡷⢸⡇⠀⠀⠀⠀⠀⠀⠀
      38/       0 :                     ; ⠀⠀⠀⠀⠀⠀⠀⠸⣧⡀⠈⠛⠛⠁⠀⠀⠈⠛⠛⠁⢀⣼⠇⠀⠀⠀⠀⠀⠀⠀
      39/       0 :                     ; ⠀⠀⠀⠀⠀⠀⠀⢀⣘⣿⣶⣤⣀⣀⣀⣀⣀⣀⣤⣶⣿⣃⠀⠀⠀⠀⠀⠀⠀⠀
      40/       0 :                     ; ⠀⠀⠀⠀⠀⣠⡶⠟⠋⢉⣀⣽⠿⠉⠉⠉⠹⢿⣍⣈⠉⠛⠷⣦⡀⠀⠀⠀⠀⠀
      41/       0 :                     ; ⠀⠀⠀⠀⢾⣯⣤⣴⡾⠟⠋⠁⠀⠀⠀⠀⠀⠀⠉⠛⠷⣶⣤⣬⣿⠀⠀⠀⠀⠀
      42/       0 :                     ; ⠀⠀⠀⠀⠀⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠁⠀⠀⠀⠀⠀
      43/       0 :                     ; ===========================================================================
      44/       0 :                     
      45/       0 :                     ; ====================================================================
      46/       0 :                     ; ----------------------------------------------------------------
      47/       0 :                     ; USER SETTINGS
      48/       0 :                     ; ----------------------------------------------------------------
      49/       0 :                     
      50/       0 :                     ; --------------------------------------------------------
      51/       0 :                     ; 68000 RAM SIZES (MAIN-CPU)
      52/       0 :                     ;
      53/       0 :                     ; MAX_SysCode, MAX_UserCode are only used in Sega CD
      54/       0 :                     ; Sega 32X and CD32X.
      55/       0 :                     ; These sections are free to use on stock Genesis
      56/       0 :                     ; and Pico in case you are not interested on the add-ons.
      57/       0 :                     ;
      58/       0 :                     ; RESERVED RAM ADDRESSES:
      59/       0 :                     ; $FFFB00-$FFFD00 | Stack area a7
      60/       0 :                     ; $FFFD00-$FFFDFF | RESERVED for the Sega CD Vector jumps
 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 2 - 02/21/2024 06:05:23 PM


      61/       0 :                     ;                   FREE if running on cartridge
      62/       0 :                     ;                   (Genesis,32X,Pico)
      63/       0 :                     ; $FFFE00-$FFFEFF | RESERVED for Sega CD, BIOS uses this
      64/       0 :                     ;                   area as temporals
      65/       0 :                     ;                   ** Not sure if this can be used after
      66/       0 :                     ;                   during the application **
      67/       0 :                     ; $FFFF00-$FFFFFF | RESERVED for the Sound Driver:
      68/       0 :                     ;                   The Z80 driver writes to this area
      69/       0 :                     ;                   AND posibilly for the PICO 68k
      70/       0 :                     ;                   driver version of GEMA
      71/       0 :                     ; --------------------------------------------------------
      72/       0 :                     
      73/       0 : =$2000               MAX_SysCode	equ $2000	; Task routines ** CD/32X/CD32X ONLY **
      74/       0 : =$8000               MAX_UserCode	equ $8000	; USER code ** CD/32X/CD32X ONLY **
      75/       0 : =$1800               MAX_ScrnBuff	equ $1800	; Current screen buffer
      76/       0 : =$2000               MAX_MdVideo	equ $2000	; Video cache'd visuals, registers, etc.
      77/       0 : =$600                MAX_MdSystem	equ $0600	; Internal lib stuff and a copy of save data for reading/writing
      78/       0 : =$C00                MAX_MdOther	equ $0C00	; Add-on stuff
      79/       0 :                     
      80/       0 :                     ; ====================================================================
      81/       0 :                     
      82/       0 :                     		org 0
      83/       0 :                     		cpu 		68000		; Starting CPU is 68000
      84/       0 :                     		padding		off		; Dont pad dc.b
      85/       0 :                     		listing 	purecode	; Want listing file
      86/       0 :                     		supmode 	on 		; Supervisor mode (68K)
      87/       0 :                     		dottedstructs	off
      88/       0 :                     		page 		0
      89/       0 :                     
      90/       0 :                     ; ====================================================================
      91/       0 :                     ; ----------------------------------------------------------------
      92/       0 :                     ; Includes
      93/       0 :                     ; ----------------------------------------------------------------
      94/       0 :                     
      95/       0 :                     		include	"macros.asm"		; Assembler macros
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; MACROS section
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; THIS MUST BE INCLUDED AT THE VERY START.
(1)    6/       0 :                     ; ----------------------------------------------------------------
(1)    7/       0 :                     
(1)    8/       0 :                     ; ====================================================================
(1)    9/       0 :                     ; --------------------------------------------------------
(1)   10/       0 :                     ; Functions
(1)   11/       0 :                     ; --------------------------------------------------------
(1)   12/       0 :                     
(1)   13/       0 :                     locate		function a,b,c,(b&$FF)|(a<<8&$FF00)|(c<<16&$FF0000)	; VDP locate: X pos|Y pos|Layer for some video
(1)   14/       0 :                     cell_vram	function a,(a<<5)					; Vram position in 8x8 CELLS
(1)   15/       0 :                     map_size	function l,r,(((l-1)/8)<<16&$FFFF0000|((r-1)/8)&$FFFF)	; Full w/h sizes, for cell sizes use doubleword
(1)   16/       0 :                     ; md_ramloc	function x,-(-x)&$FFFFFFFF
(1)   17/       0 :                     
(1)   18/       0 :                     ; ====================================================================
(1)   19/       0 :                     ; --------------------------------------------------------
(1)   20/       0 :                     ; Macros
(1)   21/       0 :                     ; --------------------------------------------------------
(1)   22/       0 :                     
(1)   23/       0 : =$0                  currPadding	set 0
(1)   24/       0 :                     notZ80		function cpu,(cpu<>128)&&(cpu<>32988)
(1)   25/       0 :                     
(1)   26/       0 :                     ; -------------------------------------
(1)   27/       0 :                     ; Reserve memory
(1)   28/       0 :                     ;
(1)   29/       0 :                     ; (Doesn't work on Z80)
(1)   30/       0 :                     ; -------------------------------------
(1)   31/       0 :                     
(1)   32/       0 :                     strct		macro thisinput			; Reserve memory address
(1)   33/       0 :                     GLBL_LASTPC	set *
(1)   34/       0 :                     		dephase
(1)   35/       0 :                     		phase thisinput
(1)   36/       0 :                     GLBL_LASTORG	set *
(1)   37/       0 :                     		endm
(1)   38/       0 :                     
(1)   39/       0 :                     ; -------------------------------------
(1)   40/       0 :                     ; Finish struct
(1)   41/       0 :                     ; -------------------------------------
(1)   42/       0 :                     
(1)   43/       0 :                     endstrct	macro				; Then finish the custom struct.
(1)   44/       0 :                     		org GLBL_LASTORG
(1)   45/       0 :                     		phase GLBL_LASTPC
(1)   46/       0 :                     		endm
(1)   47/       0 :                     
(1)   48/       0 :                     ; -------------------------------------
(1)   49/       0 :                     ; Report memory usage
(1)   50/       0 :                     ; -------------------------------------
(1)   51/       0 :                     
(1)   52/       0 :                     report		macro text,dis,dat
(1)   53/       0 :                     	if MOMPASS == 2
(1)   54/       0 :                     		if dat == -1
(1)   55/       0 :                     			message text+": \{(dis)&$FFFFFF}"
(1)   56/       0 :                     		else
(1)   57/       0 :                     			if dis > dat
(1)   58/       0 :                     				warning "RAN OUT OF "+text+" SPACE (\{(dis)&$FFFFFF} of \{(dat)&$FFFFFF})"
(1)   59/       0 :                     			else
(1)   60/       0 :                     				message text+" uses \{(dis)&$FFFFFF} of \{(dat)&$FFFFFF}"
(1)   61/       0 :                     			endif
(1)   62/       0 :                     		endif
(1)   63/       0 :                     	endif
(1)   64/       0 :                     		endm
(1)   65/       0 :                     
(1)   66/       0 :                     ; -------------------------------------
(1)   67/       0 :                     ; Same thing but only show on error
(1)   68/       0 :                     ; -------------------------------------
(1)   69/       0 :                     
(1)   70/       0 :                     erreport	macro text,dis,dat
(1)   71/       0 :                     	if MOMPASS == 2
(1)   72/       0 :                     		if dat == -1
(1)   73/       0 :                     			message text+": \{(dis)&$FFFFFF}"
(1)   74/       0 :                     		else
(1)   75/       0 :                     			if dis > dat
(1)   76/       0 :                     				error "RAN OUT OF "+text+" (\{(dis)&$FFFFFF} of \{(dat)&$FFFFFF})"
(1)   77/       0 :                     ; 			else
(1)   78/       0 :                     ; 				message text+" uses \{(dis)&$FFFFFF} of \{(dat)&$FFFFFF}"
(1)   79/       0 :                     			endif
(1)   80/       0 :                     		endif
(1)   81/       0 :                     	endif
(1)   82/       0 :                     		endm
(1)   83/       0 :                     
(1)   84/       0 :                     ; -------------------------------------
(1)   85/       0 :                     ; ZERO Fill padding
(1)   86/       0 :                     ; -------------------------------------
(1)   87/       0 :                     
(1)   88/       0 :                     rompad		macro address			; Zero fill
(1)   89/       0 :                     diff := address - *
(1)   90/       0 :                     		if diff < 0
(1)   91/       0 :                     			error "too much stuff before org $\{address} ($\{(-diff)} bytes)"
(1)   92/       0 :                     		else
(1)   93/       0 :                     			while diff > 1024
(1)   94/       0 :                     				; AS can only generate 1 kb of code on a single line
(1)   95/       0 :                     				dc.b [1024]0
(1)   96/       0 :                     diff := diff - 1024
(1)   97/       0 :                     			endm
(1)   98/       0 :                     			dc.b [diff]0
(1)   99/       0 :                     		endif
(1)  100/       0 :                     	endm
(1)  101/       0 :                     
(1)  102/       0 :                     ; ====================================================================
(1)  103/       0 :                     ; --------------------------------------------------------
(1)  104/       0 :                     ; ISO filesystem macros
(1)  105/       0 :                     ; --------------------------------------------------------
(1)  106/       0 :                     
(1)  107/       0 :                     ; Set a ISO file
(1)  108/       0 :                     ; NOTE: a valid ISO head is required from $8000 to $B7FF
(1)  109/       0 :                     ; DATES are random here
(1)  110/       0 :                     
(1)  111/       0 :                     iso_setfs	macro type,start,end
(1)  112/       0 :                     .fstrt:
(1)  113/       0 :                     		dc.b .fend-.fstrt				; Block size
(1)  114/       0 :                     		dc.b 0						; zero
(1)  115/       0 :                     		dc.b (start>>11&$FF),(start>>19&$FF)		; Start sector, little
(1)  116/       0 :                     		dc.b (start>>27&$FF),(start>>35&$FF)
(1)  117/       0 :                     		dc.l start>>11					; Start sector, big
(1)  118/       0 :                     		dc.b ((end-start)&$FF),((end-start)>>8&$FF)	; Filesize, little
(1)  119/       0 :                     		dc.b ((end-start)>>16&$FF),((end-start)>>24&$FF)
(1)  120/       0 :                     		dc.l end-start					; Filesize, big
(1)  121/       0 :                     		dc.b (2023-1900)+1				; Year
(1)  122/       0 :                     		dc.b 0,0,0,0,0,0				; TODO
(1)  123/       0 :                     		dc.b 2						; File flags
(1)  124/       0 :                     		dc.b 0,0
(1)  125/       0 :                     		dc.b 1,0					; Volume sequence number, little
(1)  126/       0 :                     		dc.b 0,1					; Volume sequence number, big
(1)  127/       0 :                     		dc.b 1,type
(1)  128/       0 :                     .fend:
(1)  129/       0 :                     		endm
(1)  130/       0 :                     
(1)  131/       0 :                     iso_file	macro filename,start,end
(1)  132/       0 :                     .fstrt:		dc.b .fend-.fstrt				; Block size
(1)  133/       0 :                     		dc.b 0						; zero
(1)  134/       0 :                     		dc.b (start>>11&$FF),(start>>19&$FF)		; Start sector, little
(1)  135/       0 :                     		dc.b (start>>27&$FF),(start>>35&$FF)
(1)  136/       0 :                     		dc.l start>>11					; Start sector, big
(1)  137/       0 :                     		dc.b ((end-start)&$FF),((end-start)>>8&$FF)	; Filesize, little
(1)  138/       0 :                     		dc.b ((end-start)>>16&$FF),((end-start)>>24&$FF)
(1)  139/       0 :                     		dc.l end-start					; Filesize, big
(1)  140/       0 :                     		dc.b (2023-1900)+1				; Year
(1)  141/       0 :                     		dc.b 0,0,0,0,0,0				; TODO
(1)  142/       0 :                     		dc.b 0						; File flags
(1)  143/       0 :                     		dc.b 0,0
(1)  144/       0 :                     		dc.b 1,0					; Volume sequence number, little
(1)  145/       0 :                     		dc.b 0,1					; Volume sequence number, big
(1)  146/       0 :                     		dc.b .flend-.flen
(1)  147/       0 :                     .flen:		dc.b filename,";1"
(1)  148/       0 :                     .flend:		dc.b 0
(1)  149/       0 :                     .fend:
(1)  150/       0 :                     		endm
(1)  151/       0 :                     
(1)  152/       0 :                     ; ====================================================================
(1)  153/       0 :                     ; --------------------------------------------------------
(1)  154/       0 :                     ; Nikona macros
(1)  155/       0 :                     ; --------------------------------------------------------
(1)  156/       0 :                     
(1)  157/       0 :                     ; ---------------------------------------------
(1)  158/       0 :                     ; Screen mode code
(1)  159/       0 :                     ; ---------------------------------------------
(1)  160/       0 :                     
(1)  161/       0 :                     screen_code macro lblstart,lblend,path
(1)  162/       0 :                     	if MCD|MARSCD
(1)  163/       0 :                     		align $800		; SCD/CD32X sector align
(1)  164/       0 :                     	elseif MARS
(1)  165/       0 :                     		align 4
(1)  166/       0 :                     		phase $880000+*		; 32X ROM-area
(1)  167/       0 :                     	endif
(1)  168/       0 :                     lblstart label *
(1)  169/       0 :                     	if MARS
(1)  170/       0 :                     		dephase
(1)  171/       0 :                     	endif
(1)  172/       0 :                     
(1)  173/       0 :                     mctopscrn:
(1)  174/       0 :                     	if MARS|MCD|MARSCD
(1)  175/       0 :                     		phase RAM_UserCode	; SCD/32X/CD32X relocate to RAM area
(1)  176/       0 :                     	endif
(1)  177/       0 :                     mcscrn_s:
(1)  178/       0 :                     	include path;"game/screen_0/code.asm"
(1)  179/       0 :                     mcscrn_e:
(1)  180/       0 :                     	if MARS
(1)  181/       0 :                     		dephase	; dephase RAM section
(1)  182/       0 :                     		dephase ; dephase $880000+ section
(1)  183/       0 :                     	elseif MCD|MARSCD
(1)  184/       0 :                     		dephase
(1)  185/       0 :                     		phase mctopscrn+(mcscrn_e-RAM_UserCode)
(1)  186/       0 :                     		align $800
(1)  187/       0 :                     ; Md_Screen00_e:
(1)  188/       0 :                     lblend label *
(1)  189/       0 :                     	endif
(1)  190/       0 :                     	if MCD|MARS|MARSCD
(1)  191/       0 :                     		report "THIS SCREEN's code",mcscrn_e-RAM_UserCode,MAX_UserCode
(1)  192/       0 :                     	endif
(1)  193/       0 :                     	endm
(1)  194/       0 :                     
(1)  195/       0 :                     ; ---------------------------------------------
(1)  196/       0 :                     ; 68K data bank
(1)  197/       0 :                     ; ---------------------------------------------
(1)  198/       0 :                     
(1)  199/       0 :                     data_bkset macro startlbl,except
(1)  200/       0 :                     	if MCD|MARSCD
(1)  201/       0 :                     		align $800
(1)  202/       0 :                     	elseif MARS
(1)  203/       0 :                     		align 4
(1)  204/       0 :                     	endif
(1)  205/       0 :                     ; MCD_DBANK0:
(1)  206/       0 :                     startlbl label *
(1)  207/       0 :                     	if MCD|MARSCD
(1)  208/       0 :                     		phase sysmcd_wram
(1)  209/       0 :                     	elseif MARS
(1)  210/       0 :                     ; 		dephase
(1)  211/       0 :                     	if except==-1
(1)  212/       0 :                     		phase $900000+*	; First 32X data bank
(1)  213/       0 :                     	else
(1)  214/       0 :                     		phase $900000
(1)  215/       0 :                     	endif
(1)  216/       0 :                     	endif
(1)  217/       0 :                     	endm
(1)  218/       0 :                     
(1)  219/       0 :                     data_bkend macro startlbl,endlbl,thissize
(1)  220/       0 :                     
(1)  221/       0 :                     	if MARS
(1)  222/       0 :                     		dephase
(1)  223/       0 :                     		if thissize > $40000
(1)  224/       0 :                     			warning "THIS BANK SIZE IS TOO LARGE FOR WORD-RAM (CD/CD32X)"
(1)  225/       0 :                     		endif
(1)  226/       0 :                     		report "THIS 68K DATA BANK at $900000",thissize,$100000
(1)  227/       0 :                     	elseif MCD|MARSCD
(1)  228/       0 :                     		dephase
(1)  229/       0 :                     		align $800
(1)  230/       0 :                     endlbl label *	; <-- CD/CD32X ONLY
(1)  231/       0 :                     		report "THIS 68K DATA BANK at WORD-RAM",thissize,$40000
(1)  232/       0 :                     	endif
(1)  233/       0 :                     	endm
(1)  234/       0 :                     
(1)  235/       0 :                     ; --------------------------------------------------------
(1)  236/       0 :                     ; 32X ONLY
(1)  237/       0 :                     ; --------------------------------------------------------
(1)  238/       0 :                     
(1)  239/       0 :                     sdram_bkset macro thislbl,endlbl
(1)  240/       0 :                     	if MCD|MARSCD
(1)  241/       0 :                     		align $800
(1)  242/       0 :                     	elseif MARS
(1)  243/       0 :                     		align 4
(1)  244/       0 :                     		phase $880000+*
(1)  245/       0 :                     	endif
(1)  246/       0 :                     ; MARSDATA_DEFAULT:
(1)  247/       0 :                     thislbl label *
(1)  248/       0 :                     	if MARS
(1)  249/       0 :                     		dephase
(1)  250/       0 :                     	endif
(1)  251/       0 :                     	if MARS|MARSCD
(1)  252/       0 :                     		dc.l endlbl-thislbl
(1)  253/       0 :                     		phase SH2_USER_DATA
(1)  254/       0 :                     	endif
(1)  255/       0 :                     	endm
(1)  256/       0 :                     
(1)  257/       0 :                     ; ---------------------------------------------
(1)  258/       0 :                     
(1)  259/       0 :                     sdram_bkend macro thislbl,endlbl
(1)  260/       0 :                     	if MARS|MARSCD
(1)  261/       0 :                     		dephase
(1)  262/       0 :                     		align 8	; <-- DREQ alignment
(1)  263/       0 :                     	endif
(1)  264/       0 :                     	if MCD|MARSCD
(1)  265/       0 :                     endlbl label *
(1)  266/       0 :                     		align $800	; <-- AS failing
(1)  267/       0 :                     ; 		dc.l 0
(1)  268/       0 :                     	elseif MARS
(1)  269/       0 :                     		phase $880000+*
(1)  270/       0 :                     endlbl label *
(1)  271/       0 :                     		dephase
(1)  272/       0 :                     	endif
(1)  273/       0 :                     
(1)  274/       0 :                     	if MARS|MARSCD
(1)  275/       0 :                     		report "SH2 SDRAM DATA: thislbl",endlbl-thislbl,(CS3|$40000)-SH2_USER_DATA
(1)  276/       0 :                     	endif
(1)  277/       0 :                     	endm
(1)  278/       0 :                     
(1)  279/       0 :                     ; --------------------------------------------------------
(1)  280/       0 :                     ; Set data bank(s) for the current screen
(1)  281/       0 :                     ;
(1)  282/       0 :                     ; mcdpos:
(1)  283/       0 :                     ; 	dc.b "FILENAME.BIN",0
(1)  284/       0 :                     ; 	align 2
(1)  285/       0 :                     ;
(1)  286/       0 :                     ; marspos:
(1)  287/       0 :                     ; 	dc.l MARSDATA_DEFAULT		; 32X Cartridge point (UNUSED on CD32X)
(1)  288/       0 :                     ; 	dc.b "MARSD_00.BIN",0		; CD32X Filename (UNUSED on 32X Cartridge)
(1)  289/       0 :                     ; 	align 2
(1)  290/       0 :                     ; --------------------------------------------------------
(1)  291/       0 :                     
(1)  292/       0 :                     set_dbanks macro mcdpos,marspos
(1)  293/       0 :                     	if MARS|MARSCD
(1)  294/       0 :                     		lea	marspos(pc),a0		; 32X/CD32X: SH2 side data
(1)  295/       0 :                     		bsr	System_MarsDataPack
(1)  296/       0 :                     	endif
(1)  297/       0 :                     	if MCD|MARSCD
(1)  298/       0 :                     		bsr	System_McdSubWait
(1)  299/       0 :                     		lea	mcdpos(pc),a0		; CD/CD32X: Genesis data
(1)  300/       0 :                     		bsr	System_McdTrnsfr_WRAM
(1)  301/       0 :                     	endif
(1)  302/       0 :                     	endm
(1)  303/       0 :                     
(1)  304/       0 :                     ; ---------------------------------------------
(1)  305/       0 :                     ; VDP color debug
(1)  306/       0 :                     ; ---------------------------------------------
(1)  307/       0 :                     
(1)  308/       0 :                     vdp_showme	macro color
(1)  309/       0 :                     		move.l	#$C0000000,(vdp_ctrl).l
(1)  310/       0 :                     		move.w	#color,(vdp_data).l
(1)  311/       0 :                     		endm
(1)  312/       0 :                     
      96/       0 :                     		include "game/globals.asm"	; USER variables
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; GLOBAL RAM for ALL screen modes
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; Score, Lives, Level number, etc.
(1)    6/       0 :                     ; ----------------------------------------------------------------
(1)    7/       0 :                     
(1)    8/       0 : (MACRO)              			strct RAM_MdGlobal
(1)    8/       0 : =$0                  GLBL_LASTPC     set *
(1)    8/       0 :                                     dephase
(1)    8/FFFFFFFFFFFFEA04 :                                     phase RAM_MDGLOBAL
(1)    8/FFFFFFFFFFFFEA04 : =$FFFFFFFFFFFFEA04   GLBL_LASTORG    set *
(1)    9/FFFFFFFFFFFFEA04 :                     
(1)   10/FFFFFFFFFFFFEA04 :                     ; ------------------------------------------------------------
(1)   11/FFFFFFFFFFFFEA04 :                     ; Examples:
(1)   12/FFFFFFFFFFFFEA04 :                     ;
(1)   13/FFFFFFFFFFFFEA04 :                     ; RAM_Glbl_ExmpL ds.l 8 ; reserve 4 LONGS ($20 bytes)
(1)   14/FFFFFFFFFFFFEA04 :                     ; RAM_Glbl_ExmpW ds.w 6 ; reserve 3 WORDS ($0C bytes)
(1)   15/FFFFFFFFFFFFEA04 :                     ; RAM_Glbl_ExmpB ds.b 5 ; reserve 5 bytes
(1)   16/FFFFFFFFFFFFEA04 :                     ;
(1)   17/FFFFFFFFFFFFEA04 :                     ; Careful with bytes, everything needs to be word-algined
(1)   18/FFFFFFFFFFFFEA04 :                     ; or your will get an ADDRESS ERROR.
(1)   19/FFFFFFFFFFFFEA04 :                     ; ------------------------------------------------------------
(1)   20/FFFFFFFFFFFFEA04 :                     
(1)   21/FFFFFFFFFFFFEA04 :                     RAM_Glbl_Filler		ds.l 1		; 1 long (4 bytes)
(1)   22/FFFFFFFFFFFFEA08 :                     
(1)   23/FFFFFFFFFFFFEA08 :                     
(1)   24/FFFFFFFFFFFFEA08 :                     ; ------------------------------------------------------------
(1)   25/FFFFFFFFFFFFEA08 :                     sizeof_MdGlbl		ds.l 0		; size label
(1)   26/FFFFFFFFFFFFEA0C : (MACRO)              			endstrct
(1)   26/FFFFFFFFFFFFEA04 :                                     org GLBL_LASTORG
(1)   26/       0 :                                     phase GLBL_LASTPC
(1)   27/       0 :                     
      97/       0 :                     		include	"system/mcd/map.asm"	; Sega CD hardware map (shared with Sub-CPU)
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; SEGA CD SUB-CPU MAP
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; ------------------------------------------------
(1)    7/       0 :                     ; Register area
(1)    8/       0 :                     ;
(1)    9/       0 :                     ; MAIN-CPU: $A12000 (sysmcd_reg)
(1)   10/       0 :                     ; SUB-CPU:  $FF8000 (scpu_reg)
(1)   11/       0 :                     ; ------------------------------------------------
(1)   12/       0 :                     
(1)   13/       0 :                     ; -------------
(1)   14/       0 :                     ; bits
(1)   15/       0 :                     ; -------------
(1)   16/       0 :                     
(1)   17/       0 : =$2                  bitWRamMode	equ 2		;2M | 1M
(1)   18/       0 :                     
(1)   19/       0 :                     ; -------------
(1)   20/       0 :                     ; Registers
(1)   21/       0 :                     ; -------------
(1)   22/       0 :                     
(1)   23/       0 : =$3                  mcd_memory	equ $03
(1)   24/       0 : =$6                  mcd_hint	equ $06		; [W] HBlank RAM redirection-jump (MAIN CPU ONLY)
(1)   25/       0 : =$E                  mcd_comm_m	equ $0E		; [B] Comm port MAIN R/W | SUB READ ONLY
(1)   26/       0 : =$F                  mcd_comm_s	equ $0F		; [B] Comm port SUB R/W  | MAIN READ ONLY
(1)   27/       0 : =$10                 mcd_dcomm_m	equ $10		; [S: $0E] Communication MAIN
(1)   28/       0 : =$20                 mcd_dcomm_s	equ $20		; [S: $0E] Communication SUB
(1)   29/       0 : =$32                 mcd_intmask	equ $32		;
(1)   30/       0 :                     
(1)   31/       0 :                     ; ====================================================================
(1)   32/       0 :                     
      98/       0 :                     		include	"system/mars/map.asm"	; 32X hardware map (shared with SH2)
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; SH2 MAP
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; --------------------------------------------------------
(1)    7/       0 :                     ; SH2 SIDE MAP
(1)    8/       0 :                     ; --------------------------------------------------------
(1)    9/       0 :                     
(1)   10/       0 : =$0                  CS0		equ	$00000000	; Boot ROM & System registers
(1)   11/       0 : =$2000000            CS1		equ	$02000000	; ROM data all 4MB, Gone if RV=1
(1)   12/       0 : =$4000000            CS2		equ	$04000000	; Framebuffer area
(1)   13/       0 : =$6000000            CS3		equ	$06000000	; SDRAM
(1)   14/       0 : =$20000000           TH		equ	$20000000	; OR value for CacheThru
(1)   15/       0 : =$20004000           _sysreg		equ	$00004000|TH	; MARS System registers
(1)   16/       0 : =$20004100           _vdpreg		equ	$00004100|TH	; SuperVDP registers
(1)   17/       0 : =$20004200           _palette	equ	$00004200|TH	; Palette RAM for Pixel-Packed or RLE mode
(1)   18/       0 : =$24000000           _framebuffer:	equ	CS2|TH		; Framebuffer: First 240 words are the linetable
(1)   19/       0 : =$24020000           _overwrite:	equ	CS2|TH+$20000	; Overwrite: $00 writes are ignored
(1)   20/       0 :                     
(1)   21/       0 :                     ; --------------------------------------------------------
(1)   22/       0 :                     ; Variables
(1)   23/       0 :                     ; --------------------------------------------------------
(1)   24/       0 :                     
(1)   25/       0 :                     ; ------------------------------------------------
(1)   26/       0 :                     ; System
(1)   27/       0 :                     ; ------------------------------------------------
(1)   28/       0 :                     
(1)   29/       0 :                     ; _sysreg
(1)   30/       0 : =$0                  adapter		equ	$00		; adapter control register (Read as WORD)
(1)   31/       0 : =$1                  intmask		equ	$01		; SH2 CPU ONLY: interrupts mask
(1)   32/       0 : =$3                  standby		equ	$03		; CMD interrupt request bit by MD side (slave|master) (BYTE)
(1)   33/       0 : =$5                  hcount		equ	$05		; H Counter (BYTE)
(1)   34/       0 : =$6                  dreqctl		equ	$06		; DREQ control (WORD)
(1)   35/       0 : =$8                  dreqsource	equ	$08		; DREQ source address
(1)   36/       0 : =$C                  dreqdest	equ	$0C		; DREQ destination address
(1)   37/       0 : =$10                 dreqlen		equ	$10		; DREQ length
(1)   38/       0 : =$12                 dreqfifo	equ	$12		; DREQ FIFO
(1)   39/       0 : =$14                 vresintclr	equ	$14		; VRES interrupt clear
(1)   40/       0 : =$16                 vintclr		equ	$16		; V interrupt clear
(1)   41/       0 : =$18                 hintclr		equ	$18		; H interrupt clear
(1)   42/       0 : =$1A                 cmdintclr	equ	$1a		; CMD interrupt clear
(1)   43/       0 : =$1C                 pwmintclr	equ	$1C		; PWM interrupt clear
(1)   44/       0 : =$20                 comm0		equ	$20		; Communication ports ***
(1)   45/       0 : =$21                 comm1		equ	$21		; ALL CPUs can see this ports: including Z80
(1)   46/       0 : =$22                 comm2		equ	$22		; only be careful with the read/write directions.
(1)   47/       0 : =$23                 comm3		equ	$23		; ODD addresses (1,3,5...) are BYTE-read only.
(1)   48/       0 : =$24                 comm4		equ	$24		; EVEN addresses (0,2,4...) can be read as WORDs
(1)   49/       0 : =$25                 comm5		equ	$25		; Writing LONG addreses are possible depending
(1)   50/       0 : =$26                 comm6		equ	$26		; of the CPU's aligment limitations.
(1)   51/       0 : =$27                 comm7		equ	$27		;
(1)   52/       0 : =$28                 comm8		equ	$28		;
(1)   53/       0 : =$29                 comm9		equ	$29		;
(1)   54/       0 : =$2A                 comm10		equ	$2A		;
(1)   55/       0 : =$2B                 comm11		equ	$2B		;
(1)   56/       0 : =$2C                 comm12		equ	$2C		;
(1)   57/       0 : =$2D                 comm13		equ	$2D		;
(1)   58/       0 : =$2E                 comm14		equ	$2E		;
(1)   59/       0 : =$2F                 comm15		equ	$2F		;
(1)   60/       0 : =$30                 timerctl	equ	$30		; PWM Timer Control
(1)   61/       0 : =$31                 pwmctl		equ	$31		; PWM Control
(1)   62/       0 : =$32                 cycle		equ	$32		; PWM Cycle
(1)   63/       0 : =$34                 lchwidth	equ	$34		; PWM L ch Width
(1)   64/       0 : =$36                 rchwidth	equ	$36		; PWM R ch Width
(1)   65/       0 : =$38                 monowidth	equ	$38		; PWM Monaural Width
(1)   66/       0 :                     
(1)   67/       0 :                     ; _sysreg
(1)   68/       0 :                     ; adapter
(1)   69/       0 : =$1                  CART		equ	%00000001	; CD or Cartridge
(1)   70/       0 : =$2                  ADEN		equ	%00000010	; MARS Enabled: No/Yes
(1)   71/       0 : =$80                 FM		equ	%10000000	; SuperVDP permission: MD or SH
(1)   72/       0 :                     ; framectl
(1)   73/       0 : =$1                  FS		equ	%00000001	; Current framebuffer DRAM pixel data
(1)   74/       0 : =$2                  FEN		equ	%00000010	; Can write to Framebuffer: Yes/No
(1)   75/       0 :                     ; vdpsts
(1)   76/       0 : =$80                 VBLK		equ	%10000000	; VBlank bit
(1)   77/       0 : =$40                 HBLK		equ	%01000000	; HBlank bit
(1)   78/       0 : =$20                 PEN		equ	%00100000	; Can write to Palette: Yes/No
(1)   79/       0 :                     ; intmask
(1)   80/       0 : =$8                  VIRQ_ON		equ	$08		; IRQ masks for IRQ mask register
(1)   81/       0 : =$4                  HIRQ_ON		equ	$04
(1)   82/       0 : =$2                  CMDIRQ_ON	equ	$02
(1)   83/       0 : =$1                  PWMIRQ_ON	equ	$01
(1)   84/       0 :                     
(1)   85/       0 :                     ; _vdpreg
(1)   86/       0 : =$0                  tvmode		equ	$00		; TV mode
(1)   87/       0 : =$1                  bitmapmd	equ	$01		; Bitmap mode
(1)   88/       0 : =$2                  shift		equ	$02		; Lineshift bit
(1)   89/       0 : =$4                  filllength	equ	$04		; Auto Fill Length register
(1)   90/       0 : =$6                  fillstart	equ	$06		; Auto Fill Start Address register
(1)   91/       0 : =$8                  filldata	equ	$08		; Auto Fill Data register
(1)   92/       0 : =$A                  vdpsts		equ	$0A		; VDP Status register
(1)   93/       0 : =$B                  framectl	equ	$0B		; Frame Buffer Control register
(1)   94/       0 :                     
(1)   95/       0 :                     ; --------------------------------------------------------
(1)   96/       0 :                     ; SH2 Internal registers, independent for each CPU
(1)   97/       0 :                     ; --------------------------------------------------------
(1)   98/       0 :                     
(1)   99/       0 :                     ; DMA Channel 0: General data transfer
(1)  100/       0 :                     ; DMA Channel 1: PWM only
(1)  101/       0 :                     
(1)  102/       0 : =$FFFFFE00           _SERIAL		equ	$FFFFFE00	; Serial Control
(1)  103/       0 : =$FFFFFE10           _FRT		equ	$FFFFFE10	; Free run timer
(1)  104/       0 : =$0                  _TIER		equ	$00		; Timer interrupt enable register
(1)  105/       0 : =$1                  _TCSR		equ	$01		; Timer control & status register
(1)  106/       0 : =$2                  _FRC_H		equ	$02		; Free running counter High
(1)  107/       0 : =$3                  _FRC_L		equ	$03		; Free running counter Low
(1)  108/       0 : =$4                  _OCR_H		equ	$04		; Output compare register High
(1)  109/       0 : =$5                  _OCR_L		equ	$05		; Output compare register Low
(1)  110/       0 : =$6                  _TCR		equ	$06		; Timer control register
(1)  111/       0 : =$7                  _TOCR		equ	$07		; Timer output compare control register
(1)  112/       0 : =$FFFFFE92           _CCR		equ	$FFFFFE92	; Cache register (WORD)
(1)  113/       0 : =$FFFFFF00           _JR		equ	$FFFFFF00	; DIVU (--- / val)
(1)  114/       0 : =$FFFFFF04           _HRL32		equ	$FFFFFF04	; DIVU (val / ---) or RIGHT-long result if read
(1)  115/       0 : =$FFFFFF10           _HRH		equ	$FFFFFF10	; DIVU Result: LEFT long
(1)  116/       0 : =$FFFFFF14           _HRL		equ	$FFFFFF14	; DIVU Result: RIGHT long
(1)  117/       0 : =$FFFFFF80           _DMASOURCE0	equ	$FFFFFF80	; DMA source address 0
(1)  118/       0 : =$FFFFFF84           _DMADEST0	equ	$FFFFFF84	; DMA destination address 0
(1)  119/       0 : =$FFFFFF88           _DMACOUNT0	equ	$FFFFFF88	; DMA transfer count 0
(1)  120/       0 : =$FFFFFF8C           _DMACHANNEL0	equ	$FFFFFF8C	; DMA channel control 0
(1)  121/       0 : =$FFFFFF90           _DMASOURCE1	equ	$FFFFFF90	; DMA source address 1
(1)  122/       0 : =$FFFFFF94           _DMADEST1	equ	$FFFFFF94	; DMA destination address 1
(1)  123/       0 : =$FFFFFF98           _DMACOUNT1	equ	$FFFFFF98	; DMA transfer count 1
(1)  124/       0 : =$FFFFFF9C           _DMACHANNEL1	equ	$FFFFFF9C	; DMA channel control 1
(1)  125/       0 : =$FFFFFFA0           _DMAVECTORN0	equ	$FFFFFFA0	; DMA vector number N0
(1)  126/       0 : =$FFFFFFA4           _DMAVECTORE0	equ	$FFFFFFA4	; DMA vector number E0
(1)  127/       0 : =$FFFFFFA8           _DMAVECTORN1	equ	$FFFFFFA8	; DMA vector number N1
(1)  128/       0 : =$FFFFFFAC           _DMAVECTORE1	equ	$FFFFFFAC	; DMA vector number E1
(1)  129/       0 : =$FFFFFFB0           _DMAOPERATION	equ	$FFFFFFB0	; DMA operation
(1)  130/       0 : =$FFFFFFB4           _DMAREQACK0	equ	$FFFFFFB4	; DMA request/ack select control 0
(1)  131/       0 : =$FFFFFFB8           _DMAREQACK1	equ	$FFFFFFB8	; DMA request/ack select control 1
(1)  132/       0 :                     
      99/       0 :                     		include	"system/md/map.asm"	; Genesis hardware map and other areas
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Genesis / Pico 68000 map
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 : =$200000             sys_exram	equ	$200000		; Second half of 4MB rom or external RAM (Normal or save data)
(1)    7/       0 : =$A00000             z80_cpu		equ	$A00000		; Z80 CPU area, size: $2000
(1)    8/       0 : =$A04000             ym_ctrl_1	equ	$A04000		; YM2612 reg 1
(1)    9/       0 : =$A04001             ym_data_1	equ	$A04001		; YM2612 reg 2
(1)   10/       0 : =$A04002             ym_ctrl_2	equ	$A04002		; YM2612 reg 1
(1)   11/       0 : =$A04003             ym_data_2	equ	$A04003		; YM2612 reg 2
(1)   12/       0 : =$A10001             sys_io		equ	$A10001		; bits: OVRSEAS(7)|PAL(6)|DISK(5)|VER(3-0)
(1)   13/       0 : =$A10003             sys_data_1	equ	$A10003		; Port 1 DATA
(1)   14/       0 : =$A10005             sys_data_2	equ	$A10005		; Port 2 DATA
(1)   15/       0 : =$A10007             sys_data_3	equ	$A10007		; Modem DATA
(1)   16/       0 : =$A10009             sys_ctrl_1	equ	$A10009		; Port 1 CTRL
(1)   17/       0 : =$A1000B             sys_ctrl_2	equ	$A1000B		; Port 2 CTRL
(1)   18/       0 : =$A1000D             sys_ctrl_3	equ	$A1000D		; Modem CTRL
(1)   19/       0 : =$A11100             z80_bus 	equ	$A11100		; only use bit 0 (bit 8 as WORD)
(1)   20/       0 : =$A11200             z80_reset	equ	$A11200		; WRITE only ($0000 reset/$0100 cancel)
(1)   21/       0 : =$A130F1             md_bank_sram	equ	$A130F1		; Make SRAM visible at $200000
(1)   22/       0 : =$A14000             sys_tmss	equ	$A14000		; write "SEGA" here for ver > 0
(1)   23/       0 : =$C00000             vdp_data	equ	$C00000		; video data port
(1)   24/       0 : =$C00004             vdp_ctrl	equ	$C00004		; video control port
(1)   25/       0 : =$C00011             psg_ctrl	equ	$C00011		; PSG control
(1)   26/       0 :                     
(1)   27/       0 :                     ; ----------------------------------------------------------------
(1)   28/       0 :                     ; SEGA CD map
(1)   29/       0 :                     ; ----------------------------------------------------------------
(1)   30/       0 :                     
(1)   31/       0 : =$200000             sysmcd_wram	equ	$200000
(1)   32/       0 : =$A12000             sysmcd_reg	equ	$A12000
(1)   33/       0 :                     
(1)   34/       0 :                     ; ----------------------------------------------------------------
(1)   35/       0 :                     ; 32X map
(1)   36/       0 :                     ; ----------------------------------------------------------------
(1)   37/       0 :                     
(1)   38/       0 : =$A130EC             sysmars_id	equ	$A130EC		; 32X's ID: "MARS"
(1)   39/       0 : =$A15100             sysmars_reg	equ	$A15100		; MARS 32X registers section, see system/mars/map.asm for variables
(1)   40/       0 :                     
(1)   41/       0 :                     ; ----------------------------------------------------------------
(1)   42/       0 :                     ; Genesis / Mega drive Z80 map
(1)   43/       0 :                     ; ----------------------------------------------------------------
(1)   44/       0 :                     
(1)   45/       0 : =$4000               zym_ctrl_1	equ	$4000		; YM2612 reg 1
(1)   46/       0 : =$4001               zym_data_1	equ	$4001		; YM2612 reg 2
(1)   47/       0 : =$4002               zym_ctrl_2	equ	$4002		; YM2612 reg 1
(1)   48/       0 : =$4003               zym_data_2	equ	$4003		; YM2612 reg 2
(1)   49/       0 : =$6000               zbank		equ	$6000		; Z80 ROM BANK: %XXXXXXXX X0000000 00000000 (9 writes)
(1)   50/       0 :                     ; zvdp_data	equ	$7F00		; video data port
(1)   51/       0 :                     ; zvdp_ctrl	equ	$7F04		; video control port
(1)   52/       0 : =$7F11               zpsg_ctrl	equ	$7F11		; PSG control
(1)   53/       0 :                     
     100/       0 :                     		include	"system/md/ram.asm"	; Genesis RAM sections
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; MD RAM
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; Reserved RAM sections:
(1)    6/       0 :                     ; $FFFD00-$FFFDFF: Sega CD's vectors
(1)    7/       0 :                     ; $FFFE80-$FFFFFF: Z80 write-only scratchpad
(1)    8/       0 :                     ; ----------------------------------------------------------------
(1)    9/       0 :                     
(1)   10/       0 :                     ; --------------------------------------------------------
(1)   11/       0 :                     ; Settings
(1)   12/       0 :                     ; --------------------------------------------------------
(1)   13/       0 :                     
(1)   14/       0 : (MACRO)              			strct $FFFF0000
(1)   14/       0 : =$0                  GLBL_LASTPC     set *
(1)   14/FFFFFFFFFFFFEA04 :                                     dephase
(1)   14/FFFFFFFFFFFF0000 :                                     phase $FFFF0000
(1)   14/FFFFFFFFFFFF0000 : =$FFFFFFFFFFFF0000   GLBL_LASTORG    set *
(1)   15/FFFFFFFFFFFF0000 :                     RAM_SystemCode		ds.b MAX_SysCode	; CD/32X/CD32X
(1)   16/FFFFFFFFFFFF2000 :                     RAM_UserCode		ds.b MAX_UserCode	; CD/32X/CD32X
(1)   17/FFFFFFFFFFFFA000 :                     
(1)   18/FFFFFFFFFFFFA000 :                     ; ------------------------------------------------
(1)   19/FFFFFFFFFFFFA000 :                     ; > $FF8000 section
(1)   20/FFFFFFFFFFFFA000 :                     ; ------------------------------------------------
(1)   21/FFFFFFFFFFFFA000 :                     
(1)   22/FFFFFFFFFFFFA000 :                     check_thisram		ds.l 0			; <-- get current pos
(1)   26/FFFFFFFFFFFFA004 :                     RAM_MdVideo		ds.b MAX_MdVideo	; $FF8000
(1)   27/FFFFFFFFFFFFC004 :                     RAM_MdSystem		ds.b MAX_MdSystem	;
(1)   28/FFFFFFFFFFFFC604 :                     RAM_MdOther		ds.b MAX_MdOther	; 32X's DREQ goes here
(1)   29/FFFFFFFFFFFFD204 :                     RAM_ScrnBuff		ds.b MAX_ScrnBuff
(1)   30/FFFFFFFFFFFFEA04 :                     RAM_MdGlobal		ds.b sizeof_MdGlbl
(1)   31/FFFFFFFFFFFFD40C :                     sizeof_MdRam		ds.l 0
(1)   32/FFFFFFFFFFFFD410 : (MACRO)              			endstrct
(1)   32/FFFFFFFFFFFF0000 :                                     org GLBL_LASTORG
(1)   32/       0 :                                     phase GLBL_LASTPC
(1)   36/       0 :                     
(1)   37/       0 :                     ; ------------------------------------------------
(1)   38/       0 :                     ; Add-on area
(1)   39/       0 :                     ; ------------------------------------------------
(1)   40/       0 :                     
(1)   41/       0 : (MACRO)              			strct RAM_MdOther
(1)   41/       0 : =$0                  GLBL_LASTPC     set *
(1)   41/FFFFFFFFFFFF0000 :                                     dephase
(1)   41/FFFFFFFFFFFFC604 :                                     phase RAM_MDOTHER
(1)   41/FFFFFFFFFFFFC604 : =$FFFFFFFFFFFFC604   GLBL_LASTORG    set *
(1)   42/FFFFFFFFFFFFC604 :                     RAM_MdDreq		ds.b $C00		; 32X DREQ area (MANUAL SIZE)
(1)   43/FFFFFFFFFFFFD204 :                     sizeof_RamOther		ds.l 0
(1)   44/FFFFFFFFFFFFD208 : (MACRO)              			endstrct
(1)   44/FFFFFFFFFFFFC604 :                                     org GLBL_LASTORG
(1)   44/       0 :                                     phase GLBL_LASTPC
(1)   45/       0 : (MACRO)              			erreport "ADD-ON RAM USES",(sizeof_RamOther-RAM_MdOther),MAX_MdOther
(1)   46/       0 :                     
(1)   47/       0 :                     ; ------------------------------------------------
(1)   48/       0 :                     ; Other
(1)   49/       0 :                     ; ------------------------------------------------
(1)   50/       0 :                     
(1)   51/       0 : =$FFFFFD00           RAM_Stack		equ RAM_MegaCd			; <-- goes backwards
(1)   52/       0 : =$FFFFFD00           RAM_MegaCd		equ $FFFFFD00
(1)   53/       0 : =$FFFFFF00           RAM_ZSndBuff		equ $FFFFFF00
(1)   54/       0 :                     
     101/       0 :                     		include	"system/shared.asm"	; Shared variables and specials
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Shared variables
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; ====================================================================
(1)    7/       0 :                     ; ----------------------------------------------------------------
(1)    8/       0 :                     ; 32X SECTION
(1)    9/       0 :                     ; ----------------------------------------------------------------
(1)   10/       0 :                     
(1)   87/       0 :                     
     102/       0 :                     
     103/       0 :                     ; ====================================================================
     104/       0 :                     ; ----------------------------------------------------------------
     105/       0 :                     ; Init procedures for all systems
     106/       0 :                     ; ----------------------------------------------------------------
     107/       0 :                     
     108/       0 :                     ; ---------------------------------------------
     109/       0 :                     ; SEGA 32X
     110/       0 :                     ; ---------------------------------------------
     111/       0 :                     
     177/       0 :                     		include	"system/head_md.asm"		; Genesis header
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Genesis header
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 : FFFF FD00           		dc.l RAM_Stack		; Stack point
(1)    7/       4 : 0000 0202           		dc.l MD_Entry		; Entry point MUST point to $3F0
(1)    8/       8 : 0000 0200           		dc.l MD_ErrBus		; Bus error
(1)    9/       C : 0000 0200           		dc.l MD_ErrAddr		; Address error
(1)   10/      10 : 0000 0200           		dc.l MD_ErrIll		; ILLEGAL Instruction
(1)   11/      14 : 0000 0200           		dc.l MD_ErrZDiv		; Divide by 0
(1)   12/      18 : 0000 0200           		dc.l MD_ErrChk		; CHK Instruction
(1)   13/      1C : 0000 0200           		dc.l MD_ErrTrapV	; TRAPV Instruction
(1)   14/      20 : 0000 0200           		dc.l MD_ErrPrivl	; Privilege violation
(1)   15/      24 : 0000 0200           		dc.l MD_Trace		; Trace
(1)   16/      28 : 0000 0200           		dc.l MD_Line1010	; Line 1010 Emulator
(1)   17/      2C : 0000 0200           		dc.l MD_Line1111	; Line 1111 Emulator
(1)   18/      30 : 0000 0200           		dc.l MD_ErrorEx		; Error exception
(1)   19/      34 : 0000 0200           		dc.l MD_ErrorEx
(1)   20/      38 : 0000 0200           		dc.l MD_ErrorEx
(1)   21/      3C : 0000 0200           		dc.l MD_ErrorEx
(1)   22/      40 : 0000 0200           		dc.l MD_ErrorEx
(1)   23/      44 : 0000 0200           		dc.l MD_ErrorEx
(1)   24/      48 : 0000 0200           		dc.l MD_ErrorEx
(1)   25/      4C : 0000 0200           		dc.l MD_ErrorEx
(1)   26/      50 : 0000 0200           		dc.l MD_ErrorEx
(1)   27/      54 : 0000 0200           		dc.l MD_ErrorEx
(1)   28/      58 : 0000 0200           		dc.l MD_ErrorEx
(1)   29/      5C : 0000 0200           		dc.l MD_ErrorEx
(1)   30/      60 : 0000 0200           		dc.l MD_ErrorEx
(1)   31/      64 : 0000 0200           		dc.l MD_ErrorTrap
(1)   32/      68 : 0000 0200           		dc.l MD_ErrorTrap
(1)   33/      6C : 0000 0200           		dc.l MD_ErrorTrap
(1)   34/      70 : FFFF C452           		dc.l RAM_MdMarsHInt	; RAM jump for HBlank (JMP xxxx xxxx)
(1)   35/      74 : 0000 0200           		dc.l MD_ErrorTrap
(1)   36/      78 : FFFF C44C           		dc.l RAM_MdMarsVInt	; RAM jump for VBlank (JMP xxxx xxxx)
(1)   37/      7C : 0000 0200           		dc.l MD_ErrorTrap
(1)   38/      80 : 0000 0200           		dc.l MD_ErrorTrap
(1)   39/      84 : 0000 0200           		dc.l MD_ErrorTrap
(1)   40/      88 : 0000 0200           		dc.l MD_ErrorTrap
(1)   41/      8C : 0000 0200           		dc.l MD_ErrorTrap
(1)   42/      90 : 0000 0200           		dc.l MD_ErrorTrap
(1)   43/      94 : 0000 0200           		dc.l MD_ErrorTrap
(1)   44/      98 : 0000 0200           		dc.l MD_ErrorTrap
(1)   45/      9C : 0000 0200           		dc.l MD_ErrorTrap
(1)   46/      A0 : 0000 0200           		dc.l MD_ErrorTrap
(1)   47/      A4 : 0000 0200           		dc.l MD_ErrorTrap
(1)   48/      A8 : 0000 0200           		dc.l MD_ErrorTrap
(1)   49/      AC : 0000 0200           		dc.l MD_ErrorTrap
(1)   50/      B0 : 0000 0200           		dc.l MD_ErrorTrap
(1)   51/      B4 : 0000 0200           		dc.l MD_ErrorTrap
(1)   52/      B8 : 0000 0200           		dc.l MD_ErrorTrap
(1)   53/      BC : 0000 0200           		dc.l MD_ErrorTrap
(1)   54/      C0 : 0000 0200           		dc.l MD_ErrorTrap
(1)   55/      C4 : 0000 0200           		dc.l MD_ErrorTrap
(1)   56/      C8 : 0000 0200           		dc.l MD_ErrorTrap
(1)   57/      CC : 0000 0200           		dc.l MD_ErrorTrap
(1)   58/      D0 : 0000 0200           		dc.l MD_ErrorTrap
(1)   59/      D4 : 0000 0200           		dc.l MD_ErrorTrap
(1)   60/      D8 : 0000 0200           		dc.l MD_ErrorTrap
(1)   61/      DC : 0000 0200           		dc.l MD_ErrorTrap
(1)   62/      E0 : 0000 0200           		dc.l MD_ErrorTrap
(1)   63/      E4 : 0000 0200           		dc.l MD_ErrorTrap
(1)   64/      E8 : 0000 0200           		dc.l MD_ErrorTrap
(1)   65/      EC : 0000 0200           		dc.l MD_ErrorTrap
(1)   66/      F0 : 0000 0200           		dc.l MD_ErrorTrap
(1)   67/      F4 : 0000 0200           		dc.l MD_ErrorTrap
(1)   68/      F8 : 0000 0200           		dc.l MD_ErrorTrap
(1)   69/      FC : 0000 0200           		dc.l MD_ErrorTrap
(1)   70/     100 : 5345 4741 2047      		dc.b "SEGA GENESIS    "
              106 : 454E 4553 4953 
              10C : 2020 2020          
(1)   71/     110 : 2843 2947 4636      		dc.b "(C)GF64 2024.???"
              116 : 3420 3230 3234 
              11C : 2E3F 3F3F          
(1)   72/     120 : 4E69 6B6F 6E61      		dc.b "Nikona MD                                       "
              126 : 204D 4420 2020 
              12C : 2020 2020 2020 
              132 : 2020 2020 2020 
              138 : 2020 2020 2020 
              13E : 2020 2020 2020 
              144 : 2020 2020 2020 
              14A : 2020 2020 2020    
(1)   73/     150 : 4E69 6B6F 6E61      		dc.b "Nikona GENESIS                                  "
              156 : 2047 454E 4553 
              15C : 4953 2020 2020 
              162 : 2020 2020 2020 
              168 : 2020 2020 2020 
              16E : 2020 2020 2020 
              174 : 2020 2020 2020 
              17A : 2020 2020 2020    
(1)   74/     180 : 474D 2048 4F4D      		dc.b "GM HOMEBREW-02"
              186 : 4542 5245 572D 
              18C : 3032             
(1)   75/     18E : 0000                		dc.w 0
(1)   76/     190 : 4A36 4D20 2020      		dc.b "J6M             "
              196 : 2020 2020 2020 
              19C : 2020 2020          
(1)   77/     1A0 : 0000 0000           		dc.l 0
(1)   78/     1A4 : 0003 C030           		dc.l ROM_END
(1)   79/     1A8 : 00FF 0000           		dc.l $FF0000
(1)   80/     1AC : 00FF FFFF           		dc.l $FFFFFF
(1)   81/     1B0 : 5241 F820           		dc.b "RA",$F8,$20
(1)   82/     1B4 : 0020 0001           		dc.l $200001
(1)   83/     1B8 : 0020 3FFF           		dc.l $203FFF
(1)   84/     1BC :                     		align $1F0
(1)   85/     1F0 : 4A55 4520 2020      		dc.b "JUE             "
              1F6 : 2020 2020 2020 
              1FC : 2020 2020          
(1)   86/     200 :                     
(1)   87/     200 :                     ; ====================================================================
(1)   88/     200 :                     ; ----------------------------------------------------------------
(1)   89/     200 :                     ; Error handlers
(1)   90/     200 :                     ;
(1)   91/     200 :                     ; all these do nothing currently
(1)   92/     200 :                     ; ----------------------------------------------------------------
(1)   93/     200 :                     
(1)   94/     200 :                     MD_ErrBus:				; Bus error
(1)   95/     200 :                     MD_ErrAddr:				; Address error
(1)   96/     200 :                     MD_ErrIll:				; ILLEGAL Instruction
(1)   97/     200 :                     MD_ErrZDiv:				; Divide by 0
(1)   98/     200 :                     MD_ErrChk:				; CHK Instruction
(1)   99/     200 :                     MD_ErrTrapV:				; TRAPV Instruction
(1)  100/     200 :                     MD_ErrPrivl:				; Privilege violation
(1)  101/     200 :                     MD_Trace:				; Trace
(1)  102/     200 :                     MD_Line1010:				; Line 1010 Emulator
(1)  103/     200 :                     MD_Line1111:				; Line 1111 Emulator
(1)  104/     200 :                     MD_ErrorEx:				; Error exception
(1)  105/     200 :                     MD_ErrorTrap:
(1)  106/     200 : 4E73                		rte			; Return from Exception
(1)  107/     202 :                     
(1)  108/     202 :                     ; ====================================================================
(1)  109/     202 :                     ; ----------------------------------------------------------------
(1)  110/     202 :                     ; Entry point
(1)  111/     202 :                     ; ----------------------------------------------------------------
(1)  112/     202 :                     
(1)  113/     202 :                     MD_Entry:
(1)  114/     202 :                     	; --------------------------------
(1)  115/     202 :                     	; Check if the system has TMSS
(1)  116/     202 : 46FC 2700           		move	#$2700,sr			; Disable interrputs
(1)  117/     206 : 1039 00A1 0001      		move.b	(sys_io).l,d0			; Read IO port
(1)  118/     20C : 0200 000F           		andi.b	#%00001111,d0			; Get version, right 4 bits
(1)  119/     210 : 670A                		beq.s	.oldmd				; If 0, Skip this part
(1)  120/     212 : 23F9 0000 0100      		move.l	($100).l,(sys_tmss).l		; Write "SEGA" to port sys_tmss
              218 : 00A1 4000          
(1)  121/     21C :                     .oldmd:
(1)  122/     21C : 4A79 00C0 0004      		tst.w	(vdp_ctrl).l			; Test VDP to unlock Video
(1)  123/     222 :                     	; --------------------------------
(1)  124/     222 : 7000                		moveq	#0,d0
(1)  125/     224 : 2C40                		movea.l	d0,a6
(1)  126/     226 : 4E66                		move.l	a6,usp
(1)  127/     228 : 41F9 FFFF 0000      		lea	($FFFF0000),a0			; Clean our "work" RAM
(1)  128/     22E : 223C FFFF D40C      		move.l	#sizeof_mdram,d1
(1)  129/     234 : 7000                		moveq	#0,d0
(1)  130/     236 : 30C0                .loop_ram:	move.w	d0,(a0)+
(1)  131/     238 : B1C1                		cmp.l	d1,a0
(1)  132/     23A : 65FA                		bcs.s	.loop_ram
(1)  133/     23C : 4CF9 7FFF 00FF      		movem.l	($FF0000),d0-a6			; Clean registers using zeros from RAM
              242 : 0000             
(1)  134/     244 : 4DF9 00C0 0004      		lea	(vdp_ctrl).l,a6
(1)  135/     24A : 3E16                .wait_dma:	move.w	(a6),d7				; Check if our DMA is active.
(1)  136/     24C : 0807 0001           		btst	#1,d7
(1)  137/     250 : 66F8                		bne.s	.wait_dma
(1)  138/     252 :                     
     178/     252 : 6112                		bsr	Sound_init			; Init Sound driver FIRST
     179/     254 : 6100 024C           		bsr	Video_init			;  ''  Video
     180/     258 : 6100 0DDA           		bsr	System_Init			;  ''  Values
     181/     25C : 31FC 0000 C458      		move.w	#0,(RAM_ScreenMode).w		; Start at screen 0
     182/     262 : 6000 1316           		bra.w	Md_ReadModes			; Go to SCREENJUMP section
     183/     266 :                     
     184/     266 :                     ; ---------------------------------------------
     186/     266 :                     
     187/     266 :                     ; ====================================================================
     188/     266 :                     ; --------------------------------------------------------
     189/     266 :                     ; SYSTEM routines and MODE switching code
     190/     266 :                     ;
     191/     266 :                     ; MD and PICO: Normal ROM locations
     192/     266 :                     ; CD/32X/CD32X: Loaded into RAM
     193/     266 :                     ; --------------------------------------------------------
     194/     266 :                     
     199/     266 :                     ; ---------------------------------------------
     200/     266 :                     
     201/     266 :                     		include	"sound/driver/gema.asm"
(1)    1/     266 :                     ; ====================================================================
(1)    2/     266 :                     ; --------------------------------------------------------
(1)    3/     266 :                     ; GEMA/Nikona sound driver v1.0
(1)    4/     266 :                     ; (C)2023-2024 GenesisFan64
(1)    5/     266 :                     ;
(1)    6/     266 :                     ; Features:
(1)    7/     266 :                     ; - Support for SEGA CD's PCM channels:
(1)    8/     266 :                     ;   | All 8 channels with streaming support
(1)    9/     266 :                     ;   | for larger samples.
(1)   10/     266 :                     ;
(1)   11/     266 :                     ; - Support for 32X's PWM:
(1)   12/     266 :                     ;   | 7 pseudo-channels in either MONO
(1)   13/     266 :                     ;   | or STEREO.
(1)   14/     266 :                     ;
(1)   15/     266 :                     ; - DMA ROM protection
(1)   16/     266 :                     ;   | This keeps DAC in a decent quality while
(1)   17/     266 :                     ;   | doing any DMA jobs in the 68k side.
(1)   18/     266 :                     ; - DAC Playback at 16000hz
(1)   19/     266 :                     ; - FM special mode with custom frequencies
(1)   20/     266 :                     ; - Autodetection for the PSG's Tone3 mode
(1)   21/     266 :                     ;
(1)   22/     266 :                     ; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣴⣶⡿⠿⠿⠿⣶⣦⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀
(1)   23/     266 :                     ; ⠀⠀⠀⠀⠀⠀⢀⣠⣶⢟⣿⠟⠁⢰⢋⣽⡆⠈⠙⣿⡿⣶⣄⡀⠀⠀⠀⠀⠀⠀
(1)   24/     266 :                     ; ⠀⠀⠀⠀⣠⣴⠟⠋⢠⣾⠋⠀⣀⠘⠿⠿⠃⣀⠀⠈⣿⡄⠙⠻⣦⣄⠀⠀⠀⠀
(1)   25/     266 :                     ; ⠀⢀⣴⡿⠋⠁⠀⢀⣼⠏⠺⠛⠛⠻⠂⠐⠟⠛⠛⠗⠘⣷⡀⠀⠈⠙⢿⣦⡀⠀
(1)   26/     266 :                     ; ⣴⡟⢁⣀⣠⣤⡾⢿⡟⠀⠀⠀⠘⢷⠾⠷⡾⠃⠀⠀⠀⢻⡿⢷⣤⣄⣀⡈⢻⣦
(1)   27/     266 :                     ; ⠙⠛⠛⠋⠉⠁⠀⢸⡇⠀⠀⢠⣄⠀⠀⠀⠀⣠⡄⠀⠀⢸⡇⠀⠈⠉⠙⠛⠛⠋
(1)   28/     266 :                     ; ⠀⠀⠀⠀⠀⠀⠀⢸⡇⢾⣦⣀⣹⡧⠀⠀⢼⣏⣀⣴⡷⢸⡇⠀⠀⠀⠀⠀⠀⠀
(1)   29/     266 :                     ; ⠀⠀⠀⠀⠀⠀⠀⠸⣧⡀⠈⠛⠛⠁⠀⠀⠈⠛⠛⠁⢀⣼⠇⠀⠀⠀⠀⠀⠀⠀
(1)   30/     266 :                     ; ⠀⠀⠀⠀⠀⠀⠀⢀⣘⣿⣶⣤⣀⣀⣀⣀⣀⣀⣤⣶⣿⣃⠀⠀⠀⠀⠀⠀⠀⠀
(1)   31/     266 :                     ; ⠀⠀⠀⠀⠀⣠⡶⠟⠋⢉⣀⣽⠿⠉⠉⠉⠹⢿⣍⣈⠉⠛⠷⣦⡀⠀⠀⠀⠀⠀
(1)   32/     266 :                     ; ⠀⠀⠀⠀⢾⣯⣤⣴⡾⠟⠋⠁⠀⠀⠀⠀⠀⠀⠉⠛⠷⣶⣤⣬⣿⠀⠀⠀⠀⠀
(1)   33/     266 :                     ; ⠀⠀⠀⠀⠀⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠁⠀⠀⠀⠀⠀
(1)   34/     266 :                     ; --------------------------------------------------------
(1)   35/     266 :                     
(1)   36/     266 :                     ; ====================================================================
(1)   37/     266 :                     ; --------------------------------------------------------
(1)   38/     266 :                     ; Macros
(1)   39/     266 :                     ; --------------------------------------------------------
(1)   40/     266 :                     
(1)   41/     266 :                     ; Shared for all DAC, PCM, PWM
(1)   42/     266 :                     gSmpHead macro len,loop
(1)   43/     266 :                     	dc.b ((len)&$FF),(((len)>>8)&$FF),(((len)>>16)&$FF)	; length
(1)   44/     266 :                     	dc.b ((loop)&$FF),(((loop)>>8)&$FF),(((loop)>>16)&$FF)
(1)   45/     266 :                     	endm
(1)   46/     266 :                     
(1)   47/     266 :                     ; --------------------------------------------------------
(1)   48/     266 :                     ; Variables
(1)   49/     266 :                     ; --------------------------------------------------------
(1)   50/     266 :                     
(1)   51/     266 :                     ; z80_cpu	equ $A00000		; Z80 CPU area, size: $2000
(1)   52/     266 :                     ; z80_bus 	equ $A11100		; only read bit 0 (bit 8 as WORD)
(1)   53/     266 :                     ; z80_reset	equ $A11200		; WRITE only: $0000 reset/$0100 cancel
(1)   54/     266 :                     
(1)   55/     266 :                     ; Z80-area points:
(1)   56/     266 : =$40                 zDrvFifo	equ commZfifo		; FIFO command storage
(1)   57/     266 : =$2E                 zDrvFWrt	equ commZWrite		; FIFO command index
(1)   58/     266 : =$2F                 zDrvRomBlk	equ commZRomBlk		; ROM block flag
(1)   59/     266 : =$37                 zDrvMarsBlk	equ marsBlock		; Flag to disable 32X's PWM
(1)   60/     266 : =$36                 zDrvMcdBlk	equ mcdBlock		; Flag to disable SegaCD's PCM
(1)   61/     266 : =$35                 zDrvRamSrc	equ cdRamSrcB		; RAM-read source+dest pointers
(1)   62/     266 : =$30                 zDrvRamLen	equ cdRamLen		; RAM-read length and flag
(1)   63/     266 :                     
(1)   64/     266 :                     ; --------------------------------------------------------
(1)   65/     266 :                     ; Variables
(1)   66/     266 :                     ; --------------------------------------------------------
(1)   67/     266 :                     
(1)   68/     266 : =$FFFFFF00           RAM_ZCdFlag_D	equ RAM_ZSndBuff	; transferRom flag
(1)   69/     266 :                     
(1)   70/     266 :                     ; ====================================================================
(1)   71/     266 :                     ; --------------------------------------------------------
(1)   72/     266 :                     ; Initialize Sound
(1)   73/     266 :                     ;
(1)   74/     266 :                     ; Uses:
(1)   75/     266 :                     ; a0-a1,d0-d1
(1)   76/     266 :                     ; --------------------------------------------------------
(1)   77/     266 :                     
(1)   78/     266 :                     ; 		align $80
(1)   79/     266 :                     Sound_Init:
(1)   80/     266 : 007C 0700           		ori.w	#$0700,sr
(1)   84/     26A : 33FC 0100 00A1      		move.w	#$0100,(z80_bus).l		; Get Z80 bus
              270 : 1100             
(1)   85/     272 : 33FC 0100 00A1      		move.w	#$0100,(z80_reset).l		; Z80 reset
              278 : 1200             
(1)   86/     27A :                     .wait:
(1)   87/     27A : 0839 0000 00A1      		btst	#0,(z80_bus).l
              280 : 1100             
(1)   88/     282 : 66F6                		bne.s	.wait
(1)   89/     284 : 41F9 00A0 0000      		lea	(z80_cpu).l,a0			; Clean entire Z80 FIRST.
(1)   90/     28A : 303C 1FFF           		move.w	#$1FFF,d0
(1)   91/     28E : 7200                		moveq	#0,d1
(1)   92/     290 :                     .cleanup:
(1)   93/     290 : 10C1                		move.b	d1,(a0)+
(1)   94/     292 : 51C8 FFFC           		dbf	d0,.cleanup
(1)   95/     296 : 41F9 0000 15DA      		lea	(Z80_CODE).l,a0			; a0 - Z80 code (on $880000)
(1)   96/     29C : 43F9 00A0 0000      		lea	(z80_cpu).l,a1			; a1 - Z80 CPU area
(1)   97/     2A2 : 303C 1FB9           		move.w	#(Z80_CODE_END-Z80_CODE)-1,d0	; d0 - Size
(1)   98/     2A6 :                     
(1)   99/     2A6 :                     .copy:
(1)  100/     2A6 : 12D8                		move.b	(a0)+,(a1)+
(1)  101/     2A8 : 51C8 FFFC           		dbf	d0,.copy
(1)  102/     2AC : 33FC 0000 00A1      		move.w	#0,(z80_reset).l		; Reset cancel
              2B2 : 1200             
(1)  103/     2B4 : 4238 FF00           		clr.b	(RAM_ZCdFlag_D).w		; Reset Z80 transferRom flag
(1)  104/     2B8 : 4E71                		nop					; Reset Z80 buffer flag
(1)  105/     2BA : 4E71                		nop
(1)  106/     2BC : 4E71                		nop
(1)  107/     2BE : 33FC 0100 00A1      		move.w	#$100,(z80_reset).l
              2C4 : 1200             
(1)  108/     2C6 : 33FC 0000 00A1      		move.w	#0,(z80_bus).l			; Start Z80
              2CC : 1100             
(1)  110/     2CE : 203C 0000 46AA      		move.l	#Gema_MasterList,d0
(1)  111/     2D4 : 6000 0162           		bra	gemaSetMasterList
(1)  112/     2D8 :                     
(1)  113/     2D8 :                     ; ----------------------------------------------------------------
(1)  114/     2D8 :                     ; Sound_Update
(1)  115/     2D8 :                     ;
(1)  116/     2D8 :                     ; Call and LOOP this during DISPLAY to communicate
(1)  117/     2D8 :                     ; with the Z80
(1)  118/     2D8 :                     ;
(1)  119/     2D8 :                     ; SegaCD/CD32X:
(1)  120/     2D8 :                     ; This checks if the Z80 wants to read from RAM (as it can't
(1)  121/     2D8 :                     ; see it) then this CPU manually writes the RAM bytes from
(1)  122/     2D8 :                     ; here to the Z80's RAM
(1)  123/     2D8 :                     ; THIS IS REQUIRED for the tracks and instruments stored
(1)  124/     2D8 :                     ; on RAM in case you are doing ASIC-Stamps.
(1)  125/     2D8 :                     ;
(1)  126/     2D8 :                     ; DAC samples are safe to read from WORD-RAM (if NOT using Stamps)
(1)  127/     2D8 :                     ; but careful when loading new data, and make sure MAIN
(1)  128/     2D8 :                     ; has the permission to read the data.
(1)  129/     2D8 :                     ;
(1)  130/     2D8 :                     ; Sega Pico:
(1)  131/     2D8 :                     ; * For later *
(1)  132/     2D8 :                     ;
(1)  133/     2D8 :                     ; Uses:
(1)  134/     2D8 :                     ; d5-d7,a4-a6
(1)  135/     2D8 :                     ; ----------------------------------------------------------------
(1)  136/     2D8 :                     
(1)  137/     2D8 :                     Sound_Update:
(1)  141/     2D8 :                     	; ------------------------------------------------
(1)  142/     2D8 :                     	; If transferRom wants to read from 68k RAM
(1)  143/     2D8 : 4A38 FF00           		tst.b	(RAM_ZCdFlag_D).w	; *Z80 WRITES TO RAM*
(1)  144/     2DC : 6744                		beq.s	.no_task
(1)  145/     2DE : 4238 FF00           		clr.b	(RAM_ZCdFlag_D).w
(1)  146/     2E2 : 7E00                		moveq	#0,d7
(1)  147/     2E4 : 613E                		bsr	sndLockZ80
(1)  148/     2E6 : 1E39 00A0 0030      		move.b	(z80_cpu+zDrvRamLen).l,d7
(1)  149/     2EC : 6732                		beq.s	.no_size
(1)  150/     2EE : 5347                		subq.w	#1,d7
(1)  151/     2F0 : 4DF9 00A0 0036      		lea	(z80_cpu+(zDrvRamSrc+1)),a6
(1)  152/     2F6 : 4BF9 00A0 0000      		lea	(z80_cpu),a5
(1)  153/     2FC : 1C26                		move.b	-(a6),d6		; d6 - Source
(1)  154/     2FE : 4846                		swap	d6
(1)  155/     300 : 1C26                		move.b	-(a6),d6
(1)  156/     302 : E14E                		lsl.w	#8,d6
(1)  157/     304 : 1C26                		move.b	-(a6),d6
(1)  158/     306 : 7A00                		moveq	#0,d5
(1)  159/     308 : 1A26                		move.b	-(a6),d5		; d5 - Dest
(1)  160/     30A : E14D                		lsl.w	#8,d5
(1)  161/     30C : 1A26                		move.b	-(a6),d5
(1)  162/     30E : DBC5                		add.l	d5,a5
(1)  163/     310 : 2846                		move.l	d6,a4
(1)  164/     312 :                     .copy_bytes:
(1)  165/     312 : 1ADC                		move.b	(a4)+,(a5)+
(1)  166/     314 : 51CF FFFC           		dbf	d7,.copy_bytes
(1)  167/     318 : 13FC 0000 00A0      		move.b	#0,(z80_cpu+zDrvRamLen).l
              31E : 0030             
(1)  168/     320 :                     .no_size:
(1)  169/     320 : 6116                		bsr	sndUnlockZ80
(1)  170/     322 :                     .no_task:
(1)  172/     322 : 4E75                		rts
(1)  173/     324 :                     
(1)  174/     324 :                     ; ====================================================================
(1)  175/     324 :                     ; ----------------------------------------------------------------
(1)  176/     324 :                     ; Subroutines
(1)  177/     324 :                     ; ----------------------------------------------------------------
(1)  178/     324 :                     
(1)  179/     324 :                     ; ------------------------------------------------
(1)  180/     324 :                     ; Lock Z80, get bus
(1)  181/     324 :                     ; ------------------------------------------------
(1)  182/     324 :                     
(1)  183/     324 :                     sndLockZ80:
(1)  185/     324 : 33FC 0100 00A1      		move.w	#$0100,(z80_bus).l
              32A : 1100             
(1)  186/     32C :                     .wait:
(1)  187/     32C : 0839 0000 00A1      		btst	#0,(z80_bus).l
              332 : 1100             
(1)  188/     334 : 66F6                		bne.s	.wait
(1)  190/     336 : 4E75                		rts
(1)  191/     338 :                     
(1)  192/     338 :                     ; ------------------------------------------------
(1)  193/     338 :                     ; Unlock Z80, return bus
(1)  194/     338 :                     ; ------------------------------------------------
(1)  195/     338 :                     
(1)  196/     338 :                     sndUnlockZ80:
(1)  198/     338 : 33FC 0000 00A1      		move.w	#0,(z80_bus).l
              33E : 1100             
(1)  200/     340 : 4E75                		rts
(1)  201/     342 :                     
(1)  202/     342 :                     ; ------------------------------------------------
(1)  203/     342 :                     ; 68K-to-Z80 sound request enter/exit routines
(1)  204/     342 :                     ;
(1)  205/     342 :                     ; d6 - commFifo index
(1)  206/     342 :                     ; ------------------------------------------------
(1)  207/     342 :                     
(1)  208/     342 :                     sndReq_Enter:
(1)  210/     342 : 33FC 0100 00A1      		move.w	#$0100,(z80_bus).l		; Request Z80 Stop
              348 : 1100             
(1)  212/     34A :                     ; 		or.w	#$0700,sr			; Disable interrupts
(1)  213/     34A : 9EFC 0004           		suba	#4,sp				; Extra jump return
(1)  214/     34E : 48E7 0306           		movem.l	d6-d7/a5-a6,-(sp)		; Save these regs to the stack
(1)  215/     352 : DEFC 0014           		adda	#(4*4)+4,sp			; Go back to the RTS jump
(1)  216/     356 : 4BF9 00A0 002E      		lea	(z80_cpu+zDrvFWrt),a5		; a5 - commZWrite
(1)  217/     35C : 4DF9 00A0 0040      		lea	(z80_cpu+zDrvFifo),a6		; a6 - fifo command list
(1)  218/     362 :                     .wait:
(1)  220/     362 : 0839 0000 00A1      		btst	#0,(z80_bus).l			; Wait for Z80
              368 : 1100             
(1)  221/     36A : 66F6                		bne.s	.wait
(1)  223/     36C : 1C15                		move.b	(a5),d6				; d6 - index fifo position
(1)  224/     36E : 4886                		ext.w	d6				; extend to 16 bits
(1)  225/     370 : 4E75                		rts
(1)  226/     372 :                     ; JUMP ONLY
(1)  227/     372 :                     sndReq_Exit:
(1)  229/     372 : 33FC 0000 00A1      		move.w	#0,(z80_bus).l
              378 : 1100             
(1)  231/     37A : 9EFC 0018           		suba	#8+(4*4),sp
(1)  232/     37E : 4CDF 60C0           		movem.l	(sp)+,d6-d7/a5-a6		; And pop those back
(1)  233/     382 : DEFC 0008           		adda	#8,sp
(1)  234/     386 :                     ; 		andi.w	#$F8FF,sr			; Enable interrupts
(1)  235/     386 : 4E75                		rts
(1)  236/     388 :                     
(1)  237/     388 :                     ; ------------------------------------------------
(1)  238/     388 :                     ; Send request id and arguments
(1)  239/     388 :                     ;
(1)  240/     388 :                     ; Input:
(1)  241/     388 :                     ; d7 - byte to write
(1)  242/     388 :                     ; d6 - index pointer
(1)  243/     388 :                     ; a5 - commZWrite, update index
(1)  244/     388 :                     ; a6 - commZfifo command list
(1)  245/     388 :                     ;
(1)  246/     388 :                     ; *** CALL sndReq_Enter FIRST ***
(1)  247/     388 :                     ; ------------------------------------------------
(1)  248/     388 :                     
(1)  249/     388 :                     sndReq_scmd:
(1)  250/     388 : 1DBC 00FF 6000      		move.b	#-1,(a6,d6.w)			; write command-start flag
(1)  251/     38E : 5206                		addq.b	#1,d6				; next fifo pos
(1)  252/     390 : 0206 001F           		andi.b	#MAX_ZCMND-1,d6
(1)  253/     394 : 600C                		bra.s	sndReq_sbyte
(1)  254/     396 :                     sndReq_slong:
(1)  255/     396 : 610A                		bsr	sndReq_sbyte
(1)  256/     398 : E09F                		ror.l	#8,d7
(1)  257/     39A :                     sndReq_saddr:	; 24-bit address
(1)  258/     39A : 6106                		bsr	sndReq_sbyte
(1)  259/     39C : E09F                		ror.l	#8,d7
(1)  260/     39E :                     sndReq_sword:
(1)  261/     39E : 6102                		bsr	sndReq_sbyte
(1)  262/     3A0 : E09F                		ror.l	#8,d7
(1)  263/     3A2 :                     sndReq_sbyte:
(1)  264/     3A2 : 1D87 6000           		move.b	d7,(a6,d6.w)			; write byte
(1)  265/     3A6 : 5206                		addq.b	#1,d6				; next fifo pos
(1)  266/     3A8 : 0206 001F           		andi.b	#MAX_ZCMND-1,d6
(1)  267/     3AC : 1A86                		move.b	d6,(a5)				; update commZWrite
(1)  268/     3AE : 4E75                		rts
(1)  269/     3B0 :                     
(1)  270/     3B0 :                     ; --------------------------------------------------------
(1)  271/     3B0 :                     ; gemaDmaPause
(1)  272/     3B0 :                     ;
(1)  273/     3B0 :                     ; Call this BEFORE doing any DMA transfer
(1)  274/     3B0 :                     ; --------------------------------------------------------
(1)  275/     3B0 :                     
(1)  276/     3B0 :                     gemaDmaPause:
(1)  280/     3B0 : 4847                		swap	d7
(1)  281/     3B2 : 4846                		swap	d6
(1)  282/     3B4 :                     ; .retry_flag:
(1)  283/     3B4 : 6100 FF6E           		bsr	sndLockZ80
(1)  284/     3B8 : 13FC 0001 00A0      		move.b	#1,(z80_cpu+zDrvRomBlk)		; Block flag for Z80
              3BE : 002F             
(1)  285/     3C0 : 6100 FF76           		bsr	sndUnlockZ80
(1)  286/     3C4 : 3E3C 0060           		move.w	#96,d7				; ...Small delay...
(1)  287/     3C8 : 51CF FFFE           		dbf	d7,*
(1)  288/     3CC : 4846                		swap	d6
(1)  289/     3CE : 4847                		swap	d7
(1)  290/     3D0 : 4E75                		rts
(1)  292/     3D2 :                     
(1)  293/     3D2 :                     ; --------------------------------------------------------
(1)  294/     3D2 :                     ; gemaDmaResume
(1)  295/     3D2 :                     ;
(1)  296/     3D2 :                     ; Call this AFTER finishing DMA transfer
(1)  297/     3D2 :                     ; --------------------------------------------------------
(1)  298/     3D2 :                     
(1)  299/     3D2 :                     gemaDmaResume:
(1)  303/     3D2 : 4847                		swap	d7
(1)  304/     3D4 : 4846                		swap	d6
(1)  305/     3D6 : 6100 FF4C           		bsr	sndLockZ80
(1)  306/     3DA : 13FC 0000 00A0      		move.b	#0,(z80_cpu+zDrvRomBlk)		; Block flag for Z80
              3E0 : 002F             
(1)  307/     3E2 : 6100 FF54           		bsr	sndUnlockZ80
(1)  308/     3E6 : 4846                		swap	d6
(1)  309/     3E8 : 4847                		swap	d7
(1)  310/     3EA : 4E75                		rts
(1)  312/     3EC :                     
(1)  313/     3EC :                     ; --------------------------------------------------------
(1)  314/     3EC :                     ; gemaDmaPauseRom
(1)  315/     3EC :                     ;
(1)  316/     3EC :                     ; Call this BEFORE doing any DMA transfer
(1)  317/     3EC :                     ;
(1)  318/     3EC :                     ; *** BANKS $880000/$900000 WILL BE GONE ***
(1)  319/     3EC :                     ; --------------------------------------------------------
(1)  320/     3EC :                     
(1)  321/     3EC :                     gemaDmaPauseRom:
(1)  325/     3EC : 4847                		swap	d7
(1)  326/     3EE : 4846                		swap	d6
(1)  327/     3F0 : 6100 FF32           		bsr	sndLockZ80
(1)  328/     3F4 : 13FC 0001 00A0      		move.b	#1,(z80_cpu+zDrvRomBlk)		; Block flag for Z80
              3FA : 002F             
(1)  329/     3FC : 6100 FF3A           		bsr	sndUnlockZ80
(1)  330/     400 : 3E3C 0060           		move.w	#96,d7				; ...Small delay...
(1)  331/     404 : 51CF FFFE           		dbf	d7,*
(1)  332/     408 :                     ; 	if MARS|MARSCD
(1)  333/     408 :                     ; 		move.w	#2,d6
(1)  334/     408 :                     ; 		bsr	sndReqCmd
(1)  335/     408 :                     ; 	endif
(1)  339/     408 : 4846                		swap	d6
(1)  340/     40A : 4847                		swap	d7
(1)  341/     40C : 4E75                		rts
(1)  343/     40E :                     
(1)  344/     40E :                     ; --------------------------------------------------------
(1)  345/     40E :                     ; gemaDmaResumeRom
(1)  346/     40E :                     ;
(1)  347/     40E :                     ; Call this AFTER finishing DMA transfer
(1)  348/     40E :                     ;
(1)  349/     40E :                     ; *** BANKS $880000/$900000 GET RESTORED ***
(1)  350/     40E :                     ; --------------------------------------------------------
(1)  351/     40E :                     
(1)  352/     40E :                     gemaDmaResumeRom:
(1)  356/     40E : 4847                		swap	d7
(1)  357/     410 : 4846                		swap	d6
(1)  358/     412 : 6100 FF10           		bsr	sndLockZ80
(1)  359/     416 : 13FC 0000 00A0      		move.b	#0,(z80_cpu+zDrvRomBlk)		; Block flag for Z80
              41C : 002F             
(1)  360/     41E : 6100 FF18           		bsr	sndUnlockZ80
(1)  361/     422 :                     ; 	if MARS|MARSCD
(1)  362/     422 :                     ; 		move.w	#3,d6
(1)  363/     422 :                     ; 		bsr	sndReqCmd
(1)  364/     422 :                     ; 	endif
(1)  368/     422 : 4846                		swap	d6
(1)  369/     424 : 4847                		swap	d7
(1)  370/     426 : 4E75                		rts
(1)  372/     428 :                     
(1)  373/     428 :                     ; ====================================================================
(1)  374/     428 :                     ; --------------------------------------------------------
(1)  375/     428 :                     ; USER CALLS
(1)  376/     428 :                     ; --------------------------------------------------------
(1)  377/     428 :                     
(1)  378/     428 :                     ; --------------------------------------------------------
(1)  379/     428 :                     ; gemaTest
(1)  380/     428 :                     ;
(1)  381/     428 :                     ; For TESTING only.
(1)  382/     428 :                     ; --------------------------------------------------------
(1)  383/     428 :                     
(1)  384/     428 :                     gemaTest:
(1)  385/     428 : 6100 FF18           		bsr	sndReq_Enter
(1)  386/     42C : 3E3C 0000           		move.w	#$00,d7		; Command $00
(1)  387/     430 : 6100 FF56           		bsr	sndReq_scmd
(1)  388/     434 : 6000 FF3C           		bra 	sndReq_Exit
(1)  389/     438 :                     
(1)  390/     438 :                     ; --------------------------------------------------------
(1)  391/     438 :                     ; gemaSetMasterList
(1)  392/     438 :                     ;
(1)  393/     438 :                     ; Set Tracklist location
(1)  394/     438 :                     ;
(1)  395/     438 :                     ; Input:
(1)  396/     438 :                     ; d0.l - 68k pointer
(1)  397/     438 :                     ; --------------------------------------------------------
(1)  398/     438 :                     
(1)  399/     438 :                     gemaSetMasterList:
(1)  400/     438 : 6100 FF08           		bsr	sndReq_Enter
(1)  401/     43C : 3E3C 0001           		move.w	#$01,d7		; Command $01
(1)  402/     440 : 6100 FF46           		bsr	sndReq_scmd
(1)  403/     444 : 2E00                		move.l	d0,d7
(1)  404/     446 : 6100 FF4E           		bsr	sndReq_slong
(1)  405/     44A : 6000 FF26           		bra 	sndReq_Exit
(1)  406/     44E :                     
(1)  407/     44E :                     ; --------------------------------------------------------
(1)  408/     44E :                     ; gemaPlayTrack
(1)  409/     44E :                     ;
(1)  410/     44E :                     ; Play a sequence with arguments
(1)  411/     44E :                     ;
(1)  412/     44E :                     ; Input:
(1)  413/     44E :                     ; d0.b - Sequence number
(1)  414/     44E :                     ; d1.b - Playback slot number
(1)  415/     44E :                     ;        If -1: use auto-search
(1)  416/     44E :                     ; d2.b - Starting block
(1)  417/     44E :                     ; --------------------------------------------------------
(1)  418/     44E :                     
(1)  419/     44E :                     gemaPlayTrack:
(1)  420/     44E : 6100 FEF2           		bsr	sndReq_Enter
(1)  421/     452 : 3E3C 0002           		move.w	#$02,d7		; Command $02
(1)  422/     456 : 6100 FF30           		bsr	sndReq_scmd
(1)  423/     45A : 1E00                		move.b	d0,d7		; d0.b Seq number
(1)  424/     45C : 6100 FF44           		bsr	sndReq_sbyte
(1)  425/     460 : 1E02                		move.b	d2,d7		; d2.b Block <--
(1)  426/     462 : 6100 FF3E           		bsr	sndReq_sbyte
(1)  427/     466 : 1E01                		move.b	d1,d7		; d1.b Slot
(1)  428/     468 : 6100 FF38           		bsr	sndReq_sbyte
(1)  429/     46C : 6000 FF04           		bra 	sndReq_Exit
(1)  430/     470 :                     
(1)  431/     470 :                     ; --------------------------------------------------------
(1)  432/     470 :                     ; gemaStopTrack
(1)  433/     470 :                     ;
(1)  434/     470 :                     ; Play a sequence with arguments
(1)  435/     470 :                     ;
(1)  436/     470 :                     ; Input:
(1)  437/     470 :                     ; d0.b - Sequence number
(1)  438/     470 :                     ; d1.b - Playback slot number
(1)  439/     470 :                     ;        If -1: stop all slots with the same number
(1)  440/     470 :                     ; --------------------------------------------------------
(1)  441/     470 :                     
(1)  442/     470 :                     gemaStopTrack:
(1)  443/     470 : 6100 FED0           		bsr	sndReq_Enter
(1)  444/     474 : 3E3C 0003           		move.w	#$03,d7		; Command $03
(1)  445/     478 : 6100 FF0E           		bsr	sndReq_scmd
(1)  446/     47C : 1E00                		move.b	d0,d7		; d0.b Seq number
(1)  447/     47E : 6100 FF22           		bsr	sndReq_sbyte
(1)  448/     482 : 1E01                		move.b	d1,d7		; d1.b Slot
(1)  449/     484 : 6100 FF1C           		bsr	sndReq_sbyte
(1)  450/     488 : 6000 FEE8           		bra 	sndReq_Exit
(1)  451/     48C :                     
(1)  452/     48C :                     ; --------------------------------------------------------
(1)  453/     48C :                     ; gemaSetBeats
(1)  454/     48C :                     ;
(1)  455/     48C :                     ; Sets global subbeats
(1)  456/     48C :                     ;
(1)  457/     48C :                     ; d0.w - sub-beats
(1)  458/     48C :                     ; --------------------------------------------------------
(1)  459/     48C :                     
(1)  460/     48C :                     gemaSetBeats:
(1)  461/     48C : 6100 FEB4           		bsr	sndReq_Enter
(1)  462/     490 : 3E3C 0006           		move.w	#$06,d7		; Command $06
(1)  463/     494 : 6100 FEF2           		bsr	sndReq_scmd
(1)  464/     498 : 3E00                		move.w	d0,d7
(1)  465/     49A : 6100 FF02           		bsr	sndReq_sword
(1)  466/     49E : 6000 FED2           		bra 	sndReq_Exit
(1)  467/     4A2 :                     
     202/     4A2 :                     		include	"system/md/video.asm"
(1)    1/     4A2 :                     ; ====================================================================
(1)    2/     4A2 :                     ; ----------------------------------------------------------------
(1)    3/     4A2 :                     ; Genesis VDP section
(1)    4/     4A2 :                     ; ----------------------------------------------------------------
(1)    5/     4A2 :                     
(1)    6/     4A2 :                     ; ====================================================================
(1)    7/     4A2 :                     ; --------------------------------------------------------
(1)    8/     4A2 :                     ; Settings
(1)    9/     4A2 :                     ; --------------------------------------------------------
(1)   10/     4A2 :                     
(1)   11/     4A2 : =$18                 MAX_MDOBJ	equ 24		; MAX Objects
(1)   12/     4A2 : =$18                 MAX_MDDMATSK	equ 24		; MAX DMA BLAST entries
(1)   13/     4A2 : =$7FF                varNullVram	equ $07FF	; Default Blank cell
(1)   14/     4A2 : =$580                varPrintVram	equ $0580	; Default location of the PRINT text graphics
(1)   15/     4A2 : =$3                  varPrintPal	equ 3		; Palette to use for the printable text
(1)   16/     4A2 :                     
(1)   17/     4A2 :                     ; --------------------------------------------------------
(1)   18/     4A2 :                     ; Variables
(1)   19/     4A2 :                     ; --------------------------------------------------------
(1)   20/     4A2 :                     
(1)   21/     4A2 :                     ; VDP Register $80
(1)   22/     4A2 : =$2                  HVStop		equ $02
(1)   23/     4A2 : =$10                 HintEnbl	equ $10
(1)   24/     4A2 : =$1                  bitHVStop	equ 1
(1)   25/     4A2 : =$4                  bitHintEnbl	equ 4
(1)   26/     4A2 :                     
(1)   27/     4A2 :                     ; VDP Register $81
(1)   28/     4A2 : =$40                 DispEnbl 	equ $40
(1)   29/     4A2 : =$20                 VintEnbl 	equ $20
(1)   30/     4A2 : =$10                 DmaEnbl		equ $10
(1)   31/     4A2 : =$6                  bitDispEnbl	equ 6
(1)   32/     4A2 : =$5                  bitVintEnbl	equ 5
(1)   33/     4A2 : =$4                  bitDmaEnbl	equ 4
(1)   34/     4A2 : =$3                  bitV30		equ 3
(1)   35/     4A2 :                     
(1)   36/     4A2 :                     ; vdp_ctrl READ bits (full WORD)
(1)   37/     4A2 : =$9                  bitFifoE	equ 9		; DMA FIFO empty
(1)   38/     4A2 : =$8                  bitFifoF	equ 8		; DMA FIFO full
(1)   39/     4A2 : =$7                  bitVInt		equ 7		; Vertical interrupt
(1)   40/     4A2 : =$6                  bitSprOvr	equ 6		; Sprite overflow
(1)   41/     4A2 : =$5                  bitSprCol	equ 5		; Sprite collision
(1)   42/     4A2 : =$4                  bitOdd		equ 4		; EVEN or ODD frame displayed on interlace mode
(1)   43/     4A2 : =$3                  bitVBlk		equ 3		; Inside VBlank
(1)   44/     4A2 : =$2                  bitHBlk		equ 2		; Inside HBlank
(1)   45/     4A2 : =$1                  bitDma		equ 1		; Only works for FILL and COPY
(1)   46/     4A2 : =$0                  bitPal		equ 0
(1)   47/     4A2 :                     
(1)   48/     4A2 :                     ; md_bg_flags
(1)   49/     4A2 : =$0                  bitDrwR		equ 0
(1)   50/     4A2 : =$1                  bitDrwL		equ 1
(1)   51/     4A2 : =$2                  bitDrwD		equ 2
(1)   52/     4A2 : =$3                  bitDrwU		equ 3
(1)   53/     4A2 : =$6                  bitMarsBg	equ 6
(1)   54/     4A2 : =$7                  bitBgOn		equ 7
(1)   55/     4A2 :                     
(1)   56/     4A2 :                     ; ====================================================================
(1)   57/     4A2 :                     ; ----------------------------------------------------------------
(1)   58/     4A2 :                     ; Structs
(1)   59/     4A2 :                     ; ----------------------------------------------------------------
(1)   60/     4A2 :                     
(1)   61/     4A2 :                     ; --------------------------------
(1)   62/     4A2 :                     ; object strct
(1)   63/     4A2 :                     ; --------------------------------
(1)   64/     4A2 :                     
(1)   65/     4A2 : (MACRO)              		strct 0
(1)   65/     4A2 : =$4A2                GLBL_LASTPC     set *
(1)   65/FFFFFFFFFFFFCAA6 :                                     dephase
(1)   65/       0 :                                     phase 0
(1)   65/       0 : =$0                  GLBL_LASTORG    set *
(1)   66/       0 :                     obj_code	ds.l 1		; Object code, 0 == no object
(1)   67/       4 :                     obj_x		ds.l 1		; Object X Position 0000.0000
(1)   68/       8 :                     obj_y		ds.l 1		; Object Y Position 0000.0000
(1)   69/       C :                     obj_map		ds.l 1		; Object Sprite map data location
(1)   70/      10 :                     obj_dma		ds.l 1		; Object DMA map, 0 == Don't use DMA
(1)   71/      14 :                     obj_vram	ds.w 1		; Object VRAM position (If DMA enabled: output location)
(1)   72/      16 :                     obj_x_spd	ds.w 1		; Object X Speed 00.00
(1)   73/      18 :                     obj_y_spd	ds.w 1		; Object Y Speed 00.00
(1)   74/      1A :                     obj_anim_indx	ds.w 1		; * Object animation script index (obj_anim + obj_anim_indx)
(1)   75/      1C :                     obj_anim_id	ds.w 1		; * Object animation number: $ccss c-current s-saved
(1)   76/      1E :                     obj_frame	ds.w 1		; * Object current frame
(1)   77/      20 :                     obj_anim_spd	ds.b 1		; * Object animation delay
(1)   78/      21 :                     obj_index	ds.b 1		; Object code index
(1)   79/      22 :                     obj_set		ds.b 1		; Object settings
(1)   80/      23 :                     obj_subid	ds.b 1		; Object Sub-ID for Object placement
(1)   81/      24 :                     obj_status	ds.b 1		; Object custom status
(1)   82/      25 :                     obj_FREE	ds.b 1		; (FILLER align byte)
(1)   83/      26 :                     obj_ram		ds.b $40	; Object's own RAM
(1)   84/      66 :                     sizeof_mdobj	ds.l 0
(1)   85/      68 : (MACRO)              		endstrct
(1)   85/       0 :                                     org GLBL_LASTORG
(1)   85/     4A2 :                                     phase GLBL_LASTPC
(1)   86/     4A2 :                     ; 		message "\{sizeof_mdobj}"
(1)   87/     4A2 :                     
(1)   88/     4A2 :                     ; --------------------------------
(1)   89/     4A2 :                     ; ** obj_set
(1)   90/     4A2 : =$7                  bitobj_Mars	equ	7	; 32X ONLY: This objects draws to the 32X side (256-color sprite)
(1)   91/     4A2 : =$1                  bitobj_flipV	equ	1	; Set to flip object Vertically
(1)   92/     4A2 : =$0                  bitobj_flipH	equ	0	; Set to flip object Horizontally
(1)   93/     4A2 :                     
(1)   94/     4A2 :                     ; --------------------------------
(1)   95/     4A2 :                     ; ** obj_set
(1)   96/     4A2 :                     ; bitobj_air	equ	0	; set if floating/jumping
(1)   97/     4A2 :                     
(1)   98/     4A2 :                     ; --------------------------------
(1)   99/     4A2 :                     ; ** obj_size
(1)  100/     4A2 :                     ; at_u		equ	3
(1)  101/     4A2 :                     ; at_d		equ	2
(1)  102/     4A2 :                     ; at_l		equ	1
(1)  103/     4A2 :                     ; at_r		equ	0
(1)  104/     4A2 :                     
(1)  105/     4A2 :                     ; ====================================================================
(1)  106/     4A2 :                     ; ----------------------------------------------------------------
(1)  107/     4A2 :                     ; Video RAM
(1)  108/     4A2 :                     ; ----------------------------------------------------------------
(1)  109/     4A2 :                     
(1)  110/     4A2 : (MACRO)              			strct RAM_MdVideo
(1)  110/     4A2 : =$4A2                GLBL_LASTPC     set *
(1)  110/       0 :                                     dephase
(1)  110/FFFFFFFFFFFFA004 :                                     phase RAM_MDVIDEO
(1)  110/FFFFFFFFFFFFA004 : =$FFFFFFFFFFFFA004   GLBL_LASTORG    set *
(1)  111/FFFFFFFFFFFFA004 :                     RAM_HorScroll		ds.l 240			; DMA Horizontal scroll data
(1)  112/FFFFFFFFFFFFA3C4 :                     RAM_VerScroll		ds.l 320/16			; DMA Vertical scroll data
(1)  113/FFFFFFFFFFFFA414 :                     RAM_Sprites		ds.w 8*80			; DMA Sprites
(1)  114/FFFFFFFFFFFFA914 :                     RAM_SprDrwPz		ds.w 8*80			; External sprite pieces
(1)  115/FFFFFFFFFFFFAE14 :                     RAM_Palette		ds.w 64				; DMA palette
(1)  116/FFFFFFFFFFFFAE94 :                     RAM_MdMarsPalFd		ds.w 256			; Target 32X palette for FadeIn/Out (NOTE: CPU intensive)
(1)  117/FFFFFFFFFFFFB094 :                     RAM_PaletteFd		ds.w 64				; Target MD palette for FadeIn/Out
(1)  118/FFFFFFFFFFFFB114 :                     RAM_VdpDmaList		ds.b $10*MAX_MDDMATSK		; DMA BLAST list for VBlank
(1)  119/FFFFFFFFFFFFB294 :                     RAM_Objects		ds.b MAX_MDOBJ*sizeof_mdobj	; Objects
(1)  120/FFFFFFFFFFFFBC24 :                     RAM_ObjDispList		ds.w MAX_MDOBJ			; half-RAM pointers for display (Obj|Extra)
(1)  121/FFFFFFFFFFFFBC54 :                     RAM_VidPrntList		ds.w 3*64			; Video_Print list: Address, Type
(1)  122/FFFFFFFFFFFFBDD4 :                     RAM_FrameCount		ds.l 1				; Frames counter
(1)  123/FFFFFFFFFFFFBDD8 :                     RAM_SprDrwCntr		ds.w 1
(1)  124/FFFFFFFFFFFFBDDA :                     RAM_SprLinkNum		ds.w 1
(1)  125/FFFFFFFFFFFFBDDC :                     RAM_VdpExWrite		ds.w 1
(1)  126/FFFFFFFFFFFFBDDE :                     RAM_VdpDmaIndx		ds.w 1				; Current index in DMA BLAST list
(1)  127/FFFFFFFFFFFFBDE0 :                     RAM_VdpDmaMod		ds.w 1				; Mid-write flag
(1)  128/FFFFFFFFFFFFBDE2 :                     RAM_VidPrntVram		ds.w 1				; Default VRAM location for ASCII text used by Video_Print
(1)  129/FFFFFFFFFFFFBDE4 :                     RAM_FadeMdReq		ds.w 1				; FadeIn/Out request for Genesis palette (01-FadeIn 02-FadeOut)
(1)  130/FFFFFFFFFFFFBDE6 :                     RAM_FadeMdIncr		ds.w 1				; Fading increment count
(1)  131/FFFFFFFFFFFFBDE8 :                     RAM_FadeMdDelay		ds.w 1				; Fading delay
(1)  132/FFFFFFFFFFFFBDEA :                     RAM_FadeMdTmr		ds.w 1				; Fading delay timer
(1)  133/FFFFFFFFFFFFBDEC :                     RAM_FadeMarsReq		ds.w 1				; Same thing but for 32X's 256-color (01-FadeIn 02-FadeOut)
(1)  134/FFFFFFFFFFFFBDEE :                     RAM_FadeMarsIncr	ds.w 1				; (Hint: Set to 4 to syncronize with Genesis' FadeIn/Out)
(1)  135/FFFFFFFFFFFFBDF0 :                     RAM_FadeMarsDelay	ds.w 1
(1)  136/FFFFFFFFFFFFBDF2 :                     RAM_FadeMarsTmr		ds.w 1
(1)  137/FFFFFFFFFFFFBDF4 :                     RAM_MdMars_DrawAll	ds.w 1
(1)  138/FFFFFFFFFFFFBDF6 :                     RAM_VdpRegs		ds.b 24				; VDP Register cache
(1)  139/FFFFFFFFFFFFBE0E :                     sizeof_mdvid		ds.l 0
(1)  140/FFFFFFFFFFFFBE14 : (MACRO)              			endstrct
(1)  140/FFFFFFFFFFFFA004 :                                     org GLBL_LASTORG
(1)  140/     4A2 :                                     phase GLBL_LASTPC
(1)  141/     4A2 :                     
(1)  142/     4A2 : (MACRO)              		erreport "MD VIDEO RAM",sizeof_mdvid-RAM_MdVideo,MAX_MdVideo
(1)  143/     4A2 :                     
(1)  144/     4A2 :                     ; ====================================================================
(1)  145/     4A2 :                     ; --------------------------------------------------------
(1)  146/     4A2 :                     ; Initialize Genesis video
(1)  147/     4A2 :                     ;
(1)  148/     4A2 :                     ; Breaks:
(1)  149/     4A2 :                     ; d6-d7/a5-a6
(1)  150/     4A2 :                     ; --------------------------------------------------------
(1)  151/     4A2 :                     
(1)  152/     4A2 :                     Video_Init:
(1)  153/     4A2 : 4DF8 A004           		lea	(RAM_MdVideo).w,a6		; Clear our RAM section
(1)  154/     4A6 : 3C3C 8000           		move.w	#$8000,d6
(1)  155/     4AA : 3E3C 1E09           		move.w	#(sizeof_mdvid-RAM_MdVideo)-1,d7
(1)  156/     4AE :                     .clrram:
(1)  157/     4AE : 1CC6                		move.b	d6,(a6)+			; (Write the LSB zero)
(1)  158/     4B0 : 51CF FFFC           		dbf	d7,.clrram
(1)  159/     4B4 : 31FC 0001 BDDA      		move.w	#1,(RAM_SprLinkNum).w
(1)  160/     4BA : 4DFA 0030           		lea	list_vdpregs(pc),a6		; Write "cache'd" VDP registers
(1)  161/     4BE : 4BF8 BDF6           		lea	(RAM_VdpRegs).w,a5
(1)  162/     4C2 : 3E3C 0010           		move.w	#17-1,d7
(1)  163/     4C6 :                     .loop:
(1)  164/     4C6 : 1C1E                		move.b	(a6)+,d6
(1)  165/     4C8 : 1AC6                		move.b	d6,(a5)+
(1)  166/     4CA : 51CF FFFA           		dbf	d7,.loop
(1)  167/     4CE :                     
(1)  168/     4CE :                     ; --------------------------------------------------------
(1)  169/     4CE :                     ; Video_Update
(1)  170/     4CE :                     ;
(1)  171/     4CE :                     ; Writes register data stored in RAM to VDP
(1)  172/     4CE :                     ; from registers $80 to $90
(1)  173/     4CE :                     ;
(1)  174/     4CE :                     ; WINDOW registers $91 and $92 are written
(1)  175/     4CE :                     ; manually.
(1)  176/     4CE :                     ;
(1)  177/     4CE :                     ; Breaks:
(1)  178/     4CE :                     ; d6-d7/a5-a6
(1)  179/     4CE :                     ; --------------------------------------------------------
(1)  180/     4CE :                     
(1)  181/     4CE :                     Video_Update:
(1)  182/     4CE : 4DF8 BDF6           		lea	(RAM_VdpRegs).w,a6
(1)  183/     4D2 : 4BF9 00C0 0004      		lea	(vdp_ctrl),a5
(1)  184/     4D8 : 3C3C 8000           		move.w	#$8000,d6
(1)  185/     4DC : 7E10                		moveq	#17-1,d7
(1)  186/     4DE :                     .loop:
(1)  187/     4DE : 1C1E                		move.b	(a6)+,d6
(1)  188/     4E0 : 3A86                		move.w	d6,(a5)
(1)  189/     4E2 : 0646 0100           		addi.w	#$0100,d6
(1)  190/     4E6 : 51CF FFF6           		dbf	d7,.loop
(1)  191/     4EA :                     .exit:
(1)  192/     4EA : 4E75                		rts
(1)  193/     4EC :                     
(1)  194/     4EC :                     ; ------------------------------------------------
(1)  195/     4EC :                     ; Default VDP register settings
(1)  196/     4EC :                     ; ------------------------------------------------
(1)  197/     4EC :                     
(1)  198/     4EC :                     list_vdpregs:
(1)  199/     4EC : 04                  		dc.b $04			; No HBlank interrupt, HV Counter on
(1)  200/     4ED : 04                  		dc.b $04			; Display ON, No VBlank interrupt
(1)  201/     4EE : 30                  		dc.b (($C000)>>10)		; Layer A at VRAM $C000 (%00xxx000)
(1)  202/     4EF : 34                  		dc.b (($D000)>>10)		; Window  at VRAM $D000 (%00xxxxy0)
(1)  203/     4F0 : 07                  		dc.b (($E000)>>13)		; Layer B at VRAM $E000 (%00000xxx)
(1)  204/     4F1 : 7C                  		dc.b (($F800)>>9)		; Sprites at VRAM $F800 (%0xxxxxxy)
(1)  205/     4F2 : 00                  		dc.b $00			; Unused
(1)  206/     4F3 : 00                  		dc.b $00			; Background color: $00
(1)  207/     4F4 : 00                  		dc.b $00			; Unused
(1)  208/     4F5 : 00                  		dc.b $00			; Unused
(1)  209/     4F6 : 00                  		dc.b $00			; HInt line number trigger
(1)  210/     4F7 : 00                  		dc.b (%000|%00)			; No ExtInt, Scroll: VSCR:full HSCR:full
(1)  211/     4F8 : 81                  		dc.b $81			; H40, No shadow mode, 320-pixel resolution mode
(1)  212/     4F9 : 3F                  		dc.b (($FC00)>>10)		; HScroll at VRAM $FC00 (%00xxxxxx)
(1)  213/     4FA : 00                  		dc.b $00			; Unused
(1)  214/     4FB : 02                  		dc.b $02			; VDP auto-increment: $02
(1)  215/     4FC : 01                  		dc.b (%00<<4)|%01		; Scroll area size: V32 H64
(1)  216/     4FD : 00                  		dc.b $00
(1)  217/     4FE : 00                  		dc.b $00
(1)  218/     4FF :                     		align 2
(1)  219/     500 :                     ; Default PRINT palette
(1)  220/     500 : 0000 0EEE 0CCC      ASCII_PAL:	dc.w $0000,$0EEE,$0CCC,$0AAA,$0888,$0444,$000E,$0008
              506 : 0AAA 0888 0444 
              50C : 000E 0008          
(1)  221/     510 : 00EE 0088 00E0      		dc.w $00EE,$0088,$00E0,$0080,$0E00,$0800,$0000,$0000
              516 : 0080 0E00 0800 
              51C : 0000 0000          
(1)  222/     520 :                     		align 2
(1)  223/     520 :                     
(1)  224/     520 :                     ; --------------------------------------------------------
(1)  225/     520 :                     ; Video_Clear
(1)  226/     520 :                     ;
(1)  227/     520 :                     ; Clear all video data from VRAM
(1)  228/     520 :                     ;
(1)  229/     520 :                     ; Breaks:
(1)  230/     520 :                     ; ALL
(1)  231/     520 :                     ; --------------------------------------------------------
(1)  232/     520 :                     
(1)  233/     520 :                     Video_Clear:
(1)  234/     520 :                     ; 		move.w	#0,d0			; Clears until $57F
(1)  235/     520 :                     ; 		move.w	#0,d1
(1)  236/     520 :                     ; 		move.w	#$57F*$20,d2
(1)  237/     520 :                     ; 		bsr	Video_Fill
(1)  238/     520 :                     
(1)  239/     520 :                     ; --------------------------------------------------------
(1)  240/     520 :                     ; Video_ClearScreen
(1)  241/     520 :                     ;
(1)  242/     520 :                     ; Clears ALL Genesis screens FG/BG/WIN
(1)  243/     520 :                     ;
(1)  244/     520 :                     ; Breaks:
(1)  245/     520 :                     ; d0-d2/d6-d7/a5-a6
(1)  246/     520 :                     ; --------------------------------------------------------
(1)  247/     520 :                     
(1)  248/     520 :                     Video_ClearScreen:
(1)  249/     520 : 7000                		moveq	#0,d0
(1)  250/     522 : 343C 1000           		move.w	#$1000,d2		; FG/BG size
(1)  251/     526 : 1238 BDF8           		move.b	(RAM_VdpRegs+2).w,d1	; FG
(1)  252/     52A : 0241 0038           		andi.w	#%111000,d1
(1)  253/     52E : E149                		lsl.w	#8,d1
(1)  254/     530 : E549                		lsl.w	#2,d1
(1)  255/     532 : 6100 02EE           		bsr	Video_Fill
(1)  256/     536 : 1238 BDFA           		move.b	(RAM_VdpRegs+4).w,d1	; BG
(1)  257/     53A : 0241 0007           		andi.w	#%000111,d1
(1)  258/     53E : E149                		lsl.w	#8,d1
(1)  259/     540 : EB49                		lsl.w	#5,d1
(1)  260/     542 : 6100 02DE           		bsr	Video_Fill
(1)  261/     546 : 343C 1000           		move.w	#$1000,d2		; WD Size
(1)  262/     54A : 1238 BDF9           		move.b	(RAM_VdpRegs+3).w,d1	; Window
(1)  263/     54E : 0241 003E           		andi.w	#%111110,d1
(1)  264/     552 : E149                		lsl.w	#8,d1
(1)  265/     554 : E549                		lsl.w	#2,d1
(1)  266/     556 : 6100 02CA           		bsr	Video_Fill
(1)  267/     55A : 4DF8 A004           		lea	(RAM_HorScroll).w,a6	; RAM cleanup
(1)  268/     55E : 3E3C 00EF           		move.w	#240-1,d7
(1)  269/     562 : 7C00                		moveq	#0,d6
(1)  270/     564 :                     .xnext:
(1)  271/     564 : 2CC6                		move.l	d6,(a6)+
(1)  272/     566 : 51CF FFFC           		dbf	d7,.xnext
(1)  273/     56A : 4DF8 A3C4           		lea	(RAM_VerScroll).w,a6
(1)  274/     56E : 3E3C 0013           		move.w	#(320/16)-1,d7
(1)  275/     572 :                     .ynext:
(1)  276/     572 : 2CC6                		move.l	d6,(a6)+
(1)  277/     574 : 51CF FFFC           		dbf	d7,.ynext
(1)  278/     578 : 4DF8 A414           		lea	(RAM_Sprites).w,a6
(1)  279/     57C : 3E3C 009F           		move.w	#((80*8)/4)-1,d7
(1)  280/     580 :                     .snext:
(1)  281/     580 : 2CC6                		move.l	d6,(a6)+
(1)  282/     582 : 51CF FFFC           		dbf	d7,.snext
(1)  283/     586 : 4DF8 AE14           		lea	(RAM_Palette).w,a6
(1)  284/     58A : 4BF8 B094           		lea	(RAM_PaletteFd).w,a5
(1)  285/     58E : 3E3C 001F           		move.w	#(64/2)-1,d7
(1)  286/     592 :                     .pnext:
(1)  287/     592 : 2CC6                		move.l	d6,(a6)+
(1)  288/     594 : 2AC6                		move.l	d6,(a5)+
(1)  289/     596 : 51CF FFFA           		dbf	d7,.pnext
(1)  300/     59A : 4E75                		rts
(1)  301/     59C :                     
(1)  302/     59C :                     ; ====================================================================
(1)  303/     59C :                     ; ----------------------------------------------------------------
(1)  304/     59C :                     ; Palette fade system, Genesis side
(1)  305/     59C :                     ; ----------------------------------------------------------------
(1)  306/     59C :                     
(1)  307/     59C :                     ; --------------------------------------------------------
(1)  308/     59C :                     ; FULL Fade in
(1)  309/     59C :                     ; --------------------------------------------------------
(1)  310/     59C :                     
(1)  311/     59C :                     Video_FadeIn:
(1)  312/     59C : 31FC 0001 BDE6      		move.w	#1,(RAM_FadeMdIncr).w	; Increment speed
(1)  313/     5A2 : 31FC 0002 BDEE      		move.w	#2,(RAM_FadeMarsIncr).w
(1)  314/     5A8 : 31FC 0001 BDE8      		move.w	#1,(RAM_FadeMdDelay).w	; Delay by
(1)  315/     5AE : 31FC 0000 BDF0      		move.w	#0,(RAM_FadeMarsDelay).w
(1)  316/     5B4 : 31FC 0001 BDE4      		move.w	#1,(RAM_FadeMdReq).w	; Fade-in task
(1)  317/     5BA : 31FC 0001 BDEC      		move.w	#1,(RAM_FadeMarsReq).w
(1)  318/     5C0 : 6026                		bra	Video_WaitFade
(1)  319/     5C2 :                     
(1)  320/     5C2 :                     ; --------------------------------------------------------
(1)  321/     5C2 :                     ; FULL Fade out
(1)  322/     5C2 :                     ; --------------------------------------------------------
(1)  323/     5C2 :                     
(1)  324/     5C2 :                     Video_FadeOut:
(1)  325/     5C2 : 31FC 0001 BDE6      		move.w	#1,(RAM_FadeMdIncr).w	; Increment speed
(1)  326/     5C8 : 31FC 0002 BDEE      		move.w	#2,(RAM_FadeMarsIncr).w
(1)  327/     5CE : 31FC 0001 BDE8      		move.w	#1,(RAM_FadeMdDelay).w	; Delay by
(1)  328/     5D4 : 31FC 0000 BDF0      		move.w	#0,(RAM_FadeMarsDelay).w
(1)  329/     5DA : 31FC 0002 BDE4      		move.w	#2,(RAM_FadeMdReq).w	; Fade-in task
(1)  330/     5E0 : 31FC 0002 BDEC      		move.w	#2,(RAM_FadeMarsReq).w
(1)  331/     5E6 : 4E71                		bra	Video_WaitFade
(1)  332/     5E8 :                     
(1)  333/     5E8 :                     ; --------------------------------------------------------
(1)  334/     5E8 :                     ; Video_WaitFade
(1)  335/     5E8 :                     ; --------------------------------------------------------
(1)  336/     5E8 :                     
(1)  337/     5E8 :                     Video_WaitFade:
(1)  338/     5E8 : 6100 0AC8           		bsr	System_Render
(1)  346/     5EC : 6140                		bsr	Video_DoPalFade
(1)  347/     5EE : 3E38 BDE4           		move.w	(RAM_FadeMdReq).w,d7
(1)  349/     5F2 : 4A47                		tst.w	d7
(1)  350/     5F4 : 66F2                		bne.s	Video_WaitFade
(1)  351/     5F6 : 4E75                		rts
(1)  352/     5F8 :                     
(1)  353/     5F8 :                     ; --------------------------------------------------------
(1)  354/     5F8 :                     ; Video_RunFade
(1)  355/     5F8 :                     ;
(1)  356/     5F8 :                     ; Processes palette fading for one frame returns
(1)  357/     5F8 :                     ; status on exit.
(1)  358/     5F8 :                     ;
(1)  359/     5F8 :                     ; Returns:
(1)  360/     5F8 :                     ; bne - Still active, jump back.
(1)  361/     5F8 :                     ; beq - Finished
(1)  362/     5F8 :                     ;
(1)  363/     5F8 :                     ; Breaks:
(1)  364/     5F8 :                     ; All
(1)  365/     5F8 :                     ;
(1)  366/     5F8 :                     ; Notes:
(1)  367/     5F8 :                     ; Call System_Render FIRST before calling this
(1)  368/     5F8 :                     ; --------------------------------------------------------
(1)  369/     5F8 :                     
(1)  370/     5F8 :                     Video_RunFade:
(1)  378/     5F8 : 6134                		bsr	Video_DoPalFade
(1)  379/     5FA : 3E38 BDE4           		move.w	(RAM_FadeMdReq).w,d7
(1)  381/     5FE : 4E75                		rts
(1)  382/     600 :                     
(1)  383/     600 :                     ; --------------------------------------------------------
(1)  384/     600 :                     ; Video_LoadPal
(1)  385/     600 :                     ;
(1)  386/     600 :                     ; Input:
(1)  387/     600 :                     ; a0 - Palette data
(1)  388/     600 :                     ; d0 - Start position
(1)  389/     600 :                     ; d1 - Number of colors
(1)  390/     600 :                     ;
(1)  391/     600 :                     ; Breaks:
(1)  392/     600 :                     ; d5-d7,a6
(1)  393/     600 :                     ; --------------------------------------------------------
(1)  394/     600 :                     
(1)  395/     600 :                     Video_FadePal:
(1)  396/     600 : 4DF8 B094           		lea	(RAM_PaletteFd).w,a6
(1)  397/     604 : 4278 BDEA           		clr.w	(RAM_FadeMdTmr).w
(1)  398/     608 : 6004                		bra.s	vidMd_Pal
(1)  399/     60A :                     Video_LoadPal:
(1)  400/     60A : 4DF8 AE14           		lea	(RAM_Palette).w,a6
(1)  401/     60E :                     vidMd_Pal:
(1)  402/     60E : 2A48                		move.l	a0,a5
(1)  403/     610 : 7E00                		moveq	#0,d7
(1)  404/     612 : 3E00                		move.w	d0,d7
(1)  405/     614 : DE47                		add.w	d7,d7
(1)  406/     616 : DCC7                		adda	d7,a6
(1)  407/     618 : 3E01                		move.w	d1,d7
(1)  408/     61A : 0447 0001           		subi.w	#1,d7
(1)  409/     61E : 3C02                		move.w	d2,d6
(1)  410/     620 : 0246 0001           		andi.w	#1,d6
(1)  411/     624 : E25E                		ror.w	#1,d6
(1)  412/     626 :                     .loop:
(1)  413/     626 : 3CDD                		move.w	(a5)+,(a6)+
(1)  414/     628 : 51CF FFFC           		dbf	d7,.loop
(1)  415/     62C : 4E75                		rts
(1)  416/     62E :                     
(1)  417/     62E :                     ; --------------------------------------------------------
(1)  418/     62E :                     ; Video_DoPalFade
(1)  419/     62E :                     ;
(1)  420/     62E :                     ; RAM_ReqFadeMars: (WORD)
(1)  421/     62E :                     ; $00 - No task or finished.
(1)  422/     62E :                     ; $01 - Fade in
(1)  423/     62E :                     ; $02 - Fade out to black
(1)  424/     62E :                     ;
(1)  425/     62E :                     ; NOTE: ONLY CALL THIS OUTSIDE OF VBLANK
(1)  426/     62E :                     ; --------------------------------------------------------
(1)  427/     62E :                     
(1)  428/     62E :                     Video_DoPalFade:
(1)  429/     62E : 0478 0001 BDEA      		subi.w	#1,(RAM_FadeMdTmr).w
(1)  430/     634 : 6A14                		bpl.s	.active
(1)  431/     636 : 31F8 BDE8 BDEA      		move.w	(RAM_FadeMdDelay).w,(RAM_FadeMdTmr).w
(1)  432/     63C : 3E38 BDE4           		move.w	(RAM_FadeMdReq).w,d7
(1)  433/     640 : DE47                		add.w	d7,d7
(1)  434/     642 : 3E3B 7008           		move.w	.fade_list(pc,d7.w),d7
(1)  435/     646 : 4EFB 7004           		jmp	.fade_list(pc,d7.w)
(1)  436/     64A :                     .active:
(1)  437/     64A : 4E75                		rts
(1)  438/     64C :                     
(1)  439/     64C :                     ; --------------------------------------------
(1)  440/     64C :                     
(1)  441/     64C :                     .fade_list:
(1)  442/     64C : 0006                		dc.w .fade_done-.fade_list
(1)  443/     64E : 0008                		dc.w .fade_in-.fade_list
(1)  444/     650 : 00AA                		dc.w .fade_out-.fade_list
(1)  445/     652 :                     
(1)  446/     652 :                     ; --------------------------------------------
(1)  447/     652 :                     ; No fade or finished.
(1)  448/     652 :                     ; --------------------------------------------
(1)  449/     652 :                     
(1)  450/     652 :                     .fade_done:
(1)  451/     652 : 4E75                		rts
(1)  452/     654 :                     
(1)  453/     654 :                     ; --------------------------------------------
(1)  454/     654 :                     ; Fade in
(1)  455/     654 :                     ; --------------------------------------------
(1)  456/     654 :                     
(1)  457/     654 :                     .fade_in:
(1)  458/     654 : 4DF8 B094           		lea	(RAM_PaletteFd).w,a6
(1)  459/     658 : 4BF8 AE14           		lea	(RAM_Palette).w,a5
(1)  460/     65C : 7040                		moveq	#64,d0				; Num of colors
(1)  461/     65E : 3238 BDE6           		move.w	(RAM_FadeMdIncr).w,d1		; Speed
(1)  462/     662 : D241                		add.w	d1,d1
(1)  463/     664 : 3C00                		move.w	d0,d6
(1)  464/     666 : 4846                		swap	d6
(1)  465/     668 : 0440 0001           		subi.w	#1,d0
(1)  466/     66C :                     .nxt_pal:
(1)  467/     66C : 4242                		clr.w	d2		; Reset finished colorbits
(1)  468/     66E : 3E16                		move.w	(a6),d7		; d7 - Input
(1)  469/     670 : 3C15                		move.w	(a5),d6		; d6 - Output
(1)  470/     672 : 3607                		move.w	d7,d3		; RED
(1)  471/     674 : 3806                		move.w	d6,d4
(1)  472/     676 : 0246 0EE0           		andi.w	#%0000111011100000,d6
(1)  473/     67A : 0244 000E           		andi.w	#%0000000000001110,d4
(1)  474/     67E : 0243 000E           		andi.w	#%0000000000001110,d3
(1)  475/     682 : D841                		add.w	d1,d4
(1)  476/     684 : B843                		cmp.w	d3,d4
(1)  477/     686 : 6506                		bcs.s	.no_red
(1)  478/     688 : 3803                		move.w	d3,d4
(1)  479/     68A : 0042 0001           		ori.w	#%001,d2	; RED is ready
(1)  480/     68E :                     .no_red:
(1)  481/     68E : 8C44                		or.w	d4,d6
(1)  482/     690 : E949                		lsl.w	#4,d1
(1)  483/     692 : 3607                		move.w	d7,d3		; GREEN
(1)  484/     694 : 3806                		move.w	d6,d4
(1)  485/     696 : 0246 0E0E           		andi.w	#%0000111000001110,d6
(1)  486/     69A : 0244 00E0           		andi.w	#%0000000011100000,d4
(1)  487/     69E : 0243 00E0           		andi.w	#%0000000011100000,d3
(1)  488/     6A2 : D841                		add.w	d1,d4
(1)  489/     6A4 : B843                		cmp.w	d3,d4
(1)  490/     6A6 : 6506                		bcs.s	.no_grn
(1)  491/     6A8 : 3803                		move.w	d3,d4
(1)  492/     6AA : 0042 0002           		ori.w	#%010,d2	; GREEN is ready
(1)  493/     6AE :                     .no_grn:
(1)  494/     6AE : 8C44                		or.w	d4,d6
(1)  495/     6B0 : E949                		lsl.w	#4,d1
(1)  496/     6B2 : 3607                		move.w	d7,d3		; BLUE
(1)  497/     6B4 : 3806                		move.w	d6,d4
(1)  498/     6B6 : 0246 00EE           		andi.w	#%0000000011101110,d6
(1)  499/     6BA : 0244 0E00           		andi.w	#%0000111000000000,d4
(1)  500/     6BE : 0243 0E00           		andi.w	#%0000111000000000,d3
(1)  501/     6C2 : D841                		add.w	d1,d4
(1)  502/     6C4 : B843                		cmp.w	d3,d4
(1)  503/     6C6 : 6506                		bcs.s	.no_blu
(1)  504/     6C8 : 3803                		move.w	d3,d4
(1)  505/     6CA : 0042 0004           		ori.w	#%100,d2	; BLUE is ready
(1)  506/     6CE :                     .no_blu:
(1)  507/     6CE : 8C44                		or.w	d4,d6
(1)  508/     6D0 : E049                		lsr.w	#8,d1
(1)  509/     6D2 : 3AC6                		move.w	d6,(a5)+
(1)  510/     6D4 : DCFC 0002           		adda	#2,a6
(1)  511/     6D8 : 0C42 0007           		cmpi.w	#%111,d2
(1)  512/     6DC : 6608                		bne.s	.no_fnsh
(1)  513/     6DE : 4846                		swap	d6
(1)  514/     6E0 : 0446 0001           		subi.w	#1,d6
(1)  515/     6E4 : 4846                		swap	d6
(1)  516/     6E6 :                     .no_fnsh:
(1)  517/     6E6 : 51C8 FF84           		dbf	d0,.nxt_pal
(1)  518/     6EA : 4846                		swap	d6
(1)  519/     6EC : 4A46                		tst.w	d6
(1)  520/     6EE : 6604                		bne.s	.no_move
(1)  521/     6F0 : 4278 BDE4           		clr.w	(RAM_FadeMdReq).w
(1)  522/     6F4 :                     .no_move:
(1)  523/     6F4 : 4E75                		rts
(1)  524/     6F6 :                     
(1)  525/     6F6 :                     ; --------------------------------------------
(1)  526/     6F6 :                     ; Fade out
(1)  527/     6F6 :                     ; --------------------------------------------
(1)  528/     6F6 :                     
(1)  529/     6F6 :                     .fade_out:
(1)  530/     6F6 : 4DF8 AE14           		lea	(RAM_Palette).w,a6
(1)  531/     6FA : 7040                		moveq	#64,d0				; Num of colors
(1)  532/     6FC : 3238 BDE6           		move.w	(RAM_FadeMdIncr).w,d1		; Speed
(1)  533/     700 : 3C00                		move.w	d0,d6
(1)  534/     702 : 4846                		swap	d6
(1)  535/     704 : 0440 0001           		subi.w	#1,d0
(1)  536/     708 :                     .nxt_pal_o:
(1)  537/     708 : 4242                		clr.w	d2			; Reset finished colorbits
(1)  538/     70A : 3E16                		move.w	(a6),d7			; d7 - Input
(1)  539/     70C : 3C07                		move.w	d7,d6
(1)  540/     70E : 0247 0EE0           		andi.w	#%0000111011100000,d7
(1)  541/     712 : 0246 000E           		andi.w	#%0000000000001110,d6
(1)  542/     716 : 9C41                		sub.w	d1,d6
(1)  543/     718 : 6A06                		bpl.s	.no_red_o
(1)  544/     71A : 4246                		clr.w	d6
(1)  545/     71C : 0042 0001           		ori.w	#%001,d2		; RED is ready
(1)  546/     720 :                     .no_red_o:
(1)  547/     720 : 8E46                		or.w	d6,d7
(1)  548/     722 : E949                		lsl.w	#4,d1
(1)  549/     724 : 3C07                		move.w	d7,d6
(1)  550/     726 : 0247 0E0E           		andi.w	#%0000111000001110,d7
(1)  551/     72A : 0246 00E0           		andi.w	#%0000000011100000,d6
(1)  552/     72E : 9C41                		sub.w	d1,d6
(1)  553/     730 : 6A06                		bpl.s	.no_grn_o
(1)  554/     732 : 4246                		clr.w	d6
(1)  555/     734 : 0042 0002           		ori.w	#%010,d2		; GREEN is ready
(1)  556/     738 :                     .no_grn_o:
(1)  557/     738 : 8E46                		or.w	d6,d7
(1)  558/     73A : E949                		lsl.w	#4,d1
(1)  559/     73C : 3C07                		move.w	d7,d6
(1)  560/     73E : 0247 00EE           		andi.w	#%0000000011101110,d7
(1)  561/     742 : 0246 0E00           		andi.w	#%0000111000000000,d6
(1)  562/     746 : 9C41                		sub.w	d1,d6
(1)  563/     748 : 6A06                		bpl.s	.no_blu_o
(1)  564/     74A : 4246                		clr.w	d6
(1)  565/     74C : 0042 0004           		ori.w	#%100,d2		; BLUE is ready
(1)  566/     750 :                     .no_blu_o:
(1)  567/     750 : 8E46                		or.w	d6,d7
(1)  568/     752 : E049                		lsr.w	#8,d1
(1)  569/     754 : 3CC7                		move.w	d7,(a6)+
(1)  570/     756 : 0C42 0007           		cmpi.w	#%111,d2
(1)  571/     75A : 6608                		bne.s	.no_fnsh_o
(1)  572/     75C : 4846                		swap	d6
(1)  573/     75E : 0446 0001           		subi.w	#1,d6
(1)  574/     762 : 4846                		swap	d6
(1)  575/     764 :                     .no_fnsh_o:
(1)  576/     764 : 51C8 FFA2           		dbf	d0,.nxt_pal_o
(1)  577/     768 : 4846                		swap	d6
(1)  578/     76A : 4A46                		tst.w	d6
(1)  579/     76C : 6604                		bne.s	.no_move_o
(1)  580/     76E : 4278 BDE4           		clr.w	(RAM_FadeMdReq).w
(1)  581/     772 :                     .no_move_o:
(1)  582/     772 : 4E75                		rts
(1)  583/     774 :                     
(1)  584/     774 :                     ; ====================================================================
(1)  585/     774 :                     ; --------------------------------------------------------
(1)  586/     774 :                     ; Genesis DMA
(1)  587/     774 :                     ; --------------------------------------------------------
(1)  588/     774 :                     
(1)  589/     774 :                     ; --------------------------------------------------------
(1)  590/     774 :                     ; Video_DmaMkEntry
(1)  591/     774 :                     ;
(1)  592/     774 :                     ; Sets a new DMA transfer entry to the BLAST list
(1)  593/     774 :                     ;
(1)  594/     774 :                     ; *** CALL THIS OUTSIDE OF VBLANK ONLY ***
(1)  595/     774 :                     ;
(1)  596/     774 :                     ; d0.l - Art data Real-ROM location
(1)  597/     774 :                     ; d1.w - VRAM location cell_vram()
(1)  598/     774 :                     ; d2.w - Size
(1)  599/     774 :                     ;
(1)  600/     774 :                     ; Breaks:
(1)  601/     774 :                     ; d5-d7,a6
(1)  602/     774 :                     ; --------------------------------------------------------
(1)  603/     774 :                     
(1)  604/     774 :                     Video_DmaMkEntry:
(1)  605/     774 : 2A00                		move.l	d0,d5
(1)  606/     776 : DA42                		add.w	d2,d5
(1)  607/     778 : 6430                		bcc.s	.normal
(1)  608/     77A : 2A00                		move.l	d0,d5		; <-- DOUBLE TRANSFER
(1)  609/     77C : 3C01                		move.w	d1,d6
(1)  610/     77E : 2E05                		move.l	d5,d7		; Top
(1)  611/     780 : 0687 0001 0000      		addi.l	#$010000,d7
(1)  612/     786 : 0287 00FF 0000      		andi.l	#$FF0000,d7
(1)  613/     78C : 9E80                		sub.l	d0,d7
(1)  614/     78E : 6120                		bsr.s	.mk_set
(1)  615/     790 : 2A00                		move.l	d0,d5		; Bottom
(1)  616/     792 : 0685 0001 0000      		addi.l	#$010000,d5
(1)  617/     798 : 0285 00FF 0000      		andi.l	#$FF0000,d5
(1)  618/     79E : 2C05                		move.l	d5,d6
(1)  619/     7A0 : 9C80                		sub.l	d0,d6
(1)  620/     7A2 : 3E02                		move.w	d2,d7
(1)  621/     7A4 : 9E46                		sub.w	d6,d7
(1)  622/     7A6 : DC41                		add.w	d1,d6
(1)  623/     7A8 : 6006                		bra.s	.mk_set
(1)  624/     7AA :                     .normal:
(1)  625/     7AA : 2A00                		move.l	d0,d5
(1)  626/     7AC : 3C01                		move.w	d1,d6
(1)  627/     7AE : 3E02                		move.w	d2,d7
(1)  628/     7B0 :                     ; d7 - size
(1)  629/     7B0 :                     ; d6 - vram
(1)  630/     7B0 :                     ; d5 - data
(1)  631/     7B0 :                     .mk_set:
(1)  632/     7B0 : 4847                		swap	d7
(1)  633/     7B2 : 3E38 BDDE           		move.w	(RAM_VdpDmaIndx).w,d7
(1)  634/     7B6 : 0C47 0018           		cmpi.w	#MAX_MDDMATSK,d7
(1)  635/     7BA : 6C64                		bge.s	.ran_out
(1)  636/     7BC : E94F                		lsl.w	#4,d7			; Size $10
(1)  637/     7BE : 4DF8 B114           		lea	(RAM_VdpDmaList).w,a6
(1)  638/     7C2 : DCC7                		adda	d7,a6
(1)  639/     7C4 : 4847                		swap	d7
(1)  640/     7C6 : 31FC 0001 BDE0      		move.w	#1,(RAM_VdpDmaMod).w
(1)  641/     7CC : 5278 BDDE           		addq.w	#1,(RAM_VdpDmaIndx).w
(1)  642/     7D0 :                     
(1)  643/     7D0 : 0287 0000 FFFE      		andi.l	#$0000FFFE,d7
(1)  644/     7D6 : EF8F                		lsl.l	#7,d7
(1)  645/     7D8 : E04F                		lsr.w	#8,d7
(1)  646/     7DA : 0087 9400 9300      		ori.l	#$94009300,d7
(1)  647/     7E0 : 2CC7                		move.l	d7,(a6)+
(1)  648/     7E2 : E28D                  		lsr.l	#1,d5			; d5 - Source
(1)  649/     7E4 : 2E3C 9600 9500       		move.l	#$96009500,d7
(1)  650/     7EA : 1E05                 		move.b	d5,d7
(1)  651/     7EC : E08D                 		lsr.l	#8,d5
(1)  652/     7EE : 4847                 		swap	d7
(1)  653/     7F0 : 1E05                 		move.b	d5,d7
(1)  654/     7F2 : 2CC7                 		move.l	d7,(a6)+
(1)  655/     7F4 : 3E3C 9700            		move.w	#$9700,d7
(1)  656/     7F8 : E08D                 		lsr.l	#8,d5
(1)  657/     7FA : 1E05                 		move.b	d5,d7
(1)  658/     7FC : 3CC7                 		move.w	d7,(a6)+
(1)  659/     7FE : 3E06                		move.w	d6,d7			; Destination
(1)  660/     800 : 0286 0000 3FFF      		andi.l	#$3FFF,d6
(1)  661/     806 : 0046 4000           		ori.w	#$4000,d6
(1)  662/     80A : E04F                		lsr.w	#8,d7
(1)  663/     80C : EC4F                		lsr.w	#6,d7
(1)  664/     80E : 0247 0003           		andi.w	#%11,d7
(1)  665/     812 : 0047 0080           		ori.w	#$80,d7
(1)  666/     816 : 3CC6                		move.w	d6,(a6)+
(1)  667/     818 : 3CC7                		move.w	d7,(a6)+
(1)  675/     81A : 31FC 0000 BDE0      		move.w	#0,(RAM_VdpDmaMod).w
(1)  676/     820 :                     .ran_out:
(1)  677/     820 : 4E75                		rts
(1)  678/     822 :                     
(1)  679/     822 :                     ; --------------------------------------------------------
(1)  680/     822 :                     ; Video_Fill
(1)  681/     822 :                     ;
(1)  682/     822 :                     ; Fill data to VRAM
(1)  683/     822 :                     ;
(1)  684/     822 :                     ; d0.w - WORD to fill
(1)  685/     822 :                     ; d1.w - VRAM location cell_vram()
(1)  686/     822 :                     ; d2.w - Size
(1)  687/     822 :                     ;
(1)  688/     822 :                     ; Breaks:
(1)  689/     822 :                     ; d6-d7,a6
(1)  690/     822 :                     ;
(1)  691/     822 :                     ; Notes:
(1)  692/     822 :                     ; Size $0001 is invalid, writes in this order: $56781234
(1)  693/     822 :                     ; --------------------------------------------------------
(1)  694/     822 :                     
(1)  695/     822 :                     Video_Fill:
(1)  696/     822 : 4DF9 00C0 0004      		lea	(vdp_ctrl).l,a6
(1)  697/     828 : 3E3C 8100           		move.w	#$8100,d7
(1)  698/     82C : 1E38 BDF7           		move.b	(RAM_VdpRegs+1).w,d7
(1)  699/     830 : 08C7 0004           		bset	#bitDmaEnbl,d7
(1)  700/     834 : 3C87                		move.w	d7,(a6)
(1)  701/     836 : 3E16                .dmaw:		move.w	(a6),d7
(1)  702/     838 : 0807 0001           		btst	#bitDma,d7
(1)  703/     83C : 66F8                		bne.s	.dmaw
(1)  704/     83E : 3CBC 8F01           		move.w	#$8F01,(a6)	; Increment $01
(1)  705/     842 : 3E02                		move.w	d2,d7		; d2 - Size
(1)  706/     844 : 0447 0001           		subi.w	#1,d7
(1)  707/     848 : 2C3C 9400 9300      		move.l	#$94009300,d6
(1)  708/     84E : 1C07                		move.b	d7,d6
(1)  709/     850 : 4846                		swap	d6
(1)  710/     852 : E04F                		lsr.w	#8,d7
(1)  711/     854 : 1C07                		move.b	d7,d6
(1)  712/     856 : 4846                		swap	d6
(1)  713/     858 : 2C86                		move.l	d6,(a6)
(1)  714/     85A : 3CBC 9780           		move.w	#$9780,(a6)	; DMA Fill mode
(1)  715/     85E : 3E01                		move.w	d1,d7		; d1 - Destination
(1)  716/     860 : 3C07                		move.w	d7,d6
(1)  717/     862 : 0246 3FFF           		andi.w	#$3FFF,d6
(1)  718/     866 : 0046 4000           		ori.w	#$4000,d6
(1)  719/     86A : 4846                		swap	d6
(1)  720/     86C : 3C07                		move.w	d7,d6
(1)  721/     86E : E04E                		lsr.w	#8,d6
(1)  722/     870 : EC4E                		lsr.w	#6,d6
(1)  723/     872 : 0246 0003           		andi.w	#%11,d6
(1)  724/     876 : 0046 0080           		ori.w	#$80,d6
(1)  725/     87A : 2C86                		move.l	d6,(a6)
(1)  726/     87C : 3D40 FFFC           		move.w	d0,-4(a6)
(1)  727/     880 : 3E16                .dma_w:		move.w	(a6),d7
(1)  728/     882 : 0807 0001           		btst	#bitDma,d7
(1)  729/     886 : 66F8                		bne.s	.dma_w
(1)  730/     888 : 3CBC 8F02           		move.w	#$8F02,(a6)	; Increment $02
(1)  731/     88C : 3E3C 8100           		move.w	#$8100,d7
(1)  732/     890 : 1E38 BDF7           		move.b	(RAM_VdpRegs+1).w,d7
(1)  733/     894 : 3C87                		move.w	d7,(a6)
(1)  734/     896 : 4E75                		rts
(1)  735/     898 :                     
(1)  736/     898 :                     ; --------------------------------------------------------
(1)  737/     898 :                     ; Video_Copy
(1)  738/     898 :                     ;
(1)  739/     898 :                     ; Copy VRAM data to another location
(1)  740/     898 :                     ;
(1)  741/     898 :                     ; d0.w - VRAM Source cell_vram()
(1)  742/     898 :                     ; d1.w - VRAM Destination cell_vram()
(1)  743/     898 :                     ; d2.w - Size
(1)  744/     898 :                     ;
(1)  745/     898 :                     ; Breaks:
(1)  746/     898 :                     ; d6-d7,a6
(1)  747/     898 :                     ; --------------------------------------------------------
(1)  748/     898 :                     
(1)  749/     898 :                     ; TODO: test if this works again...
(1)  750/     898 :                     
(1)  751/     898 :                     Video_Copy:
(1)  752/     898 : 4DF9 00C0 0004      		lea	(vdp_ctrl),a6
(1)  753/     89E : 3E3C 8100           		move.w	#$8100,d7
(1)  754/     8A2 : 1E38 BDF7           		move.b	(RAM_VdpRegs+1).w,d7
(1)  755/     8A6 : 08C7 0004           		bset	#bitDmaEnbl,d7
(1)  756/     8AA : 3C87                		move.w	d7,(a6)
(1)  757/     8AC : 3E16                .dmaw:		move.w	(a6),d7
(1)  758/     8AE : 0807 0001           		btst	#bitDma,d7
(1)  759/     8B2 : 66F8                		bne.s	.dmaw
(1)  760/     8B4 : 3CBC 8F01           		move.w	#$8F01,(a6)		; Increment $01
(1)  761/     8B8 : 3E02                		move.w	d2,d7			; SIZE
(1)  762/     8BA : 2C3C 9400 9300      		move.l	#$94009300,d6
(1)  763/     8C0 :                     ; 		lsr.w	#1,d7
(1)  764/     8C0 : 1C07                		move.b	d7,d6
(1)  765/     8C2 : 4846                		swap	d6
(1)  766/     8C4 : E04F                		lsr.w	#8,d7
(1)  767/     8C6 : 1C07                		move.b	d7,d6
(1)  768/     8C8 : 4846                		swap	d6
(1)  769/     8CA : 2C86                		move.l	d6,(a6)
(1)  770/     8CC : 2C3C 9600 9500      		move.l	#$96009500,d6		; SOURCE
(1)  771/     8D2 : 3E00                		move.w	d0,d7
(1)  772/     8D4 : 1C07                		move.b	d7,d6
(1)  773/     8D6 : 4846                		swap	d6
(1)  774/     8D8 : E04F                		lsr.w	#8,d7
(1)  775/     8DA : 1C07                		move.b	d7,d6
(1)  776/     8DC : 2C86                		move.l	d6,(a6)
(1)  777/     8DE : 3CBC 97C0           		move.w	#$97C0,(a6)		; DMA Copy mode
(1)  778/     8E2 : 2E02                		move.l	d2,d7			; DESTINATION
(1)  779/     8E4 : 3C07                		move.w	d7,d6
(1)  780/     8E6 : 0246 3FFF           		andi.w	#$3FFF,d6
(1)  781/     8EA : 0046 4000           		ori.w	#$4000,d6
(1)  782/     8EE : 4846                		swap	d6
(1)  783/     8F0 : 3C07                		move.w	d7,d6
(1)  784/     8F2 : E04E                		lsr.w	#8,d6
(1)  785/     8F4 : EC4E                		lsr.w	#6,d6
(1)  786/     8F6 : 0246 0003           		andi.w	#%11,d6
(1)  787/     8FA : 0046 00C0           		ori.w	#$C0,d6
(1)  788/     8FE : 2C86                		move.l	d6,(a6)
(1)  789/     900 : 3D41 FFFC           		move.w	d1,-4(a6)
(1)  790/     904 : 3E16                .dma_w:		move.w	(a6),d7
(1)  791/     906 : 0807 0001           		btst	#bitDma,d7
(1)  792/     90A : 66F8                		bne.s	.dma_w
(1)  793/     90C : 3CBC 8F02           		move.w	#$8F02,(a6)		; Increment $02
(1)  794/     910 : 3E3C 8100           		move.w	#$8100,d7
(1)  795/     914 : 1E38 BDF7           		move.b	(RAM_VdpRegs+1).w,d7
(1)  796/     918 : 3C87                		move.w	d7,(a6)
(1)  797/     91A : 4E75                		rts
(1)  798/     91C :                     
(1)  799/     91C :                     ; --------------------------------------------------------
(1)  800/     91C :                     ; Load graphics using DMA manually
(1)  801/     91C :                     ;
(1)  802/     91C :                     ; Input:
(1)  803/     91C :                     ; d0.l - Graphics data pointer (NOT a0)
(1)  804/     91C :                     ; d1.w - cell_vram(vram_pos)
(1)  805/     91C :                     ; d2.w - Size
(1)  806/     91C :                     ;
(1)  807/     91C :                     ; Breaks:
(1)  808/     91C :                     ; d4-d7,a4
(1)  809/     91C :                     ;
(1)  810/     91C :                     ; Notes:
(1)  811/     91C :                     ; - For a faster transfer call this during VBlank
(1)  812/     91C :                     ; - 32X: MAKE SURE THE SH2 SIDE IS NOT READING ROM
(1)  813/     91C :                     ;        BEFORE CALLING THIS.
(1)  814/     91C :                     ; --------------------------------------------------------
(1)  815/     91C :                     
(1)  816/     91C :                     Video_LoadArt:
(1)  817/     91C : 2A00                		move.l	d0,d5
(1)  818/     91E : DA42                		add.w	d2,d5
(1)  819/     920 : 6430                		bcc.s	.normal
(1)  820/     922 : 2A00                		move.l	d0,d5		; <-- DOUBLE TRANSFER
(1)  821/     924 : 3C01                		move.w	d1,d6
(1)  822/     926 : 2E05                		move.l	d5,d7		; Top
(1)  823/     928 : 0687 0001 0000      		addi.l	#$010000,d7
(1)  824/     92E : 0287 00FF 0000      		andi.l	#$FF0000,d7
(1)  825/     934 : 9E80                		sub.l	d0,d7
(1)  826/     936 : 6120                		bsr.s	.mk_set
(1)  827/     938 : 2A00                		move.l	d0,d5		; Bottom
(1)  828/     93A : 0685 0001 0000      		addi.l	#$010000,d5
(1)  829/     940 : 0285 00FF 0000      		andi.l	#$FF0000,d5
(1)  830/     946 : 2C05                		move.l	d5,d6
(1)  831/     948 : 9C80                		sub.l	d0,d6
(1)  832/     94A : 3E02                		move.w	d2,d7
(1)  833/     94C : 9E46                		sub.w	d6,d7
(1)  834/     94E : DC41                		add.w	d1,d6
(1)  835/     950 : 6006                		bra.s	.mk_set
(1)  836/     952 :                     .normal:
(1)  837/     952 : 2A00                		move.l	d0,d5
(1)  838/     954 : 3C01                		move.w	d1,d6
(1)  839/     956 : 3E02                		move.w	d2,d7
(1)  840/     958 :                     ; d7 - size
(1)  841/     958 :                     ; d6 - vram
(1)  842/     958 :                     ; d5 - data
(1)  843/     958 :                     .mk_set:
(1)  844/     958 : 49F9 00C0 0004      		lea	(vdp_ctrl),a4
(1)  845/     95E : 383C 8100           		move.w	#$8100,d4		; DMA ON
(1)  846/     962 : 1838 BDF7           		move.b	(RAM_VdpRegs+1).w,d4
(1)  847/     966 : 08C4 0004           		bset	#bitDmaEnbl,d4
(1)  848/     96A : 3884                		move.w	d4,(a4)
(1)  849/     96C :                     
(1)  864/     96C : 611A                		bsr.s	.shared_setup
(1)  865/     96E : 3886                		move.w	d6,(a4)
(1)  866/     970 : 6100 078E           		bsr	System_DmaEnter_ROM
(1)  867/     974 : 3887                		move.w	d7,(a4)			; <-- second write
(1)  868/     976 : 6100 078C           		bsr	System_DmaExit_ROM
(1)  869/     97A : 383C 8100           		move.w	#$8100,d4		; DMA OFF
(1)  870/     97E : 1838 BDF7           		move.b	(RAM_VdpRegs+1).w,d4
(1)  871/     982 : 3884                		move.w	d4,(a4)
(1)  872/     984 :                     
(1)  894/     984 : 4E75                		rts
(1)  895/     986 :                     
(1)  896/     986 :                     .from_ram:
(1)  897/     986 : 4E75                		rts
(1)  898/     988 :                     
(1)  899/     988 :                     .shared_setup:
(1)  900/     988 : 0287 0000 FFFE      		andi.l	#$0000FFFE,d7
(1)  901/     98E : EF8F                		lsl.l	#7,d7
(1)  902/     990 : E04F                		lsr.w	#8,d7
(1)  903/     992 : 0087 9400 9300      		ori.l	#$94009300,d7
(1)  904/     998 : 2887                		move.l	d7,(a4)
(1)  905/     99A : E28D                  		lsr.l	#1,d5			; d5 - Source
(1)  906/     99C : 2E3C 9600 9500       		move.l	#$96009500,d7
(1)  907/     9A2 : 1E05                 		move.b	d5,d7
(1)  908/     9A4 : E08D                 		lsr.l	#8,d5
(1)  909/     9A6 : 4847                 		swap	d7
(1)  910/     9A8 : 1E05                 		move.b	d5,d7
(1)  911/     9AA : 2887                 		move.l	d7,(a4)
(1)  912/     9AC : 3E3C 9700            		move.w	#$9700,d7
(1)  913/     9B0 : E08D                 		lsr.l	#8,d5
(1)  914/     9B2 : 1E05                 		move.b	d5,d7
(1)  915/     9B4 : 3887                 		move.w	d7,(a4)
(1)  916/     9B6 : 3E06                		move.w	d6,d7			; Destination
(1)  917/     9B8 : 0286 0000 3FFF      		andi.l	#$3FFF,d6
(1)  918/     9BE : 0046 4000           		ori.w	#$4000,d6
(1)  919/     9C2 : E04F                		lsr.w	#8,d7
(1)  920/     9C4 : EC4F                		lsr.w	#6,d7
(1)  921/     9C6 : 0247 0003           		andi.w	#%11,d7
(1)  922/     9CA : 0047 0080           		ori.w	#$80,d7
(1)  923/     9CE : 4E75                		rts
(1)  924/     9D0 :                     
(1)  925/     9D0 :                     ; --------------------------------------------------------
(1)  926/     9D0 :                     ; Video_Render
(1)  927/     9D0 :                     ;
(1)  928/     9D0 :                     ; Call this during VBlank to update
(1)  929/     9D0 :                     ; visuals.
(1)  930/     9D0 :                     ; --------------------------------------------------------
(1)  931/     9D0 :                     
(1)  932/     9D0 :                     Video_Render:
(1)  933/     9D0 : 4DF9 00C0 0004      		lea	(vdp_ctrl),a6
(1)  934/     9D6 : 3E3C 8100           		move.w	#$8100,d7		; DMA ON
(1)  935/     9DA : 1E38 BDF7           		move.b	(RAM_VdpRegs+1).w,d7
(1)  936/     9DE : 08C7 0004           		bset	#bitDmaEnbl,d7
(1)  937/     9E2 : 3C87                		move.w	d7,(a6)
(1)  938/     9E4 : 6100 0712           		bsr	System_DmaEnter_RAM
(1)  939/     9E8 : 2CBC 9400 9328      		move.l	#$94009328,(a6)
(1)  940/     9EE : 2CBC 96D1 95E2      		move.l	#$96009500|(RAM_VerScroll<<7&$FF0000)|(RAM_VerScroll>>1&$FF),(a6)
(1)  941/     9F4 : 3CBC 977F           		move.w	#$9700|(RAM_VerScroll>>17&$7F),(a6)
(1)  942/     9F8 : 3CBC 4000           		move.w	#$4000,(a6)
(1)  943/     9FC : 3F3C 0090           		move.w	#$0010|$80,-(sp)
(1)  944/     A00 : 3C9F                		move.w	(sp)+,(a6)
(1)  945/     A02 : 2CBC 9401 93E0      		move.l	#$940193E0,(a6)
(1)  946/     A08 : 2CBC 96D0 9502      		move.l	#$96009500|(RAM_HorScroll<<7&$FF0000)|(RAM_HorScroll>>1&$FF),(a6)
(1)  947/     A0E : 3CBC 977F           		move.w	#$9700|(RAM_HorScroll>>17&$7F),(a6)
(1)  948/     A12 : 3CBC 7C00           		move.w	#$7C00,(a6)
(1)  949/     A16 : 3F3C 0083           		move.w	#$0003|$80,-(sp)
(1)  950/     A1A : 3C9F                		move.w	(sp)+,(a6)
(1)  951/     A1C : 2CBC 9402 9300      		move.l	#$94029300,(a6)
(1)  952/     A22 : 2CBC 96D2 950A      		move.l	#$96009500|(RAM_Sprites<<7&$FF0000)|(RAM_Sprites>>1&$FF),(a6)
(1)  953/     A28 : 3CBC 977F           		move.w	#$9700|(RAM_Sprites>>17&$7F),(a6)
(1)  954/     A2C : 3CBC 7800           		move.w	#$7800,(a6)
(1)  955/     A30 : 3F3C 0083           		move.w	#$0003|$80,-(sp)
(1)  956/     A34 : 3C9F                		move.w	(sp)+,(a6)
(1)  957/     A36 : 2CBC 9400 9340      		move.l	#$94009340,(a6)
(1)  958/     A3C : 2CBC 96D7 950A      		move.l	#$96009500|(RAM_Palette<<7&$FF0000)|(RAM_Palette>>1&$FF),(a6)
(1)  959/     A42 : 3CBC 977F           		move.w	#$9700|(RAM_Palette>>17&$7F),(a6)
(1)  960/     A46 : 3CBC C000           		move.w	#$C000,(a6)
(1)  961/     A4A : 3F3C 0080           		move.w	#$0000|$80,-(sp)
(1)  962/     A4E : 3C9F                		move.w	(sp)+,(a6)
(1)  963/     A50 : 6100 06AA           		bsr	System_DmaExit_RAM
(1)  964/     A54 : 3E3C 8100           		move.w	#$8100,d7
(1)  965/     A58 : 1E38 BDF7           		move.b	(RAM_VdpRegs+1).w,d7
(1)  966/     A5C : 3C87                		move.w	d7,(a6)
(1)  967/     A5E : 31FC 0001 BDDA      		move.w	#1,(RAM_SprLinkNum).w	; Reset SPRITE LINK number
(1)  968/     A64 :                     
(1)  969/     A64 :                     	; Process DMA BLAST from here
(1)  970/     A64 :                     
(1)  971/     A64 :                     ; --------------------------------------------------------
(1)  972/     A64 :                     ; Video_DmaBlast
(1)  973/     A64 :                     ;
(1)  974/     A64 :                     ; Process DMA tasks from a predefined list in RAM
(1)  975/     A64 :                     ;
(1)  976/     A64 :                     ; Breaks:
(1)  977/     A64 :                     ; d5-d7,a3-a4
(1)  978/     A64 :                     ;
(1)  979/     A64 :                     ; *** Call this on VBlank ONLY ***
(1)  980/     A64 :                     ;
(1)  981/     A64 :                     ; NOTE:
(1)  982/     A64 :                     ; For 32X this code MUST be located on RAM as it
(1)  983/     A64 :                     ; writes the RV from ROM access
(1)  984/     A64 :                     ; --------------------------------------------------------
(1)  985/     A64 :                     
(1)  986/     A64 :                     ; Format:
(1)  987/     A64 :                     ; dc.w $94xx,$93xx		; Size
(1)  988/     A64 :                     ; dc.w $96xx,$95xx,$97xx	; Source
(1)  989/     A64 :                     ; dc.l $4xxx008x 		; VDP output + DMA bit
(1)  990/     A64 :                     ; dc.w $xxxx			; SegaCD/CD32X only: graphics word patch
(1)  991/     A64 :                     
(1)  992/     A64 :                     Video_DmaBlast:
(1)  993/     A64 : 4A78 BDE0           		tst.w	(RAM_VdpDmaMod).w		; Got mid-write?
(1)  994/     A68 : 664C                		bne.s	.exit				; then can't transfer.
(1)  995/     A6A : 4A78 BDDE           		tst.w	(RAM_VdpDmaIndx).w		; Any requests?
(1)  996/     A6E : 6746                		beq.s	.exit
(1)  997/     A70 : 49F9 00C0 0004      		lea	(vdp_ctrl),a4			; Enter processing loop
(1)  998/     A76 : 47F8 B114           		lea	(RAM_VdpDmaList).w,a3
(1)  999/     A7A : 3E3C 8100           		move.w	#$8100,d7			; DMA ON
(1) 1000/     A7E : 1E38 BDF7           		move.b	(RAM_VdpRegs+1).w,d7
(1) 1001/     A82 : 08C7 0004           		bset	#bitDmaEnbl,d7
(1) 1002/     A86 : 3887                		move.w	d7,(a4)
(1) 1003/     A88 : 6100 0676           		bsr	System_DmaEnter_ROM		; Request Z80 stop and SH2 backup
(1) 1004/     A8C : 4A78 BDDE           .next:		tst.w	(RAM_VdpDmaIndx).w
(1) 1005/     A90 : 6716                		beq.s	.end
(1) 1029/     A92 : 289B                		move.l	(a3)+,(a4)		; Size
(1) 1030/     A94 : 289B                		move.l	(a3)+,(a4)		; Source
(1) 1031/     A96 : 389B                		move.w	(a3)+,(a4)
(1) 1032/     A98 : 389B                		move.w	(a3)+,(a4)		; Destination
(1) 1033/     A9A : 389B                		move.w	(a3)+,(a4)		; *** CPU freezes ***
(1) 1034/     A9C : D6FC 0002           		adda	#2,a3
(1) 1036/     AA0 : 0478 0001 BDDE      		subi.w	#1,(RAM_VdpDmaIndx).w
(1) 1037/     AA6 : 60E4                		bra.s	.next
(1) 1038/     AA8 :                     .end:
(1) 1039/     AA8 : 6100 065A           		bsr	System_DmaExit_ROM	; Resume Z80 and SH2 direct
(1) 1040/     AAC : 3E3C 8100           		move.w	#$8100,d7		; DMA OFF
(1) 1041/     AB0 : 1E38 BDF7           		move.b	(RAM_VdpRegs+1).w,d7
(1) 1042/     AB4 : 3887                		move.w	d7,(a4)
(1) 1043/     AB6 :                     .exit:
(1) 1044/     AB6 : 4E75                		rts
(1) 1045/     AB8 :                     
(1) 1046/     AB8 :                     ; ====================================================================
(1) 1047/     AB8 :                     ; ----------------------------------------------------------------
(1) 1048/     AB8 :                     ; Video routines for 32X
(1) 1049/     AB8 :                     ; ----------------------------------------------------------------
(1) 1050/     AB8 :                     
(1) 1051/     AB8 :                     ; --------------------------------------------------------
(1) 1052/     AB8 :                     ; Video_MarsGfxMode
(1) 1053/     AB8 :                     ; Sets graphics mode on the 32X side
(1) 1054/     AB8 :                     ;
(1) 1055/     AB8 :                     ; Input:
(1) 1056/     AB8 :                     ; d0 - Graphics mode number
(1) 1057/     AB8 :                     ;
(1) 1058/     AB8 :                     ; Uses:
(1) 1059/     AB8 :                     ; d7
(1) 1060/     AB8 :                     ;
(1) 1061/     AB8 :                     ; Notes:
(1) 1062/     AB8 :                     ; Changing modes takes 3 FRAMES to process.
(1) 1063/     AB8 :                     ; --------------------------------------------------------
(1) 1064/     AB8 :                     
(1) 1065/     AB8 :                     Video_MarsGfxMode:
(1) 1081/     AB8 : 4E75                		rts
(1) 1082/     ABA :                     
(1) 1083/     ABA :                     ; --------------------------------------------------------
(1) 1084/     ABA :                     ; Video_Mars_SyncFrame
(1) 1085/     ABA :                     ; --------------------------------------------------------
(1) 1086/     ABA :                     
(1) 1087/     ABA :                     Video_Mars_SyncFrame:
(1) 1093/     ABA : 4E75                		rts
(1) 1094/     ABC :                     
(1) 1095/     ABC :                     ; --------------------------------------------------------
(1) 1096/     ABC :                     ; Video_LoadPal_Mars
(1) 1097/     ABC :                     ;
(1) 1098/     ABC :                     ; Load Indexed palette directly to Buffer
(1) 1099/     ABC :                     ;
(1) 1100/     ABC :                     ; d0 - Start at
(1) 1101/     ABC :                     ; d1 - Number of colors
(1) 1102/     ABC :                     ; d2 - Priority bit OFF/ON
(1) 1103/     ABC :                     ; --------------------------------------------------------
(1) 1104/     ABC :                     
(1) 1105/     ABC :                     Video_FadePal_Mars:
(1) 1129/     ABC : 4E75                		rts
(1) 1130/     ABE :                     
(1) 1131/     ABE :                     ; --------------------------------------------------------
(1) 1132/     ABE :                     ; Video_MarsPalFade
(1) 1133/     ABE :                     ;
(1) 1134/     ABE :                     ; Input:
(1) 1135/     ABE :                     ; a0 - Palette data
(1) 1136/     ABE :                     ; d0 - Number of colors
(1) 1137/     ABE :                     ; d1 - Speed
(1) 1138/     ABE :                     ;
(1) 1139/     ABE :                     ; RAM_ReqFadeMars: (WORD)
(1) 1140/     ABE :                     ; $00 - No task (or finished)
(1) 1141/     ABE :                     ; $01 - Fade in
(1) 1142/     ABE :                     ; $02 - Fade out to black
(1) 1143/     ABE :                     ;
(1) 1144/     ABE :                     ; CALL THIS OUTSIDE OF VBLANK
(1) 1145/     ABE :                     ; --------------------------------------------------------
(1) 1146/     ABE :                     
(1) 1147/     ABE :                     ; TODO: luego ver que hago con el priority bit
(1) 1148/     ABE :                     
(1) 1149/     ABE :                     Video_MarsPalFade:
(1) 1308/     ABE : 4E75                		rts
(1) 1309/     AC0 :                     
(1) 1310/     AC0 :                     
(1) 1311/     AC0 :                     ; ====================================================================
(1) 1312/     AC0 :                     ; ----------------------------------------------------------------
(1) 1313/     AC0 :                     ; Common screen routines
(1) 1314/     AC0 :                     ; ----------------------------------------------------------------
(1) 1315/     AC0 :                     
(1) 1316/     AC0 :                     ; --------------------------------------------------------
(1) 1317/     AC0 :                     ; Video_LoadMap
(1) 1318/     AC0 :                     ;
(1) 1319/     AC0 :                     ; Loads map data, in Horizontal order
(1) 1320/     AC0 :                     ; Can autodetect layer width, height and
(1) 1321/     AC0 :                     ; double interlace mode
(1) 1322/     AC0 :                     ;
(1) 1323/     AC0 :                     ; Input:
(1) 1324/     AC0 :                     ; a0   - Map data
(1) 1325/     AC0 :                     ; d0.l - locate(lyr,x,y) / 00|Layer|X|Y
(1) 1326/     AC0 :                     ; d1.l - mapsize(x,y) / Width|Height (in cells)
(1) 1327/     AC0 :                     ; d2.l - VRAM cell increment
(1) 1328/     AC0 :                     ;
(1) 1329/     AC0 :                     ; Breaks:
(1) 1330/     AC0 :                     ; d4-d7/a6
(1) 1331/     AC0 :                     ; --------------------------------------------------------
(1) 1332/     AC0 :                     
(1) 1333/     AC0 :                     Video_LoadMap:
(1) 1334/     AC0 : 4DF9 00C0 0000      		lea	(vdp_data),a6
(1) 1335/     AC6 : 6100 01B6           		bsr	vid_PickLayer
(1) 1336/     ACA : 3801                		move.w	d1,d4			; Start here
(1) 1337/     ACC :                     .yloop:
(1) 1338/     ACC : 4844                		swap	d4
(1) 1339/     ACE : 2D45 0004           		move.l	d5,4(a6)
(1) 1340/     AD2 : 2E01                		move.l	d1,d7
(1) 1341/     AD4 : 4847                		swap	d7
(1) 1342/     AD6 :                     .xloop:
(1) 1343/     AD6 : 3818                		move.w	(a0)+,d4
(1) 1344/     AD8 : 0C44 FFFF           		cmpi.w	#-1,d4			; -1 ? TODO
(1) 1345/     ADC : 6606                		bne.s	.nonull
(1) 1346/     ADE : 383C 07FF           		move.w	#varNullVram,d4		; Replace with custom blank tile
(1) 1347/     AE2 : 6002                		bra.s	.cont
(1) 1348/     AE4 :                     .nonull:
(1) 1349/     AE4 : D842                		add.w	d2,d4
(1) 1350/     AE6 :                     .cont:
(1) 1351/     AE6 :                     	; Check for double interlace
(1) 1352/     AE6 : 4847                		swap	d7
(1) 1353/     AE8 : 1E38 BE02           		move.b	(RAM_VdpRegs+$C).w,d7
(1) 1354/     AEC : 0247 0006           		andi.w	#%110,d7
(1) 1355/     AF0 : 0C47 0006           		cmpi.w	#%110,d7
(1) 1356/     AF4 : 660E                		bne.s	.nodble
(1) 1357/     AF6 : 3E04                		move.w	d4,d7
(1) 1358/     AF8 : E24F                		lsr.w	#1,d7
(1) 1359/     AFA : 0247 07FF           		andi.w	#$7FF,d7
(1) 1360/     AFE : 0244 F800           		andi.w	#$F800,d4
(1) 1361/     B02 : 8847                		or.w	d7,d4
(1) 1362/     B04 :                     .nodble:
(1) 1363/     B04 : 4847                		swap	d7
(1) 1364/     B06 : 3C84                		move.w	d4,(a6)
(1) 1365/     B08 : 51CF FFCC           		dbf	d7,.xloop
(1) 1366/     B0C : DA86                		add.l	d6,d5
(1) 1367/     B0E : 4844                		swap	d4
(1) 1368/     B10 : 51CC FFBA           		dbf	d4,.yloop
(1) 1369/     B14 : 4E75                		rts
(1) 1370/     B16 :                     
(1) 1371/     B16 :                     ; ; --------------------------------------------------------
(1) 1372/     B16 :                     ; ; Video_LoadMap_Vert
(1) 1373/     B16 :                     ; ;
(1) 1374/     B16 :                     ; ; Load map data, Vertical order
(1) 1375/     B16 :                     ; ;
(1) 1376/     B16 :                     ; ; a0 - Map data
(1) 1377/     B16 :                     ; ; d0 | LONG - 00|Lyr|X|Y,  locate(lyr,x,y)
(1) 1378/     B16 :                     ; ; d1 | LONG - Width|Height (cells),  mapsize(x,y)
(1) 1379/     B16 :                     ; ; d2 | WORD - VRAM
(1) 1380/     B16 :                     ;
(1) 1381/     B16 :                     ; ; Breaks:
(1) 1382/     B16 :                     ; ; a4-a5,d4-d7
(1) 1383/     B16 :                     ; ; --------------------------------------------------------
(1) 1384/     B16 :                     ;
(1) 1385/     B16 :                     ; Video_LoadMap_Vert:
(1) 1386/     B16 :                     ; 		lea	(vdp_data),a4
(1) 1387/     B16 :                     ; 		bsr	vid_PickLayer
(1) 1388/     B16 :                     ; 		move.l	d1,d5		; Start here
(1) 1389/     B16 :                     ; 		swap	d5
(1) 1390/     B16 :                     ; .xloop:
(1) 1391/     B16 :                     ; 		swap	d5
(1) 1392/     B16 :                     ; 		move.l	d4,-(sp)
(1) 1393/     B16 :                     ; 		move.w	d1,d7
(1) 1394/     B16 :                     ; 		btst	#2,(RAM_VdpRegs+$C).w
(1) 1395/     B16 :                     ; 		beq.s	.yloop
(1) 1396/     B16 :                     ; 		lsr.w	#1,d7
(1) 1397/     B16 :                     ; .yloop:
(1) 1398/     B16 :                     ; 		move.l	d4,4(a4)
(1) 1399/     B16 :                     ; 		move.w	(a0),d5
(1) 1400/     B16 :                     ; 		cmpi.w	#-1,d5
(1) 1401/     B16 :                     ; 		bne.s	.nonull
(1) 1402/     B16 :                     ; 		move.w	#varNullVram,d5
(1) 1403/     B16 :                     ; 		bra.s	.cont
(1) 1404/     B16 :                     ; .nonull:
(1) 1405/     B16 :                     ; 		add.w	d2,d5
(1) 1406/     B16 :                     ; .cont:
(1) 1407/     B16 :                     ; 		swap	d7
(1) 1408/     B16 :                     ; 		adda	#2,a0
(1) 1409/     B16 :                     ; 		btst	#2,(RAM_VdpRegs+$C).w
(1) 1410/     B16 :                     ; 		beq.s	.nodble
(1) 1411/     B16 :                     ; 		adda	#2,a0
(1) 1412/     B16 :                     ; 		move.w	d5,d7
(1) 1413/     B16 :                     ; 		lsr.w	#1,d7
(1) 1414/     B16 :                     ; 		andi.w	#$7FF,d7
(1) 1415/     B16 :                     ; 		andi.w	#$F800,d5
(1) 1416/     B16 :                     ; 		or.w	d7,d5
(1) 1417/     B16 :                     ; .nodble:
(1) 1418/     B16 :                     ; 		swap	d7
(1) 1419/     B16 :                     ; 		move.w	d5,(a4)
(1) 1420/     B16 :                     ; 		add.l	d6,d4
(1) 1421/     B16 :                     ; 		dbf	d7,.yloop
(1) 1422/     B16 :                     ; .outdbl:
(1) 1423/     B16 :                     ; 		move.l	(sp)+,d4
(1) 1424/     B16 :                     ; 		add.l	#$20000,d4
(1) 1425/     B16 :                     ; 		swap	d5
(1) 1426/     B16 :                     ; 		dbf	d5,.xloop
(1) 1427/     B16 :                     ; 		rts
(1) 1428/     B16 :                     
(1) 1429/     B16 :                     ; ====================================================================
(1) 1430/     B16 :                     ; ----------------------------------------------------------------
(1) 1431/     B16 :                     ; Text PRINT system, for debugging or quick texts.
(1) 1432/     B16 :                     ; ----------------------------------------------------------------
(1) 1433/     B16 :                     
(1) 1434/     B16 :                     ; --------------------------------------------------------
(1) 1435/     B16 :                     ; Video_PrintInit
(1) 1436/     B16 :                     ;
(1) 1437/     B16 :                     ; Initializes the default Graphics and Palette
(1) 1438/     B16 :                     ; for the font.
(1) 1439/     B16 :                     ;
(1) 1440/     B16 :                     ; Input:
(1) 1441/     B16 :                     ; a0 | ASCII Graphics location
(1) 1442/     B16 :                     ; a1 | ASCII Palette
(1) 1443/     B16 :                     ;
(1) 1444/     B16 :                     ; Breaks:
(1) 1445/     B16 :                     ; ALL
(1) 1446/     B16 :                     ;
(1) 1447/     B16 :                     ; Notes:
(1) 1448/     B16 :                     ; * Requires ASCII font graphics starting from $20
(1) 1449/     B16 :                     ; (" ") to $7F ("[DEL]")
(1) 1450/     B16 :                     ; * CALL THIS ONLY IF DISPLAY IS OFF OR DURING VBLANK
(1) 1451/     B16 :                     ; * 32X: MAKE SURE SH2 IS NOT READING ROM DATA
(1) 1452/     B16 :                     ; --------------------------------------------------------
(1) 1453/     B16 :                     
(1) 1454/     B16 :                     Video_PrintInit:
(1) 1455/     B16 :                     ; 		lea	(ASCII_FONT).l,a0
(1) 1456/     B16 :                     ; 		lea	(ASCII_PAL).l,a1
(1) 1457/     B16 : 2008                		move.l	a0,d0
(1) 1458/     B18 : 323C B000           		move.w	#cell_vram(varPrintVram),d1
(1) 1459/     B1C : 343C 0C00           		move.w	#($60*$20),d2			; From " " to "[DEL]"
(1) 1460/     B20 : 363C 6580           		move.w	#(varPrintPal<<13)|varPrintVram,d3
(1) 1461/     B24 : 0443 0020           		subi.w	#$20,d3
(1) 1462/     B28 : 31C3 BDE2           		move.w	d3,(RAM_VidPrntVram).w
(1) 1463/     B2C : 6100 FDEE           		bsr	Video_LoadArt
(1) 1464/     B30 :                     Video_PrintPal:
(1) 1465/     B30 : 2049                		movea.l	a1,a0
(1) 1466/     B32 : 7030                		moveq	#(varPrintPal<<4),d0
(1) 1467/     B34 : 323C 000F           		move.w	#$0F,d1
(1) 1468/     B38 : 6100 FAD0           		bsr	Video_LoadPal	; Write to both palette buffers
(1) 1469/     B3C : 6000 FAC2           		bra	Video_FadePal
(1) 1470/     B40 :                     
(1) 1471/     B40 :                     ; --------------------------------------------------------
(1) 1472/     B40 :                     ; Video_Print
(1) 1473/     B40 :                     ;
(1) 1474/     B40 :                     ; Prints string to layer
(1) 1475/     B40 :                     ;
(1) 1476/     B40 :                     ; Input:
(1) 1477/     B40 :                     ; a0   - String data w/special characters +
(1) 1478/     B40 :                     ;        list of RAM locations to read
(1) 1479/     B40 :                     ; d0.l - Print location on-screen: locate(layer,x,y)
(1) 1480/     B40 :                     ;        ( 00|Lyr|X|Y )
(1) 1481/     B40 :                     ;
(1) 1482/     B40 :                     ; Breaks:
(1) 1483/     B40 :                     ; d4-d7,a4-a6
(1) 1484/     B40 :                     ;
(1) 1485/     B40 :                     ; Notes:
(1) 1486/     B40 :                     ; CALL Video_PrintInit FIRST
(1) 1487/     B40 :                     ;
(1) 1488/     B40 :                     ; Text string special codes:
(1) 1489/     B40 :                     ; $00 - End of line
(1) 1490/     B40 :                     ; $0A - Next line
(1) 1491/     B40 :                     ; "//b" - Show BYTE value
(1) 1492/     B40 :                     ; "//w" - Show WORD value
(1) 1493/     B40 :                     ; "//l" - Show LONG value
(1) 1494/     B40 :                     ;
(1) 1495/     B40 :                     ; If using //b //w //l:
(1) 1496/     B40 :                     ; After $00, put your RAM addresses in LONGS in the
(1) 1497/     B40 :                     ; same order you placed your value tags, don't forget to
(1) 1498/     B40 :                     ; put "align 2" at the end of the string or it will
(1) 1499/     B40 :                     ; trigger and ADDRESS ERROR
(1) 1500/     B40 :                     ; --------------------------------------------------------
(1) 1501/     B40 :                     
(1) 1502/     B40 :                     ; TODO: negative values might break
(1) 1503/     B40 :                     
(1) 1504/     B40 :                     Video_Print:
(1) 1505/     B40 : 48E7 0F0E           		movem.l	d4-d7/a4-a6,-(sp)
(1) 1506/     B44 : 4DF9 00C0 0000      		lea	(vdp_data).l,a6
(1) 1507/     B4A : 6100 0132           		bsr	vid_PickLayer
(1) 1508/     B4E : 4BF8 BC54           		lea	(RAM_VidPrntList).w,a5
(1) 1509/     B52 :                     .newjump:
(1) 1510/     B52 : 2D45 0004           		move.l	d5,4(a6)
(1) 1511/     B56 : 2805                		move.l	d5,d4
(1) 1512/     B58 :                     .loop:
(1) 1513/     B58 : 1E18                		move.b	(a0)+,d7
(1) 1514/     B5A : 0247 00FF           		andi.w	#$FF,d7
(1) 1515/     B5E : 676C                		beq	.exit
(1) 1516/     B60 : 0C07 000A           		cmpi.b	#$0A,d7			; $0A - next line?
(1) 1517/     B64 : 672C                		beq.s	.next
(1) 1518/     B66 : 0C07 005C           		cmpi.b	#$5C,d7			; $5C ("\") special?
(1) 1519/     B6A : 6618                		bne.s	.puttext
(1) 1520/     B6C : 1E18                		move.b	(a0)+,d7		; Read next chr
(1) 1521/     B6E : 0C07 0062           		cmpi.b	#"b",d7
(1) 1522/     B72 : 6722                		beq.s	.isbyte
(1) 1523/     B74 : 0C07 0077           		cmpi.b	#"w",d7
(1) 1524/     B78 : 672E                		beq.s	.isword
(1) 1525/     B7A : 0C07 006C           		cmpi.b	#"l",d7
(1) 1526/     B7E : 673A                		beq.s	.islong
(1) 1527/     B80 : 3E3C 005C           		move.w	#"\\",d7		; normal "\"
(1) 1528/     B84 :                     .puttext:
(1) 1529/     B84 : DE78 BDE2           		add.w	(RAM_VidPrntVram).w,d7	; VRAM pos increment
(1) 1530/     B88 : 3C87                		move.w	d7,(a6)
(1) 1531/     B8A : 0684 0002 0000      		addi.l	#$20000,d4
(1) 1532/     B90 : 60C6                		bra.s	.loop
(1) 1533/     B92 :                     .next:
(1) 1534/     B92 : DA86                		add.l	d6,d5			; Next line
(1) 1535/     B94 : 60BC                		bra.s	.newjump
(1) 1536/     B96 :                     
(1) 1537/     B96 :                     	; Set print values
(1) 1538/     B96 :                     .isbyte:
(1) 1539/     B96 : 2AC4                		move.l	d4,(a5)+
(1) 1540/     B98 : 3AFC 0001           		move.w	#1,(a5)+
(1) 1541/     B9C : 0684 0004 0000      		addi.l	#$40000,d4
(1) 1542/     BA2 : 2D44 0004           		move.l	d4,4(a6)
(1) 1543/     BA6 : 60B0                		bra	.loop
(1) 1544/     BA8 :                     .isword:
(1) 1545/     BA8 : 2AC4                		move.l	d4,(a5)+
(1) 1546/     BAA : 3AFC 0002           		move.w	#2,(a5)+
(1) 1547/     BAE : 0684 0008 0000      		addi.l	#$80000,d4
(1) 1548/     BB4 : 2D44 0004           		move.l	d4,4(a6)
(1) 1549/     BB8 : 609E                		bra	.loop
(1) 1550/     BBA :                     .islong:
(1) 1551/     BBA : 2AC4                		move.l	d4,(a5)+
(1) 1552/     BBC : 3AFC 0003           		move.w	#3,(a5)+
(1) 1553/     BC0 : 0684 0010 0000      		addi.l	#$100000,d4
(1) 1554/     BC6 : 2D44 0004           		move.l	d4,4(a6)
(1) 1555/     BCA : 608C                		bra	.loop
(1) 1556/     BCC :                     .exit:
(1) 1557/     BCC :                     
(1) 1558/     BCC :                     	; ----------------------------------------
(1) 1559/     BCC :                     	; Print values
(1) 1560/     BCC :                     	;
(1) 1561/     BCC :                     	; vvvv vvvv tttt
(1) 1562/     BCC :                     	; v - vdp pos
(1) 1563/     BCC :                     	; t - value type
(1) 1564/     BCC :                     	; ----------------------------------------
(1) 1565/     BCC :                     
(1) 1566/     BCC :                     	; reading byte by byte because longs doesn't get
(1) 1567/     BCC :                     	; aligned after $00...
(1) 1568/     BCC :                     
(1) 1569/     BCC : 7800                		moveq	#0,d4
(1) 1570/     BCE : 7A00                		moveq	#0,d5
(1) 1571/     BD0 : 7C00                		moveq	#0,d6
(1) 1572/     BD2 : 4BF8 BC54           		lea	(RAM_VidPrntList).w,a5
(1) 1573/     BD6 :                     .nextv:
(1) 1574/     BD6 : 4A95                		tst.l	(a5)
(1) 1575/     BD8 : 6700 009E           		beq	.nothing
(1) 1576/     BDC :                     
(1) 1577/     BDC :                     	; grab value
(1) 1578/     BDC : 7800                		moveq	#0,d4
(1) 1579/     BDE : 1818                		move.b	(a0)+,d4
(1) 1580/     BE0 : E19C                		rol.l	#8,d4
(1) 1581/     BE2 : 1818                		move.b	(a0)+,d4
(1) 1582/     BE4 : E19C                		rol.l	#8,d4
(1) 1583/     BE6 : 1818                		move.b	(a0)+,d4
(1) 1584/     BE8 : E19C                		rol.l	#8,d4
(1) 1585/     BEA : 1818                		move.b	(a0)+,d4
(1) 1586/     BEC : 2844                		movea.l	d4,a4
(1) 1587/     BEE : 7800                		moveq	#0,d4
(1) 1588/     BF0 :                     
(1) 1589/     BF0 :                     	; get value
(1) 1590/     BF0 : 3C2D 0004           		move.w	4(a5),d6
(1) 1591/     BF4 : 0C46 0001           		cmpi.w	#1,d6		; byte?
(1) 1592/     BF8 : 660E                		bne.s	.vbyte
(1) 1593/     BFA : 1814                		move.b	(a4),d4
(1) 1594/     BFC : 2D55 0004           		move.l	(a5),4(a6)
(1) 1595/     C00 : E91C                		rol.b	#4,d4
(1) 1596/     C02 : 6158                		bsr.s	.donibl
(1) 1597/     C04 : E91C                		rol.b	#4,d4
(1) 1598/     C06 : 6154                		bsr.s	.donibl
(1) 1599/     C08 :                     .vbyte:
(1) 1600/     C08 : 0C46 0002           		cmpi.w	#2,d6		; word?
(1) 1601/     C0C : 661C                		bne.s	.vword
(1) 1602/     C0E : 1814                		move.b	(a4),d4
(1) 1603/     C10 : E15C                		rol.w	#8,d4
(1) 1604/     C12 : 182C 0001           		move.b	1(a4),d4
(1) 1605/     C16 : 2D55 0004           		move.l	(a5),4(a6)
(1) 1606/     C1A : E95C                		rol.w	#4,d4
(1) 1607/     C1C : 613E                		bsr.s	.donibl
(1) 1608/     C1E : E95C                		rol.w	#4,d4
(1) 1609/     C20 : 613A                		bsr.s	.donibl
(1) 1610/     C22 : E95C                		rol.w	#4,d4
(1) 1611/     C24 : 6136                		bsr.s	.donibl
(1) 1612/     C26 : E95C                		rol.w	#4,d4
(1) 1613/     C28 : 6132                		bsr.s	.donibl
(1) 1614/     C2A :                     .vword:
(1) 1615/     C2A : 0C46 0003           		cmpi.w	#3,d6		; long?
(1) 1616/     C2E : 6624                		bne.s	.vlong
(1) 1617/     C30 : 1814                		move.b	(a4),d4
(1) 1618/     C32 : E19C                		rol.l	#8,d4
(1) 1619/     C34 : 182C 0001           		move.b	1(a4),d4
(1) 1620/     C38 : E19C                		rol.l	#8,d4
(1) 1621/     C3A : 182C 0002           		move.b	2(a4),d4
(1) 1622/     C3E : E19C                		rol.l	#8,d4
(1) 1623/     C40 : 182C 0003           		move.b	3(a4),d4
(1) 1624/     C44 : 2D55 0004           		move.l	(a5),4(a6)
(1) 1625/     C48 : 3C3C 0007           		move.w	#7,d6
(1) 1626/     C4C : E99C                .lngloop:	rol.l	#4,d4
(1) 1627/     C4E : 610C                		bsr.s	.donibl
(1) 1628/     C50 : 51CE FFFA           		dbf	d6,.lngloop
(1) 1629/     C54 :                     .vlong:
(1) 1630/     C54 : 429D                		clr.l	(a5)+
(1) 1631/     C56 : 425D                		clr.w	(a5)+
(1) 1632/     C58 : 6000 FF7C           		bra	.nextv
(1) 1633/     C5C :                     
(1) 1634/     C5C :                     ; make nibble byte
(1) 1635/     C5C :                     .donibl:
(1) 1636/     C5C : 3A04                		move.w	d4,d5
(1) 1637/     C5E : 0245 000F           		andi.w	#%1111,d5
(1) 1638/     C62 : 0C05 000A           		cmpi.b	#$A,d5
(1) 1639/     C66 : 6D04                		blt.s	.lowr
(1) 1640/     C68 : DA3C 0007           		add.b	#7,d5
(1) 1641/     C6C :                     .lowr:
(1) 1642/     C6C : DA7C 0030           		add.w	#"0",d5
(1) 1643/     C70 : DA78 BDE2           		add.w	(RAM_VidPrntVram).w,d5
(1) 1644/     C74 : 3C85                		move.w	d5,(a6)
(1) 1645/     C76 : 4E75                		rts
(1) 1646/     C78 :                     ; exit
(1) 1647/     C78 :                     .nothing:
(1) 1648/     C78 : 4CDF 70F0           		movem.l	(sp)+,d4-d7/a4-a6
(1) 1649/     C7C : 4E75                		rts
(1) 1650/     C7E :                     
(1) 1651/     C7E :                     ; ------------------------------------------------
(1) 1652/     C7E :                     ; Shared: pick layer / x pos / y pos and set size
(1) 1653/     C7E :                     ;
(1) 1654/     C7E :                     ; Input:
(1) 1655/     C7E :                     ; d0.l - locate(layer,x,y)
(1) 1656/     C7E :                     ;
(1) 1657/     C7E :                     ; Returns:
(1) 1658/     C7E :                     ; d5 - VRAM position
(1) 1659/     C7E :                     ; d6 - Width
(1) 1660/     C7E :                     ; ------------------------------------------------
(1) 1661/     C7E :                     
(1) 1662/     C7E :                     vid_PickLayer:
(1) 1663/     C7E : 2C00                		move.l	d0,d6			; d6 - pick layer
(1) 1664/     C80 : 4846                		swap	d6
(1) 1665/     C82 : 0806 0000           		btst	#0,d6
(1) 1666/     C86 : 671C                		beq.s	.plawnd
(1) 1667/     C88 : 1A38 BDFA           		move.b	(RAM_VdpRegs+4).w,d5	; BG
(1) 1668/     C8C : 3805                		move.w	d5,d4
(1) 1669/     C8E : E24C                		lsr.w	#1,d4
(1) 1670/     C90 : 0244 0003           		andi.w	#%11,d4
(1) 1671/     C94 : 4845                		swap	d5
(1) 1672/     C96 : 3A04                		move.w	d4,d5
(1) 1673/     C98 : 4845                		swap	d5
(1) 1674/     C9A : 0245 0001           		andi.w	#1,d5
(1) 1675/     C9E : E14D                		lsl.w	#8,d5
(1) 1676/     CA0 : EB4D                		lsl.w	#5,d5
(1) 1677/     CA2 : 6024                		bra.s	.golyr
(1) 1678/     CA4 :                     .plawnd:
(1) 1679/     CA4 : 1A38 BDF8           		move.b	(RAM_VdpRegs+2).w,d5	; FG
(1) 1680/     CA8 : 0806 0001           		btst	#1,d6
(1) 1681/     CAC : 6704                		beq.s	.nowd
(1) 1682/     CAE : 1A38 BDF9           		move.b	(RAM_VdpRegs+3).w,d5	; WINDOW
(1) 1683/     CB2 :                     .nowd:
(1) 1684/     CB2 : 3805                		move.w	d5,d4
(1) 1685/     CB4 : E84C                		lsr.w	#4,d4
(1) 1686/     CB6 : 0244 0003           		andi.w	#%11,d4
(1) 1687/     CBA : 4845                		swap	d5
(1) 1688/     CBC : 3A04                		move.w	d4,d5
(1) 1689/     CBE : 4845                		swap	d5
(1) 1690/     CC0 : 0245 000E           		andi.w	#%00001110,d5
(1) 1691/     CC4 : E14D                		lsl.w	#8,d5
(1) 1692/     CC6 : E54D                		lsl.w	#2,d5
(1) 1693/     CC8 :                     .golyr:
(1) 1694/     CC8 : 0045 4000           		ori.w	#$4000,d5
(1) 1695/     CCC : 3800                		move.w	d0,d4			; Y start pos
(1) 1696/     CCE : 0244 00FF           		andi.w	#$FF,d4			; Y only
(1) 1697/     CD2 : ED4C                		lsl.w	#6,d4
(1) 1698/     CD4 : 1C38 BE06           		move.b	(RAM_VdpRegs+$10).w,d6
(1) 1699/     CD8 : 0246 0003           		andi.w	#%11,d6
(1) 1700/     CDC : 670A                		beq.s	.thissz
(1) 1701/     CDE : D844                		add.w	d4,d4			; H64
(1) 1702/     CE0 : 0246 0002           		andi.w	#%10,d6
(1) 1703/     CE4 : 6702                		beq.s	.thissz
(1) 1704/     CE6 : D844                		add.w	d4,d4			; H128
(1) 1705/     CE8 :                     .thissz:
(1) 1706/     CE8 : DA44                		add.w	d4,d5
(1) 1707/     CEA : 3800                		move.w	d0,d4
(1) 1708/     CEC : 0244 FF00           		andi.w	#$FF00,d4		; X only
(1) 1709/     CF0 : EE4C                		lsr.w	#7,d4
(1) 1710/     CF2 : DA44                		add.w	d4,d5			; X add
(1) 1711/     CF4 : 4845                		swap	d5
(1) 1712/     CF6 : 7C00                		moveq	#0,d6
(1) 1713/     CF8 : 3C3C 0040           		move.w	#$40,d6			; Set jump size
(1) 1714/     CFC : 1838 BE06           		move.b	(RAM_VdpRegs+$10).w,d4
(1) 1715/     D00 : 0244 0003           		andi.w	#%11,d4
(1) 1716/     D04 : 670A                		beq.s	.thisszj
(1) 1717/     D06 : DC46                		add.w	d6,d6			; H64
(1) 1718/     D08 : 0244 0002           		andi.w	#%10,d4
(1) 1719/     D0C : 6702                		beq.s	.thisszj
(1) 1720/     D0E : DC46                		add.w	d6,d6			; H128
(1) 1721/     D10 :                     .thisszj:
(1) 1722/     D10 : 4846                		swap	d6
(1) 1723/     D12 : 4E75                		rts
(1) 1724/     D14 :                     
(1) 1725/     D14 :                     ; ====================================================================
(1) 1726/     D14 :                     ; ----------------------------------------------------------------
(1) 1727/     D14 :                     ; Objects system
(1) 1728/     D14 :                     ; ----------------------------------------------------------------
(1) 1729/     D14 :                     
(1) 1730/     D14 :                     ; --------------------------------------------------------
(1) 1731/     D14 :                     ; Init objects system
(1) 1732/     D14 :                     ; --------------------------------------------------------
(1) 1733/     D14 :                     
(1) 1734/     D14 :                     Objects_Clear:
(1) 1735/     D14 : 4DF8 B294           		lea	(RAM_Objects).w,a6
(1) 1736/     D18 : 3E3C 098F           		move.w	#(sizeof_mdobj*MAX_MDOBJ)-1,d7
(1) 1737/     D1C :                     .clr:
(1) 1738/     D1C : 421E                		clr.b	(a6)+
(1) 1739/     D1E : 51CF FFFC           		dbf	d7,.clr
(1) 1740/     D22 : 4DF8 BC24           		lea	(RAM_ObjDispList).w,a6
(1) 1741/     D26 : 3E3C 0017           		move.w	#MAX_MDOBJ-1,d7
(1) 1742/     D2A :                     .clr_d:
(1) 1743/     D2A : 425E                		clr.w	(a6)+
(1) 1744/     D2C : 51CF FFFC           		dbf	d7,.clr_d
(1) 1745/     D30 : 31FC 0001 BDDA      		move.w	#1,(RAM_SprLinkNum).w
(1) 1746/     D36 : 4278 BDD8           		clr.w	(RAM_SprDrwCntr).w
(1) 1747/     D3A : 4E75                		rts
(1) 1748/     D3C :                     
(1) 1749/     D3C :                     ; --------------------------------------------------------
(1) 1750/     D3C :                     ; Process objects
(1) 1751/     D3C :                     ; --------------------------------------------------------
(1) 1752/     D3C :                     
(1) 1753/     D3C :                     Objects_Run:
(1) 1754/     D3C : 4DF8 B294           		lea	(RAM_Objects).w,a6
(1) 1755/     D40 : 3E3C 0017           		move.w	#MAX_MDOBJ-1,d7
(1) 1756/     D44 :                     .next_one:
(1) 1757/     D44 : 2C16                		move.l	obj_code(a6),d6
(1) 1758/     D46 : 6708                		beq.s	.no_code	; Free slot
(1) 1759/     D48 : 2F07                		move.l	d7,-(sp)
(1) 1760/     D4A : 2A46                		move.l	d6,a5
(1) 1761/     D4C : 4E95                		jsr	(a5)
(1) 1762/     D4E : 2E1F                		move.l	(sp)+,d7
(1) 1763/     D50 :                     .no_code:
(1) 1764/     D50 : DCFC 0066           		adda	#sizeof_mdobj,a6
(1) 1765/     D54 : 51CF FFEE           		dbf	d7,.next_one
(1) 1766/     D58 : 4E75                		rts
(1) 1767/     D5A :                     
(1) 1768/     D5A :                     ; --------------------------------------------------------
(1) 1769/     D5A :                     ; Objects_Set
(1) 1770/     D5A :                     ;
(1) 1771/     D5A :                     ; Input:
(1) 1772/     D5A :                     ; d0 - Object code location (0 - delete)
(1) 1773/     D5A :                     ; d1 - Object slot
(1) 1774/     D5A :                     ;
(1) 1775/     D5A :                     ; Uses:
(1) 1776/     D5A :                     ; d7,a5-a6
(1) 1777/     D5A :                     ; --------------------------------------------------------
(1) 1778/     D5A :                     
(1) 1779/     D5A :                     Objects_Set:
(1) 1780/     D5A : 4DF8 B294           		lea	(RAM_Objects).w,a6
(1) 1781/     D5E : 2A4E                		move.l	a6,a5
(1) 1782/     D60 : 3E3C 0065           		move.w	#sizeof_mdobj-1,d7
(1) 1783/     D64 :                     .clr:
(1) 1784/     D64 : 421D                		clr.b	(a5)+
(1) 1785/     D66 : 51CF FFFC           		dbf	d7,.clr
(1) 1786/     D6A : 3E01                		move.w	d1,d7
(1) 1787/     D6C : CEFC 0066           		mulu.w	#sizeof_mdobj,d7
(1) 1788/     D70 : DCC7                		adda	d7,a6
(1) 1789/     D72 : 2C80                		move.l	d0,obj_code(a6)
(1) 1790/     D74 : 4DF8 BC24           		lea	(RAM_ObjDispList).w,a6
(1) 1791/     D78 : 3E01                		move.w	d1,d7
(1) 1792/     D7A : DE47                		add.w	d7,d7
(1) 1793/     D7C : 3DBC 0000 7000      		move.w	#0,(a6,d7.w)
(1) 1794/     D82 : 4E75                		rts
(1) 1795/     D84 :                     
(1) 1796/     D84 :                     ; --------------------------------------------------------
(1) 1797/     D84 :                     ; Objects_Add
(1) 1798/     D84 :                     ;
(1) 1799/     D84 :                     ; Returns:
(1) 1800/     D84 :                     ; d0 - -1 if ran out of Objects
(1) 1801/     D84 :                     ; --------------------------------------------------------
(1) 1802/     D84 :                     
(1) 1803/     D84 :                     Objects_Add:
(1) 1804/     D84 : 4DF8 B294           		lea	(RAM_Objects).w,a6
(1) 1805/     D88 : 3E3C 0017           		move.w	#MAX_MDOBJ-1,d7
(1) 1806/     D8C :                     .search:
(1) 1807/     D8C : 2E16                		move.l	obj_code(a6),d7
(1) 1808/     D8E : 670C                		beq.s	.use_it
(1) 1809/     D90 : DCFC 0066           		adda	#sizeof_mdobj,a6
(1) 1810/     D94 : 51CF FFF6           		dbf	d7,.search
(1) 1811/     D98 : 70FF                		moveq	#-1,d0		; Return ran-out flag
(1) 1812/     D9A : 4E75                		rts
(1) 1813/     D9C :                     .use_it:
(1) 1814/     D9C : 2A4E                		move.l	a6,a5
(1) 1815/     D9E : 3E3C 0065           		move.w	#sizeof_mdobj-1,d7
(1) 1816/     DA2 :                     .clr:
(1) 1817/     DA2 : 421D                		clr.b	(a5)+
(1) 1818/     DA4 : 51CF FFFC           		dbf	d7,.clr
(1) 1819/     DA8 : 2C80                		move.l	d0,obj_code(a6)
(1) 1820/     DAA : 4DF8 BC24           		lea	(RAM_ObjDispList).w,a6
(1) 1821/     DAE : 3E01                		move.w	d1,d7
(1) 1822/     DB0 : DE47                		add.w	d7,d7
(1) 1823/     DB2 : 3DBC 0000 7000      		move.w	#0,(a6,d7.w)
(1) 1824/     DB8 : 4E75                		rts
(1) 1825/     DBA :                     
(1) 1826/     DBA :                     ; --------------------------------------------------------
(1) 1827/     DBA :                     ; Draw ALL Objects from display list
(1) 1828/     DBA :                     ;
(1) 1829/     DBA :                     ; Call this BEFORE VBlank.
(1) 1830/     DBA :                     ; --------------------------------------------------------
(1) 1831/     DBA :                     
(1) 1832/     DBA :                     Objects_Show:
(1) 1833/     DBA : 3C38 BDDA           		move.w	(RAM_SprLinkNum).w,d6		; d6 - Starting sprite link
(1) 1834/     DBE : 4DF8 A414           		lea	(RAM_Sprites),a6		; a6 - Genesis sprites
(1) 1835/     DC2 : 3E06                		move.w	d6,d7
(1) 1836/     DC4 : 5347                		subq.w	#1,d7
(1) 1837/     DC6 : E74F                		lsl.w	#3,d7
(1) 1838/     DC8 : DCC7                		adda	d7,a6
(1) 1839/     DCA :                     
(1) 1840/     DCA : 3E38 BDD8           		move.w	(RAM_SprDrwCntr),d7
(1) 1841/     DCE : 6732                		beq.s	.no_sprdrw
(1) 1842/     DD0 : 4278 BDD8           		clr.w	(RAM_SprDrwCntr).w
(1) 1843/     DD4 : 4BF8 A914           		lea	(RAM_SprDrwPz),a5
(1) 1844/     DD8 : 9E7C 0001           		sub.w	#1,d7
(1) 1845/     DDC :                     .nexts:
(1) 1846/     DDC : BC7C 0050           		cmp.w	#80,d6
(1) 1847/     DE0 : 6C20                		bge.s	.no_sprdrw
(1) 1848/     DE2 : 301D                		move.w	(a5)+,d0
(1) 1849/     DE4 : 321D                		move.w	(a5)+,d1	; custom
(1) 1850/     DE6 : C27C 00FF           		and.w	#$FF,d1
(1) 1851/     DEA : E149                		lsl.w	#8,d1
(1) 1852/     DEC : 8246                		or.w	d6,d1
(1) 1853/     DEE : 341D                		move.w	(a5)+,d2
(1) 1854/     DF0 : 361D                		move.w	(a5)+,d3
(1) 1855/     DF2 : 3CC0                		move.w	d0,(a6)+
(1) 1856/     DF4 : 3CC1                		move.w	d1,(a6)+
(1) 1857/     DF6 : 3CC2                		move.w	d2,(a6)+
(1) 1858/     DF8 : 3CC3                		move.w	d3,(a6)+
(1) 1859/     DFA : DC7C 0001           		add.w	#1,d6
(1) 1860/     DFE : 51CF FFDC           		dbf	d7,.nexts
(1) 1861/     E02 :                     .no_sprdrw:
(1) 1862/     E02 :                     
(1) 1863/     E02 :                     ; 		move.w	(RAM_SprLinkNum).w,d6	; d6 - Starting sprite link
(1) 1864/     E02 :                     ; 		lea	(RAM_Sprites).w,a6	; a6 - Genesis sprites
(1) 1865/     E02 : 4BF8 BC24           		lea	(RAM_ObjDispList).w,a5
(1) 1866/     E06 : 3E3C 0017           		move.w	#MAX_MDOBJ-1,d7
(1) 1867/     E0A :                     .next:
(1) 1868/     E0A : 3015                		move.w	(a5),d0
(1) 1869/     E0C : 6700 00AC           		beq	.finish
(1) 1870/     E10 : 4255                		clr.w	(a5)
(1) 1871/     E12 : 72FF                		moveq	#-1,d1			; Write the $FFFFxxxx part
(1) 1872/     E14 : 3200                		move.w	d0,d1			; get the half-address
(1) 1873/     E16 : 2841                		move.l	d1,a4			; set to a4
(1) 1874/     E18 : 206C 000C           		move.l	obj_map(a4),a0		; Read this object's map
(1) 1875/     E1C : 302C 001E           		move.w	obj_frame(a4),d0
(1) 1876/     E20 : 182C 0022           		move.b	obj_set(a4),d4
(1) 1877/     E24 : D040                		add.w	d0,d0
(1) 1878/     E26 : 3030 0000           		move.w	(a0,d0.w),d0
(1) 1879/     E2A : 41F0 0000           		lea	(a0,d0.w),a0
(1) 1880/     E2E : 3A18                		move.w	(a0)+,d5
(1) 1881/     E30 : 6700 0082           		beq	.mk_spr
(1) 1882/     E34 : 0445 0001           		subi.w	#1,d5
(1) 1883/     E38 :                     .mk_pz:
(1) 1884/     E38 : 0C46 0050           		cmpi.w	#80,d6
(1) 1885/     E3C : 6E00 009A           		bgt	.ran_out
(1) 1886/     E40 : 4845                		swap	d5
(1) 1887/     E42 : 4846                		swap	d6
(1) 1888/     E44 : 1018                		move.b	(a0)+,d0		; d0 - Y pos
(1) 1889/     E46 : 1218                		move.b	(a0)+,d1		; d1 - Size
(1) 1890/     E48 : 3418                		move.w	(a0)+,d2		; d2 - VRAM main
(1) 1891/     E4A : D0FC 0002           		adda	#2,a0			; TODO: VRAM double later
(1) 1892/     E4E : 3618                		move.w	(a0)+,d3		; d3 - X pos
(1) 1893/     E50 : 4880                		ext.w	d0
(1) 1894/     E52 :                     
(1) 1895/     E52 :                     	; X/Y flip checks
(1) 1896/     E52 : 3A2C 0014           		move.w	obj_vram(a4),d5
(1) 1897/     E56 : 0804 0001           		btst	#bitobj_flipV,d4
(1) 1898/     E5A : 6714                		beq.s	.vram_v
(1) 1899/     E5C : 4440                		neg.w	d0
(1) 1900/     E5E : 0440 0008           		subi.w	#8,d0
(1) 1901/     E62 : 3C01                		move.w	d1,d6
(1) 1902/     E64 : 0246 0003           		andi.w	#%0011,d6
(1) 1903/     E68 : E74E                		lsl.w	#3,d6
(1) 1904/     E6A : 9046                		sub.w	d6,d0
(1) 1905/     E6C : 0045 1000           		ori.w	#$1000,d5
(1) 1906/     E70 :                     .vram_v:
(1) 1907/     E70 : 0804 0000           		btst	#bitobj_flipH,d4
(1) 1908/     E74 : 6714                		beq.s	.vram_h
(1) 1909/     E76 : 4443                		neg.w	d3
(1) 1910/     E78 : 0443 0008           		subi.w	#8,d3
(1) 1911/     E7C : 3C01                		move.w	d1,d6
(1) 1912/     E7E : 0246 000C           		andi.w	#%1100,d6
(1) 1913/     E82 : DC46                		add.w	d6,d6
(1) 1914/     E84 : 9646                		sub.w	d6,d3
(1) 1915/     E86 : 0045 0800           		ori.w	#$0800,d5
(1) 1916/     E8A :                     .vram_h:
(1) 1917/     E8A : D445                		add.w	d5,d2
(1) 1918/     E8C : D06C 0008           		add.w	obj_y(a4),d0
(1) 1919/     E90 : D66C 0004           		add.w	obj_x(a4),d3
(1) 1920/     E94 : D07C 0080           		add.w	#$80,d0
(1) 1921/     E98 : D67C 0080           		add.w	#$80,d3
(1) 1922/     E9C : 4846                		swap	d6
(1) 1923/     E9E : E149                		lsl.w	#8,d1			; Size + Link
(1) 1924/     EA0 : 8246                		or.w	d6,d1
(1) 1925/     EA2 : 3CC0                		move.w	d0,(a6)+
(1) 1926/     EA4 : 3CC1                		move.w	d1,(a6)+
(1) 1927/     EA6 : 3CC2                		move.w	d2,(a6)+
(1) 1928/     EA8 : 3CC3                		move.w	d3,(a6)+
(1) 1929/     EAA : DC7C 0001           		add.w	#1,d6
(1) 1930/     EAE : 4845                		swap	d5
(1) 1931/     EB0 : 51CD FF86           		dbf	d5,.mk_pz
(1) 1932/     EB4 :                     .mk_spr:
(1) 1933/     EB4 : 425D                		clr.w	(a5)+			; Clear request
(1) 1934/     EB6 : 51CF FF52           		dbf	d7,.next
(1) 1935/     EBA :                     .finish:
(1) 1936/     EBA : 4DF8 A414           		lea	(RAM_Sprites).w,a6
(1) 1937/     EBE : 0C46 0001           		cmpi.w	#1,d6
(1) 1938/     EC2 : 6714                		beq.s	.ran_out
(1) 1939/     EC4 : 0C46 0050           		cmpi.w	#80,d6
(1) 1940/     EC8 : 6E0E                		bgt.s	.ran_out
(1) 1941/     ECA : 3E06                		move.w	d6,d7
(1) 1942/     ECC : 0447 0001           		subi.w	#1,d7
(1) 1943/     ED0 : E74F                		lsl.w	#3,d7
(1) 1944/     ED2 : DCC7                		adda	d7,a6
(1) 1945/     ED4 : 429E                		clr.l	(a6)+
(1) 1946/     ED6 : 429E                		clr.l	(a6)+
(1) 1947/     ED8 :                     .ran_out:
(1) 1948/     ED8 : 31C6 BDDA           		move.w	d6,(RAM_SprLinkNum).w
(1) 1949/     EDC : 4E75                		rts
(1) 1950/     EDE :                     
(1) 1951/     EDE :                     ; --------------------------------------------------------
(1) 1952/     EDE :                     ; Objects system subroutines
(1) 1953/     EDE :                     ; --------------------------------------------------------
(1) 1954/     EDE :                     
(1) 1955/     EDE :                     ; --------------------------------------------------------
(1) 1956/     EDE :                     ; obj_Display
(1) 1957/     EDE :                     ;
(1) 1958/     EDE :                     ; Builds a sprite using map data specified in
(1) 1959/     EDE :                     ; obj_map(a6)
(1) 1960/     EDE :                     ;
(1) 1961/     EDE :                     ; *** GENESIS map ***
(1) 1962/     EDE :                     ; mapdata:
(1) 1963/     EDE :                     ;       dc.w .frame0-mapdata
(1) 1964/     EDE :                     ;       dc.w .frame1-mapdata
(1) 1965/     EDE :                     ;       ...
(1) 1966/     EDE :                     ; .frame0:
(1) 1967/     EDE :                     ;       dc.w numofpz
(1) 1968/     EDE :                     ;       dc.b YY,SS
(1) 1969/     EDE :                     ;       dc.w vram_normal
(1) 1970/     EDE :                     ;       dc.w vram_half
(1) 1971/     EDE :                     ;       dc.w XXXX
(1) 1972/     EDE :                     ;       ; next frame
(1) 1973/     EDE :                     ;       align 2
(1) 1974/     EDE :                     ;
(1) 1975/     EDE :                     ; *** 32X map ***
(1) 1976/     EDE :                     ; mapdata:
(1) 1977/     EDE :                     ; 	dc.l SH2_ADDR|TH ; Spritesheet location (TH opt.)
(1) 1978/     EDE :                     ; 	dc.w 512	 ; Spritesheet WIDTH
(1) 1979/     EDE :                     ; 	dc.b 64,72	 ; Frame width and height
(1) 1980/     EDE :                     ; 	dc.w $80	 ; Palette index
(1) 1981/     EDE :                     ;
(1) 1982/     EDE :                     ; obj_frame(a6) is in YYXX direction
(1) 1983/     EDE :                     ;
(1) 1984/     EDE :                     ; Input:
(1) 1985/     EDE :                     ; a6 - Object
(1) 1986/     EDE :                     ;
(1) 1987/     EDE :                     ; Uses:
(1) 1988/     EDE :                     ; a5,d4-d7
(1) 1989/     EDE :                     ; --------------------------------------------------------
(1) 1990/     EDE :                     
(1) 1991/     EDE :                     object_Display:
(1) 1992/     EDE : 4BF8 BC24           		lea	(RAM_ObjDispList).w,a5
(1) 1993/     EE2 : 3E3C 0017           		move.w	#MAX_MDOBJ-1,d7
(1) 1994/     EE6 :                     .srch:
(1) 1995/     EE6 : 4A55                		tst.w	(a5)
(1) 1996/     EE8 : 6708                		beq.s	.this_one
(1) 1997/     EEA : DAFC 0002           		adda	#2,a5
(1) 1998/     EEE : 51CF FFF6           		dbf	d7,.srch
(1) 1999/     EF2 :                     .this_one:
(1) 2000/     EF2 : 3A8E                		move.w	a6,(a5)
(1) 2001/     EF4 : 4AAE 0010           		tst.l	obj_dma(a6)
(1) 2002/     EF8 : 6750                		beq.s	.no_dma
(1) 2003/     EFA : 206E 0010           		move.l	obj_dma(a6),a0
(1) 2004/     EFE : 2618                		move.l	(a0)+,d3		; d3 - Art data
(1) 2005/     F00 : 382E 001E           		move.w	obj_frame(a6),d4
(1) 2006/     F04 : D844                 		add.w	d4,d4
(1) 2007/     F06 : 3830 4000           		move.w	(a0,d4.w),d4
(1) 2008/     F0A : D0C4                 		adda	d4,a0
(1) 2009/     F0C : 7800                 		moveq	#0,d4
(1) 2010/     F0E : 3818                 		move.w	(a0)+,d4
(1) 2011/     F10 : 6738                 		beq.s	.no_dma
(1) 2012/     F12 : 5344                 		subq.w	#1,d4
(1) 2013/     F14 : 322E 0014           		move.w	obj_vram(a6),d1
(1) 2014/     F18 : 0241 07FF           		andi.w	#$7FF,d1
(1) 2015/     F1C : EB49                		lsl.w	#5,d1
(1) 2016/     F1E : 2F0E                		move.l	a6,-(sp)		; SAVE a6
(1) 2017/     F20 :                     .next_pz:
(1) 2018/     F20 : 4844                		swap	d4
(1) 2019/     F22 : 3818                		move.w	(a0)+,d4
(1) 2020/     F24 : 3404                		move.w	d4,d2
(1) 2021/     F26 : EE4A                		lsr.w	#7,d2
(1) 2022/     F28 : 0242 01E0           		andi.w	#$1E0,d2
(1) 2023/     F2C : D47C 0020           		add.w	#$20,d2
(1) 2024/     F30 : 7000                		moveq	#0,d0
(1) 2025/     F32 : 3004                		move.w	d4,d0
(1) 2026/     F34 : 0240 0FFF           		andi.w	#$FFF,d0
(1) 2027/     F38 : EB48                		lsl.w	#5,d0
(1) 2028/     F3A : D083                		add.l	d3,d0
(1) 2029/     F3C : 6100 F836           		bsr	Video_DmaMkEntry	; kills a6
(1) 2030/     F40 : D242                		add.w	d2,d1
(1) 2031/     F42 : 4844                		swap	d4
(1) 2032/     F44 : 51CC FFDA           		dbf	d4,.next_pz
(1) 2033/     F48 : 2C5F                		move.l	(sp)+,a6
(1) 2034/     F4A :                     .no_dma:
(1) 2035/     F4A : 4E75                		rts
(1) 2036/     F4C :                     
(1) 2037/     F4C :                     ; --------------------------------------------------------
(1) 2038/     F4C :                     ; object_MkSprPz
(1) 2039/     F4C :                     ;
(1) 2040/     F4C :                     ; Makes separate sprite pieces using
(1) 2041/     F4C :                     ;
(1) 2042/     F4C :                     ; Input:
(1) 2043/     F4C :                     ; d0 - X pos
(1) 2044/     F4C :                     ; d1 - Y pos
(1) 2045/     F4C :                     ; d2 - VRAM
(1) 2046/     F4C :                     ; d3 - Size
(1) 2047/     F4C :                     :
(1) 2048/     F4C :                     ; Uses:
(1) 2049/     F4C :                     ; a5,d7
(1) 2050/     F4C :                     ; --------------------------------------------------------
(1) 2051/     F4C :                     
(1) 2052/     F4C :                     object_MkSprPz:
(1) 2053/     F4C : 3E38 BDD8           		move.w	(RAM_SprDrwCntr).w,d7
(1) 2054/     F50 : BE7C 0050           		cmp.w	#80,d7
(1) 2055/     F54 : 6C22                		bge.s	.nope
(1) 2056/     F56 : E74F                		lsl.w	#3,d7
(1) 2057/     F58 : 4BF8 A914           		lea	(RAM_SprDrwPz).w,a5
(1) 2058/     F5C : DAC7                		adda	d7,a5
(1) 2059/     F5E : D07C 0080           		add.w	#$80,d0
(1) 2060/     F62 : D27C 0080           		add.w	#$80,d1
(1) 2061/     F66 : C67C 00FF           		and.w	#$FF,d3
(1) 2062/     F6A :                     ; 		lsl.w	#8,d3
(1) 2063/     F6A : 3AC1                		move.w	d1,(a5)+
(1) 2064/     F6C : 3AC3                		move.w	d3,(a5)+
(1) 2065/     F6E : 3AC2                		move.w	d2,(a5)+
(1) 2066/     F70 : 3AC0                		move.w	d0,(a5)+
(1) 2067/     F72 : 0678 0001 BDD8      		add.w	#1,(RAM_SprDrwCntr).w
(1) 2068/     F78 :                     .nope:
(1) 2069/     F78 : 4E75                		rts
(1) 2070/     F7A :                     
(1) 2071/     F7A :                     ; --------------------------------------------------------
(1) 2072/     F7A :                     ; object_Animate
(1) 2073/     F7A :                     ;
(1) 2074/     F7A :                     ; Animates the sprite
(1) 2075/     F7A :                     ;
(1) 2076/     F7A :                     ; Input
(1) 2077/     F7A :                     ; a0.l - Animation data
(1) 2078/     F7A :                     ;
(1) 2079/     F7A :                     ; Uses:
(1) 2080/     F7A :                     ; d2
(1) 2081/     F7A :                     ; --------------------------------------------------------
(1) 2082/     F7A :                     
(1) 2083/     F7A :                     object_Animate:
(1) 2084/     F7A : 7E00                		moveq	#0,d7
(1) 2085/     F7C : 1E2E 001D            		move.b	obj_anim_id+1(a6),d7
(1) 2086/     F80 : BE2E 001C            		cmp.b	obj_anim_id(a6),d7
(1) 2087/     F84 : 670E                 		beq.s	.sameThing
(1) 2088/     F86 : 1D6E 001C 001D       		move.b	obj_anim_id(a6),obj_anim_id+1(a6)
(1) 2089/     F8C : 426E 001A            		clr.w	obj_anim_indx(a6)
(1) 2090/     F90 : 422E 0020            		clr.b	obj_anim_spd(a6)
(1) 2091/     F94 :                     .sameThing:
(1) 2092/     F94 : 1E2E 001C            		move.b	obj_anim_id(a6),d7
(1) 2093/     F98 : 0C07 00FF            		cmpi.b	#-1,d7
(1) 2094/     F9C : 6748                 		beq.s	.return
(1) 2095/     F9E : DE47                 		add.w	d7,d7
(1) 2096/     FA0 : 3E30 7000            		move.w	(a0,d7.w),d7
(1) 2097/     FA4 : 41F0 7000            		lea	(a0,d7.w),a0
(1) 2098/     FA8 : 3E18                 		move.w	(a0)+,d7
(1) 2099/     FAA : 0C47 FFFF            		cmpi.w	#-1,d7
(1) 2100/     FAE : 670C                 		beq.s	.keepspd
(1) 2101/     FB0 : 042E 0001 0020       		subi.b	#1,obj_anim_spd(a6)
(1) 2102/     FB6 : 6A2E                 		bpl.s	.return
(1) 2103/     FB8 : 1D47 0020           		move.b	d7,obj_anim_spd(a6)
(1) 2104/     FBC :                     .keepspd:
(1) 2105/     FBC : 7C00                 		moveq	#0,d6
(1) 2106/     FBE : 3E2E 001A            		move.w	obj_anim_indx(a6),d7
(1) 2107/     FC2 : DE47                 		add.w	d7,d7
(1) 2108/     FC4 : 3C10                 		move.w	(a0),d6
(1) 2109/     FC6 : D0C7                 		adda	d7,a0
(1) 2110/     FC8 : 3A10                 		move.w	(a0),d5
(1) 2111/     FCA : 0C45 FFFF            		cmpi.w	#-1,d5
(1) 2112/     FCE : 6718                 		beq.s	.noAnim		; loop
(1) 2113/     FD0 : 0C45 FFFE            		cmpi.w	#-2,d5
(1) 2114/     FD4 : 672A                 		beq.s	.lastFrame	; finish
(1) 2115/     FD6 : 0C45 FFFD            		cmpi.w	#-3,d5
(1) 2116/     FDA : 671A                 		beq.s	.goToFrame
(1) 2117/     FDC : 3D45 001E            		move.w	d5,obj_frame(a6)
(1) 2118/     FE0 : 066E 0001 001A       		add.w	#1,obj_anim_indx(a6)
(1) 2119/     FE6 :                     .return:
(1) 2120/     FE6 : 4E75                 		rts
(1) 2121/     FE8 :                     .noAnim:
(1) 2122/     FE8 : 3D7C 0001 001A       		move.w	#1,obj_anim_indx(a6)
(1) 2123/     FEE : 3A06                 		move.w	d6,d5
(1) 2124/     FF0 : 3D45 001E            		move.w	d5,obj_frame(a6)
(1) 2125/     FF4 : 4E75                		rts
(1) 2126/     FF6 :                     .goToFrame:
(1) 2127/     FF6 : 426E 001A           		clr.w	obj_anim_indx(a6)
(1) 2128/     FFA : 3D68 0002 001A      		move.w	2(a0),obj_anim_indx(a6)
(1) 2129/    1000 :                     .lastFrame:
(1) 2130/    1000 : 422E 0020            		clr.b	obj_anim_spd(a6)
(1) 2131/    1004 : 4E75                		rts
(1) 2132/    1006 :                     
(1) 2133/    1006 :                     ; --------------------------------------------------------
(1) 2134/    1006 :                     ; object_AnimReset
(1) 2135/    1006 :                     ;
(1) 2136/    1006 :                     ; Call this BEFORE using animation
(1) 2137/    1006 :                     ;
(1) 2138/    1006 :                     ; Input:
(1) 2139/    1006 :                     ; a6 - Object
(1) 2140/    1006 :                     ;
(1) 2141/    1006 :                     ; Uses:
(1) 2142/    1006 :                     ; d7
(1) 2143/    1006 :                     ; --------------------------------------------------------
(1) 2144/    1006 :                     
(1) 2145/    1006 :                     object_AnimReset:
(1) 2146/    1006 : 426E 001A            		clr.w	obj_anim_indx(a6)
(1) 2147/    100A : 422E 0020            		clr.b	obj_anim_spd(a6)
(1) 2148/    100E : 1D7C 0000 001D      		move.b	#0,obj_anim_id+1(a6)
(1) 2149/    1014 : 4E75                		rts
(1) 2150/    1016 :                     
(1) 2151/    1016 :                     ; --------------------------------------------------------
(1) 2152/    1016 :                     ; object_Speed
(1) 2153/    1016 :                     ;
(1) 2154/    1016 :                     ; Moves the object using speed variables
(1) 2155/    1016 :                     ;
(1) 2156/    1016 :                     ; Input:
(1) 2157/    1016 :                     ; a6 - Object
(1) 2158/    1016 :                     ;
(1) 2159/    1016 :                     ; Uses:
(1) 2160/    1016 :                     ; d7
(1) 2161/    1016 :                     ; --------------------------------------------------------
(1) 2162/    1016 :                     
(1) 2163/    1016 :                     object_Speed:
(1) 2164/    1016 : 7E00                		moveq	#0,d7
(1) 2165/    1018 : 3E2E 0016           		move.w	obj_x_spd(a6),d7
(1) 2166/    101C : 48C7                		ext.l	d7
(1) 2167/    101E : E187                		asl.l	#8,d7
(1) 2168/    1020 : DFAE 0004           		add.l	d7,obj_x(a6)
(1) 2169/    1024 : 7E00                		moveq	#0,d7
(1) 2170/    1026 : 3E2E 0018           		move.w	obj_y_spd(a6),d7
(1) 2171/    102A : 48C7                		ext.l	d7
(1) 2172/    102C : E187                		asl.l	#8,d7
(1) 2173/    102E : DFAE 0008           		add.l	d7,obj_y(a6)
(1) 2174/    1032 : 4E75                		rts
(1) 2175/    1034 :                     
(1) 2176/    1034 :                     ; ====================================================================
(1) 2177/    1034 :                     ; ----------------------------------------------------------------
(1) 2178/    1034 :                     ; 32X ONLY
(1) 2179/    1034 :                     ; ----------------------------------------------------------------
(1) 2180/    1034 :                     
(1) 2285/    1034 :                     
     203/    1034 :                     		include	"system/md/system.asm"
(1)    1/    1034 :                     ; ====================================================================
(1)    2/    1034 :                     ; ----------------------------------------------------------------
(1)    3/    1034 :                     ; Genesis system routines, and some SegaCD and 32X routines.
(1)    4/    1034 :                     ;
(1)    5/    1034 :                     ; * CAN BE RECYCLED FOR SEGA PICO, ONLY IGNORE Z80 ACCESS OR
(1)    6/    1034 :                     ; THE CONTROL ROUTINE **
(1)    7/    1034 :                     ; ----------------------------------------------------------------
(1)    8/    1034 :                     
(1)    9/    1034 :                     ; ====================================================================
(1)   10/    1034 :                     ; ----------------------------------------------------------------
(1)   11/    1034 :                     ; Settings
(1)   12/    1034 :                     ; ----------------------------------------------------------------
(1)   13/    1034 :                     
(1)   14/    1034 : =$400                MAX_SRAMSIZE	equ $400
(1)   15/    1034 :                     
(1)   16/    1034 :                     ; ====================================================================
(1)   17/    1034 :                     ; ----------------------------------------------------------------
(1)   18/    1034 :                     ; Variables
(1)   19/    1034 :                     ; ----------------------------------------------------------------
(1)   20/    1034 :                     
(1)   21/    1034 :                     ; Controller buffer data, MUST call System_Input on VBlank.
(1)   22/    1034 :                     ;
(1)   23/    1034 :                     ; Type/Revision byte:
(1)   24/    1034 :                     ;
(1)   25/    1034 :                     ; ID    |
(1)   26/    1034 :                     ; $0D   | $00 - Original 3 button
(1)   27/    1034 :                     ;       | $01 - 6 button version: XYZM
(1)   28/    1034 :                     
(1)   29/    1034 :                     ; Read WORD in +on_hold or +on_press
(1)   30/    1034 : =$1                  JoyUp		equ $0001
(1)   31/    1034 : =$2                  JoyDown		equ $0002
(1)   32/    1034 : =$4                  JoyLeft		equ $0004
(1)   33/    1034 : =$8                  JoyRight	equ $0008
(1)   34/    1034 : =$10                 JoyB		equ $0010
(1)   35/    1034 : =$20                 JoyC		equ $0020
(1)   36/    1034 : =$40                 JoyA		equ $0040
(1)   37/    1034 : =$80                 JoyStart	equ $0080
(1)   38/    1034 : =$100                JoyZ		equ $0100
(1)   39/    1034 : =$200                JoyY		equ $0200
(1)   40/    1034 : =$400                JoyX		equ $0400
(1)   41/    1034 : =$800                JoyMode		equ $0800
(1)   42/    1034 : =$0                  bitJoyUp	equ 0		; READ THESE AS A WORD
(1)   43/    1034 : =$1                  bitJoyDown	equ 1
(1)   44/    1034 : =$2                  bitJoyLeft	equ 2
(1)   45/    1034 : =$3                  bitJoyRight	equ 3
(1)   46/    1034 : =$4                  bitJoyB		equ 4
(1)   47/    1034 : =$5                  bitJoyC		equ 5
(1)   48/    1034 : =$6                  bitJoyA		equ 6
(1)   49/    1034 : =$7                  bitJoyStart	equ 7
(1)   50/    1034 : =$8                  bitJoyZ		equ 8
(1)   51/    1034 : =$9                  bitJoyY		equ 9
(1)   52/    1034 : =$A                  bitJoyX		equ 10
(1)   53/    1034 : =$B                  bitJoyMode	equ 11
(1)   54/    1034 :                     
(1)   55/    1034 :                     ; Mega Mouse
(1)   56/    1034 :                     ; Read WORD as +on_hold or +on_press
(1)   57/    1034 : =$1                  ClickR		equ $0001
(1)   58/    1034 : =$2                  ClickL		equ $0002
(1)   59/    1034 : =$4                  ClickM		equ $0004	; US MOUSE ONLY
(1)   60/    1034 : =$8                  ClickS		equ $0008	; (Untested)
(1)   61/    1034 : =$0                  bitClickL	equ 0
(1)   62/    1034 : =$1                  bitClickR	equ 1
(1)   63/    1034 : =$2                  bitClickM	equ 2
(1)   64/    1034 : =$3                  bitClickS	equ 3
(1)   65/    1034 :                     
(1)   66/    1034 :                     ; Controller_1 / Controller_2
(1)   67/    1034 : (MACRO)              		strct 0
(1)   67/    1034 : =$1034               GLBL_LASTPC     set *
(1)   67/FFFFFFFFFFFFAB96 :                                     dephase
(1)   67/       0 :                                     phase 0
(1)   67/       0 : =$0                  GLBL_LASTORG    set *
(1)   68/       0 :                     pad_id		ds.b 1			; Controller ID
(1)   69/       1 :                     pad_ver		ds.b 1			; Controller type/revision
(1)   70/       2 :                     on_hold		ds.w 1			; User HOLD bits
(1)   71/       4 :                     on_press	ds.w 1			; User PRESSED bits
(1)   72/       6 :                     on_release	ds.w 1			; (RESERVED)
(1)   73/       8 :                     mouse_x		ds.w 1			; Mouse/Pen X position or speed
(1)   74/       A :                     mouse_y		ds.w 1			; Mouse/pen Y position or speed
(1)   75/       C :                     ext_3		ds.w 1
(1)   76/       E :                     ext_4		ds.w 1
(1)   77/      10 :                     sizeof_input	ds.l 0
(1)   78/      10 : (MACRO)              		endstrct
(1)   78/       0 :                                     org GLBL_LASTORG
(1)   78/    1034 :                                     phase GLBL_LASTPC
(1)   79/    1034 :                     
(1)   80/    1034 :                     ; ====================================================================
(1)   81/    1034 :                     ; ----------------------------------------------------------------
(1)   82/    1034 :                     ; RAM section
(1)   83/    1034 :                     ; ----------------------------------------------------------------
(1)   84/    1034 :                     
(1)   85/    1034 : (MACRO)              		strct RAM_MdSystem
(1)   85/    1034 : =$1034               GLBL_LASTPC     set *
(1)   85/       0 :                                     dephase
(1)   85/FFFFFFFFFFFFC004 :                                     phase RAM_MDSYSTEM
(1)   85/FFFFFFFFFFFFC004 : =$FFFFFFFFFFFFC004   GLBL_LASTORG    set *
(1)   86/FFFFFFFFFFFFC004 :                     RAM_InputData	ds.b sizeof_input*4		; Input data section
(1)   87/FFFFFFFFFFFFC044 :                     RAM_SaveData	ds.b MAX_SRAMSIZE		; Read/Write of the SAVE data
(1)   88/FFFFFFFFFFFFC444 :                     RAM_SysRandVal	ds.l 1				; Random value
(1)   89/FFFFFFFFFFFFC448 :                     RAM_SysRandSeed	ds.l 1				; Randomness seed
(1)   90/FFFFFFFFFFFFC44C :                     RAM_MdMarsVInt	ds.w 3				; VBlank jump (JMP xxxx xxxx)
(1)   91/FFFFFFFFFFFFC452 :                     RAM_MdMarsHint	ds.w 3				; HBlank jump (JMP xxxx xxxx)
(1)   92/FFFFFFFFFFFFC458 :                     RAM_ScreenMode	ds.w 1
(1)   93/FFFFFFFFFFFFC45A :                     sizeof_mdsys	ds.l 0
(1)   94/FFFFFFFFFFFFC460 : (MACRO)              		endstrct
(1)   94/FFFFFFFFFFFFC004 :                                     org GLBL_LASTORG
(1)   94/    1034 :                                     phase GLBL_LASTPC
(1)   95/    1034 : (MACRO)              		erreport "MD SYSTEM RAM",sizeof_mdsys-RAM_MdSystem,MAX_MdSystem
(1)   96/    1034 :                     
(1)   97/    1034 :                     ; ====================================================================
(1)   98/    1034 :                     ; ----------------------------------------------------------------
(1)   99/    1034 :                     ; Alias labels
(1)  100/    1034 :                     ; ----------------------------------------------------------------
(1)  101/    1034 :                     
(1)  102/    1034 : =$FFFFFFFFFFFFC004   Controller_1	equ RAM_InputData
(1)  103/    1034 : =$FFFFFFFFFFFFC014   Controller_2	equ RAM_InputData+sizeof_input
(1)  104/    1034 :                     
(1)  105/    1034 :                     ; ====================================================================
(1)  106/    1034 :                     ; --------------------------------------------------------
(1)  107/    1034 :                     ; Init System
(1)  108/    1034 :                     ; 
(1)  109/    1034 :                     ; Uses:
(1)  110/    1034 :                     ; a0-a2,d0-d1
(1)  111/    1034 :                     ; --------------------------------------------------------
(1)  112/    1034 :                     
(1)  113/    1034 :                     System_Init:
(1)  114/    1034 : 007C 0700           		or.w	#$0700,sr
(1)  116/    1038 : 33FC 0100 00A1      		move.w	#$0100,(z80_bus).l	; Stop Z80
             103E : 1100             
(1)  117/    1040 :                     .wait:
(1)  118/    1040 : 0839 0000 00A1      		btst	#0,(z80_bus).l		; Wait for it
             1046 : 1100             
(1)  119/    1048 : 66F6                		bne.s	.wait
(1)  120/    104A : 7040                		moveq	#%01000000,d0		; Init ports, TH=1
(1)  121/    104C : 13C0 00A1 0009      		move.b	d0,(sys_ctrl_1).l	; Controller 1
(1)  122/    1052 : 13C0 00A1 000B      		move.b	d0,(sys_ctrl_2).l	; Controller 2
(1)  123/    1058 : 13C0 00A1 000D      		move.b	d0,(sys_ctrl_3).l	; Modem
(1)  124/    105E : 33FC 0000 00A1      		move.w	#0,(z80_bus).l		; Enable Z80
             1064 : 1100             
(1)  126/    1066 : 303C 4EF9           		move.w	#$4EF9,d0		; Set JMP opcode for the Hblank/VBlank jumps
(1)  127/    106A : 31C0 C44C            		move.w	d0,(RAM_MdMarsVInt).w
(1)  128/    106E : 31C0 C452           		move.w	d0,(RAM_MdMarsHInt).w
(1)  129/    1072 : 203C 0000 1560      		move.l	#VInt_Default,d0	; Set default ints
(1)  130/    1078 : 223C 0000 1576      		move.l	#Hint_Default,d1
(1)  131/    107E : 6100 039C           		bsr	System_SetInts
(1)  132/    1082 : 41F8 C004           		lea	(RAM_InputData),a0	; Clear input data buffer
(1)  133/    1086 : 323C 0007           		move.w	#(sizeof_input/2)-1,d1
(1)  134/    108A : 7000                		moveq	#0,d0
(1)  135/    108C :                     .clrinput:
(1)  136/    108C : 30C0                		move.w	d0,(a0)+
(1)  137/    108E : 51C9 FFFC           		dbf	d1,.clrinput
(1)  138/    1092 : 203C 5625 5769      		move.l	#$56255769,d0		; Set these random values
(1)  139/    1098 : 223C 9511 6102      		move.l	#$95116102,d1
(1)  140/    109E : 23C0 FFFF C444      		move.l	d0,(RAM_SysRandVal).l
(1)  141/    10A4 : 23C1 FFFF C448      		move.l	d1,(RAM_SysRandSeed).l
(1)  145/    10AA : 027C F8FF           		andi.w	#$F8FF,sr
(1)  146/    10AE : 6000 037E           		bra	System_SramInit
(1)  147/    10B2 :                     
(1)  148/    10B2 :                     ; --------------------------------------------------------
(1)  149/    10B2 :                     ; System_Render
(1)  150/    10B2 :                     ;
(1)  151/    10B2 :                     ; Call this on the loop your current screen.
(1)  152/    10B2 :                     ; ** VDP DISPLAY MUST BE ON TO USE THIS **
(1)  153/    10B2 :                     ;
(1)  154/    10B2 :                     ; This will:
(1)  155/    10B2 :                     ; - Update the sound driver for any changes that
(1)  156/    10B2 :                     ;   need communication with 68K
(1)  157/    10B2 :                     ; - Build the object sprites
(1)  158/    10B2 :                     ; - 32X/CD32X:
(1)  159/    10B2 :                     ;   Update the DREQ data
(1)  160/    10B2 :                     ;
(1)  161/    10B2 :                     ; On VBLANK:
(1)  162/    10B2 :                     ; - Update the input data
(1)  163/    10B2 :                     ; - Transfer the Genesis palette, sprites and scroll
(1)  164/    10B2 :                     ;   data from from RAM to VDP
(1)  165/    10B2 :                     ;   (32X: RV bit is not required.)
(1)  166/    10B2 :                     ; - Process the DMA BLAST list (32X: Uses RV bit)
(1)  167/    10B2 :                     ; --------------------------------------------------------
(1)  168/    10B2 :                     
(1)  169/    10B2 :                     System_Render:
(1)  170/    10B2 : 1E38 BDF7           		move.b	(RAM_VdpRegs+1).w,d7
(1)  171/    10B6 : 0807 0006           		btst	#bitDispEnbl,d7
(1)  172/    10BA : 673A                		beq.s	.forgot_disp		; <-- Failsafe
(1)  173/    10BC :                     .wait_lag:
(1)  174/    10BC : 6100 F21A           		bsr	Sound_Update		; Syncronize/Update sound on lag
(1)  175/    10C0 : 3E39 00C0 0004      		move.w	(vdp_ctrl).l,d7		; Got here during VBlank?
(1)  176/    10C6 : 0807 0003           		btst	#bitVBlk,d7		; If yes, drop frame
(1)  177/    10CA : 66F0                		bne.s	.wait_lag
(1)  178/    10CC : 6100 F20A           		bsr	Sound_Update
(1)  179/    10D0 : 6100 FCE8           		bsr	Objects_Show		; Build sprite data from Objects
(1)  180/    10D4 :                     .wait_in:
(1)  181/    10D4 : 6100 F202           		bsr	Sound_Update		; Syncronize/Update sound during Display
(1)  182/    10D8 : 3E39 00C0 0004      		move.w	(vdp_ctrl).l,d7		; Wait until VBlank
(1)  183/    10DE : 0807 0003           		btst	#bitVBlk,d7
(1)  184/    10E2 : 67F0                		beq.s	.wait_in
(1)  185/    10E4 : 6122                		bsr	System_Input		; Read input data FIRST
(1)  186/    10E6 : 6100 F8E8           		bsr	Video_Render		; Render visuals
(1)  187/    10EA : 6100 F1EC           		bsr	Sound_Update
(1)  188/    10EE : 52B8 BDD4           		addq.l	#1,(RAM_Framecount).w
(1)  192/    10F2 : 6100 F1E4           		bsr	Sound_Update
(1)  193/    10F6 :                     .forgot_disp:
(1)  194/    10F6 : 4E75                		rts
(1)  195/    10F8 :                     
(1)  196/    10F8 :                     ; --------------------------------------------------------
(1)  197/    10F8 :                     ; System_DmaEnter_(from) and System_DmaEnter_(from)
(1)  198/    10F8 :                     ; ROM or RAM
(1)  199/    10F8 :                     ;
(1)  200/    10F8 :                     ; Call to these labels BEFORE and AFTER doing
(1)  201/    10F8 :                     ; DMA-to-VDP transers, these calls are NOT
(1)  202/    10F8 :                     ; required for FILL or COPY
(1)  203/    10F8 :                     ;
(1)  204/    10F8 :                     ; This is where you put your Sound driver's Z80 stop
(1)  205/    10F8 :                     ; or pause calls go here.
(1)  206/    10F8 :                     ; --------------------------------------------------------
(1)  207/    10F8 :                     
(1)  208/    10F8 :                     System_DmaEnter_RAM:
(1)  209/    10F8 : 6000 F2B6           		bra	gemaDmaPause
(1)  210/    10FC :                     System_DmaExit_RAM:
(1)  211/    10FC : 6000 F2D4           		bra	gemaDmaResume
(1)  212/    1100 :                     
(1)  213/    1100 :                     ; --------------------------------------------------------
(1)  214/    1100 :                     
(1)  215/    1100 :                     System_DmaEnter_ROM:
(1)  216/    1100 : 6000 F2EA           		bra	gemaDmaPauseRom
(1)  217/    1104 :                     System_DmaExit_ROM:
(1)  218/    1104 : 6000 F308           		bra	gemaDmaResumeRom
(1)  219/    1108 :                     
(1)  220/    1108 :                     ; ====================================================================
(1)  221/    1108 :                     ; ----------------------------------------------------------------
(1)  222/    1108 :                     ; Subroutines
(1)  223/    1108 :                     ; ----------------------------------------------------------------
(1)  224/    1108 :                     
(1)  225/    1108 :                     ; --------------------------------------------------------
(1)  226/    1108 :                     ; System_Input
(1)  227/    1108 :                     ;
(1)  228/    1108 :                     ; Reads data from the Controller ports
(1)  229/    1108 :                     ; *** CALL THIS ON VBLANK ONLY ***
(1)  230/    1108 :                     ;
(1)  231/    1108 :                     ; Uses:
(1)  232/    1108 :                     ; d5-d7,a5-a6
(1)  233/    1108 :                     ; --------------------------------------------------------
(1)  234/    1108 :                     
(1)  235/    1108 :                     System_Input:
(1)  236/    1108 :                     
(1)  237/    1108 :                     	; ----------------------------------------
(1)  238/    1108 :                     	; PICO input is hard-coded to Controller_1
(1)  239/    1108 :                     	;
(1)  240/    1108 :                     	; on_hold/on_press:
(1)  241/    1108 :                     	; %P00BRLDU
(1)  242/    1108 :                     	; UDLR - Arrows
(1)  243/    1108 :                     	;    B - BIG button red
(1)  244/    1108 :                     	;    P - Pen press/click
(1)  245/    1108 :                     	;
(1)  246/    1108 :                     	; mouse_x/mouse_y:
(1)  247/    1108 :                     	; Pen X/Y position
(1)  248/    1108 :                     	; depen
(1)  249/    1108 :                     	; ----------------------------------------
(1)  296/    1108 :                     	; ----------------------------------------
(1)  297/    1108 :                     	; Normal controls
(1)  298/    1108 : 4DF8 C004           		lea	(RAM_InputData).w,a6	; a6 - Output
(1)  299/    110C : 4BF9 00A1 0003      		lea	(sys_data_1),a5		; a5 - BASE Genesis Input regs area
(1)  300/    1112 : 6108                		bsr.s	.this_one
(1)  301/    1114 : DAFC 0002           		adda	#2,a5
(1)  302/    1118 : DCFC 0010           		adda	#sizeof_input,a6
(1)  303/    111C :                     
(1)  304/    111C :                     ; --------------------------------------------------------
(1)  305/    111C :                     ; Read port
(1)  306/    111C :                     ;
(1)  307/    111C :                     ; a5 - Current port
(1)  308/    111C :                     ; a6 - Output data
(1)  309/    111C :                     ; --------------------------------------------------------
(1)  310/    111C :                     
(1)  311/    111C :                     .this_one:
(1)  312/    111C : 6100 0166           		bsr	.pick_id
(1)  313/    1120 : 1C87                		move.b	d7,pad_id(a6)
(1)  314/    1122 : 0C47 000F           		cmpi.w	#$0F,d7
(1)  315/    1126 : 670E                		beq.s	.exit
(1)  316/    1128 : 0247 000F           		andi.w	#$0F,d7
(1)  317/    112C : DE47                		add.w	d7,d7
(1)  318/    112E : 3C3B 700C           		move.w	.list(pc,d7.w),d6
(1)  319/    1132 : 4EFB 6008           		jmp	.list(pc,d6.w)
(1)  320/    1136 :                     .exit:
(1)  321/    1136 : 422E 0001           		clr.b	pad_ver(a6)
(1)  322/    113A : 4E75                		rts
(1)  323/    113C :                     
(1)  324/    113C :                     ; --------------------------------------------------------
(1)  325/    113C :                     ; Grab ID
(1)  326/    113C :                     ; --------------------------------------------------------
(1)  327/    113C :                     
(1)  328/    113C :                     .list:
(1)  329/    113C : FFFA                		dc.w .exit-.list	; $00
(1)  330/    113E : FFFA                		dc.w .exit-.list
(1)  331/    1140 : FFFA                		dc.w .exit-.list
(1)  332/    1142 : 0020                		dc.w .id_03-.list	; $03 - Mega mouse
(1)  333/    1144 : FFFA                		dc.w .exit-.list	; $04
(1)  334/    1146 : FFFA                		dc.w .exit-.list
(1)  335/    1148 : FFFA                		dc.w .exit-.list
(1)  336/    114A : FFFA                		dc.w .exit-.list
(1)  337/    114C : FFFA                		dc.w .exit-.list	; $08
(1)  338/    114E : FFFA                		dc.w .exit-.list
(1)  339/    1150 : FFFA                		dc.w .exit-.list
(1)  340/    1152 : FFFA                		dc.w .exit-.list
(1)  341/    1154 : FFFA                		dc.w .exit-.list	; $0C
(1)  342/    1156 : 00CA                		dc.w .id_0D-.list	; $0D - Genesis controller (3 or 6 button)
(1)  343/    1158 : FFFA                		dc.w .exit-.list
(1)  344/    115A : FFFA                		dc.w .exit-.list	; $0F - No controller OR Master System controller (2 Buttons: 1(B),2(C))
(1)  345/    115C :                     
(1)  346/    115C :                     ; --------------------------------------------------------
(1)  347/    115C :                     ; ID $03
(1)  348/    115C :                     ;
(1)  349/    115C :                     ; Mega Mouse
(1)  350/    115C :                     ; --------------------------------------------------------
(1)  351/    115C :                     
(1)  352/    115C :                     ; *** NOT TESTED ON HARDWARE ***
(1)  353/    115C :                     .id_03:
(1)  354/    115C : 1ABC 0020           		move.b	#$20,(a5)
(1)  355/    1160 : 1B7C 0060 0006      		move.b	#$60,6(a5)
(1)  356/    1166 : 0815 0004           		btst	#4,(a5)
(1)  357/    116A : 6700 0094           		beq.w	.invalid
(1)  358/    116E : 1ABC 0000           		move.b	#$00,(a5)	; $0F
(1)  359/    1172 : 4E71                		nop
(1)  360/    1174 : 4E71                		nop
(1)  361/    1176 : 1ABC 0020           		move.b	#$20,(a5)	; $0F
(1)  362/    117A : 4E71                		nop
(1)  363/    117C : 4E71                		nop
(1)  364/    117E : 1ABC 0000           		move.b	#$00,(a5)	; Yo | Xo | Ys | Xs
(1)  365/    1182 : 4E71                		nop
(1)  366/    1184 : 4E71                		nop
(1)  367/    1186 : 1A15                		move.b	(a5),d5		; d5 - X/Y direction bits (Ys Xs)
(1)  368/    1188 : 1ABC 0020           		move.b	#$20,(a5)	; C | M | R | L
(1)  369/    118C : 4E71                		nop
(1)  370/    118E : 4E71                		nop
(1)  371/    1190 : 1E15                		move.b	(a5),d7
(1)  372/    1192 : 0247 000F            		andi.w	#%1111,d7
(1)  373/    1196 : 3C2E 0002           		move.w	on_hold(a6),d6
(1)  374/    119A : BF46                		eor.w	d7,d6
(1)  375/    119C : 3D47 0002           		move.w	d7,on_hold(a6)
(1)  376/    11A0 : CC47                		and.w	d7,d6
(1)  377/    11A2 : 3D46 0004           		move.w	d6,on_press(a6)
(1)  378/    11A6 : 1ABC 0000           		move.b	#$00,(a5)	; X7 | X6 | X5 | X4
(1)  379/    11AA : 4E71                		nop
(1)  380/    11AC : 4E71                		nop
(1)  381/    11AE : 1E15                		move.b	(a5),d7
(1)  382/    11B0 : 1ABC 0020           		move.b	#$20,(a5)	; X3 | X2 | X1 | X0
(1)  383/    11B4 : 0247 000F           		andi.w	#%1111,d7
(1)  384/    11B8 : E94F                		lsl.w	#4,d7
(1)  385/    11BA : 4E71                		nop
(1)  386/    11BC : 1C15                		move.b	(a5),d6
(1)  387/    11BE : 0246 000F           		andi.w	#%1111,d6
(1)  388/    11C2 : 8E46                		or.w	d6,d7
(1)  389/    11C4 : 0805 0000           		btst    #0,d5
(1)  390/    11C8 : 6704                		beq.s	.x_neg
(1)  391/    11CA : 4407                		neg.b	d7
(1)  392/    11CC : 4447                		neg.w	d7
(1)  393/    11CE :                     .x_neg:
(1)  394/    11CE : 3D47 0008           		move.w	d7,mouse_x(a6)
(1)  395/    11D2 : 1ABC 0000           		move.b	#$00,(a5)	; Y7 | Y6 | Y5 | Y4
(1)  396/    11D6 : 4E71                		nop
(1)  397/    11D8 : 4E71                		nop
(1)  398/    11DA : 1E15                		move.b	(a5),d7
(1)  399/    11DC : 1ABC 0020           		move.b	#$20,(a5)	; Y3 | Y2 | Y1 | Y0
(1)  400/    11E0 : 0247 000F           		andi.w	#%1111,d7
(1)  401/    11E4 : E94F                		lsl.w	#4,d7
(1)  402/    11E6 : 4E71                		nop
(1)  403/    11E8 : 1C15                		move.b	(a5),d6
(1)  404/    11EA : 0246 000F           		andi.w	#%1111,d6
(1)  405/    11EE : 8E46                		or.w	d6,d7
(1)  406/    11F0 : 0805 0001           		btst    #1,d5
(1)  407/    11F4 : 6704                		beq.s	.y_neg
(1)  408/    11F6 : 4407                		neg.b	d7
(1)  409/    11F8 : 4447                		neg.w	d7
(1)  410/    11FA :                     .y_neg:
(1)  411/    11FA : 4447                		neg.w	d7		; Reverse Y
(1)  412/    11FC : 3D47 000A           		move.w	d7,mouse_y(a6)
(1)  413/    1200 :                     
(1)  414/    1200 :                     .invalid:
(1)  415/    1200 : 1ABC 0060           		move.b	#$60,(a5)
(1)  416/    1204 : 4E75                		rts
(1)  417/    1206 :                     
(1)  418/    1206 :                     ; --------------------------------------------------------
(1)  419/    1206 :                     ; ID $0D
(1)  420/    1206 :                     ;
(1)  421/    1206 :                     ; Normal controller: 3 button or 6 button.
(1)  422/    1206 :                     ; --------------------------------------------------------
(1)  423/    1206 :                     
(1)  424/    1206 :                     .id_0D:
(1)  425/    1206 : 1ABC 0040           		move.b	#$40,(a5)	; Show CB|RLDU
(1)  426/    120A : 4E71                		nop
(1)  427/    120C : 4E71                		nop
(1)  428/    120E : 1A15                		move.b	(a5),d5
(1)  429/    1210 : 0245 003F           		andi.w	#%00111111,d5
(1)  430/    1214 : 1ABC 0000           		move.b	#$00,(a5)	; Show SA|RLDU
(1)  431/    1218 : 4E71                		nop
(1)  432/    121A : 4E71                		nop
(1)  433/    121C : 1E15                		move.b	(a5),d7		; The following flips are for
(1)  434/    121E : E54F                		lsl.w	#2,d7		; the 6pad's internal counter:
(1)  435/    1220 : 0247 00C0           		andi.w	#%11000000,d7
(1)  436/    1224 : 8E45                		or.w	d5,d7
(1)  437/    1226 : 1ABC 0040           		move.b	#$40,(a5)	; Show CB|RLDU (2)
(1)  438/    122A : 4647                		not.w	d7
(1)  439/    122C : 1A2E 0003           		move.b	on_hold+1(a6),d5
(1)  440/    1230 : BF05                		eor.b	d7,d5
(1)  441/    1232 : 1ABC 0000           		move.b	#$00,(a5)	; Show SA|RLDU (3)
(1)  442/    1236 : 1D47 0003           		move.b	d7,on_hold+1(a6)
(1)  443/    123A : CA07                		and.b	d7,d5
(1)  444/    123C : 1D45 0005           		move.b	d5,on_press+1(a6)
(1)  445/    1240 : 1ABC 0040           		move.b	#$40,(a5)	; 6 button responds (4)
(1)  446/    1244 : 4E71                		nop
(1)  447/    1246 : 4E71                		nop
(1)  448/    1248 : 1E15                		move.b	(a5),d7		; Grab ??|MXYZ
(1)  449/    124A : 1ABC 0000            		move.b	#$00,(a5)	; (5)
(1)  450/    124E : 4E71                  		nop
(1)  451/    1250 : 4E71                  		nop
(1)  452/    1252 : 1C15                 		move.b	(a5),d6		; Type: $03 old, $0F new
(1)  453/    1254 : 1ABC 0040            		move.b	#$40,(a5)	; (6)
(1)  454/    1258 : 4E71                 		nop
(1)  455/    125A : 4E71                 		nop
(1)  456/    125C : 0246 000F           		andi.w	#$F,d6
(1)  457/    1260 : E44E                		lsr.w	#2,d6
(1)  458/    1262 : 0246 0001           		andi.w	#1,d6
(1)  459/    1266 : 6716                		beq.s	.oldpad
(1)  460/    1268 : 4607                		not.b	d7
(1)  461/    126A : 0247 000F            		andi.w	#%1111,d7
(1)  462/    126E : 1A2E 0002           		move.b	on_hold(a6),d5
(1)  463/    1272 : BF05                		eor.b	d7,d5
(1)  464/    1274 : 1D47 0002           		move.b	d7,on_hold(a6)
(1)  465/    1278 : CA07                		and.b	d7,d5
(1)  466/    127A : 1D45 0004           		move.b	d5,on_press(a6)
(1)  467/    127E :                     .oldpad:
(1)  468/    127E : 1D46 0001           		move.b	d6,pad_ver(a6)
(1)  469/    1282 : 4E75                		rts
(1)  470/    1284 :                     
(1)  471/    1284 :                     ; --------------------------------------------------------
(1)  472/    1284 :                     ; Grab ID
(1)  473/    1284 :                     ; --------------------------------------------------------
(1)  474/    1284 :                     
(1)  475/    1284 :                     .pick_id:
(1)  476/    1284 : 7E00                		moveq	#0,d7
(1)  477/    1286 : 1ABC 0070           		move.b	#%01110000,(a5)		; TH=1,TR=1,TL=1
(1)  478/    128A : 4E71                		nop
(1)  479/    128C : 4E71                		nop
(1)  480/    128E : 610A                		bsr	.read
(1)  481/    1290 : 1ABC 0030           		move.b	#%00110000,(a5)		; TH=0,TR=1,TL=1
(1)  482/    1294 : 4E71                		nop
(1)  483/    1296 : 4E71                		nop
(1)  484/    1298 : DE47                		add.w	d7,d7
(1)  485/    129A :                     .read:
(1)  486/    129A : 1A15                		move.b	(a5),d5
(1)  487/    129C : 1C05                		move.b	d5,d6
(1)  488/    129E : 0206 000C           		andi.b	#%1100,d6
(1)  489/    12A2 : 6702                		beq.s	.step_1
(1)  490/    12A4 : 5247                		addq.w	#1,d7
(1)  491/    12A6 :                     .step_1:
(1)  492/    12A6 : DE47                		add.w	d7,d7
(1)  493/    12A8 : 1C05                		move.b	d5,d6
(1)  494/    12AA : 0246 0003           		andi.w	#%0011,d6
(1)  495/    12AE : 6702                		beq.s	.step_2
(1)  496/    12B0 : 5247                		addq.w	#1,d7
(1)  497/    12B2 :                     .step_2:
(1)  498/    12B2 : 4E75                		rts
(1)  500/    12B4 :                     
(1)  501/    12B4 :                     ; --------------------------------------------------------
(1)  502/    12B4 :                     ; System_Random
(1)  503/    12B4 :                     ;
(1)  504/    12B4 :                     ; Makes a random number.
(1)  505/    12B4 :                     ;
(1)  506/    12B4 :                     ; Input:
(1)  507/    12B4 :                     ; d0 | Seed
(1)  508/    12B4 :                     ;
(1)  509/    12B4 :                     ; Output:
(1)  510/    12B4 :                     ; d0 | LONG
(1)  511/    12B4 :                     ;
(1)  512/    12B4 :                     ; Uses:
(1)  513/    12B4 :                     ; d4-d5
(1)  514/    12B4 :                     ; --------------------------------------------------------
(1)  515/    12B4 :                     
(1)  516/    12B4 :                     System_Random:
(1)  517/    12B4 : 2F04                		move.l	d4,-(sp)
(1)  518/    12B6 : 2838 C448           		move.l	(RAM_SysRandSeed).w,d4
(1)  519/    12BA : 6606                		bne.s	.good_s
(1)  520/    12BC : 283C 23B5 1947      		move.l	#$23B51947,d4
(1)  521/    12C2 :                     .good_s:
(1)  522/    12C2 : 2004                		move.l	d4,d0
(1)  523/    12C4 : EB9C                		rol.l	#5,d4
(1)  524/    12C6 : D880                		add.l	d0,d4
(1)  525/    12C8 : E644                		asr.w	#3,d4
(1)  526/    12CA : D880                		add.l	d0,d4
(1)  527/    12CC : 3004                		move.w	d4,d0
(1)  528/    12CE : 4844                		swap	d4
(1)  529/    12D0 : D044                		add.w	d4,d0
(1)  530/    12D2 : 3800                		move.w	d0,d4
(1)  531/    12D4 : 4844                		swap	d4
(1)  532/    12D6 : 21C4 C448           		move.l	d4,(RAM_SysRandSeed).w
(1)  533/    12DA : 281F                		move.l	(sp)+,d4
(1)  534/    12DC : 4E75                		rts
(1)  535/    12DE :                     
(1)  536/    12DE :                     ; --------------------------------------------------------
(1)  537/    12DE :                     ; System_SineWave_Cos / System_SineWave
(1)  538/    12DE :                     ;
(1)  539/    12DE :                     ; Get sinewave value
(1)  540/    12DE :                     ;
(1)  541/    12DE :                     ; Input:
(1)  542/    12DE :                     ; d0 | WORD - Tan
(1)  543/    12DE :                     ; d1 | WORD - Multiply
(1)  544/    12DE :                     ;
(1)  545/    12DE :                     ; Output:
(1)  546/    12DE :                     ; d2 | LONG - Result (as 0000.0000)
(1)  547/    12DE :                     ; --------------------------------------------------------
(1)  548/    12DE :                     
(1)  549/    12DE :                     System_SineWave_Cos:
(1)  550/    12DE : 48A7 8000           		movem.w	d0,-(sp)
(1)  551/    12E2 : 7400                		moveq	#0,d2
(1)  552/    12E4 : 0600 0040           		addi.b	#$40,d0
(1)  553/    12E8 : 1400                		move.b	d0,d2
(1)  554/    12EA : E302                		asl.b	#1,d2
(1)  555/    12EC : 343B 202E           		move.w	MdSys_SineData(pc,d2.w),d2
(1)  556/    12F0 : C4C1                		mulu.w	d1,d2
(1)  557/    12F2 : 8000                		or.b	d0,d0
(1)  558/    12F4 : 6A02                		bpl.s	.dont_neg
(1)  559/    12F6 : 4482                		neg.l	d2
(1)  560/    12F8 :                     .dont_neg:
(1)  561/    12F8 : 4C9F 0001           		movem.w	(sp)+,d0
(1)  562/    12FC : 4E75                		rts
(1)  563/    12FE :                     
(1)  564/    12FE :                     System_SineWave:
(1)  565/    12FE : 48A7 8000           		movem.w	d0,-(sp)
(1)  566/    1302 : 0240 007F           		andi.w	#$7F,d0
(1)  567/    1306 : E340                		asl.w	#1,d0
(1)  568/    1308 : 343B 0012           		move.w	MdSys_SineData(pc,d0.w),d2
(1)  569/    130C : C4C1                		mulu.w	d1,d2
(1)  570/    130E : 4C9F 0001           		movem.w	(sp)+,d0
(1)  571/    1312 : 5182                		subq.l	#8,d2
(1)  572/    1314 : 8000                		or.b	d0,d0
(1)  573/    1316 : 6A02                		bpl.s	.dont_neg
(1)  574/    1318 : 4482                		neg.l	d2
(1)  575/    131A :                     .dont_neg:
(1)  576/    131A : 4E75                		rts
(1)  577/    131C :                     
(1)  578/    131C : 0000 0006 000D      MdSys_SineData:	dc.w 0,	6, $D, $13, $19, $1F, $26, $2C,	$32, $38, $3E
             1322 : 0013 0019 001F 
             1328 : 0026 002C 0032 
             132E : 0038 003E          
(1)  579/    1332 : 0044 004A 0050      		dc.w $44, $4A, $50, $56, $5C, $62, $68,	$6D, $73, $79
             1338 : 0056 005C 0062 
             133E : 0068 006D 0073 
             1344 : 0079             
(1)  580/    1346 : 007E 0084 0089      		dc.w $7E, $84, $89, $8E, $93, $98, $9D,	$A2, $A7, $AC
             134C : 008E 0093 0098 
             1352 : 009D 00A2 00A7 
             1358 : 00AC             
(1)  581/    135A : 00B1 00B5 00B9      		dc.w $B1, $B5, $B9, $BE, $C2, $C6, $CA,	$CE, $D1, $D5
             1360 : 00BE 00C2 00C6 
             1366 : 00CA 00CE 00D1 
             136C : 00D5             
(1)  582/    136E : 00D8 00DC 00DF      		dc.w $D8, $DC, $DF, $E2, $E5, $E7, $EA,	$ED, $EF, $F1
             1374 : 00E2 00E5 00E7 
             137A : 00EA 00ED 00EF 
             1380 : 00F1             
(1)  583/    1382 : 00F3 00F5 00F7      		dc.w $F3, $F5, $F7, $F8, $FA, $FB, $FC,	$FD, $FE, $FF
             1388 : 00F8 00FA 00FB 
             138E : 00FC 00FD 00FE 
             1394 : 00FF             
(1)  584/    1396 : 00FF 0100 0100      		dc.w $FF, $100,	$100, $100, $100, $100,	$FF, $FF, $FE
             139C : 0100 0100 0100 
             13A2 : 00FF 00FF 00FE    
(1)  585/    13A8 : 00FD 00FC 00FB      		dc.w $FD, $FC, $FB, $FA, $F8, $F7, $F5,	$F3, $F1, $EF
             13AE : 00FA 00F8 00F7 
             13B4 : 00F5 00F3 00F1 
             13BA : 00EF             
(1)  586/    13BC : 00ED 00EA 00E7      		dc.w $ED, $EA, $E7, $E5, $E2, $DF, $DC,	$D8, $D5, $D1
             13C2 : 00E5 00E2 00DF 
             13C8 : 00DC 00D8 00D5 
             13CE : 00D1             
(1)  587/    13D0 : 00CE 00CA 00C6      		dc.w $CE, $CA, $C6, $C2, $BE, $B9, $B5,	$B1, $AC, $A7
             13D6 : 00C2 00BE 00B9 
             13DC : 00B5 00B1 00AC 
             13E2 : 00A7             
(1)  588/    13E4 : 00A2 009D 0098      		dc.w $A2, $9D, $98, $93, $8E, $89, $84,	$7E, $79, $73
             13EA : 0093 008E 0089 
             13F0 : 0084 007E 0079 
             13F6 : 0073             
(1)  589/    13F8 : 006D 0068 0062      		dc.w $6D, $68, $62, $5C, $56, $50, $4A,	$44, $3E, $38
             13FE : 005C 0056 0050 
             1404 : 004A 0044 003E 
             140A : 0038             
(1)  590/    140C : 0032 002C 0026      		dc.w $32, $2C, $26, $1F, $19, $13, $D, 6
             1412 : 001F 0019 0013 
             1418 : 000D 0006          
(1)  591/    141C :                     
(1)  592/    141C :                     ; --------------------------------------------------------
(1)  593/    141C :                     ; System_SetInts
(1)  594/    141C :                     ;
(1)  595/    141C :                     ; Set new interrputs
(1)  596/    141C :                     ;
(1)  597/    141C :                     ; d0 | LONG - VBlank
(1)  598/    141C :                     ; d1 | LONG - HBlank
(1)  599/    141C :                     ;
(1)  600/    141C :                     ; Uses:
(1)  601/    141C :                     ; d4
(1)  602/    141C :                     ;
(1)  603/    141C :                     ; Notes:
(1)  604/    141C :                     ; Writing 0 or a negative number will skip change
(1)  605/    141C :                     ; to the interrupt pointer
(1)  606/    141C :                     ; --------------------------------------------------------
(1)  607/    141C :                     
(1)  608/    141C :                     System_SetInts:
(1)  609/    141C : 2800                		move.l	d0,d4
(1)  610/    141E : 6704                		beq.s	.novint
(1)  614/    1420 : 21C4 C44E            		move.l	d4,(RAM_MdMarsVInt+2).w
(1)  616/    1424 :                     .novint:
(1)  617/    1424 : 2801                		move.l	d1,d4
(1)  618/    1426 : 6704                		beq.s	.nohint
(1)  622/    1428 : 21C4 C454            		move.l	d4,(RAM_MdMarsHInt+2).w
(1)  624/    142C :                     .nohint:
(1)  625/    142C : 4E75                		rts
(1)  626/    142E :                     
(1)  627/    142E :                     ; --------------------------------------------------------
(1)  628/    142E :                     ; System_SramInit
(1)  629/    142E :                     ;
(1)  630/    142E :                     ; Init save data
(1)  631/    142E :                     ;
(1)  632/    142E :                     ; Uses:
(1)  633/    142E :                     ; a4,d4-d5
(1)  634/    142E :                     ; --------------------------------------------------------
(1)  635/    142E :                     
(1)  636/    142E :                     System_SramInit:
(1)  642/    142E :                     
(1)  643/    142E :                     	; Cartridge
(1)  644/    142E : 615E                		bsr	System_SramLoad
(1)  645/    1430 : 0CB8 5341 5645      		cmpi.l	#"SAVE",(RAM_SaveData).w
             1436 : C044             
(1)  646/    1438 : 671A                		beq.s	.dont_clear
(1)  647/    143A : 4DF8 C044           		lea	(RAM_SaveData).w,a6
(1)  648/    143E : 7C00                		moveq	#0,d6
(1)  649/    1440 : 3E3C 03FF           		move.w	#MAX_SRAMSIZE-1,d7
(1)  650/    1444 :                     .clr_sram:
(1)  651/    1444 : 1CC6                		move.b	d6,(a6)+
(1)  652/    1446 : 51CF FFFC           		dbf	d7,.clr_sram
(1)  653/    144A : 21FC 5341 5645      		move.l	#"SAVE",(RAM_SaveData).w
             1450 : C044             
(1)  654/    1452 : 6102                		bsr	System_SramSave
(1)  655/    1454 :                     .dont_clear:
(1)  657/    1454 : 4E75                		rts
(1)  658/    1456 :                     
(1)  659/    1456 :                     ; --------------------------------------------------------
(1)  660/    1456 :                     ; System_SramSave
(1)  661/    1456 :                     ; --------------------------------------------------------
(1)  662/    1456 :                     
(1)  663/    1456 :                     System_SramSave:
(1)  669/    1456 :                     
(1)  670/    1456 :                     	; Cartridge
(1)  671/    1456 : 40C7                		move.w	sr,d7
(1)  672/    1458 : 4847                		swap	d7
(1)  673/    145A : 007C 0700           		ori.w	#$0700,sr
(1)  677/    145E : 13FC 0001 00A1      		move.b	#1,(md_bank_sram).l
             1464 : 30F1             
(1)  678/    1466 : 4DF8 C044           		lea	(RAM_SaveData).w,a6
(1)  679/    146A : 4BF9 0020 0003      		lea	($200003).l,a5
(1)  680/    1470 : 3E3C 01FE           		move.w	#((MAX_SRAMSIZE-2)/2)-1,d7
(1)  681/    1474 :                     .save:
(1)  682/    1474 : 1C1E                		move.b	(a6)+,d6
(1)  683/    1476 : 1A86                		move.b	d6,(a5)
(1)  684/    1478 : DAFC 0002           		adda	#2,a5
(1)  685/    147C : 51CF FFF6           		dbf	d7,.save
(1)  686/    1480 :                     .dont_reset:
(1)  687/    1480 : 13FC 0000 00A1      		move.b	#0,(md_bank_sram).l
             1486 : 30F1             
(1)  691/    1488 : 4847                		swap	d7
(1)  692/    148A : 46C7                		move.w	d7,sr
(1)  694/    148C : 4E75                		rts
(1)  695/    148E :                     
(1)  696/    148E :                     ; --------------------------------------------------------
(1)  697/    148E :                     ; System_SramLoad
(1)  698/    148E :                     ; --------------------------------------------------------
(1)  699/    148E :                     
(1)  700/    148E :                     System_SramLoad:
(1)  706/    148E :                     
(1)  707/    148E :                     	; Cartridge
(1)  708/    148E : 40C7                		move.w	sr,d7
(1)  709/    1490 : 4847                		swap	d7
(1)  710/    1492 : 007C 0700           		ori.w	#$0700,sr
(1)  714/    1496 : 13FC 0001 00A1      		move.b	#1,(md_bank_sram).l
             149C : 30F1             
(1)  715/    149E : 4DF8 C044           		lea	(RAM_SaveData).w,a6
(1)  716/    14A2 : 4BF9 0020 0003      		lea	($200003).l,a5
(1)  717/    14A8 : 3E3C 01FE           		move.w	#((MAX_SRAMSIZE-2)/2)-1,d7
(1)  718/    14AC :                     .load:
(1)  719/    14AC : 1C15                		move.b	(a5),d6
(1)  720/    14AE : 1AC6                		move.b	d6,(a5)+
(1)  721/    14B0 : DAFC 0002           		adda	#2,a5
(1)  722/    14B4 : 51CF FFF6           		dbf	d7,.load
(1)  723/    14B8 :                     .dont_reset:
(1)  724/    14B8 : 13FC 0000 00A1      		move.b	#0,(md_bank_sram).l
             14BE : 30F1             
(1)  728/    14C0 : 4847                		swap	d7
(1)  729/    14C2 : 46C7                		move.w	d7,sr
(1)  731/    14C4 : 4E75                		rts
(1)  732/    14C6 :                     
(1)  733/    14C6 :                     ; ====================================================================
(1)  734/    14C6 :                     ; ----------------------------------------------------------------
(1)  735/    14C6 :                     ; Screen mode subroutines
(1)  736/    14C6 :                     ; ----------------------------------------------------------------
(1)  737/    14C6 :                     
(1)  738/    14C6 :                     ; --------------------------------------------------------
(1)  739/    14C6 :                     ; Initialize current screen mode
(1)  740/    14C6 :                     ;
(1)  741/    14C6 :                     ; MUST call this at the very start of your screen code.
(1)  742/    14C6 :                     ; --------------------------------------------------------
(1)  743/    14C6 :                     
(1)  744/    14C6 :                     Mode_Init:
(1)  745/    14C6 : 007C 0700           		ori.w	#$0700,sr			; Disable interrupts.
(1)  746/    14CA : 13FC 0004 FFFF      		move.b	#$04,(RAM_VdpRegs).l
             14D0 : BDF6             
(1)  747/    14D2 : 13FC 0004 FFFF      		move.b	#$04,(RAM_VdpRegs+1).l
             14D8 : BDF7             
(1)  748/    14DA : 6100 EFF2           		bsr	Video_Update
(1)  749/    14DE : 6100 F040           		bsr	Video_Clear
(1)  750/    14E2 : 6100 F830           		bsr	Objects_Clear
(1)  751/    14E6 : 49F8 1800           		lea	(MAX_ScrnBuff),a4
(1)  752/    14EA : 3A3C 0BFF           		move.w	#(MAX_ScrnBuff/2)-1,d5
(1)  753/    14EE : 7800                		moveq	#0,d4
(1)  754/    14F0 :                     .clr:
(1)  755/    14F0 : 38C4                		move.w	d4,(a4)+
(1)  756/    14F2 : 51CD FFFC           		dbf	d5,.clr
(1)  757/    14F6 : 4E75                		rts
(1)  758/    14F8 :                     
(1)  759/    14F8 :                     ; --------------------------------------------------------
(1)  760/    14F8 :                     ; Syncronized Fade-in/Fade-out for both VDP and SuperVDP
(1)  761/    14F8 :                     ; --------------------------------------------------------
(1)  762/    14F8 :                     
(1)  763/    14F8 :                     Mode_FadeIn:
(1)  764/    14F8 : 6100 F842           		bsr	Objects_Run
(1)  765/    14FC : 31FC 0001 BDE4      		move.w	#1,(RAM_FadeMdReq).w
(1)  766/    1502 : 31FC 0001 BDEC      		move.w	#1,(RAM_FadeMarsReq).w
(1)  767/    1508 : 31FC 0001 BDE6      		move.w	#1,(RAM_FadeMdIncr).w
(1)  768/    150E : 31FC 0002 BDEE      		move.w	#2,(RAM_FadeMarsIncr).w
(1)  769/    1514 : 31FC 0001 BDE8      		move.w	#1,(RAM_FadeMdDelay).w
(1)  770/    151A : 31FC 0000 BDF0      		move.w	#0,(RAM_FadeMarsDelay).w
(1)  771/    1520 :                     .loopw:
(1)  772/    1520 : 6100 FB90           		bsr	System_Render
(1)  773/    1524 : 6100 F0D2           		bsr	Video_RunFade
(1)  774/    1528 : 66F6                		bne.s	.loopw
(1)  775/    152A : 4E75                		rts
(1)  776/    152C :                     
(1)  777/    152C :                     Mode_FadeOut:
(1)  778/    152C : 6100 F80E           		bsr	Objects_Run
(1)  779/    1530 : 31FC 0002 BDE4      		move.w	#2,(RAM_FadeMdReq).w
(1)  780/    1536 : 31FC 0002 BDEC      		move.w	#2,(RAM_FadeMarsReq).w
(1)  781/    153C : 31FC 0001 BDE6      		move.w	#1,(RAM_FadeMdIncr).w
(1)  782/    1542 : 31FC 0002 BDEE      		move.w	#2,(RAM_FadeMarsIncr).w
(1)  783/    1548 : 31FC 0001 BDE8      		move.w	#1,(RAM_FadeMdDelay).w
(1)  784/    154E : 31FC 0000 BDF0      		move.w	#0,(RAM_FadeMarsDelay).w
(1)  785/    1554 :                     .loopw:
(1)  786/    1554 : 6100 FB5C           		bsr	System_Render
(1)  787/    1558 : 6100 F09E           		bsr	Video_RunFade
(1)  788/    155C : 66F6                		bne.s	.loopw
(1)  789/    155E : 4E75                		rts
(1)  790/    1560 :                     
(1)  791/    1560 :                     ; ====================================================================
(1)  792/    1560 :                     ; ----------------------------------------------------------------
(1)  793/    1560 :                     ; Default interrupts
(1)  794/    1560 :                     ; ----------------------------------------------------------------
(1)  795/    1560 :                     
(1)  796/    1560 :                     ; --------------------------------------------------------
(1)  797/    1560 :                     ; VBlank
(1)  798/    1560 :                     ; --------------------------------------------------------
(1)  799/    1560 :                     
(1)  800/    1560 :                     VInt_Default:
(1)  801/    1560 : 48E7 FFFE           		movem.l	d0-a6,-(sp)
(1)  802/    1564 : 6100 FBA2           		bsr	System_Input
(1)  803/    1568 : 06B8 0000 0001      		addi.l	#1,(RAM_FrameCount).w
             156E : BDD4             
(1)  804/    1570 : 4CDF 7FFF           		movem.l	(sp)+,d0-a6
(1)  805/    1574 : 4E73                		rte
(1)  806/    1576 :                     
(1)  807/    1576 :                     ; --------------------------------------------------------
(1)  808/    1576 :                     ; HBlank
(1)  809/    1576 :                     ; --------------------------------------------------------
(1)  810/    1576 :                     
(1)  811/    1576 :                     HInt_Default:
(1)  812/    1576 : 4E73                		rte
(1)  813/    1578 :                     
(1)  814/    1578 :                     ; ====================================================================
(1)  815/    1578 :                     ; ----------------------------------------------------------------
(1)  816/    1578 :                     ; SEGA CD / CD32X ONLY
(1)  817/    1578 :                     ; ----------------------------------------------------------------
(1)  818/    1578 :                     
(1) 1022/    1578 :                     
(1) 1023/    1578 :                     ; ====================================================================
(1) 1024/    1578 :                     ; ----------------------------------------------------------------
(1) 1025/    1578 :                     ; 32X and CD32X ONLY
(1) 1026/    1578 :                     ; ----------------------------------------------------------------
(1) 1027/    1578 :                     
(1) 1172/    1578 :                     
(1) 1173/    1578 :                     ; ====================================================================
(1) 1174/    1578 :                     ; ----------------------------------------------------------------
(1) 1175/    1578 :                     ; Shared subs for the add-ons
(1) 1176/    1578 :                     ; ----------------------------------------------------------------
(1) 1177/    1578 :                     
(1) 1178/    1578 :                     ; --------------------------------------------------------
(1) 1179/    1578 :                     ; System_GrabRamCode
(1) 1180/    1578 :                     ;
(1) 1181/    1578 :                     ; Shared routine for MCD, 32X and CD32X.
(1) 1182/    1578 :                     ;
(1) 1183/    1578 :                     ; Send new code to the USER side of RAM and
(1) 1184/    1578 :                     ; jumps into it.
(1) 1185/    1578 :                     ;
(1) 1186/    1578 :                     ; ** FOR SEGA CD/CD+32X
(1) 1187/    1578 :                     ; Input:
(1) 1188/    1578 :                     ; a0 - Filename string 8-bytes
(1) 1189/    1578 :                     ;
(1) 1190/    1578 :                     ; ** FOR SEGA 32X
(1) 1191/    1578 :                     ; Input:
(1) 1192/    1578 :                     ; a0 - Location of the RAM-code to copy from
(1) 1193/    1578 :                     ;      in the $880000/$900000 areas
(1) 1194/    1578 :                     ; --------------------------------------------------------
(1) 1195/    1578 :                     
(1) 1196/    1578 :                     System_GrabRamCode:
(1) 1211/    1578 : 4E75                		rts
(1) 1213/    157A :                     
(1) 1214/    157A :                     ; ====================================================================
(1) 1215/    157A :                     
     204/    157A :                     
     205/    157A :                     ; ---------------------------------------------
     206/    157A :                     ; Read screen modes
     207/    157A :                     ;
     208/    157A :                     ;   MD/Pico: Direct ROM jump
     209/    157A :                     ; SCD/CD32X: Reads file from disc and
     210/    157A :                     ;            transfers code to RAM
     211/    157A :                     ;       32X: Read from ROM and copies code to
     212/    157A :                     ;            RAM so it's problematic with DMA
     213/    157A :                     ;            and the SH2
     214/    157A :                     ;
     215/    157A :                     ; - Returning in your current screen code will
     216/    157A :                     ; loop here.
     217/    157A :                     ; - DO NOT JUMP TO SCREEN MODES DIRECTLY
     218/    157A :                     ; ---------------------------------------------
     219/    157A :                     
     220/    157A :                     Md_ReadModes:
     221/    157A : 007C 0700           		ori.w	#$0700,sr		; Disable interrupts
     222/    157E : 7000                		moveq	#0,d0
     223/    1580 : 3038 C458           		move.w	(RAM_ScreenMode).w,d0
     224/    1584 : C07C 007F           		and.w	#$7F,d0			; <-- CURRENT LIMIT
     225/    1588 : E948                		lsl.w	#4,d0			; * $10
     226/    158A : 41FB 000A           		lea	.pick_mode(pc,d0.w),a0	; LEA the filename
     234/    158E : 207B 0006           		movea.l	.pick_mode(pc,d0.w),a0	; Location to JUMP to.
     235/    1592 : 4E90                		jsr	(a0)
     237/    1594 : 60E4                		bra.s	Md_ReadModes		; Loop on rts
     238/    1596 :                     
     239/    1596 :                     ; ---------------------------------------------
     240/    1596 :                     ; ** ADD SCREEN MODES HERE **
     241/    1596 :                     ; ---------------------------------------------
     242/    1596 :                     
     243/    1596 :                     .pick_mode:
     244/    1596 : 0000 3594           		dc.l Md_Screen00	; Cartridge label (unused on CD)
     245/    159A : 5343 5245 454E      		dc.b "SCREEN00.BIN"	; ISO Filename (unused on Cartridge)
             15A0 : 3030 2E42 494E    
     246/    15A6 : 0000 3594           		dc.l Md_Screen00
     247/    15AA : 5343 5245 454E      		dc.b "SCREEN00.BIN"
             15B0 : 3030 2E42 494E    
     248/    15B6 : 0000 3594           		dc.l Md_Screen00
     249/    15BA : 5343 5245 454E      		dc.b "SCREEN00.BIN"
             15C0 : 3030 2E42 494E    
     250/    15C6 : 0000 3594           		dc.l Md_Screen00
     251/    15CA : 5343 5245 454E      		dc.b "SCREEN00.BIN"
             15D0 : 3030 2E42 494E    
     252/    15D6 : 0000 3594           		dc.l Md_Screen00
     253/    15DA :                     
     254/    15DA :                     ; ---------------------------------------------
     255/    15DA :                     
     262/    15DA :                     Md_SysCode_e:
     263/    15DA :                     		align 2
     264/    15DA :                     
     265/    15DA :                     ; ===========================================================================
     266/    15DA :                     ; --------------------------------------------------------
     267/    15DA :                     ; Z80 include on Cartridge ONLY (NOT on Disc)
     268/    15DA :                     ; --------------------------------------------------------
     269/    15DA :                     
     271/    15DA :                     
     275/    15DA :                     Z80_CODE:
     279/    15DA :                     		include "sound/driver/gema_zdrv.asm"
(1)    1/    15DA :                     ; ====================================================================
(1)    2/    15DA :                     ; --------------------------------------------------------
(1)    3/    15DA :                     ; GEMA/Nikona Z80 code v1.0
(1)    4/    15DA :                     ; (C)2023-2024 GenesisFan64
(1)    5/    15DA :                     ; --------------------------------------------------------
(1)    6/    15DA :                     
(1)    7/       0 :                     		phase 0
(1)    8/       0 :                     		cpu Z80		; Enter Z80 CPU
(1)    9/       0 :                     
(1)   10/       0 :                     ; --------------------------------------------------------
(1)   11/       0 :                     ; SETTINGS
(1)   12/       0 :                     ; --------------------------------------------------------
(1)   13/       0 :                     
(1)   14/       0 :                     ; !! = leave as-is unless you know what you are doing.
(1)   15/       0 :                     
(1)   16/       0 : =8H                  MAX_TRFRPZ	equ 8		; !! Max transferRom packets(bytes) **AFFECTS WAVE QUALITY**
(1)   17/       0 : =20H                 MAX_TRKCHN	equ 32		; !! Max internal shared tracker channel slots *** LIMTED to 32 ***
(1)   18/       0 : =20H                 MAX_RCACH	equ 20h		; !! Max storage for ROM pattern data *** 1-BIT SIZES ONLY, MUST BE ALIGNED ***
(1)   19/       0 : =8H                  MAX_BUFFNTRY	equ 4*2		; !! nikona_BuffList buffer entry size
(1)   20/       0 :                     
(1)   21/       0 : =18H                 MAX_TBLSIZE	equ 18h		; Max size for chip tables
(1)   22/       0 : =1AH                 MAX_TRKINDX	equ 26		; Max channel indexes per buffer: 4PSG+6FM+8PCM+8PWM
(1)   23/       0 : =8H                  MAX_BLOCKS	equ 8		; Max Cache'd ROM blocks per track
(1)   24/       0 :                     
(1)   25/       0 : =20H                 MAX_ZCMND	equ 20h		; Size of commands array, ** 1-bit SIZES ONLY **
(1)   26/       0 : =0H                  ZSET_TESTME	equ 0		; Set to 1 to check the DAC playback for quality by ear
(1)   27/       0 :                     
(1)   28/       0 :                     ; --------------------------------------------------------
(1)   29/       0 :                     ; Structs
(1)   30/       0 :                     ; --------------------------------------------------------
(1)   31/       0 :                     
(1)   32/       0 :                     ; trkBuff struct: 00h-30h
(1)   33/       0 :                     ; unused bytes are free.
(1)   34/       0 :                     ;
(1)   35/       0 :                     ; trk_Status: %ERP- ---0
(1)   36/       0 :                     ; E - enabled
(1)   37/       0 :                     ; R - Init|Restart track
(1)   38/       0 :                     ; P - refill-on-playback
(1)   39/       0 :                     ; 0 - Use global sub-beats
(1)   40/       0 : =0H                  trk_Status	equ 00h	; ** Track Status and Flags (MUST BE at 00h)
(1)   41/       0 : =1H                  trk_SeqId	equ 01h ; ** Track ID to play.
(1)   42/       0 : =2H                  trk_SetBlk	equ 02h	; ** Start on this block
(1)   43/       0 : =3H                  trk_TickSet	equ 03h	; ** Ticks for this track
(1)   44/       0 : =4H                  trk_Blocks	equ 04h ; ** [W] Current track's blocks
(1)   45/       0 : =6H                  trk_Patt	equ 06h ; ** [W] Current track's heads and patterns
(1)   46/       0 : =8H                  trk_Cach	equ 08h	; ** [W] Current track's cache notedata
(1)   47/       0 : =0AH                 trk_Read	equ 0Ah	; [W] Track current pattern read
(1)   48/       0 : =0CH                 trk_Rows	equ 0Ch	; [W] Track row counter
(1)   49/       0 : =0DH                 trk_cachHalf	equ 0Dh ; ROM-cache halfcheck
(1)   50/       0 : =0EH                 trk_rowPause	equ 0Eh	; Row-pause timer
(1)   51/       0 : =0FH                 trk_tickTmr	equ 0Fh	; Ticks timer
(1)   52/       0 : =10H                 trk_currBlk	equ 10h	; Current block
(1)   53/       0 : =11H                 trk_Priority	equ 11h ; Priority level for this buffer
(1)   54/       0 : =12H                 trk_BankIns	equ 12h ; Instrument bank
(1)   55/       0 : =13H                 trk_BankHeads	equ 13h ; Header bank
(1)   56/       0 : =14H                 trk_BankBlk	equ 14h	; Block bank
(1)   57/       0 : =15H                 trk_MaxChnl	equ 15h ; MAX channels used in this track
(1)   58/       0 : =16H                 trk_VolMaster	equ 16h ; Master volume for this track slot (00-max), +80h update
(1)   59/       0 : =17H                 trk_VolFade	equ 17h	; Fade request byte
(1)   60/       0 : =18H                 trk_RomPattRead	equ 18h ; [3b] ROM current pattern data to be cache'd
(1)   61/       0 : =1BH                 trk_RomPatt	equ 1Bh ; [3b] ROM BASE pattern data
(1)   62/       0 : =1EH                 trk_RomInst	equ 1Eh ; [3b] ROM instrument data
(1)   63/       0 : =21H                 trk_RomBlks	equ 21h ; [3b] ROM blocks data
(1)   64/       0 : =24H                 trk_ChnIndx	equ 24h	; CHANNEL INDEXES START HERE
(1)   65/       0 :                     
(1)   66/       0 :                     ; chnBuff struct, 8 bytes ONLY
(1)   67/       0 :                     ;
(1)   68/       0 :                     ; chnl_Flags: E0LRevin
(1)   69/       0 :                     ; E  - Channel is active
(1)   70/       0 :                     ; LR - Global left/Right panning bits (0-ON 1-OFF)
(1)   71/       0 :                     ; e  - Effect*
(1)   72/       0 :                     ; v  - Volume*
(1)   73/       0 :                     ; i  - Intrument*
(1)   74/       0 :                     ; n  - Note*
(1)   75/       0 :                     
(1)   76/       0 : =0H                  chnl_Flags	equ 0	; Playback flags ** DON'T MOVE **
(1)   77/       0 : =1H                  chnl_Chip	equ 1	; Current Chip ID + priority for this channel
(1)   78/       0 : =2H                  chnl_Note	equ 2
(1)   79/       0 : =3H                  chnl_Ins	equ 3	; Starting from 1, 0 is invalid
(1)   80/       0 : =4H                  chnl_Vol	equ 4	; MAX to MIN: 40h-00h
(1)   81/       0 : =5H                  chnl_EffId	equ 5
(1)   82/       0 : =6H                  chnl_EffArg	equ 6
(1)   83/       0 : =7H                  chnl_Type	equ 7	; Impulse-note update bits
(1)   84/       0 :                     
(1)   85/       0 :                     ; --------------------------------------------------------
(1)   86/       0 :                     ; Variables
(1)   87/       0 :                     ; --------------------------------------------------------
(1)   88/       0 :                     
(1)   89/       0 :                     ; Z80 opcode labels for the wave playback routines
(1)   90/       0 : =0H                  zopcNop		equ 00h
(1)   91/       0 : =8H                  zopcEx		equ 08h
(1)   92/       0 : =0C9H                zopcRet		equ 0C9h
(1)   93/       0 : =0D9H                zopcExx		equ 0D9h		; (dac_me ONLY)
(1)   94/       0 : =0F5H                zopcPushAf	equ 0F5h		; (dac_fill ONLY)
(1)   95/       0 :                     
(1)   96/       0 :                     ; PSG external control
(1)   97/       0 : =0H                  COM		equ 0
(1)   98/       0 : =4H                  LEV		equ 4
(1)   99/       0 : =8H                  ATK		equ 8
(1)  100/       0 : =0CH                 DKY		equ 12
(1)  101/       0 : =10H                 SLV		equ 16
(1)  102/       0 : =14H                 RRT		equ 20
(1)  103/       0 : =18H                 MODE		equ 24
(1)  104/       0 : =1CH                 DTL		equ 28
(1)  105/       0 : =20H                 DTH		equ 32
(1)  106/       0 : =24H                 ALV		equ 36
(1)  107/       0 : =28H                 FLG		equ 40
(1)  108/       0 : =2CH                 TMR		equ 44
(1)  109/       0 : =30H                 PVOL		equ 48
(1)  110/       0 : =34H                 PARP		equ 52
(1)  111/       0 : =38H                 PTMR		equ 56
(1)  112/       0 :                     
(1)  113/       0 :                     ; PWM control
(1)  114/       0 :                     ; PWCOM		equ 0
(1)  115/       0 :                     ; PWPTH_V	equ 8	; Volume | Pitch MSB (VVVVVVPPb)
(1)  116/       0 :                     ; PWPHL		equ 16	; Pitch LSB
(1)  117/       0 :                     ; PWOUTF	equ 24	; Output mode/bits | 32-bit address (%SlLRxiix) ii=$02 or $06
(1)  118/       0 :                     ; PWINSH	equ 32	; **
(1)  119/       0 :                     ; PWINSM	equ 40	; **
(1)  120/       0 :                     ; PWINSL	equ 48	; **
(1)  121/       0 :                     
(1)  122/       0 :                     ; ====================================================================
(1)  123/       0 :                     ; --------------------------------------------------------
(1)  124/       0 :                     ; Code starts here
(1)  125/       0 :                     ; --------------------------------------------------------
(1)  126/       0 :                     
(1)  127/       0 : F3                  		di			; Disable interrputs first
(1)  128/       1 : ED 56               		im	1		; Set Interrupt mode 1
(1)  129/       3 : 31 00 20            		ld	sp,2000h	; Set stack at the end of Z80
(1)  130/       6 : 18 58               		jr	z80_init	; Jump to z80_init
(1)  131/       8 :                     
(1)  132/       8 :                     ; --------------------------------------------------------
(1)  133/       8 :                     ; RST 8 (dac_me)
(1)  134/       8 :                     ; *** self-modifiable code ***
(1)  135/       8 :                     ;
(1)  136/       8 :                     ; Writes wave data to DAC using data stored
(1)  137/       8 :                     ; on the wave buffer, call this routine every 6 or 8
(1)  138/       8 :                     ; instructions to keep the samplerate stable.
(1)  139/       8 :                     ;
(1)  140/       8 :                     ; Input (EXX):
(1)  141/       8 :                     ;  c - WAVE buffer MSB
(1)  142/       8 :                     ; de - Pitch (xx.00)
(1)  143/       8 :                     ; h  - WAVE buffer LSB (as xx.00)
(1)  144/       8 :                     ;
(1)  145/       8 :                     ; Uses (EXX):
(1)  146/       8 :                     ; b
(1)  147/       8 :                     ;
(1)  148/       8 :                     ; Notes:
(1)  149/       8 :                     ; ONLY USE dac_on and dac_off to control
(1)  150/       8 :                     ; wave playback.
(1)  151/       8 :                     ;
(1)  152/       8 :                     ; call dac_on to enable wave playback, locks FM6
(1)  153/       8 :                     ; and
(1)  154/       8 :                     ; call dac_off to disable wave and unlock FM6.
(1)  155/       8 :                     ; --------------------------------------------------------
(1)  156/       8 :                     
(1)  157/       8 :                     ; Samplerate is at 16000hz with minimal quality loss.
(1)  158/       8 :                     ; 		org 8
(1)  159/       8 : D9                  dac_me:		exx			; * swap regs <-- Changes between EXX(play) and RET(stop)
(1)  160/       9 : 08                  		ex	af,af'		; Swap af
(1)  161/       A : 45                  		ld	b,l		; Save pitch .00 to b
(1)  162/       B : 6C                  		ld	l,h		; l - xx.00 to 00xx
(1)  163/       C : 61                  		ld	h,c		; h - Wave buffer MSB + 00xx
(1)  164/       D : 3E 2A               		ld	a,2Ah		; YM register 2Ah
(1)  165/       F : 32 00 40            		ld	(Zym_ctrl_1),a	; Set DAC write
(1)  166/      12 : 7E                  		ld	a,(hl)		; Read wave byte
(1)  167/      13 : 32 01 40            		ld	(Zym_data_1),a	; Write it to DAC
(1)  168/      16 : 65                  		ld	h,l		; get hl back
(1)  169/      17 : 68                  		ld	l,b		; Get .00 back from b to l
(1)  170/      18 : 19                  		add	hl,de		; Pitch increment hl
(1)  171/      19 : 08                  		ex	af,af'		; Return af
(1)  172/      1A : D9                  		exx			; * swap regs
(1)  173/      1B : C9                  		ret
(1)  174/      1C :                     
(1)  175/      1C :                     ; --------------------------------------------------------
(1)  176/      1C :                     ; 1Ch - Master tracklist pointer
(1)  177/      1C :                     gemaMstrListPos:
(1)  178/      1C : 00                  		db 0				; ** 32-bit 68k address **
(1)  179/      1D : 00                  		db 0
(1)  180/      1E : 00                  		db 0
(1)  181/      1F : 00                  		db 0
(1)  182/      20 :                     
(1)  183/      20 :                     ; --------------------------------------------------------
(1)  184/      20 :                     ; RST 20h (dac_me)
(1)  185/      20 :                     ; *** self-modifiable code ***
(1)  186/      20 :                     ;
(1)  187/      20 :                     ; Checks if the WAVE cache needs refilling to keep
(1)  188/      20 :                     ; it playing.
(1)  189/      20 :                     ; --------------------------------------------------------
(1)  190/      20 :                     
(1)  191/      20 :                     ; 		org 20h
(1)  192/      20 : F5                  dac_fill:	push	af		; <-- Changes between PUSH AF(play) and RET(stop)
(1)  193/      21 : 3A 97 1F            		ld	a,(dDacFifoMid)	; a - Get half-way value
(1)  194/      24 : D9                  		exx			; * swap regs
(1)  195/      25 : AC                  		xor	h		; Grab LSB.00
(1)  196/      26 : D9                  		exx			; * swap regs
(1)  197/      27 : E6 80               		and	80h		; Check if bit changed
(1)  198/      29 : C4 17 13            		call	nz,dac_refill	; If yes, Refill and update LSB to check
(1)  199/      2C : F1                  		pop	af
(1)  200/      2D : C9                  		ret
(1)  201/      2E :                     
(1)  202/      2E :                     ; --------------------------------------------------------
(1)  203/      2E :                     ; 02Eh - User read/write values
(1)  204/      2E : 00                  commZWrite	db 0			; 2Eh: cmd fifo wptr (from 68k)
(1)  205/      2F : 00                  commZRomBlk	db 0			; 2Fh: 68k ROM block flag
(1)  206/      30 : 00                  cdRamLen	db 0			; 30h: Size + status flag
(1)  207/      31 : 00 00               cdRamDst	db 0,0			; 31h: ** Z80 destination
(1)  208/      33 : 00 00               cdRamSrc	db 0,0			; 33h: ** 68k 24-bit source
(1)  209/      35 : 00                  cdRamSrcB	db 0			; 35h: **
(1)  210/      36 : 00                  mcdBlock	db 0			; 36h: Flag to BLOCK SCD comm
(1)  211/      37 : 00                  marsBlock	db 0			; 37h: Flag to BLOCK PWM transfers.
(1)  212/      38 :                     
(1)  213/      38 :                     ; --------------------------------------------------------
(1)  214/      38 :                     ; Z80 Interrupt at 0038h
(1)  215/      38 :                     ; --------------------------------------------------------
(1)  216/      38 :                     
(1)  217/      38 :                     ; 		org 38h			; Align 38h
(1)  218/      38 : ED 73 80 1F         		ld	(tickSpSet),sp	; Write TICK flag using sp (xx1F, read as tickFlag+1)
(1)  219/      3C : F3                  		di			; Disable interrupt
(1)  220/      3D : C9                  		ret
(1)  221/      3E :                     
(1)  222/      3E :                     ; --------------------------------------------------------
(1)  223/      3E :                     ; 03Eh - More user settings
(1)  224/      3E : 00                  palMode		db 0			; 3Eh: PAL mode flag
(1)  225/      3F : 00                  freeFlag	db 0
(1)  226/      40 :                     
(1)  227/      40 :                     ; --------------------------------------------------------
(1)  228/      40 :                     ; 68K Read/Write area at 40h
(1)  229/      40 :                     ; --------------------------------------------------------
(1)  230/      40 :                     
(1)  231/      40 :                     ; 		org 40h
(1)  232/      40 :                     commZfifo	ds MAX_ZCMND			; Buffer for commands from 68k side
(1)  233/      60 :                     
(1)  234/      60 :                     ; --------------------------------------------------------
(1)  235/      60 :                     ; Initialize
(1)  236/      60 :                     ; --------------------------------------------------------
(1)  237/      60 :                     
(1)  238/      60 :                     z80_init:
(1)  239/      60 : CD EF 0F            		call	gema_init		; Init values
(1)  240/      63 : FB                  		ei
(1)  241/      64 :                     
(1)  242/      64 :                     ; --------------------------------------------------------
(1)  243/      64 :                     ; MAIN LOOP
(1)  244/      64 :                     ; --------------------------------------------------------
(1)  245/      64 :                     
(1)  246/      64 :                     drv_loop:
(1)  247/      64 : CF                  		rst	8
(1)  248/      65 : CD 63 10            		call	get_tick		; Check tick on VBlank
(1)  249/      68 : E7                  		rst	20h			; Refill wave here
(1)  250/      69 : CF                  		rst	8
(1)  251/      6A : 06 00               		ld	b,0			; b - Reset current flags (beat|tick)
(1)  252/      6C : 3A 82 1F            		ld	a,(tickCnt)		; Decrement tick counter
(1)  253/      6F : D6 01               		sub	1
(1)  254/      71 : 38 0B               		jr	c,.noticks		; If non-zero, no tick passed.
(1)  255/      73 : 32 82 1F            		ld	(tickCnt),a
(1)  256/      76 : CD 3C 11            		call	chip_env		; Process PSG and YM
(1)  257/      79 : CD 63 10            		call	get_tick		; Check for another tick
(1)  258/      7C : 06 01               		ld 	b,01b			; Set TICK and clear BEAT flags (01b)
(1)  259/      7E :                     .noticks:
(1)  260/      7E : 3A A1 1F            		ld	a,(sbeatAcc+1)		; check beat counter (scaled by tempo)
(1)  261/      81 : D6 01               		sub	1
(1)  262/      83 : 38 06               		jr	c,.nobeats
(1)  263/      85 : CF                  		rst	8
(1)  264/      86 : 32 A1 1F            		ld	(sbeatAcc+1),a		; 1/24 beat passed.
(1)  265/      89 : CB C8               		set	1,b			; Set BEAT (10b) flag
(1)  266/      8B :                     .nobeats:
(1)  267/      8B : CF                  		rst	8
(1)  268/      8C : 78                  		ld	a,b			; Any beat/tick bits set?
(1)  269/      8D : B7                  		or	a
(1)  270/      8E : 28 14               		jr	z,.neither
(1)  271/      90 : 32 96 1F            		ld	(currTickBits),a	; Save BEAT/TICK bits
(1)  272/      93 : CF                  		rst	8
(1)  273/      94 : CD 63 10            		call	get_tick
(1)  274/      97 : CD C1 05            		call	set_chips		; Send changes to sound chips
(1)  275/      9A : CD 63 10            		call	get_tick
(1)  276/      9D : CF                  		rst	8
(1)  277/      9E : CD E4 01            		call	upd_track		; Update track data
(1)  278/      A1 : CD 63 10            		call	get_tick
(1)  279/      A4 :                     .neither:
(1)  280/      A4 : CF                  		rst	8
(1)  284/      A5 : CD 63 10            		call	get_tick
(1)  285/      A8 :                     .next_cmd:
(1)  286/      A8 : 3A 2E 00            		ld	a,(commZWrite)		; Check if commZ R/W indexes
(1)  287/      AB : 47                  		ld	b,a			; are in the same spot a == b
(1)  288/      AC : 3A 85 1F            		ld	a,(commZRead)
(1)  289/      AF : B8                  		cp	b			; If equal, loop back.
(1)  290/      B0 : 28 B2               		jr	z,drv_loop
(1)  291/      B2 : CF                  		rst	8
(1)  292/      B3 : CD CB 00            		call	.grab_arg		; Read staring flag -1
(1)  293/      B6 : FE FF               		cp	-1			; Got START -1?
(1)  294/      B8 : 20 AA               		jr	nz,drv_loop		; If not, end of commands
(1)  295/      BA : CD CB 00            		call	.grab_arg		; Read command number
(1)  296/      BD : 87                  		add	a,a			; ID * 2
(1)  297/      BE : 21 EA 00            		ld	hl,.list		; Index-jump...
(1)  298/      C1 : 16 00               		ld	d,0
(1)  299/      C3 : 5F                  		ld	e,a
(1)  300/      C4 : 19                  		add	hl,de
(1)  301/      C5 : 7E                  		ld	a,(hl)
(1)  302/      C6 : 23                  		inc	hl
(1)  303/      C7 : 66                  		ld	h,(hl)
(1)  304/      C8 : CF                  		rst	8
(1)  305/      C9 : 6F                  		ld	l,a
(1)  306/      CA : E9                  		jp	(hl)
(1)  307/      CB :                     
(1)  308/      CB :                     ; --------------------------------------------------------
(1)  309/      CB :                     ; Read cmd byte, auto re-rolls to 3Fh
(1)  310/      CB :                     ; --------------------------------------------------------
(1)  311/      CB :                     
(1)  312/      CB :                     .grab_arg:
(1)  313/      CB : D5                  		push	de
(1)  314/      CC : E5                  		push	hl
(1)  315/      CD :                     .getcbytel:
(1)  316/      CD : 3A 2E 00            		ld	a,(commZWrite)
(1)  317/      D0 : 57                  		ld	d,a
(1)  318/      D1 : CF                  		rst	8
(1)  319/      D2 : 3A 85 1F            		ld	a,(commZRead)
(1)  320/      D5 : BA                  		cp	d		; commZ R/W indexes are the same?
(1)  321/      D6 : 28 F5               		jr	z,.getcbytel	; wait until these counters change.
(1)  322/      D8 : 16 00               		ld	d,0
(1)  323/      DA : 5F                  		ld	e,a
(1)  324/      DB : 21 40 00            		ld	hl,commZfifo	; Read commZ list + index
(1)  325/      DE : 19                  		add	hl,de
(1)  326/      DF : CF                  		rst	8
(1)  327/      E0 : 3C                  		inc	a
(1)  328/      E1 : E6 1F               		and	MAX_ZCMND-1	; ** commZ list buffer limit
(1)  329/      E3 : 32 85 1F            		ld	(commZRead),a
(1)  330/      E6 : 7E                  		ld	a,(hl)		; a - got this byte from the buffer
(1)  331/      E7 : E1                  		pop	hl
(1)  332/      E8 : D1                  		pop	de
(1)  333/      E9 : C9                  		ret
(1)  334/      EA :                     
(1)  335/      EA :                     ; --------------------------------------------------------
(1)  336/      EA :                     
(1)  337/      EA :                     .list:
(1)  338/      EA : FA 00               		dw .cmnd_0		; 00h -
(1)  339/      EC : FD 00               		dw .cmnd_1		; 01h - Set Master tracklist
(1)  340/      EE : 16 01               		dw .cmnd_2		; 02h - Play by track number
(1)  341/      F0 : 69 01               		dw .cmnd_3		; 03h - Stop by track number
(1)  342/      F2 : FA 00               		dw .cmnd_0		; 04h - ** Fade in or out
(1)  343/      F4 : FA 00               		dw .cmnd_0		; 05h - ** Set maximum volume to slot
(1)  344/      F6 : D3 01               		dw .cmnd_6		; 06h - Set GLOBAL sub-beats
(1)  345/      F8 : FA 00               		dw .cmnd_0		; 07h -
(1)  346/      FA :                     ; 		dw .cmnd_8		; 08h - Stop ALL
(1)  347/      FA :                     
(1)  348/      FA :                     ; --------------------------------------------------------
(1)  349/      FA :                     ; Command 00h
(1)  350/      FA :                     ;
(1)  351/      FA :                     ; Reserved for TESTING purposes.
(1)  352/      FA :                     ; --------------------------------------------------------
(1)  353/      FA :                     
(1)  354/      FA :                     .cmnd_0:
(1)  355/      FA :                     ; 		ld	a,DacIns_TEST>>16
(1)  356/      FA :                     ; 		ld	hl,(DacIns_TEST+6)&0FFFFh
(1)  357/      FA :                     ; 		ld	(wave_Start),hl
(1)  358/      FA :                     ; 		ld	(wave_Start+2),a
(1)  359/      FA :                     ; 		ld	a,02h
(1)  360/      FA :                     ; 		ld	hl,04000h
(1)  361/      FA :                     ; 		ld	(wave_Len),hl
(1)  362/      FA :                     ; 		ld	(wave_Len+2),a
(1)  363/      FA :                     ; 		ld	bc,0
(1)  364/      FA :                     ; 		ld	(wave_Loop),bc
(1)  365/      FA :                     ; 		ld	hl,100h
(1)  366/      FA :                     ; 		ld	(wave_Pitch),hl
(1)  367/      FA :                     ; 		ld	a,1
(1)  368/      FA :                     ; 		ld	(wave_Flags),a
(1)  369/      FA :                     ; 		call	dac_play
(1)  370/      FA : C3 A8 00            		jp	.next_cmd
(1)  371/      FD :                     
(1)  372/      FD :                     ; --------------------------------------------------------
(1)  373/      FD :                     ; Command 01h:
(1)  374/      FD :                     ;
(1)  375/      FD :                     ; Set the Track MASTER-list.
(1)  376/      FD :                     ; --------------------------------------------------------
(1)  377/      FD :                     
(1)  378/      FD :                     .cmnd_1:
(1)  379/      FD : 21 1F 00            		ld	hl,gemaMstrListPos+3	; 32-bit bigendian-address
(1)  380/     100 : CD CB 00            		call	.grab_arg		; $000000xx
(1)  381/     103 : 77                  		ld	(hl),a
(1)  382/     104 : 2B                  		dec	hl
(1)  383/     105 : CD CB 00            		call	.grab_arg		; $0000xx00
(1)  384/     108 : 77                  		ld	(hl),a
(1)  385/     109 : 2B                  		dec	hl
(1)  386/     10A : CD CB 00            		call	.grab_arg		; $00xx0000
(1)  387/     10D : 77                  		ld	(hl),a
(1)  388/     10E : 2B                  		dec	hl
(1)  389/     10F : CD CB 00            		call	.grab_arg		; $xx000000**
(1)  390/     112 : 77                  		ld	(hl),a
(1)  391/     113 : C3 A8 00            		jp	.next_cmd
(1)  392/     116 :                     
(1)  393/     116 :                     ; --------------------------------------------------------
(1)  394/     116 :                     ; Command 02h:
(1)  395/     116 :                     ;
(1)  396/     116 :                     ; Make new track by sequence number
(1)  397/     116 :                     ;
(1)  398/     116 :                     ; Arguments:
(1)  399/     116 :                     ; SeqID,BlockPos,SlotIndex(If -1 autofill)
(1)  400/     116 :                     ; --------------------------------------------------------
(1)  401/     116 :                     
(1)  402/     116 :                     .cmnd_2:
(1)  403/     116 : CD CB 00            		call	.grab_arg		; d0: Sequence ID
(1)  404/     119 : 4F                  		ld	c,a			; copy as c
(1)  405/     11A : CD CB 00            		call	.grab_arg		; d1: Block from
(1)  406/     11D : 47                  		ld	b,a			; copy as b
(1)  407/     11E : CF                  		rst	8
(1)  408/     11F : CD CB 00            		call	.grab_arg		; d2: Slot index
(1)  409/     122 : FD 21 78 18         		ld	iy,nikona_BuffList	; iy - Slot buffer list
(1)  410/     126 : FE FF               		cp	-1			; if d2 == -1, search free slot
(1)  411/     128 : 28 16               		jr	z,.srch_mode
(1)  412/     12A : FE 03               		cp	(nikona_BuffList_e-nikona_BuffList)/MAX_BUFFNTRY	; If maxed out slots
(1)  413/     12C : D2 A8 00            		jp	nc,.next_cmd
(1)  414/     12F : 87                  		add	a,a			; ** MANUAL MAX_BUFFNTRY
(1)  415/     130 : 87                  		add	a,a			; id*8
(1)  416/     131 : 87                  		add	a,a
(1)  417/     132 : 16 00               		ld	d,0
(1)  418/     134 : 5F                  		ld	e,a
(1)  419/     135 : FD 19               		add	iy,de
(1)  420/     137 : FD 7E 00            		ld	a,(iy)
(1)  421/     13A : FD 66 01            		ld	h,(iy+1)
(1)  422/     13D : 6F                  		ld	l,a
(1)  423/     13E : 18 1B               		jr	.wrtto_slot
(1)  424/     140 :                     ; -1
(1)  425/     140 :                     .srch_mode:
(1)  426/     140 : 16 00               		ld	d,0
(1)  427/     142 :                     .next:
(1)  428/     142 : FD 7E 00            		ld	a,(iy)
(1)  429/     145 : FE FF               		cp	-1			; End of list?
(1)  430/     147 : CA A8 00            		jp	z,.next_cmd		; Then skip, no free slot.
(1)  431/     14A : FD 66 01            		ld	h,(iy+1)		; hl - Current track slot
(1)  432/     14D : 6F                  		ld	l,a
(1)  433/     14E : CF                  		rst	8
(1)  434/     14F : 7E                  		ld	a,(hl)			; trk_Status: Is this slot free == 0?
(1)  435/     150 : B7                  		or	a
(1)  436/     151 : 28 08               		jr	z,.wrtto_slot
(1)  437/     153 : 11 08 00            		ld	de,MAX_BUFFNTRY		; Search the next slot from the buff list
(1)  438/     156 : FD 19               		add	iy,de
(1)  439/     158 : CF                  		rst	8
(1)  440/     159 : 18 E7               		jr	.next
(1)  441/     15B :                     .wrtto_slot:
(1)  442/     15B : 36 C0               		ld	(hl),0C0h		; ** Write trk_Status flags: Enable+Restart
(1)  443/     15D : 23                  		inc	hl
(1)  444/     15E : CF                  		rst	8
(1)  445/     15F : 71                  		ld	(hl),c			; ** write trk_SeqId
(1)  446/     160 : 23                  		inc	hl
(1)  447/     161 : 70                  		ld	(hl),b			; ** write trk_SetBlk
(1)  448/     162 : 79                  		ld	a,c
(1)  449/     163 : CD 93 05            		call	get_RomTrcks		; ** ROM READ: Get track list
(1)  450/     166 : C3 A8 00            		jp	.next_cmd
(1)  451/     169 :                     
(1)  452/     169 :                     ; --------------------------------------------------------
(1)  453/     169 :                     ; Command 03h:
(1)  454/     169 :                     ;
(1)  455/     169 :                     ; Stop track by sequence number
(1)  456/     169 :                     ;
(1)  457/     169 :                     ; SeqID,SlotIndex(-1 allslots)
(1)  458/     169 :                     ; --------------------------------------------------------
(1)  459/     169 :                     
(1)  460/     169 :                     .cmnd_3:
(1)  461/     169 : CD CB 00            		call	.grab_arg		; d0: Sequence ID
(1)  462/     16C : 4F                  		ld	c,a			; copy to c
(1)  463/     16D : CD CB 00            		call	.grab_arg		; d1: Slot index
(1)  464/     170 : FD 21 78 18         		ld	iy,nikona_BuffList	; iy - Slot buffer list
(1)  465/     174 : FE FF               		cp	-1			; if -1, search for all with same ID
(1)  466/     176 : 28 1A               		jr	z,.srch_del
(1)  467/     178 : FE 03               		cp	(nikona_BuffList_e-nikona_BuffList)/MAX_BUFFNTRY	; If maxed out slots
(1)  468/     17A : D2 A8 00            		jp	nc,.next_cmd
(1)  469/     17D : 87                  		add	a,a			; ** MANUAL MAX_BUFFNTRY
(1)  470/     17E : 87                  		add	a,a			; id*8
(1)  471/     17F : 87                  		add	a,a
(1)  472/     180 : 16 00               		ld	d,0
(1)  473/     182 : 5F                  		ld	e,a
(1)  474/     183 : FD 19               		add	iy,de
(1)  475/     185 : FD 7E 00            		ld	a,(iy)
(1)  476/     188 : FD 66 01            		ld	h,(iy+1)
(1)  477/     18B : 6F                  		ld	l,a
(1)  478/     18C : CD A6 01            		call	.wrtto_del
(1)  479/     18F : C3 A8 00            		jp	.next_cmd
(1)  480/     192 :                     ; -1
(1)  481/     192 :                     .srch_del:
(1)  482/     192 : CD AD 01            		call	.srch_for
(1)  483/     195 : FE FF               		cp	-1
(1)  484/     197 : CA A8 00            		jp	z,.next_cmd
(1)  485/     19A : 7E                  		ld	a,(hl)
(1)  486/     19B : CB 7F               		bit	7,a
(1)  487/     19D : CA 92 01            		jp	z,.srch_del
(1)  488/     1A0 : CD A6 01            		call	.wrtto_del
(1)  489/     1A3 : C3 92 01            		jp	.srch_del
(1)  490/     1A6 :                     
(1)  491/     1A6 :                     .wrtto_del:
(1)  492/     1A6 : 36 FF               		ld	(hl),-1		; -1 flag, stop channel and clear slot
(1)  493/     1A8 : 23                  		inc	hl
(1)  494/     1A9 : 36 FF               		ld	(hl),-1		; Reset seqId
(1)  495/     1AB : CF                  		rst	8
(1)  496/     1AC : C9                  		ret
(1)  497/     1AD :                     
(1)  498/     1AD :                     ; ------------------------------------------------
(1)  499/     1AD :                     ; c - Sequence ID to search
(1)  500/     1AD :                     
(1)  501/     1AD :                     .srch_for:
(1)  502/     1AD : 16 00               		ld	d,0
(1)  503/     1AF :                     .next_f:
(1)  504/     1AF : FD 7E 00            		ld	a,(iy)
(1)  505/     1B2 : FE FF               		cp	-1
(1)  506/     1B4 : C8                  		ret	z
(1)  507/     1B5 : FD 66 01            		ld	h,(iy+1)
(1)  508/     1B8 : 6F                  		ld	l,a
(1)  509/     1B9 : 11 08 00            		ld	de,MAX_BUFFNTRY
(1)  510/     1BC : FD 19               		add	iy,de
(1)  511/     1BE : E5                  		push	hl
(1)  512/     1BF : DD E1               		pop	ix
(1)  513/     1C1 : CF                  		rst	8
(1)  514/     1C2 : DD 7E 00            		ld	a,(ix+trk_Status)			; trk_Status: Track is active != 0?
(1)  515/     1C5 : B7                  		or	a
(1)  516/     1C6 : 28 E7               		jr	z,.next_f
(1)  517/     1C8 : DD 7E 01            		ld	a,(ix+trk_SeqId)
(1)  518/     1CB : B9                  		cp	c
(1)  519/     1CC : 28 03               		jr	z,.found_f
(1)  520/     1CE : CF                  		rst	8
(1)  521/     1CF : 18 DE               		jr	.next_f
(1)  522/     1D1 :                     .found_f:
(1)  523/     1D1 : AF                  		xor	a
(1)  524/     1D2 : C9                  		ret
(1)  525/     1D3 :                     
(1)  526/     1D3 :                     ; --------------------------------------------------------
(1)  527/     1D3 :                     ; Command 06h:
(1)  528/     1D3 :                     ;
(1)  529/     1D3 :                     ; Set global sub-beats
(1)  530/     1D3 :                     ; --------------------------------------------------------
(1)  531/     1D3 :                     
(1)  532/     1D3 :                     .cmnd_6:
(1)  533/     1D3 : CD CB 00            		call	.grab_arg	; d0.w: $00xx
(1)  534/     1D6 : 4F                  		ld	c,a
(1)  535/     1D7 : CD CB 00            		call	.grab_arg	; d0.w: $xx00
(1)  536/     1DA : 32 A3 1F            		ld	(sbeatPtck+1),a
(1)  537/     1DD : 79                  		ld	a,c
(1)  538/     1DE : 32 A2 1F            		ld	(sbeatPtck),a
(1)  539/     1E1 : C3 A8 00            		jp	.next_cmd
(1)  540/     1E4 :                     
(1)  541/     1E4 :                     ; ====================================================================
(1)  542/     1E4 :                     ; ----------------------------------------------------------------
(1)  543/     1E4 :                     ; MAIN Playback section
(1)  544/     1E4 :                     ; ----------------------------------------------------------------
(1)  545/     1E4 :                     
(1)  546/     1E4 :                     ; ============================================================
(1)  547/     1E4 :                     ; --------------------------------------------------------
(1)  548/     1E4 :                     ; Read INTERNAL mini-impulse-tracker data
(1)  549/     1E4 :                     ; --------------------------------------------------------
(1)  550/     1E4 :                     
(1)  551/     1E4 :                     upd_track:
(1)  552/     1E4 : E7                  		rst	20h			; Refill wave
(1)  553/     1E5 : CD 63 10            		call	get_tick		; Check for tick flag
(1)  554/     1E8 : FD 21 78 18         		ld	iy,nikona_BuffList	; iy - slot buffer List
(1)  555/     1EC :                     .trk_buffrs:
(1)  556/     1EC : FD 7E 00            		ld	a,(iy)			; if -1, end here.
(1)  557/     1EF : FE FF               		cp	-1
(1)  558/     1F1 : C8                  		ret	z
(1)  559/     1F2 : CF                  		rst	8
(1)  560/     1F3 : FD E5               		push	iy
(1)  561/     1F5 : CD 01 02            		call	.read_track
(1)  562/     1F8 : FD E1               		pop	iy
(1)  563/     1FA : 11 08 00            		ld	de,MAX_BUFFNTRY
(1)  564/     1FD : FD 19               		add	iy,de
(1)  565/     1FF : 18 EB               		jr	.trk_buffrs
(1)  566/     201 :                     
(1)  567/     201 :                     ; ----------------------------------------
(1)  568/     201 :                     ; iy - Track buffer
(1)  569/     201 :                     ; ----------------------------------------
(1)  570/     201 :                     
(1)  571/     201 :                     .read_track:
(1)  572/     201 : FD 6E 00            		ld	l,(iy)			; hl - current track slot
(1)  573/     204 : FD 66 01            		ld	h,(iy+1)
(1)  574/     207 : CF                  		rst	8
(1)  575/     208 : E5                  		push	hl
(1)  576/     209 : FD E1               		pop	iy			; change iy to hl
(1)  577/     20B : FD 46 00            		ld	b,(iy+trk_Status)	; b - Track status and settings
(1)  578/     20E : CB 78               		bit	7,b			; bit7: Track active?
(1)  579/     210 : C8                  		ret	z			; Return if not.
(1)  580/     211 : 78                  		ld	a,b
(1)  581/     212 : FE FF               		cp	-1			; Flag is -1?
(1)  582/     214 : C8                  		ret	z			; Return if mid-flag
(1)  583/     215 : CF                  		rst	8
(1)  584/     216 : 3A 96 1F            		ld	a,(currTickBits)	; a - Tick/Beat bits
(1)  585/     219 : CB 40               		bit	0,b			; bit0: This track uses Beats?
(1)  586/     21B : 28 03               		jr	z,.sfxmd
(1)  587/     21D : CB 4F               		bit	1,a			; BEAT passed?
(1)  588/     21F : C8                  		ret	z			; No BEAT.
(1)  589/     220 :                     .sfxmd:
(1)  590/     220 : CB 47               		bit	0,a			; TICK passed?
(1)  591/     222 : C8                  		ret	z			; No TICK.
(1)  592/     223 : CF                  		rst	8
(1)  593/     224 :                     	; *** Start reading notes ***
(1)  594/     224 : CB 70               		bit	6,b			; bit6: Restart/First time?
(1)  595/     226 : C4 B5 04            		call	nz,.first_fill
(1)  596/     229 : CB 68               		bit	5,b			; bit5: FILL request by effect?
(1)  597/     22B : C4 AE 04            		call	nz,.effect_fill
(1)  598/     22E : FD 7E 0F            		ld	a,(iy+trk_tickTmr)	; TICK ex-timer for this track
(1)  599/     231 : 3D                  		dec	a
(1)  600/     232 : FD 77 0F            		ld	(iy+trk_tickTmr),a
(1)  601/     235 : B7                  		or	a			; Check a
(1)  602/     236 : C0                  		ret	nz			; If Tick timer != 0, exit.
(1)  603/     237 : CF                  		rst	8
(1)  604/     238 : FD 7E 03            		ld	a,(iy+trk_TickSet)	; Set new tick timer
(1)  605/     23B : FD 77 0F            		ld	(iy+trk_tickTmr),a
(1)  606/     23E : FD 4E 0C            		ld	c,(iy+trk_Rows)		; bc - Set row counter
(1)  607/     241 : FD 46 0D            		ld	b,(iy+(trk_Rows+1))
(1)  608/     244 : 79                  		ld	a,c			; Check rowcount
(1)  609/     245 : B0                  		or	b
(1)  610/     246 : 20 14               		jr	nz,.row_active		; If bc != 0: row is currenly playing.
(1)  611/     248 : CF                  		rst	8			; If bc == 0 ...
(1)  612/     249 : FD 7E 10            		ld	a,(iy+trk_currBlk)	; Next block
(1)  613/     24C : 3C                  		inc	a
(1)  614/     24D : FD 77 10            		ld 	(iy+trk_currBlk),a
(1)  615/     250 : CD C2 03            		call	.set_track		; Read track data ** ROM ACCESS **
(1)  616/     253 : FE FF               		cp	-1			; Track finished?
(1)  617/     255 : C8                  		ret	z
(1)  618/     256 : FD 4E 0C            		ld	c,(iy+trk_Rows)		; Set new rowcount to bc
(1)  619/     259 : FD 46 0D            		ld	b,(iy+(trk_Rows+1))
(1)  620/     25C :                     .row_active:
(1)  621/     25C : CF                  		rst	8
(1)  622/     25D : FD 6E 0A            		ld	l,(iy+trk_Read)		; hl - CURRENT pattern to read
(1)  623/     260 : FD 66 0B            		ld	h,(iy+((trk_Read+1)))
(1)  624/     263 :                     
(1)  625/     263 :                     ; --------------------------------
(1)  626/     263 :                     ; Main read-loop
(1)  627/     263 :                     ; --------------------------------
(1)  628/     263 :                     
(1)  629/     263 :                     .next_note:
(1)  630/     263 : FD 7E 0E            		ld	a,(iy+trk_rowPause)	; Check rowtimer
(1)  631/     266 : B7                  		or	a
(1)  632/     267 : 20 16               		jr	nz,.decrow
(1)  633/     269 : 7E                  		ld	a,(hl)			; Check if byte is a timer or a note
(1)  634/     26A : B7                  		or	a
(1)  635/     26B : 28 06               		jr	z,.exit			; If == 00h: exit
(1)  636/     26D : FA 8A 02            		jp	m,.has_note		; If 80h-0FFh: Note data
(1)  637/     270 : FD 77 0E            		ld	(iy+trk_rowPause),a	; If 01h-07Fh: Row-pause timer
(1)  638/     273 :                     
(1)  639/     273 :                     ; --------------------------------
(1)  640/     273 :                     ; Exit
(1)  641/     273 :                     ; --------------------------------
(1)  642/     273 :                     
(1)  643/     273 :                     .exit:
(1)  644/     273 : CF                  		rst	8
(1)  645/     274 : CD 8A 03            		call	.inc_cpatt		; * Increment patt pos
(1)  646/     277 : FD 75 0A            		ld	(iy+trk_Read),l		; Update READ location
(1)  647/     27A : FD 74 0B            		ld	(iy+((trk_Read+1))),h
(1)  648/     27D : 18 03               		jr	.decrow_e
(1)  649/     27F :                     .decrow:
(1)  650/     27F : FD 35 0E            		dec	(iy+trk_rowPause)	; Decrement row-pause timer
(1)  651/     282 :                     .decrow_e:
(1)  652/     282 : 0B                  		dec	bc			; Decrement rowcount
(1)  653/     283 : FD 71 0C            		ld	(iy+trk_Rows),c		; Write last row to memory
(1)  654/     286 : FD 70 0D            		ld	(iy+(trk_Rows+1)),b
(1)  655/     289 :                     ; 		ld	c,(iy+trk_VolMaster)
(1)  656/     289 :                     ; 		bit	7,c
(1)  657/     289 :                     ; 		ret	z			; No volume changes.
(1)  658/     289 :                     ;
(1)  659/     289 :                     ; 		ld	ix,trkChnls
(1)  660/     289 :                     ; 		rst	8
(1)  661/     289 :                     ; 		push	iy			; Do volume changes for this slot
(1)  662/     289 :                     ; 		pop	hl
(1)  663/     289 :                     ; 		ld	de,trk_ChnIndx
(1)  664/     289 :                     ; 		add	hl,de			; hl - track indexes
(1)  665/     289 :                     ; 		ld	b,(iy+trk_MaxChnl)
(1)  666/     289 :                     ;
(1)  667/     289 :                     ; .next_indx:
(1)  668/     289 :                     ; 		ld	a,(hl)
(1)  669/     289 :                     ; 		or	a
(1)  670/     289 :                     ; 		jr	z,.no_indxv
(1)  671/     289 :                     ; 		push	ix
(1)  672/     289 :                     ; 		add	a,a			; * 8
(1)  673/     289 :                     ; 		add	a,a
(1)  674/     289 :                     ; 		add	a,a
(1)  675/     289 :                     ; 		ld	e,a
(1)  676/     289 :                     ; 		add	ix,de
(1)  677/     289 :                     ; 		ld	a,(ix+chnl_Vol)
(1)  678/     289 :                     ; 		add	a,c
(1)  679/     289 :                     ; 		ld	e,40h
(1)  680/     289 :                     ; 		cp	a
(1)  681/     289 :                     ; 		jr	c,.max_out
(1)  682/     289 :                     ; 		ld	a,c
(1)  683/     289 :                     ; .max_out
(1)  684/     289 :                     ; 		ld	(ix+chnl_Vol),a
(1)  685/     289 :                     ; 		pop	ix
(1)  686/     289 :                     ; .no_indxv:
(1)  687/     289 :                     ; 		rst	8
(1)  688/     289 :                     ; 		inc	hl
(1)  689/     289 :                     ; 		nop
(1)  690/     289 :                     ; 		djnz	.next_indx
(1)  691/     289 : C9                  		ret				; Exit.
(1)  692/     28A :                     
(1)  693/     28A :                     ; --------------------------------
(1)  694/     28A :                     ; New note request
(1)  695/     28A :                     ;
(1)  696/     28A :                     ; a - %1tcccccc
(1)  697/     28A :                     ;   | t - type setup
(1)  698/     28A :                     ;   | c - channel
(1)  699/     28A :                     ; --------------------------------
(1)  700/     28A :                     
(1)  701/     28A :                     .has_note:
(1)  702/     28A : CF                  		rst	8
(1)  703/     28B : C5                  		push	bc			; Save rowcount
(1)  704/     28C : 4F                  		ld	c,a			; Copy patt byte control to c
(1)  705/     28D : CD 8A 03            		call	.inc_cpatt		; * Increment patt pos
(1)  706/     290 : E5                  		push	hl			; Save hl patt pos
(1)  707/     291 : FD E5               		push	iy
(1)  708/     293 : E1                  		pop	hl
(1)  709/     294 : DD 21 00 1E         		ld	ix,trkChnls		; ix - Channels buffer
(1)  710/     298 : 11 24 00            		ld	de,trk_ChnIndx		; <-- this also clears d
(1)  711/     29B : CF                  		rst	8
(1)  712/     29C : 19                  		add	hl,de			; hl - Track's index points buffer
(1)  713/     29D : 79                  		ld	a,c			; Get patt note position
(1)  714/     29E : E6 1F               		and	00011111b		; Filter index bits
(1)  715/     2A0 : 5F                  		ld	e,a			; Save as e
(1)  716/     2A1 : 19                  		add	hl,de			; Increment more by this pos
(1)  717/     2A2 : 7E                  		ld	a,(hl)			; Check if this index is occupied.
(1)  718/     2A3 : B7                  		or	a
(1)  719/     2A4 : 28 0A               		jr	z,.srch_new		; If == 0, new index
(1)  720/     2A6 : E6 1F               		and	00011111b		; If already used, read that channel
(1)  721/     2A8 : 87                  		add	a,a
(1)  722/     2A9 : 87                  		add	a,a
(1)  723/     2AA : 87                  		add	a,a
(1)  724/     2AB : 5F                  		ld	e,a
(1)  725/     2AC : DD 19               		add	ix,de
(1)  726/     2AE : 18 2B               		jr	.cont_chnl
(1)  727/     2B0 :                     
(1)  728/     2B0 :                     ; Make NEW channel
(1)  729/     2B0 :                     ; ix - channel list start
(1)  730/     2B0 :                     .srch_new:
(1)  731/     2B0 : CF                  		rst	8
(1)  732/     2B1 : 06 1F               		ld	b,MAX_TRKCHN-1	; Max channels to check - 1
(1)  733/     2B3 : 16 00               		ld	d,0		; Reset out index
(1)  734/     2B5 :                     .next_chnl:
(1)  735/     2B5 : DD 7E 00            		ld	a,(ix)		; Read chnl_Flags
(1)  736/     2B8 : B7                  		or	a		; If plus, track channel is free
(1)  737/     2B9 : F2 D0 02            		jp	p,.chnl_free
(1)  738/     2BC : DD 23               		inc	ix		; Search next channel, increment by 8
(1)  739/     2BE : DD 23               		inc	ix
(1)  740/     2C0 : DD 23               		inc	ix
(1)  741/     2C2 : DD 23               		inc	ix
(1)  742/     2C4 : CF                  		rst	8
(1)  743/     2C5 : DD 23               		inc	ix
(1)  744/     2C7 : DD 23               		inc	ix
(1)  745/     2C9 : DD 23               		inc	ix
(1)  746/     2CB : DD 23               		inc	ix
(1)  747/     2CD : 14                  		inc	d		; Increment out index
(1)  748/     2CE : 10 E5               		djnz	.next_chnl
(1)  749/     2D0 :                     .chnl_free:
(1)  750/     2D0 : CF                  		rst	8
(1)  751/     2D1 : 7A                  		ld	a,d			; Read index we got
(1)  752/     2D2 : E6 1F               		and	00011111b		; Filter bits
(1)  753/     2D4 : F6 80               		or	10000000b		; + set as used
(1)  754/     2D6 : 77                  		ld	(hl),a			; Write index slot
(1)  755/     2D7 : DD CB 00 FE         		set	7,(ix+chnl_Flags)	; Enable channel on the list
(1)  756/     2DB :                     .cont_chnl:
(1)  757/     2DB : E1                  		pop	hl			; Recover patt pos
(1)  758/     2DC :                     	; ix - current channel
(1)  759/     2DC : CF                  		rst	8
(1)  760/     2DD : DD 46 07            		ld	b,(ix+chnl_Type)	; b - current TYPE byte
(1)  761/     2E0 : CB 71               		bit	6,c			; This byte has new TYPE setting?
(1)  762/     2E2 : 28 08               		jr	z,.old_type
(1)  763/     2E4 : 7E                  		ld	a,(hl)
(1)  764/     2E5 : DD 77 07            		ld	(ix+chnl_Type),a	; Update TYPE byte
(1)  765/     2E8 : 47                  		ld	b,a			; Set to b
(1)  766/     2E9 : CD 8A 03            		call	.inc_cpatt		; Next patt pos
(1)  767/     2EC :                     .old_type:
(1)  768/     2EC :                     	; b - evinEVIN
(1)  769/     2EC :                     	;     E-effect/V-volume/I-instrument/N-note
(1)  770/     2EC :                     	;     evin: byte is already stored on track-channel buffer
(1)  771/     2EC :                     	;     EVIN: next byte(s) contain a new value. for eff:2 bytes
(1)  772/     2EC :                     
(1)  773/     2EC : CF                  		rst	8
(1)  774/     2ED : CB 40               		bit	0,b			; New NOTE?
(1)  775/     2EF : 28 07               		jr	z,.no_note
(1)  776/     2F1 : 7E                  		ld	a,(hl)			; Set NOTE and increment patt
(1)  777/     2F2 : DD 77 02            		ld	(ix+chnl_Note),a
(1)  778/     2F5 : CD 8A 03            		call	.inc_cpatt
(1)  779/     2F8 :                     .no_note:
(1)  780/     2F8 : CB 48               		bit	1,b			; New INS?
(1)  781/     2FA : 28 07               		jr	z,.no_ins
(1)  782/     2FC : 7E                  		ld	a,(hl)			; Set INS and increment patt
(1)  783/     2FD : DD 77 03            		ld	(ix+chnl_Ins),a
(1)  784/     300 : CD 8A 03            		call	.inc_cpatt
(1)  785/     303 :                     .no_ins:
(1)  786/     303 : CB 50               		bit	2,b			; New VOL?
(1)  787/     305 : 28 07               		jr	z,.no_vol
(1)  788/     307 : 7E                  		ld	a,(hl)			; Set VOL and increment patt
(1)  789/     308 : DD 77 04            		ld	(ix+chnl_Vol),a
(1)  790/     30B : CD 8A 03            		call	.inc_cpatt
(1)  791/     30E :                     .no_vol:
(1)  792/     30E : CB 58               		bit	3,b			; New EFFECT?
(1)  793/     310 : 28 0F               		jr	z,.no_eff
(1)  794/     312 : 7E                  		ld	a,(hl)			; Set EFFECT ID, incr patt
(1)  795/     313 : DD 77 05            		ld	(ix+chnl_EffId),a
(1)  796/     316 : CD 8A 03            		call	.inc_cpatt
(1)  797/     319 : CF                  		rst	8
(1)  798/     31A : 7E                  		ld	a,(hl)			; Set EFFECT ARG, incr patt
(1)  799/     31B : DD 77 06            		ld	(ix+chnl_EffArg),a
(1)  800/     31E : CD 8A 03            		call	.inc_cpatt
(1)  801/     321 :                     .no_eff:
(1)  802/     321 : 78                  		ld	a,b			; Merge the Impulse evin bits into main EVIN bits
(1)  803/     322 : 0F                  		rrca
(1)  804/     323 : 0F                  		rrca
(1)  805/     324 : 0F                  		rrca
(1)  806/     325 : 0F                  		rrca
(1)  807/     326 : E6 0F               		and	00001111b		; Filter bits
(1)  808/     328 : 4F                  		ld	c,a			; Save as c
(1)  809/     329 : 78                  		ld	a,b
(1)  810/     32A : E6 0F               		and	00001111b		; Filter again
(1)  811/     32C : B1                  		or	c			; Merge c with a
(1)  812/     32D : CF                  		rst	8
(1)  813/     32E : 4F                  		ld	c,a			; Save bit flags
(1)  814/     32F : DD 7E 00            		ld	a,(ix+chnl_Flags)
(1)  815/     332 : B1                  		or	c
(1)  816/     333 : DD 77 00            		ld	(ix+chnl_Flags),a
(1)  817/     336 :                     	; Check for effects that affect
(1)  818/     336 :                     	; internal playback:
(1)  819/     336 :                     	; Jump, Ticks, etc.
(1)  820/     336 : C1                  		pop	bc		; Restore rowcount
(1)  821/     337 : DD 7E 00            		ld	a,(ix+chnl_Flags)
(1)  822/     33A : E6 08               		and	1000b		; ONLY check for the EFFECT bit
(1)  823/     33C : CA 63 02            		jp	z,.next_note
(1)  824/     33F : DD 7E 05            		ld	a,(ix+chnl_EffId)
(1)  825/     342 : B7                  		or	a		; 00h = invalid effect
(1)  826/     343 : CA 63 02            		jp	z,.next_note
(1)  827/     346 :                     
(1)  828/     346 :                     	; TODO: cambiar esto por jumps
(1)  829/     346 : FE 01               		cp	1		; Effect A: Tick set
(1)  830/     348 : CC 58 03            		call	z,.eff_A
(1)  831/     34B : FE 02               		cp	2		; Effect B: Position Jump
(1)  832/     34D : CC 69 03            		call	z,.eff_B
(1)  833/     350 : FE 03               		cp	3		; Effect C: Pattern break
(1)  834/     352 : CA 87 03            		jp	z,.eff_C	; <-- JUMP and exit.
(1)  835/     355 : C3 63 02            		jp	.next_note
(1)  836/     358 :                     
(1)  837/     358 :                     ; ----------------------------------------
(1)  838/     358 :                     ; Effect A: Set ticks
(1)  839/     358 :                     ; ----------------------------------------
(1)  840/     358 :                     
(1)  841/     358 :                     .eff_A:
(1)  842/     358 : F5                  		push	af
(1)  843/     359 : CF                  		rst	8
(1)  844/     35A : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - ticks number
(1)  845/     35D : FD 73 03            		ld	(iy+trk_TickSet),e	; set for both Set and Timer.
(1)  846/     360 : FD 73 0F            		ld	(iy+trk_tickTmr),e
(1)  847/     363 : DD CB 00 9E         		res	3,(ix+chnl_Flags)	; <-- Clear EFFECT bit
(1)  848/     367 : F1                  		pop	af
(1)  849/     368 : C9                  		ret
(1)  850/     369 :                     
(1)  851/     369 :                     ; ----------------------------------------
(1)  852/     369 :                     ; Effect B: jump to a new block
(1)  853/     369 :                     ; ----------------------------------------
(1)  854/     369 :                     
(1)  855/     369 :                     .eff_B:
(1)  856/     369 : F5                  		push	af			; Save Flagbits
(1)  857/     36A : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - Block SLOT to jump
(1)  858/     36D : FD 73 10            		ld 	(iy+trk_currBlk),e
(1)  859/     370 : CF                  		rst	8
(1)  860/     371 : FD 36 0E 00         		ld	(iy+trk_rowPause),0	; Reset rowpause
(1)  861/     375 : DD CB 00 9E         		res	3,(ix+chnl_Flags)	; <-- Clear EFFECT bit
(1)  862/     379 : FD CB 00 EE         		set	5,(iy+trk_Status)	; set fill-from-effect flag on exit
(1)  863/     37D : 3E 80               		ld	a,80h
(1)  864/     37F : FD 77 13            		ld	(iy+trk_BankHeads),a
(1)  865/     382 : FD 77 14            		ld	(iy+trk_BankBlk),a
(1)  866/     385 : F1                  		pop	af
(1)  867/     386 : C9                  		ret
(1)  868/     387 :                     
(1)  869/     387 :                     ; ----------------------------------------
(1)  870/     387 :                     ; Effect C: Pattern break/exit
(1)  871/     387 :                     ;
(1)  872/     387 :                     ; Only used on SFX, arguments ignored.
(1)  873/     387 :                     ; ----------------------------------------
(1)  874/     387 :                     
(1)  875/     387 :                     .eff_C:
(1)  876/     387 : C3 9B 04            		jp	.track_end
(1)  877/     38A :                     
(1)  878/     38A :                     ; ----------------------------------------
(1)  879/     38A :                     ; Increment the current patt position
(1)  880/     38A :                     ; and recieve more data
(1)  881/     38A :                     ;
(1)  882/     38A :                     ; Breaks:
(1)  883/     38A :                     ; a,e
(1)  884/     38A :                     ; ----------------------------------------
(1)  885/     38A :                     
(1)  886/     38A :                     .inc_cpatt:
(1)  887/     38A : FD 5E 08            		ld	e,(iy+trk_Cach)	; Read curret cache LSB
(1)  888/     38D : 7D                  		ld	a,l
(1)  889/     38E : 3C                  		inc	a
(1)  890/     38F : E6 1F               		and	MAX_RCACH-1
(1)  891/     391 : FE 1E               		cp	MAX_RCACH-2	; RAN OUT of bytes?
(1)  892/     393 : 30 03               		jr	nc,.ran_out
(1)  893/     395 : B3                  		or	e
(1)  894/     396 : 6F                  		ld	l,a
(1)  895/     397 : C9                  		ret
(1)  896/     398 :                     .ran_out:
(1)  897/     398 : FD 6E 08            		ld	l,(iy+trk_Cach)
(1)  898/     39B : E5                  		push	hl
(1)  899/     39C : C5                  		push	bc
(1)  900/     39D : 06 00               		ld	b,0
(1)  901/     39F : 4F                  		ld	c,a
(1)  902/     3A0 : CF                  		rst	8
(1)  903/     3A1 : 5D                  		ld	e,l
(1)  904/     3A2 : 54                  		ld	d,h
(1)  905/     3A3 : FD 6E 18            		ld	l,(iy+trk_RomPattRead)
(1)  906/     3A6 : FD 66 19            		ld	h,(iy+(trk_RomPattRead+1))
(1)  907/     3A9 : FD 7E 1A            		ld	a,(iy+(trk_RomPattRead+2))
(1)  908/     3AC : 09                  		add	hl,bc
(1)  909/     3AD : CE 00               		adc	a,0
(1)  910/     3AF : FD 75 18            		ld	(iy+trk_RomPattRead),l
(1)  911/     3B2 : FD 74 19            		ld	(iy+(trk_RomPattRead+1)),h
(1)  912/     3B5 : CF                  		rst	8
(1)  913/     3B6 : FD 77 1A            		ld	(iy+(trk_RomPattRead+2)),a
(1)  914/     3B9 : 01 20 00            		ld	bc,MAX_RCACH
(1)  915/     3BC : CD 84 10            		call	transferRom	; *** ROM ACCESS ***
(1)  916/     3BF : C1                  		pop	bc
(1)  917/     3C0 : E1                  		pop	hl
(1)  918/     3C1 : C9                  		ret
(1)  919/     3C2 :                     
(1)  920/     3C2 :                     ; ----------------------------------------
(1)  921/     3C2 :                     ; Set track pattern by trk_currBlk
(1)  922/     3C2 :                     ; ----------------------------------------
(1)  923/     3C2 :                     
(1)  924/     3C2 :                     .set_track:
(1)  925/     3C2 : FD 5E 04            		ld	e,(iy+trk_Blocks)
(1)  926/     3C5 : FD 56 05            		ld	d,(iy+(trk_Blocks+1))
(1)  927/     3C8 : FD 7E 10            		ld	a,(iy+trk_currBlk)
(1)  928/     3CB : 4F                  		ld	c,a
(1)  929/     3CC : C5                  		push	bc
(1)  930/     3CD : D5                  		push	de
(1)  931/     3CE : CF                  		rst	8
(1)  932/     3CF : 0F                  		rrca
(1)  933/     3D0 : 0F                  		rrca
(1)  934/     3D1 : 0F                  		rrca
(1)  935/     3D2 : E6 1F               		and	00011111b
(1)  936/     3D4 : FD 4E 14            		ld	c,(iy+trk_BankBlk)	; c - current block bank
(1)  937/     3D7 : CB 79               		bit	7,c			; First time?
(1)  938/     3D9 : 20 03               		jr	nz,.first_blk
(1)  939/     3DB : B9                  		cp	c			; SAME instrument data?
(1)  940/     3DC : 28 1E               		jr	z,.keep_blk
(1)  941/     3DE :                     .first_blk:
(1)  942/     3DE : CF                  		rst	8
(1)  943/     3DF : FD 77 14            		ld	(iy+trk_BankBlk),a	; Save inst number
(1)  944/     3E2 : 07                  		rlca
(1)  945/     3E3 : 07                  		rlca
(1)  946/     3E4 : 07                  		rlca
(1)  947/     3E5 : 06 00               		ld	b,0
(1)  948/     3E7 : 4F                  		ld	c,a
(1)  949/     3E8 : FD 6E 21            		ld	l,(iy+trk_RomBlks)	; Transfer FIRST patt
(1)  950/     3EB : FD 66 22            		ld	h,(iy+(trk_RomBlks+1))	; packet
(1)  951/     3EE : FD 7E 23            		ld	a,(iy+(trk_RomBlks+2))
(1)  952/     3F1 : E7                  		rst	20h
(1)  953/     3F2 : CF                  		rst	8
(1)  954/     3F3 : 09                  		add	hl,bc
(1)  955/     3F4 : CE 00               		adc	a,0
(1)  956/     3F6 : 01 08 00            		ld	bc,8			; 8 blocks stored
(1)  957/     3F9 : CD 84 10            		call	transferRom		; ** ROM ACCESS **
(1)  958/     3FC :                     .keep_blk:
(1)  959/     3FC : E1                  		pop	hl
(1)  960/     3FD : C1                  		pop	bc
(1)  961/     3FE : 79                  		ld	a,c
(1)  962/     3FF : E6 07               		and	00000111b
(1)  963/     401 : CF                  		rst	8
(1)  964/     402 : 16 00               		ld	d,0
(1)  965/     404 : 5F                  		ld	e,a
(1)  966/     405 : 19                  		add	hl,de
(1)  967/     406 : 7E                  		ld	a,(hl)			; Read byte
(1)  968/     407 : FE FF               		cp	-1			; If block == -1, end track
(1)  969/     409 : CA 9B 04            		jp	z,.track_end
(1)  970/     40C : CF                  		rst	8
(1)  971/     40D :                     
(1)  972/     40D : FD 5E 06            		ld	e,(iy+trk_Patt)		; Read CACHE patt heads
(1)  973/     410 : FD 56 07            		ld	d,(iy+(trk_Patt+1))
(1)  974/     413 : 4F                  		ld	c,a
(1)  975/     414 : D5                  		push	de
(1)  976/     415 : C5                  		push	bc
(1)  977/     416 : CF                  		rst	8
(1)  978/     417 : 0F                  		rrca
(1)  979/     418 : 0F                  		rrca
(1)  980/     419 : 0F                  		rrca
(1)  981/     41A : E6 1F               		and	00011111b
(1)  982/     41C : FD 4E 13            		ld	c,(iy+trk_BankHeads)	; c - current intrument loaded
(1)  983/     41F : CB 79               		bit	7,c			; First time?
(1)  984/     421 : 20 03               		jr	nz,.first_head
(1)  985/     423 : B9                  		cp	c			; SAME instrument data?
(1)  986/     424 : 28 26               		jr	z,.keep_it
(1)  987/     426 :                     .first_head:
(1)  988/     426 : CF                  		rst	8
(1)  989/     427 : FD 77 13            		ld	(iy+trk_BankHeads),a	; Save inst number
(1)  990/     42A : 47                  		ld	b,a
(1)  991/     42B : 0F                  		rrca
(1)  992/     42C : 0F                  		rrca
(1)  993/     42D : 0F                  		rrca
(1)  994/     42E : E6 E0               		and	11100000b
(1)  995/     430 : 4F                  		ld	c,a
(1)  996/     431 : 78                  		ld	a,b
(1)  997/     432 : 0F                  		rrca
(1)  998/     433 : 0F                  		rrca
(1)  999/     434 : 0F                  		rrca
(1) 1000/     435 : E6 03               		and	00000011b
(1) 1001/     437 : 47                  		ld	b,a
(1) 1002/     438 :                     
(1) 1003/     438 : FD 6E 1B            		ld	l,(iy+trk_RomPatt)	; Transfer FIRST patt
(1) 1004/     43B : FD 66 1C            		ld	h,(iy+(trk_RomPatt+1))	; packet
(1) 1005/     43E : FD 7E 1D            		ld	a,(iy+(trk_RomPatt+2))
(1) 1006/     441 : E7                  		rst	20h
(1) 1007/     442 : CF                  		rst	8
(1) 1008/     443 : 09                  		add	hl,bc
(1) 1009/     444 : CE 00               		adc	a,0
(1) 1010/     446 : 01 20 00            		ld	bc,4*8			; 8 heads stored
(1) 1011/     449 : CD 84 10            		call	transferRom		; ** ROM ACCESS **
(1) 1012/     44C :                     .keep_it:
(1) 1013/     44C : C1                  		pop	bc
(1) 1014/     44D : 79                  		ld	a,c
(1) 1015/     44E : E6 07               		and	00000111b
(1) 1016/     450 : 87                  		add	a,a
(1) 1017/     451 : 87                  		add	a,a
(1) 1018/     452 : 57                  		ld	d,a
(1) 1019/     453 : CF                  		rst	8
(1) 1020/     454 : E6 FC               		and	11111100b
(1) 1021/     456 : 5F                  		ld	e,a
(1) 1022/     457 : 7A                  		ld	a,d
(1) 1023/     458 : E6 03               		and	00000011b
(1) 1024/     45A : 57                  		ld	d,a
(1) 1025/     45B : E1                  		pop	hl
(1) 1026/     45C : 19                  		add	hl,de
(1) 1027/     45D : 5E                  		ld	e,(hl)			; de - Pos
(1) 1028/     45E : 23                  		inc	hl
(1) 1029/     45F : CF                  		rst	8
(1) 1030/     460 : 56                  		ld	d,(hl)
(1) 1031/     461 : 23                  		inc	hl
(1) 1032/     462 : 7E                  		ld	a,(hl)
(1) 1033/     463 : 23                  		inc	hl
(1) 1034/     464 : FD 77 0C            		ld	(iy+trk_Rows),a
(1) 1035/     467 : 7E                  		ld	a,(hl)
(1) 1036/     468 : 23                  		inc	hl
(1) 1037/     469 : FD 77 0D            		ld	(iy+(trk_Rows+1)),a
(1) 1038/     46C : FD 6E 1B            		ld	l,(iy+trk_RomPatt)	; Transfer FIRST patt
(1) 1039/     46F : FD 66 1C            		ld	h,(iy+(trk_RomPatt+1))	; packet
(1) 1040/     472 : CF                  		rst	8
(1) 1041/     473 : FD 7E 1D            		ld	a,(iy+(trk_RomPatt+2))
(1) 1042/     476 : 19                  		add	hl,de
(1) 1043/     477 : CE 00               		adc	a,0
(1) 1044/     479 : FD 75 18            		ld	(iy+trk_RomPattRead),l
(1) 1045/     47C : FD 74 19            		ld	(iy+(trk_RomPattRead+1)),h
(1) 1046/     47F : FD 77 1A            		ld	(iy+(trk_RomPattRead+2)),a
(1) 1047/     482 : FD 5E 08            		ld	e,(iy+trk_Cach)
(1) 1048/     485 : FD 56 09            		ld	d,(iy+(trk_Cach+1))
(1) 1049/     488 :                     
(1) 1050/     488 : FD 73 0A            		ld	(iy+trk_Read),e
(1) 1051/     48B : FD 72 0B            		ld	(iy+(trk_Read+1)),d
(1) 1052/     48E : 0E 20               		ld	c,MAX_RCACH
(1) 1053/     490 : FD 36 0D 00         		ld	(iy+trk_cachHalf),0
(1) 1054/     494 : FD 36 0E 00         		ld	(iy+trk_rowPause),0
(1) 1055/     498 : C3 84 10            		jp	transferRom		; ** ROM access **
(1) 1056/     49B :                     
(1) 1057/     49B :                     ; ----------------------------------------
(1) 1058/     49B :                     ; **JUMP ONLY**
(1) 1059/     49B :                     .track_end:
(1) 1060/     49B : CD 4A 05            		call	track_out
(1) 1061/     49E : CF                  		rst	8
(1) 1062/     49F : AF                  		xor	a
(1) 1063/     4A0 : FD 77 0E            		ld	(iy+trk_rowPause),a
(1) 1064/     4A3 : FD 77 0F            		ld	(iy+trk_tickTmr),a
(1) 1065/     4A6 : FD 77 00            		ld	(iy+trk_Status),a	; Disable track slot
(1) 1066/     4A9 : FD 36 12 80         		ld	(iy+trk_BankIns),80h
(1) 1067/     4AD : C9                  		ret
(1) 1068/     4AE :                     
(1) 1069/     4AE :                     ; ----------------------------------------
(1) 1070/     4AE :                     ; Track refill
(1) 1071/     4AE :                     ; ----------------------------------------
(1) 1072/     4AE :                     
(1) 1073/     4AE :                     .effect_fill:
(1) 1074/     4AE : FD CB 00 AE         		res	5,(iy+trk_Status)	; Reset refill-from-effect flag
(1) 1075/     4B2 : C3 C2 03            		jp	.set_track
(1) 1076/     4B5 :                     
(1) 1077/     4B5 :                     ; ----------------------------------------
(1) 1078/     4B5 :                     ; Track Start/Reset
(1) 1079/     4B5 :                     ;
(1) 1080/     4B5 :                     ; iy - Track buffer
(1) 1081/     4B5 :                     ; ----------------------------------------
(1) 1082/     4B5 :                     
(1) 1083/     4B5 :                     .first_fill:
(1) 1084/     4B5 : FD CB 00 B6         		res	6,(iy+trk_Status)	; Clear FILL flag
(1) 1085/     4B9 : CD 4A 05            		call	track_out
(1) 1086/     4BC : FD 36 0F 01         		ld	(iy+trk_tickTmr),1	; <-- Reset tick timer
(1) 1087/     4C0 : FD 7E 02            		ld	a,(iy+trk_SetBlk)	; Make start block as current block
(1) 1088/     4C3 : CF                  		rst	8
(1) 1089/     4C4 : FD 77 10            		ld 	(iy+trk_currBlk),a	; block
(1) 1090/     4C7 : 11 00 00            		ld	de,0
(1) 1091/     4CA : 21 68 1B            		ld	hl,trkListCach		; Read MASTER Nikona track list
(1) 1092/     4CD : FD 7E 01            		ld	a,(iy+trk_SeqId)
(1) 1093/     4D0 : E6 07               		and	00000111b		; Filter sequence bits
(1) 1094/     4D2 : 87                  		add	a,a			; *4
(1) 1095/     4D3 : CF                  		rst	8
(1) 1096/     4D4 : 87                  		add	a,a
(1) 1097/     4D5 : 5F                  		ld	e,a
(1) 1098/     4D6 : 19                  		add	hl,de
(1) 1099/     4D7 : 7E                  		ld	a,(hl)
(1) 1100/     4D8 : 23                  		inc	hl
(1) 1101/     4D9 : CB 7F               		bit	7,a
(1) 1102/     4DB : 28 04               		jr	z,.no_glbl
(1) 1103/     4DD : FD CB 00 C6         		set	0,(iy+trk_Status)	; Enable GLOBAL sub-beats
(1) 1104/     4E1 :                     .no_glbl:
(1) 1105/     4E1 : CF                  		rst	8
(1) 1106/     4E2 : E6 7F               		and	01111111b
(1) 1107/     4E4 : FD 77 03            		ld	(iy+trk_TickSet),a
(1) 1108/     4E7 : 7E                  		ld	a,(hl)			; Read and temporally
(1) 1109/     4E8 : 23                  		inc	hl			; grab it's pointers
(1) 1110/     4E9 : 4E                  		ld	c,(hl)
(1) 1111/     4EA : 23                  		inc	hl
(1) 1112/     4EB : 6E                  		ld	l,(hl)
(1) 1113/     4EC : 61                  		ld	h,c
(1) 1114/     4ED : 11 A4 1F            		ld	de,headerOut
(1) 1115/     4F0 : 0E 0E               		ld	c,0Eh
(1) 1116/     4F2 : CD 84 10            		call	transferRom		; ** ROM access **
(1) 1117/     4F5 : DD 21 B1 1F         		ld	ix,headerOut_e-1	; Read temp header BACKWARDS
(1) 1118/     4F9 : CF                  		rst	8
(1) 1119/     4FA :                     
(1) 1120/     4FA :                     	; headerOut:
(1) 1121/     4FA :                     	; dc.w numof_chnls
(1) 1122/     4FA :                     	; dc.l .blk,.pat,.ins
(1) 1123/     4FA :                     	; *** READING BACKWARDS
(1) 1124/     4FA : CD 37 05            		call	.grab_rhead		; Instrument data
(1) 1125/     4FD : FD 75 1E            		ld	(iy+trk_RomInst),l
(1) 1126/     500 : FD 74 1F            		ld	(iy+(trk_RomInst+1)),h
(1) 1127/     503 : FD 70 20            		ld	(iy+(trk_RomInst+2)),b
(1) 1128/     506 : FD 36 12 80         		ld	(iy+trk_BankIns),80h	; Reset instrument banking
(1) 1129/     50A : E7                  		rst	20h
(1) 1130/     50B : CF                  		rst	8
(1) 1131/     50C : CD 37 05            		call	.grab_rhead		; Pattern heads
(1) 1132/     50F : FD 75 1B            		ld	(iy+trk_RomPatt),l	; Save ROM patt base
(1) 1133/     512 : FD 74 1C            		ld	(iy+(trk_RomPatt+1)),h
(1) 1134/     515 : FD 70 1D            		ld	(iy+(trk_RomPatt+2)),b
(1) 1135/     518 : FD 36 13 80         		ld	(iy+trk_BankHeads),80h	; Reset pattern banking
(1) 1136/     51C : CF                  		rst	8
(1) 1137/     51D : CD 37 05            		call	.grab_rhead		; Block data
(1) 1138/     520 : FD 75 21            		ld	(iy+trk_RomBlks),l	; Save ROM patt base
(1) 1139/     523 : FD 74 22            		ld	(iy+(trk_RomBlks+1)),h
(1) 1140/     526 : FD 70 23            		ld	(iy+(trk_RomBlks+2)),b
(1) 1141/     529 : FD 36 14 80         		ld	(iy+trk_BankBlk),80h	; Reset pattern banking
(1) 1142/     52D : CF                  		rst	8
(1) 1143/     52E : DD 7E 00            		ld	a,(ix)			; dc.w numof_chnls
(1) 1144/     531 : FD 77 15            		ld	(iy+trk_MaxChnl),a
(1) 1145/     534 : C3 C2 03            		jp	.set_track
(1) 1146/     537 :                     
(1) 1147/     537 :                     ; Read 68K pointer:
(1) 1148/     537 :                     ; hl - 00xxxx
(1) 1149/     537 :                     ;  b - xx0000
(1) 1150/     537 :                     .grab_rhead:
(1) 1151/     537 : DD 6E 00            		ld	l,(ix)
(1) 1152/     53A : DD 2B               		dec	ix
(1) 1153/     53C : DD 66 00            		ld	h,(ix)
(1) 1154/     53F : CF                  		rst	8
(1) 1155/     540 : DD 2B               		dec	ix
(1) 1156/     542 : DD 46 00            		ld	b,(ix)
(1) 1157/     545 : DD 2B               		dec	ix
(1) 1158/     547 :                     ; 		ld	c,(ix)
(1) 1159/     547 : DD 2B               		dec	ix
(1) 1160/     549 : C9                  		ret
(1) 1161/     54A :                     
(1) 1162/     54A :                     ; ----------------------------------------
(1) 1163/     54A :                     ; Reset tracker channels
(1) 1164/     54A :                     ;
(1) 1165/     54A :                     ; iy - Track buffer
(1) 1166/     54A :                     ;
(1) 1167/     54A :                     ; Breaks:
(1) 1168/     54A :                     ; ix
(1) 1169/     54A :                     ; ----------------------------------------
(1) 1170/     54A :                     
(1) 1171/     54A :                     ; ----------------------------------------
(1) 1172/     54A :                     ; Reset tracker channels
(1) 1173/     54A :                     ;
(1) 1174/     54A :                     ; iy - Track buffer
(1) 1175/     54A :                     ;
(1) 1176/     54A :                     ; Breaks:
(1) 1177/     54A :                     ; b ,de,hl,ix
(1) 1178/     54A :                     ; ----------------------------------------
(1) 1179/     54A :                     
(1) 1180/     54A :                     track_out:
(1) 1181/     54A : FD E5               		push	iy
(1) 1182/     54C : E1                  		pop	hl
(1) 1183/     54D : DD 21 00 1E         		ld	ix,trkChnls
(1) 1184/     551 : CF                  		rst	8
(1) 1185/     552 : 11 24 00            		ld	de,trk_ChnIndx
(1) 1186/     555 : 19                  		add	hl,de
(1) 1187/     556 : 06 1A               		ld	b,MAX_TRKINDX
(1) 1188/     558 :                     .indx_del:
(1) 1189/     558 : 7E                  		ld	a,(hl)
(1) 1190/     559 : B7                  		or	a
(1) 1191/     55A : 28 2E               		jr	z,.nothin
(1) 1192/     55C : CF                  		rst	8
(1) 1193/     55D : DD E5               		push	ix
(1) 1194/     55F : E6 1F               		and	00011111b
(1) 1195/     561 : 87                  		add	a,a
(1) 1196/     562 : 87                  		add	a,a
(1) 1197/     563 : 87                  		add	a,a
(1) 1198/     564 : 5F                  		ld	e,a
(1) 1199/     565 : CF                  		rst	8
(1) 1200/     566 : DD 19               		add	ix,de
(1) 1201/     568 : DD 36 02 FE         		ld	(ix+chnl_Note),-2
(1) 1202/     56C : DD 36 00 01         		ld	(ix+chnl_Flags),1
(1) 1203/     570 : DD 36 04 40         		ld	(ix+chnl_Vol),64
(1) 1204/     574 : DD 36 05 00         		ld	(ix+chnl_EffId),0
(1) 1205/     578 : CF                  		rst	8
(1) 1206/     579 : DD 36 06 00         		ld	(ix+chnl_EffArg),0
(1) 1207/     57D : DD 36 03 00         		ld	(ix+chnl_Ins),0
(1) 1208/     581 : DD 36 07 00         		ld	(ix+chnl_Type),0
(1) 1209/     585 : DD E1               		pop	ix
(1) 1210/     587 : 36 00               		ld	(hl),0
(1) 1211/     589 : 00                  		nop
(1) 1212/     58A :                     .nothin:
(1) 1213/     58A : 23                  		inc	hl
(1) 1214/     58B : 10 CB               		djnz	.indx_del
(1) 1215/     58D : 3E 01               		ld	a,1
(1) 1216/     58F : 32 87 1F            		ld	(marsUpd),a
(1) 1217/     592 : C9                  		ret
(1) 1218/     593 :                     
(1) 1219/     593 :                     ; ----------------------------------------
(1) 1220/     593 :                     ; Load tracklist from ROM
(1) 1221/     593 :                     ;
(1) 1222/     593 :                     ; a - SeqID
(1) 1223/     593 :                     ; ----------------------------------------
(1) 1224/     593 :                     
(1) 1225/     593 :                     get_RomTrcks:
(1) 1226/     593 : E6 F8               		and	11111000b
(1) 1227/     595 : 5F                  		ld	e,a
(1) 1228/     596 : 3A 86 1F            		ld	a,(trkListPage)
(1) 1229/     599 : BB                  		cp	e
(1) 1230/     59A : C8                  		ret	z
(1) 1231/     59B : 7B                  		ld	a,e
(1) 1232/     59C : 32 86 1F            		ld	(trkListPage),a
(1) 1233/     59F :                     init_RomTrcks:
(1) 1234/     59F : 07                  		rlca
(1) 1235/     5A0 : 07                  		rlca			; 10h*4=40h
(1) 1236/     5A1 : 57                  		ld	d,a
(1) 1237/     5A2 : E6 E0               		and	11100000b
(1) 1238/     5A4 : 5F                  		ld	e,a
(1) 1239/     5A5 : 7A                  		ld	a,d
(1) 1240/     5A6 : CF                  		rst	8
(1) 1241/     5A7 : E6 03               		and	00000011b	; * 40h
(1) 1242/     5A9 : 57                  		ld	d,a
(1) 1243/     5AA : 21 1C 00            		ld	hl,gemaMstrListPos
(1) 1244/     5AD : 23                  		inc	hl
(1) 1245/     5AE : 7E                  		ld	a,(hl)
(1) 1246/     5AF : 23                  		inc	hl
(1) 1247/     5B0 : 4E                  		ld	c,(hl)
(1) 1248/     5B1 : 23                  		inc	hl
(1) 1249/     5B2 : 6E                  		ld	l,(hl)
(1) 1250/     5B3 : CF                  		rst	8
(1) 1251/     5B4 : 61                  		ld	h,c
(1) 1252/     5B5 : 19                  		add	hl,de
(1) 1253/     5B6 : CE 00               		adc	a,0
(1) 1254/     5B8 : 11 68 1B            		ld	de,trkListCach
(1) 1255/     5BB : 01 20 00            		ld	bc,4*8
(1) 1256/     5BE : C3 84 10            		jp	transferRom	; *** ROM ACCESS ***
(1) 1257/     5C1 :                     
(1) 1258/     5C1 :                     ; ============================================================
(1) 1259/     5C1 :                     ; --------------------------------------------------------
(1) 1260/     5C1 :                     ; Process track channels to the sound chips
(1) 1261/     5C1 :                     ; --------------------------------------------------------
(1) 1262/     5C1 :                     
(1) 1263/     5C1 :                     set_chips:
(1) 1264/     5C1 : E7                  		rst	20h			; Refill wave
(1) 1265/     5C2 : CD 63 10            		call	get_tick
(1) 1266/     5C5 : FD 21 78 18         		ld	iy,nikona_BuffList
(1) 1267/     5C9 :                     .trk_buffrs:
(1) 1268/     5C9 : FD 7E 00            		ld	a,(iy)
(1) 1269/     5CC : FE FF               		cp	-1
(1) 1270/     5CE : 28 0F               		jr	z,proc_chips
(1) 1271/     5D0 : CF                  		rst	8
(1) 1272/     5D1 : FD E5               		push	iy
(1) 1273/     5D3 : CD 08 06            		call	tblbuff_read
(1) 1274/     5D6 : FD E1               		pop	iy
(1) 1275/     5D8 : 11 08 00            		ld	de,MAX_BUFFNTRY
(1) 1276/     5DB : FD 19               		add	iy,de
(1) 1277/     5DD : 18 EA               		jr	.trk_buffrs
(1) 1278/     5DF :                     proc_chips:
(1) 1279/     5DF : E7                  		rst	20h			; Refill wave
(1) 1280/     5E0 : CF                  		rst	8
(1) 1281/     5E1 : FD 21 62 16         		ld	iy,tblPSGN		; PSG Noise
(1) 1282/     5E5 : CD FD 07            		call	dtbl_singl
(1) 1283/     5E8 : CF                  		rst	8
(1) 1284/     5E9 : FD 21 18 16         		ld	iy,tblPSG		; PSG Squares
(1) 1285/     5ED : CD E7 07            		call	dtbl_multi
(1) 1286/     5F0 : CF                  		rst	8
(1) 1287/     5F1 : FD 21 7A 16         		ld	iy,tblFM		; FM/FM3/DAC
(1) 1288/     5F5 : CD E7 07            		call	dtbl_multi
(1) 1289/     5F8 : CF                  		rst	8
(1) 1290/     5F9 : FD 21 0C 17         		ld	iy,tblPCM		; SEGA CD PCM
(1) 1291/     5FD : CD E7 07            		call	dtbl_multi
(1) 1292/     600 : CF                  		rst	8
(1) 1293/     601 : FD 21 CE 17         		ld	iy,tblPWM		; 32X PWM
(1) 1294/     605 : C3 E7 07            		jp	dtbl_multi
(1) 1295/     608 :                     
(1) 1296/     608 :                     ; ----------------------------------------
(1) 1297/     608 :                     ; Read current track
(1) 1298/     608 :                     ;
(1) 1299/     608 :                     ; iy - Buffer
(1) 1300/     608 :                     tblbuff_read:
(1) 1301/     608 : FD 6E 00            		ld	l,(iy)
(1) 1302/     60B : FD 66 01            		ld	h,(iy+1)
(1) 1303/     60E : CD 63 10            		call	get_tick
(1) 1304/     611 : CF                  		rst	8
(1) 1305/     612 : E5                  		push	hl
(1) 1306/     613 : FD E1               		pop	iy
(1) 1307/     615 : FD 46 00            		ld	b,(iy+trk_Status)	; bit7: Track active?
(1) 1308/     618 : CB 78               		bit	7,b
(1) 1309/     61A : C8                  		ret	z
(1) 1310/     61B : 78                  		ld	a,b			; trk_Status == -1?
(1) 1311/     61C : FE FF               		cp	-1
(1) 1312/     61E : C2 28 06            		jp	nz,.track_cont
(1) 1313/     621 : CD 4A 05            		call	track_out
(1) 1314/     624 : FD 36 00 00         		ld	(iy+trk_Status),0
(1) 1315/     628 :                     .track_cont:
(1) 1316/     628 : E7                  		rst	20h
(1) 1317/     629 : FD E5               		push	iy
(1) 1318/     62B : E1                  		pop	hl
(1) 1319/     62C : CF                  		rst	8
(1) 1320/     62D : DD 21 00 1E         		ld	ix,trkChnls
(1) 1321/     631 : 11 24 00            		ld	de,trk_ChnIndx
(1) 1322/     634 : 19                  		add	hl,de
(1) 1323/     635 : FD 7E 15            		ld	a,(iy+trk_MaxChnl)	; If zero, read ALL indexes (lazy mode)
(1) 1324/     638 : B7                  		or	a
(1) 1325/     639 : 20 02               		jr	nz,.valid
(1) 1326/     63B : 06 1A               		ld	b,MAX_TRKINDX
(1) 1327/     63D :                     .valid:
(1) 1328/     63D : CF                  		rst	8
(1) 1329/     63E : 47                  		ld	b,a
(1) 1330/     63F :                     .next_indx:
(1) 1331/     63F :                     ; 		rst	20h			; Refill wave
(1) 1332/     63F : 7E                  		ld	a,(hl)			; Read index
(1) 1333/     640 : B7                  		or	a
(1) 1334/     641 : 20 0B               		jr	nz,.has_indx		; non-zero: valid
(1) 1335/     643 : C5                  		push	bc			; waste CPU to
(1) 1336/     644 : 06 04               		ld	b,4			; sync the wave
(1) 1337/     646 : 00                  		nop
(1) 1338/     647 : 00                  		nop
(1) 1339/     648 : CF                  		rst	8
(1) 1340/     649 : 10 FE               		djnz	$
(1) 1341/     64B : C1                  		pop	bc
(1) 1342/     64C : 18 1C               		jr	.no_indx
(1) 1343/     64E :                     .has_indx:
(1) 1344/     64E : E6 1F               		and	00011111b
(1) 1345/     650 : 87                  		add	a,a
(1) 1346/     651 : 87                  		add	a,a
(1) 1347/     652 : 87                  		add	a,a
(1) 1348/     653 : CF                  		rst	8
(1) 1349/     654 : 16 00               		ld	d,0
(1) 1350/     656 : 5F                  		ld	e,a
(1) 1351/     657 : C5                  		push	bc
(1) 1352/     658 : E5                  		push	hl
(1) 1353/     659 : DD E5               		push	ix
(1) 1354/     65B : DD 19               		add	ix,de
(1) 1355/     65D : DD 7E 00            		ld	a,(ix)			; ** chnl_Flags
(1) 1356/     660 : E6 0F               		and	00001111b
(1) 1357/     662 : C4 6E 06            		call	nz,.do_chip
(1) 1358/     665 : CF                  		rst	8
(1) 1359/     666 : DD E1               		pop	ix
(1) 1360/     668 : E1                  		pop	hl
(1) 1361/     669 : C1                  		pop	bc
(1) 1362/     66A :                     .no_indx:
(1) 1363/     66A : 23                  		inc	hl
(1) 1364/     66B : 10 D2               		djnz	.next_indx
(1) 1365/     66D : C9                  		ret
(1) 1366/     66E :                     
(1) 1367/     66E :                     ; ----------------------------------------
(1) 1368/     66E :                     ; iy - Track buffer
(1) 1369/     66E :                     ; ix - Current channel
(1) 1370/     66E :                     
(1) 1371/     66E :                     .do_chip:
(1) 1372/     66E : DD 7E 03            		ld	a,(ix+chnl_Ins)		; Check intrument type FIRST
(1) 1373/     671 : B7                  		or	a
(1) 1374/     672 : C8                  		ret	z			; If 0 == stop
(1) 1375/     673 : CF                  		rst	8
(1) 1376/     674 : 3D                  		dec	a			; inst-1
(1) 1377/     675 : E6 7F               		and	01111111b
(1) 1378/     677 : 21 80 1B            		ld	hl,instListOut		; temporal storage for instrument
(1) 1379/     67A : 16 00               		ld	d,0
(1) 1380/     67C : FD 5E 11            		ld	e,(iy+trk_Priority)
(1) 1381/     67F : CB 03               		rlc	e
(1) 1382/     681 : CB 03               		rlc	e
(1) 1383/     683 : CB 03               		rlc	e
(1) 1384/     685 : 19                  		add	hl,de
(1) 1385/     686 : FD 4E 12            		ld	c,(iy+trk_BankIns)	; c - current intrument loaded
(1) 1386/     689 : CB 79               		bit	7,c			; First time?
(1) 1387/     68B : 20 03               		jr	nz,.first_ins
(1) 1388/     68D : B9                  		cp	c			; SAME instrument data?
(1) 1389/     68E : 28 24               		jr	z,.keep_it
(1) 1390/     690 :                     .first_ins:
(1) 1391/     690 : E5                  		push	hl
(1) 1392/     691 : FD 77 12            		ld	(iy+trk_BankIns),a	; Save inst number
(1) 1393/     694 : 07                  		rlca
(1) 1394/     695 : 07                  		rlca
(1) 1395/     696 : 07                  		rlca
(1) 1396/     697 : 47                  		ld	b,a
(1) 1397/     698 : E6 F8               		and	11111000b
(1) 1398/     69A : 4F                  		ld	c,a
(1) 1399/     69B : 78                  		ld	a,b
(1) 1400/     69C : E6 07               		and	00000111b
(1) 1401/     69E : CF                  		rst	8
(1) 1402/     69F : 47                  		ld	b,a
(1) 1403/     6A0 : EB                  		ex	hl,de
(1) 1404/     6A1 : FD 6E 1E            		ld	l,(iy+trk_RomInst)
(1) 1405/     6A4 : FD 66 1F            		ld	h,(iy+(trk_RomInst+1))
(1) 1406/     6A7 : FD 7E 20            		ld	a,(iy+(trk_RomInst+2))
(1) 1407/     6AA : 09                  		add	hl,bc
(1) 1408/     6AB : CE 00               		adc	a,0
(1) 1409/     6AD : 01 08 00            		ld	bc,8			; 8 bytes
(1) 1410/     6B0 : CD 84 10            		call	transferRom		; ** ROM access **
(1) 1411/     6B3 : E1                  		pop	hl
(1) 1412/     6B4 :                     .keep_it:
(1) 1413/     6B4 : E5                  		push	hl			; <-- save hl
(1) 1414/     6B5 : CD CD 06            		call	.grab_link
(1) 1415/     6B8 : D1                  		pop	de			; --> recover as de
(1) 1416/     6B9 :                     	; hl - current table
(1) 1417/     6B9 :                     	; de - instrument data
(1) 1418/     6B9 : FE FF               		cp	-1			; Found any link?
(1) 1419/     6BB : C8                  		ret	z
(1) 1420/     6BC : FD 7E 11            		ld	a,(iy+trk_Priority)	; a - Set priority level
(1) 1421/     6BF : 23                  		inc	hl			; Skip link
(1) 1422/     6C0 : 23                  		inc	hl
(1) 1423/     6C1 : 77                  		ld	(hl),a			; Write priority
(1) 1424/     6C2 : 01 0E 00            		ld	bc,10h-2		; Move to instr data
(1) 1425/     6C5 : 09                  		add	hl,bc
(1) 1426/     6C6 : EB                  		ex	hl,de			; <-- swap for ldir
(1) 1427/     6C7 : 01 08 00            		ld	bc,8
(1) 1428/     6CA : ED B0               		ldir				; COPYPASTE instr data from temporal
(1) 1429/     6CC : C9                  		ret
(1) 1430/     6CD :                     
(1) 1431/     6CD :                     ; ----------------------------------------
(1) 1432/     6CD :                     ; Search for a linked channel on the
(1) 1433/     6CD :                     ; chip table
(1) 1434/     6CD :                     ;
(1) 1435/     6CD :                     ; Input:
(1) 1436/     6CD :                     ; iy - Track buffer
(1) 1437/     6CD :                     ; ix - Current channel
(1) 1438/     6CD :                     ; hl - Intrument data
(1) 1439/     6CD :                     ;
(1) 1440/     6CD :                     ; Returns:
(1) 1441/     6CD :                     ; hl - Channel table to use
(1) 1442/     6CD :                     ;  a - Return value:
(1) 1443/     6CD :                     ;       0 - Found
(1) 1444/     6CD :                     ;      -1 - Not found
(1) 1445/     6CD :                     ; ----------------------------------------
(1) 1446/     6CD :                     
(1) 1447/     6CD :                     .grab_link:
(1) 1448/     6CD : 7E                  		ld	a,(hl)			; Check INSTRUMENT type
(1) 1449/     6CE : E6 F0               		and	11110000b		; Filter bits
(1) 1450/     6D0 : 5F                  		ld	e,a			; e - NEW chip
(1) 1451/     6D1 : DD 7E 01            		ld	a,(ix+chnl_Chip)	; a - our current chip
(1) 1452/     6D4 : E6 F0               		and	11110000b		; Filter bits too.
(1) 1453/     6D6 : CA 45 07            		jp	z,.new_chip		; If 0: It's a NEW chip
(1) 1454/     6D9 : BB                  		cp 	e			; Same chip as NEW?
(1) 1455/     6DA : CA EE 06            		jp	z,.srch_link		; then re-use the slot
(1) 1456/     6DD : CF                  		rst	8
(1) 1457/     6DE : 57                  		ld	d,a			; d - Chip to silence
(1) 1458/     6DF : D5                  		push	de
(1) 1459/     6E0 : CD EE 06            		call	.srch_link		; Search our link (first)
(1) 1460/     6E3 : D1                  		pop	de
(1) 1461/     6E4 : FE FF               		cp	-1
(1) 1462/     6E6 : C8                  		ret	z
(1) 1463/     6E7 : CF                  		rst	8
(1) 1464/     6E8 : CD CF 07            		call	.reset_link
(1) 1465/     6EB : C3 45 07            		jp	.new_chip
(1) 1466/     6EE :                     
(1) 1467/     6EE :                     ; ----------------------------------------
(1) 1468/     6EE :                     ; ** RELINK **
(1) 1469/     6EE :                     ; e - Our current chip
(1) 1470/     6EE :                     .srch_link:
(1) 1471/     6EE : CD B5 07            		call	.pick_tbl	; Pick chip table in hl
(1) 1472/     6F1 : DD E5               		push	ix		; copy ix to bc
(1) 1473/     6F3 : C1                  		pop	bc
(1) 1474/     6F4 : B7                  		or	a
(1) 1475/     6F5 : FA 35 07            		jp	m,.singl_link
(1) 1476/     6F8 :                     .srch_lloop:
(1) 1477/     6F8 : 7E                  		ld	a,(hl)		; Read LSB
(1) 1478/     6F9 : FE FF               		cp	-1		; If -1, return -1
(1) 1479/     6FB : 28 45               		jr	z,.refill
(1) 1480/     6FD : B9                  		cp	c
(1) 1481/     6FE : 20 07               		jr	nz,.invldl
(1) 1482/     700 : CF                  		rst	8
(1) 1483/     701 : 23                  		inc	hl
(1) 1484/     702 : 7E                  		ld	a,(hl)
(1) 1485/     703 : 2B                  		dec	hl
(1) 1486/     704 : B8                  		cp	b
(1) 1487/     705 : 28 08               		jr	z,.reroll
(1) 1488/     707 :                     .invldl:
(1) 1489/     707 : D5                  		push	de
(1) 1490/     708 : 11 18 00            		ld	de,MAX_TBLSIZE
(1) 1491/     70B :                     ; 		rst	8
(1) 1492/     70B :                     ; 		nop	; wave sync *
(1) 1493/     70B : 19                  		add	hl,de
(1) 1494/     70C : D1                  		pop	de
(1) 1495/     70D : 18 E9               		jr	.srch_lloop
(1) 1496/     70F :                     .reroll:
(1) 1497/     70F :                     	; *** Special re-roll check ***
(1) 1498/     70F : E5                  		push	hl
(1) 1499/     710 : 01 05 00            		ld	bc,5		; <-- fake iy+05h
(1) 1500/     713 : 09                  		add	hl,bc
(1) 1501/     714 : CF                  		rst	8
(1) 1502/     715 : 4E                  		ld	c,(hl)		; c - ID
(1) 1503/     716 : E1                  		pop	hl
(1) 1504/     717 : 7B                  		ld	a,e
(1) 1505/     718 : FE 80               		cp	80h		; PSG?
(1) 1506/     71A : 28 02               		jr	z,.chk_psg
(1) 1507/     71C :                     ; 		cp	0A0h		; FM normal?
(1) 1508/     71C :                     ; 		jr	z,.chk_fm
(1) 1509/     71C : 18 22               		jr	.rnot_psg
(1) 1510/     71E :                     .chk_psg:
(1) 1511/     71E : 3A 83 1F            		ld	a,(psgHatMode)
(1) 1512/     721 : E6 03               		and	011b
(1) 1513/     723 : FE 03               		cp	011b
(1) 1514/     725 : 20 19               		jr	nz,.rnot_psg
(1) 1515/     727 : 79                  		ld	a,c
(1) 1516/     728 : FE 02               		cp	2
(1) 1517/     72A : 20 14               		jr	nz,.rnot_psg
(1) 1518/     72C : CF                  		rst	8
(1) 1519/     72D : 16 80               		ld	d,80h		; Set PSG silence
(1) 1520/     72F : CD CF 07            		call	.reset_link	; on PSG3
(1) 1521/     732 : C3 B2 07            		jp	.set_asfull
(1) 1522/     735 :                     
(1) 1523/     735 :                     ; ----------------------
(1) 1524/     735 :                     ; PSGN/FM3/FM6
(1) 1525/     735 :                     .singl_link:
(1) 1526/     735 : 23                  		inc	hl			; Read MSB first
(1) 1527/     736 : 7E                  		ld	a,(hl)
(1) 1528/     737 : 2B                  		dec	hl
(1) 1529/     738 : CF                  		rst	8
(1) 1530/     739 : B8                  		cp	b			; MSB match?
(1) 1531/     73A : 20 06               		jr	nz,.refill
(1) 1532/     73C : 7E                  		ld	a,(hl)			; Read LSB
(1) 1533/     73D : B9                  		cp	c
(1) 1534/     73E : 20 02               		jr	nz,.refill
(1) 1535/     740 :                     ; ----------------------
(1) 1536/     740 :                     .rnot_psg:
(1) 1537/     740 : AF                  		xor	a
(1) 1538/     741 : C9                  		ret
(1) 1539/     742 :                     ; ***
(1) 1540/     742 :                     .refill:
(1) 1541/     742 : DD 5E 01            		ld	e,(ix+chnl_Chip)
(1) 1542/     745 :                     
(1) 1543/     745 :                     ; ----------------------------------------
(1) 1544/     745 :                     ; *** NEW CHIP ***
(1) 1545/     745 :                     ; e - Chip to set
(1) 1546/     745 :                     .new_chip:
(1) 1547/     745 : 7B                  		ld	a,e			; Read NEW chip
(1) 1548/     746 : B7                  		or	a			; If non-minus, exit.
(1) 1549/     747 : F0                  		ret	p
(1) 1550/     748 : CD B5 07            		call	.pick_tbl
(1) 1551/     74B : CF                  		rst	8
(1) 1552/     74C : FD 4E 11            		ld	c,(iy+trk_Priority)	; c - OUR priority level
(1) 1553/     74F : B7                  		or	a
(1) 1554/     750 : FA A0 07            		jp	m,.singl_free
(1) 1555/     753 : E5                  		push	hl			; Backup START table
(1) 1556/     754 :                     ; PASS 1
(1) 1557/     754 :                     .srch_free:
(1) 1558/     754 : 7E                  		ld	a,(hl)			; Read LSB
(1) 1559/     755 : FE FF               		cp	-1			; If -1, return -1
(1) 1560/     757 : 28 0B               		jr	z,.pass_2
(1) 1561/     759 : 23                  		inc	hl
(1) 1562/     75A : 46                  		ld	b,(hl)			; Read MSB
(1) 1563/     75B : 2B                  		dec	hl
(1) 1564/     75C :                     ; 		nop	; wave sync
(1) 1565/     75C :                     ; 		nop
(1) 1566/     75C :                     ; 		rst	8
(1) 1567/     75C :                     ; 		nop
(1) 1568/     75C :                     ; 		nop
(1) 1569/     75C : B0                  		or	b
(1) 1570/     75D : 28 24               		jr	z,.new_link_z
(1) 1571/     75F : CD 7C 07            		call	.nextsrch_tbl
(1) 1572/     762 : 18 F0               		jr	.srch_free
(1) 1573/     764 :                     
(1) 1574/     764 :                     ; PASS 2
(1) 1575/     764 :                     ; Rewrite mode
(1) 1576/     764 :                     .pass_2:
(1) 1577/     764 : E1                  		pop	hl
(1) 1578/     765 :                     .next_prio:
(1) 1579/     765 : 7E                  		ld	a,(hl)		; Read LSB
(1) 1580/     766 : FE FF               		cp	-1		; If -1, return -1
(1) 1581/     768 : C8                  		ret	z
(1) 1582/     769 : 23                  		inc	hl
(1) 1583/     76A : 23                  		inc	hl
(1) 1584/     76B : 7E                  		ld	a,(hl)		; Read priority
(1) 1585/     76C : 2B                  		dec	hl
(1) 1586/     76D : 2B                  		dec	hl
(1) 1587/     76E : B9                  		cp	c
(1) 1588/     76F : 28 16               		jr	z,.new_link_o
(1) 1589/     771 : 38 14               		jr	c,.new_link_o
(1) 1590/     773 : B7                  		or	a
(1) 1591/     774 : 28 11               		jr	z,.new_link_o
(1) 1592/     776 : CF                  		rst	8
(1) 1593/     777 : CD 7C 07            		call	.nextsrch_tbl
(1) 1594/     77A : 18 E9               		jr	.next_prio
(1) 1595/     77C :                     .nextsrch_tbl:
(1) 1596/     77C : D5                  		push	de
(1) 1597/     77D : 11 18 00            		ld	de,MAX_TBLSIZE
(1) 1598/     780 : 19                  		add	hl,de
(1) 1599/     781 : D1                  		pop	de
(1) 1600/     782 :                     ; 		nop	; wave sync
(1) 1601/     782 :                     ; 		nop
(1) 1602/     782 :                     ; 		rst	8
(1) 1603/     782 :                     ; 		nop
(1) 1604/     782 :                     ; 		nop
(1) 1605/     782 : C9                  		ret
(1) 1606/     783 :                     .new_link_z:
(1) 1607/     783 : 33                  		inc	sp		; skip backup
(1) 1608/     784 : 33                  		inc	sp
(1) 1609/     785 : 18 08               		jr	.new_link
(1) 1610/     787 :                     
(1) 1611/     787 :                     ; OVERWRITE link
(1) 1612/     787 :                     .new_link_o:
(1) 1613/     787 : E5                  		push	hl
(1) 1614/     788 : DD 56 01            		ld	d,(ix+chnl_Chip)
(1) 1615/     78B : CD CF 07            		call	.reset_link
(1) 1616/     78E : E1                  		pop	hl
(1) 1617/     78F :                     ; NEW link
(1) 1618/     78F :                     .new_link:
(1) 1619/     78F : CF                  		rst	8
(1) 1620/     790 : 23                  		inc	hl
(1) 1621/     791 : 23                  		inc	hl
(1) 1622/     792 :                     ; hl+2
(1) 1623/     792 :                     .l_hiprio:
(1) 1624/     792 : DD 73 01            		ld	(ix+chnl_Chip),e
(1) 1625/     795 : DD E5               		push	ix
(1) 1626/     797 : D1                  		pop	de
(1) 1627/     798 : 71                  		ld	(hl),c		; write priority
(1) 1628/     799 : 2B                  		dec	hl
(1) 1629/     79A : CF                  		rst	8
(1) 1630/     79B : 72                  		ld 	(hl),d		; MSB
(1) 1631/     79C : 2B                  		dec	hl
(1) 1632/     79D : 73                  		ld	(hl),e		; LSB
(1) 1633/     79E : AF                  		xor	a
(1) 1634/     79F : C9                  		ret
(1) 1635/     7A0 :                     
(1) 1636/     7A0 :                     ; Single slot
(1) 1637/     7A0 :                     ; c - priority
(1) 1638/     7A0 :                     ; e - chip
(1) 1639/     7A0 :                     .singl_free:
(1) 1640/     7A0 : 46                  		ld	b,(hl)
(1) 1641/     7A1 : 23                  		inc	hl
(1) 1642/     7A2 : 7E                  		ld	a,(hl)
(1) 1643/     7A3 : 23                  		inc	hl
(1) 1644/     7A4 : B0                  		or	b
(1) 1645/     7A5 : 28 EB               		jr	z,.l_hiprio
(1) 1646/     7A7 : CF                  		rst	8
(1) 1647/     7A8 : 7E                  		ld	a,(hl)
(1) 1648/     7A9 : B9                  		cp	c
(1) 1649/     7AA : 28 E6               		jr	z,.l_hiprio
(1) 1650/     7AC : 38 E4               		jr	c,.l_hiprio		; PRIORITY
(1) 1651/     7AE : B7                  		or	a
(1) 1652/     7AF : 28 E1               		jr	z,.l_hiprio
(1) 1653/     7B1 : CF                  		rst	8
(1) 1654/     7B2 :                     .set_asfull:
(1) 1655/     7B2 : 3E FF               		ld	a,-1			; Return -1, can't use instrument.
(1) 1656/     7B4 : C9                  		ret
(1) 1657/     7B5 :                     
(1) 1658/     7B5 :                     ; Pick chip table
(1) 1659/     7B5 :                     ; In:
(1) 1660/     7B5 :                     ;  a - ID
(1) 1661/     7B5 :                     ;
(1) 1662/     7B5 :                     ; Out:
(1) 1663/     7B5 :                     ;  a - Special bit + ID
(1) 1664/     7B5 :                     ;
(1) 1665/     7B5 :                     ; hl - Table
(1) 1666/     7B5 :                     .pick_tbl:
(1) 1667/     7B5 : D5                  		push	de
(1) 1668/     7B6 : 0F                  		rrca
(1) 1669/     7B7 : 0F                  		rrca
(1) 1670/     7B8 : 0F                  		rrca
(1) 1671/     7B9 : 0F                  		rrca
(1) 1672/     7BA : E6 07               		and	00000111b
(1) 1673/     7BC : 87                  		add	a,a
(1) 1674/     7BD : 21 08 16            		ld	hl,tblList
(1) 1675/     7C0 : E5                  		push	hl
(1) 1676/     7C1 : 16 00               		ld	d,0
(1) 1677/     7C3 : 5F                  		ld	e,a
(1) 1678/     7C4 : 19                  		add	hl,de
(1) 1679/     7C5 : 5E                  		ld	e,(hl)
(1) 1680/     7C6 : 23                  		inc	hl
(1) 1681/     7C7 : 7E                  		ld	a,(hl)
(1) 1682/     7C8 : 57                  		ld	d,a
(1) 1683/     7C9 : CB BA               		res	7,d
(1) 1684/     7CB : E1                  		pop	hl
(1) 1685/     7CC : 19                  		add	hl,de
(1) 1686/     7CD : D1                  		pop	de
(1) 1687/     7CE : C9                  		ret
(1) 1688/     7CF :                     
(1) 1689/     7CF :                     ; d - Silence chip
(1) 1690/     7CF :                     ;
(1) 1691/     7CF :                     ; Uses:
(1) 1692/     7CF :                     ; bc
(1) 1693/     7CF :                     .reset_link:
(1) 1694/     7CF : CF                  		rst	8
(1) 1695/     7D0 : 36 00               		ld	(hl),0			; Delete link
(1) 1696/     7D2 : 23                  		inc	hl
(1) 1697/     7D3 : 36 00               		ld	(hl),0
(1) 1698/     7D5 : 23                  		inc	hl
(1) 1699/     7D6 : 72                  		ld	(hl),d			; Set "silence" chip ID.
(1) 1700/     7D7 : 01 06 00            		ld	bc,8-2			; Go to 08h
(1) 1701/     7DA : 09                  		add	hl,bc
(1) 1702/     7DB : 06 04               		ld	b,8/2
(1) 1703/     7DD :                     .clrfull:
(1) 1704/     7DD : 36 00               		ld	(hl),0			; Reset settings 08-0Bh
(1) 1705/     7DF : 23                  		inc	hl
(1) 1706/     7E0 : 36 00               		ld	(hl),0
(1) 1707/     7E2 : 23                  		inc	hl
(1) 1708/     7E3 : CF                  		rst	8
(1) 1709/     7E4 : 10 F7               		djnz	.clrfull
(1) 1710/     7E6 : C9                  		ret
(1) 1711/     7E7 :                     
(1) 1712/     7E7 :                     ; ============================================
(1) 1713/     7E7 :                     ; ----------------------------------------
(1) 1714/     7E7 :                     ; Process chip using it's table
(1) 1715/     7E7 :                     ;
(1) 1716/     7E7 :                     ; iy - table to read
(1) 1717/     7E7 :                     ; ----------------------------------------
(1) 1718/     7E7 :                     
(1) 1719/     7E7 :                     dtbl_multi:
(1) 1720/     7E7 : FD 7E 00            		ld	a,(iy)
(1) 1721/     7EA : FE FF               		cp	-1
(1) 1722/     7EC : C8                  		ret	z
(1) 1723/     7ED : CD FD 07            		call	dtbl_frommul
(1) 1724/     7F0 : CF                  		rst	8
(1) 1725/     7F1 : 11 18 00            		ld	de,MAX_TBLSIZE
(1) 1726/     7F4 : FD 19               		add	iy,de
(1) 1727/     7F6 : 06 03               		ld	b,3	; wave sync ** IMPORTANT **
(1) 1728/     7F8 : 10 FE               		djnz	$
(1) 1729/     7FA : CF                  		rst	8
(1) 1730/     7FB : 18 EA               		jr	dtbl_multi
(1) 1731/     7FD :                     dtbl_singl:
(1) 1732/     7FD :                     ; 		rst	8
(1) 1733/     7FD :                     
(1) 1734/     7FD :                     dtbl_frommul:
(1) 1735/     7FD : FD 5E 00            		ld	e,(iy)		; Read link
(1) 1736/     800 : FD 56 01            		ld	d,(iy+1)
(1) 1737/     803 : 7A                  		ld	a,d		; If no-zero, active
(1) 1738/     804 : B3                  		or	e
(1) 1739/     805 : 20 60               		jr	nz,.linked
(1) 1740/     807 : FD 7E 02            		ld	a,(iy+2)	; Silence request?
(1) 1741/     80A : B7                  		or	a
(1) 1742/     80B : F0                  		ret	p		; Return if not.
(1) 1743/     80C : CF                  		rst	8
(1) 1744/     80D : FD 36 02 00         		ld	(iy+2),0	; Reset request on memory
(1) 1745/     811 :                     
(1) 1746/     811 :                     ; ----------------------------------------
(1) 1747/     811 :                     ; chip-silence request
(1) 1748/     811 :                     ; iy - Table
(1) 1749/     811 : E6 F0               		and	11110000b
(1) 1750/     813 : FE 80               		cp	80h
(1) 1751/     815 : 28 1E               		jr	z,.siln_psg
(1) 1752/     817 : FE 90               		cp	90h
(1) 1753/     819 : 28 16               		jr	z,.siln_psg_n
(1) 1754/     81B : FE A0               		cp	0A0h
(1) 1755/     81D : 28 42               		jr	z,.siln_fm
(1) 1756/     81F : FE B0               		cp	0B0h
(1) 1757/     821 : 28 3E               		jr	z,.siln_fm
(1) 1758/     823 : CF                  		rst	8
(1) 1759/     824 : FE C0               		cp	0C0h
(1) 1760/     826 : 28 36               		jr	z,.siln_dac
(1) 1761/     828 : FE D0               		cp	0D0h
(1) 1762/     82A : 28 10               		jr	z,.siln_pcm
(1) 1763/     82C : FE E0               		cp	0E0h
(1) 1764/     82E : 28 18               		jr	z,.siln_pwm
(1) 1765/     830 : C9                  		ret
(1) 1766/     831 :                     .siln_psg_n:
(1) 1767/     831 : AF                  		xor	a
(1) 1768/     832 : 32 83 1F            		ld	(psgHatMode),a
(1) 1769/     835 :                     .siln_psg:
(1) 1770/     835 : CF                  		rst	8
(1) 1771/     836 : DD 21 0A 19         		ld	ix,psgcom
(1) 1772/     83A : 18 16               		jr	.rcyl_com
(1) 1773/     83C :                     
(1) 1774/     83C :                     ; --------------------------------
(1) 1775/     83C :                     
(1) 1776/     83C :                     .siln_pcm:
(1) 1777/     83C : 3E 01               		ld	a,1
(1) 1778/     83E : 32 88 1F            		ld	(mcdUpd),a
(1) 1779/     841 : CF                  		rst	8
(1) 1780/     842 : DD 21 92 18         		ld	ix,pcmcom
(1) 1781/     846 : 18 0A               		jr	.rcyl_com
(1) 1782/     848 :                     .siln_pwm:
(1) 1783/     848 : 3E 01               		ld	a,1
(1) 1784/     84A : 32 87 1F            		ld	(marsUpd),a
(1) 1785/     84D : CF                  		rst	8
(1) 1786/     84E : DD 21 D2 18         		ld	ix,pwmcom
(1) 1787/     852 :                     ; 		jr	.rcyl_com
(1) 1788/     852 :                     
(1) 1789/     852 :                     ; --------------------------------
(1) 1790/     852 :                     
(1) 1791/     852 :                     .rcyl_com:
(1) 1792/     852 : 06 00               		ld	b,0
(1) 1793/     854 : FD 4E 05            		ld	c,(iy+05h)
(1) 1794/     857 : DD 09               		add	ix,bc
(1) 1795/     859 : DD 36 00 04         		ld	(ix),100b	; key-cut
(1) 1796/     85D : C9                  		ret
(1) 1797/     85E :                     
(1) 1798/     85E :                     ; --------------------------------
(1) 1799/     85E :                     
(1) 1800/     85E :                     .siln_dac:
(1) 1801/     85E : CD CE 12            		call	dac_off
(1) 1802/     861 :                     .siln_fm:
(1) 1803/     861 : CD 31 0A            		call	.fm_keyoff
(1) 1804/     864 : C3 39 0A            		jp	.fm_tloff
(1) 1805/     867 :                     
(1) 1806/     867 :                     ; ----------------------------------------
(1) 1807/     867 :                     ; Process channel now
(1) 1808/     867 :                     ; iy - Table
(1) 1809/     867 :                     ; ix - Tracker channel
(1) 1810/     867 :                     .linked:
(1) 1811/     867 : 1A                  		ld	a,(de)		; ** chnl_Flags
(1) 1812/     868 : 47                  		ld	b,a		; b - flags to check
(1) 1813/     869 : E6 0F               		and	00001111b	; Filter flags
(1) 1814/     86B : C8                  		ret	z
(1) 1815/     86C : 78                  		ld	a,b
(1) 1816/     86D : E6 F0               		and	11110000b	; Keep OTHER bits
(1) 1817/     86F : 12                  		ld	(de),a		; ** clear chnl_Flags
(1) 1818/     870 : D5                  		push	de
(1) 1819/     871 : DD E1               		pop	ix
(1) 1820/     873 : FD E5               		push	iy		; table+10h instrment data
(1) 1821/     875 : E1                  		pop	hl
(1) 1822/     876 : 11 10 00            		ld	de,10h
(1) 1823/     879 : 19                  		add	hl,de
(1) 1824/     87A :                     ; 		ld	l,(iy+03h)	; trk_Instr
(1) 1825/     87A :                     ; 		ld	h,(iy+04h)
(1) 1826/     87A :                     
(1) 1827/     87A :                     	;  b - Flags LR00evin (Eff|Vol|Ins|Note)
(1) 1828/     87A :                     	; iy - Our chip table
(1) 1829/     87A :                     	; ix - Track channel
(1) 1830/     87A :                     	; hl - Intrument data
(1) 1831/     87A : CB 40               		bit	0,b		; Note
(1) 1832/     87C : C4 60 0F            		call	nz,.note
(1) 1833/     87F : CB 48               		bit	1,b		; Intrument
(1) 1834/     881 : C4 AF 0D            		call	nz,.inst
(1) 1835/     884 : CF                  		rst	8
(1) 1836/     885 : CB 50               		bit	2,b		; Volume
(1) 1837/     887 : C4 A6 0D            		call	nz,.volu
(1) 1838/     88A : CB 58               		bit	3,b		; Effect
(1) 1839/     88C : C4 A4 0C            		call	nz,.effc
(1) 1840/     88F : 78                  		ld	a,b
(1) 1841/     890 : E6 0F               		and	00001111b
(1) 1842/     892 : C8                  		ret	z
(1) 1843/     893 : CF                  		rst	8
(1) 1844/     894 :                     
(1) 1845/     894 :                     ; ----------------------------------------
(1) 1846/     894 :                     ; Process channel now
(1) 1847/     894 :                     ;
(1) 1848/     894 :                     ; b - Note bits
(1) 1849/     894 :                     ; ----------------------------------------
(1) 1850/     894 :                     
(1) 1851/     894 : 7E                  		ld	a,(hl)
(1) 1852/     895 : E6 70               		and	01110000b	; <--
(1) 1853/     897 : 0F                  		rrca
(1) 1854/     898 : 0F                  		rrca
(1) 1855/     899 : 0F                  		rrca
(1) 1856/     89A : 16 00               		ld	d,0
(1) 1857/     89C : 5F                  		ld	e,a
(1) 1858/     89D : 21 A6 08            		ld	hl,.mk_list
(1) 1859/     8A0 : 19                  		add	hl,de
(1) 1860/     8A1 : 7E                  		ld	a,(hl)
(1) 1861/     8A2 : 23                  		inc	hl
(1) 1862/     8A3 : 66                  		ld	h,(hl)
(1) 1863/     8A4 : 6F                  		ld	l,a
(1) 1864/     8A5 : E9                  		jp	(hl)
(1) 1865/     8A6 :                     ; --------------------------------
(1) 1866/     8A6 :                     .mk_list:
(1) 1867/     8A6 : D2 08               		dw .mk_psg
(1) 1868/     8A8 : B4 08               		dw .mk_psgn
(1) 1869/     8AA : 4D 09               		dw .mk_fm
(1) 1870/     8AC : C2 09               		dw .mk_fmspc
(1) 1871/     8AE : 17 0B               		dw .mk_dac
(1) 1872/     8B0 : 76 0B               		dw .mk_pcm
(1) 1873/     8B2 : FB 0B               		dw .mk_pwm
(1) 1874/     8B4 :                     
(1) 1875/     8B4 :                     ; --------------------------------
(1) 1876/     8B4 :                     
(1) 1877/     8B4 :                     .mk_psgn:
(1) 1878/     8B4 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 1879/     8B7 : DD E5               		push	ix
(1) 1880/     8B9 : DD 21 0D 19         		ld	ix,psgcom+3	; <-- steal PSG3
(1) 1881/     8BD : CF                  		rst	8
(1) 1882/     8BE : FE FE               		cp	-2
(1) 1883/     8C0 : 28 77               		jr	z,.kycut_psgn
(1) 1884/     8C2 : FE FF               		cp	-1
(1) 1885/     8C4 : 28 66               		jr	z,.kyoff_psgn
(1) 1886/     8C6 : 5F                  		ld	e,a
(1) 1887/     8C7 : 3A 83 1F            		ld	a,(psgHatMode)	; Tone 3?
(1) 1888/     8CA : E6 03               		and	011b
(1) 1889/     8CC : FE 03               		cp	011b
(1) 1890/     8CE : 20 42               		jr	nz,.psg_keyon	; Normal
(1) 1891/     8D0 : 18 19               		jr	.from_psgn	; Tone 3
(1) 1892/     8D2 :                     .mk_psg:
(1) 1893/     8D2 : CF                  		rst	8
(1) 1894/     8D3 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 1895/     8D6 : DD E5               		push	ix
(1) 1896/     8D8 : DD 21 0A 19         		ld	ix,psgcom	; ix - psgcom
(1) 1897/     8DC : FD 5E 05            		ld	e,(iy+05h)
(1) 1898/     8DF : 16 00               		ld	d,0
(1) 1899/     8E1 : DD 19               		add	ix,de
(1) 1900/     8E3 : FE FE               		cp	-2
(1) 1901/     8E5 : 28 55               		jr	z,.kycut_psg
(1) 1902/     8E7 : FE FF               		cp	-1
(1) 1903/     8E9 : 28 44               		jr	z,.kyoff_psg
(1) 1904/     8EB :                     .from_psgn:
(1) 1905/     8EB : CF                  		rst	8
(1) 1906/     8EC : 16 00               		ld	d,0		; de - note*2
(1) 1907/     8EE : FD 5E 06            		ld	e,(iy+06h)	; Freq index
(1) 1908/     8F1 : 21 B8 13            		ld	hl,psgFreq_List-(36*2)
(1) 1909/     8F4 : 19                  		add	hl,de
(1) 1910/     8F5 : 7E                  		ld	a,(hl)
(1) 1911/     8F6 : 23                  		inc	hl
(1) 1912/     8F7 : 66                  		ld	h,(hl)
(1) 1913/     8F8 : 6F                  		ld	l,a
(1) 1914/     8F9 : FD 7E 07            		ld	a,(iy+07h)	; pitchbend
(1) 1915/     8FC : 07                  		rlca			; << 3
(1) 1916/     8FD : 07                  		rlca
(1) 1917/     8FE : CF                  		rst	8
(1) 1918/     8FF : 07                  		rlca
(1) 1919/     900 : 57                  		ld	d,a
(1) 1920/     901 : E6 F8               		and	11111000b
(1) 1921/     903 : 5F                  		ld	e,a
(1) 1922/     904 : 7A                  		ld	a,d
(1) 1923/     905 : E6 07               		and	00000111b
(1) 1924/     907 : 57                  		ld	d,a
(1) 1925/     908 : 37                  		scf
(1) 1926/     909 : 3F                  		ccf
(1) 1927/     90A : ED 52               		sbc	hl,de
(1) 1928/     90C : DD 75 1C            		ld	(ix+DTL),l
(1) 1929/     90F : DD 74 20            		ld	(ix+DTH),h
(1) 1930/     912 :                     .psg_keyon:
(1) 1931/     912 : FD 7E 08            		ld	a,(iy+08h)	; Set volume
(1) 1932/     915 : ED 44               		neg	a
(1) 1933/     917 : CF                  		rst	8
(1) 1934/     918 : 87                  		add	a,a
(1) 1935/     919 : 87                  		add	a,a
(1) 1936/     91A : 30 02               		jr	nc,.vmuch
(1) 1937/     91C : 3E FF               		ld	a,-1
(1) 1938/     91E :                     .vmuch:
(1) 1939/     91E : DD 77 30            		ld	(ix+PVOL),a
(1) 1940/     921 : CB 40               		bit	0,b		; Note change?
(1) 1941/     923 : 28 04               		jr	z,.psgnone
(1) 1942/     925 : DD 36 00 01         		ld	(ix+COM),001b	; Key ON
(1) 1943/     929 :                     .psgnone:
(1) 1944/     929 : DD E1               		pop	ix
(1) 1945/     92B : C9                  		ret
(1) 1946/     92C :                     ; -1
(1) 1947/     92C :                     .kyoff_psgn:
(1) 1948/     92C : CD 46 09            		call	.kypsgn_hatoff
(1) 1949/     92F :                     .kyoff_psg:
(1) 1950/     92F : 0E 02               		ld	c,010b
(1) 1951/     931 : DD 71 00            		ld	(ix),c
(1) 1952/     934 : DD E1               		pop	ix
(1) 1953/     936 : C3 D6 0F            		jp	.chnl_ulnkoff
(1) 1954/     939 :                     ; -2
(1) 1955/     939 :                     .kycut_psgn:
(1) 1956/     939 : CD 46 09            		call	.kypsgn_hatoff
(1) 1957/     93C :                     .kycut_psg:
(1) 1958/     93C : 0E 04               		ld	c,100b
(1) 1959/     93E : DD 71 00            		ld	(ix),c
(1) 1960/     941 : DD E1               		pop	ix
(1) 1961/     943 : C3 D0 0F            		jp	.chnl_ulnkcut
(1) 1962/     946 :                     
(1) 1963/     946 :                     .kypsgn_hatoff:
(1) 1964/     946 : 3E 00               		ld	a,000b
(1) 1965/     948 : 32 83 1F            		ld	(psgHatMode),a	; ** GLOBAL SETTING
(1) 1966/     94B : CF                  		rst	8
(1) 1967/     94C : C9                  		ret
(1) 1968/     94D :                     
(1) 1969/     94D :                     ; --------------------------------
(1) 1970/     94D :                     
(1) 1971/     94D :                     .mk_fm:
(1) 1972/     94D : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 1973/     950 : FE FE               		cp	-2
(1) 1974/     952 : CA 28 0A            		jp	z,.fm_cut
(1) 1975/     955 : FE FF               		cp	-1
(1) 1976/     957 : CA 22 0A            		jp	z,.fm_off
(1) 1977/     95A :                     ; 		call	.fm_tloff
(1) 1978/     95A : CF                  		rst	8
(1) 1979/     95B : FD 4E 05            		ld	c,(iy+05h)	; c - KeyID
(1) 1980/     95E : 78                  		ld	a,b		; Note bit?
(1) 1981/     95F : E6 01               		and	0001b
(1) 1982/     961 : C8                  		ret	z
(1) 1983/     962 : 79                  		ld	a,c
(1) 1984/     963 : FE 06               		cp	6
(1) 1985/     965 : 20 05               		jr	nz,.not_dac
(1) 1986/     967 : CD CE 12            		call	dac_off
(1) 1987/     96A : 18 16               		jr	.not_dspc
(1) 1988/     96C :                     .not_dac:
(1) 1989/     96C : 79                  		ld	a,c
(1) 1990/     96D : FE 02               		cp	2
(1) 1991/     96F : 20 11               		jr	nz,.not_dspc
(1) 1992/     971 : 3A 84 1F            		ld	a,(fmSpecial)
(1) 1993/     974 : B7                  		or	a
(1) 1994/     975 : 28 0B               		jr	z,.not_dspc
(1) 1995/     977 : 11 00 27            		ld	de,2700h	; CH3 off
(1) 1996/     97A : CD A3 12            		call	fm_send_1
(1) 1997/     97D : 3E 00               		ld	a,0
(1) 1998/     97F : 32 84 1F            		ld	(fmSpecial),a
(1) 1999/     982 :                     .not_dspc:
(1) 2000/     982 : CD 31 0A            		call	.fm_keyoff
(1) 2001/     985 :                     
(1) 2002/     985 : FD 7E 06            		ld	a,(iy+06h)
(1) 2003/     988 : 47                  		ld	b,a
(1) 2004/     989 : E6 1F               		and	00011111b
(1) 2005/     98B : 5F                  		ld	e,a
(1) 2006/     98C : 16 00               		ld	d,0
(1) 2007/     98E : 21 E8 13            		ld	hl,fmFreq_List
(1) 2008/     991 : 19                  		add	hl,de
(1) 2009/     992 : 7E                  		ld	a,(hl)
(1) 2010/     993 : CF                  		rst	8
(1) 2011/     994 : 23                  		inc	hl
(1) 2012/     995 : 66                  		ld	h,(hl)
(1) 2013/     996 : 6F                  		ld	l,a
(1) 2014/     997 : 78                  		ld	a,b
(1) 2015/     998 : E6 E0               		and	11100000b
(1) 2016/     99A : 0F                  		rrca
(1) 2017/     99B : 0F                  		rrca
(1) 2018/     99C : B4                  		or	h
(1) 2019/     99D : 67                  		ld	h,a
(1) 2020/     99E : FD 5E 07            		ld	e,(iy+07h)	; pitchbend
(1) 2021/     9A1 : CF                  		rst	8
(1) 2022/     9A2 : AF                  		xor	a		; Clear high
(1) 2023/     9A3 : 3F                  		ccf			; Clear carry
(1) 2024/     9A4 : CB 23               		sla	e		; << 2
(1) 2025/     9A6 : CB 23               		sla	e
(1) 2026/     9A8 : 9F                  		sbc	a,a		; -1 if carry is set
(1) 2027/     9A9 : 57                  		ld	d,a
(1) 2028/     9AA : 19                  		add	hl,de
(1) 2029/     9AB : CD 50 0A            		call	.fm_setfreq
(1) 2030/     9AE :                     .fmspc_set:
(1) 2031/     9AE : CD E1 0A            		call	.fm_wrtalpan	; Panning and effects
(1) 2032/     9B1 : CD 67 0A            		call	.fm_wrtlvol	; FM volume control
(1) 2036/     9B4 : FD 7E 0F            		ld	a,(iy+0Fh)	; 0Fh - keys ***
(1) 2037/     9B7 : E6 F0               		and	11110000b
(1) 2038/     9B9 : B1                  		or	c
(1) 2039/     9BA : 5F                  		ld	e,a
(1) 2040/     9BB : 16 28               		ld	d,28h
(1) 2041/     9BD : CD A3 12            		call	fm_send_1
(1) 2042/     9C0 : CF                  		rst	8
(1) 2043/     9C1 :                     .nofm_note:
(1) 2044/     9C1 : C9                  		ret
(1) 2046/     9C2 :                     
(1) 2047/     9C2 :                     ; --------------------------------
(1) 2048/     9C2 :                     
(1) 2049/     9C2 :                     .mk_fmspc:
(1) 2050/     9C2 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 2051/     9C5 : FE FE               		cp	-2
(1) 2052/     9C7 : CA 28 0A            		jp	z,.fm_cut
(1) 2053/     9CA : FE FF               		cp	-1
(1) 2054/     9CC : CA 22 0A            		jp	z,.fm_off
(1) 2055/     9CF :                     
(1) 2056/     9CF : 78                  		ld	a,b		; Note bit?
(1) 2057/     9D0 : E6 01               		and	0001b
(1) 2058/     9D2 : C8                  		ret	z
(1) 2059/     9D3 :                     
(1) 2060/     9D3 : FD 4E 05            		ld	c,(iy+05h)	; c - KeyID
(1) 2061/     9D6 : 78                  		ld	a,b
(1) 2062/     9D7 : E6 01               		and	0001b
(1) 2063/     9D9 : 28 D3               		jr	z,.fmspc_set
(1) 2064/     9DB : CD 31 0A            		call	.fm_keyoff
(1) 2065/     9DE : 21 AA 14            		ld	hl,fmcach_list	; Manual freqs
(1) 2066/     9E1 : FD 7E 05            		ld	a,(iy+05h)
(1) 2067/     9E4 : E6 07               		and	0111b
(1) 2068/     9E6 : 16 00               		ld	d,0
(1) 2069/     9E8 : 87                  		add	a,a
(1) 2070/     9E9 : 5F                  		ld	e,a
(1) 2071/     9EA : CF                  		rst	8
(1) 2072/     9EB : 19                  		add	hl,de
(1) 2073/     9EC : 7E                  		ld	a,(hl)
(1) 2074/     9ED : 23                  		inc	hl
(1) 2075/     9EE : 66                  		ld	h,(hl)
(1) 2076/     9EF : 6F                  		ld	l,a
(1) 2077/     9F0 : CF                  		rst	8
(1) 2078/     9F1 : 11 20 00            		ld	de,20h		; point to regs
(1) 2079/     9F4 : 19                  		add	hl,de
(1) 2080/     9F5 : DD E5               		push	ix
(1) 2081/     9F7 : DD 21 1A 0A         		ld	ix,.spcreglist
(1) 2082/     9FB : 06 08               		ld	b,8
(1) 2083/     9FD :                     .wr_spc:
(1) 2084/     9FD : DD 56 00            		ld	d,(ix)
(1) 2085/     A00 : 5E                  		ld	e,(hl)
(1) 2086/     A01 : CD A3 12            		call	fm_send_1
(1) 2087/     A04 : CF                  		rst	8
(1) 2088/     A05 : 23                  		inc	hl
(1) 2089/     A06 : DD 23               		inc	ix
(1) 2090/     A08 : 10 F3               		djnz	.wr_spc
(1) 2091/     A0A : DD E1               		pop	ix
(1) 2092/     A0C : 11 40 27            		ld	de,2740h	; CH3 on
(1) 2093/     A0F : CD A3 12            		call	fm_send_1
(1) 2094/     A12 : 3E 01               		ld	a,1
(1) 2095/     A14 : 32 84 1F            		ld	(fmSpecial),a
(1) 2096/     A17 : C3 AE 09            		jp	.fmspc_set
(1) 2097/     A1A :                     .spcreglist:
(1) 2098/     A1A : AD A9               		db 0ADh,0A9h
(1) 2099/     A1C : AC A8               		db 0ACh,0A8h
(1) 2100/     A1E : AE AA               		db 0AEh,0AAh
(1) 2101/     A20 : A6 A2               		db 0A6h,0A2h
(1) 2102/     A22 :                     
(1) 2103/     A22 :                     ; --------------------------------
(1) 2104/     A22 :                     
(1) 2105/     A22 :                     .fm_off:
(1) 2106/     A22 : CD 31 0A            		call	.fm_keyoff
(1) 2107/     A25 : C3 D6 0F            		jp	.chnl_ulnkoff
(1) 2108/     A28 :                     .fm_cut:
(1) 2109/     A28 : CD 31 0A            		call	.fm_keyoff
(1) 2110/     A2B : CD 39 0A            		call	.fm_tloff
(1) 2111/     A2E : C3 D0 0F            		jp	.chnl_ulnkcut
(1) 2112/     A31 :                     
(1) 2113/     A31 :                     ; ----------------------------------------
(1) 2114/     A31 :                     
(1) 2115/     A31 :                     .fm_keyoff:
(1) 2116/     A31 : 16 28               		ld	d,28h
(1) 2117/     A33 : FD 5E 05            		ld	e,(iy+05h)
(1) 2118/     A36 : C3 A3 12            		jp	fm_send_1
(1) 2119/     A39 :                     .fm_tloff:
(1) 2120/     A39 : 06 04               		ld	b,4
(1) 2121/     A3B : FD 4E 05            		ld	c,(iy+05h)
(1) 2122/     A3E : 79                  		ld	a,c
(1) 2123/     A3F : E6 03               		and	011b
(1) 2124/     A41 : F6 40               		or	40h	; TL regs
(1) 2125/     A43 :                     .tl_down:
(1) 2126/     A43 : 57                  		ld	d,a
(1) 2127/     A44 : 1E 7F               		ld	e,7Fh
(1) 2128/     A46 : CD 9F 12            		call	fm_autoreg
(1) 2129/     A49 : CF                  		rst	8
(1) 2130/     A4A : 7A                  		ld	a,d
(1) 2131/     A4B : C6 04               		add	a,4
(1) 2132/     A4D : 10 F4               		djnz	.tl_down
(1) 2133/     A4F : C9                  		ret
(1) 2134/     A50 :                     ; c - KeyID
(1) 2135/     A50 :                     .fm_setfreq:
(1) 2136/     A50 : 79                  		ld	a,c
(1) 2137/     A51 : E6 03               		and	011b
(1) 2138/     A53 : F6 A4               		or	0A4h
(1) 2139/     A55 : 57                  		ld	d,a
(1) 2140/     A56 : 5C                  		ld	e,h
(1) 2141/     A57 : CF                  		rst	8
(1) 2142/     A58 : CD 9F 12            		call	fm_autoreg
(1) 2143/     A5B : 79                  		ld	a,c
(1) 2144/     A5C : E6 03               		and	011b
(1) 2145/     A5E : F6 A0               		or	0A0h
(1) 2146/     A60 : 57                  		ld	d,a
(1) 2147/     A61 : 5D                  		ld	e,l
(1) 2148/     A62 : CD 9F 12            		call	fm_autoreg
(1) 2149/     A65 : CF                  		rst	8
(1) 2150/     A66 : C9                  		ret
(1) 2151/     A67 :                     
(1) 2152/     A67 :                     ; --------------------------------
(1) 2153/     A67 :                     ; WRITE TL volume
(1) 2154/     A67 :                     
(1) 2155/     A67 :                     .fm_wrtlvol:
(1) 2156/     A67 : 21 AA 14            		ld	hl,fmcach_list
(1) 2157/     A6A : FD 7E 05            		ld	a,(iy+05h)
(1) 2158/     A6D : E6 07               		and	0111b
(1) 2159/     A6F : 16 00               		ld	d,0
(1) 2160/     A71 : CF                  		rst	8
(1) 2161/     A72 : 87                  		add	a,a
(1) 2162/     A73 : 5F                  		ld	e,a
(1) 2163/     A74 : 19                  		add	hl,de
(1) 2164/     A75 : 7E                  		ld	a,(hl)
(1) 2165/     A76 : 23                  		inc	hl
(1) 2166/     A77 : 66                  		ld	h,(hl)
(1) 2167/     A78 : 6F                  		ld	l,a
(1) 2168/     A79 : 23                  		inc	hl
(1) 2169/     A7A : 23                  		inc	hl
(1) 2170/     A7B : 23                  		inc	hl
(1) 2171/     A7C : CF                  		rst	8
(1) 2172/     A7D : 23                  		inc	hl		; Point to TL's
(1) 2173/     A7E : FD 7E 05            		ld	a,(iy+05h)
(1) 2174/     A81 : E6 03               		and	011b
(1) 2175/     A83 : F6 40               		or	40h		; TL registers
(1) 2176/     A85 : 57                  		ld	d,a
(1) 2177/     A86 :                     ; d - 40h+
(1) 2178/     A86 :                     ; hl - TL data
(1) 2179/     A86 :                     ; .fm_wrtlvol:
(1) 2180/     A86 : C5                  		push	bc
(1) 2181/     A87 : E5                  		push	hl
(1) 2182/     A88 : 21 D9 0A            		ld	hl,.fm_cindx
(1) 2183/     A8B : FD 7E 0C            		ld	a,(iy+0Ch)	; Read 0B0h copy
(1) 2184/     A8E : E6 07               		and	0111b
(1) 2185/     A90 : 06 00               		ld	b,0
(1) 2186/     A92 : 4F                  		ld	c,a
(1) 2187/     A93 : 09                  		add	hl,bc
(1) 2188/     A94 : FD 7E 08            		ld	a,(iy+08h)
(1) 2189/     A97 : CB 2F               		sra	a		; volume / 2
(1) 2190/     A99 : E6 7F               		and	01111111b
(1) 2191/     A9B : 4F                  		ld	c,a
(1) 2192/     A9C : CF                  		rst	8
(1) 2193/     A9D : 46                  		ld	b,(hl)
(1) 2194/     A9E : E1                  		pop	hl
(1) 2195/     A9F : CB 08               		rrc	b		; OP1
(1) 2196/     AA1 : DC CC 0A            		call	c,.write_tl
(1) 2197/     AA4 : 23                  		inc	hl
(1) 2198/     AA5 : 14                  		inc	d
(1) 2199/     AA6 : 14                  		inc	d
(1) 2200/     AA7 : CF                  		rst	8
(1) 2201/     AA8 : 14                  		inc	d
(1) 2202/     AA9 : 14                  		inc	d
(1) 2203/     AAA : CB 08               		rrc	b		; OP2
(1) 2204/     AAC : DC CC 0A            		call	c,.write_tl
(1) 2205/     AAF : 23                  		inc	hl
(1) 2206/     AB0 : 14                  		inc	d
(1) 2207/     AB1 : 14                  		inc	d
(1) 2208/     AB2 : 14                  		inc	d
(1) 2209/     AB3 : 14                  		inc	d
(1) 2210/     AB4 : CB 08               		rrc	b		; OP3
(1) 2211/     AB6 : DC CC 0A            		call	c,.write_tl
(1) 2212/     AB9 : 23                  		inc	hl
(1) 2213/     ABA : CF                  		rst	8
(1) 2214/     ABB : 14                  		inc	d
(1) 2215/     ABC : 14                  		inc	d
(1) 2216/     ABD : 14                  		inc	d
(1) 2217/     ABE : 14                  		inc	d
(1) 2218/     ABF : CB 08               		rrc	b		; OP4
(1) 2219/     AC1 : DC CC 0A            		call	c,.write_tl
(1) 2220/     AC4 : 23                  		inc	hl
(1) 2221/     AC5 : 14                  		inc	d
(1) 2222/     AC6 : 14                  		inc	d
(1) 2223/     AC7 : 14                  		inc	d
(1) 2224/     AC8 : 14                  		inc	d
(1) 2225/     AC9 : CF                  		rst	8
(1) 2226/     ACA : C1                  		pop	bc
(1) 2227/     ACB : C9                  		ret
(1) 2228/     ACC :                     .write_tl:
(1) 2229/     ACC : 7E                  		ld	a,(hl)
(1) 2230/     ACD : 91                  		sub	a,c
(1) 2231/     ACE : C5                  		push	bc
(1) 2232/     ACF : 5F                  		ld	e,a
(1) 2233/     AD0 : FD 4E 05            		ld	c,(iy+05h)
(1) 2234/     AD3 : CD 9F 12            		call	fm_autoreg
(1) 2235/     AD6 : CF                  		rst	8
(1) 2236/     AD7 : C1                  		pop	bc
(1) 2237/     AD8 : C9                  		ret
(1) 2238/     AD9 :                     ; Jump carry list
(1) 2239/     AD9 :                     .fm_cindx:
(1) 2240/     AD9 : 08                  		db 1000b
(1) 2241/     ADA : 08                  		db 1000b
(1) 2242/     ADB : 08                  		db 1000b
(1) 2243/     ADC : 08                  		db 1000b
(1) 2244/     ADD : 0C                  		db 1100b
(1) 2245/     ADE : 0E                  		db 1110b
(1) 2246/     ADF : 0E                  		db 1110b
(1) 2247/     AE0 : 0F                  		db 1111b
(1) 2248/     AE1 :                     ; c - KeyId
(1) 2249/     AE1 :                     .fm_wrtalpan:
(1) 2250/     AE1 : FD 7E 0C            		ld	a,(iy+0Ch)		; 0B0h algorithm
(1) 2251/     AE4 : 5F                  		ld	e,a
(1) 2252/     AE5 : 79                  		ld	a,c
(1) 2253/     AE6 : E6 03               		and	011b
(1) 2254/     AE8 : F6 B0               		or	0B0h
(1) 2255/     AEA : 57                  		ld	d,a
(1) 2256/     AEB : CD 9F 12            		call	fm_autoreg
(1) 2257/     AEE : CF                  		rst	8
(1) 2258/     AEF : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Read panning bits
(1) 2259/     AF2 : 2F                  		cpl				; REVERSE bits
(1) 2260/     AF3 : E6 30               		and	00110000b
(1) 2261/     AF5 : 07                  		rlca
(1) 2262/     AF6 : 07                  		rlca
(1) 2263/     AF7 : 5F                  		ld	e,a
(1) 2264/     AF8 : FD 7E 0D            		ld	a,(iy+0Dh)		; 0B4h %LRaa0ppp
(1) 2265/     AFB : E6 3F               		and	00111111b
(1) 2266/     AFD : B3                  		or	e
(1) 2267/     AFE : 5F                  		ld	e,a
(1) 2268/     AFF : 79                  		ld	a,c
(1) 2269/     B00 : E6 03               		and	011b
(1) 2270/     B02 : F6 B4               		or	0B4h
(1) 2271/     B04 : 57                  		ld	d,a
(1) 2272/     B05 : CD 9F 12            		call	fm_autoreg
(1) 2273/     B08 : CF                  		rst	8
(1) 2274/     B09 : FD 7E 0E            		ld	a,(iy+0Eh)
(1) 2275/     B0C : CB 5F               		bit	3,a
(1) 2276/     B0E : 28 06               		jr	z,.no_lfo
(1) 2277/     B10 : 5F                  		ld	e,a
(1) 2278/     B11 : 16 22               		ld	d,22h
(1) 2279/     B13 : CD A3 12            		call	fm_send_1
(1) 2280/     B16 :                     .no_lfo:
(1) 2281/     B16 : C9                  		ret
(1) 2282/     B17 :                     
(1) 2283/     B17 :                     ; --------------------------------
(1) 2284/     B17 :                     
(1) 2285/     B17 :                     .mk_dac:
(1) 2286/     B17 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 2287/     B1A : FE FE               		cp	-2
(1) 2288/     B1C : CA 47 0B            		jp	z,.dac_cut
(1) 2289/     B1F : FE FF               		cp	-1
(1) 2290/     B21 : CA 4D 0B            		jp	z,.dac_off
(1) 2291/     B24 : CD 50 0B            		call	.dac_pitch
(1) 2292/     B27 :                     
(1) 2293/     B27 : CB 40               		bit	0,b
(1) 2294/     B29 : 20 13               		jr	nz,.dac_note
(1) 2295/     B2B : CB 58               		bit	3,b
(1) 2296/     B2D : C8                  		ret	z
(1) 2297/     B2E :                     .dac_pan:
(1) 2298/     B2E : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Read panning
(1) 2299/     B31 : 2F                  		cpl				; REVERSE bits
(1) 2300/     B32 : E6 30               		and	00110000b
(1) 2301/     B34 : 07                  		rlca
(1) 2302/     B35 : 07                  		rlca
(1) 2303/     B36 : 5F                  		ld	e,a
(1) 2304/     B37 : 16 B6               		ld	d,0B6h			; Channel 6 panning
(1) 2305/     B39 : CD AE 12            		call	fm_send_2
(1) 2306/     B3C : CF                  		rst	8
(1) 2307/     B3D : C9                  		ret
(1) 2308/     B3E :                     .dac_note:
(1) 2309/     B3E : CD CE 12            		call	dac_off
(1) 2310/     B41 : CD 2E 0B            		call	.dac_pan
(1) 2311/     B44 : C3 E3 12            		jp	dac_play
(1) 2312/     B47 :                     .dac_cut:
(1) 2313/     B47 : CD CE 12            		call	dac_off
(1) 2314/     B4A : C3 D6 0F            		jp	.chnl_ulnkoff
(1) 2315/     B4D :                     .dac_off:
(1) 2316/     B4D : C3 D0 0F            		jp	.chnl_ulnkcut
(1) 2317/     B50 :                     .dac_pitch:
(1) 2318/     B50 : 16 00               		ld	d,0		; Freq index
(1) 2319/     B52 : FD 5E 06            		ld	e,(iy+06h)
(1) 2320/     B55 : 21 70 14            		ld	hl,wavFreq_List-(36*2)
(1) 2321/     B58 : 19                  		add	hl,de
(1) 2322/     B59 : 7E                  		ld	a,(hl)
(1) 2323/     B5A : 23                  		inc	hl
(1) 2324/     B5B : 66                  		ld	h,(hl)
(1) 2325/     B5C : CF                  		rst	8
(1) 2326/     B5D : 6F                  		ld	l,a
(1) 2327/     B5E : FD 5E 07            		ld	e,(iy+07h)	; pitchbend
(1) 2328/     B61 : AF                  		xor	a		; Clear high
(1) 2329/     B62 : 3F                  		ccf			; Clear carry
(1) 2330/     B63 : CB 23               		sla	e		; << 3
(1) 2331/     B65 : CB 23               		sla	e
(1) 2332/     B67 : CB 23               		sla	e
(1) 2333/     B69 : 9F                  		sbc	a,a		; -1 if carry is set
(1) 2334/     B6A : 57                  		ld	d,a
(1) 2335/     B6B : 19                  		add	hl,de
(1) 2336/     B6C : 22 92 1F            		ld	(wave_Pitch),hl
(1) 2337/     B6F : D9                  		exx			; *
(1) 2338/     B70 : ED 5B 92 1F         		ld	de,(wave_Pitch)	; *
(1) 2339/     B74 : D9                  		exx			; *
(1) 2340/     B75 : C9                  		ret
(1) 2341/     B76 :                     
(1) 2342/     B76 :                     ; --------------------------------
(1) 2343/     B76 :                     ; PCM
(1) 2344/     B76 :                     .mk_pcm:
(1) 2345/     B76 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 2346/     B79 : 16 00               		ld	d,0
(1) 2347/     B7B : FD 5E 05            		ld	e,(iy+05h)
(1) 2348/     B7E : DD 4E 00            		ld	c,(ix+chnl_Flags)
(1) 2349/     B81 : DD E5               		push	ix
(1) 2350/     B83 : DD 21 92 18         		ld	ix,pcmcom
(1) 2351/     B87 : DD 19               		add	ix,de
(1) 2352/     B89 : FE FE               		cp	-2
(1) 2353/     B8B : CA A6 0B            		jp	z,.pcm_cut
(1) 2354/     B8E : FE FF               		cp	-1
(1) 2355/     B90 : CA 9F 0B            		jp	z,.pcm_off
(1) 2356/     B93 : CF                  		rst	8
(1) 2357/     B94 : CB 40               		bit	0,b			; Note?
(1) 2358/     B96 : 20 24               		jr	nz,.pcm_note
(1) 2359/     B98 : CB 58               		bit	3,b			; Effect?
(1) 2360/     B9A : 20 19               		jr	nz,.pcm_effc
(1) 2361/     B9C : DD E1               		pop	ix
(1) 2362/     B9E : C9                  		ret
(1) 2363/     B9F :                     
(1) 2364/     B9F :                     ; --------------------------------
(1) 2365/     B9F :                     ; -1
(1) 2366/     B9F :                     .pcm_off:
(1) 2367/     B9F : CF                  		rst	8
(1) 2368/     BA0 : DD 36 00 02         		ld	(ix),010b
(1) 2369/     BA4 : 18 05               		jr	.pcm_setcoff
(1) 2370/     BA6 :                     ; -2
(1) 2371/     BA6 :                     .pcm_cut:
(1) 2372/     BA6 : CF                  		rst	8
(1) 2373/     BA7 : DD 36 00 04         		ld	(ix),100b
(1) 2374/     BAB :                     .pcm_setcoff:
(1) 2375/     BAB : 3E 01               		ld	a,1
(1) 2376/     BAD : 32 88 1F            		ld	(mcdUpd),a
(1) 2377/     BB0 : DD E1               		pop	ix
(1) 2378/     BB2 : C3 D6 0F            		jp	.chnl_ulnkoff
(1) 2379/     BB5 :                     
(1) 2380/     BB5 :                     ; --------------------------------
(1) 2381/     BB5 :                     
(1) 2382/     BB5 :                     .pcm_effc:
(1) 2383/     BB5 : CD 84 0C            		call	.setpcm_freq
(1) 2384/     BB8 : 0E 09               		ld	c,00001001b
(1) 2385/     BBA : 18 0F               		jr	.pcm_send
(1) 2386/     BBC :                     .pcm_note:
(1) 2387/     BBC : 79                  		ld	a,c		; <-- Lazy panning reset
(1) 2388/     BBD : E6 30               		and	00110000b	; Read LR bits
(1) 2389/     BBF : B7                  		or	a
(1) 2390/     BC0 : 20 04               		jr	nz,.mp_reset
(1) 2391/     BC2 : FD 36 0A 00         		ld	(iy+0Ah),0	; If 0, reset value on table
(1) 2392/     BC6 :                     .mp_reset:
(1) 2393/     BC6 : CD 84 0C            		call	.setpcm_freq
(1) 2394/     BC9 : 0E 01               		ld	c,00000001b	; KeyON request
(1) 2395/     BCB :                     .pcm_send:
(1) 2396/     BCB : DD 71 00            		ld	(ix),c		; Write key-on bit
(1) 2397/     BCE : 11 08 00            		ld	de,8		; Go to Pitch
(1) 2398/     BD1 : DD 19               		add	ix,de
(1) 2399/     BD3 : DD 74 00            		ld	(ix),h		; Set pitch
(1) 2400/     BD6 : DD 19               		add	ix,de
(1) 2401/     BD8 : DD 75 00            		ld	(ix),l
(1) 2402/     BDB : DD 19               		add	ix,de
(1) 2403/     BDD : 0E FF               		ld	c,-1		; Set volume
(1) 2404/     BDF : FD 7E 08            		ld	a,(iy+08h)
(1) 2405/     BE2 : 87                  		add	a,a
(1) 2406/     BE3 : 87                  		add	a,a
(1) 2407/     BE4 : 38 01               		jr	c,.v_overfl
(1) 2408/     BE6 : 81                  		add	a,c
(1) 2409/     BE7 :                     .v_overfl:
(1) 2410/     BE7 : DD 77 00            		ld	(ix),a
(1) 2411/     BEA : DD 19               		add	ix,de
(1) 2412/     BEC : FD 7E 0A            		ld	a,(iy+0Ah)
(1) 2413/     BEF : 2F                  		cpl
(1) 2414/     BF0 : DD 77 00            		ld	(ix),a
(1) 2416/     BF3 : 3E 01               		ld	a,1
(1) 2417/     BF5 : 32 88 1F            		ld	(mcdUpd),a
(1) 2419/     BF8 : DD E1               		pop	ix
(1) 2420/     BFA : C9                  		ret
(1) 2421/     BFB :                     
(1) 2422/     BFB :                     ; --------------------------------
(1) 2423/     BFB :                     ; PWM
(1) 2424/     BFB :                     
(1) 2425/     BFB :                     .mk_pwm:
(1) 2426/     BFB : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 2427/     BFE : 16 00               		ld	d,0
(1) 2428/     C00 : FD 5E 05            		ld	e,(iy+05h)
(1) 2429/     C03 : DD 4E 00            		ld	c,(ix+chnl_Flags)	; c - Panning bits
(1) 2430/     C06 : DD E5               		push	ix
(1) 2431/     C08 : DD 21 D2 18         		ld	ix,pwmcom
(1) 2432/     C0C : DD 19               		add	ix,de
(1) 2433/     C0E : FE FE               		cp	-2
(1) 2434/     C10 : CA 2C 0C            		jp	z,.pwm_cut
(1) 2435/     C13 : FE FF               		cp	-1
(1) 2436/     C15 : CA 25 0C            		jp	z,.pwm_off
(1) 2437/     C18 : CF                  		rst	8
(1) 2438/     C19 : 78                  		ld	a,b
(1) 2439/     C1A : CB 40               		bit	0,b			; Note?
(1) 2440/     C1C : 20 3D               		jr	nz,.pw_note
(1) 2441/     C1E : CB 58               		bit	3,b			; Effect?
(1) 2442/     C20 : 20 32               		jr	nz,.pw_effc
(1) 2443/     C22 : DD E1               		pop	ix
(1) 2444/     C24 : C9                  		ret
(1) 2445/     C25 :                     
(1) 2446/     C25 :                     ; --------------------------------
(1) 2447/     C25 :                     ; -1
(1) 2448/     C25 :                     .pwm_off:
(1) 2449/     C25 : CF                  		rst	8
(1) 2450/     C26 : DD 36 00 02         		ld	(ix),010b
(1) 2451/     C2A : 18 05               		jr	.pwm_setcoff
(1) 2452/     C2C :                     ; -2
(1) 2453/     C2C :                     .pwm_cut:
(1) 2454/     C2C : CF                  		rst	8
(1) 2455/     C2D : DD 36 00 04         		ld	(ix),100b
(1) 2456/     C31 :                     .pwm_setcoff:
(1) 2457/     C31 : 3E 01               		ld	a,1
(1) 2458/     C33 : 32 87 1F            		ld	(marsUpd),a
(1) 2459/     C36 : DD E1               		pop	ix
(1) 2460/     C38 : C3 D6 0F            		jp	.chnl_ulnkoff
(1) 2461/     C3B :                     
(1) 2462/     C3B :                     ; --------------------------------
(1) 2463/     C3B :                     
(1) 2464/     C3B :                     .pw_setup:
(1) 2465/     C3B : CD 89 0C            		call	.setpwm_freq
(1) 2466/     C3E : 79                  		ld	a,c		; Read panning bits
(1) 2467/     C3F :                     ; 		rrca
(1) 2468/     C3F :                     ; 		rrca
(1) 2469/     C3F : 2F                  		cpl
(1) 2470/     C40 : E6 30               		and	00110000b
(1) 2471/     C42 : CF                  		rst	8
(1) 2472/     C43 : 5F                  		ld	e,a		; e - set panning bits
(1) 2473/     C44 : AF                  		xor	a
(1) 2474/     C45 : FD 7E 08            		ld	a,(iy+08h)	; Read volume
(1) 2475/     C48 : ED 44               		neg	a
(1) 2476/     C4A : 87                  		add	a,a
(1) 2477/     C4B : 87                  		add	a,a
(1) 2478/     C4C :                     ; 		sla	a
(1) 2479/     C4C :                     ; 		sla	a
(1) 2480/     C4C :                     ; 		sla	a
(1) 2481/     C4C : 30 02               		jr	nc,.pwv_much
(1) 2482/     C4E : 3E FF               		ld	a,-1
(1) 2483/     C50 :                     .pwv_much:
(1) 2484/     C50 : E6 FC               		and	11111100b
(1) 2485/     C52 : B4                  		or	h		; Merge MSB freq
(1) 2486/     C53 : C9                  		ret
(1) 2487/     C54 :                     
(1) 2488/     C54 :                     ; --------------------------------
(1) 2489/     C54 :                     
(1) 2490/     C54 :                     .pw_effc:
(1) 2491/     C54 : CD 3B 0C            		call	.pw_setup
(1) 2492/     C57 : 0E 09               		ld	c,00001001b
(1) 2493/     C59 : 18 05               		jr	.pw_send
(1) 2494/     C5B :                     .pw_note:
(1) 2495/     C5B : CD 3B 0C            		call	.pw_setup
(1) 2496/     C5E : 0E 01               		ld	c,00000001b	; KeyON request
(1) 2497/     C60 :                     .pw_send:
(1) 2498/     C60 : DD 71 00            		ld	(ix),c		; Set command
(1) 2499/     C63 : 01 08 00            		ld	bc,8
(1) 2500/     C66 : DD 09               		add	ix,bc
(1) 2501/     C68 : DD 77 00            		ld	(ix),a
(1) 2502/     C6B : DD 09               		add	ix,bc
(1) 2503/     C6D : DD 75 00            		ld	(ix),l
(1) 2504/     C70 : DD 09               		add	ix,bc
(1) 2505/     C72 : CF                  		rst	8
(1) 2506/     C73 : DD 7E 00            		ld	a,(ix)
(1) 2507/     C76 : E6 CF               		and	11001111b
(1) 2508/     C78 : B3                  		or	e		; Set panning bits
(1) 2509/     C79 : DD 77 00            		ld	(ix),a
(1) 2511/     C7C : 3E 01               		ld	a,1
(1) 2512/     C7E : 32 87 1F            		ld	(marsUpd),a
(1) 2514/     C81 : DD E1               		pop	ix
(1) 2515/     C83 : C9                  		ret
(1) 2516/     C84 :                     
(1) 2517/     C84 :                     ; --------------------------------
(1) 2518/     C84 :                     ; SHARED routine
(1) 2519/     C84 :                     
(1) 2520/     C84 :                     .setpcm_freq:
(1) 2521/     C84 : 21 18 15            		ld	hl,wavFreq_CdPcm-(36*2)
(1) 2522/     C87 : 18 03               		jr	.set_wavfreq
(1) 2523/     C89 :                     .setpwm_freq:
(1) 2524/     C89 : 21 70 14            		ld	hl,wavFreq_List-(36*2)
(1) 2525/     C8C :                     
(1) 2526/     C8C :                     .set_wavfreq:
(1) 2527/     C8C : 16 00               		ld	d,0		; Freq index
(1) 2528/     C8E : FD 5E 06            		ld	e,(iy+06h)
(1) 2529/     C91 : 19                  		add	hl,de
(1) 2530/     C92 : 7E                  		ld	a,(hl)
(1) 2531/     C93 : 23                  		inc	hl
(1) 2532/     C94 : 66                  		ld	h,(hl)
(1) 2533/     C95 : 6F                  		ld	l,a
(1) 2534/     C96 : FD 5E 07            		ld	e,(iy+07h)	; pitchbend
(1) 2535/     C99 : CF                  		rst	8
(1) 2536/     C9A : AF                  		xor	a		; Clear high
(1) 2537/     C9B : 3F                  		ccf			; Clear carry
(1) 2538/     C9C : CB 23               		sla	e		; << 2
(1) 2539/     C9E : CB 23               		sla	e
(1) 2540/     CA0 : 9F                  		sbc	a,a		; -1 if carry is set
(1) 2541/     CA1 : 57                  		ld	d,a
(1) 2542/     CA2 : 19                  		add	hl,de
(1) 2543/     CA3 : C9                  		ret
(1) 2544/     CA4 :                     
(1) 2545/     CA4 :                     ; ----------------------------------------
(1) 2546/     CA4 :                     ; NEW effect
(1) 2547/     CA4 :                     ; ----------------------------------------
(1) 2548/     CA4 :                     
(1) 2549/     CA4 :                     .effc:
(1) 2550/     CA4 : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - effect data
(1) 2551/     CA7 : DD 7E 05            		ld	a,(ix+chnl_EffId)	; d - effect id
(1) 2552/     CAA : 57                  		ld	d,a
(1) 2553/     CAB : CF                  		rst	8
(1) 2554/     CAC : FE 04               		cp	4			; Effect D?
(1) 2555/     CAE : 28 0F               		jr	z,.effc_D
(1) 2556/     CB0 : FE 05               		cp	5			; Effect E?
(1) 2557/     CB2 : 28 4E               		jr	z,.effc_E
(1) 2558/     CB4 : FE 06               		cp	6			; Effect F?
(1) 2559/     CB6 : 28 5F               		jr	z,.effc_F
(1) 2560/     CB8 : CF                  		rst	8
(1) 2561/     CB9 : FE 18               		cp	24			; Effect X?
(1) 2562/     CBB : CA 38 0D            		jp	z,.effc_X
(1) 2563/     CBE : C9                  		ret
(1) 2564/     CBF :                     
(1) 2565/     CBF :                     ; ----------------------------------------
(1) 2566/     CBF :                     ; Effect D
(1) 2567/     CBF :                     ;
(1) 2568/     CBF :                     ; Volume slide down
(1) 2569/     CBF :                     ;
(1) 2570/     CBF :                     ; 0xh-Exh - Normal
(1) 2571/     CBF :                     ; Fxh-Fxh - Fine slide / 2
(1) 2572/     CBF :                     ; ----------------------------------------
(1) 2573/     CBF :                     
(1) 2574/     CBF :                     .effc_D:
(1) 2575/     CBF : CD 2C 0D            		call	.save_arg
(1) 2576/     CC2 : 79                  		ld	a,c		; Setting == 0?
(1) 2577/     CC3 : B7                  		or	a
(1) 2578/     CC4 : C8                  		ret	z
(1) 2579/     CC5 : E6 F0               		and	0F0h
(1) 2580/     CC7 : 28 0F               		jr	z,.norm_down	; 0xh
(1) 2581/     CC9 : FE F0               		cp	0F0h
(1) 2582/     CCB : 28 0D               		jr	z,.fine_down	; Fxh
(1) 2583/     CCD : CF                  		rst	8
(1) 2584/     CCE : 79                  		ld	a,c
(1) 2585/     CCF : E6 0F               		and	00Fh
(1) 2586/     CD1 : 28 1D               		jr	z,.norm_up	; x0h
(1) 2587/     CD3 : FE 0F               		cp	00Fh
(1) 2588/     CD5 : 28 17               		jr	z,.fine_up	; xFh
(1) 2589/     CD7 : C9                  		ret
(1) 2590/     CD8 :                     ; Go down
(1) 2591/     CD8 :                     .norm_down:
(1) 2592/     CD8 : CB 21               		sla	c
(1) 2593/     CDA :                     .fine_down:
(1) 2594/     CDA : CB 21               		sla	c
(1) 2595/     CDC : 79                  		ld	a,c
(1) 2596/     CDD : E6 3C               		and	00111100b
(1) 2597/     CDF : 4F                  		ld	c,a
(1) 2598/     CE0 : FD 7E 08            		ld	a,(iy+08h)	; Current volume
(1) 2599/     CE3 : CF                  		rst	8
(1) 2600/     CE4 : 91                  		sub	a,c
(1) 2601/     CE5 : 1E C0               		ld	e,0C0h
(1) 2602/     CE7 : BB                  		cp	e
(1) 2603/     CE8 : D2 FE 0C            		jp	nc,.vol_dvld
(1) 2604/     CEB : 7B                  		ld	a,e
(1) 2605/     CEC : 18 10               		jr 	.vol_dvld
(1) 2606/     CEE :                     ; Go up
(1) 2607/     CEE :                     .fine_up:
(1) 2608/     CEE : CB 39               		srl	c
(1) 2609/     CF0 :                     .norm_up:
(1) 2610/     CF0 : CB 39               		srl	c
(1) 2611/     CF2 : 79                  		ld	a,c
(1) 2612/     CF3 : E6 3C               		and	00111100b
(1) 2613/     CF5 : 4F                  		ld	c,a
(1) 2614/     CF6 : FD 7E 08            		ld	a,(iy+08h)	; Current volume
(1) 2615/     CF9 : CF                  		rst	8
(1) 2616/     CFA : 81                  		add	a,c
(1) 2617/     CFB : 38 01               		jr	c,.vol_dvld
(1) 2618/     CFD : AF                  		xor	a
(1) 2619/     CFE :                     .vol_dvld:
(1) 2620/     CFE : FD 77 08            		ld	(iy+08h),a
(1) 2621/     D01 : C9                  		ret
(1) 2622/     D02 :                     
(1) 2623/     D02 :                     ; ----------------------------------------
(1) 2624/     D02 :                     ; Effect E
(1) 2625/     D02 :                     ; ----------------------------------------
(1) 2626/     D02 :                     
(1) 2627/     D02 :                     .effc_E:
(1) 2628/     D02 : CD 2C 0D            		call	.save_arg
(1) 2629/     D05 : 79                  		ld	a,c
(1) 2630/     D06 : E6 F0               		and	0F0h
(1) 2631/     D08 : FE F0               		cp	0F0h
(1) 2632/     D0A : C8                  		ret	z
(1) 2633/     D0B : FE E0               		cp	0E0h
(1) 2634/     D0D : C8                  		ret	z
(1) 2635/     D0E : CF                  		rst	8
(1) 2636/     D0F : FD 7E 07            		ld	a,(iy+07h)
(1) 2637/     D12 : 91                  		sub	a,c
(1) 2638/     D13 : FD 77 07            		ld	(iy+07h),a
(1) 2639/     D16 : C9                  		ret
(1) 2640/     D17 :                     
(1) 2641/     D17 :                     ; ----------------------------------------
(1) 2642/     D17 :                     ; Effect F
(1) 2643/     D17 :                     ; ----------------------------------------
(1) 2644/     D17 :                     
(1) 2645/     D17 :                     .effc_F:
(1) 2646/     D17 : CD 2C 0D            		call	.save_arg
(1) 2647/     D1A : 79                  		ld	a,c
(1) 2648/     D1B : E6 F0               		and	0F0h
(1) 2649/     D1D : FE F0               		cp	0F0h
(1) 2650/     D1F : C8                  		ret	z
(1) 2651/     D20 : FE E0               		cp	0E0h
(1) 2652/     D22 : C8                  		ret	z
(1) 2653/     D23 : CF                  		rst	8
(1) 2654/     D24 : FD 7E 07            		ld	a,(iy+07h)
(1) 2655/     D27 : 81                  		add	a,c
(1) 2656/     D28 : FD 77 07            		ld	(iy+07h),a
(1) 2657/     D2B : C9                  		ret
(1) 2658/     D2C :                     
(1) 2659/     D2C :                     ; --------------------------------
(1) 2660/     D2C :                     ; e - got arg
(1) 2661/     D2C :                     ; c - new arg
(1) 2662/     D2C :                     .save_arg:
(1) 2663/     D2C : FD 4E 09            		ld	c,(iy+09h)	; Current slide setting
(1) 2664/     D2F : 7B                  		ld	a,e		; EffArg is non-zero?
(1) 2665/     D30 : B7                  		or	a
(1) 2666/     D31 : 28 04               		jr	z,.D_cont	; 00h = slide continue
(1) 2667/     D33 : 4F                  		ld	c,a
(1) 2668/     D34 : FD 71 09            		ld	(iy+09h),c	; Store NEW slide setting
(1) 2669/     D37 :                     .D_cont:
(1) 2670/     D37 : C9                  		ret
(1) 2671/     D38 :                     
(1) 2672/     D38 :                     ; ----------------------------------------
(1) 2673/     D38 :                     ; Effect X
(1) 2674/     D38 :                     ;
(1) 2675/     D38 :                     ; Panning format:
(1) 2676/     D38 :                     ;  00h LEFT
(1) 2677/     D38 :                     ;  80h MIDDLE
(1) 2678/     D38 :                     ; 0FFh RIGHT
(1) 2679/     D38 :                     ; ----------------------------------------
(1) 2680/     D38 :                     
(1) 2681/     D38 :                     .effc_X:
(1) 2682/     D38 : 16 00               		ld	d,0
(1) 2683/     D3A : 7E                  		ld	a,(hl)
(1) 2684/     D3B : E6 F0               		and	11110000b
(1) 2685/     D3D : FE 80               		cp	80h		; PSG?
(1) 2686/     D3F : 28 1D               		jr	z,.res_pan
(1) 2687/     D41 : FE 90               		cp	90h		; PSGN?
(1) 2688/     D43 : 28 19               		jr	z,.res_pan
(1) 2689/     D45 : FE D0               		cp	0D0h		; MCD: write separate PAN values
(1) 2690/     D47 : CC 68 0D            		call	z,.pan_mcd	; <-- CALL, not JP
(1) 2691/     D4A :                     
(1) 2692/     D4A :                     	; ----------------------------------------
(1) 2693/     D4A :                     	; Common panning bits: %00LR0000
(1) 2694/     D4A :                     	; (REVERSE: 0-on 1-off)
(1) 2695/     D4A : FD 36 09 00         		ld	(iy+09h),0
(1) 2696/     D4E : CF                  		rst	8
(1) 2697/     D4F : E5                  		push	hl
(1) 2698/     D50 : 21 7E 0D            		ld	hl,.comn_panlist
(1) 2699/     D53 : 7B                  		ld	a,e
(1) 2700/     D54 : 07                  		rlca
(1) 2701/     D55 : 07                  		rlca
(1) 2702/     D56 : 07                  		rlca
(1) 2703/     D57 : E6 07               		and	0111b
(1) 2704/     D59 :                     ; 		ld	d,0
(1) 2705/     D59 : 5F                  		ld	e,a
(1) 2706/     D5A : CF                  		rst	8
(1) 2707/     D5B : 19                  		add	hl,de
(1) 2708/     D5C : 56                  		ld	d,(hl)
(1) 2709/     D5D : E1                  		pop	hl
(1) 2710/     D5E :                     .res_pan:
(1) 2711/     D5E : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Save panning
(1) 2712/     D61 : E6 CF               		and	11001111b
(1) 2713/     D63 : B2                  		or	d
(1) 2714/     D64 : DD 77 00            		ld	(ix+chnl_Flags),a
(1) 2715/     D67 : C9                  		ret
(1) 2716/     D68 :                     
(1) 2717/     D68 :                     	; ----------------------------------------
(1) 2718/     D68 :                     	; MCD panning
(1) 2719/     D68 :                     .pan_mcd:
(1) 2720/     D68 : E5                  		push	hl
(1) 2721/     D69 : D5                  		push	de
(1) 2722/     D6A : 16 00               		ld	d,0
(1) 2723/     D6C : 21 86 0D            		ld	hl,.pcm_panlist
(1) 2724/     D6F : 7B                  		ld	a,e
(1) 2725/     D70 : E6 F8               		and	0F8h
(1) 2726/     D72 : 0F                  		rrca
(1) 2727/     D73 : 0F                  		rrca
(1) 2728/     D74 : 0F                  		rrca
(1) 2729/     D75 : 5F                  		ld	e,a
(1) 2730/     D76 : 19                  		add	hl,de
(1) 2731/     D77 : 7E                  		ld	a,(hl)
(1) 2732/     D78 : FD 77 0A            		ld	(iy+0Ah),a
(1) 2733/     D7B : D1                  		pop	de
(1) 2734/     D7C : E1                  		pop	hl
(1) 2735/     D7D : C9                  		ret
(1) 2736/     D7E :                     
(1) 2737/     D7E :                     ; 0 - ENABLE, 1 - DISABLE
(1) 2738/     D7E :                     ; 00LR0000b
(1) 2739/     D7E :                     .comn_panlist:
(1) 2740/     D7E : 10                  		db 00010000b
(1) 2741/     D7F : 10                  		db 00010000b
(1) 2742/     D80 : 10                  		db 00010000b
(1) 2743/     D81 : 00                  		db 00000000b
(1) 2744/     D82 : 00                  		db 00000000b
(1) 2745/     D83 : 20                  		db 00100000b
(1) 2746/     D84 : 20                  		db 00100000b
(1) 2747/     D85 : 20                  		db 00100000b
(1) 2748/     D86 :                     
(1) 2749/     D86 :                     ; REVERSE OUTPUT BITS
(1) 2750/     D86 :                     ; RRRR | LLLL
(1) 2751/     D86 :                     .pcm_panlist:
(1) 2752/     D86 : F0                  		db 0F0h	; 00h
(1) 2753/     D87 : E0                  		db 0E0h
(1) 2754/     D88 : D0                  		db 0D0h	; 10h
(1) 2755/     D89 : C0                  		db 0C0h
(1) 2756/     D8A : B0                  		db 0B0h	; 20h
(1) 2757/     D8B : A0                  		db 0A0h
(1) 2758/     D8C : 90                  		db 090h	; 30h
(1) 2759/     D8D : 80                  		db 080h
(1) 2760/     D8E : 70                  		db 070h	; 40h
(1) 2761/     D8F : 60                  		db 060h
(1) 2762/     D90 : 50                  		db 050h	; 50h
(1) 2763/     D91 : 40                  		db 040h
(1) 2764/     D92 : 30                  		db 030h	; 60h
(1) 2765/     D93 : 20                  		db 020h
(1) 2766/     D94 : 10                  		db 010h	; 70h
(1) 2767/     D95 : 00                  		db 000h
(1) 2768/     D96 : 00                  		db 000h ; 80h
(1) 2769/     D97 : 01                  		db 001h
(1) 2770/     D98 : 02                  		db 002h ; 90h
(1) 2771/     D99 : 03                  		db 003h
(1) 2772/     D9A : 04                  		db 004h ; A0h
(1) 2773/     D9B : 05                  		db 005h
(1) 2774/     D9C : 06                  		db 006h ; B0h
(1) 2775/     D9D : 07                  		db 007h
(1) 2776/     D9E : 08                  		db 008h ; C0h
(1) 2777/     D9F : 09                  		db 009h
(1) 2778/     DA0 : 0A                  		db 00Ah ; D0h
(1) 2779/     DA1 : 0B                  		db 00Bh
(1) 2780/     DA2 : 0C                  		db 00Ch ; E0h
(1) 2781/     DA3 : 0D                  		db 00Dh
(1) 2782/     DA4 : 0E                  		db 00Eh ; F0h
(1) 2783/     DA5 : 0F                  		db 00Fh
(1) 2784/     DA6 :                     
(1) 2785/     DA6 :                     ; ----------------------------------------
(1) 2786/     DA6 :                     ; NEW volume
(1) 2787/     DA6 :                     ; ----------------------------------------
(1) 2788/     DA6 :                     
(1) 2789/     DA6 :                     .volu:
(1) 2790/     DA6 : DD 7E 04            		ld	a,(ix+chnl_Vol)
(1) 2791/     DA9 : D6 40               		sub	a,64
(1) 2792/     DAB : FD 77 08            		ld	(iy+08h),a	; BASE volume
(1) 2793/     DAE : C9                  		ret
(1) 2794/     DAF :                     
(1) 2795/     DAF :                     ; ----------------------------------------
(1) 2796/     DAF :                     ; NEW instrument
(1) 2797/     DAF :                     ; ----------------------------------------
(1) 2798/     DAF :                     
(1) 2799/     DAF :                     .inst:
(1) 2800/     DAF : 7E                  		ld	a,(hl)
(1) 2801/     DB0 : E6 F0               		and	11110000b
(1) 2802/     DB2 : FE 80               		cp	080h
(1) 2803/     DB4 : 28 24               		jr	z,.ins_psg
(1) 2804/     DB6 : FE 90               		cp	090h
(1) 2805/     DB8 : 28 1A               		jr	z,.ins_psgn
(1) 2806/     DBA : FE A0               		cp	0A0h
(1) 2807/     DBC : 28 52               		jr	z,.ins_fm
(1) 2808/     DBE : CF                  		rst	8
(1) 2809/     DBF : FE B0               		cp	0B0h
(1) 2810/     DC1 : 28 4D               		jr	z,.ins_fm
(1) 2811/     DC3 : FE C0               		cp	0C0h
(1) 2812/     DC5 : CA 91 0E            		jp	z,.ins_dac
(1) 2813/     DC8 : FE D0               		cp	0D0h
(1) 2814/     DCA : CA E5 0E            		jp	z,.ins_pcm
(1) 2815/     DCD : FE E0               		cp	0E0h
(1) 2816/     DCF : CA 1D 0F            		jp	z,.ins_pwm
(1) 2817/     DD2 : CF                  		rst	8
(1) 2818/     DD3 :                     .invl_ins:
(1) 2819/     DD3 : C9                  		ret
(1) 2820/     DD4 :                     
(1) 2821/     DD4 :                     ; ----------------------------------------
(1) 2822/     DD4 :                     ; PSG
(1) 2823/     DD4 :                     
(1) 2824/     DD4 :                     .ins_psgn:
(1) 2825/     DD4 : 7E                  		ld	a,(hl)		; Grab noise setting
(1) 2826/     DD5 : E6 07               		and	0111b
(1) 2827/     DD7 : 32 83 1F            		ld	(psgHatMode),a	; ** GLOBAL SETTING
(1) 2828/     DDA :                     .ins_psg:
(1) 2829/     DDA : CF                  		rst	8
(1) 2830/     DDB : DD E5               		push	ix
(1) 2831/     DDD : E5                  		push	hl
(1) 2832/     DDE : 23                  		inc	hl		; Skip ID
(1) 2833/     DDF : DD 21 0A 19         		ld	ix,psgcom	; Read psg control
(1) 2834/     DE3 : FD 5E 05            		ld	e,(iy+05h)
(1) 2835/     DE6 : 16 00               		ld	d,0
(1) 2836/     DE8 : DD 19               		add	ix,de
(1) 2837/     DEA : 7E                  		ld	a,(hl)
(1) 2838/     DEB : CF                  		rst	8
(1) 2839/     DEC : 23                  		inc	hl
(1) 2840/     DED : 7E                  		ld	a,(hl)
(1) 2841/     DEE : DD 77 24            		ld	(ix+ALV),a	; ALV
(1) 2842/     DF1 : 23                  		inc	hl
(1) 2843/     DF2 : 7E                  		ld	a,(hl)
(1) 2844/     DF3 : DD 77 08            		ld	(ix+ATK),a	; ATK
(1) 2845/     DF6 : 23                  		inc	hl
(1) 2846/     DF7 : 7E                  		ld	a,(hl)
(1) 2847/     DF8 : CF                  		rst	8
(1) 2848/     DF9 : DD 77 10            		ld	(ix+SLV),a	; SLV
(1) 2849/     DFC : 23                  		inc	hl
(1) 2850/     DFD : 7E                  		ld	a,(hl)
(1) 2851/     DFE : DD 77 0C            		ld	(ix+DKY),a	; DKY
(1) 2852/     E01 : 23                  		inc	hl
(1) 2853/     E02 : 7E                  		ld	a,(hl)
(1) 2854/     E03 : DD 77 14            		ld	(ix+RRT),a	; RRT
(1) 2855/     E06 : 23                  		inc	hl
(1) 2856/     E07 : 7E                  		ld	a,(hl)
(1) 2857/     E08 : CF                  		rst	8
(1) 2858/     E09 : DD 77 34            		ld	(ix+PARP),a	; ARP
(1) 2859/     E0C : E1                  		pop	hl
(1) 2860/     E0D : DD E1               		pop	ix
(1) 2861/     E0F : C9                  		ret
(1) 2862/     E10 :                     
(1) 2863/     E10 :                     ; ----------------------------------------
(1) 2864/     E10 :                     ; FM/FM3
(1) 2865/     E10 :                     
(1) 2866/     E10 :                     .ins_fm:
(1) 2867/     E10 : DD E5               		push	ix
(1) 2868/     E12 : E5                  		push	hl
(1) 2869/     E13 : C5                  		push	bc
(1) 2870/     E14 :                     ; 		ld	b,(ix+chnl_Ins)	; b - current Ins
(1) 2871/     E14 : FD 46 02            		ld	b,(iy+02h)
(1) 2872/     E17 : FD 7E 05            		ld	a,(iy+05h)
(1) 2873/     E1A : E6 07               		and	0111b
(1) 2874/     E1C : 16 00               		ld	d,0
(1) 2875/     E1E : 87                  		add	a,a
(1) 2876/     E1F : 5F                  		ld	e,a
(1) 2877/     E20 : DD 21 AA 14         		ld	ix,fmcach_list
(1) 2878/     E24 : DD 19               		add	ix,de
(1) 2879/     E26 : CF                  		rst	8
(1) 2880/     E27 : DD 5E 00            		ld	e,(ix)
(1) 2881/     E2A : DD 23               		inc	ix
(1) 2882/     E2C : DD 56 00            		ld	d,(ix)
(1) 2883/     E2F :                     
(1) 2884/     E2F :                     ; 		ld	a,(iy+0Bh)	; 0Bh: DON'T reload flag
(1) 2885/     E2F :                     ; 		cp	b
(1) 2886/     E2F :                     ; 		jr	z,.same_patch
(1) 2887/     E2F :                     ; 		ld	(iy+0Bh),b
(1) 2888/     E2F : 23                  		inc	hl		; Skip id and pitch
(1) 2889/     E30 : 23                  		inc	hl
(1) 2890/     E31 :                     
(1) 2891/     E31 : 46                  		ld	b,(hl)
(1) 2892/     E32 : 23                  		inc	hl
(1) 2893/     E33 : 4E                  		ld	c,(hl)
(1) 2894/     E34 : 23                  		inc	hl
(1) 2895/     E35 : 6E                  		ld	l,(hl)
(1) 2896/     E36 : 61                  		ld	h,c
(1) 2897/     E37 :                     
(1) 2898/     E37 : FD 7E 0A            		ld	a,(iy+0Ah)
(1) 2899/     E3A : BC                  		cp	h
(1) 2900/     E3B : 20 07               		jr	nz,.new_romdat
(1) 2901/     E3D : CF                  		rst	8
(1) 2902/     E3E : FD 7E 0B            		ld	a,(iy+0Bh)
(1) 2903/     E41 : BD                  		cp	l
(1) 2904/     E42 : 28 38               		jr	z,.same_patch
(1) 2905/     E44 :                     .new_romdat:
(1) 2906/     E44 : FD 74 0A            		ld	(iy+0Ah),h
(1) 2907/     E47 : FD 75 0B            		ld	(iy+0Bh),l
(1) 2908/     E4A : 78                  		ld	a,b
(1) 2909/     E4B : 01 28 00            		ld	bc,28h		; <- size
(1) 2910/     E4E : D5                  		push	de
(1) 2911/     E4F : CD 84 10            		call	transferRom	; *** ROM ACCESS ***
(1) 2912/     E52 :                     
(1) 2913/     E52 : E1                  		pop	hl
(1) 2914/     E53 : FD 7E 05            		ld	a,(iy+05h)
(1) 2915/     E56 : 4F                  		ld	c,a		; c - FM Key ID
(1) 2916/     E57 :                     
(1) 2917/     E57 :                     	; hl - fmcach intrument
(1) 2918/     E57 :                     	; de - FM reg and data: 3000h
(1) 2919/     E57 :                     	;  c - FM keyChannel
(1) 2920/     E57 : 79                  		ld	a,c
(1) 2921/     E58 : E6 03               		and	011b
(1) 2922/     E5A : F6 30               		or	30h		; Start at reg 30h
(1) 2923/     E5C : 57                  		ld	d,a
(1) 2924/     E5D : 1E 00               		ld	e,0
(1) 2925/     E5F : CF                  		rst	8
(1) 2926/     E60 : 06 1C               		ld	b,7*4		; Write ALL base FM registers
(1) 2927/     E62 : CD 81 0E            		call	.fm_setrlist
(1) 2928/     E65 :                     ; 		ld	b,4
(1) 2929/     E65 :                     ; 		call	.fm_setrlist
(1) 2930/     E65 :                     ; 		ld	b,5*4
(1) 2931/     E65 :                     ; 		call	.fm_setrlist
(1) 2932/     E65 : 7E                  		ld	a,(hl)		; 0B0h
(1) 2933/     E66 : FD 77 0C            		ld	(iy+0Ch),a	; ** Save 0B0h to 0Ch
(1) 2934/     E69 : 23                  		inc	hl
(1) 2935/     E6A : 7E                  		ld	a,(hl)		; 0B4h
(1) 2936/     E6B : FD 77 0D            		ld	(iy+0Dh),a	; ** Save 0B4h to 0Dh
(1) 2937/     E6E : 23                  		inc	hl
(1) 2938/     E6F : CF                  		rst	8
(1) 2939/     E70 : 7E                  		ld	a,(hl)
(1) 2940/     E71 : FD 77 0E            		ld	(iy+0Eh),a	; LFO
(1) 2941/     E74 : 23                  		inc	hl
(1) 2942/     E75 : 7E                  		ld	a,(hl)		; 028h keys
(1) 2943/     E76 : E6 F0               		and	11110000b
(1) 2944/     E78 : CF                  		rst	8
(1) 2945/     E79 : FD 77 0F            		ld	(iy+0Fh),a	; ** Save keys to 0Eh
(1) 2946/     E7C :                     .same_patch:
(1) 2947/     E7C : C1                  		pop	bc
(1) 2948/     E7D : E1                  		pop	hl
(1) 2949/     E7E : DD E1               		pop	ix
(1) 2950/     E80 : C9                  		ret
(1) 2951/     E81 :                     ; b - numof_regs
(1) 2952/     E81 :                     .fm_setrlist:
(1) 2953/     E81 : 5E                  		ld	e,(hl)
(1) 2954/     E82 : 23                  		inc	hl
(1) 2955/     E83 : CD 9F 12            		call	fm_autoreg
(1) 2956/     E86 : 00                  		nop
(1) 2957/     E87 : 00                  		nop
(1) 2958/     E88 : CF                  		rst	8
(1) 2959/     E89 : 00                  		nop
(1) 2960/     E8A : 14                  		inc	d		; +4
(1) 2961/     E8B : 14                  		inc	d
(1) 2962/     E8C : 14                  		inc	d
(1) 2963/     E8D : 14                  		inc	d
(1) 2964/     E8E : 10 F1               		djnz	.fm_setrlist
(1) 2965/     E90 : C9                  		ret
(1) 2966/     E91 :                     
(1) 2967/     E91 :                     ; ----------------------------------------
(1) 2968/     E91 :                     
(1) 2969/     E91 :                     .ins_dac:
(1) 2970/     E91 :                     ; 		ld	e,(ix+chnl_Ins)	; b - current Ins
(1) 2971/     E91 :                     ; 		ld	a,(iy+0Bh)	; 0Bh: DON'T reload flag
(1) 2972/     E91 :                     ; 		cp	e
(1) 2973/     E91 :                     ; 		jr	z,.same_dac
(1) 2974/     E91 :                     ; 		ld	(iy+0Bh),e
(1) 2975/     E91 : E5                  		push	hl
(1) 2976/     E92 : C5                  		push	bc
(1) 2977/     E93 : CD CE 12            		call	dac_off
(1) 2978/     E96 : 7E                  		ld	a,(hl)
(1) 2979/     E97 : E6 0F               		and	00001111b
(1) 2980/     E99 : 32 94 1F            		ld	(wave_Flags),a
(1) 2981/     E9C : CF                  		rst	8
(1) 2982/     E9D : 23                  		inc	hl
(1) 2983/     E9E : 23                  		inc	hl
(1) 2984/     E9F : 5E                  		ld	e,(hl)
(1) 2985/     EA0 : 23                  		inc	hl
(1) 2986/     EA1 : 7E                  		ld	a,(hl)
(1) 2987/     EA2 : 23                  		inc	hl
(1) 2988/     EA3 : 6E                  		ld	l,(hl)
(1) 2989/     EA4 : 67                  		ld	h,a
(1) 2990/     EA5 : E5                  		push	hl
(1) 2991/     EA6 : 7B                  		ld	a,e
(1) 2992/     EA7 : 01 06 00            		ld	bc,6		; Skip head
(1) 2993/     EAA : 09                  		add	hl,bc
(1) 2994/     EAB : CE 00               		adc	a,0
(1) 2995/     EAD : 22 89 1F            		ld	(wave_Start),hl	; Set START point
(1) 2996/     EB0 : 32 8B 1F            		ld	(wave_Start+2),a
(1) 2997/     EB3 : E1                  		pop	hl
(1) 2998/     EB4 : 7B                  		ld	a,e
(1) 2999/     EB5 : 11 B4 1F            		ld	de,sampleHead
(1) 3000/     EB8 : 01 06 00            		ld	bc,6
(1) 3001/     EBB : D5                  		push	de
(1) 3002/     EBC : CF                  		rst	8
(1) 3003/     EBD : CD 84 10            		call	transferRom	; *** ROM ACCESS ***
(1) 3004/     EC0 : E1                  		pop	hl
(1) 3005/     EC1 :                     	; hl - temporal header
(1) 3006/     EC1 : 5E                  		ld	e,(hl)
(1) 3007/     EC2 : 23                  		inc	hl
(1) 3008/     EC3 : 56                  		ld	d,(hl)
(1) 3009/     EC4 : 23                  		inc	hl
(1) 3010/     EC5 : 7E                  		ld	a,(hl)
(1) 3011/     EC6 : 23                  		inc	hl
(1) 3012/     EC7 : ED 53 8C 1F         		ld	(wave_Len),de	; LEN
(1) 3013/     ECB : 32 8E 1F            		ld	(wave_Len+2),a
(1) 3014/     ECE : 5E                  		ld	e,(hl)
(1) 3015/     ECF : 23                  		inc	hl
(1) 3016/     ED0 : CF                  		rst	8
(1) 3017/     ED1 : 56                  		ld	d,(hl)
(1) 3018/     ED2 : 23                  		inc	hl
(1) 3019/     ED3 : 7E                  		ld	a,(hl)
(1) 3020/     ED4 : 23                  		inc	hl
(1) 3021/     ED5 : ED 53 8F 1F         		ld	(wave_Loop),de	; LOOP
(1) 3022/     ED9 : 32 91 1F            		ld	(wave_Loop+2),a
(1) 3023/     EDC : 11 06 28            		ld	de,2806h	; keys off
(1) 3024/     EDF : CD A3 12            		call	fm_send_1
(1) 3025/     EE2 : C1                  		pop	bc
(1) 3026/     EE3 : E1                  		pop	hl
(1) 3027/     EE4 :                     ; .same_dac:
(1) 3028/     EE4 : C9                  		ret
(1) 3029/     EE5 :                     
(1) 3030/     EE5 :                     ; ----------------------------------------
(1) 3031/     EE5 :                     
(1) 3032/     EE5 :                     .ins_pcm:
(1) 3033/     EE5 : DD E5               		push	ix
(1) 3034/     EE7 : E5                  		push	hl
(1) 3035/     EE8 : C5                  		push	bc
(1) 3036/     EE9 : 7E                  		ld	a,(hl)		; Stereo|Loop bits
(1) 3037/     EEA : E6 01               		and	00000001b	; Read loop bit
(1) 3038/     EEC : 0F                  		rrca			; Move to MSB
(1) 3039/     EED : CF                  		rst	8
(1) 3040/     EEE : 23                  		inc	hl		; Skip ID and Pitch
(1) 3041/     EEF : 23                  		inc	hl
(1) 3042/     EF0 : 5E                  		ld	e,(hl)		; Read 24-bit pointer
(1) 3043/     EF1 : B3                  		or	e
(1) 3044/     EF2 : 5F                  		ld	e,a
(1) 3045/     EF3 : 23                  		inc	hl
(1) 3046/     EF4 : 7E                  		ld	a,(hl)
(1) 3047/     EF5 : 23                  		inc	hl
(1) 3048/     EF6 : 6E                  		ld	l,(hl)
(1) 3049/     EF7 : 67                  		ld	h,a
(1) 3050/     EF8 :                     	; d    - Loop enable bit
(1) 3051/     EF8 :                     	; e,hl - 24-bit pointer + loop bit
(1) 3052/     EF8 : DD 21 92 18         		ld	ix,pcmcom
(1) 3053/     EFC : 06 00               		ld	b,0
(1) 3054/     EFE : FD 4E 05            		ld	c,(iy+05h)
(1) 3055/     F01 : DD 09               		add	ix,bc
(1) 3056/     F03 : 01 28 00            		ld	bc,40		; Go to 40
(1) 3057/     F06 : DD 09               		add	ix,bc
(1) 3058/     F08 : 01 08 00            		ld	bc,8
(1) 3059/     F0B : DD 73 00            		ld	(ix),e		; Write 24-bit pointer
(1) 3060/     F0E : DD 09               		add	ix,bc
(1) 3061/     F10 : DD 74 00            		ld	(ix),h
(1) 3062/     F13 : DD 09               		add	ix,bc
(1) 3063/     F15 : DD 75 00            		ld	(ix),l
(1) 3064/     F18 : C1                  		pop	bc
(1) 3065/     F19 : E1                  		pop	hl
(1) 3066/     F1A : DD E1               		pop	ix
(1) 3067/     F1C : C9                  		ret
(1) 3068/     F1D :                     
(1) 3069/     F1D :                     ; ----------------------------------------
(1) 3070/     F1D :                     
(1) 3071/     F1D :                     .ins_pwm:
(1) 3072/     F1D : DD E5               		push	ix
(1) 3073/     F1F : E5                  		push	hl
(1) 3074/     F20 : C5                  		push	bc
(1) 3075/     F21 : 7E                  		ld	a,(hl)		; Stereo|Loop bits
(1) 3076/     F22 : E6 03               		and	00000011b
(1) 3077/     F24 : 0F                  		rrca
(1) 3078/     F25 : 0F                  		rrca
(1) 3079/     F26 : 4F                  		ld	c,a
(1) 3080/     F27 : CF                  		rst	8
(1) 3081/     F28 : 23                  		inc	hl		; Skip ID and Pitch
(1) 3082/     F29 : 23                  		inc	hl
(1) 3083/     F2A : 56                  		ld	d,(hl)
(1) 3084/     F2B : 23                  		inc	hl
(1) 3085/     F2C : 5E                  		ld	e,(hl)
(1) 3086/     F2D : 23                  		inc	hl
(1) 3087/     F2E : 7E                  		ld	a,(hl)
(1) 3088/     F2F : 23                  		inc	hl
(1) 3089/     F30 : 6E                  		ld	l,(hl)
(1) 3090/     F31 : 67                  		ld	h,a
(1) 3091/     F32 : 79                  		ld	a,c
(1) 3092/     F33 : B2                  		or	d
(1) 3093/     F34 : 57                  		ld	d,a
(1) 3094/     F35 : CF                  		rst	8
(1) 3095/     F36 :                     	; de,hl - 32-bit PWM pointer
(1) 3096/     F36 : DD 21 D2 18         		ld	ix,pwmcom
(1) 3097/     F3A : 06 00               		ld	b,0
(1) 3098/     F3C : FD 4E 05            		ld	c,(iy+05h)
(1) 3099/     F3F : DD 09               		add	ix,bc
(1) 3100/     F41 : 01 18 00            		ld	bc,24
(1) 3101/     F44 : DD 09               		add	ix,bc	; Move to PWOUTF
(1) 3102/     F46 : 01 08 00            		ld	bc,8
(1) 3103/     F49 : DD 72 00            		ld	(ix),d
(1) 3104/     F4C : DD 09               		add	ix,bc
(1) 3105/     F4E : DD 73 00            		ld	(ix),e
(1) 3106/     F51 : DD 09               		add	ix,bc
(1) 3107/     F53 : DD 74 00            		ld	(ix),h
(1) 3108/     F56 : DD 09               		add	ix,bc
(1) 3109/     F58 : DD 75 00            		ld	(ix),l
(1) 3110/     F5B : C1                  		pop	bc
(1) 3111/     F5C : E1                  		pop	hl
(1) 3112/     F5D : DD E1               		pop	ix
(1) 3113/     F5F : C9                  		ret
(1) 3114/     F60 :                     
(1) 3115/     F60 :                     ; ----------------------------------------
(1) 3116/     F60 :                     ; NEW note
(1) 3117/     F60 :                     ; ----------------------------------------
(1) 3118/     F60 :                     
(1) 3119/     F60 :                     .note:
(1) 3120/     F60 : 78                  		ld	a,b		; Volume bit?
(1) 3121/     F61 : E6 04               		and	0100b
(1) 3122/     F63 : 20 05               		jr	nz,.fm_hasvol
(1) 3123/     F65 : FD 36 08 00         		ld	(iy+08h),0	; Reset to default volume
(1) 3124/     F69 : CF                  		rst	8
(1) 3125/     F6A :                     .fm_hasvol:
(1) 3126/     F6A : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 3127/     F6D : 4F                  		ld	c,a
(1) 3128/     F6E : FE FF               		cp	-1
(1) 3129/     F70 : C8                  		ret	z
(1) 3130/     F71 : FE FE               		cp	-2
(1) 3131/     F73 : C8                  		ret	z
(1) 3132/     F74 : E7                  		rst	20h
(1) 3133/     F75 : 7E                  		ld	a,(hl)
(1) 3134/     F76 : E6 F0               		and	11110000b
(1) 3135/     F78 : FE 80               		cp	80h
(1) 3136/     F7A : 28 16               		jr	z,.n_indx
(1) 3137/     F7C : CF                  		rst	8
(1) 3138/     F7D : FE 90               		cp	90h
(1) 3139/     F7F : 28 20               		jr	z,.n_psgn
(1) 3140/     F81 : FE A0               		cp	0A0h
(1) 3141/     F83 : 28 21               		jr	z,.n_fm
(1) 3142/     F85 :                     ; 		cp	0B0h		; ** Can't use notes on FM special **
(1) 3143/     F85 :                     ; 		jr	z,.n_fm
(1) 3144/     F85 : FE C0               		cp	0C0h
(1) 3145/     F87 : 28 09               		jr	z,.n_indx
(1) 3146/     F89 : FE D0               		cp	0D0h
(1) 3147/     F8B : 28 05               		jr	z,.n_indx
(1) 3148/     F8D : FE E0               		cp	0E0h
(1) 3149/     F8F : 28 01               		jr	z,.n_indx
(1) 3150/     F91 : C9                  		ret
(1) 3151/     F92 :                     
(1) 3152/     F92 :                     ; --------------------------------
(1) 3153/     F92 :                     
(1) 3154/     F92 :                     .n_indx:
(1) 3155/     F92 : 79                  		ld	a,c
(1) 3156/     F93 :                     .n_stfreq:
(1) 3157/     F93 : 23                  		inc	hl		; Skip ID
(1) 3158/     F94 : 5E                  		ld	e,(hl)		; Read pitch
(1) 3159/     F95 : 2B                  		dec	hl
(1) 3160/     F96 : 83                  		add	a,e		; Note + pitch
(1) 3161/     F97 : CF                  		rst	8
(1) 3162/     F98 : 87                  		add	a,a		; * 2
(1) 3163/     F99 : FD 77 06            		ld	(iy+06h),a
(1) 3164/     F9C : FD 36 07 00         		ld	(iy+07h),0	; reset pitchbend
(1) 3165/     FA0 : C9                  		ret
(1) 3166/     FA1 :                     .n_psgn:
(1) 3167/     FA1 : 79                  		ld	a,c
(1) 3168/     FA2 : C6 0C               		add	a,12		; <-- Manual adjust for NOISE
(1) 3169/     FA4 : 18 ED               		jr	.n_stfreq
(1) 3170/     FA6 :                     
(1) 3171/     FA6 :                     ; FM freqs
(1) 3172/     FA6 :                     .n_fm:
(1) 3173/     FA6 : 79                  		ld	a,c
(1) 3174/     FA7 : 23                  		inc	hl		; Skip ID
(1) 3175/     FA8 : 5E                  		ld	e,(hl)		; Read pitch
(1) 3176/     FA9 : 2B                  		dec	hl
(1) 3177/     FAA : CF                  		rst	8
(1) 3178/     FAB : 83                  		add	a,e		; Note + pitch
(1) 3179/     FAC :                     	; Search for octave and note...
(1) 3180/     FAC : 0E 00               		ld	c,0		; c - octave
(1) 3181/     FAE : 16 07               		ld	d,7
(1) 3182/     FB0 :                     .get_oct:
(1) 3183/     FB0 : 5F                  		ld	e,a		; e - note
(1) 3184/     FB1 : D6 0C               		sub	12
(1) 3185/     FB3 : B7                  		or	a
(1) 3186/     FB4 : FA BB 0F            		jp	m,.fnd_oct
(1) 3187/     FB7 : 0C                  		inc	c
(1) 3188/     FB8 :                     ; 		nop
(1) 3189/     FB8 :                     ; 		nop
(1) 3190/     FB8 :                     ; 		rst	8
(1) 3191/     FB8 :                     ; 		nop
(1) 3192/     FB8 :                     ; 		nop
(1) 3193/     FB8 : 15                  		dec	d
(1) 3194/     FB9 : 20 F5               		jr	nz,.get_oct
(1) 3195/     FBB :                     .fnd_oct:
(1) 3196/     FBB : CF                  		rst	8
(1) 3197/     FBC : 7B                  		ld	a,e
(1) 3198/     FBD : 87                  		add	a,a		; Note * 2
(1) 3199/     FBE : E6 1F               		and	00011111b
(1) 3200/     FC0 : CB 09               		rrc	c
(1) 3201/     FC2 : CB 09               		rrc	c
(1) 3202/     FC4 : CB 09               		rrc	c
(1) 3203/     FC6 : CF                  		rst	8
(1) 3204/     FC7 : B1                  		or	c
(1) 3205/     FC8 : FD 77 06            		ld	(iy+06h),a	; Save octave + index: OOOiiiiib
(1) 3206/     FCB : FD 36 07 00         		ld	(iy+07h),0
(1) 3207/     FCF : C9                  		ret
(1) 3208/     FD0 :                     
(1) 3209/     FD0 :                     ; ----------------------------------------
(1) 3210/     FD0 :                     
(1) 3211/     FD0 :                     .chnl_ulnkcut:
(1) 3212/     FD0 : DD 4E 01            		ld	c,(ix+chnl_Chip)
(1) 3213/     FD3 : C3 D6 0F            		jp	.chnl_ulnk
(1) 3214/     FD6 :                     .chnl_ulnkoff:
(1) 3215/     FD6 :                     ; 		ld	c,0
(1) 3216/     FD6 :                     .chnl_ulnk:
(1) 3217/     FD6 : AF                  		xor	a
(1) 3218/     FD7 : CF                  		rst	8
(1) 3219/     FD8 : FD 77 00            		ld	(iy),a			; Delete link, chip and prio
(1) 3220/     FDB : FD 77 01            		ld	(iy+1),a
(1) 3221/     FDE : FD 77 02            		ld	(iy+2),a
(1) 3222/     FE1 : FD 77 08            		ld	(iy+08h),a
(1) 3223/     FE4 : FD 77 09            		ld	(iy+09h),a
(1) 3224/     FE7 : FD 77 0A            		ld	(iy+0Ah),a
(1) 3225/     FEA : FD 77 0B            		ld	(iy+0Bh),a
(1) 3226/     FED : C9                  		ret
(1) 3227/     FEE :                     
(1) 3228/     FEE :                     ; 		push	iy
(1) 3229/     FEE :                     ; 		pop	hl
(1) 3230/     FEE :                     ; 		ld	bc,8-2		; Go to 08h
(1) 3231/     FEE :                     ; 		add	hl,bc
(1) 3232/     FEE :                     ; 		rst	8
(1) 3233/     FEE :                     ; 		ld	b,8/2
(1) 3234/     FEE :                     ; .clrfull:
(1) 3235/     FEE :                     ; 		ld	(hl),0		; Reset settings 08-0Bh
(1) 3236/     FEE :                     ; 		inc	hl
(1) 3237/     FEE :                     ; 		ld	(hl),0
(1) 3238/     FEE :                     ; 		inc	hl
(1) 3239/     FEE :                     ; 		rst	8
(1) 3240/     FEE :                     ; 		djnz	.clrfull
(1) 3241/     FEE :                     ; 		ret
(1) 3242/     FEE :                     
(1) 3243/     FEE :                     ; ============================================================
(1) 3244/     FEE :                     ; --------------------------------------------------------
(1) 3245/     FEE :                     ; Communication with the SCD and 32X
(1) 3246/     FEE :                     ;
(1) 3247/     FEE :                     ; SCD: Sends a level2 interrupt to Sub-CPU
(1) 3248/     FEE :                     ; 32X: Interrupts Slave SH2 directly
(1) 3249/     FEE :                     ; --------------------------------------------------------
(1) 3250/     FEE :                     
(1) 3251/     FEE :                     ; TODO: careful modifing this
(1) 3252/     FEE :                     
(1) 3253/     FEE :                     zmars_send:
(1) 3254/     FEE :                     	; ----------------------------------------
(1) 3255/     FEE :                     	; Send PCM table
(1) 3331/     FEE :                     	; ----------------------------------------
(1) 3332/     FEE :                     	; Send PWM table
(1) 3424/     FEE : C9                  		ret
(1) 3425/     FEF :                     
(1) 3426/     FEF :                     ; --------------------------------------------------------
(1) 3427/     FEF :                     ; Set bank to $A10000
(1) 3443/     FEF :                     
(1) 3444/     FEF :                     ; ====================================================================
(1) 3445/     FEF :                     ; ----------------------------------------------------------------
(1) 3446/     FEF :                     ; Subroutines
(1) 3447/     FEF :                     ; ----------------------------------------------------------------
(1) 3448/     FEF :                     
(1) 3449/     FEF :                     ; --------------------------------------------------------
(1) 3450/     FEF :                     ; Init sound engine
(1) 3451/     FEF :                     ; --------------------------------------------------------
(1) 3452/     FEF :                     
(1) 3453/     FEF :                     gema_init:
(1) 3454/     FEF : CD CE 12            		call	dac_off
(1) 3455/     FF2 : AF                  		xor	a
(1) 3456/     FF3 :                     ; 		ld	(marsUpd),a
(1) 3457/     FF3 :                     ; 		ld	(mcdUpd),a
(1) 3458/     FF3 : 32 30 00            		ld	(cdRamLen),a
(1) 3459/     FF6 : CD DD 13            		call	gema_lastbank	; Set last bank slot BEFORE writing to PSG (32X bus problem)
(1) 3460/     FF9 : 21 11 7F            		ld	hl,Zpsg_ctrl	; Silence PSG channels
(1) 3461/     FFC : 36 9F               		ld	(hl),09Fh
(1) 3462/     FFE : 36 BF               		ld	(hl),0BFh
(1) 3463/    1000 : 36 DF               		ld	(hl),0DFh
(1) 3464/    1002 : 36 FF               		ld	(hl),0FFh
(1) 3465/    1004 : 11 0B 22            		ld	de,2208h|3	; Set Default LFO
(1) 3466/    1007 : CD A3 12            		call	fm_send_1
(1) 3467/    100A : 11 00 27            		ld	de,2700h	; CH3 special and timers off
(1) 3468/    100D : CD A3 12            		call	fm_send_1
(1) 3469/    1010 :                     ; 		ld	de,2800h	; FM KEYS off
(1) 3470/    1010 : 14                  		inc	d
(1) 3471/    1011 : CD A3 12            		call	fm_send_1
(1) 3472/    1014 : 1C                  		inc	e
(1) 3473/    1015 : CD A3 12            		call	fm_send_1
(1) 3474/    1018 : 1C                  		inc	e
(1) 3475/    1019 : CD A3 12            		call	fm_send_1
(1) 3476/    101C : 1C                  		inc	e
(1) 3477/    101D : 1C                  		inc	e
(1) 3478/    101E : CD A3 12            		call	fm_send_1
(1) 3479/    1021 : 1C                  		inc	e
(1) 3480/    1022 : CD A3 12            		call	fm_send_1
(1) 3481/    1025 : 1C                  		inc	e
(1) 3482/    1026 : CD A3 12            		call	fm_send_1
(1) 3483/    1029 : FD 21 78 18         		ld	iy,nikona_BuffList
(1) 3484/    102D : 0E 01               		ld	c,1			; Start at this priority
(1) 3485/    102F :                     .setup_list:
(1) 3486/    102F : FD 7E 00            		ld	a,(iy)
(1) 3487/    1032 : FE FF               		cp	-1
(1) 3488/    1034 : 28 24               		jr	z,.end_setup
(1) 3489/    1036 : FD 23               		inc	iy
(1) 3490/    1038 : 6F                  		ld	l,a
(1) 3491/    1039 : FD 66 00            		ld	h,(iy)
(1) 3492/    103C : E5                  		push	hl
(1) 3493/    103D : DD E1               		pop	ix
(1) 3494/    103F : DD 71 11            		ld	(ix+trk_Priority),c
(1) 3495/    1042 : DD 36 01 FF         		ld	(ix+trk_SeqId),-1	; Reset sequence ID
(1) 3496/    1046 : FD 23               		inc	iy
(1) 3497/    1048 :                     	; iy - src
(1) 3498/    1048 :                     	; hl - dst
(1) 3499/    1048 : 11 04 00            		ld	de,trk_Blocks
(1) 3500/    104B : 19                  		add	hl,de
(1) 3501/    104C : 06 06               		ld	b,MAX_BUFFNTRY-2
(1) 3502/    104E :                     .st_copy:
(1) 3503/    104E : FD 7E 00            		ld	a,(iy)
(1) 3504/    1051 : 77                  		ld	(hl),a
(1) 3505/    1052 : FD 23               		inc	iy
(1) 3506/    1054 : 23                  		inc	hl
(1) 3507/    1055 : 10 F7               		djnz	.st_copy
(1) 3508/    1057 : 0C                  		inc	c
(1) 3509/    1058 : 18 D5               		jr	.setup_list
(1) 3510/    105A :                     .end_setup:
(1) 3511/    105A : 3E FF               		ld	a,-1			; Reset
(1) 3512/    105C : 32 86 1F            		ld	(trkListPage),a
(1) 3513/    105F : AF                  		xor	a
(1) 3514/    1060 : C3 9F 05            		jp	init_RomTrcks
(1) 3515/    1063 :                     
(1) 3516/    1063 :                     ; --------------------------------------------------------
(1) 3517/    1063 :                     ; get_tick
(1) 3518/    1063 :                     ;
(1) 3519/    1063 :                     ; Checks if VBlank triggred a TICK
(1) 3520/    1063 :                     ; (1/150 NTSC, 1/120 PAL)
(1) 3521/    1063 :                     ; --------------------------------------------------------
(1) 3522/    1063 :                     
(1) 3523/    1063 :                     get_tick:
(1) 3524/    1063 : F3                  		di				; Disable ints
(1) 3525/    1064 : F5                  		push	af
(1) 3526/    1065 : E5                  		push	hl
(1) 3527/    1066 : 21 81 1F            		ld	hl,tickFlag		; read last TICK flag
(1) 3528/    1069 : 7E                  		ld	a,(hl)			; non-zero value (1Fh)?
(1) 3529/    106A : B7                  		or 	a
(1) 3530/    106B : 28 13               		jr	z,.ctnotick
(1) 3531/    106D : 36 00               		ld	(hl),0			; Reset TICK flag
(1) 3532/    106F : 23                  		inc	hl			; Move to tickCnt
(1) 3533/    1070 : 34                  		inc	(hl)			; and increment
(1) 3534/    1071 : CF                  		rst	8
(1) 3535/    1072 : D5                  		push	de
(1) 3536/    1073 : 2A A0 1F            		ld	hl,(sbeatAcc)		; Increment subbeats
(1) 3537/    1076 : ED 5B A2 1F         		ld	de,(sbeatPtck)
(1) 3538/    107A : CF                  		rst	8
(1) 3539/    107B : 19                  		add	hl,de
(1) 3540/    107C : 22 A0 1F            		ld	(sbeatAcc),hl
(1) 3541/    107F : D1                  		pop	de
(1) 3542/    1080 :                     .ctnotick:
(1) 3543/    1080 : E1                  		pop	hl
(1) 3544/    1081 : F1                  		pop	af
(1) 3545/    1082 : FB                  		ei				; Enable ints again
(1) 3546/    1083 : C9                  		ret
(1) 3547/    1084 :                     
(1) 3548/    1084 :                     ; --------------------------------------------------------
(1) 3549/    1084 :                     ; transferRom
(1) 3550/    1084 :                     ;
(1) 3551/    1084 :                     ; Transfer bytes from ROM to RAM. This also tells
(1) 3552/    1084 :                     ; to 68k that we want to access ROM
(1) 3553/    1084 :                     ;
(1) 3554/    1084 :                     ; Input:
(1) 3555/    1084 :                     ; a  - 68K Address $xx0000
(1) 3556/    1084 :                     ;  c - Byte count (size 0 NOT allowed, MAX: 0FFh)
(1) 3557/    1084 :                     ; hl - 68K Address $00xxxx
(1) 3558/    1084 :                     ; de - Destination pointer
(1) 3559/    1084 :                     ;
(1) 3560/    1084 :                     ; Uses:
(1) 3561/    1084 :                     ; b
(1) 3562/    1084 :                     ;
(1) 3563/    1084 :                     ; Notes:
(1) 3564/    1084 :                     ; call RST 20h first if transfering anything other
(1) 3565/    1084 :                     ; than sample data, just to be safe.
(1) 3566/    1084 :                     ; --------------------------------------------------------
(1) 3567/    1084 :                     
(1) 3568/    1084 :                     transferRom:
(1) 3569/    1084 : FE FF               		cp	0FFh		; ** WORKAROUND FOR $FF0000 area
(1) 3570/    1086 : 28 43               		jr	z,.from_ram
(1) 3571/    1088 : CF                  		rst	8
(1) 3572/    1089 : DD E5               		push	ix
(1) 3573/    108B : DD 21 2F 00         		ld	ix,commZRomBlk	; ix - rom read/block flags
(1) 3574/    108F : 22 9E 1F            		ld	(x68ksrclsb),hl	; save hl copy
(1) 3575/    1092 : CB BC               		res	7,h
(1) 3576/    1094 : 06 00               		ld	b,0
(1) 3577/    1096 : 0B                  		dec	bc
(1) 3578/    1097 : 09                  		add	hl,bc
(1) 3579/    1098 : CB 7C               		bit	7,h
(1) 3580/    109A : 20 0B               		jr	nz,.double
(1) 3581/    109C : 2A 9E 1F            		ld	hl,(x68ksrclsb)	; single transfer
(1) 3582/    109F : 0C                  		inc	c
(1) 3583/    10A0 : 47                  		ld	b,a
(1) 3584/    10A1 : CD E9 10            		call	.transfer
(1) 3585/    10A4 : DD E1               		pop	ix
(1) 3586/    10A6 : C9                  		ret
(1) 3587/    10A7 :                     .double:
(1) 3588/    10A7 : CF                  		rst	8
(1) 3589/    10A8 : 47                  		ld	b,a		; double transfer
(1) 3590/    10A9 : C5                  		push	bc
(1) 3591/    10AA : E5                  		push	hl
(1) 3592/    10AB : 79                  		ld	a,c
(1) 3593/    10AC : 95                  		sub	a,l
(1) 3594/    10AD : 4F                  		ld	c,a
(1) 3595/    10AE : 2A 9E 1F            		ld	hl,(x68ksrclsb)
(1) 3596/    10B1 : CD E9 10            		call	.transfer
(1) 3597/    10B4 : E1                  		pop	hl
(1) 3598/    10B5 : C1                  		pop	bc
(1) 3599/    10B6 :                     ; 		rst	8
(1) 3600/    10B6 : 4D                  		ld	c,l
(1) 3601/    10B7 : 0C                  		inc	c
(1) 3602/    10B8 : 3A 9F 1F            		ld	a,(x68ksrcmid)
(1) 3603/    10BB : E6 80               		and	80h
(1) 3604/    10BD : C6 80               		add	a,80h
(1) 3605/    10BF : 67                  		ld	h,a
(1) 3606/    10C0 : 2E 00               		ld	l,0
(1) 3607/    10C2 : 30 01               		jr	nc,.x68knocarry
(1) 3608/    10C4 : 04                  		inc	b
(1) 3609/    10C5 :                     .x68knocarry:
(1) 3610/    10C5 : CD E9 10            		call	.transfer
(1) 3611/    10C8 : DD E1               		pop	ix
(1) 3612/    10CA : C9                  		ret
(1) 3613/    10CB :                     
(1) 3614/    10CB :                     ; ------------------------------------------------
(1) 3615/    10CB :                     ; WORKAROUND FOR READING FROM $FF0000 RAM
(1) 3616/    10CB :                     ; SEGA CD ONLY
(1) 3617/    10CB :                     ;
(1) 3618/    10CB :                     ; On the 68K side YOU MUST CALL
(1) 3619/    10CB :                     ; Sound_Update on a loop during Display.
(1) 3620/    10CB :                     ; ------------------------------------------------
(1) 3621/    10CB :                     
(1) 3622/    10CB :                     .from_ram:
(1) 3623/    10CB : ED 53 31 00         		ld	(cdRamDst),de
(1) 3624/    10CF : 22 33 00            		ld	(cdRamSrc),hl
(1) 3625/    10D2 : 32 35 00            		ld	(cdRamSrcB),a
(1) 3626/    10D5 : CD DD 13            		call	gema_lastbank			; Set bank to $FF8000 area
(1) 3627/    10D8 : CF                  		rst	8
(1) 3628/    10D9 : 79                  		ld	a,c
(1) 3629/    10DA : 32 30 00            		ld	(cdRamLen),a
(1) 3630/    10DD : 21 00 FF            		ld	hl,RAM_ZCdFlag_D&07FFFh+8000h	; ** EXTERNAL **
(1) 3631/    10E0 : 36 01               		ld	(hl),1				; WRITE TO RAM: Set request, 68k clears.
(1) 3632/    10E2 :                     .wait:
(1) 3633/    10E2 : 3A 30 00            		ld	a,(cdRamLen)
(1) 3634/    10E5 : B7                  		or	a
(1) 3635/    10E6 : 20 FA               		jr	nz,.wait
(1) 3636/    10E8 : C9                  		ret
(1) 3637/    10E9 :                     
(1) 3638/    10E9 :                     ; ------------------------------------------------
(1) 3639/    10E9 :                     ; b  - Source ROM bank
(1) 3640/    10E9 :                     ;  c - Bytes to transfer (00h is invalid)
(1) 3641/    10E9 :                     ; hl - Source ROM $00xxxx | 8000h
(1) 3642/    10E9 :                     ; de - Destination address
(1) 3643/    10E9 :                     ; ix - ROM-block flag
(1) 3644/    10E9 :                     ; ------------------------------------------------
(1) 3645/    10E9 :                     
(1) 3646/    10E9 :                     .transfer:
(1) 3647/    10E9 : CF                  		rst	8
(1) 3648/    10EA : D5                  		push	de
(1) 3649/    10EB : 11 00 60            		ld	de,6000h
(1) 3650/    10EE : 7C                  		ld	a,h
(1) 3651/    10EF : 07                  		rlca
(1) 3652/    10F0 : 12                  		ld	(de),a
(1) 3653/    10F1 : 78                  		ld	a,b
(1) 3654/    10F2 : CF                  		rst	8
(1) 3655/    10F3 : 12                  		ld	(de),a
(1) 3656/    10F4 : 0F                  		rrca
(1) 3657/    10F5 : 12                  		ld	(de),a
(1) 3658/    10F6 : 0F                  		rrca
(1) 3659/    10F7 : 12                  		ld	(de),a
(1) 3660/    10F8 : 0F                  		rrca
(1) 3661/    10F9 : 12                  		ld	(de),a
(1) 3662/    10FA : 0F                  		rrca
(1) 3663/    10FB : CF                  		rst	8
(1) 3664/    10FC : 12                  		ld	(de),a
(1) 3665/    10FD : 0F                  		rrca
(1) 3666/    10FE : 12                  		ld	(de),a
(1) 3667/    10FF : 0F                  		rrca
(1) 3668/    1100 : 12                  		ld	(de),a
(1) 3669/    1101 : 0F                  		rrca
(1) 3670/    1102 : 12                  		ld	(de),a
(1) 3671/    1103 : D1                  		pop	de
(1) 3672/    1104 : CB FC               		set	7,h
(1) 3673/    1106 : CF                  		rst	8
(1) 3674/    1107 :                     
(1) 3675/    1107 :                     	; Transfer ROM data in packets
(1) 3676/    1107 :                     	; while playing the cache'd sample
(1) 3677/    1107 :                     	; *** CRITICAL PROCESS ***
(1) 3678/    1107 :                     	;
(1) 3679/    1107 :                     	; pseudo-reference for ldir:
(1) 3680/    1107 :                     	; ld (de),(hl)	; load (hl) to (de) directly
(1) 3681/    1107 :                     	; inc de	; next de
(1) 3682/    1107 :                     	; inc hl	; next hl
(1) 3683/    1107 :                     	; dec bc	; decrement bc
(1) 3684/    1107 :                     	;
(1) 3685/    1107 : 06 00               		ld	b,0
(1) 3686/    1109 : 79                  		ld	a,c		; a - Size counter
(1) 3687/    110A :                     ; 		set	1,(ix)
(1) 3688/    110A : D6 08               		sub	MAX_TRFRPZ	; Length lower than MAX_TRFRPZ?
(1) 3689/    110C : 38 14               		jr	c,.x68klast	; Process single piece only
(1) 3690/    110E :                     .x68kloop:
(1) 3691/    110E : CF                  		rst	8
(1) 3692/    110F : 00                  		nop
(1) 3693/    1110 : 0E 07               		ld	c,MAX_TRFRPZ-1
(1) 3694/    1112 : DD CB 00 46         		bit	0,(ix)		; Genesis requests LOCK?
(1) 3695/    1116 : C4 30 11            		call	nz,.x68klpwt
(1) 3696/    1119 : ED B0               		ldir			; (de) to (hl) until bc == 0
(1) 3697/    111B : CF                  		rst	8
(1) 3698/    111C : 00                  		nop
(1) 3699/    111D : D6 07               		sub	a,MAX_TRFRPZ-1
(1) 3700/    111F : D2 0E 11            		jp	nc,.x68kloop
(1) 3701/    1122 :                     ; last block
(1) 3702/    1122 :                     .x68klast:
(1) 3703/    1122 : C6 08               		add	a,MAX_TRFRPZ
(1) 3704/    1124 : 4F                  		ld	c,a
(1) 3705/    1125 : DD CB 00 46         		bit	0,(ix)		; Genesis requests LOCK?
(1) 3706/    1129 : C4 30 11            		call	nz,.x68klpwt
(1) 3707/    112C : ED B0               		ldir
(1) 3708/    112E : CF                  		rst	8
(1) 3709/    112F : C9                  		ret
(1) 3710/    1130 :                     
(1) 3711/    1130 :                     ; Wait here until Genesis unlocks ROM
(1) 3712/    1130 :                     .x68klpwt:
(1) 3713/    1130 : 00                  		nop	; WAVE SYNC
(1) 3714/    1131 : 00                  		nop
(1) 3715/    1132 :                     .x68kpwtlp:
(1) 3716/    1132 : CF                  		rst	8
(1) 3717/    1133 : 00                  		nop	; WAVE SYNC
(1) 3718/    1134 : 00                  		nop
(1) 3719/    1135 : DD CB 00 46         		bit	0,(ix)		; 68k finished?
(1) 3720/    1139 : 20 F7               		jr	nz,.x68kpwtlp
(1) 3721/    113B : C9                  		ret
(1) 3722/    113C :                     
(1) 3723/    113C :                     ; ====================================================================
(1) 3724/    113C :                     ; ----------------------------------------------------------------
(1) 3725/    113C :                     ; Sound chip routines
(1) 3726/    113C :                     ; ----------------------------------------------------------------
(1) 3727/    113C :                     
(1) 3728/    113C :                     ; --------------------------------------------------------
(1) 3729/    113C :                     ; chip_env
(1) 3730/    113C :                     ;
(1) 3731/    113C :                     ; Process PSG
(1) 3732/    113C :                     ; --------------------------------------------------------
(1) 3733/    113C :                     
(1) 3734/    113C :                     chip_env:
(1) 3738/    113C : FD 21 0D 19         		ld	iy,psgcom+3		; Start from NOISE first
(1) 3739/    1140 : DD 21 11 7F         		ld	ix,Zpsg_ctrl
(1) 3740/    1144 : 0E E0               		ld	c,0E0h			; c - PSG first ctrl command
(1) 3741/    1146 : 06 04               		ld	b,4			; b - 4 channels
(1) 3742/    1148 :                     .vloop:
(1) 3743/    1148 : CF                  		rst	8
(1) 3744/    1149 : FD 5E 00            		ld	e,(iy+COM)		; e - current command
(1) 3745/    114C : FD 36 00 00         		ld	(iy+COM),0
(1) 3746/    1150 :                     
(1) 3747/    1150 :                     	; ----------------------------
(1) 3748/    1150 :                     	; bit 2 - stop sound
(1) 3749/    1150 : CB 53               		bit	2,e
(1) 3750/    1152 : 28 0C               		jr	z,.ckof
(1) 3751/    1154 : FD 36 04 FF         		ld	(iy+LEV),-1		; reset level
(1) 3752/    1158 : FD 36 28 01         		ld	(iy+FLG),1		; and update
(1) 3753/    115C : FD 36 18 00         		ld	(iy+MODE),0		; envelope off
(1) 3754/    1160 :                     .ckof:
(1) 3755/    1160 :                     	; ----------------------------
(1) 3756/    1160 :                     	; bit 1 - key off
(1) 3757/    1160 : CB 4B               		bit	1,e
(1) 3758/    1162 : 28 0F               		jr      z,.ckon
(1) 3759/    1164 : FD 7E 18            		ld	a,(iy+MODE)		; mode 0?
(1) 3760/    1167 : B7                  		or	a
(1) 3761/    1168 : 28 09               		jr	z,.ckon
(1) 3762/    116A : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3763/    116E : FD 36 18 04         		ld	(iy+MODE),100b		; set envelope mode 100b
(1) 3764/    1172 : CF                  		rst	8
(1) 3765/    1173 :                     .ckon:
(1) 3766/    1173 :                     	; ----------------------------
(1) 3767/    1173 :                     	; bit 0 - key on
(1) 3768/    1173 : CB 43               		bit	0,e
(1) 3769/    1175 : 28 1A               		jr	z,.envproc
(1) 3770/    1177 : FD 36 04 FF         		ld	(iy+LEV),-1		; reset level
(1) 3771/    117B : 78                  		ld	a,b
(1) 3772/    117C : FE 04               		cp	4			; NOISE channel?
(1) 3773/    117E : 20 08               		jr	nz,.nskip
(1) 3774/    1180 : CF                  		rst	8			; Set NOISE mode
(1) 3775/    1181 : 3A 83 1F            		ld	a,(psgHatMode)		; write hat mode only.
(1) 3776/    1184 : B1                  		or	c
(1) 3777/    1185 : DD 77 00            		ld	(ix),a			; WRITE PSG
(1) 3778/    1188 :                     .nskip:
(1) 3779/    1188 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3780/    118C : CF                  		rst	8
(1) 3781/    118D : FD 36 18 01         		ld	(iy+MODE),001b		; set to attack mode
(1) 3782/    1191 :                     .nblock:
(1) 3783/    1191 :                     
(1) 3784/    1191 :                     	; ----------------------------
(1) 3785/    1191 :                     	; Process effects
(1) 3786/    1191 :                     	; ----------------------------
(1) 3787/    1191 :                     .envproc:
(1) 3788/    1191 : FD 7E 18            		ld	a,(iy+MODE)
(1) 3789/    1194 : B7                  		or	a			; no modes
(1) 3790/    1195 : CA 1B 12            		jp	z,.vedlp
(1) 3791/    1198 : FE 01               		cp 	001b			; Attack mode
(1) 3792/    119A : 20 2C               		jr	nz,.chk2
(1) 3793/    119C : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3794/    11A0 : FD 5E 24            		ld	e,(iy+ALV)
(1) 3795/    11A3 : FD 7E 08            		ld	a,(iy+ATK)		; if ATK == 0, don't use
(1) 3796/    11A6 : B7                  		or	a
(1) 3797/    11A7 : 28 16               		jr	z,.atkend
(1) 3798/    11A9 : 57                  		ld	d,a			; c - attack rate
(1) 3799/    11AA : 7B                  		ld	a,e			; a - attack level
(1) 3800/    11AB : CF                  		rst	8
(1) 3801/    11AC : FD 5E 24            		ld	e,(iy+ALV)		; b - OLD attack level
(1) 3802/    11AF : 92                  		sub	a,d			; (attack rate) - (level)
(1) 3803/    11B0 : 38 0D               		jr	c,.atkend		; if carry: already finished
(1) 3804/    11B2 : 28 0B               		jr	z,.atkend		; if zero: no attack rate
(1) 3805/    11B4 : BB                  		cp	e			; attack rate == level?
(1) 3806/    11B5 : 38 08               		jr	c,.atkend
(1) 3807/    11B7 : 28 06               		jr	z,.atkend
(1) 3808/    11B9 : FD 77 04            		ld	(iy+LEV),a		; set new level
(1) 3809/    11BC : CF                  		rst	8
(1) 3810/    11BD : 18 5C               		jr	.vedlp
(1) 3811/    11BF :                     .atkend:
(1) 3812/    11BF : FD 73 04            		ld	(iy+LEV),e		; attack level = new level
(1) 3813/    11C2 :                     .atkzero:
(1) 3814/    11C2 : FD 36 18 02         		ld	(iy+MODE),010b		; set to decay mode
(1) 3815/    11C6 : 18 53               		jr	.vedlp
(1) 3816/    11C8 :                     .chk2:
(1) 3817/    11C8 :                     
(1) 3818/    11C8 : FE 02               		cp	010b			; Decay mode
(1) 3819/    11CA : 20 31               		jr	nz,.chk4
(1) 3820/    11CC :                     .dectmr:
(1) 3821/    11CC : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3822/    11D0 : FD 7E 04            		ld	a,(iy+LEV)		; a - Level
(1) 3823/    11D3 : FD 5E 10            		ld	e,(iy+SLV)		; b - Sustain
(1) 3824/    11D6 : BB                  		cp	e
(1) 3825/    11D7 : 38 0D               		jr	c,.dkadd		; if carry: add
(1) 3826/    11D9 : 28 18               		jr	z,.dkyend		; if zero:  finish
(1) 3827/    11DB : CF                  		rst	8
(1) 3828/    11DC : FD 96 0C            		sub	(iy+DKY)		; substract decay rate
(1) 3829/    11DF : 38 12               		jr	c,.dkyend		; finish if wraped.
(1) 3830/    11E1 : BB                  		cp	e			; compare level
(1) 3831/    11E2 : 38 0F               		jr	c,.dkyend		; and finish
(1) 3832/    11E4 : 18 08               		jr	.dksav
(1) 3833/    11E6 :                     .dkadd:
(1) 3834/    11E6 : FD 86 0C            		add	a,(iy+DKY)		;  (level) + (decay rate)
(1) 3835/    11E9 : 38 08               		jr	c,.dkyend		; finish if wraped.
(1) 3836/    11EB : BB                  		cp	e			; compare level
(1) 3837/    11EC : 30 05               		jr	nc,.dkyend
(1) 3838/    11EE :                     .dksav:
(1) 3839/    11EE : FD 77 04            		ld	(iy+LEV),a		; save new level
(1) 3840/    11F1 : 18 28               		jr	.vedlp
(1) 3841/    11F3 :                     .dkyend:
(1) 3842/    11F3 : CF                  		rst	8
(1) 3843/    11F4 : FD 73 04            		ld	(iy+LEV),e		; save last attack
(1) 3844/    11F7 : FD 36 18 04         		ld	(iy+MODE),100b		; and set to sustain
(1) 3845/    11FB : 18 1E               		jr	.vedlp
(1) 3846/    11FD :                     .chk4:
(1) 3847/    11FD : FE 04               		cp	100b			; Sustain phase
(1) 3848/    11FF : 20 1A               		jr	nz,.vedlp
(1) 3849/    1201 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3850/    1205 : FD 7E 04            		ld	a,(iy+LEV)		; a - Level
(1) 3851/    1208 : CF                  		rst	8
(1) 3852/    1209 : FD 86 14            		add 	a,(iy+RRT)		; add Release Rate
(1) 3853/    120C : 38 05               		jr	c,.killenv		; release done
(1) 3854/    120E : FD 77 04            		ld	(iy+LEV),a		; set new Level
(1) 3855/    1211 : 18 08               		jr	.vedlp
(1) 3856/    1213 :                     .killenv:
(1) 3857/    1213 : FD 36 04 FF         		ld	(iy+LEV),-1		; Silence this channel
(1) 3858/    1217 : FD 36 18 00         		ld	(iy+MODE),0		; Reset mode
(1) 3859/    121B :                     .vedlp:
(1) 3860/    121B :                     
(1) 3861/    121B :                     	; ----------------------------
(1) 3862/    121B :                     	; PSG UPDATE
(1) 3863/    121B :                     	; ----------------------------
(1) 3864/    121B : FD 7E 28            		ld	a,(iy+FLG)
(1) 3865/    121E : B7                  		or	a
(1) 3866/    121F : 28 72               		jr	z,.noupd
(1) 3867/    1221 : FD 36 28 00         		ld	(iy+FLG),0	; Reset until next one
(1) 3868/    1225 : 59                  		ld	e,c
(1) 3869/    1226 : 3A 83 1F            		ld	a,(psgHatMode)
(1) 3870/    1229 : 57                  		ld	d,a
(1) 3871/    122A : E6 03               		and	011b
(1) 3872/    122C : FE 03               		cp	011b
(1) 3873/    122E : 20 1D               		jr	nz,.normal
(1) 3874/    1230 : CF                  		rst	8
(1) 3875/    1231 : 78                  		ld	a,b		; Channel 4?
(1) 3876/    1232 : FE 03               		cp	3
(1) 3877/    1234 : 28 13               		jr	z,.silnc_3
(1) 3878/    1236 : FE 04               		cp	4
(1) 3879/    1238 : 20 18               		jr	nz,.do_nfreq
(1) 3880/    123A : 3A 83 1F            		ld	a,(psgHatMode)
(1) 3881/    123D : 57                  		ld	d,a
(1) 3882/    123E : E6 03               		and	011b
(1) 3883/    1240 : CF                  		rst	8
(1) 3884/    1241 : FE 03               		cp	011b
(1) 3885/    1243 : 20 30               		jr	nz,.vonly
(1) 3886/    1245 : 1E C0               		ld	e,0C0h
(1) 3887/    1247 : 18 09               		jr	.do_nfreq
(1) 3888/    1249 :                     .silnc_3:
(1) 3889/    1249 : 3E FF               		ld	a,-1
(1) 3890/    124B : 18 32               		jr	.vlmuch
(1) 3891/    124D :                     .normal:
(1) 3892/    124D : 78                  		ld	a,b
(1) 3893/    124E : FE 04               		cp	4
(1) 3894/    1250 : 28 23               		jr	z,.vonly
(1) 3895/    1252 :                     .do_nfreq:
(1) 3896/    1252 : FD 6E 1C            		ld	l,(iy+DTL)
(1) 3897/    1255 : FD 66 20            		ld	h,(iy+DTH)
(1) 3898/    1258 :                     
(1) 3899/    1258 :                     	; freq effects go here
(1) 3900/    1258 :                     	; (save e FIRST.)
(1) 3901/    1258 :                     	;	push	de
(1) 3902/    1258 :                     	;	pop	de
(1) 3903/    1258 : 7D                  		ld	a,l		; Grab LSB 4 right bits
(1) 3904/    1259 : E6 0F               		and	00001111b
(1) 3905/    125B : B3                  		or	e		; OR with channel set in e
(1) 3906/    125C : CF                  		rst	8
(1) 3907/    125D : DD 77 00            		ld	(ix),a		; write it
(1) 3908/    1260 : 7D                  		ld	a,l		; Grab LSB 4 left bits
(1) 3909/    1261 : 0F                  		rrca
(1) 3910/    1262 : 0F                  		rrca
(1) 3911/    1263 : 0F                  		rrca
(1) 3912/    1264 : 0F                  		rrca
(1) 3913/    1265 : E6 0F               		and	00001111b
(1) 3914/    1267 : 5F                  		ld	e,a
(1) 3915/    1268 : 7C                  		ld	a,h		; Grab MSB bits
(1) 3916/    1269 : CF                  		rst	8
(1) 3917/    126A : 07                  		rlca
(1) 3918/    126B : 07                  		rlca
(1) 3919/    126C : 07                  		rlca
(1) 3920/    126D : 07                  		rlca
(1) 3921/    126E : E6 30               		and	00110000b
(1) 3922/    1270 : B3                  		or	e
(1) 3923/    1271 : DD 77 00            		ld	(ix),a
(1) 3924/    1274 : CF                  		rst	8
(1) 3925/    1275 :                     .vonly:
(1) 3926/    1275 : FD 7E 30            		ld	a,(iy+PVOL)		; c - Level
(1) 3927/    1278 : FD 86 04            		add	a,(iy+LEV)		; Add MASTER volume
(1) 3928/    127B : 30 02               		jr	nc,.vlmuch
(1) 3929/    127D : 3E FF               		ld	a,-1
(1) 3930/    127F :                     .vlmuch:
(1) 3931/    127F : CB 3F               		srl	a			; (Level >> 4)
(1) 3932/    1281 : CB 3F               		srl	a
(1) 3933/    1283 : CB 3F               		srl	a
(1) 3934/    1285 : CF                  		rst	8
(1) 3935/    1286 : CB 3F               		srl	a
(1) 3936/    1288 : E6 0F               		and	00001111b		; Filter volume value
(1) 3937/    128A : B1                  		or	c			; and OR with current channel
(1) 3938/    128B : F6 90               		or	90h			; Set volume-set mode
(1) 3940/    128D : DD 77 00            		ld	(ix),a			; *** WRITE volume
(1) 3942/    1290 : FD 34 38            		inc	(iy+PTMR)		; Update general timer
(1) 3943/    1293 :                     .noupd:
(1) 3944/    1293 :                     	; ----------------------------
(1) 3945/    1293 : FD 2B               		dec	iy			; next COM to check (backwards)
(1) 3946/    1295 : 79                  		ld	a,c
(1) 3947/    1296 : CF                  		rst	8
(1) 3948/    1297 : D6 20               		sub	a,20h			; next PSG (backwards)
(1) 3949/    1299 : 4F                  		ld	c,a
(1) 3950/    129A : 05                  		dec	b
(1) 3951/    129B : C2 48 11            		jp	nz,.vloop
(1) 3952/    129E : C9                  		ret
(1) 3953/    129F :                     
(1) 3954/    129F :                     ; ---------------------------------------------
(1) 3955/    129F :                     ; FM register writes
(1) 3956/    129F :                     ;
(1) 3957/    129F :                     ; Input:
(1) 3958/    129F :                     ; d - ctrl
(1) 3959/    129F :                     ; e - data
(1) 3960/    129F :                     ; ---------------------------------------------
(1) 3961/    129F :                     
(1) 3962/    129F :                     ; c - KeyID
(1) 3963/    129F :                     fm_autoreg:
(1) 3964/    129F : CB 51               		bit	2,c
(1) 3965/    12A1 : 20 0B               		jr	nz,fm_send_2
(1) 3966/    12A3 :                     
(1) 3967/    12A3 :                     ; Channels 1-3 and global registers
(1) 3968/    12A3 :                     fm_send_1:
(1) 3969/    12A3 : 7A                  		ld	a,d
(1) 3970/    12A4 : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 3971/    12A7 : 00                  		nop
(1) 3972/    12A8 : 7B                  		ld	a,e
(1) 3973/    12A9 : 32 01 40            		ld	(Zym_data_1),a
(1) 3974/    12AC : 00                  		nop
(1) 3975/    12AD : C9                  		ret
(1) 3976/    12AE :                     ; Channels 4-6
(1) 3977/    12AE :                     fm_send_2:
(1) 3978/    12AE : 7A                  		ld	a,d
(1) 3979/    12AF : 32 02 40            		ld	(Zym_ctrl_2),a
(1) 3980/    12B2 : 00                  		nop
(1) 3981/    12B3 : 7B                  		ld	a,e
(1) 3982/    12B4 : 32 03 40            		ld	(Zym_data_2),a
(1) 3983/    12B7 : 00                  		nop
(1) 3984/    12B8 : C9                  		ret
(1) 3985/    12B9 :                     
(1) 3986/    12B9 :                     ; --------------------------------------------------------
(1) 3987/    12B9 :                     ; brute-force WAVE ON/OFF playback
(1) 3988/    12B9 :                     ; --------------------------------------------------------
(1) 3989/    12B9 :                     
(1) 3990/    12B9 :                     dac_on:
(1) 3991/    12B9 : 3E 2B               		ld	a,2Bh
(1) 3992/    12BB : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 3993/    12BE : 3E 80               		ld	a,80h
(1) 3994/    12C0 : 32 01 40            		ld	(Zym_data_1),a
(1) 3995/    12C3 : 3E D9               		ld 	a,zopcExx
(1) 3996/    12C5 : 32 08 00            		ld	(dac_me),a
(1) 3997/    12C8 : 3E F5               		ld 	a,zopcPushAf
(1) 3998/    12CA : 32 20 00            		ld	(dac_fill),a
(1) 3999/    12CD : C9                  		ret
(1) 4000/    12CE :                     dac_off:
(1) 4001/    12CE : 3E 2B               		ld	a,2Bh
(1) 4002/    12D0 : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 4003/    12D3 : 3E 00               		ld	a,00h
(1) 4004/    12D5 : 32 01 40            		ld	(Zym_data_1),a
(1) 4005/    12D8 : 3E C9               		ld 	a,zopcRet
(1) 4006/    12DA : 32 08 00            		ld	(dac_me),a
(1) 4007/    12DD : 3E C9               		ld 	a,zopcRet
(1) 4008/    12DF : 32 20 00            		ld	(dac_fill),a
(1) 4009/    12E2 : C9                  		ret
(1) 4010/    12E3 :                     
(1) 4011/    12E3 :                     ; --------------------------------------------------------
(1) 4012/    12E3 :                     ; dac_play
(1) 4013/    12E3 :                     ;
(1) 4014/    12E3 :                     ; Plays a new sample
(1) 4015/    12E3 :                     ;
(1) 4016/    12E3 :                     ; NOTE:
(1) 4017/    12E3 :                     ; Set wave_Flags and wave_Pitch externally
(1) 4018/    12E3 :                     ; getting here.
(1) 4019/    12E3 :                     ; --------------------------------------------------------
(1) 4020/    12E3 :                     
(1) 4021/    12E3 :                     dac_play:
(1) 4022/    12E3 : F3                  		di
(1) 4023/    12E4 : CD CE 12            		call	dac_off
(1) 4024/    12E7 : D9                  		exx				; flip exx regs
(1) 4025/    12E8 : 01 1D 00            		ld	bc,dWaveBuff>>8		; bc - WAVFIFO MSB
(1) 4026/    12EB : ED 5B 92 1F         		ld	de,(wave_Pitch)		; de - Pitch
(1) 4027/    12EF : 21 00 00            		ld	hl,(dWaveBuff&0FFh)<<8	; hl - WAVFIFO LSB pointer (xx.00)
(1) 4028/    12F2 : D9                  		exx				; move them back
(1) 4029/    12F3 : 2A 89 1F            		ld	hl,(wave_Start)
(1) 4030/    12F6 : 3A 8B 1F            		ld 	a,(wave_Start+2)
(1) 4031/    12F9 : 22 98 1F            		ld	(dDacPntr),hl
(1) 4032/    12FC : 32 9A 1F            		ld	(dDacPntr+2),a
(1) 4033/    12FF : 2A 8C 1F            		ld	hl,(wave_Len)
(1) 4034/    1302 : 3A 8E 1F            		ld 	a,(wave_Len+2)
(1) 4035/    1305 : 22 9B 1F            		ld	(dDacCntr),hl
(1) 4036/    1308 : 32 9D 1F            		ld	(dDacCntr+2),a
(1) 4037/    130B : AF                  		xor	a
(1) 4038/    130C : 32 97 1F            		ld	(dDacFifoMid),a
(1) 4039/    130F : CD 17 13            		call	dac_refill
(1) 4040/    1312 : CD B9 12            		call	dac_on
(1) 4041/    1315 : FB                  		ei
(1) 4042/    1316 : C9                  		ret
(1) 4043/    1317 :                     
(1) 4044/    1317 :                     ; --------------------------------------------------------
(1) 4045/    1317 :                     
(1) 4046/    1317 :                     dac_refill:
(1) 4047/    1317 : CF                  		rst	8
(1) 4048/    1318 : C5                  		push	bc
(1) 4049/    1319 : D5                  		push	de
(1) 4050/    131A : E5                  		push	hl
(1) 4051/    131B : 3A 94 1F            		ld	a,(wave_Flags)	; Already finished?
(1) 4052/    131E : FE 07               		cp	111b
(1) 4053/    1320 : D2 D6 13            		jp	nc,.dacfill_end
(1) 4054/    1323 : 3A 9D 1F            		ld	a,(dDacCntr+2)	; Last bytes
(1) 4055/    1326 : 2A 9B 1F            		ld	hl,(dDacCntr)
(1) 4056/    1329 : 01 80 00            		ld	bc,80h
(1) 4057/    132C : 37                  		scf
(1) 4058/    132D : 3F                  		ccf
(1) 4059/    132E : ED 42               		sbc	hl,bc
(1) 4060/    1330 : DE 00               		sbc	a,0
(1) 4061/    1332 : 32 9D 1F            		ld	(dDacCntr+2),a
(1) 4062/    1335 : 22 9B 1F            		ld	(dDacCntr),hl
(1) 4063/    1338 : 16 1D               		ld	d,dWaveBuff>>8
(1) 4064/    133A : B7                  		or	a
(1) 4065/    133B : FA 65 13            		jp	m,.dac_over
(1) 4066/    133E : 3A 97 1F            		ld	a,(dDacFifoMid)	; Update halfway value
(1) 4067/    1341 : 5F                  		ld	e,a
(1) 4068/    1342 : C6 80               		add 	a,80h
(1) 4069/    1344 : 32 97 1F            		ld	(dDacFifoMid),a
(1) 4070/    1347 : 2A 98 1F            		ld	hl,(dDacPntr)
(1) 4071/    134A : 3A 9A 1F            		ld	a,(dDacPntr+2)
(1) 4072/    134D : CD 84 10            		call	transferRom	; *** ROM ACCESS ***
(1) 4073/    1350 : 2A 98 1F            		ld	hl,(dDacPntr)
(1) 4074/    1353 : 3A 9A 1F            		ld	a,(dDacPntr+2)
(1) 4075/    1356 : 01 80 00            		ld	bc,80h
(1) 4076/    1359 : 09                  		add	hl,bc
(1) 4077/    135A : CE 00               		adc	a,0
(1) 4078/    135C : 22 98 1F            		ld	(dDacPntr),hl
(1) 4079/    135F : 32 9A 1F            		ld	(dDacPntr+2),a
(1) 4080/    1362 : C3 D9 13            		jp	.dacfill_ret
(1) 4081/    1365 :                     
(1) 4082/    1365 :                     ; NOTE:
(1) 4083/    1365 :                     ; This doesn't finish at the exact END point.
(1) 4084/    1365 :                     .dac_over:
(1) 4085/    1365 : 16 1D               		ld	d,dWaveBuff>>8
(1) 4086/    1367 : 3A 94 1F            		ld	a,(wave_Flags)	; LOOP enabled?
(1) 4087/    136A : E6 01               		and	001b
(1) 4088/    136C : C2 8F 13            		jp	nz,.dacfill_loop
(1) 4089/    136F : 7D                  		ld	a,l
(1) 4090/    1370 : C6 80               		add	a,80h
(1) 4091/    1372 : 4F                  		ld	c,a
(1) 4092/    1373 : 06 00               		ld	b,0
(1) 4093/    1375 : C5                  		push	bc
(1) 4094/    1376 : 3A 97 1F            		ld	a,(dDacFifoMid)
(1) 4095/    1379 : 5F                  		ld	e,a
(1) 4096/    137A : C6 80               		add	a,80h
(1) 4097/    137C : 32 97 1F            		ld	(dDacFifoMid),a
(1) 4098/    137F : C1                  		pop	bc
(1) 4099/    1380 : 79                  		ld	a,c
(1) 4100/    1381 : B0                  		or	b
(1) 4101/    1382 : 28 52               		jr	z,.dacfill_end
(1) 4102/    1384 : 2A 98 1F            		ld	hl,(dDacPntr)
(1) 4103/    1387 : 3A 9A 1F            		ld	a,(dDacPntr+2)
(1) 4104/    138A : CD 84 10            		call	transferRom	; *** ROM ACCESS ***
(1) 4105/    138D : 18 47               		jr	.dacfill_end
(1) 4106/    138F :                     .dacfill_loop:
(1) 4107/    138F :                     	; loop sample
(1) 4108/    138F : C5                  		push	bc
(1) 4109/    1390 : D5                  		push	de
(1) 4110/    1391 : 3A 91 1F            		ld	a,(wave_Loop+2)
(1) 4111/    1394 : 4F                  		ld	c,a
(1) 4112/    1395 : ED 5B 8F 1F         		ld	de,(wave_Loop)
(1) 4113/    1399 : 2A 89 1F            		ld	hl,(wave_Start)
(1) 4114/    139C : 3A 8B 1F            		ld 	a,(wave_Start+2)
(1) 4115/    139F : 81                  		add	a,c
(1) 4116/    13A0 : 19                  		add	hl,de
(1) 4117/    13A1 : CE 00               		adc	a,0
(1) 4118/    13A3 : 22 98 1F            		ld	(dDacPntr),hl
(1) 4119/    13A6 : 32 9A 1F            		ld	(dDacPntr+2),a
(1) 4120/    13A9 : 2A 8C 1F            		ld	hl,(wave_Len)
(1) 4121/    13AC : 3A 8E 1F            		ld 	a,(wave_Len+2)
(1) 4122/    13AF : 91                  		sub	a,c
(1) 4123/    13B0 : 37                  		scf
(1) 4124/    13B1 : 3F                  		ccf
(1) 4125/    13B2 : ED 52               		sbc	hl,de
(1) 4126/    13B4 : DE 00               		sbc	a,0
(1) 4127/    13B6 : 22 9B 1F            		ld	(dDacCntr),hl
(1) 4128/    13B9 : 32 9D 1F            		ld	(dDacCntr+2),a
(1) 4129/    13BC : D1                  		pop	de
(1) 4130/    13BD : C1                  		pop	bc
(1) 4131/    13BE : 78                  		ld	a,b
(1) 4132/    13BF : B1                  		or	c
(1) 4133/    13C0 : 28 17               		jr	z,.dacfill_ret
(1) 4134/    13C2 : 3A 97 1F            		ld	a,(dDacFifoMid)
(1) 4135/    13C5 : 5F                  		ld	e,a
(1) 4136/    13C6 : C6 80               		add	a,80h
(1) 4137/    13C8 : 32 97 1F            		ld	(dDacFifoMid),a
(1) 4138/    13CB : 2A 98 1F            		ld	hl,(dDacPntr)
(1) 4139/    13CE : 3A 9A 1F            		ld	a,(dDacPntr+2)
(1) 4140/    13D1 : CD 84 10            		call	transferRom	; *** ROM ACCESS ***
(1) 4141/    13D4 : 18 03               		jr	.dacfill_ret
(1) 4142/    13D6 :                     .dacfill_end:
(1) 4143/    13D6 : CD CE 12            		call	dac_off		; DAC finished
(1) 4144/    13D9 :                     .dacfill_ret:
(1) 4145/    13D9 : E1                  		pop	hl
(1) 4146/    13DA : D1                  		pop	de
(1) 4147/    13DB : C1                  		pop	bc
(1) 4148/    13DC : C9                  		ret
(1) 4149/    13DD :                     
(1) 4150/    13DD :                     ; ----------------------------------------------------------------
(1) 4151/    13DD :                     ; Two purposes:
(1) 4152/    13DD :                     ;
(1) 4153/    13DD :                     ; Set the BANK to the very last part of memory for the
(1) 4154/    13DD :                     ; transferRom to read from RAM
(1) 4155/    13DD :                     ;
(1) 4156/    13DD :                     ; On 32X, sets the bank out of the ROM reading areas due
(1) 4157/    13DD :                     ; to a conflict with the PSG
(1) 4158/    13DD :                     ;
(1) 4159/    13DD :                     ; Uses:
(1) 4160/    13DD :                     ; hl,b
(1) 4161/    13DD :                     ; ----------------------------------------------------------------
(1) 4162/    13DD :                     
(1) 4163/    13DD :                     gema_lastbank:
(1) 4164/    13DD : 21 00 60            		ld	hl,6000h
(1) 4165/    13E0 : 06 09               		ld	b,9		; 9 bits
(1) 4166/    13E2 :                     .write:
(1) 4167/    13E2 : 36 01               		ld	(hl),1
(1) 4168/    13E4 : 10 FC               		djnz	.write
(1) 4169/    13E6 : CF                  		rst	8
(1) 4170/    13E7 : C9                  		ret
(1) 4171/    13E8 :                     
(1) 4172/    13E8 :                     ; ====================================================================
(1) 4173/    13E8 :                     ; ----------------------------------------------------------------
(1) 4174/    13E8 :                     ; Tables
(1) 4175/    13E8 :                     ; ----------------------------------------------------------------
(1) 4176/    13E8 :                     
(1) 4177/    13E8 : 84 02               fmFreq_List:	dw 644
(1) 4178/    13EA : A9 02               		dw 681
(1) 4179/    13EC : D2 02               		dw 722
(1) 4180/    13EE : FD 02               		dw 765
(1) 4181/    13F0 : 2A 03               		dw 810
(1) 4182/    13F2 : 5A 03               		dw 858
(1) 4183/    13F4 : 8E 03               		dw 910
(1) 4184/    13F6 : C4 03               		dw 964
(1) 4185/    13F8 : FD 03               		dw 1021
(1) 4186/    13FA : 39 04               		dw 1081
(1) 4187/    13FC : 7A 04               		dw 1146
(1) 4188/    13FE : BE 04               		dw 1214
(1) 4189/    1400 :                     psgFreq_List:
(1) 4190/    1400 :                     ; 		dw -1		; C-0 00
(1) 4191/    1400 :                     ; 		dw -1
(1) 4192/    1400 :                     ; 		dw -1
(1) 4193/    1400 :                     ; 		dw -1
(1) 4194/    1400 :                     ; 		dw -1
(1) 4195/    1400 :                     ; 		dw -1
(1) 4196/    1400 :                     ; 		dw -1
(1) 4197/    1400 :                     ; 		dw -1
(1) 4198/    1400 :                     ; 		dw -1
(1) 4199/    1400 :                     ; 		dw -1
(1) 4200/    1400 :                     ; 		dw -1
(1) 4201/    1400 :                     ; 		dw -1
(1) 4202/    1400 :                     ; 		dw -1		; C-1 0C
(1) 4203/    1400 :                     ; 		dw -1
(1) 4204/    1400 :                     ; 		dw -1
(1) 4205/    1400 :                     ; 		dw -1
(1) 4206/    1400 :                     ; 		dw -1
(1) 4207/    1400 :                     ; 		dw -1
(1) 4208/    1400 :                     ; 		dw -1
(1) 4209/    1400 :                     ; 		dw -1
(1) 4210/    1400 :                     ; 		dw -1
(1) 4211/    1400 :                     ; 		dw -1
(1) 4212/    1400 :                     ; 		dw -1
(1) 4213/    1400 :                     ; 		dw -1
(1) 4214/    1400 :                     ; 		dw -1		; C-2 18
(1) 4215/    1400 :                     ; 		dw -1
(1) 4216/    1400 :                     ; 		dw -1
(1) 4217/    1400 :                     ; 		dw -1
(1) 4218/    1400 :                     ; 		dw -1
(1) 4219/    1400 :                     ; 		dw -1
(1) 4220/    1400 :                     ; 		dw -1
(1) 4221/    1400 :                     ; 		dw -1
(1) 4222/    1400 :                     ; 		dw -1
(1) 4223/    1400 :                     ; 		dw -1
(1) 4224/    1400 :                     ; 		dw -1
(1) 4225/    1400 :                     ; 		dw -1
(1) 4226/    1400 : FF FF               		dw -1		; C-3 24
(1) 4227/    1402 : FF FF               		dw -1
(1) 4228/    1404 : FF FF               		dw -1
(1) 4229/    1406 : FF FF               		dw -1
(1) 4230/    1408 : FF FF               		dw -1
(1) 4231/    140A : FF FF               		dw -1
(1) 4232/    140C : FF FF               		dw -1
(1) 4233/    140E : FF FF               		dw -1
(1) 4234/    1410 : FF FF               		dw -1
(1) 4235/    1412 : F8 03               		dw 3F8h
(1) 4236/    1414 : BF 03               		dw 3BFh
(1) 4237/    1416 : 89 03               		dw 389h
(1) 4238/    1418 : 56 03               		dw 356h		; C-4 30
(1) 4239/    141A : 26 03               		dw 326h
(1) 4240/    141C : F9 02               		dw 2F9h
(1) 4241/    141E : CE 02               		dw 2CEh
(1) 4242/    1420 : A5 02               		dw 2A5h
(1) 4243/    1422 : 80 02               		dw 280h
(1) 4244/    1424 : 5C 02               		dw 25Ch
(1) 4245/    1426 : 3A 02               		dw 23Ah
(1) 4246/    1428 : 1A 02               		dw 21Ah
(1) 4247/    142A : FB 01               		dw 1FBh
(1) 4248/    142C : DF 01               		dw 1DFh
(1) 4249/    142E : C4 01               		dw 1C4h
(1) 4250/    1430 : AB 01               		dw 1ABh		; C-5 3C
(1) 4251/    1432 : 93 01               		dw 193h
(1) 4252/    1434 : 7D 01               		dw 17Dh
(1) 4253/    1436 : 67 01               		dw 167h
(1) 4254/    1438 : 53 01               		dw 153h
(1) 4255/    143A : 40 01               		dw 140h
(1) 4256/    143C : 2E 01               		dw 12Eh
(1) 4257/    143E : 1D 01               		dw 11Dh
(1) 4258/    1440 : 0D 01               		dw 10Dh
(1) 4259/    1442 : FE 00               		dw 0FEh
(1) 4260/    1444 : EF 00               		dw 0EFh
(1) 4261/    1446 : E2 00               		dw 0E2h
(1) 4262/    1448 : D6 00               		dw 0D6h		; C-6 48
(1) 4263/    144A : C9 00               		dw 0C9h
(1) 4264/    144C : BE 00               		dw 0BEh
(1) 4265/    144E : B4 00               		dw 0B4h
(1) 4266/    1450 : A9 00               		dw 0A9h
(1) 4267/    1452 : A0 00               		dw 0A0h
(1) 4268/    1454 : 97 00               		dw 097h
(1) 4269/    1456 : 8F 00               		dw 08Fh
(1) 4270/    1458 : 87 00               		dw 087h
(1) 4271/    145A : 7F 00               		dw 07Fh
(1) 4272/    145C : 78 00               		dw 078h
(1) 4273/    145E : 71 00               		dw 071h
(1) 4274/    1460 : 6B 00               		dw 06Bh		; C-7 54
(1) 4275/    1462 : 65 00               		dw 065h
(1) 4276/    1464 : 5F 00               		dw 05Fh
(1) 4277/    1466 : 5A 00               		dw 05Ah
(1) 4278/    1468 : 55 00               		dw 055h
(1) 4279/    146A : 50 00               		dw 050h
(1) 4280/    146C : 4B 00               		dw 04Bh
(1) 4281/    146E : 47 00               		dw 047h
(1) 4282/    1470 : 43 00               		dw 043h
(1) 4283/    1472 : 40 00               		dw 040h
(1) 4284/    1474 : 3C 00               		dw 03Ch
(1) 4285/    1476 : 39 00               		dw 039h
(1) 4286/    1478 : 36 00               		dw 036h		; C-8 60
(1) 4287/    147A : 33 00               		dw 033h
(1) 4288/    147C : 30 00               		dw 030h
(1) 4289/    147E : 2D 00               		dw 02Dh
(1) 4290/    1480 : 2B 00               		dw 02Bh
(1) 4291/    1482 : 28 00               		dw 028h
(1) 4292/    1484 : 26 00               		dw 026h
(1) 4293/    1486 : 24 00               		dw 024h
(1) 4294/    1488 : 22 00               		dw 022h
(1) 4295/    148A : 20 00               		dw 020h
(1) 4296/    148C : 1F 00               		dw 01Fh
(1) 4297/    148E : 1D 00               		dw 01Dh
(1) 4298/    1490 : 1B 00               		dw 01Bh		; C-9 6C
(1) 4299/    1492 : 1A 00               		dw 01Ah
(1) 4300/    1494 : 18 00               		dw 018h
(1) 4301/    1496 : 17 00               		dw 017h
(1) 4302/    1498 : 16 00               		dw 016h
(1) 4303/    149A : 15 00               		dw 015h
(1) 4304/    149C : 13 00               		dw 013h
(1) 4305/    149E : 12 00               		dw 012h
(1) 4306/    14A0 : 11 00               		dw 011h
(1) 4307/    14A2 : 10 00                		dw 010h
(1) 4308/    14A4 : 09 00                		dw 009h
(1) 4309/    14A6 : 08 00                		dw 008h
(1) 4310/    14A8 : 06 00               		dw 006h
(1) 4311/    14AA : 46 19               fmcach_list:	dw fmcach_1
(1) 4312/    14AC : 6E 19               		dw fmcach_2
(1) 4313/    14AE : 96 19               		dw fmcach_3
(1) 4314/    14B0 : 00 00               		dw 0		; <-- skipped
(1) 4315/    14B2 : BE 19               		dw fmcach_4
(1) 4316/    14B4 : E6 19               		dw fmcach_5
(1) 4317/    14B6 : 0E 1A               		dw fmcach_6
(1) 4318/    14B8 :                     
(1) 4319/    14B8 :                     ; ----------------------------------------
(1) 4320/    14B8 :                     ; DAC and PWM
(1) 4321/    14B8 :                     ;
(1) 4322/    14B8 :                     ; DAC base: 16000hz
(1) 4323/    14B8 :                     ; PWM base: 22050hz
(1) 4324/    14B8 :                     ; ----------------------------------------
(1) 4325/    14B8 :                     wavFreq_List:
(1) 4326/    14B8 :                     	;   C     C#    D     D#    E     F     F#    G     G#    A     A#    B
(1) 4327/    14B8 :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-0
(1) 4328/    14B8 :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-1
(1) 4329/    14B8 :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0036h,003Bh	; x-2
(1) 4330/    14B8 : 3E 00 43 00 46 00   	dw 003Eh,0043h,0046h,0049h,004Eh,0054h,0058h,005Eh,0063h,0068h,0070h,0075h	; x-3
             14BE : 49 00 4E 00 54 00 
             14C4 : 58 00 5E 00 63 00 
             14CA : 68 00 70 00 75 00 
(1) 4331/    14D0 : 85 00 87 00 8C 00   	dw 0085h,0087h,008Ch,009Ah,00A4h,00ADh,00B2h,00C0h,00CCh,00D7h,00E6h,00F0h	; x-4
             14D6 : 9A 00 A4 00 AD 00 
             14DC : B2 00 C0 00 CC 00 
             14E2 : D7 00 E6 00 F0 00 
(1) 4332/    14E8 : 00 01 10 01 20 01   	dw 0100h,0110h,0120h,012Eh,0147h,015Ah,016Ah,017Fh,0191h,01ACh,01C2h,01E0h	; x-5
             14EE : 2E 01 47 01 5A 01 
             14F4 : 6A 01 7F 01 91 01 
             14FA : AC 01 C2 01 E0 01 
(1) 4333/    1500 : F8 01 10 02 40 02   	dw 01F8h,0210h,0240h,0260h,0280h,02A0h,02D0h,02F8h,0320h,0350h,0380h,03C0h	; x-6
             1506 : 60 02 80 02 A0 02 
             150C : D0 02 F8 02 20 03 
             1512 : 50 03 80 03 C0 03 
(1) 4334/    1518 : 00 01 00 01 00 01   	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-7
             151E : 00 01 00 01 00 01 
             1524 : 00 01 00 01 00 01 
             152A : 00 01 00 01 00 01 
(1) 4335/    1530 : 00 01 00 01 00 01   	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-8
             1536 : 00 01 00 01 00 01 
             153C : 00 01 00 01 00 01 
             1542 : 00 01 00 01 00 01 
(1) 4336/    1548 : 00 01 00 01 00 01   	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-9
             154E : 00 01 00 01 00 01 
             1554 : 00 01 00 01 00 01 
             155A : 00 01 00 01 00 01 
(1) 4337/    1560 :                     
(1) 4338/    1560 :                     ; ----------------------------------------
(1) 4339/    1560 :                     ; SegaCD PCM ONLY
(1) 4340/    1560 :                     ;
(1) 4341/    1560 :                     ; PCM base: 32000hz
(1) 4342/    1560 :                     ; ----------------------------------------
(1) 4343/    1560 :                     wavFreq_CdPcm:
(1) 4344/    1560 :                     	;     C     C#     D      D#     E      F      F#     G      G#     A      A#     B
(1) 4345/    1560 :                     ; 	dw  0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h	; x-0
(1) 4346/    1560 :                     ; 	dw  0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h	; x-1
(1) 4347/    1560 :                     ; 	dw  0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h	; x-2  4000 unchecked
(1) 4348/    1560 : F8 01 14 02 3C 02   	dw  01F8h, 0214h, 023Ch, 0258h, 027Ch, 02A0h, 02C8h, 02F4h, 031Ch, 0348h, 037Ch, 03B0h	; x-3  8000 ok
             1566 : 58 02 7C 02 A0 02 
             156C : C8 02 F4 02 1C 03 
             1572 : 48 03 7C 03 B0 03 
(1) 4349/    1578 : F0 03 24 04 68 04   	dw  03F0h, 0424h, 0468h, 04A8h, 04ECh, 0540h, 0590h, 05E4h, 063Ch, 0698h, 0704h, 0760h	; x-4 16000 ok
             157E : A8 04 EC 04 40 05 
             1584 : 90 05 E4 05 3C 06 
             158A : 98 06 04 07 60 07 
(1) 4350/    1590 : DC 07 48 08 D4 08   	dw  07DCh, 0848h, 08D4h, 0960h, 09F0h, 0A64h, 0B04h, 0BAAh, 0C60h, 0D18h, 0DE4h, 0EB6h	; x-5 32000 ok
             1596 : 60 09 F0 09 64 0A 
             159C : 04 0B AA 0B 60 0C 
             15A2 : 18 0D E4 0D B6 0E 
(1) 4351/    15A8 : B0 0F 74 10 84 11   	dw  0FB0h, 1074h, 1184h, 1280h, 139Ch, 14C8h, 1624h, 174Ch, 18DCh, 1A38h, 1BE0h, 1D94h	; x-6 64000 unstable
             15AE : 80 12 9C 13 C8 14 
             15B4 : 24 16 4C 17 DC 18 
             15BA : 38 1A E0 1B 94 1D 
(1) 4352/    15C0 : 64 1F FC 20 30 23   	dw  1F64h, 20FCh, 2330h, 2524h, 2750h, 29B4h, 2C63h, 2F63h, 31E0h, 347Bh, 377Bh, 3B41h	; x-7 128000 bad
             15C6 : 24 25 50 27 B4 29 
             15CC : 63 2C 63 2F E0 31 
             15D2 : 7B 34 7B 37 41 3B 
(1) 4353/    15D8 : E8 3E 06 42 84 46   	dw  3EE8h, 4206h, 4684h, 4A5Ah, 4EB5h, 5379h, 58E1h, 5DE0h, 63C0h, 68FFh, 6EFFh, 783Ch	; x-8 256000 bad
             15DE : 5A 4A B5 4E 79 53 
             15E4 : E1 58 E0 5D C0 63 
             15EA : FF 68 FF 6E 3C 78 
(1) 4354/    15F0 : C2 7F FC 83 14 8D   	dw  7FC2h, 83FCh, 8D14h, 9780h,0AA5Dh,0B1F9h,   -1 ,   -1 ,   -1 ,   -1 ,   -1 ,   -1 	; x-9 bad
             15F6 : 80 97 5D AA F9 B1 
             15FC : FF FF FF FF FF FF 
             1602 : FF FF FF FF FF FF 
(1) 4355/    1608 :                     
(1) 4356/    1608 :                     ; --------------------------------------------------------
(1) 4357/    1608 :                     ; Channel table struct:
(1) 4358/    1608 :                     ; 00  - DIRECT Linked channel from trkChnls
(1) 4359/    1608 :                     ; 02  - 00h-7Fh: Priority level / 80h+ Silence request (chip ID)
(1) 4360/    1608 :                     ; 03  - FREE
(1) 4361/    1608 :                     ; 05  - Chip index (YM2612: KEY index)
(1) 4362/    1608 :                     ; 06  - Frequency list index (YM2612: %oooiiiii oct|index)
(1) 4363/    1608 :                     ; 07  - Pitchbend add/sub
(1) 4364/    1608 :                     ; 08  - Current volume: 00-max
(1) 4365/    1608 :                     ; 09  - Stored effect setting
(1) 4366/    1608 :                     ; 0A  - FREE
(1) 4367/    1608 :                     ; 0B  - FREE
(1) 4368/    1608 :                     ; 0C+ - Misc. settings for the current chip
(1) 4369/    1608 :                     ; 10+ - Intrument data
(1) 4370/    1608 :                     ;
(1) 4371/    1608 :                     ; PSG   80h
(1) 4372/    1608 :                     ; PSGN  90h
(1) 4373/    1608 :                     ; FM   0A0h
(1) 4374/    1608 :                     ; FM3  0B0h
(1) 4375/    1608 :                     ; DAC  0C0h
(1) 4376/    1608 :                     ; PCM  0D0h
(1) 4377/    1608 :                     ; PWM  0E0h
(1) 4378/    1608 :                     ; --------------------------------------------------------
(1) 4379/    1608 :                     
(1) 4380/    1608 : 10 00               tblList:	dw tblPSG-tblList		;  80h
(1) 4381/    160A : 5A 80               		dw tblPSGN-tblList|8000h	;  90h *
(1) 4382/    160C : 72 00               		dw tblFM-tblList		; 0A0h
(1) 4383/    160E : D2 80               		dw tblFM3-tblList|8000h		; 0B0h *
(1) 4384/    1610 : EA 80               		dw tblFM6-tblList|8000h		; 0C0h *
(1) 4385/    1612 : 04 01               		dw tblPCM-tblList		; 0D0h
(1) 4386/    1614 : C6 01               		dw tblPWM-tblList		; 0E0h
(1) 4387/    1616 : 00 00               		dw 0
(1) 4388/    1618 : 00 00 00 00 00 00   tblPSG:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             161E : 00 00             
(1) 4389/    1620 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1626 : 00 00             
(1) 4390/    1628 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             162E : 00 00             
(1) 4391/    1630 : 00 00 00 00 00 01   		db 00h,00h,00h,00h,00h,01h,00h,00h	; Channel 2
             1636 : 00 00             
(1) 4392/    1638 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             163E : 00 00             
(1) 4393/    1640 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1646 : 00 00             
(1) 4394/    1648 : 00 00 00 00 00 02   		db 00h,00h,00h,00h,00h,02h,00h,00h	; Channel 3
             164E : 00 00             
(1) 4395/    1650 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1656 : 00 00             
(1) 4396/    1658 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             165E : 00 00             
(1) 4397/    1660 : FF FF               		dw -1	; end-of-list
(1) 4398/    1662 : 00 00 00 00 00 03   tblPSGN:	db 00h,00h,00h,00h,00h,03h,00h,03h	; Noise
             1668 : 00 03             
(1) 4399/    166A : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1670 : 00 00             
(1) 4400/    1672 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1678 : 00 00             
(1) 4401/    167A : 00 00 00 00 00 00   tblFM:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             1680 : 00 00             
(1) 4402/    1682 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1688 : 00 00             
(1) 4403/    168A : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1690 : 00 00             
(1) 4404/    1692 : 00 00 00 00 00 01   		db 00h,00h,00h,00h,00h,01h,00h,00h	; Channel 2
             1698 : 00 00             
(1) 4405/    169A : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             16A0 : 00 00             
(1) 4406/    16A2 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             16A8 : 00 00             
(1) 4407/    16AA : 00 00 00 00 00 04   		db 00h,00h,00h,00h,00h,04h,00h,00h	; Channel 4 <--
             16B0 : 00 00             
(1) 4408/    16B2 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             16B8 : 00 00             
(1) 4409/    16BA : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             16C0 : 00 00             
(1) 4410/    16C2 : 00 00 00 00 00 05   		db 00h,00h,00h,00h,00h,05h,00h,00h	; Channel 5
             16C8 : 00 00             
(1) 4411/    16CA : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             16D0 : 00 00             
(1) 4412/    16D2 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             16D8 : 00 00             
(1) 4413/    16DA : 00 00 00 00 00 02   tblFM3:		db 00h,00h,00h,00h,00h,02h,00h,00h	; Channel 3 <--
             16E0 : 00 00             
(1) 4414/    16E2 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             16E8 : 00 00             
(1) 4415/    16EA : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             16F0 : 00 00             
(1) 4416/    16F2 : 00 00 00 00 00 06   tblFM6:		db 00h,00h,00h,00h,00h,06h,00h,00h	; Channel 6 <--
             16F8 : 00 00             
(1) 4417/    16FA : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1700 : 00 00             
(1) 4418/    1702 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1708 : 00 00             
(1) 4419/    170A : FF FF               		dw -1	; end-of-list
(1) 4420/    170C : 00 00 00 00 00 00   tblPCM:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             1712 : 00 00             
(1) 4421/    1714 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             171A : 00 00             
(1) 4422/    171C : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1722 : 00 00             
(1) 4423/    1724 : 00 00 00 00 00 01   		db 00h,00h,00h,00h,00h,01h,00h,00h	; Channel 2
             172A : 00 00             
(1) 4424/    172C : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1732 : 00 00             
(1) 4425/    1734 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             173A : 00 00             
(1) 4426/    173C : 00 00 00 00 00 02   		db 00h,00h,00h,00h,00h,02h,00h,00h	; Channel 3
             1742 : 00 00             
(1) 4427/    1744 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             174A : 00 00             
(1) 4428/    174C : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1752 : 00 00             
(1) 4429/    1754 : 00 00 00 00 00 03   		db 00h,00h,00h,00h,00h,03h,00h,00h	; Channel 4
             175A : 00 00             
(1) 4430/    175C : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1762 : 00 00             
(1) 4431/    1764 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             176A : 00 00             
(1) 4432/    176C : 00 00 00 00 00 04   		db 00h,00h,00h,00h,00h,04h,00h,00h	; Channel 5
             1772 : 00 00             
(1) 4433/    1774 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             177A : 00 00             
(1) 4434/    177C : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1782 : 00 00             
(1) 4435/    1784 : 00 00 00 00 00 05   		db 00h,00h,00h,00h,00h,05h,00h,00h	; Channel 6
             178A : 00 00             
(1) 4436/    178C : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1792 : 00 00             
(1) 4437/    1794 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             179A : 00 00             
(1) 4438/    179C : 00 00 00 00 00 06   		db 00h,00h,00h,00h,00h,06h,00h,00h	; Channel 7
             17A2 : 00 00             
(1) 4439/    17A4 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             17AA : 00 00             
(1) 4440/    17AC : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             17B2 : 00 00             
(1) 4441/    17B4 : 00 00 00 00 00 07   		db 00h,00h,00h,00h,00h,07h,00h,00h	; Channel 7
             17BA : 00 00             
(1) 4442/    17BC : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             17C2 : 00 00             
(1) 4443/    17C4 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             17CA : 00 00             
(1) 4444/    17CC : FF FF               		dw -1	; end-of-list
(1) 4445/    17CE : 00 00 00 00 00 00   tblPWM:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             17D4 : 00 00             
(1) 4446/    17D6 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             17DC : 00 00             
(1) 4447/    17DE : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             17E4 : 00 00             
(1) 4448/    17E6 : 00 00 00 00 00 01   		db 00h,00h,00h,00h,00h,01h,00h,00h	; Channel 2
             17EC : 00 00             
(1) 4449/    17EE : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             17F4 : 00 00             
(1) 4450/    17F6 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             17FC : 00 00             
(1) 4451/    17FE : 00 00 00 00 00 02   		db 00h,00h,00h,00h,00h,02h,00h,00h	; Channel 3
             1804 : 00 00             
(1) 4452/    1806 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             180C : 00 00             
(1) 4453/    180E : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1814 : 00 00             
(1) 4454/    1816 : 00 00 00 00 00 03   		db 00h,00h,00h,00h,00h,03h,00h,00h	; Channel 4
             181C : 00 00             
(1) 4455/    181E : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1824 : 00 00             
(1) 4456/    1826 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             182C : 00 00             
(1) 4457/    182E : 00 00 00 00 00 04   		db 00h,00h,00h,00h,00h,04h,00h,00h	; Channel 5
             1834 : 00 00             
(1) 4458/    1836 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             183C : 00 00             
(1) 4459/    183E : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1844 : 00 00             
(1) 4460/    1846 : 00 00 00 00 00 05   		db 00h,00h,00h,00h,00h,05h,00h,00h	; Channel 6
             184C : 00 00             
(1) 4461/    184E : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1854 : 00 00             
(1) 4462/    1856 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             185C : 00 00             
(1) 4463/    185E : 00 00 00 00 00 06   		db 00h,00h,00h,00h,00h,06h,00h,00h	; Channel 7
             1864 : 00 00             
(1) 4464/    1866 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             186C : 00 00             
(1) 4465/    186E : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1874 : 00 00             
(1) 4466/    1876 : FF FF               		dw -1	; end-of-list
(1) 4467/    1878 :                     
(1) 4468/    1878 :                     ; ====================================================================
(1) 4469/    1878 :                     ; ----------------------------------------------------------------
(1) 4470/    1878 :                     ; MASTER buffers list
(1) 4471/    1878 :                     ;
(1) 4472/    1878 :                     ; dw track_buffer
(1) 4473/    1878 :                     ; dw channel_list,block_cache,header_cache,track_cache
(1) 4474/    1878 :                     ;
(1) 4475/    1878 :                     ; (track_cache: 1BIT SIZES ONLY, ALIGNED)
(1) 4476/    1878 :                     ; ----------------------------------------------------------------
(1) 4477/    1878 :                     
(1) 4478/    1878 :                     nikona_BuffList:
(1) 4479/    1878 : 96 1A 50 1B 36 1A   	dw trkBuff_0,trkBlks_0,trkHdrs_0,trkCach_0
             187E : 00 1F             
(1) 4480/    1880 : D4 1A 58 1B 56 1A   	dw trkBuff_1,trkBlks_1,trkHdrs_1,trkCach_1
             1886 : 20 1F             
(1) 4481/    1888 : 12 1B 60 1B 76 1A   	dw trkBuff_2,trkBlks_2,trkHdrs_2,trkCach_2
             188E : 40 1F             
(1) 4482/    1890 :                     ; 	dw trkBuff_3,trkBlks_3,trkHdrs_3,trkCach_3
(1) 4483/    1890 :                     nikona_BuffList_e:
(1) 4484/    1890 : FF FF               	dw -1	; ENDOFLIST
(1) 4485/    1892 :                     
(1) 4486/    1892 :                     ; ====================================================================
(1) 4487/    1892 :                     ; ----------------------------------------------------------------
(1) 4488/    1892 :                     ; Buffer section
(1) 4489/    1892 :                     ; ----------------------------------------------------------------
(1) 4490/    1892 :                     
(1) 4491/    1892 : 00 00 00 00 00 00   pcmcom:	db 00h,00h,00h,00h,00h,00h,00h,00h	; 0 - Playback bits: %0000PCOK /Pitchbend/keyCut/keyOff/KeyOn
             1898 : 00 00             
(1) 4492/    189A : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 8 - Pitch MSB
             18A0 : 00 00             
(1) 4493/    18A2 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 16 - Pitch LSB
             18A8 : 00 00             
(1) 4494/    18AA : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 24 - Volume
             18B0 : 00 00             
(1) 4495/    18B2 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 32 - Panning %RRRRLLLL
             18B8 : 00 00             
(1) 4496/    18BA : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 40 - LoopEnable bit | 24-bit sample location in Sub-CPU area
             18C0 : 00 00             
(1) 4497/    18C2 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 48
             18C8 : 00 00             
(1) 4498/    18CA : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 56
             18D0 : 00 00             
(1) 4499/    18D2 :                     
(1) 4500/    18D2 : 00 00 00 00 00 00   pwmcom:	db 00h,00h,00h,00h,00h,00h,00h,00h	; 0 - Playback bits: %0000PCOK Pitchbend/keyCut/keyOff/KeyOn
             18D8 : 00 00             
(1) 4501/    18DA : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 8 - Volume | Pitch MSB
             18E0 : 00 00             
(1) 4502/    18E2 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 16 - Pitch LSB
             18E8 : 00 00             
(1) 4503/    18EA : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 24 - Flags+MSB bits of sample %SlLRxxxx Stereo/Loop/Left/Right
             18F0 : 00 00             
(1) 4504/    18F2 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 32 -
             18F8 : 00 00             
(1) 4505/    18FA : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h
             1900 : 00 00             
(1) 4506/    1902 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h
             1908 : 00 00             
(1) 4507/    190A :                     
(1) 4508/    190A : 00 00 00 00         psgcom:	db 00h,00h,00h,00h	;  0 - command 1 = key on, 2 = key off, 4 = stop snd
(1) 4509/    190E : FF FF FF FF         	db -1, -1, -1, -1	;  4 - output level attenuation (%llll.0000, -1 = silent)
(1) 4510/    1912 : 00 00 00 00         	db 00h,00h,00h,00h	;  8 - attack rate (START)
(1) 4511/    1916 : 00 00 00 00         	db 00h,00h,00h,00h	; 12 - decay rate
(1) 4512/    191A : 00 00 00 00         	db 00h,00h,00h,00h	; 16 - sustain level attenuation (MAXIMUM)
(1) 4513/    191E : 00 00 00 00         	db 00h,00h,00h,00h	; 20 - release rate
(1) 4514/    1922 : 00 00 00 00         	db 00h,00h,00h,00h	; 24 - envelope mode 0 = off, 1 = attack, 2 = decay, 3 = sustain
(1) 4515/    1926 : 00 00 00 00         	db 00h,00h,00h,00h	; 28 - freq bottom 4 bits
(1) 4516/    192A : 00 00 00 00         	db 00h,00h,00h,00h	; 32 - freq upper 6 bits
(1) 4517/    192E : 00 00 00 00         	db 00h,00h,00h,00h	; 36 - attack level attenuation
(1) 4518/    1932 : 00 00 00 00         	db 00h,00h,00h,00h	; 40 - flags to indicate hardware should be updated
(1) 4519/    1936 : 00 00 00 00         	db 00h,00h,00h,00h	; 44 - timer for sustain
(1) 4520/    193A : 00 00 00 00         	db 00h,00h,00h,00h	; 48 - MAX Volume
(1) 4521/    193E : 00 00 00 00         	db 00h,00h,00h,00h	; 52 - Vibrato value
(1) 4522/    1942 : 00 00 00 00         	db 00h,00h,00h,00h	; 56 - General timer
(1) 4523/    1946 :                     ; FM instrument storage
(1) 4524/    1946 :                     fmcach_1	ds 28h
(1) 4525/    196E :                     fmcach_2	ds 28h
(1) 4526/    1996 :                     fmcach_3	ds 28h
(1) 4527/    19BE :                     fmcach_4	ds 28h
(1) 4528/    19E6 :                     fmcach_5	ds 28h
(1) 4529/    1A0E :                     fmcach_6	ds 28h
(1) 4530/    1A36 :                     
(1) 4531/    1A36 :                     ; --------------------------------------------------------
(1) 4532/    1A36 :                     ; * USER customizable section *
(1) 4533/    1A36 :                     ;
(1) 4534/    1A36 :                     ; trkCach's MUST BE 00h ALIGNED.
(1) 4535/    1A36 :                     ; --------------------------------------------------------
(1) 4536/    1A36 :                     
(1) 4537/    1A36 :                     trkHdrs_0	ds 8*4			; dw point,rowcntr
(1) 4538/    1A56 :                     trkHdrs_1	ds 8*4
(1) 4539/    1A76 :                     trkHdrs_2	ds 8*4
(1) 4540/    1A96 :                     trkBuff_0	ds trk_ChnIndx+MAX_TRKINDX
(1) 4541/    1AD4 :                     trkBuff_1	ds trk_ChnIndx+MAX_TRKINDX
(1) 4542/    1B12 :                     trkBuff_2	ds trk_ChnIndx+MAX_TRKINDX
(1) 4543/    1B50 :                     trkBlks_0	ds 8
(1) 4544/    1B58 :                     trkBlks_1	ds 8
(1) 4545/    1B60 :                     trkBlks_2	ds 8
(1) 4546/    1B68 :                     
(1) 4547/    1B68 :                     trkListCach	ds 8*3		; per track slot
(1) 4548/    1B80 :                     instListOut	ds 8*3
(1) 4549/    1B98 :                     
(1) 4550/    1B98 :                     ; ====================================================================
(1) 4551/    1B98 :                     ; ----------------------------------------------------------------
(1) 4552/    1B98 :                     ; Special aligned buffers
(1) 4553/    1B98 :                     ;
(1) 4554/    1B98 :                     ; Located at 1D00h
(1) 4555/    1B98 :                     ; ----------------------------------------------------------------
(1) 4556/    1B98 :                     
(1) 4557/    1D00 :                     		org 1D00h
(1) 4558/    1D00 :                     dWaveBuff	ds 100h		; WAVE data buffer: 100h bytes, updates every 80h
(1) 4559/    1E00 :                     trkChnls	ds 8*MAX_TRKCHN
(1) 4560/    1F00 :                     trkCach_0	ds MAX_RCACH	; <--
(1) 4561/    1F20 :                     trkCach_1	ds MAX_RCACH
(1) 4562/    1F40 :                     trkCach_2	ds MAX_RCACH
(1) 4563/    1F60 :                     trkCach_3	ds MAX_RCACH
(1) 4564/    1F80 :                     
(1) 4565/    1F80 :                     ; --------------------------------------------------------
(1) 4566/    1F80 :                     
(1) 4567/    1F80 :                     ; last temporals...
(1) 4568/    1F80 : 00                  tickSpSet	db 0		; **
(1) 4569/    1F81 : 00                  tickFlag	db 0		; Tick flag from VBlank
(1) 4570/    1F82 : 00                  tickCnt		db 0		; ** Tick counter (PUT THIS AFTER tickFlag)
(1) 4571/    1F83 : 00                  psgHatMode	db 0		; Current PSGN mode
(1) 4572/    1F84 : 00                  fmSpecial	db 0		; copy of FM3 enable bit
(1) 4573/    1F85 : 00                  commZRead	db 0		; cmd fifo READ pointer (here)
(1) 4574/    1F86 : 00                  trkListPage	db 0
(1) 4575/    1F87 : 00                  marsUpd		db 0		; Flag to request a PWM transfer
(1) 4576/    1F88 : 00                  mcdUpd		db 0		; Flag to request a PCM transfer
(1) 4577/    1F89 : 00 00               wave_Start	dw 0		; START: 68k 24-bit pointer
(1) 4578/    1F8B : 00                  		db 0
(1) 4579/    1F8C : 00 00               wave_Len	dw 0		; LENGTH 24-bit
(1) 4580/    1F8E : 00                  		db 0
(1) 4581/    1F8F : 00 00               wave_Loop	dw 0		; LOOP POINT 24-bit
(1) 4582/    1F91 : 00                  		db 0
(1) 4583/    1F92 : 00 01               wave_Pitch	dw 0100h	; 01.00h
(1) 4584/    1F94 : 00                  wave_Flags	db 0		; WAVE playback flags (%10x: 1 loop / 0 no loop)
(1) 4585/    1F95 : 00                  wave_Priority	db 0
(1) 4586/    1F96 : 00                  currTickBits	db 0		; Current Tick/Subbeat flags (000000BTb B-beat, T-tick)
(1) 4587/    1F97 : 00                  dDacFifoMid	db 0		; WAVE play halfway refill flag (00h/80h)
(1) 4588/    1F98 : 00 00 00            dDacPntr	db 0,0,0	; WAVE play current ROM position
(1) 4589/    1F9B : 00 00 00            dDacCntr	db 0,0,0	; WAVE play length counter
(1) 4590/    1F9E : 00                  x68ksrclsb	db 0		; transferRom temporal LSB
(1) 4591/    1F9F : 00                  x68ksrcmid	db 0		; transferRom temporal MID
(1) 4592/    1FA0 : 00 00               sbeatAcc	dw 0		; Accumulates on each tick to trigger the sub beats
(1) 4593/    1FA2 : D5 00               sbeatPtck	dw 200+13	; Default global subbeats (-32 for PAL)
(1) 4594/    1FA4 :                     headerOut	ds 00Eh		; Temporal storage for 68k pointers
(1) 4595/    1FB2 :                     headerOut_e	ds 2		; reverse readpoint
(1) 4596/    1FB4 :                     sampleHead	ds 006h
(1) 4597/    1FBA :                     
(1) 4598/    1FBA :                     ; --------------------------------------------------------
(1) 4599/    1FBA :                     
(1) 4600/    3594 :                     		dephase
(1) 4601/    3594 :                     		cpu 68000		; [AS] Return to 68k
(1) 4602/    3594 :                     		padding off		; [AS] NO padding
(1) 4603/    3594 :                     		align 2
(1) 4604/    3594 :                     
     283/    3594 :                     Z80_CODE_END:
     287/    3594 :                     
     289/    3594 :                     
     290/    3594 :                     ; ===========================================================================
     291/    3594 :                     ; ----------------------------------------------------------------
     292/    3594 :                     ; DATA section shared on both Cartridge or Disc
     293/    3594 :                     ; ----------------------------------------------------------------
     294/    3594 :                     
     295/    3594 :                     ; --------------------------------------------------------
     296/    3594 :                     ; CD/CD32X ISO header and files
     297/    3594 :                     ; --------------------------------------------------------
     298/    3594 :                     
     314/    3594 :                     
     315/    3594 :                     ; ====================================================================
     316/    3594 :                     ; --------------------------------------------------------
     317/    3594 :                     ; SEGA CD SUB-CPU data
     318/    3594 :                     ; --------------------------------------------------------
     319/    3594 :                     
     332/    3594 :                     
     333/    3594 :                     ; ----------------------------------------------------------------
     334/    3594 :                     ; SH2 code and shared data stored in SDRAM
     335/    3594 :                     ; ----------------------------------------------------------------
     336/    3594 :                     
     342/    3594 :                     MARS_RAMCODE:
     346/    3594 :                     MARS_RAMCODE_E:
     351/    3594 :                     
     352/    3594 :                     ; ====================================================================
     353/    3594 :                     ; --------------------------------------------------------
     354/    3594 :                     ; Screen modes
     355/    3594 :                     ;
     356/    3594 :                     ; These are stored as separate files on DISC
     357/    3594 :                     ;
     358/    3594 :                     ; Usage:
     359/    3594 :                     ; screen_code START_LABEL,END_LABEL,CODE_PATH
     360/    3594 :                     ; --------------------------------------------------------
     361/    3594 :                     
     362/    3594 : (MACRO)              	screen_code Md_Screen00,Md_Screen00_e,"game/screen_0/code.asm"
     362/    3594 : =$3594               MD_SCREEN00 label *
     362/    3594 :                     
     362/    3594 :                     mctopscrn:
     362/    3594 :                     mcscrn_s:
     362/    3594 :                             include "game/screen_0/code.asm";"game/screen_0/code.asm"
(1)    1/    3594 :                     ; ====================================================================
(1)    2/    3594 :                     ; ----------------------------------------------------------------
(1)    3/    3594 :                     ; SCREEN MODE 0
(1)    4/    3594 :                     ; ----------------------------------------------------------------
(1)    5/    3594 :                     
(1)    6/    3594 :                     ; ====================================================================
(1)    7/    3594 :                     ; ------------------------------------------------------
(1)    8/    3594 :                     ; Variables
(1)    9/    3594 :                     ; ------------------------------------------------------
(1)   10/    3594 :                     
(1)   11/    3594 : =$440                setVram_Mikami	equ $0440
(1)   12/    3594 : =$480                setVram_Sisi	equ $0480
(1)   13/    3594 :                     
(1)   14/    3594 :                     ; ====================================================================
(1)   15/    3594 :                     ; ------------------------------------------------------
(1)   16/    3594 :                     ; Structs
(1)   17/    3594 :                     ; ------------------------------------------------------
(1)   18/    3594 :                     
(1)   19/    3594 :                     ; 		strct 0
(1)   20/    3594 :                     ; strc_xpos	ds.w 1
(1)   21/    3594 :                     ; strc_ypos	ds.w 1
(1)   22/    3594 :                     ; 		endstrct
(1)   23/    3594 :                     
(1)   24/    3594 :                     ; ====================================================================
(1)   25/    3594 :                     ; ------------------------------------------------------
(1)   26/    3594 :                     ; This mode's RAM
(1)   27/    3594 :                     ; ------------------------------------------------------
(1)   28/    3594 :                     
(1)   29/    3594 :  (MACRO-2)           			strct RAM_ScrnBuff
(1)   29/    3594 : =$3594               GLBL_LASTPC     set *
(1)   29/FFFFFFFFFFFFE564 :                                     dephase
(1)   29/FFFFFFFFFFFFD204 :                                     phase RAM_SCRNBUFF
(1)   29/FFFFFFFFFFFFD204 : =$FFFFFFFFFFFFD204   GLBL_LASTORG    set *
(1)   30/FFFFFFFFFFFFD204 :                     RAM_CurrPick		ds.w 1
(1)   31/FFFFFFFFFFFFD206 :                     RAM_GemaArg0		ds.w 1
(1)   32/FFFFFFFFFFFFD208 :                     RAM_GemaArg1		ds.w 1
(1)   33/FFFFFFFFFFFFD20A :                     RAM_GemaArg2		ds.w 1
(1)   34/FFFFFFFFFFFFD20C :                     RAM_ChnlLinks		ds.w 26
(1)   35/FFFFFFFFFFFFD240 :                     sizeof_thisbuff		ds.l 0
(1)   36/FFFFFFFFFFFFD244 :  (MACRO-2)           			endstrct
(1)   36/FFFFFFFFFFFFD204 :                                     org GLBL_LASTORG
(1)   36/    3594 :                                     phase GLBL_LASTPC
(1)   37/    3594 :  (MACRO-2)           			erreport "SCREEN BUFFER",sizeof_thisbuff-RAM_ScrnBuff,MAX_ScrnBuff
(1)   38/    3594 :                     
(1)   39/    3594 :                     ; ====================================================================
(1)   40/    3594 :                     ; ------------------------------------------------------
(1)   41/    3594 :                     ; Init
(1)   42/    3594 :                     ; ------------------------------------------------------
(1)   43/    3594 :                     
(1)   44/    3594 : 6100 DF30           		bsr	Mode_Init
(1)   45/    3598 :  (MACRO-2)           		set_dbanks file_mddata_def,pointr_marsdata_def
(1)   46/    3598 :                     
(1)   47/    3598 :                     	; ----------------------------------------------
(1)   48/    3598 :                     	; Load assets
(1)   75/    3598 : 203C 0003 32D0      		move.l	#ART_TEST,d0
(1)   76/    359E : 323C 0020           		move.w	#cell_vram($0001),d1
(1)   77/    35A2 : 343C 8780           		move.w	#ART_TEST_E-ART_TEST,d2
(1)   78/    35A6 : 6100 D374           		bsr	Video_LoadArt
(1)   79/    35AA : 41F8 391E           		lea	(MAP_TEST),a0			; long lea
(1)   80/    35AE : 203C 0001 0000      		move.l	#locate(0,0,1),d0
(1)   81/    35B4 : 223C 0027 001B      		move.l	#map_size(320,224),d1
(1)   82/    35BA : 343C 0001           		move.w	#$0001,d2
(1)   83/    35BE : 6100 D500           		bsr	Video_LoadMap
(1)   85/    35C2 : 41F9 0003 26D0      		lea	(ASCII_FONT).l,a0
(1)   86/    35C8 : 43F9 0000 0500      		lea	(ASCII_PAL).l,a1
(1)   87/    35CE : 6100 D546           		bsr	Video_PrintInit
(1)   88/    35D2 : 203C 0003 BA50      		move.l	#Art_Sisi,d0
(1)   89/    35D8 : 323C 9000           		move.w	#cell_vram(setVram_Sisi),d1
(1)   90/    35DC : 343C 05E0           		move.w	#Art_Sisi_e-Art_Sisi,d2
(1)   91/    35E0 : 6100 D33A           		bsr	Video_LoadArt
(1)   92/    35E4 :                     
(1)   93/    35E4 : 41FA 023A           		lea	PAL_TEST(pc),a0
(1)   94/    35E8 : 7000                		moveq	#0,d0
(1)   95/    35EA : 323C 0010           		move.w	#16,d1
(1)   96/    35EE : 6100 D010           		bsr	Video_FadePal
(1)   97/    35F2 : 41F8 462E           		lea	(objPal_Sisi),a0
(1)   98/    35F6 : 7010                		moveq	#16,d0
(1)   99/    35F8 : 323C 0010           		move.w	#16,d1
(1)  100/    35FC : 6100 D002           		bsr	Video_FadePal
(1)  101/    3600 : 41FA 023A           		lea	str_TesterInit(pc),a0
(1)  102/    3604 : 203C 0000 0101      		move.l	#locate(1,1,0),d0
(1)  103/    360A : 6100 D534           		bsr	Video_Print
(1)  104/    360E :                     ; 		move.l	#Object_Mikami,d0
(1)  105/    360E :                     ; 		moveq	#0,d1
(1)  106/    360E :                     ; 		bsr	Objects_Set
(1)  107/    360E : 203C 0000 37AA      		move.l	#Object_Sisi,d0
(1)  108/    3614 : 6100 D76E           		bsr	Objects_Add
(1)  109/    3618 :                     	; ----------------------------------------------
(1)  110/    3618 : 4278 D206           		clr.w	(RAM_GemaArg0).w
(1)  111/    361C : 4278 D208           		clr.w	(RAM_GemaArg1).w
(1)  112/    3620 : 4278 D20A           		clr.w	(RAM_GemaArg2).w
(1)  113/    3624 : 303C 00E8           		move.w	#200+32,d0
(1)  114/    3628 : 6100 CE62           		bsr	gemaSetBeats
(1)  115/    362C :                     ; 		moveq	#1,d0
(1)  116/    362C :                     ; 		bsr	gemaPlayTrack
(1)  117/    362C :                     	; ----------------------------------------------
(1)  118/    362C : 616A                		bsr	.show_me
(1)  119/    362E :                     ; 		bsr	.steal_vars
(1)  120/    362E : 6100 D70C           		bsr	Objects_Run
(1)  121/    3632 :                     	; ----------------------------------------------
(1)  122/    3632 : 08F9 0006 FFFF      		bset	#bitDispEnbl,(RAM_VdpRegs+1).l		; Enable display
             3638 : BDF7             
(1)  123/    363A : 11FC 0081 BE02      		move.b	#%10000001,(RAM_VdpRegs+$C).w		; H40 + shadow mode
(1)  124/    3640 : 6100 CE8C           		bsr	Video_Update
(1)  125/    3644 : 6100 CF56           		bsr	Video_FadeIn
(1)  126/    3648 :                     
(1)  127/    3648 :                     ; ====================================================================
(1)  128/    3648 :                     ; ------------------------------------------------------
(1)  129/    3648 :                     ; Loop
(1)  130/    3648 :                     ; ------------------------------------------------------
(1)  131/    3648 :                     
(1)  132/    3648 :                     .loop:
(1)  133/    3648 : 6100 DA68           		bsr	System_Render
(1)  134/    364C :                     
(1)  135/    364C :                     ; 		bsr	.steal_vars
(1)  136/    364C : 6100 D6EE           		bsr	Objects_Run
(1)  137/    3650 : 41FA 02C4           		lea	str_Info(pc),a0
(1)  138/    3654 : 203C 0000 1F1A      		move.l	#locate(31,26,0),d0
(1)  139/    365A : 6100 D4E4           		bsr	Video_Print
(1)  140/    365E :                     
(1)  141/    365E :                     	; Controls
(1)  154/    365E :                     
(1)  155/    365E : 4DF8 C004           		lea	(Controller_1).w,a6
(1)  156/    3662 : 4BF8 D204           		lea	(RAM_CurrPick).w,a5
(1)  157/    3666 :                     	; UP/DOWN
(1)  158/    3666 : 3E2E 0004           		move.w	on_press(a6),d7
(1)  159/    366A : 0807 0001           		btst	#bitJoyDown,d7
(1)  160/    366E : 670A                		beq.s	.n_down
(1)  161/    3670 : 0C55 0009           		cmp.w	#9,(a5)		; MAX OPTIONS
(1)  162/    3674 : 6704                		beq.s	.n_down
(1)  163/    3676 : 5255                		addq.w	#1,(a5)
(1)  164/    3678 : 611E                		bsr.s	.show_me
(1)  165/    367A :                     .n_down:
(1)  166/    367A : 3E2E 0004           		move.w	on_press(a6),d7
(1)  167/    367E : 0807 0000           		btst	#bitJoyUp,d7
(1)  168/    3682 : 6708                		beq.s	.n_up
(1)  169/    3684 : 4A55                		tst.w	(a5)
(1)  170/    3686 : 6704                		beq.s	.n_up
(1)  171/    3688 : 5355                		subq.w	#1,(a5)
(1)  172/    368A : 610C                		bsr.s	.show_me
(1)  173/    368C :                     .n_up:
(1)  174/    368C : 3E38 D204           		move.w	(RAM_CurrPick).w,d7
(1)  175/    3690 : E54F                		lsl.w	#2,d7
(1)  176/    3692 : 4EBB 7012           		jsr	.jump_list(pc,d7.w)
(1)  177/    3696 :                     .n_cbtn:
(1)  178/    3696 : 60B0                		bra	.loop
(1)  179/    3698 :                     ; ------------------------------------------------------
(1)  180/    3698 :                     
(1)  181/    3698 :                     .show_me:
(1)  182/    3698 : 41FA 0266           		lea	str_ShowMe(pc),a0
(1)  183/    369C : 203C 0000 1705      		move.l	#locate(23,5,0),d0
(1)  184/    36A2 : 6000 D49C           		bra	Video_Print
(1)  185/    36A6 :                     
(1)  186/    36A6 :                     ; ------------------------------------------------------
(1)  187/    36A6 :                     
(1)  188/    36A6 :                     .jump_list:
(1)  189/    36A6 : 6000 001E           		bra.w	.nothing
(1)  190/    36AA : 6000 002C           		bra.w	.option_1
(1)  191/    36AE : 6000 0092           		bra.w	.option_2
(1)  192/    36B2 : 6000 0012           		bra.w	.nothing
(1)  193/    36B6 : 6000 000E           		bra.w	.nothing
(1)  194/    36BA : 6000 000A           		bra.w	.nothing
(1)  195/    36BE : 6000 0006           		bra.w	.nothing
(1)  196/    36C2 : 6000 0002           		bra.w	.nothing
(1)  197/    36C6 :                     
(1)  198/    36C6 :                     ; ------------------------------------------------------
(1)  199/    36C6 :                     ; OPTION 0
(1)  200/    36C6 :                     ; ------------------------------------------------------
(1)  201/    36C6 :                     
(1)  202/    36C6 :                     .nothing:
(1)  203/    36C6 : 3E2E 0004           		move.w	on_press(a6),d7
(1)  204/    36CA : 0807 0007           		btst	#bitJoyStart,d7
(1)  205/    36CE : 6706                		beq.s	.no_press
(1)  206/    36D0 : 61C6                		bsr.s	.show_me
(1)  207/    36D2 : 6000 CD54           		bra	gemaTest
(1)  208/    36D6 :                     .no_press:
(1)  209/    36D6 : 4E75                		rts
(1)  210/    36D8 :                     
(1)  211/    36D8 :                     ; ------------------------------------------------------
(1)  212/    36D8 :                     ; OPTION 1
(1)  213/    36D8 :                     ; ------------------------------------------------------
(1)  214/    36D8 :                     
(1)  215/    36D8 :                     .option_1:
(1)  216/    36D8 : 4BF8 D206           		lea	(RAM_GemaArg0).w,a5
(1)  217/    36DC : 3E2E 0004           		move.w	on_press(a6),d7
(1)  218/    36E0 : 0807 0007           		btst	#bitJoyStart,d7
(1)  219/    36E4 : 671E                		beq.s	.option1_args
(1)  220/    36E6 : 301D                		move.w	(a5)+,d0
(1)  221/    36E8 : 321D                		move.w	(a5)+,d1
(1)  222/    36EA : 341D                		move.w	(a5)+,d2
(1)  223/    36EC : 6100 CD60           		bsr	gemaPlayTrack
(1)  224/    36F0 : 3038 D206           		move.w	(RAM_GemaArg0).w,d0
(1)  225/    36F4 : 3200                		move.w	d0,d1
(1)  226/    36F6 : D241                		add.w	d1,d1
(1)  227/    36F8 : 41FA 0064           		lea	.extnal_beats(pc),a0
(1)  228/    36FC : 3030 1000           		move.w	(a0,d1.w),d0
(1)  229/    3700 : 6000 CD8A           		bra	gemaSetBeats
(1)  230/    3704 :                     ; 		bra.s	.show_me
(1)  231/    3704 :                     .option1_args:
(1)  232/    3704 : 3E2E 0002           		move.w	on_hold(a6),d7
(1)  233/    3708 : 3C07                		move.w	d7,d6
(1)  234/    370A : 0246 0070           		andi.w	#JoyA+JoyB+JoyC,d6
(1)  235/    370E : 67C6                		beq.s	.no_press
(1)  236/    3710 : 0807 0004           		btst	#bitJoyB,d7
(1)  237/    3714 : 6704                		beq.s	.d2_opt
(1)  238/    3716 : DAFC 0002           		adda	#2,a5
(1)  239/    371A :                     .d2_opt:
(1)  240/    371A : 0807 0005           		btst	#bitJoyC,d7
(1)  241/    371E : 6704                		beq.s	.d3_opt
(1)  242/    3720 : DAFC 0004           		adda	#4,a5
(1)  243/    3724 :                     .d3_opt:
(1)  244/    3724 : 3E2E 0004           		move.w	on_press(a6),d7
(1)  245/    3728 : 0807 0003           		btst	#bitJoyRight,d7
(1)  246/    372C : 6706                		beq.s	.op1_right
(1)  247/    372E : 5255                		addq.w	#1,(a5)
(1)  248/    3730 : 6000 FF66           		bra	.show_me
(1)  249/    3734 :                     .op1_right:
(1)  250/    3734 : 0807 0002           		btst	#bitJoyLeft,d7
(1)  251/    3738 : 6706                		beq.s	.op1_left
(1)  252/    373A : 5355                		subq.w	#1,(a5)
(1)  253/    373C : 6000 FF5A           		bra	.show_me
(1)  254/    3740 :                     .op1_left:
(1)  255/    3740 : 4E75                		rts
(1)  256/    3742 :                     
(1)  257/    3742 :                     ; ------------------------------------------------------
(1)  258/    3742 :                     ; OPTION 2
(1)  259/    3742 :                     ; ------------------------------------------------------
(1)  260/    3742 :                     
(1)  261/    3742 :                     .option_2:
(1)  262/    3742 : 4BF8 D206           		lea	(RAM_GemaArg0).w,a5
(1)  263/    3746 : 3E2E 0004           		move.w	on_press(a6),d7
(1)  264/    374A : 0807 0007           		btst	#bitJoyStart,d7
(1)  265/    374E : 67B4                		beq.s	.option1_args
(1)  266/    3750 : 301D                		move.w	(a5)+,d0
(1)  267/    3752 : 321D                		move.w	(a5)+,d1
(1)  268/    3754 : 6000 CD1A           		bra	gemaStopTrack
(1)  269/    3758 : 6000 FF3E           		bra	.show_me
(1)  270/    375C :                     
(1)  271/    375C :                     ; ------------------------------------------------------
(1)  272/    375C :                     ; OPTION 3
(1)  273/    375C :                     ; ------------------------------------------------------
(1)  274/    375C :                     
(1)  275/    375C :                     .option_3:
(1)  276/    375C : 4E75                		rts
(1)  277/    375E :                     
(1)  278/    375E :                     ; ------------------------------------------------------
(1)  279/    375E :                     ; CUSTOM BEATS FOR EACH TRACK
(1)  280/    375E :                     ; ------------------------------------------------------
(1)  281/    375E :                     
(1)  282/    375E :                     .extnal_beats:
(1)  283/    375E : 00DC                	dc.w 200+20
(1)  284/    3760 : 00E8                	dc.w 200+32
(1)  285/    3762 : 00E8                	dc.w 200+32
(1)  286/    3764 : 00E8                	dc.w 200+32
(1)  287/    3766 : 00E8                	dc.w 200+32
(1)  288/    3768 : 00CC                	dc.w 200+4
(1)  289/    376A : 00E8                	dc.w 200+32
(1)  290/    376C : 00E8                	dc.w 200+32
(1)  291/    376E : 00E8                	dc.w 200+32
(1)  292/    3770 : 00E8                	dc.w 200+32
(1)  293/    3772 : 00E8                	dc.w 200+32
(1)  294/    3774 : 00E8                	dc.w 200+32
(1)  295/    3776 : 00E8                	dc.w 200+32
(1)  296/    3778 : 00E8                	dc.w 200+32
(1)  297/    377A : 00E8                	dc.w 200+32
(1)  298/    377C : 00E8                	dc.w 200+32
(1)  299/    377E : 00E8                	dc.w 200+32
(1)  300/    3780 : 00E8                	dc.w 200+32
(1)  301/    3782 : 00E8                	dc.w 200+32
(1)  302/    3784 : 00E8                	dc.w 200+32
(1)  303/    3786 : 00E8                	dc.w 200+32
(1)  304/    3788 : 00E8                	dc.w 200+32
(1)  305/    378A :                     
(1)  306/    378A :                     ; ====================================================================
(1)  307/    378A :                     ; ------------------------------------------------------
(1)  308/    378A :                     ; DATA assets locations for 68K and SH2
(1)  309/    378A :                     ; ------------------------------------------------------
(1)  310/    378A :                     
(1)  311/    378A :                     file_mddata_def:
(1)  312/    378A : 4441 5441 424E      		dc.b "DATABNKD.BIN",0		; CD Filename
             3790 : 4B44 2E42 494E 00 
(1)  313/    3797 :                     		align 2
(1)  314/    3798 :                     
(1)  315/    3798 :                     pointr_marsdata_def:
(1)  316/    3798 : 0002 0ECE           		dc.l MARSDATA_DEFAULT		; 32X Cartridge point
(1)  317/    379C : 4D41 5253 445F      		dc.b "MARSD_00.BIN",0		; CD Filename
             37A2 : 3030 2E42 494E 00 
(1)  318/    37A9 :                     		align 2
(1)  319/    37AA :                     
(1)  320/    37AA :                     ; ====================================================================
(1)  321/    37AA :                     ; ------------------------------------------------------
(1)  322/    37AA :                     ; Objects
(1)  323/    37AA :                     ; ------------------------------------------------------
(1)  324/    37AA :                     
(1)  325/    37AA :                     ; ; --------------------------------------------------
(1)  326/    37AA :                     ; ; Mikami
(1)  327/    37AA :                     ; ; --------------------------------------------------
(1)  328/    37AA :                     ;
(1)  329/    37AA :                     ; Object_Mikami:
(1)  330/    37AA :                     ; 		moveq	#0,d0
(1)  331/    37AA :                     ; 		move.b	obj_index(a6),d0
(1)  332/    37AA :                     ; 		add.w	d0,d0
(1)  333/    37AA :                     ; 		move.w	.list(pc,d0.w),d1
(1)  334/    37AA :                     ; 		jmp	.list(pc,d1.w)
(1)  335/    37AA :                     ; ; ----------------------------------------------
(1)  336/    37AA :                     ; .list:		dc.w .init-.list
(1)  337/    37AA :                     ; 		dc.w .main-.list
(1)  338/    37AA :                     ; ; ----------------------------------------------
(1)  339/    37AA :                     ; .init:
(1)  340/    37AA :                     ; 		move.b	#1,obj_index(a6)
(1)  341/    37AA :                     ; 		move.l	#objMap_Mikami,obj_map(a6)
(1)  342/    37AA :                     ; 		move.l	#objDma_Mikami,obj_dma(a6)
(1)  343/    37AA :                     ; 		move.w	#setVram_Mikami|$2000,obj_vram(a6)
(1)  344/    37AA :                     ; 		bclr	#bitobj_Mars,obj_set(a6)	; Genesis object
(1)  345/    37AA :                     ; 		move.w	#(320/2)+48,obj_x(a6)
(1)  346/    37AA :                     ; 		move.w	#(224/2)+64,obj_y(a6)
(1)  347/    37AA :                     ; 		clr.w	obj_frame(a6)
(1)  348/    37AA :                     ; 		bsr	object_AnimReset
(1)  349/    37AA :                     ; 		bset	#0,obj_status(a6)
(1)  350/    37AA :                     ; 		bset	#bitobj_flipH,obj_set(a6)
(1)  351/    37AA :                     ;
(1)  352/    37AA :                     ; ; ----------------------------------------------
(1)  353/    37AA :                     ; .main:
(1)  354/    37AA :                     ; 		lea	(Controller_2),a3
(1)  355/    37AA :                     ; 		btst	#0,obj_status(a6)
(1)  356/    37AA :                     ; 		beq.s	.no_fallspd
(1)  357/    37AA :                     ; 		add.w	#$40,obj_y_spd(a6)
(1)  358/    37AA :                     ; .no_fallspd:
(1)  359/    37AA :                     ;
(1)  360/    37AA :                     ; ; .fake_col_c:
(1)  361/    37AA :                     ; 		move.w	on_press(a3),d7
(1)  362/    37AA :                     ; 		btst	#bitJoyC,d7
(1)  363/    37AA :                     ; 		beq.s	.fake_jump
(1)  364/    37AA :                     ; 		btst	#0,obj_status(a6)
(1)  365/    37AA :                     ; 		bne.s	.fake_jump
(1)  366/    37AA :                     ; 		move.w	#-$500,obj_y_spd(a6)
(1)  367/    37AA :                     ; 		move.b	#2,obj_anim_id(a6)
(1)  368/    37AA :                     ; 		bset	#0,obj_status(a6)
(1)  369/    37AA :                     ;
(1)  370/    37AA :                     ; 		moveq	#$0F,d0
(1)  371/    37AA :                     ; 		moveq	#1,d1
(1)  372/    37AA :                     ; 		bsr	gemaPlayFromBlk
(1)  373/    37AA :                     ;
(1)  374/    37AA :                     ; .fake_jump:
(1)  375/    37AA :                     ; 		move.w	on_press(a3),d7
(1)  376/    37AA :                     ; 		btst	#bitJoyB,d7
(1)  377/    37AA :                     ; 		beq.s	.no_slash
(1)  378/    37AA :                     ; 		tst.w	obj_y_spd(a6)
(1)  379/    37AA :                     ; 		bne.s	.no_slash
(1)  380/    37AA :                     ; 		clr.w	obj_anim_indx(a6)
(1)  381/    37AA :                     ; 		move.b	#4,obj_anim_id(a6)
(1)  382/    37AA :                     ; 		move.w	#$10,obj_ram+2(a6)
(1)  383/    37AA :                     ;
(1)  384/    37AA :                     ; 		moveq	#$0F,d0
(1)  385/    37AA :                     ; 		moveq	#0,d1
(1)  386/    37AA :                     ; 		bsr	gemaPlayFromBlk
(1)  387/    37AA :                     ;
(1)  388/    37AA :                     ; .no_slash:
(1)  389/    37AA :                     ; 		clr.w	obj_x_spd(a6)
(1)  390/    37AA :                     ;
(1)  391/    37AA :                     ; 		moveq	#0,d0
(1)  392/    37AA :                     ; 		moveq	#0,d1
(1)  393/    37AA :                     ; 		move.w	on_hold(a3),d7
(1)  394/    37AA :                     ; 		move.w	d7,d6
(1)  395/    37AA :                     ; 		andi.w	#JoyLeft+JoyRight,d6
(1)  396/    37AA :                     ; 		beq.s	.move_mika
(1)  397/    37AA :                     ; 		clr.w	obj_ram+2(a6)
(1)  398/    37AA :                     ; 		move.w	#$180,d6
(1)  399/    37AA :                     ; 		btst	#bitJoyRight,d7
(1)  400/    37AA :                     ; 		beq.s	.no_l
(1)  401/    37AA :                     ; 		move.w	d6,obj_x_spd(a6)
(1)  402/    37AA :                     ; .no_l
(1)  403/    37AA :                     ; 		neg.w	d6
(1)  404/    37AA :                     ; 		btst	#bitJoyLeft,d7
(1)  405/    37AA :                     ; 		beq.s	.move_mika
(1)  406/    37AA :                     ; 		move.w	d6,obj_x_spd(a6)
(1)  407/    37AA :                     ; .move_mika:
(1)  408/    37AA :                     ;
(1)  409/    37AA :                     ;
(1)  410/    37AA :                     ; 		moveq	#0,d6
(1)  411/    37AA :                     ; 		tst.w	obj_x_spd(a6)
(1)  412/    37AA :                     ; 		beq.s	.r_spd
(1)  413/    37AA :                     ; 		moveq	#1,d6
(1)  414/    37AA :                     ; 		move.b	obj_set(a6),d7
(1)  415/    37AA :                     ; 		bclr	#bitobj_flipH,d7
(1)  416/    37AA :                     ; 		tst.w	obj_x_spd(a6)
(1)  417/    37AA :                     ; 		bpl.s	.r_flip
(1)  418/    37AA :                     ; 		bset	#bitobj_flipH,d7
(1)  419/    37AA :                     ; .r_flip:
(1)  420/    37AA :                     ; 		move.b	d7,obj_set(a6)
(1)  421/    37AA :                     ; .r_spd:
(1)  422/    37AA :                     ;
(1)  423/    37AA :                     ; 		tst.w	obj_ram+2(a6)
(1)  424/    37AA :                     ; 		beq.s	.free_anim
(1)  425/    37AA :                     ; 		subi.w	#1,obj_ram+2(a6)
(1)  426/    37AA :                     ; 		bne.s	.no_anim
(1)  427/    37AA :                     ; .free_anim:
(1)  428/    37AA :                     ; 		btst	#0,obj_status(a6)
(1)  429/    37AA :                     ; 		bne.s	.no_anim
(1)  430/    37AA :                     ; 		tst.w	obj_y_spd(a6)
(1)  431/    37AA :                     ; 		bmi.s	.is_jumpin
(1)  432/    37AA :                     ; 		move.b	d6,obj_anim_id(a6)
(1)  433/    37AA :                     ; .is_jumpin:
(1)  434/    37AA :                     ; 		tst.w	obj_y_spd(a6)
(1)  435/    37AA :                     ; 		beq.s	.no_anim
(1)  436/    37AA :                     ; 		move.b	#3,obj_anim_id(a6)
(1)  437/    37AA :                     ; .no_anim:
(1)  438/    37AA :                     ; 		bsr	object_Speed
(1)  439/    37AA :                     ;
(1)  440/    37AA :                     ; 		move.w	#(224-16)-32,d7
(1)  441/    37AA :                     ; 		move.w	obj_y(a6),d0
(1)  442/    37AA :                     ; 		cmp.w	d7,d0
(1)  443/    37AA :                     ; 		blt.s	.fake_col
(1)  444/    37AA :                     ; 		clr.w	obj_y_spd(a6)
(1)  445/    37AA :                     ; 		andi.w	#-$10,obj_y(a6)
(1)  446/    37AA :                     ; 		bclr	#0,obj_status(a6)
(1)  447/    37AA :                     ; .fake_col:
(1)  448/    37AA :                     ;
(1)  449/    37AA :                     ; ; 		move.w	(Controller_2+on_press),d7
(1)  450/    37AA :                     ; ; 		btst	#bitClickM,d7
(1)  451/    37AA :                     ; ; 		beq.s	.no_reset
(1)  452/    37AA :                     ; ; 		move.w	#320/2,obj_x(a6)
(1)  453/    37AA :                     ; ; 		move.w	#224/2,obj_y(a6)
(1)  454/    37AA :                     ; ; .no_reset:
(1)  455/    37AA :                     ; 		lea	.anim_data(pc),a0
(1)  456/    37AA :                     ; 		bsr	object_Animate
(1)  457/    37AA :                     ; 		bra	object_Display
(1)  458/    37AA :                     ;
(1)  459/    37AA :                     ; ; ----------------------------------------------
(1)  460/    37AA :                     ;
(1)  461/    37AA :                     ; .anim_data:
(1)  462/    37AA :                     ; 		dc.w .anim_stand-.anim_data
(1)  463/    37AA :                     ; 		dc.w .anim_move-.anim_data
(1)  464/    37AA :                     ; 		dc.w .anim_jump-.anim_data
(1)  465/    37AA :                     ; 		dc.w .anim_fall-.anim_data
(1)  466/    37AA :                     ; 		dc.w .anim_slash-.anim_data
(1)  467/    37AA :                     ; .anim_stand:
(1)  468/    37AA :                     ; 		dc.w 6
(1)  469/    37AA :                     ; 		dc.w 0,-1
(1)  470/    37AA :                     ; 		align 2
(1)  471/    37AA :                     ; .anim_move:
(1)  472/    37AA :                     ; 		dc.w 5
(1)  473/    37AA :                     ; 		dc.w 2,3,4,5,6,7,8,-3,1
(1)  474/    37AA :                     ; 		align 2
(1)  475/    37AA :                     ; .anim_jump:
(1)  476/    37AA :                     ; 		dc.w 5
(1)  477/    37AA :                     ; 		dc.w 10,11,12,-3,2
(1)  478/    37AA :                     ; 		align 2
(1)  479/    37AA :                     ; .anim_fall:
(1)  480/    37AA :                     ; 		dc.w 5
(1)  481/    37AA :                     ; 		dc.w 11,12,-3,1
(1)  482/    37AA :                     ; 		align 2
(1)  483/    37AA :                     ; .anim_slash:
(1)  484/    37AA :                     ; 		dc.w 1
(1)  485/    37AA :                     ; 		dc.w 14,15,16,17,-2
(1)  486/    37AA :                     ; 		align 2
(1)  487/    37AA :                     ;
(1)  488/    37AA :                     ; --------------------------------------------------
(1)  489/    37AA :                     ; Sisi
(1)  490/    37AA :                     ; --------------------------------------------------
(1)  491/    37AA :                     
(1)  492/    37AA :                     Object_Sisi:
(1)  493/    37AA : 7000                		moveq	#0,d0
(1)  494/    37AC : 102E 0021           		move.b	obj_index(a6),d0
(1)  495/    37B0 : D040                		add.w	d0,d0
(1)  496/    37B2 : 323B 0006           		move.w	.list(pc,d0.w),d1
(1)  497/    37B6 : 4EFB 1002           		jmp	.list(pc,d1.w)
(1)  498/    37BA :                     ; ----------------------------------------------
(1)  499/    37BA : 0004                .list:		dc.w .init-.list
(1)  500/    37BC : 002E                		dc.w .main-.list
(1)  501/    37BE :                     ; ----------------------------------------------
(1)  502/    37BE :                     .init:
(1)  503/    37BE : 1D7C 0001 0021      		move.b	#1,obj_index(a6)
(1)  504/    37C4 : 2D7C 0000 464E      		move.l	#objMap_Sisi,obj_map(a6)
             37CA : 000C             
(1)  505/    37CC : 2D7C 0000 0000      		move.l	#0,obj_dma(a6)
             37D2 : 0010             
(1)  506/    37D4 : 3D7C 2480 0014      		move.w	#setVram_Sisi|$2000,obj_vram(a6)
(1)  507/    37DA : 08AE 0007 0022      		bclr	#bitobj_Mars,obj_set(a6)	; Genesis object
(1)  508/    37E0 :                     ; 		move.w	#320/2,obj_x(a6)
(1)  509/    37E0 :                     ; 		move.w	#224/2,obj_y(a6)
(1)  510/    37E0 : 426E 001E           		clr.w	obj_frame(a6)
(1)  511/    37E4 : 6100 D820           		bsr	object_AnimReset
(1)  512/    37E8 :                     
(1)  513/    37E8 :                     ; ----------------------------------------------
(1)  514/    37E8 :                     .main:
(1)  515/    37E8 :                     ; 		move.w	obj_ram(a6),d0
(1)  516/    37E8 :                     ; 		move.w	obj_ram+2(a6),d1
(1)  517/    37E8 :                     
(1)  518/    37E8 :                     
(1)  519/    37E8 : 7000                		moveq	#0,d0
(1)  520/    37EA :                     
(1)  521/    37EA : 3238 D204           		move.w	(RAM_CurrPick).w,d1
(1)  522/    37EE : E749                		lsl.w	#3,d1
(1)  523/    37F0 :                     
(1)  524/    37F0 : 0640 0018           		addi.w	#$18,d0
(1)  525/    37F4 : 0641 0020           		addi.w	#$20,d1
(1)  526/    37F8 : 3D40 0004           		move.w	d0,obj_x(a6)
(1)  527/    37FC : 3D41 0008           		move.w	d1,obj_y(a6)
(1)  528/    3800 :                     
(1)  529/    3800 :                     ; 		lea	(RAM_Objects),a0
(1)  530/    3800 :                     ; 		cmp.l	#Object_Mikami,obj_code(a0)
(1)  531/    3800 :                     ; 		bne.s	.dont_link
(1)  532/    3800 :                     ; 		move.w	obj_ram+2(a6),d7
(1)  533/    3800 :                     ; 		cmp.w	#24<<1,d7
(1)  534/    3800 :                     ; 		bge.s	.dont_incr
(1)  535/    3800 :                     ; 		add.w	#2,d7
(1)  536/    3800 :                     ; .dont_incr:
(1)  537/    3800 :                     ; 		move.w	d7,obj_ram+2(a6)
(1)  538/    3800 :                     ;
(1)  539/    3800 :                     ; 		move.w	obj_x(a0),d7
(1)  540/    3800 :                     ; 		move.w	obj_y(a0),d6
(1)  541/    3800 :                     ; 		move.w	#24,d5
(1)  542/    3800 :                     ; 		sub.w	d5,d6
(1)  543/    3800 :                     ; 		move.w	obj_ram(a6),d0
(1)  544/    3800 :                     ; 		moveq	#4,d1
(1)  545/    3800 :                     ; 		bsr	System_SineWave
(1)  546/    3800 :                     ; 		asr.w	#8,d2
(1)  547/    3800 :                     ; 		add.w	d2,d6
(1)  548/    3800 :                     ; 		moveq	#5,d1
(1)  549/    3800 :                     ; 		bsr	System_SineWave_Cos
(1)  550/    3800 :                     ; 		asr.w	#8,d2
(1)  551/    3800 :                     ; 		add.w	d2,d7
(1)  552/    3800 :                     ;
(1)  553/    3800 :                     ; 		move.b	obj_set(a6),d0
(1)  554/    3800 :                     ; 		move.b	obj_set(a0),d1
(1)  555/    3800 :                     ; 		eor.w	d1,d0
(1)  556/    3800 :                     ; 		andi.w	#1,d0
(1)  557/    3800 :                     ; 		beq.s	.same_h
(1)  558/    3800 :                     ; 		clr.w	obj_ram+2(a6)
(1)  559/    3800 :                     ; .same_h:
(1)  560/    3800 :                     ; 		move.w	obj_ram+2(a6),d4
(1)  561/    3800 :                     ; 		bclr	#bitobj_flipH,obj_set(a6)
(1)  562/    3800 :                     ; 		btst	#bitobj_flipH,obj_set(a0)
(1)  563/    3800 :                     ; 		beq.s	.dont_flipx
(1)  564/    3800 :                     ; 		neg.w	d4
(1)  565/    3800 :                     ; 		bset	#bitobj_flipH,obj_set(a6)
(1)  566/    3800 :                     ; .dont_flipx:
(1)  567/    3800 :                     ; 		lsr.w	#1,d4
(1)  568/    3800 :                     ; 		add.w	d4,d7
(1)  569/    3800 :                     ; 		move.w	d6,obj_y(a6)
(1)  570/    3800 :                     ; 		move.w	d7,obj_x(a6)
(1)  571/    3800 :                     ; 		add.w	#4,obj_ram(a6)
(1)  572/    3800 :                     
(1)  573/    3800 :                     .dont_link:
(1)  574/    3800 : 41FA 000A           		lea	.anim_data(pc),a0
(1)  575/    3804 : 6100 D774           		bsr	object_Animate
(1)  576/    3808 : 6000 D6D4           		bra	object_Display
(1)  577/    380C :                     
(1)  578/    380C :                     ; ----------------------------------------------
(1)  579/    380C :                     
(1)  580/    380C :                     .anim_data:
(1)  581/    380C : 0008                		dc.w .anim_00-.anim_data
(1)  582/    380E : 0008                		dc.w .anim_00-.anim_data
(1)  583/    3810 : 0008                		dc.w .anim_00-.anim_data
(1)  584/    3812 : 0008                		dc.w .anim_00-.anim_data
(1)  585/    3814 :                     .anim_00:
(1)  586/    3814 : 0008                		dc.w 8
(1)  587/    3816 : 0000 0001 0002      		dc.w 0,1,2,1,-1
             381C : 0001 FFFF          
(1)  588/    3820 :                     		align 2
(1)  589/    3820 :                     ;
(1)  590/    3820 :                     ; ; --------------------------------------------------
(1)  591/    3820 :                     ; ; Ball
(1)  592/    3820 :                     ; ; --------------------------------------------------
(1)  593/    3820 :                     ;
(1)  594/    3820 :                     ; Object_ball:
(1)  595/    3820 :                     ; 		moveq	#0,d0
(1)  596/    3820 :                     ; 		move.b	obj_index(a6),d0
(1)  597/    3820 :                     ; 		add.w	d0,d0
(1)  598/    3820 :                     ; 		move.w	.list(pc,d0.w),d1
(1)  599/    3820 :                     ; 		jmp	.list(pc,d1.w)
(1)  600/    3820 :                     ; ; ----------------------------------------------
(1)  601/    3820 :                     ; .list:		dc.w .init-.list
(1)  602/    3820 :                     ; 		dc.w .main-.list
(1)  603/    3820 :                     ; ; ----------------------------------------------
(1)  604/    3820 :                     ; .init:
(1)  605/    3820 :                     ; 		move.b	#1,obj_index(a6)
(1)  606/    3820 :                     ; 		move.l	#objMap_Sisi,obj_map(a6)
(1)  607/    3820 :                     ; 		move.l	#0,obj_dma(a6)
(1)  608/    3820 :                     ; 		move.w	#setVram_Sisi|$0000,obj_vram(a6)
(1)  609/    3820 :                     ; 		bclr	#bitobj_Mars,obj_set(a6)	; Genesis object
(1)  610/    3820 :                     ; 		move.w	#320/2,obj_x(a6)
(1)  611/    3820 :                     ; 		move.w	#224/2,obj_y(a6)
(1)  612/    3820 :                     ; 		clr.w	obj_frame(a6)
(1)  613/    3820 :                     ; 		bsr	object_AnimReset
(1)  614/    3820 :                     ;
(1)  615/    3820 :                     ; 		move.w	#$180,obj_x_spd(a6)
(1)  616/    3820 :                     ; 		move.w	#$180,obj_y_spd(a6)
(1)  617/    3820 :                     ;
(1)  618/    3820 :                     ; ; ----------------------------------------------
(1)  619/    3820 :                     ; .main:
(1)  620/    3820 :                     ; 		move.w	obj_x(a6),d0
(1)  621/    3820 :                     ; 		move.w	obj_y(a6),d1
(1)  622/    3820 :                     ; 		sub.w	#16,d0
(1)  623/    3820 :                     ; 		sub.w	#16,d1
(1)  624/    3820 :                     ; 		move.w	#320-32,d2
(1)  625/    3820 :                     ; 		move.w	#(224-16)-32,d3
(1)  626/    3820 :                     ;
(1)  627/    3820 :                     ; 		tst.w	d1
(1)  628/    3820 :                     ; 		bpl.s	.on_scrn_yu
(1)  629/    3820 :                     ; 		neg.w	obj_y_spd(a6)
(1)  630/    3820 :                     ; 		bsr	.playit
(1)  631/    3820 :                     ; .on_scrn_yu:
(1)  632/    3820 :                     ; 		cmp.w	d3,d1
(1)  633/    3820 :                     ; 		blt.s	.on_scrn_yd
(1)  634/    3820 :                     ; 		neg.w	obj_y_spd(a6)
(1)  635/    3820 :                     ; 		bsr	.playit
(1)  636/    3820 :                     ; .on_scrn_yd:
(1)  637/    3820 :                     ;
(1)  638/    3820 :                     ; 		tst.w	d0
(1)  639/    3820 :                     ; 		bpl.s	.on_scrn_xu
(1)  640/    3820 :                     ; 		neg.w	obj_x_spd(a6)
(1)  641/    3820 :                     ; 		bsr.s	.playit
(1)  642/    3820 :                     ; .on_scrn_xu:
(1)  643/    3820 :                     ; 		cmp.w	d2,d0
(1)  644/    3820 :                     ; 		blt.s	.on_scrn_xd
(1)  645/    3820 :                     ; 		neg.w	obj_x_spd(a6)
(1)  646/    3820 :                     ; 		bsr.s	.playit
(1)  647/    3820 :                     ; .on_scrn_xd:
(1)  648/    3820 :                     ;
(1)  649/    3820 :                     ; 		bsr	object_Speed
(1)  650/    3820 :                     ;
(1)  651/    3820 :                     ; 		lea	.anim_data(pc),a0
(1)  652/    3820 :                     ; 		bsr	object_Animate
(1)  653/    3820 :                     ; 		bra	object_Display
(1)  654/    3820 :                     ; .playit:
(1)  655/    3820 :                     ; 		moveq	#$0F,d0
(1)  656/    3820 :                     ; 		moveq	#2,d1
(1)  657/    3820 :                     ; 		bra	gemaPlayFromBlk
(1)  658/    3820 :                     ;
(1)  659/    3820 :                     ; ; ----------------------------------------------
(1)  660/    3820 :                     ;
(1)  661/    3820 :                     ; .anim_data:
(1)  662/    3820 :                     ; 		dc.w .anim_00-.anim_data
(1)  663/    3820 :                     ; 		dc.w .anim_00-.anim_data
(1)  664/    3820 :                     ; 		dc.w .anim_00-.anim_data
(1)  665/    3820 :                     ; 		dc.w .anim_00-.anim_data
(1)  666/    3820 :                     ; .anim_00:
(1)  667/    3820 :                     ; 		dc.w 8
(1)  668/    3820 :                     ; 		dc.w 0,1,2,1,-1
(1)  669/    3820 :                     ; 		align 2
(1)  670/    3820 :                     
(1)  671/    3820 :                     ; ====================================================================
(1)  672/    3820 :                     ; ------------------------------------------------------
(1)  673/    3820 :                     ; Subroutines
(1)  674/    3820 :                     ; ------------------------------------------------------
(1)  675/    3820 :                     
(1)  676/    3820 :                     ; ====================================================================
(1)  677/    3820 :                     ; ------------------------------------------------------
(1)  678/    3820 :                     ; Custom VBlank
(1)  679/    3820 :                     ; ------------------------------------------------------
(1)  680/    3820 :                     
(1)  681/    3820 :                     ; ------------------------------------------------------
(1)  682/    3820 :                     ; Custom HBlank
(1)  683/    3820 :                     ; ------------------------------------------------------
(1)  684/    3820 :                     
(1)  685/    3820 :                     ; ====================================================================
(1)  686/    3820 :                     ; ------------------------------------------------------
(1)  687/    3820 :                     ; Small DATA section
(1)  688/    3820 :                     ; ------------------------------------------------------
(1)  689/    3820 :                     
(1)  690/    3820 :                     PAL_TEST:
(1)  691/    3820 :                     		binclude "game/screen_0/data/maps/md/test/md_pal.bin"
(1)  692/    383C :                     		align 2
(1)  693/    383C :                     
(1)  694/    383C :                     ; str_ShowPsg:	dc.b "\\w \\w \\w \\w",0
(1)  695/    383C :                     ; 		dc.l RAM_ChnlLinks,RAM_ChnlLinks+2,RAM_ChnlLinks+4,RAM_ChnlLinks+6
(1)  696/    383C :                     ; 		align 2
(1)  697/    383C :                     ; str_ShowFm:	dc.b "\\w \\w \\w \\w \\w \\w",0
(1)  698/    383C :                     ; 		dc.l RAM_ChnlLinks+8,RAM_ChnlLinks+10,RAM_ChnlLinks+12
(1)  699/    383C :                     ; 		dc.l RAM_ChnlLinks+14,RAM_ChnlLinks+16,RAM_ChnlLinks+18
(1)  700/    383C :                     ; 		align 2
(1)  701/    383C :                     ; str_ShowPcm:	dc.b "\\w \\w \\w \\w",$0A
(1)  702/    383C :                     ; 		dc.b "\\w \\w \\w \\w",0
(1)  703/    383C :                     ; 		dc.l RAM_ChnlLinks+20,RAM_ChnlLinks+22,RAM_ChnlLinks+24,RAM_ChnlLinks+26
(1)  704/    383C :                     ; 		dc.l RAM_ChnlLinks+28,RAM_ChnlLinks+30,RAM_ChnlLinks+32,RAM_ChnlLinks+34
(1)  705/    383C :                     ; 		align 2
(1)  706/    383C :                     ; str_ShowPwm:	dc.b "\\w \\w \\w \\w",$0A
(1)  707/    383C :                     ; 		dc.b "\\w \\w \\w",0
(1)  708/    383C :                     ; 		dc.l RAM_ChnlLinks+36,RAM_ChnlLinks+38,RAM_ChnlLinks+40,RAM_ChnlLinks+42
(1)  709/    383C :                     ; 		dc.l RAM_ChnlLinks+44,RAM_ChnlLinks+46,RAM_ChnlLinks+48,RAM_ChnlLinks+50
(1)  710/    383C :                     ; 		align 2
(1)  711/    383C :                     
(1)  712/    383C :                     str_TesterInit:
(1)  713/    383C : 4745 4D41 2F4E      		dc.b "GEMA/Nikona player",$0A
             3842 : 696B 6F6E 6120 
             3848 : 706C 6179 6572 0A 
(1)  714/    384F : 2020 2020 2020      		dc.b "                \{DATE} \{TIME}",$0A
             3855 : 2020 2020 2020 
             385B : 2020 2020 3032 
             3861 : 2F32 312F 3230 
             3867 : 3234 2030 363A 
             386D : 3035 3A32 3320 
             3873 : 504D 0A          
(1)  715/    3876 : 0A                  		dc.b $0A
(1)  716/    3877 : 2020 2020 6765      		dc.b "    gemaTest",$0A
             387D : 6D61 5465 7374 0A 
(1)  717/    3884 : 2020 2020 6765      		dc.b "    gemaPlayTrack",$0A
             388A : 6D61 506C 6179 
             3890 : 5472 6163 6B0A    
(1)  718/    3896 : 2020 2020 6765      		dc.b "    gemaStopTrack",$0A
             389C : 6D61 5374 6F70 
             38A2 : 5472 6163 6B0A    
(1)  719/    38A8 : 2020 2020 6765      		dc.b "    gemaFadeOut",$0A
             38AE : 6D61 4661 6465 
             38B4 : 4F75 740A          
(1)  720/    38B8 : 2020 2020 6765      		dc.b "    gemaFadeIn",$0A
             38BE : 6D61 4661 6465 
             38C4 : 496E 0A          
(1)  721/    38C7 : 2020 2020 5445      		dc.b "    TEST 6",$0A
             38CD : 5354 2036 0A       
(1)  722/    38D2 : 2020 2020 5445      		dc.b "    TEST 7",$0A
             38D8 : 5354 2037 0A       
(1)  723/    38DD : 2020 2020 5445      		dc.b "    TEST 8",$0A
             38E3 : 5354 2038 0A       
(1)  724/    38E8 : 2020 2020 5445      		dc.b "    TEST 9",$0A
             38EE : 5354 2039 0A       
(1)  725/    38F3 : 2020 2020 5445      		dc.b "    TEST 10",$0A
             38F9 : 5354 2031 300A    
(1)  726/    38FF : 00                  		dc.b 0
(1)  727/    3900 :                     		align 2
(1)  728/    3900 : 5C77 205C 7720      str_ShowMe:	dc.b "\\w \\w \\w",0
             3906 : 5C77 00          
(1)  729/    3909 : FFFF D206 FFFF      		dc.l RAM_GemaArg0,RAM_GemaArg1,RAM_GemaArg2
             390F : D208 FFFF D20A    
(1)  730/    3915 :                     		align 2
(1)  731/    3916 :                     str_Info:
(1)  732/    3916 : 5C6C 00             		dc.b "\\l",0
(1)  733/    3919 : FFFF BDD4           		dc.l RAM_Framecount
(1)  734/    391D :                     		align 2
(1)  735/    391E :                     ; str_Notes:
(1)  736/    391E :                     ;  dc.b "---",0,"C#0",0,"D-0",0,"D#0",0,"E-0",0,"F-0",0,"F#0",0,"G-0",0,"G#0",0,"A-0",0,"A#0",0,"B-0",0
(1)  737/    391E :                     ;  dc.b "C-1",0,"C#1",0,"D-1",0,"D#1",0,"E-1",0,"F-1",0,"F#1",0,"G-1",0,"G#1",0,"A-1",0,"A#1",0,"B-1",0
(1)  738/    391E :                     ;  dc.b "C-2",0,"C#2",0,"D-2",0,"D#2",0,"E-2",0,"F-2",0,"F#2",0,"G-2",0,"G#2",0,"A-2",0,"A#2",0,"B-2",0
(1)  739/    391E :                     ;  dc.b "C-3",0,"C#3",0,"D-3",0,"D#3",0,"E-3",0,"F-3",0,"F#3",0,"G-3",0,"G#3",0,"A-3",0,"A#3",0,"B-3",0
(1)  740/    391E :                     ;  dc.b "C-4",0,"C#4",0,"D-4",0,"D#4",0,"E-4",0,"F-4",0,"F#4",0,"G-4",0,"G#4",0,"A-4",0,"A#4",0,"B-4",0
(1)  741/    391E :                     ;  dc.b "C-5",0,"C#5",0,"D-5",0,"D#5",0,"E-5",0,"F-5",0,"F#5",0,"G-5",0,"G#5",0,"A-5",0,"A#5",0,"B-5",0
(1)  742/    391E :                     ;  dc.b "C-6",0,"C#6",0,"D-6",0,"D#6",0,"E-6",0,"F-6",0,"F#6",0,"G-6",0,"G#6",0,"A-6",0,"A#6",0,"B-6",0
(1)  743/    391E :                     ;  dc.b "C-7",0,"C#7",0,"D-7",0,"D#7",0,"E-7",0,"F-7",0,"F#7",0,"G-7",0,"G#7",0,"A-7",0,"A#7",0,"B-7",0
(1)  744/    391E :                     ;  dc.b "C-8",0,"C#8",0,"D-8",0,"D#8",0,"E-8",0,"F-8",0,"F#8",0,"G-8",0,"G#8",0,"A-8",0,"A#8",0,"B-8",0
(1)  745/    391E :                     ;  dc.b "C-9",0,"C#9",0,"D-9",0,"D#9",0,"E-9",0,"F-9",0,"F#9",0,"G-9",0,"G#9",0,"A-9",0,"A#9",0,"B-9",0
(1)  746/    391E :                     ;  align 2
(1)  747/    391E :                     ; str_Notes_FM:
(1)  748/    391E :                     ;  dc.b "---",0
(1)  749/    391E :                     ;  dc.b "C-",0,0,"C#",0,0,"D-",0,0,"D#",0,0,"E-",0,0,"F-",0,0
(1)  750/    391E :                     ;  dc.b "F#",0,0,"G-",0,0,"G#",0,0,"A-",0,0,"A#",0,0,"B-",0,0
(1)  751/    391E :                     ;  align 2
(1)  752/    391E :                     ; str_Octv_FM:
(1)  753/    391E :                     ;  dc.b "0",0,"1",0,"2",0,"3",0,"4",0,"5",0,"6",0,"7",0
(1)  754/    391E :                     ;  align 2
(1)  755/    391E :                     
     362/    391E :                     mcscrn_e:
     363/    391E :                     ; 	screen_code Md_Screen01,Md_Screen01_e,"game/screen_1/code.asm"
     364/    391E :                     
     365/    391E :                     ; ====================================================================
     366/    391E :                     ; DATA SECTION
     367/    391E :                     ; ====================================================================
     368/    391E :                     
     369/    391E :                     ; ====================================================================
     370/    391E :                     ; ----------------------------------------------------------------
     371/    391E :                     ; 68K DATA BANKs
     372/    391E :                     ;
     373/    391E :                     ; SEGA CD / CD32X:
     374/    391E :                     ; Stored in WORD-RAM pieces
     375/    391E :                     ; limited to 256KB 2M or 128KB 1M/1M
     376/    391E :                     ; ** WORD-RAM CANNOT BE USED IF USING ASIC STAMPS **
     377/    391E :                     ;
     378/    391E :                     ; SEGA 32X Cartridge:
     379/    391E :                     ; Limited to 1MB bankswitchable.
     380/    391E :                     ; ONLY 4 banks can be used, Bank 0 already uses the
     381/    391E :                     ; first 512KB for the code.
     382/    391E :                     ;
     383/    391E :                     ; For multi-porting keep the data size limited to 256KB.
     384/    391E :                     ; ----------------------------------------------------------------
     385/    391E :                     
     386/    391E :                     ; --------------------------------------------------------
     387/    391E :                     ; DEFAULT BANK
     388/    391E :                     ;
     389/    391E :                     ; CD/CD32X:
     390/    391E :                     ; $200000 256KB (WORD-RAM)
     391/    391E :                     ;
     392/    391E :                     ; 32X:
     393/    391E :                     ; $900000 1MB (Bankswichable area)
     394/    391E :                     ;
     395/    391E :                     ; Usage:
     396/    391E :                     ; data_bkset LABEL_START,OPTION
     397/    391E :                     ; (your includes and bincludes)
     398/    391E :                     ; data_bkend LABEL_START,LABEL_END,used_size
     399/    391E :                     ;
     400/    391E :                     ; OPTION (32X Cartridge ONLY):
     401/    391E :                     ;  0, Normal 32X $900000 bank
     402/    391E :                     ; -1, First 32X $900000 bank
     403/    391E :                     ; * Ignored on other systems.
     404/    391E :                     ; --------------------------------------------------------
     405/    391E :                     
     406/    391E : (MACRO)              	data_bkset MCD_DBANK0,-1
     406/    391E :                     ; MCD_DBANK0:
     406/    391E : =$391E               MCD_DBANK0 label *
     407/    391E :                     mdbank0:
     408/    391E :                     		include "game/screen_0/data_bank.asm"
(1)    1/    391E :                     ; ====================================================================
(1)    2/    391E :                     ; ----------------------------------------------------------------
(1)    3/    391E :                     ; 68K SCREEN MODE DATA
(1)    4/    391E :                     ; for big stuff like maps, level, etc.
(1)    5/    391E :                     ;
(1)    6/    391E :                     ; For Genesis graphics use data_dma.asm
(1)    7/    391E :                     ; and for 32X graphics use data_mgfx.asm
(1)    8/    391E :                     ;
(1)    9/    391E :                     ; 32X 256-COLOR PALETTES GO HERE.
(1)   10/    391E :                     ;
(1)   11/    391E :                     ; Maximum size: $0FFFFF bytes per bank
(1)   12/    391E :                     ; ----------------------------------------------------------------
(1)   13/    391E :                     
(1)   14/    391E :                     ; ----------------------------------------------------------------
(1)   15/    391E :                     ; 32X Screen maps
(1)   16/    391E :                     ; ----------------------------------------------------------------
(1)   17/    391E :                     
(1)   18/    391E :                     MAP_TEST:
(1)   19/    391E :                     		binclude "game/screen_0/data/maps/md/test/md_map.bin"
(1)   20/    41DE :                     		align 2
(1)   21/    41DE :                     MapMars_TEST:
(1)   22/    41DE :                     		binclude "game/screen_0/data/maps/mars/test/data_map.bin"
(1)   23/    440E :                     		align 2
(1)   24/    440E :                     
(1)   25/    440E :                     ; ----------------------------------------------------------------
(1)   26/    440E :                     ; 32X Palettes
(1)   27/    440E :                     ; ----------------------------------------------------------------
(1)   28/    440E :                     
(1)   29/    440E :                     PalMars_TEST:
(1)   30/    440E :                     		binclude "game/screen_0/data/maps/mars/test/data_pal.bin"
(1)   31/    460E :                     		align 2
(1)   32/    460E :                     PalMars_Sabrina:
(1)   33/    460E :                     		binclude "game/screen_0/data/objects/mars/sabrina/sabrina_pal.bin"
(1)   34/    462E :                     		align 2
(1)   35/    462E :                     
(1)   36/    462E :                     ; ----------------------------------------------------------------
(1)   37/    462E :                     ; Object palettes
(1)   38/    462E :                     ; ----------------------------------------------------------------
(1)   39/    462E :                     
(1)   40/    462E :                     objPal_Sisi:
(1)   41/    462E :                     		binclude "game/screen_0/data/objects/md/sisi/sisi_pal.bin"
(1)   42/    464E :                     		align 2
(1)   43/    464E :                     
(1)   44/    464E :                     ; ----------------------------------------------------------------
(1)   45/    464E :                     ; Object maps
(1)   46/    464E :                     ; ----------------------------------------------------------------
(1)   47/    464E :                     
(1)   48/    464E :                     objMap_Sisi:
(1)   49/    464E :                     		binclude "game/screen_0/data/objects/md/sisi/sisi_map.bin"
(1)   50/    46AA :                     		align 2
(1)   51/    46AA :                     
     412/    46AA :                     		include "sound/tracks.asm"		; GEMA: Track data
(1)    1/    46AA :                     ; ================================================================
(1)    2/    46AA :                     ; ------------------------------------------------------------
(1)    3/    46AA :                     ; SOUND DATA SECTION
(1)    4/    46AA :                     ; ------------------------------------------------------------
(1)    5/    46AA :                     
(1)    6/    46AA :                     ; --------------------------------------------
(1)    7/    46AA :                     ; Instrument macros
(1)    8/    46AA :                     ; --------------------------------------------
(1)    9/    46AA :                     
(1)   10/    46AA :                     gInsNull macro
(1)   11/    46AA :                     	dc.b $00,$00,$00,$00
(1)   12/    46AA :                     	dc.b $00,$00,$00,$00
(1)   13/    46AA :                     	endm
(1)   14/    46AA :                     
(1)   15/    46AA :                     ; alv: attack level
(1)   16/    46AA :                     ; atk: attack rate
(1)   17/    46AA :                     ; slv: sustain
(1)   18/    46AA :                     ; dky: decay rate (up)
(1)   19/    46AA :                     ; rrt: release rate (down)
(1)   20/    46AA :                     ; vib: (TODO)
(1)   21/    46AA :                     gInsPsg	macro pitch,alv,atk,slv,dky,rrt,vib
(1)   22/    46AA :                     	dc.b $80,pitch,alv,atk
(1)   23/    46AA :                     	dc.b slv,dky,rrt,vib
(1)   24/    46AA :                     	endm
(1)   25/    46AA :                     
(1)   26/    46AA :                     ; same args as gInsPsg
(1)   27/    46AA :                     ; only one more argument for the noise type:
(1)   28/    46AA :                     ; mode: noise mode
(1)   29/    46AA :                     ;       %tmm
(1)   30/    46AA :                     ;        t  - Bass(0)|Noise(1)
(1)   31/    46AA :                     ;         mm- Clock(0)|Clock/2(1)|Clock/4(2)|Tone3(3)
(1)   32/    46AA :                     ;
(1)   33/    46AA :                     gInsPsgN macro pitch,alv,atk,slv,dky,rrt,vib,mode
(1)   34/    46AA :                     	dc.b $90|mode,pitch,alv,atk
(1)   35/    46AA :                     	dc.b slv,dky,rrt,vib
(1)   36/    46AA :                     	endm
(1)   37/    46AA :                     
(1)   38/    46AA :                     ; 24-bit ROM pointer to FM patch data
(1)   39/    46AA :                     gInsFm macro pitch,fmins
(1)   40/    46AA :                     	dc.b $A0,pitch,((fmins>>16)&$FF),((fmins>>8)&$FF)
(1)   41/    46AA :                     	dc.b fmins&$FF,$00,$00,$00
(1)   42/    46AA :                     	endm
(1)   43/    46AA :                     
(1)   44/    46AA :                     ; Same args as gInsFm, but the last 4 words of the data
(1)   45/    46AA :                     ; are the custom freqs for each operator in this order:
(1)   46/    46AA :                     ; OP1 OP2 OP3 OP4
(1)   47/    46AA :                     ;
(1)   48/    46AA :                     ; Pitch is useless here, set to 0
(1)   49/    46AA :                     gInsFm3	macro pitch,fmins
(1)   50/    46AA :                     	dc.b $B0,pitch,((fmins>>16)&$FF),((fmins>>8)&$FF)
(1)   51/    46AA :                     	dc.b fmins&$FF,$00,$00,$00
(1)   52/    46AA :                     	endm
(1)   53/    46AA :                     
(1)   54/    46AA :                     ; flags: %000L
(1)   55/    46AA :                     ;        L - Loop sample No/Yes
(1)   56/    46AA :                     gInsDac	macro pitch,start,flags
(1)   57/    46AA :                     	dc.b $C0|flags,pitch,((start>>16)&$FF),((start>>8)&$FF)
(1)   58/    46AA :                     	dc.b start&$FF,0,0,0
(1)   59/    46AA :                     	endm
(1)   60/    46AA :                     
(1)   61/    46AA :                     ; flags: %000L
(1)   62/    46AA :                     ;        L - Loop sample No/Yes
(1)   63/    46AA :                     gInsPcm	macro pitch,start,flags
(1)   64/    46AA :                      if MCD|MARSCD
(1)   65/    46AA :                     	dc.b $D0|flags,pitch,((start>>16)&$FF),((start>>8)&$FF)
(1)   66/    46AA :                     	dc.b start&$FF,0,0,0
(1)   67/    46AA :                      else
(1)   68/    46AA :                     	dc.b $00,$00,$00,$00
(1)   69/    46AA :                     	dc.b $00,$00,$00,$00
(1)   70/    46AA :                      endif
(1)   71/    46AA :                     	endm
(1)   72/    46AA :                     
(1)   73/    46AA :                     ; flags: %00SL
(1)   74/    46AA :                     ;        L - Loop sample No/Yes
(1)   75/    46AA :                     ;        S  - Sample data is on STEREO
(1)   76/    46AA :                     gInsPwm	macro pitch,start,flags
(1)   77/    46AA :                      if MARS|MARSCD
(1)   78/    46AA :                     	dc.b $E0|flags,pitch,((start>>24)&$FF),((start>>16)&$FF)
(1)   79/    46AA :                     	dc.b ((start>>8)&$FF),start&$FF,0,0
(1)   80/    46AA :                      else
(1)   81/    46AA :                     	dc.b $00,$00,$00,$00
(1)   82/    46AA :                     	dc.b $00,$00,$00,$00
(1)   83/    46AA :                      endif
(1)   84/    46AA :                     	endm
(1)   85/    46AA :                     
(1)   86/    46AA :                     ; ticks - %gttttttt
(1)   87/    46AA :                     ;   loc - 68k pointer
(1)   88/    46AA :                     ;
(1)   89/    46AA :                     ; t-Ticks
(1)   90/    46AA :                     ; g-Use global tempo
(1)   91/    46AA :                     gemaTrk macro ticks,loc
(1)   92/    46AA :                     	dc.l ((ticks&$FF)<<24)|loc&$FFFFFF
(1)   93/    46AA :                     	endm
(1)   94/    46AA :                     
(1)   95/    46AA :                     ; gemaHead
(1)   96/    46AA :                     ; block point, patt point, ins point
(1)   97/    46AA :                     ; numof_blocks,numof_patts,numof_ins
(1)   98/    46AA :                     gemaHead macro blk,pat,ins,num
(1)   99/    46AA :                     	dc.w num
(1)  100/    46AA :                     	dc.l blk
(1)  101/    46AA :                     	dc.l pat
(1)  102/    46AA :                     	dc.l ins
(1)  103/    46AA :                     	endm
(1)  104/    46AA :                     
(1)  105/    46AA :                     ; gemaTrack macro num,name
(1)  106/    46AA :                     ; 	gemaHead .blk,.pat,.ins,num
(1)  107/    46AA :                     ; .blk:
(1)  108/    46AA :                     ; 	binclude "sound/tracks/"+name+"_blk.bin"
(1)  109/    46AA :                     ; .pat:
(1)  110/    46AA :                     ; 	binclude "sound/tracks/"+name+"_patt.bin"
(1)  111/    46AA :                     ; .ins:
(1)  112/    46AA :                     ; 	endm
(1)  113/    46AA :                     
(1)  114/    46AA :                     ; ================================================================
(1)  115/    46AA :                     ; ------------------------------------------------------------
(1)  116/    46AA :                     ; Nikona MAIN track-list
(1)  117/    46AA :                     ;
(1)  118/    46AA :                     ; gemaTrk ticks+beatsbit*,track_data
(1)  119/    46AA :                     ; Add $80 ($80|ticks) to make the track use global sub-beats
(1)  120/    46AA :                     ;
(1)  121/    46AA :                     ; To use sub-beats call gemaSetBeats command
(1)  122/    46AA :                     ; BEFORE playing your track:
(1)  123/    46AA :                     ; 	move.w	#new_beats,d0
(1)  124/    46AA :                     ; 	bsr	gemaSetBeats
(1)  125/    46AA :                     ; 	move.w	#track_id,d0
(1)  126/    46AA :                     ;	bsr	gemaPlayTrack
(1)  127/    46AA :                     ; ------------------------------------------------------------
(1)  128/    46AA :                     
(1)  129/    46AA :                     	align 2
(1)  130/    46AA :                     Gema_MasterList:
(1)  131/    46AA : (MACRO)              	gemaTrk 6|$80,GemaTrk_MOVEME
(1)  131/    46AA : 8600 5E6D                   dc.l ((6|$80&$FF)<<24)|GEMATRK_MOVEME&$FFFFFF
(1)  132/    46AE : (MACRO)              	gemaTrk 6|$80,GemaTrk_NadieMD
(1)  132/    46AE : 8600 97CC                   dc.l ((6|$80&$FF)<<24)|GEMATRK_NADIEMD&$FFFFFF
(1)  133/    46B2 : (MACRO)              	gemaTrk 6|$80,GemaTrk_NadieMCD
(1)  133/    46B2 : 8600 AABA                   dc.l ((6|$80&$FF)<<24)|GEMATRK_NADIEMCD&$FFFFFF
(1)  134/    46B6 : (MACRO)              	gemaTrk 6|$80,GemaTrk_NadieMARS
(1)  134/    46B6 : 8600 BD68                   dc.l ((6|$80&$FF)<<24)|GEMATRK_NADIEMARS&$FFFFFF
(1)  135/    46BA : (MACRO)              	gemaTrk 7,GemaTrk_Arena1
(1)  135/    46BA : 0700 47C2                   dc.l ((7&$FF)<<24)|GEMATRK_ARENA1&$FFFFFF
(1)  136/    46BE : (MACRO)              	gemaTrk 3|$80,GemaTrk_Crystal
(1)  136/    46BE : 8300 8592                   dc.l ((3|$80&$FF)<<24)|GEMATRK_CRYSTAL&$FFFFFF
(1)  137/    46C2 : (MACRO)              	gemaTrk 3,GemaTrk_Dream
(1)  137/    46C2 : 0300 6E42                   dc.l ((3&$FF)<<24)|GEMATRK_DREAM&$FFFFFF
(1)  138/    46C6 :                     
(1)  139/    46C6 :                     ; ------------------------------------------------------------
(1)  140/    46C6 :                     ; BGM tracks
(1)  141/    46C6 :                     ; ------------------------------------------------------------
(1)  142/    46C6 :                     
(1)  143/    46C6 :                     GemaSfx_All:
(1)  144/    46C6 : (MACRO)              	gemaHead .blk,.pat,.ins,1
(1)  144/    46C6 : 0001                        dc.w 1
(1)  144/    46C8 : 0000 46D4                   dc.l .BLK
(1)  144/    46CC : 0000 46DA                   dc.l .PAT
(1)  144/    46D0 : 0000 479A                   dc.l .INS
(1)  145/    46D4 :                     .blk:
(1)  146/    46D4 :                     	binclude "sound/tracks/sfxall_blk.bin"
(1)  147/    46D9 :                     	align 2
(1)  148/    46DA :                     .pat:
(1)  149/    46DA :                     	binclude "sound/tracks/sfxall_patt.bin"
(1)  150/    4799 :                     	align 2
(1)  151/    479A :                     .ins:
(1)  152/    479A : (MACRO)              	gInsPsgN 0,$00,$00,$00,$00,$00,0,%100
(1)  152/    479A : 9400 0000                   dc.b $90|%100,0,$00,$00
(1)  152/    479E : 0000 0000                   dc.b $00,$00,$00,0
(1)  153/    47A2 : (MACRO)              	gInsPsgN 0,$00,$00,$00,$00,$00,0,%101
(1)  153/    47A2 : 9500 0000                   dc.b $90|%101,0,$00,$00
(1)  153/    47A6 : 0000 0000                   dc.b $00,$00,$00,0
(1)  154/    47AA : (MACRO)              	gInsPsgN 0,$00,$00,$00,$00,$00,0,%110
(1)  154/    47AA : 9600 0000                   dc.b $90|%110,0,$00,$00
(1)  154/    47AE : 0000 0000                   dc.b $00,$00,$00,0
(1)  155/    47B2 : (MACRO)              	gInsFm 0,FmIns_Ding_1
(1)  155/    47B2 : A000 00D4                   dc.b $A0,0,((FMINS_DING_1>>16)&$FF),((FMINS_DING_1>>8)&$FF)
(1)  155/    47B6 : B600 0000                   dc.b FMINS_DING_1&$FF,$00,$00,$00
(1)  156/    47BA : (MACRO)              	gInsFm3 0,FmIns_Fm3_Explosion
(1)  156/    47BA : B000 00D0                   dc.b $B0,0,((FMINS_FM3_EXPLOSION>>16)&$FF),((FMINS_FM3_EXPLOSION>>8)&$FF)
(1)  156/    47BE : 1600 0000                   dc.b FMINS_FM3_EXPLOSION&$FF,$00,$00,$00
(1)  157/    47C2 :                     
(1)  158/    47C2 :                     ; ------------------------------------------------------------
(1)  159/    47C2 :                     
(1)  160/    47C2 :                     GemaTrk_TEST_0:
(1)  161/    47C2 :                     
(1)  162/    47C2 :                     GemaTrk_Arena1:
(1)  163/    47C2 : (MACRO)              	gemaHead shrd_blk,shrd_pat,.ins,5
(1)  163/    47C2 : 0005                        dc.w 5
(1)  163/    47C4 : 0000 4840                   dc.l SHRD_BLK
(1)  163/    47C8 : 0000 484E                   dc.l SHRD_PAT
(1)  163/    47CC : 0000 47D0                   dc.l .INS
(1)  164/    47D0 :                     .ins:
(1)  165/    47D0 : (MACRO)              	gInsPcm -17-6,PcmIns_Arena1_01,0
(1)  165/    47D0 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  165/    47D4 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  166/    47D8 : (MACRO)              	gInsPcm -17-6,PcmIns_Arena1_02,0
(1)  166/    47D8 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  166/    47DC : 0000 0000                   dc.b $00,$00,$00,$00
(1)  167/    47E0 : (MACRO)              	gInsPcm -17-6,PcmIns_Arena1_03,0
(1)  167/    47E0 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  167/    47E4 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  168/    47E8 : (MACRO)              	gInsPcm -17-6,PcmIns_Arena1_04,0
(1)  168/    47E8 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  168/    47EC : 0000 0000                   dc.b $00,$00,$00,$00
(1)  169/    47F0 : (MACRO)              	gInsPcm -17-6,PcmIns_Arena1_05,1
(1)  169/    47F0 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  169/    47F4 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  170/    47F8 : (MACRO)              	gInsPcm -17-6,PcmIns_Arena1_06,0
(1)  170/    47F8 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  170/    47FC : 0000 0000                   dc.b $00,$00,$00,$00
(1)  171/    4800 : (MACRO)              	gInsPcm -17-6,PcmIns_Arena1_07,0
(1)  171/    4800 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  171/    4804 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  172/    4808 : (MACRO)              	gInsPcm -17-6,PcmIns_Arena1_08,0
(1)  172/    4808 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  172/    480C : 0000 0000                   dc.b $00,$00,$00,$00
(1)  173/    4810 : (MACRO)              	gInsPcm -17-6,PcmIns_Arena1_09,0
(1)  173/    4810 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  173/    4814 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  174/    4818 : (MACRO)              	gInsPcm -17-6,PcmIns_Arena1_10,0
(1)  174/    4818 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  174/    481C : 0000 0000                   dc.b $00,$00,$00,$00
(1)  175/    4820 : (MACRO)              	gInsPcm -17-6,PcmIns_Arena1_11,0
(1)  175/    4820 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  175/    4824 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  176/    4828 : (MACRO)              	gInsPcm -17-6,PcmIns_Arena1_12,0
(1)  176/    4828 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  176/    482C : 0000 0000                   dc.b $00,$00,$00,$00
(1)  177/    4830 : (MACRO)              	gInsPcm -17-6,PcmIns_Arena1_13,0
(1)  177/    4830 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  177/    4834 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  178/    4838 : (MACRO)              	gInsPcm -17-6,PcmIns_Arena1_14,0
(1)  178/    4838 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  178/    483C : 0000 0000                   dc.b $00,$00,$00,$00
(1)  179/    4840 :                     shrd_blk:
(1)  180/    4840 :                     	binclude "sound/tracks/arena1_blk.bin"
(1)  181/    484E :                     shrd_pat:
(1)  182/    484E :                     	binclude "sound/tracks/arena1_patt.bin"
(1)  183/    5E6D :                     
(1)  184/    5E6D :                     ; ------------------------------------------------------------
(1)  185/    5E6D :                     
(1)  186/    5E6D :                     GemaTrk_MOVEME:
(1)  187/    5E6D : (MACRO)              	gemaHead .blk,.pat,.ins,13
(1)  187/    5E6D : 000D                        dc.w 13
(1)  187/    5E6F : 0000 5E7B                   dc.l .BLK
(1)  187/    5E73 : 0000 5E92                   dc.l .PAT
(1)  187/    5E77 : 0000 6DAA                   dc.l .INS
(1)  188/    5E7B :                     .blk:
(1)  189/    5E7B :                     	binclude "sound/tracks/moveme_blk.bin"
(1)  190/    5E92 :                     	align 2
(1)  191/    5E92 :                     .pat:
(1)  192/    5E92 :                     	binclude "sound/tracks/moveme_patt.bin"
(1)  193/    6DAA :                     	align 2
(1)  194/    6DAA :                     .ins:
(1)  195/    6DAA : (MACRO)              	gInsPcm -12,PcmIns_MoveMe_Hit,%10
(1)  195/    6DAA : 0000 0000                   dc.b $00,$00,$00,$00
(1)  195/    6DAE : 0000 0000                   dc.b $00,$00,$00,$00
(1)  196/    6DB2 : (MACRO)              	gInsFm 0,FmIns_Bass_Duck
(1)  196/    6DB2 : A000 00D1                   dc.b $A0,0,((FMINS_BASS_DUCK>>16)&$FF),((FMINS_BASS_DUCK>>8)&$FF)
(1)  196/    6DB6 : 9600 0000                   dc.b FMINS_BASS_DUCK&$FF,$00,$00,$00
(1)  197/    6DBA : (MACRO)              	gInsPcm -12,PcmIns_MoveMe_BrassL,%11
(1)  197/    6DBA : 0000 0000                   dc.b $00,$00,$00,$00
(1)  197/    6DBE : 0000 0000                   dc.b $00,$00,$00,$00
(1)  198/    6DC2 : (MACRO)              	gInsFm 0,FmIns_ClosedHat
(1)  198/    6DC2 : A000 00D5                   dc.b $A0,0,((FMINS_CLOSEDHAT>>16)&$FF),((FMINS_CLOSEDHAT>>8)&$FF)
(1)  198/    6DC6 : 7600 0000                   dc.b FMINS_CLOSEDHAT&$FF,$00,$00,$00
(1)  199/    6DCA : (MACRO)              	gInsPsgN 0,$00,$00,$00,$00,$04,0,%110
(1)  199/    6DCA : 9600 0000                   dc.b $90|%110,0,$00,$00
(1)  199/    6DCE : 0000 0400                   dc.b $00,$00,$04,0
(1)  200/    6DD2 : (MACRO)              	gInsFm -12,FmIns_HBeat_tom
(1)  200/    6DD2 : A0F4 00D4                   dc.b $A0,-12,((FMINS_HBEAT_TOM>>16)&$FF),((FMINS_HBEAT_TOM>>8)&$FF)
(1)  200/    6DD6 : F600 0000                   dc.b FMINS_HBEAT_TOM&$FF,$00,$00,$00
(1)  201/    6DDA : (MACRO)              	gInsPcm -12,PcmIns_Snare,%10
(1)  201/    6DDA : 0000 0000                   dc.b $00,$00,$00,$00
(1)  201/    6DDE : 0000 0000                   dc.b $00,$00,$00,$00
(1)  202/    6DE2 : (MACRO)              	gInsPcm -12,PcmIns_Kick,%10		;gInsFm -38,FmIns_DrumKick_gem
(1)  202/    6DE2 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  202/    6DE6 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  203/    6DEA : (MACRO)              	gInsFm -12,FmIns_Trumpet_carnival	;FmIns_Trumpet_2
(1)  203/    6DEA : A0F4 00D3                   dc.b $A0,-12,((FMINS_TRUMPET_CARNIVAL>>16)&$FF),((FMINS_TRUMPET_CARNIVAL>>8)&$FF)
(1)  203/    6DEE : 1600 0000                   dc.b FMINS_TRUMPET_CARNIVAL&$FF,$00,$00,$00
(1)  204/    6DF2 : (MACRO)              	gInsPsg 0,$20,$20,$10,$01,$08,0		;gInsFm -12,FmIns_Ding_Baseball;
(1)  204/    6DF2 : 8000 2020                   dc.b $80,0,$20,$20
(1)  204/    6DF6 : 1001 0800                   dc.b $10,$01,$08,0
(1)  205/    6DFA : (MACRO)              	gInsFm3 0,FmIns_Sp_OpenHat
(1)  205/    6DFA : B000 00D0                   dc.b $B0,0,((FMINS_SP_OPENHAT>>16)&$FF),((FMINS_SP_OPENHAT>>8)&$FF)
(1)  205/    6DFE : 3E00 0000                   dc.b FMINS_SP_OPENHAT&$FF,$00,$00,$00
(1)  206/    6E02 : (MACRO)              	gInsNull;gInsPwm -17,PwmIns_MyTime,%10
(1)  206/    6E02 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  206/    6E06 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  207/    6E0A : (MACRO)              	gInsPsg +12,$20,$10,$10,$0C,$0C,0
(1)  207/    6E0A : 800C 2010                   dc.b $80,+12,$20,$10
(1)  207/    6E0E : 100C 0C00                   dc.b $10,$0C,$0C,0
(1)  208/    6E12 : (MACRO)              	gInsPsg 0,$00,$00,$00,$00,$06,0
(1)  208/    6E12 : 8000 0000                   dc.b $80,0,$00,$00
(1)  208/    6E16 : 0000 0600                   dc.b $00,$00,$06,0
(1)  209/    6E1A : (MACRO)              	gInsPcm -12,PcmIns_MoveMe_BrassR,%11
(1)  209/    6E1A : 0000 0000                   dc.b $00,$00,$00,$00
(1)  209/    6E1E : 0000 0000                   dc.b $00,$00,$00,$00
(1)  210/    6E22 : (MACRO)              	gInsNull
(1)  210/    6E22 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  210/    6E26 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  211/    6E2A : (MACRO)              	gInsNull
(1)  211/    6E2A : 0000 0000                   dc.b $00,$00,$00,$00
(1)  211/    6E2E : 0000 0000                   dc.b $00,$00,$00,$00
(1)  212/    6E32 : (MACRO)              	gInsNull
(1)  212/    6E32 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  212/    6E36 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  213/    6E3A : (MACRO)              	gInsNull
(1)  213/    6E3A : 0000 0000                   dc.b $00,$00,$00,$00
(1)  213/    6E3E : 0000 0000                   dc.b $00,$00,$00,$00
(1)  214/    6E42 :                     
(1)  215/    6E42 :                     ; ------------------------------------------------------------
(1)  216/    6E42 :                     
(1)  217/    6E42 :                     GemaTrk_Dream:
(1)  218/    6E42 : (MACRO)              	gemaHead .blk,.pat,.ins,8
(1)  218/    6E42 : 0008                        dc.w 8
(1)  218/    6E44 : 0000 6E50                   dc.l .BLK
(1)  218/    6E48 : 0000 6E5D                   dc.l .PAT
(1)  218/    6E4C : 0000 851A                   dc.l .INS
(1)  219/    6E50 :                     .blk:
(1)  220/    6E50 :                     	binclude "sound/tracks/dream_blk.bin"
(1)  221/    6E5D :                     .pat:
(1)  222/    6E5D :                     	binclude "sound/tracks/dream_patt.bin"
(1)  223/    851A :                     .ins:
(1)  224/    851A : (MACRO)              	gInsFm 0,FmIns_Hats_closed
(1)  224/    851A : A000 00D5                   dc.b $A0,0,((FMINS_HATS_CLOSED>>16)&$FF),((FMINS_HATS_CLOSED>>8)&$FF)
(1)  224/    851E : 5600 0000                   dc.b FMINS_HATS_CLOSED&$FF,$00,$00,$00
(1)  225/    8522 : (MACRO)              	gInsDac +12,DacIns_Kick_wegot,0
(1)  225/    8522 : C00C 0207                   dc.b $C0|0,+12,((DACINS_KICK_WEGOT>>16)&$FF),((DACINS_KICK_WEGOT>>8)&$FF)
(1)  225/    8526 : 5400 0000                   dc.b DACINS_KICK_WEGOT&$FF,0,0,0
(1)  226/    852A : (MACRO)              	gInsFm -12,FmIns_brass_eur
(1)  226/    852A : A0F4 00D3                   dc.b $A0,-12,((FMINS_BRASS_EUR>>16)&$FF),((FMINS_BRASS_EUR>>8)&$FF)
(1)  226/    852E : 3600 0000                   dc.b FMINS_BRASS_EUR&$FF,$00,$00,$00
(1)  227/    8532 : (MACRO)              	gInsFm -24,FmIns_Trumpet_carnival
(1)  227/    8532 : A0E8 00D3                   dc.b $A0,-24,((FMINS_TRUMPET_CARNIVAL>>16)&$FF),((FMINS_TRUMPET_CARNIVAL>>8)&$FF)
(1)  227/    8536 : 1600 0000                   dc.b FMINS_TRUMPET_CARNIVAL&$FF,$00,$00,$00
(1)  228/    853A : (MACRO)              	gInsPsg  0,$00,$20,$00,$02,$10,0
(1)  228/    853A : 8000 0020                   dc.b $80,0,$00,$20
(1)  228/    853E : 0002 1000                   dc.b $00,$02,$10,0
(1)  229/    8542 : (MACRO)              	gInsPsgN 0,$00,$10,$00,$01,$04,0,%100
(1)  229/    8542 : 9400 0010                   dc.b $90|%100,0,$00,$10
(1)  229/    8546 : 0001 0400                   dc.b $00,$01,$04,0
(1)  230/    854A : (MACRO)              	gInsFm 0,FmIns_Bass_low_1
(1)  230/    854A : A000 00D2                   dc.b $A0,0,((FMINS_BASS_LOW_1>>16)&$FF),((FMINS_BASS_LOW_1>>8)&$FF)
(1)  230/    854E : 3600 0000                   dc.b FMINS_BASS_LOW_1&$FF,$00,$00,$00
(1)  231/    8552 : (MACRO)              	gInsFm 0,FmIns_Hats_1
(1)  231/    8552 : A000 00D5                   dc.b $A0,0,((FMINS_HATS_1>>16)&$FF),((FMINS_HATS_1>>8)&$FF)
(1)  231/    8556 : 3600 0000                   dc.b FMINS_HATS_1&$FF,$00,$00,$00
(1)  232/    855A : (MACRO)              	gInsPsgN 0,$00,$10,$00,$01,$08,0,%101
(1)  232/    855A : 9500 0010                   dc.b $90|%101,0,$00,$10
(1)  232/    855E : 0001 0800                   dc.b $00,$01,$08,0
(1)  233/    8562 : (MACRO)              	gInsNull
(1)  233/    8562 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  233/    8566 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  234/    856A : (MACRO)              	gInsNull
(1)  234/    856A : 0000 0000                   dc.b $00,$00,$00,$00
(1)  234/    856E : 0000 0000                   dc.b $00,$00,$00,$00
(1)  235/    8572 : (MACRO)              	gInsNull
(1)  235/    8572 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  235/    8576 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  236/    857A : (MACRO)              	gInsNull
(1)  236/    857A : 0000 0000                   dc.b $00,$00,$00,$00
(1)  236/    857E : 0000 0000                   dc.b $00,$00,$00,$00
(1)  237/    8582 : (MACRO)              	gInsPsg  0,$40,$00,$00,$00,$00,0
(1)  237/    8582 : 8000 4000                   dc.b $80,0,$40,$00
(1)  237/    8586 : 0000 0000                   dc.b $00,$00,$00,0
(1)  238/    858A : (MACRO)              	gInsFm -12,FmIns_Trumpet_1
(1)  238/    858A : A0F4 00D2                   dc.b $A0,-12,((FMINS_TRUMPET_1>>16)&$FF),((FMINS_TRUMPET_1>>8)&$FF)
(1)  238/    858E : F600 0000                   dc.b FMINS_TRUMPET_1&$FF,$00,$00,$00
(1)  239/    8592 :                     
(1)  240/    8592 :                     ; Ticks: 3-1
(1)  241/    8592 :                     ; TEMPO: 170
(1)  242/    8592 :                     GemaTrk_Crystal:
(1)  243/    8592 : (MACRO)              	gemaHead .blk,.pat,.ins,7
(1)  243/    8592 : 0007                        dc.w 7
(1)  243/    8594 : 0000 85A0                   dc.l .BLK
(1)  243/    8598 : 0000 85A8                   dc.l .PAT
(1)  243/    859C : 0000 979C                   dc.l .INS
(1)  244/    85A0 :                     .blk:
(1)  245/    85A0 :                     	binclude "sound/tracks/crystal_blk.bin"
(1)  246/    85A8 :                     .pat:
(1)  247/    85A8 :                     	binclude "sound/tracks/crystal_patt.bin"
(1)  248/    979C :                     .ins:
(1)  249/    979C : (MACRO)              	gInsFm 0,FmIns_Organ2a
(1)  249/    979C : A000 00CF                   dc.b $A0,0,((FMINS_ORGAN2A>>16)&$FF),((FMINS_ORGAN2A>>8)&$FF)
(1)  249/    97A0 : F600 0000                   dc.b FMINS_ORGAN2A&$FF,$00,$00,$00
(1)  250/    97A4 : (MACRO)              	gInsPsgN 0,$00,$10,$00,$01,$10,0,%100
(1)  250/    97A4 : 9400 0010                   dc.b $90|%100,0,$00,$10
(1)  250/    97A8 : 0001 1000                   dc.b $00,$01,$10,0
(1)  251/    97AC : (MACRO)              	gInsDac 0,DacIns_Kick_wegot,0
(1)  251/    97AC : C000 0207                   dc.b $C0|0,0,((DACINS_KICK_WEGOT>>16)&$FF),((DACINS_KICK_WEGOT>>8)&$FF)
(1)  251/    97B0 : 5400 0000                   dc.b DACINS_KICK_WEGOT&$FF,0,0,0
(1)  252/    97B4 : (MACRO)              	gInsFm3 0,FmIns_Sp_OpenHat
(1)  252/    97B4 : B000 00D0                   dc.b $B0,0,((FMINS_SP_OPENHAT>>16)&$FF),((FMINS_SP_OPENHAT>>8)&$FF)
(1)  252/    97B8 : 3E00 0000                   dc.b FMINS_SP_OPENHAT&$FF,$00,$00,$00
(1)  253/    97BC : (MACRO)              	gInsNull
(1)  253/    97BC : 0000 0000                   dc.b $00,$00,$00,$00
(1)  253/    97C0 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  254/    97C4 : (MACRO)              	gInsFm 0,FmIns_Bass_low_1
(1)  254/    97C4 : A000 00D2                   dc.b $A0,0,((FMINS_BASS_LOW_1>>16)&$FF),((FMINS_BASS_LOW_1>>8)&$FF)
(1)  254/    97C8 : 3600 0000                   dc.b FMINS_BASS_LOW_1&$FF,$00,$00,$00
(1)  255/    97CC :                     
(1)  256/    97CC :                     GemaTrk_NadieMD:
(1)  257/    97CC : (MACRO)              	gemaHead .blk,.patt,.inst,7
(1)  257/    97CC : 0007                        dc.w 7
(1)  257/    97CE : 0000 97DA                   dc.l .BLK
(1)  257/    97D2 : 0000 97E2                   dc.l .PATT
(1)  257/    97D6 : 0000 AA72                   dc.l .INST
(1)  258/    97DA :                     .blk:
(1)  259/    97DA :                     	binclude "sound/tracks/nadie_md_blk.bin"
(1)  260/    97E1 :                     	align 2
(1)  261/    97E2 :                     .patt:
(1)  262/    97E2 :                     	binclude "sound/tracks/nadie_md_patt.bin"
(1)  263/    AA72 :                     	align 2
(1)  264/    AA72 :                     .inst:
(1)  265/    AA72 : (MACRO)              	gInsDac 0,DacIns_Nadie,0
(1)  265/    AA72 : C000 0100                   dc.b $C0|0,0,((DACINS_NADIE>>16)&$FF),((DACINS_NADIE>>8)&$FF)
(1)  265/    AA76 : 0000 0000                   dc.b DACINS_NADIE&$FF,0,0,0
(1)  266/    AA7A : (MACRO)              	gInsFm -36,FmIns_Piano_Aqua
(1)  266/    AA7A : A0DC 00D2                   dc.b $A0,-36,((FMINS_PIANO_AQUA>>16)&$FF),((FMINS_PIANO_AQUA>>8)&$FF)
(1)  266/    AA7E : 9600 0000                   dc.b FMINS_PIANO_AQUA&$FF,$00,$00,$00
(1)  267/    AA82 : (MACRO)              	gInsFm -12,FmIns_HBeat_tom
(1)  267/    AA82 : A0F4 00D4                   dc.b $A0,-12,((FMINS_HBEAT_TOM>>16)&$FF),((FMINS_HBEAT_TOM>>8)&$FF)
(1)  267/    AA86 : F600 0000                   dc.b FMINS_HBEAT_TOM&$FF,$00,$00,$00
(1)  268/    AA8A : (MACRO)              	gInsFm -37,FmIns_DrumKick_gem
(1)  268/    AA8A : A0DB 00D3                   dc.b $A0,-37,((FMINS_DRUMKICK_GEM>>16)&$FF),((FMINS_DRUMKICK_GEM>>8)&$FF)
(1)  268/    AA8E : B600 0000                   dc.b FMINS_DRUMKICK_GEM&$FF,$00,$00,$00
(1)  269/    AA92 : (MACRO)              	gInsPsg 0,$50,$70,$00,$06,$08,0
(1)  269/    AA92 : 8000 5070                   dc.b $80,0,$50,$70
(1)  269/    AA96 : 0006 0800                   dc.b $00,$06,$08,0
(1)  270/    AA9A : (MACRO)              	gInsFm 0,FmIns_Trumpet_1
(1)  270/    AA9A : A000 00D2                   dc.b $A0,0,((FMINS_TRUMPET_1>>16)&$FF),((FMINS_TRUMPET_1>>8)&$FF)
(1)  270/    AA9E : F600 0000                   dc.b FMINS_TRUMPET_1&$FF,$00,$00,$00
(1)  271/    AAA2 : (MACRO)              	gInsNull
(1)  271/    AAA2 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  271/    AAA6 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  272/    AAAA : (MACRO)              	gInsFm3 0,FmIns_Sp_ClosedHat
(1)  272/    AAAA : B000 00D0                   dc.b $B0,0,((FMINS_SP_CLOSEDHAT>>16)&$FF),((FMINS_SP_CLOSEDHAT>>8)&$FF)
(1)  272/    AAAE : 6600 0000                   dc.b FMINS_SP_CLOSEDHAT&$FF,$00,$00,$00
(1)  273/    AAB2 : (MACRO)              	gInsFm3 0,FmIns_Sp_OpenHat
(1)  273/    AAB2 : B000 00D0                   dc.b $B0,0,((FMINS_SP_OPENHAT>>16)&$FF),((FMINS_SP_OPENHAT>>8)&$FF)
(1)  273/    AAB6 : 3E00 0000                   dc.b FMINS_SP_OPENHAT&$FF,$00,$00,$00
(1)  274/    AABA :                     
(1)  275/    AABA :                     GemaTrk_NadieMCD:
(1)  276/    AABA : (MACRO)              	gemaHead .blk,.patt,.inst,11
(1)  276/    AABA : 000B                        dc.w 11
(1)  276/    AABC : 0000 AAC8                   dc.l .BLK
(1)  276/    AAC0 : 0000 AAD0                   dc.l .PATT
(1)  276/    AAC4 : 0000 BD20                   dc.l .INST
(1)  277/    AAC8 :                     .blk:
(1)  278/    AAC8 :                     	binclude "sound/tracks/nadie_mcd_blk.bin"
(1)  279/    AACF :                     	align 2
(1)  280/    AAD0 :                     .patt
(1)  281/    AAD0 :                     	binclude "sound/tracks/nadie_mcd_patt.bin"
(1)  282/    BD20 :                     	align 2
(1)  283/    BD20 :                     .inst:
(1)  284/    BD20 : (MACRO)              	gInsPcm -12,PcmIns_NadieL,%10
(1)  284/    BD20 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  284/    BD24 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  285/    BD28 : (MACRO)              	gInsFm -36,FmIns_Piano_Aqua
(1)  285/    BD28 : A0DC 00D2                   dc.b $A0,-36,((FMINS_PIANO_AQUA>>16)&$FF),((FMINS_PIANO_AQUA>>8)&$FF)
(1)  285/    BD2C : 9600 0000                   dc.b FMINS_PIANO_AQUA&$FF,$00,$00,$00
(1)  286/    BD30 : (MACRO)              	gInsFm -12,FmIns_HBeat_tom
(1)  286/    BD30 : A0F4 00D4                   dc.b $A0,-12,((FMINS_HBEAT_TOM>>16)&$FF),((FMINS_HBEAT_TOM>>8)&$FF)
(1)  286/    BD34 : F600 0000                   dc.b FMINS_HBEAT_TOM&$FF,$00,$00,$00
(1)  287/    BD38 : (MACRO)              	gInsPcm -12-12,PcmIns_PKick,%00
(1)  287/    BD38 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  287/    BD3C : 0000 0000                   dc.b $00,$00,$00,$00
(1)  288/    BD40 : (MACRO)              	gInsPsg 0,$50,$70,$00,$06,$08,0
(1)  288/    BD40 : 8000 5070                   dc.b $80,0,$50,$70
(1)  288/    BD44 : 0006 0800                   dc.b $00,$06,$08,0
(1)  289/    BD48 : (MACRO)              	gInsFm 0,FmIns_Trumpet_1
(1)  289/    BD48 : A000 00D2                   dc.b $A0,0,((FMINS_TRUMPET_1>>16)&$FF),((FMINS_TRUMPET_1>>8)&$FF)
(1)  289/    BD4C : F600 0000                   dc.b FMINS_TRUMPET_1&$FF,$00,$00,$00
(1)  290/    BD50 : (MACRO)              	gInsPcm 0-12,PcmIns_Piano,%00
(1)  290/    BD50 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  290/    BD54 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  291/    BD58 : (MACRO)              	gInsPcm -12-12,PcmIns_PTom,%00
(1)  291/    BD58 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  291/    BD5C : 0000 0000                   dc.b $00,$00,$00,$00
(1)  292/    BD60 : (MACRO)              	gInsPcm -12,PcmIns_NadieR,%10
(1)  292/    BD60 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  292/    BD64 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  293/    BD68 :                     
(1)  294/    BD68 :                     GemaTrk_NadieMARS:
(1)  295/    BD68 : (MACRO)              	gemaHead .blk,.patt,.inst,11
(1)  295/    BD68 : 000B                        dc.w 11
(1)  295/    BD6A : 0000 BD76                   dc.l .BLK
(1)  295/    BD6E : 0000 BD7E                   dc.l .PATT
(1)  295/    BD72 : 0000 CF8E                   dc.l .INST
(1)  296/    BD76 :                     .blk:
(1)  297/    BD76 :                     	binclude "sound/tracks/nadie_blk.bin"
(1)  298/    BD7D :                     	align 2
(1)  299/    BD7E :                     .patt
(1)  300/    BD7E :                     	binclude "sound/tracks/nadie_patt.bin"
(1)  301/    CF8E :                     	align 2
(1)  302/    CF8E :                     .inst:
(1)  303/    CF8E : (MACRO)              	gInsPwm 0,PwmIns_Nadie,%10
(1)  303/    CF8E : 0000 0000                   dc.b $00,$00,$00,$00
(1)  303/    CF92 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  304/    CF96 : (MACRO)              	gInsFm -36,FmIns_Piano_Aqua
(1)  304/    CF96 : A0DC 00D2                   dc.b $A0,-36,((FMINS_PIANO_AQUA>>16)&$FF),((FMINS_PIANO_AQUA>>8)&$FF)
(1)  304/    CF9A : 9600 0000                   dc.b FMINS_PIANO_AQUA&$FF,$00,$00,$00
(1)  305/    CF9E : (MACRO)              	gInsFm -12,FmIns_HBeat_tom
(1)  305/    CF9E : A0F4 00D4                   dc.b $A0,-12,((FMINS_HBEAT_TOM>>16)&$FF),((FMINS_HBEAT_TOM>>8)&$FF)
(1)  305/    CFA2 : F600 0000                   dc.b FMINS_HBEAT_TOM&$FF,$00,$00,$00
(1)  306/    CFA6 : (MACRO)              	gInsPwm -12,PwmIns_PKick,%00
(1)  306/    CFA6 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  306/    CFAA : 0000 0000                   dc.b $00,$00,$00,$00
(1)  307/    CFAE : (MACRO)              	gInsPsg 0,$50,$70,$00,$06,$08,0
(1)  307/    CFAE : 8000 5070                   dc.b $80,0,$50,$70
(1)  307/    CFB2 : 0006 0800                   dc.b $00,$06,$08,0
(1)  308/    CFB6 : (MACRO)              	gInsFm 0,FmIns_Trumpet_1
(1)  308/    CFB6 : A000 00D2                   dc.b $A0,0,((FMINS_TRUMPET_1>>16)&$FF),((FMINS_TRUMPET_1>>8)&$FF)
(1)  308/    CFBA : F600 0000                   dc.b FMINS_TRUMPET_1&$FF,$00,$00,$00
(1)  309/    CFBE : (MACRO)              	gInsPwm 0,PwmIns_Piano,%00
(1)  309/    CFBE : 0000 0000                   dc.b $00,$00,$00,$00
(1)  309/    CFC2 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  310/    CFC6 : (MACRO)              	gInsPwm -12,PwmIns_PTom,%00
(1)  310/    CFC6 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  310/    CFCA : 0000 0000                   dc.b $00,$00,$00,$00
(1)  311/    CFCE : (MACRO)              	gInsNull
(1)  311/    CFCE : 0000 0000                   dc.b $00,$00,$00,$00
(1)  311/    CFD2 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  312/    CFD6 :                     
     413/    CFD6 :                     		include "sound/instr.asm"		; GEMA: FM instruments
(1)    1/    CFD6 :                     ; ====================================================================
(1)    2/    CFD6 :                     ; --------------------------------------------------------
(1)    3/    CFD6 :                     ; GEMA/Nikona FM instruments "patches"
(1)    4/    CFD6 :                     ;
(1)    5/    CFD6 :                     ; Use the included FM_EDITOR.bin ROM to make your
(1)    6/    CFD6 :                     ; own instruments/patches
(1)    7/    CFD6 :                     ; --------------------------------------------------------
(1)    8/    CFD6 :                     
(1)    9/    CFD6 :                     ; FM_EDITOR savestate data is located at:
(1)   10/    CFD6 :                     ; $2478
(1)   11/    CFD6 :                     ;
(1)   12/    CFD6 :                     ; Sizes:
(1)   13/    CFD6 :                     ; Normal FM ins: $20
(1)   14/    CFD6 :                     ; Special FM ins: $28
(1)   15/    CFD6 :                     ;
(1)   16/    CFD6 :                     ; REGISTER FORMAT:
(1)   17/    CFD6 :                     ; dc.b $30,$34,$38,$3C
(1)   18/    CFD6 :                     ; dc.b $40,$44,$48,$4C
(1)   19/    CFD6 :                     ; dc.b $50,$54,$58,$5C
(1)   20/    CFD6 :                     ; dc.b $60,$64,$68,$6C
(1)   21/    CFD6 :                     ; dc.b $70,$74,$78,$7C
(1)   22/    CFD6 :                     ; dc.b $80,$84,$88,$8C
(1)   23/    CFD6 :                     ; dc.b $90,$94,$98,$9C
(1)   24/    CFD6 :                     ; dc.b $B0,$B4,$22,$28
(1)   25/    CFD6 :                     ; ** Extra words for FM3 special:
(1)   26/    CFD6 :                     ; dc.w OP1,OP2,OP3,OP4
(1)   27/    CFD6 :                     ;
(1)   28/    CFD6 :                     ; $22 LFO: %0000evvv
(1)   29/    CFD6 :                     ; e - Enable
(1)   30/    CFD6 :                     ; v - Value
(1)   31/    CFD6 :                     ;
(1)   32/    CFD6 :                     ; $28 KEYS: %oooo0000
(1)   33/    CFD6 :                     ; o - Operators 4-1
(1)   34/    CFD6 :                     
(1)   35/    CFD6 :                     FmIns_Organ2:
(1)   36/    CFD6 :                     		binclude "sound/instr/fm/organ2.gsx",$2478,$20
(1)   37/    CFF6 :                     FmIns_Organ2a:
(1)   38/    CFF6 :                     		binclude "sound/instr/fm/organ2a.gsx",$2478,$20
(1)   39/    D016 :                     
(1)   40/    D016 :                     ; FM3 Special
(1)   41/    D016 :                     FmIns_Fm3_Explosion:
(1)   42/    D016 :                     		binclude "sound/instr/fm/OLD/fm3_sfx_boomworm.gsx",$2478,$28
(1)   43/    D03E :                     FmIns_Sp_OpenHat:
(1)   44/    D03E :                     		binclude "sound/instr/fm/OLD/fm3_openhat.gsx",$2478,$28
(1)   45/    D066 :                     FmIns_Sp_ClosedHat:
(1)   46/    D066 :                     		binclude "sound/instr/fm/OLD/fm3_closedhat.gsx",$2478,$28
(1)   47/    D08E :                     FmIns_Sp_Cowbell:
(1)   48/    D08E :                     		binclude "sound/instr/fm/OLD/fm3_cowbell.gsx",$2478,$28
(1)   49/    D0B6 :                     ; BASS
(1)   50/    D0B6 :                     FmIns_Bass_1:
(1)   51/    D0B6 :                     		binclude "sound/instr/fm/OLD/bass_low.gsx",$2478,$20
(1)   52/    D0D6 :                     FmIns_Bass_2:
(1)   53/    D0D6 :                     		binclude "sound/instr/fm/OLD/bass_strong.gsx",$2478,$20
(1)   54/    D0F6 :                     FmIns_Bass_donna:
(1)   55/    D0F6 :                     		binclude "sound/instr/fm/OLD/bass_feellove.gsx",$2478,$20
(1)   56/    D116 :                     FmIns_Bass_groove:
(1)   57/    D116 :                     		binclude "sound/instr/fm/OLD/bass_groove.gsx",$2478,$20
(1)   58/    D136 :                     FmIns_Bass_groove_2:
(1)   59/    D136 :                     		binclude "sound/instr/fm/OLD/bass_groove_2.gsx",$2478,$20
(1)   60/    D156 :                     FmIns_Bass_groove_gem:
(1)   61/    D156 :                     		binclude "sound/instr/fm/OLD/bass_groove_gem.gsx",$2478,$20
(1)   62/    D176 :                     FmIns_Bass_italo:
(1)   63/    D176 :                     		binclude "sound/instr/fm/OLD/bass_italo.gsx",$2478,$20
(1)   64/    D196 :                     FmIns_Bass_duck:
(1)   65/    D196 :                     		binclude "sound/instr/fm/OLD/bass_duck.gsx",$2478,$20
(1)   66/    D1B6 :                     FmIns_Bass_4:
(1)   67/    D1B6 :                     		binclude "sound/instr/fm/OLD/bass_4.gsx",$2478,$20
(1)   68/    D1D6 :                     FmIns_Bass_8:
(1)   69/    D1D6 :                     		binclude "sound/instr/fm/OLD/bass_8.gsx",$2478,$20
(1)   70/    D1F6 :                     FmIns_Bass_club:
(1)   71/    D1F6 :                     		binclude "sound/instr/fm/OLD/OLD_bass_club.gsx",$2478,$20
(1)   72/    D216 :                     FmIns_Bass_calm:
(1)   73/    D216 :                     		binclude "sound/instr/fm/OLD/bass_calm.gsx",$2478,$20
(1)   74/    D236 :                     FmIns_Bass_low_1:
(1)   75/    D236 :                     		binclude "sound/instr/fm/OLD/bass_low_1.bin"
(1)   76/    D256 :                     FmIns_Bass_Oil:
(1)   77/    D256 :                     		binclude "sound/instr/fm/OLD/bass_oil.gsx",$2478,$20
(1)   78/    D276 :                     
(1)   79/    D276 :                     ; PIANO
(1)   80/    D276 :                     FmIns_PianoM1:
(1)   81/    D276 :                     		binclude "sound/instr/fm/OLD/piano_m1.gsx",$2478,$20
(1)   82/    D296 :                     FmIns_Piano_Aqua:
(1)   83/    D296 :                     		binclude "sound/instr/fm/OLD/piano_aqua.gsx",$2478,$20
(1)   84/    D2B6 :                     FmIns_Piano_Hard:
(1)   85/    D2B6 :                     		binclude "sound/instr/fm/OLD/piano_hard.bin"
(1)   86/    D2D6 :                     ; FmIns_Piano_m1:
(1)   87/    D2D6 :                     ; 		binclude "sound/instr/fm/OLD/piano_m1.gsx",$2478,$20
(1)   88/    D2D6 :                     
(1)   89/    D2D6 :                     
(1)   90/    D2D6 :                     FmIns_Synth_Plus:
(1)   91/    D2D6 :                     		binclude "sound/instr/fm/OLD/OLD_synthplus.gsx",$2478,$20
(1)   92/    D2F6 :                     
(1)   93/    D2F6 :                     FmIns_Trumpet_1:
(1)   94/    D2F6 :                     		binclude "sound/instr/fm/OLD/OLD_trumpet_1.gsx",$2478,$20
(1)   95/    D316 :                     FmIns_Trumpet_carnival:
(1)   96/    D316 :                     		binclude "sound/instr/fm/OLD/OLD_trumpet_carnivl.gsx",$2478,$20
(1)   97/    D336 :                     
(1)   98/    D336 :                     
(1)   99/    D336 :                     FmIns_brass_eur:
(1)  100/    D336 :                     		binclude "sound/instr/fm/OLD/OLD_brass_eur.gsx",$2478,$20
(1)  101/    D356 :                     FmIns_Brass_Puy:
(1)  102/    D356 :                     		binclude "sound/instr/fm/OLD/brass_puy.gsx",$2478,$20
(1)  103/    D376 :                     
(1)  104/    D376 :                     
(1)  105/    D376 :                     FmIns_Organ_Ito:
(1)  106/    D376 :                     		binclude "sound/instr/fm/OLD/organ_ito.gsx",$2478,$20
(1)  107/    D396 :                     FmIns_Ding_Baseball:
(1)  108/    D396 :                     		binclude "sound/instr/fm/OLD/ding_baseball.gsx",$2478,$20
(1)  109/    D3B6 :                     FmIns_DrumKick_gem:
(1)  110/    D3B6 :                     		binclude "sound/instr/fm/OLD/drum_kick_gem.gsx",$2478,$20
(1)  111/    D3D6 :                     
(1)  112/    D3D6 :                     
(1)  113/    D3D6 :                     FmIns_Trumpet_2:
(1)  114/    D3D6 :                     		binclude "sound/instr/fm/OLD/trumpet_2.gsx",$2478,$20
(1)  115/    D3F6 :                     FmIns_Trumpet_puy:
(1)  116/    D3F6 :                     		binclude "sound/instr/fm/OLD/trumpet_puy.gsx",$2478,$20
(1)  117/    D416 :                     FmIns_Marimba:
(1)  118/    D416 :                     		binclude "sound/instr/fm/OLD/marimba.gsx",$2478,$20
(1)  119/    D436 :                     
(1)  120/    D436 :                     FmIns_Ding_toy:
(1)  121/    D436 :                     		binclude "sound/instr/fm/OLD/ding_toy.gsx",$2478,$20
(1)  122/    D456 :                     
(1)  123/    D456 :                     FmIns_Flaute_cave:
(1)  124/    D456 :                     		binclude "sound/instr/fm/OLD/flaute_sea.gsx",$2478,$20
(1)  125/    D476 :                     FmIns_Banjo_puy:
(1)  126/    D476 :                     		binclude "sound/instr/fm/OLD/banjo_puy.gsx",$2478,$20
(1)  127/    D496 :                     FmIns_PSynth_plus:
(1)  128/    D496 :                     		binclude "sound/instr/fm/OLD/psynth_plus.gsx",$2478,$20
(1)  129/    D4B6 :                     FmIns_Ding_1:
(1)  130/    D4B6 :                     		binclude "sound/instr/fm/OLD/ding_gem.gsx",$2478,$20
(1)  131/    D4D6 :                     FmIns_Trombone_gem:
(1)  132/    D4D6 :                     		binclude "sound/instr/fm/OLD/trombone_gem.gsx",$2478,$20
(1)  133/    D4F6 :                     FmIns_HBeat_tom:
(1)  134/    D4F6 :                     		binclude "sound/instr/fm/OLD/nadia_tom.gsx",$2478,$20
(1)  135/    D516 :                     FmIns_Guitar_bball:
(1)  136/    D516 :                     		binclude "sound/instr/fm/OLD/guitar_bball.gsx",$2478,$20
(1)  137/    D536 :                     
(1)  138/    D536 :                     FmIns_Hats_1:
(1)  139/    D536 :                     		binclude "sound/instr/fm/OLD/fm_hats_spot.bin"
(1)  140/    D556 :                     FmIns_Hats_closed:
(1)  141/    D556 :                     		binclude "sound/instr/fm/OLD/hats_closed.gsx",$2478,$20
(1)  142/    D576 :                     FmIns_ClosedHat:
(1)  143/    D576 :                     		binclude "sound/instr/fm/OLD/hats_closed.gsx",$2478,$20
(1)  144/    D596 :                     
(1)  145/    D596 :                     FmIns_Sewer_1:
(1)  146/    D596 :                     		binclude "sound/instr/fm/OLD/sewer_1.bin"
(1)  147/    D5B6 :                     
(1)  148/    D5B6 :                     
(1)  149/    D5B6 :                     FmIns_Ambient_dark:
(1)  150/    D5B6 :                     		binclude "sound/instr/fm/OLD/ambient_dark.gsx",$2478,$20
(1)  151/    D5D6 :                     FmIns_Ambient_spook:
(1)  152/    D5D6 :                     		binclude "sound/instr/fm/OLD/ambient_spook.gsx",$2478,$20
(1)  153/    D5F6 :                     FmIns_Ambient_3:
(1)  154/    D5F6 :                     		binclude "sound/instr/fm/OLD/ambient_3.gsx",$2478,$20
(1)  155/    D616 :                     
(1)  156/    D616 :                     
(1)  157/    D616 :                     ; FmIns_Guitar_bball:
(1)  158/    D616 :                     ; 		binclude "sound/instr/fm/guitar_bball.gsx",$2478,$20
(1)  159/    D616 :                     
     414/    D616 :                     		include "sound/smpl_dac.asm"		; (MCD/CD32X ONLY) GEMA: DAC samples
(1)    1/    D616 :                     ; ====================================================================
(1)    2/    D616 :                     ; --------------------------------------------------------
(1)    3/    D616 :                     ; GEMA/Nikona DAC instruments
(1)    4/    D616 :                     ;
(1)    5/    D616 :                     ; This must be located at the 68k's 900000 area.
(1)    6/    D616 :                     ; ** 68K BANK 0 only **
(1)    7/    D616 :                     ;
(1)    8/    D616 :                     ; BASE Samplerate is at 16000hz
(1)    9/    D616 :                     ; --------------------------------------------------------
(1)   10/    D616 :                     
(1)   11/    D616 :                     	align $8000
(1)   12/   10000 :                     
(1)   13/   10000 :                     ; --------------------------------------------------------
(1)   14/   10000 :                     
(1)   15/   10000 :                     DacIns_Nadie:
(1)   16/   10000 : (MACRO)              	gSmpHead .end-.start,0
(1)   16/   10000 : B4DF 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   16/   10003 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   17/   10006 :                     .start:	binclude "sound/instr/smpl/nadie.wav",$2C
(1)   18/   1DFBA :                     .end:
(1)   19/   1DFBA :                     DacIns_Kick_techno:
(1)   20/   1DFBA : (MACRO)              	gSmpHead .end-.start,0
(1)   20/   1DFBA : 9C06 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   20/   1DFBD : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   21/   1DFC0 :                     .start:	binclude "sound/instr/smpl/ST-72_kick.wav",$2C
(1)   22/   1E65C :                     .end:
(1)   23/   1E65C :                     DacIns_Snare_techno:
(1)   24/   1E65C : (MACRO)              	gSmpHead .end-.start,0
(1)   24/   1E65C : F220 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   24/   1E65F : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   25/   1E662 :                     .start:	binclude "sound/instr/smpl/ST-79_snare.wav",$2C
(1)   26/   20754 :                     .end:
(1)   27/   20754 :                     DacIns_Kick_wegot:
(1)   28/   20754 : (MACRO)              	gSmpHead .end-.start,0
(1)   28/   20754 : 7407 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   28/   20757 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   29/   2075A :                     .start:	binclude "sound/instr/smpl/wegot_kick.wav",$2C
(1)   30/   20ECE :                     .end:
(1)   31/   20ECE :                     
     415/   20ECE :                     mdbank0_e:
     416/   20ECE : (MACRO)              	data_bkend MCD_DBANK0,MCD_DBANK0_e,mdbank0_e-mdbank0
     416/   20ECE :                     
     417/   20ECE :                     
     418/   20ECE :                     ; --------------------------------------------------------
     419/   20ECE :                     ; BANK 1
     420/   20ECE :                     ; --------------------------------------------------------
     421/   20ECE :                     
     422/   20ECE :                     ; 	data_bank MCD_DBANK1,-1
     423/   20ECE :                     ; 		org $200000-4
     424/   20ECE :                     ; 		dc.b "BNK1"
     425/   20ECE :                     ; 	data_bank_e MCD_DBANK1_e
     426/   20ECE :                     
     427/   20ECE :                     ; --------------------------------------------------------
     428/   20ECE :                     ; BANK 2
     429/   20ECE :                     ; --------------------------------------------------------
     430/   20ECE :                     
     431/   20ECE :                     ; 	data_bank MCD_DBANK2,-1
     432/   20ECE :                     ; 		org $300000-4
     433/   20ECE :                     ; 		dc.b "BNK2"
     434/   20ECE :                     ; 	data_bank_e MCD_DBANK2_e
     435/   20ECE :                     
     436/   20ECE :                     ; --------------------------------------------------------
     437/   20ECE :                     ; BANK 3
     438/   20ECE :                     ; --------------------------------------------------------
     439/   20ECE :                     
     440/   20ECE :                     ; 	data_bank MCD_DBANK3,-1
     441/   20ECE :                     ; 		org $400000-4
     442/   20ECE :                     ; 		dc.b "BNK3"
     443/   20ECE :                     ; 	data_bank_e MCD_DBANK3_e
     444/   20ECE :                     
     445/   20ECE :                     ; ====================================================================
     446/   20ECE :                     ; ----------------------------------------------------------------
     447/   20ECE :                     ; 32X/CD32X ONLY
     448/   20ECE :                     ;
     449/   20ECE :                     ; SDRAM DATA packages for each screen mode
     450/   20ECE :                     ;
     451/   20ECE :                     ; Usage:
     452/   20ECE :                     ; sdram_bank START_LABEL,END_LABEL
     453/   20ECE :                     ; (includes and bincludes)
     454/   20ECE :                     ; sdram_bank_e START_LABEL,END_LABEL
     455/   20ECE :                     ; ----------------------------------------------------------------
     456/   20ECE :                     
     457/   20ECE :                     ; ---------------------------------------------
     458/   20ECE :                     ; DEFAULT
     459/   20ECE :                     ; ---------------------------------------------
     460/   20ECE :                     
     461/   20ECE : (MACRO)              	sdram_bkset MARSDATA_DEFAULT,MARSDATA_DEFAULT_e
     461/   20ECE :                     ; MARSDATA_DEFAULT:
     461/   20ECE : =$20ECE              MARSDATA_DEFAULT label *
     462/   20ECE :                     	include "game/screen_0/data_mgfx.asm"
(1)    1/   20ECE :                     ; ====================================================================
(1)    2/   20ECE :                     ; ----------------------------------------------------------------
(1)    3/   20ECE :                     ; Put your 32X graphics here, indexed or direct
(1)    4/   20ECE :                     ;
(1)    5/   20ECE :                     ; These are located on the SH2's ROM area, this will be gone
(1)    6/   20ECE :                     ; if RV is set to 1
(1)    7/   20ECE :                     ;
(1)    8/   20ECE :                     ; Labels MUST be aligned by 4
(1)    9/   20ECE :                     ; ----------------------------------------------------------------
(1)   10/   20ECE :                     
(1)   11/   20ECE :                     		align 4
(1)   12/   20ED0 :                     ; ArtMars_Sabrina:
(1)   13/   20ED0 :                     ; 		binclude "game/screen_0/data/objects/mars/sabrina/sabrina_art.bin"
(1)   14/   20ED0 :                     ; 		align 4
(1)   15/   20ED0 :                     ArtMars_TEST:
(1)   16/   20ED0 :                     		binclude "game/screen_0/data/maps/mars/test/data_art.bin"
(1)   17/   326D0 :                     		align 4
(1)   18/   326D0 :                     
(1)   19/   326D0 :                     
(1)   20/   326D0 :                     
     463/   326D0 : (MACRO)              	sdram_bkend MARSDATA_DEFAULT,MARSDATA_DEFAULT_e
     463/   326D0 :                     
     464/   326D0 :                     
     465/   326D0 :                     ; ====================================================================
     466/   326D0 :                     ; ----------------------------------------------------------------
     467/   326D0 :                     ; Cartridge DMA graphics data
     468/   326D0 :                     ;
     469/   326D0 :                     ; BANK-free on 32X Cartridge
     470/   326D0 :                     ; ----------------------------------------------------------------
     471/   326D0 :                     
     473/   326D0 :                     		include "game/screen_0/data_dma.asm"
(1)    1/   326D0 :                     ; ====================================================================
(1)    2/   326D0 :                     ; ----------------------------------------------------------------
(1)    3/   326D0 :                     ; DMA Graphics for this screen
(1)    4/   326D0 :                     ; ----------------------------------------------------------------
(1)    5/   326D0 :                     
(1)    6/   326D0 :                     ASCII_FONT:	binclude "system/md/data/font.bin"
(1)    7/   332D0 :                     
(1)    8/   332D0 :                     ; ----------------------------------------------------------------
(1)    9/   332D0 :                     ; Commmon graphics
(1)   10/   332D0 :                     ; ----------------------------------------------------------------
(1)   11/   332D0 :                     
(1)   12/   332D0 :                     ART_TEST:
(1)   13/   332D0 :                     		binclude "game/screen_0/data/maps/md/test/md_art.bin"
(1)   14/   3BA50 :                     ART_TEST_e:
(1)   15/   3BA50 :                     		align 2
(1)   16/   3BA50 :                     
(1)   17/   3BA50 :                     ; ----------------------------------------------------------------
(1)   18/   3BA50 :                     ; Object graphics
(1)   19/   3BA50 :                     ; ----------------------------------------------------------------
(1)   20/   3BA50 :                     
(1)   21/   3BA50 :                     Art_Sisi:	binclude "game/screen_0/data/objects/md/sisi/sisi_art.bin"
(1)   22/   3C030 :                     Art_Sisi_e:
(1)   23/   3C030 :                     		align 2
(1)   24/   3C030 :                     
     475/   3C030 :                     
     476/   3C030 :                     ; ====================================================================
     477/   3C030 :                     ; ---------------------------------------------
     478/   3C030 :                     ; End
     479/   3C030 :                     ; ---------------------------------------------
     480/   3C030 :                     
     481/   3C030 :                     ROM_END:
     486/   3C030 :                     		align $8000			; Cartridge padding
     488/   40000 :                     
 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 3 - 02/21/2024 06:05:23 PM


  Symbol Table (* = unused):
  --------------------------

*ADAPTER :                        0 - | *ADEN :                           2 - |
 ALV :                           24 - |
*ARCHITECTURE :                                      "x86_64-unknown-linux" - |
*ARTMARS_TEST :               20ED0 C |  ART_SISI :                   3BA50 C |
 ART_SISI_E :                 3C030 C |  ART_TEST :                   332D0 C |
 ART_TEST_E :                 3BA50 C |  ASCII_FONT :                 326D0 C |
 ASCII_PAL :                    500 C |  ATK :                            8 - |
*BIGENDIAN :                      0 - | *BITBGON :                        7 - |
*BITCLICKL :                      0 - | *BITCLICKM :                      2 - |
*BITCLICKR :                      1 - | *BITCLICKS :                      3 - |
 BITDISPENBL :                    6 - |  BITDMA :                         1 - |
 BITDMAENBL :                     4 - | *BITDRWD :                        2 - |
*BITDRWL :                        1 - | *BITDRWR :                        0 - |
*BITDRWU :                        3 - | *BITFIFOE :                       9 - |
*BITFIFOF :                       8 - | *BITHBLK :                        2 - |
*BITHINTENBL :                    4 - | *BITHVSTOP :                      1 - |
*BITJOYA :                        6 - |  BITJOYB :                        4 - |
 BITJOYC :                        5 - |  BITJOYDOWN :                     1 - |
 BITJOYLEFT :                     2 - | *BITJOYMODE :                     B - |
 BITJOYRIGHT :                    3 - |  BITJOYSTART :                    7 - |
 BITJOYUP :                       0 - | *BITJOYX :                        A - |
*BITJOYY :                        9 - | *BITJOYZ :                        8 - |
*BITMAPMD :                       1 - | *BITMARSBG :                      6 - |
 BITOBJ_FLIPH :                   0 - |  BITOBJ_FLIPV :                   1 - |
 BITOBJ_MARS :                    7 - | *BITODD :                         4 - |
*BITPAL :                         0 - | *BITSPRCOL :                      5 - |
*BITSPROVR :                      6 - | *BITV30 :                         3 - |
 BITVBLK :                        3 - | *BITVINT :                        7 - |
*BITVINTENBL :                    5 - | *BITWRAMMODE :                    2 - |
*BRANCHEXT :                      0 - | *CART :                           1 - |
*CASESENSITIVE :                  0 - |  CDRAMDST :                      31 C |
 CDRAMLEN :                      30 C |  CDRAMSRC :                      33 C |
 CDRAMSRCB :                     35 C |  CHECK_THISRAM :   FFFFFFFFFFFFA000 C |
 CHIP_ENV :                    113C C |  CHIP_ENV.ATKEND :             11BF C |
*CHIP_ENV.ATKZERO :            11C2 C |  CHIP_ENV.CHK2 :               11C8 C |
 CHIP_ENV.CHK4 :               11FD C |  CHIP_ENV.CKOF :               1160 C |
 CHIP_ENV.CKON :               1173 C | *CHIP_ENV.DECTMR :             11CC C |
 CHIP_ENV.DKADD :              11E6 C |  CHIP_ENV.DKSAV :              11EE C |
 CHIP_ENV.DKYEND :             11F3 C |  CHIP_ENV.DO_NFREQ :           1252 C |
 CHIP_ENV.ENVPROC :            1191 C |  CHIP_ENV.KILLENV :            1213 C |
*CHIP_ENV.NBLOCK :             1191 C |  CHIP_ENV.NORMAL :             124D C |
 CHIP_ENV.NOUPD :              1293 C |  CHIP_ENV.NSKIP :              1188 C |
 CHIP_ENV.SILNC_3 :            1249 C |  CHIP_ENV.VEDLP :              121B C |
 CHIP_ENV.VLMUCH :             127F C |  CHIP_ENV.VLOOP :              1148 C |
 CHIP_ENV.VONLY :              1275 C |  CHNL_CHIP :                      1 - |
 CHNL_EFFARG :                    6 - |  CHNL_EFFID :                     5 - |
 CHNL_FLAGS :                     0 - |  CHNL_INS :                       3 - |
 CHNL_NOTE :                      2 - |  CHNL_TYPE :                      7 - |
 CHNL_VOL :                       4 - | *CLICKL :                         2 - |
*CLICKM :                         4 - | *CLICKR :                         1 - |
*CLICKS :                         8 - | *CMDINTCLR :                     1A - |
*CMDIRQ_ON :                      2 - |  COM :                            0 - |
*COMM0 :                         20 - | *COMM1 :                         21 - |
*COMM10 :                        2A - | *COMM11 :                        2B - |
*COMM12 :                        2C - | *COMM13 :                        2D - |
*COMM14 :                        2E - | *COMM15 :                        2F - |
*COMM2 :                         22 - | *COMM3 :                         23 - |
*COMM4 :                         24 - | *COMM5 :                         25 - |
*COMM6 :                         26 - | *COMM7 :                         27 - |
*COMM8 :                         28 - | *COMM9 :                         29 - |
 COMMZFIFO :                     40 C |  COMMZREAD :                   1F85 C |
 COMMZROMBLK :                   2F C |  COMMZWRITE :                    2E C |
*COMPMODE :                       0 - | *CONSTPI :        3.141592653589793 - |
 CONTROLLER_1 :    FFFFFFFFFFFFC004 - | *CONTROLLER_2 :    FFFFFFFFFFFFC014 - |
*CS0 :                            0 - | *CS1 :                      2000000 - |
 CS2 :                      4000000 - | *CS3 :                      6000000 - |
*CURRPADDING :                    0 - |  CURRTICKBITS :                1F96 C |
*CUSTOM :                         0 - | *CYCLE :                         32 - |
*DACINS_KICK_TECHNO :         1DFBA C |  DACINS_KICK_TECHNO.END :     1E65C C |
 DACINS_KICK_TECHNO.START :   1DFC0 C |  DACINS_KICK_WEGOT :          20754 C |
 DACINS_KICK_WEGOT.END :      20ECE C |  DACINS_KICK_WEGOT.START :    2075A C |
 DACINS_NADIE :               10000 C |  DACINS_NADIE.END :           1DFBA C |
 DACINS_NADIE.START :         10006 C | *DACINS_SNARE_TECHNO :        1E65C C |
 DACINS_SNARE_TECHNO.END :    20754 C |  DACINS_SNARE_TECHNO.START :  1E662 C |
 DAC_FILL :                      20 C |  DAC_ME :                         8 C |
 DAC_OFF :                     12CE C |  DAC_ON :                      12B9 C |
 DAC_PLAY :                    12E3 C |  DAC_REFILL :                  1317 C |
 DAC_REFILL.DACFILL_END :      13D6 C |  DAC_REFILL.DACFILL_LOOP :     138F C |
 DAC_REFILL.DACFILL_RET :      13D9 C |  DAC_REFILL.DAC_OVER :         1365 C |
 DATE :                "02/21/2024" - |  DDACCNTR :                    1F9B C |
 DDACFIFOMID :                 1F97 C |  DDACPNTR :                    1F98 C |
*DISPENBL :                      40 - |  DKY :                            C - |
*DMAENBL :                       10 - | *DOTTEDSTRUCTS :                  0 - |
*DREQCTL :                        6 - | *DREQDEST :                       C - |
*DREQFIFO :                      12 - | *DREQLEN :                       10 - |
*DREQSOURCE :                     8 - |  DRV_LOOP :                      64 C |
 DRV_LOOP.CMND_0 :               FA C |  DRV_LOOP.CMND_1 :               FD C |
 DRV_LOOP.CMND_2 :              116 C |  DRV_LOOP.CMND_3 :              169 C |
 DRV_LOOP.CMND_6 :              1D3 C |  DRV_LOOP.FOUND_F :             1D1 C |
 DRV_LOOP.GETCBYTEL :            CD C |  DRV_LOOP.GRAB_ARG :             CB C |
 DRV_LOOP.LIST :                 EA C |  DRV_LOOP.NEITHER :              A4 C |
 DRV_LOOP.NEXT :                142 C |  DRV_LOOP.NEXT_CMD :             A8 C |
 DRV_LOOP.NEXT_F :              1AF C |  DRV_LOOP.NOBEATS :              8B C |
 DRV_LOOP.NOTICKS :              7E C |  DRV_LOOP.SRCH_DEL :            192 C |
 DRV_LOOP.SRCH_FOR :            1AD C |  DRV_LOOP.SRCH_MODE :           140 C |
 DRV_LOOP.WRTTO_DEL :           1A6 C |  DRV_LOOP.WRTTO_SLOT :          15B C |
 DTBL_FROMMUL :                 7FD C |  DTBL_FROMMUL.CHNL_ULNK :       FD6 C |
 DTBL_FROMMUL.CHNL_ULNKCUT :    FD0 C |  DTBL_FROMMUL.CHNL_ULNKOFF :    FD6 C |
 DTBL_FROMMUL.COMN_PANLIST :    D7E C |  DTBL_FROMMUL.DAC_CUT :         B47 C |
 DTBL_FROMMUL.DAC_NOTE :        B3E C |  DTBL_FROMMUL.DAC_OFF :         B4D C |
 DTBL_FROMMUL.DAC_PAN :         B2E C |  DTBL_FROMMUL.DAC_PITCH :       B50 C |
 DTBL_FROMMUL.D_CONT :          D37 C |  DTBL_FROMMUL.EFFC :            CA4 C |
 DTBL_FROMMUL.EFFC_D :          CBF C |  DTBL_FROMMUL.EFFC_E :          D02 C |
 DTBL_FROMMUL.EFFC_F :          D17 C |  DTBL_FROMMUL.EFFC_X :          D38 C |
 DTBL_FROMMUL.FINE_DOWN :       CDA C |  DTBL_FROMMUL.FINE_UP :         CEE C |
 DTBL_FROMMUL.FMSPC_SET :       9AE C |  DTBL_FROMMUL.FM_CINDX :        AD9 C |
 DTBL_FROMMUL.FM_CUT :          A28 C |  DTBL_FROMMUL.FM_HASVOL :       F6A C |
 DTBL_FROMMUL.FM_KEYOFF :       A31 C |  DTBL_FROMMUL.FM_OFF :          A22 C |
 DTBL_FROMMUL.FM_SETFREQ :      A50 C |  DTBL_FROMMUL.FM_SETRLIST :     E81 C |
 DTBL_FROMMUL.FM_TLOFF :        A39 C |  DTBL_FROMMUL.FM_WRTALPAN :     AE1 C |
 DTBL_FROMMUL.FM_WRTLVOL :      A67 C |  DTBL_FROMMUL.FND_OCT :         FBB C |
 DTBL_FROMMUL.FROM_PSGN :       8EB C |  DTBL_FROMMUL.GET_OCT :         FB0 C |
 DTBL_FROMMUL.INST :            DAF C |  DTBL_FROMMUL.INS_DAC :         E91 C |
 DTBL_FROMMUL.INS_FM :          E10 C |  DTBL_FROMMUL.INS_PCM :         EE5 C |
 DTBL_FROMMUL.INS_PSG :         DDA C |  DTBL_FROMMUL.INS_PSGN :        DD4 C |
 DTBL_FROMMUL.INS_PWM :         F1D C | *DTBL_FROMMUL.INVL_INS :        DD3 C |
 DTBL_FROMMUL.KYCUT_PSG :       93C C |  DTBL_FROMMUL.KYCUT_PSGN :      939 C |
 DTBL_FROMMUL.KYOFF_PSG :       92F C |  DTBL_FROMMUL.KYOFF_PSGN :      92C C |
 DTBL_FROMMUL.KYPSGN_HATOFF :   946 C |  DTBL_FROMMUL.LINKED :          867 C |
 DTBL_FROMMUL.MK_DAC :          B17 C |  DTBL_FROMMUL.MK_FM :           94D C |
 DTBL_FROMMUL.MK_FMSPC :        9C2 C |  DTBL_FROMMUL.MK_LIST :         8A6 C |
 DTBL_FROMMUL.MK_PCM :          B76 C |  DTBL_FROMMUL.MK_PSG :          8D2 C |
 DTBL_FROMMUL.MK_PSGN :         8B4 C |  DTBL_FROMMUL.MK_PWM :          BFB C |
 DTBL_FROMMUL.MP_RESET :        BC6 C |  DTBL_FROMMUL.NEW_ROMDAT :      E44 C |
*DTBL_FROMMUL.NOFM_NOTE :       9C1 C |  DTBL_FROMMUL.NORM_DOWN :       CD8 C |
 DTBL_FROMMUL.NORM_UP :         CF0 C |  DTBL_FROMMUL.NOTE :            F60 C |
 DTBL_FROMMUL.NOT_DAC :         96C C |  DTBL_FROMMUL.NOT_DSPC :        982 C |
 DTBL_FROMMUL.NO_LFO :          B16 C |  DTBL_FROMMUL.N_FM :            FA6 C |
 DTBL_FROMMUL.N_INDX :          F92 C |  DTBL_FROMMUL.N_PSGN :          FA1 C |
 DTBL_FROMMUL.N_STFREQ :        F93 C |  DTBL_FROMMUL.PAN_MCD :         D68 C |
 DTBL_FROMMUL.PCM_CUT :         BA6 C |  DTBL_FROMMUL.PCM_EFFC :        BB5 C |
 DTBL_FROMMUL.PCM_NOTE :        BBC C |  DTBL_FROMMUL.PCM_OFF :         B9F C |
 DTBL_FROMMUL.PCM_PANLIST :     D86 C |  DTBL_FROMMUL.PCM_SEND :        BCB C |
 DTBL_FROMMUL.PCM_SETCOFF :     BAB C |  DTBL_FROMMUL.PSGNONE :         929 C |
 DTBL_FROMMUL.PSG_KEYON :       912 C |  DTBL_FROMMUL.PWM_CUT :         C2C C |
 DTBL_FROMMUL.PWM_OFF :         C25 C |  DTBL_FROMMUL.PWM_SETCOFF :     C31 C |
 DTBL_FROMMUL.PWV_MUCH :        C50 C |  DTBL_FROMMUL.PW_EFFC :         C54 C |
 DTBL_FROMMUL.PW_NOTE :         C5B C |  DTBL_FROMMUL.PW_SEND :         C60 C |
 DTBL_FROMMUL.PW_SETUP :        C3B C |  DTBL_FROMMUL.RCYL_COM :        852 C |
 DTBL_FROMMUL.RES_PAN :         D5E C |  DTBL_FROMMUL.SAME_PATCH :      E7C C |
 DTBL_FROMMUL.SAVE_ARG :        D2C C |  DTBL_FROMMUL.SETPCM_FREQ :     C84 C |
 DTBL_FROMMUL.SETPWM_FREQ :     C89 C |  DTBL_FROMMUL.SET_WAVFREQ :     C8C C |
 DTBL_FROMMUL.SILN_DAC :        85E C |  DTBL_FROMMUL.SILN_FM :         861 C |
 DTBL_FROMMUL.SILN_PCM :        83C C |  DTBL_FROMMUL.SILN_PSG :        835 C |
 DTBL_FROMMUL.SILN_PSG_N :      831 C |  DTBL_FROMMUL.SILN_PWM :        848 C |
 DTBL_FROMMUL.SPCREGLIST :      A1A C |  DTBL_FROMMUL.TL_DOWN :         A43 C |
 DTBL_FROMMUL.VMUCH :           91E C |  DTBL_FROMMUL.VOLU :            DA6 C |
 DTBL_FROMMUL.VOL_DVLD :        CFE C |  DTBL_FROMMUL.V_OVERFL :        BE7 C |
 DTBL_FROMMUL.WRITE_TL :        ACC C |  DTBL_FROMMUL.WR_SPC :          9FD C |
 DTBL_MULTI :                   7E7 C |  DTBL_SINGL :                   7FD C |
 DTH :                           20 - |  DTL :                           1C - |
 DWAVEBUFF :                   1D00 C | *EMU :                            1 - |
*EXT_3 :                          C C | *EXT_4 :                          E C |
*FALSE :                          0 - | *FEN :                            2 - |
*FILLDATA :                       8 - | *FILLLENGTH :                     4 - |
*FILLSTART :                      6 - |  FLG :                           28 - |
*FM :                            80 - |  FMCACH_1 :                    1946 C |
 FMCACH_2 :                    196E C |  FMCACH_3 :                    1996 C |
 FMCACH_4 :                    19BE C |  FMCACH_5 :                    19E6 C |
 FMCACH_6 :                    1A0E C |  FMCACH_LIST :                 14AA C |
 FMFREQ_LIST :                 13E8 C | *FMINS_AMBIENT_3 :             D5F6 C |
*FMINS_AMBIENT_DARK :          D5B6 C | *FMINS_AMBIENT_SPOOK :         D5D6 C |
*FMINS_BANJO_PUY :             D476 C | *FMINS_BASS_1 :                D0B6 C |
*FMINS_BASS_2 :                D0D6 C | *FMINS_BASS_4 :                D1B6 C |
*FMINS_BASS_8 :                D1D6 C | *FMINS_BASS_CALM :             D216 C |
*FMINS_BASS_CLUB :             D1F6 C | *FMINS_BASS_DONNA :            D0F6 C |
 FMINS_BASS_DUCK :             D196 C | *FMINS_BASS_GROOVE :           D116 C |
*FMINS_BASS_GROOVE_2 :         D136 C | *FMINS_BASS_GROOVE_GEM :       D156 C |
*FMINS_BASS_ITALO :            D176 C |  FMINS_BASS_LOW_1 :            D236 C |
*FMINS_BASS_OIL :              D256 C |  FMINS_BRASS_EUR :             D336 C |
*FMINS_BRASS_PUY :             D356 C |  FMINS_CLOSEDHAT :             D576 C |
 FMINS_DING_1 :                D4B6 C | *FMINS_DING_BASEBALL :         D396 C |
*FMINS_DING_TOY :              D436 C |  FMINS_DRUMKICK_GEM :          D3B6 C |
*FMINS_FLAUTE_CAVE :           D456 C |  FMINS_FM3_EXPLOSION :         D016 C |
*FMINS_GUITAR_BBALL :          D516 C |  FMINS_HATS_1 :                D536 C |
 FMINS_HATS_CLOSED :           D556 C |  FMINS_HBEAT_TOM :             D4F6 C |
*FMINS_MARIMBA :               D416 C | *FMINS_ORGAN2 :                CFD6 C |
 FMINS_ORGAN2A :               CFF6 C | *FMINS_ORGAN_ITO :             D376 C |
*FMINS_PIANOM1 :               D276 C |  FMINS_PIANO_AQUA :            D296 C |
*FMINS_PIANO_HARD :            D2B6 C | *FMINS_PSYNTH_PLUS :           D496 C |
*FMINS_SEWER_1 :               D596 C |  FMINS_SP_CLOSEDHAT :          D066 C |
*FMINS_SP_COWBELL :            D08E C |  FMINS_SP_OPENHAT :            D03E C |
*FMINS_SYNTH_PLUS :            D2D6 C | *FMINS_TROMBONE_GEM :          D4D6 C |
 FMINS_TRUMPET_1 :             D2F6 C | *FMINS_TRUMPET_2 :             D3D6 C |
 FMINS_TRUMPET_CARNIVAL :      D316 C | *FMINS_TRUMPET_PUY :           D3F6 C |
 FMSPECIAL :                   1F84 C |  FM_AUTOREG :                  129F C |
 FM_SEND_1 :                   12A3 C |  FM_SEND_2 :                   12AE C |
*FRAMECTL :                       B - | *FREEFLAG :                      3F C |
*FS :                             1 - | *FULLPMMU :                       1 - |
 GEMADMAPAUSE :                 3B0 C |  GEMADMAPAUSEROM :              3EC C |
 GEMADMARESUME :                3D2 C |  GEMADMARESUMEROM :             40E C |
 GEMAMSTRLISTPOS :               1C C |  GEMAPLAYTRACK :                44E C |
 GEMASETBEATS :                 48C C |  GEMASETMASTERLIST :            438 C |
*GEMASFX_ALL :                 46C6 C |  GEMASFX_ALL.BLK :             46D4 C |
 GEMASFX_ALL.INS :             479A C |  GEMASFX_ALL.PAT :             46DA C |
 GEMASTOPTRACK :                470 C |  GEMATEST :                     428 C |
 GEMATRK_ARENA1 :              47C2 C |  GEMATRK_ARENA1.INS :          47D0 C |
 GEMATRK_CRYSTAL :             8592 C |  GEMATRK_CRYSTAL.BLK :         85A0 C |
 GEMATRK_CRYSTAL.INS :         979C C |  GEMATRK_CRYSTAL.PAT :         85A8 C |
 GEMATRK_DREAM :               6E42 C |  GEMATRK_DREAM.BLK :           6E50 C |
 GEMATRK_DREAM.INS :           851A C |  GEMATRK_DREAM.PAT :           6E5D C |
 GEMATRK_MOVEME :              5E6D C |  GEMATRK_MOVEME.BLK :          5E7B C |
 GEMATRK_MOVEME.INS :          6DAA C |  GEMATRK_MOVEME.PAT :          5E92 C |
 GEMATRK_NADIEMARS :           BD68 C |  GEMATRK_NADIEMARS.BLK :       BD76 C |
 GEMATRK_NADIEMARS.INST :      CF8E C |  GEMATRK_NADIEMARS.PATT :      BD7E C |
 GEMATRK_NADIEMCD :            AABA C |  GEMATRK_NADIEMCD.BLK :        AAC8 C |
 GEMATRK_NADIEMCD.INST :       BD20 C |  GEMATRK_NADIEMCD.PATT :       AAD0 C |
 GEMATRK_NADIEMD :             97CC C |  GEMATRK_NADIEMD.BLK :         97DA C |
 GEMATRK_NADIEMD.INST :        AA72 C |  GEMATRK_NADIEMD.PATT :        97E2 C |
*GEMATRK_TEST_0 :              47C2 C |  GEMA_INIT :                    FEF C |
 GEMA_INIT.END_SETUP :         105A C |  GEMA_INIT.SETUP_LIST :        102F C |
 GEMA_INIT.ST_COPY :           104E C |  GEMA_LASTBANK :               13DD C |
 GEMA_LASTBANK.WRITE :         13E2 C |  GEMA_MASTERLIST :             46AA C |
 GET_ROMTRCKS :                 593 C |  GET_TICK :                    1063 C |
 GET_TICK.CTNOTICK :           1080 C |  GLBL_LASTORG :    FFFFFFFFFFFFD204 - |
 GLBL_LASTPC :                 3594 - | *HAS64 :                          1 - |
*HASDSP :                         0 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - | *HBLK :                          40 - |
*HCOUNT :                         5 - |  HEADEROUT :                   1FA4 C |
 HEADEROUT_E :                 1FB2 C | *HINTCLR :                       18 - |
*HINTENBL :                      10 - |  HINT_DEFAULT :                1576 C |
*HIRQ_ON :                        4 - | *HVSTOP :                         2 - |
*INEXTMODE :                      0 - |  INIT_ROMTRCKS :                59F C |
*INLWORDMODE :                    0 - | *INMAXMODE :                      0 - |
*INSRCMODE :                      0 - |  INSTLISTOUT :                 1B80 C |
*INSUPMODE :                      1 - | *INTMASK :                        1 - |
 JOYA :                          40 - |  JOYB :                          10 - |
 JOYC :                          20 - | *JOYDOWN :                        2 - |
*JOYLEFT :                        4 - | *JOYMODE :                      800 - |
*JOYRIGHT :                       8 - | *JOYSTART :                      80 - |
*JOYUP :                          1 - | *JOYX :                         400 - |
*JOYY :                         200 - | *JOYZ :                         100 - |
*LCHWIDTH :                      34 - |  LEV :                            4 - |
*LISTON :                         3 - |  LIST_VDPREGS :                 4EC C |
*MACEXP :                         7 - | *MAPMARS_TEST :                41DE C |
 MAP_TEST :                    391E C |  MARS :                           0 - |
 MARSBLOCK :                     37 C |  MARSCD :                         0 - |
 MARSDATA_DEFAULT :           20ECE C |  MARSUPD :                     1F87 C |
*MARS_RAMCODE :                3594 C | *MARS_RAMCODE_E :              3594 C |
*MAX_BLOCKS :                     8 - |  MAX_BUFFNTRY :                   8 - |
 MAX_MDDMATSK :                  18 - |  MAX_MDOBJ :                     18 - |
 MAX_MDOTHER :                  C00 - |  MAX_MDSYSTEM :                 600 - |
 MAX_MDVIDEO :                 2000 - |  MAX_RCACH :                     20 - |
 MAX_SCRNBUFF :                1800 - |  MAX_SRAMSIZE :                 400 - |
 MAX_SYSCODE :                 2000 - |  MAX_TBLSIZE :                   18 - |
 MAX_TRFRPZ :                     8 - |  MAX_TRKCHN :                    20 - |
 MAX_TRKINDX :                   1A - |  MAX_USERCODE :                8000 - |
 MAX_ZCMND :                     20 - |  MCD :                            0 - |
 MCDBLOCK :                      36 C |  MCDUPD :                      1F88 C |
*MCD_COMM_M :                     E - | *MCD_COMM_S :                     F - |
*MCD_DBANK0 :                  391E C | *MCD_DCOMM_M :                   10 - |
*MCD_DCOMM_S :                   20 - | *MCD_HINT :                       6 - |
*MCD_INTMASK :                   32 - | *MCD_MEMORY :                     3 - |
*MDBANK0 :                     391E C | *MDBANK0_E :                  20ECE C |
 MDSYS_SINEDATA :              131C C |  MD_BANK_SRAM :              A130F1 - |
 MD_ENTRY :                     202 C |  MD_ENTRY.LOOP_RAM :            236 C |
 MD_ENTRY.OLDMD :               21C C |  MD_ENTRY.WAIT_DMA :            24A C |
 MD_ERRADDR :                   200 C |  MD_ERRBUS :                    200 C |
 MD_ERRCHK :                    200 C |  MD_ERRILL :                    200 C |
 MD_ERROREX :                   200 C |  MD_ERRORTRAP :                 200 C |
 MD_ERRPRIVL :                  200 C |  MD_ERRTRAPV :                  200 C |
 MD_ERRZDIV :                   200 C |  MD_LINE1010 :                  200 C |
 MD_LINE1111 :                  200 C |  MD_READMODES :                157A C |
 MD_READMODES.PICK_MODE :      1596 C |  MD_SCREEN00 :                 3594 C |
*MD_SYSCODE_E :                15DA C |  MD_TRACE :                     200 C |
 MODE :                          18 - | *MODE_FADEIN :                 14F8 C |
 MODE_FADEIN.LOOPW :           1520 C | *MODE_FADEOUT :                152C C |
 MODE_FADEOUT.LOOPW :          1554 C |  MODE_INIT :                   14C6 C |
 MODE_INIT.CLR :               14F0 C | *MOMCPU :                     68000 - |
*MOMCPUNAME :               "68000" - | *MONOWIDTH :                     38 - |
 MOUSE_X :                        8 C |  MOUSE_Y :                        A C |
*NESTMAX :                      100 - |  NIKONA_BUFFLIST :             1878 C |
 NIKONA_BUFFLIST_E :           1890 C |  OBJECTS_ADD :                  D84 C |
 OBJECTS_ADD.CLR :              DA2 C |  OBJECTS_ADD.SEARCH :           D8C C |
 OBJECTS_ADD.USE_IT :           D9C C |  OBJECTS_CLEAR :                D14 C |
 OBJECTS_CLEAR.CLR :            D1C C |  OBJECTS_CLEAR.CLR_D :          D2A C |
 OBJECTS_RUN :                  D3C C |  OBJECTS_RUN.NEXT_ONE :         D44 C |
 OBJECTS_RUN.NO_CODE :          D50 C | *OBJECTS_SET :                  D5A C |
 OBJECTS_SET.CLR :              D64 C |  OBJECTS_SHOW :                 DBA C |
 OBJECTS_SHOW.FINISH :          EBA C |  OBJECTS_SHOW.MK_PZ :           E38 C |
 OBJECTS_SHOW.MK_SPR :          EB4 C |  OBJECTS_SHOW.NEXT :            E0A C |
 OBJECTS_SHOW.NEXTS :           DDC C |  OBJECTS_SHOW.NO_SPRDRW :       E02 C |
 OBJECTS_SHOW.RAN_OUT :         ED8 C |  OBJECTS_SHOW.VRAM_H :          E8A C |
 OBJECTS_SHOW.VRAM_V :          E70 C |  OBJECT_ANIMATE :               F7A C |
 OBJECT_ANIMATE.GOTOFRAME :     FF6 C |  OBJECT_ANIMATE.KEEPSPD :       FBC C |
 OBJECT_ANIMATE.LASTFRAME :    1000 C |  OBJECT_ANIMATE.NOANIM :        FE8 C |
 OBJECT_ANIMATE.RETURN :        FE6 C |  OBJECT_ANIMATE.SAMETHING :     F94 C |
 OBJECT_ANIMRESET :            1006 C |  OBJECT_DISPLAY :               EDE C |
 OBJECT_DISPLAY.NEXT_PZ :       F20 C |  OBJECT_DISPLAY.NO_DMA :        F4A C |
 OBJECT_DISPLAY.SRCH :          EE6 C |  OBJECT_DISPLAY.THIS_ONE :      EF2 C |
*OBJECT_MKSPRPZ :               F4C C |  OBJECT_MKSPRPZ.NOPE :          F78 C |
*OBJECT_SPEED :                1016 C |  OBJMAP_SISI :                 464E C |
 OBJPAL_SISI :                 462E C |  OBJ_ANIM_ID :                   1C C |
 OBJ_ANIM_INDX :                 1A C |  OBJ_ANIM_SPD :                  20 C |
 OBJ_CODE :                       0 C |  OBJ_DMA :                       10 C |
 OBJ_FRAME :                     1E C | *OBJ_FREE :                      25 C |
 OBJ_INDEX :                     21 C |  OBJ_MAP :                        C C |
*OBJ_RAM :                       26 C |  OBJ_SET :                       22 C |
*OBJ_STATUS :                    24 C | *OBJ_SUBID :                     23 C |
 OBJ_VRAM :                      14 C |  OBJ_X :                          4 C |
 OBJ_X_SPD :                     16 C |  OBJ_Y :                          8 C |
 OBJ_Y_SPD :                     18 C |  ON_HOLD :                        2 C |
 ON_PRESS :                       4 C | *ON_RELEASE :                     6 C |
*PACKING :                        0 - | *PADDING :                        0 - |
 PAD_ID :                         0 C |  PAD_VER :                        1 C |
*PALMARS_SABRINA :             460E C | *PALMARS_TEST :                440E C |
*PALMODE :                       3E C |  PARP :                          34 - |
 PCMCOM :                      1892 C | *PEN :                           20 - |
 PICO :                           0 - |  PROC_CHIPS :                   5DF C |
 PSGCOM :                      190A C |  PSGFREQ_LIST :                1400 C |
 PSGHATMODE :                  1F83 C | *PSG_CTRL :                  C00011 - |
 PTMR :                          38 - |  PVOL :                          30 - |
 PWMCOM :                      18D2 C | *PWMCTL :                        31 - |
*PWMINTCLR :                     1C - | *PWMIRQ_ON :                      1 - |
 RAM_FADEMARSDELAY :                                       FFFFFFFFFFFFBDF0 C |
 RAM_FADEMARSINCR :                                        FFFFFFFFFFFFBDEE C |
 RAM_FADEMARSREQ : FFFFFFFFFFFFBDEC C | *RAM_FADEMARSTMR : FFFFFFFFFFFFBDF2 C |
 RAM_FADEMDDELAY : FFFFFFFFFFFFBDE8 C |  RAM_FADEMDINCR :  FFFFFFFFFFFFBDE6 C |
 RAM_FADEMDREQ :   FFFFFFFFFFFFBDE4 C |  RAM_FADEMDTMR :   FFFFFFFFFFFFBDEA C |
 RAM_FRAMECOUNT :  FFFFFFFFFFFFBDD4 C | *RAM_GLBL_FILLER : FFFFFFFFFFFFEA04 C |
 RAM_HORSCROLL :   FFFFFFFFFFFFA004 C |  RAM_INPUTDATA :   FFFFFFFFFFFFC004 C |
*RAM_MDDREQ :      FFFFFFFFFFFFC604 C |  RAM_MDGLOBAL :    FFFFFFFFFFFFEA04 C |
 RAM_MDMARSHINT :  FFFFFFFFFFFFC452 C | *RAM_MDMARSPALFD : FFFFFFFFFFFFAE94 C |
 RAM_MDMARSVINT :  FFFFFFFFFFFFC44C C |
*RAM_MDMARS_DRAWALL :                                      FFFFFFFFFFFFBDF4 C |
 RAM_MDOTHER :     FFFFFFFFFFFFC604 C |  RAM_MDSYSTEM :    FFFFFFFFFFFFC004 C |
 RAM_MDVIDEO :     FFFFFFFFFFFFA004 C |  RAM_MEGACD :              FFFFFD00 - |
 RAM_OBJDISPLIST : FFFFFFFFFFFFBC24 C |  RAM_OBJECTS :     FFFFFFFFFFFFB294 C |
 RAM_PALETTE :     FFFFFFFFFFFFAE14 C |  RAM_PALETTEFD :   FFFFFFFFFFFFB094 C |
 RAM_SAVEDATA :    FFFFFFFFFFFFC044 C |  RAM_SCREENMODE :  FFFFFFFFFFFFC458 C |
 RAM_SCRNBUFF :    FFFFFFFFFFFFD204 C |  RAM_SPRDRWCNTR :  FFFFFFFFFFFFBDD8 C |
 RAM_SPRDRWPZ :    FFFFFFFFFFFFA914 C |  RAM_SPRITES :     FFFFFFFFFFFFA414 C |
 RAM_SPRLINKNUM :  FFFFFFFFFFFFBDDA C |  RAM_STACK :               FFFFFD00 - |
 RAM_SYSRANDSEED : FFFFFFFFFFFFC448 C |  RAM_SYSRANDVAL :  FFFFFFFFFFFFC444 C |
*RAM_SYSTEMCODE :  FFFFFFFFFFFF0000 C | *RAM_USERCODE :    FFFFFFFFFFFF2000 C |
 RAM_VDPDMAINDX :  FFFFFFFFFFFFBDDE C |  RAM_VDPDMALIST :  FFFFFFFFFFFFB114 C |
 RAM_VDPDMAMOD :   FFFFFFFFFFFFBDE0 C | *RAM_VDPEXWRITE :  FFFFFFFFFFFFBDDC C |
 RAM_VDPREGS :     FFFFFFFFFFFFBDF6 C |  RAM_VERSCROLL :   FFFFFFFFFFFFA3C4 C |
 RAM_VIDPRNTLIST : FFFFFFFFFFFFBC54 C |  RAM_VIDPRNTVRAM : FFFFFFFFFFFFBDE2 C |
 RAM_ZCDFLAG_D :           FFFFFF00 - |  RAM_ZSNDBUFF :            FFFFFF00 - |
*RCHWIDTH :                      36 - | *RELAXED :                        0 - |
 ROM_END :                    3C030 C |  RRT :                           14 - |
 SAMPLEHEAD :                  1FB4 C |  SBEATACC :                    1FA0 C |
 SBEATPTCK :                   1FA2 C | *SETVRAM_MIKAMI :               440 - |
 SETVRAM_SISI :                 480 - |  SET_CHIPS :                    5C1 C |
 SET_CHIPS.TRK_BUFFRS :         5C9 C | *SHIFT :                          2 - |
 SHRD_BLK :                    4840 C |  SHRD_PAT :                    484E C |
 SIZEOF_INPUT :                  10 C |  SIZEOF_MDGLBL :   FFFFFFFFFFFFEA08 C |
 SIZEOF_MDOBJ :                  66 C |  SIZEOF_MDRAM :    FFFFFFFFFFFFD40C C |
*SIZEOF_MDSYS :    FFFFFFFFFFFFC45A C |  SIZEOF_MDVID :    FFFFFFFFFFFFBE0E C |
*SIZEOF_RAMOTHER : FFFFFFFFFFFFD204 C |  SLV :                           10 - |
 SNDLOCKZ80 :                   324 C |  SNDLOCKZ80.WAIT :              32C C |
 SNDREQ_ENTER :                 342 C |  SNDREQ_ENTER.WAIT :            362 C |
 SNDREQ_EXIT :                  372 C | *SNDREQ_SADDR :                 39A C |
 SNDREQ_SBYTE :                 3A2 C |  SNDREQ_SCMD :                  388 C |
 SNDREQ_SLONG :                 396 C |  SNDREQ_SWORD :                 39E C |
 SNDUNLOCKZ80 :                 338 C |  SOUND_INIT :                   266 C |
 SOUND_INIT.CLEANUP :           290 C |  SOUND_INIT.COPY :              2A6 C |
 SOUND_INIT.WAIT :              27A C |  SOUND_UPDATE :                 2D8 C |
 SOUND_UPDATE.COPY_BYTES :      312 C |  SOUND_UPDATE.NO_SIZE :         320 C |
 SOUND_UPDATE.NO_TASK :         322 C | *STANDBY :                        3 - |
*SYSMARS_ID :                A130EC - | *SYSMARS_REG :               A15100 - |
*SYSMCD_REG :                A12000 - | *SYSMCD_WRAM :               200000 - |
 SYSTEM_DMAENTER_RAM :         10F8 C |  SYSTEM_DMAENTER_ROM :         1100 C |
 SYSTEM_DMAEXIT_RAM :          10FC C |  SYSTEM_DMAEXIT_ROM :          1104 C |
*SYSTEM_GRABRAMCODE :          1578 C |  SYSTEM_INIT :                 1034 C |
 SYSTEM_INIT.CLRINPUT :        108C C |  SYSTEM_INIT.WAIT :            1040 C |
 SYSTEM_INPUT :                1108 C |  SYSTEM_INPUT.EXIT :           1136 C |
 SYSTEM_INPUT.ID_03 :          115C C |  SYSTEM_INPUT.ID_0D :          1206 C |
 SYSTEM_INPUT.INVALID :        1200 C |  SYSTEM_INPUT.LIST :           113C C |
 SYSTEM_INPUT.OLDPAD :         127E C |  SYSTEM_INPUT.PICK_ID :        1284 C |
 SYSTEM_INPUT.READ :           129A C |  SYSTEM_INPUT.STEP_1 :         12A6 C |
 SYSTEM_INPUT.STEP_2 :         12B2 C |  SYSTEM_INPUT.THIS_ONE :       111C C |
 SYSTEM_INPUT.X_NEG :          11CE C |  SYSTEM_INPUT.Y_NEG :          11FA C |
*SYSTEM_RANDOM :               12B4 C |  SYSTEM_RANDOM.GOOD_S :        12C2 C |
 SYSTEM_RENDER :               10B2 C |  SYSTEM_RENDER.FORGOT_DISP :   10F6 C |
 SYSTEM_RENDER.WAIT_IN :       10D4 C |  SYSTEM_RENDER.WAIT_LAG :      10BC C |
 SYSTEM_SETINTS :              141C C |  SYSTEM_SETINTS.NOHINT :       142C C |
 SYSTEM_SETINTS.NOVINT :       1424 C | *SYSTEM_SINEWAVE :             12FE C |
 SYSTEM_SINEWAVE.DONT_NEG :    131A C | *SYSTEM_SINEWAVE_COS :         12DE C |
 SYSTEM_SINEWAVE_COS.DONT_NEG :                                        12F8 C |
 SYSTEM_SRAMINIT :             142E C |  SYSTEM_SRAMINIT.CLR_SRAM :    1444 C |
 SYSTEM_SRAMINIT.DONT_CLEAR :  1454 C |  SYSTEM_SRAMLOAD :             148E C |
*SYSTEM_SRAMLOAD.DONT_RESET :  14B8 C |  SYSTEM_SRAMLOAD.LOAD :        14AC C |
 SYSTEM_SRAMSAVE :             1456 C | *SYSTEM_SRAMSAVE.DONT_RESET :  1480 C |
 SYSTEM_SRAMSAVE.SAVE :        1474 C |  SYS_CTRL_1 :                A10009 - |
 SYS_CTRL_2 :                A1000B - |  SYS_CTRL_3 :                A1000D - |
 SYS_DATA_1 :                A10003 - | *SYS_DATA_2 :                A10005 - |
*SYS_DATA_3 :                A10007 - | *SYS_EXRAM :                 200000 - |
 SYS_IO :                    A10001 - |  SYS_TMSS :                  A14000 - |
 TBLBUFF_READ :                 608 C |  TBLBUFF_READ.CHK_PSG :         71E C |
 TBLBUFF_READ.CLRFULL :         7DD C |  TBLBUFF_READ.DO_CHIP :         66E C |
 TBLBUFF_READ.FIRST_INS :       690 C |  TBLBUFF_READ.GRAB_LINK :       6CD C |
 TBLBUFF_READ.HAS_INDX :        64E C |  TBLBUFF_READ.INVLDL :          707 C |
 TBLBUFF_READ.KEEP_IT :         6B4 C |  TBLBUFF_READ.L_HIPRIO :        792 C |
 TBLBUFF_READ.NEW_CHIP :        745 C |  TBLBUFF_READ.NEW_LINK :        78F C |
 TBLBUFF_READ.NEW_LINK_O :      787 C |  TBLBUFF_READ.NEW_LINK_Z :      783 C |
 TBLBUFF_READ.NEXTSRCH_TBL :    77C C |  TBLBUFF_READ.NEXT_INDX :       63F C |
 TBLBUFF_READ.NEXT_PRIO :       765 C |  TBLBUFF_READ.NO_INDX :         66A C |
 TBLBUFF_READ.PASS_2 :          764 C |  TBLBUFF_READ.PICK_TBL :        7B5 C |
 TBLBUFF_READ.REFILL :          742 C |  TBLBUFF_READ.REROLL :          70F C |
 TBLBUFF_READ.RESET_LINK :      7CF C |  TBLBUFF_READ.RNOT_PSG :        740 C |
 TBLBUFF_READ.SET_ASFULL :      7B2 C |  TBLBUFF_READ.SINGL_FREE :      7A0 C |
 TBLBUFF_READ.SINGL_LINK :      735 C |  TBLBUFF_READ.SRCH_FREE :       754 C |
 TBLBUFF_READ.SRCH_LINK :       6EE C |  TBLBUFF_READ.SRCH_LLOOP :      6F8 C |
 TBLBUFF_READ.TRACK_CONT :      628 C |  TBLBUFF_READ.VALID :           63D C |
 TBLFM :                       167A C |  TBLFM3 :                      16DA C |
 TBLFM6 :                      16F2 C |  TBLLIST :                     1608 C |
 TBLPCM :                      170C C |  TBLPSG :                      1618 C |
 TBLPSGN :                     1662 C |  TBLPWM :                      17CE C |
 TH :                      20000000 - |  TICKCNT :                     1F82 C |
 TICKFLAG :                    1F81 C |  TICKSPSET :                   1F80 C |
 TIME :               "06:05:23 PM" - | *TIMERCTL :                      30 - |
*TMR :                           2C - |  TRACK_OUT :                    54A C |
 TRACK_OUT.INDX_DEL :           558 C |  TRACK_OUT.NOTHIN :             58A C |
 TRANSFERROM :                 1084 C |  TRANSFERROM.DOUBLE :          10A7 C |
 TRANSFERROM.FROM_RAM :        10CB C |  TRANSFERROM.TRANSFER :        10E9 C |
 TRANSFERROM.WAIT :            10E2 C |  TRANSFERROM.X68KLAST :        1122 C |
 TRANSFERROM.X68KLOOP :        110E C |  TRANSFERROM.X68KLPWT :        1130 C |
 TRANSFERROM.X68KNOCARRY :     10C5 C |  TRANSFERROM.X68KPWTLP :       1132 C |
 TRKBLKS_0 :                   1B50 C |  TRKBLKS_1 :                   1B58 C |
 TRKBLKS_2 :                   1B60 C |  TRKBUFF_0 :                   1A96 C |
 TRKBUFF_1 :                   1AD4 C |  TRKBUFF_2 :                   1B12 C |
 TRKCACH_0 :                   1F00 C |  TRKCACH_1 :                   1F20 C |
 TRKCACH_2 :                   1F40 C | *TRKCACH_3 :                   1F60 C |
 TRKCHNLS :                    1E00 C |  TRKHDRS_0 :                   1A36 C |
 TRKHDRS_1 :                   1A56 C |  TRKHDRS_2 :                   1A76 C |
 TRKLISTCACH :                 1B68 C |  TRKLISTPAGE :                 1F86 C |
 TRK_BANKBLK :                   14 - |  TRK_BANKHEADS :                 13 - |
 TRK_BANKINS :                   12 - |  TRK_BLOCKS :                     4 - |
 TRK_CACH :                       8 - |  TRK_CACHHALF :                   D - |
 TRK_CHNINDX :                   24 - |  TRK_CURRBLK :                   10 - |
 TRK_MAXCHNL :                   15 - |  TRK_PATT :                       6 - |
 TRK_PRIORITY :                  11 - |  TRK_READ :                       A - |
 TRK_ROMBLKS :                   21 - |  TRK_ROMINST :                   1E - |
 TRK_ROMPATT :                   1B - |  TRK_ROMPATTREAD :               18 - |
 TRK_ROWPAUSE :                   E - |  TRK_ROWS :                       C - |
 TRK_SEQID :                      1 - |  TRK_SETBLK :                     2 - |
 TRK_STATUS :                     0 - |  TRK_TICKSET :                    3 - |
 TRK_TICKTMR :                    F - | *TRK_VOLFADE :                   17 - |
*TRK_VOLMASTER :                 16 - | *TRUE :                           1 - |
*TVMODE :                         0 - |  UPD_TRACK :                    1E4 C |
 UPD_TRACK.CHNL_FREE :          2D0 C |  UPD_TRACK.CONT_CHNL :          2DB C |
 UPD_TRACK.DECROW :             27F C |  UPD_TRACK.DECROW_E :           282 C |
 UPD_TRACK.EFFECT_FILL :        4AE C |  UPD_TRACK.EFF_A :              358 C |
 UPD_TRACK.EFF_B :              369 C |  UPD_TRACK.EFF_C :              387 C |
 UPD_TRACK.EXIT :               273 C |  UPD_TRACK.FIRST_BLK :          3DE C |
 UPD_TRACK.FIRST_FILL :         4B5 C |  UPD_TRACK.FIRST_HEAD :         426 C |
 UPD_TRACK.GRAB_RHEAD :         537 C |  UPD_TRACK.HAS_NOTE :           28A C |
 UPD_TRACK.INC_CPATT :          38A C |  UPD_TRACK.KEEP_BLK :           3FC C |
 UPD_TRACK.KEEP_IT :            44C C |  UPD_TRACK.NEXT_CHNL :          2B5 C |
 UPD_TRACK.NEXT_NOTE :          263 C |  UPD_TRACK.NO_EFF :             321 C |
 UPD_TRACK.NO_GLBL :            4E1 C |  UPD_TRACK.NO_INS :             303 C |
 UPD_TRACK.NO_NOTE :            2F8 C |  UPD_TRACK.NO_VOL :             30E C |
 UPD_TRACK.OLD_TYPE :           2EC C |  UPD_TRACK.RAN_OUT :            398 C |
 UPD_TRACK.READ_TRACK :         201 C |  UPD_TRACK.ROW_ACTIVE :         25C C |
 UPD_TRACK.SET_TRACK :          3C2 C |  UPD_TRACK.SFXMD :              220 C |
 UPD_TRACK.SRCH_NEW :           2B0 C |  UPD_TRACK.TRACK_END :          49B C |
 UPD_TRACK.TRK_BUFFRS :         1EC C |  VARNULLVRAM :                  7FF - |
 VARPRINTPAL :                    3 - |  VARPRINTVRAM :                 580 - |
*VBLK :                          80 - | *VDPSTS :                         A - |
 VDP_CTRL :                  C00004 - |  VDP_DATA :                  C00000 - |
*VERSION :                     142F - |  VIDEO_CLEAR :                  520 C |
*VIDEO_CLEARSCREEN :            520 C |  VIDEO_CLEARSCREEN.PNEXT :      592 C |
 VIDEO_CLEARSCREEN.SNEXT :      580 C |  VIDEO_CLEARSCREEN.XNEXT :      564 C |
 VIDEO_CLEARSCREEN.YNEXT :      572 C | *VIDEO_COPY :                   898 C |
 VIDEO_COPY.DMAW :              8AC C |  VIDEO_COPY.DMA_W :             904 C |
*VIDEO_DMABLAST :               A64 C |  VIDEO_DMABLAST.END :           AA8 C |
 VIDEO_DMABLAST.EXIT :          AB6 C |  VIDEO_DMABLAST.NEXT :          A8C C |
 VIDEO_DMAMKENTRY :             774 C |  VIDEO_DMAMKENTRY.MK_SET :      7B0 C |
 VIDEO_DMAMKENTRY.NORMAL :      7AA C |  VIDEO_DMAMKENTRY.RAN_OUT :     820 C |
 VIDEO_DOPALFADE :              62E C |  VIDEO_DOPALFADE.ACTIVE :       64A C |
 VIDEO_DOPALFADE.FADE_DONE :    652 C |  VIDEO_DOPALFADE.FADE_IN :      654 C |
 VIDEO_DOPALFADE.FADE_LIST :    64C C |  VIDEO_DOPALFADE.FADE_OUT :     6F6 C |
 VIDEO_DOPALFADE.NO_BLU :       6CE C |  VIDEO_DOPALFADE.NO_BLU_O :     750 C |
 VIDEO_DOPALFADE.NO_FNSH :      6E6 C |  VIDEO_DOPALFADE.NO_FNSH_O :    764 C |
 VIDEO_DOPALFADE.NO_GRN :       6AE C |  VIDEO_DOPALFADE.NO_GRN_O :     738 C |
 VIDEO_DOPALFADE.NO_MOVE :      6F4 C |  VIDEO_DOPALFADE.NO_MOVE_O :    772 C |
 VIDEO_DOPALFADE.NO_RED :       68E C |  VIDEO_DOPALFADE.NO_RED_O :     720 C |
 VIDEO_DOPALFADE.NXT_PAL :      66C C |  VIDEO_DOPALFADE.NXT_PAL_O :    708 C |
 VIDEO_FADEIN :                 59C C | *VIDEO_FADEOUT :                5C2 C |
 VIDEO_FADEPAL :                600 C | *VIDEO_FADEPAL_MARS :           ABC C |
 VIDEO_FILL :                   822 C |  VIDEO_FILL.DMAW :              836 C |
 VIDEO_FILL.DMA_W :             880 C |  VIDEO_INIT :                   4A2 C |
 VIDEO_INIT.CLRRAM :            4AE C |  VIDEO_INIT.LOOP :              4C6 C |
 VIDEO_LOADART :                91C C | *VIDEO_LOADART.FROM_RAM :       986 C |
 VIDEO_LOADART.MK_SET :         958 C |  VIDEO_LOADART.NORMAL :         952 C |
 VIDEO_LOADART.SHARED_SETUP :   988 C |  VIDEO_LOADMAP :                AC0 C |
 VIDEO_LOADMAP.CONT :           AE6 C |  VIDEO_LOADMAP.NODBLE :         B04 C |
 VIDEO_LOADMAP.NONULL :         AE4 C |  VIDEO_LOADMAP.XLOOP :          AD6 C |
 VIDEO_LOADMAP.YLOOP :          ACC C |  VIDEO_LOADPAL :                60A C |
*VIDEO_MARSGFXMODE :            AB8 C | *VIDEO_MARSPALFADE :            ABE C |
*VIDEO_MARS_SYNCFRAME :         ABA C |  VIDEO_PRINT :                  B40 C |
 VIDEO_PRINT.DONIBL :           C5C C |  VIDEO_PRINT.EXIT :             BCC C |
 VIDEO_PRINT.ISBYTE :           B96 C |  VIDEO_PRINT.ISLONG :           BBA C |
 VIDEO_PRINT.ISWORD :           BA8 C |  VIDEO_PRINT.LNGLOOP :          C4C C |
 VIDEO_PRINT.LOOP :             B58 C |  VIDEO_PRINT.LOWR :             C6C C |
 VIDEO_PRINT.NEWJUMP :          B52 C |  VIDEO_PRINT.NEXT :             B92 C |
 VIDEO_PRINT.NEXTV :            BD6 C |  VIDEO_PRINT.NOTHING :          C78 C |
 VIDEO_PRINT.PUTTEXT :          B84 C |  VIDEO_PRINT.VBYTE :            C08 C |
 VIDEO_PRINT.VLONG :            C54 C |  VIDEO_PRINT.VWORD :            C2A C |
 VIDEO_PRINTINIT :              B16 C | *VIDEO_PRINTPAL :               B30 C |
 VIDEO_RENDER :                 9D0 C |  VIDEO_RUNFADE :                5F8 C |
 VIDEO_UPDATE :                 4CE C | *VIDEO_UPDATE.EXIT :            4EA C |
 VIDEO_UPDATE.LOOP :            4DE C |  VIDEO_WAITFADE :               5E8 C |
 VIDMD_PAL :                    60E C |  VIDMD_PAL.LOOP :               626 C |
 VID_PICKLAYER :                C7E C |  VID_PICKLAYER.GOLYR :          CC8 C |
 VID_PICKLAYER.NOWD :           CB2 C |  VID_PICKLAYER.PLAWND :         CA4 C |
 VID_PICKLAYER.THISSZ :         CE8 C |  VID_PICKLAYER.THISSZJ :        D10 C |
*VINTCLR :                       16 - | *VINTENBL :                      20 - |
 VINT_DEFAULT :                1560 C | *VIRQ_ON :                        8 - |
*VRESINTCLR :                    14 - |  WAVE_FLAGS :                  1F94 C |
 WAVE_LEN :                    1F8C C |  WAVE_LOOP :                   1F8F C |
 WAVE_PITCH :                  1F92 C | *WAVE_PRIORITY :               1F95 C |
 WAVE_START :                  1F89 C |  WAVFREQ_CDPCM :               1560 C |
 WAVFREQ_LIST :                14B8 C |  X68KSRCLSB :                  1F9E C |
 X68KSRCMID :                  1F9F C | *YM_CTRL_1 :                 A04000 - |
*YM_CTRL_2 :                 A04002 - | *YM_DATA_1 :                 A04001 - |
*YM_DATA_2 :                 A04003 - | *Z80SYNTAX :                      0 - |
 Z80_BUS :                   A11100 - |  Z80_CODE :                    15DA C |
 Z80_CODE_END :                3594 C |  Z80_CPU :                   A00000 - |
 Z80_INIT :                      60 C |  Z80_RESET :                 A11200 - |
*ZBANK :                       6000 - |  ZDRVFIFO :                      40 - |
 ZDRVFWRT :                      2E - | *ZDRVMARSBLK :                   37 - |
*ZDRVMCDBLK :                    36 - |  ZDRVRAMLEN :                    30 - |
 ZDRVRAMSRC :                    35 - |  ZDRVROMBLK :                    2F - |
*ZMARS_SEND :                   FEE C | *ZOPCEX :                         8 - |
 ZOPCEXX :                       D9 - | *ZOPCNOP :                        0 - |
 ZOPCPUSHAF :                    F5 - |  ZOPCRET :                       C9 - |
 ZPSG_CTRL :                   7F11 - |  ZSET_TESTME :                    0 - |
 ZYM_CTRL_1 :                  4000 - |  ZYM_CTRL_2 :                  4002 - |
 ZYM_DATA_1 :                  4001 - |  ZYM_DATA_2 :                  4003 - |
*_CCR :                    FFFFFE92 - | *_DMACHANNEL0 :            FFFFFF8C - |
*_DMACHANNEL1 :            FFFFFF9C - | *_DMACOUNT0 :              FFFFFF88 - |
*_DMACOUNT1 :              FFFFFF98 - | *_DMADEST0 :               FFFFFF84 - |
*_DMADEST1 :               FFFFFF94 - | *_DMAOPERATION :           FFFFFFB0 - |
*_DMAREQACK0 :             FFFFFFB4 - | *_DMAREQACK1 :             FFFFFFB8 - |
*_DMASOURCE0 :             FFFFFF80 - | *_DMASOURCE1 :             FFFFFF90 - |
*_DMAVECTORE0 :            FFFFFFA4 - | *_DMAVECTORE1 :            FFFFFFAC - |
*_DMAVECTORN0 :            FFFFFFA0 - | *_DMAVECTORN1 :            FFFFFFA8 - |
*_FRAMEBUFFER :            24000000 - | *_FRC_H :                         2 - |
*_FRC_L :                         3 - | *_FRT :                    FFFFFE10 - |
*_HRH :                    FFFFFF10 - | *_HRL :                    FFFFFF14 - |
*_HRL32 :                  FFFFFF04 - | *_JR :                     FFFFFF00 - |
*_OCR_H :                         4 - | *_OCR_L :                         5 - |
*_OVERWRITE :              24020000 - | *_PALETTE :                20004200 - |
*_SERIAL :                 FFFFFE00 - | *_SYSREG :                 20004000 - |
*_TCR :                           6 - | *_TCSR :                          1 - |
*_TIER :                          0 - | *_TOCR :                          7 - |
*_VDPREG :                 20004100 - |

   1092 symbols
    299 unused symbols

 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 4 - 02/21/2024 06:05:23 PM


  Defined Macros:
  ---------------

DATA_BKEND                            | DATA_BKSET                           
ENDSTRCT                              | ERREPORT                             
GEMAHEAD                              | GEMATRK                              
GINSDAC                               | GINSFM                               
GINSFM3                               | GINSNULL                             
GINSPCM                               | GINSPSG                              
GINSPSGN                              | GINSPWM                              
GSMPHEAD                              | ISO_FILE                             
ISO_SETFS                             | REPORT                               
ROMPAD                                | SCREEN_CODE                          
SDRAM_BKEND                           | SDRAM_BKSET                          
SET_DBANKS                            | STRCT                                
VDP_SHOWME                            |

     25 macros

 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 5 - 02/21/2024 06:05:23 PM


  Defined Functions:
  ------------------

NOTZ80                                | MAP_SIZE                             
CELL_VRAM                             | LOCATE                               

 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 6 - 02/21/2024 06:05:23 PM


  Code Pages:
  ----------

STANDARD (0 changed characters)

1 code page

0.14 seconds assembly time

  11246 lines source file
  11799 lines incl. macro expansions
      5 passes
      0 errors
      0 warnings
