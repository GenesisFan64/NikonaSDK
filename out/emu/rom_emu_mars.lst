 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 1 - 02/23/2024 10:45:10 PM


       1/       0 :                     ; ===========================================================================
       2/       0 :                     ; NIKONA MD 16-BIT/32-BIT SDK
       3/       0 :                     ; (C)2023-2024 GenesisFan64
       4/       0 :                     ;
       5/       0 :                     ; For developing games on the Genesis-family of systems
       6/       0 :                     ; including Sega CD, Sega 32X, Sega CD32X and Sega Pico
       7/       0 :                     ;
       8/       0 :                     ; Assemble with a modified AS Macro Assembler by flamewing
       9/       0 :                     ; and a custom version of p2bin:
      10/       0 :                     ;
      11/       0 :                     ; asl main.asm -i "." -olist ROM.lst -q -xx -A -L -D (flags)
      12/       0 :                     ; p2bin -p=00 main.p ROM.bin
      13/       0 :                     ;
      14/       0 :                     ; ASSEMBLER FLAGS:
      15/       0 :                     ; MCD,MARS,MARSCD,PICO,CDREGION,EMU
      16/       0 :                     
      17/       0 :                     ; * System targets, MUST include ALL and set 1 to
      18/       0 :                     ; the target console and the others to 0
      19/       0 :                     ;    MCD - Sega CD
      20/       0 :                     ;   MARS - Sega 32X
      21/       0 :                     ; MARSCD - Sega CD32X
      22/       0 :                     ;   PICO - Sega Pico
      23/       0 :                     ; * ONLY CHOOSE ONE TARGET AT THE TIME *
      24/       0 :                     ;
      25/       0 :                     ; By default the code builds to stock Genesis
      26/       0 :                     ;
      27/       0 :                     ; CDREGION - SEGACD/CD32X ONLY, Set ROM region:
      28/       0 :                     ;            0=Japan 1=USA 2=Europe
      29/       0 :                     ;      EMU - 0=Real hardware, 1=Emulator only
      30/       0 :                     ;
      31/       0 :                     ; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣴⣶⡿⠿⠿⠿⣶⣦⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀
      32/       0 :                     ; ⠀⠀⠀⠀⠀⠀⢀⣠⣶⢟⣿⠟⠁⢰⢋⣽⡆⠈⠙⣿⡿⣶⣄⡀⠀⠀⠀⠀⠀⠀
      33/       0 :                     ; ⠀⠀⠀⠀⣠⣴⠟⠋⢠⣾⠋⠀⣀⠘⠿⠿⠃⣀⠀⠈⣿⡄⠙⠻⣦⣄⠀⠀⠀⠀
      34/       0 :                     ; ⠀⢀⣴⡿⠋⠁⠀⢀⣼⠏⠺⠛⠛⠻⠂⠐⠟⠛⠛⠗⠘⣷⡀⠀⠈⠙⢿⣦⡀⠀
      35/       0 :                     ; ⣴⡟⢁⣀⣠⣤⡾⢿⡟⠀⠀⠀⠘⢷⠾⠷⡾⠃⠀⠀⠀⢻⡿⢷⣤⣄⣀⡈⢻⣦
      36/       0 :                     ; ⠙⠛⠛⠋⠉⠁⠀⢸⡇⠀⠀⢠⣄⠀⠀⠀⠀⣠⡄⠀⠀⢸⡇⠀⠈⠉⠙⠛⠛⠋
      37/       0 :                     ; ⠀⠀⠀⠀⠀⠀⠀⢸⡇⢾⣦⣀⣹⡧⠀⠀⢼⣏⣀⣴⡷⢸⡇⠀⠀⠀⠀⠀⠀⠀
      38/       0 :                     ; ⠀⠀⠀⠀⠀⠀⠀⠸⣧⡀⠈⠛⠛⠁⠀⠀⠈⠛⠛⠁⢀⣼⠇⠀⠀⠀⠀⠀⠀⠀
      39/       0 :                     ; ⠀⠀⠀⠀⠀⠀⠀⢀⣘⣿⣶⣤⣀⣀⣀⣀⣀⣀⣤⣶⣿⣃⠀⠀⠀⠀⠀⠀⠀⠀
      40/       0 :                     ; ⠀⠀⠀⠀⠀⣠⡶⠟⠋⢉⣀⣽⠿⠉⠉⠉⠹⢿⣍⣈⠉⠛⠷⣦⡀⠀⠀⠀⠀⠀
      41/       0 :                     ; ⠀⠀⠀⠀⢾⣯⣤⣴⡾⠟⠋⠁⠀⠀⠀⠀⠀⠀⠉⠛⠷⣶⣤⣬⣿⠀⠀⠀⠀⠀
      42/       0 :                     ; ⠀⠀⠀⠀⠀⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠁⠀⠀⠀⠀⠀
      43/       0 :                     ; ===========================================================================
      44/       0 :                     
      45/       0 :                     ; ====================================================================
      46/       0 :                     ; ----------------------------------------------------------------
      47/       0 :                     ; USER SETTINGS
      48/       0 :                     ; ----------------------------------------------------------------
      49/       0 :                     
      50/       0 :                     ; --------------------------------------------------------
      51/       0 :                     ; 68000 RAM SIZES (MAIN-CPU)
      52/       0 :                     ;
      53/       0 :                     ; MAX_SysCode, MAX_UserCode are only used in Sega CD
      54/       0 :                     ; Sega 32X and CD32X.
      55/       0 :                     ; These sections are free to use on stock Genesis
      56/       0 :                     ; and Pico in case you are not interested on the add-ons.
      57/       0 :                     ;
      58/       0 :                     ; RESERVED RAM ADDRESSES:
      59/       0 :                     ; $FFFB00-$FFFD00 | Stack area a7
      60/       0 :                     ; $FFFD00-$FFFDFF | RESERVED for the Sega CD Vector jumps
 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 2 - 02/23/2024 10:45:10 PM


      61/       0 :                     ;                   FREE if running on cartridge
      62/       0 :                     ;                   (Genesis,32X,Pico)
      63/       0 :                     ; $FFFE00-$FFFEFF | RESERVED for Sega CD, BIOS uses this
      64/       0 :                     ;                   area as temporals
      65/       0 :                     ;                   ** Not sure if this can be used after
      66/       0 :                     ;                   during the application **
      67/       0 :                     ; $FFFF00-$FFFFFF | RESERVED for the Sound Driver:
      68/       0 :                     ;                   The Z80 driver writes to this area
      69/       0 :                     ;                   AND posibilly for the PICO 68k
      70/       0 :                     ;                   driver version of GEMA
      71/       0 :                     ; --------------------------------------------------------
      72/       0 :                     
      73/       0 : =$2000               MAX_SysCode	equ $2000	; Task routines ** CD/32X/CD32X ONLY **
      74/       0 : =$8000               MAX_UserCode	equ $8000	; USER code ** CD/32X/CD32X ONLY **
      75/       0 : =$1800               MAX_ScrnBuff	equ $1800	; Current screen buffer
      76/       0 : =$2000               MAX_MdVideo	equ $2000	; Video cache'd visuals, registers, etc.
      77/       0 : =$600                MAX_MdSystem	equ $0600	; Internal lib stuff and a copy of save data for reading/writing
      78/       0 : =$C00                MAX_MdOther	equ $0C00	; Add-on stuff
      79/       0 :                     
      80/       0 :                     ; ====================================================================
      81/       0 :                     
      82/       0 :                     		org 0
      83/       0 :                     		cpu 		68000		; Starting CPU is 68000
      84/       0 :                     		padding		off		; Dont pad dc.b
      85/       0 :                     		listing 	purecode	; Want listing file
      86/       0 :                     		supmode 	on 		; Supervisor mode (68K)
      87/       0 :                     		dottedstructs	off
      88/       0 :                     		page 		0
      89/       0 :                     
      90/       0 :                     ; ====================================================================
      91/       0 :                     ; ----------------------------------------------------------------
      92/       0 :                     ; Includes
      93/       0 :                     ; ----------------------------------------------------------------
      94/       0 :                     
      95/       0 :                     		include	"macros.asm"		; Assembler macros
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; MACROS section
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; THIS MUST BE INCLUDED AT THE VERY START.
(1)    6/       0 :                     ; ----------------------------------------------------------------
(1)    7/       0 :                     
(1)    8/       0 :                     ; ====================================================================
(1)    9/       0 :                     ; --------------------------------------------------------
(1)   10/       0 :                     ; Functions
(1)   11/       0 :                     ; --------------------------------------------------------
(1)   12/       0 :                     
(1)   13/       0 :                     locate		function a,b,c,(b&$FF)|(a<<8&$FF00)|(c<<16&$FF0000)	; VDP locate: X pos|Y pos|Layer for some video
(1)   14/       0 :                     cell_vram	function a,(a<<5)					; Vram position in 8x8 CELLS
(1)   15/       0 :                     map_size	function l,r,(((l-1)/8)<<16&$FFFF0000|((r-1)/8)&$FFFF)	; Full w/h sizes, for cell sizes use doubleword
(1)   16/       0 :                     ; md_ramloc	function x,-(-x)&$FFFFFFFF
(1)   17/       0 :                     
(1)   18/       0 :                     ; ====================================================================
(1)   19/       0 :                     ; --------------------------------------------------------
(1)   20/       0 :                     ; Macros
(1)   21/       0 :                     ; --------------------------------------------------------
(1)   22/       0 :                     
(1)   23/       0 : =$0                  currPadding	set 0
(1)   24/       0 :                     notZ80		function cpu,(cpu<>128)&&(cpu<>32988)
(1)   25/       0 :                     
(1)   26/       0 :                     ; -------------------------------------
(1)   27/       0 :                     ; Reserve memory
(1)   28/       0 :                     ;
(1)   29/       0 :                     ; (Doesn't work on Z80)
(1)   30/       0 :                     ; -------------------------------------
(1)   31/       0 :                     
(1)   32/       0 :                     strct		macro thisinput			; Reserve memory address
(1)   33/       0 :                     GLBL_LASTPC	set *
(1)   34/       0 :                     		dephase
(1)   35/       0 :                     		phase thisinput
(1)   36/       0 :                     GLBL_LASTORG	set *
(1)   37/       0 :                     		endm
(1)   38/       0 :                     
(1)   39/       0 :                     ; -------------------------------------
(1)   40/       0 :                     ; Finish struct
(1)   41/       0 :                     ; -------------------------------------
(1)   42/       0 :                     
(1)   43/       0 :                     endstrct	macro				; Then finish the custom struct.
(1)   44/       0 :                     		org GLBL_LASTORG
(1)   45/       0 :                     		phase GLBL_LASTPC
(1)   46/       0 :                     		endm
(1)   47/       0 :                     
(1)   48/       0 :                     ; -------------------------------------
(1)   49/       0 :                     ; Report memory usage
(1)   50/       0 :                     ; -------------------------------------
(1)   51/       0 :                     
(1)   52/       0 :                     report		macro text,dis,dat
(1)   53/       0 :                     	if MOMPASS == 2
(1)   54/       0 :                     		if dat == -1
(1)   55/       0 :                     			message text+": \{(dis)&$FFFFFF}"
(1)   56/       0 :                     		else
(1)   57/       0 :                     			if dis > dat
(1)   58/       0 :                     				warning "RAN OUT OF "+text+" SPACE (\{(dis)&$FFFFFF} of \{(dat)&$FFFFFF})"
(1)   59/       0 :                     			else
(1)   60/       0 :                     				message text+" uses \{(dis)&$FFFFFF} of \{(dat)&$FFFFFF}"
(1)   61/       0 :                     			endif
(1)   62/       0 :                     		endif
(1)   63/       0 :                     	endif
(1)   64/       0 :                     		endm
(1)   65/       0 :                     
(1)   66/       0 :                     ; -------------------------------------
(1)   67/       0 :                     ; Same thing but only show on error
(1)   68/       0 :                     ; -------------------------------------
(1)   69/       0 :                     
(1)   70/       0 :                     erreport	macro text,dis,dat
(1)   71/       0 :                     	if MOMPASS == 2
(1)   72/       0 :                     		if dat == -1
(1)   73/       0 :                     			message text+": \{(dis)&$FFFFFF}"
(1)   74/       0 :                     		else
(1)   75/       0 :                     			if dis > dat
(1)   76/       0 :                     				error "RAN OUT OF "+text+" (\{(dis)&$FFFFFF} of \{(dat)&$FFFFFF})"
(1)   77/       0 :                     ; 			else
(1)   78/       0 :                     ; 				message text+" uses \{(dis)&$FFFFFF} of \{(dat)&$FFFFFF}"
(1)   79/       0 :                     			endif
(1)   80/       0 :                     		endif
(1)   81/       0 :                     	endif
(1)   82/       0 :                     		endm
(1)   83/       0 :                     
(1)   84/       0 :                     ; -------------------------------------
(1)   85/       0 :                     ; ZERO Fill padding
(1)   86/       0 :                     ; -------------------------------------
(1)   87/       0 :                     
(1)   88/       0 :                     rompad		macro address			; Zero fill
(1)   89/       0 :                     diff := address - *
(1)   90/       0 :                     		if diff < 0
(1)   91/       0 :                     			error "too much stuff before org $\{address} ($\{(-diff)} bytes)"
(1)   92/       0 :                     		else
(1)   93/       0 :                     			while diff > 1024
(1)   94/       0 :                     				; AS can only generate 1 kb of code on a single line
(1)   95/       0 :                     				dc.b [1024]0
(1)   96/       0 :                     diff := diff - 1024
(1)   97/       0 :                     			endm
(1)   98/       0 :                     			dc.b [diff]0
(1)   99/       0 :                     		endif
(1)  100/       0 :                     	endm
(1)  101/       0 :                     
(1)  102/       0 :                     ; ====================================================================
(1)  103/       0 :                     ; --------------------------------------------------------
(1)  104/       0 :                     ; ISO filesystem macros
(1)  105/       0 :                     ; --------------------------------------------------------
(1)  106/       0 :                     
(1)  107/       0 :                     ; Set a ISO file
(1)  108/       0 :                     ; NOTE: a valid ISO head is required from $8000 to $B7FF
(1)  109/       0 :                     ; DATES are random here
(1)  110/       0 :                     
(1)  111/       0 :                     iso_setfs	macro type,start,end
(1)  112/       0 :                     .fstrt:
(1)  113/       0 :                     		dc.b .fend-.fstrt				; Block size
(1)  114/       0 :                     		dc.b 0						; zero
(1)  115/       0 :                     		dc.b (start>>11&$FF),(start>>19&$FF)		; Start sector, little
(1)  116/       0 :                     		dc.b (start>>27&$FF),(start>>35&$FF)
(1)  117/       0 :                     		dc.l start>>11					; Start sector, big
(1)  118/       0 :                     		dc.b ((end-start)&$FF),((end-start)>>8&$FF)	; Filesize, little
(1)  119/       0 :                     		dc.b ((end-start)>>16&$FF),((end-start)>>24&$FF)
(1)  120/       0 :                     		dc.l end-start					; Filesize, big
(1)  121/       0 :                     		dc.b (2023-1900)+1				; Year
(1)  122/       0 :                     		dc.b 0,0,0,0,0,0				; TODO
(1)  123/       0 :                     		dc.b 2						; File flags
(1)  124/       0 :                     		dc.b 0,0
(1)  125/       0 :                     		dc.b 1,0					; Volume sequence number, little
(1)  126/       0 :                     		dc.b 0,1					; Volume sequence number, big
(1)  127/       0 :                     		dc.b 1,type
(1)  128/       0 :                     .fend:
(1)  129/       0 :                     		endm
(1)  130/       0 :                     
(1)  131/       0 :                     iso_file	macro filename,start,end
(1)  132/       0 :                     .fstrt:		dc.b .fend-.fstrt				; Block size
(1)  133/       0 :                     		dc.b 0						; zero
(1)  134/       0 :                     		dc.b (start>>11&$FF),(start>>19&$FF)		; Start sector, little
(1)  135/       0 :                     		dc.b (start>>27&$FF),(start>>35&$FF)
(1)  136/       0 :                     		dc.l start>>11					; Start sector, big
(1)  137/       0 :                     		dc.b ((end-start)&$FF),((end-start)>>8&$FF)	; Filesize, little
(1)  138/       0 :                     		dc.b ((end-start)>>16&$FF),((end-start)>>24&$FF)
(1)  139/       0 :                     		dc.l end-start					; Filesize, big
(1)  140/       0 :                     		dc.b (2023-1900)+1				; Year
(1)  141/       0 :                     		dc.b 0,0,0,0,0,0				; TODO
(1)  142/       0 :                     		dc.b 0						; File flags
(1)  143/       0 :                     		dc.b 0,0
(1)  144/       0 :                     		dc.b 1,0					; Volume sequence number, little
(1)  145/       0 :                     		dc.b 0,1					; Volume sequence number, big
(1)  146/       0 :                     		dc.b .flend-.flen
(1)  147/       0 :                     .flen:		dc.b filename,";1"
(1)  148/       0 :                     .flend:		dc.b 0
(1)  149/       0 :                     .fend:
(1)  150/       0 :                     		endm
(1)  151/       0 :                     
(1)  152/       0 :                     ; ====================================================================
(1)  153/       0 :                     ; --------------------------------------------------------
(1)  154/       0 :                     ; Nikona macros
(1)  155/       0 :                     ; --------------------------------------------------------
(1)  156/       0 :                     
(1)  157/       0 :                     ; ---------------------------------------------
(1)  158/       0 :                     ; Screen mode code
(1)  159/       0 :                     ; ---------------------------------------------
(1)  160/       0 :                     
(1)  161/       0 :                     screen_code macro lblstart,lblend,path
(1)  162/       0 :                     	if MCD|MARSCD
(1)  163/       0 :                     		align $800		; SCD/CD32X sector align
(1)  164/       0 :                     	elseif MARS
(1)  165/       0 :                     		align 4
(1)  166/       0 :                     		phase $880000+*		; 32X ROM-area
(1)  167/       0 :                     	endif
(1)  168/       0 :                     lblstart label *
(1)  169/       0 :                     	if MARS
(1)  170/       0 :                     		dephase
(1)  171/       0 :                     	endif
(1)  172/       0 :                     
(1)  173/       0 :                     mctopscrn:
(1)  174/       0 :                     	if MARS|MCD|MARSCD
(1)  175/       0 :                     		phase RAM_UserCode	; SCD/32X/CD32X relocate to RAM area
(1)  176/       0 :                     	endif
(1)  177/       0 :                     mcscrn_s:
(1)  178/       0 :                     	include path;"game/screen_0/code.asm"
(1)  179/       0 :                     mcscrn_e:
(1)  180/       0 :                     	if MARS
(1)  181/       0 :                     		dephase	; dephase RAM section
(1)  182/       0 :                     		dephase ; dephase $880000+ section
(1)  183/       0 :                     	elseif MCD|MARSCD
(1)  184/       0 :                     		dephase
(1)  185/       0 :                     		phase mctopscrn+(mcscrn_e-RAM_UserCode)
(1)  186/       0 :                     		align $800
(1)  187/       0 :                     ; Md_Screen00_e:
(1)  188/       0 :                     lblend label *
(1)  189/       0 :                     	endif
(1)  190/       0 :                     	if MCD|MARS|MARSCD
(1)  191/       0 :                     		report "THIS SCREEN's code",mcscrn_e-RAM_UserCode,MAX_UserCode
(1)  192/       0 :                     	endif
(1)  193/       0 :                     	endm
(1)  194/       0 :                     
(1)  195/       0 :                     ; ---------------------------------------------
(1)  196/       0 :                     ; 68K data bank
(1)  197/       0 :                     ; ---------------------------------------------
(1)  198/       0 :                     
(1)  199/       0 :                     data_bkset macro startlbl,except
(1)  200/       0 :                     	if MCD|MARSCD
(1)  201/       0 :                     		align $800
(1)  202/       0 :                     	elseif MARS
(1)  203/       0 :                     		align 4
(1)  204/       0 :                     	endif
(1)  205/       0 :                     ; MCD_DBANK0:
(1)  206/       0 :                     startlbl label *
(1)  207/       0 :                     	if MCD|MARSCD
(1)  208/       0 :                     		phase sysmcd_wram
(1)  209/       0 :                     	elseif MARS
(1)  210/       0 :                     ; 		dephase
(1)  211/       0 :                     	if except==-1
(1)  212/       0 :                     		phase $900000+*	; First 32X data bank
(1)  213/       0 :                     	else
(1)  214/       0 :                     		phase $900000
(1)  215/       0 :                     	endif
(1)  216/       0 :                     	endif
(1)  217/       0 :                     	endm
(1)  218/       0 :                     
(1)  219/       0 :                     data_bkend macro startlbl,endlbl,thissize
(1)  220/       0 :                     
(1)  221/       0 :                     	if MARS
(1)  222/       0 :                     		dephase
(1)  223/       0 :                     		if thissize > $40000
(1)  224/       0 :                     			warning "THIS BANK SIZE IS TOO LARGE FOR WORD-RAM (CD/CD32X)"
(1)  225/       0 :                     		endif
(1)  226/       0 :                     		report "THIS 68K DATA BANK at $900000",thissize,$100000
(1)  227/       0 :                     	elseif MCD|MARSCD
(1)  228/       0 :                     		dephase
(1)  229/       0 :                     		align $800
(1)  230/       0 :                     endlbl label *	; <-- CD/CD32X ONLY
(1)  231/       0 :                     		report "THIS 68K DATA BANK at WORD-RAM",thissize,$40000
(1)  232/       0 :                     	endif
(1)  233/       0 :                     	endm
(1)  234/       0 :                     
(1)  235/       0 :                     ; --------------------------------------------------------
(1)  236/       0 :                     ; 32X ONLY
(1)  237/       0 :                     ; --------------------------------------------------------
(1)  238/       0 :                     
(1)  239/       0 :                     sdram_bkset macro thislbl,endlbl
(1)  240/       0 :                     	if MCD|MARSCD
(1)  241/       0 :                     		align $800
(1)  242/       0 :                     	elseif MARS
(1)  243/       0 :                     		align 4
(1)  244/       0 :                     		phase $880000+*
(1)  245/       0 :                     	endif
(1)  246/       0 :                     ; MARSDATA_DEFAULT:
(1)  247/       0 :                     thislbl label *
(1)  248/       0 :                     	if MARS
(1)  249/       0 :                     		dephase
(1)  250/       0 :                     	endif
(1)  251/       0 :                     	if MARS|MARSCD
(1)  252/       0 :                     		dc.l endlbl-thislbl
(1)  253/       0 :                     		phase SH2_USER_DATA
(1)  254/       0 :                     	endif
(1)  255/       0 :                     	endm
(1)  256/       0 :                     
(1)  257/       0 :                     ; ---------------------------------------------
(1)  258/       0 :                     
(1)  259/       0 :                     sdram_bkend macro thislbl,endlbl
(1)  260/       0 :                     	if MARS|MARSCD
(1)  261/       0 :                     		dephase
(1)  262/       0 :                     		align 8	; <-- DREQ alignment
(1)  263/       0 :                     	endif
(1)  264/       0 :                     	if MCD|MARSCD
(1)  265/       0 :                     endlbl label *
(1)  266/       0 :                     		align $800	; <-- AS failing
(1)  267/       0 :                     ; 		dc.l 0
(1)  268/       0 :                     	elseif MARS
(1)  269/       0 :                     		phase $880000+*
(1)  270/       0 :                     endlbl label *
(1)  271/       0 :                     		dephase
(1)  272/       0 :                     	endif
(1)  273/       0 :                     
(1)  274/       0 :                     	if MARS|MARSCD
(1)  275/       0 :                     		report "SH2 SDRAM DATA: thislbl",endlbl-thislbl,(CS3|$40000)-SH2_USER_DATA
(1)  276/       0 :                     	endif
(1)  277/       0 :                     	endm
(1)  278/       0 :                     
(1)  279/       0 :                     ; --------------------------------------------------------
(1)  280/       0 :                     ; Set data bank(s) for the current screen
(1)  281/       0 :                     ;
(1)  282/       0 :                     ; mcdpos:
(1)  283/       0 :                     ; 	dc.b "FILENAME.BIN",0
(1)  284/       0 :                     ; 	align 2
(1)  285/       0 :                     ;
(1)  286/       0 :                     ; marspos:
(1)  287/       0 :                     ; 	dc.l MARSDATA_DEFAULT		; 32X Cartridge point (UNUSED on CD32X)
(1)  288/       0 :                     ; 	dc.b "MARSD_00.BIN",0		; CD32X Filename (UNUSED on 32X Cartridge)
(1)  289/       0 :                     ; 	align 2
(1)  290/       0 :                     ; --------------------------------------------------------
(1)  291/       0 :                     
(1)  292/       0 :                     set_dbanks macro mcdpos,marspos
(1)  293/       0 :                     	if MARS|MARSCD
(1)  294/       0 :                     		lea	marspos(pc),a0		; 32X/CD32X: SH2 side data
(1)  295/       0 :                     		bsr	System_MarsDataPack
(1)  296/       0 :                     	endif
(1)  297/       0 :                     	if MCD|MARSCD
(1)  298/       0 :                     		bsr	System_McdSubWait
(1)  299/       0 :                     		lea	mcdpos(pc),a0		; CD/CD32X: Genesis data
(1)  300/       0 :                     		bsr	System_McdTrnsfr_WRAM
(1)  301/       0 :                     	endif
(1)  302/       0 :                     	endm
(1)  303/       0 :                     
(1)  304/       0 :                     ; ---------------------------------------------
(1)  305/       0 :                     ; VDP color debug
(1)  306/       0 :                     ; ---------------------------------------------
(1)  307/       0 :                     
(1)  308/       0 :                     vdp_showme	macro color
(1)  309/       0 :                     		move.l	#$C0000000,(vdp_ctrl).l
(1)  310/       0 :                     		move.w	#color,(vdp_data).l
(1)  311/       0 :                     		endm
(1)  312/       0 :                     
      96/       0 :                     		include "game/globals.asm"	; USER variables
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; GLOBAL RAM for ALL screen modes
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; Score, Lives, Level number, etc.
(1)    6/       0 :                     ; ----------------------------------------------------------------
(1)    7/       0 :                     
(1)    8/       0 : (MACRO)              			strct RAM_MdGlobal
(1)    8/       0 : =$0                  GLBL_LASTPC     set *
(1)    8/       0 :                                     dephase
(1)    8/FFFFFFFFFFFFEA04 :                                     phase RAM_MDGLOBAL
(1)    8/FFFFFFFFFFFFEA04 : =$FFFFFFFFFFFFEA04   GLBL_LASTORG    set *
(1)    9/FFFFFFFFFFFFEA04 :                     
(1)   10/FFFFFFFFFFFFEA04 :                     ; ------------------------------------------------------------
(1)   11/FFFFFFFFFFFFEA04 :                     ; Examples:
(1)   12/FFFFFFFFFFFFEA04 :                     ;
(1)   13/FFFFFFFFFFFFEA04 :                     ; RAM_Glbl_ExmpL ds.l 8 ; reserve 4 LONGS ($20 bytes)
(1)   14/FFFFFFFFFFFFEA04 :                     ; RAM_Glbl_ExmpW ds.w 6 ; reserve 3 WORDS ($0C bytes)
(1)   15/FFFFFFFFFFFFEA04 :                     ; RAM_Glbl_ExmpB ds.b 5 ; reserve 5 bytes
(1)   16/FFFFFFFFFFFFEA04 :                     ;
(1)   17/FFFFFFFFFFFFEA04 :                     ; Careful with bytes, everything needs to be word-algined
(1)   18/FFFFFFFFFFFFEA04 :                     ; or your will get an ADDRESS ERROR.
(1)   19/FFFFFFFFFFFFEA04 :                     ; ------------------------------------------------------------
(1)   20/FFFFFFFFFFFFEA04 :                     
(1)   21/FFFFFFFFFFFFEA04 :                     RAM_Glbl_Filler		ds.l 1		; 1 long (4 bytes)
(1)   22/FFFFFFFFFFFFEA08 :                     
(1)   23/FFFFFFFFFFFFEA08 :                     
(1)   24/FFFFFFFFFFFFEA08 :                     ; ------------------------------------------------------------
(1)   25/FFFFFFFFFFFFEA08 :                     sizeof_MdGlbl		ds.l 0		; size label
(1)   26/FFFFFFFFFFFFEA0C : (MACRO)              			endstrct
(1)   26/FFFFFFFFFFFFEA04 :                                     org GLBL_LASTORG
(1)   26/       0 :                                     phase GLBL_LASTPC
(1)   27/       0 :                     
      97/       0 :                     		include	"system/mcd/map.asm"	; Sega CD hardware map (shared with Sub-CPU)
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; SEGA CD SUB-CPU MAP
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; ------------------------------------------------
(1)    7/       0 :                     ; Register area
(1)    8/       0 :                     ;
(1)    9/       0 :                     ; MAIN-CPU: $A12000 (sysmcd_reg)
(1)   10/       0 :                     ; SUB-CPU:  $FF8000 (scpu_reg)
(1)   11/       0 :                     ; ------------------------------------------------
(1)   12/       0 :                     
(1)   13/       0 :                     ; -------------
(1)   14/       0 :                     ; bits
(1)   15/       0 :                     ; -------------
(1)   16/       0 :                     
(1)   17/       0 : =$2                  bitWRamMode	equ 2		;2M | 1M
(1)   18/       0 :                     
(1)   19/       0 :                     ; -------------
(1)   20/       0 :                     ; Registers
(1)   21/       0 :                     ; -------------
(1)   22/       0 :                     
(1)   23/       0 : =$3                  mcd_memory	equ $03
(1)   24/       0 : =$6                  mcd_hint	equ $06		; [W] HBlank RAM redirection-jump (MAIN CPU ONLY)
(1)   25/       0 : =$E                  mcd_comm_m	equ $0E		; [B] Comm port MAIN R/W | SUB READ ONLY
(1)   26/       0 : =$F                  mcd_comm_s	equ $0F		; [B] Comm port SUB R/W  | MAIN READ ONLY
(1)   27/       0 : =$10                 mcd_dcomm_m	equ $10		; [S: $0E] Communication MAIN
(1)   28/       0 : =$20                 mcd_dcomm_s	equ $20		; [S: $0E] Communication SUB
(1)   29/       0 : =$32                 mcd_intmask	equ $32		;
(1)   30/       0 :                     
(1)   31/       0 :                     ; ====================================================================
(1)   32/       0 :                     
      98/       0 :                     		include	"system/mars/map.asm"	; 32X hardware map (shared with SH2)
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; SH2 MAP
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; --------------------------------------------------------
(1)    7/       0 :                     ; SH2 SIDE MAP
(1)    8/       0 :                     ; --------------------------------------------------------
(1)    9/       0 :                     
(1)   10/       0 : =$0                  CS0		equ	$00000000	; Boot ROM & System registers
(1)   11/       0 : =$2000000            CS1		equ	$02000000	; ROM data all 4MB, Gone if RV=1
(1)   12/       0 : =$4000000            CS2		equ	$04000000	; Framebuffer area
(1)   13/       0 : =$6000000            CS3		equ	$06000000	; SDRAM
(1)   14/       0 : =$20000000           TH		equ	$20000000	; OR value for CacheThru
(1)   15/       0 : =$20004000           _sysreg		equ	$00004000|TH	; MARS System registers
(1)   16/       0 : =$20004100           _vdpreg		equ	$00004100|TH	; SuperVDP registers
(1)   17/       0 : =$20004200           _palette	equ	$00004200|TH	; Palette RAM for Pixel-Packed or RLE mode
(1)   18/       0 : =$24000000           _framebuffer:	equ	CS2|TH		; Framebuffer: First 240 words are the linetable
(1)   19/       0 : =$24020000           _overwrite:	equ	CS2|TH+$20000	; Overwrite: $00 writes are ignored
(1)   20/       0 :                     
(1)   21/       0 :                     ; --------------------------------------------------------
(1)   22/       0 :                     ; Variables
(1)   23/       0 :                     ; --------------------------------------------------------
(1)   24/       0 :                     
(1)   25/       0 :                     ; ------------------------------------------------
(1)   26/       0 :                     ; System
(1)   27/       0 :                     ; ------------------------------------------------
(1)   28/       0 :                     
(1)   29/       0 :                     ; _sysreg
(1)   30/       0 : =$0                  adapter		equ	$00		; adapter control register (Read as WORD)
(1)   31/       0 : =$1                  intmask		equ	$01		; SH2 CPU ONLY: interrupts mask
(1)   32/       0 : =$3                  standby		equ	$03		; CMD interrupt request bit by MD side (slave|master) (BYTE)
(1)   33/       0 : =$5                  hcount		equ	$05		; H Counter (BYTE)
(1)   34/       0 : =$6                  dreqctl		equ	$06		; DREQ control (WORD)
(1)   35/       0 : =$8                  dreqsource	equ	$08		; DREQ source address
(1)   36/       0 : =$C                  dreqdest	equ	$0C		; DREQ destination address
(1)   37/       0 : =$10                 dreqlen		equ	$10		; DREQ length
(1)   38/       0 : =$12                 dreqfifo	equ	$12		; DREQ FIFO
(1)   39/       0 : =$14                 vresintclr	equ	$14		; VRES interrupt clear
(1)   40/       0 : =$16                 vintclr		equ	$16		; V interrupt clear
(1)   41/       0 : =$18                 hintclr		equ	$18		; H interrupt clear
(1)   42/       0 : =$1A                 cmdintclr	equ	$1a		; CMD interrupt clear
(1)   43/       0 : =$1C                 pwmintclr	equ	$1C		; PWM interrupt clear
(1)   44/       0 : =$20                 comm0		equ	$20		; Communication ports ***
(1)   45/       0 : =$21                 comm1		equ	$21		; ALL CPUs can see this ports: including Z80
(1)   46/       0 : =$22                 comm2		equ	$22		; only be careful with the read/write directions.
(1)   47/       0 : =$23                 comm3		equ	$23		; ODD addresses (1,3,5...) are BYTE-read only.
(1)   48/       0 : =$24                 comm4		equ	$24		; EVEN addresses (0,2,4...) can be read as WORDs
(1)   49/       0 : =$25                 comm5		equ	$25		; Writing LONG addreses are possible depending
(1)   50/       0 : =$26                 comm6		equ	$26		; of the CPU's aligment limitations.
(1)   51/       0 : =$27                 comm7		equ	$27		;
(1)   52/       0 : =$28                 comm8		equ	$28		;
(1)   53/       0 : =$29                 comm9		equ	$29		;
(1)   54/       0 : =$2A                 comm10		equ	$2A		;
(1)   55/       0 : =$2B                 comm11		equ	$2B		;
(1)   56/       0 : =$2C                 comm12		equ	$2C		;
(1)   57/       0 : =$2D                 comm13		equ	$2D		;
(1)   58/       0 : =$2E                 comm14		equ	$2E		;
(1)   59/       0 : =$2F                 comm15		equ	$2F		;
(1)   60/       0 : =$30                 timerctl	equ	$30		; PWM Timer Control
(1)   61/       0 : =$31                 pwmctl		equ	$31		; PWM Control
(1)   62/       0 : =$32                 cycle		equ	$32		; PWM Cycle
(1)   63/       0 : =$34                 lchwidth	equ	$34		; PWM L ch Width
(1)   64/       0 : =$36                 rchwidth	equ	$36		; PWM R ch Width
(1)   65/       0 : =$38                 monowidth	equ	$38		; PWM Monaural Width
(1)   66/       0 :                     
(1)   67/       0 :                     ; _sysreg
(1)   68/       0 :                     ; adapter
(1)   69/       0 : =$1                  CART		equ	%00000001	; CD or Cartridge
(1)   70/       0 : =$2                  ADEN		equ	%00000010	; MARS Enabled: No/Yes
(1)   71/       0 : =$80                 FM		equ	%10000000	; SuperVDP permission: MD or SH
(1)   72/       0 :                     ; framectl
(1)   73/       0 : =$1                  FS		equ	%00000001	; Current framebuffer DRAM pixel data
(1)   74/       0 : =$2                  FEN		equ	%00000010	; Can write to Framebuffer: Yes/No
(1)   75/       0 :                     ; vdpsts
(1)   76/       0 : =$80                 VBLK		equ	%10000000	; VBlank bit
(1)   77/       0 : =$40                 HBLK		equ	%01000000	; HBlank bit
(1)   78/       0 : =$20                 PEN		equ	%00100000	; Can write to Palette: Yes/No
(1)   79/       0 :                     ; intmask
(1)   80/       0 : =$8                  VIRQ_ON		equ	$08		; IRQ masks for IRQ mask register
(1)   81/       0 : =$4                  HIRQ_ON		equ	$04
(1)   82/       0 : =$2                  CMDIRQ_ON	equ	$02
(1)   83/       0 : =$1                  PWMIRQ_ON	equ	$01
(1)   84/       0 :                     
(1)   85/       0 :                     ; _vdpreg
(1)   86/       0 : =$0                  tvmode		equ	$00		; TV mode
(1)   87/       0 : =$1                  bitmapmd	equ	$01		; Bitmap mode
(1)   88/       0 : =$2                  shift		equ	$02		; Lineshift bit
(1)   89/       0 : =$4                  filllength	equ	$04		; Auto Fill Length register
(1)   90/       0 : =$6                  fillstart	equ	$06		; Auto Fill Start Address register
(1)   91/       0 : =$8                  filldata	equ	$08		; Auto Fill Data register
(1)   92/       0 : =$A                  vdpsts		equ	$0A		; VDP Status register
(1)   93/       0 : =$B                  framectl	equ	$0B		; Frame Buffer Control register
(1)   94/       0 :                     
(1)   95/       0 :                     ; --------------------------------------------------------
(1)   96/       0 :                     ; SH2 Internal registers, independent for each CPU
(1)   97/       0 :                     ; --------------------------------------------------------
(1)   98/       0 :                     
(1)   99/       0 :                     ; DMA Channel 0: General data transfer
(1)  100/       0 :                     ; DMA Channel 1: PWM only
(1)  101/       0 :                     
(1)  102/       0 : =$FFFFFE00           _SERIAL		equ	$FFFFFE00	; Serial Control
(1)  103/       0 : =$FFFFFE10           _FRT		equ	$FFFFFE10	; Free run timer
(1)  104/       0 : =$0                  _TIER		equ	$00		; Timer interrupt enable register
(1)  105/       0 : =$1                  _TCSR		equ	$01		; Timer control & status register
(1)  106/       0 : =$2                  _FRC_H		equ	$02		; Free running counter High
(1)  107/       0 : =$3                  _FRC_L		equ	$03		; Free running counter Low
(1)  108/       0 : =$4                  _OCR_H		equ	$04		; Output compare register High
(1)  109/       0 : =$5                  _OCR_L		equ	$05		; Output compare register Low
(1)  110/       0 : =$6                  _TCR		equ	$06		; Timer control register
(1)  111/       0 : =$7                  _TOCR		equ	$07		; Timer output compare control register
(1)  112/       0 : =$FFFFFE92           _CCR		equ	$FFFFFE92	; Cache register (WORD)
(1)  113/       0 : =$FFFFFF00           _JR		equ	$FFFFFF00	; DIVU (--- / val)
(1)  114/       0 : =$FFFFFF04           _HRL32		equ	$FFFFFF04	; DIVU (val / ---) or RIGHT-long result if read
(1)  115/       0 : =$FFFFFF10           _HRH		equ	$FFFFFF10	; DIVU Result: LEFT long
(1)  116/       0 : =$FFFFFF14           _HRL		equ	$FFFFFF14	; DIVU Result: RIGHT long
(1)  117/       0 : =$FFFFFF80           _DMASOURCE0	equ	$FFFFFF80	; DMA source address 0
(1)  118/       0 : =$FFFFFF84           _DMADEST0	equ	$FFFFFF84	; DMA destination address 0
(1)  119/       0 : =$FFFFFF88           _DMACOUNT0	equ	$FFFFFF88	; DMA transfer count 0
(1)  120/       0 : =$FFFFFF8C           _DMACHANNEL0	equ	$FFFFFF8C	; DMA channel control 0
(1)  121/       0 : =$FFFFFF90           _DMASOURCE1	equ	$FFFFFF90	; DMA source address 1
(1)  122/       0 : =$FFFFFF94           _DMADEST1	equ	$FFFFFF94	; DMA destination address 1
(1)  123/       0 : =$FFFFFF98           _DMACOUNT1	equ	$FFFFFF98	; DMA transfer count 1
(1)  124/       0 : =$FFFFFF9C           _DMACHANNEL1	equ	$FFFFFF9C	; DMA channel control 1
(1)  125/       0 : =$FFFFFFA0           _DMAVECTORN0	equ	$FFFFFFA0	; DMA vector number N0
(1)  126/       0 : =$FFFFFFA4           _DMAVECTORE0	equ	$FFFFFFA4	; DMA vector number E0
(1)  127/       0 : =$FFFFFFA8           _DMAVECTORN1	equ	$FFFFFFA8	; DMA vector number N1
(1)  128/       0 : =$FFFFFFAC           _DMAVECTORE1	equ	$FFFFFFAC	; DMA vector number E1
(1)  129/       0 : =$FFFFFFB0           _DMAOPERATION	equ	$FFFFFFB0	; DMA operation
(1)  130/       0 : =$FFFFFFB4           _DMAREQACK0	equ	$FFFFFFB4	; DMA request/ack select control 0
(1)  131/       0 : =$FFFFFFB8           _DMAREQACK1	equ	$FFFFFFB8	; DMA request/ack select control 1
(1)  132/       0 :                     
      99/       0 :                     		include	"system/md/map.asm"	; Genesis hardware map and other areas
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Genesis / Pico 68000 map
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 : =$200000             sys_exram	equ	$200000		; Second half of 4MB rom or external RAM (Normal or save data)
(1)    7/       0 : =$A00000             z80_cpu		equ	$A00000		; Z80 CPU area, size: $2000
(1)    8/       0 : =$A04000             ym_ctrl_1	equ	$A04000		; YM2612 reg 1
(1)    9/       0 : =$A04001             ym_data_1	equ	$A04001		; YM2612 reg 2
(1)   10/       0 : =$A04002             ym_ctrl_2	equ	$A04002		; YM2612 reg 1
(1)   11/       0 : =$A04003             ym_data_2	equ	$A04003		; YM2612 reg 2
(1)   12/       0 : =$A10001             sys_io		equ	$A10001		; bits: OVRSEAS(7)|PAL(6)|DISK(5)|VER(3-0)
(1)   13/       0 : =$A10003             sys_data_1	equ	$A10003		; Port 1 DATA
(1)   14/       0 : =$A10005             sys_data_2	equ	$A10005		; Port 2 DATA
(1)   15/       0 : =$A10007             sys_data_3	equ	$A10007		; Modem DATA
(1)   16/       0 : =$A10009             sys_ctrl_1	equ	$A10009		; Port 1 CTRL
(1)   17/       0 : =$A1000B             sys_ctrl_2	equ	$A1000B		; Port 2 CTRL
(1)   18/       0 : =$A1000D             sys_ctrl_3	equ	$A1000D		; Modem CTRL
(1)   19/       0 : =$A11100             z80_bus 	equ	$A11100		; only use bit 0 (bit 8 as WORD)
(1)   20/       0 : =$A11200             z80_reset	equ	$A11200		; WRITE only ($0000 reset/$0100 cancel)
(1)   21/       0 : =$A130F1             md_bank_sram	equ	$A130F1		; Make SRAM visible at $200000
(1)   22/       0 : =$A14000             sys_tmss	equ	$A14000		; write "SEGA" here for ver > 0
(1)   23/       0 : =$C00000             vdp_data	equ	$C00000		; video data port
(1)   24/       0 : =$C00004             vdp_ctrl	equ	$C00004		; video control port
(1)   25/       0 : =$C00011             psg_ctrl	equ	$C00011		; PSG control
(1)   26/       0 :                     
(1)   27/       0 :                     ; ----------------------------------------------------------------
(1)   28/       0 :                     ; SEGA CD map
(1)   29/       0 :                     ; ----------------------------------------------------------------
(1)   30/       0 :                     
(1)   31/       0 : =$200000             sysmcd_wram	equ	$200000
(1)   32/       0 : =$A12000             sysmcd_reg	equ	$A12000
(1)   33/       0 :                     
(1)   34/       0 :                     ; ----------------------------------------------------------------
(1)   35/       0 :                     ; 32X map
(1)   36/       0 :                     ; ----------------------------------------------------------------
(1)   37/       0 :                     
(1)   38/       0 : =$A130EC             sysmars_id	equ	$A130EC		; 32X's ID: "MARS"
(1)   39/       0 : =$A15100             sysmars_reg	equ	$A15100		; MARS 32X registers section, see system/mars/map.asm for variables
(1)   40/       0 :                     
(1)   41/       0 :                     ; ----------------------------------------------------------------
(1)   42/       0 :                     ; Genesis / Mega drive Z80 map
(1)   43/       0 :                     ; ----------------------------------------------------------------
(1)   44/       0 :                     
(1)   45/       0 : =$4000               zym_ctrl_1	equ	$4000		; YM2612 reg 1
(1)   46/       0 : =$4001               zym_data_1	equ	$4001		; YM2612 reg 2
(1)   47/       0 : =$4002               zym_ctrl_2	equ	$4002		; YM2612 reg 1
(1)   48/       0 : =$4003               zym_data_2	equ	$4003		; YM2612 reg 2
(1)   49/       0 : =$6000               zbank		equ	$6000		; Z80 ROM BANK: %XXXXXXXX X0000000 00000000 (9 writes)
(1)   50/       0 :                     ; zvdp_data	equ	$7F00		; video data port
(1)   51/       0 :                     ; zvdp_ctrl	equ	$7F04		; video control port
(1)   52/       0 : =$7F11               zpsg_ctrl	equ	$7F11		; PSG control
(1)   53/       0 :                     
     100/       0 :                     		include	"system/md/ram.asm"	; Genesis RAM sections
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; MD RAM
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; Reserved RAM sections:
(1)    6/       0 :                     ; $FFFD00-$FFFDFF: Sega CD's vectors
(1)    7/       0 :                     ; $FFFE80-$FFFFFF: Z80 write-only scratchpad
(1)    8/       0 :                     ; ----------------------------------------------------------------
(1)    9/       0 :                     
(1)   10/       0 :                     ; --------------------------------------------------------
(1)   11/       0 :                     ; Settings
(1)   12/       0 :                     ; --------------------------------------------------------
(1)   13/       0 :                     
(1)   14/       0 : (MACRO)              			strct $FFFF0000
(1)   14/       0 : =$0                  GLBL_LASTPC     set *
(1)   14/FFFFFFFFFFFFEA04 :                                     dephase
(1)   14/FFFFFFFFFFFF0000 :                                     phase $FFFF0000
(1)   14/FFFFFFFFFFFF0000 : =$FFFFFFFFFFFF0000   GLBL_LASTORG    set *
(1)   15/FFFFFFFFFFFF0000 :                     RAM_SystemCode		ds.b MAX_SysCode	; CD/32X/CD32X
(1)   16/FFFFFFFFFFFF2000 :                     RAM_UserCode		ds.b MAX_UserCode	; CD/32X/CD32X
(1)   17/FFFFFFFFFFFFA000 :                     
(1)   18/FFFFFFFFFFFFA000 :                     ; ------------------------------------------------
(1)   19/FFFFFFFFFFFFA000 :                     ; > $FF8000 section
(1)   20/FFFFFFFFFFFFA000 :                     ; ------------------------------------------------
(1)   21/FFFFFFFFFFFFA000 :                     
(1)   22/FFFFFFFFFFFFA000 :                     check_thisram		ds.l 0			; <-- get current pos
(1)   26/FFFFFFFFFFFFA004 :                     RAM_MdVideo		ds.b MAX_MdVideo	; $FF8000
(1)   27/FFFFFFFFFFFFC004 :                     RAM_MdSystem		ds.b MAX_MdSystem	;
(1)   28/FFFFFFFFFFFFC604 :                     RAM_MdOther		ds.b MAX_MdOther	; 32X's DREQ goes here
(1)   29/FFFFFFFFFFFFD204 :                     RAM_ScrnBuff		ds.b MAX_ScrnBuff
(1)   30/FFFFFFFFFFFFEA04 :                     RAM_MdGlobal		ds.b sizeof_MdGlbl
(1)   31/FFFFFFFFFFFFD40C :                     sizeof_MdRam		ds.l 0
(1)   32/FFFFFFFFFFFFD410 : (MACRO)              			endstrct
(1)   32/FFFFFFFFFFFF0000 :                                     org GLBL_LASTORG
(1)   32/       0 :                                     phase GLBL_LASTPC
(1)   36/       0 :                     
(1)   37/       0 :                     ; ------------------------------------------------
(1)   38/       0 :                     ; Add-on area
(1)   39/       0 :                     ; ------------------------------------------------
(1)   40/       0 :                     
(1)   41/       0 : (MACRO)              			strct RAM_MdOther
(1)   41/       0 : =$0                  GLBL_LASTPC     set *
(1)   41/FFFFFFFFFFFF0000 :                                     dephase
(1)   41/FFFFFFFFFFFFC604 :                                     phase RAM_MDOTHER
(1)   41/FFFFFFFFFFFFC604 : =$FFFFFFFFFFFFC604   GLBL_LASTORG    set *
(1)   42/FFFFFFFFFFFFC604 :                     RAM_MdDreq		ds.b $C00		; 32X DREQ area (MANUAL SIZE)
(1)   43/FFFFFFFFFFFFD204 :                     sizeof_RamOther		ds.l 0
(1)   44/FFFFFFFFFFFFD208 : (MACRO)              			endstrct
(1)   44/FFFFFFFFFFFFC604 :                                     org GLBL_LASTORG
(1)   44/       0 :                                     phase GLBL_LASTPC
(1)   45/       0 : (MACRO)              			erreport "ADD-ON RAM USES",(sizeof_RamOther-RAM_MdOther),MAX_MdOther
(1)   46/       0 :                     
(1)   47/       0 :                     ; ------------------------------------------------
(1)   48/       0 :                     ; Other
(1)   49/       0 :                     ; ------------------------------------------------
(1)   50/       0 :                     
(1)   51/       0 : =$FFFFFD00           RAM_Stack		equ RAM_MegaCd			; <-- goes backwards
(1)   52/       0 : =$FFFFFD00           RAM_MegaCd		equ $FFFFFD00
(1)   53/       0 : =$FFFFFF00           RAM_ZSndBuff		equ $FFFFFF00
(1)   54/       0 :                     
     101/       0 :                     		include	"system/shared.asm"	; Shared variables and specials
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Shared variables
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; ====================================================================
(1)    7/       0 :                     ; ----------------------------------------------------------------
(1)    8/       0 :                     ; 32X SECTION
(1)    9/       0 :                     ; ----------------------------------------------------------------
(1)   10/       0 :                     
(1)   12/       0 :                     
(1)   13/       0 :                     ; --------------------------------------------------------
(1)   14/       0 :                     ; Settings
(1)   15/       0 :                     ; --------------------------------------------------------
(1)   16/       0 :                     
(1)   17/       0 : =$10                 MAX_MARSSPR	equ 16
(1)   18/       0 :                     
(1)   19/       0 :                     ; --------------------------------------------------------
(1)   20/       0 :                     ; Structs
(1)   21/       0 :                     ; --------------------------------------------------------
(1)   22/       0 :                     
(1)   23/       0 : (MACRO)              		strct 0
(1)   23/       0 : =$0                  GLBL_LASTPC     set *
(1)   23/FFFFFFFFFFFFC604 :                                     dephase
(1)   23/       0 :                                     phase 0
(1)   23/       0 : =$0                  GLBL_LASTORG    set *
(1)   24/       0 :                     mscrl_Art	ds.l 1		; Block data on SH2 map
(1)   25/       4 :                     mscrl_Xpos	ds.l 1		; 0000.0000
(1)   26/       8 :                     mscrl_Ypos	ds.l 1		; 0000.0000
(1)   27/       C :                     mscrl_Ybot	ds.w 1		; TODO
(1)   28/       E :                     mscrl_Ytop	ds.w 1
(1)   29/      10 :                     sizeof_marsscrl	ds.l 1
(1)   30/      14 : (MACRO)              		endstrct
(1)   30/       0 :                                     org GLBL_LASTORG
(1)   30/       0 :                                     phase GLBL_LASTPC
(1)   31/       0 :                     
(1)   32/       0 : (MACRO)              		strct 0
(1)   32/       0 : =$0                  GLBL_LASTPC     set *
(1)   32/       0 :                                     dephase
(1)   32/       0 :                                     phase 0
(1)   32/       0 : =$0                  GLBL_LASTORG    set *
(1)   33/       0 :                     sspr_Flags	ds.w 1
(1)   34/       2 :                     sspr_Frame	ds.w 1
(1)   35/       4 :                     sspr_Size	ds.w 1		; XXYY
(1)   36/       6 :                     sspr_Indx	ds.w 1
(1)   37/       8 :                     sspr_Xpos	ds.w 1
(1)   38/       A :                     sspr_Ypos	ds.w 1
(1)   39/       C :                     sspr_Art	ds.l 1
(1)   40/      10 :                     sizeof_marsspr	ds.l 1
(1)   41/      14 : (MACRO)              		endstrct
(1)   41/       0 :                                     org GLBL_LASTORG
(1)   41/       0 :                                     phase GLBL_LASTPC
(1)   42/       0 :                     
(1)   43/       0 :                     ; ----------------------------------------------------------------
(1)   44/       0 :                     ; 32X DREQ-RAM
(1)   45/       0 :                     ;
(1)   46/       0 :                     ; To read these labels:
(1)   47/       0 :                     ;
(1)   48/       0 :                     ; On the Genesis Side:
(1)   49/       0 :                     ; 	lea	(RAM_MdDreq+DREQ_LABEL),aX ; This or similar.
(1)   50/       0 :                     ; On the 32X Side:
(1)   51/       0 :                     ; 	mov	#DREQ_LABEL,rX
(1)   52/       0 :                     ; 	mov	@(marsGbl_DmaRead,gbr),r0
(1)   53/       0 :                     ;	add	r0,rX
(1)   54/       0 :                     ; ----------------------------------------------------------------
(1)   55/       0 :                     
(1)   56/       0 :                     ; *** List MUST be aligned by 8bytes, end with 0 or 8 ***
(1)   57/       0 :                     
(1)   58/       0 : (MACRO)              		strct 0
(1)   58/       0 : =$0                  GLBL_LASTPC     set *
(1)   58/       0 :                                     dephase
(1)   58/       0 :                                     phase 0
(1)   58/       0 : =$0                  GLBL_LASTORG    set *
(1)   59/       0 :                     Dreq_Palette	ds.w 256			; 256-color palette *DON'T MOVE THIS*
(1)   60/     200 :                     Dreq_ScrlData	ds.w (512/16)*(256/16)
(1)   61/     600 :                     Dreq_ScrlBuff	ds.b sizeof_marsscrl
(1)   62/     610 :                     Dreq_SuperSpr	ds.b sizeof_marsspr*MAX_MARSSPR
(1)   63/     710 :                     sizeof_dreq	ds.l 0
(1)   64/     710 : (MACRO)              		endstrct
(1)   64/       0 :                                     org GLBL_LASTORG
(1)   64/       0 :                                     phase GLBL_LASTPC
(1)   65/       0 :                     
DREQ RAM uses: 710
(1)   70/       0 :                     		message "DREQ RAM uses: \{sizeof_dreq}"
(1)   73/       0 :                     
(1)   74/       0 :                     ; --------------------------------------------------------
(1)   75/       0 :                     ; Labels
(1)   76/       0 :                     ; --------------------------------------------------------
(1)   77/       0 :                     
(1)   78/       0 :                     
(1)   79/       0 : =$FFFFFFFFFFFFC604   RAM_MdMars_Palette	equ RAM_MdDreq+Dreq_Palette
(1)   80/       0 : =$FFFFFFFFFFFFCC14   RAM_MdMars_SuperSpr	equ RAM_MdDreq+Dreq_SuperSpr
(1)   81/       0 : =$FFFFFFFFFFFFC804   RAM_MdMars_ScrlData	equ RAM_MdDreq+Dreq_ScrlData
(1)   82/       0 : =$FFFFFFFFFFFFCC04   RAM_MdMars_ScrlBuff	equ RAM_MdDreq+Dreq_ScrlBuff
(1)   83/       0 :                     
(1)   84/       0 :                     ; --------------------------------------------------------
(1)   85/       0 :                     
(1)   87/       0 :                     
     102/       0 :                     
     103/       0 :                     ; ====================================================================
     104/       0 :                     ; ----------------------------------------------------------------
     105/       0 :                     ; Init procedures for all systems
     106/       0 :                     ; ----------------------------------------------------------------
     107/       0 :                     
     108/       0 :                     ; ---------------------------------------------
     109/       0 :                     ; SEGA 32X
     110/       0 :                     ; ---------------------------------------------
     111/       0 :                     
     113/       0 :                     		include	"system/head_mars.asm"			; 32X header
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; SEGA 32X header
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 : FFFF FD00           		dc.l RAM_Stack		; Stack point
(1)    7/       4 : 0000 03F0           		dc.l $3F0		; Entry point (MUST point to $3F0)
(1)    8/       8 : 0000 0820           		dc.l MD_ErrBus		; Bus error
(1)    9/       C : 0000 0820           		dc.l MD_ErrAddr		; Address error
(1)   10/      10 : 0000 0820           		dc.l MD_ErrIll		; ILLEGAL Instruction
(1)   11/      14 : 0000 0820           		dc.l MD_ErrZDiv		; Divide by 0
(1)   12/      18 : 0000 0820           		dc.l MD_ErrChk		; CHK Instruction
(1)   13/      1C : 0000 0820           		dc.l MD_ErrTrapV	; TRAPV Instruction
(1)   14/      20 : 0000 0820           		dc.l MD_ErrPrivl	; Privilege violation
(1)   15/      24 : 0000 0820           		dc.l MD_Trace		; Trace
(1)   16/      28 : 0000 0820           		dc.l MD_Line1010	; Line 1010 Emulator
(1)   17/      2C : 0000 0820           		dc.l MD_Line1111	; Line 1111 Emulator
(1)   18/      30 : 0000 0820           		dc.l MD_ErrorEx		; Error exception
(1)   19/      34 : 0000 0820           		dc.l MD_ErrorEx
(1)   20/      38 : 0000 0820           		dc.l MD_ErrorEx
(1)   21/      3C : 0000 0820           		dc.l MD_ErrorEx
(1)   22/      40 : 0000 0820           		dc.l MD_ErrorEx
(1)   23/      44 : 0000 0820           		dc.l MD_ErrorEx
(1)   24/      48 : 0000 0820           		dc.l MD_ErrorEx
(1)   25/      4C : 0000 0820           		dc.l MD_ErrorEx
(1)   26/      50 : 0000 0820           		dc.l MD_ErrorEx
(1)   27/      54 : 0000 0820           		dc.l MD_ErrorEx
(1)   28/      58 : 0000 0820           		dc.l MD_ErrorEx
(1)   29/      5C : 0000 0820           		dc.l MD_ErrorEx
(1)   30/      60 : 0000 0820           		dc.l MD_ErrorEx
(1)   31/      64 : 0000 0820           		dc.l MD_ErrorTrap
(1)   32/      68 : 0000 0820           		dc.l MD_ErrorTrap
(1)   33/      6C : 0000 0820           		dc.l MD_ErrorTrap
(1)   34/      70 : FFFF C452           		dc.l RAM_MdMarsHInt	; RAM jump for HBlank (JMP xxxx xxxx)
(1)   35/      74 : 0000 0820           		dc.l MD_ErrorTrap
(1)   36/      78 : FFFF C44C           		dc.l RAM_MdMarsVInt	; RAM jump for VBlank (JMP xxxx xxxx)
(1)   37/      7C : 0000 0820           		dc.l MD_ErrorTrap
(1)   38/      80 : 0000 0820           		dc.l MD_ErrorTrap
(1)   39/      84 : 0000 0820           		dc.l MD_ErrorTrap
(1)   40/      88 : 0000 0820           		dc.l MD_ErrorTrap
(1)   41/      8C : 0000 0820           		dc.l MD_ErrorTrap
(1)   42/      90 : 0000 0820           		dc.l MD_ErrorTrap
(1)   43/      94 : 0000 0820           		dc.l MD_ErrorTrap
(1)   44/      98 : 0000 0820           		dc.l MD_ErrorTrap
(1)   45/      9C : 0000 0820           		dc.l MD_ErrorTrap
(1)   46/      A0 : 0000 0820           		dc.l MD_ErrorTrap
(1)   47/      A4 : 0000 0820           		dc.l MD_ErrorTrap
(1)   48/      A8 : 0000 0820           		dc.l MD_ErrorTrap
(1)   49/      AC : 0000 0820           		dc.l MD_ErrorTrap
(1)   50/      B0 : 0000 0820           		dc.l MD_ErrorTrap
(1)   51/      B4 : 0000 0820           		dc.l MD_ErrorTrap
(1)   52/      B8 : 0000 0820           		dc.l MD_ErrorTrap
(1)   53/      BC : 0000 0820           		dc.l MD_ErrorTrap
(1)   54/      C0 : 0000 0820           		dc.l MD_ErrorTrap
(1)   55/      C4 : 0000 0820           		dc.l MD_ErrorTrap
(1)   56/      C8 : 0000 0820           		dc.l MD_ErrorTrap
(1)   57/      CC : 0000 0820           		dc.l MD_ErrorTrap
(1)   58/      D0 : 0000 0820           		dc.l MD_ErrorTrap
(1)   59/      D4 : 0000 0820           		dc.l MD_ErrorTrap
(1)   60/      D8 : 0000 0820           		dc.l MD_ErrorTrap
(1)   61/      DC : 0000 0820           		dc.l MD_ErrorTrap
(1)   62/      E0 : 0000 0820           		dc.l MD_ErrorTrap
(1)   63/      E4 : 0000 0820           		dc.l MD_ErrorTrap
(1)   64/      E8 : 0000 0820           		dc.l MD_ErrorTrap
(1)   65/      EC : 0000 0820           		dc.l MD_ErrorTrap
(1)   66/      F0 : 0000 0820           		dc.l MD_ErrorTrap
(1)   67/      F4 : 0000 0820           		dc.l MD_ErrorTrap
(1)   68/      F8 : 0000 0820           		dc.l MD_ErrorTrap
(1)   69/      FC : 0000 0820           		dc.l MD_ErrorTrap
(1)   70/     100 : 5345 4741 2033      		dc.b "SEGA 32X        "
              106 : 3258 2020 2020 
              10C : 2020 2020          
(1)   71/     110 : 2843 2947 4636      		dc.b "(C)GF64 2024.???"
              116 : 3420 3230 3234 
              11C : 2E3F 3F3F          
(1)   72/     120 : 4E69 6B6F 6E61      		dc.b "Nikona MARS                                     "
              126 : 204D 4152 5320 
              12C : 2020 2020 2020 
              132 : 2020 2020 2020 
              138 : 2020 2020 2020 
              13E : 2020 2020 2020 
              144 : 2020 2020 2020 
              14A : 2020 2020 2020    
(1)   73/     150 : 4E69 6B6F 6E61      		dc.b "Nikona MARS                                     "
              156 : 204D 4152 5320 
              15C : 2020 2020 2020 
              162 : 2020 2020 2020 
              168 : 2020 2020 2020 
              16E : 2020 2020 2020 
              174 : 2020 2020 2020 
              17A : 2020 2020 2020    
(1)   74/     180 : 474D 2048 4F4D      		dc.b "GM HOMEBREW-02"
              186 : 4542 5245 572D 
              18C : 3032             
(1)   75/     18E : 0000                		dc.w 0
(1)   76/     190 : 4A36 4D20 2020      		dc.b "J6M             "
              196 : 2020 2020 2020 
              19C : 2020 2020          
(1)   77/     1A0 : 0000 0000           		dc.l 0
(1)   78/     1A4 : 0006 C038           		dc.l ROM_END
(1)   79/     1A8 : 00FF 0000           		dc.l $FF0000
(1)   80/     1AC : 00FF FFFF           		dc.l $FFFFFF
(1)   81/     1B0 : 5241 F820           		dc.b "RA",$F8,$20
(1)   82/     1B4 : 0020 0001           		dc.l $200001
(1)   83/     1B8 : 0020 3FFF           		dc.l $203FFF
(1)   84/     1BC :                     		align $1F0
(1)   85/     1F0 : 4A55 4520 2020      		dc.b "JUE             "
              1F6 : 2020 2020 2020 
              1FC : 2020 2020          
(1)   86/     200 :                     
(1)   87/     200 :                     ; ====================================================================
(1)   88/     200 :                     ; ----------------------------------------------------------------
(1)   89/     200 :                     ; NEW 32X jumps
(1)   90/     200 :                     ; ----------------------------------------------------------------
(1)   91/     200 :                     
(1)   92/     200 : 4EF9 0088 0800      		jmp	($880000|MARS_Entry).l
(1)   93/     206 : 4EF9 0088 0820      		jmp	($880000|MD_ErrBus).l		; Bus error
(1)   94/     20C : 4EF9 0088 0820      		jmp	($880000|MD_ErrAddr).l		; Address error
(1)   95/     212 : 4EF9 0088 0820      		jmp	($880000|MD_ErrIll).l		; ILLEGAL Instruction
(1)   96/     218 : 4EF9 0088 0820      		jmp	($880000|MD_ErrZDiv).l		; Divide by 0
(1)   97/     21E : 4EF9 0088 0820      		jmp	($880000|MD_ErrChk).l		; CHK Instruction
(1)   98/     224 : 4EF9 0088 0820      		jmp	($880000|MD_ErrTrapV).l		; TRAPV Instruction
(1)   99/     22A : 4EF9 0088 0820      		jmp	($880000|MD_ErrPrivl).l		; Privilege violation
(1)  100/     230 : 4EF9 0088 0820      		jmp	($880000|MD_Trace).l		; Trace
(1)  101/     236 : 4EF9 0088 0820      		jmp	($880000|MD_Line1010).l		; Line 1010 Emulator
(1)  102/     23C : 4EF9 0088 0820      		jmp	($880000|MD_Line1111).l		; Line 1111 Emulator
(1)  103/     242 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorEx).l		; Error exception
(1)  104/     248 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorEx).l
(1)  105/     24E : 4EF9 0088 0820      		jmp	($880000|MD_ErrorEx).l
(1)  106/     254 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorEx).l
(1)  107/     25A : 4EF9 0088 0820      		jmp	($880000|MD_ErrorEx).l
(1)  108/     260 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorEx).l
(1)  109/     266 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorEx).l
(1)  110/     26C : 4EF9 0088 0820      		jmp	($880000|MD_ErrorEx).l
(1)  111/     272 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorEx).l
(1)  112/     278 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorEx).l
(1)  113/     27E : 4EF9 0088 0820      		jmp	($880000|MD_ErrorEx).l
(1)  114/     284 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorEx).l
(1)  115/     28A : 4EF9 0088 0820      		jmp	($880000|MD_ErrorEx).l
(1)  116/     290 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  117/     296 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  118/     29C : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  119/     2A2 : 4EF9 FFFF C452      		jmp	(RAM_MdMarsHInt).l		; RAM jump for HBlank (JMP xxxx xxxx)
(1)  120/     2A8 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  121/     2AE : 4EF9 FFFF C44C      		jmp	(RAM_MdMarsVInt).l		; RAM jump for VBlank (JMP xxxx xxxx)
(1)  122/     2B4 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  123/     2BA : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  124/     2C0 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  125/     2C6 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  126/     2CC : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  127/     2D2 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  128/     2D8 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  129/     2DE : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  130/     2E4 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  131/     2EA : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  132/     2F0 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  133/     2F6 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  134/     2FC : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  135/     302 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  136/     308 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  137/     30E : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  138/     314 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  139/     31A : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  140/     320 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  141/     326 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  142/     32C : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  143/     332 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  144/     338 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  145/     33E : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  146/     344 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  147/     34A : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  148/     350 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  149/     356 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  150/     35C : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  151/     362 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  152/     368 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  153/     36E : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  154/     374 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  155/     37A :                     
(1)  156/     37A :                     ; ----------------------------------------------------------------
(1)  157/     37A :                     
(1)  158/     37A :                     		align $3C0
(1)  159/     3C0 : 4D41 5253 2043      		dc.b "MARS CHECK MODE "			; Module name
              3C6 : 4845 434B 204D 
              3CC : 4F44 4520          
(1)  160/     3D0 : 0000 0000           		dc.l 0					; Version (always 0)
(1)  161/     3D4 : 0000 3F70           		dc.l MARS_RAMCODE			; RAM-code location *Set to 0 if SH2 code points to ROM*
(1)  162/     3D8 : 0000 0000           		dc.l 0					; Zero again.
(1)  163/     3DC : 0002 9CC0           		dc.l MARS_RAMCODE_e-MARS_RAMCODE	; RAM-code size (END-START) *Set to 4 if SH2 code points to ROM*
(1)  164/     3E0 : 0600 0710           		dc.l SH2_M_Entry			; Master SH2 PC (SH2 area)
(1)  165/     3E4 : 0600 0A44           		dc.l SH2_S_Entry			; Slave SH2 PC (SH2 area)
(1)  166/     3E8 : 0600 0000           		dc.l SH2_Master				; Master SH2 default VBR
(1)  167/     3EC : 0600 0128           		dc.l SH2_Slave				; Slave SH2 default VBR
(1)  168/     3F0 :                     		binclude "system/mars/data/security.bin"; All the securty/boot code
(1)  169/     800 :                     
(1)  170/     800 :                     ; ====================================================================
(1)  171/     800 :                     ; ----------------------------------------------------------------
(1)  172/     800 :                     ; Entry point, this must be located at $800
(1)  173/     800 :                     ;
(1)  174/     800 :                     ; At this point, these registers return
(1)  175/     800 :                     ; the following bits:
(1)  176/     800 :                     ;
(1)  177/     800 :                     ; d0: %h0000000 rsc000ti
(1)  178/     800 :                     ; 	h - Cold start / Hot Start
(1)  179/     800 :                     ; 	r - SDRAM self check pass or error
(1)  180/     800 :                     ; 	s - Security check pass or error
(1)  181/     800 :                     ; 	c - Checksum pass or error
(1)  182/     800 :                     ; 	t - TV mode pass or error
(1)  183/     800 :                     ; 	i - MARS ID pass or error
(1)  184/     800 :                     ;
(1)  185/     800 :                     ; d1: %m0000000 jdk0vvv
(1)  186/     800 :                     ; 	m - MARS TV mode
(1)  187/     800 :                     ; 	j - Country: Japan / Overseas
(1)  188/     800 :                     ; 	d - MD TV mode
(1)  189/     800 :                     ; 	k - DISK connected: Yes / No
(1)  190/     800 :                     ; 	v - Version
(1)  191/     800 :                     ;
(1)  192/     800 :                     ; Carry flag: "MARS ID" and Self Check result
(1)  193/     800 :                     ; 	cc: Test passed
(1)  194/     800 :                     ; 	cs: Test failed**
(1)  195/     800 :                     ;
(1)  196/     800 :                     ; ** HARDWARE BUG: This may still trigger if pressing
(1)  197/     800 :                     ; RESET so many times. (Found this on VRDX)
(1)  198/     800 :                     ; * WORKAROUND: After jumping to .no_mars, test the checksum
(1)  199/     800 :                     ; bit again and if it passes Initialize as usual.
(1)  200/     800 :                     ; ----------------------------------------------------------------
(1)  201/     800 :                     
(1)  202/     800 :                     MARS_Entry:
(1)  203/     800 : 6436                		bcc	MD_Init			; Carry clear: pass
(1)  204/     802 :                     
(1)  205/     802 :                     ; ====================================================================
(1)  206/     802 :                     ; ----------------------------------------------------------------
(1)  207/     802 :                     ; If 32X is not detected...
(1)  208/     802 :                     ; ----------------------------------------------------------------
(1)  209/     802 :                     
(1)  210/     802 :                     .no_mars:
(1)  211/     802 : 0800 0005           		btst	#5,d0			; Check the checksum AGAIN in case we got here
(1)  212/     806 : 6730                		beq.s	MD_Init			; by mistake.
(1)  213/     808 : 46FC 2700           		move.w	#$2700,sr		; Disable interrupts
(1)  214/     80C : 23FC C000 0000      		move.l	#$C0000000,(vdp_ctrl).l	; VDP: Point to Color 0
              812 : 00C0 0004          
(1)  215/     816 : 33FC 0E00 00C0      		move.w	#$0E00,(vdp_data).l	; BLUE screen
              81C : 0000             
(1)  216/     81E : 60FE                		bra.s	*			; Infinite loop.
(1)  217/     820 :                     
(1)  218/     820 :                     ; ====================================================================
(1)  219/     820 :                     ; ----------------------------------------------------------------
(1)  220/     820 :                     ; 68k's Error handlers
(1)  221/     820 :                     ;
(1)  222/     820 :                     ; HBlank and VBlank jump to RAM
(1)  223/     820 :                     ; ----------------------------------------------------------------
(1)  224/     820 :                     
(1)  225/     820 :                     MD_ErrBus:		; Bus error
(1)  226/     820 :                     MD_ErrAddr:		; Address error
(1)  227/     820 :                     MD_ErrIll:		; ILLEGAL Instruction
(1)  228/     820 :                     MD_ErrZDiv:		; Divide by 0
(1)  229/     820 :                     MD_ErrChk:		; CHK Instruction
(1)  230/     820 :                     MD_ErrTrapV:		; TRAPV Instruction
(1)  231/     820 :                     MD_ErrPrivl:		; Privilege violation
(1)  232/     820 :                     MD_Trace:		; Trace
(1)  233/     820 :                     MD_Line1010:		; Line 1010 Emulator
(1)  234/     820 :                     MD_Line1111:		; Line 1111 Emulator
(1)  235/     820 :                     MD_ErrorEx:		; Error exception
(1)  236/     820 :                     MD_ErrorTrap:
(1)  237/     820 : 46FC 2700           		move.w	#$2700,sr			; Disable interrupts
(1)  238/     824 : 23FC C000 0000      		move.l	#$C0000000,(vdp_ctrl).l		; RED screen
              82A : 00C0 0004          
(1)  239/     82E : 33FC 000E 00C0      		move.w	#$000E,(vdp_data).l
              834 : 0000             
(1)  240/     836 : 60FE                		bra.s	*
(1)  241/     838 :                     
(1)  242/     838 :                     ; ====================================================================
(1)  243/     838 :                     ; ----------------------------------------------------------------
(1)  244/     838 :                     ; Init
(1)  245/     838 :                     ; ----------------------------------------------------------------
(1)  246/     838 :                     
(1)  247/     838 :                     MD_Init:
(1)  248/     838 : 46FC 2700           		move.w	#$2700,sr
(1)  249/     83C : 4A79 00C0 0004      		tst.w	(vdp_ctrl).l
(1)  250/     842 : 41F9 FFFF 0000      		lea	($FFFF0000),a0		; Clean our RAM.
(1)  251/     848 : 223C FFFF D40C      		move.l	#sizeof_mdram,d1
(1)  252/     84E : 7000                		moveq	#0,d0
(1)  253/     850 : 30C0                .loop_ram:	move.w	d0,(a0)+
(1)  254/     852 : B1C1                		cmp.l	d1,a0
(1)  255/     854 : 65FA                		bcs.s	.loop_ram
(1)  256/     856 : 4CF9 7FFF 00FF      		movem.l	($FF0000),d0-a6		; Clean registers using zeros from RAM
              85C : 0000             
(1)  257/     85E : 4DF9 00C0 0004      		lea	(vdp_ctrl).l,a6
(1)  258/     864 : 4BF9 00A1 5100      		lea	(sysmars_reg).l,a5
(1)  259/     86A : 3E16                .wait_dma:	move.w	(a6),d7			; Check if DMA is active.
(1)  260/     86C : 0807 0001           		btst	#1,d7
(1)  261/     870 : 66F8                		bne.s	.wait_dma
(1)  262/     872 : 2CBC 8004 8104      		move.l	#$80048104,(a6)		; Default top VDP regs
(1)  263/     878 : 7000                		moveq	#0,d0			; Clear both Master and Slave comm's
(1)  264/     87A : 2B40 002C           		move.l	d0,comm12(a5)
(1)  265/     87E : 4FF8 FD00           		lea	(RAM_Stack),sp		; HW: Set STACK manually, Pressing RESET moves it to 0
(1)  266/     882 : 3E3C 00FF           		move.w	#$FF,d7			; Wait until SH2 gets first.
(1)  267/     886 :                     .wait_sh2:
(1)  268/     886 : 3C3C 007F           		move.w	#$7F,d6
(1)  269/     88A : 51CE FFFE           		dbf	d6,*
(1)  270/     88E : 51CF FFF6           		dbf	d7,.wait_sh2
(1)  271/     892 :                     
     114/     892 : 41F9 0088 08C6      		lea	($880000+Md_SysCode),a0			; Transfer SYSTEM subs
     115/     898 : 43F9 FFFF 0000      		lea	(RAM_SystemCode),a1
     116/     89E : 303C 16ED           		move.w	#((Md_SysCode_e-Md_SysCode))-1,d0
     117/     8A2 :                     .copy_1:
     118/     8A2 : 12D8                		move.b	(a0)+,(a1)+
     119/     8A4 : 51C8 FFFC           		dbf	d0,.copy_1
     120/     8A8 : 4EB9 FFFF 0000      		jsr	(Sound_init).l			; Init Sound driver FIRST
     121/     8AE : 4EB9 FFFF 0284      		jsr	(Video_init).l			;  ''  Video
     122/     8B4 : 4EB9 FFFF 1060      		jsr	(System_Init).l			;  ''  System
     123/     8BA : 31FC 0000 C458      		move.w	#0,(RAM_ScreenMode).w		; Start at screen 0
     124/     8C0 : 4EF9 FFFF 168A      		jmp	(Md_ReadModes).l		; Jump to RAM
     125/     8C6 :                     
     126/     8C6 :                     ; ---------------------------------------------
     127/     8C6 :                     ; SEGA CD and CD32X
     128/     8C6 :                     ;
     129/     8C6 :                     ; This one is tricky...
     130/     8C6 :                     ; ---------------------------------------------
     131/     8C6 :                     
     186/     8C6 :                     
     187/     8C6 :                     ; ====================================================================
     188/     8C6 :                     ; --------------------------------------------------------
     189/     8C6 :                     ; SYSTEM routines and MODE switching code
     190/     8C6 :                     ;
     191/     8C6 :                     ; MD and PICO: Normal ROM locations
     192/     8C6 :                     ; CD/32X/CD32X: Loaded into RAM
     193/     8C6 :                     ; --------------------------------------------------------
     194/     8C6 :                     
     196/     8C6 :                     Md_SysCode:
     197/FFFFFFFFFFFF0000 :                     		phase RAM_SystemCode
     199/FFFFFFFFFFFF0000 :                     ; ---------------------------------------------
     200/FFFFFFFFFFFF0000 :                     
     201/FFFFFFFFFFFF0000 :                     		include	"sound/driver/gema.asm"
(1)    1/FFFFFFFFFFFF0000 :                     ; ====================================================================
(1)    2/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)    3/FFFFFFFFFFFF0000 :                     ; GEMA/Nikona sound driver v0.9
(1)    4/FFFFFFFFFFFF0000 :                     ; (C)2023-2024 GenesisFan64
(1)    5/FFFFFFFFFFFF0000 :                     ;
(1)    6/FFFFFFFFFFFF0000 :                     ; Features:
(1)    7/FFFFFFFFFFFF0000 :                     ; - Support for SEGA CD's PCM channels:
(1)    8/FFFFFFFFFFFF0000 :                     ;   | All 8 channels with streaming support
(1)    9/FFFFFFFFFFFF0000 :                     ;   | for larger samples.
(1)   10/FFFFFFFFFFFF0000 :                     ;
(1)   11/FFFFFFFFFFFF0000 :                     ; - Support for 32X's PWM:
(1)   12/FFFFFFFFFFFF0000 :                     ;   | 7 pseudo-channels in either MONO
(1)   13/FFFFFFFFFFFF0000 :                     ;   | or STEREO.
(1)   14/FFFFFFFFFFFF0000 :                     ;
(1)   15/FFFFFFFFFFFF0000 :                     ; - DMA ROM protection
(1)   16/FFFFFFFFFFFF0000 :                     ;   | This keeps DAC in a decent quality while
(1)   17/FFFFFFFFFFFF0000 :                     ;   | doing any DMA jobs in the 68k side.
(1)   18/FFFFFFFFFFFF0000 :                     ; - DAC Playback at 16000hz
(1)   19/FFFFFFFFFFFF0000 :                     ; - FM special mode with custom frequencies
(1)   20/FFFFFFFFFFFF0000 :                     ; - Autodetection for the PSG's Tone3 mode
(1)   21/FFFFFFFFFFFF0000 :                     ;
(1)   22/FFFFFFFFFFFF0000 :                     ; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣴⣶⡿⠿⠿⠿⣶⣦⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀
(1)   23/FFFFFFFFFFFF0000 :                     ; ⠀⠀⠀⠀⠀⠀⢀⣠⣶⢟⣿⠟⠁⢰⢋⣽⡆⠈⠙⣿⡿⣶⣄⡀⠀⠀⠀⠀⠀⠀
(1)   24/FFFFFFFFFFFF0000 :                     ; ⠀⠀⠀⠀⣠⣴⠟⠋⢠⣾⠋⠀⣀⠘⠿⠿⠃⣀⠀⠈⣿⡄⠙⠻⣦⣄⠀⠀⠀⠀
(1)   25/FFFFFFFFFFFF0000 :                     ; ⠀⢀⣴⡿⠋⠁⠀⢀⣼⠏⠺⠛⠛⠻⠂⠐⠟⠛⠛⠗⠘⣷⡀⠀⠈⠙⢿⣦⡀⠀
(1)   26/FFFFFFFFFFFF0000 :                     ; ⣴⡟⢁⣀⣠⣤⡾⢿⡟⠀⠀⠀⠘⢷⠾⠷⡾⠃⠀⠀⠀⢻⡿⢷⣤⣄⣀⡈⢻⣦
(1)   27/FFFFFFFFFFFF0000 :                     ; ⠙⠛⠛⠋⠉⠁⠀⢸⡇⠀⠀⢠⣄⠀⠀⠀⠀⣠⡄⠀⠀⢸⡇⠀⠈⠉⠙⠛⠛⠋
(1)   28/FFFFFFFFFFFF0000 :                     ; ⠀⠀⠀⠀⠀⠀⠀⢸⡇⢾⣦⣀⣹⡧⠀⠀⢼⣏⣀⣴⡷⢸⡇⠀⠀⠀⠀⠀⠀⠀
(1)   29/FFFFFFFFFFFF0000 :                     ; ⠀⠀⠀⠀⠀⠀⠀⠸⣧⡀⠈⠛⠛⠁⠀⠀⠈⠛⠛⠁⢀⣼⠇⠀⠀⠀⠀⠀⠀⠀
(1)   30/FFFFFFFFFFFF0000 :                     ; ⠀⠀⠀⠀⠀⠀⠀⢀⣘⣿⣶⣤⣀⣀⣀⣀⣀⣀⣤⣶⣿⣃⠀⠀⠀⠀⠀⠀⠀⠀
(1)   31/FFFFFFFFFFFF0000 :                     ; ⠀⠀⠀⠀⠀⣠⡶⠟⠋⢉⣀⣽⠿⠉⠉⠉⠹⢿⣍⣈⠉⠛⠷⣦⡀⠀⠀⠀⠀⠀
(1)   32/FFFFFFFFFFFF0000 :                     ; ⠀⠀⠀⠀⢾⣯⣤⣴⡾⠟⠋⠁⠀⠀⠀⠀⠀⠀⠉⠛⠷⣶⣤⣬⣿⠀⠀⠀⠀⠀
(1)   33/FFFFFFFFFFFF0000 :                     ; ⠀⠀⠀⠀⠀⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠁⠀⠀⠀⠀⠀
(1)   34/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)   35/FFFFFFFFFFFF0000 :                     
(1)   36/FFFFFFFFFFFF0000 :                     ; ====================================================================
(1)   37/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)   38/FFFFFFFFFFFF0000 :                     ; Macros
(1)   39/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)   40/FFFFFFFFFFFF0000 :                     
(1)   41/FFFFFFFFFFFF0000 :                     ; Shared for all DAC, PCM, PWM
(1)   42/FFFFFFFFFFFF0000 :                     gSmpHead macro len,loop
(1)   43/FFFFFFFFFFFF0000 :                     	dc.b ((len)&$FF),(((len)>>8)&$FF),(((len)>>16)&$FF)	; length
(1)   44/FFFFFFFFFFFF0000 :                     	dc.b ((loop)&$FF),(((loop)>>8)&$FF),(((loop)>>16)&$FF)
(1)   45/FFFFFFFFFFFF0000 :                     	endm
(1)   46/FFFFFFFFFFFF0000 :                     
(1)   47/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)   48/FFFFFFFFFFFF0000 :                     ; Variables
(1)   49/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)   50/FFFFFFFFFFFF0000 :                     
(1)   51/FFFFFFFFFFFF0000 :                     ; z80_cpu	equ $A00000		; Z80 CPU area, size: $2000
(1)   52/FFFFFFFFFFFF0000 :                     ; z80_bus 	equ $A11100		; only read bit 0 (bit 8 as WORD)
(1)   53/FFFFFFFFFFFF0000 :                     ; z80_reset	equ $A11200		; WRITE only: $0000 reset/$0100 cancel
(1)   54/FFFFFFFFFFFF0000 :                     
(1)   55/FFFFFFFFFFFF0000 :                     ; Z80-area points:
(1)   56/FFFFFFFFFFFF0000 : =$40                 zDrvFifo	equ commZfifo		; FIFO command storage
(1)   57/FFFFFFFFFFFF0000 : =$2E                 zDrvFWrt	equ commZWrite		; FIFO command index
(1)   58/FFFFFFFFFFFF0000 : =$2F                 zDrvRomBlk	equ commZRomBlk		; ROM block flag
(1)   59/FFFFFFFFFFFF0000 : =$37                 zDrvMarsBlk	equ marsBlock		; Flag to disable 32X's PWM
(1)   60/FFFFFFFFFFFF0000 : =$36                 zDrvMcdBlk	equ mcdBlock		; Flag to disable SegaCD's PCM
(1)   61/FFFFFFFFFFFF0000 : =$35                 zDrvRamSrc	equ cdRamSrcB		; RAM-read source+dest pointers
(1)   62/FFFFFFFFFFFF0000 : =$30                 zDrvRamLen	equ cdRamLen		; RAM-read length and flag
(1)   63/FFFFFFFFFFFF0000 :                     
(1)   64/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)   65/FFFFFFFFFFFF0000 :                     ; Variables
(1)   66/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)   67/FFFFFFFFFFFF0000 :                     
(1)   68/FFFFFFFFFFFF0000 : =$FFFFFF00           RAM_ZCdFlag_D	equ RAM_ZSndBuff	; transferRom flag
(1)   69/FFFFFFFFFFFF0000 :                     
(1)   70/FFFFFFFFFFFF0000 :                     ; ====================================================================
(1)   71/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)   72/FFFFFFFFFFFF0000 :                     ; Initialize Sound
(1)   73/FFFFFFFFFFFF0000 :                     ;
(1)   74/FFFFFFFFFFFF0000 :                     ; Uses:
(1)   75/FFFFFFFFFFFF0000 :                     ; a0-a1,d0-d1
(1)   76/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)   77/FFFFFFFFFFFF0000 :                     
(1)   78/FFFFFFFFFFFF0000 :                     ; 		align $80
(1)   79/FFFFFFFFFFFF0000 :                     Sound_Init:
(1)   80/FFFFFFFFFFFF0000 : 007C 0700           		ori.w	#$0700,sr
(1)   84/FFFFFFFFFFFF0004 : 33FC 0100 00A1      		move.w	#$0100,(z80_bus).l		; Get Z80 bus
         FFFFFFFFFFFF000A : 1100             
(1)   85/FFFFFFFFFFFF000C : 33FC 0100 00A1      		move.w	#$0100,(z80_reset).l		; Z80 reset
         FFFFFFFFFFFF0012 : 1200             
(1)   86/FFFFFFFFFFFF0014 :                     .wait:
(1)   87/FFFFFFFFFFFF0014 : 0839 0000 00A1      		btst	#0,(z80_bus).l
         FFFFFFFFFFFF001A : 1100             
(1)   88/FFFFFFFFFFFF001C : 66F6                		bne.s	.wait
(1)   89/FFFFFFFFFFFF001E : 41F9 00A0 0000      		lea	(z80_cpu).l,a0			; Clean entire Z80 FIRST.
(1)   90/FFFFFFFFFFFF0024 : 303C 1FFF           		move.w	#$1FFF,d0
(1)   91/FFFFFFFFFFFF0028 : 7200                		moveq	#0,d1
(1)   92/FFFFFFFFFFFF002A :                     .cleanup:
(1)   93/FFFFFFFFFFFF002A : 10C1                		move.b	d1,(a0)+
(1)   94/FFFFFFFFFFFF002C : 51C8 FFFC           		dbf	d0,.cleanup
(1)   95/FFFFFFFFFFFF0030 : 41F9 0088 1FB4      		lea	(Z80_CODE).l,a0			; a0 - Z80 code (on $880000)
(1)   96/FFFFFFFFFFFF0036 : 43F9 00A0 0000      		lea	(z80_cpu).l,a1			; a1 - Z80 CPU area
(1)   97/FFFFFFFFFFFF003C : 303C 1FB9           		move.w	#(Z80_CODE_END-Z80_CODE)-1,d0	; d0 - Size
(1)   98/FFFFFFFFFFFF0040 :                     
(1)   99/FFFFFFFFFFFF0040 :                     .copy:
(1)  100/FFFFFFFFFFFF0040 : 12D8                		move.b	(a0)+,(a1)+
(1)  101/FFFFFFFFFFFF0042 : 51C8 FFFC           		dbf	d0,.copy
(1)  102/FFFFFFFFFFFF0046 : 33FC 0000 00A1      		move.w	#0,(z80_reset).l		; Reset cancel
         FFFFFFFFFFFF004C : 1200             
(1)  103/FFFFFFFFFFFF004E : 4238 FF00           		clr.b	(RAM_ZCdFlag_D).w		; Reset Z80 transferRom flag
(1)  104/FFFFFFFFFFFF0052 : 4E71                		nop					; Reset Z80 buffer flag
(1)  105/FFFFFFFFFFFF0054 : 4E71                		nop
(1)  106/FFFFFFFFFFFF0056 : 4E71                		nop
(1)  107/FFFFFFFFFFFF0058 : 33FC 0100 00A1      		move.w	#$100,(z80_reset).l
         FFFFFFFFFFFF005E : 1200             
(1)  108/FFFFFFFFFFFF0060 : 33FC 0000 00A1      		move.w	#0,(z80_bus).l			; Start Z80
         FFFFFFFFFFFF0066 : 1100             
(1)  110/FFFFFFFFFFFF0068 : 203C 0092 ED90      		move.l	#Gema_MasterList,d0
(1)  111/FFFFFFFFFFFF006E : 6000 0172           		bra	gemaSetMasterList
(1)  112/FFFFFFFFFFFF0072 :                     
(1)  113/FFFFFFFFFFFF0072 :                     ; ----------------------------------------------------------------
(1)  114/FFFFFFFFFFFF0072 :                     ; Sound_Update
(1)  115/FFFFFFFFFFFF0072 :                     ;
(1)  116/FFFFFFFFFFFF0072 :                     ; Call and LOOP this during DISPLAY to communicate
(1)  117/FFFFFFFFFFFF0072 :                     ; with the Z80
(1)  118/FFFFFFFFFFFF0072 :                     ;
(1)  119/FFFFFFFFFFFF0072 :                     ; SegaCD/CD32X:
(1)  120/FFFFFFFFFFFF0072 :                     ; This checks if the Z80 wants to read from RAM (as it can't
(1)  121/FFFFFFFFFFFF0072 :                     ; see it) then this CPU manually writes the RAM bytes from
(1)  122/FFFFFFFFFFFF0072 :                     ; here to the Z80's RAM
(1)  123/FFFFFFFFFFFF0072 :                     ; THIS IS REQUIRED for the tracks and instruments stored
(1)  124/FFFFFFFFFFFF0072 :                     ; on RAM in case you are doing ASIC-Stamps.
(1)  125/FFFFFFFFFFFF0072 :                     ;
(1)  126/FFFFFFFFFFFF0072 :                     ; DAC samples are safe to read from WORD-RAM (if NOT using Stamps)
(1)  127/FFFFFFFFFFFF0072 :                     ; but careful when loading new data, and make sure MAIN
(1)  128/FFFFFFFFFFFF0072 :                     ; has the permission to read the data.
(1)  129/FFFFFFFFFFFF0072 :                     ;
(1)  130/FFFFFFFFFFFF0072 :                     ; Sega Pico:
(1)  131/FFFFFFFFFFFF0072 :                     ; * For later *
(1)  132/FFFFFFFFFFFF0072 :                     ;
(1)  133/FFFFFFFFFFFF0072 :                     ; Uses:
(1)  134/FFFFFFFFFFFF0072 :                     ; d5-d7,a4-a6
(1)  135/FFFFFFFFFFFF0072 :                     ; ----------------------------------------------------------------
(1)  136/FFFFFFFFFFFF0072 :                     
(1)  137/FFFFFFFFFFFF0072 :                     Sound_Update:
(1)  141/FFFFFFFFFFFF0072 :                     	; ------------------------------------------------
(1)  142/FFFFFFFFFFFF0072 :                     	; If transferRom wants to read from 68k RAM
(1)  143/FFFFFFFFFFFF0072 : 4A38 FF00           		tst.b	(RAM_ZCdFlag_D).w	; *Z80 WRITES TO RAM*
(1)  144/FFFFFFFFFFFF0076 : 6744                		beq.s	.no_task
(1)  145/FFFFFFFFFFFF0078 : 4238 FF00           		clr.b	(RAM_ZCdFlag_D).w
(1)  146/FFFFFFFFFFFF007C : 7E00                		moveq	#0,d7
(1)  147/FFFFFFFFFFFF007E : 613E                		bsr	sndLockZ80
(1)  148/FFFFFFFFFFFF0080 : 1E39 00A0 0030      		move.b	(z80_cpu+zDrvRamLen).l,d7
(1)  149/FFFFFFFFFFFF0086 : 6732                		beq.s	.no_size
(1)  150/FFFFFFFFFFFF0088 : 5347                		subq.w	#1,d7
(1)  151/FFFFFFFFFFFF008A : 4DF9 00A0 0036      		lea	(z80_cpu+(zDrvRamSrc+1)),a6
(1)  152/FFFFFFFFFFFF0090 : 4BF9 00A0 0000      		lea	(z80_cpu),a5
(1)  153/FFFFFFFFFFFF0096 : 1C26                		move.b	-(a6),d6		; d6 - Source
(1)  154/FFFFFFFFFFFF0098 : 4846                		swap	d6
(1)  155/FFFFFFFFFFFF009A : 1C26                		move.b	-(a6),d6
(1)  156/FFFFFFFFFFFF009C : E14E                		lsl.w	#8,d6
(1)  157/FFFFFFFFFFFF009E : 1C26                		move.b	-(a6),d6
(1)  158/FFFFFFFFFFFF00A0 : 7A00                		moveq	#0,d5
(1)  159/FFFFFFFFFFFF00A2 : 1A26                		move.b	-(a6),d5		; d5 - Dest
(1)  160/FFFFFFFFFFFF00A4 : E14D                		lsl.w	#8,d5
(1)  161/FFFFFFFFFFFF00A6 : 1A26                		move.b	-(a6),d5
(1)  162/FFFFFFFFFFFF00A8 : DBC5                		add.l	d5,a5
(1)  163/FFFFFFFFFFFF00AA : 2846                		move.l	d6,a4
(1)  164/FFFFFFFFFFFF00AC :                     .copy_bytes:
(1)  165/FFFFFFFFFFFF00AC : 1ADC                		move.b	(a4)+,(a5)+
(1)  166/FFFFFFFFFFFF00AE : 51CF FFFC           		dbf	d7,.copy_bytes
(1)  167/FFFFFFFFFFFF00B2 : 13FC 0000 00A0      		move.b	#0,(z80_cpu+zDrvRamLen).l
         FFFFFFFFFFFF00B8 : 0030             
(1)  168/FFFFFFFFFFFF00BA :                     .no_size:
(1)  169/FFFFFFFFFFFF00BA : 6116                		bsr	sndUnlockZ80
(1)  170/FFFFFFFFFFFF00BC :                     .no_task:
(1)  172/FFFFFFFFFFFF00BC : 4E75                		rts
(1)  173/FFFFFFFFFFFF00BE :                     
(1)  174/FFFFFFFFFFFF00BE :                     ; ====================================================================
(1)  175/FFFFFFFFFFFF00BE :                     ; ----------------------------------------------------------------
(1)  176/FFFFFFFFFFFF00BE :                     ; Subroutines
(1)  177/FFFFFFFFFFFF00BE :                     ; ----------------------------------------------------------------
(1)  178/FFFFFFFFFFFF00BE :                     
(1)  179/FFFFFFFFFFFF00BE :                     ; ------------------------------------------------
(1)  180/FFFFFFFFFFFF00BE :                     ; Lock Z80, get bus
(1)  181/FFFFFFFFFFFF00BE :                     ; ------------------------------------------------
(1)  182/FFFFFFFFFFFF00BE :                     
(1)  183/FFFFFFFFFFFF00BE :                     sndLockZ80:
(1)  185/FFFFFFFFFFFF00BE : 33FC 0100 00A1      		move.w	#$0100,(z80_bus).l
         FFFFFFFFFFFF00C4 : 1100             
(1)  186/FFFFFFFFFFFF00C6 :                     .wait:
(1)  187/FFFFFFFFFFFF00C6 : 0839 0000 00A1      		btst	#0,(z80_bus).l
         FFFFFFFFFFFF00CC : 1100             
(1)  188/FFFFFFFFFFFF00CE : 66F6                		bne.s	.wait
(1)  190/FFFFFFFFFFFF00D0 : 4E75                		rts
(1)  191/FFFFFFFFFFFF00D2 :                     
(1)  192/FFFFFFFFFFFF00D2 :                     ; ------------------------------------------------
(1)  193/FFFFFFFFFFFF00D2 :                     ; Unlock Z80, return bus
(1)  194/FFFFFFFFFFFF00D2 :                     ; ------------------------------------------------
(1)  195/FFFFFFFFFFFF00D2 :                     
(1)  196/FFFFFFFFFFFF00D2 :                     sndUnlockZ80:
(1)  198/FFFFFFFFFFFF00D2 : 33FC 0000 00A1      		move.w	#0,(z80_bus).l
         FFFFFFFFFFFF00D8 : 1100             
(1)  200/FFFFFFFFFFFF00DA : 4E75                		rts
(1)  201/FFFFFFFFFFFF00DC :                     
(1)  202/FFFFFFFFFFFF00DC :                     ; ------------------------------------------------
(1)  203/FFFFFFFFFFFF00DC :                     ; 68K-to-Z80 sound request enter/exit routines
(1)  204/FFFFFFFFFFFF00DC :                     ;
(1)  205/FFFFFFFFFFFF00DC :                     ; d6 - commFifo index
(1)  206/FFFFFFFFFFFF00DC :                     ; ------------------------------------------------
(1)  207/FFFFFFFFFFFF00DC :                     
(1)  208/FFFFFFFFFFFF00DC :                     sndReq_Enter:
(1)  210/FFFFFFFFFFFF00DC : 33FC 0100 00A1      		move.w	#$0100,(z80_bus).l		; Request Z80 Stop
         FFFFFFFFFFFF00E2 : 1100             
(1)  212/FFFFFFFFFFFF00E4 :                     ; 		or.w	#$0700,sr			; Disable interrupts
(1)  213/FFFFFFFFFFFF00E4 : 9EFC 0004           		suba	#4,sp				; Extra jump return
(1)  214/FFFFFFFFFFFF00E8 : 48E7 0306           		movem.l	d6-d7/a5-a6,-(sp)		; Save these regs to the stack
(1)  215/FFFFFFFFFFFF00EC : DEFC 0014           		adda	#(4*4)+4,sp			; Go back to the RTS jump
(1)  216/FFFFFFFFFFFF00F0 : 4BF9 00A0 002E      		lea	(z80_cpu+zDrvFWrt),a5		; a5 - commZWrite
(1)  217/FFFFFFFFFFFF00F6 : 4DF9 00A0 0040      		lea	(z80_cpu+zDrvFifo),a6		; a6 - fifo command list
(1)  218/FFFFFFFFFFFF00FC :                     .wait:
(1)  220/FFFFFFFFFFFF00FC : 0839 0000 00A1      		btst	#0,(z80_bus).l			; Wait for Z80
         FFFFFFFFFFFF0102 : 1100             
(1)  221/FFFFFFFFFFFF0104 : 66F6                		bne.s	.wait
(1)  223/FFFFFFFFFFFF0106 : 1C15                		move.b	(a5),d6				; d6 - index fifo position
(1)  224/FFFFFFFFFFFF0108 : 4886                		ext.w	d6				; extend to 16 bits
(1)  225/FFFFFFFFFFFF010A : 4E75                		rts
(1)  226/FFFFFFFFFFFF010C :                     ; JUMP ONLY
(1)  227/FFFFFFFFFFFF010C :                     sndReq_Exit:
(1)  229/FFFFFFFFFFFF010C : 33FC 0000 00A1      		move.w	#0,(z80_bus).l
         FFFFFFFFFFFF0112 : 1100             
(1)  231/FFFFFFFFFFFF0114 : 9EFC 0018           		suba	#8+(4*4),sp
(1)  232/FFFFFFFFFFFF0118 : 4CDF 60C0           		movem.l	(sp)+,d6-d7/a5-a6		; And pop those back
(1)  233/FFFFFFFFFFFF011C : DEFC 0008           		adda	#8,sp
(1)  234/FFFFFFFFFFFF0120 :                     ; 		andi.w	#$F8FF,sr			; Enable interrupts
(1)  235/FFFFFFFFFFFF0120 : 4E75                		rts
(1)  236/FFFFFFFFFFFF0122 :                     
(1)  237/FFFFFFFFFFFF0122 :                     ; ------------------------------------------------
(1)  238/FFFFFFFFFFFF0122 :                     ; Send request id and arguments
(1)  239/FFFFFFFFFFFF0122 :                     ;
(1)  240/FFFFFFFFFFFF0122 :                     ; Input:
(1)  241/FFFFFFFFFFFF0122 :                     ; d7 - byte to write
(1)  242/FFFFFFFFFFFF0122 :                     ; d6 - index pointer
(1)  243/FFFFFFFFFFFF0122 :                     ; a5 - commZWrite, update index
(1)  244/FFFFFFFFFFFF0122 :                     ; a6 - commZfifo command list
(1)  245/FFFFFFFFFFFF0122 :                     ;
(1)  246/FFFFFFFFFFFF0122 :                     ; *** CALL sndReq_Enter FIRST ***
(1)  247/FFFFFFFFFFFF0122 :                     ; ------------------------------------------------
(1)  248/FFFFFFFFFFFF0122 :                     
(1)  249/FFFFFFFFFFFF0122 :                     sndReq_scmd:
(1)  250/FFFFFFFFFFFF0122 : 1DBC 00FF 6000      		move.b	#-1,(a6,d6.w)			; write command-start flag
(1)  251/FFFFFFFFFFFF0128 : 5206                		addq.b	#1,d6				; next fifo pos
(1)  252/FFFFFFFFFFFF012A : 0206 000F           		andi.b	#MAX_ZCMND-1,d6
(1)  253/FFFFFFFFFFFF012E : 600C                		bra.s	sndReq_sbyte
(1)  254/FFFFFFFFFFFF0130 :                     sndReq_slong:
(1)  255/FFFFFFFFFFFF0130 : 610A                		bsr	sndReq_sbyte
(1)  256/FFFFFFFFFFFF0132 : E09F                		ror.l	#8,d7
(1)  257/FFFFFFFFFFFF0134 :                     sndReq_saddr:	; 24-bit address
(1)  258/FFFFFFFFFFFF0134 : 6106                		bsr	sndReq_sbyte
(1)  259/FFFFFFFFFFFF0136 : E09F                		ror.l	#8,d7
(1)  260/FFFFFFFFFFFF0138 :                     sndReq_sword:
(1)  261/FFFFFFFFFFFF0138 : 6102                		bsr	sndReq_sbyte
(1)  262/FFFFFFFFFFFF013A : E09F                		ror.l	#8,d7
(1)  263/FFFFFFFFFFFF013C :                     sndReq_sbyte:
(1)  264/FFFFFFFFFFFF013C : 1D87 6000           		move.b	d7,(a6,d6.w)			; write byte
(1)  265/FFFFFFFFFFFF0140 : 5206                		addq.b	#1,d6				; next fifo pos
(1)  266/FFFFFFFFFFFF0142 : 0206 000F           		andi.b	#MAX_ZCMND-1,d6
(1)  267/FFFFFFFFFFFF0146 : 1A86                		move.b	d6,(a5)				; update commZWrite
(1)  268/FFFFFFFFFFFF0148 : 4E75                		rts
(1)  269/FFFFFFFFFFFF014A :                     
(1)  270/FFFFFFFFFFFF014A :                     ; --------------------------------------------------------
(1)  271/FFFFFFFFFFFF014A :                     ; gemaDmaPause
(1)  272/FFFFFFFFFFFF014A :                     ;
(1)  273/FFFFFFFFFFFF014A :                     ; Call this BEFORE doing any DMA transfer
(1)  274/FFFFFFFFFFFF014A :                     ; --------------------------------------------------------
(1)  275/FFFFFFFFFFFF014A :                     
(1)  276/FFFFFFFFFFFF014A :                     gemaDmaPause:
(1)  280/FFFFFFFFFFFF014A : 4847                		swap	d7
(1)  281/FFFFFFFFFFFF014C : 4846                		swap	d6
(1)  282/FFFFFFFFFFFF014E :                     ; .retry_flag:
(1)  283/FFFFFFFFFFFF014E : 6100 FF6E           		bsr	sndLockZ80
(1)  284/FFFFFFFFFFFF0152 : 13FC 0001 00A0      		move.b	#1,(z80_cpu+zDrvRomBlk)		; Block flag for Z80
         FFFFFFFFFFFF0158 : 002F             
(1)  285/FFFFFFFFFFFF015A : 6100 FF76           		bsr	sndUnlockZ80
(1)  286/FFFFFFFFFFFF015E : 3E3C 0060           		move.w	#96,d7				; ...Small delay...
(1)  287/FFFFFFFFFFFF0162 : 51CF FFFE           		dbf	d7,*
(1)  288/FFFFFFFFFFFF0166 : 4846                		swap	d6
(1)  289/FFFFFFFFFFFF0168 : 4847                		swap	d7
(1)  290/FFFFFFFFFFFF016A : 4E75                		rts
(1)  292/FFFFFFFFFFFF016C :                     
(1)  293/FFFFFFFFFFFF016C :                     ; --------------------------------------------------------
(1)  294/FFFFFFFFFFFF016C :                     ; gemaDmaResume
(1)  295/FFFFFFFFFFFF016C :                     ;
(1)  296/FFFFFFFFFFFF016C :                     ; Call this AFTER finishing DMA transfer
(1)  297/FFFFFFFFFFFF016C :                     ; --------------------------------------------------------
(1)  298/FFFFFFFFFFFF016C :                     
(1)  299/FFFFFFFFFFFF016C :                     gemaDmaResume:
(1)  303/FFFFFFFFFFFF016C : 4847                		swap	d7
(1)  304/FFFFFFFFFFFF016E : 4846                		swap	d6
(1)  305/FFFFFFFFFFFF0170 : 6100 FF4C           		bsr	sndLockZ80
(1)  306/FFFFFFFFFFFF0174 : 13FC 0000 00A0      		move.b	#0,(z80_cpu+zDrvRomBlk)		; Block flag for Z80
         FFFFFFFFFFFF017A : 002F             
(1)  307/FFFFFFFFFFFF017C : 6100 FF54           		bsr	sndUnlockZ80
(1)  308/FFFFFFFFFFFF0180 : 4846                		swap	d6
(1)  309/FFFFFFFFFFFF0182 : 4847                		swap	d7
(1)  310/FFFFFFFFFFFF0184 : 4E75                		rts
(1)  312/FFFFFFFFFFFF0186 :                     
(1)  313/FFFFFFFFFFFF0186 :                     ; --------------------------------------------------------
(1)  314/FFFFFFFFFFFF0186 :                     ; gemaDmaPauseRom
(1)  315/FFFFFFFFFFFF0186 :                     ;
(1)  316/FFFFFFFFFFFF0186 :                     ; Call this BEFORE doing any DMA transfer
(1)  317/FFFFFFFFFFFF0186 :                     ;
(1)  318/FFFFFFFFFFFF0186 :                     ; *** BANKS $880000/$900000 WILL BE GONE ***
(1)  319/FFFFFFFFFFFF0186 :                     ; --------------------------------------------------------
(1)  320/FFFFFFFFFFFF0186 :                     
(1)  321/FFFFFFFFFFFF0186 :                     gemaDmaPauseRom:
(1)  325/FFFFFFFFFFFF0186 : 4847                		swap	d7
(1)  326/FFFFFFFFFFFF0188 : 4846                		swap	d6
(1)  327/FFFFFFFFFFFF018A : 6100 FF32           		bsr	sndLockZ80
(1)  328/FFFFFFFFFFFF018E : 13FC 0001 00A0      		move.b	#1,(z80_cpu+zDrvRomBlk)		; Block flag for Z80
         FFFFFFFFFFFF0194 : 002F             
(1)  329/FFFFFFFFFFFF0196 : 6100 FF3A           		bsr	sndUnlockZ80
(1)  330/FFFFFFFFFFFF019A : 3E3C 0060           		move.w	#96,d7				; ...Small delay...
(1)  331/FFFFFFFFFFFF019E : 51CF FFFE           		dbf	d7,*
(1)  332/FFFFFFFFFFFF01A2 :                     ; 	if MARS|MARSCD
(1)  333/FFFFFFFFFFFF01A2 :                     ; 		move.w	#2,d6
(1)  334/FFFFFFFFFFFF01A2 :                     ; 		bsr	sndReqCmd
(1)  335/FFFFFFFFFFFF01A2 :                     ; 	endif
(1)  337/FFFFFFFFFFFF01A2 : 08F9 0000 00A1      		bset	#0,(sysmars_reg+dreqctl+1).l	; Set RV=1
         FFFFFFFFFFFF01A8 : 5107             
(1)  339/FFFFFFFFFFFF01AA : 4846                		swap	d6
(1)  340/FFFFFFFFFFFF01AC : 4847                		swap	d7
(1)  341/FFFFFFFFFFFF01AE : 4E75                		rts
(1)  343/FFFFFFFFFFFF01B0 :                     
(1)  344/FFFFFFFFFFFF01B0 :                     ; --------------------------------------------------------
(1)  345/FFFFFFFFFFFF01B0 :                     ; gemaDmaResumeRom
(1)  346/FFFFFFFFFFFF01B0 :                     ;
(1)  347/FFFFFFFFFFFF01B0 :                     ; Call this AFTER finishing DMA transfer
(1)  348/FFFFFFFFFFFF01B0 :                     ;
(1)  349/FFFFFFFFFFFF01B0 :                     ; *** BANKS $880000/$900000 GET RESTORED ***
(1)  350/FFFFFFFFFFFF01B0 :                     ; --------------------------------------------------------
(1)  351/FFFFFFFFFFFF01B0 :                     
(1)  352/FFFFFFFFFFFF01B0 :                     gemaDmaResumeRom:
(1)  356/FFFFFFFFFFFF01B0 : 4847                		swap	d7
(1)  357/FFFFFFFFFFFF01B2 : 4846                		swap	d6
(1)  358/FFFFFFFFFFFF01B4 : 6100 FF08           		bsr	sndLockZ80
(1)  359/FFFFFFFFFFFF01B8 : 13FC 0000 00A0      		move.b	#0,(z80_cpu+zDrvRomBlk)		; Block flag for Z80
         FFFFFFFFFFFF01BE : 002F             
(1)  360/FFFFFFFFFFFF01C0 : 6100 FF10           		bsr	sndUnlockZ80
(1)  361/FFFFFFFFFFFF01C4 :                     ; 	if MARS|MARSCD
(1)  362/FFFFFFFFFFFF01C4 :                     ; 		move.w	#3,d6
(1)  363/FFFFFFFFFFFF01C4 :                     ; 		bsr	sndReqCmd
(1)  364/FFFFFFFFFFFF01C4 :                     ; 	endif
(1)  366/FFFFFFFFFFFF01C4 : 08B9 0000 00A1      		bclr	#0,(sysmars_reg+dreqctl+1).l	; Set RV=0
         FFFFFFFFFFFF01CA : 5107             
(1)  368/FFFFFFFFFFFF01CC : 4846                		swap	d6
(1)  369/FFFFFFFFFFFF01CE : 4847                		swap	d7
(1)  370/FFFFFFFFFFFF01D0 : 4E75                		rts
(1)  372/FFFFFFFFFFFF01D2 :                     
(1)  373/FFFFFFFFFFFF01D2 :                     ; ====================================================================
(1)  374/FFFFFFFFFFFF01D2 :                     ; --------------------------------------------------------
(1)  375/FFFFFFFFFFFF01D2 :                     ; USER CALLS
(1)  376/FFFFFFFFFFFF01D2 :                     ; --------------------------------------------------------
(1)  377/FFFFFFFFFFFF01D2 :                     
(1)  378/FFFFFFFFFFFF01D2 :                     ; --------------------------------------------------------
(1)  379/FFFFFFFFFFFF01D2 :                     ; gemaTest
(1)  380/FFFFFFFFFFFF01D2 :                     ;
(1)  381/FFFFFFFFFFFF01D2 :                     ; For TESTING only.
(1)  382/FFFFFFFFFFFF01D2 :                     ; --------------------------------------------------------
(1)  383/FFFFFFFFFFFF01D2 :                     
(1)  384/FFFFFFFFFFFF01D2 :                     gemaTest:
(1)  385/FFFFFFFFFFFF01D2 : 6100 FF08           		bsr	sndReq_Enter
(1)  386/FFFFFFFFFFFF01D6 : 3E3C 0000           		move.w	#$00,d7		; Command $00
(1)  387/FFFFFFFFFFFF01DA : 6100 FF46           		bsr	sndReq_scmd
(1)  388/FFFFFFFFFFFF01DE : 6000 FF2C           		bra 	sndReq_Exit
(1)  389/FFFFFFFFFFFF01E2 :                     
(1)  390/FFFFFFFFFFFF01E2 :                     ; --------------------------------------------------------
(1)  391/FFFFFFFFFFFF01E2 :                     ; gemaSetMasterList
(1)  392/FFFFFFFFFFFF01E2 :                     ;
(1)  393/FFFFFFFFFFFF01E2 :                     ; Set Tracklist location
(1)  394/FFFFFFFFFFFF01E2 :                     ;
(1)  395/FFFFFFFFFFFF01E2 :                     ; Input:
(1)  396/FFFFFFFFFFFF01E2 :                     ; d0.l - 68k pointer
(1)  397/FFFFFFFFFFFF01E2 :                     ; --------------------------------------------------------
(1)  398/FFFFFFFFFFFF01E2 :                     
(1)  399/FFFFFFFFFFFF01E2 :                     gemaSetMasterList:
(1)  400/FFFFFFFFFFFF01E2 : 6100 FEF8           		bsr	sndReq_Enter
(1)  401/FFFFFFFFFFFF01E6 : 3E3C 0001           		move.w	#$01,d7		; Command $01
(1)  402/FFFFFFFFFFFF01EA : 6100 FF36           		bsr	sndReq_scmd
(1)  403/FFFFFFFFFFFF01EE : 2E00                		move.l	d0,d7
(1)  404/FFFFFFFFFFFF01F0 : 6100 FF3E           		bsr	sndReq_slong
(1)  405/FFFFFFFFFFFF01F4 : 6000 FF16           		bra 	sndReq_Exit
(1)  406/FFFFFFFFFFFF01F8 :                     
(1)  407/FFFFFFFFFFFF01F8 :                     ; --------------------------------------------------------
(1)  408/FFFFFFFFFFFF01F8 :                     ; gemaPlayTrack
(1)  409/FFFFFFFFFFFF01F8 :                     ;
(1)  410/FFFFFFFFFFFF01F8 :                     ; Play a sequence with arguments
(1)  411/FFFFFFFFFFFF01F8 :                     ;
(1)  412/FFFFFFFFFFFF01F8 :                     ; Input:
(1)  413/FFFFFFFFFFFF01F8 :                     ; d0.b - Playback slot number
(1)  414/FFFFFFFFFFFF01F8 :                     ;        If -1: use auto-search
(1)  415/FFFFFFFFFFFF01F8 :                     ; d1.b - Sequence number
(1)  416/FFFFFFFFFFFF01F8 :                     ; d2.b - Starting block
(1)  417/FFFFFFFFFFFF01F8 :                     ; --------------------------------------------------------
(1)  418/FFFFFFFFFFFF01F8 :                     
(1)  419/FFFFFFFFFFFF01F8 :                     gemaPlayTrack:
(1)  420/FFFFFFFFFFFF01F8 : 6100 FEE2           		bsr	sndReq_Enter
(1)  421/FFFFFFFFFFFF01FC : 3E3C 0002           		move.w	#$02,d7		; Command $02
(1)  422/FFFFFFFFFFFF0200 : 6100 FF20           		bsr	sndReq_scmd
(1)  423/FFFFFFFFFFFF0204 : 1E01                		move.b	d1,d7		; d1.b Seq number
(1)  424/FFFFFFFFFFFF0206 : 6100 FF34           		bsr	sndReq_sbyte
(1)  425/FFFFFFFFFFFF020A : 1E02                		move.b	d2,d7		; d2.b Block <--
(1)  426/FFFFFFFFFFFF020C : 6100 FF2E           		bsr	sndReq_sbyte
(1)  427/FFFFFFFFFFFF0210 : 1E00                		move.b	d0,d7		; d0.b Slot
(1)  428/FFFFFFFFFFFF0212 : 6100 FF28           		bsr	sndReq_sbyte
(1)  429/FFFFFFFFFFFF0216 : 6000 FEF4           		bra 	sndReq_Exit
(1)  430/FFFFFFFFFFFF021A :                     
(1)  431/FFFFFFFFFFFF021A :                     ; --------------------------------------------------------
(1)  432/FFFFFFFFFFFF021A :                     ; gemaStopTrack
(1)  433/FFFFFFFFFFFF021A :                     ;
(1)  434/FFFFFFFFFFFF021A :                     ; Stops tracks with the same sequence number
(1)  435/FFFFFFFFFFFF021A :                     ;
(1)  436/FFFFFFFFFFFF021A :                     ; Input:
(1)  437/FFFFFFFFFFFF021A :                     ; d0.b - Playback slot number
(1)  438/FFFFFFFFFFFF021A :                     ;        If -1: stop all slots with the same number
(1)  439/FFFFFFFFFFFF021A :                     ; d1.b - Sequence number to search for
(1)  440/FFFFFFFFFFFF021A :                     ; --------------------------------------------------------
(1)  441/FFFFFFFFFFFF021A :                     
(1)  442/FFFFFFFFFFFF021A :                     gemaStopTrack:
(1)  443/FFFFFFFFFFFF021A : 6100 FEC0           		bsr	sndReq_Enter
(1)  444/FFFFFFFFFFFF021E : 3E3C 0003           		move.w	#$03,d7		; Command $03
(1)  445/FFFFFFFFFFFF0222 : 6100 FEFE           		bsr	sndReq_scmd
(1)  446/FFFFFFFFFFFF0226 : 1E01                		move.b	d1,d7		; d0.b Seq number
(1)  447/FFFFFFFFFFFF0228 : 6100 FF12           		bsr	sndReq_sbyte
(1)  448/FFFFFFFFFFFF022C : 1E00                		move.b	d0,d7		; d1.b Slot
(1)  449/FFFFFFFFFFFF022E : 6100 FF0C           		bsr	sndReq_sbyte
(1)  450/FFFFFFFFFFFF0232 : 6000 FED8           		bra 	sndReq_Exit
(1)  451/FFFFFFFFFFFF0236 :                     
(1)  452/FFFFFFFFFFFF0236 :                     ; --------------------------------------------------------
(1)  453/FFFFFFFFFFFF0236 :                     ; gemaFadeTrack
(1)  454/FFFFFFFFFFFF0236 :                     ;
(1)  455/FFFFFFFFFFFF0236 :                     ; Set Master volume to a track slot.
(1)  456/FFFFFFFFFFFF0236 :                     ;
(1)  457/FFFFFFFFFFFF0236 :                     ; Input:
(1)  458/FFFFFFFFFFFF0236 :                     ; d0.b - Playback slot number
(1)  459/FFFFFFFFFFFF0236 :                     ;        If -1: Apply to all slots
(1)  460/FFFFFFFFFFFF0236 :                     ; d1.b - Target volume
(1)  461/FFFFFFFFFFFF0236 :                     ; d2.b - Fade speed TODO
(1)  462/FFFFFFFFFFFF0236 :                     ;
(1)  463/FFFFFFFFFFFF0236 :                     ; Notes:
(1)  464/FFFFFFFFFFFF0236 :                     ; DO NOT MIX THIS WITH gemaSetTrackVol
(1)  465/FFFFFFFFFFFF0236 :                     ; --------------------------------------------------------
(1)  466/FFFFFFFFFFFF0236 :                     
(1)  467/FFFFFFFFFFFF0236 :                     gemaFadeTrack:
(1)  468/FFFFFFFFFFFF0236 : 6100 FEA4           		bsr	sndReq_Enter
(1)  469/FFFFFFFFFFFF023A : 3E3C 0005           		move.w	#$05,d7		; Command $05
(1)  470/FFFFFFFFFFFF023E : 6100 FEE2           		bsr	sndReq_scmd
(1)  471/FFFFFFFFFFFF0242 : 1E01                		move.b	d1,d7		; d0.b Target volume
(1)  472/FFFFFFFFFFFF0244 : 6100 FEF6           		bsr	sndReq_sbyte
(1)  473/FFFFFFFFFFFF0248 : 1E00                		move.b	d0,d7		; d1.b Slot
(1)  474/FFFFFFFFFFFF024A : 6100 FEF0           		bsr	sndReq_sbyte
(1)  475/FFFFFFFFFFFF024E : 6000 FEBC           		bra 	sndReq_Exit
(1)  476/FFFFFFFFFFFF0252 :                     
(1)  477/FFFFFFFFFFFF0252 :                     ; --------------------------------------------------------
(1)  478/FFFFFFFFFFFF0252 :                     ; gemaSetTrackVol
(1)  479/FFFFFFFFFFFF0252 :                     ;
(1)  480/FFFFFFFFFFFF0252 :                     ; Set Master volume to a track slot.
(1)  481/FFFFFFFFFFFF0252 :                     ;
(1)  482/FFFFFFFFFFFF0252 :                     ; Input:
(1)  483/FFFFFFFFFFFF0252 :                     ; d0.b - Playback slot number
(1)  484/FFFFFFFFFFFF0252 :                     ;        If -1: Set to all slots
(1)  485/FFFFFFFFFFFF0252 :                     ; d1.b - Master volume ($00-$40 max-min)
(1)  486/FFFFFFFFFFFF0252 :                     ;
(1)  487/FFFFFFFFFFFF0252 :                     ; Notes:
(1)  488/FFFFFFFFFFFF0252 :                     ; DO NOT MIX THIS WITH gemaFadeTrack
(1)  489/FFFFFFFFFFFF0252 :                     ; --------------------------------------------------------
(1)  490/FFFFFFFFFFFF0252 :                     
(1)  491/FFFFFFFFFFFF0252 :                     gemaSetTrackVol:
(1)  492/FFFFFFFFFFFF0252 : 6100 FE88           		bsr	sndReq_Enter
(1)  493/FFFFFFFFFFFF0256 : 3E3C 0006           		move.w	#$06,d7		; Command $06
(1)  494/FFFFFFFFFFFF025A : 6100 FEC6           		bsr	sndReq_scmd
(1)  495/FFFFFFFFFFFF025E : 1E01                		move.b	d1,d7		; d0.b Volume data <--
(1)  496/FFFFFFFFFFFF0260 : 6100 FEDA           		bsr	sndReq_sbyte
(1)  497/FFFFFFFFFFFF0264 : 1E00                		move.b	d0,d7		; d1.b Slot
(1)  498/FFFFFFFFFFFF0266 : 6100 FED4           		bsr	sndReq_sbyte
(1)  499/FFFFFFFFFFFF026A : 6000 FEA0           		bra 	sndReq_Exit
(1)  500/FFFFFFFFFFFF026E :                     
(1)  501/FFFFFFFFFFFF026E :                     ; --------------------------------------------------------
(1)  502/FFFFFFFFFFFF026E :                     ; gemaSetBeats
(1)  503/FFFFFFFFFFFF026E :                     ;
(1)  504/FFFFFFFFFFFF026E :                     ; Sets global subbeats
(1)  505/FFFFFFFFFFFF026E :                     ;
(1)  506/FFFFFFFFFFFF026E :                     ; d0.w - sub-beats
(1)  507/FFFFFFFFFFFF026E :                     ; --------------------------------------------------------
(1)  508/FFFFFFFFFFFF026E :                     
(1)  509/FFFFFFFFFFFF026E :                     ; TODO: find a way to calculate this and
(1)  510/FFFFFFFFFFFF026E :                     ; explain to the user.
(1)  511/FFFFFFFFFFFF026E :                     
(1)  512/FFFFFFFFFFFF026E :                     gemaSetBeats:
(1)  513/FFFFFFFFFFFF026E : 6100 FE6C           		bsr	sndReq_Enter
(1)  514/FFFFFFFFFFFF0272 : 3E3C 0007           		move.w	#$07,d7		; Command $07
(1)  515/FFFFFFFFFFFF0276 : 6100 FEAA           		bsr	sndReq_scmd
(1)  516/FFFFFFFFFFFF027A : 3E00                		move.w	d0,d7
(1)  517/FFFFFFFFFFFF027C : 6100 FEBA           		bsr	sndReq_sword
(1)  518/FFFFFFFFFFFF0280 : 6000 FE8A           		bra 	sndReq_Exit
(1)  519/FFFFFFFFFFFF0284 :                     
     202/FFFFFFFFFFFF0284 :                     		include	"system/md/video.asm"
(1)    1/FFFFFFFFFFFF0284 :                     ; ====================================================================
(1)    2/FFFFFFFFFFFF0284 :                     ; ----------------------------------------------------------------
(1)    3/FFFFFFFFFFFF0284 :                     ; Genesis VDP section
(1)    4/FFFFFFFFFFFF0284 :                     ; ----------------------------------------------------------------
(1)    5/FFFFFFFFFFFF0284 :                     
(1)    6/FFFFFFFFFFFF0284 :                     ; ====================================================================
(1)    7/FFFFFFFFFFFF0284 :                     ; --------------------------------------------------------
(1)    8/FFFFFFFFFFFF0284 :                     ; Settings
(1)    9/FFFFFFFFFFFF0284 :                     ; --------------------------------------------------------
(1)   10/FFFFFFFFFFFF0284 :                     
(1)   11/FFFFFFFFFFFF0284 : =$18                 MAX_MDOBJ	equ 24		; MAX Objects
(1)   12/FFFFFFFFFFFF0284 : =$18                 MAX_MDDMATSK	equ 24		; MAX DMA BLAST entries
(1)   13/FFFFFFFFFFFF0284 : =$7FF                varNullVram	equ $07FF	; Default Blank cell
(1)   14/FFFFFFFFFFFF0284 : =$580                varPrintVram	equ $0580	; Default location of the PRINT text graphics
(1)   15/FFFFFFFFFFFF0284 : =$3                  varPrintPal	equ 3		; Palette to use for the printable text
(1)   16/FFFFFFFFFFFF0284 :                     
(1)   17/FFFFFFFFFFFF0284 :                     ; --------------------------------------------------------
(1)   18/FFFFFFFFFFFF0284 :                     ; Variables
(1)   19/FFFFFFFFFFFF0284 :                     ; --------------------------------------------------------
(1)   20/FFFFFFFFFFFF0284 :                     
(1)   21/FFFFFFFFFFFF0284 :                     ; VDP Register $80
(1)   22/FFFFFFFFFFFF0284 : =$2                  HVStop		equ $02
(1)   23/FFFFFFFFFFFF0284 : =$10                 HintEnbl	equ $10
(1)   24/FFFFFFFFFFFF0284 : =$1                  bitHVStop	equ 1
(1)   25/FFFFFFFFFFFF0284 : =$4                  bitHintEnbl	equ 4
(1)   26/FFFFFFFFFFFF0284 :                     
(1)   27/FFFFFFFFFFFF0284 :                     ; VDP Register $81
(1)   28/FFFFFFFFFFFF0284 : =$40                 DispEnbl 	equ $40
(1)   29/FFFFFFFFFFFF0284 : =$20                 VintEnbl 	equ $20
(1)   30/FFFFFFFFFFFF0284 : =$10                 DmaEnbl		equ $10
(1)   31/FFFFFFFFFFFF0284 : =$6                  bitDispEnbl	equ 6
(1)   32/FFFFFFFFFFFF0284 : =$5                  bitVintEnbl	equ 5
(1)   33/FFFFFFFFFFFF0284 : =$4                  bitDmaEnbl	equ 4
(1)   34/FFFFFFFFFFFF0284 : =$3                  bitV30		equ 3
(1)   35/FFFFFFFFFFFF0284 :                     
(1)   36/FFFFFFFFFFFF0284 :                     ; vdp_ctrl READ bits (full WORD)
(1)   37/FFFFFFFFFFFF0284 : =$9                  bitFifoE	equ 9		; DMA FIFO empty
(1)   38/FFFFFFFFFFFF0284 : =$8                  bitFifoF	equ 8		; DMA FIFO full
(1)   39/FFFFFFFFFFFF0284 : =$7                  bitVInt		equ 7		; Vertical interrupt
(1)   40/FFFFFFFFFFFF0284 : =$6                  bitSprOvr	equ 6		; Sprite overflow
(1)   41/FFFFFFFFFFFF0284 : =$5                  bitSprCol	equ 5		; Sprite collision
(1)   42/FFFFFFFFFFFF0284 : =$4                  bitOdd		equ 4		; EVEN or ODD frame displayed on interlace mode
(1)   43/FFFFFFFFFFFF0284 : =$3                  bitVBlk		equ 3		; Inside VBlank
(1)   44/FFFFFFFFFFFF0284 : =$2                  bitHBlk		equ 2		; Inside HBlank
(1)   45/FFFFFFFFFFFF0284 : =$1                  bitDma		equ 1		; Only works for FILL and COPY
(1)   46/FFFFFFFFFFFF0284 : =$0                  bitPal		equ 0
(1)   47/FFFFFFFFFFFF0284 :                     
(1)   48/FFFFFFFFFFFF0284 :                     ; md_bg_flags
(1)   49/FFFFFFFFFFFF0284 : =$0                  bitDrwR		equ 0
(1)   50/FFFFFFFFFFFF0284 : =$1                  bitDrwL		equ 1
(1)   51/FFFFFFFFFFFF0284 : =$2                  bitDrwD		equ 2
(1)   52/FFFFFFFFFFFF0284 : =$3                  bitDrwU		equ 3
(1)   53/FFFFFFFFFFFF0284 : =$6                  bitMarsBg	equ 6
(1)   54/FFFFFFFFFFFF0284 : =$7                  bitBgOn		equ 7
(1)   55/FFFFFFFFFFFF0284 :                     
(1)   56/FFFFFFFFFFFF0284 :                     ; ====================================================================
(1)   57/FFFFFFFFFFFF0284 :                     ; ----------------------------------------------------------------
(1)   58/FFFFFFFFFFFF0284 :                     ; Structs
(1)   59/FFFFFFFFFFFF0284 :                     ; ----------------------------------------------------------------
(1)   60/FFFFFFFFFFFF0284 :                     
(1)   61/FFFFFFFFFFFF0284 :                     ; --------------------------------
(1)   62/FFFFFFFFFFFF0284 :                     ; object strct
(1)   63/FFFFFFFFFFFF0284 :                     ; --------------------------------
(1)   64/FFFFFFFFFFFF0284 :                     
(1)   65/FFFFFFFFFFFF0284 : (MACRO)              		strct 0
(1)   65/FFFFFFFFFFFF0284 : =$FFFFFFFFFFFF0284   GLBL_LASTPC     set *
(1)   65/     B4A :                                     dephase
(1)   65/       0 :                                     phase 0
(1)   65/       0 : =$0                  GLBL_LASTORG    set *
(1)   66/       0 :                     obj_code	ds.l 1		; Object code, 0 == no object
(1)   67/       4 :                     obj_x		ds.l 1		; Object X Position 0000.0000
(1)   68/       8 :                     obj_y		ds.l 1		; Object Y Position 0000.0000
(1)   69/       C :                     obj_map		ds.l 1		; Object Sprite map data location
(1)   70/      10 :                     obj_dma		ds.l 1		; Object DMA map, 0 == Don't use DMA
(1)   71/      14 :                     obj_vram	ds.w 1		; Object VRAM position (If DMA enabled: output location)
(1)   72/      16 :                     obj_x_spd	ds.w 1		; Object X Speed 00.00
(1)   73/      18 :                     obj_y_spd	ds.w 1		; Object Y Speed 00.00
(1)   74/      1A :                     obj_anim_indx	ds.w 1		; * Object animation script index (obj_anim + obj_anim_indx)
(1)   75/      1C :                     obj_anim_id	ds.w 1		; * Object animation number: $ccss c-current s-saved
(1)   76/      1E :                     obj_frame	ds.w 1		; * Object current frame
(1)   77/      20 :                     obj_anim_spd	ds.b 1		; * Object animation delay
(1)   78/      21 :                     obj_index	ds.b 1		; Object code index
(1)   79/      22 :                     obj_set		ds.b 1		; Object settings
(1)   80/      23 :                     obj_subid	ds.b 1		; Object Sub-ID for Object placement
(1)   81/      24 :                     obj_status	ds.b 1		; Object custom status
(1)   82/      25 :                     obj_FREE	ds.b 1		; (FILLER align byte)
(1)   83/      26 :                     obj_ram		ds.b $40	; Object's own RAM
(1)   84/      66 :                     sizeof_mdobj	ds.l 0
(1)   85/      68 : (MACRO)              		endstrct
(1)   85/       0 :                                     org GLBL_LASTORG
(1)   85/FFFFFFFFFFFF0284 :                                     phase GLBL_LASTPC
(1)   86/FFFFFFFFFFFF0284 :                     ; 		message "\{sizeof_mdobj}"
(1)   87/FFFFFFFFFFFF0284 :                     
(1)   88/FFFFFFFFFFFF0284 :                     ; --------------------------------
(1)   89/FFFFFFFFFFFF0284 :                     ; ** obj_set
(1)   90/FFFFFFFFFFFF0284 : =$7                  bitobj_Mars	equ	7	; 32X ONLY: This objects draws to the 32X side (256-color sprite)
(1)   91/FFFFFFFFFFFF0284 : =$1                  bitobj_flipV	equ	1	; Set to flip object Vertically
(1)   92/FFFFFFFFFFFF0284 : =$0                  bitobj_flipH	equ	0	; Set to flip object Horizontally
(1)   93/FFFFFFFFFFFF0284 :                     
(1)   94/FFFFFFFFFFFF0284 :                     ; --------------------------------
(1)   95/FFFFFFFFFFFF0284 :                     ; ** obj_set
(1)   96/FFFFFFFFFFFF0284 :                     ; bitobj_air	equ	0	; set if floating/jumping
(1)   97/FFFFFFFFFFFF0284 :                     
(1)   98/FFFFFFFFFFFF0284 :                     ; --------------------------------
(1)   99/FFFFFFFFFFFF0284 :                     ; ** obj_size
(1)  100/FFFFFFFFFFFF0284 :                     ; at_u		equ	3
(1)  101/FFFFFFFFFFFF0284 :                     ; at_d		equ	2
(1)  102/FFFFFFFFFFFF0284 :                     ; at_l		equ	1
(1)  103/FFFFFFFFFFFF0284 :                     ; at_r		equ	0
(1)  104/FFFFFFFFFFFF0284 :                     
(1)  105/FFFFFFFFFFFF0284 :                     ; ====================================================================
(1)  106/FFFFFFFFFFFF0284 :                     ; ----------------------------------------------------------------
(1)  107/FFFFFFFFFFFF0284 :                     ; Video RAM
(1)  108/FFFFFFFFFFFF0284 :                     ; ----------------------------------------------------------------
(1)  109/FFFFFFFFFFFF0284 :                     
(1)  110/FFFFFFFFFFFF0284 : (MACRO)              			strct RAM_MdVideo
(1)  110/FFFFFFFFFFFF0284 : =$FFFFFFFFFFFF0284   GLBL_LASTPC     set *
(1)  110/       0 :                                     dephase
(1)  110/FFFFFFFFFFFFA004 :                                     phase RAM_MDVIDEO
(1)  110/FFFFFFFFFFFFA004 : =$FFFFFFFFFFFFA004   GLBL_LASTORG    set *
(1)  111/FFFFFFFFFFFFA004 :                     RAM_HorScroll		ds.l 240			; DMA Horizontal scroll data
(1)  112/FFFFFFFFFFFFA3C4 :                     RAM_VerScroll		ds.l 320/16			; DMA Vertical scroll data
(1)  113/FFFFFFFFFFFFA414 :                     RAM_Sprites		ds.w 8*80			; DMA Sprites
(1)  114/FFFFFFFFFFFFA914 :                     RAM_SprDrwPz		ds.w 8*80			; External sprite pieces
(1)  115/FFFFFFFFFFFFAE14 :                     RAM_Palette		ds.w 64				; DMA palette
(1)  116/FFFFFFFFFFFFAE94 :                     RAM_MdMarsPalFd		ds.w 256			; Target 32X palette for FadeIn/Out (NOTE: CPU intensive)
(1)  117/FFFFFFFFFFFFB094 :                     RAM_PaletteFd		ds.w 64				; Target MD palette for FadeIn/Out
(1)  118/FFFFFFFFFFFFB114 :                     RAM_VdpDmaList		ds.b $10*MAX_MDDMATSK		; DMA BLAST list for VBlank
(1)  119/FFFFFFFFFFFFB294 :                     RAM_Objects		ds.b MAX_MDOBJ*sizeof_mdobj	; Objects
(1)  120/FFFFFFFFFFFFBC24 :                     RAM_ObjDispList		ds.w MAX_MDOBJ			; half-RAM pointers for display (Obj|Extra)
(1)  121/FFFFFFFFFFFFBC54 :                     RAM_VidPrntList		ds.w 3*64			; Video_Print list: Address, Type
(1)  122/FFFFFFFFFFFFBDD4 :                     RAM_FrameCount		ds.l 1				; Frames counter
(1)  123/FFFFFFFFFFFFBDD8 :                     RAM_SprDrwCntr		ds.w 1
(1)  124/FFFFFFFFFFFFBDDA :                     RAM_SprLinkNum		ds.w 1
(1)  125/FFFFFFFFFFFFBDDC :                     RAM_VdpExWrite		ds.w 1
(1)  126/FFFFFFFFFFFFBDDE :                     RAM_VdpDmaIndx		ds.w 1				; Current index in DMA BLAST list
(1)  127/FFFFFFFFFFFFBDE0 :                     RAM_VdpDmaMod		ds.w 1				; Mid-write flag
(1)  128/FFFFFFFFFFFFBDE2 :                     RAM_VidPrntVram		ds.w 1				; Default VRAM location for ASCII text used by Video_Print
(1)  129/FFFFFFFFFFFFBDE4 :                     RAM_FadeMdReq		ds.w 1				; FadeIn/Out request for Genesis palette (01-FadeIn 02-FadeOut)
(1)  130/FFFFFFFFFFFFBDE6 :                     RAM_FadeMdIncr		ds.w 1				; Fading increment count
(1)  131/FFFFFFFFFFFFBDE8 :                     RAM_FadeMdDelay		ds.w 1				; Fading delay
(1)  132/FFFFFFFFFFFFBDEA :                     RAM_FadeMdTmr		ds.w 1				; Fading delay timer
(1)  133/FFFFFFFFFFFFBDEC :                     RAM_FadeMarsReq		ds.w 1				; Same thing but for 32X's 256-color (01-FadeIn 02-FadeOut)
(1)  134/FFFFFFFFFFFFBDEE :                     RAM_FadeMarsIncr	ds.w 1				; (Hint: Set to 4 to syncronize with Genesis' FadeIn/Out)
(1)  135/FFFFFFFFFFFFBDF0 :                     RAM_FadeMarsDelay	ds.w 1
(1)  136/FFFFFFFFFFFFBDF2 :                     RAM_FadeMarsTmr		ds.w 1
(1)  137/FFFFFFFFFFFFBDF4 :                     RAM_MdMars_DrawAll	ds.w 1
(1)  138/FFFFFFFFFFFFBDF6 :                     RAM_VdpRegs		ds.b 24				; VDP Register cache
(1)  139/FFFFFFFFFFFFBE0E :                     sizeof_mdvid		ds.l 0
(1)  140/FFFFFFFFFFFFBE14 : (MACRO)              			endstrct
(1)  140/FFFFFFFFFFFFA004 :                                     org GLBL_LASTORG
(1)  140/FFFFFFFFFFFF0284 :                                     phase GLBL_LASTPC
(1)  141/FFFFFFFFFFFF0284 :                     
(1)  142/FFFFFFFFFFFF0284 : (MACRO)              		erreport "MD VIDEO RAM",sizeof_mdvid-RAM_MdVideo,MAX_MdVideo
(1)  143/FFFFFFFFFFFF0284 :                     
(1)  144/FFFFFFFFFFFF0284 :                     ; ====================================================================
(1)  145/FFFFFFFFFFFF0284 :                     ; --------------------------------------------------------
(1)  146/FFFFFFFFFFFF0284 :                     ; Initialize Genesis video
(1)  147/FFFFFFFFFFFF0284 :                     ;
(1)  148/FFFFFFFFFFFF0284 :                     ; Breaks:
(1)  149/FFFFFFFFFFFF0284 :                     ; d6-d7/a5-a6
(1)  150/FFFFFFFFFFFF0284 :                     ; --------------------------------------------------------
(1)  151/FFFFFFFFFFFF0284 :                     
(1)  152/FFFFFFFFFFFF0284 :                     Video_Init:
(1)  153/FFFFFFFFFFFF0284 : 4DF8 A004           		lea	(RAM_MdVideo).w,a6		; Clear our RAM section
(1)  154/FFFFFFFFFFFF0288 : 3C3C 8000           		move.w	#$8000,d6
(1)  155/FFFFFFFFFFFF028C : 3E3C 1E09           		move.w	#(sizeof_mdvid-RAM_MdVideo)-1,d7
(1)  156/FFFFFFFFFFFF0290 :                     .clrram:
(1)  157/FFFFFFFFFFFF0290 : 1CC6                		move.b	d6,(a6)+			; (Write the LSB zero)
(1)  158/FFFFFFFFFFFF0292 : 51CF FFFC           		dbf	d7,.clrram
(1)  159/FFFFFFFFFFFF0296 : 31FC 0001 BDDA      		move.w	#1,(RAM_SprLinkNum).w
(1)  160/FFFFFFFFFFFF029C : 4DFA 0030           		lea	list_vdpregs(pc),a6		; Write "cache'd" VDP registers
(1)  161/FFFFFFFFFFFF02A0 : 4BF8 BDF6           		lea	(RAM_VdpRegs).w,a5
(1)  162/FFFFFFFFFFFF02A4 : 3E3C 0010           		move.w	#17-1,d7
(1)  163/FFFFFFFFFFFF02A8 :                     .loop:
(1)  164/FFFFFFFFFFFF02A8 : 1C1E                		move.b	(a6)+,d6
(1)  165/FFFFFFFFFFFF02AA : 1AC6                		move.b	d6,(a5)+
(1)  166/FFFFFFFFFFFF02AC : 51CF FFFA           		dbf	d7,.loop
(1)  167/FFFFFFFFFFFF02B0 :                     
(1)  168/FFFFFFFFFFFF02B0 :                     ; --------------------------------------------------------
(1)  169/FFFFFFFFFFFF02B0 :                     ; Video_Update
(1)  170/FFFFFFFFFFFF02B0 :                     ;
(1)  171/FFFFFFFFFFFF02B0 :                     ; Writes register data stored in RAM to VDP
(1)  172/FFFFFFFFFFFF02B0 :                     ; from registers $80 to $90
(1)  173/FFFFFFFFFFFF02B0 :                     ;
(1)  174/FFFFFFFFFFFF02B0 :                     ; WINDOW registers $91 and $92 are written
(1)  175/FFFFFFFFFFFF02B0 :                     ; manually.
(1)  176/FFFFFFFFFFFF02B0 :                     ;
(1)  177/FFFFFFFFFFFF02B0 :                     ; Breaks:
(1)  178/FFFFFFFFFFFF02B0 :                     ; d6-d7/a5-a6
(1)  179/FFFFFFFFFFFF02B0 :                     ; --------------------------------------------------------
(1)  180/FFFFFFFFFFFF02B0 :                     
(1)  181/FFFFFFFFFFFF02B0 :                     Video_Update:
(1)  182/FFFFFFFFFFFF02B0 : 4DF8 BDF6           		lea	(RAM_VdpRegs).w,a6
(1)  183/FFFFFFFFFFFF02B4 : 4BF9 00C0 0004      		lea	(vdp_ctrl),a5
(1)  184/FFFFFFFFFFFF02BA : 3C3C 8000           		move.w	#$8000,d6
(1)  185/FFFFFFFFFFFF02BE : 7E10                		moveq	#17-1,d7
(1)  186/FFFFFFFFFFFF02C0 :                     .loop:
(1)  187/FFFFFFFFFFFF02C0 : 1C1E                		move.b	(a6)+,d6
(1)  188/FFFFFFFFFFFF02C2 : 3A86                		move.w	d6,(a5)
(1)  189/FFFFFFFFFFFF02C4 : 0646 0100           		addi.w	#$0100,d6
(1)  190/FFFFFFFFFFFF02C8 : 51CF FFF6           		dbf	d7,.loop
(1)  191/FFFFFFFFFFFF02CC :                     .exit:
(1)  192/FFFFFFFFFFFF02CC : 4E75                		rts
(1)  193/FFFFFFFFFFFF02CE :                     
(1)  194/FFFFFFFFFFFF02CE :                     ; ------------------------------------------------
(1)  195/FFFFFFFFFFFF02CE :                     ; Default VDP register settings
(1)  196/FFFFFFFFFFFF02CE :                     ; ------------------------------------------------
(1)  197/FFFFFFFFFFFF02CE :                     
(1)  198/FFFFFFFFFFFF02CE :                     list_vdpregs:
(1)  199/FFFFFFFFFFFF02CE : 04                  		dc.b $04			; No HBlank interrupt, HV Counter on
(1)  200/FFFFFFFFFFFF02CF : 04                  		dc.b $04			; Display ON, No VBlank interrupt
(1)  201/FFFFFFFFFFFF02D0 : 30                  		dc.b (($C000)>>10)		; Layer A at VRAM $C000 (%00xxx000)
(1)  202/FFFFFFFFFFFF02D1 : 34                  		dc.b (($D000)>>10)		; Window  at VRAM $D000 (%00xxxxy0)
(1)  203/FFFFFFFFFFFF02D2 : 07                  		dc.b (($E000)>>13)		; Layer B at VRAM $E000 (%00000xxx)
(1)  204/FFFFFFFFFFFF02D3 : 7C                  		dc.b (($F800)>>9)		; Sprites at VRAM $F800 (%0xxxxxxy)
(1)  205/FFFFFFFFFFFF02D4 : 00                  		dc.b $00			; Unused
(1)  206/FFFFFFFFFFFF02D5 : 00                  		dc.b $00			; Background color: $00
(1)  207/FFFFFFFFFFFF02D6 : 00                  		dc.b $00			; Unused
(1)  208/FFFFFFFFFFFF02D7 : 00                  		dc.b $00			; Unused
(1)  209/FFFFFFFFFFFF02D8 : 00                  		dc.b $00			; HInt line number trigger
(1)  210/FFFFFFFFFFFF02D9 : 00                  		dc.b (%000|%00)			; No ExtInt, Scroll: VSCR:full HSCR:full
(1)  211/FFFFFFFFFFFF02DA : 81                  		dc.b $81			; H40, No shadow mode, 320-pixel resolution mode
(1)  212/FFFFFFFFFFFF02DB : 3F                  		dc.b (($FC00)>>10)		; HScroll at VRAM $FC00 (%00xxxxxx)
(1)  213/FFFFFFFFFFFF02DC : 00                  		dc.b $00			; Unused
(1)  214/FFFFFFFFFFFF02DD : 02                  		dc.b $02			; VDP auto-increment: $02
(1)  215/FFFFFFFFFFFF02DE : 01                  		dc.b (%00<<4)|%01		; Scroll area size: V32 H64
(1)  216/FFFFFFFFFFFF02DF : 00                  		dc.b $00
(1)  217/FFFFFFFFFFFF02E0 : 00                  		dc.b $00
(1)  218/FFFFFFFFFFFF02E1 :                     		align 2
(1)  219/FFFFFFFFFFFF02E2 :                     ; Default PRINT palette
(1)  220/FFFFFFFFFFFF02E2 : 0000 0EEE 0CCC      ASCII_PAL:	dc.w $0000,$0EEE,$0CCC,$0AAA,$0888,$0444,$000E,$0008
         FFFFFFFFFFFF02E8 : 0AAA 0888 0444 
         FFFFFFFFFFFF02EE : 000E 0008          
(1)  221/FFFFFFFFFFFF02F2 : 00EE 0088 00E0      		dc.w $00EE,$0088,$00E0,$0080,$0E00,$0800,$0000,$0000
         FFFFFFFFFFFF02F8 : 0080 0E00 0800 
         FFFFFFFFFFFF02FE : 0000 0000          
(1)  222/FFFFFFFFFFFF0302 :                     		align 2
(1)  223/FFFFFFFFFFFF0304 :                     
(1)  224/FFFFFFFFFFFF0304 :                     ; --------------------------------------------------------
(1)  225/FFFFFFFFFFFF0304 :                     ; Video_Clear
(1)  226/FFFFFFFFFFFF0304 :                     ;
(1)  227/FFFFFFFFFFFF0304 :                     ; Clear all video data from VRAM
(1)  228/FFFFFFFFFFFF0304 :                     ;
(1)  229/FFFFFFFFFFFF0304 :                     ; Breaks:
(1)  230/FFFFFFFFFFFF0304 :                     ; ALL
(1)  231/FFFFFFFFFFFF0304 :                     ; --------------------------------------------------------
(1)  232/FFFFFFFFFFFF0304 :                     
(1)  233/FFFFFFFFFFFF0304 :                     Video_Clear:
(1)  234/FFFFFFFFFFFF0304 :                     ; 		move.w	#0,d0			; Clears until $57F
(1)  235/FFFFFFFFFFFF0304 :                     ; 		move.w	#0,d1
(1)  236/FFFFFFFFFFFF0304 :                     ; 		move.w	#$57F*$20,d2
(1)  237/FFFFFFFFFFFF0304 :                     ; 		bsr	Video_Fill
(1)  238/FFFFFFFFFFFF0304 :                     
(1)  239/FFFFFFFFFFFF0304 :                     ; --------------------------------------------------------
(1)  240/FFFFFFFFFFFF0304 :                     ; Video_ClearScreen
(1)  241/FFFFFFFFFFFF0304 :                     ;
(1)  242/FFFFFFFFFFFF0304 :                     ; Clears ALL Genesis screens FG/BG/WIN
(1)  243/FFFFFFFFFFFF0304 :                     ;
(1)  244/FFFFFFFFFFFF0304 :                     ; Breaks:
(1)  245/FFFFFFFFFFFF0304 :                     ; d0-d2/d6-d7/a5-a6
(1)  246/FFFFFFFFFFFF0304 :                     ; --------------------------------------------------------
(1)  247/FFFFFFFFFFFF0304 :                     
(1)  248/FFFFFFFFFFFF0304 :                     Video_ClearScreen:
(1)  249/FFFFFFFFFFFF0304 : 7000                		moveq	#0,d0
(1)  250/FFFFFFFFFFFF0306 : 343C 1000           		move.w	#$1000,d2		; FG/BG size
(1)  251/FFFFFFFFFFFF030A : 1238 BDF8           		move.b	(RAM_VdpRegs+2).w,d1	; FG
(1)  252/FFFFFFFFFFFF030E : 0241 0038           		andi.w	#%111000,d1
(1)  253/FFFFFFFFFFFF0312 : E149                		lsl.w	#8,d1
(1)  254/FFFFFFFFFFFF0314 : E549                		lsl.w	#2,d1
(1)  255/FFFFFFFFFFFF0316 : 6100 0316           		bsr	Video_Fill
(1)  256/FFFFFFFFFFFF031A : 1238 BDFA           		move.b	(RAM_VdpRegs+4).w,d1	; BG
(1)  257/FFFFFFFFFFFF031E : 0241 0007           		andi.w	#%000111,d1
(1)  258/FFFFFFFFFFFF0322 : E149                		lsl.w	#8,d1
(1)  259/FFFFFFFFFFFF0324 : EB49                		lsl.w	#5,d1
(1)  260/FFFFFFFFFFFF0326 : 6100 0306           		bsr	Video_Fill
(1)  261/FFFFFFFFFFFF032A : 343C 1000           		move.w	#$1000,d2		; WD Size
(1)  262/FFFFFFFFFFFF032E : 1238 BDF9           		move.b	(RAM_VdpRegs+3).w,d1	; Window
(1)  263/FFFFFFFFFFFF0332 : 0241 003E           		andi.w	#%111110,d1
(1)  264/FFFFFFFFFFFF0336 : E149                		lsl.w	#8,d1
(1)  265/FFFFFFFFFFFF0338 : E549                		lsl.w	#2,d1
(1)  266/FFFFFFFFFFFF033A : 6100 02F2           		bsr	Video_Fill
(1)  267/FFFFFFFFFFFF033E : 4DF8 A004           		lea	(RAM_HorScroll).w,a6	; RAM cleanup
(1)  268/FFFFFFFFFFFF0342 : 3E3C 00EF           		move.w	#240-1,d7
(1)  269/FFFFFFFFFFFF0346 : 7C00                		moveq	#0,d6
(1)  270/FFFFFFFFFFFF0348 :                     .xnext:
(1)  271/FFFFFFFFFFFF0348 : 2CC6                		move.l	d6,(a6)+
(1)  272/FFFFFFFFFFFF034A : 51CF FFFC           		dbf	d7,.xnext
(1)  273/FFFFFFFFFFFF034E : 4DF8 A3C4           		lea	(RAM_VerScroll).w,a6
(1)  274/FFFFFFFFFFFF0352 : 3E3C 0013           		move.w	#(320/16)-1,d7
(1)  275/FFFFFFFFFFFF0356 :                     .ynext:
(1)  276/FFFFFFFFFFFF0356 : 2CC6                		move.l	d6,(a6)+
(1)  277/FFFFFFFFFFFF0358 : 51CF FFFC           		dbf	d7,.ynext
(1)  278/FFFFFFFFFFFF035C : 4DF8 A414           		lea	(RAM_Sprites).w,a6
(1)  279/FFFFFFFFFFFF0360 : 3E3C 009F           		move.w	#((80*8)/4)-1,d7
(1)  280/FFFFFFFFFFFF0364 :                     .snext:
(1)  281/FFFFFFFFFFFF0364 : 2CC6                		move.l	d6,(a6)+
(1)  282/FFFFFFFFFFFF0366 : 51CF FFFC           		dbf	d7,.snext
(1)  283/FFFFFFFFFFFF036A : 4DF8 AE14           		lea	(RAM_Palette).w,a6
(1)  284/FFFFFFFFFFFF036E : 4BF8 B094           		lea	(RAM_PaletteFd).w,a5
(1)  285/FFFFFFFFFFFF0372 : 3E3C 001F           		move.w	#(64/2)-1,d7
(1)  286/FFFFFFFFFFFF0376 :                     .pnext:
(1)  287/FFFFFFFFFFFF0376 : 2CC6                		move.l	d6,(a6)+
(1)  288/FFFFFFFFFFFF0378 : 2AC6                		move.l	d6,(a5)+
(1)  289/FFFFFFFFFFFF037A : 51CF FFFA           		dbf	d7,.pnext
(1)  291/FFFFFFFFFFFF037E : 4DF8 C604           		lea	(RAM_MdDreq+Dreq_Palette).w,a6
(1)  292/FFFFFFFFFFFF0382 : 4BF8 AE94           		lea	(RAM_MdMarsPalFd).w,a5
(1)  293/FFFFFFFFFFFF0386 : 3E3C 007F           		move.w	#(256/2)-1,d7
(1)  294/FFFFFFFFFFFF038A :                     ; 		moveq	#0,d6
(1)  295/FFFFFFFFFFFF038A :                     .pmnext:
(1)  296/FFFFFFFFFFFF038A : 2CC6                		move.l	d6,(a6)+
(1)  297/FFFFFFFFFFFF038C : 2AC6                		move.l	d6,(a5)+
(1)  298/FFFFFFFFFFFF038E : 51CF FFFA           		dbf	d7,.pmnext
(1)  300/FFFFFFFFFFFF0392 : 4E75                		rts
(1)  301/FFFFFFFFFFFF0394 :                     
(1)  302/FFFFFFFFFFFF0394 :                     ; ====================================================================
(1)  303/FFFFFFFFFFFF0394 :                     ; ----------------------------------------------------------------
(1)  304/FFFFFFFFFFFF0394 :                     ; Palette fade system, Genesis side
(1)  305/FFFFFFFFFFFF0394 :                     ; ----------------------------------------------------------------
(1)  306/FFFFFFFFFFFF0394 :                     
(1)  307/FFFFFFFFFFFF0394 :                     ; --------------------------------------------------------
(1)  308/FFFFFFFFFFFF0394 :                     ; FULL Fade in
(1)  309/FFFFFFFFFFFF0394 :                     ; --------------------------------------------------------
(1)  310/FFFFFFFFFFFF0394 :                     
(1)  311/FFFFFFFFFFFF0394 :                     Video_FadeIn:
(1)  312/FFFFFFFFFFFF0394 : 31FC 0001 BDE6      		move.w	#1,(RAM_FadeMdIncr).w	; Increment speed
(1)  313/FFFFFFFFFFFF039A : 31FC 0002 BDEE      		move.w	#2,(RAM_FadeMarsIncr).w
(1)  314/FFFFFFFFFFFF03A0 : 31FC 0001 BDE8      		move.w	#1,(RAM_FadeMdDelay).w	; Delay by
(1)  315/FFFFFFFFFFFF03A6 : 31FC 0000 BDF0      		move.w	#0,(RAM_FadeMarsDelay).w
(1)  316/FFFFFFFFFFFF03AC : 31FC 0001 BDE4      		move.w	#1,(RAM_FadeMdReq).w	; Fade-in task
(1)  317/FFFFFFFFFFFF03B2 : 31FC 0001 BDEC      		move.w	#1,(RAM_FadeMarsReq).w
(1)  318/FFFFFFFFFFFF03B8 : 6026                		bra	Video_WaitFade
(1)  319/FFFFFFFFFFFF03BA :                     
(1)  320/FFFFFFFFFFFF03BA :                     ; --------------------------------------------------------
(1)  321/FFFFFFFFFFFF03BA :                     ; FULL Fade out
(1)  322/FFFFFFFFFFFF03BA :                     ; --------------------------------------------------------
(1)  323/FFFFFFFFFFFF03BA :                     
(1)  324/FFFFFFFFFFFF03BA :                     Video_FadeOut:
(1)  325/FFFFFFFFFFFF03BA : 31FC 0001 BDE6      		move.w	#1,(RAM_FadeMdIncr).w	; Increment speed
(1)  326/FFFFFFFFFFFF03C0 : 31FC 0002 BDEE      		move.w	#2,(RAM_FadeMarsIncr).w
(1)  327/FFFFFFFFFFFF03C6 : 31FC 0001 BDE8      		move.w	#1,(RAM_FadeMdDelay).w	; Delay by
(1)  328/FFFFFFFFFFFF03CC : 31FC 0000 BDF0      		move.w	#0,(RAM_FadeMarsDelay).w
(1)  329/FFFFFFFFFFFF03D2 : 31FC 0002 BDE4      		move.w	#2,(RAM_FadeMdReq).w	; Fade-in task
(1)  330/FFFFFFFFFFFF03D8 : 31FC 0002 BDEC      		move.w	#2,(RAM_FadeMarsReq).w
(1)  331/FFFFFFFFFFFF03DE : 4E71                		bra	Video_WaitFade
(1)  332/FFFFFFFFFFFF03E0 :                     
(1)  333/FFFFFFFFFFFF03E0 :                     ; --------------------------------------------------------
(1)  334/FFFFFFFFFFFF03E0 :                     ; Video_WaitFade
(1)  335/FFFFFFFFFFFF03E0 :                     ; --------------------------------------------------------
(1)  336/FFFFFFFFFFFF03E0 :                     
(1)  337/FFFFFFFFFFFF03E0 :                     Video_WaitFade:
(1)  338/FFFFFFFFFFFF03E0 : 6100 0CFC           		bsr	System_Render
(1)  340/FFFFFFFFFFFF03E4 : 6154                		bsr	Video_DoPalFade
(1)  341/FFFFFFFFFFFF03E6 : 6100 0546           		bsr	Video_MarsPalFade
(1)  342/FFFFFFFFFFFF03EA : 3E38 BDE4           		move.w	(RAM_FadeMdReq).w,d7
(1)  343/FFFFFFFFFFFF03EE : 3C38 BDEC           		move.w	(RAM_FadeMarsReq).w,d6
(1)  344/FFFFFFFFFFFF03F2 : 8E46                		or.w	d6,d7
(1)  349/FFFFFFFFFFFF03F4 : 4A47                		tst.w	d7
(1)  350/FFFFFFFFFFFF03F6 : 66E8                		bne.s	Video_WaitFade
(1)  351/FFFFFFFFFFFF03F8 : 4E75                		rts
(1)  352/FFFFFFFFFFFF03FA :                     
(1)  353/FFFFFFFFFFFF03FA :                     ; --------------------------------------------------------
(1)  354/FFFFFFFFFFFF03FA :                     ; Video_RunFade
(1)  355/FFFFFFFFFFFF03FA :                     ;
(1)  356/FFFFFFFFFFFF03FA :                     ; Processes palette fading for one frame returns
(1)  357/FFFFFFFFFFFF03FA :                     ; status on exit.
(1)  358/FFFFFFFFFFFF03FA :                     ;
(1)  359/FFFFFFFFFFFF03FA :                     ; Returns:
(1)  360/FFFFFFFFFFFF03FA :                     ; bne - Still active, jump back.
(1)  361/FFFFFFFFFFFF03FA :                     ; beq - Finished
(1)  362/FFFFFFFFFFFF03FA :                     ;
(1)  363/FFFFFFFFFFFF03FA :                     ; Breaks:
(1)  364/FFFFFFFFFFFF03FA :                     ; All
(1)  365/FFFFFFFFFFFF03FA :                     ;
(1)  366/FFFFFFFFFFFF03FA :                     ; Notes:
(1)  367/FFFFFFFFFFFF03FA :                     ; Call System_Render FIRST before calling this
(1)  368/FFFFFFFFFFFF03FA :                     ; --------------------------------------------------------
(1)  369/FFFFFFFFFFFF03FA :                     
(1)  370/FFFFFFFFFFFF03FA :                     Video_RunFade:
(1)  372/FFFFFFFFFFFF03FA : 613E                		bsr	Video_DoPalFade
(1)  373/FFFFFFFFFFFF03FC : 6100 0530           		bsr	Video_MarsPalFade
(1)  374/FFFFFFFFFFFF0400 : 3E38 BDE4           		move.w	(RAM_FadeMdReq).w,d7
(1)  375/FFFFFFFFFFFF0404 : 3C38 BDEC           		move.w	(RAM_FadeMarsReq).w,d6
(1)  376/FFFFFFFFFFFF0408 : 8E46                		or.w	d6,d7
(1)  381/FFFFFFFFFFFF040A : 4E75                		rts
(1)  382/FFFFFFFFFFFF040C :                     
(1)  383/FFFFFFFFFFFF040C :                     ; --------------------------------------------------------
(1)  384/FFFFFFFFFFFF040C :                     ; Video_LoadPal
(1)  385/FFFFFFFFFFFF040C :                     ;
(1)  386/FFFFFFFFFFFF040C :                     ; Input:
(1)  387/FFFFFFFFFFFF040C :                     ; a0 - Palette data
(1)  388/FFFFFFFFFFFF040C :                     ; d0 - Start position
(1)  389/FFFFFFFFFFFF040C :                     ; d1 - Number of colors
(1)  390/FFFFFFFFFFFF040C :                     ;
(1)  391/FFFFFFFFFFFF040C :                     ; Breaks:
(1)  392/FFFFFFFFFFFF040C :                     ; d5-d7,a6
(1)  393/FFFFFFFFFFFF040C :                     ; --------------------------------------------------------
(1)  394/FFFFFFFFFFFF040C :                     
(1)  395/FFFFFFFFFFFF040C :                     Video_FadePal:
(1)  396/FFFFFFFFFFFF040C : 4DF8 B094           		lea	(RAM_PaletteFd).w,a6
(1)  397/FFFFFFFFFFFF0410 : 4278 BDEA           		clr.w	(RAM_FadeMdTmr).w
(1)  398/FFFFFFFFFFFF0414 : 6004                		bra.s	vidMd_Pal
(1)  399/FFFFFFFFFFFF0416 :                     Video_LoadPal:
(1)  400/FFFFFFFFFFFF0416 : 4DF8 AE14           		lea	(RAM_Palette).w,a6
(1)  401/FFFFFFFFFFFF041A :                     vidMd_Pal:
(1)  402/FFFFFFFFFFFF041A : 2A48                		move.l	a0,a5
(1)  403/FFFFFFFFFFFF041C : 7E00                		moveq	#0,d7
(1)  404/FFFFFFFFFFFF041E : 3E00                		move.w	d0,d7
(1)  405/FFFFFFFFFFFF0420 : DE47                		add.w	d7,d7
(1)  406/FFFFFFFFFFFF0422 : DCC7                		adda	d7,a6
(1)  407/FFFFFFFFFFFF0424 : 3E01                		move.w	d1,d7
(1)  408/FFFFFFFFFFFF0426 : 0447 0001           		subi.w	#1,d7
(1)  409/FFFFFFFFFFFF042A : 3C02                		move.w	d2,d6
(1)  410/FFFFFFFFFFFF042C : 0246 0001           		andi.w	#1,d6
(1)  411/FFFFFFFFFFFF0430 : E25E                		ror.w	#1,d6
(1)  412/FFFFFFFFFFFF0432 :                     .loop:
(1)  413/FFFFFFFFFFFF0432 : 3CDD                		move.w	(a5)+,(a6)+
(1)  414/FFFFFFFFFFFF0434 : 51CF FFFC           		dbf	d7,.loop
(1)  415/FFFFFFFFFFFF0438 : 4E75                		rts
(1)  416/FFFFFFFFFFFF043A :                     
(1)  417/FFFFFFFFFFFF043A :                     ; --------------------------------------------------------
(1)  418/FFFFFFFFFFFF043A :                     ; Video_DoPalFade
(1)  419/FFFFFFFFFFFF043A :                     ;
(1)  420/FFFFFFFFFFFF043A :                     ; RAM_ReqFadeMars: (WORD)
(1)  421/FFFFFFFFFFFF043A :                     ; $00 - No task or finished.
(1)  422/FFFFFFFFFFFF043A :                     ; $01 - Fade in
(1)  423/FFFFFFFFFFFF043A :                     ; $02 - Fade out to black
(1)  424/FFFFFFFFFFFF043A :                     ;
(1)  425/FFFFFFFFFFFF043A :                     ; NOTE: ONLY CALL THIS OUTSIDE OF VBLANK
(1)  426/FFFFFFFFFFFF043A :                     ; --------------------------------------------------------
(1)  427/FFFFFFFFFFFF043A :                     
(1)  428/FFFFFFFFFFFF043A :                     Video_DoPalFade:
(1)  429/FFFFFFFFFFFF043A : 0478 0001 BDEA      		subi.w	#1,(RAM_FadeMdTmr).w
(1)  430/FFFFFFFFFFFF0440 : 6A14                		bpl.s	.active
(1)  431/FFFFFFFFFFFF0442 : 31F8 BDE8 BDEA      		move.w	(RAM_FadeMdDelay).w,(RAM_FadeMdTmr).w
(1)  432/FFFFFFFFFFFF0448 : 3E38 BDE4           		move.w	(RAM_FadeMdReq).w,d7
(1)  433/FFFFFFFFFFFF044C : DE47                		add.w	d7,d7
(1)  434/FFFFFFFFFFFF044E : 3E3B 7008           		move.w	.fade_list(pc,d7.w),d7
(1)  435/FFFFFFFFFFFF0452 : 4EFB 7004           		jmp	.fade_list(pc,d7.w)
(1)  436/FFFFFFFFFFFF0456 :                     .active:
(1)  437/FFFFFFFFFFFF0456 : 4E75                		rts
(1)  438/FFFFFFFFFFFF0458 :                     
(1)  439/FFFFFFFFFFFF0458 :                     ; --------------------------------------------
(1)  440/FFFFFFFFFFFF0458 :                     
(1)  441/FFFFFFFFFFFF0458 :                     .fade_list:
(1)  442/FFFFFFFFFFFF0458 : 0006                		dc.w .fade_done-.fade_list
(1)  443/FFFFFFFFFFFF045A : 0008                		dc.w .fade_in-.fade_list
(1)  444/FFFFFFFFFFFF045C : 00AA                		dc.w .fade_out-.fade_list
(1)  445/FFFFFFFFFFFF045E :                     
(1)  446/FFFFFFFFFFFF045E :                     ; --------------------------------------------
(1)  447/FFFFFFFFFFFF045E :                     ; No fade or finished.
(1)  448/FFFFFFFFFFFF045E :                     ; --------------------------------------------
(1)  449/FFFFFFFFFFFF045E :                     
(1)  450/FFFFFFFFFFFF045E :                     .fade_done:
(1)  451/FFFFFFFFFFFF045E : 4E75                		rts
(1)  452/FFFFFFFFFFFF0460 :                     
(1)  453/FFFFFFFFFFFF0460 :                     ; --------------------------------------------
(1)  454/FFFFFFFFFFFF0460 :                     ; Fade in
(1)  455/FFFFFFFFFFFF0460 :                     ; --------------------------------------------
(1)  456/FFFFFFFFFFFF0460 :                     
(1)  457/FFFFFFFFFFFF0460 :                     .fade_in:
(1)  458/FFFFFFFFFFFF0460 : 4DF8 B094           		lea	(RAM_PaletteFd).w,a6
(1)  459/FFFFFFFFFFFF0464 : 4BF8 AE14           		lea	(RAM_Palette).w,a5
(1)  460/FFFFFFFFFFFF0468 : 7040                		moveq	#64,d0				; Num of colors
(1)  461/FFFFFFFFFFFF046A : 3238 BDE6           		move.w	(RAM_FadeMdIncr).w,d1		; Speed
(1)  462/FFFFFFFFFFFF046E : D241                		add.w	d1,d1
(1)  463/FFFFFFFFFFFF0470 : 3C00                		move.w	d0,d6
(1)  464/FFFFFFFFFFFF0472 : 4846                		swap	d6
(1)  465/FFFFFFFFFFFF0474 : 0440 0001           		subi.w	#1,d0
(1)  466/FFFFFFFFFFFF0478 :                     .nxt_pal:
(1)  467/FFFFFFFFFFFF0478 : 4242                		clr.w	d2		; Reset finished colorbits
(1)  468/FFFFFFFFFFFF047A : 3E16                		move.w	(a6),d7		; d7 - Input
(1)  469/FFFFFFFFFFFF047C : 3C15                		move.w	(a5),d6		; d6 - Output
(1)  470/FFFFFFFFFFFF047E : 3607                		move.w	d7,d3		; RED
(1)  471/FFFFFFFFFFFF0480 : 3806                		move.w	d6,d4
(1)  472/FFFFFFFFFFFF0482 : 0246 0EE0           		andi.w	#%0000111011100000,d6
(1)  473/FFFFFFFFFFFF0486 : 0244 000E           		andi.w	#%0000000000001110,d4
(1)  474/FFFFFFFFFFFF048A : 0243 000E           		andi.w	#%0000000000001110,d3
(1)  475/FFFFFFFFFFFF048E : D841                		add.w	d1,d4
(1)  476/FFFFFFFFFFFF0490 : B843                		cmp.w	d3,d4
(1)  477/FFFFFFFFFFFF0492 : 6506                		bcs.s	.no_red
(1)  478/FFFFFFFFFFFF0494 : 3803                		move.w	d3,d4
(1)  479/FFFFFFFFFFFF0496 : 0042 0001           		ori.w	#%001,d2	; RED is ready
(1)  480/FFFFFFFFFFFF049A :                     .no_red:
(1)  481/FFFFFFFFFFFF049A : 8C44                		or.w	d4,d6
(1)  482/FFFFFFFFFFFF049C : E949                		lsl.w	#4,d1
(1)  483/FFFFFFFFFFFF049E : 3607                		move.w	d7,d3		; GREEN
(1)  484/FFFFFFFFFFFF04A0 : 3806                		move.w	d6,d4
(1)  485/FFFFFFFFFFFF04A2 : 0246 0E0E           		andi.w	#%0000111000001110,d6
(1)  486/FFFFFFFFFFFF04A6 : 0244 00E0           		andi.w	#%0000000011100000,d4
(1)  487/FFFFFFFFFFFF04AA : 0243 00E0           		andi.w	#%0000000011100000,d3
(1)  488/FFFFFFFFFFFF04AE : D841                		add.w	d1,d4
(1)  489/FFFFFFFFFFFF04B0 : B843                		cmp.w	d3,d4
(1)  490/FFFFFFFFFFFF04B2 : 6506                		bcs.s	.no_grn
(1)  491/FFFFFFFFFFFF04B4 : 3803                		move.w	d3,d4
(1)  492/FFFFFFFFFFFF04B6 : 0042 0002           		ori.w	#%010,d2	; GREEN is ready
(1)  493/FFFFFFFFFFFF04BA :                     .no_grn:
(1)  494/FFFFFFFFFFFF04BA : 8C44                		or.w	d4,d6
(1)  495/FFFFFFFFFFFF04BC : E949                		lsl.w	#4,d1
(1)  496/FFFFFFFFFFFF04BE : 3607                		move.w	d7,d3		; BLUE
(1)  497/FFFFFFFFFFFF04C0 : 3806                		move.w	d6,d4
(1)  498/FFFFFFFFFFFF04C2 : 0246 00EE           		andi.w	#%0000000011101110,d6
(1)  499/FFFFFFFFFFFF04C6 : 0244 0E00           		andi.w	#%0000111000000000,d4
(1)  500/FFFFFFFFFFFF04CA : 0243 0E00           		andi.w	#%0000111000000000,d3
(1)  501/FFFFFFFFFFFF04CE : D841                		add.w	d1,d4
(1)  502/FFFFFFFFFFFF04D0 : B843                		cmp.w	d3,d4
(1)  503/FFFFFFFFFFFF04D2 : 6506                		bcs.s	.no_blu
(1)  504/FFFFFFFFFFFF04D4 : 3803                		move.w	d3,d4
(1)  505/FFFFFFFFFFFF04D6 : 0042 0004           		ori.w	#%100,d2	; BLUE is ready
(1)  506/FFFFFFFFFFFF04DA :                     .no_blu:
(1)  507/FFFFFFFFFFFF04DA : 8C44                		or.w	d4,d6
(1)  508/FFFFFFFFFFFF04DC : E049                		lsr.w	#8,d1
(1)  509/FFFFFFFFFFFF04DE : 3AC6                		move.w	d6,(a5)+
(1)  510/FFFFFFFFFFFF04E0 : DCFC 0002           		adda	#2,a6
(1)  511/FFFFFFFFFFFF04E4 : 0C42 0007           		cmpi.w	#%111,d2
(1)  512/FFFFFFFFFFFF04E8 : 6608                		bne.s	.no_fnsh
(1)  513/FFFFFFFFFFFF04EA : 4846                		swap	d6
(1)  514/FFFFFFFFFFFF04EC : 0446 0001           		subi.w	#1,d6
(1)  515/FFFFFFFFFFFF04F0 : 4846                		swap	d6
(1)  516/FFFFFFFFFFFF04F2 :                     .no_fnsh:
(1)  517/FFFFFFFFFFFF04F2 : 51C8 FF84           		dbf	d0,.nxt_pal
(1)  518/FFFFFFFFFFFF04F6 : 4846                		swap	d6
(1)  519/FFFFFFFFFFFF04F8 : 4A46                		tst.w	d6
(1)  520/FFFFFFFFFFFF04FA : 6604                		bne.s	.no_move
(1)  521/FFFFFFFFFFFF04FC : 4278 BDE4           		clr.w	(RAM_FadeMdReq).w
(1)  522/FFFFFFFFFFFF0500 :                     .no_move:
(1)  523/FFFFFFFFFFFF0500 : 4E75                		rts
(1)  524/FFFFFFFFFFFF0502 :                     
(1)  525/FFFFFFFFFFFF0502 :                     ; --------------------------------------------
(1)  526/FFFFFFFFFFFF0502 :                     ; Fade out
(1)  527/FFFFFFFFFFFF0502 :                     ; --------------------------------------------
(1)  528/FFFFFFFFFFFF0502 :                     
(1)  529/FFFFFFFFFFFF0502 :                     .fade_out:
(1)  530/FFFFFFFFFFFF0502 : 4DF8 AE14           		lea	(RAM_Palette).w,a6
(1)  531/FFFFFFFFFFFF0506 : 7040                		moveq	#64,d0				; Num of colors
(1)  532/FFFFFFFFFFFF0508 : 3238 BDE6           		move.w	(RAM_FadeMdIncr).w,d1		; Speed
(1)  533/FFFFFFFFFFFF050C : 3C00                		move.w	d0,d6
(1)  534/FFFFFFFFFFFF050E : 4846                		swap	d6
(1)  535/FFFFFFFFFFFF0510 : 0440 0001           		subi.w	#1,d0
(1)  536/FFFFFFFFFFFF0514 :                     .nxt_pal_o:
(1)  537/FFFFFFFFFFFF0514 : 4242                		clr.w	d2			; Reset finished colorbits
(1)  538/FFFFFFFFFFFF0516 : 3E16                		move.w	(a6),d7			; d7 - Input
(1)  539/FFFFFFFFFFFF0518 : 3C07                		move.w	d7,d6
(1)  540/FFFFFFFFFFFF051A : 0247 0EE0           		andi.w	#%0000111011100000,d7
(1)  541/FFFFFFFFFFFF051E : 0246 000E           		andi.w	#%0000000000001110,d6
(1)  542/FFFFFFFFFFFF0522 : 9C41                		sub.w	d1,d6
(1)  543/FFFFFFFFFFFF0524 : 6A06                		bpl.s	.no_red_o
(1)  544/FFFFFFFFFFFF0526 : 4246                		clr.w	d6
(1)  545/FFFFFFFFFFFF0528 : 0042 0001           		ori.w	#%001,d2		; RED is ready
(1)  546/FFFFFFFFFFFF052C :                     .no_red_o:
(1)  547/FFFFFFFFFFFF052C : 8E46                		or.w	d6,d7
(1)  548/FFFFFFFFFFFF052E : E949                		lsl.w	#4,d1
(1)  549/FFFFFFFFFFFF0530 : 3C07                		move.w	d7,d6
(1)  550/FFFFFFFFFFFF0532 : 0247 0E0E           		andi.w	#%0000111000001110,d7
(1)  551/FFFFFFFFFFFF0536 : 0246 00E0           		andi.w	#%0000000011100000,d6
(1)  552/FFFFFFFFFFFF053A : 9C41                		sub.w	d1,d6
(1)  553/FFFFFFFFFFFF053C : 6A06                		bpl.s	.no_grn_o
(1)  554/FFFFFFFFFFFF053E : 4246                		clr.w	d6
(1)  555/FFFFFFFFFFFF0540 : 0042 0002           		ori.w	#%010,d2		; GREEN is ready
(1)  556/FFFFFFFFFFFF0544 :                     .no_grn_o:
(1)  557/FFFFFFFFFFFF0544 : 8E46                		or.w	d6,d7
(1)  558/FFFFFFFFFFFF0546 : E949                		lsl.w	#4,d1
(1)  559/FFFFFFFFFFFF0548 : 3C07                		move.w	d7,d6
(1)  560/FFFFFFFFFFFF054A : 0247 00EE           		andi.w	#%0000000011101110,d7
(1)  561/FFFFFFFFFFFF054E : 0246 0E00           		andi.w	#%0000111000000000,d6
(1)  562/FFFFFFFFFFFF0552 : 9C41                		sub.w	d1,d6
(1)  563/FFFFFFFFFFFF0554 : 6A06                		bpl.s	.no_blu_o
(1)  564/FFFFFFFFFFFF0556 : 4246                		clr.w	d6
(1)  565/FFFFFFFFFFFF0558 : 0042 0004           		ori.w	#%100,d2		; BLUE is ready
(1)  566/FFFFFFFFFFFF055C :                     .no_blu_o:
(1)  567/FFFFFFFFFFFF055C : 8E46                		or.w	d6,d7
(1)  568/FFFFFFFFFFFF055E : E049                		lsr.w	#8,d1
(1)  569/FFFFFFFFFFFF0560 : 3CC7                		move.w	d7,(a6)+
(1)  570/FFFFFFFFFFFF0562 : 0C42 0007           		cmpi.w	#%111,d2
(1)  571/FFFFFFFFFFFF0566 : 6608                		bne.s	.no_fnsh_o
(1)  572/FFFFFFFFFFFF0568 : 4846                		swap	d6
(1)  573/FFFFFFFFFFFF056A : 0446 0001           		subi.w	#1,d6
(1)  574/FFFFFFFFFFFF056E : 4846                		swap	d6
(1)  575/FFFFFFFFFFFF0570 :                     .no_fnsh_o:
(1)  576/FFFFFFFFFFFF0570 : 51C8 FFA2           		dbf	d0,.nxt_pal_o
(1)  577/FFFFFFFFFFFF0574 : 4846                		swap	d6
(1)  578/FFFFFFFFFFFF0576 : 4A46                		tst.w	d6
(1)  579/FFFFFFFFFFFF0578 : 6604                		bne.s	.no_move_o
(1)  580/FFFFFFFFFFFF057A : 4278 BDE4           		clr.w	(RAM_FadeMdReq).w
(1)  581/FFFFFFFFFFFF057E :                     .no_move_o:
(1)  582/FFFFFFFFFFFF057E : 4E75                		rts
(1)  583/FFFFFFFFFFFF0580 :                     
(1)  584/FFFFFFFFFFFF0580 :                     ; ====================================================================
(1)  585/FFFFFFFFFFFF0580 :                     ; --------------------------------------------------------
(1)  586/FFFFFFFFFFFF0580 :                     ; Genesis DMA
(1)  587/FFFFFFFFFFFF0580 :                     ; --------------------------------------------------------
(1)  588/FFFFFFFFFFFF0580 :                     
(1)  589/FFFFFFFFFFFF0580 :                     ; --------------------------------------------------------
(1)  590/FFFFFFFFFFFF0580 :                     ; Video_DmaMkEntry
(1)  591/FFFFFFFFFFFF0580 :                     ;
(1)  592/FFFFFFFFFFFF0580 :                     ; Sets a new DMA transfer entry to the BLAST list
(1)  593/FFFFFFFFFFFF0580 :                     ;
(1)  594/FFFFFFFFFFFF0580 :                     ; *** CALL THIS OUTSIDE OF VBLANK ONLY ***
(1)  595/FFFFFFFFFFFF0580 :                     ;
(1)  596/FFFFFFFFFFFF0580 :                     ; d0.l - Art data Real-ROM location
(1)  597/FFFFFFFFFFFF0580 :                     ; d1.w - VRAM location cell_vram()
(1)  598/FFFFFFFFFFFF0580 :                     ; d2.w - Size
(1)  599/FFFFFFFFFFFF0580 :                     ;
(1)  600/FFFFFFFFFFFF0580 :                     ; Breaks:
(1)  601/FFFFFFFFFFFF0580 :                     ; d5-d7,a6
(1)  602/FFFFFFFFFFFF0580 :                     ; --------------------------------------------------------
(1)  603/FFFFFFFFFFFF0580 :                     
(1)  604/FFFFFFFFFFFF0580 :                     Video_DmaMkEntry:
(1)  605/FFFFFFFFFFFF0580 : 2A00                		move.l	d0,d5
(1)  606/FFFFFFFFFFFF0582 : DA42                		add.w	d2,d5
(1)  607/FFFFFFFFFFFF0584 : 6430                		bcc.s	.normal
(1)  608/FFFFFFFFFFFF0586 : 2A00                		move.l	d0,d5		; <-- DOUBLE TRANSFER
(1)  609/FFFFFFFFFFFF0588 : 3C01                		move.w	d1,d6
(1)  610/FFFFFFFFFFFF058A : 2E05                		move.l	d5,d7		; Top
(1)  611/FFFFFFFFFFFF058C : 0687 0001 0000      		addi.l	#$010000,d7
(1)  612/FFFFFFFFFFFF0592 : 0287 00FF 0000      		andi.l	#$FF0000,d7
(1)  613/FFFFFFFFFFFF0598 : 9E80                		sub.l	d0,d7
(1)  614/FFFFFFFFFFFF059A : 6120                		bsr.s	.mk_set
(1)  615/FFFFFFFFFFFF059C : 2A00                		move.l	d0,d5		; Bottom
(1)  616/FFFFFFFFFFFF059E : 0685 0001 0000      		addi.l	#$010000,d5
(1)  617/FFFFFFFFFFFF05A4 : 0285 00FF 0000      		andi.l	#$FF0000,d5
(1)  618/FFFFFFFFFFFF05AA : 2C05                		move.l	d5,d6
(1)  619/FFFFFFFFFFFF05AC : 9C80                		sub.l	d0,d6
(1)  620/FFFFFFFFFFFF05AE : 3E02                		move.w	d2,d7
(1)  621/FFFFFFFFFFFF05B0 : 9E46                		sub.w	d6,d7
(1)  622/FFFFFFFFFFFF05B2 : DC41                		add.w	d1,d6
(1)  623/FFFFFFFFFFFF05B4 : 6006                		bra.s	.mk_set
(1)  624/FFFFFFFFFFFF05B6 :                     .normal:
(1)  625/FFFFFFFFFFFF05B6 : 2A00                		move.l	d0,d5
(1)  626/FFFFFFFFFFFF05B8 : 3C01                		move.w	d1,d6
(1)  627/FFFFFFFFFFFF05BA : 3E02                		move.w	d2,d7
(1)  628/FFFFFFFFFFFF05BC :                     ; d7 - size
(1)  629/FFFFFFFFFFFF05BC :                     ; d6 - vram
(1)  630/FFFFFFFFFFFF05BC :                     ; d5 - data
(1)  631/FFFFFFFFFFFF05BC :                     .mk_set:
(1)  632/FFFFFFFFFFFF05BC : 4847                		swap	d7
(1)  633/FFFFFFFFFFFF05BE : 3E38 BDDE           		move.w	(RAM_VdpDmaIndx).w,d7
(1)  634/FFFFFFFFFFFF05C2 : 0C47 0018           		cmpi.w	#MAX_MDDMATSK,d7
(1)  635/FFFFFFFFFFFF05C6 : 6C64                		bge.s	.ran_out
(1)  636/FFFFFFFFFFFF05C8 : E94F                		lsl.w	#4,d7			; Size $10
(1)  637/FFFFFFFFFFFF05CA : 4DF8 B114           		lea	(RAM_VdpDmaList).w,a6
(1)  638/FFFFFFFFFFFF05CE : DCC7                		adda	d7,a6
(1)  639/FFFFFFFFFFFF05D0 : 4847                		swap	d7
(1)  640/FFFFFFFFFFFF05D2 : 31FC 0001 BDE0      		move.w	#1,(RAM_VdpDmaMod).w
(1)  641/FFFFFFFFFFFF05D8 : 5278 BDDE           		addq.w	#1,(RAM_VdpDmaIndx).w
(1)  642/FFFFFFFFFFFF05DC :                     
(1)  643/FFFFFFFFFFFF05DC : 0287 0000 FFFE      		andi.l	#$0000FFFE,d7
(1)  644/FFFFFFFFFFFF05E2 : EF8F                		lsl.l	#7,d7
(1)  645/FFFFFFFFFFFF05E4 : E04F                		lsr.w	#8,d7
(1)  646/FFFFFFFFFFFF05E6 : 0087 9400 9300      		ori.l	#$94009300,d7
(1)  647/FFFFFFFFFFFF05EC : 2CC7                		move.l	d7,(a6)+
(1)  648/FFFFFFFFFFFF05EE : E28D                  		lsr.l	#1,d5			; d5 - Source
(1)  649/FFFFFFFFFFFF05F0 : 2E3C 9600 9500       		move.l	#$96009500,d7
(1)  650/FFFFFFFFFFFF05F6 : 1E05                 		move.b	d5,d7
(1)  651/FFFFFFFFFFFF05F8 : E08D                 		lsr.l	#8,d5
(1)  652/FFFFFFFFFFFF05FA : 4847                 		swap	d7
(1)  653/FFFFFFFFFFFF05FC : 1E05                 		move.b	d5,d7
(1)  654/FFFFFFFFFFFF05FE : 2CC7                 		move.l	d7,(a6)+
(1)  655/FFFFFFFFFFFF0600 : 3E3C 9700            		move.w	#$9700,d7
(1)  656/FFFFFFFFFFFF0604 : E08D                 		lsr.l	#8,d5
(1)  657/FFFFFFFFFFFF0606 : 1E05                 		move.b	d5,d7
(1)  658/FFFFFFFFFFFF0608 : 3CC7                 		move.w	d7,(a6)+
(1)  659/FFFFFFFFFFFF060A : 3E06                		move.w	d6,d7			; Destination
(1)  660/FFFFFFFFFFFF060C : 0286 0000 3FFF      		andi.l	#$3FFF,d6
(1)  661/FFFFFFFFFFFF0612 : 0046 4000           		ori.w	#$4000,d6
(1)  662/FFFFFFFFFFFF0616 : E04F                		lsr.w	#8,d7
(1)  663/FFFFFFFFFFFF0618 : EC4F                		lsr.w	#6,d7
(1)  664/FFFFFFFFFFFF061A : 0247 0003           		andi.w	#%11,d7
(1)  665/FFFFFFFFFFFF061E : 0047 0080           		ori.w	#$80,d7
(1)  666/FFFFFFFFFFFF0622 : 3CC6                		move.w	d6,(a6)+
(1)  667/FFFFFFFFFFFF0624 : 3CC7                		move.w	d7,(a6)+
(1)  675/FFFFFFFFFFFF0626 : 31FC 0000 BDE0      		move.w	#0,(RAM_VdpDmaMod).w
(1)  676/FFFFFFFFFFFF062C :                     .ran_out:
(1)  677/FFFFFFFFFFFF062C : 4E75                		rts
(1)  678/FFFFFFFFFFFF062E :                     
(1)  679/FFFFFFFFFFFF062E :                     ; --------------------------------------------------------
(1)  680/FFFFFFFFFFFF062E :                     ; Video_Fill
(1)  681/FFFFFFFFFFFF062E :                     ;
(1)  682/FFFFFFFFFFFF062E :                     ; Fill data to VRAM
(1)  683/FFFFFFFFFFFF062E :                     ;
(1)  684/FFFFFFFFFFFF062E :                     ; d0.w - WORD to fill
(1)  685/FFFFFFFFFFFF062E :                     ; d1.w - VRAM location cell_vram()
(1)  686/FFFFFFFFFFFF062E :                     ; d2.w - Size
(1)  687/FFFFFFFFFFFF062E :                     ;
(1)  688/FFFFFFFFFFFF062E :                     ; Breaks:
(1)  689/FFFFFFFFFFFF062E :                     ; d6-d7,a6
(1)  690/FFFFFFFFFFFF062E :                     ;
(1)  691/FFFFFFFFFFFF062E :                     ; Notes:
(1)  692/FFFFFFFFFFFF062E :                     ; Size $0001 is invalid, writes in this order: $56781234
(1)  693/FFFFFFFFFFFF062E :                     ; --------------------------------------------------------
(1)  694/FFFFFFFFFFFF062E :                     
(1)  695/FFFFFFFFFFFF062E :                     Video_Fill:
(1)  696/FFFFFFFFFFFF062E : 4DF9 00C0 0004      		lea	(vdp_ctrl).l,a6
(1)  697/FFFFFFFFFFFF0634 : 3E3C 8100           		move.w	#$8100,d7
(1)  698/FFFFFFFFFFFF0638 : 1E38 BDF7           		move.b	(RAM_VdpRegs+1).w,d7
(1)  699/FFFFFFFFFFFF063C : 08C7 0004           		bset	#bitDmaEnbl,d7
(1)  700/FFFFFFFFFFFF0640 : 3C87                		move.w	d7,(a6)
(1)  701/FFFFFFFFFFFF0642 : 3E16                .dmaw:		move.w	(a6),d7
(1)  702/FFFFFFFFFFFF0644 : 0807 0001           		btst	#bitDma,d7
(1)  703/FFFFFFFFFFFF0648 : 66F8                		bne.s	.dmaw
(1)  704/FFFFFFFFFFFF064A : 3CBC 8F01           		move.w	#$8F01,(a6)	; Increment $01
(1)  705/FFFFFFFFFFFF064E : 3E02                		move.w	d2,d7		; d2 - Size
(1)  706/FFFFFFFFFFFF0650 : 0447 0001           		subi.w	#1,d7
(1)  707/FFFFFFFFFFFF0654 : 2C3C 9400 9300      		move.l	#$94009300,d6
(1)  708/FFFFFFFFFFFF065A : 1C07                		move.b	d7,d6
(1)  709/FFFFFFFFFFFF065C : 4846                		swap	d6
(1)  710/FFFFFFFFFFFF065E : E04F                		lsr.w	#8,d7
(1)  711/FFFFFFFFFFFF0660 : 1C07                		move.b	d7,d6
(1)  712/FFFFFFFFFFFF0662 : 4846                		swap	d6
(1)  713/FFFFFFFFFFFF0664 : 2C86                		move.l	d6,(a6)
(1)  714/FFFFFFFFFFFF0666 : 3CBC 9780           		move.w	#$9780,(a6)	; DMA Fill mode
(1)  715/FFFFFFFFFFFF066A : 3E01                		move.w	d1,d7		; d1 - Destination
(1)  716/FFFFFFFFFFFF066C : 3C07                		move.w	d7,d6
(1)  717/FFFFFFFFFFFF066E : 0246 3FFF           		andi.w	#$3FFF,d6
(1)  718/FFFFFFFFFFFF0672 : 0046 4000           		ori.w	#$4000,d6
(1)  719/FFFFFFFFFFFF0676 : 4846                		swap	d6
(1)  720/FFFFFFFFFFFF0678 : 3C07                		move.w	d7,d6
(1)  721/FFFFFFFFFFFF067A : E04E                		lsr.w	#8,d6
(1)  722/FFFFFFFFFFFF067C : EC4E                		lsr.w	#6,d6
(1)  723/FFFFFFFFFFFF067E : 0246 0003           		andi.w	#%11,d6
(1)  724/FFFFFFFFFFFF0682 : 0046 0080           		ori.w	#$80,d6
(1)  725/FFFFFFFFFFFF0686 : 2C86                		move.l	d6,(a6)
(1)  726/FFFFFFFFFFFF0688 : 3D40 FFFC           		move.w	d0,-4(a6)
(1)  727/FFFFFFFFFFFF068C : 3E16                .dma_w:		move.w	(a6),d7
(1)  728/FFFFFFFFFFFF068E : 0807 0001           		btst	#bitDma,d7
(1)  729/FFFFFFFFFFFF0692 : 66F8                		bne.s	.dma_w
(1)  730/FFFFFFFFFFFF0694 : 3CBC 8F02           		move.w	#$8F02,(a6)	; Increment $02
(1)  731/FFFFFFFFFFFF0698 : 3E3C 8100           		move.w	#$8100,d7
(1)  732/FFFFFFFFFFFF069C : 1E38 BDF7           		move.b	(RAM_VdpRegs+1).w,d7
(1)  733/FFFFFFFFFFFF06A0 : 3C87                		move.w	d7,(a6)
(1)  734/FFFFFFFFFFFF06A2 : 4E75                		rts
(1)  735/FFFFFFFFFFFF06A4 :                     
(1)  736/FFFFFFFFFFFF06A4 :                     ; --------------------------------------------------------
(1)  737/FFFFFFFFFFFF06A4 :                     ; Video_Copy
(1)  738/FFFFFFFFFFFF06A4 :                     ;
(1)  739/FFFFFFFFFFFF06A4 :                     ; Copy VRAM data to another location
(1)  740/FFFFFFFFFFFF06A4 :                     ;
(1)  741/FFFFFFFFFFFF06A4 :                     ; d0.w - VRAM Source cell_vram()
(1)  742/FFFFFFFFFFFF06A4 :                     ; d1.w - VRAM Destination cell_vram()
(1)  743/FFFFFFFFFFFF06A4 :                     ; d2.w - Size
(1)  744/FFFFFFFFFFFF06A4 :                     ;
(1)  745/FFFFFFFFFFFF06A4 :                     ; Breaks:
(1)  746/FFFFFFFFFFFF06A4 :                     ; d6-d7,a6
(1)  747/FFFFFFFFFFFF06A4 :                     ; --------------------------------------------------------
(1)  748/FFFFFFFFFFFF06A4 :                     
(1)  749/FFFFFFFFFFFF06A4 :                     ; TODO: test if this works again...
(1)  750/FFFFFFFFFFFF06A4 :                     
(1)  751/FFFFFFFFFFFF06A4 :                     Video_Copy:
(1)  752/FFFFFFFFFFFF06A4 : 4DF9 00C0 0004      		lea	(vdp_ctrl),a6
(1)  753/FFFFFFFFFFFF06AA : 3E3C 8100           		move.w	#$8100,d7
(1)  754/FFFFFFFFFFFF06AE : 1E38 BDF7           		move.b	(RAM_VdpRegs+1).w,d7
(1)  755/FFFFFFFFFFFF06B2 : 08C7 0004           		bset	#bitDmaEnbl,d7
(1)  756/FFFFFFFFFFFF06B6 : 3C87                		move.w	d7,(a6)
(1)  757/FFFFFFFFFFFF06B8 : 3E16                .dmaw:		move.w	(a6),d7
(1)  758/FFFFFFFFFFFF06BA : 0807 0001           		btst	#bitDma,d7
(1)  759/FFFFFFFFFFFF06BE : 66F8                		bne.s	.dmaw
(1)  760/FFFFFFFFFFFF06C0 : 3CBC 8F01           		move.w	#$8F01,(a6)		; Increment $01
(1)  761/FFFFFFFFFFFF06C4 : 3E02                		move.w	d2,d7			; SIZE
(1)  762/FFFFFFFFFFFF06C6 : 2C3C 9400 9300      		move.l	#$94009300,d6
(1)  763/FFFFFFFFFFFF06CC :                     ; 		lsr.w	#1,d7
(1)  764/FFFFFFFFFFFF06CC : 1C07                		move.b	d7,d6
(1)  765/FFFFFFFFFFFF06CE : 4846                		swap	d6
(1)  766/FFFFFFFFFFFF06D0 : E04F                		lsr.w	#8,d7
(1)  767/FFFFFFFFFFFF06D2 : 1C07                		move.b	d7,d6
(1)  768/FFFFFFFFFFFF06D4 : 4846                		swap	d6
(1)  769/FFFFFFFFFFFF06D6 : 2C86                		move.l	d6,(a6)
(1)  770/FFFFFFFFFFFF06D8 : 2C3C 9600 9500      		move.l	#$96009500,d6		; SOURCE
(1)  771/FFFFFFFFFFFF06DE : 3E00                		move.w	d0,d7
(1)  772/FFFFFFFFFFFF06E0 : 1C07                		move.b	d7,d6
(1)  773/FFFFFFFFFFFF06E2 : 4846                		swap	d6
(1)  774/FFFFFFFFFFFF06E4 : E04F                		lsr.w	#8,d7
(1)  775/FFFFFFFFFFFF06E6 : 1C07                		move.b	d7,d6
(1)  776/FFFFFFFFFFFF06E8 : 2C86                		move.l	d6,(a6)
(1)  777/FFFFFFFFFFFF06EA : 3CBC 97C0           		move.w	#$97C0,(a6)		; DMA Copy mode
(1)  778/FFFFFFFFFFFF06EE : 2E02                		move.l	d2,d7			; DESTINATION
(1)  779/FFFFFFFFFFFF06F0 : 3C07                		move.w	d7,d6
(1)  780/FFFFFFFFFFFF06F2 : 0246 3FFF           		andi.w	#$3FFF,d6
(1)  781/FFFFFFFFFFFF06F6 : 0046 4000           		ori.w	#$4000,d6
(1)  782/FFFFFFFFFFFF06FA : 4846                		swap	d6
(1)  783/FFFFFFFFFFFF06FC : 3C07                		move.w	d7,d6
(1)  784/FFFFFFFFFFFF06FE : E04E                		lsr.w	#8,d6
(1)  785/FFFFFFFFFFFF0700 : EC4E                		lsr.w	#6,d6
(1)  786/FFFFFFFFFFFF0702 : 0246 0003           		andi.w	#%11,d6
(1)  787/FFFFFFFFFFFF0706 : 0046 00C0           		ori.w	#$C0,d6
(1)  788/FFFFFFFFFFFF070A : 2C86                		move.l	d6,(a6)
(1)  789/FFFFFFFFFFFF070C : 3D41 FFFC           		move.w	d1,-4(a6)
(1)  790/FFFFFFFFFFFF0710 : 3E16                .dma_w:		move.w	(a6),d7
(1)  791/FFFFFFFFFFFF0712 : 0807 0001           		btst	#bitDma,d7
(1)  792/FFFFFFFFFFFF0716 : 66F8                		bne.s	.dma_w
(1)  793/FFFFFFFFFFFF0718 : 3CBC 8F02           		move.w	#$8F02,(a6)		; Increment $02
(1)  794/FFFFFFFFFFFF071C : 3E3C 8100           		move.w	#$8100,d7
(1)  795/FFFFFFFFFFFF0720 : 1E38 BDF7           		move.b	(RAM_VdpRegs+1).w,d7
(1)  796/FFFFFFFFFFFF0724 : 3C87                		move.w	d7,(a6)
(1)  797/FFFFFFFFFFFF0726 : 4E75                		rts
(1)  798/FFFFFFFFFFFF0728 :                     
(1)  799/FFFFFFFFFFFF0728 :                     ; --------------------------------------------------------
(1)  800/FFFFFFFFFFFF0728 :                     ; Load graphics using DMA manually
(1)  801/FFFFFFFFFFFF0728 :                     ;
(1)  802/FFFFFFFFFFFF0728 :                     ; Input:
(1)  803/FFFFFFFFFFFF0728 :                     ; d0.l - Graphics data pointer (NOT a0)
(1)  804/FFFFFFFFFFFF0728 :                     ; d1.w - cell_vram(vram_pos)
(1)  805/FFFFFFFFFFFF0728 :                     ; d2.w - Size
(1)  806/FFFFFFFFFFFF0728 :                     ;
(1)  807/FFFFFFFFFFFF0728 :                     ; Breaks:
(1)  808/FFFFFFFFFFFF0728 :                     ; d4-d7,a4
(1)  809/FFFFFFFFFFFF0728 :                     ;
(1)  810/FFFFFFFFFFFF0728 :                     ; Notes:
(1)  811/FFFFFFFFFFFF0728 :                     ; - For a faster transfer call this during VBlank
(1)  812/FFFFFFFFFFFF0728 :                     ; - 32X: MAKE SURE THE SH2 SIDE IS NOT READING ROM
(1)  813/FFFFFFFFFFFF0728 :                     ;        BEFORE CALLING THIS.
(1)  814/FFFFFFFFFFFF0728 :                     ; --------------------------------------------------------
(1)  815/FFFFFFFFFFFF0728 :                     
(1)  816/FFFFFFFFFFFF0728 :                     Video_LoadArt:
(1)  817/FFFFFFFFFFFF0728 : 2A00                		move.l	d0,d5
(1)  818/FFFFFFFFFFFF072A : DA42                		add.w	d2,d5
(1)  819/FFFFFFFFFFFF072C : 6430                		bcc.s	.normal
(1)  820/FFFFFFFFFFFF072E : 2A00                		move.l	d0,d5		; <-- DOUBLE TRANSFER
(1)  821/FFFFFFFFFFFF0730 : 3C01                		move.w	d1,d6
(1)  822/FFFFFFFFFFFF0732 : 2E05                		move.l	d5,d7		; Top
(1)  823/FFFFFFFFFFFF0734 : 0687 0001 0000      		addi.l	#$010000,d7
(1)  824/FFFFFFFFFFFF073A : 0287 00FF 0000      		andi.l	#$FF0000,d7
(1)  825/FFFFFFFFFFFF0740 : 9E80                		sub.l	d0,d7
(1)  826/FFFFFFFFFFFF0742 : 6120                		bsr.s	.mk_set
(1)  827/FFFFFFFFFFFF0744 : 2A00                		move.l	d0,d5		; Bottom
(1)  828/FFFFFFFFFFFF0746 : 0685 0001 0000      		addi.l	#$010000,d5
(1)  829/FFFFFFFFFFFF074C : 0285 00FF 0000      		andi.l	#$FF0000,d5
(1)  830/FFFFFFFFFFFF0752 : 2C05                		move.l	d5,d6
(1)  831/FFFFFFFFFFFF0754 : 9C80                		sub.l	d0,d6
(1)  832/FFFFFFFFFFFF0756 : 3E02                		move.w	d2,d7
(1)  833/FFFFFFFFFFFF0758 : 9E46                		sub.w	d6,d7
(1)  834/FFFFFFFFFFFF075A : DC41                		add.w	d1,d6
(1)  835/FFFFFFFFFFFF075C : 6006                		bra.s	.mk_set
(1)  836/FFFFFFFFFFFF075E :                     .normal:
(1)  837/FFFFFFFFFFFF075E : 2A00                		move.l	d0,d5
(1)  838/FFFFFFFFFFFF0760 : 3C01                		move.w	d1,d6
(1)  839/FFFFFFFFFFFF0762 : 3E02                		move.w	d2,d7
(1)  840/FFFFFFFFFFFF0764 :                     ; d7 - size
(1)  841/FFFFFFFFFFFF0764 :                     ; d6 - vram
(1)  842/FFFFFFFFFFFF0764 :                     ; d5 - data
(1)  843/FFFFFFFFFFFF0764 :                     .mk_set:
(1)  844/FFFFFFFFFFFF0764 : 49F9 00C0 0004      		lea	(vdp_ctrl),a4
(1)  845/FFFFFFFFFFFF076A : 383C 8100           		move.w	#$8100,d4		; DMA ON
(1)  846/FFFFFFFFFFFF076E : 1838 BDF7           		move.b	(RAM_VdpRegs+1).w,d4
(1)  847/FFFFFFFFFFFF0772 : 08C4 0004           		bset	#bitDmaEnbl,d4
(1)  848/FFFFFFFFFFFF0776 : 3884                		move.w	d4,(a4)
(1)  849/FFFFFFFFFFFF0778 :                     
(1)  864/FFFFFFFFFFFF0778 : 611A                		bsr.s	.shared_setup
(1)  865/FFFFFFFFFFFF077A : 3886                		move.w	d6,(a4)
(1)  866/FFFFFFFFFFFF077C : 6100 09B2           		bsr	System_DmaEnter_ROM
(1)  867/FFFFFFFFFFFF0780 : 3887                		move.w	d7,(a4)			; <-- second write
(1)  868/FFFFFFFFFFFF0782 : 6100 09B0           		bsr	System_DmaExit_ROM
(1)  869/FFFFFFFFFFFF0786 : 383C 8100           		move.w	#$8100,d4		; DMA OFF
(1)  870/FFFFFFFFFFFF078A : 1838 BDF7           		move.b	(RAM_VdpRegs+1).w,d4
(1)  871/FFFFFFFFFFFF078E : 3884                		move.w	d4,(a4)
(1)  872/FFFFFFFFFFFF0790 :                     
(1)  894/FFFFFFFFFFFF0790 : 4E75                		rts
(1)  895/FFFFFFFFFFFF0792 :                     
(1)  896/FFFFFFFFFFFF0792 :                     .from_ram:
(1)  897/FFFFFFFFFFFF0792 : 4E75                		rts
(1)  898/FFFFFFFFFFFF0794 :                     
(1)  899/FFFFFFFFFFFF0794 :                     .shared_setup:
(1)  900/FFFFFFFFFFFF0794 : 0287 0000 FFFE      		andi.l	#$0000FFFE,d7
(1)  901/FFFFFFFFFFFF079A : EF8F                		lsl.l	#7,d7
(1)  902/FFFFFFFFFFFF079C : E04F                		lsr.w	#8,d7
(1)  903/FFFFFFFFFFFF079E : 0087 9400 9300      		ori.l	#$94009300,d7
(1)  904/FFFFFFFFFFFF07A4 : 2887                		move.l	d7,(a4)
(1)  905/FFFFFFFFFFFF07A6 : E28D                  		lsr.l	#1,d5			; d5 - Source
(1)  906/FFFFFFFFFFFF07A8 : 2E3C 9600 9500       		move.l	#$96009500,d7
(1)  907/FFFFFFFFFFFF07AE : 1E05                 		move.b	d5,d7
(1)  908/FFFFFFFFFFFF07B0 : E08D                 		lsr.l	#8,d5
(1)  909/FFFFFFFFFFFF07B2 : 4847                 		swap	d7
(1)  910/FFFFFFFFFFFF07B4 : 1E05                 		move.b	d5,d7
(1)  911/FFFFFFFFFFFF07B6 : 2887                 		move.l	d7,(a4)
(1)  912/FFFFFFFFFFFF07B8 : 3E3C 9700            		move.w	#$9700,d7
(1)  913/FFFFFFFFFFFF07BC : E08D                 		lsr.l	#8,d5
(1)  914/FFFFFFFFFFFF07BE : 1E05                 		move.b	d5,d7
(1)  915/FFFFFFFFFFFF07C0 : 3887                 		move.w	d7,(a4)
(1)  916/FFFFFFFFFFFF07C2 : 3E06                		move.w	d6,d7			; Destination
(1)  917/FFFFFFFFFFFF07C4 : 0286 0000 3FFF      		andi.l	#$3FFF,d6
(1)  918/FFFFFFFFFFFF07CA : 0046 4000           		ori.w	#$4000,d6
(1)  919/FFFFFFFFFFFF07CE : E04F                		lsr.w	#8,d7
(1)  920/FFFFFFFFFFFF07D0 : EC4F                		lsr.w	#6,d7
(1)  921/FFFFFFFFFFFF07D2 : 0247 0003           		andi.w	#%11,d7
(1)  922/FFFFFFFFFFFF07D6 : 0047 0080           		ori.w	#$80,d7
(1)  923/FFFFFFFFFFFF07DA : 4E75                		rts
(1)  924/FFFFFFFFFFFF07DC :                     
(1)  925/FFFFFFFFFFFF07DC :                     ; --------------------------------------------------------
(1)  926/FFFFFFFFFFFF07DC :                     ; Video_Render
(1)  927/FFFFFFFFFFFF07DC :                     ;
(1)  928/FFFFFFFFFFFF07DC :                     ; Call this during VBlank to update
(1)  929/FFFFFFFFFFFF07DC :                     ; visuals.
(1)  930/FFFFFFFFFFFF07DC :                     ; --------------------------------------------------------
(1)  931/FFFFFFFFFFFF07DC :                     
(1)  932/FFFFFFFFFFFF07DC :                     Video_Render:
(1)  933/FFFFFFFFFFFF07DC : 4DF9 00C0 0004      		lea	(vdp_ctrl),a6
(1)  934/FFFFFFFFFFFF07E2 : 3E3C 8100           		move.w	#$8100,d7		; DMA ON
(1)  935/FFFFFFFFFFFF07E6 : 1E38 BDF7           		move.b	(RAM_VdpRegs+1).w,d7
(1)  936/FFFFFFFFFFFF07EA : 08C7 0004           		bset	#bitDmaEnbl,d7
(1)  937/FFFFFFFFFFFF07EE : 3C87                		move.w	d7,(a6)
(1)  938/FFFFFFFFFFFF07F0 : 6100 0936           		bsr	System_DmaEnter_RAM
(1)  939/FFFFFFFFFFFF07F4 : 2CBC 9400 9328      		move.l	#$94009328,(a6)
(1)  940/FFFFFFFFFFFF07FA : 2CBC 96D1 95E2      		move.l	#$96009500|(RAM_VerScroll<<7&$FF0000)|(RAM_VerScroll>>1&$FF),(a6)
(1)  941/FFFFFFFFFFFF0800 : 3CBC 977F           		move.w	#$9700|(RAM_VerScroll>>17&$7F),(a6)
(1)  942/FFFFFFFFFFFF0804 : 3CBC 4000           		move.w	#$4000,(a6)
(1)  943/FFFFFFFFFFFF0808 : 3F3C 0090           		move.w	#$0010|$80,-(sp)
(1)  944/FFFFFFFFFFFF080C : 3C9F                		move.w	(sp)+,(a6)
(1)  945/FFFFFFFFFFFF080E : 2CBC 9401 93E0      		move.l	#$940193E0,(a6)
(1)  946/FFFFFFFFFFFF0814 : 2CBC 96D0 9502      		move.l	#$96009500|(RAM_HorScroll<<7&$FF0000)|(RAM_HorScroll>>1&$FF),(a6)
(1)  947/FFFFFFFFFFFF081A : 3CBC 977F           		move.w	#$9700|(RAM_HorScroll>>17&$7F),(a6)
(1)  948/FFFFFFFFFFFF081E : 3CBC 7C00           		move.w	#$7C00,(a6)
(1)  949/FFFFFFFFFFFF0822 : 3F3C 0083           		move.w	#$0003|$80,-(sp)
(1)  950/FFFFFFFFFFFF0826 : 3C9F                		move.w	(sp)+,(a6)
(1)  951/FFFFFFFFFFFF0828 : 2CBC 9402 9300      		move.l	#$94029300,(a6)
(1)  952/FFFFFFFFFFFF082E : 2CBC 96D2 950A      		move.l	#$96009500|(RAM_Sprites<<7&$FF0000)|(RAM_Sprites>>1&$FF),(a6)
(1)  953/FFFFFFFFFFFF0834 : 3CBC 977F           		move.w	#$9700|(RAM_Sprites>>17&$7F),(a6)
(1)  954/FFFFFFFFFFFF0838 : 3CBC 7800           		move.w	#$7800,(a6)
(1)  955/FFFFFFFFFFFF083C : 3F3C 0083           		move.w	#$0003|$80,-(sp)
(1)  956/FFFFFFFFFFFF0840 : 3C9F                		move.w	(sp)+,(a6)
(1)  957/FFFFFFFFFFFF0842 : 2CBC 9400 9340      		move.l	#$94009340,(a6)
(1)  958/FFFFFFFFFFFF0848 : 2CBC 96D7 950A      		move.l	#$96009500|(RAM_Palette<<7&$FF0000)|(RAM_Palette>>1&$FF),(a6)
(1)  959/FFFFFFFFFFFF084E : 3CBC 977F           		move.w	#$9700|(RAM_Palette>>17&$7F),(a6)
(1)  960/FFFFFFFFFFFF0852 : 3CBC C000           		move.w	#$C000,(a6)
(1)  961/FFFFFFFFFFFF0856 : 3F3C 0080           		move.w	#$0000|$80,-(sp)
(1)  962/FFFFFFFFFFFF085A : 3C9F                		move.w	(sp)+,(a6)
(1)  963/FFFFFFFFFFFF085C : 6100 08CE           		bsr	System_DmaExit_RAM
(1)  964/FFFFFFFFFFFF0860 : 3E3C 8100           		move.w	#$8100,d7
(1)  965/FFFFFFFFFFFF0864 : 1E38 BDF7           		move.b	(RAM_VdpRegs+1).w,d7
(1)  966/FFFFFFFFFFFF0868 : 3C87                		move.w	d7,(a6)
(1)  967/FFFFFFFFFFFF086A : 31FC 0001 BDDA      		move.w	#1,(RAM_SprLinkNum).w	; Reset SPRITE LINK number
(1)  968/FFFFFFFFFFFF0870 :                     
(1)  969/FFFFFFFFFFFF0870 :                     	; Process DMA BLAST from here
(1)  970/FFFFFFFFFFFF0870 :                     
(1)  971/FFFFFFFFFFFF0870 :                     ; --------------------------------------------------------
(1)  972/FFFFFFFFFFFF0870 :                     ; Video_DmaBlast
(1)  973/FFFFFFFFFFFF0870 :                     ;
(1)  974/FFFFFFFFFFFF0870 :                     ; Process DMA tasks from a predefined list in RAM
(1)  975/FFFFFFFFFFFF0870 :                     ;
(1)  976/FFFFFFFFFFFF0870 :                     ; Breaks:
(1)  977/FFFFFFFFFFFF0870 :                     ; d5-d7,a3-a4
(1)  978/FFFFFFFFFFFF0870 :                     ;
(1)  979/FFFFFFFFFFFF0870 :                     ; *** Call this on VBlank ONLY ***
(1)  980/FFFFFFFFFFFF0870 :                     ;
(1)  981/FFFFFFFFFFFF0870 :                     ; NOTE:
(1)  982/FFFFFFFFFFFF0870 :                     ; For 32X this code MUST be located on RAM as it
(1)  983/FFFFFFFFFFFF0870 :                     ; writes the RV from ROM access
(1)  984/FFFFFFFFFFFF0870 :                     ; --------------------------------------------------------
(1)  985/FFFFFFFFFFFF0870 :                     
(1)  986/FFFFFFFFFFFF0870 :                     ; Format:
(1)  987/FFFFFFFFFFFF0870 :                     ; dc.w $94xx,$93xx		; Size
(1)  988/FFFFFFFFFFFF0870 :                     ; dc.w $96xx,$95xx,$97xx	; Source
(1)  989/FFFFFFFFFFFF0870 :                     ; dc.l $4xxx008x 		; VDP output + DMA bit
(1)  990/FFFFFFFFFFFF0870 :                     ; dc.w $xxxx			; SegaCD/CD32X only: graphics word patch
(1)  991/FFFFFFFFFFFF0870 :                     
(1)  992/FFFFFFFFFFFF0870 :                     Video_DmaBlast:
(1)  993/FFFFFFFFFFFF0870 : 4A78 BDE0           		tst.w	(RAM_VdpDmaMod).w		; Got mid-write?
(1)  994/FFFFFFFFFFFF0874 : 664C                		bne.s	.exit				; then can't transfer.
(1)  995/FFFFFFFFFFFF0876 : 4A78 BDDE           		tst.w	(RAM_VdpDmaIndx).w		; Any requests?
(1)  996/FFFFFFFFFFFF087A : 6746                		beq.s	.exit
(1)  997/FFFFFFFFFFFF087C : 49F9 00C0 0004      		lea	(vdp_ctrl),a4			; Enter processing loop
(1)  998/FFFFFFFFFFFF0882 : 47F8 B114           		lea	(RAM_VdpDmaList).w,a3
(1)  999/FFFFFFFFFFFF0886 : 3E3C 8100           		move.w	#$8100,d7			; DMA ON
(1) 1000/FFFFFFFFFFFF088A : 1E38 BDF7           		move.b	(RAM_VdpRegs+1).w,d7
(1) 1001/FFFFFFFFFFFF088E : 08C7 0004           		bset	#bitDmaEnbl,d7
(1) 1002/FFFFFFFFFFFF0892 : 3887                		move.w	d7,(a4)
(1) 1003/FFFFFFFFFFFF0894 : 6100 089A           		bsr	System_DmaEnter_ROM		; Request Z80 stop and SH2 backup
(1) 1004/FFFFFFFFFFFF0898 : 4A78 BDDE           .next:		tst.w	(RAM_VdpDmaIndx).w
(1) 1005/FFFFFFFFFFFF089C : 6716                		beq.s	.end
(1) 1029/FFFFFFFFFFFF089E : 289B                		move.l	(a3)+,(a4)		; Size
(1) 1030/FFFFFFFFFFFF08A0 : 289B                		move.l	(a3)+,(a4)		; Source
(1) 1031/FFFFFFFFFFFF08A2 : 389B                		move.w	(a3)+,(a4)
(1) 1032/FFFFFFFFFFFF08A4 : 389B                		move.w	(a3)+,(a4)		; Destination
(1) 1033/FFFFFFFFFFFF08A6 : 389B                		move.w	(a3)+,(a4)		; *** CPU freezes ***
(1) 1034/FFFFFFFFFFFF08A8 : D6FC 0002           		adda	#2,a3
(1) 1036/FFFFFFFFFFFF08AC : 0478 0001 BDDE      		subi.w	#1,(RAM_VdpDmaIndx).w
(1) 1037/FFFFFFFFFFFF08B2 : 60E4                		bra.s	.next
(1) 1038/FFFFFFFFFFFF08B4 :                     .end:
(1) 1039/FFFFFFFFFFFF08B4 : 6100 087E           		bsr	System_DmaExit_ROM	; Resume Z80 and SH2 direct
(1) 1040/FFFFFFFFFFFF08B8 : 3E3C 8100           		move.w	#$8100,d7		; DMA OFF
(1) 1041/FFFFFFFFFFFF08BC : 1E38 BDF7           		move.b	(RAM_VdpRegs+1).w,d7
(1) 1042/FFFFFFFFFFFF08C0 : 3887                		move.w	d7,(a4)
(1) 1043/FFFFFFFFFFFF08C2 :                     .exit:
(1) 1044/FFFFFFFFFFFF08C2 : 4E75                		rts
(1) 1045/FFFFFFFFFFFF08C4 :                     
(1) 1046/FFFFFFFFFFFF08C4 :                     ; ====================================================================
(1) 1047/FFFFFFFFFFFF08C4 :                     ; ----------------------------------------------------------------
(1) 1048/FFFFFFFFFFFF08C4 :                     ; Video routines for 32X
(1) 1049/FFFFFFFFFFFF08C4 :                     ; ----------------------------------------------------------------
(1) 1050/FFFFFFFFFFFF08C4 :                     
(1) 1051/FFFFFFFFFFFF08C4 :                     ; --------------------------------------------------------
(1) 1052/FFFFFFFFFFFF08C4 :                     ; Video_MarsGfxMode
(1) 1053/FFFFFFFFFFFF08C4 :                     ; Sets graphics mode on the 32X side
(1) 1054/FFFFFFFFFFFF08C4 :                     ;
(1) 1055/FFFFFFFFFFFF08C4 :                     ; Input:
(1) 1056/FFFFFFFFFFFF08C4 :                     ; d0 - Graphics mode number
(1) 1057/FFFFFFFFFFFF08C4 :                     ;
(1) 1058/FFFFFFFFFFFF08C4 :                     ; Uses:
(1) 1059/FFFFFFFFFFFF08C4 :                     ; d7
(1) 1060/FFFFFFFFFFFF08C4 :                     ;
(1) 1061/FFFFFFFFFFFF08C4 :                     ; Notes:
(1) 1062/FFFFFFFFFFFF08C4 :                     ; Changing modes takes 3 FRAMES to process.
(1) 1063/FFFFFFFFFFFF08C4 :                     ; --------------------------------------------------------
(1) 1064/FFFFFFFFFFFF08C4 :                     
(1) 1065/FFFFFFFFFFFF08C4 :                     Video_MarsGfxMode:
(1) 1067/FFFFFFFFFFFF08C4 :                     ; 		btst	#7,(sysmars_reg+(comm12+1)).l
(1) 1068/FFFFFFFFFFFF08C4 :                     ; 		bne.s	Video_MarsGfxMode
(1) 1069/FFFFFFFFFFFF08C4 : 2F00                		move.l	d0,-(sp)
(1) 1070/FFFFFFFFFFFF08C6 : 6120                		bsr	Video_Mars_SyncFrame	; Wait frame
(1) 1071/FFFFFFFFFFFF08C8 : 6100 0D36           		bsr	System_MarsUpdate	; Send changes
(1) 1072/FFFFFFFFFFFF08CC : 611A                		bsr	Video_Mars_SyncFrame	; Wait ANOTHER frame
(1) 1073/FFFFFFFFFFFF08CE : 6100 0D30           		bsr	System_MarsUpdate
(1) 1074/FFFFFFFFFFFF08D2 : 6114                		bsr	Video_Mars_SyncFrame
(1) 1075/FFFFFFFFFFFF08D4 : 6100 0D2A           		bsr	System_MarsUpdate
(1) 1076/FFFFFFFFFFFF08D8 : 201F                		move.l	(sp)+,d0
(1) 1077/FFFFFFFFFFFF08DA : 3E00                		move.w	d0,d7
(1) 1078/FFFFFFFFFFFF08DC : 0047 0080           		ori.w	#$80,d7
(1) 1079/FFFFFFFFFFFF08E0 : 13C7 00A1 512D      		move.b	d7,(sysmars_reg+(comm12+1)).l
(1) 1081/FFFFFFFFFFFF08E6 : 4E75                		rts
(1) 1082/FFFFFFFFFFFF08E8 :                     
(1) 1083/FFFFFFFFFFFF08E8 :                     ; --------------------------------------------------------
(1) 1084/FFFFFFFFFFFF08E8 :                     ; Video_Mars_SyncFrame
(1) 1085/FFFFFFFFFFFF08E8 :                     ; --------------------------------------------------------
(1) 1086/FFFFFFFFFFFF08E8 :                     
(1) 1087/FFFFFFFFFFFF08E8 :                     Video_Mars_SyncFrame:
(1) 1089/FFFFFFFFFFFF08E8 : 08F9 0006 00A1      		bset	#6,(sysmars_reg+comm12+1).l
         FFFFFFFFFFFF08EE : 512D             
(1) 1090/FFFFFFFFFFFF08F0 : 0839 0006 00A1      .wait_mars:	btst	#6,(sysmars_reg+comm12+1).l
         FFFFFFFFFFFF08F6 : 512D             
(1) 1091/FFFFFFFFFFFF08F8 : 66F6                		bne.s	.wait_mars
(1) 1093/FFFFFFFFFFFF08FA : 4E75                		rts
(1) 1094/FFFFFFFFFFFF08FC :                     
(1) 1095/FFFFFFFFFFFF08FC :                     ; --------------------------------------------------------
(1) 1096/FFFFFFFFFFFF08FC :                     ; Video_LoadPal_Mars
(1) 1097/FFFFFFFFFFFF08FC :                     ;
(1) 1098/FFFFFFFFFFFF08FC :                     ; Load Indexed palette directly to Buffer
(1) 1099/FFFFFFFFFFFF08FC :                     ;
(1) 1100/FFFFFFFFFFFF08FC :                     ; d0 - Start at
(1) 1101/FFFFFFFFFFFF08FC :                     ; d1 - Number of colors
(1) 1102/FFFFFFFFFFFF08FC :                     ; d2 - Priority bit OFF/ON
(1) 1103/FFFFFFFFFFFF08FC :                     ; --------------------------------------------------------
(1) 1104/FFFFFFFFFFFF08FC :                     
(1) 1105/FFFFFFFFFFFF08FC :                     Video_FadePal_Mars:
(1) 1107/FFFFFFFFFFFF08FC : 4DF8 AE94           		lea	(RAM_MdMarsPalFd).w,a6
(1) 1108/FFFFFFFFFFFF0900 : 4278 BDF2           		clr.w	(RAM_FadeMarsTmr).w
(1) 1109/FFFFFFFFFFFF0904 : 6004                		bra.s	vidMars_Pal
(1) 1110/FFFFFFFFFFFF0906 :                     Video_LoadPal_Mars:
(1) 1111/FFFFFFFFFFFF0906 : 4DF8 C604           		lea	(RAM_MdDreq+Dreq_Palette).w,a6
(1) 1112/FFFFFFFFFFFF090A :                     vidMars_Pal:
(1) 1113/FFFFFFFFFFFF090A : 2A48                		move.l	a0,a5
(1) 1114/FFFFFFFFFFFF090C : 7E00                		moveq	#0,d7
(1) 1115/FFFFFFFFFFFF090E : 3E00                		move.w	d0,d7
(1) 1116/FFFFFFFFFFFF0910 : DE47                		add.w	d7,d7
(1) 1117/FFFFFFFFFFFF0912 : DCC7                		adda	d7,a6
(1) 1118/FFFFFFFFFFFF0914 : 3E01                		move.w	d1,d7
(1) 1119/FFFFFFFFFFFF0916 : 0447 0001           		subi.w	#1,d7
(1) 1120/FFFFFFFFFFFF091A : 3C02                		move.w	d2,d6
(1) 1121/FFFFFFFFFFFF091C : 0246 0001           		andi.w	#1,d6
(1) 1122/FFFFFFFFFFFF0920 : E25E                		ror.w	#1,d6
(1) 1123/FFFFFFFFFFFF0922 :                     .loop:
(1) 1124/FFFFFFFFFFFF0922 : 3A1D                		move.w	(a5)+,d5
(1) 1125/FFFFFFFFFFFF0924 : 8A46                		or.w	d6,d5
(1) 1126/FFFFFFFFFFFF0926 : 3CC5                		move.w	d5,(a6)+
(1) 1127/FFFFFFFFFFFF0928 : 51CF FFF8           		dbf	d7,.loop
(1) 1129/FFFFFFFFFFFF092C : 4E75                		rts
(1) 1130/FFFFFFFFFFFF092E :                     
(1) 1131/FFFFFFFFFFFF092E :                     ; --------------------------------------------------------
(1) 1132/FFFFFFFFFFFF092E :                     ; Video_MarsPalFade
(1) 1133/FFFFFFFFFFFF092E :                     ;
(1) 1134/FFFFFFFFFFFF092E :                     ; Input:
(1) 1135/FFFFFFFFFFFF092E :                     ; a0 - Palette data
(1) 1136/FFFFFFFFFFFF092E :                     ; d0 - Number of colors
(1) 1137/FFFFFFFFFFFF092E :                     ; d1 - Speed
(1) 1138/FFFFFFFFFFFF092E :                     ;
(1) 1139/FFFFFFFFFFFF092E :                     ; RAM_ReqFadeMars: (WORD)
(1) 1140/FFFFFFFFFFFF092E :                     ; $00 - No task (or finished)
(1) 1141/FFFFFFFFFFFF092E :                     ; $01 - Fade in
(1) 1142/FFFFFFFFFFFF092E :                     ; $02 - Fade out to black
(1) 1143/FFFFFFFFFFFF092E :                     ;
(1) 1144/FFFFFFFFFFFF092E :                     ; CALL THIS OUTSIDE OF VBLANK
(1) 1145/FFFFFFFFFFFF092E :                     ; --------------------------------------------------------
(1) 1146/FFFFFFFFFFFF092E :                     
(1) 1147/FFFFFFFFFFFF092E :                     ; TODO: luego ver que hago con el priority bit
(1) 1148/FFFFFFFFFFFF092E :                     
(1) 1149/FFFFFFFFFFFF092E :                     Video_MarsPalFade:
(1) 1151/FFFFFFFFFFFF092E : 0478 0001 BDF2      		subi.w	#1,(RAM_FadeMarsTmr).w
(1) 1152/FFFFFFFFFFFF0934 : 6A14                		bpl.s	.active
(1) 1153/FFFFFFFFFFFF0936 : 31F8 BDF0 BDF2      		move.w	(RAM_FadeMarsDelay).w,(RAM_FadeMarsTmr).w
(1) 1154/FFFFFFFFFFFF093C : 3E38 BDEC           		move.w	(RAM_FadeMarsReq).w,d7
(1) 1155/FFFFFFFFFFFF0940 : DE47                		add.w	d7,d7
(1) 1156/FFFFFFFFFFFF0942 : 3E3B 7008           		move.w	.fade_list(pc,d7.w),d7
(1) 1157/FFFFFFFFFFFF0946 : 4EFB 7004           		jmp	.fade_list(pc,d7.w)
(1) 1158/FFFFFFFFFFFF094A :                     .active:
(1) 1159/FFFFFFFFFFFF094A : 4E75                		rts
(1) 1160/FFFFFFFFFFFF094C :                     
(1) 1161/FFFFFFFFFFFF094C :                     ; --------------------------------------------
(1) 1162/FFFFFFFFFFFF094C :                     
(1) 1163/FFFFFFFFFFFF094C :                     .fade_list:
(1) 1164/FFFFFFFFFFFF094C : 0006                		dc.w .fade_done-.fade_list
(1) 1165/FFFFFFFFFFFF094E : 0008                		dc.w .fade_in-.fade_list
(1) 1166/FFFFFFFFFFFF0950 : 00B2                		dc.w .fade_out-.fade_list
(1) 1167/FFFFFFFFFFFF0952 :                     
(1) 1168/FFFFFFFFFFFF0952 :                     ; --------------------------------------------
(1) 1169/FFFFFFFFFFFF0952 :                     ; No fade or finished.
(1) 1170/FFFFFFFFFFFF0952 :                     ; --------------------------------------------
(1) 1171/FFFFFFFFFFFF0952 :                     
(1) 1172/FFFFFFFFFFFF0952 :                     .fade_done:
(1) 1173/FFFFFFFFFFFF0952 : 4E75                		rts
(1) 1174/FFFFFFFFFFFF0954 :                     
(1) 1175/FFFFFFFFFFFF0954 :                     ; --------------------------------------------
(1) 1176/FFFFFFFFFFFF0954 :                     ; Fade in
(1) 1177/FFFFFFFFFFFF0954 :                     ; --------------------------------------------
(1) 1178/FFFFFFFFFFFF0954 :                     
(1) 1179/FFFFFFFFFFFF0954 :                     .fade_in:
(1) 1180/FFFFFFFFFFFF0954 : 4DF8 AE94           		lea	(RAM_MdMarsPalFd).w,a6
(1) 1181/FFFFFFFFFFFF0958 : 4BF8 C604           		lea	(RAM_MdDreq+Dreq_Palette).w,a5
(1) 1182/FFFFFFFFFFFF095C : 303C 0100           		move.w	#256,d0				; Num of colors
(1) 1183/FFFFFFFFFFFF0960 : 3238 BDEE           		move.w	(RAM_FadeMarsIncr).w,d1		; Speed
(1) 1184/FFFFFFFFFFFF0964 : 3C00                		move.w	d0,d6
(1) 1185/FFFFFFFFFFFF0966 : 4846                		swap	d6
(1) 1186/FFFFFFFFFFFF0968 : 0440 0001           		subi.w	#1,d0
(1) 1187/FFFFFFFFFFFF096C :                     .nxt_pal:
(1) 1188/FFFFFFFFFFFF096C : 4242                		clr.w	d2		; Reset finished colorbits
(1) 1189/FFFFFFFFFFFF096E : 3E16                		move.w	(a6),d7		; d7 - Input
(1) 1190/FFFFFFFFFFFF0970 : 3C15                		move.w	(a5),d6		; d6 - Output
(1) 1191/FFFFFFFFFFFF0972 : 3607                		move.w	d7,d3		; RED
(1) 1192/FFFFFFFFFFFF0974 : 3806                		move.w	d6,d4
(1) 1193/FFFFFFFFFFFF0976 : 0246 FFE0           		andi.w	#%1111111111100000,d6
(1) 1194/FFFFFFFFFFFF097A : 0244 001F           		andi.w	#%0000000000011111,d4
(1) 1195/FFFFFFFFFFFF097E : 0243 001F           		andi.w	#%0000000000011111,d3
(1) 1196/FFFFFFFFFFFF0982 : D841                		add.w	d1,d4
(1) 1197/FFFFFFFFFFFF0984 : B843                		cmp.w	d3,d4
(1) 1198/FFFFFFFFFFFF0986 : 6506                		bcs.s	.no_red
(1) 1199/FFFFFFFFFFFF0988 : 3803                		move.w	d3,d4
(1) 1200/FFFFFFFFFFFF098A : 0042 0001           		ori.w	#%001,d2	; RED is ready
(1) 1201/FFFFFFFFFFFF098E :                     .no_red:
(1) 1202/FFFFFFFFFFFF098E : 8C44                		or.w	d4,d6
(1) 1203/FFFFFFFFFFFF0990 : EB49                		lsl.w	#5,d1
(1) 1204/FFFFFFFFFFFF0992 : 3607                		move.w	d7,d3		; GREEN
(1) 1205/FFFFFFFFFFFF0994 : 3806                		move.w	d6,d4
(1) 1206/FFFFFFFFFFFF0996 : 0246 FC1F           		andi.w	#%1111110000011111,d6
(1) 1207/FFFFFFFFFFFF099A : 0244 03E0           		andi.w	#%0000001111100000,d4
(1) 1208/FFFFFFFFFFFF099E : 0243 03E0           		andi.w	#%0000001111100000,d3
(1) 1209/FFFFFFFFFFFF09A2 : D841                		add.w	d1,d4
(1) 1210/FFFFFFFFFFFF09A4 : B843                		cmp.w	d3,d4
(1) 1211/FFFFFFFFFFFF09A6 : 6506                		bcs.s	.no_grn
(1) 1212/FFFFFFFFFFFF09A8 : 3803                		move.w	d3,d4
(1) 1213/FFFFFFFFFFFF09AA : 0042 0002           		ori.w	#%010,d2	; GREEN is ready
(1) 1214/FFFFFFFFFFFF09AE :                     .no_grn:
(1) 1215/FFFFFFFFFFFF09AE : 8C44                		or.w	d4,d6
(1) 1216/FFFFFFFFFFFF09B0 : EB49                		lsl.w	#5,d1
(1) 1217/FFFFFFFFFFFF09B2 : 3607                		move.w	d7,d3		; BLUE
(1) 1218/FFFFFFFFFFFF09B4 : 3806                		move.w	d6,d4
(1) 1219/FFFFFFFFFFFF09B6 : 0246 83FF           		andi.w	#%1000001111111111,d6
(1) 1220/FFFFFFFFFFFF09BA : 0244 7C00           		andi.w	#%0111110000000000,d4
(1) 1221/FFFFFFFFFFFF09BE : 0243 7C00           		andi.w	#%0111110000000000,d3
(1) 1222/FFFFFFFFFFFF09C2 : D841                		add.w	d1,d4
(1) 1223/FFFFFFFFFFFF09C4 : B843                		cmp.w	d3,d4
(1) 1224/FFFFFFFFFFFF09C6 : 6506                		bcs.s	.no_blu
(1) 1225/FFFFFFFFFFFF09C8 : 3803                		move.w	d3,d4
(1) 1226/FFFFFFFFFFFF09CA : 0042 0004           		ori.w	#%100,d2	; BLUE is ready
(1) 1227/FFFFFFFFFFFF09CE :                     .no_blu:
(1) 1228/FFFFFFFFFFFF09CE : 8C44                		or.w	d4,d6
(1) 1229/FFFFFFFFFFFF09D0 : E049                		lsr.w	#8,d1
(1) 1230/FFFFFFFFFFFF09D2 : E449                		lsr.w	#2,d1
(1) 1231/FFFFFFFFFFFF09D4 : 0247 8000           		andi.w	#$8000,d7	; Keep priority bit
(1) 1232/FFFFFFFFFFFF09D8 : 8C47                		or.w	d7,d6
(1) 1233/FFFFFFFFFFFF09DA : 3AC6                		move.w	d6,(a5)+
(1) 1234/FFFFFFFFFFFF09DC : DCFC 0002           		adda	#2,a6
(1) 1235/FFFFFFFFFFFF09E0 : 0C42 0007           		cmpi.w	#%111,d2
(1) 1236/FFFFFFFFFFFF09E4 : 6608                		bne.s	.no_fnsh
(1) 1237/FFFFFFFFFFFF09E6 : 4846                		swap	d6
(1) 1238/FFFFFFFFFFFF09E8 : 0446 0001           		subi.w	#1,d6
(1) 1239/FFFFFFFFFFFF09EC : 4846                		swap	d6
(1) 1240/FFFFFFFFFFFF09EE :                     .no_fnsh:
(1) 1241/FFFFFFFFFFFF09EE : 51C8 FF7C           		dbf	d0,.nxt_pal
(1) 1242/FFFFFFFFFFFF09F2 : 4846                		swap	d6
(1) 1243/FFFFFFFFFFFF09F4 : 4A46                		tst.w	d6
(1) 1244/FFFFFFFFFFFF09F6 : 6604                		bne.s	.no_move
(1) 1245/FFFFFFFFFFFF09F8 : 4278 BDEC           		clr.w	(RAM_FadeMarsReq).w
(1) 1246/FFFFFFFFFFFF09FC :                     .no_move:
(1) 1247/FFFFFFFFFFFF09FC : 4E75                		rts
(1) 1248/FFFFFFFFFFFF09FE :                     
(1) 1249/FFFFFFFFFFFF09FE :                     ; --------------------------------------------
(1) 1250/FFFFFFFFFFFF09FE :                     ; Fade out
(1) 1251/FFFFFFFFFFFF09FE :                     ; --------------------------------------------
(1) 1252/FFFFFFFFFFFF09FE :                     
(1) 1253/FFFFFFFFFFFF09FE :                     .fade_out:
(1) 1254/FFFFFFFFFFFF09FE : 4DF8 C604           		lea	(RAM_MdDreq+Dreq_Palette).w,a6
(1) 1255/FFFFFFFFFFFF0A02 : 303C 0100           		move.w	#256,d0				; Num of colors
(1) 1256/FFFFFFFFFFFF0A06 : 3238 BDEE           		move.w	(RAM_FadeMarsIncr).w,d1		; Speed
(1) 1257/FFFFFFFFFFFF0A0A : 3C00                		move.w	d0,d6
(1) 1258/FFFFFFFFFFFF0A0C : 4846                		swap	d6
(1) 1259/FFFFFFFFFFFF0A0E : 0440 0001           		subi.w	#1,d0
(1) 1260/FFFFFFFFFFFF0A12 :                     .nxt_pal_o:
(1) 1261/FFFFFFFFFFFF0A12 : 4242                		clr.w	d2		; Reset finished colorbits
(1) 1262/FFFFFFFFFFFF0A14 : 3E16                		move.w	(a6),d7		; d7 - Input
(1) 1263/FFFFFFFFFFFF0A16 : 3C07                		move.w	d7,d6
(1) 1264/FFFFFFFFFFFF0A18 : 0247 FFE0           		andi.w	#%1111111111100000,d7
(1) 1265/FFFFFFFFFFFF0A1C : 0246 001F           		andi.w	#%0000000000011111,d6
(1) 1266/FFFFFFFFFFFF0A20 : 9C41                		sub.w	d1,d6
(1) 1267/FFFFFFFFFFFF0A22 : 6A06                		bpl.s	.no_red_o
(1) 1268/FFFFFFFFFFFF0A24 : 4246                		clr.w	d6
(1) 1269/FFFFFFFFFFFF0A26 : 0042 0001           		ori.w	#%001,d2	; RED is ready
(1) 1270/FFFFFFFFFFFF0A2A :                     .no_red_o:
(1) 1271/FFFFFFFFFFFF0A2A : 8E46                		or.w	d6,d7
(1) 1272/FFFFFFFFFFFF0A2C : EB49                		lsl.w	#5,d1
(1) 1273/FFFFFFFFFFFF0A2E : 3C07                		move.w	d7,d6
(1) 1274/FFFFFFFFFFFF0A30 : 0247 FC1F           		andi.w	#%1111110000011111,d7
(1) 1275/FFFFFFFFFFFF0A34 : 0246 03E0           		andi.w	#%0000001111100000,d6
(1) 1276/FFFFFFFFFFFF0A38 : 9C41                		sub.w	d1,d6
(1) 1277/FFFFFFFFFFFF0A3A : 6A06                		bpl.s	.no_grn_o
(1) 1278/FFFFFFFFFFFF0A3C : 4246                		clr.w	d6
(1) 1279/FFFFFFFFFFFF0A3E : 0042 0002           		ori.w	#%010,d2	; GREEN is ready
(1) 1280/FFFFFFFFFFFF0A42 :                     .no_grn_o:
(1) 1281/FFFFFFFFFFFF0A42 : 8E46                		or.w	d6,d7
(1) 1282/FFFFFFFFFFFF0A44 : EB49                		lsl.w	#5,d1
(1) 1283/FFFFFFFFFFFF0A46 : 3C07                		move.w	d7,d6
(1) 1284/FFFFFFFFFFFF0A48 : 0247 83FF           		andi.w	#%1000001111111111,d7
(1) 1285/FFFFFFFFFFFF0A4C : 0246 7C00           		andi.w	#%0111110000000000,d6
(1) 1286/FFFFFFFFFFFF0A50 : 9C41                		sub.w	d1,d6
(1) 1287/FFFFFFFFFFFF0A52 : 6A06                		bpl.s	.no_blu_o
(1) 1288/FFFFFFFFFFFF0A54 : 4246                		clr.w	d6
(1) 1289/FFFFFFFFFFFF0A56 : 0042 0004           		ori.w	#%100,d2	; BLUE is ready
(1) 1290/FFFFFFFFFFFF0A5A :                     .no_blu_o:
(1) 1291/FFFFFFFFFFFF0A5A : 8E46                		or.w	d6,d7
(1) 1292/FFFFFFFFFFFF0A5C : E049                		lsr.w	#8,d1
(1) 1293/FFFFFFFFFFFF0A5E : E449                		lsr.w	#2,d1
(1) 1294/FFFFFFFFFFFF0A60 : 3CC7                		move.w	d7,(a6)+
(1) 1295/FFFFFFFFFFFF0A62 : 0C42 0007           		cmpi.w	#%111,d2
(1) 1296/FFFFFFFFFFFF0A66 : 6608                		bne.s	.no_fnsh_o
(1) 1297/FFFFFFFFFFFF0A68 : 4846                		swap	d6
(1) 1298/FFFFFFFFFFFF0A6A : 0446 0001           		subi.w	#1,d6
(1) 1299/FFFFFFFFFFFF0A6E : 4846                		swap	d6
(1) 1300/FFFFFFFFFFFF0A70 :                     .no_fnsh_o:
(1) 1301/FFFFFFFFFFFF0A70 : 51C8 FFA0           		dbf	d0,.nxt_pal_o
(1) 1302/FFFFFFFFFFFF0A74 : 4846                		swap	d6
(1) 1303/FFFFFFFFFFFF0A76 : 4A46                		tst.w	d6
(1) 1304/FFFFFFFFFFFF0A78 : 6604                		bne.s	.no_move_o
(1) 1305/FFFFFFFFFFFF0A7A : 4278 BDEC           		clr.w	(RAM_FadeMarsReq).w
(1) 1306/FFFFFFFFFFFF0A7E :                     .no_move_o:
(1) 1308/FFFFFFFFFFFF0A7E : 4E75                		rts
(1) 1309/FFFFFFFFFFFF0A80 :                     
(1) 1310/FFFFFFFFFFFF0A80 :                     
(1) 1311/FFFFFFFFFFFF0A80 :                     ; ====================================================================
(1) 1312/FFFFFFFFFFFF0A80 :                     ; ----------------------------------------------------------------
(1) 1313/FFFFFFFFFFFF0A80 :                     ; Common screen routines
(1) 1314/FFFFFFFFFFFF0A80 :                     ; ----------------------------------------------------------------
(1) 1315/FFFFFFFFFFFF0A80 :                     
(1) 1316/FFFFFFFFFFFF0A80 :                     ; --------------------------------------------------------
(1) 1317/FFFFFFFFFFFF0A80 :                     ; Video_LoadMap
(1) 1318/FFFFFFFFFFFF0A80 :                     ;
(1) 1319/FFFFFFFFFFFF0A80 :                     ; Loads map data, in Horizontal order
(1) 1320/FFFFFFFFFFFF0A80 :                     ; Can autodetect layer width, height and
(1) 1321/FFFFFFFFFFFF0A80 :                     ; double interlace mode
(1) 1322/FFFFFFFFFFFF0A80 :                     ;
(1) 1323/FFFFFFFFFFFF0A80 :                     ; Input:
(1) 1324/FFFFFFFFFFFF0A80 :                     ; a0   - Map data
(1) 1325/FFFFFFFFFFFF0A80 :                     ; d0.l - locate(lyr,x,y) / 00|Layer|X|Y
(1) 1326/FFFFFFFFFFFF0A80 :                     ; d1.l - mapsize(x,y) / Width|Height (in cells)
(1) 1327/FFFFFFFFFFFF0A80 :                     ; d2.l - VRAM cell increment
(1) 1328/FFFFFFFFFFFF0A80 :                     ;
(1) 1329/FFFFFFFFFFFF0A80 :                     ; Breaks:
(1) 1330/FFFFFFFFFFFF0A80 :                     ; d4-d7/a6
(1) 1331/FFFFFFFFFFFF0A80 :                     ; --------------------------------------------------------
(1) 1332/FFFFFFFFFFFF0A80 :                     
(1) 1333/FFFFFFFFFFFF0A80 :                     Video_LoadMap:
(1) 1334/FFFFFFFFFFFF0A80 : 4DF9 00C0 0000      		lea	(vdp_data),a6
(1) 1335/FFFFFFFFFFFF0A86 : 6100 01B6           		bsr	vid_PickLayer
(1) 1336/FFFFFFFFFFFF0A8A : 3801                		move.w	d1,d4			; Start here
(1) 1337/FFFFFFFFFFFF0A8C :                     .yloop:
(1) 1338/FFFFFFFFFFFF0A8C : 4844                		swap	d4
(1) 1339/FFFFFFFFFFFF0A8E : 2D45 0004           		move.l	d5,4(a6)
(1) 1340/FFFFFFFFFFFF0A92 : 2E01                		move.l	d1,d7
(1) 1341/FFFFFFFFFFFF0A94 : 4847                		swap	d7
(1) 1342/FFFFFFFFFFFF0A96 :                     .xloop:
(1) 1343/FFFFFFFFFFFF0A96 : 3818                		move.w	(a0)+,d4
(1) 1344/FFFFFFFFFFFF0A98 : 0C44 FFFF           		cmpi.w	#-1,d4			; -1 ? TODO
(1) 1345/FFFFFFFFFFFF0A9C : 6606                		bne.s	.nonull
(1) 1346/FFFFFFFFFFFF0A9E : 383C 07FF           		move.w	#varNullVram,d4		; Replace with custom blank tile
(1) 1347/FFFFFFFFFFFF0AA2 : 6002                		bra.s	.cont
(1) 1348/FFFFFFFFFFFF0AA4 :                     .nonull:
(1) 1349/FFFFFFFFFFFF0AA4 : D842                		add.w	d2,d4
(1) 1350/FFFFFFFFFFFF0AA6 :                     .cont:
(1) 1351/FFFFFFFFFFFF0AA6 :                     	; Check for double interlace
(1) 1352/FFFFFFFFFFFF0AA6 : 4847                		swap	d7
(1) 1353/FFFFFFFFFFFF0AA8 : 1E38 BE02           		move.b	(RAM_VdpRegs+$C).w,d7
(1) 1354/FFFFFFFFFFFF0AAC : 0247 0006           		andi.w	#%110,d7
(1) 1355/FFFFFFFFFFFF0AB0 : 0C47 0006           		cmpi.w	#%110,d7
(1) 1356/FFFFFFFFFFFF0AB4 : 660E                		bne.s	.nodble
(1) 1357/FFFFFFFFFFFF0AB6 : 3E04                		move.w	d4,d7
(1) 1358/FFFFFFFFFFFF0AB8 : E24F                		lsr.w	#1,d7
(1) 1359/FFFFFFFFFFFF0ABA : 0247 07FF           		andi.w	#$7FF,d7
(1) 1360/FFFFFFFFFFFF0ABE : 0244 F800           		andi.w	#$F800,d4
(1) 1361/FFFFFFFFFFFF0AC2 : 8847                		or.w	d7,d4
(1) 1362/FFFFFFFFFFFF0AC4 :                     .nodble:
(1) 1363/FFFFFFFFFFFF0AC4 : 4847                		swap	d7
(1) 1364/FFFFFFFFFFFF0AC6 : 3C84                		move.w	d4,(a6)
(1) 1365/FFFFFFFFFFFF0AC8 : 51CF FFCC           		dbf	d7,.xloop
(1) 1366/FFFFFFFFFFFF0ACC : DA86                		add.l	d6,d5
(1) 1367/FFFFFFFFFFFF0ACE : 4844                		swap	d4
(1) 1368/FFFFFFFFFFFF0AD0 : 51CC FFBA           		dbf	d4,.yloop
(1) 1369/FFFFFFFFFFFF0AD4 : 4E75                		rts
(1) 1370/FFFFFFFFFFFF0AD6 :                     
(1) 1371/FFFFFFFFFFFF0AD6 :                     ; ; --------------------------------------------------------
(1) 1372/FFFFFFFFFFFF0AD6 :                     ; ; Video_LoadMap_Vert
(1) 1373/FFFFFFFFFFFF0AD6 :                     ; ;
(1) 1374/FFFFFFFFFFFF0AD6 :                     ; ; Load map data, Vertical order
(1) 1375/FFFFFFFFFFFF0AD6 :                     ; ;
(1) 1376/FFFFFFFFFFFF0AD6 :                     ; ; a0 - Map data
(1) 1377/FFFFFFFFFFFF0AD6 :                     ; ; d0 | LONG - 00|Lyr|X|Y,  locate(lyr,x,y)
(1) 1378/FFFFFFFFFFFF0AD6 :                     ; ; d1 | LONG - Width|Height (cells),  mapsize(x,y)
(1) 1379/FFFFFFFFFFFF0AD6 :                     ; ; d2 | WORD - VRAM
(1) 1380/FFFFFFFFFFFF0AD6 :                     ;
(1) 1381/FFFFFFFFFFFF0AD6 :                     ; ; Breaks:
(1) 1382/FFFFFFFFFFFF0AD6 :                     ; ; a4-a5,d4-d7
(1) 1383/FFFFFFFFFFFF0AD6 :                     ; ; --------------------------------------------------------
(1) 1384/FFFFFFFFFFFF0AD6 :                     ;
(1) 1385/FFFFFFFFFFFF0AD6 :                     ; Video_LoadMap_Vert:
(1) 1386/FFFFFFFFFFFF0AD6 :                     ; 		lea	(vdp_data),a4
(1) 1387/FFFFFFFFFFFF0AD6 :                     ; 		bsr	vid_PickLayer
(1) 1388/FFFFFFFFFFFF0AD6 :                     ; 		move.l	d1,d5		; Start here
(1) 1389/FFFFFFFFFFFF0AD6 :                     ; 		swap	d5
(1) 1390/FFFFFFFFFFFF0AD6 :                     ; .xloop:
(1) 1391/FFFFFFFFFFFF0AD6 :                     ; 		swap	d5
(1) 1392/FFFFFFFFFFFF0AD6 :                     ; 		move.l	d4,-(sp)
(1) 1393/FFFFFFFFFFFF0AD6 :                     ; 		move.w	d1,d7
(1) 1394/FFFFFFFFFFFF0AD6 :                     ; 		btst	#2,(RAM_VdpRegs+$C).w
(1) 1395/FFFFFFFFFFFF0AD6 :                     ; 		beq.s	.yloop
(1) 1396/FFFFFFFFFFFF0AD6 :                     ; 		lsr.w	#1,d7
(1) 1397/FFFFFFFFFFFF0AD6 :                     ; .yloop:
(1) 1398/FFFFFFFFFFFF0AD6 :                     ; 		move.l	d4,4(a4)
(1) 1399/FFFFFFFFFFFF0AD6 :                     ; 		move.w	(a0),d5
(1) 1400/FFFFFFFFFFFF0AD6 :                     ; 		cmpi.w	#-1,d5
(1) 1401/FFFFFFFFFFFF0AD6 :                     ; 		bne.s	.nonull
(1) 1402/FFFFFFFFFFFF0AD6 :                     ; 		move.w	#varNullVram,d5
(1) 1403/FFFFFFFFFFFF0AD6 :                     ; 		bra.s	.cont
(1) 1404/FFFFFFFFFFFF0AD6 :                     ; .nonull:
(1) 1405/FFFFFFFFFFFF0AD6 :                     ; 		add.w	d2,d5
(1) 1406/FFFFFFFFFFFF0AD6 :                     ; .cont:
(1) 1407/FFFFFFFFFFFF0AD6 :                     ; 		swap	d7
(1) 1408/FFFFFFFFFFFF0AD6 :                     ; 		adda	#2,a0
(1) 1409/FFFFFFFFFFFF0AD6 :                     ; 		btst	#2,(RAM_VdpRegs+$C).w
(1) 1410/FFFFFFFFFFFF0AD6 :                     ; 		beq.s	.nodble
(1) 1411/FFFFFFFFFFFF0AD6 :                     ; 		adda	#2,a0
(1) 1412/FFFFFFFFFFFF0AD6 :                     ; 		move.w	d5,d7
(1) 1413/FFFFFFFFFFFF0AD6 :                     ; 		lsr.w	#1,d7
(1) 1414/FFFFFFFFFFFF0AD6 :                     ; 		andi.w	#$7FF,d7
(1) 1415/FFFFFFFFFFFF0AD6 :                     ; 		andi.w	#$F800,d5
(1) 1416/FFFFFFFFFFFF0AD6 :                     ; 		or.w	d7,d5
(1) 1417/FFFFFFFFFFFF0AD6 :                     ; .nodble:
(1) 1418/FFFFFFFFFFFF0AD6 :                     ; 		swap	d7
(1) 1419/FFFFFFFFFFFF0AD6 :                     ; 		move.w	d5,(a4)
(1) 1420/FFFFFFFFFFFF0AD6 :                     ; 		add.l	d6,d4
(1) 1421/FFFFFFFFFFFF0AD6 :                     ; 		dbf	d7,.yloop
(1) 1422/FFFFFFFFFFFF0AD6 :                     ; .outdbl:
(1) 1423/FFFFFFFFFFFF0AD6 :                     ; 		move.l	(sp)+,d4
(1) 1424/FFFFFFFFFFFF0AD6 :                     ; 		add.l	#$20000,d4
(1) 1425/FFFFFFFFFFFF0AD6 :                     ; 		swap	d5
(1) 1426/FFFFFFFFFFFF0AD6 :                     ; 		dbf	d5,.xloop
(1) 1427/FFFFFFFFFFFF0AD6 :                     ; 		rts
(1) 1428/FFFFFFFFFFFF0AD6 :                     
(1) 1429/FFFFFFFFFFFF0AD6 :                     ; ====================================================================
(1) 1430/FFFFFFFFFFFF0AD6 :                     ; ----------------------------------------------------------------
(1) 1431/FFFFFFFFFFFF0AD6 :                     ; Text PRINT system, for debugging or quick texts.
(1) 1432/FFFFFFFFFFFF0AD6 :                     ; ----------------------------------------------------------------
(1) 1433/FFFFFFFFFFFF0AD6 :                     
(1) 1434/FFFFFFFFFFFF0AD6 :                     ; --------------------------------------------------------
(1) 1435/FFFFFFFFFFFF0AD6 :                     ; Video_PrintInit
(1) 1436/FFFFFFFFFFFF0AD6 :                     ;
(1) 1437/FFFFFFFFFFFF0AD6 :                     ; Initializes the default Graphics and Palette
(1) 1438/FFFFFFFFFFFF0AD6 :                     ; for the font.
(1) 1439/FFFFFFFFFFFF0AD6 :                     ;
(1) 1440/FFFFFFFFFFFF0AD6 :                     ; Input:
(1) 1441/FFFFFFFFFFFF0AD6 :                     ; a0 | ASCII Graphics location
(1) 1442/FFFFFFFFFFFF0AD6 :                     ; a1 | ASCII Palette
(1) 1443/FFFFFFFFFFFF0AD6 :                     ;
(1) 1444/FFFFFFFFFFFF0AD6 :                     ; Breaks:
(1) 1445/FFFFFFFFFFFF0AD6 :                     ; ALL
(1) 1446/FFFFFFFFFFFF0AD6 :                     ;
(1) 1447/FFFFFFFFFFFF0AD6 :                     ; Notes:
(1) 1448/FFFFFFFFFFFF0AD6 :                     ; * Requires ASCII font graphics starting from $20
(1) 1449/FFFFFFFFFFFF0AD6 :                     ; (" ") to $7F ("[DEL]")
(1) 1450/FFFFFFFFFFFF0AD6 :                     ; * CALL THIS ONLY IF DISPLAY IS OFF OR DURING VBLANK
(1) 1451/FFFFFFFFFFFF0AD6 :                     ; * 32X: MAKE SURE SH2 IS NOT READING ROM DATA
(1) 1452/FFFFFFFFFFFF0AD6 :                     ; --------------------------------------------------------
(1) 1453/FFFFFFFFFFFF0AD6 :                     
(1) 1454/FFFFFFFFFFFF0AD6 :                     Video_PrintInit:
(1) 1455/FFFFFFFFFFFF0AD6 :                     ; 		lea	(ASCII_FONT).l,a0
(1) 1456/FFFFFFFFFFFF0AD6 :                     ; 		lea	(ASCII_PAL).l,a1
(1) 1457/FFFFFFFFFFFF0AD6 : 2008                		move.l	a0,d0
(1) 1458/FFFFFFFFFFFF0AD8 : 323C B000           		move.w	#cell_vram(varPrintVram),d1
(1) 1459/FFFFFFFFFFFF0ADC : 343C 0C00           		move.w	#($60*$20),d2			; From " " to "[DEL]"
(1) 1460/FFFFFFFFFFFF0AE0 : 363C 6580           		move.w	#(varPrintPal<<13)|varPrintVram,d3
(1) 1461/FFFFFFFFFFFF0AE4 : 0443 0020           		subi.w	#$20,d3
(1) 1462/FFFFFFFFFFFF0AE8 : 31C3 BDE2           		move.w	d3,(RAM_VidPrntVram).w
(1) 1463/FFFFFFFFFFFF0AEC : 6100 FC3A           		bsr	Video_LoadArt
(1) 1464/FFFFFFFFFFFF0AF0 :                     Video_PrintPal:
(1) 1465/FFFFFFFFFFFF0AF0 : 2049                		movea.l	a1,a0
(1) 1466/FFFFFFFFFFFF0AF2 : 7030                		moveq	#(varPrintPal<<4),d0
(1) 1467/FFFFFFFFFFFF0AF4 : 323C 000F           		move.w	#$0F,d1
(1) 1468/FFFFFFFFFFFF0AF8 : 6100 F91C           		bsr	Video_LoadPal	; Write to both palette buffers
(1) 1469/FFFFFFFFFFFF0AFC : 6000 F90E           		bra	Video_FadePal
(1) 1470/FFFFFFFFFFFF0B00 :                     
(1) 1471/FFFFFFFFFFFF0B00 :                     ; --------------------------------------------------------
(1) 1472/FFFFFFFFFFFF0B00 :                     ; Video_Print
(1) 1473/FFFFFFFFFFFF0B00 :                     ;
(1) 1474/FFFFFFFFFFFF0B00 :                     ; Prints string to layer
(1) 1475/FFFFFFFFFFFF0B00 :                     ;
(1) 1476/FFFFFFFFFFFF0B00 :                     ; Input:
(1) 1477/FFFFFFFFFFFF0B00 :                     ; a0   - String data w/special characters +
(1) 1478/FFFFFFFFFFFF0B00 :                     ;        list of RAM locations to read
(1) 1479/FFFFFFFFFFFF0B00 :                     ; d0.l - Print location on-screen: locate(layer,x,y)
(1) 1480/FFFFFFFFFFFF0B00 :                     ;        ( 00|Lyr|X|Y )
(1) 1481/FFFFFFFFFFFF0B00 :                     ;
(1) 1482/FFFFFFFFFFFF0B00 :                     ; Breaks:
(1) 1483/FFFFFFFFFFFF0B00 :                     ; d4-d7,a4-a6
(1) 1484/FFFFFFFFFFFF0B00 :                     ;
(1) 1485/FFFFFFFFFFFF0B00 :                     ; Notes:
(1) 1486/FFFFFFFFFFFF0B00 :                     ; CALL Video_PrintInit FIRST
(1) 1487/FFFFFFFFFFFF0B00 :                     ;
(1) 1488/FFFFFFFFFFFF0B00 :                     ; Text string special codes:
(1) 1489/FFFFFFFFFFFF0B00 :                     ; $00 - End of line
(1) 1490/FFFFFFFFFFFF0B00 :                     ; $0A - Next line
(1) 1491/FFFFFFFFFFFF0B00 :                     ; "//b" - Show BYTE value
(1) 1492/FFFFFFFFFFFF0B00 :                     ; "//w" - Show WORD value
(1) 1493/FFFFFFFFFFFF0B00 :                     ; "//l" - Show LONG value
(1) 1494/FFFFFFFFFFFF0B00 :                     ;
(1) 1495/FFFFFFFFFFFF0B00 :                     ; If using //b //w //l:
(1) 1496/FFFFFFFFFFFF0B00 :                     ; After $00, put your RAM addresses in LONGS in the
(1) 1497/FFFFFFFFFFFF0B00 :                     ; same order you placed your value tags, don't forget to
(1) 1498/FFFFFFFFFFFF0B00 :                     ; put "align 2" at the end of the string or it will
(1) 1499/FFFFFFFFFFFF0B00 :                     ; trigger and ADDRESS ERROR
(1) 1500/FFFFFFFFFFFF0B00 :                     ; --------------------------------------------------------
(1) 1501/FFFFFFFFFFFF0B00 :                     
(1) 1502/FFFFFFFFFFFF0B00 :                     ; TODO: negative values might break
(1) 1503/FFFFFFFFFFFF0B00 :                     
(1) 1504/FFFFFFFFFFFF0B00 :                     Video_Print:
(1) 1505/FFFFFFFFFFFF0B00 : 48E7 0F0E           		movem.l	d4-d7/a4-a6,-(sp)
(1) 1506/FFFFFFFFFFFF0B04 : 4DF9 00C0 0000      		lea	(vdp_data).l,a6
(1) 1507/FFFFFFFFFFFF0B0A : 6100 0132           		bsr	vid_PickLayer
(1) 1508/FFFFFFFFFFFF0B0E : 4BF8 BC54           		lea	(RAM_VidPrntList).w,a5
(1) 1509/FFFFFFFFFFFF0B12 :                     .newjump:
(1) 1510/FFFFFFFFFFFF0B12 : 2D45 0004           		move.l	d5,4(a6)
(1) 1511/FFFFFFFFFFFF0B16 : 2805                		move.l	d5,d4
(1) 1512/FFFFFFFFFFFF0B18 :                     .loop:
(1) 1513/FFFFFFFFFFFF0B18 : 1E18                		move.b	(a0)+,d7
(1) 1514/FFFFFFFFFFFF0B1A : 0247 00FF           		andi.w	#$FF,d7
(1) 1515/FFFFFFFFFFFF0B1E : 676C                		beq	.exit
(1) 1516/FFFFFFFFFFFF0B20 : 0C07 000A           		cmpi.b	#$0A,d7			; $0A - next line?
(1) 1517/FFFFFFFFFFFF0B24 : 672C                		beq.s	.next
(1) 1518/FFFFFFFFFFFF0B26 : 0C07 005C           		cmpi.b	#$5C,d7			; $5C ("\") special?
(1) 1519/FFFFFFFFFFFF0B2A : 6618                		bne.s	.puttext
(1) 1520/FFFFFFFFFFFF0B2C : 1E18                		move.b	(a0)+,d7		; Read next chr
(1) 1521/FFFFFFFFFFFF0B2E : 0C07 0062           		cmpi.b	#"b",d7
(1) 1522/FFFFFFFFFFFF0B32 : 6722                		beq.s	.isbyte
(1) 1523/FFFFFFFFFFFF0B34 : 0C07 0077           		cmpi.b	#"w",d7
(1) 1524/FFFFFFFFFFFF0B38 : 672E                		beq.s	.isword
(1) 1525/FFFFFFFFFFFF0B3A : 0C07 006C           		cmpi.b	#"l",d7
(1) 1526/FFFFFFFFFFFF0B3E : 673A                		beq.s	.islong
(1) 1527/FFFFFFFFFFFF0B40 : 3E3C 005C           		move.w	#"\\",d7		; normal "\"
(1) 1528/FFFFFFFFFFFF0B44 :                     .puttext:
(1) 1529/FFFFFFFFFFFF0B44 : DE78 BDE2           		add.w	(RAM_VidPrntVram).w,d7	; VRAM pos increment
(1) 1530/FFFFFFFFFFFF0B48 : 3C87                		move.w	d7,(a6)
(1) 1531/FFFFFFFFFFFF0B4A : 0684 0002 0000      		addi.l	#$20000,d4
(1) 1532/FFFFFFFFFFFF0B50 : 60C6                		bra.s	.loop
(1) 1533/FFFFFFFFFFFF0B52 :                     .next:
(1) 1534/FFFFFFFFFFFF0B52 : DA86                		add.l	d6,d5			; Next line
(1) 1535/FFFFFFFFFFFF0B54 : 60BC                		bra.s	.newjump
(1) 1536/FFFFFFFFFFFF0B56 :                     
(1) 1537/FFFFFFFFFFFF0B56 :                     	; Set print values
(1) 1538/FFFFFFFFFFFF0B56 :                     .isbyte:
(1) 1539/FFFFFFFFFFFF0B56 : 2AC4                		move.l	d4,(a5)+
(1) 1540/FFFFFFFFFFFF0B58 : 3AFC 0001           		move.w	#1,(a5)+
(1) 1541/FFFFFFFFFFFF0B5C : 0684 0004 0000      		addi.l	#$40000,d4
(1) 1542/FFFFFFFFFFFF0B62 : 2D44 0004           		move.l	d4,4(a6)
(1) 1543/FFFFFFFFFFFF0B66 : 60B0                		bra	.loop
(1) 1544/FFFFFFFFFFFF0B68 :                     .isword:
(1) 1545/FFFFFFFFFFFF0B68 : 2AC4                		move.l	d4,(a5)+
(1) 1546/FFFFFFFFFFFF0B6A : 3AFC 0002           		move.w	#2,(a5)+
(1) 1547/FFFFFFFFFFFF0B6E : 0684 0008 0000      		addi.l	#$80000,d4
(1) 1548/FFFFFFFFFFFF0B74 : 2D44 0004           		move.l	d4,4(a6)
(1) 1549/FFFFFFFFFFFF0B78 : 609E                		bra	.loop
(1) 1550/FFFFFFFFFFFF0B7A :                     .islong:
(1) 1551/FFFFFFFFFFFF0B7A : 2AC4                		move.l	d4,(a5)+
(1) 1552/FFFFFFFFFFFF0B7C : 3AFC 0003           		move.w	#3,(a5)+
(1) 1553/FFFFFFFFFFFF0B80 : 0684 0010 0000      		addi.l	#$100000,d4
(1) 1554/FFFFFFFFFFFF0B86 : 2D44 0004           		move.l	d4,4(a6)
(1) 1555/FFFFFFFFFFFF0B8A : 608C                		bra	.loop
(1) 1556/FFFFFFFFFFFF0B8C :                     .exit:
(1) 1557/FFFFFFFFFFFF0B8C :                     
(1) 1558/FFFFFFFFFFFF0B8C :                     	; ----------------------------------------
(1) 1559/FFFFFFFFFFFF0B8C :                     	; Print values
(1) 1560/FFFFFFFFFFFF0B8C :                     	;
(1) 1561/FFFFFFFFFFFF0B8C :                     	; vvvv vvvv tttt
(1) 1562/FFFFFFFFFFFF0B8C :                     	; v - vdp pos
(1) 1563/FFFFFFFFFFFF0B8C :                     	; t - value type
(1) 1564/FFFFFFFFFFFF0B8C :                     	; ----------------------------------------
(1) 1565/FFFFFFFFFFFF0B8C :                     
(1) 1566/FFFFFFFFFFFF0B8C :                     	; reading byte by byte because longs doesn't get
(1) 1567/FFFFFFFFFFFF0B8C :                     	; aligned after $00...
(1) 1568/FFFFFFFFFFFF0B8C :                     
(1) 1569/FFFFFFFFFFFF0B8C : 7800                		moveq	#0,d4
(1) 1570/FFFFFFFFFFFF0B8E : 7A00                		moveq	#0,d5
(1) 1571/FFFFFFFFFFFF0B90 : 7C00                		moveq	#0,d6
(1) 1572/FFFFFFFFFFFF0B92 : 4BF8 BC54           		lea	(RAM_VidPrntList).w,a5
(1) 1573/FFFFFFFFFFFF0B96 :                     .nextv:
(1) 1574/FFFFFFFFFFFF0B96 : 4A95                		tst.l	(a5)
(1) 1575/FFFFFFFFFFFF0B98 : 6700 009E           		beq	.nothing
(1) 1576/FFFFFFFFFFFF0B9C :                     
(1) 1577/FFFFFFFFFFFF0B9C :                     	; grab value
(1) 1578/FFFFFFFFFFFF0B9C : 7800                		moveq	#0,d4
(1) 1579/FFFFFFFFFFFF0B9E : 1818                		move.b	(a0)+,d4
(1) 1580/FFFFFFFFFFFF0BA0 : E19C                		rol.l	#8,d4
(1) 1581/FFFFFFFFFFFF0BA2 : 1818                		move.b	(a0)+,d4
(1) 1582/FFFFFFFFFFFF0BA4 : E19C                		rol.l	#8,d4
(1) 1583/FFFFFFFFFFFF0BA6 : 1818                		move.b	(a0)+,d4
(1) 1584/FFFFFFFFFFFF0BA8 : E19C                		rol.l	#8,d4
(1) 1585/FFFFFFFFFFFF0BAA : 1818                		move.b	(a0)+,d4
(1) 1586/FFFFFFFFFFFF0BAC : 2844                		movea.l	d4,a4
(1) 1587/FFFFFFFFFFFF0BAE : 7800                		moveq	#0,d4
(1) 1588/FFFFFFFFFFFF0BB0 :                     
(1) 1589/FFFFFFFFFFFF0BB0 :                     	; get value
(1) 1590/FFFFFFFFFFFF0BB0 : 3C2D 0004           		move.w	4(a5),d6
(1) 1591/FFFFFFFFFFFF0BB4 : 0C46 0001           		cmpi.w	#1,d6		; byte?
(1) 1592/FFFFFFFFFFFF0BB8 : 660E                		bne.s	.vbyte
(1) 1593/FFFFFFFFFFFF0BBA : 1814                		move.b	(a4),d4
(1) 1594/FFFFFFFFFFFF0BBC : 2D55 0004           		move.l	(a5),4(a6)
(1) 1595/FFFFFFFFFFFF0BC0 : E91C                		rol.b	#4,d4
(1) 1596/FFFFFFFFFFFF0BC2 : 6158                		bsr.s	.donibl
(1) 1597/FFFFFFFFFFFF0BC4 : E91C                		rol.b	#4,d4
(1) 1598/FFFFFFFFFFFF0BC6 : 6154                		bsr.s	.donibl
(1) 1599/FFFFFFFFFFFF0BC8 :                     .vbyte:
(1) 1600/FFFFFFFFFFFF0BC8 : 0C46 0002           		cmpi.w	#2,d6		; word?
(1) 1601/FFFFFFFFFFFF0BCC : 661C                		bne.s	.vword
(1) 1602/FFFFFFFFFFFF0BCE : 1814                		move.b	(a4),d4
(1) 1603/FFFFFFFFFFFF0BD0 : E15C                		rol.w	#8,d4
(1) 1604/FFFFFFFFFFFF0BD2 : 182C 0001           		move.b	1(a4),d4
(1) 1605/FFFFFFFFFFFF0BD6 : 2D55 0004           		move.l	(a5),4(a6)
(1) 1606/FFFFFFFFFFFF0BDA : E95C                		rol.w	#4,d4
(1) 1607/FFFFFFFFFFFF0BDC : 613E                		bsr.s	.donibl
(1) 1608/FFFFFFFFFFFF0BDE : E95C                		rol.w	#4,d4
(1) 1609/FFFFFFFFFFFF0BE0 : 613A                		bsr.s	.donibl
(1) 1610/FFFFFFFFFFFF0BE2 : E95C                		rol.w	#4,d4
(1) 1611/FFFFFFFFFFFF0BE4 : 6136                		bsr.s	.donibl
(1) 1612/FFFFFFFFFFFF0BE6 : E95C                		rol.w	#4,d4
(1) 1613/FFFFFFFFFFFF0BE8 : 6132                		bsr.s	.donibl
(1) 1614/FFFFFFFFFFFF0BEA :                     .vword:
(1) 1615/FFFFFFFFFFFF0BEA : 0C46 0003           		cmpi.w	#3,d6		; long?
(1) 1616/FFFFFFFFFFFF0BEE : 6624                		bne.s	.vlong
(1) 1617/FFFFFFFFFFFF0BF0 : 1814                		move.b	(a4),d4
(1) 1618/FFFFFFFFFFFF0BF2 : E19C                		rol.l	#8,d4
(1) 1619/FFFFFFFFFFFF0BF4 : 182C 0001           		move.b	1(a4),d4
(1) 1620/FFFFFFFFFFFF0BF8 : E19C                		rol.l	#8,d4
(1) 1621/FFFFFFFFFFFF0BFA : 182C 0002           		move.b	2(a4),d4
(1) 1622/FFFFFFFFFFFF0BFE : E19C                		rol.l	#8,d4
(1) 1623/FFFFFFFFFFFF0C00 : 182C 0003           		move.b	3(a4),d4
(1) 1624/FFFFFFFFFFFF0C04 : 2D55 0004           		move.l	(a5),4(a6)
(1) 1625/FFFFFFFFFFFF0C08 : 3C3C 0007           		move.w	#7,d6
(1) 1626/FFFFFFFFFFFF0C0C : E99C                .lngloop:	rol.l	#4,d4
(1) 1627/FFFFFFFFFFFF0C0E : 610C                		bsr.s	.donibl
(1) 1628/FFFFFFFFFFFF0C10 : 51CE FFFA           		dbf	d6,.lngloop
(1) 1629/FFFFFFFFFFFF0C14 :                     .vlong:
(1) 1630/FFFFFFFFFFFF0C14 : 429D                		clr.l	(a5)+
(1) 1631/FFFFFFFFFFFF0C16 : 425D                		clr.w	(a5)+
(1) 1632/FFFFFFFFFFFF0C18 : 6000 FF7C           		bra	.nextv
(1) 1633/FFFFFFFFFFFF0C1C :                     
(1) 1634/FFFFFFFFFFFF0C1C :                     ; make nibble byte
(1) 1635/FFFFFFFFFFFF0C1C :                     .donibl:
(1) 1636/FFFFFFFFFFFF0C1C : 3A04                		move.w	d4,d5
(1) 1637/FFFFFFFFFFFF0C1E : 0245 000F           		andi.w	#%1111,d5
(1) 1638/FFFFFFFFFFFF0C22 : 0C05 000A           		cmpi.b	#$A,d5
(1) 1639/FFFFFFFFFFFF0C26 : 6D04                		blt.s	.lowr
(1) 1640/FFFFFFFFFFFF0C28 : DA3C 0007           		add.b	#7,d5
(1) 1641/FFFFFFFFFFFF0C2C :                     .lowr:
(1) 1642/FFFFFFFFFFFF0C2C : DA7C 0030           		add.w	#"0",d5
(1) 1643/FFFFFFFFFFFF0C30 : DA78 BDE2           		add.w	(RAM_VidPrntVram).w,d5
(1) 1644/FFFFFFFFFFFF0C34 : 3C85                		move.w	d5,(a6)
(1) 1645/FFFFFFFFFFFF0C36 : 4E75                		rts
(1) 1646/FFFFFFFFFFFF0C38 :                     ; exit
(1) 1647/FFFFFFFFFFFF0C38 :                     .nothing:
(1) 1648/FFFFFFFFFFFF0C38 : 4CDF 70F0           		movem.l	(sp)+,d4-d7/a4-a6
(1) 1649/FFFFFFFFFFFF0C3C : 4E75                		rts
(1) 1650/FFFFFFFFFFFF0C3E :                     
(1) 1651/FFFFFFFFFFFF0C3E :                     ; ------------------------------------------------
(1) 1652/FFFFFFFFFFFF0C3E :                     ; Shared: pick layer / x pos / y pos and set size
(1) 1653/FFFFFFFFFFFF0C3E :                     ;
(1) 1654/FFFFFFFFFFFF0C3E :                     ; Input:
(1) 1655/FFFFFFFFFFFF0C3E :                     ; d0.l - locate(layer,x,y)
(1) 1656/FFFFFFFFFFFF0C3E :                     ;
(1) 1657/FFFFFFFFFFFF0C3E :                     ; Returns:
(1) 1658/FFFFFFFFFFFF0C3E :                     ; d5 - VRAM position
(1) 1659/FFFFFFFFFFFF0C3E :                     ; d6 - Width
(1) 1660/FFFFFFFFFFFF0C3E :                     ; ------------------------------------------------
(1) 1661/FFFFFFFFFFFF0C3E :                     
(1) 1662/FFFFFFFFFFFF0C3E :                     vid_PickLayer:
(1) 1663/FFFFFFFFFFFF0C3E : 2C00                		move.l	d0,d6			; d6 - pick layer
(1) 1664/FFFFFFFFFFFF0C40 : 4846                		swap	d6
(1) 1665/FFFFFFFFFFFF0C42 : 0806 0000           		btst	#0,d6
(1) 1666/FFFFFFFFFFFF0C46 : 671C                		beq.s	.plawnd
(1) 1667/FFFFFFFFFFFF0C48 : 1A38 BDFA           		move.b	(RAM_VdpRegs+4).w,d5	; BG
(1) 1668/FFFFFFFFFFFF0C4C : 3805                		move.w	d5,d4
(1) 1669/FFFFFFFFFFFF0C4E : E24C                		lsr.w	#1,d4
(1) 1670/FFFFFFFFFFFF0C50 : 0244 0003           		andi.w	#%11,d4
(1) 1671/FFFFFFFFFFFF0C54 : 4845                		swap	d5
(1) 1672/FFFFFFFFFFFF0C56 : 3A04                		move.w	d4,d5
(1) 1673/FFFFFFFFFFFF0C58 : 4845                		swap	d5
(1) 1674/FFFFFFFFFFFF0C5A : 0245 0001           		andi.w	#1,d5
(1) 1675/FFFFFFFFFFFF0C5E : E14D                		lsl.w	#8,d5
(1) 1676/FFFFFFFFFFFF0C60 : EB4D                		lsl.w	#5,d5
(1) 1677/FFFFFFFFFFFF0C62 : 6024                		bra.s	.golyr
(1) 1678/FFFFFFFFFFFF0C64 :                     .plawnd:
(1) 1679/FFFFFFFFFFFF0C64 : 1A38 BDF8           		move.b	(RAM_VdpRegs+2).w,d5	; FG
(1) 1680/FFFFFFFFFFFF0C68 : 0806 0001           		btst	#1,d6
(1) 1681/FFFFFFFFFFFF0C6C : 6704                		beq.s	.nowd
(1) 1682/FFFFFFFFFFFF0C6E : 1A38 BDF9           		move.b	(RAM_VdpRegs+3).w,d5	; WINDOW
(1) 1683/FFFFFFFFFFFF0C72 :                     .nowd:
(1) 1684/FFFFFFFFFFFF0C72 : 3805                		move.w	d5,d4
(1) 1685/FFFFFFFFFFFF0C74 : E84C                		lsr.w	#4,d4
(1) 1686/FFFFFFFFFFFF0C76 : 0244 0003           		andi.w	#%11,d4
(1) 1687/FFFFFFFFFFFF0C7A : 4845                		swap	d5
(1) 1688/FFFFFFFFFFFF0C7C : 3A04                		move.w	d4,d5
(1) 1689/FFFFFFFFFFFF0C7E : 4845                		swap	d5
(1) 1690/FFFFFFFFFFFF0C80 : 0245 000E           		andi.w	#%00001110,d5
(1) 1691/FFFFFFFFFFFF0C84 : E14D                		lsl.w	#8,d5
(1) 1692/FFFFFFFFFFFF0C86 : E54D                		lsl.w	#2,d5
(1) 1693/FFFFFFFFFFFF0C88 :                     .golyr:
(1) 1694/FFFFFFFFFFFF0C88 : 0045 4000           		ori.w	#$4000,d5
(1) 1695/FFFFFFFFFFFF0C8C : 3800                		move.w	d0,d4			; Y start pos
(1) 1696/FFFFFFFFFFFF0C8E : 0244 00FF           		andi.w	#$FF,d4			; Y only
(1) 1697/FFFFFFFFFFFF0C92 : ED4C                		lsl.w	#6,d4
(1) 1698/FFFFFFFFFFFF0C94 : 1C38 BE06           		move.b	(RAM_VdpRegs+$10).w,d6
(1) 1699/FFFFFFFFFFFF0C98 : 0246 0003           		andi.w	#%11,d6
(1) 1700/FFFFFFFFFFFF0C9C : 670A                		beq.s	.thissz
(1) 1701/FFFFFFFFFFFF0C9E : D844                		add.w	d4,d4			; H64
(1) 1702/FFFFFFFFFFFF0CA0 : 0246 0002           		andi.w	#%10,d6
(1) 1703/FFFFFFFFFFFF0CA4 : 6702                		beq.s	.thissz
(1) 1704/FFFFFFFFFFFF0CA6 : D844                		add.w	d4,d4			; H128
(1) 1705/FFFFFFFFFFFF0CA8 :                     .thissz:
(1) 1706/FFFFFFFFFFFF0CA8 : DA44                		add.w	d4,d5
(1) 1707/FFFFFFFFFFFF0CAA : 3800                		move.w	d0,d4
(1) 1708/FFFFFFFFFFFF0CAC : 0244 FF00           		andi.w	#$FF00,d4		; X only
(1) 1709/FFFFFFFFFFFF0CB0 : EE4C                		lsr.w	#7,d4
(1) 1710/FFFFFFFFFFFF0CB2 : DA44                		add.w	d4,d5			; X add
(1) 1711/FFFFFFFFFFFF0CB4 : 4845                		swap	d5
(1) 1712/FFFFFFFFFFFF0CB6 : 7C00                		moveq	#0,d6
(1) 1713/FFFFFFFFFFFF0CB8 : 3C3C 0040           		move.w	#$40,d6			; Set jump size
(1) 1714/FFFFFFFFFFFF0CBC : 1838 BE06           		move.b	(RAM_VdpRegs+$10).w,d4
(1) 1715/FFFFFFFFFFFF0CC0 : 0244 0003           		andi.w	#%11,d4
(1) 1716/FFFFFFFFFFFF0CC4 : 670A                		beq.s	.thisszj
(1) 1717/FFFFFFFFFFFF0CC6 : DC46                		add.w	d6,d6			; H64
(1) 1718/FFFFFFFFFFFF0CC8 : 0244 0002           		andi.w	#%10,d4
(1) 1719/FFFFFFFFFFFF0CCC : 6702                		beq.s	.thisszj
(1) 1720/FFFFFFFFFFFF0CCE : DC46                		add.w	d6,d6			; H128
(1) 1721/FFFFFFFFFFFF0CD0 :                     .thisszj:
(1) 1722/FFFFFFFFFFFF0CD0 : 4846                		swap	d6
(1) 1723/FFFFFFFFFFFF0CD2 : 4E75                		rts
(1) 1724/FFFFFFFFFFFF0CD4 :                     
(1) 1725/FFFFFFFFFFFF0CD4 :                     ; ====================================================================
(1) 1726/FFFFFFFFFFFF0CD4 :                     ; ----------------------------------------------------------------
(1) 1727/FFFFFFFFFFFF0CD4 :                     ; Objects system
(1) 1728/FFFFFFFFFFFF0CD4 :                     ; ----------------------------------------------------------------
(1) 1729/FFFFFFFFFFFF0CD4 :                     
(1) 1730/FFFFFFFFFFFF0CD4 :                     ; --------------------------------------------------------
(1) 1731/FFFFFFFFFFFF0CD4 :                     ; Init objects system
(1) 1732/FFFFFFFFFFFF0CD4 :                     ; --------------------------------------------------------
(1) 1733/FFFFFFFFFFFF0CD4 :                     
(1) 1734/FFFFFFFFFFFF0CD4 :                     Objects_Clear:
(1) 1735/FFFFFFFFFFFF0CD4 : 4DF8 B294           		lea	(RAM_Objects).w,a6
(1) 1736/FFFFFFFFFFFF0CD8 : 3E3C 098F           		move.w	#(sizeof_mdobj*MAX_MDOBJ)-1,d7
(1) 1737/FFFFFFFFFFFF0CDC :                     .clr:
(1) 1738/FFFFFFFFFFFF0CDC : 421E                		clr.b	(a6)+
(1) 1739/FFFFFFFFFFFF0CDE : 51CF FFFC           		dbf	d7,.clr
(1) 1740/FFFFFFFFFFFF0CE2 : 4DF8 BC24           		lea	(RAM_ObjDispList).w,a6
(1) 1741/FFFFFFFFFFFF0CE6 : 3E3C 0017           		move.w	#MAX_MDOBJ-1,d7
(1) 1742/FFFFFFFFFFFF0CEA :                     .clr_d:
(1) 1743/FFFFFFFFFFFF0CEA : 425E                		clr.w	(a6)+
(1) 1744/FFFFFFFFFFFF0CEC : 51CF FFFC           		dbf	d7,.clr_d
(1) 1745/FFFFFFFFFFFF0CF0 : 31FC 0001 BDDA      		move.w	#1,(RAM_SprLinkNum).w
(1) 1746/FFFFFFFFFFFF0CF6 : 4278 BDD8           		clr.w	(RAM_SprDrwCntr).w
(1) 1747/FFFFFFFFFFFF0CFA : 4E75                		rts
(1) 1748/FFFFFFFFFFFF0CFC :                     
(1) 1749/FFFFFFFFFFFF0CFC :                     ; --------------------------------------------------------
(1) 1750/FFFFFFFFFFFF0CFC :                     ; Process objects
(1) 1751/FFFFFFFFFFFF0CFC :                     ; --------------------------------------------------------
(1) 1752/FFFFFFFFFFFF0CFC :                     
(1) 1753/FFFFFFFFFFFF0CFC :                     Objects_Run:
(1) 1754/FFFFFFFFFFFF0CFC : 4DF8 B294           		lea	(RAM_Objects).w,a6
(1) 1755/FFFFFFFFFFFF0D00 : 3E3C 0017           		move.w	#MAX_MDOBJ-1,d7
(1) 1756/FFFFFFFFFFFF0D04 :                     .next_one:
(1) 1757/FFFFFFFFFFFF0D04 : 2C16                		move.l	obj_code(a6),d6
(1) 1758/FFFFFFFFFFFF0D06 : 6708                		beq.s	.no_code	; Free slot
(1) 1759/FFFFFFFFFFFF0D08 : 2F07                		move.l	d7,-(sp)
(1) 1760/FFFFFFFFFFFF0D0A : 2A46                		move.l	d6,a5
(1) 1761/FFFFFFFFFFFF0D0C : 4E95                		jsr	(a5)
(1) 1762/FFFFFFFFFFFF0D0E : 2E1F                		move.l	(sp)+,d7
(1) 1763/FFFFFFFFFFFF0D10 :                     .no_code:
(1) 1764/FFFFFFFFFFFF0D10 : DCFC 0066           		adda	#sizeof_mdobj,a6
(1) 1765/FFFFFFFFFFFF0D14 : 51CF FFEE           		dbf	d7,.next_one
(1) 1766/FFFFFFFFFFFF0D18 : 4E75                		rts
(1) 1767/FFFFFFFFFFFF0D1A :                     
(1) 1768/FFFFFFFFFFFF0D1A :                     ; --------------------------------------------------------
(1) 1769/FFFFFFFFFFFF0D1A :                     ; Objects_Set
(1) 1770/FFFFFFFFFFFF0D1A :                     ;
(1) 1771/FFFFFFFFFFFF0D1A :                     ; Input:
(1) 1772/FFFFFFFFFFFF0D1A :                     ; d0 - Object code location (0 - delete)
(1) 1773/FFFFFFFFFFFF0D1A :                     ; d1 - Object slot
(1) 1774/FFFFFFFFFFFF0D1A :                     ;
(1) 1775/FFFFFFFFFFFF0D1A :                     ; Uses:
(1) 1776/FFFFFFFFFFFF0D1A :                     ; d7,a5-a6
(1) 1777/FFFFFFFFFFFF0D1A :                     ; --------------------------------------------------------
(1) 1778/FFFFFFFFFFFF0D1A :                     
(1) 1779/FFFFFFFFFFFF0D1A :                     Objects_Set:
(1) 1780/FFFFFFFFFFFF0D1A : 4DF8 B294           		lea	(RAM_Objects).w,a6
(1) 1781/FFFFFFFFFFFF0D1E : 2A4E                		move.l	a6,a5
(1) 1782/FFFFFFFFFFFF0D20 : 3E3C 0065           		move.w	#sizeof_mdobj-1,d7
(1) 1783/FFFFFFFFFFFF0D24 :                     .clr:
(1) 1784/FFFFFFFFFFFF0D24 : 421D                		clr.b	(a5)+
(1) 1785/FFFFFFFFFFFF0D26 : 51CF FFFC           		dbf	d7,.clr
(1) 1786/FFFFFFFFFFFF0D2A : 3E01                		move.w	d1,d7
(1) 1787/FFFFFFFFFFFF0D2C : CEFC 0066           		mulu.w	#sizeof_mdobj,d7
(1) 1788/FFFFFFFFFFFF0D30 : DCC7                		adda	d7,a6
(1) 1789/FFFFFFFFFFFF0D32 : 2C80                		move.l	d0,obj_code(a6)
(1) 1790/FFFFFFFFFFFF0D34 : 4DF8 BC24           		lea	(RAM_ObjDispList).w,a6
(1) 1791/FFFFFFFFFFFF0D38 : 3E01                		move.w	d1,d7
(1) 1792/FFFFFFFFFFFF0D3A : DE47                		add.w	d7,d7
(1) 1793/FFFFFFFFFFFF0D3C : 3DBC 0000 7000      		move.w	#0,(a6,d7.w)
(1) 1794/FFFFFFFFFFFF0D42 : 4E75                		rts
(1) 1795/FFFFFFFFFFFF0D44 :                     
(1) 1796/FFFFFFFFFFFF0D44 :                     ; --------------------------------------------------------
(1) 1797/FFFFFFFFFFFF0D44 :                     ; Objects_Add
(1) 1798/FFFFFFFFFFFF0D44 :                     ;
(1) 1799/FFFFFFFFFFFF0D44 :                     ; Returns:
(1) 1800/FFFFFFFFFFFF0D44 :                     ; d0 - -1 if ran out of Objects
(1) 1801/FFFFFFFFFFFF0D44 :                     ; --------------------------------------------------------
(1) 1802/FFFFFFFFFFFF0D44 :                     
(1) 1803/FFFFFFFFFFFF0D44 :                     Objects_Add:
(1) 1804/FFFFFFFFFFFF0D44 : 4DF8 B294           		lea	(RAM_Objects).w,a6
(1) 1805/FFFFFFFFFFFF0D48 : 3E3C 0017           		move.w	#MAX_MDOBJ-1,d7
(1) 1806/FFFFFFFFFFFF0D4C :                     .search:
(1) 1807/FFFFFFFFFFFF0D4C : 2E16                		move.l	obj_code(a6),d7
(1) 1808/FFFFFFFFFFFF0D4E : 670C                		beq.s	.use_it
(1) 1809/FFFFFFFFFFFF0D50 : DCFC 0066           		adda	#sizeof_mdobj,a6
(1) 1810/FFFFFFFFFFFF0D54 : 51CF FFF6           		dbf	d7,.search
(1) 1811/FFFFFFFFFFFF0D58 : 70FF                		moveq	#-1,d0		; Return ran-out flag
(1) 1812/FFFFFFFFFFFF0D5A : 4E75                		rts
(1) 1813/FFFFFFFFFFFF0D5C :                     .use_it:
(1) 1814/FFFFFFFFFFFF0D5C : 2A4E                		move.l	a6,a5
(1) 1815/FFFFFFFFFFFF0D5E : 3E3C 0065           		move.w	#sizeof_mdobj-1,d7
(1) 1816/FFFFFFFFFFFF0D62 :                     .clr:
(1) 1817/FFFFFFFFFFFF0D62 : 421D                		clr.b	(a5)+
(1) 1818/FFFFFFFFFFFF0D64 : 51CF FFFC           		dbf	d7,.clr
(1) 1819/FFFFFFFFFFFF0D68 : 2C80                		move.l	d0,obj_code(a6)
(1) 1820/FFFFFFFFFFFF0D6A : 4DF8 BC24           		lea	(RAM_ObjDispList).w,a6
(1) 1821/FFFFFFFFFFFF0D6E : 3E01                		move.w	d1,d7
(1) 1822/FFFFFFFFFFFF0D70 : DE47                		add.w	d7,d7
(1) 1823/FFFFFFFFFFFF0D72 : 3DBC 0000 7000      		move.w	#0,(a6,d7.w)
(1) 1824/FFFFFFFFFFFF0D78 : 4E75                		rts
(1) 1825/FFFFFFFFFFFF0D7A :                     
(1) 1826/FFFFFFFFFFFF0D7A :                     ; --------------------------------------------------------
(1) 1827/FFFFFFFFFFFF0D7A :                     ; Draw ALL Objects from display list
(1) 1828/FFFFFFFFFFFF0D7A :                     ;
(1) 1829/FFFFFFFFFFFF0D7A :                     ; Call this BEFORE VBlank.
(1) 1830/FFFFFFFFFFFF0D7A :                     ; --------------------------------------------------------
(1) 1831/FFFFFFFFFFFF0D7A :                     
(1) 1832/FFFFFFFFFFFF0D7A :                     Objects_Show:
(1) 1833/FFFFFFFFFFFF0D7A : 3C38 BDDA           		move.w	(RAM_SprLinkNum).w,d6		; d6 - Starting sprite link
(1) 1834/FFFFFFFFFFFF0D7E : 4DF8 A414           		lea	(RAM_Sprites),a6		; a6 - Genesis sprites
(1) 1835/FFFFFFFFFFFF0D82 : 3E06                		move.w	d6,d7
(1) 1836/FFFFFFFFFFFF0D84 : 5347                		subq.w	#1,d7
(1) 1837/FFFFFFFFFFFF0D86 : E74F                		lsl.w	#3,d7
(1) 1838/FFFFFFFFFFFF0D88 : DCC7                		adda	d7,a6
(1) 1839/FFFFFFFFFFFF0D8A :                     
(1) 1840/FFFFFFFFFFFF0D8A : 3E38 BDD8           		move.w	(RAM_SprDrwCntr),d7
(1) 1841/FFFFFFFFFFFF0D8E : 6732                		beq.s	.no_sprdrw
(1) 1842/FFFFFFFFFFFF0D90 : 4278 BDD8           		clr.w	(RAM_SprDrwCntr).w
(1) 1843/FFFFFFFFFFFF0D94 : 4BF8 A914           		lea	(RAM_SprDrwPz),a5
(1) 1844/FFFFFFFFFFFF0D98 : 9E7C 0001           		sub.w	#1,d7
(1) 1845/FFFFFFFFFFFF0D9C :                     .nexts:
(1) 1846/FFFFFFFFFFFF0D9C : BC7C 0050           		cmp.w	#80,d6
(1) 1847/FFFFFFFFFFFF0DA0 : 6C20                		bge.s	.no_sprdrw
(1) 1848/FFFFFFFFFFFF0DA2 : 301D                		move.w	(a5)+,d0
(1) 1849/FFFFFFFFFFFF0DA4 : 321D                		move.w	(a5)+,d1	; custom
(1) 1850/FFFFFFFFFFFF0DA6 : C27C 00FF           		and.w	#$FF,d1
(1) 1851/FFFFFFFFFFFF0DAA : E149                		lsl.w	#8,d1
(1) 1852/FFFFFFFFFFFF0DAC : 8246                		or.w	d6,d1
(1) 1853/FFFFFFFFFFFF0DAE : 341D                		move.w	(a5)+,d2
(1) 1854/FFFFFFFFFFFF0DB0 : 361D                		move.w	(a5)+,d3
(1) 1855/FFFFFFFFFFFF0DB2 : 3CC0                		move.w	d0,(a6)+
(1) 1856/FFFFFFFFFFFF0DB4 : 3CC1                		move.w	d1,(a6)+
(1) 1857/FFFFFFFFFFFF0DB6 : 3CC2                		move.w	d2,(a6)+
(1) 1858/FFFFFFFFFFFF0DB8 : 3CC3                		move.w	d3,(a6)+
(1) 1859/FFFFFFFFFFFF0DBA : DC7C 0001           		add.w	#1,d6
(1) 1860/FFFFFFFFFFFF0DBE : 51CF FFDC           		dbf	d7,.nexts
(1) 1861/FFFFFFFFFFFF0DC2 :                     .no_sprdrw:
(1) 1862/FFFFFFFFFFFF0DC2 :                     
(1) 1863/FFFFFFFFFFFF0DC2 :                     ; 		move.w	(RAM_SprLinkNum).w,d6	; d6 - Starting sprite link
(1) 1864/FFFFFFFFFFFF0DC2 :                     ; 		lea	(RAM_Sprites).w,a6	; a6 - Genesis sprites
(1) 1865/FFFFFFFFFFFF0DC2 : 4BF8 BC24           		lea	(RAM_ObjDispList).w,a5
(1) 1866/FFFFFFFFFFFF0DC6 : 3E3C 0017           		move.w	#MAX_MDOBJ-1,d7
(1) 1867/FFFFFFFFFFFF0DCA :                     .next:
(1) 1868/FFFFFFFFFFFF0DCA : 3015                		move.w	(a5),d0
(1) 1869/FFFFFFFFFFFF0DCC : 6700 00AC           		beq	.finish
(1) 1870/FFFFFFFFFFFF0DD0 : 4255                		clr.w	(a5)
(1) 1871/FFFFFFFFFFFF0DD2 : 72FF                		moveq	#-1,d1			; Write the $FFFFxxxx part
(1) 1872/FFFFFFFFFFFF0DD4 : 3200                		move.w	d0,d1			; get the half-address
(1) 1873/FFFFFFFFFFFF0DD6 : 2841                		move.l	d1,a4			; set to a4
(1) 1874/FFFFFFFFFFFF0DD8 : 206C 000C           		move.l	obj_map(a4),a0		; Read this object's map
(1) 1875/FFFFFFFFFFFF0DDC : 302C 001E           		move.w	obj_frame(a4),d0
(1) 1876/FFFFFFFFFFFF0DE0 : 182C 0022           		move.b	obj_set(a4),d4
(1) 1877/FFFFFFFFFFFF0DE4 : D040                		add.w	d0,d0
(1) 1878/FFFFFFFFFFFF0DE6 : 3030 0000           		move.w	(a0,d0.w),d0
(1) 1879/FFFFFFFFFFFF0DEA : 41F0 0000           		lea	(a0,d0.w),a0
(1) 1880/FFFFFFFFFFFF0DEE : 3A18                		move.w	(a0)+,d5
(1) 1881/FFFFFFFFFFFF0DF0 : 6700 0082           		beq	.mk_spr
(1) 1882/FFFFFFFFFFFF0DF4 : 0445 0001           		subi.w	#1,d5
(1) 1883/FFFFFFFFFFFF0DF8 :                     .mk_pz:
(1) 1884/FFFFFFFFFFFF0DF8 : 0C46 0050           		cmpi.w	#80,d6
(1) 1885/FFFFFFFFFFFF0DFC : 6E00 009A           		bgt	.ran_out
(1) 1886/FFFFFFFFFFFF0E00 : 4845                		swap	d5
(1) 1887/FFFFFFFFFFFF0E02 : 4846                		swap	d6
(1) 1888/FFFFFFFFFFFF0E04 : 1018                		move.b	(a0)+,d0		; d0 - Y pos
(1) 1889/FFFFFFFFFFFF0E06 : 1218                		move.b	(a0)+,d1		; d1 - Size
(1) 1890/FFFFFFFFFFFF0E08 : 3418                		move.w	(a0)+,d2		; d2 - VRAM main
(1) 1891/FFFFFFFFFFFF0E0A : D0FC 0002           		adda	#2,a0			; TODO: VRAM double later
(1) 1892/FFFFFFFFFFFF0E0E : 3618                		move.w	(a0)+,d3		; d3 - X pos
(1) 1893/FFFFFFFFFFFF0E10 : 4880                		ext.w	d0
(1) 1894/FFFFFFFFFFFF0E12 :                     
(1) 1895/FFFFFFFFFFFF0E12 :                     	; X/Y flip checks
(1) 1896/FFFFFFFFFFFF0E12 : 3A2C 0014           		move.w	obj_vram(a4),d5
(1) 1897/FFFFFFFFFFFF0E16 : 0804 0001           		btst	#bitobj_flipV,d4
(1) 1898/FFFFFFFFFFFF0E1A : 6714                		beq.s	.vram_v
(1) 1899/FFFFFFFFFFFF0E1C : 4440                		neg.w	d0
(1) 1900/FFFFFFFFFFFF0E1E : 0440 0008           		subi.w	#8,d0
(1) 1901/FFFFFFFFFFFF0E22 : 3C01                		move.w	d1,d6
(1) 1902/FFFFFFFFFFFF0E24 : 0246 0003           		andi.w	#%0011,d6
(1) 1903/FFFFFFFFFFFF0E28 : E74E                		lsl.w	#3,d6
(1) 1904/FFFFFFFFFFFF0E2A : 9046                		sub.w	d6,d0
(1) 1905/FFFFFFFFFFFF0E2C : 0045 1000           		ori.w	#$1000,d5
(1) 1906/FFFFFFFFFFFF0E30 :                     .vram_v:
(1) 1907/FFFFFFFFFFFF0E30 : 0804 0000           		btst	#bitobj_flipH,d4
(1) 1908/FFFFFFFFFFFF0E34 : 6714                		beq.s	.vram_h
(1) 1909/FFFFFFFFFFFF0E36 : 4443                		neg.w	d3
(1) 1910/FFFFFFFFFFFF0E38 : 0443 0008           		subi.w	#8,d3
(1) 1911/FFFFFFFFFFFF0E3C : 3C01                		move.w	d1,d6
(1) 1912/FFFFFFFFFFFF0E3E : 0246 000C           		andi.w	#%1100,d6
(1) 1913/FFFFFFFFFFFF0E42 : DC46                		add.w	d6,d6
(1) 1914/FFFFFFFFFFFF0E44 : 9646                		sub.w	d6,d3
(1) 1915/FFFFFFFFFFFF0E46 : 0045 0800           		ori.w	#$0800,d5
(1) 1916/FFFFFFFFFFFF0E4A :                     .vram_h:
(1) 1917/FFFFFFFFFFFF0E4A : D445                		add.w	d5,d2
(1) 1918/FFFFFFFFFFFF0E4C : D06C 0008           		add.w	obj_y(a4),d0
(1) 1919/FFFFFFFFFFFF0E50 : D66C 0004           		add.w	obj_x(a4),d3
(1) 1920/FFFFFFFFFFFF0E54 : D07C 0080           		add.w	#$80,d0
(1) 1921/FFFFFFFFFFFF0E58 : D67C 0080           		add.w	#$80,d3
(1) 1922/FFFFFFFFFFFF0E5C : 4846                		swap	d6
(1) 1923/FFFFFFFFFFFF0E5E : E149                		lsl.w	#8,d1			; Size + Link
(1) 1924/FFFFFFFFFFFF0E60 : 8246                		or.w	d6,d1
(1) 1925/FFFFFFFFFFFF0E62 : 3CC0                		move.w	d0,(a6)+
(1) 1926/FFFFFFFFFFFF0E64 : 3CC1                		move.w	d1,(a6)+
(1) 1927/FFFFFFFFFFFF0E66 : 3CC2                		move.w	d2,(a6)+
(1) 1928/FFFFFFFFFFFF0E68 : 3CC3                		move.w	d3,(a6)+
(1) 1929/FFFFFFFFFFFF0E6A : DC7C 0001           		add.w	#1,d6
(1) 1930/FFFFFFFFFFFF0E6E : 4845                		swap	d5
(1) 1931/FFFFFFFFFFFF0E70 : 51CD FF86           		dbf	d5,.mk_pz
(1) 1932/FFFFFFFFFFFF0E74 :                     .mk_spr:
(1) 1933/FFFFFFFFFFFF0E74 : 425D                		clr.w	(a5)+			; Clear request
(1) 1934/FFFFFFFFFFFF0E76 : 51CF FF52           		dbf	d7,.next
(1) 1935/FFFFFFFFFFFF0E7A :                     .finish:
(1) 1936/FFFFFFFFFFFF0E7A : 4DF8 A414           		lea	(RAM_Sprites).w,a6
(1) 1937/FFFFFFFFFFFF0E7E : 0C46 0001           		cmpi.w	#1,d6
(1) 1938/FFFFFFFFFFFF0E82 : 6714                		beq.s	.ran_out
(1) 1939/FFFFFFFFFFFF0E84 : 0C46 0050           		cmpi.w	#80,d6
(1) 1940/FFFFFFFFFFFF0E88 : 6E0E                		bgt.s	.ran_out
(1) 1941/FFFFFFFFFFFF0E8A : 3E06                		move.w	d6,d7
(1) 1942/FFFFFFFFFFFF0E8C : 0447 0001           		subi.w	#1,d7
(1) 1943/FFFFFFFFFFFF0E90 : E74F                		lsl.w	#3,d7
(1) 1944/FFFFFFFFFFFF0E92 : DCC7                		adda	d7,a6
(1) 1945/FFFFFFFFFFFF0E94 : 429E                		clr.l	(a6)+
(1) 1946/FFFFFFFFFFFF0E96 : 429E                		clr.l	(a6)+
(1) 1947/FFFFFFFFFFFF0E98 :                     .ran_out:
(1) 1948/FFFFFFFFFFFF0E98 : 31C6 BDDA           		move.w	d6,(RAM_SprLinkNum).w
(1) 1949/FFFFFFFFFFFF0E9C : 4E75                		rts
(1) 1950/FFFFFFFFFFFF0E9E :                     
(1) 1951/FFFFFFFFFFFF0E9E :                     ; --------------------------------------------------------
(1) 1952/FFFFFFFFFFFF0E9E :                     ; Objects system subroutines
(1) 1953/FFFFFFFFFFFF0E9E :                     ; --------------------------------------------------------
(1) 1954/FFFFFFFFFFFF0E9E :                     
(1) 1955/FFFFFFFFFFFF0E9E :                     ; --------------------------------------------------------
(1) 1956/FFFFFFFFFFFF0E9E :                     ; obj_Display
(1) 1957/FFFFFFFFFFFF0E9E :                     ;
(1) 1958/FFFFFFFFFFFF0E9E :                     ; Builds a sprite using map data specified in
(1) 1959/FFFFFFFFFFFF0E9E :                     ; obj_map(a6)
(1) 1960/FFFFFFFFFFFF0E9E :                     ;
(1) 1961/FFFFFFFFFFFF0E9E :                     ; *** GENESIS map ***
(1) 1962/FFFFFFFFFFFF0E9E :                     ; mapdata:
(1) 1963/FFFFFFFFFFFF0E9E :                     ;       dc.w .frame0-mapdata
(1) 1964/FFFFFFFFFFFF0E9E :                     ;       dc.w .frame1-mapdata
(1) 1965/FFFFFFFFFFFF0E9E :                     ;       ...
(1) 1966/FFFFFFFFFFFF0E9E :                     ; .frame0:
(1) 1967/FFFFFFFFFFFF0E9E :                     ;       dc.w numofpz
(1) 1968/FFFFFFFFFFFF0E9E :                     ;       dc.b YY,SS
(1) 1969/FFFFFFFFFFFF0E9E :                     ;       dc.w vram_normal
(1) 1970/FFFFFFFFFFFF0E9E :                     ;       dc.w vram_half
(1) 1971/FFFFFFFFFFFF0E9E :                     ;       dc.w XXXX
(1) 1972/FFFFFFFFFFFF0E9E :                     ;       ; next frame
(1) 1973/FFFFFFFFFFFF0E9E :                     ;       align 2
(1) 1974/FFFFFFFFFFFF0E9E :                     ;
(1) 1975/FFFFFFFFFFFF0E9E :                     ; *** 32X map ***
(1) 1976/FFFFFFFFFFFF0E9E :                     ; mapdata:
(1) 1977/FFFFFFFFFFFF0E9E :                     ; 	dc.l SH2_ADDR|TH ; Spritesheet location (TH opt.)
(1) 1978/FFFFFFFFFFFF0E9E :                     ; 	dc.w 512	 ; Spritesheet WIDTH
(1) 1979/FFFFFFFFFFFF0E9E :                     ; 	dc.b 64,72	 ; Frame width and height
(1) 1980/FFFFFFFFFFFF0E9E :                     ; 	dc.w $80	 ; Palette index
(1) 1981/FFFFFFFFFFFF0E9E :                     ;
(1) 1982/FFFFFFFFFFFF0E9E :                     ; obj_frame(a6) is in YYXX direction
(1) 1983/FFFFFFFFFFFF0E9E :                     ;
(1) 1984/FFFFFFFFFFFF0E9E :                     ; Input:
(1) 1985/FFFFFFFFFFFF0E9E :                     ; a6 - Object
(1) 1986/FFFFFFFFFFFF0E9E :                     ;
(1) 1987/FFFFFFFFFFFF0E9E :                     ; Uses:
(1) 1988/FFFFFFFFFFFF0E9E :                     ; a5,d4-d7
(1) 1989/FFFFFFFFFFFF0E9E :                     ; --------------------------------------------------------
(1) 1990/FFFFFFFFFFFF0E9E :                     
(1) 1991/FFFFFFFFFFFF0E9E :                     object_Display:
(1) 1992/FFFFFFFFFFFF0E9E : 4BF8 BC24           		lea	(RAM_ObjDispList).w,a5
(1) 1993/FFFFFFFFFFFF0EA2 : 3E3C 0017           		move.w	#MAX_MDOBJ-1,d7
(1) 1994/FFFFFFFFFFFF0EA6 :                     .srch:
(1) 1995/FFFFFFFFFFFF0EA6 : 4A55                		tst.w	(a5)
(1) 1996/FFFFFFFFFFFF0EA8 : 6708                		beq.s	.this_one
(1) 1997/FFFFFFFFFFFF0EAA : DAFC 0002           		adda	#2,a5
(1) 1998/FFFFFFFFFFFF0EAE : 51CF FFF6           		dbf	d7,.srch
(1) 1999/FFFFFFFFFFFF0EB2 :                     .this_one:
(1) 2000/FFFFFFFFFFFF0EB2 : 3A8E                		move.w	a6,(a5)
(1) 2001/FFFFFFFFFFFF0EB4 : 4AAE 0010           		tst.l	obj_dma(a6)
(1) 2002/FFFFFFFFFFFF0EB8 : 6750                		beq.s	.no_dma
(1) 2003/FFFFFFFFFFFF0EBA : 206E 0010           		move.l	obj_dma(a6),a0
(1) 2004/FFFFFFFFFFFF0EBE : 2618                		move.l	(a0)+,d3		; d3 - Art data
(1) 2005/FFFFFFFFFFFF0EC0 : 382E 001E           		move.w	obj_frame(a6),d4
(1) 2006/FFFFFFFFFFFF0EC4 : D844                 		add.w	d4,d4
(1) 2007/FFFFFFFFFFFF0EC6 : 3830 4000           		move.w	(a0,d4.w),d4
(1) 2008/FFFFFFFFFFFF0ECA : D0C4                 		adda	d4,a0
(1) 2009/FFFFFFFFFFFF0ECC : 7800                 		moveq	#0,d4
(1) 2010/FFFFFFFFFFFF0ECE : 3818                 		move.w	(a0)+,d4
(1) 2011/FFFFFFFFFFFF0ED0 : 6738                 		beq.s	.no_dma
(1) 2012/FFFFFFFFFFFF0ED2 : 5344                 		subq.w	#1,d4
(1) 2013/FFFFFFFFFFFF0ED4 : 322E 0014           		move.w	obj_vram(a6),d1
(1) 2014/FFFFFFFFFFFF0ED8 : 0241 07FF           		andi.w	#$7FF,d1
(1) 2015/FFFFFFFFFFFF0EDC : EB49                		lsl.w	#5,d1
(1) 2016/FFFFFFFFFFFF0EDE : 2F0E                		move.l	a6,-(sp)		; SAVE a6
(1) 2017/FFFFFFFFFFFF0EE0 :                     .next_pz:
(1) 2018/FFFFFFFFFFFF0EE0 : 4844                		swap	d4
(1) 2019/FFFFFFFFFFFF0EE2 : 3818                		move.w	(a0)+,d4
(1) 2020/FFFFFFFFFFFF0EE4 : 3404                		move.w	d4,d2
(1) 2021/FFFFFFFFFFFF0EE6 : EE4A                		lsr.w	#7,d2
(1) 2022/FFFFFFFFFFFF0EE8 : 0242 01E0           		andi.w	#$1E0,d2
(1) 2023/FFFFFFFFFFFF0EEC : D47C 0020           		add.w	#$20,d2
(1) 2024/FFFFFFFFFFFF0EF0 : 7000                		moveq	#0,d0
(1) 2025/FFFFFFFFFFFF0EF2 : 3004                		move.w	d4,d0
(1) 2026/FFFFFFFFFFFF0EF4 : 0240 0FFF           		andi.w	#$FFF,d0
(1) 2027/FFFFFFFFFFFF0EF8 : EB48                		lsl.w	#5,d0
(1) 2028/FFFFFFFFFFFF0EFA : D083                		add.l	d3,d0
(1) 2029/FFFFFFFFFFFF0EFC : 6100 F682           		bsr	Video_DmaMkEntry	; kills a6
(1) 2030/FFFFFFFFFFFF0F00 : D242                		add.w	d2,d1
(1) 2031/FFFFFFFFFFFF0F02 : 4844                		swap	d4
(1) 2032/FFFFFFFFFFFF0F04 : 51CC FFDA           		dbf	d4,.next_pz
(1) 2033/FFFFFFFFFFFF0F08 : 2C5F                		move.l	(sp)+,a6
(1) 2034/FFFFFFFFFFFF0F0A :                     .no_dma:
(1) 2035/FFFFFFFFFFFF0F0A : 4E75                		rts
(1) 2036/FFFFFFFFFFFF0F0C :                     
(1) 2037/FFFFFFFFFFFF0F0C :                     ; --------------------------------------------------------
(1) 2038/FFFFFFFFFFFF0F0C :                     ; object_MkSprPz
(1) 2039/FFFFFFFFFFFF0F0C :                     ;
(1) 2040/FFFFFFFFFFFF0F0C :                     ; Makes separate sprite pieces using
(1) 2041/FFFFFFFFFFFF0F0C :                     ;
(1) 2042/FFFFFFFFFFFF0F0C :                     ; Input:
(1) 2043/FFFFFFFFFFFF0F0C :                     ; d0 - X pos
(1) 2044/FFFFFFFFFFFF0F0C :                     ; d1 - Y pos
(1) 2045/FFFFFFFFFFFF0F0C :                     ; d2 - VRAM
(1) 2046/FFFFFFFFFFFF0F0C :                     ; d3 - Size
(1) 2047/FFFFFFFFFFFF0F0C :                     :
(1) 2048/FFFFFFFFFFFF0F0C :                     ; Uses:
(1) 2049/FFFFFFFFFFFF0F0C :                     ; a5,d7
(1) 2050/FFFFFFFFFFFF0F0C :                     ; --------------------------------------------------------
(1) 2051/FFFFFFFFFFFF0F0C :                     
(1) 2052/FFFFFFFFFFFF0F0C :                     object_MkSprPz:
(1) 2053/FFFFFFFFFFFF0F0C : 3E38 BDD8           		move.w	(RAM_SprDrwCntr).w,d7
(1) 2054/FFFFFFFFFFFF0F10 : BE7C 0050           		cmp.w	#80,d7
(1) 2055/FFFFFFFFFFFF0F14 : 6C22                		bge.s	.nope
(1) 2056/FFFFFFFFFFFF0F16 : E74F                		lsl.w	#3,d7
(1) 2057/FFFFFFFFFFFF0F18 : 4BF8 A914           		lea	(RAM_SprDrwPz).w,a5
(1) 2058/FFFFFFFFFFFF0F1C : DAC7                		adda	d7,a5
(1) 2059/FFFFFFFFFFFF0F1E : D07C 0080           		add.w	#$80,d0
(1) 2060/FFFFFFFFFFFF0F22 : D27C 0080           		add.w	#$80,d1
(1) 2061/FFFFFFFFFFFF0F26 : C67C 00FF           		and.w	#$FF,d3
(1) 2062/FFFFFFFFFFFF0F2A :                     ; 		lsl.w	#8,d3
(1) 2063/FFFFFFFFFFFF0F2A : 3AC1                		move.w	d1,(a5)+
(1) 2064/FFFFFFFFFFFF0F2C : 3AC3                		move.w	d3,(a5)+
(1) 2065/FFFFFFFFFFFF0F2E : 3AC2                		move.w	d2,(a5)+
(1) 2066/FFFFFFFFFFFF0F30 : 3AC0                		move.w	d0,(a5)+
(1) 2067/FFFFFFFFFFFF0F32 : 0678 0001 BDD8      		add.w	#1,(RAM_SprDrwCntr).w
(1) 2068/FFFFFFFFFFFF0F38 :                     .nope:
(1) 2069/FFFFFFFFFFFF0F38 : 4E75                		rts
(1) 2070/FFFFFFFFFFFF0F3A :                     
(1) 2071/FFFFFFFFFFFF0F3A :                     ; --------------------------------------------------------
(1) 2072/FFFFFFFFFFFF0F3A :                     ; object_Animate
(1) 2073/FFFFFFFFFFFF0F3A :                     ;
(1) 2074/FFFFFFFFFFFF0F3A :                     ; Animates the sprite
(1) 2075/FFFFFFFFFFFF0F3A :                     ;
(1) 2076/FFFFFFFFFFFF0F3A :                     ; Input
(1) 2077/FFFFFFFFFFFF0F3A :                     ; a0.l - Animation data
(1) 2078/FFFFFFFFFFFF0F3A :                     ;
(1) 2079/FFFFFFFFFFFF0F3A :                     ; Uses:
(1) 2080/FFFFFFFFFFFF0F3A :                     ; d2
(1) 2081/FFFFFFFFFFFF0F3A :                     ; --------------------------------------------------------
(1) 2082/FFFFFFFFFFFF0F3A :                     
(1) 2083/FFFFFFFFFFFF0F3A :                     object_Animate:
(1) 2084/FFFFFFFFFFFF0F3A : 7E00                		moveq	#0,d7
(1) 2085/FFFFFFFFFFFF0F3C : 1E2E 001D            		move.b	obj_anim_id+1(a6),d7
(1) 2086/FFFFFFFFFFFF0F40 : BE2E 001C            		cmp.b	obj_anim_id(a6),d7
(1) 2087/FFFFFFFFFFFF0F44 : 670E                 		beq.s	.sameThing
(1) 2088/FFFFFFFFFFFF0F46 : 1D6E 001C 001D       		move.b	obj_anim_id(a6),obj_anim_id+1(a6)
(1) 2089/FFFFFFFFFFFF0F4C : 426E 001A            		clr.w	obj_anim_indx(a6)
(1) 2090/FFFFFFFFFFFF0F50 : 422E 0020            		clr.b	obj_anim_spd(a6)
(1) 2091/FFFFFFFFFFFF0F54 :                     .sameThing:
(1) 2092/FFFFFFFFFFFF0F54 : 1E2E 001C            		move.b	obj_anim_id(a6),d7
(1) 2093/FFFFFFFFFFFF0F58 : 0C07 00FF            		cmpi.b	#-1,d7
(1) 2094/FFFFFFFFFFFF0F5C : 6748                 		beq.s	.return
(1) 2095/FFFFFFFFFFFF0F5E : DE47                 		add.w	d7,d7
(1) 2096/FFFFFFFFFFFF0F60 : 3E30 7000            		move.w	(a0,d7.w),d7
(1) 2097/FFFFFFFFFFFF0F64 : 41F0 7000            		lea	(a0,d7.w),a0
(1) 2098/FFFFFFFFFFFF0F68 : 3E18                 		move.w	(a0)+,d7
(1) 2099/FFFFFFFFFFFF0F6A : 0C47 FFFF            		cmpi.w	#-1,d7
(1) 2100/FFFFFFFFFFFF0F6E : 670C                 		beq.s	.keepspd
(1) 2101/FFFFFFFFFFFF0F70 : 042E 0001 0020       		subi.b	#1,obj_anim_spd(a6)
(1) 2102/FFFFFFFFFFFF0F76 : 6A2E                 		bpl.s	.return
(1) 2103/FFFFFFFFFFFF0F78 : 1D47 0020           		move.b	d7,obj_anim_spd(a6)
(1) 2104/FFFFFFFFFFFF0F7C :                     .keepspd:
(1) 2105/FFFFFFFFFFFF0F7C : 7C00                 		moveq	#0,d6
(1) 2106/FFFFFFFFFFFF0F7E : 3E2E 001A            		move.w	obj_anim_indx(a6),d7
(1) 2107/FFFFFFFFFFFF0F82 : DE47                 		add.w	d7,d7
(1) 2108/FFFFFFFFFFFF0F84 : 3C10                 		move.w	(a0),d6
(1) 2109/FFFFFFFFFFFF0F86 : D0C7                 		adda	d7,a0
(1) 2110/FFFFFFFFFFFF0F88 : 3A10                 		move.w	(a0),d5
(1) 2111/FFFFFFFFFFFF0F8A : 0C45 FFFF            		cmpi.w	#-1,d5
(1) 2112/FFFFFFFFFFFF0F8E : 6718                 		beq.s	.noAnim		; loop
(1) 2113/FFFFFFFFFFFF0F90 : 0C45 FFFE            		cmpi.w	#-2,d5
(1) 2114/FFFFFFFFFFFF0F94 : 672A                 		beq.s	.lastFrame	; finish
(1) 2115/FFFFFFFFFFFF0F96 : 0C45 FFFD            		cmpi.w	#-3,d5
(1) 2116/FFFFFFFFFFFF0F9A : 671A                 		beq.s	.goToFrame
(1) 2117/FFFFFFFFFFFF0F9C : 3D45 001E            		move.w	d5,obj_frame(a6)
(1) 2118/FFFFFFFFFFFF0FA0 : 066E 0001 001A       		add.w	#1,obj_anim_indx(a6)
(1) 2119/FFFFFFFFFFFF0FA6 :                     .return:
(1) 2120/FFFFFFFFFFFF0FA6 : 4E75                 		rts
(1) 2121/FFFFFFFFFFFF0FA8 :                     .noAnim:
(1) 2122/FFFFFFFFFFFF0FA8 : 3D7C 0001 001A       		move.w	#1,obj_anim_indx(a6)
(1) 2123/FFFFFFFFFFFF0FAE : 3A06                 		move.w	d6,d5
(1) 2124/FFFFFFFFFFFF0FB0 : 3D45 001E            		move.w	d5,obj_frame(a6)
(1) 2125/FFFFFFFFFFFF0FB4 : 4E75                		rts
(1) 2126/FFFFFFFFFFFF0FB6 :                     .goToFrame:
(1) 2127/FFFFFFFFFFFF0FB6 : 426E 001A           		clr.w	obj_anim_indx(a6)
(1) 2128/FFFFFFFFFFFF0FBA : 3D68 0002 001A      		move.w	2(a0),obj_anim_indx(a6)
(1) 2129/FFFFFFFFFFFF0FC0 :                     .lastFrame:
(1) 2130/FFFFFFFFFFFF0FC0 : 422E 0020            		clr.b	obj_anim_spd(a6)
(1) 2131/FFFFFFFFFFFF0FC4 : 4E75                		rts
(1) 2132/FFFFFFFFFFFF0FC6 :                     
(1) 2133/FFFFFFFFFFFF0FC6 :                     ; --------------------------------------------------------
(1) 2134/FFFFFFFFFFFF0FC6 :                     ; object_AnimReset
(1) 2135/FFFFFFFFFFFF0FC6 :                     ;
(1) 2136/FFFFFFFFFFFF0FC6 :                     ; Call this BEFORE using animation
(1) 2137/FFFFFFFFFFFF0FC6 :                     ;
(1) 2138/FFFFFFFFFFFF0FC6 :                     ; Input:
(1) 2139/FFFFFFFFFFFF0FC6 :                     ; a6 - Object
(1) 2140/FFFFFFFFFFFF0FC6 :                     ;
(1) 2141/FFFFFFFFFFFF0FC6 :                     ; Uses:
(1) 2142/FFFFFFFFFFFF0FC6 :                     ; d7
(1) 2143/FFFFFFFFFFFF0FC6 :                     ; --------------------------------------------------------
(1) 2144/FFFFFFFFFFFF0FC6 :                     
(1) 2145/FFFFFFFFFFFF0FC6 :                     object_AnimReset:
(1) 2146/FFFFFFFFFFFF0FC6 : 426E 001A            		clr.w	obj_anim_indx(a6)
(1) 2147/FFFFFFFFFFFF0FCA : 422E 0020            		clr.b	obj_anim_spd(a6)
(1) 2148/FFFFFFFFFFFF0FCE : 1D7C 0000 001D      		move.b	#0,obj_anim_id+1(a6)
(1) 2149/FFFFFFFFFFFF0FD4 : 4E75                		rts
(1) 2150/FFFFFFFFFFFF0FD6 :                     
(1) 2151/FFFFFFFFFFFF0FD6 :                     ; --------------------------------------------------------
(1) 2152/FFFFFFFFFFFF0FD6 :                     ; object_Speed
(1) 2153/FFFFFFFFFFFF0FD6 :                     ;
(1) 2154/FFFFFFFFFFFF0FD6 :                     ; Moves the object using speed variables
(1) 2155/FFFFFFFFFFFF0FD6 :                     ;
(1) 2156/FFFFFFFFFFFF0FD6 :                     ; Input:
(1) 2157/FFFFFFFFFFFF0FD6 :                     ; a6 - Object
(1) 2158/FFFFFFFFFFFF0FD6 :                     ;
(1) 2159/FFFFFFFFFFFF0FD6 :                     ; Uses:
(1) 2160/FFFFFFFFFFFF0FD6 :                     ; d7
(1) 2161/FFFFFFFFFFFF0FD6 :                     ; --------------------------------------------------------
(1) 2162/FFFFFFFFFFFF0FD6 :                     
(1) 2163/FFFFFFFFFFFF0FD6 :                     object_Speed:
(1) 2164/FFFFFFFFFFFF0FD6 : 7E00                		moveq	#0,d7
(1) 2165/FFFFFFFFFFFF0FD8 : 3E2E 0016           		move.w	obj_x_spd(a6),d7
(1) 2166/FFFFFFFFFFFF0FDC : 48C7                		ext.l	d7
(1) 2167/FFFFFFFFFFFF0FDE : E187                		asl.l	#8,d7
(1) 2168/FFFFFFFFFFFF0FE0 : DFAE 0004           		add.l	d7,obj_x(a6)
(1) 2169/FFFFFFFFFFFF0FE4 : 7E00                		moveq	#0,d7
(1) 2170/FFFFFFFFFFFF0FE6 : 3E2E 0018           		move.w	obj_y_spd(a6),d7
(1) 2171/FFFFFFFFFFFF0FEA : 48C7                		ext.l	d7
(1) 2172/FFFFFFFFFFFF0FEC : E187                		asl.l	#8,d7
(1) 2173/FFFFFFFFFFFF0FEE : DFAE 0008           		add.l	d7,obj_y(a6)
(1) 2174/FFFFFFFFFFFF0FF2 : 4E75                		rts
(1) 2175/FFFFFFFFFFFF0FF4 :                     
(1) 2176/FFFFFFFFFFFF0FF4 :                     ; ====================================================================
(1) 2177/FFFFFFFFFFFF0FF4 :                     ; ----------------------------------------------------------------
(1) 2178/FFFFFFFFFFFF0FF4 :                     ; 32X ONLY
(1) 2179/FFFFFFFFFFFF0FF4 :                     ; ----------------------------------------------------------------
(1) 2180/FFFFFFFFFFFF0FF4 :                     
(1) 2182/FFFFFFFFFFFF0FF4 :                     
(1) 2183/FFFFFFFFFFFF0FF4 :                     ; --------------------------------------------------------
(1) 2184/FFFFFFFFFFFF0FF4 :                     ; Video_MarsMap_Set
(1) 2185/FFFFFFFFFFFF0FF4 :                     ; --------------------------------------------------------
(1) 2186/FFFFFFFFFFFF0FF4 :                     
(1) 2187/FFFFFFFFFFFF0FF4 :                     Video_MarsMap_Set:
(1) 2188/FFFFFFFFFFFF0FF4 : 4DF8 CC04           		lea	(RAM_MdDreq+Dreq_ScrlBuff).w,a6
(1) 2189/FFFFFFFFFFFF0FF8 : 2C80                		move.l	d0,mscrl_Art(a6)
(1) 2190/FFFFFFFFFFFF0FFA : 42AE 0004           		clr.l	mscrl_Xpos(a6)
(1) 2191/FFFFFFFFFFFF0FFE : 42AE 0008           		clr.l	mscrl_Ypos(a6)
(1) 2192/FFFFFFFFFFFF1002 : 3D41 0004           		move.w	d1,mscrl_Xpos(a6)
(1) 2193/FFFFFFFFFFFF1006 : 3D42 0008           		move.w	d2,mscrl_Ypos(a6)
(1) 2194/FFFFFFFFFFFF100A :                     
(1) 2195/FFFFFFFFFFFF100A :                     ; Video_MarsMap_Redraw:
(1) 2196/FFFFFFFFFFFF100A :                     ; 		move.w	#1,(RAM_MdMars_DrawAll).w
(1) 2197/FFFFFFFFFFFF100A : 4E75                		rts
(1) 2198/FFFFFFFFFFFF100C :                     
(1) 2199/FFFFFFFFFFFF100C :                     ; --------------------------------------------------------
(1) 2200/FFFFFFFFFFFF100C :                     ; Video_MarsMap_Load
(1) 2201/FFFFFFFFFFFF100C :                     ;
(1) 2202/FFFFFFFFFFFF100C :                     ; Input:
(1) 2203/FFFFFFFFFFFF100C :                     ; a0   | Map data
(1) 2204/FFFFFFFFFFFF100C :                     ; d0.w | X block pos
(1) 2205/FFFFFFFFFFFF100C :                     ; d1.w | Y block pos
(1) 2206/FFFFFFFFFFFF100C :                     ; d2.w | X block size
(1) 2207/FFFFFFFFFFFF100C :                     ; d3.w | Y block size
(1) 2208/FFFFFFFFFFFF100C :                     ; d4.w | Starting color index
(1) 2209/FFFFFFFFFFFF100C :                     ;
(1) 2210/FFFFFFFFFFFF100C :                     ; Uses:
(1) 2211/FFFFFFFFFFFF100C :                     ; d5-d7/a2-a5
(1) 2212/FFFFFFFFFFFF100C :                     ; --------------------------------------------------------
(1) 2213/FFFFFFFFFFFF100C :                     
(1) 2214/FFFFFFFFFFFF100C :                     Video_MarsMap_Load:
(1) 2215/FFFFFFFFFFFF100C : 4BF8 C804           		lea	(RAM_MdDreq+Dreq_ScrlData).w,a5
(1) 2216/FFFFFFFFFFFF1010 : 7C00                		moveq	#0,d6
(1) 2217/FFFFFFFFFFFF1012 : 3C01                		move.w	d1,d6
(1) 2218/FFFFFFFFFFFF1014 : EF4E                		lsl.w	#7,d6	; Manual Y size
(1) 2219/FFFFFFFFFFFF1016 : DBC6                		add.l	d6,a5
(1) 2220/FFFFFFFFFFFF1018 : 3C00                		move.w	d0,d6
(1) 2221/FFFFFFFFFFFF101A : DC46                		add.w	d6,d6
(1) 2222/FFFFFFFFFFFF101C : DAC6                		adda	d6,a5
(1) 2223/FFFFFFFFFFFF101E :                     
(1) 2224/FFFFFFFFFFFF101E : 2448                		move.l	a0,a2
(1) 2225/FFFFFFFFFFFF1020 : 3A04                		move.w	d4,d5
(1) 2226/FFFFFFFFFFFF1022 : 0245 00F8           		andi.w	#$F8,d5
(1) 2227/FFFFFFFFFFFF1026 : E14D                		lsl.w	#8,d5
(1) 2228/FFFFFFFFFFFF1028 : 3E03                		move.w	d3,d7
(1) 2229/FFFFFFFFFFFF102A : 5347                		subq.w	#1,d7
(1) 2230/FFFFFFFFFFFF102C :                     .copy_y:
(1) 2231/FFFFFFFFFFFF102C : 4847                		swap	d7
(1) 2232/FFFFFFFFFFFF102E : 4846                		swap	d6
(1) 2233/FFFFFFFFFFFF1030 : 264A                		move.l	a2,a3
(1) 2234/FFFFFFFFFFFF1032 : 284D                		move.l	a5,a4
(1) 2235/FFFFFFFFFFFF1034 : 3E02                		move.w	d2,d7
(1) 2236/FFFFFFFFFFFF1036 : 5347                		subq.w	#1,d7
(1) 2237/FFFFFFFFFFFF1038 :                     .copy_x:
(1) 2238/FFFFFFFFFFFF1038 : 3C1B                		move.w	(a3)+,d6
(1) 2239/FFFFFFFFFFFF103A : 0246 07FF           		andi.w	#$7FF,d6
(1) 2240/FFFFFFFFFFFF103E : DC45                		add.w	d5,d6
(1) 2241/FFFFFFFFFFFF1040 : 38C6                		move.w	d6,(a4)+
(1) 2242/FFFFFFFFFFFF1042 : 51CF FFF4           		dbf	d7,.copy_x
(1) 2243/FFFFFFFFFFFF1046 :                     
(1) 2244/FFFFFFFFFFFF1046 : 3C3C 0020           		move.w	#512/16,d6
(1) 2245/FFFFFFFFFFFF104A :                     ; 		move.l	a3,a0
(1) 2246/FFFFFFFFFFFF104A : 3E02                		move.w	d2,d7
(1) 2247/FFFFFFFFFFFF104C : DE47                		add.w	d7,d7
(1) 2248/FFFFFFFFFFFF104E : D4C7                		adda	d7,a2
(1) 2249/FFFFFFFFFFFF1050 : 3E06                		move.w	d6,d7
(1) 2250/FFFFFFFFFFFF1052 : DE47                		add.w	d7,d7
(1) 2251/FFFFFFFFFFFF1054 : DAC7                		adda	d7,a5
(1) 2252/FFFFFFFFFFFF1056 :                     
(1) 2253/FFFFFFFFFFFF1056 : 4846                		swap	d6
(1) 2254/FFFFFFFFFFFF1058 : 4847                		swap	d7
(1) 2255/FFFFFFFFFFFF105A : 51CF FFD0           		dbf	d7,.copy_y
(1) 2256/FFFFFFFFFFFF105E : 4E75                		rts
(1) 2257/FFFFFFFFFFFF1060 :                     
(1) 2258/FFFFFFFFFFFF1060 :                     ; --------------------------------------------------------
(1) 2259/FFFFFFFFFFFF1060 :                     ; Video_MarsMap_Render
(1) 2260/FFFFFFFFFFFF1060 :                     ;
(1) 2261/FFFFFFFFFFFF1060 :                     ; Put this on your screen loop.
(1) 2262/FFFFFFFFFFFF1060 :                     ;
(1) 2263/FFFFFFFFFFFF1060 :                     ; Uses:
(1) 2264/FFFFFFFFFFFF1060 :                     ; d7/a5-a6
(1) 2265/FFFFFFFFFFFF1060 :                     ; --------------------------------------------------------
(1) 2266/FFFFFFFFFFFF1060 :                     
(1) 2267/FFFFFFFFFFFF1060 :                     ; Video_MarsMap_Render:
(1) 2268/FFFFFFFFFFFF1060 :                     ; 		tst.w	(RAM_MdMars_DrawAll).w
(1) 2269/FFFFFFFFFFFF1060 :                     ; 		beq.s	.dont_rdraw
(1) 2270/FFFFFFFFFFFF1060 :                     ; 		bsr	System_MarsUpdate
(1) 2271/FFFFFFFFFFFF1060 :                     ; 		bsr	Video_Mars_SyncFrame
(1) 2272/FFFFFFFFFFFF1060 :                     ; 		bset	#3,(sysmars_reg+comm12).l
(1) 2273/FFFFFFFFFFFF1060 :                     ; .wait_draw:	btst	#3,(sysmars_reg+comm12).l
(1) 2274/FFFFFFFFFFFF1060 :                     ; 		bne.s	.wait_draw
(1) 2275/FFFFFFFFFFFF1060 :                     ; 		bset	#3,(sysmars_reg+comm12).l
(1) 2276/FFFFFFFFFFFF1060 :                     ; .wait_draw2:	btst	#3,(sysmars_reg+comm12).l
(1) 2277/FFFFFFFFFFFF1060 :                     ; 		bne.s	.wait_draw2
(1) 2278/FFFFFFFFFFFF1060 :                     ; 		subq.w	#1,(RAM_MdMars_DrawAll).w
(1) 2279/FFFFFFFFFFFF1060 :                     ; .dont_rdraw:
(1) 2280/FFFFFFFFFFFF1060 :                     ; 		rts
(1) 2281/FFFFFFFFFFFF1060 :                     
(1) 2282/FFFFFFFFFFFF1060 :                     ; --------------------------------------------------------
(1) 2283/FFFFFFFFFFFF1060 :                     
(1) 2285/FFFFFFFFFFFF1060 :                     
     203/FFFFFFFFFFFF1060 :                     		include	"system/md/system.asm"
(1)    1/FFFFFFFFFFFF1060 :                     ; ====================================================================
(1)    2/FFFFFFFFFFFF1060 :                     ; ----------------------------------------------------------------
(1)    3/FFFFFFFFFFFF1060 :                     ; Genesis system routines, and some SegaCD and 32X routines.
(1)    4/FFFFFFFFFFFF1060 :                     ;
(1)    5/FFFFFFFFFFFF1060 :                     ; * CAN BE RECYCLED FOR SEGA PICO, ONLY IGNORE Z80 ACCESS OR
(1)    6/FFFFFFFFFFFF1060 :                     ; THE CONTROL ROUTINE **
(1)    7/FFFFFFFFFFFF1060 :                     ; ----------------------------------------------------------------
(1)    8/FFFFFFFFFFFF1060 :                     
(1)    9/FFFFFFFFFFFF1060 :                     ; ====================================================================
(1)   10/FFFFFFFFFFFF1060 :                     ; ----------------------------------------------------------------
(1)   11/FFFFFFFFFFFF1060 :                     ; Settings
(1)   12/FFFFFFFFFFFF1060 :                     ; ----------------------------------------------------------------
(1)   13/FFFFFFFFFFFF1060 :                     
(1)   14/FFFFFFFFFFFF1060 : =$400                MAX_SRAMSIZE	equ $400
(1)   15/FFFFFFFFFFFF1060 :                     
(1)   16/FFFFFFFFFFFF1060 :                     ; ====================================================================
(1)   17/FFFFFFFFFFFF1060 :                     ; ----------------------------------------------------------------
(1)   18/FFFFFFFFFFFF1060 :                     ; Variables
(1)   19/FFFFFFFFFFFF1060 :                     ; ----------------------------------------------------------------
(1)   20/FFFFFFFFFFFF1060 :                     
(1)   21/FFFFFFFFFFFF1060 :                     ; Controller buffer data, MUST call System_Input on VBlank.
(1)   22/FFFFFFFFFFFF1060 :                     ;
(1)   23/FFFFFFFFFFFF1060 :                     ; Type/Revision byte:
(1)   24/FFFFFFFFFFFF1060 :                     ;
(1)   25/FFFFFFFFFFFF1060 :                     ; ID    |
(1)   26/FFFFFFFFFFFF1060 :                     ; $0D   | $00 - Original 3 button
(1)   27/FFFFFFFFFFFF1060 :                     ;       | $01 - 6 button version: XYZM
(1)   28/FFFFFFFFFFFF1060 :                     
(1)   29/FFFFFFFFFFFF1060 :                     ; Read WORD in +on_hold or +on_press
(1)   30/FFFFFFFFFFFF1060 : =$1                  JoyUp		equ $0001
(1)   31/FFFFFFFFFFFF1060 : =$2                  JoyDown		equ $0002
(1)   32/FFFFFFFFFFFF1060 : =$4                  JoyLeft		equ $0004
(1)   33/FFFFFFFFFFFF1060 : =$8                  JoyRight	equ $0008
(1)   34/FFFFFFFFFFFF1060 : =$10                 JoyB		equ $0010
(1)   35/FFFFFFFFFFFF1060 : =$20                 JoyC		equ $0020
(1)   36/FFFFFFFFFFFF1060 : =$40                 JoyA		equ $0040
(1)   37/FFFFFFFFFFFF1060 : =$80                 JoyStart	equ $0080
(1)   38/FFFFFFFFFFFF1060 : =$100                JoyZ		equ $0100
(1)   39/FFFFFFFFFFFF1060 : =$200                JoyY		equ $0200
(1)   40/FFFFFFFFFFFF1060 : =$400                JoyX		equ $0400
(1)   41/FFFFFFFFFFFF1060 : =$800                JoyMode		equ $0800
(1)   42/FFFFFFFFFFFF1060 : =$0                  bitJoyUp	equ 0		; READ THESE AS A WORD
(1)   43/FFFFFFFFFFFF1060 : =$1                  bitJoyDown	equ 1
(1)   44/FFFFFFFFFFFF1060 : =$2                  bitJoyLeft	equ 2
(1)   45/FFFFFFFFFFFF1060 : =$3                  bitJoyRight	equ 3
(1)   46/FFFFFFFFFFFF1060 : =$4                  bitJoyB		equ 4
(1)   47/FFFFFFFFFFFF1060 : =$5                  bitJoyC		equ 5
(1)   48/FFFFFFFFFFFF1060 : =$6                  bitJoyA		equ 6
(1)   49/FFFFFFFFFFFF1060 : =$7                  bitJoyStart	equ 7
(1)   50/FFFFFFFFFFFF1060 : =$8                  bitJoyZ		equ 8
(1)   51/FFFFFFFFFFFF1060 : =$9                  bitJoyY		equ 9
(1)   52/FFFFFFFFFFFF1060 : =$A                  bitJoyX		equ 10
(1)   53/FFFFFFFFFFFF1060 : =$B                  bitJoyMode	equ 11
(1)   54/FFFFFFFFFFFF1060 :                     
(1)   55/FFFFFFFFFFFF1060 :                     ; Mega Mouse
(1)   56/FFFFFFFFFFFF1060 :                     ; Read WORD as +on_hold or +on_press
(1)   57/FFFFFFFFFFFF1060 : =$1                  ClickR		equ $0001
(1)   58/FFFFFFFFFFFF1060 : =$2                  ClickL		equ $0002
(1)   59/FFFFFFFFFFFF1060 : =$4                  ClickM		equ $0004	; US MOUSE ONLY
(1)   60/FFFFFFFFFFFF1060 : =$8                  ClickS		equ $0008	; (Untested)
(1)   61/FFFFFFFFFFFF1060 : =$0                  bitClickL	equ 0
(1)   62/FFFFFFFFFFFF1060 : =$1                  bitClickR	equ 1
(1)   63/FFFFFFFFFFFF1060 : =$2                  bitClickM	equ 2
(1)   64/FFFFFFFFFFFF1060 : =$3                  bitClickS	equ 3
(1)   65/FFFFFFFFFFFF1060 :                     
(1)   66/FFFFFFFFFFFF1060 :                     ; Controller_1 / Controller_2
(1)   67/FFFFFFFFFFFF1060 : (MACRO)              		strct 0
(1)   67/FFFFFFFFFFFF1060 : =$FFFFFFFFFFFF1060   GLBL_LASTPC     set *
(1)   67/FFFFFFFFFFFFADE0 :                                     dephase
(1)   67/       0 :                                     phase 0
(1)   67/       0 : =$0                  GLBL_LASTORG    set *
(1)   68/       0 :                     pad_id		ds.b 1			; Controller ID
(1)   69/       1 :                     pad_ver		ds.b 1			; Controller type/revision
(1)   70/       2 :                     on_hold		ds.w 1			; User HOLD bits
(1)   71/       4 :                     on_press	ds.w 1			; User PRESSED bits
(1)   72/       6 :                     on_release	ds.w 1			; (RESERVED)
(1)   73/       8 :                     mouse_x		ds.w 1			; Mouse/Pen X position or speed
(1)   74/       A :                     mouse_y		ds.w 1			; Mouse/pen Y position or speed
(1)   75/       C :                     ext_3		ds.w 1
(1)   76/       E :                     ext_4		ds.w 1
(1)   77/      10 :                     sizeof_input	ds.l 0
(1)   78/      10 : (MACRO)              		endstrct
(1)   78/       0 :                                     org GLBL_LASTORG
(1)   78/FFFFFFFFFFFF1060 :                                     phase GLBL_LASTPC
(1)   79/FFFFFFFFFFFF1060 :                     
(1)   80/FFFFFFFFFFFF1060 :                     ; ====================================================================
(1)   81/FFFFFFFFFFFF1060 :                     ; ----------------------------------------------------------------
(1)   82/FFFFFFFFFFFF1060 :                     ; RAM section
(1)   83/FFFFFFFFFFFF1060 :                     ; ----------------------------------------------------------------
(1)   84/FFFFFFFFFFFF1060 :                     
(1)   85/FFFFFFFFFFFF1060 : (MACRO)              		strct RAM_MdSystem
(1)   85/FFFFFFFFFFFF1060 : =$FFFFFFFFFFFF1060   GLBL_LASTPC     set *
(1)   85/       0 :                                     dephase
(1)   85/FFFFFFFFFFFFC004 :                                     phase RAM_MDSYSTEM
(1)   85/FFFFFFFFFFFFC004 : =$FFFFFFFFFFFFC004   GLBL_LASTORG    set *
(1)   86/FFFFFFFFFFFFC004 :                     RAM_InputData	ds.b sizeof_input*4		; Input data section
(1)   87/FFFFFFFFFFFFC044 :                     RAM_SaveData	ds.b MAX_SRAMSIZE		; Read/Write of the SAVE data
(1)   88/FFFFFFFFFFFFC444 :                     RAM_SysRandVal	ds.l 1				; Random value
(1)   89/FFFFFFFFFFFFC448 :                     RAM_SysRandSeed	ds.l 1				; Randomness seed
(1)   90/FFFFFFFFFFFFC44C :                     RAM_MdMarsVInt	ds.w 3				; VBlank jump (JMP xxxx xxxx)
(1)   91/FFFFFFFFFFFFC452 :                     RAM_MdMarsHint	ds.w 3				; HBlank jump (JMP xxxx xxxx)
(1)   92/FFFFFFFFFFFFC458 :                     RAM_ScreenMode	ds.w 1
(1)   93/FFFFFFFFFFFFC45A :                     sizeof_mdsys	ds.l 0
(1)   94/FFFFFFFFFFFFC460 : (MACRO)              		endstrct
(1)   94/FFFFFFFFFFFFC004 :                                     org GLBL_LASTORG
(1)   94/FFFFFFFFFFFF1060 :                                     phase GLBL_LASTPC
(1)   95/FFFFFFFFFFFF1060 : (MACRO)              		erreport "MD SYSTEM RAM",sizeof_mdsys-RAM_MdSystem,MAX_MdSystem
(1)   96/FFFFFFFFFFFF1060 :                     
(1)   97/FFFFFFFFFFFF1060 :                     ; ====================================================================
(1)   98/FFFFFFFFFFFF1060 :                     ; ----------------------------------------------------------------
(1)   99/FFFFFFFFFFFF1060 :                     ; Alias labels
(1)  100/FFFFFFFFFFFF1060 :                     ; ----------------------------------------------------------------
(1)  101/FFFFFFFFFFFF1060 :                     
(1)  102/FFFFFFFFFFFF1060 : =$FFFFFFFFFFFFC004   Controller_1	equ RAM_InputData
(1)  103/FFFFFFFFFFFF1060 : =$FFFFFFFFFFFFC014   Controller_2	equ RAM_InputData+sizeof_input
(1)  104/FFFFFFFFFFFF1060 :                     
(1)  105/FFFFFFFFFFFF1060 :                     ; ====================================================================
(1)  106/FFFFFFFFFFFF1060 :                     ; --------------------------------------------------------
(1)  107/FFFFFFFFFFFF1060 :                     ; Init System
(1)  108/FFFFFFFFFFFF1060 :                     ; 
(1)  109/FFFFFFFFFFFF1060 :                     ; Uses:
(1)  110/FFFFFFFFFFFF1060 :                     ; a0-a2,d0-d1
(1)  111/FFFFFFFFFFFF1060 :                     ; --------------------------------------------------------
(1)  112/FFFFFFFFFFFF1060 :                     
(1)  113/FFFFFFFFFFFF1060 :                     System_Init:
(1)  114/FFFFFFFFFFFF1060 : 007C 0700           		or.w	#$0700,sr
(1)  116/FFFFFFFFFFFF1064 : 33FC 0100 00A1      		move.w	#$0100,(z80_bus).l	; Stop Z80
         FFFFFFFFFFFF106A : 1100             
(1)  117/FFFFFFFFFFFF106C :                     .wait:
(1)  118/FFFFFFFFFFFF106C : 0839 0000 00A1      		btst	#0,(z80_bus).l		; Wait for it
         FFFFFFFFFFFF1072 : 1100             
(1)  119/FFFFFFFFFFFF1074 : 66F6                		bne.s	.wait
(1)  120/FFFFFFFFFFFF1076 : 7040                		moveq	#%01000000,d0		; Init ports, TH=1
(1)  121/FFFFFFFFFFFF1078 : 13C0 00A1 0009      		move.b	d0,(sys_ctrl_1).l	; Controller 1
(1)  122/FFFFFFFFFFFF107E : 13C0 00A1 000B      		move.b	d0,(sys_ctrl_2).l	; Controller 2
(1)  123/FFFFFFFFFFFF1084 : 13C0 00A1 000D      		move.b	d0,(sys_ctrl_3).l	; Modem
(1)  124/FFFFFFFFFFFF108A : 33FC 0000 00A1      		move.w	#0,(z80_bus).l		; Enable Z80
         FFFFFFFFFFFF1090 : 1100             
(1)  126/FFFFFFFFFFFF1092 : 303C 4EF9           		move.w	#$4EF9,d0		; Set JMP opcode for the Hblank/VBlank jumps
(1)  127/FFFFFFFFFFFF1096 : 31C0 C44C            		move.w	d0,(RAM_MdMarsVInt).w
(1)  128/FFFFFFFFFFFF109A : 31C0 C452           		move.w	d0,(RAM_MdMarsHInt).w
(1)  129/FFFFFFFFFFFF109E : 203C FFFF 15B0      		move.l	#VInt_Default,d0	; Set default ints
(1)  130/FFFFFFFFFFFF10A4 : 223C FFFF 15C6      		move.l	#Hint_Default,d1
(1)  131/FFFFFFFFFFFF10AA : 6100 03A0           		bsr	System_SetInts
(1)  132/FFFFFFFFFFFF10AE : 41F8 C004           		lea	(RAM_InputData),a0	; Clear input data buffer
(1)  133/FFFFFFFFFFFF10B2 : 323C 0007           		move.w	#(sizeof_input/2)-1,d1
(1)  134/FFFFFFFFFFFF10B6 : 7000                		moveq	#0,d0
(1)  135/FFFFFFFFFFFF10B8 :                     .clrinput:
(1)  136/FFFFFFFFFFFF10B8 : 30C0                		move.w	d0,(a0)+
(1)  137/FFFFFFFFFFFF10BA : 51C9 FFFC           		dbf	d1,.clrinput
(1)  138/FFFFFFFFFFFF10BE : 203C 5625 5769      		move.l	#$56255769,d0		; Set these random values
(1)  139/FFFFFFFFFFFF10C4 : 223C 9511 6102      		move.l	#$95116102,d1
(1)  140/FFFFFFFFFFFF10CA : 23C0 FFFF C444      		move.l	d0,(RAM_SysRandVal).l
(1)  141/FFFFFFFFFFFF10D0 : 23C1 FFFF C448      		move.l	d1,(RAM_SysRandSeed).l
(1)  145/FFFFFFFFFFFF10D6 : 027C F8FF           		andi.w	#$F8FF,sr
(1)  146/FFFFFFFFFFFF10DA : 6000 0382           		bra	System_SramInit
(1)  147/FFFFFFFFFFFF10DE :                     
(1)  148/FFFFFFFFFFFF10DE :                     ; --------------------------------------------------------
(1)  149/FFFFFFFFFFFF10DE :                     ; System_Render
(1)  150/FFFFFFFFFFFF10DE :                     ;
(1)  151/FFFFFFFFFFFF10DE :                     ; Call this on the loop your current screen.
(1)  152/FFFFFFFFFFFF10DE :                     ; ** VDP DISPLAY MUST BE ON TO USE THIS **
(1)  153/FFFFFFFFFFFF10DE :                     ;
(1)  154/FFFFFFFFFFFF10DE :                     ; This will:
(1)  155/FFFFFFFFFFFF10DE :                     ; - Update the sound driver for any changes that
(1)  156/FFFFFFFFFFFF10DE :                     ;   need communication with 68K
(1)  157/FFFFFFFFFFFF10DE :                     ; - Build the object sprites
(1)  158/FFFFFFFFFFFF10DE :                     ; - 32X/CD32X:
(1)  159/FFFFFFFFFFFF10DE :                     ;   Update the DREQ data
(1)  160/FFFFFFFFFFFF10DE :                     ;
(1)  161/FFFFFFFFFFFF10DE :                     ; On VBLANK:
(1)  162/FFFFFFFFFFFF10DE :                     ; - Update the input data
(1)  163/FFFFFFFFFFFF10DE :                     ; - Transfer the Genesis palette, sprites and scroll
(1)  164/FFFFFFFFFFFF10DE :                     ;   data from from RAM to VDP
(1)  165/FFFFFFFFFFFF10DE :                     ;   (32X: RV bit is not required.)
(1)  166/FFFFFFFFFFFF10DE :                     ; - Process the DMA BLAST list (32X: Uses RV bit)
(1)  167/FFFFFFFFFFFF10DE :                     ; --------------------------------------------------------
(1)  168/FFFFFFFFFFFF10DE :                     
(1)  169/FFFFFFFFFFFF10DE :                     System_Render:
(1)  170/FFFFFFFFFFFF10DE : 1E38 BDF7           		move.b	(RAM_VdpRegs+1).w,d7
(1)  171/FFFFFFFFFFFF10E2 : 0807 0006           		btst	#bitDispEnbl,d7
(1)  172/FFFFFFFFFFFF10E6 : 673E                		beq.s	.forgot_disp		; <-- Failsafe
(1)  173/FFFFFFFFFFFF10E8 :                     .wait_lag:
(1)  174/FFFFFFFFFFFF10E8 : 6100 EF88           		bsr	Sound_Update		; Syncronize/Update sound on lag
(1)  175/FFFFFFFFFFFF10EC : 3E39 00C0 0004      		move.w	(vdp_ctrl).l,d7		; Got here during VBlank?
(1)  176/FFFFFFFFFFFF10F2 : 0807 0003           		btst	#bitVBlk,d7		; If yes, drop frame
(1)  177/FFFFFFFFFFFF10F6 : 66F0                		bne.s	.wait_lag
(1)  178/FFFFFFFFFFFF10F8 : 6100 EF78           		bsr	Sound_Update
(1)  179/FFFFFFFFFFFF10FC : 6100 FC7C           		bsr	Objects_Show		; Build sprite data from Objects
(1)  180/FFFFFFFFFFFF1100 :                     .wait_in:
(1)  181/FFFFFFFFFFFF1100 : 6100 EF70           		bsr	Sound_Update		; Syncronize/Update sound during Display
(1)  182/FFFFFFFFFFFF1104 : 3E39 00C0 0004      		move.w	(vdp_ctrl).l,d7		; Wait until VBlank
(1)  183/FFFFFFFFFFFF110A : 0807 0003           		btst	#bitVBlk,d7
(1)  184/FFFFFFFFFFFF110E : 67F0                		beq.s	.wait_in
(1)  185/FFFFFFFFFFFF1110 : 6126                		bsr	System_Input		; Read input data FIRST
(1)  186/FFFFFFFFFFFF1112 : 6100 F6C8           		bsr	Video_Render		; Render visuals
(1)  187/FFFFFFFFFFFF1116 : 6100 EF5A           		bsr	Sound_Update
(1)  188/FFFFFFFFFFFF111A : 52B8 BDD4           		addq.l	#1,(RAM_Framecount).w
(1)  190/FFFFFFFFFFFF111E : 6100 04E0           		bsr	System_MarsUpdate	; 32X/CD32X: Send DREQ changes
(1)  192/FFFFFFFFFFFF1122 : 6100 EF4E           		bsr	Sound_Update
(1)  193/FFFFFFFFFFFF1126 :                     .forgot_disp:
(1)  194/FFFFFFFFFFFF1126 : 4E75                		rts
(1)  195/FFFFFFFFFFFF1128 :                     
(1)  196/FFFFFFFFFFFF1128 :                     ; --------------------------------------------------------
(1)  197/FFFFFFFFFFFF1128 :                     ; System_DmaEnter_(from) and System_DmaEnter_(from)
(1)  198/FFFFFFFFFFFF1128 :                     ; ROM or RAM
(1)  199/FFFFFFFFFFFF1128 :                     ;
(1)  200/FFFFFFFFFFFF1128 :                     ; Call to these labels BEFORE and AFTER doing
(1)  201/FFFFFFFFFFFF1128 :                     ; DMA-to-VDP transers, these calls are NOT
(1)  202/FFFFFFFFFFFF1128 :                     ; required for FILL or COPY
(1)  203/FFFFFFFFFFFF1128 :                     ;
(1)  204/FFFFFFFFFFFF1128 :                     ; This is where you put your Sound driver's Z80 stop
(1)  205/FFFFFFFFFFFF1128 :                     ; or pause calls go here.
(1)  206/FFFFFFFFFFFF1128 :                     ; --------------------------------------------------------
(1)  207/FFFFFFFFFFFF1128 :                     
(1)  208/FFFFFFFFFFFF1128 :                     System_DmaEnter_RAM:
(1)  209/FFFFFFFFFFFF1128 : 6000 F020           		bra	gemaDmaPause
(1)  210/FFFFFFFFFFFF112C :                     System_DmaExit_RAM:
(1)  211/FFFFFFFFFFFF112C : 6000 F03E           		bra	gemaDmaResume
(1)  212/FFFFFFFFFFFF1130 :                     
(1)  213/FFFFFFFFFFFF1130 :                     ; --------------------------------------------------------
(1)  214/FFFFFFFFFFFF1130 :                     
(1)  215/FFFFFFFFFFFF1130 :                     System_DmaEnter_ROM:
(1)  216/FFFFFFFFFFFF1130 : 6000 F054           		bra	gemaDmaPauseRom
(1)  217/FFFFFFFFFFFF1134 :                     System_DmaExit_ROM:
(1)  218/FFFFFFFFFFFF1134 : 6000 F07A           		bra	gemaDmaResumeRom
(1)  219/FFFFFFFFFFFF1138 :                     
(1)  220/FFFFFFFFFFFF1138 :                     ; ====================================================================
(1)  221/FFFFFFFFFFFF1138 :                     ; ----------------------------------------------------------------
(1)  222/FFFFFFFFFFFF1138 :                     ; Subroutines
(1)  223/FFFFFFFFFFFF1138 :                     ; ----------------------------------------------------------------
(1)  224/FFFFFFFFFFFF1138 :                     
(1)  225/FFFFFFFFFFFF1138 :                     ; --------------------------------------------------------
(1)  226/FFFFFFFFFFFF1138 :                     ; System_Input
(1)  227/FFFFFFFFFFFF1138 :                     ;
(1)  228/FFFFFFFFFFFF1138 :                     ; Reads data from the Controller ports
(1)  229/FFFFFFFFFFFF1138 :                     ; *** CALL THIS ON VBLANK ONLY ***
(1)  230/FFFFFFFFFFFF1138 :                     ;
(1)  231/FFFFFFFFFFFF1138 :                     ; Uses:
(1)  232/FFFFFFFFFFFF1138 :                     ; d5-d7,a5-a6
(1)  233/FFFFFFFFFFFF1138 :                     ; --------------------------------------------------------
(1)  234/FFFFFFFFFFFF1138 :                     
(1)  235/FFFFFFFFFFFF1138 :                     System_Input:
(1)  236/FFFFFFFFFFFF1138 :                     
(1)  237/FFFFFFFFFFFF1138 :                     	; ----------------------------------------
(1)  238/FFFFFFFFFFFF1138 :                     	; PICO input is hard-coded to Controller_1
(1)  239/FFFFFFFFFFFF1138 :                     	;
(1)  240/FFFFFFFFFFFF1138 :                     	; on_hold/on_press:
(1)  241/FFFFFFFFFFFF1138 :                     	; %P00BRLDU
(1)  242/FFFFFFFFFFFF1138 :                     	; UDLR - Arrows
(1)  243/FFFFFFFFFFFF1138 :                     	;    B - BIG button red
(1)  244/FFFFFFFFFFFF1138 :                     	;    P - Pen press/click
(1)  245/FFFFFFFFFFFF1138 :                     	;
(1)  246/FFFFFFFFFFFF1138 :                     	; mouse_x/mouse_y:
(1)  247/FFFFFFFFFFFF1138 :                     	; Pen X/Y position
(1)  248/FFFFFFFFFFFF1138 :                     	; depen
(1)  249/FFFFFFFFFFFF1138 :                     	; ----------------------------------------
(1)  296/FFFFFFFFFFFF1138 :                     	; ----------------------------------------
(1)  297/FFFFFFFFFFFF1138 :                     	; Normal controls
(1)  298/FFFFFFFFFFFF1138 : 4DF8 C004           		lea	(RAM_InputData).w,a6	; a6 - Output
(1)  299/FFFFFFFFFFFF113C : 4BF9 00A1 0003      		lea	(sys_data_1),a5		; a5 - BASE Genesis Input regs area
(1)  300/FFFFFFFFFFFF1142 : 6108                		bsr.s	.this_one
(1)  301/FFFFFFFFFFFF1144 : DAFC 0002           		adda	#2,a5
(1)  302/FFFFFFFFFFFF1148 : DCFC 0010           		adda	#sizeof_input,a6
(1)  303/FFFFFFFFFFFF114C :                     
(1)  304/FFFFFFFFFFFF114C :                     ; --------------------------------------------------------
(1)  305/FFFFFFFFFFFF114C :                     ; Read port
(1)  306/FFFFFFFFFFFF114C :                     ;
(1)  307/FFFFFFFFFFFF114C :                     ; a5 - Current port
(1)  308/FFFFFFFFFFFF114C :                     ; a6 - Output data
(1)  309/FFFFFFFFFFFF114C :                     ; --------------------------------------------------------
(1)  310/FFFFFFFFFFFF114C :                     
(1)  311/FFFFFFFFFFFF114C :                     .this_one:
(1)  312/FFFFFFFFFFFF114C : 6100 0166           		bsr	.pick_id
(1)  313/FFFFFFFFFFFF1150 : 1C87                		move.b	d7,pad_id(a6)
(1)  314/FFFFFFFFFFFF1152 : 0C47 000F           		cmpi.w	#$0F,d7
(1)  315/FFFFFFFFFFFF1156 : 670E                		beq.s	.exit
(1)  316/FFFFFFFFFFFF1158 : 0247 000F           		andi.w	#$0F,d7
(1)  317/FFFFFFFFFFFF115C : DE47                		add.w	d7,d7
(1)  318/FFFFFFFFFFFF115E : 3C3B 700C           		move.w	.list(pc,d7.w),d6
(1)  319/FFFFFFFFFFFF1162 : 4EFB 6008           		jmp	.list(pc,d6.w)
(1)  320/FFFFFFFFFFFF1166 :                     .exit:
(1)  321/FFFFFFFFFFFF1166 : 422E 0001           		clr.b	pad_ver(a6)
(1)  322/FFFFFFFFFFFF116A : 4E75                		rts
(1)  323/FFFFFFFFFFFF116C :                     
(1)  324/FFFFFFFFFFFF116C :                     ; --------------------------------------------------------
(1)  325/FFFFFFFFFFFF116C :                     ; Grab ID
(1)  326/FFFFFFFFFFFF116C :                     ; --------------------------------------------------------
(1)  327/FFFFFFFFFFFF116C :                     
(1)  328/FFFFFFFFFFFF116C :                     .list:
(1)  329/FFFFFFFFFFFF116C : FFFA                		dc.w .exit-.list	; $00
(1)  330/FFFFFFFFFFFF116E : FFFA                		dc.w .exit-.list
(1)  331/FFFFFFFFFFFF1170 : FFFA                		dc.w .exit-.list
(1)  332/FFFFFFFFFFFF1172 : 0020                		dc.w .id_03-.list	; $03 - Mega mouse
(1)  333/FFFFFFFFFFFF1174 : FFFA                		dc.w .exit-.list	; $04
(1)  334/FFFFFFFFFFFF1176 : FFFA                		dc.w .exit-.list
(1)  335/FFFFFFFFFFFF1178 : FFFA                		dc.w .exit-.list
(1)  336/FFFFFFFFFFFF117A : FFFA                		dc.w .exit-.list
(1)  337/FFFFFFFFFFFF117C : FFFA                		dc.w .exit-.list	; $08
(1)  338/FFFFFFFFFFFF117E : FFFA                		dc.w .exit-.list
(1)  339/FFFFFFFFFFFF1180 : FFFA                		dc.w .exit-.list
(1)  340/FFFFFFFFFFFF1182 : FFFA                		dc.w .exit-.list
(1)  341/FFFFFFFFFFFF1184 : FFFA                		dc.w .exit-.list	; $0C
(1)  342/FFFFFFFFFFFF1186 : 00CA                		dc.w .id_0D-.list	; $0D - Genesis controller (3 or 6 button)
(1)  343/FFFFFFFFFFFF1188 : FFFA                		dc.w .exit-.list
(1)  344/FFFFFFFFFFFF118A : FFFA                		dc.w .exit-.list	; $0F - No controller OR Master System controller (2 Buttons: 1(B),2(C))
(1)  345/FFFFFFFFFFFF118C :                     
(1)  346/FFFFFFFFFFFF118C :                     ; --------------------------------------------------------
(1)  347/FFFFFFFFFFFF118C :                     ; ID $03
(1)  348/FFFFFFFFFFFF118C :                     ;
(1)  349/FFFFFFFFFFFF118C :                     ; Mega Mouse
(1)  350/FFFFFFFFFFFF118C :                     ; --------------------------------------------------------
(1)  351/FFFFFFFFFFFF118C :                     
(1)  352/FFFFFFFFFFFF118C :                     ; *** NOT TESTED ON HARDWARE ***
(1)  353/FFFFFFFFFFFF118C :                     .id_03:
(1)  354/FFFFFFFFFFFF118C : 1ABC 0020           		move.b	#$20,(a5)
(1)  355/FFFFFFFFFFFF1190 : 1B7C 0060 0006      		move.b	#$60,6(a5)
(1)  356/FFFFFFFFFFFF1196 : 0815 0004           		btst	#4,(a5)
(1)  357/FFFFFFFFFFFF119A : 6700 0094           		beq.w	.invalid
(1)  358/FFFFFFFFFFFF119E : 1ABC 0000           		move.b	#$00,(a5)	; $0F
(1)  359/FFFFFFFFFFFF11A2 : 4E71                		nop
(1)  360/FFFFFFFFFFFF11A4 : 4E71                		nop
(1)  361/FFFFFFFFFFFF11A6 : 1ABC 0020           		move.b	#$20,(a5)	; $0F
(1)  362/FFFFFFFFFFFF11AA : 4E71                		nop
(1)  363/FFFFFFFFFFFF11AC : 4E71                		nop
(1)  364/FFFFFFFFFFFF11AE : 1ABC 0000           		move.b	#$00,(a5)	; Yo | Xo | Ys | Xs
(1)  365/FFFFFFFFFFFF11B2 : 4E71                		nop
(1)  366/FFFFFFFFFFFF11B4 : 4E71                		nop
(1)  367/FFFFFFFFFFFF11B6 : 1A15                		move.b	(a5),d5		; d5 - X/Y direction bits (Ys Xs)
(1)  368/FFFFFFFFFFFF11B8 : 1ABC 0020           		move.b	#$20,(a5)	; C | M | R | L
(1)  369/FFFFFFFFFFFF11BC : 4E71                		nop
(1)  370/FFFFFFFFFFFF11BE : 4E71                		nop
(1)  371/FFFFFFFFFFFF11C0 : 1E15                		move.b	(a5),d7
(1)  372/FFFFFFFFFFFF11C2 : 0247 000F            		andi.w	#%1111,d7
(1)  373/FFFFFFFFFFFF11C6 : 3C2E 0002           		move.w	on_hold(a6),d6
(1)  374/FFFFFFFFFFFF11CA : BF46                		eor.w	d7,d6
(1)  375/FFFFFFFFFFFF11CC : 3D47 0002           		move.w	d7,on_hold(a6)
(1)  376/FFFFFFFFFFFF11D0 : CC47                		and.w	d7,d6
(1)  377/FFFFFFFFFFFF11D2 : 3D46 0004           		move.w	d6,on_press(a6)
(1)  378/FFFFFFFFFFFF11D6 : 1ABC 0000           		move.b	#$00,(a5)	; X7 | X6 | X5 | X4
(1)  379/FFFFFFFFFFFF11DA : 4E71                		nop
(1)  380/FFFFFFFFFFFF11DC : 4E71                		nop
(1)  381/FFFFFFFFFFFF11DE : 1E15                		move.b	(a5),d7
(1)  382/FFFFFFFFFFFF11E0 : 1ABC 0020           		move.b	#$20,(a5)	; X3 | X2 | X1 | X0
(1)  383/FFFFFFFFFFFF11E4 : 0247 000F           		andi.w	#%1111,d7
(1)  384/FFFFFFFFFFFF11E8 : E94F                		lsl.w	#4,d7
(1)  385/FFFFFFFFFFFF11EA : 4E71                		nop
(1)  386/FFFFFFFFFFFF11EC : 1C15                		move.b	(a5),d6
(1)  387/FFFFFFFFFFFF11EE : 0246 000F           		andi.w	#%1111,d6
(1)  388/FFFFFFFFFFFF11F2 : 8E46                		or.w	d6,d7
(1)  389/FFFFFFFFFFFF11F4 : 0805 0000           		btst    #0,d5
(1)  390/FFFFFFFFFFFF11F8 : 6704                		beq.s	.x_neg
(1)  391/FFFFFFFFFFFF11FA : 4407                		neg.b	d7
(1)  392/FFFFFFFFFFFF11FC : 4447                		neg.w	d7
(1)  393/FFFFFFFFFFFF11FE :                     .x_neg:
(1)  394/FFFFFFFFFFFF11FE : 3D47 0008           		move.w	d7,mouse_x(a6)
(1)  395/FFFFFFFFFFFF1202 : 1ABC 0000           		move.b	#$00,(a5)	; Y7 | Y6 | Y5 | Y4
(1)  396/FFFFFFFFFFFF1206 : 4E71                		nop
(1)  397/FFFFFFFFFFFF1208 : 4E71                		nop
(1)  398/FFFFFFFFFFFF120A : 1E15                		move.b	(a5),d7
(1)  399/FFFFFFFFFFFF120C : 1ABC 0020           		move.b	#$20,(a5)	; Y3 | Y2 | Y1 | Y0
(1)  400/FFFFFFFFFFFF1210 : 0247 000F           		andi.w	#%1111,d7
(1)  401/FFFFFFFFFFFF1214 : E94F                		lsl.w	#4,d7
(1)  402/FFFFFFFFFFFF1216 : 4E71                		nop
(1)  403/FFFFFFFFFFFF1218 : 1C15                		move.b	(a5),d6
(1)  404/FFFFFFFFFFFF121A : 0246 000F           		andi.w	#%1111,d6
(1)  405/FFFFFFFFFFFF121E : 8E46                		or.w	d6,d7
(1)  406/FFFFFFFFFFFF1220 : 0805 0001           		btst    #1,d5
(1)  407/FFFFFFFFFFFF1224 : 6704                		beq.s	.y_neg
(1)  408/FFFFFFFFFFFF1226 : 4407                		neg.b	d7
(1)  409/FFFFFFFFFFFF1228 : 4447                		neg.w	d7
(1)  410/FFFFFFFFFFFF122A :                     .y_neg:
(1)  411/FFFFFFFFFFFF122A : 4447                		neg.w	d7		; Reverse Y
(1)  412/FFFFFFFFFFFF122C : 3D47 000A           		move.w	d7,mouse_y(a6)
(1)  413/FFFFFFFFFFFF1230 :                     
(1)  414/FFFFFFFFFFFF1230 :                     .invalid:
(1)  415/FFFFFFFFFFFF1230 : 1ABC 0060           		move.b	#$60,(a5)
(1)  416/FFFFFFFFFFFF1234 : 4E75                		rts
(1)  417/FFFFFFFFFFFF1236 :                     
(1)  418/FFFFFFFFFFFF1236 :                     ; --------------------------------------------------------
(1)  419/FFFFFFFFFFFF1236 :                     ; ID $0D
(1)  420/FFFFFFFFFFFF1236 :                     ;
(1)  421/FFFFFFFFFFFF1236 :                     ; Normal controller: 3 button or 6 button.
(1)  422/FFFFFFFFFFFF1236 :                     ; --------------------------------------------------------
(1)  423/FFFFFFFFFFFF1236 :                     
(1)  424/FFFFFFFFFFFF1236 :                     .id_0D:
(1)  425/FFFFFFFFFFFF1236 : 1ABC 0040           		move.b	#$40,(a5)	; Show CB|RLDU
(1)  426/FFFFFFFFFFFF123A : 4E71                		nop
(1)  427/FFFFFFFFFFFF123C : 4E71                		nop
(1)  428/FFFFFFFFFFFF123E : 1A15                		move.b	(a5),d5
(1)  429/FFFFFFFFFFFF1240 : 0245 003F           		andi.w	#%00111111,d5
(1)  430/FFFFFFFFFFFF1244 : 1ABC 0000           		move.b	#$00,(a5)	; Show SA|RLDU
(1)  431/FFFFFFFFFFFF1248 : 4E71                		nop
(1)  432/FFFFFFFFFFFF124A : 4E71                		nop
(1)  433/FFFFFFFFFFFF124C : 1E15                		move.b	(a5),d7		; The following flips are for
(1)  434/FFFFFFFFFFFF124E : E54F                		lsl.w	#2,d7		; the 6pad's internal counter:
(1)  435/FFFFFFFFFFFF1250 : 0247 00C0           		andi.w	#%11000000,d7
(1)  436/FFFFFFFFFFFF1254 : 8E45                		or.w	d5,d7
(1)  437/FFFFFFFFFFFF1256 : 1ABC 0040           		move.b	#$40,(a5)	; Show CB|RLDU (2)
(1)  438/FFFFFFFFFFFF125A : 4647                		not.w	d7
(1)  439/FFFFFFFFFFFF125C : 1A2E 0003           		move.b	on_hold+1(a6),d5
(1)  440/FFFFFFFFFFFF1260 : BF05                		eor.b	d7,d5
(1)  441/FFFFFFFFFFFF1262 : 1ABC 0000           		move.b	#$00,(a5)	; Show SA|RLDU (3)
(1)  442/FFFFFFFFFFFF1266 : 1D47 0003           		move.b	d7,on_hold+1(a6)
(1)  443/FFFFFFFFFFFF126A : CA07                		and.b	d7,d5
(1)  444/FFFFFFFFFFFF126C : 1D45 0005           		move.b	d5,on_press+1(a6)
(1)  445/FFFFFFFFFFFF1270 : 1ABC 0040           		move.b	#$40,(a5)	; 6 button responds (4)
(1)  446/FFFFFFFFFFFF1274 : 4E71                		nop
(1)  447/FFFFFFFFFFFF1276 : 4E71                		nop
(1)  448/FFFFFFFFFFFF1278 : 1E15                		move.b	(a5),d7		; Grab ??|MXYZ
(1)  449/FFFFFFFFFFFF127A : 1ABC 0000            		move.b	#$00,(a5)	; (5)
(1)  450/FFFFFFFFFFFF127E : 4E71                  		nop
(1)  451/FFFFFFFFFFFF1280 : 4E71                  		nop
(1)  452/FFFFFFFFFFFF1282 : 1C15                 		move.b	(a5),d6		; Type: $03 old, $0F new
(1)  453/FFFFFFFFFFFF1284 : 1ABC 0040            		move.b	#$40,(a5)	; (6)
(1)  454/FFFFFFFFFFFF1288 : 4E71                 		nop
(1)  455/FFFFFFFFFFFF128A : 4E71                 		nop
(1)  456/FFFFFFFFFFFF128C : 0246 000F           		andi.w	#$F,d6
(1)  457/FFFFFFFFFFFF1290 : E44E                		lsr.w	#2,d6
(1)  458/FFFFFFFFFFFF1292 : 0246 0001           		andi.w	#1,d6
(1)  459/FFFFFFFFFFFF1296 : 6716                		beq.s	.oldpad
(1)  460/FFFFFFFFFFFF1298 : 4607                		not.b	d7
(1)  461/FFFFFFFFFFFF129A : 0247 000F            		andi.w	#%1111,d7
(1)  462/FFFFFFFFFFFF129E : 1A2E 0002           		move.b	on_hold(a6),d5
(1)  463/FFFFFFFFFFFF12A2 : BF05                		eor.b	d7,d5
(1)  464/FFFFFFFFFFFF12A4 : 1D47 0002           		move.b	d7,on_hold(a6)
(1)  465/FFFFFFFFFFFF12A8 : CA07                		and.b	d7,d5
(1)  466/FFFFFFFFFFFF12AA : 1D45 0004           		move.b	d5,on_press(a6)
(1)  467/FFFFFFFFFFFF12AE :                     .oldpad:
(1)  468/FFFFFFFFFFFF12AE : 1D46 0001           		move.b	d6,pad_ver(a6)
(1)  469/FFFFFFFFFFFF12B2 : 4E75                		rts
(1)  470/FFFFFFFFFFFF12B4 :                     
(1)  471/FFFFFFFFFFFF12B4 :                     ; --------------------------------------------------------
(1)  472/FFFFFFFFFFFF12B4 :                     ; Grab ID
(1)  473/FFFFFFFFFFFF12B4 :                     ; --------------------------------------------------------
(1)  474/FFFFFFFFFFFF12B4 :                     
(1)  475/FFFFFFFFFFFF12B4 :                     .pick_id:
(1)  476/FFFFFFFFFFFF12B4 : 7E00                		moveq	#0,d7
(1)  477/FFFFFFFFFFFF12B6 : 1ABC 0070           		move.b	#%01110000,(a5)		; TH=1,TR=1,TL=1
(1)  478/FFFFFFFFFFFF12BA : 4E71                		nop
(1)  479/FFFFFFFFFFFF12BC : 4E71                		nop
(1)  480/FFFFFFFFFFFF12BE : 610A                		bsr	.read
(1)  481/FFFFFFFFFFFF12C0 : 1ABC 0030           		move.b	#%00110000,(a5)		; TH=0,TR=1,TL=1
(1)  482/FFFFFFFFFFFF12C4 : 4E71                		nop
(1)  483/FFFFFFFFFFFF12C6 : 4E71                		nop
(1)  484/FFFFFFFFFFFF12C8 : DE47                		add.w	d7,d7
(1)  485/FFFFFFFFFFFF12CA :                     .read:
(1)  486/FFFFFFFFFFFF12CA : 1A15                		move.b	(a5),d5
(1)  487/FFFFFFFFFFFF12CC : 1C05                		move.b	d5,d6
(1)  488/FFFFFFFFFFFF12CE : 0206 000C           		andi.b	#%1100,d6
(1)  489/FFFFFFFFFFFF12D2 : 6702                		beq.s	.step_1
(1)  490/FFFFFFFFFFFF12D4 : 5247                		addq.w	#1,d7
(1)  491/FFFFFFFFFFFF12D6 :                     .step_1:
(1)  492/FFFFFFFFFFFF12D6 : DE47                		add.w	d7,d7
(1)  493/FFFFFFFFFFFF12D8 : 1C05                		move.b	d5,d6
(1)  494/FFFFFFFFFFFF12DA : 0246 0003           		andi.w	#%0011,d6
(1)  495/FFFFFFFFFFFF12DE : 6702                		beq.s	.step_2
(1)  496/FFFFFFFFFFFF12E0 : 5247                		addq.w	#1,d7
(1)  497/FFFFFFFFFFFF12E2 :                     .step_2:
(1)  498/FFFFFFFFFFFF12E2 : 4E75                		rts
(1)  500/FFFFFFFFFFFF12E4 :                     
(1)  501/FFFFFFFFFFFF12E4 :                     ; --------------------------------------------------------
(1)  502/FFFFFFFFFFFF12E4 :                     ; System_Random
(1)  503/FFFFFFFFFFFF12E4 :                     ;
(1)  504/FFFFFFFFFFFF12E4 :                     ; Makes a random number.
(1)  505/FFFFFFFFFFFF12E4 :                     ;
(1)  506/FFFFFFFFFFFF12E4 :                     ; Input:
(1)  507/FFFFFFFFFFFF12E4 :                     ; d0 | Seed
(1)  508/FFFFFFFFFFFF12E4 :                     ;
(1)  509/FFFFFFFFFFFF12E4 :                     ; Output:
(1)  510/FFFFFFFFFFFF12E4 :                     ; d0 | LONG
(1)  511/FFFFFFFFFFFF12E4 :                     ;
(1)  512/FFFFFFFFFFFF12E4 :                     ; Uses:
(1)  513/FFFFFFFFFFFF12E4 :                     ; d4-d5
(1)  514/FFFFFFFFFFFF12E4 :                     ; --------------------------------------------------------
(1)  515/FFFFFFFFFFFF12E4 :                     
(1)  516/FFFFFFFFFFFF12E4 :                     System_Random:
(1)  517/FFFFFFFFFFFF12E4 : 2F04                		move.l	d4,-(sp)
(1)  518/FFFFFFFFFFFF12E6 : 2838 C448           		move.l	(RAM_SysRandSeed).w,d4
(1)  519/FFFFFFFFFFFF12EA : 6606                		bne.s	.good_s
(1)  520/FFFFFFFFFFFF12EC : 283C 23B5 1947      		move.l	#$23B51947,d4
(1)  521/FFFFFFFFFFFF12F2 :                     .good_s:
(1)  522/FFFFFFFFFFFF12F2 : 2004                		move.l	d4,d0
(1)  523/FFFFFFFFFFFF12F4 : EB9C                		rol.l	#5,d4
(1)  524/FFFFFFFFFFFF12F6 : D880                		add.l	d0,d4
(1)  525/FFFFFFFFFFFF12F8 : E644                		asr.w	#3,d4
(1)  526/FFFFFFFFFFFF12FA : D880                		add.l	d0,d4
(1)  527/FFFFFFFFFFFF12FC : 3004                		move.w	d4,d0
(1)  528/FFFFFFFFFFFF12FE : 4844                		swap	d4
(1)  529/FFFFFFFFFFFF1300 : D044                		add.w	d4,d0
(1)  530/FFFFFFFFFFFF1302 : 3800                		move.w	d0,d4
(1)  531/FFFFFFFFFFFF1304 : 4844                		swap	d4
(1)  532/FFFFFFFFFFFF1306 : 21C4 C448           		move.l	d4,(RAM_SysRandSeed).w
(1)  533/FFFFFFFFFFFF130A : 281F                		move.l	(sp)+,d4
(1)  534/FFFFFFFFFFFF130C : 4E75                		rts
(1)  535/FFFFFFFFFFFF130E :                     
(1)  536/FFFFFFFFFFFF130E :                     ; --------------------------------------------------------
(1)  537/FFFFFFFFFFFF130E :                     ; System_SineWave_Cos / System_SineWave
(1)  538/FFFFFFFFFFFF130E :                     ;
(1)  539/FFFFFFFFFFFF130E :                     ; Get sinewave value
(1)  540/FFFFFFFFFFFF130E :                     ;
(1)  541/FFFFFFFFFFFF130E :                     ; Input:
(1)  542/FFFFFFFFFFFF130E :                     ; d0 | WORD - Tan
(1)  543/FFFFFFFFFFFF130E :                     ; d1 | WORD - Multiply
(1)  544/FFFFFFFFFFFF130E :                     ;
(1)  545/FFFFFFFFFFFF130E :                     ; Output:
(1)  546/FFFFFFFFFFFF130E :                     ; d2 | LONG - Result (as 0000.0000)
(1)  547/FFFFFFFFFFFF130E :                     ; --------------------------------------------------------
(1)  548/FFFFFFFFFFFF130E :                     
(1)  549/FFFFFFFFFFFF130E :                     System_SineWave_Cos:
(1)  550/FFFFFFFFFFFF130E : 48A7 8000           		movem.w	d0,-(sp)
(1)  551/FFFFFFFFFFFF1312 : 7400                		moveq	#0,d2
(1)  552/FFFFFFFFFFFF1314 : 0600 0040           		addi.b	#$40,d0
(1)  553/FFFFFFFFFFFF1318 : 1400                		move.b	d0,d2
(1)  554/FFFFFFFFFFFF131A : E302                		asl.b	#1,d2
(1)  555/FFFFFFFFFFFF131C : 343B 202E           		move.w	MdSys_SineData(pc,d2.w),d2
(1)  556/FFFFFFFFFFFF1320 : C4C1                		mulu.w	d1,d2
(1)  557/FFFFFFFFFFFF1322 : 8000                		or.b	d0,d0
(1)  558/FFFFFFFFFFFF1324 : 6A02                		bpl.s	.dont_neg
(1)  559/FFFFFFFFFFFF1326 : 4482                		neg.l	d2
(1)  560/FFFFFFFFFFFF1328 :                     .dont_neg:
(1)  561/FFFFFFFFFFFF1328 : 4C9F 0001           		movem.w	(sp)+,d0
(1)  562/FFFFFFFFFFFF132C : 4E75                		rts
(1)  563/FFFFFFFFFFFF132E :                     
(1)  564/FFFFFFFFFFFF132E :                     System_SineWave:
(1)  565/FFFFFFFFFFFF132E : 48A7 8000           		movem.w	d0,-(sp)
(1)  566/FFFFFFFFFFFF1332 : 0240 007F           		andi.w	#$7F,d0
(1)  567/FFFFFFFFFFFF1336 : E340                		asl.w	#1,d0
(1)  568/FFFFFFFFFFFF1338 : 343B 0012           		move.w	MdSys_SineData(pc,d0.w),d2
(1)  569/FFFFFFFFFFFF133C : C4C1                		mulu.w	d1,d2
(1)  570/FFFFFFFFFFFF133E : 4C9F 0001           		movem.w	(sp)+,d0
(1)  571/FFFFFFFFFFFF1342 : 5182                		subq.l	#8,d2
(1)  572/FFFFFFFFFFFF1344 : 8000                		or.b	d0,d0
(1)  573/FFFFFFFFFFFF1346 : 6A02                		bpl.s	.dont_neg
(1)  574/FFFFFFFFFFFF1348 : 4482                		neg.l	d2
(1)  575/FFFFFFFFFFFF134A :                     .dont_neg:
(1)  576/FFFFFFFFFFFF134A : 4E75                		rts
(1)  577/FFFFFFFFFFFF134C :                     
(1)  578/FFFFFFFFFFFF134C : 0000 0006 000D      MdSys_SineData:	dc.w 0,	6, $D, $13, $19, $1F, $26, $2C,	$32, $38, $3E
         FFFFFFFFFFFF1352 : 0013 0019 001F 
         FFFFFFFFFFFF1358 : 0026 002C 0032 
         FFFFFFFFFFFF135E : 0038 003E          
(1)  579/FFFFFFFFFFFF1362 : 0044 004A 0050      		dc.w $44, $4A, $50, $56, $5C, $62, $68,	$6D, $73, $79
         FFFFFFFFFFFF1368 : 0056 005C 0062 
         FFFFFFFFFFFF136E : 0068 006D 0073 
         FFFFFFFFFFFF1374 : 0079             
(1)  580/FFFFFFFFFFFF1376 : 007E 0084 0089      		dc.w $7E, $84, $89, $8E, $93, $98, $9D,	$A2, $A7, $AC
         FFFFFFFFFFFF137C : 008E 0093 0098 
         FFFFFFFFFFFF1382 : 009D 00A2 00A7 
         FFFFFFFFFFFF1388 : 00AC             
(1)  581/FFFFFFFFFFFF138A : 00B1 00B5 00B9      		dc.w $B1, $B5, $B9, $BE, $C2, $C6, $CA,	$CE, $D1, $D5
         FFFFFFFFFFFF1390 : 00BE 00C2 00C6 
         FFFFFFFFFFFF1396 : 00CA 00CE 00D1 
         FFFFFFFFFFFF139C : 00D5             
(1)  582/FFFFFFFFFFFF139E : 00D8 00DC 00DF      		dc.w $D8, $DC, $DF, $E2, $E5, $E7, $EA,	$ED, $EF, $F1
         FFFFFFFFFFFF13A4 : 00E2 00E5 00E7 
         FFFFFFFFFFFF13AA : 00EA 00ED 00EF 
         FFFFFFFFFFFF13B0 : 00F1             
(1)  583/FFFFFFFFFFFF13B2 : 00F3 00F5 00F7      		dc.w $F3, $F5, $F7, $F8, $FA, $FB, $FC,	$FD, $FE, $FF
         FFFFFFFFFFFF13B8 : 00F8 00FA 00FB 
         FFFFFFFFFFFF13BE : 00FC 00FD 00FE 
         FFFFFFFFFFFF13C4 : 00FF             
(1)  584/FFFFFFFFFFFF13C6 : 00FF 0100 0100      		dc.w $FF, $100,	$100, $100, $100, $100,	$FF, $FF, $FE
         FFFFFFFFFFFF13CC : 0100 0100 0100 
         FFFFFFFFFFFF13D2 : 00FF 00FF 00FE    
(1)  585/FFFFFFFFFFFF13D8 : 00FD 00FC 00FB      		dc.w $FD, $FC, $FB, $FA, $F8, $F7, $F5,	$F3, $F1, $EF
         FFFFFFFFFFFF13DE : 00FA 00F8 00F7 
         FFFFFFFFFFFF13E4 : 00F5 00F3 00F1 
         FFFFFFFFFFFF13EA : 00EF             
(1)  586/FFFFFFFFFFFF13EC : 00ED 00EA 00E7      		dc.w $ED, $EA, $E7, $E5, $E2, $DF, $DC,	$D8, $D5, $D1
         FFFFFFFFFFFF13F2 : 00E5 00E2 00DF 
         FFFFFFFFFFFF13F8 : 00DC 00D8 00D5 
         FFFFFFFFFFFF13FE : 00D1             
(1)  587/FFFFFFFFFFFF1400 : 00CE 00CA 00C6      		dc.w $CE, $CA, $C6, $C2, $BE, $B9, $B5,	$B1, $AC, $A7
         FFFFFFFFFFFF1406 : 00C2 00BE 00B9 
         FFFFFFFFFFFF140C : 00B5 00B1 00AC 
         FFFFFFFFFFFF1412 : 00A7             
(1)  588/FFFFFFFFFFFF1414 : 00A2 009D 0098      		dc.w $A2, $9D, $98, $93, $8E, $89, $84,	$7E, $79, $73
         FFFFFFFFFFFF141A : 0093 008E 0089 
         FFFFFFFFFFFF1420 : 0084 007E 0079 
         FFFFFFFFFFFF1426 : 0073             
(1)  589/FFFFFFFFFFFF1428 : 006D 0068 0062      		dc.w $6D, $68, $62, $5C, $56, $50, $4A,	$44, $3E, $38
         FFFFFFFFFFFF142E : 005C 0056 0050 
         FFFFFFFFFFFF1434 : 004A 0044 003E 
         FFFFFFFFFFFF143A : 0038             
(1)  590/FFFFFFFFFFFF143C : 0032 002C 0026      		dc.w $32, $2C, $26, $1F, $19, $13, $D, 6
         FFFFFFFFFFFF1442 : 001F 0019 0013 
         FFFFFFFFFFFF1448 : 000D 0006          
(1)  591/FFFFFFFFFFFF144C :                     
(1)  592/FFFFFFFFFFFF144C :                     ; --------------------------------------------------------
(1)  593/FFFFFFFFFFFF144C :                     ; System_SetInts
(1)  594/FFFFFFFFFFFF144C :                     ;
(1)  595/FFFFFFFFFFFF144C :                     ; Set new interrputs
(1)  596/FFFFFFFFFFFF144C :                     ;
(1)  597/FFFFFFFFFFFF144C :                     ; d0 | LONG - VBlank
(1)  598/FFFFFFFFFFFF144C :                     ; d1 | LONG - HBlank
(1)  599/FFFFFFFFFFFF144C :                     ;
(1)  600/FFFFFFFFFFFF144C :                     ; Uses:
(1)  601/FFFFFFFFFFFF144C :                     ; d4
(1)  602/FFFFFFFFFFFF144C :                     ;
(1)  603/FFFFFFFFFFFF144C :                     ; Notes:
(1)  604/FFFFFFFFFFFF144C :                     ; Writing 0 or a negative number will skip change
(1)  605/FFFFFFFFFFFF144C :                     ; to the interrupt pointer
(1)  606/FFFFFFFFFFFF144C :                     ; --------------------------------------------------------
(1)  607/FFFFFFFFFFFF144C :                     
(1)  608/FFFFFFFFFFFF144C :                     System_SetInts:
(1)  609/FFFFFFFFFFFF144C : 2800                		move.l	d0,d4
(1)  610/FFFFFFFFFFFF144E : 6704                		beq.s	.novint
(1)  614/FFFFFFFFFFFF1450 : 21C4 C44E            		move.l	d4,(RAM_MdMarsVInt+2).w
(1)  616/FFFFFFFFFFFF1454 :                     .novint:
(1)  617/FFFFFFFFFFFF1454 : 2801                		move.l	d1,d4
(1)  618/FFFFFFFFFFFF1456 : 6704                		beq.s	.nohint
(1)  622/FFFFFFFFFFFF1458 : 21C4 C454            		move.l	d4,(RAM_MdMarsHInt+2).w
(1)  624/FFFFFFFFFFFF145C :                     .nohint:
(1)  625/FFFFFFFFFFFF145C : 4E75                		rts
(1)  626/FFFFFFFFFFFF145E :                     
(1)  627/FFFFFFFFFFFF145E :                     ; --------------------------------------------------------
(1)  628/FFFFFFFFFFFF145E :                     ; System_SramInit
(1)  629/FFFFFFFFFFFF145E :                     ;
(1)  630/FFFFFFFFFFFF145E :                     ; Init save data
(1)  631/FFFFFFFFFFFF145E :                     ;
(1)  632/FFFFFFFFFFFF145E :                     ; Uses:
(1)  633/FFFFFFFFFFFF145E :                     ; a4,d4-d5
(1)  634/FFFFFFFFFFFF145E :                     ; --------------------------------------------------------
(1)  635/FFFFFFFFFFFF145E :                     
(1)  636/FFFFFFFFFFFF145E :                     System_SramInit:
(1)  642/FFFFFFFFFFFF145E :                     
(1)  643/FFFFFFFFFFFF145E :                     	; Cartridge
(1)  644/FFFFFFFFFFFF145E : 616E                		bsr	System_SramLoad
(1)  645/FFFFFFFFFFFF1460 : 0CB8 5341 5645      		cmpi.l	#"SAVE",(RAM_SaveData).w
         FFFFFFFFFFFF1466 : C044             
(1)  646/FFFFFFFFFFFF1468 : 671A                		beq.s	.dont_clear
(1)  647/FFFFFFFFFFFF146A : 4DF8 C044           		lea	(RAM_SaveData).w,a6
(1)  648/FFFFFFFFFFFF146E : 7C00                		moveq	#0,d6
(1)  649/FFFFFFFFFFFF1470 : 3E3C 03FF           		move.w	#MAX_SRAMSIZE-1,d7
(1)  650/FFFFFFFFFFFF1474 :                     .clr_sram:
(1)  651/FFFFFFFFFFFF1474 : 1CC6                		move.b	d6,(a6)+
(1)  652/FFFFFFFFFFFF1476 : 51CF FFFC           		dbf	d7,.clr_sram
(1)  653/FFFFFFFFFFFF147A : 21FC 5341 5645      		move.l	#"SAVE",(RAM_SaveData).w
         FFFFFFFFFFFF1480 : C044             
(1)  654/FFFFFFFFFFFF1482 : 6102                		bsr	System_SramSave
(1)  655/FFFFFFFFFFFF1484 :                     .dont_clear:
(1)  657/FFFFFFFFFFFF1484 : 4E75                		rts
(1)  658/FFFFFFFFFFFF1486 :                     
(1)  659/FFFFFFFFFFFF1486 :                     ; --------------------------------------------------------
(1)  660/FFFFFFFFFFFF1486 :                     ; System_SramSave
(1)  661/FFFFFFFFFFFF1486 :                     ; --------------------------------------------------------
(1)  662/FFFFFFFFFFFF1486 :                     
(1)  663/FFFFFFFFFFFF1486 :                     System_SramSave:
(1)  669/FFFFFFFFFFFF1486 :                     
(1)  670/FFFFFFFFFFFF1486 :                     	; Cartridge
(1)  671/FFFFFFFFFFFF1486 : 40C7                		move.w	sr,d7
(1)  672/FFFFFFFFFFFF1488 : 4847                		swap	d7
(1)  673/FFFFFFFFFFFF148A : 007C 0700           		ori.w	#$0700,sr
(1)  675/FFFFFFFFFFFF148E : 08F9 0000 00A1      		bset	#0,(sysmars_reg+dreqctl+1).l
         FFFFFFFFFFFF1494 : 5107             
(1)  677/FFFFFFFFFFFF1496 : 13FC 0001 00A1      		move.b	#1,(md_bank_sram).l
         FFFFFFFFFFFF149C : 30F1             
(1)  678/FFFFFFFFFFFF149E : 4DF8 C044           		lea	(RAM_SaveData).w,a6
(1)  679/FFFFFFFFFFFF14A2 : 4BF9 0020 0003      		lea	($200003).l,a5
(1)  680/FFFFFFFFFFFF14A8 : 3E3C 01FE           		move.w	#((MAX_SRAMSIZE-2)/2)-1,d7
(1)  681/FFFFFFFFFFFF14AC :                     .save:
(1)  682/FFFFFFFFFFFF14AC : 1C1E                		move.b	(a6)+,d6
(1)  683/FFFFFFFFFFFF14AE : 1A86                		move.b	d6,(a5)
(1)  684/FFFFFFFFFFFF14B0 : DAFC 0002           		adda	#2,a5
(1)  685/FFFFFFFFFFFF14B4 : 51CF FFF6           		dbf	d7,.save
(1)  686/FFFFFFFFFFFF14B8 :                     .dont_reset:
(1)  687/FFFFFFFFFFFF14B8 : 13FC 0000 00A1      		move.b	#0,(md_bank_sram).l
         FFFFFFFFFFFF14BE : 30F1             
(1)  689/FFFFFFFFFFFF14C0 : 08B9 0000 00A1      		bclr	#0,(sysmars_reg+dreqctl+1).l
         FFFFFFFFFFFF14C6 : 5107             
(1)  691/FFFFFFFFFFFF14C8 : 4847                		swap	d7
(1)  692/FFFFFFFFFFFF14CA : 46C7                		move.w	d7,sr
(1)  694/FFFFFFFFFFFF14CC : 4E75                		rts
(1)  695/FFFFFFFFFFFF14CE :                     
(1)  696/FFFFFFFFFFFF14CE :                     ; --------------------------------------------------------
(1)  697/FFFFFFFFFFFF14CE :                     ; System_SramLoad
(1)  698/FFFFFFFFFFFF14CE :                     ; --------------------------------------------------------
(1)  699/FFFFFFFFFFFF14CE :                     
(1)  700/FFFFFFFFFFFF14CE :                     System_SramLoad:
(1)  706/FFFFFFFFFFFF14CE :                     
(1)  707/FFFFFFFFFFFF14CE :                     	; Cartridge
(1)  708/FFFFFFFFFFFF14CE : 40C7                		move.w	sr,d7
(1)  709/FFFFFFFFFFFF14D0 : 4847                		swap	d7
(1)  710/FFFFFFFFFFFF14D2 : 007C 0700           		ori.w	#$0700,sr
(1)  712/FFFFFFFFFFFF14D6 : 08F9 0000 00A1      		bset	#0,(sysmars_reg+dreqctl+1).l
         FFFFFFFFFFFF14DC : 5107             
(1)  714/FFFFFFFFFFFF14DE : 13FC 0001 00A1      		move.b	#1,(md_bank_sram).l
         FFFFFFFFFFFF14E4 : 30F1             
(1)  715/FFFFFFFFFFFF14E6 : 4DF8 C044           		lea	(RAM_SaveData).w,a6
(1)  716/FFFFFFFFFFFF14EA : 4BF9 0020 0003      		lea	($200003).l,a5
(1)  717/FFFFFFFFFFFF14F0 : 3E3C 01FE           		move.w	#((MAX_SRAMSIZE-2)/2)-1,d7
(1)  718/FFFFFFFFFFFF14F4 :                     .load:
(1)  719/FFFFFFFFFFFF14F4 : 1C15                		move.b	(a5),d6
(1)  720/FFFFFFFFFFFF14F6 : 1AC6                		move.b	d6,(a5)+
(1)  721/FFFFFFFFFFFF14F8 : DAFC 0002           		adda	#2,a5
(1)  722/FFFFFFFFFFFF14FC : 51CF FFF6           		dbf	d7,.load
(1)  723/FFFFFFFFFFFF1500 :                     .dont_reset:
(1)  724/FFFFFFFFFFFF1500 : 13FC 0000 00A1      		move.b	#0,(md_bank_sram).l
         FFFFFFFFFFFF1506 : 30F1             
(1)  726/FFFFFFFFFFFF1508 : 08B9 0000 00A1      		bclr	#0,(sysmars_reg+dreqctl+1).l
         FFFFFFFFFFFF150E : 5107             
(1)  728/FFFFFFFFFFFF1510 : 4847                		swap	d7
(1)  729/FFFFFFFFFFFF1512 : 46C7                		move.w	d7,sr
(1)  731/FFFFFFFFFFFF1514 : 4E75                		rts
(1)  732/FFFFFFFFFFFF1516 :                     
(1)  733/FFFFFFFFFFFF1516 :                     ; ====================================================================
(1)  734/FFFFFFFFFFFF1516 :                     ; ----------------------------------------------------------------
(1)  735/FFFFFFFFFFFF1516 :                     ; Screen mode subroutines
(1)  736/FFFFFFFFFFFF1516 :                     ; ----------------------------------------------------------------
(1)  737/FFFFFFFFFFFF1516 :                     
(1)  738/FFFFFFFFFFFF1516 :                     ; --------------------------------------------------------
(1)  739/FFFFFFFFFFFF1516 :                     ; Initialize current screen mode
(1)  740/FFFFFFFFFFFF1516 :                     ;
(1)  741/FFFFFFFFFFFF1516 :                     ; MUST call this at the very start of your screen code.
(1)  742/FFFFFFFFFFFF1516 :                     ; --------------------------------------------------------
(1)  743/FFFFFFFFFFFF1516 :                     
(1)  744/FFFFFFFFFFFF1516 :                     Mode_Init:
(1)  745/FFFFFFFFFFFF1516 : 007C 0700           		ori.w	#$0700,sr			; Disable interrupts.
(1)  746/FFFFFFFFFFFF151A : 13FC 0004 FFFF      		move.b	#$04,(RAM_VdpRegs).l
         FFFFFFFFFFFF1520 : BDF6             
(1)  747/FFFFFFFFFFFF1522 : 13FC 0004 FFFF      		move.b	#$04,(RAM_VdpRegs+1).l
         FFFFFFFFFFFF1528 : BDF7             
(1)  748/FFFFFFFFFFFF152A : 6100 ED84           		bsr	Video_Update
(1)  749/FFFFFFFFFFFF152E : 6100 EDD4           		bsr	Video_Clear
(1)  750/FFFFFFFFFFFF1532 : 6100 F7A0           		bsr	Objects_Clear
(1)  751/FFFFFFFFFFFF1536 : 49F8 1800           		lea	(MAX_ScrnBuff),a4
(1)  752/FFFFFFFFFFFF153A : 3A3C 0BFF           		move.w	#(MAX_ScrnBuff/2)-1,d5
(1)  753/FFFFFFFFFFFF153E : 7800                		moveq	#0,d4
(1)  754/FFFFFFFFFFFF1540 :                     .clr:
(1)  755/FFFFFFFFFFFF1540 : 38C4                		move.w	d4,(a4)+
(1)  756/FFFFFFFFFFFF1542 : 51CD FFFC           		dbf	d5,.clr
(1)  757/FFFFFFFFFFFF1546 : 4E75                		rts
(1)  758/FFFFFFFFFFFF1548 :                     
(1)  759/FFFFFFFFFFFF1548 :                     ; --------------------------------------------------------
(1)  760/FFFFFFFFFFFF1548 :                     ; Syncronized Fade-in/Fade-out for both VDP and SuperVDP
(1)  761/FFFFFFFFFFFF1548 :                     ; --------------------------------------------------------
(1)  762/FFFFFFFFFFFF1548 :                     
(1)  763/FFFFFFFFFFFF1548 :                     Mode_FadeIn:
(1)  764/FFFFFFFFFFFF1548 : 6100 F7B2           		bsr	Objects_Run
(1)  765/FFFFFFFFFFFF154C : 31FC 0001 BDE4      		move.w	#1,(RAM_FadeMdReq).w
(1)  766/FFFFFFFFFFFF1552 : 31FC 0001 BDEC      		move.w	#1,(RAM_FadeMarsReq).w
(1)  767/FFFFFFFFFFFF1558 : 31FC 0001 BDE6      		move.w	#1,(RAM_FadeMdIncr).w
(1)  768/FFFFFFFFFFFF155E : 31FC 0002 BDEE      		move.w	#2,(RAM_FadeMarsIncr).w
(1)  769/FFFFFFFFFFFF1564 : 31FC 0001 BDE8      		move.w	#1,(RAM_FadeMdDelay).w
(1)  770/FFFFFFFFFFFF156A : 31FC 0000 BDF0      		move.w	#0,(RAM_FadeMarsDelay).w
(1)  771/FFFFFFFFFFFF1570 :                     .loopw:
(1)  772/FFFFFFFFFFFF1570 : 6100 FB6C           		bsr	System_Render
(1)  773/FFFFFFFFFFFF1574 : 6100 EE84           		bsr	Video_RunFade
(1)  774/FFFFFFFFFFFF1578 : 66F6                		bne.s	.loopw
(1)  775/FFFFFFFFFFFF157A : 4E75                		rts
(1)  776/FFFFFFFFFFFF157C :                     
(1)  777/FFFFFFFFFFFF157C :                     Mode_FadeOut:
(1)  778/FFFFFFFFFFFF157C : 6100 F77E           		bsr	Objects_Run
(1)  779/FFFFFFFFFFFF1580 : 31FC 0002 BDE4      		move.w	#2,(RAM_FadeMdReq).w
(1)  780/FFFFFFFFFFFF1586 : 31FC 0002 BDEC      		move.w	#2,(RAM_FadeMarsReq).w
(1)  781/FFFFFFFFFFFF158C : 31FC 0001 BDE6      		move.w	#1,(RAM_FadeMdIncr).w
(1)  782/FFFFFFFFFFFF1592 : 31FC 0002 BDEE      		move.w	#2,(RAM_FadeMarsIncr).w
(1)  783/FFFFFFFFFFFF1598 : 31FC 0001 BDE8      		move.w	#1,(RAM_FadeMdDelay).w
(1)  784/FFFFFFFFFFFF159E : 31FC 0000 BDF0      		move.w	#0,(RAM_FadeMarsDelay).w
(1)  785/FFFFFFFFFFFF15A4 :                     .loopw:
(1)  786/FFFFFFFFFFFF15A4 : 6100 FB38           		bsr	System_Render
(1)  787/FFFFFFFFFFFF15A8 : 6100 EE50           		bsr	Video_RunFade
(1)  788/FFFFFFFFFFFF15AC : 66F6                		bne.s	.loopw
(1)  789/FFFFFFFFFFFF15AE : 4E75                		rts
(1)  790/FFFFFFFFFFFF15B0 :                     
(1)  791/FFFFFFFFFFFF15B0 :                     ; ====================================================================
(1)  792/FFFFFFFFFFFF15B0 :                     ; ----------------------------------------------------------------
(1)  793/FFFFFFFFFFFF15B0 :                     ; Default interrupts
(1)  794/FFFFFFFFFFFF15B0 :                     ; ----------------------------------------------------------------
(1)  795/FFFFFFFFFFFF15B0 :                     
(1)  796/FFFFFFFFFFFF15B0 :                     ; --------------------------------------------------------
(1)  797/FFFFFFFFFFFF15B0 :                     ; VBlank
(1)  798/FFFFFFFFFFFF15B0 :                     ; --------------------------------------------------------
(1)  799/FFFFFFFFFFFF15B0 :                     
(1)  800/FFFFFFFFFFFF15B0 :                     VInt_Default:
(1)  801/FFFFFFFFFFFF15B0 : 48E7 FFFE           		movem.l	d0-a6,-(sp)
(1)  802/FFFFFFFFFFFF15B4 : 6100 FB82           		bsr	System_Input
(1)  803/FFFFFFFFFFFF15B8 : 06B8 0000 0001      		addi.l	#1,(RAM_FrameCount).w
         FFFFFFFFFFFF15BE : BDD4             
(1)  804/FFFFFFFFFFFF15C0 : 4CDF 7FFF           		movem.l	(sp)+,d0-a6
(1)  805/FFFFFFFFFFFF15C4 : 4E73                		rte
(1)  806/FFFFFFFFFFFF15C6 :                     
(1)  807/FFFFFFFFFFFF15C6 :                     ; --------------------------------------------------------
(1)  808/FFFFFFFFFFFF15C6 :                     ; HBlank
(1)  809/FFFFFFFFFFFF15C6 :                     ; --------------------------------------------------------
(1)  810/FFFFFFFFFFFF15C6 :                     
(1)  811/FFFFFFFFFFFF15C6 :                     HInt_Default:
(1)  812/FFFFFFFFFFFF15C6 : 4E73                		rte
(1)  813/FFFFFFFFFFFF15C8 :                     
(1)  814/FFFFFFFFFFFF15C8 :                     ; ====================================================================
(1)  815/FFFFFFFFFFFF15C8 :                     ; ----------------------------------------------------------------
(1)  816/FFFFFFFFFFFF15C8 :                     ; SEGA CD / CD32X ONLY
(1)  817/FFFFFFFFFFFF15C8 :                     ; ----------------------------------------------------------------
(1)  818/FFFFFFFFFFFF15C8 :                     
(1) 1022/FFFFFFFFFFFF15C8 :                     
(1) 1023/FFFFFFFFFFFF15C8 :                     ; ====================================================================
(1) 1024/FFFFFFFFFFFF15C8 :                     ; ----------------------------------------------------------------
(1) 1025/FFFFFFFFFFFF15C8 :                     ; 32X and CD32X ONLY
(1) 1026/FFFFFFFFFFFF15C8 :                     ; ----------------------------------------------------------------
(1) 1027/FFFFFFFFFFFF15C8 :                     
(1) 1029/FFFFFFFFFFFF15C8 :                     
(1) 1030/FFFFFFFFFFFF15C8 :                     ; --------------------------------------------------------
(1) 1031/FFFFFFFFFFFF15C8 :                     ; System_MarsDataPack
(1) 1032/FFFFFFFFFFFF15C8 :                     ;
(1) 1033/FFFFFFFFFFFF15C8 :                     ; BOTH 32X AND CD32X
(1) 1034/FFFFFFFFFFFF15C8 :                     ;
(1) 1035/FFFFFFFFFFFF15C8 :                     ; Sends graphics data to the SDRAM area
(1) 1036/FFFFFFFFFFFF15C8 :                     ; call this BEFORE doing any visuals.
(1) 1037/FFFFFFFFFFFF15C8 :                     ;
(1) 1038/FFFFFFFFFFFF15C8 :                     ; Input:
(1) 1039/FFFFFFFFFFFF15C8 :                     ; a0.l | Cartridge pointer and Filename:
(1) 1040/FFFFFFFFFFFF15C8 :                     ;        dc.l cart_pointer ; Cartridge only
(1) 1041/FFFFFFFFFFFF15C8 :                     ;        dc.b "FILENAME.BIN" ; CD32X only
(1) 1042/FFFFFFFFFFFF15C8 :                     ;
(1) 1043/FFFFFFFFFFFF15C8 :                     ;        The SDRAM data to be send MUST have
(1) 1044/FFFFFFFFFFFF15C8 :                     ;        the size at the begining:
(1) 1045/FFFFFFFFFFFF15C8 :                     ;        dc.l end_point-start_label
(1) 1046/FFFFFFFFFFFF15C8 :                     ;        dc.b (data)
(1) 1047/FFFFFFFFFFFF15C8 :                     ;
(1) 1048/FFFFFFFFFFFF15C8 :                     ; Uses:
(1) 1049/FFFFFFFFFFFF15C8 :                     ; a4-a5,d3-d7
(1) 1050/FFFFFFFFFFFF15C8 :                     ;
(1) 1051/FFFFFFFFFFFF15C8 :                     ; Notes:
(1) 1052/FFFFFFFFFFFF15C8 :                     ; On CD32X this uses WORD-RAM for the Source.
(1) 1053/FFFFFFFFFFFF15C8 :                     ; --------------------------------------------------------
(1) 1054/FFFFFFFFFFFF15C8 :                     
(1) 1055/FFFFFFFFFFFF15C8 :                     System_MarsDataPack:
(1) 1061/FFFFFFFFFFFF15C8 : 2850                		move.l	(a0),a4
(1) 1063/FFFFFFFFFFFF15CA : 201C                		move.l	(a4)+,d0		; Read size
(1) 1064/FFFFFFFFFFFF15CC :                     ; 		andi.w	#$F800,d0
(1) 1065/FFFFFFFFFFFF15CC :                     ; 		addi.w	#$800,d0
(1) 1066/FFFFFFFFFFFF15CC : 204C                		move.l	a4,a0
(1) 1067/FFFFFFFFFFFF15CE : 43F9 0602 9CC0      		lea	(SH2_USER_DATA).l,a1
(1) 1068/FFFFFFFFFFFF15D4 : 263C 0000 FFF8      		move.l	#$00FFF8,d3		; MAX transfer size
(1) 1069/FFFFFFFFFFFF15DA : 78F8                		moveq	#-8,d4			; Filter bits
(1) 1070/FFFFFFFFFFFF15DC : C084                		and.l	d4,d0
(1) 1071/FFFFFFFFFFFF15DE : 2800                		move.l	d0,d4
(1) 1072/FFFFFFFFFFFF15E0 : B883                		cmp.l	d3,d4
(1) 1073/FFFFFFFFFFFF15E2 : 6E02                		bgt.s	.large_pack
(1) 1074/FFFFFFFFFFFF15E4 : 6016                		bra	System_MarsSendDreq	; Small package
(1) 1075/FFFFFFFFFFFF15E6 :                     .large_pack:
(1) 1076/FFFFFFFFFFFF15E6 : 3003                		move.w	d3,d0
(1) 1077/FFFFFFFFFFFF15E8 : 6112                		bsr	System_MarsSendDreq
(1) 1078/FFFFFFFFFFFF15EA : 9883                		sub.l	d3,d4
(1) 1079/FFFFFFFFFFFF15EC : B883                		cmp.l	d3,d4
(1) 1080/FFFFFFFFFFFF15EE : 6CF6                		bge.s	.large_pack
(1) 1081/FFFFFFFFFFFF15F0 : 4A84                		tst.l	d4
(1) 1082/FFFFFFFFFFFF15F2 : 6704                		beq.s	.exit_now
(1) 1083/FFFFFFFFFFFF15F4 : 3004                		move.w	d4,d0
(1) 1084/FFFFFFFFFFFF15F6 : 6004                		bra	System_MarsSendDreq
(1) 1085/FFFFFFFFFFFF15F8 :                     .exit_now:
(1) 1086/FFFFFFFFFFFF15F8 : 6000 FAE4           		bra	System_Render
(1) 1087/FFFFFFFFFFFF15FC :                     
(1) 1088/FFFFFFFFFFFF15FC :                     ; --------------------------------------------------------
(1) 1089/FFFFFFFFFFFF15FC :                     ; System_MarsSendDreq
(1) 1090/FFFFFFFFFFFF15FC :                     ;
(1) 1091/FFFFFFFFFFFF15FC :                     ; Transfers data to the 32X using DREQ
(1) 1092/FFFFFFFFFFFF15FC :                     ;
(1) 1093/FFFFFFFFFFFF15FC :                     ; Input:
(1) 1094/FFFFFFFFFFFF15FC :                     ; a0.l | Source data to transfer
(1) 1095/FFFFFFFFFFFF15FC :                     ; a1.l | Destination in SDRAM
(1) 1096/FFFFFFFFFFFF15FC :                     ; d0.w | Size (MUST end with 0 or 8)
(1) 1097/FFFFFFFFFFFF15FC :                     ;
(1) 1098/FFFFFFFFFFFF15FC :                     ; Uses:
(1) 1099/FFFFFFFFFFFF15FC :                     ; a4-a5,d5-d7
(1) 1100/FFFFFFFFFFFF15FC :                     ;
(1) 1101/FFFFFFFFFFFF15FC :                     ; Notes:
(1) 1102/FFFFFFFFFFFF15FC :                     ; Call this during DISPLAY ONLY, NOT during VBlank.
(1) 1103/FFFFFFFFFFFF15FC :                     ;
(1) 1104/FFFFFFFFFFFF15FC :                     ; * SOME 32X EMULATORS WILL GET STUCK WAITING
(1) 1105/FFFFFFFFFFFF15FC :                     ; FOR DMA EXIT *
(1) 1106/FFFFFFFFFFFF15FC :                     ; --------------------------------------------------------
(1) 1107/FFFFFFFFFFFF15FC :                     
(1) 1108/FFFFFFFFFFFF15FC :                     System_MarsSendDreq:
(1) 1109/FFFFFFFFFFFF15FC : 7C01                		moveq	#1,d6
(1) 1110/FFFFFFFFFFFF15FE : 600A                		bra.s	sys_MSendDreq
(1) 1111/FFFFFFFFFFFF1600 :                     
(1) 1112/FFFFFFFFFFFF1600 :                     ; --------------------------------------------------------
(1) 1113/FFFFFFFFFFFF1600 :                     ; System_MarsUpdate
(1) 1114/FFFFFFFFFFFF1600 :                     ;
(1) 1115/FFFFFFFFFFFF1600 :                     ; Send a small section of RAM to SH2 for updating
(1) 1116/FFFFFFFFFFFF1600 :                     ; the visuals.
(1) 1117/FFFFFFFFFFFF1600 :                     ;
(1) 1118/FFFFFFFFFFFF1600 :                     ; Uses:
(1) 1119/FFFFFFFFFFFF1600 :                     ; d0-d1,a4-a5,d5-d7
(1) 1120/FFFFFFFFFFFF1600 :                     ;
(1) 1121/FFFFFFFFFFFF1600 :                     ; Notes:
(1) 1122/FFFFFFFFFFFF1600 :                     ; Call this during DISPLAY ONLY, NOT during VBlank.
(1) 1123/FFFFFFFFFFFF1600 :                     ; --------------------------------------------------------
(1) 1124/FFFFFFFFFFFF1600 :                     
(1) 1125/FFFFFFFFFFFF1600 :                     System_MarsUpdate:
(1) 1126/FFFFFFFFFFFF1600 : 41F8 C604           		lea	(RAM_MdDreq),a0
(1) 1127/FFFFFFFFFFFF1604 : 303C 0710           		move.w	#sizeof_dreq,d0
(1) 1128/FFFFFFFFFFFF1608 : 7C00                		moveq	#0,d6
(1) 1129/FFFFFFFFFFFF160A :                     
(1) 1130/FFFFFFFFFFFF160A :                     ; --------------------------------------------------------
(1) 1131/FFFFFFFFFFFF160A :                     
(1) 1132/FFFFFFFFFFFF160A :                     sys_MSendDreq:
(1) 1133/FFFFFFFFFFFF160A : 40C7                		move.w	sr,d7
(1) 1134/FFFFFFFFFFFF160C : 007C 0700           		ori.w	#$0700,sr		; Disable interrupts
(1) 1135/FFFFFFFFFFFF1610 : 4BF9 00A1 5100      		lea	(sysmars_reg).l,a5
(1) 1136/FFFFFFFFFFFF1616 : 49ED 0012           		lea	dreqfifo(a5),a4
(1) 1137/FFFFFFFFFFFF161A : 4A86                		tst.l	d6			; CMD zero?
(1) 1138/FFFFFFFFFFFF161C : 670C                		beq.s	.no_src
(1) 1139/FFFFFFFFFFFF161E : 2A09                		move.l	a1,d5
(1) 1140/FFFFFFFFFFFF1620 : 2B45 000C           		move.l	d5,dreqdest(a5)
(1) 1141/FFFFFFFFFFFF1624 : 7A00                		moveq	#0,d5			; Increment a1 for later.
(1) 1142/FFFFFFFFFFFF1626 : 3A00                		move.w	d0,d5
(1) 1143/FFFFFFFFFFFF1628 : D3C5                		add.l	d5,a1
(1) 1144/FFFFFFFFFFFF162A :                     .no_src:
(1) 1145/FFFFFFFFFFFF162A : 1B46 002C           		move.b	d6,comm12(a5)		; d6 - Set CMD mode
(1) 1146/FFFFFFFFFFFF162E : 3B7C 0000 0006      		move.w	#%000,dreqctl(a5)	; Reset 68S
(1) 1147/FFFFFFFFFFFF1634 : 3C00                		move.w	d0,d6			; d6 - Size in bytes
(1) 1148/FFFFFFFFFFFF1636 : E24E                		lsr.w	#1,d6			; (length/2)
(1) 1149/FFFFFFFFFFFF1638 : 3B46 0010           		move.w	d6,dreqlen(a5)		; Set transfer length (size/2)
(1) 1150/FFFFFFFFFFFF163C : 3A06                		move.w	d6,d5			; d5 - (length/2)/4
(1) 1151/FFFFFFFFFFFF163E : E44D                		lsr.w	#2,d5
(1) 1152/FFFFFFFFFFFF1640 : 0445 0001           		subi.w	#1,d5
(1) 1153/FFFFFFFFFFFF1644 : 08ED 0000 0003      		bset	#0,standby(a5)		; Call CMD interrupt to MASTER
(1) 1154/FFFFFFFFFFFF164A : 082D 0006 002C      .wait_bit:	btst	#6,comm12(a5)		; Wait START signal
(1) 1155/FFFFFFFFFFFF1650 : 67F8                		beq.s	.wait_bit
(1) 1156/FFFFFFFFFFFF1652 : 08AD 0006 002C      		bclr	#6,comm12(a5)		; Clear.
(1) 1157/FFFFFFFFFFFF1658 : 3B7C 0004 0006      		move.w	#%100,dreqctl(a5)	; Set 68S
(1) 1158/FFFFFFFFFFFF165E : 3898                .l0:		move.w  (a0)+,(a4)		; *** CRITICAL PART ***
(1) 1159/FFFFFFFFFFFF1660 : 3898                		move.w  (a0)+,(a4)
(1) 1160/FFFFFFFFFFFF1662 : 3898                		move.w  (a0)+,(a4)
(1) 1161/FFFFFFFFFFFF1664 : 3898                		move.w  (a0)+,(a4)
(1) 1162/FFFFFFFFFFFF1666 : 51CD FFF6           		dbf	d5,.l0
(1) 1168/FFFFFFFFFFFF166A : 3B7C 0000 0006      		move.w	#%000,dreqctl(a5)	; Reset 68S
(1) 1169/FFFFFFFFFFFF1670 : 46C7                		move.w	d7,sr			; Reenable interrupts
(1) 1170/FFFFFFFFFFFF1672 : 4E75                		rts
(1) 1172/FFFFFFFFFFFF1674 :                     
(1) 1173/FFFFFFFFFFFF1674 :                     ; ====================================================================
(1) 1174/FFFFFFFFFFFF1674 :                     ; ----------------------------------------------------------------
(1) 1175/FFFFFFFFFFFF1674 :                     ; Shared subs for the add-ons
(1) 1176/FFFFFFFFFFFF1674 :                     ; ----------------------------------------------------------------
(1) 1177/FFFFFFFFFFFF1674 :                     
(1) 1178/FFFFFFFFFFFF1674 :                     ; --------------------------------------------------------
(1) 1179/FFFFFFFFFFFF1674 :                     ; System_GrabRamCode
(1) 1180/FFFFFFFFFFFF1674 :                     ;
(1) 1181/FFFFFFFFFFFF1674 :                     ; Shared routine for MCD, 32X and CD32X.
(1) 1182/FFFFFFFFFFFF1674 :                     ;
(1) 1183/FFFFFFFFFFFF1674 :                     ; Send new code to the USER side of RAM and
(1) 1184/FFFFFFFFFFFF1674 :                     ; jumps into it.
(1) 1185/FFFFFFFFFFFF1674 :                     ;
(1) 1186/FFFFFFFFFFFF1674 :                     ; ** FOR SEGA CD/CD+32X
(1) 1187/FFFFFFFFFFFF1674 :                     ; Input:
(1) 1188/FFFFFFFFFFFF1674 :                     ; a0 - Filename string 8-bytes
(1) 1189/FFFFFFFFFFFF1674 :                     ;
(1) 1190/FFFFFFFFFFFF1674 :                     ; ** FOR SEGA 32X
(1) 1191/FFFFFFFFFFFF1674 :                     ; Input:
(1) 1192/FFFFFFFFFFFF1674 :                     ; a0 - Location of the RAM-code to copy from
(1) 1193/FFFFFFFFFFFF1674 :                     ;      in the $880000/$900000 areas
(1) 1194/FFFFFFFFFFFF1674 :                     ; --------------------------------------------------------
(1) 1195/FFFFFFFFFFFF1674 :                     
(1) 1196/FFFFFFFFFFFF1674 :                     System_GrabRamCode:
(1) 1204/FFFFFFFFFFFF1674 : 43F9 FFFF 2000      		lea	(RAM_UserCode),a1
(1) 1205/FFFFFFFFFFFF167A : 3E3C 7FFF           		move.w	#(MAX_UserCode)-1,d7
(1) 1206/FFFFFFFFFFFF167E :                     .copyme2:
(1) 1207/FFFFFFFFFFFF167E : 12D8                		move.b	(a0)+,(a1)+
(1) 1208/FFFFFFFFFFFF1680 : 51CF FFFC           		dbf	d7,.copyme2
(1) 1209/FFFFFFFFFFFF1684 : 4EF9 FFFF 2000      		jmp	(RAM_UserCode).l
(1) 1213/FFFFFFFFFFFF168A :                     
(1) 1214/FFFFFFFFFFFF168A :                     ; ====================================================================
(1) 1215/FFFFFFFFFFFF168A :                     
     204/FFFFFFFFFFFF168A :                     
     205/FFFFFFFFFFFF168A :                     ; ---------------------------------------------
     206/FFFFFFFFFFFF168A :                     ; Read screen modes
     207/FFFFFFFFFFFF168A :                     ;
     208/FFFFFFFFFFFF168A :                     ;   MD/Pico: Direct ROM jump
     209/FFFFFFFFFFFF168A :                     ; SCD/CD32X: Reads file from disc and
     210/FFFFFFFFFFFF168A :                     ;            transfers code to RAM
     211/FFFFFFFFFFFF168A :                     ;       32X: Read from ROM and copies code to
     212/FFFFFFFFFFFF168A :                     ;            RAM so it's problematic with DMA
     213/FFFFFFFFFFFF168A :                     ;            and the SH2
     214/FFFFFFFFFFFF168A :                     ;
     215/FFFFFFFFFFFF168A :                     ; - Returning in your current screen code will
     216/FFFFFFFFFFFF168A :                     ; loop here.
     217/FFFFFFFFFFFF168A :                     ; - DO NOT JUMP TO SCREEN MODES DIRECTLY
     218/FFFFFFFFFFFF168A :                     ; ---------------------------------------------
     219/FFFFFFFFFFFF168A :                     
     220/FFFFFFFFFFFF168A :                     Md_ReadModes:
     221/FFFFFFFFFFFF168A : 007C 0700           		ori.w	#$0700,sr		; Disable interrupts
     222/FFFFFFFFFFFF168E : 7000                		moveq	#0,d0
     223/FFFFFFFFFFFF1690 : 3038 C458           		move.w	(RAM_ScreenMode).w,d0
     224/FFFFFFFFFFFF1694 : C07C 007F           		and.w	#$7F,d0			; <-- CURRENT LIMIT
     225/FFFFFFFFFFFF1698 : E948                		lsl.w	#4,d0			; * $10
     226/FFFFFFFFFFFF169A : 41FB 000E           		lea	.pick_mode(pc,d0.w),a0	; LEA the filename
     231/FFFFFFFFFFFF169E : 207B 000A           		movea.l	.pick_mode(pc,d0.w),a0	; d0 - ROM location $880000+
     232/FFFFFFFFFFFF16A2 : 4EB9 FFFF 1674      		jsr	(System_GrabRamCode).l
     237/FFFFFFFFFFFF16A8 : 60E0                		bra.s	Md_ReadModes		; Loop on rts
     238/FFFFFFFFFFFF16AA :                     
     239/FFFFFFFFFFFF16AA :                     ; ---------------------------------------------
     240/FFFFFFFFFFFF16AA :                     ; ** ADD SCREEN MODES HERE **
     241/FFFFFFFFFFFF16AA :                     ; ---------------------------------------------
     242/FFFFFFFFFFFF16AA :                     
     243/FFFFFFFFFFFF16AA :                     .pick_mode:
     244/FFFFFFFFFFFF16AA : 008A DC30           		dc.l Md_Screen00	; Cartridge label (unused on CD)
     245/FFFFFFFFFFFF16AE : 5343 5245 454E      		dc.b "SCREEN00.BIN"	; ISO Filename (unused on Cartridge)
         FFFFFFFFFFFF16B4 : 3030 2E42 494E    
     246/FFFFFFFFFFFF16BA : 008A DC30           		dc.l Md_Screen00
     247/FFFFFFFFFFFF16BE : 5343 5245 454E      		dc.b "SCREEN00.BIN"
         FFFFFFFFFFFF16C4 : 3030 2E42 494E    
     248/FFFFFFFFFFFF16CA : 008A DC30           		dc.l Md_Screen00
     249/FFFFFFFFFFFF16CE : 5343 5245 454E      		dc.b "SCREEN00.BIN"
         FFFFFFFFFFFF16D4 : 3030 2E42 494E    
     250/FFFFFFFFFFFF16DA : 008A DC30           		dc.l Md_Screen00
     251/FFFFFFFFFFFF16DE : 5343 5245 454E      		dc.b "SCREEN00.BIN"
         FFFFFFFFFFFF16E4 : 3030 2E42 494E    
     252/FFFFFFFFFFFF16EA : 008A DC30           		dc.l Md_Screen00
     253/FFFFFFFFFFFF16EE :                     
     254/FFFFFFFFFFFF16EE :                     ; ---------------------------------------------
     255/FFFFFFFFFFFF16EE :                     
     257/FFFFFFFFFFFF16EE :                     .end:
     258/FFFFFFFFFFFF16EE : (MACRO)              		erreport "SYSTEM TOP RAM-CODE",(.end-RAM_SystemCode),MAX_SysCode
     259/FFFFFFFFFFFFC692 :                     		dephase
     260/    1FB4 :                     		phase (.end-RAM_SystemCode)+Md_SysCode
     262/    1FB4 :                     Md_SysCode_e:
     263/    1FB4 :                     		align 2
     264/    1FB4 :                     
     265/    1FB4 :                     ; ===========================================================================
     266/    1FB4 :                     ; --------------------------------------------------------
     267/    1FB4 :                     ; Z80 include on Cartridge ONLY (NOT on Disc)
     268/    1FB4 :                     ; --------------------------------------------------------
     269/    1FB4 :                     
     271/    1FB4 :                     
     273/  881FB4 :                     		phase $880000+*		; 32X cartridge: $880000+ area
     275/  881FB4 :                     Z80_CODE:
     277/    1FB4 :                     		dephase
     279/    1FB4 :                     		include "sound/driver/gema_zdrv.asm"
(1)    1/    1FB4 :                     ; ====================================================================
(1)    2/    1FB4 :                     ; --------------------------------------------------------
(1)    3/    1FB4 :                     ; GEMA/Nikona Z80 code v0.9
(1)    4/    1FB4 :                     ; (C)2023-2024 GenesisFan64
(1)    5/    1FB4 :                     ; --------------------------------------------------------
(1)    6/    1FB4 :                     
(1)    7/       0 :                     		phase 0
(1)    8/       0 :                     		cpu Z80		; Enter Z80 CPU
(1)    9/       0 :                     
(1)   10/       0 :                     ; --------------------------------------------------------
(1)   11/       0 :                     ; SETTINGS
(1)   12/       0 :                     ; --------------------------------------------------------
(1)   13/       0 :                     
(1)   14/       0 :                     ; !! = leave as-is unless you know what you are doing.
(1)   15/       0 :                     
(1)   16/       0 : =8H                  MAX_TRFRPZ	equ 8		; !! Max transferRom packets(bytes) **AFFECTS WAVE QUALITY**
(1)   17/       0 : =20H                 MAX_TRKCHN	equ 32		; !! Max internal shared tracker channel slots *** LIMTED to 32 ***
(1)   18/       0 : =20H                 MAX_RCACH	equ 20h		; !! Max storage for ROM pattern data *** 1-BIT SIZES ONLY, MUST BE ALIGNED ***
(1)   19/       0 : =8H                  MAX_BUFFNTRY	equ 4*2		; !! nikona_BuffList buffer entry size
(1)   20/       0 :                     
(1)   21/       0 : =18H                 MAX_TBLSIZE	equ 18h		; Max size for chip tables
(1)   22/       0 : =1AH                 MAX_TRKINDX	equ 26		; Max channel indexes per buffer: 4PSG+6FM+8PCM+8PWM
(1)   23/       0 : =8H                  MAX_BLOCKS	equ 8		; Max Cache'd ROM blocks per track
(1)   24/       0 :                     
(1)   25/       0 : =10H                 MAX_ZCMND	equ 10h		; Size of commands array, ** 1-bit SIZES ONLY **
(1)   26/       0 : =0H                  ZSET_TESTME	equ 0		; Set to 1 to check the DAC playback for quality by ear
(1)   27/       0 :                     
(1)   28/       0 :                     ; --------------------------------------------------------
(1)   29/       0 :                     ; Structs
(1)   30/       0 :                     ; --------------------------------------------------------
(1)   31/       0 :                     
(1)   32/       0 :                     ; trkBuff struct: 00h-30h
(1)   33/       0 :                     ; unused bytes are free.
(1)   34/       0 :                     ;
(1)   35/       0 :                     ; trk_Status: %ERP- ---0
(1)   36/       0 :                     ; E - enabled
(1)   37/       0 :                     ; R - Init|Restart track
(1)   38/       0 :                     ; P - refill-on-playback
(1)   39/       0 :                     ; 0 - Use global sub-beats
(1)   40/       0 : =0H                  trk_Status	equ 00h	; ** Track Status and Flags (MUST BE at 00h)
(1)   41/       0 : =1H                  trk_SeqId	equ 01h ; ** Track ID to play.
(1)   42/       0 : =2H                  trk_SetBlk	equ 02h	; ** Start on this block
(1)   43/       0 : =3H                  trk_TickSet	equ 03h	; ** Ticks for this track
(1)   44/       0 : =4H                  trk_Blocks	equ 04h ; ** [W] Current track's blocks
(1)   45/       0 : =6H                  trk_Patt	equ 06h ; ** [W] Current track's heads and patterns
(1)   46/       0 : =8H                  trk_Cach	equ 08h	; ** [W] Current track's cache notedata
(1)   47/       0 : =0AH                 trk_Read	equ 0Ah	; [W] Track current pattern read
(1)   48/       0 : =0CH                 trk_Rows	equ 0Ch	; [W] Track row counter
(1)   49/       0 : =0EH                 trk_VolMaster	equ 0Eh ; [W] Master volume for this track slot (00-max), +80h update
(1)   50/       0 :                     
(1)   51/       0 : =10H                 trk_cachHalf	equ 10h ; ROM-cache halfcheck
(1)   52/       0 : =11H                 trk_rowPause	equ 11h	; Row-pause timer
(1)   53/       0 : =12H                 trk_tickTmr	equ 12h	; Ticks timer
(1)   54/       0 : =13H                 trk_currBlk	equ 13h	; Current block
(1)   55/       0 : =14H                 trk_Priority	equ 14h ; Priority level for this buffer
(1)   56/       0 : =15H                 trk_BankIns	equ 15h ; Instrument bank
(1)   57/       0 : =16H                 trk_BankHeads	equ 16h ; Header bank
(1)   58/       0 : =17H                 trk_BankBlk	equ 17h	; Block bank
(1)   59/       0 : =18H                 trk_MaxChnl	equ 18h ; MAX channels used in this track
(1)   60/       0 : =19H                 trk_VolTarget	equ 19h	; Target fade volume
(1)   61/       0 : =1AH                 trk_RomPattRead	equ 1Ah ; [3b] ROM current pattern data to be cache'd
(1)   62/       0 : =1DH                 trk_RomPatt	equ 1Dh ; [3b] ROM BASE pattern data
(1)   63/       0 : =20H                 trk_RomInst	equ 20h ; [3b] ROM instrument data
(1)   64/       0 : =23H                 trk_RomBlks	equ 23h ; [3b] ROM blocks data
(1)   65/       0 : =26H                 trk_ChnIndx	equ 26h	; CHANNEL INDEXES START HERE
(1)   66/       0 :                     
(1)   67/       0 :                     ; chnBuff struct, 8 bytes ONLY
(1)   68/       0 :                     ;
(1)   69/       0 :                     ; chnl_Flags: E0LRevin
(1)   70/       0 :                     ; E  - Channel is active
(1)   71/       0 :                     ; LR - Global left/Right panning bits (0-ON 1-OFF)
(1)   72/       0 :                     ; e  - Effect*
(1)   73/       0 :                     ; v  - Volume*
(1)   74/       0 :                     ; i  - Intrument*
(1)   75/       0 :                     ; n  - Note*
(1)   76/       0 :                     
(1)   77/       0 : =0H                  chnl_Flags	equ 0	; Playback flags ** DON'T MOVE **
(1)   78/       0 : =1H                  chnl_Chip	equ 1	; Current Chip ID + priority for this channel
(1)   79/       0 : =2H                  chnl_Note	equ 2
(1)   80/       0 : =3H                  chnl_Ins	equ 3	; Starting from 1, 0 is invalid
(1)   81/       0 : =4H                  chnl_Vol	equ 4	; MAX to MIN: 40h-00h
(1)   82/       0 : =5H                  chnl_EffId	equ 5
(1)   83/       0 : =6H                  chnl_EffArg	equ 6
(1)   84/       0 : =7H                  chnl_Type	equ 7	; Impulse-note update bits
(1)   85/       0 :                     
(1)   86/       0 :                     ; --------------------------------------------------------
(1)   87/       0 :                     ; Variables
(1)   88/       0 :                     ; --------------------------------------------------------
(1)   89/       0 :                     
(1)   90/       0 :                     ; Z80 opcode labels for the wave playback routines
(1)   91/       0 : =0H                  zopcNop		equ 00h
(1)   92/       0 : =8H                  zopcEx		equ 08h
(1)   93/       0 : =0C9H                zopcRet		equ 0C9h
(1)   94/       0 : =0D9H                zopcExx		equ 0D9h		; (dac_me ONLY)
(1)   95/       0 : =0F5H                zopcPushAf	equ 0F5h		; (dac_fill ONLY)
(1)   96/       0 :                     
(1)   97/       0 :                     ; PSG external control
(1)   98/       0 : =0H                  COM		equ 0
(1)   99/       0 : =4H                  LEV		equ 4
(1)  100/       0 : =8H                  ATK		equ 8
(1)  101/       0 : =0CH                 DKY		equ 12
(1)  102/       0 : =10H                 SLV		equ 16
(1)  103/       0 : =14H                 RRT		equ 20
(1)  104/       0 : =18H                 MODE		equ 24
(1)  105/       0 : =1CH                 DTL		equ 28
(1)  106/       0 : =20H                 DTH		equ 32
(1)  107/       0 : =24H                 ALV		equ 36
(1)  108/       0 : =28H                 FLG		equ 40
(1)  109/       0 : =2CH                 TMR		equ 44
(1)  110/       0 : =30H                 PVOL		equ 48
(1)  111/       0 : =34H                 PARP		equ 52
(1)  112/       0 : =38H                 PTMR		equ 56
(1)  113/       0 :                     
(1)  114/       0 :                     ; PWM control
(1)  115/       0 :                     ; PWCOM		equ 0
(1)  116/       0 :                     ; PWPTH_V	equ 8	; Volume | Pitch MSB (VVVVVVPPb)
(1)  117/       0 :                     ; PWPHL		equ 16	; Pitch LSB
(1)  118/       0 :                     ; PWOUTF	equ 24	; Output mode/bits | 32-bit address (%SlLRxiix) ii=$02 or $06
(1)  119/       0 :                     ; PWINSH	equ 32	; **
(1)  120/       0 :                     ; PWINSM	equ 40	; **
(1)  121/       0 :                     ; PWINSL	equ 48	; **
(1)  122/       0 :                     
(1)  123/       0 :                     ; ====================================================================
(1)  124/       0 :                     ; --------------------------------------------------------
(1)  125/       0 :                     ; Code starts here
(1)  126/       0 :                     ; --------------------------------------------------------
(1)  127/       0 :                     
(1)  128/       0 : F3                  		di			; Disable interrputs first
(1)  129/       1 : ED 56               		im	1		; Set Interrupt mode 1
(1)  130/       3 : 31 00 20            		ld	sp,2000h	; Set stack at the end of Z80
(1)  131/       6 : 18 48               		jr	z80_init	; Jump to z80_init
(1)  132/       8 :                     
(1)  133/       8 :                     ; --------------------------------------------------------
(1)  134/       8 :                     ; RST 8 (dac_me)
(1)  135/       8 :                     ; *** self-modifiable code ***
(1)  136/       8 :                     ;
(1)  137/       8 :                     ; Writes wave data to DAC using data stored
(1)  138/       8 :                     ; on the wave buffer, call this routine every 6 or 8
(1)  139/       8 :                     ; instructions to keep the samplerate stable.
(1)  140/       8 :                     ;
(1)  141/       8 :                     ; Input (EXX):
(1)  142/       8 :                     ;  c - WAVE buffer MSB
(1)  143/       8 :                     ; de - Pitch (xx.00)
(1)  144/       8 :                     ; h  - WAVE buffer LSB (as xx.00)
(1)  145/       8 :                     ;
(1)  146/       8 :                     ; Uses (EXX):
(1)  147/       8 :                     ; b
(1)  148/       8 :                     ;
(1)  149/       8 :                     ; Notes:
(1)  150/       8 :                     ; ONLY USE dac_on and dac_off to control
(1)  151/       8 :                     ; wave playback.
(1)  152/       8 :                     ;
(1)  153/       8 :                     ; call dac_on to enable wave playback, locks FM6
(1)  154/       8 :                     ; and
(1)  155/       8 :                     ; call dac_off to disable wave and unlock FM6.
(1)  156/       8 :                     ; --------------------------------------------------------
(1)  157/       8 :                     
(1)  158/       8 :                     ; Samplerate is at 16000hz with minimal quality loss.
(1)  159/       8 :                     ; 		org 8
(1)  160/       8 : D9                  dac_me:		exx			; * swap regs <-- Changes between EXX(play) and RET(stop)
(1)  161/       9 : 08                  		ex	af,af'		; Swap af
(1)  162/       A : 45                  		ld	b,l		; Save pitch .00 to b
(1)  163/       B : 6C                  		ld	l,h		; l - xx.00 to 00xx
(1)  164/       C : 61                  		ld	h,c		; h - Wave buffer MSB + 00xx
(1)  165/       D : 3E 2A               		ld	a,2Ah		; YM register 2Ah
(1)  166/       F : 32 00 40            		ld	(Zym_ctrl_1),a	; Set DAC write
(1)  167/      12 : 7E                  		ld	a,(hl)		; Read wave byte
(1)  168/      13 : 32 01 40            		ld	(Zym_data_1),a	; Write it to DAC
(1)  169/      16 : 65                  		ld	h,l		; get hl back
(1)  170/      17 : 68                  		ld	l,b		; Get .00 back from b to l
(1)  171/      18 : 19                  		add	hl,de		; Pitch increment hl
(1)  172/      19 : 08                  		ex	af,af'		; Return af
(1)  173/      1A : D9                  		exx			; * swap regs
(1)  174/      1B : C9                  		ret
(1)  175/      1C :                     
(1)  176/      1C :                     ; --------------------------------------------------------
(1)  177/      1C :                     ; 1Ch - Master tracklist pointer
(1)  178/      1C :                     gemaMstrListPos:
(1)  179/      1C : 00                  		db 0				; ** 32-bit 68k address **
(1)  180/      1D : 00                  		db 0
(1)  181/      1E : 00                  		db 0
(1)  182/      1F : 00                  		db 0
(1)  183/      20 :                     
(1)  184/      20 :                     ; --------------------------------------------------------
(1)  185/      20 :                     ; RST 20h (dac_me)
(1)  186/      20 :                     ; *** self-modifiable code ***
(1)  187/      20 :                     ;
(1)  188/      20 :                     ; Checks if the WAVE cache needs refilling to keep
(1)  189/      20 :                     ; it playing.
(1)  190/      20 :                     ; --------------------------------------------------------
(1)  191/      20 :                     
(1)  192/      20 :                     ; 		org 20h
(1)  193/      20 : F5                  dac_fill:	push	af		; <-- Changes between PUSH AF(play) and RET(stop)
(1)  194/      21 : 3A 97 1F            		ld	a,(dDacFifoMid)	; a - Get half-way value
(1)  195/      24 : D9                  		exx			; * swap regs
(1)  196/      25 : AC                  		xor	h		; Grab LSB.00
(1)  197/      26 : D9                  		exx			; * swap regs
(1)  198/      27 : E6 80               		and	80h		; Check if bit changed
(1)  199/      29 : C4 5F 14            		call	nz,dac_refill	; If yes, Refill and update LSB to check
(1)  200/      2C : F1                  		pop	af
(1)  201/      2D : C9                  		ret
(1)  202/      2E :                     
(1)  203/      2E :                     ; --------------------------------------------------------
(1)  204/      2E :                     ; 02Eh - User read/write values
(1)  205/      2E : 00                  commZWrite	db 0			; 2Eh: cmd fifo wptr (from 68k)
(1)  206/      2F : 00                  commZRomBlk	db 0			; 2Fh: 68k ROM block flag
(1)  207/      30 : 00                  cdRamLen	db 0			; 30h: Size + status flag
(1)  208/      31 : 00 00               cdRamDst	db 0,0			; 31h: ** Z80 destination
(1)  209/      33 : 00 00               cdRamSrc	db 0,0			; 33h: ** 68k 24-bit source
(1)  210/      35 : 00                  cdRamSrcB	db 0			; 35h: **
(1)  211/      36 : 00                  mcdBlock	db 0			; 36h: Flag to BLOCK SCD comm
(1)  212/      37 : 00                  marsBlock	db 0			; 37h: Flag to BLOCK PWM transfers.
(1)  213/      38 :                     
(1)  214/      38 :                     ; --------------------------------------------------------
(1)  215/      38 :                     ; Z80 Interrupt at 0038h
(1)  216/      38 :                     ; --------------------------------------------------------
(1)  217/      38 :                     
(1)  218/      38 :                     ; 		org 38h			; Align 38h
(1)  219/      38 : ED 73 80 1F         		ld	(tickSpSet),sp	; Write TICK flag using sp (xx1F, read as tickFlag+1)
(1)  220/      3C : F3                  		di			; Disable interrupt
(1)  221/      3D : C9                  		ret
(1)  222/      3E :                     
(1)  223/      3E :                     ; --------------------------------------------------------
(1)  224/      3E :                     ; 03Eh - More user settings
(1)  225/      3E : 00                  palMode		db 0			; 3Eh: PAL mode flag
(1)  226/      3F : 00                  freeFlag	db 0
(1)  227/      40 :                     
(1)  228/      40 :                     ; --------------------------------------------------------
(1)  229/      40 :                     ; 68K Read/Write area at 40h
(1)  230/      40 :                     ; --------------------------------------------------------
(1)  231/      40 :                     
(1)  232/      40 :                     ; 		org 40h
(1)  233/      40 :                     commZfifo	ds MAX_ZCMND			; Buffer for commands from 68k side
(1)  234/      50 :                     
(1)  235/      50 :                     ; --------------------------------------------------------
(1)  236/      50 :                     ; Initialize
(1)  237/      50 :                     ; --------------------------------------------------------
(1)  238/      50 :                     
(1)  239/      50 :                     z80_init:
(1)  240/      50 : CD 34 11            		call	gema_init		; Init values
(1)  241/      53 : FB                  		ei
(1)  242/      54 :                     
(1)  243/      54 :                     ; --------------------------------------------------------
(1)  244/      54 :                     ; MAIN LOOP
(1)  245/      54 :                     ; --------------------------------------------------------
(1)  246/      54 :                     
(1)  247/      54 :                     drv_loop:
(1)  248/      54 : CF                  		rst	8
(1)  249/      55 : CD A8 11            		call	get_tick		; Check tick on VBlank
(1)  250/      58 : E7                  		rst	20h			; Refill wave here
(1)  251/      59 : CF                  		rst	8
(1)  252/      5A : 06 00               		ld	b,0			; b - Reset current flags (beat|tick)
(1)  253/      5C : 3A 82 1F            		ld	a,(tickCnt)		; Decrement tick counter
(1)  254/      5F : D6 01               		sub	1
(1)  255/      61 : 38 0B               		jr	c,.noticks		; If non-zero, no tick passed.
(1)  256/      63 : 32 82 1F            		ld	(tickCnt),a
(1)  257/      66 : CD 81 12            		call	chip_env		; Process PSG and YM
(1)  258/      69 : CD A8 11            		call	get_tick		; Check for another tick
(1)  259/      6C : 06 01               		ld 	b,01b			; Set TICK and clear BEAT flags (01b)
(1)  260/      6E :                     .noticks:
(1)  261/      6E : 3A A1 1F            		ld	a,(sbeatAcc+1)		; check beat counter (scaled by tempo)
(1)  262/      71 : D6 01               		sub	1
(1)  263/      73 : 38 06               		jr	c,.nobeats
(1)  264/      75 : CF                  		rst	8
(1)  265/      76 : 32 A1 1F            		ld	(sbeatAcc+1),a		; 1/24 beat passed.
(1)  266/      79 : CB C8               		set	1,b			; Set BEAT (10b) flag
(1)  267/      7B :                     .nobeats:
(1)  268/      7B : CF                  		rst	8
(1)  269/      7C : 78                  		ld	a,b			; Any beat/tick bits set?
(1)  270/      7D : B7                  		or	a
(1)  271/      7E : 28 14               		jr	z,.neither
(1)  272/      80 : 32 96 1F            		ld	(currTickBits),a	; Save BEAT/TICK bits
(1)  273/      83 : CF                  		rst	8
(1)  274/      84 : CD A8 11            		call	get_tick
(1)  275/      87 : CD 58 06            		call	set_chips		; Send changes to sound chips
(1)  276/      8A : CD A8 11            		call	get_tick
(1)  277/      8D : CF                  		rst	8
(1)  278/      8E : CD 4E 02            		call	upd_track		; Update track data
(1)  279/      91 : CD A8 11            		call	get_tick
(1)  280/      94 :                     .neither:
(1)  281/      94 : CF                  		rst	8
(1)  283/      95 : CD 95 10            		call	zmars_send		; External communication
(1)  285/      98 : CD A8 11            		call	get_tick
(1)  286/      9B :                     .next_cmd:
(1)  287/      9B : 3A 2E 00            		ld	a,(commZWrite)		; Check if commZ R/W indexes
(1)  288/      9E : 47                  		ld	b,a			; are in the same spot a == b
(1)  289/      9F : 3A 85 1F            		ld	a,(commZRead)
(1)  290/      A2 : B8                  		cp	b			; If equal, loop back.
(1)  291/      A3 : 28 AF               		jr	z,drv_loop
(1)  292/      A5 : CF                  		rst	8
(1)  293/      A6 : CD BE 00            		call	.grab_arg		; Read staring flag -1
(1)  294/      A9 : FE FF               		cp	-1			; Got START -1?
(1)  295/      AB : 20 A7               		jr	nz,drv_loop		; If not, end of commands
(1)  296/      AD : CD BE 00            		call	.grab_arg		; Read command number
(1)  297/      B0 : 87                  		add	a,a			; ID * 2
(1)  298/      B1 : 21 DD 00            		ld	hl,.list		; Index-jump...
(1)  299/      B4 : 16 00               		ld	d,0
(1)  300/      B6 : 5F                  		ld	e,a
(1)  301/      B7 : 19                  		add	hl,de
(1)  302/      B8 : 7E                  		ld	a,(hl)
(1)  303/      B9 : 23                  		inc	hl
(1)  304/      BA : 66                  		ld	h,(hl)
(1)  305/      BB : CF                  		rst	8
(1)  306/      BC : 6F                  		ld	l,a
(1)  307/      BD : E9                  		jp	(hl)
(1)  308/      BE :                     
(1)  309/      BE :                     ; --------------------------------------------------------
(1)  310/      BE :                     ; Read cmd byte, auto re-rolls to 3Fh
(1)  311/      BE :                     ; --------------------------------------------------------
(1)  312/      BE :                     
(1)  313/      BE :                     .grab_arg:
(1)  314/      BE : D5                  		push	de
(1)  315/      BF : E5                  		push	hl
(1)  316/      C0 :                     .getcbytel:
(1)  317/      C0 : 3A 2E 00            		ld	a,(commZWrite)
(1)  318/      C3 : 57                  		ld	d,a
(1)  319/      C4 : CF                  		rst	8
(1)  320/      C5 : 3A 85 1F            		ld	a,(commZRead)
(1)  321/      C8 : BA                  		cp	d		; commZ R/W indexes are the same?
(1)  322/      C9 : 28 F5               		jr	z,.getcbytel	; wait until these counters change.
(1)  323/      CB : 16 00               		ld	d,0
(1)  324/      CD : 5F                  		ld	e,a
(1)  325/      CE : 21 40 00            		ld	hl,commZfifo	; Read commZ list + index
(1)  326/      D1 : 19                  		add	hl,de
(1)  327/      D2 : CF                  		rst	8
(1)  328/      D3 : 3C                  		inc	a
(1)  329/      D4 : E6 0F               		and	MAX_ZCMND-1	; ** commZ list buffer limit
(1)  330/      D6 : 32 85 1F            		ld	(commZRead),a
(1)  331/      D9 : 7E                  		ld	a,(hl)		; a - got this byte from the buffer
(1)  332/      DA : E1                  		pop	hl
(1)  333/      DB : D1                  		pop	de
(1)  334/      DC : C9                  		ret
(1)  335/      DD :                     
(1)  336/      DD :                     ; --------------------------------------------------------
(1)  337/      DD :                     
(1)  338/      DD :                     .list:
(1)  339/      DD : ED 00               		dw .cmnd_0		; 00h -
(1)  340/      DF : F0 00               		dw .cmnd_1		; 01h - Set Master tracklist
(1)  341/      E1 : 09 01               		dw .cmnd_2		; 02h - Play by track number
(1)  342/      E3 : 50 01               		dw .cmnd_3		; 03h - Stop by track number
(1)  343/      E5 : ED 00               		dw .cmnd_0		; 04h - **
(1)  344/      E7 : 81 01               		dw .cmnd_5		; 05h - Fade volume (FadeIn/FadeOut)
(1)  345/      E9 : C1 01               		dw .cmnd_6		; 06h - Set maximum volume to slot
(1)  346/      EB : 04 02               		dw .cmnd_7		; 07h - Set GLOBAL sub-beats
(1)  347/      ED :                     
(1)  348/      ED :                     ; --------------------------------------------------------
(1)  349/      ED :                     ; Command 00h
(1)  350/      ED :                     ;
(1)  351/      ED :                     ; Reserved for TESTING purposes.
(1)  352/      ED :                     ; --------------------------------------------------------
(1)  353/      ED :                     
(1)  354/      ED :                     .cmnd_0:
(1)  355/      ED :                     ; 		ld	a,DacIns_TEST>>16
(1)  356/      ED :                     ; 		ld	hl,(DacIns_TEST+6)&0FFFFh
(1)  357/      ED :                     ; 		ld	(wave_Start),hl
(1)  358/      ED :                     ; 		ld	(wave_Start+2),a
(1)  359/      ED :                     ; 		ld	a,02h
(1)  360/      ED :                     ; 		ld	hl,04000h
(1)  361/      ED :                     ; 		ld	(wave_Len),hl
(1)  362/      ED :                     ; 		ld	(wave_Len+2),a
(1)  363/      ED :                     ; 		ld	bc,0
(1)  364/      ED :                     ; 		ld	(wave_Loop),bc
(1)  365/      ED :                     ; 		ld	hl,100h
(1)  366/      ED :                     ; 		ld	(wave_Pitch),hl
(1)  367/      ED :                     ; 		ld	a,1
(1)  368/      ED :                     ; 		ld	(wave_Flags),a
(1)  369/      ED :                     ; 		call	dac_play
(1)  370/      ED :                     
(1)  371/      ED :                     ; 		ld	iy,trkBuff_0
(1)  372/      ED :                     ; 		ld	(iy+trk_VolMaster),64-16
(1)  373/      ED :                     ; 		ld	(iy+trk_VolTarget),64
(1)  374/      ED :                     
(1)  375/      ED : C3 9B 00            		jp	.next_cmd
(1)  376/      F0 :                     
(1)  377/      F0 :                     ; --------------------------------------------------------
(1)  378/      F0 :                     ; Command 01h:
(1)  379/      F0 :                     ;
(1)  380/      F0 :                     ; Set the Track MASTER-list.
(1)  381/      F0 :                     ; --------------------------------------------------------
(1)  382/      F0 :                     
(1)  383/      F0 :                     .cmnd_1:
(1)  384/      F0 : 21 1F 00            		ld	hl,gemaMstrListPos+3	; 32-bit big endian
(1)  385/      F3 : CD BE 00            		call	.grab_arg		; $000000xx
(1)  386/      F6 : 77                  		ld	(hl),a
(1)  387/      F7 : 2B                  		dec	hl
(1)  388/      F8 : CD BE 00            		call	.grab_arg		; $0000xx00
(1)  389/      FB : 77                  		ld	(hl),a
(1)  390/      FC : 2B                  		dec	hl
(1)  391/      FD : CD BE 00            		call	.grab_arg		; $00xx0000
(1)  392/     100 : 77                  		ld	(hl),a
(1)  393/     101 : 2B                  		dec	hl
(1)  394/     102 : CD BE 00            		call	.grab_arg		; $xx000000 (filler)
(1)  395/     105 : 77                  		ld	(hl),a
(1)  396/     106 : C3 9B 00            		jp	.next_cmd
(1)  397/     109 :                     
(1)  398/     109 :                     ; --------------------------------------------------------
(1)  399/     109 :                     ; Command 02h:
(1)  400/     109 :                     ;
(1)  401/     109 :                     ; Make new track by sequence number
(1)  402/     109 :                     ;
(1)  403/     109 :                     ; Arguments:
(1)  404/     109 :                     ; SeqID,BlockPos,SlotIndex(If -1 autofill)
(1)  405/     109 :                     ; --------------------------------------------------------
(1)  406/     109 :                     
(1)  407/     109 :                     .cmnd_2:
(1)  408/     109 : CD BE 00            		call	.grab_arg		; d0: Sequence ID
(1)  409/     10C : 4F                  		ld	c,a			; copy as c
(1)  410/     10D : CD BE 00            		call	.grab_arg		; d1: Block from
(1)  411/     110 : 47                  		ld	b,a			; copy as b
(1)  412/     111 : CF                  		rst	8
(1)  413/     112 : CD BE 00            		call	.grab_arg		; d2: Slot index
(1)  414/     115 : FD 21 D8 16         		ld	iy,nikona_BuffList	; iy - Slot buffer list
(1)  415/     119 : FE FF               		cp	-1			; if d2 == -1, search free slot
(1)  416/     11B : 28 0A               		jr	z,.srch_mode
(1)  417/     11D : FE 03               		cp	(nikona_BuffList_e-nikona_BuffList)/MAX_BUFFNTRY	; If maxed out slots
(1)  418/     11F : D2 9B 00            		jp	nc,.next_cmd
(1)  419/     122 : CD 15 02            		call	.cmnd_rdslot
(1)  420/     125 : 18 1B               		jr	.wrtto_slot
(1)  421/     127 :                     ; -1
(1)  422/     127 :                     .srch_mode:
(1)  423/     127 : 16 00               		ld	d,0
(1)  424/     129 :                     .next:
(1)  425/     129 : FD 7E 00            		ld	a,(iy)
(1)  426/     12C : FE FF               		cp	-1			; End of list?
(1)  427/     12E : CA 9B 00            		jp	z,.next_cmd		; Then skip, no free slot.
(1)  428/     131 : FD 66 01            		ld	h,(iy+1)		; hl - Current track slot
(1)  429/     134 : 6F                  		ld	l,a
(1)  430/     135 : CF                  		rst	8
(1)  431/     136 : 7E                  		ld	a,(hl)			; trk_Status: Is this slot free == 0?
(1)  432/     137 : B7                  		or	a
(1)  433/     138 : 28 08               		jr	z,.wrtto_slot
(1)  434/     13A : 11 08 00            		ld	de,MAX_BUFFNTRY		; Search the next slot from the buff list
(1)  435/     13D : FD 19               		add	iy,de
(1)  436/     13F : CF                  		rst	8
(1)  437/     140 : 18 E7               		jr	.next
(1)  438/     142 :                     .wrtto_slot:
(1)  439/     142 : 36 C0               		ld	(hl),0C0h		; ** Write trk_Status flags: Enable+Restart
(1)  440/     144 : 23                  		inc	hl
(1)  441/     145 : CF                  		rst	8
(1)  442/     146 : 71                  		ld	(hl),c			; ** write trk_SeqId
(1)  443/     147 : 23                  		inc	hl
(1)  444/     148 : 70                  		ld	(hl),b			; ** write trk_SetBlk
(1)  445/     149 : 79                  		ld	a,c
(1)  446/     14A : CD 2A 06            		call	get_RomTrcks		; ** ROM READ: Get track list
(1)  447/     14D : C3 9B 00            		jp	.next_cmd
(1)  448/     150 :                     
(1)  449/     150 :                     ; --------------------------------------------------------
(1)  450/     150 :                     ; Command 03h:
(1)  451/     150 :                     ;
(1)  452/     150 :                     ; Stop track with the same sequence number
(1)  453/     150 :                     ;
(1)  454/     150 :                     ; SeqID,SlotIndex(-1 allslots)
(1)  455/     150 :                     ; --------------------------------------------------------
(1)  456/     150 :                     
(1)  457/     150 :                     .cmnd_3:
(1)  458/     150 : CD BE 00            		call	.grab_arg		; d0: Sequence ID
(1)  459/     153 : 4F                  		ld	c,a			; copy to c
(1)  460/     154 : CD BE 00            		call	.grab_arg		; d1: Slot index
(1)  461/     157 : FD 21 D8 16         		ld	iy,nikona_BuffList	; iy - Slot buffer list
(1)  462/     15B : FE FF               		cp	-1			; if -1, search for all with same ID
(1)  463/     15D : 28 0E               		jr	z,.srch_del
(1)  464/     15F : FE 03               		cp	(nikona_BuffList_e-nikona_BuffList)/MAX_BUFFNTRY	; If maxed out slots
(1)  465/     161 : D2 9B 00            		jp	nc,.next_cmd
(1)  466/     164 : CD 15 02            		call	.cmnd_rdslot
(1)  467/     167 : CD 7A 01            		call	.wrtto_del
(1)  468/     16A : C3 9B 00            		jp	.next_cmd
(1)  469/     16D :                     ; -1
(1)  470/     16D :                     .srch_del:
(1)  471/     16D : CD 28 02            		call	.srch_for
(1)  472/     170 : FE FF               		cp	-1
(1)  473/     172 : CA 9B 00            		jp	z,.next_cmd
(1)  474/     175 : CD 7A 01            		call	.wrtto_del
(1)  475/     178 : 18 F3               		jr	.srch_del
(1)  476/     17A :                     .wrtto_del:
(1)  477/     17A : 36 FF               		ld	(hl),-1		; -1 flag, stop channel and clear slot
(1)  478/     17C : 23                  		inc	hl
(1)  479/     17D : 36 FF               		ld	(hl),-1		; Reset seqId
(1)  480/     17F : CF                  		rst	8
(1)  481/     180 : C9                  		ret
(1)  482/     181 :                     
(1)  483/     181 :                     ; --------------------------------------------------------
(1)  484/     181 :                     ; Command 05h:
(1)  485/     181 :                     ;
(1)  486/     181 :                     ; Fade volume (FadeIn/FadeOut)
(1)  487/     181 :                     ;
(1)  488/     181 :                     ; Arguments:
(1)  489/     181 :                     ; TargetVol,SlotIndex(If -1 autofill)
(1)  490/     181 :                     ; --------------------------------------------------------
(1)  491/     181 :                     
(1)  492/     181 :                     .cmnd_5:
(1)  493/     181 : CD BE 00            		call	.grab_arg		; d0: Master volume
(1)  494/     184 : 4F                  		ld	c,a			; copy to c
(1)  495/     185 : CD BE 00            		call	.grab_arg		; d1: Slot index
(1)  496/     188 : FD 21 D8 16         		ld	iy,nikona_BuffList	; iy - Slot buffer list
(1)  497/     18C : FE FF               		cp	-1			; if -1, search for all with same ID
(1)  498/     18E : 28 0E               		jr	z,.srch_fvol
(1)  499/     190 : FE 03               		cp	(nikona_BuffList_e-nikona_BuffList)/MAX_BUFFNTRY	; If maxed out slots
(1)  500/     192 : D2 9B 00            		jp	nc,.next_cmd
(1)  501/     195 : CD 15 02            		call	.cmnd_rdslot
(1)  502/     198 : CD B8 01            		call	.wrtto_fvol
(1)  503/     19B : C3 9B 00            		jp	.next_cmd
(1)  504/     19E :                     ; -1
(1)  505/     19E :                     .srch_fvol:
(1)  506/     19E : 11 08 00            		ld	de,MAX_BUFFNTRY
(1)  507/     1A1 :                     .next_fv:
(1)  508/     1A1 : FD 7E 00            		ld	a,(iy)
(1)  509/     1A4 : FE FF               		cp	-1
(1)  510/     1A6 : CA 9B 00            		jp	z,.next_cmd
(1)  511/     1A9 : FD 66 01            		ld	h,(iy+1)
(1)  512/     1AC : 6F                  		ld	l,a
(1)  513/     1AD : CF                  		rst	8
(1)  514/     1AE : FD 19               		add	iy,de
(1)  515/     1B0 : E5                  		push	hl
(1)  516/     1B1 : DD E1               		pop	ix
(1)  517/     1B3 : CD B8 01            		call	.wrtto_fvol
(1)  518/     1B6 : 18 E9               		jr	.next_fv
(1)  519/     1B8 :                     .wrtto_fvol:
(1)  520/     1B8 : DD 71 19            		ld	(ix+trk_VolTarget),c
(1)  521/     1BB : DD 36 0F 00         		ld	(ix+trk_VolMaster+1),0
(1)  522/     1BF : CF                  		rst	8
(1)  523/     1C0 : C9                  		ret
(1)  524/     1C1 :                     
(1)  525/     1C1 :                     ; --------------------------------------------------------
(1)  526/     1C1 :                     ; Command 06h:
(1)  527/     1C1 :                     ;
(1)  528/     1C1 :                     ; Set track's master volume
(1)  529/     1C1 :                     ;
(1)  530/     1C1 :                     ; Arguments:
(1)  531/     1C1 :                     ; MasterVol,SlotIndex(If -1 autofill)
(1)  532/     1C1 :                     ; --------------------------------------------------------
(1)  533/     1C1 :                     
(1)  534/     1C1 :                     .cmnd_6:
(1)  535/     1C1 : CD BE 00            		call	.grab_arg		; d0: Master volume
(1)  536/     1C4 : 4F                  		ld	c,a			; copy to c
(1)  537/     1C5 : CD BE 00            		call	.grab_arg		; d1: Slot index
(1)  538/     1C8 : FD 21 D8 16         		ld	iy,nikona_BuffList	; iy - Slot buffer list
(1)  539/     1CC : FE FF               		cp	-1			; if -1, search for all with same ID
(1)  540/     1CE : 28 0E               		jr	z,.srch_vol
(1)  541/     1D0 : FE 03               		cp	(nikona_BuffList_e-nikona_BuffList)/MAX_BUFFNTRY	; If maxed out slots
(1)  542/     1D2 : D2 9B 00            		jp	nc,.next_cmd
(1)  543/     1D5 : CD 15 02            		call	.cmnd_rdslot
(1)  544/     1D8 : CD F8 01            		call	.wrtto_vol
(1)  545/     1DB : C3 9B 00            		jp	.next_cmd
(1)  546/     1DE :                     ; -1
(1)  547/     1DE :                     .srch_vol:
(1)  548/     1DE : 11 08 00            		ld	de,MAX_BUFFNTRY
(1)  549/     1E1 :                     .next_mv:
(1)  550/     1E1 : FD 7E 00            		ld	a,(iy)
(1)  551/     1E4 : FE FF               		cp	-1
(1)  552/     1E6 : CA 9B 00            		jp	z,.next_cmd
(1)  553/     1E9 : FD 66 01            		ld	h,(iy+1)
(1)  554/     1EC : 6F                  		ld	l,a
(1)  555/     1ED : CF                  		rst	8
(1)  556/     1EE : FD 19               		add	iy,de
(1)  557/     1F0 : E5                  		push	hl
(1)  558/     1F1 : DD E1               		pop	ix
(1)  559/     1F3 : CD F8 01            		call	.wrtto_vol
(1)  560/     1F6 : 18 E9               		jr	.next_mv
(1)  561/     1F8 :                     .wrtto_vol:
(1)  562/     1F8 : DD 71 0E            		ld	(ix+trk_VolMaster),c
(1)  563/     1FB : DD 71 19            		ld	(ix+trk_VolTarget),c
(1)  564/     1FE : DD 36 0F 00         		ld	(ix+trk_VolMaster+1),0
(1)  565/     202 : CF                  		rst	8
(1)  566/     203 : C9                  		ret
(1)  567/     204 :                     
(1)  568/     204 :                     ; --------------------------------------------------------
(1)  569/     204 :                     ; Command 07h:
(1)  570/     204 :                     ;
(1)  571/     204 :                     ; Set global sub-beats
(1)  572/     204 :                     ; --------------------------------------------------------
(1)  573/     204 :                     
(1)  574/     204 :                     .cmnd_7:
(1)  575/     204 : CD BE 00            		call	.grab_arg	; d0.w: $00xx
(1)  576/     207 : 4F                  		ld	c,a
(1)  577/     208 : CD BE 00            		call	.grab_arg	; d0.w: $xx00
(1)  578/     20B : 32 A3 1F            		ld	(sbeatPtck+1),a
(1)  579/     20E : 79                  		ld	a,c
(1)  580/     20F : 32 A2 1F            		ld	(sbeatPtck),a
(1)  581/     212 : C3 9B 00            		jp	.next_cmd
(1)  582/     215 :                     
(1)  583/     215 :                     ; --------------------------------------------------------
(1)  584/     215 :                     ; Shared subs
(1)  585/     215 :                     ; --------------------------------------------------------
(1)  586/     215 :                     
(1)  587/     215 :                     .cmnd_rdslot:
(1)  588/     215 : 87                  		add	a,a			; ** MANUAL MAX_BUFFNTRY
(1)  589/     216 : 87                  		add	a,a			; id*8
(1)  590/     217 : 87                  		add	a,a
(1)  591/     218 : 16 00               		ld	d,0
(1)  592/     21A : 5F                  		ld	e,a
(1)  593/     21B : FD 19               		add	iy,de
(1)  594/     21D : FD 7E 00            		ld	a,(iy)
(1)  595/     220 : FD 66 01            		ld	h,(iy+1)
(1)  596/     223 : 6F                  		ld	l,a
(1)  597/     224 : E5                  		push	hl
(1)  598/     225 : DD E1               		pop	ix
(1)  599/     227 : C9                  		ret
(1)  600/     228 :                     
(1)  601/     228 :                     ; ------------------------------------------------
(1)  602/     228 :                     ; c - Sequence ID to search
(1)  603/     228 :                     
(1)  604/     228 :                     .srch_for:
(1)  605/     228 : 16 00               		ld	d,0
(1)  606/     22A :                     .next_f:
(1)  607/     22A : FD 7E 00            		ld	a,(iy)
(1)  608/     22D : FE FF               		cp	-1
(1)  609/     22F : C8                  		ret	z
(1)  610/     230 : FD 66 01            		ld	h,(iy+1)
(1)  611/     233 : 6F                  		ld	l,a
(1)  612/     234 : 11 08 00            		ld	de,MAX_BUFFNTRY
(1)  613/     237 : FD 19               		add	iy,de
(1)  614/     239 : E5                  		push	hl
(1)  615/     23A : DD E1               		pop	ix
(1)  616/     23C : CF                  		rst	8
(1)  617/     23D : DD 7E 00            		ld	a,(ix+trk_Status)			; trk_Status: Track is active != 0?
(1)  618/     240 : B7                  		or	a
(1)  619/     241 : 28 E7               		jr	z,.next_f
(1)  620/     243 : DD 7E 01            		ld	a,(ix+trk_SeqId)
(1)  621/     246 : B9                  		cp	c
(1)  622/     247 : 28 03               		jr	z,.found_f
(1)  623/     249 : CF                  		rst	8
(1)  624/     24A : 18 DE               		jr	.next_f
(1)  625/     24C :                     .found_f:
(1)  626/     24C : AF                  		xor	a
(1)  627/     24D : C9                  		ret
(1)  628/     24E :                     
(1)  629/     24E :                     ; ====================================================================
(1)  630/     24E :                     ; ----------------------------------------------------------------
(1)  631/     24E :                     ; MAIN Playback section
(1)  632/     24E :                     ; ----------------------------------------------------------------
(1)  633/     24E :                     
(1)  634/     24E :                     ; ============================================================
(1)  635/     24E :                     ; --------------------------------------------------------
(1)  636/     24E :                     ; Read INTERNAL mini-impulse-tracker data
(1)  637/     24E :                     ; --------------------------------------------------------
(1)  638/     24E :                     
(1)  639/     24E :                     upd_track:
(1)  640/     24E : E7                  		rst	20h			; Refill wave
(1)  641/     24F : CD A8 11            		call	get_tick		; Check for tick flag
(1)  642/     252 : FD 21 D8 16         		ld	iy,nikona_BuffList	; iy - slot buffer List
(1)  643/     256 :                     .trk_buffrs:
(1)  644/     256 : FD 7E 00            		ld	a,(iy)			; if -1, end here.
(1)  645/     259 : FE FF               		cp	-1
(1)  646/     25B : C8                  		ret	z
(1)  647/     25C : CF                  		rst	8
(1)  648/     25D : FD E5               		push	iy
(1)  649/     25F : CD 6B 02            		call	.read_track
(1)  650/     262 : FD E1               		pop	iy
(1)  651/     264 : 11 08 00            		ld	de,MAX_BUFFNTRY
(1)  652/     267 : FD 19               		add	iy,de
(1)  653/     269 : 18 EB               		jr	.trk_buffrs
(1)  654/     26B :                     
(1)  655/     26B :                     ; ----------------------------------------
(1)  656/     26B :                     ; iy - Track buffer
(1)  657/     26B :                     ; ----------------------------------------
(1)  658/     26B :                     
(1)  659/     26B :                     .read_track:
(1)  660/     26B : FD 6E 00            		ld	l,(iy)			; hl - current track slot
(1)  661/     26E : FD 66 01            		ld	h,(iy+1)
(1)  662/     271 : CF                  		rst	8
(1)  663/     272 : E5                  		push	hl
(1)  664/     273 : FD E1               		pop	iy			; change iy to hl
(1)  665/     275 : FD 46 00            		ld	b,(iy+trk_Status)	; b - Track status and settings
(1)  666/     278 : CB 78               		bit	7,b			; bit7: Track active?
(1)  667/     27A : C8                  		ret	z			; Return if not.
(1)  668/     27B : 78                  		ld	a,b
(1)  669/     27C : FE FF               		cp	-1			; Flag is -1?
(1)  670/     27E : C8                  		ret	z			; Return if mid-flag
(1)  671/     27F : CF                  		rst	8
(1)  672/     280 :                     	; ----------------------------------------
(1)  673/     280 :                     	; Track setup
(1)  674/     280 : FD 6E 0F            		ld	l,(iy+trk_VolMaster+1)
(1)  675/     283 : FD 66 0E            		ld	h,(iy+trk_VolMaster)
(1)  676/     286 : FD 4E 19            		ld	c,(iy+trk_VolTarget)
(1)  677/     289 : 11 00 01            		ld	de,0100h		; <-- Manual volfade speed
(1)  678/     28C : 79                  		ld	a,c
(1)  679/     28D : BC                  		cp	h
(1)  680/     28E : 28 21               		jr	z,.keep_vol
(1)  681/     290 : 30 06               		jr	nc,.fade_out
(1)  682/     292 : 11 80 FF            		ld	de,-80h
(1)  683/     295 : 19                  		add	hl,de
(1)  684/     296 : 18 0D               		jr	.too_much
(1)  685/     298 :                     .fade_out:
(1)  686/     298 : 19                  		add	hl,de
(1)  687/     299 : CF                  		rst	8
(1)  688/     29A : 7C                  		ld	a,h
(1)  689/     29B : B9                  		cp	c
(1)  690/     29C : DA A5 02            		jp	c,.too_much
(1)  691/     29F : 61                  		ld	h,c
(1)  692/     2A0 : 2E 00               		ld	l,0
(1)  693/     2A2 : FD 71 19            		ld	(iy+trk_VolTarget),c
(1)  694/     2A5 :                     .too_much:
(1)  695/     2A5 : CF                  		rst	8
(1)  696/     2A6 : FD 75 0F            		ld	(iy+trk_VolMaster+1),l
(1)  697/     2A9 : FD 74 0E            		ld	(iy+trk_VolMaster),h
(1)  702/     2AC : 3E 01               		ld	a,1
(1)  703/     2AE : 32 87 1F            		ld	(marsUpd),a
(1)  705/     2B1 :                     .keep_vol:
(1)  706/     2B1 :                     
(1)  707/     2B1 :                     	; ----------------------------------------
(1)  708/     2B1 : 3A 96 1F            		ld	a,(currTickBits)	; a - Tick/Beat bits
(1)  709/     2B4 : CB 40               		bit	0,b			; bit0: This track uses Beats?
(1)  710/     2B6 : 28 03               		jr	z,.sfxmd
(1)  711/     2B8 : CB 4F               		bit	1,a			; BEAT passed?
(1)  712/     2BA : C8                  		ret	z			; No BEAT.
(1)  713/     2BB :                     .sfxmd:
(1)  714/     2BB : CB 47               		bit	0,a			; TICK passed?
(1)  715/     2BD : C8                  		ret	z			; No TICK.
(1)  716/     2BE : CF                  		rst	8
(1)  717/     2BF :                     	; *** Start reading notes ***
(1)  718/     2BF : CB 70               		bit	6,b			; bit6: Restart/First time?
(1)  719/     2C1 : C4 50 05            		call	nz,.first_fill
(1)  720/     2C4 : CB 68               		bit	5,b			; bit5: FILL request by effect?
(1)  721/     2C6 : C4 49 05            		call	nz,.effect_fill
(1)  722/     2C9 : FD 7E 12            		ld	a,(iy+trk_tickTmr)	; TICK ex-timer for this track
(1)  723/     2CC : 3D                  		dec	a
(1)  724/     2CD : FD 77 12            		ld	(iy+trk_tickTmr),a
(1)  725/     2D0 : B7                  		or	a			; Check a
(1)  726/     2D1 : C0                  		ret	nz			; If Tick timer != 0, exit.
(1)  727/     2D2 : CF                  		rst	8
(1)  728/     2D3 : FD 7E 03            		ld	a,(iy+trk_TickSet)	; Set new tick timer
(1)  729/     2D6 : FD 77 12            		ld	(iy+trk_tickTmr),a
(1)  730/     2D9 : FD 4E 0C            		ld	c,(iy+trk_Rows)		; bc - Set row counter
(1)  731/     2DC : FD 46 0D            		ld	b,(iy+(trk_Rows+1))
(1)  732/     2DF : 79                  		ld	a,c			; Check rowcount
(1)  733/     2E0 : B0                  		or	b
(1)  734/     2E1 : 20 14               		jr	nz,.row_active		; If bc != 0: row is currenly playing.
(1)  735/     2E3 : CF                  		rst	8			; If bc == 0 ...
(1)  736/     2E4 : FD 7E 13            		ld	a,(iy+trk_currBlk)	; Next block
(1)  737/     2E7 : 3C                  		inc	a
(1)  738/     2E8 : FD 77 13            		ld 	(iy+trk_currBlk),a
(1)  739/     2EB : CD 5D 04            		call	.set_track		; Read track data ** ROM ACCESS **
(1)  740/     2EE : FE FF               		cp	-1			; Track finished?
(1)  741/     2F0 : C8                  		ret	z
(1)  742/     2F1 : FD 4E 0C            		ld	c,(iy+trk_Rows)		; Set new rowcount to bc
(1)  743/     2F4 : FD 46 0D            		ld	b,(iy+(trk_Rows+1))
(1)  744/     2F7 :                     .row_active:
(1)  745/     2F7 : CF                  		rst	8
(1)  746/     2F8 : FD 6E 0A            		ld	l,(iy+trk_Read)		; hl - CURRENT pattern to read
(1)  747/     2FB : FD 66 0B            		ld	h,(iy+((trk_Read+1)))
(1)  748/     2FE :                     
(1)  749/     2FE :                     ; --------------------------------
(1)  750/     2FE :                     ; Main read-loop
(1)  751/     2FE :                     ; --------------------------------
(1)  752/     2FE :                     
(1)  753/     2FE :                     .next_note:
(1)  754/     2FE : FD 7E 11            		ld	a,(iy+trk_rowPause)	; Check rowtimer
(1)  755/     301 : B7                  		or	a
(1)  756/     302 : 20 16               		jr	nz,.decrow
(1)  757/     304 : 7E                  		ld	a,(hl)			; Check if byte is a timer or a note
(1)  758/     305 : B7                  		or	a
(1)  759/     306 : 28 06               		jr	z,.exit			; If == 00h: exit
(1)  760/     308 : FA 25 03            		jp	m,.has_note		; If 80h-0FFh: Note data
(1)  761/     30B : FD 77 11            		ld	(iy+trk_rowPause),a	; If 01h-07Fh: Row-pause timer
(1)  762/     30E :                     
(1)  763/     30E :                     ; --------------------------------
(1)  764/     30E :                     ; Exit
(1)  765/     30E :                     ; --------------------------------
(1)  766/     30E :                     
(1)  767/     30E :                     .exit:
(1)  768/     30E : CF                  		rst	8
(1)  769/     30F : CD 25 04            		call	.inc_cpatt		; * Increment patt pos
(1)  770/     312 : FD 75 0A            		ld	(iy+trk_Read),l		; Update READ location
(1)  771/     315 : FD 74 0B            		ld	(iy+((trk_Read+1))),h
(1)  772/     318 : 18 03               		jr	.decrow_e
(1)  773/     31A :                     .decrow:
(1)  774/     31A : FD 35 11            		dec	(iy+trk_rowPause)	; Decrement row-pause timer
(1)  775/     31D :                     .decrow_e:
(1)  776/     31D : 0B                  		dec	bc			; Decrement rowcount
(1)  777/     31E : FD 71 0C            		ld	(iy+trk_Rows),c		; Write last row to memory
(1)  778/     321 : FD 70 0D            		ld	(iy+(trk_Rows+1)),b
(1)  779/     324 : C9                  		ret
(1)  780/     325 :                     
(1)  781/     325 :                     ; 	; Set MASTER volume to this track
(1)  782/     325 :                     ; 		ld	a,(iy+trk_VolMaster)
(1)  783/     325 :                     ; 		ld	c,a			; c - Master volume to set
(1)  784/     325 :                     ; 		ld	ix,trkChnls		; ix - Channel list
(1)  785/     325 :                     ; 		rst	8
(1)  786/     325 :                     ; 		push	iy
(1)  787/     325 :                     ; 		pop	hl
(1)  788/     325 :                     ; 		ld	de,trk_ChnIndx
(1)  789/     325 :                     ; 		add	hl,de			; hl - track indexes
(1)  790/     325 :                     ; 		ld	b,(iy+trk_MaxChnl)	; b - num of channels used
(1)  791/     325 :                     ; .next_indx:
(1)  792/     325 :                     ; 		ld	a,(hl)
(1)  793/     325 :                     ; 		or	a
(1)  794/     325 :                     ; 		jr	z,.no_indxv
(1)  795/     325 :                     ; 		push	ix			; Save ix
(1)  796/     325 :                     ; 		add	a,a			; index * 8
(1)  797/     325 :                     ; 		add	a,a
(1)  798/     325 :                     ; 		rst	8
(1)  799/     325 :                     ; 		add	a,a
(1)  800/     325 :                     ; 		ld	d,0
(1)  801/     325 :                     ; 		ld	e,a
(1)  802/     325 :                     ; 		add	ix,de
(1)  803/     325 :                     ; ; 		ld	a,(ix+chnl_Flags)	; Check VOLUME bit ONLY
(1)  804/     325 :                     ; ; 		bit	2,a
(1)  805/     325 :                     ; ; 		jr	z,.no_vflag
(1)  806/     325 :                     ;
(1)  807/     325 :                     ; 	; TODO: flags with volume changes
(1)  808/     325 :                     ; 		ld	a,(ix+chnl_Vol)
(1)  809/     325 :                     ; 		sub	a,c
(1)  810/     325 :                     ; 		jp	nc,.max_out
(1)  811/     325 :                     ; 		jp	p,.max_out
(1)  812/     325 :                     ; 		nop
(1)  813/     325 :                     ; 		xor	a
(1)  814/     325 :                     ; .max_out:
(1)  815/     325 :                     ; 		ld	(ix+chnl_Vol),a
(1)  816/     325 :                     ; .no_vflag:
(1)  817/     325 :                     ; 		pop	ix			; Get ix back
(1)  818/     325 :                     ; .no_indxv:
(1)  819/     325 :                     ; 		rst	8
(1)  820/     325 :                     ; 		inc	hl
(1)  821/     325 :                     ; 		nop
(1)  822/     325 :                     ; 		djnz	.next_indx
(1)  823/     325 :                     ; 		ret				; Exit.
(1)  824/     325 :                     
(1)  825/     325 :                     ; --------------------------------
(1)  826/     325 :                     ; New note request
(1)  827/     325 :                     ;
(1)  828/     325 :                     ; a - %1tcccccc
(1)  829/     325 :                     ;   | t - type setup
(1)  830/     325 :                     ;   | c - channel
(1)  831/     325 :                     ; --------------------------------
(1)  832/     325 :                     
(1)  833/     325 :                     .has_note:
(1)  834/     325 : CF                  		rst	8
(1)  835/     326 : C5                  		push	bc			; Save rowcount
(1)  836/     327 : 4F                  		ld	c,a			; Copy patt byte control to c
(1)  837/     328 : CD 25 04            		call	.inc_cpatt		; * Increment patt pos
(1)  838/     32B : E5                  		push	hl			; Save hl patt pos
(1)  839/     32C : FD E5               		push	iy
(1)  840/     32E : E1                  		pop	hl
(1)  841/     32F : DD 21 00 1E         		ld	ix,trkChnls		; ix - Channels buffer
(1)  842/     333 : 11 26 00            		ld	de,trk_ChnIndx		; <-- this also clears d
(1)  843/     336 : CF                  		rst	8
(1)  844/     337 : 19                  		add	hl,de			; hl - Track's index points buffer
(1)  845/     338 : 79                  		ld	a,c			; Get patt note position
(1)  846/     339 : E6 1F               		and	00011111b		; Filter index bits
(1)  847/     33B : 5F                  		ld	e,a			; Save as e
(1)  848/     33C : 19                  		add	hl,de			; Increment more by this pos
(1)  849/     33D : 7E                  		ld	a,(hl)			; Check if this index is occupied.
(1)  850/     33E : B7                  		or	a
(1)  851/     33F : 28 0A               		jr	z,.srch_new		; If == 0, new index
(1)  852/     341 : E6 1F               		and	00011111b		; If already used, read that channel
(1)  853/     343 : 87                  		add	a,a
(1)  854/     344 : 87                  		add	a,a
(1)  855/     345 : 87                  		add	a,a
(1)  856/     346 : 5F                  		ld	e,a
(1)  857/     347 : DD 19               		add	ix,de
(1)  858/     349 : 18 2B               		jr	.cont_chnl
(1)  859/     34B :                     
(1)  860/     34B :                     ; Make NEW channel
(1)  861/     34B :                     ; ix - channel list start
(1)  862/     34B :                     .srch_new:
(1)  863/     34B : CF                  		rst	8
(1)  864/     34C : 06 1F               		ld	b,MAX_TRKCHN-1	; Max channels to check - 1
(1)  865/     34E : 16 00               		ld	d,0		; Reset out index
(1)  866/     350 :                     .next_chnl:
(1)  867/     350 : DD 7E 00            		ld	a,(ix)		; Read chnl_Flags
(1)  868/     353 : B7                  		or	a		; If plus, track channel is free
(1)  869/     354 : F2 6B 03            		jp	p,.chnl_free
(1)  870/     357 : DD 23               		inc	ix		; Search next channel, increment by 8
(1)  871/     359 : DD 23               		inc	ix
(1)  872/     35B : DD 23               		inc	ix
(1)  873/     35D : DD 23               		inc	ix
(1)  874/     35F : CF                  		rst	8
(1)  875/     360 : DD 23               		inc	ix
(1)  876/     362 : DD 23               		inc	ix
(1)  877/     364 : DD 23               		inc	ix
(1)  878/     366 : DD 23               		inc	ix
(1)  879/     368 : 14                  		inc	d		; Increment out index
(1)  880/     369 : 10 E5               		djnz	.next_chnl
(1)  881/     36B :                     .chnl_free:
(1)  882/     36B : CF                  		rst	8
(1)  883/     36C : 7A                  		ld	a,d			; Read index we got
(1)  884/     36D : E6 1F               		and	00011111b		; Filter bits
(1)  885/     36F : F6 80               		or	10000000b		; + set as used
(1)  886/     371 : 77                  		ld	(hl),a			; Write index slot
(1)  887/     372 : DD CB 00 FE         		set	7,(ix+chnl_Flags)	; Enable channel on the list
(1)  888/     376 :                     .cont_chnl:
(1)  889/     376 : E1                  		pop	hl			; Recover patt pos
(1)  890/     377 :                     	; ix - current channel
(1)  891/     377 : CF                  		rst	8
(1)  892/     378 : DD 46 07            		ld	b,(ix+chnl_Type)	; b - current TYPE byte
(1)  893/     37B : CB 71               		bit	6,c			; This byte has new TYPE setting?
(1)  894/     37D : 28 08               		jr	z,.old_type
(1)  895/     37F : 7E                  		ld	a,(hl)
(1)  896/     380 : DD 77 07            		ld	(ix+chnl_Type),a	; Update TYPE byte
(1)  897/     383 : 47                  		ld	b,a			; Set to b
(1)  898/     384 : CD 25 04            		call	.inc_cpatt		; Next patt pos
(1)  899/     387 :                     .old_type:
(1)  900/     387 :                     	; b - evinEVIN
(1)  901/     387 :                     	;     E-effect/V-volume/I-instrument/N-note
(1)  902/     387 :                     	;     evin: byte is already stored on track-channel buffer
(1)  903/     387 :                     	;     EVIN: next byte(s) contain a new value. for eff:2 bytes
(1)  904/     387 :                     
(1)  905/     387 : CF                  		rst	8
(1)  906/     388 : CB 40               		bit	0,b			; New NOTE?
(1)  907/     38A : 28 07               		jr	z,.no_note
(1)  908/     38C : 7E                  		ld	a,(hl)			; Set NOTE and increment patt
(1)  909/     38D : DD 77 02            		ld	(ix+chnl_Note),a
(1)  910/     390 : CD 25 04            		call	.inc_cpatt
(1)  911/     393 :                     .no_note:
(1)  912/     393 : CB 48               		bit	1,b			; New INS?
(1)  913/     395 : 28 07               		jr	z,.no_ins
(1)  914/     397 : 7E                  		ld	a,(hl)			; Set INS and increment patt
(1)  915/     398 : DD 77 03            		ld	(ix+chnl_Ins),a
(1)  916/     39B : CD 25 04            		call	.inc_cpatt
(1)  917/     39E :                     .no_ins:
(1)  918/     39E : CB 50               		bit	2,b			; New VOL?
(1)  919/     3A0 : 28 07               		jr	z,.no_vol
(1)  920/     3A2 : 7E                  		ld	a,(hl)			; Set VOL and increment patt
(1)  921/     3A3 : DD 77 04            		ld	(ix+chnl_Vol),a
(1)  922/     3A6 : CD 25 04            		call	.inc_cpatt
(1)  923/     3A9 :                     .no_vol:
(1)  924/     3A9 : CB 58               		bit	3,b			; New EFFECT?
(1)  925/     3AB : 28 0F               		jr	z,.no_eff
(1)  926/     3AD : 7E                  		ld	a,(hl)			; Set EFFECT ID, incr patt
(1)  927/     3AE : DD 77 05            		ld	(ix+chnl_EffId),a
(1)  928/     3B1 : CD 25 04            		call	.inc_cpatt
(1)  929/     3B4 : CF                  		rst	8
(1)  930/     3B5 : 7E                  		ld	a,(hl)			; Set EFFECT ARG, incr patt
(1)  931/     3B6 : DD 77 06            		ld	(ix+chnl_EffArg),a
(1)  932/     3B9 : CD 25 04            		call	.inc_cpatt
(1)  933/     3BC :                     .no_eff:
(1)  934/     3BC : 78                  		ld	a,b			; Merge the Impulse evin bits into main EVIN bits
(1)  935/     3BD : 0F                  		rrca
(1)  936/     3BE : 0F                  		rrca
(1)  937/     3BF : 0F                  		rrca
(1)  938/     3C0 : 0F                  		rrca
(1)  939/     3C1 : E6 0F               		and	00001111b		; Filter bits
(1)  940/     3C3 : 4F                  		ld	c,a			; Save as c
(1)  941/     3C4 : 78                  		ld	a,b
(1)  942/     3C5 : E6 0F               		and	00001111b		; Filter again
(1)  943/     3C7 : B1                  		or	c			; Merge c with a
(1)  944/     3C8 : CF                  		rst	8
(1)  945/     3C9 : 4F                  		ld	c,a			; Save bit flags
(1)  946/     3CA : DD 7E 00            		ld	a,(ix+chnl_Flags)
(1)  947/     3CD : B1                  		or	c
(1)  948/     3CE : DD 77 00            		ld	(ix+chnl_Flags),a
(1)  949/     3D1 :                     	; Check for effects that affect
(1)  950/     3D1 :                     	; internal playback:
(1)  951/     3D1 :                     	; Jump, Ticks, etc.
(1)  952/     3D1 : C1                  		pop	bc		; Restore rowcount
(1)  953/     3D2 : DD 7E 00            		ld	a,(ix+chnl_Flags)
(1)  954/     3D5 : E6 08               		and	1000b		; ONLY check for the EFFECT bit
(1)  955/     3D7 : CA FE 02            		jp	z,.next_note
(1)  956/     3DA : DD 7E 05            		ld	a,(ix+chnl_EffId)
(1)  957/     3DD : B7                  		or	a		; 00h = invalid effect
(1)  958/     3DE : CA FE 02            		jp	z,.next_note
(1)  959/     3E1 :                     
(1)  960/     3E1 :                     	; TODO: cambiar esto por jumps
(1)  961/     3E1 : FE 01               		cp	1		; Effect A: Tick set
(1)  962/     3E3 : CC F3 03            		call	z,.eff_A
(1)  963/     3E6 : FE 02               		cp	2		; Effect B: Position Jump
(1)  964/     3E8 : CC 04 04            		call	z,.eff_B
(1)  965/     3EB : FE 03               		cp	3		; Effect C: Pattern break
(1)  966/     3ED : CA 22 04            		jp	z,.eff_C	; <-- JUMP and exit.
(1)  967/     3F0 : C3 FE 02            		jp	.next_note
(1)  968/     3F3 :                     
(1)  969/     3F3 :                     ; ----------------------------------------
(1)  970/     3F3 :                     ; Effect A: Set ticks
(1)  971/     3F3 :                     ; ----------------------------------------
(1)  972/     3F3 :                     
(1)  973/     3F3 :                     .eff_A:
(1)  974/     3F3 : F5                  		push	af
(1)  975/     3F4 : CF                  		rst	8
(1)  976/     3F5 : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - ticks number
(1)  977/     3F8 : FD 73 03            		ld	(iy+trk_TickSet),e	; set for both Set and Timer.
(1)  978/     3FB : FD 73 12            		ld	(iy+trk_tickTmr),e
(1)  979/     3FE : DD CB 00 9E         		res	3,(ix+chnl_Flags)	; <-- Clear EFFECT bit
(1)  980/     402 : F1                  		pop	af
(1)  981/     403 : C9                  		ret
(1)  982/     404 :                     
(1)  983/     404 :                     ; ----------------------------------------
(1)  984/     404 :                     ; Effect B: jump to a new block
(1)  985/     404 :                     ; ----------------------------------------
(1)  986/     404 :                     
(1)  987/     404 :                     .eff_B:
(1)  988/     404 : F5                  		push	af			; Save Flagbits
(1)  989/     405 : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - Block SLOT to jump
(1)  990/     408 : FD 73 13            		ld 	(iy+trk_currBlk),e
(1)  991/     40B : CF                  		rst	8
(1)  992/     40C : FD 36 11 00         		ld	(iy+trk_rowPause),0	; Reset rowpause
(1)  993/     410 : DD CB 00 9E         		res	3,(ix+chnl_Flags)	; <-- Clear EFFECT bit
(1)  994/     414 : FD CB 00 EE         		set	5,(iy+trk_Status)	; set fill-from-effect flag on exit
(1)  995/     418 : 3E 80               		ld	a,80h
(1)  996/     41A : FD 77 16            		ld	(iy+trk_BankHeads),a
(1)  997/     41D : FD 77 17            		ld	(iy+trk_BankBlk),a
(1)  998/     420 : F1                  		pop	af
(1)  999/     421 : C9                  		ret
(1) 1000/     422 :                     
(1) 1001/     422 :                     ; ----------------------------------------
(1) 1002/     422 :                     ; Effect C: Pattern break/exit
(1) 1003/     422 :                     ;
(1) 1004/     422 :                     ; Only used on SFX, arguments ignored.
(1) 1005/     422 :                     ; ----------------------------------------
(1) 1006/     422 :                     
(1) 1007/     422 :                     .eff_C:
(1) 1008/     422 : C3 36 05            		jp	.track_end
(1) 1009/     425 :                     
(1) 1010/     425 :                     ; ----------------------------------------
(1) 1011/     425 :                     ; Increment the current patt position
(1) 1012/     425 :                     ; and recieve more data
(1) 1013/     425 :                     ;
(1) 1014/     425 :                     ; Breaks:
(1) 1015/     425 :                     ; a,e
(1) 1016/     425 :                     ; ----------------------------------------
(1) 1017/     425 :                     
(1) 1018/     425 :                     .inc_cpatt:
(1) 1019/     425 : FD 5E 08            		ld	e,(iy+trk_Cach)	; Read curret cache LSB
(1) 1020/     428 : 7D                  		ld	a,l
(1) 1021/     429 : 3C                  		inc	a
(1) 1022/     42A : E6 1F               		and	MAX_RCACH-1
(1) 1023/     42C : FE 1E               		cp	MAX_RCACH-2	; RAN OUT of bytes?
(1) 1024/     42E : 30 03               		jr	nc,.ran_out
(1) 1025/     430 : B3                  		or	e
(1) 1026/     431 : 6F                  		ld	l,a
(1) 1027/     432 : C9                  		ret
(1) 1028/     433 :                     .ran_out:
(1) 1029/     433 : FD 6E 08            		ld	l,(iy+trk_Cach)
(1) 1030/     436 : E5                  		push	hl
(1) 1031/     437 : C5                  		push	bc
(1) 1032/     438 : 06 00               		ld	b,0
(1) 1033/     43A : 4F                  		ld	c,a
(1) 1034/     43B : CF                  		rst	8
(1) 1035/     43C : 5D                  		ld	e,l
(1) 1036/     43D : 54                  		ld	d,h
(1) 1037/     43E : FD 6E 1A            		ld	l,(iy+trk_RomPattRead)
(1) 1038/     441 : FD 66 1B            		ld	h,(iy+(trk_RomPattRead+1))
(1) 1039/     444 : FD 7E 1C            		ld	a,(iy+(trk_RomPattRead+2))
(1) 1040/     447 : 09                  		add	hl,bc
(1) 1041/     448 : CE 00               		adc	a,0
(1) 1042/     44A : FD 75 1A            		ld	(iy+trk_RomPattRead),l
(1) 1043/     44D : FD 74 1B            		ld	(iy+(trk_RomPattRead+1)),h
(1) 1044/     450 : CF                  		rst	8
(1) 1045/     451 : FD 77 1C            		ld	(iy+(trk_RomPattRead+2)),a
(1) 1046/     454 : 01 20 00            		ld	bc,MAX_RCACH
(1) 1047/     457 : CD C9 11            		call	transferRom	; *** ROM ACCESS ***
(1) 1048/     45A : C1                  		pop	bc
(1) 1049/     45B : E1                  		pop	hl
(1) 1050/     45C : C9                  		ret
(1) 1051/     45D :                     
(1) 1052/     45D :                     ; ----------------------------------------
(1) 1053/     45D :                     ; Set track pattern by trk_currBlk
(1) 1054/     45D :                     ; ----------------------------------------
(1) 1055/     45D :                     
(1) 1056/     45D :                     .set_track:
(1) 1057/     45D : FD 5E 04            		ld	e,(iy+trk_Blocks)
(1) 1058/     460 : FD 56 05            		ld	d,(iy+(trk_Blocks+1))
(1) 1059/     463 : FD 7E 13            		ld	a,(iy+trk_currBlk)
(1) 1060/     466 : 4F                  		ld	c,a
(1) 1061/     467 : C5                  		push	bc
(1) 1062/     468 : D5                  		push	de
(1) 1063/     469 : CF                  		rst	8
(1) 1064/     46A : 0F                  		rrca
(1) 1065/     46B : 0F                  		rrca
(1) 1066/     46C : 0F                  		rrca
(1) 1067/     46D : E6 1F               		and	00011111b
(1) 1068/     46F : FD 4E 17            		ld	c,(iy+trk_BankBlk)	; c - current block bank
(1) 1069/     472 : CB 79               		bit	7,c			; First time?
(1) 1070/     474 : 20 03               		jr	nz,.first_blk
(1) 1071/     476 : B9                  		cp	c			; SAME instrument data?
(1) 1072/     477 : 28 1E               		jr	z,.keep_blk
(1) 1073/     479 :                     .first_blk:
(1) 1074/     479 : CF                  		rst	8
(1) 1075/     47A : FD 77 17            		ld	(iy+trk_BankBlk),a	; Save inst number
(1) 1076/     47D : 07                  		rlca
(1) 1077/     47E : 07                  		rlca
(1) 1078/     47F : 07                  		rlca
(1) 1079/     480 : 06 00               		ld	b,0
(1) 1080/     482 : 4F                  		ld	c,a
(1) 1081/     483 : FD 6E 23            		ld	l,(iy+trk_RomBlks)	; Transfer FIRST patt
(1) 1082/     486 : FD 66 24            		ld	h,(iy+(trk_RomBlks+1))	; packet
(1) 1083/     489 : FD 7E 25            		ld	a,(iy+(trk_RomBlks+2))
(1) 1084/     48C : E7                  		rst	20h
(1) 1085/     48D : CF                  		rst	8
(1) 1086/     48E : 09                  		add	hl,bc
(1) 1087/     48F : CE 00               		adc	a,0
(1) 1088/     491 : 01 08 00            		ld	bc,8			; 8 blocks stored
(1) 1089/     494 : CD C9 11            		call	transferRom		; ** ROM ACCESS **
(1) 1090/     497 :                     .keep_blk:
(1) 1091/     497 : E1                  		pop	hl
(1) 1092/     498 : C1                  		pop	bc
(1) 1093/     499 : 79                  		ld	a,c
(1) 1094/     49A : E6 07               		and	00000111b
(1) 1095/     49C : CF                  		rst	8
(1) 1096/     49D : 16 00               		ld	d,0
(1) 1097/     49F : 5F                  		ld	e,a
(1) 1098/     4A0 : 19                  		add	hl,de
(1) 1099/     4A1 : 7E                  		ld	a,(hl)			; Read byte
(1) 1100/     4A2 : FE FF               		cp	-1			; If block == -1, end track
(1) 1101/     4A4 : CA 36 05            		jp	z,.track_end
(1) 1102/     4A7 : CF                  		rst	8
(1) 1103/     4A8 :                     
(1) 1104/     4A8 : FD 5E 06            		ld	e,(iy+trk_Patt)		; Read CACHE patt heads
(1) 1105/     4AB : FD 56 07            		ld	d,(iy+(trk_Patt+1))
(1) 1106/     4AE : 4F                  		ld	c,a
(1) 1107/     4AF : D5                  		push	de
(1) 1108/     4B0 : C5                  		push	bc
(1) 1109/     4B1 : CF                  		rst	8
(1) 1110/     4B2 : 0F                  		rrca
(1) 1111/     4B3 : 0F                  		rrca
(1) 1112/     4B4 : 0F                  		rrca
(1) 1113/     4B5 : E6 1F               		and	00011111b
(1) 1114/     4B7 : FD 4E 16            		ld	c,(iy+trk_BankHeads)	; c - current intrument loaded
(1) 1115/     4BA : CB 79               		bit	7,c			; First time?
(1) 1116/     4BC : 20 03               		jr	nz,.first_head
(1) 1117/     4BE : B9                  		cp	c			; SAME instrument data?
(1) 1118/     4BF : 28 26               		jr	z,.keep_it
(1) 1119/     4C1 :                     .first_head:
(1) 1120/     4C1 : CF                  		rst	8
(1) 1121/     4C2 : FD 77 16            		ld	(iy+trk_BankHeads),a	; Save inst number
(1) 1122/     4C5 : 47                  		ld	b,a
(1) 1123/     4C6 : 0F                  		rrca
(1) 1124/     4C7 : 0F                  		rrca
(1) 1125/     4C8 : 0F                  		rrca
(1) 1126/     4C9 : E6 E0               		and	11100000b
(1) 1127/     4CB : 4F                  		ld	c,a
(1) 1128/     4CC : 78                  		ld	a,b
(1) 1129/     4CD : 0F                  		rrca
(1) 1130/     4CE : 0F                  		rrca
(1) 1131/     4CF : 0F                  		rrca
(1) 1132/     4D0 : E6 03               		and	00000011b
(1) 1133/     4D2 : 47                  		ld	b,a
(1) 1134/     4D3 :                     
(1) 1135/     4D3 : FD 6E 1D            		ld	l,(iy+trk_RomPatt)	; Transfer FIRST patt
(1) 1136/     4D6 : FD 66 1E            		ld	h,(iy+(trk_RomPatt+1))	; packet
(1) 1137/     4D9 : FD 7E 1F            		ld	a,(iy+(trk_RomPatt+2))
(1) 1138/     4DC : E7                  		rst	20h
(1) 1139/     4DD : CF                  		rst	8
(1) 1140/     4DE : 09                  		add	hl,bc
(1) 1141/     4DF : CE 00               		adc	a,0
(1) 1142/     4E1 : 01 20 00            		ld	bc,4*8			; 8 heads stored
(1) 1143/     4E4 : CD C9 11            		call	transferRom		; ** ROM ACCESS **
(1) 1144/     4E7 :                     .keep_it:
(1) 1145/     4E7 : C1                  		pop	bc
(1) 1146/     4E8 : 79                  		ld	a,c
(1) 1147/     4E9 : E6 07               		and	00000111b
(1) 1148/     4EB : 87                  		add	a,a
(1) 1149/     4EC : 87                  		add	a,a
(1) 1150/     4ED : 57                  		ld	d,a
(1) 1151/     4EE : CF                  		rst	8
(1) 1152/     4EF : E6 FC               		and	11111100b
(1) 1153/     4F1 : 5F                  		ld	e,a
(1) 1154/     4F2 : 7A                  		ld	a,d
(1) 1155/     4F3 : E6 03               		and	00000011b
(1) 1156/     4F5 : 57                  		ld	d,a
(1) 1157/     4F6 : E1                  		pop	hl
(1) 1158/     4F7 : 19                  		add	hl,de
(1) 1159/     4F8 : 5E                  		ld	e,(hl)			; de - Pos
(1) 1160/     4F9 : 23                  		inc	hl
(1) 1161/     4FA : CF                  		rst	8
(1) 1162/     4FB : 56                  		ld	d,(hl)
(1) 1163/     4FC : 23                  		inc	hl
(1) 1164/     4FD : 7E                  		ld	a,(hl)
(1) 1165/     4FE : 23                  		inc	hl
(1) 1166/     4FF : FD 77 0C            		ld	(iy+trk_Rows),a
(1) 1167/     502 : 7E                  		ld	a,(hl)
(1) 1168/     503 : 23                  		inc	hl
(1) 1169/     504 : FD 77 0D            		ld	(iy+(trk_Rows+1)),a
(1) 1170/     507 : FD 6E 1D            		ld	l,(iy+trk_RomPatt)	; Transfer FIRST patt
(1) 1171/     50A : FD 66 1E            		ld	h,(iy+(trk_RomPatt+1))	; packet
(1) 1172/     50D : CF                  		rst	8
(1) 1173/     50E : FD 7E 1F            		ld	a,(iy+(trk_RomPatt+2))
(1) 1174/     511 : 19                  		add	hl,de
(1) 1175/     512 : CE 00               		adc	a,0
(1) 1176/     514 : FD 75 1A            		ld	(iy+trk_RomPattRead),l
(1) 1177/     517 : FD 74 1B            		ld	(iy+(trk_RomPattRead+1)),h
(1) 1178/     51A : FD 77 1C            		ld	(iy+(trk_RomPattRead+2)),a
(1) 1179/     51D : FD 5E 08            		ld	e,(iy+trk_Cach)
(1) 1180/     520 : FD 56 09            		ld	d,(iy+(trk_Cach+1))
(1) 1181/     523 :                     
(1) 1182/     523 : FD 73 0A            		ld	(iy+trk_Read),e
(1) 1183/     526 : FD 72 0B            		ld	(iy+(trk_Read+1)),d
(1) 1184/     529 : 0E 20               		ld	c,MAX_RCACH
(1) 1185/     52B : FD 36 10 00         		ld	(iy+trk_cachHalf),0
(1) 1186/     52F : FD 36 11 00         		ld	(iy+trk_rowPause),0
(1) 1187/     533 : C3 C9 11            		jp	transferRom		; ** ROM access **
(1) 1188/     536 :                     
(1) 1189/     536 :                     ; ----------------------------------------
(1) 1190/     536 :                     ; **JUMP ONLY**
(1) 1191/     536 :                     .track_end:
(1) 1192/     536 : CD E5 05            		call	track_out
(1) 1193/     539 : CF                  		rst	8
(1) 1194/     53A : AF                  		xor	a
(1) 1195/     53B : FD 77 11            		ld	(iy+trk_rowPause),a
(1) 1196/     53E : FD 77 12            		ld	(iy+trk_tickTmr),a
(1) 1197/     541 : FD 77 00            		ld	(iy+trk_Status),a	; Disable track slot
(1) 1198/     544 : FD 36 15 80         		ld	(iy+trk_BankIns),80h
(1) 1199/     548 : C9                  		ret
(1) 1200/     549 :                     
(1) 1201/     549 :                     ; ----------------------------------------
(1) 1202/     549 :                     ; Track refill
(1) 1203/     549 :                     ; ----------------------------------------
(1) 1204/     549 :                     
(1) 1205/     549 :                     .effect_fill:
(1) 1206/     549 : FD CB 00 AE         		res	5,(iy+trk_Status)	; Reset refill-from-effect flag
(1) 1207/     54D : C3 5D 04            		jp	.set_track
(1) 1208/     550 :                     
(1) 1209/     550 :                     ; ----------------------------------------
(1) 1210/     550 :                     ; Track Start/Reset
(1) 1211/     550 :                     ;
(1) 1212/     550 :                     ; iy - Track buffer
(1) 1213/     550 :                     ; ----------------------------------------
(1) 1214/     550 :                     
(1) 1215/     550 :                     .first_fill:
(1) 1216/     550 : FD CB 00 B6         		res	6,(iy+trk_Status)	; Clear FILL flag
(1) 1217/     554 : CD E5 05            		call	track_out
(1) 1218/     557 : FD 36 12 01         		ld	(iy+trk_tickTmr),1	; <-- Reset tick timer
(1) 1219/     55B : FD 7E 02            		ld	a,(iy+trk_SetBlk)	; Make start block as current block
(1) 1220/     55E : CF                  		rst	8
(1) 1221/     55F : FD 77 13            		ld 	(iy+trk_currBlk),a	; block
(1) 1222/     562 : 11 00 00            		ld	de,0
(1) 1223/     565 : 21 3E 1C            		ld	hl,trkListCach		; Read MASTER Nikona track list
(1) 1224/     568 : FD 7E 01            		ld	a,(iy+trk_SeqId)
(1) 1225/     56B : E6 07               		and	00000111b		; Filter sequence bits
(1) 1226/     56D : 87                  		add	a,a			; *4
(1) 1227/     56E : CF                  		rst	8
(1) 1228/     56F : 87                  		add	a,a
(1) 1229/     570 : 5F                  		ld	e,a
(1) 1230/     571 : 19                  		add	hl,de
(1) 1231/     572 : 7E                  		ld	a,(hl)
(1) 1232/     573 : 23                  		inc	hl
(1) 1233/     574 : CB 7F               		bit	7,a
(1) 1234/     576 : 28 04               		jr	z,.no_glbl
(1) 1235/     578 : FD CB 00 C6         		set	0,(iy+trk_Status)	; Enable GLOBAL sub-beats
(1) 1236/     57C :                     .no_glbl:
(1) 1237/     57C : CF                  		rst	8
(1) 1238/     57D : E6 7F               		and	01111111b
(1) 1239/     57F : FD 77 03            		ld	(iy+trk_TickSet),a
(1) 1240/     582 : 7E                  		ld	a,(hl)			; Read and temporally
(1) 1241/     583 : 23                  		inc	hl			; grab it's pointers
(1) 1242/     584 : 4E                  		ld	c,(hl)
(1) 1243/     585 : 23                  		inc	hl
(1) 1244/     586 : 6E                  		ld	l,(hl)
(1) 1245/     587 : 61                  		ld	h,c
(1) 1246/     588 : 11 A4 1F            		ld	de,headerOut
(1) 1247/     58B : 0E 0E               		ld	c,0Eh
(1) 1248/     58D : CD C9 11            		call	transferRom		; ** ROM access **
(1) 1249/     590 : DD 21 B1 1F         		ld	ix,headerOut_e-1	; Read temp header BACKWARDS
(1) 1250/     594 : CF                  		rst	8
(1) 1251/     595 :                     
(1) 1252/     595 :                     	; headerOut:
(1) 1253/     595 :                     	; dc.w numof_chnls
(1) 1254/     595 :                     	; dc.l .blk,.pat,.ins
(1) 1255/     595 :                     	; *** READING BACKWARDS
(1) 1256/     595 : CD D2 05            		call	.grab_rhead		; Instrument data
(1) 1257/     598 : FD 75 20            		ld	(iy+trk_RomInst),l
(1) 1258/     59B : FD 74 21            		ld	(iy+(trk_RomInst+1)),h
(1) 1259/     59E : FD 70 22            		ld	(iy+(trk_RomInst+2)),b
(1) 1260/     5A1 : FD 36 15 80         		ld	(iy+trk_BankIns),80h	; Reset instrument banking
(1) 1261/     5A5 : E7                  		rst	20h
(1) 1262/     5A6 : CF                  		rst	8
(1) 1263/     5A7 : CD D2 05            		call	.grab_rhead		; Pattern heads
(1) 1264/     5AA : FD 75 1D            		ld	(iy+trk_RomPatt),l	; Save ROM patt base
(1) 1265/     5AD : FD 74 1E            		ld	(iy+(trk_RomPatt+1)),h
(1) 1266/     5B0 : FD 70 1F            		ld	(iy+(trk_RomPatt+2)),b
(1) 1267/     5B3 : FD 36 16 80         		ld	(iy+trk_BankHeads),80h	; Reset pattern banking
(1) 1268/     5B7 : CF                  		rst	8
(1) 1269/     5B8 : CD D2 05            		call	.grab_rhead		; Block data
(1) 1270/     5BB : FD 75 23            		ld	(iy+trk_RomBlks),l	; Save ROM patt base
(1) 1271/     5BE : FD 74 24            		ld	(iy+(trk_RomBlks+1)),h
(1) 1272/     5C1 : FD 70 25            		ld	(iy+(trk_RomBlks+2)),b
(1) 1273/     5C4 : FD 36 17 80         		ld	(iy+trk_BankBlk),80h	; Reset pattern banking
(1) 1274/     5C8 : CF                  		rst	8
(1) 1275/     5C9 : DD 7E 00            		ld	a,(ix)			; dc.w numof_chnls
(1) 1276/     5CC : FD 77 18            		ld	(iy+trk_MaxChnl),a
(1) 1277/     5CF : C3 5D 04            		jp	.set_track
(1) 1278/     5D2 :                     
(1) 1279/     5D2 :                     ; Read 68K pointer:
(1) 1280/     5D2 :                     ; hl - 00xxxx
(1) 1281/     5D2 :                     ;  b - xx0000
(1) 1282/     5D2 :                     .grab_rhead:
(1) 1283/     5D2 : DD 6E 00            		ld	l,(ix)
(1) 1284/     5D5 : DD 2B               		dec	ix
(1) 1285/     5D7 : DD 66 00            		ld	h,(ix)
(1) 1286/     5DA : CF                  		rst	8
(1) 1287/     5DB : DD 2B               		dec	ix
(1) 1288/     5DD : DD 46 00            		ld	b,(ix)
(1) 1289/     5E0 : DD 2B               		dec	ix
(1) 1290/     5E2 :                     ; 		ld	c,(ix)
(1) 1291/     5E2 : DD 2B               		dec	ix
(1) 1292/     5E4 : C9                  		ret
(1) 1293/     5E5 :                     
(1) 1294/     5E5 :                     ; ----------------------------------------
(1) 1295/     5E5 :                     ; Reset tracker channels
(1) 1296/     5E5 :                     ;
(1) 1297/     5E5 :                     ; iy - Track buffer
(1) 1298/     5E5 :                     ;
(1) 1299/     5E5 :                     ; Breaks:
(1) 1300/     5E5 :                     ; ix
(1) 1301/     5E5 :                     ; ----------------------------------------
(1) 1302/     5E5 :                     
(1) 1303/     5E5 :                     ; ----------------------------------------
(1) 1304/     5E5 :                     ; Reset tracker channels
(1) 1305/     5E5 :                     ;
(1) 1306/     5E5 :                     ; iy - Track buffer
(1) 1307/     5E5 :                     ;
(1) 1308/     5E5 :                     ; Breaks:
(1) 1309/     5E5 :                     ; b ,de,hl,ix
(1) 1310/     5E5 :                     ; ----------------------------------------
(1) 1311/     5E5 :                     
(1) 1312/     5E5 :                     track_out:
(1) 1313/     5E5 : FD E5               		push	iy
(1) 1314/     5E7 : E1                  		pop	hl
(1) 1315/     5E8 : DD 21 00 1E         		ld	ix,trkChnls
(1) 1316/     5EC : CF                  		rst	8
(1) 1317/     5ED : 11 26 00            		ld	de,trk_ChnIndx
(1) 1318/     5F0 : 19                  		add	hl,de
(1) 1319/     5F1 : 06 1A               		ld	b,MAX_TRKINDX
(1) 1320/     5F3 :                     .indx_del:
(1) 1321/     5F3 : 7E                  		ld	a,(hl)
(1) 1322/     5F4 : B7                  		or	a
(1) 1323/     5F5 : 28 2A               		jr	z,.nothin
(1) 1324/     5F7 : CF                  		rst	8
(1) 1325/     5F8 : DD E5               		push	ix
(1) 1326/     5FA : E6 1F               		and	00011111b
(1) 1327/     5FC : 87                  		add	a,a
(1) 1328/     5FD : 87                  		add	a,a
(1) 1329/     5FE : 87                  		add	a,a
(1) 1330/     5FF : 5F                  		ld	e,a
(1) 1331/     600 : CF                  		rst	8
(1) 1332/     601 : DD 19               		add	ix,de
(1) 1333/     603 : AF                  		xor	a
(1) 1334/     604 : DD 36 02 FE         		ld	(ix+chnl_Note),-2
(1) 1335/     608 : DD 36 00 01         		ld	(ix+chnl_Flags),1
(1) 1336/     60C : DD 36 04 40         		ld	(ix+chnl_Vol),64
(1) 1337/     610 : DD 77 05            		ld	(ix+chnl_EffId),a
(1) 1338/     613 : CF                  		rst	8
(1) 1339/     614 : DD 77 06            		ld	(ix+chnl_EffArg),a
(1) 1340/     617 : DD 77 03            		ld	(ix+chnl_Ins),a
(1) 1341/     61A : DD 77 07            		ld	(ix+chnl_Type),a
(1) 1342/     61D : DD E1               		pop	ix
(1) 1343/     61F : 77                  		ld	(hl),a
(1) 1344/     620 : 00                  		nop
(1) 1345/     621 :                     .nothin:
(1) 1346/     621 : 23                  		inc	hl
(1) 1347/     622 : 10 CF               		djnz	.indx_del
(1) 1348/     624 : 3E 01               		ld	a,1
(1) 1349/     626 : 32 87 1F            		ld	(marsUpd),a
(1) 1350/     629 : C9                  		ret
(1) 1351/     62A :                     
(1) 1352/     62A :                     ; ----------------------------------------
(1) 1353/     62A :                     ; Load tracklist from ROM
(1) 1354/     62A :                     ;
(1) 1355/     62A :                     ; a - SeqID
(1) 1356/     62A :                     ; ----------------------------------------
(1) 1357/     62A :                     
(1) 1358/     62A :                     get_RomTrcks:
(1) 1359/     62A : E6 F8               		and	11111000b
(1) 1360/     62C : 5F                  		ld	e,a
(1) 1361/     62D : 3A 86 1F            		ld	a,(trkListPage)
(1) 1362/     630 : BB                  		cp	e
(1) 1363/     631 : C8                  		ret	z
(1) 1364/     632 : 7B                  		ld	a,e
(1) 1365/     633 : 32 86 1F            		ld	(trkListPage),a
(1) 1366/     636 :                     init_RomTrcks:
(1) 1367/     636 : 07                  		rlca
(1) 1368/     637 : 07                  		rlca			; 10h*4=40h
(1) 1369/     638 : 57                  		ld	d,a
(1) 1370/     639 : E6 E0               		and	11100000b
(1) 1371/     63B : 5F                  		ld	e,a
(1) 1372/     63C : 7A                  		ld	a,d
(1) 1373/     63D : CF                  		rst	8
(1) 1374/     63E : E6 03               		and	00000011b	; * 40h
(1) 1375/     640 : 57                  		ld	d,a
(1) 1376/     641 : 21 1C 00            		ld	hl,gemaMstrListPos
(1) 1377/     644 : 23                  		inc	hl
(1) 1378/     645 : 7E                  		ld	a,(hl)
(1) 1379/     646 : 23                  		inc	hl
(1) 1380/     647 : 4E                  		ld	c,(hl)
(1) 1381/     648 : 23                  		inc	hl
(1) 1382/     649 : 6E                  		ld	l,(hl)
(1) 1383/     64A : CF                  		rst	8
(1) 1384/     64B : 61                  		ld	h,c
(1) 1385/     64C : 19                  		add	hl,de
(1) 1386/     64D : CE 00               		adc	a,0
(1) 1387/     64F : 11 3E 1C            		ld	de,trkListCach
(1) 1388/     652 : 01 20 00            		ld	bc,4*8
(1) 1389/     655 : C3 C9 11            		jp	transferRom	; *** ROM ACCESS ***
(1) 1390/     658 :                     
(1) 1391/     658 :                     ; ============================================================
(1) 1392/     658 :                     ; --------------------------------------------------------
(1) 1393/     658 :                     ; Process track channels to the sound chips
(1) 1394/     658 :                     ; --------------------------------------------------------
(1) 1395/     658 :                     
(1) 1396/     658 :                     set_chips:
(1) 1397/     658 : E7                  		rst	20h			; Refill wave
(1) 1398/     659 : CD A8 11            		call	get_tick
(1) 1399/     65C : FD 21 D8 16         		ld	iy,nikona_BuffList
(1) 1400/     660 :                     .trk_buffrs:
(1) 1401/     660 : FD 7E 00            		ld	a,(iy)
(1) 1402/     663 : FE FF               		cp	-1
(1) 1403/     665 : 28 0F               		jr	z,proc_chips
(1) 1404/     667 : CF                  		rst	8
(1) 1405/     668 : FD E5               		push	iy
(1) 1406/     66A : CD 9F 06            		call	tblbuff_read
(1) 1407/     66D : FD E1               		pop	iy
(1) 1408/     66F : 11 08 00            		ld	de,MAX_BUFFNTRY
(1) 1409/     672 : FD 19               		add	iy,de
(1) 1410/     674 : 18 EA               		jr	.trk_buffrs
(1) 1411/     676 :                     proc_chips:
(1) 1412/     676 : E7                  		rst	20h			; Refill wave
(1) 1413/     677 : CF                  		rst	8
(1) 1414/     678 : FD 21 28 1A         		ld	iy,tblPSGN		; PSG Noise
(1) 1415/     67C : CD 99 08            		call	dtbl_singl
(1) 1416/     67F : CF                  		rst	8
(1) 1417/     680 : FD 21 DE 19         		ld	iy,tblPSG		; PSG Squares
(1) 1418/     684 : CD 83 08            		call	dtbl_multi
(1) 1419/     687 : CF                  		rst	8
(1) 1420/     688 : FD 21 40 1A         		ld	iy,tblFM		; FM/FM3/DAC
(1) 1421/     68C : CD 83 08            		call	dtbl_multi
(1) 1422/     68F : CF                  		rst	8
(1) 1423/     690 : FD 21 D2 1A         		ld	iy,tblPCM		; SEGA CD PCM
(1) 1424/     694 : CD 83 08            		call	dtbl_multi
(1) 1425/     697 : CF                  		rst	8
(1) 1426/     698 : FD 21 94 1B         		ld	iy,tblPWM		; 32X PWM
(1) 1427/     69C : C3 83 08            		jp	dtbl_multi
(1) 1428/     69F :                     
(1) 1429/     69F :                     ; ----------------------------------------
(1) 1430/     69F :                     ; Read current track
(1) 1431/     69F :                     ;
(1) 1432/     69F :                     ; iy - Buffer
(1) 1433/     69F :                     tblbuff_read:
(1) 1434/     69F : FD 6E 00            		ld	l,(iy)
(1) 1435/     6A2 : FD 66 01            		ld	h,(iy+1)
(1) 1436/     6A5 : CD A8 11            		call	get_tick
(1) 1437/     6A8 : CF                  		rst	8
(1) 1438/     6A9 : E5                  		push	hl
(1) 1439/     6AA : FD E1               		pop	iy
(1) 1440/     6AC : FD 46 00            		ld	b,(iy+trk_Status)	; bit7: Track active?
(1) 1441/     6AF : CB 78               		bit	7,b
(1) 1442/     6B1 : C8                  		ret	z
(1) 1443/     6B2 : 78                  		ld	a,b			; trk_Status == -1?
(1) 1444/     6B3 : FE FF               		cp	-1
(1) 1445/     6B5 : C2 BF 06            		jp	nz,.track_cont
(1) 1446/     6B8 : CD E5 05            		call	track_out
(1) 1447/     6BB : FD 36 00 00         		ld	(iy+trk_Status),0
(1) 1448/     6BF :                     .track_cont:
(1) 1449/     6BF : E7                  		rst	20h
(1) 1450/     6C0 : FD E5               		push	iy
(1) 1451/     6C2 : E1                  		pop	hl
(1) 1452/     6C3 : CF                  		rst	8
(1) 1453/     6C4 : DD 21 00 1E         		ld	ix,trkChnls
(1) 1454/     6C8 : 11 26 00            		ld	de,trk_ChnIndx
(1) 1455/     6CB : 19                  		add	hl,de
(1) 1456/     6CC : FD 7E 18            		ld	a,(iy+trk_MaxChnl)	; If zero, read ALL indexes (lazy mode)
(1) 1457/     6CF : B7                  		or	a
(1) 1458/     6D0 : 20 02               		jr	nz,.valid
(1) 1459/     6D2 : 06 1A               		ld	b,MAX_TRKINDX
(1) 1460/     6D4 :                     .valid:
(1) 1461/     6D4 : CF                  		rst	8
(1) 1462/     6D5 : 47                  		ld	b,a
(1) 1463/     6D6 :                     .next_indx:
(1) 1464/     6D6 :                     ; 		rst	20h			; Refill wave
(1) 1465/     6D6 : 7E                  		ld	a,(hl)			; Read index
(1) 1466/     6D7 : B7                  		or	a
(1) 1467/     6D8 : 20 0B               		jr	nz,.has_indx		; non-zero: valid
(1) 1468/     6DA : C5                  		push	bc			; waste CPU to
(1) 1469/     6DB : 06 04               		ld	b,4			; sync the wave
(1) 1470/     6DD : 00                  		nop
(1) 1471/     6DE : 00                  		nop
(1) 1472/     6DF : CF                  		rst	8
(1) 1473/     6E0 : 10 FE               		djnz	$
(1) 1474/     6E2 : C1                  		pop	bc
(1) 1475/     6E3 : 18 1C               		jr	.no_indx
(1) 1476/     6E5 :                     .has_indx:
(1) 1477/     6E5 : E6 1F               		and	00011111b
(1) 1478/     6E7 : 87                  		add	a,a
(1) 1479/     6E8 : 87                  		add	a,a
(1) 1480/     6E9 : 87                  		add	a,a
(1) 1481/     6EA : CF                  		rst	8
(1) 1482/     6EB : 16 00               		ld	d,0
(1) 1483/     6ED : 5F                  		ld	e,a
(1) 1484/     6EE : C5                  		push	bc
(1) 1485/     6EF : E5                  		push	hl
(1) 1486/     6F0 : DD E5               		push	ix
(1) 1487/     6F2 : DD 19               		add	ix,de
(1) 1488/     6F4 : DD 7E 00            		ld	a,(ix)			; ** chnl_Flags
(1) 1489/     6F7 : E6 0F               		and	00001111b
(1) 1490/     6F9 : C4 05 07            		call	nz,.do_chip
(1) 1491/     6FC : CF                  		rst	8
(1) 1492/     6FD : DD E1               		pop	ix
(1) 1493/     6FF : E1                  		pop	hl
(1) 1494/     700 : C1                  		pop	bc
(1) 1495/     701 :                     .no_indx:
(1) 1496/     701 : 23                  		inc	hl
(1) 1497/     702 : 10 D2               		djnz	.next_indx
(1) 1498/     704 : C9                  		ret
(1) 1499/     705 :                     
(1) 1500/     705 :                     ; ----------------------------------------
(1) 1501/     705 :                     ; iy - Track buffer
(1) 1502/     705 :                     ; ix - Current channel
(1) 1503/     705 :                     
(1) 1504/     705 :                     .do_chip:
(1) 1505/     705 : DD 7E 03            		ld	a,(ix+chnl_Ins)		; Check intrument type FIRST
(1) 1506/     708 : B7                  		or	a
(1) 1507/     709 : C8                  		ret	z			; If 0 == stop
(1) 1508/     70A : CF                  		rst	8
(1) 1509/     70B : 3D                  		dec	a			; inst-1
(1) 1510/     70C : E6 7F               		and	01111111b
(1) 1511/     70E : 21 56 1C            		ld	hl,instListOut		; temporal storage for instrument
(1) 1512/     711 : 16 00               		ld	d,0
(1) 1513/     713 : FD 5E 14            		ld	e,(iy+trk_Priority)
(1) 1514/     716 : CB 03               		rlc	e
(1) 1515/     718 : CB 03               		rlc	e
(1) 1516/     71A : CB 03               		rlc	e
(1) 1517/     71C : 19                  		add	hl,de
(1) 1518/     71D : FD 4E 15            		ld	c,(iy+trk_BankIns)	; c - current intrument loaded
(1) 1519/     720 : CB 79               		bit	7,c			; First time?
(1) 1520/     722 : 20 03               		jr	nz,.first_ins
(1) 1521/     724 : B9                  		cp	c			; SAME instrument data?
(1) 1522/     725 : 28 24               		jr	z,.keep_it
(1) 1523/     727 :                     .first_ins:
(1) 1524/     727 : E5                  		push	hl
(1) 1525/     728 : FD 77 15            		ld	(iy+trk_BankIns),a	; Save inst number
(1) 1526/     72B : 07                  		rlca
(1) 1527/     72C : 07                  		rlca
(1) 1528/     72D : 07                  		rlca
(1) 1529/     72E : 47                  		ld	b,a
(1) 1530/     72F : E6 F8               		and	11111000b
(1) 1531/     731 : 4F                  		ld	c,a
(1) 1532/     732 : 78                  		ld	a,b
(1) 1533/     733 : E6 07               		and	00000111b
(1) 1534/     735 : CF                  		rst	8
(1) 1535/     736 : 47                  		ld	b,a
(1) 1536/     737 : EB                  		ex	hl,de
(1) 1537/     738 : FD 6E 20            		ld	l,(iy+trk_RomInst)
(1) 1538/     73B : FD 66 21            		ld	h,(iy+(trk_RomInst+1))
(1) 1539/     73E : FD 7E 22            		ld	a,(iy+(trk_RomInst+2))
(1) 1540/     741 : 09                  		add	hl,bc
(1) 1541/     742 : CE 00               		adc	a,0
(1) 1542/     744 : 01 08 00            		ld	bc,8			; 8 bytes
(1) 1543/     747 : CD C9 11            		call	transferRom		; ** ROM access **
(1) 1544/     74A : E1                  		pop	hl
(1) 1545/     74B :                     .keep_it:
(1) 1546/     74B : E5                  		push	hl			; <-- save hl
(1) 1547/     74C : CD 69 07            		call	.grab_link
(1) 1548/     74F : D1                  		pop	de			; --> recover as de
(1) 1549/     750 :                     	; hl - current table
(1) 1550/     750 :                     	; de - instrument data
(1) 1551/     750 : FE FF               		cp	-1			; Found any link?
(1) 1552/     752 : C8                  		ret	z
(1) 1553/     753 : 23                  		inc	hl			; Skip link
(1) 1554/     754 : 23                  		inc	hl
(1) 1555/     755 : FD 7E 14            		ld	a,(iy+trk_Priority)
(1) 1556/     758 : 77                  		ld	(hl),a			; Write priority level
(1) 1557/     759 : 23                  		inc	hl
(1) 1558/     75A : FD 7E 0E            		ld	a,(iy+trk_VolMaster)
(1) 1559/     75D : 77                  		ld	(hl),a			; Write current MASTER volume
(1) 1560/     75E : 01 0D 00            		ld	bc,10h-3		; Move to instr data
(1) 1561/     761 : 09                  		add	hl,bc
(1) 1562/     762 : EB                  		ex	hl,de			; <-- swap for ldir
(1) 1563/     763 : 01 08 00            		ld	bc,8
(1) 1564/     766 : ED B0               		ldir				; COPYPASTE instr data from temporal
(1) 1565/     768 : C9                  		ret
(1) 1566/     769 :                     
(1) 1567/     769 :                     ; ----------------------------------------
(1) 1568/     769 :                     ; Search for a linked channel on the
(1) 1569/     769 :                     ; chip table
(1) 1570/     769 :                     ;
(1) 1571/     769 :                     ; Input:
(1) 1572/     769 :                     ; iy - Track buffer
(1) 1573/     769 :                     ; ix - Current channel
(1) 1574/     769 :                     ; hl - Intrument data
(1) 1575/     769 :                     ;
(1) 1576/     769 :                     ; Returns:
(1) 1577/     769 :                     ; hl - Channel table to use
(1) 1578/     769 :                     ;  a - Return value:
(1) 1579/     769 :                     ;       0 - Found
(1) 1580/     769 :                     ;      -1 - Not found
(1) 1581/     769 :                     ; ----------------------------------------
(1) 1582/     769 :                     
(1) 1583/     769 :                     .grab_link:
(1) 1584/     769 : 7E                  		ld	a,(hl)			; Check INSTRUMENT type
(1) 1585/     76A : E6 F0               		and	11110000b		; Filter bits
(1) 1586/     76C : 5F                  		ld	e,a			; e - NEW chip
(1) 1587/     76D : DD 7E 01            		ld	a,(ix+chnl_Chip)	; a - our current chip
(1) 1588/     770 : E6 F0               		and	11110000b		; Filter bits too.
(1) 1589/     772 : CA E1 07            		jp	z,.new_chip		; If 0: It's a NEW chip
(1) 1590/     775 : BB                  		cp 	e			; Same chip as NEW?
(1) 1591/     776 : CA 8A 07            		jp	z,.srch_link		; then re-use the slot
(1) 1592/     779 : CF                  		rst	8
(1) 1593/     77A : 57                  		ld	d,a			; d - Chip to silence
(1) 1594/     77B : D5                  		push	de
(1) 1595/     77C : CD 8A 07            		call	.srch_link		; Search our link (first)
(1) 1596/     77F : D1                  		pop	de
(1) 1597/     780 : FE FF               		cp	-1
(1) 1598/     782 : C8                  		ret	z
(1) 1599/     783 : CF                  		rst	8
(1) 1600/     784 : CD 6B 08            		call	.reset_link
(1) 1601/     787 : C3 E1 07            		jp	.new_chip
(1) 1602/     78A :                     
(1) 1603/     78A :                     ; ----------------------------------------
(1) 1604/     78A :                     ; ** RELINK **
(1) 1605/     78A :                     ; e - Our current chip
(1) 1606/     78A :                     .srch_link:
(1) 1607/     78A : CD 51 08            		call	.pick_tbl	; Pick chip table in hl
(1) 1608/     78D : DD E5               		push	ix		; copy ix to bc
(1) 1609/     78F : C1                  		pop	bc
(1) 1610/     790 : B7                  		or	a
(1) 1611/     791 : FA D1 07            		jp	m,.singl_link
(1) 1612/     794 :                     .srch_lloop:
(1) 1613/     794 : 7E                  		ld	a,(hl)		; Read LSB
(1) 1614/     795 : FE FF               		cp	-1		; If -1, return -1
(1) 1615/     797 : 28 45               		jr	z,.refill
(1) 1616/     799 : B9                  		cp	c
(1) 1617/     79A : 20 07               		jr	nz,.invldl
(1) 1618/     79C : CF                  		rst	8
(1) 1619/     79D : 23                  		inc	hl
(1) 1620/     79E : 7E                  		ld	a,(hl)
(1) 1621/     79F : 2B                  		dec	hl
(1) 1622/     7A0 : B8                  		cp	b
(1) 1623/     7A1 : 28 08               		jr	z,.reroll
(1) 1624/     7A3 :                     .invldl:
(1) 1625/     7A3 : D5                  		push	de
(1) 1626/     7A4 : 11 18 00            		ld	de,MAX_TBLSIZE
(1) 1627/     7A7 :                     ; 		rst	8
(1) 1628/     7A7 :                     ; 		nop	; wave sync *
(1) 1629/     7A7 : 19                  		add	hl,de
(1) 1630/     7A8 : D1                  		pop	de
(1) 1631/     7A9 : 18 E9               		jr	.srch_lloop
(1) 1632/     7AB :                     .reroll:
(1) 1633/     7AB :                     	; *** Special re-roll check ***
(1) 1634/     7AB : E5                  		push	hl
(1) 1635/     7AC : 01 05 00            		ld	bc,5		; <-- fake iy+05h
(1) 1636/     7AF : 09                  		add	hl,bc
(1) 1637/     7B0 : CF                  		rst	8
(1) 1638/     7B1 : 4E                  		ld	c,(hl)		; c - ID
(1) 1639/     7B2 : E1                  		pop	hl
(1) 1640/     7B3 : 7B                  		ld	a,e
(1) 1641/     7B4 : FE 80               		cp	80h		; PSG?
(1) 1642/     7B6 : 28 02               		jr	z,.chk_psg
(1) 1643/     7B8 :                     ; 		cp	0A0h		; FM normal?
(1) 1644/     7B8 :                     ; 		jr	z,.chk_fm
(1) 1645/     7B8 : 18 22               		jr	.rnot_psg
(1) 1646/     7BA :                     .chk_psg:
(1) 1647/     7BA : 3A 83 1F            		ld	a,(psgHatMode)
(1) 1648/     7BD : E6 03               		and	011b
(1) 1649/     7BF : FE 03               		cp	011b
(1) 1650/     7C1 : 20 19               		jr	nz,.rnot_psg
(1) 1651/     7C3 : 79                  		ld	a,c
(1) 1652/     7C4 : FE 02               		cp	2
(1) 1653/     7C6 : 20 14               		jr	nz,.rnot_psg
(1) 1654/     7C8 : CF                  		rst	8
(1) 1655/     7C9 : 16 80               		ld	d,80h		; Set PSG silence
(1) 1656/     7CB : CD 6B 08            		call	.reset_link	; on PSG3
(1) 1657/     7CE : C3 4E 08            		jp	.set_asfull
(1) 1658/     7D1 :                     
(1) 1659/     7D1 :                     ; ----------------------
(1) 1660/     7D1 :                     ; PSGN/FM3/FM6
(1) 1661/     7D1 :                     .singl_link:
(1) 1662/     7D1 : 23                  		inc	hl			; Read MSB first
(1) 1663/     7D2 : 7E                  		ld	a,(hl)
(1) 1664/     7D3 : 2B                  		dec	hl
(1) 1665/     7D4 : CF                  		rst	8
(1) 1666/     7D5 : B8                  		cp	b			; MSB match?
(1) 1667/     7D6 : 20 06               		jr	nz,.refill
(1) 1668/     7D8 : 7E                  		ld	a,(hl)			; Read LSB
(1) 1669/     7D9 : B9                  		cp	c
(1) 1670/     7DA : 20 02               		jr	nz,.refill
(1) 1671/     7DC :                     ; ----------------------
(1) 1672/     7DC :                     .rnot_psg:
(1) 1673/     7DC : AF                  		xor	a
(1) 1674/     7DD : C9                  		ret
(1) 1675/     7DE :                     ; ***
(1) 1676/     7DE :                     .refill:
(1) 1677/     7DE : DD 5E 01            		ld	e,(ix+chnl_Chip)
(1) 1678/     7E1 :                     
(1) 1679/     7E1 :                     ; ----------------------------------------
(1) 1680/     7E1 :                     ; *** NEW CHIP ***
(1) 1681/     7E1 :                     ; e - Chip to set
(1) 1682/     7E1 :                     .new_chip:
(1) 1683/     7E1 : 7B                  		ld	a,e			; Read NEW chip
(1) 1684/     7E2 : B7                  		or	a			; If non-minus, exit.
(1) 1685/     7E3 : F0                  		ret	p
(1) 1686/     7E4 : CD 51 08            		call	.pick_tbl
(1) 1687/     7E7 : CF                  		rst	8
(1) 1688/     7E8 : FD 4E 14            		ld	c,(iy+trk_Priority)	; c - OUR priority level
(1) 1689/     7EB : B7                  		or	a
(1) 1690/     7EC : FA 3C 08            		jp	m,.singl_free
(1) 1691/     7EF : E5                  		push	hl			; Backup START table
(1) 1692/     7F0 :                     ; PASS 1
(1) 1693/     7F0 :                     .srch_free:
(1) 1694/     7F0 : 7E                  		ld	a,(hl)			; Read LSB
(1) 1695/     7F1 : FE FF               		cp	-1			; If -1, return -1
(1) 1696/     7F3 : 28 0B               		jr	z,.pass_2
(1) 1697/     7F5 : 23                  		inc	hl
(1) 1698/     7F6 : 46                  		ld	b,(hl)			; Read MSB
(1) 1699/     7F7 : 2B                  		dec	hl
(1) 1700/     7F8 :                     ; 		nop	; wave sync
(1) 1701/     7F8 :                     ; 		nop
(1) 1702/     7F8 :                     ; 		rst	8
(1) 1703/     7F8 :                     ; 		nop
(1) 1704/     7F8 :                     ; 		nop
(1) 1705/     7F8 : B0                  		or	b
(1) 1706/     7F9 : 28 24               		jr	z,.new_link_z
(1) 1707/     7FB : CD 18 08            		call	.nextsrch_tbl
(1) 1708/     7FE : 18 F0               		jr	.srch_free
(1) 1709/     800 :                     
(1) 1710/     800 :                     ; PASS 2
(1) 1711/     800 :                     ; Rewrite mode
(1) 1712/     800 :                     .pass_2:
(1) 1713/     800 : E1                  		pop	hl
(1) 1714/     801 :                     .next_prio:
(1) 1715/     801 : 7E                  		ld	a,(hl)		; Read LSB
(1) 1716/     802 : FE FF               		cp	-1		; If -1, return -1
(1) 1717/     804 : C8                  		ret	z
(1) 1718/     805 : 23                  		inc	hl
(1) 1719/     806 : 23                  		inc	hl
(1) 1720/     807 : 7E                  		ld	a,(hl)		; Read priority
(1) 1721/     808 : 2B                  		dec	hl
(1) 1722/     809 : 2B                  		dec	hl
(1) 1723/     80A : B9                  		cp	c
(1) 1724/     80B : 28 16               		jr	z,.new_link_o
(1) 1725/     80D : 38 14               		jr	c,.new_link_o
(1) 1726/     80F : B7                  		or	a
(1) 1727/     810 : 28 11               		jr	z,.new_link_o
(1) 1728/     812 : CF                  		rst	8
(1) 1729/     813 : CD 18 08            		call	.nextsrch_tbl
(1) 1730/     816 : 18 E9               		jr	.next_prio
(1) 1731/     818 :                     .nextsrch_tbl:
(1) 1732/     818 : D5                  		push	de
(1) 1733/     819 : 11 18 00            		ld	de,MAX_TBLSIZE
(1) 1734/     81C : 19                  		add	hl,de
(1) 1735/     81D : D1                  		pop	de
(1) 1736/     81E :                     ; 		nop	; wave sync
(1) 1737/     81E :                     ; 		nop
(1) 1738/     81E :                     ; 		rst	8
(1) 1739/     81E :                     ; 		nop
(1) 1740/     81E :                     ; 		nop
(1) 1741/     81E : C9                  		ret
(1) 1742/     81F :                     .new_link_z:
(1) 1743/     81F : 33                  		inc	sp		; skip backup
(1) 1744/     820 : 33                  		inc	sp
(1) 1745/     821 : 18 08               		jr	.new_link
(1) 1746/     823 :                     
(1) 1747/     823 :                     ; OVERWRITE link
(1) 1748/     823 :                     .new_link_o:
(1) 1749/     823 : E5                  		push	hl
(1) 1750/     824 : DD 56 01            		ld	d,(ix+chnl_Chip)
(1) 1751/     827 : CD 6B 08            		call	.reset_link
(1) 1752/     82A : E1                  		pop	hl
(1) 1753/     82B :                     ; NEW link
(1) 1754/     82B :                     .new_link:
(1) 1755/     82B : CF                  		rst	8
(1) 1756/     82C : 23                  		inc	hl
(1) 1757/     82D : 23                  		inc	hl
(1) 1758/     82E :                     ; hl+2
(1) 1759/     82E :                     .l_hiprio:
(1) 1760/     82E : DD 73 01            		ld	(ix+chnl_Chip),e
(1) 1761/     831 : DD E5               		push	ix
(1) 1762/     833 : D1                  		pop	de
(1) 1763/     834 : 71                  		ld	(hl),c		; write priority
(1) 1764/     835 : 2B                  		dec	hl
(1) 1765/     836 : CF                  		rst	8
(1) 1766/     837 : 72                  		ld 	(hl),d		; MSB
(1) 1767/     838 : 2B                  		dec	hl
(1) 1768/     839 : 73                  		ld	(hl),e		; LSB
(1) 1769/     83A : AF                  		xor	a
(1) 1770/     83B : C9                  		ret
(1) 1771/     83C :                     
(1) 1772/     83C :                     ; Single slot
(1) 1773/     83C :                     ; c - priority
(1) 1774/     83C :                     ; e - chip
(1) 1775/     83C :                     .singl_free:
(1) 1776/     83C : 46                  		ld	b,(hl)
(1) 1777/     83D : 23                  		inc	hl
(1) 1778/     83E : 7E                  		ld	a,(hl)
(1) 1779/     83F : 23                  		inc	hl
(1) 1780/     840 : B0                  		or	b
(1) 1781/     841 : 28 EB               		jr	z,.l_hiprio
(1) 1782/     843 : CF                  		rst	8
(1) 1783/     844 : 7E                  		ld	a,(hl)
(1) 1784/     845 : B9                  		cp	c
(1) 1785/     846 : 28 E6               		jr	z,.l_hiprio
(1) 1786/     848 : 38 E4               		jr	c,.l_hiprio		; PRIORITY
(1) 1787/     84A : B7                  		or	a
(1) 1788/     84B : 28 E1               		jr	z,.l_hiprio
(1) 1789/     84D : CF                  		rst	8
(1) 1790/     84E :                     .set_asfull:
(1) 1791/     84E : 3E FF               		ld	a,-1			; Return -1, can't use instrument.
(1) 1792/     850 : C9                  		ret
(1) 1793/     851 :                     
(1) 1794/     851 :                     ; Pick chip table
(1) 1795/     851 :                     ; In:
(1) 1796/     851 :                     ;  a - ID
(1) 1797/     851 :                     ;
(1) 1798/     851 :                     ; Out:
(1) 1799/     851 :                     ;  a - Special bit + ID
(1) 1800/     851 :                     ;
(1) 1801/     851 :                     ; hl - Table
(1) 1802/     851 :                     .pick_tbl:
(1) 1803/     851 : D5                  		push	de
(1) 1804/     852 : 0F                  		rrca
(1) 1805/     853 : 0F                  		rrca
(1) 1806/     854 : 0F                  		rrca
(1) 1807/     855 : 0F                  		rrca
(1) 1808/     856 : E6 07               		and	00000111b
(1) 1809/     858 : 87                  		add	a,a
(1) 1810/     859 : 21 CE 19            		ld	hl,tblList
(1) 1811/     85C : E5                  		push	hl
(1) 1812/     85D : 16 00               		ld	d,0
(1) 1813/     85F : 5F                  		ld	e,a
(1) 1814/     860 : 19                  		add	hl,de
(1) 1815/     861 : 5E                  		ld	e,(hl)
(1) 1816/     862 : 23                  		inc	hl
(1) 1817/     863 : 7E                  		ld	a,(hl)
(1) 1818/     864 : 57                  		ld	d,a
(1) 1819/     865 : CB BA               		res	7,d
(1) 1820/     867 : E1                  		pop	hl
(1) 1821/     868 : 19                  		add	hl,de
(1) 1822/     869 : D1                  		pop	de
(1) 1823/     86A : C9                  		ret
(1) 1824/     86B :                     
(1) 1825/     86B :                     ; d - Silence chip
(1) 1826/     86B :                     ;
(1) 1827/     86B :                     ; Uses:
(1) 1828/     86B :                     ; bc
(1) 1829/     86B :                     .reset_link:
(1) 1830/     86B : CF                  		rst	8
(1) 1831/     86C : 36 00               		ld	(hl),0			; Delete link
(1) 1832/     86E : 23                  		inc	hl
(1) 1833/     86F : 36 00               		ld	(hl),0
(1) 1834/     871 : 23                  		inc	hl
(1) 1835/     872 : 72                  		ld	(hl),d			; Set "silence" chip ID.
(1) 1836/     873 : 01 06 00            		ld	bc,8-2			; Go to 08h
(1) 1837/     876 : 09                  		add	hl,bc
(1) 1838/     877 : 06 04               		ld	b,8/2
(1) 1839/     879 :                     .clrfull:
(1) 1840/     879 : 36 00               		ld	(hl),0			; Reset settings 08-0Bh
(1) 1841/     87B : 23                  		inc	hl
(1) 1842/     87C : 36 00               		ld	(hl),0
(1) 1843/     87E : 23                  		inc	hl
(1) 1844/     87F : CF                  		rst	8
(1) 1845/     880 : 10 F7               		djnz	.clrfull
(1) 1846/     882 : C9                  		ret
(1) 1847/     883 :                     
(1) 1848/     883 :                     ; ============================================
(1) 1849/     883 :                     ; ----------------------------------------
(1) 1850/     883 :                     ; Process chip using it's table
(1) 1851/     883 :                     ;
(1) 1852/     883 :                     ; iy - table to read
(1) 1853/     883 :                     ; ----------------------------------------
(1) 1854/     883 :                     
(1) 1855/     883 :                     dtbl_multi:
(1) 1856/     883 : FD 7E 00            		ld	a,(iy)
(1) 1857/     886 : FE FF               		cp	-1
(1) 1858/     888 : C8                  		ret	z
(1) 1859/     889 : CD 99 08            		call	dtbl_frommul
(1) 1860/     88C : CF                  		rst	8
(1) 1861/     88D : 11 18 00            		ld	de,MAX_TBLSIZE
(1) 1862/     890 : FD 19               		add	iy,de
(1) 1863/     892 : 06 03               		ld	b,3	; wave sync ** IMPORTANT **
(1) 1864/     894 : 10 FE               		djnz	$
(1) 1865/     896 : CF                  		rst	8
(1) 1866/     897 : 18 EA               		jr	dtbl_multi
(1) 1867/     899 :                     dtbl_singl:
(1) 1868/     899 :                     ; 		rst	8
(1) 1869/     899 :                     
(1) 1870/     899 :                     dtbl_frommul:
(1) 1871/     899 : FD 5E 00            		ld	e,(iy)		; Read link
(1) 1872/     89C : FD 56 01            		ld	d,(iy+1)
(1) 1873/     89F : 7A                  		ld	a,d		; If no-zero, active
(1) 1874/     8A0 : B3                  		or	e
(1) 1875/     8A1 : 20 60               		jr	nz,.linked
(1) 1876/     8A3 : FD 7E 02            		ld	a,(iy+2)	; Silence request?
(1) 1877/     8A6 : B7                  		or	a
(1) 1878/     8A7 : F0                  		ret	p		; Return if not.
(1) 1879/     8A8 : CF                  		rst	8
(1) 1880/     8A9 : FD 36 02 00         		ld	(iy+2),0	; Reset request on memory
(1) 1881/     8AD :                     
(1) 1882/     8AD :                     ; ----------------------------------------
(1) 1883/     8AD :                     ; chip-silence request
(1) 1884/     8AD :                     ; iy - Table
(1) 1885/     8AD : E6 F0               		and	11110000b
(1) 1886/     8AF : FE 80               		cp	80h
(1) 1887/     8B1 : 28 1E               		jr	z,.siln_psg
(1) 1888/     8B3 : FE 90               		cp	90h
(1) 1889/     8B5 : 28 16               		jr	z,.siln_psg_n
(1) 1890/     8B7 : FE A0               		cp	0A0h
(1) 1891/     8B9 : 28 42               		jr	z,.siln_fm
(1) 1892/     8BB : FE B0               		cp	0B0h
(1) 1893/     8BD : 28 3E               		jr	z,.siln_fm
(1) 1894/     8BF : CF                  		rst	8
(1) 1895/     8C0 : FE C0               		cp	0C0h
(1) 1896/     8C2 : 28 36               		jr	z,.siln_dac
(1) 1897/     8C4 : FE D0               		cp	0D0h
(1) 1898/     8C6 : 28 10               		jr	z,.siln_pcm
(1) 1899/     8C8 : FE E0               		cp	0E0h
(1) 1900/     8CA : 28 18               		jr	z,.siln_pwm
(1) 1901/     8CC : C9                  		ret
(1) 1902/     8CD :                     .siln_psg_n:
(1) 1903/     8CD : AF                  		xor	a
(1) 1904/     8CE : 32 83 1F            		ld	(psgHatMode),a
(1) 1905/     8D1 :                     .siln_psg:
(1) 1906/     8D1 : CF                  		rst	8
(1) 1907/     8D2 : DD 21 6A 17         		ld	ix,psgcom
(1) 1908/     8D6 : 18 16               		jr	.rcyl_com
(1) 1909/     8D8 :                     
(1) 1910/     8D8 :                     ; --------------------------------
(1) 1911/     8D8 :                     
(1) 1912/     8D8 :                     .siln_pcm:
(1) 1913/     8D8 : 3E 01               		ld	a,1
(1) 1914/     8DA : 32 88 1F            		ld	(mcdUpd),a
(1) 1915/     8DD : CF                  		rst	8
(1) 1916/     8DE : DD 21 F2 16         		ld	ix,pcmcom
(1) 1917/     8E2 : 18 0A               		jr	.rcyl_com
(1) 1918/     8E4 :                     .siln_pwm:
(1) 1919/     8E4 : 3E 01               		ld	a,1
(1) 1920/     8E6 : 32 87 1F            		ld	(marsUpd),a
(1) 1921/     8E9 : CF                  		rst	8
(1) 1922/     8EA : DD 21 32 17         		ld	ix,pwmcom
(1) 1923/     8EE :                     ; 		jr	.rcyl_com
(1) 1924/     8EE :                     
(1) 1925/     8EE :                     ; --------------------------------
(1) 1926/     8EE :                     
(1) 1927/     8EE :                     .rcyl_com:
(1) 1928/     8EE : 06 00               		ld	b,0
(1) 1929/     8F0 : FD 4E 05            		ld	c,(iy+05h)
(1) 1930/     8F3 : DD 09               		add	ix,bc
(1) 1931/     8F5 : DD 36 00 04         		ld	(ix),100b	; key-cut
(1) 1932/     8F9 : C9                  		ret
(1) 1933/     8FA :                     
(1) 1934/     8FA :                     ; --------------------------------
(1) 1935/     8FA :                     
(1) 1936/     8FA :                     .siln_dac:
(1) 1937/     8FA : CD 16 14            		call	dac_off
(1) 1938/     8FD :                     .siln_fm:
(1) 1939/     8FD : CD D0 0A            		call	.fm_keyoff
(1) 1940/     900 : C3 D8 0A            		jp	.fm_tloff
(1) 1941/     903 :                     
(1) 1942/     903 :                     ; ----------------------------------------
(1) 1943/     903 :                     ; Process channel now
(1) 1944/     903 :                     ; iy - Table
(1) 1945/     903 :                     ; ix - Tracker channel
(1) 1946/     903 :                     .linked:
(1) 1947/     903 : 1A                  		ld	a,(de)		; ** chnl_Flags
(1) 1948/     904 : 47                  		ld	b,a		; b - flags to check
(1) 1949/     905 : E6 0F               		and	00001111b	; Filter flags
(1) 1950/     907 : C8                  		ret	z
(1) 1951/     908 : 78                  		ld	a,b
(1) 1952/     909 : E6 F0               		and	11110000b	; Keep OTHER bits
(1) 1953/     90B : 12                  		ld	(de),a		; ** clear chnl_Flags
(1) 1954/     90C : D5                  		push	de
(1) 1955/     90D : DD E1               		pop	ix
(1) 1956/     90F : FD E5               		push	iy		; table+10h instrment data
(1) 1957/     911 : E1                  		pop	hl
(1) 1958/     912 : 11 10 00            		ld	de,10h
(1) 1959/     915 : 19                  		add	hl,de
(1) 1960/     916 :                     ; 		ld	l,(iy+03h)	; trk_Instr
(1) 1961/     916 :                     ; 		ld	h,(iy+04h)
(1) 1962/     916 :                     
(1) 1963/     916 :                     	;  b - Flags LR00evin (Eff|Vol|Ins|Note)
(1) 1964/     916 :                     	; iy - Our chip table
(1) 1965/     916 :                     	; ix - Track channel
(1) 1966/     916 :                     	; hl - Intrument data
(1) 1967/     916 : CB 40               		bit	0,b		; Note
(1) 1968/     918 : C4 07 10            		call	nz,.note
(1) 1969/     91B : CB 48               		bit	1,b		; Intrument
(1) 1970/     91D : C4 56 0E            		call	nz,.inst
(1) 1971/     920 : CF                  		rst	8
(1) 1972/     921 : CB 50               		bit	2,b		; Volume
(1) 1973/     923 : C4 4D 0E            		call	nz,.volu
(1) 1974/     926 : CB 58               		bit	3,b		; Effect
(1) 1975/     928 : C4 4B 0D            		call	nz,.effc
(1) 1976/     92B : 78                  		ld	a,b
(1) 1977/     92C : E6 0F               		and	00001111b
(1) 1978/     92E : C8                  		ret	z
(1) 1979/     92F : CF                  		rst	8
(1) 1980/     930 :                     
(1) 1981/     930 :                     ; ----------------------------------------
(1) 1982/     930 :                     ; Process channel now
(1) 1983/     930 :                     ;
(1) 1984/     930 :                     ; b - Note bits
(1) 1985/     930 :                     ; ----------------------------------------
(1) 1986/     930 :                     
(1) 1987/     930 : 7E                  		ld	a,(hl)
(1) 1988/     931 : E6 70               		and	01110000b	; <--
(1) 1989/     933 : 0F                  		rrca
(1) 1990/     934 : 0F                  		rrca
(1) 1991/     935 : 0F                  		rrca
(1) 1992/     936 : 16 00               		ld	d,0
(1) 1993/     938 : 5F                  		ld	e,a
(1) 1994/     939 : 21 42 09            		ld	hl,.mk_list
(1) 1995/     93C : 19                  		add	hl,de
(1) 1996/     93D : 7E                  		ld	a,(hl)
(1) 1997/     93E : 23                  		inc	hl
(1) 1998/     93F : 66                  		ld	h,(hl)
(1) 1999/     940 : 6F                  		ld	l,a
(1) 2000/     941 : E9                  		jp	(hl)
(1) 2001/     942 :                     ; --------------------------------
(1) 2002/     942 :                     .mk_list:
(1) 2003/     942 : 6E 09               		dw .mk_psg
(1) 2004/     944 : 50 09               		dw .mk_psgn
(1) 2005/     946 : EC 09               		dw .mk_fm
(1) 2006/     948 : 61 0A               		dw .mk_fmspc
(1) 2007/     94A : BA 0B               		dw .mk_dac
(1) 2008/     94C : 19 0C               		dw .mk_pcm
(1) 2009/     94E : 9F 0C               		dw .mk_pwm
(1) 2010/     950 :                     
(1) 2011/     950 :                     ; --------------------------------
(1) 2012/     950 :                     
(1) 2013/     950 :                     .mk_psgn:
(1) 2014/     950 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 2015/     953 : DD E5               		push	ix
(1) 2016/     955 : DD 21 6D 17         		ld	ix,psgcom+3	; <-- steal PSG3
(1) 2017/     959 : CF                  		rst	8
(1) 2018/     95A : FE FE               		cp	-2
(1) 2019/     95C : 28 7A               		jr	z,.kycut_psgn
(1) 2020/     95E : FE FF               		cp	-1
(1) 2021/     960 : 28 69               		jr	z,.kyoff_psgn
(1) 2022/     962 : 5F                  		ld	e,a
(1) 2023/     963 : 3A 83 1F            		ld	a,(psgHatMode)	; Tone 3?
(1) 2024/     966 : E6 03               		and	011b
(1) 2025/     968 : FE 03               		cp	011b
(1) 2026/     96A : 20 42               		jr	nz,.psg_keyon	; Normal
(1) 2027/     96C : 18 19               		jr	.from_psgn	; Tone 3
(1) 2028/     96E :                     .mk_psg:
(1) 2029/     96E : CF                  		rst	8
(1) 2030/     96F : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 2031/     972 : DD E5               		push	ix
(1) 2032/     974 : DD 21 6A 17         		ld	ix,psgcom	; ix - psgcom
(1) 2033/     978 : FD 5E 05            		ld	e,(iy+05h)
(1) 2034/     97B : 16 00               		ld	d,0
(1) 2035/     97D : DD 19               		add	ix,de
(1) 2036/     97F : FE FE               		cp	-2
(1) 2037/     981 : 28 58               		jr	z,.kycut_psg
(1) 2038/     983 : FE FF               		cp	-1
(1) 2039/     985 : 28 47               		jr	z,.kyoff_psg
(1) 2040/     987 :                     .from_psgn:
(1) 2041/     987 : CF                  		rst	8
(1) 2042/     988 : 16 00               		ld	d,0		; de - note*2
(1) 2043/     98A : FD 5E 06            		ld	e,(iy+06h)	; Freq index
(1) 2044/     98D : 21 00 15            		ld	hl,psgFreq_List-(36*2)
(1) 2045/     990 : 19                  		add	hl,de
(1) 2046/     991 : 7E                  		ld	a,(hl)
(1) 2047/     992 : 23                  		inc	hl
(1) 2048/     993 : 66                  		ld	h,(hl)
(1) 2049/     994 : 6F                  		ld	l,a
(1) 2050/     995 : FD 7E 07            		ld	a,(iy+07h)	; pitchbend
(1) 2051/     998 : 07                  		rlca			; << 3
(1) 2052/     999 : 07                  		rlca
(1) 2053/     99A : CF                  		rst	8
(1) 2054/     99B : 07                  		rlca
(1) 2055/     99C : 57                  		ld	d,a
(1) 2056/     99D : E6 F8               		and	11111000b
(1) 2057/     99F : 5F                  		ld	e,a
(1) 2058/     9A0 : 7A                  		ld	a,d
(1) 2059/     9A1 : E6 07               		and	00000111b
(1) 2060/     9A3 : 57                  		ld	d,a
(1) 2061/     9A4 : 37                  		scf
(1) 2062/     9A5 : 3F                  		ccf
(1) 2063/     9A6 : ED 52               		sbc	hl,de
(1) 2064/     9A8 : DD 75 1C            		ld	(ix+DTL),l
(1) 2065/     9AB : DD 74 20            		ld	(ix+DTH),h
(1) 2066/     9AE :                     .psg_keyon:
(1) 2067/     9AE : FD 7E 08            		ld	a,(iy+08h)	; Set current Volume
(1) 2068/     9B1 : FD 96 03            		sub	a,(iy+03h)	; + MASTER vol
(1) 2069/     9B4 : ED 44               		neg	a
(1) 2070/     9B6 : CF                  		rst	8
(1) 2071/     9B7 : 87                  		add	a,a
(1) 2072/     9B8 : 87                  		add	a,a
(1) 2073/     9B9 : 30 02               		jr	nc,.vmuch
(1) 2074/     9BB : 3E FF               		ld	a,-1
(1) 2075/     9BD :                     .vmuch:
(1) 2076/     9BD : DD 77 30            		ld	(ix+PVOL),a
(1) 2077/     9C0 : CB 40               		bit	0,b		; Note change?
(1) 2078/     9C2 : 28 04               		jr	z,.psgnone
(1) 2079/     9C4 : DD 36 00 01         		ld	(ix+COM),001b	; Key ON
(1) 2080/     9C8 :                     .psgnone:
(1) 2081/     9C8 : DD E1               		pop	ix
(1) 2082/     9CA : C9                  		ret
(1) 2083/     9CB :                     ; -1
(1) 2084/     9CB :                     .kyoff_psgn:
(1) 2085/     9CB : CD E5 09            		call	.kypsgn_hatoff
(1) 2086/     9CE :                     .kyoff_psg:
(1) 2087/     9CE : 0E 02               		ld	c,010b
(1) 2088/     9D0 : DD 71 00            		ld	(ix),c
(1) 2089/     9D3 : DD E1               		pop	ix
(1) 2090/     9D5 : C3 7D 10            		jp	.chnl_ulnkoff
(1) 2091/     9D8 :                     ; -2
(1) 2092/     9D8 :                     .kycut_psgn:
(1) 2093/     9D8 : CD E5 09            		call	.kypsgn_hatoff
(1) 2094/     9DB :                     .kycut_psg:
(1) 2095/     9DB : 0E 04               		ld	c,100b
(1) 2096/     9DD : DD 71 00            		ld	(ix),c
(1) 2097/     9E0 : DD E1               		pop	ix
(1) 2098/     9E2 : C3 77 10            		jp	.chnl_ulnkcut
(1) 2099/     9E5 :                     
(1) 2100/     9E5 :                     .kypsgn_hatoff:
(1) 2101/     9E5 : 3E 00               		ld	a,000b
(1) 2102/     9E7 : 32 83 1F            		ld	(psgHatMode),a	; ** GLOBAL SETTING
(1) 2103/     9EA : CF                  		rst	8
(1) 2104/     9EB : C9                  		ret
(1) 2105/     9EC :                     
(1) 2106/     9EC :                     ; --------------------------------
(1) 2107/     9EC :                     
(1) 2108/     9EC :                     .mk_fm:
(1) 2109/     9EC : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 2110/     9EF : FE FE               		cp	-2
(1) 2111/     9F1 : CA C7 0A            		jp	z,.fm_cut
(1) 2112/     9F4 : FE FF               		cp	-1
(1) 2113/     9F6 : CA C1 0A            		jp	z,.fm_off
(1) 2114/     9F9 :                     ; 		call	.fm_tloff
(1) 2115/     9F9 : CF                  		rst	8
(1) 2116/     9FA : FD 4E 05            		ld	c,(iy+05h)	; c - KeyID
(1) 2117/     9FD : 78                  		ld	a,b		; Note bit?
(1) 2118/     9FE : E6 01               		and	0001b
(1) 2119/     A00 : C8                  		ret	z
(1) 2120/     A01 : 79                  		ld	a,c
(1) 2121/     A02 : FE 06               		cp	6
(1) 2122/     A04 : 20 05               		jr	nz,.not_dac
(1) 2123/     A06 : CD 16 14            		call	dac_off
(1) 2124/     A09 : 18 16               		jr	.not_dspc
(1) 2125/     A0B :                     .not_dac:
(1) 2126/     A0B : 79                  		ld	a,c
(1) 2127/     A0C : FE 02               		cp	2
(1) 2128/     A0E : 20 11               		jr	nz,.not_dspc
(1) 2129/     A10 : 3A 84 1F            		ld	a,(fmSpecial)
(1) 2130/     A13 : B7                  		or	a
(1) 2131/     A14 : 28 0B               		jr	z,.not_dspc
(1) 2132/     A16 : 11 00 27            		ld	de,2700h	; CH3 off
(1) 2133/     A19 : CD EB 13            		call	fm_send_1
(1) 2134/     A1C : 3E 00               		ld	a,0
(1) 2135/     A1E : 32 84 1F            		ld	(fmSpecial),a
(1) 2136/     A21 :                     .not_dspc:
(1) 2137/     A21 : CD D0 0A            		call	.fm_keyoff
(1) 2138/     A24 :                     
(1) 2139/     A24 : FD 7E 06            		ld	a,(iy+06h)
(1) 2140/     A27 : 47                  		ld	b,a
(1) 2141/     A28 : E6 1F               		and	00011111b
(1) 2142/     A2A : 5F                  		ld	e,a
(1) 2143/     A2B : 16 00               		ld	d,0
(1) 2144/     A2D : 21 30 15            		ld	hl,fmFreq_List
(1) 2145/     A30 : 19                  		add	hl,de
(1) 2146/     A31 : 7E                  		ld	a,(hl)
(1) 2147/     A32 : CF                  		rst	8
(1) 2148/     A33 : 23                  		inc	hl
(1) 2149/     A34 : 66                  		ld	h,(hl)
(1) 2150/     A35 : 6F                  		ld	l,a
(1) 2151/     A36 : 78                  		ld	a,b
(1) 2152/     A37 : E6 E0               		and	11100000b
(1) 2153/     A39 : 0F                  		rrca
(1) 2154/     A3A : 0F                  		rrca
(1) 2155/     A3B : B4                  		or	h
(1) 2156/     A3C : 67                  		ld	h,a
(1) 2157/     A3D : FD 5E 07            		ld	e,(iy+07h)	; pitchbend
(1) 2158/     A40 : CF                  		rst	8
(1) 2159/     A41 : AF                  		xor	a		; Clear high
(1) 2160/     A42 : 3F                  		ccf			; Clear carry
(1) 2161/     A43 : CB 23               		sla	e		; << 2
(1) 2162/     A45 : CB 23               		sla	e
(1) 2163/     A47 : 9F                  		sbc	a,a		; -1 if carry is set
(1) 2164/     A48 : 57                  		ld	d,a
(1) 2165/     A49 : 19                  		add	hl,de
(1) 2166/     A4A : CD EF 0A            		call	.fm_setfreq
(1) 2167/     A4D :                     .fmspc_set:
(1) 2168/     A4D : CD 84 0B            		call	.fm_wrtalpan	; Panning and effects
(1) 2169/     A50 : CD 06 0B            		call	.fm_wrtlvol	; FM volume control
(1) 2173/     A53 : FD 7E 0F            		ld	a,(iy+0Fh)	; 0Fh - keys ***
(1) 2174/     A56 : E6 F0               		and	11110000b
(1) 2175/     A58 : B1                  		or	c
(1) 2176/     A59 : 5F                  		ld	e,a
(1) 2177/     A5A : 16 28               		ld	d,28h
(1) 2178/     A5C : CD EB 13            		call	fm_send_1
(1) 2179/     A5F : CF                  		rst	8
(1) 2180/     A60 :                     .nofm_note:
(1) 2181/     A60 : C9                  		ret
(1) 2183/     A61 :                     
(1) 2184/     A61 :                     ; --------------------------------
(1) 2185/     A61 :                     
(1) 2186/     A61 :                     .mk_fmspc:
(1) 2187/     A61 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 2188/     A64 : FE FE               		cp	-2
(1) 2189/     A66 : CA C7 0A            		jp	z,.fm_cut
(1) 2190/     A69 : FE FF               		cp	-1
(1) 2191/     A6B : CA C1 0A            		jp	z,.fm_off
(1) 2192/     A6E :                     
(1) 2193/     A6E : 78                  		ld	a,b		; Note bit?
(1) 2194/     A6F : E6 01               		and	0001b
(1) 2195/     A71 : C8                  		ret	z
(1) 2196/     A72 :                     
(1) 2197/     A72 : FD 4E 05            		ld	c,(iy+05h)	; c - KeyID
(1) 2198/     A75 : 78                  		ld	a,b
(1) 2199/     A76 : E6 01               		and	0001b
(1) 2200/     A78 : 28 D3               		jr	z,.fmspc_set
(1) 2201/     A7A : CD D0 0A            		call	.fm_keyoff
(1) 2202/     A7D : 21 F2 15            		ld	hl,fmcach_list	; Manual freqs
(1) 2203/     A80 : FD 7E 05            		ld	a,(iy+05h)
(1) 2204/     A83 : E6 07               		and	0111b
(1) 2205/     A85 : 16 00               		ld	d,0
(1) 2206/     A87 : 87                  		add	a,a
(1) 2207/     A88 : 5F                  		ld	e,a
(1) 2208/     A89 : CF                  		rst	8
(1) 2209/     A8A : 19                  		add	hl,de
(1) 2210/     A8B : 7E                  		ld	a,(hl)
(1) 2211/     A8C : 23                  		inc	hl
(1) 2212/     A8D : 66                  		ld	h,(hl)
(1) 2213/     A8E : 6F                  		ld	l,a
(1) 2214/     A8F : CF                  		rst	8
(1) 2215/     A90 : 11 20 00            		ld	de,20h		; point to regs
(1) 2216/     A93 : 19                  		add	hl,de
(1) 2217/     A94 : DD E5               		push	ix
(1) 2218/     A96 : DD 21 B9 0A         		ld	ix,.spcreglist
(1) 2219/     A9A : 06 08               		ld	b,8
(1) 2220/     A9C :                     .wr_spc:
(1) 2221/     A9C : DD 56 00            		ld	d,(ix)
(1) 2222/     A9F : 5E                  		ld	e,(hl)
(1) 2223/     AA0 : CD EB 13            		call	fm_send_1
(1) 2224/     AA3 : CF                  		rst	8
(1) 2225/     AA4 : 23                  		inc	hl
(1) 2226/     AA5 : DD 23               		inc	ix
(1) 2227/     AA7 : 10 F3               		djnz	.wr_spc
(1) 2228/     AA9 : DD E1               		pop	ix
(1) 2229/     AAB : 11 40 27            		ld	de,2740h	; CH3 on
(1) 2230/     AAE : CD EB 13            		call	fm_send_1
(1) 2231/     AB1 : 3E 01               		ld	a,1
(1) 2232/     AB3 : 32 84 1F            		ld	(fmSpecial),a
(1) 2233/     AB6 : C3 4D 0A            		jp	.fmspc_set
(1) 2234/     AB9 :                     .spcreglist:
(1) 2235/     AB9 : AD A9               		db 0ADh,0A9h
(1) 2236/     ABB : AC A8               		db 0ACh,0A8h
(1) 2237/     ABD : AE AA               		db 0AEh,0AAh
(1) 2238/     ABF : A6 A2               		db 0A6h,0A2h
(1) 2239/     AC1 :                     
(1) 2240/     AC1 :                     ; --------------------------------
(1) 2241/     AC1 :                     
(1) 2242/     AC1 :                     .fm_off:
(1) 2243/     AC1 : CD D0 0A            		call	.fm_keyoff
(1) 2244/     AC4 : C3 7D 10            		jp	.chnl_ulnkoff
(1) 2245/     AC7 :                     .fm_cut:
(1) 2246/     AC7 : CD D0 0A            		call	.fm_keyoff
(1) 2247/     ACA : CD D8 0A            		call	.fm_tloff
(1) 2248/     ACD : C3 77 10            		jp	.chnl_ulnkcut
(1) 2249/     AD0 :                     
(1) 2250/     AD0 :                     ; ----------------------------------------
(1) 2251/     AD0 :                     
(1) 2252/     AD0 :                     .fm_keyoff:
(1) 2253/     AD0 : 16 28               		ld	d,28h
(1) 2254/     AD2 : FD 5E 05            		ld	e,(iy+05h)
(1) 2255/     AD5 : C3 EB 13            		jp	fm_send_1
(1) 2256/     AD8 :                     .fm_tloff:
(1) 2257/     AD8 : 06 04               		ld	b,4
(1) 2258/     ADA : FD 4E 05            		ld	c,(iy+05h)
(1) 2259/     ADD : 79                  		ld	a,c
(1) 2260/     ADE : E6 03               		and	011b
(1) 2261/     AE0 : F6 40               		or	40h	; TL regs
(1) 2262/     AE2 :                     .tl_down:
(1) 2263/     AE2 : 57                  		ld	d,a
(1) 2264/     AE3 : 1E 7F               		ld	e,7Fh
(1) 2265/     AE5 : CD E7 13            		call	fm_autoreg
(1) 2266/     AE8 : CF                  		rst	8
(1) 2267/     AE9 : 7A                  		ld	a,d
(1) 2268/     AEA : C6 04               		add	a,4
(1) 2269/     AEC : 10 F4               		djnz	.tl_down
(1) 2270/     AEE : C9                  		ret
(1) 2271/     AEF :                     ; c - KeyID
(1) 2272/     AEF :                     .fm_setfreq:
(1) 2273/     AEF : 79                  		ld	a,c
(1) 2274/     AF0 : E6 03               		and	011b
(1) 2275/     AF2 : F6 A4               		or	0A4h
(1) 2276/     AF4 : 57                  		ld	d,a
(1) 2277/     AF5 : 5C                  		ld	e,h
(1) 2278/     AF6 : CF                  		rst	8
(1) 2279/     AF7 : CD E7 13            		call	fm_autoreg
(1) 2280/     AFA : 79                  		ld	a,c
(1) 2281/     AFB : E6 03               		and	011b
(1) 2282/     AFD : F6 A0               		or	0A0h
(1) 2283/     AFF : 57                  		ld	d,a
(1) 2284/     B00 : 5D                  		ld	e,l
(1) 2285/     B01 : CD E7 13            		call	fm_autoreg
(1) 2286/     B04 : CF                  		rst	8
(1) 2287/     B05 : C9                  		ret
(1) 2288/     B06 :                     
(1) 2289/     B06 :                     ; --------------------------------
(1) 2290/     B06 :                     ; WRITE TL volume
(1) 2291/     B06 :                     
(1) 2292/     B06 :                     .fm_wrtlvol:
(1) 2293/     B06 : 21 F2 15            		ld	hl,fmcach_list
(1) 2294/     B09 : FD 7E 05            		ld	a,(iy+05h)
(1) 2295/     B0C : E6 07               		and	0111b
(1) 2296/     B0E : 16 00               		ld	d,0
(1) 2297/     B10 : CF                  		rst	8
(1) 2298/     B11 : 87                  		add	a,a
(1) 2299/     B12 : 5F                  		ld	e,a
(1) 2300/     B13 : 19                  		add	hl,de
(1) 2301/     B14 : 7E                  		ld	a,(hl)
(1) 2302/     B15 : 23                  		inc	hl
(1) 2303/     B16 : 66                  		ld	h,(hl)
(1) 2304/     B17 : 6F                  		ld	l,a
(1) 2305/     B18 : 23                  		inc	hl
(1) 2306/     B19 : 23                  		inc	hl
(1) 2307/     B1A : 23                  		inc	hl
(1) 2308/     B1B : CF                  		rst	8
(1) 2309/     B1C : 23                  		inc	hl		; Point to TL's
(1) 2310/     B1D : FD 7E 05            		ld	a,(iy+05h)
(1) 2311/     B20 : E6 03               		and	011b
(1) 2312/     B22 : F6 40               		or	40h		; TL registers
(1) 2313/     B24 : 57                  		ld	d,a
(1) 2314/     B25 :                     ; d - 40h+
(1) 2315/     B25 :                     ; hl - TL data
(1) 2316/     B25 :                     ; .fm_wrtlvol:
(1) 2317/     B25 : C5                  		push	bc
(1) 2318/     B26 : E5                  		push	hl
(1) 2319/     B27 : 21 7C 0B            		ld	hl,.fm_cindx
(1) 2320/     B2A : FD 7E 0C            		ld	a,(iy+0Ch)	; Read 0B0h copy
(1) 2321/     B2D : E6 07               		and	0111b
(1) 2322/     B2F : 06 00               		ld	b,0
(1) 2323/     B31 : 4F                  		ld	c,a
(1) 2324/     B32 : 09                  		add	hl,bc
(1) 2325/     B33 : FD 7E 08            		ld	a,(iy+08h)	; Read current Volume
(1) 2326/     B36 : FD 96 03            		sub	a,(iy+03h)	; + MASTER vol
(1) 2327/     B39 : 4F                  		ld	c,a
(1) 2328/     B3A : CF                  		rst	8
(1) 2329/     B3B : 46                  		ld	b,(hl)
(1) 2330/     B3C : E1                  		pop	hl
(1) 2331/     B3D : CB 08               		rrc	b		; OP1
(1) 2332/     B3F : DC 6A 0B            		call	c,.write_tl
(1) 2333/     B42 : 23                  		inc	hl
(1) 2334/     B43 : 14                  		inc	d
(1) 2335/     B44 : 14                  		inc	d
(1) 2336/     B45 : CF                  		rst	8
(1) 2337/     B46 : 14                  		inc	d
(1) 2338/     B47 : 14                  		inc	d
(1) 2339/     B48 : CB 08               		rrc	b		; OP2
(1) 2340/     B4A : DC 6A 0B            		call	c,.write_tl
(1) 2341/     B4D : 23                  		inc	hl
(1) 2342/     B4E : 14                  		inc	d
(1) 2343/     B4F : 14                  		inc	d
(1) 2344/     B50 : 14                  		inc	d
(1) 2345/     B51 : 14                  		inc	d
(1) 2346/     B52 : CB 08               		rrc	b		; OP3
(1) 2347/     B54 : DC 6A 0B            		call	c,.write_tl
(1) 2348/     B57 : 23                  		inc	hl
(1) 2349/     B58 : CF                  		rst	8
(1) 2350/     B59 : 14                  		inc	d
(1) 2351/     B5A : 14                  		inc	d
(1) 2352/     B5B : 14                  		inc	d
(1) 2353/     B5C : 14                  		inc	d
(1) 2354/     B5D : CB 08               		rrc	b		; OP4
(1) 2355/     B5F : DC 6A 0B            		call	c,.write_tl
(1) 2356/     B62 : 23                  		inc	hl
(1) 2357/     B63 : 14                  		inc	d
(1) 2358/     B64 : 14                  		inc	d
(1) 2359/     B65 : 14                  		inc	d
(1) 2360/     B66 : 14                  		inc	d
(1) 2361/     B67 : CF                  		rst	8
(1) 2362/     B68 : C1                  		pop	bc
(1) 2363/     B69 : C9                  		ret
(1) 2364/     B6A :                     .write_tl:
(1) 2365/     B6A : 7E                  		ld	a,(hl)
(1) 2366/     B6B : 91                  		sub	a,c
(1) 2367/     B6C : F2 71 0B            		jp	p,.keep_tlmx
(1) 2368/     B6F : 3E 7F               		ld	a,7Fh
(1) 2369/     B71 :                     .keep_tlmx:
(1) 2370/     B71 : C5                  		push	bc
(1) 2371/     B72 : 5F                  		ld	e,a
(1) 2372/     B73 : FD 4E 05            		ld	c,(iy+05h)
(1) 2373/     B76 : CD E7 13            		call	fm_autoreg
(1) 2374/     B79 : CF                  		rst	8
(1) 2375/     B7A : C1                  		pop	bc
(1) 2376/     B7B : C9                  		ret
(1) 2377/     B7C :                     ; Jump carry list
(1) 2378/     B7C :                     .fm_cindx:
(1) 2379/     B7C : 08                  		db 1000b
(1) 2380/     B7D : 08                  		db 1000b
(1) 2381/     B7E : 08                  		db 1000b
(1) 2382/     B7F : 08                  		db 1000b
(1) 2383/     B80 : 0C                  		db 1100b
(1) 2384/     B81 : 0E                  		db 1110b
(1) 2385/     B82 : 0E                  		db 1110b
(1) 2386/     B83 : 0F                  		db 1111b
(1) 2387/     B84 :                     ; c - KeyId
(1) 2388/     B84 :                     .fm_wrtalpan:
(1) 2389/     B84 : FD 7E 0C            		ld	a,(iy+0Ch)		; 0B0h algorithm
(1) 2390/     B87 : 5F                  		ld	e,a
(1) 2391/     B88 : 79                  		ld	a,c
(1) 2392/     B89 : E6 03               		and	011b
(1) 2393/     B8B : F6 B0               		or	0B0h
(1) 2394/     B8D : 57                  		ld	d,a
(1) 2395/     B8E : CD E7 13            		call	fm_autoreg
(1) 2396/     B91 : CF                  		rst	8
(1) 2397/     B92 : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Read panning bits
(1) 2398/     B95 : 2F                  		cpl				; REVERSE bits
(1) 2399/     B96 : E6 30               		and	00110000b
(1) 2400/     B98 : 07                  		rlca
(1) 2401/     B99 : 07                  		rlca
(1) 2402/     B9A : 5F                  		ld	e,a
(1) 2403/     B9B : FD 7E 0D            		ld	a,(iy+0Dh)		; 0B4h %LRaa0ppp
(1) 2404/     B9E : E6 3F               		and	00111111b
(1) 2405/     BA0 : B3                  		or	e
(1) 2406/     BA1 : 5F                  		ld	e,a
(1) 2407/     BA2 : 79                  		ld	a,c
(1) 2408/     BA3 : E6 03               		and	011b
(1) 2409/     BA5 : F6 B4               		or	0B4h
(1) 2410/     BA7 : 57                  		ld	d,a
(1) 2411/     BA8 : CD E7 13            		call	fm_autoreg
(1) 2412/     BAB : CF                  		rst	8
(1) 2413/     BAC : FD 7E 0E            		ld	a,(iy+0Eh)
(1) 2414/     BAF : CB 5F               		bit	3,a
(1) 2415/     BB1 : 28 06               		jr	z,.no_lfo
(1) 2416/     BB3 : 5F                  		ld	e,a
(1) 2417/     BB4 : 16 22               		ld	d,22h
(1) 2418/     BB6 : CD EB 13            		call	fm_send_1
(1) 2419/     BB9 :                     .no_lfo:
(1) 2420/     BB9 : C9                  		ret
(1) 2421/     BBA :                     
(1) 2422/     BBA :                     ; --------------------------------
(1) 2423/     BBA :                     
(1) 2424/     BBA :                     .mk_dac:
(1) 2425/     BBA : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 2426/     BBD : FE FE               		cp	-2
(1) 2427/     BBF : CA EA 0B            		jp	z,.dac_cut
(1) 2428/     BC2 : FE FF               		cp	-1
(1) 2429/     BC4 : CA F0 0B            		jp	z,.dac_off
(1) 2430/     BC7 : CD F3 0B            		call	.dac_pitch
(1) 2431/     BCA :                     
(1) 2432/     BCA : CB 40               		bit	0,b
(1) 2433/     BCC : 20 13               		jr	nz,.dac_note
(1) 2434/     BCE : CB 58               		bit	3,b
(1) 2435/     BD0 : C8                  		ret	z
(1) 2436/     BD1 :                     .dac_pan:
(1) 2437/     BD1 : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Read panning
(1) 2438/     BD4 : 2F                  		cpl				; REVERSE bits
(1) 2439/     BD5 : E6 30               		and	00110000b
(1) 2440/     BD7 : 07                  		rlca
(1) 2441/     BD8 : 07                  		rlca
(1) 2442/     BD9 : 5F                  		ld	e,a
(1) 2443/     BDA : 16 B6               		ld	d,0B6h			; Channel 6 panning
(1) 2444/     BDC : CD F6 13            		call	fm_send_2
(1) 2445/     BDF : CF                  		rst	8
(1) 2446/     BE0 : C9                  		ret
(1) 2447/     BE1 :                     .dac_note:
(1) 2448/     BE1 : CD 16 14            		call	dac_off
(1) 2449/     BE4 : CD D1 0B            		call	.dac_pan
(1) 2450/     BE7 : C3 2B 14            		jp	dac_play
(1) 2451/     BEA :                     .dac_cut:
(1) 2452/     BEA : CD 16 14            		call	dac_off
(1) 2453/     BED : C3 7D 10            		jp	.chnl_ulnkoff
(1) 2454/     BF0 :                     .dac_off:
(1) 2455/     BF0 : C3 77 10            		jp	.chnl_ulnkcut
(1) 2456/     BF3 :                     .dac_pitch:
(1) 2457/     BF3 : 16 00               		ld	d,0		; Freq index
(1) 2458/     BF5 : FD 5E 06            		ld	e,(iy+06h)
(1) 2459/     BF8 : 21 B8 15            		ld	hl,wavFreq_List-(36*2)
(1) 2460/     BFB : 19                  		add	hl,de
(1) 2461/     BFC : 7E                  		ld	a,(hl)
(1) 2462/     BFD : 23                  		inc	hl
(1) 2463/     BFE : 66                  		ld	h,(hl)
(1) 2464/     BFF : CF                  		rst	8
(1) 2465/     C00 : 6F                  		ld	l,a
(1) 2466/     C01 : FD 5E 07            		ld	e,(iy+07h)	; pitchbend
(1) 2467/     C04 : AF                  		xor	a		; Clear high
(1) 2468/     C05 : 3F                  		ccf			; Clear carry
(1) 2469/     C06 : CB 23               		sla	e		; << 3
(1) 2470/     C08 : CB 23               		sla	e
(1) 2471/     C0A : CB 23               		sla	e
(1) 2472/     C0C : 9F                  		sbc	a,a		; -1 if carry is set
(1) 2473/     C0D : 57                  		ld	d,a
(1) 2474/     C0E : 19                  		add	hl,de
(1) 2475/     C0F : 22 92 1F            		ld	(wave_Pitch),hl
(1) 2476/     C12 : D9                  		exx			; *
(1) 2477/     C13 : ED 5B 92 1F         		ld	de,(wave_Pitch)	; *
(1) 2478/     C17 : D9                  		exx			; *
(1) 2479/     C18 : C9                  		ret
(1) 2480/     C19 :                     
(1) 2481/     C19 :                     ; --------------------------------
(1) 2482/     C19 :                     ; PCM
(1) 2483/     C19 :                     .mk_pcm:
(1) 2484/     C19 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 2485/     C1C : 16 00               		ld	d,0
(1) 2486/     C1E : FD 5E 05            		ld	e,(iy+05h)
(1) 2487/     C21 : DD 4E 00            		ld	c,(ix+chnl_Flags)
(1) 2488/     C24 : DD E5               		push	ix
(1) 2489/     C26 : DD 21 F2 16         		ld	ix,pcmcom
(1) 2490/     C2A : DD 19               		add	ix,de
(1) 2491/     C2C : FE FE               		cp	-2
(1) 2492/     C2E : CA 49 0C            		jp	z,.pcm_cut
(1) 2493/     C31 : FE FF               		cp	-1
(1) 2494/     C33 : CA 42 0C            		jp	z,.pcm_off
(1) 2495/     C36 : CF                  		rst	8
(1) 2496/     C37 : CB 40               		bit	0,b			; Note?
(1) 2497/     C39 : 20 24               		jr	nz,.pcm_note
(1) 2498/     C3B : CB 58               		bit	3,b			; Effect?
(1) 2499/     C3D : 20 19               		jr	nz,.pcm_effc
(1) 2500/     C3F : DD E1               		pop	ix
(1) 2501/     C41 : C9                  		ret
(1) 2502/     C42 :                     
(1) 2503/     C42 :                     ; --------------------------------
(1) 2504/     C42 :                     ; -1
(1) 2505/     C42 :                     .pcm_off:
(1) 2506/     C42 : CF                  		rst	8
(1) 2507/     C43 : DD 36 00 02         		ld	(ix),010b
(1) 2508/     C47 : 18 05               		jr	.pcm_setcoff
(1) 2509/     C49 :                     ; -2
(1) 2510/     C49 :                     .pcm_cut:
(1) 2511/     C49 : CF                  		rst	8
(1) 2512/     C4A : DD 36 00 04         		ld	(ix),100b
(1) 2513/     C4E :                     .pcm_setcoff:
(1) 2514/     C4E : 3E 01               		ld	a,1
(1) 2515/     C50 : 32 88 1F            		ld	(mcdUpd),a
(1) 2516/     C53 : DD E1               		pop	ix
(1) 2517/     C55 : C3 7D 10            		jp	.chnl_ulnkoff
(1) 2518/     C58 :                     
(1) 2519/     C58 :                     ; --------------------------------
(1) 2520/     C58 :                     
(1) 2521/     C58 :                     .pcm_effc:
(1) 2522/     C58 : CD 2B 0D            		call	.setpcm_freq
(1) 2523/     C5B : 0E 09               		ld	c,00001001b
(1) 2524/     C5D : 18 0F               		jr	.pcm_send
(1) 2525/     C5F :                     .pcm_note:
(1) 2526/     C5F : 79                  		ld	a,c		; <-- Lazy panning reset
(1) 2527/     C60 : E6 30               		and	00110000b	; Read LR bits
(1) 2528/     C62 : B7                  		or	a
(1) 2529/     C63 : 20 04               		jr	nz,.mp_reset
(1) 2530/     C65 : FD 36 0A 00         		ld	(iy+0Ah),0	; If 0, reset value on table
(1) 2531/     C69 :                     .mp_reset:
(1) 2532/     C69 : CD 2B 0D            		call	.setpcm_freq
(1) 2533/     C6C : 0E 01               		ld	c,00000001b	; KeyON request
(1) 2534/     C6E :                     .pcm_send:
(1) 2535/     C6E : DD 71 00            		ld	(ix),c		; Write key-on bit
(1) 2536/     C71 : 11 08 00            		ld	de,8		; Go to Pitch
(1) 2537/     C74 : DD 19               		add	ix,de
(1) 2538/     C76 : DD 74 00            		ld	(ix),h		; Set pitch
(1) 2539/     C79 : DD 19               		add	ix,de
(1) 2540/     C7B : DD 75 00            		ld	(ix),l
(1) 2541/     C7E : DD 19               		add	ix,de
(1) 2542/     C80 :                     
(1) 2543/     C80 : 0E FF               		ld	c,-1
(1) 2544/     C82 : FD 7E 08            		ld	a,(iy+08h)	; Read current Volume
(1) 2545/     C85 : FD 96 03            		sub	a,(iy+03h)	; + MASTER vol
(1) 2546/     C88 : 87                  		add	a,a
(1) 2547/     C89 : 87                  		add	a,a
(1) 2548/     C8A : 81                  		add	a,c
(1) 2549/     C8B :                     ; 		ld	c,a
(1) 2550/     C8B :                     
(1) 2551/     C8B :                     ; 		ld	a,-1
(1) 2552/     C8B :                     ; 		add	a,c
(1) 2553/     C8B :                     ; 		jp	nc,.v_ovset
(1) 2554/     C8B :                     ; 		xor	a
(1) 2555/     C8B :                     ; .v_ovset:
(1) 2556/     C8B : DD 77 00            		ld	(ix),a
(1) 2557/     C8E : DD 19               		add	ix,de
(1) 2558/     C90 : FD 7E 0A            		ld	a,(iy+0Ah)
(1) 2559/     C93 : 2F                  		cpl
(1) 2560/     C94 : DD 77 00            		ld	(ix),a
(1) 2562/     C97 : 3E 01               		ld	a,1
(1) 2563/     C99 : 32 88 1F            		ld	(mcdUpd),a
(1) 2565/     C9C : DD E1               		pop	ix
(1) 2566/     C9E : C9                  		ret
(1) 2567/     C9F :                     
(1) 2568/     C9F :                     ; --------------------------------
(1) 2569/     C9F :                     ; PWM
(1) 2570/     C9F :                     
(1) 2571/     C9F :                     .mk_pwm:
(1) 2572/     C9F : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 2573/     CA2 : 16 00               		ld	d,0
(1) 2574/     CA4 : FD 5E 05            		ld	e,(iy+05h)
(1) 2575/     CA7 : DD 4E 00            		ld	c,(ix+chnl_Flags)	; c - Panning bits
(1) 2576/     CAA : DD E5               		push	ix
(1) 2577/     CAC : DD 21 32 17         		ld	ix,pwmcom
(1) 2578/     CB0 : DD 19               		add	ix,de
(1) 2579/     CB2 : FE FE               		cp	-2
(1) 2580/     CB4 : CA D0 0C            		jp	z,.pwm_cut
(1) 2581/     CB7 : FE FF               		cp	-1
(1) 2582/     CB9 : CA C9 0C            		jp	z,.pwm_off
(1) 2583/     CBC : CF                  		rst	8
(1) 2584/     CBD : 78                  		ld	a,b
(1) 2585/     CBE : CB 40               		bit	0,b			; Note?
(1) 2586/     CC0 : 20 40               		jr	nz,.pw_note
(1) 2587/     CC2 : CB 58               		bit	3,b			; Effect?
(1) 2588/     CC4 : 20 35               		jr	nz,.pw_effc
(1) 2589/     CC6 : DD E1               		pop	ix
(1) 2590/     CC8 : C9                  		ret
(1) 2591/     CC9 :                     
(1) 2592/     CC9 :                     ; --------------------------------
(1) 2593/     CC9 :                     ; -1
(1) 2594/     CC9 :                     .pwm_off:
(1) 2595/     CC9 : CF                  		rst	8
(1) 2596/     CCA : DD 36 00 02         		ld	(ix),010b
(1) 2597/     CCE : 18 05               		jr	.pwm_setcoff
(1) 2598/     CD0 :                     ; -2
(1) 2599/     CD0 :                     .pwm_cut:
(1) 2600/     CD0 : CF                  		rst	8
(1) 2601/     CD1 : DD 36 00 04         		ld	(ix),100b
(1) 2602/     CD5 :                     .pwm_setcoff:
(1) 2603/     CD5 : 3E 01               		ld	a,1
(1) 2604/     CD7 : 32 87 1F            		ld	(marsUpd),a
(1) 2605/     CDA : DD E1               		pop	ix
(1) 2606/     CDC : C3 7D 10            		jp	.chnl_ulnkoff
(1) 2607/     CDF :                     
(1) 2608/     CDF :                     ; --------------------------------
(1) 2609/     CDF :                     
(1) 2610/     CDF :                     .pw_setup:
(1) 2611/     CDF : CD 30 0D            		call	.setpwm_freq
(1) 2612/     CE2 : 79                  		ld	a,c		; Read panning bits
(1) 2613/     CE3 :                     ; 		rrca
(1) 2614/     CE3 :                     ; 		rrca
(1) 2615/     CE3 : 2F                  		cpl
(1) 2616/     CE4 : E6 30               		and	00110000b
(1) 2617/     CE6 : CF                  		rst	8
(1) 2618/     CE7 : 5F                  		ld	e,a		; e - set panning bits
(1) 2619/     CE8 : AF                  		xor	a
(1) 2620/     CE9 : FD 7E 08            		ld	a,(iy+08h)	; Read current volume
(1) 2621/     CEC : FD 96 03            		sub	a,(iy+03h)	; + MASTER vol
(1) 2622/     CEF : ED 44               		neg	a
(1) 2623/     CF1 : 87                  		add	a,a
(1) 2624/     CF2 : 87                  		add	a,a
(1) 2625/     CF3 : 30 02               		jr	nc,.pwv_much
(1) 2626/     CF5 : 3E FF               		ld	a,-1
(1) 2627/     CF7 :                     .pwv_much:
(1) 2628/     CF7 : E6 FC               		and	11111100b
(1) 2629/     CF9 : B4                  		or	h		; Merge MSB freq
(1) 2630/     CFA : C9                  		ret
(1) 2631/     CFB :                     
(1) 2632/     CFB :                     ; --------------------------------
(1) 2633/     CFB :                     
(1) 2634/     CFB :                     .pw_effc:
(1) 2635/     CFB : CD DF 0C            		call	.pw_setup
(1) 2636/     CFE : 0E 09               		ld	c,00001001b
(1) 2637/     D00 : 18 05               		jr	.pw_send
(1) 2638/     D02 :                     .pw_note:
(1) 2639/     D02 : CD DF 0C            		call	.pw_setup
(1) 2640/     D05 : 0E 01               		ld	c,00000001b	; KeyON request
(1) 2641/     D07 :                     .pw_send:
(1) 2642/     D07 : DD 71 00            		ld	(ix),c		; Set command
(1) 2643/     D0A : 01 08 00            		ld	bc,8
(1) 2644/     D0D : DD 09               		add	ix,bc
(1) 2645/     D0F : DD 77 00            		ld	(ix),a
(1) 2646/     D12 : DD 09               		add	ix,bc
(1) 2647/     D14 : DD 75 00            		ld	(ix),l
(1) 2648/     D17 : DD 09               		add	ix,bc
(1) 2649/     D19 : CF                  		rst	8
(1) 2650/     D1A : DD 7E 00            		ld	a,(ix)
(1) 2651/     D1D : E6 CF               		and	11001111b
(1) 2652/     D1F : B3                  		or	e		; Set panning bits
(1) 2653/     D20 : DD 77 00            		ld	(ix),a
(1) 2655/     D23 : 3E 01               		ld	a,1
(1) 2656/     D25 : 32 87 1F            		ld	(marsUpd),a
(1) 2658/     D28 : DD E1               		pop	ix
(1) 2659/     D2A : C9                  		ret
(1) 2660/     D2B :                     
(1) 2661/     D2B :                     ; --------------------------------
(1) 2662/     D2B :                     ; SHARED routine
(1) 2663/     D2B :                     
(1) 2664/     D2B :                     .setpcm_freq:
(1) 2665/     D2B : 21 30 16            		ld	hl,wavFreq_CdPcm-(36*2)
(1) 2666/     D2E : 18 03               		jr	.set_wavfreq
(1) 2667/     D30 :                     .setpwm_freq:
(1) 2668/     D30 : 21 B8 15            		ld	hl,wavFreq_List-(36*2)
(1) 2669/     D33 :                     
(1) 2670/     D33 :                     .set_wavfreq:
(1) 2671/     D33 : 16 00               		ld	d,0		; Freq index
(1) 2672/     D35 : FD 5E 06            		ld	e,(iy+06h)
(1) 2673/     D38 : 19                  		add	hl,de
(1) 2674/     D39 : 7E                  		ld	a,(hl)
(1) 2675/     D3A : 23                  		inc	hl
(1) 2676/     D3B : 66                  		ld	h,(hl)
(1) 2677/     D3C : 6F                  		ld	l,a
(1) 2678/     D3D : FD 5E 07            		ld	e,(iy+07h)	; pitchbend
(1) 2679/     D40 : CF                  		rst	8
(1) 2680/     D41 : AF                  		xor	a		; Clear high
(1) 2681/     D42 : 3F                  		ccf			; Clear carry
(1) 2682/     D43 : CB 23               		sla	e		; << 2
(1) 2683/     D45 : CB 23               		sla	e
(1) 2684/     D47 : 9F                  		sbc	a,a		; -1 if carry is set
(1) 2685/     D48 : 57                  		ld	d,a
(1) 2686/     D49 : 19                  		add	hl,de
(1) 2687/     D4A : C9                  		ret
(1) 2688/     D4B :                     
(1) 2689/     D4B :                     ; ----------------------------------------
(1) 2690/     D4B :                     ; NEW effect
(1) 2691/     D4B :                     ; ----------------------------------------
(1) 2692/     D4B :                     
(1) 2693/     D4B :                     .effc:
(1) 2694/     D4B : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - effect data
(1) 2695/     D4E : DD 7E 05            		ld	a,(ix+chnl_EffId)	; d - effect id
(1) 2696/     D51 : 57                  		ld	d,a
(1) 2697/     D52 : CF                  		rst	8
(1) 2698/     D53 : FE 04               		cp	4			; Effect D?
(1) 2699/     D55 : 28 0F               		jr	z,.effc_D
(1) 2700/     D57 : FE 05               		cp	5			; Effect E?
(1) 2701/     D59 : 28 4E               		jr	z,.effc_E
(1) 2702/     D5B : FE 06               		cp	6			; Effect F?
(1) 2703/     D5D : 28 5F               		jr	z,.effc_F
(1) 2704/     D5F : CF                  		rst	8
(1) 2705/     D60 : FE 18               		cp	24			; Effect X?
(1) 2706/     D62 : CA DF 0D            		jp	z,.effc_X
(1) 2707/     D65 : C9                  		ret
(1) 2708/     D66 :                     
(1) 2709/     D66 :                     ; ----------------------------------------
(1) 2710/     D66 :                     ; Effect D
(1) 2711/     D66 :                     ;
(1) 2712/     D66 :                     ; Volume slide down
(1) 2713/     D66 :                     ;
(1) 2714/     D66 :                     ; 0xh-Exh - Normal
(1) 2715/     D66 :                     ; Fxh-Fxh - Fine slide / 2
(1) 2716/     D66 :                     ; ----------------------------------------
(1) 2717/     D66 :                     
(1) 2718/     D66 :                     .effc_D:
(1) 2719/     D66 : CD D3 0D            		call	.save_arg
(1) 2720/     D69 : 79                  		ld	a,c		; Setting == 0?
(1) 2721/     D6A : B7                  		or	a
(1) 2722/     D6B : C8                  		ret	z
(1) 2723/     D6C : E6 F0               		and	0F0h
(1) 2724/     D6E : 28 0F               		jr	z,.norm_down	; 0xh
(1) 2725/     D70 : FE F0               		cp	0F0h
(1) 2726/     D72 : 28 0D               		jr	z,.fine_down	; Fxh
(1) 2727/     D74 : CF                  		rst	8
(1) 2728/     D75 : 79                  		ld	a,c
(1) 2729/     D76 : E6 0F               		and	00Fh
(1) 2730/     D78 : 28 1D               		jr	z,.norm_up	; x0h
(1) 2731/     D7A : FE 0F               		cp	00Fh
(1) 2732/     D7C : 28 17               		jr	z,.fine_up	; xFh
(1) 2733/     D7E : C9                  		ret
(1) 2734/     D7F :                     ; Go down
(1) 2735/     D7F :                     .norm_down:
(1) 2736/     D7F : CB 21               		sla	c
(1) 2737/     D81 :                     .fine_down:
(1) 2738/     D81 : CB 21               		sla	c
(1) 2739/     D83 : 79                  		ld	a,c
(1) 2740/     D84 : E6 3C               		and	00111100b
(1) 2741/     D86 : 4F                  		ld	c,a
(1) 2742/     D87 : FD 7E 08            		ld	a,(iy+08h)	; Current volume
(1) 2743/     D8A : CF                  		rst	8
(1) 2744/     D8B : 91                  		sub	a,c
(1) 2745/     D8C : 1E C0               		ld	e,0C0h
(1) 2746/     D8E : BB                  		cp	e
(1) 2747/     D8F : D2 A5 0D            		jp	nc,.vol_dvld
(1) 2748/     D92 : 7B                  		ld	a,e
(1) 2749/     D93 : 18 10               		jr 	.vol_dvld
(1) 2750/     D95 :                     ; Go up
(1) 2751/     D95 :                     .fine_up:
(1) 2752/     D95 : CB 39               		srl	c
(1) 2753/     D97 :                     .norm_up:
(1) 2754/     D97 : CB 39               		srl	c
(1) 2755/     D99 : 79                  		ld	a,c
(1) 2756/     D9A : E6 3C               		and	00111100b
(1) 2757/     D9C : 4F                  		ld	c,a
(1) 2758/     D9D : FD 7E 08            		ld	a,(iy+08h)	; Current volume
(1) 2759/     DA0 : CF                  		rst	8
(1) 2760/     DA1 : 81                  		add	a,c
(1) 2761/     DA2 : 38 01               		jr	c,.vol_dvld
(1) 2762/     DA4 : AF                  		xor	a
(1) 2763/     DA5 :                     .vol_dvld:
(1) 2764/     DA5 : FD 77 08            		ld	(iy+08h),a
(1) 2765/     DA8 : C9                  		ret
(1) 2766/     DA9 :                     
(1) 2767/     DA9 :                     ; ----------------------------------------
(1) 2768/     DA9 :                     ; Effect E
(1) 2769/     DA9 :                     ; ----------------------------------------
(1) 2770/     DA9 :                     
(1) 2771/     DA9 :                     .effc_E:
(1) 2772/     DA9 : CD D3 0D            		call	.save_arg
(1) 2773/     DAC : 79                  		ld	a,c
(1) 2774/     DAD : E6 F0               		and	0F0h
(1) 2775/     DAF : FE F0               		cp	0F0h
(1) 2776/     DB1 : C8                  		ret	z
(1) 2777/     DB2 : FE E0               		cp	0E0h
(1) 2778/     DB4 : C8                  		ret	z
(1) 2779/     DB5 : CF                  		rst	8
(1) 2780/     DB6 : FD 7E 07            		ld	a,(iy+07h)
(1) 2781/     DB9 : 91                  		sub	a,c
(1) 2782/     DBA : FD 77 07            		ld	(iy+07h),a
(1) 2783/     DBD : C9                  		ret
(1) 2784/     DBE :                     
(1) 2785/     DBE :                     ; ----------------------------------------
(1) 2786/     DBE :                     ; Effect F
(1) 2787/     DBE :                     ; ----------------------------------------
(1) 2788/     DBE :                     
(1) 2789/     DBE :                     .effc_F:
(1) 2790/     DBE : CD D3 0D            		call	.save_arg
(1) 2791/     DC1 : 79                  		ld	a,c
(1) 2792/     DC2 : E6 F0               		and	0F0h
(1) 2793/     DC4 : FE F0               		cp	0F0h
(1) 2794/     DC6 : C8                  		ret	z
(1) 2795/     DC7 : FE E0               		cp	0E0h
(1) 2796/     DC9 : C8                  		ret	z
(1) 2797/     DCA : CF                  		rst	8
(1) 2798/     DCB : FD 7E 07            		ld	a,(iy+07h)
(1) 2799/     DCE : 81                  		add	a,c
(1) 2800/     DCF : FD 77 07            		ld	(iy+07h),a
(1) 2801/     DD2 : C9                  		ret
(1) 2802/     DD3 :                     
(1) 2803/     DD3 :                     ; --------------------------------
(1) 2804/     DD3 :                     ; e - got arg
(1) 2805/     DD3 :                     ; c - new arg
(1) 2806/     DD3 :                     .save_arg:
(1) 2807/     DD3 : FD 4E 09            		ld	c,(iy+09h)	; Current slide setting
(1) 2808/     DD6 : 7B                  		ld	a,e		; EffArg is non-zero?
(1) 2809/     DD7 : B7                  		or	a
(1) 2810/     DD8 : 28 04               		jr	z,.D_cont	; 00h = slide continue
(1) 2811/     DDA : 4F                  		ld	c,a
(1) 2812/     DDB : FD 71 09            		ld	(iy+09h),c	; Store NEW slide setting
(1) 2813/     DDE :                     .D_cont:
(1) 2814/     DDE : C9                  		ret
(1) 2815/     DDF :                     
(1) 2816/     DDF :                     ; ----------------------------------------
(1) 2817/     DDF :                     ; Effect X
(1) 2818/     DDF :                     ;
(1) 2819/     DDF :                     ; Panning format:
(1) 2820/     DDF :                     ;  00h LEFT
(1) 2821/     DDF :                     ;  80h MIDDLE
(1) 2822/     DDF :                     ; 0FFh RIGHT
(1) 2823/     DDF :                     ; ----------------------------------------
(1) 2824/     DDF :                     
(1) 2825/     DDF :                     .effc_X:
(1) 2826/     DDF : 16 00               		ld	d,0
(1) 2827/     DE1 : 7E                  		ld	a,(hl)
(1) 2828/     DE2 : E6 F0               		and	11110000b
(1) 2829/     DE4 : FE 80               		cp	80h		; PSG?
(1) 2830/     DE6 : 28 1D               		jr	z,.res_pan
(1) 2831/     DE8 : FE 90               		cp	90h		; PSGN?
(1) 2832/     DEA : 28 19               		jr	z,.res_pan
(1) 2833/     DEC : FE D0               		cp	0D0h		; MCD: write separate PAN values
(1) 2834/     DEE : CC 0F 0E            		call	z,.pan_mcd	; <-- CALL, not JP
(1) 2835/     DF1 :                     
(1) 2836/     DF1 :                     	; ----------------------------------------
(1) 2837/     DF1 :                     	; Common panning bits: %00LR0000
(1) 2838/     DF1 :                     	; (REVERSE: 0-on 1-off)
(1) 2839/     DF1 : FD 36 09 00         		ld	(iy+09h),0
(1) 2840/     DF5 : CF                  		rst	8
(1) 2841/     DF6 : E5                  		push	hl
(1) 2842/     DF7 : 21 25 0E            		ld	hl,.comn_panlist
(1) 2843/     DFA : 7B                  		ld	a,e
(1) 2844/     DFB : 07                  		rlca
(1) 2845/     DFC : 07                  		rlca
(1) 2846/     DFD : 07                  		rlca
(1) 2847/     DFE : E6 07               		and	0111b
(1) 2848/     E00 :                     ; 		ld	d,0
(1) 2849/     E00 : 5F                  		ld	e,a
(1) 2850/     E01 : CF                  		rst	8
(1) 2851/     E02 : 19                  		add	hl,de
(1) 2852/     E03 : 56                  		ld	d,(hl)
(1) 2853/     E04 : E1                  		pop	hl
(1) 2854/     E05 :                     .res_pan:
(1) 2855/     E05 : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Save panning
(1) 2856/     E08 : E6 CF               		and	11001111b
(1) 2857/     E0A : B2                  		or	d
(1) 2858/     E0B : DD 77 00            		ld	(ix+chnl_Flags),a
(1) 2859/     E0E : C9                  		ret
(1) 2860/     E0F :                     
(1) 2861/     E0F :                     	; ----------------------------------------
(1) 2862/     E0F :                     	; MCD panning
(1) 2863/     E0F :                     .pan_mcd:
(1) 2864/     E0F : E5                  		push	hl
(1) 2865/     E10 : D5                  		push	de
(1) 2866/     E11 : 16 00               		ld	d,0
(1) 2867/     E13 : 21 2D 0E            		ld	hl,.pcm_panlist
(1) 2868/     E16 : 7B                  		ld	a,e
(1) 2869/     E17 : E6 F8               		and	0F8h
(1) 2870/     E19 : 0F                  		rrca
(1) 2871/     E1A : 0F                  		rrca
(1) 2872/     E1B : 0F                  		rrca
(1) 2873/     E1C : 5F                  		ld	e,a
(1) 2874/     E1D : 19                  		add	hl,de
(1) 2875/     E1E : 7E                  		ld	a,(hl)
(1) 2876/     E1F : FD 77 0A            		ld	(iy+0Ah),a
(1) 2877/     E22 : D1                  		pop	de
(1) 2878/     E23 : E1                  		pop	hl
(1) 2879/     E24 : C9                  		ret
(1) 2880/     E25 :                     
(1) 2881/     E25 :                     ; 0 - ENABLE, 1 - DISABLE
(1) 2882/     E25 :                     ; 00LR0000b
(1) 2883/     E25 :                     .comn_panlist:
(1) 2884/     E25 : 10                  		db 00010000b
(1) 2885/     E26 : 10                  		db 00010000b
(1) 2886/     E27 : 10                  		db 00010000b
(1) 2887/     E28 : 00                  		db 00000000b
(1) 2888/     E29 : 00                  		db 00000000b
(1) 2889/     E2A : 20                  		db 00100000b
(1) 2890/     E2B : 20                  		db 00100000b
(1) 2891/     E2C : 20                  		db 00100000b
(1) 2892/     E2D :                     
(1) 2893/     E2D :                     ; REVERSE OUTPUT BITS
(1) 2894/     E2D :                     ; RRRR | LLLL
(1) 2895/     E2D :                     .pcm_panlist:
(1) 2896/     E2D : F0                  		db 0F0h	; 00h
(1) 2897/     E2E : E0                  		db 0E0h
(1) 2898/     E2F : D0                  		db 0D0h	; 10h
(1) 2899/     E30 : C0                  		db 0C0h
(1) 2900/     E31 : B0                  		db 0B0h	; 20h
(1) 2901/     E32 : A0                  		db 0A0h
(1) 2902/     E33 : 90                  		db 090h	; 30h
(1) 2903/     E34 : 80                  		db 080h
(1) 2904/     E35 : 70                  		db 070h	; 40h
(1) 2905/     E36 : 60                  		db 060h
(1) 2906/     E37 : 50                  		db 050h	; 50h
(1) 2907/     E38 : 40                  		db 040h
(1) 2908/     E39 : 30                  		db 030h	; 60h
(1) 2909/     E3A : 20                  		db 020h
(1) 2910/     E3B : 10                  		db 010h	; 70h
(1) 2911/     E3C : 00                  		db 000h
(1) 2912/     E3D : 00                  		db 000h ; 80h
(1) 2913/     E3E : 01                  		db 001h
(1) 2914/     E3F : 02                  		db 002h ; 90h
(1) 2915/     E40 : 03                  		db 003h
(1) 2916/     E41 : 04                  		db 004h ; A0h
(1) 2917/     E42 : 05                  		db 005h
(1) 2918/     E43 : 06                  		db 006h ; B0h
(1) 2919/     E44 : 07                  		db 007h
(1) 2920/     E45 : 08                  		db 008h ; C0h
(1) 2921/     E46 : 09                  		db 009h
(1) 2922/     E47 : 0A                  		db 00Ah ; D0h
(1) 2923/     E48 : 0B                  		db 00Bh
(1) 2924/     E49 : 0C                  		db 00Ch ; E0h
(1) 2925/     E4A : 0D                  		db 00Dh
(1) 2926/     E4B : 0E                  		db 00Eh ; F0h
(1) 2927/     E4C : 0F                  		db 00Fh
(1) 2928/     E4D :                     
(1) 2929/     E4D :                     ; ----------------------------------------
(1) 2930/     E4D :                     ; NEW volume
(1) 2931/     E4D :                     ; ----------------------------------------
(1) 2932/     E4D :                     
(1) 2933/     E4D :                     .volu:
(1) 2934/     E4D : DD 7E 04            		ld	a,(ix+chnl_Vol)
(1) 2935/     E50 : D6 40               		sub	a,64
(1) 2936/     E52 : FD 77 08            		ld	(iy+08h),a	; BASE volume
(1) 2937/     E55 : C9                  		ret
(1) 2938/     E56 :                     
(1) 2939/     E56 :                     ; ----------------------------------------
(1) 2940/     E56 :                     ; NEW instrument
(1) 2941/     E56 :                     ; ----------------------------------------
(1) 2942/     E56 :                     
(1) 2943/     E56 :                     .inst:
(1) 2944/     E56 : 7E                  		ld	a,(hl)
(1) 2945/     E57 : E6 F0               		and	11110000b
(1) 2946/     E59 : FE 80               		cp	080h
(1) 2947/     E5B : 28 24               		jr	z,.ins_psg
(1) 2948/     E5D : FE 90               		cp	090h
(1) 2949/     E5F : 28 1A               		jr	z,.ins_psgn
(1) 2950/     E61 : FE A0               		cp	0A0h
(1) 2951/     E63 : 28 52               		jr	z,.ins_fm
(1) 2952/     E65 : CF                  		rst	8
(1) 2953/     E66 : FE B0               		cp	0B0h
(1) 2954/     E68 : 28 4D               		jr	z,.ins_fm
(1) 2955/     E6A : FE C0               		cp	0C0h
(1) 2956/     E6C : CA 38 0F            		jp	z,.ins_dac
(1) 2957/     E6F : FE D0               		cp	0D0h
(1) 2958/     E71 : CA 8C 0F            		jp	z,.ins_pcm
(1) 2959/     E74 : FE E0               		cp	0E0h
(1) 2960/     E76 : CA C4 0F            		jp	z,.ins_pwm
(1) 2961/     E79 : CF                  		rst	8
(1) 2962/     E7A :                     .invl_ins:
(1) 2963/     E7A : C9                  		ret
(1) 2964/     E7B :                     
(1) 2965/     E7B :                     ; ----------------------------------------
(1) 2966/     E7B :                     ; PSG
(1) 2967/     E7B :                     
(1) 2968/     E7B :                     .ins_psgn:
(1) 2969/     E7B : 7E                  		ld	a,(hl)		; Grab noise setting
(1) 2970/     E7C : E6 07               		and	0111b
(1) 2971/     E7E : 32 83 1F            		ld	(psgHatMode),a	; ** GLOBAL SETTING
(1) 2972/     E81 :                     .ins_psg:
(1) 2973/     E81 : CF                  		rst	8
(1) 2974/     E82 : DD E5               		push	ix
(1) 2975/     E84 : E5                  		push	hl
(1) 2976/     E85 : 23                  		inc	hl		; Skip ID
(1) 2977/     E86 : DD 21 6A 17         		ld	ix,psgcom	; Read psg control
(1) 2978/     E8A : FD 5E 05            		ld	e,(iy+05h)
(1) 2979/     E8D : 16 00               		ld	d,0
(1) 2980/     E8F : DD 19               		add	ix,de
(1) 2981/     E91 : 7E                  		ld	a,(hl)
(1) 2982/     E92 : CF                  		rst	8
(1) 2983/     E93 : 23                  		inc	hl
(1) 2984/     E94 : 7E                  		ld	a,(hl)
(1) 2985/     E95 : DD 77 24            		ld	(ix+ALV),a	; ALV
(1) 2986/     E98 : 23                  		inc	hl
(1) 2987/     E99 : 7E                  		ld	a,(hl)
(1) 2988/     E9A : DD 77 08            		ld	(ix+ATK),a	; ATK
(1) 2989/     E9D : 23                  		inc	hl
(1) 2990/     E9E : 7E                  		ld	a,(hl)
(1) 2991/     E9F : CF                  		rst	8
(1) 2992/     EA0 : DD 77 10            		ld	(ix+SLV),a	; SLV
(1) 2993/     EA3 : 23                  		inc	hl
(1) 2994/     EA4 : 7E                  		ld	a,(hl)
(1) 2995/     EA5 : DD 77 0C            		ld	(ix+DKY),a	; DKY
(1) 2996/     EA8 : 23                  		inc	hl
(1) 2997/     EA9 : 7E                  		ld	a,(hl)
(1) 2998/     EAA : DD 77 14            		ld	(ix+RRT),a	; RRT
(1) 2999/     EAD : 23                  		inc	hl
(1) 3000/     EAE : 7E                  		ld	a,(hl)
(1) 3001/     EAF : CF                  		rst	8
(1) 3002/     EB0 : DD 77 34            		ld	(ix+PARP),a	; ARP
(1) 3003/     EB3 : E1                  		pop	hl
(1) 3004/     EB4 : DD E1               		pop	ix
(1) 3005/     EB6 : C9                  		ret
(1) 3006/     EB7 :                     
(1) 3007/     EB7 :                     ; ----------------------------------------
(1) 3008/     EB7 :                     ; FM/FM3
(1) 3009/     EB7 :                     
(1) 3010/     EB7 :                     .ins_fm:
(1) 3011/     EB7 : DD E5               		push	ix
(1) 3012/     EB9 : E5                  		push	hl
(1) 3013/     EBA : C5                  		push	bc
(1) 3014/     EBB :                     ; 		ld	b,(ix+chnl_Ins)	; b - current Ins
(1) 3015/     EBB : FD 46 02            		ld	b,(iy+02h)
(1) 3016/     EBE : FD 7E 05            		ld	a,(iy+05h)
(1) 3017/     EC1 : E6 07               		and	0111b
(1) 3018/     EC3 : 16 00               		ld	d,0
(1) 3019/     EC5 : 87                  		add	a,a
(1) 3020/     EC6 : 5F                  		ld	e,a
(1) 3021/     EC7 : DD 21 F2 15         		ld	ix,fmcach_list
(1) 3022/     ECB : DD 19               		add	ix,de
(1) 3023/     ECD : CF                  		rst	8
(1) 3024/     ECE : DD 5E 00            		ld	e,(ix)
(1) 3025/     ED1 : DD 23               		inc	ix
(1) 3026/     ED3 : DD 56 00            		ld	d,(ix)
(1) 3027/     ED6 :                     
(1) 3028/     ED6 :                     ; 		ld	a,(iy+0Bh)	; 0Bh: DON'T reload flag
(1) 3029/     ED6 :                     ; 		cp	b
(1) 3030/     ED6 :                     ; 		jr	z,.same_patch
(1) 3031/     ED6 :                     ; 		ld	(iy+0Bh),b
(1) 3032/     ED6 : 23                  		inc	hl		; Skip id and pitch
(1) 3033/     ED7 : 23                  		inc	hl
(1) 3034/     ED8 :                     
(1) 3035/     ED8 : 46                  		ld	b,(hl)
(1) 3036/     ED9 : 23                  		inc	hl
(1) 3037/     EDA : 4E                  		ld	c,(hl)
(1) 3038/     EDB : 23                  		inc	hl
(1) 3039/     EDC : 6E                  		ld	l,(hl)
(1) 3040/     EDD : 61                  		ld	h,c
(1) 3041/     EDE :                     
(1) 3042/     EDE : FD 7E 0A            		ld	a,(iy+0Ah)
(1) 3043/     EE1 : BC                  		cp	h
(1) 3044/     EE2 : 20 07               		jr	nz,.new_romdat
(1) 3045/     EE4 : CF                  		rst	8
(1) 3046/     EE5 : FD 7E 0B            		ld	a,(iy+0Bh)
(1) 3047/     EE8 : BD                  		cp	l
(1) 3048/     EE9 : 28 38               		jr	z,.same_patch
(1) 3049/     EEB :                     .new_romdat:
(1) 3050/     EEB : FD 74 0A            		ld	(iy+0Ah),h
(1) 3051/     EEE : FD 75 0B            		ld	(iy+0Bh),l
(1) 3052/     EF1 : 78                  		ld	a,b
(1) 3053/     EF2 : 01 28 00            		ld	bc,28h		; <- size
(1) 3054/     EF5 : D5                  		push	de
(1) 3055/     EF6 : CD C9 11            		call	transferRom	; *** ROM ACCESS ***
(1) 3056/     EF9 :                     
(1) 3057/     EF9 : E1                  		pop	hl
(1) 3058/     EFA : FD 7E 05            		ld	a,(iy+05h)
(1) 3059/     EFD : 4F                  		ld	c,a		; c - FM Key ID
(1) 3060/     EFE :                     
(1) 3061/     EFE :                     	; hl - fmcach intrument
(1) 3062/     EFE :                     	; de - FM reg and data: 3000h
(1) 3063/     EFE :                     	;  c - FM keyChannel
(1) 3064/     EFE : 79                  		ld	a,c
(1) 3065/     EFF : E6 03               		and	011b
(1) 3066/     F01 : F6 30               		or	30h		; Start at reg 30h
(1) 3067/     F03 : 57                  		ld	d,a
(1) 3068/     F04 : 1E 00               		ld	e,0
(1) 3069/     F06 : CF                  		rst	8
(1) 3070/     F07 : 06 1C               		ld	b,7*4		; Write ALL base FM registers
(1) 3071/     F09 : CD 28 0F            		call	.fm_setrlist
(1) 3072/     F0C :                     ; 		ld	b,4
(1) 3073/     F0C :                     ; 		call	.fm_setrlist
(1) 3074/     F0C :                     ; 		ld	b,5*4
(1) 3075/     F0C :                     ; 		call	.fm_setrlist
(1) 3076/     F0C : 7E                  		ld	a,(hl)		; 0B0h
(1) 3077/     F0D : FD 77 0C            		ld	(iy+0Ch),a	; ** Save 0B0h to 0Ch
(1) 3078/     F10 : 23                  		inc	hl
(1) 3079/     F11 : 7E                  		ld	a,(hl)		; 0B4h
(1) 3080/     F12 : FD 77 0D            		ld	(iy+0Dh),a	; ** Save 0B4h to 0Dh
(1) 3081/     F15 : 23                  		inc	hl
(1) 3082/     F16 : CF                  		rst	8
(1) 3083/     F17 : 7E                  		ld	a,(hl)
(1) 3084/     F18 : FD 77 0E            		ld	(iy+0Eh),a	; LFO
(1) 3085/     F1B : 23                  		inc	hl
(1) 3086/     F1C : 7E                  		ld	a,(hl)		; 028h keys
(1) 3087/     F1D : E6 F0               		and	11110000b
(1) 3088/     F1F : CF                  		rst	8
(1) 3089/     F20 : FD 77 0F            		ld	(iy+0Fh),a	; ** Save keys to 0Eh
(1) 3090/     F23 :                     .same_patch:
(1) 3091/     F23 : C1                  		pop	bc
(1) 3092/     F24 : E1                  		pop	hl
(1) 3093/     F25 : DD E1               		pop	ix
(1) 3094/     F27 : C9                  		ret
(1) 3095/     F28 :                     ; b - numof_regs
(1) 3096/     F28 :                     .fm_setrlist:
(1) 3097/     F28 : 5E                  		ld	e,(hl)
(1) 3098/     F29 : 23                  		inc	hl
(1) 3099/     F2A : CD E7 13            		call	fm_autoreg
(1) 3100/     F2D : 00                  		nop
(1) 3101/     F2E : 00                  		nop
(1) 3102/     F2F : CF                  		rst	8
(1) 3103/     F30 : 00                  		nop
(1) 3104/     F31 : 14                  		inc	d		; +4
(1) 3105/     F32 : 14                  		inc	d
(1) 3106/     F33 : 14                  		inc	d
(1) 3107/     F34 : 14                  		inc	d
(1) 3108/     F35 : 10 F1               		djnz	.fm_setrlist
(1) 3109/     F37 : C9                  		ret
(1) 3110/     F38 :                     
(1) 3111/     F38 :                     ; ----------------------------------------
(1) 3112/     F38 :                     
(1) 3113/     F38 :                     .ins_dac:
(1) 3114/     F38 :                     ; 		ld	e,(ix+chnl_Ins)	; b - current Ins
(1) 3115/     F38 :                     ; 		ld	a,(iy+0Bh)	; 0Bh: DON'T reload flag
(1) 3116/     F38 :                     ; 		cp	e
(1) 3117/     F38 :                     ; 		jr	z,.same_dac
(1) 3118/     F38 :                     ; 		ld	(iy+0Bh),e
(1) 3119/     F38 : E5                  		push	hl
(1) 3120/     F39 : C5                  		push	bc
(1) 3121/     F3A : CD 16 14            		call	dac_off
(1) 3122/     F3D : 7E                  		ld	a,(hl)
(1) 3123/     F3E : E6 0F               		and	00001111b
(1) 3124/     F40 : 32 94 1F            		ld	(wave_Flags),a
(1) 3125/     F43 : CF                  		rst	8
(1) 3126/     F44 : 23                  		inc	hl
(1) 3127/     F45 : 23                  		inc	hl
(1) 3128/     F46 : 5E                  		ld	e,(hl)
(1) 3129/     F47 : 23                  		inc	hl
(1) 3130/     F48 : 7E                  		ld	a,(hl)
(1) 3131/     F49 : 23                  		inc	hl
(1) 3132/     F4A : 6E                  		ld	l,(hl)
(1) 3133/     F4B : 67                  		ld	h,a
(1) 3134/     F4C : E5                  		push	hl
(1) 3135/     F4D : 7B                  		ld	a,e
(1) 3136/     F4E : 01 06 00            		ld	bc,6		; Skip head
(1) 3137/     F51 : 09                  		add	hl,bc
(1) 3138/     F52 : CE 00               		adc	a,0
(1) 3139/     F54 : 22 89 1F            		ld	(wave_Start),hl	; Set START point
(1) 3140/     F57 : 32 8B 1F            		ld	(wave_Start+2),a
(1) 3141/     F5A : E1                  		pop	hl
(1) 3142/     F5B : 7B                  		ld	a,e
(1) 3143/     F5C : 11 B4 1F            		ld	de,sampleHead
(1) 3144/     F5F : 01 06 00            		ld	bc,6
(1) 3145/     F62 : D5                  		push	de
(1) 3146/     F63 : CF                  		rst	8
(1) 3147/     F64 : CD C9 11            		call	transferRom	; *** ROM ACCESS ***
(1) 3148/     F67 : E1                  		pop	hl
(1) 3149/     F68 :                     	; hl - temporal header
(1) 3150/     F68 : 5E                  		ld	e,(hl)
(1) 3151/     F69 : 23                  		inc	hl
(1) 3152/     F6A : 56                  		ld	d,(hl)
(1) 3153/     F6B : 23                  		inc	hl
(1) 3154/     F6C : 7E                  		ld	a,(hl)
(1) 3155/     F6D : 23                  		inc	hl
(1) 3156/     F6E : ED 53 8C 1F         		ld	(wave_Len),de	; LEN
(1) 3157/     F72 : 32 8E 1F            		ld	(wave_Len+2),a
(1) 3158/     F75 : 5E                  		ld	e,(hl)
(1) 3159/     F76 : 23                  		inc	hl
(1) 3160/     F77 : CF                  		rst	8
(1) 3161/     F78 : 56                  		ld	d,(hl)
(1) 3162/     F79 : 23                  		inc	hl
(1) 3163/     F7A : 7E                  		ld	a,(hl)
(1) 3164/     F7B : 23                  		inc	hl
(1) 3165/     F7C : ED 53 8F 1F         		ld	(wave_Loop),de	; LOOP
(1) 3166/     F80 : 32 91 1F            		ld	(wave_Loop+2),a
(1) 3167/     F83 : 11 06 28            		ld	de,2806h	; keys off
(1) 3168/     F86 : CD EB 13            		call	fm_send_1
(1) 3169/     F89 : C1                  		pop	bc
(1) 3170/     F8A : E1                  		pop	hl
(1) 3171/     F8B :                     ; .same_dac:
(1) 3172/     F8B : C9                  		ret
(1) 3173/     F8C :                     
(1) 3174/     F8C :                     ; ----------------------------------------
(1) 3175/     F8C :                     
(1) 3176/     F8C :                     .ins_pcm:
(1) 3177/     F8C : DD E5               		push	ix
(1) 3178/     F8E : E5                  		push	hl
(1) 3179/     F8F : C5                  		push	bc
(1) 3180/     F90 : 7E                  		ld	a,(hl)		; Stereo|Loop bits
(1) 3181/     F91 : E6 01               		and	00000001b	; Read loop bit
(1) 3182/     F93 : 0F                  		rrca			; Move to MSB
(1) 3183/     F94 : CF                  		rst	8
(1) 3184/     F95 : 23                  		inc	hl		; Skip ID and Pitch
(1) 3185/     F96 : 23                  		inc	hl
(1) 3186/     F97 : 5E                  		ld	e,(hl)		; Read 24-bit pointer
(1) 3187/     F98 : B3                  		or	e
(1) 3188/     F99 : 5F                  		ld	e,a
(1) 3189/     F9A : 23                  		inc	hl
(1) 3190/     F9B : 7E                  		ld	a,(hl)
(1) 3191/     F9C : 23                  		inc	hl
(1) 3192/     F9D : 6E                  		ld	l,(hl)
(1) 3193/     F9E : 67                  		ld	h,a
(1) 3194/     F9F :                     	; d    - Loop enable bit
(1) 3195/     F9F :                     	; e,hl - 24-bit pointer + loop bit
(1) 3196/     F9F : DD 21 F2 16         		ld	ix,pcmcom
(1) 3197/     FA3 : 06 00               		ld	b,0
(1) 3198/     FA5 : FD 4E 05            		ld	c,(iy+05h)
(1) 3199/     FA8 : DD 09               		add	ix,bc
(1) 3200/     FAA : 01 28 00            		ld	bc,40		; Go to 40
(1) 3201/     FAD : DD 09               		add	ix,bc
(1) 3202/     FAF : 01 08 00            		ld	bc,8
(1) 3203/     FB2 : DD 73 00            		ld	(ix),e		; Write 24-bit pointer
(1) 3204/     FB5 : DD 09               		add	ix,bc
(1) 3205/     FB7 : DD 74 00            		ld	(ix),h
(1) 3206/     FBA : DD 09               		add	ix,bc
(1) 3207/     FBC : DD 75 00            		ld	(ix),l
(1) 3208/     FBF : C1                  		pop	bc
(1) 3209/     FC0 : E1                  		pop	hl
(1) 3210/     FC1 : DD E1               		pop	ix
(1) 3211/     FC3 : C9                  		ret
(1) 3212/     FC4 :                     
(1) 3213/     FC4 :                     ; ----------------------------------------
(1) 3214/     FC4 :                     
(1) 3215/     FC4 :                     .ins_pwm:
(1) 3216/     FC4 : DD E5               		push	ix
(1) 3217/     FC6 : E5                  		push	hl
(1) 3218/     FC7 : C5                  		push	bc
(1) 3219/     FC8 : 7E                  		ld	a,(hl)		; Stereo|Loop bits
(1) 3220/     FC9 : E6 03               		and	00000011b
(1) 3221/     FCB : 0F                  		rrca
(1) 3222/     FCC : 0F                  		rrca
(1) 3223/     FCD : 4F                  		ld	c,a
(1) 3224/     FCE : CF                  		rst	8
(1) 3225/     FCF : 23                  		inc	hl		; Skip ID and Pitch
(1) 3226/     FD0 : 23                  		inc	hl
(1) 3227/     FD1 : 56                  		ld	d,(hl)
(1) 3228/     FD2 : 23                  		inc	hl
(1) 3229/     FD3 : 5E                  		ld	e,(hl)
(1) 3230/     FD4 : 23                  		inc	hl
(1) 3231/     FD5 : 7E                  		ld	a,(hl)
(1) 3232/     FD6 : 23                  		inc	hl
(1) 3233/     FD7 : 6E                  		ld	l,(hl)
(1) 3234/     FD8 : 67                  		ld	h,a
(1) 3235/     FD9 : 79                  		ld	a,c
(1) 3236/     FDA : B2                  		or	d
(1) 3237/     FDB : 57                  		ld	d,a
(1) 3238/     FDC : CF                  		rst	8
(1) 3239/     FDD :                     	; de,hl - 32-bit PWM pointer
(1) 3240/     FDD : DD 21 32 17         		ld	ix,pwmcom
(1) 3241/     FE1 : 06 00               		ld	b,0
(1) 3242/     FE3 : FD 4E 05            		ld	c,(iy+05h)
(1) 3243/     FE6 : DD 09               		add	ix,bc
(1) 3244/     FE8 : 01 18 00            		ld	bc,24
(1) 3245/     FEB : DD 09               		add	ix,bc	; Move to PWOUTF
(1) 3246/     FED : 01 08 00            		ld	bc,8
(1) 3247/     FF0 : DD 72 00            		ld	(ix),d
(1) 3248/     FF3 : DD 09               		add	ix,bc
(1) 3249/     FF5 : DD 73 00            		ld	(ix),e
(1) 3250/     FF8 : DD 09               		add	ix,bc
(1) 3251/     FFA : DD 74 00            		ld	(ix),h
(1) 3252/     FFD : DD 09               		add	ix,bc
(1) 3253/     FFF : DD 75 00            		ld	(ix),l
(1) 3254/    1002 : C1                  		pop	bc
(1) 3255/    1003 : E1                  		pop	hl
(1) 3256/    1004 : DD E1               		pop	ix
(1) 3257/    1006 : C9                  		ret
(1) 3258/    1007 :                     
(1) 3259/    1007 :                     ; ----------------------------------------
(1) 3260/    1007 :                     ; NEW note
(1) 3261/    1007 :                     ; ----------------------------------------
(1) 3262/    1007 :                     
(1) 3263/    1007 :                     .note:
(1) 3264/    1007 : 78                  		ld	a,b		; Volume bit?
(1) 3265/    1008 : E6 04               		and	0100b
(1) 3266/    100A : 20 05               		jr	nz,.fm_hasvol
(1) 3267/    100C : FD 36 08 00         		ld	(iy+08h),0	; Reset to default volume
(1) 3268/    1010 : CF                  		rst	8
(1) 3269/    1011 :                     .fm_hasvol:
(1) 3270/    1011 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 3271/    1014 : 4F                  		ld	c,a
(1) 3272/    1015 : FE FF               		cp	-1
(1) 3273/    1017 : C8                  		ret	z
(1) 3274/    1018 : FE FE               		cp	-2
(1) 3275/    101A : C8                  		ret	z
(1) 3276/    101B : E7                  		rst	20h
(1) 3277/    101C : 7E                  		ld	a,(hl)
(1) 3278/    101D : E6 F0               		and	11110000b
(1) 3279/    101F : FE 80               		cp	80h
(1) 3280/    1021 : 28 16               		jr	z,.n_indx
(1) 3281/    1023 : CF                  		rst	8
(1) 3282/    1024 : FE 90               		cp	90h
(1) 3283/    1026 : 28 20               		jr	z,.n_psgn
(1) 3284/    1028 : FE A0               		cp	0A0h
(1) 3285/    102A : 28 21               		jr	z,.n_fm
(1) 3286/    102C :                     ; 		cp	0B0h		; ** Can't use notes on FM special **
(1) 3287/    102C :                     ; 		jr	z,.n_fm
(1) 3288/    102C : FE C0               		cp	0C0h
(1) 3289/    102E : 28 09               		jr	z,.n_indx
(1) 3290/    1030 : FE D0               		cp	0D0h
(1) 3291/    1032 : 28 05               		jr	z,.n_indx
(1) 3292/    1034 : FE E0               		cp	0E0h
(1) 3293/    1036 : 28 01               		jr	z,.n_indx
(1) 3294/    1038 : C9                  		ret
(1) 3295/    1039 :                     
(1) 3296/    1039 :                     ; --------------------------------
(1) 3297/    1039 :                     
(1) 3298/    1039 :                     .n_indx:
(1) 3299/    1039 : 79                  		ld	a,c
(1) 3300/    103A :                     .n_stfreq:
(1) 3301/    103A : 23                  		inc	hl		; Skip ID
(1) 3302/    103B : 5E                  		ld	e,(hl)		; Read pitch
(1) 3303/    103C : 2B                  		dec	hl
(1) 3304/    103D : 83                  		add	a,e		; Note + pitch
(1) 3305/    103E : CF                  		rst	8
(1) 3306/    103F : 87                  		add	a,a		; * 2
(1) 3307/    1040 : FD 77 06            		ld	(iy+06h),a
(1) 3308/    1043 : FD 36 07 00         		ld	(iy+07h),0	; reset pitchbend
(1) 3309/    1047 : C9                  		ret
(1) 3310/    1048 :                     .n_psgn:
(1) 3311/    1048 : 79                  		ld	a,c
(1) 3312/    1049 : C6 0C               		add	a,12		; <-- Manual adjust for NOISE
(1) 3313/    104B : 18 ED               		jr	.n_stfreq
(1) 3314/    104D :                     
(1) 3315/    104D :                     ; FM freqs
(1) 3316/    104D :                     .n_fm:
(1) 3317/    104D : 79                  		ld	a,c
(1) 3318/    104E : 23                  		inc	hl		; Skip ID
(1) 3319/    104F : 5E                  		ld	e,(hl)		; Read pitch
(1) 3320/    1050 : 2B                  		dec	hl
(1) 3321/    1051 : CF                  		rst	8
(1) 3322/    1052 : 83                  		add	a,e		; Note + pitch
(1) 3323/    1053 :                     	; Search for octave and note...
(1) 3324/    1053 : 0E 00               		ld	c,0		; c - octave
(1) 3325/    1055 : 16 07               		ld	d,7
(1) 3326/    1057 :                     .get_oct:
(1) 3327/    1057 : 5F                  		ld	e,a		; e - note
(1) 3328/    1058 : D6 0C               		sub	12
(1) 3329/    105A : B7                  		or	a
(1) 3330/    105B : FA 62 10            		jp	m,.fnd_oct
(1) 3331/    105E : 0C                  		inc	c
(1) 3332/    105F :                     ; 		nop
(1) 3333/    105F :                     ; 		nop
(1) 3334/    105F :                     ; 		rst	8
(1) 3335/    105F :                     ; 		nop
(1) 3336/    105F :                     ; 		nop
(1) 3337/    105F : 15                  		dec	d
(1) 3338/    1060 : 20 F5               		jr	nz,.get_oct
(1) 3339/    1062 :                     .fnd_oct:
(1) 3340/    1062 : CF                  		rst	8
(1) 3341/    1063 : 7B                  		ld	a,e
(1) 3342/    1064 : 87                  		add	a,a		; Note * 2
(1) 3343/    1065 : E6 1F               		and	00011111b
(1) 3344/    1067 : CB 09               		rrc	c
(1) 3345/    1069 : CB 09               		rrc	c
(1) 3346/    106B : CB 09               		rrc	c
(1) 3347/    106D : CF                  		rst	8
(1) 3348/    106E : B1                  		or	c
(1) 3349/    106F : FD 77 06            		ld	(iy+06h),a	; Save octave + index: OOOiiiiib
(1) 3350/    1072 : FD 36 07 00         		ld	(iy+07h),0
(1) 3351/    1076 : C9                  		ret
(1) 3352/    1077 :                     
(1) 3353/    1077 :                     ; ----------------------------------------
(1) 3354/    1077 :                     
(1) 3355/    1077 :                     .chnl_ulnkcut:
(1) 3356/    1077 : DD 4E 01            		ld	c,(ix+chnl_Chip)
(1) 3357/    107A : C3 7D 10            		jp	.chnl_ulnk
(1) 3358/    107D :                     .chnl_ulnkoff:
(1) 3359/    107D :                     ; 		ld	c,0
(1) 3360/    107D :                     .chnl_ulnk:
(1) 3361/    107D : AF                  		xor	a
(1) 3362/    107E : CF                  		rst	8
(1) 3363/    107F : FD 77 00            		ld	(iy),a			; Delete link, chip and prio
(1) 3364/    1082 : FD 77 01            		ld	(iy+1),a
(1) 3365/    1085 : FD 77 02            		ld	(iy+2),a
(1) 3366/    1088 : FD 77 08            		ld	(iy+08h),a
(1) 3367/    108B : FD 77 09            		ld	(iy+09h),a
(1) 3368/    108E : FD 77 0A            		ld	(iy+0Ah),a
(1) 3369/    1091 : FD 77 0B            		ld	(iy+0Bh),a
(1) 3370/    1094 : C9                  		ret
(1) 3371/    1095 :                     
(1) 3372/    1095 :                     ; 		push	iy
(1) 3373/    1095 :                     ; 		pop	hl
(1) 3374/    1095 :                     ; 		ld	bc,8-2		; Go to 08h
(1) 3375/    1095 :                     ; 		add	hl,bc
(1) 3376/    1095 :                     ; 		rst	8
(1) 3377/    1095 :                     ; 		ld	b,8/2
(1) 3378/    1095 :                     ; .clrfull:
(1) 3379/    1095 :                     ; 		ld	(hl),0		; Reset settings 08-0Bh
(1) 3380/    1095 :                     ; 		inc	hl
(1) 3381/    1095 :                     ; 		ld	(hl),0
(1) 3382/    1095 :                     ; 		inc	hl
(1) 3383/    1095 :                     ; 		rst	8
(1) 3384/    1095 :                     ; 		djnz	.clrfull
(1) 3385/    1095 :                     ; 		ret
(1) 3386/    1095 :                     
(1) 3387/    1095 :                     ; ============================================================
(1) 3388/    1095 :                     ; --------------------------------------------------------
(1) 3389/    1095 :                     ; Communication with the SCD and 32X
(1) 3390/    1095 :                     ;
(1) 3391/    1095 :                     ; SCD: Sends a level2 interrupt to Sub-CPU
(1) 3392/    1095 :                     ; 32X: Interrupts Slave SH2 directly
(1) 3393/    1095 :                     ; --------------------------------------------------------
(1) 3394/    1095 :                     
(1) 3395/    1095 :                     ; TODO: careful modifing this
(1) 3396/    1095 :                     
(1) 3397/    1095 :                     zmars_send:
(1) 3398/    1095 :                     	; ----------------------------------------
(1) 3399/    1095 :                     	; Send PCM table
(1) 3475/    1095 :                     	; ----------------------------------------
(1) 3476/    1095 :                     	; Send PWM table
(1) 3478/    1095 : 3A 37 00            		ld	a,(marsBlock)	; Enable MARS requests?
(1) 3479/    1098 : B7                  		or	a
(1) 3480/    1099 : C2 12 11            		jp	nz,.blocked_m
(1) 3481/    109C : CF                  		rst	8
(1) 3482/    109D : 3A 87 1F            		ld	a,(marsUpd)	; NEW transfer?
(1) 3483/    10A0 : B7                  		or	a
(1) 3484/    10A1 : 28 79               		jr	z,.pwm_exit
(1) 3485/    10A3 : AF                  		xor	a
(1) 3486/    10A4 : 32 87 1F            		ld	(marsUpd),a
(1) 3487/    10A7 : E7                  		rst	20h
(1) 3488/    10A8 : CD 1D 11            		call	.set_combank
(1) 3489/    10AB : FD 21 00 D1         		ld	iy,8000h|5100h	; iy - mars sysreg
(1) 3490/    10AF : DD 21 32 17         		ld	ix,pwmcom
(1) 3491/    10B3 :                     .wait_enter:
(1) 3492/    10B3 : 00                  		nop
(1) 3493/    10B4 : 00                  		nop
(1) 3494/    10B5 : FD 7E 2E            		ld	a,(iy+comm14)	; check if 68k got first.
(1) 3495/    10B8 : CB 7F               		bit	7,a
(1) 3496/    10BA : 20 F7               		jr	nz,.wait_enter
(1) 3497/    10BC : E6 F0               		and	11110000b
(1) 3498/    10BE : F6 01               		or	1		; Set CMD task mode $01
(1) 3499/    10C0 : FD 77 2E            		ld	(iy+comm14),a
(1) 3500/    10C3 : CF                  		rst	8
(1) 3501/    10C4 : E6 0F               		and	00001111b	; Did it write?
(1) 3502/    10C6 : FE 01               		cp	1
(1) 3503/    10C8 : 20 E9               		jr	nz,.wait_enter	; If not, retry
(1) 3504/    10CA : FD CB 2E FE         		set	7,(iy+comm14)	; LOCK bit
(1) 3505/    10CE : FD CB 03 CE         		set	1,(iy+standby)	; Request Slave CMD
(1) 3506/    10D2 : 00                  		nop	; wave sync AND wait manually.
(1) 3507/    10D3 : 00                  		nop
(1) 3508/    10D4 : 00                  		nop
(1) 3509/    10D5 : 00                  		nop
(1) 3510/    10D6 : 00                  		nop
(1) 3511/    10D7 : CF                  		rst	8
(1) 3512/    10D8 : 00                  		nop
(1) 3513/    10D9 : 00                  		nop
(1) 3514/    10DA : 00                  		nop
(1) 3515/    10DB : 00                  		nop
(1) 3516/    10DC : 00                  		nop
(1) 3517/    10DD :                     ; .wait_cmd:
(1) 3518/    10DD :                     ; 		bit	1,(iy+standby)	; <-- unstable on HW
(1) 3519/    10DD :                     ; 		jr	nz,.wait_cmd
(1) 3520/    10DD : 0E 0E               		ld	c,14		; c - 14 words/2-byte
(1) 3521/    10DF :                     .next_packet:
(1) 3522/    10DF : CF                  		rst	8
(1) 3523/    10E0 : FD E5               		push	iy
(1) 3524/    10E2 : E1                  		pop	hl
(1) 3525/    10E3 : 11 28 00            		ld	de,comm8	; hl - comm8
(1) 3526/    10E6 : 19                  		add	hl,de
(1) 3527/    10E7 : 06 02               		ld	b,2
(1) 3528/    10E9 : CF                  		rst	8
(1) 3529/    10EA :                     .next_comm:
(1) 3530/    10EA : DD 56 00            		ld	d,(ix)
(1) 3531/    10ED : DD 5E 01            		ld	e,(ix+1)
(1) 3532/    10F0 : DD 23               		inc	ix
(1) 3533/    10F2 : DD 23               		inc	ix
(1) 3534/    10F4 : CF                  		rst	8
(1) 3535/    10F5 : 72                  		ld	(hl),d
(1) 3536/    10F6 : 23                  		inc	hl
(1) 3537/    10F7 : 73                  		ld	(hl),e
(1) 3538/    10F8 : 23                  		inc	hl
(1) 3539/    10F9 : 10 EF               		djnz	.next_comm
(1) 3540/    10FB : FD CB 2E F6         		set	6,(iy+comm14)	; PASS data bit
(1) 3541/    10FF : CF                  		rst	8
(1) 3542/    1100 :                     .w_pass2:
(1) 3543/    1100 : 00                  		nop
(1) 3544/    1101 : FD CB 2E 76         		bit	6,(iy+comm14)	; PASS cleared?
(1) 3545/    1105 : 20 F9               		jr	nz,.w_pass2
(1) 3546/    1107 : 0D                  		dec	c
(1) 3547/    1108 : 20 D5               		jr	nz,.next_packet
(1) 3548/    110A : FD CB 2E BE         		res	7,(iy+comm14)	; Break transfer loop
(1) 3549/    110E : FD CB 2E B6         		res	6,(iy+comm14)	; Clear PASS
(1) 3550/    1112 :                     ; Reset comm ports
(1) 3551/    1112 :                     .blocked_m:
(1) 3552/    1112 : AF                  		xor	a
(1) 3553/    1113 : 21 32 17            		ld	hl,pwmcom
(1) 3554/    1116 : 06 08               		ld	b,8
(1) 3555/    1118 :                     .clr_pwm:
(1) 3556/    1118 : 77                  		ld	(hl),a		; Reset our COM bytes
(1) 3557/    1119 : 23                  		inc	hl
(1) 3558/    111A : 10 FC               		djnz	.clr_pwm
(1) 3559/    111C :                     .pwm_exit:
(1) 3568/    111C : C9                  		ret
(1) 3569/    111D :                     
(1) 3570/    111D :                     ; --------------------------------------------------------
(1) 3571/    111D :                     ; Set bank to $A10000
(1) 3573/    111D :                     .set_combank:
(1) 3574/    111D : 21 00 60            		ld	hl,6000h
(1) 3575/    1120 : 36 00               		ld	(hl),0
(1) 3576/    1122 : 36 01               		ld	(hl),1
(1) 3577/    1124 : 36 00               		ld	(hl),0
(1) 3578/    1126 : 36 00               		ld	(hl),0
(1) 3579/    1128 : CF                  		rst	8
(1) 3580/    1129 : 36 00               		ld	(hl),0
(1) 3581/    112B : 36 00               		ld	(hl),0
(1) 3582/    112D : 36 01               		ld	(hl),1
(1) 3583/    112F : 36 00               		ld	(hl),0
(1) 3584/    1131 : 36 01               		ld	(hl),1
(1) 3585/    1133 : C9                  		ret
(1) 3587/    1134 :                     
(1) 3588/    1134 :                     ; ====================================================================
(1) 3589/    1134 :                     ; ----------------------------------------------------------------
(1) 3590/    1134 :                     ; Subroutines
(1) 3591/    1134 :                     ; ----------------------------------------------------------------
(1) 3592/    1134 :                     
(1) 3593/    1134 :                     ; --------------------------------------------------------
(1) 3594/    1134 :                     ; Init sound engine
(1) 3595/    1134 :                     ; --------------------------------------------------------
(1) 3596/    1134 :                     
(1) 3597/    1134 :                     gema_init:
(1) 3598/    1134 : CD 16 14            		call	dac_off
(1) 3599/    1137 : AF                  		xor	a
(1) 3600/    1138 :                     ; 		ld	(marsUpd),a
(1) 3601/    1138 :                     ; 		ld	(mcdUpd),a
(1) 3602/    1138 : 32 30 00            		ld	(cdRamLen),a
(1) 3603/    113B : CD 25 15            		call	gema_lastbank	; Set last bank slot BEFORE writing to PSG (32X bus problem)
(1) 3604/    113E : 21 11 7F            		ld	hl,Zpsg_ctrl	; Silence PSG channels
(1) 3605/    1141 : 36 9F               		ld	(hl),09Fh
(1) 3606/    1143 : 36 BF               		ld	(hl),0BFh
(1) 3607/    1145 : 36 DF               		ld	(hl),0DFh
(1) 3608/    1147 : 36 FF               		ld	(hl),0FFh
(1) 3609/    1149 : 11 0B 22            		ld	de,2208h|3	; Set Default LFO
(1) 3610/    114C : CD EB 13            		call	fm_send_1
(1) 3611/    114F : 11 00 27            		ld	de,2700h	; CH3 special and timers off
(1) 3612/    1152 : CD EB 13            		call	fm_send_1
(1) 3613/    1155 :                     ; 		ld	de,2800h	; FM KEYS off
(1) 3614/    1155 : 14                  		inc	d
(1) 3615/    1156 : CD EB 13            		call	fm_send_1
(1) 3616/    1159 : 1C                  		inc	e
(1) 3617/    115A : CD EB 13            		call	fm_send_1
(1) 3618/    115D : 1C                  		inc	e
(1) 3619/    115E : CD EB 13            		call	fm_send_1
(1) 3620/    1161 : 1C                  		inc	e
(1) 3621/    1162 : 1C                  		inc	e
(1) 3622/    1163 : CD EB 13            		call	fm_send_1
(1) 3623/    1166 : 1C                  		inc	e
(1) 3624/    1167 : CD EB 13            		call	fm_send_1
(1) 3625/    116A : 1C                  		inc	e
(1) 3626/    116B : CD EB 13            		call	fm_send_1
(1) 3627/    116E : FD 21 D8 16         		ld	iy,nikona_BuffList
(1) 3628/    1172 : 0E 01               		ld	c,1			; Start at this priority
(1) 3629/    1174 :                     .setup_list:
(1) 3630/    1174 : FD 7E 00            		ld	a,(iy)
(1) 3631/    1177 : FE FF               		cp	-1
(1) 3632/    1179 : 28 24               		jr	z,.end_setup
(1) 3633/    117B : FD 23               		inc	iy
(1) 3634/    117D : 6F                  		ld	l,a
(1) 3635/    117E : FD 66 00            		ld	h,(iy)
(1) 3636/    1181 : E5                  		push	hl
(1) 3637/    1182 : DD E1               		pop	ix
(1) 3638/    1184 : DD 71 14            		ld	(ix+trk_Priority),c
(1) 3639/    1187 : DD 36 01 FF         		ld	(ix+trk_SeqId),-1	; Reset sequence ID
(1) 3640/    118B : FD 23               		inc	iy
(1) 3641/    118D :                     	; iy - src
(1) 3642/    118D :                     	; hl - dst
(1) 3643/    118D : 11 04 00            		ld	de,trk_Blocks
(1) 3644/    1190 : 19                  		add	hl,de
(1) 3645/    1191 : 06 06               		ld	b,MAX_BUFFNTRY-2
(1) 3646/    1193 :                     .st_copy:
(1) 3647/    1193 : FD 7E 00            		ld	a,(iy)
(1) 3648/    1196 : 77                  		ld	(hl),a
(1) 3649/    1197 : FD 23               		inc	iy
(1) 3650/    1199 : 23                  		inc	hl
(1) 3651/    119A : 10 F7               		djnz	.st_copy
(1) 3652/    119C : 0C                  		inc	c
(1) 3653/    119D : 18 D5               		jr	.setup_list
(1) 3654/    119F :                     .end_setup:
(1) 3655/    119F : 3E FF               		ld	a,-1			; Reset
(1) 3656/    11A1 : 32 86 1F            		ld	(trkListPage),a
(1) 3657/    11A4 : AF                  		xor	a
(1) 3658/    11A5 : C3 36 06            		jp	init_RomTrcks
(1) 3659/    11A8 :                     
(1) 3660/    11A8 :                     ; --------------------------------------------------------
(1) 3661/    11A8 :                     ; get_tick
(1) 3662/    11A8 :                     ;
(1) 3663/    11A8 :                     ; Checks if VBlank triggred a TICK
(1) 3664/    11A8 :                     ; (1/150 NTSC, 1/120 PAL)
(1) 3665/    11A8 :                     ; --------------------------------------------------------
(1) 3666/    11A8 :                     
(1) 3667/    11A8 :                     get_tick:
(1) 3668/    11A8 : F3                  		di				; Disable ints
(1) 3669/    11A9 : F5                  		push	af
(1) 3670/    11AA : E5                  		push	hl
(1) 3671/    11AB : 21 81 1F            		ld	hl,tickFlag		; read last TICK flag
(1) 3672/    11AE : 7E                  		ld	a,(hl)			; non-zero value (1Fh)?
(1) 3673/    11AF : B7                  		or 	a
(1) 3674/    11B0 : 28 13               		jr	z,.ctnotick
(1) 3675/    11B2 : 36 00               		ld	(hl),0			; Reset TICK flag
(1) 3676/    11B4 : 23                  		inc	hl			; Move to tickCnt
(1) 3677/    11B5 : 34                  		inc	(hl)			; and increment
(1) 3678/    11B6 : CF                  		rst	8
(1) 3679/    11B7 : D5                  		push	de
(1) 3680/    11B8 : 2A A0 1F            		ld	hl,(sbeatAcc)		; Increment subbeats
(1) 3681/    11BB : ED 5B A2 1F         		ld	de,(sbeatPtck)
(1) 3682/    11BF : CF                  		rst	8
(1) 3683/    11C0 : 19                  		add	hl,de
(1) 3684/    11C1 : 22 A0 1F            		ld	(sbeatAcc),hl
(1) 3685/    11C4 : D1                  		pop	de
(1) 3686/    11C5 :                     .ctnotick:
(1) 3687/    11C5 : E1                  		pop	hl
(1) 3688/    11C6 : F1                  		pop	af
(1) 3689/    11C7 : FB                  		ei				; Enable ints again
(1) 3690/    11C8 : C9                  		ret
(1) 3691/    11C9 :                     
(1) 3692/    11C9 :                     ; --------------------------------------------------------
(1) 3693/    11C9 :                     ; transferRom
(1) 3694/    11C9 :                     ;
(1) 3695/    11C9 :                     ; Transfer bytes from ROM to RAM. This also tells
(1) 3696/    11C9 :                     ; to 68k that we want to access ROM
(1) 3697/    11C9 :                     ;
(1) 3698/    11C9 :                     ; Input:
(1) 3699/    11C9 :                     ; a  - 68K Address $xx0000
(1) 3700/    11C9 :                     ;  c - Byte count (size 0 NOT allowed, MAX: 0FFh)
(1) 3701/    11C9 :                     ; hl - 68K Address $00xxxx
(1) 3702/    11C9 :                     ; de - Destination pointer
(1) 3703/    11C9 :                     ;
(1) 3704/    11C9 :                     ; Uses:
(1) 3705/    11C9 :                     ; b
(1) 3706/    11C9 :                     ;
(1) 3707/    11C9 :                     ; Notes:
(1) 3708/    11C9 :                     ; call RST 20h first if transfering anything other
(1) 3709/    11C9 :                     ; than sample data, just to be safe.
(1) 3710/    11C9 :                     ; --------------------------------------------------------
(1) 3711/    11C9 :                     
(1) 3712/    11C9 :                     transferRom:
(1) 3713/    11C9 : FE FF               		cp	0FFh		; ** WORKAROUND FOR $FF0000 area
(1) 3714/    11CB : 28 43               		jr	z,.from_ram
(1) 3715/    11CD : CF                  		rst	8
(1) 3716/    11CE : DD E5               		push	ix
(1) 3717/    11D0 : DD 21 2F 00         		ld	ix,commZRomBlk	; ix - rom read/block flags
(1) 3718/    11D4 : 22 9E 1F            		ld	(x68ksrclsb),hl	; save hl copy
(1) 3719/    11D7 : CB BC               		res	7,h
(1) 3720/    11D9 : 06 00               		ld	b,0
(1) 3721/    11DB : 0B                  		dec	bc
(1) 3722/    11DC : 09                  		add	hl,bc
(1) 3723/    11DD : CB 7C               		bit	7,h
(1) 3724/    11DF : 20 0B               		jr	nz,.double
(1) 3725/    11E1 : 2A 9E 1F            		ld	hl,(x68ksrclsb)	; single transfer
(1) 3726/    11E4 : 0C                  		inc	c
(1) 3727/    11E5 : 47                  		ld	b,a
(1) 3728/    11E6 : CD 2E 12            		call	.transfer
(1) 3729/    11E9 : DD E1               		pop	ix
(1) 3730/    11EB : C9                  		ret
(1) 3731/    11EC :                     .double:
(1) 3732/    11EC : CF                  		rst	8
(1) 3733/    11ED : 47                  		ld	b,a		; double transfer
(1) 3734/    11EE : C5                  		push	bc
(1) 3735/    11EF : E5                  		push	hl
(1) 3736/    11F0 : 79                  		ld	a,c
(1) 3737/    11F1 : 95                  		sub	a,l
(1) 3738/    11F2 : 4F                  		ld	c,a
(1) 3739/    11F3 : 2A 9E 1F            		ld	hl,(x68ksrclsb)
(1) 3740/    11F6 : CD 2E 12            		call	.transfer
(1) 3741/    11F9 : E1                  		pop	hl
(1) 3742/    11FA : C1                  		pop	bc
(1) 3743/    11FB :                     ; 		rst	8
(1) 3744/    11FB : 4D                  		ld	c,l
(1) 3745/    11FC : 0C                  		inc	c
(1) 3746/    11FD : 3A 9F 1F            		ld	a,(x68ksrcmid)
(1) 3747/    1200 : E6 80               		and	80h
(1) 3748/    1202 : C6 80               		add	a,80h
(1) 3749/    1204 : 67                  		ld	h,a
(1) 3750/    1205 : 2E 00               		ld	l,0
(1) 3751/    1207 : 30 01               		jr	nc,.x68knocarry
(1) 3752/    1209 : 04                  		inc	b
(1) 3753/    120A :                     .x68knocarry:
(1) 3754/    120A : CD 2E 12            		call	.transfer
(1) 3755/    120D : DD E1               		pop	ix
(1) 3756/    120F : C9                  		ret
(1) 3757/    1210 :                     
(1) 3758/    1210 :                     ; ------------------------------------------------
(1) 3759/    1210 :                     ; WORKAROUND FOR READING FROM $FF0000 RAM
(1) 3760/    1210 :                     ; SEGA CD ONLY
(1) 3761/    1210 :                     ;
(1) 3762/    1210 :                     ; On the 68K side YOU MUST CALL
(1) 3763/    1210 :                     ; Sound_Update on a loop during Display.
(1) 3764/    1210 :                     ; ------------------------------------------------
(1) 3765/    1210 :                     
(1) 3766/    1210 :                     .from_ram:
(1) 3767/    1210 : ED 53 31 00         		ld	(cdRamDst),de
(1) 3768/    1214 : 22 33 00            		ld	(cdRamSrc),hl
(1) 3769/    1217 : 32 35 00            		ld	(cdRamSrcB),a
(1) 3770/    121A : CD 25 15            		call	gema_lastbank			; Set bank to $FF8000 area
(1) 3771/    121D : CF                  		rst	8
(1) 3772/    121E : 79                  		ld	a,c
(1) 3773/    121F : 32 30 00            		ld	(cdRamLen),a
(1) 3774/    1222 : 21 00 FF            		ld	hl,RAM_ZCdFlag_D&07FFFh+8000h	; ** EXTERNAL **
(1) 3775/    1225 : 36 01               		ld	(hl),1				; WRITE TO RAM: Set request, 68k clears.
(1) 3776/    1227 :                     .wait:
(1) 3777/    1227 : 3A 30 00            		ld	a,(cdRamLen)
(1) 3778/    122A : B7                  		or	a
(1) 3779/    122B : 20 FA               		jr	nz,.wait
(1) 3780/    122D : C9                  		ret
(1) 3781/    122E :                     
(1) 3782/    122E :                     ; ------------------------------------------------
(1) 3783/    122E :                     ; b  - Source ROM bank
(1) 3784/    122E :                     ;  c - Bytes to transfer (00h is invalid)
(1) 3785/    122E :                     ; hl - Source ROM $00xxxx | 8000h
(1) 3786/    122E :                     ; de - Destination address
(1) 3787/    122E :                     ; ix - ROM-block flag
(1) 3788/    122E :                     ; ------------------------------------------------
(1) 3789/    122E :                     
(1) 3790/    122E :                     .transfer:
(1) 3791/    122E : CF                  		rst	8
(1) 3792/    122F : D5                  		push	de
(1) 3793/    1230 : 11 00 60            		ld	de,6000h
(1) 3794/    1233 : 7C                  		ld	a,h
(1) 3795/    1234 : 07                  		rlca
(1) 3796/    1235 : 12                  		ld	(de),a
(1) 3797/    1236 : 78                  		ld	a,b
(1) 3798/    1237 : CF                  		rst	8
(1) 3799/    1238 : 12                  		ld	(de),a
(1) 3800/    1239 : 0F                  		rrca
(1) 3801/    123A : 12                  		ld	(de),a
(1) 3802/    123B : 0F                  		rrca
(1) 3803/    123C : 12                  		ld	(de),a
(1) 3804/    123D : 0F                  		rrca
(1) 3805/    123E : 12                  		ld	(de),a
(1) 3806/    123F : 0F                  		rrca
(1) 3807/    1240 : CF                  		rst	8
(1) 3808/    1241 : 12                  		ld	(de),a
(1) 3809/    1242 : 0F                  		rrca
(1) 3810/    1243 : 12                  		ld	(de),a
(1) 3811/    1244 : 0F                  		rrca
(1) 3812/    1245 : 12                  		ld	(de),a
(1) 3813/    1246 : 0F                  		rrca
(1) 3814/    1247 : 12                  		ld	(de),a
(1) 3815/    1248 : D1                  		pop	de
(1) 3816/    1249 : CB FC               		set	7,h
(1) 3817/    124B : CF                  		rst	8
(1) 3818/    124C :                     
(1) 3819/    124C :                     	; Transfer ROM data in packets
(1) 3820/    124C :                     	; while playing the cache'd sample
(1) 3821/    124C :                     	; *** CRITICAL PROCESS ***
(1) 3822/    124C :                     	;
(1) 3823/    124C :                     	; pseudo-reference for ldir:
(1) 3824/    124C :                     	; ld (de),(hl)	; load (hl) to (de) directly
(1) 3825/    124C :                     	; inc de	; next de
(1) 3826/    124C :                     	; inc hl	; next hl
(1) 3827/    124C :                     	; dec bc	; decrement bc
(1) 3828/    124C :                     	;
(1) 3829/    124C : 06 00               		ld	b,0
(1) 3830/    124E : 79                  		ld	a,c		; a - Size counter
(1) 3831/    124F :                     ; 		set	1,(ix)
(1) 3832/    124F : D6 08               		sub	MAX_TRFRPZ	; Length lower than MAX_TRFRPZ?
(1) 3833/    1251 : 38 14               		jr	c,.x68klast	; Process single piece only
(1) 3834/    1253 :                     .x68kloop:
(1) 3835/    1253 : CF                  		rst	8
(1) 3836/    1254 : 00                  		nop
(1) 3837/    1255 : 0E 07               		ld	c,MAX_TRFRPZ-1
(1) 3838/    1257 : DD CB 00 46         		bit	0,(ix)		; Genesis requests LOCK?
(1) 3839/    125B : C4 75 12            		call	nz,.x68klpwt
(1) 3840/    125E : ED B0               		ldir			; (de) to (hl) until bc == 0
(1) 3841/    1260 : CF                  		rst	8
(1) 3842/    1261 : 00                  		nop
(1) 3843/    1262 : D6 07               		sub	a,MAX_TRFRPZ-1
(1) 3844/    1264 : D2 53 12            		jp	nc,.x68kloop
(1) 3845/    1267 :                     ; last block
(1) 3846/    1267 :                     .x68klast:
(1) 3847/    1267 : C6 08               		add	a,MAX_TRFRPZ
(1) 3848/    1269 : 4F                  		ld	c,a
(1) 3849/    126A : DD CB 00 46         		bit	0,(ix)		; Genesis requests LOCK?
(1) 3850/    126E : C4 75 12            		call	nz,.x68klpwt
(1) 3851/    1271 : ED B0               		ldir
(1) 3852/    1273 : CF                  		rst	8
(1) 3853/    1274 : C9                  		ret
(1) 3854/    1275 :                     
(1) 3855/    1275 :                     ; Wait here until Genesis unlocks ROM
(1) 3856/    1275 :                     .x68klpwt:
(1) 3857/    1275 : 00                  		nop	; WAVE SYNC
(1) 3858/    1276 : 00                  		nop
(1) 3859/    1277 :                     .x68kpwtlp:
(1) 3860/    1277 : CF                  		rst	8
(1) 3861/    1278 : 00                  		nop	; WAVE SYNC
(1) 3862/    1279 : 00                  		nop
(1) 3863/    127A : DD CB 00 46         		bit	0,(ix)		; 68k finished?
(1) 3864/    127E : 20 F7               		jr	nz,.x68kpwtlp
(1) 3865/    1280 : C9                  		ret
(1) 3866/    1281 :                     
(1) 3867/    1281 :                     ; ====================================================================
(1) 3868/    1281 :                     ; ----------------------------------------------------------------
(1) 3869/    1281 :                     ; Sound chip routines
(1) 3870/    1281 :                     ; ----------------------------------------------------------------
(1) 3871/    1281 :                     
(1) 3872/    1281 :                     ; --------------------------------------------------------
(1) 3873/    1281 :                     ; chip_env
(1) 3874/    1281 :                     ;
(1) 3875/    1281 :                     ; Process PSG
(1) 3876/    1281 :                     ; --------------------------------------------------------
(1) 3877/    1281 :                     
(1) 3878/    1281 :                     chip_env:
(1) 3880/    1281 : CD 25 15            		call	gema_lastbank		; Keep bank out of ROM before writing PSG
(1) 3882/    1284 : FD 21 6D 17         		ld	iy,psgcom+3		; Start from NOISE first
(1) 3883/    1288 : DD 21 11 7F         		ld	ix,Zpsg_ctrl
(1) 3884/    128C : 0E E0               		ld	c,0E0h			; c - PSG first ctrl command
(1) 3885/    128E : 06 04               		ld	b,4			; b - 4 channels
(1) 3886/    1290 :                     .vloop:
(1) 3887/    1290 : CF                  		rst	8
(1) 3888/    1291 : FD 5E 00            		ld	e,(iy+COM)		; e - current command
(1) 3889/    1294 : FD 36 00 00         		ld	(iy+COM),0
(1) 3890/    1298 :                     
(1) 3891/    1298 :                     	; ----------------------------
(1) 3892/    1298 :                     	; bit 2 - stop sound
(1) 3893/    1298 : CB 53               		bit	2,e
(1) 3894/    129A : 28 0C               		jr	z,.ckof
(1) 3895/    129C : FD 36 04 FF         		ld	(iy+LEV),-1		; reset level
(1) 3896/    12A0 : FD 36 28 01         		ld	(iy+FLG),1		; and update
(1) 3897/    12A4 : FD 36 18 00         		ld	(iy+MODE),0		; envelope off
(1) 3898/    12A8 :                     .ckof:
(1) 3899/    12A8 :                     	; ----------------------------
(1) 3900/    12A8 :                     	; bit 1 - key off
(1) 3901/    12A8 : CB 4B               		bit	1,e
(1) 3902/    12AA : 28 0F               		jr      z,.ckon
(1) 3903/    12AC : FD 7E 18            		ld	a,(iy+MODE)		; mode 0?
(1) 3904/    12AF : B7                  		or	a
(1) 3905/    12B0 : 28 09               		jr	z,.ckon
(1) 3906/    12B2 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3907/    12B6 : FD 36 18 04         		ld	(iy+MODE),100b		; set envelope mode 100b
(1) 3908/    12BA : CF                  		rst	8
(1) 3909/    12BB :                     .ckon:
(1) 3910/    12BB :                     	; ----------------------------
(1) 3911/    12BB :                     	; bit 0 - key on
(1) 3912/    12BB : CB 43               		bit	0,e
(1) 3913/    12BD : 28 1A               		jr	z,.envproc
(1) 3914/    12BF : FD 36 04 FF         		ld	(iy+LEV),-1		; reset level
(1) 3915/    12C3 : 78                  		ld	a,b
(1) 3916/    12C4 : FE 04               		cp	4			; NOISE channel?
(1) 3917/    12C6 : 20 08               		jr	nz,.nskip
(1) 3918/    12C8 : CF                  		rst	8			; Set NOISE mode
(1) 3919/    12C9 : 3A 83 1F            		ld	a,(psgHatMode)		; write hat mode only.
(1) 3920/    12CC : B1                  		or	c
(1) 3921/    12CD : DD 77 00            		ld	(ix),a			; WRITE PSG
(1) 3922/    12D0 :                     .nskip:
(1) 3923/    12D0 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3924/    12D4 : CF                  		rst	8
(1) 3925/    12D5 : FD 36 18 01         		ld	(iy+MODE),001b		; set to attack mode
(1) 3926/    12D9 :                     .nblock:
(1) 3927/    12D9 :                     
(1) 3928/    12D9 :                     	; ----------------------------
(1) 3929/    12D9 :                     	; Process effects
(1) 3930/    12D9 :                     	; ----------------------------
(1) 3931/    12D9 :                     .envproc:
(1) 3932/    12D9 : FD 7E 18            		ld	a,(iy+MODE)
(1) 3933/    12DC : B7                  		or	a			; no modes
(1) 3934/    12DD : CA 63 13            		jp	z,.vedlp
(1) 3935/    12E0 : FE 01               		cp 	001b			; Attack mode
(1) 3936/    12E2 : 20 2C               		jr	nz,.chk2
(1) 3937/    12E4 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3938/    12E8 : FD 5E 24            		ld	e,(iy+ALV)
(1) 3939/    12EB : FD 7E 08            		ld	a,(iy+ATK)		; if ATK == 0, don't use
(1) 3940/    12EE : B7                  		or	a
(1) 3941/    12EF : 28 16               		jr	z,.atkend
(1) 3942/    12F1 : 57                  		ld	d,a			; c - attack rate
(1) 3943/    12F2 : 7B                  		ld	a,e			; a - attack level
(1) 3944/    12F3 : CF                  		rst	8
(1) 3945/    12F4 : FD 5E 24            		ld	e,(iy+ALV)		; b - OLD attack level
(1) 3946/    12F7 : 92                  		sub	a,d			; (attack rate) - (level)
(1) 3947/    12F8 : 38 0D               		jr	c,.atkend		; if carry: already finished
(1) 3948/    12FA : 28 0B               		jr	z,.atkend		; if zero: no attack rate
(1) 3949/    12FC : BB                  		cp	e			; attack rate == level?
(1) 3950/    12FD : 38 08               		jr	c,.atkend
(1) 3951/    12FF : 28 06               		jr	z,.atkend
(1) 3952/    1301 : FD 77 04            		ld	(iy+LEV),a		; set new level
(1) 3953/    1304 : CF                  		rst	8
(1) 3954/    1305 : 18 5C               		jr	.vedlp
(1) 3955/    1307 :                     .atkend:
(1) 3956/    1307 : FD 73 04            		ld	(iy+LEV),e		; attack level = new level
(1) 3957/    130A :                     .atkzero:
(1) 3958/    130A : FD 36 18 02         		ld	(iy+MODE),010b		; set to decay mode
(1) 3959/    130E : 18 53               		jr	.vedlp
(1) 3960/    1310 :                     .chk2:
(1) 3961/    1310 :                     
(1) 3962/    1310 : FE 02               		cp	010b			; Decay mode
(1) 3963/    1312 : 20 31               		jr	nz,.chk4
(1) 3964/    1314 :                     .dectmr:
(1) 3965/    1314 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3966/    1318 : FD 7E 04            		ld	a,(iy+LEV)		; a - Level
(1) 3967/    131B : FD 5E 10            		ld	e,(iy+SLV)		; b - Sustain
(1) 3968/    131E : BB                  		cp	e
(1) 3969/    131F : 38 0D               		jr	c,.dkadd		; if carry: add
(1) 3970/    1321 : 28 18               		jr	z,.dkyend		; if zero:  finish
(1) 3971/    1323 : CF                  		rst	8
(1) 3972/    1324 : FD 96 0C            		sub	(iy+DKY)		; substract decay rate
(1) 3973/    1327 : 38 12               		jr	c,.dkyend		; finish if wraped.
(1) 3974/    1329 : BB                  		cp	e			; compare level
(1) 3975/    132A : 38 0F               		jr	c,.dkyend		; and finish
(1) 3976/    132C : 18 08               		jr	.dksav
(1) 3977/    132E :                     .dkadd:
(1) 3978/    132E : FD 86 0C            		add	a,(iy+DKY)		;  (level) + (decay rate)
(1) 3979/    1331 : 38 08               		jr	c,.dkyend		; finish if wraped.
(1) 3980/    1333 : BB                  		cp	e			; compare level
(1) 3981/    1334 : 30 05               		jr	nc,.dkyend
(1) 3982/    1336 :                     .dksav:
(1) 3983/    1336 : FD 77 04            		ld	(iy+LEV),a		; save new level
(1) 3984/    1339 : 18 28               		jr	.vedlp
(1) 3985/    133B :                     .dkyend:
(1) 3986/    133B : CF                  		rst	8
(1) 3987/    133C : FD 73 04            		ld	(iy+LEV),e		; save last attack
(1) 3988/    133F : FD 36 18 04         		ld	(iy+MODE),100b		; and set to sustain
(1) 3989/    1343 : 18 1E               		jr	.vedlp
(1) 3990/    1345 :                     .chk4:
(1) 3991/    1345 : FE 04               		cp	100b			; Sustain phase
(1) 3992/    1347 : 20 1A               		jr	nz,.vedlp
(1) 3993/    1349 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3994/    134D : FD 7E 04            		ld	a,(iy+LEV)		; a - Level
(1) 3995/    1350 : CF                  		rst	8
(1) 3996/    1351 : FD 86 14            		add 	a,(iy+RRT)		; add Release Rate
(1) 3997/    1354 : 38 05               		jr	c,.killenv		; release done
(1) 3998/    1356 : FD 77 04            		ld	(iy+LEV),a		; set new Level
(1) 3999/    1359 : 18 08               		jr	.vedlp
(1) 4000/    135B :                     .killenv:
(1) 4001/    135B : FD 36 04 FF         		ld	(iy+LEV),-1		; Silence this channel
(1) 4002/    135F : FD 36 18 00         		ld	(iy+MODE),0		; Reset mode
(1) 4003/    1363 :                     .vedlp:
(1) 4004/    1363 :                     
(1) 4005/    1363 :                     	; ----------------------------
(1) 4006/    1363 :                     	; PSG UPDATE
(1) 4007/    1363 :                     	; ----------------------------
(1) 4008/    1363 : FD 7E 28            		ld	a,(iy+FLG)
(1) 4009/    1366 : B7                  		or	a
(1) 4010/    1367 : 28 72               		jr	z,.noupd
(1) 4011/    1369 : FD 36 28 00         		ld	(iy+FLG),0	; Reset until next one
(1) 4012/    136D : 59                  		ld	e,c
(1) 4013/    136E : 3A 83 1F            		ld	a,(psgHatMode)
(1) 4014/    1371 : 57                  		ld	d,a
(1) 4015/    1372 : E6 03               		and	011b
(1) 4016/    1374 : FE 03               		cp	011b
(1) 4017/    1376 : 20 1D               		jr	nz,.normal
(1) 4018/    1378 : CF                  		rst	8
(1) 4019/    1379 : 78                  		ld	a,b		; Channel 4?
(1) 4020/    137A : FE 03               		cp	3
(1) 4021/    137C : 28 13               		jr	z,.silnc_3
(1) 4022/    137E : FE 04               		cp	4
(1) 4023/    1380 : 20 18               		jr	nz,.do_nfreq
(1) 4024/    1382 : 3A 83 1F            		ld	a,(psgHatMode)
(1) 4025/    1385 : 57                  		ld	d,a
(1) 4026/    1386 : E6 03               		and	011b
(1) 4027/    1388 : CF                  		rst	8
(1) 4028/    1389 : FE 03               		cp	011b
(1) 4029/    138B : 20 30               		jr	nz,.vonly
(1) 4030/    138D : 1E C0               		ld	e,0C0h
(1) 4031/    138F : 18 09               		jr	.do_nfreq
(1) 4032/    1391 :                     .silnc_3:
(1) 4033/    1391 : 3E FF               		ld	a,-1
(1) 4034/    1393 : 18 32               		jr	.vlmuch
(1) 4035/    1395 :                     .normal:
(1) 4036/    1395 : 78                  		ld	a,b
(1) 4037/    1396 : FE 04               		cp	4
(1) 4038/    1398 : 28 23               		jr	z,.vonly
(1) 4039/    139A :                     .do_nfreq:
(1) 4040/    139A : FD 6E 1C            		ld	l,(iy+DTL)
(1) 4041/    139D : FD 66 20            		ld	h,(iy+DTH)
(1) 4042/    13A0 :                     
(1) 4043/    13A0 :                     	; freq effects go here
(1) 4044/    13A0 :                     	; (save e FIRST.)
(1) 4045/    13A0 :                     	;	push	de
(1) 4046/    13A0 :                     	;	pop	de
(1) 4047/    13A0 : 7D                  		ld	a,l		; Grab LSB 4 right bits
(1) 4048/    13A1 : E6 0F               		and	00001111b
(1) 4049/    13A3 : B3                  		or	e		; OR with channel set in e
(1) 4050/    13A4 : CF                  		rst	8
(1) 4051/    13A5 : DD 77 00            		ld	(ix),a		; write it
(1) 4052/    13A8 : 7D                  		ld	a,l		; Grab LSB 4 left bits
(1) 4053/    13A9 : 0F                  		rrca
(1) 4054/    13AA : 0F                  		rrca
(1) 4055/    13AB : 0F                  		rrca
(1) 4056/    13AC : 0F                  		rrca
(1) 4057/    13AD : E6 0F               		and	00001111b
(1) 4058/    13AF : 5F                  		ld	e,a
(1) 4059/    13B0 : 7C                  		ld	a,h		; Grab MSB bits
(1) 4060/    13B1 : CF                  		rst	8
(1) 4061/    13B2 : 07                  		rlca
(1) 4062/    13B3 : 07                  		rlca
(1) 4063/    13B4 : 07                  		rlca
(1) 4064/    13B5 : 07                  		rlca
(1) 4065/    13B6 : E6 30               		and	00110000b
(1) 4066/    13B8 : B3                  		or	e
(1) 4067/    13B9 : DD 77 00            		ld	(ix),a
(1) 4068/    13BC : CF                  		rst	8
(1) 4069/    13BD :                     .vonly:
(1) 4070/    13BD : FD 7E 30            		ld	a,(iy+PVOL)		; c - Level
(1) 4071/    13C0 : FD 86 04            		add	a,(iy+LEV)		; Add MASTER volume
(1) 4072/    13C3 : 30 02               		jr	nc,.vlmuch
(1) 4073/    13C5 : 3E FF               		ld	a,-1
(1) 4074/    13C7 :                     .vlmuch:
(1) 4075/    13C7 : CB 3F               		srl	a			; (Level >> 4)
(1) 4076/    13C9 : CB 3F               		srl	a
(1) 4077/    13CB : CB 3F               		srl	a
(1) 4078/    13CD : CF                  		rst	8
(1) 4079/    13CE : CB 3F               		srl	a
(1) 4080/    13D0 : E6 0F               		and	00001111b		; Filter volume value
(1) 4081/    13D2 : B1                  		or	c			; and OR with current channel
(1) 4082/    13D3 : F6 90               		or	90h			; Set volume-set mode
(1) 4084/    13D5 : DD 77 00            		ld	(ix),a			; *** WRITE volume
(1) 4086/    13D8 : FD 34 38            		inc	(iy+PTMR)		; Update general timer
(1) 4087/    13DB :                     .noupd:
(1) 4088/    13DB :                     	; ----------------------------
(1) 4089/    13DB : FD 2B               		dec	iy			; next COM to check (backwards)
(1) 4090/    13DD : 79                  		ld	a,c
(1) 4091/    13DE : CF                  		rst	8
(1) 4092/    13DF : D6 20               		sub	a,20h			; next PSG (backwards)
(1) 4093/    13E1 : 4F                  		ld	c,a
(1) 4094/    13E2 : 05                  		dec	b
(1) 4095/    13E3 : C2 90 12            		jp	nz,.vloop
(1) 4096/    13E6 : C9                  		ret
(1) 4097/    13E7 :                     
(1) 4098/    13E7 :                     ; ---------------------------------------------
(1) 4099/    13E7 :                     ; FM register writes
(1) 4100/    13E7 :                     ;
(1) 4101/    13E7 :                     ; Input:
(1) 4102/    13E7 :                     ; d - ctrl
(1) 4103/    13E7 :                     ; e - data
(1) 4104/    13E7 :                     ; ---------------------------------------------
(1) 4105/    13E7 :                     
(1) 4106/    13E7 :                     ; c - KeyID
(1) 4107/    13E7 :                     fm_autoreg:
(1) 4108/    13E7 : CB 51               		bit	2,c
(1) 4109/    13E9 : 20 0B               		jr	nz,fm_send_2
(1) 4110/    13EB :                     
(1) 4111/    13EB :                     ; Channels 1-3 and global registers
(1) 4112/    13EB :                     fm_send_1:
(1) 4113/    13EB : 7A                  		ld	a,d
(1) 4114/    13EC : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 4115/    13EF : 00                  		nop
(1) 4116/    13F0 : 7B                  		ld	a,e
(1) 4117/    13F1 : 32 01 40            		ld	(Zym_data_1),a
(1) 4118/    13F4 : 00                  		nop
(1) 4119/    13F5 : C9                  		ret
(1) 4120/    13F6 :                     ; Channels 4-6
(1) 4121/    13F6 :                     fm_send_2:
(1) 4122/    13F6 : 7A                  		ld	a,d
(1) 4123/    13F7 : 32 02 40            		ld	(Zym_ctrl_2),a
(1) 4124/    13FA : 00                  		nop
(1) 4125/    13FB : 7B                  		ld	a,e
(1) 4126/    13FC : 32 03 40            		ld	(Zym_data_2),a
(1) 4127/    13FF : 00                  		nop
(1) 4128/    1400 : C9                  		ret
(1) 4129/    1401 :                     
(1) 4130/    1401 :                     ; --------------------------------------------------------
(1) 4131/    1401 :                     ; brute-force WAVE ON/OFF playback
(1) 4132/    1401 :                     ; --------------------------------------------------------
(1) 4133/    1401 :                     
(1) 4134/    1401 :                     dac_on:
(1) 4135/    1401 : 3E 2B               		ld	a,2Bh
(1) 4136/    1403 : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 4137/    1406 : 3E 80               		ld	a,80h
(1) 4138/    1408 : 32 01 40            		ld	(Zym_data_1),a
(1) 4139/    140B : 3E D9               		ld 	a,zopcExx
(1) 4140/    140D : 32 08 00            		ld	(dac_me),a
(1) 4141/    1410 : 3E F5               		ld 	a,zopcPushAf
(1) 4142/    1412 : 32 20 00            		ld	(dac_fill),a
(1) 4143/    1415 : C9                  		ret
(1) 4144/    1416 :                     dac_off:
(1) 4145/    1416 : 3E 2B               		ld	a,2Bh
(1) 4146/    1418 : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 4147/    141B : 3E 00               		ld	a,00h
(1) 4148/    141D : 32 01 40            		ld	(Zym_data_1),a
(1) 4149/    1420 : 3E C9               		ld 	a,zopcRet
(1) 4150/    1422 : 32 08 00            		ld	(dac_me),a
(1) 4151/    1425 : 3E C9               		ld 	a,zopcRet
(1) 4152/    1427 : 32 20 00            		ld	(dac_fill),a
(1) 4153/    142A : C9                  		ret
(1) 4154/    142B :                     
(1) 4155/    142B :                     ; --------------------------------------------------------
(1) 4156/    142B :                     ; dac_play
(1) 4157/    142B :                     ;
(1) 4158/    142B :                     ; Plays a new sample
(1) 4159/    142B :                     ;
(1) 4160/    142B :                     ; NOTE:
(1) 4161/    142B :                     ; Set wave_Flags and wave_Pitch externally
(1) 4162/    142B :                     ; getting here.
(1) 4163/    142B :                     ; --------------------------------------------------------
(1) 4164/    142B :                     
(1) 4165/    142B :                     dac_play:
(1) 4166/    142B : F3                  		di
(1) 4167/    142C : CD 16 14            		call	dac_off
(1) 4168/    142F : D9                  		exx				; flip exx regs
(1) 4169/    1430 : 01 1D 00            		ld	bc,dWaveBuff>>8		; bc - WAVFIFO MSB
(1) 4170/    1433 : ED 5B 92 1F         		ld	de,(wave_Pitch)		; de - Pitch
(1) 4171/    1437 : 21 00 00            		ld	hl,(dWaveBuff&0FFh)<<8	; hl - WAVFIFO LSB pointer (xx.00)
(1) 4172/    143A : D9                  		exx				; move them back
(1) 4173/    143B : 2A 89 1F            		ld	hl,(wave_Start)
(1) 4174/    143E : 3A 8B 1F            		ld 	a,(wave_Start+2)
(1) 4175/    1441 : 22 98 1F            		ld	(dDacPntr),hl
(1) 4176/    1444 : 32 9A 1F            		ld	(dDacPntr+2),a
(1) 4177/    1447 : 2A 8C 1F            		ld	hl,(wave_Len)
(1) 4178/    144A : 3A 8E 1F            		ld 	a,(wave_Len+2)
(1) 4179/    144D : 22 9B 1F            		ld	(dDacCntr),hl
(1) 4180/    1450 : 32 9D 1F            		ld	(dDacCntr+2),a
(1) 4181/    1453 : AF                  		xor	a
(1) 4182/    1454 : 32 97 1F            		ld	(dDacFifoMid),a
(1) 4183/    1457 : CD 5F 14            		call	dac_refill
(1) 4184/    145A : CD 01 14            		call	dac_on
(1) 4185/    145D : FB                  		ei
(1) 4186/    145E : C9                  		ret
(1) 4187/    145F :                     
(1) 4188/    145F :                     ; --------------------------------------------------------
(1) 4189/    145F :                     
(1) 4190/    145F :                     dac_refill:
(1) 4191/    145F : CF                  		rst	8
(1) 4192/    1460 : C5                  		push	bc
(1) 4193/    1461 : D5                  		push	de
(1) 4194/    1462 : E5                  		push	hl
(1) 4195/    1463 : 3A 94 1F            		ld	a,(wave_Flags)	; Already finished?
(1) 4196/    1466 : FE 07               		cp	111b
(1) 4197/    1468 : D2 1E 15            		jp	nc,.dacfill_end
(1) 4198/    146B : 3A 9D 1F            		ld	a,(dDacCntr+2)	; Last bytes
(1) 4199/    146E : 2A 9B 1F            		ld	hl,(dDacCntr)
(1) 4200/    1471 : 01 80 00            		ld	bc,80h
(1) 4201/    1474 : 37                  		scf
(1) 4202/    1475 : 3F                  		ccf
(1) 4203/    1476 : ED 42               		sbc	hl,bc
(1) 4204/    1478 : DE 00               		sbc	a,0
(1) 4205/    147A : 32 9D 1F            		ld	(dDacCntr+2),a
(1) 4206/    147D : 22 9B 1F            		ld	(dDacCntr),hl
(1) 4207/    1480 : 16 1D               		ld	d,dWaveBuff>>8
(1) 4208/    1482 : B7                  		or	a
(1) 4209/    1483 : FA AD 14            		jp	m,.dac_over
(1) 4210/    1486 : 3A 97 1F            		ld	a,(dDacFifoMid)	; Update halfway value
(1) 4211/    1489 : 5F                  		ld	e,a
(1) 4212/    148A : C6 80               		add 	a,80h
(1) 4213/    148C : 32 97 1F            		ld	(dDacFifoMid),a
(1) 4214/    148F : 2A 98 1F            		ld	hl,(dDacPntr)
(1) 4215/    1492 : 3A 9A 1F            		ld	a,(dDacPntr+2)
(1) 4216/    1495 : CD C9 11            		call	transferRom	; *** ROM ACCESS ***
(1) 4217/    1498 : 2A 98 1F            		ld	hl,(dDacPntr)
(1) 4218/    149B : 3A 9A 1F            		ld	a,(dDacPntr+2)
(1) 4219/    149E : 01 80 00            		ld	bc,80h
(1) 4220/    14A1 : 09                  		add	hl,bc
(1) 4221/    14A2 : CE 00               		adc	a,0
(1) 4222/    14A4 : 22 98 1F            		ld	(dDacPntr),hl
(1) 4223/    14A7 : 32 9A 1F            		ld	(dDacPntr+2),a
(1) 4224/    14AA : C3 21 15            		jp	.dacfill_ret
(1) 4225/    14AD :                     
(1) 4226/    14AD :                     ; NOTE:
(1) 4227/    14AD :                     ; This doesn't finish at the exact END point.
(1) 4228/    14AD :                     .dac_over:
(1) 4229/    14AD : 16 1D               		ld	d,dWaveBuff>>8
(1) 4230/    14AF : 3A 94 1F            		ld	a,(wave_Flags)	; LOOP enabled?
(1) 4231/    14B2 : E6 01               		and	001b
(1) 4232/    14B4 : C2 D7 14            		jp	nz,.dacfill_loop
(1) 4233/    14B7 : 7D                  		ld	a,l
(1) 4234/    14B8 : C6 80               		add	a,80h
(1) 4235/    14BA : 4F                  		ld	c,a
(1) 4236/    14BB : 06 00               		ld	b,0
(1) 4237/    14BD : C5                  		push	bc
(1) 4238/    14BE : 3A 97 1F            		ld	a,(dDacFifoMid)
(1) 4239/    14C1 : 5F                  		ld	e,a
(1) 4240/    14C2 : C6 80               		add	a,80h
(1) 4241/    14C4 : 32 97 1F            		ld	(dDacFifoMid),a
(1) 4242/    14C7 : C1                  		pop	bc
(1) 4243/    14C8 : 79                  		ld	a,c
(1) 4244/    14C9 : B0                  		or	b
(1) 4245/    14CA : 28 52               		jr	z,.dacfill_end
(1) 4246/    14CC : 2A 98 1F            		ld	hl,(dDacPntr)
(1) 4247/    14CF : 3A 9A 1F            		ld	a,(dDacPntr+2)
(1) 4248/    14D2 : CD C9 11            		call	transferRom	; *** ROM ACCESS ***
(1) 4249/    14D5 : 18 47               		jr	.dacfill_end
(1) 4250/    14D7 :                     .dacfill_loop:
(1) 4251/    14D7 :                     	; loop sample
(1) 4252/    14D7 : C5                  		push	bc
(1) 4253/    14D8 : D5                  		push	de
(1) 4254/    14D9 : 3A 91 1F            		ld	a,(wave_Loop+2)
(1) 4255/    14DC : 4F                  		ld	c,a
(1) 4256/    14DD : ED 5B 8F 1F         		ld	de,(wave_Loop)
(1) 4257/    14E1 : 2A 89 1F            		ld	hl,(wave_Start)
(1) 4258/    14E4 : 3A 8B 1F            		ld 	a,(wave_Start+2)
(1) 4259/    14E7 : 81                  		add	a,c
(1) 4260/    14E8 : 19                  		add	hl,de
(1) 4261/    14E9 : CE 00               		adc	a,0
(1) 4262/    14EB : 22 98 1F            		ld	(dDacPntr),hl
(1) 4263/    14EE : 32 9A 1F            		ld	(dDacPntr+2),a
(1) 4264/    14F1 : 2A 8C 1F            		ld	hl,(wave_Len)
(1) 4265/    14F4 : 3A 8E 1F            		ld 	a,(wave_Len+2)
(1) 4266/    14F7 : 91                  		sub	a,c
(1) 4267/    14F8 : 37                  		scf
(1) 4268/    14F9 : 3F                  		ccf
(1) 4269/    14FA : ED 52               		sbc	hl,de
(1) 4270/    14FC : DE 00               		sbc	a,0
(1) 4271/    14FE : 22 9B 1F            		ld	(dDacCntr),hl
(1) 4272/    1501 : 32 9D 1F            		ld	(dDacCntr+2),a
(1) 4273/    1504 : D1                  		pop	de
(1) 4274/    1505 : C1                  		pop	bc
(1) 4275/    1506 : 78                  		ld	a,b
(1) 4276/    1507 : B1                  		or	c
(1) 4277/    1508 : 28 17               		jr	z,.dacfill_ret
(1) 4278/    150A : 3A 97 1F            		ld	a,(dDacFifoMid)
(1) 4279/    150D : 5F                  		ld	e,a
(1) 4280/    150E : C6 80               		add	a,80h
(1) 4281/    1510 : 32 97 1F            		ld	(dDacFifoMid),a
(1) 4282/    1513 : 2A 98 1F            		ld	hl,(dDacPntr)
(1) 4283/    1516 : 3A 9A 1F            		ld	a,(dDacPntr+2)
(1) 4284/    1519 : CD C9 11            		call	transferRom	; *** ROM ACCESS ***
(1) 4285/    151C : 18 03               		jr	.dacfill_ret
(1) 4286/    151E :                     .dacfill_end:
(1) 4287/    151E : CD 16 14            		call	dac_off		; DAC finished
(1) 4288/    1521 :                     .dacfill_ret:
(1) 4289/    1521 : E1                  		pop	hl
(1) 4290/    1522 : D1                  		pop	de
(1) 4291/    1523 : C1                  		pop	bc
(1) 4292/    1524 : C9                  		ret
(1) 4293/    1525 :                     
(1) 4294/    1525 :                     ; ----------------------------------------------------------------
(1) 4295/    1525 :                     ; Two purposes:
(1) 4296/    1525 :                     ;
(1) 4297/    1525 :                     ; Set the BANK to the very last part of memory for the
(1) 4298/    1525 :                     ; transferRom to read from RAM
(1) 4299/    1525 :                     ;
(1) 4300/    1525 :                     ; On 32X, sets the bank out of the ROM reading areas due
(1) 4301/    1525 :                     ; to a conflict with the PSG
(1) 4302/    1525 :                     ;
(1) 4303/    1525 :                     ; Uses:
(1) 4304/    1525 :                     ; hl,b
(1) 4305/    1525 :                     ; ----------------------------------------------------------------
(1) 4306/    1525 :                     
(1) 4307/    1525 :                     gema_lastbank:
(1) 4308/    1525 : 21 00 60            		ld	hl,6000h
(1) 4309/    1528 : 06 09               		ld	b,9		; 9 bits
(1) 4310/    152A :                     .write:
(1) 4311/    152A : 36 01               		ld	(hl),1
(1) 4312/    152C : 10 FC               		djnz	.write
(1) 4313/    152E : CF                  		rst	8
(1) 4314/    152F : C9                  		ret
(1) 4315/    1530 :                     
(1) 4316/    1530 :                     ; ====================================================================
(1) 4317/    1530 :                     ; ----------------------------------------------------------------
(1) 4318/    1530 :                     ; Tables
(1) 4319/    1530 :                     ; ----------------------------------------------------------------
(1) 4320/    1530 :                     
(1) 4321/    1530 : 84 02               fmFreq_List:	dw 644
(1) 4322/    1532 : A9 02               		dw 681
(1) 4323/    1534 : D2 02               		dw 722
(1) 4324/    1536 : FD 02               		dw 765
(1) 4325/    1538 : 2A 03               		dw 810
(1) 4326/    153A : 5A 03               		dw 858
(1) 4327/    153C : 8E 03               		dw 910
(1) 4328/    153E : C4 03               		dw 964
(1) 4329/    1540 : FD 03               		dw 1021
(1) 4330/    1542 : 39 04               		dw 1081
(1) 4331/    1544 : 7A 04               		dw 1146
(1) 4332/    1546 : BE 04               		dw 1214
(1) 4333/    1548 :                     psgFreq_List:
(1) 4334/    1548 :                     ; 		dw -1		; C-0 00
(1) 4335/    1548 :                     ; 		dw -1
(1) 4336/    1548 :                     ; 		dw -1
(1) 4337/    1548 :                     ; 		dw -1
(1) 4338/    1548 :                     ; 		dw -1
(1) 4339/    1548 :                     ; 		dw -1
(1) 4340/    1548 :                     ; 		dw -1
(1) 4341/    1548 :                     ; 		dw -1
(1) 4342/    1548 :                     ; 		dw -1
(1) 4343/    1548 :                     ; 		dw -1
(1) 4344/    1548 :                     ; 		dw -1
(1) 4345/    1548 :                     ; 		dw -1
(1) 4346/    1548 :                     ; 		dw -1		; C-1 0C
(1) 4347/    1548 :                     ; 		dw -1
(1) 4348/    1548 :                     ; 		dw -1
(1) 4349/    1548 :                     ; 		dw -1
(1) 4350/    1548 :                     ; 		dw -1
(1) 4351/    1548 :                     ; 		dw -1
(1) 4352/    1548 :                     ; 		dw -1
(1) 4353/    1548 :                     ; 		dw -1
(1) 4354/    1548 :                     ; 		dw -1
(1) 4355/    1548 :                     ; 		dw -1
(1) 4356/    1548 :                     ; 		dw -1
(1) 4357/    1548 :                     ; 		dw -1
(1) 4358/    1548 :                     ; 		dw -1		; C-2 18
(1) 4359/    1548 :                     ; 		dw -1
(1) 4360/    1548 :                     ; 		dw -1
(1) 4361/    1548 :                     ; 		dw -1
(1) 4362/    1548 :                     ; 		dw -1
(1) 4363/    1548 :                     ; 		dw -1
(1) 4364/    1548 :                     ; 		dw -1
(1) 4365/    1548 :                     ; 		dw -1
(1) 4366/    1548 :                     ; 		dw -1
(1) 4367/    1548 :                     ; 		dw -1
(1) 4368/    1548 :                     ; 		dw -1
(1) 4369/    1548 :                     ; 		dw -1
(1) 4370/    1548 : FF FF               		dw -1		; C-3 24
(1) 4371/    154A : FF FF               		dw -1
(1) 4372/    154C : FF FF               		dw -1
(1) 4373/    154E : FF FF               		dw -1
(1) 4374/    1550 : FF FF               		dw -1
(1) 4375/    1552 : FF FF               		dw -1
(1) 4376/    1554 : FF FF               		dw -1
(1) 4377/    1556 : FF FF               		dw -1
(1) 4378/    1558 : FF FF               		dw -1
(1) 4379/    155A : F8 03               		dw 3F8h
(1) 4380/    155C : BF 03               		dw 3BFh
(1) 4381/    155E : 89 03               		dw 389h
(1) 4382/    1560 : 56 03               		dw 356h		; C-4 30
(1) 4383/    1562 : 26 03               		dw 326h
(1) 4384/    1564 : F9 02               		dw 2F9h
(1) 4385/    1566 : CE 02               		dw 2CEh
(1) 4386/    1568 : A5 02               		dw 2A5h
(1) 4387/    156A : 80 02               		dw 280h
(1) 4388/    156C : 5C 02               		dw 25Ch
(1) 4389/    156E : 3A 02               		dw 23Ah
(1) 4390/    1570 : 1A 02               		dw 21Ah
(1) 4391/    1572 : FB 01               		dw 1FBh
(1) 4392/    1574 : DF 01               		dw 1DFh
(1) 4393/    1576 : C4 01               		dw 1C4h
(1) 4394/    1578 : AB 01               		dw 1ABh		; C-5 3C
(1) 4395/    157A : 93 01               		dw 193h
(1) 4396/    157C : 7D 01               		dw 17Dh
(1) 4397/    157E : 67 01               		dw 167h
(1) 4398/    1580 : 53 01               		dw 153h
(1) 4399/    1582 : 40 01               		dw 140h
(1) 4400/    1584 : 2E 01               		dw 12Eh
(1) 4401/    1586 : 1D 01               		dw 11Dh
(1) 4402/    1588 : 0D 01               		dw 10Dh
(1) 4403/    158A : FE 00               		dw 0FEh
(1) 4404/    158C : EF 00               		dw 0EFh
(1) 4405/    158E : E2 00               		dw 0E2h
(1) 4406/    1590 : D6 00               		dw 0D6h		; C-6 48
(1) 4407/    1592 : C9 00               		dw 0C9h
(1) 4408/    1594 : BE 00               		dw 0BEh
(1) 4409/    1596 : B4 00               		dw 0B4h
(1) 4410/    1598 : A9 00               		dw 0A9h
(1) 4411/    159A : A0 00               		dw 0A0h
(1) 4412/    159C : 97 00               		dw 097h
(1) 4413/    159E : 8F 00               		dw 08Fh
(1) 4414/    15A0 : 87 00               		dw 087h
(1) 4415/    15A2 : 7F 00               		dw 07Fh
(1) 4416/    15A4 : 78 00               		dw 078h
(1) 4417/    15A6 : 71 00               		dw 071h
(1) 4418/    15A8 : 6B 00               		dw 06Bh		; C-7 54
(1) 4419/    15AA : 65 00               		dw 065h
(1) 4420/    15AC : 5F 00               		dw 05Fh
(1) 4421/    15AE : 5A 00               		dw 05Ah
(1) 4422/    15B0 : 55 00               		dw 055h
(1) 4423/    15B2 : 50 00               		dw 050h
(1) 4424/    15B4 : 4B 00               		dw 04Bh
(1) 4425/    15B6 : 47 00               		dw 047h
(1) 4426/    15B8 : 43 00               		dw 043h
(1) 4427/    15BA : 40 00               		dw 040h
(1) 4428/    15BC : 3C 00               		dw 03Ch
(1) 4429/    15BE : 39 00               		dw 039h
(1) 4430/    15C0 : 36 00               		dw 036h		; C-8 60
(1) 4431/    15C2 : 33 00               		dw 033h
(1) 4432/    15C4 : 30 00               		dw 030h
(1) 4433/    15C6 : 2D 00               		dw 02Dh
(1) 4434/    15C8 : 2B 00               		dw 02Bh
(1) 4435/    15CA : 28 00               		dw 028h
(1) 4436/    15CC : 26 00               		dw 026h
(1) 4437/    15CE : 24 00               		dw 024h
(1) 4438/    15D0 : 22 00               		dw 022h
(1) 4439/    15D2 : 20 00               		dw 020h
(1) 4440/    15D4 : 1F 00               		dw 01Fh
(1) 4441/    15D6 : 1D 00               		dw 01Dh
(1) 4442/    15D8 : 1B 00               		dw 01Bh		; C-9 6C
(1) 4443/    15DA : 1A 00               		dw 01Ah
(1) 4444/    15DC : 18 00               		dw 018h
(1) 4445/    15DE : 17 00               		dw 017h
(1) 4446/    15E0 : 16 00               		dw 016h
(1) 4447/    15E2 : 15 00               		dw 015h
(1) 4448/    15E4 : 13 00               		dw 013h
(1) 4449/    15E6 : 12 00               		dw 012h
(1) 4450/    15E8 : 11 00               		dw 011h
(1) 4451/    15EA : 10 00                		dw 010h
(1) 4452/    15EC : 09 00                		dw 009h
(1) 4453/    15EE : 08 00                		dw 008h
(1) 4454/    15F0 : 06 00               		dw 006h
(1) 4455/    15F2 : A6 17               fmcach_list:	dw fmcach_1
(1) 4456/    15F4 : CE 17               		dw fmcach_2
(1) 4457/    15F6 : F6 17               		dw fmcach_3
(1) 4458/    15F8 : 00 00               		dw 0		; <-- skipped
(1) 4459/    15FA : 1E 18               		dw fmcach_4
(1) 4460/    15FC : 46 18               		dw fmcach_5
(1) 4461/    15FE : 6E 18               		dw fmcach_6
(1) 4462/    1600 :                     
(1) 4463/    1600 :                     ; ----------------------------------------
(1) 4464/    1600 :                     ; DAC and PWM
(1) 4465/    1600 :                     ;
(1) 4466/    1600 :                     ; DAC base: 16000hz
(1) 4467/    1600 :                     ; PWM base: 22050hz
(1) 4468/    1600 :                     ; ----------------------------------------
(1) 4469/    1600 :                     wavFreq_List:
(1) 4470/    1600 :                     	;   C     C#    D     D#    E     F     F#    G     G#    A     A#    B
(1) 4471/    1600 :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-0
(1) 4472/    1600 :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-1
(1) 4473/    1600 :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0036h,003Bh	; x-2
(1) 4474/    1600 : 3E 00 43 00 46 00   	dw 003Eh,0043h,0046h,0049h,004Eh,0054h,0058h,005Eh,0063h,0068h,0070h,0075h	; x-3
             1606 : 49 00 4E 00 54 00 
             160C : 58 00 5E 00 63 00 
             1612 : 68 00 70 00 75 00 
(1) 4475/    1618 : 85 00 87 00 8C 00   	dw 0085h,0087h,008Ch,009Ah,00A4h,00ADh,00B2h,00C0h,00CCh,00D7h,00E6h,00F0h	; x-4
             161E : 9A 00 A4 00 AD 00 
             1624 : B2 00 C0 00 CC 00 
             162A : D7 00 E6 00 F0 00 
(1) 4476/    1630 : 00 01 10 01 20 01   	dw 0100h,0110h,0120h,012Eh,0147h,015Ah,016Ah,017Fh,0191h,01ACh,01C2h,01E0h	; x-5
             1636 : 2E 01 47 01 5A 01 
             163C : 6A 01 7F 01 91 01 
             1642 : AC 01 C2 01 E0 01 
(1) 4477/    1648 : F8 01 10 02 40 02   	dw 01F8h,0210h,0240h,0260h,0280h,02A0h,02D0h,02F8h,0320h,0350h,0380h,03C0h	; x-6
             164E : 60 02 80 02 A0 02 
             1654 : D0 02 F8 02 20 03 
             165A : 50 03 80 03 C0 03 
(1) 4478/    1660 : 00 01 00 01 00 01   	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-7
             1666 : 00 01 00 01 00 01 
             166C : 00 01 00 01 00 01 
             1672 : 00 01 00 01 00 01 
(1) 4479/    1678 :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-8
(1) 4480/    1678 :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-9
(1) 4481/    1678 :                     
(1) 4482/    1678 :                     ; ----------------------------------------
(1) 4483/    1678 :                     ; SegaCD PCM ONLY
(1) 4484/    1678 :                     ;
(1) 4485/    1678 :                     ; PCM base: 32000hz
(1) 4486/    1678 :                     ; ----------------------------------------
(1) 4487/    1678 :                     wavFreq_CdPcm:
(1) 4488/    1678 :                     	;     C     C#     D      D#     E      F      F#     G      G#     A      A#     B
(1) 4489/    1678 :                     ; 	dw  0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h	; x-0
(1) 4490/    1678 :                     ; 	dw  0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h	; x-1
(1) 4491/    1678 :                     ; 	dw  0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h	; x-2  4000 unchecked
(1) 4492/    1678 : F8 01 14 02 3C 02   	dw  01F8h, 0214h, 023Ch, 0258h, 027Ch, 02A0h, 02C8h, 02F4h, 031Ch, 0348h, 037Ch, 03B0h	; x-3  8000 ok
             167E : 58 02 7C 02 A0 02 
             1684 : C8 02 F4 02 1C 03 
             168A : 48 03 7C 03 B0 03 
(1) 4493/    1690 : F0 03 24 04 68 04   	dw  03F0h, 0424h, 0468h, 04A8h, 04ECh, 0540h, 0590h, 05E4h, 063Ch, 0698h, 0704h, 0760h	; x-4 16000 ok
             1696 : A8 04 EC 04 40 05 
             169C : 90 05 E4 05 3C 06 
             16A2 : 98 06 04 07 60 07 
(1) 4494/    16A8 : DC 07 48 08 D4 08   	dw  07DCh, 0848h, 08D4h, 0960h, 09F0h, 0A64h, 0B04h, 0BAAh, 0C60h, 0D18h, 0DE4h, 0EB6h	; x-5 32000 ok
             16AE : 60 09 F0 09 64 0A 
             16B4 : 04 0B AA 0B 60 0C 
             16BA : 18 0D E4 0D B6 0E 
(1) 4495/    16C0 : B0 0F 74 10 84 11   	dw  0FB0h, 1074h, 1184h, 1280h, 139Ch, 14C8h, 1624h, 174Ch, 18DCh, 1A38h, 1BE0h, 1D94h	; x-6 64000 unstable
             16C6 : 80 12 9C 13 C8 14 
             16CC : 24 16 4C 17 DC 18 
             16D2 : 38 1A E0 1B 94 1D 
(1) 4496/    16D8 :                     ; 	dw  1F64h, 20FCh, 2330h, 2524h, 2750h, 29B4h, 2C63h, 2F63h, 31E0h, 347Bh, 377Bh, 3B41h	; x-7 128000 bad
(1) 4497/    16D8 :                     ; 	dw  3EE8h, 4206h, 4684h, 4A5Ah, 4EB5h, 5379h, 58E1h, 5DE0h, 63C0h, 68FFh, 6EFFh, 783Ch	; x-8 256000 bad
(1) 4498/    16D8 :                     ; 	dw  7FC2h, 83FCh, 8D14h, 9780h,0AA5Dh,0B1F9h,   -1 ,   -1 ,   -1 ,   -1 ,   -1 ,   -1 	; x-9 bad
(1) 4499/    16D8 :                     
(1) 4500/    16D8 :                     ; ====================================================================
(1) 4501/    16D8 :                     ; ----------------------------------------------------------------
(1) 4502/    16D8 :                     ; MASTER buffers list
(1) 4503/    16D8 :                     ;
(1) 4504/    16D8 :                     ; dw track_buffer
(1) 4505/    16D8 :                     ; dw channel_list,block_cache,header_cache,track_cache
(1) 4506/    16D8 :                     ;
(1) 4507/    16D8 :                     ; (track_cache: 1BIT SIZES ONLY, ALIGNED)
(1) 4508/    16D8 :                     ; ----------------------------------------------------------------
(1) 4509/    16D8 :                     
(1) 4510/    16D8 :                     nikona_BuffList:
(1) 4511/    16D8 : F6 18 B6 19 96 18   	dw trkBuff_0,trkBlks_0,trkHdrs_0,trkCach_0
             16DE : 00 1F             
(1) 4512/    16E0 : 36 19 BE 19 B6 18   	dw trkBuff_1,trkBlks_1,trkHdrs_1,trkCach_1
             16E6 : 20 1F             
(1) 4513/    16E8 : 76 19 C6 19 D6 18   	dw trkBuff_2,trkBlks_2,trkHdrs_2,trkCach_2
             16EE : 40 1F             
(1) 4514/    16F0 :                     ; 	dw trkBuff_3,trkBlks_3,trkHdrs_3,trkCach_3
(1) 4515/    16F0 :                     nikona_BuffList_e:
(1) 4516/    16F0 : FF FF               	dw -1	; ENDOFLIST
(1) 4517/    16F2 :                     
(1) 4518/    16F2 :                     ; ====================================================================
(1) 4519/    16F2 :                     ; ----------------------------------------------------------------
(1) 4520/    16F2 :                     ; Buffer section
(1) 4521/    16F2 :                     ; ----------------------------------------------------------------
(1) 4522/    16F2 :                     
(1) 4523/    16F2 : 00 00 00 00 00 00   pcmcom:	db 00h,00h,00h,00h,00h,00h,00h,00h	; 0 - Playback bits: %0000PCOK /Pitchbend/keyCut/keyOff/KeyOn
             16F8 : 00 00             
(1) 4524/    16FA : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 8 - Pitch MSB
             1700 : 00 00             
(1) 4525/    1702 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 16 - Pitch LSB
             1708 : 00 00             
(1) 4526/    170A : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 24 - Volume
             1710 : 00 00             
(1) 4527/    1712 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 32 - Panning %RRRRLLLL
             1718 : 00 00             
(1) 4528/    171A : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 40 - LoopEnable bit | 24-bit sample location in Sub-CPU area
             1720 : 00 00             
(1) 4529/    1722 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 48
             1728 : 00 00             
(1) 4530/    172A : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 56
             1730 : 00 00             
(1) 4531/    1732 :                     
(1) 4532/    1732 : 00 00 00 00 00 00   pwmcom:	db 00h,00h,00h,00h,00h,00h,00h,00h	; 0 - Playback bits: %0000PCOK Pitchbend/keyCut/keyOff/KeyOn
             1738 : 00 00             
(1) 4533/    173A : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 8 - Volume | Pitch MSB
             1740 : 00 00             
(1) 4534/    1742 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 16 - Pitch LSB
             1748 : 00 00             
(1) 4535/    174A : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 24 - Flags+MSB bits of sample %SlLRxxxx Stereo/Loop/Left/Right
             1750 : 00 00             
(1) 4536/    1752 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 32 -
             1758 : 00 00             
(1) 4537/    175A : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h
             1760 : 00 00             
(1) 4538/    1762 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h
             1768 : 00 00             
(1) 4539/    176A :                     
(1) 4540/    176A : 00 00 00 00         psgcom:	db 00h,00h,00h,00h	;  0 - command 1 = key on, 2 = key off, 4 = stop snd
(1) 4541/    176E : FF FF FF FF         	db -1, -1, -1, -1	;  4 - output level attenuation (%llll.0000, -1 = silent)
(1) 4542/    1772 : 00 00 00 00         	db 00h,00h,00h,00h	;  8 - attack rate (START)
(1) 4543/    1776 : 00 00 00 00         	db 00h,00h,00h,00h	; 12 - decay rate
(1) 4544/    177A : 00 00 00 00         	db 00h,00h,00h,00h	; 16 - sustain level attenuation (MAXIMUM)
(1) 4545/    177E : 00 00 00 00         	db 00h,00h,00h,00h	; 20 - release rate
(1) 4546/    1782 : 00 00 00 00         	db 00h,00h,00h,00h	; 24 - envelope mode 0 = off, 1 = attack, 2 = decay, 3 = sustain
(1) 4547/    1786 : 00 00 00 00         	db 00h,00h,00h,00h	; 28 - freq bottom 4 bits
(1) 4548/    178A : 00 00 00 00         	db 00h,00h,00h,00h	; 32 - freq upper 6 bits
(1) 4549/    178E : 00 00 00 00         	db 00h,00h,00h,00h	; 36 - attack level attenuation
(1) 4550/    1792 : 00 00 00 00         	db 00h,00h,00h,00h	; 40 - flags to indicate hardware should be updated
(1) 4551/    1796 : 00 00 00 00         	db 00h,00h,00h,00h	; 44 - timer for sustain
(1) 4552/    179A : 00 00 00 00         	db 00h,00h,00h,00h	; 48 - MAX Volume
(1) 4553/    179E : 00 00 00 00         	db 00h,00h,00h,00h	; 52 - Vibrato value
(1) 4554/    17A2 : 00 00 00 00         	db 00h,00h,00h,00h	; 56 - General timer
(1) 4555/    17A6 :                     ; FM instrument storage
(1) 4556/    17A6 :                     fmcach_1	ds 28h
(1) 4557/    17CE :                     fmcach_2	ds 28h
(1) 4558/    17F6 :                     fmcach_3	ds 28h
(1) 4559/    181E :                     fmcach_4	ds 28h
(1) 4560/    1846 :                     fmcach_5	ds 28h
(1) 4561/    186E :                     fmcach_6	ds 28h
(1) 4562/    1896 :                     
(1) 4563/    1896 :                     ; --------------------------------------------------------
(1) 4564/    1896 :                     ; * USER customizable section *
(1) 4565/    1896 :                     ;
(1) 4566/    1896 :                     ; trkCach's MUST BE 00h ALIGNED.
(1) 4567/    1896 :                     ; --------------------------------------------------------
(1) 4568/    1896 :                     
(1) 4569/    1896 :                     trkHdrs_0	ds 8*4			; dw point,rowcntr
(1) 4570/    18B6 :                     trkHdrs_1	ds 8*4
(1) 4571/    18D6 :                     trkHdrs_2	ds 8*4
(1) 4572/    18F6 :                     trkBuff_0	ds trk_ChnIndx+MAX_TRKINDX
(1) 4573/    1936 :                     trkBuff_1	ds trk_ChnIndx+MAX_TRKINDX
(1) 4574/    1976 :                     trkBuff_2	ds trk_ChnIndx+MAX_TRKINDX
(1) 4575/    19B6 :                     trkBlks_0	ds 8
(1) 4576/    19BE :                     trkBlks_1	ds 8
(1) 4577/    19C6 :                     trkBlks_2	ds 8
(1) 4578/    19CE :                     
(1) 4579/    19CE :                     ; ====================================================================
(1) 4580/    19CE :                     ; --------------------------------------------------------
(1) 4581/    19CE :                     ; Channel table struct:
(1) 4582/    19CE :                     ; 00  - DIRECT Linked channel from trkChnls
(1) 4583/    19CE :                     ; 02  - 00h-7Fh: Priority level or 80h+ Silence request (chip ID)
(1) 4584/    19CE :                     ; 03  - MASTER Volume for this channel
(1) 4585/    19CE :                     ; 04  - FREE
(1) 4586/    19CE :                     ; 05  - Chip index (YM2612: KEY index)
(1) 4587/    19CE :                     ; 06  - Frequency list index (YM2612: %oooiiiii oct|index)
(1) 4588/    19CE :                     ; 07  - Pitchbend add/sub
(1) 4589/    19CE :                     ; 08  - Current volume: 00-max
(1) 4590/    19CE :                     ; 09  - Stored effect setting
(1) 4591/    19CE :                     ; 0A  - FREE
(1) 4592/    19CE :                     ; 0B  - FREE
(1) 4593/    19CE :                     ; 0C+ - Misc. settings for the current chip
(1) 4594/    19CE :                     ; 10+ - Intrument data
(1) 4595/    19CE :                     ;
(1) 4596/    19CE :                     ; PSG   80h
(1) 4597/    19CE :                     ; PSGN  90h
(1) 4598/    19CE :                     ; FM   0A0h
(1) 4599/    19CE :                     ; FM3  0B0h
(1) 4600/    19CE :                     ; DAC  0C0h
(1) 4601/    19CE :                     ; PCM  0D0h
(1) 4602/    19CE :                     ; PWM  0E0h
(1) 4603/    19CE :                     ; --------------------------------------------------------
(1) 4604/    19CE :                     
(1) 4605/    19CE : 10 00               tblList:	dw tblPSG-tblList		;  80h
(1) 4606/    19D0 : 5A 80               		dw tblPSGN-tblList|8000h	;  90h *
(1) 4607/    19D2 : 72 00               		dw tblFM-tblList		; 0A0h
(1) 4608/    19D4 : D2 80               		dw tblFM3-tblList|8000h		; 0B0h *
(1) 4609/    19D6 : EA 80               		dw tblFM6-tblList|8000h		; 0C0h *
(1) 4610/    19D8 : 04 01               		dw tblPCM-tblList		; 0D0h
(1) 4611/    19DA : C6 01               		dw tblPWM-tblList		; 0E0h
(1) 4612/    19DC : 00 00               		dw 0
(1) 4613/    19DE : 00 00 00 00 00 00   tblPSG:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             19E4 : 00 00             
(1) 4614/    19E6 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             19EC : 00 00             
(1) 4615/    19EE : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             19F4 : 00 00             
(1) 4616/    19F6 : 00 00 00 00 00 01   		db 00h,00h,00h,00h,00h,01h,00h,00h	; Channel 2
             19FC : 00 00             
(1) 4617/    19FE : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A04 : 00 00             
(1) 4618/    1A06 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A0C : 00 00             
(1) 4619/    1A0E : 00 00 00 00 00 02   		db 00h,00h,00h,00h,00h,02h,00h,00h	; Channel 3
             1A14 : 00 00             
(1) 4620/    1A16 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A1C : 00 00             
(1) 4621/    1A1E : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A24 : 00 00             
(1) 4622/    1A26 : FF FF               		dw -1	; end-of-list
(1) 4623/    1A28 : 00 00 00 00 00 03   tblPSGN:	db 00h,00h,00h,00h,00h,03h,00h,03h	; Noise
             1A2E : 00 03             
(1) 4624/    1A30 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A36 : 00 00             
(1) 4625/    1A38 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A3E : 00 00             
(1) 4626/    1A40 : 00 00 00 00 00 00   tblFM:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             1A46 : 00 00             
(1) 4627/    1A48 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A4E : 00 00             
(1) 4628/    1A50 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A56 : 00 00             
(1) 4629/    1A58 : 00 00 00 00 00 01   		db 00h,00h,00h,00h,00h,01h,00h,00h	; Channel 2
             1A5E : 00 00             
(1) 4630/    1A60 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A66 : 00 00             
(1) 4631/    1A68 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A6E : 00 00             
(1) 4632/    1A70 : 00 00 00 00 00 04   		db 00h,00h,00h,00h,00h,04h,00h,00h	; Channel 4 <--
             1A76 : 00 00             
(1) 4633/    1A78 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A7E : 00 00             
(1) 4634/    1A80 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A86 : 00 00             
(1) 4635/    1A88 : 00 00 00 00 00 05   		db 00h,00h,00h,00h,00h,05h,00h,00h	; Channel 5
             1A8E : 00 00             
(1) 4636/    1A90 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A96 : 00 00             
(1) 4637/    1A98 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A9E : 00 00             
(1) 4638/    1AA0 : 00 00 00 00 00 02   tblFM3:		db 00h,00h,00h,00h,00h,02h,00h,00h	; Channel 3 <--
             1AA6 : 00 00             
(1) 4639/    1AA8 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1AAE : 00 00             
(1) 4640/    1AB0 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1AB6 : 00 00             
(1) 4641/    1AB8 : 00 00 00 00 00 06   tblFM6:		db 00h,00h,00h,00h,00h,06h,00h,00h	; Channel 6 <--
             1ABE : 00 00             
(1) 4642/    1AC0 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1AC6 : 00 00             
(1) 4643/    1AC8 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1ACE : 00 00             
(1) 4644/    1AD0 : FF FF               		dw -1	; end-of-list
(1) 4645/    1AD2 : 00 00 00 00 00 00   tblPCM:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             1AD8 : 00 00             
(1) 4646/    1ADA : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1AE0 : 00 00             
(1) 4647/    1AE2 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1AE8 : 00 00             
(1) 4648/    1AEA : 00 00 00 00 00 01   		db 00h,00h,00h,00h,00h,01h,00h,00h	; Channel 2
             1AF0 : 00 00             
(1) 4649/    1AF2 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1AF8 : 00 00             
(1) 4650/    1AFA : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B00 : 00 00             
(1) 4651/    1B02 : 00 00 00 00 00 02   		db 00h,00h,00h,00h,00h,02h,00h,00h	; Channel 3
             1B08 : 00 00             
(1) 4652/    1B0A : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B10 : 00 00             
(1) 4653/    1B12 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B18 : 00 00             
(1) 4654/    1B1A : 00 00 00 00 00 03   		db 00h,00h,00h,00h,00h,03h,00h,00h	; Channel 4
             1B20 : 00 00             
(1) 4655/    1B22 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B28 : 00 00             
(1) 4656/    1B2A : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B30 : 00 00             
(1) 4657/    1B32 : 00 00 00 00 00 04   		db 00h,00h,00h,00h,00h,04h,00h,00h	; Channel 5
             1B38 : 00 00             
(1) 4658/    1B3A : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B40 : 00 00             
(1) 4659/    1B42 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B48 : 00 00             
(1) 4660/    1B4A : 00 00 00 00 00 05   		db 00h,00h,00h,00h,00h,05h,00h,00h	; Channel 6
             1B50 : 00 00             
(1) 4661/    1B52 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B58 : 00 00             
(1) 4662/    1B5A : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B60 : 00 00             
(1) 4663/    1B62 : 00 00 00 00 00 06   		db 00h,00h,00h,00h,00h,06h,00h,00h	; Channel 7
             1B68 : 00 00             
(1) 4664/    1B6A : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B70 : 00 00             
(1) 4665/    1B72 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B78 : 00 00             
(1) 4666/    1B7A : 00 00 00 00 00 07   		db 00h,00h,00h,00h,00h,07h,00h,00h	; Channel 7
             1B80 : 00 00             
(1) 4667/    1B82 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B88 : 00 00             
(1) 4668/    1B8A : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B90 : 00 00             
(1) 4669/    1B92 : FF FF               		dw -1	; end-of-list
(1) 4670/    1B94 : 00 00 00 00 00 00   tblPWM:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             1B9A : 00 00             
(1) 4671/    1B9C : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BA2 : 00 00             
(1) 4672/    1BA4 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BAA : 00 00             
(1) 4673/    1BAC : 00 00 00 00 00 01   		db 00h,00h,00h,00h,00h,01h,00h,00h	; Channel 2
             1BB2 : 00 00             
(1) 4674/    1BB4 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BBA : 00 00             
(1) 4675/    1BBC : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BC2 : 00 00             
(1) 4676/    1BC4 : 00 00 00 00 00 02   		db 00h,00h,00h,00h,00h,02h,00h,00h	; Channel 3
             1BCA : 00 00             
(1) 4677/    1BCC : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BD2 : 00 00             
(1) 4678/    1BD4 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BDA : 00 00             
(1) 4679/    1BDC : 00 00 00 00 00 03   		db 00h,00h,00h,00h,00h,03h,00h,00h	; Channel 4
             1BE2 : 00 00             
(1) 4680/    1BE4 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BEA : 00 00             
(1) 4681/    1BEC : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BF2 : 00 00             
(1) 4682/    1BF4 : 00 00 00 00 00 04   		db 00h,00h,00h,00h,00h,04h,00h,00h	; Channel 5
             1BFA : 00 00             
(1) 4683/    1BFC : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C02 : 00 00             
(1) 4684/    1C04 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C0A : 00 00             
(1) 4685/    1C0C : 00 00 00 00 00 05   		db 00h,00h,00h,00h,00h,05h,00h,00h	; Channel 6
             1C12 : 00 00             
(1) 4686/    1C14 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C1A : 00 00             
(1) 4687/    1C1C : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C22 : 00 00             
(1) 4688/    1C24 : 00 00 00 00 00 06   		db 00h,00h,00h,00h,00h,06h,00h,00h	; Channel 7
             1C2A : 00 00             
(1) 4689/    1C2C : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C32 : 00 00             
(1) 4690/    1C34 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C3A : 00 00             
(1) 4691/    1C3C : FF FF               		dw -1	; end-of-list
(1) 4692/    1C3E :                     
(1) 4693/    1C3E :                     trkListCach	ds 8*3		; per track slot
(1) 4694/    1C56 :                     instListOut	ds 8*3
(1) 4695/    1C6E :                     
(1) 4696/    1C6E :                     ; ====================================================================
(1) 4697/    1C6E :                     ; ----------------------------------------------------------------
(1) 4698/    1C6E :                     ; Special aligned buffers
(1) 4699/    1C6E :                     ;
(1) 4700/    1C6E :                     ; Located at 1D00h
(1) 4701/    1C6E :                     ; ----------------------------------------------------------------
(1) 4702/    1C6E :                     
(1) 4703/    1D00 :                     		org 1D00h
(1) 4704/    1D00 :                     dWaveBuff	ds 100h		; WAVE data buffer: 100h bytes, updates every 80h
(1) 4705/    1E00 :                     trkChnls	ds 8*MAX_TRKCHN
(1) 4706/    1F00 :                     trkCach_0	ds MAX_RCACH	; <--
(1) 4707/    1F20 :                     trkCach_1	ds MAX_RCACH
(1) 4708/    1F40 :                     trkCach_2	ds MAX_RCACH
(1) 4709/    1F60 :                     trkCach_3	ds MAX_RCACH
(1) 4710/    1F80 :                     
(1) 4711/    1F80 :                     ; --------------------------------------------------------
(1) 4712/    1F80 :                     
(1) 4713/    1F80 :                     ; last temporals...
(1) 4714/    1F80 : 00                  tickSpSet	db 0		; **
(1) 4715/    1F81 : 00                  tickFlag	db 0		; Tick flag from VBlank
(1) 4716/    1F82 : 00                  tickCnt		db 0		; ** Tick counter (PUT THIS AFTER tickFlag)
(1) 4717/    1F83 : 00                  psgHatMode	db 0		; Current PSGN mode
(1) 4718/    1F84 : 00                  fmSpecial	db 0		; copy of FM3 enable bit
(1) 4719/    1F85 : 00                  commZRead	db 0		; cmd fifo READ pointer (here)
(1) 4720/    1F86 : 00                  trkListPage	db 0
(1) 4721/    1F87 : 00                  marsUpd		db 0		; Flag to request a PWM transfer
(1) 4722/    1F88 : 00                  mcdUpd		db 0		; Flag to request a PCM transfer
(1) 4723/    1F89 : 00 00               wave_Start	dw 0		; START: 68k 24-bit pointer
(1) 4724/    1F8B : 00                  		db 0
(1) 4725/    1F8C : 00 00               wave_Len	dw 0		; LENGTH 24-bit
(1) 4726/    1F8E : 00                  		db 0
(1) 4727/    1F8F : 00 00               wave_Loop	dw 0		; LOOP POINT 24-bit
(1) 4728/    1F91 : 00                  		db 0
(1) 4729/    1F92 : 00 01               wave_Pitch	dw 0100h	; 01.00h
(1) 4730/    1F94 : 00                  wave_Flags	db 0		; WAVE playback flags (%10x: 1 loop / 0 no loop)
(1) 4731/    1F95 : 00                  wave_Priority	db 0
(1) 4732/    1F96 : 00                  currTickBits	db 0		; Current Tick/Subbeat flags (000000BTb B-beat, T-tick)
(1) 4733/    1F97 : 00                  dDacFifoMid	db 0		; WAVE play halfway refill flag (00h/80h)
(1) 4734/    1F98 : 00 00 00            dDacPntr	db 0,0,0	; WAVE play current ROM position
(1) 4735/    1F9B : 00 00 00            dDacCntr	db 0,0,0	; WAVE play length counter
(1) 4736/    1F9E : 00                  x68ksrclsb	db 0		; transferRom temporal LSB
(1) 4737/    1F9F : 00                  x68ksrcmid	db 0		; transferRom temporal MID
(1) 4738/    1FA0 : 00 00               sbeatAcc	dw 0		; Accumulates on each tick to trigger the sub beats
(1) 4739/    1FA2 : D5 00               sbeatPtck	dw 200+13	; Default global subbeats (-32 for PAL)
(1) 4740/    1FA4 :                     headerOut	ds 00Eh		; Temporal storage for 68k pointers
(1) 4741/    1FB2 :                     headerOut_e	ds 2		; reverse readpoint
(1) 4742/    1FB4 :                     sampleHead	ds 006h
(1) 4743/    1FBA :                     
(1) 4744/    1FBA :                     ; --------------------------------------------------------
(1) 4745/    1FBA :                     
(1) 4746/    3F6E :                     		dephase
(1) 4747/    3F6E :                     		cpu 68000		; [AS] Return to 68k
(1) 4748/    3F6E :                     		padding off		; [AS] NO padding
(1) 4749/    3F6E :                     		align 2
(1) 4750/    3F6E :                     
     281/  883F6E :                     		phase $880000+*		; 32X cartridge: $880000+ area
     283/  883F6E :                     Z80_CODE_END:
     285/    3F6E :                     		dephase
     287/    3F6E :                     
     289/    3F6E :                     
     290/    3F6E :                     ; ===========================================================================
     291/    3F6E :                     ; ----------------------------------------------------------------
     292/    3F6E :                     ; DATA section shared on both Cartridge or Disc
     293/    3F6E :                     ; ----------------------------------------------------------------
     294/    3F6E :                     
     295/    3F6E :                     ; --------------------------------------------------------
     296/    3F6E :                     ; CD/CD32X ISO header and files
     297/    3F6E :                     ; --------------------------------------------------------
     298/    3F6E :                     
     314/    3F6E :                     
     315/    3F6E :                     ; ====================================================================
     316/    3F6E :                     ; --------------------------------------------------------
     317/    3F6E :                     ; SEGA CD SUB-CPU data
     318/    3F6E :                     ; --------------------------------------------------------
     319/    3F6E :                     
     332/    3F6E :                     
     333/    3F6E :                     ; ----------------------------------------------------------------
     334/    3F6E :                     ; SH2 code and shared data stored in SDRAM
     335/    3F6E :                     ; ----------------------------------------------------------------
     336/    3F6E :                     
     340/    3F6E :                     		align 4
     342/    3F70 :                     MARS_RAMCODE:
     344/    3F70 :                     		include "system/mars/code.asm"
(1)    1/    3F70 :                     ; ====================================================================
(1)    2/    3F70 :                     ; ----------------------------------------------------------------
(1)    3/    3F70 :                     ; MARS SH2 SDRAM section, shared for both SH2 CPUs
(1)    4/    3F70 :                     ; ----------------------------------------------------------------
(1)    5/    3F70 :                     
(1)    6/    3F70 :                     ; *************************************************
(1)    7/    3F70 :                     ; comm ports:
(1)    8/    3F70 :                     ;
(1)    9/    3F70 :                     ; comm0-comm7  - ** FREE ***
(1)   10/    3F70 :                     ; comm8-comm11 - Used by Z80 for getting it's data
(1)   11/    3F70 :                     ;                packets
(1)   12/    3F70 :                     ; comm12       - Master CPU control
(1)   13/    3F70 :                     ; comm14       - Slave CPU control
(1)   14/    3F70 :                     ; *************************************************
(1)   15/    3F70 :                     
(1)   16/ 6000000 :                     		phase CS3	; Now we are at SDRAM
(1)   17/ 6000000 :                     		cpu SH7600	; Should be SH7095 but this CPU mode works.
(1)   18/ 6000000 :                     
(1)   19/ 6000000 :                     ; CPU METER MACRO
(1)   20/ 6000000 :                     cpu_me macro color
(1)   21/ 6000000 :                     	if MARSCD=0	; <-- Fusion gets stuck
(1)   22/ 6000000 :                     		mov	#color,r1
(1)   23/ 6000000 :                     		mov	#_vdpreg,r2
(1)   24/ 6000000 :                     		mov	#_vdpreg+bitmapmd,r3
(1)   25/ 6000000 :                     .hblk:		mov.b	@(vdpsts,r2),r0
(1)   26/ 6000000 :                     		tst	#HBLK,r0
(1)   27/ 6000000 :                     		bt	.hblk
(1)   28/ 6000000 :                     		mov.b	r1,@r3
(1)   29/ 6000000 :                     		nop
(1)   30/ 6000000 :                     	endif
(1)   31/ 6000000 :                     	endm
(1)   32/ 6000000 :                     
(1)   33/ 6000000 :                     ; ====================================================================
(1)   34/ 6000000 :                     ; ----------------------------------------------------------------
(1)   35/ 6000000 :                     ; Settings
(1)   36/ 6000000 :                     ; ----------------------------------------------------------------
(1)   37/ 6000000 :                     
(1)   38/ 6000000 : =$1                  SH2_DEBUG	equ 1			; Set to 1 too see if CPUs are active using comm counters (0 and 1)
(1)   39/ 6000000 : =$C0000800           STACK_MSTR	equ $C0000800;CS3|$40000
(1)   40/ 6000000 : =$C0000800           STACK_SLV	equ $C0000800;CS3|$3F800
(1)   41/ 6000000 :                     
(1)   42/ 6000000 :                     ; ====================================================================
(1)   43/ 6000000 :                     ; ----------------------------------------------------------------
(1)   44/ 6000000 :                     ; MASTER CPU VECTOR LIST (vbr)
(1)   45/ 6000000 :                     ; ----------------------------------------------------------------
(1)   46/ 6000000 :                     
(1)   47/ 6000000 :                     		align 4
(1)   48/ 6000000 :                     SH2_Master:
(1)   49/ 6000000 : 0600 0710 C000      		dc.l SH2_M_Entry,STACK_MSTR	; Power PC, Stack
          6000006 : 0800             
(1)   50/ 6000008 : 0600 0710 C000      		dc.l SH2_M_Entry,STACK_MSTR	; Reset PC, Stack
          600000E : 0800             
(1)   51/ 6000010 : 0600 0324           		dc.l SH2_M_ErrIllg		; Illegal instruction
(1)   52/ 6000014 : 0000 0000           		dc.l 0				; reserved
(1)   53/ 6000018 : 0600 0328           		dc.l SH2_M_ErrInvl		; Invalid slot instruction
(1)   54/ 600001C : 2010 0400           		dc.l $20100400			; reserved
(1)   55/ 6000020 : 2010 0420           		dc.l $20100420			; reserved
(1)   56/ 6000024 : 0600 032C           		dc.l SH2_M_ErrAddr		; CPU address error
(1)   57/ 6000028 : 0600 0330           		dc.l SH2_M_ErrDma		; DMA address error
(1)   58/ 600002C : 0600 0334           		dc.l SH2_M_ErrNmi		; NMI vector
(1)   59/ 6000030 : 0600 0338           		dc.l SH2_M_ErrUser		; User break vector
(1)   60/ 6000034 : 0000 0000 0000      		dc.l 0,0,0,0,0,0,0,0,0		; reserved
          600003A : 0000 0000 0000 
          6000040 : 0000 0000 0000 
          6000046 : 0000 0000 0000 
          600004C : 0000 0000 0000 
          6000052 : 0000 0000 0000    
(1)   61/ 6000058 : 0000 0000 0000      		dc.l 0,0,0,0,0,0,0,0,0
          600005E : 0000 0000 0000 
          6000064 : 0000 0000 0000 
          600006A : 0000 0000 0000 
          6000070 : 0000 0000 0000 
          6000076 : 0000 0000 0000    
(1)   62/ 600007C : 0000 0000           		dc.l 0
(1)   63/ 6000080 : 0600 0320           		dc.l SH2_M_Error		; Trap user vectors
(1)   64/ 6000084 : 0600 0320           		dc.l SH2_M_Error
(1)   65/ 6000088 : 0600 0320           		dc.l SH2_M_Error
(1)   66/ 600008C : 0600 0320           		dc.l SH2_M_Error
(1)   67/ 6000090 : 0600 0320           		dc.l SH2_M_Error
(1)   68/ 6000094 : 0600 0320           		dc.l SH2_M_Error
(1)   69/ 6000098 : 0600 0320           		dc.l SH2_M_Error
(1)   70/ 600009C : 0600 0320           		dc.l SH2_M_Error
(1)   71/ 60000A0 : 0600 0320           		dc.l SH2_M_Error
(1)   72/ 60000A4 : 0600 0320           		dc.l SH2_M_Error
(1)   73/ 60000A8 : 0600 0320           		dc.l SH2_M_Error
(1)   74/ 60000AC : 0600 0320           		dc.l SH2_M_Error
(1)   75/ 60000B0 : 0600 0320           		dc.l SH2_M_Error
(1)   76/ 60000B4 : 0600 0320           		dc.l SH2_M_Error
(1)   77/ 60000B8 : 0600 0320           		dc.l SH2_M_Error
(1)   78/ 60000BC : 0600 0320           		dc.l SH2_M_Error
(1)   79/ 60000C0 : 0600 0320           		dc.l SH2_M_Error
(1)   80/ 60000C4 : 0600 0320           		dc.l SH2_M_Error
(1)   81/ 60000C8 : 0600 0320           		dc.l SH2_M_Error
(1)   82/ 60000CC : 0600 0320           		dc.l SH2_M_Error
(1)   83/ 60000D0 : 0600 0320           		dc.l SH2_M_Error
(1)   84/ 60000D4 : 0600 0320           		dc.l SH2_M_Error
(1)   85/ 60000D8 : 0600 0320           		dc.l SH2_M_Error
(1)   86/ 60000DC : 0600 0320           		dc.l SH2_M_Error
(1)   87/ 60000E0 : 0600 0320           		dc.l SH2_M_Error
(1)   88/ 60000E4 : 0600 0320           		dc.l SH2_M_Error
(1)   89/ 60000E8 : 0600 0320           		dc.l SH2_M_Error
(1)   90/ 60000EC : 0600 0320           		dc.l SH2_M_Error
(1)   91/ 60000F0 : 0600 0320           		dc.l SH2_M_Error
(1)   92/ 60000F4 : 0600 0320           		dc.l SH2_M_Error
(1)   93/ 60000F8 : 0600 0320           		dc.l SH2_M_Error
(1)   94/ 60000FC : 0600 0320           		dc.l SH2_M_Error
(1)   95/ 6000100 : 0600 0250            		dc.l master_irq		; Level 1 IRQ
(1)   96/ 6000104 : 0600 0250           		dc.l master_irq		; Level 2 & 3 IRQ
(1)   97/ 6000108 : 0600 0250           		dc.l master_irq		; Level 4 & 5 IRQ
(1)   98/ 600010C : 0600 0250           		dc.l master_irq		; Level 6 & 7 IRQ: PWM interupt
(1)   99/ 6000110 : 0600 0250           		dc.l master_irq		; Level 8 & 9 IRQ: Command interupt
(1)  100/ 6000114 : 0600 0250           		dc.l master_irq		; Level 10 & 11 IRQ: H Blank interupt
(1)  101/ 6000118 : 0600 0250           		dc.l master_irq		; Level 12 & 13 IRQ: V Blank interupt
(1)  102/ 600011C : 0600 0250           		dc.l master_irq		; Level 14 & 15 IRQ: Reset Button
(1)  103/ 6000120 :                     	; Extra ON-chip interrupts (vbr+$120)
(1)  104/ 6000120 : 0600 0250           		dc.l master_irq		; Watchdog (custom)
(1)  105/ 6000124 : 0600 0250           		dc.l master_irq		; DMA
(1)  106/ 6000128 :                     
(1)  107/ 6000128 :                     ; ====================================================================
(1)  108/ 6000128 :                     ; ----------------------------------------------------------------
(1)  109/ 6000128 :                     ; SLAVE CPU VECTOR LIST (vbr)
(1)  110/ 6000128 :                     ; ----------------------------------------------------------------
(1)  111/ 6000128 :                     
(1)  112/ 6000128 :                     		align 4
(1)  113/ 6000128 :                     SH2_Slave:
(1)  114/ 6000128 : 0600 0A44 C000      		dc.l SH2_S_Entry,STACK_SLV	; Cold PC,SP
          600012E : 0800             
(1)  115/ 6000130 : 0600 0A44 C000      		dc.l SH2_S_Entry,STACK_SLV	; Manual PC,SP
          6000136 : 0800             
(1)  116/ 6000138 : 0600 0350           		dc.l SH2_S_ErrIllg		; Illegal instruction
(1)  117/ 600013C : 0000 0000           		dc.l 0				; reserved
(1)  118/ 6000140 : 0600 0354           		dc.l SH2_S_ErrInvl		; Invalid slot instruction
(1)  119/ 6000144 : 2010 0400           		dc.l $20100400			; reserved
(1)  120/ 6000148 : 2010 0420           		dc.l $20100420			; reserved
(1)  121/ 600014C : 0600 0358           		dc.l SH2_S_ErrAddr		; CPU address error
(1)  122/ 6000150 : 0600 035C           		dc.l SH2_S_ErrDma		; DMA address error
(1)  123/ 6000154 : 0600 0360           		dc.l SH2_S_ErrNmi		; NMI vector
(1)  124/ 6000158 : 0600 0364           		dc.l SH2_S_ErrUser		; User break vector
(1)  125/ 600015C : 0000 0000 0000      		dc.l 0,0,0,0,0,0,0,0,0		; reserved
          6000162 : 0000 0000 0000 
          6000168 : 0000 0000 0000 
          600016E : 0000 0000 0000 
          6000174 : 0000 0000 0000 
          600017A : 0000 0000 0000    
(1)  126/ 6000180 : 0000 0000 0000      		dc.l 0,0,0,0,0,0,0,0,0
          6000186 : 0000 0000 0000 
          600018C : 0000 0000 0000 
          6000192 : 0000 0000 0000 
          6000198 : 0000 0000 0000 
          600019E : 0000 0000 0000    
(1)  127/ 60001A4 : 0000 0000           		dc.l 0
(1)  128/ 60001A8 : 0600 034C           		dc.l SH2_S_Error		; Trap user vectors
(1)  129/ 60001AC : 0600 034C           		dc.l SH2_S_Error
(1)  130/ 60001B0 : 0600 034C           		dc.l SH2_S_Error
(1)  131/ 60001B4 : 0600 034C           		dc.l SH2_S_Error
(1)  132/ 60001B8 : 0600 034C           		dc.l SH2_S_Error
(1)  133/ 60001BC : 0600 034C           		dc.l SH2_S_Error
(1)  134/ 60001C0 : 0600 034C           		dc.l SH2_S_Error
(1)  135/ 60001C4 : 0600 034C           		dc.l SH2_S_Error
(1)  136/ 60001C8 : 0600 034C           		dc.l SH2_S_Error
(1)  137/ 60001CC : 0600 034C           		dc.l SH2_S_Error
(1)  138/ 60001D0 : 0600 034C           		dc.l SH2_S_Error
(1)  139/ 60001D4 : 0600 034C           		dc.l SH2_S_Error
(1)  140/ 60001D8 : 0600 034C           		dc.l SH2_S_Error
(1)  141/ 60001DC : 0600 034C           		dc.l SH2_S_Error
(1)  142/ 60001E0 : 0600 034C           		dc.l SH2_S_Error
(1)  143/ 60001E4 : 0600 034C           		dc.l SH2_S_Error
(1)  144/ 60001E8 : 0600 034C           		dc.l SH2_S_Error
(1)  145/ 60001EC : 0600 034C           		dc.l SH2_S_Error
(1)  146/ 60001F0 : 0600 034C           		dc.l SH2_S_Error
(1)  147/ 60001F4 : 0600 034C           		dc.l SH2_S_Error
(1)  148/ 60001F8 : 0600 034C           		dc.l SH2_S_Error
(1)  149/ 60001FC : 0600 034C           		dc.l SH2_S_Error
(1)  150/ 6000200 : 0600 034C           		dc.l SH2_S_Error
(1)  151/ 6000204 : 0600 034C           		dc.l SH2_S_Error
(1)  152/ 6000208 : 0600 034C           		dc.l SH2_S_Error
(1)  153/ 600020C : 0600 034C           		dc.l SH2_S_Error
(1)  154/ 6000210 : 0600 034C           		dc.l SH2_S_Error
(1)  155/ 6000214 : 0600 034C           		dc.l SH2_S_Error
(1)  156/ 6000218 : 0600 034C           		dc.l SH2_S_Error
(1)  157/ 600021C : 0600 034C           		dc.l SH2_S_Error
(1)  158/ 6000220 : 0600 034C           		dc.l SH2_S_Error
(1)  159/ 6000224 : 0600 034C           		dc.l SH2_S_Error
(1)  160/ 6000228 : 0600 0278            		dc.l slave_irq		; Level 1 IRQ
(1)  161/ 600022C : 0600 0278           		dc.l slave_irq		; Level 2 & 3 IRQ
(1)  162/ 6000230 : 0600 0278           		dc.l slave_irq		; Level 4 & 5 IRQ
(1)  163/ 6000234 : 0600 0278           		dc.l slave_irq		; Level 6 & 7 IRQ: PWM interupt
(1)  164/ 6000238 : 0600 0278           		dc.l slave_irq		; Level 8 & 9 IRQ: Command interupt
(1)  165/ 600023C : 0600 0278           		dc.l slave_irq		; Level 10 & 11 IRQ: H Blank interupt
(1)  166/ 6000240 : 0600 0278           		dc.l slave_irq		; Level 12 & 13 IRQ: V Blank interupt
(1)  167/ 6000244 : 0600 0278           		dc.l slave_irq		; Level 14 & 15 IRQ: Reset Button
(1)  168/ 6000248 :                     	; Extra ON-chip interrupts (vbr+$120)
(1)  169/ 6000248 : 0600 0278           		dc.l slave_irq		; Watchdog
(1)  170/ 600024C : 0600 0278           		dc.l slave_irq		; DMA
(1)  171/ 6000250 :                     
(1)  172/ 6000250 :                     ; ====================================================================
(1)  173/ 6000250 :                     ; ----------------------------------------------------------------
(1)  174/ 6000250 :                     ; IRQ
(1)  175/ 6000250 :                     ;
(1)  176/ 6000250 :                     ; r0-r1 are saved
(1)  177/ 6000250 :                     ;
(1)  178/ 6000250 :                     ; sr: %xxxxMQIIIIxxST
(1)  179/ 6000250 :                     ; ----------------------------------------------------------------
(1)  180/ 6000250 :                     
(1)  181/ 6000250 :                     		align 4
(1)  182/ 6000250 :                     master_irq:
(1)  183/ 6000250 : 2F06                		mov	r0,@-r15
(1)  184/ 6000252 : 2F16                		mov	r1,@-r15
(1)  185/ 6000254 : 4F22                		sts	pr,@-r15
(1)  186/ 6000256 : 0002                		stc	sr,r0
(1)  187/ 6000258 : 4009                		shlr2	r0
(1)  188/ 600025A : C93C                		and	#$3C,r0
(1)  189/ 600025C : 6103                		mov	r0,r1
(1)  190/ 600025E : E0F0                		mov.b	#$F0,r0		; ** $F0
(1)  191/ 6000260 : 600C                		extu.b	r0,r0
(1)  192/ 6000262 : 400E                		ldc	r0,sr
(1)  193/ 6000264 : C70E                		mova	int_m_list,r0
(1)  194/ 6000266 : 301C                		add	r1,r0
(1)  195/ 6000268 : 6102                		mov	@r0,r1
(1)  196/ 600026A : 410B                		jsr	@r1
(1)  197/ 600026C : 0009                		nop
(1)  198/ 600026E : 4F26                		lds	@r15+,pr
(1)  199/ 6000270 : 61F6                		mov	@r15+,r1
(1)  200/ 6000272 : 60F6                		mov	@r15+,r0
(1)  201/ 6000274 : 002B                		rte
(1)  202/ 6000276 : 0009                		nop
(1)  203/ 6000278 :                     		align 4
(1)  204/ 6000278 :                     
(1)  205/ 6000278 :                     ; ====================================================================
(1)  206/ 6000278 :                     
(1)  207/ 6000278 :                     slave_irq:
(1)  208/ 6000278 : 2F06                		mov	r0,@-r15
(1)  209/ 600027A : 2F16                		mov	r1,@-r15
(1)  210/ 600027C : 4F22                		sts	pr,@-r15
(1)  211/ 600027E : 0002                		stc	sr,r0
(1)  212/ 6000280 : 4009                		shlr2	r0
(1)  213/ 6000282 : C93C                		and	#$3C,r0
(1)  214/ 6000284 : 6103                		mov	r0,r1
(1)  215/ 6000286 : E0F0                		mov.b	#$F0,r0		; ** $F0
(1)  216/ 6000288 : 600C                		extu.b	r0,r0
(1)  217/ 600028A : 400E                		ldc	r0,sr
(1)  218/ 600028C : C714                		mova	int_s_list,r0
(1)  219/ 600028E : 301C                		add	r1,r0
(1)  220/ 6000290 : 6102                		mov	@r0,r1
(1)  221/ 6000292 : 410B                		jsr	@r1
(1)  222/ 6000294 : 0009                		nop
(1)  223/ 6000296 : 4F26                		lds	@r15+,pr
(1)  224/ 6000298 : 61F6                		mov	@r15+,r1
(1)  225/ 600029A : 60F6                		mov	@r15+,r0
(1)  226/ 600029C : 002B                		rte
(1)  227/ 600029E : 0009                		nop
(1)  228/ 60002A0 :                     		align 4
(1)  229/ 60002A0 :                     
(1)  230/ 60002A0 :                     ; ====================================================================
(1)  231/ 60002A0 :                     ; ------------------------------------------------
(1)  232/ 60002A0 :                     ; irq list
(1)  233/ 60002A0 :                     ; ------------------------------------------------
(1)  234/ 60002A0 :                     
(1)  235/ 60002A0 :                     		align 4
(1)  236/ 60002A0 :                     ;				  Level:
(1)  237/ 60002A0 :                     int_m_list:
(1)  238/ 60002A0 : 0600 0380           		dc.l m_irq_bad	; 0
(1)  239/ 60002A4 : 0600 0380           		dc.l m_irq_bad	; 1
(1)  240/ 60002A8 : 0600 0380           		dc.l m_irq_bad	; 2
(1)  241/ 60002AC : 0600 0384           		dc.l m_irq_wdg	; 3 Watchdog
(1)  242/ 60002B0 : 0600 0380           		dc.l m_irq_bad	; 4
(1)  243/ 60002B4 : 0600 0390           		dc.l m_irq_dma	; 5 DMA exit
(1)  244/ 60002B8 : 0600 03AC           		dc.l m_irq_pwm	; 6
(1)  245/ 60002BC : 0600 03AC           		dc.l m_irq_pwm	; 7
(1)  246/ 60002C0 : 0600 03C4           		dc.l m_irq_cmd	; 8
(1)  247/ 60002C4 : 0600 03C4           		dc.l m_irq_cmd	; 9
(1)  248/ 60002C8 : 0600 0420           		dc.l m_irq_h	; A
(1)  249/ 60002CC : 0600 0420           		dc.l m_irq_h	; B
(1)  250/ 60002D0 : 0600 043C           		dc.l m_irq_v	; C
(1)  251/ 60002D4 : 0600 043C           		dc.l m_irq_v	; D
(1)  252/ 60002D8 : 0600 0458           		dc.l m_irq_vres	; E
(1)  253/ 60002DC : 0600 0458           		dc.l m_irq_vres	; F
(1)  254/ 60002E0 :                     int_s_list:
(1)  255/ 60002E0 : 0600 04D8           		dc.l s_irq_bad	; 0
(1)  256/ 60002E4 : 0600 04D8           		dc.l s_irq_bad	; 1
(1)  257/ 60002E8 : 0600 04D8           		dc.l s_irq_bad	; 2
(1)  258/ 60002EC : 0600 04DC           		dc.l s_irq_wdg	; 3 Watchdog
(1)  259/ 60002F0 : 0600 04D8           		dc.l s_irq_bad	; 4
(1)  260/ 60002F4 : 0600 04E8           		dc.l s_irq_dma	; 5 DMA exit
(1)  261/ 60002F8 : C000 0000           		dc.l s_irq_pwm|$C0000000	; 6
(1)  262/ 60002FC : C000 0000           		dc.l s_irq_pwm|$C0000000	; 7
(1)  263/ 6000300 : 0600 04F8           		dc.l s_irq_cmd	; 8
(1)  264/ 6000304 : 0600 04F8           		dc.l s_irq_cmd	; 9
(1)  265/ 6000308 : 0600 067E           		dc.l s_irq_h	; A
(1)  266/ 600030C : 0600 067E           		dc.l s_irq_h	; B
(1)  267/ 6000310 : 0600 0698           		dc.l s_irq_v	; C
(1)  268/ 6000314 : 0600 0698           		dc.l s_irq_v	; D
(1)  269/ 6000318 : 0600 06B4           		dc.l s_irq_vres	; E
(1)  270/ 600031C : 0600 06B4           		dc.l s_irq_vres	; F
(1)  271/ 6000320 :                     
(1)  272/ 6000320 :                     ; ====================================================================
(1)  273/ 6000320 :                     ; ----------------------------------------------------------------
(1)  274/ 6000320 :                     ; Error handler
(1)  275/ 6000320 :                     ; ----------------------------------------------------------------
(1)  276/ 6000320 :                     
(1)  277/ 6000320 :                     ; *** Only works on HARDWARE ***
(1)  278/ 6000320 :                     ;
(1)  279/ 6000320 :                     ; comm2: (CPU)(CODE)
(1)  280/ 6000320 :                     ; comm4: PC counter
(1)  281/ 6000320 :                     ;
(1)  282/ 6000320 :                     ;  CPU | The CPU who got the error:
(1)  283/ 6000320 :                     ;        $00 - Master
(1)  284/ 6000320 :                     ;        $01 - Slave
(1)  285/ 6000320 :                     ;
(1)  286/ 6000320 :                     ; CODE | Error type:
(1)  287/ 6000320 :                     ;	 $00: Unknown error
(1)  288/ 6000320 :                     ;	 $01: Illegal instruction
(1)  289/ 6000320 :                     ;	 $02: Invalid slot instruction
(1)  290/ 6000320 :                     ;	 $03: Address error
(1)  291/ 6000320 :                     ;	 $04: DMA error
(1)  292/ 6000320 :                     ;	 $05: NMI vector
(1)  293/ 6000320 :                     ;	 $06: User break
(1)  294/ 6000320 :                     
(1)  295/ 6000320 :                     SH2_M_Error:
(1)  296/ 6000320 : A00C                		bra	SH2_M_ErrCode
(1)  297/ 6000322 : E000                		mov	#0,r0
(1)  298/ 6000324 :                     SH2_M_ErrIllg:
(1)  299/ 6000324 : A00A                		bra	SH2_M_ErrCode
(1)  300/ 6000326 : E001                		mov	#1,r0
(1)  301/ 6000328 :                     SH2_M_ErrInvl:
(1)  302/ 6000328 : A008                		bra	SH2_M_ErrCode
(1)  303/ 600032A : E002                		mov	#2,r0
(1)  304/ 600032C :                     SH2_M_ErrAddr:
(1)  305/ 600032C : A006                		bra	SH2_M_ErrCode
(1)  306/ 600032E : E003                		mov	#3,r0
(1)  307/ 6000330 :                     SH2_M_ErrDma:
(1)  308/ 6000330 : A004                		bra	SH2_M_ErrCode
(1)  309/ 6000332 : E004                		mov	#4,r0
(1)  310/ 6000334 :                     SH2_M_ErrNmi:
(1)  311/ 6000334 : A002                		bra	SH2_M_ErrCode
(1)  312/ 6000336 : E005                		mov	#5,r0
(1)  313/ 6000338 :                     SH2_M_ErrUser:
(1)  314/ 6000338 : A000                		bra	SH2_M_ErrCode
(1)  315/ 600033A : E006                		mov	#6,r0
(1)  316/ 600033C :                     ; r0 - value
(1)  317/ 600033C :                     SH2_M_ErrCode:
(1)  318/ 600033C : D10E                		mov	#_sysreg+comm2,r1
(1)  319/ 600033E : 2101                		mov.w	r0,@r1
(1)  320/ 6000340 : D10E                		mov	#_sysreg+comm4,r1
(1)  321/ 6000342 : 60F2                		mov	@r15,r0
(1)  322/ 6000344 : 2102                		mov	r0,@r1
(1)  323/ 6000346 : AFFE                		bra	*
(1)  324/ 6000348 : 0009                		nop
(1)  325/ 600034A :                     		align 4
(1)  326/ 600034C :                     
(1)  327/ 600034C :                     ; ----------------------------------------------------
(1)  328/ 600034C :                     
(1)  329/ 600034C :                     SH2_S_Error:
(1)  330/ 600034C : A00C                		bra	SH2_S_ErrCode
(1)  331/ 600034E : E000                		mov	#0,r0
(1)  332/ 6000350 :                     SH2_S_ErrIllg:
(1)  333/ 6000350 : A00A                		bra	SH2_S_ErrCode
(1)  334/ 6000352 : E0FF                		mov	#-1,r0
(1)  335/ 6000354 :                     SH2_S_ErrInvl:
(1)  336/ 6000354 : A008                		bra	SH2_S_ErrCode
(1)  337/ 6000356 : E0FE                		mov	#-2,r0
(1)  338/ 6000358 :                     SH2_S_ErrAddr:
(1)  339/ 6000358 : A006                		bra	SH2_S_ErrCode
(1)  340/ 600035A : E0FD                		mov	#-3,r0
(1)  341/ 600035C :                     SH2_S_ErrDma:
(1)  342/ 600035C : A004                		bra	SH2_S_ErrCode
(1)  343/ 600035E : E0FC                		mov	#-4,r0
(1)  344/ 6000360 :                     SH2_S_ErrNmi:
(1)  345/ 6000360 : A002                		bra	SH2_S_ErrCode
(1)  346/ 6000362 : E0FB                		mov	#-5,r0
(1)  347/ 6000364 :                     SH2_S_ErrUser:
(1)  348/ 6000364 : A000                		bra	SH2_S_ErrCode
(1)  349/ 6000366 : E0FA                		mov	#-6,r0
(1)  350/ 6000368 :                     ; r0 - value
(1)  351/ 6000368 :                     SH2_S_ErrCode:
(1)  352/ 6000368 : D103                		mov	#_sysreg+comm2,r1
(1)  353/ 600036A : 2101                		mov.w	r0,@r1
(1)  354/ 600036C : D103                		mov	#_sysreg+comm4,r1
(1)  355/ 600036E : 60F2                		mov	@r15,r0
(1)  356/ 6000370 : 2102                		mov	r0,@r1
(1)  357/ 6000372 : AFFE                		bra	*
(1)  358/ 6000374 : 0009                		nop
(1)  359/ 6000376 :                     		align 4
(1)  360/ 6000378 : 2000 4022 2000      		ltorg
          600037E : 4024             
(1)  361/ 6000380 :                     
(1)  362/ 6000380 :                     ; ====================================================================
(1)  363/ 6000380 :                     ; ----------------------------------------------------------------
(1)  364/ 6000380 :                     ; Interrupts
(1)  365/ 6000380 :                     ; ----------------------------------------------------------------
(1)  366/ 6000380 :                     
(1)  367/ 6000380 :                     ; =================================================================
(1)  368/ 6000380 :                     ; ------------------------------------------------
(1)  369/ 6000380 :                     ; Master | Unused interrupt
(1)  370/ 6000380 :                     ; ------------------------------------------------
(1)  371/ 6000380 :                     
(1)  372/ 6000380 :                     		align 4
(1)  373/ 6000380 :                     m_irq_bad:
(1)  374/ 6000380 : 000B                		rts
(1)  375/ 6000382 : 0009                		nop
(1)  376/ 6000384 :                     		align 4
(1)  377/ 6000384 :                     
(1)  378/ 6000384 :                     ; =================================================================
(1)  379/ 6000384 :                     ; ------------------------------------------------
(1)  380/ 6000384 :                     ; Master | Watchdog
(1)  381/ 6000384 :                     ; ------------------------------------------------
(1)  382/ 6000384 :                     
(1)  383/ 6000384 :                     m_irq_wdg:
(1)  384/ 6000384 : 91A4                		mov	#_FRT,r1
(1)  385/ 6000386 : 8417                		mov.b	@(7,r1),r0
(1)  386/ 6000388 : CA02                		xor	#2,r0
(1)  387/ 600038A : 8017                		mov.b	r0,@(7,r1)
(1)  388/ 600038C : 000B                		rts
(1)  389/ 600038E : 0009                		nop
(1)  390/ 6000390 :                     		align 4
(1)  391/ 6000390 :                     
(1)  392/ 6000390 :                     ; =================================================================
(1)  393/ 6000390 :                     ; ------------------------------------------------
(1)  394/ 6000390 :                     ; Master | DMA Exit
(1)  395/ 6000390 :                     ; ------------------------------------------------
(1)  396/ 6000390 :                     
(1)  397/ 6000390 :                     m_irq_dma:
(1)  398/ 6000390 : 919E                		mov	#_FRT,r1
(1)  399/ 6000392 : 8417                		mov.b	@(7,r1),r0
(1)  400/ 6000394 : CA02                		xor	#2,r0
(1)  401/ 6000396 : 8017                		mov.b	r0,@(7,r1)
(1)  402/ 6000398 : E180                		mov	#_DMASOURCE0,r1		; Check Channel 0
(1)  403/ 600039A : 5013                		mov	@($C,r1),r0		; Dummy READ
(1)  404/ 600039C : 9099                		mov	#%0100010011100000,r0
(1)  405/ 600039E : 1103                		mov	r0,@($C,r1)		; Transfer mode + DMA enable OFF
(1)  406/ 60003A0 : D13E                		mov	#_sysreg+comm12,r1	; Send signal
(1)  407/ 60003A2 : 6010                		mov.b	@r1,r0
(1)  408/ 60003A4 : CB40                		or	#%01000000,r0
(1)  409/ 60003A6 : 2100                		mov.b	r0,@r1
(1)  410/ 60003A8 : 000B                		rts
(1)  411/ 60003AA : 0009                		nop
(1)  412/ 60003AC :                     		align 4
(1)  413/ 60003AC :                     
(1)  414/ 60003AC :                     ; =================================================================
(1)  415/ 60003AC :                     ; ------------------------------------------------
(1)  416/ 60003AC :                     ; Master | PWM Interrupt
(1)  417/ 60003AC :                     ; ------------------------------------------------
(1)  418/ 60003AC :                     
(1)  419/ 60003AC :                     m_irq_pwm:
(1)  420/ 60003AC : 9190                		mov	#_FRT,r1
(1)  421/ 60003AE : 8417                		mov.b	@(7,r1),r0
(1)  422/ 60003B0 : CA02                		xor	#2,r0
(1)  423/ 60003B2 : 8017                		mov.b	r0,@(7,r1)
(1)  424/ 60003B4 : D13A                		mov	#_sysreg+pwmintclr,r1
(1)  425/ 60003B6 : 2101                		mov.w	r0,@r1
(1)  426/ 60003B8 : 0009                		nop
(1)  427/ 60003BA : 0009                		nop
(1)  428/ 60003BC : 0009                		nop
(1)  429/ 60003BE : 0009                		nop
(1)  430/ 60003C0 : 000B                		rts
(1)  431/ 60003C2 : 0009                		nop
(1)  432/ 60003C4 :                     		align 4
(1)  433/ 60003C4 :                     
(1)  434/ 60003C4 :                     ; =================================================================
(1)  435/ 60003C4 :                     ; ------------------------------------------------
(1)  436/ 60003C4 :                     ; Master | CMD Interrupt
(1)  437/ 60003C4 :                     ; ------------------------------------------------
(1)  438/ 60003C4 :                     
(1)  439/ 60003C4 :                     m_irq_cmd:
(1)  440/ 60003C4 : 9184                		mov	#_FRT,r1
(1)  441/ 60003C6 : 8417                		mov.b	@(7,r1),r0
(1)  442/ 60003C8 : CA02                		xor	#2,r0
(1)  443/ 60003CA : 8017                		mov.b	r0,@(7,r1)
(1)  444/ 60003CC : D135                		mov	#_sysreg+cmdintclr,r1		; Clear CMD interrupt
(1)  445/ 60003CE : 2101                		mov.w	r0,@r1
(1)  446/ 60003D0 : 2F26                		mov	r2,@-r15
(1)  447/ 60003D2 : 2F36                		mov	r3,@-r15
(1)  448/ 60003D4 : 2F46                		mov	r4,@-r15
(1)  449/ 60003D6 : D434                		mov	#_sysreg,r4			; r4 - sysreg base
(1)  450/ 60003D8 : E380                		mov	#_DMASOURCE0,r3			; r3 - DMA base register
(1)  451/ 60003DA : D230                		mov	#_sysreg+comm12,r2		; r2 - comm to write the signal
(1)  452/ 60003DC : 9079                		mov	#%0100010011100000,r0		; Transfer mode + DMA enable OFF
(1)  453/ 60003DE : 1303                		mov	r0,@($C,r3)
(1)  454/ 60003E0 : 6020                		mov.b	@r2,r0
(1)  455/ 60003E2 : C90F                		and	#%1111,r0
(1)  456/ 60003E4 : 2008                		tst	r0,r0
(1)  457/ 60003E6 : 8903                		bt	.dreq_ram			; CMD mode $00
(1)  458/ 60003E8 : 5043                		mov	@(dreqdest,r4),r0
(1)  459/ 60003EA : D130                		mov	#CS3,r1
(1)  460/ 60003EC : A001                		bra	.dreq_setdest
(1)  461/ 60003EE : 201B                		or	r1,r0
(1)  462/ 60003F0 :                     .dreq_ram:
(1)  463/ 60003F0 : C603                		mov	@(marsGbl_DreqWrite,gbr),r0	; Pick current WRITE buffer
(1)  464/ 60003F2 :                     .dreq_setdest:
(1)  465/ 60003F2 : D12F                		mov	#TH,r1				; as Cache-thru
(1)  466/ 60003F4 : 201B                		or	r1,r0
(1)  467/ 60003F6 : 1301                		mov	r0,@(4,r3)			; Set Destination
(1)  468/ 60003F8 : 8548                		mov.w	@(dreqlen,r4),r0		; NOTE: NO size check
(1)  469/ 60003FA : 600D                		extu.w	r0,r0
(1)  470/ 60003FC : 1302                		mov	r0,@(8,r3)			; Length set by 68k
(1)  471/ 60003FE : D12D                		mov	#_sysreg+dreqfifo,r1
(1)  472/ 6000400 : 2312                		mov	r1,@r3				; Source point: DREQ FIFO
(1)  473/ 6000402 : 9067                		mov	#%0100010011100101,r0		; Transfer mode + DMA enable + Use DMA interrupt
(1)  474/ 6000404 : 1303                		mov	r0,@($C,r3)			; Dest:Incr(01) Src:Keep(00) Size:Word(01)
(1)  475/ 6000406 : 6020                		mov.b	@r2,r0				; Set PASS bit to Genesis side.
(1)  476/ 6000408 : CB40                		or	#%01000000,r0
(1)  477/ 600040A : 2200                		mov.b	r0,@r2
(1)  478/ 600040C : 64F6                		mov	@r15+,r4
(1)  479/ 600040E : 63F6                		mov	@r15+,r3
(1)  480/ 6000410 : 62F6                		mov	@r15+,r2
(1)  481/ 6000412 : 0009                		nop
(1)  482/ 6000414 : 0009                		nop
(1)  483/ 6000416 : 0009                		nop
(1)  484/ 6000418 : 0009                		nop
(1)  485/ 600041A : 0009                		nop
(1)  486/ 600041C : 000B                		rts
(1)  487/ 600041E : 0009                		nop
(1)  488/ 6000420 :                     		align 4
(1)  489/ 6000420 :                     
(1)  490/ 6000420 :                     ; =================================================================
(1)  491/ 6000420 :                     ; ------------------------------------------------
(1)  492/ 6000420 :                     ; Master | HBlank
(1)  493/ 6000420 :                     ; ------------------------------------------------
(1)  494/ 6000420 :                     
(1)  495/ 6000420 :                     m_irq_h:
(1)  496/ 6000420 : 9156                		mov	#_FRT,r1
(1)  497/ 6000422 : 8417                		mov.b	@(7,r1),r0
(1)  498/ 6000424 : CA02                		xor	#2,r0
(1)  499/ 6000426 : 8017                		mov.b	r0,@(7,r1)
(1)  500/ 6000428 : D123                		mov	#_sysreg+hintclr,r1
(1)  501/ 600042A : 2101                		mov.w	r0,@r1
(1)  502/ 600042C : 0009                		nop
(1)  503/ 600042E : 0009                		nop
(1)  504/ 6000430 : 0009                		nop
(1)  505/ 6000432 : 0009                		nop
(1)  506/ 6000434 : 0009                		nop
(1)  507/ 6000436 : 000B                		rts
(1)  508/ 6000438 : 0009                		nop
(1)  509/ 600043A :                     		align 4
(1)  510/ 600043C :                     
(1)  511/ 600043C :                     ; =================================================================
(1)  512/ 600043C :                     ; ------------------------------------------------
(1)  513/ 600043C :                     ; Master | VBlank
(1)  514/ 600043C :                     ; ------------------------------------------------
(1)  515/ 600043C :                     
(1)  516/ 600043C :                     m_irq_v:
(1)  517/ 600043C : 9148                		mov	#_FRT,r1
(1)  518/ 600043E : 8417                		mov.b	@(7,r1),r0
(1)  519/ 6000440 : CA02                		xor	#2,r0
(1)  520/ 6000442 : 8017                		mov.b	r0,@(7,r1)
(1)  521/ 6000444 : D11D                		mov	#_sysreg+vintclr,r1
(1)  522/ 6000446 : 2101                		mov.w	r0,@r1
(1)  523/ 6000448 : 0009                		nop
(1)  524/ 600044A : 0009                		nop
(1)  525/ 600044C : 0009                		nop
(1)  526/ 600044E : 0009                		nop
(1)  527/ 6000450 : 0009                		nop
(1)  528/ 6000452 : 000B                		rts
(1)  529/ 6000454 : 0009                		nop
(1)  530/ 6000456 :                     		align 4
(1)  531/ 6000458 :                     
(1)  532/ 6000458 :                     ; =================================================================
(1)  533/ 6000458 :                     ; ------------------------------------------------
(1)  534/ 6000458 :                     ; Master | VRES Interrupt (RESET button)
(1)  535/ 6000458 :                     ; ------------------------------------------------
(1)  536/ 6000458 :                     
(1)  537/ 6000458 :                     m_irq_vres:
(1)  538/ 6000458 : D113                		mov	#_sysreg,r1
(1)  539/ 600045A : 60F3                		mov	r15,r0
(1)  540/ 600045C : 811A                		mov.w	r0,@(vresintclr,r1)
(1)  541/ 600045E : E1B0                		mov	#_DMAOPERATION,r1	; Quickly cancel DMA's
(1)  542/ 6000460 : E000                		mov	#0,r0
(1)  543/ 6000462 : 2102                		mov	r0,@r1
(1)  544/ 6000464 :                     ; 		mov	#_DMASOURCE0,r1		; Quickly cancel both DMA's
(1)  545/ 6000464 :                     ; 		mov	#0,r0
(1)  546/ 6000464 :                     ; 		mov	r0,@($30,r1)
(1)  547/ 6000464 :                     ; 		mov	#%0100010011100000,r0
(1)  548/ 6000464 :                     ; 		mov	r0,@($C,r1)
(1)  549/ 6000464 :                     ; 		mov	#_DMASOURCE1,r1
(1)  550/ 6000464 :                     ; 		mov	#0,r0
(1)  551/ 6000464 :                     ; 		mov	r0,@($30,r1)
(1)  552/ 6000464 :                     ; 		mov	@($C,r1),r0		; Dummy READ
(1)  553/ 6000464 :                     ; 		mov	#%0100010011100000,r0
(1)  554/ 6000464 :                     ; 		mov	r0,@($C,r1)
(1)  555/ 6000464 : D110                		mov	#_sysreg,r1		; If RV was active, freeze.
(1)  556/ 6000466 : 8513                		mov.w	@(dreqctl,r1),r0
(1)  557/ 6000468 : C801                		tst	#1,r0
(1)  558/ 600046A : 8B11                		bf	.rv_busy
(1)  559/ 600046C : D114                		mov 	#_vdpreg,r1
(1)  560/ 600046E : E000                		mov	#0,r0
(1)  561/ 6000470 : 8011                		mov.b	r0,@(bitmapmd,r1)
(1)  562/ 6000472 : DF14                		mov	#(STACK_MSTR)-8,r15	; Reset Master's STACK
(1)  563/ 6000474 : D014                		mov	#SH2_M_HotStart,r0	; Write return point and status
(1)  564/ 6000476 : 2F02                		mov	r0,@r15
(1)  565/ 6000478 : 902D                		mov.w   #$F0,r0
(1)  566/ 600047A : 1F01                		mov	r0,@(4,r15)
(1)  567/ 600047C : D10A                		mov	#_sysreg,r1		; Report Master as OK to everyone
(1)  568/ 600047E : D013                		mov	#"M_OK",r0
(1)  569/ 6000480 : 1108                		mov	r0,@(comm0,r1)
(1)  570/ 6000482 : 0009                		nop
(1)  571/ 6000484 : 0009                		nop
(1)  572/ 6000486 : 0009                		nop
(1)  573/ 6000488 : 0009                		nop
(1)  574/ 600048A : 0009                		nop
(1)  575/ 600048C : 002B                		rte
(1)  576/ 600048E : 0009                		nop
(1)  577/ 6000490 :                     		align 4
(1)  578/ 6000490 :                     .rv_busy:
(1)  579/ 6000490 : 911E                		mov	#_FRT,r1
(1)  580/ 6000492 : 8417                		mov.b	@(7,r1),r0
(1)  581/ 6000494 : CA02                		xor	#2,r0
(1)  582/ 6000496 : 8017                		mov.b	r0,@(7,r1)
(1)  583/ 6000498 : AFFE                		bra	*
(1)  584/ 600049A : 0009                		nop
(1)  585/ 600049C :                     		align 4
(1)  586/ 600049C : 2000 402C 2000      		ltorg
          60004A2 : 401C 2000 401A 
          60004A8 : 2000 4000 0600 
          60004AE : 0000 2000 0000 
          60004B4 : 2000 4012 2000 
          60004BA : 4018 2000 4016 
          60004C0 : 2000 4100 C000 
          60004C6 : 07F8 0600 0754 
          60004CC : 4D5F 4F4B FE10 
          60004D2 : 44E0 44E5 00F0    
(1)  587/ 60004D8 :                     
(1)  588/ 60004D8 :                     ; =================================================================
(1)  589/ 60004D8 :                     ; ------------------------------------------------
(1)  590/ 60004D8 :                     ; Slave | Unused Interrupt
(1)  591/ 60004D8 :                     ; ------------------------------------------------
(1)  592/ 60004D8 :                     
(1)  593/ 60004D8 :                     		align 4
(1)  594/ 60004D8 :                     s_irq_bad:
(1)  595/ 60004D8 : 000B                		rts
(1)  596/ 60004DA : 0009                		nop
(1)  597/ 60004DC :                     		align 4
(1)  598/ 60004DC :                     
(1)  599/ 60004DC :                     ; =================================================================
(1)  600/ 60004DC :                     ; ------------------------------------------------
(1)  601/ 60004DC :                     ; Slave | Watchdog
(1)  602/ 60004DC :                     ; ------------------------------------------------
(1)  603/ 60004DC :                     
(1)  604/ 60004DC :                     s_irq_wdg:
(1)  605/ 60004DC : 910A                		mov	#_FRT,r1
(1)  606/ 60004DE : 8417                		mov.b	@(7,r1),r0
(1)  607/ 60004E0 : CA02                		xor	#2,r0
(1)  608/ 60004E2 : 8017                		mov.b	r0,@(7,r1)
(1)  609/ 60004E4 : 000B                		rts
(1)  610/ 60004E6 : 0009                		nop
(1)  611/ 60004E8 :                     		align 4
(1)  612/ 60004E8 :                     
(1)  613/ 60004E8 :                     ; =================================================================
(1)  614/ 60004E8 :                     ; ------------------------------------------------
(1)  615/ 60004E8 :                     ; Slave | DMA Exit
(1)  616/ 60004E8 :                     ; ------------------------------------------------
(1)  617/ 60004E8 :                     
(1)  618/ 60004E8 :                     		align 4
(1)  619/ 60004E8 :                     s_irq_dma:
(1)  620/ 60004E8 : 9104                		mov	#_FRT,r1
(1)  621/ 60004EA : 8417                		mov.b	@(7,r1),r0
(1)  622/ 60004EC : CA02                		xor	#2,r0
(1)  623/ 60004EE : 8017                		mov.b	r0,@(7,r1)
(1)  624/ 60004F0 : 000B                		rts
(1)  625/ 60004F2 : 0009                		nop
(1)  626/ 60004F4 :                     		align 4
(1)  627/ 60004F4 :                     
(1)  628/ 60004F4 :                     ; =================================================================
(1)  629/ 60004F4 :                     ; ------------------------------------------------
(1)  630/ 60004F4 :                     ; Slave | PWM Interrupt
(1)  631/ 60004F4 :                     ; ------------------------------------------------
(1)  632/ 60004F4 :                     
(1)  633/ 60004F4 :                     ; s_irq_pwm:
(1)  634/ 60004F4 :                     ; 		mov	#_FRT,r1
(1)  635/ 60004F4 :                     ; 		mov.b	@(7,r1),r0
(1)  636/ 60004F4 :                     ; 		xor	#2,r0
(1)  637/ 60004F4 :                     ; 		mov.b	r0,@(7,r1)
(1)  638/ 60004F4 :                     ; 		mov	#_sysreg+pwmintclr,r1	; Clear CMD flag
(1)  639/ 60004F4 :                     ; 		mov.w	r0,@r1
(1)  640/ 60004F4 :                     ; 		nop
(1)  641/ 60004F4 :                     ; 		nop
(1)  642/ 60004F4 :                     ; 		nop
(1)  643/ 60004F4 :                     ; 		nop
(1)  644/ 60004F4 :                     ; 		nop
(1)  645/ 60004F4 :                     ; 		rts
(1)  646/ 60004F4 :                     ; 		nop
(1)  647/ 60004F4 :                     ; 		align 4
(1)  648/ 60004F4 :                     ;
(1)  649/ 60004F4 : FE10                		ltorg	; Save literals
(1)  650/ 60004F6 :                     
(1)  651/ 60004F6 :                     ; =================================================================
(1)  652/ 60004F6 :                     ; ------------------------------------------------
(1)  653/ 60004F6 :                     ; Slave | CMD Interrupt
(1)  654/ 60004F6 :                     ; ------------------------------------------------
(1)  655/ 60004F6 :                     
(1)  656/ 60004F6 :                     		align 4
(1)  657/ 60004F8 :                     s_irq_cmd:
(1)  658/ 60004F8 : 91BE                		mov	#_FRT,r1
(1)  659/ 60004FA : 8417                		mov.b	@(7,r1),r0
(1)  660/ 60004FC : CA02                		xor	#2,r0
(1)  661/ 60004FE : 8017                		mov.b	r0,@(7,r1)
(1)  662/ 6000500 : D157                		mov	#_sysreg+cmdintclr,r1	; Clear CMD flag
(1)  663/ 6000502 : 2101                		mov.w	r0,@r1
(1)  664/ 6000504 :                     	; --------------------------------
(1)  665/ 6000504 : 2F26                		mov	r2,@-r15
(1)  666/ 6000506 : 2F36                		mov	r3,@-r15
(1)  667/ 6000508 : 2F46                		mov	r4,@-r15
(1)  668/ 600050A : 2F56                		mov	r5,@-r15
(1)  669/ 600050C : 2F66                		mov	r6,@-r15
(1)  670/ 600050E : 2F76                		mov	r7,@-r15
(1)  671/ 6000510 : 2F86                		mov	r8,@-r15
(1)  672/ 6000512 : 4F22                		sts	pr,@-r15
(1)  673/ 6000514 : D153                		mov	#_sysreg+comm14,r1
(1)  674/ 6000516 : 6010                		mov.b	@r1,r0
(1)  675/ 6000518 : C90F                		and	#%00001111,r0
(1)  676/ 600051A : 4008                		shll2	r0
(1)  677/ 600051C : 6103                		mov	r0,r1
(1)  678/ 600051E : C702                		mova	.scmd_tasks,r0
(1)  679/ 6000520 : 301C                		add	r1,r0
(1)  680/ 6000522 : 6102                		mov	@r0,r1
(1)  681/ 6000524 : 412B                		jmp	@r1
(1)  682/ 6000526 : 0009                		nop
(1)  683/ 6000528 :                     		align 4
(1)  684/ 6000528 :                     
(1)  685/ 6000528 :                     ; --------------------------------
(1)  686/ 6000528 :                     
(1)  687/ 6000528 :                     .scmd_tasks:
(1)  688/ 6000528 : 0600 0538           		dc.l .scmd_task00	; <-- unused
(1)  689/ 600052C : 0600 053C           		dc.l .scmd_task01
(1)  690/ 6000530 : 0600 053C           		dc.l .scmd_task01
(1)  691/ 6000534 : 0600 053C           		dc.l .scmd_task01
(1)  692/ 6000538 :                     
(1)  693/ 6000538 :                     ; --------------------------------
(1)  694/ 6000538 :                     ; Task $00
(1)  695/ 6000538 :                     ; --------------------------------
(1)  696/ 6000538 :                     
(1)  697/ 6000538 :                     .scmd_task00:
(1)  698/ 6000538 : A085                		bra	.exit_scmd
(1)  699/ 600053A : 0009                		nop
(1)  700/ 600053C :                     
(1)  701/ 600053C :                     ; --------------------------------
(1)  702/ 600053C :                     ; Task $01
(1)  703/ 600053C :                     ; --------------------------------
(1)  704/ 600053C :                     
(1)  705/ 600053C :                     .scmd_task01:
(1)  706/ 600053C : D14A                		mov	#_sysreg+comm8,r1	; Input
(1)  707/ 600053E : D24B                		mov	#$C0000000|RAM_Mars_PwmTable,r2	; Output
(1)  708/ 6000540 : D348                		mov	#_sysreg+comm14,r3	; comm
(1)  709/ 6000542 : 0009                		nop
(1)  710/ 6000544 :                     .wait_1:
(1)  711/ 6000544 : 6030                		mov.b	@r3,r0
(1)  712/ 6000546 : C9F0                		and	#%11110000,r0
(1)  713/ 6000548 : C880                		tst	#%10000000,r0		; LOCK exit?
(1)  714/ 600054A : 8908                		bt	.exit_c
(1)  715/ 600054C : C840                		tst	#%01000000,r0		; Wait PASS
(1)  716/ 600054E : 89F9                		bt	.wait_1
(1)  717/ 6000550 :                     .copy_1:
(1)  718/ 6000550 : 6012                		mov	@r1,r0			; Copy entire LONG
(1)  719/ 6000552 : 2202                		mov	r0,@r2
(1)  720/ 6000554 : 7204                		add	#4,r2			; Increment table pos
(1)  721/ 6000556 : 6030                		mov.b	@r3,r0
(1)  722/ 6000558 : C9BF                		and	#%10111111,r0
(1)  723/ 600055A : AFF3                		bra	.wait_1
(1)  724/ 600055C : 2300                		mov.b	r0,@r3			; Clear PASS bit, Z80 loops
(1)  725/ 600055E :                     .exit_c:
(1)  726/ 600055E :                     
(1)  727/ 600055E :                     ; --------------------------------
(1)  728/ 600055E :                     ; Process changes
(1)  729/ 600055E :                     
(1)  730/ 600055E :                     .proc_pwm:
(1)  731/ 600055E : D844                		mov	#$C0000000|RAM_Mars_PwmTable,r8	; Input
(1)  732/ 6000560 : D744                		mov	#$C0000000|RAM_Mars_PwmList,r7	; Output
(1)  733/ 6000562 : 968A                		mov	#MAX_PWMCHNL,r6
(1)  734/ 6000564 :                     .next_chnl:
(1)  735/ 6000564 : 6383                		mov	r8,r3			; r3 - current table column
(1)  736/ 6000566 : 6030                		mov.b	@r3,r0			; r0: %kfo o-on f-off k-cut
(1)  737/ 6000568 : C91F                		and	#%00011111,r0
(1)  738/ 600056A : 2008                		tst	r0,r0
(1)  739/ 600056C : 8966                		bt	.no_chng
(1)  740/ 600056E :                     .no_keycut:
(1)  741/ 600056E : C802                		tst	#%00000010,r0
(1)  742/ 6000570 : 8B62                		bf	.is_keycut
(1)  743/ 6000572 : C804                		tst	#%00000100,r0
(1)  744/ 6000574 : 8B60                		bf	.is_keycut
(1)  745/ 6000576 : C801                		tst	#%00000001,r0
(1)  746/ 6000578 : 8960                		bt	.no_chng
(1)  747/ 600057A : C808                		tst	#%00001000,r0
(1)  748/ 600057C : 8910                		bt	.no_pitchbnd
(1)  749/ 600057E :                     
(1)  750/ 600057E :                     	; copypasted
(1)  751/ 600057E : 5070                		mov	@(mchnsnd_enbl,r7),r0
(1)  752/ 6000580 : C880                		tst	#$80,r0
(1)  753/ 6000582 : 895B                		bt	.no_chng
(1)  754/ 6000584 :                     ; 		mov	#0,r0
(1)  755/ 6000584 :                     ; 		mov	r0,@(mchnsnd_enbl,r7)
(1)  756/ 6000584 : 7308                		add	#8,r3			; Next: Volume and Pitch MSB
(1)  757/ 6000586 : 6030                		mov.b	@r3,r0			; r0: %vvvvvvpp
(1)  758/ 6000588 : 6203                		mov	r0,r2			; Save pp-pitch
(1)  759/ 600058A : C9FC                		and	#%11111100,r0
(1)  760/ 600058C : 1707                		mov	r0,@(mchnsnd_vol,r7)
(1)  761/ 600058E : 7308                		add	#8,r3			; Next: Pitch LSB
(1)  762/ 6000590 : 6130                		mov.b	@r3,r1			; r0: %pppppppp
(1)  763/ 6000592 : 611C                		extu.b	r1,r1
(1)  764/ 6000594 : 6023                		mov	r2,r0
(1)  765/ 6000596 : C903                		and	#%11,r0
(1)  766/ 6000598 : 4018                		shll8	r0
(1)  767/ 600059A : 201B                		or	r1,r0
(1)  768/ 600059C : A04E                		bra	.no_chng
(1)  769/ 600059E : 1706                		mov	r0,@(mchnsnd_pitch,r7)
(1)  770/ 60005A0 :                     
(1)  771/ 60005A0 :                     .no_pitchbnd:
(1)  772/ 60005A0 : E000                		mov	#0,r0
(1)  773/ 60005A2 : 1700                		mov	r0,@(mchnsnd_enbl,r7)
(1)  774/ 60005A4 : 7308                		add	#8,r3			; Next: Volume and Pitch MSB
(1)  775/ 60005A6 : 6030                		mov.b	@r3,r0			; r0: %vvvvvvpp
(1)  776/ 60005A8 : 6203                		mov	r0,r2			; Save pp-pitch
(1)  777/ 60005AA : C9FC                		and	#%11111100,r0
(1)  778/ 60005AC : 1707                		mov	r0,@(mchnsnd_vol,r7)
(1)  779/ 60005AE : 7308                		add	#8,r3			; Next: Pitch LSB
(1)  780/ 60005B0 : 6130                		mov.b	@r3,r1			; r0: %pppppppp
(1)  781/ 60005B2 : 611C                		extu.b	r1,r1
(1)  782/ 60005B4 : 6023                		mov	r2,r0
(1)  783/ 60005B6 : C903                		and	#%11,r0
(1)  784/ 60005B8 : 4018                		shll8	r0
(1)  785/ 60005BA : 201B                		or	r1,r0
(1)  786/ 60005BC : 1706                		mov	r0,@(mchnsnd_pitch,r7)
(1)  787/ 60005BE : 7308                		add	#8,r3			; Next: Stereo/Loop/Left/Right | 32-bit**
(1)  788/ 60005C0 : 6030                		mov.b	@r3,r0			; r0: %SLlraaaa
(1)  789/ 60005C2 : 6103                		mov	r0,r1			; Save aaaa-address
(1)  790/ 60005C4 : C9F0                		and	#%11110000,r0
(1)  791/ 60005C6 : 4009                		shlr2	r0
(1)  792/ 60005C8 : 4009                		shlr2	r0
(1)  793/ 60005CA : CB80                		or	#$80,r0			; Set as Enabled
(1)  794/ 60005CC : 6403                		mov	r0,r4
(1)  795/ 60005CE : 6013                		mov	r1,r0
(1)  796/ 60005D0 : C90F                		and	#%00001111,r0
(1)  797/ 60005D2 : 4028                		shll16	r0
(1)  798/ 60005D4 : 4018                		shll8	r0
(1)  799/ 60005D6 : 1702                		mov	r0,@(mchnsnd_bank,r7)
(1)  800/ 60005D8 : 6103                		mov	r0,r1			; r1 - BANK
(1)  801/ 60005DA : 7308                		add	#8,r3			; Next: Pointer $xx0000
(1)  802/ 60005DC : 6030                		mov.b	@r3,r0
(1)  803/ 60005DE : 600C                		extu.b	r0,r0
(1)  804/ 60005E0 : 4028                		shll16	r0
(1)  805/ 60005E2 : 6203                		mov	r0,r2			; r2: $xx0000
(1)  806/ 60005E4 : 7308                		add	#8,r3			; Next: Pointer $00xx00
(1)  807/ 60005E6 : 6030                		mov.b	@r3,r0
(1)  808/ 60005E8 : 600C                		extu.b	r0,r0
(1)  809/ 60005EA : 4018                		shll8	r0
(1)  810/ 60005EC : 220B                		or	r0,r2			; r2: $xxxx00
(1)  811/ 60005EE : 7308                		add	#8,r3			; Next: Pointer $0000xx
(1)  812/ 60005F0 : 6030                		mov.b	@r3,r0
(1)  813/ 60005F2 : 600C                		extu.b	r0,r0
(1)  814/ 60005F4 : 202B                		or	r2,r0			; r0: $00xxxxxx
(1)  815/ 60005F6 : 310C                		add	r0,r1
(1)  816/ 60005F8 :                     	; Read LEN and LOOP
(1)  817/ 60005F8 : 6014                		mov.b	@r1+,r0
(1)  818/ 60005FA : 630C                		extu.b	r0,r3
(1)  819/ 60005FC : 6214                		mov.b	@r1+,r2
(1)  820/ 60005FE : 622C                		extu.b	r2,r2
(1)  821/ 6000600 : 4218                		shll8	r2
(1)  822/ 6000602 : 232B                		or	r2,r3
(1)  823/ 6000604 : 6214                		mov.b	@r1+,r2
(1)  824/ 6000606 : 622C                		extu.b	r2,r2
(1)  825/ 6000608 : 4228                		shll16	r2
(1)  826/ 600060A : 232B                		or	r2,r3
(1)  827/ 600060C : 6014                		mov.b	@r1+,r0
(1)  828/ 600060E : 600C                		extu.b	r0,r0
(1)  829/ 6000610 : 6214                		mov.b	@r1+,r2
(1)  830/ 6000612 : 622C                		extu.b	r2,r2
(1)  831/ 6000614 : 4218                		shll8	r2
(1)  832/ 6000616 : 202B                		or	r2,r0
(1)  833/ 6000618 : 6214                		mov.b	@r1+,r2
(1)  834/ 600061A : 622C                		extu.b	r2,r2
(1)  835/ 600061C : 4228                		shll16	r2
(1)  836/ 600061E : 202B                		or	r2,r0
(1)  837/ 6000620 : 4018                		shll8	r0
(1)  838/ 6000622 : 1705                		mov	r0,@(mchnsnd_loop,r7)
(1)  839/ 6000624 : 6013                		mov	r1,r0
(1)  840/ 6000626 : 4018                		shll8	r0
(1)  841/ 6000628 : 1703                		mov	r0,@(mchnsnd_start,r7)
(1)  842/ 600062A : 1701                		mov	r0,@(mchnsnd_read,r7)
(1)  843/ 600062C : 6013                		mov	r1,r0
(1)  844/ 600062E : 303C                		add	r3,r0
(1)  845/ 6000630 : 4018                		shll8	r0
(1)  846/ 6000632 : 1704                		mov	r0,@(mchnsnd_len,r7)
(1)  847/ 6000634 : A002                		bra	.no_chng
(1)  848/ 6000636 : 1740                		mov	r4,@(mchnsnd_enbl,r7)
(1)  849/ 6000638 :                     .is_keycut:
(1)  850/ 6000638 : E000                		mov	#0,r0
(1)  851/ 600063A : 1700                		mov	r0,@(mchnsnd_enbl,r7)
(1)  852/ 600063C :                     .no_chng:
(1)  853/ 600063C :                     ; 		add	#$40,r6
(1)  854/ 600063C : 901E                		mov	#sizeof_marssnd,r0
(1)  855/ 600063E : 370C                		add	r0,r7
(1)  856/ 6000640 : 4610                		dt	r6
(1)  857/ 6000642 : 8F8F                		bf/s	.next_chnl
(1)  858/ 6000644 : 7801                		add	#1,r8
(1)  859/ 6000646 :                     .exit_scmd:
(1)  860/ 6000646 :                     	; --------------------------------
(1)  861/ 6000646 : D107                		mov	#_sysreg+comm14,r1	; Clear cmd number
(1)  862/ 6000648 : E000                		mov	#0,r0
(1)  863/ 600064A : 2100                		mov.b	r0,@r1
(1)  864/ 600064C : 4F26                		lds	@r15+,pr
(1)  865/ 600064E : 68F6                		mov	@r15+,r8
(1)  866/ 6000650 : 67F6                		mov	@r15+,r7
(1)  867/ 6000652 : 66F6                		mov	@r15+,r6
(1)  868/ 6000654 : 65F6                		mov	@r15+,r5
(1)  869/ 6000656 : 64F6                		mov	@r15+,r4
(1)  870/ 6000658 : 63F6                		mov	@r15+,r3
(1)  871/ 600065A : 62F6                		mov	@r15+,r2
(1)  872/ 600065C : 000B                		rts
(1)  873/ 600065E : 0009                		nop
(1)  874/ 6000660 :                     		align 4
(1)  875/ 6000660 : 2000 401A 2000      		ltorg
          6000666 : 402E 2000 4028 
          600066C : C000 0200 C000 
          6000672 : 0200 C000 0120 
          6000678 : FE10 0007 0020    
(1)  876/ 600067E :                     
(1)  877/ 600067E :                     ; =================================================================
(1)  878/ 600067E :                     ; ------------------------------------------------
(1)  879/ 600067E :                     ; Slave | HBlank
(1)  880/ 600067E :                     ; ------------------------------------------------
(1)  881/ 600067E :                     
(1)  882/ 600067E :                     s_irq_h:
(1)  883/ 600067E : 9145                		mov	#_FRT,r1
(1)  884/ 6000680 : 8417                		mov.b	@(7,r1),r0
(1)  885/ 6000682 : CA02                		xor	#2,r0
(1)  886/ 6000684 : 8017                		mov.b	r0,@(7,r1)
(1)  887/ 6000686 : D11B                		mov	#_sysreg+hintclr,r1
(1)  888/ 6000688 : 2101                		mov.w	r0,@r1
(1)  889/ 600068A : 0009                		nop
(1)  890/ 600068C : 0009                		nop
(1)  891/ 600068E : 0009                		nop
(1)  892/ 6000690 : 0009                		nop
(1)  893/ 6000692 : 0009                		nop
(1)  894/ 6000694 : 000B                		rts
(1)  895/ 6000696 : 0009                		nop
(1)  896/ 6000698 :                     		align 4
(1)  897/ 6000698 :                     
(1)  898/ 6000698 :                     ; =================================================================
(1)  899/ 6000698 :                     ; ------------------------------------------------
(1)  900/ 6000698 :                     ; Slave | VBlank
(1)  901/ 6000698 :                     ; ------------------------------------------------
(1)  902/ 6000698 :                     
(1)  903/ 6000698 :                     s_irq_v:
(1)  904/ 6000698 : 9138                		mov	#_FRT,r1
(1)  905/ 600069A : 8417                		mov.b	@(7,r1),r0
(1)  906/ 600069C : CA02                		xor	#2,r0
(1)  907/ 600069E : 8017                		mov.b	r0,@(7,r1)
(1)  908/ 60006A0 : D115                		mov	#_sysreg+vintclr,r1
(1)  909/ 60006A2 : 2101                		mov.w	r0,@r1
(1)  910/ 60006A4 : 0009                		nop
(1)  911/ 60006A6 : 0009                		nop
(1)  912/ 60006A8 : 0009                		nop
(1)  913/ 60006AA : 0009                		nop
(1)  914/ 60006AC : 0009                		nop
(1)  915/ 60006AE : 000B                		rts
(1)  916/ 60006B0 : 0009                		nop
(1)  917/ 60006B2 :                     		align 4
(1)  918/ 60006B4 :                     
(1)  919/ 60006B4 :                     ; =================================================================
(1)  920/ 60006B4 :                     ; ------------------------------------------------
(1)  921/ 60006B4 :                     ; Slave | VRES Interrupt (RESET button on Genesis)
(1)  922/ 60006B4 :                     ; ------------------------------------------------
(1)  923/ 60006B4 :                     
(1)  924/ 60006B4 :                     s_irq_vres:
(1)  925/ 60006B4 : D111                		mov	#_sysreg,r1
(1)  926/ 60006B6 : 60F3                		mov	r15,r0
(1)  927/ 60006B8 : 811A                		mov.w	r0,@(vresintclr,r1)
(1)  928/ 60006BA : E1B0                		mov	#_DMAOPERATION,r1	; Quickly cancel DMA's
(1)  929/ 60006BC : E000                		mov	#0,r0
(1)  930/ 60006BE : 2102                		mov	r0,@r1
(1)  931/ 60006C0 :                     ; 		mov	#_DMASOURCE0,r1
(1)  932/ 60006C0 :                     ; 		mov	#0,r0
(1)  933/ 60006C0 :                     ; 		mov	r0,@($30,r1)
(1)  934/ 60006C0 :                     ; 		mov	#%0100010011100000,r0
(1)  935/ 60006C0 :                     ; 		mov	r0,@($C,r1)
(1)  936/ 60006C0 :                     ; 		mov	#_DMASOURCE1,r1
(1)  937/ 60006C0 :                     ; 		mov	#0,r0
(1)  938/ 60006C0 :                     ; 		mov	r0,@($30,r1)
(1)  939/ 60006C0 :                     ; 		mov	#%0100010011100000,r0
(1)  940/ 60006C0 :                     ; 		mov	r0,@($C,r1)
(1)  941/ 60006C0 : D10E                		mov	#_sysreg,r1		; If RV was active, freeze.
(1)  942/ 60006C2 : 8513                		mov.w	@(dreqctl,r1),r0
(1)  943/ 60006C4 : C801                		tst	#1,r0
(1)  944/ 60006C6 : 8B0F                		bf	.rv_busy
(1)  945/ 60006C8 : DF0D                		mov	#(STACK_SLV)-8,r15	; Reset Slave's STACK
(1)  946/ 60006CA : D00E                		mov	#SH2_S_HotStart,r0	; Write return point and status
(1)  947/ 60006CC : 2F02                		mov	r0,@r15
(1)  948/ 60006CE : 901E                		mov.w   #$F0,r0
(1)  949/ 60006D0 : 1F01                		mov	r0,@(4,r15)
(1)  950/ 60006D2 : D10A                		mov	#_sysreg,r1
(1)  951/ 60006D4 : D00C                		mov	#"S_OK",r0		; Report Slave as OK to everyone
(1)  952/ 60006D6 : 1109                		mov	r0,@(comm4,r1)
(1)  953/ 60006D8 : 0009                		nop
(1)  954/ 60006DA : 0009                		nop
(1)  955/ 60006DC : 0009                		nop
(1)  956/ 60006DE : 0009                		nop
(1)  957/ 60006E0 : 0009                		nop
(1)  958/ 60006E2 : 002B                		rte
(1)  959/ 60006E4 : 0009                		nop
(1)  960/ 60006E6 :                     		align 4
(1)  961/ 60006E8 :                     .rv_busy:
(1)  962/ 60006E8 : 9110                		mov	#_FRT,r1
(1)  963/ 60006EA : 8417                		mov.b	@(7,r1),r0
(1)  964/ 60006EC : CA02                		xor	#2,r0
(1)  965/ 60006EE : 8017                		mov.b	r0,@(7,r1)
(1)  966/ 60006F0 : AFFE                		bra	*
(1)  967/ 60006F2 : 0009                		nop
(1)  968/ 60006F4 :                     		align 4
(1)  969/ 60006F4 :                     
(1)  970/ 60006F4 : 2000 4018 2000      		ltorg		; Save literals
          60006FA : 4016 2000 4000 
          6000700 : C000 07F8 0600 
          6000706 : 0A94 535F 4F4B 
          600070C : FE10 00F0          
(1)  971/ 6000710 :                     
(1)  972/ 6000710 :                     ; ====================================================================
(1)  973/ 6000710 :                     ; ----------------------------------------------------------------
(1)  974/ 6000710 :                     ; Master entry
(1)  975/ 6000710 :                     ; ----------------------------------------------------------------
(1)  976/ 6000710 :                     
(1)  977/ 6000710 :                     		align 4
(1)  978/ 6000710 :                     SH2_M_Entry:
(1)  979/ 6000710 : DF1E                		mov	#STACK_MSTR,r15			; Reset stack
(1)  980/ 6000712 : D01F                		mov	#SH2_Master,r0			; Reset vbr
(1)  981/ 6000714 : 402E                		ldc	r0,vbr
(1)  982/ 6000716 : 9147                		mov.l	#_FRT,r1
(1)  983/ 6000718 : E000                		mov	#0,r0
(1)  984/ 600071A : 8010                		mov.b	r0,@(0,r1)
(1)  985/ 600071C : E0E2                		mov.b	#$E2,r0
(1)  986/ 600071E : 8017                		mov.b	r0,@(7,r1)
(1)  987/ 6000720 : E000                		mov	#0,r0
(1)  988/ 6000722 : 8014                		mov.b	r0,@(4,r1)
(1)  989/ 6000724 : E001                		mov	#1,r0
(1)  990/ 6000726 : 8015                		mov.b	r0,@(5,r1)
(1)  991/ 6000728 : E000                		mov	#0,r0
(1)  992/ 600072A : 8016                		mov.b	r0,@(6,r1)
(1)  993/ 600072C : E001                		mov	#1,r0
(1)  994/ 600072E : 8011                		mov.b	r0,@(1,r1)
(1)  995/ 6000730 : E000                		mov	#0,r0
(1)  996/ 6000732 : 8013                		mov.b	r0,@(3,r1)
(1)  997/ 6000734 : 8012                		mov.b	r0,@(2,r1)
(1)  998/ 6000736 :                     ; 		mov.b	#$F2,r0				; <-- not needed here
(1)  999/ 6000736 :                     ; 		mov.b	r0,@(7,r1)
(1) 1000/ 6000736 :                     ; 		mov	#0,r0
(1) 1001/ 6000736 :                     ; 		mov.b	r0,@(4,r1)
(1) 1002/ 6000736 :                     ; 		mov	#1,r0
(1) 1003/ 6000736 :                     ; 		mov.b	r0,@(5,r1)
(1) 1004/ 6000736 :                     ; 		mov.b	#$E2,r0
(1) 1005/ 6000736 :                     ; 		mov.b	r0,@(7,r1)
(1) 1006/ 6000736 :                     	; Extra interrupt settings
(1) 1007/ 6000736 : 9038                		mov.w   #$FEE2,r0			; Extra interrupt priority levels ($FFFFFEE2)
(1) 1008/ 6000738 : 9138                		mov     #(3<<4)|(5<<8),r1		; (DMA_LVL<<8)|(WDG_LVL<<4) Current: WDG 3 DMA 5
(1) 1009/ 600073A : 2011                		mov.w   r1,@r0
(1) 1010/ 600073C : 9037                		mov.w   #$FEE4,r0			; Vector jump number for Watchdog ($FFFFFEE4)
(1) 1011/ 600073E : 9137                		mov     #($120/4)<<8,r1			; (vbr+POINTER)<<8
(1) 1012/ 6000740 : 2011                		mov.w   r1,@r0
(1) 1013/ 6000742 : E0A0                		mov.b	#$A0,r0				; Vector jump number for DMACHANNEL0 ($FFFFFFA0)
(1) 1014/ 6000744 : E149                		mov     #($124/4),r1			; (vbr+POINTER)
(1) 1015/ 6000746 : 2012                		mov	r1,@r0
(1) 1016/ 6000748 : D012                		mov	#RAM_Mars_Global,r0		; Reset gbr
(1) 1017/ 600074A : 401E                		ldc	r0,gbr
(1) 1018/ 600074C :                     
(1) 1019/ 600074C :                     	; CD32X initialization:
(1) 1059/ 600074C :                     
(1) 1060/ 600074C : D012                		mov	#RAM_Mars_DreqBuff_0,r0
(1) 1061/ 600074E : C202                		mov	r0,@(marsGbl_DreqRead,gbr)
(1) 1062/ 6000750 : D012                		mov	#RAM_Mars_DreqBuff_1,r0
(1) 1063/ 6000752 : C203                		mov	r0,@(marsGbl_DreqWrite,gbr)
(1) 1064/ 6000754 :                     
(1) 1065/ 6000754 :                     ; ====================================================================
(1) 1066/ 6000754 :                     ; ----------------------------------------------------------------
(1) 1067/ 6000754 :                     ; Master MAIN code
(1) 1068/ 6000754 :                     ; ----------------------------------------------------------------
(1) 1069/ 6000754 :                     
(1) 1070/ 6000754 :                     SH2_M_HotStart:
(1) 1071/ 6000754 : E0F0                		mov.b	#$F0,r0			; ** $F0
(1) 1072/ 6000756 : 600C                		extu.b	r0,r0
(1) 1073/ 6000758 : 400E                		ldc	r0,sr
(1) 1074/ 600075A : 912A                		mov.w	#$FE80,r1		; $FFFFFE80
(1) 1075/ 600075C : 902A                		mov.w	#$A518,r0		; Disable Watchdog
(1) 1076/ 600075E : 2101                		mov.w	r0,@r1
(1) 1077/ 6000760 : B1F2                		bsr	Mars_CachePurge
(1) 1078/ 6000762 : 0009                		nop
(1) 1079/ 6000764 : B254                		bsr	MarsVideo_Init
(1) 1080/ 6000766 : 0009                		nop
(1) 1081/ 6000768 : D10D                		mov	#_sysreg,r1
(1) 1082/ 600076A : 6011                		mov.w	@r1,r0
(1) 1083/ 600076C : CB02                		or	#CMDIRQ_ON,r0
(1) 1084/ 600076E : 2101                		mov.w	r0,@r1
(1) 1085/ 6000770 : D10C                		mov	#_sysreg+comm14,r1
(1) 1086/ 6000772 : 6011                .wait_slv:	mov.w	@r1,r0
(1) 1087/ 6000774 : 2008                		tst	r0,r0
(1) 1088/ 6000776 : 8BFC                		bf	.wait_slv
(1) 1089/ 6000778 : E1B0                		mov	#_DMAOPERATION,r1		; Enable DMA operation
(1) 1090/ 600077A : E001                		mov	#1,r0
(1) 1091/ 600077C : 2102                		mov	r0,@r1
(1) 1092/ 600077E : E020                		mov.b	#$20,r0				; Interrupts ON
(1) 1093/ 6000780 : 400E                		ldc	r0,sr
(1) 1094/ 6000782 : A019                		bra	master_loop
(1) 1095/ 6000784 : 0009                		nop
(1) 1096/ 6000786 :                     		align 4
(1) 1097/ 6000788 :                     litr_MarsVideo_Init:
(1) 1098/ 6000788 : 0600 0C10           		dc.l MarsVideo_Init
(1) 1099/ 600078C : C000 0800 0600      		ltorg
          6000792 : 0000 0600 15E0 
          6000798 : 2600 1A30 2600 
          600079E : 2140 2000 4000 
          60007A4 : 2000 402E FE10 
          60007AA : FEE2 0530 FEE4 
          60007B0 : 4800 FE80 A518    
(1) 1100/ 60007B6 :                     		align 4
(1) 1101/ 60007B8 :                     
(1) 1102/ 60007B8 :                     ; ----------------------------------------------------------------
(1) 1103/ 60007B8 :                     ; MASTER CPU loop
(1) 1104/ 60007B8 :                     ;
(1) 1105/ 60007B8 :                     ; comm12:
(1) 1106/ 60007B8 :                     ; %BS00cccc RF00mmmm
(1) 1107/ 60007B8 :                     ;
(1) 1108/ 60007B8 :                     ; B - BUSY signal for CMD (TODO)
(1) 1109/ 60007B8 :                     ; S - SIGNAL-status bits for CMD, clears only
(1) 1110/ 60007B8 :                     ; F - Frame-ready flag, clears when frame is ready.
(1) 1111/ 60007B8 :                     ; c - CMD task number
(1) 1112/ 60007B8 :                     ; R - Graphics mode INIT flag
(1) 1113/ 60007B8 :                     ; m - Pseudo-Graphics mode
(1) 1114/ 60007B8 :                     ; ----------------------------------------------------------------
(1) 1115/ 60007B8 :                     
(1) 1116/ 60007B8 :                     		align 4
(1) 1117/ 60007B8 :                     master_loop:
(1) 1119/ 60007B8 : D13A                		mov	#_sysreg+comm0,r1		; DEBUG counter
(1) 1120/ 60007BA : 6010                		mov.b	@r1,r0
(1) 1121/ 60007BC : 7001                		add	#1,r0
(1) 1122/ 60007BE : 2100                		mov.b	r0,@r1
(1) 1124/ 60007C0 :                     
(1) 1125/ 60007C0 :                     	; ---------------------------------------
(1) 1126/ 60007C0 :                     	; Flip the DREQ Read/Write points
(1) 1127/ 60007C0 :                     	; ---------------------------------------
(1) 1128/ 60007C0 : D139                		mov	#_vdpreg,r1			; Check if we got late
(1) 1129/ 60007C2 : 841A                .waitl:		mov.b	@(vdpsts,r1),r0			; on VBlank
(1) 1130/ 60007C4 : C880                		tst	#VBLK,r0
(1) 1131/ 60007C6 : 8BFC                		bf	.waitl
(1) 1132/ 60007C8 : 4F03                		stc	sr,@-r15
(1) 1133/ 60007CA : E0F0                		mov.b	#$F0,r0				; ** $F0
(1) 1134/ 60007CC : 600C                		extu.b	r0,r0
(1) 1135/ 60007CE : 400E                		ldc	r0,sr
(1) 1136/ 60007D0 : B1BA                		bsr	Mars_CachePurge			; Purge cache
(1) 1137/ 60007D2 : 0009                		nop
(1) 1138/ 60007D4 : C603                		mov	@(marsGbl_DreqWrite,gbr),r0	; Flip DMA Read/Write buffers
(1) 1139/ 60007D6 : 6103                		mov	r0,r1
(1) 1140/ 60007D8 : C602                		mov	@(marsGbl_DreqRead,gbr),r0
(1) 1141/ 60007DA : C203                		mov	r0,@(marsGbl_DreqWrite,gbr)
(1) 1142/ 60007DC : 6013                		mov	r1,r0
(1) 1143/ 60007DE : C202                		mov	r0,@(marsGbl_DreqRead,gbr)
(1) 1144/ 60007E0 : D132                		mov	#_sysreg+comm12+1,r1		; Reset FrameWait bit from 68K
(1) 1145/ 60007E2 : 6010                		mov.b	@r1,r0
(1) 1146/ 60007E4 : C9BF                		and	#%10111111,r0
(1) 1147/ 60007E6 : 2100                		mov.b	r0,@r1
(1) 1148/ 60007E8 : 4F07                		ldc	@r15+,sr
(1) 1149/ 60007EA :                     
(1) 1150/ 60007EA :                     	; ---------------------------------------
(1) 1151/ 60007EA :                     	; Write palette using DREQ data
(1) 1152/ 60007EA :                     	; ---------------------------------------
(1) 1153/ 60007EA : D12F                		mov	#_vdpreg,r1			; Wait until VBlank
(1) 1154/ 60007EC : 841A                .waitv:		mov.b	@(vdpsts,r1),r0
(1) 1155/ 60007EE : C880                		tst	#VBLK,r0
(1) 1156/ 60007F0 : 89FC                		bt	.waitv
(1) 1157/ 60007F2 : D12D                		mov	#_vdpreg,r1
(1) 1158/ 60007F4 : C501                		mov.w	@(marsGbl_ThisFrame,gbr),r0	; Set current framebuffer
(1) 1159/ 60007F6 : C901                		and	#1,r0
(1) 1160/ 60007F8 : 801B                		mov.b	r0,@(framectl,r1)
(1) 1161/ 60007FA : C500                 		mov.w	@(marsGbl_XShift,gbr),r0	; Set SHIFT bit (Xpos & 1)
(1) 1162/ 60007FC : C901                		and	#1,r0
(1) 1163/ 60007FE : 8111                		mov.w	r0,@(shift,r1)
(1) 1164/ 6000800 : C602                		mov	@(marsGbl_DreqRead,gbr),r0
(1) 1165/ 6000802 :                     ; 		mov	#Dreq_Palette,r1		; PALETTE MUST BE AT THE TOP OF DREQ DATA
(1) 1166/ 6000802 :                     ; 		add	r0,r1				; so I don't need to add Dreq_Palette...
(1) 1167/ 6000802 : 6103                		mov	r0,r1
(1) 1168/ 6000804 : D22A                		mov	#_palette,r2
(1) 1169/ 6000806 : E320                 		mov	#(256/8),r3
(1) 1170/ 6000808 :                     .copy_pal:
(1) 1171/ 6000808 :                     	rept 8/2
(1) 1172/ 6000808 :                     		mov	@r1+,r0				; Copy 2 colors as LONGs
(1) 1173/ 6000808 :                     		mov	r0,@r2
(1) 1174/ 6000808 :                     		add	#4,r2
(1) 1175/ 6000808 :                     	endm
(1) 1172/ 6000808 : 6016                		mov	@r1+,r0				; Copy 2 colors as LONGs
(1) 1173/ 600080A : 2202                		mov	r0,@r2
(1) 1174/ 600080C : 7204                		add	#4,r2
(1) 1172/ 600080E : 6016                		mov	@r1+,r0				; Copy 2 colors as LONGs
(1) 1173/ 6000810 : 2202                		mov	r0,@r2
(1) 1174/ 6000812 : 7204                		add	#4,r2
(1) 1172/ 6000814 : 6016                		mov	@r1+,r0				; Copy 2 colors as LONGs
(1) 1173/ 6000816 : 2202                		mov	r0,@r2
(1) 1174/ 6000818 : 7204                		add	#4,r2
(1) 1172/ 600081A : 6016                		mov	@r1+,r0				; Copy 2 colors as LONGs
(1) 1173/ 600081C : 2202                		mov	r0,@r2
(1) 1174/ 600081E : 7204                		add	#4,r2
(1) 1176/ 6000820 : 4310                		dt	r3
(1) 1177/ 6000822 : 8BF1                		bf	.copy_pal
(1) 1178/ 6000824 :                     .not_ready:
(1) 1179/ 6000824 : D123                		mov	#_sysreg+comm12,r1
(1) 1180/ 6000826 : 6011                		mov.w	@r1,r0
(1) 1181/ 6000828 : D123                		mov	#mstr_list,r1
(1) 1182/ 600082A : C880                		tst	#$80,r0
(1) 1183/ 600082C : 8900                		bt	.non_init
(1) 1184/ 600082E : 7104                		add	#4,r1
(1) 1185/ 6000830 :                     .non_init:
(1) 1186/ 6000830 : C90F                		and	#%00001111,r0		; <-- Current limit
(1) 1187/ 6000832 : 4008                		shll2	r0
(1) 1188/ 6000834 : 4000                		shll	r0
(1) 1189/ 6000836 : 310C                		add	r0,r1
(1) 1190/ 6000838 : 6012                		mov	@r1,r0
(1) 1191/ 600083A : 402B                		jmp	@r0
(1) 1192/ 600083C : 0009                		nop
(1) 1193/ 600083E :                     		align 4
(1) 1194/ 6000840 :                     mstr_list:
(1) 1195/ 6000840 : 0600 0860 0600      		dc.l MstrMode_0,MstrMode_0_i
          6000846 : 0850             
(1) 1196/ 6000848 : 0600 08C8 0600      		dc.l MstrMode_2D,MstrMode_2D_i
          600084E : 086C             
(1) 1197/ 6000850 :                     
(1) 1198/ 6000850 :                     ; ====================================================================
(1) 1199/ 6000850 :                     ; ----------------------------------------------------------------
(1) 1200/ 6000850 :                     ; NOTHING
(1) 1201/ 6000850 :                     ; ----------------------------------------------------------------
(1) 1202/ 6000850 :                     
(1) 1203/ 6000850 :                     		align 4
(1) 1204/ 6000850 :                     MstrMode_0_i:
(1) 1205/ 6000850 : D115                		mov 	#_vdpreg,r1
(1) 1206/ 6000852 : E000                		mov	#0,r0
(1) 1207/ 6000854 : 8011                		mov.b	r0,@(bitmapmd,r1)
(1) 1208/ 6000856 : 0009                		nop
(1) 1209/ 6000858 : D114                		mov	#_sysreg+comm12+1,r1
(1) 1210/ 600085A : 6010                		mov.b	@r1,r0
(1) 1211/ 600085C : C97F                		and	#$7F,r0
(1) 1212/ 600085E : 2100                		mov.b	r0,@r1
(1) 1213/ 6000860 :                     MstrMode_0:
(1) 1214/ 6000860 : D111                		mov	#_vdpreg,r1
(1) 1215/ 6000862 : 841A                .waitl:		mov.b	@(vdpsts,r1),r0
(1) 1216/ 6000864 : C880                		tst	#VBLK,r0
(1) 1217/ 6000866 : 8BFC                		bf	.waitl
(1) 1218/ 6000868 :                     
(1) 1219/ 6000868 : AFA6                		bra	master_loop
(1) 1220/ 600086A : 0009                		nop
(1) 1221/ 600086C :                     
(1) 1222/ 600086C :                     ; ====================================================================
(1) 1223/ 600086C :                     ; ----------------------------------------------------------------
(1) 1224/ 600086C :                     ; 256-color tiled scrolling layer with "Super" Sprites
(1) 1225/ 600086C :                     ;
(1) 1226/ 600086C :                     ; NOTES:
(1) 1227/ 600086C :                     ; - STOP SCROLLING FIRST
(1) 1228/ 600086C :                     ; - MAXIMUM scrolling speed is 8 pixels for both axis
(1) 1229/ 600086C :                     ; ----------------------------------------------------------------
(1) 1230/ 600086C :                     
(1) 1231/ 600086C :                     		align 4
(1) 1232/ 600086C :                     
(1) 1233/ 600086C :                     ; ---------------------------------------
(1) 1234/ 600086C :                     ; Init
(1) 1235/ 600086C :                     ; ---------------------------------------
(1) 1236/ 600086C :                     
(1) 1237/ 600086C :                     MstrMode_2D_i:
(1) 1238/ 600086C : D113                		mov	#CACHE_MASTER,r1
(1) 1239/ 600086E : 9229                		mov	#(CACHE_MASTER_E-CACHE_MASTER)/4,r2
(1) 1240/ 6000870 : D013                		mov	#Mars_CacheRamCode,r0
(1) 1241/ 6000872 : 400B                		jsr	@r0
(1) 1242/ 6000874 : 0009                		nop
(1) 1243/ 6000876 : 9E26                		mov	#Dreq_ScrlBuff,r14
(1) 1244/ 6000878 : C602                		mov	@(marsGbl_DreqRead,gbr),r0
(1) 1245/ 600087A : 3E0C                		add	r0,r14
(1) 1246/ 600087C : 51E1                		mov	@(mscrl_xpos,r14),r1
(1) 1247/ 600087E : 4129                		shlr16	r1
(1) 1248/ 6000880 : 52E2                		mov	@(mscrl_ypos,r14),r2
(1) 1249/ 6000882 : 4229                		shlr16	r2
(1) 1250/ 6000884 : 50E0                		mov	@(mscrl_Art,r14),r0
(1) 1251/ 6000886 : D308                		mov 	#_vdpreg,r3
(1) 1252/ 6000888 : C20A                		mov	r0,@(marsGbl_Scrl_Art,gbr)
(1) 1253/ 600088A : 602F                		exts.w	r2,r0
(1) 1254/ 600088C : C205                		mov	r0,@(marsGbl_Scrl_Ypos,gbr)
(1) 1255/ 600088E : 601F                		exts.w	r1,r0
(1) 1256/ 6000890 : C204                		mov	r0,@(marsGbl_Scrl_Xpos,gbr)
(1) 1257/ 6000892 : E002                		mov	#2,r0
(1) 1258/ 6000894 : C20B                		mov	r0,@(marsGbl_Scrl_DrwAll,gbr)
(1) 1259/ 6000896 : E001                		mov	#1,r0
(1) 1260/ 6000898 : 8031                		mov.b	r0,@(bitmapmd,r3)
(1) 1261/ 600089A : D104                		mov	#_sysreg+comm12+1,r1
(1) 1262/ 600089C : 6010                		mov.b	@r1,r0
(1) 1263/ 600089E : C97F                		and	#$7F,r0
(1) 1264/ 60008A0 : A012                		bra	MstrMode_2D
(1) 1265/ 60008A2 : 2100                		mov.b	r0,@r1
(1) 1266/ 60008A4 :                     		align 4
(1) 1267/ 60008A4 : 2000 4020 2000      		ltorg
          60008AA : 4100 2000 402D 
          60008B0 : 2000 4200 2000 
          60008B6 : 402C 0600 0840 
          60008BC : 0600 1380 0600 
          60008C2 : 0B7C 0006 0600    
(1) 1268/ 60008C8 :                     
(1) 1269/ 60008C8 :                     ; ---------------------------------------
(1) 1270/ 60008C8 :                     ; Loop
(1) 1271/ 60008C8 :                     ; ---------------------------------------
(1) 1272/ 60008C8 :                     
(1) 1273/ 60008C8 :                     		align 4
(1) 1274/ 60008C8 :                     MstrMode_2D:
(1) 1275/ 60008C8 :                     	; ---------------------------------------
(1) 1276/ 60008C8 :                     	; Set scrolling varaibles
(1) 1277/ 60008C8 : C602                		mov	@(marsGbl_DreqRead,gbr),r0
(1) 1278/ 60008CA : 9EB5                		mov	#Dreq_ScrlBuff,r14
(1) 1279/ 60008CC : 3E0C                		add	r0,r14
(1) 1280/ 60008CE : E100                		mov	#0,r1				; X increment
(1) 1281/ 60008D0 : E200                		mov	#0,r2				; Y increment
(1) 1282/ 60008D2 : E302                		mov	#2,r3				; Drawflags counter
(1) 1283/ 60008D4 : 56E1                		mov	@(mscrl_xpos,r14),r6
(1) 1284/ 60008D6 : 94B0                		mov	#SET_MSCRLSIZE/2,r4		; Scroll speed limit
(1) 1285/ 60008D8 : C604                		mov	@(marsGbl_Scrl_Xpos,gbr),r0
(1) 1286/ 60008DA : 95AF                		mov	#-SET_MSCRLSIZE,r5		; -block_size
(1) 1287/ 60008DC : 58E2                		mov	@(mscrl_ypos,r14),r8
(1) 1288/ 60008DE : 6703                		mov	r0,r7
(1) 1289/ 60008E0 : C605                		mov	@(marsGbl_Scrl_Ypos,gbr),r0
(1) 1290/ 60008E2 : 6903                		mov	r0,r9
(1) 1291/ 60008E4 : 4629                		shlr16	r6			; X >> 16
(1) 1292/ 60008E6 : 666F                		exts.w	r6,r6			; extend
(1) 1293/ 60008E8 : 3670                		cmp/eq	r7,r6			; Xpos == Xold?
(1) 1294/ 60008EA : 891A                		bt	.x_old
(1) 1295/ 60008EC : 6163                		mov	r6,r1			; Make X increment
(1) 1296/ 60008EE : 3178                		sub	r7,r1
(1) 1297/ 60008F0 :                     
(1) 1298/ 60008F0 : 6063                		mov	r6,r0			; Check X&blocksize
(1) 1299/ 60008F2 : 2059                		and	r5,r0
(1) 1300/ 60008F4 : 2759                		and	r5,r7
(1) 1301/ 60008F6 : 3070                		cmp/eq	r7,r0
(1) 1302/ 60008F8 : 8913                		bt	.x_old
(1) 1303/ 60008FA : 4111                		cmp/pz	r1
(1) 1304/ 60008FC : 8B0A                		bf	.x_dirl
(1) 1305/ 60008FE : 0009                		nop
(1) 1306/ 6000900 : C60C                		mov	@(marsGbl_Scrl_DrwR,gbr),r0
(1) 1307/ 6000902 : 2008                		tst	r0,r0
(1) 1308/ 6000904 : 8B0D                		bf	.x_new
(1) 1309/ 6000906 : E000                		mov	#0,r0
(1) 1310/ 6000908 : C20D                		mov	r0,@(marsGbl_Scrl_DrwL,gbr)
(1) 1311/ 600090A : 6033                		mov	r3,r0
(1) 1312/ 600090C : C20C                		mov	r0,@(marsGbl_Scrl_DrwR,gbr)
(1) 1313/ 600090E : A008                		bra	.x_new
(1) 1314/ 6000910 : 0009                		nop
(1) 1315/ 6000912 : 0009                		nop ; align
(1) 1316/ 6000914 :                     .x_dirl:
(1) 1317/ 6000914 : C60D                		mov	@(marsGbl_Scrl_DrwL,gbr),r0
(1) 1318/ 6000916 : 2008                		tst	r0,r0
(1) 1319/ 6000918 : 8B03                		bf	.x_new
(1) 1320/ 600091A : E000                		mov	#0,r0
(1) 1321/ 600091C : C20C                		mov	r0,@(marsGbl_Scrl_DrwR,gbr)
(1) 1322/ 600091E : 6033                		mov	r3,r0
(1) 1323/ 6000920 : C20D                		mov	r0,@(marsGbl_Scrl_DrwL,gbr)
(1) 1324/ 6000922 :                     .x_new:
(1) 1325/ 6000922 :                     .x_old:
(1) 1326/ 6000922 : 4829                		shlr16	r8				; Y >> 16
(1) 1327/ 6000924 : 688F                		exts.w	r8,r8				; extend
(1) 1328/ 6000926 : 3890                		cmp/eq	r9,r8				; Ypos == Yold?
(1) 1329/ 6000928 : 8919                		bt	.y_old
(1) 1330/ 600092A : 6283                		mov	r8,r2				; Make Y increment
(1) 1331/ 600092C : 3298                		sub	r9,r2
(1) 1332/ 600092E :                     
(1) 1333/ 600092E : 6083                		mov	r8,r0				; Check Y&blocksize
(1) 1334/ 6000930 : 2059                		and	r5,r0
(1) 1335/ 6000932 : 2959                		and	r5,r9
(1) 1336/ 6000934 : 3090                		cmp/eq	r9,r0
(1) 1337/ 6000936 : 8912                		bt	.y_old
(1) 1338/ 6000938 : 4215                		cmp/pl	r2
(1) 1339/ 600093A : 8B09                		bf	.y_dirl
(1) 1340/ 600093C : C60E                		mov	@(marsGbl_Scrl_DrwD,gbr),r0
(1) 1341/ 600093E : 2008                		tst	r0,r0
(1) 1342/ 6000940 : 8B0D                		bf	.y_new
(1) 1343/ 6000942 : E000                		mov	#0,r0
(1) 1344/ 6000944 : C20F                		mov	r0,@(marsGbl_Scrl_DrwU,gbr)
(1) 1345/ 6000946 : 6033                		mov	r3,r0
(1) 1346/ 6000948 : C20E                		mov	r0,@(marsGbl_Scrl_DrwD,gbr)
(1) 1347/ 600094A : A008                		bra	.y_new
(1) 1348/ 600094C : 0009                		nop
(1) 1349/ 600094E : 0009                		nop ; align
(1) 1350/ 6000950 :                     .y_dirl:
(1) 1351/ 6000950 : C60F                		mov	@(marsGbl_Scrl_DrwU,gbr),r0
(1) 1352/ 6000952 : 2008                		tst	r0,r0
(1) 1353/ 6000954 : 8B03                		bf	.y_new
(1) 1354/ 6000956 : E000                		mov	#0,r0
(1) 1355/ 6000958 : C20E                		mov	r0,@(marsGbl_Scrl_DrwD,gbr)
(1) 1356/ 600095A : 6033                		mov	r3,r0
(1) 1357/ 600095C : C20F                		mov	r0,@(marsGbl_Scrl_DrwU,gbr)
(1) 1358/ 600095E :                     .y_new:
(1) 1359/ 600095E :                     
(1) 1360/ 600095E :                     .y_old:
(1) 1361/ 600095E : 6083                		mov	r8,r0
(1) 1362/ 6000960 : C205                		mov	r0,@(marsGbl_Scrl_Ypos,gbr)
(1) 1363/ 6000962 :                     ; 		mov	r8,r0
(1) 1364/ 6000962 :                     ; 		mov	r0,@(marsGbl_Scrl_Yold,gbr)	; Update Yold
(1) 1365/ 6000962 :                     ; 		mov	r6,r0
(1) 1366/ 6000962 :                     ; 		mov	r0,@(marsGbl_Scrl_Xold,gbr)	; Update Xold
(1) 1367/ 6000962 : 6063                		mov	r6,r0
(1) 1368/ 6000964 : C204                		mov	r0,@(marsGbl_Scrl_Xpos,gbr)
(1) 1369/ 6000966 : 611F                		exts.w	r1,r1
(1) 1370/ 6000968 : C100                		mov.w	r0,@(marsGbl_XShift,gbr)	; Write Xshift here
(1) 1371/ 600096A : 622F                		exts.w	r2,r2
(1) 1372/ 600096C :                     
(1) 1373/ 600096C :                     	; ---------------------------------------
(1) 1374/ 600096C :                     	; Increment FB draw TL and Y pos
(1) 1375/ 600096C :                     	; r1 - X increment
(1) 1376/ 600096C :                     	; r2 - Y increment
(1) 1377/ 600096C : C612                		mov	@(marsGbl_Scrl_Hght,gbr),r0
(1) 1378/ 600096E : 6603                		mov	r0,r6
(1) 1379/ 6000970 : C609                		mov	@(marsGbl_Scrl_FbY,gbr),r0
(1) 1380/ 6000972 : 6503                		mov	r0,r5
(1) 1381/ 6000974 : C610                		mov	@(marsGbl_Scrl_Size,gbr),r0
(1) 1382/ 6000976 : 6403                		mov	r0,r4
(1) 1383/ 6000978 : C608                		mov	@(marsGbl_Scrl_FbTL,gbr),r0
(1) 1384/ 600097A : 301C                		add	r1,r0		; Add X
(1) 1385/ 600097C : 4115                		cmp/pl	r1
(1) 1386/ 600097E : 8B02                		bf	.yx_negtv
(1) 1387/ 6000980 : 3043                		cmp/ge	r4,r0
(1) 1388/ 6000982 : 8B00                		bf	.yx_negtv
(1) 1389/ 6000984 : 3048                		sub	r4,r0
(1) 1390/ 6000986 :                     .yx_negtv:
(1) 1391/ 6000986 : 4111                		cmp/pz	r1
(1) 1392/ 6000988 : 8902                		bt	.yx_postv
(1) 1393/ 600098A : 4011                		cmp/pz	r0
(1) 1394/ 600098C : 8900                		bt	.yx_postv
(1) 1395/ 600098E : 304C                		add	r4,r0
(1) 1396/ 6000990 :                     .yx_postv:
(1) 1397/ 6000990 : 352C                		add	r2,r5		; Add Y
(1) 1398/ 6000992 : 4215                		cmp/pl	r2
(1) 1399/ 6000994 : 8B02                		bf	.ypu_negtv
(1) 1400/ 6000996 : 3563                		cmp/ge	r6,r5
(1) 1401/ 6000998 : 8B00                		bf	.ypu_negtv
(1) 1402/ 600099A : 3568                		sub	r6,r5
(1) 1403/ 600099C :                     .ypu_negtv:
(1) 1404/ 600099C : 4211                		cmp/pz	r2
(1) 1405/ 600099E : 8902                		bt	.ypu_postv
(1) 1406/ 60009A0 : 4511                		cmp/pz	r5
(1) 1407/ 60009A2 : 8900                		bt	.ypu_postv
(1) 1408/ 60009A4 : 356C                		add	r6,r5
(1) 1409/ 60009A6 :                     .ypu_postv:
(1) 1410/ 60009A6 : 0009                		nop
(1) 1411/ 60009A8 : C208                		mov	r0,@(marsGbl_Scrl_FbTL,gbr)
(1) 1412/ 60009AA : 6053                		mov	r5,r0
(1) 1413/ 60009AC : C209                		mov	r0,@(marsGbl_Scrl_FbY,gbr)
(1) 1414/ 60009AE :                     	; ---------------------------------------
(1) 1415/ 60009AE :                     	; DRAW the blocks now
(1) 1416/ 60009AE :                     	; ---------------------------------------
(1) 1417/ 60009AE :                     ; 	cpu_me 2
(1) 1418/ 60009AE :                     ; 		mov	#_sysreg+comm14+1,r1		; Pre-draw the Super Sprites
(1) 1419/ 60009AE :                     ; .wait_slv_i:	mov.b	@r1,r0				; using Slave SH2
(1) 1420/ 60009AE :                     ; 		tst	r0,r0
(1) 1421/ 60009AE :                     ; 		bf	.wait_slv_i
(1) 1422/ 60009AE :                     ; 		mov	#1,r0				; Slave task $01
(1) 1423/ 60009AE :                     ; 		mov.b	r0,@r1
(1) 1424/ 60009AE : DE20                		mov	#_framebuffer,r14
(1) 1425/ 60009B0 : C610                		mov	@(marsGbl_Scrl_Size,gbr),r0
(1) 1426/ 60009B2 : 6D03                		mov	r0,r13
(1) 1427/ 60009B4 : C612                		mov	@(marsGbl_Scrl_Hght,gbr),r0
(1) 1428/ 60009B6 : 6C03                		mov	r0,r12
(1) 1429/ 60009B8 : C611                		mov	@(marsGbl_Scrl_Wdth,gbr),r0
(1) 1430/ 60009BA : 6B03                		mov	r0,r11
(1) 1431/ 60009BC : C608                		mov	@(marsGbl_Scrl_FbTL,gbr),r0
(1) 1432/ 60009BE : 6A03                		mov	r0,r10
(1) 1433/ 60009C0 : C609                		mov	@(marsGbl_Scrl_FbY,gbr),r0
(1) 1434/ 60009C2 : 6903                		mov	r0,r9
(1) 1435/ 60009C4 : C60A                		mov	@(marsGbl_Scrl_Art,gbr),r0
(1) 1436/ 60009C6 : 6803                		mov	r0,r8
(1) 1437/ 60009C8 : C605                		mov	@(marsGbl_Scrl_Ypos,gbr),r0
(1) 1438/ 60009CA : 6603                		mov	r0,r6
(1) 1439/ 60009CC : C604                		mov	@(marsGbl_Scrl_Xpos,gbr),r0
(1) 1440/ 60009CE : 6503                		mov	r0,r5
(1) 1441/ 60009D0 : C613                		mov	@(marsGbl_Scrl_FbOut,gbr),r0
(1) 1442/ 60009D2 : 3E0C                		add	r0,r14
(1) 1443/ 60009D4 : C602                		mov	@(marsGbl_DreqRead,gbr),r0
(1) 1444/ 60009D6 : 9732                		mov	#Dreq_ScrlData,r7
(1) 1445/ 60009D8 : 370C                		add	r0,r7
(1) 1446/ 60009DA : 9031                		mov	#-SET_MSCRLSIZE,r0	; -MSCRL_BLKSIZE
(1) 1447/ 60009DC : 2A09                		and	r0,r10			; Set FB top-left
(1) 1448/ 60009DE : 2909                		and	r0,r9
(1) 1449/ 60009E0 : C60B                		mov	@(marsGbl_Scrl_DrwAll,gbr),r0
(1) 1450/ 60009E2 : 2008                		tst	r0,r0
(1) 1451/ 60009E4 : 8905                		bt	.clr_init
(1) 1452/ 60009E6 : 4010                		dt	r0
(1) 1453/ 60009E8 : C20B                		mov	r0,@(marsGbl_Scrl_DrwAll,gbr)
(1) 1454/ 60009EA : B161                		bsr	MarsVideo_MapDrawAll
(1) 1455/ 60009EC : 0009                		nop
(1) 1456/ 60009EE : A008                		bra	.from_full
(1) 1457/ 60009F0 : 0009                		nop
(1) 1458/ 60009F2 :                     .clr_init:
(1) 1459/ 60009F2 : B0A9                 		bsr	Mars_CachePurge
(1) 1460/ 60009F4 : 0009                		nop
(1) 1461/ 60009F6 : B339                		bsr	MarsVideo_DrawFillBlk		; Redraw from refill boxes
(1) 1462/ 60009F8 : 0009                		nop
(1) 1463/ 60009FA : B1F1                 		bsr	MarsVideo_MapScrlUD
(1) 1464/ 60009FC : 0009                		nop
(1) 1465/ 60009FE : B1A1                		bsr	MarsVideo_MapScrlLR
(1) 1466/ 6000A00 : 0009                		nop
(1) 1467/ 6000A02 :                     .from_full:
(1) 1468/ 6000A02 : B0A1                		bsr	Mars_CachePurge
(1) 1469/ 6000A04 : 0009                		nop
(1) 1470/ 6000A06 : B27F                		bsr	MarsVideo_SuperSpr_Draw
(1) 1471/ 6000A08 : 0009                		nop
(1) 1472/ 6000A0A :                     ; 	cpu_me 1
(1) 1473/ 6000A0A : E100                		mov	#0,r1
(1) 1474/ 6000A0C : 9219                		mov	#240,r2				; Show scroll area 0 to 240
(1) 1475/ 6000A0E : B251                		bsr	MarsVideo_ShowScrlBg
(1) 1476/ 6000A10 : 0009                		nop
(1) 1477/ 6000A12 : B2BF                		bsr	MarsVideo_MkFillBlk		; Build refill boxes
(1) 1478/ 6000A14 : 0009                		nop
(1) 1479/ 6000A16 :                     ; 		mov	#_sysreg+comm14+1,r1
(1) 1480/ 6000A16 :                     ; .wait_slv_e:	mov.b	@r1,r0
(1) 1481/ 6000A16 :                     ; 		tst	r0,r0
(1) 1482/ 6000A16 :                     ; 		bf	.wait_slv_e
(1) 1483/ 6000A16 : B235                		bsr	marsScrl_CopyTopBot
(1) 1484/ 6000A18 : 0009                		nop
(1) 1485/ 6000A1A : 9212                		mov	#240,r2				; $xxFF patcher
(1) 1486/ 6000A1C : D305                		mov	#FBVRAM_PATCH,r3
(1) 1487/ 6000A1E : B10F                		bsr	MarsVideo_FixTblShift
(1) 1488/ 6000A20 : E100                		mov	#0,r1
(1) 1489/ 6000A22 :                     
(1) 1490/ 6000A22 :                     	; ---------------------------------------
(1) 1491/ 6000A22 :                     	; Make the scroll area visible and
(1) 1492/ 6000A22 :                     	; fix the broken lines.
(1) 1493/ 6000A22 : 0009                 		nop
(1) 1494/ 6000A24 : C501                		mov.w	@(marsGbl_ThisFrame,gbr),r0
(1) 1495/ 6000A26 : CA01                		xor	#1,r0
(1) 1496/ 6000A28 : C101                		mov.w	r0,@(marsGbl_ThisFrame,gbr)
(1) 1497/ 6000A2A : AEC5                		bra	master_loop
(1) 1498/ 6000A2C : 0009                		nop
(1) 1499/ 6000A2E :                     		align 4
(1) 1500/ 6000A30 : 2400 0000 0001      		ltorg
          6000A36 : E000 0600 0008 
          6000A3C : FFF0 0200 FFF0 
          6000A42 : 00F0             
(1) 1501/ 6000A44 :                     
(1) 1502/ 6000A44 :                     ; ====================================================================
(1) 1503/ 6000A44 :                     ; ----------------------------------------------------------------
(1) 1504/ 6000A44 :                     ; Slave entry
(1) 1505/ 6000A44 :                     ; ----------------------------------------------------------------
(1) 1506/ 6000A44 :                     
(1) 1507/ 6000A44 :                     		align 4
(1) 1508/ 6000A44 :                     SH2_S_Entry:
(1) 1509/ 6000A44 : DF22                		mov	#STACK_SLV,r15		; Reset stack
(1) 1510/ 6000A46 : D023                		mov	#SH2_Slave,r0		; Reset vbr
(1) 1511/ 6000A48 : 402E                		ldc	r0,vbr
(1) 1512/ 6000A4A : 9151                		mov.l	#_FRT,r1		; Free-run timer settings
(1) 1513/ 6000A4C : E000                		mov	#0,r0			; ** REQUIRED FOR REAL HARDWARE **
(1) 1514/ 6000A4E : 8010                		mov.b	r0,@(0,r1)
(1) 1515/ 6000A50 : E0E2                		mov.b	#$E2,r0
(1) 1516/ 6000A52 : 8017                		mov.b	r0,@(7,r1)
(1) 1517/ 6000A54 : E000                		mov	#0,r0
(1) 1518/ 6000A56 : 8014                		mov.b	r0,@(4,r1)
(1) 1519/ 6000A58 : E001                		mov	#1,r0
(1) 1520/ 6000A5A : 8015                		mov.b	r0,@(5,r1)
(1) 1521/ 6000A5C : E000                		mov	#0,r0
(1) 1522/ 6000A5E : 8016                		mov.b	r0,@(6,r1)
(1) 1523/ 6000A60 : E001                		mov	#1,r0
(1) 1524/ 6000A62 : 8011                		mov.b	r0,@(1,r1)
(1) 1525/ 6000A64 : E000                		mov	#0,r0
(1) 1526/ 6000A66 : 8013                		mov.b	r0,@(3,r1)
(1) 1527/ 6000A68 : 8012                		mov.b	r0,@(2,r1)
(1) 1528/ 6000A6A : E0F2                		mov.b	#$F2,r0			; <-- PWM interrupt needs this
(1) 1529/ 6000A6C : 8017                		mov.b	r0,@(7,r1)
(1) 1530/ 6000A6E : E000                		mov	#0,r0
(1) 1531/ 6000A70 : 8014                		mov.b	r0,@(4,r1)
(1) 1532/ 6000A72 : E001                		mov	#1,r0
(1) 1533/ 6000A74 : 8015                		mov.b	r0,@(5,r1)
(1) 1534/ 6000A76 : E0E2                		mov.b	#$E2,r0
(1) 1535/ 6000A78 : 8017                		mov.b	r0,@(7,r1)		; <-- ***
(1) 1536/ 6000A7A :                     	; Extra interrupt settings
(1) 1537/ 6000A7A : 903A                		mov.w   #$FEE2,r0		; Extra interrupt priority levels ($FFFFFEE2)
(1) 1538/ 6000A7C : 913A                		mov     #(3<<4)|(5<<8),r1	; (DMA_LVL<<8)|(WDG_LVL<<4) Current: WDG 3 DMA 5
(1) 1539/ 6000A7E : 2011                		mov.w   r1,@r0
(1) 1540/ 6000A80 : 9039                		mov.w   #$FEE4,r0		; Vector jump number for Watchdog ($FFFFFEE4)
(1) 1541/ 6000A82 : 9139                		mov     #($120/4)<<8,r1		; (vbr+POINTER)<<8
(1) 1542/ 6000A84 : 2011                		mov.w   r1,@r0
(1) 1543/ 6000A86 : E0A8                		mov.b	#$A8,r0			; Vector jump number for DMACHANNEL1 ($FFFFFFA8)
(1) 1544/ 6000A88 : E149                		mov     #($124/4),r1		; (vbr+POINTER)
(1) 1545/ 6000A8A : 2012                		mov	r1,@r0
(1) 1546/ 6000A8C : D012                		mov	#RAM_Mars_Global,r0	; Reset gbr
(1) 1547/ 6000A8E : 401E                		ldc	r0,gbr
(1) 1548/ 6000A90 :                     
(1) 1549/ 6000A90 :                     	; **** CD32X ****
(1) 1559/ 6000A90 : B0AC                		bsr	MarsSound_Init		; Init sound
(1) 1560/ 6000A92 : 0009                		nop
(1) 1561/ 6000A94 :                     
(1) 1562/ 6000A94 :                     ; ====================================================================
(1) 1563/ 6000A94 :                     ; ----------------------------------------------------------------
(1) 1564/ 6000A94 :                     ; Slave main code
(1) 1565/ 6000A94 :                     ; ----------------------------------------------------------------
(1) 1566/ 6000A94 :                     
(1) 1567/ 6000A94 :                     SH2_S_HotStart:
(1) 1568/ 6000A94 : E0F0                		mov.b	#$F0,r0			; ** $F0
(1) 1569/ 6000A96 : 600C                		extu.b	r0,r0
(1) 1570/ 6000A98 : 400E                		ldc	r0,sr
(1) 1571/ 6000A9A : 912E                		mov.w	#$FE80,r1		; $FFFFFE80
(1) 1572/ 6000A9C : 902E                		mov.w	#$A518,r0		; Disable Watchdog
(1) 1573/ 6000A9E : 2101                		mov.w	r0,@r1
(1) 1574/ 6000AA0 : B052                		bsr	Mars_CachePurge
(1) 1575/ 6000AA2 : 0009                		nop
(1) 1576/ 6000AA4 : D10D                		mov	#CACHE_SLAVE,r1
(1) 1577/ 6000AA6 : 922A                		mov	#(CACHE_SLAVE_E-CACHE_SLAVE)/4,r2
(1) 1578/ 6000AA8 : D00D                		mov	#Mars_CacheRamCode,r0
(1) 1579/ 6000AAA : 400B                		jsr	@r0
(1) 1580/ 6000AAC : 0009                		nop
(1) 1581/ 6000AAE : D10D                		mov	#_sysreg,r1
(1) 1582/ 6000AB0 : 6011                		mov.w	@r1,r0
(1) 1583/ 6000AB2 : CB03                		or	#CMDIRQ_ON|PWMIRQ_ON,r0		; Enable these interrupts
(1) 1584/ 6000AB4 : 2101                		mov.w	r0,@r1
(1) 1585/ 6000AB6 : D10C                		mov	#_sysreg+comm12,r1
(1) 1586/ 6000AB8 : 6011                .wait_mst:	mov.w	@r1,r0
(1) 1587/ 6000ABA : 2008                		tst	r0,r0
(1) 1588/ 6000ABC : 8BFC                		bf	.wait_mst
(1) 1589/ 6000ABE : E1B0                		mov	#_DMAOPERATION,r1		; Enable DMA operation
(1) 1590/ 6000AC0 : E001                		mov	#1,r0
(1) 1591/ 6000AC2 : 2102                		mov	r0,@r1
(1) 1592/ 6000AC4 : E020                		mov.b	#$20,r0				; Interrupts ON
(1) 1593/ 6000AC6 : 400E                		ldc	r0,sr
(1) 1594/ 6000AC8 : D008                		mov	#slave_loop,r0
(1) 1595/ 6000ACA : 402B                		jmp	@r0
(1) 1596/ 6000ACC : 0009                		nop
(1) 1597/ 6000ACE :                     		align 4
(1) 1598/ 6000AD0 : C000 0800 0600      		ltorg
          6000AD6 : 0128 0600 15E0 
          6000ADC : 0600 1398 0600 
          6000AE2 : 0B7C 2000 4000 
          6000AE8 : 2000 402C 0600 
          6000AEE : 0B00 FE10 FEE2 
          6000AF4 : 0530 FEE4 4800 
          6000AFA : FE80 A518 0090    
(1) 1599/ 6000B00 :                     
(1) 1600/ 6000B00 :                     ; ----------------------------------------------------------------
(1) 1601/ 6000B00 :                     ; SLAVE CPU loop
(1) 1602/ 6000B00 :                     ; ----------------------------------------------------------------
(1) 1603/ 6000B00 :                     
(1) 1604/ 6000B00 :                     		align 4
(1) 1605/ 6000B00 :                     slave_loop:
(1) 1607/ 6000B00 : D10D                		mov	#_sysreg+comm1,r1		; DEBUG counter
(1) 1608/ 6000B02 : 6010                		mov.b	@r1,r0
(1) 1609/ 6000B04 : 7001                		add	#1,r0
(1) 1610/ 6000B06 : 2100                		mov.b	r0,@r1
(1) 1612/ 6000B08 : D10C                		mov	#_sysreg+comm14,r1		; Frame-ready bitclear
(1) 1613/ 6000B0A : 6011                		mov.w	@r1,r0
(1) 1614/ 6000B0C : D10C                		mov	#slv_list,r1
(1) 1615/ 6000B0E : C97F                		and	#$7F,r0
(1) 1616/ 6000B10 : 4008                		shll2	r0
(1) 1617/ 6000B12 : 310C                		add	r0,r1
(1) 1618/ 6000B14 : 6012                		mov	@r1,r0
(1) 1619/ 6000B16 : 402B                		jmp	@r0
(1) 1620/ 6000B18 : 0009                		nop
(1) 1621/ 6000B1A :                     		align 4
(1) 1622/ 6000B1C :                     slv_list:
(1) 1623/ 6000B1C : 0600 0B24           		dc.l SlvMode_00
(1) 1624/ 6000B20 : 0600 0B28           		dc.l SlvMode_01
(1) 1625/ 6000B24 :                     
(1) 1626/ 6000B24 :                     ; ====================================================================
(1) 1627/ 6000B24 :                     ; ----------------------------------------------------------------
(1) 1628/ 6000B24 :                     ; NOTHING
(1) 1629/ 6000B24 :                     ; ----------------------------------------------------------------
(1) 1630/ 6000B24 :                     
(1) 1631/ 6000B24 :                     SlvMode_00:
(1) 1632/ 6000B24 : AFEC                		bra	slave_loop
(1) 1633/ 6000B26 : 0009                		nop
(1) 1634/ 6000B28 :                     
(1) 1635/ 6000B28 :                     ; ====================================================================
(1) 1636/ 6000B28 :                     ; ----------------------------------------------------------------
(1) 1637/ 6000B28 :                     ;
(1) 1638/ 6000B28 :                     ; ----------------------------------------------------------------
(1) 1639/ 6000B28 :                     
(1) 1640/ 6000B28 :                     		align 4
(1) 1641/ 6000B28 :                     SlvMode_01:
(1) 1642/ 6000B28 : B00E                		bsr	Mars_CachePurge
(1) 1643/ 6000B2A : 0009                		nop
(1) 1644/ 6000B2C :                     ; 		bsr	MarsVideo_SuperSpr_Cache
(1) 1645/ 6000B2C :                     ; 		nop
(1) 1646/ 6000B2C :                     
(1) 1647/ 6000B2C : D105                		mov	#_sysreg+comm14+1,r1
(1) 1648/ 6000B2E : E000                		mov	#0,r0
(1) 1649/ 6000B30 : 2100                		mov.b	r0,@r1
(1) 1650/ 6000B32 : AFE5                		bra	slave_loop
(1) 1651/ 6000B34 : 0009                		nop
(1) 1652/ 6000B36 :                     		align 4
(1) 1653/ 6000B38 : 2000 4021 2000      		ltorg
          6000B3E : 402E 0600 0B1C 
          6000B44 : 2000 402F          
(1) 1654/ 6000B48 :                     
(1) 1655/ 6000B48 :                     ; ====================================================================
(1) 1656/ 6000B48 :                     ; ----------------------------------------------------------------
(1) 1657/ 6000B48 :                     ; Shared routines
(1) 1658/ 6000B48 :                     ; ----------------------------------------------------------------
(1) 1659/ 6000B48 :                     
(1) 1660/ 6000B48 :                     ; --------------------------------------------------------
(1) 1661/ 6000B48 :                     ; Mars_CachePurge
(1) 1662/ 6000B48 :                     ;
(1) 1663/ 6000B48 :                     ; Purges the internal cache, call this when needed.
(1) 1664/ 6000B48 :                     ; --------------------------------------------------------
(1) 1665/ 6000B48 :                     
(1) 1666/ 6000B48 :                     		align 4
(1) 1667/ 6000B48 :                     Mars_CachePurge:
(1) 1668/ 6000B48 : 9136                		mov.w	#_CCR&$FFFF,r1		; Purge ON, Cache OFF
(1) 1669/ 6000B4A : E010                		mov	#%10000,r0
(1) 1670/ 6000B4C : 2100                		mov.b	r0,@r1
(1) 1671/ 6000B4E : 0009                		nop
(1) 1672/ 6000B50 : 0009                		nop
(1) 1673/ 6000B52 : 0009                		nop
(1) 1674/ 6000B54 : 0009                		nop
(1) 1675/ 6000B56 : 0009                		nop
(1) 1676/ 6000B58 : 0009                		nop
(1) 1677/ 6000B5A : 0009                		nop
(1) 1678/ 6000B5C : E009                		mov	#%01001,r0		; Purge OFF, Two-Way mode, Cache ON
(1) 1679/ 6000B5E : 000B                		rts
(1) 1680/ 6000B60 : 2100                		mov.b	r0,@r1
(1) 1681/ 6000B62 :                     
(1) 1682/ 6000B62 :                     ; ----------------------------------------------------------------
(1) 1683/ 6000B62 :                     ; Mars_ClearCacheCode
(1) 1684/ 6000B62 :                     ;
(1) 1685/ 6000B62 :                     ; Clear the entire "fast code" section for the current CPU
(1) 1686/ 6000B62 :                     ; ----------------------------------------------------------------
(1) 1687/ 6000B62 :                     
(1) 1688/ 6000B62 :                     		align 4
(1) 1689/ 6000B64 :                     Mars_ClearCacheCode:
(1) 1690/ 6000B64 : D112                		mov.l	#$C0000000+$800,r1
(1) 1691/ 6000B66 : E000                		mov	#0,r0
(1) 1692/ 6000B68 : 9227                		mov.w	#$80,r2
(1) 1693/ 6000B6A :                     .loop:
(1) 1694/ 6000B6A : 2106                		mov	r0,@-r1
(1) 1695/ 6000B6C : 2106                		mov	r0,@-r1
(1) 1696/ 6000B6E : 2106                		mov	r0,@-r1
(1) 1697/ 6000B70 : 2106                		mov	r0,@-r1
(1) 1698/ 6000B72 : 4210                		dt	r2
(1) 1699/ 6000B74 : 8BF9                		bf	.loop
(1) 1700/ 6000B76 : 000B                		rts
(1) 1701/ 6000B78 : 0009                		nop
(1) 1702/ 6000B7A :                     		align 4
(1) 1703/ 6000B7C :                     
(1) 1704/ 6000B7C :                     ; ----------------------------------------------------------------
(1) 1705/ 6000B7C :                     ; Mars_CacheRamCode
(1) 1706/ 6000B7C :                     ;
(1) 1707/ 6000B7C :                     ; Loads "fast code" into the SH2's cache, $800 bytes maximum.
(1) 1708/ 6000B7C :                     ;
(1) 1709/ 6000B7C :                     ; Input:
(1) 1710/ 6000B7C :                     ; r1 - CACHE Code to send
(1) 1711/ 6000B7C :                     ; r2 - Size/4
(1) 1712/ 6000B7C :                     ;
(1) 1713/ 6000B7C :                     ; Breaks:
(1) 1714/ 6000B7C :                     ; r3
(1) 1715/ 6000B7C :                     ; ----------------------------------------------------------------
(1) 1716/ 6000B7C :                     
(1) 1717/ 6000B7C :                     		align 4
(1) 1718/ 6000B7C :                     Mars_CacheRamCode:
(1) 1719/ 6000B7C : 4F03                		stc	sr,@-r15	; Interrupts OFF
(1) 1720/ 6000B7E : E0F0                		mov.b	#$F0,r0		; ** $F0
(1) 1721/ 6000B80 : 600C                		extu.b	r0,r0
(1) 1722/ 6000B82 : 400E                		ldc	r0,sr
(1) 1723/ 6000B84 : 9318                		mov	#_CCR,r3
(1) 1724/ 6000B86 : E010                		mov	#%00010000,r0	; Cache purge + Disable
(1) 1725/ 6000B88 : 2301                		mov.w	r0,@r3
(1) 1726/ 6000B8A : 0009                		nop
(1) 1727/ 6000B8C : 0009                		nop
(1) 1728/ 6000B8E : 0009                		nop
(1) 1729/ 6000B90 : 0009                		nop
(1) 1730/ 6000B92 : 0009                		nop
(1) 1731/ 6000B94 : 0009                		nop
(1) 1732/ 6000B96 : 0009                		nop
(1) 1733/ 6000B98 : 0009                		nop
(1) 1734/ 6000B9A : E009                		mov	#%00001001,r0	; Cache two-way mode + Enable
(1) 1735/ 6000B9C : 2301                		mov.w	r0,@r3
(1) 1736/ 6000B9E : D305                		mov 	#$C0000000,r3
(1) 1737/ 6000BA0 :                     .copy:
(1) 1738/ 6000BA0 : 6016                		mov 	@r1+,r0
(1) 1739/ 6000BA2 : 2302                		mov 	r0,@r3
(1) 1740/ 6000BA4 : 4210                		dt	r2
(1) 1741/ 6000BA6 : 8FFB                		bf/s	.copy
(1) 1742/ 6000BA8 : 7304                		add 	#4,r3
(1) 1743/ 6000BAA : 000B                		rts
(1) 1744/ 6000BAC : 4F07                		ldc	@r15+,sr
(1) 1745/ 6000BAE :                     		align 4
(1) 1746/ 6000BB0 : C000 0800 C000      		ltorg
          6000BB6 : 0000 FE92 0080    
(1) 1747/ 6000BBC :                     
(1) 1748/ 6000BBC :                     ; --------------------------------------------------------
(1) 1749/ 6000BBC :                     ; Mars_SetWatchdog
(1) 1750/ 6000BBC :                     ;
(1) 1751/ 6000BBC :                     ; Prepares watchdog interrupt
(1) 1752/ 6000BBC :                     ;
(1) 1753/ 6000BBC :                     ; Input:
(1) 1754/ 6000BBC :                     ; r1 - Watchdog CPU clock divider
(1) 1755/ 6000BBC :                     ; r2 - Watchdog Pre-timer
(1) 1756/ 6000BBC :                     ; --------------------------------------------------------
(1) 1757/ 6000BBC :                     
(1) 1758/ 6000BBC :                     		align 4
(1) 1759/ 6000BBC :                     Mars_SetWatchdog:
(1) 1760/ 6000BBC : 0402                		stc	sr,r4
(1) 1761/ 6000BBE : E0F0                		mov.b	#$F0,r0			; ** $F0
(1) 1762/ 6000BC0 : 600C                		extu.b	r0,r0
(1) 1763/ 6000BC2 : 400E                		ldc 	r0,sr
(1) 1764/ 6000BC4 : 930E                		mov.l	#_CCR,r3		; Refresh Cache
(1) 1765/ 6000BC6 : E008                		mov	#%00001000,r0		; Two-way mode
(1) 1766/ 6000BC8 : 2301                		mov.w	r0,@r3
(1) 1767/ 6000BCA : E019                		mov	#%00011001,r0		; Cache purge / Two-way mode / Cache ON
(1) 1768/ 6000BCC : 2301                		mov.w	r0,@r3
(1) 1769/ 6000BCE : 930A                		mov.w	#$FE80,r3		; $FFFFFE80
(1) 1770/ 6000BD0 : 900A                		mov.w	#$5A00,r0		; Watchdog pre-timer
(1) 1771/ 6000BD2 : 202B                		or	r2,r0
(1) 1772/ 6000BD4 : 2301                		mov.w	r0,@r3
(1) 1773/ 6000BD6 : 9008                		mov.w	#$A538,r0		; Enable Watchdog
(1) 1774/ 6000BD8 : 201B                		or	r1,r0
(1) 1775/ 6000BDA : 2301                		mov.w	r0,@r3
(1) 1776/ 6000BDC : 440E                		ldc	r4,sr
(1) 1777/ 6000BDE : 000B                		rts
(1) 1778/ 6000BE0 : 0009                		nop
(1) 1779/ 6000BE2 :                     		align 4
(1) 1780/ 6000BE4 : FE92 FE80 5A00      		ltorg
          6000BEA : A538             
(1) 1781/ 6000BEC :                     
(1) 1782/ 6000BEC :                     ; ====================================================================
(1) 1783/ 6000BEC :                     ; ----------------------------------------------------------------
(1) 1784/ 6000BEC :                     ; Includes
(1) 1785/ 6000BEC :                     ; ----------------------------------------------------------------
(1) 1786/ 6000BEC :                     
(1) 1787/ 6000BEC :                     		align 4
(1) 1788/ 6000BEC :                     		include "system/mars/sound.asm"
(2)    1/ 6000BEC :                     ; ====================================================================
(2)    2/ 6000BEC :                     ; ----------------------------------------------------------------
(2)    3/ 6000BEC :                     ; 32X Sound (For SLAVE CPU ONLY)
(2)    4/ 6000BEC :                     ;
(2)    5/ 6000BEC :                     ; Playback code (the PWM interrupt) is located at cache_slv.asm
(2)    6/ 6000BEC :                     ; ----------------------------------------------------------------
(2)    7/ 6000BEC :                     
(2)    8/ 6000BEC :                     ; --------------------------------------------------------
(2)    9/ 6000BEC :                     ; Settings
(2)   10/ 6000BEC :                     ; --------------------------------------------------------
(2)   11/ 6000BEC :                     
(2)   12/ 6000BEC : =$3E80               SAMPLE_RATE	equ 16000;22050;22050	; 22050 best, 32000 doesn't work
(2)   13/ 6000BEC : =$7                  MAX_PWMCHNL	equ 7
(2)   14/ 6000BEC :                     
(2)   15/ 6000BEC :                     ; --------------------------------------------------------
(2)   16/ 6000BEC :                     ; Structs
(2)   17/ 6000BEC :                     ; --------------------------------------------------------
(2)   18/ 6000BEC :                     
(2)   19/ 6000BEC :                     ; 32X sound channel
(2)   20/ 6000BEC : (MACRO)              		strct 0
(2)   20/ 6000BEC : =$6000BEC            GLBL_LASTPC     set *
(2)   20/    4B5C :                                     dephase
(2)   20/       0 :                                     phase 0
(2)   20/       0 : =$0                  GLBL_LASTORG    set *
(2)   21/       0 :                     mchnsnd_enbl	ds.l 1		; %E000 SLlr | Enable-Stereo,Loop,left,right
(2)   22/       4 :                     mchnsnd_read	ds.l 1		; READ point
(2)   23/       8 :                     mchnsnd_bank	ds.l 1		; CS1 or CS3
(2)   24/       C :                     mchnsnd_start	ds.l 1		; Start point $00xxxxxx << 8
(2)   25/      10 :                     mchnsnd_len	ds.l 1		; Lenght << 8
(2)   26/      14 :                     mchnsnd_loop	ds.l 1		; Loop point << 8
(2)   27/      18 :                     mchnsnd_pitch	ds.l 1		; Pitch $xx.xx
(2)   28/      1C :                     mchnsnd_vol	ds.l 1		; Volume ($0000-Max)
(2)   29/      20 :                     sizeof_marssnd	ds.l 0
(2)   30/      20 : (MACRO)              		endstrct
(2)   30/       0 :                                     org GLBL_LASTORG
(2)   30/ 6000BEC :                                     phase GLBL_LASTPC
(2)   31/ 6000BEC :                     
(2)   32/ 6000BEC :                     ; ====================================================================
(2)   33/ 6000BEC :                     ; --------------------------------------------------------
(2)   34/ 6000BEC :                     ; Init Sound PWM
(2)   35/ 6000BEC :                     ;
(2)   36/ 6000BEC :                     ; Cycle register formulas:
(2)   37/ 6000BEC :                     ; NTSC ((((23011361<<1)/SAMPLE_RATE+1)>>1)+1)
(2)   38/ 6000BEC :                     ; PAL  ((((22801467<<1)/SAMPLE_RATE+1)>>1)+1)
(2)   39/ 6000BEC :                     ;
(2)   40/ 6000BEC :                     ; NOTE: The CLICK sound after calling this is normal.
(2)   41/ 6000BEC :                     ; --------------------------------------------------------
(2)   42/ 6000BEC :                     
(2)   43/ 6000BEC :                     		align 4
(2)   44/ 6000BEC :                     MarsSound_Init:
(2)   45/ 6000BEC : 4F13                		stc	gbr,@-r15
(2)   46/ 6000BEE : D006                		mov	#_sysreg,r0
(2)   47/ 6000BF0 : 401E                		ldc	r0,gbr
(2)   48/ 6000BF2 : 900B                		mov	#$0105,r0					; Timing interval $01, output L/R
(2)   49/ 6000BF4 : C118                		mov.w	r0,@(timerctl,gbr)
(2)   50/ 6000BF6 : 900A                		mov	#((((23011361<<1)/SAMPLE_RATE+1)>>1)+1),r0	; Samplerate
(2)   51/ 6000BF8 : C119                		mov.w	r0,@(cycle,gbr)
(2)   52/ 6000BFA : E001                		mov	#1,r0
(2)   53/ 6000BFC : C11C                		mov.w	r0,@(monowidth,gbr)
(2)   54/ 6000BFE : C11C                		mov.w	r0,@(monowidth,gbr)
(2)   55/ 6000C00 : C11C                		mov.w	r0,@(monowidth,gbr)
(2)   56/ 6000C02 : 4F17                		ldc	@r15+,gbr
(2)   57/ 6000C04 : 000B                		rts
(2)   58/ 6000C06 : 0009                		nop
(2)   59/ 6000C08 :                     		align 4
(2)   60/ 6000C08 :                     
(2)   61/ 6000C08 :                     ; ====================================================================
(2)   62/ 6000C08 :                     
(2)   63/ 6000C08 : 2000 4000 0105      		ltorg			; Save literals
          6000C0E : 059F             
(2)   64/ 6000C10 :                     
(1) 1789/ 6000C10 :                     		include "system/mars/video.asm"
(2)    1/ 6000C10 :                     ; ====================================================================
(2)    2/ 6000C10 :                     ; ----------------------------------------------------------------
(2)    3/ 6000C10 :                     ; 32X Video
(2)    4/ 6000C10 :                     ;
(2)    5/ 6000C10 :                     ; Some routines are located on the cache folder for
(2)    6/ 6000C10 :                     ; speed reasons.
(2)    7/ 6000C10 :                     ; ----------------------------------------------------------------
(2)    8/ 6000C10 :                     
(2)    9/ 6000C10 :                     ; --------------------------------------------------------
(2)   10/ 6000C10 :                     ; Settings
(2)   11/ 6000C10 :                     ; --------------------------------------------------------
(2)   12/ 6000C10 :                     
(2)   13/ 6000C10 :                     ; 16x16 block sizes only.
(2)   14/ 6000C10 : =$10                 SET_MSCRLSIZE	equ 16
(2)   15/ 6000C10 : =$140                SET_MSCRLWDTH	equ 320
(2)   16/ 6000C10 : =$F0                 SET_MSCRLHGHT	equ 240
(2)   17/ 6000C10 :                     
(2)   18/ 6000C10 :                     ; FRAMEBUFFER
(2)   19/ 6000C10 : =$1FD80              FBVRAM_BLANK	equ $1FD80	; Location of the BLANK line
(2)   20/ 6000C10 : =$1E000              FBVRAM_PATCH	equ $1E000	; Framebuffer location for the affected XShift lines
(2)   21/ 6000C10 :                     
(2)   22/ 6000C10 :                     ; --------------------------------------------------------
(2)   23/ 6000C10 :                     ; Variables
(2)   24/ 6000C10 :                     ; --------------------------------------------------------
(2)   25/ 6000C10 :                     
(2)   26/ 6000C10 :                     ; ; Variables for 3D mode.
(2)   27/ 6000C10 :                     ; SCREEN_WIDTH	equ 320		; Screen width and height positions used
(2)   28/ 6000C10 :                     ; SCREEN_HEIGHT	equ 224		; by 3D object rendering
(2)   29/ 6000C10 :                     ; PLGN_TEXURE	equ %10000000	; plypz_type (MSB)
(2)   30/ 6000C10 :                     ; PLGN_TRI	equ %01000000
(2)   31/ 6000C10 :                     
(2)   32/ 6000C10 :                     ; --------------------------------------------------------
(2)   33/ 6000C10 :                     ; Structs
(2)   34/ 6000C10 :                     ; --------------------------------------------------------
(2)   35/ 6000C10 :                     ;
(2)   36/ 6000C10 :                     ; ** moved to shared.asm
(2)   37/ 6000C10 :                     
(2)   38/ 6000C10 :                     ; ====================================================================
(2)   39/ 6000C10 :                     ; ----------------------------------------------------------------
(2)   40/ 6000C10 :                     ; Init MARS Video
(2)   41/ 6000C10 :                     ;
(2)   42/ 6000C10 :                     ; Breaks:
(2)   43/ 6000C10 :                     ; r1-r4
(2)   44/ 6000C10 :                     ; ----------------------------------------------------------------
(2)   45/ 6000C10 :                     
(2)   46/ 6000C10 :                     		align 4
(2)   47/ 6000C10 :                     MarsVideo_Init:
(2)   48/ 6000C10 : D121                		mov	#_sysreg,r1
(2)   49/ 6000C12 : 9047                		mov 	#FM,r0			; Set SuperVDP permission for SH2
(2)   50/ 6000C14 : 8010                  		mov.b	r0,@(adapter,r1)	; ** The Genesis side will control the
(2)   51/ 6000C16 : D121                		mov	#_vdpreg,r1
(2)   52/ 6000C18 : E000                		mov	#0,r0			; Start at BLANK
(2)   53/ 6000C1A : 8011                		mov.b	r0,@(bitmapmd,r1)
(2)   54/ 6000C1C :                     
(2)   55/ 6000C1C :                     	; --------------------------------------------------------
(2)   56/ 6000C1C :                     	; Init scroll settings
(2)   57/ 6000C1C : 9143                		mov	#SET_MSCRLWDTH+SET_MSCRLSIZE,r1
(2)   58/ 6000C1E : 9243                		mov	#SET_MSCRLHGHT+SET_MSCRLSIZE,r2
(2)   59/ 6000C20 : 221E                		mulu	r1,r2
(2)   60/ 6000C22 : 6013                		mov	r1,r0
(2)   61/ 6000C24 : C211                		mov	r0,@(marsGbl_Scrl_Wdth,gbr)
(2)   62/ 6000C26 : 6023                		mov	r2,r0
(2)   63/ 6000C28 : C212                		mov	r0,@(marsGbl_Scrl_Hght,gbr)
(2)   64/ 6000C2A : 001A                		sts	macl,r0
(2)   65/ 6000C2C : C210                		mov	r0,@(marsGbl_Scrl_Size,gbr)
(2)   66/ 6000C2E : 903C                		mov	#$200,r0
(2)   67/ 6000C30 : C213                		mov	r0,@(marsGbl_Scrl_FbOut,gbr)
(2)   68/ 6000C32 : E000                		mov	#0,r0
(2)   69/ 6000C34 : C101                		mov.w	r0,@(marsGbl_ThisFrame,gbr)
(2)   70/ 6000C36 : C209                		mov	r0,@(marsGbl_Scrl_FbY,gbr)
(2)   71/ 6000C38 : C208                		mov	r0,@(marsGbl_Scrl_FbTL,gbr)
(2)   72/ 6000C3A :                     ; 		mov	r0,@(marsGbl_Scrl_Xpos,gbr)	; break on HW on reset
(2)   73/ 6000C3A :                     ; 		mov	r0,@(marsGbl_Scrl_Ypos,gbr)
(2)   74/ 6000C3A : 000B                		rts
(2)   75/ 6000C3C : 0009                		nop
(2)   76/ 6000C3E :                     		align 4
(2)   77/ 6000C40 :                     ; 		ltorg
(2)   78/ 6000C40 :                     
(2)   79/ 6000C40 :                     ; ====================================================================
(2)   80/ 6000C40 :                     ; ----------------------------------------------------------------
(2)   81/ 6000C40 :                     ; Subroutines
(2)   82/ 6000C40 :                     ; ----------------------------------------------------------------
(2)   83/ 6000C40 :                     
(2)   84/ 6000C40 :                     ; --------------------------------------------------------
(2)   85/ 6000C40 :                     ; MarsVideo_FixTblShift
(2)   86/ 6000C40 :                     ;
(2)   87/ 6000C40 :                     ; Fix the affected $xxFF lines by scrolling using the
(2)   88/ 6000C40 :                     ; linetable. MUST call this BEFORE flipping
(2)   89/ 6000C40 :                     ; the Framebuffer.
(2)   90/ 6000C40 :                     ;
(2)   91/ 6000C40 :                     ; Input:
(2)   92/ 6000C40 :                     ; r1 | Start line
(2)   93/ 6000C40 :                     ; r2 | Number of lines
(2)   94/ 6000C40 :                     ; r3 | Location for the fixed lines
(2)   95/ 6000C40 :                     ;
(2)   96/ 6000C40 :                     ; Breaks:
(2)   97/ 6000C40 :                     ; r7-r14
(2)   98/ 6000C40 :                     ; --------------------------------------------------------
(2)   99/ 6000C40 :                     
(2)  100/ 6000C40 :                     		align 4
(2)  101/ 6000C40 :                     MarsVideo_FixTblShift:
(2)  102/ 6000C40 : DE16                		mov	#_vdpreg,r14
(2)  103/ 6000C42 : 84E1                		mov.b	@(bitmapmd,r14),r0		; Check if we are on indexed mode
(2)  104/ 6000C44 : C903                		and	#%11,r0
(2)  105/ 6000C46 : 8801                		cmp/eq	#1,r0
(2)  106/ 6000C48 : 8B23                		bf	.ptchset
(2)  107/ 6000C4A : C500                		mov.w	@(marsGbl_XShift,gbr),r0	; XShift is set? (Note: external value)
(2)  108/ 6000C4C : C901                		and	#1,r0
(2)  109/ 6000C4E : 2008                		tst	r0,r0
(2)  110/ 6000C50 : 891F                		bt	.ptchset
(2)  111/ 6000C52 :                     
(2)  112/ 6000C52 : DE13                		mov	#_framebuffer,r14		; r14 - Framebuffer BASE
(2)  113/ 6000C54 : 6CE3                		mov	r14,r12				; r12 - Framebuffer output for the patched pixel lines
(2)  114/ 6000C56 : 3C3C                		add	r3,r12
(2)  115/ 6000C58 : 6013                		mov	r1,r0
(2)  116/ 6000C5A : 4008                		shll2	r0
(2)  117/ 6000C5C : 3E0C                		add	r0,r14
(2)  118/ 6000C5E : 6DE3                		mov	r14,r13				; r13 - Framebuffer lines to check
(2)  119/ 6000C60 : 6B23                		mov	r2,r11				; r11 - Lines to check
(2)  120/ 6000C62 : E0FF                		mov	#-1,r0
(2)  121/ 6000C64 : 6A0C                		extu.b	r0,r10				; r10 - AND byte to check ($FF)
(2)  122/ 6000C66 : 690D                		extu.w	r0,r9				;  r9 - AND word limit ($FFFF)
(2)  123/ 6000C68 :                     .loop:
(2)  124/ 6000C68 : 60D1                		mov.w	@r13,r0
(2)  125/ 6000C6A : 2099                		and	r9,r0
(2)  126/ 6000C6C : 6703                		mov	r0,r7
(2)  127/ 6000C6E : 20A9                		and	r10,r0
(2)  128/ 6000C70 : 30A0                		cmp/eq	r10,r0
(2)  129/ 6000C72 : 8B0B                		bf	.tblexit
(2)  130/ 6000C74 : 4700                		shll	r7
(2)  131/ 6000C76 : 37EC                		add	r14,r7
(2)  132/ 6000C78 : 60C3                		mov	r12,r0
(2)  133/ 6000C7A : 4001                		shlr	r0
(2)  134/ 6000C7C : 2D01                		mov.w	r0,@r13
(2)  135/ 6000C7E : 9315                		mov	#(320+4)/2,r3
(2)  136/ 6000C80 :                     .copy:
(2)  137/ 6000C80 : 6071                		mov.w	@r7,r0
(2)  138/ 6000C82 : 2C01                		mov.w	r0,@r12
(2)  139/ 6000C84 : 7702                		add	#2,r7
(2)  140/ 6000C86 : 4310                		dt	r3
(2)  141/ 6000C88 : 8FFA                		bf/s	.copy
(2)  142/ 6000C8A : 7C02                		add	#2,r12
(2)  143/ 6000C8C :                     .tblexit:
(2)  144/ 6000C8C : 4B10                		dt	r11
(2)  145/ 6000C8E : 8FEB                		bf/s	.loop
(2)  146/ 6000C90 : 7D02                		add	#2,r13
(2)  147/ 6000C92 :                     .ptchset:
(2)  148/ 6000C92 : 000B                		rts
(2)  149/ 6000C94 : 0009                		nop
(2)  150/ 6000C96 :                     		align 4
(2)  151/ 6000C98 : 2000 4000 2000      		ltorg
          6000C9E : 4100 2400 0000 
          6000CA4 : 0080 0150 0100 
          6000CAA : 0200 00A2          
(2)  152/ 6000CAE :                     
(2)  153/ 6000CAE :                     ; ====================================================================
(2)  154/ 6000CAE :                     ; ----------------------------------------------------------------
(2)  155/ 6000CAE :                     ; 2D Section
(2)  156/ 6000CAE :                     ;
(2)  157/ 6000CAE :                     ; Routines that write to the framebuffer are
(2)  158/ 6000CAE :                     ; located at cache_m_2D.asm
(2)  159/ 6000CAE :                     ; ----------------------------------------------------------------
(2)  160/ 6000CAE :                     
(2)  161/ 6000CAE :                     ; ----------------------------------------------------------------
(2)  162/ 6000CAE :                     ; MarsVideo_MapDrawAll
(2)  163/ 6000CAE :                     ;
(2)  164/ 6000CAE :                     ; r14 - Framebuffer output
(2)  165/ 6000CAE :                     ; r13 - Scroll size W*H
(2)  166/ 6000CAE :                     ; r12 - Scroll height
(2)  167/ 6000CAE :                     ; r11 - Scroll width
(2)  168/ 6000CAE :                     ; r10 - Scroll TL-pos read / 16 *
(2)  169/ 6000CAE :                     ;  r9 - Scroll Y-pos read / 16 *
(2)  170/ 6000CAE :                     ;  r8 - Graphics data
(2)  171/ 6000CAE :                     ;  r7 - Map data
(2)  172/ 6000CAE :                     ;  r6 - Map Y read index
(2)  173/ 6000CAE :                     ;  r5 - Map X read index
(2)  174/ 6000CAE :                     ;
(2)  175/ 6000CAE :                     ; ** CPU HEAVY ROUTINE **
(2)  176/ 6000CAE :                     ; ----------------------------------------------------------------
(2)  177/ 6000CAE :                     
(2)  178/ 6000CAE :                     		align 4
(2)  179/ 6000CB0 :                     MarsVideo_MapDrawAll:
(2)  180/ 6000CB0 : 4F22                		sts	pr,@-r15
(2)  181/ 6000CB2 : 2F56                		mov	r5,@-r15
(2)  182/ 6000CB4 : 2F66                		mov	r6,@-r15
(2)  183/ 6000CB6 : 2F96                		mov	r9,@-r15
(2)  184/ 6000CB8 : 2FA6                		mov	r10,@-r15
(2)  185/ 6000CBA :                     
(2)  186/ 6000CBA : 6093                		mov	r9,r0
(2)  187/ 6000CBC : E4F0                		mov	#-16,r4
(2)  188/ 6000CBE : 2049                		and	r4,r0
(2)  189/ 6000CC0 : 2B0F                		muls	r0,r11
(2)  190/ 6000CC2 : 001A                		sts	macl,r0		; Y block pos
(2)  191/ 6000CC4 : 64A3                		mov	r10,r4
(2)  192/ 6000CC6 : 340C                		add	r0,r4
(2)  193/ 6000CC8 : E2FC                		mov	#-4,r2
(2)  194/ 6000CCA : 2429                		and	r2,r4
(2)  195/ 6000CCC :                     
(2)  196/ 6000CCC : 6AB3                		mov	r11,r10
(2)  197/ 6000CCE : 4A09                		shlr2	r10
(2)  198/ 6000CD0 : 4A09                		shlr2	r10
(2)  199/ 6000CD2 :                     .x_loop:
(2)  200/ 6000CD2 : 6963                		mov	r6,r9
(2)  201/ 6000CD4 : 34D3                		cmp/ge	r13,r4
(2)  202/ 6000CD6 : 8B00                		bf	.tl_snap
(2)  203/ 6000CD8 : 34D8                		sub	r13,r4
(2)  204/ 6000CDA :                     .tl_snap:
(2)  205/ 6000CDA : 6243                		mov	r4,r2
(2)  206/ 6000CDC : 63C3                		mov	r12,r3
(2)  207/ 6000CDE : 4309                		shlr2	r3
(2)  208/ 6000CE0 : 4309                		shlr2	r3
(2)  209/ 6000CE2 :                     .y_loop:
(2)  210/ 6000CE2 : 430A                		lds	r3,mach
(2)  211/ 6000CE4 : 441A                		lds	r4,macl
(2)  212/ 6000CE6 :                     
(2)  213/ 6000CE6 : E30F                		mov	#(256/16)-1,r3
(2)  214/ 6000CE8 : 6493                		mov	r9,r4		; Y pos
(2)  215/ 6000CEA : 4409                		shlr2	r4
(2)  216/ 6000CEC : 4409                		shlr2	r4
(2)  217/ 6000CEE : 2439                		and	r3,r4
(2)  218/ 6000CF0 : 4408                		shll2	r4
(2)  219/ 6000CF2 : 4408                		shll2	r4
(2)  220/ 6000CF4 : 4400                		shll	r4
(2)  221/ 6000CF6 : E31F                		mov	#(512/16)-1,r3
(2)  222/ 6000CF8 : 6053                		mov	r5,r0		; X pos
(2)  223/ 6000CFA : 4009                		shlr2	r0
(2)  224/ 6000CFC : 4009                		shlr2	r0
(2)  225/ 6000CFE : 2039                		and	r3,r0
(2)  226/ 6000D00 : 304C                		add	r4,r0
(2)  227/ 6000D02 : 4000                		shll	r0
(2)  228/ 6000D04 : 6373                		mov	r7,r3
(2)  229/ 6000D06 : 330C                		add	r0,r3
(2)  230/ 6000D08 : 91D0                		mov	#$7FF,r1
(2)  231/ 6000D0A : 6031                		mov.w	@r3,r0
(2)  232/ 6000D0C : 6303                		mov	r0,r3
(2)  233/ 6000D0E : 2319                		and	r1,r3
(2)  234/ 6000D10 : E100                		mov	#0,r1
(2)  235/ 6000D12 : 2338                		tst	r3,r3
(2)  236/ 6000D14 : 8903                		bt	.blank
(2)  237/ 6000D16 : 4310                		dt	r3
(2)  238/ 6000D18 : 4318                		shll8	r3		; 16x16
(2)  239/ 6000D1A : 6133                		mov	r3,r1
(2)  240/ 6000D1C : 318C                		add	r8,r1
(2)  241/ 6000D1E :                     .blank:
(2)  242/ 6000D1E : 041A                		sts	macl,r4
(2)  243/ 6000D20 : 030A                		sts	mach,r3
(2)  244/ 6000D22 : B2A9                		bsr	scrlDrw_DrawBlk
(2)  245/ 6000D24 : 2F46                		mov	r4,@-r15
(2)  246/ 6000D26 : 64F6                		mov	@r15+,r4
(2)  247/ 6000D28 : 4310                		dt	r3
(2)  248/ 6000D2A : 8FDA                		bf/s	.y_loop
(2)  249/ 6000D2C : 7910                		add	#16,r9
(2)  250/ 6000D2E : 7410                		add	#16,r4
(2)  251/ 6000D30 : 4A10                		dt	r10
(2)  252/ 6000D32 : 8FCE                		bf/s	.x_loop
(2)  253/ 6000D34 : 7510                		add	#16,r5
(2)  254/ 6000D36 :                     .exit_lr:
(2)  255/ 6000D36 : 6AF6                		mov	@r15+,r10
(2)  256/ 6000D38 : 69F6                		mov	@r15+,r9
(2)  257/ 6000D3A : 66F6                		mov	@r15+,r6
(2)  258/ 6000D3C : 65F6                		mov	@r15+,r5
(2)  259/ 6000D3E : 4F26                		lds	@r15+,pr
(2)  260/ 6000D40 : 000B                		rts
(2)  261/ 6000D42 : 0009                		nop
(2)  262/ 6000D44 :                     		align 4
(2)  263/ 6000D44 :                     
(2)  264/ 6000D44 :                     ; ----------------------------------------------------------------
(2)  265/ 6000D44 :                     ; MarsVideo_MapScrlLR
(2)  266/ 6000D44 :                     ;
(2)  267/ 6000D44 :                     ; Input:
(2)  268/ 6000D44 :                     ; r14 | Framebuffer output
(2)  269/ 6000D44 :                     ; r13 | Scroll size W*H
(2)  270/ 6000D44 :                     ; r12 | Scroll height
(2)  271/ 6000D44 :                     ; r11 | Scroll width
(2)  272/ 6000D44 :                     ; r10 | Scroll TL-pos read
(2)  273/ 6000D44 :                     ;  r9 | Scroll Y-pos read
(2)  274/ 6000D44 :                     ;  r8 | Graphics data
(2)  275/ 6000D44 :                     ;  r7 | Map data
(2)  276/ 6000D44 :                     ;  r6 | Y pos
(2)  277/ 6000D44 :                     ;  r5 | X pos
(2)  278/ 6000D44 :                     ; ----------------------------------------------------------------
(2)  279/ 6000D44 :                     
(2)  280/ 6000D44 :                     		align 4
(2)  281/ 6000D44 :                     MarsVideo_MapScrlLR:
(2)  282/ 6000D44 : 4F22                		sts	pr,@-r15
(2)  283/ 6000D46 : 2F56                		mov	r5,@-r15
(2)  284/ 6000D48 : 2F66                		mov	r6,@-r15
(2)  285/ 6000D4A :                     
(2)  286/ 6000D4A : 2888                		tst	r8,r8
(2)  287/ 6000D4C : 8943                		bt	.exit_lr
(2)  288/ 6000D4E : E300                		mov	#0,r3
(2)  289/ 6000D50 : C60D                		mov	@(marsGbl_Scrl_DrwL,gbr),r0
(2)  290/ 6000D52 : 2008                		tst	r0,r0
(2)  291/ 6000D54 : 8B06                		bf	.dir_l
(2)  292/ 6000D56 : 93AA                		mov	#SET_MSCRLWDTH,r3
(2)  293/ 6000D58 : C60C                		mov	@(marsGbl_Scrl_DrwR,gbr),r0
(2)  294/ 6000D5A : 2008                		tst	r0,r0
(2)  295/ 6000D5C : 8B05                		bf	.dir_r
(2)  296/ 6000D5E : A03A                		bra	.exit_lr
(2)  297/ 6000D60 : 0009                		nop	; align
(2)  298/ 6000D62 : 0009                		nop
(2)  299/ 6000D64 :                     .dir_l:
(2)  300/ 6000D64 : 4010                		dt	r0
(2)  301/ 6000D66 : A002                		bra	.go_lr
(2)  302/ 6000D68 : C20D                		mov	r0,@(marsGbl_Scrl_DrwL,gbr)
(2)  303/ 6000D6A :                     .dir_r:
(2)  304/ 6000D6A : 4010                		dt	r0
(2)  305/ 6000D6C : C20C                		mov	r0,@(marsGbl_Scrl_DrwR,gbr)
(2)  306/ 6000D6E :                     .go_lr:
(2)  307/ 6000D6E : 353C                		add	r3,r5
(2)  308/ 6000D70 : 6093                		mov	r9,r0
(2)  309/ 6000D72 : E2F0                		mov	#-16,r2
(2)  310/ 6000D74 : 2029                		and	r2,r0
(2)  311/ 6000D76 : 2B0F                		muls	r0,r11
(2)  312/ 6000D78 : 001A                		sts	macl,r0		; Y block pos
(2)  313/ 6000D7A : 62A3                		mov	r10,r2
(2)  314/ 6000D7C : 323C                		add	r3,r2
(2)  315/ 6000D7E : 320C                		add	r0,r2
(2)  316/ 6000D80 : E3F0                		mov	#-16,r3
(2)  317/ 6000D82 : 2239                		and	r3,r2
(2)  318/ 6000D84 :                     
(2)  319/ 6000D84 : 63C3                		mov	r12,r3
(2)  320/ 6000D86 : 4309                		shlr2	r3
(2)  321/ 6000D88 : 4309                		shlr2	r3
(2)  322/ 6000D8A :                     .y_loop:
(2)  323/ 6000D8A : 430A                		lds	r3,mach
(2)  324/ 6000D8C : 441A                		lds	r4,macl
(2)  325/ 6000D8E :                     
(2)  326/ 6000D8E : E30F                		mov	#(256/16)-1,r3
(2)  327/ 6000D90 : 6463                		mov	r6,r4	; Y pos
(2)  328/ 6000D92 : 4409                		shlr2	r4
(2)  329/ 6000D94 : 4409                		shlr2	r4
(2)  330/ 6000D96 : 2439                		and	r3,r4
(2)  331/ 6000D98 : 4408                		shll2	r4
(2)  332/ 6000D9A : 4408                		shll2	r4
(2)  333/ 6000D9C : 4400                		shll	r4
(2)  334/ 6000D9E : E31F                		mov	#(512/16)-1,r3
(2)  335/ 6000DA0 : 6053                		mov	r5,r0	; X pos
(2)  336/ 6000DA2 : 4009                		shlr2	r0
(2)  337/ 6000DA4 : 4009                		shlr2	r0
(2)  338/ 6000DA6 : 2039                		and	r3,r0
(2)  339/ 6000DA8 : 304C                		add	r4,r0
(2)  340/ 6000DAA : 4000                		shll	r0
(2)  341/ 6000DAC : 6373                		mov	r7,r3
(2)  342/ 6000DAE : 330C                		add	r0,r3
(2)  343/ 6000DB0 :                     
(2)  344/ 6000DB0 : 917C                		mov	#$7FF,r1
(2)  345/ 6000DB2 : 6031                		mov.w	@r3,r0
(2)  346/ 6000DB4 : 6303                		mov	r0,r3
(2)  347/ 6000DB6 : 2319                		and	r1,r3
(2)  348/ 6000DB8 : E100                		mov	#0,r1
(2)  349/ 6000DBA : 2338                		tst	r3,r3
(2)  350/ 6000DBC : 8903                		bt	.blank
(2)  351/ 6000DBE : 4310                		dt	r3
(2)  352/ 6000DC0 : 4318                		shll8	r3		; 16x16
(2)  353/ 6000DC2 : 6133                		mov	r3,r1
(2)  354/ 6000DC4 : 318C                		add	r8,r1
(2)  355/ 6000DC6 :                     .blank:
(2)  356/ 6000DC6 : 041A                		sts	macl,r4
(2)  357/ 6000DC8 : 030A                		sts	mach,r3
(2)  358/ 6000DCA : B255                		bsr	scrlDrw_DrawBlk
(2)  359/ 6000DCC : 2F46                		mov	r4,@-r15
(2)  360/ 6000DCE : 64F6                		mov	@r15+,r4
(2)  361/ 6000DD0 : 4310                		dt	r3
(2)  362/ 6000DD2 : 8FDA                		bf/s	.y_loop
(2)  363/ 6000DD4 : 7610                		add	#16,r6
(2)  364/ 6000DD6 :                     .exit_lr:
(2)  365/ 6000DD6 : 66F6                		mov	@r15+,r6
(2)  366/ 6000DD8 : 65F6                		mov	@r15+,r5
(2)  367/ 6000DDA : 4F26                		lds	@r15+,pr
(2)  368/ 6000DDC : 000B                		rts
(2)  369/ 6000DDE : 0009                		nop
(2)  370/ 6000DE0 :                     		align 4
(2)  371/ 6000DE0 :                     
(2)  372/ 6000DE0 :                     ; ----------------------------------------------------------------
(2)  373/ 6000DE0 :                     ; MarsVideo_MapScrlUD
(2)  374/ 6000DE0 :                     ;
(2)  375/ 6000DE0 :                     ; Input:
(2)  376/ 6000DE0 :                     ; r14 | Framebuffer output
(2)  377/ 6000DE0 :                     ; r13 | Scroll size W*H
(2)  378/ 6000DE0 :                     ; r12 | Scroll height
(2)  379/ 6000DE0 :                     ; r11 | Scroll width
(2)  380/ 6000DE0 :                     ; r10 | Scroll TL-pos read
(2)  381/ 6000DE0 :                     ;  r9 | Scroll Y-pos read
(2)  382/ 6000DE0 :                     ;  r8 | Graphics data
(2)  383/ 6000DE0 :                     ;  r7 | Map data
(2)  384/ 6000DE0 :                     ;  r6 | Y pos
(2)  385/ 6000DE0 :                     ;  r5 | X pos
(2)  386/ 6000DE0 :                     ; ----------------------------------------------------------------
(2)  387/ 6000DE0 :                     
(2)  388/ 6000DE0 :                     		align 4
(2)  389/ 6000DE0 :                     MarsVideo_MapScrlUD:
(2)  390/ 6000DE0 : 4F22                		sts	pr,@-r15
(2)  391/ 6000DE2 : 2F56                		mov	r5,@-r15
(2)  392/ 6000DE4 : 2F66                		mov	r6,@-r15
(2)  393/ 6000DE6 : 2888                		tst	r8,r8
(2)  394/ 6000DE8 : 8946                		bt	.exit_ud
(2)  395/ 6000DEA : E300                		mov	#0,r3
(2)  396/ 6000DEC : C60F                		mov	@(marsGbl_Scrl_DrwU,gbr),r0
(2)  397/ 6000DEE : 2008                		tst	r0,r0
(2)  398/ 6000DF0 : 8B06                		bf	.dir_u
(2)  399/ 6000DF2 : 935D                		mov	#SET_MSCRLHGHT,r3
(2)  400/ 6000DF4 : C60E                		mov	@(marsGbl_Scrl_DrwD,gbr),r0
(2)  401/ 6000DF6 : 2008                		tst	r0,r0
(2)  402/ 6000DF8 : 8B05                		bf	.dir_d
(2)  403/ 6000DFA : A03D                		bra	.exit_ud
(2)  404/ 6000DFC : 0009                		nop
(2)  405/ 6000DFE : 0009                		nop
(2)  406/ 6000E00 :                     .dir_u:
(2)  407/ 6000E00 : 4010                		dt	r0
(2)  408/ 6000E02 : A002                		bra	.go_ud
(2)  409/ 6000E04 : C20F                		mov	r0,@(marsGbl_Scrl_DrwU,gbr)
(2)  410/ 6000E06 :                     .dir_d:
(2)  411/ 6000E06 : 4010                		dt	r0
(2)  412/ 6000E08 : C20E                		mov	r0,@(marsGbl_Scrl_DrwD,gbr)
(2)  413/ 6000E0A :                     .go_ud:
(2)  414/ 6000E0A : 363C                		add	r3,r6
(2)  415/ 6000E0C : 6093                		mov	r9,r0
(2)  416/ 6000E0E : 303C                		add	r3,r0
(2)  417/ 6000E10 : E4F0                		mov	#-16,r4
(2)  418/ 6000E12 : 2049                		and	r4,r0
(2)  419/ 6000E14 : 2B0F                		muls	r0,r11
(2)  420/ 6000E16 : 001A                		sts	macl,r0		; Y block pos
(2)  421/ 6000E18 : 64A3                		mov	r10,r4
(2)  422/ 6000E1A : 340C                		add	r0,r4
(2)  423/ 6000E1C : E3F0                		mov	#-16,r3
(2)  424/ 6000E1E : 2439                		and	r3,r4
(2)  425/ 6000E20 : 63B3                		mov	r11,r3
(2)  426/ 6000E22 : 4309                		shlr2	r3
(2)  427/ 6000E24 : 4309                		shlr2	r3
(2)  428/ 6000E26 :                     .y_loop:
(2)  429/ 6000E26 : 6243                		mov	r4,r2
(2)  430/ 6000E28 : 430A                		lds	r3,mach
(2)  431/ 6000E2A : 441A                		lds	r4,macl
(2)  432/ 6000E2C : E30F                		mov	#(256/16)-1,r3
(2)  433/ 6000E2E : 6463                		mov	r6,r4	; Y pos
(2)  434/ 6000E30 : 4409                		shlr2	r4
(2)  435/ 6000E32 : 4409                		shlr2	r4
(2)  436/ 6000E34 : 2439                		and	r3,r4
(2)  437/ 6000E36 : 4408                		shll2	r4
(2)  438/ 6000E38 : 4408                		shll2	r4
(2)  439/ 6000E3A : 4400                		shll	r4
(2)  440/ 6000E3C : E31F                		mov	#(512/16)-1,r3
(2)  441/ 6000E3E : 6053                		mov	r5,r0	; X pos
(2)  442/ 6000E40 : 4009                		shlr2	r0
(2)  443/ 6000E42 : 4009                		shlr2	r0
(2)  444/ 6000E44 : 2039                		and	r3,r0
(2)  445/ 6000E46 : 304C                		add	r4,r0
(2)  446/ 6000E48 : 4000                		shll	r0
(2)  447/ 6000E4A : 6373                		mov	r7,r3
(2)  448/ 6000E4C : 330C                		add	r0,r3
(2)  449/ 6000E4E :                     
(2)  450/ 6000E4E : 912D                		mov	#$7FF,r1
(2)  451/ 6000E50 : 6031                		mov.w	@r3,r0
(2)  452/ 6000E52 : 6303                		mov	r0,r3
(2)  453/ 6000E54 : 2319                		and	r1,r3
(2)  454/ 6000E56 : E100                		mov	#0,r1
(2)  455/ 6000E58 : 2338                		tst	r3,r3
(2)  456/ 6000E5A : 8903                		bt	.blank_lr
(2)  457/ 6000E5C : 4310                		dt	r3
(2)  458/ 6000E5E : 4318                		shll8	r3		; 16x16
(2)  459/ 6000E60 : 6133                		mov	r3,r1
(2)  460/ 6000E62 : 318C                		add	r8,r1
(2)  461/ 6000E64 :                     .blank_lr:
(2)  462/ 6000E64 : 041A                		sts	macl,r4
(2)  463/ 6000E66 : 030A                		sts	mach,r3
(2)  464/ 6000E68 : 0009                		nop ; align
(2)  465/ 6000E6A : B205                		bsr	scrlDrw_DrawBlk
(2)  466/ 6000E6C : 2F46                		mov	r4,@-r15
(2)  467/ 6000E6E : 64F6                		mov	@r15+,r4
(2)  468/ 6000E70 : 7410                		add	#16,r4	; <--
(2)  469/ 6000E72 : 4310                		dt	r3
(2)  470/ 6000E74 : 8FD7                		bf/s	.y_loop
(2)  471/ 6000E76 : 7510                		add	#16,r5
(2)  472/ 6000E78 :                     .exit_ud:
(2)  473/ 6000E78 : 66F6                		mov	@r15+,r6
(2)  474/ 6000E7A : 65F6                		mov	@r15+,r5
(2)  475/ 6000E7C : 4F26                		lds	@r15+,pr
(2)  476/ 6000E7E : 000B                		rts
(2)  477/ 6000E80 : 0009                		nop
(2)  478/ 6000E82 :                     		align 4
(2)  479/ 6000E84 :                     
(2)  480/ 6000E84 :                     ; ====================================================================
(2)  481/ 6000E84 :                     ; --------------------------------------------------------
(2)  482/ 6000E84 :                     ; Call this after drawing anything to the scrolling area
(2)  483/ 6000E84 :                     ; --------------------------------------------------------
(2)  484/ 6000E84 :                     
(2)  485/ 6000E84 :                     		align 4
(2)  486/ 6000E84 :                     marsScrl_CopyTopBot:
(2)  487/ 6000E84 : C613                		mov	@(marsGbl_Scrl_FbOut,gbr),r0
(2)  488/ 6000E86 : 6103                		mov	r0,r1
(2)  489/ 6000E88 : C610                		mov	@(marsGbl_Scrl_Size,gbr),r0
(2)  490/ 6000E8A : 6303                		mov	r0,r3
(2)  491/ 6000E8C : D006                		mov	#_framebuffer,r0
(2)  492/ 6000E8E : 310C                		add	r0,r1
(2)  493/ 6000E90 : 6213                		mov	r1,r2
(2)  494/ 6000E92 : 323C                		add	r3,r2
(2)  495/ 6000E94 : E350                		mov	#320/4,r3
(2)  496/ 6000E96 : 0009                		nop
(2)  497/ 6000E98 :                     .copy_top:
(2)  498/ 6000E98 : 6016                		mov	@r1+,r0
(2)  499/ 6000E9A : 0009                		nop
(2)  500/ 6000E9C : 2202                		mov	r0,@r2
(2)  501/ 6000E9E : 7204                		add	#4,r2
(2)  502/ 6000EA0 : 4310                		dt	r3
(2)  503/ 6000EA2 : 8BF9                		bf	.copy_top
(2)  504/ 6000EA4 : 000B                		rts
(2)  505/ 6000EA6 : 0009                		nop
(2)  506/ 6000EA8 :                     		align 4
(2)  507/ 6000EA8 : 2400 0000 07FF      		ltorg
          6000EAE : 0140 00F0          
(2)  508/ 6000EB2 :                     
(2)  509/ 6000EB2 :                     ; --------------------------------------------------------
(2)  510/ 6000EB2 :                     ; MarsVideo_ShowScrlBg
(2)  511/ 6000EB2 :                     ;
(2)  512/ 6000EB2 :                     ; Make a visible section of any scrolling area
(2)  513/ 6000EB2 :                     ; into the current framebuffer.
(2)  514/ 6000EB2 :                     ;
(2)  515/ 6000EB2 :                     ; Input:
(2)  516/ 6000EB2 :                     ; r1 | Top Y
(2)  517/ 6000EB2 :                     ; r2 | Bottom Y
(2)  518/ 6000EB2 :                     ;
(2)  519/ 6000EB2 :                     ; Breaks:
(2)  520/ 6000EB2 :                     ; r4-r14
(2)  521/ 6000EB2 :                     ;
(2)  522/ 6000EB2 :                     ; NOTE:
(2)  523/ 6000EB2 :                     ; After finishing all your screens call
(2)  524/ 6000EB2 :                     ; MarsVideo_FixTblShift before doing frameswap
(2)  525/ 6000EB2 :                     ; --------------------------------------------------------
(2)  526/ 6000EB2 :                     
(2)  527/ 6000EB2 :                     		align 4
(2)  528/ 6000EB4 :                     MarsVideo_ShowScrlBg:
(2)  529/ 6000EB4 : DE13                		mov	#_framebuffer,r14		; r14 - Framebuffer BASE
(2)  530/ 6000EB6 : EB00                		mov	#0,r11				; r11 - line counter
(2)  531/ 6000EB8 : C613                		mov	@(marsGbl_Scrl_FbOut,gbr),r0	; r13 - Framebuffer pixeldata position
(2)  532/ 6000EBA : 6D03                		mov	r0,r13
(2)  533/ 6000EBC : C610                		mov	@(marsGbl_Scrl_Size,gbr),r0	; r12 - Full size of screen-scroll
(2)  534/ 6000EBE : 6C03                		mov	r0,r12
(2)  535/ 6000EC0 : C611                		mov	@(marsGbl_Scrl_Wdth,gbr),r0
(2)  536/ 6000EC2 : 6A03                		mov	r0,r10
(2)  537/ 6000EC4 : C608                		mov	@(marsGbl_Scrl_FbTL,gbr),r0
(2)  538/ 6000EC6 : 6903                		mov	r0,r9
(2)  539/ 6000EC8 : C609                		mov	@(marsGbl_Scrl_FbY,gbr),r0
(2)  540/ 6000ECA : 6803                		mov	r0,r8
(2)  541/ 6000ECC : 3120                		cmp/eq	r2,r1
(2)  542/ 6000ECE : 8916                		bt	.bad_y
(2)  543/ 6000ED0 : 3123                		cmp/ge	r2,r1
(2)  544/ 6000ED2 : 8914                		bt	.bad_y
(2)  545/ 6000ED4 : 6613                		mov	r1,r6
(2)  546/ 6000ED6 : 6013                		mov	r1,r0
(2)  547/ 6000ED8 : 4000                		shll	r0
(2)  548/ 6000EDA : 3E0C                		add	r0,r14
(2)  549/ 6000EDC : 28AE                		mulu	r10,r8
(2)  550/ 6000EDE : 001A                		sts	macl,r0
(2)  551/ 6000EE0 : 390C                		add	r0,r9
(2)  552/ 6000EE2 :                     .ln_loop:
(2)  553/ 6000EE2 : 6893                		mov	r9,r8
(2)  554/ 6000EE4 : 38C3                		cmp/ge	r12,r8
(2)  555/ 6000EE6 : 8B00                		bf	.xl_r
(2)  556/ 6000EE8 : 38C8                		sub	r12,r8
(2)  557/ 6000EEA :                     .xl_r:
(2)  558/ 6000EEA :                     ; 		cmp/pz	r8
(2)  559/ 6000EEA :                     ; 		bt	.xl_l
(2)  560/ 6000EEA :                     ; 		add	r12,r8
(2)  561/ 6000EEA :                     ; .xl_l:
(2)  562/ 6000EEA : 6983                		mov	r8,r9
(2)  563/ 6000EEC : 39AC                		add	r10,r9			; Add Y
(2)  564/ 6000EEE : 38DC                		add	r13,r8			; Add Framebuffer position
(2)  565/ 6000EF0 : 4801                		shlr	r8			; Divide by 2, use Xshift for the missing bit
(2)  566/ 6000EF2 : 2E81                		mov.w	r8,@r14			; Send to FB's table
(2)  567/ 6000EF4 : 7E02                		add	#2,r14
(2)  568/ 6000EF6 : 7B02                		add	#2,r11
(2)  569/ 6000EF8 : 3620                		cmp/eq	r2,r6
(2)  570/ 6000EFA : 8FF2                		bf/s	.ln_loop
(2)  571/ 6000EFC : 7601                		add	#1,r6
(2)  572/ 6000EFE :                     .bad_y:
(2)  573/ 6000EFE : 000B                		rts
(2)  574/ 6000F00 : 0009                		nop
(2)  575/ 6000F02 :                     		align 4
(2)  576/ 6000F04 : 2400 0000           		ltorg
(2)  577/ 6000F08 :                     
(2)  578/ 6000F08 :                     ; ====================================================================
(2)  579/ 6000F08 :                     ; ----------------------------------------------------------------
(2)  580/ 6000F08 :                     ; Super sprites
(2)  581/ 6000F08 :                     ; ----------------------------------------------------------------
(2)  582/ 6000F08 :                     
(2)  583/ 6000F08 :                     ; --------------------------------------------------------
(2)  584/ 6000F08 :                     ; MarsVideo_SuperSpr_Draw
(2)  585/ 6000F08 :                     ; --------------------------------------------------------
(2)  586/ 6000F08 :                     
(2)  587/ 6000F08 :                     		align 4
(2)  588/ 6000F08 :                     MarsVideo_SuperSpr_Draw:
(2)  589/ 6000F08 : 4F22                		sts	pr,@-r15
(2)  590/ 6000F0A : DE20                		mov	#_overwrite,r14	; <--
(2)  591/ 6000F0C : C610                		mov	@(marsGbl_Scrl_Size,gbr),r0
(2)  592/ 6000F0E : 6D03                		mov	r0,r13
(2)  593/ 6000F10 : C612                		mov	@(marsGbl_Scrl_Hght,gbr),r0
(2)  594/ 6000F12 : 6C03                		mov	r0,r12
(2)  595/ 6000F14 : C611                		mov	@(marsGbl_Scrl_Wdth,gbr),r0
(2)  596/ 6000F16 : 6B03                		mov	r0,r11
(2)  597/ 6000F18 : C608                		mov	@(marsGbl_Scrl_FbTL,gbr),r0
(2)  598/ 6000F1A : 6A03                		mov	r0,r10
(2)  599/ 6000F1C : C609                		mov	@(marsGbl_Scrl_FbY,gbr),r0
(2)  600/ 6000F1E : 6903                		mov	r0,r9
(2)  601/ 6000F20 : C613                		mov	@(marsGbl_Scrl_FbOut,gbr),r0
(2)  602/ 6000F22 : 6203                		mov	r0,r2
(2)  603/ 6000F24 : C602                		mov	@(marsGbl_DreqRead,gbr),r0
(2)  604/ 6000F26 : 3E2C                		add	r2,r14
(2)  605/ 6000F28 : 9832                		mov	#Dreq_SuperSpr,r8
(2)  606/ 6000F2A : 380C                		add	r0,r8
(2)  607/ 6000F2C :                     
(2)  608/ 6000F2C :                     	; ----------------------------------------
(2)  609/ 6000F2C :                     	; r14 - Framebuffer output
(2)  610/ 6000F2C :                     	; r13 - Scroll size W*H
(2)  611/ 6000F2C :                     	; r12 - Scroll height
(2)  612/ 6000F2C :                     	; r11 - Scroll width
(2)  613/ 6000F2C :                     	; r10 - Scroll TL-pos read *
(2)  614/ 6000F2C :                     	;  r9 - Scroll Y-pos read *
(2)  615/ 6000F2C :                     	;  r8 - Current SuperSprite
(2)  616/ 6000F2C :                     	;  r7 - Current Canvas box addr
(2)  617/ 6000F2C :                     	;  r6 - Numof sprites
(2)  618/ 6000F2C :                     	;  r5 - Index counter
(2)  619/ 6000F2C :                     	;  r4 -
(2)  620/ 6000F2C :                     	;  r3 -
(2)  621/ 6000F2C :                     	;  r2 -
(2)  622/ 6000F2C :                     
(2)  623/ 6000F2C : E710                		mov	#MAX_MARSSPR,r7
(2)  624/ 6000F2E :                     .next_sspr:
(2)  625/ 6000F2E : 5083                		mov	@(sspr_Art,r8),r0
(2)  626/ 6000F30 : 2008                		tst	r0,r0
(2)  627/ 6000F32 : 8923                		bt	.off_sspr
(2)  628/ 6000F34 : 400A                		lds	r0,mach
(2)  629/ 6000F36 :                     
(2)  630/ 6000F36 : 8580                		mov.w	@(sspr_Flags,r8),r0
(2)  631/ 6000F38 : 660D                		extu.w	r0,r6
(2)  632/ 6000F3A : 8582                		mov.w	@(sspr_Size,r8),r0
(2)  633/ 6000F3C : 650C                		extu.b	r0,r5			; Y size
(2)  634/ 6000F3E : 4019                		shlr8	r0
(2)  635/ 6000F40 : 640C                		extu.b	r0,r4			; X size
(2)  636/ 6000F42 : 8584                		mov.w	@(sspr_Xpos,r8),r0
(2)  637/ 6000F44 : 620F                		exts.w	r0,r2
(2)  638/ 6000F46 : 8585                		mov.w	@(sspr_Ypos,r8),r0
(2)  639/ 6000F48 : 630F                		exts.w	r0,r3
(2)  640/ 6000F4A : 7401                		add	#1,r4
(2)  641/ 6000F4C : 7501                		add	#1,r5
(2)  642/ 6000F4E : 4408                		shll2	r4		; Expand sizes to 8pixels
(2)  643/ 6000F50 : 4508                		shll2	r5
(2)  644/ 6000F52 : 4400                		shll	r4
(2)  645/ 6000F54 : 4500                		shll	r5
(2)  646/ 6000F56 : 6023                		mov	r2,r0		; Offscreen checks
(2)  647/ 6000F58 : 304C                		add	r4,r0
(2)  648/ 6000F5A : 4015                		cmp/pl	r0
(2)  649/ 6000F5C : 8B0E                		bf	.off_sspr
(2)  650/ 6000F5E : 6033                		mov	r3,r0
(2)  651/ 6000F60 : 305C                		add	r5,r0
(2)  652/ 6000F62 : 4015                		cmp/pl	r0
(2)  653/ 6000F64 : 8B0A                		bf	.off_sspr
(2)  654/ 6000F66 : E050                		mov	#SET_MSCRLWDTH>>2,r0
(2)  655/ 6000F68 : 4008                		shll2	r0
(2)  656/ 6000F6A : 3203                		cmp/ge	r0,r2
(2)  657/ 6000F6C : 8906                		bt	.off_sspr
(2)  658/ 6000F6E : E03C                		mov	#SET_MSCRLHGHT>>2,r0
(2)  659/ 6000F70 : 4008                		shll2	r0
(2)  660/ 6000F72 : 3303                		cmp/ge	r0,r3
(2)  661/ 6000F74 : 8902                		bt	.off_sspr
(2)  662/ 6000F76 : 010A                		sts	mach,r1
(2)  663/ 6000F78 : B0D8                		bsr	scrlDrw_SSprDraw
(2)  664/ 6000F7A : 0009                		nop
(2)  665/ 6000F7C :                     .off_sspr:
(2)  666/ 6000F7C : E010                		mov	#sizeof_marsspr,r0
(2)  667/ 6000F7E : 4710                		dt	r7
(2)  668/ 6000F80 : 8FD5                		bf/s	.next_sspr
(2)  669/ 6000F82 : 380C                		add	r0,r8
(2)  670/ 6000F84 :                     .exit_sspr:
(2)  671/ 6000F84 :                     
(2)  672/ 6000F84 : 4F26                		lds	@r15+,pr
(2)  673/ 6000F86 : 000B                		rts
(2)  674/ 6000F88 : 0009                		nop
(2)  675/ 6000F8A :                     		align 4
(2)  676/ 6000F8C : 2402 0000 0610      		ltorg
(2)  677/ 6000F92 :                     
(2)  678/ 6000F92 :                     ; --------------------------------------------------------
(2)  679/ 6000F92 :                     ; MarsVideo_MkFillBlk
(2)  680/ 6000F92 :                     ;
(2)  681/ 6000F92 :                     ; Generate Block-Refill blocks from Super sprites
(2)  682/ 6000F92 :                     ; for the next frame
(2)  683/ 6000F92 :                     ;
(2)  684/ 6000F92 :                     ; 16x16 blocks.
(2)  685/ 6000F92 :                     ; --------------------------------------------------------
(2)  686/ 6000F92 :                     
(2)  687/ 6000F92 :                     		align 4
(2)  688/ 6000F94 :                     MarsVideo_MkFillBlk:
(2)  689/ 6000F94 : 4F22                		sts	pr,@-r15
(2)  690/ 6000F96 : 9EC7                		mov	#Dreq_SuperSpr,r14
(2)  691/ 6000F98 : C602                		mov	@(marsGbl_DreqRead,gbr),r0
(2)  692/ 6000F9A : 3E0C                		add	r0,r14
(2)  693/ 6000F9C :                     ; 		mov.w	@(marsGbl_SSprFlip,gbr),r0
(2)  694/ 6000F9C : DD60                		mov	#RAM_Mars_ScrlRefill_0,r13
(2)  695/ 6000F9E :                     ; 		xor	#1,r0
(2)  696/ 6000F9E :                     ; 		tst	r0,r0
(2)  697/ 6000F9E :                     ; 		bf	.frame_0
(2)  698/ 6000F9E :                     ; 		mov	#RAM_Mars_ScrlRefill_1,r13
(2)  699/ 6000F9E :                     ; .frame_0:
(2)  700/ 6000F9E :                     ; 		mov.w	r0,@(marsGbl_SSprFlip,gbr)
(2)  701/ 6000F9E : EC10                		mov	#MAX_MARSSPR,r12
(2)  702/ 6000FA0 :                     .next_sspr:
(2)  703/ 6000FA0 : 50E3                		mov	@(sspr_Art,r14),r0
(2)  704/ 6000FA2 : 2008                		tst	r0,r0
(2)  705/ 6000FA4 : 895A                		bt	.off_sspr
(2)  706/ 6000FA6 : 0009                		nop
(2)  707/ 6000FA8 : 85E2                		mov.w	@(sspr_Size,r14),r0
(2)  708/ 6000FAA : 650C                		extu.b	r0,r5			; Y size
(2)  709/ 6000FAC : 4019                		shlr8	r0
(2)  710/ 6000FAE : 640C                		extu.b	r0,r4			; X size
(2)  711/ 6000FB0 : 85E1                		mov.w	@(sspr_Frame,r14),r0
(2)  712/ 6000FB2 : 610D                		extu.w	r0,r1
(2)  713/ 6000FB4 : 85E4                		mov.w	@(sspr_Xpos,r14),r0
(2)  714/ 6000FB6 : 620F                		exts.w	r0,r2
(2)  715/ 6000FB8 : 85E5                		mov.w	@(sspr_Ypos,r14),r0
(2)  716/ 6000FBA : 630F                		exts.w	r0,r3
(2)  717/ 6000FBC : 4401                		shlr	r4		; /2 for 16
(2)  718/ 6000FBE : 4501                		shlr	r5
(2)  719/ 6000FC0 : 7401                		add	#1,r4
(2)  720/ 6000FC2 : 7501                		add	#1,r5
(2)  721/ 6000FC4 : C604                		mov	@(marsGbl_Scrl_Xpos,gbr),r0
(2)  722/ 6000FC6 : 680F                		exts.w	r0,r8
(2)  723/ 6000FC8 : E60F                		mov	#16-1,r6	; MANUAL SIZE 16x16
(2)  724/ 6000FCA : 0009                		nop
(2)  725/ 6000FCC : C605                		mov	@(marsGbl_Scrl_Ypos,gbr),r0
(2)  726/ 6000FCE : 690F                		exts.w	r0,r9
(2)  727/ 6000FD0 : 6023                		mov	r2,r0
(2)  728/ 6000FD2 : 308C                		add	r8,r0
(2)  729/ 6000FD4 : 2069                		and	r6,r0
(2)  730/ 6000FD6 : 2008                		tst	r0,r0
(2)  731/ 6000FD8 : 8900                		bt	.x_szex
(2)  732/ 6000FDA : 7401                		add	#1,r4
(2)  733/ 6000FDC :                     .x_szex:
(2)  734/ 6000FDC : 6033                		mov	r3,r0
(2)  735/ 6000FDE : 309C                		add	r9,r0
(2)  736/ 6000FE0 : 2069                		and	r6,r0
(2)  737/ 6000FE2 : 2008                		tst	r0,r0
(2)  738/ 6000FE4 : 8900                		bt	.y_szex
(2)  739/ 6000FE6 : 7501                		add	#1,r5
(2)  740/ 6000FE8 :                     .y_szex:
(2)  741/ 6000FE8 : 4408                		shll2	r4		; Expand sizes to 16pixels
(2)  742/ 6000FEA : 4408                		shll2	r4
(2)  743/ 6000FEC : 4508                		shll2	r5
(2)  744/ 6000FEE : 4508                		shll2	r5
(2)  745/ 6000FF0 :                     
(2)  746/ 6000FF0 : 342C                		add	r2,r4
(2)  747/ 6000FF2 : 353C                		add	r3,r5
(2)  748/ 6000FF4 : E650                		mov	#SET_MSCRLWDTH>>2,r6
(2)  749/ 6000FF6 : E73C                		mov	#SET_MSCRLHGHT>>2,r7
(2)  750/ 6000FF8 : 4608                		shll2	r6
(2)  751/ 6000FFA : 4708                		shll2	r7
(2)  752/ 6000FFC :                     	; Off-screen limits
(2)  753/ 6000FFC : 4415                		cmp/pl	r4
(2)  754/ 6000FFE : 8B2D                		bf	.off_sspr
(2)  755/ 6001000 : 4515                		cmp/pl	r5
(2)  756/ 6001002 : 8B2B                		bf	.off_sspr
(2)  757/ 6001004 : 3263                		cmp/ge	r6,r2		; Xleft < 0?
(2)  758/ 6001006 : 8929                		bt	.off_sspr
(2)  759/ 6001008 : 3373                		cmp/ge	r7,r3		; Yup < 0?
(2)  760/ 600100A : 8927                		bt	.off_sspr
(2)  761/ 600100C :                     	; Squeeze screen coords
(2)  762/ 600100C : 7610                		add	#16,r6
(2)  763/ 600100E : 7710                		add	#16,r7
(2)  764/ 6001010 : 4215                		cmp/pl	r2
(2)  765/ 6001012 : 8900                		bt	.x_sqz
(2)  766/ 6001014 : E200                		mov	#0,r2
(2)  767/ 6001016 : 4315                .x_sqz:		cmp/pl	r3
(2)  768/ 6001018 : 8900                		bt	.y_sqz
(2)  769/ 600101A : E300                		mov	#0,r3
(2)  770/ 600101C : 3463                .y_sqz:		cmp/ge	r6,r4
(2)  771/ 600101E : 8B00                		bf	.x_sqend
(2)  772/ 6001020 : 6463                		mov	r6,r4
(2)  773/ 6001022 : 3573                .x_sqend:	cmp/ge	r7,r5
(2)  774/ 6001024 : 8B00                		bf	.y_sqend
(2)  775/ 6001026 : 6573                		mov	r7,r5
(2)  776/ 6001028 :                     .y_sqend:
(2)  777/ 6001028 :                     
(2)  778/ 6001028 :                     	; r2 - X pos
(2)  779/ 6001028 :                     	; r3 - Y pos
(2)  780/ 6001028 :                     	; r4 - X end
(2)  781/ 6001028 :                     	; r5 - Y end
(2)  782/ 6001028 :                     .y_row:
(2)  783/ 6001028 : 6623                		mov	r2,r6
(2)  784/ 600102A :                     .x_row:
(2)  785/ 600102A : 6033                		mov	r3,r0
(2)  786/ 600102C : 309C                		add	r9,r0
(2)  787/ 600102E : 4009                		shlr2	r0
(2)  788/ 6001030 : 4009                		shlr2	r0
(2)  789/ 6001032 : C90F                		and	#(256/16)-1,r0
(2)  790/ 6001034 : 4008                		shll2	r0
(2)  791/ 6001036 : 4008                		shll2	r0
(2)  792/ 6001038 : 4008                		shll2	r0
(2)  793/ 600103A : 6703                		mov	r0,r7
(2)  794/ 600103C : 6063                		mov	r6,r0
(2)  795/ 600103E : 308C                		add	r8,r0
(2)  796/ 6001040 : 4009                		shlr2	r0
(2)  797/ 6001042 : 4009                		shlr2	r0
(2)  798/ 6001044 : C91F                		and	#(512/16)-1,r0
(2)  799/ 6001046 : 4000                		shll	r0
(2)  800/ 6001048 : 370C                		add	r0,r7
(2)  801/ 600104A : 37DC                		add	r13,r7
(2)  802/ 600104C :                     
(2)  803/ 600104C : E003                		mov	#%11,r0		; Write flag
(2)  804/ 600104E : 2701                		mov.w	r0,@r7
(2)  805/ 6001050 : 7610                		add	#16,r6
(2)  806/ 6001052 : 3643                		cmp/ge	r4,r6
(2)  807/ 6001054 : 8BE9                		bf	.x_row
(2)  808/ 6001056 : 7310                		add	#16,r3
(2)  809/ 6001058 : 3353                		cmp/ge	r5,r3
(2)  810/ 600105A : 8BE5                		bf	.y_row
(2)  811/ 600105C :                     
(2)  812/ 600105C :                     .off_sspr:
(2)  813/ 600105C : E010                		mov	#sizeof_marsspr,r0
(2)  814/ 600105E : 4C10                		dt	r12
(2)  815/ 6001060 : 8F9E                		bf/s	.next_sspr
(2)  816/ 6001062 : 3E0C                		add	r0,r14
(2)  817/ 6001064 :                     
(2)  818/ 6001064 :                     .exit_sspr:
(2)  819/ 6001064 : 4F26                		lds	@r15+,pr
(2)  820/ 6001066 : 000B                		rts
(2)  821/ 6001068 : 0009                		nop
(2)  822/ 600106A :                     		align 4
(2)  823/ 600106C :                     
(2)  824/ 600106C :                     ; --------------------------------------------------------
(2)  825/ 600106C :                     ; MarsVideo_DrawFillBlk
(2)  826/ 600106C :                     ;
(2)  827/ 600106C :                     ; r14 - Framebuffer output
(2)  828/ 600106C :                     ; r13 - Scroll size W*H
(2)  829/ 600106C :                     ; r12 - Scroll height
(2)  830/ 600106C :                     ; r11 - Scroll width
(2)  831/ 600106C :                     ; r10 - Scroll TL-pos read / 16 *
(2)  832/ 600106C :                     ;  r9 - Scroll Y-pos read / 16 *
(2)  833/ 600106C :                     ;  r8 - Graphics data
(2)  834/ 600106C :                     ;  r7 - Map data
(2)  835/ 600106C :                     ;  r6 - Map Y read index
(2)  836/ 600106C :                     ;  r5 - Map X read index
(2)  837/ 600106C :                     ; --------------------------------------------------------
(2)  838/ 600106C :                     
(2)  839/ 600106C :                     		align 4
(2)  840/ 600106C :                     MarsVideo_DrawFillBlk:
(2)  841/ 600106C : 4F22                		sts	pr,@-r15
(2)  842/ 600106E : 2F56                		mov	r5,@-r15
(2)  843/ 6001070 : 2F66                		mov	r6,@-r15
(2)  844/ 6001072 : 2F96                		mov	r9,@-r15
(2)  845/ 6001074 : 2FA6                		mov	r10,@-r15
(2)  846/ 6001076 :                     
(2)  847/ 6001076 : C502                		mov.w	@(marsGbl_SSprFlip,gbr),r0
(2)  848/ 6001078 : D32A                		mov	#RAM_Mars_ScrlRefill_0,r3
(2)  849/ 600107A :                     ; 		tst	r0,r0
(2)  850/ 600107A :                     ; 		bt	.frame_0
(2)  851/ 600107A :                     ; 		mov	#RAM_Mars_ScrlRefill_1,r3
(2)  852/ 600107A :                     ; .frame_0:
(2)  853/ 600107A : 6093                		mov	r9,r0
(2)  854/ 600107C : E4F0                		mov	#-16,r4
(2)  855/ 600107E : 2049                		and	r4,r0
(2)  856/ 6001080 : 2B0F                		muls	r0,r11
(2)  857/ 6001082 : 001A                		sts	macl,r0		; Y block pos
(2)  858/ 6001084 : 64A3                		mov	r10,r4
(2)  859/ 6001086 : 340C                		add	r0,r4
(2)  860/ 6001088 : E2FC                		mov	#-4,r2
(2)  861/ 600108A : 2429                		and	r2,r4
(2)  862/ 600108C :                     
(2)  863/ 600108C : 6AB3                		mov	r11,r10
(2)  864/ 600108E : 4A09                		shlr2	r10
(2)  865/ 6001090 : 4A09                		shlr2	r10
(2)  866/ 6001092 :                     .x_loop:
(2)  867/ 6001092 : 6963                		mov	r6,r9
(2)  868/ 6001094 : 34D3                		cmp/ge	r13,r4
(2)  869/ 6001096 : 8B00                		bf	.tl_snap
(2)  870/ 6001098 : 34D8                		sub	r13,r4
(2)  871/ 600109A :                     .tl_snap:
(2)  872/ 600109A : 6243                		mov	r4,r2
(2)  873/ 600109C : 2F46                		mov	r4,@-r15
(2)  874/ 600109E : 2FC6                		mov	r12,@-r15
(2)  875/ 60010A0 : 4C09                		shlr2	r12
(2)  876/ 60010A2 : 4C09                		shlr2	r12
(2)  877/ 60010A4 :                     .y_loop:
(2)  878/ 60010A4 : E00F                		mov	#(256/16)-1,r0
(2)  879/ 60010A6 : 6493                		mov	r9,r4		; Y pos
(2)  880/ 60010A8 : 4409                		shlr2	r4
(2)  881/ 60010AA : 4409                		shlr2	r4
(2)  882/ 60010AC : 2409                		and	r0,r4
(2)  883/ 60010AE : 4408                		shll2	r4
(2)  884/ 60010B0 : 4408                		shll2	r4
(2)  885/ 60010B2 : 4400                		shll	r4
(2)  886/ 60010B4 : E01F                		mov	#(512/16)-1,r0
(2)  887/ 60010B6 : 6153                		mov	r5,r1		; X pos
(2)  888/ 60010B8 : 4109                		shlr2	r1
(2)  889/ 60010BA : 4109                		shlr2	r1
(2)  890/ 60010BC : 2109                		and	r0,r1
(2)  891/ 60010BE : 314C                		add	r4,r1
(2)  892/ 60010C0 : 4100                		shll	r1
(2)  893/ 60010C2 : 411A                		lds	r1,macl
(2)  894/ 60010C4 :                     
(2)  895/ 60010C4 : 313C                		add	r3,r1
(2)  896/ 60010C6 : 6011                		mov.w	@r1,r0
(2)  897/ 60010C8 : 2008                		tst	r0,r0
(2)  898/ 60010CA : 8915                		bt	.no_flag
(2)  899/ 60010CC : 4001                		shlr	r0
(2)  900/ 60010CE : 2101                		mov.w	r0,@r1
(2)  901/ 60010D0 :                     
(2)  902/ 60010D0 : 011A                		sts	macl,r1
(2)  903/ 60010D2 : 317C                		add	r7,r1
(2)  904/ 60010D4 : 430A                		lds	r3,mach
(2)  905/ 60010D6 : 6011                		mov.w	@r1,r0
(2)  906/ 60010D8 : 9127                		mov	#$7FF,r1
(2)  907/ 60010DA : 6303                		mov	r0,r3
(2)  908/ 60010DC : 2319                		and	r1,r3
(2)  909/ 60010DE : E100                		mov	#0,r1
(2)  910/ 60010E0 : 2338                		tst	r3,r3
(2)  911/ 60010E2 : 8903                		bt	.blank
(2)  912/ 60010E4 : 4310                		dt	r3
(2)  913/ 60010E6 : 4318                		shll8	r3		; 16x16
(2)  914/ 60010E8 : 6133                		mov	r3,r1
(2)  915/ 60010EA : 318C                		add	r8,r1
(2)  916/ 60010EC :                     .blank:
(2)  917/ 60010EC : 030A                		sts	mach,r3
(2)  918/ 60010EE :                     ; 		mov	#0,r1	; TEMPORAL
(2)  919/ 60010EE : B0C3                		bsr	scrlDrw_DrawBlk
(2)  920/ 60010F0 : 2F46                		mov	r4,@-r15
(2)  921/ 60010F2 : 64F6                		mov	@r15+,r4
(2)  922/ 60010F4 : A004                		bra	.next_yblk
(2)  923/ 60010F6 : 0009                		nop
(2)  924/ 60010F8 :                     .no_flag:
(2)  925/ 60010F8 : E010                		mov	#16,r0
(2)  926/ 60010FA : 20BE                		mulu	r11,r0
(2)  927/ 60010FC : 001A                		sts	macl,r0
(2)  928/ 60010FE : 320C                		add	r0,r2
(2)  929/ 6001100 :                     .next_yblk:
(2)  930/ 6001100 : 4C10                		dt	r12
(2)  931/ 6001102 : 8FCF                		bf/s	.y_loop
(2)  932/ 6001104 : 7910                		add	#16,r9
(2)  933/ 6001106 : 6CF6                		mov	@r15+,r12
(2)  934/ 6001108 : 64F6                		mov	@r15+,r4
(2)  935/ 600110A : 7410                		add	#16,r4
(2)  936/ 600110C : 4A10                		dt	r10
(2)  937/ 600110E : 8FC0                		bf/s	.x_loop
(2)  938/ 6001110 : 7510                		add	#16,r5
(2)  939/ 6001112 :                     .exit_lr:
(2)  940/ 6001112 : 6AF6                		mov	@r15+,r10
(2)  941/ 6001114 : 69F6                		mov	@r15+,r9
(2)  942/ 6001116 : 66F6                		mov	@r15+,r6
(2)  943/ 6001118 : 65F6                		mov	@r15+,r5
(2)  944/ 600111A : 4F26                		lds	@r15+,pr
(2)  945/ 600111C : 000B                		rts
(2)  946/ 600111E : 0009                		nop
(2)  947/ 6001120 :                     		align 4
(2)  948/ 6001120 :                     
(2)  949/ 6001120 : 0600 1630 0600      		ltorg
          6001126 : 1630 0610 07FF    
(2)  950/ 600112C :                     
(2)  951/ 600112C :                     ; ====================================================================
(2)  952/ 600112C :                     ; --------------------------------------------------------
(2)  953/ 600112C :                     ; scrlDrw_SSprDraw
(2)  954/ 600112C :                     ;
(2)  955/ 600112C :                     ; Inputs:
(2)  956/ 600112C :                     ; r1 - Graphics data *
(2)  957/ 600112C :                     ; r2 - Xpos *
(2)  958/ 600112C :                     ; r3 - Ypos *
(2)  959/ 600112C :                     ; r4 - Xsize *
(2)  960/ 600112C :                     ; r5 - Ysize *
(2)  961/ 600112C :                     ; r6 - Flags *
(2)  962/ 600112C :                     ;
(2)  963/ 600112C :                     ; In Loop:
(2)  964/ 600112C :                     ; r14 - Framebuffer output
(2)  965/ 600112C :                     ; r13 - Scroll size W*H
(2)  966/ 600112C :                     ; r12 - Scroll height
(2)  967/ 600112C :                     ; r11 - Scroll width
(2)  968/ 600112C :                     ; r10 - Scroll TL-pos read
(2)  969/ 600112C :                     ;  r9 - Scroll Y-pos read
(2)  970/ 600112C :                     ;
(2)  971/ 600112C :                     ; Breaks:
(2)  972/ 600112C :                     ; r1-r6
(2)  973/ 600112C :                     ; --------------------------------------------------------
(2)  974/ 600112C :                     
(2)  975/ 600112C :                     		align 4
(2)  976/ 600112C :                     scrlDrw_SSprDraw:
(2)  977/ 600112C : 2F76                		mov	r7,@-r15
(2)  978/ 600112E : 2F86                		mov	r8,@-r15
(2)  979/ 6001130 : 2F96                		mov	r9,@-r15
(2)  980/ 6001132 : 2FA6                		mov	r10,@-r15
(2)  981/ 6001134 : 2FC6                		mov	r12,@-r15
(2)  982/ 6001136 :                     
(2)  983/ 6001136 :                     	; Y limits
(2)  984/ 6001136 : 6033                		mov	r3,r0
(2)  985/ 6001138 : 4011                .y_low:		cmp/pz	r0
(2)  986/ 600113A : 8900                		bt	.y_mid
(2)  987/ 600113C : E000                		mov	#0,r0
(2)  988/ 600113E : 30C3                .y_mid:		cmp/ge	r12,r0
(2)  989/ 6001140 : 8B01                		bf	.y_ok
(2)  990/ 6001142 : E03C                		mov	#(SET_MSCRLHGHT)>>2,r0	; 240
(2)  991/ 6001144 : 4008                		shll2	r0
(2)  992/ 6001146 :                     .y_ok:
(2)  993/ 6001146 : 309C                		add	r9,r0
(2)  994/ 6001148 : 20BF                		muls	r11,r0	; macl - Y pos
(2)  995/ 600114A :                     	; No X limits
(2)  996/ 600114A : 6723                		mov	r2,r7	; X-pos
(2)  997/ 600114C : 37AC                		add	r10,r7
(2)  998/ 600114E : 001A                		sts	macl,r0
(2)  999/ 6001150 : 370C                		add	r0,r7
(2) 1000/ 6001152 : 37D3                		cmp/ge	r13,r7
(2) 1001/ 6001154 : 8B00                		bf	.xy_flip
(2) 1002/ 6001156 : 37D8                		sub	r13,r7
(2) 1003/ 6001158 :                     .xy_flip:
(2) 1004/ 6001158 : 6063                		mov	r6,r0		; Y flip? start
(2) 1005/ 600115A : C802                		tst	#%10,r0
(2) 1006/ 600115C : 8903                		bt	.y_flip
(2) 1007/ 600115E : 254F                		muls	r4,r5
(2) 1008/ 6001160 : 001A                		sts	macl,r0
(2) 1009/ 6001162 : 310C                		add	r0,r1		; Flip Y src
(2) 1010/ 6001164 : 3148                		sub	r4,r1
(2) 1011/ 6001166 :                     .y_flip:
(2) 1012/ 6001166 : E804                		mov	#4,r8
(2) 1013/ 6001168 : 6063                		mov	r6,r0		; X flip?
(2) 1014/ 600116A : C801                		tst	#%01,r0
(2) 1015/ 600116C : 8903                		bt	.x_flip
(2) 1016/ 600116E : 688B                		neg	r8,r8
(2) 1017/ 6001170 : 6043                		mov	r4,r0
(2) 1018/ 6001172 : 70FC                		add	#-4,r0
(2) 1019/ 6001174 : 310C                		add	r0,r1
(2) 1020/ 6001176 :                     .x_flip:
(2) 1021/ 6001176 :                     
(2) 1022/ 6001176 :                     	; ---------------------------------------
(2) 1023/ 6001176 :                     	; LOOP
(2) 1024/ 6001176 :                     	; ---------------------------------------
(2) 1025/ 6001176 : 4311                		cmp/pz	r3
(2) 1026/ 6001178 : 8909                		bt	.y_top
(2) 1027/ 600117A : 353C                		add	r3,r5
(2) 1028/ 600117C : 234F                		muls	r4,r3
(2) 1029/ 600117E : 6063                		mov	r6,r0
(2) 1030/ 6001180 : C802                		tst	#%10,r0
(2) 1031/ 6001182 : 8902                		bt	.y_rflip
(2) 1032/ 6001184 : 001A                		sts	macl,r0
(2) 1033/ 6001186 : A001                		bra	.y_rflipc
(2) 1034/ 6001188 : 600B                		neg	r0,r0
(2) 1035/ 600118A :                     .y_rflip:
(2) 1036/ 600118A : 001A                		sts	macl,r0
(2) 1037/ 600118C :                     .y_rflipc:
(2) 1038/ 600118C : 3108                		sub	r0,r1
(2) 1039/ 600118E :                     
(2) 1040/ 600118E :                     .y_top:
(2) 1041/ 600118E : 6033                		mov	r3,r0
(2) 1042/ 6001190 : 305C                		add	r5,r0
(2) 1043/ 6001192 :                     ; 		mov	#240,r10
(2) 1044/ 6001192 : EA3D                		mov	#(SET_MSCRLHGHT+4)>>2,r10	; 240
(2) 1045/ 6001194 : 4A08                		shll2	r10
(2) 1046/ 6001196 : 30A3                		cmp/ge	r10,r0
(2) 1047/ 6001198 : 8B01                		bf	.y_bot
(2) 1048/ 600119A : 30A8                		sub	r10,r0
(2) 1049/ 600119C : 3508                		sub	r0,r5
(2) 1050/ 600119E :                     .y_bot:
(2) 1051/ 600119E : 0009                		nop
(2) 1052/ 60011A0 : 6A43                		mov	r4,r10
(2) 1053/ 60011A2 : 6063                		mov	r6,r0		; Y flip? start
(2) 1054/ 60011A4 : C802                		tst	#%10,r0
(2) 1055/ 60011A6 : 8900                		bt	.y_loop
(2) 1056/ 60011A8 : 644B                		neg	r4,r4
(2) 1057/ 60011AA :                     
(2) 1058/ 60011AA :                     	; r1 - Frame data line pos
(2) 1059/ 60011AA :                     	; r2 - X pos
(2) 1060/ 60011AA :                     	; r3 -
(2) 1061/ 60011AA :                     	; r4 - Y increment f/b
(2) 1062/ 60011AA :                     	; r5 - Y lines / X current beam
(2) 1063/ 60011AA :                     	; r6 - flags (X flip only)
(2) 1064/ 60011AA :                     	; r7 - current TL pos
(2) 1065/ 60011AA :                     	; r8 - X increment f/b
(2) 1066/ 60011AA :                     	; r9 -
(2) 1067/ 60011AA :                     	; r10 - X loop current
(2) 1068/ 60011AA :                     	; r11
(2) 1069/ 60011AA :                     	; r12
(2) 1070/ 60011AA :                     .y_loop:
(2) 1071/ 60011AA : 470A                		lds	r7,mach
(2) 1072/ 60011AC : 451A                		lds	r5,macl
(2) 1073/ 60011AE : 6CA3                		mov	r10,r12
(2) 1074/ 60011B0 : 4C09                		shlr2	r12
(2) 1075/ 60011B2 : 2CC8                		tst	r12,r12
(2) 1076/ 60011B4 : 8957                		bt	.y_last
(2) 1077/ 60011B6 : 6313                		mov	r1,r3		; Line in
(2) 1078/ 60011B8 : 6523                		mov	r2,r5
(2) 1079/ 60011BA :                     .x_loop:
(2) 1080/ 60011BA : 37D3                		cmp/ge	r13,r7
(2) 1081/ 60011BC : 8B00                		bf	.tl_snap
(2) 1082/ 60011BE : 37D8                		sub	r13,r7
(2) 1083/ 60011C0 :                     .tl_snap:
(2) 1084/ 60011C0 :                     
(2) 1085/ 60011C0 :                     ; ---------------------------------------
(2) 1086/ 60011C0 :                     ; r3 - Pixel data pos
(2) 1087/ 60011C0 :                     ; r5 - Current X pos
(2) 1088/ 60011C0 :                     ;
(2) 1089/ 60011C0 :                     ; r9 - Pixel data $12345678
(2) 1090/ 60011C0 :                     
(2) 1091/ 60011C0 :                     .x_swap:
(2) 1092/ 60011C0 : 6932                		mov	@r3,r9		; 11 22 33 44
(2) 1093/ 60011C2 : 6063                		mov	r6,r0
(2) 1094/ 60011C4 : C801                		tst	#%01,r0
(2) 1095/ 60011C6 : 8902                		bt	.x_mswap
(2) 1096/ 60011C8 : 6998                		swap.b	r9,r9
(2) 1097/ 60011CA : 6999                		swap.w	r9,r9
(2) 1098/ 60011CC : 6998                		swap.b	r9,r9
(2) 1099/ 60011CE :                     .x_mswap:
(2) 1100/ 60011CE : 4511                		cmp/pz	r5
(2) 1101/ 60011D0 : 8B19                		bf	.x_left
(2) 1102/ 60011D2 : 904F                		mov	#SET_MSCRLWDTH-4,r0
(2) 1103/ 60011D4 : 3507                		cmp/gt	r0,r5
(2) 1104/ 60011D6 : 8B31                		bf	.x_mid
(2) 1105/ 60011D8 :                     
(2) 1106/ 60011D8 :                     ; ---------------------------------------
(2) 1107/ 60011D8 :                     ; RIGHT SIDE
(2) 1108/ 60011D8 :                     ;
(2) 1109/ 60011D8 :                     ; r5 is lost after this
(2) 1110/ 60011D8 :                     ; ---------------------------------------
(2) 1111/ 60011D8 :                     
(2) 1112/ 60011D8 : 6053                		mov	r5,r0
(2) 1113/ 60011DA : C903                		and	#%011,r0
(2) 1114/ 60011DC : 2008                		tst	r0,r0
(2) 1115/ 60011DE : 893C                		bt	.x_end
(2) 1116/ 60011E0 : E504                		mov	#4,r5
(2) 1117/ 60011E2 : 3508                		sub	r0,r5
(2) 1118/ 60011E4 :                     
(2) 1119/ 60011E4 : 6998                		swap.b	r9,r9	; 1 2 4 3
(2) 1120/ 60011E6 : 6999                		swap.w	r9,r9	; 4 3 1 2
(2) 1121/ 60011E8 : 6998                		swap.b	r9,r9	; 4 3 2 1
(2) 1122/ 60011EA : 6073                		mov	r7,r0
(2) 1123/ 60011EC : 30EC                		add	r14,r0
(2) 1124/ 60011EE : 2090                		mov.b	r9,@r0
(2) 1125/ 60011F0 : 4919                		shlr8	r9
(2) 1126/ 60011F2 : 7001                		add	#1,r0
(2) 1127/ 60011F4 : 4510                		dt	r5
(2) 1128/ 60011F6 : 8930                		bt	.x_end
(2) 1129/ 60011F8 : 2090                		mov.b	r9,@r0
(2) 1130/ 60011FA : 4919                		shlr8	r9
(2) 1131/ 60011FC : 7001                		add	#1,r0
(2) 1132/ 60011FE : 4510                		dt	r5
(2) 1133/ 6001200 : 892B                		bt	.x_end
(2) 1134/ 6001202 : A02A                		bra	.x_end
(2) 1135/ 6001204 : 2090                		mov.b	r9,@r0
(2) 1136/ 6001206 :                     
(2) 1137/ 6001206 :                     ; ---------------------------------------
(2) 1138/ 6001206 :                     ; LEFT SIDE
(2) 1139/ 6001206 :                     ; ---------------------------------------
(2) 1140/ 6001206 :                     
(2) 1141/ 6001206 :                     .x_left:
(2) 1142/ 6001206 : E0FC                		mov	#-4,r0
(2) 1143/ 6001208 : 3507                		cmp/gt	r0,r5
(2) 1144/ 600120A : 8B15                		bf	.xl_far
(2) 1145/ 600120C : 605B                		neg	r5,r0
(2) 1146/ 600120E : 7003                		add	#3,r0
(2) 1147/ 6001210 : 305C                		add	r5,r0
(2) 1148/ 6001212 : C903                		and	#%011,r0
(2) 1149/ 6001214 : 7001                		add	#1,r0
(2) 1150/ 6001216 : 307C                		add	r7,r0
(2) 1151/ 6001218 : 30EC                		add	r14,r0
(2) 1152/ 600121A : 7504                		add	#4,r5
(2) 1153/ 600121C :                     	rept 3
(2) 1154/ 600121C :                     		mov.b	r9,@-r0
(2) 1155/ 600121C :                     		shlr8	r9
(2) 1156/ 600121C :                     		dt	r5
(2) 1157/ 600121C :                     		bt	.xl_far
(2) 1158/ 600121C :                     	endm
(2) 1154/ 600121C : 2094                		mov.b	r9,@-r0
(2) 1155/ 600121E : 4919                		shlr8	r9
(2) 1156/ 6001220 : 4510                		dt	r5
(2) 1157/ 6001222 : 8909                		bt	.xl_far
(2) 1154/ 6001224 : 2094                		mov.b	r9,@-r0
(2) 1155/ 6001226 : 4919                		shlr8	r9
(2) 1156/ 6001228 : 4510                		dt	r5
(2) 1157/ 600122A : 8905                		bt	.xl_far
(2) 1154/ 600122C : 2094                		mov.b	r9,@-r0
(2) 1155/ 600122E : 4919                		shlr8	r9
(2) 1156/ 6001230 : 4510                		dt	r5
(2) 1157/ 6001232 : 8901                		bt	.xl_far
(2) 1159/ 6001234 : E0FC                		mov	#-4,r0
(2) 1160/ 6001236 : 2059                		and	r5,r0
(2) 1161/ 6001238 :                     .xl_far:
(2) 1162/ 6001238 : A00B                		bra	.x_bad
(2) 1163/ 600123A : 7504                		add	#4,r5
(2) 1164/ 600123C :                     
(2) 1165/ 600123C :                     ; ---------------------------------------
(2) 1166/ 600123C :                     ; MIDDLE SIDE
(2) 1167/ 600123C :                     ; ---------------------------------------
(2) 1168/ 600123C :                     
(2) 1169/ 600123C :                     .x_mid:
(2) 1170/ 600123C : 6073                		mov	r7,r0
(2) 1171/ 600123E : 30EC                		add	r14,r0
(2) 1172/ 6001240 : 7004                		add	#4,r0
(2) 1173/ 6001242 : 2094                		mov.b	r9,@-r0
(2) 1174/ 6001244 : 4919                		shlr8	r9
(2) 1175/ 6001246 : 2094                		mov.b	r9,@-r0
(2) 1176/ 6001248 : 4919                		shlr8	r9
(2) 1177/ 600124A : 2094                		mov.b	r9,@-r0
(2) 1178/ 600124C : 4919                		shlr8	r9
(2) 1179/ 600124E : 2094                		mov.b	r9,@-r0
(2) 1180/ 6001250 : 7504                		add	#4,r5
(2) 1181/ 6001252 :                     .x_bad:
(2) 1182/ 6001252 : 338C                		add	r8,r3
(2) 1183/ 6001254 : 4C10                		dt	r12
(2) 1184/ 6001256 : 8FB0                		bf/s	.x_loop
(2) 1185/ 6001258 : 7704                		add	#4,r7
(2) 1186/ 600125A :                     .x_end:
(2) 1187/ 600125A :                     
(2) 1188/ 600125A :                     ; ---------------------------------------
(2) 1189/ 600125A : 051A                		sts	macl,r5
(2) 1190/ 600125C : 070A                		sts	mach,r7
(2) 1191/ 600125E : 314C                		add	r4,r1		; Next line FOWARD
(2) 1192/ 6001260 : 4510                		dt	r5
(2) 1193/ 6001262 : 8FA2                		bf/s	.y_loop
(2) 1194/ 6001264 : 37BC                		add	r11,r7
(2) 1195/ 6001266 :                     .y_last:
(2) 1196/ 6001266 :                     
(2) 1197/ 6001266 :                     .y_end:
(2) 1198/ 6001266 : 6CF6                		mov	@r15+,r12
(2) 1199/ 6001268 : 6AF6                		mov	@r15+,r10
(2) 1200/ 600126A : 69F6                		mov	@r15+,r9
(2) 1201/ 600126C : 68F6                		mov	@r15+,r8
(2) 1202/ 600126E : 67F6                		mov	@r15+,r7
(2) 1203/ 6001270 : 000B                		rts
(2) 1204/ 6001272 : 0009                		nop
(2) 1205/ 6001274 :                     		align 4
(2) 1206/ 6001274 : 013C                		ltorg
(2) 1207/ 6001276 :                     
(2) 1208/ 6001276 :                     ; --------------------------------------------------------
(2) 1209/ 6001276 :                     ; scrlDrw_DrawBlk
(2) 1210/ 6001276 :                     ;
(2) 1211/ 6001276 :                     ; Currents:
(2) 1212/ 6001276 :                     ; r0 - Block data and index flags (if r1 != 0)
(2) 1213/ 6001276 :                     ; r1 - Graphics data, 0 = blank mode
(2) 1214/ 6001276 :                     ; r2 - FB TL position
(2) 1215/ 6001276 :                     ;
(2) 1216/ 6001276 :                     ; InLoop:
(2) 1217/ 6001276 :                     ; r14 - Framebuffer BASE
(2) 1218/ 6001276 :                     ; r13 - Scrl W*H
(2) 1219/ 6001276 :                     ; r11 - Scrl width
(2) 1220/ 6001276 :                     ;
(2) 1221/ 6001276 :                     ; Uses:
(2) 1222/ 6001276 :                     ; r4,macl,mach
(2) 1223/ 6001276 :                     ; --------------------------------------------------------
(2) 1224/ 6001276 :                     
(2) 1225/ 6001276 :                     		align 4
(2) 1226/ 6001278 :                     scrlDrw_DrawBlk:
(2) 1227/ 6001278 : 4115                		cmp/pl	r1
(2) 1228/ 600127A : 8B01                		bf	.blank
(2) 1229/ 600127C : A016                		bra	.normal
(2) 1230/ 600127E : 0009                		nop
(2) 1231/ 6001280 :                     ; TODO: CHECAR ESTO EN HARDWARE
(2) 1232/ 6001280 :                     .blank:
(2) 1233/ 6001280 : E000                		mov	#0,r0
(2) 1234/ 6001282 : E410                		mov	#16,r4
(2) 1235/ 6001284 :                     .blnk_line:
(2) 1236/ 6001284 : 32D3                		cmp/ge	r13,r2
(2) 1237/ 6001286 : 8B00                		bf	.tl_snapb
(2) 1238/ 6001288 :                     ; 		bra	.blnk_line		; <-- Broken
(2) 1239/ 6001288 : 32D8                		sub	r13,r2
(2) 1240/ 600128A :                     .tl_snapb:
(2) 1241/ 600128A : 421A                		lds	r2,macl
(2) 1242/ 600128C : 32EC                		add	r14,r2
(2) 1243/ 600128E :                     	rept 16/4
(2) 1244/ 600128E :                     		mov	r0,@r2
(2) 1245/ 600128E :                     		add	#4,r2
(2) 1246/ 600128E :                     	endm
(2) 1244/ 600128E : 2202                		mov	r0,@r2
(2) 1245/ 6001290 : 7204                		add	#4,r2
(2) 1244/ 6001292 : 2202                		mov	r0,@r2
(2) 1245/ 6001294 : 7204                		add	#4,r2
(2) 1244/ 6001296 : 2202                		mov	r0,@r2
(2) 1245/ 6001298 : 7204                		add	#4,r2
(2) 1244/ 600129A : 2202                		mov	r0,@r2
(2) 1245/ 600129C : 7204                		add	#4,r2
(2) 1247/ 600129E : 021A                		sts	macl,r2
(2) 1248/ 60012A0 : 4410                		dt	r4
(2) 1249/ 60012A2 : 8FEF                		bf/s	.blnk_line
(2) 1250/ 60012A4 : 32BC                		add	r11,r2
(2) 1251/ 60012A6 : 000B                		rts
(2) 1252/ 60012A8 : 0009                		nop
(2) 1253/ 60012AA :                     		align 4
(2) 1254/ 60012AC :                     
(2) 1255/ 60012AC :                     ; ----------------------------------------
(2) 1256/ 60012AC :                     
(2) 1257/ 60012AC :                     .normal:
(2) 1258/ 60012AC : 430A                		lds	r3,mach
(2) 1259/ 60012AE : 4019                		shlr8	r0		; Get index increment
(2) 1260/ 60012B0 : C9F8                		and	#$F8,r0		; Filter these bits only
(2) 1261/ 60012B2 : 6303                		mov	r0,r3
(2) 1262/ 60012B4 : E410                		mov	#16,r4
(2) 1263/ 60012B6 :                     .next_line:
(2) 1264/ 60012B6 : 32D3                		cmp/ge	r13,r2
(2) 1265/ 60012B8 : 8B01                		bf	.tl_snap
(2) 1266/ 60012BA : AFFC                		bra	.next_line
(2) 1267/ 60012BC : 32D8                		sub	r13,r2
(2) 1268/ 60012BE :                     .tl_snap:
(2) 1269/ 60012BE : 421A                		lds	r2,macl
(2) 1270/ 60012C0 : 32EC                		add	r14,r2
(2) 1271/ 60012C2 :                     	rept 16/4
(2) 1272/ 60012C2 :                     		mov	@r1,r0
(2) 1273/ 60012C2 :                     		swap.w	r0,r0		; 3 4 1 2
(2) 1274/ 60012C2 :                     		swap.b	r0,r0		; 3 4 2 1
(2) 1275/ 60012C2 :                     		tst	#$FF,r0
(2) 1276/ 60012C2 :                     		bt	.z_0
(2) 1277/ 60012C2 :                     		add	r3,r0
(2) 1278/ 60012C2 :                     .z_0:		swap.b	r0,r0		; 3 4 1 2
(2) 1279/ 60012C2 :                     		tst	#$FF,r0
(2) 1280/ 60012C2 :                     		bt	.z_1
(2) 1281/ 60012C2 :                     		add	r3,r0
(2) 1282/ 60012C2 :                     .z_1:		swap.w	r0,r0		; 1 2 3 4
(2) 1283/ 60012C2 :                     		swap.b	r0,r0		; 1 2 4 3
(2) 1284/ 60012C2 :                     		tst	#$FF,r0
(2) 1285/ 60012C2 :                     		bt	.z_2
(2) 1286/ 60012C2 :                     		add	r3,r0
(2) 1287/ 60012C2 :                     .z_2:		swap.b	r0,r0		; 1 2 3 4
(2) 1288/ 60012C2 :                     		tst	#$FF,r0
(2) 1289/ 60012C2 :                     		bt	.z_3
(2) 1290/ 60012C2 :                     		add	r3,r0
(2) 1291/ 60012C2 :                     .z_3:
(2) 1292/ 60012C2 :                     		add	#4,r1		; <-- src incr
(2) 1293/ 60012C2 :                     		mov	r0,@r2
(2) 1294/ 60012C2 :                     		add	#4,r2
(2) 1295/ 60012C2 :                     	endm
(2) 1272/ 60012C2 : 6012                		mov	@r1,r0
(2) 1273/ 60012C4 : 6009                		swap.w	r0,r0		; 3 4 1 2
(2) 1274/ 60012C6 : 6008                		swap.b	r0,r0		; 3 4 2 1
(2) 1275/ 60012C8 : C8FF                		tst	#$FF,r0
(2) 1276/ 60012CA : 8900                		bt	.z_0
(2) 1277/ 60012CC : 303C                		add	r3,r0
(2) 1278/ 60012CE : 6008                .z_0:		swap.b	r0,r0		; 3 4 1 2
(2) 1279/ 60012D0 : C8FF                		tst	#$FF,r0
(2) 1280/ 60012D2 : 8900                		bt	.z_1
(2) 1281/ 60012D4 : 303C                		add	r3,r0
(2) 1282/ 60012D6 : 6009                .z_1:		swap.w	r0,r0		; 1 2 3 4
(2) 1283/ 60012D8 : 6008                		swap.b	r0,r0		; 1 2 4 3
(2) 1284/ 60012DA : C8FF                		tst	#$FF,r0
(2) 1285/ 60012DC : 8900                		bt	.z_2
(2) 1286/ 60012DE : 303C                		add	r3,r0
(2) 1287/ 60012E0 : 6008                .z_2:		swap.b	r0,r0		; 1 2 3 4
(2) 1288/ 60012E2 : C8FF                		tst	#$FF,r0
(2) 1289/ 60012E4 : 8900                		bt	.z_3
(2) 1290/ 60012E6 : 303C                		add	r3,r0
(2) 1291/ 60012E8 :                     .z_3:
(2) 1292/ 60012E8 : 7104                		add	#4,r1		; <-- src incr
(2) 1293/ 60012EA : 2202                		mov	r0,@r2
(2) 1294/ 60012EC : 7204                		add	#4,r2
(2) 1272/ 60012EE : 6012                		mov	@r1,r0
(2) 1273/ 60012F0 : 6009                		swap.w	r0,r0		; 3 4 1 2
(2) 1274/ 60012F2 : 6008                		swap.b	r0,r0		; 3 4 2 1
(2) 1275/ 60012F4 : C8FF                		tst	#$FF,r0
(2) 1276/ 60012F6 : 8900                		bt	.z_0
(2) 1277/ 60012F8 : 303C                		add	r3,r0
(2) 1278/ 60012FA : 6008                .z_0:		swap.b	r0,r0		; 3 4 1 2
(2) 1279/ 60012FC : C8FF                		tst	#$FF,r0
(2) 1280/ 60012FE : 8900                		bt	.z_1
(2) 1281/ 6001300 : 303C                		add	r3,r0
(2) 1282/ 6001302 : 6009                .z_1:		swap.w	r0,r0		; 1 2 3 4
(2) 1283/ 6001304 : 6008                		swap.b	r0,r0		; 1 2 4 3
(2) 1284/ 6001306 : C8FF                		tst	#$FF,r0
(2) 1285/ 6001308 : 8900                		bt	.z_2
(2) 1286/ 600130A : 303C                		add	r3,r0
(2) 1287/ 600130C : 6008                .z_2:		swap.b	r0,r0		; 1 2 3 4
(2) 1288/ 600130E : C8FF                		tst	#$FF,r0
(2) 1289/ 6001310 : 8900                		bt	.z_3
(2) 1290/ 6001312 : 303C                		add	r3,r0
(2) 1291/ 6001314 :                     .z_3:
(2) 1292/ 6001314 : 7104                		add	#4,r1		; <-- src incr
(2) 1293/ 6001316 : 2202                		mov	r0,@r2
(2) 1294/ 6001318 : 7204                		add	#4,r2
(2) 1272/ 600131A : 6012                		mov	@r1,r0
(2) 1273/ 600131C : 6009                		swap.w	r0,r0		; 3 4 1 2
(2) 1274/ 600131E : 6008                		swap.b	r0,r0		; 3 4 2 1
(2) 1275/ 6001320 : C8FF                		tst	#$FF,r0
(2) 1276/ 6001322 : 8900                		bt	.z_0
(2) 1277/ 6001324 : 303C                		add	r3,r0
(2) 1278/ 6001326 : 6008                .z_0:		swap.b	r0,r0		; 3 4 1 2
(2) 1279/ 6001328 : C8FF                		tst	#$FF,r0
(2) 1280/ 600132A : 8900                		bt	.z_1
(2) 1281/ 600132C : 303C                		add	r3,r0
(2) 1282/ 600132E : 6009                .z_1:		swap.w	r0,r0		; 1 2 3 4
(2) 1283/ 6001330 : 6008                		swap.b	r0,r0		; 1 2 4 3
(2) 1284/ 6001332 : C8FF                		tst	#$FF,r0
(2) 1285/ 6001334 : 8900                		bt	.z_2
(2) 1286/ 6001336 : 303C                		add	r3,r0
(2) 1287/ 6001338 : 6008                .z_2:		swap.b	r0,r0		; 1 2 3 4
(2) 1288/ 600133A : C8FF                		tst	#$FF,r0
(2) 1289/ 600133C : 8900                		bt	.z_3
(2) 1290/ 600133E : 303C                		add	r3,r0
(2) 1291/ 6001340 :                     .z_3:
(2) 1292/ 6001340 : 7104                		add	#4,r1		; <-- src incr
(2) 1293/ 6001342 : 2202                		mov	r0,@r2
(2) 1294/ 6001344 : 7204                		add	#4,r2
(2) 1272/ 6001346 : 6012                		mov	@r1,r0
(2) 1273/ 6001348 : 6009                		swap.w	r0,r0		; 3 4 1 2
(2) 1274/ 600134A : 6008                		swap.b	r0,r0		; 3 4 2 1
(2) 1275/ 600134C : C8FF                		tst	#$FF,r0
(2) 1276/ 600134E : 8900                		bt	.z_0
(2) 1277/ 6001350 : 303C                		add	r3,r0
(2) 1278/ 6001352 : 6008                .z_0:		swap.b	r0,r0		; 3 4 1 2
(2) 1279/ 6001354 : C8FF                		tst	#$FF,r0
(2) 1280/ 6001356 : 8900                		bt	.z_1
(2) 1281/ 6001358 : 303C                		add	r3,r0
(2) 1282/ 600135A : 6009                .z_1:		swap.w	r0,r0		; 1 2 3 4
(2) 1283/ 600135C : 6008                		swap.b	r0,r0		; 1 2 4 3
(2) 1284/ 600135E : C8FF                		tst	#$FF,r0
(2) 1285/ 6001360 : 8900                		bt	.z_2
(2) 1286/ 6001362 : 303C                		add	r3,r0
(2) 1287/ 6001364 : 6008                .z_2:		swap.b	r0,r0		; 1 2 3 4
(2) 1288/ 6001366 : C8FF                		tst	#$FF,r0
(2) 1289/ 6001368 : 8900                		bt	.z_3
(2) 1290/ 600136A : 303C                		add	r3,r0
(2) 1291/ 600136C :                     .z_3:
(2) 1292/ 600136C : 7104                		add	#4,r1		; <-- src incr
(2) 1293/ 600136E : 2202                		mov	r0,@r2
(2) 1294/ 6001370 : 7204                		add	#4,r2
(2) 1296/ 6001372 : 021A                		sts	macl,r2
(2) 1297/ 6001374 : 4410                		dt	r4
(2) 1298/ 6001376 : 8F9E                		bf/s	.next_line
(2) 1299/ 6001378 : 32BC                		add	r11,r2
(2) 1300/ 600137A :                     
(2) 1301/ 600137A : 030A                		sts	mach,r3
(2) 1302/ 600137C : 000B                		rts
(2) 1303/ 600137E : 0009                		nop
(2) 1304/ 6001380 :                     		align 4
(2) 1305/ 6001380 :                     		ltorg
(2) 1306/ 6001380 :                     
(1) 1790/ 6001380 :                     		include "system/mars/cache/cache_mstr.asm"
(2)    1/ 6001380 :                     ; ====================================================================
(2)    2/ 6001380 :                     ; ----------------------------------------------------------------
(2)    3/ 6001380 :                     ; CACHE code
(2)    4/ 6001380 :                     ;
(2)    5/ 6001380 :                     ; LIMIT: $600 bytes
(2)    6/ 6001380 :                     ; ----------------------------------------------------------------
(2)    7/ 6001380 :                     
(2)    8/ 6001380 :                     		align 4
(2)    9/ 6001380 :                     CACHE_MASTER:
(2)   10/       0 :                     		phase 0;$C0000000	<-- AS can't phase this area
(2)   11/       0 :                     
(2)   12/       0 :                     ; ====================================================================
(2)   13/       0 :                     ; --------------------------------------------------------
(2)   14/       0 :                     ; Buffers
(2)   15/       0 :                     ; --------------------------------------------------------
(2)   16/       0 :                     
(2)   17/       0 : 4D41 5354 4552      		dc.b "MASTER CACHE GOES HERE"
                6 : 2043 4143 4845 
                C : 2047 4F45 5320 
               12 : 4845 5245          
(2)   18/      16 :                     		align 4
(2)   19/      18 :                     
(2)   20/      18 :                     ; ====================================================================
(2)   21/      18 :                     ; --------------------------------------------------------
(2)   22/      18 :                     ;
(2)   23/      18 :                     ; --------------------------------------------------------
(2)   24/      18 :                     
(2)   25/      18 :                     ; ------------------------------------------------
(2)   26/      18 :                     .end:
(2)   27/ 6001398 :                     		dephase
(2)   28/ 6001398 :                     ; 		phase CACHE_MASTER+.end&$1FFF
(2)   29/ 6001398 :                     
(2)   30/ 6001398 :                     		align 4
(2)   31/ 6001398 :                     CACHE_MASTER_E:
(2)   35/ 6001398 :                     
(1) 1791/ 6001398 :                     		include "system/mars/cache/cache_slv.asm"
(2)    1/ 6001398 :                     ; ====================================================================
(2)    2/ 6001398 :                     ; ----------------------------------------------------------------
(2)    3/ 6001398 :                     ; CACHE code
(2)    4/ 6001398 :                     ;
(2)    5/ 6001398 :                     ; LIMIT: $600 bytes
(2)    6/ 6001398 :                     ; ----------------------------------------------------------------
(2)    7/ 6001398 :                     
(2)    8/ 6001398 :                     		align 4
(2)    9/ 6001398 :                     CACHE_SLAVE:
(2)   10/       0 :                     		phase 0;$C0000000	<-- AS can't phase this area
(2)   11/       0 :                     
(2)   12/       0 :                     ; ====================================================================
(2)   13/       0 :                     ; --------------------------------------------------------
(2)   14/       0 :                     ; PWM Interrupt
(2)   15/       0 :                     ; --------------------------------------------------------
(2)   16/       0 :                     
(2)   17/       0 :                     ; MarsPwm_Playback:
(2)   18/       0 :                     s_irq_pwm:
(2)   19/       0 : 918A                		mov	#_FRT,r1
(2)   20/       2 : 8417                		mov.b	@(7,r1),r0
(2)   21/       4 : CA02                		xor	#2,r0
(2)   22/       6 : 8017                		mov.b	r0,@(7,r1)
(2)   23/       8 : D13F                		mov	#_sysreg+pwmintclr,r1
(2)   24/       A : 2101                		mov.w	r0,@r1
(2)   25/       C : 6011                		mov.w	@r1,r0
(2)   26/       E : D13F                		mov	#_sysreg+monowidth,r1
(2)   27/      10 : 6011                		mov.w	@r1,r0
(2)   28/      12 : 4019                		shlr8	r0
(2)   29/      14 : C880                		tst	#$80,r0
(2)   30/      16 : 8B74                		bf	.pwm_full
(2)   31/      18 : 2F26                		mov	r2,@-r15
(2)   32/      1A : 2F36                		mov	r3,@-r15
(2)   33/      1C : 2F46                		mov	r4,@-r15
(2)   34/      1E : 2F56                		mov	r5,@-r15
(2)   35/      20 : 2F66                		mov	r6,@-r15
(2)   36/      22 : 2F76                		mov	r7,@-r15
(2)   37/      24 : 2F86                		mov	r8,@-r15
(2)   38/      26 : 2F96                		mov	r9,@-r15
(2)   39/      28 : 2FA6                		mov	r10,@-r15
(2)   40/      2A : 4F12                		sts	macl,@-r15
(2)   41/      2C :                     ; ------------------------------------------------
(2)   42/      2C :                     
(2)   43/      2C :                     .fifo_loop:
(2)   44/      2C : DA38                		mov	#$C0000000|RAM_Mars_PwmList,r10
(2)   45/      2E : E907                		mov	#MAX_PWMCHNL,r9
(2)   46/      30 : E600                		mov	#0,r6			; r6 - left
(2)   47/      32 : E700                		mov	#0,r7			; r7 - right
(2)   48/      34 :                     .next_chnl:
(2)   49/      34 : 54A0                		mov	@(mchnsnd_enbl,r10),r4
(2)   50/      36 : 6043                		mov	r4,r0
(2)   51/      38 : C880                		tst	#$80,r0
(2)   52/      3A : 8B02                		bf	.enabled
(2)   53/      3C : 916D                .silence:	mov	#$80,r1
(2)   54/      3E : A041                		bra	.chnl_off
(2)   55/      40 : 6213                		mov	r1,r2
(2)   56/      42 :                     .enabled:
(2)   57/      42 : 53A6                		mov	@(mchnsnd_pitch,r10),r3
(2)   58/      44 : C808                		tst	#%1000,r0
(2)   59/      46 : 8900                		bt	.st_pitch
(2)   60/      48 : 4300                		shll	r3
(2)   61/      4A :                     .st_pitch:
(2)   62/      4A : 55A1                		mov	@(mchnsnd_read,r10),r5
(2)   63/      4C : 353C                		add	r3,r5
(2)   64/      4E : 50A4                		mov	@(mchnsnd_len,r10),r0
(2)   65/      50 : 3038                		sub	r3,r0
(2)   66/      52 : 3503                		cmp/ge	r0,r5
(2)   67/      54 : 8B08                		bf	.keep
(2)   68/      56 : 6043                		mov	r4,r0
(2)   69/      58 : C804                		tst	#%0100,r0
(2)   70/      5A : 8B02                		bf	.loopit
(2)   71/      5C : 200A                		xor	r0,r0
(2)   72/      5E : AFED                		bra	.silence
(2)   73/      60 : 1A00                		mov	r0,@(mchnsnd_enbl,r10)
(2)   74/      62 :                     .loopit:
(2)   75/      62 : 55A3                		mov	@(mchnsnd_start,r10),r5
(2)   76/      64 : 53A5                		mov	@(mchnsnd_loop,r10),r3
(2)   77/      66 : 353C                		add	r3,r5
(2)   78/      68 :                     .keep:
(2)   79/      68 : 1A51                		mov	r5,@(mchnsnd_read,r10)
(2)   80/      6A : 6043                		mov	r4,r0
(2)   81/      6C :                     
(2)   82/      6C :                     	; Make wave address point
(2)   83/      6C :                     	; r5 - xxxxxx.00
(2)   84/      6C : 54A2                		mov	@(mchnsnd_bank,r10),r4
(2)   85/      6E : 4519                		shlr8	r5
(2)   86/      70 : 254B                		or	r4,r5
(2)   87/      72 :                     .read_wav:
(2)   88/      72 : C808                		tst	#%1000,r0
(2)   89/      74 : 8901                		bt	.stand
(2)   90/      76 : E3FE                		mov	#-2,r3
(2)   91/      78 : 2539                		and	r3,r5
(2)   92/      7A :                     .stand:
(2)   93/      7A : 6354                		mov.b	@r5+,r3
(2)   94/      7C : 633C                		extu.b	r3,r3
(2)   95/      7E : C808                		tst	#%1000,r0
(2)   96/      80 : 8902                		bt	.do_mono
(2)   97/      82 : 6454                		mov.b	@r5+,r4
(2)   98/      84 : A001                		bra	.go_wave
(2)   99/      86 : 644C                		extu.b	r4,r4
(2)  100/      88 :                     .do_mono:
(2)  101/      88 : 6433                		mov	r3,r4
(2)  102/      8A :                     
(2)  103/      8A :                     ; r3 - left byte
(2)  104/      8A :                     ; r4 - right byte
(2)  105/      8A :                     .go_wave:
(2)  106/      8A : 7301                		add	#1,r3
(2)  107/      8C : 7401                		add	#1,r4
(2)  108/      8E : E180                		mov.b	#$80,r1
(2)  109/      90 : 611C                		extu.b	r1,r1
(2)  110/      92 : 6213                		mov	r1,r2
(2)  111/      94 : C802                .mnon_z:	tst	#%0010,r0
(2)  112/      96 : 8900                		bt	.ml_out
(2)  113/      98 : 6133                		mov	r3,r1
(2)  114/      9A : C801                .ml_out:	tst	#%0001,r0
(2)  115/      9C : 8900                		bt	.do_vol
(2)  116/      9E : 6243                		mov	r4,r2
(2)  117/      A0 :                     ; r1 - left
(2)  118/      A0 :                     ; r2 - right
(2)  119/      A0 :                     .do_vol:
(2)  120/      A0 : 50A7                		mov	@(mchnsnd_vol,r10),r0
(2)  121/      A2 : 4015                		cmp/pl	r0
(2)  122/      A4 : 8B0E                		bf	.chnl_off
(2)  123/      A6 : 7001                		add	#1,r0
(2)  124/      A8 : 210E                		mulu	r0,r1
(2)  125/      AA : 041A                		sts	macl,r4
(2)  126/      AC : 4419                		shlr8	r4
(2)  127/      AE : 3148                		sub	r4,r1
(2)  128/      B0 : 220E                		mulu	r0,r2
(2)  129/      B2 : 041A                		sts	macl,r4
(2)  130/      B4 : 4419                		shlr8	r4
(2)  131/      B6 : 3248                		sub	r4,r2
(2)  132/      B8 : 942F                		mov	#$80,r4
(2)  133/      BA : 240E                		mulu	r0,r4
(2)  134/      BC : 001A                		sts	macl,r0
(2)  135/      BE : 4019                		shlr8	r0
(2)  136/      C0 : 310C                		add	r0,r1
(2)  137/      C2 : 320C                		add	r0,r2
(2)  138/      C4 :                     .chnl_off:
(2)  139/      C4 : 361C                		add	r1,r6
(2)  140/      C6 : 372C                		add	r2,r7
(2)  141/      C8 : 4910                		dt	r9
(2)  142/      CA : 8FB3                		bf/s	.next_chnl
(2)  143/      CC : 7A20                		add	#sizeof_marssnd,r10
(2)  144/      CE :                     
(2)  145/      CE : 9025                		mov	#$3FF,r0
(2)  146/      D0 : 3603                		cmp/ge	r0,r6
(2)  147/      D2 : 8B00                		bf	.l_max
(2)  148/      D4 : 6603                		mov	r0,r6
(2)  149/      D6 :                     .l_max:
(2)  150/      D6 : 3703                		cmp/ge	r0,r7
(2)  151/      D8 : 8B00                		bf	.r_max
(2)  152/      DA : 6703                		mov	r0,r7
(2)  153/      DC :                     .r_max:
(2)  154/      DC : 4628                		shll16	r6
(2)  155/      DE : 276B                		or	r6,r7
(2)  156/      E0 : D00C                		mov	#_sysreg+lchwidth,r0
(2)  157/      E2 : 2072                		mov	r7,@r0
(2)  158/      E4 : D109                		mov	#_sysreg+monowidth,r1
(2)  159/      E6 : 6011                		mov.w	@r1,r0
(2)  160/      E8 : 4019                		shlr8	r0
(2)  161/      EA : C880                		tst	#$80,r0
(2)  162/      EC : 899E                		bt	.fifo_loop
(2)  163/      EE :                     
(2)  164/      EE :                     ; ------------------------------------------------
(2)  165/      EE : 4F16                		lds	@r15+,macl
(2)  166/      F0 : 6AF6                		mov	@r15+,r10
(2)  167/      F2 : 69F6                		mov	@r15+,r9
(2)  168/      F4 : 68F6                		mov	@r15+,r8
(2)  169/      F6 : 67F6                		mov	@r15+,r7
(2)  170/      F8 : 66F6                		mov	@r15+,r6
(2)  171/      FA : 65F6                		mov	@r15+,r5
(2)  172/      FC : 64F6                		mov	@r15+,r4
(2)  173/      FE : 63F6                		mov	@r15+,r3
(2)  174/     100 : 62F6                		mov	@r15+,r2
(2)  175/     102 :                     .pwm_full:
(2)  176/     102 : 000B                		rts
(2)  177/     104 : 0009                		nop
(2)  178/     106 :                     		align 4
(2)  179/     108 : 2000 401C 2000      		ltorg
              10E : 4038 C000 0120 
              114 : 2000 4034 FE10 
              11A : 0080 03FF          
(2)  180/     11E :                     
(2)  181/     11E :                     ; ====================================================================
(2)  182/     11E :                     
(2)  183/     11E :                     			align $10
(2)  184/     120 :                     RAM_Mars_PwmList	ds.b sizeof_marssnd*MAX_PWMCHNL		; PWM list
(2)  185/     200 :                     RAM_Mars_PwmTable	ds.b 8*8				; Gema Z80 table
(2)  186/     240 :                     
(2)  187/     240 :                     ; ------------------------------------------------
(2)  188/ 60015D8 :                     		dephase
(2)  189/ 60015D8 :                     ; .end:		phase CACHE_SLAVE+.end&$1FFF
(2)  190/ 60015D8 :                     
(2)  191/ 60015D8 :                     		align 4
(2)  192/ 60015D8 :                     CACHE_SLAVE_E:
(2)  196/ 60015D8 :                     
(1) 1792/ 60015D8 :                     
(1) 1793/ 60015D8 :                     ; ====================================================================
(1) 1794/ 60015D8 :                     ; ----------------------------------------------------------------
(1) 1795/ 60015D8 :                     ; GLOBAL GBR Variables
(1) 1796/ 60015D8 :                     ;
(1) 1797/ 60015D8 :                     ; SHARED FOR BOTH CPUS, watch out for the Read/Write conflicts.
(1) 1798/ 60015D8 :                     ; ----------------------------------------------------------------
(1) 1799/ 60015D8 :                     
(1) 1800/ 60015D8 :                     			align $10
(1) 1801/ 60015E0 :                     RAM_Mars_Global:
(1) 1802/ 60015E0 : (MACRO)              			strct 0
(1) 1802/ 60015E0 : =$60015E0            GLBL_LASTPC     set *
(1) 1802/     9F4 :                                     dephase
(1) 1802/       0 :                                     phase 0
(1) 1802/       0 : =$0                  GLBL_LASTORG    set *
(1) 1803/       0 : 0000                marsGbl_XShift		dc.w 0					; **** Xscroll bit for indexed scrolling
(1) 1804/       2 : 0000                marsGbl_ThisFrame	dc.w 0
(1) 1805/       4 : 0000                marsGbl_SSprFlip	dc.w 0
(1) 1806/       6 : 0000                marsGbl_FreeW1		dc.w 0
(1) 1807/       8 : 0000 0000           marsGbl_DreqRead	dc.l 0					; **** RAM_Mars_DreqBuff_0|TH
(1) 1808/       C : 0000 0000           marsGbl_DreqWrite	dc.l 0					; RAM_Mars_DreqBuff_1|TH
(1) 1809/      10 : 0000 0000           marsGbl_Scrl_Xpos	dc.l 0					; ****
(1) 1810/      14 : 0000 0000           marsGbl_Scrl_Ypos	dc.l 0
(1) 1811/      18 : 0000 0000           marsGbl_Scrl_FREE0	dc.l 0
(1) 1812/      1C : 0000 0000           marsGbl_Scrl_FREE1	dc.l 0
(1) 1813/      20 : 0000 0000           marsGbl_Scrl_FbTL	dc.l 0					; ****
(1) 1814/      24 : 0000 0000           marsGbl_Scrl_FbY	dc.l 0
(1) 1815/      28 : 0000 0000           marsGbl_Scrl_Art	dc.l 0
(1) 1816/      2C : 0000 0000           marsGbl_Scrl_DrwAll	dc.l 0
(1) 1817/      30 : 0000 0000           marsGbl_Scrl_DrwR	dc.l 0					; ****
(1) 1818/      34 : 0000 0000           marsGbl_Scrl_DrwL	dc.l 0
(1) 1819/      38 : 0000 0000           marsGbl_Scrl_DrwD	dc.l 0
(1) 1820/      3C : 0000 0000           marsGbl_Scrl_DrwU	dc.l 0
(1) 1821/      40 : 0000 0000           marsGbl_Scrl_Size	dc.l 0					; ****
(1) 1822/      44 : 0000 0000           marsGbl_Scrl_Wdth	dc.l 0
(1) 1823/      48 : 0000 0000           marsGbl_Scrl_Hght	dc.l 0
(1) 1824/      4C : 0000 0000           marsGbl_Scrl_FbOut	dc.l 0
(1) 1825/      50 : 0000 0000           sizeof_MarsGbl		dc.l 0
(1) 1826/      54 : (MACRO)              			endstrct
(1) 1826/       0 :                                     org GLBL_LASTORG
(1) 1826/ 60015E0 :                                     phase GLBL_LASTPC
(1) 1827/ 60015E0 :                     			ds.b sizeof_MarsGbl
(1) 1828/ 6001630 :                     
(1) 1829/ 6001630 :                     ; ====================================================================
(1) 1830/ 6001630 :                     ; ----------------------------------------------------------------
(1) 1831/ 6001630 :                     ; CACHED RAM
(1) 1832/ 6001630 :                     ; ----------------------------------------------------------------
(1) 1833/ 6001630 :                     
(1) 1834/ 6001630 :                     			align $10
(1) 1835/ 6001630 :                     SH2_RAM:
(1) 1836/ 6001630 :                     			phase SH2_RAM
(1) 1837/ 6001630 :                     RAM_Mars_ScrlRefill_0	ds.w (512/SET_MSCRLSIZE)*(256/SET_MSCRLSIZE)	; Redraw blk timers (WORDS)
(1) 1838/ 6001A30 :                     ; RAM_Mars_ScrlRefill_1	ds.w (512/SET_MSCRLSIZE)*(256/SET_MSCRLSIZE)	; Redraw blk timers (WORDS)
(1) 1839/ 6001A30 :                     ; RAM_SSprFifo		ds.b ((64+4)*64)*8				; SSprite canvas boxes
(1) 1840/ 6001A30 :                     ; RAM_SSprFifo_e		ds.l 0
(1) 1841/ 6001A30 :                     			dephase
(1) 1842/ 6001A30 :                     
(1) 1843/ 6001A30 :                     ; ====================================================================
(1) 1844/ 6001A30 :                     ; ----------------------------------------------------------------
(1) 1845/ 6001A30 :                     ; NON-CACHED RAM
(1) 1846/ 6001A30 :                     ; ----------------------------------------------------------------
(1) 1847/ 6001A30 :                     
(1) 1848/ 6001A30 :                     			align $10
(1) 1849/ 6001A30 :                     SH2_RAM_TH:
(1) 1850/26001A30 :                     			phase SH2_RAM_TH|TH
(1) 1851/26001A30 :                     RAM_Mars_DreqBuff_0	ds.b sizeof_dreq			; DREQ data from Genesis
(1) 1852/26002140 :                     RAM_Mars_DreqBuff_1	ds.b sizeof_dreq			; ****
(1) 1853/ 6002850 :                     			dephase
(1) 1854/ 6002850 :                     
(1) 1855/ 6002850 :                     ; ====================================================================
(1) 1856/ 6002850 :                     ; ----------------------------------------------------------------
(1) 1857/ 6002850 :                     ; Data
(1) 1858/ 6002850 :                     ; ----------------------------------------------------------------
(1) 1859/ 6002850 :                     
(1) 1860/ 6002850 :                     		align 4
(1) 1861/ 6002850 :                     sin_table	binclude "system/mars/data/sinedata.bin"
(1) 1862/ 6005050 :                     		align 4
(1) 1863/ 6005050 :                     		include "sound/smpl_pwm.asm"		; GEMA: PWM samples
(2)    1/ 6005050 :                     ; ====================================================================
(2)    2/ 6005050 :                     ; --------------------------------------------------------
(2)    3/ 6005050 :                     ; GEMA/Nikona PWM instruments
(2)    4/ 6005050 :                     ;
(2)    5/ 6005050 :                     ; Located at SDRAM, SAMPLES MUST BE SMALL
(2)    6/ 6005050 :                     ;
(2)    7/ 6005050 :                     ; *** PUT align 4 AT THE TOP OF EVERY LABEL ***
(2)    8/ 6005050 :                     ; --------------------------------------------------------
(2)    9/ 6005050 :                     
(2)   10/ 6005050 :                     	align 4
(2)   11/ 6005050 :                     PwmIns_Nadie:
(2)   12/ 6005050 : (MACRO)              	gSmpHead .end-.start,0
(2)   12/ 6005050 : 50BF 01                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(2)   12/ 6005053 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(2)   13/ 6005056 :                     .start:	binclude "sound/instr/smpl/nadie_st.wav",$2C
(2)   14/ 6020FA6 :                     .end:
(2)   15/ 6020FA6 :                     	align 4
(2)   16/ 6020FA8 :                     PwmIns_PKick:
(2)   17/ 6020FA8 : (MACRO)              	gSmpHead .end-.start,0
(2)   17/ 6020FA8 : 7407 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(2)   17/ 6020FAB : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(2)   18/ 6020FAE :                     .start:	binclude "sound/instr/smpl/wegot_kick.wav",$2C
(2)   19/ 6021722 :                     .end:
(2)   20/ 6021722 :                     	align 4
(2)   21/ 6021724 :                     PwmIns_Piano:
(2)   22/ 6021724 : (MACRO)              	gSmpHead .end-.start,0
(2)   22/ 6021724 : D479 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(2)   22/ 6021727 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(2)   23/ 602172A :                     .start:	binclude "sound/instr/smpl/piano.wav",$2C
(2)   24/ 60290FE :                     .end:
(2)   25/ 60290FE :                     	align 4
(2)   26/ 6029100 :                     PwmIns_PTom:
(2)   27/ 6029100 : (MACRO)              	gSmpHead .end-.start,0
(2)   27/ 6029100 : BA0B 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(2)   27/ 6029103 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(2)   28/ 6029106 :                     .start:	binclude "sound/instr/smpl/sauron_tom.wav",$2C
(2)   29/ 6029CC0 :                     .end:
(2)   30/ 6029CC0 :                     
(1) 1864/ 6029CC0 :                     
(1) 1865/ 6029CC0 :                     ; ====================================================================
(1) 1866/ 6029CC0 :                     ; ----------------------------------------------------------------
(1) 1867/ 6029CC0 :                     ; Data
(1) 1868/ 6029CC0 :                     ; ----------------------------------------------------------------
(1) 1869/ 6029CC0 :                     
(1) 1870/ 6029CC0 :                     SH2_END:
(1) 1871/ 6029CC0 : (MACRO)              		report "SH2 SDRAM CODE/DATA",SH2_END&$FFFFFF,-1
(1) 1872/ 6029CC0 :                     
(1) 1873/ 6029CC0 :                     ; ====================================================================
(1) 1874/ 6029CC0 :                     ; ----------------------------------------------------------------
(1) 1875/ 6029CC0 :                     ; USER data pointer
(1) 1876/ 6029CC0 :                     ; ----------------------------------------------------------------
(1) 1877/ 6029CC0 :                     
(1) 1878/ 6029CC0 :                     SH2_USER_DATA:
(1) 1879/ 6029CC0 :                     		cpu 68000
(1) 1880/ 6029CC0 :                     		padding off
(1) 1881/   286E0 :                     		dephase
(1) 1882/   2DC30 :                     		phase (SH2_END-SH2_Master)+MARS_RAMCODE
(1) 1883/   2DC30 :                     
     346/   2DC30 :                     MARS_RAMCODE_E:
     351/   2DC30 :                     
     352/   2DC30 :                     ; ====================================================================
     353/   2DC30 :                     ; --------------------------------------------------------
     354/   2DC30 :                     ; Screen modes
     355/   2DC30 :                     ;
     356/   2DC30 :                     ; These are stored as separate files on DISC
     357/   2DC30 :                     ;
     358/   2DC30 :                     ; Usage:
     359/   2DC30 :                     ; screen_code START_LABEL,END_LABEL,CODE_PATH
     360/   2DC30 :                     ; --------------------------------------------------------
     361/   2DC30 :                     
     362/   2DC30 : (MACRO)              	screen_code Md_Screen00,Md_Screen00_e,"game/screen_0/code.asm"
     362/   2DC30 :                                     align 4
     362/  8ADC30 :                                     phase $880000+*         ; 32X ROM-area
     362/  8ADC30 : =$8ADC30             MD_SCREEN00 label *
     362/   2DC30 :                                     dephase
     362/   2DC30 :                     
     362/   2DC30 :                     mctopscrn:
     362/FFFFFFFFFFFF2000 :                                     phase RAM_UserCode      ; SCD/32X/CD32X relocate to RAM area
     362/FFFFFFFFFFFF2000 :                     mcscrn_s:
     362/FFFFFFFFFFFF2000 :                             include "game/screen_0/code.asm";"game/screen_0/code.asm"
(1)    1/FFFFFFFFFFFF2000 :                     ; ====================================================================
(1)    2/FFFFFFFFFFFF2000 :                     ; ----------------------------------------------------------------
(1)    3/FFFFFFFFFFFF2000 :                     ; SCREEN MODE 0
(1)    4/FFFFFFFFFFFF2000 :                     ; ----------------------------------------------------------------
(1)    5/FFFFFFFFFFFF2000 :                     
(1)    6/FFFFFFFFFFFF2000 :                     ; ====================================================================
(1)    7/FFFFFFFFFFFF2000 :                     ; ------------------------------------------------------
(1)    8/FFFFFFFFFFFF2000 :                     ; Variables
(1)    9/FFFFFFFFFFFF2000 :                     ; ------------------------------------------------------
(1)   10/FFFFFFFFFFFF2000 :                     
(1)   11/FFFFFFFFFFFF2000 : =$440                setVram_Mikami	equ $0440
(1)   12/FFFFFFFFFFFF2000 : =$480                setVram_Sisi	equ $0480
(1)   13/FFFFFFFFFFFF2000 :                     
(1)   14/FFFFFFFFFFFF2000 :                     ; ====================================================================
(1)   15/FFFFFFFFFFFF2000 :                     ; ------------------------------------------------------
(1)   16/FFFFFFFFFFFF2000 :                     ; Structs
(1)   17/FFFFFFFFFFFF2000 :                     ; ------------------------------------------------------
(1)   18/FFFFFFFFFFFF2000 :                     
(1)   19/FFFFFFFFFFFF2000 :                     ; 		strct 0
(1)   20/FFFFFFFFFFFF2000 :                     ; strc_xpos	ds.w 1
(1)   21/FFFFFFFFFFFF2000 :                     ; strc_ypos	ds.w 1
(1)   22/FFFFFFFFFFFF2000 :                     ; 		endstrct
(1)   23/FFFFFFFFFFFF2000 :                     
(1)   24/FFFFFFFFFFFF2000 :                     ; ====================================================================
(1)   25/FFFFFFFFFFFF2000 :                     ; ------------------------------------------------------
(1)   26/FFFFFFFFFFFF2000 :                     ; This mode's RAM
(1)   27/FFFFFFFFFFFF2000 :                     ; ------------------------------------------------------
(1)   28/FFFFFFFFFFFF2000 :                     
(1)   29/FFFFFFFFFFFF2000 :  (MACRO-2)           			strct RAM_ScrnBuff
(1)   29/FFFFFFFFFFFF2000 : =$FFFFFFFFFFFF2000   GLBL_LASTPC     set *
(1)   29/   2DC30 :                                     dephase
(1)   29/FFFFFFFFFFFFD204 :                                     phase RAM_SCRNBUFF
(1)   29/FFFFFFFFFFFFD204 : =$FFFFFFFFFFFFD204   GLBL_LASTORG    set *
(1)   30/FFFFFFFFFFFFD204 :                     RAM_CurrPick		ds.w 1
(1)   31/FFFFFFFFFFFFD206 :                     RAM_GemaArg0		ds.w 1
(1)   32/FFFFFFFFFFFFD208 :                     RAM_GemaArg1		ds.w 1
(1)   33/FFFFFFFFFFFFD20A :                     RAM_GemaArg2		ds.w 1
(1)   34/FFFFFFFFFFFFD20C :                     
(1)   35/FFFFFFFFFFFFD20C :                     RAM_GemaArg3		ds.w 1
(1)   36/FFFFFFFFFFFFD20E :                     RAM_GemaArg4		ds.w 1
(1)   37/FFFFFFFFFFFFD210 :                     RAM_GemaArg5		ds.w 1
(1)   38/FFFFFFFFFFFFD212 :                     RAM_ChnlLinks		ds.w 26
(1)   39/FFFFFFFFFFFFD246 :                     sizeof_thisbuff		ds.l 0
(1)   40/FFFFFFFFFFFFD24C :  (MACRO-2)           			endstrct
(1)   40/FFFFFFFFFFFFD204 :                                     org GLBL_LASTORG
(1)   40/FFFFFFFFFFFF2000 :                                     phase GLBL_LASTPC
(1)   41/FFFFFFFFFFFF2000 :  (MACRO-2)           			erreport "SCREEN BUFFER",sizeof_thisbuff-RAM_ScrnBuff,MAX_ScrnBuff
(1)   42/FFFFFFFFFFFF2000 :                     
(1)   43/FFFFFFFFFFFF2000 :                     ; ====================================================================
(1)   44/FFFFFFFFFFFF2000 :                     ; ------------------------------------------------------
(1)   45/FFFFFFFFFFFF2000 :                     ; Init
(1)   46/FFFFFFFFFFFF2000 :                     ; ------------------------------------------------------
(1)   47/FFFFFFFFFFFF2000 :                     
(1)   48/FFFFFFFFFFFF2000 : 6100 F514           		bsr	Mode_Init
(1)   49/FFFFFFFFFFFF2004 :  (MACRO-2)           		set_dbanks file_mddata_def,pointr_marsdata_def
(1)   49/FFFFFFFFFFFF2004 : 41FA 025E                           lea     POINTR_MARSDATA_DEF(pc),a0          ; 32X/CD32X: SH2 side data
(1)   49/FFFFFFFFFFFF2008 : 6100 F5BE                           bsr     System_MarsDataPack
(1)   50/FFFFFFFFFFFF200C :                     
(1)   51/FFFFFFFFFFFF200C :                     	; ----------------------------------------------
(1)   52/FFFFFFFFFFFF200C :                     	; Load assets
(1)   54/FFFFFFFFFFFF200C :                     ; 		lea	(PalMars_Sabrina),a0
(1)   55/FFFFFFFFFFFF200C :                     ; 		move.w	#0,d0
(1)   56/FFFFFFFFFFFF200C :                     ; 		move.w	#128,d1
(1)   57/FFFFFFFFFFFF200C :                     ; 		moveq	#0,d2
(1)   58/FFFFFFFFFFFF200C :                     ; 		bsr	Video_FadePal_Mars
(1)   59/FFFFFFFFFFFF200C : 41F9 0092 EAF4      		lea	(PalMars_TEST),a0
(1)   60/FFFFFFFFFFFF2012 : 303C 0000           		move.w	#0,d0
(1)   61/FFFFFFFFFFFF2016 : 323C 0100           		move.w	#256,d1
(1)   62/FFFFFFFFFFFF201A : 7400                		moveq	#0,d2
(1)   63/FFFFFFFFFFFF201C : 6100 E8DE           		bsr	Video_FadePal_Mars
(1)   64/FFFFFFFFFFFF2020 : 203C 0602 9CC0      		move.l	#ArtMars_TEST,d0
(1)   65/FFFFFFFFFFFF2026 : 7200                		moveq	#0,d1
(1)   66/FFFFFFFFFFFF2028 : 7400                		moveq	#0,d2
(1)   67/FFFFFFFFFFFF202A : 6100 EFC8           		bsr	Video_MarsMap_Set
(1)   68/FFFFFFFFFFFF202E : 41F9 0092 E8C4      		lea	(MapMars_TEST),a0
(1)   69/FFFFFFFFFFFF2034 : 7000                		moveq	#0,d0
(1)   70/FFFFFFFFFFFF2036 : 7200                		moveq	#0,d1
(1)   71/FFFFFFFFFFFF2038 : 343C 0014           		move.w	#320/16,d2
(1)   72/FFFFFFFFFFFF203C : 363C 000E           		move.w	#224/16,d3
(1)   73/FFFFFFFFFFFF2040 : 383C 0000           		move.w	#0,d4
(1)   74/FFFFFFFFFFFF2044 : 6100 EFC6           		bsr	Video_MarsMap_Load
(1)   75/FFFFFFFFFFFF2048 : 7001                		moveq	#1,d0
(1)   76/FFFFFFFFFFFF204A : 6100 E878           		bsr	Video_MarsGfxMode
(1)   89/FFFFFFFFFFFF204E : 41F9 0006 26D8      		lea	(ASCII_FONT).l,a0
(1)   90/FFFFFFFFFFFF2054 : 43F9 FFFF 02E2      		lea	(ASCII_PAL).l,a1
(1)   91/FFFFFFFFFFFF205A : 6100 EA7A           		bsr	Video_PrintInit
(1)   92/FFFFFFFFFFFF205E : 203C 0006 BA58      		move.l	#Art_Sisi,d0
(1)   93/FFFFFFFFFFFF2064 : 323C 9000           		move.w	#cell_vram(setVram_Sisi),d1
(1)   94/FFFFFFFFFFFF2068 : 343C 05E0           		move.w	#Art_Sisi_e-Art_Sisi,d2
(1)   95/FFFFFFFFFFFF206C : 6100 E6BA           		bsr	Video_LoadArt
(1)   96/FFFFFFFFFFFF2070 :                     
(1)   97/FFFFFFFFFFFF2070 : 41FA 027C           		lea	PAL_TEST(pc),a0
(1)   98/FFFFFFFFFFFF2074 : 7000                		moveq	#0,d0
(1)   99/FFFFFFFFFFFF2076 : 323C 0010           		move.w	#16,d1
(1)  100/FFFFFFFFFFFF207A : 6100 E390           		bsr	Video_FadePal
(1)  101/FFFFFFFFFFFF207E : 41F9 0092 ED14      		lea	(objPal_Sisi),a0
(1)  102/FFFFFFFFFFFF2084 : 7010                		moveq	#16,d0
(1)  103/FFFFFFFFFFFF2086 : 323C 0010           		move.w	#16,d1
(1)  104/FFFFFFFFFFFF208A : 6100 E380           		bsr	Video_FadePal
(1)  105/FFFFFFFFFFFF208E : 41FA 027C           		lea	str_TesterInit(pc),a0
(1)  106/FFFFFFFFFFFF2092 : 203C 0000 0101      		move.l	#locate(1,1,0),d0
(1)  107/FFFFFFFFFFFF2098 : 6100 EA66           		bsr	Video_Print
(1)  108/FFFFFFFFFFFF209C :                     ; 		move.l	#Object_Mikami,d0
(1)  109/FFFFFFFFFFFF209C :                     ; 		moveq	#0,d1
(1)  110/FFFFFFFFFFFF209C :                     ; 		bsr	Objects_Set
(1)  111/FFFFFFFFFFFF209C : 203C FFFF 2276      		move.l	#Object_Sisi,d0
(1)  112/FFFFFFFFFFFF20A2 : 6100 ECA0           		bsr	Objects_Add
(1)  113/FFFFFFFFFFFF20A6 :                     	; ----------------------------------------------
(1)  114/FFFFFFFFFFFF20A6 : 4278 D206           		clr.w	(RAM_GemaArg0).w
(1)  115/FFFFFFFFFFFF20AA : 4278 D208           		clr.w	(RAM_GemaArg1).w
(1)  116/FFFFFFFFFFFF20AE : 4278 D20A           		clr.w	(RAM_GemaArg2).w
(1)  117/FFFFFFFFFFFF20B2 : 4278 D20C           		clr.w	(RAM_GemaArg3).w
(1)  118/FFFFFFFFFFFF20B6 : 4278 D20E           		clr.w	(RAM_GemaArg4).w
(1)  119/FFFFFFFFFFFF20BA : 4278 D210           		clr.w	(RAM_GemaArg5).w
(1)  120/FFFFFFFFFFFF20BE : 303C 00E8           		move.w	#200+32,d0
(1)  121/FFFFFFFFFFFF20C2 : 6100 E1AA           		bsr	gemaSetBeats
(1)  122/FFFFFFFFFFFF20C6 :                     ; 		moveq	#1,d0
(1)  123/FFFFFFFFFFFF20C6 :                     ; 		bsr	gemaPlayTrack
(1)  124/FFFFFFFFFFFF20C6 :                     	; ----------------------------------------------
(1)  125/FFFFFFFFFFFF20C6 : 616A                		bsr	.show_me
(1)  126/FFFFFFFFFFFF20C8 :                     ; 		bsr	.steal_vars
(1)  127/FFFFFFFFFFFF20C8 : 6100 EC32           		bsr	Objects_Run
(1)  128/FFFFFFFFFFFF20CC :                     	; ----------------------------------------------
(1)  129/FFFFFFFFFFFF20CC : 08F9 0006 FFFF      		bset	#bitDispEnbl,(RAM_VdpRegs+1).l		; Enable display
         FFFFFFFFFFFF20D2 : BDF7             
(1)  130/FFFFFFFFFFFF20D4 : 11FC 0081 BE02      		move.b	#%10000001,(RAM_VdpRegs+$C).w		; H40 + shadow mode
(1)  131/FFFFFFFFFFFF20DA : 6100 E1D4           		bsr	Video_Update
(1)  132/FFFFFFFFFFFF20DE : 6100 E2B4           		bsr	Video_FadeIn
(1)  133/FFFFFFFFFFFF20E2 :                     
(1)  134/FFFFFFFFFFFF20E2 :                     ; ====================================================================
(1)  135/FFFFFFFFFFFF20E2 :                     ; ------------------------------------------------------
(1)  136/FFFFFFFFFFFF20E2 :                     ; Loop
(1)  137/FFFFFFFFFFFF20E2 :                     ; ------------------------------------------------------
(1)  138/FFFFFFFFFFFF20E2 :                     
(1)  139/FFFFFFFFFFFF20E2 :                     .loop:
(1)  140/FFFFFFFFFFFF20E2 : 6100 EFFA           		bsr	System_Render
(1)  141/FFFFFFFFFFFF20E6 :                     
(1)  142/FFFFFFFFFFFF20E6 :                     ; 		bsr	.steal_vars
(1)  143/FFFFFFFFFFFF20E6 : 6100 EC14           		bsr	Objects_Run
(1)  144/FFFFFFFFFFFF20EA : 41FA 02E0           		lea	str_Info(pc),a0
(1)  145/FFFFFFFFFFFF20EE : 203C 0000 1F1A      		move.l	#locate(31,26,0),d0
(1)  146/FFFFFFFFFFFF20F4 : 6100 EA0A           		bsr	Video_Print
(1)  147/FFFFFFFFFFFF20F8 :                     
(1)  148/FFFFFFFFFFFF20F8 :                     	; Controls
(1)  161/FFFFFFFFFFFF20F8 :                     
(1)  162/FFFFFFFFFFFF20F8 : 4DF8 C004           		lea	(Controller_1).w,a6
(1)  163/FFFFFFFFFFFF20FC : 4BF8 D204           		lea	(RAM_CurrPick).w,a5
(1)  164/FFFFFFFFFFFF2100 :                     	; UP/DOWN
(1)  165/FFFFFFFFFFFF2100 : 3E2E 0004           		move.w	on_press(a6),d7
(1)  166/FFFFFFFFFFFF2104 : 0807 0001           		btst	#bitJoyDown,d7
(1)  167/FFFFFFFFFFFF2108 : 670A                		beq.s	.n_down
(1)  168/FFFFFFFFFFFF210A : 0C55 0004           		cmp.w	#4,(a5)		; MAX OPTIONS
(1)  169/FFFFFFFFFFFF210E : 6704                		beq.s	.n_down
(1)  170/FFFFFFFFFFFF2110 : 5255                		addq.w	#1,(a5)
(1)  171/FFFFFFFFFFFF2112 : 611E                		bsr.s	.show_me
(1)  172/FFFFFFFFFFFF2114 :                     .n_down:
(1)  173/FFFFFFFFFFFF2114 : 3E2E 0004           		move.w	on_press(a6),d7
(1)  174/FFFFFFFFFFFF2118 : 0807 0000           		btst	#bitJoyUp,d7
(1)  175/FFFFFFFFFFFF211C : 6708                		beq.s	.n_up
(1)  176/FFFFFFFFFFFF211E : 4A55                		tst.w	(a5)
(1)  177/FFFFFFFFFFFF2120 : 6704                		beq.s	.n_up
(1)  178/FFFFFFFFFFFF2122 : 5355                		subq.w	#1,(a5)
(1)  179/FFFFFFFFFFFF2124 : 610C                		bsr.s	.show_me
(1)  180/FFFFFFFFFFFF2126 :                     .n_up:
(1)  181/FFFFFFFFFFFF2126 : 3E38 D204           		move.w	(RAM_CurrPick).w,d7
(1)  182/FFFFFFFFFFFF212A : E54F                		lsl.w	#2,d7
(1)  183/FFFFFFFFFFFF212C : 4EBB 7012           		jsr	.jump_list(pc,d7.w)
(1)  184/FFFFFFFFFFFF2130 :                     .n_cbtn:
(1)  185/FFFFFFFFFFFF2130 : 60B0                		bra	.loop
(1)  186/FFFFFFFFFFFF2132 :                     ; ------------------------------------------------------
(1)  187/FFFFFFFFFFFF2132 :                     
(1)  188/FFFFFFFFFFFF2132 :                     .show_me:
(1)  189/FFFFFFFFFFFF2132 : 41FA 026C           		lea	str_ShowMe(pc),a0
(1)  190/FFFFFFFFFFFF2136 : 203C 0000 1705      		move.l	#locate(23,5,0),d0
(1)  191/FFFFFFFFFFFF213C : 6000 E9C2           		bra	Video_Print
(1)  192/FFFFFFFFFFFF2140 :                     
(1)  193/FFFFFFFFFFFF2140 :                     ; ------------------------------------------------------
(1)  194/FFFFFFFFFFFF2140 :                     
(1)  195/FFFFFFFFFFFF2140 :                     .jump_list:
(1)  196/FFFFFFFFFFFF2140 : 6000 001E           		bra.w	.nothing
(1)  197/FFFFFFFFFFFF2144 : 6000 002C           		bra.w	.option_1
(1)  198/FFFFFFFFFFFF2148 : 6000 0092           		bra.w	.option_2
(1)  199/FFFFFFFFFFFF214C : 6000 00A8           		bra.w	.option_3
(1)  200/FFFFFFFFFFFF2150 : 6000 00BE           		bra.w	.option_4
(1)  201/FFFFFFFFFFFF2154 : 6000 000A           		bra.w	.nothing
(1)  202/FFFFFFFFFFFF2158 : 6000 0006           		bra.w	.nothing
(1)  203/FFFFFFFFFFFF215C : 6000 0002           		bra.w	.nothing
(1)  204/FFFFFFFFFFFF2160 :                     
(1)  205/FFFFFFFFFFFF2160 :                     ; ------------------------------------------------------
(1)  206/FFFFFFFFFFFF2160 :                     ; OPTION 0
(1)  207/FFFFFFFFFFFF2160 :                     ; ------------------------------------------------------
(1)  208/FFFFFFFFFFFF2160 :                     
(1)  209/FFFFFFFFFFFF2160 :                     .nothing:
(1)  210/FFFFFFFFFFFF2160 : 3E2E 0004           		move.w	on_press(a6),d7
(1)  211/FFFFFFFFFFFF2164 : 0807 0007           		btst	#bitJoyStart,d7
(1)  212/FFFFFFFFFFFF2168 : 6706                		beq.s	.no_press
(1)  213/FFFFFFFFFFFF216A : 61C6                		bsr.s	.show_me
(1)  214/FFFFFFFFFFFF216C : 6000 E064           		bra	gemaTest
(1)  215/FFFFFFFFFFFF2170 :                     .no_press:
(1)  216/FFFFFFFFFFFF2170 : 4E75                		rts
(1)  217/FFFFFFFFFFFF2172 :                     
(1)  218/FFFFFFFFFFFF2172 :                     ; ------------------------------------------------------
(1)  219/FFFFFFFFFFFF2172 :                     ; OPTION 1
(1)  220/FFFFFFFFFFFF2172 :                     ; ------------------------------------------------------
(1)  221/FFFFFFFFFFFF2172 :                     
(1)  222/FFFFFFFFFFFF2172 :                     .option_1:
(1)  223/FFFFFFFFFFFF2172 : 4BF8 D206           		lea	(RAM_GemaArg0).w,a5
(1)  224/FFFFFFFFFFFF2176 : 3E2E 0004           		move.w	on_press(a6),d7
(1)  225/FFFFFFFFFFFF217A : 0807 0007           		btst	#bitJoyStart,d7
(1)  226/FFFFFFFFFFFF217E : 671E                		beq.s	.option1_args
(1)  227/FFFFFFFFFFFF2180 : 301D                		move.w	(a5)+,d0
(1)  228/FFFFFFFFFFFF2182 : 321D                		move.w	(a5)+,d1
(1)  229/FFFFFFFFFFFF2184 : 341D                		move.w	(a5)+,d2
(1)  230/FFFFFFFFFFFF2186 : 6100 E070           		bsr	gemaPlayTrack
(1)  231/FFFFFFFFFFFF218A : 3038 D208           		move.w	(RAM_GemaArg1).w,d0
(1)  232/FFFFFFFFFFFF218E : 3200                		move.w	d0,d1
(1)  233/FFFFFFFFFFFF2190 : D241                		add.w	d1,d1
(1)  234/FFFFFFFFFFFF2192 : 41FA 0096           		lea	.extnal_beats(pc),a0
(1)  235/FFFFFFFFFFFF2196 : 3030 1000           		move.w	(a0,d1.w),d0
(1)  236/FFFFFFFFFFFF219A : 6000 E0D2           		bra	gemaSetBeats
(1)  237/FFFFFFFFFFFF219E :                     ; 		bra.s	.show_me
(1)  238/FFFFFFFFFFFF219E :                     .option1_args:
(1)  239/FFFFFFFFFFFF219E : 3E2E 0002           		move.w	on_hold(a6),d7
(1)  240/FFFFFFFFFFFF21A2 : 3C07                		move.w	d7,d6
(1)  241/FFFFFFFFFFFF21A4 : 0246 0070           		andi.w	#JoyA+JoyB+JoyC,d6
(1)  242/FFFFFFFFFFFF21A8 : 67C6                		beq.s	.no_press
(1)  243/FFFFFFFFFFFF21AA : 0807 0004           		btst	#bitJoyB,d7
(1)  244/FFFFFFFFFFFF21AE : 6704                		beq.s	.d2_opt
(1)  245/FFFFFFFFFFFF21B0 : DAFC 0002           		adda	#2,a5
(1)  246/FFFFFFFFFFFF21B4 :                     .d2_opt:
(1)  247/FFFFFFFFFFFF21B4 : 0807 0005           		btst	#bitJoyC,d7
(1)  248/FFFFFFFFFFFF21B8 : 6704                		beq.s	.d3_opt
(1)  249/FFFFFFFFFFFF21BA : DAFC 0004           		adda	#4,a5
(1)  250/FFFFFFFFFFFF21BE :                     .d3_opt:
(1)  251/FFFFFFFFFFFF21BE : 3E2E 0004           		move.w	on_press(a6),d7
(1)  252/FFFFFFFFFFFF21C2 : 0807 0003           		btst	#bitJoyRight,d7
(1)  253/FFFFFFFFFFFF21C6 : 6706                		beq.s	.op1_right
(1)  254/FFFFFFFFFFFF21C8 : 5255                		addq.w	#1,(a5)
(1)  255/FFFFFFFFFFFF21CA : 6000 FF66           		bra	.show_me
(1)  256/FFFFFFFFFFFF21CE :                     .op1_right:
(1)  257/FFFFFFFFFFFF21CE : 0807 0002           		btst	#bitJoyLeft,d7
(1)  258/FFFFFFFFFFFF21D2 : 6706                		beq.s	.op1_left
(1)  259/FFFFFFFFFFFF21D4 : 5355                		subq.w	#1,(a5)
(1)  260/FFFFFFFFFFFF21D6 : 6000 FF5A           		bra	.show_me
(1)  261/FFFFFFFFFFFF21DA :                     .op1_left:
(1)  262/FFFFFFFFFFFF21DA : 4E75                		rts
(1)  263/FFFFFFFFFFFF21DC :                     
(1)  264/FFFFFFFFFFFF21DC :                     ; ------------------------------------------------------
(1)  265/FFFFFFFFFFFF21DC :                     ; OPTION 2
(1)  266/FFFFFFFFFFFF21DC :                     ; ------------------------------------------------------
(1)  267/FFFFFFFFFFFF21DC :                     
(1)  268/FFFFFFFFFFFF21DC :                     .option_2:
(1)  269/FFFFFFFFFFFF21DC : 4BF8 D206           		lea	(RAM_GemaArg0).w,a5
(1)  270/FFFFFFFFFFFF21E0 : 3E2E 0004           		move.w	on_press(a6),d7
(1)  271/FFFFFFFFFFFF21E4 : 0807 0007           		btst	#bitJoyStart,d7
(1)  272/FFFFFFFFFFFF21E8 : 67B4                		beq.s	.option1_args
(1)  273/FFFFFFFFFFFF21EA : 301D                		move.w	(a5)+,d0
(1)  274/FFFFFFFFFFFF21EC : 321D                		move.w	(a5)+,d1
(1)  275/FFFFFFFFFFFF21EE : 6000 E02A           		bra	gemaStopTrack
(1)  276/FFFFFFFFFFFF21F2 : 6000 FF3E           		bra	.show_me
(1)  277/FFFFFFFFFFFF21F6 :                     
(1)  278/FFFFFFFFFFFF21F6 :                     ; ------------------------------------------------------
(1)  279/FFFFFFFFFFFF21F6 :                     ; OPTION 3
(1)  280/FFFFFFFFFFFF21F6 :                     ; ------------------------------------------------------
(1)  281/FFFFFFFFFFFF21F6 :                     
(1)  282/FFFFFFFFFFFF21F6 :                     .option_3:
(1)  283/FFFFFFFFFFFF21F6 : 4BF8 D20C           		lea	(RAM_GemaArg3).w,a5
(1)  284/FFFFFFFFFFFF21FA : 3E2E 0004           		move.w	on_press(a6),d7
(1)  285/FFFFFFFFFFFF21FE : 0807 0007           		btst	#bitJoyStart,d7
(1)  286/FFFFFFFFFFFF2202 : 679A                		beq.s	.option1_args
(1)  287/FFFFFFFFFFFF2204 : 301D                		move.w	(a5)+,d0
(1)  288/FFFFFFFFFFFF2206 : 321D                		move.w	(a5)+,d1
(1)  289/FFFFFFFFFFFF2208 : 6000 E02C           		bra	gemaFadeTrack
(1)  290/FFFFFFFFFFFF220C : 6000 FF24           		bra	.show_me
(1)  291/FFFFFFFFFFFF2210 :                     
(1)  292/FFFFFFFFFFFF2210 :                     ; ------------------------------------------------------
(1)  293/FFFFFFFFFFFF2210 :                     ; OPTION 4
(1)  294/FFFFFFFFFFFF2210 :                     ; ------------------------------------------------------
(1)  295/FFFFFFFFFFFF2210 :                     
(1)  296/FFFFFFFFFFFF2210 :                     .option_4:
(1)  297/FFFFFFFFFFFF2210 : 4BF8 D20C           		lea	(RAM_GemaArg3).w,a5
(1)  298/FFFFFFFFFFFF2214 : 3E2E 0004           		move.w	on_press(a6),d7
(1)  299/FFFFFFFFFFFF2218 : 0807 0007           		btst	#bitJoyStart,d7
(1)  300/FFFFFFFFFFFF221C : 6780                		beq.s	.option1_args
(1)  301/FFFFFFFFFFFF221E : 301D                		move.w	(a5)+,d0
(1)  302/FFFFFFFFFFFF2220 : 321D                		move.w	(a5)+,d1
(1)  303/FFFFFFFFFFFF2222 : 6000 E02E           		bra	gemaSetTrackVol
(1)  304/FFFFFFFFFFFF2226 : 6000 FF0A           		bra	.show_me
(1)  305/FFFFFFFFFFFF222A :                     
(1)  306/FFFFFFFFFFFF222A :                     ; ------------------------------------------------------
(1)  307/FFFFFFFFFFFF222A :                     ; EXTERNAL BEATS FOR EACH TRACK
(1)  308/FFFFFFFFFFFF222A :                     ; ------------------------------------------------------
(1)  309/FFFFFFFFFFFF222A :                     
(1)  310/FFFFFFFFFFFF222A :                     .extnal_beats:
(1)  311/FFFFFFFFFFFF222A : 00E8                	dc.w 200+32
(1)  312/FFFFFFFFFFFF222C : 00DC                	dc.w 200+20
(1)  313/FFFFFFFFFFFF222E : 00E8                	dc.w 200+32
(1)  314/FFFFFFFFFFFF2230 : 00E8                	dc.w 200+32
(1)  315/FFFFFFFFFFFF2232 : 00E8                	dc.w 200+32
(1)  316/FFFFFFFFFFFF2234 : 00CC                	dc.w 200+4
(1)  317/FFFFFFFFFFFF2236 : 00E8                	dc.w 200+32
(1)  318/FFFFFFFFFFFF2238 : 00E8                	dc.w 200+32
(1)  319/FFFFFFFFFFFF223A : 00E8                	dc.w 200+32
(1)  320/FFFFFFFFFFFF223C : 00E8                	dc.w 200+32
(1)  321/FFFFFFFFFFFF223E : 00E8                	dc.w 200+32
(1)  322/FFFFFFFFFFFF2240 : 00E8                	dc.w 200+32
(1)  323/FFFFFFFFFFFF2242 : 00E8                	dc.w 200+32
(1)  324/FFFFFFFFFFFF2244 : 00E8                	dc.w 200+32
(1)  325/FFFFFFFFFFFF2246 : 00E8                	dc.w 200+32
(1)  326/FFFFFFFFFFFF2248 : 00E8                	dc.w 200+32
(1)  327/FFFFFFFFFFFF224A : 00E8                	dc.w 200+32
(1)  328/FFFFFFFFFFFF224C : 00E8                	dc.w 200+32
(1)  329/FFFFFFFFFFFF224E : 00E8                	dc.w 200+32
(1)  330/FFFFFFFFFFFF2250 : 00E8                	dc.w 200+32
(1)  331/FFFFFFFFFFFF2252 : 00E8                	dc.w 200+32
(1)  332/FFFFFFFFFFFF2254 : 00E8                	dc.w 200+32
(1)  333/FFFFFFFFFFFF2256 :                     
(1)  334/FFFFFFFFFFFF2256 :                     ; ====================================================================
(1)  335/FFFFFFFFFFFF2256 :                     ; ------------------------------------------------------
(1)  336/FFFFFFFFFFFF2256 :                     ; DATA assets locations for 68K and SH2
(1)  337/FFFFFFFFFFFF2256 :                     ; ------------------------------------------------------
(1)  338/FFFFFFFFFFFF2256 :                     
(1)  339/FFFFFFFFFFFF2256 :                     file_mddata_def:
(1)  340/FFFFFFFFFFFF2256 : 4441 5441 424E      		dc.b "DATABNKD.BIN",0		; CD Filename
         FFFFFFFFFFFF225C : 4B44 2E42 494E 00 
(1)  341/FFFFFFFFFFFF2263 :                     		align 2
(1)  342/FFFFFFFFFFFF2264 :                     
(1)  343/FFFFFFFFFFFF2264 :                     pointr_marsdata_def:
(1)  344/FFFFFFFFFFFF2264 : 008D 0ED0           		dc.l MARSDATA_DEFAULT		; 32X Cartridge point
(1)  345/FFFFFFFFFFFF2268 : 4D41 5253 445F      		dc.b "MARSD_00.BIN",0		; CD Filename
         FFFFFFFFFFFF226E : 3030 2E42 494E 00 
(1)  346/FFFFFFFFFFFF2275 :                     		align 2
(1)  347/FFFFFFFFFFFF2276 :                     
(1)  348/FFFFFFFFFFFF2276 :                     ; ====================================================================
(1)  349/FFFFFFFFFFFF2276 :                     ; ------------------------------------------------------
(1)  350/FFFFFFFFFFFF2276 :                     ; Objects
(1)  351/FFFFFFFFFFFF2276 :                     ; ------------------------------------------------------
(1)  352/FFFFFFFFFFFF2276 :                     
(1)  353/FFFFFFFFFFFF2276 :                     ; ; --------------------------------------------------
(1)  354/FFFFFFFFFFFF2276 :                     ; ; Mikami
(1)  355/FFFFFFFFFFFF2276 :                     ; ; --------------------------------------------------
(1)  356/FFFFFFFFFFFF2276 :                     ;
(1)  357/FFFFFFFFFFFF2276 :                     ; Object_Mikami:
(1)  358/FFFFFFFFFFFF2276 :                     ; 		moveq	#0,d0
(1)  359/FFFFFFFFFFFF2276 :                     ; 		move.b	obj_index(a6),d0
(1)  360/FFFFFFFFFFFF2276 :                     ; 		add.w	d0,d0
(1)  361/FFFFFFFFFFFF2276 :                     ; 		move.w	.list(pc,d0.w),d1
(1)  362/FFFFFFFFFFFF2276 :                     ; 		jmp	.list(pc,d1.w)
(1)  363/FFFFFFFFFFFF2276 :                     ; ; ----------------------------------------------
(1)  364/FFFFFFFFFFFF2276 :                     ; .list:		dc.w .init-.list
(1)  365/FFFFFFFFFFFF2276 :                     ; 		dc.w .main-.list
(1)  366/FFFFFFFFFFFF2276 :                     ; ; ----------------------------------------------
(1)  367/FFFFFFFFFFFF2276 :                     ; .init:
(1)  368/FFFFFFFFFFFF2276 :                     ; 		move.b	#1,obj_index(a6)
(1)  369/FFFFFFFFFFFF2276 :                     ; 		move.l	#objMap_Mikami,obj_map(a6)
(1)  370/FFFFFFFFFFFF2276 :                     ; 		move.l	#objDma_Mikami,obj_dma(a6)
(1)  371/FFFFFFFFFFFF2276 :                     ; 		move.w	#setVram_Mikami|$2000,obj_vram(a6)
(1)  372/FFFFFFFFFFFF2276 :                     ; 		bclr	#bitobj_Mars,obj_set(a6)	; Genesis object
(1)  373/FFFFFFFFFFFF2276 :                     ; 		move.w	#(320/2)+48,obj_x(a6)
(1)  374/FFFFFFFFFFFF2276 :                     ; 		move.w	#(224/2)+64,obj_y(a6)
(1)  375/FFFFFFFFFFFF2276 :                     ; 		clr.w	obj_frame(a6)
(1)  376/FFFFFFFFFFFF2276 :                     ; 		bsr	object_AnimReset
(1)  377/FFFFFFFFFFFF2276 :                     ; 		bset	#0,obj_status(a6)
(1)  378/FFFFFFFFFFFF2276 :                     ; 		bset	#bitobj_flipH,obj_set(a6)
(1)  379/FFFFFFFFFFFF2276 :                     ;
(1)  380/FFFFFFFFFFFF2276 :                     ; ; ----------------------------------------------
(1)  381/FFFFFFFFFFFF2276 :                     ; .main:
(1)  382/FFFFFFFFFFFF2276 :                     ; 		lea	(Controller_2),a3
(1)  383/FFFFFFFFFFFF2276 :                     ; 		btst	#0,obj_status(a6)
(1)  384/FFFFFFFFFFFF2276 :                     ; 		beq.s	.no_fallspd
(1)  385/FFFFFFFFFFFF2276 :                     ; 		add.w	#$40,obj_y_spd(a6)
(1)  386/FFFFFFFFFFFF2276 :                     ; .no_fallspd:
(1)  387/FFFFFFFFFFFF2276 :                     ;
(1)  388/FFFFFFFFFFFF2276 :                     ; ; .fake_col_c:
(1)  389/FFFFFFFFFFFF2276 :                     ; 		move.w	on_press(a3),d7
(1)  390/FFFFFFFFFFFF2276 :                     ; 		btst	#bitJoyC,d7
(1)  391/FFFFFFFFFFFF2276 :                     ; 		beq.s	.fake_jump
(1)  392/FFFFFFFFFFFF2276 :                     ; 		btst	#0,obj_status(a6)
(1)  393/FFFFFFFFFFFF2276 :                     ; 		bne.s	.fake_jump
(1)  394/FFFFFFFFFFFF2276 :                     ; 		move.w	#-$500,obj_y_spd(a6)
(1)  395/FFFFFFFFFFFF2276 :                     ; 		move.b	#2,obj_anim_id(a6)
(1)  396/FFFFFFFFFFFF2276 :                     ; 		bset	#0,obj_status(a6)
(1)  397/FFFFFFFFFFFF2276 :                     ;
(1)  398/FFFFFFFFFFFF2276 :                     ; 		moveq	#$0F,d0
(1)  399/FFFFFFFFFFFF2276 :                     ; 		moveq	#1,d1
(1)  400/FFFFFFFFFFFF2276 :                     ; 		bsr	gemaPlayFromBlk
(1)  401/FFFFFFFFFFFF2276 :                     ;
(1)  402/FFFFFFFFFFFF2276 :                     ; .fake_jump:
(1)  403/FFFFFFFFFFFF2276 :                     ; 		move.w	on_press(a3),d7
(1)  404/FFFFFFFFFFFF2276 :                     ; 		btst	#bitJoyB,d7
(1)  405/FFFFFFFFFFFF2276 :                     ; 		beq.s	.no_slash
(1)  406/FFFFFFFFFFFF2276 :                     ; 		tst.w	obj_y_spd(a6)
(1)  407/FFFFFFFFFFFF2276 :                     ; 		bne.s	.no_slash
(1)  408/FFFFFFFFFFFF2276 :                     ; 		clr.w	obj_anim_indx(a6)
(1)  409/FFFFFFFFFFFF2276 :                     ; 		move.b	#4,obj_anim_id(a6)
(1)  410/FFFFFFFFFFFF2276 :                     ; 		move.w	#$10,obj_ram+2(a6)
(1)  411/FFFFFFFFFFFF2276 :                     ;
(1)  412/FFFFFFFFFFFF2276 :                     ; 		moveq	#$0F,d0
(1)  413/FFFFFFFFFFFF2276 :                     ; 		moveq	#0,d1
(1)  414/FFFFFFFFFFFF2276 :                     ; 		bsr	gemaPlayFromBlk
(1)  415/FFFFFFFFFFFF2276 :                     ;
(1)  416/FFFFFFFFFFFF2276 :                     ; .no_slash:
(1)  417/FFFFFFFFFFFF2276 :                     ; 		clr.w	obj_x_spd(a6)
(1)  418/FFFFFFFFFFFF2276 :                     ;
(1)  419/FFFFFFFFFFFF2276 :                     ; 		moveq	#0,d0
(1)  420/FFFFFFFFFFFF2276 :                     ; 		moveq	#0,d1
(1)  421/FFFFFFFFFFFF2276 :                     ; 		move.w	on_hold(a3),d7
(1)  422/FFFFFFFFFFFF2276 :                     ; 		move.w	d7,d6
(1)  423/FFFFFFFFFFFF2276 :                     ; 		andi.w	#JoyLeft+JoyRight,d6
(1)  424/FFFFFFFFFFFF2276 :                     ; 		beq.s	.move_mika
(1)  425/FFFFFFFFFFFF2276 :                     ; 		clr.w	obj_ram+2(a6)
(1)  426/FFFFFFFFFFFF2276 :                     ; 		move.w	#$180,d6
(1)  427/FFFFFFFFFFFF2276 :                     ; 		btst	#bitJoyRight,d7
(1)  428/FFFFFFFFFFFF2276 :                     ; 		beq.s	.no_l
(1)  429/FFFFFFFFFFFF2276 :                     ; 		move.w	d6,obj_x_spd(a6)
(1)  430/FFFFFFFFFFFF2276 :                     ; .no_l
(1)  431/FFFFFFFFFFFF2276 :                     ; 		neg.w	d6
(1)  432/FFFFFFFFFFFF2276 :                     ; 		btst	#bitJoyLeft,d7
(1)  433/FFFFFFFFFFFF2276 :                     ; 		beq.s	.move_mika
(1)  434/FFFFFFFFFFFF2276 :                     ; 		move.w	d6,obj_x_spd(a6)
(1)  435/FFFFFFFFFFFF2276 :                     ; .move_mika:
(1)  436/FFFFFFFFFFFF2276 :                     ;
(1)  437/FFFFFFFFFFFF2276 :                     ;
(1)  438/FFFFFFFFFFFF2276 :                     ; 		moveq	#0,d6
(1)  439/FFFFFFFFFFFF2276 :                     ; 		tst.w	obj_x_spd(a6)
(1)  440/FFFFFFFFFFFF2276 :                     ; 		beq.s	.r_spd
(1)  441/FFFFFFFFFFFF2276 :                     ; 		moveq	#1,d6
(1)  442/FFFFFFFFFFFF2276 :                     ; 		move.b	obj_set(a6),d7
(1)  443/FFFFFFFFFFFF2276 :                     ; 		bclr	#bitobj_flipH,d7
(1)  444/FFFFFFFFFFFF2276 :                     ; 		tst.w	obj_x_spd(a6)
(1)  445/FFFFFFFFFFFF2276 :                     ; 		bpl.s	.r_flip
(1)  446/FFFFFFFFFFFF2276 :                     ; 		bset	#bitobj_flipH,d7
(1)  447/FFFFFFFFFFFF2276 :                     ; .r_flip:
(1)  448/FFFFFFFFFFFF2276 :                     ; 		move.b	d7,obj_set(a6)
(1)  449/FFFFFFFFFFFF2276 :                     ; .r_spd:
(1)  450/FFFFFFFFFFFF2276 :                     ;
(1)  451/FFFFFFFFFFFF2276 :                     ; 		tst.w	obj_ram+2(a6)
(1)  452/FFFFFFFFFFFF2276 :                     ; 		beq.s	.free_anim
(1)  453/FFFFFFFFFFFF2276 :                     ; 		subi.w	#1,obj_ram+2(a6)
(1)  454/FFFFFFFFFFFF2276 :                     ; 		bne.s	.no_anim
(1)  455/FFFFFFFFFFFF2276 :                     ; .free_anim:
(1)  456/FFFFFFFFFFFF2276 :                     ; 		btst	#0,obj_status(a6)
(1)  457/FFFFFFFFFFFF2276 :                     ; 		bne.s	.no_anim
(1)  458/FFFFFFFFFFFF2276 :                     ; 		tst.w	obj_y_spd(a6)
(1)  459/FFFFFFFFFFFF2276 :                     ; 		bmi.s	.is_jumpin
(1)  460/FFFFFFFFFFFF2276 :                     ; 		move.b	d6,obj_anim_id(a6)
(1)  461/FFFFFFFFFFFF2276 :                     ; .is_jumpin:
(1)  462/FFFFFFFFFFFF2276 :                     ; 		tst.w	obj_y_spd(a6)
(1)  463/FFFFFFFFFFFF2276 :                     ; 		beq.s	.no_anim
(1)  464/FFFFFFFFFFFF2276 :                     ; 		move.b	#3,obj_anim_id(a6)
(1)  465/FFFFFFFFFFFF2276 :                     ; .no_anim:
(1)  466/FFFFFFFFFFFF2276 :                     ; 		bsr	object_Speed
(1)  467/FFFFFFFFFFFF2276 :                     ;
(1)  468/FFFFFFFFFFFF2276 :                     ; 		move.w	#(224-16)-32,d7
(1)  469/FFFFFFFFFFFF2276 :                     ; 		move.w	obj_y(a6),d0
(1)  470/FFFFFFFFFFFF2276 :                     ; 		cmp.w	d7,d0
(1)  471/FFFFFFFFFFFF2276 :                     ; 		blt.s	.fake_col
(1)  472/FFFFFFFFFFFF2276 :                     ; 		clr.w	obj_y_spd(a6)
(1)  473/FFFFFFFFFFFF2276 :                     ; 		andi.w	#-$10,obj_y(a6)
(1)  474/FFFFFFFFFFFF2276 :                     ; 		bclr	#0,obj_status(a6)
(1)  475/FFFFFFFFFFFF2276 :                     ; .fake_col:
(1)  476/FFFFFFFFFFFF2276 :                     ;
(1)  477/FFFFFFFFFFFF2276 :                     ; ; 		move.w	(Controller_2+on_press),d7
(1)  478/FFFFFFFFFFFF2276 :                     ; ; 		btst	#bitClickM,d7
(1)  479/FFFFFFFFFFFF2276 :                     ; ; 		beq.s	.no_reset
(1)  480/FFFFFFFFFFFF2276 :                     ; ; 		move.w	#320/2,obj_x(a6)
(1)  481/FFFFFFFFFFFF2276 :                     ; ; 		move.w	#224/2,obj_y(a6)
(1)  482/FFFFFFFFFFFF2276 :                     ; ; .no_reset:
(1)  483/FFFFFFFFFFFF2276 :                     ; 		lea	.anim_data(pc),a0
(1)  484/FFFFFFFFFFFF2276 :                     ; 		bsr	object_Animate
(1)  485/FFFFFFFFFFFF2276 :                     ; 		bra	object_Display
(1)  486/FFFFFFFFFFFF2276 :                     ;
(1)  487/FFFFFFFFFFFF2276 :                     ; ; ----------------------------------------------
(1)  488/FFFFFFFFFFFF2276 :                     ;
(1)  489/FFFFFFFFFFFF2276 :                     ; .anim_data:
(1)  490/FFFFFFFFFFFF2276 :                     ; 		dc.w .anim_stand-.anim_data
(1)  491/FFFFFFFFFFFF2276 :                     ; 		dc.w .anim_move-.anim_data
(1)  492/FFFFFFFFFFFF2276 :                     ; 		dc.w .anim_jump-.anim_data
(1)  493/FFFFFFFFFFFF2276 :                     ; 		dc.w .anim_fall-.anim_data
(1)  494/FFFFFFFFFFFF2276 :                     ; 		dc.w .anim_slash-.anim_data
(1)  495/FFFFFFFFFFFF2276 :                     ; .anim_stand:
(1)  496/FFFFFFFFFFFF2276 :                     ; 		dc.w 6
(1)  497/FFFFFFFFFFFF2276 :                     ; 		dc.w 0,-1
(1)  498/FFFFFFFFFFFF2276 :                     ; 		align 2
(1)  499/FFFFFFFFFFFF2276 :                     ; .anim_move:
(1)  500/FFFFFFFFFFFF2276 :                     ; 		dc.w 5
(1)  501/FFFFFFFFFFFF2276 :                     ; 		dc.w 2,3,4,5,6,7,8,-3,1
(1)  502/FFFFFFFFFFFF2276 :                     ; 		align 2
(1)  503/FFFFFFFFFFFF2276 :                     ; .anim_jump:
(1)  504/FFFFFFFFFFFF2276 :                     ; 		dc.w 5
(1)  505/FFFFFFFFFFFF2276 :                     ; 		dc.w 10,11,12,-3,2
(1)  506/FFFFFFFFFFFF2276 :                     ; 		align 2
(1)  507/FFFFFFFFFFFF2276 :                     ; .anim_fall:
(1)  508/FFFFFFFFFFFF2276 :                     ; 		dc.w 5
(1)  509/FFFFFFFFFFFF2276 :                     ; 		dc.w 11,12,-3,1
(1)  510/FFFFFFFFFFFF2276 :                     ; 		align 2
(1)  511/FFFFFFFFFFFF2276 :                     ; .anim_slash:
(1)  512/FFFFFFFFFFFF2276 :                     ; 		dc.w 1
(1)  513/FFFFFFFFFFFF2276 :                     ; 		dc.w 14,15,16,17,-2
(1)  514/FFFFFFFFFFFF2276 :                     ; 		align 2
(1)  515/FFFFFFFFFFFF2276 :                     ;
(1)  516/FFFFFFFFFFFF2276 :                     ; --------------------------------------------------
(1)  517/FFFFFFFFFFFF2276 :                     ; Sisi
(1)  518/FFFFFFFFFFFF2276 :                     ; --------------------------------------------------
(1)  519/FFFFFFFFFFFF2276 :                     
(1)  520/FFFFFFFFFFFF2276 :                     Object_Sisi:
(1)  521/FFFFFFFFFFFF2276 : 7000                		moveq	#0,d0
(1)  522/FFFFFFFFFFFF2278 : 102E 0021           		move.b	obj_index(a6),d0
(1)  523/FFFFFFFFFFFF227C : D040                		add.w	d0,d0
(1)  524/FFFFFFFFFFFF227E : 323B 0006           		move.w	.list(pc,d0.w),d1
(1)  525/FFFFFFFFFFFF2282 : 4EFB 1002           		jmp	.list(pc,d1.w)
(1)  526/FFFFFFFFFFFF2286 :                     ; ----------------------------------------------
(1)  527/FFFFFFFFFFFF2286 : 0004                .list:		dc.w .init-.list
(1)  528/FFFFFFFFFFFF2288 : 002E                		dc.w .main-.list
(1)  529/FFFFFFFFFFFF228A :                     ; ----------------------------------------------
(1)  530/FFFFFFFFFFFF228A :                     .init:
(1)  531/FFFFFFFFFFFF228A : 1D7C 0001 0021      		move.b	#1,obj_index(a6)
(1)  532/FFFFFFFFFFFF2290 : 2D7C 0092 ED34      		move.l	#objMap_Sisi,obj_map(a6)
         FFFFFFFFFFFF2296 : 000C             
(1)  533/FFFFFFFFFFFF2298 : 2D7C 0000 0000      		move.l	#0,obj_dma(a6)
         FFFFFFFFFFFF229E : 0010             
(1)  534/FFFFFFFFFFFF22A0 : 3D7C 2480 0014      		move.w	#setVram_Sisi|$2000,obj_vram(a6)
(1)  535/FFFFFFFFFFFF22A6 : 08AE 0007 0022      		bclr	#bitobj_Mars,obj_set(a6)	; Genesis object
(1)  536/FFFFFFFFFFFF22AC :                     ; 		move.w	#320/2,obj_x(a6)
(1)  537/FFFFFFFFFFFF22AC :                     ; 		move.w	#224/2,obj_y(a6)
(1)  538/FFFFFFFFFFFF22AC : 426E 001E           		clr.w	obj_frame(a6)
(1)  539/FFFFFFFFFFFF22B0 : 6100 ED14           		bsr	object_AnimReset
(1)  540/FFFFFFFFFFFF22B4 :                     
(1)  541/FFFFFFFFFFFF22B4 :                     ; ----------------------------------------------
(1)  542/FFFFFFFFFFFF22B4 :                     .main:
(1)  543/FFFFFFFFFFFF22B4 :                     ; 		move.w	obj_ram(a6),d0
(1)  544/FFFFFFFFFFFF22B4 :                     ; 		move.w	obj_ram+2(a6),d1
(1)  545/FFFFFFFFFFFF22B4 :                     
(1)  546/FFFFFFFFFFFF22B4 :                     
(1)  547/FFFFFFFFFFFF22B4 : 7000                		moveq	#0,d0
(1)  548/FFFFFFFFFFFF22B6 :                     
(1)  549/FFFFFFFFFFFF22B6 : 3238 D204           		move.w	(RAM_CurrPick).w,d1
(1)  550/FFFFFFFFFFFF22BA : E749                		lsl.w	#3,d1
(1)  551/FFFFFFFFFFFF22BC :                     
(1)  552/FFFFFFFFFFFF22BC : 0640 0018           		addi.w	#$18,d0
(1)  553/FFFFFFFFFFFF22C0 : 0641 0020           		addi.w	#$20,d1
(1)  554/FFFFFFFFFFFF22C4 : 3D40 0004           		move.w	d0,obj_x(a6)
(1)  555/FFFFFFFFFFFF22C8 : 3D41 0008           		move.w	d1,obj_y(a6)
(1)  556/FFFFFFFFFFFF22CC :                     
(1)  557/FFFFFFFFFFFF22CC :                     ; 		lea	(RAM_Objects),a0
(1)  558/FFFFFFFFFFFF22CC :                     ; 		cmp.l	#Object_Mikami,obj_code(a0)
(1)  559/FFFFFFFFFFFF22CC :                     ; 		bne.s	.dont_link
(1)  560/FFFFFFFFFFFF22CC :                     ; 		move.w	obj_ram+2(a6),d7
(1)  561/FFFFFFFFFFFF22CC :                     ; 		cmp.w	#24<<1,d7
(1)  562/FFFFFFFFFFFF22CC :                     ; 		bge.s	.dont_incr
(1)  563/FFFFFFFFFFFF22CC :                     ; 		add.w	#2,d7
(1)  564/FFFFFFFFFFFF22CC :                     ; .dont_incr:
(1)  565/FFFFFFFFFFFF22CC :                     ; 		move.w	d7,obj_ram+2(a6)
(1)  566/FFFFFFFFFFFF22CC :                     ;
(1)  567/FFFFFFFFFFFF22CC :                     ; 		move.w	obj_x(a0),d7
(1)  568/FFFFFFFFFFFF22CC :                     ; 		move.w	obj_y(a0),d6
(1)  569/FFFFFFFFFFFF22CC :                     ; 		move.w	#24,d5
(1)  570/FFFFFFFFFFFF22CC :                     ; 		sub.w	d5,d6
(1)  571/FFFFFFFFFFFF22CC :                     ; 		move.w	obj_ram(a6),d0
(1)  572/FFFFFFFFFFFF22CC :                     ; 		moveq	#4,d1
(1)  573/FFFFFFFFFFFF22CC :                     ; 		bsr	System_SineWave
(1)  574/FFFFFFFFFFFF22CC :                     ; 		asr.w	#8,d2
(1)  575/FFFFFFFFFFFF22CC :                     ; 		add.w	d2,d6
(1)  576/FFFFFFFFFFFF22CC :                     ; 		moveq	#5,d1
(1)  577/FFFFFFFFFFFF22CC :                     ; 		bsr	System_SineWave_Cos
(1)  578/FFFFFFFFFFFF22CC :                     ; 		asr.w	#8,d2
(1)  579/FFFFFFFFFFFF22CC :                     ; 		add.w	d2,d7
(1)  580/FFFFFFFFFFFF22CC :                     ;
(1)  581/FFFFFFFFFFFF22CC :                     ; 		move.b	obj_set(a6),d0
(1)  582/FFFFFFFFFFFF22CC :                     ; 		move.b	obj_set(a0),d1
(1)  583/FFFFFFFFFFFF22CC :                     ; 		eor.w	d1,d0
(1)  584/FFFFFFFFFFFF22CC :                     ; 		andi.w	#1,d0
(1)  585/FFFFFFFFFFFF22CC :                     ; 		beq.s	.same_h
(1)  586/FFFFFFFFFFFF22CC :                     ; 		clr.w	obj_ram+2(a6)
(1)  587/FFFFFFFFFFFF22CC :                     ; .same_h:
(1)  588/FFFFFFFFFFFF22CC :                     ; 		move.w	obj_ram+2(a6),d4
(1)  589/FFFFFFFFFFFF22CC :                     ; 		bclr	#bitobj_flipH,obj_set(a6)
(1)  590/FFFFFFFFFFFF22CC :                     ; 		btst	#bitobj_flipH,obj_set(a0)
(1)  591/FFFFFFFFFFFF22CC :                     ; 		beq.s	.dont_flipx
(1)  592/FFFFFFFFFFFF22CC :                     ; 		neg.w	d4
(1)  593/FFFFFFFFFFFF22CC :                     ; 		bset	#bitobj_flipH,obj_set(a6)
(1)  594/FFFFFFFFFFFF22CC :                     ; .dont_flipx:
(1)  595/FFFFFFFFFFFF22CC :                     ; 		lsr.w	#1,d4
(1)  596/FFFFFFFFFFFF22CC :                     ; 		add.w	d4,d7
(1)  597/FFFFFFFFFFFF22CC :                     ; 		move.w	d6,obj_y(a6)
(1)  598/FFFFFFFFFFFF22CC :                     ; 		move.w	d7,obj_x(a6)
(1)  599/FFFFFFFFFFFF22CC :                     ; 		add.w	#4,obj_ram(a6)
(1)  600/FFFFFFFFFFFF22CC :                     
(1)  601/FFFFFFFFFFFF22CC :                     .dont_link:
(1)  602/FFFFFFFFFFFF22CC : 41FA 000A           		lea	.anim_data(pc),a0
(1)  603/FFFFFFFFFFFF22D0 : 6100 EC68           		bsr	object_Animate
(1)  604/FFFFFFFFFFFF22D4 : 6000 EBC8           		bra	object_Display
(1)  605/FFFFFFFFFFFF22D8 :                     
(1)  606/FFFFFFFFFFFF22D8 :                     ; ----------------------------------------------
(1)  607/FFFFFFFFFFFF22D8 :                     
(1)  608/FFFFFFFFFFFF22D8 :                     .anim_data:
(1)  609/FFFFFFFFFFFF22D8 : 0008                		dc.w .anim_00-.anim_data
(1)  610/FFFFFFFFFFFF22DA : 0008                		dc.w .anim_00-.anim_data
(1)  611/FFFFFFFFFFFF22DC : 0008                		dc.w .anim_00-.anim_data
(1)  612/FFFFFFFFFFFF22DE : 0008                		dc.w .anim_00-.anim_data
(1)  613/FFFFFFFFFFFF22E0 :                     .anim_00:
(1)  614/FFFFFFFFFFFF22E0 : 0008                		dc.w 8
(1)  615/FFFFFFFFFFFF22E2 : 0000 0001 0002      		dc.w 0,1,2,1,-1
         FFFFFFFFFFFF22E8 : 0001 FFFF          
(1)  616/FFFFFFFFFFFF22EC :                     		align 2
(1)  617/FFFFFFFFFFFF22EE :                     ;
(1)  618/FFFFFFFFFFFF22EE :                     ; ; --------------------------------------------------
(1)  619/FFFFFFFFFFFF22EE :                     ; ; Ball
(1)  620/FFFFFFFFFFFF22EE :                     ; ; --------------------------------------------------
(1)  621/FFFFFFFFFFFF22EE :                     ;
(1)  622/FFFFFFFFFFFF22EE :                     ; Object_ball:
(1)  623/FFFFFFFFFFFF22EE :                     ; 		moveq	#0,d0
(1)  624/FFFFFFFFFFFF22EE :                     ; 		move.b	obj_index(a6),d0
(1)  625/FFFFFFFFFFFF22EE :                     ; 		add.w	d0,d0
(1)  626/FFFFFFFFFFFF22EE :                     ; 		move.w	.list(pc,d0.w),d1
(1)  627/FFFFFFFFFFFF22EE :                     ; 		jmp	.list(pc,d1.w)
(1)  628/FFFFFFFFFFFF22EE :                     ; ; ----------------------------------------------
(1)  629/FFFFFFFFFFFF22EE :                     ; .list:		dc.w .init-.list
(1)  630/FFFFFFFFFFFF22EE :                     ; 		dc.w .main-.list
(1)  631/FFFFFFFFFFFF22EE :                     ; ; ----------------------------------------------
(1)  632/FFFFFFFFFFFF22EE :                     ; .init:
(1)  633/FFFFFFFFFFFF22EE :                     ; 		move.b	#1,obj_index(a6)
(1)  634/FFFFFFFFFFFF22EE :                     ; 		move.l	#objMap_Sisi,obj_map(a6)
(1)  635/FFFFFFFFFFFF22EE :                     ; 		move.l	#0,obj_dma(a6)
(1)  636/FFFFFFFFFFFF22EE :                     ; 		move.w	#setVram_Sisi|$0000,obj_vram(a6)
(1)  637/FFFFFFFFFFFF22EE :                     ; 		bclr	#bitobj_Mars,obj_set(a6)	; Genesis object
(1)  638/FFFFFFFFFFFF22EE :                     ; 		move.w	#320/2,obj_x(a6)
(1)  639/FFFFFFFFFFFF22EE :                     ; 		move.w	#224/2,obj_y(a6)
(1)  640/FFFFFFFFFFFF22EE :                     ; 		clr.w	obj_frame(a6)
(1)  641/FFFFFFFFFFFF22EE :                     ; 		bsr	object_AnimReset
(1)  642/FFFFFFFFFFFF22EE :                     ;
(1)  643/FFFFFFFFFFFF22EE :                     ; 		move.w	#$180,obj_x_spd(a6)
(1)  644/FFFFFFFFFFFF22EE :                     ; 		move.w	#$180,obj_y_spd(a6)
(1)  645/FFFFFFFFFFFF22EE :                     ;
(1)  646/FFFFFFFFFFFF22EE :                     ; ; ----------------------------------------------
(1)  647/FFFFFFFFFFFF22EE :                     ; .main:
(1)  648/FFFFFFFFFFFF22EE :                     ; 		move.w	obj_x(a6),d0
(1)  649/FFFFFFFFFFFF22EE :                     ; 		move.w	obj_y(a6),d1
(1)  650/FFFFFFFFFFFF22EE :                     ; 		sub.w	#16,d0
(1)  651/FFFFFFFFFFFF22EE :                     ; 		sub.w	#16,d1
(1)  652/FFFFFFFFFFFF22EE :                     ; 		move.w	#320-32,d2
(1)  653/FFFFFFFFFFFF22EE :                     ; 		move.w	#(224-16)-32,d3
(1)  654/FFFFFFFFFFFF22EE :                     ;
(1)  655/FFFFFFFFFFFF22EE :                     ; 		tst.w	d1
(1)  656/FFFFFFFFFFFF22EE :                     ; 		bpl.s	.on_scrn_yu
(1)  657/FFFFFFFFFFFF22EE :                     ; 		neg.w	obj_y_spd(a6)
(1)  658/FFFFFFFFFFFF22EE :                     ; 		bsr	.playit
(1)  659/FFFFFFFFFFFF22EE :                     ; .on_scrn_yu:
(1)  660/FFFFFFFFFFFF22EE :                     ; 		cmp.w	d3,d1
(1)  661/FFFFFFFFFFFF22EE :                     ; 		blt.s	.on_scrn_yd
(1)  662/FFFFFFFFFFFF22EE :                     ; 		neg.w	obj_y_spd(a6)
(1)  663/FFFFFFFFFFFF22EE :                     ; 		bsr	.playit
(1)  664/FFFFFFFFFFFF22EE :                     ; .on_scrn_yd:
(1)  665/FFFFFFFFFFFF22EE :                     ;
(1)  666/FFFFFFFFFFFF22EE :                     ; 		tst.w	d0
(1)  667/FFFFFFFFFFFF22EE :                     ; 		bpl.s	.on_scrn_xu
(1)  668/FFFFFFFFFFFF22EE :                     ; 		neg.w	obj_x_spd(a6)
(1)  669/FFFFFFFFFFFF22EE :                     ; 		bsr.s	.playit
(1)  670/FFFFFFFFFFFF22EE :                     ; .on_scrn_xu:
(1)  671/FFFFFFFFFFFF22EE :                     ; 		cmp.w	d2,d0
(1)  672/FFFFFFFFFFFF22EE :                     ; 		blt.s	.on_scrn_xd
(1)  673/FFFFFFFFFFFF22EE :                     ; 		neg.w	obj_x_spd(a6)
(1)  674/FFFFFFFFFFFF22EE :                     ; 		bsr.s	.playit
(1)  675/FFFFFFFFFFFF22EE :                     ; .on_scrn_xd:
(1)  676/FFFFFFFFFFFF22EE :                     ;
(1)  677/FFFFFFFFFFFF22EE :                     ; 		bsr	object_Speed
(1)  678/FFFFFFFFFFFF22EE :                     ;
(1)  679/FFFFFFFFFFFF22EE :                     ; 		lea	.anim_data(pc),a0
(1)  680/FFFFFFFFFFFF22EE :                     ; 		bsr	object_Animate
(1)  681/FFFFFFFFFFFF22EE :                     ; 		bra	object_Display
(1)  682/FFFFFFFFFFFF22EE :                     ; .playit:
(1)  683/FFFFFFFFFFFF22EE :                     ; 		moveq	#$0F,d0
(1)  684/FFFFFFFFFFFF22EE :                     ; 		moveq	#2,d1
(1)  685/FFFFFFFFFFFF22EE :                     ; 		bra	gemaPlayFromBlk
(1)  686/FFFFFFFFFFFF22EE :                     ;
(1)  687/FFFFFFFFFFFF22EE :                     ; ; ----------------------------------------------
(1)  688/FFFFFFFFFFFF22EE :                     ;
(1)  689/FFFFFFFFFFFF22EE :                     ; .anim_data:
(1)  690/FFFFFFFFFFFF22EE :                     ; 		dc.w .anim_00-.anim_data
(1)  691/FFFFFFFFFFFF22EE :                     ; 		dc.w .anim_00-.anim_data
(1)  692/FFFFFFFFFFFF22EE :                     ; 		dc.w .anim_00-.anim_data
(1)  693/FFFFFFFFFFFF22EE :                     ; 		dc.w .anim_00-.anim_data
(1)  694/FFFFFFFFFFFF22EE :                     ; .anim_00:
(1)  695/FFFFFFFFFFFF22EE :                     ; 		dc.w 8
(1)  696/FFFFFFFFFFFF22EE :                     ; 		dc.w 0,1,2,1,-1
(1)  697/FFFFFFFFFFFF22EE :                     ; 		align 2
(1)  698/FFFFFFFFFFFF22EE :                     
(1)  699/FFFFFFFFFFFF22EE :                     ; ====================================================================
(1)  700/FFFFFFFFFFFF22EE :                     ; ------------------------------------------------------
(1)  701/FFFFFFFFFFFF22EE :                     ; Subroutines
(1)  702/FFFFFFFFFFFF22EE :                     ; ------------------------------------------------------
(1)  703/FFFFFFFFFFFF22EE :                     
(1)  704/FFFFFFFFFFFF22EE :                     ; ====================================================================
(1)  705/FFFFFFFFFFFF22EE :                     ; ------------------------------------------------------
(1)  706/FFFFFFFFFFFF22EE :                     ; Custom VBlank
(1)  707/FFFFFFFFFFFF22EE :                     ; ------------------------------------------------------
(1)  708/FFFFFFFFFFFF22EE :                     
(1)  709/FFFFFFFFFFFF22EE :                     ; ------------------------------------------------------
(1)  710/FFFFFFFFFFFF22EE :                     ; Custom HBlank
(1)  711/FFFFFFFFFFFF22EE :                     ; ------------------------------------------------------
(1)  712/FFFFFFFFFFFF22EE :                     
(1)  713/FFFFFFFFFFFF22EE :                     ; ====================================================================
(1)  714/FFFFFFFFFFFF22EE :                     ; ------------------------------------------------------
(1)  715/FFFFFFFFFFFF22EE :                     ; Small DATA section
(1)  716/FFFFFFFFFFFF22EE :                     ; ------------------------------------------------------
(1)  717/FFFFFFFFFFFF22EE :                     
(1)  718/FFFFFFFFFFFF22EE :                     PAL_TEST:
(1)  719/FFFFFFFFFFFF22EE :                     		binclude "game/screen_0/data/maps/md/test/md_pal.bin"
(1)  720/FFFFFFFFFFFF230A :                     		align 2
(1)  721/FFFFFFFFFFFF230C :                     
(1)  722/FFFFFFFFFFFF230C :                     ; str_ShowPsg:	dc.b "\\w \\w \\w \\w",0
(1)  723/FFFFFFFFFFFF230C :                     ; 		dc.l RAM_ChnlLinks,RAM_ChnlLinks+2,RAM_ChnlLinks+4,RAM_ChnlLinks+6
(1)  724/FFFFFFFFFFFF230C :                     ; 		align 2
(1)  725/FFFFFFFFFFFF230C :                     ; str_ShowFm:	dc.b "\\w \\w \\w \\w \\w \\w",0
(1)  726/FFFFFFFFFFFF230C :                     ; 		dc.l RAM_ChnlLinks+8,RAM_ChnlLinks+10,RAM_ChnlLinks+12
(1)  727/FFFFFFFFFFFF230C :                     ; 		dc.l RAM_ChnlLinks+14,RAM_ChnlLinks+16,RAM_ChnlLinks+18
(1)  728/FFFFFFFFFFFF230C :                     ; 		align 2
(1)  729/FFFFFFFFFFFF230C :                     ; str_ShowPcm:	dc.b "\\w \\w \\w \\w",$0A
(1)  730/FFFFFFFFFFFF230C :                     ; 		dc.b "\\w \\w \\w \\w",0
(1)  731/FFFFFFFFFFFF230C :                     ; 		dc.l RAM_ChnlLinks+20,RAM_ChnlLinks+22,RAM_ChnlLinks+24,RAM_ChnlLinks+26
(1)  732/FFFFFFFFFFFF230C :                     ; 		dc.l RAM_ChnlLinks+28,RAM_ChnlLinks+30,RAM_ChnlLinks+32,RAM_ChnlLinks+34
(1)  733/FFFFFFFFFFFF230C :                     ; 		align 2
(1)  734/FFFFFFFFFFFF230C :                     ; str_ShowPwm:	dc.b "\\w \\w \\w \\w",$0A
(1)  735/FFFFFFFFFFFF230C :                     ; 		dc.b "\\w \\w \\w",0
(1)  736/FFFFFFFFFFFF230C :                     ; 		dc.l RAM_ChnlLinks+36,RAM_ChnlLinks+38,RAM_ChnlLinks+40,RAM_ChnlLinks+42
(1)  737/FFFFFFFFFFFF230C :                     ; 		dc.l RAM_ChnlLinks+44,RAM_ChnlLinks+46,RAM_ChnlLinks+48,RAM_ChnlLinks+50
(1)  738/FFFFFFFFFFFF230C :                     ; 		align 2
(1)  739/FFFFFFFFFFFF230C :                     
(1)  740/FFFFFFFFFFFF230C :                     str_TesterInit:
(1)  741/FFFFFFFFFFFF230C : 4745 4D41 2F4E      		dc.b "GEMA/Nikona player",$0A
         FFFFFFFFFFFF2312 : 696B 6F6E 6120 
         FFFFFFFFFFFF2318 : 706C 6179 6572 0A 
(1)  742/FFFFFFFFFFFF231F : 2020 2020 2020      		dc.b "                \{DATE} \{TIME}",$0A
         FFFFFFFFFFFF2325 : 2020 2020 2020 
         FFFFFFFFFFFF232B : 2020 2020 3032 
         FFFFFFFFFFFF2331 : 2F32 332F 3230 
         FFFFFFFFFFFF2337 : 3234 2031 303A 
         FFFFFFFFFFFF233D : 3435 3A31 3020 
         FFFFFFFFFFFF2343 : 504D 0A          
(1)  743/FFFFFFFFFFFF2346 : 0A                  		dc.b $0A
(1)  744/FFFFFFFFFFFF2347 : 2020 2020 6765      		dc.b "    gemaTest",$0A
         FFFFFFFFFFFF234D : 6D61 5465 7374 0A 
(1)  745/FFFFFFFFFFFF2354 : 2020 2020 6765      		dc.b "    gemaPlayTrack",$0A
         FFFFFFFFFFFF235A : 6D61 506C 6179 
         FFFFFFFFFFFF2360 : 5472 6163 6B0A    
(1)  746/FFFFFFFFFFFF2366 : 2020 2020 6765      		dc.b "    gemaStopTrack",$0A
         FFFFFFFFFFFF236C : 6D61 5374 6F70 
         FFFFFFFFFFFF2372 : 5472 6163 6B0A    
(1)  747/FFFFFFFFFFFF2378 : 2020 2020 6765      		dc.b "    gemaFadeTrack",$0A
         FFFFFFFFFFFF237E : 6D61 4661 6465 
         FFFFFFFFFFFF2384 : 5472 6163 6B0A    
(1)  748/FFFFFFFFFFFF238A : 2020 2020 6765      		dc.b "    gemaSetTrackVol",0
         FFFFFFFFFFFF2390 : 6D61 5365 7454 
         FFFFFFFFFFFF2396 : 7261 636B 566F 
         FFFFFFFFFFFF239C : 6C00             
(1)  749/FFFFFFFFFFFF239E : 00                  		dc.b 0
(1)  750/FFFFFFFFFFFF239F :                     		align 2
(1)  751/FFFFFFFFFFFF23A0 : 5C77 205C 7720      str_ShowMe:	dc.b "\\w \\w \\w",$A
         FFFFFFFFFFFF23A6 : 5C77 0A          
(1)  752/FFFFFFFFFFFF23A9 : 0A                  		dc.b $A
(1)  753/FFFFFFFFFFFF23AA : 5C77 205C 7720      		dc.b "\\w \\w \\w",0
         FFFFFFFFFFFF23B0 : 5C77 00          
(1)  754/FFFFFFFFFFFF23B3 : FFFF D206 FFFF      		dc.l RAM_GemaArg0,RAM_GemaArg1,RAM_GemaArg2
         FFFFFFFFFFFF23B9 : D208 FFFF D20A    
(1)  755/FFFFFFFFFFFF23BF : FFFF D20C FFFF      		dc.l RAM_GemaArg3,RAM_GemaArg4,RAM_GemaArg5
         FFFFFFFFFFFF23C5 : D20E FFFF D210    
(1)  756/FFFFFFFFFFFF23CB :                     		align 2
(1)  757/FFFFFFFFFFFF23CC :                     str_Info:
(1)  758/FFFFFFFFFFFF23CC : 5C6C 00             		dc.b "\\l",0
(1)  759/FFFFFFFFFFFF23CF : FFFF BDD4           		dc.l RAM_Framecount
(1)  760/FFFFFFFFFFFF23D3 :                     		align 2
(1)  761/FFFFFFFFFFFF23D4 :                     ; str_Notes:
(1)  762/FFFFFFFFFFFF23D4 :                     ;  dc.b "---",0,"C#0",0,"D-0",0,"D#0",0,"E-0",0,"F-0",0,"F#0",0,"G-0",0,"G#0",0,"A-0",0,"A#0",0,"B-0",0
(1)  763/FFFFFFFFFFFF23D4 :                     ;  dc.b "C-1",0,"C#1",0,"D-1",0,"D#1",0,"E-1",0,"F-1",0,"F#1",0,"G-1",0,"G#1",0,"A-1",0,"A#1",0,"B-1",0
(1)  764/FFFFFFFFFFFF23D4 :                     ;  dc.b "C-2",0,"C#2",0,"D-2",0,"D#2",0,"E-2",0,"F-2",0,"F#2",0,"G-2",0,"G#2",0,"A-2",0,"A#2",0,"B-2",0
(1)  765/FFFFFFFFFFFF23D4 :                     ;  dc.b "C-3",0,"C#3",0,"D-3",0,"D#3",0,"E-3",0,"F-3",0,"F#3",0,"G-3",0,"G#3",0,"A-3",0,"A#3",0,"B-3",0
(1)  766/FFFFFFFFFFFF23D4 :                     ;  dc.b "C-4",0,"C#4",0,"D-4",0,"D#4",0,"E-4",0,"F-4",0,"F#4",0,"G-4",0,"G#4",0,"A-4",0,"A#4",0,"B-4",0
(1)  767/FFFFFFFFFFFF23D4 :                     ;  dc.b "C-5",0,"C#5",0,"D-5",0,"D#5",0,"E-5",0,"F-5",0,"F#5",0,"G-5",0,"G#5",0,"A-5",0,"A#5",0,"B-5",0
(1)  768/FFFFFFFFFFFF23D4 :                     ;  dc.b "C-6",0,"C#6",0,"D-6",0,"D#6",0,"E-6",0,"F-6",0,"F#6",0,"G-6",0,"G#6",0,"A-6",0,"A#6",0,"B-6",0
(1)  769/FFFFFFFFFFFF23D4 :                     ;  dc.b "C-7",0,"C#7",0,"D-7",0,"D#7",0,"E-7",0,"F-7",0,"F#7",0,"G-7",0,"G#7",0,"A-7",0,"A#7",0,"B-7",0
(1)  770/FFFFFFFFFFFF23D4 :                     ;  dc.b "C-8",0,"C#8",0,"D-8",0,"D#8",0,"E-8",0,"F-8",0,"F#8",0,"G-8",0,"G#8",0,"A-8",0,"A#8",0,"B-8",0
(1)  771/FFFFFFFFFFFF23D4 :                     ;  dc.b "C-9",0,"C#9",0,"D-9",0,"D#9",0,"E-9",0,"F-9",0,"F#9",0,"G-9",0,"G#9",0,"A-9",0,"A#9",0,"B-9",0
(1)  772/FFFFFFFFFFFF23D4 :                     ;  align 2
(1)  773/FFFFFFFFFFFF23D4 :                     ; str_Notes_FM:
(1)  774/FFFFFFFFFFFF23D4 :                     ;  dc.b "---",0
(1)  775/FFFFFFFFFFFF23D4 :                     ;  dc.b "C-",0,0,"C#",0,0,"D-",0,0,"D#",0,0,"E-",0,0,"F-",0,0
(1)  776/FFFFFFFFFFFF23D4 :                     ;  dc.b "F#",0,0,"G-",0,0,"G#",0,0,"A-",0,0,"A#",0,0,"B-",0,0
(1)  777/FFFFFFFFFFFF23D4 :                     ;  align 2
(1)  778/FFFFFFFFFFFF23D4 :                     ; str_Octv_FM:
(1)  779/FFFFFFFFFFFF23D4 :                     ;  dc.b "0",0,"1",0,"2",0,"3",0,"4",0,"5",0,"6",0,"7",0
(1)  780/FFFFFFFFFFFF23D4 :                     ;  align 2
(1)  781/FFFFFFFFFFFF23D4 :                     
     362/FFFFFFFFFFFF23D4 :                     mcscrn_e:
     362/FFFFFFFFFFFFD5D8 :                                     dephase ; dephase RAM section
     362/   2E004 :                                     dephase ; dephase $880000+ section
     362/   2E004 :  (MACRO-2)                           report "THIS SCREEN's code",mcscrn_e-RAM_UserCode,MAX_UserCode
     363/   2E004 :                     ; 	screen_code Md_Screen01,Md_Screen01_e,"game/screen_1/code.asm"
     364/   2E004 :                     
     365/   2E004 :                     ; ====================================================================
     366/   2E004 :                     ; DATA SECTION
     367/   2E004 :                     ; ====================================================================
     368/   2E004 :                     
     369/   2E004 :                     ; ====================================================================
     370/   2E004 :                     ; ----------------------------------------------------------------
     371/   2E004 :                     ; 68K DATA BANKs
     372/   2E004 :                     ;
     373/   2E004 :                     ; SEGA CD / CD32X:
     374/   2E004 :                     ; Stored in WORD-RAM pieces
     375/   2E004 :                     ; limited to 256KB 2M or 128KB 1M/1M
     376/   2E004 :                     ; ** WORD-RAM CANNOT BE USED IF USING ASIC STAMPS **
     377/   2E004 :                     ;
     378/   2E004 :                     ; SEGA 32X Cartridge:
     379/   2E004 :                     ; Limited to 1MB bankswitchable.
     380/   2E004 :                     ; ONLY 4 banks can be used, Bank 0 already uses the
     381/   2E004 :                     ; first 512KB for the code.
     382/   2E004 :                     ;
     383/   2E004 :                     ; For multi-porting keep the data size limited to 256KB.
     384/   2E004 :                     ; ----------------------------------------------------------------
     385/   2E004 :                     
     386/   2E004 :                     ; --------------------------------------------------------
     387/   2E004 :                     ; DEFAULT BANK
     388/   2E004 :                     ;
     389/   2E004 :                     ; CD/CD32X:
     390/   2E004 :                     ; $200000 256KB (WORD-RAM)
     391/   2E004 :                     ;
     392/   2E004 :                     ; 32X:
     393/   2E004 :                     ; $900000 1MB (Bankswichable area)
     394/   2E004 :                     ;
     395/   2E004 :                     ; Usage:
     396/   2E004 :                     ; data_bkset LABEL_START,OPTION
     397/   2E004 :                     ; (your includes and bincludes)
     398/   2E004 :                     ; data_bkend LABEL_START,LABEL_END,used_size
     399/   2E004 :                     ;
     400/   2E004 :                     ; OPTION (32X Cartridge ONLY):
     401/   2E004 :                     ;  0, Normal 32X $900000 bank
     402/   2E004 :                     ; -1, First 32X $900000 bank
     403/   2E004 :                     ; * Ignored on other systems.
     404/   2E004 :                     ; --------------------------------------------------------
     405/   2E004 :                     
     406/   2E004 : (MACRO)              	data_bkset MCD_DBANK0,-1
     406/   2E004 :                                     align 4
     406/   2E004 :                     ; MCD_DBANK0:
     406/   2E004 : =$2E004              MCD_DBANK0 label *
     406/   2E004 :                     ;               dephase
     406/  92E004 :                                     phase $900000+* ; First 32X data bank
     407/  92E004 :                     mdbank0:
     408/  92E004 :                     		include "game/screen_0/data_bank.asm"
(1)    1/  92E004 :                     ; ====================================================================
(1)    2/  92E004 :                     ; ----------------------------------------------------------------
(1)    3/  92E004 :                     ; 68K SCREEN MODE DATA
(1)    4/  92E004 :                     ; for big stuff like maps, level, etc.
(1)    5/  92E004 :                     ;
(1)    6/  92E004 :                     ; For Genesis graphics use data_dma.asm
(1)    7/  92E004 :                     ; and for 32X graphics use data_mgfx.asm
(1)    8/  92E004 :                     ;
(1)    9/  92E004 :                     ; 32X 256-COLOR PALETTES GO HERE.
(1)   10/  92E004 :                     ;
(1)   11/  92E004 :                     ; Maximum size: $0FFFFF bytes per bank
(1)   12/  92E004 :                     ; ----------------------------------------------------------------
(1)   13/  92E004 :                     
(1)   14/  92E004 :                     ; ----------------------------------------------------------------
(1)   15/  92E004 :                     ; 32X Screen maps
(1)   16/  92E004 :                     ; ----------------------------------------------------------------
(1)   17/  92E004 :                     
(1)   18/  92E004 :                     MAP_TEST:
(1)   19/  92E004 :                     		binclude "game/screen_0/data/maps/md/test/md_map.bin"
(1)   20/  92E8C4 :                     		align 2
(1)   21/  92E8C4 :                     MapMars_TEST:
(1)   22/  92E8C4 :                     		binclude "game/screen_0/data/maps/mars/test/data_map.bin"
(1)   23/  92EAF4 :                     		align 2
(1)   24/  92EAF4 :                     
(1)   25/  92EAF4 :                     ; ----------------------------------------------------------------
(1)   26/  92EAF4 :                     ; 32X Palettes
(1)   27/  92EAF4 :                     ; ----------------------------------------------------------------
(1)   28/  92EAF4 :                     
(1)   29/  92EAF4 :                     PalMars_TEST:
(1)   30/  92EAF4 :                     		binclude "game/screen_0/data/maps/mars/test/data_pal.bin"
(1)   31/  92ECF4 :                     		align 2
(1)   32/  92ECF4 :                     PalMars_Sabrina:
(1)   33/  92ECF4 :                     		binclude "game/screen_0/data/objects/mars/sabrina/sabrina_pal.bin"
(1)   34/  92ED14 :                     		align 2
(1)   35/  92ED14 :                     
(1)   36/  92ED14 :                     ; ----------------------------------------------------------------
(1)   37/  92ED14 :                     ; Object palettes
(1)   38/  92ED14 :                     ; ----------------------------------------------------------------
(1)   39/  92ED14 :                     
(1)   40/  92ED14 :                     objPal_Sisi:
(1)   41/  92ED14 :                     		binclude "game/screen_0/data/objects/md/sisi/sisi_pal.bin"
(1)   42/  92ED34 :                     		align 2
(1)   43/  92ED34 :                     
(1)   44/  92ED34 :                     ; ----------------------------------------------------------------
(1)   45/  92ED34 :                     ; Object maps
(1)   46/  92ED34 :                     ; ----------------------------------------------------------------
(1)   47/  92ED34 :                     
(1)   48/  92ED34 :                     objMap_Sisi:
(1)   49/  92ED34 :                     		binclude "game/screen_0/data/objects/md/sisi/sisi_map.bin"
(1)   50/  92ED90 :                     		align 2
(1)   51/  92ED90 :                     
     412/  92ED90 :                     		include "sound/tracks.asm"		; GEMA: Track data
(1)    1/  92ED90 :                     ; ================================================================
(1)    2/  92ED90 :                     ; ------------------------------------------------------------
(1)    3/  92ED90 :                     ; SOUND DATA SECTION
(1)    4/  92ED90 :                     ; ------------------------------------------------------------
(1)    5/  92ED90 :                     
(1)    6/  92ED90 :                     ; --------------------------------------------
(1)    7/  92ED90 :                     ; Instrument macros
(1)    8/  92ED90 :                     ; --------------------------------------------
(1)    9/  92ED90 :                     
(1)   10/  92ED90 :                     gInsNull macro
(1)   11/  92ED90 :                     	dc.b $00,$00,$00,$00
(1)   12/  92ED90 :                     	dc.b $00,$00,$00,$00
(1)   13/  92ED90 :                     	endm
(1)   14/  92ED90 :                     
(1)   15/  92ED90 :                     ; alv: attack level
(1)   16/  92ED90 :                     ; atk: attack rate
(1)   17/  92ED90 :                     ; slv: sustain
(1)   18/  92ED90 :                     ; dky: decay rate (up)
(1)   19/  92ED90 :                     ; rrt: release rate (down)
(1)   20/  92ED90 :                     ; vib: (TODO)
(1)   21/  92ED90 :                     gInsPsg	macro pitch,alv,atk,slv,dky,rrt,vib
(1)   22/  92ED90 :                     	dc.b $80,pitch,alv,atk
(1)   23/  92ED90 :                     	dc.b slv,dky,rrt,vib
(1)   24/  92ED90 :                     	endm
(1)   25/  92ED90 :                     
(1)   26/  92ED90 :                     ; same args as gInsPsg
(1)   27/  92ED90 :                     ; only one more argument for the noise type:
(1)   28/  92ED90 :                     ; mode: noise mode
(1)   29/  92ED90 :                     ;       %tmm
(1)   30/  92ED90 :                     ;        t  - Bass(0)|Noise(1)
(1)   31/  92ED90 :                     ;         mm- Clock(0)|Clock/2(1)|Clock/4(2)|Tone3(3)
(1)   32/  92ED90 :                     ;
(1)   33/  92ED90 :                     gInsPsgN macro pitch,alv,atk,slv,dky,rrt,vib,mode
(1)   34/  92ED90 :                     	dc.b $90|mode,pitch,alv,atk
(1)   35/  92ED90 :                     	dc.b slv,dky,rrt,vib
(1)   36/  92ED90 :                     	endm
(1)   37/  92ED90 :                     
(1)   38/  92ED90 :                     ; 24-bit ROM pointer to FM patch data
(1)   39/  92ED90 :                     gInsFm macro pitch,fmins
(1)   40/  92ED90 :                     	dc.b $A0,pitch,((fmins>>16)&$FF),((fmins>>8)&$FF)
(1)   41/  92ED90 :                     	dc.b fmins&$FF,$00,$00,$00
(1)   42/  92ED90 :                     	endm
(1)   43/  92ED90 :                     
(1)   44/  92ED90 :                     ; Same args as gInsFm, but the last 4 words of the data
(1)   45/  92ED90 :                     ; are the custom freqs for each operator in this order:
(1)   46/  92ED90 :                     ; OP1 OP2 OP3 OP4
(1)   47/  92ED90 :                     ;
(1)   48/  92ED90 :                     ; Pitch is useless here, set to 0
(1)   49/  92ED90 :                     gInsFm3	macro pitch,fmins
(1)   50/  92ED90 :                     	dc.b $B0,pitch,((fmins>>16)&$FF),((fmins>>8)&$FF)
(1)   51/  92ED90 :                     	dc.b fmins&$FF,$00,$00,$00
(1)   52/  92ED90 :                     	endm
(1)   53/  92ED90 :                     
(1)   54/  92ED90 :                     ; flags: %000L
(1)   55/  92ED90 :                     ;        L - Loop sample No/Yes
(1)   56/  92ED90 :                     gInsDac	macro pitch,start,flags
(1)   57/  92ED90 :                     	dc.b $C0|flags,pitch,((start>>16)&$FF),((start>>8)&$FF)
(1)   58/  92ED90 :                     	dc.b start&$FF,0,0,0
(1)   59/  92ED90 :                     	endm
(1)   60/  92ED90 :                     
(1)   61/  92ED90 :                     ; flags: %000L
(1)   62/  92ED90 :                     ;        L - Loop sample No/Yes
(1)   63/  92ED90 :                     gInsPcm	macro pitch,start,flags
(1)   64/  92ED90 :                      if MCD|MARSCD
(1)   65/  92ED90 :                     	dc.b $D0|flags,pitch,((start>>16)&$FF),((start>>8)&$FF)
(1)   66/  92ED90 :                     	dc.b start&$FF,0,0,0
(1)   67/  92ED90 :                      else
(1)   68/  92ED90 :                     	dc.b $00,$00,$00,$00
(1)   69/  92ED90 :                     	dc.b $00,$00,$00,$00
(1)   70/  92ED90 :                      endif
(1)   71/  92ED90 :                     	endm
(1)   72/  92ED90 :                     
(1)   73/  92ED90 :                     ; flags: %00SL
(1)   74/  92ED90 :                     ;        L - Loop sample No/Yes
(1)   75/  92ED90 :                     ;        S  - Sample data is on STEREO
(1)   76/  92ED90 :                     gInsPwm	macro pitch,start,flags
(1)   77/  92ED90 :                      if MARS|MARSCD
(1)   78/  92ED90 :                     	dc.b $E0|flags,pitch,((start>>24)&$FF),((start>>16)&$FF)
(1)   79/  92ED90 :                     	dc.b ((start>>8)&$FF),start&$FF,0,0
(1)   80/  92ED90 :                      else
(1)   81/  92ED90 :                     	dc.b $00,$00,$00,$00
(1)   82/  92ED90 :                     	dc.b $00,$00,$00,$00
(1)   83/  92ED90 :                      endif
(1)   84/  92ED90 :                     	endm
(1)   85/  92ED90 :                     
(1)   86/  92ED90 :                     ; ticks - %gttttttt
(1)   87/  92ED90 :                     ;   loc - 68k pointer
(1)   88/  92ED90 :                     ;
(1)   89/  92ED90 :                     ; t-Ticks
(1)   90/  92ED90 :                     ; g-Use global tempo
(1)   91/  92ED90 :                     gemaTrk macro ticks,loc
(1)   92/  92ED90 :                     	dc.l ((ticks&$FF)<<24)|loc&$FFFFFF
(1)   93/  92ED90 :                     	endm
(1)   94/  92ED90 :                     
(1)   95/  92ED90 :                     ; gemaHead
(1)   96/  92ED90 :                     ; block point, patt point, ins point
(1)   97/  92ED90 :                     ; numof_blocks,numof_patts,numof_ins
(1)   98/  92ED90 :                     gemaHead macro blk,pat,ins,num
(1)   99/  92ED90 :                     	dc.w num
(1)  100/  92ED90 :                     	dc.l blk
(1)  101/  92ED90 :                     	dc.l pat
(1)  102/  92ED90 :                     	dc.l ins
(1)  103/  92ED90 :                     	endm
(1)  104/  92ED90 :                     
(1)  105/  92ED90 :                     ; gemaTrack macro num,name
(1)  106/  92ED90 :                     ; 	gemaHead .blk,.pat,.ins,num
(1)  107/  92ED90 :                     ; .blk:
(1)  108/  92ED90 :                     ; 	binclude "sound/tracks/"+name+"_blk.bin"
(1)  109/  92ED90 :                     ; .pat:
(1)  110/  92ED90 :                     ; 	binclude "sound/tracks/"+name+"_patt.bin"
(1)  111/  92ED90 :                     ; .ins:
(1)  112/  92ED90 :                     ; 	endm
(1)  113/  92ED90 :                     
(1)  114/  92ED90 :                     ; ================================================================
(1)  115/  92ED90 :                     ; ------------------------------------------------------------
(1)  116/  92ED90 :                     ; Nikona MAIN track-list
(1)  117/  92ED90 :                     ;
(1)  118/  92ED90 :                     ; gemaTrk ticks+beatsbit*,track_data
(1)  119/  92ED90 :                     ; Add $80 ($80|ticks) to make the track use global sub-beats
(1)  120/  92ED90 :                     ;
(1)  121/  92ED90 :                     ; To use sub-beats call gemaSetBeats command
(1)  122/  92ED90 :                     ; BEFORE playing your track:
(1)  123/  92ED90 :                     ; 	move.w	#new_beats,d0
(1)  124/  92ED90 :                     ; 	bsr	gemaSetBeats
(1)  125/  92ED90 :                     ; 	move.w	#track_id,d0
(1)  126/  92ED90 :                     ;	bsr	gemaPlayTrack
(1)  127/  92ED90 :                     ; ------------------------------------------------------------
(1)  128/  92ED90 :                     
(1)  129/  92ED90 :                     	align 2
(1)  130/  92ED90 :                     Gema_MasterList:
(1)  131/  92ED90 : (MACRO)              	gemaTrk 7,GemaTrk_Arena1
(1)  131/  92ED90 : 0792 EEA8                   dc.l ((7&$FF)<<24)|GEMATRK_ARENA1&$FFFFFF
(1)  132/  92ED94 : (MACRO)              	gemaTrk 6|$80,GemaTrk_MOVEME
(1)  132/  92ED94 : 8693 236B                   dc.l ((6|$80&$FF)<<24)|GEMATRK_MOVEME&$FFFFFF
(1)  133/  92ED98 : (MACRO)              	gemaTrk 6|$80,GemaTrk_NadieMD
(1)  133/  92ED98 : 8693 5CCA                   dc.l ((6|$80&$FF)<<24)|GEMATRK_NADIEMD&$FFFFFF
(1)  134/  92ED9C : (MACRO)              	gemaTrk 6|$80,GemaTrk_NadieMCD
(1)  134/  92ED9C : 8693 6FB8                   dc.l ((6|$80&$FF)<<24)|GEMATRK_NADIEMCD&$FFFFFF
(1)  135/  92EDA0 : (MACRO)              	gemaTrk 6|$80,GemaTrk_NadieMARS
(1)  135/  92EDA0 : 8693 8266                   dc.l ((6|$80&$FF)<<24)|GEMATRK_NADIEMARS&$FFFFFF
(1)  136/  92EDA4 : (MACRO)              	gemaTrk 3|$80,GemaTrk_Crystal
(1)  136/  92EDA4 : 8393 4A90                   dc.l ((3|$80&$FF)<<24)|GEMATRK_CRYSTAL&$FFFFFF
(1)  137/  92EDA8 : (MACRO)              	gemaTrk 3,GemaTrk_Dream
(1)  137/  92EDA8 : 0393 3340                   dc.l ((3&$FF)<<24)|GEMATRK_DREAM&$FFFFFF
(1)  138/  92EDAC :                     
(1)  139/  92EDAC :                     ; ------------------------------------------------------------
(1)  140/  92EDAC :                     ; BGM tracks
(1)  141/  92EDAC :                     ; ------------------------------------------------------------
(1)  142/  92EDAC :                     
(1)  143/  92EDAC :                     GemaSfx_All:
(1)  144/  92EDAC : (MACRO)              	gemaHead .blk,.pat,.ins,1
(1)  144/  92EDAC : 0001                        dc.w 1
(1)  144/  92EDAE : 0092 EDBA                   dc.l .BLK
(1)  144/  92EDB2 : 0092 EDC0                   dc.l .PAT
(1)  144/  92EDB6 : 0092 EE80                   dc.l .INS
(1)  145/  92EDBA :                     .blk:
(1)  146/  92EDBA :                     	binclude "sound/tracks/sfxall_blk.bin"
(1)  147/  92EDBF :                     	align 2
(1)  148/  92EDC0 :                     .pat:
(1)  149/  92EDC0 :                     	binclude "sound/tracks/sfxall_patt.bin"
(1)  150/  92EE7F :                     	align 2
(1)  151/  92EE80 :                     .ins:
(1)  152/  92EE80 : (MACRO)              	gInsPsgN 0,$00,$00,$00,$00,$00,0,%100
(1)  152/  92EE80 : 9400 0000                   dc.b $90|%100,0,$00,$00
(1)  152/  92EE84 : 0000 0000                   dc.b $00,$00,$00,0
(1)  153/  92EE88 : (MACRO)              	gInsPsgN 0,$00,$00,$00,$00,$00,0,%101
(1)  153/  92EE88 : 9500 0000                   dc.b $90|%101,0,$00,$00
(1)  153/  92EE8C : 0000 0000                   dc.b $00,$00,$00,0
(1)  154/  92EE90 : (MACRO)              	gInsPsgN 0,$00,$00,$00,$00,$00,0,%110
(1)  154/  92EE90 : 9600 0000                   dc.b $90|%110,0,$00,$00
(1)  154/  92EE94 : 0000 0000                   dc.b $00,$00,$00,0
(1)  155/  92EE98 : (MACRO)              	gInsFm 0,FmIns_Ding_1
(1)  155/  92EE98 : A000 9399                   dc.b $A0,0,((FMINS_DING_1>>16)&$FF),((FMINS_DING_1>>8)&$FF)
(1)  155/  92EE9C : B400 0000                   dc.b FMINS_DING_1&$FF,$00,$00,$00
(1)  156/  92EEA0 : (MACRO)              	gInsFm3 0,FmIns_Fm3_Explosion
(1)  156/  92EEA0 : B000 9395                   dc.b $B0,0,((FMINS_FM3_EXPLOSION>>16)&$FF),((FMINS_FM3_EXPLOSION>>8)&$FF)
(1)  156/  92EEA4 : 1400 0000                   dc.b FMINS_FM3_EXPLOSION&$FF,$00,$00,$00
(1)  157/  92EEA8 :                     
(1)  158/  92EEA8 :                     ; ------------------------------------------------------------
(1)  159/  92EEA8 :                     
(1)  160/  92EEA8 :                     GemaTrk_TEST_0:
(1)  161/  92EEA8 :                     
(1)  162/  92EEA8 :                     GemaTrk_Arena1:
(1)  163/  92EEA8 : (MACRO)              	gemaHead shrd_blk,shrd_pat,.ins,6
(1)  163/  92EEA8 : 0006                        dc.w 6
(1)  163/  92EEAA : 0092 EF36                   dc.l SHRD_BLK
(1)  163/  92EEAE : 0092 EF4F                   dc.l SHRD_PAT
(1)  163/  92EEB2 : 0092 EEB6                   dc.l .INS
(1)  164/  92EEB6 :                     .ins:
(1)  165/  92EEB6 : (MACRO)              	gInsPcm -17-7,PcmIns_Menu_01,1
(1)  165/  92EEB6 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  165/  92EEBA : 0000 0000                   dc.b $00,$00,$00,$00
(1)  166/  92EEBE : (MACRO)              	gInsPcm -17-7,PcmIns_Menu_02,1
(1)  166/  92EEBE : 0000 0000                   dc.b $00,$00,$00,$00
(1)  166/  92EEC2 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  167/  92EEC6 : (MACRO)              	gInsPcm -17-7,PcmIns_Menu_03,0
(1)  167/  92EEC6 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  167/  92EECA : 0000 0000                   dc.b $00,$00,$00,$00
(1)  168/  92EECE : (MACRO)              	gInsNull
(1)  168/  92EECE : 0000 0000                   dc.b $00,$00,$00,$00
(1)  168/  92EED2 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  169/  92EED6 : (MACRO)              	gInsPcm -17-7,PcmIns_Menu_05,1
(1)  169/  92EED6 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  169/  92EEDA : 0000 0000                   dc.b $00,$00,$00,$00
(1)  170/  92EEDE : (MACRO)              	gInsPcm -17-7,PcmIns_Menu_06,0
(1)  170/  92EEDE : 0000 0000                   dc.b $00,$00,$00,$00
(1)  170/  92EEE2 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  171/  92EEE6 : (MACRO)              	gInsPcm -17-7,PcmIns_Menu_07,0
(1)  171/  92EEE6 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  171/  92EEEA : 0000 0000                   dc.b $00,$00,$00,$00
(1)  172/  92EEEE : (MACRO)              	gInsPcm -17-7,PcmIns_Menu_08,0
(1)  172/  92EEEE : 0000 0000                   dc.b $00,$00,$00,$00
(1)  172/  92EEF2 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  173/  92EEF6 : (MACRO)              	gInsPcm -17-7,PcmIns_Menu_09,0
(1)  173/  92EEF6 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  173/  92EEFA : 0000 0000                   dc.b $00,$00,$00,$00
(1)  174/  92EEFE : (MACRO)              	gInsNull
(1)  174/  92EEFE : 0000 0000                   dc.b $00,$00,$00,$00
(1)  174/  92EF02 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  175/  92EF06 : (MACRO)              	gInsPcm -17-7,PcmIns_Menu_11,0
(1)  175/  92EF06 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  175/  92EF0A : 0000 0000                   dc.b $00,$00,$00,$00
(1)  176/  92EF0E : (MACRO)              	gInsPcm -17-7,PcmIns_Menu_12,0
(1)  176/  92EF0E : 0000 0000                   dc.b $00,$00,$00,$00
(1)  176/  92EF12 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  177/  92EF16 : (MACRO)              	gInsPcm -17-7,PcmIns_Menu_13,0
(1)  177/  92EF16 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  177/  92EF1A : 0000 0000                   dc.b $00,$00,$00,$00
(1)  178/  92EF1E : (MACRO)              	gInsPcm -17-7,PcmIns_Menu_14,1
(1)  178/  92EF1E : 0000 0000                   dc.b $00,$00,$00,$00
(1)  178/  92EF22 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  179/  92EF26 : (MACRO)              	gInsPcm -17-7,PcmIns_Menu_15,0
(1)  179/  92EF26 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  179/  92EF2A : 0000 0000                   dc.b $00,$00,$00,$00
(1)  180/  92EF2E : (MACRO)              	gInsPcm -17-7,PcmIns_Menu_16,0
(1)  180/  92EF2E : 0000 0000                   dc.b $00,$00,$00,$00
(1)  180/  92EF32 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  181/  92EF36 :                     shrd_blk:
(1)  182/  92EF36 :                     	binclude "sound/tracks/menu_blk.bin"
(1)  183/  92EF4F :                     shrd_pat:
(1)  184/  92EF4F :                     	binclude "sound/tracks/menu_patt.bin"
(1)  185/  93236B :                     
(1)  186/  93236B :                     ; ------------------------------------------------------------
(1)  187/  93236B :                     
(1)  188/  93236B :                     GemaTrk_MOVEME:
(1)  189/  93236B : (MACRO)              	gemaHead .blk,.pat,.ins,13
(1)  189/  93236B : 000D                        dc.w 13
(1)  189/  93236D : 0093 2379                   dc.l .BLK
(1)  189/  932371 : 0093 2390                   dc.l .PAT
(1)  189/  932375 : 0093 32A8                   dc.l .INS
(1)  190/  932379 :                     .blk:
(1)  191/  932379 :                     	binclude "sound/tracks/moveme_blk.bin"
(1)  192/  932390 :                     	align 2
(1)  193/  932390 :                     .pat:
(1)  194/  932390 :                     	binclude "sound/tracks/moveme_patt.bin"
(1)  195/  9332A8 :                     	align 2
(1)  196/  9332A8 :                     .ins:
(1)  197/  9332A8 : (MACRO)              	gInsPcm -12,PcmIns_MoveMe_Hit,%10
(1)  197/  9332A8 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  197/  9332AC : 0000 0000                   dc.b $00,$00,$00,$00
(1)  198/  9332B0 : (MACRO)              	gInsFm 0,FmIns_Bass_Duck
(1)  198/  9332B0 : A000 9396                   dc.b $A0,0,((FMINS_BASS_DUCK>>16)&$FF),((FMINS_BASS_DUCK>>8)&$FF)
(1)  198/  9332B4 : 9400 0000                   dc.b FMINS_BASS_DUCK&$FF,$00,$00,$00
(1)  199/  9332B8 : (MACRO)              	gInsPcm -12,PcmIns_MoveMe_BrassL,%11
(1)  199/  9332B8 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  199/  9332BC : 0000 0000                   dc.b $00,$00,$00,$00
(1)  200/  9332C0 : (MACRO)              	gInsFm 0,FmIns_ClosedHat
(1)  200/  9332C0 : A000 939A                   dc.b $A0,0,((FMINS_CLOSEDHAT>>16)&$FF),((FMINS_CLOSEDHAT>>8)&$FF)
(1)  200/  9332C4 : 7400 0000                   dc.b FMINS_CLOSEDHAT&$FF,$00,$00,$00
(1)  201/  9332C8 : (MACRO)              	gInsPsgN 0,$00,$00,$00,$00,$04,0,%110
(1)  201/  9332C8 : 9600 0000                   dc.b $90|%110,0,$00,$00
(1)  201/  9332CC : 0000 0400                   dc.b $00,$00,$04,0
(1)  202/  9332D0 : (MACRO)              	gInsFm -12,FmIns_HBeat_tom
(1)  202/  9332D0 : A0F4 9399                   dc.b $A0,-12,((FMINS_HBEAT_TOM>>16)&$FF),((FMINS_HBEAT_TOM>>8)&$FF)
(1)  202/  9332D4 : F400 0000                   dc.b FMINS_HBEAT_TOM&$FF,$00,$00,$00
(1)  203/  9332D8 : (MACRO)              	gInsPcm -12,PcmIns_Snare,%10
(1)  203/  9332D8 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  203/  9332DC : 0000 0000                   dc.b $00,$00,$00,$00
(1)  204/  9332E0 : (MACRO)              	gInsPcm -12,PcmIns_Kick,%10		;gInsFm -38,FmIns_DrumKick_gem
(1)  204/  9332E0 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  204/  9332E4 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  205/  9332E8 : (MACRO)              	gInsFm -12,FmIns_Trumpet_carnival	;FmIns_Trumpet_2
(1)  205/  9332E8 : A0F4 9398                   dc.b $A0,-12,((FMINS_TRUMPET_CARNIVAL>>16)&$FF),((FMINS_TRUMPET_CARNIVAL>>8)&$FF)
(1)  205/  9332EC : 1400 0000                   dc.b FMINS_TRUMPET_CARNIVAL&$FF,$00,$00,$00
(1)  206/  9332F0 : (MACRO)              	gInsPsg 0,$20,$20,$10,$01,$08,0		;gInsFm -12,FmIns_Ding_Baseball;
(1)  206/  9332F0 : 8000 2020                   dc.b $80,0,$20,$20
(1)  206/  9332F4 : 1001 0800                   dc.b $10,$01,$08,0
(1)  207/  9332F8 : (MACRO)              	gInsFm3 0,FmIns_Sp_OpenHat
(1)  207/  9332F8 : B000 9395                   dc.b $B0,0,((FMINS_SP_OPENHAT>>16)&$FF),((FMINS_SP_OPENHAT>>8)&$FF)
(1)  207/  9332FC : 3C00 0000                   dc.b FMINS_SP_OPENHAT&$FF,$00,$00,$00
(1)  208/  933300 : (MACRO)              	gInsNull;gInsPwm -17,PwmIns_MyTime,%10
(1)  208/  933300 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  208/  933304 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  209/  933308 : (MACRO)              	gInsPsg +12,$20,$10,$10,$0C,$0C,0
(1)  209/  933308 : 800C 2010                   dc.b $80,+12,$20,$10
(1)  209/  93330C : 100C 0C00                   dc.b $10,$0C,$0C,0
(1)  210/  933310 : (MACRO)              	gInsPsg 0,$00,$00,$00,$00,$06,0
(1)  210/  933310 : 8000 0000                   dc.b $80,0,$00,$00
(1)  210/  933314 : 0000 0600                   dc.b $00,$00,$06,0
(1)  211/  933318 : (MACRO)              	gInsPcm -12,PcmIns_MoveMe_BrassR,%11
(1)  211/  933318 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  211/  93331C : 0000 0000                   dc.b $00,$00,$00,$00
(1)  212/  933320 : (MACRO)              	gInsNull
(1)  212/  933320 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  212/  933324 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  213/  933328 : (MACRO)              	gInsNull
(1)  213/  933328 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  213/  93332C : 0000 0000                   dc.b $00,$00,$00,$00
(1)  214/  933330 : (MACRO)              	gInsNull
(1)  214/  933330 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  214/  933334 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  215/  933338 : (MACRO)              	gInsNull
(1)  215/  933338 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  215/  93333C : 0000 0000                   dc.b $00,$00,$00,$00
(1)  216/  933340 :                     
(1)  217/  933340 :                     ; ------------------------------------------------------------
(1)  218/  933340 :                     
(1)  219/  933340 :                     GemaTrk_Dream:
(1)  220/  933340 : (MACRO)              	gemaHead .blk,.pat,.ins,8
(1)  220/  933340 : 0008                        dc.w 8
(1)  220/  933342 : 0093 334E                   dc.l .BLK
(1)  220/  933346 : 0093 335B                   dc.l .PAT
(1)  220/  93334A : 0093 4A18                   dc.l .INS
(1)  221/  93334E :                     .blk:
(1)  222/  93334E :                     	binclude "sound/tracks/dream_blk.bin"
(1)  223/  93335B :                     .pat:
(1)  224/  93335B :                     	binclude "sound/tracks/dream_patt.bin"
(1)  225/  934A18 :                     .ins:
(1)  226/  934A18 : (MACRO)              	gInsFm 0,FmIns_Hats_closed
(1)  226/  934A18 : A000 939A                   dc.b $A0,0,((FMINS_HATS_CLOSED>>16)&$FF),((FMINS_HATS_CLOSED>>8)&$FF)
(1)  226/  934A1C : 5400 0000                   dc.b FMINS_HATS_CLOSED&$FF,$00,$00,$00
(1)  227/  934A20 : (MACRO)              	gInsDac +12,DacIns_Kick_wegot,0
(1)  227/  934A20 : C00C 9507                   dc.b $C0|0,+12,((DACINS_KICK_WEGOT>>16)&$FF),((DACINS_KICK_WEGOT>>8)&$FF)
(1)  227/  934A24 : 5400 0000                   dc.b DACINS_KICK_WEGOT&$FF,0,0,0
(1)  228/  934A28 : (MACRO)              	gInsFm -12,FmIns_brass_eur
(1)  228/  934A28 : A0F4 9398                   dc.b $A0,-12,((FMINS_BRASS_EUR>>16)&$FF),((FMINS_BRASS_EUR>>8)&$FF)
(1)  228/  934A2C : 3400 0000                   dc.b FMINS_BRASS_EUR&$FF,$00,$00,$00
(1)  229/  934A30 : (MACRO)              	gInsFm -24,FmIns_Trumpet_carnival
(1)  229/  934A30 : A0E8 9398                   dc.b $A0,-24,((FMINS_TRUMPET_CARNIVAL>>16)&$FF),((FMINS_TRUMPET_CARNIVAL>>8)&$FF)
(1)  229/  934A34 : 1400 0000                   dc.b FMINS_TRUMPET_CARNIVAL&$FF,$00,$00,$00
(1)  230/  934A38 : (MACRO)              	gInsPsg  0,$00,$20,$00,$02,$10,0
(1)  230/  934A38 : 8000 0020                   dc.b $80,0,$00,$20
(1)  230/  934A3C : 0002 1000                   dc.b $00,$02,$10,0
(1)  231/  934A40 : (MACRO)              	gInsPsgN 0,$00,$10,$00,$01,$04,0,%100
(1)  231/  934A40 : 9400 0010                   dc.b $90|%100,0,$00,$10
(1)  231/  934A44 : 0001 0400                   dc.b $00,$01,$04,0
(1)  232/  934A48 : (MACRO)              	gInsFm 0,FmIns_Bass_low_1
(1)  232/  934A48 : A000 9397                   dc.b $A0,0,((FMINS_BASS_LOW_1>>16)&$FF),((FMINS_BASS_LOW_1>>8)&$FF)
(1)  232/  934A4C : 3400 0000                   dc.b FMINS_BASS_LOW_1&$FF,$00,$00,$00
(1)  233/  934A50 : (MACRO)              	gInsFm 0,FmIns_Hats_1
(1)  233/  934A50 : A000 939A                   dc.b $A0,0,((FMINS_HATS_1>>16)&$FF),((FMINS_HATS_1>>8)&$FF)
(1)  233/  934A54 : 3400 0000                   dc.b FMINS_HATS_1&$FF,$00,$00,$00
(1)  234/  934A58 : (MACRO)              	gInsPsgN 0,$00,$10,$00,$01,$08,0,%101
(1)  234/  934A58 : 9500 0010                   dc.b $90|%101,0,$00,$10
(1)  234/  934A5C : 0001 0800                   dc.b $00,$01,$08,0
(1)  235/  934A60 : (MACRO)              	gInsNull
(1)  235/  934A60 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  235/  934A64 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  236/  934A68 : (MACRO)              	gInsNull
(1)  236/  934A68 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  236/  934A6C : 0000 0000                   dc.b $00,$00,$00,$00
(1)  237/  934A70 : (MACRO)              	gInsNull
(1)  237/  934A70 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  237/  934A74 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  238/  934A78 : (MACRO)              	gInsNull
(1)  238/  934A78 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  238/  934A7C : 0000 0000                   dc.b $00,$00,$00,$00
(1)  239/  934A80 : (MACRO)              	gInsPsg  0,$40,$00,$00,$00,$00,0
(1)  239/  934A80 : 8000 4000                   dc.b $80,0,$40,$00
(1)  239/  934A84 : 0000 0000                   dc.b $00,$00,$00,0
(1)  240/  934A88 : (MACRO)              	gInsFm -12,FmIns_Trumpet_1
(1)  240/  934A88 : A0F4 9397                   dc.b $A0,-12,((FMINS_TRUMPET_1>>16)&$FF),((FMINS_TRUMPET_1>>8)&$FF)
(1)  240/  934A8C : F400 0000                   dc.b FMINS_TRUMPET_1&$FF,$00,$00,$00
(1)  241/  934A90 :                     
(1)  242/  934A90 :                     ; Ticks: 3-1
(1)  243/  934A90 :                     ; TEMPO: 170
(1)  244/  934A90 :                     GemaTrk_Crystal:
(1)  245/  934A90 : (MACRO)              	gemaHead .blk,.pat,.ins,7
(1)  245/  934A90 : 0007                        dc.w 7
(1)  245/  934A92 : 0093 4A9E                   dc.l .BLK
(1)  245/  934A96 : 0093 4AA6                   dc.l .PAT
(1)  245/  934A9A : 0093 5C9A                   dc.l .INS
(1)  246/  934A9E :                     .blk:
(1)  247/  934A9E :                     	binclude "sound/tracks/crystal_blk.bin"
(1)  248/  934AA6 :                     .pat:
(1)  249/  934AA6 :                     	binclude "sound/tracks/crystal_patt.bin"
(1)  250/  935C9A :                     .ins:
(1)  251/  935C9A : (MACRO)              	gInsFm 0,FmIns_Organ2a
(1)  251/  935C9A : A000 9394                   dc.b $A0,0,((FMINS_ORGAN2A>>16)&$FF),((FMINS_ORGAN2A>>8)&$FF)
(1)  251/  935C9E : F400 0000                   dc.b FMINS_ORGAN2A&$FF,$00,$00,$00
(1)  252/  935CA2 : (MACRO)              	gInsPsgN 0,$00,$10,$00,$01,$10,0,%100
(1)  252/  935CA2 : 9400 0010                   dc.b $90|%100,0,$00,$10
(1)  252/  935CA6 : 0001 1000                   dc.b $00,$01,$10,0
(1)  253/  935CAA : (MACRO)              	gInsDac 0,DacIns_Kick_wegot,0
(1)  253/  935CAA : C000 9507                   dc.b $C0|0,0,((DACINS_KICK_WEGOT>>16)&$FF),((DACINS_KICK_WEGOT>>8)&$FF)
(1)  253/  935CAE : 5400 0000                   dc.b DACINS_KICK_WEGOT&$FF,0,0,0
(1)  254/  935CB2 : (MACRO)              	gInsFm3 0,FmIns_Sp_OpenHat
(1)  254/  935CB2 : B000 9395                   dc.b $B0,0,((FMINS_SP_OPENHAT>>16)&$FF),((FMINS_SP_OPENHAT>>8)&$FF)
(1)  254/  935CB6 : 3C00 0000                   dc.b FMINS_SP_OPENHAT&$FF,$00,$00,$00
(1)  255/  935CBA : (MACRO)              	gInsNull
(1)  255/  935CBA : 0000 0000                   dc.b $00,$00,$00,$00
(1)  255/  935CBE : 0000 0000                   dc.b $00,$00,$00,$00
(1)  256/  935CC2 : (MACRO)              	gInsFm 0,FmIns_Bass_low_1
(1)  256/  935CC2 : A000 9397                   dc.b $A0,0,((FMINS_BASS_LOW_1>>16)&$FF),((FMINS_BASS_LOW_1>>8)&$FF)
(1)  256/  935CC6 : 3400 0000                   dc.b FMINS_BASS_LOW_1&$FF,$00,$00,$00
(1)  257/  935CCA :                     
(1)  258/  935CCA :                     ; ------------------------------------------------------------
(1)  259/  935CCA :                     
(1)  260/  935CCA :                     GemaTrk_NadieMD:
(1)  261/  935CCA : (MACRO)              	gemaHead .blk,.patt,.inst,7
(1)  261/  935CCA : 0007                        dc.w 7
(1)  261/  935CCC : 0093 5CD8                   dc.l .BLK
(1)  261/  935CD0 : 0093 5CE0                   dc.l .PATT
(1)  261/  935CD4 : 0093 6F70                   dc.l .INST
(1)  262/  935CD8 :                     .blk:
(1)  263/  935CD8 :                     	binclude "sound/tracks/nadie_md_blk.bin"
(1)  264/  935CDF :                     	align 2
(1)  265/  935CE0 :                     .patt:
(1)  266/  935CE0 :                     	binclude "sound/tracks/nadie_md_patt.bin"
(1)  267/  936F70 :                     	align 2
(1)  268/  936F70 :                     .inst:
(1)  269/  936F70 : (MACRO)              	gInsDac 0,DacIns_Nadie,0
(1)  269/  936F70 : C000 9400                   dc.b $C0|0,0,((DACINS_NADIE>>16)&$FF),((DACINS_NADIE>>8)&$FF)
(1)  269/  936F74 : 0000 0000                   dc.b DACINS_NADIE&$FF,0,0,0
(1)  270/  936F78 : (MACRO)              	gInsFm -36,FmIns_Piano_Aqua
(1)  270/  936F78 : A0DC 9397                   dc.b $A0,-36,((FMINS_PIANO_AQUA>>16)&$FF),((FMINS_PIANO_AQUA>>8)&$FF)
(1)  270/  936F7C : 9400 0000                   dc.b FMINS_PIANO_AQUA&$FF,$00,$00,$00
(1)  271/  936F80 : (MACRO)              	gInsFm -12,FmIns_HBeat_tom
(1)  271/  936F80 : A0F4 9399                   dc.b $A0,-12,((FMINS_HBEAT_TOM>>16)&$FF),((FMINS_HBEAT_TOM>>8)&$FF)
(1)  271/  936F84 : F400 0000                   dc.b FMINS_HBEAT_TOM&$FF,$00,$00,$00
(1)  272/  936F88 : (MACRO)              	gInsFm -37,FmIns_DrumKick_gem
(1)  272/  936F88 : A0DB 9398                   dc.b $A0,-37,((FMINS_DRUMKICK_GEM>>16)&$FF),((FMINS_DRUMKICK_GEM>>8)&$FF)
(1)  272/  936F8C : B400 0000                   dc.b FMINS_DRUMKICK_GEM&$FF,$00,$00,$00
(1)  273/  936F90 : (MACRO)              	gInsPsg 0,$50,$70,$00,$06,$08,0
(1)  273/  936F90 : 8000 5070                   dc.b $80,0,$50,$70
(1)  273/  936F94 : 0006 0800                   dc.b $00,$06,$08,0
(1)  274/  936F98 : (MACRO)              	gInsFm 0,FmIns_Trumpet_1
(1)  274/  936F98 : A000 9397                   dc.b $A0,0,((FMINS_TRUMPET_1>>16)&$FF),((FMINS_TRUMPET_1>>8)&$FF)
(1)  274/  936F9C : F400 0000                   dc.b FMINS_TRUMPET_1&$FF,$00,$00,$00
(1)  275/  936FA0 : (MACRO)              	gInsNull
(1)  275/  936FA0 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  275/  936FA4 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  276/  936FA8 : (MACRO)              	gInsFm3 0,FmIns_Sp_ClosedHat
(1)  276/  936FA8 : B000 9395                   dc.b $B0,0,((FMINS_SP_CLOSEDHAT>>16)&$FF),((FMINS_SP_CLOSEDHAT>>8)&$FF)
(1)  276/  936FAC : 6400 0000                   dc.b FMINS_SP_CLOSEDHAT&$FF,$00,$00,$00
(1)  277/  936FB0 : (MACRO)              	gInsFm3 0,FmIns_Sp_OpenHat
(1)  277/  936FB0 : B000 9395                   dc.b $B0,0,((FMINS_SP_OPENHAT>>16)&$FF),((FMINS_SP_OPENHAT>>8)&$FF)
(1)  277/  936FB4 : 3C00 0000                   dc.b FMINS_SP_OPENHAT&$FF,$00,$00,$00
(1)  278/  936FB8 :                     
(1)  279/  936FB8 :                     GemaTrk_NadieMCD:
(1)  280/  936FB8 : (MACRO)              	gemaHead .blk,.patt,.inst,11
(1)  280/  936FB8 : 000B                        dc.w 11
(1)  280/  936FBA : 0093 6FC6                   dc.l .BLK
(1)  280/  936FBE : 0093 6FCE                   dc.l .PATT
(1)  280/  936FC2 : 0093 821E                   dc.l .INST
(1)  281/  936FC6 :                     .blk:
(1)  282/  936FC6 :                     	binclude "sound/tracks/nadie_mcd_blk.bin"
(1)  283/  936FCD :                     	align 2
(1)  284/  936FCE :                     .patt
(1)  285/  936FCE :                     	binclude "sound/tracks/nadie_mcd_patt.bin"
(1)  286/  93821E :                     	align 2
(1)  287/  93821E :                     .inst:
(1)  288/  93821E : (MACRO)              	gInsPcm -12,PcmIns_NadieL,%10
(1)  288/  93821E : 0000 0000                   dc.b $00,$00,$00,$00
(1)  288/  938222 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  289/  938226 : (MACRO)              	gInsFm -36,FmIns_Piano_Aqua
(1)  289/  938226 : A0DC 9397                   dc.b $A0,-36,((FMINS_PIANO_AQUA>>16)&$FF),((FMINS_PIANO_AQUA>>8)&$FF)
(1)  289/  93822A : 9400 0000                   dc.b FMINS_PIANO_AQUA&$FF,$00,$00,$00
(1)  290/  93822E : (MACRO)              	gInsFm -12,FmIns_HBeat_tom
(1)  290/  93822E : A0F4 9399                   dc.b $A0,-12,((FMINS_HBEAT_TOM>>16)&$FF),((FMINS_HBEAT_TOM>>8)&$FF)
(1)  290/  938232 : F400 0000                   dc.b FMINS_HBEAT_TOM&$FF,$00,$00,$00
(1)  291/  938236 : (MACRO)              	gInsPcm -12-12,PcmIns_PKick,%00
(1)  291/  938236 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  291/  93823A : 0000 0000                   dc.b $00,$00,$00,$00
(1)  292/  93823E : (MACRO)              	gInsPsg 0,$50,$70,$00,$06,$08,0
(1)  292/  93823E : 8000 5070                   dc.b $80,0,$50,$70
(1)  292/  938242 : 0006 0800                   dc.b $00,$06,$08,0
(1)  293/  938246 : (MACRO)              	gInsFm 0,FmIns_Trumpet_1
(1)  293/  938246 : A000 9397                   dc.b $A0,0,((FMINS_TRUMPET_1>>16)&$FF),((FMINS_TRUMPET_1>>8)&$FF)
(1)  293/  93824A : F400 0000                   dc.b FMINS_TRUMPET_1&$FF,$00,$00,$00
(1)  294/  93824E : (MACRO)              	gInsPcm 0-12,PcmIns_Piano,%00
(1)  294/  93824E : 0000 0000                   dc.b $00,$00,$00,$00
(1)  294/  938252 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  295/  938256 : (MACRO)              	gInsPcm -12-12,PcmIns_PTom,%00
(1)  295/  938256 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  295/  93825A : 0000 0000                   dc.b $00,$00,$00,$00
(1)  296/  93825E : (MACRO)              	gInsPcm -12,PcmIns_NadieR,%10
(1)  296/  93825E : 0000 0000                   dc.b $00,$00,$00,$00
(1)  296/  938262 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  297/  938266 :                     
(1)  298/  938266 :                     GemaTrk_NadieMARS:
(1)  299/  938266 : (MACRO)              	gemaHead .blk,.patt,.inst,11
(1)  299/  938266 : 000B                        dc.w 11
(1)  299/  938268 : 0093 8274                   dc.l .BLK
(1)  299/  93826C : 0093 827C                   dc.l .PATT
(1)  299/  938270 : 0093 948C                   dc.l .INST
(1)  300/  938274 :                     .blk:
(1)  301/  938274 :                     	binclude "sound/tracks/nadie_blk.bin"
(1)  302/  93827B :                     	align 2
(1)  303/  93827C :                     .patt
(1)  304/  93827C :                     	binclude "sound/tracks/nadie_patt.bin"
(1)  305/  93948C :                     	align 2
(1)  306/  93948C :                     .inst:
(1)  307/  93948C : (MACRO)              	gInsPwm 0,PwmIns_Nadie,%10
(1)  307/  93948C : E200 0600                   dc.b $E0|%10,0,((PWMINS_NADIE>>24)&$FF),((PWMINS_NADIE>>16)&$FF)
(1)  307/  939490 : 5050 0000                   dc.b ((PWMINS_NADIE>>8)&$FF),PWMINS_NADIE&$FF,0,0
(1)  308/  939494 : (MACRO)              	gInsFm -36,FmIns_Piano_Aqua
(1)  308/  939494 : A0DC 9397                   dc.b $A0,-36,((FMINS_PIANO_AQUA>>16)&$FF),((FMINS_PIANO_AQUA>>8)&$FF)
(1)  308/  939498 : 9400 0000                   dc.b FMINS_PIANO_AQUA&$FF,$00,$00,$00
(1)  309/  93949C : (MACRO)              	gInsFm -12,FmIns_HBeat_tom
(1)  309/  93949C : A0F4 9399                   dc.b $A0,-12,((FMINS_HBEAT_TOM>>16)&$FF),((FMINS_HBEAT_TOM>>8)&$FF)
(1)  309/  9394A0 : F400 0000                   dc.b FMINS_HBEAT_TOM&$FF,$00,$00,$00
(1)  310/  9394A4 : (MACRO)              	gInsPwm -12,PwmIns_PKick,%00
(1)  310/  9394A4 : E0F4 0602                   dc.b $E0|%00,-12,((PWMINS_PKICK>>24)&$FF),((PWMINS_PKICK>>16)&$FF)
(1)  310/  9394A8 : 0FA8 0000                   dc.b ((PWMINS_PKICK>>8)&$FF),PWMINS_PKICK&$FF,0,0
(1)  311/  9394AC : (MACRO)              	gInsPsg 0,$50,$70,$00,$06,$08,0
(1)  311/  9394AC : 8000 5070                   dc.b $80,0,$50,$70
(1)  311/  9394B0 : 0006 0800                   dc.b $00,$06,$08,0
(1)  312/  9394B4 : (MACRO)              	gInsFm 0,FmIns_Trumpet_1
(1)  312/  9394B4 : A000 9397                   dc.b $A0,0,((FMINS_TRUMPET_1>>16)&$FF),((FMINS_TRUMPET_1>>8)&$FF)
(1)  312/  9394B8 : F400 0000                   dc.b FMINS_TRUMPET_1&$FF,$00,$00,$00
(1)  313/  9394BC : (MACRO)              	gInsPwm 0,PwmIns_Piano,%00
(1)  313/  9394BC : E000 0602                   dc.b $E0|%00,0,((PWMINS_PIANO>>24)&$FF),((PWMINS_PIANO>>16)&$FF)
(1)  313/  9394C0 : 1724 0000                   dc.b ((PWMINS_PIANO>>8)&$FF),PWMINS_PIANO&$FF,0,0
(1)  314/  9394C4 : (MACRO)              	gInsPwm -12,PwmIns_PTom,%00
(1)  314/  9394C4 : E0F4 0602                   dc.b $E0|%00,-12,((PWMINS_PTOM>>24)&$FF),((PWMINS_PTOM>>16)&$FF)
(1)  314/  9394C8 : 9100 0000                   dc.b ((PWMINS_PTOM>>8)&$FF),PWMINS_PTOM&$FF,0,0
(1)  315/  9394CC : (MACRO)              	gInsNull
(1)  315/  9394CC : 0000 0000                   dc.b $00,$00,$00,$00
(1)  315/  9394D0 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  316/  9394D4 :                     
     413/  9394D4 :                     		include "sound/instr.asm"		; GEMA: FM instruments
(1)    1/  9394D4 :                     ; ====================================================================
(1)    2/  9394D4 :                     ; --------------------------------------------------------
(1)    3/  9394D4 :                     ; GEMA/Nikona FM instruments "patches"
(1)    4/  9394D4 :                     ;
(1)    5/  9394D4 :                     ; Use the included FM_EDITOR.bin ROM to make your
(1)    6/  9394D4 :                     ; own instruments/patches
(1)    7/  9394D4 :                     ; --------------------------------------------------------
(1)    8/  9394D4 :                     
(1)    9/  9394D4 :                     ; FM_EDITOR savestate data is located at:
(1)   10/  9394D4 :                     ; $2478
(1)   11/  9394D4 :                     ;
(1)   12/  9394D4 :                     ; Sizes:
(1)   13/  9394D4 :                     ; Normal FM ins: $20
(1)   14/  9394D4 :                     ; Special FM ins: $28
(1)   15/  9394D4 :                     ;
(1)   16/  9394D4 :                     ; REGISTER FORMAT:
(1)   17/  9394D4 :                     ; dc.b $30,$34,$38,$3C
(1)   18/  9394D4 :                     ; dc.b $40,$44,$48,$4C
(1)   19/  9394D4 :                     ; dc.b $50,$54,$58,$5C
(1)   20/  9394D4 :                     ; dc.b $60,$64,$68,$6C
(1)   21/  9394D4 :                     ; dc.b $70,$74,$78,$7C
(1)   22/  9394D4 :                     ; dc.b $80,$84,$88,$8C
(1)   23/  9394D4 :                     ; dc.b $90,$94,$98,$9C
(1)   24/  9394D4 :                     ; dc.b $B0,$B4,$22,$28
(1)   25/  9394D4 :                     ; ** Extra words for FM3 special:
(1)   26/  9394D4 :                     ; dc.w OP1,OP2,OP3,OP4
(1)   27/  9394D4 :                     ;
(1)   28/  9394D4 :                     ; $22 LFO: %0000evvv
(1)   29/  9394D4 :                     ; e - Enable
(1)   30/  9394D4 :                     ; v - Value
(1)   31/  9394D4 :                     ;
(1)   32/  9394D4 :                     ; $28 KEYS: %oooo0000
(1)   33/  9394D4 :                     ; o - Operators 4-1
(1)   34/  9394D4 :                     
(1)   35/  9394D4 :                     FmIns_Organ2:
(1)   36/  9394D4 :                     		binclude "sound/instr/fm/organ2.gsx",$2478,$20
(1)   37/  9394F4 :                     FmIns_Organ2a:
(1)   38/  9394F4 :                     		binclude "sound/instr/fm/organ2a.gsx",$2478,$20
(1)   39/  939514 :                     
(1)   40/  939514 :                     ; FM3 Special
(1)   41/  939514 :                     FmIns_Fm3_Explosion:
(1)   42/  939514 :                     		binclude "sound/instr/fm/OLD/fm3_sfx_boomworm.gsx",$2478,$28
(1)   43/  93953C :                     FmIns_Sp_OpenHat:
(1)   44/  93953C :                     		binclude "sound/instr/fm/OLD/fm3_openhat.gsx",$2478,$28
(1)   45/  939564 :                     FmIns_Sp_ClosedHat:
(1)   46/  939564 :                     		binclude "sound/instr/fm/OLD/fm3_closedhat.gsx",$2478,$28
(1)   47/  93958C :                     FmIns_Sp_Cowbell:
(1)   48/  93958C :                     		binclude "sound/instr/fm/OLD/fm3_cowbell.gsx",$2478,$28
(1)   49/  9395B4 :                     ; BASS
(1)   50/  9395B4 :                     FmIns_Bass_1:
(1)   51/  9395B4 :                     		binclude "sound/instr/fm/OLD/bass_low.gsx",$2478,$20
(1)   52/  9395D4 :                     FmIns_Bass_2:
(1)   53/  9395D4 :                     		binclude "sound/instr/fm/OLD/bass_strong.gsx",$2478,$20
(1)   54/  9395F4 :                     FmIns_Bass_donna:
(1)   55/  9395F4 :                     		binclude "sound/instr/fm/OLD/bass_feellove.gsx",$2478,$20
(1)   56/  939614 :                     FmIns_Bass_groove:
(1)   57/  939614 :                     		binclude "sound/instr/fm/OLD/bass_groove.gsx",$2478,$20
(1)   58/  939634 :                     FmIns_Bass_groove_2:
(1)   59/  939634 :                     		binclude "sound/instr/fm/OLD/bass_groove_2.gsx",$2478,$20
(1)   60/  939654 :                     FmIns_Bass_groove_gem:
(1)   61/  939654 :                     		binclude "sound/instr/fm/OLD/bass_groove_gem.gsx",$2478,$20
(1)   62/  939674 :                     FmIns_Bass_italo:
(1)   63/  939674 :                     		binclude "sound/instr/fm/OLD/bass_italo.gsx",$2478,$20
(1)   64/  939694 :                     FmIns_Bass_duck:
(1)   65/  939694 :                     		binclude "sound/instr/fm/OLD/bass_duck.gsx",$2478,$20
(1)   66/  9396B4 :                     FmIns_Bass_4:
(1)   67/  9396B4 :                     		binclude "sound/instr/fm/OLD/bass_4.gsx",$2478,$20
(1)   68/  9396D4 :                     FmIns_Bass_8:
(1)   69/  9396D4 :                     		binclude "sound/instr/fm/OLD/bass_8.gsx",$2478,$20
(1)   70/  9396F4 :                     FmIns_Bass_club:
(1)   71/  9396F4 :                     		binclude "sound/instr/fm/OLD/OLD_bass_club.gsx",$2478,$20
(1)   72/  939714 :                     FmIns_Bass_calm:
(1)   73/  939714 :                     		binclude "sound/instr/fm/OLD/bass_calm.gsx",$2478,$20
(1)   74/  939734 :                     FmIns_Bass_low_1:
(1)   75/  939734 :                     		binclude "sound/instr/fm/OLD/bass_low_1.bin"
(1)   76/  939754 :                     FmIns_Bass_Oil:
(1)   77/  939754 :                     		binclude "sound/instr/fm/OLD/bass_oil.gsx",$2478,$20
(1)   78/  939774 :                     
(1)   79/  939774 :                     ; PIANO
(1)   80/  939774 :                     FmIns_PianoM1:
(1)   81/  939774 :                     		binclude "sound/instr/fm/OLD/piano_m1.gsx",$2478,$20
(1)   82/  939794 :                     FmIns_Piano_Aqua:
(1)   83/  939794 :                     		binclude "sound/instr/fm/OLD/piano_aqua.gsx",$2478,$20
(1)   84/  9397B4 :                     FmIns_Piano_Hard:
(1)   85/  9397B4 :                     		binclude "sound/instr/fm/OLD/piano_hard.bin"
(1)   86/  9397D4 :                     ; FmIns_Piano_m1:
(1)   87/  9397D4 :                     ; 		binclude "sound/instr/fm/OLD/piano_m1.gsx",$2478,$20
(1)   88/  9397D4 :                     
(1)   89/  9397D4 :                     
(1)   90/  9397D4 :                     FmIns_Synth_Plus:
(1)   91/  9397D4 :                     		binclude "sound/instr/fm/OLD/OLD_synthplus.gsx",$2478,$20
(1)   92/  9397F4 :                     
(1)   93/  9397F4 :                     FmIns_Trumpet_1:
(1)   94/  9397F4 :                     		binclude "sound/instr/fm/OLD/OLD_trumpet_1.gsx",$2478,$20
(1)   95/  939814 :                     FmIns_Trumpet_carnival:
(1)   96/  939814 :                     		binclude "sound/instr/fm/OLD/OLD_trumpet_carnivl.gsx",$2478,$20
(1)   97/  939834 :                     
(1)   98/  939834 :                     
(1)   99/  939834 :                     FmIns_brass_eur:
(1)  100/  939834 :                     		binclude "sound/instr/fm/OLD/OLD_brass_eur.gsx",$2478,$20
(1)  101/  939854 :                     FmIns_Brass_Puy:
(1)  102/  939854 :                     		binclude "sound/instr/fm/OLD/brass_puy.gsx",$2478,$20
(1)  103/  939874 :                     
(1)  104/  939874 :                     
(1)  105/  939874 :                     FmIns_Organ_Ito:
(1)  106/  939874 :                     		binclude "sound/instr/fm/OLD/organ_ito.gsx",$2478,$20
(1)  107/  939894 :                     FmIns_Ding_Baseball:
(1)  108/  939894 :                     		binclude "sound/instr/fm/OLD/ding_baseball.gsx",$2478,$20
(1)  109/  9398B4 :                     FmIns_DrumKick_gem:
(1)  110/  9398B4 :                     		binclude "sound/instr/fm/OLD/drum_kick_gem.gsx",$2478,$20
(1)  111/  9398D4 :                     
(1)  112/  9398D4 :                     
(1)  113/  9398D4 :                     FmIns_Trumpet_2:
(1)  114/  9398D4 :                     		binclude "sound/instr/fm/OLD/trumpet_2.gsx",$2478,$20
(1)  115/  9398F4 :                     FmIns_Trumpet_puy:
(1)  116/  9398F4 :                     		binclude "sound/instr/fm/OLD/trumpet_puy.gsx",$2478,$20
(1)  117/  939914 :                     FmIns_Marimba:
(1)  118/  939914 :                     		binclude "sound/instr/fm/OLD/marimba.gsx",$2478,$20
(1)  119/  939934 :                     
(1)  120/  939934 :                     FmIns_Ding_toy:
(1)  121/  939934 :                     		binclude "sound/instr/fm/OLD/ding_toy.gsx",$2478,$20
(1)  122/  939954 :                     
(1)  123/  939954 :                     FmIns_Flaute_cave:
(1)  124/  939954 :                     		binclude "sound/instr/fm/OLD/flaute_sea.gsx",$2478,$20
(1)  125/  939974 :                     FmIns_Banjo_puy:
(1)  126/  939974 :                     		binclude "sound/instr/fm/OLD/banjo_puy.gsx",$2478,$20
(1)  127/  939994 :                     FmIns_PSynth_plus:
(1)  128/  939994 :                     		binclude "sound/instr/fm/OLD/psynth_plus.gsx",$2478,$20
(1)  129/  9399B4 :                     FmIns_Ding_1:
(1)  130/  9399B4 :                     		binclude "sound/instr/fm/OLD/ding_gem.gsx",$2478,$20
(1)  131/  9399D4 :                     FmIns_Trombone_gem:
(1)  132/  9399D4 :                     		binclude "sound/instr/fm/OLD/trombone_gem.gsx",$2478,$20
(1)  133/  9399F4 :                     FmIns_HBeat_tom:
(1)  134/  9399F4 :                     		binclude "sound/instr/fm/OLD/nadia_tom.gsx",$2478,$20
(1)  135/  939A14 :                     FmIns_Guitar_bball:
(1)  136/  939A14 :                     		binclude "sound/instr/fm/OLD/guitar_bball.gsx",$2478,$20
(1)  137/  939A34 :                     
(1)  138/  939A34 :                     FmIns_Hats_1:
(1)  139/  939A34 :                     		binclude "sound/instr/fm/OLD/fm_hats_spot.bin"
(1)  140/  939A54 :                     FmIns_Hats_closed:
(1)  141/  939A54 :                     		binclude "sound/instr/fm/OLD/hats_closed.gsx",$2478,$20
(1)  142/  939A74 :                     FmIns_ClosedHat:
(1)  143/  939A74 :                     		binclude "sound/instr/fm/OLD/hats_closed.gsx",$2478,$20
(1)  144/  939A94 :                     
(1)  145/  939A94 :                     FmIns_Sewer_1:
(1)  146/  939A94 :                     		binclude "sound/instr/fm/OLD/sewer_1.bin"
(1)  147/  939AB4 :                     
(1)  148/  939AB4 :                     
(1)  149/  939AB4 :                     FmIns_Ambient_dark:
(1)  150/  939AB4 :                     		binclude "sound/instr/fm/OLD/ambient_dark.gsx",$2478,$20
(1)  151/  939AD4 :                     FmIns_Ambient_spook:
(1)  152/  939AD4 :                     		binclude "sound/instr/fm/OLD/ambient_spook.gsx",$2478,$20
(1)  153/  939AF4 :                     FmIns_Ambient_3:
(1)  154/  939AF4 :                     		binclude "sound/instr/fm/OLD/ambient_3.gsx",$2478,$20
(1)  155/  939B14 :                     
(1)  156/  939B14 :                     
(1)  157/  939B14 :                     ; FmIns_Guitar_bball:
(1)  158/  939B14 :                     ; 		binclude "sound/instr/fm/guitar_bball.gsx",$2478,$20
(1)  159/  939B14 :                     
     414/  939B14 :                     		include "sound/smpl_dac.asm"		; (MCD/CD32X ONLY) GEMA: DAC samples
(1)    1/  939B14 :                     ; ====================================================================
(1)    2/  939B14 :                     ; --------------------------------------------------------
(1)    3/  939B14 :                     ; GEMA/Nikona DAC instruments
(1)    4/  939B14 :                     ;
(1)    5/  939B14 :                     ; This must be located at the 68k's 900000 area.
(1)    6/  939B14 :                     ; ** 68K BANK 0 only **
(1)    7/  939B14 :                     ;
(1)    8/  939B14 :                     ; BASE Samplerate is at 16000hz
(1)    9/  939B14 :                     ; --------------------------------------------------------
(1)   10/  939B14 :                     
(1)   11/  939B14 :                     	align $8000
(1)   12/  940000 :                     
(1)   13/  940000 :                     ; --------------------------------------------------------
(1)   14/  940000 :                     
(1)   15/  940000 :                     DacIns_Nadie:
(1)   16/  940000 : (MACRO)              	gSmpHead .end-.start,0
(1)   16/  940000 : B4DF 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   16/  940003 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   17/  940006 :                     .start:	binclude "sound/instr/smpl/nadie.wav",$2C
(1)   18/  94DFBA :                     .end:
(1)   19/  94DFBA :                     DacIns_Kick_techno:
(1)   20/  94DFBA : (MACRO)              	gSmpHead .end-.start,0
(1)   20/  94DFBA : 9C06 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   20/  94DFBD : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   21/  94DFC0 :                     .start:	binclude "sound/instr/smpl/ST-72_kick.wav",$2C
(1)   22/  94E65C :                     .end:
(1)   23/  94E65C :                     DacIns_Snare_techno:
(1)   24/  94E65C : (MACRO)              	gSmpHead .end-.start,0
(1)   24/  94E65C : F220 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   24/  94E65F : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   25/  94E662 :                     .start:	binclude "sound/instr/smpl/ST-79_snare.wav",$2C
(1)   26/  950754 :                     .end:
(1)   27/  950754 :                     DacIns_Kick_wegot:
(1)   28/  950754 : (MACRO)              	gSmpHead .end-.start,0
(1)   28/  950754 : 7407 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   28/  950757 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   29/  95075A :                     .start:	binclude "sound/instr/smpl/wegot_kick.wav",$2C
(1)   30/  950ECE :                     .end:
(1)   31/  950ECE :                     
     415/  950ECE :                     mdbank0_e:
     416/  950ECE : (MACRO)              	data_bkend MCD_DBANK0,MCD_DBANK0_e,mdbank0_e-mdbank0
     416/  950ECE :                     
     416/   50ECE :                                     dephase
     416/   50ECE :  (MACRO-2)                           report "THIS 68K DATA BANK at $900000",MDBANK0_E-MDBANK0,$100000
     417/   50ECE :                     
     418/   50ECE :                     ; --------------------------------------------------------
     419/   50ECE :                     ; BANK 1
     420/   50ECE :                     ; --------------------------------------------------------
     421/   50ECE :                     
     422/   50ECE :                     ; 	data_bank MCD_DBANK1,-1
     423/   50ECE :                     ; 		org $200000-4
     424/   50ECE :                     ; 		dc.b "BNK1"
     425/   50ECE :                     ; 	data_bank_e MCD_DBANK1_e
     426/   50ECE :                     
     427/   50ECE :                     ; --------------------------------------------------------
     428/   50ECE :                     ; BANK 2
     429/   50ECE :                     ; --------------------------------------------------------
     430/   50ECE :                     
     431/   50ECE :                     ; 	data_bank MCD_DBANK2,-1
     432/   50ECE :                     ; 		org $300000-4
     433/   50ECE :                     ; 		dc.b "BNK2"
     434/   50ECE :                     ; 	data_bank_e MCD_DBANK2_e
     435/   50ECE :                     
     436/   50ECE :                     ; --------------------------------------------------------
     437/   50ECE :                     ; BANK 3
     438/   50ECE :                     ; --------------------------------------------------------
     439/   50ECE :                     
     440/   50ECE :                     ; 	data_bank MCD_DBANK3,-1
     441/   50ECE :                     ; 		org $400000-4
     442/   50ECE :                     ; 		dc.b "BNK3"
     443/   50ECE :                     ; 	data_bank_e MCD_DBANK3_e
     444/   50ECE :                     
     445/   50ECE :                     ; ====================================================================
     446/   50ECE :                     ; ----------------------------------------------------------------
     447/   50ECE :                     ; 32X/CD32X ONLY
     448/   50ECE :                     ;
     449/   50ECE :                     ; SDRAM DATA packages for each screen mode
     450/   50ECE :                     ;
     451/   50ECE :                     ; Usage:
     452/   50ECE :                     ; sdram_bank START_LABEL,END_LABEL
     453/   50ECE :                     ; (includes and bincludes)
     454/   50ECE :                     ; sdram_bank_e START_LABEL,END_LABEL
     455/   50ECE :                     ; ----------------------------------------------------------------
     456/   50ECE :                     
     457/   50ECE :                     ; ---------------------------------------------
     458/   50ECE :                     ; DEFAULT
     459/   50ECE :                     ; ---------------------------------------------
     460/   50ECE :                     
     461/   50ECE : (MACRO)              	sdram_bkset MARSDATA_DEFAULT,MARSDATA_DEFAULT_e
     461/   50ECE :                                     align 4
     461/  8D0ED0 :                                     phase $880000+*
     461/  8D0ED0 :                     ; MARSDATA_DEFAULT:
     461/  8D0ED0 : =$8D0ED0             MARSDATA_DEFAULT label *
     461/   50ED0 :                                     dephase
     461/   50ED0 : 0001 1808                           dc.l MARSDATA_DEFAULT_E-MARSDATA_DEFAULT
     461/ 6029CC0 :                                     phase SH2_USER_DATA
     462/ 6029CC0 :                     	include "game/screen_0/data_mgfx.asm"
(1)    1/ 6029CC0 :                     ; ====================================================================
(1)    2/ 6029CC0 :                     ; ----------------------------------------------------------------
(1)    3/ 6029CC0 :                     ; Put your 32X graphics here, indexed or direct
(1)    4/ 6029CC0 :                     ;
(1)    5/ 6029CC0 :                     ; These are located on the SH2's ROM area, this will be gone
(1)    6/ 6029CC0 :                     ; if RV is set to 1
(1)    7/ 6029CC0 :                     ;
(1)    8/ 6029CC0 :                     ; Labels MUST be aligned by 4
(1)    9/ 6029CC0 :                     ; ----------------------------------------------------------------
(1)   10/ 6029CC0 :                     
(1)   11/ 6029CC0 :                     		align 4
(1)   12/ 6029CC0 :                     ; ArtMars_Sabrina:
(1)   13/ 6029CC0 :                     ; 		binclude "game/screen_0/data/objects/mars/sabrina/sabrina_art.bin"
(1)   14/ 6029CC0 :                     ; 		align 4
(1)   15/ 6029CC0 :                     ArtMars_TEST:
(1)   16/ 6029CC0 :                     		binclude "game/screen_0/data/maps/mars/test/data_art.bin"
(1)   17/ 603B4C0 :                     		align 4
(1)   18/ 603B4C0 :                     
(1)   19/ 603B4C0 :                     
(1)   20/ 603B4C0 :                     
     463/ 603B4C0 : (MACRO)              	sdram_bkend MARSDATA_DEFAULT,MARSDATA_DEFAULT_e
     463/   626D4 :                                     dephase
     463/   626D4 :                                     align 8 ; <-- DREQ alignment
     463/  8E26D8 :                                     phase $880000+*
     463/  8E26D8 : =$8E26D8             MARSDATA_DEFAULT_E label *
     463/   626D8 :                                     dephase
     463/   626D8 :                     
     463/   626D8 :  (MACRO-2)                           report "SH2 SDRAM DATA: MARSDATA_DEFAULT",MARSDATA_DEFAULT_E-MARSDATA_DEFAULT,(CS3|$40000)-SH2_USER_DATA
     464/   626D8 :                     
     465/   626D8 :                     ; ====================================================================
     466/   626D8 :                     ; ----------------------------------------------------------------
     467/   626D8 :                     ; Cartridge DMA graphics data
     468/   626D8 :                     ;
     469/   626D8 :                     ; BANK-free on 32X Cartridge
     470/   626D8 :                     ; ----------------------------------------------------------------
     471/   626D8 :                     
     473/   626D8 :                     		include "game/screen_0/data_dma.asm"
(1)    1/   626D8 :                     ; ====================================================================
(1)    2/   626D8 :                     ; ----------------------------------------------------------------
(1)    3/   626D8 :                     ; DMA Graphics for this screen
(1)    4/   626D8 :                     ; ----------------------------------------------------------------
(1)    5/   626D8 :                     
(1)    6/   626D8 :                     ASCII_FONT:	binclude "system/md/data/font.bin"
(1)    7/   632D8 :                     
(1)    8/   632D8 :                     ; ----------------------------------------------------------------
(1)    9/   632D8 :                     ; Commmon graphics
(1)   10/   632D8 :                     ; ----------------------------------------------------------------
(1)   11/   632D8 :                     
(1)   12/   632D8 :                     ART_TEST:
(1)   13/   632D8 :                     		binclude "game/screen_0/data/maps/md/test/md_art.bin"
(1)   14/   6BA58 :                     ART_TEST_e:
(1)   15/   6BA58 :                     		align 2
(1)   16/   6BA58 :                     
(1)   17/   6BA58 :                     ; ----------------------------------------------------------------
(1)   18/   6BA58 :                     ; Object graphics
(1)   19/   6BA58 :                     ; ----------------------------------------------------------------
(1)   20/   6BA58 :                     
(1)   21/   6BA58 :                     Art_Sisi:	binclude "game/screen_0/data/objects/md/sisi/sisi_art.bin"
(1)   22/   6C038 :                     Art_Sisi_e:
(1)   23/   6C038 :                     		align 2
(1)   24/   6C038 :                     
     475/   6C038 :                     
     476/   6C038 :                     ; ====================================================================
     477/   6C038 :                     ; ---------------------------------------------
     478/   6C038 :                     ; End
     479/   6C038 :                     ; ---------------------------------------------
     480/   6C038 :                     
     481/   6C038 :                     ROM_END:
     486/   6C038 :                     		align $8000			; Cartridge padding
     488/   70000 :                     
 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 3 - 02/23/2024 10:45:10 PM


  Symbol Table (* = unused):
  --------------------------

 ADAPTER :                        0 - | *ADEN :                           2 - |
 ALV :                           24 - |
*ARCHITECTURE :                                      "x86_64-unknown-linux" - |
 ARTMARS_TEST :             6029CC0 C |  ART_SISI :                   6BA58 C |
 ART_SISI_E :                 6C038 C | *ART_TEST :                   632D8 C |
*ART_TEST_E :                 6BA58 C |  ASCII_FONT :                 626D8 C |
 ASCII_PAL :       FFFFFFFFFFFF02E2 C |  ATK :                            8 - |
*BIGENDIAN :                      0 - | *BITBGON :                        7 - |
*BITCLICKL :                      0 - | *BITCLICKM :                      2 - |
*BITCLICKR :                      1 - | *BITCLICKS :                      3 - |
 BITDISPENBL :                    6 - |  BITDMA :                         1 - |
 BITDMAENBL :                     4 - | *BITDRWD :                        2 - |
*BITDRWL :                        1 - | *BITDRWR :                        0 - |
*BITDRWU :                        3 - | *BITFIFOE :                       9 - |
*BITFIFOF :                       8 - | *BITHBLK :                        2 - |
*BITHINTENBL :                    4 - | *BITHVSTOP :                      1 - |
*BITJOYA :                        6 - |  BITJOYB :                        4 - |
 BITJOYC :                        5 - |  BITJOYDOWN :                     1 - |
 BITJOYLEFT :                     2 - | *BITJOYMODE :                     B - |
 BITJOYRIGHT :                    3 - |  BITJOYSTART :                    7 - |
 BITJOYUP :                       0 - | *BITJOYX :                        A - |
*BITJOYY :                        9 - | *BITJOYZ :                        8 - |
 BITMAPMD :                       1 - | *BITMARSBG :                      6 - |
 BITOBJ_FLIPH :                   0 - |  BITOBJ_FLIPV :                   1 - |
 BITOBJ_MARS :                    7 - | *BITODD :                         4 - |
*BITPAL :                         0 - | *BITSPRCOL :                      5 - |
*BITSPROVR :                      6 - | *BITV30 :                         3 - |
 BITVBLK :                        3 - | *BITVINT :                        7 - |
*BITVINTENBL :                    5 - | *BITWRAMMODE :                    2 - |
*BRANCHEXT :                      0 - |  CACHE_MASTER :             6001380 C |
*CACHE_MASTER.END :              18 C |  CACHE_MASTER_E :           6001398 C |
 CACHE_SLAVE :              6001398 C |  CACHE_SLAVE_E :            60015D8 C |
*CART :                           1 - | *CASESENSITIVE :                  0 - |
 CDRAMDST :                      31 C |  CDRAMLEN :                      30 C |
 CDRAMSRC :                      33 C |  CDRAMSRCB :                     35 C |
 CHECK_THISRAM :   FFFFFFFFFFFFA000 C |  CHIP_ENV :                    1281 C |
 CHIP_ENV.ATKEND :             1307 C | *CHIP_ENV.ATKZERO :            130A C |
 CHIP_ENV.CHK2 :               1310 C |  CHIP_ENV.CHK4 :               1345 C |
 CHIP_ENV.CKOF :               12A8 C |  CHIP_ENV.CKON :               12BB C |
*CHIP_ENV.DECTMR :             1314 C |  CHIP_ENV.DKADD :              132E C |
 CHIP_ENV.DKSAV :              1336 C |  CHIP_ENV.DKYEND :             133B C |
 CHIP_ENV.DO_NFREQ :           139A C |  CHIP_ENV.ENVPROC :            12D9 C |
 CHIP_ENV.KILLENV :            135B C | *CHIP_ENV.NBLOCK :             12D9 C |
 CHIP_ENV.NORMAL :             1395 C |  CHIP_ENV.NOUPD :              13DB C |
 CHIP_ENV.NSKIP :              12D0 C |  CHIP_ENV.SILNC_3 :            1391 C |
 CHIP_ENV.VEDLP :              1363 C |  CHIP_ENV.VLMUCH :             13C7 C |
 CHIP_ENV.VLOOP :              1290 C |  CHIP_ENV.VONLY :              13BD C |
 CHNL_CHIP :                      1 - |  CHNL_EFFARG :                    6 - |
 CHNL_EFFID :                     5 - |  CHNL_FLAGS :                     0 - |
 CHNL_INS :                       3 - |  CHNL_NOTE :                      2 - |
 CHNL_TYPE :                      7 - |  CHNL_VOL :                       4 - |
*CLICKL :                         2 - | *CLICKM :                         4 - |
*CLICKR :                         1 - | *CLICKS :                         8 - |
 CMDINTCLR :                     1A - |  CMDIRQ_ON :                      2 - |
 COM :                            0 - |  COMM0 :                         20 - |
 COMM1 :                         21 - | *COMM10 :                        2A - |
*COMM11 :                        2B - |  COMM12 :                        2C - |
*COMM13 :                        2D - |  COMM14 :                        2E - |
*COMM15 :                        2F - |  COMM2 :                         22 - |
*COMM3 :                         23 - |  COMM4 :                         24 - |
*COMM5 :                         25 - | *COMM6 :                         26 - |
*COMM7 :                         27 - |  COMM8 :                         28 - |
*COMM9 :                         29 - |  COMMZFIFO :                     40 C |
 COMMZREAD :                   1F85 C |  COMMZROMBLK :                   2F C |
 COMMZWRITE :                    2E C | *COMPMODE :                       0 - |
*CONSTPI :        3.141592653589793 - |  CONTROLLER_1 :    FFFFFFFFFFFFC004 - |
*CONTROLLER_2 :    FFFFFFFFFFFFC014 - | *CS0 :                            0 - |
*CS1 :                      2000000 - |  CS2 :                      4000000 - |
 CS3 :                      6000000 - | *CURRPADDING :                    0 - |
 CURRTICKBITS :                1F96 C | *CUSTOM :                         0 - |
 CYCLE :                         32 - | *DACINS_KICK_TECHNO :        94DFBA C |
 DACINS_KICK_TECHNO.END :    94E65C C |  DACINS_KICK_TECHNO.START :  94DFC0 C |
 DACINS_KICK_WEGOT :         950754 C |  DACINS_KICK_WEGOT.END :     950ECE C |
 DACINS_KICK_WEGOT.START :   95075A C |  DACINS_NADIE :              940000 C |
 DACINS_NADIE.END :          94DFBA C |  DACINS_NADIE.START :        940006 C |
*DACINS_SNARE_TECHNO :       94E65C C |  DACINS_SNARE_TECHNO.END :   950754 C |
 DACINS_SNARE_TECHNO.START : 94E662 C |  DAC_FILL :                      20 C |
 DAC_ME :                         8 C |  DAC_OFF :                     1416 C |
 DAC_ON :                      1401 C |  DAC_PLAY :                    142B C |
 DAC_REFILL :                  145F C |  DAC_REFILL.DACFILL_END :      151E C |
 DAC_REFILL.DACFILL_LOOP :     14D7 C |  DAC_REFILL.DACFILL_RET :      1521 C |
 DAC_REFILL.DAC_OVER :         14AD C |  DATE :                "02/23/2024" - |
 DDACCNTR :                    1F9B C |  DDACFIFOMID :                 1F97 C |
 DDACPNTR :                    1F98 C | *DISPENBL :                      40 - |
 DKY :                            C - | *DMAENBL :                       10 - |
*DOTTEDSTRUCTS :                  0 - |  DREQCTL :                        6 - |
 DREQDEST :                       C - |  DREQFIFO :                      12 - |
 DREQLEN :                       10 - | *DREQSOURCE :                     8 - |
 DREQ_PALETTE :                   0 C |  DREQ_SCRLBUFF :                600 C |
 DREQ_SCRLDATA :                200 C |  DREQ_SUPERSPR :                610 C |
 DRV_LOOP :                      54 C |  DRV_LOOP.CMND_0 :               ED C |
 DRV_LOOP.CMND_1 :               F0 C |  DRV_LOOP.CMND_2 :              109 C |
 DRV_LOOP.CMND_3 :              150 C |  DRV_LOOP.CMND_5 :              181 C |
 DRV_LOOP.CMND_6 :              1C1 C |  DRV_LOOP.CMND_7 :              204 C |
 DRV_LOOP.CMND_RDSLOT :         215 C |  DRV_LOOP.FOUND_F :             24C C |
 DRV_LOOP.GETCBYTEL :            C0 C |  DRV_LOOP.GRAB_ARG :             BE C |
 DRV_LOOP.LIST :                 DD C |  DRV_LOOP.NEITHER :              94 C |
 DRV_LOOP.NEXT :                129 C |  DRV_LOOP.NEXT_CMD :             9B C |
 DRV_LOOP.NEXT_F :              22A C |  DRV_LOOP.NEXT_FV :             1A1 C |
 DRV_LOOP.NEXT_MV :             1E1 C |  DRV_LOOP.NOBEATS :              7B C |
 DRV_LOOP.NOTICKS :              6E C |  DRV_LOOP.SRCH_DEL :            16D C |
 DRV_LOOP.SRCH_FOR :            228 C |  DRV_LOOP.SRCH_FVOL :           19E C |
 DRV_LOOP.SRCH_MODE :           127 C |  DRV_LOOP.SRCH_VOL :            1DE C |
 DRV_LOOP.WRTTO_DEL :           17A C |  DRV_LOOP.WRTTO_FVOL :          1B8 C |
 DRV_LOOP.WRTTO_SLOT :          142 C |  DRV_LOOP.WRTTO_VOL :           1F8 C |
 DTBL_FROMMUL :                 899 C |  DTBL_FROMMUL.CHNL_ULNK :      107D C |
 DTBL_FROMMUL.CHNL_ULNKCUT :   1077 C |  DTBL_FROMMUL.CHNL_ULNKOFF :   107D C |
 DTBL_FROMMUL.COMN_PANLIST :    E25 C |  DTBL_FROMMUL.DAC_CUT :         BEA C |
 DTBL_FROMMUL.DAC_NOTE :        BE1 C |  DTBL_FROMMUL.DAC_OFF :         BF0 C |
 DTBL_FROMMUL.DAC_PAN :         BD1 C |  DTBL_FROMMUL.DAC_PITCH :       BF3 C |
 DTBL_FROMMUL.D_CONT :          DDE C |  DTBL_FROMMUL.EFFC :            D4B C |
 DTBL_FROMMUL.EFFC_D :          D66 C |  DTBL_FROMMUL.EFFC_E :          DA9 C |
 DTBL_FROMMUL.EFFC_F :          DBE C |  DTBL_FROMMUL.EFFC_X :          DDF C |
 DTBL_FROMMUL.FINE_DOWN :       D81 C |  DTBL_FROMMUL.FINE_UP :         D95 C |
 DTBL_FROMMUL.FMSPC_SET :       A4D C |  DTBL_FROMMUL.FM_CINDX :        B7C C |
 DTBL_FROMMUL.FM_CUT :          AC7 C |  DTBL_FROMMUL.FM_HASVOL :      1011 C |
 DTBL_FROMMUL.FM_KEYOFF :       AD0 C |  DTBL_FROMMUL.FM_OFF :          AC1 C |
 DTBL_FROMMUL.FM_SETFREQ :      AEF C |  DTBL_FROMMUL.FM_SETRLIST :     F28 C |
 DTBL_FROMMUL.FM_TLOFF :        AD8 C |  DTBL_FROMMUL.FM_WRTALPAN :     B84 C |
 DTBL_FROMMUL.FM_WRTLVOL :      B06 C |  DTBL_FROMMUL.FND_OCT :        1062 C |
 DTBL_FROMMUL.FROM_PSGN :       987 C |  DTBL_FROMMUL.GET_OCT :        1057 C |
 DTBL_FROMMUL.INST :            E56 C |  DTBL_FROMMUL.INS_DAC :         F38 C |
 DTBL_FROMMUL.INS_FM :          EB7 C |  DTBL_FROMMUL.INS_PCM :         F8C C |
 DTBL_FROMMUL.INS_PSG :         E81 C |  DTBL_FROMMUL.INS_PSGN :        E7B C |
 DTBL_FROMMUL.INS_PWM :         FC4 C | *DTBL_FROMMUL.INVL_INS :        E7A C |
 DTBL_FROMMUL.KEEP_TLMX :       B71 C |  DTBL_FROMMUL.KYCUT_PSG :       9DB C |
 DTBL_FROMMUL.KYCUT_PSGN :      9D8 C |  DTBL_FROMMUL.KYOFF_PSG :       9CE C |
 DTBL_FROMMUL.KYOFF_PSGN :      9CB C |  DTBL_FROMMUL.KYPSGN_HATOFF :   9E5 C |
 DTBL_FROMMUL.LINKED :          903 C |  DTBL_FROMMUL.MK_DAC :          BBA C |
 DTBL_FROMMUL.MK_FM :           9EC C |  DTBL_FROMMUL.MK_FMSPC :        A61 C |
 DTBL_FROMMUL.MK_LIST :         942 C |  DTBL_FROMMUL.MK_PCM :          C19 C |
 DTBL_FROMMUL.MK_PSG :          96E C |  DTBL_FROMMUL.MK_PSGN :         950 C |
 DTBL_FROMMUL.MK_PWM :          C9F C |  DTBL_FROMMUL.MP_RESET :        C69 C |
 DTBL_FROMMUL.NEW_ROMDAT :      EEB C | *DTBL_FROMMUL.NOFM_NOTE :       A60 C |
 DTBL_FROMMUL.NORM_DOWN :       D7F C |  DTBL_FROMMUL.NORM_UP :         D97 C |
 DTBL_FROMMUL.NOTE :           1007 C |  DTBL_FROMMUL.NOT_DAC :         A0B C |
 DTBL_FROMMUL.NOT_DSPC :        A21 C |  DTBL_FROMMUL.NO_LFO :          BB9 C |
 DTBL_FROMMUL.N_FM :           104D C |  DTBL_FROMMUL.N_INDX :         1039 C |
 DTBL_FROMMUL.N_PSGN :         1048 C |  DTBL_FROMMUL.N_STFREQ :       103A C |
 DTBL_FROMMUL.PAN_MCD :         E0F C |  DTBL_FROMMUL.PCM_CUT :         C49 C |
 DTBL_FROMMUL.PCM_EFFC :        C58 C |  DTBL_FROMMUL.PCM_NOTE :        C5F C |
 DTBL_FROMMUL.PCM_OFF :         C42 C |  DTBL_FROMMUL.PCM_PANLIST :     E2D C |
 DTBL_FROMMUL.PCM_SEND :        C6E C |  DTBL_FROMMUL.PCM_SETCOFF :     C4E C |
 DTBL_FROMMUL.PSGNONE :         9C8 C |  DTBL_FROMMUL.PSG_KEYON :       9AE C |
 DTBL_FROMMUL.PWM_CUT :         CD0 C |  DTBL_FROMMUL.PWM_OFF :         CC9 C |
 DTBL_FROMMUL.PWM_SETCOFF :     CD5 C |  DTBL_FROMMUL.PWV_MUCH :        CF7 C |
 DTBL_FROMMUL.PW_EFFC :         CFB C |  DTBL_FROMMUL.PW_NOTE :         D02 C |
 DTBL_FROMMUL.PW_SEND :         D07 C |  DTBL_FROMMUL.PW_SETUP :        CDF C |
 DTBL_FROMMUL.RCYL_COM :        8EE C |  DTBL_FROMMUL.RES_PAN :         E05 C |
 DTBL_FROMMUL.SAME_PATCH :      F23 C |  DTBL_FROMMUL.SAVE_ARG :        DD3 C |
 DTBL_FROMMUL.SETPCM_FREQ :     D2B C |  DTBL_FROMMUL.SETPWM_FREQ :     D30 C |
 DTBL_FROMMUL.SET_WAVFREQ :     D33 C |  DTBL_FROMMUL.SILN_DAC :        8FA C |
 DTBL_FROMMUL.SILN_FM :         8FD C |  DTBL_FROMMUL.SILN_PCM :        8D8 C |
 DTBL_FROMMUL.SILN_PSG :        8D1 C |  DTBL_FROMMUL.SILN_PSG_N :      8CD C |
 DTBL_FROMMUL.SILN_PWM :        8E4 C |  DTBL_FROMMUL.SPCREGLIST :      AB9 C |
 DTBL_FROMMUL.TL_DOWN :         AE2 C |  DTBL_FROMMUL.VMUCH :           9BD C |
 DTBL_FROMMUL.VOLU :            E4D C |  DTBL_FROMMUL.VOL_DVLD :        DA5 C |
 DTBL_FROMMUL.WRITE_TL :        B6A C |  DTBL_FROMMUL.WR_SPC :          A9C C |
 DTBL_MULTI :                   883 C |  DTBL_SINGL :                   899 C |
 DTH :                           20 - |  DTL :                           1C - |
 DWAVEBUFF :                   1D00 C |  EMU :                            1 - |
*EXT_3 :                          C C | *EXT_4 :                          E C |
*FALSE :                          0 - | *FBVRAM_BLANK :               1FD80 - |
 FBVRAM_PATCH :               1E000 - | *FEN :                            2 - |
*FILLDATA :                       8 - | *FILLLENGTH :                     4 - |
*FILLSTART :                      6 - |  FLG :                           28 - |
 FM :                            80 - |  FMCACH_1 :                    17A6 C |
 FMCACH_2 :                    17CE C |  FMCACH_3 :                    17F6 C |
 FMCACH_4 :                    181E C |  FMCACH_5 :                    1846 C |
 FMCACH_6 :                    186E C |  FMCACH_LIST :                 15F2 C |
 FMFREQ_LIST :                 1530 C | *FMINS_AMBIENT_3 :           939AF4 C |
*FMINS_AMBIENT_DARK :        939AB4 C | *FMINS_AMBIENT_SPOOK :       939AD4 C |
*FMINS_BANJO_PUY :           939974 C | *FMINS_BASS_1 :              9395B4 C |
*FMINS_BASS_2 :              9395D4 C | *FMINS_BASS_4 :              9396B4 C |
*FMINS_BASS_8 :              9396D4 C | *FMINS_BASS_CALM :           939714 C |
*FMINS_BASS_CLUB :           9396F4 C | *FMINS_BASS_DONNA :          9395F4 C |
 FMINS_BASS_DUCK :           939694 C | *FMINS_BASS_GROOVE :         939614 C |
*FMINS_BASS_GROOVE_2 :       939634 C | *FMINS_BASS_GROOVE_GEM :     939654 C |
*FMINS_BASS_ITALO :          939674 C |  FMINS_BASS_LOW_1 :          939734 C |
*FMINS_BASS_OIL :            939754 C |  FMINS_BRASS_EUR :           939834 C |
*FMINS_BRASS_PUY :           939854 C |  FMINS_CLOSEDHAT :           939A74 C |
 FMINS_DING_1 :              9399B4 C | *FMINS_DING_BASEBALL :       939894 C |
*FMINS_DING_TOY :            939934 C |  FMINS_DRUMKICK_GEM :        9398B4 C |
*FMINS_FLAUTE_CAVE :         939954 C |  FMINS_FM3_EXPLOSION :       939514 C |
*FMINS_GUITAR_BBALL :        939A14 C |  FMINS_HATS_1 :              939A34 C |
 FMINS_HATS_CLOSED :         939A54 C |  FMINS_HBEAT_TOM :           9399F4 C |
*FMINS_MARIMBA :             939914 C | *FMINS_ORGAN2 :              9394D4 C |
 FMINS_ORGAN2A :             9394F4 C | *FMINS_ORGAN_ITO :           939874 C |
*FMINS_PIANOM1 :             939774 C |  FMINS_PIANO_AQUA :          939794 C |
*FMINS_PIANO_HARD :          9397B4 C | *FMINS_PSYNTH_PLUS :         939994 C |
*FMINS_SEWER_1 :             939A94 C |  FMINS_SP_CLOSEDHAT :        939564 C |
*FMINS_SP_COWBELL :          93958C C |  FMINS_SP_OPENHAT :          93953C C |
*FMINS_SYNTH_PLUS :          9397D4 C | *FMINS_TROMBONE_GEM :        9399D4 C |
 FMINS_TRUMPET_1 :           9397F4 C | *FMINS_TRUMPET_2 :           9398D4 C |
 FMINS_TRUMPET_CARNIVAL :    939814 C | *FMINS_TRUMPET_PUY :         9398F4 C |
 FMSPECIAL :                   1F84 C |  FM_AUTOREG :                  13E7 C |
 FM_SEND_1 :                   13EB C |  FM_SEND_2 :                   13F6 C |
 FRAMECTL :                       B - | *FREEFLAG :                      3F C |
*FS :                             1 - | *FULLPMMU :                       1 - |
 GEMADMAPAUSE :    FFFFFFFFFFFF014A C |  GEMADMAPAUSEROM : FFFFFFFFFFFF0186 C |
 GEMADMARESUME :   FFFFFFFFFFFF016C C |
 GEMADMARESUMEROM :                                        FFFFFFFFFFFF01B0 C |
 GEMAFADETRACK :   FFFFFFFFFFFF0236 C |  GEMAMSTRLISTPOS :               1C C |
 GEMAPLAYTRACK :   FFFFFFFFFFFF01F8 C |  GEMASETBEATS :    FFFFFFFFFFFF026E C |
 GEMASETMASTERLIST :                                       FFFFFFFFFFFF01E2 C |
 GEMASETTRACKVOL : FFFFFFFFFFFF0252 C | *GEMASFX_ALL :               92EDAC C |
 GEMASFX_ALL.BLK :           92EDBA C |  GEMASFX_ALL.INS :           92EE80 C |
 GEMASFX_ALL.PAT :           92EDC0 C |  GEMASTOPTRACK :   FFFFFFFFFFFF021A C |
 GEMATEST :        FFFFFFFFFFFF01D2 C |  GEMATRK_ARENA1 :            92EEA8 C |
 GEMATRK_ARENA1.INS :        92EEB6 C |  GEMATRK_CRYSTAL :           934A90 C |
 GEMATRK_CRYSTAL.BLK :       934A9E C |  GEMATRK_CRYSTAL.INS :       935C9A C |
 GEMATRK_CRYSTAL.PAT :       934AA6 C |  GEMATRK_DREAM :             933340 C |
 GEMATRK_DREAM.BLK :         93334E C |  GEMATRK_DREAM.INS :         934A18 C |
 GEMATRK_DREAM.PAT :         93335B C |  GEMATRK_MOVEME :            93236B C |
 GEMATRK_MOVEME.BLK :        932379 C |  GEMATRK_MOVEME.INS :        9332A8 C |
 GEMATRK_MOVEME.PAT :        932390 C |  GEMATRK_NADIEMARS :         938266 C |
 GEMATRK_NADIEMARS.BLK :     938274 C |  GEMATRK_NADIEMARS.INST :    93948C C |
 GEMATRK_NADIEMARS.PATT :    93827C C |  GEMATRK_NADIEMCD :          936FB8 C |
 GEMATRK_NADIEMCD.BLK :      936FC6 C |  GEMATRK_NADIEMCD.INST :     93821E C |
 GEMATRK_NADIEMCD.PATT :     936FCE C |  GEMATRK_NADIEMD :           935CCA C |
 GEMATRK_NADIEMD.BLK :       935CD8 C |  GEMATRK_NADIEMD.INST :      936F70 C |
 GEMATRK_NADIEMD.PATT :      935CE0 C | *GEMATRK_TEST_0 :            92EEA8 C |
 GEMA_INIT :                   1134 C |  GEMA_INIT.END_SETUP :         119F C |
 GEMA_INIT.SETUP_LIST :        1174 C |  GEMA_INIT.ST_COPY :           1193 C |
 GEMA_LASTBANK :               1525 C |  GEMA_LASTBANK.WRITE :         152A C |
 GEMA_MASTERLIST :           92ED90 C |  GET_ROMTRCKS :                 62A C |
 GET_TICK :                    11A8 C |  GET_TICK.CTNOTICK :           11C5 C |
 GLBL_LASTORG :    FFFFFFFFFFFFD204 - |  GLBL_LASTPC :     FFFFFFFFFFFF2000 - |
*HAS64 :                          1 - | *HASDSP :                         0 - |
*HASFPU :                         0 - | *HASPMMU :                        0 - |
*HBLK :                          40 - | *HCOUNT :                         5 - |
 HEADEROUT :                   1FA4 C |  HEADEROUT_E :                 1FB2 C |
 HINTCLR :                       18 - | *HINTENBL :                      10 - |
 HINT_DEFAULT :    FFFFFFFFFFFF15C6 C | *HIRQ_ON :                        4 - |
*HVSTOP :                         2 - | *INEXTMODE :                      0 - |
 INIT_ROMTRCKS :                636 C | *INLWORDMODE :                    0 - |
*INMAXMODE :                      0 - | *INSRCMODE :                      0 - |
 INSTLISTOUT :                 1C56 C | *INSUPMODE :                      1 - |
*INTMASK :                        1 - |  INT_M_LIST :               60002A0 C |
 INT_S_LIST :               60002E0 C |  JOYA :                          40 - |
 JOYB :                          10 - |  JOYC :                          20 - |
*JOYDOWN :                        2 - | *JOYLEFT :                        4 - |
*JOYMODE :                      800 - | *JOYRIGHT :                       8 - |
*JOYSTART :                      80 - | *JOYUP :                          1 - |
*JOYX :                         400 - | *JOYY :                         200 - |
*JOYZ :                         100 - |  LCHWIDTH :                      34 - |
 LEV :                            4 - | *LISTON :                         3 - |
 LIST_VDPREGS :    FFFFFFFFFFFF02CE C |  LITERAL_F_00000000_1 :     60004C8 C |
 LITERAL_F_00000001_1 :     600066C C |  LITERAL_F_00000002_1 :     6000670 C |
 LITERAL_F_00000003_1 :     6000674 C |  LITERAL_F_00000004_1 :     600067A C |
 LITERAL_F_00000005_1 :     600067C C |  LITERAL_F_00000006_1 :     6000704 C |
 LITERAL_F_00000007_1 :     6000794 C |  LITERAL_F_00000008_1 :     6000798 C |
 LITERAL_F_00000009_1 :     600079C C |  LITERAL_F_0000000A_1 :     60008B8 C |
 LITERAL_F_0000000B_1 :     60008BC C |  LITERAL_F_0000000C_1 :     60008C4 C |
 LITERAL_F_0000000D_1 :     60008C0 C |  LITERAL_F_0000000E_1 :     6000A3A C |
 LITERAL_F_0000000F_1 :     6000A3C C |  LITERAL_F_00000010_1 :     6000A40 C |
 LITERAL_F_00000011_1 :     6000A34 C |  LITERAL_F_00000012_1 :     6000AD8 C |
 LITERAL_F_00000013_1 :     6000ADC C |  LITERAL_F_00000014_1 :     6000AFE C |
 LITERAL_F_00000015_1 :     6000AE0 C |  LITERAL_F_00000016_1 :     6000AEC C |
 LITERAL_F_00000017_1 :     6000B40 C |  LITERAL_F_00000018_1 :     6001120 C |
 LITERAL_F_00000019_1 :     6001124 C |  LITERAL_F_0000001A_1 :         110 C |
 LITERAL_L_06000000_1 :     60004AC C |  LITERAL_L_06000000_2 :     6000790 C |
 LITERAL_L_06000128_1 :     6000AD4 C |  LITERAL_L_20000000_1 :     60004B0 C |
 LITERAL_L_20004000_1 :     60004A8 C |  LITERAL_L_20004000_2 :     60006FC C |
 LITERAL_L_20004000_3 :     60007A0 C |  LITERAL_L_20004000_4 :     6000AE4 C |
 LITERAL_L_20004000_5 :     6000C08 C |  LITERAL_L_20004000_6 :     6000C98 C |
 LITERAL_L_20004012_1 :     60004B4 C |  LITERAL_L_20004016_1 :     60004BC C |
 LITERAL_L_20004016_2 :     60006F8 C |  LITERAL_L_20004018_1 :     60004B8 C |
 LITERAL_L_20004018_2 :     60006F4 C |  LITERAL_L_2000401A_1 :     60004A4 C |
 LITERAL_L_2000401A_2 :     6000660 C |  LITERAL_L_2000401C_1 :     60004A0 C |
 LITERAL_L_2000401C_2 :         108 C |  LITERAL_L_20004020_1 :     60008A4 C |
 LITERAL_L_20004021_1 :     6000B38 C |  LITERAL_L_20004022_1 :     6000378 C |
 LITERAL_L_20004024_1 :     600037C C |  LITERAL_L_20004028_1 :     6000668 C |
 LITERAL_L_2000402C_1 :     600049C C |  LITERAL_L_2000402C_2 :     60008B4 C |
 LITERAL_L_2000402C_3 :     6000AE8 C |  LITERAL_L_2000402D_1 :     60008AC C |
 LITERAL_L_2000402E_1 :     6000664 C |  LITERAL_L_2000402E_2 :     60007A4 C |
 LITERAL_L_2000402E_3 :     6000B3C C |  LITERAL_L_2000402F_1 :     6000B44 C |
 LITERAL_L_20004034_1 :         114 C |  LITERAL_L_20004038_1 :         10C C |
 LITERAL_L_20004100_1 :     60004C0 C |  LITERAL_L_20004100_2 :     60008A8 C |
 LITERAL_L_20004100_3 :     6000C9C C |  LITERAL_L_20004200_1 :     60008B0 C |
 LITERAL_L_24000000_1 :     6000A30 C |  LITERAL_L_24000000_2 :     6000CA0 C |
 LITERAL_L_24000000_3 :     6000EA8 C |  LITERAL_L_24000000_4 :     6000F04 C |
 LITERAL_L_24020000_1 :     6000F8C C |  LITERAL_L_4D5F4F4B_1 :     60004CC C |
 LITERAL_L_535F4F4B_1 :     6000708 C |
 LITERAL_L_FFFFFFFFC0000000_1 :                                     6000BB4 C |
 LITERAL_L_FFFFFFFFC00007F8_1 :                                     60004C4 C |
 LITERAL_L_FFFFFFFFC00007F8_2 :                                     6000700 C |
 LITERAL_L_FFFFFFFFC0000800_1 :                                     600078C C |
 LITERAL_L_FFFFFFFFC0000800_2 :                                     6000AD0 C |
 LITERAL_L_FFFFFFFFC0000800_3 :                                     6000BB0 C |
 LITERAL_W_0080_1 :         6000BBA C |  LITERAL_W_0080_2 :         6000CA4 C |
 LITERAL_W_0080_3 :             11A C |  LITERAL_W_00A2_1 :         6000CAC C |
 LITERAL_W_00F0_1 :         60004D6 C |  LITERAL_W_00F0_2 :         600070E C |
 LITERAL_W_00F0_3 :         6000A42 C |  LITERAL_W_00F0_4 :         6000EB0 C |
 LITERAL_W_0100_1 :         6000CA8 C |  LITERAL_W_0105_1 :         6000C0C C |
 LITERAL_W_013C_1 :         6001274 C |  LITERAL_W_0140_1 :         6000EAE C |
 LITERAL_W_0150_1 :         6000CA6 C |  LITERAL_W_0200_1 :         6000A3E C |
 LITERAL_W_0200_2 :         6000CAA C |  LITERAL_W_03FF_1 :             11C C |
 LITERAL_W_0530_1 :         60007AC C |  LITERAL_W_0530_2 :         6000AF4 C |
 LITERAL_W_059F_1 :         6000C0E C |  LITERAL_W_0600_1 :         60008C6 C |
 LITERAL_W_0600_2 :         6000A38 C |  LITERAL_W_0610_1 :         6000F90 C |
 LITERAL_W_0610_2 :         6001128 C |  LITERAL_W_07FF_1 :         6000EAC C |
 LITERAL_W_07FF_2 :         600112A C |  LITERAL_W_44E0_1 :         60004D2 C |
 LITERAL_W_44E5_1 :         60004D4 C |  LITERAL_W_4800_1 :         60007B0 C |
 LITERAL_W_4800_2 :         6000AF8 C |  LITERAL_W_5A00_1 :         6000BE8 C |
 LITERAL_W_A518_1 :         60007B4 C |  LITERAL_W_A518_2 :         6000AFC C |
 LITERAL_W_A538_1 :         6000BEA C |  LITERAL_W_FE10_1 :         60004D0 C |
 LITERAL_W_FE10_2 :         60004F4 C |  LITERAL_W_FE10_3 :         6000678 C |
 LITERAL_W_FE10_4 :         600070C C |  LITERAL_W_FE10_5 :         60007A8 C |
 LITERAL_W_FE10_6 :         6000AF0 C |  LITERAL_W_FE10_7 :             118 C |
 LITERAL_W_FE80_1 :         60007B2 C |  LITERAL_W_FE80_2 :         6000AFA C |
 LITERAL_W_FE80_3 :         6000BE6 C |  LITERAL_W_FE92_1 :         6000BB8 C |
 LITERAL_W_FE92_2 :         6000BE4 C |  LITERAL_W_FEE2_1 :         60007AA C |
 LITERAL_W_FEE2_2 :         6000AF2 C |  LITERAL_W_FEE4_1 :         60007AE C |
 LITERAL_W_FEE4_2 :         6000AF6 C | *LITR_MARSVIDEO_INIT :      6000788 C |
*MACEXP :                         7 - |  MAPMARS_TEST :              92E8C4 C |
*MAP_TEST :                  92E004 C |  MARS :                           1 - |
 MARSBLOCK :                     37 C |  MARSCD :                         0 - |
 MARSDATA_DEFAULT :          8D0ED0 C |  MARSDATA_DEFAULT_E :        8E26D8 C |
 MARSGBL_DREQREAD :               8 C |  MARSGBL_DREQWRITE :              C C |
*MARSGBL_FREEW1 :                 6 C |  MARSGBL_SCRL_ART :              28 C |
 MARSGBL_SCRL_DRWALL :           2C C |  MARSGBL_SCRL_DRWD :             38 C |
 MARSGBL_SCRL_DRWL :             34 C |  MARSGBL_SCRL_DRWR :             30 C |
 MARSGBL_SCRL_DRWU :             3C C |  MARSGBL_SCRL_FBOUT :            4C C |
 MARSGBL_SCRL_FBTL :             20 C |  MARSGBL_SCRL_FBY :              24 C |
*MARSGBL_SCRL_FREE0 :            18 C | *MARSGBL_SCRL_FREE1 :            1C C |
 MARSGBL_SCRL_HGHT :             48 C |  MARSGBL_SCRL_SIZE :             40 C |
 MARSGBL_SCRL_WDTH :             44 C |  MARSGBL_SCRL_XPOS :             10 C |
 MARSGBL_SCRL_YPOS :             14 C |  MARSGBL_SSPRFLIP :               4 C |
 MARSGBL_THISFRAME :              2 C |  MARSGBL_XSHIFT :                 0 C |
 MARSSCRL_COPYTOPBOT :      6000E84 C |
 MARSSCRL_COPYTOPBOT.COPY_TOP :                                     6000E98 C |
 MARSSOUND_INIT :           6000BEC C |  MARSUPD :                     1F87 C |
 MARSVIDEO_DRAWFILLBLK :    600106C C |
 MARSVIDEO_DRAWFILLBLK.BLANK :                                      60010EC C |
*MARSVIDEO_DRAWFILLBLK.EXIT_LR :                                    6001112 C |
 MARSVIDEO_DRAWFILLBLK.NEXT_YBLK :                                  6001100 C |
 MARSVIDEO_DRAWFILLBLK.NO_FLAG :                                    60010F8 C |
 MARSVIDEO_DRAWFILLBLK.TL_SNAP :                                    600109A C |
 MARSVIDEO_DRAWFILLBLK.X_LOOP :                                     6001092 C |
 MARSVIDEO_DRAWFILLBLK.Y_LOOP :                                     60010A4 C |
 MARSVIDEO_FIXTBLSHIFT :    6000C40 C |
 MARSVIDEO_FIXTBLSHIFT.COPY :                                       6000C80 C |
 MARSVIDEO_FIXTBLSHIFT.LOOP :                                       6000C68 C |
 MARSVIDEO_FIXTBLSHIFT.PTCHSET :                                    6000C92 C |
 MARSVIDEO_FIXTBLSHIFT.TBLEXIT :                                    6000C8C C |
 MARSVIDEO_INIT :           6000C10 C |  MARSVIDEO_MAPDRAWALL :     6000CB0 C |
 MARSVIDEO_MAPDRAWALL.BLANK :                                       6000D1E C |
*MARSVIDEO_MAPDRAWALL.EXIT_LR :                                     6000D36 C |
 MARSVIDEO_MAPDRAWALL.TL_SNAP :                                     6000CDA C |
 MARSVIDEO_MAPDRAWALL.X_LOOP :                                      6000CD2 C |
 MARSVIDEO_MAPDRAWALL.Y_LOOP :                                      6000CE2 C |
 MARSVIDEO_MAPSCRLLR :      6000D44 C |
 MARSVIDEO_MAPSCRLLR.BLANK :                                        6000DC6 C |
 MARSVIDEO_MAPSCRLLR.DIR_L :                                        6000D64 C |
 MARSVIDEO_MAPSCRLLR.DIR_R :                                        6000D6A C |
 MARSVIDEO_MAPSCRLLR.EXIT_LR :                                      6000DD6 C |
 MARSVIDEO_MAPSCRLLR.GO_LR :                                        6000D6E C |
 MARSVIDEO_MAPSCRLLR.Y_LOOP :                                       6000D8A C |
 MARSVIDEO_MAPSCRLUD :      6000DE0 C |
 MARSVIDEO_MAPSCRLUD.BLANK_LR :                                     6000E64 C |
 MARSVIDEO_MAPSCRLUD.DIR_D :                                        6000E06 C |
 MARSVIDEO_MAPSCRLUD.DIR_U :                                        6000E00 C |
 MARSVIDEO_MAPSCRLUD.EXIT_UD :                                      6000E78 C |
 MARSVIDEO_MAPSCRLUD.GO_UD :                                        6000E0A C |
 MARSVIDEO_MAPSCRLUD.Y_LOOP :                                       6000E26 C |
 MARSVIDEO_MKFILLBLK :      6000F94 C |
*MARSVIDEO_MKFILLBLK.EXIT_SSPR :                                    6001064 C |
 MARSVIDEO_MKFILLBLK.NEXT_SSPR :                                    6000FA0 C |
 MARSVIDEO_MKFILLBLK.OFF_SSPR :                                     600105C C |
 MARSVIDEO_MKFILLBLK.X_ROW :                                        600102A C |
 MARSVIDEO_MKFILLBLK.X_SQEND :                                      6001022 C |
 MARSVIDEO_MKFILLBLK.X_SQZ :                                        6001016 C |
 MARSVIDEO_MKFILLBLK.X_SZEX :                                       6000FDC C |
 MARSVIDEO_MKFILLBLK.Y_ROW :                                        6001028 C |
 MARSVIDEO_MKFILLBLK.Y_SQEND :                                      6001028 C |
 MARSVIDEO_MKFILLBLK.Y_SQZ :                                        600101C C |
 MARSVIDEO_MKFILLBLK.Y_SZEX :                                       6000FE8 C |
 MARSVIDEO_SHOWSCRLBG :     6000EB4 C |
 MARSVIDEO_SHOWSCRLBG.BAD_Y :                                       6000EFE C |
 MARSVIDEO_SHOWSCRLBG.LN_LOOP :                                     6000EE2 C |
 MARSVIDEO_SHOWSCRLBG.XL_R :                                        6000EEA C |
 MARSVIDEO_SUPERSPR_DRAW :  6000F08 C |
*MARSVIDEO_SUPERSPR_DRAW.EXIT_SSPR :                                6000F84 C |
 MARSVIDEO_SUPERSPR_DRAW.NEXT_SSPR :                                6000F2E C |
 MARSVIDEO_SUPERSPR_DRAW.OFF_SSPR :                                 6000F7C C |
 MARS_CACHEPURGE :          6000B48 C |  MARS_CACHERAMCODE :        6000B7C C |
 MARS_CACHERAMCODE.COPY :   6000BA0 C | *MARS_CLEARCACHECODE :      6000B64 C |
 MARS_CLEARCACHECODE.LOOP : 6000B6A C |  MARS_ENTRY :                   800 C |
*MARS_ENTRY.NO_MARS :           802 C |  MARS_RAMCODE :                3F70 C |
 MARS_RAMCODE_E :             2DC30 C | *MARS_SETWATCHDOG :         6000BBC C |
 MASTER_IRQ :               6000250 C |  MASTER_LOOP :              60007B8 C |
 MASTER_LOOP.COPY_PAL :     6000808 C |  MASTER_LOOP.NON_INIT :     6000830 C |
*MASTER_LOOP.NOT_READY :    6000824 C |  MASTER_LOOP.WAITL :        60007C2 C |
 MASTER_LOOP.WAITV :        60007EC C | *MAX_BLOCKS :                     8 - |
 MAX_BUFFNTRY :                   8 - |  MAX_MARSSPR :                   10 - |
 MAX_MDDMATSK :                  18 - |  MAX_MDOBJ :                     18 - |
 MAX_MDOTHER :                  C00 - |  MAX_MDSYSTEM :                 600 - |
 MAX_MDVIDEO :                 2000 - |  MAX_PWMCHNL :                    7 - |
 MAX_RCACH :                     20 - |  MAX_SCRNBUFF :                1800 - |
 MAX_SRAMSIZE :                 400 - |  MAX_SYSCODE :                 2000 - |
 MAX_TBLSIZE :                   18 - |  MAX_TRFRPZ :                     8 - |
 MAX_TRKCHN :                    20 - |  MAX_TRKINDX :                   1A - |
 MAX_USERCODE :                8000 - |  MAX_ZCMND :                     10 - |
 MCD :                            0 - |  MCDBLOCK :                      36 C |
 MCDUPD :                      1F88 C | *MCD_COMM_M :                     E - |
*MCD_COMM_S :                     F - | *MCD_DBANK0 :                 2E004 C |
*MCD_DCOMM_M :                   10 - | *MCD_DCOMM_S :                   20 - |
*MCD_HINT :                       6 - | *MCD_INTMASK :                   32 - |
*MCD_MEMORY :                     3 - |  MCHNSND_BANK :                   8 C |
 MCHNSND_ENBL :                   0 C |  MCHNSND_LEN :                   10 C |
 MCHNSND_LOOP :                  14 C |  MCHNSND_PITCH :                 18 C |
 MCHNSND_READ :                   4 C |  MCHNSND_START :                  C C |
 MCHNSND_VOL :                   1C C |  MDBANK0 :                   92E004 C |
 MDBANK0_E :                 950ECE C |  MDSYS_SINEDATA :  FFFFFFFFFFFF134C C |
 MD_BANK_SRAM :              A130F1 - |  MD_ERRADDR :                   820 C |
 MD_ERRBUS :                    820 C |  MD_ERRCHK :                    820 C |
 MD_ERRILL :                    820 C |  MD_ERROREX :                   820 C |
 MD_ERRORTRAP :                 820 C |  MD_ERRPRIVL :                  820 C |
 MD_ERRTRAPV :                  820 C |  MD_ERRZDIV :                   820 C |
 MD_INIT :                      838 C |  MD_INIT.COPY_1 :               8A2 C |
 MD_INIT.LOOP_RAM :             850 C |  MD_INIT.WAIT_DMA :             86A C |
 MD_INIT.WAIT_SH2 :             886 C |  MD_LINE1010 :                  820 C |
 MD_LINE1111 :                  820 C |  MD_READMODES :    FFFFFFFFFFFF168A C |
 MD_READMODES.END :                                        FFFFFFFFFFFF16EE C |
 MD_READMODES.PICK_MODE :                                  FFFFFFFFFFFF16AA C |
 MD_SCREEN00 :               8ADC30 C |  MD_SYSCODE :                   8C6 C |
 MD_SYSCODE_E :                1FB4 C |  MD_TRACE :                     820 C |
 MODE :                          18 - | *MODE_FADEIN :     FFFFFFFFFFFF1548 C |
 MODE_FADEIN.LOOPW :                                       FFFFFFFFFFFF1570 C |
*MODE_FADEOUT :    FFFFFFFFFFFF157C C |
 MODE_FADEOUT.LOOPW :                                      FFFFFFFFFFFF15A4 C |
 MODE_INIT :       FFFFFFFFFFFF1516 C |  MODE_INIT.CLR :   FFFFFFFFFFFF1540 C |
*MOMCPU :                     68000 - | *MOMCPUNAME :               "68000" - |
 MONOWIDTH :                     38 - |  MOUSE_X :                        8 C |
 MOUSE_Y :                        A C |  MSCRL_ART :                      0 C |
 MSCRL_XPOS :                     4 C | *MSCRL_YBOT :                     C C |
 MSCRL_YPOS :                     8 C | *MSCRL_YTOP :                     E C |
 MSTRMODE_0 :               6000860 C |  MSTRMODE_0.WAITL :         6000862 C |
 MSTRMODE_0_I :             6000850 C |  MSTRMODE_2D :              60008C8 C |
 MSTRMODE_2D.CLR_INIT :     60009F2 C |  MSTRMODE_2D.FROM_FULL :    6000A02 C |
 MSTRMODE_2D.X_DIRL :       6000914 C |  MSTRMODE_2D.X_NEW :        6000922 C |
 MSTRMODE_2D.X_OLD :        6000922 C |  MSTRMODE_2D.YPU_NEGTV :    600099C C |
 MSTRMODE_2D.YPU_POSTV :    60009A6 C |  MSTRMODE_2D.YX_NEGTV :     6000986 C |
 MSTRMODE_2D.YX_POSTV :     6000990 C |  MSTRMODE_2D.Y_DIRL :       6000950 C |
 MSTRMODE_2D.Y_NEW :        600095E C |  MSTRMODE_2D.Y_OLD :        600095E C |
 MSTRMODE_2D_I :            600086C C |  MSTR_LIST :                6000840 C |
 M_IRQ_BAD :                6000380 C |  M_IRQ_CMD :                60003C4 C |
 M_IRQ_CMD.DREQ_RAM :       60003F0 C |  M_IRQ_CMD.DREQ_SETDEST :   60003F2 C |
 M_IRQ_DMA :                6000390 C |  M_IRQ_H :                  6000420 C |
 M_IRQ_PWM :                60003AC C |  M_IRQ_V :                  600043C C |
 M_IRQ_VRES :               6000458 C |  M_IRQ_VRES.RV_BUSY :       6000490 C |
 M_IRQ_WDG :                6000384 C | *NESTMAX :                      100 - |
 NIKONA_BUFFLIST :             16D8 C |  NIKONA_BUFFLIST_E :           16F0 C |
 OBJECTS_ADD :     FFFFFFFFFFFF0D44 C |  OBJECTS_ADD.CLR : FFFFFFFFFFFF0D62 C |
 OBJECTS_ADD.SEARCH :                                      FFFFFFFFFFFF0D4C C |
 OBJECTS_ADD.USE_IT :                                      FFFFFFFFFFFF0D5C C |
 OBJECTS_CLEAR :   FFFFFFFFFFFF0CD4 C |
 OBJECTS_CLEAR.CLR :                                       FFFFFFFFFFFF0CDC C |
 OBJECTS_CLEAR.CLR_D :                                     FFFFFFFFFFFF0CEA C |
 OBJECTS_RUN :     FFFFFFFFFFFF0CFC C |
 OBJECTS_RUN.NEXT_ONE :                                    FFFFFFFFFFFF0D04 C |
 OBJECTS_RUN.NO_CODE :                                     FFFFFFFFFFFF0D10 C |
*OBJECTS_SET :     FFFFFFFFFFFF0D1A C |  OBJECTS_SET.CLR : FFFFFFFFFFFF0D24 C |
 OBJECTS_SHOW :    FFFFFFFFFFFF0D7A C |
 OBJECTS_SHOW.FINISH :                                     FFFFFFFFFFFF0E7A C |
 OBJECTS_SHOW.MK_PZ :                                      FFFFFFFFFFFF0DF8 C |
 OBJECTS_SHOW.MK_SPR :                                     FFFFFFFFFFFF0E74 C |
 OBJECTS_SHOW.NEXT :                                       FFFFFFFFFFFF0DCA C |
 OBJECTS_SHOW.NEXTS :                                      FFFFFFFFFFFF0D9C C |
 OBJECTS_SHOW.NO_SPRDRW :                                  FFFFFFFFFFFF0DC2 C |
 OBJECTS_SHOW.RAN_OUT :                                    FFFFFFFFFFFF0E98 C |
 OBJECTS_SHOW.VRAM_H :                                     FFFFFFFFFFFF0E4A C |
 OBJECTS_SHOW.VRAM_V :                                     FFFFFFFFFFFF0E30 C |
 OBJECT_ANIMATE :  FFFFFFFFFFFF0F3A C |
 OBJECT_ANIMATE.GOTOFRAME :                                FFFFFFFFFFFF0FB6 C |
 OBJECT_ANIMATE.KEEPSPD :                                  FFFFFFFFFFFF0F7C C |
 OBJECT_ANIMATE.LASTFRAME :                                FFFFFFFFFFFF0FC0 C |
 OBJECT_ANIMATE.NOANIM :                                   FFFFFFFFFFFF0FA8 C |
 OBJECT_ANIMATE.RETURN :                                   FFFFFFFFFFFF0FA6 C |
 OBJECT_ANIMATE.SAMETHING :                                FFFFFFFFFFFF0F54 C |
 OBJECT_ANIMRESET :                                        FFFFFFFFFFFF0FC6 C |
 OBJECT_DISPLAY :  FFFFFFFFFFFF0E9E C |
 OBJECT_DISPLAY.NEXT_PZ :                                  FFFFFFFFFFFF0EE0 C |
 OBJECT_DISPLAY.NO_DMA :                                   FFFFFFFFFFFF0F0A C |
 OBJECT_DISPLAY.SRCH :                                     FFFFFFFFFFFF0EA6 C |
 OBJECT_DISPLAY.THIS_ONE :                                 FFFFFFFFFFFF0EB2 C |
*OBJECT_MKSPRPZ :  FFFFFFFFFFFF0F0C C |
 OBJECT_MKSPRPZ.NOPE :                                     FFFFFFFFFFFF0F38 C |
*OBJECT_SPEED :    FFFFFFFFFFFF0FD6 C |  OBJMAP_SISI :               92ED34 C |
 OBJPAL_SISI :               92ED14 C |  OBJ_ANIM_ID :                   1C C |
 OBJ_ANIM_INDX :                 1A C |  OBJ_ANIM_SPD :                  20 C |
 OBJ_CODE :                       0 C |  OBJ_DMA :                       10 C |
 OBJ_FRAME :                     1E C | *OBJ_FREE :                      25 C |
 OBJ_INDEX :                     21 C |  OBJ_MAP :                        C C |
*OBJ_RAM :                       26 C |  OBJ_SET :                       22 C |
*OBJ_STATUS :                    24 C | *OBJ_SUBID :                     23 C |
 OBJ_VRAM :                      14 C |  OBJ_X :                          4 C |
 OBJ_X_SPD :                     16 C |  OBJ_Y :                          8 C |
 OBJ_Y_SPD :                     18 C |  ON_HOLD :                        2 C |
 ON_PRESS :                       4 C | *ON_RELEASE :                     6 C |
*PACKING :                        0 - | *PADDING :                        0 - |
 PAD_ID :                         0 C |  PAD_VER :                        1 C |
*PALMARS_SABRINA :           92ECF4 C |  PALMARS_TEST :              92EAF4 C |
*PALMODE :                       3E C |  PARP :                          34 - |
 PCMCOM :                      16F2 C | *PEN :                           20 - |
 PICO :                           0 - |  PROC_CHIPS :                   676 C |
 PSGCOM :                      176A C |  PSGFREQ_LIST :                1548 C |
 PSGHATMODE :                  1F83 C | *PSG_CTRL :                  C00011 - |
 PTMR :                          38 - |  PVOL :                          30 - |
 PWMCOM :                      1732 C | *PWMCTL :                        31 - |
 PWMINS_NADIE :             6005050 C |  PWMINS_NADIE.END :         6020FA6 C |
 PWMINS_NADIE.START :       6005056 C |  PWMINS_PIANO :             6021724 C |
 PWMINS_PIANO.END :         60290FE C |  PWMINS_PIANO.START :       602172A C |
 PWMINS_PKICK :             6020FA8 C |  PWMINS_PKICK.END :         6021722 C |
 PWMINS_PKICK.START :       6020FAE C |  PWMINS_PTOM :              6029100 C |
 PWMINS_PTOM.END :          6029CC0 C |  PWMINS_PTOM.START :        6029106 C |
 PWMINTCLR :                     1C - |  PWMIRQ_ON :                      1 - |
 RAM_FADEMARSDELAY :                                       FFFFFFFFFFFFBDF0 C |
 RAM_FADEMARSINCR :                                        FFFFFFFFFFFFBDEE C |
 RAM_FADEMARSREQ : FFFFFFFFFFFFBDEC C |  RAM_FADEMARSTMR : FFFFFFFFFFFFBDF2 C |
 RAM_FADEMDDELAY : FFFFFFFFFFFFBDE8 C |  RAM_FADEMDINCR :  FFFFFFFFFFFFBDE6 C |
 RAM_FADEMDREQ :   FFFFFFFFFFFFBDE4 C |  RAM_FADEMDTMR :   FFFFFFFFFFFFBDEA C |
 RAM_FRAMECOUNT :  FFFFFFFFFFFFBDD4 C | *RAM_GLBL_FILLER : FFFFFFFFFFFFEA04 C |
 RAM_HORSCROLL :   FFFFFFFFFFFFA004 C |  RAM_INPUTDATA :   FFFFFFFFFFFFC004 C |
 RAM_MARS_DREQBUFF_0 :     26001A30 C |  RAM_MARS_DREQBUFF_1 :     26002140 C |
 RAM_MARS_GLOBAL :          60015E0 C |  RAM_MARS_PWMLIST :             120 C |
 RAM_MARS_PWMTABLE :            200 C |  RAM_MARS_SCRLREFILL_0 :    6001630 C |
 RAM_MDDREQ :      FFFFFFFFFFFFC604 C |  RAM_MDGLOBAL :    FFFFFFFFFFFFEA04 C |
 RAM_MDMARSHINT :  FFFFFFFFFFFFC452 C |  RAM_MDMARSPALFD : FFFFFFFFFFFFAE94 C |
 RAM_MDMARSVINT :  FFFFFFFFFFFFC44C C |
*RAM_MDMARS_DRAWALL :                                      FFFFFFFFFFFFBDF4 C |
*RAM_MDMARS_PALETTE :                                      FFFFFFFFFFFFC604 - |
*RAM_MDMARS_SCRLBUFF :                                     FFFFFFFFFFFFCC04 - |
*RAM_MDMARS_SCRLDATA :                                     FFFFFFFFFFFFC804 - |
*RAM_MDMARS_SUPERSPR :                                     FFFFFFFFFFFFCC14 - |
 RAM_MDOTHER :     FFFFFFFFFFFFC604 C |  RAM_MDSYSTEM :    FFFFFFFFFFFFC004 C |
 RAM_MDVIDEO :     FFFFFFFFFFFFA004 C |  RAM_MEGACD :              FFFFFD00 - |
 RAM_OBJDISPLIST : FFFFFFFFFFFFBC24 C |  RAM_OBJECTS :     FFFFFFFFFFFFB294 C |
 RAM_PALETTE :     FFFFFFFFFFFFAE14 C |  RAM_PALETTEFD :   FFFFFFFFFFFFB094 C |
 RAM_SAVEDATA :    FFFFFFFFFFFFC044 C |  RAM_SCREENMODE :  FFFFFFFFFFFFC458 C |
 RAM_SCRNBUFF :    FFFFFFFFFFFFD204 C |  RAM_SPRDRWCNTR :  FFFFFFFFFFFFBDD8 C |
 RAM_SPRDRWPZ :    FFFFFFFFFFFFA914 C |  RAM_SPRITES :     FFFFFFFFFFFFA414 C |
 RAM_SPRLINKNUM :  FFFFFFFFFFFFBDDA C |  RAM_STACK :               FFFFFD00 - |
 RAM_SYSRANDSEED : FFFFFFFFFFFFC448 C |  RAM_SYSRANDVAL :  FFFFFFFFFFFFC444 C |
 RAM_SYSTEMCODE :  FFFFFFFFFFFF0000 C |  RAM_USERCODE :    FFFFFFFFFFFF2000 C |
 RAM_VDPDMAINDX :  FFFFFFFFFFFFBDDE C |  RAM_VDPDMALIST :  FFFFFFFFFFFFB114 C |
 RAM_VDPDMAMOD :   FFFFFFFFFFFFBDE0 C | *RAM_VDPEXWRITE :  FFFFFFFFFFFFBDDC C |
 RAM_VDPREGS :     FFFFFFFFFFFFBDF6 C |  RAM_VERSCROLL :   FFFFFFFFFFFFA3C4 C |
 RAM_VIDPRNTLIST : FFFFFFFFFFFFBC54 C |  RAM_VIDPRNTVRAM : FFFFFFFFFFFFBDE2 C |
 RAM_ZCDFLAG_D :           FFFFFF00 - |  RAM_ZSNDBUFF :            FFFFFF00 - |
*RCHWIDTH :                      36 - | *RELAXED :                        0 - |
 ROM_END :                    6C038 C |  RRT :                           14 - |
 SAMPLEHEAD :                  1FB4 C |  SAMPLE_RATE :                 3E80 - |
 SBEATACC :                    1FA0 C |  SBEATPTCK :                   1FA2 C |
 SCRLDRW_DRAWBLK :          6001278 C |  SCRLDRW_DRAWBLK.BLANK :    6001280 C |
 SCRLDRW_DRAWBLK.BLNK_LINE :                                        6001284 C |
 SCRLDRW_DRAWBLK.NEXT_LINE :                                        60012B6 C |
 SCRLDRW_DRAWBLK.NORMAL :   60012AC C |  SCRLDRW_DRAWBLK.TL_SNAP :  60012BE C |
 SCRLDRW_DRAWBLK.TL_SNAPB : 600128A C |  SCRLDRW_SSPRDRAW :         600112C C |
 SCRLDRW_SSPRDRAW.TL_SNAP : 60011C0 C |  SCRLDRW_SSPRDRAW.XL_FAR :  6001238 C |
 SCRLDRW_SSPRDRAW.XY_FLIP : 6001158 C |  SCRLDRW_SSPRDRAW.X_BAD :   6001252 C |
 SCRLDRW_SSPRDRAW.X_END :   600125A C |  SCRLDRW_SSPRDRAW.X_FLIP :  6001176 C |
 SCRLDRW_SSPRDRAW.X_LEFT :  6001206 C |  SCRLDRW_SSPRDRAW.X_LOOP :  60011BA C |
 SCRLDRW_SSPRDRAW.X_MID :   600123C C |  SCRLDRW_SSPRDRAW.X_MSWAP : 60011CE C |
*SCRLDRW_SSPRDRAW.X_SWAP :  60011C0 C |  SCRLDRW_SSPRDRAW.Y_BOT :   600119E C |
*SCRLDRW_SSPRDRAW.Y_END :   6001266 C |  SCRLDRW_SSPRDRAW.Y_FLIP :  6001166 C |
 SCRLDRW_SSPRDRAW.Y_LAST :  6001266 C |  SCRLDRW_SSPRDRAW.Y_LOOP :  60011AA C |
*SCRLDRW_SSPRDRAW.Y_LOW :   6001138 C |  SCRLDRW_SSPRDRAW.Y_MID :   600113E C |
 SCRLDRW_SSPRDRAW.Y_OK :    6001146 C |  SCRLDRW_SSPRDRAW.Y_RFLIP : 600118A C |
 SCRLDRW_SSPRDRAW.Y_RFLIPC :                                        600118C C |
 SCRLDRW_SSPRDRAW.Y_TOP :   600118E C | *SETVRAM_MIKAMI :               440 - |
 SETVRAM_SISI :                 480 - |  SET_CHIPS :                    658 C |
 SET_CHIPS.TRK_BUFFRS :         660 C |  SET_MSCRLHGHT :                 F0 - |
 SET_MSCRLSIZE :                 10 - |  SET_MSCRLWDTH :                140 - |
 SH2_DEBUG :                      1 - |  SH2_END :                  6029CC0 C |
 SH2_MASTER :               6000000 C |  SH2_M_ENTRY :              6000710 C |
 SH2_M_ERRADDR :            600032C C |  SH2_M_ERRCODE :            600033C C |
 SH2_M_ERRDMA :             6000330 C |  SH2_M_ERRILLG :            6000324 C |
 SH2_M_ERRINVL :            6000328 C |  SH2_M_ERRNMI :             6000334 C |
 SH2_M_ERROR :              6000320 C |  SH2_M_ERRUSER :            6000338 C |
 SH2_M_HOTSTART :           6000754 C |  SH2_M_HOTSTART.WAIT_SLV :  6000772 C |
 SH2_RAM :                  6001630 C |  SH2_RAM_TH :               6001A30 C |
 SH2_SLAVE :                6000128 C |  SH2_S_ENTRY :              6000A44 C |
 SH2_S_ERRADDR :            6000358 C |  SH2_S_ERRCODE :            6000368 C |
 SH2_S_ERRDMA :             600035C C |  SH2_S_ERRILLG :            6000350 C |
 SH2_S_ERRINVL :            6000354 C |  SH2_S_ERRNMI :             6000360 C |
 SH2_S_ERROR :              600034C C |  SH2_S_ERRUSER :            6000364 C |
 SH2_S_HOTSTART :           6000A94 C |  SH2_S_HOTSTART.WAIT_MST :  6000AB8 C |
 SH2_USER_DATA :            6029CC0 C |  SHIFT :                          2 - |
 SHRD_BLK :                  92EF36 C |  SHRD_PAT :                  92EF4F C |
*SIN_TABLE :                6002850 C |  SIZEOF_DREQ :                  710 C |
 SIZEOF_INPUT :                  10 C |  SIZEOF_MARSGBL :                50 C |
 SIZEOF_MARSSCRL :               10 C |  SIZEOF_MARSSND :                20 C |
 SIZEOF_MARSSPR :                10 C |  SIZEOF_MDGLBL :   FFFFFFFFFFFFEA08 C |
 SIZEOF_MDOBJ :                  66 C |  SIZEOF_MDRAM :    FFFFFFFFFFFFD40C C |
*SIZEOF_MDSYS :    FFFFFFFFFFFFC45A C |  SIZEOF_MDVID :    FFFFFFFFFFFFBE0E C |
*SIZEOF_RAMOTHER : FFFFFFFFFFFFD204 C |  SLAVE_IRQ :                6000278 C |
 SLAVE_LOOP :               6000B00 C |  SLV :                           10 - |
 SLVMODE_00 :               6000B24 C |  SLVMODE_01 :               6000B28 C |
 SLV_LIST :                 6000B1C C |  SNDLOCKZ80 :      FFFFFFFFFFFF00BE C |
 SNDLOCKZ80.WAIT : FFFFFFFFFFFF00C6 C |  SNDREQ_ENTER :    FFFFFFFFFFFF00DC C |
 SNDREQ_ENTER.WAIT :                                       FFFFFFFFFFFF00FC C |
 SNDREQ_EXIT :     FFFFFFFFFFFF010C C | *SNDREQ_SADDR :    FFFFFFFFFFFF0134 C |
 SNDREQ_SBYTE :    FFFFFFFFFFFF013C C |  SNDREQ_SCMD :     FFFFFFFFFFFF0122 C |
 SNDREQ_SLONG :    FFFFFFFFFFFF0130 C |  SNDREQ_SWORD :    FFFFFFFFFFFF0138 C |
 SNDUNLOCKZ80 :    FFFFFFFFFFFF00D2 C |  SOUND_INIT :      FFFFFFFFFFFF0000 C |
 SOUND_INIT.CLEANUP :                                      FFFFFFFFFFFF002A C |
 SOUND_INIT.COPY : FFFFFFFFFFFF0040 C |  SOUND_INIT.WAIT : FFFFFFFFFFFF0014 C |
 SOUND_UPDATE :    FFFFFFFFFFFF0072 C |
 SOUND_UPDATE.COPY_BYTES :                                 FFFFFFFFFFFF00AC C |
 SOUND_UPDATE.NO_SIZE :                                    FFFFFFFFFFFF00BA C |
 SOUND_UPDATE.NO_TASK :                                    FFFFFFFFFFFF00BC C |
 SSPR_ART :                       C C |  SSPR_FLAGS :                     0 C |
 SSPR_FRAME :                     2 C | *SSPR_INDX :                      6 C |
 SSPR_SIZE :                      4 C |  SSPR_XPOS :                      8 C |
 SSPR_YPOS :                      A C |  STACK_MSTR :              C0000800 - |
 STACK_SLV :               C0000800 - |  STANDBY :                        3 - |
*SYSMARS_ID :                A130EC - |  SYSMARS_REG :               A15100 - |
*SYSMCD_REG :                A12000 - | *SYSMCD_WRAM :               200000 - |
 SYSTEM_DMAENTER_RAM :                                     FFFFFFFFFFFF1128 C |
 SYSTEM_DMAENTER_ROM :                                     FFFFFFFFFFFF1130 C |
 SYSTEM_DMAEXIT_RAM :                                      FFFFFFFFFFFF112C C |
 SYSTEM_DMAEXIT_ROM :                                      FFFFFFFFFFFF1134 C |
 SYSTEM_GRABRAMCODE :                                      FFFFFFFFFFFF1674 C |
 SYSTEM_GRABRAMCODE.COPYME2 :                              FFFFFFFFFFFF167E C |
 SYSTEM_INIT :     FFFFFFFFFFFF1060 C |
 SYSTEM_INIT.CLRINPUT :                                    FFFFFFFFFFFF10B8 C |
 SYSTEM_INIT.WAIT :                                        FFFFFFFFFFFF106C C |
 SYSTEM_INPUT :    FFFFFFFFFFFF1138 C |
 SYSTEM_INPUT.EXIT :                                       FFFFFFFFFFFF1166 C |
 SYSTEM_INPUT.ID_03 :                                      FFFFFFFFFFFF118C C |
 SYSTEM_INPUT.ID_0D :                                      FFFFFFFFFFFF1236 C |
 SYSTEM_INPUT.INVALID :                                    FFFFFFFFFFFF1230 C |
 SYSTEM_INPUT.LIST :                                       FFFFFFFFFFFF116C C |
 SYSTEM_INPUT.OLDPAD :                                     FFFFFFFFFFFF12AE C |
 SYSTEM_INPUT.PICK_ID :                                    FFFFFFFFFFFF12B4 C |
 SYSTEM_INPUT.READ :                                       FFFFFFFFFFFF12CA C |
 SYSTEM_INPUT.STEP_1 :                                     FFFFFFFFFFFF12D6 C |
 SYSTEM_INPUT.STEP_2 :                                     FFFFFFFFFFFF12E2 C |
 SYSTEM_INPUT.THIS_ONE :                                   FFFFFFFFFFFF114C C |
 SYSTEM_INPUT.X_NEG :                                      FFFFFFFFFFFF11FE C |
 SYSTEM_INPUT.Y_NEG :                                      FFFFFFFFFFFF122A C |
 SYSTEM_MARSDATAPACK :                                     FFFFFFFFFFFF15C8 C |
 SYSTEM_MARSDATAPACK.EXIT_NOW :                            FFFFFFFFFFFF15F8 C |
 SYSTEM_MARSDATAPACK.LARGE_PACK :                          FFFFFFFFFFFF15E6 C |
 SYSTEM_MARSSENDDREQ :                                     FFFFFFFFFFFF15FC C |
 SYSTEM_MARSUPDATE :                                       FFFFFFFFFFFF1600 C |
*SYSTEM_RANDOM :   FFFFFFFFFFFF12E4 C |
 SYSTEM_RANDOM.GOOD_S :                                    FFFFFFFFFFFF12F2 C |
 SYSTEM_RENDER :   FFFFFFFFFFFF10DE C |
 SYSTEM_RENDER.FORGOT_DISP :                               FFFFFFFFFFFF1126 C |
 SYSTEM_RENDER.WAIT_IN :                                   FFFFFFFFFFFF1100 C |
 SYSTEM_RENDER.WAIT_LAG :                                  FFFFFFFFFFFF10E8 C |
 SYSTEM_SETINTS :  FFFFFFFFFFFF144C C |
 SYSTEM_SETINTS.NOHINT :                                   FFFFFFFFFFFF145C C |
 SYSTEM_SETINTS.NOVINT :                                   FFFFFFFFFFFF1454 C |
*SYSTEM_SINEWAVE : FFFFFFFFFFFF132E C |
 SYSTEM_SINEWAVE.DONT_NEG :                                FFFFFFFFFFFF134A C |
*SYSTEM_SINEWAVE_COS :                                     FFFFFFFFFFFF130E C |
 SYSTEM_SINEWAVE_COS.DONT_NEG :                            FFFFFFFFFFFF1328 C |
 SYSTEM_SRAMINIT : FFFFFFFFFFFF145E C |
 SYSTEM_SRAMINIT.CLR_SRAM :                                FFFFFFFFFFFF1474 C |
 SYSTEM_SRAMINIT.DONT_CLEAR :                              FFFFFFFFFFFF1484 C |
 SYSTEM_SRAMLOAD : FFFFFFFFFFFF14CE C |
*SYSTEM_SRAMLOAD.DONT_RESET :                              FFFFFFFFFFFF1500 C |
 SYSTEM_SRAMLOAD.LOAD :                                    FFFFFFFFFFFF14F4 C |
 SYSTEM_SRAMSAVE : FFFFFFFFFFFF1486 C |
*SYSTEM_SRAMSAVE.DONT_RESET :                              FFFFFFFFFFFF14B8 C |
 SYSTEM_SRAMSAVE.SAVE :                                    FFFFFFFFFFFF14AC C |
 SYS_CTRL_1 :                A10009 - |  SYS_CTRL_2 :                A1000B - |
 SYS_CTRL_3 :                A1000D - |  SYS_DATA_1 :                A10003 - |
*SYS_DATA_2 :                A10005 - | *SYS_DATA_3 :                A10007 - |
*SYS_EXRAM :                 200000 - | *SYS_IO :                    A10001 - |
 SYS_MSENDDREQ :   FFFFFFFFFFFF160A C |
 SYS_MSENDDREQ.L0 :                                        FFFFFFFFFFFF165E C |
 SYS_MSENDDREQ.NO_SRC :                                    FFFFFFFFFFFF162A C |
 SYS_MSENDDREQ.WAIT_BIT :                                  FFFFFFFFFFFF164A C |
*SYS_TMSS :                  A14000 - |  S_IRQ_BAD :                60004D8 C |
 S_IRQ_CMD :                60004F8 C | *S_IRQ_CMD.COPY_1 :         6000550 C |
 S_IRQ_CMD.EXIT_C :         600055E C |  S_IRQ_CMD.EXIT_SCMD :      6000646 C |
 S_IRQ_CMD.IS_KEYCUT :      6000638 C |  S_IRQ_CMD.NEXT_CHNL :      6000564 C |
 S_IRQ_CMD.NO_CHNG :        600063C C | *S_IRQ_CMD.NO_KEYCUT :      600056E C |
 S_IRQ_CMD.NO_PITCHBND :    60005A0 C | *S_IRQ_CMD.PROC_PWM :       600055E C |
 S_IRQ_CMD.SCMD_TASK00 :    6000538 C |  S_IRQ_CMD.SCMD_TASK01 :    600053C C |
 S_IRQ_CMD.SCMD_TASKS :     6000528 C |  S_IRQ_CMD.WAIT_1 :         6000544 C |
 S_IRQ_DMA :                60004E8 C |  S_IRQ_H :                  600067E C |
 S_IRQ_PWM :                      0 C |  S_IRQ_PWM.CHNL_OFF :            C4 C |
 S_IRQ_PWM.DO_MONO :             88 C |  S_IRQ_PWM.DO_VOL :              A0 C |
 S_IRQ_PWM.ENABLED :             42 C |  S_IRQ_PWM.FIFO_LOOP :           2C C |
 S_IRQ_PWM.GO_WAVE :             8A C |  S_IRQ_PWM.KEEP :                68 C |
 S_IRQ_PWM.LOOPIT :              62 C |  S_IRQ_PWM.L_MAX :               D6 C |
 S_IRQ_PWM.ML_OUT :              9A C | *S_IRQ_PWM.MNON_Z :              94 C |
 S_IRQ_PWM.NEXT_CHNL :           34 C |  S_IRQ_PWM.PWM_FULL :           102 C |
*S_IRQ_PWM.READ_WAV :            72 C |  S_IRQ_PWM.R_MAX :               DC C |
 S_IRQ_PWM.SILENCE :             3C C |  S_IRQ_PWM.STAND :               7A C |
 S_IRQ_PWM.ST_PITCH :            4A C |  S_IRQ_V :                  6000698 C |
 S_IRQ_VRES :               60006B4 C |  S_IRQ_VRES.RV_BUSY :       60006E8 C |
 S_IRQ_WDG :                60004DC C |  TBLBUFF_READ :                 69F C |
 TBLBUFF_READ.CHK_PSG :         7BA C |  TBLBUFF_READ.CLRFULL :         879 C |
 TBLBUFF_READ.DO_CHIP :         705 C |  TBLBUFF_READ.FIRST_INS :       727 C |
 TBLBUFF_READ.GRAB_LINK :       769 C |  TBLBUFF_READ.HAS_INDX :        6E5 C |
 TBLBUFF_READ.INVLDL :          7A3 C |  TBLBUFF_READ.KEEP_IT :         74B C |
 TBLBUFF_READ.L_HIPRIO :        82E C |  TBLBUFF_READ.NEW_CHIP :        7E1 C |
 TBLBUFF_READ.NEW_LINK :        82B C |  TBLBUFF_READ.NEW_LINK_O :      823 C |
 TBLBUFF_READ.NEW_LINK_Z :      81F C |  TBLBUFF_READ.NEXTSRCH_TBL :    818 C |
 TBLBUFF_READ.NEXT_INDX :       6D6 C |  TBLBUFF_READ.NEXT_PRIO :       801 C |
 TBLBUFF_READ.NO_INDX :         701 C |  TBLBUFF_READ.PASS_2 :          800 C |
 TBLBUFF_READ.PICK_TBL :        851 C |  TBLBUFF_READ.REFILL :          7DE C |
 TBLBUFF_READ.REROLL :          7AB C |  TBLBUFF_READ.RESET_LINK :      86B C |
 TBLBUFF_READ.RNOT_PSG :        7DC C |  TBLBUFF_READ.SET_ASFULL :      84E C |
 TBLBUFF_READ.SINGL_FREE :      83C C |  TBLBUFF_READ.SINGL_LINK :      7D1 C |
 TBLBUFF_READ.SRCH_FREE :       7F0 C |  TBLBUFF_READ.SRCH_LINK :       78A C |
 TBLBUFF_READ.SRCH_LLOOP :      794 C |  TBLBUFF_READ.TRACK_CONT :      6BF C |
 TBLBUFF_READ.VALID :           6D4 C |  TBLFM :                       1A40 C |
 TBLFM3 :                      1AA0 C |  TBLFM6 :                      1AB8 C |
 TBLLIST :                     19CE C |  TBLPCM :                      1AD2 C |
 TBLPSG :                      19DE C |  TBLPSGN :                     1A28 C |
 TBLPWM :                      1B94 C |  TH :                      20000000 - |
 TICKCNT :                     1F82 C |  TICKFLAG :                    1F81 C |
 TICKSPSET :                   1F80 C |  TIME :               "10:45:10 PM" - |
 TIMERCTL :                      30 - | *TMR :                           2C - |
 TRACK_OUT :                    5E5 C |  TRACK_OUT.INDX_DEL :           5F3 C |
 TRACK_OUT.NOTHIN :             621 C |  TRANSFERROM :                 11C9 C |
 TRANSFERROM.DOUBLE :          11EC C |  TRANSFERROM.FROM_RAM :        1210 C |
 TRANSFERROM.TRANSFER :        122E C |  TRANSFERROM.WAIT :            1227 C |
 TRANSFERROM.X68KLAST :        1267 C |  TRANSFERROM.X68KLOOP :        1253 C |
 TRANSFERROM.X68KLPWT :        1275 C |  TRANSFERROM.X68KNOCARRY :     120A C |
 TRANSFERROM.X68KPWTLP :       1277 C |  TRKBLKS_0 :                   19B6 C |
 TRKBLKS_1 :                   19BE C |  TRKBLKS_2 :                   19C6 C |
 TRKBUFF_0 :                   18F6 C |  TRKBUFF_1 :                   1936 C |
 TRKBUFF_2 :                   1976 C |  TRKCACH_0 :                   1F00 C |
 TRKCACH_1 :                   1F20 C |  TRKCACH_2 :                   1F40 C |
*TRKCACH_3 :                   1F60 C |  TRKCHNLS :                    1E00 C |
 TRKHDRS_0 :                   1896 C |  TRKHDRS_1 :                   18B6 C |
 TRKHDRS_2 :                   18D6 C |  TRKLISTCACH :                 1C3E C |
 TRKLISTPAGE :                 1F86 C |  TRK_BANKBLK :                   17 - |
 TRK_BANKHEADS :                 16 - |  TRK_BANKINS :                   15 - |
 TRK_BLOCKS :                     4 - |  TRK_CACH :                       8 - |
 TRK_CACHHALF :                  10 - |  TRK_CHNINDX :                   26 - |
 TRK_CURRBLK :                   13 - |  TRK_MAXCHNL :                   18 - |
 TRK_PATT :                       6 - |  TRK_PRIORITY :                  14 - |
 TRK_READ :                       A - |  TRK_ROMBLKS :                   23 - |
 TRK_ROMINST :                   20 - |  TRK_ROMPATT :                   1D - |
 TRK_ROMPATTREAD :               1A - |  TRK_ROWPAUSE :                  11 - |
 TRK_ROWS :                       C - |  TRK_SEQID :                      1 - |
 TRK_SETBLK :                     2 - |  TRK_STATUS :                     0 - |
 TRK_TICKSET :                    3 - |  TRK_TICKTMR :                   12 - |
 TRK_VOLMASTER :                  E - |  TRK_VOLTARGET :                 19 - |
*TRUE :                           1 - | *TVMODE :                         0 - |
 UPD_TRACK :                    24E C |  UPD_TRACK.CHNL_FREE :          36B C |
 UPD_TRACK.CONT_CHNL :          376 C |  UPD_TRACK.DECROW :             31A C |
 UPD_TRACK.DECROW_E :           31D C |  UPD_TRACK.EFFECT_FILL :        549 C |
 UPD_TRACK.EFF_A :              3F3 C |  UPD_TRACK.EFF_B :              404 C |
 UPD_TRACK.EFF_C :              422 C |  UPD_TRACK.EXIT :               30E C |
 UPD_TRACK.FADE_OUT :           298 C |  UPD_TRACK.FIRST_BLK :          479 C |
 UPD_TRACK.FIRST_FILL :         550 C |  UPD_TRACK.FIRST_HEAD :         4C1 C |
 UPD_TRACK.GRAB_RHEAD :         5D2 C |  UPD_TRACK.HAS_NOTE :           325 C |
 UPD_TRACK.INC_CPATT :          425 C |  UPD_TRACK.KEEP_BLK :           497 C |
 UPD_TRACK.KEEP_IT :            4E7 C |  UPD_TRACK.KEEP_VOL :           2B1 C |
 UPD_TRACK.NEXT_CHNL :          350 C |  UPD_TRACK.NEXT_NOTE :          2FE C |
 UPD_TRACK.NO_EFF :             3BC C |  UPD_TRACK.NO_GLBL :            57C C |
 UPD_TRACK.NO_INS :             39E C |  UPD_TRACK.NO_NOTE :            393 C |
 UPD_TRACK.NO_VOL :             3A9 C |  UPD_TRACK.OLD_TYPE :           387 C |
 UPD_TRACK.RAN_OUT :            433 C |  UPD_TRACK.READ_TRACK :         26B C |
 UPD_TRACK.ROW_ACTIVE :         2F7 C |  UPD_TRACK.SET_TRACK :          45D C |
 UPD_TRACK.SFXMD :              2BB C |  UPD_TRACK.SRCH_NEW :           34B C |
 UPD_TRACK.TOO_MUCH :           2A5 C |  UPD_TRACK.TRACK_END :          536 C |
 UPD_TRACK.TRK_BUFFRS :         256 C |  VARNULLVRAM :                  7FF - |
 VARPRINTPAL :                    3 - |  VARPRINTVRAM :                 580 - |
 VBLK :                          80 - |  VDPSTS :                         A - |
 VDP_CTRL :                  C00004 - |  VDP_DATA :                  C00000 - |
*VERSION :                     142F - |  VIDEO_CLEAR :     FFFFFFFFFFFF0304 C |
*VIDEO_CLEARSCREEN :                                       FFFFFFFFFFFF0304 C |
 VIDEO_CLEARSCREEN.PMNEXT :                                FFFFFFFFFFFF038A C |
 VIDEO_CLEARSCREEN.PNEXT :                                 FFFFFFFFFFFF0376 C |
 VIDEO_CLEARSCREEN.SNEXT :                                 FFFFFFFFFFFF0364 C |
 VIDEO_CLEARSCREEN.XNEXT :                                 FFFFFFFFFFFF0348 C |
 VIDEO_CLEARSCREEN.YNEXT :                                 FFFFFFFFFFFF0356 C |
*VIDEO_COPY :      FFFFFFFFFFFF06A4 C |  VIDEO_COPY.DMAW : FFFFFFFFFFFF06B8 C |
 VIDEO_COPY.DMA_W :                                        FFFFFFFFFFFF0710 C |
*VIDEO_DMABLAST :  FFFFFFFFFFFF0870 C |
 VIDEO_DMABLAST.END :                                      FFFFFFFFFFFF08B4 C |
 VIDEO_DMABLAST.EXIT :                                     FFFFFFFFFFFF08C2 C |
 VIDEO_DMABLAST.NEXT :                                     FFFFFFFFFFFF0898 C |
 VIDEO_DMAMKENTRY :                                        FFFFFFFFFFFF0580 C |
 VIDEO_DMAMKENTRY.MK_SET :                                 FFFFFFFFFFFF05BC C |
 VIDEO_DMAMKENTRY.NORMAL :                                 FFFFFFFFFFFF05B6 C |
 VIDEO_DMAMKENTRY.RAN_OUT :                                FFFFFFFFFFFF062C C |
 VIDEO_DOPALFADE : FFFFFFFFFFFF043A C |
 VIDEO_DOPALFADE.ACTIVE :                                  FFFFFFFFFFFF0456 C |
 VIDEO_DOPALFADE.FADE_DONE :                               FFFFFFFFFFFF045E C |
 VIDEO_DOPALFADE.FADE_IN :                                 FFFFFFFFFFFF0460 C |
 VIDEO_DOPALFADE.FADE_LIST :                               FFFFFFFFFFFF0458 C |
 VIDEO_DOPALFADE.FADE_OUT :                                FFFFFFFFFFFF0502 C |
 VIDEO_DOPALFADE.NO_BLU :                                  FFFFFFFFFFFF04DA C |
 VIDEO_DOPALFADE.NO_BLU_O :                                FFFFFFFFFFFF055C C |
 VIDEO_DOPALFADE.NO_FNSH :                                 FFFFFFFFFFFF04F2 C |
 VIDEO_DOPALFADE.NO_FNSH_O :                               FFFFFFFFFFFF0570 C |
 VIDEO_DOPALFADE.NO_GRN :                                  FFFFFFFFFFFF04BA C |
 VIDEO_DOPALFADE.NO_GRN_O :                                FFFFFFFFFFFF0544 C |
 VIDEO_DOPALFADE.NO_MOVE :                                 FFFFFFFFFFFF0500 C |
 VIDEO_DOPALFADE.NO_MOVE_O :                               FFFFFFFFFFFF057E C |
 VIDEO_DOPALFADE.NO_RED :                                  FFFFFFFFFFFF049A C |
 VIDEO_DOPALFADE.NO_RED_O :                                FFFFFFFFFFFF052C C |
 VIDEO_DOPALFADE.NXT_PAL :                                 FFFFFFFFFFFF0478 C |
 VIDEO_DOPALFADE.NXT_PAL_O :                               FFFFFFFFFFFF0514 C |
 VIDEO_FADEIN :    FFFFFFFFFFFF0394 C | *VIDEO_FADEOUT :   FFFFFFFFFFFF03BA C |
 VIDEO_FADEPAL :   FFFFFFFFFFFF040C C |
 VIDEO_FADEPAL_MARS :                                      FFFFFFFFFFFF08FC C |
 VIDEO_FILL :      FFFFFFFFFFFF062E C |  VIDEO_FILL.DMAW : FFFFFFFFFFFF0642 C |
 VIDEO_FILL.DMA_W :                                        FFFFFFFFFFFF068C C |
 VIDEO_INIT :      FFFFFFFFFFFF0284 C |
 VIDEO_INIT.CLRRAM :                                       FFFFFFFFFFFF0290 C |
 VIDEO_INIT.LOOP : FFFFFFFFFFFF02A8 C |  VIDEO_LOADART :   FFFFFFFFFFFF0728 C |
*VIDEO_LOADART.FROM_RAM :                                  FFFFFFFFFFFF0792 C |
 VIDEO_LOADART.MK_SET :                                    FFFFFFFFFFFF0764 C |
 VIDEO_LOADART.NORMAL :                                    FFFFFFFFFFFF075E C |
 VIDEO_LOADART.SHARED_SETUP :                              FFFFFFFFFFFF0794 C |
*VIDEO_LOADMAP :   FFFFFFFFFFFF0A80 C |
 VIDEO_LOADMAP.CONT :                                      FFFFFFFFFFFF0AA6 C |
 VIDEO_LOADMAP.NODBLE :                                    FFFFFFFFFFFF0AC4 C |
 VIDEO_LOADMAP.NONULL :                                    FFFFFFFFFFFF0AA4 C |
 VIDEO_LOADMAP.XLOOP :                                     FFFFFFFFFFFF0A96 C |
 VIDEO_LOADMAP.YLOOP :                                     FFFFFFFFFFFF0A8C C |
 VIDEO_LOADPAL :   FFFFFFFFFFFF0416 C |
*VIDEO_LOADPAL_MARS :                                      FFFFFFFFFFFF0906 C |
 VIDEO_MARSGFXMODE :                                       FFFFFFFFFFFF08C4 C |
 VIDEO_MARSMAP_LOAD :                                      FFFFFFFFFFFF100C C |
 VIDEO_MARSMAP_LOAD.COPY_X :                               FFFFFFFFFFFF1038 C |
 VIDEO_MARSMAP_LOAD.COPY_Y :                               FFFFFFFFFFFF102C C |
 VIDEO_MARSMAP_SET :                                       FFFFFFFFFFFF0FF4 C |
 VIDEO_MARSPALFADE :                                       FFFFFFFFFFFF092E C |
 VIDEO_MARSPALFADE.ACTIVE :                                FFFFFFFFFFFF094A C |
 VIDEO_MARSPALFADE.FADE_DONE :                             FFFFFFFFFFFF0952 C |
 VIDEO_MARSPALFADE.FADE_IN :                               FFFFFFFFFFFF0954 C |
 VIDEO_MARSPALFADE.FADE_LIST :                             FFFFFFFFFFFF094C C |
 VIDEO_MARSPALFADE.FADE_OUT :                              FFFFFFFFFFFF09FE C |
 VIDEO_MARSPALFADE.NO_BLU :                                FFFFFFFFFFFF09CE C |
 VIDEO_MARSPALFADE.NO_BLU_O :                              FFFFFFFFFFFF0A5A C |
 VIDEO_MARSPALFADE.NO_FNSH :                               FFFFFFFFFFFF09EE C |
 VIDEO_MARSPALFADE.NO_FNSH_O :                             FFFFFFFFFFFF0A70 C |
 VIDEO_MARSPALFADE.NO_GRN :                                FFFFFFFFFFFF09AE C |
 VIDEO_MARSPALFADE.NO_GRN_O :                              FFFFFFFFFFFF0A42 C |
 VIDEO_MARSPALFADE.NO_MOVE :                               FFFFFFFFFFFF09FC C |
 VIDEO_MARSPALFADE.NO_MOVE_O :                             FFFFFFFFFFFF0A7E C |
 VIDEO_MARSPALFADE.NO_RED :                                FFFFFFFFFFFF098E C |
 VIDEO_MARSPALFADE.NO_RED_O :                              FFFFFFFFFFFF0A2A C |
 VIDEO_MARSPALFADE.NXT_PAL :                               FFFFFFFFFFFF096C C |
 VIDEO_MARSPALFADE.NXT_PAL_O :                             FFFFFFFFFFFF0A12 C |
 VIDEO_MARS_SYNCFRAME :                                    FFFFFFFFFFFF08E8 C |
 VIDEO_MARS_SYNCFRAME.WAIT_MARS :                          FFFFFFFFFFFF08F0 C |
 VIDEO_PRINT :     FFFFFFFFFFFF0B00 C |
 VIDEO_PRINT.DONIBL :                                      FFFFFFFFFFFF0C1C C |
 VIDEO_PRINT.EXIT :                                        FFFFFFFFFFFF0B8C C |
 VIDEO_PRINT.ISBYTE :                                      FFFFFFFFFFFF0B56 C |
 VIDEO_PRINT.ISLONG :                                      FFFFFFFFFFFF0B7A C |
 VIDEO_PRINT.ISWORD :                                      FFFFFFFFFFFF0B68 C |
 VIDEO_PRINT.LNGLOOP :                                     FFFFFFFFFFFF0C0C C |
 VIDEO_PRINT.LOOP :                                        FFFFFFFFFFFF0B18 C |
 VIDEO_PRINT.LOWR :                                        FFFFFFFFFFFF0C2C C |
 VIDEO_PRINT.NEWJUMP :                                     FFFFFFFFFFFF0B12 C |
 VIDEO_PRINT.NEXT :                                        FFFFFFFFFFFF0B52 C |
 VIDEO_PRINT.NEXTV :                                       FFFFFFFFFFFF0B96 C |
 VIDEO_PRINT.NOTHING :                                     FFFFFFFFFFFF0C38 C |
 VIDEO_PRINT.PUTTEXT :                                     FFFFFFFFFFFF0B44 C |
 VIDEO_PRINT.VBYTE :                                       FFFFFFFFFFFF0BC8 C |
 VIDEO_PRINT.VLONG :                                       FFFFFFFFFFFF0C14 C |
 VIDEO_PRINT.VWORD :                                       FFFFFFFFFFFF0BEA C |
 VIDEO_PRINTINIT : FFFFFFFFFFFF0AD6 C | *VIDEO_PRINTPAL :  FFFFFFFFFFFF0AF0 C |
 VIDEO_RENDER :    FFFFFFFFFFFF07DC C |  VIDEO_RUNFADE :   FFFFFFFFFFFF03FA C |
 VIDEO_UPDATE :    FFFFFFFFFFFF02B0 C |
*VIDEO_UPDATE.EXIT :                                       FFFFFFFFFFFF02CC C |
 VIDEO_UPDATE.LOOP :                                       FFFFFFFFFFFF02C0 C |
 VIDEO_WAITFADE :  FFFFFFFFFFFF03E0 C |  VIDMARS_PAL :     FFFFFFFFFFFF090A C |
 VIDMARS_PAL.LOOP :                                        FFFFFFFFFFFF0922 C |
 VIDMD_PAL :       FFFFFFFFFFFF041A C |  VIDMD_PAL.LOOP :  FFFFFFFFFFFF0432 C |
 VID_PICKLAYER :   FFFFFFFFFFFF0C3E C |
 VID_PICKLAYER.GOLYR :                                     FFFFFFFFFFFF0C88 C |
 VID_PICKLAYER.NOWD :                                      FFFFFFFFFFFF0C72 C |
 VID_PICKLAYER.PLAWND :                                    FFFFFFFFFFFF0C64 C |
 VID_PICKLAYER.THISSZ :                                    FFFFFFFFFFFF0CA8 C |
 VID_PICKLAYER.THISSZJ :                                   FFFFFFFFFFFF0CD0 C |
 VINTCLR :                       16 - | *VINTENBL :                      20 - |
 VINT_DEFAULT :    FFFFFFFFFFFF15B0 C | *VIRQ_ON :                        8 - |
 VRESINTCLR :                    14 - |  WAVE_FLAGS :                  1F94 C |
 WAVE_LEN :                    1F8C C |  WAVE_LOOP :                   1F8F C |
 WAVE_PITCH :                  1F92 C | *WAVE_PRIORITY :               1F95 C |
 WAVE_START :                  1F89 C |  WAVFREQ_CDPCM :               1678 C |
 WAVFREQ_LIST :                1600 C |  X68KSRCLSB :                  1F9E C |
 X68KSRCMID :                  1F9F C | *YM_CTRL_1 :                 A04000 - |
*YM_CTRL_2 :                 A04002 - | *YM_DATA_1 :                 A04001 - |
*YM_DATA_2 :                 A04003 - | *Z80SYNTAX :                      0 - |
 Z80_BUS :                   A11100 - |  Z80_CODE :                  881FB4 C |
 Z80_CODE_END :              883F6E C |  Z80_CPU :                   A00000 - |
 Z80_INIT :                      50 C |  Z80_RESET :                 A11200 - |
*ZBANK :                       6000 - |  ZDRVFIFO :                      40 - |
 ZDRVFWRT :                      2E - | *ZDRVMARSBLK :                   37 - |
*ZDRVMCDBLK :                    36 - |  ZDRVRAMLEN :                    30 - |
 ZDRVRAMSRC :                    35 - |  ZDRVROMBLK :                    2F - |
 ZMARS_SEND :                  1095 C |  ZMARS_SEND.BLOCKED_M :        1112 C |
 ZMARS_SEND.CLR_PWM :          1118 C |  ZMARS_SEND.NEXT_COMM :        10EA C |
 ZMARS_SEND.NEXT_PACKET :      10DF C |  ZMARS_SEND.PWM_EXIT :         111C C |
 ZMARS_SEND.SET_COMBANK :      111D C |  ZMARS_SEND.WAIT_ENTER :       10B3 C |
 ZMARS_SEND.W_PASS2 :          1100 C | *ZOPCEX :                         8 - |
 ZOPCEXX :                       D9 - | *ZOPCNOP :                        0 - |
 ZOPCPUSHAF :                    F5 - |  ZOPCRET :                       C9 - |
 ZPSG_CTRL :                   7F11 - |  ZSET_TESTME :                    0 - |
 ZYM_CTRL_1 :                  4000 - |  ZYM_CTRL_2 :                  4002 - |
 ZYM_DATA_1 :                  4001 - |  ZYM_DATA_2 :                  4003 - |
 _CCR :                    FFFFFE92 - | *_DMACHANNEL0 :            FFFFFF8C - |
*_DMACHANNEL1 :            FFFFFF9C - | *_DMACOUNT0 :              FFFFFF88 - |
*_DMACOUNT1 :              FFFFFF98 - | *_DMADEST0 :               FFFFFF84 - |
*_DMADEST1 :               FFFFFF94 - |  _DMAOPERATION :           FFFFFFB0 - |
*_DMAREQACK0 :             FFFFFFB4 - | *_DMAREQACK1 :             FFFFFFB8 - |
 _DMASOURCE0 :             FFFFFF80 - | *_DMASOURCE1 :             FFFFFF90 - |
*_DMAVECTORE0 :            FFFFFFA4 - | *_DMAVECTORE1 :            FFFFFFAC - |
*_DMAVECTORN0 :            FFFFFFA0 - | *_DMAVECTORN1 :            FFFFFFA8 - |
 _FRAMEBUFFER :            24000000 - | *_FRC_H :                         2 - |
*_FRC_L :                         3 - |  _FRT :                    FFFFFE10 - |
*_HRH :                    FFFFFF10 - | *_HRL :                    FFFFFF14 - |
*_HRL32 :                  FFFFFF04 - | *_JR :                     FFFFFF00 - |
*_OCR_H :                         4 - | *_OCR_L :                         5 - |
 _OVERWRITE :              24020000 - |  _PALETTE :                20004200 - |
*_SERIAL :                 FFFFFE00 - |  _SYSREG :                 20004000 - |
*_TCR :                           6 - | *_TCSR :                          1 - |
*_TIER :                          0 - | *_TOCR :                          7 - |
 _VDPREG :                 20004100 - |

   1578 symbols
    273 unused symbols

 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 4 - 02/23/2024 10:45:10 PM


  Defined Macros:
  ---------------

CPU_ME                                | DATA_BKEND                           
DATA_BKSET                            | ENDSTRCT                             
ERREPORT                              | GEMAHEAD                             
GEMATRK                               | GINSDAC                              
GINSFM                                | GINSFM3                              
GINSNULL                              | GINSPCM                              
GINSPSG                               | GINSPSGN                             
GINSPWM                               | GSMPHEAD                             
ISO_FILE                              | ISO_SETFS                            
REPORT                                | ROMPAD                               
SCREEN_CODE                           | SDRAM_BKEND                          
SDRAM_BKSET                           | SET_DBANKS                           
STRCT                                 | VDP_SHOWME                           

     26 macros

 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 5 - 02/23/2024 10:45:10 PM


  Defined Functions:
  ------------------

NOTZ80                                | MAP_SIZE                             
CELL_VRAM                             | LOCATE                               

 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 6 - 02/23/2024 10:45:10 PM


  Code Pages:
  ----------

STANDARD (0 changed characters)

1 code page

0.21 seconds assembly time

  15121 lines source file
  15895 lines incl. macro expansions
      5 passes
      0 errors
      0 warnings
