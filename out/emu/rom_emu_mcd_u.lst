 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 1 - 02/28/2024 03:57:57 AM


       1/       0 :                     ; ===========================================================================
       2/       0 :                     ; NIKONA MD 16-BIT/32-BIT SDK
       3/       0 :                     ; (C)2023-2024 GenesisFan64
       4/       0 :                     ;
       5/       0 :                     ; For developing games on the Genesis-family of systems
       6/       0 :                     ; including Sega CD, Sega 32X, Sega CD32X and Sega Pico
       7/       0 :                     ;
       8/       0 :                     ; Assemble with a modified AS Macro Assembler by flamewing
       9/       0 :                     ; and a custom version of p2bin:
      10/       0 :                     ;
      11/       0 :                     ; asl main.asm -i "." -olist ROM.lst -q -xx -A -L -D (flags)
      12/       0 :                     ; p2bin -p=00 main.p ROM.bin
      13/       0 :                     ;
      14/       0 :                     ; ASSEMBLER FLAGS:
      15/       0 :                     ; MCD,MARS,MARSCD,PICO,CDREGION,EMU
      16/       0 :                     
      17/       0 :                     ; * System targets, MUST include ALL and set 1 to
      18/       0 :                     ; the target console and the others to 0
      19/       0 :                     ;    MCD - Sega CD
      20/       0 :                     ;   MARS - Sega 32X
      21/       0 :                     ; MARSCD - Sega CD32X
      22/       0 :                     ;   PICO - Sega Pico
      23/       0 :                     ; * ONLY CHOOSE ONE TARGET AT THE TIME *
      24/       0 :                     ;
      25/       0 :                     ; By default the code builds to stock Genesis
      26/       0 :                     ;
      27/       0 :                     ; CDREGION - SEGACD/CD32X ONLY, Set ROM region:
      28/       0 :                     ;            0=Japan 1=USA 2=Europe
      29/       0 :                     ;      EMU - 0=Real hardware, 1=Emulator only
      30/       0 :                     ;
      31/       0 :                     ; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣴⣶⡿⠿⠿⠿⣶⣦⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀
      32/       0 :                     ; ⠀⠀⠀⠀⠀⠀⢀⣠⣶⢟⣿⠟⠁⢰⢋⣽⡆⠈⠙⣿⡿⣶⣄⡀⠀⠀⠀⠀⠀⠀
      33/       0 :                     ; ⠀⠀⠀⠀⣠⣴⠟⠋⢠⣾⠋⠀⣀⠘⠿⠿⠃⣀⠀⠈⣿⡄⠙⠻⣦⣄⠀⠀⠀⠀
      34/       0 :                     ; ⠀⢀⣴⡿⠋⠁⠀⢀⣼⠏⠺⠛⠛⠻⠂⠐⠟⠛⠛⠗⠘⣷⡀⠀⠈⠙⢿⣦⡀⠀
      35/       0 :                     ; ⣴⡟⢁⣀⣠⣤⡾⢿⡟⠀⠀⠀⠘⢷⠾⠷⡾⠃⠀⠀⠀⢻⡿⢷⣤⣄⣀⡈⢻⣦
      36/       0 :                     ; ⠙⠛⠛⠋⠉⠁⠀⢸⡇⠀⠀⢠⣄⠀⠀⠀⠀⣠⡄⠀⠀⢸⡇⠀⠈⠉⠙⠛⠛⠋
      37/       0 :                     ; ⠀⠀⠀⠀⠀⠀⠀⢸⡇⢾⣦⣀⣹⡧⠀⠀⢼⣏⣀⣴⡷⢸⡇⠀⠀⠀⠀⠀⠀⠀
      38/       0 :                     ; ⠀⠀⠀⠀⠀⠀⠀⠸⣧⡀⠈⠛⠛⠁⠀⠀⠈⠛⠛⠁⢀⣼⠇⠀⠀⠀⠀⠀⠀⠀
      39/       0 :                     ; ⠀⠀⠀⠀⠀⠀⠀⢀⣘⣿⣶⣤⣀⣀⣀⣀⣀⣀⣤⣶⣿⣃⠀⠀⠀⠀⠀⠀⠀⠀
      40/       0 :                     ; ⠀⠀⠀⠀⠀⣠⡶⠟⠋⢉⣀⣽⠿⠉⠉⠉⠹⢿⣍⣈⠉⠛⠷⣦⡀⠀⠀⠀⠀⠀
      41/       0 :                     ; ⠀⠀⠀⠀⢾⣯⣤⣴⡾⠟⠋⠁⠀⠀⠀⠀⠀⠀⠉⠛⠷⣶⣤⣬⣿⠀⠀⠀⠀⠀
      42/       0 :                     ; ⠀⠀⠀⠀⠀⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠁⠀⠀⠀⠀⠀
      43/       0 :                     ; ===========================================================================
      44/       0 :                     
      45/       0 :                     ; ====================================================================
      46/       0 :                     ; ----------------------------------------------------------------
      47/       0 :                     ; USER SETTINGS
      48/       0 :                     ; ----------------------------------------------------------------
      49/       0 :                     
      50/       0 :                     ; --------------------------------------------------------
      51/       0 :                     ; 68000 RAM SIZES (MAIN-CPU)
      52/       0 :                     ;
      53/       0 :                     ; MAX_SysCode, MAX_UserCode are only used in Sega CD
      54/       0 :                     ; Sega 32X and CD32X.
      55/       0 :                     ; These sections are free to use on stock Genesis
      56/       0 :                     ; and Pico in case you are not interested on the add-ons.
      57/       0 :                     ;
      58/       0 :                     ; RESERVED RAM ADDRESSES:
      59/       0 :                     ; $FFFB00-$FFFD00 | Stack area a7
      60/       0 :                     ; $FFFD00-$FFFDFF | RESERVED for the Sega CD Vector jumps
 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 2 - 02/28/2024 03:57:57 AM


      61/       0 :                     ;                   FREE if running on cartridge
      62/       0 :                     ;                   (Genesis,32X,Pico)
      63/       0 :                     ; $FFFE00-$FFFEFF | RESERVED for Sega CD, BIOS uses this
      64/       0 :                     ;                   area as temporals
      65/       0 :                     ;                   ** Not sure if this can be used after
      66/       0 :                     ;                   during the application **
      67/       0 :                     ; $FFFF00-$FFFFFF | RESERVED for the Sound Driver:
      68/       0 :                     ;                   The Z80 driver writes to this area
      69/       0 :                     ;                   AND posibilly for the PICO 68k
      70/       0 :                     ;                   driver version of GEMA
      71/       0 :                     ; --------------------------------------------------------
      72/       0 :                     
      73/       0 : =$2000               MAX_SysCode	equ $2000	; Task routines ** CD/32X/CD32X ONLY **
      74/       0 : =$8000               MAX_UserCode	equ $8000	; USER code ** CD/32X/CD32X ONLY **
      75/       0 : =$1800               MAX_ScrnBuff	equ $1800	; Current screen buffer
      76/       0 : =$2000               MAX_MdVideo	equ $2000	; Video cache'd visuals, registers, etc.
      77/       0 : =$600                MAX_MdSystem	equ $0600	; Internal lib stuff and a copy of save data for reading/writing
      78/       0 : =$C00                MAX_MdOther	equ $0C00	; Add-on stuff
      79/       0 :                     
      80/       0 :                     ; ====================================================================
      81/       0 :                     
      82/       0 :                     		org 0
      83/       0 :                     		cpu 		68000		; Starting CPU is 68000
      84/       0 :                     		padding		off		; Dont pad dc.b
      85/       0 :                     		listing 	purecode	; Want listing file
      86/       0 :                     		supmode 	on 		; Supervisor mode (68K)
      87/       0 :                     		dottedstructs	off
      88/       0 :                     		page 		0
      89/       0 :                     
      90/       0 :                     ; ====================================================================
      91/       0 :                     ; ----------------------------------------------------------------
      92/       0 :                     ; Includes
      93/       0 :                     ; ----------------------------------------------------------------
      94/       0 :                     
      95/       0 :                     		include	"macros.asm"		; Assembler macros
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; MACROS section
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; THIS MUST BE INCLUDED AT THE VERY START.
(1)    6/       0 :                     ; ----------------------------------------------------------------
(1)    7/       0 :                     
(1)    8/       0 :                     ; ====================================================================
(1)    9/       0 :                     ; --------------------------------------------------------
(1)   10/       0 :                     ; Functions
(1)   11/       0 :                     ; --------------------------------------------------------
(1)   12/       0 :                     
(1)   13/       0 :                     locate		function a,b,c,(b&$FF)|(a<<8&$FF00)|(c<<16&$FF0000)	; VDP locate: X pos|Y pos|Layer for some video
(1)   14/       0 :                     cell_vram	function a,(a<<5)					; Vram position in 8x8 CELLS
(1)   15/       0 :                     map_size	function l,r,(((l-1)/8)<<16&$FFFF0000|((r-1)/8)&$FFFF)	; Full w/h sizes, for cell sizes use doubleword
(1)   16/       0 :                     ; md_ramloc	function x,-(-x)&$FFFFFFFF
(1)   17/       0 :                     
(1)   18/       0 :                     ; ====================================================================
(1)   19/       0 :                     ; --------------------------------------------------------
(1)   20/       0 :                     ; Macros
(1)   21/       0 :                     ; --------------------------------------------------------
(1)   22/       0 :                     
(1)   23/       0 : =$0                  currPadding	set 0
(1)   24/       0 :                     notZ80		function cpu,(cpu<>128)&&(cpu<>32988)
(1)   25/       0 :                     
(1)   26/       0 :                     ; -------------------------------------
(1)   27/       0 :                     ; Reserve memory
(1)   28/       0 :                     ;
(1)   29/       0 :                     ; (Doesn't work on Z80)
(1)   30/       0 :                     ; -------------------------------------
(1)   31/       0 :                     
(1)   32/       0 :                     strct		macro thisinput			; Reserve memory address
(1)   33/       0 :                     GLBL_LASTPC	set *
(1)   34/       0 :                     		dephase
(1)   35/       0 :                     		phase thisinput
(1)   36/       0 :                     GLBL_LASTORG	set *
(1)   37/       0 :                     		endm
(1)   38/       0 :                     
(1)   39/       0 :                     ; -------------------------------------
(1)   40/       0 :                     ; Finish struct
(1)   41/       0 :                     ; -------------------------------------
(1)   42/       0 :                     
(1)   43/       0 :                     endstrct	macro				; Then finish the custom struct.
(1)   44/       0 :                     		org GLBL_LASTORG
(1)   45/       0 :                     		phase GLBL_LASTPC
(1)   46/       0 :                     		endm
(1)   47/       0 :                     
(1)   48/       0 :                     ; -------------------------------------
(1)   49/       0 :                     ; Report memory usage
(1)   50/       0 :                     ; -------------------------------------
(1)   51/       0 :                     
(1)   52/       0 :                     report		macro text,dis,dat
(1)   53/       0 :                     	if MOMPASS == 2
(1)   54/       0 :                     		if dat == -1
(1)   55/       0 :                     			message text+": \{(dis)&$FFFFFF}"
(1)   56/       0 :                     		else
(1)   57/       0 :                     			if dis > dat
(1)   58/       0 :                     				warning "RAN OUT OF "+text+" SPACE (\{(dis)&$FFFFFF} of \{(dat)&$FFFFFF})"
(1)   59/       0 :                     			else
(1)   60/       0 :                     				message text+" uses \{(dis)&$FFFFFF} of \{(dat)&$FFFFFF}"
(1)   61/       0 :                     			endif
(1)   62/       0 :                     		endif
(1)   63/       0 :                     	endif
(1)   64/       0 :                     		endm
(1)   65/       0 :                     
(1)   66/       0 :                     ; -------------------------------------
(1)   67/       0 :                     ; Same thing but only show on error
(1)   68/       0 :                     ; -------------------------------------
(1)   69/       0 :                     
(1)   70/       0 :                     erreport	macro text,dis,dat
(1)   71/       0 :                     	if MOMPASS == 2
(1)   72/       0 :                     		if dat == -1
(1)   73/       0 :                     			message text+": \{(dis)&$FFFFFF}"
(1)   74/       0 :                     		else
(1)   75/       0 :                     			if dis > dat
(1)   76/       0 :                     				error "RAN OUT OF "+text+" (\{(dis)&$FFFFFF} of \{(dat)&$FFFFFF})"
(1)   77/       0 :                     ; 			else
(1)   78/       0 :                     ; 				message text+" uses \{(dis)&$FFFFFF} of \{(dat)&$FFFFFF}"
(1)   79/       0 :                     			endif
(1)   80/       0 :                     		endif
(1)   81/       0 :                     	endif
(1)   82/       0 :                     		endm
(1)   83/       0 :                     
(1)   84/       0 :                     ; -------------------------------------
(1)   85/       0 :                     ; ZERO Fill padding
(1)   86/       0 :                     ; -------------------------------------
(1)   87/       0 :                     
(1)   88/       0 :                     rompad		macro address			; Zero fill
(1)   89/       0 :                     diff := address - *
(1)   90/       0 :                     		if diff < 0
(1)   91/       0 :                     			error "too much stuff before org $\{address} ($\{(-diff)} bytes)"
(1)   92/       0 :                     		else
(1)   93/       0 :                     			while diff > 1024
(1)   94/       0 :                     				; AS can only generate 1 kb of code on a single line
(1)   95/       0 :                     				dc.b [1024]0
(1)   96/       0 :                     diff := diff - 1024
(1)   97/       0 :                     			endm
(1)   98/       0 :                     			dc.b [diff]0
(1)   99/       0 :                     		endif
(1)  100/       0 :                     	endm
(1)  101/       0 :                     
(1)  102/       0 :                     ; ====================================================================
(1)  103/       0 :                     ; --------------------------------------------------------
(1)  104/       0 :                     ; ISO filesystem macros
(1)  105/       0 :                     ; --------------------------------------------------------
(1)  106/       0 :                     
(1)  107/       0 :                     ; Set a ISO file
(1)  108/       0 :                     ; NOTE: a valid ISO head is required from $8000 to $B7FF
(1)  109/       0 :                     ; DATES are random here
(1)  110/       0 :                     
(1)  111/       0 :                     iso_setfs	macro type,start,end
(1)  112/       0 :                     .fstrt:
(1)  113/       0 :                     		dc.b .fend-.fstrt				; Block size
(1)  114/       0 :                     		dc.b 0						; zero
(1)  115/       0 :                     		dc.b (start>>11&$FF),(start>>19&$FF)		; Start sector, little
(1)  116/       0 :                     		dc.b (start>>27&$FF),(start>>35&$FF)
(1)  117/       0 :                     		dc.l start>>11					; Start sector, big
(1)  118/       0 :                     		dc.b ((end-start)&$FF),((end-start)>>8&$FF)	; Filesize, little
(1)  119/       0 :                     		dc.b ((end-start)>>16&$FF),((end-start)>>24&$FF)
(1)  120/       0 :                     		dc.l end-start					; Filesize, big
(1)  121/       0 :                     		dc.b (2023-1900)+1				; Year
(1)  122/       0 :                     		dc.b 0,0,0,0,0,0				; TODO
(1)  123/       0 :                     		dc.b 2						; File flags
(1)  124/       0 :                     		dc.b 0,0
(1)  125/       0 :                     		dc.b 1,0					; Volume sequence number, little
(1)  126/       0 :                     		dc.b 0,1					; Volume sequence number, big
(1)  127/       0 :                     		dc.b 1,type
(1)  128/       0 :                     .fend:
(1)  129/       0 :                     		endm
(1)  130/       0 :                     
(1)  131/       0 :                     iso_file	macro filename,start,end
(1)  132/       0 :                     .fstrt:		dc.b .fend-.fstrt				; Block size
(1)  133/       0 :                     		dc.b 0						; zero
(1)  134/       0 :                     		dc.b (start>>11&$FF),(start>>19&$FF)		; Start sector, little
(1)  135/       0 :                     		dc.b (start>>27&$FF),(start>>35&$FF)
(1)  136/       0 :                     		dc.l start>>11					; Start sector, big
(1)  137/       0 :                     		dc.b ((end-start)&$FF),((end-start)>>8&$FF)	; Filesize, little
(1)  138/       0 :                     		dc.b ((end-start)>>16&$FF),((end-start)>>24&$FF)
(1)  139/       0 :                     		dc.l end-start					; Filesize, big
(1)  140/       0 :                     		dc.b (2023-1900)+1				; Year
(1)  141/       0 :                     		dc.b 0,0,0,0,0,0				; TODO
(1)  142/       0 :                     		dc.b 0						; File flags
(1)  143/       0 :                     		dc.b 0,0
(1)  144/       0 :                     		dc.b 1,0					; Volume sequence number, little
(1)  145/       0 :                     		dc.b 0,1					; Volume sequence number, big
(1)  146/       0 :                     		dc.b .flend-.flen
(1)  147/       0 :                     .flen:		dc.b filename,";1"
(1)  148/       0 :                     .flend:		dc.b 0
(1)  149/       0 :                     .fend:
(1)  150/       0 :                     		endm
(1)  151/       0 :                     
(1)  152/       0 :                     ; ====================================================================
(1)  153/       0 :                     ; --------------------------------------------------------
(1)  154/       0 :                     ; Nikona macros
(1)  155/       0 :                     ; --------------------------------------------------------
(1)  156/       0 :                     
(1)  157/       0 :                     ; ---------------------------------------------
(1)  158/       0 :                     ; Screen mode code
(1)  159/       0 :                     ; ---------------------------------------------
(1)  160/       0 :                     
(1)  161/       0 :                     screen_code macro lblstart,lblend,path
(1)  162/       0 :                     	if MCD|MARSCD
(1)  163/       0 :                     		align $800		; SCD/CD32X sector align
(1)  164/       0 :                     	elseif MARS
(1)  165/       0 :                     		align 4
(1)  166/       0 :                     		phase $880000+*		; 32X ROM-area
(1)  167/       0 :                     	endif
(1)  168/       0 :                     lblstart label *
(1)  169/       0 :                     	if MARS
(1)  170/       0 :                     		dephase
(1)  171/       0 :                     	endif
(1)  172/       0 :                     
(1)  173/       0 :                     mctopscrn:
(1)  174/       0 :                     	if MARS|MCD|MARSCD
(1)  175/       0 :                     		phase RAM_UserCode	; SCD/32X/CD32X relocate to RAM area
(1)  176/       0 :                     	endif
(1)  177/       0 :                     mcscrn_s:
(1)  178/       0 :                     	include path;"game/screen_0/code.asm"
(1)  179/       0 :                     mcscrn_e:
(1)  180/       0 :                     	if MARS
(1)  181/       0 :                     		dephase	; dephase RAM section
(1)  182/       0 :                     		dephase ; dephase $880000+ section
(1)  183/       0 :                     	elseif MCD|MARSCD
(1)  184/       0 :                     		dephase
(1)  185/       0 :                     		phase mctopscrn+(mcscrn_e-RAM_UserCode)
(1)  186/       0 :                     		align $800
(1)  187/       0 :                     ; Md_Screen00_e:
(1)  188/       0 :                     lblend label *
(1)  189/       0 :                     	endif
(1)  190/       0 :                     	if MCD|MARS|MARSCD
(1)  191/       0 :                     		report "THIS SCREEN's code",mcscrn_e-RAM_UserCode,MAX_UserCode
(1)  192/       0 :                     	endif
(1)  193/       0 :                     	endm
(1)  194/       0 :                     
(1)  195/       0 :                     ; ---------------------------------------------
(1)  196/       0 :                     ; 68K data bank
(1)  197/       0 :                     ; ---------------------------------------------
(1)  198/       0 :                     
(1)  199/       0 :                     data_bkset macro startlbl,except
(1)  200/       0 :                     	if MCD|MARSCD
(1)  201/       0 :                     		align $800
(1)  202/       0 :                     	elseif MARS
(1)  203/       0 :                     		align 4
(1)  204/       0 :                     	endif
(1)  205/       0 :                     ; MCD_DBANK0:
(1)  206/       0 :                     startlbl label *
(1)  207/       0 :                     	if MCD|MARSCD
(1)  208/       0 :                     		phase sysmcd_wram
(1)  209/       0 :                     	elseif MARS
(1)  210/       0 :                     ; 		dephase
(1)  211/       0 :                     	if except==-1
(1)  212/       0 :                     		phase $900000+*	; First 32X data bank
(1)  213/       0 :                     	else
(1)  214/       0 :                     		phase $900000
(1)  215/       0 :                     	endif
(1)  216/       0 :                     	endif
(1)  217/       0 :                     	endm
(1)  218/       0 :                     
(1)  219/       0 :                     data_bkend macro startlbl,endlbl,thissize
(1)  220/       0 :                     
(1)  221/       0 :                     	if MARS
(1)  222/       0 :                     		dephase
(1)  223/       0 :                     		if thissize > $40000
(1)  224/       0 :                     			warning "THIS BANK SIZE IS TOO LARGE FOR WORD-RAM (CD/CD32X)"
(1)  225/       0 :                     		endif
(1)  226/       0 :                     		report "THIS 68K DATA BANK at $900000",thissize,$100000
(1)  227/       0 :                     	elseif MCD|MARSCD
(1)  228/       0 :                     		dephase
(1)  229/       0 :                     		align $800
(1)  230/       0 :                     endlbl label *	; <-- CD/CD32X ONLY
(1)  231/       0 :                     		report "THIS 68K DATA BANK at WORD-RAM",thissize,$40000
(1)  232/       0 :                     	endif
(1)  233/       0 :                     	endm
(1)  234/       0 :                     
(1)  235/       0 :                     ; --------------------------------------------------------
(1)  236/       0 :                     ; 32X ONLY
(1)  237/       0 :                     ; --------------------------------------------------------
(1)  238/       0 :                     
(1)  239/       0 :                     sdram_bkset macro thislbl,endlbl
(1)  240/       0 :                     	if MCD|MARSCD
(1)  241/       0 :                     		align $800
(1)  242/       0 :                     	elseif MARS
(1)  243/       0 :                     		align 4
(1)  244/       0 :                     		phase $880000+*
(1)  245/       0 :                     	endif
(1)  246/       0 :                     ; MARSDATA_DEFAULT:
(1)  247/       0 :                     thislbl label *
(1)  248/       0 :                     	if MARS
(1)  249/       0 :                     		dephase
(1)  250/       0 :                     	endif
(1)  251/       0 :                     	if MARS|MARSCD
(1)  252/       0 :                     		dc.l endlbl-thislbl
(1)  253/       0 :                     		phase SH2_USER_DATA
(1)  254/       0 :                     	endif
(1)  255/       0 :                     	endm
(1)  256/       0 :                     
(1)  257/       0 :                     ; ---------------------------------------------
(1)  258/       0 :                     
(1)  259/       0 :                     sdram_bkend macro thislbl,endlbl
(1)  260/       0 :                     	if MARS|MARSCD
(1)  261/       0 :                     		dephase
(1)  262/       0 :                     		align 8	; <-- DREQ alignment
(1)  263/       0 :                     	endif
(1)  264/       0 :                     	if MCD|MARSCD
(1)  265/       0 :                     endlbl label *
(1)  266/       0 :                     		align $800	; <-- AS failing
(1)  267/       0 :                     ; 		dc.l 0
(1)  268/       0 :                     	elseif MARS
(1)  269/       0 :                     		phase $880000+*
(1)  270/       0 :                     endlbl label *
(1)  271/       0 :                     		dephase
(1)  272/       0 :                     	endif
(1)  273/       0 :                     
(1)  274/       0 :                     	if MARS|MARSCD
(1)  275/       0 :                     		report "SH2 SDRAM DATA: thislbl",endlbl-thislbl,(CS3|$40000)-SH2_USER_DATA
(1)  276/       0 :                     	endif
(1)  277/       0 :                     	endm
(1)  278/       0 :                     
(1)  279/       0 :                     ; --------------------------------------------------------
(1)  280/       0 :                     ; Set data bank(s) for the current screen
(1)  281/       0 :                     ;
(1)  282/       0 :                     ; mcdpos:
(1)  283/       0 :                     ; 	dc.b "FILENAME.BIN",0
(1)  284/       0 :                     ; 	align 2
(1)  285/       0 :                     ;
(1)  286/       0 :                     ; marspos:
(1)  287/       0 :                     ; 	dc.l MARSDATA_DEFAULT		; 32X Cartridge point (UNUSED on CD32X)
(1)  288/       0 :                     ; 	dc.b "MARSD_00.BIN",0		; CD32X Filename (UNUSED on 32X Cartridge)
(1)  289/       0 :                     ; 	align 2
(1)  290/       0 :                     ; --------------------------------------------------------
(1)  291/       0 :                     
(1)  292/       0 :                     set_dbanks macro mcdpos,marspos
(1)  293/       0 :                     	if MARS|MARSCD
(1)  294/       0 :                     		lea	marspos(pc),a0		; 32X/CD32X: SH2 side data
(1)  295/       0 :                     		bsr	System_MarsDataPack
(1)  296/       0 :                     	endif
(1)  297/       0 :                     	if MCD|MARSCD
(1)  298/       0 :                     		bsr	System_McdSubWait
(1)  299/       0 :                     		lea	mcdpos(pc),a0		; CD/CD32X: Genesis data
(1)  300/       0 :                     		bsr	System_McdTrnsfr_WRAM
(1)  301/       0 :                     	endif
(1)  302/       0 :                     	endm
(1)  303/       0 :                     
(1)  304/       0 :                     ; ---------------------------------------------
(1)  305/       0 :                     ; VDP color debug
(1)  306/       0 :                     ; ---------------------------------------------
(1)  307/       0 :                     
(1)  308/       0 :                     vdp_showme	macro color
(1)  309/       0 :                     		move.l	#$C0000000,(vdp_ctrl).l
(1)  310/       0 :                     		move.w	#color,(vdp_data).l
(1)  311/       0 :                     		endm
(1)  312/       0 :                     
      96/       0 :                     		include "game/globals.asm"	; USER variables
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; GLOBAL RAM for ALL screen modes
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; Score, Lives, Level number, etc.
(1)    6/       0 :                     ; ----------------------------------------------------------------
(1)    7/       0 :                     
(1)    8/       0 : (MACRO)              			strct RAM_MdGlobal
(1)    8/       0 : =$0                  GLBL_LASTPC     set *
(1)    8/       0 :                                     dephase
(1)    8/FFFFFFFFFFFFEA04 :                                     phase RAM_MDGLOBAL
(1)    8/FFFFFFFFFFFFEA04 : =$FFFFFFFFFFFFEA04   GLBL_LASTORG    set *
(1)    9/FFFFFFFFFFFFEA04 :                     
(1)   10/FFFFFFFFFFFFEA04 :                     ; ------------------------------------------------------------
(1)   11/FFFFFFFFFFFFEA04 :                     ; Examples:
(1)   12/FFFFFFFFFFFFEA04 :                     ;
(1)   13/FFFFFFFFFFFFEA04 :                     ; RAM_Glbl_ExmpL ds.l 8 ; reserve 4 LONGS ($20 bytes)
(1)   14/FFFFFFFFFFFFEA04 :                     ; RAM_Glbl_ExmpW ds.w 6 ; reserve 3 WORDS ($0C bytes)
(1)   15/FFFFFFFFFFFFEA04 :                     ; RAM_Glbl_ExmpB ds.b 5 ; reserve 5 bytes
(1)   16/FFFFFFFFFFFFEA04 :                     ;
(1)   17/FFFFFFFFFFFFEA04 :                     ; Careful with bytes, everything needs to be word-algined
(1)   18/FFFFFFFFFFFFEA04 :                     ; or your will get an ADDRESS ERROR.
(1)   19/FFFFFFFFFFFFEA04 :                     ; ------------------------------------------------------------
(1)   20/FFFFFFFFFFFFEA04 :                     
(1)   21/FFFFFFFFFFFFEA04 :                     RAM_Glbl_Filler		ds.l 1		; 1 long (4 bytes)
(1)   22/FFFFFFFFFFFFEA08 :                     
(1)   23/FFFFFFFFFFFFEA08 :                     
(1)   24/FFFFFFFFFFFFEA08 :                     ; ------------------------------------------------------------
(1)   25/FFFFFFFFFFFFEA08 :                     sizeof_MdGlbl		ds.l 0		; size label
(1)   26/FFFFFFFFFFFFEA0C : (MACRO)              			endstrct
(1)   26/FFFFFFFFFFFFEA04 :                                     org GLBL_LASTORG
(1)   26/       0 :                                     phase GLBL_LASTPC
(1)   27/       0 :                     
      97/       0 :                     		include	"system/mcd/map.asm"	; Sega CD hardware map (shared with Sub-CPU)
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; SEGA CD SUB-CPU MAP
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; ------------------------------------------------
(1)    7/       0 :                     ; Register area
(1)    8/       0 :                     ;
(1)    9/       0 :                     ; MAIN-CPU: $A12000 (sysmcd_reg)
(1)   10/       0 :                     ; SUB-CPU:  $FF8000 (scpu_reg)
(1)   11/       0 :                     ; ------------------------------------------------
(1)   12/       0 :                     
(1)   13/       0 :                     ; -------------
(1)   14/       0 :                     ; bits
(1)   15/       0 :                     ; -------------
(1)   16/       0 :                     
(1)   17/       0 : =$2                  bitWRamMode	equ 2		;2M | 1M
(1)   18/       0 :                     
(1)   19/       0 :                     ; -------------
(1)   20/       0 :                     ; Registers
(1)   21/       0 :                     ; -------------
(1)   22/       0 :                     
(1)   23/       0 : =$3                  mcd_memory	equ $03
(1)   24/       0 : =$6                  mcd_hint	equ $06		; [W] HBlank RAM redirection-jump (MAIN CPU ONLY)
(1)   25/       0 : =$E                  mcd_comm_m	equ $0E		; [B] Comm port MAIN R/W | SUB READ ONLY
(1)   26/       0 : =$F                  mcd_comm_s	equ $0F		; [B] Comm port SUB R/W  | MAIN READ ONLY
(1)   27/       0 : =$10                 mcd_dcomm_m	equ $10		; [S: $0E] Communication MAIN
(1)   28/       0 : =$20                 mcd_dcomm_s	equ $20		; [S: $0E] Communication SUB
(1)   29/       0 : =$32                 mcd_intmask	equ $32		;
(1)   30/       0 :                     
(1)   31/       0 :                     ; ====================================================================
(1)   32/       0 :                     
      98/       0 :                     		include	"system/mars/map.asm"	; 32X hardware map (shared with SH2)
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; SH2 MAP
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; --------------------------------------------------------
(1)    7/       0 :                     ; SH2 SIDE MAP
(1)    8/       0 :                     ; --------------------------------------------------------
(1)    9/       0 :                     
(1)   10/       0 : =$0                  CS0		equ	$00000000	; Boot ROM & System registers
(1)   11/       0 : =$2000000            CS1		equ	$02000000	; ROM data all 4MB, Gone if RV=1
(1)   12/       0 : =$4000000            CS2		equ	$04000000	; Framebuffer area
(1)   13/       0 : =$6000000            CS3		equ	$06000000	; SDRAM
(1)   14/       0 : =$20000000           TH		equ	$20000000	; OR value for CacheThru
(1)   15/       0 : =$20004000           _sysreg		equ	$00004000|TH	; MARS System registers
(1)   16/       0 : =$20004100           _vdpreg		equ	$00004100|TH	; SuperVDP registers
(1)   17/       0 : =$20004200           _palette	equ	$00004200|TH	; Palette RAM for Pixel-Packed or RLE mode
(1)   18/       0 : =$24000000           _framebuffer:	equ	CS2|TH		; Framebuffer: First 240 words are the linetable
(1)   19/       0 : =$24020000           _overwrite:	equ	CS2|TH+$20000	; Overwrite: $00 writes are ignored
(1)   20/       0 :                     
(1)   21/       0 :                     ; --------------------------------------------------------
(1)   22/       0 :                     ; Variables
(1)   23/       0 :                     ; --------------------------------------------------------
(1)   24/       0 :                     
(1)   25/       0 :                     ; ------------------------------------------------
(1)   26/       0 :                     ; System
(1)   27/       0 :                     ; ------------------------------------------------
(1)   28/       0 :                     
(1)   29/       0 :                     ; _sysreg
(1)   30/       0 : =$0                  adapter		equ	$00		; adapter control register (Read as WORD)
(1)   31/       0 : =$1                  intmask		equ	$01		; SH2 CPU ONLY: interrupts mask
(1)   32/       0 : =$3                  standby		equ	$03		; CMD interrupt request bit by MD side (slave|master) (BYTE)
(1)   33/       0 : =$5                  hcount		equ	$05		; H Counter (BYTE)
(1)   34/       0 : =$6                  dreqctl		equ	$06		; DREQ control (WORD)
(1)   35/       0 : =$8                  dreqsource	equ	$08		; DREQ source address
(1)   36/       0 : =$C                  dreqdest	equ	$0C		; DREQ destination address
(1)   37/       0 : =$10                 dreqlen		equ	$10		; DREQ length
(1)   38/       0 : =$12                 dreqfifo	equ	$12		; DREQ FIFO
(1)   39/       0 : =$14                 vresintclr	equ	$14		; VRES interrupt clear
(1)   40/       0 : =$16                 vintclr		equ	$16		; V interrupt clear
(1)   41/       0 : =$18                 hintclr		equ	$18		; H interrupt clear
(1)   42/       0 : =$1A                 cmdintclr	equ	$1a		; CMD interrupt clear
(1)   43/       0 : =$1C                 pwmintclr	equ	$1C		; PWM interrupt clear
(1)   44/       0 : =$20                 comm0		equ	$20		; Communication ports ***
(1)   45/       0 : =$21                 comm1		equ	$21		; ALL CPUs can see this ports: including Z80
(1)   46/       0 : =$22                 comm2		equ	$22		; only be careful with the read/write directions.
(1)   47/       0 : =$23                 comm3		equ	$23		; ODD addresses (1,3,5...) are BYTE-read only.
(1)   48/       0 : =$24                 comm4		equ	$24		; EVEN addresses (0,2,4...) can be read as WORDs
(1)   49/       0 : =$25                 comm5		equ	$25		; Writing LONG addreses are possible depending
(1)   50/       0 : =$26                 comm6		equ	$26		; of the CPU's aligment limitations.
(1)   51/       0 : =$27                 comm7		equ	$27		;
(1)   52/       0 : =$28                 comm8		equ	$28		;
(1)   53/       0 : =$29                 comm9		equ	$29		;
(1)   54/       0 : =$2A                 comm10		equ	$2A		;
(1)   55/       0 : =$2B                 comm11		equ	$2B		;
(1)   56/       0 : =$2C                 comm12		equ	$2C		;
(1)   57/       0 : =$2D                 comm13		equ	$2D		;
(1)   58/       0 : =$2E                 comm14		equ	$2E		;
(1)   59/       0 : =$2F                 comm15		equ	$2F		;
(1)   60/       0 : =$30                 timerctl	equ	$30		; PWM Timer Control
(1)   61/       0 : =$31                 pwmctl		equ	$31		; PWM Control
(1)   62/       0 : =$32                 cycle		equ	$32		; PWM Cycle
(1)   63/       0 : =$34                 lchwidth	equ	$34		; PWM L ch Width
(1)   64/       0 : =$36                 rchwidth	equ	$36		; PWM R ch Width
(1)   65/       0 : =$38                 monowidth	equ	$38		; PWM Monaural Width
(1)   66/       0 :                     
(1)   67/       0 :                     ; _sysreg
(1)   68/       0 :                     ; adapter
(1)   69/       0 : =$1                  CART		equ	%00000001	; CD or Cartridge
(1)   70/       0 : =$2                  ADEN		equ	%00000010	; MARS Enabled: No/Yes
(1)   71/       0 : =$80                 FM		equ	%10000000	; SuperVDP permission: MD or SH
(1)   72/       0 :                     ; framectl
(1)   73/       0 : =$1                  FS		equ	%00000001	; Current framebuffer DRAM pixel data
(1)   74/       0 : =$2                  FEN		equ	%00000010	; Can write to Framebuffer: Yes/No
(1)   75/       0 :                     ; vdpsts
(1)   76/       0 : =$80                 VBLK		equ	%10000000	; VBlank bit
(1)   77/       0 : =$40                 HBLK		equ	%01000000	; HBlank bit
(1)   78/       0 : =$20                 PEN		equ	%00100000	; Can write to Palette: Yes/No
(1)   79/       0 :                     ; intmask
(1)   80/       0 : =$8                  VIRQ_ON		equ	$08		; IRQ masks for IRQ mask register
(1)   81/       0 : =$4                  HIRQ_ON		equ	$04
(1)   82/       0 : =$2                  CMDIRQ_ON	equ	$02
(1)   83/       0 : =$1                  PWMIRQ_ON	equ	$01
(1)   84/       0 :                     
(1)   85/       0 :                     ; _vdpreg
(1)   86/       0 : =$0                  tvmode		equ	$00		; TV mode
(1)   87/       0 : =$1                  bitmapmd	equ	$01		; Bitmap mode
(1)   88/       0 : =$2                  shift		equ	$02		; Lineshift bit
(1)   89/       0 : =$4                  filllength	equ	$04		; Auto Fill Length register
(1)   90/       0 : =$6                  fillstart	equ	$06		; Auto Fill Start Address register
(1)   91/       0 : =$8                  filldata	equ	$08		; Auto Fill Data register
(1)   92/       0 : =$A                  vdpsts		equ	$0A		; VDP Status register
(1)   93/       0 : =$B                  framectl	equ	$0B		; Frame Buffer Control register
(1)   94/       0 :                     
(1)   95/       0 :                     ; --------------------------------------------------------
(1)   96/       0 :                     ; SH2 Internal registers, independent for each CPU
(1)   97/       0 :                     ; --------------------------------------------------------
(1)   98/       0 :                     
(1)   99/       0 :                     ; DMA Channel 0: General data transfer
(1)  100/       0 :                     ; DMA Channel 1: PWM only
(1)  101/       0 :                     
(1)  102/       0 : =$FFFFFE00           _SERIAL		equ	$FFFFFE00	; Serial Control
(1)  103/       0 : =$FFFFFE10           _FRT		equ	$FFFFFE10	; Free run timer
(1)  104/       0 : =$0                  _TIER		equ	$00		; Timer interrupt enable register
(1)  105/       0 : =$1                  _TCSR		equ	$01		; Timer control & status register
(1)  106/       0 : =$2                  _FRC_H		equ	$02		; Free running counter High
(1)  107/       0 : =$3                  _FRC_L		equ	$03		; Free running counter Low
(1)  108/       0 : =$4                  _OCR_H		equ	$04		; Output compare register High
(1)  109/       0 : =$5                  _OCR_L		equ	$05		; Output compare register Low
(1)  110/       0 : =$6                  _TCR		equ	$06		; Timer control register
(1)  111/       0 : =$7                  _TOCR		equ	$07		; Timer output compare control register
(1)  112/       0 : =$FFFFFE92           _CCR		equ	$FFFFFE92	; Cache register (WORD)
(1)  113/       0 : =$FFFFFF00           _JR		equ	$FFFFFF00	; DIVU (--- / val)
(1)  114/       0 : =$FFFFFF04           _HRL32		equ	$FFFFFF04	; DIVU (val / ---) or RIGHT-long result if read
(1)  115/       0 : =$FFFFFF10           _HRH		equ	$FFFFFF10	; DIVU Result: LEFT long
(1)  116/       0 : =$FFFFFF14           _HRL		equ	$FFFFFF14	; DIVU Result: RIGHT long
(1)  117/       0 : =$FFFFFF80           _DMASOURCE0	equ	$FFFFFF80	; DMA source address 0
(1)  118/       0 : =$FFFFFF84           _DMADEST0	equ	$FFFFFF84	; DMA destination address 0
(1)  119/       0 : =$FFFFFF88           _DMACOUNT0	equ	$FFFFFF88	; DMA transfer count 0
(1)  120/       0 : =$FFFFFF8C           _DMACHANNEL0	equ	$FFFFFF8C	; DMA channel control 0
(1)  121/       0 : =$FFFFFF90           _DMASOURCE1	equ	$FFFFFF90	; DMA source address 1
(1)  122/       0 : =$FFFFFF94           _DMADEST1	equ	$FFFFFF94	; DMA destination address 1
(1)  123/       0 : =$FFFFFF98           _DMACOUNT1	equ	$FFFFFF98	; DMA transfer count 1
(1)  124/       0 : =$FFFFFF9C           _DMACHANNEL1	equ	$FFFFFF9C	; DMA channel control 1
(1)  125/       0 : =$FFFFFFA0           _DMAVECTORN0	equ	$FFFFFFA0	; DMA vector number N0
(1)  126/       0 : =$FFFFFFA4           _DMAVECTORE0	equ	$FFFFFFA4	; DMA vector number E0
(1)  127/       0 : =$FFFFFFA8           _DMAVECTORN1	equ	$FFFFFFA8	; DMA vector number N1
(1)  128/       0 : =$FFFFFFAC           _DMAVECTORE1	equ	$FFFFFFAC	; DMA vector number E1
(1)  129/       0 : =$FFFFFFB0           _DMAOPERATION	equ	$FFFFFFB0	; DMA operation
(1)  130/       0 : =$FFFFFFB4           _DMAREQACK0	equ	$FFFFFFB4	; DMA request/ack select control 0
(1)  131/       0 : =$FFFFFFB8           _DMAREQACK1	equ	$FFFFFFB8	; DMA request/ack select control 1
(1)  132/       0 :                     
      99/       0 :                     		include	"system/md/map.asm"	; Genesis hardware map and other areas
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Genesis / Pico 68000 map
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 : =$200000             sys_exram	equ	$200000		; Second half of 4MB rom or external RAM (Normal or save data)
(1)    7/       0 : =$A00000             z80_cpu		equ	$A00000		; Z80 CPU area, size: $2000
(1)    8/       0 : =$A04000             ym_ctrl_1	equ	$A04000		; YM2612 reg 1
(1)    9/       0 : =$A04001             ym_data_1	equ	$A04001		; YM2612 reg 2
(1)   10/       0 : =$A04002             ym_ctrl_2	equ	$A04002		; YM2612 reg 1
(1)   11/       0 : =$A04003             ym_data_2	equ	$A04003		; YM2612 reg 2
(1)   12/       0 : =$A10001             sys_io		equ	$A10001		; bits: OVRSEAS(7)|PAL(6)|DISK(5)|VER(3-0)
(1)   13/       0 : =$A10003             sys_data_1	equ	$A10003		; Port 1 DATA
(1)   14/       0 : =$A10005             sys_data_2	equ	$A10005		; Port 2 DATA
(1)   15/       0 : =$A10007             sys_data_3	equ	$A10007		; Modem DATA
(1)   16/       0 : =$A10009             sys_ctrl_1	equ	$A10009		; Port 1 CTRL
(1)   17/       0 : =$A1000B             sys_ctrl_2	equ	$A1000B		; Port 2 CTRL
(1)   18/       0 : =$A1000D             sys_ctrl_3	equ	$A1000D		; Modem CTRL
(1)   19/       0 : =$A11100             z80_bus 	equ	$A11100		; only use bit 0 (bit 8 as WORD)
(1)   20/       0 : =$A11200             z80_reset	equ	$A11200		; WRITE only ($0000 reset/$0100 cancel)
(1)   21/       0 : =$A130F1             md_bank_sram	equ	$A130F1		; Make SRAM visible at $200000
(1)   22/       0 : =$A14000             sys_tmss	equ	$A14000		; write "SEGA" here for ver > 0
(1)   23/       0 : =$C00000             vdp_data	equ	$C00000		; video data port
(1)   24/       0 : =$C00004             vdp_ctrl	equ	$C00004		; video control port
(1)   25/       0 : =$C00011             psg_ctrl	equ	$C00011		; PSG control
(1)   26/       0 :                     
(1)   27/       0 :                     ; ----------------------------------------------------------------
(1)   28/       0 :                     ; SEGA CD map
(1)   29/       0 :                     ; ----------------------------------------------------------------
(1)   30/       0 :                     
(1)   31/       0 : =$200000             sysmcd_wram	equ	$200000
(1)   32/       0 : =$A12000             sysmcd_reg	equ	$A12000
(1)   33/       0 :                     
(1)   34/       0 :                     ; ----------------------------------------------------------------
(1)   35/       0 :                     ; 32X map
(1)   36/       0 :                     ; ----------------------------------------------------------------
(1)   37/       0 :                     
(1)   38/       0 : =$A130EC             sysmars_id	equ	$A130EC		; 32X's ID: "MARS"
(1)   39/       0 : =$A15100             sysmars_reg	equ	$A15100		; MARS 32X registers section, see system/mars/map.asm for variables
(1)   40/       0 :                     
(1)   41/       0 :                     ; ----------------------------------------------------------------
(1)   42/       0 :                     ; Genesis / Mega drive Z80 map
(1)   43/       0 :                     ; ----------------------------------------------------------------
(1)   44/       0 :                     
(1)   45/       0 : =$4000               zym_ctrl_1	equ	$4000		; YM2612 reg 1
(1)   46/       0 : =$4001               zym_data_1	equ	$4001		; YM2612 reg 2
(1)   47/       0 : =$4002               zym_ctrl_2	equ	$4002		; YM2612 reg 1
(1)   48/       0 : =$4003               zym_data_2	equ	$4003		; YM2612 reg 2
(1)   49/       0 : =$6000               zbank		equ	$6000		; Z80 ROM BANK: %XXXXXXXX X0000000 00000000 (9 writes)
(1)   50/       0 :                     ; zvdp_data	equ	$7F00		; video data port
(1)   51/       0 :                     ; zvdp_ctrl	equ	$7F04		; video control port
(1)   52/       0 : =$7F11               zpsg_ctrl	equ	$7F11		; PSG control
(1)   53/       0 :                     
     100/       0 :                     		include	"system/md/ram.asm"	; Genesis RAM sections
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; MD RAM
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; Reserved RAM sections:
(1)    6/       0 :                     ; $FFFD00-$FFFDFF: Sega CD's vectors
(1)    7/       0 :                     ; $FFFE80-$FFFFFF: Z80 write-only scratchpad
(1)    8/       0 :                     ; ----------------------------------------------------------------
(1)    9/       0 :                     
(1)   10/       0 :                     ; --------------------------------------------------------
(1)   11/       0 :                     ; Settings
(1)   12/       0 :                     ; --------------------------------------------------------
(1)   13/       0 :                     
(1)   14/       0 : (MACRO)              			strct $FFFF0000
(1)   14/       0 : =$0                  GLBL_LASTPC     set *
(1)   14/FFFFFFFFFFFFEA04 :                                     dephase
(1)   14/FFFFFFFFFFFF0000 :                                     phase $FFFF0000
(1)   14/FFFFFFFFFFFF0000 : =$FFFFFFFFFFFF0000   GLBL_LASTORG    set *
(1)   15/FFFFFFFFFFFF0000 :                     RAM_SystemCode		ds.b MAX_SysCode	; CD/32X/CD32X
(1)   16/FFFFFFFFFFFF2000 :                     RAM_UserCode		ds.b MAX_UserCode	; CD/32X/CD32X
(1)   17/FFFFFFFFFFFFA000 :                     
(1)   18/FFFFFFFFFFFFA000 :                     ; ------------------------------------------------
(1)   19/FFFFFFFFFFFFA000 :                     ; > $FF8000 section
(1)   20/FFFFFFFFFFFFA000 :                     ; ------------------------------------------------
(1)   21/FFFFFFFFFFFFA000 :                     
(1)   22/FFFFFFFFFFFFA000 :                     check_thisram		ds.l 0			; <-- get current pos
(1)   26/FFFFFFFFFFFFA004 :                     RAM_MdVideo		ds.b MAX_MdVideo	; $FF8000
(1)   27/FFFFFFFFFFFFC004 :                     RAM_MdSystem		ds.b MAX_MdSystem	;
(1)   28/FFFFFFFFFFFFC604 :                     RAM_MdOther		ds.b MAX_MdOther	; 32X's DREQ goes here
(1)   29/FFFFFFFFFFFFD204 :                     RAM_ScrnBuff		ds.b MAX_ScrnBuff
(1)   30/FFFFFFFFFFFFEA04 :                     RAM_MdGlobal		ds.b sizeof_MdGlbl
(1)   31/FFFFFFFFFFFFD40C :                     sizeof_MdRam		ds.l 0
(1)   32/FFFFFFFFFFFFD410 : (MACRO)              			endstrct
(1)   32/FFFFFFFFFFFF0000 :                                     org GLBL_LASTORG
(1)   32/       0 :                                     phase GLBL_LASTPC
(1)   36/       0 :                     
(1)   37/       0 :                     ; ------------------------------------------------
(1)   38/       0 :                     ; Add-on area
(1)   39/       0 :                     ; ------------------------------------------------
(1)   40/       0 :                     
(1)   41/       0 : (MACRO)              			strct RAM_MdOther
(1)   41/       0 : =$0                  GLBL_LASTPC     set *
(1)   41/FFFFFFFFFFFF0000 :                                     dephase
(1)   41/FFFFFFFFFFFFC604 :                                     phase RAM_MDOTHER
(1)   41/FFFFFFFFFFFFC604 : =$FFFFFFFFFFFFC604   GLBL_LASTORG    set *
(1)   42/FFFFFFFFFFFFC604 :                     RAM_MdDreq		ds.b $C00		; 32X DREQ area (MANUAL SIZE)
(1)   43/FFFFFFFFFFFFD204 :                     sizeof_RamOther		ds.l 0
(1)   44/FFFFFFFFFFFFD208 : (MACRO)              			endstrct
(1)   44/FFFFFFFFFFFFC604 :                                     org GLBL_LASTORG
(1)   44/       0 :                                     phase GLBL_LASTPC
(1)   45/       0 : (MACRO)              			erreport "ADD-ON RAM USES",(sizeof_RamOther-RAM_MdOther),MAX_MdOther
(1)   46/       0 :                     
(1)   47/       0 :                     ; ------------------------------------------------
(1)   48/       0 :                     ; Other
(1)   49/       0 :                     ; ------------------------------------------------
(1)   50/       0 :                     
(1)   51/       0 : =$FFFFFD00           RAM_Stack		equ RAM_MegaCd			; <-- goes backwards
(1)   52/       0 : =$FFFFFD00           RAM_MegaCd		equ $FFFFFD00
(1)   53/       0 : =$FFFFFF00           RAM_ZSndBuff		equ $FFFFFF00
(1)   54/       0 :                     
     101/       0 :                     		include	"system/shared.asm"	; Shared variables and specials
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Shared variables
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; ====================================================================
(1)    7/       0 :                     ; ----------------------------------------------------------------
(1)    8/       0 :                     ; 32X SECTION
(1)    9/       0 :                     ; ----------------------------------------------------------------
(1)   10/       0 :                     
(1)   87/       0 :                     
     102/       0 :                     
     103/       0 :                     ; ====================================================================
     104/       0 :                     ; ----------------------------------------------------------------
     105/       0 :                     ; Init procedures for all systems
     106/       0 :                     ; ----------------------------------------------------------------
     107/       0 :                     
     108/       0 :                     ; ---------------------------------------------
     109/       0 :                     ; SEGA 32X
     110/       0 :                     ; ---------------------------------------------
     111/       0 :                     
     133/       0 :                     		include	"system/head_mcd.asm"			; Sega CD header
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; SEGA CD header
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; Shared for both CD and CD32X
(1)    6/       0 :                     ; ----------------------------------------------------------------
(1)    7/       0 :                     
(1)    8/       0 : 5345 4741 4449      		dc.b "SEGADISCSYSTEM  "		; Disc Type (Must be SEGADISCSYSTEM)
                6 : 5343 5359 5354 
                C : 454D 2020          
(1)    9/      10 : 4E49 4B4F 4E41      		dc.b "NIKONA-CD  ",0		; Disc ID
               16 : 2D43 4420 2000    
(1)   10/      1C : 0100 0001           		dc.w $100,1			; System ID, Type
(1)   11/      20 : 4E49 4B4F 4E41      		dc.b "NIKONA-SYS ",0		; System Name
               26 : 2D53 5953 2000    
(1)   12/      2C : 0000 0000           		dc.w 0,0			; System Version, Type
(1)   13/      30 : 0000 0784           		dc.l IP_Start
(1)   14/      34 : 0000 07B6           		dc.l IP_End
(1)   15/      38 : 0000 0000           		dc.l 0
(1)   16/      3C : 0000 0000           		dc.l 0
(1)   17/      40 : 0000 0800           		dc.l SP_Start
(1)   18/      44 : 0000 1180           		dc.l SP_End
(1)   19/      48 : 0000 0000           		dc.l 0
(1)   20/      4C : 0000 0000           		dc.l 0
(1)   21/      50 :                     		align $100			; Pad to $100
(1)   22/     100 : 5345 4741 2047      		dc.b "SEGA GENESIS    "
              106 : 454E 4553 4953 
              10C : 2020 2020          
(1)   23/     110 : 2843 2947 4636      		dc.b "(C)GF64 2024.???"
              116 : 3420 3230 3234 
              11C : 2E3F 3F3F          
(1)   28/     120 : 4E69 6B6F 6E61      		dc.b "Nikona MCD                                      "
              126 : 204D 4344 2020 
              12C : 2020 2020 2020 
              132 : 2020 2020 2020 
              138 : 2020 2020 2020 
              13E : 2020 2020 2020 
              144 : 2020 2020 2020 
              14A : 2020 2020 2020    
(1)   29/     150 : 4E69 6B6F 6E61                      dc.b "Nikona SCD                                      "
              156 : 2053 4344 2020 
              15C : 2020 2020 2020 
              162 : 2020 2020 2020 
              168 : 2020 2020 2020 
              16E : 2020 2020 2020 
              174 : 2020 2020 2020 
              17A : 2020 2020 2020    
(1)   31/     180 : 474D 2048 4F4D      		dc.b "GM HOMEBREW-02  "
              186 : 4542 5245 572D 
              18C : 3032 2020          
(1)   32/     190 : 4A36 4D20 2020      		dc.b "J6M             "
              196 : 2020 2020 2020 
              19C : 2020 2020          
(1)   33/     1A0 :                     		align $1F0
(1)   34/     1F0 : 4A55 4520 2020      		dc.b "JUE             "
              1F6 : 2020 2020 2020 
              1FC : 2020 2020          
(1)   35/     200 :                     
(1)   41/     200 :                     		binclude "system/mcd/region/usa.bin"	; <-- Default for this library
(1)   43/     784 :                     
(1)   44/     784 :                     ; ========================================================
(1)   45/     784 :                     ; -------------------------------------------------
(1)   46/     784 :                     ; IP
(1)   47/     784 :                     ; -------------------------------------------------
(1)   48/     784 :                     
(1)   49/     784 :                     IP_Start:
(1)   50/     784 : 41F9 00C0 0000      		lea	(vdp_data).l,a0
(1)   51/     78A : 3028 0004           .wait_vint:	move.w	4(a0),d0
(1)   52/     78E : 0800 0003           		btst	#3,d0
(1)   53/     792 : 67F6                		beq.s	.wait_vint
(1)   54/     794 : 217C C000 0000      		move.l	#$C0000000,4(a0)
              79A : 0004             
(1)   55/     79C : 323C 003F           		move.w	#64-1,d1
(1)   56/     7A0 : 7000                		moveq	#0,d0
(1)   57/     7A2 :                     .color_out:
(1)   58/     7A2 : 3080                		move.w	d0,(a0)
(1)   59/     7A4 : 51C9 FFFC           		dbf	d1,.color_out
(1)   60/     7A8 : 33FC FD0C 00A1      		move.w	#$FD0C,(sysmcd_reg+mcd_hint).l	; Relocate Hblank
              7AE : 2006             
(1)   61/     7B0 :                     ; 		move.l	#RAM_MdMarsHInt,($FFFFFD06+2).w
(1)   62/     7B0 : 4EF9 00FF 2000      		jmp	($FF0600+MCD_Main).l
(1)   63/     7B6 :                     
(1)   64/     7B6 :                     IP_End:
(1)   65/     7B6 :                     		align 2
(1)   66/     7B6 :                     
(1)   67/     7B6 :                     ; ========================================================
(1)   68/     7B6 :                     ; -------------------------------------------------
(1)   69/     7B6 :                     ; SP
(1)   70/     7B6 :                     ; -------------------------------------------------
(1)   71/     7B6 :                     
(1)   72/     7B6 :                     		align $800
(1)   73/     800 :                     SP_Start:
(1)   74/     800 :                     		include "system/mcd/subcpu.asm"
(2)    1/     800 :                     ; ====================================================================
(2)    2/     800 :                     ; ----------------------------------------------------------------
(2)    3/     800 :                     ; SegaCD SUB-CPU
(2)    4/     800 :                     ;
(2)    5/     800 :                     ; TOP CODE loaded on BOOT
(2)    6/     800 :                     ; ----------------------------------------------------------------
(2)    7/     800 :                     
(2)    8/     800 :                     ; ====================================================================
(2)    9/     800 :                     ; ----------------------------------------------------------------
(2)   10/     800 :                     ; Variables
(2)   11/     800 :                     ; ----------------------------------------------------------------
(2)   12/     800 :                     
(2)   13/     800 : =$80000              scpu_wram	equ $00080000
(2)   14/     800 : =$FFFE8000           scpu_bram	equ $FFFE8000
(2)   15/     800 : =$FFFF0000           scpu_pcm	equ $FFFF0000
(2)   16/     800 :                     ; scpu_pcmwave	equ $FFFF2001	; <-- ODD WRITES ONLY
(2)   17/     800 : =$FFFF8000           scpu_reg	equ $FFFF8000
(2)   18/     800 :                     
(2)   19/     800 : =$0                  PCM		equ $00
(2)   20/     800 : =$1                  ENV		equ $01		; Envelope
(2)   21/     800 : =$3                  PAN		equ $03		; Panning (%bbbbaaaa, aaaa = left, bbbb = right)
(2)   22/     800 : =$5                  FDL		equ $05		; Sample rate $00xx
(2)   23/     800 : =$7                  FDH		equ $07		; Sample rate $xx00
(2)   24/     800 : =$9                  LSL		equ $09		; Loop address $xx00
(2)   25/     800 : =$B                  LSH		equ $0B		; Loop address $00xx
(2)   26/     800 : =$D                  ST		equ $0D		; Start address (only $x0, $x000)
(2)   27/     800 : =$F                  CTREG		equ $0F		; Control register ($80 - Bank select, $C0 - Channel select)
(2)   28/     800 : =$11                 ONREG		equ $11		; Channel On/Off (BITS: 1 - off, 0 - on)
(2)   29/     800 :                     
(2)   30/     800 :                     ; ====================================================================
(2)   31/     800 :                     ; ----------------------------------------------------------------
(2)   32/     800 :                     ; Structs
(2)   33/     800 :                     ; ----------------------------------------------------------------
(2)   34/     800 :                     
(2)   35/     800 :                     ; cdpcm_flags:
(2)   36/     800 :                     ; %EFSU ---l
(2)   37/     800 :                     ; E-Enabled
(2)   38/     800 :                     ; F-First fill / Restart
(2)   39/     800 :                     ; S-Force stop (keyoff)
(2)   40/     800 :                     ; U-Update channel freq/vol/pan only
(2)   41/     800 :                     ; l-loop channel
(2)   42/     800 :                     
(2)   43/     800 :                     ; SIZE MUST BE $20
(2)   44/     800 : (MACRO)              		strct 0
(2)   44/     800 : =$800                GLBL_LASTPC     set *
(2)   44/FFFFFFFFFFFFCE04 :                                     dephase
(2)   44/       0 :                                     phase 0
(2)   44/       0 : =$0                  GLBL_LASTORG    set *
(2)   45/       0 :                     cdpcm_flags	ds.b 1		; %
(2)   46/       1 :                     cdpcm_strmf	ds.b 1
(2)   47/       2 :                     cdpcm_strmhalf	ds.b 1		; Halfway MSB $00/$04/$08/$0C
(2)   48/       3 :                     cdpcm_freeb	ds.b 1
(2)   49/       4 :                     cdpcm_clen	ds.l 1
(2)   50/       8 :                     cdpcm_cread	ds.l 1
(2)   51/       C :                     cdpcm_pan	ds.b 1
(2)   52/       D :                     cdpcm_env	ds.b 1
(2)   53/       E :                     cdpcm_pitch	ds.w 1
(2)   54/      10 :                     cdpcm_start	ds.l 1
(2)   55/      14 :                     cdpcm_len	ds.l 1
(2)   56/      18 :                     cdpcm_loop	ds.l 1
(2)   57/      1C :                     cdpcm_freel	ds.l 1
(2)   58/      20 :                     sizeof_cdpcm	ds.l 0
(2)   59/      20 : (MACRO)              		endstrct
(2)   59/       0 :                                     org GLBL_LASTORG
(2)   59/     800 :                                     phase GLBL_LASTPC
(2)   60/     800 :                     
(2)   61/     800 :                     ; ====================================================================
(2)   62/     800 :                     ; ----------------------------------------------------------------
(2)   63/     800 :                     ; Includes
(2)   64/     800 :                     ; ----------------------------------------------------------------
(2)   65/     800 :                     
(2)   66/     800 :                     		include "system/mcd/cdbios.asm"
(3)    1/     800 : =$2                  MSCSTOP           equ	$0002
(3)    2/     800 : =$3                  MSCPAUSEON        equ	$0003
(3)    3/     800 : =$4                  MSCPAUSEOFF       equ	$0004
(3)    4/     800 : =$5                  MSCSCANFF         equ	$0005
(3)    5/     800 : =$6                  MSCSCANFR         equ	$0006
(3)    6/     800 : =$7                  MSCSCANOFF        equ	$0007
(3)    7/     800 : =$8                  ROMPAUSEON        equ	$0008
(3)    8/     800 : =$9                  ROMPAUSEOFF       equ	$0009
(3)    9/     800 : =$A                  DRVOPEN           equ	$000A
(3)   10/     800 :                     
(3)   11/     800 : =$10                 DRVINIT           equ	$0010
(3)   12/     800 : =$11                 MSCPLAY           equ	$0011
(3)   13/     800 : =$12                 MSCPLAY1          equ	$0012
(3)   14/     800 : =$13                 MSCPLAYR          equ	$0013
(3)   15/     800 : =$14                 MSCPLAYT          equ	$0014
(3)   16/     800 : =$15                 MSCSEEK           equ	$0015
(3)   17/     800 : =$16                 MSCSEEKT          equ	$0016
(3)   18/     800 : =$17                 ROMREAD           equ	$0017
(3)   19/     800 : =$18                 ROMSEEK           equ	$0018
(3)   20/     800 : =$19                 MSCSEEK1          equ	$0019
(3)   21/     800 :                     
(3)   22/     800 : =$1E                 TESTENTRY         equ	$001E
(3)   23/     800 : =$1F                 TESTENTRYLOOP     equ	$001F
(3)   24/     800 : =$20                 ROMREADN          equ	$0020
(3)   25/     800 : =$21                 ROMREADE          equ	$0021
(3)   26/     800 :                     
(3)   27/     800 : =$80                 CDBCHK            equ	$0080
(3)   28/     800 : =$81                 CDBSTAT           equ	$0081
(3)   29/     800 : =$82                 CDBTOCWRITE       equ	$0082
(3)   30/     800 : =$83                 CDBTOCREAD        equ	$0083
(3)   31/     800 : =$84                 CDBPAUSE          equ	$0084
(3)   32/     800 : =$85                 FDRSET            equ	$0085
(3)   33/     800 : =$86                 FDRCHG            equ	$0086
(3)   34/     800 : =$87                 CDCSTART          equ	$0087
(3)   35/     800 : =$88                 CDCSTARTP         equ	$0088
(3)   36/     800 : =$89                 CDCSTOP           equ	$0089
(3)   37/     800 : =$8A                 CDCSTAT           equ	$008A
(3)   38/     800 : =$8B                 CDCREAD           equ	$008B
(3)   39/     800 : =$8C                 CDCTRN            equ	$008C
(3)   40/     800 : =$8D                 CDCACK            equ	$008D
(3)   41/     800 : =$8E                 SCDINIT           equ	$008E
(3)   42/     800 : =$8F                 SCDSTART          equ	$008F
(3)   43/     800 : =$90                 SCDSTOP           equ	$0090
(3)   44/     800 : =$91                 SCDSTAT           equ	$0091
(3)   45/     800 : =$92                 SCDREAD           equ	$0092
(3)   46/     800 : =$93                 SCDPQ             equ	$0093
(3)   47/     800 : =$94                 SCDPQL            equ	$0094
(3)   48/     800 : =$95                 LEDSET            equ	$0095
(3)   49/     800 : =$96                 CDCSETMODE        equ	$0096
(3)   50/     800 : =$97                 WONDERREQ         equ	$0097
(3)   51/     800 : =$98                 WONDERCHK         equ	$0098
(3)   52/     800 :                     
(3)   53/     800 : =$0                  CBTINIT           equ	$0000
(3)   54/     800 : =$1                  CBTINT            equ	$0001
(3)   55/     800 : =$2                  CBTOPENDISC       equ	$0002
(3)   56/     800 : =$3                  CBTOPENSTAT       equ	$0003
(3)   57/     800 : =$4                  CBTCHKDISC        equ	$0004
(3)   58/     800 : =$5                  CBTCHKSTAT        equ	$0005
(3)   59/     800 : =$6                  CBTIPDISC         equ	$0006
(3)   60/     800 : =$7                  CBTIPSTAT         equ	$0007
(3)   61/     800 : =$8                  CBTSPDISC         equ	$0008
(3)   62/     800 : =$9                  CBTSPSTAT         equ	$0009
(3)   63/     800 :                     
(3)   64/     800 : =$0                  BRMINIT           equ	$0000
(3)   65/     800 : =$1                  BRMSTAT           equ	$0001
(3)   66/     800 : =$2                  BRMSERCH          equ	$0002
(3)   67/     800 : =$3                  BRMREAD           equ	$0003
(3)   68/     800 : =$4                  BRMWRITE          equ	$0004
(3)   69/     800 : =$5                  BRMDEL            equ	$0005
(3)   70/     800 : =$6                  BRMFORMAT         equ	$0006
(3)   71/     800 : =$7                  BRMDIR            equ	$0007
(3)   72/     800 : =$8                  BRMVERIFY         equ	$0008
(3)   73/     800 :                     
(3)   74/     800 :                     ;-----------------------------------------------------------------------
(3)   75/     800 :                     ; BIOS ENTRY POINTS
(3)   76/     800 :                     ;-----------------------------------------------------------------------
(3)   77/     800 :                     
(3)   78/     800 : =$5F40               _ADRERR           equ	$00005F40
(3)   79/     800 : =$5EA0               _BOOTSTAT         equ	$00005EA0
(3)   80/     800 : =$5F16               _BURAM            equ	$00005F16
(3)   81/     800 : =$5F22               _CDBIOS           equ	$00005F22
(3)   82/     800 : =$5F1C               _CDBOOT           equ	$00005F1C
(3)   83/     800 : =$5E80               _CDSTAT           equ	$00005E80
(3)   84/     800 : =$5F52               _CHKERR           equ	$00005F52
(3)   85/     800 : =$5F46               _CODERR           equ	$00005F46
(3)   86/     800 : =$5F4C               _DEVERR           equ	$00005F4C
(3)   87/     800 : =$5F76               _LEVEL1           equ	$00005F76
(3)   88/     800 : =$5F7C               _LEVEL2           equ	$00005F7C
(3)   89/     800 : =$5F82               _LEVEL3           equ	$00005F82 ;TIMER INTERRUPT
(3)   90/     800 : =$5F88               _LEVEL4           equ	$00005F88
(3)   91/     800 : =$5F8E               _LEVEL5           equ	$00005F8E
(3)   92/     800 : =$5F94               _LEVEL6           equ	$00005F94
(3)   93/     800 : =$5F9A               _LEVEL7           equ	$00005F9A
(3)   94/     800 : =$5F6A               _NOCOD0           equ	$00005F6A
(3)   95/     800 : =$5F70               _NOCOD1           equ	$00005F70
(3)   96/     800 : =$5F0A               _SETJMPTBL        equ	$00005F0A
(3)   97/     800 : =$5F5E               _SPVERR           equ	$00005F5E
(3)   98/     800 : =$5F64               _TRACE            equ	$00005F64
(3)   99/     800 : =$5FA0               _TRAP00           equ	$00005FA0
(3)  100/     800 : =$5FA6               _TRAP01           equ	$00005FA6
(3)  101/     800 : =$5FAC               _TRAP02           equ	$00005FAC
(3)  102/     800 : =$5FB2               _TRAP03           equ	$00005FB2
(3)  103/     800 : =$5FB8               _TRAP04           equ	$00005FB8
(3)  104/     800 : =$5FBE               _TRAP05           equ	$00005FBE
(3)  105/     800 : =$5FC4               _TRAP06           equ	$00005FC4
(3)  106/     800 : =$5FCA               _TRAP07           equ	$00005FCA
(3)  107/     800 : =$5FD0               _TRAP08           equ	$00005FD0
(3)  108/     800 : =$5FD6               _TRAP09           equ	$00005FD6
(3)  109/     800 : =$5FDC               _TRAP10           equ	$00005FDC
(3)  110/     800 : =$5FE2               _TRAP11           equ	$00005FE2
(3)  111/     800 : =$5FE8               _TRAP12           equ	$00005FE8
(3)  112/     800 : =$5FEE               _TRAP13           equ	$00005FEE
(3)  113/     800 : =$5FF4               _TRAP14           equ	$00005FF4
(3)  114/     800 : =$5FFA               _TRAP15           equ	$00005FFA
(3)  115/     800 : =$5F58               _TRPERR           equ	$00005F58
(3)  116/     800 : =$5F28               _USERCALL0        equ	$00005F28 ;INIT
(3)  117/     800 : =$5F2E               _USERCALL1        equ	$00005F2E ;MAIN
(3)  118/     800 : =$5F34               _USERCALL2        equ	$00005F34 ;VINT
(3)  119/     800 : =$5F3A               _USERCALL3        equ	$00005F3A ;NOT DEFINED
(3)  120/     800 : =$5EA6               _USERMODE         equ	$00005EA6
(3)  121/     800 : =$5F10               _WAITVSYNC        equ	$00005F10
(3)  122/     800 :                     
(3)  123/     800 :                     ;-----------------------------------------------------------------------
(3)  124/     800 :                     ; CDBIOS - Calls the BIOS with a specified function number.  Assumes
(3)  125/     800 :                     ; that all preparatory and cleanup work is done externally.
(3)  126/     800 :                     ;
(3)  127/     800 :                     ; input:
(3)  128/     800 :                     ;   fcode BIOS function code
(3)  129/     800 :                     ;
(3)  130/     800 :                     ; returns:
(3)  131/     800 :                     ;   nothing
(3)  132/     800 :                     ;-----------------------------------------------------------------------
(3)  133/     800 :                     CDBIOS macro fcode
(3)  134/     800 :                           move.w    fcode,d0
(3)  135/     800 :                           jsr       _CDBIOS
(3)  136/     800 :                           endm
(3)  137/     800 :                     
(3)  138/     800 :                     
(3)  139/     800 :                     ;-----------------------------------------------------------------------
(3)  140/     800 :                     ; BURAM - Calls the Backup Ram with a specified function number.
(3)  141/     800 :                     ; Assumes that all preparatory and cleanup work is done externally.
(3)  142/     800 :                     ;
(3)  143/     800 :                     ; input:
(3)  144/     800 :                     ;   fcode Backup Ram function code
(3)  145/     800 :                     ;
(3)  146/     800 :                     ; returns:
(3)  147/     800 :                     ;   nothing
(3)  148/     800 :                     ;-----------------------------------------------------------------------
(3)  149/     800 :                     BURAM macro fcode
(3)  150/     800 :                           move.w    fcode,d0
(3)  151/     800 :                           jsr       _BURAM
(3)  152/     800 :                           endm
(3)  153/     800 :                     
(3)  154/     800 :                     
(3)  155/     800 :                     ;-----------------------------------------------------------------------
(3)  156/     800 :                     ; DRIVE MECHANISM
(3)  157/     800 :                     ;-----------------------------------------------------------------------
(3)  158/     800 :                     
(3)  159/     800 :                     ;-----------------------------------------------------------------------
(3)  160/     800 :                     ; BIOS_DRVINIT - Closes the disk tray and reads the TOC from the CD.
(3)  161/     800 :                     ; Pauses for 2 seconds after reading the TOC.  If bit 7 of the TOC track
(3)  162/     800 :                     ; is set, the BIOS starts playing the first track automatically.  Waits
(3)  163/     800 :                     ; for a DRVOPEN request if there is no disk in the drive.
(3)  164/     800 :                     ;
(3)  165/     800 :                     ; input:
(3)  166/     800 :                     ;   a0.l  address of initialization parameters:
(3)  167/     800 :                     ;           dc.b    $01   ; Track # to read TOC from (normally $01)
(3)  168/     800 :                     ;           dc.b    $FF   ; Last track # ($FF = read all tracks)
(3)  169/     800 :                     ;
(3)  170/     800 :                     ; returns:
(3)  171/     800 :                     ;   nothing
(3)  172/     800 :                     ;-----------------------------------------------------------------------
(3)  173/     800 :                     BIOS_DRVINIT macro
(3)  174/     800 :                           CDBIOS #DRVINIT
(3)  175/     800 :                           endm
(3)  176/     800 :                     
(3)  177/     800 :                     ;-----------------------------------------------------------------------
(3)  178/     800 :                     ; BIOS_DRVOPEN - Opens the drive.
(3)  179/     800 :                     ;
(3)  180/     800 :                     ; input:
(3)  181/     800 :                     ;   none
(3)  182/     800 :                     ;
(3)  183/     800 :                     ; returns:
(3)  184/     800 :                     ;   nothing
(3)  185/     800 :                     ;-----------------------------------------------------------------------
(3)  186/     800 :                     BIOS_DRVOPEN macro
(3)  187/     800 :                           CDBIOS #DRVOPEN
(3)  188/     800 :                           endm
(3)  189/     800 :                     
(3)  190/     800 :                     
(3)  191/     800 :                     ;-----------------------------------------------------------------------
(3)  192/     800 :                     ; MUSIC
(3)  193/     800 :                     ;-----------------------------------------------------------------------
(3)  194/     800 :                     
(3)  195/     800 :                     ;-----------------------------------------------------------------------
(3)  196/     800 :                     ; BIOS_MSCSTOP - Stops playing a track if it's currently playing.
(3)  197/     800 :                     ;
(3)  198/     800 :                     ; input:
(3)  199/     800 :                     ;   none
(3)  200/     800 :                     ;
(3)  201/     800 :                     ; returns:
(3)  202/     800 :                     ;   nothing
(3)  203/     800 :                     ;-----------------------------------------------------------------------
(3)  204/     800 :                     BIOS_MSCSTOP macro
(3)  205/     800 :                           CDBIOS #MSCSTOP
(3)  206/     800 :                           endm
(3)  207/     800 :                     
(3)  208/     800 :                     ;-----------------------------------------------------------------------
(3)  209/     800 :                     ; BIOS_MSCPLAY - Starts playing at a specified track.  Continues playing
(3)  210/     800 :                     ; through subsequent tracks.
(3)  211/     800 :                     ;
(3)  212/     800 :                     ; input:
(3)  213/     800 :                     ;   a0.l  address of 16 bit track number
(3)  214/     800 :                     ;
(3)  215/     800 :                     ; returns:
(3)  216/     800 :                     ;   nothing
(3)  217/     800 :                     ;-----------------------------------------------------------------------
(3)  218/     800 :                     BIOS_MSCPLAY macro
(3)  219/     800 :                           CDBIOS #MSCPLAY
(3)  220/     800 :                           endm
(3)  221/     800 :                     
(3)  222/     800 :                     ;-----------------------------------------------------------------------
(3)  223/     800 :                     ; BIOS_MSCPLAY1 - Plays a track once and pauses.
(3)  224/     800 :                     ;
(3)  225/     800 :                     ; input:
(3)  226/     800 :                     ;   a0.l  address of a 16 bit track number
(3)  227/     800 :                     ;
(3)  228/     800 :                     ; returns:
(3)  229/     800 :                     ;   nothing
(3)  230/     800 :                     ;-----------------------------------------------------------------------
(3)  231/     800 :                     BIOS_MSCPLAY1 macro
(3)  232/     800 :                           CDBIOS #MSCPLAY1
(3)  233/     800 :                           endm
(3)  234/     800 :                     
(3)  235/     800 :                     ;-----------------------------------------------------------------------
(3)  236/     800 :                     ; BIOS_MSCPLAYR - Plays the designated track repeatedly.
(3)  237/     800 :                     ;
(3)  238/     800 :                     ; input:
(3)  239/     800 :                     ;   a0.l  address of a 16 bit track number
(3)  240/     800 :                     ;
(3)  241/     800 :                     ; returns:
(3)  242/     800 :                     ;   nothing
(3)  243/     800 :                     ;-----------------------------------------------------------------------
(3)  244/     800 :                     BIOS_MSCPLAYR macro
(3)  245/     800 :                           CDBIOS #MSCPLAYR
(3)  246/     800 :                           endm
(3)  247/     800 :                     
(3)  248/     800 :                     ;-----------------------------------------------------------------------
(3)  249/     800 :                     ; BIOS_MSCPLAYT - Starts playing from a specified time.
(3)  250/     800 :                     ;
(3)  251/     800 :                     ; input:
(3)  252/     800 :                     ;   a0.l  address of a 32 bit BCD time code in the format mm:ss:ff:00
(3)  253/     800 :                     ;
(3)  254/     800 :                     ; returns:
(3)  255/     800 :                     ;   nothing
(3)  256/     800 :                     ;-----------------------------------------------------------------------
(3)  257/     800 :                     BIOS_MSCPLAYT macro
(3)  258/     800 :                           CDBIOS #MSCPLAYT
(3)  259/     800 :                           endm
(3)  260/     800 :                     
(3)  261/     800 :                     ;-----------------------------------------------------------------------
(3)  262/     800 :                     ; BIOS_MSCSEEK - Seeks to the beginning of the selected track and pauses.
(3)  263/     800 :                     ;
(3)  264/     800 :                     ; input:
(3)  265/     800 :                     ;   a0.l  address of a 16 bit track number
(3)  266/     800 :                     ;
(3)  267/     800 :                     ; returns:
(3)  268/     800 :                     ;   nothing
(3)  269/     800 :                     ;-----------------------------------------------------------------------
(3)  270/     800 :                     BIOS_MSCSEEK macro
(3)  271/     800 :                           CDBIOS #MSCSEEK
(3)  272/     800 :                           endm
(3)  273/     800 :                     
(3)  274/     800 :                     ;-----------------------------------------------------------------------
(3)  275/     800 :                     ; BIOS_MSCSEEK1 - Seeks to the beginning of the selected track and pauses.
(3)  276/     800 :                     ; Once the BIOS detects a pause state, it plays the track once.
(3)  277/     800 :                     ;
(3)  278/     800 :                     ; input:
(3)  279/     800 :                     ;   a0.l  address of a 16 bit track number
(3)  280/     800 :                     ;
(3)  281/     800 :                     ; returns:
(3)  282/     800 :                     ;   nothing
(3)  283/     800 :                     ;-----------------------------------------------------------------------
(3)  284/     800 :                     BIOS_MSCSEEK1 macro
(3)  285/     800 :                           CDBIOS #MSCSEEK1
(3)  286/     800 :                           endm
(3)  287/     800 :                     
(3)  288/     800 :                     ;-----------------------------------------------------------------------
(3)  289/     800 :                     ; BIOS_MSCSEEKT - Seeks to a specified time.
(3)  290/     800 :                     ;
(3)  291/     800 :                     ; input:
(3)  292/     800 :                     ;   a0.l  address of a 32 bit BCD time code in the format mm:ss:ff:00
(3)  293/     800 :                     ;
(3)  294/     800 :                     ; returns:
(3)  295/     800 :                     ;   nothing
(3)  296/     800 :                     ;-----------------------------------------------------------------------
(3)  297/     800 :                     BIOS_MSCSEEKT macro
(3)  298/     800 :                           CDBIOS #MSCSEEKT
(3)  299/     800 :                           endm
(3)  300/     800 :                     
(3)  301/     800 :                     ;-----------------------------------------------------------------------
(3)  302/     800 :                     ; BIOS_MSCPAUSEON - Pauses the drive when a track is playing.  If the
(3)  303/     800 :                     ; drive is left paused it will stop after a programmable delay (see
(3)  304/     800 :                     ; CDBPAUSE).
(3)  305/     800 :                     ;
(3)  306/     800 :                     ; input:
(3)  307/     800 :                     ;   none
(3)  308/     800 :                     ;
(3)  309/     800 :                     ; returns:
(3)  310/     800 :                     ;   nothing
(3)  311/     800 :                     ;-----------------------------------------------------------------------
(3)  312/     800 :                     BIOS_MSCPAUSEON macro
(3)  313/     800 :                           CDBIOS #MSCPAUSEON
(3)  314/     800 :                           endm
(3)  315/     800 :                     
(3)  316/     800 :                     ;-----------------------------------------------------------------------
(3)  317/     800 :                     ; BIOS_MSCPAUSEOFF - Resumes playing a track after a pause.  If the drive
(3)  318/     800 :                     ; has timed out and stopped, the BIOS will seek to the pause time (with
(3)  319/     800 :                     ; the attendant delay) and resume playing.
(3)  320/     800 :                     ;
(3)  321/     800 :                     ; input:
(3)  322/     800 :                     ;   none
(3)  323/     800 :                     ;
(3)  324/     800 :                     ; returns:
(3)  325/     800 :                     ;   nothing
(3)  326/     800 :                     ;-----------------------------------------------------------------------
(3)  327/     800 :                     BIOS_MSCPAUSEOFF macro
(3)  328/     800 :                           CDBIOS #MSCPAUSEOFF
(3)  329/     800 :                           endm
(3)  330/     800 :                     
(3)  331/     800 :                     ;-----------------------------------------------------------------------
(3)  332/     800 :                     ; BIOS_MSCSCANFF - Starts playing from the current position in fast
(3)  333/     800 :                     ; forward.
(3)  334/     800 :                     ;
(3)  335/     800 :                     ; input:
(3)  336/     800 :                     ;   none
(3)  337/     800 :                     ;
(3)  338/     800 :                     ; returns:
(3)  339/     800 :                     ;   nothing
(3)  340/     800 :                     ;-----------------------------------------------------------------------
(3)  341/     800 :                     BIOS_MSCSCANFF macro
(3)  342/     800 :                           CDBIOS #MSCSCANFF
(3)  343/     800 :                           endm
(3)  344/     800 :                     
(3)  345/     800 :                     ;-----------------------------------------------------------------------
(3)  346/     800 :                     ; BIOS_MSCSCANFR - Same as MSCSCANFF, but backwards.
(3)  347/     800 :                     ;
(3)  348/     800 :                     ; input:
(3)  349/     800 :                     ;   none
(3)  350/     800 :                     ;
(3)  351/     800 :                     ; returns:
(3)  352/     800 :                     ;   nothing
(3)  353/     800 :                     ;-----------------------------------------------------------------------
(3)  354/     800 :                     BIOS_MSCSCANFR macro
(3)  355/     800 :                           CDBIOS #MSCSCANFR
(3)  356/     800 :                           endm
(3)  357/     800 :                     
(3)  358/     800 :                     ;-----------------------------------------------------------------------
(3)  359/     800 :                     ; BIOS_MSCSCANOFF - Returns to normal play mode.  If the drive was
(3)  360/     800 :                     ; paused before the scan was initiated, it will be returned to pause.
(3)  361/     800 :                     ;
(3)  362/     800 :                     ; input:
(3)  363/     800 :                     ;   none
(3)  364/     800 :                     ;
(3)  365/     800 :                     ; returns:
(3)  366/     800 :                     ;   nothing
(3)  367/     800 :                     ;-----------------------------------------------------------------------
(3)  368/     800 :                     BIOS_MSCSCANOFF macro
(3)  369/     800 :                           CDBIOS #MSCSCANOFF
(3)  370/     800 :                           endm
(3)  371/     800 :                     
(3)  372/     800 :                     
(3)  373/     800 :                     ;-----------------------------------------------------------------------
(3)  374/     800 :                     ; CD-ROM
(3)  375/     800 :                     ;-----------------------------------------------------------------------
(3)  376/     800 :                     
(3)  377/     800 :                     ;-----------------------------------------------------------------------
(3)  378/     800 :                     ; BIOS_ROMREAD - Begins reading data from the CDROM at the designated
(3)  379/     800 :                     ; logical sector.  Executes a CDCSTART to begin the read, but doesn't
(3)  380/     800 :                     ; stop automatically.
(3)  381/     800 :                     ;
(3)  382/     800 :                     ; Note - ROMREAD actually pre-seeks by 2 sectors, but doesn't start
(3)  383/     800 :                     ; passing data to the CDC until the desired sector is reached.
(3)  384/     800 :                     ;
(3)  385/     800 :                     ; input:
(3)  386/     800 :                     ;   a0.l  address of a 32 bit logical sector number
(3)  387/     800 :                     ;
(3)  388/     800 :                     ; returns:
(3)  389/     800 :                     ;   nothing
(3)  390/     800 :                     ;-----------------------------------------------------------------------
(3)  391/     800 :                     BIOS_ROMREAD macro
(3)  392/     800 :                           CDBIOS #ROMREAD
(3)  393/     800 :                           endm
(3)  394/     800 :                     
(3)  395/     800 :                     ;-----------------------------------------------------------------------
(3)  396/     800 :                     ; BIOS_ROMREADN - Same as ROMREAD, but stops after reading the requested
(3)  397/     800 :                     ; number of sectors.
(3)  398/     800 :                     ;
(3)  399/     800 :                     ; input:
(3)  400/     800 :                     ;   a0.l  address of a 32 bit sector number and 32 bit sector count
(3)  401/     800 :                     ;           dc.l    $00000001   ; First sector to read
(3)  402/     800 :                     ;           dc.l    $00001234   ; Number of sectors to read
(3)  403/     800 :                     ;
(3)  404/     800 :                     ; returns:
(3)  405/     800 :                     ;   nothing
(3)  406/     800 :                     ;-----------------------------------------------------------------------
(3)  407/     800 :                     BIOS_ROMREADN macro
(3)  408/     800 :                           CDBIOS #ROMREADN
(3)  409/     800 :                           endm
(3)  410/     800 :                     
(3)  411/     800 :                     ;-----------------------------------------------------------------------
(3)  412/     800 :                     ; BIOS_ROMREADE - Same as ROMREAD, but reads between two logical sectors.
(3)  413/     800 :                     ;
(3)  414/     800 :                     ; input:
(3)  415/     800 :                     ;   a0.l  address of table of 32 bit logical sector numbers
(3)  416/     800 :                     ;           dc.l    $00000001   ; First sector to read
(3)  417/     800 :                     ;           dc.l    $00000123   ; Last sector to read
(3)  418/     800 :                     ;
(3)  419/     800 :                     ; returns:
(3)  420/     800 :                     ;   nothing
(3)  421/     800 :                     ;-----------------------------------------------------------------------
(3)  422/     800 :                     BIOS_ROMREADE macro
(3)  423/     800 :                           CDBIOS #ROMREADE
(3)  424/     800 :                           endm
(3)  425/     800 :                     
(3)  426/     800 :                     ;-----------------------------------------------------------------------
(3)  427/     800 :                     ; BIOS_ROMSEEK - Seeks to the designated logical sector and pauses.
(3)  428/     800 :                     ;
(3)  429/     800 :                     ; input:
(3)  430/     800 :                     ;   a0.l  address of a 32 bit logical sector number
(3)  431/     800 :                     ;
(3)  432/     800 :                     ; returns:
(3)  433/     800 :                     ;   nothing
(3)  434/     800 :                     ;-----------------------------------------------------------------------
(3)  435/     800 :                     BIOS_ROMSEEK macro
(3)  436/     800 :                           CDBIOS #ROMSEEK
(3)  437/     800 :                           endm
(3)  438/     800 :                     
(3)  439/     800 :                     ;-----------------------------------------------------------------------
(3)  440/     800 :                     ; BIOS_ROMPAUSEON - Stops reading data into the CDC and pauses.
(3)  441/     800 :                     ;
(3)  442/     800 :                     ; input:
(3)  443/     800 :                     ;   none
(3)  444/     800 :                     ;
(3)  445/     800 :                     ; returns:
(3)  446/     800 :                     ;   nothing
(3)  447/     800 :                     ;-----------------------------------------------------------------------
(3)  448/     800 :                     BIOS_ROMPAUSEON macro
(3)  449/     800 :                           CDBIOS #ROMPAUSEON
(3)  450/     800 :                           endm
(3)  451/     800 :                     
(3)  452/     800 :                     ;-----------------------------------------------------------------------
(3)  453/     800 :                     ; BIOS_ROMPAUSEOFF - Resumes reading data into the CDC from the current
(3)  454/     800 :                     ; logical sector.
(3)  455/     800 :                     ;
(3)  456/     800 :                     ; input:
(3)  457/     800 :                     ;   none
(3)  458/     800 :                     ;
(3)  459/     800 :                     ; returns:
(3)  460/     800 :                     ;   nothing
(3)  461/     800 :                     ;-----------------------------------------------------------------------
(3)  462/     800 :                     BIOS_ROMPAUSEOFF macro
(3)  463/     800 :                           CDBIOS #ROMPAUSEOFF
(3)  464/     800 :                           endm
(3)  465/     800 :                     
(3)  466/     800 :                     
(3)  467/     800 :                     ;-----------------------------------------------------------------------
(3)  468/     800 :                     ; MISC BIOS FUNCTIONS
(3)  469/     800 :                     ;-----------------------------------------------------------------------
(3)  470/     800 :                     
(3)  471/     800 :                     ;-----------------------------------------------------------------------
(3)  472/     800 :                     ; BIOS_CDBCHK - Querys the BIOS on the status of the last command.
(3)  473/     800 :                     ; Returns success if the command has been executed, not if it's complete.
(3)  474/     800 :                     ; This means that CDBCHK will return success on a seek command once the
(3)  475/     800 :                     ; seek has started, NOT when the seek is actually finished.
(3)  476/     800 :                     ;
(3)  477/     800 :                     ; input:
(3)  478/     800 :                     ;   none
(3)  479/     800 :                     ;
(3)  480/     800 :                     ; returns:
(3)  481/     800 :                     ;   cc  Command has been executed
(3)  482/     800 :                     ;   cs  BIOS is busy
(3)  483/     800 :                     ;-----------------------------------------------------------------------
(3)  484/     800 :                     BIOS_CDBCHK macro
(3)  485/     800 :                           CDBIOS #CDBCHK
(3)  486/     800 :                           endm
(3)  487/     800 :                     
(3)  488/     800 :                     ;-----------------------------------------------------------------------
(3)  489/     800 :                     ; BIOS_CDBSTAT
(3)  490/     800 :                     ;
(3)  491/     800 :                     ; input:
(3)  492/     800 :                     ;   none
(3)  493/     800 :                     ;
(3)  494/     800 :                     ; returns:
(3)  495/     800 :                     ;   a0.l  address of BIOS status table
(3)  496/     800 :                     ;-----------------------------------------------------------------------
(3)  497/     800 :                     BIOS_CDBSTAT macro
(3)  498/     800 :                           CDBIOS #CDBSTAT
(3)  499/     800 :                           endm
(3)  500/     800 :                     
(3)  501/     800 :                     ;-----------------------------------------------------------------------
(3)  502/     800 :                     ; BIOS_CDBTOCREAD - Gets the time for the specified track from the TOC.
(3)  503/     800 :                     ; If the track isn't in the TOC, the BIOS will either return the time of
(3)  504/     800 :                     ; the last track read or the beginning of the disk.  Don't call this
(3)  505/     800 :                     ; function while the BIOS is loading the TOC (see DRVINIT).
(3)  506/     800 :                     ;
(3)  507/     800 :                     ; input:
(3)  508/     800 :                     ;   d1.w  16 bit track number
(3)  509/     800 :                     ;
(3)  510/     800 :                     ; returns:
(3)  511/     800 :                     ;   d0.l  BCD time of requested track in mm:ss:ff:## format where ## is
(3)  512/     800 :                     ;         the requested track number or 00 if there was an error
(3)  513/     800 :                     ;
(3)  514/     800 :                     ;   d1.b  Track type:
(3)  515/     800 :                     ;           $00 = CD-DA track
(3)  516/     800 :                     ;           $FF = CD-ROM track
(3)  517/     800 :                     ;-----------------------------------------------------------------------
(3)  518/     800 :                     BIOS_CDBTOCREAD macro
(3)  519/     800 :                           CDBIOS #CDBTOCREAD
(3)  520/     800 :                           endm
(3)  521/     800 :                     
(3)  522/     800 :                     ;-----------------------------------------------------------------------
(3)  523/     800 :                     ; BIOS_CDBTOCWRITE - Writes data to the TOC in memory.  Don't write to
(3)  524/     800 :                     ; the TOC while the BIOS is performing a DRVINIT.
(3)  525/     800 :                     ;
(3)  526/     800 :                     ; input:
(3)  527/     800 :                     ;   a0.l  address of a table of TOC entries to write to the TOC.  Format
(3)  528/     800 :                     ;         of the entries is mm:ss:ff:## where ## is the track number.
(3)  529/     800 :                     ;
(3)  530/     800 :                     ; returns:
(3)  531/     800 :                     ;   nothing
(3)  532/     800 :                     ;-----------------------------------------------------------------------
(3)  533/     800 :                     BIOS_CDBTOCWRITE macro
(3)  534/     800 :                           CDBIOS #CDBTOCWRITE
(3)  535/     800 :                           endm
(3)  536/     800 :                     
(3)  537/     800 :                     ;-----------------------------------------------------------------------
(3)  538/     800 :                     ; BIOS_CDBPAUSE - Sets the delay time before the BIOS switches from
(3)  539/     800 :                     ; pause to standby.  Normal ranges for this delay time are $1194 - $FFFE.
(3)  540/     800 :                     ; A delay of $FFFF prevents the drive from stopping, but can  damage the
(3)  541/     800 :                     ; drive if used improperly.
(3)  542/     800 :                     ;
(3)  543/     800 :                     ; input:
(3)  544/     800 :                     ;   d1.w  16 bit delay time
(3)  545/     800 :                     ;
(3)  546/     800 :                     ; returns:
(3)  547/     800 :                     ;   nothing
(3)  548/     800 :                     ;-----------------------------------------------------------------------
(3)  549/     800 :                     BIOS_CDBPAUSE macro
(3)  550/     800 :                           CDBIOS #CDBPAUSE
(3)  551/     800 :                           endm
(3)  552/     800 :                     
(3)  553/     800 :                     
(3)  554/     800 :                     ;-----------------------------------------------------------------------
(3)  555/     800 :                     ; FADER
(3)  556/     800 :                     ;-----------------------------------------------------------------------
(3)  557/     800 :                     
(3)  558/     800 :                     ;-----------------------------------------------------------------------
(3)  559/     800 :                     ; BIOS_FDRSET - Sets the audio volume.  If bit 15 of the volume parameter
(3)  560/     800 :                     ; is 1, sets the master volume level.  There's a delay of up to 13ms
(3)  561/     800 :                     ; before the volume begins to change and another 23ms for the new volume
(3)  562/     800 :                     ; level to take effect.  The master volume sets a maximum level which the
(3)  563/     800 :                     ; volume level can't exceed.
(3)  564/     800 :                     ;
(3)  565/     800 :                     ; input:
(3)  566/     800 :                     ;   d1.w  16 bit volume         ($0000 = min    $0400 = max)
(3)  567/     800 :                     ;         16 bit master volume  ($8000 = min    $8400 = max)
(3)  568/     800 :                     ;
(3)  569/     800 :                     ; returns:
(3)  570/     800 :                     ;   nothing
(3)  571/     800 :                     ;-----------------------------------------------------------------------
(3)  572/     800 :                     BIOS_FDRSET macro
(3)  573/     800 :                           CDBIOS #FDRSET
(3)  574/     800 :                           endm
(3)  575/     800 :                     
(3)  576/     800 :                     ;-----------------------------------------------------------------------
(3)  577/     800 :                     ; BIOS_FDRCHG - Ramps the audio volume from its current level to a new
(3)  578/     800 :                     ; level at the requested rate.  As in FDRSET, there's a delay of up to
(3)  579/     800 :                     ; 13ms before the change starts.
(3)  580/     800 :                     ;
(3)  581/     800 :                     ; input:
(3)  582/     800 :                     ;   d1.l  32 bit volume change
(3)  583/     800 :                     ;         high word:  new 16 bit volume   ($0000 = min    $0400 = max)
(3)  584/     800 :                     ;         low word:   16 bit rate in steps/vblank
(3)  585/     800 :                     ;                     $0001 = slow
(3)  586/     800 :                     ;                     $0200 = fast
(3)  587/     800 :                     ;                     $0400 = set immediately
(3)  588/     800 :                     ;
(3)  589/     800 :                     ; returns:
(3)  590/     800 :                     ;   nothing
(3)  591/     800 :                     ;-----------------------------------------------------------------------
(3)  592/     800 :                     BIOS_FDRCHG macro
(3)  593/     800 :                           CDBIOS #FDRCHG
(3)  594/     800 :                           endm
(3)  595/     800 :                     
(3)  596/     800 :                     
(3)  597/     800 :                     ;-----------------------------------------------------------------------
(3)  598/     800 :                     ; CDC
(3)  599/     800 :                     ;-----------------------------------------------------------------------
(3)  600/     800 :                     
(3)  601/     800 :                     ;-----------------------------------------------------------------------
(3)  602/     800 :                     ; BIOS_CDCSTART - Starts reading data from the current logical sector
(3)  603/     800 :                     ; into the CDC.  The BIOS pre-seeks by 2 to 4 sectors and data read
(3)  604/     800 :                     ; actually begins before the requested sector.  It's up to the caller
(3)  605/     800 :                     ; to identify the correct starting sector (usually by checking the time
(3)  606/     800 :                     ; codes in the headers as they're read from the CDC buffer).
(3)  607/     800 :                     ;
(3)  608/     800 :                     ; input:
(3)  609/     800 :                     ;   none
(3)  610/     800 :                     ;
(3)  611/     800 :                     ; returns:
(3)  612/     800 :                     ;   nothing
(3)  613/     800 :                     ;-----------------------------------------------------------------------
(3)  614/     800 :                     BIOS_CDCSTART macro
(3)  615/     800 :                           CDBIOS #CDCSTART
(3)  616/     800 :                           endm
(3)  617/     800 :                     
(3)  618/     800 :                     ;-----------------------------------------------------------------------
(3)  619/     800 :                     ; BIOS_CDCSTOP - Stops reading data into the CDC.  If a sector is being
(3)  620/     800 :                     ; read when CDCSTOP is called, it's lost.
(3)  621/     800 :                     ;
(3)  622/     800 :                     ; input:
(3)  623/     800 :                     ;   none
(3)  624/     800 :                     ;
(3)  625/     800 :                     ; returns:
(3)  626/     800 :                     ;   nothing
(3)  627/     800 :                     ;-----------------------------------------------------------------------
(3)  628/     800 :                     BIOS_CDCSTOP macro
(3)  629/     800 :                           CDBIOS #CDCSTOP
(3)  630/     800 :                           endm
(3)  631/     800 :                     
(3)  632/     800 :                     ;-----------------------------------------------------------------------
(3)  633/     800 :                     ; BIOS_CDCSTAT - Queries the CDC buffer.  If no sector is ready for
(3)  634/     800 :                     ; read, the carry bit will be set.  Up to 5 sectors can be buffered in
(3)  635/     800 :                     ; the CDC buffer.
(3)  636/     800 :                     ;
(3)  637/     800 :                     ; input:
(3)  638/     800 :                     ;   none
(3)  639/     800 :                     ;
(3)  640/     800 :                     ; returns:
(3)  641/     800 :                     ;   cc  Sector available for read
(3)  642/     800 :                     ;   cs  No sectors available
(3)  643/     800 :                     ;-----------------------------------------------------------------------
(3)  644/     800 :                     BIOS_CDCSTAT macro
(3)  645/     800 :                           CDBIOS #CDCSTAT
(3)  646/     800 :                           endm
(3)  647/     800 :                     
(3)  648/     800 :                     ;-----------------------------------------------------------------------
(3)  649/     800 :                     ; BIOS_CDCREAD - If a sector is ready in the CDC buffer, the BIOS
(3)  650/     800 :                     ; prepares to send the sector to the current device destination.  Make
(3)  651/     800 :                     ; sure to set the device destination BEFORE calling CDCREAD.  If a
(3)  652/     800 :                     ; sector is ready, the carry bit will be cleared on return and it's
(3)  653/     800 :                     ; necessary to respond with a call to CDCACK.
(3)  654/     800 :                     ;
(3)  655/     800 :                     ; input:
(3)  656/     800 :                     ;   none
(3)  657/     800 :                     ;
(3)  658/     800 :                     ; returns:
(3)  659/     800 :                     ;   cc    Sector ready for transfer
(3)  660/     800 :                     ;   d0.l  Sector header in BCD mm:ss:ff:md format where md is sector mode
(3)  661/     800 :                     ;           $00 = CD-DA
(3)  662/     800 :                     ;           $01 = CD-ROM mode 1
(3)  663/     800 :                     ;           $02 = CD-ROM mode 2
(3)  664/     800 :                     ;   cs    Sector not ready
(3)  665/     800 :                     ;-----------------------------------------------------------------------
(3)  666/     800 :                     BIOS_CDCREAD macro
(3)  667/     800 :                           CDBIOS #CDCREAD
(3)  668/     800 :                           endm
(3)  669/     800 :                     
(3)  670/     800 :                     ;-----------------------------------------------------------------------
(3)  671/     800 :                     ; BIOS_CDCTRN - Uses the Sub-CPU to read one sector into RAM.  The
(3)  672/     800 :                     ; device destination must be set to SUB-CPU read before calling CDCTRN.
(3)  673/     800 :                     ;
(3)  674/     800 :                     ; input:
(3)  675/     800 :                     ;   a0.l  address of sector destination buffer (at least 2336 bytes)
(3)  676/     800 :                     ;   a1.l  address of header destination buffer (at least 4 bytes)
(3)  677/     800 :                     ;
(3)  678/     800 :                     ; returns:
(3)  679/     800 :                     ;   cc    Sector successfully transferred
(3)  680/     800 :                     ;   cs    Transfer failed
(3)  681/     800 :                     ;   a0.l  Next sector destination address (a0 + 2336)
(3)  682/     800 :                     ;   a1.l  Next header destination address (a1 + 4)
(3)  683/     800 :                     ;-----------------------------------------------------------------------
(3)  684/     800 :                     BIOS_CDCTRN macro
(3)  685/     800 :                           CDBIOS #CDCTRN
(3)  686/     800 :                           endm
(3)  687/     800 :                     
(3)  688/     800 :                     ;-----------------------------------------------------------------------
(3)  689/     800 :                     ; BIOS_CDCACK - Informs the CDC that the current sector has been read
(3)  690/     800 :                     ; and the caller is ready for the next sector.
(3)  691/     800 :                     ;
(3)  692/     800 :                     ; input:
(3)  693/     800 :                     ;   none
(3)  694/     800 :                     ;
(3)  695/     800 :                     ; returns:
(3)  696/     800 :                     ;   nothing
(3)  697/     800 :                     ;-----------------------------------------------------------------------
(3)  698/     800 :                     BIOS_CDCACK macro
(3)  699/     800 :                           CDBIOS #CDCACK
(3)  700/     800 :                           endm
(3)  701/     800 :                     
(3)  702/     800 :                     
(3)  703/     800 :                     ;-----------------------------------------------------------------------
(3)  704/     800 :                     ; BIOS_CDCSETMODE - Tells the BIOS which mode to read the CD in.  Accepts
(3)  705/     800 :                     ; bit flags that allow selection of the three basic CD modes as follows:
(3)  706/     800 :                     ;
(3)  707/     800 :                     ;       Mode 0 (CD-DA)                              2
(3)  708/     800 :                     ;       Mode 1 (CD-ROM with full error correction)  0
(3)  709/     800 :                     ;       Mode 2 (CD-ROM with CRC only)               1
(3)  710/     800 :                     ;
(3)  711/     800 :                     ; input:
(3)  712/     800 :                     ;   d1.w  FEDCBA9876543210
(3)  713/     800 :                     ;                     ||||
(3)  714/     800 :                     ;                     |||+--> CD Mode 2
(3)  715/     800 :                     ;                     ||+---> CD-DA mode
(3)  716/     800 :                     ;                     |+----> transfer error block with data
(3)  717/     800 :                     ;                     +-----> re-read last data
(3)  718/     800 :                     ;
(3)  719/     800 :                     ; returns:
(3)  720/     800 :                     ;   nothing
(3)  721/     800 :                     ;-----------------------------------------------------------------------
(3)  722/     800 :                     BIOS_CDCSETMODE macro
(3)  723/     800 :                           CDBIOS #CDCSETMODE
(3)  724/     800 :                           endm
(3)  725/     800 :                     
(3)  726/     800 :                     
(3)  727/     800 :                     ;-----------------------------------------------------------------------
(3)  728/     800 :                     ; SUBCODES
(3)  729/     800 :                     ;-----------------------------------------------------------------------
(3)  730/     800 :                     
(3)  731/     800 :                     ;-----------------------------------------------------------------------
(3)  732/     800 :                     ; BIOS_SCDINIT - Initializes the BIOS for subcode reads.
(3)  733/     800 :                     ;
(3)  734/     800 :                     ; input:
(3)  735/     800 :                     ;   a0.l  address of scratch buffer (at least $750 long)
(3)  736/     800 :                     ;
(3)  737/     800 :                     ; returns:
(3)  738/     800 :                     ;   nothing
(3)  739/     800 :                     ;-----------------------------------------------------------------------
(3)  740/     800 :                     BIOS_SCDINIT macro
(3)  741/     800 :                           CDBIOS #SCDINIT
(3)  742/     800 :                           endm
(3)  743/     800 :                     
(3)  744/     800 :                     ;-----------------------------------------------------------------------
(3)  745/     800 :                     ; BIOS_SCDSTART - Enables reading of subcode data by the CDC.
(3)  746/     800 :                     ;
(3)  747/     800 :                     ; input:
(3)  748/     800 :                     ;   d1.w  Subcode processing mode
(3)  749/     800 :                     ;           0 = --------
(3)  750/     800 :                     ;           1 = --RSTUVW
(3)  751/     800 :                     ;           2 = PQ------
(3)  752/     800 :                     ;           3 = PQRSTUVW
(3)  753/     800 :                     ;
(3)  754/     800 :                     ; returns:
(3)  755/     800 :                     ;   nothing
(3)  756/     800 :                     ;-----------------------------------------------------------------------
(3)  757/     800 :                     BIOS_SCDSTART macro
(3)  758/     800 :                           CDBIOS #SCDSTART
(3)  759/     800 :                           endm
(3)  760/     800 :                     
(3)  761/     800 :                     ;-----------------------------------------------------------------------
(3)  762/     800 :                     ; BIOS_SCDSTOP - Disables reading of subcode data by the CDC.
(3)  763/     800 :                     ;
(3)  764/     800 :                     ; input:
(3)  765/     800 :                     ;   none
(3)  766/     800 :                     ;
(3)  767/     800 :                     ; returns:
(3)  768/     800 :                     ;   nothing
(3)  769/     800 :                     ;-----------------------------------------------------------------------
(3)  770/     800 :                     BIOS_SCDSTOP macro
(3)  771/     800 :                           CDBIOS #SCDSTOP
(3)  772/     800 :                           endm
(3)  773/     800 :                     
(3)  774/     800 :                     ;-----------------------------------------------------------------------
(3)  775/     800 :                     ; BIOS_SCDSTAT - Checks subcode error status.
(3)  776/     800 :                     ;
(3)  777/     800 :                     ; input:
(3)  778/     800 :                     ;   none
(3)  779/     800 :                     ;
(3)  780/     800 :                     ; returns:
(3)  781/     800 :                     ;   d0.l  errqcodecrc / errpackcirc / scdflag / restrcnt
(3)  782/     800 :                     ;   d1.l  erroverrun / errpacketbufful / errqcodefufful / errpackfufful
(3)  783/     800 :                     ;-----------------------------------------------------------------------
(3)  784/     800 :                     BIOS_SCDSTAT macro
(3)  785/     800 :                           CDBIOS #SCDSTAT
(3)  786/     800 :                           endm
(3)  787/     800 :                     
(3)  788/     800 :                     ;-----------------------------------------------------------------------
(3)  789/     800 :                     ; BIOS_SCDREAD - Reads R through W subcode channels.
(3)  790/     800 :                     ;
(3)  791/     800 :                     ; input:
(3)  792/     800 :                     ;   a0.l  address of subcode buffer (24 bytes minimum)
(3)  793/     800 :                     ;
(3)  794/     800 :                     ; returns:
(3)  795/     800 :                     ;   cc    Read successful
(3)  796/     800 :                     ;   cs    Read failed
(3)  797/     800 :                     ;   a0.l  address of next subcode buffer (a0.l + 24)
(3)  798/     800 :                     ;-----------------------------------------------------------------------
(3)  799/     800 :                     BIOS_SCDREAD macro
(3)  800/     800 :                           CDBIOS #SCDREAD
(3)  801/     800 :                           endm
(3)  802/     800 :                     
(3)  803/     800 :                     ;-----------------------------------------------------------------------
(3)  804/     800 :                     ; BIOS_SCDPQ - Gets P & Q codes from subcode.
(3)  805/     800 :                     ;
(3)  806/     800 :                     ; input:
(3)  807/     800 :                     ;   a0.l  address of Q code buffer (12 bytes minimum)
(3)  808/     800 :                     ;
(3)  809/     800 :                     ; returns:
(3)  810/     800 :                     ;   cc    Read successful
(3)  811/     800 :                     ;   cs    Read failed
(3)  812/     800 :                     ;   a0.l  address of next Q code buffer (a0.l + 12)
(3)  813/     800 :                     ;-----------------------------------------------------------------------
(3)  814/     800 :                     BIOS_SCDPQ macro
(3)  815/     800 :                           CDBIOS #SCDPQ
(3)  816/     800 :                           endm
(3)  817/     800 :                     
(3)  818/     800 :                     ;-----------------------------------------------------------------------
(3)  819/     800 :                     ; BIOS_SCDPQL - Gets the last P & Q codes.
(3)  820/     800 :                     ;
(3)  821/     800 :                     ; input:
(3)  822/     800 :                     ;   a0.l  address of Q code buffer (12 bytes minimum)
(3)  823/     800 :                     ;
(3)  824/     800 :                     ; returns:
(3)  825/     800 :                     ;   cc    Read successful
(3)  826/     800 :                     ;   cs    Read failed
(3)  827/     800 :                     ;   a0.l  address of next Q code buffer (a0.l + 12)
(3)  828/     800 :                     ;-----------------------------------------------------------------------
(3)  829/     800 :                     BIOS_SCDPQL macro
(3)  830/     800 :                           CDBIOS #SCDPQL
(3)  831/     800 :                           endm
(3)  832/     800 :                     
(3)  833/     800 :                     
(3)  834/     800 :                     ;-----------------------------------------------------------------------
(3)  835/     800 :                     ; FRONT PANEL LEDS
(3)  836/     800 :                     ;-----------------------------------------------------------------------
(3)  837/     800 :                     
(3)  838/     800 :                     ;-----------------------------------------------------------------------
(3)  839/     800 :                     ; BIOS_LEDSET - Controls the Ready and Access LED's on the front panel
(3)  840/     800 :                     ; of the CD unit.
(3)  841/     800 :                     ;
(3)  842/     800 :                     ; input:
(3)  843/     800 :                     ;   d1.w  MODE          Ready (green)   Access (red)    System Indication
(3)  844/     800 :                     ;         ---------------------------------------------------------------
(3)  845/     800 :                     ;                           off             off         only at reset
(3)  846/     800 :                     ;         LEDREADY (0)      on              blink       CD ready / no disk
(3)  847/     800 :                     ;         LEDDISCIN (1)     on              off         CD ready / disk ok
(3)  848/     800 :                     ;         LEDACCESS (2)     on              on          CD accessing
(3)  849/     800 :                     ;         LEDSTANDBY (3)    blink           off         standby mode
(3)  850/     800 :                     ;         LEDERROR (4)      blink           blink       reserved
(3)  851/     800 :                     ;         LEDMODE5 (5)      blink           on          reserved
(3)  852/     800 :                     ;         LEDMODE6 (6)      off             blink       reserved
(3)  853/     800 :                     ;         LEDMODE7 (7)      off             on          reserved
(3)  854/     800 :                     ;         LEDSYSTEM (?)                                 rtn ctrl to BIOS
(3)  855/     800 :                     ;
(3)  856/     800 :                     ; returns:
(3)  857/     800 :                     ;   nothing
(3)  858/     800 :                     ;-----------------------------------------------------------------------
(3)  859/     800 :                     BIOS_LEDSET macro
(3)  860/     800 :                           CDBIOS #LEDSET
(3)  861/     800 :                           endm
(3)  862/     800 :                     
(3)  863/     800 :                     
(3)  864/     800 :                     ;-----------------------------------------------------------------------
(3)  865/     800 :                     ; Back-Up RAM
(3)  866/     800 :                     ;-----------------------------------------------------------------------
(3)  867/     800 :                     
(3)  868/     800 :                     
(3)  869/     800 :                     ;-----------------------------------------------------------------------
(3)  870/     800 :                     ; NOTE:  The backup ram on the super target devlopment systems is write
(3)  871/     800 :                     ;         protected if the production Boot Rom is being used.  A
(3)  872/     800 :                     ;         Development Boot Rom must be obtained before the backup ram can
(3)  873/     800 :                     ;         be used.
(3)  874/     800 :                     ;
(3)  875/     800 :                     ;        The name of the save game files must be registered with SOJ before
(3)  876/     800 :                     ;         a game can be shipped.
(3)  877/     800 :                     ;
(3)  878/     800 :                     ;        Please make sure to read the CD Software Standards section in the
(3)  879/     800 :                     ;         manual.  There is a section on backup ram standards that must be
(3)  880/     800 :                     ;         followed.
(3)  881/     800 :                     ;
(3)  882/     800 :                     ;        For a full description of each Back-Up Ram function, see the BIOS
(3)  883/     800 :                     ;         section of the CD manual.
(3)  884/     800 :                     ;
(3)  885/     800 :                     ;        Some of the Back-Up RAM functions require a string buffer to
(3)  886/     800 :                     ;         be passed into the function.  Some of these functions return
(3)  887/     800 :                     ;         0 terminated text strings.
(3)  888/     800 :                     ;-------------------------------------------------------------------------
(3)  889/     800 :                     
(3)  890/     800 :                     
(3)  891/     800 :                     ;-----------------------------------------------------------------------
(3)  892/     800 :                     ; BIOS_BRMINIT - Prepares to write into and read from Back-Up Ram.
(3)  893/     800 :                     ;
(3)  894/     800 :                     ; input:
(3)  895/     800 :                     ;   a0.l  pointer to scratch ram (size $640 bytes).
(3)  896/     800 :                     ;
(3)  897/     800 :                     ;   a1.l  pointer to the buffer for display strings (size: 12 bytes)
(3)  898/     800 :                     ;
(3)  899/     800 :                     ; returns:
(3)  900/     800 :                     ;   cc    SEGA formatted RAM is present
(3)  901/     800 :                     ;   cs    Not formatted or no RAM
(3)  902/     800 :                     ;   d0.w  size of backup RAM  $2(000) ~ $100(000)  bytes
(3)  903/     800 :                     ;   d1.w  0 : No RAM
(3)  904/     800 :                     ;         1 : Not Formatted
(3)  905/     800 :                     ;         2 : Other Format
(3)  906/     800 :                     ;   a1.l  pointer to display strings
(3)  907/     800 :                     ;-----------------------------------------------------------------------
(3)  908/     800 :                     BIOS_BRMINIT macro
(3)  909/     800 :                           BURAM #BRMINIT
(3)  910/     800 :                           endm
(3)  911/     800 :                     
(3)  912/     800 :                     ;-----------------------------------------------------------------------
(3)  913/     800 :                     ; BIOS_BRMSTAT - Returns how much Back-Up RAM has been used.
(3)  914/     800 :                     ;
(3)  915/     800 :                     ; input:
(3)  916/     800 :                     ;   a1.l  pointer to display string buffer (size: 12 bytes)
(3)  917/     800 :                     ;
(3)  918/     800 :                     ; returns:
(3)  919/     800 :                     ;   d0.w  number of blocks of free area
(3)  920/     800 :                     ;   d1.w  number of files in directory
(3)  921/     800 :                     ;-----------------------------------------------------------------------
(3)  922/     800 :                     BIOS_BRMSTAT macro
(3)  923/     800 :                           BURAM #BRMSTAT
(3)  924/     800 :                           endm
(3)  925/     800 :                     
(3)  926/     800 :                     ;-----------------------------------------------------------------------
(3)  927/     800 :                     ; BIOS_BRMSERCH - Searches for the desired file in Back-Up Ram.  The file
(3)  928/     800 :                     ;                  names are 11 ASCII characters terminated with a 0.
(3)  929/     800 :                     ;
(3)  930/     800 :                     ; input:
(3)  931/     800 :                     ;   a0.l  pointer to parameter (file name) table
(3)  932/     800 :                     ;             file name = 11 ASCII chars [0~9 A~Z_]   0 terminated
(3)  933/     800 :                     ;
(3)  934/     800 :                     ; returns:
(3)  935/     800 :                     ;   cc    file name found
(3)  936/     800 :                     ;   cs    file name not found
(3)  937/     800 :                     ;   d0.w  number of blocks
(3)  938/     800 :                     ;   d1.b  MODE
(3)  939/     800 :                     ;         0 : normal
(3)  940/     800 :                     ;        -1 : data protected (with protect function)
(3)  941/     800 :                     ;   a0.l  backup ram start address for search
(3)  942/     800 :                     ;-----------------------------------------------------------------------
(3)  943/     800 :                     BIOS_BRMSERCH macro
(3)  944/     800 :                           BURAM #BRMSERCH
(3)  945/     800 :                           endm
(3)  946/     800 :                     
(3)  947/     800 :                     ;-----------------------------------------------------------------------
(3)  948/     800 :                     ; BIOS_BRMREAD - reads data from Back-Up RAM.
(3)  949/     800 :                     ;
(3)  950/     800 :                     ; input:
(3)  951/     800 :                     ;   a0.l  pointer to parameter (file name) table
(3)  952/     800 :                     ;   a1.l  pointer to write buffer
(3)  953/     800 :                     ;
(3)  954/     800 :                     ; returns:
(3)  955/     800 :                     ;   cc    Read Okay
(3)  956/     800 :                     ;   cs    Error
(3)  957/     800 :                     ;   d0.w  number of blocks
(3)  958/     800 :                     ;   d1.b  MODE
(3)  959/     800 :                     ;         0 : normal
(3)  960/     800 :                     ;        -1 : data protected
(3)  961/     800 :                     ;-----------------------------------------------------------------------
(3)  962/     800 :                     BIOS_BRMREAD macro
(3)  963/     800 :                           BURAM #BRMREAD
(3)  964/     800 :                           endm
(3)  965/     800 :                     
(3)  966/     800 :                     ;-----------------------------------------------------------------------
(3)  967/     800 :                     ; BIOS_BRMWRITE - Writes data in Back-Up RAM.
(3)  968/     800 :                     ;
(3)  969/     800 :                     ; input:
(3)  970/     800 :                     ;   a0.l  pointer to parameter (file name) table
(3)  971/     800 :                     ;          flag.b       $00: normal
(3)  972/     800 :                     ;                       $FF: encoded (with protect function)
(3)  973/     800 :                     ;          block_size.w $00: 1 block = $40 bytes
(3)  974/     800 :                     ;                       $FF: 1 block = $20 bytes
(3)  975/     800 :                     ;   a1.l  pointer to save data
(3)  976/     800 :                     ;
(3)  977/     800 :                     ; returns:
(3)  978/     800 :                     ;   cc    Okay, complete
(3)  979/     800 :                     ;   cs    Error, cannot write in the file
(3)  980/     800 :                     ;-----------------------------------------------------------------------
(3)  981/     800 :                     BIOS_BRMWRITE macro
(3)  982/     800 :                           BURAM #BRMWRITE
(3)  983/     800 :                           endm
(3)  984/     800 :                     
(3)  985/     800 :                     ;-----------------------------------------------------------------------
(3)  986/     800 :                     ; BIOS_BRMDEL - Deletes data on Back-Up Ram.
(3)  987/     800 :                     ;
(3)  988/     800 :                     ; input:
(3)  989/     800 :                     ;   a0.l  pointer to parameter (file name) table
(3)  990/     800 :                     ;
(3)  991/     800 :                     ; returns:
(3)  992/     800 :                     ;   cc    deleted
(3)  993/     800 :                     ;   cs    not found
(3)  994/     800 :                     ;-----------------------------------------------------------------------
(3)  995/     800 :                     BIOS_BRMDEL macro
(3)  996/     800 :                           BURAM #BRMDEL
(3)  997/     800 :                           endm
(3)  998/     800 :                     
(3)  999/     800 :                     ;-----------------------------------------------------------------------
(3) 1000/     800 :                     ; BIOS_BRMFORMAT - First initializes the directory and then formats the
(3) 1001/     800 :                     ;                   Back-Up RAM
(3) 1002/     800 :                     ;
(3) 1003/     800 :                     ;                  Call BIOS_BRMINIT before calling this function
(3) 1004/     800 :                     ;
(3) 1005/     800 :                     ; input:
(3) 1006/     800 :                     ;   none
(3) 1007/     800 :                     ;
(3) 1008/     800 :                     ; returns:
(3) 1009/     800 :                     ;   cc    Okay, formatted
(3) 1010/     800 :                     ;   cs    Error, cannot format
(3) 1011/     800 :                     ;-----------------------------------------------------------------------
(3) 1012/     800 :                     BIOS_BRMFORMAT macro
(3) 1013/     800 :                           BURAM #BRMFORMAT
(3) 1014/     800 :                           endm
(3) 1015/     800 :                     
(3) 1016/     800 :                     ;-----------------------------------------------------------------------
(3) 1017/     800 :                     ; BIOS_BRMDIR - Reads directory
(3) 1018/     800 :                     ;
(3) 1019/     800 :                     ; input:
(3) 1020/     800 :                     ;   d1.l  H: number of files to skip when all files cannot be read in one try
(3) 1021/     800 :                     ;         L: size of directory buffer (# of files that can be read in the
(3) 1022/     800 :                     ;             directory buffer)
(3) 1023/     800 :                     ;   a0.l  pointer to parameter (file name) table
(3) 1024/     800 :                     ;   a1.l  pointer to directory buffer
(3) 1025/     800 :                     ;
(3) 1026/     800 :                     ; returns:
(3) 1027/     800 :                     ;   cc    Okay, complete
(3) 1028/     800 :                     ;   cs    Full, too much to read into directory buffer
(3) 1029/     800 :                     ;-----------------------------------------------------------------------
(3) 1030/     800 :                     BIOS_BRMDIR macro
(3) 1031/     800 :                           BURAM #BRMDIR
(3) 1032/     800 :                           endm
(3) 1033/     800 :                     
(3) 1034/     800 :                     ;-----------------------------------------------------------------------
(3) 1035/     800 :                     ; BIOS_BRMVERIFY - Checks data written on Back-Up Ram.
(3) 1036/     800 :                     ;
(3) 1037/     800 :                     ; input:
(3) 1038/     800 :                     ;   a0.l  pointer to parameter (file name) table
(3) 1039/     800 :                     ;          flag.b       $00: normal
(3) 1040/     800 :                     ;                       $FF: encoded (with protect function)
(3) 1041/     800 :                     ;          block_size.w $00: 1 block = $40 bytes
(3) 1042/     800 :                     ;                       $FF: 1 block = $20 bytes
(3) 1043/     800 :                     ;   a1.l  pointer to save data
(3) 1044/     800 :                     ;
(3) 1045/     800 :                     ; returns:
(3) 1046/     800 :                     ;   cc    Okay
(3) 1047/     800 :                     ;   cs    Error
(3) 1048/     800 :                     ;   d0.w  Error Number
(3) 1049/     800 :                     ;        -1 : Data does not match
(3) 1050/     800 :                     ;         0 : File not found
(3) 1051/     800 :                     ;-----------------------------------------------------------------------
(3) 1052/     800 :                     BIOS_BRMVERIFY macro
(3) 1053/     800 :                           BURAM #BRMVERIFY
(3) 1054/     800 :                           endm
(3) 1055/     800 :                     
(2)   67/     800 :                     
(2)   68/     800 :                     ; ====================================================================
(2)   69/     800 :                     ; ----------------------------------------------------------------
(2)   70/     800 :                     ; MAIN CODE
(2)   71/     800 :                     ; ----------------------------------------------------------------
(2)   72/     800 :                     
(2)   73/    6000 :                     		phase $6000
(2)   74/    6000 : 4D41 494E 2D4E      		dc.b "MAIN-NIKONA",0
             6006 : 494B 4F4E 4100    
(2)   75/    600C : 0000 0000           		dc.w 0,0
(2)   76/    6010 : 0000 0000           		dc.l 0
(2)   77/    6014 : 0000 0000           		dc.l 0
(2)   78/    6018 : 0000 0020           		dc.l $20
(2)   79/    601C : 0000 0000           		dc.l 0
(2)   80/    6020 :                     .table:
(2)   81/    6020 : 000A                		dc.w SP_Init-.table
(2)   82/    6022 : 00DE                		dc.w SP_Main-.table
(2)   83/    6024 : 005E                		dc.w SP_IRQ-.table
(2)   84/    6026 : 00DC                		dc.w SP_User-.table
(2)   85/    6028 : 0000                		dc.w 0
(2)   86/    602A :                     
(2)   87/    602A :                     ; ====================================================================
(2)   88/    602A :                     ; ----------------------------------------------------------------
(2)   89/    602A :                     ; Init
(2)   90/    602A :                     ; ----------------------------------------------------------------
(2)   91/    602A :                     
(2)   92/    602A :                     SP_Init:
(2)   93/    602A : 08B8 0003 8033      		bclr	#3,(scpu_reg+$33).w
(2)   94/    6030 : 11FC 00FF 8031      		move.b	#$FF,(scpu_reg+$31).w
(2)   95/    6036 : 23FC 0000 60FA      		move.l	#SP_Timer,($00005F82+2).l
             603C : 0000 5F84          
(2)   96/    6040 :                     
(2)   97/    6040 : 13FC 0000 FFFF      		move.b	#0,(scpu_reg+mcd_memory).l
             6046 : 8003             
(2)   98/    6048 : 6100 0362           		bsr	spInitFS
(2)   99/    604C : 41FA 0022           		lea	file_subdata(pc),a0
(2)  100/    6050 : 6100 0394           		bsr	spSearchFile
(2)  101/    6054 : 41F9 0002 0000      		lea	(SUBCPU_DATA),a0
(2)  102/    605A : 6100 02D8           		bsr	spReadSectorsN
(2)  103/    605E : 6100 03DA           		bsr	CDPCM_Init
(2)  104/    6062 : 11FC 0000 800F      		move.b	#0,(scpu_reg+mcd_comm_s).w	; Reset SUB-status
(2)  105/    6068 :                     
(2)  106/    6068 : 08F8 0003 8033      		bset	#3,(scpu_reg+$33).w
(2)  107/    606E : 4E75                		rts
(2)  108/    6070 :                     
(2)  109/    6070 :                     ; --------------------------------------------------------
(2)  110/    6070 :                     
(2)  111/    6070 :                     file_subdata:
(2)  112/    6070 : 5355 425F 4441      		dc.b "SUB_DATA.BIN",0
             6076 : 5441 2E42 494E 00 
(2)  113/    607D :                     		align 2
(2)  114/    607E :                     
(2)  115/    607E :                     ; =====================================================================
(2)  116/    607E :                     ; ----------------------------------------------------------------
(2)  117/    607E :                     ; Level 2 IRQ
(2)  118/    607E :                     ;
(2)  119/    607E :                     ; NOTE: The INTRO sequence calls this every frame.
(2)  120/    607E :                     ; ----------------------------------------------------------------
(2)  121/    607E :                     
(2)  122/    607E :                     SP_IRQ:
(2)  123/    607E : 08B8 0003 8033      		bclr	#3,(scpu_reg+$33).w		; Disable Timer interrupt
(2)  124/    6084 : 1038 800E           		move.b	(scpu_reg+mcd_comm_m).w,d0
(2)  125/    6088 : 0240 00F0           		andi.w	#$F0,d0
(2)  126/    608C : 0C40 00F0           		cmpi.w	#$F0,d0
(2)  127/    6090 : 6660                		bne.s	.not_now
(2)  128/    6092 : 11FC 00FF 800F      		move.b	#-1,(scpu_reg+mcd_comm_s).w	; Respond to Z80
(2)  129/    6098 :                     .wait_start:
(2)  130/    6098 : 1038 800E           		move.b	(scpu_reg+mcd_comm_m).w,d0	; MAIN is ready?
(2)  131/    609C : 0800 0001           		btst	#1,d0
(2)  132/    60A0 : 67F6                		beq.s	.wait_start
(2)  133/    60A2 : 43F8 6A80           		lea	(RAM_CdSub_PcmTable),a1
(2)  134/    60A6 : 45F8 8010           		lea	(scpu_reg+mcd_dcomm_m).w,a2
(2)  135/    60AA : 11FC 0000 800F      		move.b	#$00,(scpu_reg+mcd_comm_s).w
(2)  136/    60B0 :                     	; a1 - table
(2)  137/    60B0 :                     	; a2 - MAIN data
(2)  138/    60B0 :                     .next_packet:
(2)  139/    60B0 : 1039 FFFF 800E      		move.b	(scpu_reg+mcd_comm_m).l,d0	; Wait PASS
(2)  140/    60B6 : 0800 0001           		btst	#1,d0				; LOCK enabled?
(2)  141/    60BA : 6730                		beq.s	.exit_now
(2)  142/    60BC : 0800 0000           		btst	#0,d0				; MAIN passed the packet?
(2)  143/    60C0 : 67EE                		beq.s	.next_packet
(2)  144/    60C2 : 204A                		move.l	a2,a0
(2)  145/    60C4 : 32D8                		move.w	(a0)+,(a1)+			; WORD passes
(2)  146/    60C6 : 32D8                		move.w	(a0)+,(a1)+
(2)  147/    60C8 : 32D8                		move.w	(a0)+,(a1)+
(2)  148/    60CA : 32D8                		move.w	(a0)+,(a1)+
(2)  149/    60CC : 32D8                		move.w	(a0)+,(a1)+
(2)  150/    60CE : 32D8                		move.w	(a0)+,(a1)+
(2)  151/    60D0 : 32D8                		move.w	(a0)+,(a1)+
(2)  152/    60D2 : 32D8                		move.w	(a0)+,(a1)+
(2)  153/    60D4 : 11FC 0001 800F      		move.b	#$01,(scpu_reg+mcd_comm_s).w	; Sub-CPU got the data
(2)  154/    60DA : 1038 800E           .wait_main:	move.b	(scpu_reg+mcd_comm_m).w,d0	; Wait Z80 bit
(2)  155/    60DE : 0800 0000           		btst	#0,d0
(2)  156/    60E2 : 66F6                		bne.s	.wait_main
(2)  157/    60E4 : 11FC 0000 800F      		move.b	#$00,(scpu_reg+mcd_comm_s).w	; Sub-CPU is free
(2)  158/    60EA : 60C4                		bra	.next_packet
(2)  159/    60EC :                     .exit_now:
(2)  160/    60EC : 50F9 0000 6AC3      		st.b	(RAM_CdSub_PcmTblUpd).l		; Set table update flag
(2)  161/    60F2 :                     .not_now:
(2)  162/    60F2 : 08F8 0003 8033      		bset	#3,(scpu_reg+$33).w		; Enable Timer interrupt
(2)  163/    60F8 : 4E75                		rts
(2)  164/    60FA :                     
(2)  165/    60FA :                     ; =====================================================================
(2)  166/    60FA :                     ; ----------------------------------------------------------------
(2)  167/    60FA :                     ; Level 3 IRQ
(2)  168/    60FA :                     ; ----------------------------------------------------------------
(2)  169/    60FA :                     
(2)  170/    60FA :                     SP_Timer:
(2)  171/    60FA :                     ; 		movem.l	a0-a6/d0-d7,-(sp)
(2)  172/    60FA :                     ; 		ori.w	#$0700,sr
(2)  173/    60FA :                     ; 		bsr	CDPCM_ReadTable			; Process table we just got.
(2)  174/    60FA :                     ; 		bsr	CDPCM_Update
(2)  175/    60FA :                     ; 		bsr	CDPCM_Stream
(2)  176/    60FA :                     ; 		andi.w	#$F8FF,sr
(2)  177/    60FA :                     ; 		movem.l	(sp)+,a0-a6/d0-d7
(2)  178/    60FA : 4E73                		rte	; <--
(2)  179/    60FC :                     
(2)  180/    60FC :                     ; =====================================================================
(2)  181/    60FC :                     ; ----------------------------------------------------------------
(2)  182/    60FC :                     ; User interrupt
(2)  183/    60FC :                     ; ----------------------------------------------------------------
(2)  184/    60FC :                     
(2)  185/    60FC :                     SP_User:
(2)  186/    60FC : 4E75                		rts
(2)  187/    60FE :                     
(2)  188/    60FE :                     ; ====================================================================
(2)  189/    60FE :                     ; ----------------------------------------------------------------
(2)  190/    60FE :                     ; Main
(2)  191/    60FE :                     ;
(2)  192/    60FE :                     ; mcd_comm_m COMMAND READ ONLY:
(2)  193/    60FE :                     ; %lp0iiiii
(2)  194/    60FE :                     ;
(2)  195/    60FE :                     ; mcd_comm_s STATUS READ/WRITE:
(2)  196/    60FE :                     ; %bp000000
(2)  197/    60FE :                     ;
(2)  198/    60FE :                     ; a6 - comm data MAIN (READ ONLY)
(2)  199/    60FE :                     ; a5 - comm data SUB (READ/WRITE)
(2)  200/    60FE :                     ; ----------------------------------------------------------------
(2)  201/    60FE :                     
(2)  202/    60FE :                     SP_Main:
(2)  203/    60FE :                     	rept 6
(2)  204/    60FE :                     		bsr	CDPCM_ReadTable			; Process table we just got.
(2)  205/    60FE :                     		bsr	CDPCM_Update
(2)  206/    60FE :                     		bsr	CDPCM_Stream
(2)  207/    60FE :                     	endm
(2)  204/    60FE : 6100 03AA           		bsr	CDPCM_ReadTable			; Process table we just got.
(2)  205/    6102 : 6100 05A2           		bsr	CDPCM_Update
(2)  206/    6106 : 6100 048A           		bsr	CDPCM_Stream
(2)  204/    610A : 6100 039E           		bsr	CDPCM_ReadTable			; Process table we just got.
(2)  205/    610E : 6100 0596           		bsr	CDPCM_Update
(2)  206/    6112 : 6100 047E           		bsr	CDPCM_Stream
(2)  204/    6116 : 6100 0392           		bsr	CDPCM_ReadTable			; Process table we just got.
(2)  205/    611A : 6100 058A           		bsr	CDPCM_Update
(2)  206/    611E : 6100 0472           		bsr	CDPCM_Stream
(2)  204/    6122 : 6100 0386           		bsr	CDPCM_ReadTable			; Process table we just got.
(2)  205/    6126 : 6100 057E           		bsr	CDPCM_Update
(2)  206/    612A : 6100 0466           		bsr	CDPCM_Stream
(2)  204/    612E : 6100 037A           		bsr	CDPCM_ReadTable			; Process table we just got.
(2)  205/    6132 : 6100 0572           		bsr	CDPCM_Update
(2)  206/    6136 : 6100 045A           		bsr	CDPCM_Stream
(2)  204/    613A : 6100 036E           		bsr	CDPCM_ReadTable			; Process table we just got.
(2)  205/    613E : 6100 0566           		bsr	CDPCM_Update
(2)  206/    6142 : 6100 044E           		bsr	CDPCM_Stream
(2)  208/    6146 : 1038 800E           		move.b	(scpu_reg+mcd_comm_m).w,d0		; d7
(2)  209/    614A : 1200                		move.b	d0,d1
(2)  210/    614C : 0241 00F0           		andi.w	#$F0,d1
(2)  211/    6150 : 0C01 00F0           		cmpi.b	#$F0,d1
(2)  212/    6154 : 67A8                		beq.s	SP_Main
(2)  213/    6156 : 0240 003F           		andi.w	#%00111111,d0				; <-- current limit
(2)  214/    615A : 67A2                		beq.s	SP_Main
(2)  215/    615C : 08B8 0003 8033      		bclr	#3,(scpu_reg+$33).w
(2)  216/    6162 : 1E38 800F           		move.b	(scpu_reg+mcd_comm_s).w,d7
(2)  217/    6166 : 08C7 0007           		bset	#7,d7
(2)  218/    616A : 11C7 800F           		move.b	d7,(scpu_reg+mcd_comm_s).w		; Set as BUSY
(2)  219/    616E : D040                		add.w	d0,d0					; * 2
(2)  220/    6170 : 323B 001C           		move.w	SP_cmdlist(pc,d0.w),d1
(2)  221/    6174 : 4EBB 1018           		jsr	SP_cmdlist(pc,d1.w)
(2)  222/    6178 : 1E38 800F           		move.b	(scpu_reg+mcd_comm_s).w,d7
(2)  223/    617C : 0887 0007           		bclr	#7,d7
(2)  224/    6180 : 11C7 800F           		move.b	d7,(scpu_reg+mcd_comm_s).w		; Remove BUSY bit, finished
(2)  225/    6184 : 08F8 0003 8033      		bset	#3,(scpu_reg+$33).w
(2)  226/    618A : 6000 FF72           		bra	SP_Main
(2)  227/    618E :                     	; DO NOT RETURN WITH RTS, THAT IRQ IS USED BY THE Z80
(2)  228/    618E :                     
(2)  229/    618E :                     ; =====================================================================
(2)  230/    618E :                     ; ----------------------------------------------------------------
(2)  231/    618E :                     ; Commands list
(2)  232/    618E :                     ; ----------------------------------------------------------------
(2)  233/    618E :                     
(2)  234/    618E :                     ; Struct
(2)  235/    618E :                     ; $01-$0F: Common memory handling
(2)  236/    618E :                     ; $10-$1F: CDDA Playback control
(2)  237/    618E :                     ; $20-$2F: ???
(2)  238/    618E :                     ; $30-$3F: ???
(2)  239/    618E :                     
(2)  240/    618E :                     SP_cmdlist:
(2)  241/    618E : 0060                		dc.w SP_cmnd00-SP_cmdlist	; $00 * INVALID *
(2)  242/    6190 : 0062                		dc.w SP_cmnd01-SP_cmdlist	; $01 - Read file from disc, send data through mcd_dcomm_s
(2)  243/    6192 : 00E4                		dc.w SP_cmnd02-SP_cmdlist	; $02 - Read file from disc, write to WORD-RAM directly.
(2)  244/    6194 : 0060                		dc.w SP_cmnd00-SP_cmdlist	; $03
(2)  245/    6196 : 0060                		dc.w SP_cmnd00-SP_cmdlist	; $04
(2)  246/    6198 : 0060                		dc.w SP_cmnd00-SP_cmdlist	; $05
(2)  247/    619A : 0060                		dc.w SP_cmnd00-SP_cmdlist	; $06
(2)  248/    619C : 0060                		dc.w SP_cmnd00-SP_cmdlist	; $07 - Set 2M WORD-RAM permission to MAIN
(2)  249/    619E : 0116                		dc.w SP_cmnd08-SP_cmdlist	; $08 - Get data from MAIN through mcd_dcomm_m
(2)  250/    61A0 : 0060                		dc.w SP_cmnd00-SP_cmdlist	; $09
(2)  251/    61A2 : 0060                		dc.w SP_cmnd00-SP_cmdlist	; $0A
(2)  252/    61A4 : 0060                		dc.w SP_cmnd00-SP_cmdlist	; $0B
(2)  253/    61A6 : 0060                		dc.w SP_cmnd00-SP_cmdlist	; $0C
(2)  254/    61A8 : 0060                		dc.w SP_cmnd00-SP_cmdlist	; $0D
(2)  255/    61AA : 0060                		dc.w SP_cmnd00-SP_cmdlist	; $0E
(2)  256/    61AC : 0060                		dc.w SP_cmnd00-SP_cmdlist	; $0F
(2)  257/    61AE :                     
(2)  258/    61AE : 018E                		dc.w SP_cmnd10-SP_cmdlist	; Play CDDA track
(2)  259/    61B0 : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  260/    61B2 : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  261/    61B4 : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  262/    61B6 : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  263/    61B8 : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  264/    61BA : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  265/    61BC : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  266/    61BE : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  267/    61C0 : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  268/    61C2 : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  269/    61C4 : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  270/    61C6 : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  271/    61C8 : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  272/    61CA : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  273/    61CC : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  274/    61CE :                     
(2)  275/    61CE : 01A4                		dc.w SP_cmnd20-SP_cmdlist
(2)  276/    61D0 : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  277/    61D2 : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  278/    61D4 : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  279/    61D6 : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  280/    61D8 : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  281/    61DA : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  282/    61DC : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  283/    61DE : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  284/    61E0 : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  285/    61E2 : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  286/    61E4 : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  287/    61E6 : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  288/    61E8 : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  289/    61EA : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  290/    61EC : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  291/    61EE :                     
(2)  292/    61EE :                     ; --------------------------------------------------------
(2)  293/    61EE :                     ; NULL COMMAND
(2)  294/    61EE :                     ; --------------------------------------------------------
(2)  295/    61EE :                     
(2)  296/    61EE :                     SP_cmnd00:
(2)  297/    61EE : 4E75                		rts
(2)  298/    61F0 :                     
(2)  299/    61F0 :                     ; --------------------------------------------------------
(2)  300/    61F0 :                     ; Command $01
(2)  301/    61F0 :                     ;
(2)  302/    61F0 :                     ; Read data from disc and transfer through
(2)  303/    61F0 :                     ; dcomm_s as packets of $10 bytes
(2)  304/    61F0 :                     ;
(2)  305/    61F0 :                     ; mcd_comm_m: %lp------
(2)  306/    61F0 :                     ; l - Lock bit, unlocking exit loop.
(2)  307/    61F0 :                     ; p - MAIN response bit
(2)  308/    61F0 :                     ;
(2)  309/    61F0 :                     ; mcd_comm_s: %-p------
(2)  310/    61F0 :                     ; p - PASS bit
(2)  311/    61F0 :                     ;
(2)  312/    61F0 :                     ; mcd_dcomm_m:
(2)  313/    61F0 :                     ; dc.b "FILENAME.BIN",0
(2)  314/    61F0 :                     ;
(2)  315/    61F0 :                     ; mcd_dcomm_s:
(2)  316/    61F0 :                     ; all
(2)  317/    61F0 :                     ; --------------------------------------------------------
(2)  318/    61F0 :                     
(2)  319/    61F0 :                     SP_cmnd01:
(2)  320/    61F0 : (MACRO)              		BIOS_MSCSTOP
(2)  320/    61F0 :  (MACRO-2)                 CDBIOS #MSCSTOP
(2)  320/    61F0 : 303C 0002                 move.w    #MSCSTOP,d0
(2)  320/    61F4 : 4EB8 5F22                 jsr       _CDBIOS
(2)  321/    61F8 : 41F8 8010           		lea	(scpu_reg+mcd_dcomm_m).w,a0	; a0 - filename
(2)  322/    61FC : 6100 01E8           		bsr	spSearchFile
(2)  323/    6200 : 41F9 0000 EAC4      		lea	(ISO_Output),a0
(2)  324/    6206 : 6100 012C           		bsr	spReadSectorsN
(2)  325/    620A : 41F9 0000 EAC4      		lea	(ISO_Output),a0
(2)  326/    6210 : 45F8 8020           		lea	(scpu_reg+mcd_dcomm_s).w,a2
(2)  327/    6214 :                     .next_packet:
(2)  328/    6214 : 224A                		move.l	a2,a1
(2)  329/    6216 : 32D8                		move.w	(a0)+,(a1)+			; WORD writes to be safe...
(2)  330/    6218 : 32D8                		move.w	(a0)+,(a1)+
(2)  331/    621A : 32D8                		move.w	(a0)+,(a1)+
(2)  332/    621C : 32D8                		move.w	(a0)+,(a1)+
(2)  333/    621E : 32D8                		move.w	(a0)+,(a1)+
(2)  334/    6220 : 32D8                		move.w	(a0)+,(a1)+
(2)  335/    6222 : 32D8                		move.w	(a0)+,(a1)+
(2)  336/    6224 : 32D8                		move.w	(a0)+,(a1)+
(2)  337/    6226 : 1E38 800F           		move.b	(scpu_reg+mcd_comm_s).w,d7	; Sub PASS bit
(2)  338/    622A : 08C7 0006           		bset	#6,d7
(2)  339/    622E : 11C7 800F           		move.b	d7,(scpu_reg+mcd_comm_s).w
(2)  340/    6232 : 1E38 800E           .wait_main:	move.b	(scpu_reg+mcd_comm_m).w,d7	; MAIN got data?
(2)  341/    6236 : 0807 0007           		btst	#7,d7				; Unlocked?
(2)  342/    623A : 671E                		beq.s	.exit_now
(2)  343/    623C : 0807 0006           		btst	#6,d7				; MAIN got the data?
(2)  344/    6240 : 67F0                		beq.s	.wait_main
(2)  345/    6242 : 1E38 800F           		move.b	(scpu_reg+mcd_comm_s).w,d7	; Clear Sub PASS
(2)  346/    6246 : 0887 0006           		bclr	#6,d7
(2)  347/    624A : 11C7 800F           		move.b	d7,(scpu_reg+mcd_comm_s).w
(2)  348/    624E : 1E38 800E           .wait_main_o:	move.b	(scpu_reg+mcd_comm_m).w,d7	; Wait MAIN response.
(2)  349/    6252 : 0807 0006           		btst	#6,d7
(2)  350/    6256 : 66F6                		bne.s	.wait_main_o
(2)  351/    6258 : 60BA                		bra.s	.next_packet
(2)  352/    625A : 1E38 800F           .exit_now:	move.b	(scpu_reg+mcd_comm_s).w,d7	; Clear Sub PASS
(2)  353/    625E : 0887 0006           		bclr	#6,d7
(2)  354/    6262 : 11C7 800F           		move.b	d7,(scpu_reg+mcd_comm_s).w
(2)  355/    6266 : 08F9 0000 FFFF      .wait_ret:	bset	#0,(scpu_reg+mcd_memory).l	; Return 2M WORDRAM to MAIN, RET=1
             626C : 8003             
(2)  356/    626E : 67F6                		beq.s	.wait_ret
(2)  357/    6270 : 4E75                		rts
(2)  358/    6272 :                     
(2)  359/    6272 :                     ; --------------------------------------------------------
(2)  360/    6272 :                     ; Command $02
(2)  361/    6272 :                     ;
(2)  362/    6272 :                     ; Read data from disc and sends it to WORD-RAM
(2)  363/    6272 :                     ;
(2)  364/    6272 :                     ; mcd_dcomm_m:
(2)  365/    6272 :                     ; dc.b "FILENAME.BIN",0
(2)  366/    6272 :                     ; --------------------------------------------------------
(2)  367/    6272 :                     
(2)  368/    6272 :                     SP_cmnd02:
(2)  369/    6272 : 1039 FFFF 8003      		move.b	(scpu_reg+mcd_memory).l,d0
(2)  370/    6278 : 0800 0001           		btst	#1,d0
(2)  371/    627C : 67F4                		beq.s	SP_cmnd02
(2)  372/    627E : (MACRO)              		BIOS_MSCSTOP
(2)  372/    627E :  (MACRO-2)                 CDBIOS #MSCSTOP
(2)  372/    627E : 303C 0002                 move.w    #MSCSTOP,d0
(2)  372/    6282 : 4EB8 5F22                 jsr       _CDBIOS
(2)  373/    6286 : 41F8 8010           		lea	(scpu_reg+mcd_dcomm_m).w,a0	; a0 - filename
(2)  374/    628A : 6100 015A           		bsr	spSearchFile
(2)  375/    628E : 41F9 0008 0000      		lea	(scpu_wram),a0
(2)  376/    6294 : 6100 009E           		bsr	spReadSectorsN
(2)  377/    6298 : 08F9 0000 FFFF      .wait_ret:	bset	#0,(scpu_reg+mcd_memory).l	; Return WORDRAM to MAIN, RET=1
             629E : 8003             
(2)  378/    62A0 : 67F6                		beq.s	.wait_ret
(2)  379/    62A2 : 4E75                		rts
(2)  380/    62A4 :                     
(2)  381/    62A4 :                     ; --------------------------------------------------------
(2)  382/    62A4 :                     ; Command $08
(2)  383/    62A4 :                     ; --------------------------------------------------------
(2)  384/    62A4 :                     
(2)  385/    62A4 :                     SP_cmnd08:
(2)  386/    62A4 : 45F8 8010           		lea	(scpu_reg+mcd_dcomm_m).w,a2
(2)  387/    62A8 : 3012                		move.w	(a2),d0				; a1 - Destination
(2)  388/    62AA : 4840                		swap	d0
(2)  389/    62AC : 302A 0002           		move.w	2(a2),d0
(2)  390/    62B0 : 2240                		move.l	d0,a1
(2)  391/    62B2 : 1E38 800F           		move.b	(scpu_reg+mcd_comm_s).w,d7	; Tell MAIN we got the a1
(2)  392/    62B6 : 08C7 0006           		bset	#6,d7
(2)  393/    62BA : 11C7 800F           		move.b	d7,(scpu_reg+mcd_comm_s).w
(2)  394/    62BE : 1038 800E           .wait_start:	move.b	(scpu_reg+mcd_comm_m).w,d0	; Wait for MAIN
(2)  395/    62C2 : 0800 0007           		btst	#7,d0
(2)  396/    62C6 : 67F6                		beq.s	.wait_start
(2)  397/    62C8 : 1E38 800F           		move.b	(scpu_reg+mcd_comm_s).w,d7
(2)  398/    62CC : 0887 0006           		bclr	#6,d7
(2)  399/    62D0 : 11C7 800F           		move.b	d7,(scpu_reg+mcd_comm_s).w
(2)  400/    62D4 :                     .next_packet:
(2)  401/    62D4 : 1E38 800E           		move.b	(scpu_reg+mcd_comm_m).w,d7
(2)  402/    62D8 : 0807 0007           		btst	#7,d7
(2)  403/    62DC : 673C                		beq.s	.exit_now
(2)  404/    62DE : 0807 0006           		btst	#6,d7
(2)  405/    62E2 : 67F0                		beq.s	.next_packet
(2)  406/    62E4 : 204A                		move.l	a2,a0
(2)  407/    62E6 : 32D8                		move.w	(a0)+,(a1)+			; WORD writes to be safe...
(2)  408/    62E8 : 32D8                		move.w	(a0)+,(a1)+
(2)  409/    62EA : 32D8                		move.w	(a0)+,(a1)+
(2)  410/    62EC : 32D8                		move.w	(a0)+,(a1)+
(2)  411/    62EE : 32D8                		move.w	(a0)+,(a1)+
(2)  412/    62F0 : 32D8                		move.w	(a0)+,(a1)+
(2)  413/    62F2 : 32D8                		move.w	(a0)+,(a1)+
(2)  414/    62F4 : 32D8                		move.w	(a0)+,(a1)+
(2)  415/    62F6 : 1E38 800F           		move.b	(scpu_reg+mcd_comm_s).w,d7
(2)  416/    62FA : 08C7 0006           		bset	#6,d7
(2)  417/    62FE : 11C7 800F           		move.b	d7,(scpu_reg+mcd_comm_s).w
(2)  418/    6302 : 1E38 800E           .wait_main:	move.b	(scpu_reg+mcd_comm_m).w,d7	; Wait MAIN
(2)  419/    6306 : 0807 0006           		btst	#6,d7
(2)  420/    630A : 66F6                		bne.s	.wait_main
(2)  421/    630C : 1E38 800F           		move.b	(scpu_reg+mcd_comm_s).w,d7
(2)  422/    6310 : 0887 0006           		bclr	#6,d7
(2)  423/    6314 : 11C7 800F           		move.b	d7,(scpu_reg+mcd_comm_s).w
(2)  424/    6318 : 60BA                		bra	.next_packet
(2)  425/    631A :                     .exit_now:
(2)  426/    631A :                     
(2)  427/    631A : 4E75                		rts
(2)  428/    631C :                     
(2)  429/    631C :                     ; --------------------------------------------------------
(2)  430/    631C :                     ; Command $10
(2)  431/    631C :                     ; --------------------------------------------------------
(2)  432/    631C :                     
(2)  433/    631C :                     SP_cmnd10:
(2)  434/    631C : (MACRO)              		BIOS_MSCSTOP
(2)  434/    631C :  (MACRO-2)                 CDBIOS #MSCSTOP
(2)  434/    631C : 303C 0002                 move.w    #MSCSTOP,d0
(2)  434/    6320 : 4EB8 5F22                 jsr       _CDBIOS
(2)  435/    6324 : 41F8 8010           		lea	(scpu_reg+mcd_dcomm_m).w,a0
(2)  436/    6328 :                     ; 		lea	.this(pc),a0
(2)  437/    6328 : (MACRO)              		BIOS_MSCPLAYR
(2)  437/    6328 :  (MACRO-2)                 CDBIOS #MSCPLAYR
(2)  437/    6328 : 303C 0013                 move.w    #MSCPLAYR,d0
(2)  437/    632C : 4EB8 5F22                 jsr       _CDBIOS
(2)  438/    6330 : 4E75                		rts
(2)  439/    6332 :                     		align 2
(2)  440/    6332 :                     ; .this:		dc.w 2
(2)  441/    6332 :                     
(2)  442/    6332 :                     ; --------------------------------------------------------
(2)  443/    6332 :                     ; Command $20
(2)  444/    6332 :                     ; --------------------------------------------------------
(2)  445/    6332 :                     
(2)  446/    6332 :                     SP_cmnd20:
(2)  447/    6332 : 4E75                		rts
(2)  448/    6334 :                     
(2)  449/    6334 :                     ; =====================================================================
(2)  450/    6334 :                     ; ----------------------------------------------------------------
(2)  451/    6334 :                     ; Subroutines
(2)  452/    6334 :                     ; ----------------------------------------------------------------
(2)  453/    6334 :                     
(2)  454/    6334 :                     ; --------------------------------------------------------
(2)  455/    6334 :                     ; CD-ROM data
(2)  456/    6334 :                     ; --------------------------------------------------------
(2)  457/    6334 :                     
(2)  458/    6334 :                     ; ------------------------------------------------
(2)  459/    6334 :                     ; spReadSectorsN
(2)  460/    6334 :                     ;
(2)  461/    6334 :                     ; Input:
(2)  462/    6334 :                     ; a0 - Destination
(2)  463/    6334 :                     ; d0 - Sector start
(2)  464/    6334 :                     ; d1 - Number of sectors
(2)  465/    6334 :                     ; d2 - Destination increment (Only 0 or $800)
(2)  466/    6334 :                     ; ------------------------------------------------
(2)  467/    6334 :                     
(2)  468/    6334 :                     spReadSectorsN:
(2)  469/    6334 : 4BF9 0001 6AC4      		lea	(RAM_CdSub_FsBuff),a5
(2)  470/    633A : 0280 0000 FFFF      		andi.l	#$FFFF,d0
(2)  471/    6340 : 0281 0000 FFFF      		andi.l	#$FFFF,d1
(2)  472/    6346 : 2A80                		move.l	d0,(a5)
(2)  473/    6348 : 2B41 0004           		move.l	d1,4(a5)
(2)  474/    634C : 2B48 0008           		move.l	a0,8(a5)
(2)  475/    6350 : 11FC 0003 8004      		move.b	#%011,(scpu_reg+4).w		; Set CDC device to "Sub CPU"
(2)  476/    6356 : 303C 0089           		move.w	#CDCSTOP,d0			; Stop CDC
(2)  477/    635A : 4EB8 5F22           		jsr	_CDBIOS.w
(2)  478/    635E : 204D                		move.l	a5,a0
(2)  479/    6360 : 303C 0020           		move.w	#ROMREADN,d0			; Read sector by count
(2)  480/    6364 : 4EB8 5F22           		jsr	_CDBIOS.w
(2)  481/    6368 :                     .wait_STAT:
(2)  482/    6368 : 303C 008A           		move.w	#CDCSTAT,d0			; Get CDC Status
(2)  483/    636C : 4EB8 5F22           		jsr	_CDBIOS.w
(2)  484/    6370 : 65F6                 		bcs.s	.wait_STAT
(2)  485/    6372 :                     .wait_READ:
(2)  486/    6372 : 303C 008B           		move.w	#CDCREAD,d0			; CDC Read mode
(2)  487/    6376 : 4EB8 5F22           		jsr	_CDBIOS.w
(2)  488/    637A : 65F6                		bcs.s	.wait_READ
(2)  489/    637C : 2B40 0010           		move.l	d0,$10(a5)
(2)  490/    6380 :                     .WaitTransfer:
(2)  491/    6380 : 206D 0008           		movea.l	8(a5),a0		; a0 - DATA Destination
(2)  492/    6384 : 43ED 0010           		lea	$10(a5),a1			; a1 - HEADER out
(2)  493/    6388 : 303C 008C           		move.w	#CDCTRN,d0			; CDC Transfer data
(2)  494/    638C : 4EB8 5F22           		jsr	_CDBIOS.w
(2)  495/    6390 : 65EE                		bcs.s	.waitTransfer			; If not done, branch
(2)  496/    6392 :                     
(2)  497/    6392 : 303C 008D           		move.w	#CDCACK,d0			; Finish read
(2)  498/    6396 : 4EB8 5F22           		jsr	_CDBIOS.w
(2)  499/    639A :                     
(2)  500/    639A : 06AD 0000 0800      		addi.l	#$800,8(a5)
             63A0 : 0008             
(2)  501/    63A2 : 5295                		addq.l	#1,(a5)
(2)  502/    63A4 : 53AD 0004           		subq.l	#1,4(a5)
(2)  503/    63A8 : 66BE                		bne.s	.wait_STAT
(2)  504/    63AA : 4E75                		rts
(2)  505/    63AC :                     
(2)  506/    63AC :                     ; ------------------------------------------------
(2)  507/    63AC :                     ; ISO9660 Driver
(2)  508/    63AC :                     ; ------------------------------------------------
(2)  509/    63AC :                     
(2)  510/    63AC :                     spInitFS:
(2)  511/    63AC : 48E7 FFFE           		movem.l	d0-d7/a0-a6,-(a7)
(2)  512/    63B0 :                     	; Load Volume VolumeDescriptor
(2)  513/    63B0 : 7010                		moveq	#$10,d0			; Start Sector (at $8000)
(2)  514/    63B2 : 7210                		moveq	#$10,d1			; Sector size
(2)  515/    63B4 : 41F8 6AC4           		lea	(ISO_Filelist),a0	; Destination
(2)  516/    63B8 : 6100 FF7A           		bsr	spReadSectorsN
(2)  517/    63BC :                     	; Load Root Directory
(2)  518/    63BC : 41F8 6AC4           		lea	(ISO_Filelist),a0	; Get pointer to sector buffer
(2)  519/    63C0 : 43E8 009C           		lea.l	$9C(a0),a1		; Get root directory record
(2)  520/    63C4 : 1029 0006           		move.b	6(a1),d0		; Get first part of Sector address
(2)  521/    63C8 : E188                		lsl.l	#8,d0			; bitshift
(2)  522/    63CA : 1029 0007           		move.b	7(a1),d0		; Get next part of sector address
(2)  523/    63CE : E188                		lsl.l	#8,d0			; bitshift
(2)  524/    63D0 : 1029 0008           		move.b	8(a1),d0		; get next part of sector address
(2)  525/    63D4 : E188                		lsl.l	#8,d0			; bitshift
(2)  526/    63D6 : 1029 0009           		move.b	9(a1),d0		; get final part of sector address
(2)  527/    63DA :                     	; d0 now contains start sector address
(2)  528/    63DA : 7210                		moveq	#$10,d1			; Size ($20 Sectors)
(2)  529/    63DC : 6100 FF56           		bsr	spReadSectorsN
(2)  530/    63E0 : 4CDF 7FFF           		movem.l	(a7)+,d0-d7/a0-a6	; Restore all registers
(2)  531/    63E4 : 4E75                		rts
(2)  532/    63E6 :                     
(2)  533/    63E6 :                     ; --------------------------------------------------------
(2)  534/    63E6 :                     ; spSearchFile
(2)  535/    63E6 :                     ;
(2)  536/    63E6 :                     ; Search a file on the disc
(2)  537/    63E6 :                     ;
(2)  538/    63E6 :                     ; FILETABLE MUST BE LOADED FIRST WITH spInitFS
(2)  539/    63E6 :                     ;
(2)  540/    63E6 :                     ; Input
(2)  541/    63E6 :                     ; a0 - Filename string zero terminated
(2)  542/    63E6 :                     ;
(2)  543/    63E6 :                     ; Output:
(2)  544/    63E6 :                     ; d0.l - Start sector
(2)  545/    63E6 :                     ; d1.l - Number of sectors
(2)  546/    63E6 :                     ; d2.l - Filesize
(2)  547/    63E6 :                     ;
(2)  548/    63E6 :                     ; Breaks:
(2)  549/    63E6 :                     ; d4-d7,a6
(2)  550/    63E6 :                     ; --------------------------------------------------------
(2)  551/    63E6 :                     
(2)  552/    63E6 :                     ; TODO: A ZERO-SIZE CHECK
(2)  553/    63E6 :                     
(2)  554/    63E6 :                     spSearchFile:
(2)  555/    63E6 :                     ; 		movem.l	a1/a2/a6,-(a7)
(2)  556/    63E6 : 49F8 6AC4           		lea	(ISO_Filelist),a4		; a4 - TOP
(2)  557/    63EA : 7000                		moveq	#0,d0
(2)  558/    63EC : 7200                		moveq	#0,d1
(2)  559/    63EE : 7400                		moveq	#0,d2
(2)  560/    63F0 :                     .next_file:
(2)  561/    63F0 : 1E14                		move.b	(a4),d7			; d7 - Block size
(2)  562/    63F2 : 673A                		beq.s	.failed_srch
(2)  563/    63F4 : 0247 00FF           		andi.w	#$FF,d7
(2)  564/    63F8 : 264C                		move.l	a4,a3			; a3 - To search for
(2)  565/    63FA : D6FC 0019           		adda	#$19,a3			; Go to flags
(2)  566/    63FE : 1C13                		move.b	(a3),d6
(2)  567/    6400 : 6618                		bne.s	.non_file		; $00: iso_file, non-Zero: iso_setfs
(2)  568/    6402 : D6FC 0007           		adda	#$07,a3			; Go to filename
(2)  569/    6406 : 7C00                		moveq	#0,d6
(2)  570/    6408 : 1C1B                		move.b	(a3)+,d6
(2)  571/    640A : 5946                		subq.w	#3+1,d6
(2)  572/    640C : 2448                		move.l	a0,a2			; a2 - string to seach
(2)  573/    640E :                     .chk_str:
(2)  574/    640E : 1A1B                		move.b	(a3)+,d5
(2)  575/    6410 : BA1A                		cmp.b	(a2)+,d5
(2)  576/    6412 : 6606                		bne.s	.non_file
(2)  577/    6414 : 51CE FFF8           		dbf	d6,.chk_str
(2)  578/    6418 : 6004                		bra.s	.found_file
(2)  579/    641A :                     .non_file:
(2)  580/    641A : D8C7                		adda	d7,a4
(2)  581/    641C : 60D2                		bra.s	.next_file
(2)  582/    641E :                     .found_file:
(2)  583/    641E : 202C 0006           		move.l	6(a4),d0		; d0 - Sector position
(2)  584/    6422 : 222C 000E           		move.l	$E(a4),d1		; d1 - Number of sectors
(2)  585/    6426 : 2401                		move.l	d1,d2			; d2 - ORIGINAL filesize
(2)  586/    6428 : E089                		lsr.l	#8,d1			; Bitshift numof_sectors
(2)  587/    642A : E689                		lsr.l	#3,d1
(2)  588/    642C : 4E75                		rts
(2)  589/    642E :                     .failed_srch:
(2)  590/    642E : 7000                		moveq	#0,d0
(2)  591/    6430 : 4A40                		tst.w	d0
(2)  592/    6432 : 4E75                		rts
(2)  593/    6434 :                     
(2)  594/    6434 :                     ; =====================================================================
(2)  595/    6434 :                     ; ----------------------------------------------------------------
(2)  596/    6434 :                     ; PCM sound
(2)  597/    6434 :                     ; ----------------------------------------------------------------
(2)  598/    6434 :                     
(2)  599/    6434 :                     ; --------------------------------------------------------
(2)  600/    6434 :                     ; CDPCM_Wait
(2)  601/    6434 :                     ;
(2)  602/    6434 :                     ; MUST Call this after writing any PCM register.
(2)  603/    6434 :                     ; --------------------------------------------------------
(2)  604/    6434 :                     
(2)  605/    6434 :                     CDPCM_Wait:
(2)  606/    6434 : 4E71                		nop
(2)  607/    6436 : 4E71                		nop
(2)  608/    6438 :                     ; 		move.l	d7,-(sp)
(2)  609/    6438 :                     ; 		move.w	#4,d7
(2)  610/    6438 :                     ; .WaitLoop:
(2)  611/    6438 :                     ; 		dbf	d7,.WaitLoop
(2)  612/    6438 :                     ; 		move.l	(sp)+,d7
(2)  613/    6438 : 4E75                		rts
(2)  614/    643A :                     
(2)  615/    643A :                     ; --------------------------------------------------------
(2)  616/    643A :                     ; CDPCM_Init
(2)  617/    643A :                     ; --------------------------------------------------------
(2)  618/    643A :                     
(2)  619/    643A :                     CDPCM_Init:
(2)  620/    643A :                     	; $0000-$7FFF is blank
(2)  621/    643A :                     	; $8000 is the Silence block until the
(2)  622/    643A :                     	;       streaming routine detects it and
(2)  623/    643A :                     	;       manually stops the channel
(2)  624/    643A :                     	; $8002-$FFFF is unused
(2)  625/    643A : 4DF9 FFFF 0000      		lea	(scpu_pcm),a6
(2)  626/    6440 : 7000                		moveq	#0,d0
(2)  627/    6442 : 72FF                		moveq	#-1,d1
(2)  628/    6444 : 183C 0080           		move.b	#$80,d4		; d4 - CTRL in memory mode
(2)  629/    6448 : 7E0F                		moveq	#$0F,d7		; $0000-$7FFF
(2)  630/    644A : 4BEE 2001           		lea	$2001(a6),a5
(2)  631/    644E :                     .clr_pwm:
(2)  632/    644E : 1D44 000F           		move.b	d4,CTREG(a6)
(2)  633/    6452 : 61E0                		bsr	CDPCM_Wait
(2)  634/    6454 : 284D                		move.l	a5,a4
(2)  635/    6456 : 3C3C 0FFC           		move.w	#$0FFC,d6
(2)  636/    645A : 1880                .wr_end:	move.b	d0,(a4)
(2)  637/    645C : 548C                		addq.l	#2,a4
(2)  638/    645E : 51CE FFFA           		dbf	d6,.wr_end
(2)  639/    6462 :                     	rept 4
(2)  640/    6462 :                     		move.b	d1,(a4)
(2)  641/    6462 :                     		addq.l	#2,a4
(2)  642/    6462 :                     	endm
(2)  640/    6462 : 1881                		move.b	d1,(a4)
(2)  641/    6464 : 548C                		addq.l	#2,a4
(2)  640/    6466 : 1881                		move.b	d1,(a4)
(2)  641/    6468 : 548C                		addq.l	#2,a4
(2)  640/    646A : 1881                		move.b	d1,(a4)
(2)  641/    646C : 548C                		addq.l	#2,a4
(2)  640/    646E : 1881                		move.b	d1,(a4)
(2)  641/    6470 : 548C                		addq.l	#2,a4
(2)  643/    6472 : 5204                		addq.b	#$01,d4
(2)  644/    6474 : 51CF FFD8           		dbf	d7,.clr_pwm
(2)  645/    6478 : 183C 0088           		move.b	#$88,d4		; Make silence block
(2)  646/    647C : 41FA 001C           		lea	.data_blk(pc),a0
(2)  647/    6480 : 1D44 000F           		move.b	d4,CTREG(a6)	; Slot $8000 for pre-silence
(2)  648/    6484 : 61AE                		bsr	CDPCM_Wait
(2)  649/    6486 : 7E0F                		moveq	#16-1,d7
(2)  650/    6488 :                     .copy_data:
(2)  651/    6488 : 1018                		move.b	(a0)+,d0
(2)  652/    648A : 1A80                		move.b	d0,(a5)
(2)  653/    648C : 548D                		addq.l	#2,a5
(2)  654/    648E : 51CF FFF8           		dbf	d7,.copy_data
(2)  655/    6492 : 1D7C 00FF 0011      		move.b	#-1,ONREG(a6)
(2)  656/    6498 : 609A                		bra	CDPCM_Wait
(2)  657/    649A :                     .data_blk:
(2)  658/    649A : 0000 0000 0000      		dc.b $00,$00,$00,$00,$00,$00,$00,$00
             64A0 : 0000             
(2)  659/    64A2 : FFFF FFFF FFFF      		dc.b $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
             64A8 : FFFF             
(2)  660/    64AA :                     		align 2
(2)  661/    64AA :                     
(2)  662/    64AA :                     ; --------------------------------------------------------
(2)  663/    64AA :                     ; CDPCM_ReadTable
(2)  664/    64AA :                     ; --------------------------------------------------------
(2)  665/    64AA :                     
(2)  666/    64AA :                     CDPCM_ReadTable:
(2)  667/    64AA : 4A39 0000 6AC3      		tst.b	(RAM_CdSub_PcmTblUpd).l
(2)  668/    64B0 : 673C                		beq.s	.dont_upd
(2)  669/    64B2 : 4239 0000 6AC3      		clr.b	(RAM_CdSub_PcmTblUpd).l
(2)  670/    64B8 :                     ; 		ori.w	#$0700,sr
(2)  671/    64B8 : 4DF8 6980           		lea	(RAM_CdSub_PcmBuff),a6
(2)  672/    64BC : 4BF8 6A80           		lea	(RAM_CdSub_PcmTable),a5
(2)  673/    64C0 : 7E07                		moveq	#8-1,d7			; 8 channels
(2)  674/    64C2 : 7C00                		moveq	#0,d6			; Starting channel number
(2)  675/    64C4 :                     .get_tbl:
(2)  676/    64C4 : 1A15                		move.b	(a5),d5
(2)  677/    64C6 : 0885 0002           		bclr	#2,d5			; Key-cut?
(2)  678/    64CA : 6702                		beq.s	.no_keyoff
(2)  679/    64CC : 6122                		bsr	.cdcom_keyoff
(2)  680/    64CE :                     .no_keyoff:
(2)  681/    64CE : 0885 0001           		bclr	#1,d5			; Key-off?
(2)  682/    64D2 : 6702                		beq.s	.no_keycut
(2)  683/    64D4 : 611A                		bsr	.cdcom_keyoff
(2)  684/    64D6 :                     .no_keycut:
(2)  685/    64D6 : 0885 0000           		bclr	#0,d5			; Key-on?
(2)  686/    64DA : 6702                		beq.s	.no_comm
(2)  687/    64DC : 611E                		bsr	.cdcom_keyon
(2)  688/    64DE :                     .no_comm:
(2)  689/    64DE : 1A85                		move.b	d5,(a5)
(2)  690/    64E0 : DCFC 0020           		adda	#sizeof_cdpcm,a6	; Next PCM buffer
(2)  691/    64E4 : DAFC 0001           		adda	#1,a5			; Next PCM table column
(2)  692/    64E8 : 5246                		addq.w	#1,d6
(2)  693/    64EA : 51CF FFD8           		dbf	d7,.get_tbl
(2)  694/    64EE :                     ; 		andi.w	#$F8FF,sr
(2)  695/    64EE :                     .dont_upd:
(2)  696/    64EE : 4E75                		rts
(2)  697/    64F0 :                     
(2)  698/    64F0 :                     ; --------------------------------------------------------
(2)  699/    64F0 :                     ; pcmcom:
(2)  700/    64F0 :                     ; 0 - Playback bits: %0000PCOK /Pitchbend/keyCut/keyOff/KeyOn
(2)  701/    64F0 :                     ; 8 - Pitch MSB
(2)  702/    64F0 :                     ; 16 - Pitch LSB
(2)  703/    64F0 :                     ; 24 - Volume
(2)  704/    64F0 :                     ; 32 - Panning %RRRRLLLL
(2)  705/    64F0 :                     ; 40 - LoopEnable bit | 24-bit sample location in Sub-CPU area
(2)  706/    64F0 :                     ; 48
(2)  707/    64F0 :                     ; 56
(2)  708/    64F0 :                     .cdcom_keyoff:
(2)  709/    64F0 : 0DB9 0000 6AC0      		bclr	d6,(RAM_CdSub_PcmEnbl).l
(2)  710/    64F6 : 1CBC 00A0           		move.b	#$80|$20,cdpcm_flags(a6)
(2)  711/    64FA : 4E75                		rts
(2)  712/    64FC :                     
(2)  713/    64FC :                     ; a0 - table data
(2)  714/    64FC :                     ; a1 - buffer
(2)  715/    64FC :                     .cdcom_keyon:
(2)  716/    64FC : 0885 0003           		bclr	#3,d5			; Effect update ONLY?
(2)  717/    6500 : 665E                		bne	.effect_only
(2)  718/    6502 : 61EC                		bsr.s	.cdcom_keyoff
(2)  719/    6504 : 615E                		bsr.s	.effect_mod
(2)  720/    6506 : 7000                		moveq	#0,d0
(2)  721/    6508 : 1010                		move.b	(a0),d0		; 40
(2)  722/    650A : 1600                		move.b	d0,d3
(2)  723/    650C : D0FC 0008           		adda	#8,a0
(2)  724/    6510 : 0240 007F           		andi.w	#$7F,d0
(2)  725/    6514 : 4840                		swap	d0
(2)  726/    6516 : 1010                		move.b	(a0),d0		; 48
(2)  727/    6518 : D0FC 0008           		adda	#8,a0
(2)  728/    651C : E148                		lsl.w	#8,d0
(2)  729/    651E : 1010                		move.b	(a0),d0		; 56
(2)  730/    6520 : 2440                		move.l	d0,a2
(2)  731/    6522 : 7000                		moveq	#0,d0
(2)  732/    6524 : 7200                		moveq	#0,d1			; Read LEN
(2)  733/    6526 : 101A                		move.b	(a2)+,d0
(2)  734/    6528 : E158                		rol.w	#8,d0
(2)  735/    652A : 101A                		move.b	(a2)+,d0
(2)  736/    652C : E058                		ror.w	#8,d0
(2)  737/    652E : 121A                		move.b	(a2)+,d1
(2)  738/    6530 : 4841                		swap	d1
(2)  739/    6532 : 8081                		or.l	d1,d0
(2)  740/    6534 : 2D40 0014           		move.l	d0,cdpcm_len(a6)
(2)  741/    6538 : 7200                		moveq	#0,d1			; Read LEN
(2)  742/    653A : 7000                		moveq	#0,d0
(2)  743/    653C : 101A                		move.b	(a2)+,d0
(2)  744/    653E : E158                		rol.w	#8,d0
(2)  745/    6540 : 101A                		move.b	(a2)+,d0
(2)  746/    6542 : E058                		ror.w	#8,d0
(2)  747/    6544 : 121A                		move.b	(a2)+,d1
(2)  748/    6546 : 4841                		swap	d1
(2)  749/    6548 : 8081                		or.l	d1,d0
(2)  750/    654A : 2D40 0018           		move.l	d0,cdpcm_loop(a6)
(2)  751/    654E : 2D4A 0010           		move.l	a2,cdpcm_start(a6)
(2)  752/    6552 : E31B                		rol.b	#1,d3
(2)  753/    6554 : 0203 0001           		andi.b	#1,d3
(2)  754/    6558 : 863C 00C0           		or.b	#$C0,d3
(2)  755/    655C : 1C83                		move.b	d3,cdpcm_flags(a6)
(2)  756/    655E : 4E75                		rts
(2)  757/    6560 :                     .effect_only:
(2)  758/    6560 : 0016 0010           		or.b	#$10,cdpcm_flags(a6)
(2)  759/    6564 :                     .effect_mod:
(2)  760/    6564 : 204D                		move.l	a5,a0
(2)  761/    6566 : D0FC 0008           		adda	#8,a0
(2)  762/    656A : 1010                		move.b	(a0),d0		; 8 - Pitch MSB
(2)  763/    656C : D0FC 0008           		adda	#8,a0
(2)  764/    6570 : E148                		lsl.w	#8,d0
(2)  765/    6572 : 1010                		move.b	(a0),d0		; 16 - Pitch LSB
(2)  766/    6574 : D0FC 0008           		adda	#8,a0
(2)  767/    6578 : 1210                		move.b	(a0),d1		; 24 - Volume
(2)  768/    657A : D0FC 0008           		adda	#8,a0
(2)  769/    657E : 1410                		move.b	(a0),d2		; 32 - Panning
(2)  770/    6580 : D0FC 0008           		adda	#8,a0
(2)  771/    6584 : 3D40 000E           		move.w	d0,cdpcm_pitch(a6)
(2)  772/    6588 : 1D41 000D           		move.b	d1,cdpcm_env(a6)
(2)  773/    658C : 1D42 000C           		move.b	d2,cdpcm_pan(a6)
(2)  774/    6590 : 4E75                		rts
(2)  775/    6592 :                     
(2)  776/    6592 :                     ; --------------------------------------------------------
(2)  777/    6592 :                     ; CDPCM_Stream
(2)  778/    6592 :                     ; --------------------------------------------------------
(2)  779/    6592 :                     
(2)  780/    6592 :                     CDPCM_Stream:
(2)  781/    6592 : 4DF8 6980           		lea	(RAM_CdSub_PcmBuff),a6
(2)  782/    6596 : 4BF9 FFFF 0000      		lea	(scpu_pcm),a5
(2)  783/    659C : 49ED 0023           		lea	$23(a5),a4			; <-- RAM-addr MSBs (ODDs)
(2)  784/    65A0 : 7E07                		moveq	#8-1,d7				; 8 channels, 8 pseudo-buffers
(2)  785/    65A2 : 7C00                		moveq	#0,d6				; Current channel (also for BTST/BSET/BCLR)
(2)  786/    65A4 : 1A39 0000 6AC0      		move.b	(RAM_CdSub_PcmEnbl).l,d5	; Global OFF/ON bits
(2)  787/    65AA : 4645                		not.w	d5				; reverse the bits
(2)  788/    65AC :                     .get_addr:
(2)  789/    65AC : 082E 0007 0001      		btst	#7,cdpcm_strmf(a6)	; Channel active?
(2)  790/    65B2 : 6752                		beq.s	.non_strm
(2)  791/    65B4 : 1614                		move.b	(a4),d3			; Get playback MSB
(2)  792/    65B6 : 6A10                		bpl.s	.keep_strm
(2)  793/    65B8 : 0816 0000           		btst	#0,cdpcm_flags(a6)
(2)  794/    65BC : 660A                		bne.s	.keep_strm
(2)  795/    65BE : 0DC5                		bset	d6,d5
(2)  796/    65C0 : 1B45 0011           		move.b	d5,ONREG(a5)
(2)  797/    65C4 : 4216                		clr.b	cdpcm_flags(a6)
(2)  798/    65C6 : 603E                		bra.s	.non_strm
(2)  799/    65C8 :                     .keep_strm:
(2)  800/    65C8 : 182E 0002           		move.b	cdpcm_strmhalf(a6),d4	; Check halfway $x0/$x4/$x8/$xC
(2)  801/    65CC : 0203 000E           		andi.b	#$0E,d3
(2)  802/    65D0 : B604                		cmp.b	d4,d3
(2)  803/    65D2 : 6632                		bne.s	.non_strm
(2)  804/    65D4 : 3803                		move.w	d3,d4
(2)  805/    65D6 : 5444                		addq.w	#$02,d4
(2)  806/    65D8 : 0244 000E           		andi.w	#$0E,d4
(2)  807/    65DC : 1D44 0002           		move.b	d4,cdpcm_strmhalf(a6)
(2)  808/    65E0 : 206E 0008           		move.l	cdpcm_cread(a6),a0
(2)  809/    65E4 : 222E 0004           		move.l	cdpcm_clen(a6),d1
(2)  810/    65E8 : E14C                		lsl.w	#8,d4			; << 8
(2)  811/    65EA : 263C 0000 0200      		move.l	#$0200,d3		; d3 - Block size
(2)  812/    65F0 : B87C 0E00           		cmp.w	#$0E00,d4		; Looping block?
(2)  813/    65F4 : 6606                		bne.s	.lowhalf
(2)  814/    65F6 : 96BC 0000 0004      		sub.l	#4,d3			; last one is -4
(2)  815/    65FC :                     .lowhalf:
(2)  816/    65FC : 6120                		bsr	.make_blk_strm
(2)  817/    65FE : 2D41 0004           		move.l	d1,cdpcm_clen(a6)
(2)  818/    6602 : 2D48 0008           		move.l	a0,cdpcm_cread(a6)
(2)  819/    6606 :                     .non_strm:
(2)  820/    6606 : DCFC 0020           		adda	#sizeof_cdpcm,a6	; Next PCM buffer
(2)  821/    660A : D8FC 0004           		adda	#4,a4			; Next MSB
(2)  822/    660E : 5246                		addq.w	#1,d6			; Next channel
(2)  823/    6610 : 51CF FF9A           		dbf	d7,.get_addr
(2)  824/    6614 : 4645                		not.w	d5			; reverse return bits
(2)  825/    6616 : 13C5 0000 6AC0      		move.b	d5,(RAM_CdSub_PcmEnbl).l
(2)  826/    661C : 4E75                		rts
(2)  827/    661E :                     
(2)  828/    661E :                     ; --------------------------------------------------------
(2)  829/    661E :                     ; a0 - wave data to write
(2)  830/    661E :                     ; d1 - channel current length
(2)  831/    661E :                     ; d3 - block size
(2)  832/    661E :                     ; d4 - current block slot to write
(2)  833/    661E :                     ; d6 - current channel
(2)  834/    661E :                     
(2)  835/    661E :                     .make_blk_strm:
(2)  836/    661E : 1006                		move.b	d6,d0
(2)  837/    6620 : 803C 0080           		or.b	#$80,d0
(2)  838/    6624 : 1B40 000F           		move.b	d0,CTREG(a5)
(2)  839/    6628 :                     ; 		bsr	CDPCM_Wait
(2)  840/    6628 : 43ED 2001           		lea	$2001(a5),a1
(2)  841/    662C : D844                		add.w	d4,d4
(2)  842/    662E : D2C4                		adda	d4,a1
(2)  843/    6630 : 3803                		move.w	d3,d4
(2)  844/    6632 :                     ; 		lsr.w	#2,d3		; /4
(2)  845/    6632 : 5344                		subq.w	#1,d4
(2)  846/    6634 : 0816 0000           		btst	#0,cdpcm_flags(a6)
(2)  847/    6638 : 672C                		beq	.end_point
(2)  848/    663A :                     
(2)  849/    663A :                     ; ----------------------------------------
(2)  850/    663A :                     ; Wave has loop
(2)  851/    663A :                     .loop_point:
(2)  852/    663A : 246E 0010           		movea.l	cdpcm_start(a6),a2
(2)  853/    663E : 202E 0018           		move.l	cdpcm_loop(a6),d0
(2)  854/    6642 : D5C0                		add.l	d0,a2
(2)  855/    6644 : 242E 0014           		move.l	cdpcm_len(a6),d2
(2)  856/    6648 : 9480                		sub.l	d0,d2
(2)  857/    664A :                     .loop_strm:
(2)  858/    664A : 5381                		subq.l	#1,d1
(2)  859/    664C : 6608                		bne.s	.strlen_it
(2)  860/    664E : 204A                		move.l	a2,a0
(2)  861/    6650 : 2202                		move.l	d2,d1
(2)  862/    6652 : 2D41 0004           		move.l	d1,cdpcm_clen(a6)
(2)  863/    6656 :                     .strlen_it:
(2)  864/    6656 : 1018                		move.b	(a0)+,d0
(2)  865/    6658 : 6100 01DC           		bsr	CDPCM_WavToPcm
(2)  866/    665C : 1280                		move.b	d0,(a1)
(2)  867/    665E :                     ; 		bsr	CDPCM_Wait
(2)  868/    665E : 5489                		addq.l	#2,a1
(2)  869/    6660 : 51CC FFE8           		dbf	d4,.loop_strm
(2)  870/    6664 : 4E75                		rts
(2)  871/    6666 :                     
(2)  872/    6666 :                     ; ----------------------------------------
(2)  873/    6666 :                     ; Wave doesn't loop
(2)  874/    6666 :                     .end_point:
(2)  875/    6666 : 70FF                		moveq	#-1,d0
(2)  876/    6668 : 5381                		subq.l	#1,d1
(2)  877/    666A : 6706                		beq.s	.stlen_it
(2)  878/    666C : 1018                		move.b	(a0)+,d0
(2)  879/    666E : 6100 01C6           		bsr	CDPCM_WavToPcm
(2)  880/    6672 :                     .stlen_it:
(2)  881/    6672 : 1280                		move.b	d0,(a1)
(2)  882/    6674 :                     ; 		bsr	CDPCM_Wait
(2)  883/    6674 : 5489                		addq.l	#2,a1
(2)  884/    6676 : 51CC FFEE           		dbf	d4,.end_point
(2)  885/    667A : 4A81                		tst.l	d1
(2)  886/    667C : 6A26                		bpl.s	.not_end
(2)  887/    667E : 1006                		move.b	d6,d0
(2)  888/    6680 : 803C 00C0           		or.b	#$C0,d0
(2)  889/    6684 : 1B40 000F           		move.b	d0,CTREG(a5)
(2)  890/    6688 : 6100 FDAA           		bsr	CDPCM_Wait
(2)  891/    668C :                     ; 		bsr	.set_endloop
(2)  892/    668C : 303C 8000           		move.w	#$8000,d0		; BLANK WAVE pointer
(2)  893/    6690 : 1B40 0009           		move.b	d0,LSL(a5)
(2)  894/    6694 : 6100 FD9E           		bsr	CDPCM_Wait
(2)  895/    6698 : E048                		lsr.w	#8,d0
(2)  896/    669A : 1B40 000B           		move.b	d0,LSH(a5)
(2)  897/    669E : 6100 FD94           		bsr	CDPCM_Wait
(2)  898/    66A2 : 0D85                		bclr	d6,d5
(2)  899/    66A4 :                     .not_end:
(2)  900/    66A4 : 4E75                		rts
(2)  901/    66A6 :                     
(2)  902/    66A6 :                     ; --------------------------------------------------------
(2)  903/    66A6 :                     ; CDPCM_Update
(2)  904/    66A6 :                     ;
(2)  905/    66A6 :                     ; Only checks for playback changes
(2)  906/    66A6 :                     ; --------------------------------------------------------
(2)  907/    66A6 :                     
(2)  908/    66A6 :                     CDPCM_Update:
(2)  909/    66A6 : 4DF8 6980           		lea	(RAM_CdSub_PcmBuff),a6
(2)  910/    66AA : 4BF9 FFFF 0000      		lea	(scpu_pcm),a5
(2)  911/    66B0 : 49ED 0023           		lea	$23(a5),a4			; <-- RAM-addr MSBs (ODDs)
(2)  912/    66B4 : 7E07                		moveq	#8-1,d7				; 8 channels, 8 pseudo-buffers
(2)  913/    66B6 : 7C00                		moveq	#0,d6				; Current channel (also for BTST/BSET/BCLR)
(2)  914/    66B8 : 1A39 0000 6AC0      		move.b	(RAM_CdSub_PcmEnbl).l,d5	; Global OFF/ON bits
(2)  915/    66BE : 4645                		not.w	d5				; reverse the bits
(2)  916/    66C0 :                     .get_addr:
(2)  917/    66C0 : 0816 0007           		btst	#7,cdpcm_flags(a6)	; Channel active?
(2)  918/    66C4 : 6722                		beq	.non_upd
(2)  919/    66C6 : 0896 0006           		bclr	#6,cdpcm_flags(a6)	; Restart bit?
(2)  920/    66CA : 6702                		beq.s	.stop_bit
(2)  921/    66CC : 616A                		bsr	.first_fill
(2)  922/    66CE : 0896 0005           .stop_bit:	bclr	#5,cdpcm_flags(a6)	; Stop bit?
(2)  923/    66D2 : 670C                		beq.s	.not_stop
(2)  924/    66D4 : 0DC5                		bset	d6,d5
(2)  925/    66D6 : 1B45 0011           		move.b	d5,ONREG(a5)		; Stop channel first
(2)  926/    66DA : 6100 FD58           		bsr	CDPCM_Wait
(2)  927/    66DE : 4216                		clr.b	cdpcm_flags(a6)
(2)  928/    66E0 :                     .not_stop:
(2)  929/    66E0 : 0896 0004           		bclr	#4,cdpcm_flags(a6)
(2)  930/    66E4 : 6702                		beq.s	.non_upd
(2)  931/    66E6 : 6118                		bsr	.update_set
(2)  932/    66E8 :                     .non_upd:
(2)  933/    66E8 : DCFC 0020           		adda	#sizeof_cdpcm,a6	; Next PCM buffer
(2)  934/    66EC : D8FC 0004           		adda	#4,a4			; Next MSB
(2)  935/    66F0 : 5246                		addq.w	#1,d6			; Next channel
(2)  936/    66F2 : 51CF FFCC           		dbf	d7,.get_addr
(2)  937/    66F6 :                     .non_chng:
(2)  938/    66F6 : 4645                		not.w	d5			; reverse return bits
(2)  939/    66F8 : 13C5 0000 6AC0      		move.b	d5,(RAM_CdSub_PcmEnbl).l
(2)  940/    66FE : 4E75                		rts
(2)  941/    6700 :                     
(2)  942/    6700 :                     ; --------------------------------------------------------
(2)  943/    6700 :                     ; Channel changes
(2)  944/    6700 :                     ; --------------------------------------------------------
(2)  945/    6700 :                     
(2)  946/    6700 :                     .update_set:
(2)  947/    6700 : 1006                		move.b	d6,d0
(2)  948/    6702 : 803C 00C0           		or.b	#$C0,d0
(2)  949/    6706 : 1B40 000F           		move.b	d0,CTREG(a5)
(2)  950/    670A : 342E 000E           		move.w	cdpcm_pitch(a6),d2
(2)  951/    670E : 1B42 0005           		move.b	d2,FDL(a5)
(2)  952/    6712 : 6100 FD20           		bsr	CDPCM_Wait
(2)  953/    6716 : E04A                		lsr.w	#8,d2
(2)  954/    6718 : 1B42 0007           		move.b	d2,FDH(a5)
(2)  955/    671C : 6100 FD16           		bsr	CDPCM_Wait
(2)  956/    6720 : 142E 000C           		move.b	cdpcm_pan(a6),d2	; Panning
(2)  957/    6724 : 1B42 0003           		move.b	d2,PAN(a5)
(2)  958/    6728 : 6100 FD0A           		bsr	CDPCM_Wait
(2)  959/    672C : 142E 000D           		move.b	cdpcm_env(a6),d2	; Envelope
(2)  960/    6730 : 1B42 0001           		move.b	d2,ENV(a5)
(2)  961/    6734 : 6000 FCFE           		bra	CDPCM_Wait
(2)  962/    6738 :                     
(2)  963/    6738 :                     ; --------------------------------------------------------
(2)  964/    6738 :                     ; First fill
(2)  965/    6738 :                     ; --------------------------------------------------------
(2)  966/    6738 :                     
(2)  967/    6738 :                     .first_fill:
(2)  968/    6738 : 1D7C 0000 0001      		move.b	#0,cdpcm_strmf(a6)
(2)  969/    673E : 0DC5                		bset	d6,d5
(2)  970/    6740 : 1B45 0011           		move.b	d5,ONREG(a5)		; Stop channel first
(2)  971/    6744 : 6100 FCEE           		bsr	CDPCM_Wait
(2)  972/    6748 : 206E 0010           		move.l	cdpcm_start(a6),a0	; Make first block
(2)  973/    674C : 222E 0014           		move.l	cdpcm_len(a6),d1
(2)  974/    6750 : 6170                		bsr	.make_lblk
(2)  975/    6752 : 2D48 0008           		move.l	a0,cdpcm_cread(a6)
(2)  976/    6756 : 2D41 0004           		move.l	d1,cdpcm_clen(a6)
(2)  977/    675A : 1006                		move.b	d6,d0
(2)  978/    675C : 803C 00C0           		or.b	#$C0,d0
(2)  979/    6760 : 1B40 000F           		move.b	d0,CTREG(a5)
(2)  980/    6764 : 6100 FCCE           		bsr	CDPCM_Wait
(2)  981/    6768 : 6196                		bsr	.update_set
(2)  982/    676A : 1006                		move.b	d6,d0
(2)  983/    676C : E948                		lsl.w	#4,d0
(2)  984/    676E : 1400                		move.b	d0,d2
(2)  985/    6770 : 1B40 000D           		move.b	d0,ST(a5)		; Start MSB
(2)  986/    6774 : 6100 FCBE           		bsr	CDPCM_Wait
(2)  987/    6778 : E148                		lsl.w	#8,d0
(2)  988/    677A : 1D7C 0000 0001      		move.b	#0,cdpcm_strmf(a6)
(2)  989/    6780 : 4A81                		tst.l	d1
(2)  990/    6782 : 6B10                		bmi.s	.small_sampl
(2)  991/    6784 : 670E                		beq.s	.small_sampl
(2)  992/    6786 : 1D7C 0080 0001      		move.b	#$80,cdpcm_strmf(a6)
(2)  993/    678C : 1D7C 0000 0002      		move.b	#0,cdpcm_strmhalf(a6)
(2)  994/    6792 : 6012                		bra.s	.set_nonstop
(2)  995/    6794 :                     
(2)  996/    6794 :                     ; --------------------------------------------------------
(2)  997/    6794 :                     
(2)  998/    6794 :                     .small_sampl:
(2)  999/    6794 : 0816 0000           		btst	#0,cdpcm_flags(a6)
(2) 1000/    6798 : 6708                		beq.s	.set_endloop
(2) 1001/    679A : 262E 0018           		move.l	cdpcm_loop(a6),d3
(2) 1002/    679E : 2003                		move.l	d3,d0
(2) 1003/    67A0 : 6004                		bra	.set_nonstop
(2) 1004/    67A2 :                     .set_endloop:
(2) 1005/    67A2 : 303C 8000           		move.w	#$8000,d0		; BLANK WAVE pointer
(2) 1006/    67A6 :                     .set_nonstop:
(2) 1007/    67A6 : 1B40 0009           		move.b	d0,LSL(a5)
(2) 1008/    67AA : 6100 FC88           		bsr	CDPCM_Wait
(2) 1009/    67AE : E048                		lsr.w	#8,d0
(2) 1010/    67B0 : 1B40 000B           		move.b	d0,LSH(a5)
(2) 1011/    67B4 : 6100 FC7E           		bsr	CDPCM_Wait
(2) 1012/    67B8 : 0D85                		bclr	d6,d5
(2) 1013/    67BA : 1B45 0011           		move.b	d5,ONREG(a5)
(2) 1014/    67BE : 6000 FC74           		bra	CDPCM_Wait
(2) 1015/    67C2 :                     
(2) 1016/    67C2 :                     ; --------------------------------------------------------
(2) 1017/    67C2 :                     ; a0 - Wave data
(2) 1018/    67C2 :                     ; a1 - Output to memory (set with CTREG first)
(2) 1019/    67C2 :                     ; d1 - Wave length counter
(2) 1020/    67C2 :                     ; d6 - current channel
(2) 1021/    67C2 :                     
(2) 1022/    67C2 :                     .make_lblk:
(2) 1023/    67C2 : 1006                		move.b	d6,d0		; Set channel as memory slot
(2) 1024/    67C4 : 803C 0080           		or.b	#$80,d0
(2) 1025/    67C8 : 1B40 000F           		move.b	d0,CTREG(a5)
(2) 1026/    67CC : 6100 FC66           		bsr	CDPCM_Wait
(2) 1027/    67D0 : 43ED 2001           		lea	$2001(a5),a1
(2) 1028/    67D4 : 363C 0200           		move.w	#$200,d3	; BLOCK SIZE
(2) 1029/    67D8 : E44B                		lsr.w	#2,d3		; /4
(2) 1030/    67DA : 5343                		subq.w	#1,d3
(2) 1031/    67DC :                     .wave_blkl:
(2) 1032/    67DC : 4A81                		tst.l	d1
(2) 1033/    67DE : 6B3E                		bmi.s	.fill_mode
(2) 1034/    67E0 :                     	rept 4
(2) 1035/    67E0 :                     		moveq	#-1,d0		; Set loop flag
(2) 1036/    67E0 :                     		subq.l	#1,d1		; Len counter
(2) 1037/    67E0 :                     		beq.s	.len_it		; If ran out of wave data, write -1 now.
(2) 1038/    67E0 :                     		move.b	(a0)+,d0	; Read wave and convert
(2) 1039/    67E0 :                     		bsr	CDPCM_WavToPcm
(2) 1040/    67E0 :                     .len_it:
(2) 1041/    67E0 :                     		move.b	d0,(a1)
(2) 1042/    67E0 :                     ; 		bsr	CDPCM_Wait
(2) 1043/    67E0 :                     		addq.l	#2,a1
(2) 1044/    67E0 :                     	endm
(2) 1035/    67E0 : 70FF                		moveq	#-1,d0		; Set loop flag
(2) 1036/    67E2 : 5381                		subq.l	#1,d1		; Len counter
(2) 1037/    67E4 : 6704                		beq.s	.len_it		; If ran out of wave data, write -1 now.
(2) 1038/    67E6 : 1018                		move.b	(a0)+,d0	; Read wave and convert
(2) 1039/    67E8 : 614C                		bsr	CDPCM_WavToPcm
(2) 1040/    67EA :                     .len_it:
(2) 1041/    67EA : 1280                		move.b	d0,(a1)
(2) 1042/    67EC :                     ; 		bsr	CDPCM_Wait
(2) 1043/    67EC : 5489                		addq.l	#2,a1
(2) 1035/    67EE : 70FF                		moveq	#-1,d0		; Set loop flag
(2) 1036/    67F0 : 5381                		subq.l	#1,d1		; Len counter
(2) 1037/    67F2 : 6704                		beq.s	.len_it		; If ran out of wave data, write -1 now.
(2) 1038/    67F4 : 1018                		move.b	(a0)+,d0	; Read wave and convert
(2) 1039/    67F6 : 613E                		bsr	CDPCM_WavToPcm
(2) 1040/    67F8 :                     .len_it:
(2) 1041/    67F8 : 1280                		move.b	d0,(a1)
(2) 1042/    67FA :                     ; 		bsr	CDPCM_Wait
(2) 1043/    67FA : 5489                		addq.l	#2,a1
(2) 1035/    67FC : 70FF                		moveq	#-1,d0		; Set loop flag
(2) 1036/    67FE : 5381                		subq.l	#1,d1		; Len counter
(2) 1037/    6800 : 6704                		beq.s	.len_it		; If ran out of wave data, write -1 now.
(2) 1038/    6802 : 1018                		move.b	(a0)+,d0	; Read wave and convert
(2) 1039/    6804 : 6130                		bsr	CDPCM_WavToPcm
(2) 1040/    6806 :                     .len_it:
(2) 1041/    6806 : 1280                		move.b	d0,(a1)
(2) 1042/    6808 :                     ; 		bsr	CDPCM_Wait
(2) 1043/    6808 : 5489                		addq.l	#2,a1
(2) 1035/    680A : 70FF                		moveq	#-1,d0		; Set loop flag
(2) 1036/    680C : 5381                		subq.l	#1,d1		; Len counter
(2) 1037/    680E : 6704                		beq.s	.len_it		; If ran out of wave data, write -1 now.
(2) 1038/    6810 : 1018                		move.b	(a0)+,d0	; Read wave and convert
(2) 1039/    6812 : 6122                		bsr	CDPCM_WavToPcm
(2) 1040/    6814 :                     .len_it:
(2) 1041/    6814 : 1280                		move.b	d0,(a1)
(2) 1042/    6816 :                     ; 		bsr	CDPCM_Wait
(2) 1043/    6816 : 5489                		addq.l	#2,a1
(2) 1045/    6818 : 51CB FFC2           		dbf	d3,.wave_blkl
(2) 1046/    681C : 4E75                		rts
(2) 1047/    681E :                     ; Fill unused block
(2) 1048/    681E :                     .fill_mode:
(2) 1049/    681E : 70FF                		moveq	#-1,d0
(2) 1050/    6820 :                     .loop_blkl:
(2) 1051/    6820 :                     	rept 4
(2) 1052/    6820 :                     		move.b	d0,(a1)
(2) 1053/    6820 :                     ; 		bsr	CDPCM_Wait
(2) 1054/    6820 :                     		addq.l	#2,a1
(2) 1055/    6820 :                     	endm
(2) 1052/    6820 : 1280                		move.b	d0,(a1)
(2) 1053/    6822 :                     ; 		bsr	CDPCM_Wait
(2) 1054/    6822 : 5489                		addq.l	#2,a1
(2) 1052/    6824 : 1280                		move.b	d0,(a1)
(2) 1053/    6826 :                     ; 		bsr	CDPCM_Wait
(2) 1054/    6826 : 5489                		addq.l	#2,a1
(2) 1052/    6828 : 1280                		move.b	d0,(a1)
(2) 1053/    682A :                     ; 		bsr	CDPCM_Wait
(2) 1054/    682A : 5489                		addq.l	#2,a1
(2) 1052/    682C : 1280                		move.b	d0,(a1)
(2) 1053/    682E :                     ; 		bsr	CDPCM_Wait
(2) 1054/    682E : 5489                		addq.l	#2,a1
(2) 1056/    6830 : 51CB FFEE           		dbf	d3,.loop_blkl
(2) 1057/    6834 : 4E75                		rts
(2) 1058/    6836 :                     
(2) 1059/    6836 :                     ; --------------------------------------------------------
(2) 1060/    6836 :                     
(2) 1061/    6836 :                     CDPCM_WavToPcm:
(2) 1062/    6836 : 0240 00FF           		andi.w	#$FF,d0
(2) 1063/    683A : 103B 0004           		move.b	.wave_list(pc,d0.w),d0
(2) 1064/    683E : 4E75                		rts
(2) 1065/    6840 :                     .wave_list:
(2) 1066/    6840 : FEFE FDFC FBFA      	dc.b $FE,$FE,$FD,$FC,$FB,$FA,$F9,$F8,$F7,$F6,$F5,$F4,$F3,$F2,$F1,$F0
             6846 : F9F8 F7F6 F5F4 
             684C : F3F2 F1F0          
(2) 1067/    6850 : EFEE EDEC EBEA      	dc.b $EF,$EE,$ED,$EC,$EB,$EA,$E9,$E8,$E7,$E6,$E5,$E4,$E3,$E2,$E1,$E0
             6856 : E9E8 E7E6 E5E4 
             685C : E3E2 E1E0          
(2) 1068/    6860 : DFDE DDDC DBDA      	dc.b $DF,$DE,$DD,$DC,$DB,$DA,$D9,$D8,$D7,$D6,$D5,$D4,$D3,$D2,$D1,$D0
             6866 : D9D8 D7D6 D5D4 
             686C : D3D2 D1D0          
(2) 1069/    6870 : CFCE CDCC CBCA      	dc.b $CF,$CE,$CD,$CC,$CB,$CA,$C9,$C8,$C7,$C6,$C5,$C4,$C3,$C2,$C1,$C0
             6876 : C9C8 C7C6 C5C4 
             687C : C3C2 C1C0          
(2) 1070/    6880 : BFBE BDBC BBBA      	dc.b $BF,$BE,$BD,$BC,$BB,$BA,$B9,$B8,$B7,$B6,$B5,$B4,$B3,$B2,$B1,$B0
             6886 : B9B8 B7B6 B5B4 
             688C : B3B2 B1B0          
(2) 1071/    6890 : AFAE ADAC ABAA      	dc.b $AF,$AE,$AD,$AC,$AB,$AA,$A9,$A8,$A7,$A6,$A5,$A4,$A3,$A2,$A1,$A0
             6896 : A9A8 A7A6 A5A4 
             689C : A3A2 A1A0          
(2) 1072/    68A0 : 9F9E 9D9C 9B9A      	dc.b $9F,$9E,$9D,$9C,$9B,$9A,$99,$98,$97,$96,$95,$94,$93,$92,$91,$90
             68A6 : 9998 9796 9594 
             68AC : 9392 9190          
(2) 1073/    68B0 : 8F8E 8D8C 8B8A      	dc.b $8F,$8E,$8D,$8C,$8B,$8A,$89,$88,$87,$86,$85,$84,$83,$82,$81,$80
             68B6 : 8988 8786 8584 
             68BC : 8382 8180          
(2) 1074/    68C0 : 0001 0203 0405      	dc.b $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0A,$0B,$0C,$0D,$0E,$0F
             68C6 : 0607 0809 0A0B 
             68CC : 0C0D 0E0F          
(2) 1075/    68D0 : 1011 1213 1415      	dc.b $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1A,$1B,$1C,$1D,$1E,$1F
             68D6 : 1617 1819 1A1B 
             68DC : 1C1D 1E1F          
(2) 1076/    68E0 : 2021 2223 2425      	dc.b $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2A,$2B,$2C,$2D,$2E,$2F
             68E6 : 2627 2829 2A2B 
             68EC : 2C2D 2E2F          
(2) 1077/    68F0 : 3031 3233 3435      	dc.b $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3A,$3B,$3C,$3D,$3E,$3F
             68F6 : 3637 3839 3A3B 
             68FC : 3C3D 3E3F          
(2) 1078/    6900 : 4041 4243 4445      	dc.b $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4A,$4B,$4C,$4D,$4E,$4F
             6906 : 4647 4849 4A4B 
             690C : 4C4D 4E4F          
(2) 1079/    6910 : 5051 5253 5455      	dc.b $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5A,$5B,$5C,$5D,$5E,$5F
             6916 : 5657 5859 5A5B 
             691C : 5C5D 5E5F          
(2) 1080/    6920 : 6061 6263 6465      	dc.b $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6A,$6B,$6C,$6D,$6E,$6F
             6926 : 6667 6869 6A6B 
             692C : 6C6D 6E6F          
(2) 1081/    6930 : 7071 7273 7475      	dc.b $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7A,$7B,$7C,$7D,$7E,$7F
             6936 : 7677 7879 7A7B 
             693C : 7C7D 7E7F          
(2) 1082/    6940 :                     	align 2
(2) 1083/    6940 :                     
(2) 1084/    6940 :                     ; ====================================================================
(2) 1085/    6940 :                     ; ----------------------------------------------------------------
(2) 1086/    6940 :                     ; Internal buffers
(2) 1087/    6940 :                     ; ----------------------------------------------------------------
(2) 1088/    6940 :                     
(2) 1089/    6940 :                     ; 			align $80
(2) 1090/    6940 :                     
(2) 1091/    6940 :                     ; ====================================================================
(2) 1092/    6940 :                     ; ----------------------------------------------------------------
(2) 1093/    6940 :                     ; RAM
(2) 1094/    6940 :                     ; ----------------------------------------------------------------
(2) 1095/    6940 :                     
(2) 1096/    6940 :                     			align $80
(2) 1097/    6980 :                     SP_RAM:
(2) 1098/    6980 : (MACRO)              			strct SP_RAM
(2) 1098/    6980 : =$6980               GLBL_LASTPC     set *
(2) 1098/    1180 :                                     dephase
(2) 1098/    6980 :                                     phase SP_RAM
(2) 1098/    6980 : =$6980               GLBL_LASTORG    set *
(2) 1099/    6980 :                     RAM_CdSub_PcmBuff	ds.b 8*$20
(2) 1100/    6A80 :                     RAM_CdSub_PcmTable	ds.b 8*8		; Z80 table
(2) 1101/    6AC0 :                     RAM_CdSub_PcmEnbl	ds.b 1			; PCM enable bits
(2) 1102/    6AC1 :                     RAM_CdSub_PcmPlay	ds.b 1
(2) 1103/    6AC2 :                     RAM_CdSub_PcmTblNum	ds.b 1
(2) 1104/    6AC3 :                     RAM_CdSub_PcmTblUpd	ds.b 1			; PCM update flag
(2) 1105/    6AC4 :                     ; BRAM_Buff		ds.b $640
(2) 1106/    6AC4 :                     ISO_Filelist		ds.b $800*$10
(2) 1107/    EAC4 :                     ISO_Output		ds.b $800*$10
(2) 1108/   16AC4 :                     
(2) 1109/   16AC4 :                     RAM_CdSub_FsBuff	ds.l $20
(2) 1110/   16B44 :                     sizeof_subcpu		ds.l 0
(2) 1111/   16B44 : (MACRO)              			endstrct
(2) 1111/    6980 :                                     org GLBL_LASTORG
(2) 1111/    6980 :                                     phase GLBL_LASTPC
(2) 1112/    6980 :                     
(2) 1113/    6980 : (MACRO)              			erreport "SUB-CPU IP",sizeof_subcpu,$20000
(2) 1114/    6980 :                     
(2) 1115/    6980 :                     ; ====================================================================
(2) 1116/    6980 :                     ; ----------------------------------------------------------------
(2) 1117/    6980 :                     ; SUB-CPU data
(2) 1118/    6980 :                     ; ----------------------------------------------------------------
(2) 1119/    6980 :                     
(2) 1120/    6980 :                     			dephase
(2) 1121/   20000 :                     			phase $20000
(2) 1122/   20000 :                     SUBCPU_DATA:
(2) 1123/    6980 :                     			dephase
(2) 1124/    1180 :                     			dephase
(2) 1125/    1180 :                     
(1)   75/    1180 :                     SP_End:
(1)   76/    1180 :                     		align 2
(1)   77/    1180 :                     
(1)   78/    1180 :                     ; ========================================================
(1)   79/    1180 :                     ; -------------------------------------------------
(1)   80/    1180 :                     ; Super-jump...
(1)   81/    1180 :                     ; -------------------------------------------------
(1)   82/    1180 :                     
(1)   83/    1180 :                     		align $2000-$600
(1)   84/    1A00 :                     MCD_Main:
(1)   85/    1A00 :                     
(1)   86/    1A00 :                     
     134/    1A00 :                     mcdin_top:
     135/    1A00 : 41FA 2000           		lea	Md_SysCode(pc),a0			; Transfer SYSTEM subs
     136/    1A04 : 43F9 FFFF 0000      		lea	(RAM_SystemCode),a1			; At TOP of RAM
     137/    1A0A : 303C 1541           		move.w	#((Md_SysCode_e-Md_SysCode))-1,d0
     138/    1A0E :                     .copy_1:
     139/    1A0E : 12D8                		move.b	(a0)+,(a1)+
     140/    1A10 : 51C8 FFFC           		dbf	d0,.copy_1
     144/    1A14 : 41F8 A004           		lea	(RAM_MdVideo),a0		; Clean our "work" RAM starting from here
     145/    1A18 : 223C FFFF D40C      		move.l	#sizeof_mdram,d1
     146/    1A1E : 7000                		moveq	#0,d0
     147/    1A20 : 30C0                .loop_ram:	move.w	d0,(a0)+
     148/    1A22 : B1C1                		cmp.l	d1,a0
     149/    1A24 : 65FA                		bcs.s	.loop_ram
     150/    1A26 : 4EB9 FFFF 0000      		jsr	(Sound_init).l			; Init Sound driver FIRST
     151/    1A2C : 4EB9 FFFF 0274      		jsr	(Video_init).l			;  ''  Video
     152/    1A32 : 4EB9 FFFF 0E90      		jsr	(System_Init).l			;  ''  System
     153/    1A38 : 33FC 0000 FFFF      		move.w	#0,(RAM_ScreenMode).l		; Start at screen 0
             1A3E : C458             
     154/    1A40 : 4EF9 FFFF 14DE      		jmp	(Md_ReadModes).l		; Go to SCREENJUMP section
     155/FFFFFFFFFFFF2046 :                     		phase $FFFF0600+*
     156/FFFFFFFFFFFF2046 :                     Z80_CODE:	include "sound/driver/gema_zdrv.asm"	; <-- Z80 code loaded from here
(1)    1/FFFFFFFFFFFF2046 :                     ; ====================================================================
(1)    2/FFFFFFFFFFFF2046 :                     ; --------------------------------------------------------
(1)    3/FFFFFFFFFFFF2046 :                     ; GEMA/Nikona Z80 code v0.9
(1)    4/FFFFFFFFFFFF2046 :                     ; (C)2023-2024 GenesisFan64
(1)    5/FFFFFFFFFFFF2046 :                     ; --------------------------------------------------------
(1)    6/FFFFFFFFFFFF2046 :                     
(1)    7/       0 :                     		phase 0
(1)    8/       0 :                     		cpu Z80		; Enter Z80 CPU
(1)    9/       0 :                     
(1)   10/       0 :                     ; --------------------------------------------------------
(1)   11/       0 :                     ; SETTINGS
(1)   12/       0 :                     ; --------------------------------------------------------
(1)   13/       0 :                     
(1)   14/       0 :                     ; !! = leave as-is unless you know what you are doing.
(1)   15/       0 :                     
(1)   16/       0 : =8H                  MAX_TRFRPZ	equ 8		; !! Max transferRom packets(bytes) **AFFECTS WAVE QUALITY**
(1)   17/       0 : =20H                 MAX_TRKCHN	equ 32		; !! Max internal shared tracker channel slots *** LIMTED to 32 ***
(1)   18/       0 : =20H                 MAX_RCACH	equ 20h		; !! Max storage for ROM pattern data *** 1-BIT SIZES ONLY, MUST BE ALIGNED ***
(1)   19/       0 : =8H                  MAX_BUFFNTRY	equ 4*2		; !! nikona_BuffList buffer entry size
(1)   20/       0 :                     
(1)   21/       0 : =18H                 MAX_TBLSIZE	equ 18h		; Max size for chip tables
(1)   22/       0 : =1AH                 MAX_TRKINDX	equ 26		; Max channel indexes per buffer: 4PSG+6FM+8PCM+8PWM
(1)   23/       0 : =8H                  MAX_BLOCKS	equ 8		; Max Cache'd ROM blocks per track
(1)   24/       0 :                     
(1)   25/       0 : =10H                 MAX_ZCMND	equ 10h		; Size of commands array, ** 1-bit SIZES ONLY **
(1)   26/       0 : =0H                  ZSET_TESTME	equ 0		; Set to 1 to check the DAC playback for quality by ear
(1)   27/       0 :                     
(1)   28/       0 :                     ; --------------------------------------------------------
(1)   29/       0 :                     ; Structs
(1)   30/       0 :                     ; --------------------------------------------------------
(1)   31/       0 :                     
(1)   32/       0 :                     ; trkBuff struct: 00h-30h
(1)   33/       0 :                     ; unused bytes are free.
(1)   34/       0 :                     ;
(1)   35/       0 :                     ; trk_Status: %ERP- V--0
(1)   36/       0 :                     ; E - enabled
(1)   37/       0 :                     ; R - Init|Restart track
(1)   38/       0 :                     ; P - refill-on-playback
(1)   39/       0 :                     ; V - volume change flag
(1)   40/       0 :                     ; 0 - Use global sub-beats
(1)   41/       0 : =0H                  trk_Status	equ 00h	; ** Track Status and Flags (MUST BE at 00h)
(1)   42/       0 : =1H                  trk_SeqId	equ 01h ; ** Track ID to play.
(1)   43/       0 : =2H                  trk_SetBlk	equ 02h	; ** Start on this block
(1)   44/       0 : =3H                  trk_TickSet	equ 03h	; ** Ticks for this track
(1)   45/       0 : =4H                  trk_Blocks	equ 04h ; ** [W] Current track's blocks
(1)   46/       0 : =6H                  trk_Patt	equ 06h ; ** [W] Current track's heads and patterns
(1)   47/       0 : =8H                  trk_Cach	equ 08h	; ** [W] Current track's cache notedata
(1)   48/       0 : =0AH                 trk_Read	equ 0Ah	; [W] Track current pattern read
(1)   49/       0 : =0CH                 trk_Rows	equ 0Ch	; [W] Track row counter
(1)   50/       0 : =0EH                 trk_VolMaster	equ 0Eh ; [W] Master volume for this track slot (00-max), +80h update
(1)   51/       0 :                     
(1)   52/       0 : =10H                 trk_cachHalf	equ 10h ; ROM-cache halfcheck
(1)   53/       0 : =11H                 trk_rowPause	equ 11h	; Row-pause timer
(1)   54/       0 : =12H                 trk_tickTmr	equ 12h	; Ticks timer
(1)   55/       0 : =13H                 trk_currBlk	equ 13h	; Current block
(1)   56/       0 : =14H                 trk_Priority	equ 14h ; Priority level for this buffer
(1)   57/       0 : =15H                 trk_BankIns	equ 15h ; Instrument bank
(1)   58/       0 : =16H                 trk_BankHeads	equ 16h ; Header bank
(1)   59/       0 : =17H                 trk_BankBlk	equ 17h	; Block bank
(1)   60/       0 : =18H                 trk_MaxChnl	equ 18h ; MAX channels used in this track
(1)   61/       0 : =19H                 trk_VolFdTarget	equ 19h	; Target fade volume
(1)   62/       0 : =1AH                 trk_RomPattRead	equ 1Ah ; [3b] ROM current pattern data to be cache'd
(1)   63/       0 : =1DH                 trk_RomPatt	equ 1Dh ; [3b] ROM BASE pattern data
(1)   64/       0 : =20H                 trk_RomInst	equ 20h ; [3b] ROM instrument data
(1)   65/       0 : =23H                 trk_RomBlks	equ 23h ; [3b] ROM blocks data
(1)   66/       0 : =26H                 trk_ChnIndx	equ 26h	; CHANNEL INDEXES START HERE
(1)   67/       0 :                     
(1)   68/       0 :                     ; chnBuff struct, 8 bytes ONLY
(1)   69/       0 :                     ;
(1)   70/       0 :                     ; chnl_Flags: E0LRevin
(1)   71/       0 :                     ; E  - Channel is active
(1)   72/       0 :                     ; LR - Global left/Right panning bits (0-ON 1-OFF)
(1)   73/       0 :                     ; e  - Effect*
(1)   74/       0 :                     ; v  - Volume*
(1)   75/       0 :                     ; i  - Intrument*
(1)   76/       0 :                     ; n  - Note*
(1)   77/       0 :                     
(1)   78/       0 : =0H                  chnl_Flags	equ 0	; Playback flags ** DON'T MOVE **
(1)   79/       0 : =1H                  chnl_Chip	equ 1	; Current Chip ID + priority for this channel
(1)   80/       0 : =2H                  chnl_Note	equ 2
(1)   81/       0 : =3H                  chnl_Ins	equ 3	; Starting from 1, 0 is invalid
(1)   82/       0 : =4H                  chnl_Vol	equ 4	; MAX to MIN: 40h-00h
(1)   83/       0 : =5H                  chnl_EffId	equ 5
(1)   84/       0 : =6H                  chnl_EffArg	equ 6
(1)   85/       0 : =7H                  chnl_Type	equ 7	; Impulse-note update bits
(1)   86/       0 :                     
(1)   87/       0 :                     ; --------------------------------------------------------
(1)   88/       0 :                     ; Variables
(1)   89/       0 :                     ; --------------------------------------------------------
(1)   90/       0 :                     
(1)   91/       0 :                     ; Z80 opcode labels for the wave playback routines
(1)   92/       0 : =0H                  zopcNop		equ 00h
(1)   93/       0 : =8H                  zopcEx		equ 08h
(1)   94/       0 : =0C9H                zopcRet		equ 0C9h
(1)   95/       0 : =0D9H                zopcExx		equ 0D9h		; (dac_me ONLY)
(1)   96/       0 : =0F5H                zopcPushAf	equ 0F5h		; (dac_fill ONLY)
(1)   97/       0 :                     
(1)   98/       0 :                     ; PSG external control
(1)   99/       0 : =0H                  COM		equ 0
(1)  100/       0 : =4H                  LEV		equ 4
(1)  101/       0 : =8H                  ATK		equ 8
(1)  102/       0 : =0CH                 DKY		equ 12
(1)  103/       0 : =10H                 SLV		equ 16
(1)  104/       0 : =14H                 RRT		equ 20
(1)  105/       0 : =18H                 MODE		equ 24
(1)  106/       0 : =1CH                 DTL		equ 28
(1)  107/       0 : =20H                 DTH		equ 32
(1)  108/       0 : =24H                 ALV		equ 36
(1)  109/       0 : =28H                 FLG		equ 40
(1)  110/       0 : =2CH                 TMR		equ 44
(1)  111/       0 : =30H                 PVOL		equ 48
(1)  112/       0 : =34H                 PARP		equ 52
(1)  113/       0 : =38H                 PTMR		equ 56
(1)  114/       0 :                     
(1)  115/       0 :                     ; PWM control
(1)  116/       0 :                     ; PWCOM		equ 0
(1)  117/       0 :                     ; PWPTH_V	equ 8	; Volume | Pitch MSB (VVVVVVPPb)
(1)  118/       0 :                     ; PWPHL		equ 16	; Pitch LSB
(1)  119/       0 :                     ; PWOUTF	equ 24	; Output mode/bits | 32-bit address (%SlLRxiix) ii=$02 or $06
(1)  120/       0 :                     ; PWINSH	equ 32	; **
(1)  121/       0 :                     ; PWINSM	equ 40	; **
(1)  122/       0 :                     ; PWINSL	equ 48	; **
(1)  123/       0 :                     
(1)  124/       0 :                     ; ====================================================================
(1)  125/       0 :                     ; --------------------------------------------------------
(1)  126/       0 :                     ; Code starts here
(1)  127/       0 :                     ; --------------------------------------------------------
(1)  128/       0 :                     
(1)  129/       0 : F3                  		di			; Disable interrputs first
(1)  130/       1 : ED 56               		im	1		; Set Interrupt mode 1
(1)  131/       3 : 31 00 20            		ld	sp,2000h	; Set stack at the end of Z80
(1)  132/       6 : 18 48               		jr	z80_init	; Jump to z80_init
(1)  133/       8 :                     
(1)  134/       8 :                     ; --------------------------------------------------------
(1)  135/       8 :                     ; RST 8 (dac_me)
(1)  136/       8 :                     ; *** self-modifiable code ***
(1)  137/       8 :                     ;
(1)  138/       8 :                     ; Writes wave data to DAC using data stored
(1)  139/       8 :                     ; on the wave buffer, call this routine every 6 or 8
(1)  140/       8 :                     ; instructions to keep the samplerate stable.
(1)  141/       8 :                     ;
(1)  142/       8 :                     ; Input (EXX):
(1)  143/       8 :                     ;  c - WAVE buffer MSB
(1)  144/       8 :                     ; de - Pitch (xx.00)
(1)  145/       8 :                     ; h  - WAVE buffer LSB (as xx.00)
(1)  146/       8 :                     ;
(1)  147/       8 :                     ; Uses (EXX):
(1)  148/       8 :                     ; b
(1)  149/       8 :                     ;
(1)  150/       8 :                     ; Notes:
(1)  151/       8 :                     ; ONLY USE dac_on and dac_off to control
(1)  152/       8 :                     ; wave playback.
(1)  153/       8 :                     ;
(1)  154/       8 :                     ; call dac_on to enable wave playback, locks FM6
(1)  155/       8 :                     ; and
(1)  156/       8 :                     ; call dac_off to disable wave and unlock FM6.
(1)  157/       8 :                     ; --------------------------------------------------------
(1)  158/       8 :                     
(1)  159/       8 :                     ; Samplerate is at 16000hz with minimal quality loss.
(1)  160/       8 :                     ; 		org 8
(1)  161/       8 : D9                  dac_me:		exx			; * swap regs <-- Changes between EXX(play) and RET(stop)
(1)  162/       9 : 08                  		ex	af,af'		; Swap af
(1)  163/       A : 45                  		ld	b,l		; Save pitch .00 to b
(1)  164/       B : 6C                  		ld	l,h		; l - xx.00 to 00xx
(1)  165/       C : 61                  		ld	h,c		; h - Wave buffer MSB + 00xx
(1)  166/       D : 3E 2A               		ld	a,2Ah		; YM register 2Ah
(1)  167/       F : 32 00 40            		ld	(Zym_ctrl_1),a	; Set DAC write
(1)  168/      12 : 7E                  		ld	a,(hl)		; Read wave byte
(1)  169/      13 : 32 01 40            		ld	(Zym_data_1),a	; Write it to DAC
(1)  170/      16 : 65                  		ld	h,l		; get hl back
(1)  171/      17 : 68                  		ld	l,b		; Get .00 back from b to l
(1)  172/      18 : 19                  		add	hl,de		; Pitch increment hl
(1)  173/      19 : 08                  		ex	af,af'		; Return af
(1)  174/      1A : D9                  		exx			; * swap regs
(1)  175/      1B : C9                  		ret
(1)  176/      1C :                     
(1)  177/      1C :                     ; --------------------------------------------------------
(1)  178/      1C :                     ; 1Ch - Master tracklist pointer
(1)  179/      1C :                     gemaMstrListPos:
(1)  180/      1C : 00                  		db 0				; ** 32-bit 68k address **
(1)  181/      1D : 00                  		db 0
(1)  182/      1E : 00                  		db 0
(1)  183/      1F : 00                  		db 0
(1)  184/      20 :                     
(1)  185/      20 :                     ; --------------------------------------------------------
(1)  186/      20 :                     ; RST 20h (dac_me)
(1)  187/      20 :                     ; *** self-modifiable code ***
(1)  188/      20 :                     ;
(1)  189/      20 :                     ; Checks if the WAVE cache needs refilling to keep
(1)  190/      20 :                     ; it playing.
(1)  191/      20 :                     ; --------------------------------------------------------
(1)  192/      20 :                     
(1)  193/      20 :                     ; 		org 20h
(1)  194/      20 : F5                  dac_fill:	push	af		; <-- Changes between PUSH AF(play) and RET(stop)
(1)  195/      21 : 3A 97 1F            		ld	a,(dDacFifoMid)	; a - Get half-way value
(1)  196/      24 : D9                  		exx			; * swap regs
(1)  197/      25 : AC                  		xor	h		; Grab LSB.00
(1)  198/      26 : D9                  		exx			; * swap regs
(1)  199/      27 : E6 80               		and	80h		; Check if bit changed
(1)  200/      29 : C4 14 14            		call	nz,dac_refill	; If yes, Refill and update LSB to check
(1)  201/      2C : F1                  		pop	af
(1)  202/      2D : C9                  		ret
(1)  203/      2E :                     
(1)  204/      2E :                     ; --------------------------------------------------------
(1)  205/      2E :                     ; 02Eh - User read/write values
(1)  206/      2E : 00                  commZWrite	db 0			; 2Eh: cmd fifo wptr (from 68k)
(1)  207/      2F : 00                  commZRomBlk	db 0			; 2Fh: 68k ROM block flag
(1)  208/      30 : 00                  cdRamLen	db 0			; 30h: Size + status flag
(1)  209/      31 : 00 00               cdRamDst	db 0,0			; 31h: ** Z80 destination
(1)  210/      33 : 00 00               cdRamSrc	db 0,0			; 33h: ** 68k 24-bit source
(1)  211/      35 : 00                  cdRamSrcB	db 0			; 35h: **
(1)  212/      36 : 00                  mcdBlock	db 0			; 36h: Flag to BLOCK SCD comm
(1)  213/      37 : 00                  marsBlock	db 0			; 37h: Flag to BLOCK PWM transfers.
(1)  214/      38 :                     
(1)  215/      38 :                     ; --------------------------------------------------------
(1)  216/      38 :                     ; Z80 Interrupt at 0038h
(1)  217/      38 :                     ; --------------------------------------------------------
(1)  218/      38 :                     
(1)  219/      38 :                     ; 		org 38h			; Align 38h
(1)  220/      38 : ED 73 80 1F         		ld	(tickSpSet),sp	; Write TICK flag using sp (xx1F, read as tickFlag+1)
(1)  221/      3C : F3                  		di			; Disable interrupt
(1)  222/      3D : C9                  		ret
(1)  223/      3E :                     
(1)  224/      3E :                     ; --------------------------------------------------------
(1)  225/      3E :                     ; 03Eh - More user settings
(1)  226/      3E : 00                  palMode		db 0			; 3Eh: PAL mode flag
(1)  227/      3F : 00                  freeFlag	db 0
(1)  228/      40 :                     
(1)  229/      40 :                     ; --------------------------------------------------------
(1)  230/      40 :                     ; 68K Read/Write area at 40h
(1)  231/      40 :                     ; --------------------------------------------------------
(1)  232/      40 :                     
(1)  233/      40 :                     ; 		org 40h
(1)  234/      40 :                     commZfifo	ds MAX_ZCMND			; Buffer for commands from 68k side
(1)  235/      50 :                     
(1)  236/      50 :                     ; --------------------------------------------------------
(1)  237/      50 :                     ; Initialize
(1)  238/      50 :                     ; --------------------------------------------------------
(1)  239/      50 :                     
(1)  240/      50 :                     z80_init:
(1)  241/      50 : CD F4 10            		call	gema_init		; Init values
(1)  242/      53 : FB                  		ei
(1)  243/      54 :                     
(1)  244/      54 :                     ; --------------------------------------------------------
(1)  245/      54 :                     ; MAIN LOOP
(1)  246/      54 :                     ; --------------------------------------------------------
(1)  247/      54 :                     
(1)  248/      54 :                     drv_loop:
(1)  249/      54 : CF                  		rst	8
(1)  250/      55 : CD 60 11            		call	get_tick		; Check tick on VBlank
(1)  251/      58 : E7                  		rst	20h			; Refill wave here
(1)  252/      59 : CF                  		rst	8
(1)  253/      5A : 06 00               		ld	b,0			; b - Reset current flags (beat|tick)
(1)  254/      5C : 3A 82 1F            		ld	a,(tickCnt)		; Decrement tick counter
(1)  255/      5F : D6 01               		sub	1
(1)  256/      61 : 38 0B               		jr	c,.noticks		; If non-zero, no tick passed.
(1)  257/      63 : 32 82 1F            		ld	(tickCnt),a
(1)  258/      66 : CD 39 12            		call	chip_env		; Process PSG and YM
(1)  259/      69 : CD 60 11            		call	get_tick		; Check for another tick
(1)  260/      6C : 06 01               		ld 	b,01b			; Set TICK and clear BEAT flags (01b)
(1)  261/      6E :                     .noticks:
(1)  262/      6E : 3A A1 1F            		ld	a,(sbeatAcc+1)		; check beat counter (scaled by tempo)
(1)  263/      71 : D6 01               		sub	1
(1)  264/      73 : 38 06               		jr	c,.nobeats
(1)  265/      75 : CF                  		rst	8
(1)  266/      76 : 32 A1 1F            		ld	(sbeatAcc+1),a		; 1/24 beat passed.
(1)  267/      79 : CB C8               		set	1,b			; Set BEAT (10b) flag
(1)  268/      7B :                     .nobeats:
(1)  269/      7B : CF                  		rst	8
(1)  270/      7C : 78                  		ld	a,b			; Any beat/tick bits set?
(1)  271/      7D : B7                  		or	a
(1)  272/      7E : 28 14               		jr	z,.neither
(1)  273/      80 : 32 96 1F            		ld	(currTickBits),a	; Save BEAT/TICK bits
(1)  274/      83 : CF                  		rst	8
(1)  275/      84 : CD 60 11            		call	get_tick
(1)  276/      87 : CD 27 06            		call	set_chips		; Send changes to sound chips
(1)  277/      8A : CD 60 11            		call	get_tick
(1)  278/      8D : CF                  		rst	8
(1)  279/      8E : CD 28 02            		call	upd_track		; Update track data
(1)  280/      91 : CD 60 11            		call	get_tick
(1)  281/      94 :                     .neither:
(1)  282/      94 : CF                  		rst	8
(1)  284/      95 : CD 5C 10            		call	zmars_send		; External communication
(1)  286/      98 : CD 60 11            		call	get_tick
(1)  287/      9B :                     .next_cmd:
(1)  288/      9B : 3A 2E 00            		ld	a,(commZWrite)		; Check if commZ R/W indexes
(1)  289/      9E : 47                  		ld	b,a			; are in the same spot a == b
(1)  290/      9F : 3A 85 1F            		ld	a,(commZRead)
(1)  291/      A2 : B8                  		cp	b			; If equal, loop back.
(1)  292/      A3 : 28 AF               		jr	z,drv_loop
(1)  293/      A5 : CF                  		rst	8
(1)  294/      A6 : CD BE 00            		call	.grab_arg		; Read staring flag -1
(1)  295/      A9 : FE FF               		cp	-1			; Got START -1?
(1)  296/      AB : 20 A7               		jr	nz,drv_loop		; If not, end of commands
(1)  297/      AD : CD BE 00            		call	.grab_arg		; Read command number
(1)  298/      B0 : 87                  		add	a,a			; ID * 2
(1)  299/      B1 : 21 DD 00            		ld	hl,.list		; Index-jump...
(1)  300/      B4 : 16 00               		ld	d,0
(1)  301/      B6 : 5F                  		ld	e,a
(1)  302/      B7 : 19                  		add	hl,de
(1)  303/      B8 : 7E                  		ld	a,(hl)
(1)  304/      B9 : 23                  		inc	hl
(1)  305/      BA : 66                  		ld	h,(hl)
(1)  306/      BB : CF                  		rst	8
(1)  307/      BC : 6F                  		ld	l,a
(1)  308/      BD : E9                  		jp	(hl)
(1)  309/      BE :                     
(1)  310/      BE :                     ; --------------------------------------------------------
(1)  311/      BE :                     ; Read cmd byte, auto re-rolls to 3Fh
(1)  312/      BE :                     ; --------------------------------------------------------
(1)  313/      BE :                     
(1)  314/      BE :                     .grab_arg:
(1)  315/      BE : D5                  		push	de
(1)  316/      BF : E5                  		push	hl
(1)  317/      C0 :                     .getcbytel:
(1)  318/      C0 : 3A 2E 00            		ld	a,(commZWrite)
(1)  319/      C3 : 57                  		ld	d,a
(1)  320/      C4 : CF                  		rst	8
(1)  321/      C5 : 3A 85 1F            		ld	a,(commZRead)
(1)  322/      C8 : BA                  		cp	d		; commZ R/W indexes are the same?
(1)  323/      C9 : 28 F5               		jr	z,.getcbytel	; wait until these counters change.
(1)  324/      CB : 16 00               		ld	d,0
(1)  325/      CD : 5F                  		ld	e,a
(1)  326/      CE : 21 40 00            		ld	hl,commZfifo	; Read commZ list + index
(1)  327/      D1 : 19                  		add	hl,de
(1)  328/      D2 : CF                  		rst	8
(1)  329/      D3 : 3C                  		inc	a
(1)  330/      D4 : E6 0F               		and	MAX_ZCMND-1	; ** commZ list buffer limit
(1)  331/      D6 : 32 85 1F            		ld	(commZRead),a
(1)  332/      D9 : 7E                  		ld	a,(hl)		; a - got this byte from the buffer
(1)  333/      DA : E1                  		pop	hl
(1)  334/      DB : D1                  		pop	de
(1)  335/      DC : C9                  		ret
(1)  336/      DD :                     
(1)  337/      DD :                     ; --------------------------------------------------------
(1)  338/      DD :                     
(1)  339/      DD :                     .list:
(1)  340/      DD : ED 00               		dw .cmnd_0		; 00h -
(1)  341/      DF : F0 00               		dw .cmnd_1		; 01h - Set Master tracklist
(1)  342/      E1 : 09 01               		dw .cmnd_2		; 02h - Play by track number
(1)  343/      E3 : 48 01               		dw .cmnd_3		; 03h - Stop by track number
(1)  344/      E5 : ED 00               		dw .cmnd_0		; 04h - **
(1)  345/      E7 : 81 01               		dw .cmnd_5		; 05h - Fade volume (FadeIn/FadeOut)
(1)  346/      E9 : B9 01               		dw .cmnd_6		; 06h - Set maximum volume to slot
(1)  347/      EB : F1 01               		dw .cmnd_7		; 07h - Set GLOBAL sub-beats
(1)  348/      ED :                     
(1)  349/      ED :                     ; --------------------------------------------------------
(1)  350/      ED :                     ; Command 00h
(1)  351/      ED :                     ;
(1)  352/      ED :                     ; Reserved for TESTING purposes.
(1)  353/      ED :                     ; --------------------------------------------------------
(1)  354/      ED :                     
(1)  355/      ED :                     .cmnd_0:
(1)  356/      ED :                     ; 		ld	a,DacIns_TEST>>16
(1)  357/      ED :                     ; 		ld	hl,(DacIns_TEST+6)&0FFFFh
(1)  358/      ED :                     ; 		ld	(wave_Start),hl
(1)  359/      ED :                     ; 		ld	(wave_Start+2),a
(1)  360/      ED :                     ; 		ld	a,02h
(1)  361/      ED :                     ; 		ld	hl,04000h
(1)  362/      ED :                     ; 		ld	(wave_Len),hl
(1)  363/      ED :                     ; 		ld	(wave_Len+2),a
(1)  364/      ED :                     ; 		ld	bc,0
(1)  365/      ED :                     ; 		ld	(wave_Loop),bc
(1)  366/      ED :                     ; 		ld	hl,100h
(1)  367/      ED :                     ; 		ld	(wave_Pitch),hl
(1)  368/      ED :                     ; 		ld	a,1
(1)  369/      ED :                     ; 		ld	(wave_Flags),a
(1)  370/      ED :                     ; 		call	dac_play
(1)  371/      ED :                     
(1)  372/      ED :                     ; 		ld	iy,trkBuff_0
(1)  373/      ED :                     ; 		ld	(iy+trk_VolMaster),64-16
(1)  374/      ED :                     ; 		ld	(iy+trk_VolFdTarget),64
(1)  375/      ED :                     
(1)  376/      ED : C3 9B 00            		jp	.next_cmd
(1)  377/      F0 :                     
(1)  378/      F0 :                     ; --------------------------------------------------------
(1)  379/      F0 :                     ; Command 01h:
(1)  380/      F0 :                     ;
(1)  381/      F0 :                     ; Set the Track MASTER-list.
(1)  382/      F0 :                     ; --------------------------------------------------------
(1)  383/      F0 :                     
(1)  384/      F0 :                     .cmnd_1:
(1)  385/      F0 : 21 1F 00            		ld	hl,gemaMstrListPos+3	; 32-bit big endian
(1)  386/      F3 : CD BE 00            		call	.grab_arg		; $000000xx
(1)  387/      F6 : 77                  		ld	(hl),a
(1)  388/      F7 : 2B                  		dec	hl
(1)  389/      F8 : CD BE 00            		call	.grab_arg		; $0000xx00
(1)  390/      FB : 77                  		ld	(hl),a
(1)  391/      FC : 2B                  		dec	hl
(1)  392/      FD : CD BE 00            		call	.grab_arg		; $00xx0000
(1)  393/     100 : 77                  		ld	(hl),a
(1)  394/     101 : 2B                  		dec	hl
(1)  395/     102 : CD BE 00            		call	.grab_arg		; $xx000000 (filler)
(1)  396/     105 : 77                  		ld	(hl),a
(1)  397/     106 : C3 9B 00            		jp	.next_cmd
(1)  398/     109 :                     
(1)  399/     109 :                     ; --------------------------------------------------------
(1)  400/     109 :                     ; Command 02h:
(1)  401/     109 :                     ;
(1)  402/     109 :                     ; Make new track by sequence number
(1)  403/     109 :                     ;
(1)  404/     109 :                     ; Arguments:
(1)  405/     109 :                     ; SeqID,BlockPos,SlotIndex(If -1 autofill)
(1)  406/     109 :                     ; --------------------------------------------------------
(1)  407/     109 :                     
(1)  408/     109 :                     .cmnd_2:
(1)  409/     109 : CD BE 00            		call	.grab_arg		; d1: Sequence ID
(1)  410/     10C : 4F                  		ld	c,a			; copy as c
(1)  411/     10D : CD BE 00            		call	.grab_arg		; d2: Block from
(1)  412/     110 : 47                  		ld	b,a			; copy as b
(1)  413/     111 : CF                  		rst	8
(1)  414/     112 : CD BE 00            		call	.grab_arg		; d0: Slot index
(1)  415/     115 : FD 21 2B 16         		ld	iy,nikona_BuffList	; iy - Slot buffer list
(1)  416/     119 : FE FF               		cp	-1			; if d2 == -1, search
(1)  417/     11B : 28 0E               		jr	z,.srch_mode
(1)  418/     11D : FE 03               		cp	(nikona_BuffList_e-nikona_BuffList)/MAX_BUFFNTRY	; If maxed out slots
(1)  419/     11F : D2 9B 00            		jp	nc,.next_cmd
(1)  420/     122 : CD 02 02            		call	.cmnd_rdslot
(1)  421/     125 : CD 3A 01            		call	.wrtto_slot
(1)  422/     128 : C3 9B 00            		jp	.next_cmd
(1)  423/     12B :                     ; -1
(1)  424/     12B :                     .srch_mode:
(1)  425/     12B : CD 15 02            		call	.srch_slot
(1)  426/     12E : FE FF               		cp	-1
(1)  427/     130 : CA 9B 00            		jp	z,.next_cmd		; Then skip, no free slot.
(1)  428/     133 : CB 7E               		bit	7,(hl)			; Is this track free?
(1)  429/     135 : CA 3A 01            		jp	z,.wrtto_slot
(1)  430/     138 : 18 F1               		jr	.srch_mode
(1)  431/     13A :                     .wrtto_slot:
(1)  432/     13A : 36 C0               		ld	(hl),0C0h		; ** Write trk_Status flags: Enable+Restart
(1)  433/     13C : 23                  		inc	hl
(1)  434/     13D : CF                  		rst	8
(1)  435/     13E : 71                  		ld	(hl),c			; ** write trk_SeqId
(1)  436/     13F : 23                  		inc	hl
(1)  437/     140 : 70                  		ld	(hl),b			; ** write trk_SetBlk
(1)  438/     141 : 79                  		ld	a,c
(1)  439/     142 : CD FB 05            		call	get_RomTrcks		; ** ROM READ: Get track list
(1)  440/     145 : C3 9B 00            		jp	.next_cmd
(1)  441/     148 :                     
(1)  442/     148 :                     ; --------------------------------------------------------
(1)  443/     148 :                     ; Command 03h:
(1)  444/     148 :                     ;
(1)  445/     148 :                     ; Stop track with the same sequence number
(1)  446/     148 :                     ;
(1)  447/     148 :                     ; SeqID,SlotIndex(-1 allslots)
(1)  448/     148 :                     ; --------------------------------------------------------
(1)  449/     148 :                     
(1)  450/     148 :                     .cmnd_3:
(1)  451/     148 : CD BE 00            		call	.grab_arg		; d1: Sequence ID
(1)  452/     14B : 4F                  		ld	c,a			; copy to c
(1)  453/     14C : CD BE 00            		call	.grab_arg		; d0: Slot index
(1)  454/     14F : FD 21 2B 16         		ld	iy,nikona_BuffList	; iy - Slot buffer list
(1)  455/     153 : FE FF               		cp	-1			; if -1, search for all with same ID
(1)  456/     155 : 28 0E               		jr	z,.srch_del
(1)  457/     157 : FE 03               		cp	(nikona_BuffList_e-nikona_BuffList)/MAX_BUFFNTRY	; If maxed out slots
(1)  458/     159 : D2 9B 00            		jp	nc,.next_cmd
(1)  459/     15C : CD 02 02            		call	.cmnd_rdslot
(1)  460/     15F : CD 72 01            		call	.wrtto_del
(1)  461/     162 : C3 9B 00            		jp	.next_cmd
(1)  462/     165 :                     ; -1
(1)  463/     165 :                     .srch_del:
(1)  464/     165 : CD 15 02            		call	.srch_slot
(1)  465/     168 : FE FF               		cp	-1
(1)  466/     16A : CA 9B 00            		jp	z,.next_cmd
(1)  467/     16D : CD 72 01            		call	.wrtto_del
(1)  468/     170 : 18 F3               		jr	.srch_del
(1)  469/     172 :                     .wrtto_del:
(1)  470/     172 : CB 7E               		bit	7,(hl)
(1)  471/     174 : C8                  		ret	z
(1)  472/     175 : DD 7E 01            		ld	a,(ix+trk_SeqId)
(1)  473/     178 : B9                  		cp	c
(1)  474/     179 : C0                  		ret	nz
(1)  475/     17A : 36 FF               		ld	(hl),-1		; -1 flag, stop channel and clear slot
(1)  476/     17C : 23                  		inc	hl
(1)  477/     17D : 36 FF               		ld	(hl),-1		; Reset seqId
(1)  478/     17F : CF                  		rst	8
(1)  479/     180 : C9                  		ret
(1)  480/     181 :                     
(1)  481/     181 :                     ; --------------------------------------------------------
(1)  482/     181 :                     ; Command 05h:
(1)  483/     181 :                     ;
(1)  484/     181 :                     ; Fade volume (FadeIn/FadeOut)
(1)  485/     181 :                     ;
(1)  486/     181 :                     ; Arguments:
(1)  487/     181 :                     ; TargetVol,SlotIndex(If -1 autofill)
(1)  488/     181 :                     ; --------------------------------------------------------
(1)  489/     181 :                     
(1)  490/     181 :                     .cmnd_5:
(1)  491/     181 : CD BE 00            		call	.grab_arg		; d1: Master volume
(1)  492/     184 : 4F                  		ld	c,a			; copy to c
(1)  493/     185 : CD BE 00            		call	.grab_arg		; d0: Slot index
(1)  494/     188 : FD 21 2B 16         		ld	iy,nikona_BuffList	; iy - Slot buffer list
(1)  495/     18C : FE FF               		cp	-1			; if -1, search for all with same ID
(1)  496/     18E : 28 0E               		jr	z,.srch_fvol
(1)  497/     190 : FE 03               		cp	(nikona_BuffList_e-nikona_BuffList)/MAX_BUFFNTRY	; If maxed out slots
(1)  498/     192 : D2 9B 00            		jp	nc,.next_cmd
(1)  499/     195 : CD 02 02            		call	.cmnd_rdslot
(1)  500/     198 : CD AB 01            		call	.wrtto_fvol
(1)  501/     19B : C3 9B 00            		jp	.next_cmd
(1)  502/     19E :                     ; -1
(1)  503/     19E :                     .srch_fvol:
(1)  504/     19E : CD 15 02            		call	.srch_slot
(1)  505/     1A1 : FE FF               		cp	-1
(1)  506/     1A3 : CA 9B 00            		jp	z,.next_cmd		; Then skip, no free slot.
(1)  507/     1A6 : CD AB 01            		call	.wrtto_fvol
(1)  508/     1A9 : 18 F3               		jr	.srch_fvol
(1)  509/     1AB :                     .wrtto_fvol:
(1)  510/     1AB : CB 7E               		bit	7,(hl)			; Active?
(1)  511/     1AD : C8                  		ret	z
(1)  512/     1AE : CB DE               		set	3,(hl)			; Volume update flag
(1)  513/     1B0 : DD 71 19            		ld	(ix+trk_VolFdTarget),c
(1)  514/     1B3 : DD 36 0F 00         		ld	(ix+trk_VolMaster+1),0
(1)  515/     1B7 : CF                  		rst	8
(1)  516/     1B8 : C9                  		ret
(1)  517/     1B9 :                     
(1)  518/     1B9 :                     ; --------------------------------------------------------
(1)  519/     1B9 :                     ; Command 06h:
(1)  520/     1B9 :                     ;
(1)  521/     1B9 :                     ; Set track's master volume
(1)  522/     1B9 :                     ;
(1)  523/     1B9 :                     ; Arguments:
(1)  524/     1B9 :                     ; MasterVol,SlotIndex(If -1 autofill)
(1)  525/     1B9 :                     ; --------------------------------------------------------
(1)  526/     1B9 :                     
(1)  527/     1B9 :                     .cmnd_6:
(1)  528/     1B9 : CD BE 00            		call	.grab_arg		; d1: Master volume
(1)  529/     1BC : 4F                  		ld	c,a			; copy to c
(1)  530/     1BD : CD BE 00            		call	.grab_arg		; d0: Slot index
(1)  531/     1C0 : FD 21 2B 16         		ld	iy,nikona_BuffList	; iy - Slot buffer list
(1)  532/     1C4 : FE FF               		cp	-1			; if -1, search for all with same ID
(1)  533/     1C6 : 28 0E               		jr	z,.srch_vol
(1)  534/     1C8 : FE 03               		cp	(nikona_BuffList_e-nikona_BuffList)/MAX_BUFFNTRY	; If maxed out slots
(1)  535/     1CA : D2 9B 00            		jp	nc,.next_cmd
(1)  536/     1CD : CD 02 02            		call	.cmnd_rdslot
(1)  537/     1D0 : CD E3 01            		call	.wrtto_vol
(1)  538/     1D3 : C3 9B 00            		jp	.next_cmd
(1)  539/     1D6 :                     ; -1
(1)  540/     1D6 :                     .srch_vol:
(1)  541/     1D6 : CD 15 02            		call	.srch_slot
(1)  542/     1D9 : FE FF               		cp	-1
(1)  543/     1DB : CA 9B 00            		jp	z,.next_cmd		; Then skip, no free slot.
(1)  544/     1DE : CD E3 01            		call	.wrtto_vol
(1)  545/     1E1 : 18 F3               		jr	.srch_vol
(1)  546/     1E3 :                     .wrtto_vol:
(1)  547/     1E3 : CB DE               		set	3,(hl)			; Volume update flag
(1)  548/     1E5 : DD 71 0E            		ld	(ix+trk_VolMaster),c
(1)  549/     1E8 : DD 71 19            		ld	(ix+trk_VolFdTarget),c
(1)  550/     1EB : DD 36 0F 00         		ld	(ix+trk_VolMaster+1),0
(1)  551/     1EF : CF                  		rst	8
(1)  552/     1F0 : C9                  		ret
(1)  553/     1F1 :                     
(1)  554/     1F1 :                     ; --------------------------------------------------------
(1)  555/     1F1 :                     ; Command 07h:
(1)  556/     1F1 :                     ;
(1)  557/     1F1 :                     ; Set global sub-beats
(1)  558/     1F1 :                     ; --------------------------------------------------------
(1)  559/     1F1 :                     
(1)  560/     1F1 :                     .cmnd_7:
(1)  561/     1F1 : CD BE 00            		call	.grab_arg	; d0.w: $00xx
(1)  562/     1F4 : 4F                  		ld	c,a
(1)  563/     1F5 : CD BE 00            		call	.grab_arg	; d0.w: $xx00
(1)  564/     1F8 : 32 A3 1F            		ld	(sbeatPtck+1),a
(1)  565/     1FB : 79                  		ld	a,c
(1)  566/     1FC : 32 A2 1F            		ld	(sbeatPtck),a
(1)  567/     1FF : C3 9B 00            		jp	.next_cmd
(1)  568/     202 :                     
(1)  569/     202 :                     ; --------------------------------------------------------
(1)  570/     202 :                     ; Shared subs
(1)  571/     202 :                     ; --------------------------------------------------------
(1)  572/     202 :                     
(1)  573/     202 :                     .cmnd_rdslot:
(1)  574/     202 : 87                  		add	a,a			; ** MANUAL MAX_BUFFNTRY
(1)  575/     203 : 87                  		add	a,a			; id*8
(1)  576/     204 : 87                  		add	a,a
(1)  577/     205 : 16 00               		ld	d,0
(1)  578/     207 : 5F                  		ld	e,a
(1)  579/     208 : FD 19               		add	iy,de
(1)  580/     20A : FD 7E 00            		ld	a,(iy)
(1)  581/     20D : FD 66 01            		ld	h,(iy+1)
(1)  582/     210 : 6F                  		ld	l,a
(1)  583/     211 : E5                  		push	hl
(1)  584/     212 : DD E1               		pop	ix
(1)  585/     214 : C9                  		ret
(1)  586/     215 :                     
(1)  587/     215 :                     ; ------------------------------------------------
(1)  588/     215 :                     ; iy - nikona_BuffList
(1)  589/     215 :                     
(1)  590/     215 :                     .srch_slot:
(1)  591/     215 : 11 08 00            		ld	de,MAX_BUFFNTRY
(1)  592/     218 : FD 7E 00            		ld	a,(iy)
(1)  593/     21B : FE FF               		cp	-1			; End of list?
(1)  594/     21D : C8                  		ret	z
(1)  595/     21E : FD 66 01            		ld	h,(iy+1)		; hl - Current track slot
(1)  596/     221 : 6F                  		ld	l,a
(1)  597/     222 : E5                  		push	hl
(1)  598/     223 : DD E1               		pop	ix
(1)  599/     225 : FD 19               		add	iy,de			; Next entry for later
(1)  600/     227 : C9                  		ret
(1)  601/     228 :                     
(1)  602/     228 :                     ; ====================================================================
(1)  603/     228 :                     ; ----------------------------------------------------------------
(1)  604/     228 :                     ; MAIN Playback section
(1)  605/     228 :                     ; ----------------------------------------------------------------
(1)  606/     228 :                     
(1)  607/     228 :                     ; ============================================================
(1)  608/     228 :                     ; --------------------------------------------------------
(1)  609/     228 :                     ; Read INTERNAL mini-impulse-tracker data
(1)  610/     228 :                     ; --------------------------------------------------------
(1)  611/     228 :                     
(1)  612/     228 :                     upd_track:
(1)  613/     228 : E7                  		rst	20h			; Refill wave
(1)  614/     229 : CD 60 11            		call	get_tick		; Check for tick flag
(1)  615/     22C : FD 21 2B 16         		ld	iy,nikona_BuffList	; iy - slot buffer List
(1)  616/     230 :                     .trk_buffrs:
(1)  617/     230 : FD 7E 00            		ld	a,(iy)			; if -1, end here.
(1)  618/     233 : FE FF               		cp	-1
(1)  619/     235 : C8                  		ret	z
(1)  620/     236 : CF                  		rst	8
(1)  621/     237 : FD E5               		push	iy
(1)  622/     239 : CD 45 02            		call	.read_track
(1)  623/     23C : FD E1               		pop	iy
(1)  624/     23E : 11 08 00            		ld	de,MAX_BUFFNTRY
(1)  625/     241 : FD 19               		add	iy,de
(1)  626/     243 : 18 EB               		jr	.trk_buffrs
(1)  627/     245 :                     
(1)  628/     245 :                     ; ----------------------------------------
(1)  629/     245 :                     ; iy - Track buffer
(1)  630/     245 :                     ; ----------------------------------------
(1)  631/     245 :                     
(1)  632/     245 :                     .read_track:
(1)  633/     245 : FD 6E 00            		ld	l,(iy)			; hl - current track slot
(1)  634/     248 : FD 66 01            		ld	h,(iy+1)
(1)  635/     24B : CF                  		rst	8
(1)  636/     24C : E5                  		push	hl
(1)  637/     24D : FD E1               		pop	iy			; change iy to hl
(1)  638/     24F : FD 46 00            		ld	b,(iy+trk_Status)	; b - Track status and settings
(1)  639/     252 : CB 78               		bit	7,b			; bit7: Track active?
(1)  640/     254 : C8                  		ret	z			; Return if not.
(1)  641/     255 : 78                  		ld	a,b
(1)  642/     256 : FE FF               		cp	-1			; Flag is -1?
(1)  643/     258 : C8                  		ret	z			; Return if mid-flag
(1)  644/     259 : CF                  		rst	8
(1)  645/     25A :                     	; ----------------------------------------
(1)  646/     25A :                     	; Track effects
(1)  647/     25A : FD 6E 0F            		ld	l,(iy+trk_VolMaster+1)
(1)  648/     25D : FD 66 0E            		ld	h,(iy+trk_VolMaster)
(1)  649/     260 : FD 4E 19            		ld	c,(iy+trk_VolFdTarget)
(1)  650/     263 : 11 00 01            		ld	de,0100h		; <-- Manual volfade speed MAX 0100h
(1)  651/     266 : 79                  		ld	a,c
(1)  652/     267 : BC                  		cp	h
(1)  653/     268 : 28 1E               		jr	z,.keep_vol
(1)  654/     26A : 30 06               		jr	nc,.fade_out
(1)  655/     26C : 11 80 FF            		ld	de,-80h
(1)  656/     26F : 19                  		add	hl,de
(1)  657/     270 : 18 0C               		jr	.too_much
(1)  658/     272 :                     .fade_out:
(1)  659/     272 : 19                  		add	hl,de
(1)  660/     273 : CF                  		rst	8
(1)  661/     274 : 7C                  		ld	a,h
(1)  662/     275 : B9                  		cp	c
(1)  663/     276 : 38 06               		jr	c,.too_much
(1)  664/     278 : 61                  		ld	h,c
(1)  665/     279 : 2E 00               		ld	l,0
(1)  666/     27B : FD 71 19            		ld	(iy+trk_VolFdTarget),c
(1)  667/     27E :                     .too_much:
(1)  668/     27E : FD CB 00 DE         		set	3,(iy+trk_Status)	; Volume update flag
(1)  669/     282 : FD 75 0F            		ld	(iy+trk_VolMaster+1),l
(1)  670/     285 : FD 74 0E            		ld	(iy+trk_VolMaster),h
(1)  671/     288 :                     .keep_vol:
(1)  672/     288 :                     	; ----------------------------------------
(1)  673/     288 : 3A 96 1F            		ld	a,(currTickBits)	; a - Tick/Beat bits
(1)  674/     28B : CB 40               		bit	0,b			; bit0: This track uses Beats?
(1)  675/     28D : 28 03               		jr	z,.sfxmd
(1)  676/     28F : CB 4F               		bit	1,a			; BEAT passed?
(1)  677/     291 : C8                  		ret	z			; No BEAT.
(1)  678/     292 :                     .sfxmd:
(1)  679/     292 : CB 47               		bit	0,a			; TICK passed?
(1)  680/     294 : C8                  		ret	z			; No TICK.
(1)  681/     295 : CF                  		rst	8
(1)  682/     296 :                     	; ----------------------------------------
(1)  683/     296 :                     	; *** Start reading notes ***
(1)  684/     296 : CB 70               		bit	6,b			; bit6: Restart/First time?
(1)  685/     298 : C4 24 05            		call	nz,.first_fill
(1)  686/     29B : CB 68               		bit	5,b			; bit5: FILL request by effect?
(1)  687/     29D : C4 1D 05            		call	nz,.effect_fill
(1)  688/     2A0 : FD 7E 12            		ld	a,(iy+trk_tickTmr)	; TICK ex-timer for this track
(1)  689/     2A3 : 3D                  		dec	a
(1)  690/     2A4 : FD 77 12            		ld	(iy+trk_tickTmr),a
(1)  691/     2A7 : B7                  		or	a			; Check a
(1)  692/     2A8 : C0                  		ret	nz			; If Tick timer != 0, exit.
(1)  693/     2A9 : CF                  		rst	8
(1)  694/     2AA : FD 7E 03            		ld	a,(iy+trk_TickSet)	; Set new tick timer
(1)  695/     2AD : FD 77 12            		ld	(iy+trk_tickTmr),a
(1)  696/     2B0 : FD 4E 0C            		ld	c,(iy+trk_Rows)		; bc - Set row counter
(1)  697/     2B3 : FD 46 0D            		ld	b,(iy+(trk_Rows+1))
(1)  698/     2B6 : 79                  		ld	a,c			; Check rowcount
(1)  699/     2B7 : B0                  		or	b
(1)  700/     2B8 : 20 14               		jr	nz,.row_active		; If bc != 0: row is currenly playing.
(1)  701/     2BA : CF                  		rst	8			; If bc == 0 ...
(1)  702/     2BB : FD 7E 13            		ld	a,(iy+trk_currBlk)	; Next block
(1)  703/     2BE : 3C                  		inc	a
(1)  704/     2BF : FD 77 13            		ld 	(iy+trk_currBlk),a
(1)  705/     2C2 : CD 31 04            		call	.set_track		; Read track data ** ROM ACCESS **
(1)  706/     2C5 : FE FF               		cp	-1			; Track finished?
(1)  707/     2C7 : C8                  		ret	z
(1)  708/     2C8 : FD 4E 0C            		ld	c,(iy+trk_Rows)		; Set new rowcount to bc
(1)  709/     2CB : FD 46 0D            		ld	b,(iy+(trk_Rows+1))
(1)  710/     2CE :                     .row_active:
(1)  711/     2CE : CF                  		rst	8
(1)  712/     2CF : FD 6E 0A            		ld	l,(iy+trk_Read)		; hl - CURRENT pattern to read
(1)  713/     2D2 : FD 66 0B            		ld	h,(iy+((trk_Read+1)))
(1)  714/     2D5 :                     
(1)  715/     2D5 :                     ; --------------------------------
(1)  716/     2D5 :                     ; Main read-loop
(1)  717/     2D5 :                     ; --------------------------------
(1)  718/     2D5 :                     
(1)  719/     2D5 :                     .next_note:
(1)  720/     2D5 : FD 7E 11            		ld	a,(iy+trk_rowPause)	; Check rowtimer
(1)  721/     2D8 : B7                  		or	a
(1)  722/     2D9 : 20 16               		jr	nz,.decrow
(1)  723/     2DB : 7E                  		ld	a,(hl)			; Check if byte is a timer or a note
(1)  724/     2DC : B7                  		or	a
(1)  725/     2DD : 28 06               		jr	z,.exit			; If == 00h: exit
(1)  726/     2DF : FA FC 02            		jp	m,.has_note		; If 80h-0FFh: Note data
(1)  727/     2E2 : FD 77 11            		ld	(iy+trk_rowPause),a	; If 01h-07Fh: Row-pause timer
(1)  728/     2E5 :                     
(1)  729/     2E5 :                     ; --------------------------------
(1)  730/     2E5 :                     ; Exit
(1)  731/     2E5 :                     ; --------------------------------
(1)  732/     2E5 :                     
(1)  733/     2E5 :                     .exit:
(1)  734/     2E5 : CF                  		rst	8
(1)  735/     2E6 : CD F9 03            		call	.inc_cpatt		; * Increment patt pos
(1)  736/     2E9 : FD 75 0A            		ld	(iy+trk_Read),l		; Update READ location
(1)  737/     2EC : FD 74 0B            		ld	(iy+((trk_Read+1))),h
(1)  738/     2EF : 18 03               		jr	.decrow_e
(1)  739/     2F1 :                     .decrow:
(1)  740/     2F1 : FD 35 11            		dec	(iy+trk_rowPause)	; Decrement row-pause timer
(1)  741/     2F4 :                     .decrow_e:
(1)  742/     2F4 : 0B                  		dec	bc			; Decrement rowcount
(1)  743/     2F5 : FD 71 0C            		ld	(iy+trk_Rows),c		; Write last row to memory
(1)  744/     2F8 : FD 70 0D            		ld	(iy+(trk_Rows+1)),b
(1)  745/     2FB : C9                  		ret	; Exit.
(1)  746/     2FC :                     
(1)  747/     2FC :                     ; --------------------------------
(1)  748/     2FC :                     ; New note request
(1)  749/     2FC :                     ;
(1)  750/     2FC :                     ; a - %1tcccccc
(1)  751/     2FC :                     ;   | t - type setup
(1)  752/     2FC :                     ;   | c - channel
(1)  753/     2FC :                     ; --------------------------------
(1)  754/     2FC :                     
(1)  755/     2FC :                     .has_note:
(1)  756/     2FC : CF                  		rst	8
(1)  757/     2FD : C5                  		push	bc			; Save rowcount
(1)  758/     2FE : 4F                  		ld	c,a			; Copy patt byte control to c
(1)  759/     2FF : CD F9 03            		call	.inc_cpatt		; * Increment patt pos
(1)  760/     302 : E5                  		push	hl			; Save hl patt pos
(1)  761/     303 : FD E5               		push	iy
(1)  762/     305 : E1                  		pop	hl
(1)  763/     306 : DD 21 00 1E         		ld	ix,trkChnls		; ix - Channels buffer
(1)  764/     30A : 11 26 00            		ld	de,trk_ChnIndx		; <-- this also clears d
(1)  765/     30D : CF                  		rst	8
(1)  766/     30E : 19                  		add	hl,de			; hl - Track's index points buffer
(1)  767/     30F : 79                  		ld	a,c			; Get patt note position
(1)  768/     310 : E6 1F               		and	00011111b		; Filter index bits
(1)  769/     312 : 5F                  		ld	e,a			; Save as e
(1)  770/     313 : 19                  		add	hl,de			; Increment more by this pos
(1)  771/     314 : 7E                  		ld	a,(hl)			; Check if this index is occupied.
(1)  772/     315 : B7                  		or	a
(1)  773/     316 : 28 0A               		jr	z,.srch_new		; If == 0, new index
(1)  774/     318 : E6 1F               		and	00011111b		; If already used, read that channel
(1)  775/     31A : 87                  		add	a,a
(1)  776/     31B : 87                  		add	a,a
(1)  777/     31C : 87                  		add	a,a
(1)  778/     31D : 5F                  		ld	e,a
(1)  779/     31E : DD 19               		add	ix,de
(1)  780/     320 : 18 2B               		jr	.cont_chnl
(1)  781/     322 :                     
(1)  782/     322 :                     ; Make NEW channel
(1)  783/     322 :                     ; ix - channel list start
(1)  784/     322 :                     .srch_new:
(1)  785/     322 : CF                  		rst	8
(1)  786/     323 : 06 1F               		ld	b,MAX_TRKCHN-1	; Max channels to check - 1
(1)  787/     325 : 16 00               		ld	d,0		; Reset out index
(1)  788/     327 :                     .next_chnl:
(1)  789/     327 : DD 7E 00            		ld	a,(ix)		; Read chnl_Flags
(1)  790/     32A : B7                  		or	a		; If plus, track channel is free
(1)  791/     32B : F2 42 03            		jp	p,.chnl_free
(1)  792/     32E : DD 23               		inc	ix		; Search next channel, increment by 8
(1)  793/     330 : DD 23               		inc	ix
(1)  794/     332 : DD 23               		inc	ix
(1)  795/     334 : DD 23               		inc	ix
(1)  796/     336 : CF                  		rst	8
(1)  797/     337 : DD 23               		inc	ix
(1)  798/     339 : DD 23               		inc	ix
(1)  799/     33B : DD 23               		inc	ix
(1)  800/     33D : DD 23               		inc	ix
(1)  801/     33F : 14                  		inc	d		; Increment out index
(1)  802/     340 : 10 E5               		djnz	.next_chnl
(1)  803/     342 :                     .chnl_free:
(1)  804/     342 : CF                  		rst	8
(1)  805/     343 : 7A                  		ld	a,d			; Read index we got
(1)  806/     344 : E6 1F               		and	00011111b		; Filter bits
(1)  807/     346 : F6 80               		or	10000000b		; + set as used
(1)  808/     348 : 77                  		ld	(hl),a			; Write index slot
(1)  809/     349 : DD CB 00 FE         		set	7,(ix+chnl_Flags)	; Enable channel on the list
(1)  810/     34D :                     .cont_chnl:
(1)  811/     34D : E1                  		pop	hl			; Recover patt pos
(1)  812/     34E :                     	; ix - current channel
(1)  813/     34E : CF                  		rst	8
(1)  814/     34F : DD 46 07            		ld	b,(ix+chnl_Type)	; b - current TYPE byte
(1)  815/     352 : CB 71               		bit	6,c			; This byte has new TYPE setting?
(1)  816/     354 : 28 08               		jr	z,.old_type
(1)  817/     356 : 7E                  		ld	a,(hl)
(1)  818/     357 : DD 77 07            		ld	(ix+chnl_Type),a	; Update TYPE byte
(1)  819/     35A : 47                  		ld	b,a			; Set to b
(1)  820/     35B : CD F9 03            		call	.inc_cpatt		; Next patt pos
(1)  821/     35E :                     .old_type:
(1)  822/     35E :                     	; b - evinEVIN
(1)  823/     35E :                     	;     E-effect/V-volume/I-instrument/N-note
(1)  824/     35E :                     	;     evin: byte is already stored on track-channel buffer
(1)  825/     35E :                     	;     EVIN: next byte(s) contain a new value. for eff:2 bytes
(1)  826/     35E :                     
(1)  827/     35E : CF                  		rst	8
(1)  828/     35F : CB 40               		bit	0,b			; New NOTE?
(1)  829/     361 : 28 07               		jr	z,.no_note
(1)  830/     363 : 7E                  		ld	a,(hl)			; Set NOTE and increment patt
(1)  831/     364 : DD 77 02            		ld	(ix+chnl_Note),a
(1)  832/     367 : CD F9 03            		call	.inc_cpatt
(1)  833/     36A :                     .no_note:
(1)  834/     36A : CB 48               		bit	1,b			; New INS?
(1)  835/     36C : 28 07               		jr	z,.no_ins
(1)  836/     36E : 7E                  		ld	a,(hl)			; Set INS and increment patt
(1)  837/     36F : DD 77 03            		ld	(ix+chnl_Ins),a
(1)  838/     372 : CD F9 03            		call	.inc_cpatt
(1)  839/     375 :                     .no_ins:
(1)  840/     375 : CB 50               		bit	2,b			; New VOL?
(1)  841/     377 : 28 07               		jr	z,.no_vol
(1)  842/     379 : 7E                  		ld	a,(hl)			; Set VOL and increment patt
(1)  843/     37A : DD 77 04            		ld	(ix+chnl_Vol),a
(1)  844/     37D : CD F9 03            		call	.inc_cpatt
(1)  845/     380 :                     .no_vol:
(1)  846/     380 : CB 58               		bit	3,b			; New EFFECT?
(1)  847/     382 : 28 0F               		jr	z,.no_eff
(1)  848/     384 : 7E                  		ld	a,(hl)			; Set EFFECT ID, incr patt
(1)  849/     385 : DD 77 05            		ld	(ix+chnl_EffId),a
(1)  850/     388 : CD F9 03            		call	.inc_cpatt
(1)  851/     38B : CF                  		rst	8
(1)  852/     38C : 7E                  		ld	a,(hl)			; Set EFFECT ARG, incr patt
(1)  853/     38D : DD 77 06            		ld	(ix+chnl_EffArg),a
(1)  854/     390 : CD F9 03            		call	.inc_cpatt
(1)  855/     393 :                     .no_eff:
(1)  856/     393 : 78                  		ld	a,b			; Merge the Impulse evin bits into main EVIN bits
(1)  857/     394 : 0F                  		rrca
(1)  858/     395 : 0F                  		rrca
(1)  859/     396 : 0F                  		rrca
(1)  860/     397 : 0F                  		rrca
(1)  861/     398 : E6 0F               		and	00001111b		; Filter bits
(1)  862/     39A : 4F                  		ld	c,a			; Save as c
(1)  863/     39B : 78                  		ld	a,b
(1)  864/     39C : E6 0F               		and	00001111b		; Filter again
(1)  865/     39E : B1                  		or	c			; Merge c with a
(1)  866/     39F : CF                  		rst	8
(1)  867/     3A0 : 4F                  		ld	c,a			; Save bit flags
(1)  868/     3A1 : DD 7E 00            		ld	a,(ix+chnl_Flags)
(1)  869/     3A4 : B1                  		or	c
(1)  870/     3A5 : DD 77 00            		ld	(ix+chnl_Flags),a
(1)  871/     3A8 :                     	; Check for effects that affect
(1)  872/     3A8 :                     	; internal playback:
(1)  873/     3A8 :                     	; Jump, Ticks, etc.
(1)  874/     3A8 : C1                  		pop	bc		; Restore rowcount
(1)  875/     3A9 : DD 7E 00            		ld	a,(ix+chnl_Flags)
(1)  876/     3AC : E6 08               		and	1000b		; ONLY check for the EFFECT bit
(1)  877/     3AE : CA D5 02            		jp	z,.next_note
(1)  878/     3B1 : DD 7E 05            		ld	a,(ix+chnl_EffId)
(1)  879/     3B4 : B7                  		or	a		; 00h = invalid effect
(1)  880/     3B5 : CA D5 02            		jp	z,.next_note
(1)  881/     3B8 : FE 01               		cp	1		; Effect A: Tick set
(1)  882/     3BA : 28 0B               		jr	z,.eff_A
(1)  883/     3BC : FE 02               		cp	2		; Effect B: Position Jump
(1)  884/     3BE : 28 18               		jr	z,.eff_B
(1)  885/     3C0 : FE 03               		cp	3		; Effect C: Pattern break
(1)  886/     3C2 : 28 32               		jr	z,.eff_C	; <-- JUMP and exit.
(1)  887/     3C4 : C3 D5 02            		jp	.next_note
(1)  888/     3C7 :                     
(1)  889/     3C7 :                     ; ----------------------------------------
(1)  890/     3C7 :                     ; Effect A: Set ticks
(1)  891/     3C7 :                     ; ----------------------------------------
(1)  892/     3C7 :                     
(1)  893/     3C7 :                     .eff_A:
(1)  894/     3C7 : CF                  		rst	8
(1)  895/     3C8 : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - ticks number
(1)  896/     3CB : FD 73 03            		ld	(iy+trk_TickSet),e	; set for both Set and Timer.
(1)  897/     3CE : FD 73 12            		ld	(iy+trk_tickTmr),e
(1)  898/     3D1 : DD CB 00 9E         		res	3,(ix+chnl_Flags)	; <-- Clear EFFECT bit
(1)  899/     3D5 : C3 D5 02            		jp	.next_note
(1)  900/     3D8 :                     
(1)  901/     3D8 :                     ; ----------------------------------------
(1)  902/     3D8 :                     ; Effect B: jump to a new block
(1)  903/     3D8 :                     ; ----------------------------------------
(1)  904/     3D8 :                     
(1)  905/     3D8 :                     .eff_B:
(1)  906/     3D8 : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - Block SLOT to jump
(1)  907/     3DB : FD 73 13            		ld 	(iy+trk_currBlk),e
(1)  908/     3DE : CF                  		rst	8
(1)  909/     3DF : FD 36 11 00         		ld	(iy+trk_rowPause),0	; Reset rowpause
(1)  910/     3E3 : DD CB 00 9E         		res	3,(ix+chnl_Flags)	; <-- Clear EFFECT bit
(1)  911/     3E7 : FD CB 00 EE         		set	5,(iy+trk_Status)	; set fill-from-effect flag on exit
(1)  912/     3EB : 3E 80               		ld	a,80h
(1)  913/     3ED : FD 77 16            		ld	(iy+trk_BankHeads),a
(1)  914/     3F0 : FD 77 17            		ld	(iy+trk_BankBlk),a
(1)  915/     3F3 : C3 D5 02            		jp	.next_note
(1)  916/     3F6 :                     
(1)  917/     3F6 :                     ; ----------------------------------------
(1)  918/     3F6 :                     ; Effect C: Pattern break/exit
(1)  919/     3F6 :                     ;
(1)  920/     3F6 :                     ; Only used on SFX, arguments ignored.
(1)  921/     3F6 :                     ; ----------------------------------------
(1)  922/     3F6 :                     
(1)  923/     3F6 :                     .eff_C:
(1)  924/     3F6 : C3 0A 05            		jp	.track_end
(1)  925/     3F9 :                     
(1)  926/     3F9 :                     ; ----------------------------------------
(1)  927/     3F9 :                     ; Increment the current patt position
(1)  928/     3F9 :                     ; and recieve more data
(1)  929/     3F9 :                     ;
(1)  930/     3F9 :                     ; Breaks:
(1)  931/     3F9 :                     ; a,e
(1)  932/     3F9 :                     ; ----------------------------------------
(1)  933/     3F9 :                     
(1)  934/     3F9 :                     .inc_cpatt:
(1)  935/     3F9 : FD 5E 08            		ld	e,(iy+trk_Cach)	; Read curret cache LSB
(1)  936/     3FC : 7D                  		ld	a,l
(1)  937/     3FD : 3C                  		inc	a
(1)  938/     3FE : E6 1F               		and	MAX_RCACH-1
(1)  939/     400 : FE 1E               		cp	MAX_RCACH-2	; RAN OUT of bytes?
(1)  940/     402 : 30 03               		jr	nc,.ran_out
(1)  941/     404 : B3                  		or	e
(1)  942/     405 : 6F                  		ld	l,a
(1)  943/     406 : C9                  		ret
(1)  944/     407 :                     .ran_out:
(1)  945/     407 : FD 6E 08            		ld	l,(iy+trk_Cach)
(1)  946/     40A : E5                  		push	hl
(1)  947/     40B : C5                  		push	bc
(1)  948/     40C : 06 00               		ld	b,0
(1)  949/     40E : 4F                  		ld	c,a
(1)  950/     40F : CF                  		rst	8
(1)  951/     410 : 5D                  		ld	e,l
(1)  952/     411 : 54                  		ld	d,h
(1)  953/     412 : FD 6E 1A            		ld	l,(iy+trk_RomPattRead)
(1)  954/     415 : FD 66 1B            		ld	h,(iy+(trk_RomPattRead+1))
(1)  955/     418 : FD 7E 1C            		ld	a,(iy+(trk_RomPattRead+2))
(1)  956/     41B : 09                  		add	hl,bc
(1)  957/     41C : CE 00               		adc	a,0
(1)  958/     41E : FD 75 1A            		ld	(iy+trk_RomPattRead),l
(1)  959/     421 : FD 74 1B            		ld	(iy+(trk_RomPattRead+1)),h
(1)  960/     424 : CF                  		rst	8
(1)  961/     425 : FD 77 1C            		ld	(iy+(trk_RomPattRead+2)),a
(1)  962/     428 : 01 20 00            		ld	bc,MAX_RCACH
(1)  963/     42B : CD 81 11            		call	transferRom	; *** ROM ACCESS ***
(1)  964/     42E : C1                  		pop	bc
(1)  965/     42F : E1                  		pop	hl
(1)  966/     430 : C9                  		ret
(1)  967/     431 :                     
(1)  968/     431 :                     ; ----------------------------------------
(1)  969/     431 :                     ; Set track pattern by trk_currBlk
(1)  970/     431 :                     ; ----------------------------------------
(1)  971/     431 :                     
(1)  972/     431 :                     .set_track:
(1)  973/     431 : FD 5E 04            		ld	e,(iy+trk_Blocks)
(1)  974/     434 : FD 56 05            		ld	d,(iy+(trk_Blocks+1))
(1)  975/     437 : FD 7E 13            		ld	a,(iy+trk_currBlk)
(1)  976/     43A : 4F                  		ld	c,a
(1)  977/     43B : C5                  		push	bc
(1)  978/     43C : D5                  		push	de
(1)  979/     43D : CF                  		rst	8
(1)  980/     43E : 0F                  		rrca
(1)  981/     43F : 0F                  		rrca
(1)  982/     440 : 0F                  		rrca
(1)  983/     441 : E6 1F               		and	00011111b
(1)  984/     443 : FD 4E 17            		ld	c,(iy+trk_BankBlk)	; c - current block bank
(1)  985/     446 : CB 79               		bit	7,c			; First time?
(1)  986/     448 : 20 03               		jr	nz,.first_blk
(1)  987/     44A : B9                  		cp	c			; SAME instrument data?
(1)  988/     44B : 28 1E               		jr	z,.keep_blk
(1)  989/     44D :                     .first_blk:
(1)  990/     44D : CF                  		rst	8
(1)  991/     44E : FD 77 17            		ld	(iy+trk_BankBlk),a	; Save inst number
(1)  992/     451 : 07                  		rlca
(1)  993/     452 : 07                  		rlca
(1)  994/     453 : 07                  		rlca
(1)  995/     454 : 06 00               		ld	b,0
(1)  996/     456 : 4F                  		ld	c,a
(1)  997/     457 : FD 6E 23            		ld	l,(iy+trk_RomBlks)	; Transfer FIRST patt
(1)  998/     45A : FD 66 24            		ld	h,(iy+(trk_RomBlks+1))	; packet
(1)  999/     45D : FD 7E 25            		ld	a,(iy+(trk_RomBlks+2))
(1) 1000/     460 : E7                  		rst	20h
(1) 1001/     461 : CF                  		rst	8
(1) 1002/     462 : 09                  		add	hl,bc
(1) 1003/     463 : CE 00               		adc	a,0
(1) 1004/     465 : 01 08 00            		ld	bc,8			; 8 blocks stored
(1) 1005/     468 : CD 81 11            		call	transferRom		; ** ROM ACCESS **
(1) 1006/     46B :                     .keep_blk:
(1) 1007/     46B : E1                  		pop	hl
(1) 1008/     46C : C1                  		pop	bc
(1) 1009/     46D : 79                  		ld	a,c
(1) 1010/     46E : E6 07               		and	00000111b
(1) 1011/     470 : CF                  		rst	8
(1) 1012/     471 : 16 00               		ld	d,0
(1) 1013/     473 : 5F                  		ld	e,a
(1) 1014/     474 : 19                  		add	hl,de
(1) 1015/     475 : 7E                  		ld	a,(hl)			; Read byte
(1) 1016/     476 : FE FF               		cp	-1			; If block == -1, end track
(1) 1017/     478 : CA 0A 05            		jp	z,.track_end
(1) 1018/     47B : CF                  		rst	8
(1) 1019/     47C :                     
(1) 1020/     47C : FD 5E 06            		ld	e,(iy+trk_Patt)		; Read CACHE patt heads
(1) 1021/     47F : FD 56 07            		ld	d,(iy+(trk_Patt+1))
(1) 1022/     482 : 4F                  		ld	c,a
(1) 1023/     483 : D5                  		push	de
(1) 1024/     484 : C5                  		push	bc
(1) 1025/     485 : CF                  		rst	8
(1) 1026/     486 : 0F                  		rrca
(1) 1027/     487 : 0F                  		rrca
(1) 1028/     488 : 0F                  		rrca
(1) 1029/     489 : E6 1F               		and	00011111b
(1) 1030/     48B : FD 4E 16            		ld	c,(iy+trk_BankHeads)	; c - current intrument loaded
(1) 1031/     48E : CB 79               		bit	7,c			; First time?
(1) 1032/     490 : 20 03               		jr	nz,.first_head
(1) 1033/     492 : B9                  		cp	c			; SAME instrument data?
(1) 1034/     493 : 28 26               		jr	z,.keep_it
(1) 1035/     495 :                     .first_head:
(1) 1036/     495 : CF                  		rst	8
(1) 1037/     496 : FD 77 16            		ld	(iy+trk_BankHeads),a	; Save inst number
(1) 1038/     499 : 47                  		ld	b,a
(1) 1039/     49A : 0F                  		rrca
(1) 1040/     49B : 0F                  		rrca
(1) 1041/     49C : 0F                  		rrca
(1) 1042/     49D : E6 E0               		and	11100000b
(1) 1043/     49F : 4F                  		ld	c,a
(1) 1044/     4A0 : 78                  		ld	a,b
(1) 1045/     4A1 : 0F                  		rrca
(1) 1046/     4A2 : 0F                  		rrca
(1) 1047/     4A3 : 0F                  		rrca
(1) 1048/     4A4 : E6 03               		and	00000011b
(1) 1049/     4A6 : 47                  		ld	b,a
(1) 1050/     4A7 :                     
(1) 1051/     4A7 : FD 6E 1D            		ld	l,(iy+trk_RomPatt)	; Transfer FIRST patt
(1) 1052/     4AA : FD 66 1E            		ld	h,(iy+(trk_RomPatt+1))	; packet
(1) 1053/     4AD : FD 7E 1F            		ld	a,(iy+(trk_RomPatt+2))
(1) 1054/     4B0 : E7                  		rst	20h
(1) 1055/     4B1 : CF                  		rst	8
(1) 1056/     4B2 : 09                  		add	hl,bc
(1) 1057/     4B3 : CE 00               		adc	a,0
(1) 1058/     4B5 : 01 20 00            		ld	bc,4*8			; 8 heads stored
(1) 1059/     4B8 : CD 81 11            		call	transferRom		; ** ROM ACCESS **
(1) 1060/     4BB :                     .keep_it:
(1) 1061/     4BB : C1                  		pop	bc
(1) 1062/     4BC : 79                  		ld	a,c
(1) 1063/     4BD : E6 07               		and	00000111b
(1) 1064/     4BF : 87                  		add	a,a
(1) 1065/     4C0 : 87                  		add	a,a
(1) 1066/     4C1 : 57                  		ld	d,a
(1) 1067/     4C2 : CF                  		rst	8
(1) 1068/     4C3 : E6 FC               		and	11111100b
(1) 1069/     4C5 : 5F                  		ld	e,a
(1) 1070/     4C6 : 7A                  		ld	a,d
(1) 1071/     4C7 : E6 03               		and	00000011b
(1) 1072/     4C9 : 57                  		ld	d,a
(1) 1073/     4CA : E1                  		pop	hl
(1) 1074/     4CB : 19                  		add	hl,de
(1) 1075/     4CC : 5E                  		ld	e,(hl)			; de - Pos
(1) 1076/     4CD : 23                  		inc	hl
(1) 1077/     4CE : CF                  		rst	8
(1) 1078/     4CF : 56                  		ld	d,(hl)
(1) 1079/     4D0 : 23                  		inc	hl
(1) 1080/     4D1 : 7E                  		ld	a,(hl)
(1) 1081/     4D2 : 23                  		inc	hl
(1) 1082/     4D3 : FD 77 0C            		ld	(iy+trk_Rows),a
(1) 1083/     4D6 : 7E                  		ld	a,(hl)
(1) 1084/     4D7 : 23                  		inc	hl
(1) 1085/     4D8 : FD 77 0D            		ld	(iy+(trk_Rows+1)),a
(1) 1086/     4DB : FD 6E 1D            		ld	l,(iy+trk_RomPatt)	; Transfer FIRST patt
(1) 1087/     4DE : FD 66 1E            		ld	h,(iy+(trk_RomPatt+1))	; packet
(1) 1088/     4E1 : CF                  		rst	8
(1) 1089/     4E2 : FD 7E 1F            		ld	a,(iy+(trk_RomPatt+2))
(1) 1090/     4E5 : 19                  		add	hl,de
(1) 1091/     4E6 : CE 00               		adc	a,0
(1) 1092/     4E8 : FD 75 1A            		ld	(iy+trk_RomPattRead),l
(1) 1093/     4EB : FD 74 1B            		ld	(iy+(trk_RomPattRead+1)),h
(1) 1094/     4EE : FD 77 1C            		ld	(iy+(trk_RomPattRead+2)),a
(1) 1095/     4F1 : FD 5E 08            		ld	e,(iy+trk_Cach)
(1) 1096/     4F4 : FD 56 09            		ld	d,(iy+(trk_Cach+1))
(1) 1097/     4F7 :                     
(1) 1098/     4F7 : FD 73 0A            		ld	(iy+trk_Read),e
(1) 1099/     4FA : FD 72 0B            		ld	(iy+(trk_Read+1)),d
(1) 1100/     4FD : 0E 20               		ld	c,MAX_RCACH
(1) 1101/     4FF : FD 36 10 00         		ld	(iy+trk_cachHalf),0
(1) 1102/     503 : FD 36 11 00         		ld	(iy+trk_rowPause),0
(1) 1103/     507 : C3 81 11            		jp	transferRom		; ** ROM access **
(1) 1104/     50A :                     
(1) 1105/     50A :                     ; ----------------------------------------
(1) 1106/     50A :                     ; **JUMP ONLY**
(1) 1107/     50A :                     .track_end:
(1) 1108/     50A : CD B6 05            		call	track_out
(1) 1109/     50D : CF                  		rst	8
(1) 1110/     50E : AF                  		xor	a
(1) 1111/     50F : FD 77 11            		ld	(iy+trk_rowPause),a
(1) 1112/     512 : FD 77 12            		ld	(iy+trk_tickTmr),a
(1) 1113/     515 : FD 77 00            		ld	(iy+trk_Status),a	; Disable track slot
(1) 1114/     518 : FD 36 15 80         		ld	(iy+trk_BankIns),80h
(1) 1115/     51C : C9                  		ret
(1) 1116/     51D :                     
(1) 1117/     51D :                     ; ----------------------------------------
(1) 1118/     51D :                     ; Track refill
(1) 1119/     51D :                     ; ----------------------------------------
(1) 1120/     51D :                     
(1) 1121/     51D :                     .effect_fill:
(1) 1122/     51D : FD CB 00 AE         		res	5,(iy+trk_Status)	; Reset refill-from-effect flag
(1) 1123/     521 : C3 31 04            		jp	.set_track
(1) 1124/     524 :                     
(1) 1125/     524 :                     ; ----------------------------------------
(1) 1126/     524 :                     ; Track Start/Reset
(1) 1127/     524 :                     ;
(1) 1128/     524 :                     ; iy - Track buffer
(1) 1129/     524 :                     ; ----------------------------------------
(1) 1130/     524 :                     
(1) 1131/     524 :                     .first_fill:
(1) 1132/     524 : FD CB 00 B6         		res	6,(iy+trk_Status)	; Clear FILL flag
(1) 1133/     528 : CD B6 05            		call	track_out
(1) 1134/     52B : FD 36 12 01         		ld	(iy+trk_tickTmr),1	; <-- Reset tick timer
(1) 1135/     52F : FD 7E 02            		ld	a,(iy+trk_SetBlk)	; Make start block as current block
(1) 1136/     532 : CF                  		rst	8
(1) 1137/     533 : FD 77 13            		ld 	(iy+trk_currBlk),a	; block
(1) 1138/     536 : 21 91 1B            		ld	hl,trkInfoCach		; Read MASTER Nikona track list
(1) 1139/     539 : FD 7E 14            		ld	a,(iy+trk_Priority)	; Pick slot
(1) 1140/     53C : 3D                  		dec	a
(1) 1141/     53D : 87                  		add	a,a
(1) 1142/     53E : 87                  		add	a,a
(1) 1143/     53F : 16 00               		ld	d,0
(1) 1144/     541 : 5F                  		ld	e,a
(1) 1145/     542 : 19                  		add	hl,de
(1) 1146/     543 : 7E                  		ld	a,(hl)
(1) 1147/     544 : 23                  		inc	hl
(1) 1148/     545 : CB 7F               		bit	7,a
(1) 1149/     547 : 28 04               		jr	z,.no_glbl
(1) 1150/     549 : FD CB 00 C6         		set	0,(iy+trk_Status)	; Enable GLOBAL sub-beats
(1) 1151/     54D :                     .no_glbl:
(1) 1152/     54D : CF                  		rst	8
(1) 1153/     54E : E6 7F               		and	01111111b
(1) 1154/     550 : FD 77 03            		ld	(iy+trk_TickSet),a
(1) 1155/     553 : 7E                  		ld	a,(hl)			; Read and temporally
(1) 1156/     554 : 23                  		inc	hl			; grab it's pointers
(1) 1157/     555 : 4E                  		ld	c,(hl)
(1) 1158/     556 : 23                  		inc	hl
(1) 1159/     557 : 6E                  		ld	l,(hl)
(1) 1160/     558 : 61                  		ld	h,c
(1) 1161/     559 : 11 A4 1F            		ld	de,headerOut
(1) 1162/     55C : 0E 0E               		ld	c,0Eh
(1) 1163/     55E : CD 81 11            		call	transferRom		; ** ROM access **
(1) 1164/     561 : DD 21 B1 1F         		ld	ix,headerOut_e-1	; Read temp header BACKWARDS
(1) 1165/     565 : CF                  		rst	8
(1) 1166/     566 :                     
(1) 1167/     566 :                     	; headerOut:
(1) 1168/     566 :                     	; dc.w numof_chnls
(1) 1169/     566 :                     	; dc.l .blk,.pat,.ins
(1) 1170/     566 :                     	; *** READING BACKWARDS
(1) 1171/     566 : CD A3 05            		call	.grab_rhead		; Instrument data
(1) 1172/     569 : FD 75 20            		ld	(iy+trk_RomInst),l
(1) 1173/     56C : FD 74 21            		ld	(iy+(trk_RomInst+1)),h
(1) 1174/     56F : FD 70 22            		ld	(iy+(trk_RomInst+2)),b
(1) 1175/     572 : FD 36 15 80         		ld	(iy+trk_BankIns),80h	; Reset instrument banking
(1) 1176/     576 : E7                  		rst	20h
(1) 1177/     577 : CF                  		rst	8
(1) 1178/     578 : CD A3 05            		call	.grab_rhead		; Pattern heads
(1) 1179/     57B : FD 75 1D            		ld	(iy+trk_RomPatt),l	; Save ROM patt base
(1) 1180/     57E : FD 74 1E            		ld	(iy+(trk_RomPatt+1)),h
(1) 1181/     581 : FD 70 1F            		ld	(iy+(trk_RomPatt+2)),b
(1) 1182/     584 : FD 36 16 80         		ld	(iy+trk_BankHeads),80h	; Reset pattern banking
(1) 1183/     588 : CF                  		rst	8
(1) 1184/     589 : CD A3 05            		call	.grab_rhead		; Block data
(1) 1185/     58C : FD 75 23            		ld	(iy+trk_RomBlks),l	; Save ROM patt base
(1) 1186/     58F : FD 74 24            		ld	(iy+(trk_RomBlks+1)),h
(1) 1187/     592 : FD 70 25            		ld	(iy+(trk_RomBlks+2)),b
(1) 1188/     595 : FD 36 17 80         		ld	(iy+trk_BankBlk),80h	; Reset pattern banking
(1) 1189/     599 : CF                  		rst	8
(1) 1190/     59A : DD 7E 00            		ld	a,(ix)			; dc.w numof_chnls
(1) 1191/     59D : FD 77 18            		ld	(iy+trk_MaxChnl),a
(1) 1192/     5A0 : C3 31 04            		jp	.set_track
(1) 1193/     5A3 :                     
(1) 1194/     5A3 :                     ; Read 68K pointer:
(1) 1195/     5A3 :                     ; hl - 00xxxx
(1) 1196/     5A3 :                     ;  b - xx0000
(1) 1197/     5A3 :                     .grab_rhead:
(1) 1198/     5A3 : DD 6E 00            		ld	l,(ix)
(1) 1199/     5A6 : DD 2B               		dec	ix
(1) 1200/     5A8 : DD 66 00            		ld	h,(ix)
(1) 1201/     5AB : CF                  		rst	8
(1) 1202/     5AC : DD 2B               		dec	ix
(1) 1203/     5AE : DD 46 00            		ld	b,(ix)
(1) 1204/     5B1 : DD 2B               		dec	ix
(1) 1205/     5B3 :                     ; 		ld	c,(ix)
(1) 1206/     5B3 : DD 2B               		dec	ix
(1) 1207/     5B5 : C9                  		ret
(1) 1208/     5B6 :                     
(1) 1209/     5B6 :                     ; ----------------------------------------
(1) 1210/     5B6 :                     ; Reset tracker channels
(1) 1211/     5B6 :                     ;
(1) 1212/     5B6 :                     ; iy - Track buffer
(1) 1213/     5B6 :                     ;
(1) 1214/     5B6 :                     ; Breaks:
(1) 1215/     5B6 :                     ; ix
(1) 1216/     5B6 :                     ; ----------------------------------------
(1) 1217/     5B6 :                     
(1) 1218/     5B6 :                     ; ----------------------------------------
(1) 1219/     5B6 :                     ; Reset tracker channels
(1) 1220/     5B6 :                     ;
(1) 1221/     5B6 :                     ; iy - Track buffer
(1) 1222/     5B6 :                     ;
(1) 1223/     5B6 :                     ; Breaks:
(1) 1224/     5B6 :                     ; b ,de,hl,ix
(1) 1225/     5B6 :                     ; ----------------------------------------
(1) 1226/     5B6 :                     
(1) 1227/     5B6 :                     track_out:
(1) 1228/     5B6 : FD E5               		push	iy
(1) 1229/     5B8 : E1                  		pop	hl
(1) 1230/     5B9 : DD 21 00 1E         		ld	ix,trkChnls
(1) 1231/     5BD : CF                  		rst	8
(1) 1232/     5BE : 11 26 00            		ld	de,trk_ChnIndx
(1) 1233/     5C1 : 19                  		add	hl,de
(1) 1234/     5C2 : 06 1A               		ld	b,MAX_TRKINDX
(1) 1235/     5C4 :                     .indx_del:
(1) 1236/     5C4 : 7E                  		ld	a,(hl)
(1) 1237/     5C5 : B7                  		or	a
(1) 1238/     5C6 : 28 2A               		jr	z,.nothin
(1) 1239/     5C8 : CF                  		rst	8
(1) 1240/     5C9 : DD E5               		push	ix
(1) 1241/     5CB : E6 1F               		and	00011111b
(1) 1242/     5CD : 87                  		add	a,a
(1) 1243/     5CE : 87                  		add	a,a
(1) 1244/     5CF : 87                  		add	a,a
(1) 1245/     5D0 : 5F                  		ld	e,a
(1) 1246/     5D1 : CF                  		rst	8
(1) 1247/     5D2 : DD 19               		add	ix,de
(1) 1248/     5D4 : AF                  		xor	a
(1) 1249/     5D5 : DD 36 02 FE         		ld	(ix+chnl_Note),-2
(1) 1250/     5D9 : DD 36 00 01         		ld	(ix+chnl_Flags),1
(1) 1251/     5DD : DD 36 04 40         		ld	(ix+chnl_Vol),64
(1) 1252/     5E1 : DD 77 05            		ld	(ix+chnl_EffId),a
(1) 1253/     5E4 : CF                  		rst	8
(1) 1254/     5E5 : DD 77 06            		ld	(ix+chnl_EffArg),a
(1) 1255/     5E8 : DD 77 03            		ld	(ix+chnl_Ins),a
(1) 1256/     5EB : DD 77 07            		ld	(ix+chnl_Type),a
(1) 1257/     5EE : DD E1               		pop	ix
(1) 1258/     5F0 : 77                  		ld	(hl),a
(1) 1259/     5F1 : 00                  		nop
(1) 1260/     5F2 :                     .nothin:
(1) 1261/     5F2 : 23                  		inc	hl
(1) 1262/     5F3 : 10 CF               		djnz	.indx_del
(1) 1263/     5F5 : 3E 01               		ld	a,1
(1) 1264/     5F7 : 32 87 1F            		ld	(marsUpd),a
(1) 1265/     5FA : C9                  		ret
(1) 1266/     5FB :                     
(1) 1267/     5FB :                     ; ----------------------------------------
(1) 1268/     5FB :                     ; Load tracklist from ROM
(1) 1269/     5FB :                     ;
(1) 1270/     5FB :                     ; a - SeqID
(1) 1271/     5FB :                     ; ----------------------------------------
(1) 1272/     5FB :                     
(1) 1273/     5FB :                     get_RomTrcks:
(1) 1274/     5FB : E5                  		push	hl
(1) 1275/     5FC : 87                  		add	a,a
(1) 1276/     5FD : 87                  		add	a,a
(1) 1277/     5FE : 16 00               		ld	d,0
(1) 1278/     600 : 5F                  		ld	e,a
(1) 1279/     601 : 21 1C 00            		ld	hl,gemaMstrListPos
(1) 1280/     604 : 23                  		inc	hl
(1) 1281/     605 : 7E                  		ld	a,(hl)		; $00xx0000
(1) 1282/     606 : 23                  		inc	hl
(1) 1283/     607 : 4E                  		ld	c,(hl)		; $0000xx00
(1) 1284/     608 : 23                  		inc	hl
(1) 1285/     609 : 6E                  		ld	l,(hl)		; $000000xx
(1) 1286/     60A : CF                  		rst	8
(1) 1287/     60B : 61                  		ld	h,c
(1) 1288/     60C : 19                  		add	hl,de
(1) 1289/     60D : CE 00               		adc	a,0
(1) 1290/     60F : EB                  		ex	hl,de
(1) 1291/     610 : 21 91 1B            		ld	hl,trkInfoCach
(1) 1292/     613 : DD 4E 14            		ld	c,(ix+trk_Priority)
(1) 1293/     616 : 0D                  		dec	c
(1) 1294/     617 : CB 21               		sla	c		; * 4
(1) 1295/     619 : CB 21               		sla	c
(1) 1296/     61B : 06 00               		ld	b,0
(1) 1297/     61D : 09                  		add	hl,bc
(1) 1298/     61E : EB                  		ex	hl,de
(1) 1299/     61F : 01 04 00            		ld	bc,4
(1) 1300/     622 : CD 81 11            		call	transferRom	; *** ROM ACCESS ***
(1) 1301/     625 : E1                  		pop	hl
(1) 1302/     626 : C9                  		ret
(1) 1303/     627 :                     
(1) 1304/     627 :                     ; ============================================================
(1) 1305/     627 :                     ; --------------------------------------------------------
(1) 1306/     627 :                     ; Process track channels to the sound chips
(1) 1307/     627 :                     ; --------------------------------------------------------
(1) 1308/     627 :                     
(1) 1309/     627 :                     set_chips:
(1) 1310/     627 : E7                  		rst	20h			; Refill wave
(1) 1311/     628 : CD 60 11            		call	get_tick
(1) 1312/     62B : FD 21 2B 16         		ld	iy,nikona_BuffList
(1) 1313/     62F :                     .trk_buffrs:
(1) 1314/     62F : FD 7E 00            		ld	a,(iy)
(1) 1315/     632 : FE FF               		cp	-1
(1) 1316/     634 : 28 0F               		jr	z,proc_chips
(1) 1317/     636 : CF                  		rst	8
(1) 1318/     637 : FD E5               		push	iy
(1) 1319/     639 : CD 6E 06            		call	tblbuff_read
(1) 1320/     63C : FD E1               		pop	iy
(1) 1321/     63E : 11 08 00            		ld	de,MAX_BUFFNTRY
(1) 1322/     641 : FD 19               		add	iy,de
(1) 1323/     643 : 18 EA               		jr	.trk_buffrs
(1) 1324/     645 :                     proc_chips:
(1) 1325/     645 : E7                  		rst	20h			; Refill wave
(1) 1326/     646 : CF                  		rst	8
(1) 1327/     647 : FD 21 7B 19         		ld	iy,tblPSGN		; PSG Noise
(1) 1328/     64B : CD 6D 08            		call	dtbl_singl
(1) 1329/     64E : CF                  		rst	8
(1) 1330/     64F : FD 21 31 19         		ld	iy,tblPSG		; PSG Squares
(1) 1331/     653 : CD 57 08            		call	dtbl_multi
(1) 1332/     656 : CF                  		rst	8
(1) 1333/     657 : FD 21 93 19         		ld	iy,tblFM		; FM/FM3/DAC
(1) 1334/     65B : CD 57 08            		call	dtbl_multi
(1) 1335/     65E : CF                  		rst	8
(1) 1336/     65F : FD 21 25 1A         		ld	iy,tblPCM		; SEGA CD PCM
(1) 1337/     663 : CD 57 08            		call	dtbl_multi
(1) 1338/     666 : CF                  		rst	8
(1) 1339/     667 : FD 21 E7 1A         		ld	iy,tblPWM		; 32X PWM
(1) 1340/     66B : C3 57 08            		jp	dtbl_multi
(1) 1341/     66E :                     
(1) 1342/     66E :                     ; ----------------------------------------
(1) 1343/     66E :                     ; Read current track
(1) 1344/     66E :                     ;
(1) 1345/     66E :                     ; iy - Buffer
(1) 1346/     66E :                     tblbuff_read:
(1) 1347/     66E : FD 6E 00            		ld	l,(iy)
(1) 1348/     671 : FD 66 01            		ld	h,(iy+1)
(1) 1349/     674 : CD 60 11            		call	get_tick
(1) 1350/     677 : CF                  		rst	8
(1) 1351/     678 : E5                  		push	hl
(1) 1352/     679 : FD E1               		pop	iy
(1) 1353/     67B : FD 46 00            		ld	b,(iy+trk_Status)	; bit7: Track active?
(1) 1354/     67E : CB 78               		bit	7,b
(1) 1355/     680 : C8                  		ret	z
(1) 1356/     681 : 78                  		ld	a,b			; trk_Status == -1?
(1) 1357/     682 : FE FF               		cp	-1
(1) 1358/     684 : C2 8E 06            		jp	nz,.track_cont
(1) 1359/     687 : CD B6 05            		call	track_out
(1) 1360/     68A : FD 36 00 00         		ld	(iy+trk_Status),0
(1) 1361/     68E :                     .track_cont:
(1) 1362/     68E : E7                  		rst	20h
(1) 1363/     68F : FD E5               		push	iy
(1) 1364/     691 : E1                  		pop	hl
(1) 1365/     692 : CF                  		rst	8
(1) 1366/     693 : DD 21 00 1E         		ld	ix,trkChnls
(1) 1367/     697 : 11 26 00            		ld	de,trk_ChnIndx
(1) 1368/     69A : 19                  		add	hl,de
(1) 1369/     69B : FD 7E 18            		ld	a,(iy+trk_MaxChnl)	; If zero, read ALL indexes (lazy mode)
(1) 1370/     69E : B7                  		or	a
(1) 1371/     69F : 20 02               		jr	nz,.valid
(1) 1372/     6A1 : 06 1A               		ld	b,MAX_TRKINDX
(1) 1373/     6A3 :                     .valid:
(1) 1374/     6A3 : CF                  		rst	8
(1) 1375/     6A4 : 47                  		ld	b,a
(1) 1376/     6A5 :                     .next_indx:
(1) 1377/     6A5 : 7E                  		ld	a,(hl)			; Read index
(1) 1378/     6A6 : B7                  		or	a
(1) 1379/     6A7 : 20 0B               		jr	nz,.has_indx		; non-zero: valid
(1) 1380/     6A9 : C5                  		push	bc			; waste CPU to
(1) 1381/     6AA : 06 04               		ld	b,4			; ** wave sync
(1) 1382/     6AC : 00                  		nop
(1) 1383/     6AD : 00                  		nop
(1) 1384/     6AE : CF                  		rst	8
(1) 1385/     6AF : 10 FE               		djnz	$
(1) 1386/     6B1 : C1                  		pop	bc
(1) 1387/     6B2 : 18 1C               		jr	.no_indx
(1) 1388/     6B4 :                     .has_indx:
(1) 1389/     6B4 : E6 1F               		and	00011111b
(1) 1390/     6B6 : 87                  		add	a,a
(1) 1391/     6B7 : 87                  		add	a,a
(1) 1392/     6B8 : 87                  		add	a,a
(1) 1393/     6B9 : CF                  		rst	8
(1) 1394/     6BA : 16 00               		ld	d,0
(1) 1395/     6BC : 5F                  		ld	e,a
(1) 1396/     6BD : C5                  		push	bc
(1) 1397/     6BE : E5                  		push	hl
(1) 1398/     6BF : DD E5               		push	ix
(1) 1399/     6C1 : DD 19               		add	ix,de
(1) 1400/     6C3 : DD 7E 00            		ld	a,(ix)		; Read evin
(1) 1401/     6C6 : E6 0F               		and	00001111b
(1) 1402/     6C8 : C4 D8 06            		call	nz,.do_chip	; Call if non-zero
(1) 1403/     6CB : CF                  		rst	8
(1) 1404/     6CC : DD E1               		pop	ix
(1) 1405/     6CE : E1                  		pop	hl
(1) 1406/     6CF : C1                  		pop	bc
(1) 1407/     6D0 :                     .no_indx:
(1) 1408/     6D0 : 23                  		inc	hl
(1) 1409/     6D1 : 10 D2               		djnz	.next_indx
(1) 1410/     6D3 : FD CB 00 9E         		res	3,(iy+trk_Status)	; RESET Volume update bit
(1) 1411/     6D7 : C9                  		ret
(1) 1412/     6D8 :                     
(1) 1413/     6D8 :                     ; ----------------------------------------
(1) 1414/     6D8 :                     ; iy - Track buffer
(1) 1415/     6D8 :                     ; ix - Current channel
(1) 1416/     6D8 :                     
(1) 1417/     6D8 :                     .do_chip:
(1) 1418/     6D8 : DD 7E 03            		ld	a,(ix+chnl_Ins)		; Check intrument type FIRST
(1) 1419/     6DB : B7                  		or	a
(1) 1420/     6DC : C8                  		ret	z			; If 0 == stop
(1) 1421/     6DD : CF                  		rst	8
(1) 1422/     6DE : 3D                  		dec	a			; inst-1
(1) 1423/     6DF : E6 7F               		and	01111111b
(1) 1424/     6E1 : 21 9D 1B            		ld	hl,instListOut		; temporal storage for instrument
(1) 1425/     6E4 : 16 00               		ld	d,0
(1) 1426/     6E6 : FD 5E 14            		ld	e,(iy+trk_Priority)
(1) 1427/     6E9 : 1D                  		dec	e			; -1
(1) 1428/     6EA : CB 03               		rlc	e
(1) 1429/     6EC : CB 03               		rlc	e
(1) 1430/     6EE : CB 03               		rlc	e
(1) 1431/     6F0 : 19                  		add	hl,de
(1) 1432/     6F1 : FD 4E 15            		ld	c,(iy+trk_BankIns)	; c - current intrument loaded
(1) 1433/     6F4 : CB 79               		bit	7,c			; First time?
(1) 1434/     6F6 : 20 03               		jr	nz,.first_ins
(1) 1435/     6F8 : B9                  		cp	c			; SAME instrument data?
(1) 1436/     6F9 : 28 24               		jr	z,.keep_it
(1) 1437/     6FB :                     .first_ins:
(1) 1438/     6FB : E5                  		push	hl
(1) 1439/     6FC : FD 77 15            		ld	(iy+trk_BankIns),a	; Save inst number
(1) 1440/     6FF : 07                  		rlca
(1) 1441/     700 : 07                  		rlca
(1) 1442/     701 : 07                  		rlca
(1) 1443/     702 : 47                  		ld	b,a
(1) 1444/     703 : E6 F8               		and	11111000b
(1) 1445/     705 : 4F                  		ld	c,a
(1) 1446/     706 : 78                  		ld	a,b
(1) 1447/     707 : E6 07               		and	00000111b
(1) 1448/     709 : CF                  		rst	8
(1) 1449/     70A : 47                  		ld	b,a
(1) 1450/     70B : EB                  		ex	hl,de
(1) 1451/     70C : FD 6E 20            		ld	l,(iy+trk_RomInst)
(1) 1452/     70F : FD 66 21            		ld	h,(iy+(trk_RomInst+1))
(1) 1453/     712 : FD 7E 22            		ld	a,(iy+(trk_RomInst+2))
(1) 1454/     715 : 09                  		add	hl,bc
(1) 1455/     716 : CE 00               		adc	a,0
(1) 1456/     718 : 01 08 00            		ld	bc,8			; 8 bytes
(1) 1457/     71B : CD 81 11            		call	transferRom		; ** ROM access **
(1) 1458/     71E : E1                  		pop	hl
(1) 1459/     71F :                     .keep_it:
(1) 1460/     71F : E5                  		push	hl			; <-- save hl
(1) 1461/     720 : CD 3D 07            		call	.grab_link
(1) 1462/     723 : D1                  		pop	de			; --> recover as de
(1) 1463/     724 :                     	; hl - current table
(1) 1464/     724 :                     	; de - instrument data
(1) 1465/     724 : FE FF               		cp	-1			; Found any link?
(1) 1466/     726 : C8                  		ret	z
(1) 1467/     727 : 23                  		inc	hl			; Skip link
(1) 1468/     728 : 23                  		inc	hl
(1) 1469/     729 : FD 7E 14            		ld	a,(iy+trk_Priority)
(1) 1470/     72C : 77                  		ld	(hl),a			; Write priority level
(1) 1471/     72D : 23                  		inc	hl
(1) 1472/     72E : FD 7E 0E            		ld	a,(iy+trk_VolMaster)
(1) 1473/     731 : 77                  		ld	(hl),a			; Write current MASTER volume
(1) 1474/     732 : 01 0D 00            		ld	bc,10h-3		; Move to instr data
(1) 1475/     735 : 09                  		add	hl,bc
(1) 1476/     736 : EB                  		ex	hl,de			; <-- swap for ldir
(1) 1477/     737 : 01 08 00            		ld	bc,8
(1) 1478/     73A : ED B0               		ldir				; COPYPASTE instr data from temporal
(1) 1479/     73C : C9                  		ret
(1) 1480/     73D :                     
(1) 1481/     73D :                     ; ----------------------------------------
(1) 1482/     73D :                     ; Search for a linked channel on the
(1) 1483/     73D :                     ; chip table
(1) 1484/     73D :                     ;
(1) 1485/     73D :                     ; Input:
(1) 1486/     73D :                     ; iy - Track buffer
(1) 1487/     73D :                     ; ix - Current channel
(1) 1488/     73D :                     ; hl - Intrument data
(1) 1489/     73D :                     ;
(1) 1490/     73D :                     ; Returns:
(1) 1491/     73D :                     ; hl - Channel table to use
(1) 1492/     73D :                     ;  a - Return value:
(1) 1493/     73D :                     ;       0 - Found
(1) 1494/     73D :                     ;      -1 - Not found
(1) 1495/     73D :                     ; ----------------------------------------
(1) 1496/     73D :                     
(1) 1497/     73D :                     .grab_link:
(1) 1498/     73D : 7E                  		ld	a,(hl)			; Check INSTRUMENT type
(1) 1499/     73E : E6 F0               		and	11110000b		; Filter bits
(1) 1500/     740 : 5F                  		ld	e,a			; e - NEW chip
(1) 1501/     741 : DD 7E 01            		ld	a,(ix+chnl_Chip)	; a - our current chip
(1) 1502/     744 : E6 F0               		and	11110000b		; Filter bits too.
(1) 1503/     746 : 28 6A               		jr	z,.new_chip		; If 0: It's a NEW chip
(1) 1504/     748 : BB                  		cp 	e			; Same chip as NEW?
(1) 1505/     749 : 28 10               		jr	z,.srch_link		; then re-use the slot
(1) 1506/     74B : CF                  		rst	8
(1) 1507/     74C : 57                  		ld	d,a			; d - Chip to silence
(1) 1508/     74D : D5                  		push	de
(1) 1509/     74E : CD 5B 07            		call	.srch_link		; Search our link (first)
(1) 1510/     751 : D1                  		pop	de
(1) 1511/     752 : FE FF               		cp	-1
(1) 1512/     754 : C8                  		ret	z
(1) 1513/     755 : CF                  		rst	8
(1) 1514/     756 : CD 3C 08            		call	.reset_link
(1) 1515/     759 : 18 57               		jr	.new_chip
(1) 1516/     75B :                     
(1) 1517/     75B :                     ; ----------------------------------------
(1) 1518/     75B :                     ; ** RELINK **
(1) 1519/     75B :                     ; e - Our current chip
(1) 1520/     75B :                     .srch_link:
(1) 1521/     75B : CD 22 08            		call	.pick_tbl	; Pick chip table in hl
(1) 1522/     75E : DD E5               		push	ix		; copy ix to bc
(1) 1523/     760 : C1                  		pop	bc
(1) 1524/     761 : B7                  		or	a
(1) 1525/     762 : FA A2 07            		jp	m,.singl_link
(1) 1526/     765 :                     .srch_lloop:
(1) 1527/     765 : 7E                  		ld	a,(hl)		; Read LSB
(1) 1528/     766 : FE FF               		cp	-1		; If -1, return -1
(1) 1529/     768 : 28 45               		jr	z,.refill
(1) 1530/     76A : B9                  		cp	c
(1) 1531/     76B : 20 07               		jr	nz,.invldl
(1) 1532/     76D : CF                  		rst	8
(1) 1533/     76E : 23                  		inc	hl
(1) 1534/     76F : 7E                  		ld	a,(hl)
(1) 1535/     770 : 2B                  		dec	hl
(1) 1536/     771 : B8                  		cp	b
(1) 1537/     772 : 28 08               		jr	z,.reroll
(1) 1538/     774 :                     .invldl:
(1) 1539/     774 : D5                  		push	de
(1) 1540/     775 : 11 18 00            		ld	de,MAX_TBLSIZE
(1) 1541/     778 :                     ; 		rst	8
(1) 1542/     778 :                     ; 		nop	; wave sync *
(1) 1543/     778 : 19                  		add	hl,de
(1) 1544/     779 : D1                  		pop	de
(1) 1545/     77A : 18 E9               		jr	.srch_lloop
(1) 1546/     77C :                     .reroll:
(1) 1547/     77C :                     	; *** Special re-roll check ***
(1) 1548/     77C : E5                  		push	hl
(1) 1549/     77D : 01 04 00            		ld	bc,4		; <-- fake iy+04h
(1) 1550/     780 : 09                  		add	hl,bc
(1) 1551/     781 : CF                  		rst	8
(1) 1552/     782 : 4E                  		ld	c,(hl)		; c - ID
(1) 1553/     783 : E1                  		pop	hl
(1) 1554/     784 : 7B                  		ld	a,e
(1) 1555/     785 : FE 80               		cp	80h		; PSG?
(1) 1556/     787 : 28 02               		jr	z,.chk_psg
(1) 1557/     789 :                     ; 		cp	0A0h		; FM normal?
(1) 1558/     789 :                     ; 		jr	z,.chk_fm
(1) 1559/     789 : 18 22               		jr	.rnot_psg
(1) 1560/     78B :                     .chk_psg:
(1) 1561/     78B : 3A 83 1F            		ld	a,(psgHatMode)
(1) 1562/     78E : E6 03               		and	011b
(1) 1563/     790 : FE 03               		cp	011b
(1) 1564/     792 : 20 19               		jr	nz,.rnot_psg
(1) 1565/     794 : 79                  		ld	a,c
(1) 1566/     795 : FE 02               		cp	2
(1) 1567/     797 : 20 14               		jr	nz,.rnot_psg
(1) 1568/     799 : CF                  		rst	8
(1) 1569/     79A : 16 80               		ld	d,80h		; Set PSG silence
(1) 1570/     79C : CD 3C 08            		call	.reset_link	; on PSG3
(1) 1571/     79F : C3 1F 08            		jp	.set_asfull
(1) 1572/     7A2 :                     
(1) 1573/     7A2 :                     ; ----------------------
(1) 1574/     7A2 :                     ; PSGN/FM3/FM6
(1) 1575/     7A2 :                     .singl_link:
(1) 1576/     7A2 : 23                  		inc	hl			; Read MSB first
(1) 1577/     7A3 : 7E                  		ld	a,(hl)
(1) 1578/     7A4 : 2B                  		dec	hl
(1) 1579/     7A5 : CF                  		rst	8
(1) 1580/     7A6 : B8                  		cp	b			; MSB match?
(1) 1581/     7A7 : 20 06               		jr	nz,.refill
(1) 1582/     7A9 : 7E                  		ld	a,(hl)			; Read LSB
(1) 1583/     7AA : B9                  		cp	c
(1) 1584/     7AB : 20 02               		jr	nz,.refill
(1) 1585/     7AD :                     ; ----------------------
(1) 1586/     7AD :                     .rnot_psg:
(1) 1587/     7AD : AF                  		xor	a
(1) 1588/     7AE : C9                  		ret
(1) 1589/     7AF :                     ; ***
(1) 1590/     7AF :                     .refill:
(1) 1591/     7AF : DD 5E 01            		ld	e,(ix+chnl_Chip)
(1) 1592/     7B2 :                     
(1) 1593/     7B2 :                     ; ----------------------------------------
(1) 1594/     7B2 :                     ; *** NEW CHIP ***
(1) 1595/     7B2 :                     ; e - Chip to set
(1) 1596/     7B2 :                     .new_chip:
(1) 1597/     7B2 : 7B                  		ld	a,e			; Read NEW chip
(1) 1598/     7B3 : B7                  		or	a			; If non-minus, exit.
(1) 1599/     7B4 : F0                  		ret	p
(1) 1600/     7B5 : CD 22 08            		call	.pick_tbl
(1) 1601/     7B8 : CF                  		rst	8
(1) 1602/     7B9 : FD 4E 14            		ld	c,(iy+trk_Priority)	; c - OUR priority level
(1) 1603/     7BC : B7                  		or	a
(1) 1604/     7BD : FA 0D 08            		jp	m,.singl_free
(1) 1605/     7C0 : E5                  		push	hl			; Backup START table
(1) 1606/     7C1 :                     ; PASS 1
(1) 1607/     7C1 :                     .srch_free:
(1) 1608/     7C1 : 7E                  		ld	a,(hl)			; Read LSB
(1) 1609/     7C2 : FE FF               		cp	-1			; If -1, return -1
(1) 1610/     7C4 : 28 0B               		jr	z,.pass_2
(1) 1611/     7C6 : 23                  		inc	hl
(1) 1612/     7C7 : 46                  		ld	b,(hl)			; Read MSB
(1) 1613/     7C8 : 2B                  		dec	hl
(1) 1614/     7C9 :                     ; 		nop	; wave sync
(1) 1615/     7C9 :                     ; 		nop
(1) 1616/     7C9 :                     ; 		rst	8
(1) 1617/     7C9 :                     ; 		nop
(1) 1618/     7C9 :                     ; 		nop
(1) 1619/     7C9 : B0                  		or	b
(1) 1620/     7CA : 28 24               		jr	z,.new_link_z
(1) 1621/     7CC : CD E9 07            		call	.nextsrch_tbl
(1) 1622/     7CF : 18 F0               		jr	.srch_free
(1) 1623/     7D1 :                     
(1) 1624/     7D1 :                     ; PASS 2
(1) 1625/     7D1 :                     ; Rewrite mode
(1) 1626/     7D1 :                     .pass_2:
(1) 1627/     7D1 : E1                  		pop	hl
(1) 1628/     7D2 :                     .next_prio:
(1) 1629/     7D2 : 7E                  		ld	a,(hl)		; Read LSB
(1) 1630/     7D3 : FE FF               		cp	-1		; If -1, return -1
(1) 1631/     7D5 : C8                  		ret	z
(1) 1632/     7D6 : 23                  		inc	hl
(1) 1633/     7D7 : 23                  		inc	hl
(1) 1634/     7D8 : 7E                  		ld	a,(hl)		; Read priority
(1) 1635/     7D9 : 2B                  		dec	hl
(1) 1636/     7DA : 2B                  		dec	hl
(1) 1637/     7DB : B9                  		cp	c
(1) 1638/     7DC : 28 16               		jr	z,.new_link_o
(1) 1639/     7DE : 38 14               		jr	c,.new_link_o
(1) 1640/     7E0 : B7                  		or	a
(1) 1641/     7E1 : 28 11               		jr	z,.new_link_o
(1) 1642/     7E3 : CF                  		rst	8
(1) 1643/     7E4 : CD E9 07            		call	.nextsrch_tbl
(1) 1644/     7E7 : 18 E9               		jr	.next_prio
(1) 1645/     7E9 :                     .nextsrch_tbl:
(1) 1646/     7E9 : D5                  		push	de
(1) 1647/     7EA : 11 18 00            		ld	de,MAX_TBLSIZE
(1) 1648/     7ED : 19                  		add	hl,de
(1) 1649/     7EE : D1                  		pop	de
(1) 1650/     7EF :                     ; 		nop	; wave sync
(1) 1651/     7EF :                     ; 		nop
(1) 1652/     7EF :                     ; 		rst	8
(1) 1653/     7EF :                     ; 		nop
(1) 1654/     7EF :                     ; 		nop
(1) 1655/     7EF : C9                  		ret
(1) 1656/     7F0 :                     .new_link_z:
(1) 1657/     7F0 : 33                  		inc	sp		; skip backup
(1) 1658/     7F1 : 33                  		inc	sp
(1) 1659/     7F2 : 18 08               		jr	.new_link
(1) 1660/     7F4 :                     
(1) 1661/     7F4 :                     ; OVERWRITE link
(1) 1662/     7F4 :                     .new_link_o:
(1) 1663/     7F4 : E5                  		push	hl
(1) 1664/     7F5 : DD 56 01            		ld	d,(ix+chnl_Chip)
(1) 1665/     7F8 : CD 3C 08            		call	.reset_link
(1) 1666/     7FB : E1                  		pop	hl
(1) 1667/     7FC :                     ; NEW link
(1) 1668/     7FC :                     .new_link:
(1) 1669/     7FC : CF                  		rst	8
(1) 1670/     7FD : 23                  		inc	hl
(1) 1671/     7FE : 23                  		inc	hl
(1) 1672/     7FF :                     ; hl+2
(1) 1673/     7FF :                     .l_hiprio:
(1) 1674/     7FF : DD 73 01            		ld	(ix+chnl_Chip),e
(1) 1675/     802 : DD E5               		push	ix
(1) 1676/     804 : D1                  		pop	de
(1) 1677/     805 : 71                  		ld	(hl),c		; write priority
(1) 1678/     806 : 2B                  		dec	hl
(1) 1679/     807 : CF                  		rst	8
(1) 1680/     808 : 72                  		ld 	(hl),d		; MSB
(1) 1681/     809 : 2B                  		dec	hl
(1) 1682/     80A : 73                  		ld	(hl),e		; LSB
(1) 1683/     80B : AF                  		xor	a
(1) 1684/     80C : C9                  		ret
(1) 1685/     80D :                     
(1) 1686/     80D :                     ; Single slot
(1) 1687/     80D :                     ; c - priority
(1) 1688/     80D :                     ; e - chip
(1) 1689/     80D :                     .singl_free:
(1) 1690/     80D : 46                  		ld	b,(hl)
(1) 1691/     80E : 23                  		inc	hl
(1) 1692/     80F : 7E                  		ld	a,(hl)
(1) 1693/     810 : 23                  		inc	hl
(1) 1694/     811 : B0                  		or	b
(1) 1695/     812 : 28 EB               		jr	z,.l_hiprio
(1) 1696/     814 : CF                  		rst	8
(1) 1697/     815 : 7E                  		ld	a,(hl)
(1) 1698/     816 : B9                  		cp	c
(1) 1699/     817 : 28 E6               		jr	z,.l_hiprio
(1) 1700/     819 : 38 E4               		jr	c,.l_hiprio		; PRIORITY
(1) 1701/     81B : B7                  		or	a
(1) 1702/     81C : 28 E1               		jr	z,.l_hiprio
(1) 1703/     81E : CF                  		rst	8
(1) 1704/     81F :                     .set_asfull:
(1) 1705/     81F : 3E FF               		ld	a,-1			; Return -1, can't use instrument.
(1) 1706/     821 : C9                  		ret
(1) 1707/     822 :                     
(1) 1708/     822 :                     ; Pick chip table
(1) 1709/     822 :                     ; In:
(1) 1710/     822 :                     ;  a - ID
(1) 1711/     822 :                     ;
(1) 1712/     822 :                     ; Out:
(1) 1713/     822 :                     ;  a - Special bit + ID
(1) 1714/     822 :                     ;
(1) 1715/     822 :                     ; hl - Table
(1) 1716/     822 :                     .pick_tbl:
(1) 1717/     822 : D5                  		push	de
(1) 1718/     823 : 0F                  		rrca
(1) 1719/     824 : 0F                  		rrca
(1) 1720/     825 : 0F                  		rrca
(1) 1721/     826 : 0F                  		rrca
(1) 1722/     827 : E6 07               		and	00000111b
(1) 1723/     829 : 87                  		add	a,a
(1) 1724/     82A : 21 21 19            		ld	hl,tblList
(1) 1725/     82D : E5                  		push	hl
(1) 1726/     82E : 16 00               		ld	d,0
(1) 1727/     830 : 5F                  		ld	e,a
(1) 1728/     831 : 19                  		add	hl,de
(1) 1729/     832 : 5E                  		ld	e,(hl)
(1) 1730/     833 : 23                  		inc	hl
(1) 1731/     834 : 7E                  		ld	a,(hl)
(1) 1732/     835 : 57                  		ld	d,a
(1) 1733/     836 : CB BA               		res	7,d
(1) 1734/     838 : E1                  		pop	hl
(1) 1735/     839 : 19                  		add	hl,de
(1) 1736/     83A : D1                  		pop	de
(1) 1737/     83B : C9                  		ret
(1) 1738/     83C :                     
(1) 1739/     83C :                     ; d - Silence chip
(1) 1740/     83C :                     ;
(1) 1741/     83C :                     ; Uses:
(1) 1742/     83C :                     ; bc
(1) 1743/     83C :                     .reset_link:
(1) 1744/     83C : CF                  		rst	8
(1) 1745/     83D : 36 00               		ld	(hl),0			; Delete link
(1) 1746/     83F : 23                  		inc	hl
(1) 1747/     840 : 36 00               		ld	(hl),0
(1) 1748/     842 : 23                  		inc	hl
(1) 1749/     843 : 72                  		ld	(hl),d			; Set "silence" chip ID.
(1) 1750/     844 : 23                  		inc	hl
(1) 1751/     845 : 36 00               		ld	(hl),0			; Clear master volume
(1) 1752/     847 : 01 05 00            		ld	bc,8-3			; Go to 08h
(1) 1753/     84A : 09                  		add	hl,bc
(1) 1754/     84B : 06 04               		ld	b,8/2
(1) 1755/     84D :                     .clrfull:
(1) 1756/     84D : 36 00               		ld	(hl),0			; Reset settings 08-0Bh
(1) 1757/     84F : 23                  		inc	hl
(1) 1758/     850 : 36 00               		ld	(hl),0
(1) 1759/     852 : 23                  		inc	hl
(1) 1760/     853 : CF                  		rst	8
(1) 1761/     854 : 10 F7               		djnz	.clrfull
(1) 1762/     856 : C9                  		ret
(1) 1763/     857 :                     
(1) 1764/     857 :                     ; ============================================
(1) 1765/     857 :                     ; ----------------------------------------
(1) 1766/     857 :                     ; Process chip using it's table
(1) 1767/     857 :                     ;
(1) 1768/     857 :                     ; iy - table to read
(1) 1769/     857 :                     ; ----------------------------------------
(1) 1770/     857 :                     
(1) 1771/     857 :                     dtbl_multi:
(1) 1772/     857 : FD 7E 00            		ld	a,(iy)
(1) 1773/     85A : FE FF               		cp	-1
(1) 1774/     85C : C8                  		ret	z
(1) 1775/     85D : CD 6D 08            		call	dtbl_singl
(1) 1776/     860 : CF                  		rst	8
(1) 1777/     861 : 11 18 00            		ld	de,MAX_TBLSIZE
(1) 1778/     864 : FD 19               		add	iy,de
(1) 1779/     866 : 06 03               		ld	b,3	; wave sync ** IMPORTANT **
(1) 1780/     868 : 10 FE               		djnz	$
(1) 1781/     86A : CF                  		rst	8
(1) 1782/     86B : 18 EA               		jr	dtbl_multi
(1) 1783/     86D :                     dtbl_singl:
(1) 1784/     86D : FD 5E 00            		ld	e,(iy)		; Read link
(1) 1785/     870 : FD 56 01            		ld	d,(iy+1)
(1) 1786/     873 : 7A                  		ld	a,d		; If no-zero, active
(1) 1787/     874 : B3                  		or	e
(1) 1788/     875 : 20 60               		jr	nz,.linked
(1) 1789/     877 : FD 7E 02            		ld	a,(iy+2)	; Silence request?
(1) 1790/     87A : B7                  		or	a
(1) 1791/     87B : F0                  		ret	p		; Return if not.
(1) 1792/     87C : CF                  		rst	8
(1) 1793/     87D : FD 36 02 00         		ld	(iy+2),0	; Reset request on memory
(1) 1794/     881 :                     
(1) 1795/     881 :                     ; ----------------------------------------
(1) 1796/     881 :                     ; chip-silence request
(1) 1797/     881 :                     ; iy - Table
(1) 1798/     881 : E6 F0               		and	11110000b
(1) 1799/     883 : FE 80               		cp	80h
(1) 1800/     885 : 28 1E               		jr	z,.siln_psg
(1) 1801/     887 : FE 90               		cp	90h
(1) 1802/     889 : 28 16               		jr	z,.siln_psg_n
(1) 1803/     88B : FE A0               		cp	0A0h
(1) 1804/     88D : 28 42               		jr	z,.siln_fm
(1) 1805/     88F : FE B0               		cp	0B0h
(1) 1806/     891 : 28 3E               		jr	z,.siln_fm
(1) 1807/     893 : CF                  		rst	8
(1) 1808/     894 : FE C0               		cp	0C0h
(1) 1809/     896 : 28 36               		jr	z,.siln_dac
(1) 1810/     898 : FE D0               		cp	0D0h
(1) 1811/     89A : 28 10               		jr	z,.siln_pcm
(1) 1812/     89C : FE E0               		cp	0E0h
(1) 1813/     89E : 28 18               		jr	z,.siln_pwm
(1) 1814/     8A0 : C9                  		ret
(1) 1815/     8A1 :                     .siln_psg_n:
(1) 1816/     8A1 : AF                  		xor	a
(1) 1817/     8A2 : 32 83 1F            		ld	(psgHatMode),a
(1) 1818/     8A5 :                     .siln_psg:
(1) 1819/     8A5 : CF                  		rst	8
(1) 1820/     8A6 : DD 21 BD 16         		ld	ix,psgcom
(1) 1821/     8AA : 18 16               		jr	.rcyl_com
(1) 1822/     8AC :                     
(1) 1823/     8AC :                     ; --------------------------------
(1) 1824/     8AC :                     
(1) 1825/     8AC :                     .siln_pcm:
(1) 1826/     8AC : 3E 01               		ld	a,1
(1) 1827/     8AE : 32 88 1F            		ld	(mcdUpd),a
(1) 1828/     8B1 : CF                  		rst	8
(1) 1829/     8B2 : DD 21 45 16         		ld	ix,pcmcom
(1) 1830/     8B6 : 18 0A               		jr	.rcyl_com
(1) 1831/     8B8 :                     .siln_pwm:
(1) 1832/     8B8 : 3E 01               		ld	a,1
(1) 1833/     8BA : 32 87 1F            		ld	(marsUpd),a
(1) 1834/     8BD : CF                  		rst	8
(1) 1835/     8BE : DD 21 85 16         		ld	ix,pwmcom
(1) 1836/     8C2 :                     ; 		jr	.rcyl_com
(1) 1837/     8C2 :                     
(1) 1838/     8C2 :                     ; --------------------------------
(1) 1839/     8C2 :                     
(1) 1840/     8C2 :                     .rcyl_com:
(1) 1841/     8C2 : 06 00               		ld	b,0
(1) 1842/     8C4 : FD 4E 04            		ld	c,(iy+04h)
(1) 1843/     8C7 : DD 09               		add	ix,bc
(1) 1844/     8C9 : DD 36 00 04         		ld	(ix),100b	; key-cut
(1) 1845/     8CD : C9                  		ret
(1) 1846/     8CE :                     
(1) 1847/     8CE :                     ; --------------------------------
(1) 1848/     8CE :                     
(1) 1849/     8CE :                     .siln_dac:
(1) 1850/     8CE : CD CB 13            		call	dac_off
(1) 1851/     8D1 :                     .siln_fm:
(1) 1852/     8D1 : CD A4 0A            		call	.fm_keyoff
(1) 1853/     8D4 : C3 AC 0A            		jp	.fm_tloff
(1) 1854/     8D7 :                     
(1) 1855/     8D7 :                     ; ----------------------------------------
(1) 1856/     8D7 :                     ; Process channel now
(1) 1857/     8D7 :                     ; iy - Table
(1) 1858/     8D7 :                     ; ix - Tracker channel
(1) 1859/     8D7 :                     .linked:
(1) 1860/     8D7 : 1A                  		ld	a,(de)		; ** chnl_Flags
(1) 1861/     8D8 : 47                  		ld	b,a		; b - flags to check
(1) 1862/     8D9 : E6 0F               		and	00001111b	; evin flags?
(1) 1863/     8DB : C8                  		ret	z
(1) 1864/     8DC : 78                  		ld	a,b
(1) 1865/     8DD : E6 F0               		and	11110000b	; Keep OTHER bits
(1) 1866/     8DF : 12                  		ld	(de),a		; ** clear chnl_Flags
(1) 1867/     8E0 : D5                  		push	de
(1) 1868/     8E1 : DD E1               		pop	ix
(1) 1869/     8E3 : FD E5               		push	iy		; table+10h instrment data
(1) 1870/     8E5 : E1                  		pop	hl
(1) 1871/     8E6 : 11 10 00            		ld	de,10h
(1) 1872/     8E9 : 19                  		add	hl,de
(1) 1873/     8EA :                     	;  b - Flags LR00evin (Eff|Vol|Ins|Note)
(1) 1874/     8EA :                     	; iy - Our chip table
(1) 1875/     8EA :                     	; ix - Track channel
(1) 1876/     8EA :                     	; hl - Intrument data
(1) 1877/     8EA : CB 40               		bit	0,b		; Note
(1) 1878/     8EC : C4 CB 0F            		call	nz,.note
(1) 1879/     8EF : CB 48               		bit	1,b		; Intrument
(1) 1880/     8F1 : C4 1A 0E            		call	nz,.inst
(1) 1881/     8F4 : CF                  		rst	8
(1) 1882/     8F5 : CB 50               		bit	2,b		; Volume
(1) 1883/     8F7 : C4 11 0E            		call	nz,.volu
(1) 1884/     8FA : CB 58               		bit	3,b		; Effect
(1) 1885/     8FC : C4 0F 0D            		call	nz,.effc
(1) 1886/     8FF : 7E                  		ld	a,(hl)		; Read INS type
(1) 1887/     900 : E6 70               		and	01110000b	; Filter bits
(1) 1888/     902 : 0F                  		rrca
(1) 1889/     903 : 0F                  		rrca
(1) 1890/     904 : 0F                  		rrca
(1) 1891/     905 : CF                  		rst	8
(1) 1892/     906 : 16 00               		ld	d,0
(1) 1893/     908 : 5F                  		ld	e,a
(1) 1894/     909 : 21 12 09            		ld	hl,.mk_list
(1) 1895/     90C : 19                  		add	hl,de
(1) 1896/     90D : 7E                  		ld	a,(hl)
(1) 1897/     90E : 23                  		inc	hl
(1) 1898/     90F : 66                  		ld	h,(hl)
(1) 1899/     910 : 6F                  		ld	l,a
(1) 1900/     911 : E9                  		jp	(hl)
(1) 1901/     912 :                     ; --------------------------------
(1) 1902/     912 :                     .mk_list:
(1) 1903/     912 : 46 09               		dw .mk_psg
(1) 1904/     914 : 20 09               		dw .mk_psgn
(1) 1905/     916 : C4 09               		dw .mk_fm
(1) 1906/     918 : 3A 0A               		dw .mk_fmspc
(1) 1907/     91A : 8F 0B               		dw .mk_dac
(1) 1908/     91C : E6 0B               		dw .mk_pcm
(1) 1909/     91E : 6F 0C               		dw .mk_pwm
(1) 1910/     920 :                     
(1) 1911/     920 :                     ; --------------------------------
(1) 1912/     920 :                     ; PSGN
(1) 1913/     920 :                     ; --------------------------------
(1) 1914/     920 :                     
(1) 1915/     920 :                     .mk_psgn:
(1) 1916/     920 : CB 40               		bit	0,b
(1) 1917/     922 : 28 6A               		jr	z,.psg_keyon
(1) 1918/     924 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 1919/     927 : DD E5               		push	ix
(1) 1920/     929 : DD 21 C0 16         		ld	ix,psgcom+3	; Steal PSG3
(1) 1921/     92D : CF                  		rst	8
(1) 1922/     92E : FE FE               		cp	-2
(1) 1923/     930 : 28 7E               		jr	z,.kycut_psgn
(1) 1924/     932 : FE FF               		cp	-1
(1) 1925/     934 : 28 6D               		jr	z,.kyoff_psgn
(1) 1926/     936 : DD 36 00 01         		ld	(ix+COM),001b	; Key ON
(1) 1927/     93A : 5F                  		ld	e,a
(1) 1928/     93B : 3A 83 1F            		ld	a,(psgHatMode)	; Tone 3?
(1) 1929/     93E : E6 03               		and	011b
(1) 1930/     940 : FE 03               		cp	011b
(1) 1931/     942 : 20 4A               		jr	nz,.psg_keyon	; Normal
(1) 1932/     944 : 18 21               		jr	.from_psgn	; Tone 3
(1) 1933/     946 :                     
(1) 1934/     946 :                     ; --------------------------------
(1) 1935/     946 :                     ; PSG
(1) 1936/     946 :                     ; --------------------------------
(1) 1937/     946 :                     
(1) 1938/     946 :                     .mk_psg:
(1) 1939/     946 : CB 40               		bit	0,b
(1) 1940/     948 : 28 44               		jr	z,.psg_keyon
(1) 1941/     94A : CF                  		rst	8
(1) 1942/     94B : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 1943/     94E : DD E5               		push	ix
(1) 1944/     950 : DD 21 BD 16         		ld	ix,psgcom	; ix - psgcom
(1) 1945/     954 : FD 5E 04            		ld	e,(iy+04h)
(1) 1946/     957 : 16 00               		ld	d,0
(1) 1947/     959 : DD 19               		add	ix,de
(1) 1948/     95B : FE FE               		cp	-2
(1) 1949/     95D : 28 54               		jr	z,.kycut_psg
(1) 1950/     95F : FE FF               		cp	-1
(1) 1951/     961 : 28 43               		jr	z,.kyoff_psg
(1) 1952/     963 : DD 36 00 01         		ld	(ix+COM),001b	; Key ON
(1) 1953/     967 :                     .from_psgn:
(1) 1954/     967 : CF                  		rst	8
(1) 1955/     968 : 16 00               		ld	d,0		; de - note*2
(1) 1956/     96A : FD 5E 06            		ld	e,(iy+06h)	; Freq index
(1) 1957/     96D : 21 C3 14            		ld	hl,psgFreq_List-(36*2)
(1) 1958/     970 : 19                  		add	hl,de
(1) 1959/     971 : 7E                  		ld	a,(hl)
(1) 1960/     972 : 23                  		inc	hl
(1) 1961/     973 : 66                  		ld	h,(hl)
(1) 1962/     974 : 6F                  		ld	l,a
(1) 1963/     975 : FD 7E 07            		ld	a,(iy+07h)	; pitchbend
(1) 1964/     978 : 07                  		rlca			; << 3
(1) 1965/     979 : 07                  		rlca
(1) 1966/     97A : CF                  		rst	8
(1) 1967/     97B : 07                  		rlca
(1) 1968/     97C : 57                  		ld	d,a
(1) 1969/     97D : E6 F8               		and	11111000b
(1) 1970/     97F : 5F                  		ld	e,a
(1) 1971/     980 : 7A                  		ld	a,d
(1) 1972/     981 : E6 07               		and	00000111b
(1) 1973/     983 : 57                  		ld	d,a
(1) 1974/     984 : 37                  		scf
(1) 1975/     985 : 3F                  		ccf
(1) 1976/     986 : ED 52               		sbc	hl,de
(1) 1977/     988 : DD 75 1C            		ld	(ix+DTL),l
(1) 1978/     98B : DD 74 20            		ld	(ix+DTH),h
(1) 1979/     98E :                     .psg_keyon:
(1) 1980/     98E : FD 7E 08            		ld	a,(iy+08h)	; Set current Volume
(1) 1981/     991 : FD 96 03            		sub	a,(iy+03h)	; + MASTER vol
(1) 1982/     994 : ED 44               		neg	a
(1) 1983/     996 : CF                  		rst	8
(1) 1984/     997 : 87                  		add	a,a
(1) 1985/     998 : 87                  		add	a,a
(1) 1986/     999 : 30 02               		jr	nc,.vmuch
(1) 1987/     99B : 3E FF               		ld	a,-1
(1) 1988/     99D :                     .vmuch:
(1) 1989/     99D : DD 77 30            		ld	(ix+PVOL),a
(1) 1990/     9A0 : DD E1               		pop	ix
(1) 1991/     9A2 : C9                  		ret
(1) 1992/     9A3 :                     
(1) 1993/     9A3 :                     ; --------------------------------
(1) 1994/     9A3 :                     
(1) 1995/     9A3 :                     ; -1
(1) 1996/     9A3 :                     .kyoff_psgn:
(1) 1997/     9A3 : CD BD 09            		call	.kypsgn_hatoff
(1) 1998/     9A6 :                     .kyoff_psg:
(1) 1999/     9A6 : 0E 02               		ld	c,010b
(1) 2000/     9A8 : DD 71 00            		ld	(ix),c
(1) 2001/     9AB : DD E1               		pop	ix
(1) 2002/     9AD : C3 41 10            		jp	.chnl_ulnkoff
(1) 2003/     9B0 :                     ; -2
(1) 2004/     9B0 :                     .kycut_psgn:
(1) 2005/     9B0 : CD BD 09            		call	.kypsgn_hatoff
(1) 2006/     9B3 :                     .kycut_psg:
(1) 2007/     9B3 : 0E 04               		ld	c,100b
(1) 2008/     9B5 : DD 71 00            		ld	(ix),c
(1) 2009/     9B8 : DD E1               		pop	ix
(1) 2010/     9BA : C3 3B 10            		jp	.chnl_ulnkcut
(1) 2011/     9BD :                     .kypsgn_hatoff:
(1) 2012/     9BD : 3E 00               		ld	a,000b
(1) 2013/     9BF : 32 83 1F            		ld	(psgHatMode),a	; ** GLOBAL SETTING
(1) 2014/     9C2 : CF                  		rst	8
(1) 2015/     9C3 : C9                  		ret
(1) 2016/     9C4 :                     
(1) 2017/     9C4 :                     ; --------------------------------
(1) 2018/     9C4 :                     ; FM
(1) 2019/     9C4 :                     ; --------------------------------
(1) 2020/     9C4 :                     
(1) 2021/     9C4 :                     .mk_fm:
(1) 2022/     9C4 : CB 40               		bit	0,b		; NEW note?
(1) 2023/     9C6 : 28 5E               		jr	z,.mkfm_set
(1) 2024/     9C8 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 2025/     9CB : FE FE               		cp	-2
(1) 2026/     9CD : CA 9B 0A            		jp	z,.fm_cut
(1) 2027/     9D0 : FE FF               		cp	-1
(1) 2028/     9D2 : CA 95 0A            		jp	z,.fm_off
(1) 2029/     9D5 :                     ; 		call	.fm_tloff
(1) 2030/     9D5 : CF                  		rst	8
(1) 2031/     9D6 : FD 4E 04            		ld	c,(iy+04h)	; c - KeyID
(1) 2032/     9D9 : 79                  		ld	a,c
(1) 2033/     9DA : FE 06               		cp	6
(1) 2034/     9DC : 20 05               		jr	nz,.not_dac
(1) 2035/     9DE : CD CB 13            		call	dac_off
(1) 2036/     9E1 : 18 15               		jr	.not_dspc
(1) 2037/     9E3 :                     .not_dac:
(1) 2038/     9E3 :                     ; 		ld	a,c
(1) 2039/     9E3 : FE 02               		cp	2
(1) 2040/     9E5 : 20 11               		jr	nz,.not_dspc
(1) 2041/     9E7 : 3A 84 1F            		ld	a,(fmSpecial)
(1) 2042/     9EA : B7                  		or	a
(1) 2043/     9EB : 28 0B               		jr	z,.not_dspc
(1) 2044/     9ED : 11 00 27            		ld	de,2700h	; CH3 off
(1) 2045/     9F0 : CD A0 13            		call	fm_send_1
(1) 2046/     9F3 : 3E 00               		ld	a,0
(1) 2047/     9F5 : 32 84 1F            		ld	(fmSpecial),a
(1) 2048/     9F8 :                     .not_dspc:
(1) 2049/     9F8 : CD A4 0A            		call	.fm_keyoff
(1) 2050/     9FB : C5                  		push	bc
(1) 2051/     9FC : FD 7E 06            		ld	a,(iy+06h)
(1) 2052/     9FF : 47                  		ld	b,a
(1) 2053/     A00 : E6 1F               		and	00011111b
(1) 2054/     A02 : 5F                  		ld	e,a
(1) 2055/     A03 : 16 00               		ld	d,0
(1) 2056/     A05 : 21 F3 14            		ld	hl,fmFreq_List
(1) 2057/     A08 : 19                  		add	hl,de
(1) 2058/     A09 : 7E                  		ld	a,(hl)
(1) 2059/     A0A : CF                  		rst	8
(1) 2060/     A0B : 23                  		inc	hl
(1) 2061/     A0C : 66                  		ld	h,(hl)
(1) 2062/     A0D : 6F                  		ld	l,a
(1) 2063/     A0E : 78                  		ld	a,b
(1) 2064/     A0F : E6 E0               		and	11100000b
(1) 2065/     A11 : 0F                  		rrca
(1) 2066/     A12 : 0F                  		rrca
(1) 2067/     A13 : B4                  		or	h
(1) 2068/     A14 : 67                  		ld	h,a
(1) 2069/     A15 : FD 5E 07            		ld	e,(iy+07h)	; pitchbend
(1) 2070/     A18 : CF                  		rst	8
(1) 2071/     A19 : AF                  		xor	a		; Clear high
(1) 2072/     A1A : 3F                  		ccf			; Clear carry
(1) 2073/     A1B : CB 23               		sla	e		; << 2
(1) 2074/     A1D : CB 23               		sla	e
(1) 2075/     A1F : 9F                  		sbc	a,a		; -1 if carry is set
(1) 2076/     A20 : 57                  		ld	d,a
(1) 2077/     A21 : 19                  		add	hl,de
(1) 2078/     A22 : CD C3 0A            		call	.fm_setfreq
(1) 2079/     A25 : C1                  		pop	bc
(1) 2080/     A26 :                     
(1) 2081/     A26 :                     ; --------------------------------
(1) 2082/     A26 :                     
(1) 2083/     A26 :                     .mkfm_set:
(1) 2087/     A26 : CD 59 0B            		call	.fm_wrtalpan	; Panning and effects
(1) 2088/     A29 : CD DA 0A            		call	.fm_wrtlvol	; FM volume control
(1) 2089/     A2C : FD 7E 0F            		ld	a,(iy+0Fh)	; 0Fh - keys ***
(1) 2090/     A2F : E6 F0               		and	11110000b
(1) 2091/     A31 : B1                  		or	c		; Merge FM channel
(1) 2092/     A32 : 5F                  		ld	e,a
(1) 2093/     A33 : 16 28               		ld	d,28h
(1) 2094/     A35 : CD A0 13            		call	fm_send_1	; Set keys
(1) 2095/     A38 : CF                  		rst	8
(1) 2096/     A39 :                     .nofm_note:
(1) 2097/     A39 : C9                  		ret
(1) 2099/     A3A :                     
(1) 2100/     A3A :                     ; --------------------------------
(1) 2101/     A3A :                     ; FM3 special
(1) 2102/     A3A :                     ; --------------------------------
(1) 2103/     A3A :                     
(1) 2104/     A3A :                     .mk_fmspc:
(1) 2105/     A3A : CB 40               		bit	0,b		; NEW Note?
(1) 2106/     A3C : 28 E8               		jr	z,.mkfm_set
(1) 2107/     A3E : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 2108/     A41 : FE FE               		cp	-2
(1) 2109/     A43 : CA 9B 0A            		jp	z,.fm_cut
(1) 2110/     A46 : FE FF               		cp	-1
(1) 2111/     A48 : CA 95 0A            		jp	z,.fm_off
(1) 2112/     A4B : FD 4E 04            		ld	c,(iy+04h)	; c - KeyID (011b always)
(1) 2113/     A4E : CD A4 0A            		call	.fm_keyoff
(1) 2114/     A51 : 21 E5 14            		ld	hl,fmcach_list	; Read external freqs
(1) 2115/     A54 : FD 7E 04            		ld	a,(iy+04h)
(1) 2116/     A57 : E6 07               		and	0111b
(1) 2117/     A59 : 16 00               		ld	d,0
(1) 2118/     A5B : 87                  		add	a,a
(1) 2119/     A5C : 5F                  		ld	e,a
(1) 2120/     A5D : CF                  		rst	8
(1) 2121/     A5E : 19                  		add	hl,de
(1) 2122/     A5F : 7E                  		ld	a,(hl)
(1) 2123/     A60 : 23                  		inc	hl
(1) 2124/     A61 : 66                  		ld	h,(hl)
(1) 2125/     A62 : 6F                  		ld	l,a
(1) 2126/     A63 : CF                  		rst	8
(1) 2127/     A64 : 11 20 00            		ld	de,20h		; point to regs
(1) 2128/     A67 : 19                  		add	hl,de
(1) 2129/     A68 : DD E5               		push	ix
(1) 2130/     A6A : DD 21 8D 0A         		ld	ix,.spcreglist
(1) 2131/     A6E : 06 08               		ld	b,8
(1) 2132/     A70 :                     .wr_spc:
(1) 2133/     A70 : DD 56 00            		ld	d,(ix)
(1) 2134/     A73 : 5E                  		ld	e,(hl)
(1) 2135/     A74 : CD A0 13            		call	fm_send_1
(1) 2136/     A77 : CF                  		rst	8
(1) 2137/     A78 : 23                  		inc	hl
(1) 2138/     A79 : DD 23               		inc	ix
(1) 2139/     A7B : 10 F3               		djnz	.wr_spc
(1) 2140/     A7D : DD E1               		pop	ix
(1) 2141/     A7F : 11 40 27            		ld	de,2740h	; CH3 on
(1) 2142/     A82 : CD A0 13            		call	fm_send_1
(1) 2143/     A85 : 3E 01               		ld	a,1
(1) 2144/     A87 : 32 84 1F            		ld	(fmSpecial),a
(1) 2145/     A8A : C3 26 0A            		jp	.mkfm_set
(1) 2146/     A8D :                     .spcreglist:
(1) 2147/     A8D : AD A9               		db 0ADh,0A9h
(1) 2148/     A8F : AC A8               		db 0ACh,0A8h
(1) 2149/     A91 : AE AA               		db 0AEh,0AAh
(1) 2150/     A93 : A6 A2               		db 0A6h,0A2h
(1) 2151/     A95 :                     
(1) 2152/     A95 :                     ; ----------------------------------------
(1) 2153/     A95 :                     
(1) 2154/     A95 :                     .fm_off:
(1) 2155/     A95 : CD A4 0A            		call	.fm_keyoff
(1) 2156/     A98 : C3 41 10            		jp	.chnl_ulnkoff
(1) 2157/     A9B :                     .fm_cut:
(1) 2158/     A9B : CD A4 0A            		call	.fm_keyoff
(1) 2159/     A9E : CD AC 0A            		call	.fm_tloff
(1) 2160/     AA1 : C3 3B 10            		jp	.chnl_ulnkcut
(1) 2161/     AA4 :                     
(1) 2162/     AA4 :                     ; ----------------------------------------
(1) 2163/     AA4 :                     
(1) 2164/     AA4 :                     .fm_keyoff:
(1) 2165/     AA4 : 16 28               		ld	d,28h
(1) 2166/     AA6 : FD 5E 04            		ld	e,(iy+04h)
(1) 2167/     AA9 : C3 A0 13            		jp	fm_send_1
(1) 2168/     AAC :                     .fm_tloff:
(1) 2169/     AAC : 06 04               		ld	b,4
(1) 2170/     AAE : FD 4E 04            		ld	c,(iy+04h)
(1) 2171/     AB1 : 79                  		ld	a,c
(1) 2172/     AB2 : E6 03               		and	011b
(1) 2173/     AB4 : F6 40               		or	40h	; TL regs
(1) 2174/     AB6 : 1E 7F               		ld	e,7Fh
(1) 2175/     AB8 :                     .tl_down:
(1) 2176/     AB8 : 57                  		ld	d,a
(1) 2177/     AB9 :                     ; 		ld	e,7Fh
(1) 2178/     AB9 : CD 9C 13            		call	fm_autoreg
(1) 2179/     ABC : CF                  		rst	8
(1) 2180/     ABD : 7A                  		ld	a,d
(1) 2181/     ABE : C6 04               		add	a,4
(1) 2182/     AC0 : 10 F6               		djnz	.tl_down
(1) 2183/     AC2 : C9                  		ret
(1) 2184/     AC3 :                     ; c - KeyID
(1) 2185/     AC3 :                     .fm_setfreq:
(1) 2186/     AC3 : 79                  		ld	a,c
(1) 2187/     AC4 : E6 03               		and	011b
(1) 2188/     AC6 : F6 A4               		or	0A4h
(1) 2189/     AC8 : 57                  		ld	d,a
(1) 2190/     AC9 : 5C                  		ld	e,h
(1) 2191/     ACA : CF                  		rst	8
(1) 2192/     ACB : CD 9C 13            		call	fm_autoreg
(1) 2193/     ACE : 79                  		ld	a,c
(1) 2194/     ACF : E6 03               		and	011b
(1) 2195/     AD1 : F6 A0               		or	0A0h
(1) 2196/     AD3 : 57                  		ld	d,a
(1) 2197/     AD4 : 5D                  		ld	e,l
(1) 2198/     AD5 : CD 9C 13            		call	fm_autoreg
(1) 2199/     AD8 : CF                  		rst	8
(1) 2200/     AD9 : C9                  		ret
(1) 2201/     ADA :                     
(1) 2202/     ADA :                     ; --------------------------------
(1) 2203/     ADA :                     ; WRITE TL volume
(1) 2204/     ADA :                     
(1) 2205/     ADA :                     .fm_wrtlvol:
(1) 2206/     ADA : 21 E5 14            		ld	hl,fmcach_list
(1) 2207/     ADD : FD 7E 04            		ld	a,(iy+04h)
(1) 2208/     AE0 : E6 07               		and	0111b
(1) 2209/     AE2 : 16 00               		ld	d,0
(1) 2210/     AE4 : CF                  		rst	8
(1) 2211/     AE5 : 87                  		add	a,a
(1) 2212/     AE6 : 5F                  		ld	e,a
(1) 2213/     AE7 : 19                  		add	hl,de
(1) 2214/     AE8 : 7E                  		ld	a,(hl)
(1) 2215/     AE9 : 23                  		inc	hl
(1) 2216/     AEA : 66                  		ld	h,(hl)
(1) 2217/     AEB : 6F                  		ld	l,a
(1) 2218/     AEC : 23                  		inc	hl
(1) 2219/     AED : 23                  		inc	hl
(1) 2220/     AEE : 23                  		inc	hl
(1) 2221/     AEF : CF                  		rst	8
(1) 2222/     AF0 : 23                  		inc	hl		; Point to TL's
(1) 2223/     AF1 : FD 7E 04            		ld	a,(iy+04h)
(1) 2224/     AF4 : E6 03               		and	011b
(1) 2225/     AF6 : F6 40               		or	40h		; TL registers
(1) 2226/     AF8 : 57                  		ld	d,a
(1) 2227/     AF9 :                     ; d - 40h+
(1) 2228/     AF9 :                     ; hl - TL data
(1) 2229/     AF9 :                     ; .fm_wrtlvol:
(1) 2230/     AF9 : C5                  		push	bc
(1) 2231/     AFA : E5                  		push	hl
(1) 2232/     AFB : 21 51 0B            		ld	hl,.fm_cindx	; hl - jump carry list
(1) 2233/     AFE : FD 7E 0C            		ld	a,(iy+0Ch)	; Read 0B0h copy
(1) 2234/     B01 : E6 07               		and	0111b
(1) 2235/     B03 : 06 00               		ld	b,0
(1) 2236/     B05 : 4F                  		ld	c,a
(1) 2237/     B06 : 09                  		add	hl,bc
(1) 2238/     B07 : FD 7E 08            		ld	a,(iy+08h)	; Read current Volume
(1) 2239/     B0A : CF                  		rst	8
(1) 2240/     B0B : FD 96 03            		sub	a,(iy+03h)	; + MASTER vol
(1) 2241/     B0E :                     
(1) 2242/     B0E : 87                  		add	a,a		; * 2
(1) 2243/     B0F : 4F                  		ld	c,a		; c - Current Volume
(1) 2244/     B10 : 46                  		ld	b,(hl)		; b - Current jump-carry byte
(1) 2245/     B11 : E1                  		pop	hl
(1) 2246/     B12 : CB 08               		rrc	b		; OP1
(1) 2247/     B14 : DC 3F 0B            		call	c,.write_tl
(1) 2248/     B17 : 23                  		inc	hl
(1) 2249/     B18 : 14                  		inc	d
(1) 2250/     B19 : 14                  		inc	d
(1) 2251/     B1A : CF                  		rst	8
(1) 2252/     B1B : 14                  		inc	d
(1) 2253/     B1C : 14                  		inc	d
(1) 2254/     B1D : CB 08               		rrc	b		; OP2
(1) 2255/     B1F : DC 3F 0B            		call	c,.write_tl
(1) 2256/     B22 : 23                  		inc	hl
(1) 2257/     B23 : 14                  		inc	d
(1) 2258/     B24 : 14                  		inc	d
(1) 2259/     B25 : 14                  		inc	d
(1) 2260/     B26 : 14                  		inc	d
(1) 2261/     B27 : CB 08               		rrc	b		; OP3
(1) 2262/     B29 : DC 3F 0B            		call	c,.write_tl
(1) 2263/     B2C : 23                  		inc	hl
(1) 2264/     B2D : CF                  		rst	8
(1) 2265/     B2E : 14                  		inc	d
(1) 2266/     B2F : 14                  		inc	d
(1) 2267/     B30 : 14                  		inc	d
(1) 2268/     B31 : 14                  		inc	d
(1) 2269/     B32 : CB 08               		rrc	b		; OP4
(1) 2270/     B34 : DC 3F 0B            		call	c,.write_tl
(1) 2271/     B37 : 23                  		inc	hl
(1) 2272/     B38 : 14                  		inc	d
(1) 2273/     B39 : 14                  		inc	d
(1) 2274/     B3A : 14                  		inc	d
(1) 2275/     B3B : 14                  		inc	d
(1) 2276/     B3C : CF                  		rst	8
(1) 2277/     B3D : C1                  		pop	bc
(1) 2278/     B3E : C9                  		ret
(1) 2279/     B3F :                     .write_tl:
(1) 2280/     B3F : 7E                  		ld	a,(hl)
(1) 2281/     B40 : 91                  		sub	a,c		; reg - volume
(1) 2282/     B41 : F2 46 0B            		jp	p,.keep_tlmx
(1) 2283/     B44 : 3E 7F               		ld	a,7Fh		; <-- maximum TL
(1) 2284/     B46 :                     .keep_tlmx:
(1) 2285/     B46 : C5                  		push	bc
(1) 2286/     B47 : 5F                  		ld	e,a
(1) 2287/     B48 : FD 4E 04            		ld	c,(iy+04h)
(1) 2288/     B4B : CD 9C 13            		call	fm_autoreg
(1) 2289/     B4E : CF                  		rst	8
(1) 2290/     B4F : C1                  		pop	bc
(1) 2291/     B50 : C9                  		ret
(1) 2292/     B51 :                     ; Jump carry list
(1) 2293/     B51 :                     .fm_cindx:
(1) 2294/     B51 : 08                  		db 1000b
(1) 2295/     B52 : 08                  		db 1000b
(1) 2296/     B53 : 08                  		db 1000b
(1) 2297/     B54 : 08                  		db 1000b
(1) 2298/     B55 : 0C                  		db 1100b
(1) 2299/     B56 : 0E                  		db 1110b
(1) 2300/     B57 : 0E                  		db 1110b
(1) 2301/     B58 : 0F                  		db 1111b
(1) 2302/     B59 :                     ; c - KeyId
(1) 2303/     B59 :                     .fm_wrtalpan:
(1) 2304/     B59 : FD 7E 0C            		ld	a,(iy+0Ch)		; 0B0h algorithm
(1) 2305/     B5C : 5F                  		ld	e,a
(1) 2306/     B5D : 79                  		ld	a,c
(1) 2307/     B5E : E6 03               		and	011b
(1) 2308/     B60 : F6 B0               		or	0B0h
(1) 2309/     B62 : 57                  		ld	d,a
(1) 2310/     B63 : CD 9C 13            		call	fm_autoreg		; Write algorithm
(1) 2311/     B66 : CF                  		rst	8
(1) 2312/     B67 : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Read panning bits
(1) 2313/     B6A : 2F                  		cpl				; REVERSE bits
(1) 2314/     B6B : E6 30               		and	00110000b
(1) 2315/     B6D : 07                  		rlca				; << 2
(1) 2316/     B6E : 07                  		rlca
(1) 2317/     B6F : 5F                  		ld	e,a			; save as e
(1) 2318/     B70 : FD 7E 0D            		ld	a,(iy+0Dh)		; 0B4h %00aa0ppp
(1) 2319/     B73 : E6 3F               		and	00111111b
(1) 2320/     B75 : B3                  		or	e			; Merge panning
(1) 2321/     B76 : 5F                  		ld	e,a
(1) 2322/     B77 : 79                  		ld	a,c
(1) 2323/     B78 : CF                  		rst	8
(1) 2324/     B79 : E6 03               		and	011b
(1) 2325/     B7B : F6 B4               		or	0B4h
(1) 2326/     B7D : 57                  		ld	d,a
(1) 2327/     B7E : CD 9C 13            		call	fm_autoreg
(1) 2328/     B81 : FD 7E 0E            		ld	a,(iy+0Eh)		; Read LFO
(1) 2329/     B84 : CB 5F               		bit	3,a			; Intrument wants LFO?
(1) 2330/     B86 : 28 06               		jr	z,.no_lfo
(1) 2331/     B88 : 5F                  		ld	e,a
(1) 2332/     B89 : 16 22               		ld	d,22h
(1) 2333/     B8B : CD A0 13            		call	fm_send_1
(1) 2334/     B8E :                     .no_lfo:
(1) 2335/     B8E : C9                  		ret
(1) 2336/     B8F :                     
(1) 2337/     B8F :                     ; --------------------------------
(1) 2338/     B8F :                     ; DAC
(1) 2339/     B8F :                     ; --------------------------------
(1) 2340/     B8F :                     
(1) 2341/     B8F :                     .mk_dac:
(1) 2342/     B8F : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 2343/     B92 : FE FE               		cp	-2
(1) 2344/     B94 : CA B7 0B            		jp	z,.dac_cut
(1) 2345/     B97 : FE FF               		cp	-1
(1) 2346/     B99 : CA BD 0B            		jp	z,.dac_off
(1) 2347/     B9C : CD C0 0B            		call	.dac_pitch
(1) 2348/     B9F : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Read panning
(1) 2349/     BA2 : 2F                  		cpl				; REVERSE bits
(1) 2350/     BA3 : E6 30               		and	00110000b
(1) 2351/     BA5 : 07                  		rlca
(1) 2352/     BA6 : 07                  		rlca
(1) 2353/     BA7 : CF                  		rst	8
(1) 2354/     BA8 : 5F                  		ld	e,a
(1) 2355/     BA9 : 16 B6               		ld	d,0B6h			; Channel 6 panning
(1) 2356/     BAB : CD AB 13            		call	fm_send_2
(1) 2357/     BAE : CB 40               		bit	0,b			; Note update?
(1) 2358/     BB0 : C8                  		ret	z
(1) 2359/     BB1 : CD CB 13            		call	dac_off
(1) 2360/     BB4 : C3 E0 13            		jp	dac_play
(1) 2361/     BB7 :                     .dac_cut:
(1) 2362/     BB7 : CD CB 13            		call	dac_off
(1) 2363/     BBA : C3 41 10            		jp	.chnl_ulnkoff
(1) 2364/     BBD :                     .dac_off:
(1) 2365/     BBD : C3 3B 10            		jp	.chnl_ulnkcut
(1) 2366/     BC0 :                     .dac_pitch:
(1) 2367/     BC0 : 16 00               		ld	d,0		; Freq index
(1) 2368/     BC2 : FD 5E 06            		ld	e,(iy+06h)
(1) 2369/     BC5 : 21 23 15            		ld	hl,wavFreq_List-(2*36)
(1) 2370/     BC8 : 19                  		add	hl,de
(1) 2371/     BC9 : 7E                  		ld	a,(hl)
(1) 2372/     BCA : 23                  		inc	hl
(1) 2373/     BCB : 66                  		ld	h,(hl)
(1) 2374/     BCC : 6F                  		ld	l,a
(1) 2375/     BCD : FD 5E 07            		ld	e,(iy+07h)	; pitchbend
(1) 2376/     BD0 : CF                  		rst	8
(1) 2377/     BD1 : AF                  		xor	a		; Clear high
(1) 2378/     BD2 : 3F                  		ccf			; Clear carry
(1) 2379/     BD3 : CB 23               		sla	e		; << 3
(1) 2380/     BD5 : CB 23               		sla	e
(1) 2381/     BD7 : CB 23               		sla	e
(1) 2382/     BD9 : 9F                  		sbc	a,a		; -1 if carry is set
(1) 2383/     BDA : 57                  		ld	d,a
(1) 2384/     BDB : 19                  		add	hl,de
(1) 2385/     BDC : 22 92 1F            		ld	(wave_Pitch),hl
(1) 2386/     BDF : D9                  		exx			; *
(1) 2387/     BE0 : ED 5B 92 1F         		ld	de,(wave_Pitch)	; *
(1) 2388/     BE4 : D9                  		exx			; *
(1) 2389/     BE5 : C9                  		ret
(1) 2390/     BE6 :                     
(1) 2391/     BE6 :                     ; --------------------------------
(1) 2392/     BE6 :                     ; PCM
(1) 2393/     BE6 :                     ; --------------------------------
(1) 2394/     BE6 :                     
(1) 2395/     BE6 :                     ; TODO MEJORAR ESTO
(1) 2396/     BE6 :                     
(1) 2397/     BE6 :                     .mk_pcm:
(1) 2398/     BE6 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 2399/     BE9 : 16 00               		ld	d,0
(1) 2400/     BEB : FD 5E 04            		ld	e,(iy+04h)		; e - Channel ID
(1) 2401/     BEE : DD 4E 00            		ld	c,(ix+chnl_Flags)	; c - Panning bits
(1) 2402/     BF1 : DD 21 45 16         		ld	ix,pcmcom
(1) 2403/     BF5 : DD 19               		add	ix,de
(1) 2404/     BF7 : CB 40               		bit	0,b			; Note update?
(1) 2405/     BF9 : C8                  		ret	z
(1) 2406/     BFA : FE FE               		cp	-2
(1) 2407/     BFC : CA 62 0C            		jp	z,.pcm_cut
(1) 2408/     BFF : FE FF               		cp	-1
(1) 2409/     C01 : CA 5B 0C            		jp	z,.pcm_off
(1) 2410/     C04 : CF                  		rst	8
(1) 2411/     C05 : CB 40               		bit	0,b			; Note flag?
(1) 2412/     C07 : 20 0D               		jr	nz,.pcm_note
(1) 2413/     C09 : CB 58               		bit	3,b			; Effect flag?
(1) 2414/     C0B : 20 05               		jr	nz,.pcm_effc
(1) 2415/     C0D : CB 50               		bit	2,b			; Volume flag?
(1) 2416/     C0F : 20 01               		jr	nz,.pcm_effc
(1) 2417/     C11 : C9                  		ret
(1) 2418/     C12 :                     
(1) 2419/     C12 :                     ; --------------------------------
(1) 2420/     C12 :                     
(1) 2421/     C12 :                     .pcm_effc:
(1) 2422/     C12 : 1E 09               		ld	e,00001001b
(1) 2423/     C14 : 18 0C               		jr	.mkpcm_wrton
(1) 2424/     C16 :                     .pcm_note:
(1) 2425/     C16 : 79                  		ld	a,c		; <-- Lazy panning reset
(1) 2426/     C17 : E6 30               		and	00110000b	; Read LR bits
(1) 2427/     C19 : B7                  		or	a
(1) 2428/     C1A : 20 04               		jr	nz,.mp_reset
(1) 2429/     C1C : FD 36 0A 00         		ld	(iy+0Ah),0	; If 0, reset panning on table
(1) 2430/     C20 :                     .mp_reset:
(1) 2431/     C20 : 1E 01               		ld	e,00000001b	; KeyON request
(1) 2432/     C22 :                     .mkpcm_wrton:
(1) 2433/     C22 : DD 73 00            		ld	(ix),e		; Write key-on bit
(1) 2434/     C25 :                     .mkpcm_proc:
(1) 2435/     C25 : CD EF 0C            		call	.readfreq_pcm
(1) 2436/     C28 : 11 08 00            		ld	de,8		; Go to Pitch
(1) 2437/     C2B : DD 19               		add	ix,de
(1) 2438/     C2D : DD 74 00            		ld	(ix),h		; Set pitch
(1) 2439/     C30 : DD 19               		add	ix,de
(1) 2440/     C32 : DD 75 00            		ld	(ix),l
(1) 2441/     C35 : DD 19               		add	ix,de
(1) 2442/     C37 : 0E FF               		ld	c,-1		; <-- Lazy job
(1) 2443/     C39 : FD 7E 08            		ld	a,(iy+08h)	; Read current Volume
(1) 2444/     C3C : FD 96 03            		sub	a,(iy+03h)	; + MASTER vol
(1) 2445/     C3F : 3F                  		ccf
(1) 2446/     C40 : 8F                  		adc	a,a
(1) 2447/     C41 : 8F                  		adc	a,a
(1) 2448/     C42 : 38 02               		jr	c,.vpcm_carry
(1) 2449/     C44 : AF                  		xor	a
(1) 2450/     C45 : 81                  		add	a,c
(1) 2451/     C46 :                     .vpcm_carry:
(1) 2452/     C46 : 32 01 00            		ld	(1),a
(1) 2453/     C49 : DD 77 00            		ld	(ix),a
(1) 2454/     C4C : DD 19               		add	ix,de
(1) 2455/     C4E : FD 7E 0A            		ld	a,(iy+0Ah)
(1) 2456/     C51 : 2F                  		cpl
(1) 2457/     C52 : DD 77 00            		ld	(ix),a
(1) 2459/     C55 : 3E 01               		ld	a,1
(1) 2460/     C57 : 32 88 1F            		ld	(mcdUpd),a
(1) 2462/     C5A : C9                  		ret
(1) 2463/     C5B :                     
(1) 2464/     C5B :                     ; --------------------------------
(1) 2465/     C5B :                     ; -1
(1) 2466/     C5B :                     .pcm_off:
(1) 2467/     C5B : CF                  		rst	8
(1) 2468/     C5C : DD 36 00 02         		ld	(ix),010b
(1) 2469/     C60 : 18 05               		jr	.pcm_setcoff
(1) 2470/     C62 :                     ; -2
(1) 2471/     C62 :                     .pcm_cut:
(1) 2472/     C62 : CF                  		rst	8
(1) 2473/     C63 : DD 36 00 04         		ld	(ix),100b
(1) 2474/     C67 :                     .pcm_setcoff:
(1) 2475/     C67 : 3E 01               		ld	a,1
(1) 2476/     C69 : 32 88 1F            		ld	(mcdUpd),a
(1) 2477/     C6C : C3 41 10            		jp	.chnl_ulnkoff
(1) 2478/     C6F :                     
(1) 2479/     C6F :                     ; --------------------------------
(1) 2480/     C6F :                     ; PWM
(1) 2481/     C6F :                     ; --------------------------------
(1) 2482/     C6F :                     
(1) 2483/     C6F :                     .mk_pwm:
(1) 2484/     C6F : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 2485/     C72 : 16 00               		ld	d,0
(1) 2486/     C74 : FD 5E 04            		ld	e,(iy+04h)		; e - Channel ID
(1) 2487/     C77 : DD 4E 00            		ld	c,(ix+chnl_Flags)	; c - Panning bits
(1) 2488/     C7A : DD 21 85 16         		ld	ix,pwmcom
(1) 2489/     C7E : DD 19               		add	ix,de
(1) 2490/     C80 : FE FE               		cp	-2
(1) 2491/     C82 : CA E0 0C            		jp	z,.pwm_cut
(1) 2492/     C85 : FE FF               		cp	-1
(1) 2493/     C87 : CA D9 0C            		jp	z,.pwm_off
(1) 2494/     C8A : CF                  		rst	8
(1) 2495/     C8B : 78                  		ld	a,b
(1) 2496/     C8C : CB 40               		bit	0,b			; Note?
(1) 2497/     C8E : 20 09               		jr	nz,.pw_note
(1) 2498/     C90 : CB 58               		bit	3,b			; Effect?
(1) 2499/     C92 : 20 01               		jr	nz,.pw_effc
(1) 2500/     C94 : C9                  		ret
(1) 2501/     C95 :                     .pw_effc:
(1) 2502/     C95 : 1E 09               		ld	e,00001001b
(1) 2503/     C97 : 18 02               		jr	.pw_send
(1) 2504/     C99 :                     .pw_note:
(1) 2505/     C99 : 1E 01               		ld	e,00000001b	; KeyON request
(1) 2506/     C9B :                     .pw_send:
(1) 2507/     C9B : DD 73 00            		ld	(ix),e		; Set command
(1) 2508/     C9E : CD F4 0C            		call	.readfreq_pwm
(1) 2509/     CA1 : 79                  		ld	a,c		; Read panning bits
(1) 2510/     CA2 :                     ; 		rrca
(1) 2511/     CA2 :                     ; 		rrca
(1) 2512/     CA2 : 2F                  		cpl
(1) 2513/     CA3 : E6 30               		and	00110000b
(1) 2514/     CA5 : CF                  		rst	8
(1) 2515/     CA6 : 5F                  		ld	e,a		; e - set panning bits
(1) 2516/     CA7 : AF                  		xor	a
(1) 2517/     CA8 : FD 7E 08            		ld	a,(iy+08h)	; Read current volume
(1) 2518/     CAB : FD 96 03            		sub	a,(iy+03h)	; + MASTER vol
(1) 2519/     CAE : ED 44               		neg	a
(1) 2520/     CB0 : 3F                  		ccf
(1) 2521/     CB1 : 8F                  		adc	a,a
(1) 2522/     CB2 : 8F                  		adc	a,a
(1) 2523/     CB3 : 30 02               		jr	nc,.pwv_much
(1) 2524/     CB5 : 3E FF               		ld	a,-1
(1) 2525/     CB7 :                     .pwv_much:
(1) 2526/     CB7 : E6 FC               		and	11111100b
(1) 2527/     CB9 : B4                  		or	h		; Merge MSB freq
(1) 2528/     CBA : 01 08 00            		ld	bc,8
(1) 2529/     CBD : DD 09               		add	ix,bc
(1) 2530/     CBF : DD 77 00            		ld	(ix),a
(1) 2531/     CC2 : DD 09               		add	ix,bc
(1) 2532/     CC4 : DD 75 00            		ld	(ix),l
(1) 2533/     CC7 : DD 09               		add	ix,bc
(1) 2534/     CC9 : CF                  		rst	8
(1) 2535/     CCA : DD 7E 00            		ld	a,(ix)
(1) 2536/     CCD : E6 CF               		and	11001111b
(1) 2537/     CCF : B3                  		or	e		; Set panning bits
(1) 2538/     CD0 : DD 77 00            		ld	(ix),a
(1) 2540/     CD3 : 3E 01               		ld	a,1
(1) 2541/     CD5 : 32 87 1F            		ld	(marsUpd),a
(1) 2543/     CD8 : C9                  		ret
(1) 2544/     CD9 :                     
(1) 2545/     CD9 :                     ; --------------------------------
(1) 2546/     CD9 :                     ; -1
(1) 2547/     CD9 :                     .pwm_off:
(1) 2548/     CD9 : CF                  		rst	8
(1) 2549/     CDA : DD 36 00 02         		ld	(ix),010b
(1) 2550/     CDE : 18 05               		jr	.pwm_setcoff
(1) 2551/     CE0 :                     ; -2
(1) 2552/     CE0 :                     .pwm_cut:
(1) 2553/     CE0 : CF                  		rst	8
(1) 2554/     CE1 : DD 36 00 04         		ld	(ix),100b
(1) 2555/     CE5 :                     .pwm_setcoff:
(1) 2556/     CE5 : 3E 01               		ld	a,1
(1) 2557/     CE7 : 32 87 1F            		ld	(marsUpd),a
(1) 2558/     CEA : DD E1               		pop	ix
(1) 2559/     CEC : C3 41 10            		jp	.chnl_ulnkoff
(1) 2560/     CEF :                     
(1) 2561/     CEF :                     ; --------------------------------
(1) 2562/     CEF :                     ; SHARED routine
(1) 2563/     CEF :                     
(1) 2564/     CEF :                     .readfreq_pcm:
(1) 2565/     CEF : 21 83 15            		ld	hl,wavFreq_CdPcm-(36*2)
(1) 2566/     CF2 : 18 03               		jr	.set_wavfreq
(1) 2567/     CF4 :                     .readfreq_pwm:
(1) 2568/     CF4 : 21 23 15            		ld	hl,wavFreq_List-(36*2)
(1) 2569/     CF7 :                     .set_wavfreq:
(1) 2570/     CF7 : 16 00               		ld	d,0		; Freq index
(1) 2571/     CF9 : FD 5E 06            		ld	e,(iy+06h)
(1) 2572/     CFC : 19                  		add	hl,de
(1) 2573/     CFD : 7E                  		ld	a,(hl)
(1) 2574/     CFE : 23                  		inc	hl
(1) 2575/     CFF : 66                  		ld	h,(hl)
(1) 2576/     D00 : 6F                  		ld	l,a
(1) 2577/     D01 : FD 5E 07            		ld	e,(iy+07h)	; pitchbend
(1) 2578/     D04 : CF                  		rst	8
(1) 2579/     D05 : AF                  		xor	a		; Clear high
(1) 2580/     D06 : 3F                  		ccf			; Clear carry
(1) 2581/     D07 : CB 23               		sla	e		; << 2
(1) 2582/     D09 : CB 23               		sla	e
(1) 2583/     D0B : 9F                  		sbc	a,a		; -1 if carry is set
(1) 2584/     D0C : 57                  		ld	d,a
(1) 2585/     D0D : 19                  		add	hl,de
(1) 2586/     D0E : C9                  		ret
(1) 2587/     D0F :                     
(1) 2588/     D0F :                     ; ----------------------------------------
(1) 2589/     D0F :                     ; NEW effect
(1) 2590/     D0F :                     ; ----------------------------------------
(1) 2591/     D0F :                     
(1) 2592/     D0F :                     .effc:
(1) 2593/     D0F : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - effect data
(1) 2594/     D12 : DD 7E 05            		ld	a,(ix+chnl_EffId)	; d - effect id
(1) 2595/     D15 : 57                  		ld	d,a
(1) 2596/     D16 : CF                  		rst	8
(1) 2597/     D17 : FE 04               		cp	4			; Effect D?
(1) 2598/     D19 : 28 0F               		jr	z,.effc_D
(1) 2599/     D1B : FE 05               		cp	5			; Effect E?
(1) 2600/     D1D : 28 4E               		jr	z,.effc_E
(1) 2601/     D1F : FE 06               		cp	6			; Effect F?
(1) 2602/     D21 : 28 5F               		jr	z,.effc_F
(1) 2603/     D23 : CF                  		rst	8
(1) 2604/     D24 : FE 18               		cp	24			; Effect X?
(1) 2605/     D26 : CA A3 0D            		jp	z,.effc_X
(1) 2606/     D29 : C9                  		ret
(1) 2607/     D2A :                     
(1) 2608/     D2A :                     ; ----------------------------------------
(1) 2609/     D2A :                     ; Effect D
(1) 2610/     D2A :                     ;
(1) 2611/     D2A :                     ; Volume slide down
(1) 2612/     D2A :                     ;
(1) 2613/     D2A :                     ; 0xh-Exh - Normal
(1) 2614/     D2A :                     ; Fxh-Fxh - Fine slide / 2
(1) 2615/     D2A :                     ; ----------------------------------------
(1) 2616/     D2A :                     
(1) 2617/     D2A :                     .effc_D:
(1) 2618/     D2A : CD 97 0D            		call	.save_arg
(1) 2619/     D2D : 79                  		ld	a,c		; Setting == 0?
(1) 2620/     D2E : B7                  		or	a
(1) 2621/     D2F : C8                  		ret	z
(1) 2622/     D30 : E6 F0               		and	0F0h
(1) 2623/     D32 : 28 0F               		jr	z,.norm_down	; 0xh
(1) 2624/     D34 : FE F0               		cp	0F0h
(1) 2625/     D36 : 28 0D               		jr	z,.fine_down	; Fxh
(1) 2626/     D38 : CF                  		rst	8
(1) 2627/     D39 : 79                  		ld	a,c
(1) 2628/     D3A : E6 0F               		and	00Fh
(1) 2629/     D3C : 28 1D               		jr	z,.norm_up	; x0h
(1) 2630/     D3E : FE 0F               		cp	00Fh
(1) 2631/     D40 : 28 17               		jr	z,.fine_up	; xFh
(1) 2632/     D42 : C9                  		ret
(1) 2633/     D43 :                     ; Go down
(1) 2634/     D43 :                     .norm_down:
(1) 2635/     D43 : CB 21               		sla	c
(1) 2636/     D45 :                     .fine_down:
(1) 2637/     D45 : CB 21               		sla	c
(1) 2638/     D47 : 79                  		ld	a,c
(1) 2639/     D48 : E6 3C               		and	00111100b
(1) 2640/     D4A : 4F                  		ld	c,a
(1) 2641/     D4B : FD 7E 08            		ld	a,(iy+08h)	; Current volume
(1) 2642/     D4E : CF                  		rst	8
(1) 2643/     D4F : 91                  		sub	a,c
(1) 2644/     D50 : 1E C0               		ld	e,0C0h
(1) 2645/     D52 : BB                  		cp	e
(1) 2646/     D53 : D2 69 0D            		jp	nc,.vol_dvld
(1) 2647/     D56 : 7B                  		ld	a,e
(1) 2648/     D57 : 18 10               		jr 	.vol_dvld
(1) 2649/     D59 :                     ; Go up
(1) 2650/     D59 :                     .fine_up:
(1) 2651/     D59 : CB 39               		srl	c
(1) 2652/     D5B :                     .norm_up:
(1) 2653/     D5B : CB 39               		srl	c
(1) 2654/     D5D : 79                  		ld	a,c
(1) 2655/     D5E : E6 3C               		and	00111100b
(1) 2656/     D60 : 4F                  		ld	c,a
(1) 2657/     D61 : FD 7E 08            		ld	a,(iy+08h)	; Current volume
(1) 2658/     D64 : CF                  		rst	8
(1) 2659/     D65 : 81                  		add	a,c
(1) 2660/     D66 : 38 01               		jr	c,.vol_dvld
(1) 2661/     D68 : AF                  		xor	a
(1) 2662/     D69 :                     .vol_dvld:
(1) 2663/     D69 : FD 77 08            		ld	(iy+08h),a
(1) 2664/     D6C : C9                  		ret
(1) 2665/     D6D :                     
(1) 2666/     D6D :                     ; ----------------------------------------
(1) 2667/     D6D :                     ; Effect E
(1) 2668/     D6D :                     ; ----------------------------------------
(1) 2669/     D6D :                     
(1) 2670/     D6D :                     .effc_E:
(1) 2671/     D6D : CD 97 0D            		call	.save_arg
(1) 2672/     D70 : 79                  		ld	a,c
(1) 2673/     D71 : E6 F0               		and	0F0h
(1) 2674/     D73 : FE F0               		cp	0F0h
(1) 2675/     D75 : C8                  		ret	z
(1) 2676/     D76 : FE E0               		cp	0E0h
(1) 2677/     D78 : C8                  		ret	z
(1) 2678/     D79 : CF                  		rst	8
(1) 2679/     D7A : FD 7E 07            		ld	a,(iy+07h)
(1) 2680/     D7D : 91                  		sub	a,c
(1) 2681/     D7E : FD 77 07            		ld	(iy+07h),a
(1) 2682/     D81 : C9                  		ret
(1) 2683/     D82 :                     
(1) 2684/     D82 :                     ; ----------------------------------------
(1) 2685/     D82 :                     ; Effect F
(1) 2686/     D82 :                     ; ----------------------------------------
(1) 2687/     D82 :                     
(1) 2688/     D82 :                     .effc_F:
(1) 2689/     D82 : CD 97 0D            		call	.save_arg
(1) 2690/     D85 : 79                  		ld	a,c
(1) 2691/     D86 : E6 F0               		and	0F0h
(1) 2692/     D88 : FE F0               		cp	0F0h
(1) 2693/     D8A : C8                  		ret	z
(1) 2694/     D8B : FE E0               		cp	0E0h
(1) 2695/     D8D : C8                  		ret	z
(1) 2696/     D8E : CF                  		rst	8
(1) 2697/     D8F : FD 7E 07            		ld	a,(iy+07h)
(1) 2698/     D92 : 81                  		add	a,c
(1) 2699/     D93 : FD 77 07            		ld	(iy+07h),a
(1) 2700/     D96 : C9                  		ret
(1) 2701/     D97 :                     
(1) 2702/     D97 :                     ; --------------------------------
(1) 2703/     D97 :                     ; e - got arg
(1) 2704/     D97 :                     ; c - new arg
(1) 2705/     D97 :                     .save_arg:
(1) 2706/     D97 : FD 4E 09            		ld	c,(iy+09h)	; Current slide setting
(1) 2707/     D9A : 7B                  		ld	a,e		; EffArg is non-zero?
(1) 2708/     D9B : B7                  		or	a
(1) 2709/     D9C : 28 04               		jr	z,.D_cont	; 00h = slide continue
(1) 2710/     D9E : 4F                  		ld	c,a
(1) 2711/     D9F : FD 71 09            		ld	(iy+09h),c	; Store NEW slide setting
(1) 2712/     DA2 :                     .D_cont:
(1) 2713/     DA2 : C9                  		ret
(1) 2714/     DA3 :                     
(1) 2715/     DA3 :                     ; ----------------------------------------
(1) 2716/     DA3 :                     ; Effect X
(1) 2717/     DA3 :                     ;
(1) 2718/     DA3 :                     ; Common panning values:
(1) 2719/     DA3 :                     ;  00h LEFT
(1) 2720/     DA3 :                     ;  80h MIDDLE
(1) 2721/     DA3 :                     ; 0FFh RIGHT
(1) 2722/     DA3 :                     ; ----------------------------------------
(1) 2723/     DA3 :                     
(1) 2724/     DA3 :                     .effc_X:
(1) 2725/     DA3 : 16 00               		ld	d,0
(1) 2726/     DA5 : 7E                  		ld	a,(hl)
(1) 2727/     DA6 : E6 F0               		and	11110000b
(1) 2728/     DA8 : FE 80               		cp	80h		; PSG?
(1) 2729/     DAA : 28 1D               		jr	z,.res_pan
(1) 2730/     DAC : FE 90               		cp	90h		; PSGN?
(1) 2731/     DAE : 28 19               		jr	z,.res_pan
(1) 2732/     DB0 : FE D0               		cp	0D0h		; MCD: write separate PAN values
(1) 2733/     DB2 : CC D3 0D            		call	z,.pan_mcd	; <-- CALL, not JP
(1) 2734/     DB5 :                     
(1) 2735/     DB5 :                     	; ----------------------------------------
(1) 2736/     DB5 :                     	; Common panning bits: %00LR0000
(1) 2737/     DB5 :                     	; (REVERSE: 0-on 1-off)
(1) 2738/     DB5 : FD 36 09 00         		ld	(iy+09h),0
(1) 2739/     DB9 : CF                  		rst	8
(1) 2740/     DBA : E5                  		push	hl
(1) 2741/     DBB : 21 E9 0D            		ld	hl,.comn_panlist
(1) 2742/     DBE : 7B                  		ld	a,e
(1) 2743/     DBF : 07                  		rlca
(1) 2744/     DC0 : 07                  		rlca
(1) 2745/     DC1 : 07                  		rlca
(1) 2746/     DC2 : E6 07               		and	0111b
(1) 2747/     DC4 :                     ; 		ld	d,0
(1) 2748/     DC4 : 5F                  		ld	e,a
(1) 2749/     DC5 : CF                  		rst	8
(1) 2750/     DC6 : 19                  		add	hl,de
(1) 2751/     DC7 : 56                  		ld	d,(hl)
(1) 2752/     DC8 : E1                  		pop	hl
(1) 2753/     DC9 :                     .res_pan:
(1) 2754/     DC9 : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Save panning
(1) 2755/     DCC : E6 CF               		and	11001111b
(1) 2756/     DCE : B2                  		or	d
(1) 2757/     DCF : DD 77 00            		ld	(ix+chnl_Flags),a
(1) 2758/     DD2 : C9                  		ret
(1) 2759/     DD3 :                     
(1) 2760/     DD3 :                     	; ----------------------------------------
(1) 2761/     DD3 :                     	; MCD panning
(1) 2762/     DD3 :                     .pan_mcd:
(1) 2763/     DD3 : E5                  		push	hl
(1) 2764/     DD4 : D5                  		push	de
(1) 2765/     DD5 : 16 00               		ld	d,0
(1) 2766/     DD7 : 21 F1 0D            		ld	hl,.pcm_panlist
(1) 2767/     DDA : 7B                  		ld	a,e
(1) 2768/     DDB : E6 F8               		and	0F8h
(1) 2769/     DDD : 0F                  		rrca
(1) 2770/     DDE : 0F                  		rrca
(1) 2771/     DDF : 0F                  		rrca
(1) 2772/     DE0 : 5F                  		ld	e,a
(1) 2773/     DE1 : 19                  		add	hl,de
(1) 2774/     DE2 : 7E                  		ld	a,(hl)
(1) 2775/     DE3 : FD 77 0A            		ld	(iy+0Ah),a
(1) 2776/     DE6 : D1                  		pop	de
(1) 2777/     DE7 : E1                  		pop	hl
(1) 2778/     DE8 : C9                  		ret
(1) 2779/     DE9 :                     
(1) 2780/     DE9 :                     ; 0 - ENABLE, 1 - DISABLE
(1) 2781/     DE9 :                     ; 00LR0000b
(1) 2782/     DE9 :                     .comn_panlist:
(1) 2783/     DE9 : 10                  		db 00010000b
(1) 2784/     DEA : 10                  		db 00010000b
(1) 2785/     DEB : 10                  		db 00010000b
(1) 2786/     DEC : 00                  		db 00000000b
(1) 2787/     DED : 00                  		db 00000000b
(1) 2788/     DEE : 20                  		db 00100000b
(1) 2789/     DEF : 20                  		db 00100000b
(1) 2790/     DF0 : 20                  		db 00100000b
(1) 2791/     DF1 :                     
(1) 2792/     DF1 :                     ; REVERSE OUTPUT BITS
(1) 2793/     DF1 :                     ; RRRR | LLLL
(1) 2794/     DF1 :                     .pcm_panlist:
(1) 2795/     DF1 : F0                  		db 0F0h	; 00h
(1) 2796/     DF2 : E0                  		db 0E0h
(1) 2797/     DF3 : D0                  		db 0D0h	; 10h
(1) 2798/     DF4 : C0                  		db 0C0h
(1) 2799/     DF5 : B0                  		db 0B0h	; 20h
(1) 2800/     DF6 : A0                  		db 0A0h
(1) 2801/     DF7 : 90                  		db 090h	; 30h
(1) 2802/     DF8 : 80                  		db 080h
(1) 2803/     DF9 : 70                  		db 070h	; 40h
(1) 2804/     DFA : 60                  		db 060h
(1) 2805/     DFB : 50                  		db 050h	; 50h
(1) 2806/     DFC : 40                  		db 040h
(1) 2807/     DFD : 30                  		db 030h	; 60h
(1) 2808/     DFE : 20                  		db 020h
(1) 2809/     DFF : 10                  		db 010h	; 70h
(1) 2810/     E00 : 00                  		db 000h
(1) 2811/     E01 : 00                  		db 000h ; 80h
(1) 2812/     E02 : 01                  		db 001h
(1) 2813/     E03 : 02                  		db 002h ; 90h
(1) 2814/     E04 : 03                  		db 003h
(1) 2815/     E05 : 04                  		db 004h ; A0h
(1) 2816/     E06 : 05                  		db 005h
(1) 2817/     E07 : 06                  		db 006h ; B0h
(1) 2818/     E08 : 07                  		db 007h
(1) 2819/     E09 : 08                  		db 008h ; C0h
(1) 2820/     E0A : 09                  		db 009h
(1) 2821/     E0B : 0A                  		db 00Ah ; D0h
(1) 2822/     E0C : 0B                  		db 00Bh
(1) 2823/     E0D : 0C                  		db 00Ch ; E0h
(1) 2824/     E0E : 0D                  		db 00Dh
(1) 2825/     E0F : 0E                  		db 00Eh ; F0h
(1) 2826/     E10 : 0F                  		db 00Fh
(1) 2827/     E11 :                     
(1) 2828/     E11 :                     ; ----------------------------------------
(1) 2829/     E11 :                     ; NEW volume
(1) 2830/     E11 :                     ; ----------------------------------------
(1) 2831/     E11 :                     
(1) 2832/     E11 :                     .volu:
(1) 2833/     E11 : DD 7E 04            		ld	a,(ix+chnl_Vol)
(1) 2834/     E14 : D6 40               		sub	a,64
(1) 2835/     E16 : FD 77 08            		ld	(iy+08h),a	; BASE volume
(1) 2836/     E19 : C9                  		ret
(1) 2837/     E1A :                     
(1) 2838/     E1A :                     ; ----------------------------------------
(1) 2839/     E1A :                     ; NEW instrument
(1) 2840/     E1A :                     ; ----------------------------------------
(1) 2841/     E1A :                     
(1) 2842/     E1A :                     .inst:
(1) 2843/     E1A : 7E                  		ld	a,(hl)
(1) 2844/     E1B : E6 F0               		and	11110000b
(1) 2845/     E1D : FE 80               		cp	080h
(1) 2846/     E1F : 28 24               		jr	z,.ins_psg
(1) 2847/     E21 : FE 90               		cp	090h
(1) 2848/     E23 : 28 1A               		jr	z,.ins_psgn
(1) 2849/     E25 : FE A0               		cp	0A0h
(1) 2850/     E27 : 28 52               		jr	z,.ins_fm
(1) 2851/     E29 : CF                  		rst	8
(1) 2852/     E2A : FE B0               		cp	0B0h
(1) 2853/     E2C : 28 4D               		jr	z,.ins_fm
(1) 2854/     E2E : FE C0               		cp	0C0h
(1) 2855/     E30 : CA FC 0E            		jp	z,.ins_dac
(1) 2856/     E33 : FE D0               		cp	0D0h
(1) 2857/     E35 : CA 50 0F            		jp	z,.ins_pcm
(1) 2858/     E38 : FE E0               		cp	0E0h
(1) 2859/     E3A : CA 88 0F            		jp	z,.ins_pwm
(1) 2860/     E3D : CF                  		rst	8
(1) 2861/     E3E :                     .invl_ins:
(1) 2862/     E3E : C9                  		ret
(1) 2863/     E3F :                     
(1) 2864/     E3F :                     ; ----------------------------------------
(1) 2865/     E3F :                     ; PSG
(1) 2866/     E3F :                     
(1) 2867/     E3F :                     .ins_psgn:
(1) 2868/     E3F : 7E                  		ld	a,(hl)		; Grab noise setting
(1) 2869/     E40 : E6 07               		and	0111b
(1) 2870/     E42 : 32 83 1F            		ld	(psgHatMode),a	; ** SET GLOBAL SETTING
(1) 2871/     E45 :                     .ins_psg:
(1) 2872/     E45 : CF                  		rst	8
(1) 2873/     E46 : DD E5               		push	ix
(1) 2874/     E48 : E5                  		push	hl
(1) 2875/     E49 : 23                  		inc	hl		; Skip ID
(1) 2876/     E4A : DD 21 BD 16         		ld	ix,psgcom	; Read psg control
(1) 2877/     E4E : FD 5E 04            		ld	e,(iy+04h)
(1) 2878/     E51 : 16 00               		ld	d,0
(1) 2879/     E53 : DD 19               		add	ix,de
(1) 2880/     E55 : 7E                  		ld	a,(hl)
(1) 2881/     E56 : CF                  		rst	8
(1) 2882/     E57 : 23                  		inc	hl
(1) 2883/     E58 : 7E                  		ld	a,(hl)
(1) 2884/     E59 : DD 77 24            		ld	(ix+ALV),a	; ALV
(1) 2885/     E5C : 23                  		inc	hl
(1) 2886/     E5D : 7E                  		ld	a,(hl)
(1) 2887/     E5E : DD 77 08            		ld	(ix+ATK),a	; ATK
(1) 2888/     E61 : 23                  		inc	hl
(1) 2889/     E62 : 7E                  		ld	a,(hl)
(1) 2890/     E63 : CF                  		rst	8
(1) 2891/     E64 : DD 77 10            		ld	(ix+SLV),a	; SLV
(1) 2892/     E67 : 23                  		inc	hl
(1) 2893/     E68 : 7E                  		ld	a,(hl)
(1) 2894/     E69 : DD 77 0C            		ld	(ix+DKY),a	; DKY
(1) 2895/     E6C : 23                  		inc	hl
(1) 2896/     E6D : 7E                  		ld	a,(hl)
(1) 2897/     E6E : DD 77 14            		ld	(ix+RRT),a	; RRT
(1) 2898/     E71 : 23                  		inc	hl
(1) 2899/     E72 : 7E                  		ld	a,(hl)
(1) 2900/     E73 : CF                  		rst	8
(1) 2901/     E74 : DD 77 34            		ld	(ix+PARP),a	; ARP
(1) 2902/     E77 : E1                  		pop	hl
(1) 2903/     E78 : DD E1               		pop	ix
(1) 2904/     E7A : C9                  		ret
(1) 2905/     E7B :                     
(1) 2906/     E7B :                     ; ----------------------------------------
(1) 2907/     E7B :                     ; FM/FM3
(1) 2908/     E7B :                     
(1) 2909/     E7B :                     .ins_fm:
(1) 2910/     E7B : DD E5               		push	ix
(1) 2911/     E7D : E5                  		push	hl
(1) 2912/     E7E : C5                  		push	bc
(1) 2913/     E7F :                     ; 		ld	b,(ix+chnl_Ins)	; b - current Ins
(1) 2914/     E7F : FD 46 02            		ld	b,(iy+02h)
(1) 2915/     E82 : FD 7E 04            		ld	a,(iy+04h)
(1) 2916/     E85 : E6 07               		and	0111b
(1) 2917/     E87 : 16 00               		ld	d,0
(1) 2918/     E89 : 87                  		add	a,a
(1) 2919/     E8A : 5F                  		ld	e,a
(1) 2920/     E8B : DD 21 E5 14         		ld	ix,fmcach_list
(1) 2921/     E8F : DD 19               		add	ix,de
(1) 2922/     E91 : CF                  		rst	8
(1) 2923/     E92 : DD 5E 00            		ld	e,(ix)
(1) 2924/     E95 : DD 23               		inc	ix
(1) 2925/     E97 : DD 56 00            		ld	d,(ix)
(1) 2926/     E9A :                     
(1) 2927/     E9A :                     ; 		ld	a,(iy+0Bh)	; 0Bh: DON'T reload flag
(1) 2928/     E9A :                     ; 		cp	b
(1) 2929/     E9A :                     ; 		jr	z,.same_patch
(1) 2930/     E9A :                     ; 		ld	(iy+0Bh),b
(1) 2931/     E9A : 23                  		inc	hl		; Skip id and pitch
(1) 2932/     E9B : 23                  		inc	hl
(1) 2933/     E9C :                     
(1) 2934/     E9C : 46                  		ld	b,(hl)
(1) 2935/     E9D : 23                  		inc	hl
(1) 2936/     E9E : 4E                  		ld	c,(hl)
(1) 2937/     E9F : 23                  		inc	hl
(1) 2938/     EA0 : 6E                  		ld	l,(hl)
(1) 2939/     EA1 : 61                  		ld	h,c
(1) 2940/     EA2 :                     
(1) 2941/     EA2 : FD 7E 0A            		ld	a,(iy+0Ah)
(1) 2942/     EA5 : BC                  		cp	h
(1) 2943/     EA6 : 20 07               		jr	nz,.new_romdat
(1) 2944/     EA8 : CF                  		rst	8
(1) 2945/     EA9 : FD 7E 0B            		ld	a,(iy+0Bh)
(1) 2946/     EAC : BD                  		cp	l
(1) 2947/     EAD : 28 38               		jr	z,.same_patch
(1) 2948/     EAF :                     .new_romdat:
(1) 2949/     EAF : FD 74 0A            		ld	(iy+0Ah),h
(1) 2950/     EB2 : FD 75 0B            		ld	(iy+0Bh),l
(1) 2951/     EB5 : 78                  		ld	a,b
(1) 2952/     EB6 : 01 28 00            		ld	bc,28h		; <- size
(1) 2953/     EB9 : D5                  		push	de
(1) 2954/     EBA : CD 81 11            		call	transferRom	; *** ROM ACCESS ***
(1) 2955/     EBD :                     
(1) 2956/     EBD : E1                  		pop	hl
(1) 2957/     EBE : FD 7E 04            		ld	a,(iy+04h)
(1) 2958/     EC1 : 4F                  		ld	c,a		; c - FM Key ID
(1) 2959/     EC2 :                     
(1) 2960/     EC2 :                     	; hl - fmcach intrument
(1) 2961/     EC2 :                     	; de - FM reg and data: 3000h
(1) 2962/     EC2 :                     	;  c - FM keyChannel
(1) 2963/     EC2 : 79                  		ld	a,c
(1) 2964/     EC3 : E6 03               		and	011b
(1) 2965/     EC5 : F6 30               		or	30h		; Start at reg 30h
(1) 2966/     EC7 : 57                  		ld	d,a
(1) 2967/     EC8 : 1E 00               		ld	e,0
(1) 2968/     ECA : CF                  		rst	8
(1) 2969/     ECB : 06 1C               		ld	b,7*4		; Write ALL base FM registers
(1) 2970/     ECD : CD EC 0E            		call	.fm_setrlist
(1) 2971/     ED0 :                     ; 		ld	b,4
(1) 2972/     ED0 :                     ; 		call	.fm_setrlist
(1) 2973/     ED0 :                     ; 		ld	b,5*4
(1) 2974/     ED0 :                     ; 		call	.fm_setrlist
(1) 2975/     ED0 : 7E                  		ld	a,(hl)		; 0B0h
(1) 2976/     ED1 : FD 77 0C            		ld	(iy+0Ch),a	; ** Save 0B0h to 0Ch
(1) 2977/     ED4 : 23                  		inc	hl
(1) 2978/     ED5 : 7E                  		ld	a,(hl)		; 0B4h
(1) 2979/     ED6 : FD 77 0D            		ld	(iy+0Dh),a	; ** Save 0B4h to 0Dh
(1) 2980/     ED9 : 23                  		inc	hl
(1) 2981/     EDA : CF                  		rst	8
(1) 2982/     EDB : 7E                  		ld	a,(hl)
(1) 2983/     EDC : FD 77 0E            		ld	(iy+0Eh),a	; LFO
(1) 2984/     EDF : 23                  		inc	hl
(1) 2985/     EE0 : 7E                  		ld	a,(hl)		; 028h keys
(1) 2986/     EE1 : E6 F0               		and	11110000b
(1) 2987/     EE3 : CF                  		rst	8
(1) 2988/     EE4 : FD 77 0F            		ld	(iy+0Fh),a	; ** Save keys to 0Eh
(1) 2989/     EE7 :                     .same_patch:
(1) 2990/     EE7 : C1                  		pop	bc
(1) 2991/     EE8 : E1                  		pop	hl
(1) 2992/     EE9 : DD E1               		pop	ix
(1) 2993/     EEB : C9                  		ret
(1) 2994/     EEC :                     ; b - numof_regs
(1) 2995/     EEC :                     .fm_setrlist:
(1) 2996/     EEC : 5E                  		ld	e,(hl)
(1) 2997/     EED : 23                  		inc	hl
(1) 2998/     EEE : CD 9C 13            		call	fm_autoreg
(1) 2999/     EF1 : 00                  		nop
(1) 3000/     EF2 : 00                  		nop
(1) 3001/     EF3 : CF                  		rst	8
(1) 3002/     EF4 : 00                  		nop
(1) 3003/     EF5 : 14                  		inc	d		; +4
(1) 3004/     EF6 : 14                  		inc	d
(1) 3005/     EF7 : 14                  		inc	d
(1) 3006/     EF8 : 14                  		inc	d
(1) 3007/     EF9 : 10 F1               		djnz	.fm_setrlist
(1) 3008/     EFB : C9                  		ret
(1) 3009/     EFC :                     
(1) 3010/     EFC :                     ; ----------------------------------------
(1) 3011/     EFC :                     
(1) 3012/     EFC :                     .ins_dac:
(1) 3013/     EFC : E5                  		push	hl
(1) 3014/     EFD : C5                  		push	bc
(1) 3015/     EFE : CD CB 13            		call	dac_off
(1) 3016/     F01 : 7E                  		ld	a,(hl)
(1) 3017/     F02 : E6 0F               		and	00001111b
(1) 3018/     F04 : 32 94 1F            		ld	(wave_Flags),a
(1) 3019/     F07 : CF                  		rst	8
(1) 3020/     F08 : 23                  		inc	hl
(1) 3021/     F09 : 23                  		inc	hl
(1) 3022/     F0A : 5E                  		ld	e,(hl)
(1) 3023/     F0B : 23                  		inc	hl
(1) 3024/     F0C : 7E                  		ld	a,(hl)
(1) 3025/     F0D : 23                  		inc	hl
(1) 3026/     F0E : 6E                  		ld	l,(hl)
(1) 3027/     F0F : 67                  		ld	h,a
(1) 3028/     F10 : E5                  		push	hl
(1) 3029/     F11 : 7B                  		ld	a,e
(1) 3030/     F12 : 01 06 00            		ld	bc,6		; Skip head
(1) 3031/     F15 : 09                  		add	hl,bc
(1) 3032/     F16 : CE 00               		adc	a,0
(1) 3033/     F18 : 22 89 1F            		ld	(wave_Start),hl	; Set START point
(1) 3034/     F1B : 32 8B 1F            		ld	(wave_Start+2),a
(1) 3035/     F1E : E1                  		pop	hl
(1) 3036/     F1F : 7B                  		ld	a,e
(1) 3037/     F20 : 11 B4 1F            		ld	de,sampleHead
(1) 3038/     F23 : 01 06 00            		ld	bc,6
(1) 3039/     F26 : D5                  		push	de
(1) 3040/     F27 : CF                  		rst	8
(1) 3041/     F28 : CD 81 11            		call	transferRom	; *** ROM ACCESS ***
(1) 3042/     F2B : E1                  		pop	hl
(1) 3043/     F2C :                     	; hl - temporal header
(1) 3044/     F2C : 5E                  		ld	e,(hl)
(1) 3045/     F2D : 23                  		inc	hl
(1) 3046/     F2E : 56                  		ld	d,(hl)
(1) 3047/     F2F : 23                  		inc	hl
(1) 3048/     F30 : 7E                  		ld	a,(hl)
(1) 3049/     F31 : 23                  		inc	hl
(1) 3050/     F32 : ED 53 8C 1F         		ld	(wave_Len),de	; LEN
(1) 3051/     F36 : 32 8E 1F            		ld	(wave_Len+2),a
(1) 3052/     F39 : 5E                  		ld	e,(hl)
(1) 3053/     F3A : 23                  		inc	hl
(1) 3054/     F3B : CF                  		rst	8
(1) 3055/     F3C : 56                  		ld	d,(hl)
(1) 3056/     F3D : 23                  		inc	hl
(1) 3057/     F3E : 7E                  		ld	a,(hl)
(1) 3058/     F3F : 23                  		inc	hl
(1) 3059/     F40 : ED 53 8F 1F         		ld	(wave_Loop),de	; LOOP
(1) 3060/     F44 : 32 91 1F            		ld	(wave_Loop+2),a
(1) 3061/     F47 : 11 06 28            		ld	de,2806h	; keys off
(1) 3062/     F4A : CD A0 13            		call	fm_send_1
(1) 3063/     F4D : C1                  		pop	bc
(1) 3064/     F4E : E1                  		pop	hl
(1) 3065/     F4F :                     ; .same_dac:
(1) 3066/     F4F : C9                  		ret
(1) 3067/     F50 :                     
(1) 3068/     F50 :                     ; ----------------------------------------
(1) 3069/     F50 :                     
(1) 3070/     F50 :                     .ins_pcm:
(1) 3071/     F50 : DD E5               		push	ix
(1) 3072/     F52 : E5                  		push	hl
(1) 3073/     F53 : C5                  		push	bc
(1) 3074/     F54 : 7E                  		ld	a,(hl)		; Stereo|Loop bits
(1) 3075/     F55 : E6 01               		and	00000001b	; Read loop bit
(1) 3076/     F57 : 0F                  		rrca			; Move to MSB
(1) 3077/     F58 : CF                  		rst	8
(1) 3078/     F59 : 23                  		inc	hl		; Skip ID and Pitch
(1) 3079/     F5A : 23                  		inc	hl
(1) 3080/     F5B : 5E                  		ld	e,(hl)		; Read 24-bit pointer
(1) 3081/     F5C : B3                  		or	e
(1) 3082/     F5D : 5F                  		ld	e,a
(1) 3083/     F5E : 23                  		inc	hl
(1) 3084/     F5F : 7E                  		ld	a,(hl)
(1) 3085/     F60 : 23                  		inc	hl
(1) 3086/     F61 : 6E                  		ld	l,(hl)
(1) 3087/     F62 : 67                  		ld	h,a
(1) 3088/     F63 :                     	; d    - Loop enable bit
(1) 3089/     F63 :                     	; e,hl - 24-bit pointer + loop bit
(1) 3090/     F63 : DD 21 45 16         		ld	ix,pcmcom
(1) 3091/     F67 : 06 00               		ld	b,0
(1) 3092/     F69 : FD 4E 04            		ld	c,(iy+04h)
(1) 3093/     F6C : DD 09               		add	ix,bc
(1) 3094/     F6E : 01 28 00            		ld	bc,40		; Go to 40
(1) 3095/     F71 : DD 09               		add	ix,bc
(1) 3096/     F73 : 01 08 00            		ld	bc,8
(1) 3097/     F76 : DD 73 00            		ld	(ix),e		; Write 24-bit pointer
(1) 3098/     F79 : DD 09               		add	ix,bc
(1) 3099/     F7B : DD 74 00            		ld	(ix),h
(1) 3100/     F7E : DD 09               		add	ix,bc
(1) 3101/     F80 : DD 75 00            		ld	(ix),l
(1) 3102/     F83 : C1                  		pop	bc
(1) 3103/     F84 : E1                  		pop	hl
(1) 3104/     F85 : DD E1               		pop	ix
(1) 3105/     F87 : C9                  		ret
(1) 3106/     F88 :                     
(1) 3107/     F88 :                     ; ----------------------------------------
(1) 3108/     F88 :                     
(1) 3109/     F88 :                     .ins_pwm:
(1) 3110/     F88 : DD E5               		push	ix
(1) 3111/     F8A : E5                  		push	hl
(1) 3112/     F8B : C5                  		push	bc
(1) 3113/     F8C : 7E                  		ld	a,(hl)		; Stereo|Loop bits
(1) 3114/     F8D : E6 03               		and	00000011b
(1) 3115/     F8F : 0F                  		rrca
(1) 3116/     F90 : 0F                  		rrca
(1) 3117/     F91 : 4F                  		ld	c,a
(1) 3118/     F92 : CF                  		rst	8
(1) 3119/     F93 : 23                  		inc	hl		; Skip ID and Pitch
(1) 3120/     F94 : 23                  		inc	hl
(1) 3121/     F95 : 56                  		ld	d,(hl)
(1) 3122/     F96 : 23                  		inc	hl
(1) 3123/     F97 : 5E                  		ld	e,(hl)
(1) 3124/     F98 : 23                  		inc	hl
(1) 3125/     F99 : 7E                  		ld	a,(hl)
(1) 3126/     F9A : 23                  		inc	hl
(1) 3127/     F9B : 6E                  		ld	l,(hl)
(1) 3128/     F9C : 67                  		ld	h,a
(1) 3129/     F9D : 79                  		ld	a,c
(1) 3130/     F9E : B2                  		or	d
(1) 3131/     F9F : 57                  		ld	d,a
(1) 3132/     FA0 : CF                  		rst	8
(1) 3133/     FA1 :                     	; de,hl - 32-bit PWM pointer
(1) 3134/     FA1 : DD 21 85 16         		ld	ix,pwmcom
(1) 3135/     FA5 : 06 00               		ld	b,0
(1) 3136/     FA7 : FD 4E 04            		ld	c,(iy+04h)
(1) 3137/     FAA : DD 09               		add	ix,bc
(1) 3138/     FAC : 01 18 00            		ld	bc,24
(1) 3139/     FAF : DD 09               		add	ix,bc	; Move to PWOUTF
(1) 3140/     FB1 : 01 08 00            		ld	bc,8
(1) 3141/     FB4 : DD 72 00            		ld	(ix),d
(1) 3142/     FB7 : DD 09               		add	ix,bc
(1) 3143/     FB9 : DD 73 00            		ld	(ix),e
(1) 3144/     FBC : DD 09               		add	ix,bc
(1) 3145/     FBE : DD 74 00            		ld	(ix),h
(1) 3146/     FC1 : DD 09               		add	ix,bc
(1) 3147/     FC3 : DD 75 00            		ld	(ix),l
(1) 3148/     FC6 : C1                  		pop	bc
(1) 3149/     FC7 : E1                  		pop	hl
(1) 3150/     FC8 : DD E1               		pop	ix
(1) 3151/     FCA : C9                  		ret
(1) 3152/     FCB :                     
(1) 3153/     FCB :                     ; ----------------------------------------
(1) 3154/     FCB :                     ; NEW note
(1) 3155/     FCB :                     ; ----------------------------------------
(1) 3156/     FCB :                     
(1) 3157/     FCB :                     .note:
(1) 3158/     FCB : 78                  		ld	a,b		; Volume bit?
(1) 3159/     FCC : E6 04               		and	0100b
(1) 3160/     FCE : 20 05               		jr	nz,.fm_hasvol
(1) 3161/     FD0 : FD 36 08 00         		ld	(iy+08h),0	; Reset to default volume
(1) 3162/     FD4 : CF                  		rst	8
(1) 3163/     FD5 :                     .fm_hasvol:
(1) 3164/     FD5 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 3165/     FD8 : 4F                  		ld	c,a
(1) 3166/     FD9 : FE FF               		cp	-1
(1) 3167/     FDB : C8                  		ret	z
(1) 3168/     FDC : FE FE               		cp	-2
(1) 3169/     FDE : C8                  		ret	z
(1) 3170/     FDF : E7                  		rst	20h
(1) 3171/     FE0 : 7E                  		ld	a,(hl)
(1) 3172/     FE1 : E6 F0               		and	11110000b
(1) 3173/     FE3 : FE 80               		cp	80h
(1) 3174/     FE5 : 28 16               		jr	z,.n_indx
(1) 3175/     FE7 : CF                  		rst	8
(1) 3176/     FE8 : FE 90               		cp	90h
(1) 3177/     FEA : 28 20               		jr	z,.n_psgn
(1) 3178/     FEC : FE A0               		cp	0A0h
(1) 3179/     FEE : 28 21               		jr	z,.n_fm
(1) 3180/     FF0 :                     ; 		cp	0B0h		; ** Can't use notes on FM special **
(1) 3181/     FF0 :                     ; 		jr	z,.n_fm
(1) 3182/     FF0 : FE C0               		cp	0C0h
(1) 3183/     FF2 : 28 09               		jr	z,.n_indx
(1) 3184/     FF4 : FE D0               		cp	0D0h
(1) 3185/     FF6 : 28 05               		jr	z,.n_indx
(1) 3186/     FF8 : FE E0               		cp	0E0h
(1) 3187/     FFA : 28 01               		jr	z,.n_indx
(1) 3188/     FFC : C9                  		ret
(1) 3189/     FFD :                     
(1) 3190/     FFD :                     ; --------------------------------
(1) 3191/     FFD :                     
(1) 3192/     FFD :                     .n_indx:
(1) 3193/     FFD : 79                  		ld	a,c
(1) 3194/     FFE :                     .n_stfreq:
(1) 3195/     FFE : 23                  		inc	hl		; Skip ID
(1) 3196/     FFF : 5E                  		ld	e,(hl)		; Read pitch
(1) 3197/    1000 : 2B                  		dec	hl
(1) 3198/    1001 : 83                  		add	a,e		; Note + pitch
(1) 3199/    1002 : CF                  		rst	8
(1) 3200/    1003 : 87                  		add	a,a		; * 2
(1) 3201/    1004 : FD 77 06            		ld	(iy+06h),a
(1) 3202/    1007 : FD 36 07 00         		ld	(iy+07h),0	; reset pitchbend
(1) 3203/    100B : C9                  		ret
(1) 3204/    100C :                     .n_psgn:
(1) 3205/    100C : 79                  		ld	a,c
(1) 3206/    100D : C6 0C               		add	a,12		; <-- Manual adjust for NOISE
(1) 3207/    100F : 18 ED               		jr	.n_stfreq
(1) 3208/    1011 :                     
(1) 3209/    1011 :                     ; FM freqs
(1) 3210/    1011 :                     .n_fm:
(1) 3211/    1011 : 79                  		ld	a,c
(1) 3212/    1012 : 23                  		inc	hl		; Skip ID
(1) 3213/    1013 : 5E                  		ld	e,(hl)		; Read pitch
(1) 3214/    1014 : 2B                  		dec	hl
(1) 3215/    1015 : CF                  		rst	8
(1) 3216/    1016 : 83                  		add	a,e		; Note + pitch
(1) 3217/    1017 :                     	; Search for octave and note...
(1) 3218/    1017 : 0E 00               		ld	c,0		; c - octave
(1) 3219/    1019 : 16 07               		ld	d,7
(1) 3220/    101B :                     .get_oct:
(1) 3221/    101B : 5F                  		ld	e,a		; e - note
(1) 3222/    101C : D6 0C               		sub	12
(1) 3223/    101E : B7                  		or	a
(1) 3224/    101F : FA 26 10            		jp	m,.fnd_oct
(1) 3225/    1022 : 0C                  		inc	c
(1) 3226/    1023 :                     ; 		nop
(1) 3227/    1023 :                     ; 		nop
(1) 3228/    1023 :                     ; 		rst	8
(1) 3229/    1023 :                     ; 		nop
(1) 3230/    1023 :                     ; 		nop
(1) 3231/    1023 : 15                  		dec	d
(1) 3232/    1024 : 20 F5               		jr	nz,.get_oct
(1) 3233/    1026 :                     .fnd_oct:
(1) 3234/    1026 : CF                  		rst	8
(1) 3235/    1027 : 7B                  		ld	a,e
(1) 3236/    1028 : 87                  		add	a,a		; Note * 2
(1) 3237/    1029 : E6 1F               		and	00011111b
(1) 3238/    102B : CB 09               		rrc	c
(1) 3239/    102D : CB 09               		rrc	c
(1) 3240/    102F : CB 09               		rrc	c
(1) 3241/    1031 : CF                  		rst	8
(1) 3242/    1032 : B1                  		or	c
(1) 3243/    1033 : FD 77 06            		ld	(iy+06h),a	; Save octave + index: OOOiiiiib
(1) 3244/    1036 : FD 36 07 00         		ld	(iy+07h),0
(1) 3245/    103A : C9                  		ret
(1) 3246/    103B :                     
(1) 3247/    103B :                     ; ----------------------------------------
(1) 3248/    103B :                     
(1) 3249/    103B :                     .chnl_ulnkcut:
(1) 3250/    103B : DD 4E 01            		ld	c,(ix+chnl_Chip)
(1) 3251/    103E : C3 41 10            		jp	.chnl_ulnk
(1) 3252/    1041 :                     .chnl_ulnkoff:
(1) 3253/    1041 :                     ; 		ld	c,0
(1) 3254/    1041 :                     .chnl_ulnk:
(1) 3255/    1041 : AF                  		xor	a
(1) 3256/    1042 : CF                  		rst	8
(1) 3257/    1043 : FD 77 00            		ld	(iy),a			; Delete link, chip and prio
(1) 3258/    1046 : FD 77 01            		ld	(iy+1),a
(1) 3259/    1049 : FD 77 02            		ld	(iy+2),a
(1) 3260/    104C : FD 77 03            		ld	(iy+3),a
(1) 3261/    104F : FD 77 08            		ld	(iy+08h),a
(1) 3262/    1052 : FD 77 09            		ld	(iy+09h),a
(1) 3263/    1055 : FD 77 0A            		ld	(iy+0Ah),a
(1) 3264/    1058 : FD 77 0B            		ld	(iy+0Bh),a
(1) 3265/    105B : C9                  		ret
(1) 3266/    105C :                     
(1) 3267/    105C :                     ; 		push	iy
(1) 3268/    105C :                     ; 		pop	hl
(1) 3269/    105C :                     ; 		ld	bc,8-2		; Go to 08h
(1) 3270/    105C :                     ; 		add	hl,bc
(1) 3271/    105C :                     ; 		rst	8
(1) 3272/    105C :                     ; 		ld	b,8/2
(1) 3273/    105C :                     ; .clrfull:
(1) 3274/    105C :                     ; 		ld	(hl),0		; Reset settings 08-0Bh
(1) 3275/    105C :                     ; 		inc	hl
(1) 3276/    105C :                     ; 		ld	(hl),0
(1) 3277/    105C :                     ; 		inc	hl
(1) 3278/    105C :                     ; 		rst	8
(1) 3279/    105C :                     ; 		djnz	.clrfull
(1) 3280/    105C :                     ; 		ret
(1) 3281/    105C :                     
(1) 3282/    105C :                     ; ============================================================
(1) 3283/    105C :                     ; --------------------------------------------------------
(1) 3284/    105C :                     ; Communication with the SCD and 32X
(1) 3285/    105C :                     ;
(1) 3286/    105C :                     ; SCD: Sends a level2 interrupt to Sub-CPU*
(1) 3287/    105C :                     ; 32X: Interrupts Slave SH2 with CMD request
(1) 3288/    105C :                     ;
(1) 3289/    105C :                     ; *Originally meant for waiting VBlank, that's
(1) 3290/    105C :                     ; the only one available for sending the table
(1) 3291/    105C :                     ; --------------------------------------------------------
(1) 3292/    105C :                     
(1) 3293/    105C :                     ; NOTE: careful modifing this
(1) 3294/    105C :                     
(1) 3295/    105C :                     zmars_send:
(1) 3296/    105C :                     	; ----------------------------------------
(1) 3297/    105C :                     	; Send PCM table
(1) 3299/    105C : 3A 36 00            		ld	a,(mcdBlock)	; Enable MARS requests?
(1) 3300/    105F : B7                  		or	a
(1) 3301/    1060 : C2 CB 10            		jp	nz,.mcdt_blocked
(1) 3302/    1063 : FD 21 0E A0         		ld	iy,8000h|200Eh	; iy - command ports
(1) 3303/    1067 : 3A 88 1F            		ld	a,(mcdUpd)	; NEW transfer?
(1) 3304/    106A : B7                  		or	a
(1) 3305/    106B : CA D5 10            		jp	z,.mcdt_noupd
(1) 3306/    106E : AF                  		xor	a
(1) 3307/    106F : 32 88 1F            		ld	(mcdUpd),a
(1) 3308/    1072 : E7                  		rst	20h
(1) 3309/    1073 : CD DD 10            		call	.set_combank
(1) 3310/    1076 : DD 21 45 16         		ld	ix,pcmcom
(1) 3311/    107A : 21 00 A0            		ld	hl,8000h|2000h
(1) 3312/    107D :                     .wait_in:
(1) 3313/    107D : FD 7E 00            		ld	a,(iy)		; MAIN got first?
(1) 3314/    1080 : B7                  		or	a
(1) 3315/    1081 : 20 FA               		jr	nz,.wait_in
(1) 3316/    1083 : FD 36 00 F0         		ld	(iy),0F0h	; Set our entrance flag.
(1) 3317/    1087 : 36 01               		ld	(hl),1		; Request IRQ
(1) 3318/    1089 : CF                  		rst	8
(1) 3319/    108A :                     .test_irq:
(1) 3320/    108A : CB 46               		bit	0,(hl)		; IRQ started?
(1) 3321/    108C : 20 FC               		jr	nz,.test_irq
(1) 3322/    108E :                     .test_sub:
(1) 3323/    108E : FD 7E 01            		ld	a,(iy+1)	; Sub response?
(1) 3324/    1091 : FE FF               		cp	-1
(1) 3325/    1093 : 20 F9               		jr	nz,.test_sub
(1) 3326/    1095 : FD CB 00 CE         		set	1,(iy)		; "MAIN" lock
(1) 3327/    1099 : CF                  		rst	8
(1) 3328/    109A : 11 10 00            		ld	de,10h		; ix - MAIN data area
(1) 3329/    109D : 19                  		add	hl,de
(1) 3330/    109E :                     	; ix - table
(1) 3331/    109E :                     	; hl - main data
(1) 3332/    109E : 0E 04               		ld	c,40h/10h	; c - Packets to send
(1) 3333/    10A0 :                     .mcd_nextp:
(1) 3334/    10A0 : FD CB 01 46         		bit	0,(iy+1)	; SUB is busy?
(1) 3335/    10A4 : 20 FA               		jr	nz,.mcd_nextp
(1) 3336/    10A6 : 06 10               		ld	b,10h		; 2words to write
(1) 3337/    10A8 : E5                  		push	hl
(1) 3338/    10A9 :                     .copy_bytes:
(1) 3339/    10A9 : DD 7E 00            		ld	a,(ix)
(1) 3340/    10AC : 77                  		ld	(hl),a
(1) 3341/    10AD : DD 23               		inc	ix
(1) 3342/    10AF : 23                  		inc	hl
(1) 3343/    10B0 : 10 F7               		djnz	.copy_bytes
(1) 3344/    10B2 : E1                  		pop	hl
(1) 3345/    10B3 : FD CB 00 C6         		set	0,(iy)		; PASS bit
(1) 3346/    10B7 : CF                  		rst	8
(1) 3347/    10B8 :                     .wait_sub:
(1) 3348/    10B8 : FD CB 01 46         		bit	0,(iy+1)	; SUB is busy?
(1) 3349/    10BC : 28 FA               		jr	z,.wait_sub
(1) 3350/    10BE : FD CB 00 86         		res	0,(iy)		; Clear PASS bit
(1) 3351/    10C2 : CF                  		rst	8
(1) 3352/    10C3 : 0D                  		dec	c
(1) 3353/    10C4 : 20 DA               		jr	nz,.mcd_nextp
(1) 3354/    10C6 : FD 36 00 00         		ld	(iy),0		; "MAIN" unlock
(1) 3355/    10CA : CF                  		rst	8
(1) 3356/    10CB :                     .mcdt_blocked:
(1) 3357/    10CB : 21 45 16            		ld	hl,pcmcom
(1) 3358/    10CE : AF                  		xor	a
(1) 3359/    10CF : 06 08               		ld	b,8		; MAX PCM channels
(1) 3360/    10D1 :                     .clr_pcm:
(1) 3361/    10D1 : 77                  		ld	(hl),a
(1) 3362/    10D2 : 23                  		inc	hl
(1) 3363/    10D3 : 10 FC               		djnz	.clr_pcm
(1) 3364/    10D5 :                     .mcdt_noupd:
(1) 3367/    10D5 : CF                  		rst	8
(1) 3368/    10D6 : 06 03               		ld	b,3	; <-- wave sync for MCD only
(1) 3369/    10D8 : 10 FE               		djnz	$
(1) 3370/    10DA : 00                  		nop
(1) 3371/    10DB : 00                  		nop
(1) 3373/    10DC :                     	; ----------------------------------------
(1) 3374/    10DC :                     	; Send PWM table
(1) 3466/    10DC : C9                  		ret
(1) 3467/    10DD :                     
(1) 3468/    10DD :                     ; --------------------------------------------------------
(1) 3469/    10DD :                     ; Set bank to $A10000
(1) 3471/    10DD :                     .set_combank:
(1) 3472/    10DD : 21 00 60            		ld	hl,6000h
(1) 3473/    10E0 : 36 00               		ld	(hl),0
(1) 3474/    10E2 : 36 01               		ld	(hl),1
(1) 3475/    10E4 : 36 00               		ld	(hl),0
(1) 3476/    10E6 : 36 00               		ld	(hl),0
(1) 3477/    10E8 : CF                  		rst	8
(1) 3478/    10E9 : 36 00               		ld	(hl),0
(1) 3479/    10EB : 36 00               		ld	(hl),0
(1) 3480/    10ED : 36 01               		ld	(hl),1
(1) 3481/    10EF : 36 00               		ld	(hl),0
(1) 3482/    10F1 : 36 01               		ld	(hl),1
(1) 3483/    10F3 : C9                  		ret
(1) 3485/    10F4 :                     
(1) 3486/    10F4 :                     ; ====================================================================
(1) 3487/    10F4 :                     ; ----------------------------------------------------------------
(1) 3488/    10F4 :                     ; Subroutines
(1) 3489/    10F4 :                     ; ----------------------------------------------------------------
(1) 3490/    10F4 :                     
(1) 3491/    10F4 :                     ; --------------------------------------------------------
(1) 3492/    10F4 :                     ; Init sound engine
(1) 3493/    10F4 :                     ; --------------------------------------------------------
(1) 3494/    10F4 :                     
(1) 3495/    10F4 :                     gema_init:
(1) 3496/    10F4 : CD CB 13            		call	dac_off
(1) 3497/    10F7 : AF                  		xor	a
(1) 3498/    10F8 :                     ; 		ld	(marsUpd),a
(1) 3499/    10F8 :                     ; 		ld	(mcdUpd),a
(1) 3500/    10F8 : 32 30 00            		ld	(cdRamLen),a
(1) 3501/    10FB : CD DA 14            		call	gema_lastbank	; Set last bank slot BEFORE writing to PSG (32X bus problem)
(1) 3502/    10FE : 21 11 7F            		ld	hl,Zpsg_ctrl	; Silence PSG channels
(1) 3503/    1101 : 36 9F               		ld	(hl),09Fh
(1) 3504/    1103 : 36 BF               		ld	(hl),0BFh
(1) 3505/    1105 : 36 DF               		ld	(hl),0DFh
(1) 3506/    1107 : 36 FF               		ld	(hl),0FFh
(1) 3507/    1109 : 11 0B 22            		ld	de,2208h|03h	; Set Default LFO
(1) 3508/    110C : CD A0 13            		call	fm_send_1
(1) 3509/    110F : 11 00 27            		ld	de,2700h	; CH3 special and timers off
(1) 3510/    1112 : CD A0 13            		call	fm_send_1
(1) 3511/    1115 :                     ; 		ld	de,2800h	; FM KEYS off
(1) 3512/    1115 : 14                  		inc	d
(1) 3513/    1116 : CD A0 13            		call	fm_send_1
(1) 3514/    1119 : 1C                  		inc	e
(1) 3515/    111A : CD A0 13            		call	fm_send_1
(1) 3516/    111D : 1C                  		inc	e
(1) 3517/    111E : CD A0 13            		call	fm_send_1
(1) 3518/    1121 : 1C                  		inc	e
(1) 3519/    1122 : 1C                  		inc	e
(1) 3520/    1123 : CD A0 13            		call	fm_send_1
(1) 3521/    1126 : 1C                  		inc	e
(1) 3522/    1127 : CD A0 13            		call	fm_send_1
(1) 3523/    112A : 1C                  		inc	e
(1) 3524/    112B : CD A0 13            		call	fm_send_1
(1) 3525/    112E : FD 21 2B 16         		ld	iy,nikona_BuffList
(1) 3526/    1132 : 0E 01               		ld	c,1			; Start at this priority
(1) 3527/    1134 :                     .setup_list:
(1) 3528/    1134 : FD 7E 00            		ld	a,(iy)
(1) 3529/    1137 : FE FF               		cp	-1
(1) 3530/    1139 : 28 24               		jr	z,.end_setup
(1) 3531/    113B : FD 23               		inc	iy
(1) 3532/    113D : 6F                  		ld	l,a
(1) 3533/    113E : FD 66 00            		ld	h,(iy)
(1) 3534/    1141 : E5                  		push	hl
(1) 3535/    1142 : DD E1               		pop	ix
(1) 3536/    1144 : DD 71 14            		ld	(ix+trk_Priority),c
(1) 3537/    1147 : DD 36 01 FF         		ld	(ix+trk_SeqId),-1	; Reset sequence ID
(1) 3538/    114B : FD 23               		inc	iy
(1) 3539/    114D :                     	; iy - src
(1) 3540/    114D :                     	; hl - dst
(1) 3541/    114D : 11 04 00            		ld	de,trk_Blocks
(1) 3542/    1150 : 19                  		add	hl,de
(1) 3543/    1151 : 06 06               		ld	b,MAX_BUFFNTRY-2
(1) 3544/    1153 :                     .st_copy:
(1) 3545/    1153 : FD 7E 00            		ld	a,(iy)
(1) 3546/    1156 : 77                  		ld	(hl),a
(1) 3547/    1157 : FD 23               		inc	iy
(1) 3548/    1159 : 23                  		inc	hl
(1) 3549/    115A : 10 F7               		djnz	.st_copy
(1) 3550/    115C : 0C                  		inc	c
(1) 3551/    115D : 18 D5               		jr	.setup_list
(1) 3552/    115F :                     .end_setup:
(1) 3553/    115F : C9                  		ret
(1) 3554/    1160 :                     
(1) 3555/    1160 :                     ; 		ld	a,-1			; Reset
(1) 3556/    1160 :                     ; 		ld	(trkListPage),a
(1) 3557/    1160 :                     ; 		xor	a
(1) 3558/    1160 :                     ; 		jp	init_RomTrcks
(1) 3559/    1160 :                     
(1) 3560/    1160 :                     ; --------------------------------------------------------
(1) 3561/    1160 :                     ; get_tick
(1) 3562/    1160 :                     ;
(1) 3563/    1160 :                     ; Checks if VBlank triggred a TICK
(1) 3564/    1160 :                     ; (1/150 NTSC, 1/120 PAL)
(1) 3565/    1160 :                     ; --------------------------------------------------------
(1) 3566/    1160 :                     
(1) 3567/    1160 :                     get_tick:
(1) 3568/    1160 : F3                  		di				; Disable ints
(1) 3569/    1161 : F5                  		push	af
(1) 3570/    1162 : E5                  		push	hl
(1) 3571/    1163 : 21 81 1F            		ld	hl,tickFlag		; read last TICK flag
(1) 3572/    1166 : 7E                  		ld	a,(hl)			; non-zero value (1Fh)?
(1) 3573/    1167 : B7                  		or 	a
(1) 3574/    1168 : 28 13               		jr	z,.ctnotick
(1) 3575/    116A : 36 00               		ld	(hl),0			; Reset TICK flag
(1) 3576/    116C : 23                  		inc	hl			; Move to tickCnt
(1) 3577/    116D : 34                  		inc	(hl)			; and increment
(1) 3578/    116E : CF                  		rst	8
(1) 3579/    116F : D5                  		push	de
(1) 3580/    1170 : 2A A0 1F            		ld	hl,(sbeatAcc)		; Increment subbeats
(1) 3581/    1173 : ED 5B A2 1F         		ld	de,(sbeatPtck)
(1) 3582/    1177 : CF                  		rst	8
(1) 3583/    1178 : 19                  		add	hl,de
(1) 3584/    1179 : 22 A0 1F            		ld	(sbeatAcc),hl
(1) 3585/    117C : D1                  		pop	de
(1) 3586/    117D :                     .ctnotick:
(1) 3587/    117D : E1                  		pop	hl
(1) 3588/    117E : F1                  		pop	af
(1) 3589/    117F : FB                  		ei				; Enable ints again
(1) 3590/    1180 : C9                  		ret
(1) 3591/    1181 :                     
(1) 3592/    1181 :                     ; --------------------------------------------------------
(1) 3593/    1181 :                     ; transferRom
(1) 3594/    1181 :                     ;
(1) 3595/    1181 :                     ; Transfer bytes from ROM to RAM. This also tells
(1) 3596/    1181 :                     ; to 68k that we want to access ROM
(1) 3597/    1181 :                     ;
(1) 3598/    1181 :                     ; Input:
(1) 3599/    1181 :                     ; a  - 68K Address $xx0000
(1) 3600/    1181 :                     ;  c - Byte count (size 0 NOT allowed, MAX: 0FFh)
(1) 3601/    1181 :                     ; hl - 68K Address $00xxxx
(1) 3602/    1181 :                     ; de - Destination pointer
(1) 3603/    1181 :                     ;
(1) 3604/    1181 :                     ; Uses:
(1) 3605/    1181 :                     ; b
(1) 3606/    1181 :                     ;
(1) 3607/    1181 :                     ; Notes:
(1) 3608/    1181 :                     ; call RST 20h first if transfering anything other
(1) 3609/    1181 :                     ; than sample data, just to be safe.
(1) 3610/    1181 :                     ; --------------------------------------------------------
(1) 3611/    1181 :                     
(1) 3612/    1181 :                     transferRom:
(1) 3613/    1181 : FE FF               		cp	0FFh		; <-- WORKAROUND FOR $FF0000 area
(1) 3614/    1183 : 28 43               		jr	z,.from_ram
(1) 3615/    1185 : CF                  		rst	8
(1) 3616/    1186 : DD E5               		push	ix
(1) 3617/    1188 : DD 21 2F 00         		ld	ix,commZRomBlk	; ix - rom read/block flags
(1) 3618/    118C : 22 9E 1F            		ld	(x68ksrclsb),hl	; save hl copy
(1) 3619/    118F : CB BC               		res	7,h
(1) 3620/    1191 : 06 00               		ld	b,0
(1) 3621/    1193 : 0B                  		dec	bc
(1) 3622/    1194 : 09                  		add	hl,bc
(1) 3623/    1195 : CB 7C               		bit	7,h
(1) 3624/    1197 : 20 0B               		jr	nz,.double
(1) 3625/    1199 : 2A 9E 1F            		ld	hl,(x68ksrclsb)	; single transfer
(1) 3626/    119C : 0C                  		inc	c
(1) 3627/    119D : 47                  		ld	b,a
(1) 3628/    119E : CD E6 11            		call	.transfer
(1) 3629/    11A1 : DD E1               		pop	ix
(1) 3630/    11A3 : C9                  		ret
(1) 3631/    11A4 :                     .double:
(1) 3632/    11A4 : CF                  		rst	8
(1) 3633/    11A5 : 47                  		ld	b,a		; double transfer
(1) 3634/    11A6 : C5                  		push	bc
(1) 3635/    11A7 : E5                  		push	hl
(1) 3636/    11A8 : 79                  		ld	a,c
(1) 3637/    11A9 : 95                  		sub	a,l
(1) 3638/    11AA : 4F                  		ld	c,a
(1) 3639/    11AB : 2A 9E 1F            		ld	hl,(x68ksrclsb)
(1) 3640/    11AE : CD E6 11            		call	.transfer
(1) 3641/    11B1 : E1                  		pop	hl
(1) 3642/    11B2 : C1                  		pop	bc
(1) 3643/    11B3 :                     ; 		rst	8
(1) 3644/    11B3 : 4D                  		ld	c,l
(1) 3645/    11B4 : 0C                  		inc	c
(1) 3646/    11B5 : 3A 9F 1F            		ld	a,(x68ksrcmid)
(1) 3647/    11B8 : E6 80               		and	80h
(1) 3648/    11BA : C6 80               		add	a,80h
(1) 3649/    11BC : 67                  		ld	h,a
(1) 3650/    11BD : 2E 00               		ld	l,0
(1) 3651/    11BF : 30 01               		jr	nc,.x68knocarry
(1) 3652/    11C1 : 04                  		inc	b
(1) 3653/    11C2 :                     .x68knocarry:
(1) 3654/    11C2 : CD E6 11            		call	.transfer
(1) 3655/    11C5 : DD E1               		pop	ix
(1) 3656/    11C7 : C9                  		ret
(1) 3657/    11C8 :                     
(1) 3658/    11C8 :                     ; ------------------------------------------------
(1) 3659/    11C8 :                     ; WORKAROUND FOR READING FROM $FF0000 RAM
(1) 3660/    11C8 :                     ;
(1) 3661/    11C8 :                     ; On the 68K side YOU MUST CALL
(1) 3662/    11C8 :                     ; Sound_Update on a loop during Display.
(1) 3663/    11C8 :                     ; ------------------------------------------------
(1) 3664/    11C8 :                     
(1) 3665/    11C8 :                     .from_ram:
(1) 3666/    11C8 : ED 53 31 00         		ld	(cdRamDst),de
(1) 3667/    11CC : 22 33 00            		ld	(cdRamSrc),hl
(1) 3668/    11CF : 32 35 00            		ld	(cdRamSrcB),a
(1) 3669/    11D2 : CD DA 14            		call	gema_lastbank			; ** Set bank to $FF8000 area
(1) 3670/    11D5 : CF                  		rst	8
(1) 3671/    11D6 : 79                  		ld	a,c
(1) 3672/    11D7 : 32 30 00            		ld	(cdRamLen),a
(1) 3673/    11DA : 21 00 FF            		ld	hl,RAM_ZCdFlag_D&07FFFh+8000h	; ** EXTERNAL WRITE TO 68K RAM **
(1) 3674/    11DD : 36 01               		ld	(hl),1				; WRITE TO RAM: Set request, 68k clears.
(1) 3675/    11DF :                     .wait:
(1) 3676/    11DF : 3A 30 00            		ld	a,(cdRamLen)			; Wait until 68K clears this
(1) 3677/    11E2 : B7                  		or	a
(1) 3678/    11E3 : 20 FA               		jr	nz,.wait
(1) 3679/    11E5 : C9                  		ret
(1) 3680/    11E6 :                     
(1) 3681/    11E6 :                     ; ------------------------------------------------
(1) 3682/    11E6 :                     ; b  - Source ROM bank
(1) 3683/    11E6 :                     ;  c - Bytes to transfer (00h is invalid)
(1) 3684/    11E6 :                     ; hl - Source ROM $00xxxx | 8000h
(1) 3685/    11E6 :                     ; de - Destination address
(1) 3686/    11E6 :                     ; ix - ROM-block flag
(1) 3687/    11E6 :                     ; ------------------------------------------------
(1) 3688/    11E6 :                     
(1) 3689/    11E6 :                     .transfer:
(1) 3690/    11E6 : CF                  		rst	8
(1) 3691/    11E7 : D5                  		push	de
(1) 3692/    11E8 : 11 00 60            		ld	de,6000h
(1) 3693/    11EB : 7C                  		ld	a,h
(1) 3694/    11EC : 07                  		rlca
(1) 3695/    11ED : 12                  		ld	(de),a
(1) 3696/    11EE : 78                  		ld	a,b
(1) 3697/    11EF : CF                  		rst	8
(1) 3698/    11F0 : 12                  		ld	(de),a
(1) 3699/    11F1 : 0F                  		rrca
(1) 3700/    11F2 : 12                  		ld	(de),a
(1) 3701/    11F3 : 0F                  		rrca
(1) 3702/    11F4 : 12                  		ld	(de),a
(1) 3703/    11F5 : 0F                  		rrca
(1) 3704/    11F6 : 12                  		ld	(de),a
(1) 3705/    11F7 : 0F                  		rrca
(1) 3706/    11F8 : CF                  		rst	8
(1) 3707/    11F9 : 12                  		ld	(de),a
(1) 3708/    11FA : 0F                  		rrca
(1) 3709/    11FB : 12                  		ld	(de),a
(1) 3710/    11FC : 0F                  		rrca
(1) 3711/    11FD : 12                  		ld	(de),a
(1) 3712/    11FE : 0F                  		rrca
(1) 3713/    11FF : 12                  		ld	(de),a
(1) 3714/    1200 : D1                  		pop	de
(1) 3715/    1201 : CB FC               		set	7,h
(1) 3716/    1203 : CF                  		rst	8
(1) 3717/    1204 :                     
(1) 3718/    1204 :                     	; Transfer ROM data in packets
(1) 3719/    1204 :                     	; while playing the cache'd sample
(1) 3720/    1204 :                     	; *** CRITICAL PROCESS ***
(1) 3721/    1204 :                     	;
(1) 3722/    1204 :                     	; pseudo-ref for ldir:
(1) 3723/    1204 :                     	; ld (de),(hl)	; load (hl) to (de) directly
(1) 3724/    1204 :                     	; inc de	; next de
(1) 3725/    1204 :                     	; inc hl	; next hl
(1) 3726/    1204 :                     	; dec bc	; decrement bc
(1) 3727/    1204 :                     	;
(1) 3728/    1204 : 06 00               		ld	b,0
(1) 3729/    1206 : 79                  		ld	a,c		; a - Size counter
(1) 3730/    1207 :                     ; 		set	1,(ix)
(1) 3731/    1207 : D6 08               		sub	MAX_TRFRPZ	; Length lower than MAX_TRFRPZ?
(1) 3732/    1209 : 38 14               		jr	c,.x68klast	; Process single piece only
(1) 3733/    120B :                     .x68kloop:
(1) 3734/    120B : CF                  		rst	8
(1) 3735/    120C : 00                  		nop
(1) 3736/    120D : 0E 07               		ld	c,MAX_TRFRPZ-1
(1) 3737/    120F : DD CB 00 46         		bit	0,(ix)		; Genesis requests BUS?
(1) 3738/    1213 : C4 2D 12            		call	nz,.x68klpwt
(1) 3739/    1216 : ED B0               		ldir			; (de) to (hl) until bc == 0
(1) 3740/    1218 : CF                  		rst	8
(1) 3741/    1219 : 00                  		nop
(1) 3742/    121A : D6 07               		sub	a,MAX_TRFRPZ-1
(1) 3743/    121C : D2 0B 12            		jp	nc,.x68kloop
(1) 3744/    121F :                     ; last block
(1) 3745/    121F :                     .x68klast:
(1) 3746/    121F : C6 08               		add	a,MAX_TRFRPZ
(1) 3747/    1221 : 4F                  		ld	c,a
(1) 3748/    1222 : DD CB 00 46         		bit	0,(ix)		; Genesis requests BUS?
(1) 3749/    1226 : C4 2D 12            		call	nz,.x68klpwt
(1) 3750/    1229 : ED B0               		ldir
(1) 3751/    122B : CF                  		rst	8
(1) 3752/    122C : C9                  		ret
(1) 3753/    122D :                     
(1) 3754/    122D :                     ; Wait here until Genesis unlocks ROM
(1) 3755/    122D :                     .x68klpwt:
(1) 3756/    122D : 00                  		nop	; WAVE SYNC
(1) 3757/    122E : 00                  		nop
(1) 3758/    122F :                     .x68kpwtlp:
(1) 3759/    122F : CF                  		rst	8
(1) 3760/    1230 : 00                  		nop	; WAVE SYNC
(1) 3761/    1231 : 00                  		nop
(1) 3762/    1232 : DD CB 00 46         		bit	0,(ix)		; 68k finished?
(1) 3763/    1236 : 20 F7               		jr	nz,.x68kpwtlp
(1) 3764/    1238 : C9                  		ret
(1) 3765/    1239 :                     
(1) 3766/    1239 :                     ; ====================================================================
(1) 3767/    1239 :                     ; ----------------------------------------------------------------
(1) 3768/    1239 :                     ; Sound chip routines
(1) 3769/    1239 :                     ; ----------------------------------------------------------------
(1) 3770/    1239 :                     
(1) 3771/    1239 :                     ; --------------------------------------------------------
(1) 3772/    1239 :                     ; chip_env
(1) 3773/    1239 :                     ;
(1) 3774/    1239 :                     ; Process the PSG
(1) 3775/    1239 :                     ; --------------------------------------------------------
(1) 3776/    1239 :                     
(1) 3777/    1239 :                     chip_env:
(1) 3781/    1239 : FD 21 C0 16         		ld	iy,psgcom+3		; Start from NOISE first
(1) 3782/    123D : DD 21 11 7F         		ld	ix,Zpsg_ctrl
(1) 3783/    1241 : 0E E0               		ld	c,0E0h			; c - PSG first ctrl command
(1) 3784/    1243 : 06 04               		ld	b,4			; b - 4 channels
(1) 3785/    1245 :                     .vloop:
(1) 3786/    1245 : CF                  		rst	8
(1) 3787/    1246 : FD 5E 00            		ld	e,(iy+COM)		; e - current command
(1) 3788/    1249 : FD 36 00 00         		ld	(iy+COM),0
(1) 3789/    124D :                     
(1) 3790/    124D :                     	; ----------------------------
(1) 3791/    124D :                     	; bit 2 - stop sound
(1) 3792/    124D : CB 53               		bit	2,e
(1) 3793/    124F : 28 0C               		jr	z,.ckof
(1) 3794/    1251 : FD 36 04 FF         		ld	(iy+LEV),-1		; reset level
(1) 3795/    1255 : FD 36 28 01         		ld	(iy+FLG),1		; and update
(1) 3796/    1259 : FD 36 18 00         		ld	(iy+MODE),0		; envelope off
(1) 3797/    125D :                     .ckof:
(1) 3798/    125D :                     	; ----------------------------
(1) 3799/    125D :                     	; bit 1 - key off
(1) 3800/    125D : CB 4B               		bit	1,e
(1) 3801/    125F : 28 0F               		jr      z,.ckon
(1) 3802/    1261 : FD 7E 18            		ld	a,(iy+MODE)		; mode 0?
(1) 3803/    1264 : B7                  		or	a
(1) 3804/    1265 : 28 09               		jr	z,.ckon
(1) 3805/    1267 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3806/    126B : FD 36 18 04         		ld	(iy+MODE),100b		; set envelope mode 100b
(1) 3807/    126F : CF                  		rst	8
(1) 3808/    1270 :                     .ckon:
(1) 3809/    1270 :                     	; ----------------------------
(1) 3810/    1270 :                     	; bit 0 - key on
(1) 3811/    1270 : CB 43               		bit	0,e
(1) 3812/    1272 : 28 1A               		jr	z,.envproc
(1) 3813/    1274 : FD 36 04 FF         		ld	(iy+LEV),-1		; reset level
(1) 3814/    1278 : 78                  		ld	a,b
(1) 3815/    1279 : FE 04               		cp	4			; NOISE channel?
(1) 3816/    127B : 20 08               		jr	nz,.nskip
(1) 3817/    127D : CF                  		rst	8			; Set NOISE mode
(1) 3818/    127E : 3A 83 1F            		ld	a,(psgHatMode)		; write hat mode only.
(1) 3819/    1281 : B1                  		or	c
(1) 3820/    1282 : DD 77 00            		ld	(ix),a			; WRITE PSG
(1) 3821/    1285 :                     .nskip:
(1) 3822/    1285 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3823/    1289 : CF                  		rst	8
(1) 3824/    128A : FD 36 18 01         		ld	(iy+MODE),001b		; set to attack mode
(1) 3825/    128E :                     .nblock:
(1) 3826/    128E :                     
(1) 3827/    128E :                     	; ----------------------------
(1) 3828/    128E :                     	; Process effects
(1) 3829/    128E :                     	; ----------------------------
(1) 3830/    128E :                     .envproc:
(1) 3831/    128E : FD 7E 18            		ld	a,(iy+MODE)
(1) 3832/    1291 : B7                  		or	a			; no modes
(1) 3833/    1292 : CA 18 13            		jp	z,.vedlp
(1) 3834/    1295 : FE 01               		cp 	001b			; Attack mode
(1) 3835/    1297 : 20 2C               		jr	nz,.chk2
(1) 3836/    1299 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3837/    129D : FD 5E 24            		ld	e,(iy+ALV)
(1) 3838/    12A0 : FD 7E 08            		ld	a,(iy+ATK)		; if ATK == 0, don't use
(1) 3839/    12A3 : B7                  		or	a
(1) 3840/    12A4 : 28 16               		jr	z,.atkend
(1) 3841/    12A6 : 57                  		ld	d,a			; c - attack rate
(1) 3842/    12A7 : 7B                  		ld	a,e			; a - attack level
(1) 3843/    12A8 : CF                  		rst	8
(1) 3844/    12A9 : FD 5E 24            		ld	e,(iy+ALV)		; b - OLD attack level
(1) 3845/    12AC : 92                  		sub	a,d			; (attack rate) - (level)
(1) 3846/    12AD : 38 0D               		jr	c,.atkend		; if carry: already finished
(1) 3847/    12AF : 28 0B               		jr	z,.atkend		; if zero: no attack rate
(1) 3848/    12B1 : BB                  		cp	e			; attack rate == level?
(1) 3849/    12B2 : 38 08               		jr	c,.atkend
(1) 3850/    12B4 : 28 06               		jr	z,.atkend
(1) 3851/    12B6 : FD 77 04            		ld	(iy+LEV),a		; set new level
(1) 3852/    12B9 : CF                  		rst	8
(1) 3853/    12BA : 18 5C               		jr	.vedlp
(1) 3854/    12BC :                     .atkend:
(1) 3855/    12BC : FD 73 04            		ld	(iy+LEV),e		; attack level = new level
(1) 3856/    12BF :                     .atkzero:
(1) 3857/    12BF : FD 36 18 02         		ld	(iy+MODE),010b		; set to decay mode
(1) 3858/    12C3 : 18 53               		jr	.vedlp
(1) 3859/    12C5 :                     .chk2:
(1) 3860/    12C5 :                     
(1) 3861/    12C5 : FE 02               		cp	010b			; Decay mode
(1) 3862/    12C7 : 20 31               		jr	nz,.chk4
(1) 3863/    12C9 :                     .dectmr:
(1) 3864/    12C9 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3865/    12CD : FD 7E 04            		ld	a,(iy+LEV)		; a - Level
(1) 3866/    12D0 : FD 5E 10            		ld	e,(iy+SLV)		; b - Sustain
(1) 3867/    12D3 : BB                  		cp	e
(1) 3868/    12D4 : 38 0D               		jr	c,.dkadd		; if carry: add
(1) 3869/    12D6 : 28 18               		jr	z,.dkyend		; if zero:  finish
(1) 3870/    12D8 : CF                  		rst	8
(1) 3871/    12D9 : FD 96 0C            		sub	(iy+DKY)		; substract decay rate
(1) 3872/    12DC : 38 12               		jr	c,.dkyend		; finish if wraped.
(1) 3873/    12DE : BB                  		cp	e			; compare level
(1) 3874/    12DF : 38 0F               		jr	c,.dkyend		; and finish
(1) 3875/    12E1 : 18 08               		jr	.dksav
(1) 3876/    12E3 :                     .dkadd:
(1) 3877/    12E3 : FD 86 0C            		add	a,(iy+DKY)		;  (level) + (decay rate)
(1) 3878/    12E6 : 38 08               		jr	c,.dkyend		; finish if wraped.
(1) 3879/    12E8 : BB                  		cp	e			; compare level
(1) 3880/    12E9 : 30 05               		jr	nc,.dkyend
(1) 3881/    12EB :                     .dksav:
(1) 3882/    12EB : FD 77 04            		ld	(iy+LEV),a		; save new level
(1) 3883/    12EE : 18 28               		jr	.vedlp
(1) 3884/    12F0 :                     .dkyend:
(1) 3885/    12F0 : CF                  		rst	8
(1) 3886/    12F1 : FD 73 04            		ld	(iy+LEV),e		; save last attack
(1) 3887/    12F4 : FD 36 18 04         		ld	(iy+MODE),100b		; and set to sustain
(1) 3888/    12F8 : 18 1E               		jr	.vedlp
(1) 3889/    12FA :                     .chk4:
(1) 3890/    12FA : FE 04               		cp	100b			; Sustain phase
(1) 3891/    12FC : 20 1A               		jr	nz,.vedlp
(1) 3892/    12FE : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3893/    1302 : FD 7E 04            		ld	a,(iy+LEV)		; a - Level
(1) 3894/    1305 : CF                  		rst	8
(1) 3895/    1306 : FD 86 14            		add 	a,(iy+RRT)		; add Release Rate
(1) 3896/    1309 : 38 05               		jr	c,.killenv		; release done
(1) 3897/    130B : FD 77 04            		ld	(iy+LEV),a		; set new Level
(1) 3898/    130E : 18 08               		jr	.vedlp
(1) 3899/    1310 :                     .killenv:
(1) 3900/    1310 : FD 36 04 FF         		ld	(iy+LEV),-1		; Silence this channel
(1) 3901/    1314 : FD 36 18 00         		ld	(iy+MODE),0		; Reset mode
(1) 3902/    1318 :                     .vedlp:
(1) 3903/    1318 :                     
(1) 3904/    1318 :                     	; ----------------------------
(1) 3905/    1318 :                     	; PSG UPDATE
(1) 3906/    1318 :                     	; ----------------------------
(1) 3907/    1318 : FD 7E 28            		ld	a,(iy+FLG)
(1) 3908/    131B : B7                  		or	a
(1) 3909/    131C : 28 72               		jr	z,.noupd
(1) 3910/    131E : FD 36 28 00         		ld	(iy+FLG),0	; Reset until next one
(1) 3911/    1322 : 59                  		ld	e,c
(1) 3912/    1323 : 3A 83 1F            		ld	a,(psgHatMode)
(1) 3913/    1326 : 57                  		ld	d,a
(1) 3914/    1327 : E6 03               		and	011b
(1) 3915/    1329 : FE 03               		cp	011b
(1) 3916/    132B : 20 1D               		jr	nz,.normal
(1) 3917/    132D : CF                  		rst	8
(1) 3918/    132E : 78                  		ld	a,b		; Channel 4?
(1) 3919/    132F : FE 03               		cp	3
(1) 3920/    1331 : 28 13               		jr	z,.silnc_3
(1) 3921/    1333 : FE 04               		cp	4
(1) 3922/    1335 : 20 18               		jr	nz,.do_nfreq
(1) 3923/    1337 : 3A 83 1F            		ld	a,(psgHatMode)
(1) 3924/    133A : 57                  		ld	d,a
(1) 3925/    133B : E6 03               		and	011b
(1) 3926/    133D : CF                  		rst	8
(1) 3927/    133E : FE 03               		cp	011b
(1) 3928/    1340 : 20 30               		jr	nz,.vonly
(1) 3929/    1342 : 1E C0               		ld	e,0C0h
(1) 3930/    1344 : 18 09               		jr	.do_nfreq
(1) 3931/    1346 :                     .silnc_3:
(1) 3932/    1346 : 3E FF               		ld	a,-1
(1) 3933/    1348 : 18 32               		jr	.vlmuch
(1) 3934/    134A :                     .normal:
(1) 3935/    134A : 78                  		ld	a,b
(1) 3936/    134B : FE 04               		cp	4
(1) 3937/    134D : 28 23               		jr	z,.vonly
(1) 3938/    134F :                     .do_nfreq:
(1) 3939/    134F : FD 6E 1C            		ld	l,(iy+DTL)
(1) 3940/    1352 : FD 66 20            		ld	h,(iy+DTH)
(1) 3941/    1355 :                     
(1) 3942/    1355 :                     	; freq effects go here
(1) 3943/    1355 :                     	; (save e FIRST.)
(1) 3944/    1355 :                     	;	push	de
(1) 3945/    1355 :                     	;	pop	de
(1) 3946/    1355 : 7D                  		ld	a,l		; Grab LSB 4 right bits
(1) 3947/    1356 : E6 0F               		and	00001111b
(1) 3948/    1358 : B3                  		or	e		; OR with channel set in e
(1) 3949/    1359 : CF                  		rst	8
(1) 3950/    135A : DD 77 00            		ld	(ix),a		; write it
(1) 3951/    135D : 7D                  		ld	a,l		; Grab LSB 4 left bits
(1) 3952/    135E : 0F                  		rrca
(1) 3953/    135F : 0F                  		rrca
(1) 3954/    1360 : 0F                  		rrca
(1) 3955/    1361 : 0F                  		rrca
(1) 3956/    1362 : E6 0F               		and	00001111b
(1) 3957/    1364 : 5F                  		ld	e,a
(1) 3958/    1365 : 7C                  		ld	a,h		; Grab MSB bits
(1) 3959/    1366 : CF                  		rst	8
(1) 3960/    1367 : 07                  		rlca
(1) 3961/    1368 : 07                  		rlca
(1) 3962/    1369 : 07                  		rlca
(1) 3963/    136A : 07                  		rlca
(1) 3964/    136B : E6 30               		and	00110000b
(1) 3965/    136D : B3                  		or	e
(1) 3966/    136E : DD 77 00            		ld	(ix),a
(1) 3967/    1371 : CF                  		rst	8
(1) 3968/    1372 :                     .vonly:
(1) 3969/    1372 : FD 7E 30            		ld	a,(iy+PVOL)		; c - Level
(1) 3970/    1375 : FD 86 04            		add	a,(iy+LEV)		; Add MASTER volume
(1) 3971/    1378 : 30 02               		jr	nc,.vlmuch
(1) 3972/    137A : 3E FF               		ld	a,-1
(1) 3973/    137C :                     .vlmuch:
(1) 3974/    137C : CB 3F               		srl	a			; (Level >> 4)
(1) 3975/    137E : CB 3F               		srl	a
(1) 3976/    1380 : CB 3F               		srl	a
(1) 3977/    1382 : CF                  		rst	8
(1) 3978/    1383 : CB 3F               		srl	a
(1) 3979/    1385 : E6 0F               		and	00001111b		; Filter volume value
(1) 3980/    1387 : B1                  		or	c			; and OR with current channel
(1) 3981/    1388 : F6 90               		or	90h			; Set volume-set mode
(1) 3983/    138A : DD 77 00            		ld	(ix),a			; *** WRITE volume
(1) 3985/    138D : FD 34 38            		inc	(iy+PTMR)		; Update general timer
(1) 3986/    1390 :                     .noupd:
(1) 3987/    1390 :                     	; ----------------------------
(1) 3988/    1390 : FD 2B               		dec	iy			; next COM to check (backwards)
(1) 3989/    1392 : 79                  		ld	a,c
(1) 3990/    1393 : CF                  		rst	8
(1) 3991/    1394 : D6 20               		sub	a,20h			; next PSG (backwards)
(1) 3992/    1396 : 4F                  		ld	c,a
(1) 3993/    1397 : 05                  		dec	b
(1) 3994/    1398 : C2 45 12            		jp	nz,.vloop
(1) 3995/    139B : C9                  		ret
(1) 3996/    139C :                     
(1) 3997/    139C :                     ; ---------------------------------------------
(1) 3998/    139C :                     ; FM register writes
(1) 3999/    139C :                     ;
(1) 4000/    139C :                     ; Input:
(1) 4001/    139C :                     ; d - ctrl
(1) 4002/    139C :                     ; e - data
(1) 4003/    139C :                     ; ---------------------------------------------
(1) 4004/    139C :                     
(1) 4005/    139C :                     ; c - KeyID
(1) 4006/    139C :                     fm_autoreg:
(1) 4007/    139C : CB 51               		bit	2,c
(1) 4008/    139E : 20 0B               		jr	nz,fm_send_2
(1) 4009/    13A0 :                     
(1) 4010/    13A0 :                     ; Channels 1-3 and global registers
(1) 4011/    13A0 :                     fm_send_1:
(1) 4012/    13A0 : 7A                  		ld	a,d
(1) 4013/    13A1 : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 4014/    13A4 : 00                  		nop
(1) 4015/    13A5 : 7B                  		ld	a,e
(1) 4016/    13A6 : 32 01 40            		ld	(Zym_data_1),a
(1) 4017/    13A9 : 00                  		nop
(1) 4018/    13AA : C9                  		ret
(1) 4019/    13AB :                     ; Channels 4-6
(1) 4020/    13AB :                     fm_send_2:
(1) 4021/    13AB : 7A                  		ld	a,d
(1) 4022/    13AC : 32 02 40            		ld	(Zym_ctrl_2),a
(1) 4023/    13AF : 00                  		nop
(1) 4024/    13B0 : 7B                  		ld	a,e
(1) 4025/    13B1 : 32 03 40            		ld	(Zym_data_2),a
(1) 4026/    13B4 : 00                  		nop
(1) 4027/    13B5 : C9                  		ret
(1) 4028/    13B6 :                     
(1) 4029/    13B6 :                     ; --------------------------------------------------------
(1) 4030/    13B6 :                     ; brute-force WAVE ON/OFF playback
(1) 4031/    13B6 :                     ; --------------------------------------------------------
(1) 4032/    13B6 :                     
(1) 4033/    13B6 :                     dac_on:
(1) 4034/    13B6 : 3E 2B               		ld	a,2Bh
(1) 4035/    13B8 : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 4036/    13BB : 3E 80               		ld	a,80h
(1) 4037/    13BD : 32 01 40            		ld	(Zym_data_1),a
(1) 4038/    13C0 : 3E D9               		ld 	a,zopcExx
(1) 4039/    13C2 : 32 08 00            		ld	(dac_me),a
(1) 4040/    13C5 : 3E F5               		ld 	a,zopcPushAf
(1) 4041/    13C7 : 32 20 00            		ld	(dac_fill),a
(1) 4042/    13CA : C9                  		ret
(1) 4043/    13CB :                     dac_off:
(1) 4044/    13CB : 3E 2B               		ld	a,2Bh
(1) 4045/    13CD : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 4046/    13D0 : 3E 00               		ld	a,00h
(1) 4047/    13D2 : 32 01 40            		ld	(Zym_data_1),a
(1) 4048/    13D5 : 3E C9               		ld 	a,zopcRet
(1) 4049/    13D7 : 32 08 00            		ld	(dac_me),a
(1) 4050/    13DA : 3E C9               		ld 	a,zopcRet
(1) 4051/    13DC : 32 20 00            		ld	(dac_fill),a
(1) 4052/    13DF : C9                  		ret
(1) 4053/    13E0 :                     
(1) 4054/    13E0 :                     ; --------------------------------------------------------
(1) 4055/    13E0 :                     ; dac_play
(1) 4056/    13E0 :                     ;
(1) 4057/    13E0 :                     ; Plays a new sample
(1) 4058/    13E0 :                     ;
(1) 4059/    13E0 :                     ; NOTE:
(1) 4060/    13E0 :                     ; Set wave_Flags and wave_Pitch externally
(1) 4061/    13E0 :                     ; getting here.
(1) 4062/    13E0 :                     ; --------------------------------------------------------
(1) 4063/    13E0 :                     
(1) 4064/    13E0 :                     dac_play:
(1) 4065/    13E0 : F3                  		di
(1) 4066/    13E1 : CD CB 13            		call	dac_off
(1) 4067/    13E4 : D9                  		exx				; flip exx regs
(1) 4068/    13E5 : 01 1D 00            		ld	bc,dWaveBuff>>8		; bc - WAVFIFO MSB
(1) 4069/    13E8 : ED 5B 92 1F         		ld	de,(wave_Pitch)		; de - Pitch
(1) 4070/    13EC : 21 00 00            		ld	hl,(dWaveBuff&0FFh)<<8	; hl - WAVFIFO LSB pointer (xx.00)
(1) 4071/    13EF : D9                  		exx				; move them back
(1) 4072/    13F0 : 2A 89 1F            		ld	hl,(wave_Start)		; copy Start and length
(1) 4073/    13F3 : 3A 8B 1F            		ld 	a,(wave_Start+2)
(1) 4074/    13F6 : 22 98 1F            		ld	(dDacPntr),hl
(1) 4075/    13F9 : 32 9A 1F            		ld	(dDacPntr+2),a
(1) 4076/    13FC : 2A 8C 1F            		ld	hl,(wave_Len)
(1) 4077/    13FF : 3A 8E 1F            		ld 	a,(wave_Len+2)
(1) 4078/    1402 : 22 9B 1F            		ld	(dDacCntr),hl
(1) 4079/    1405 : 32 9D 1F            		ld	(dDacCntr+2),a
(1) 4080/    1408 : AF                  		xor	a
(1) 4081/    1409 : 32 97 1F            		ld	(dDacFifoMid),a		; Reset half-way
(1) 4082/    140C : CD 14 14            		call	dac_refill
(1) 4083/    140F : CD B6 13            		call	dac_on
(1) 4084/    1412 : FB                  		ei
(1) 4085/    1413 : C9                  		ret
(1) 4086/    1414 :                     
(1) 4087/    1414 :                     ; --------------------------------------------------------
(1) 4088/    1414 :                     
(1) 4089/    1414 :                     dac_refill:
(1) 4090/    1414 : CF                  		rst	8
(1) 4091/    1415 : C5                  		push	bc
(1) 4092/    1416 : D5                  		push	de
(1) 4093/    1417 : E5                  		push	hl
(1) 4094/    1418 : 3A 94 1F            		ld	a,(wave_Flags)	; Already finished?
(1) 4095/    141B : FE 07               		cp	111b
(1) 4096/    141D : D2 D3 14            		jp	nc,.dacfill_end
(1) 4097/    1420 : 3A 9D 1F            		ld	a,(dDacCntr+2)	; Last bytes
(1) 4098/    1423 : 2A 9B 1F            		ld	hl,(dDacCntr)
(1) 4099/    1426 : 01 80 00            		ld	bc,80h
(1) 4100/    1429 : 37                  		scf
(1) 4101/    142A : 3F                  		ccf
(1) 4102/    142B : ED 42               		sbc	hl,bc
(1) 4103/    142D : DE 00               		sbc	a,0
(1) 4104/    142F : 32 9D 1F            		ld	(dDacCntr+2),a
(1) 4105/    1432 : 22 9B 1F            		ld	(dDacCntr),hl
(1) 4106/    1435 : 16 1D               		ld	d,dWaveBuff>>8
(1) 4107/    1437 : B7                  		or	a
(1) 4108/    1438 : FA 62 14            		jp	m,.dac_over
(1) 4109/    143B : 3A 97 1F            		ld	a,(dDacFifoMid)	; Update halfway value
(1) 4110/    143E : 5F                  		ld	e,a
(1) 4111/    143F : C6 80               		add 	a,80h
(1) 4112/    1441 : 32 97 1F            		ld	(dDacFifoMid),a
(1) 4113/    1444 : 2A 98 1F            		ld	hl,(dDacPntr)
(1) 4114/    1447 : 3A 9A 1F            		ld	a,(dDacPntr+2)
(1) 4115/    144A : CD 81 11            		call	transferRom	; *** ROM ACCESS ***
(1) 4116/    144D : 2A 98 1F            		ld	hl,(dDacPntr)
(1) 4117/    1450 : 3A 9A 1F            		ld	a,(dDacPntr+2)
(1) 4118/    1453 : 01 80 00            		ld	bc,80h
(1) 4119/    1456 : 09                  		add	hl,bc
(1) 4120/    1457 : CE 00               		adc	a,0
(1) 4121/    1459 : 22 98 1F            		ld	(dDacPntr),hl
(1) 4122/    145C : 32 9A 1F            		ld	(dDacPntr+2),a
(1) 4123/    145F : C3 D6 14            		jp	.dacfill_ret
(1) 4124/    1462 :                     
(1) 4125/    1462 :                     ; NOTE: This doesn't finish at the exact END point
(1) 4126/    1462 :                     ; but the player won't notice it.
(1) 4127/    1462 :                     
(1) 4128/    1462 :                     .dac_over:
(1) 4129/    1462 : 16 1D               		ld	d,dWaveBuff>>8
(1) 4130/    1464 : 3A 94 1F            		ld	a,(wave_Flags)	; LOOP enabled?
(1) 4131/    1467 : E6 01               		and	001b
(1) 4132/    1469 : C2 8C 14            		jp	nz,.dacfill_loop
(1) 4133/    146C : 7D                  		ld	a,l
(1) 4134/    146D : C6 80               		add	a,80h
(1) 4135/    146F : 4F                  		ld	c,a
(1) 4136/    1470 : 06 00               		ld	b,0
(1) 4137/    1472 : C5                  		push	bc
(1) 4138/    1473 : 3A 97 1F            		ld	a,(dDacFifoMid)
(1) 4139/    1476 : 5F                  		ld	e,a
(1) 4140/    1477 : C6 80               		add	a,80h
(1) 4141/    1479 : 32 97 1F            		ld	(dDacFifoMid),a
(1) 4142/    147C : C1                  		pop	bc
(1) 4143/    147D : 79                  		ld	a,c
(1) 4144/    147E : B0                  		or	b
(1) 4145/    147F : 28 52               		jr	z,.dacfill_end
(1) 4146/    1481 : 2A 98 1F            		ld	hl,(dDacPntr)
(1) 4147/    1484 : 3A 9A 1F            		ld	a,(dDacPntr+2)
(1) 4148/    1487 : CD 81 11            		call	transferRom	; *** ROM ACCESS ***
(1) 4149/    148A : 18 47               		jr	.dacfill_end
(1) 4150/    148C :                     .dacfill_loop:
(1) 4151/    148C :                     	; loop sample
(1) 4152/    148C : C5                  		push	bc
(1) 4153/    148D : D5                  		push	de
(1) 4154/    148E : 3A 91 1F            		ld	a,(wave_Loop+2)
(1) 4155/    1491 : 4F                  		ld	c,a
(1) 4156/    1492 : ED 5B 8F 1F         		ld	de,(wave_Loop)
(1) 4157/    1496 : 2A 89 1F            		ld	hl,(wave_Start)
(1) 4158/    1499 : 3A 8B 1F            		ld 	a,(wave_Start+2)
(1) 4159/    149C : 81                  		add	a,c
(1) 4160/    149D : 19                  		add	hl,de
(1) 4161/    149E : CE 00               		adc	a,0
(1) 4162/    14A0 : 22 98 1F            		ld	(dDacPntr),hl
(1) 4163/    14A3 : 32 9A 1F            		ld	(dDacPntr+2),a
(1) 4164/    14A6 : 2A 8C 1F            		ld	hl,(wave_Len)
(1) 4165/    14A9 : 3A 8E 1F            		ld 	a,(wave_Len+2)
(1) 4166/    14AC : 91                  		sub	a,c
(1) 4167/    14AD : 37                  		scf
(1) 4168/    14AE : 3F                  		ccf
(1) 4169/    14AF : ED 52               		sbc	hl,de
(1) 4170/    14B1 : DE 00               		sbc	a,0
(1) 4171/    14B3 : 22 9B 1F            		ld	(dDacCntr),hl
(1) 4172/    14B6 : 32 9D 1F            		ld	(dDacCntr+2),a
(1) 4173/    14B9 : D1                  		pop	de
(1) 4174/    14BA : C1                  		pop	bc
(1) 4175/    14BB : 78                  		ld	a,b
(1) 4176/    14BC : B1                  		or	c
(1) 4177/    14BD : 28 17               		jr	z,.dacfill_ret
(1) 4178/    14BF : 3A 97 1F            		ld	a,(dDacFifoMid)
(1) 4179/    14C2 : 5F                  		ld	e,a
(1) 4180/    14C3 : C6 80               		add	a,80h
(1) 4181/    14C5 : 32 97 1F            		ld	(dDacFifoMid),a
(1) 4182/    14C8 : 2A 98 1F            		ld	hl,(dDacPntr)
(1) 4183/    14CB : 3A 9A 1F            		ld	a,(dDacPntr+2)
(1) 4184/    14CE : CD 81 11            		call	transferRom	; *** ROM ACCESS ***
(1) 4185/    14D1 : 18 03               		jr	.dacfill_ret
(1) 4186/    14D3 :                     .dacfill_end:
(1) 4187/    14D3 : CD CB 13            		call	dac_off		; DAC finished
(1) 4188/    14D6 :                     .dacfill_ret:
(1) 4189/    14D6 : E1                  		pop	hl
(1) 4190/    14D7 : D1                  		pop	de
(1) 4191/    14D8 : C1                  		pop	bc
(1) 4192/    14D9 : C9                  		ret
(1) 4193/    14DA :                     
(1) 4194/    14DA :                     ; ----------------------------------------------------------------
(1) 4195/    14DA :                     ; Two purposes:
(1) 4196/    14DA :                     ;
(1) 4197/    14DA :                     ; Set the BANK to the very last part of memory for the
(1) 4198/    14DA :                     ; transferRom to read from RAM
(1) 4199/    14DA :                     ;
(1) 4200/    14DA :                     ; On 32X, sets the bank out of the ROM reading areas due
(1) 4201/    14DA :                     ; to a conflict with the PSG
(1) 4202/    14DA :                     ;
(1) 4203/    14DA :                     ; Uses:
(1) 4204/    14DA :                     ; hl,b
(1) 4205/    14DA :                     ; ----------------------------------------------------------------
(1) 4206/    14DA :                     
(1) 4207/    14DA :                     gema_lastbank:
(1) 4208/    14DA : 21 00 60            		ld	hl,6000h
(1) 4209/    14DD : 06 09               		ld	b,9		; 9 bits
(1) 4210/    14DF :                     .write:
(1) 4211/    14DF : 36 01               		ld	(hl),1
(1) 4212/    14E1 : 10 FC               		djnz	.write
(1) 4213/    14E3 : CF                  		rst	8
(1) 4214/    14E4 : C9                  		ret
(1) 4215/    14E5 :                     
(1) 4216/    14E5 :                     ; ----------------------------------------------------------------
(1) 4217/    14E5 :                     ; FM cache list
(1) 4218/    14E5 :                     ; ----------------------------------------------------------------
(1) 4219/    14E5 :                     
(1) 4220/    14E5 : F9 16               fmcach_list:	dw fmcach_1
(1) 4221/    14E7 : 21 17               		dw fmcach_2
(1) 4222/    14E9 : 49 17               		dw fmcach_3
(1) 4223/    14EB : 00 00               		dw 0		; <-- skipped
(1) 4224/    14ED : 71 17               		dw fmcach_4
(1) 4225/    14EF : 99 17               		dw fmcach_5
(1) 4226/    14F1 : C1 17               		dw fmcach_6
(1) 4227/    14F3 :                     
(1) 4228/    14F3 :                     ; ====================================================================
(1) 4229/    14F3 :                     ; ----------------------------------------------------------------
(1) 4230/    14F3 :                     ; Tables
(1) 4231/    14F3 :                     ; ----------------------------------------------------------------
(1) 4232/    14F3 :                     
(1) 4233/    14F3 : 84 02               fmFreq_List:	dw 644
(1) 4234/    14F5 : A9 02               		dw 681
(1) 4235/    14F7 : D2 02               		dw 722
(1) 4236/    14F9 : FD 02               		dw 765
(1) 4237/    14FB : 2A 03               		dw 810
(1) 4238/    14FD : 5A 03               		dw 858
(1) 4239/    14FF : 8E 03               		dw 910
(1) 4240/    1501 : C4 03               		dw 964
(1) 4241/    1503 : FD 03               		dw 1021
(1) 4242/    1505 : 39 04               		dw 1081
(1) 4243/    1507 : 7A 04               		dw 1146
(1) 4244/    1509 : BE 04               		dw 1214
(1) 4245/    150B :                     psgFreq_List:
(1) 4246/    150B :                     ; 	dw    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1	; x-0
(1) 4247/    150B :                     ; 	dw    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1	; x-1
(1) 4248/    150B :                     ; 	dw    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1	; x-2
(1) 4249/    150B : FF FF FF FF FF FF   	dw    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,03F8h,03BFh,0389h	; x-3
             1511 : FF FF FF FF FF FF 
             1517 : FF FF FF FF FF FF 
             151D : F8 03 BF 03 89 03 
(1) 4250/    1523 : 56 03 26 03 F9 02   	dw 0356h,0326h,02F9h,02CEh,02A5h,0280h,025Ch,023Ah,021Ah,01FBh,01DFh,01C4h	; x-4
             1529 : CE 02 A5 02 80 02 
             152F : 5C 02 3A 02 1A 02 
             1535 : FB 01 DF 01 C4 01 
(1) 4251/    153B : AB 01 93 01 7D 01   	dw 01ABh,0193h,017Dh,0167h,0153h,0140h,012Eh,011Dh,010Dh,00FEh,00EFh,00E2h	; x-5
             1541 : 67 01 53 01 40 01 
             1547 : 2E 01 1D 01 0D 01 
             154D : FE 00 EF 00 E2 00 
(1) 4252/    1553 : D6 00 C9 00 BE 00   	dw 00D6h,00C9h,00BEh,00B4h,00A9h,00A0h,0097h,008Fh,0087h,007Fh,0078h,0071h	; x-6
             1559 : B4 00 A9 00 A0 00 
             155F : 97 00 8F 00 87 00 
             1565 : 7F 00 78 00 71 00 
(1) 4253/    156B :                     ; 	dw 006Bh,0065h,005Fh,005Ah,0055h,0050h,004Bh,0047h,0043h,0040h,003Ch,0039h	; x-7
(1) 4254/    156B :                     ; 	dw 0036h,0033h,0030h,002Dh,002Bh,0028h,0026h,0024h,0022h,0020h,001Fh,001Dh	; x-8 *
(1) 4255/    156B :                     ; 	dw 001Bh,001Ah,0018h,0017h,0016h,0015h,0013h,0012h,0011h,0010h,0009h,0008h	; x-9 *
(1) 4256/    156B :                     
(1) 4257/    156B :                     
(1) 4258/    156B :                     ; ----------------------------------------
(1) 4259/    156B :                     ; DAC and PWM
(1) 4260/    156B :                     ;
(1) 4261/    156B :                     ; DAC base: 16000hz
(1) 4262/    156B :                     ; PWM base: 22050hz
(1) 4263/    156B :                     ; ----------------------------------------
(1) 4264/    156B :                     wavFreq_List:
(1) 4265/    156B :                     	;   C     C#    D     D#    E     F     F#    G     G#    A     A#    B
(1) 4266/    156B :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-0
(1) 4267/    156B :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-1
(1) 4268/    156B :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0036h,003Bh	; x-2
(1) 4269/    156B : 3E 00 43 00 46 00   	dw 003Eh,0043h,0046h,0049h,004Eh,0054h,0058h,005Eh,0063h,0068h,0070h,0075h	; x-3
             1571 : 49 00 4E 00 54 00 
             1577 : 58 00 5E 00 63 00 
             157D : 68 00 70 00 75 00 
(1) 4270/    1583 : 85 00 87 00 8C 00   	dw 0085h,0087h,008Ch,009Ah,00A4h,00ADh,00B2h,00C0h,00CCh,00D7h,00E6h,00F0h	; x-4
             1589 : 9A 00 A4 00 AD 00 
             158F : B2 00 C0 00 CC 00 
             1595 : D7 00 E6 00 F0 00 
(1) 4271/    159B : 00 01 10 01 20 01   	dw 0100h,0110h,0120h,012Eh,0147h,015Ah,016Ah,017Fh,0191h,01ACh,01C2h,01E0h	; x-5
             15A1 : 2E 01 47 01 5A 01 
             15A7 : 6A 01 7F 01 91 01 
             15AD : AC 01 C2 01 E0 01 
(1) 4272/    15B3 : F8 01 10 02 40 02   	dw 01F8h,0210h,0240h,0260h,0280h,02A0h,02D0h,02F8h,0320h,0350h,0380h,03C0h	; x-6
             15B9 : 60 02 80 02 A0 02 
             15BF : D0 02 F8 02 20 03 
             15C5 : 50 03 80 03 C0 03 
(1) 4273/    15CB :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-7
(1) 4274/    15CB :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-8
(1) 4275/    15CB :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-9
(1) 4276/    15CB :                     
(1) 4277/    15CB :                     ; ----------------------------------------
(1) 4278/    15CB :                     ; SegaCD PCM ONLY
(1) 4279/    15CB :                     ;
(1) 4280/    15CB :                     ; PCM base: 32000hz
(1) 4281/    15CB :                     ; ----------------------------------------
(1) 4282/    15CB :                     wavFreq_CdPcm:
(1) 4283/    15CB :                     	;     C     C#     D      D#     E      F      F#     G      G#     A      A#     B
(1) 4284/    15CB :                     ; 	dw  0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h	; x-0
(1) 4285/    15CB :                     ; 	dw  0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h	; x-1
(1) 4286/    15CB :                     ; 	dw  0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h	; x-2  4000 unchecked
(1) 4287/    15CB : F8 01 14 02 3C 02   	dw  01F8h, 0214h, 023Ch, 0258h, 027Ch, 02A0h, 02C8h, 02F4h, 031Ch, 0348h, 037Ch, 03B0h	; x-3  8000 ok
             15D1 : 58 02 7C 02 A0 02 
             15D7 : C8 02 F4 02 1C 03 
             15DD : 48 03 7C 03 B0 03 
(1) 4288/    15E3 : F0 03 24 04 68 04   	dw  03F0h, 0424h, 0468h, 04A8h, 04ECh, 0540h, 0590h, 05E4h, 063Ch, 0698h, 0704h, 0760h	; x-4 16000 ok
             15E9 : A8 04 EC 04 40 05 
             15EF : 90 05 E4 05 3C 06 
             15F5 : 98 06 04 07 60 07 
(1) 4289/    15FB : DC 07 48 08 D4 08   	dw  07DCh, 0848h, 08D4h, 0960h, 09F0h, 0A64h, 0B04h, 0BAAh, 0C60h, 0D18h, 0DE4h, 0EB6h	; x-5 32000 ok
             1601 : 60 09 F0 09 64 0A 
             1607 : 04 0B AA 0B 60 0C 
             160D : 18 0D E4 0D B6 0E 
(1) 4290/    1613 : B0 0F 74 10 84 11   	dw  0FB0h, 1074h, 1184h, 1280h, 139Ch, 14C8h, 1624h, 174Ch, 18DCh, 1A38h, 1BE0h, 1D94h	; x-6 64000 unstable
             1619 : 80 12 9C 13 C8 14 
             161F : 24 16 4C 17 DC 18 
             1625 : 38 1A E0 1B 94 1D 
(1) 4291/    162B :                     ; 	dw  1F64h, 20FCh, 2330h, 2524h, 2750h, 29B4h, 2C63h, 2F63h, 31E0h, 347Bh, 377Bh, 3B41h	; x-7 128000 bad
(1) 4292/    162B :                     ; 	dw  3EE8h, 4206h, 4684h, 4A5Ah, 4EB5h, 5379h, 58E1h, 5DE0h, 63C0h, 68FFh, 6EFFh, 783Ch	; x-8 256000 bad
(1) 4293/    162B :                     ; 	dw  7FC2h, 83FCh, 8D14h, 9780h,0AA5Dh,0B1F9h,   -1 ,   -1 ,   -1 ,   -1 ,   -1 ,   -1 	; x-9 bad
(1) 4294/    162B :                     
(1) 4295/    162B :                     ; ====================================================================
(1) 4296/    162B :                     ; ----------------------------------------------------------------
(1) 4297/    162B :                     ; MASTER buffers list
(1) 4298/    162B :                     ;
(1) 4299/    162B :                     ; dw track_buffer
(1) 4300/    162B :                     ; dw channel_list,block_cache,header_cache,track_cache
(1) 4301/    162B :                     ;
(1) 4302/    162B :                     ; (track_cache: 1BIT SIZES ONLY, ALIGNED)
(1) 4303/    162B :                     ; ----------------------------------------------------------------
(1) 4304/    162B :                     
(1) 4305/    162B :                     nikona_BuffList:
(1) 4306/    162B : 49 18 09 19 E9 17   	dw trkBuff_0,trkBlks_0,trkHdrs_0,trkCach_0
             1631 : 00 1F             
(1) 4307/    1633 : 89 18 11 19 09 18   	dw trkBuff_1,trkBlks_1,trkHdrs_1,trkCach_1
             1639 : 20 1F             
(1) 4308/    163B : C9 18 19 19 29 18   	dw trkBuff_2,trkBlks_2,trkHdrs_2,trkCach_2
             1641 : 40 1F             
(1) 4309/    1643 :                     ; 	dw trkBuff_3,trkBlks_3,trkHdrs_3,trkCach_3
(1) 4310/    1643 :                     nikona_BuffList_e:
(1) 4311/    1643 : FF FF               	dw -1	; ENDOFLIST
(1) 4312/    1645 :                     
(1) 4313/    1645 :                     ; ====================================================================
(1) 4314/    1645 :                     ; ----------------------------------------------------------------
(1) 4315/    1645 :                     ; Buffer section
(1) 4316/    1645 :                     ; ----------------------------------------------------------------
(1) 4317/    1645 :                     
(1) 4318/    1645 : 00 00 00 00 00 00   pcmcom:	db 00h,00h,00h,00h,00h,00h,00h,00h	; 0 - Playback bits: %0000PCOK /Pitchbend/keyCut/keyOff/KeyOn
             164B : 00 00             
(1) 4319/    164D : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 8 - Pitch MSB
             1653 : 00 00             
(1) 4320/    1655 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 16 - Pitch LSB
             165B : 00 00             
(1) 4321/    165D : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 24 - Volume
             1663 : 00 00             
(1) 4322/    1665 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 32 - Panning %RRRRLLLL
             166B : 00 00             
(1) 4323/    166D : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 40 - LoopEnable bit | 24-bit sample location in Sub-CPU area
             1673 : 00 00             
(1) 4324/    1675 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 48
             167B : 00 00             
(1) 4325/    167D : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 56
             1683 : 00 00             
(1) 4326/    1685 :                     
(1) 4327/    1685 : 00 00 00 00 00 00   pwmcom:	db 00h,00h,00h,00h,00h,00h,00h,00h	; 0 - Playback bits: %0000PCOK Pitchbend/keyCut/keyOff/KeyOn
             168B : 00 00             
(1) 4328/    168D : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 8 - Volume | Pitch MSB
             1693 : 00 00             
(1) 4329/    1695 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 16 - Pitch LSB
             169B : 00 00             
(1) 4330/    169D : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 24 - Flags+MSB bits of sample %SlLRxxxx Stereo/Loop/Left/Right
             16A3 : 00 00             
(1) 4331/    16A5 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 32 -
             16AB : 00 00             
(1) 4332/    16AD : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h
             16B3 : 00 00             
(1) 4333/    16B5 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h
             16BB : 00 00             
(1) 4334/    16BD :                     
(1) 4335/    16BD : 00 00 00 00         psgcom:	db 00h,00h,00h,00h	;  0 - command 1 = key on, 2 = key off, 4 = stop snd
(1) 4336/    16C1 : FF FF FF FF         	db -1, -1, -1, -1	;  4 - output level attenuation (%llll.0000, -1 = silent)
(1) 4337/    16C5 : 00 00 00 00         	db 00h,00h,00h,00h	;  8 - attack rate (START)
(1) 4338/    16C9 : 00 00 00 00         	db 00h,00h,00h,00h	; 12 - decay rate
(1) 4339/    16CD : 00 00 00 00         	db 00h,00h,00h,00h	; 16 - sustain level attenuation (MAXIMUM)
(1) 4340/    16D1 : 00 00 00 00         	db 00h,00h,00h,00h	; 20 - release rate
(1) 4341/    16D5 : 00 00 00 00         	db 00h,00h,00h,00h	; 24 - envelope mode 0 = off, 1 = attack, 2 = decay, 3 = sustain
(1) 4342/    16D9 : 00 00 00 00         	db 00h,00h,00h,00h	; 28 - freq bottom 4 bits
(1) 4343/    16DD : 00 00 00 00         	db 00h,00h,00h,00h	; 32 - freq upper 6 bits
(1) 4344/    16E1 : 00 00 00 00         	db 00h,00h,00h,00h	; 36 - attack level attenuation
(1) 4345/    16E5 : 00 00 00 00         	db 00h,00h,00h,00h	; 40 - flags to indicate hardware should be updated
(1) 4346/    16E9 : 00 00 00 00         	db 00h,00h,00h,00h	; 44 - timer for sustain
(1) 4347/    16ED : 00 00 00 00         	db 00h,00h,00h,00h	; 48 - MAX Volume
(1) 4348/    16F1 : 00 00 00 00         	db 00h,00h,00h,00h	; 52 - Vibrato value
(1) 4349/    16F5 : 00 00 00 00         	db 00h,00h,00h,00h	; 56 - General timer
(1) 4350/    16F9 :                     
(1) 4351/    16F9 :                     ; FM instrument storage
(1) 4352/    16F9 :                     fmcach_1	ds 28h
(1) 4353/    1721 :                     fmcach_2	ds 28h
(1) 4354/    1749 :                     fmcach_3	ds 28h
(1) 4355/    1771 :                     fmcach_4	ds 28h
(1) 4356/    1799 :                     fmcach_5	ds 28h
(1) 4357/    17C1 :                     fmcach_6	ds 28h
(1) 4358/    17E9 :                     
(1) 4359/    17E9 :                     ; --------------------------------------------------------
(1) 4360/    17E9 :                     ; * USER customizable section *
(1) 4361/    17E9 :                     ;
(1) 4362/    17E9 :                     ; trkCach's MUST BE 00h ALIGNED.
(1) 4363/    17E9 :                     ; --------------------------------------------------------
(1) 4364/    17E9 :                     
(1) 4365/    17E9 :                     trkHdrs_0	ds 8*4			; dw point,rowcntr
(1) 4366/    1809 :                     trkHdrs_1	ds 8*4
(1) 4367/    1829 :                     trkHdrs_2	ds 8*4
(1) 4368/    1849 :                     trkBuff_0	ds trk_ChnIndx+MAX_TRKINDX
(1) 4369/    1889 :                     trkBuff_1	ds trk_ChnIndx+MAX_TRKINDX
(1) 4370/    18C9 :                     trkBuff_2	ds trk_ChnIndx+MAX_TRKINDX
(1) 4371/    1909 :                     trkBlks_0	ds 8
(1) 4372/    1911 :                     trkBlks_1	ds 8
(1) 4373/    1919 :                     trkBlks_2	ds 8
(1) 4374/    1921 :                     
(1) 4375/    1921 :                     ; ====================================================================
(1) 4376/    1921 :                     ; --------------------------------------------------------
(1) 4377/    1921 :                     ; Channel table struct:
(1) 4378/    1921 :                     ; 00  - DIRECT Linked channel from trkChnls
(1) 4379/    1921 :                     ; 02  - 00h-7Fh: Priority level or 80h+ Silence request (chip ID)
(1) 4380/    1921 :                     ; 03  - MASTER Volume for this channel
(1) 4381/    1921 :                     ; 04  - Chip index (YM2612: KEY index)
(1) 4382/    1921 :                     ; 05  - FREE
(1) 4383/    1921 :                     ; 06  - Frequency list index (YM2612: %oooiiiii oct|index)
(1) 4384/    1921 :                     ; 07  - Pitchbend add/sub
(1) 4385/    1921 :                     ; 08  - Current volume: 00-max
(1) 4386/    1921 :                     ; 09  - Stored effect setting
(1) 4387/    1921 :                     ; 0A  - FREE
(1) 4388/    1921 :                     ; 0B  - FREE
(1) 4389/    1921 :                     ; 0C+ - Misc. settings for the current chip
(1) 4390/    1921 :                     ; 10+ - Intrument data
(1) 4391/    1921 :                     ;
(1) 4392/    1921 :                     ; PSG   80h
(1) 4393/    1921 :                     ; PSGN  90h
(1) 4394/    1921 :                     ; FM   0A0h
(1) 4395/    1921 :                     ; FM3  0B0h
(1) 4396/    1921 :                     ; DAC  0C0h
(1) 4397/    1921 :                     ; PCM  0D0h
(1) 4398/    1921 :                     ; PWM  0E0h
(1) 4399/    1921 :                     ; --------------------------------------------------------
(1) 4400/    1921 :                     
(1) 4401/    1921 : 10 00               tblList:	dw tblPSG-tblList		;  80h
(1) 4402/    1923 : 5A 80               		dw tblPSGN-tblList|8000h	;  90h *
(1) 4403/    1925 : 72 00               		dw tblFM-tblList		; 0A0h
(1) 4404/    1927 : D2 80               		dw tblFM3-tblList|8000h		; 0B0h *
(1) 4405/    1929 : EA 80               		dw tblFM6-tblList|8000h		; 0C0h *
(1) 4406/    192B : 04 01               		dw tblPCM-tblList		; 0D0h
(1) 4407/    192D : C6 01               		dw tblPWM-tblList		; 0E0h
(1) 4408/    192F : 00 00               		dw 0
(1) 4409/    1931 : 00 00 00 00 00 00   tblPSG:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             1937 : 00 00             
(1) 4410/    1939 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             193F : 00 00             
(1) 4411/    1941 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1947 : 00 00             
(1) 4412/    1949 : 00 00 00 00 01 00   		db 00h,00h,00h,00h,01h,00h,00h,00h	; Channel 2
             194F : 00 00             
(1) 4413/    1951 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1957 : 00 00             
(1) 4414/    1959 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             195F : 00 00             
(1) 4415/    1961 : 00 00 00 00 02 00   		db 00h,00h,00h,00h,02h,00h,00h,00h	; Channel 3
             1967 : 00 00             
(1) 4416/    1969 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             196F : 00 00             
(1) 4417/    1971 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1977 : 00 00             
(1) 4418/    1979 : FF FF               		dw -1	; end-of-list
(1) 4419/    197B : 00 00 00 00 03 00   tblPSGN:	db 00h,00h,00h,00h,03h,00h,00h,03h	; Noise
             1981 : 00 03             
(1) 4420/    1983 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1989 : 00 00             
(1) 4421/    198B : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1991 : 00 00             
(1) 4422/    1993 : 00 00 00 00 00 00   tblFM:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             1999 : 00 00             
(1) 4423/    199B : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             19A1 : 00 00             
(1) 4424/    19A3 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             19A9 : 00 00             
(1) 4425/    19AB : 00 00 00 00 01 00   		db 00h,00h,00h,00h,01h,00h,00h,00h	; Channel 2
             19B1 : 00 00             
(1) 4426/    19B3 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             19B9 : 00 00             
(1) 4427/    19BB : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             19C1 : 00 00             
(1) 4428/    19C3 : 00 00 00 00 04 00   		db 00h,00h,00h,00h,04h,00h,00h,00h	; Channel 4 <--
             19C9 : 00 00             
(1) 4429/    19CB : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             19D1 : 00 00             
(1) 4430/    19D3 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             19D9 : 00 00             
(1) 4431/    19DB : 00 00 00 00 05 00   		db 00h,00h,00h,00h,05h,00h,00h,00h	; Channel 5
             19E1 : 00 00             
(1) 4432/    19E3 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             19E9 : 00 00             
(1) 4433/    19EB : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             19F1 : 00 00             
(1) 4434/    19F3 : 00 00 00 00 02 00   tblFM3:		db 00h,00h,00h,00h,02h,00h,00h,00h	; Channel 3 <--
             19F9 : 00 00             
(1) 4435/    19FB : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A01 : 00 00             
(1) 4436/    1A03 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A09 : 00 00             
(1) 4437/    1A0B : 00 00 00 00 06 00   tblFM6:		db 00h,00h,00h,00h,06h,00h,00h,00h	; Channel 6 <--
             1A11 : 00 00             
(1) 4438/    1A13 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A19 : 00 00             
(1) 4439/    1A1B : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A21 : 00 00             
(1) 4440/    1A23 : FF FF               		dw -1	; end-of-list
(1) 4441/    1A25 : 00 00 00 00 00 00   tblPCM:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             1A2B : 00 00             
(1) 4442/    1A2D : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A33 : 00 00             
(1) 4443/    1A35 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A3B : 00 00             
(1) 4444/    1A3D : 00 00 00 00 01 00   		db 00h,00h,00h,00h,01h,00h,00h,00h	; Channel 2
             1A43 : 00 00             
(1) 4445/    1A45 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A4B : 00 00             
(1) 4446/    1A4D : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A53 : 00 00             
(1) 4447/    1A55 : 00 00 00 00 02 00   		db 00h,00h,00h,00h,02h,00h,00h,00h	; Channel 3
             1A5B : 00 00             
(1) 4448/    1A5D : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A63 : 00 00             
(1) 4449/    1A65 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A6B : 00 00             
(1) 4450/    1A6D : 00 00 00 00 03 00   		db 00h,00h,00h,00h,03h,00h,00h,00h	; Channel 4
             1A73 : 00 00             
(1) 4451/    1A75 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A7B : 00 00             
(1) 4452/    1A7D : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A83 : 00 00             
(1) 4453/    1A85 : 00 00 00 00 04 00   		db 00h,00h,00h,00h,04h,00h,00h,00h	; Channel 5
             1A8B : 00 00             
(1) 4454/    1A8D : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A93 : 00 00             
(1) 4455/    1A95 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A9B : 00 00             
(1) 4456/    1A9D : 00 00 00 00 05 00   		db 00h,00h,00h,00h,05h,00h,00h,00h	; Channel 6
             1AA3 : 00 00             
(1) 4457/    1AA5 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1AAB : 00 00             
(1) 4458/    1AAD : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1AB3 : 00 00             
(1) 4459/    1AB5 : 00 00 00 00 06 00   		db 00h,00h,00h,00h,06h,00h,00h,00h	; Channel 7
             1ABB : 00 00             
(1) 4460/    1ABD : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1AC3 : 00 00             
(1) 4461/    1AC5 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1ACB : 00 00             
(1) 4462/    1ACD : 00 00 00 00 07 00   		db 00h,00h,00h,00h,07h,00h,00h,00h	; Channel 7
             1AD3 : 00 00             
(1) 4463/    1AD5 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1ADB : 00 00             
(1) 4464/    1ADD : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1AE3 : 00 00             
(1) 4465/    1AE5 : FF FF               		dw -1	; end-of-list
(1) 4466/    1AE7 : 00 00 00 00 00 00   tblPWM:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             1AED : 00 00             
(1) 4467/    1AEF : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1AF5 : 00 00             
(1) 4468/    1AF7 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1AFD : 00 00             
(1) 4469/    1AFF : 00 00 00 00 01 00   		db 00h,00h,00h,00h,01h,00h,00h,00h	; Channel 2
             1B05 : 00 00             
(1) 4470/    1B07 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B0D : 00 00             
(1) 4471/    1B0F : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B15 : 00 00             
(1) 4472/    1B17 : 00 00 00 00 02 00   		db 00h,00h,00h,00h,02h,00h,00h,00h	; Channel 3
             1B1D : 00 00             
(1) 4473/    1B1F : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B25 : 00 00             
(1) 4474/    1B27 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B2D : 00 00             
(1) 4475/    1B2F : 00 00 00 00 03 00   		db 00h,00h,00h,00h,03h,00h,00h,00h	; Channel 4
             1B35 : 00 00             
(1) 4476/    1B37 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B3D : 00 00             
(1) 4477/    1B3F : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B45 : 00 00             
(1) 4478/    1B47 : 00 00 00 00 04 00   		db 00h,00h,00h,00h,04h,00h,00h,00h	; Channel 5
             1B4D : 00 00             
(1) 4479/    1B4F : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B55 : 00 00             
(1) 4480/    1B57 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B5D : 00 00             
(1) 4481/    1B5F : 00 00 00 00 05 00   		db 00h,00h,00h,00h,05h,00h,00h,00h	; Channel 6
             1B65 : 00 00             
(1) 4482/    1B67 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B6D : 00 00             
(1) 4483/    1B6F : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B75 : 00 00             
(1) 4484/    1B77 : 00 00 00 00 06 00   		db 00h,00h,00h,00h,06h,00h,00h,00h	; Channel 7
             1B7D : 00 00             
(1) 4485/    1B7F : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B85 : 00 00             
(1) 4486/    1B87 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B8D : 00 00             
(1) 4487/    1B8F : FF FF               		dw -1	; end-of-list
(1) 4488/    1B91 :                     
(1) 4489/    1B91 :                     trkInfoCach	ds 4*3		; per track slot
(1) 4490/    1B9D :                     instListOut	ds 8*3
(1) 4491/    1BB5 :                     
(1) 4492/    1BB5 :                     ; ====================================================================
(1) 4493/    1BB5 :                     ; ----------------------------------------------------------------
(1) 4494/    1BB5 :                     ; Special aligned buffers
(1) 4495/    1BB5 :                     ;
(1) 4496/    1BB5 :                     ; Located at 1D00h
(1) 4497/    1BB5 :                     ; ----------------------------------------------------------------
(1) 4498/    1BB5 :                     
(1) 4499/    1D00 :                     		org 1D00h
(1) 4500/    1D00 :                     dWaveBuff	ds 100h		; WAVE data buffer: 100h bytes, updates every 80h
(1) 4501/    1E00 :                     trkChnls	ds 8*MAX_TRKCHN
(1) 4502/    1F00 :                     trkCach_0	ds MAX_RCACH	; <--
(1) 4503/    1F20 :                     trkCach_1	ds MAX_RCACH
(1) 4504/    1F40 :                     trkCach_2	ds MAX_RCACH
(1) 4505/    1F60 :                     trkCach_3	ds MAX_RCACH
(1) 4506/    1F80 :                     
(1) 4507/    1F80 :                     ; --------------------------------------------------------
(1) 4508/    1F80 :                     
(1) 4509/    1F80 :                     ; last temporals...
(1) 4510/    1F80 : 00                  tickSpSet	db 0		; **
(1) 4511/    1F81 : 00                  tickFlag	db 0		; Tick flag from VBlank
(1) 4512/    1F82 : 00                  tickCnt		db 0		; ** Tick counter (PUT THIS AFTER tickFlag)
(1) 4513/    1F83 : 00                  psgHatMode	db 0		; Current PSGN mode
(1) 4514/    1F84 : 00                  fmSpecial	db 0		; copy of FM3 enable bit
(1) 4515/    1F85 : 00                  commZRead	db 0		; cmd fifo READ pointer (here)
(1) 4516/    1F86 : 00                  trkListPage	db 0
(1) 4517/    1F87 : 00                  marsUpd		db 0		; Flag to request a PWM transfer
(1) 4518/    1F88 : 00                  mcdUpd		db 0		; Flag to request a PCM transfer
(1) 4519/    1F89 : 00 00               wave_Start	dw 0		; START: 68k 24-bit pointer
(1) 4520/    1F8B : 00                  		db 0
(1) 4521/    1F8C : 00 00               wave_Len	dw 0		; LENGTH 24-bit
(1) 4522/    1F8E : 00                  		db 0
(1) 4523/    1F8F : 00 00               wave_Loop	dw 0		; LOOP POINT 24-bit
(1) 4524/    1F91 : 00                  		db 0
(1) 4525/    1F92 : 00 01               wave_Pitch	dw 0100h	; 01.00h
(1) 4526/    1F94 : 00                  wave_Flags	db 0		; WAVE playback flags (%10x: 1 loop / 0 no loop)
(1) 4527/    1F95 : 00                  wave_Priority	db 0
(1) 4528/    1F96 : 00                  currTickBits	db 0		; Current Tick/Subbeat flags (000000BTb B-beat, T-tick)
(1) 4529/    1F97 : 00                  dDacFifoMid	db 0		; WAVE play halfway refill flag (00h/80h)
(1) 4530/    1F98 : 00 00 00            dDacPntr	db 0,0,0	; WAVE play current ROM position
(1) 4531/    1F9B : 00 00 00            dDacCntr	db 0,0,0	; WAVE play length counter
(1) 4532/    1F9E : 00                  x68ksrclsb	db 0		; transferRom temporal LSB
(1) 4533/    1F9F : 00                  x68ksrcmid	db 0		; transferRom temporal MID
(1) 4534/    1FA0 : 00 00               sbeatAcc	dw 0		; Accumulates on each tick to trigger the sub beats
(1) 4535/    1FA2 : D5 00               sbeatPtck	dw 200+13	; Default global subbeats (-32 for PAL)
(1) 4536/    1FA4 :                     headerOut	ds 00Eh		; Temporal storage for 68k pointers
(1) 4537/    1FB2 :                     headerOut_e	ds 2		; reverse readpoint
(1) 4538/    1FB4 :                     sampleHead	ds 006h
(1) 4539/    1FBA :                     
(1) 4540/    1FBA :                     ; --------------------------------------------------------
(1) 4541/    1FBA :                     
(1) 4542/FFFFFFFFFFFF4000 :                     		dephase
(1) 4543/FFFFFFFFFFFF4000 :                     		cpu 68000		; [AS] Return to 68k
(1) 4544/FFFFFFFFFFFF4000 :                     		padding off		; [AS] NO padding
(1) 4545/FFFFFFFFFFFF4000 :                     		align 2
(1) 4546/FFFFFFFFFFFF4002 :                     
     157/FFFFFFFFFFFF4002 :                     Z80_CODE_END:
     158/    3A02 :                     		dephase
     159/    3A02 :                     
     160/    3A02 :                     ; ---------------------------------------------
     161/    3A02 :                     ; SEGA PICO
     162/    3A02 :                     ;
     163/    3A02 :                     ; This recycles the MD's routines.
     164/    3A02 :                     ; ---------------------------------------------
     186/    3A02 :                     
     187/    3A02 :                     ; ====================================================================
     188/    3A02 :                     ; --------------------------------------------------------
     189/    3A02 :                     ; SYSTEM routines and MODE switching code
     190/    3A02 :                     ;
     191/    3A02 :                     ; MD and PICO: Normal ROM locations
     192/    3A02 :                     ; CD/32X/CD32X: Loaded into RAM
     193/    3A02 :                     ; --------------------------------------------------------
     194/    3A02 :                     
     196/    3A02 :                     Md_SysCode:
     197/FFFFFFFFFFFF0000 :                     		phase RAM_SystemCode
     199/FFFFFFFFFFFF0000 :                     ; ---------------------------------------------
     200/FFFFFFFFFFFF0000 :                     
     201/FFFFFFFFFFFF0000 :                     		include	"sound/driver/gema.asm"
(1)    1/FFFFFFFFFFFF0000 :                     ; ====================================================================
(1)    2/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)    3/FFFFFFFFFFFF0000 :                     ; GEMA/Nikona sound driver v0.9
(1)    4/FFFFFFFFFFFF0000 :                     ; (C)2023-2024 GenesisFan64
(1)    5/FFFFFFFFFFFF0000 :                     ;
(1)    6/FFFFFFFFFFFF0000 :                     ; Features:
(1)    7/FFFFFFFFFFFF0000 :                     ; - Support for SEGA CD's PCM channels:
(1)    8/FFFFFFFFFFFF0000 :                     ;   | All 8 channels with streaming support
(1)    9/FFFFFFFFFFFF0000 :                     ;   | for larger samples.
(1)   10/FFFFFFFFFFFF0000 :                     ;
(1)   11/FFFFFFFFFFFF0000 :                     ; - Support for 32X's PWM:
(1)   12/FFFFFFFFFFFF0000 :                     ;   | 7 pseudo-channels in either MONO
(1)   13/FFFFFFFFFFFF0000 :                     ;   | or STEREO.
(1)   14/FFFFFFFFFFFF0000 :                     ;
(1)   15/FFFFFFFFFFFF0000 :                     ; - DMA ROM protection
(1)   16/FFFFFFFFFFFF0000 :                     ;   | This keeps DAC in a decent quality while
(1)   17/FFFFFFFFFFFF0000 :                     ;   | doing any DMA jobs in the 68k side.
(1)   18/FFFFFFFFFFFF0000 :                     ; - DAC Playback at 16000hz
(1)   19/FFFFFFFFFFFF0000 :                     ; - FM special mode with custom frequencies
(1)   20/FFFFFFFFFFFF0000 :                     ; - Autodetection for the PSG's Tone3 mode
(1)   21/FFFFFFFFFFFF0000 :                     ;
(1)   22/FFFFFFFFFFFF0000 :                     ; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣴⣶⡿⠿⠿⠿⣶⣦⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀
(1)   23/FFFFFFFFFFFF0000 :                     ; ⠀⠀⠀⠀⠀⠀⢀⣠⣶⢟⣿⠟⠁⢰⢋⣽⡆⠈⠙⣿⡿⣶⣄⡀⠀⠀⠀⠀⠀⠀
(1)   24/FFFFFFFFFFFF0000 :                     ; ⠀⠀⠀⠀⣠⣴⠟⠋⢠⣾⠋⠀⣀⠘⠿⠿⠃⣀⠀⠈⣿⡄⠙⠻⣦⣄⠀⠀⠀⠀
(1)   25/FFFFFFFFFFFF0000 :                     ; ⠀⢀⣴⡿⠋⠁⠀⢀⣼⠏⠺⠛⠛⠻⠂⠐⠟⠛⠛⠗⠘⣷⡀⠀⠈⠙⢿⣦⡀⠀
(1)   26/FFFFFFFFFFFF0000 :                     ; ⣴⡟⢁⣀⣠⣤⡾⢿⡟⠀⠀⠀⠘⢷⠾⠷⡾⠃⠀⠀⠀⢻⡿⢷⣤⣄⣀⡈⢻⣦
(1)   27/FFFFFFFFFFFF0000 :                     ; ⠙⠛⠛⠋⠉⠁⠀⢸⡇⠀⠀⢠⣄⠀⠀⠀⠀⣠⡄⠀⠀⢸⡇⠀⠈⠉⠙⠛⠛⠋
(1)   28/FFFFFFFFFFFF0000 :                     ; ⠀⠀⠀⠀⠀⠀⠀⢸⡇⢾⣦⣀⣹⡧⠀⠀⢼⣏⣀⣴⡷⢸⡇⠀⠀⠀⠀⠀⠀⠀
(1)   29/FFFFFFFFFFFF0000 :                     ; ⠀⠀⠀⠀⠀⠀⠀⠸⣧⡀⠈⠛⠛⠁⠀⠀⠈⠛⠛⠁⢀⣼⠇⠀⠀⠀⠀⠀⠀⠀
(1)   30/FFFFFFFFFFFF0000 :                     ; ⠀⠀⠀⠀⠀⠀⠀⢀⣘⣿⣶⣤⣀⣀⣀⣀⣀⣀⣤⣶⣿⣃⠀⠀⠀⠀⠀⠀⠀⠀
(1)   31/FFFFFFFFFFFF0000 :                     ; ⠀⠀⠀⠀⠀⣠⡶⠟⠋⢉⣀⣽⠿⠉⠉⠉⠹⢿⣍⣈⠉⠛⠷⣦⡀⠀⠀⠀⠀⠀
(1)   32/FFFFFFFFFFFF0000 :                     ; ⠀⠀⠀⠀⢾⣯⣤⣴⡾⠟⠋⠁⠀⠀⠀⠀⠀⠀⠉⠛⠷⣶⣤⣬⣿⠀⠀⠀⠀⠀
(1)   33/FFFFFFFFFFFF0000 :                     ; ⠀⠀⠀⠀⠀⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠁⠀⠀⠀⠀⠀
(1)   34/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)   35/FFFFFFFFFFFF0000 :                     
(1)   36/FFFFFFFFFFFF0000 :                     ; ====================================================================
(1)   37/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)   38/FFFFFFFFFFFF0000 :                     ; Macros
(1)   39/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)   40/FFFFFFFFFFFF0000 :                     
(1)   41/FFFFFFFFFFFF0000 :                     ; Shared for all DAC, PCM, PWM
(1)   42/FFFFFFFFFFFF0000 :                     gSmpHead macro len,loop
(1)   43/FFFFFFFFFFFF0000 :                     	dc.b ((len)&$FF),(((len)>>8)&$FF),(((len)>>16)&$FF)	; length
(1)   44/FFFFFFFFFFFF0000 :                     	dc.b ((loop)&$FF),(((loop)>>8)&$FF),(((loop)>>16)&$FF)
(1)   45/FFFFFFFFFFFF0000 :                     	endm
(1)   46/FFFFFFFFFFFF0000 :                     
(1)   47/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)   48/FFFFFFFFFFFF0000 :                     ; Variables
(1)   49/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)   50/FFFFFFFFFFFF0000 :                     
(1)   51/FFFFFFFFFFFF0000 :                     ; z80_cpu	equ $A00000		; Z80 CPU area, size: $2000
(1)   52/FFFFFFFFFFFF0000 :                     ; z80_bus 	equ $A11100		; only read bit 0 (bit 8 as WORD)
(1)   53/FFFFFFFFFFFF0000 :                     ; z80_reset	equ $A11200		; WRITE only: $0000 reset/$0100 cancel
(1)   54/FFFFFFFFFFFF0000 :                     
(1)   55/FFFFFFFFFFFF0000 :                     ; Z80-area points:
(1)   56/FFFFFFFFFFFF0000 : =$40                 zDrvFifo	equ commZfifo		; FIFO command storage
(1)   57/FFFFFFFFFFFF0000 : =$2E                 zDrvFWrt	equ commZWrite		; FIFO command index
(1)   58/FFFFFFFFFFFF0000 : =$2F                 zDrvRomBlk	equ commZRomBlk		; ROM block flag
(1)   59/FFFFFFFFFFFF0000 : =$37                 zDrvMarsBlk	equ marsBlock		; Flag to disable 32X's PWM
(1)   60/FFFFFFFFFFFF0000 : =$36                 zDrvMcdBlk	equ mcdBlock		; Flag to disable SegaCD's PCM
(1)   61/FFFFFFFFFFFF0000 : =$35                 zDrvRamSrc	equ cdRamSrcB		; RAM-read source+dest pointers
(1)   62/FFFFFFFFFFFF0000 : =$30                 zDrvRamLen	equ cdRamLen		; RAM-read length and flag
(1)   63/FFFFFFFFFFFF0000 :                     
(1)   64/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)   65/FFFFFFFFFFFF0000 :                     ; Variables
(1)   66/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)   67/FFFFFFFFFFFF0000 :                     
(1)   68/FFFFFFFFFFFF0000 : =$FFFFFF00           RAM_ZCdFlag_D	equ RAM_ZSndBuff	; transferRom flag
(1)   69/FFFFFFFFFFFF0000 :                     
(1)   70/FFFFFFFFFFFF0000 :                     ; ====================================================================
(1)   71/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)   72/FFFFFFFFFFFF0000 :                     ; Initialize Sound
(1)   73/FFFFFFFFFFFF0000 :                     ;
(1)   74/FFFFFFFFFFFF0000 :                     ; Uses:
(1)   75/FFFFFFFFFFFF0000 :                     ; a0-a1,d0-d1
(1)   76/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)   77/FFFFFFFFFFFF0000 :                     
(1)   78/FFFFFFFFFFFF0000 :                     ; 		align $80
(1)   79/FFFFFFFFFFFF0000 :                     Sound_Init:
(1)   80/FFFFFFFFFFFF0000 : 007C 0700           		ori.w	#$0700,sr
(1)   84/FFFFFFFFFFFF0004 : 33FC 0100 00A1      		move.w	#$0100,(z80_bus).l		; Get Z80 bus
         FFFFFFFFFFFF000A : 1100             
(1)   85/FFFFFFFFFFFF000C : 33FC 0100 00A1      		move.w	#$0100,(z80_reset).l		; Z80 reset
         FFFFFFFFFFFF0012 : 1200             
(1)   86/FFFFFFFFFFFF0014 :                     .wait:
(1)   87/FFFFFFFFFFFF0014 : 0839 0000 00A1      		btst	#0,(z80_bus).l
         FFFFFFFFFFFF001A : 1100             
(1)   88/FFFFFFFFFFFF001C : 66F6                		bne.s	.wait
(1)   89/FFFFFFFFFFFF001E : 41F9 00A0 0000      		lea	(z80_cpu).l,a0			; Clean entire Z80 FIRST.
(1)   90/FFFFFFFFFFFF0024 : 303C 1FFF           		move.w	#$1FFF,d0
(1)   91/FFFFFFFFFFFF0028 : 7200                		moveq	#0,d1
(1)   92/FFFFFFFFFFFF002A :                     .cleanup:
(1)   93/FFFFFFFFFFFF002A : 10C1                		move.b	d1,(a0)+
(1)   94/FFFFFFFFFFFF002C : 51C8 FFFC           		dbf	d0,.cleanup
(1)   95/FFFFFFFFFFFF0030 : 41F9 FFFF 2046      		lea	(Z80_CODE).l,a0			; a0 - Z80 code (on $880000)
(1)   96/FFFFFFFFFFFF0036 : 43F9 00A0 0000      		lea	(z80_cpu).l,a1			; a1 - Z80 CPU area
(1)   97/FFFFFFFFFFFF003C : 303C 1FBB           		move.w	#(Z80_CODE_END-Z80_CODE)-1,d0	; d0 - Size
(1)   98/FFFFFFFFFFFF0040 :                     
(1)   99/FFFFFFFFFFFF0040 :                     .copy:
(1)  100/FFFFFFFFFFFF0040 : 12D8                		move.b	(a0)+,(a1)+
(1)  101/FFFFFFFFFFFF0042 : 51C8 FFFC           		dbf	d0,.copy
(1)  102/FFFFFFFFFFFF0046 : 33FC 0000 00A1      		move.w	#0,(z80_reset).l		; Reset cancel
         FFFFFFFFFFFF004C : 1200             
(1)  103/FFFFFFFFFFFF004E : 4238 FF00           		clr.b	(RAM_ZCdFlag_D).w		; Reset Z80 transferRom flag
(1)  104/FFFFFFFFFFFF0052 : 4E71                		nop					; Reset Z80 buffer flag
(1)  105/FFFFFFFFFFFF0054 : 4E71                		nop
(1)  106/FFFFFFFFFFFF0056 : 4E71                		nop
(1)  107/FFFFFFFFFFFF0058 : 33FC 0100 00A1      		move.w	#$100,(z80_reset).l
         FFFFFFFFFFFF005E : 1200             
(1)  108/FFFFFFFFFFFF0060 : 33FC 0000 00A1      		move.w	#0,(z80_bus).l			; Start Z80
         FFFFFFFFFFFF0066 : 1100             
(1)  110/FFFFFFFFFFFF0068 : 203C 0020 A6EC      		move.l	#Gema_MasterList,d0
(1)  111/FFFFFFFFFFFF006E : 6000 0162           		bra	gemaSetMasterList
(1)  112/FFFFFFFFFFFF0072 :                     
(1)  113/FFFFFFFFFFFF0072 :                     ; ----------------------------------------------------------------
(1)  114/FFFFFFFFFFFF0072 :                     ; Sound_Update
(1)  115/FFFFFFFFFFFF0072 :                     ;
(1)  116/FFFFFFFFFFFF0072 :                     ; Call and LOOP this during DISPLAY to communicate
(1)  117/FFFFFFFFFFFF0072 :                     ; with the Z80
(1)  118/FFFFFFFFFFFF0072 :                     ;
(1)  119/FFFFFFFFFFFF0072 :                     ; SegaCD/CD32X:
(1)  120/FFFFFFFFFFFF0072 :                     ; This checks if the Z80 wants to read from RAM (as it can't
(1)  121/FFFFFFFFFFFF0072 :                     ; see it) then this CPU manually writes the RAM bytes from
(1)  122/FFFFFFFFFFFF0072 :                     ; here to the Z80's RAM
(1)  123/FFFFFFFFFFFF0072 :                     ; THIS IS REQUIRED for the tracks and instruments stored
(1)  124/FFFFFFFFFFFF0072 :                     ; on RAM in case you are doing ASIC-Stamps.
(1)  125/FFFFFFFFFFFF0072 :                     ;
(1)  126/FFFFFFFFFFFF0072 :                     ; DAC samples are safe to read from WORD-RAM (if NOT using Stamps)
(1)  127/FFFFFFFFFFFF0072 :                     ; but careful when loading new data, and make sure MAIN
(1)  128/FFFFFFFFFFFF0072 :                     ; has the permission to read the data.
(1)  129/FFFFFFFFFFFF0072 :                     ;
(1)  130/FFFFFFFFFFFF0072 :                     ; Sega Pico:
(1)  131/FFFFFFFFFFFF0072 :                     ; * For later *
(1)  132/FFFFFFFFFFFF0072 :                     ;
(1)  133/FFFFFFFFFFFF0072 :                     ; Uses:
(1)  134/FFFFFFFFFFFF0072 :                     ; d5-d7,a4-a6
(1)  135/FFFFFFFFFFFF0072 :                     ; ----------------------------------------------------------------
(1)  136/FFFFFFFFFFFF0072 :                     
(1)  137/FFFFFFFFFFFF0072 :                     Sound_Update:
(1)  141/FFFFFFFFFFFF0072 :                     	; ------------------------------------------------
(1)  142/FFFFFFFFFFFF0072 :                     	; If transferRom wants to read from 68k RAM
(1)  143/FFFFFFFFFFFF0072 : 4A38 FF00           		tst.b	(RAM_ZCdFlag_D).w	; *Z80 WRITES TO RAM*
(1)  144/FFFFFFFFFFFF0076 : 6744                		beq.s	.no_task
(1)  145/FFFFFFFFFFFF0078 : 4238 FF00           		clr.b	(RAM_ZCdFlag_D).w
(1)  146/FFFFFFFFFFFF007C : 7E00                		moveq	#0,d7
(1)  147/FFFFFFFFFFFF007E : 613E                		bsr	sndLockZ80
(1)  148/FFFFFFFFFFFF0080 : 1E39 00A0 0030      		move.b	(z80_cpu+zDrvRamLen).l,d7
(1)  149/FFFFFFFFFFFF0086 : 6732                		beq.s	.no_size
(1)  150/FFFFFFFFFFFF0088 : 5347                		subq.w	#1,d7
(1)  151/FFFFFFFFFFFF008A : 4DF9 00A0 0036      		lea	(z80_cpu+(zDrvRamSrc+1)),a6
(1)  152/FFFFFFFFFFFF0090 : 4BF9 00A0 0000      		lea	(z80_cpu),a5
(1)  153/FFFFFFFFFFFF0096 : 1C26                		move.b	-(a6),d6		; d6 - Source
(1)  154/FFFFFFFFFFFF0098 : 4846                		swap	d6
(1)  155/FFFFFFFFFFFF009A : 1C26                		move.b	-(a6),d6
(1)  156/FFFFFFFFFFFF009C : E14E                		lsl.w	#8,d6
(1)  157/FFFFFFFFFFFF009E : 1C26                		move.b	-(a6),d6
(1)  158/FFFFFFFFFFFF00A0 : 7A00                		moveq	#0,d5
(1)  159/FFFFFFFFFFFF00A2 : 1A26                		move.b	-(a6),d5		; d5 - Dest
(1)  160/FFFFFFFFFFFF00A4 : E14D                		lsl.w	#8,d5
(1)  161/FFFFFFFFFFFF00A6 : 1A26                		move.b	-(a6),d5
(1)  162/FFFFFFFFFFFF00A8 : DBC5                		add.l	d5,a5
(1)  163/FFFFFFFFFFFF00AA : 2846                		move.l	d6,a4
(1)  164/FFFFFFFFFFFF00AC :                     .copy_bytes:
(1)  165/FFFFFFFFFFFF00AC : 1ADC                		move.b	(a4)+,(a5)+
(1)  166/FFFFFFFFFFFF00AE : 51CF FFFC           		dbf	d7,.copy_bytes
(1)  167/FFFFFFFFFFFF00B2 : 13FC 0000 00A0      		move.b	#0,(z80_cpu+zDrvRamLen).l
         FFFFFFFFFFFF00B8 : 0030             
(1)  168/FFFFFFFFFFFF00BA :                     .no_size:
(1)  169/FFFFFFFFFFFF00BA : 6116                		bsr	sndUnlockZ80
(1)  170/FFFFFFFFFFFF00BC :                     .no_task:
(1)  172/FFFFFFFFFFFF00BC : 4E75                		rts
(1)  173/FFFFFFFFFFFF00BE :                     
(1)  174/FFFFFFFFFFFF00BE :                     ; ====================================================================
(1)  175/FFFFFFFFFFFF00BE :                     ; ----------------------------------------------------------------
(1)  176/FFFFFFFFFFFF00BE :                     ; Subroutines
(1)  177/FFFFFFFFFFFF00BE :                     ; ----------------------------------------------------------------
(1)  178/FFFFFFFFFFFF00BE :                     
(1)  179/FFFFFFFFFFFF00BE :                     ; ------------------------------------------------
(1)  180/FFFFFFFFFFFF00BE :                     ; Lock Z80, get bus
(1)  181/FFFFFFFFFFFF00BE :                     ; ------------------------------------------------
(1)  182/FFFFFFFFFFFF00BE :                     
(1)  183/FFFFFFFFFFFF00BE :                     sndLockZ80:
(1)  185/FFFFFFFFFFFF00BE : 33FC 0100 00A1      		move.w	#$0100,(z80_bus).l
         FFFFFFFFFFFF00C4 : 1100             
(1)  186/FFFFFFFFFFFF00C6 :                     .wait:
(1)  187/FFFFFFFFFFFF00C6 : 0839 0000 00A1      		btst	#0,(z80_bus).l
         FFFFFFFFFFFF00CC : 1100             
(1)  188/FFFFFFFFFFFF00CE : 66F6                		bne.s	.wait
(1)  190/FFFFFFFFFFFF00D0 : 4E75                		rts
(1)  191/FFFFFFFFFFFF00D2 :                     
(1)  192/FFFFFFFFFFFF00D2 :                     ; ------------------------------------------------
(1)  193/FFFFFFFFFFFF00D2 :                     ; Unlock Z80, return bus
(1)  194/FFFFFFFFFFFF00D2 :                     ; ------------------------------------------------
(1)  195/FFFFFFFFFFFF00D2 :                     
(1)  196/FFFFFFFFFFFF00D2 :                     sndUnlockZ80:
(1)  198/FFFFFFFFFFFF00D2 : 33FC 0000 00A1      		move.w	#0,(z80_bus).l
         FFFFFFFFFFFF00D8 : 1100             
(1)  200/FFFFFFFFFFFF00DA : 4E75                		rts
(1)  201/FFFFFFFFFFFF00DC :                     
(1)  202/FFFFFFFFFFFF00DC :                     ; ------------------------------------------------
(1)  203/FFFFFFFFFFFF00DC :                     ; 68K-to-Z80 sound request enter/exit routines
(1)  204/FFFFFFFFFFFF00DC :                     ;
(1)  205/FFFFFFFFFFFF00DC :                     ; d6 - commFifo index
(1)  206/FFFFFFFFFFFF00DC :                     ; ------------------------------------------------
(1)  207/FFFFFFFFFFFF00DC :                     
(1)  208/FFFFFFFFFFFF00DC :                     sndReq_Enter:
(1)  210/FFFFFFFFFFFF00DC : 33FC 0100 00A1      		move.w	#$0100,(z80_bus).l		; Request Z80 Stop
         FFFFFFFFFFFF00E2 : 1100             
(1)  212/FFFFFFFFFFFF00E4 :                     ; 		or.w	#$0700,sr			; Disable interrupts
(1)  213/FFFFFFFFFFFF00E4 : 9EFC 0004           		suba	#4,sp				; Extra jump return
(1)  214/FFFFFFFFFFFF00E8 : 48E7 0306           		movem.l	d6-d7/a5-a6,-(sp)		; Save these regs to the stack
(1)  215/FFFFFFFFFFFF00EC : DEFC 0014           		adda	#(4*4)+4,sp			; Go back to the RTS jump
(1)  216/FFFFFFFFFFFF00F0 : 4BF9 00A0 002E      		lea	(z80_cpu+zDrvFWrt),a5		; a5 - commZWrite
(1)  217/FFFFFFFFFFFF00F6 : 4DF9 00A0 0040      		lea	(z80_cpu+zDrvFifo),a6		; a6 - fifo command list
(1)  218/FFFFFFFFFFFF00FC :                     .wait:
(1)  220/FFFFFFFFFFFF00FC : 0839 0000 00A1      		btst	#0,(z80_bus).l			; Wait for Z80
         FFFFFFFFFFFF0102 : 1100             
(1)  221/FFFFFFFFFFFF0104 : 66F6                		bne.s	.wait
(1)  223/FFFFFFFFFFFF0106 : 1C15                		move.b	(a5),d6				; d6 - index fifo position
(1)  224/FFFFFFFFFFFF0108 : 4886                		ext.w	d6				; extend to 16 bits
(1)  225/FFFFFFFFFFFF010A : 4E75                		rts
(1)  226/FFFFFFFFFFFF010C :                     ; JUMP ONLY
(1)  227/FFFFFFFFFFFF010C :                     sndReq_Exit:
(1)  229/FFFFFFFFFFFF010C : 33FC 0000 00A1      		move.w	#0,(z80_bus).l
         FFFFFFFFFFFF0112 : 1100             
(1)  231/FFFFFFFFFFFF0114 : 9EFC 0018           		suba	#8+(4*4),sp
(1)  232/FFFFFFFFFFFF0118 : 4CDF 60C0           		movem.l	(sp)+,d6-d7/a5-a6		; And pop those back
(1)  233/FFFFFFFFFFFF011C : DEFC 0008           		adda	#8,sp
(1)  234/FFFFFFFFFFFF0120 :                     ; 		andi.w	#$F8FF,sr			; Enable interrupts
(1)  235/FFFFFFFFFFFF0120 : 4E75                		rts
(1)  236/FFFFFFFFFFFF0122 :                     
(1)  237/FFFFFFFFFFFF0122 :                     ; ------------------------------------------------
(1)  238/FFFFFFFFFFFF0122 :                     ; Send request id and arguments
(1)  239/FFFFFFFFFFFF0122 :                     ;
(1)  240/FFFFFFFFFFFF0122 :                     ; Input:
(1)  241/FFFFFFFFFFFF0122 :                     ; d7 - byte to write
(1)  242/FFFFFFFFFFFF0122 :                     ; d6 - index pointer
(1)  243/FFFFFFFFFFFF0122 :                     ; a5 - commZWrite, update index
(1)  244/FFFFFFFFFFFF0122 :                     ; a6 - commZfifo command list
(1)  245/FFFFFFFFFFFF0122 :                     ;
(1)  246/FFFFFFFFFFFF0122 :                     ; *** CALL sndReq_Enter FIRST ***
(1)  247/FFFFFFFFFFFF0122 :                     ; ------------------------------------------------
(1)  248/FFFFFFFFFFFF0122 :                     
(1)  249/FFFFFFFFFFFF0122 :                     sndReq_scmd:
(1)  250/FFFFFFFFFFFF0122 : 1DBC 00FF 6000      		move.b	#-1,(a6,d6.w)			; write command-start flag
(1)  251/FFFFFFFFFFFF0128 : 5206                		addq.b	#1,d6				; next fifo pos
(1)  252/FFFFFFFFFFFF012A : 0206 000F           		andi.b	#MAX_ZCMND-1,d6
(1)  253/FFFFFFFFFFFF012E : 600C                		bra.s	sndReq_sbyte
(1)  254/FFFFFFFFFFFF0130 :                     sndReq_slong:
(1)  255/FFFFFFFFFFFF0130 : 610A                		bsr	sndReq_sbyte
(1)  256/FFFFFFFFFFFF0132 : E09F                		ror.l	#8,d7
(1)  257/FFFFFFFFFFFF0134 :                     sndReq_saddr:	; 24-bit address
(1)  258/FFFFFFFFFFFF0134 : 6106                		bsr	sndReq_sbyte
(1)  259/FFFFFFFFFFFF0136 : E09F                		ror.l	#8,d7
(1)  260/FFFFFFFFFFFF0138 :                     sndReq_sword:
(1)  261/FFFFFFFFFFFF0138 : 6102                		bsr	sndReq_sbyte
(1)  262/FFFFFFFFFFFF013A : E09F                		ror.l	#8,d7
(1)  263/FFFFFFFFFFFF013C :                     sndReq_sbyte:
(1)  264/FFFFFFFFFFFF013C : 1D87 6000           		move.b	d7,(a6,d6.w)			; write byte
(1)  265/FFFFFFFFFFFF0140 : 5206                		addq.b	#1,d6				; next fifo pos
(1)  266/FFFFFFFFFFFF0142 : 0206 000F           		andi.b	#MAX_ZCMND-1,d6
(1)  267/FFFFFFFFFFFF0146 : 1A86                		move.b	d6,(a5)				; update commZWrite
(1)  268/FFFFFFFFFFFF0148 : 4E75                		rts
(1)  269/FFFFFFFFFFFF014A :                     
(1)  270/FFFFFFFFFFFF014A :                     ; --------------------------------------------------------
(1)  271/FFFFFFFFFFFF014A :                     ; gemaDmaPause
(1)  272/FFFFFFFFFFFF014A :                     ;
(1)  273/FFFFFFFFFFFF014A :                     ; Call this BEFORE doing any DMA transfer
(1)  274/FFFFFFFFFFFF014A :                     ; --------------------------------------------------------
(1)  275/FFFFFFFFFFFF014A :                     
(1)  276/FFFFFFFFFFFF014A :                     gemaDmaPause:
(1)  280/FFFFFFFFFFFF014A : 4847                		swap	d7
(1)  281/FFFFFFFFFFFF014C : 4846                		swap	d6
(1)  282/FFFFFFFFFFFF014E :                     ; .retry_flag:
(1)  283/FFFFFFFFFFFF014E : 6100 FF6E           		bsr	sndLockZ80
(1)  284/FFFFFFFFFFFF0152 : 13FC 0001 00A0      		move.b	#1,(z80_cpu+zDrvRomBlk)		; Block flag for Z80
         FFFFFFFFFFFF0158 : 002F             
(1)  285/FFFFFFFFFFFF015A : 6100 FF76           		bsr	sndUnlockZ80
(1)  286/FFFFFFFFFFFF015E : 3E3C 0060           		move.w	#96,d7				; ...Small delay...
(1)  287/FFFFFFFFFFFF0162 : 51CF FFFE           		dbf	d7,*
(1)  288/FFFFFFFFFFFF0166 : 4846                		swap	d6
(1)  289/FFFFFFFFFFFF0168 : 4847                		swap	d7
(1)  290/FFFFFFFFFFFF016A : 4E75                		rts
(1)  292/FFFFFFFFFFFF016C :                     
(1)  293/FFFFFFFFFFFF016C :                     ; --------------------------------------------------------
(1)  294/FFFFFFFFFFFF016C :                     ; gemaDmaResume
(1)  295/FFFFFFFFFFFF016C :                     ;
(1)  296/FFFFFFFFFFFF016C :                     ; Call this AFTER finishing DMA transfer
(1)  297/FFFFFFFFFFFF016C :                     ; --------------------------------------------------------
(1)  298/FFFFFFFFFFFF016C :                     
(1)  299/FFFFFFFFFFFF016C :                     gemaDmaResume:
(1)  303/FFFFFFFFFFFF016C : 4847                		swap	d7
(1)  304/FFFFFFFFFFFF016E : 4846                		swap	d6
(1)  305/FFFFFFFFFFFF0170 : 6100 FF4C           		bsr	sndLockZ80
(1)  306/FFFFFFFFFFFF0174 : 13FC 0000 00A0      		move.b	#0,(z80_cpu+zDrvRomBlk)		; Block flag for Z80
         FFFFFFFFFFFF017A : 002F             
(1)  307/FFFFFFFFFFFF017C : 6100 FF54           		bsr	sndUnlockZ80
(1)  308/FFFFFFFFFFFF0180 : 4846                		swap	d6
(1)  309/FFFFFFFFFFFF0182 : 4847                		swap	d7
(1)  310/FFFFFFFFFFFF0184 : 4E75                		rts
(1)  312/FFFFFFFFFFFF0186 :                     
(1)  313/FFFFFFFFFFFF0186 :                     ; --------------------------------------------------------
(1)  314/FFFFFFFFFFFF0186 :                     ; gemaDmaPauseRom
(1)  315/FFFFFFFFFFFF0186 :                     ;
(1)  316/FFFFFFFFFFFF0186 :                     ; Call this BEFORE doing any DMA transfer
(1)  317/FFFFFFFFFFFF0186 :                     ;
(1)  318/FFFFFFFFFFFF0186 :                     ; *** BANKS $880000/$900000 WILL BE GONE ***
(1)  319/FFFFFFFFFFFF0186 :                     ; --------------------------------------------------------
(1)  320/FFFFFFFFFFFF0186 :                     
(1)  321/FFFFFFFFFFFF0186 :                     gemaDmaPauseRom:
(1)  325/FFFFFFFFFFFF0186 : 4847                		swap	d7
(1)  326/FFFFFFFFFFFF0188 : 4846                		swap	d6
(1)  327/FFFFFFFFFFFF018A : 6100 FF32           		bsr	sndLockZ80
(1)  328/FFFFFFFFFFFF018E : 13FC 0001 00A0      		move.b	#1,(z80_cpu+zDrvRomBlk)		; Block flag for Z80
         FFFFFFFFFFFF0194 : 002F             
(1)  329/FFFFFFFFFFFF0196 : 6100 FF3A           		bsr	sndUnlockZ80
(1)  330/FFFFFFFFFFFF019A : 3E3C 0060           		move.w	#96,d7				; ...Small delay...
(1)  331/FFFFFFFFFFFF019E : 51CF FFFE           		dbf	d7,*
(1)  332/FFFFFFFFFFFF01A2 :                     ; 	if MARS|MARSCD
(1)  333/FFFFFFFFFFFF01A2 :                     ; 		move.w	#2,d6
(1)  334/FFFFFFFFFFFF01A2 :                     ; 		bsr	sndReqCmd
(1)  335/FFFFFFFFFFFF01A2 :                     ; 	endif
(1)  339/FFFFFFFFFFFF01A2 : 4846                		swap	d6
(1)  340/FFFFFFFFFFFF01A4 : 4847                		swap	d7
(1)  341/FFFFFFFFFFFF01A6 : 4E75                		rts
(1)  343/FFFFFFFFFFFF01A8 :                     
(1)  344/FFFFFFFFFFFF01A8 :                     ; --------------------------------------------------------
(1)  345/FFFFFFFFFFFF01A8 :                     ; gemaDmaResumeRom
(1)  346/FFFFFFFFFFFF01A8 :                     ;
(1)  347/FFFFFFFFFFFF01A8 :                     ; Call this AFTER finishing DMA transfer
(1)  348/FFFFFFFFFFFF01A8 :                     ;
(1)  349/FFFFFFFFFFFF01A8 :                     ; *** BANKS $880000/$900000 GET RESTORED ***
(1)  350/FFFFFFFFFFFF01A8 :                     ; --------------------------------------------------------
(1)  351/FFFFFFFFFFFF01A8 :                     
(1)  352/FFFFFFFFFFFF01A8 :                     gemaDmaResumeRom:
(1)  356/FFFFFFFFFFFF01A8 : 4847                		swap	d7
(1)  357/FFFFFFFFFFFF01AA : 4846                		swap	d6
(1)  358/FFFFFFFFFFFF01AC : 6100 FF10           		bsr	sndLockZ80
(1)  359/FFFFFFFFFFFF01B0 : 13FC 0000 00A0      		move.b	#0,(z80_cpu+zDrvRomBlk)		; Block flag for Z80
         FFFFFFFFFFFF01B6 : 002F             
(1)  360/FFFFFFFFFFFF01B8 : 6100 FF18           		bsr	sndUnlockZ80
(1)  361/FFFFFFFFFFFF01BC :                     ; 	if MARS|MARSCD
(1)  362/FFFFFFFFFFFF01BC :                     ; 		move.w	#3,d6
(1)  363/FFFFFFFFFFFF01BC :                     ; 		bsr	sndReqCmd
(1)  364/FFFFFFFFFFFF01BC :                     ; 	endif
(1)  368/FFFFFFFFFFFF01BC : 4846                		swap	d6
(1)  369/FFFFFFFFFFFF01BE : 4847                		swap	d7
(1)  370/FFFFFFFFFFFF01C0 : 4E75                		rts
(1)  372/FFFFFFFFFFFF01C2 :                     
(1)  373/FFFFFFFFFFFF01C2 :                     ; ====================================================================
(1)  374/FFFFFFFFFFFF01C2 :                     ; --------------------------------------------------------
(1)  375/FFFFFFFFFFFF01C2 :                     ; USER CALLS
(1)  376/FFFFFFFFFFFF01C2 :                     ; --------------------------------------------------------
(1)  377/FFFFFFFFFFFF01C2 :                     
(1)  378/FFFFFFFFFFFF01C2 :                     ; --------------------------------------------------------
(1)  379/FFFFFFFFFFFF01C2 :                     ; gemaTest
(1)  380/FFFFFFFFFFFF01C2 :                     ;
(1)  381/FFFFFFFFFFFF01C2 :                     ; For TESTING only.
(1)  382/FFFFFFFFFFFF01C2 :                     ; --------------------------------------------------------
(1)  383/FFFFFFFFFFFF01C2 :                     
(1)  384/FFFFFFFFFFFF01C2 :                     gemaTest:
(1)  385/FFFFFFFFFFFF01C2 : 6100 FF18           		bsr	sndReq_Enter
(1)  386/FFFFFFFFFFFF01C6 : 3E3C 0000           		move.w	#$00,d7		; Command $00
(1)  387/FFFFFFFFFFFF01CA : 6100 FF56           		bsr	sndReq_scmd
(1)  388/FFFFFFFFFFFF01CE : 6000 FF3C           		bra 	sndReq_Exit
(1)  389/FFFFFFFFFFFF01D2 :                     
(1)  390/FFFFFFFFFFFF01D2 :                     ; --------------------------------------------------------
(1)  391/FFFFFFFFFFFF01D2 :                     ; gemaSetMasterList
(1)  392/FFFFFFFFFFFF01D2 :                     ;
(1)  393/FFFFFFFFFFFF01D2 :                     ; Set Tracklist location
(1)  394/FFFFFFFFFFFF01D2 :                     ;
(1)  395/FFFFFFFFFFFF01D2 :                     ; Input:
(1)  396/FFFFFFFFFFFF01D2 :                     ; d0.l - 68k pointer
(1)  397/FFFFFFFFFFFF01D2 :                     ; --------------------------------------------------------
(1)  398/FFFFFFFFFFFF01D2 :                     
(1)  399/FFFFFFFFFFFF01D2 :                     gemaSetMasterList:
(1)  400/FFFFFFFFFFFF01D2 : 6100 FF08           		bsr	sndReq_Enter
(1)  401/FFFFFFFFFFFF01D6 : 3E3C 0001           		move.w	#$01,d7		; Command $01
(1)  402/FFFFFFFFFFFF01DA : 6100 FF46           		bsr	sndReq_scmd
(1)  403/FFFFFFFFFFFF01DE : 2E00                		move.l	d0,d7
(1)  404/FFFFFFFFFFFF01E0 : 6100 FF4E           		bsr	sndReq_slong
(1)  405/FFFFFFFFFFFF01E4 : 6000 FF26           		bra 	sndReq_Exit
(1)  406/FFFFFFFFFFFF01E8 :                     
(1)  407/FFFFFFFFFFFF01E8 :                     ; --------------------------------------------------------
(1)  408/FFFFFFFFFFFF01E8 :                     ; gemaPlayTrack
(1)  409/FFFFFFFFFFFF01E8 :                     ;
(1)  410/FFFFFFFFFFFF01E8 :                     ; Play a sequence with arguments
(1)  411/FFFFFFFFFFFF01E8 :                     ;
(1)  412/FFFFFFFFFFFF01E8 :                     ; Input:
(1)  413/FFFFFFFFFFFF01E8 :                     ; d0.b - Playback slot number
(1)  414/FFFFFFFFFFFF01E8 :                     ;        If -1: use auto-search
(1)  415/FFFFFFFFFFFF01E8 :                     ; d1.b - Sequence number
(1)  416/FFFFFFFFFFFF01E8 :                     ; d2.b - Starting block
(1)  417/FFFFFFFFFFFF01E8 :                     ; --------------------------------------------------------
(1)  418/FFFFFFFFFFFF01E8 :                     
(1)  419/FFFFFFFFFFFF01E8 :                     gemaPlayTrack:
(1)  420/FFFFFFFFFFFF01E8 : 6100 FEF2           		bsr	sndReq_Enter
(1)  421/FFFFFFFFFFFF01EC : 3E3C 0002           		move.w	#$02,d7		; Command $02
(1)  422/FFFFFFFFFFFF01F0 : 6100 FF30           		bsr	sndReq_scmd
(1)  423/FFFFFFFFFFFF01F4 : 1E01                		move.b	d1,d7		; d1.b Seq number
(1)  424/FFFFFFFFFFFF01F6 : 6100 FF44           		bsr	sndReq_sbyte
(1)  425/FFFFFFFFFFFF01FA : 1E02                		move.b	d2,d7		; d2.b Block <--
(1)  426/FFFFFFFFFFFF01FC : 6100 FF3E           		bsr	sndReq_sbyte
(1)  427/FFFFFFFFFFFF0200 : 1E00                		move.b	d0,d7		; d0.b Slot
(1)  428/FFFFFFFFFFFF0202 : 6100 FF38           		bsr	sndReq_sbyte
(1)  429/FFFFFFFFFFFF0206 : 6000 FF04           		bra 	sndReq_Exit
(1)  430/FFFFFFFFFFFF020A :                     
(1)  431/FFFFFFFFFFFF020A :                     ; --------------------------------------------------------
(1)  432/FFFFFFFFFFFF020A :                     ; gemaStopTrack
(1)  433/FFFFFFFFFFFF020A :                     ;
(1)  434/FFFFFFFFFFFF020A :                     ; Stops tracks with the same sequence number
(1)  435/FFFFFFFFFFFF020A :                     ;
(1)  436/FFFFFFFFFFFF020A :                     ; Input:
(1)  437/FFFFFFFFFFFF020A :                     ; d0.b - Playback slot number
(1)  438/FFFFFFFFFFFF020A :                     ;        If -1: stop all slots with the same number
(1)  439/FFFFFFFFFFFF020A :                     ; d1.b - Sequence number to search for
(1)  440/FFFFFFFFFFFF020A :                     ; --------------------------------------------------------
(1)  441/FFFFFFFFFFFF020A :                     
(1)  442/FFFFFFFFFFFF020A :                     gemaStopTrack:
(1)  443/FFFFFFFFFFFF020A : 6100 FED0           		bsr	sndReq_Enter
(1)  444/FFFFFFFFFFFF020E : 3E3C 0003           		move.w	#$03,d7		; Command $03
(1)  445/FFFFFFFFFFFF0212 : 6100 FF0E           		bsr	sndReq_scmd
(1)  446/FFFFFFFFFFFF0216 : 1E01                		move.b	d1,d7		; d0.b Seq number
(1)  447/FFFFFFFFFFFF0218 : 6100 FF22           		bsr	sndReq_sbyte
(1)  448/FFFFFFFFFFFF021C : 1E00                		move.b	d0,d7		; d1.b Slot
(1)  449/FFFFFFFFFFFF021E : 6100 FF1C           		bsr	sndReq_sbyte
(1)  450/FFFFFFFFFFFF0222 : 6000 FEE8           		bra 	sndReq_Exit
(1)  451/FFFFFFFFFFFF0226 :                     
(1)  452/FFFFFFFFFFFF0226 :                     ; --------------------------------------------------------
(1)  453/FFFFFFFFFFFF0226 :                     ; gemaFadeTrack
(1)  454/FFFFFFFFFFFF0226 :                     ;
(1)  455/FFFFFFFFFFFF0226 :                     ; Set Master volume to a track slot.
(1)  456/FFFFFFFFFFFF0226 :                     ;
(1)  457/FFFFFFFFFFFF0226 :                     ; Input:
(1)  458/FFFFFFFFFFFF0226 :                     ; d0.b - Playback slot number
(1)  459/FFFFFFFFFFFF0226 :                     ;        If -1: Apply to all slots
(1)  460/FFFFFFFFFFFF0226 :                     ; d1.b - Target volume
(1)  461/FFFFFFFFFFFF0226 :                     ; d2.b - Fade speed TODO
(1)  462/FFFFFFFFFFFF0226 :                     ;
(1)  463/FFFFFFFFFFFF0226 :                     ; Notes:
(1)  464/FFFFFFFFFFFF0226 :                     ; - DO NOT MIX THIS WITH gemaSetTrackVol
(1)  465/FFFFFFFFFFFF0226 :                     ; - In v1.0 this only works on (re)start
(1)  466/FFFFFFFFFFFF0226 :                     ;   or during new notes on playback.
(1)  467/FFFFFFFFFFFF0226 :                     ; --------------------------------------------------------
(1)  468/FFFFFFFFFFFF0226 :                     
(1)  469/FFFFFFFFFFFF0226 :                     gemaFadeTrack:
(1)  470/FFFFFFFFFFFF0226 : 6100 FEB4           		bsr	sndReq_Enter
(1)  471/FFFFFFFFFFFF022A : 3E3C 0005           		move.w	#$05,d7		; Command $05
(1)  472/FFFFFFFFFFFF022E : 6100 FEF2           		bsr	sndReq_scmd
(1)  473/FFFFFFFFFFFF0232 : 1E01                		move.b	d1,d7		; d0.b Target volume
(1)  474/FFFFFFFFFFFF0234 : 6100 FF06           		bsr	sndReq_sbyte
(1)  475/FFFFFFFFFFFF0238 : 1E00                		move.b	d0,d7		; d1.b Slot
(1)  476/FFFFFFFFFFFF023A : 6100 FF00           		bsr	sndReq_sbyte
(1)  477/FFFFFFFFFFFF023E : 6000 FECC           		bra 	sndReq_Exit
(1)  478/FFFFFFFFFFFF0242 :                     
(1)  479/FFFFFFFFFFFF0242 :                     ; --------------------------------------------------------
(1)  480/FFFFFFFFFFFF0242 :                     ; gemaSetTrackVol
(1)  481/FFFFFFFFFFFF0242 :                     ;
(1)  482/FFFFFFFFFFFF0242 :                     ; Set Master volume to a track slot.
(1)  483/FFFFFFFFFFFF0242 :                     ;
(1)  484/FFFFFFFFFFFF0242 :                     ; Input:
(1)  485/FFFFFFFFFFFF0242 :                     ; d0.b - Playback slot number
(1)  486/FFFFFFFFFFFF0242 :                     ;        If -1: Set to all slots
(1)  487/FFFFFFFFFFFF0242 :                     ; d1.b - Master volume ($00-$40 max-min)
(1)  488/FFFFFFFFFFFF0242 :                     ;
(1)  489/FFFFFFFFFFFF0242 :                     ; Notes:
(1)  490/FFFFFFFFFFFF0242 :                     ; - DO NOT MIX THIS WITH gemaFadeTrack
(1)  491/FFFFFFFFFFFF0242 :                     ; - In v1.0 this only works on (re)start
(1)  492/FFFFFFFFFFFF0242 :                     ;   or during new notes on playback.
(1)  493/FFFFFFFFFFFF0242 :                     ; --------------------------------------------------------
(1)  494/FFFFFFFFFFFF0242 :                     
(1)  495/FFFFFFFFFFFF0242 :                     gemaSetTrackVol:
(1)  496/FFFFFFFFFFFF0242 : 6100 FE98           		bsr	sndReq_Enter
(1)  497/FFFFFFFFFFFF0246 : 3E3C 0006           		move.w	#$06,d7		; Command $06
(1)  498/FFFFFFFFFFFF024A : 6100 FED6           		bsr	sndReq_scmd
(1)  499/FFFFFFFFFFFF024E : 1E01                		move.b	d1,d7		; d0.b Volume data <--
(1)  500/FFFFFFFFFFFF0250 : 6100 FEEA           		bsr	sndReq_sbyte
(1)  501/FFFFFFFFFFFF0254 : 1E00                		move.b	d0,d7		; d1.b Slot
(1)  502/FFFFFFFFFFFF0256 : 6100 FEE4           		bsr	sndReq_sbyte
(1)  503/FFFFFFFFFFFF025A : 6000 FEB0           		bra 	sndReq_Exit
(1)  504/FFFFFFFFFFFF025E :                     
(1)  505/FFFFFFFFFFFF025E :                     ; --------------------------------------------------------
(1)  506/FFFFFFFFFFFF025E :                     ; gemaSetBeats
(1)  507/FFFFFFFFFFFF025E :                     ;
(1)  508/FFFFFFFFFFFF025E :                     ; Sets global subbeats
(1)  509/FFFFFFFFFFFF025E :                     ;
(1)  510/FFFFFFFFFFFF025E :                     ; d0.w - sub-beats
(1)  511/FFFFFFFFFFFF025E :                     ; --------------------------------------------------------
(1)  512/FFFFFFFFFFFF025E :                     
(1)  513/FFFFFFFFFFFF025E :                     ; TODO: find a way to calculate this and
(1)  514/FFFFFFFFFFFF025E :                     ; explain to the user.
(1)  515/FFFFFFFFFFFF025E :                     
(1)  516/FFFFFFFFFFFF025E :                     gemaSetBeats:
(1)  517/FFFFFFFFFFFF025E : 6100 FE7C           		bsr	sndReq_Enter
(1)  518/FFFFFFFFFFFF0262 : 3E3C 0007           		move.w	#$07,d7		; Command $07
(1)  519/FFFFFFFFFFFF0266 : 6100 FEBA           		bsr	sndReq_scmd
(1)  520/FFFFFFFFFFFF026A : 3E00                		move.w	d0,d7
(1)  521/FFFFFFFFFFFF026C : 6100 FECA           		bsr	sndReq_sword
(1)  522/FFFFFFFFFFFF0270 : 6000 FE9A           		bra 	sndReq_Exit
(1)  523/FFFFFFFFFFFF0274 :                     
     202/FFFFFFFFFFFF0274 :                     		include	"system/md/video.asm"
(1)    1/FFFFFFFFFFFF0274 :                     ; ====================================================================
(1)    2/FFFFFFFFFFFF0274 :                     ; ----------------------------------------------------------------
(1)    3/FFFFFFFFFFFF0274 :                     ; Genesis VDP section
(1)    4/FFFFFFFFFFFF0274 :                     ; ----------------------------------------------------------------
(1)    5/FFFFFFFFFFFF0274 :                     
(1)    6/FFFFFFFFFFFF0274 :                     ; ====================================================================
(1)    7/FFFFFFFFFFFF0274 :                     ; --------------------------------------------------------
(1)    8/FFFFFFFFFFFF0274 :                     ; Settings
(1)    9/FFFFFFFFFFFF0274 :                     ; --------------------------------------------------------
(1)   10/FFFFFFFFFFFF0274 :                     
(1)   11/FFFFFFFFFFFF0274 : =$18                 MAX_MDOBJ	equ 24		; MAX Objects
(1)   12/FFFFFFFFFFFF0274 : =$18                 MAX_MDDMATSK	equ 24		; MAX DMA BLAST entries
(1)   13/FFFFFFFFFFFF0274 : =$7FF                varNullVram	equ $07FF	; Default Blank cell
(1)   14/FFFFFFFFFFFF0274 : =$580                varPrintVram	equ $0580	; Default location of the PRINT text graphics
(1)   15/FFFFFFFFFFFF0274 : =$3                  varPrintPal	equ 3		; Palette to use for the printable text
(1)   16/FFFFFFFFFFFF0274 :                     
(1)   17/FFFFFFFFFFFF0274 :                     ; --------------------------------------------------------
(1)   18/FFFFFFFFFFFF0274 :                     ; Variables
(1)   19/FFFFFFFFFFFF0274 :                     ; --------------------------------------------------------
(1)   20/FFFFFFFFFFFF0274 :                     
(1)   21/FFFFFFFFFFFF0274 :                     ; VDP Register $80
(1)   22/FFFFFFFFFFFF0274 : =$2                  HVStop		equ $02
(1)   23/FFFFFFFFFFFF0274 : =$10                 HintEnbl	equ $10
(1)   24/FFFFFFFFFFFF0274 : =$1                  bitHVStop	equ 1
(1)   25/FFFFFFFFFFFF0274 : =$4                  bitHintEnbl	equ 4
(1)   26/FFFFFFFFFFFF0274 :                     
(1)   27/FFFFFFFFFFFF0274 :                     ; VDP Register $81
(1)   28/FFFFFFFFFFFF0274 : =$40                 DispEnbl 	equ $40
(1)   29/FFFFFFFFFFFF0274 : =$20                 VintEnbl 	equ $20
(1)   30/FFFFFFFFFFFF0274 : =$10                 DmaEnbl		equ $10
(1)   31/FFFFFFFFFFFF0274 : =$6                  bitDispEnbl	equ 6
(1)   32/FFFFFFFFFFFF0274 : =$5                  bitVintEnbl	equ 5
(1)   33/FFFFFFFFFFFF0274 : =$4                  bitDmaEnbl	equ 4
(1)   34/FFFFFFFFFFFF0274 : =$3                  bitV30		equ 3
(1)   35/FFFFFFFFFFFF0274 :                     
(1)   36/FFFFFFFFFFFF0274 :                     ; vdp_ctrl READ bits (full WORD)
(1)   37/FFFFFFFFFFFF0274 : =$9                  bitFifoE	equ 9		; DMA FIFO empty
(1)   38/FFFFFFFFFFFF0274 : =$8                  bitFifoF	equ 8		; DMA FIFO full
(1)   39/FFFFFFFFFFFF0274 : =$7                  bitVInt		equ 7		; Vertical interrupt
(1)   40/FFFFFFFFFFFF0274 : =$6                  bitSprOvr	equ 6		; Sprite overflow
(1)   41/FFFFFFFFFFFF0274 : =$5                  bitSprCol	equ 5		; Sprite collision
(1)   42/FFFFFFFFFFFF0274 : =$4                  bitOdd		equ 4		; EVEN or ODD frame displayed on interlace mode
(1)   43/FFFFFFFFFFFF0274 : =$3                  bitVBlk		equ 3		; Inside VBlank
(1)   44/FFFFFFFFFFFF0274 : =$2                  bitHBlk		equ 2		; Inside HBlank
(1)   45/FFFFFFFFFFFF0274 : =$1                  bitDma		equ 1		; Only works for FILL and COPY
(1)   46/FFFFFFFFFFFF0274 : =$0                  bitPal		equ 0
(1)   47/FFFFFFFFFFFF0274 :                     
(1)   48/FFFFFFFFFFFF0274 :                     ; md_bg_flags
(1)   49/FFFFFFFFFFFF0274 : =$0                  bitDrwR		equ 0
(1)   50/FFFFFFFFFFFF0274 : =$1                  bitDrwL		equ 1
(1)   51/FFFFFFFFFFFF0274 : =$2                  bitDrwD		equ 2
(1)   52/FFFFFFFFFFFF0274 : =$3                  bitDrwU		equ 3
(1)   53/FFFFFFFFFFFF0274 : =$6                  bitMarsBg	equ 6
(1)   54/FFFFFFFFFFFF0274 : =$7                  bitBgOn		equ 7
(1)   55/FFFFFFFFFFFF0274 :                     
(1)   56/FFFFFFFFFFFF0274 :                     ; ====================================================================
(1)   57/FFFFFFFFFFFF0274 :                     ; ----------------------------------------------------------------
(1)   58/FFFFFFFFFFFF0274 :                     ; Structs
(1)   59/FFFFFFFFFFFF0274 :                     ; ----------------------------------------------------------------
(1)   60/FFFFFFFFFFFF0274 :                     
(1)   61/FFFFFFFFFFFF0274 :                     ; --------------------------------
(1)   62/FFFFFFFFFFFF0274 :                     ; object strct
(1)   63/FFFFFFFFFFFF0274 :                     ; --------------------------------
(1)   64/FFFFFFFFFFFF0274 :                     
(1)   65/FFFFFFFFFFFF0274 : (MACRO)              		strct 0
(1)   65/FFFFFFFFFFFF0274 : =$FFFFFFFFFFFF0274   GLBL_LASTPC     set *
(1)   65/    3C76 :                                     dephase
(1)   65/       0 :                                     phase 0
(1)   65/       0 : =$0                  GLBL_LASTORG    set *
(1)   66/       0 :                     obj_code	ds.l 1		; Object code, 0 == no object
(1)   67/       4 :                     obj_x		ds.l 1		; Object X Position 0000.0000
(1)   68/       8 :                     obj_y		ds.l 1		; Object Y Position 0000.0000
(1)   69/       C :                     obj_map		ds.l 1		; Object Sprite map data location
(1)   70/      10 :                     obj_dma		ds.l 1		; Object DMA map, 0 == Don't use DMA
(1)   71/      14 :                     obj_vram	ds.w 1		; Object VRAM position (If DMA enabled: output location)
(1)   72/      16 :                     obj_x_spd	ds.w 1		; Object X Speed 00.00
(1)   73/      18 :                     obj_y_spd	ds.w 1		; Object Y Speed 00.00
(1)   74/      1A :                     obj_anim_indx	ds.w 1		; * Object animation script index (obj_anim + obj_anim_indx)
(1)   75/      1C :                     obj_anim_id	ds.w 1		; * Object animation number: $ccss c-current s-saved
(1)   76/      1E :                     obj_frame	ds.w 1		; * Object current frame
(1)   77/      20 :                     obj_anim_spd	ds.b 1		; * Object animation delay
(1)   78/      21 :                     obj_index	ds.b 1		; Object code index
(1)   79/      22 :                     obj_set		ds.b 1		; Object settings
(1)   80/      23 :                     obj_subid	ds.b 1		; Object Sub-ID for Object placement
(1)   81/      24 :                     obj_status	ds.b 1		; Object custom status
(1)   82/      25 :                     obj_FREE	ds.b 1		; (FILLER align byte)
(1)   83/      26 :                     obj_ram		ds.b $40	; Object's own RAM
(1)   84/      66 :                     sizeof_mdobj	ds.l 0
(1)   85/      68 : (MACRO)              		endstrct
(1)   85/       0 :                                     org GLBL_LASTORG
(1)   85/FFFFFFFFFFFF0274 :                                     phase GLBL_LASTPC
(1)   86/FFFFFFFFFFFF0274 :                     ; 		message "\{sizeof_mdobj}"
(1)   87/FFFFFFFFFFFF0274 :                     
(1)   88/FFFFFFFFFFFF0274 :                     ; --------------------------------
(1)   89/FFFFFFFFFFFF0274 :                     ; ** obj_set
(1)   90/FFFFFFFFFFFF0274 : =$7                  bitobj_Mars	equ	7	; 32X ONLY: This objects draws to the 32X side (256-color sprite)
(1)   91/FFFFFFFFFFFF0274 : =$1                  bitobj_flipV	equ	1	; Set to flip object Vertically
(1)   92/FFFFFFFFFFFF0274 : =$0                  bitobj_flipH	equ	0	; Set to flip object Horizontally
(1)   93/FFFFFFFFFFFF0274 :                     
(1)   94/FFFFFFFFFFFF0274 :                     ; --------------------------------
(1)   95/FFFFFFFFFFFF0274 :                     ; ** obj_set
(1)   96/FFFFFFFFFFFF0274 :                     ; bitobj_air	equ	0	; set if floating/jumping
(1)   97/FFFFFFFFFFFF0274 :                     
(1)   98/FFFFFFFFFFFF0274 :                     ; --------------------------------
(1)   99/FFFFFFFFFFFF0274 :                     ; ** obj_size
(1)  100/FFFFFFFFFFFF0274 :                     ; at_u		equ	3
(1)  101/FFFFFFFFFFFF0274 :                     ; at_d		equ	2
(1)  102/FFFFFFFFFFFF0274 :                     ; at_l		equ	1
(1)  103/FFFFFFFFFFFF0274 :                     ; at_r		equ	0
(1)  104/FFFFFFFFFFFF0274 :                     
(1)  105/FFFFFFFFFFFF0274 :                     ; ====================================================================
(1)  106/FFFFFFFFFFFF0274 :                     ; ----------------------------------------------------------------
(1)  107/FFFFFFFFFFFF0274 :                     ; Video RAM
(1)  108/FFFFFFFFFFFF0274 :                     ; ----------------------------------------------------------------
(1)  109/FFFFFFFFFFFF0274 :                     
(1)  110/FFFFFFFFFFFF0274 : (MACRO)              			strct RAM_MdVideo
(1)  110/FFFFFFFFFFFF0274 : =$FFFFFFFFFFFF0274   GLBL_LASTPC     set *
(1)  110/       0 :                                     dephase
(1)  110/FFFFFFFFFFFFA004 :                                     phase RAM_MDVIDEO
(1)  110/FFFFFFFFFFFFA004 : =$FFFFFFFFFFFFA004   GLBL_LASTORG    set *
(1)  111/FFFFFFFFFFFFA004 :                     RAM_HorScroll		ds.l 240			; DMA Horizontal scroll data
(1)  112/FFFFFFFFFFFFA3C4 :                     RAM_VerScroll		ds.l 320/16			; DMA Vertical scroll data
(1)  113/FFFFFFFFFFFFA414 :                     RAM_Sprites		ds.w 8*80			; DMA Sprites
(1)  114/FFFFFFFFFFFFA914 :                     RAM_SprDrwPz		ds.w 8*80			; External sprite pieces
(1)  115/FFFFFFFFFFFFAE14 :                     RAM_Palette		ds.w 64				; DMA palette
(1)  116/FFFFFFFFFFFFAE94 :                     RAM_MdMarsPalFd		ds.w 256			; Target 32X palette for FadeIn/Out (NOTE: CPU intensive)
(1)  117/FFFFFFFFFFFFB094 :                     RAM_PaletteFd		ds.w 64				; Target MD palette for FadeIn/Out
(1)  118/FFFFFFFFFFFFB114 :                     RAM_VdpDmaList		ds.b $10*MAX_MDDMATSK		; DMA BLAST list for VBlank
(1)  119/FFFFFFFFFFFFB294 :                     RAM_Objects		ds.b MAX_MDOBJ*sizeof_mdobj	; Objects
(1)  120/FFFFFFFFFFFFBC24 :                     RAM_ObjDispList		ds.w MAX_MDOBJ			; half-RAM pointers for display (Obj|Extra)
(1)  121/FFFFFFFFFFFFBC54 :                     RAM_VidPrntList		ds.w 3*64			; Video_Print list: Address, Type
(1)  122/FFFFFFFFFFFFBDD4 :                     RAM_FrameCount		ds.l 1				; Frames counter
(1)  123/FFFFFFFFFFFFBDD8 :                     RAM_SprDrwCntr		ds.w 1
(1)  124/FFFFFFFFFFFFBDDA :                     RAM_SprLinkNum		ds.w 1
(1)  125/FFFFFFFFFFFFBDDC :                     RAM_VdpExWrite		ds.w 1
(1)  126/FFFFFFFFFFFFBDDE :                     RAM_VdpDmaIndx		ds.w 1				; Current index in DMA BLAST list
(1)  127/FFFFFFFFFFFFBDE0 :                     RAM_VdpDmaMod		ds.w 1				; Mid-write flag
(1)  128/FFFFFFFFFFFFBDE2 :                     RAM_VidPrntVram		ds.w 1				; Default VRAM location for ASCII text used by Video_Print
(1)  129/FFFFFFFFFFFFBDE4 :                     RAM_FadeMdReq		ds.w 1				; FadeIn/Out request for Genesis palette (01-FadeIn 02-FadeOut)
(1)  130/FFFFFFFFFFFFBDE6 :                     RAM_FadeMdIncr		ds.w 1				; Fading increment count
(1)  131/FFFFFFFFFFFFBDE8 :                     RAM_FadeMdDelay		ds.w 1				; Fading delay
(1)  132/FFFFFFFFFFFFBDEA :                     RAM_FadeMdTmr		ds.w 1				; Fading delay timer
(1)  133/FFFFFFFFFFFFBDEC :                     RAM_FadeMarsReq		ds.w 1				; Same thing but for 32X's 256-color (01-FadeIn 02-FadeOut)
(1)  134/FFFFFFFFFFFFBDEE :                     RAM_FadeMarsIncr	ds.w 1				; (Hint: Set to 4 to syncronize with Genesis' FadeIn/Out)
(1)  135/FFFFFFFFFFFFBDF0 :                     RAM_FadeMarsDelay	ds.w 1
(1)  136/FFFFFFFFFFFFBDF2 :                     RAM_FadeMarsTmr		ds.w 1
(1)  137/FFFFFFFFFFFFBDF4 :                     RAM_MdMars_DrawAll	ds.w 1
(1)  138/FFFFFFFFFFFFBDF6 :                     RAM_VdpRegs		ds.b 24				; VDP Register cache
(1)  139/FFFFFFFFFFFFBE0E :                     sizeof_mdvid		ds.l 0
(1)  140/FFFFFFFFFFFFBE14 : (MACRO)              			endstrct
(1)  140/FFFFFFFFFFFFA004 :                                     org GLBL_LASTORG
(1)  140/FFFFFFFFFFFF0274 :                                     phase GLBL_LASTPC
(1)  141/FFFFFFFFFFFF0274 :                     
(1)  142/FFFFFFFFFFFF0274 : (MACRO)              		erreport "MD VIDEO RAM",sizeof_mdvid-RAM_MdVideo,MAX_MdVideo
(1)  143/FFFFFFFFFFFF0274 :                     
(1)  144/FFFFFFFFFFFF0274 :                     ; ====================================================================
(1)  145/FFFFFFFFFFFF0274 :                     ; --------------------------------------------------------
(1)  146/FFFFFFFFFFFF0274 :                     ; Initialize Genesis video
(1)  147/FFFFFFFFFFFF0274 :                     ;
(1)  148/FFFFFFFFFFFF0274 :                     ; Breaks:
(1)  149/FFFFFFFFFFFF0274 :                     ; d6-d7/a5-a6
(1)  150/FFFFFFFFFFFF0274 :                     ; --------------------------------------------------------
(1)  151/FFFFFFFFFFFF0274 :                     
(1)  152/FFFFFFFFFFFF0274 :                     Video_Init:
(1)  153/FFFFFFFFFFFF0274 : 4DF8 A004           		lea	(RAM_MdVideo).w,a6		; Clear our RAM section
(1)  154/FFFFFFFFFFFF0278 : 3C3C 8000           		move.w	#$8000,d6
(1)  155/FFFFFFFFFFFF027C : 3E3C 1E09           		move.w	#(sizeof_mdvid-RAM_MdVideo)-1,d7
(1)  156/FFFFFFFFFFFF0280 :                     .clrram:
(1)  157/FFFFFFFFFFFF0280 : 1CC6                		move.b	d6,(a6)+			; (Write the LSB zero)
(1)  158/FFFFFFFFFFFF0282 : 51CF FFFC           		dbf	d7,.clrram
(1)  159/FFFFFFFFFFFF0286 : 31FC 0001 BDDA      		move.w	#1,(RAM_SprLinkNum).w
(1)  160/FFFFFFFFFFFF028C : 4DFA 0030           		lea	list_vdpregs(pc),a6		; Write "cache'd" VDP registers
(1)  161/FFFFFFFFFFFF0290 : 4BF8 BDF6           		lea	(RAM_VdpRegs).w,a5
(1)  162/FFFFFFFFFFFF0294 : 3E3C 0010           		move.w	#17-1,d7
(1)  163/FFFFFFFFFFFF0298 :                     .loop:
(1)  164/FFFFFFFFFFFF0298 : 1C1E                		move.b	(a6)+,d6
(1)  165/FFFFFFFFFFFF029A : 1AC6                		move.b	d6,(a5)+
(1)  166/FFFFFFFFFFFF029C : 51CF FFFA           		dbf	d7,.loop
(1)  167/FFFFFFFFFFFF02A0 :                     
(1)  168/FFFFFFFFFFFF02A0 :                     ; --------------------------------------------------------
(1)  169/FFFFFFFFFFFF02A0 :                     ; Video_Update
(1)  170/FFFFFFFFFFFF02A0 :                     ;
(1)  171/FFFFFFFFFFFF02A0 :                     ; Writes register data stored in RAM to VDP
(1)  172/FFFFFFFFFFFF02A0 :                     ; from registers $80 to $90
(1)  173/FFFFFFFFFFFF02A0 :                     ;
(1)  174/FFFFFFFFFFFF02A0 :                     ; WINDOW registers $91 and $92 are written
(1)  175/FFFFFFFFFFFF02A0 :                     ; manually.
(1)  176/FFFFFFFFFFFF02A0 :                     ;
(1)  177/FFFFFFFFFFFF02A0 :                     ; Breaks:
(1)  178/FFFFFFFFFFFF02A0 :                     ; d6-d7/a5-a6
(1)  179/FFFFFFFFFFFF02A0 :                     ; --------------------------------------------------------
(1)  180/FFFFFFFFFFFF02A0 :                     
(1)  181/FFFFFFFFFFFF02A0 :                     Video_Update:
(1)  182/FFFFFFFFFFFF02A0 : 4DF8 BDF6           		lea	(RAM_VdpRegs).w,a6
(1)  183/FFFFFFFFFFFF02A4 : 4BF9 00C0 0004      		lea	(vdp_ctrl),a5
(1)  184/FFFFFFFFFFFF02AA : 3C3C 8000           		move.w	#$8000,d6
(1)  185/FFFFFFFFFFFF02AE : 7E10                		moveq	#17-1,d7
(1)  186/FFFFFFFFFFFF02B0 :                     .loop:
(1)  187/FFFFFFFFFFFF02B0 : 1C1E                		move.b	(a6)+,d6
(1)  188/FFFFFFFFFFFF02B2 : 3A86                		move.w	d6,(a5)
(1)  189/FFFFFFFFFFFF02B4 : 0646 0100           		addi.w	#$0100,d6
(1)  190/FFFFFFFFFFFF02B8 : 51CF FFF6           		dbf	d7,.loop
(1)  191/FFFFFFFFFFFF02BC :                     .exit:
(1)  192/FFFFFFFFFFFF02BC : 4E75                		rts
(1)  193/FFFFFFFFFFFF02BE :                     
(1)  194/FFFFFFFFFFFF02BE :                     ; ------------------------------------------------
(1)  195/FFFFFFFFFFFF02BE :                     ; Default VDP register settings
(1)  196/FFFFFFFFFFFF02BE :                     ; ------------------------------------------------
(1)  197/FFFFFFFFFFFF02BE :                     
(1)  198/FFFFFFFFFFFF02BE :                     list_vdpregs:
(1)  199/FFFFFFFFFFFF02BE : 04                  		dc.b $04			; No HBlank interrupt, HV Counter on
(1)  200/FFFFFFFFFFFF02BF : 04                  		dc.b $04			; Display ON, No VBlank interrupt
(1)  201/FFFFFFFFFFFF02C0 : 30                  		dc.b (($C000)>>10)		; Layer A at VRAM $C000 (%00xxx000)
(1)  202/FFFFFFFFFFFF02C1 : 34                  		dc.b (($D000)>>10)		; Window  at VRAM $D000 (%00xxxxy0)
(1)  203/FFFFFFFFFFFF02C2 : 07                  		dc.b (($E000)>>13)		; Layer B at VRAM $E000 (%00000xxx)
(1)  204/FFFFFFFFFFFF02C3 : 7C                  		dc.b (($F800)>>9)		; Sprites at VRAM $F800 (%0xxxxxxy)
(1)  205/FFFFFFFFFFFF02C4 : 00                  		dc.b $00			; Unused
(1)  206/FFFFFFFFFFFF02C5 : 00                  		dc.b $00			; Background color: $00
(1)  207/FFFFFFFFFFFF02C6 : 00                  		dc.b $00			; Unused
(1)  208/FFFFFFFFFFFF02C7 : 00                  		dc.b $00			; Unused
(1)  209/FFFFFFFFFFFF02C8 : 00                  		dc.b $00			; HInt line number trigger
(1)  210/FFFFFFFFFFFF02C9 : 00                  		dc.b (%000|%00)			; No ExtInt, Scroll: VSCR:full HSCR:full
(1)  211/FFFFFFFFFFFF02CA : 81                  		dc.b $81			; H40, No shadow mode, 320-pixel resolution mode
(1)  212/FFFFFFFFFFFF02CB : 3F                  		dc.b (($FC00)>>10)		; HScroll at VRAM $FC00 (%00xxxxxx)
(1)  213/FFFFFFFFFFFF02CC : 00                  		dc.b $00			; Unused
(1)  214/FFFFFFFFFFFF02CD : 02                  		dc.b $02			; VDP auto-increment: $02
(1)  215/FFFFFFFFFFFF02CE : 01                  		dc.b (%00<<4)|%01		; Scroll area size: V32 H64
(1)  216/FFFFFFFFFFFF02CF : 00                  		dc.b $00
(1)  217/FFFFFFFFFFFF02D0 : 00                  		dc.b $00
(1)  218/FFFFFFFFFFFF02D1 :                     		align 2
(1)  219/FFFFFFFFFFFF02D2 :                     ; Default PRINT palette
(1)  220/FFFFFFFFFFFF02D2 : 0000 0EEE 0CCC      ASCII_PAL:	dc.w $0000,$0EEE,$0CCC,$0AAA,$0888,$0444,$000E,$0008
         FFFFFFFFFFFF02D8 : 0AAA 0888 0444 
         FFFFFFFFFFFF02DE : 000E 0008          
(1)  221/FFFFFFFFFFFF02E2 : 00EE 0088 00E0      		dc.w $00EE,$0088,$00E0,$0080,$0E00,$0800,$0000,$0000
         FFFFFFFFFFFF02E8 : 0080 0E00 0800 
         FFFFFFFFFFFF02EE : 0000 0000          
(1)  222/FFFFFFFFFFFF02F2 :                     		align 2
(1)  223/FFFFFFFFFFFF02F4 :                     
(1)  224/FFFFFFFFFFFF02F4 :                     ; --------------------------------------------------------
(1)  225/FFFFFFFFFFFF02F4 :                     ; Video_Clear
(1)  226/FFFFFFFFFFFF02F4 :                     ;
(1)  227/FFFFFFFFFFFF02F4 :                     ; Clear all video data from VRAM
(1)  228/FFFFFFFFFFFF02F4 :                     ;
(1)  229/FFFFFFFFFFFF02F4 :                     ; Breaks:
(1)  230/FFFFFFFFFFFF02F4 :                     ; ALL
(1)  231/FFFFFFFFFFFF02F4 :                     ; --------------------------------------------------------
(1)  232/FFFFFFFFFFFF02F4 :                     
(1)  233/FFFFFFFFFFFF02F4 :                     Video_Clear:
(1)  234/FFFFFFFFFFFF02F4 :                     ; 		move.w	#0,d0			; Clears until $57F
(1)  235/FFFFFFFFFFFF02F4 :                     ; 		move.w	#0,d1
(1)  236/FFFFFFFFFFFF02F4 :                     ; 		move.w	#$57F*$20,d2
(1)  237/FFFFFFFFFFFF02F4 :                     ; 		bsr	Video_Fill
(1)  238/FFFFFFFFFFFF02F4 :                     
(1)  239/FFFFFFFFFFFF02F4 :                     ; --------------------------------------------------------
(1)  240/FFFFFFFFFFFF02F4 :                     ; Video_ClearScreen
(1)  241/FFFFFFFFFFFF02F4 :                     ;
(1)  242/FFFFFFFFFFFF02F4 :                     ; Clears ALL Genesis screens FG/BG/WIN
(1)  243/FFFFFFFFFFFF02F4 :                     ;
(1)  244/FFFFFFFFFFFF02F4 :                     ; Breaks:
(1)  245/FFFFFFFFFFFF02F4 :                     ; d0-d2/d6-d7/a5-a6
(1)  246/FFFFFFFFFFFF02F4 :                     ; --------------------------------------------------------
(1)  247/FFFFFFFFFFFF02F4 :                     
(1)  248/FFFFFFFFFFFF02F4 :                     Video_ClearScreen:
(1)  249/FFFFFFFFFFFF02F4 : 7000                		moveq	#0,d0
(1)  250/FFFFFFFFFFFF02F6 : 343C 1000           		move.w	#$1000,d2		; FG/BG size
(1)  251/FFFFFFFFFFFF02FA : 1238 BDF8           		move.b	(RAM_VdpRegs+2).w,d1	; FG
(1)  252/FFFFFFFFFFFF02FE : 0241 0038           		andi.w	#%111000,d1
(1)  253/FFFFFFFFFFFF0302 : E149                		lsl.w	#8,d1
(1)  254/FFFFFFFFFFFF0304 : E549                		lsl.w	#2,d1
(1)  255/FFFFFFFFFFFF0306 : 6100 02F8           		bsr	Video_Fill
(1)  256/FFFFFFFFFFFF030A : 1238 BDFA           		move.b	(RAM_VdpRegs+4).w,d1	; BG
(1)  257/FFFFFFFFFFFF030E : 0241 0007           		andi.w	#%000111,d1
(1)  258/FFFFFFFFFFFF0312 : E149                		lsl.w	#8,d1
(1)  259/FFFFFFFFFFFF0314 : EB49                		lsl.w	#5,d1
(1)  260/FFFFFFFFFFFF0316 : 6100 02E8           		bsr	Video_Fill
(1)  261/FFFFFFFFFFFF031A : 343C 1000           		move.w	#$1000,d2		; WD Size
(1)  262/FFFFFFFFFFFF031E : 1238 BDF9           		move.b	(RAM_VdpRegs+3).w,d1	; Window
(1)  263/FFFFFFFFFFFF0322 : 0241 003E           		andi.w	#%111110,d1
(1)  264/FFFFFFFFFFFF0326 : E149                		lsl.w	#8,d1
(1)  265/FFFFFFFFFFFF0328 : E549                		lsl.w	#2,d1
(1)  266/FFFFFFFFFFFF032A : 6100 02D4           		bsr	Video_Fill
(1)  267/FFFFFFFFFFFF032E : 4DF8 A004           		lea	(RAM_HorScroll).w,a6	; RAM cleanup
(1)  268/FFFFFFFFFFFF0332 : 3E3C 00EF           		move.w	#240-1,d7
(1)  269/FFFFFFFFFFFF0336 : 7C00                		moveq	#0,d6
(1)  270/FFFFFFFFFFFF0338 :                     .xnext:
(1)  271/FFFFFFFFFFFF0338 : 2CC6                		move.l	d6,(a6)+
(1)  272/FFFFFFFFFFFF033A : 51CF FFFC           		dbf	d7,.xnext
(1)  273/FFFFFFFFFFFF033E : 4DF8 A3C4           		lea	(RAM_VerScroll).w,a6
(1)  274/FFFFFFFFFFFF0342 : 3E3C 0013           		move.w	#(320/16)-1,d7
(1)  275/FFFFFFFFFFFF0346 :                     .ynext:
(1)  276/FFFFFFFFFFFF0346 : 2CC6                		move.l	d6,(a6)+
(1)  277/FFFFFFFFFFFF0348 : 51CF FFFC           		dbf	d7,.ynext
(1)  278/FFFFFFFFFFFF034C : 4DF8 A414           		lea	(RAM_Sprites).w,a6
(1)  279/FFFFFFFFFFFF0350 : 3E3C 009F           		move.w	#((80*8)/4)-1,d7
(1)  280/FFFFFFFFFFFF0354 :                     .snext:
(1)  281/FFFFFFFFFFFF0354 : 2CC6                		move.l	d6,(a6)+
(1)  282/FFFFFFFFFFFF0356 : 51CF FFFC           		dbf	d7,.snext
(1)  283/FFFFFFFFFFFF035A : 4DF8 AE14           		lea	(RAM_Palette).w,a6
(1)  284/FFFFFFFFFFFF035E : 4BF8 B094           		lea	(RAM_PaletteFd).w,a5
(1)  285/FFFFFFFFFFFF0362 : 3E3C 001F           		move.w	#(64/2)-1,d7
(1)  286/FFFFFFFFFFFF0366 :                     .pnext:
(1)  287/FFFFFFFFFFFF0366 : 2CC6                		move.l	d6,(a6)+
(1)  288/FFFFFFFFFFFF0368 : 2AC6                		move.l	d6,(a5)+
(1)  289/FFFFFFFFFFFF036A : 51CF FFFA           		dbf	d7,.pnext
(1)  300/FFFFFFFFFFFF036E : 4E75                		rts
(1)  301/FFFFFFFFFFFF0370 :                     
(1)  302/FFFFFFFFFFFF0370 :                     ; ====================================================================
(1)  303/FFFFFFFFFFFF0370 :                     ; ----------------------------------------------------------------
(1)  304/FFFFFFFFFFFF0370 :                     ; Palette fade system, Genesis side
(1)  305/FFFFFFFFFFFF0370 :                     ; ----------------------------------------------------------------
(1)  306/FFFFFFFFFFFF0370 :                     
(1)  307/FFFFFFFFFFFF0370 :                     ; --------------------------------------------------------
(1)  308/FFFFFFFFFFFF0370 :                     ; FULL Fade in
(1)  309/FFFFFFFFFFFF0370 :                     ; --------------------------------------------------------
(1)  310/FFFFFFFFFFFF0370 :                     
(1)  311/FFFFFFFFFFFF0370 :                     Video_FadeIn:
(1)  312/FFFFFFFFFFFF0370 : 31FC 0001 BDE6      		move.w	#1,(RAM_FadeMdIncr).w	; Increment speed
(1)  313/FFFFFFFFFFFF0376 : 31FC 0002 BDEE      		move.w	#2,(RAM_FadeMarsIncr).w
(1)  314/FFFFFFFFFFFF037C : 31FC 0001 BDE8      		move.w	#1,(RAM_FadeMdDelay).w	; Delay by
(1)  315/FFFFFFFFFFFF0382 : 31FC 0000 BDF0      		move.w	#0,(RAM_FadeMarsDelay).w
(1)  316/FFFFFFFFFFFF0388 : 31FC 0001 BDE4      		move.w	#1,(RAM_FadeMdReq).w	; Fade-in task
(1)  317/FFFFFFFFFFFF038E : 31FC 0001 BDEC      		move.w	#1,(RAM_FadeMarsReq).w
(1)  318/FFFFFFFFFFFF0394 : 6026                		bra	Video_WaitFade
(1)  319/FFFFFFFFFFFF0396 :                     
(1)  320/FFFFFFFFFFFF0396 :                     ; --------------------------------------------------------
(1)  321/FFFFFFFFFFFF0396 :                     ; FULL Fade out
(1)  322/FFFFFFFFFFFF0396 :                     ; --------------------------------------------------------
(1)  323/FFFFFFFFFFFF0396 :                     
(1)  324/FFFFFFFFFFFF0396 :                     Video_FadeOut:
(1)  325/FFFFFFFFFFFF0396 : 31FC 0001 BDE6      		move.w	#1,(RAM_FadeMdIncr).w	; Increment speed
(1)  326/FFFFFFFFFFFF039C : 31FC 0002 BDEE      		move.w	#2,(RAM_FadeMarsIncr).w
(1)  327/FFFFFFFFFFFF03A2 : 31FC 0001 BDE8      		move.w	#1,(RAM_FadeMdDelay).w	; Delay by
(1)  328/FFFFFFFFFFFF03A8 : 31FC 0000 BDF0      		move.w	#0,(RAM_FadeMarsDelay).w
(1)  329/FFFFFFFFFFFF03AE : 31FC 0002 BDE4      		move.w	#2,(RAM_FadeMdReq).w	; Fade-in task
(1)  330/FFFFFFFFFFFF03B4 : 31FC 0002 BDEC      		move.w	#2,(RAM_FadeMarsReq).w
(1)  331/FFFFFFFFFFFF03BA : 4E71                		bra	Video_WaitFade
(1)  332/FFFFFFFFFFFF03BC :                     
(1)  333/FFFFFFFFFFFF03BC :                     ; --------------------------------------------------------
(1)  334/FFFFFFFFFFFF03BC :                     ; Video_WaitFade
(1)  335/FFFFFFFFFFFF03BC :                     ; --------------------------------------------------------
(1)  336/FFFFFFFFFFFF03BC :                     
(1)  337/FFFFFFFFFFFF03BC :                     Video_WaitFade:
(1)  338/FFFFFFFFFFFF03BC : 6100 0B54           		bsr	System_Render
(1)  346/FFFFFFFFFFFF03C0 : 6140                		bsr	Video_DoPalFade
(1)  347/FFFFFFFFFFFF03C2 : 3E38 BDE4           		move.w	(RAM_FadeMdReq).w,d7
(1)  349/FFFFFFFFFFFF03C6 : 4A47                		tst.w	d7
(1)  350/FFFFFFFFFFFF03C8 : 66F2                		bne.s	Video_WaitFade
(1)  351/FFFFFFFFFFFF03CA : 4E75                		rts
(1)  352/FFFFFFFFFFFF03CC :                     
(1)  353/FFFFFFFFFFFF03CC :                     ; --------------------------------------------------------
(1)  354/FFFFFFFFFFFF03CC :                     ; Video_RunFade
(1)  355/FFFFFFFFFFFF03CC :                     ;
(1)  356/FFFFFFFFFFFF03CC :                     ; Processes palette fading for one frame returns
(1)  357/FFFFFFFFFFFF03CC :                     ; status on exit.
(1)  358/FFFFFFFFFFFF03CC :                     ;
(1)  359/FFFFFFFFFFFF03CC :                     ; Returns:
(1)  360/FFFFFFFFFFFF03CC :                     ; bne - Still active, jump back.
(1)  361/FFFFFFFFFFFF03CC :                     ; beq - Finished
(1)  362/FFFFFFFFFFFF03CC :                     ;
(1)  363/FFFFFFFFFFFF03CC :                     ; Breaks:
(1)  364/FFFFFFFFFFFF03CC :                     ; All
(1)  365/FFFFFFFFFFFF03CC :                     ;
(1)  366/FFFFFFFFFFFF03CC :                     ; Notes:
(1)  367/FFFFFFFFFFFF03CC :                     ; Call System_Render FIRST before calling this
(1)  368/FFFFFFFFFFFF03CC :                     ; --------------------------------------------------------
(1)  369/FFFFFFFFFFFF03CC :                     
(1)  370/FFFFFFFFFFFF03CC :                     Video_RunFade:
(1)  378/FFFFFFFFFFFF03CC : 6134                		bsr	Video_DoPalFade
(1)  379/FFFFFFFFFFFF03CE : 3E38 BDE4           		move.w	(RAM_FadeMdReq).w,d7
(1)  381/FFFFFFFFFFFF03D2 : 4E75                		rts
(1)  382/FFFFFFFFFFFF03D4 :                     
(1)  383/FFFFFFFFFFFF03D4 :                     ; --------------------------------------------------------
(1)  384/FFFFFFFFFFFF03D4 :                     ; Video_LoadPal
(1)  385/FFFFFFFFFFFF03D4 :                     ;
(1)  386/FFFFFFFFFFFF03D4 :                     ; Input:
(1)  387/FFFFFFFFFFFF03D4 :                     ; a0 - Palette data
(1)  388/FFFFFFFFFFFF03D4 :                     ; d0 - Start position
(1)  389/FFFFFFFFFFFF03D4 :                     ; d1 - Number of colors
(1)  390/FFFFFFFFFFFF03D4 :                     ;
(1)  391/FFFFFFFFFFFF03D4 :                     ; Breaks:
(1)  392/FFFFFFFFFFFF03D4 :                     ; d5-d7,a6
(1)  393/FFFFFFFFFFFF03D4 :                     ; --------------------------------------------------------
(1)  394/FFFFFFFFFFFF03D4 :                     
(1)  395/FFFFFFFFFFFF03D4 :                     Video_FadePal:
(1)  396/FFFFFFFFFFFF03D4 : 4DF8 B094           		lea	(RAM_PaletteFd).w,a6
(1)  397/FFFFFFFFFFFF03D8 : 4278 BDEA           		clr.w	(RAM_FadeMdTmr).w
(1)  398/FFFFFFFFFFFF03DC : 6004                		bra.s	vidMd_Pal
(1)  399/FFFFFFFFFFFF03DE :                     Video_LoadPal:
(1)  400/FFFFFFFFFFFF03DE : 4DF8 AE14           		lea	(RAM_Palette).w,a6
(1)  401/FFFFFFFFFFFF03E2 :                     vidMd_Pal:
(1)  402/FFFFFFFFFFFF03E2 : 2A48                		move.l	a0,a5
(1)  403/FFFFFFFFFFFF03E4 : 7E00                		moveq	#0,d7
(1)  404/FFFFFFFFFFFF03E6 : 3E00                		move.w	d0,d7
(1)  405/FFFFFFFFFFFF03E8 : DE47                		add.w	d7,d7
(1)  406/FFFFFFFFFFFF03EA : DCC7                		adda	d7,a6
(1)  407/FFFFFFFFFFFF03EC : 3E01                		move.w	d1,d7
(1)  408/FFFFFFFFFFFF03EE : 0447 0001           		subi.w	#1,d7
(1)  409/FFFFFFFFFFFF03F2 : 3C02                		move.w	d2,d6
(1)  410/FFFFFFFFFFFF03F4 : 0246 0001           		andi.w	#1,d6
(1)  411/FFFFFFFFFFFF03F8 : E25E                		ror.w	#1,d6
(1)  412/FFFFFFFFFFFF03FA :                     .loop:
(1)  413/FFFFFFFFFFFF03FA : 3CDD                		move.w	(a5)+,(a6)+
(1)  414/FFFFFFFFFFFF03FC : 51CF FFFC           		dbf	d7,.loop
(1)  415/FFFFFFFFFFFF0400 : 4E75                		rts
(1)  416/FFFFFFFFFFFF0402 :                     
(1)  417/FFFFFFFFFFFF0402 :                     ; --------------------------------------------------------
(1)  418/FFFFFFFFFFFF0402 :                     ; Video_DoPalFade
(1)  419/FFFFFFFFFFFF0402 :                     ;
(1)  420/FFFFFFFFFFFF0402 :                     ; RAM_ReqFadeMars: (WORD)
(1)  421/FFFFFFFFFFFF0402 :                     ; $00 - No task or finished.
(1)  422/FFFFFFFFFFFF0402 :                     ; $01 - Fade in
(1)  423/FFFFFFFFFFFF0402 :                     ; $02 - Fade out to black
(1)  424/FFFFFFFFFFFF0402 :                     ;
(1)  425/FFFFFFFFFFFF0402 :                     ; NOTE: ONLY CALL THIS OUTSIDE OF VBLANK
(1)  426/FFFFFFFFFFFF0402 :                     ; --------------------------------------------------------
(1)  427/FFFFFFFFFFFF0402 :                     
(1)  428/FFFFFFFFFFFF0402 :                     Video_DoPalFade:
(1)  429/FFFFFFFFFFFF0402 : 0478 0001 BDEA      		subi.w	#1,(RAM_FadeMdTmr).w
(1)  430/FFFFFFFFFFFF0408 : 6A14                		bpl.s	.active
(1)  431/FFFFFFFFFFFF040A : 31F8 BDE8 BDEA      		move.w	(RAM_FadeMdDelay).w,(RAM_FadeMdTmr).w
(1)  432/FFFFFFFFFFFF0410 : 3E38 BDE4           		move.w	(RAM_FadeMdReq).w,d7
(1)  433/FFFFFFFFFFFF0414 : DE47                		add.w	d7,d7
(1)  434/FFFFFFFFFFFF0416 : 3E3B 7008           		move.w	.fade_list(pc,d7.w),d7
(1)  435/FFFFFFFFFFFF041A : 4EFB 7004           		jmp	.fade_list(pc,d7.w)
(1)  436/FFFFFFFFFFFF041E :                     .active:
(1)  437/FFFFFFFFFFFF041E : 4E75                		rts
(1)  438/FFFFFFFFFFFF0420 :                     
(1)  439/FFFFFFFFFFFF0420 :                     ; --------------------------------------------
(1)  440/FFFFFFFFFFFF0420 :                     
(1)  441/FFFFFFFFFFFF0420 :                     .fade_list:
(1)  442/FFFFFFFFFFFF0420 : 0006                		dc.w .fade_done-.fade_list
(1)  443/FFFFFFFFFFFF0422 : 0008                		dc.w .fade_in-.fade_list
(1)  444/FFFFFFFFFFFF0424 : 00AA                		dc.w .fade_out-.fade_list
(1)  445/FFFFFFFFFFFF0426 :                     
(1)  446/FFFFFFFFFFFF0426 :                     ; --------------------------------------------
(1)  447/FFFFFFFFFFFF0426 :                     ; No fade or finished.
(1)  448/FFFFFFFFFFFF0426 :                     ; --------------------------------------------
(1)  449/FFFFFFFFFFFF0426 :                     
(1)  450/FFFFFFFFFFFF0426 :                     .fade_done:
(1)  451/FFFFFFFFFFFF0426 : 4E75                		rts
(1)  452/FFFFFFFFFFFF0428 :                     
(1)  453/FFFFFFFFFFFF0428 :                     ; --------------------------------------------
(1)  454/FFFFFFFFFFFF0428 :                     ; Fade in
(1)  455/FFFFFFFFFFFF0428 :                     ; --------------------------------------------
(1)  456/FFFFFFFFFFFF0428 :                     
(1)  457/FFFFFFFFFFFF0428 :                     .fade_in:
(1)  458/FFFFFFFFFFFF0428 : 4DF8 B094           		lea	(RAM_PaletteFd).w,a6
(1)  459/FFFFFFFFFFFF042C : 4BF8 AE14           		lea	(RAM_Palette).w,a5
(1)  460/FFFFFFFFFFFF0430 : 7040                		moveq	#64,d0				; Num of colors
(1)  461/FFFFFFFFFFFF0432 : 3238 BDE6           		move.w	(RAM_FadeMdIncr).w,d1		; Speed
(1)  462/FFFFFFFFFFFF0436 : D241                		add.w	d1,d1
(1)  463/FFFFFFFFFFFF0438 : 3C00                		move.w	d0,d6
(1)  464/FFFFFFFFFFFF043A : 4846                		swap	d6
(1)  465/FFFFFFFFFFFF043C : 0440 0001           		subi.w	#1,d0
(1)  466/FFFFFFFFFFFF0440 :                     .nxt_pal:
(1)  467/FFFFFFFFFFFF0440 : 4242                		clr.w	d2		; Reset finished colorbits
(1)  468/FFFFFFFFFFFF0442 : 3E16                		move.w	(a6),d7		; d7 - Input
(1)  469/FFFFFFFFFFFF0444 : 3C15                		move.w	(a5),d6		; d6 - Output
(1)  470/FFFFFFFFFFFF0446 : 3607                		move.w	d7,d3		; RED
(1)  471/FFFFFFFFFFFF0448 : 3806                		move.w	d6,d4
(1)  472/FFFFFFFFFFFF044A : 0246 0EE0           		andi.w	#%0000111011100000,d6
(1)  473/FFFFFFFFFFFF044E : 0244 000E           		andi.w	#%0000000000001110,d4
(1)  474/FFFFFFFFFFFF0452 : 0243 000E           		andi.w	#%0000000000001110,d3
(1)  475/FFFFFFFFFFFF0456 : D841                		add.w	d1,d4
(1)  476/FFFFFFFFFFFF0458 : B843                		cmp.w	d3,d4
(1)  477/FFFFFFFFFFFF045A : 6506                		bcs.s	.no_red
(1)  478/FFFFFFFFFFFF045C : 3803                		move.w	d3,d4
(1)  479/FFFFFFFFFFFF045E : 0042 0001           		ori.w	#%001,d2	; RED is ready
(1)  480/FFFFFFFFFFFF0462 :                     .no_red:
(1)  481/FFFFFFFFFFFF0462 : 8C44                		or.w	d4,d6
(1)  482/FFFFFFFFFFFF0464 : E949                		lsl.w	#4,d1
(1)  483/FFFFFFFFFFFF0466 : 3607                		move.w	d7,d3		; GREEN
(1)  484/FFFFFFFFFFFF0468 : 3806                		move.w	d6,d4
(1)  485/FFFFFFFFFFFF046A : 0246 0E0E           		andi.w	#%0000111000001110,d6
(1)  486/FFFFFFFFFFFF046E : 0244 00E0           		andi.w	#%0000000011100000,d4
(1)  487/FFFFFFFFFFFF0472 : 0243 00E0           		andi.w	#%0000000011100000,d3
(1)  488/FFFFFFFFFFFF0476 : D841                		add.w	d1,d4
(1)  489/FFFFFFFFFFFF0478 : B843                		cmp.w	d3,d4
(1)  490/FFFFFFFFFFFF047A : 6506                		bcs.s	.no_grn
(1)  491/FFFFFFFFFFFF047C : 3803                		move.w	d3,d4
(1)  492/FFFFFFFFFFFF047E : 0042 0002           		ori.w	#%010,d2	; GREEN is ready
(1)  493/FFFFFFFFFFFF0482 :                     .no_grn:
(1)  494/FFFFFFFFFFFF0482 : 8C44                		or.w	d4,d6
(1)  495/FFFFFFFFFFFF0484 : E949                		lsl.w	#4,d1
(1)  496/FFFFFFFFFFFF0486 : 3607                		move.w	d7,d3		; BLUE
(1)  497/FFFFFFFFFFFF0488 : 3806                		move.w	d6,d4
(1)  498/FFFFFFFFFFFF048A : 0246 00EE           		andi.w	#%0000000011101110,d6
(1)  499/FFFFFFFFFFFF048E : 0244 0E00           		andi.w	#%0000111000000000,d4
(1)  500/FFFFFFFFFFFF0492 : 0243 0E00           		andi.w	#%0000111000000000,d3
(1)  501/FFFFFFFFFFFF0496 : D841                		add.w	d1,d4
(1)  502/FFFFFFFFFFFF0498 : B843                		cmp.w	d3,d4
(1)  503/FFFFFFFFFFFF049A : 6506                		bcs.s	.no_blu
(1)  504/FFFFFFFFFFFF049C : 3803                		move.w	d3,d4
(1)  505/FFFFFFFFFFFF049E : 0042 0004           		ori.w	#%100,d2	; BLUE is ready
(1)  506/FFFFFFFFFFFF04A2 :                     .no_blu:
(1)  507/FFFFFFFFFFFF04A2 : 8C44                		or.w	d4,d6
(1)  508/FFFFFFFFFFFF04A4 : E049                		lsr.w	#8,d1
(1)  509/FFFFFFFFFFFF04A6 : 3AC6                		move.w	d6,(a5)+
(1)  510/FFFFFFFFFFFF04A8 : DCFC 0002           		adda	#2,a6
(1)  511/FFFFFFFFFFFF04AC : 0C42 0007           		cmpi.w	#%111,d2
(1)  512/FFFFFFFFFFFF04B0 : 6608                		bne.s	.no_fnsh
(1)  513/FFFFFFFFFFFF04B2 : 4846                		swap	d6
(1)  514/FFFFFFFFFFFF04B4 : 0446 0001           		subi.w	#1,d6
(1)  515/FFFFFFFFFFFF04B8 : 4846                		swap	d6
(1)  516/FFFFFFFFFFFF04BA :                     .no_fnsh:
(1)  517/FFFFFFFFFFFF04BA : 51C8 FF84           		dbf	d0,.nxt_pal
(1)  518/FFFFFFFFFFFF04BE : 4846                		swap	d6
(1)  519/FFFFFFFFFFFF04C0 : 4A46                		tst.w	d6
(1)  520/FFFFFFFFFFFF04C2 : 6604                		bne.s	.no_move
(1)  521/FFFFFFFFFFFF04C4 : 4278 BDE4           		clr.w	(RAM_FadeMdReq).w
(1)  522/FFFFFFFFFFFF04C8 :                     .no_move:
(1)  523/FFFFFFFFFFFF04C8 : 4E75                		rts
(1)  524/FFFFFFFFFFFF04CA :                     
(1)  525/FFFFFFFFFFFF04CA :                     ; --------------------------------------------
(1)  526/FFFFFFFFFFFF04CA :                     ; Fade out
(1)  527/FFFFFFFFFFFF04CA :                     ; --------------------------------------------
(1)  528/FFFFFFFFFFFF04CA :                     
(1)  529/FFFFFFFFFFFF04CA :                     .fade_out:
(1)  530/FFFFFFFFFFFF04CA : 4DF8 AE14           		lea	(RAM_Palette).w,a6
(1)  531/FFFFFFFFFFFF04CE : 7040                		moveq	#64,d0				; Num of colors
(1)  532/FFFFFFFFFFFF04D0 : 3238 BDE6           		move.w	(RAM_FadeMdIncr).w,d1		; Speed
(1)  533/FFFFFFFFFFFF04D4 : 3C00                		move.w	d0,d6
(1)  534/FFFFFFFFFFFF04D6 : 4846                		swap	d6
(1)  535/FFFFFFFFFFFF04D8 : 0440 0001           		subi.w	#1,d0
(1)  536/FFFFFFFFFFFF04DC :                     .nxt_pal_o:
(1)  537/FFFFFFFFFFFF04DC : 4242                		clr.w	d2			; Reset finished colorbits
(1)  538/FFFFFFFFFFFF04DE : 3E16                		move.w	(a6),d7			; d7 - Input
(1)  539/FFFFFFFFFFFF04E0 : 3C07                		move.w	d7,d6
(1)  540/FFFFFFFFFFFF04E2 : 0247 0EE0           		andi.w	#%0000111011100000,d7
(1)  541/FFFFFFFFFFFF04E6 : 0246 000E           		andi.w	#%0000000000001110,d6
(1)  542/FFFFFFFFFFFF04EA : 9C41                		sub.w	d1,d6
(1)  543/FFFFFFFFFFFF04EC : 6A06                		bpl.s	.no_red_o
(1)  544/FFFFFFFFFFFF04EE : 4246                		clr.w	d6
(1)  545/FFFFFFFFFFFF04F0 : 0042 0001           		ori.w	#%001,d2		; RED is ready
(1)  546/FFFFFFFFFFFF04F4 :                     .no_red_o:
(1)  547/FFFFFFFFFFFF04F4 : 8E46                		or.w	d6,d7
(1)  548/FFFFFFFFFFFF04F6 : E949                		lsl.w	#4,d1
(1)  549/FFFFFFFFFFFF04F8 : 3C07                		move.w	d7,d6
(1)  550/FFFFFFFFFFFF04FA : 0247 0E0E           		andi.w	#%0000111000001110,d7
(1)  551/FFFFFFFFFFFF04FE : 0246 00E0           		andi.w	#%0000000011100000,d6
(1)  552/FFFFFFFFFFFF0502 : 9C41                		sub.w	d1,d6
(1)  553/FFFFFFFFFFFF0504 : 6A06                		bpl.s	.no_grn_o
(1)  554/FFFFFFFFFFFF0506 : 4246                		clr.w	d6
(1)  555/FFFFFFFFFFFF0508 : 0042 0002           		ori.w	#%010,d2		; GREEN is ready
(1)  556/FFFFFFFFFFFF050C :                     .no_grn_o:
(1)  557/FFFFFFFFFFFF050C : 8E46                		or.w	d6,d7
(1)  558/FFFFFFFFFFFF050E : E949                		lsl.w	#4,d1
(1)  559/FFFFFFFFFFFF0510 : 3C07                		move.w	d7,d6
(1)  560/FFFFFFFFFFFF0512 : 0247 00EE           		andi.w	#%0000000011101110,d7
(1)  561/FFFFFFFFFFFF0516 : 0246 0E00           		andi.w	#%0000111000000000,d6
(1)  562/FFFFFFFFFFFF051A : 9C41                		sub.w	d1,d6
(1)  563/FFFFFFFFFFFF051C : 6A06                		bpl.s	.no_blu_o
(1)  564/FFFFFFFFFFFF051E : 4246                		clr.w	d6
(1)  565/FFFFFFFFFFFF0520 : 0042 0004           		ori.w	#%100,d2		; BLUE is ready
(1)  566/FFFFFFFFFFFF0524 :                     .no_blu_o:
(1)  567/FFFFFFFFFFFF0524 : 8E46                		or.w	d6,d7
(1)  568/FFFFFFFFFFFF0526 : E049                		lsr.w	#8,d1
(1)  569/FFFFFFFFFFFF0528 : 3CC7                		move.w	d7,(a6)+
(1)  570/FFFFFFFFFFFF052A : 0C42 0007           		cmpi.w	#%111,d2
(1)  571/FFFFFFFFFFFF052E : 6608                		bne.s	.no_fnsh_o
(1)  572/FFFFFFFFFFFF0530 : 4846                		swap	d6
(1)  573/FFFFFFFFFFFF0532 : 0446 0001           		subi.w	#1,d6
(1)  574/FFFFFFFFFFFF0536 : 4846                		swap	d6
(1)  575/FFFFFFFFFFFF0538 :                     .no_fnsh_o:
(1)  576/FFFFFFFFFFFF0538 : 51C8 FFA2           		dbf	d0,.nxt_pal_o
(1)  577/FFFFFFFFFFFF053C : 4846                		swap	d6
(1)  578/FFFFFFFFFFFF053E : 4A46                		tst.w	d6
(1)  579/FFFFFFFFFFFF0540 : 6604                		bne.s	.no_move_o
(1)  580/FFFFFFFFFFFF0542 : 4278 BDE4           		clr.w	(RAM_FadeMdReq).w
(1)  581/FFFFFFFFFFFF0546 :                     .no_move_o:
(1)  582/FFFFFFFFFFFF0546 : 4E75                		rts
(1)  583/FFFFFFFFFFFF0548 :                     
(1)  584/FFFFFFFFFFFF0548 :                     ; ====================================================================
(1)  585/FFFFFFFFFFFF0548 :                     ; --------------------------------------------------------
(1)  586/FFFFFFFFFFFF0548 :                     ; Genesis DMA
(1)  587/FFFFFFFFFFFF0548 :                     ; --------------------------------------------------------
(1)  588/FFFFFFFFFFFF0548 :                     
(1)  589/FFFFFFFFFFFF0548 :                     ; --------------------------------------------------------
(1)  590/FFFFFFFFFFFF0548 :                     ; Video_DmaMkEntry
(1)  591/FFFFFFFFFFFF0548 :                     ;
(1)  592/FFFFFFFFFFFF0548 :                     ; Sets a new DMA transfer entry to the BLAST list
(1)  593/FFFFFFFFFFFF0548 :                     ;
(1)  594/FFFFFFFFFFFF0548 :                     ; *** CALL THIS OUTSIDE OF VBLANK ONLY ***
(1)  595/FFFFFFFFFFFF0548 :                     ;
(1)  596/FFFFFFFFFFFF0548 :                     ; d0.l - Art data Real-ROM location
(1)  597/FFFFFFFFFFFF0548 :                     ; d1.w - VRAM location cell_vram()
(1)  598/FFFFFFFFFFFF0548 :                     ; d2.w - Size
(1)  599/FFFFFFFFFFFF0548 :                     ;
(1)  600/FFFFFFFFFFFF0548 :                     ; Breaks:
(1)  601/FFFFFFFFFFFF0548 :                     ; d5-d7,a6
(1)  602/FFFFFFFFFFFF0548 :                     ; --------------------------------------------------------
(1)  603/FFFFFFFFFFFF0548 :                     
(1)  604/FFFFFFFFFFFF0548 :                     Video_DmaMkEntry:
(1)  605/FFFFFFFFFFFF0548 : 2A00                		move.l	d0,d5
(1)  606/FFFFFFFFFFFF054A : DA42                		add.w	d2,d5
(1)  607/FFFFFFFFFFFF054C : 6430                		bcc.s	.normal
(1)  608/FFFFFFFFFFFF054E : 2A00                		move.l	d0,d5		; <-- DOUBLE TRANSFER
(1)  609/FFFFFFFFFFFF0550 : 3C01                		move.w	d1,d6
(1)  610/FFFFFFFFFFFF0552 : 2E05                		move.l	d5,d7		; Top
(1)  611/FFFFFFFFFFFF0554 : 0687 0001 0000      		addi.l	#$010000,d7
(1)  612/FFFFFFFFFFFF055A : 0287 00FF 0000      		andi.l	#$FF0000,d7
(1)  613/FFFFFFFFFFFF0560 : 9E80                		sub.l	d0,d7
(1)  614/FFFFFFFFFFFF0562 : 6120                		bsr.s	.mk_set
(1)  615/FFFFFFFFFFFF0564 : 2A00                		move.l	d0,d5		; Bottom
(1)  616/FFFFFFFFFFFF0566 : 0685 0001 0000      		addi.l	#$010000,d5
(1)  617/FFFFFFFFFFFF056C : 0285 00FF 0000      		andi.l	#$FF0000,d5
(1)  618/FFFFFFFFFFFF0572 : 2C05                		move.l	d5,d6
(1)  619/FFFFFFFFFFFF0574 : 9C80                		sub.l	d0,d6
(1)  620/FFFFFFFFFFFF0576 : 3E02                		move.w	d2,d7
(1)  621/FFFFFFFFFFFF0578 : 9E46                		sub.w	d6,d7
(1)  622/FFFFFFFFFFFF057A : DC41                		add.w	d1,d6
(1)  623/FFFFFFFFFFFF057C : 6006                		bra.s	.mk_set
(1)  624/FFFFFFFFFFFF057E :                     .normal:
(1)  625/FFFFFFFFFFFF057E : 2A00                		move.l	d0,d5
(1)  626/FFFFFFFFFFFF0580 : 3C01                		move.w	d1,d6
(1)  627/FFFFFFFFFFFF0582 : 3E02                		move.w	d2,d7
(1)  628/FFFFFFFFFFFF0584 :                     ; d7 - size
(1)  629/FFFFFFFFFFFF0584 :                     ; d6 - vram
(1)  630/FFFFFFFFFFFF0584 :                     ; d5 - data
(1)  631/FFFFFFFFFFFF0584 :                     .mk_set:
(1)  632/FFFFFFFFFFFF0584 : 4847                		swap	d7
(1)  633/FFFFFFFFFFFF0586 : 3E38 BDDE           		move.w	(RAM_VdpDmaIndx).w,d7
(1)  634/FFFFFFFFFFFF058A : 0C47 0018           		cmpi.w	#MAX_MDDMATSK,d7
(1)  635/FFFFFFFFFFFF058E : 6C6E                		bge.s	.ran_out
(1)  636/FFFFFFFFFFFF0590 : E94F                		lsl.w	#4,d7			; Size $10
(1)  637/FFFFFFFFFFFF0592 : 4DF8 B114           		lea	(RAM_VdpDmaList).w,a6
(1)  638/FFFFFFFFFFFF0596 : DCC7                		adda	d7,a6
(1)  639/FFFFFFFFFFFF0598 : 4847                		swap	d7
(1)  640/FFFFFFFFFFFF059A : 31FC 0001 BDE0      		move.w	#1,(RAM_VdpDmaMod).w
(1)  641/FFFFFFFFFFFF05A0 : 5278 BDDE           		addq.w	#1,(RAM_VdpDmaIndx).w
(1)  642/FFFFFFFFFFFF05A4 :                     
(1)  643/FFFFFFFFFFFF05A4 : 0287 0000 FFFE      		andi.l	#$0000FFFE,d7
(1)  644/FFFFFFFFFFFF05AA : EF8F                		lsl.l	#7,d7
(1)  645/FFFFFFFFFFFF05AC : E04F                		lsr.w	#8,d7
(1)  646/FFFFFFFFFFFF05AE : 0087 9400 9300      		ori.l	#$94009300,d7
(1)  647/FFFFFFFFFFFF05B4 : 2CC7                		move.l	d7,(a6)+
(1)  648/FFFFFFFFFFFF05B6 : E28D                  		lsr.l	#1,d5			; d5 - Source
(1)  649/FFFFFFFFFFFF05B8 : 2E3C 9600 9500       		move.l	#$96009500,d7
(1)  650/FFFFFFFFFFFF05BE : 1E05                 		move.b	d5,d7
(1)  651/FFFFFFFFFFFF05C0 : E08D                 		lsr.l	#8,d5
(1)  652/FFFFFFFFFFFF05C2 : 4847                 		swap	d7
(1)  653/FFFFFFFFFFFF05C4 : 1E05                 		move.b	d5,d7
(1)  654/FFFFFFFFFFFF05C6 : 2CC7                 		move.l	d7,(a6)+
(1)  655/FFFFFFFFFFFF05C8 : 3E3C 9700            		move.w	#$9700,d7
(1)  656/FFFFFFFFFFFF05CC : E08D                 		lsr.l	#8,d5
(1)  657/FFFFFFFFFFFF05CE : 1E05                 		move.b	d5,d7
(1)  658/FFFFFFFFFFFF05D0 : 3CC7                 		move.w	d7,(a6)+
(1)  659/FFFFFFFFFFFF05D2 : 3E06                		move.w	d6,d7			; Destination
(1)  660/FFFFFFFFFFFF05D4 : 0286 0000 3FFF      		andi.l	#$3FFF,d6
(1)  661/FFFFFFFFFFFF05DA : 0046 4000           		ori.w	#$4000,d6
(1)  662/FFFFFFFFFFFF05DE : E04F                		lsr.w	#8,d7
(1)  663/FFFFFFFFFFFF05E0 : EC4F                		lsr.w	#6,d7
(1)  664/FFFFFFFFFFFF05E2 : 0247 0003           		andi.w	#%11,d7
(1)  665/FFFFFFFFFFFF05E6 : 0047 0080           		ori.w	#$80,d7
(1)  666/FFFFFFFFFFFF05EA : 3CC6                		move.w	d6,(a6)+
(1)  667/FFFFFFFFFFFF05EC : 3CC7                		move.w	d7,(a6)+
(1)  669/FFFFFFFFFFFF05EE : 2E0E                		move.l	a6,d7		; Save a6
(1)  670/FFFFFFFFFFFF05F0 : 2C40                		movea.l	d0,a6
(1)  671/FFFFFFFFFFFF05F2 : 3C16                		move.w	(a6),d6		; Grab the graphs first word
(1)  672/FFFFFFFFFFFF05F4 : 2C47                		move.l	d7,a6		; Restore a6
(1)  673/FFFFFFFFFFFF05F6 : 3CC6                		move.w	d6,(a6)+	; Copy to last entry
(1)  675/FFFFFFFFFFFF05F8 : 31FC 0000 BDE0      		move.w	#0,(RAM_VdpDmaMod).w
(1)  676/FFFFFFFFFFFF05FE :                     .ran_out:
(1)  677/FFFFFFFFFFFF05FE : 4E75                		rts
(1)  678/FFFFFFFFFFFF0600 :                     
(1)  679/FFFFFFFFFFFF0600 :                     ; --------------------------------------------------------
(1)  680/FFFFFFFFFFFF0600 :                     ; Video_Fill
(1)  681/FFFFFFFFFFFF0600 :                     ;
(1)  682/FFFFFFFFFFFF0600 :                     ; Fill data to VRAM
(1)  683/FFFFFFFFFFFF0600 :                     ;
(1)  684/FFFFFFFFFFFF0600 :                     ; d0.w - WORD to fill
(1)  685/FFFFFFFFFFFF0600 :                     ; d1.w - VRAM location cell_vram()
(1)  686/FFFFFFFFFFFF0600 :                     ; d2.w - Size
(1)  687/FFFFFFFFFFFF0600 :                     ;
(1)  688/FFFFFFFFFFFF0600 :                     ; Breaks:
(1)  689/FFFFFFFFFFFF0600 :                     ; d6-d7,a6
(1)  690/FFFFFFFFFFFF0600 :                     ;
(1)  691/FFFFFFFFFFFF0600 :                     ; Notes:
(1)  692/FFFFFFFFFFFF0600 :                     ; Size $0001 is invalid, writes in this order: $56781234
(1)  693/FFFFFFFFFFFF0600 :                     ; --------------------------------------------------------
(1)  694/FFFFFFFFFFFF0600 :                     
(1)  695/FFFFFFFFFFFF0600 :                     Video_Fill:
(1)  696/FFFFFFFFFFFF0600 : 4DF9 00C0 0004      		lea	(vdp_ctrl).l,a6
(1)  697/FFFFFFFFFFFF0606 : 3E3C 8100           		move.w	#$8100,d7
(1)  698/FFFFFFFFFFFF060A : 1E38 BDF7           		move.b	(RAM_VdpRegs+1).w,d7
(1)  699/FFFFFFFFFFFF060E : 08C7 0004           		bset	#bitDmaEnbl,d7
(1)  700/FFFFFFFFFFFF0612 : 3C87                		move.w	d7,(a6)
(1)  701/FFFFFFFFFFFF0614 : 3E16                .dmaw:		move.w	(a6),d7
(1)  702/FFFFFFFFFFFF0616 : 0807 0001           		btst	#bitDma,d7
(1)  703/FFFFFFFFFFFF061A : 66F8                		bne.s	.dmaw
(1)  704/FFFFFFFFFFFF061C : 3CBC 8F01           		move.w	#$8F01,(a6)	; Increment $01
(1)  705/FFFFFFFFFFFF0620 : 3E02                		move.w	d2,d7		; d2 - Size
(1)  706/FFFFFFFFFFFF0622 : 0447 0001           		subi.w	#1,d7
(1)  707/FFFFFFFFFFFF0626 : 2C3C 9400 9300      		move.l	#$94009300,d6
(1)  708/FFFFFFFFFFFF062C : 1C07                		move.b	d7,d6
(1)  709/FFFFFFFFFFFF062E : 4846                		swap	d6
(1)  710/FFFFFFFFFFFF0630 : E04F                		lsr.w	#8,d7
(1)  711/FFFFFFFFFFFF0632 : 1C07                		move.b	d7,d6
(1)  712/FFFFFFFFFFFF0634 : 4846                		swap	d6
(1)  713/FFFFFFFFFFFF0636 : 2C86                		move.l	d6,(a6)
(1)  714/FFFFFFFFFFFF0638 : 3CBC 9780           		move.w	#$9780,(a6)	; DMA Fill mode
(1)  715/FFFFFFFFFFFF063C : 3E01                		move.w	d1,d7		; d1 - Destination
(1)  716/FFFFFFFFFFFF063E : 3C07                		move.w	d7,d6
(1)  717/FFFFFFFFFFFF0640 : 0246 3FFF           		andi.w	#$3FFF,d6
(1)  718/FFFFFFFFFFFF0644 : 0046 4000           		ori.w	#$4000,d6
(1)  719/FFFFFFFFFFFF0648 : 4846                		swap	d6
(1)  720/FFFFFFFFFFFF064A : 3C07                		move.w	d7,d6
(1)  721/FFFFFFFFFFFF064C : E04E                		lsr.w	#8,d6
(1)  722/FFFFFFFFFFFF064E : EC4E                		lsr.w	#6,d6
(1)  723/FFFFFFFFFFFF0650 : 0246 0003           		andi.w	#%11,d6
(1)  724/FFFFFFFFFFFF0654 : 0046 0080           		ori.w	#$80,d6
(1)  725/FFFFFFFFFFFF0658 : 2C86                		move.l	d6,(a6)
(1)  726/FFFFFFFFFFFF065A : 3D40 FFFC           		move.w	d0,-4(a6)
(1)  727/FFFFFFFFFFFF065E : 3E16                .dma_w:		move.w	(a6),d7
(1)  728/FFFFFFFFFFFF0660 : 0807 0001           		btst	#bitDma,d7
(1)  729/FFFFFFFFFFFF0664 : 66F8                		bne.s	.dma_w
(1)  730/FFFFFFFFFFFF0666 : 3CBC 8F02           		move.w	#$8F02,(a6)	; Increment $02
(1)  731/FFFFFFFFFFFF066A : 3E3C 8100           		move.w	#$8100,d7
(1)  732/FFFFFFFFFFFF066E : 1E38 BDF7           		move.b	(RAM_VdpRegs+1).w,d7
(1)  733/FFFFFFFFFFFF0672 : 3C87                		move.w	d7,(a6)
(1)  734/FFFFFFFFFFFF0674 : 4E75                		rts
(1)  735/FFFFFFFFFFFF0676 :                     
(1)  736/FFFFFFFFFFFF0676 :                     ; --------------------------------------------------------
(1)  737/FFFFFFFFFFFF0676 :                     ; Video_Copy
(1)  738/FFFFFFFFFFFF0676 :                     ;
(1)  739/FFFFFFFFFFFF0676 :                     ; Copy VRAM data to another location
(1)  740/FFFFFFFFFFFF0676 :                     ;
(1)  741/FFFFFFFFFFFF0676 :                     ; d0.w - VRAM Source cell_vram()
(1)  742/FFFFFFFFFFFF0676 :                     ; d1.w - VRAM Destination cell_vram()
(1)  743/FFFFFFFFFFFF0676 :                     ; d2.w - Size
(1)  744/FFFFFFFFFFFF0676 :                     ;
(1)  745/FFFFFFFFFFFF0676 :                     ; Breaks:
(1)  746/FFFFFFFFFFFF0676 :                     ; d6-d7,a6
(1)  747/FFFFFFFFFFFF0676 :                     ; --------------------------------------------------------
(1)  748/FFFFFFFFFFFF0676 :                     
(1)  749/FFFFFFFFFFFF0676 :                     ; TODO: test if this works again...
(1)  750/FFFFFFFFFFFF0676 :                     
(1)  751/FFFFFFFFFFFF0676 :                     Video_Copy:
(1)  752/FFFFFFFFFFFF0676 : 4DF9 00C0 0004      		lea	(vdp_ctrl),a6
(1)  753/FFFFFFFFFFFF067C : 3E3C 8100           		move.w	#$8100,d7
(1)  754/FFFFFFFFFFFF0680 : 1E38 BDF7           		move.b	(RAM_VdpRegs+1).w,d7
(1)  755/FFFFFFFFFFFF0684 : 08C7 0004           		bset	#bitDmaEnbl,d7
(1)  756/FFFFFFFFFFFF0688 : 3C87                		move.w	d7,(a6)
(1)  757/FFFFFFFFFFFF068A : 3E16                .dmaw:		move.w	(a6),d7
(1)  758/FFFFFFFFFFFF068C : 0807 0001           		btst	#bitDma,d7
(1)  759/FFFFFFFFFFFF0690 : 66F8                		bne.s	.dmaw
(1)  760/FFFFFFFFFFFF0692 : 3CBC 8F01           		move.w	#$8F01,(a6)		; Increment $01
(1)  761/FFFFFFFFFFFF0696 : 3E02                		move.w	d2,d7			; SIZE
(1)  762/FFFFFFFFFFFF0698 : 2C3C 9400 9300      		move.l	#$94009300,d6
(1)  763/FFFFFFFFFFFF069E :                     ; 		lsr.w	#1,d7
(1)  764/FFFFFFFFFFFF069E : 1C07                		move.b	d7,d6
(1)  765/FFFFFFFFFFFF06A0 : 4846                		swap	d6
(1)  766/FFFFFFFFFFFF06A2 : E04F                		lsr.w	#8,d7
(1)  767/FFFFFFFFFFFF06A4 : 1C07                		move.b	d7,d6
(1)  768/FFFFFFFFFFFF06A6 : 4846                		swap	d6
(1)  769/FFFFFFFFFFFF06A8 : 2C86                		move.l	d6,(a6)
(1)  770/FFFFFFFFFFFF06AA : 2C3C 9600 9500      		move.l	#$96009500,d6		; SOURCE
(1)  771/FFFFFFFFFFFF06B0 : 3E00                		move.w	d0,d7
(1)  772/FFFFFFFFFFFF06B2 : 1C07                		move.b	d7,d6
(1)  773/FFFFFFFFFFFF06B4 : 4846                		swap	d6
(1)  774/FFFFFFFFFFFF06B6 : E04F                		lsr.w	#8,d7
(1)  775/FFFFFFFFFFFF06B8 : 1C07                		move.b	d7,d6
(1)  776/FFFFFFFFFFFF06BA : 2C86                		move.l	d6,(a6)
(1)  777/FFFFFFFFFFFF06BC : 3CBC 97C0           		move.w	#$97C0,(a6)		; DMA Copy mode
(1)  778/FFFFFFFFFFFF06C0 : 2E02                		move.l	d2,d7			; DESTINATION
(1)  779/FFFFFFFFFFFF06C2 : 3C07                		move.w	d7,d6
(1)  780/FFFFFFFFFFFF06C4 : 0246 3FFF           		andi.w	#$3FFF,d6
(1)  781/FFFFFFFFFFFF06C8 : 0046 4000           		ori.w	#$4000,d6
(1)  782/FFFFFFFFFFFF06CC : 4846                		swap	d6
(1)  783/FFFFFFFFFFFF06CE : 3C07                		move.w	d7,d6
(1)  784/FFFFFFFFFFFF06D0 : E04E                		lsr.w	#8,d6
(1)  785/FFFFFFFFFFFF06D2 : EC4E                		lsr.w	#6,d6
(1)  786/FFFFFFFFFFFF06D4 : 0246 0003           		andi.w	#%11,d6
(1)  787/FFFFFFFFFFFF06D8 : 0046 00C0           		ori.w	#$C0,d6
(1)  788/FFFFFFFFFFFF06DC : 2C86                		move.l	d6,(a6)
(1)  789/FFFFFFFFFFFF06DE : 3D41 FFFC           		move.w	d1,-4(a6)
(1)  790/FFFFFFFFFFFF06E2 : 3E16                .dma_w:		move.w	(a6),d7
(1)  791/FFFFFFFFFFFF06E4 : 0807 0001           		btst	#bitDma,d7
(1)  792/FFFFFFFFFFFF06E8 : 66F8                		bne.s	.dma_w
(1)  793/FFFFFFFFFFFF06EA : 3CBC 8F02           		move.w	#$8F02,(a6)		; Increment $02
(1)  794/FFFFFFFFFFFF06EE : 3E3C 8100           		move.w	#$8100,d7
(1)  795/FFFFFFFFFFFF06F2 : 1E38 BDF7           		move.b	(RAM_VdpRegs+1).w,d7
(1)  796/FFFFFFFFFFFF06F6 : 3C87                		move.w	d7,(a6)
(1)  797/FFFFFFFFFFFF06F8 : 4E75                		rts
(1)  798/FFFFFFFFFFFF06FA :                     
(1)  799/FFFFFFFFFFFF06FA :                     ; --------------------------------------------------------
(1)  800/FFFFFFFFFFFF06FA :                     ; Load graphics using DMA manually
(1)  801/FFFFFFFFFFFF06FA :                     ;
(1)  802/FFFFFFFFFFFF06FA :                     ; Input:
(1)  803/FFFFFFFFFFFF06FA :                     ; d0.l - Graphics data pointer (NOT a0)
(1)  804/FFFFFFFFFFFF06FA :                     ; d1.w - cell_vram(vram_pos)
(1)  805/FFFFFFFFFFFF06FA :                     ; d2.w - Size
(1)  806/FFFFFFFFFFFF06FA :                     ;
(1)  807/FFFFFFFFFFFF06FA :                     ; Breaks:
(1)  808/FFFFFFFFFFFF06FA :                     ; d4-d7,a4
(1)  809/FFFFFFFFFFFF06FA :                     ;
(1)  810/FFFFFFFFFFFF06FA :                     ; Notes:
(1)  811/FFFFFFFFFFFF06FA :                     ; - For a faster transfer call this during VBlank
(1)  812/FFFFFFFFFFFF06FA :                     ; - 32X: MAKE SURE THE SH2 SIDE IS NOT READING ROM
(1)  813/FFFFFFFFFFFF06FA :                     ;        BEFORE CALLING THIS.
(1)  814/FFFFFFFFFFFF06FA :                     ; --------------------------------------------------------
(1)  815/FFFFFFFFFFFF06FA :                     
(1)  816/FFFFFFFFFFFF06FA :                     Video_LoadArt:
(1)  817/FFFFFFFFFFFF06FA : 2A00                		move.l	d0,d5
(1)  818/FFFFFFFFFFFF06FC : DA42                		add.w	d2,d5
(1)  819/FFFFFFFFFFFF06FE : 6430                		bcc.s	.normal
(1)  820/FFFFFFFFFFFF0700 : 2A00                		move.l	d0,d5		; <-- DOUBLE TRANSFER
(1)  821/FFFFFFFFFFFF0702 : 3C01                		move.w	d1,d6
(1)  822/FFFFFFFFFFFF0704 : 2E05                		move.l	d5,d7		; Top
(1)  823/FFFFFFFFFFFF0706 : 0687 0001 0000      		addi.l	#$010000,d7
(1)  824/FFFFFFFFFFFF070C : 0287 00FF 0000      		andi.l	#$FF0000,d7
(1)  825/FFFFFFFFFFFF0712 : 9E80                		sub.l	d0,d7
(1)  826/FFFFFFFFFFFF0714 : 6120                		bsr.s	.mk_set
(1)  827/FFFFFFFFFFFF0716 : 2A00                		move.l	d0,d5		; Bottom
(1)  828/FFFFFFFFFFFF0718 : 0685 0001 0000      		addi.l	#$010000,d5
(1)  829/FFFFFFFFFFFF071E : 0285 00FF 0000      		andi.l	#$FF0000,d5
(1)  830/FFFFFFFFFFFF0724 : 2C05                		move.l	d5,d6
(1)  831/FFFFFFFFFFFF0726 : 9C80                		sub.l	d0,d6
(1)  832/FFFFFFFFFFFF0728 : 3E02                		move.w	d2,d7
(1)  833/FFFFFFFFFFFF072A : 9E46                		sub.w	d6,d7
(1)  834/FFFFFFFFFFFF072C : DC41                		add.w	d1,d6
(1)  835/FFFFFFFFFFFF072E : 6006                		bra.s	.mk_set
(1)  836/FFFFFFFFFFFF0730 :                     .normal:
(1)  837/FFFFFFFFFFFF0730 : 2A00                		move.l	d0,d5
(1)  838/FFFFFFFFFFFF0732 : 3C01                		move.w	d1,d6
(1)  839/FFFFFFFFFFFF0734 : 3E02                		move.w	d2,d7
(1)  840/FFFFFFFFFFFF0736 :                     ; d7 - size
(1)  841/FFFFFFFFFFFF0736 :                     ; d6 - vram
(1)  842/FFFFFFFFFFFF0736 :                     ; d5 - data
(1)  843/FFFFFFFFFFFF0736 :                     .mk_set:
(1)  844/FFFFFFFFFFFF0736 : 49F9 00C0 0004      		lea	(vdp_ctrl),a4
(1)  845/FFFFFFFFFFFF073C : 383C 8100           		move.w	#$8100,d4		; DMA ON
(1)  846/FFFFFFFFFFFF0740 : 1838 BDF7           		move.b	(RAM_VdpRegs+1).w,d4
(1)  847/FFFFFFFFFFFF0744 : 08C4 0004           		bset	#bitDmaEnbl,d4
(1)  848/FFFFFFFFFFFF0748 : 3884                		move.w	d4,(a4)
(1)  849/FFFFFFFFFFFF074A :                     
(1)  851/FFFFFFFFFFFF074A : 4846                		swap	d6
(1)  852/FFFFFFFFFFFF074C : 4845                		swap	d5
(1)  853/FFFFFFFFFFFF074E : 3C05                		move.w	d5,d6
(1)  854/FFFFFFFFFFFF0750 : 4845                		swap	d5
(1)  855/FFFFFFFFFFFF0752 : 0246 00F0           		andi.w	#$F0,d6
(1)  856/FFFFFFFFFFFF0756 : 0C06 0020           		cmpi.b	#$20,d6
(1)  857/FFFFFFFFFFFF075A : 660A                		bne.s	.non_wram
(1)  858/FFFFFFFFFFFF075C : 48E7 0600           		movem.l	d5-d6,-(sp)		; <-- Save data on stack
(1)  859/FFFFFFFFFFFF0760 : 0685 0000 0002      		addi.l	#2,d5
(1)  860/FFFFFFFFFFFF0766 :                     ; 		subi.w	#2,d7	; TODO
(1)  861/FFFFFFFFFFFF0766 :                     .non_wram:
(1)  862/FFFFFFFFFFFF0766 : 4846                		swap	d6
(1)  864/FFFFFFFFFFFF0768 : 614C                		bsr.s	.shared_setup
(1)  865/FFFFFFFFFFFF076A : 3886                		move.w	d6,(a4)
(1)  866/FFFFFFFFFFFF076C : 6100 07F2           		bsr	System_DmaEnter_ROM
(1)  867/FFFFFFFFFFFF0770 : 3887                		move.w	d7,(a4)			; <-- second write
(1)  868/FFFFFFFFFFFF0772 : 6100 07F0           		bsr	System_DmaExit_ROM
(1)  869/FFFFFFFFFFFF0776 : 383C 8100           		move.w	#$8100,d4		; DMA OFF
(1)  870/FFFFFFFFFFFF077A : 1838 BDF7           		move.b	(RAM_VdpRegs+1).w,d4
(1)  871/FFFFFFFFFFFF077E : 3884                		move.w	d4,(a4)
(1)  872/FFFFFFFFFFFF0780 :                     
(1)  874/FFFFFFFFFFFF0780 : 4CDF 0060           		movem.l	(sp)+,d5-d6		; --> Get data as d7
(1)  875/FFFFFFFFFFFF0784 : 2E05                		move.l	d5,d7
(1)  876/FFFFFFFFFFFF0786 : 0C06 0020           		cmpi.b	#$20,d6			; Word-RAM?
(1)  877/FFFFFFFFFFFF078A : 6626                		bne.s	.non_wram_l
(1)  878/FFFFFFFFFFFF078C : 4846                		swap	d6
(1)  879/FFFFFFFFFFFF078E : 3E06                		move.w	d6,d7			; Destination
(1)  880/FFFFFFFFFFFF0790 : 0286 0000 3FFF      		andi.l	#$3FFF,d6
(1)  881/FFFFFFFFFFFF0796 : 0046 4000           		ori.w	#$4000,d6
(1)  882/FFFFFFFFFFFF079A : E04F                		lsr.w	#8,d7
(1)  883/FFFFFFFFFFFF079C : EC4F                		lsr.w	#6,d7
(1)  884/FFFFFFFFFFFF079E : 0247 0003           		andi.w	#%11,d7
(1)  885/FFFFFFFFFFFF07A2 : 3886                		move.w	d6,(a4)
(1)  886/FFFFFFFFFFFF07A4 : 3887                		move.w	d7,(a4)			; <-- second write
(1)  887/FFFFFFFFFFFF07A6 : 2E0C                		move.l	a4,d7
(1)  888/FFFFFFFFFFFF07A8 : 2845                		move.l	d5,a4
(1)  889/FFFFFFFFFFFF07AA : 3C14                		move.w	(a4),d6
(1)  890/FFFFFFFFFFFF07AC : 2847                		move.l	d7,a4
(1)  891/FFFFFFFFFFFF07AE : 3946 FFFC           		move.w	d6,-4(a4)		; DATA port -4
(1)  892/FFFFFFFFFFFF07B2 :                     .non_wram_l:
(1)  894/FFFFFFFFFFFF07B2 : 4E75                		rts
(1)  895/FFFFFFFFFFFF07B4 :                     
(1)  896/FFFFFFFFFFFF07B4 :                     .from_ram:
(1)  897/FFFFFFFFFFFF07B4 : 4E75                		rts
(1)  898/FFFFFFFFFFFF07B6 :                     
(1)  899/FFFFFFFFFFFF07B6 :                     .shared_setup:
(1)  900/FFFFFFFFFFFF07B6 : 0287 0000 FFFE      		andi.l	#$0000FFFE,d7
(1)  901/FFFFFFFFFFFF07BC : EF8F                		lsl.l	#7,d7
(1)  902/FFFFFFFFFFFF07BE : E04F                		lsr.w	#8,d7
(1)  903/FFFFFFFFFFFF07C0 : 0087 9400 9300      		ori.l	#$94009300,d7
(1)  904/FFFFFFFFFFFF07C6 : 2887                		move.l	d7,(a4)
(1)  905/FFFFFFFFFFFF07C8 : E28D                  		lsr.l	#1,d5			; d5 - Source
(1)  906/FFFFFFFFFFFF07CA : 2E3C 9600 9500       		move.l	#$96009500,d7
(1)  907/FFFFFFFFFFFF07D0 : 1E05                 		move.b	d5,d7
(1)  908/FFFFFFFFFFFF07D2 : E08D                 		lsr.l	#8,d5
(1)  909/FFFFFFFFFFFF07D4 : 4847                 		swap	d7
(1)  910/FFFFFFFFFFFF07D6 : 1E05                 		move.b	d5,d7
(1)  911/FFFFFFFFFFFF07D8 : 2887                 		move.l	d7,(a4)
(1)  912/FFFFFFFFFFFF07DA : 3E3C 9700            		move.w	#$9700,d7
(1)  913/FFFFFFFFFFFF07DE : E08D                 		lsr.l	#8,d5
(1)  914/FFFFFFFFFFFF07E0 : 1E05                 		move.b	d5,d7
(1)  915/FFFFFFFFFFFF07E2 : 3887                 		move.w	d7,(a4)
(1)  916/FFFFFFFFFFFF07E4 : 3E06                		move.w	d6,d7			; Destination
(1)  917/FFFFFFFFFFFF07E6 : 0286 0000 3FFF      		andi.l	#$3FFF,d6
(1)  918/FFFFFFFFFFFF07EC : 0046 4000           		ori.w	#$4000,d6
(1)  919/FFFFFFFFFFFF07F0 : E04F                		lsr.w	#8,d7
(1)  920/FFFFFFFFFFFF07F2 : EC4F                		lsr.w	#6,d7
(1)  921/FFFFFFFFFFFF07F4 : 0247 0003           		andi.w	#%11,d7
(1)  922/FFFFFFFFFFFF07F8 : 0047 0080           		ori.w	#$80,d7
(1)  923/FFFFFFFFFFFF07FC : 4E75                		rts
(1)  924/FFFFFFFFFFFF07FE :                     
(1)  925/FFFFFFFFFFFF07FE :                     ; --------------------------------------------------------
(1)  926/FFFFFFFFFFFF07FE :                     ; Video_Render
(1)  927/FFFFFFFFFFFF07FE :                     ;
(1)  928/FFFFFFFFFFFF07FE :                     ; Call this during VBlank to update
(1)  929/FFFFFFFFFFFF07FE :                     ; visuals.
(1)  930/FFFFFFFFFFFF07FE :                     ; --------------------------------------------------------
(1)  931/FFFFFFFFFFFF07FE :                     
(1)  932/FFFFFFFFFFFF07FE :                     Video_Render:
(1)  933/FFFFFFFFFFFF07FE : 4DF9 00C0 0004      		lea	(vdp_ctrl),a6
(1)  934/FFFFFFFFFFFF0804 : 3E3C 8100           		move.w	#$8100,d7		; DMA ON
(1)  935/FFFFFFFFFFFF0808 : 1E38 BDF7           		move.b	(RAM_VdpRegs+1).w,d7
(1)  936/FFFFFFFFFFFF080C : 08C7 0004           		bset	#bitDmaEnbl,d7
(1)  937/FFFFFFFFFFFF0810 : 3C87                		move.w	d7,(a6)
(1)  938/FFFFFFFFFFFF0812 : 6100 0744           		bsr	System_DmaEnter_RAM
(1)  939/FFFFFFFFFFFF0816 : 2CBC 9400 9328      		move.l	#$94009328,(a6)
(1)  940/FFFFFFFFFFFF081C : 2CBC 96D1 95E2      		move.l	#$96009500|(RAM_VerScroll<<7&$FF0000)|(RAM_VerScroll>>1&$FF),(a6)
(1)  941/FFFFFFFFFFFF0822 : 3CBC 977F           		move.w	#$9700|(RAM_VerScroll>>17&$7F),(a6)
(1)  942/FFFFFFFFFFFF0826 : 3CBC 4000           		move.w	#$4000,(a6)
(1)  943/FFFFFFFFFFFF082A : 3F3C 0090           		move.w	#$0010|$80,-(sp)
(1)  944/FFFFFFFFFFFF082E : 3C9F                		move.w	(sp)+,(a6)
(1)  945/FFFFFFFFFFFF0830 : 2CBC 9401 93E0      		move.l	#$940193E0,(a6)
(1)  946/FFFFFFFFFFFF0836 : 2CBC 96D0 9502      		move.l	#$96009500|(RAM_HorScroll<<7&$FF0000)|(RAM_HorScroll>>1&$FF),(a6)
(1)  947/FFFFFFFFFFFF083C : 3CBC 977F           		move.w	#$9700|(RAM_HorScroll>>17&$7F),(a6)
(1)  948/FFFFFFFFFFFF0840 : 3CBC 7C00           		move.w	#$7C00,(a6)
(1)  949/FFFFFFFFFFFF0844 : 3F3C 0083           		move.w	#$0003|$80,-(sp)
(1)  950/FFFFFFFFFFFF0848 : 3C9F                		move.w	(sp)+,(a6)
(1)  951/FFFFFFFFFFFF084A : 2CBC 9402 9300      		move.l	#$94029300,(a6)
(1)  952/FFFFFFFFFFFF0850 : 2CBC 96D2 950A      		move.l	#$96009500|(RAM_Sprites<<7&$FF0000)|(RAM_Sprites>>1&$FF),(a6)
(1)  953/FFFFFFFFFFFF0856 : 3CBC 977F           		move.w	#$9700|(RAM_Sprites>>17&$7F),(a6)
(1)  954/FFFFFFFFFFFF085A : 3CBC 7800           		move.w	#$7800,(a6)
(1)  955/FFFFFFFFFFFF085E : 3F3C 0083           		move.w	#$0003|$80,-(sp)
(1)  956/FFFFFFFFFFFF0862 : 3C9F                		move.w	(sp)+,(a6)
(1)  957/FFFFFFFFFFFF0864 : 2CBC 9400 9340      		move.l	#$94009340,(a6)
(1)  958/FFFFFFFFFFFF086A : 2CBC 96D7 950A      		move.l	#$96009500|(RAM_Palette<<7&$FF0000)|(RAM_Palette>>1&$FF),(a6)
(1)  959/FFFFFFFFFFFF0870 : 3CBC 977F           		move.w	#$9700|(RAM_Palette>>17&$7F),(a6)
(1)  960/FFFFFFFFFFFF0874 : 3CBC C000           		move.w	#$C000,(a6)
(1)  961/FFFFFFFFFFFF0878 : 3F3C 0080           		move.w	#$0000|$80,-(sp)
(1)  962/FFFFFFFFFFFF087C : 3C9F                		move.w	(sp)+,(a6)
(1)  963/FFFFFFFFFFFF087E : 6100 06DC           		bsr	System_DmaExit_RAM
(1)  964/FFFFFFFFFFFF0882 : 3E3C 8100           		move.w	#$8100,d7
(1)  965/FFFFFFFFFFFF0886 : 1E38 BDF7           		move.b	(RAM_VdpRegs+1).w,d7
(1)  966/FFFFFFFFFFFF088A : 3C87                		move.w	d7,(a6)
(1)  967/FFFFFFFFFFFF088C : 31FC 0001 BDDA      		move.w	#1,(RAM_SprLinkNum).w	; Reset SPRITE LINK number
(1)  968/FFFFFFFFFFFF0892 :                     
(1)  969/FFFFFFFFFFFF0892 :                     	; Process DMA BLAST from here
(1)  970/FFFFFFFFFFFF0892 :                     
(1)  971/FFFFFFFFFFFF0892 :                     ; --------------------------------------------------------
(1)  972/FFFFFFFFFFFF0892 :                     ; Video_DmaBlast
(1)  973/FFFFFFFFFFFF0892 :                     ;
(1)  974/FFFFFFFFFFFF0892 :                     ; Process DMA tasks from a predefined list in RAM
(1)  975/FFFFFFFFFFFF0892 :                     ;
(1)  976/FFFFFFFFFFFF0892 :                     ; Breaks:
(1)  977/FFFFFFFFFFFF0892 :                     ; d5-d7,a3-a4
(1)  978/FFFFFFFFFFFF0892 :                     ;
(1)  979/FFFFFFFFFFFF0892 :                     ; *** Call this on VBlank ONLY ***
(1)  980/FFFFFFFFFFFF0892 :                     ;
(1)  981/FFFFFFFFFFFF0892 :                     ; NOTE:
(1)  982/FFFFFFFFFFFF0892 :                     ; For 32X this code MUST be located on RAM as it
(1)  983/FFFFFFFFFFFF0892 :                     ; writes the RV from ROM access
(1)  984/FFFFFFFFFFFF0892 :                     ; --------------------------------------------------------
(1)  985/FFFFFFFFFFFF0892 :                     
(1)  986/FFFFFFFFFFFF0892 :                     ; Format:
(1)  987/FFFFFFFFFFFF0892 :                     ; dc.w $94xx,$93xx		; Size
(1)  988/FFFFFFFFFFFF0892 :                     ; dc.w $96xx,$95xx,$97xx	; Source
(1)  989/FFFFFFFFFFFF0892 :                     ; dc.l $4xxx008x 		; VDP output + DMA bit
(1)  990/FFFFFFFFFFFF0892 :                     ; dc.w $xxxx			; SegaCD/CD32X only: graphics word patch
(1)  991/FFFFFFFFFFFF0892 :                     
(1)  992/FFFFFFFFFFFF0892 :                     Video_DmaBlast:
(1)  993/FFFFFFFFFFFF0892 : 4A78 BDE0           		tst.w	(RAM_VdpDmaMod).w		; Got mid-write?
(1)  994/FFFFFFFFFFFF0896 : 667A                		bne.s	.exit				; then can't transfer.
(1)  995/FFFFFFFFFFFF0898 : 4A78 BDDE           		tst.w	(RAM_VdpDmaIndx).w		; Any requests?
(1)  996/FFFFFFFFFFFF089C : 6774                		beq.s	.exit
(1)  997/FFFFFFFFFFFF089E : 49F9 00C0 0004      		lea	(vdp_ctrl),a4			; Enter processing loop
(1)  998/FFFFFFFFFFFF08A4 : 47F8 B114           		lea	(RAM_VdpDmaList).w,a3
(1)  999/FFFFFFFFFFFF08A8 : 3E3C 8100           		move.w	#$8100,d7			; DMA ON
(1) 1000/FFFFFFFFFFFF08AC : 1E38 BDF7           		move.b	(RAM_VdpRegs+1).w,d7
(1) 1001/FFFFFFFFFFFF08B0 : 08C7 0004           		bset	#bitDmaEnbl,d7
(1) 1002/FFFFFFFFFFFF08B4 : 3887                		move.w	d7,(a4)
(1) 1003/FFFFFFFFFFFF08B6 : 6100 06A8           		bsr	System_DmaEnter_ROM		; Request Z80 stop and SH2 backup
(1) 1004/FFFFFFFFFFFF08BA : 4A78 BDDE           .next:		tst.w	(RAM_VdpDmaIndx).w
(1) 1005/FFFFFFFFFFFF08BE : 6744                		beq.s	.end
(1) 1007/FFFFFFFFFFFF08C0 : 2C1B                		move.l	(a3)+,d6		; Size
(1) 1008/FFFFFFFFFFFF08C2 : 2A1B                		move.l	(a3)+,d5		; Source
(1) 1009/FFFFFFFFFFFF08C4 : 381B                		move.w	(a3)+,d4
(1) 1010/FFFFFFFFFFFF08C6 : 361B                		move.w	(a3)+,d3
(1) 1011/FFFFFFFFFFFF08C8 : 341B                		move.w	(a3)+,d2
(1) 1012/FFFFFFFFFFFF08CA : 2206                		move.l	d6,d1
(1) 1013/FFFFFFFFFFFF08CC : 0281 00FF 0000      		andi.l	#$FF0000,d1
(1) 1014/FFFFFFFFFFFF08D2 : 0C81 0001 0000      		cmpi.l	#$010000,d1
(1) 1015/FFFFFFFFFFFF08D8 : 6706                		beq.s	.fixme
(1) 1016/FFFFFFFFFFFF08DA : 0486 0001 0000      		subi.l	#$010000,d6		; -2 Size
(1) 1017/FFFFFFFFFFFF08E0 :                     .fixme:
(1) 1018/FFFFFFFFFFFF08E0 : 0685 0001 0000      		addi.l	#$010000,d5		; +2 Source
(1) 1019/FFFFFFFFFFFF08E6 : 2886                		move.l	d6,(a4)
(1) 1020/FFFFFFFFFFFF08E8 : 2885                		move.l	d5,(a4)
(1) 1021/FFFFFFFFFFFF08EA : 3884                		move.w	d4,(a4)
(1) 1022/FFFFFFFFFFFF08EC : 3883                		move.w	d3,(a4)			; Destination
(1) 1023/FFFFFFFFFFFF08EE : 3882                		move.w	d2,(a4)			; *** CPU freezes ***
(1) 1024/FFFFFFFFFFFF08F0 : 0242 FF7F           		andi.w	#$FF7F,d2		; NOW the TOP-PATCH
(1) 1025/FFFFFFFFFFFF08F4 : 3883                		move.w	d3,(a4)
(1) 1026/FFFFFFFFFFFF08F6 : 3882                		move.w	d2,(a4)
(1) 1027/FFFFFFFFFFFF08F8 : 395B FFFC           		move.w	(a3)+,-4(a4)		; <-- manual $C00000
(1) 1036/FFFFFFFFFFFF08FC : 0478 0001 BDDE      		subi.w	#1,(RAM_VdpDmaIndx).w
(1) 1037/FFFFFFFFFFFF0902 : 60B6                		bra.s	.next
(1) 1038/FFFFFFFFFFFF0904 :                     .end:
(1) 1039/FFFFFFFFFFFF0904 : 6100 065E           		bsr	System_DmaExit_ROM	; Resume Z80 and SH2 direct
(1) 1040/FFFFFFFFFFFF0908 : 3E3C 8100           		move.w	#$8100,d7		; DMA OFF
(1) 1041/FFFFFFFFFFFF090C : 1E38 BDF7           		move.b	(RAM_VdpRegs+1).w,d7
(1) 1042/FFFFFFFFFFFF0910 : 3887                		move.w	d7,(a4)
(1) 1043/FFFFFFFFFFFF0912 :                     .exit:
(1) 1044/FFFFFFFFFFFF0912 : 4E75                		rts
(1) 1045/FFFFFFFFFFFF0914 :                     
(1) 1046/FFFFFFFFFFFF0914 :                     ; ====================================================================
(1) 1047/FFFFFFFFFFFF0914 :                     ; ----------------------------------------------------------------
(1) 1048/FFFFFFFFFFFF0914 :                     ; Video routines for 32X
(1) 1049/FFFFFFFFFFFF0914 :                     ; ----------------------------------------------------------------
(1) 1050/FFFFFFFFFFFF0914 :                     
(1) 1051/FFFFFFFFFFFF0914 :                     ; --------------------------------------------------------
(1) 1052/FFFFFFFFFFFF0914 :                     ; Video_MarsGfxMode
(1) 1053/FFFFFFFFFFFF0914 :                     ; Sets graphics mode on the 32X side
(1) 1054/FFFFFFFFFFFF0914 :                     ;
(1) 1055/FFFFFFFFFFFF0914 :                     ; Input:
(1) 1056/FFFFFFFFFFFF0914 :                     ; d0 - Graphics mode number
(1) 1057/FFFFFFFFFFFF0914 :                     ;
(1) 1058/FFFFFFFFFFFF0914 :                     ; Uses:
(1) 1059/FFFFFFFFFFFF0914 :                     ; d7
(1) 1060/FFFFFFFFFFFF0914 :                     ;
(1) 1061/FFFFFFFFFFFF0914 :                     ; Notes:
(1) 1062/FFFFFFFFFFFF0914 :                     ; Changing modes takes 3 FRAMES to process.
(1) 1063/FFFFFFFFFFFF0914 :                     ; --------------------------------------------------------
(1) 1064/FFFFFFFFFFFF0914 :                     
(1) 1065/FFFFFFFFFFFF0914 :                     Video_MarsGfxMode:
(1) 1081/FFFFFFFFFFFF0914 : 4E75                		rts
(1) 1082/FFFFFFFFFFFF0916 :                     
(1) 1083/FFFFFFFFFFFF0916 :                     ; --------------------------------------------------------
(1) 1084/FFFFFFFFFFFF0916 :                     ; Video_Mars_SyncFrame
(1) 1085/FFFFFFFFFFFF0916 :                     ; --------------------------------------------------------
(1) 1086/FFFFFFFFFFFF0916 :                     
(1) 1087/FFFFFFFFFFFF0916 :                     Video_Mars_SyncFrame:
(1) 1093/FFFFFFFFFFFF0916 : 4E75                		rts
(1) 1094/FFFFFFFFFFFF0918 :                     
(1) 1095/FFFFFFFFFFFF0918 :                     ; --------------------------------------------------------
(1) 1096/FFFFFFFFFFFF0918 :                     ; Video_LoadPal_Mars
(1) 1097/FFFFFFFFFFFF0918 :                     ;
(1) 1098/FFFFFFFFFFFF0918 :                     ; Load Indexed palette directly to Buffer
(1) 1099/FFFFFFFFFFFF0918 :                     ;
(1) 1100/FFFFFFFFFFFF0918 :                     ; d0 - Start at
(1) 1101/FFFFFFFFFFFF0918 :                     ; d1 - Number of colors
(1) 1102/FFFFFFFFFFFF0918 :                     ; d2 - Priority bit OFF/ON
(1) 1103/FFFFFFFFFFFF0918 :                     ; --------------------------------------------------------
(1) 1104/FFFFFFFFFFFF0918 :                     
(1) 1105/FFFFFFFFFFFF0918 :                     Video_FadePal_Mars:
(1) 1129/FFFFFFFFFFFF0918 : 4E75                		rts
(1) 1130/FFFFFFFFFFFF091A :                     
(1) 1131/FFFFFFFFFFFF091A :                     ; --------------------------------------------------------
(1) 1132/FFFFFFFFFFFF091A :                     ; Video_MarsPalFade
(1) 1133/FFFFFFFFFFFF091A :                     ;
(1) 1134/FFFFFFFFFFFF091A :                     ; Input:
(1) 1135/FFFFFFFFFFFF091A :                     ; a0 - Palette data
(1) 1136/FFFFFFFFFFFF091A :                     ; d0 - Number of colors
(1) 1137/FFFFFFFFFFFF091A :                     ; d1 - Speed
(1) 1138/FFFFFFFFFFFF091A :                     ;
(1) 1139/FFFFFFFFFFFF091A :                     ; RAM_ReqFadeMars: (WORD)
(1) 1140/FFFFFFFFFFFF091A :                     ; $00 - No task (or finished)
(1) 1141/FFFFFFFFFFFF091A :                     ; $01 - Fade in
(1) 1142/FFFFFFFFFFFF091A :                     ; $02 - Fade out to black
(1) 1143/FFFFFFFFFFFF091A :                     ;
(1) 1144/FFFFFFFFFFFF091A :                     ; CALL THIS OUTSIDE OF VBLANK
(1) 1145/FFFFFFFFFFFF091A :                     ; --------------------------------------------------------
(1) 1146/FFFFFFFFFFFF091A :                     
(1) 1147/FFFFFFFFFFFF091A :                     ; TODO: luego ver que hago con el priority bit
(1) 1148/FFFFFFFFFFFF091A :                     
(1) 1149/FFFFFFFFFFFF091A :                     Video_MarsPalFade:
(1) 1308/FFFFFFFFFFFF091A : 4E75                		rts
(1) 1309/FFFFFFFFFFFF091C :                     
(1) 1310/FFFFFFFFFFFF091C :                     
(1) 1311/FFFFFFFFFFFF091C :                     ; ====================================================================
(1) 1312/FFFFFFFFFFFF091C :                     ; ----------------------------------------------------------------
(1) 1313/FFFFFFFFFFFF091C :                     ; Common screen routines
(1) 1314/FFFFFFFFFFFF091C :                     ; ----------------------------------------------------------------
(1) 1315/FFFFFFFFFFFF091C :                     
(1) 1316/FFFFFFFFFFFF091C :                     ; --------------------------------------------------------
(1) 1317/FFFFFFFFFFFF091C :                     ; Video_LoadMap
(1) 1318/FFFFFFFFFFFF091C :                     ;
(1) 1319/FFFFFFFFFFFF091C :                     ; Loads map data, in Horizontal order
(1) 1320/FFFFFFFFFFFF091C :                     ; Can autodetect layer width, height and
(1) 1321/FFFFFFFFFFFF091C :                     ; double interlace mode
(1) 1322/FFFFFFFFFFFF091C :                     ;
(1) 1323/FFFFFFFFFFFF091C :                     ; Input:
(1) 1324/FFFFFFFFFFFF091C :                     ; a0   - Map data
(1) 1325/FFFFFFFFFFFF091C :                     ; d0.l - locate(lyr,x,y) / 00|Layer|X|Y
(1) 1326/FFFFFFFFFFFF091C :                     ; d1.l - mapsize(x,y) / Width|Height (in cells)
(1) 1327/FFFFFFFFFFFF091C :                     ; d2.l - VRAM cell increment
(1) 1328/FFFFFFFFFFFF091C :                     ;
(1) 1329/FFFFFFFFFFFF091C :                     ; Breaks:
(1) 1330/FFFFFFFFFFFF091C :                     ; d4-d7/a6
(1) 1331/FFFFFFFFFFFF091C :                     ; --------------------------------------------------------
(1) 1332/FFFFFFFFFFFF091C :                     
(1) 1333/FFFFFFFFFFFF091C :                     Video_LoadMap:
(1) 1334/FFFFFFFFFFFF091C : 4DF9 00C0 0000      		lea	(vdp_data),a6
(1) 1335/FFFFFFFFFFFF0922 : 6100 01B6           		bsr	vid_PickLayer
(1) 1336/FFFFFFFFFFFF0926 : 3801                		move.w	d1,d4			; Start here
(1) 1337/FFFFFFFFFFFF0928 :                     .yloop:
(1) 1338/FFFFFFFFFFFF0928 : 4844                		swap	d4
(1) 1339/FFFFFFFFFFFF092A : 2D45 0004           		move.l	d5,4(a6)
(1) 1340/FFFFFFFFFFFF092E : 2E01                		move.l	d1,d7
(1) 1341/FFFFFFFFFFFF0930 : 4847                		swap	d7
(1) 1342/FFFFFFFFFFFF0932 :                     .xloop:
(1) 1343/FFFFFFFFFFFF0932 : 3818                		move.w	(a0)+,d4
(1) 1344/FFFFFFFFFFFF0934 : 0C44 FFFF           		cmpi.w	#-1,d4			; -1 ? TODO
(1) 1345/FFFFFFFFFFFF0938 : 6606                		bne.s	.nonull
(1) 1346/FFFFFFFFFFFF093A : 383C 07FF           		move.w	#varNullVram,d4		; Replace with custom blank tile
(1) 1347/FFFFFFFFFFFF093E : 6002                		bra.s	.cont
(1) 1348/FFFFFFFFFFFF0940 :                     .nonull:
(1) 1349/FFFFFFFFFFFF0940 : D842                		add.w	d2,d4
(1) 1350/FFFFFFFFFFFF0942 :                     .cont:
(1) 1351/FFFFFFFFFFFF0942 :                     	; Check for double interlace
(1) 1352/FFFFFFFFFFFF0942 : 4847                		swap	d7
(1) 1353/FFFFFFFFFFFF0944 : 1E38 BE02           		move.b	(RAM_VdpRegs+$C).w,d7
(1) 1354/FFFFFFFFFFFF0948 : 0247 0006           		andi.w	#%110,d7
(1) 1355/FFFFFFFFFFFF094C : 0C47 0006           		cmpi.w	#%110,d7
(1) 1356/FFFFFFFFFFFF0950 : 660E                		bne.s	.nodble
(1) 1357/FFFFFFFFFFFF0952 : 3E04                		move.w	d4,d7
(1) 1358/FFFFFFFFFFFF0954 : E24F                		lsr.w	#1,d7
(1) 1359/FFFFFFFFFFFF0956 : 0247 07FF           		andi.w	#$7FF,d7
(1) 1360/FFFFFFFFFFFF095A : 0244 F800           		andi.w	#$F800,d4
(1) 1361/FFFFFFFFFFFF095E : 8847                		or.w	d7,d4
(1) 1362/FFFFFFFFFFFF0960 :                     .nodble:
(1) 1363/FFFFFFFFFFFF0960 : 4847                		swap	d7
(1) 1364/FFFFFFFFFFFF0962 : 3C84                		move.w	d4,(a6)
(1) 1365/FFFFFFFFFFFF0964 : 51CF FFCC           		dbf	d7,.xloop
(1) 1366/FFFFFFFFFFFF0968 : DA86                		add.l	d6,d5
(1) 1367/FFFFFFFFFFFF096A : 4844                		swap	d4
(1) 1368/FFFFFFFFFFFF096C : 51CC FFBA           		dbf	d4,.yloop
(1) 1369/FFFFFFFFFFFF0970 : 4E75                		rts
(1) 1370/FFFFFFFFFFFF0972 :                     
(1) 1371/FFFFFFFFFFFF0972 :                     ; ; --------------------------------------------------------
(1) 1372/FFFFFFFFFFFF0972 :                     ; ; Video_LoadMap_Vert
(1) 1373/FFFFFFFFFFFF0972 :                     ; ;
(1) 1374/FFFFFFFFFFFF0972 :                     ; ; Load map data, Vertical order
(1) 1375/FFFFFFFFFFFF0972 :                     ; ;
(1) 1376/FFFFFFFFFFFF0972 :                     ; ; a0 - Map data
(1) 1377/FFFFFFFFFFFF0972 :                     ; ; d0 | LONG - 00|Lyr|X|Y,  locate(lyr,x,y)
(1) 1378/FFFFFFFFFFFF0972 :                     ; ; d1 | LONG - Width|Height (cells),  mapsize(x,y)
(1) 1379/FFFFFFFFFFFF0972 :                     ; ; d2 | WORD - VRAM
(1) 1380/FFFFFFFFFFFF0972 :                     ;
(1) 1381/FFFFFFFFFFFF0972 :                     ; ; Breaks:
(1) 1382/FFFFFFFFFFFF0972 :                     ; ; a4-a5,d4-d7
(1) 1383/FFFFFFFFFFFF0972 :                     ; ; --------------------------------------------------------
(1) 1384/FFFFFFFFFFFF0972 :                     ;
(1) 1385/FFFFFFFFFFFF0972 :                     ; Video_LoadMap_Vert:
(1) 1386/FFFFFFFFFFFF0972 :                     ; 		lea	(vdp_data),a4
(1) 1387/FFFFFFFFFFFF0972 :                     ; 		bsr	vid_PickLayer
(1) 1388/FFFFFFFFFFFF0972 :                     ; 		move.l	d1,d5		; Start here
(1) 1389/FFFFFFFFFFFF0972 :                     ; 		swap	d5
(1) 1390/FFFFFFFFFFFF0972 :                     ; .xloop:
(1) 1391/FFFFFFFFFFFF0972 :                     ; 		swap	d5
(1) 1392/FFFFFFFFFFFF0972 :                     ; 		move.l	d4,-(sp)
(1) 1393/FFFFFFFFFFFF0972 :                     ; 		move.w	d1,d7
(1) 1394/FFFFFFFFFFFF0972 :                     ; 		btst	#2,(RAM_VdpRegs+$C).w
(1) 1395/FFFFFFFFFFFF0972 :                     ; 		beq.s	.yloop
(1) 1396/FFFFFFFFFFFF0972 :                     ; 		lsr.w	#1,d7
(1) 1397/FFFFFFFFFFFF0972 :                     ; .yloop:
(1) 1398/FFFFFFFFFFFF0972 :                     ; 		move.l	d4,4(a4)
(1) 1399/FFFFFFFFFFFF0972 :                     ; 		move.w	(a0),d5
(1) 1400/FFFFFFFFFFFF0972 :                     ; 		cmpi.w	#-1,d5
(1) 1401/FFFFFFFFFFFF0972 :                     ; 		bne.s	.nonull
(1) 1402/FFFFFFFFFFFF0972 :                     ; 		move.w	#varNullVram,d5
(1) 1403/FFFFFFFFFFFF0972 :                     ; 		bra.s	.cont
(1) 1404/FFFFFFFFFFFF0972 :                     ; .nonull:
(1) 1405/FFFFFFFFFFFF0972 :                     ; 		add.w	d2,d5
(1) 1406/FFFFFFFFFFFF0972 :                     ; .cont:
(1) 1407/FFFFFFFFFFFF0972 :                     ; 		swap	d7
(1) 1408/FFFFFFFFFFFF0972 :                     ; 		adda	#2,a0
(1) 1409/FFFFFFFFFFFF0972 :                     ; 		btst	#2,(RAM_VdpRegs+$C).w
(1) 1410/FFFFFFFFFFFF0972 :                     ; 		beq.s	.nodble
(1) 1411/FFFFFFFFFFFF0972 :                     ; 		adda	#2,a0
(1) 1412/FFFFFFFFFFFF0972 :                     ; 		move.w	d5,d7
(1) 1413/FFFFFFFFFFFF0972 :                     ; 		lsr.w	#1,d7
(1) 1414/FFFFFFFFFFFF0972 :                     ; 		andi.w	#$7FF,d7
(1) 1415/FFFFFFFFFFFF0972 :                     ; 		andi.w	#$F800,d5
(1) 1416/FFFFFFFFFFFF0972 :                     ; 		or.w	d7,d5
(1) 1417/FFFFFFFFFFFF0972 :                     ; .nodble:
(1) 1418/FFFFFFFFFFFF0972 :                     ; 		swap	d7
(1) 1419/FFFFFFFFFFFF0972 :                     ; 		move.w	d5,(a4)
(1) 1420/FFFFFFFFFFFF0972 :                     ; 		add.l	d6,d4
(1) 1421/FFFFFFFFFFFF0972 :                     ; 		dbf	d7,.yloop
(1) 1422/FFFFFFFFFFFF0972 :                     ; .outdbl:
(1) 1423/FFFFFFFFFFFF0972 :                     ; 		move.l	(sp)+,d4
(1) 1424/FFFFFFFFFFFF0972 :                     ; 		add.l	#$20000,d4
(1) 1425/FFFFFFFFFFFF0972 :                     ; 		swap	d5
(1) 1426/FFFFFFFFFFFF0972 :                     ; 		dbf	d5,.xloop
(1) 1427/FFFFFFFFFFFF0972 :                     ; 		rts
(1) 1428/FFFFFFFFFFFF0972 :                     
(1) 1429/FFFFFFFFFFFF0972 :                     ; ====================================================================
(1) 1430/FFFFFFFFFFFF0972 :                     ; ----------------------------------------------------------------
(1) 1431/FFFFFFFFFFFF0972 :                     ; Text PRINT system, for debugging or quick texts.
(1) 1432/FFFFFFFFFFFF0972 :                     ; ----------------------------------------------------------------
(1) 1433/FFFFFFFFFFFF0972 :                     
(1) 1434/FFFFFFFFFFFF0972 :                     ; --------------------------------------------------------
(1) 1435/FFFFFFFFFFFF0972 :                     ; Video_PrintInit
(1) 1436/FFFFFFFFFFFF0972 :                     ;
(1) 1437/FFFFFFFFFFFF0972 :                     ; Initializes the default Graphics and Palette
(1) 1438/FFFFFFFFFFFF0972 :                     ; for the font.
(1) 1439/FFFFFFFFFFFF0972 :                     ;
(1) 1440/FFFFFFFFFFFF0972 :                     ; Input:
(1) 1441/FFFFFFFFFFFF0972 :                     ; a0 | ASCII Graphics location
(1) 1442/FFFFFFFFFFFF0972 :                     ; a1 | ASCII Palette
(1) 1443/FFFFFFFFFFFF0972 :                     ;
(1) 1444/FFFFFFFFFFFF0972 :                     ; Breaks:
(1) 1445/FFFFFFFFFFFF0972 :                     ; ALL
(1) 1446/FFFFFFFFFFFF0972 :                     ;
(1) 1447/FFFFFFFFFFFF0972 :                     ; Notes:
(1) 1448/FFFFFFFFFFFF0972 :                     ; * Requires ASCII font graphics starting from $20
(1) 1449/FFFFFFFFFFFF0972 :                     ; (" ") to $7F ("[DEL]")
(1) 1450/FFFFFFFFFFFF0972 :                     ; * CALL THIS ONLY IF DISPLAY IS OFF OR DURING VBLANK
(1) 1451/FFFFFFFFFFFF0972 :                     ; * 32X: MAKE SURE SH2 IS NOT READING ROM DATA
(1) 1452/FFFFFFFFFFFF0972 :                     ; --------------------------------------------------------
(1) 1453/FFFFFFFFFFFF0972 :                     
(1) 1454/FFFFFFFFFFFF0972 :                     Video_PrintInit:
(1) 1455/FFFFFFFFFFFF0972 :                     ; 		lea	(ASCII_FONT).l,a0
(1) 1456/FFFFFFFFFFFF0972 :                     ; 		lea	(ASCII_PAL).l,a1
(1) 1457/FFFFFFFFFFFF0972 : 2008                		move.l	a0,d0
(1) 1458/FFFFFFFFFFFF0974 : 323C B000           		move.w	#cell_vram(varPrintVram),d1
(1) 1459/FFFFFFFFFFFF0978 : 343C 0C00           		move.w	#($60*$20),d2			; From " " to "[DEL]"
(1) 1460/FFFFFFFFFFFF097C : 363C 6580           		move.w	#(varPrintPal<<13)|varPrintVram,d3
(1) 1461/FFFFFFFFFFFF0980 : 0443 0020           		subi.w	#$20,d3
(1) 1462/FFFFFFFFFFFF0984 : 31C3 BDE2           		move.w	d3,(RAM_VidPrntVram).w
(1) 1463/FFFFFFFFFFFF0988 : 6100 FD70           		bsr	Video_LoadArt
(1) 1464/FFFFFFFFFFFF098C :                     Video_PrintPal:
(1) 1465/FFFFFFFFFFFF098C : 2049                		movea.l	a1,a0
(1) 1466/FFFFFFFFFFFF098E : 7030                		moveq	#(varPrintPal<<4),d0
(1) 1467/FFFFFFFFFFFF0990 : 323C 000F           		move.w	#$0F,d1
(1) 1468/FFFFFFFFFFFF0994 : 6100 FA48           		bsr	Video_LoadPal	; Write to both palette buffers
(1) 1469/FFFFFFFFFFFF0998 : 6000 FA3A           		bra	Video_FadePal
(1) 1470/FFFFFFFFFFFF099C :                     
(1) 1471/FFFFFFFFFFFF099C :                     ; --------------------------------------------------------
(1) 1472/FFFFFFFFFFFF099C :                     ; Video_Print
(1) 1473/FFFFFFFFFFFF099C :                     ;
(1) 1474/FFFFFFFFFFFF099C :                     ; Prints string to layer
(1) 1475/FFFFFFFFFFFF099C :                     ;
(1) 1476/FFFFFFFFFFFF099C :                     ; Input:
(1) 1477/FFFFFFFFFFFF099C :                     ; a0   - String data w/special characters +
(1) 1478/FFFFFFFFFFFF099C :                     ;        list of RAM locations to read
(1) 1479/FFFFFFFFFFFF099C :                     ; d0.l - Print location on-screen: locate(layer,x,y)
(1) 1480/FFFFFFFFFFFF099C :                     ;        ( 00|Lyr|X|Y )
(1) 1481/FFFFFFFFFFFF099C :                     ;
(1) 1482/FFFFFFFFFFFF099C :                     ; Breaks:
(1) 1483/FFFFFFFFFFFF099C :                     ; d4-d7,a4-a6
(1) 1484/FFFFFFFFFFFF099C :                     ;
(1) 1485/FFFFFFFFFFFF099C :                     ; Notes:
(1) 1486/FFFFFFFFFFFF099C :                     ; CALL Video_PrintInit FIRST
(1) 1487/FFFFFFFFFFFF099C :                     ;
(1) 1488/FFFFFFFFFFFF099C :                     ; Text string special codes:
(1) 1489/FFFFFFFFFFFF099C :                     ; $00 - End of line
(1) 1490/FFFFFFFFFFFF099C :                     ; $0A - Next line
(1) 1491/FFFFFFFFFFFF099C :                     ; "//b" - Show BYTE value
(1) 1492/FFFFFFFFFFFF099C :                     ; "//w" - Show WORD value
(1) 1493/FFFFFFFFFFFF099C :                     ; "//l" - Show LONG value
(1) 1494/FFFFFFFFFFFF099C :                     ;
(1) 1495/FFFFFFFFFFFF099C :                     ; If using //b //w //l:
(1) 1496/FFFFFFFFFFFF099C :                     ; After $00, put your RAM addresses in LONGS in the
(1) 1497/FFFFFFFFFFFF099C :                     ; same order you placed your value tags, don't forget to
(1) 1498/FFFFFFFFFFFF099C :                     ; put "align 2" at the end of the string or it will
(1) 1499/FFFFFFFFFFFF099C :                     ; trigger and ADDRESS ERROR
(1) 1500/FFFFFFFFFFFF099C :                     ; --------------------------------------------------------
(1) 1501/FFFFFFFFFFFF099C :                     
(1) 1502/FFFFFFFFFFFF099C :                     ; TODO: negative values might break
(1) 1503/FFFFFFFFFFFF099C :                     
(1) 1504/FFFFFFFFFFFF099C :                     Video_Print:
(1) 1505/FFFFFFFFFFFF099C : 48E7 0F0E           		movem.l	d4-d7/a4-a6,-(sp)
(1) 1506/FFFFFFFFFFFF09A0 : 4DF9 00C0 0000      		lea	(vdp_data).l,a6
(1) 1507/FFFFFFFFFFFF09A6 : 6100 0132           		bsr	vid_PickLayer
(1) 1508/FFFFFFFFFFFF09AA : 4BF8 BC54           		lea	(RAM_VidPrntList).w,a5
(1) 1509/FFFFFFFFFFFF09AE :                     .newjump:
(1) 1510/FFFFFFFFFFFF09AE : 2D45 0004           		move.l	d5,4(a6)
(1) 1511/FFFFFFFFFFFF09B2 : 2805                		move.l	d5,d4
(1) 1512/FFFFFFFFFFFF09B4 :                     .loop:
(1) 1513/FFFFFFFFFFFF09B4 : 1E18                		move.b	(a0)+,d7
(1) 1514/FFFFFFFFFFFF09B6 : 0247 00FF           		andi.w	#$FF,d7
(1) 1515/FFFFFFFFFFFF09BA : 676C                		beq	.exit
(1) 1516/FFFFFFFFFFFF09BC : 0C07 000A           		cmpi.b	#$0A,d7			; $0A - next line?
(1) 1517/FFFFFFFFFFFF09C0 : 672C                		beq.s	.next
(1) 1518/FFFFFFFFFFFF09C2 : 0C07 005C           		cmpi.b	#$5C,d7			; $5C ("\") special?
(1) 1519/FFFFFFFFFFFF09C6 : 6618                		bne.s	.puttext
(1) 1520/FFFFFFFFFFFF09C8 : 1E18                		move.b	(a0)+,d7		; Read next chr
(1) 1521/FFFFFFFFFFFF09CA : 0C07 0062           		cmpi.b	#"b",d7
(1) 1522/FFFFFFFFFFFF09CE : 6722                		beq.s	.isbyte
(1) 1523/FFFFFFFFFFFF09D0 : 0C07 0077           		cmpi.b	#"w",d7
(1) 1524/FFFFFFFFFFFF09D4 : 672E                		beq.s	.isword
(1) 1525/FFFFFFFFFFFF09D6 : 0C07 006C           		cmpi.b	#"l",d7
(1) 1526/FFFFFFFFFFFF09DA : 673A                		beq.s	.islong
(1) 1527/FFFFFFFFFFFF09DC : 3E3C 005C           		move.w	#"\\",d7		; normal "\"
(1) 1528/FFFFFFFFFFFF09E0 :                     .puttext:
(1) 1529/FFFFFFFFFFFF09E0 : DE78 BDE2           		add.w	(RAM_VidPrntVram).w,d7	; VRAM pos increment
(1) 1530/FFFFFFFFFFFF09E4 : 3C87                		move.w	d7,(a6)
(1) 1531/FFFFFFFFFFFF09E6 : 0684 0002 0000      		addi.l	#$20000,d4
(1) 1532/FFFFFFFFFFFF09EC : 60C6                		bra.s	.loop
(1) 1533/FFFFFFFFFFFF09EE :                     .next:
(1) 1534/FFFFFFFFFFFF09EE : DA86                		add.l	d6,d5			; Next line
(1) 1535/FFFFFFFFFFFF09F0 : 60BC                		bra.s	.newjump
(1) 1536/FFFFFFFFFFFF09F2 :                     
(1) 1537/FFFFFFFFFFFF09F2 :                     	; Set print values
(1) 1538/FFFFFFFFFFFF09F2 :                     .isbyte:
(1) 1539/FFFFFFFFFFFF09F2 : 2AC4                		move.l	d4,(a5)+
(1) 1540/FFFFFFFFFFFF09F4 : 3AFC 0001           		move.w	#1,(a5)+
(1) 1541/FFFFFFFFFFFF09F8 : 0684 0004 0000      		addi.l	#$40000,d4
(1) 1542/FFFFFFFFFFFF09FE : 2D44 0004           		move.l	d4,4(a6)
(1) 1543/FFFFFFFFFFFF0A02 : 60B0                		bra	.loop
(1) 1544/FFFFFFFFFFFF0A04 :                     .isword:
(1) 1545/FFFFFFFFFFFF0A04 : 2AC4                		move.l	d4,(a5)+
(1) 1546/FFFFFFFFFFFF0A06 : 3AFC 0002           		move.w	#2,(a5)+
(1) 1547/FFFFFFFFFFFF0A0A : 0684 0008 0000      		addi.l	#$80000,d4
(1) 1548/FFFFFFFFFFFF0A10 : 2D44 0004           		move.l	d4,4(a6)
(1) 1549/FFFFFFFFFFFF0A14 : 609E                		bra	.loop
(1) 1550/FFFFFFFFFFFF0A16 :                     .islong:
(1) 1551/FFFFFFFFFFFF0A16 : 2AC4                		move.l	d4,(a5)+
(1) 1552/FFFFFFFFFFFF0A18 : 3AFC 0003           		move.w	#3,(a5)+
(1) 1553/FFFFFFFFFFFF0A1C : 0684 0010 0000      		addi.l	#$100000,d4
(1) 1554/FFFFFFFFFFFF0A22 : 2D44 0004           		move.l	d4,4(a6)
(1) 1555/FFFFFFFFFFFF0A26 : 608C                		bra	.loop
(1) 1556/FFFFFFFFFFFF0A28 :                     .exit:
(1) 1557/FFFFFFFFFFFF0A28 :                     
(1) 1558/FFFFFFFFFFFF0A28 :                     	; ----------------------------------------
(1) 1559/FFFFFFFFFFFF0A28 :                     	; Print values
(1) 1560/FFFFFFFFFFFF0A28 :                     	;
(1) 1561/FFFFFFFFFFFF0A28 :                     	; vvvv vvvv tttt
(1) 1562/FFFFFFFFFFFF0A28 :                     	; v - vdp pos
(1) 1563/FFFFFFFFFFFF0A28 :                     	; t - value type
(1) 1564/FFFFFFFFFFFF0A28 :                     	; ----------------------------------------
(1) 1565/FFFFFFFFFFFF0A28 :                     
(1) 1566/FFFFFFFFFFFF0A28 :                     	; reading byte by byte because longs doesn't get
(1) 1567/FFFFFFFFFFFF0A28 :                     	; aligned after $00...
(1) 1568/FFFFFFFFFFFF0A28 :                     
(1) 1569/FFFFFFFFFFFF0A28 : 7800                		moveq	#0,d4
(1) 1570/FFFFFFFFFFFF0A2A : 7A00                		moveq	#0,d5
(1) 1571/FFFFFFFFFFFF0A2C : 7C00                		moveq	#0,d6
(1) 1572/FFFFFFFFFFFF0A2E : 4BF8 BC54           		lea	(RAM_VidPrntList).w,a5
(1) 1573/FFFFFFFFFFFF0A32 :                     .nextv:
(1) 1574/FFFFFFFFFFFF0A32 : 4A95                		tst.l	(a5)
(1) 1575/FFFFFFFFFFFF0A34 : 6700 009E           		beq	.nothing
(1) 1576/FFFFFFFFFFFF0A38 :                     
(1) 1577/FFFFFFFFFFFF0A38 :                     	; grab value
(1) 1578/FFFFFFFFFFFF0A38 : 7800                		moveq	#0,d4
(1) 1579/FFFFFFFFFFFF0A3A : 1818                		move.b	(a0)+,d4
(1) 1580/FFFFFFFFFFFF0A3C : E19C                		rol.l	#8,d4
(1) 1581/FFFFFFFFFFFF0A3E : 1818                		move.b	(a0)+,d4
(1) 1582/FFFFFFFFFFFF0A40 : E19C                		rol.l	#8,d4
(1) 1583/FFFFFFFFFFFF0A42 : 1818                		move.b	(a0)+,d4
(1) 1584/FFFFFFFFFFFF0A44 : E19C                		rol.l	#8,d4
(1) 1585/FFFFFFFFFFFF0A46 : 1818                		move.b	(a0)+,d4
(1) 1586/FFFFFFFFFFFF0A48 : 2844                		movea.l	d4,a4
(1) 1587/FFFFFFFFFFFF0A4A : 7800                		moveq	#0,d4
(1) 1588/FFFFFFFFFFFF0A4C :                     
(1) 1589/FFFFFFFFFFFF0A4C :                     	; get value
(1) 1590/FFFFFFFFFFFF0A4C : 3C2D 0004           		move.w	4(a5),d6
(1) 1591/FFFFFFFFFFFF0A50 : 0C46 0001           		cmpi.w	#1,d6		; byte?
(1) 1592/FFFFFFFFFFFF0A54 : 660E                		bne.s	.vbyte
(1) 1593/FFFFFFFFFFFF0A56 : 1814                		move.b	(a4),d4
(1) 1594/FFFFFFFFFFFF0A58 : 2D55 0004           		move.l	(a5),4(a6)
(1) 1595/FFFFFFFFFFFF0A5C : E91C                		rol.b	#4,d4
(1) 1596/FFFFFFFFFFFF0A5E : 6158                		bsr.s	.donibl
(1) 1597/FFFFFFFFFFFF0A60 : E91C                		rol.b	#4,d4
(1) 1598/FFFFFFFFFFFF0A62 : 6154                		bsr.s	.donibl
(1) 1599/FFFFFFFFFFFF0A64 :                     .vbyte:
(1) 1600/FFFFFFFFFFFF0A64 : 0C46 0002           		cmpi.w	#2,d6		; word?
(1) 1601/FFFFFFFFFFFF0A68 : 661C                		bne.s	.vword
(1) 1602/FFFFFFFFFFFF0A6A : 1814                		move.b	(a4),d4
(1) 1603/FFFFFFFFFFFF0A6C : E15C                		rol.w	#8,d4
(1) 1604/FFFFFFFFFFFF0A6E : 182C 0001           		move.b	1(a4),d4
(1) 1605/FFFFFFFFFFFF0A72 : 2D55 0004           		move.l	(a5),4(a6)
(1) 1606/FFFFFFFFFFFF0A76 : E95C                		rol.w	#4,d4
(1) 1607/FFFFFFFFFFFF0A78 : 613E                		bsr.s	.donibl
(1) 1608/FFFFFFFFFFFF0A7A : E95C                		rol.w	#4,d4
(1) 1609/FFFFFFFFFFFF0A7C : 613A                		bsr.s	.donibl
(1) 1610/FFFFFFFFFFFF0A7E : E95C                		rol.w	#4,d4
(1) 1611/FFFFFFFFFFFF0A80 : 6136                		bsr.s	.donibl
(1) 1612/FFFFFFFFFFFF0A82 : E95C                		rol.w	#4,d4
(1) 1613/FFFFFFFFFFFF0A84 : 6132                		bsr.s	.donibl
(1) 1614/FFFFFFFFFFFF0A86 :                     .vword:
(1) 1615/FFFFFFFFFFFF0A86 : 0C46 0003           		cmpi.w	#3,d6		; long?
(1) 1616/FFFFFFFFFFFF0A8A : 6624                		bne.s	.vlong
(1) 1617/FFFFFFFFFFFF0A8C : 1814                		move.b	(a4),d4
(1) 1618/FFFFFFFFFFFF0A8E : E19C                		rol.l	#8,d4
(1) 1619/FFFFFFFFFFFF0A90 : 182C 0001           		move.b	1(a4),d4
(1) 1620/FFFFFFFFFFFF0A94 : E19C                		rol.l	#8,d4
(1) 1621/FFFFFFFFFFFF0A96 : 182C 0002           		move.b	2(a4),d4
(1) 1622/FFFFFFFFFFFF0A9A : E19C                		rol.l	#8,d4
(1) 1623/FFFFFFFFFFFF0A9C : 182C 0003           		move.b	3(a4),d4
(1) 1624/FFFFFFFFFFFF0AA0 : 2D55 0004           		move.l	(a5),4(a6)
(1) 1625/FFFFFFFFFFFF0AA4 : 3C3C 0007           		move.w	#7,d6
(1) 1626/FFFFFFFFFFFF0AA8 : E99C                .lngloop:	rol.l	#4,d4
(1) 1627/FFFFFFFFFFFF0AAA : 610C                		bsr.s	.donibl
(1) 1628/FFFFFFFFFFFF0AAC : 51CE FFFA           		dbf	d6,.lngloop
(1) 1629/FFFFFFFFFFFF0AB0 :                     .vlong:
(1) 1630/FFFFFFFFFFFF0AB0 : 429D                		clr.l	(a5)+
(1) 1631/FFFFFFFFFFFF0AB2 : 425D                		clr.w	(a5)+
(1) 1632/FFFFFFFFFFFF0AB4 : 6000 FF7C           		bra	.nextv
(1) 1633/FFFFFFFFFFFF0AB8 :                     
(1) 1634/FFFFFFFFFFFF0AB8 :                     ; make nibble byte
(1) 1635/FFFFFFFFFFFF0AB8 :                     .donibl:
(1) 1636/FFFFFFFFFFFF0AB8 : 3A04                		move.w	d4,d5
(1) 1637/FFFFFFFFFFFF0ABA : 0245 000F           		andi.w	#%1111,d5
(1) 1638/FFFFFFFFFFFF0ABE : 0C05 000A           		cmpi.b	#$A,d5
(1) 1639/FFFFFFFFFFFF0AC2 : 6D04                		blt.s	.lowr
(1) 1640/FFFFFFFFFFFF0AC4 : DA3C 0007           		add.b	#7,d5
(1) 1641/FFFFFFFFFFFF0AC8 :                     .lowr:
(1) 1642/FFFFFFFFFFFF0AC8 : DA7C 0030           		add.w	#"0",d5
(1) 1643/FFFFFFFFFFFF0ACC : DA78 BDE2           		add.w	(RAM_VidPrntVram).w,d5
(1) 1644/FFFFFFFFFFFF0AD0 : 3C85                		move.w	d5,(a6)
(1) 1645/FFFFFFFFFFFF0AD2 : 4E75                		rts
(1) 1646/FFFFFFFFFFFF0AD4 :                     ; exit
(1) 1647/FFFFFFFFFFFF0AD4 :                     .nothing:
(1) 1648/FFFFFFFFFFFF0AD4 : 4CDF 70F0           		movem.l	(sp)+,d4-d7/a4-a6
(1) 1649/FFFFFFFFFFFF0AD8 : 4E75                		rts
(1) 1650/FFFFFFFFFFFF0ADA :                     
(1) 1651/FFFFFFFFFFFF0ADA :                     ; ------------------------------------------------
(1) 1652/FFFFFFFFFFFF0ADA :                     ; Shared: pick layer / x pos / y pos and set size
(1) 1653/FFFFFFFFFFFF0ADA :                     ;
(1) 1654/FFFFFFFFFFFF0ADA :                     ; Input:
(1) 1655/FFFFFFFFFFFF0ADA :                     ; d0.l - locate(layer,x,y)
(1) 1656/FFFFFFFFFFFF0ADA :                     ;
(1) 1657/FFFFFFFFFFFF0ADA :                     ; Returns:
(1) 1658/FFFFFFFFFFFF0ADA :                     ; d5 - VRAM position
(1) 1659/FFFFFFFFFFFF0ADA :                     ; d6 - Width
(1) 1660/FFFFFFFFFFFF0ADA :                     ; ------------------------------------------------
(1) 1661/FFFFFFFFFFFF0ADA :                     
(1) 1662/FFFFFFFFFFFF0ADA :                     vid_PickLayer:
(1) 1663/FFFFFFFFFFFF0ADA : 2C00                		move.l	d0,d6			; d6 - pick layer
(1) 1664/FFFFFFFFFFFF0ADC : 4846                		swap	d6
(1) 1665/FFFFFFFFFFFF0ADE : 0806 0000           		btst	#0,d6
(1) 1666/FFFFFFFFFFFF0AE2 : 671C                		beq.s	.plawnd
(1) 1667/FFFFFFFFFFFF0AE4 : 1A38 BDFA           		move.b	(RAM_VdpRegs+4).w,d5	; BG
(1) 1668/FFFFFFFFFFFF0AE8 : 3805                		move.w	d5,d4
(1) 1669/FFFFFFFFFFFF0AEA : E24C                		lsr.w	#1,d4
(1) 1670/FFFFFFFFFFFF0AEC : 0244 0003           		andi.w	#%11,d4
(1) 1671/FFFFFFFFFFFF0AF0 : 4845                		swap	d5
(1) 1672/FFFFFFFFFFFF0AF2 : 3A04                		move.w	d4,d5
(1) 1673/FFFFFFFFFFFF0AF4 : 4845                		swap	d5
(1) 1674/FFFFFFFFFFFF0AF6 : 0245 0001           		andi.w	#1,d5
(1) 1675/FFFFFFFFFFFF0AFA : E14D                		lsl.w	#8,d5
(1) 1676/FFFFFFFFFFFF0AFC : EB4D                		lsl.w	#5,d5
(1) 1677/FFFFFFFFFFFF0AFE : 6024                		bra.s	.golyr
(1) 1678/FFFFFFFFFFFF0B00 :                     .plawnd:
(1) 1679/FFFFFFFFFFFF0B00 : 1A38 BDF8           		move.b	(RAM_VdpRegs+2).w,d5	; FG
(1) 1680/FFFFFFFFFFFF0B04 : 0806 0001           		btst	#1,d6
(1) 1681/FFFFFFFFFFFF0B08 : 6704                		beq.s	.nowd
(1) 1682/FFFFFFFFFFFF0B0A : 1A38 BDF9           		move.b	(RAM_VdpRegs+3).w,d5	; WINDOW
(1) 1683/FFFFFFFFFFFF0B0E :                     .nowd:
(1) 1684/FFFFFFFFFFFF0B0E : 3805                		move.w	d5,d4
(1) 1685/FFFFFFFFFFFF0B10 : E84C                		lsr.w	#4,d4
(1) 1686/FFFFFFFFFFFF0B12 : 0244 0003           		andi.w	#%11,d4
(1) 1687/FFFFFFFFFFFF0B16 : 4845                		swap	d5
(1) 1688/FFFFFFFFFFFF0B18 : 3A04                		move.w	d4,d5
(1) 1689/FFFFFFFFFFFF0B1A : 4845                		swap	d5
(1) 1690/FFFFFFFFFFFF0B1C : 0245 000E           		andi.w	#%00001110,d5
(1) 1691/FFFFFFFFFFFF0B20 : E14D                		lsl.w	#8,d5
(1) 1692/FFFFFFFFFFFF0B22 : E54D                		lsl.w	#2,d5
(1) 1693/FFFFFFFFFFFF0B24 :                     .golyr:
(1) 1694/FFFFFFFFFFFF0B24 : 0045 4000           		ori.w	#$4000,d5
(1) 1695/FFFFFFFFFFFF0B28 : 3800                		move.w	d0,d4			; Y start pos
(1) 1696/FFFFFFFFFFFF0B2A : 0244 00FF           		andi.w	#$FF,d4			; Y only
(1) 1697/FFFFFFFFFFFF0B2E : ED4C                		lsl.w	#6,d4
(1) 1698/FFFFFFFFFFFF0B30 : 1C38 BE06           		move.b	(RAM_VdpRegs+$10).w,d6
(1) 1699/FFFFFFFFFFFF0B34 : 0246 0003           		andi.w	#%11,d6
(1) 1700/FFFFFFFFFFFF0B38 : 670A                		beq.s	.thissz
(1) 1701/FFFFFFFFFFFF0B3A : D844                		add.w	d4,d4			; H64
(1) 1702/FFFFFFFFFFFF0B3C : 0246 0002           		andi.w	#%10,d6
(1) 1703/FFFFFFFFFFFF0B40 : 6702                		beq.s	.thissz
(1) 1704/FFFFFFFFFFFF0B42 : D844                		add.w	d4,d4			; H128
(1) 1705/FFFFFFFFFFFF0B44 :                     .thissz:
(1) 1706/FFFFFFFFFFFF0B44 : DA44                		add.w	d4,d5
(1) 1707/FFFFFFFFFFFF0B46 : 3800                		move.w	d0,d4
(1) 1708/FFFFFFFFFFFF0B48 : 0244 FF00           		andi.w	#$FF00,d4		; X only
(1) 1709/FFFFFFFFFFFF0B4C : EE4C                		lsr.w	#7,d4
(1) 1710/FFFFFFFFFFFF0B4E : DA44                		add.w	d4,d5			; X add
(1) 1711/FFFFFFFFFFFF0B50 : 4845                		swap	d5
(1) 1712/FFFFFFFFFFFF0B52 : 7C00                		moveq	#0,d6
(1) 1713/FFFFFFFFFFFF0B54 : 3C3C 0040           		move.w	#$40,d6			; Set jump size
(1) 1714/FFFFFFFFFFFF0B58 : 1838 BE06           		move.b	(RAM_VdpRegs+$10).w,d4
(1) 1715/FFFFFFFFFFFF0B5C : 0244 0003           		andi.w	#%11,d4
(1) 1716/FFFFFFFFFFFF0B60 : 670A                		beq.s	.thisszj
(1) 1717/FFFFFFFFFFFF0B62 : DC46                		add.w	d6,d6			; H64
(1) 1718/FFFFFFFFFFFF0B64 : 0244 0002           		andi.w	#%10,d4
(1) 1719/FFFFFFFFFFFF0B68 : 6702                		beq.s	.thisszj
(1) 1720/FFFFFFFFFFFF0B6A : DC46                		add.w	d6,d6			; H128
(1) 1721/FFFFFFFFFFFF0B6C :                     .thisszj:
(1) 1722/FFFFFFFFFFFF0B6C : 4846                		swap	d6
(1) 1723/FFFFFFFFFFFF0B6E : 4E75                		rts
(1) 1724/FFFFFFFFFFFF0B70 :                     
(1) 1725/FFFFFFFFFFFF0B70 :                     ; ====================================================================
(1) 1726/FFFFFFFFFFFF0B70 :                     ; ----------------------------------------------------------------
(1) 1727/FFFFFFFFFFFF0B70 :                     ; Objects system
(1) 1728/FFFFFFFFFFFF0B70 :                     ; ----------------------------------------------------------------
(1) 1729/FFFFFFFFFFFF0B70 :                     
(1) 1730/FFFFFFFFFFFF0B70 :                     ; --------------------------------------------------------
(1) 1731/FFFFFFFFFFFF0B70 :                     ; Init objects system
(1) 1732/FFFFFFFFFFFF0B70 :                     ; --------------------------------------------------------
(1) 1733/FFFFFFFFFFFF0B70 :                     
(1) 1734/FFFFFFFFFFFF0B70 :                     Objects_Clear:
(1) 1735/FFFFFFFFFFFF0B70 : 4DF8 B294           		lea	(RAM_Objects).w,a6
(1) 1736/FFFFFFFFFFFF0B74 : 3E3C 098F           		move.w	#(sizeof_mdobj*MAX_MDOBJ)-1,d7
(1) 1737/FFFFFFFFFFFF0B78 :                     .clr:
(1) 1738/FFFFFFFFFFFF0B78 : 421E                		clr.b	(a6)+
(1) 1739/FFFFFFFFFFFF0B7A : 51CF FFFC           		dbf	d7,.clr
(1) 1740/FFFFFFFFFFFF0B7E : 4DF8 BC24           		lea	(RAM_ObjDispList).w,a6
(1) 1741/FFFFFFFFFFFF0B82 : 3E3C 0017           		move.w	#MAX_MDOBJ-1,d7
(1) 1742/FFFFFFFFFFFF0B86 :                     .clr_d:
(1) 1743/FFFFFFFFFFFF0B86 : 425E                		clr.w	(a6)+
(1) 1744/FFFFFFFFFFFF0B88 : 51CF FFFC           		dbf	d7,.clr_d
(1) 1745/FFFFFFFFFFFF0B8C : 31FC 0001 BDDA      		move.w	#1,(RAM_SprLinkNum).w
(1) 1746/FFFFFFFFFFFF0B92 : 4278 BDD8           		clr.w	(RAM_SprDrwCntr).w
(1) 1747/FFFFFFFFFFFF0B96 : 4E75                		rts
(1) 1748/FFFFFFFFFFFF0B98 :                     
(1) 1749/FFFFFFFFFFFF0B98 :                     ; --------------------------------------------------------
(1) 1750/FFFFFFFFFFFF0B98 :                     ; Process objects
(1) 1751/FFFFFFFFFFFF0B98 :                     ; --------------------------------------------------------
(1) 1752/FFFFFFFFFFFF0B98 :                     
(1) 1753/FFFFFFFFFFFF0B98 :                     Objects_Run:
(1) 1754/FFFFFFFFFFFF0B98 : 4DF8 B294           		lea	(RAM_Objects).w,a6
(1) 1755/FFFFFFFFFFFF0B9C : 3E3C 0017           		move.w	#MAX_MDOBJ-1,d7
(1) 1756/FFFFFFFFFFFF0BA0 :                     .next_one:
(1) 1757/FFFFFFFFFFFF0BA0 : 2C16                		move.l	obj_code(a6),d6
(1) 1758/FFFFFFFFFFFF0BA2 : 6708                		beq.s	.no_code	; Free slot
(1) 1759/FFFFFFFFFFFF0BA4 : 2F07                		move.l	d7,-(sp)
(1) 1760/FFFFFFFFFFFF0BA6 : 2A46                		move.l	d6,a5
(1) 1761/FFFFFFFFFFFF0BA8 : 4E95                		jsr	(a5)
(1) 1762/FFFFFFFFFFFF0BAA : 2E1F                		move.l	(sp)+,d7
(1) 1763/FFFFFFFFFFFF0BAC :                     .no_code:
(1) 1764/FFFFFFFFFFFF0BAC : DCFC 0066           		adda	#sizeof_mdobj,a6
(1) 1765/FFFFFFFFFFFF0BB0 : 51CF FFEE           		dbf	d7,.next_one
(1) 1766/FFFFFFFFFFFF0BB4 : 4E75                		rts
(1) 1767/FFFFFFFFFFFF0BB6 :                     
(1) 1768/FFFFFFFFFFFF0BB6 :                     ; --------------------------------------------------------
(1) 1769/FFFFFFFFFFFF0BB6 :                     ; Objects_Set
(1) 1770/FFFFFFFFFFFF0BB6 :                     ;
(1) 1771/FFFFFFFFFFFF0BB6 :                     ; Input:
(1) 1772/FFFFFFFFFFFF0BB6 :                     ; d0 - Object code location (0 - delete)
(1) 1773/FFFFFFFFFFFF0BB6 :                     ; d1 - Object slot
(1) 1774/FFFFFFFFFFFF0BB6 :                     ;
(1) 1775/FFFFFFFFFFFF0BB6 :                     ; Uses:
(1) 1776/FFFFFFFFFFFF0BB6 :                     ; d7,a5-a6
(1) 1777/FFFFFFFFFFFF0BB6 :                     ; --------------------------------------------------------
(1) 1778/FFFFFFFFFFFF0BB6 :                     
(1) 1779/FFFFFFFFFFFF0BB6 :                     Objects_Set:
(1) 1780/FFFFFFFFFFFF0BB6 : 4DF8 B294           		lea	(RAM_Objects).w,a6
(1) 1781/FFFFFFFFFFFF0BBA : 2A4E                		move.l	a6,a5
(1) 1782/FFFFFFFFFFFF0BBC : 3E3C 0065           		move.w	#sizeof_mdobj-1,d7
(1) 1783/FFFFFFFFFFFF0BC0 :                     .clr:
(1) 1784/FFFFFFFFFFFF0BC0 : 421D                		clr.b	(a5)+
(1) 1785/FFFFFFFFFFFF0BC2 : 51CF FFFC           		dbf	d7,.clr
(1) 1786/FFFFFFFFFFFF0BC6 : 3E01                		move.w	d1,d7
(1) 1787/FFFFFFFFFFFF0BC8 : CEFC 0066           		mulu.w	#sizeof_mdobj,d7
(1) 1788/FFFFFFFFFFFF0BCC : DCC7                		adda	d7,a6
(1) 1789/FFFFFFFFFFFF0BCE : 2C80                		move.l	d0,obj_code(a6)
(1) 1790/FFFFFFFFFFFF0BD0 : 4DF8 BC24           		lea	(RAM_ObjDispList).w,a6
(1) 1791/FFFFFFFFFFFF0BD4 : 3E01                		move.w	d1,d7
(1) 1792/FFFFFFFFFFFF0BD6 : DE47                		add.w	d7,d7
(1) 1793/FFFFFFFFFFFF0BD8 : 3DBC 0000 7000      		move.w	#0,(a6,d7.w)
(1) 1794/FFFFFFFFFFFF0BDE : 4E75                		rts
(1) 1795/FFFFFFFFFFFF0BE0 :                     
(1) 1796/FFFFFFFFFFFF0BE0 :                     ; --------------------------------------------------------
(1) 1797/FFFFFFFFFFFF0BE0 :                     ; Objects_Add
(1) 1798/FFFFFFFFFFFF0BE0 :                     ;
(1) 1799/FFFFFFFFFFFF0BE0 :                     ; Returns:
(1) 1800/FFFFFFFFFFFF0BE0 :                     ; d0 - -1 if ran out of Objects
(1) 1801/FFFFFFFFFFFF0BE0 :                     ; --------------------------------------------------------
(1) 1802/FFFFFFFFFFFF0BE0 :                     
(1) 1803/FFFFFFFFFFFF0BE0 :                     Objects_Add:
(1) 1804/FFFFFFFFFFFF0BE0 : 4DF8 B294           		lea	(RAM_Objects).w,a6
(1) 1805/FFFFFFFFFFFF0BE4 : 3E3C 0017           		move.w	#MAX_MDOBJ-1,d7
(1) 1806/FFFFFFFFFFFF0BE8 :                     .search:
(1) 1807/FFFFFFFFFFFF0BE8 : 2E16                		move.l	obj_code(a6),d7
(1) 1808/FFFFFFFFFFFF0BEA : 670C                		beq.s	.use_it
(1) 1809/FFFFFFFFFFFF0BEC : DCFC 0066           		adda	#sizeof_mdobj,a6
(1) 1810/FFFFFFFFFFFF0BF0 : 51CF FFF6           		dbf	d7,.search
(1) 1811/FFFFFFFFFFFF0BF4 : 70FF                		moveq	#-1,d0		; Return ran-out flag
(1) 1812/FFFFFFFFFFFF0BF6 : 4E75                		rts
(1) 1813/FFFFFFFFFFFF0BF8 :                     .use_it:
(1) 1814/FFFFFFFFFFFF0BF8 : 2A4E                		move.l	a6,a5
(1) 1815/FFFFFFFFFFFF0BFA : 3E3C 0065           		move.w	#sizeof_mdobj-1,d7
(1) 1816/FFFFFFFFFFFF0BFE :                     .clr:
(1) 1817/FFFFFFFFFFFF0BFE : 421D                		clr.b	(a5)+
(1) 1818/FFFFFFFFFFFF0C00 : 51CF FFFC           		dbf	d7,.clr
(1) 1819/FFFFFFFFFFFF0C04 : 2C80                		move.l	d0,obj_code(a6)
(1) 1820/FFFFFFFFFFFF0C06 : 4DF8 BC24           		lea	(RAM_ObjDispList).w,a6
(1) 1821/FFFFFFFFFFFF0C0A : 3E01                		move.w	d1,d7
(1) 1822/FFFFFFFFFFFF0C0C : DE47                		add.w	d7,d7
(1) 1823/FFFFFFFFFFFF0C0E : 3DBC 0000 7000      		move.w	#0,(a6,d7.w)
(1) 1824/FFFFFFFFFFFF0C14 : 4E75                		rts
(1) 1825/FFFFFFFFFFFF0C16 :                     
(1) 1826/FFFFFFFFFFFF0C16 :                     ; --------------------------------------------------------
(1) 1827/FFFFFFFFFFFF0C16 :                     ; Draw ALL Objects from display list
(1) 1828/FFFFFFFFFFFF0C16 :                     ;
(1) 1829/FFFFFFFFFFFF0C16 :                     ; Call this BEFORE VBlank.
(1) 1830/FFFFFFFFFFFF0C16 :                     ; --------------------------------------------------------
(1) 1831/FFFFFFFFFFFF0C16 :                     
(1) 1832/FFFFFFFFFFFF0C16 :                     Objects_Show:
(1) 1833/FFFFFFFFFFFF0C16 : 3C38 BDDA           		move.w	(RAM_SprLinkNum).w,d6		; d6 - Starting sprite link
(1) 1834/FFFFFFFFFFFF0C1A : 4DF8 A414           		lea	(RAM_Sprites),a6		; a6 - Genesis sprites
(1) 1835/FFFFFFFFFFFF0C1E : 3E06                		move.w	d6,d7
(1) 1836/FFFFFFFFFFFF0C20 : 5347                		subq.w	#1,d7
(1) 1837/FFFFFFFFFFFF0C22 : E74F                		lsl.w	#3,d7
(1) 1838/FFFFFFFFFFFF0C24 : DCC7                		adda	d7,a6
(1) 1839/FFFFFFFFFFFF0C26 :                     
(1) 1840/FFFFFFFFFFFF0C26 : 3E38 BDD8           		move.w	(RAM_SprDrwCntr),d7
(1) 1841/FFFFFFFFFFFF0C2A : 6732                		beq.s	.no_sprdrw
(1) 1842/FFFFFFFFFFFF0C2C : 4278 BDD8           		clr.w	(RAM_SprDrwCntr).w
(1) 1843/FFFFFFFFFFFF0C30 : 4BF8 A914           		lea	(RAM_SprDrwPz),a5
(1) 1844/FFFFFFFFFFFF0C34 : 9E7C 0001           		sub.w	#1,d7
(1) 1845/FFFFFFFFFFFF0C38 :                     .nexts:
(1) 1846/FFFFFFFFFFFF0C38 : BC7C 0050           		cmp.w	#80,d6
(1) 1847/FFFFFFFFFFFF0C3C : 6C20                		bge.s	.no_sprdrw
(1) 1848/FFFFFFFFFFFF0C3E : 301D                		move.w	(a5)+,d0
(1) 1849/FFFFFFFFFFFF0C40 : 321D                		move.w	(a5)+,d1	; custom
(1) 1850/FFFFFFFFFFFF0C42 : C27C 00FF           		and.w	#$FF,d1
(1) 1851/FFFFFFFFFFFF0C46 : E149                		lsl.w	#8,d1
(1) 1852/FFFFFFFFFFFF0C48 : 8246                		or.w	d6,d1
(1) 1853/FFFFFFFFFFFF0C4A : 341D                		move.w	(a5)+,d2
(1) 1854/FFFFFFFFFFFF0C4C : 361D                		move.w	(a5)+,d3
(1) 1855/FFFFFFFFFFFF0C4E : 3CC0                		move.w	d0,(a6)+
(1) 1856/FFFFFFFFFFFF0C50 : 3CC1                		move.w	d1,(a6)+
(1) 1857/FFFFFFFFFFFF0C52 : 3CC2                		move.w	d2,(a6)+
(1) 1858/FFFFFFFFFFFF0C54 : 3CC3                		move.w	d3,(a6)+
(1) 1859/FFFFFFFFFFFF0C56 : DC7C 0001           		add.w	#1,d6
(1) 1860/FFFFFFFFFFFF0C5A : 51CF FFDC           		dbf	d7,.nexts
(1) 1861/FFFFFFFFFFFF0C5E :                     .no_sprdrw:
(1) 1862/FFFFFFFFFFFF0C5E :                     
(1) 1863/FFFFFFFFFFFF0C5E :                     ; 		move.w	(RAM_SprLinkNum).w,d6	; d6 - Starting sprite link
(1) 1864/FFFFFFFFFFFF0C5E :                     ; 		lea	(RAM_Sprites).w,a6	; a6 - Genesis sprites
(1) 1865/FFFFFFFFFFFF0C5E : 4BF8 BC24           		lea	(RAM_ObjDispList).w,a5
(1) 1866/FFFFFFFFFFFF0C62 : 3E3C 0017           		move.w	#MAX_MDOBJ-1,d7
(1) 1867/FFFFFFFFFFFF0C66 :                     .next:
(1) 1868/FFFFFFFFFFFF0C66 : 3015                		move.w	(a5),d0
(1) 1869/FFFFFFFFFFFF0C68 : 6700 00AC           		beq	.finish
(1) 1870/FFFFFFFFFFFF0C6C : 4255                		clr.w	(a5)
(1) 1871/FFFFFFFFFFFF0C6E : 72FF                		moveq	#-1,d1			; Write the $FFFFxxxx part
(1) 1872/FFFFFFFFFFFF0C70 : 3200                		move.w	d0,d1			; get the half-address
(1) 1873/FFFFFFFFFFFF0C72 : 2841                		move.l	d1,a4			; set to a4
(1) 1874/FFFFFFFFFFFF0C74 : 206C 000C           		move.l	obj_map(a4),a0		; Read this object's map
(1) 1875/FFFFFFFFFFFF0C78 : 302C 001E           		move.w	obj_frame(a4),d0
(1) 1876/FFFFFFFFFFFF0C7C : 182C 0022           		move.b	obj_set(a4),d4
(1) 1877/FFFFFFFFFFFF0C80 : D040                		add.w	d0,d0
(1) 1878/FFFFFFFFFFFF0C82 : 3030 0000           		move.w	(a0,d0.w),d0
(1) 1879/FFFFFFFFFFFF0C86 : 41F0 0000           		lea	(a0,d0.w),a0
(1) 1880/FFFFFFFFFFFF0C8A : 3A18                		move.w	(a0)+,d5
(1) 1881/FFFFFFFFFFFF0C8C : 6700 0082           		beq	.mk_spr
(1) 1882/FFFFFFFFFFFF0C90 : 0445 0001           		subi.w	#1,d5
(1) 1883/FFFFFFFFFFFF0C94 :                     .mk_pz:
(1) 1884/FFFFFFFFFFFF0C94 : 0C46 0050           		cmpi.w	#80,d6
(1) 1885/FFFFFFFFFFFF0C98 : 6E00 009A           		bgt	.ran_out
(1) 1886/FFFFFFFFFFFF0C9C : 4845                		swap	d5
(1) 1887/FFFFFFFFFFFF0C9E : 4846                		swap	d6
(1) 1888/FFFFFFFFFFFF0CA0 : 1018                		move.b	(a0)+,d0		; d0 - Y pos
(1) 1889/FFFFFFFFFFFF0CA2 : 1218                		move.b	(a0)+,d1		; d1 - Size
(1) 1890/FFFFFFFFFFFF0CA4 : 3418                		move.w	(a0)+,d2		; d2 - VRAM main
(1) 1891/FFFFFFFFFFFF0CA6 : D0FC 0002           		adda	#2,a0			; TODO: VRAM double later
(1) 1892/FFFFFFFFFFFF0CAA : 3618                		move.w	(a0)+,d3		; d3 - X pos
(1) 1893/FFFFFFFFFFFF0CAC : 4880                		ext.w	d0
(1) 1894/FFFFFFFFFFFF0CAE :                     
(1) 1895/FFFFFFFFFFFF0CAE :                     	; X/Y flip checks
(1) 1896/FFFFFFFFFFFF0CAE : 3A2C 0014           		move.w	obj_vram(a4),d5
(1) 1897/FFFFFFFFFFFF0CB2 : 0804 0001           		btst	#bitobj_flipV,d4
(1) 1898/FFFFFFFFFFFF0CB6 : 6714                		beq.s	.vram_v
(1) 1899/FFFFFFFFFFFF0CB8 : 4440                		neg.w	d0
(1) 1900/FFFFFFFFFFFF0CBA : 0440 0008           		subi.w	#8,d0
(1) 1901/FFFFFFFFFFFF0CBE : 3C01                		move.w	d1,d6
(1) 1902/FFFFFFFFFFFF0CC0 : 0246 0003           		andi.w	#%0011,d6
(1) 1903/FFFFFFFFFFFF0CC4 : E74E                		lsl.w	#3,d6
(1) 1904/FFFFFFFFFFFF0CC6 : 9046                		sub.w	d6,d0
(1) 1905/FFFFFFFFFFFF0CC8 : 0045 1000           		ori.w	#$1000,d5
(1) 1906/FFFFFFFFFFFF0CCC :                     .vram_v:
(1) 1907/FFFFFFFFFFFF0CCC : 0804 0000           		btst	#bitobj_flipH,d4
(1) 1908/FFFFFFFFFFFF0CD0 : 6714                		beq.s	.vram_h
(1) 1909/FFFFFFFFFFFF0CD2 : 4443                		neg.w	d3
(1) 1910/FFFFFFFFFFFF0CD4 : 0443 0008           		subi.w	#8,d3
(1) 1911/FFFFFFFFFFFF0CD8 : 3C01                		move.w	d1,d6
(1) 1912/FFFFFFFFFFFF0CDA : 0246 000C           		andi.w	#%1100,d6
(1) 1913/FFFFFFFFFFFF0CDE : DC46                		add.w	d6,d6
(1) 1914/FFFFFFFFFFFF0CE0 : 9646                		sub.w	d6,d3
(1) 1915/FFFFFFFFFFFF0CE2 : 0045 0800           		ori.w	#$0800,d5
(1) 1916/FFFFFFFFFFFF0CE6 :                     .vram_h:
(1) 1917/FFFFFFFFFFFF0CE6 : D445                		add.w	d5,d2
(1) 1918/FFFFFFFFFFFF0CE8 : D06C 0008           		add.w	obj_y(a4),d0
(1) 1919/FFFFFFFFFFFF0CEC : D66C 0004           		add.w	obj_x(a4),d3
(1) 1920/FFFFFFFFFFFF0CF0 : D07C 0080           		add.w	#$80,d0
(1) 1921/FFFFFFFFFFFF0CF4 : D67C 0080           		add.w	#$80,d3
(1) 1922/FFFFFFFFFFFF0CF8 : 4846                		swap	d6
(1) 1923/FFFFFFFFFFFF0CFA : E149                		lsl.w	#8,d1			; Size + Link
(1) 1924/FFFFFFFFFFFF0CFC : 8246                		or.w	d6,d1
(1) 1925/FFFFFFFFFFFF0CFE : 3CC0                		move.w	d0,(a6)+
(1) 1926/FFFFFFFFFFFF0D00 : 3CC1                		move.w	d1,(a6)+
(1) 1927/FFFFFFFFFFFF0D02 : 3CC2                		move.w	d2,(a6)+
(1) 1928/FFFFFFFFFFFF0D04 : 3CC3                		move.w	d3,(a6)+
(1) 1929/FFFFFFFFFFFF0D06 : DC7C 0001           		add.w	#1,d6
(1) 1930/FFFFFFFFFFFF0D0A : 4845                		swap	d5
(1) 1931/FFFFFFFFFFFF0D0C : 51CD FF86           		dbf	d5,.mk_pz
(1) 1932/FFFFFFFFFFFF0D10 :                     .mk_spr:
(1) 1933/FFFFFFFFFFFF0D10 : 425D                		clr.w	(a5)+			; Clear request
(1) 1934/FFFFFFFFFFFF0D12 : 51CF FF52           		dbf	d7,.next
(1) 1935/FFFFFFFFFFFF0D16 :                     .finish:
(1) 1936/FFFFFFFFFFFF0D16 : 4DF8 A414           		lea	(RAM_Sprites).w,a6
(1) 1937/FFFFFFFFFFFF0D1A : 0C46 0001           		cmpi.w	#1,d6
(1) 1938/FFFFFFFFFFFF0D1E : 6714                		beq.s	.ran_out
(1) 1939/FFFFFFFFFFFF0D20 : 0C46 0050           		cmpi.w	#80,d6
(1) 1940/FFFFFFFFFFFF0D24 : 6E0E                		bgt.s	.ran_out
(1) 1941/FFFFFFFFFFFF0D26 : 3E06                		move.w	d6,d7
(1) 1942/FFFFFFFFFFFF0D28 : 0447 0001           		subi.w	#1,d7
(1) 1943/FFFFFFFFFFFF0D2C : E74F                		lsl.w	#3,d7
(1) 1944/FFFFFFFFFFFF0D2E : DCC7                		adda	d7,a6
(1) 1945/FFFFFFFFFFFF0D30 : 429E                		clr.l	(a6)+
(1) 1946/FFFFFFFFFFFF0D32 : 429E                		clr.l	(a6)+
(1) 1947/FFFFFFFFFFFF0D34 :                     .ran_out:
(1) 1948/FFFFFFFFFFFF0D34 : 31C6 BDDA           		move.w	d6,(RAM_SprLinkNum).w
(1) 1949/FFFFFFFFFFFF0D38 : 4E75                		rts
(1) 1950/FFFFFFFFFFFF0D3A :                     
(1) 1951/FFFFFFFFFFFF0D3A :                     ; --------------------------------------------------------
(1) 1952/FFFFFFFFFFFF0D3A :                     ; Objects system subroutines
(1) 1953/FFFFFFFFFFFF0D3A :                     ; --------------------------------------------------------
(1) 1954/FFFFFFFFFFFF0D3A :                     
(1) 1955/FFFFFFFFFFFF0D3A :                     ; --------------------------------------------------------
(1) 1956/FFFFFFFFFFFF0D3A :                     ; obj_Display
(1) 1957/FFFFFFFFFFFF0D3A :                     ;
(1) 1958/FFFFFFFFFFFF0D3A :                     ; Builds a sprite using map data specified in
(1) 1959/FFFFFFFFFFFF0D3A :                     ; obj_map(a6)
(1) 1960/FFFFFFFFFFFF0D3A :                     ;
(1) 1961/FFFFFFFFFFFF0D3A :                     ; *** GENESIS map ***
(1) 1962/FFFFFFFFFFFF0D3A :                     ; mapdata:
(1) 1963/FFFFFFFFFFFF0D3A :                     ;       dc.w .frame0-mapdata
(1) 1964/FFFFFFFFFFFF0D3A :                     ;       dc.w .frame1-mapdata
(1) 1965/FFFFFFFFFFFF0D3A :                     ;       ...
(1) 1966/FFFFFFFFFFFF0D3A :                     ; .frame0:
(1) 1967/FFFFFFFFFFFF0D3A :                     ;       dc.w numofpz
(1) 1968/FFFFFFFFFFFF0D3A :                     ;       dc.b YY,SS
(1) 1969/FFFFFFFFFFFF0D3A :                     ;       dc.w vram_normal
(1) 1970/FFFFFFFFFFFF0D3A :                     ;       dc.w vram_half
(1) 1971/FFFFFFFFFFFF0D3A :                     ;       dc.w XXXX
(1) 1972/FFFFFFFFFFFF0D3A :                     ;       ; next frame
(1) 1973/FFFFFFFFFFFF0D3A :                     ;       align 2
(1) 1974/FFFFFFFFFFFF0D3A :                     ;
(1) 1975/FFFFFFFFFFFF0D3A :                     ; *** 32X map ***
(1) 1976/FFFFFFFFFFFF0D3A :                     ; mapdata:
(1) 1977/FFFFFFFFFFFF0D3A :                     ; 	dc.l SH2_ADDR|TH ; Spritesheet location (TH opt.)
(1) 1978/FFFFFFFFFFFF0D3A :                     ; 	dc.w 512	 ; Spritesheet WIDTH
(1) 1979/FFFFFFFFFFFF0D3A :                     ; 	dc.b 64,72	 ; Frame width and height
(1) 1980/FFFFFFFFFFFF0D3A :                     ; 	dc.w $80	 ; Palette index
(1) 1981/FFFFFFFFFFFF0D3A :                     ;
(1) 1982/FFFFFFFFFFFF0D3A :                     ; obj_frame(a6) is in YYXX direction
(1) 1983/FFFFFFFFFFFF0D3A :                     ;
(1) 1984/FFFFFFFFFFFF0D3A :                     ; Input:
(1) 1985/FFFFFFFFFFFF0D3A :                     ; a6 - Object
(1) 1986/FFFFFFFFFFFF0D3A :                     ;
(1) 1987/FFFFFFFFFFFF0D3A :                     ; Uses:
(1) 1988/FFFFFFFFFFFF0D3A :                     ; a5,d4-d7
(1) 1989/FFFFFFFFFFFF0D3A :                     ; --------------------------------------------------------
(1) 1990/FFFFFFFFFFFF0D3A :                     
(1) 1991/FFFFFFFFFFFF0D3A :                     object_Display:
(1) 1992/FFFFFFFFFFFF0D3A : 4BF8 BC24           		lea	(RAM_ObjDispList).w,a5
(1) 1993/FFFFFFFFFFFF0D3E : 3E3C 0017           		move.w	#MAX_MDOBJ-1,d7
(1) 1994/FFFFFFFFFFFF0D42 :                     .srch:
(1) 1995/FFFFFFFFFFFF0D42 : 4A55                		tst.w	(a5)
(1) 1996/FFFFFFFFFFFF0D44 : 6708                		beq.s	.this_one
(1) 1997/FFFFFFFFFFFF0D46 : DAFC 0002           		adda	#2,a5
(1) 1998/FFFFFFFFFFFF0D4A : 51CF FFF6           		dbf	d7,.srch
(1) 1999/FFFFFFFFFFFF0D4E :                     .this_one:
(1) 2000/FFFFFFFFFFFF0D4E : 3A8E                		move.w	a6,(a5)
(1) 2001/FFFFFFFFFFFF0D50 : 4AAE 0010           		tst.l	obj_dma(a6)
(1) 2002/FFFFFFFFFFFF0D54 : 6750                		beq.s	.no_dma
(1) 2003/FFFFFFFFFFFF0D56 : 206E 0010           		move.l	obj_dma(a6),a0
(1) 2004/FFFFFFFFFFFF0D5A : 2618                		move.l	(a0)+,d3		; d3 - Art data
(1) 2005/FFFFFFFFFFFF0D5C : 382E 001E           		move.w	obj_frame(a6),d4
(1) 2006/FFFFFFFFFFFF0D60 : D844                 		add.w	d4,d4
(1) 2007/FFFFFFFFFFFF0D62 : 3830 4000           		move.w	(a0,d4.w),d4
(1) 2008/FFFFFFFFFFFF0D66 : D0C4                 		adda	d4,a0
(1) 2009/FFFFFFFFFFFF0D68 : 7800                 		moveq	#0,d4
(1) 2010/FFFFFFFFFFFF0D6A : 3818                 		move.w	(a0)+,d4
(1) 2011/FFFFFFFFFFFF0D6C : 6738                 		beq.s	.no_dma
(1) 2012/FFFFFFFFFFFF0D6E : 5344                 		subq.w	#1,d4
(1) 2013/FFFFFFFFFFFF0D70 : 322E 0014           		move.w	obj_vram(a6),d1
(1) 2014/FFFFFFFFFFFF0D74 : 0241 07FF           		andi.w	#$7FF,d1
(1) 2015/FFFFFFFFFFFF0D78 : EB49                		lsl.w	#5,d1
(1) 2016/FFFFFFFFFFFF0D7A : 2F0E                		move.l	a6,-(sp)		; SAVE a6
(1) 2017/FFFFFFFFFFFF0D7C :                     .next_pz:
(1) 2018/FFFFFFFFFFFF0D7C : 4844                		swap	d4
(1) 2019/FFFFFFFFFFFF0D7E : 3818                		move.w	(a0)+,d4
(1) 2020/FFFFFFFFFFFF0D80 : 3404                		move.w	d4,d2
(1) 2021/FFFFFFFFFFFF0D82 : EE4A                		lsr.w	#7,d2
(1) 2022/FFFFFFFFFFFF0D84 : 0242 01E0           		andi.w	#$1E0,d2
(1) 2023/FFFFFFFFFFFF0D88 : D47C 0020           		add.w	#$20,d2
(1) 2024/FFFFFFFFFFFF0D8C : 7000                		moveq	#0,d0
(1) 2025/FFFFFFFFFFFF0D8E : 3004                		move.w	d4,d0
(1) 2026/FFFFFFFFFFFF0D90 : 0240 0FFF           		andi.w	#$FFF,d0
(1) 2027/FFFFFFFFFFFF0D94 : EB48                		lsl.w	#5,d0
(1) 2028/FFFFFFFFFFFF0D96 : D083                		add.l	d3,d0
(1) 2029/FFFFFFFFFFFF0D98 : 6100 F7AE           		bsr	Video_DmaMkEntry	; kills a6
(1) 2030/FFFFFFFFFFFF0D9C : D242                		add.w	d2,d1
(1) 2031/FFFFFFFFFFFF0D9E : 4844                		swap	d4
(1) 2032/FFFFFFFFFFFF0DA0 : 51CC FFDA           		dbf	d4,.next_pz
(1) 2033/FFFFFFFFFFFF0DA4 : 2C5F                		move.l	(sp)+,a6
(1) 2034/FFFFFFFFFFFF0DA6 :                     .no_dma:
(1) 2035/FFFFFFFFFFFF0DA6 : 4E75                		rts
(1) 2036/FFFFFFFFFFFF0DA8 :                     
(1) 2037/FFFFFFFFFFFF0DA8 :                     ; --------------------------------------------------------
(1) 2038/FFFFFFFFFFFF0DA8 :                     ; object_MkSprPz
(1) 2039/FFFFFFFFFFFF0DA8 :                     ;
(1) 2040/FFFFFFFFFFFF0DA8 :                     ; Makes separate sprite pieces using
(1) 2041/FFFFFFFFFFFF0DA8 :                     ;
(1) 2042/FFFFFFFFFFFF0DA8 :                     ; Input:
(1) 2043/FFFFFFFFFFFF0DA8 :                     ; d0 - X pos
(1) 2044/FFFFFFFFFFFF0DA8 :                     ; d1 - Y pos
(1) 2045/FFFFFFFFFFFF0DA8 :                     ; d2 - VRAM
(1) 2046/FFFFFFFFFFFF0DA8 :                     ; d3 - Size
(1) 2047/FFFFFFFFFFFF0DA8 :                     :
(1) 2048/FFFFFFFFFFFF0DA8 :                     ; Uses:
(1) 2049/FFFFFFFFFFFF0DA8 :                     ; a5,d7
(1) 2050/FFFFFFFFFFFF0DA8 :                     ; --------------------------------------------------------
(1) 2051/FFFFFFFFFFFF0DA8 :                     
(1) 2052/FFFFFFFFFFFF0DA8 :                     object_MkSprPz:
(1) 2053/FFFFFFFFFFFF0DA8 : 3E38 BDD8           		move.w	(RAM_SprDrwCntr).w,d7
(1) 2054/FFFFFFFFFFFF0DAC : BE7C 0050           		cmp.w	#80,d7
(1) 2055/FFFFFFFFFFFF0DB0 : 6C22                		bge.s	.nope
(1) 2056/FFFFFFFFFFFF0DB2 : E74F                		lsl.w	#3,d7
(1) 2057/FFFFFFFFFFFF0DB4 : 4BF8 A914           		lea	(RAM_SprDrwPz).w,a5
(1) 2058/FFFFFFFFFFFF0DB8 : DAC7                		adda	d7,a5
(1) 2059/FFFFFFFFFFFF0DBA : D07C 0080           		add.w	#$80,d0
(1) 2060/FFFFFFFFFFFF0DBE : D27C 0080           		add.w	#$80,d1
(1) 2061/FFFFFFFFFFFF0DC2 : C67C 00FF           		and.w	#$FF,d3
(1) 2062/FFFFFFFFFFFF0DC6 :                     ; 		lsl.w	#8,d3
(1) 2063/FFFFFFFFFFFF0DC6 : 3AC1                		move.w	d1,(a5)+
(1) 2064/FFFFFFFFFFFF0DC8 : 3AC3                		move.w	d3,(a5)+
(1) 2065/FFFFFFFFFFFF0DCA : 3AC2                		move.w	d2,(a5)+
(1) 2066/FFFFFFFFFFFF0DCC : 3AC0                		move.w	d0,(a5)+
(1) 2067/FFFFFFFFFFFF0DCE : 0678 0001 BDD8      		add.w	#1,(RAM_SprDrwCntr).w
(1) 2068/FFFFFFFFFFFF0DD4 :                     .nope:
(1) 2069/FFFFFFFFFFFF0DD4 : 4E75                		rts
(1) 2070/FFFFFFFFFFFF0DD6 :                     
(1) 2071/FFFFFFFFFFFF0DD6 :                     ; --------------------------------------------------------
(1) 2072/FFFFFFFFFFFF0DD6 :                     ; object_Animate
(1) 2073/FFFFFFFFFFFF0DD6 :                     ;
(1) 2074/FFFFFFFFFFFF0DD6 :                     ; Animates the sprite
(1) 2075/FFFFFFFFFFFF0DD6 :                     ;
(1) 2076/FFFFFFFFFFFF0DD6 :                     ; Input
(1) 2077/FFFFFFFFFFFF0DD6 :                     ; a0.l - Animation data
(1) 2078/FFFFFFFFFFFF0DD6 :                     ;
(1) 2079/FFFFFFFFFFFF0DD6 :                     ; Uses:
(1) 2080/FFFFFFFFFFFF0DD6 :                     ; d2
(1) 2081/FFFFFFFFFFFF0DD6 :                     ; --------------------------------------------------------
(1) 2082/FFFFFFFFFFFF0DD6 :                     
(1) 2083/FFFFFFFFFFFF0DD6 :                     object_Animate:
(1) 2084/FFFFFFFFFFFF0DD6 : 7E00                		moveq	#0,d7
(1) 2085/FFFFFFFFFFFF0DD8 : 1E2E 001D            		move.b	obj_anim_id+1(a6),d7
(1) 2086/FFFFFFFFFFFF0DDC : BE2E 001C            		cmp.b	obj_anim_id(a6),d7
(1) 2087/FFFFFFFFFFFF0DE0 : 670E                 		beq.s	.sameThing
(1) 2088/FFFFFFFFFFFF0DE2 : 1D6E 001C 001D       		move.b	obj_anim_id(a6),obj_anim_id+1(a6)
(1) 2089/FFFFFFFFFFFF0DE8 : 426E 001A            		clr.w	obj_anim_indx(a6)
(1) 2090/FFFFFFFFFFFF0DEC : 422E 0020            		clr.b	obj_anim_spd(a6)
(1) 2091/FFFFFFFFFFFF0DF0 :                     .sameThing:
(1) 2092/FFFFFFFFFFFF0DF0 : 1E2E 001C            		move.b	obj_anim_id(a6),d7
(1) 2093/FFFFFFFFFFFF0DF4 : 0C07 00FF            		cmpi.b	#-1,d7
(1) 2094/FFFFFFFFFFFF0DF8 : 6748                 		beq.s	.return
(1) 2095/FFFFFFFFFFFF0DFA : DE47                 		add.w	d7,d7
(1) 2096/FFFFFFFFFFFF0DFC : 3E30 7000            		move.w	(a0,d7.w),d7
(1) 2097/FFFFFFFFFFFF0E00 : 41F0 7000            		lea	(a0,d7.w),a0
(1) 2098/FFFFFFFFFFFF0E04 : 3E18                 		move.w	(a0)+,d7
(1) 2099/FFFFFFFFFFFF0E06 : 0C47 FFFF            		cmpi.w	#-1,d7
(1) 2100/FFFFFFFFFFFF0E0A : 670C                 		beq.s	.keepspd
(1) 2101/FFFFFFFFFFFF0E0C : 042E 0001 0020       		subi.b	#1,obj_anim_spd(a6)
(1) 2102/FFFFFFFFFFFF0E12 : 6A2E                 		bpl.s	.return
(1) 2103/FFFFFFFFFFFF0E14 : 1D47 0020           		move.b	d7,obj_anim_spd(a6)
(1) 2104/FFFFFFFFFFFF0E18 :                     .keepspd:
(1) 2105/FFFFFFFFFFFF0E18 : 7C00                 		moveq	#0,d6
(1) 2106/FFFFFFFFFFFF0E1A : 3E2E 001A            		move.w	obj_anim_indx(a6),d7
(1) 2107/FFFFFFFFFFFF0E1E : DE47                 		add.w	d7,d7
(1) 2108/FFFFFFFFFFFF0E20 : 3C10                 		move.w	(a0),d6
(1) 2109/FFFFFFFFFFFF0E22 : D0C7                 		adda	d7,a0
(1) 2110/FFFFFFFFFFFF0E24 : 3A10                 		move.w	(a0),d5
(1) 2111/FFFFFFFFFFFF0E26 : 0C45 FFFF            		cmpi.w	#-1,d5
(1) 2112/FFFFFFFFFFFF0E2A : 6718                 		beq.s	.noAnim		; loop
(1) 2113/FFFFFFFFFFFF0E2C : 0C45 FFFE            		cmpi.w	#-2,d5
(1) 2114/FFFFFFFFFFFF0E30 : 672A                 		beq.s	.lastFrame	; finish
(1) 2115/FFFFFFFFFFFF0E32 : 0C45 FFFD            		cmpi.w	#-3,d5
(1) 2116/FFFFFFFFFFFF0E36 : 671A                 		beq.s	.goToFrame
(1) 2117/FFFFFFFFFFFF0E38 : 3D45 001E            		move.w	d5,obj_frame(a6)
(1) 2118/FFFFFFFFFFFF0E3C : 066E 0001 001A       		add.w	#1,obj_anim_indx(a6)
(1) 2119/FFFFFFFFFFFF0E42 :                     .return:
(1) 2120/FFFFFFFFFFFF0E42 : 4E75                 		rts
(1) 2121/FFFFFFFFFFFF0E44 :                     .noAnim:
(1) 2122/FFFFFFFFFFFF0E44 : 3D7C 0001 001A       		move.w	#1,obj_anim_indx(a6)
(1) 2123/FFFFFFFFFFFF0E4A : 3A06                 		move.w	d6,d5
(1) 2124/FFFFFFFFFFFF0E4C : 3D45 001E            		move.w	d5,obj_frame(a6)
(1) 2125/FFFFFFFFFFFF0E50 : 4E75                		rts
(1) 2126/FFFFFFFFFFFF0E52 :                     .goToFrame:
(1) 2127/FFFFFFFFFFFF0E52 : 426E 001A           		clr.w	obj_anim_indx(a6)
(1) 2128/FFFFFFFFFFFF0E56 : 3D68 0002 001A      		move.w	2(a0),obj_anim_indx(a6)
(1) 2129/FFFFFFFFFFFF0E5C :                     .lastFrame:
(1) 2130/FFFFFFFFFFFF0E5C : 422E 0020            		clr.b	obj_anim_spd(a6)
(1) 2131/FFFFFFFFFFFF0E60 : 4E75                		rts
(1) 2132/FFFFFFFFFFFF0E62 :                     
(1) 2133/FFFFFFFFFFFF0E62 :                     ; --------------------------------------------------------
(1) 2134/FFFFFFFFFFFF0E62 :                     ; object_AnimReset
(1) 2135/FFFFFFFFFFFF0E62 :                     ;
(1) 2136/FFFFFFFFFFFF0E62 :                     ; Call this BEFORE using animation
(1) 2137/FFFFFFFFFFFF0E62 :                     ;
(1) 2138/FFFFFFFFFFFF0E62 :                     ; Input:
(1) 2139/FFFFFFFFFFFF0E62 :                     ; a6 - Object
(1) 2140/FFFFFFFFFFFF0E62 :                     ;
(1) 2141/FFFFFFFFFFFF0E62 :                     ; Uses:
(1) 2142/FFFFFFFFFFFF0E62 :                     ; d7
(1) 2143/FFFFFFFFFFFF0E62 :                     ; --------------------------------------------------------
(1) 2144/FFFFFFFFFFFF0E62 :                     
(1) 2145/FFFFFFFFFFFF0E62 :                     object_AnimReset:
(1) 2146/FFFFFFFFFFFF0E62 : 426E 001A            		clr.w	obj_anim_indx(a6)
(1) 2147/FFFFFFFFFFFF0E66 : 422E 0020            		clr.b	obj_anim_spd(a6)
(1) 2148/FFFFFFFFFFFF0E6A : 1D7C 0000 001D      		move.b	#0,obj_anim_id+1(a6)
(1) 2149/FFFFFFFFFFFF0E70 : 4E75                		rts
(1) 2150/FFFFFFFFFFFF0E72 :                     
(1) 2151/FFFFFFFFFFFF0E72 :                     ; --------------------------------------------------------
(1) 2152/FFFFFFFFFFFF0E72 :                     ; object_Speed
(1) 2153/FFFFFFFFFFFF0E72 :                     ;
(1) 2154/FFFFFFFFFFFF0E72 :                     ; Moves the object using speed variables
(1) 2155/FFFFFFFFFFFF0E72 :                     ;
(1) 2156/FFFFFFFFFFFF0E72 :                     ; Input:
(1) 2157/FFFFFFFFFFFF0E72 :                     ; a6 - Object
(1) 2158/FFFFFFFFFFFF0E72 :                     ;
(1) 2159/FFFFFFFFFFFF0E72 :                     ; Uses:
(1) 2160/FFFFFFFFFFFF0E72 :                     ; d7
(1) 2161/FFFFFFFFFFFF0E72 :                     ; --------------------------------------------------------
(1) 2162/FFFFFFFFFFFF0E72 :                     
(1) 2163/FFFFFFFFFFFF0E72 :                     object_Speed:
(1) 2164/FFFFFFFFFFFF0E72 : 7E00                		moveq	#0,d7
(1) 2165/FFFFFFFFFFFF0E74 : 3E2E 0016           		move.w	obj_x_spd(a6),d7
(1) 2166/FFFFFFFFFFFF0E78 : 48C7                		ext.l	d7
(1) 2167/FFFFFFFFFFFF0E7A : E187                		asl.l	#8,d7
(1) 2168/FFFFFFFFFFFF0E7C : DFAE 0004           		add.l	d7,obj_x(a6)
(1) 2169/FFFFFFFFFFFF0E80 : 7E00                		moveq	#0,d7
(1) 2170/FFFFFFFFFFFF0E82 : 3E2E 0018           		move.w	obj_y_spd(a6),d7
(1) 2171/FFFFFFFFFFFF0E86 : 48C7                		ext.l	d7
(1) 2172/FFFFFFFFFFFF0E88 : E187                		asl.l	#8,d7
(1) 2173/FFFFFFFFFFFF0E8A : DFAE 0008           		add.l	d7,obj_y(a6)
(1) 2174/FFFFFFFFFFFF0E8E : 4E75                		rts
(1) 2175/FFFFFFFFFFFF0E90 :                     
(1) 2176/FFFFFFFFFFFF0E90 :                     ; ====================================================================
(1) 2177/FFFFFFFFFFFF0E90 :                     ; ----------------------------------------------------------------
(1) 2178/FFFFFFFFFFFF0E90 :                     ; 32X ONLY
(1) 2179/FFFFFFFFFFFF0E90 :                     ; ----------------------------------------------------------------
(1) 2180/FFFFFFFFFFFF0E90 :                     
(1) 2285/FFFFFFFFFFFF0E90 :                     
     203/FFFFFFFFFFFF0E90 :                     		include	"system/md/system.asm"
(1)    1/FFFFFFFFFFFF0E90 :                     ; ====================================================================
(1)    2/FFFFFFFFFFFF0E90 :                     ; ----------------------------------------------------------------
(1)    3/FFFFFFFFFFFF0E90 :                     ; Genesis system routines, and some SegaCD and 32X routines.
(1)    4/FFFFFFFFFFFF0E90 :                     ;
(1)    5/FFFFFFFFFFFF0E90 :                     ; * CAN BE RECYCLED FOR SEGA PICO, ONLY IGNORE Z80 ACCESS OR
(1)    6/FFFFFFFFFFFF0E90 :                     ; THE CONTROL ROUTINE **
(1)    7/FFFFFFFFFFFF0E90 :                     ; ----------------------------------------------------------------
(1)    8/FFFFFFFFFFFF0E90 :                     
(1)    9/FFFFFFFFFFFF0E90 :                     ; ====================================================================
(1)   10/FFFFFFFFFFFF0E90 :                     ; ----------------------------------------------------------------
(1)   11/FFFFFFFFFFFF0E90 :                     ; Settings
(1)   12/FFFFFFFFFFFF0E90 :                     ; ----------------------------------------------------------------
(1)   13/FFFFFFFFFFFF0E90 :                     
(1)   14/FFFFFFFFFFFF0E90 : =$400                MAX_SRAMSIZE	equ $400
(1)   15/FFFFFFFFFFFF0E90 :                     
(1)   16/FFFFFFFFFFFF0E90 :                     ; ====================================================================
(1)   17/FFFFFFFFFFFF0E90 :                     ; ----------------------------------------------------------------
(1)   18/FFFFFFFFFFFF0E90 :                     ; Variables
(1)   19/FFFFFFFFFFFF0E90 :                     ; ----------------------------------------------------------------
(1)   20/FFFFFFFFFFFF0E90 :                     
(1)   21/FFFFFFFFFFFF0E90 :                     ; Controller buffer data, MUST call System_Input on VBlank.
(1)   22/FFFFFFFFFFFF0E90 :                     ;
(1)   23/FFFFFFFFFFFF0E90 :                     ; Type/Revision byte:
(1)   24/FFFFFFFFFFFF0E90 :                     ;
(1)   25/FFFFFFFFFFFF0E90 :                     ; ID    |
(1)   26/FFFFFFFFFFFF0E90 :                     ; $0D   | $00 - Original 3 button
(1)   27/FFFFFFFFFFFF0E90 :                     ;       | $01 - 6 button version: XYZM
(1)   28/FFFFFFFFFFFF0E90 :                     
(1)   29/FFFFFFFFFFFF0E90 :                     ; Read WORD in +on_hold or +on_press
(1)   30/FFFFFFFFFFFF0E90 : =$1                  JoyUp		equ $0001
(1)   31/FFFFFFFFFFFF0E90 : =$2                  JoyDown		equ $0002
(1)   32/FFFFFFFFFFFF0E90 : =$4                  JoyLeft		equ $0004
(1)   33/FFFFFFFFFFFF0E90 : =$8                  JoyRight	equ $0008
(1)   34/FFFFFFFFFFFF0E90 : =$10                 JoyB		equ $0010
(1)   35/FFFFFFFFFFFF0E90 : =$20                 JoyC		equ $0020
(1)   36/FFFFFFFFFFFF0E90 : =$40                 JoyA		equ $0040
(1)   37/FFFFFFFFFFFF0E90 : =$80                 JoyStart	equ $0080
(1)   38/FFFFFFFFFFFF0E90 : =$100                JoyZ		equ $0100
(1)   39/FFFFFFFFFFFF0E90 : =$200                JoyY		equ $0200
(1)   40/FFFFFFFFFFFF0E90 : =$400                JoyX		equ $0400
(1)   41/FFFFFFFFFFFF0E90 : =$800                JoyMode		equ $0800
(1)   42/FFFFFFFFFFFF0E90 : =$0                  bitJoyUp	equ 0		; READ THESE AS A WORD
(1)   43/FFFFFFFFFFFF0E90 : =$1                  bitJoyDown	equ 1
(1)   44/FFFFFFFFFFFF0E90 : =$2                  bitJoyLeft	equ 2
(1)   45/FFFFFFFFFFFF0E90 : =$3                  bitJoyRight	equ 3
(1)   46/FFFFFFFFFFFF0E90 : =$4                  bitJoyB		equ 4
(1)   47/FFFFFFFFFFFF0E90 : =$5                  bitJoyC		equ 5
(1)   48/FFFFFFFFFFFF0E90 : =$6                  bitJoyA		equ 6
(1)   49/FFFFFFFFFFFF0E90 : =$7                  bitJoyStart	equ 7
(1)   50/FFFFFFFFFFFF0E90 : =$8                  bitJoyZ		equ 8
(1)   51/FFFFFFFFFFFF0E90 : =$9                  bitJoyY		equ 9
(1)   52/FFFFFFFFFFFF0E90 : =$A                  bitJoyX		equ 10
(1)   53/FFFFFFFFFFFF0E90 : =$B                  bitJoyMode	equ 11
(1)   54/FFFFFFFFFFFF0E90 :                     
(1)   55/FFFFFFFFFFFF0E90 :                     ; Mega Mouse
(1)   56/FFFFFFFFFFFF0E90 :                     ; Read WORD as +on_hold or +on_press
(1)   57/FFFFFFFFFFFF0E90 : =$1                  ClickR		equ $0001
(1)   58/FFFFFFFFFFFF0E90 : =$2                  ClickL		equ $0002
(1)   59/FFFFFFFFFFFF0E90 : =$4                  ClickM		equ $0004	; US MOUSE ONLY
(1)   60/FFFFFFFFFFFF0E90 : =$8                  ClickS		equ $0008	; (Untested)
(1)   61/FFFFFFFFFFFF0E90 : =$0                  bitClickL	equ 0
(1)   62/FFFFFFFFFFFF0E90 : =$1                  bitClickR	equ 1
(1)   63/FFFFFFFFFFFF0E90 : =$2                  bitClickM	equ 2
(1)   64/FFFFFFFFFFFF0E90 : =$3                  bitClickS	equ 3
(1)   65/FFFFFFFFFFFF0E90 :                     
(1)   66/FFFFFFFFFFFF0E90 :                     ; Controller_1 / Controller_2
(1)   67/FFFFFFFFFFFF0E90 : (MACRO)              		strct 0
(1)   67/FFFFFFFFFFFF0E90 : =$FFFFFFFFFFFF0E90   GLBL_LASTPC     set *
(1)   67/FFFFFFFFFFFFAC20 :                                     dephase
(1)   67/       0 :                                     phase 0
(1)   67/       0 : =$0                  GLBL_LASTORG    set *
(1)   68/       0 :                     pad_id		ds.b 1			; Controller ID
(1)   69/       1 :                     pad_ver		ds.b 1			; Controller type/revision
(1)   70/       2 :                     on_hold		ds.w 1			; User HOLD bits
(1)   71/       4 :                     on_press	ds.w 1			; User PRESSED bits
(1)   72/       6 :                     on_release	ds.w 1			; (RESERVED)
(1)   73/       8 :                     mouse_x		ds.w 1			; Mouse/Pen X position or speed
(1)   74/       A :                     mouse_y		ds.w 1			; Mouse/pen Y position or speed
(1)   75/       C :                     ext_3		ds.w 1
(1)   76/       E :                     ext_4		ds.w 1
(1)   77/      10 :                     sizeof_input	ds.l 0
(1)   78/      10 : (MACRO)              		endstrct
(1)   78/       0 :                                     org GLBL_LASTORG
(1)   78/FFFFFFFFFFFF0E90 :                                     phase GLBL_LASTPC
(1)   79/FFFFFFFFFFFF0E90 :                     
(1)   80/FFFFFFFFFFFF0E90 :                     ; ====================================================================
(1)   81/FFFFFFFFFFFF0E90 :                     ; ----------------------------------------------------------------
(1)   82/FFFFFFFFFFFF0E90 :                     ; RAM section
(1)   83/FFFFFFFFFFFF0E90 :                     ; ----------------------------------------------------------------
(1)   84/FFFFFFFFFFFF0E90 :                     
(1)   85/FFFFFFFFFFFF0E90 : (MACRO)              		strct RAM_MdSystem
(1)   85/FFFFFFFFFFFF0E90 : =$FFFFFFFFFFFF0E90   GLBL_LASTPC     set *
(1)   85/       0 :                                     dephase
(1)   85/FFFFFFFFFFFFC004 :                                     phase RAM_MDSYSTEM
(1)   85/FFFFFFFFFFFFC004 : =$FFFFFFFFFFFFC004   GLBL_LASTORG    set *
(1)   86/FFFFFFFFFFFFC004 :                     RAM_InputData	ds.b sizeof_input*4		; Input data section
(1)   87/FFFFFFFFFFFFC044 :                     RAM_SaveData	ds.b MAX_SRAMSIZE		; Read/Write of the SAVE data
(1)   88/FFFFFFFFFFFFC444 :                     RAM_SysRandVal	ds.l 1				; Random value
(1)   89/FFFFFFFFFFFFC448 :                     RAM_SysRandSeed	ds.l 1				; Randomness seed
(1)   90/FFFFFFFFFFFFC44C :                     RAM_MdMarsVInt	ds.w 3				; VBlank jump (JMP xxxx xxxx)
(1)   91/FFFFFFFFFFFFC452 :                     RAM_MdMarsHint	ds.w 3				; HBlank jump (JMP xxxx xxxx)
(1)   92/FFFFFFFFFFFFC458 :                     RAM_ScreenMode	ds.w 1
(1)   93/FFFFFFFFFFFFC45A :                     sizeof_mdsys	ds.l 0
(1)   94/FFFFFFFFFFFFC460 : (MACRO)              		endstrct
(1)   94/FFFFFFFFFFFFC004 :                                     org GLBL_LASTORG
(1)   94/FFFFFFFFFFFF0E90 :                                     phase GLBL_LASTPC
(1)   95/FFFFFFFFFFFF0E90 : (MACRO)              		erreport "MD SYSTEM RAM",sizeof_mdsys-RAM_MdSystem,MAX_MdSystem
(1)   96/FFFFFFFFFFFF0E90 :                     
(1)   97/FFFFFFFFFFFF0E90 :                     ; ====================================================================
(1)   98/FFFFFFFFFFFF0E90 :                     ; ----------------------------------------------------------------
(1)   99/FFFFFFFFFFFF0E90 :                     ; Alias labels
(1)  100/FFFFFFFFFFFF0E90 :                     ; ----------------------------------------------------------------
(1)  101/FFFFFFFFFFFF0E90 :                     
(1)  102/FFFFFFFFFFFF0E90 : =$FFFFFFFFFFFFC004   Controller_1	equ RAM_InputData
(1)  103/FFFFFFFFFFFF0E90 : =$FFFFFFFFFFFFC014   Controller_2	equ RAM_InputData+sizeof_input
(1)  104/FFFFFFFFFFFF0E90 :                     
(1)  105/FFFFFFFFFFFF0E90 :                     ; ====================================================================
(1)  106/FFFFFFFFFFFF0E90 :                     ; --------------------------------------------------------
(1)  107/FFFFFFFFFFFF0E90 :                     ; Init System
(1)  108/FFFFFFFFFFFF0E90 :                     ; 
(1)  109/FFFFFFFFFFFF0E90 :                     ; Uses:
(1)  110/FFFFFFFFFFFF0E90 :                     ; a0-a2,d0-d1
(1)  111/FFFFFFFFFFFF0E90 :                     ; --------------------------------------------------------
(1)  112/FFFFFFFFFFFF0E90 :                     
(1)  113/FFFFFFFFFFFF0E90 :                     System_Init:
(1)  114/FFFFFFFFFFFF0E90 : 007C 0700           		or.w	#$0700,sr
(1)  116/FFFFFFFFFFFF0E94 : 33FC 0100 00A1      		move.w	#$0100,(z80_bus).l	; Stop Z80
         FFFFFFFFFFFF0E9A : 1100             
(1)  117/FFFFFFFFFFFF0E9C :                     .wait:
(1)  118/FFFFFFFFFFFF0E9C : 0839 0000 00A1      		btst	#0,(z80_bus).l		; Wait for it
         FFFFFFFFFFFF0EA2 : 1100             
(1)  119/FFFFFFFFFFFF0EA4 : 66F6                		bne.s	.wait
(1)  120/FFFFFFFFFFFF0EA6 : 7040                		moveq	#%01000000,d0		; Init ports, TH=1
(1)  121/FFFFFFFFFFFF0EA8 : 13C0 00A1 0009      		move.b	d0,(sys_ctrl_1).l	; Controller 1
(1)  122/FFFFFFFFFFFF0EAE : 13C0 00A1 000B      		move.b	d0,(sys_ctrl_2).l	; Controller 2
(1)  123/FFFFFFFFFFFF0EB4 : 13C0 00A1 000D      		move.b	d0,(sys_ctrl_3).l	; Modem
(1)  124/FFFFFFFFFFFF0EBA : 33FC 0000 00A1      		move.w	#0,(z80_bus).l		; Enable Z80
         FFFFFFFFFFFF0EC0 : 1100             
(1)  126/FFFFFFFFFFFF0EC2 : 303C 4EF9           		move.w	#$4EF9,d0		; Set JMP opcode for the Hblank/VBlank jumps
(1)  127/FFFFFFFFFFFF0EC6 : 31C0 C44C            		move.w	d0,(RAM_MdMarsVInt).w
(1)  128/FFFFFFFFFFFF0ECA : 31C0 C452           		move.w	d0,(RAM_MdMarsHInt).w
(1)  129/FFFFFFFFFFFF0ECE : 203C FFFF 1334      		move.l	#VInt_Default,d0	; Set default ints
(1)  130/FFFFFFFFFFFF0ED4 : 223C FFFF 134A      		move.l	#Hint_Default,d1
(1)  131/FFFFFFFFFFFF0EDA : 6100 03A0           		bsr	System_SetInts
(1)  132/FFFFFFFFFFFF0EDE : 41F8 C004           		lea	(RAM_InputData),a0	; Clear input data buffer
(1)  133/FFFFFFFFFFFF0EE2 : 323C 0007           		move.w	#(sizeof_input/2)-1,d1
(1)  134/FFFFFFFFFFFF0EE6 : 7000                		moveq	#0,d0
(1)  135/FFFFFFFFFFFF0EE8 :                     .clrinput:
(1)  136/FFFFFFFFFFFF0EE8 : 30C0                		move.w	d0,(a0)+
(1)  137/FFFFFFFFFFFF0EEA : 51C9 FFFC           		dbf	d1,.clrinput
(1)  138/FFFFFFFFFFFF0EEE : 203C 5625 5769      		move.l	#$56255769,d0		; Set these random values
(1)  139/FFFFFFFFFFFF0EF4 : 223C 9511 6102      		move.l	#$95116102,d1
(1)  140/FFFFFFFFFFFF0EFA : 23C0 FFFF C444      		move.l	d0,(RAM_SysRandVal).l
(1)  141/FFFFFFFFFFFF0F00 : 23C1 FFFF C448      		move.l	d1,(RAM_SysRandSeed).l
(1)  143/FFFFFFFFFFFF0F06 : 6100 0444           		bsr	System_McdSubWait
(1)  145/FFFFFFFFFFFF0F0A : 027C F8FF           		andi.w	#$F8FF,sr
(1)  146/FFFFFFFFFFFF0F0E : 6000 037E           		bra	System_SramInit
(1)  147/FFFFFFFFFFFF0F12 :                     
(1)  148/FFFFFFFFFFFF0F12 :                     ; --------------------------------------------------------
(1)  149/FFFFFFFFFFFF0F12 :                     ; System_Render
(1)  150/FFFFFFFFFFFF0F12 :                     ;
(1)  151/FFFFFFFFFFFF0F12 :                     ; Call this on the loop your current screen.
(1)  152/FFFFFFFFFFFF0F12 :                     ; ** VDP DISPLAY MUST BE ON TO USE THIS **
(1)  153/FFFFFFFFFFFF0F12 :                     ;
(1)  154/FFFFFFFFFFFF0F12 :                     ; This will:
(1)  155/FFFFFFFFFFFF0F12 :                     ; - Update the sound driver for any changes that
(1)  156/FFFFFFFFFFFF0F12 :                     ;   need communication with 68K
(1)  157/FFFFFFFFFFFF0F12 :                     ; - Build the object sprites
(1)  158/FFFFFFFFFFFF0F12 :                     ; - 32X/CD32X:
(1)  159/FFFFFFFFFFFF0F12 :                     ;   Update the DREQ data
(1)  160/FFFFFFFFFFFF0F12 :                     ;
(1)  161/FFFFFFFFFFFF0F12 :                     ; On VBLANK:
(1)  162/FFFFFFFFFFFF0F12 :                     ; - Update the input data
(1)  163/FFFFFFFFFFFF0F12 :                     ; - Transfer the Genesis palette, sprites and scroll
(1)  164/FFFFFFFFFFFF0F12 :                     ;   data from from RAM to VDP
(1)  165/FFFFFFFFFFFF0F12 :                     ;   (32X: RV bit is not required.)
(1)  166/FFFFFFFFFFFF0F12 :                     ; - Process the DMA BLAST list (32X: Uses RV bit)
(1)  167/FFFFFFFFFFFF0F12 :                     ; --------------------------------------------------------
(1)  168/FFFFFFFFFFFF0F12 :                     
(1)  169/FFFFFFFFFFFF0F12 :                     System_Render:
(1)  170/FFFFFFFFFFFF0F12 : 1E38 BDF7           		move.b	(RAM_VdpRegs+1).w,d7
(1)  171/FFFFFFFFFFFF0F16 : 0807 0006           		btst	#bitDispEnbl,d7
(1)  172/FFFFFFFFFFFF0F1A : 673A                		beq.s	.forgot_disp		; <-- Failsafe
(1)  173/FFFFFFFFFFFF0F1C :                     .wait_lag:
(1)  174/FFFFFFFFFFFF0F1C : 6100 F154           		bsr	Sound_Update		; Syncronize/Update sound on lag
(1)  175/FFFFFFFFFFFF0F20 : 3E39 00C0 0004      		move.w	(vdp_ctrl).l,d7		; Got here during VBlank?
(1)  176/FFFFFFFFFFFF0F26 : 0807 0003           		btst	#bitVBlk,d7		; If yes, drop frame
(1)  177/FFFFFFFFFFFF0F2A : 66F0                		bne.s	.wait_lag
(1)  178/FFFFFFFFFFFF0F2C : 6100 F144           		bsr	Sound_Update
(1)  179/FFFFFFFFFFFF0F30 : 6100 FCE4           		bsr	Objects_Show		; Build sprite data from Objects
(1)  180/FFFFFFFFFFFF0F34 :                     .wait_in:
(1)  181/FFFFFFFFFFFF0F34 : 6100 F13C           		bsr	Sound_Update		; Syncronize/Update sound during Display
(1)  182/FFFFFFFFFFFF0F38 : 3E39 00C0 0004      		move.w	(vdp_ctrl).l,d7		; Wait until VBlank
(1)  183/FFFFFFFFFFFF0F3E : 0807 0003           		btst	#bitVBlk,d7
(1)  184/FFFFFFFFFFFF0F42 : 67F0                		beq.s	.wait_in
(1)  185/FFFFFFFFFFFF0F44 : 6122                		bsr	System_Input		; Read input data FIRST
(1)  186/FFFFFFFFFFFF0F46 : 6100 F8B6           		bsr	Video_Render		; Render visuals
(1)  187/FFFFFFFFFFFF0F4A : 6100 F126           		bsr	Sound_Update
(1)  188/FFFFFFFFFFFF0F4E : 52B8 BDD4           		addq.l	#1,(RAM_Framecount).w
(1)  192/FFFFFFFFFFFF0F52 : 6100 F11E           		bsr	Sound_Update
(1)  193/FFFFFFFFFFFF0F56 :                     .forgot_disp:
(1)  194/FFFFFFFFFFFF0F56 : 4E75                		rts
(1)  195/FFFFFFFFFFFF0F58 :                     
(1)  196/FFFFFFFFFFFF0F58 :                     ; --------------------------------------------------------
(1)  197/FFFFFFFFFFFF0F58 :                     ; System_DmaEnter_(from) and System_DmaEnter_(from)
(1)  198/FFFFFFFFFFFF0F58 :                     ; ROM or RAM
(1)  199/FFFFFFFFFFFF0F58 :                     ;
(1)  200/FFFFFFFFFFFF0F58 :                     ; Call to these labels BEFORE and AFTER doing
(1)  201/FFFFFFFFFFFF0F58 :                     ; DMA-to-VDP transers, these calls are NOT
(1)  202/FFFFFFFFFFFF0F58 :                     ; required for FILL or COPY
(1)  203/FFFFFFFFFFFF0F58 :                     ;
(1)  204/FFFFFFFFFFFF0F58 :                     ; This is where you put your Sound driver's Z80 stop
(1)  205/FFFFFFFFFFFF0F58 :                     ; or pause calls go here.
(1)  206/FFFFFFFFFFFF0F58 :                     ; --------------------------------------------------------
(1)  207/FFFFFFFFFFFF0F58 :                     
(1)  208/FFFFFFFFFFFF0F58 :                     System_DmaEnter_RAM:
(1)  209/FFFFFFFFFFFF0F58 : 6000 F1F0           		bra	gemaDmaPause
(1)  210/FFFFFFFFFFFF0F5C :                     System_DmaExit_RAM:
(1)  211/FFFFFFFFFFFF0F5C : 6000 F20E           		bra	gemaDmaResume
(1)  212/FFFFFFFFFFFF0F60 :                     
(1)  213/FFFFFFFFFFFF0F60 :                     ; --------------------------------------------------------
(1)  214/FFFFFFFFFFFF0F60 :                     
(1)  215/FFFFFFFFFFFF0F60 :                     System_DmaEnter_ROM:
(1)  216/FFFFFFFFFFFF0F60 : 6000 F224           		bra	gemaDmaPauseRom
(1)  217/FFFFFFFFFFFF0F64 :                     System_DmaExit_ROM:
(1)  218/FFFFFFFFFFFF0F64 : 6000 F242           		bra	gemaDmaResumeRom
(1)  219/FFFFFFFFFFFF0F68 :                     
(1)  220/FFFFFFFFFFFF0F68 :                     ; ====================================================================
(1)  221/FFFFFFFFFFFF0F68 :                     ; ----------------------------------------------------------------
(1)  222/FFFFFFFFFFFF0F68 :                     ; Subroutines
(1)  223/FFFFFFFFFFFF0F68 :                     ; ----------------------------------------------------------------
(1)  224/FFFFFFFFFFFF0F68 :                     
(1)  225/FFFFFFFFFFFF0F68 :                     ; --------------------------------------------------------
(1)  226/FFFFFFFFFFFF0F68 :                     ; System_Input
(1)  227/FFFFFFFFFFFF0F68 :                     ;
(1)  228/FFFFFFFFFFFF0F68 :                     ; Reads data from the Controller ports
(1)  229/FFFFFFFFFFFF0F68 :                     ; *** CALL THIS ON VBLANK ONLY ***
(1)  230/FFFFFFFFFFFF0F68 :                     ;
(1)  231/FFFFFFFFFFFF0F68 :                     ; Uses:
(1)  232/FFFFFFFFFFFF0F68 :                     ; d5-d7,a5-a6
(1)  233/FFFFFFFFFFFF0F68 :                     ; --------------------------------------------------------
(1)  234/FFFFFFFFFFFF0F68 :                     
(1)  235/FFFFFFFFFFFF0F68 :                     System_Input:
(1)  236/FFFFFFFFFFFF0F68 :                     
(1)  237/FFFFFFFFFFFF0F68 :                     	; ----------------------------------------
(1)  238/FFFFFFFFFFFF0F68 :                     	; PICO input is hard-coded to Controller_1
(1)  239/FFFFFFFFFFFF0F68 :                     	;
(1)  240/FFFFFFFFFFFF0F68 :                     	; on_hold/on_press:
(1)  241/FFFFFFFFFFFF0F68 :                     	; %P00BRLDU
(1)  242/FFFFFFFFFFFF0F68 :                     	; UDLR - Arrows
(1)  243/FFFFFFFFFFFF0F68 :                     	;    B - BIG button red
(1)  244/FFFFFFFFFFFF0F68 :                     	;    P - Pen press/click
(1)  245/FFFFFFFFFFFF0F68 :                     	;
(1)  246/FFFFFFFFFFFF0F68 :                     	; mouse_x/mouse_y:
(1)  247/FFFFFFFFFFFF0F68 :                     	; Pen X/Y position
(1)  248/FFFFFFFFFFFF0F68 :                     	; depen
(1)  249/FFFFFFFFFFFF0F68 :                     	; ----------------------------------------
(1)  296/FFFFFFFFFFFF0F68 :                     	; ----------------------------------------
(1)  297/FFFFFFFFFFFF0F68 :                     	; Normal controls
(1)  298/FFFFFFFFFFFF0F68 : 4DF8 C004           		lea	(RAM_InputData).w,a6	; a6 - Output
(1)  299/FFFFFFFFFFFF0F6C : 4BF9 00A1 0003      		lea	(sys_data_1),a5		; a5 - BASE Genesis Input regs area
(1)  300/FFFFFFFFFFFF0F72 : 6108                		bsr.s	.this_one
(1)  301/FFFFFFFFFFFF0F74 : DAFC 0002           		adda	#2,a5
(1)  302/FFFFFFFFFFFF0F78 : DCFC 0010           		adda	#sizeof_input,a6
(1)  303/FFFFFFFFFFFF0F7C :                     
(1)  304/FFFFFFFFFFFF0F7C :                     ; --------------------------------------------------------
(1)  305/FFFFFFFFFFFF0F7C :                     ; Read port
(1)  306/FFFFFFFFFFFF0F7C :                     ;
(1)  307/FFFFFFFFFFFF0F7C :                     ; a5 - Current port
(1)  308/FFFFFFFFFFFF0F7C :                     ; a6 - Output data
(1)  309/FFFFFFFFFFFF0F7C :                     ; --------------------------------------------------------
(1)  310/FFFFFFFFFFFF0F7C :                     
(1)  311/FFFFFFFFFFFF0F7C :                     .this_one:
(1)  312/FFFFFFFFFFFF0F7C : 6100 0166           		bsr	.pick_id
(1)  313/FFFFFFFFFFFF0F80 : 1C87                		move.b	d7,pad_id(a6)
(1)  314/FFFFFFFFFFFF0F82 : 0C47 000F           		cmpi.w	#$0F,d7
(1)  315/FFFFFFFFFFFF0F86 : 670E                		beq.s	.exit
(1)  316/FFFFFFFFFFFF0F88 : 0247 000F           		andi.w	#$0F,d7
(1)  317/FFFFFFFFFFFF0F8C : DE47                		add.w	d7,d7
(1)  318/FFFFFFFFFFFF0F8E : 3C3B 700C           		move.w	.list(pc,d7.w),d6
(1)  319/FFFFFFFFFFFF0F92 : 4EFB 6008           		jmp	.list(pc,d6.w)
(1)  320/FFFFFFFFFFFF0F96 :                     .exit:
(1)  321/FFFFFFFFFFFF0F96 : 422E 0001           		clr.b	pad_ver(a6)
(1)  322/FFFFFFFFFFFF0F9A : 4E75                		rts
(1)  323/FFFFFFFFFFFF0F9C :                     
(1)  324/FFFFFFFFFFFF0F9C :                     ; --------------------------------------------------------
(1)  325/FFFFFFFFFFFF0F9C :                     ; Grab ID
(1)  326/FFFFFFFFFFFF0F9C :                     ; --------------------------------------------------------
(1)  327/FFFFFFFFFFFF0F9C :                     
(1)  328/FFFFFFFFFFFF0F9C :                     .list:
(1)  329/FFFFFFFFFFFF0F9C : FFFA                		dc.w .exit-.list	; $00
(1)  330/FFFFFFFFFFFF0F9E : FFFA                		dc.w .exit-.list
(1)  331/FFFFFFFFFFFF0FA0 : FFFA                		dc.w .exit-.list
(1)  332/FFFFFFFFFFFF0FA2 : 0020                		dc.w .id_03-.list	; $03 - Mega mouse
(1)  333/FFFFFFFFFFFF0FA4 : FFFA                		dc.w .exit-.list	; $04
(1)  334/FFFFFFFFFFFF0FA6 : FFFA                		dc.w .exit-.list
(1)  335/FFFFFFFFFFFF0FA8 : FFFA                		dc.w .exit-.list
(1)  336/FFFFFFFFFFFF0FAA : FFFA                		dc.w .exit-.list
(1)  337/FFFFFFFFFFFF0FAC : FFFA                		dc.w .exit-.list	; $08
(1)  338/FFFFFFFFFFFF0FAE : FFFA                		dc.w .exit-.list
(1)  339/FFFFFFFFFFFF0FB0 : FFFA                		dc.w .exit-.list
(1)  340/FFFFFFFFFFFF0FB2 : FFFA                		dc.w .exit-.list
(1)  341/FFFFFFFFFFFF0FB4 : FFFA                		dc.w .exit-.list	; $0C
(1)  342/FFFFFFFFFFFF0FB6 : 00CA                		dc.w .id_0D-.list	; $0D - Genesis controller (3 or 6 button)
(1)  343/FFFFFFFFFFFF0FB8 : FFFA                		dc.w .exit-.list
(1)  344/FFFFFFFFFFFF0FBA : FFFA                		dc.w .exit-.list	; $0F - No controller OR Master System controller (2 Buttons: 1(B),2(C))
(1)  345/FFFFFFFFFFFF0FBC :                     
(1)  346/FFFFFFFFFFFF0FBC :                     ; --------------------------------------------------------
(1)  347/FFFFFFFFFFFF0FBC :                     ; ID $03
(1)  348/FFFFFFFFFFFF0FBC :                     ;
(1)  349/FFFFFFFFFFFF0FBC :                     ; Mega Mouse
(1)  350/FFFFFFFFFFFF0FBC :                     ; --------------------------------------------------------
(1)  351/FFFFFFFFFFFF0FBC :                     
(1)  352/FFFFFFFFFFFF0FBC :                     ; *** NOT TESTED ON HARDWARE ***
(1)  353/FFFFFFFFFFFF0FBC :                     .id_03:
(1)  354/FFFFFFFFFFFF0FBC : 1ABC 0020           		move.b	#$20,(a5)
(1)  355/FFFFFFFFFFFF0FC0 : 1B7C 0060 0006      		move.b	#$60,6(a5)
(1)  356/FFFFFFFFFFFF0FC6 : 0815 0004           		btst	#4,(a5)
(1)  357/FFFFFFFFFFFF0FCA : 6700 0094           		beq.w	.invalid
(1)  358/FFFFFFFFFFFF0FCE : 1ABC 0000           		move.b	#$00,(a5)	; $0F
(1)  359/FFFFFFFFFFFF0FD2 : 4E71                		nop
(1)  360/FFFFFFFFFFFF0FD4 : 4E71                		nop
(1)  361/FFFFFFFFFFFF0FD6 : 1ABC 0020           		move.b	#$20,(a5)	; $0F
(1)  362/FFFFFFFFFFFF0FDA : 4E71                		nop
(1)  363/FFFFFFFFFFFF0FDC : 4E71                		nop
(1)  364/FFFFFFFFFFFF0FDE : 1ABC 0000           		move.b	#$00,(a5)	; Yo | Xo | Ys | Xs
(1)  365/FFFFFFFFFFFF0FE2 : 4E71                		nop
(1)  366/FFFFFFFFFFFF0FE4 : 4E71                		nop
(1)  367/FFFFFFFFFFFF0FE6 : 1A15                		move.b	(a5),d5		; d5 - X/Y direction bits (Ys Xs)
(1)  368/FFFFFFFFFFFF0FE8 : 1ABC 0020           		move.b	#$20,(a5)	; C | M | R | L
(1)  369/FFFFFFFFFFFF0FEC : 4E71                		nop
(1)  370/FFFFFFFFFFFF0FEE : 4E71                		nop
(1)  371/FFFFFFFFFFFF0FF0 : 1E15                		move.b	(a5),d7
(1)  372/FFFFFFFFFFFF0FF2 : 0247 000F            		andi.w	#%1111,d7
(1)  373/FFFFFFFFFFFF0FF6 : 3C2E 0002           		move.w	on_hold(a6),d6
(1)  374/FFFFFFFFFFFF0FFA : BF46                		eor.w	d7,d6
(1)  375/FFFFFFFFFFFF0FFC : 3D47 0002           		move.w	d7,on_hold(a6)
(1)  376/FFFFFFFFFFFF1000 : CC47                		and.w	d7,d6
(1)  377/FFFFFFFFFFFF1002 : 3D46 0004           		move.w	d6,on_press(a6)
(1)  378/FFFFFFFFFFFF1006 : 1ABC 0000           		move.b	#$00,(a5)	; X7 | X6 | X5 | X4
(1)  379/FFFFFFFFFFFF100A : 4E71                		nop
(1)  380/FFFFFFFFFFFF100C : 4E71                		nop
(1)  381/FFFFFFFFFFFF100E : 1E15                		move.b	(a5),d7
(1)  382/FFFFFFFFFFFF1010 : 1ABC 0020           		move.b	#$20,(a5)	; X3 | X2 | X1 | X0
(1)  383/FFFFFFFFFFFF1014 : 0247 000F           		andi.w	#%1111,d7
(1)  384/FFFFFFFFFFFF1018 : E94F                		lsl.w	#4,d7
(1)  385/FFFFFFFFFFFF101A : 4E71                		nop
(1)  386/FFFFFFFFFFFF101C : 1C15                		move.b	(a5),d6
(1)  387/FFFFFFFFFFFF101E : 0246 000F           		andi.w	#%1111,d6
(1)  388/FFFFFFFFFFFF1022 : 8E46                		or.w	d6,d7
(1)  389/FFFFFFFFFFFF1024 : 0805 0000           		btst    #0,d5
(1)  390/FFFFFFFFFFFF1028 : 6704                		beq.s	.x_neg
(1)  391/FFFFFFFFFFFF102A : 4407                		neg.b	d7
(1)  392/FFFFFFFFFFFF102C : 4447                		neg.w	d7
(1)  393/FFFFFFFFFFFF102E :                     .x_neg:
(1)  394/FFFFFFFFFFFF102E : 3D47 0008           		move.w	d7,mouse_x(a6)
(1)  395/FFFFFFFFFFFF1032 : 1ABC 0000           		move.b	#$00,(a5)	; Y7 | Y6 | Y5 | Y4
(1)  396/FFFFFFFFFFFF1036 : 4E71                		nop
(1)  397/FFFFFFFFFFFF1038 : 4E71                		nop
(1)  398/FFFFFFFFFFFF103A : 1E15                		move.b	(a5),d7
(1)  399/FFFFFFFFFFFF103C : 1ABC 0020           		move.b	#$20,(a5)	; Y3 | Y2 | Y1 | Y0
(1)  400/FFFFFFFFFFFF1040 : 0247 000F           		andi.w	#%1111,d7
(1)  401/FFFFFFFFFFFF1044 : E94F                		lsl.w	#4,d7
(1)  402/FFFFFFFFFFFF1046 : 4E71                		nop
(1)  403/FFFFFFFFFFFF1048 : 1C15                		move.b	(a5),d6
(1)  404/FFFFFFFFFFFF104A : 0246 000F           		andi.w	#%1111,d6
(1)  405/FFFFFFFFFFFF104E : 8E46                		or.w	d6,d7
(1)  406/FFFFFFFFFFFF1050 : 0805 0001           		btst    #1,d5
(1)  407/FFFFFFFFFFFF1054 : 6704                		beq.s	.y_neg
(1)  408/FFFFFFFFFFFF1056 : 4407                		neg.b	d7
(1)  409/FFFFFFFFFFFF1058 : 4447                		neg.w	d7
(1)  410/FFFFFFFFFFFF105A :                     .y_neg:
(1)  411/FFFFFFFFFFFF105A : 4447                		neg.w	d7		; Reverse Y
(1)  412/FFFFFFFFFFFF105C : 3D47 000A           		move.w	d7,mouse_y(a6)
(1)  413/FFFFFFFFFFFF1060 :                     
(1)  414/FFFFFFFFFFFF1060 :                     .invalid:
(1)  415/FFFFFFFFFFFF1060 : 1ABC 0060           		move.b	#$60,(a5)
(1)  416/FFFFFFFFFFFF1064 : 4E75                		rts
(1)  417/FFFFFFFFFFFF1066 :                     
(1)  418/FFFFFFFFFFFF1066 :                     ; --------------------------------------------------------
(1)  419/FFFFFFFFFFFF1066 :                     ; ID $0D
(1)  420/FFFFFFFFFFFF1066 :                     ;
(1)  421/FFFFFFFFFFFF1066 :                     ; Normal controller: 3 button or 6 button.
(1)  422/FFFFFFFFFFFF1066 :                     ; --------------------------------------------------------
(1)  423/FFFFFFFFFFFF1066 :                     
(1)  424/FFFFFFFFFFFF1066 :                     .id_0D:
(1)  425/FFFFFFFFFFFF1066 : 1ABC 0040           		move.b	#$40,(a5)	; Show CB|RLDU
(1)  426/FFFFFFFFFFFF106A : 4E71                		nop
(1)  427/FFFFFFFFFFFF106C : 4E71                		nop
(1)  428/FFFFFFFFFFFF106E : 1A15                		move.b	(a5),d5
(1)  429/FFFFFFFFFFFF1070 : 0245 003F           		andi.w	#%00111111,d5
(1)  430/FFFFFFFFFFFF1074 : 1ABC 0000           		move.b	#$00,(a5)	; Show SA|RLDU
(1)  431/FFFFFFFFFFFF1078 : 4E71                		nop
(1)  432/FFFFFFFFFFFF107A : 4E71                		nop
(1)  433/FFFFFFFFFFFF107C : 1E15                		move.b	(a5),d7		; The following flips are for
(1)  434/FFFFFFFFFFFF107E : E54F                		lsl.w	#2,d7		; the 6pad's internal counter:
(1)  435/FFFFFFFFFFFF1080 : 0247 00C0           		andi.w	#%11000000,d7
(1)  436/FFFFFFFFFFFF1084 : 8E45                		or.w	d5,d7
(1)  437/FFFFFFFFFFFF1086 : 1ABC 0040           		move.b	#$40,(a5)	; Show CB|RLDU (2)
(1)  438/FFFFFFFFFFFF108A : 4647                		not.w	d7
(1)  439/FFFFFFFFFFFF108C : 1A2E 0003           		move.b	on_hold+1(a6),d5
(1)  440/FFFFFFFFFFFF1090 : BF05                		eor.b	d7,d5
(1)  441/FFFFFFFFFFFF1092 : 1ABC 0000           		move.b	#$00,(a5)	; Show SA|RLDU (3)
(1)  442/FFFFFFFFFFFF1096 : 1D47 0003           		move.b	d7,on_hold+1(a6)
(1)  443/FFFFFFFFFFFF109A : CA07                		and.b	d7,d5
(1)  444/FFFFFFFFFFFF109C : 1D45 0005           		move.b	d5,on_press+1(a6)
(1)  445/FFFFFFFFFFFF10A0 : 1ABC 0040           		move.b	#$40,(a5)	; 6 button responds (4)
(1)  446/FFFFFFFFFFFF10A4 : 4E71                		nop
(1)  447/FFFFFFFFFFFF10A6 : 4E71                		nop
(1)  448/FFFFFFFFFFFF10A8 : 1E15                		move.b	(a5),d7		; Grab ??|MXYZ
(1)  449/FFFFFFFFFFFF10AA : 1ABC 0000            		move.b	#$00,(a5)	; (5)
(1)  450/FFFFFFFFFFFF10AE : 4E71                  		nop
(1)  451/FFFFFFFFFFFF10B0 : 4E71                  		nop
(1)  452/FFFFFFFFFFFF10B2 : 1C15                 		move.b	(a5),d6		; Type: $03 old, $0F new
(1)  453/FFFFFFFFFFFF10B4 : 1ABC 0040            		move.b	#$40,(a5)	; (6)
(1)  454/FFFFFFFFFFFF10B8 : 4E71                 		nop
(1)  455/FFFFFFFFFFFF10BA : 4E71                 		nop
(1)  456/FFFFFFFFFFFF10BC : 0246 000F           		andi.w	#$F,d6
(1)  457/FFFFFFFFFFFF10C0 : E44E                		lsr.w	#2,d6
(1)  458/FFFFFFFFFFFF10C2 : 0246 0001           		andi.w	#1,d6
(1)  459/FFFFFFFFFFFF10C6 : 6716                		beq.s	.oldpad
(1)  460/FFFFFFFFFFFF10C8 : 4607                		not.b	d7
(1)  461/FFFFFFFFFFFF10CA : 0247 000F            		andi.w	#%1111,d7
(1)  462/FFFFFFFFFFFF10CE : 1A2E 0002           		move.b	on_hold(a6),d5
(1)  463/FFFFFFFFFFFF10D2 : BF05                		eor.b	d7,d5
(1)  464/FFFFFFFFFFFF10D4 : 1D47 0002           		move.b	d7,on_hold(a6)
(1)  465/FFFFFFFFFFFF10D8 : CA07                		and.b	d7,d5
(1)  466/FFFFFFFFFFFF10DA : 1D45 0004           		move.b	d5,on_press(a6)
(1)  467/FFFFFFFFFFFF10DE :                     .oldpad:
(1)  468/FFFFFFFFFFFF10DE : 1D46 0001           		move.b	d6,pad_ver(a6)
(1)  469/FFFFFFFFFFFF10E2 : 4E75                		rts
(1)  470/FFFFFFFFFFFF10E4 :                     
(1)  471/FFFFFFFFFFFF10E4 :                     ; --------------------------------------------------------
(1)  472/FFFFFFFFFFFF10E4 :                     ; Grab ID
(1)  473/FFFFFFFFFFFF10E4 :                     ; --------------------------------------------------------
(1)  474/FFFFFFFFFFFF10E4 :                     
(1)  475/FFFFFFFFFFFF10E4 :                     .pick_id:
(1)  476/FFFFFFFFFFFF10E4 : 7E00                		moveq	#0,d7
(1)  477/FFFFFFFFFFFF10E6 : 1ABC 0070           		move.b	#%01110000,(a5)		; TH=1,TR=1,TL=1
(1)  478/FFFFFFFFFFFF10EA : 4E71                		nop
(1)  479/FFFFFFFFFFFF10EC : 4E71                		nop
(1)  480/FFFFFFFFFFFF10EE : 610A                		bsr	.read
(1)  481/FFFFFFFFFFFF10F0 : 1ABC 0030           		move.b	#%00110000,(a5)		; TH=0,TR=1,TL=1
(1)  482/FFFFFFFFFFFF10F4 : 4E71                		nop
(1)  483/FFFFFFFFFFFF10F6 : 4E71                		nop
(1)  484/FFFFFFFFFFFF10F8 : DE47                		add.w	d7,d7
(1)  485/FFFFFFFFFFFF10FA :                     .read:
(1)  486/FFFFFFFFFFFF10FA : 1A15                		move.b	(a5),d5
(1)  487/FFFFFFFFFFFF10FC : 1C05                		move.b	d5,d6
(1)  488/FFFFFFFFFFFF10FE : 0206 000C           		andi.b	#%1100,d6
(1)  489/FFFFFFFFFFFF1102 : 6702                		beq.s	.step_1
(1)  490/FFFFFFFFFFFF1104 : 5247                		addq.w	#1,d7
(1)  491/FFFFFFFFFFFF1106 :                     .step_1:
(1)  492/FFFFFFFFFFFF1106 : DE47                		add.w	d7,d7
(1)  493/FFFFFFFFFFFF1108 : 1C05                		move.b	d5,d6
(1)  494/FFFFFFFFFFFF110A : 0246 0003           		andi.w	#%0011,d6
(1)  495/FFFFFFFFFFFF110E : 6702                		beq.s	.step_2
(1)  496/FFFFFFFFFFFF1110 : 5247                		addq.w	#1,d7
(1)  497/FFFFFFFFFFFF1112 :                     .step_2:
(1)  498/FFFFFFFFFFFF1112 : 4E75                		rts
(1)  500/FFFFFFFFFFFF1114 :                     
(1)  501/FFFFFFFFFFFF1114 :                     ; --------------------------------------------------------
(1)  502/FFFFFFFFFFFF1114 :                     ; System_Random
(1)  503/FFFFFFFFFFFF1114 :                     ;
(1)  504/FFFFFFFFFFFF1114 :                     ; Makes a random number.
(1)  505/FFFFFFFFFFFF1114 :                     ;
(1)  506/FFFFFFFFFFFF1114 :                     ; Input:
(1)  507/FFFFFFFFFFFF1114 :                     ; d0 | Seed
(1)  508/FFFFFFFFFFFF1114 :                     ;
(1)  509/FFFFFFFFFFFF1114 :                     ; Output:
(1)  510/FFFFFFFFFFFF1114 :                     ; d0 | LONG
(1)  511/FFFFFFFFFFFF1114 :                     ;
(1)  512/FFFFFFFFFFFF1114 :                     ; Uses:
(1)  513/FFFFFFFFFFFF1114 :                     ; d4-d5
(1)  514/FFFFFFFFFFFF1114 :                     ; --------------------------------------------------------
(1)  515/FFFFFFFFFFFF1114 :                     
(1)  516/FFFFFFFFFFFF1114 :                     System_Random:
(1)  517/FFFFFFFFFFFF1114 : 2F04                		move.l	d4,-(sp)
(1)  518/FFFFFFFFFFFF1116 : 2838 C448           		move.l	(RAM_SysRandSeed).w,d4
(1)  519/FFFFFFFFFFFF111A : 6606                		bne.s	.good_s
(1)  520/FFFFFFFFFFFF111C : 283C 23B5 1947      		move.l	#$23B51947,d4
(1)  521/FFFFFFFFFFFF1122 :                     .good_s:
(1)  522/FFFFFFFFFFFF1122 : 2004                		move.l	d4,d0
(1)  523/FFFFFFFFFFFF1124 : EB9C                		rol.l	#5,d4
(1)  524/FFFFFFFFFFFF1126 : D880                		add.l	d0,d4
(1)  525/FFFFFFFFFFFF1128 : E644                		asr.w	#3,d4
(1)  526/FFFFFFFFFFFF112A : D880                		add.l	d0,d4
(1)  527/FFFFFFFFFFFF112C : 3004                		move.w	d4,d0
(1)  528/FFFFFFFFFFFF112E : 4844                		swap	d4
(1)  529/FFFFFFFFFFFF1130 : D044                		add.w	d4,d0
(1)  530/FFFFFFFFFFFF1132 : 3800                		move.w	d0,d4
(1)  531/FFFFFFFFFFFF1134 : 4844                		swap	d4
(1)  532/FFFFFFFFFFFF1136 : 21C4 C448           		move.l	d4,(RAM_SysRandSeed).w
(1)  533/FFFFFFFFFFFF113A : 281F                		move.l	(sp)+,d4
(1)  534/FFFFFFFFFFFF113C : 4E75                		rts
(1)  535/FFFFFFFFFFFF113E :                     
(1)  536/FFFFFFFFFFFF113E :                     ; --------------------------------------------------------
(1)  537/FFFFFFFFFFFF113E :                     ; System_SineWave_Cos / System_SineWave
(1)  538/FFFFFFFFFFFF113E :                     ;
(1)  539/FFFFFFFFFFFF113E :                     ; Get sinewave value
(1)  540/FFFFFFFFFFFF113E :                     ;
(1)  541/FFFFFFFFFFFF113E :                     ; Input:
(1)  542/FFFFFFFFFFFF113E :                     ; d0 | WORD - Tan
(1)  543/FFFFFFFFFFFF113E :                     ; d1 | WORD - Multiply
(1)  544/FFFFFFFFFFFF113E :                     ;
(1)  545/FFFFFFFFFFFF113E :                     ; Output:
(1)  546/FFFFFFFFFFFF113E :                     ; d2 | LONG - Result (as 0000.0000)
(1)  547/FFFFFFFFFFFF113E :                     ; --------------------------------------------------------
(1)  548/FFFFFFFFFFFF113E :                     
(1)  549/FFFFFFFFFFFF113E :                     System_SineWave_Cos:
(1)  550/FFFFFFFFFFFF113E : 48A7 8000           		movem.w	d0,-(sp)
(1)  551/FFFFFFFFFFFF1142 : 7400                		moveq	#0,d2
(1)  552/FFFFFFFFFFFF1144 : 0600 0040           		addi.b	#$40,d0
(1)  553/FFFFFFFFFFFF1148 : 1400                		move.b	d0,d2
(1)  554/FFFFFFFFFFFF114A : E302                		asl.b	#1,d2
(1)  555/FFFFFFFFFFFF114C : 343B 202E           		move.w	MdSys_SineData(pc,d2.w),d2
(1)  556/FFFFFFFFFFFF1150 : C4C1                		mulu.w	d1,d2
(1)  557/FFFFFFFFFFFF1152 : 8000                		or.b	d0,d0
(1)  558/FFFFFFFFFFFF1154 : 6A02                		bpl.s	.dont_neg
(1)  559/FFFFFFFFFFFF1156 : 4482                		neg.l	d2
(1)  560/FFFFFFFFFFFF1158 :                     .dont_neg:
(1)  561/FFFFFFFFFFFF1158 : 4C9F 0001           		movem.w	(sp)+,d0
(1)  562/FFFFFFFFFFFF115C : 4E75                		rts
(1)  563/FFFFFFFFFFFF115E :                     
(1)  564/FFFFFFFFFFFF115E :                     System_SineWave:
(1)  565/FFFFFFFFFFFF115E : 48A7 8000           		movem.w	d0,-(sp)
(1)  566/FFFFFFFFFFFF1162 : 0240 007F           		andi.w	#$7F,d0
(1)  567/FFFFFFFFFFFF1166 : E340                		asl.w	#1,d0
(1)  568/FFFFFFFFFFFF1168 : 343B 0012           		move.w	MdSys_SineData(pc,d0.w),d2
(1)  569/FFFFFFFFFFFF116C : C4C1                		mulu.w	d1,d2
(1)  570/FFFFFFFFFFFF116E : 4C9F 0001           		movem.w	(sp)+,d0
(1)  571/FFFFFFFFFFFF1172 : 5182                		subq.l	#8,d2
(1)  572/FFFFFFFFFFFF1174 : 8000                		or.b	d0,d0
(1)  573/FFFFFFFFFFFF1176 : 6A02                		bpl.s	.dont_neg
(1)  574/FFFFFFFFFFFF1178 : 4482                		neg.l	d2
(1)  575/FFFFFFFFFFFF117A :                     .dont_neg:
(1)  576/FFFFFFFFFFFF117A : 4E75                		rts
(1)  577/FFFFFFFFFFFF117C :                     
(1)  578/FFFFFFFFFFFF117C : 0000 0006 000D      MdSys_SineData:	dc.w 0,	6, $D, $13, $19, $1F, $26, $2C,	$32, $38, $3E
         FFFFFFFFFFFF1182 : 0013 0019 001F 
         FFFFFFFFFFFF1188 : 0026 002C 0032 
         FFFFFFFFFFFF118E : 0038 003E          
(1)  579/FFFFFFFFFFFF1192 : 0044 004A 0050      		dc.w $44, $4A, $50, $56, $5C, $62, $68,	$6D, $73, $79
         FFFFFFFFFFFF1198 : 0056 005C 0062 
         FFFFFFFFFFFF119E : 0068 006D 0073 
         FFFFFFFFFFFF11A4 : 0079             
(1)  580/FFFFFFFFFFFF11A6 : 007E 0084 0089      		dc.w $7E, $84, $89, $8E, $93, $98, $9D,	$A2, $A7, $AC
         FFFFFFFFFFFF11AC : 008E 0093 0098 
         FFFFFFFFFFFF11B2 : 009D 00A2 00A7 
         FFFFFFFFFFFF11B8 : 00AC             
(1)  581/FFFFFFFFFFFF11BA : 00B1 00B5 00B9      		dc.w $B1, $B5, $B9, $BE, $C2, $C6, $CA,	$CE, $D1, $D5
         FFFFFFFFFFFF11C0 : 00BE 00C2 00C6 
         FFFFFFFFFFFF11C6 : 00CA 00CE 00D1 
         FFFFFFFFFFFF11CC : 00D5             
(1)  582/FFFFFFFFFFFF11CE : 00D8 00DC 00DF      		dc.w $D8, $DC, $DF, $E2, $E5, $E7, $EA,	$ED, $EF, $F1
         FFFFFFFFFFFF11D4 : 00E2 00E5 00E7 
         FFFFFFFFFFFF11DA : 00EA 00ED 00EF 
         FFFFFFFFFFFF11E0 : 00F1             
(1)  583/FFFFFFFFFFFF11E2 : 00F3 00F5 00F7      		dc.w $F3, $F5, $F7, $F8, $FA, $FB, $FC,	$FD, $FE, $FF
         FFFFFFFFFFFF11E8 : 00F8 00FA 00FB 
         FFFFFFFFFFFF11EE : 00FC 00FD 00FE 
         FFFFFFFFFFFF11F4 : 00FF             
(1)  584/FFFFFFFFFFFF11F6 : 00FF 0100 0100      		dc.w $FF, $100,	$100, $100, $100, $100,	$FF, $FF, $FE
         FFFFFFFFFFFF11FC : 0100 0100 0100 
         FFFFFFFFFFFF1202 : 00FF 00FF 00FE    
(1)  585/FFFFFFFFFFFF1208 : 00FD 00FC 00FB      		dc.w $FD, $FC, $FB, $FA, $F8, $F7, $F5,	$F3, $F1, $EF
         FFFFFFFFFFFF120E : 00FA 00F8 00F7 
         FFFFFFFFFFFF1214 : 00F5 00F3 00F1 
         FFFFFFFFFFFF121A : 00EF             
(1)  586/FFFFFFFFFFFF121C : 00ED 00EA 00E7      		dc.w $ED, $EA, $E7, $E5, $E2, $DF, $DC,	$D8, $D5, $D1
         FFFFFFFFFFFF1222 : 00E5 00E2 00DF 
         FFFFFFFFFFFF1228 : 00DC 00D8 00D5 
         FFFFFFFFFFFF122E : 00D1             
(1)  587/FFFFFFFFFFFF1230 : 00CE 00CA 00C6      		dc.w $CE, $CA, $C6, $C2, $BE, $B9, $B5,	$B1, $AC, $A7
         FFFFFFFFFFFF1236 : 00C2 00BE 00B9 
         FFFFFFFFFFFF123C : 00B5 00B1 00AC 
         FFFFFFFFFFFF1242 : 00A7             
(1)  588/FFFFFFFFFFFF1244 : 00A2 009D 0098      		dc.w $A2, $9D, $98, $93, $8E, $89, $84,	$7E, $79, $73
         FFFFFFFFFFFF124A : 0093 008E 0089 
         FFFFFFFFFFFF1250 : 0084 007E 0079 
         FFFFFFFFFFFF1256 : 0073             
(1)  589/FFFFFFFFFFFF1258 : 006D 0068 0062      		dc.w $6D, $68, $62, $5C, $56, $50, $4A,	$44, $3E, $38
         FFFFFFFFFFFF125E : 005C 0056 0050 
         FFFFFFFFFFFF1264 : 004A 0044 003E 
         FFFFFFFFFFFF126A : 0038             
(1)  590/FFFFFFFFFFFF126C : 0032 002C 0026      		dc.w $32, $2C, $26, $1F, $19, $13, $D, 6
         FFFFFFFFFFFF1272 : 001F 0019 0013 
         FFFFFFFFFFFF1278 : 000D 0006          
(1)  591/FFFFFFFFFFFF127C :                     
(1)  592/FFFFFFFFFFFF127C :                     ; --------------------------------------------------------
(1)  593/FFFFFFFFFFFF127C :                     ; System_SetInts
(1)  594/FFFFFFFFFFFF127C :                     ;
(1)  595/FFFFFFFFFFFF127C :                     ; Set new interrputs
(1)  596/FFFFFFFFFFFF127C :                     ;
(1)  597/FFFFFFFFFFFF127C :                     ; d0 | LONG - VBlank
(1)  598/FFFFFFFFFFFF127C :                     ; d1 | LONG - HBlank
(1)  599/FFFFFFFFFFFF127C :                     ;
(1)  600/FFFFFFFFFFFF127C :                     ; Uses:
(1)  601/FFFFFFFFFFFF127C :                     ; d4
(1)  602/FFFFFFFFFFFF127C :                     ;
(1)  603/FFFFFFFFFFFF127C :                     ; Notes:
(1)  604/FFFFFFFFFFFF127C :                     ; Writing 0 or a negative number will skip change
(1)  605/FFFFFFFFFFFF127C :                     ; to the interrupt pointer
(1)  606/FFFFFFFFFFFF127C :                     ; --------------------------------------------------------
(1)  607/FFFFFFFFFFFF127C :                     
(1)  608/FFFFFFFFFFFF127C :                     System_SetInts:
(1)  609/FFFFFFFFFFFF127C : 2800                		move.l	d0,d4
(1)  610/FFFFFFFFFFFF127E : 6704                		beq.s	.novint
(1)  612/FFFFFFFFFFFF1280 : 21C4 FD08           		move.l	d4,($FFFFFD06+2).w
(1)  616/FFFFFFFFFFFF1284 :                     .novint:
(1)  617/FFFFFFFFFFFF1284 : 2801                		move.l	d1,d4
(1)  618/FFFFFFFFFFFF1286 : 6704                		beq.s	.nohint
(1)  620/FFFFFFFFFFFF1288 : 21C4 FD0E           		move.l	d4,($FFFFFD0C+2).w
(1)  624/FFFFFFFFFFFF128C :                     .nohint:
(1)  625/FFFFFFFFFFFF128C : 4E75                		rts
(1)  626/FFFFFFFFFFFF128E :                     
(1)  627/FFFFFFFFFFFF128E :                     ; --------------------------------------------------------
(1)  628/FFFFFFFFFFFF128E :                     ; System_SramInit
(1)  629/FFFFFFFFFFFF128E :                     ;
(1)  630/FFFFFFFFFFFF128E :                     ; Init save data
(1)  631/FFFFFFFFFFFF128E :                     ;
(1)  632/FFFFFFFFFFFF128E :                     ; Uses:
(1)  633/FFFFFFFFFFFF128E :                     ; a4,d4-d5
(1)  634/FFFFFFFFFFFF128E :                     ; --------------------------------------------------------
(1)  635/FFFFFFFFFFFF128E :                     
(1)  636/FFFFFFFFFFFF128E :                     System_SramInit:
(1)  640/FFFFFFFFFFFF128E : 4E71                		nop			; TODO
(1)  657/FFFFFFFFFFFF1290 : 4E75                		rts
(1)  658/FFFFFFFFFFFF1292 :                     
(1)  659/FFFFFFFFFFFF1292 :                     ; --------------------------------------------------------
(1)  660/FFFFFFFFFFFF1292 :                     ; System_SramSave
(1)  661/FFFFFFFFFFFF1292 :                     ; --------------------------------------------------------
(1)  662/FFFFFFFFFFFF1292 :                     
(1)  663/FFFFFFFFFFFF1292 :                     System_SramSave:
(1)  667/FFFFFFFFFFFF1292 : 4E71                		nop
(1)  694/FFFFFFFFFFFF1294 : 4E75                		rts
(1)  695/FFFFFFFFFFFF1296 :                     
(1)  696/FFFFFFFFFFFF1296 :                     ; --------------------------------------------------------
(1)  697/FFFFFFFFFFFF1296 :                     ; System_SramLoad
(1)  698/FFFFFFFFFFFF1296 :                     ; --------------------------------------------------------
(1)  699/FFFFFFFFFFFF1296 :                     
(1)  700/FFFFFFFFFFFF1296 :                     System_SramLoad:
(1)  704/FFFFFFFFFFFF1296 : 4E71                		nop
(1)  731/FFFFFFFFFFFF1298 : 4E75                		rts
(1)  732/FFFFFFFFFFFF129A :                     
(1)  733/FFFFFFFFFFFF129A :                     ; ====================================================================
(1)  734/FFFFFFFFFFFF129A :                     ; ----------------------------------------------------------------
(1)  735/FFFFFFFFFFFF129A :                     ; Screen mode subroutines
(1)  736/FFFFFFFFFFFF129A :                     ; ----------------------------------------------------------------
(1)  737/FFFFFFFFFFFF129A :                     
(1)  738/FFFFFFFFFFFF129A :                     ; --------------------------------------------------------
(1)  739/FFFFFFFFFFFF129A :                     ; Initialize current screen mode
(1)  740/FFFFFFFFFFFF129A :                     ;
(1)  741/FFFFFFFFFFFF129A :                     ; MUST call this at the very start of your screen code.
(1)  742/FFFFFFFFFFFF129A :                     ; --------------------------------------------------------
(1)  743/FFFFFFFFFFFF129A :                     
(1)  744/FFFFFFFFFFFF129A :                     Mode_Init:
(1)  745/FFFFFFFFFFFF129A : 007C 0700           		ori.w	#$0700,sr			; Disable interrupts.
(1)  746/FFFFFFFFFFFF129E : 13FC 0004 FFFF      		move.b	#$04,(RAM_VdpRegs).l
         FFFFFFFFFFFF12A4 : BDF6             
(1)  747/FFFFFFFFFFFF12A6 : 13FC 0004 FFFF      		move.b	#$04,(RAM_VdpRegs+1).l
         FFFFFFFFFFFF12AC : BDF7             
(1)  748/FFFFFFFFFFFF12AE : 6100 EFF0           		bsr	Video_Update
(1)  749/FFFFFFFFFFFF12B2 : 6100 F040           		bsr	Video_Clear
(1)  750/FFFFFFFFFFFF12B6 : 6100 F8B8           		bsr	Objects_Clear
(1)  751/FFFFFFFFFFFF12BA : 49F8 1800           		lea	(MAX_ScrnBuff),a4
(1)  752/FFFFFFFFFFFF12BE : 3A3C 0BFF           		move.w	#(MAX_ScrnBuff/2)-1,d5
(1)  753/FFFFFFFFFFFF12C2 : 7800                		moveq	#0,d4
(1)  754/FFFFFFFFFFFF12C4 :                     .clr:
(1)  755/FFFFFFFFFFFF12C4 : 38C4                		move.w	d4,(a4)+
(1)  756/FFFFFFFFFFFF12C6 : 51CD FFFC           		dbf	d5,.clr
(1)  757/FFFFFFFFFFFF12CA : 4E75                		rts
(1)  758/FFFFFFFFFFFF12CC :                     
(1)  759/FFFFFFFFFFFF12CC :                     ; --------------------------------------------------------
(1)  760/FFFFFFFFFFFF12CC :                     ; Syncronized Fade-in/Fade-out for both VDP and SuperVDP
(1)  761/FFFFFFFFFFFF12CC :                     ; --------------------------------------------------------
(1)  762/FFFFFFFFFFFF12CC :                     
(1)  763/FFFFFFFFFFFF12CC :                     Mode_FadeIn:
(1)  764/FFFFFFFFFFFF12CC : 6100 F8CA           		bsr	Objects_Run
(1)  765/FFFFFFFFFFFF12D0 : 31FC 0001 BDE4      		move.w	#1,(RAM_FadeMdReq).w
(1)  766/FFFFFFFFFFFF12D6 : 31FC 0001 BDEC      		move.w	#1,(RAM_FadeMarsReq).w
(1)  767/FFFFFFFFFFFF12DC : 31FC 0001 BDE6      		move.w	#1,(RAM_FadeMdIncr).w
(1)  768/FFFFFFFFFFFF12E2 : 31FC 0002 BDEE      		move.w	#2,(RAM_FadeMarsIncr).w
(1)  769/FFFFFFFFFFFF12E8 : 31FC 0001 BDE8      		move.w	#1,(RAM_FadeMdDelay).w
(1)  770/FFFFFFFFFFFF12EE : 31FC 0000 BDF0      		move.w	#0,(RAM_FadeMarsDelay).w
(1)  771/FFFFFFFFFFFF12F4 :                     .loopw:
(1)  772/FFFFFFFFFFFF12F4 : 6100 FC1C           		bsr	System_Render
(1)  773/FFFFFFFFFFFF12F8 : 6100 F0D2           		bsr	Video_RunFade
(1)  774/FFFFFFFFFFFF12FC : 66F6                		bne.s	.loopw
(1)  775/FFFFFFFFFFFF12FE : 4E75                		rts
(1)  776/FFFFFFFFFFFF1300 :                     
(1)  777/FFFFFFFFFFFF1300 :                     Mode_FadeOut:
(1)  778/FFFFFFFFFFFF1300 : 6100 F896           		bsr	Objects_Run
(1)  779/FFFFFFFFFFFF1304 : 31FC 0002 BDE4      		move.w	#2,(RAM_FadeMdReq).w
(1)  780/FFFFFFFFFFFF130A : 31FC 0002 BDEC      		move.w	#2,(RAM_FadeMarsReq).w
(1)  781/FFFFFFFFFFFF1310 : 31FC 0001 BDE6      		move.w	#1,(RAM_FadeMdIncr).w
(1)  782/FFFFFFFFFFFF1316 : 31FC 0002 BDEE      		move.w	#2,(RAM_FadeMarsIncr).w
(1)  783/FFFFFFFFFFFF131C : 31FC 0001 BDE8      		move.w	#1,(RAM_FadeMdDelay).w
(1)  784/FFFFFFFFFFFF1322 : 31FC 0000 BDF0      		move.w	#0,(RAM_FadeMarsDelay).w
(1)  785/FFFFFFFFFFFF1328 :                     .loopw:
(1)  786/FFFFFFFFFFFF1328 : 6100 FBE8           		bsr	System_Render
(1)  787/FFFFFFFFFFFF132C : 6100 F09E           		bsr	Video_RunFade
(1)  788/FFFFFFFFFFFF1330 : 66F6                		bne.s	.loopw
(1)  789/FFFFFFFFFFFF1332 : 4E75                		rts
(1)  790/FFFFFFFFFFFF1334 :                     
(1)  791/FFFFFFFFFFFF1334 :                     ; ====================================================================
(1)  792/FFFFFFFFFFFF1334 :                     ; ----------------------------------------------------------------
(1)  793/FFFFFFFFFFFF1334 :                     ; Default interrupts
(1)  794/FFFFFFFFFFFF1334 :                     ; ----------------------------------------------------------------
(1)  795/FFFFFFFFFFFF1334 :                     
(1)  796/FFFFFFFFFFFF1334 :                     ; --------------------------------------------------------
(1)  797/FFFFFFFFFFFF1334 :                     ; VBlank
(1)  798/FFFFFFFFFFFF1334 :                     ; --------------------------------------------------------
(1)  799/FFFFFFFFFFFF1334 :                     
(1)  800/FFFFFFFFFFFF1334 :                     VInt_Default:
(1)  801/FFFFFFFFFFFF1334 : 48E7 FFFE           		movem.l	d0-a6,-(sp)
(1)  802/FFFFFFFFFFFF1338 : 6100 FC2E           		bsr	System_Input
(1)  803/FFFFFFFFFFFF133C : 06B8 0000 0001      		addi.l	#1,(RAM_FrameCount).w
         FFFFFFFFFFFF1342 : BDD4             
(1)  804/FFFFFFFFFFFF1344 : 4CDF 7FFF           		movem.l	(sp)+,d0-a6
(1)  805/FFFFFFFFFFFF1348 : 4E73                		rte
(1)  806/FFFFFFFFFFFF134A :                     
(1)  807/FFFFFFFFFFFF134A :                     ; --------------------------------------------------------
(1)  808/FFFFFFFFFFFF134A :                     ; HBlank
(1)  809/FFFFFFFFFFFF134A :                     ; --------------------------------------------------------
(1)  810/FFFFFFFFFFFF134A :                     
(1)  811/FFFFFFFFFFFF134A :                     HInt_Default:
(1)  812/FFFFFFFFFFFF134A : 4E73                		rte
(1)  813/FFFFFFFFFFFF134C :                     
(1)  814/FFFFFFFFFFFF134C :                     ; ====================================================================
(1)  815/FFFFFFFFFFFF134C :                     ; ----------------------------------------------------------------
(1)  816/FFFFFFFFFFFF134C :                     ; SEGA CD / CD32X ONLY
(1)  817/FFFFFFFFFFFF134C :                     ; ----------------------------------------------------------------
(1)  818/FFFFFFFFFFFF134C :                     
(1)  820/FFFFFFFFFFFF134C :                     
(1)  821/FFFFFFFFFFFF134C :                     ; --------------------------------------------------------
(1)  822/FFFFFFFFFFFF134C :                     ; System_McdSubWait
(1)  823/FFFFFFFFFFFF134C :                     ;
(1)  824/FFFFFFFFFFFF134C :                     ; Waits until Sub-CPU finishes.
(1)  825/FFFFFFFFFFFF134C :                     ;
(1)  826/FFFFFFFFFFFF134C :                     ; Uses:
(1)  827/FFFFFFFFFFFF134C :                     ; a6,d7
(1)  828/FFFFFFFFFFFF134C :                     ; --------------------------------------------------------
(1)  829/FFFFFFFFFFFF134C :                     
(1)  830/FFFFFFFFFFFF134C :                     System_McdSubWait:
(1)  831/FFFFFFFFFFFF134C : 4DF9 00A1 200E      		lea	(sysmcd_reg+mcd_comm_m),a6
(1)  832/FFFFFFFFFFFF1352 : 1E2E 0001           .wait_sub_o:	move.b	1(a6),d7
(1)  833/FFFFFFFFFFFF1356 : 6BFA                		bmi.s	.wait_sub_o
(1)  834/FFFFFFFFFFFF1358 : 4E75                		rts
(1)  835/FFFFFFFFFFFF135A :                     
(1)  836/FFFFFFFFFFFF135A :                     ; --------------------------------------------------------
(1)  837/FFFFFFFFFFFF135A :                     ; System_McdSubTask
(1)  838/FFFFFFFFFFFF135A :                     ;
(1)  839/FFFFFFFFFFFF135A :                     ; Request task to Sub-CPU
(1)  840/FFFFFFFFFFFF135A :                     ; ** Exits without waiting SUB to finish, call
(1)  841/FFFFFFFFFFFF135A :                     ; System_McdSubWait after this IF required **
(1)  842/FFFFFFFFFFFF135A :                     ;
(1)  843/FFFFFFFFFFFF135A :                     ; Input:
(1)  844/FFFFFFFFFFFF135A :                     ; d0.b - Task number
(1)  845/FFFFFFFFFFFF135A :                     ;
(1)  846/FFFFFFFFFFFF135A :                     ; Uses:
(1)  847/FFFFFFFFFFFF135A :                     ; d7/a6
(1)  848/FFFFFFFFFFFF135A :                     ; --------------------------------------------------------
(1)  849/FFFFFFFFFFFF135A :                     
(1)  850/FFFFFFFFFFFF135A :                     System_McdSubTask:
(1)  851/FFFFFFFFFFFF135A : 61F0                		bsr	System_McdSubWait
(1)  852/FFFFFFFFFFFF135C :                     ; 		lea	(sysmcd_reg+mcd_comm_m),a6
(1)  853/FFFFFFFFFFFF135C : 1E16                .wait_else:	move.b	(a6),d7
(1)  854/FFFFFFFFFFFF135E : 0247 00F0           		andi.w	#$F0,d7
(1)  855/FFFFFFFFFFFF1362 : 0C47 00F0           		cmpi.w	#$F0,d7			; Z80 got first?
(1)  856/FFFFFFFFFFFF1366 : 67F4                		beq.s	.wait_else
(1)  857/FFFFFFFFFFFF1368 : 1C80                		move.b	d0,(a6)			; Set this command
(1)  858/FFFFFFFFFFFF136A : 1E2E 0001           .wait_sub_i:	move.b	1(a6),d7		; Wait until SUB gets busy
(1)  859/FFFFFFFFFFFF136E : 6AFA                		bpl.s	.wait_sub_i
(1)  860/FFFFFFFFFFFF1370 : 1CBC 0000           		move.b	#$00,(a6)		; Clear value, SUB already got the ID
(1)  861/FFFFFFFFFFFF1374 : 4E75                		rts
(1)  862/FFFFFFFFFFFF1376 :                     
(1)  863/FFFFFFFFFFFF1376 :                     ; --------------------------------------------------------
(1)  864/FFFFFFFFFFFF1376 :                     ; System_McdTrnsfr_WRAM
(1)  865/FFFFFFFFFFFF1376 :                     ;
(1)  866/FFFFFFFFFFFF1376 :                     ; Read file from disc and sends it to WORD-RAM,
(1)  867/FFFFFFFFFFFF1376 :                     ; waits on finish.
(1)  868/FFFFFFFFFFFF1376 :                     ;
(1)  869/FFFFFFFFFFFF1376 :                     ; Input:
(1)  870/FFFFFFFFFFFF1376 :                     ; a0 - Filename string: "FILENAME.BIN",0
(1)  871/FFFFFFFFFFFF1376 :                     ; a1 - Output location
(1)  872/FFFFFFFFFFFF1376 :                     ;
(1)  873/FFFFFFFFFFFF1376 :                     ; Uses:
(1)  874/FFFFFFFFFFFF1376 :                     ; d7/a5-a6
(1)  875/FFFFFFFFFFFF1376 :                     ;
(1)  876/FFFFFFFFFFFF1376 :                     ; This calls Sub-Task $02
(1)  877/FFFFFFFFFFFF1376 :                     ; NEEDS WORD-RAM permission in 2M
(1)  878/FFFFFFFFFFFF1376 :                     ; --------------------------------------------------------
(1)  879/FFFFFFFFFFFF1376 :                     
(1)  880/FFFFFFFFFFFF1376 :                     System_McdTrnsfr_WRAM:
(1)  881/FFFFFFFFFFFF1376 : 4BF9 00A1 2010      		lea	(sysmcd_reg+mcd_dcomm_m),a5
(1)  882/FFFFFFFFFFFF137C : 3AD8                		move.w	(a0)+,(a5)+				; 0 copy filename
(1)  883/FFFFFFFFFFFF137E : 3AD8                		move.w	(a0)+,(a5)+				; 2
(1)  884/FFFFFFFFFFFF1380 : 3AD8                		move.w	(a0)+,(a5)+				; 4
(1)  885/FFFFFFFFFFFF1382 : 3AD8                		move.w	(a0)+,(a5)+				; 6
(1)  886/FFFFFFFFFFFF1384 : 3AD8                		move.w	(a0)+,(a5)+				; 8
(1)  887/FFFFFFFFFFFF1386 : 3AD8                		move.w	(a0)+,(a5)+				; 8
(1)  888/FFFFFFFFFFFF1388 : 3AFC 0000           		move.w	#0,(a5)+				; A <-- zero end
(1)  889/FFFFFFFFFFFF138C :                     ; 		move.w	d0,d1
(1)  890/FFFFFFFFFFFF138C : 1039 00A1 2003      		move.b	(sysmcd_reg+mcd_memory).l,d0		; Set WORDRAM permission to SUB
(1)  891/FFFFFFFFFFFF1392 : 08C0 0001           		bset	#1,d0
(1)  892/FFFFFFFFFFFF1396 : 13C0 00A1 2003      		move.b	d0,(sysmcd_reg+mcd_memory).l
(1)  893/FFFFFFFFFFFF139C : 303C 0002           		move.w	#$02,d0					; COMMAND $02
(1)  894/FFFFFFFFFFFF13A0 : 61B8                		bsr	System_McdSubTask
(1)  895/FFFFFFFFFFFF13A2 : 60A8                		bra	System_McdSubWait
(1)  896/FFFFFFFFFFFF13A4 :                     
(1)  897/FFFFFFFFFFFF13A4 :                     ; --------------------------------------------------------
(1)  898/FFFFFFFFFFFF13A4 :                     ; System_McdTrnsfr_RAM
(1)  899/FFFFFFFFFFFF13A4 :                     ;
(1)  900/FFFFFFFFFFFF13A4 :                     ; Read file from disc and transfer it's contents to a1,
(1)  901/FFFFFFFFFFFF13A4 :                     ; uses communication ports.
(1)  902/FFFFFFFFFFFF13A4 :                     ;
(1)  903/FFFFFFFFFFFF13A4 :                     ; Input:
(1)  904/FFFFFFFFFFFF13A4 :                     ; a0 - Filename string: "FILENAME.BIN",0
(1)  905/FFFFFFFFFFFF13A4 :                     ; a1 - Output location
(1)  906/FFFFFFFFFFFF13A4 :                     ; d0 - Size ($10* sizes only)
(1)  907/FFFFFFFFFFFF13A4 :                     ;
(1)  908/FFFFFFFFFFFF13A4 :                     ; Uses:
(1)  909/FFFFFFFFFFFF13A4 :                     ; d7,a0-a1,a5-a6
(1)  910/FFFFFFFFFFFF13A4 :                     ;
(1)  911/FFFFFFFFFFFF13A4 :                     ; This calls Sub-Task $01
(1)  912/FFFFFFFFFFFF13A4 :                     ; --------------------------------------------------------
(1)  913/FFFFFFFFFFFF13A4 :                     
(1)  914/FFFFFFFFFFFF13A4 :                     System_McdTrnsfr_RAM:
(1)  915/FFFFFFFFFFFF13A4 : 4BF9 00A1 2010      		lea	(sysmcd_reg+mcd_dcomm_m),a5
(1)  916/FFFFFFFFFFFF13AA : 3AD8                		move.w	(a0)+,(a5)+			; 0 copy filename
(1)  917/FFFFFFFFFFFF13AC : 3AD8                		move.w	(a0)+,(a5)+			; 2
(1)  918/FFFFFFFFFFFF13AE : 3AD8                		move.w	(a0)+,(a5)+			; 4
(1)  919/FFFFFFFFFFFF13B0 : 3AD8                		move.w	(a0)+,(a5)+			; 6
(1)  920/FFFFFFFFFFFF13B2 : 3AD8                		move.w	(a0)+,(a5)+			; 8
(1)  921/FFFFFFFFFFFF13B4 : 3AD8                		move.w	(a0)+,(a5)+			; 8
(1)  922/FFFFFFFFFFFF13B6 : 3AFC 0000           		move.w	#0,(a5)+			; A <-- zero end
(1)  923/FFFFFFFFFFFF13BA : 3200                		move.w	d0,d1
(1)  924/FFFFFFFFFFFF13BC : 7001                		moveq	#$01,d0				; COMMAND: READ CD AND PASS DATA
(1)  925/FFFFFFFFFFFF13BE : 619A                		bsr	System_McdSubTask
(1)  926/FFFFFFFFFFFF13C0 : 3001                		move.w	d1,d0
(1)  927/FFFFFFFFFFFF13C2 :                     	; a0 - Output location
(1)  928/FFFFFFFFFFFF13C2 :                     	; d0 - Number of $10-byte packets
(1)  929/FFFFFFFFFFFF13C2 : E848                		lsr.w	#4,d0				; size >> 4
(1)  930/FFFFFFFFFFFF13C4 : 5340                		subq.w	#1,d0				; -1
(1)  931/FFFFFFFFFFFF13C6 : 4DF9 00A1 2020      		lea	(sysmcd_reg+mcd_dcomm_s),a6
(1)  932/FFFFFFFFFFFF13CC : 1E39 00A1 200E      		move.b	(sysmcd_reg+mcd_comm_m).l,d7	; LOCK HERE
(1)  933/FFFFFFFFFFFF13D2 : 08C7 0007           		bset	#7,d7
(1)  934/FFFFFFFFFFFF13D6 : 13C7 00A1 200E      		move.b	d7,(sysmcd_reg+mcd_comm_m).l
(1)  935/FFFFFFFFFFFF13DC : 1E39 00A1 200F      .copy_ram:	move.b	(sysmcd_reg+mcd_comm_s).l,d7	; Wait if sub PASSed the packet
(1)  936/FFFFFFFFFFFF13E2 : 0807 0006           		btst	#6,d7
(1)  937/FFFFFFFFFFFF13E6 : 67F4                		beq.s	.copy_ram
(1)  938/FFFFFFFFFFFF13E8 : 2A4E                		move.l	a6,a5
(1)  939/FFFFFFFFFFFF13EA : 32DD                		move.w	(a5)+,(a1)+
(1)  940/FFFFFFFFFFFF13EC : 32DD                		move.w	(a5)+,(a1)+
(1)  941/FFFFFFFFFFFF13EE : 32DD                		move.w	(a5)+,(a1)+
(1)  942/FFFFFFFFFFFF13F0 : 32DD                		move.w	(a5)+,(a1)+
(1)  943/FFFFFFFFFFFF13F2 : 32DD                		move.w	(a5)+,(a1)+
(1)  944/FFFFFFFFFFFF13F4 : 32DD                		move.w	(a5)+,(a1)+
(1)  945/FFFFFFFFFFFF13F6 : 32DD                		move.w	(a5)+,(a1)+
(1)  946/FFFFFFFFFFFF13F8 : 32DD                		move.w	(a5)+,(a1)+
(1)  947/FFFFFFFFFFFF13FA : 1E39 00A1 200E      		move.b	(sysmcd_reg+mcd_comm_m).l,d7	; Tell SUB we got the pack
(1)  948/FFFFFFFFFFFF1400 : 08C7 0006           		bset	#6,d7
(1)  949/FFFFFFFFFFFF1404 : 13C7 00A1 200E      		move.b	d7,(sysmcd_reg+mcd_comm_m).l
(1)  950/FFFFFFFFFFFF140A : 1E39 00A1 200F      .wait_sub:	move.b	(sysmcd_reg+mcd_comm_s).l,d7	; Wait clear
(1)  951/FFFFFFFFFFFF1410 : 0807 0006           		btst	#6,d7
(1)  952/FFFFFFFFFFFF1414 : 66F4                		bne.s	.wait_sub
(1)  953/FFFFFFFFFFFF1416 : 1E39 00A1 200E      		move.b	(sysmcd_reg+mcd_comm_m).l,d7	; and clear our bit too.
(1)  954/FFFFFFFFFFFF141C : 0887 0006           		bclr	#6,d7
(1)  955/FFFFFFFFFFFF1420 : 13C7 00A1 200E      		move.b	d7,(sysmcd_reg+mcd_comm_m).l
(1)  956/FFFFFFFFFFFF1426 : 51C8 FFB4           		dbf	d0,.copy_ram
(1)  957/FFFFFFFFFFFF142A : 1E39 00A1 200E      		move.b	(sysmcd_reg+mcd_comm_m).l,d7	; UNLOCK
(1)  958/FFFFFFFFFFFF1430 : 0887 0007           		bclr	#7,d7
(1)  959/FFFFFFFFFFFF1434 : 13C7 00A1 200E      		move.b	d7,(sysmcd_reg+mcd_comm_m).l
(1)  960/FFFFFFFFFFFF143A : 4E75                		rts
(1)  961/FFFFFFFFFFFF143C :                     
(1)  962/FFFFFFFFFFFF143C :                     ; --------------------------------------------------------
(1)  963/FFFFFFFFFFFF143C :                     ; System_McdSendBuff
(1)  964/FFFFFFFFFFFF143C :                     ;
(1)  965/FFFFFFFFFFFF143C :                     ; Send data memory-to-memory from
(1)  966/FFFFFFFFFFFF143C :                     ; MAIN-CPU to SUB-CPU
(1)  967/FFFFFFFFFFFF143C :                     ;
(1)  968/FFFFFFFFFFFF143C :                     ; Input:
(1)  969/FFFFFFFFFFFF143C :                     ; a0 - Input data
(1)  970/FFFFFFFFFFFF143C :                     ; a1 - Output location in SUB-CPU area
(1)  971/FFFFFFFFFFFF143C :                     ; d0 - Size ($10* sizes only)
(1)  972/FFFFFFFFFFFF143C :                     ;
(1)  973/FFFFFFFFFFFF143C :                     ; Uses:
(1)  974/FFFFFFFFFFFF143C :                     ; d7,a0-a1/a5-a6
(1)  975/FFFFFFFFFFFF143C :                     ;
(1)  976/FFFFFFFFFFFF143C :                     ; This calls Sub-Task $08
(1)  977/FFFFFFFFFFFF143C :                     ; --------------------------------------------------------
(1)  978/FFFFFFFFFFFF143C :                     
(1)  979/FFFFFFFFFFFF143C :                     System_McdSendBuff:
(1)  980/FFFFFFFFFFFF143C : 2E09                		move.l	a1,d7				; Write a1 to dcomm_m $00-$03
(1)  981/FFFFFFFFFFFF143E : 33C7 00A1 2012      		move.w	d7,(sysmcd_reg+mcd_dcomm_m+2).l
(1)  982/FFFFFFFFFFFF1444 : 4847                		swap	d7
(1)  983/FFFFFFFFFFFF1446 : 33C7 00A1 2010      		move.w	d7,(sysmcd_reg+mcd_dcomm_m).l
(1)  984/FFFFFFFFFFFF144C : 3C00                		move.w	d0,d6
(1)  985/FFFFFFFFFFFF144E : 7008                		moveq	#$08,d0				; COMMAND $08
(1)  986/FFFFFFFFFFFF1450 : 6100 FF08           		bsr	System_McdSubTask
(1)  987/FFFFFFFFFFFF1454 : E84E                		lsr.w	#4,d6				; size >> 4
(1)  988/FFFFFFFFFFFF1456 : 5346                		subq.w	#1,d6				; -1
(1)  989/FFFFFFFFFFFF1458 : 4DF9 00A1 2010      		lea	(sysmcd_reg+mcd_dcomm_m),a6
(1)  990/FFFFFFFFFFFF145E : 1039 00A1 200F      .wait_pre:	move.b	(sysmcd_reg+mcd_comm_s).l,d0	; SUB got the a0?
(1)  991/FFFFFFFFFFFF1464 : 0800 0006           		btst	#6,d0
(1)  992/FFFFFFFFFFFF1468 : 67F4                		beq.s	.wait_pre
(1)  993/FFFFFFFFFFFF146A : 08F9 0007 00A1      		bset	#7,(sysmcd_reg+mcd_comm_m).l	; MAIN lock
         FFFFFFFFFFFF1470 : 200E             
(1)  994/FFFFFFFFFFFF1472 : 1039 00A1 200F      .copy_ram:	move.b	(sysmcd_reg+mcd_comm_s).l,d0	; Sub is busy?
(1)  995/FFFFFFFFFFFF1478 : 0800 0006           		btst	#6,d0
(1)  996/FFFFFFFFFFFF147C : 66F4                		bne.s	.copy_ram
(1)  997/FFFFFFFFFFFF147E : 2A4E                		move.l	a6,a5
(1)  998/FFFFFFFFFFFF1480 : 3AD8                		move.w	(a0)+,(a5)+
(1)  999/FFFFFFFFFFFF1482 : 3AD8                		move.w	(a0)+,(a5)+
(1) 1000/FFFFFFFFFFFF1484 : 3AD8                		move.w	(a0)+,(a5)+
(1) 1001/FFFFFFFFFFFF1486 : 3AD8                		move.w	(a0)+,(a5)+
(1) 1002/FFFFFFFFFFFF1488 : 3AD8                		move.w	(a0)+,(a5)+
(1) 1003/FFFFFFFFFFFF148A : 3AD8                		move.w	(a0)+,(a5)+
(1) 1004/FFFFFFFFFFFF148C : 3AD8                		move.w	(a0)+,(a5)+
(1) 1005/FFFFFFFFFFFF148E : 3AD8                		move.w	(a0)+,(a5)+
(1) 1006/FFFFFFFFFFFF1490 : 1039 00A1 200E      		move.b	(sysmcd_reg+mcd_comm_m).l,d0
(1) 1007/FFFFFFFFFFFF1496 : 08C0 0006           		bset	#6,d0
(1) 1008/FFFFFFFFFFFF149A : 13C0 00A1 200E      		move.b	d0,(sysmcd_reg+mcd_comm_m).l	; Set PASS bit
(1) 1009/FFFFFFFFFFFF14A0 : 1039 00A1 200F      .wait_sub:	move.b	(sysmcd_reg+mcd_comm_s).l,d0	; Sub got the data?
(1) 1010/FFFFFFFFFFFF14A6 : 0800 0006           		btst	#6,d0
(1) 1011/FFFFFFFFFFFF14AA : 67F4                		beq.s	.wait_sub
(1) 1012/FFFFFFFFFFFF14AC : 1039 00A1 200E      		move.b	(sysmcd_reg+mcd_comm_m).l,d0
(1) 1013/FFFFFFFFFFFF14B2 : 0880 0006           		bclr	#6,d0
(1) 1014/FFFFFFFFFFFF14B6 : 13C0 00A1 200E      		move.b	d0,(sysmcd_reg+mcd_comm_m).l	; Clear PASS bit
(1) 1015/FFFFFFFFFFFF14BC : 51CE FFB4           		dbf	d6,.copy_ram
(1) 1016/FFFFFFFFFFFF14C0 : 08B9 0007 00A1      		bclr	#7,(sysmcd_reg+mcd_comm_m).l	; UNLOCK
         FFFFFFFFFFFF14C6 : 200E             
(1) 1017/FFFFFFFFFFFF14C8 : 4E75                		rts
(1) 1018/FFFFFFFFFFFF14CA :                     
(1) 1019/FFFFFFFFFFFF14CA :                     ; ----------------------------------------------------------------
(1) 1020/FFFFFFFFFFFF14CA :                     
(1) 1022/FFFFFFFFFFFF14CA :                     
(1) 1023/FFFFFFFFFFFF14CA :                     ; ====================================================================
(1) 1024/FFFFFFFFFFFF14CA :                     ; ----------------------------------------------------------------
(1) 1025/FFFFFFFFFFFF14CA :                     ; 32X and CD32X ONLY
(1) 1026/FFFFFFFFFFFF14CA :                     ; ----------------------------------------------------------------
(1) 1027/FFFFFFFFFFFF14CA :                     
(1) 1172/FFFFFFFFFFFF14CA :                     
(1) 1173/FFFFFFFFFFFF14CA :                     ; ====================================================================
(1) 1174/FFFFFFFFFFFF14CA :                     ; ----------------------------------------------------------------
(1) 1175/FFFFFFFFFFFF14CA :                     ; Shared subs for the add-ons
(1) 1176/FFFFFFFFFFFF14CA :                     ; ----------------------------------------------------------------
(1) 1177/FFFFFFFFFFFF14CA :                     
(1) 1178/FFFFFFFFFFFF14CA :                     ; --------------------------------------------------------
(1) 1179/FFFFFFFFFFFF14CA :                     ; System_GrabRamCode
(1) 1180/FFFFFFFFFFFF14CA :                     ;
(1) 1181/FFFFFFFFFFFF14CA :                     ; Shared routine for MCD, 32X and CD32X.
(1) 1182/FFFFFFFFFFFF14CA :                     ;
(1) 1183/FFFFFFFFFFFF14CA :                     ; Send new code to the USER side of RAM and
(1) 1184/FFFFFFFFFFFF14CA :                     ; jumps into it.
(1) 1185/FFFFFFFFFFFF14CA :                     ;
(1) 1186/FFFFFFFFFFFF14CA :                     ; ** FOR SEGA CD/CD+32X
(1) 1187/FFFFFFFFFFFF14CA :                     ; Input:
(1) 1188/FFFFFFFFFFFF14CA :                     ; a0 - Filename string 8-bytes
(1) 1189/FFFFFFFFFFFF14CA :                     ;
(1) 1190/FFFFFFFFFFFF14CA :                     ; ** FOR SEGA 32X
(1) 1191/FFFFFFFFFFFF14CA :                     ; Input:
(1) 1192/FFFFFFFFFFFF14CA :                     ; a0 - Location of the RAM-code to copy from
(1) 1193/FFFFFFFFFFFF14CA :                     ;      in the $880000/$900000 areas
(1) 1194/FFFFFFFFFFFF14CA :                     ; --------------------------------------------------------
(1) 1195/FFFFFFFFFFFF14CA :                     
(1) 1196/FFFFFFFFFFFF14CA :                     System_GrabRamCode:
(1) 1198/FFFFFFFFFFFF14CA :                     		; a0 - filename string,0
(1) 1199/FFFFFFFFFFFF14CA : 43F9 FFFF 2000      		lea	(RAM_UserCode),a1
(1) 1200/FFFFFFFFFFFF14D0 : 303C 8000           		move.w	#(MAX_UserCode),d0
(1) 1201/FFFFFFFFFFFF14D4 : 6100 FECE           		bsr	System_McdTrnsfr_RAM
(1) 1202/FFFFFFFFFFFF14D8 : 4EF9 FFFF 2000      		jmp	(RAM_UserCode).l
(1) 1213/FFFFFFFFFFFF14DE :                     
(1) 1214/FFFFFFFFFFFF14DE :                     ; ====================================================================
(1) 1215/FFFFFFFFFFFF14DE :                     
     204/FFFFFFFFFFFF14DE :                     
     205/FFFFFFFFFFFF14DE :                     ; ---------------------------------------------
     206/FFFFFFFFFFFF14DE :                     ; Read screen modes
     207/FFFFFFFFFFFF14DE :                     ;
     208/FFFFFFFFFFFF14DE :                     ;   MD/Pico: Direct ROM jump
     209/FFFFFFFFFFFF14DE :                     ; SCD/CD32X: Reads file from disc and
     210/FFFFFFFFFFFF14DE :                     ;            transfers code to RAM
     211/FFFFFFFFFFFF14DE :                     ;       32X: Read from ROM and copies code to
     212/FFFFFFFFFFFF14DE :                     ;            RAM so it's problematic with DMA
     213/FFFFFFFFFFFF14DE :                     ;            and the SH2
     214/FFFFFFFFFFFF14DE :                     ;
     215/FFFFFFFFFFFF14DE :                     ; - Returning in your current screen code will
     216/FFFFFFFFFFFF14DE :                     ; loop here.
     217/FFFFFFFFFFFF14DE :                     ; - DO NOT JUMP TO SCREEN MODES DIRECTLY
     218/FFFFFFFFFFFF14DE :                     ; ---------------------------------------------
     219/FFFFFFFFFFFF14DE :                     
     220/FFFFFFFFFFFF14DE :                     Md_ReadModes:
     221/FFFFFFFFFFFF14DE : 007C 0700           		ori.w	#$0700,sr		; Disable interrupts
     222/FFFFFFFFFFFF14E2 : 7000                		moveq	#0,d0
     223/FFFFFFFFFFFF14E4 : 3038 C458           		move.w	(RAM_ScreenMode).w,d0
     224/FFFFFFFFFFFF14E8 : C07C 007F           		and.w	#$7F,d0			; <-- CURRENT LIMIT
     225/FFFFFFFFFFFF14EC : E948                		lsl.w	#4,d0			; * $10
     226/FFFFFFFFFFFF14EE : 41FB 000E           		lea	.pick_mode(pc,d0.w),a0	; LEA the filename
     228/FFFFFFFFFFFF14F2 : D0FC 0004           		adda	#4,a0
     229/FFFFFFFFFFFF14F6 : 4EB9 FFFF 14CA      		jsr	(System_GrabRamCode).l
     237/FFFFFFFFFFFF14FC : 60E0                		bra.s	Md_ReadModes		; Loop on rts
     238/FFFFFFFFFFFF14FE :                     
     239/FFFFFFFFFFFF14FE :                     ; ---------------------------------------------
     240/FFFFFFFFFFFF14FE :                     ; ** ADD SCREEN MODES HERE **
     241/FFFFFFFFFFFF14FE :                     ; ---------------------------------------------
     242/FFFFFFFFFFFF14FE :                     
     243/FFFFFFFFFFFF14FE :                     .pick_mode:
     244/FFFFFFFFFFFF14FE : 0005 5000           		dc.l Md_Screen00	; Cartridge label (unused on CD)
     245/FFFFFFFFFFFF1502 : 5343 5245 454E      		dc.b "SCREEN00.BIN"	; ISO Filename (unused on Cartridge)
         FFFFFFFFFFFF1508 : 3030 2E42 494E    
     246/FFFFFFFFFFFF150E : 0005 5000           		dc.l Md_Screen00
     247/FFFFFFFFFFFF1512 : 5343 5245 454E      		dc.b "SCREEN00.BIN"
         FFFFFFFFFFFF1518 : 3030 2E42 494E    
     248/FFFFFFFFFFFF151E : 0005 5000           		dc.l Md_Screen00
     249/FFFFFFFFFFFF1522 : 5343 5245 454E      		dc.b "SCREEN00.BIN"
         FFFFFFFFFFFF1528 : 3030 2E42 494E    
     250/FFFFFFFFFFFF152E : 0005 5000           		dc.l Md_Screen00
     251/FFFFFFFFFFFF1532 : 5343 5245 454E      		dc.b "SCREEN00.BIN"
         FFFFFFFFFFFF1538 : 3030 2E42 494E    
     252/FFFFFFFFFFFF153E : 0005 5000           		dc.l Md_Screen00
     253/FFFFFFFFFFFF1542 :                     
     254/FFFFFFFFFFFF1542 :                     ; ---------------------------------------------
     255/FFFFFFFFFFFF1542 :                     
     257/FFFFFFFFFFFF1542 :                     .end:
     258/FFFFFFFFFFFF1542 : (MACRO)              		erreport "SYSTEM TOP RAM-CODE",(.end-RAM_SystemCode),MAX_SysCode
     259/FFFFFFFFFFFFC6B6 :                     		dephase
     260/    4F44 :                     		phase (.end-RAM_SystemCode)+Md_SysCode
     262/    4F44 :                     Md_SysCode_e:
     263/    4F44 :                     		align 2
     264/    4F44 :                     
     265/    4F44 :                     ; ===========================================================================
     266/    4F44 :                     ; --------------------------------------------------------
     267/    4F44 :                     ; Z80 include on Cartridge ONLY (NOT on Disc)
     268/    4F44 :                     ; --------------------------------------------------------
     269/    4F44 :                     
     289/    4F44 :                     
     290/    4F44 :                     ; ===========================================================================
     291/    4F44 :                     ; ----------------------------------------------------------------
     292/    4F44 :                     ; DATA section shared on both Cartridge or Disc
     293/    4F44 :                     ; ----------------------------------------------------------------
     294/    4F44 :                     
     295/    4F44 :                     ; --------------------------------------------------------
     296/    4F44 :                     ; CD/CD32X ISO header and files
     297/    4F44 :                     ; --------------------------------------------------------
     298/    4F44 :                     
     300/    4F44 :                     		align $8000
     301/    8000 :                     ; 		dephase
     302/    8000 :                     		binclude "system/mcd/fshead.bin"	; Include ISO header
     303/    B800 : (MACRO)              		iso_setfs 0,IsoFileList,IsoFileList_e	; TWO pointers to the filelist:
     303/    B800 :                     .fstrt:
     303/    B800 : 22                                  dc.b .fend-.fstrt                               ; Block size
     303/    B801 : 00                                  dc.b 0                                          ; zero
     303/    B802 : 1700                                dc.b (ISOFILELIST>>11&$FF),(ISOFILELIST>>19&$FF)            ; ISOFILELIST sector, little
     303/    B804 : 0000                                dc.b (ISOFILELIST>>27&$FF),(ISOFILELIST>>35&$FF)
     303/    B806 : 0000 0017                           dc.l ISOFILELIST>>11                                  ; ISOFILELIST sector, big
     303/    B80A : BC07                                dc.b ((ISOFILELIST_E-ISOFILELIST)&$FF),((ISOFILELIST_E-ISOFILELIST)>>8&$FF)     ; Filesize, little
     303/    B80C : 0000                                dc.b ((ISOFILELIST_E-ISOFILELIST)>>16&$FF),((ISOFILELIST_E-ISOFILELIST)>>24&$FF)
     303/    B80E : 0000 07BC                           dc.l ISOFILELIST_E-ISOFILELIST                                  ; Filesize, big
     303/    B812 : 7C                                  dc.b (2023-1900)+1                              ; Year
     303/    B813 : 0000 0000 0000                      dc.b 0,0,0,0,0,0                                ; TODO
     303/    B819 : 02                                  dc.b 2                                          ; File flags
     303/    B81A : 0000                                dc.b 0,0
     303/    B81C : 0100                                dc.b 1,0                                        ; Volume sequence number, little
     303/    B81E : 0001                                dc.b 0,1                                        ; Volume sequence number, big
     303/    B820 : 0100                                dc.b 1,0
     303/    B822 :                     .fend:
     304/    B822 : (MACRO)              		iso_setfs 1,IsoFileList,IsoFileList_e
     304/    B822 :                     .fstrt:
     304/    B822 : 22                                  dc.b .fend-.fstrt                               ; Block size
     304/    B823 : 00                                  dc.b 0                                          ; zero
     304/    B824 : 1700                                dc.b (ISOFILELIST>>11&$FF),(ISOFILELIST>>19&$FF)            ; ISOFILELIST sector, little
     304/    B826 : 0000                                dc.b (ISOFILELIST>>27&$FF),(ISOFILELIST>>35&$FF)
     304/    B828 : 0000 0017                           dc.l ISOFILELIST>>11                                  ; ISOFILELIST sector, big
     304/    B82C : BC07                                dc.b ((ISOFILELIST_E-ISOFILELIST)&$FF),((ISOFILELIST_E-ISOFILELIST)>>8&$FF)     ; Filesize, little
     304/    B82E : 0000                                dc.b ((ISOFILELIST_E-ISOFILELIST)>>16&$FF),((ISOFILELIST_E-ISOFILELIST)>>24&$FF)
     304/    B830 : 0000 07BC                           dc.l ISOFILELIST_E-ISOFILELIST                                  ; Filesize, big
     304/    B834 : 7C                                  dc.b (2023-1900)+1                              ; Year
     304/    B835 : 0000 0000 0000                      dc.b 0,0,0,0,0,0                                ; TODO
     304/    B83B : 02                                  dc.b 2                                          ; File flags
     304/    B83C : 0000                                dc.b 0,0
     304/    B83E : 0100                                dc.b 1,0                                        ; Volume sequence number, little
     304/    B840 : 0001                                dc.b 0,1                                        ; Volume sequence number, big
     304/    B842 : 0101                                dc.b 1,1
     304/    B844 :                     .fend:
     305/    B844 :                     IsoFileList:
     306/    B844 : (MACRO)              		iso_file "SUB_DATA.BIN",MCD_SUBDATA,MCD_SUBDATA_e
     306/    B844 : 30                  .fstrt:         dc.b .fend-.fstrt                               ; Block size
     306/    B845 : 00                                  dc.b 0                                          ; zero
     306/    B846 : 1800                                dc.b (MCD_SUBDATA>>11&$FF),(MCD_SUBDATA>>19&$FF)            ; MCD_SUBDATA sector, little
     306/    B848 : 0000                                dc.b (MCD_SUBDATA>>27&$FF),(MCD_SUBDATA>>35&$FF)
     306/    B84A : 0000 0018                           dc.l MCD_SUBDATA>>11                                  ; MCD_SUBDATA sector, big
     306/    B84E : 0090                                dc.b ((MCD_SUBDATA_E-MCD_SUBDATA)&$FF),((MCD_SUBDATA_E-MCD_SUBDATA)>>8&$FF)     ; Filesize, little
     306/    B850 : 0400                                dc.b ((MCD_SUBDATA_E-MCD_SUBDATA)>>16&$FF),((MCD_SUBDATA_E-MCD_SUBDATA)>>24&$FF)
     306/    B852 : 0004 9000                           dc.l MCD_SUBDATA_E-MCD_SUBDATA                                  ; Filesize, big
     306/    B856 : 7C                                  dc.b (2023-1900)+1                              ; Year
     306/    B857 : 0000 0000 0000                      dc.b 0,0,0,0,0,0                                ; TODO
     306/    B85D : 00                                  dc.b 0                                          ; File flags
     306/    B85E : 0000                                dc.b 0,0
     306/    B860 : 0100                                dc.b 1,0                                        ; Volume sequence number, little
     306/    B862 : 0001                                dc.b 0,1                                        ; Volume sequence number, big
     306/    B864 : 0E                                  dc.b .flend-.flen
     306/    B865 : 5355 425F 4441      .flen:          dc.b "SUB_DATA.BIN",";1"
             B86B : 5441 2E42 494E 
             B871 : 3B31             
     306/    B873 : 00                  .flend:         dc.b 0
     306/    B874 :                     .fend:
     307/    B874 : (MACRO)              		iso_file "MARSCODE.BIN",MARS_RAMCODE,MARS_RAMCODE_eof
     307/    B874 : 30                  .fstrt:         dc.b .fend-.fstrt                               ; Block size
     307/    B875 : 00                                  dc.b 0                                          ; zero
     307/    B876 : AA00                                dc.b (MARS_RAMCODE>>11&$FF),(MARS_RAMCODE>>19&$FF)            ; MARS_RAMCODE sector, little
     307/    B878 : 0000                                dc.b (MARS_RAMCODE>>27&$FF),(MARS_RAMCODE>>35&$FF)
     307/    B87A : 0000 00AA                           dc.l MARS_RAMCODE>>11                                  ; MARS_RAMCODE sector, big
     307/    B87E : 0000                                dc.b ((MARS_RAMCODE_EOF-MARS_RAMCODE)&$FF),((MARS_RAMCODE_EOF-MARS_RAMCODE)>>8&$FF)     ; Filesize, little
     307/    B880 : 0000                                dc.b ((MARS_RAMCODE_EOF-MARS_RAMCODE)>>16&$FF),((MARS_RAMCODE_EOF-MARS_RAMCODE)>>24&$FF)
     307/    B882 : 0000 0000                           dc.l MARS_RAMCODE_EOF-MARS_RAMCODE                                  ; Filesize, big
     307/    B886 : 7C                                  dc.b (2023-1900)+1                              ; Year
     307/    B887 : 0000 0000 0000                      dc.b 0,0,0,0,0,0                                ; TODO
     307/    B88D : 00                                  dc.b 0                                          ; File flags
     307/    B88E : 0000                                dc.b 0,0
     307/    B890 : 0100                                dc.b 1,0                                        ; Volume sequence number, little
     307/    B892 : 0001                                dc.b 0,1                                        ; Volume sequence number, big
     307/    B894 : 0E                                  dc.b .flend-.flen
     307/    B895 : 4D41 5253 434F      .flen:          dc.b "MARSCODE.BIN",";1"
             B89B : 4445 2E42 494E 
             B8A1 : 3B31             
     307/    B8A3 : 00                  .flend:         dc.b 0
     307/    B8A4 :                     .fend:
     308/    B8A4 : (MACRO)              		iso_file "DATABNKD.BIN",MCD_DBANK0,MCD_DBANK0_e
     308/    B8A4 : 30                  .fstrt:         dc.b .fend-.fstrt                               ; Block size
     308/    B8A5 : 00                                  dc.b 0                                          ; zero
     308/    B8A6 : AB00                                dc.b (MCD_DBANK0>>11&$FF),(MCD_DBANK0>>19&$FF)            ; MCD_DBANK0 sector, little
     308/    B8A8 : 0000                                dc.b (MCD_DBANK0>>27&$FF),(MCD_DBANK0>>35&$FF)
     308/    B8AA : 0000 00AB                           dc.l MCD_DBANK0>>11                                  ; MCD_DBANK0 sector, big
     308/    B8AE : 0090                                dc.b ((MCD_DBANK0_E-MCD_DBANK0)&$FF),((MCD_DBANK0_E-MCD_DBANK0)>>8&$FF)     ; Filesize, little
     308/    B8B0 : 0200                                dc.b ((MCD_DBANK0_E-MCD_DBANK0)>>16&$FF),((MCD_DBANK0_E-MCD_DBANK0)>>24&$FF)
     308/    B8B2 : 0002 9000                           dc.l MCD_DBANK0_E-MCD_DBANK0                                  ; Filesize, big
     308/    B8B6 : 7C                                  dc.b (2023-1900)+1                              ; Year
     308/    B8B7 : 0000 0000 0000                      dc.b 0,0,0,0,0,0                                ; TODO
     308/    B8BD : 00                                  dc.b 0                                          ; File flags
     308/    B8BE : 0000                                dc.b 0,0
     308/    B8C0 : 0100                                dc.b 1,0                                        ; Volume sequence number, little
     308/    B8C2 : 0001                                dc.b 0,1                                        ; Volume sequence number, big
     308/    B8C4 : 0E                                  dc.b .flend-.flen
     308/    B8C5 : 4441 5441 424E      .flen:          dc.b "DATABNKD.BIN",";1"
             B8CB : 4B44 2E42 494E 
             B8D1 : 3B31             
     308/    B8D3 : 00                  .flend:         dc.b 0
     308/    B8D4 :                     .fend:
     309/    B8D4 : (MACRO)              		iso_file "MARSD_00.BIN",MARSDATA_DEFAULT,MARSDATA_DEFAULT_E
     309/    B8D4 : 30                  .fstrt:         dc.b .fend-.fstrt                               ; Block size
     309/    B8D5 : 00                                  dc.b 0                                          ; zero
     309/    B8D6 : FD00                                dc.b (MARSDATA_DEFAULT>>11&$FF),(MARSDATA_DEFAULT>>19&$FF)            ; MARSDATA_DEFAULT sector, little
     309/    B8D8 : 0000                                dc.b (MARSDATA_DEFAULT>>27&$FF),(MARSDATA_DEFAULT>>35&$FF)
     309/    B8DA : 0000 00FD                           dc.l MARSDATA_DEFAULT>>11                                  ; MARSDATA_DEFAULT sector, big
     309/    B8DE : 0018                                dc.b ((MARSDATA_DEFAULT_E-MARSDATA_DEFAULT)&$FF),((MARSDATA_DEFAULT_E-MARSDATA_DEFAULT)>>8&$FF)     ; Filesize, little
     309/    B8E0 : 0100                                dc.b ((MARSDATA_DEFAULT_E-MARSDATA_DEFAULT)>>16&$FF),((MARSDATA_DEFAULT_E-MARSDATA_DEFAULT)>>24&$FF)
     309/    B8E2 : 0001 1800                           dc.l MARSDATA_DEFAULT_E-MARSDATA_DEFAULT                                  ; Filesize, big
     309/    B8E6 : 7C                                  dc.b (2023-1900)+1                              ; Year
     309/    B8E7 : 0000 0000 0000                      dc.b 0,0,0,0,0,0                                ; TODO
     309/    B8ED : 00                                  dc.b 0                                          ; File flags
     309/    B8EE : 0000                                dc.b 0,0
     309/    B8F0 : 0100                                dc.b 1,0                                        ; Volume sequence number, little
     309/    B8F2 : 0001                                dc.b 0,1                                        ; Volume sequence number, big
     309/    B8F4 : 0E                                  dc.b .flend-.flen
     309/    B8F5 : 4D41 5253 445F      .flen:          dc.b "MARSD_00.BIN",";1"
             B8FB : 3030 2E42 494E 
             B901 : 3B31             
     309/    B903 : 00                  .flend:         dc.b 0
     309/    B904 :                     .fend:
     310/    B904 : (MACRO)              		iso_file "SCREEN00.BIN",Md_Screen00,Md_Screen00_e
     310/    B904 : 30                  .fstrt:         dc.b .fend-.fstrt                               ; Block size
     310/    B905 : 00                                  dc.b 0                                          ; zero
     310/    B906 : AA00                                dc.b (MD_SCREEN00>>11&$FF),(MD_SCREEN00>>19&$FF)            ; MD_SCREEN00 sector, little
     310/    B908 : 0000                                dc.b (MD_SCREEN00>>27&$FF),(MD_SCREEN00>>35&$FF)
     310/    B90A : 0000 00AA                           dc.l MD_SCREEN00>>11                                  ; MD_SCREEN00 sector, big
     310/    B90E : 0008                                dc.b ((MD_SCREEN00_E-MD_SCREEN00)&$FF),((MD_SCREEN00_E-MD_SCREEN00)>>8&$FF)     ; Filesize, little
     310/    B910 : 0000                                dc.b ((MD_SCREEN00_E-MD_SCREEN00)>>16&$FF),((MD_SCREEN00_E-MD_SCREEN00)>>24&$FF)
     310/    B912 : 0000 0800                           dc.l MD_SCREEN00_E-MD_SCREEN00                                  ; Filesize, big
     310/    B916 : 7C                                  dc.b (2023-1900)+1                              ; Year
     310/    B917 : 0000 0000 0000                      dc.b 0,0,0,0,0,0                                ; TODO
     310/    B91D : 00                                  dc.b 0                                          ; File flags
     310/    B91E : 0000                                dc.b 0,0
     310/    B920 : 0100                                dc.b 1,0                                        ; Volume sequence number, little
     310/    B922 : 0001                                dc.b 0,1                                        ; Volume sequence number, big
     310/    B924 : 0E                                  dc.b .flend-.flen
     310/    B925 : 5343 5245 454E      .flen:          dc.b "SCREEN00.BIN",";1"
             B92B : 3030 2E42 494E 
             B931 : 3B31             
     310/    B933 : 00                  .flend:         dc.b 0
     310/    B934 :                     .fend:
     311/    B934 :                     		align $800
     312/    C000 :                     IsoFileList_e:
     314/    C000 :                     
     315/    C000 :                     ; ====================================================================
     316/    C000 :                     ; --------------------------------------------------------
     317/    C000 :                     ; SEGA CD SUB-CPU data
     318/    C000 :                     ; --------------------------------------------------------
     319/    C000 :                     
     321/    C000 :                     		align $800
     322/    C000 :                     MCD_SUBDATA:
     323/   20000 :                     		phase $20000				; <-- MANUAL location on Sub-CPU
     324/   20000 :                     		include "sound/smpl_pcm.asm"		; PCM samples
(1)    1/   20000 :                     ; ====================================================================
(1)    2/   20000 :                     ; --------------------------------------------------------
(1)    3/   20000 :                     ; GEMA/Nikona PCM instruments for Sega CD
(1)    4/   20000 :                     ;
(1)    5/   20000 :                     ; Stored on DISC and loaded to Sub-CPU
(1)    6/   20000 :                     ;
(1)    7/   20000 :                     ; ** DO NOT LEAVE THIS SECTION EMPTY **
(1)    8/   20000 :                     ; --------------------------------------------------------
(1)    9/   20000 :                     
(1)   10/   20000 :                     	align $800
(1)   11/   20000 :                     
(1)   12/   20000 :                     ; --------------------------------------------------------
(1)   13/   20000 :                     
(1)   14/   20000 :                     PcmIns_menu_01:
(1)   15/   20000 : (MACRO)              	gSmpHead .end-.start,784
(1)   15/   20000 : 161B 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   15/   20003 : 1003 00                     dc.b ((784)&$FF),(((784)>>8)&$FF),(((784)>>16)&$FF)
(1)   16/   20006 :                     .start:	binclude "sound/instr/smpl/menu/01.wav",$2C
(1)   17/   21B1C :                     .end:
(1)   18/   21B1C :                     	align 2
(1)   19/   21B1C :                     PcmIns_menu_02:
(1)   20/   21B1C : (MACRO)              	gSmpHead .end-.start,700
(1)   20/   21B1C : C81A 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   20/   21B1F : BC02 00                     dc.b ((700)&$FF),(((700)>>8)&$FF),(((700)>>16)&$FF)
(1)   21/   21B22 :                     .start:	binclude "sound/instr/smpl/menu/02.wav",$2C
(1)   22/   235EA :                     .end:
(1)   23/   235EA :                     	align 2
(1)   24/   235EA :                     PcmIns_menu_03:
(1)   25/   235EA : (MACRO)              	gSmpHead .end-.start,0
(1)   25/   235EA : EC41 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   25/   235ED : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   26/   235F0 :                     .start:	binclude "sound/instr/smpl/menu/03.wav",$2C
(1)   27/   277DC :                     .end:
(1)   28/   277DC :                     	align 2
(1)   29/   277DC :                     ; PcmIns_menu_04:
(1)   30/   277DC :                     ; 	gSmpHead .end-.start,0
(1)   31/   277DC :                     ; .start:	binclude "sound/instr/smpl/menu/04.wav",$2C
(1)   32/   277DC :                     ; .end:
(1)   33/   277DC :                     	align 2
(1)   34/   277DC :                     PcmIns_menu_05:
(1)   35/   277DC : (MACRO)              	gSmpHead .end-.start,5348
(1)   35/   277DC : B11C 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   35/   277DF : E414 00                     dc.b ((5348)&$FF),(((5348)>>8)&$FF),(((5348)>>16)&$FF)
(1)   36/   277E2 :                     .start:	binclude "sound/instr/smpl/menu/05.wav",$2C
(1)   37/   29493 :                     .end:
(1)   38/   29493 :                     	align 2
(1)   39/   29494 :                     PcmIns_menu_06:
(1)   40/   29494 : (MACRO)              	gSmpHead .end-.start,0
(1)   40/   29494 : D007 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   40/   29497 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   41/   2949A :                     .start:	binclude "sound/instr/smpl/menu/06.wav",$2C
(1)   42/   29C6A :                     .end:
(1)   43/   29C6A :                     	align 2
(1)   44/   29C6A :                     PcmIns_menu_07:
(1)   45/   29C6A : (MACRO)              	gSmpHead .end-.start,0
(1)   45/   29C6A : 7F07 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   45/   29C6D : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   46/   29C70 :                     .start:	binclude "sound/instr/smpl/menu/07.wav",$2C
(1)   47/   2A3EF :                     .end:
(1)   48/   2A3EF :                     	align 2
(1)   49/   2A3F0 :                     PcmIns_menu_08:
(1)   50/   2A3F0 : (MACRO)              	gSmpHead .end-.start,0
(1)   50/   2A3F0 : B907 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   50/   2A3F3 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   51/   2A3F6 :                     .start:	binclude "sound/instr/smpl/menu/08.wav",$2C
(1)   52/   2ABAF :                     .end:
(1)   53/   2ABAF :                     	align 2
(1)   54/   2ABB0 :                     PcmIns_menu_09:
(1)   55/   2ABB0 : (MACRO)              	gSmpHead .end-.start,0
(1)   55/   2ABB0 : 8C07 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   55/   2ABB3 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   56/   2ABB6 :                     .start:	binclude "sound/instr/smpl/menu/09.wav",$2C
(1)   57/   2B342 :                     .end:
(1)   58/   2B342 :                     	align 2
(1)   59/   2B342 :                     ; PcmIns_menu_10:
(1)   60/   2B342 :                     ; 	gSmpHead .end-.start,0
(1)   61/   2B342 :                     ; .start:	binclude "sound/instr/smpl/menu/10.wav",$2C
(1)   62/   2B342 :                     ; .end:
(1)   63/   2B342 :                     	align 2
(1)   64/   2B342 :                     PcmIns_menu_11:
(1)   65/   2B342 : (MACRO)              	gSmpHead .end-.start,0
(1)   65/   2B342 : EB0D 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   65/   2B345 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   66/   2B348 :                     .start:	binclude "sound/instr/smpl/menu/11.wav",$2C
(1)   67/   2C133 :                     .end:
(1)   68/   2C133 :                     	align 2
(1)   69/   2C134 :                     PcmIns_menu_12:
(1)   70/   2C134 : (MACRO)              	gSmpHead .end-.start,0
(1)   70/   2C134 : 7512 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   70/   2C137 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   71/   2C13A :                     .start:	binclude "sound/instr/smpl/menu/12.wav",$2C
(1)   72/   2D3AF :                     .end:
(1)   73/   2D3AF :                     	align 2
(1)   74/   2D3B0 :                     PcmIns_menu_13:
(1)   75/   2D3B0 : (MACRO)              	gSmpHead .end-.start,0
(1)   75/   2D3B0 : 9217 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   75/   2D3B3 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   76/   2D3B6 :                     .start:	binclude "sound/instr/smpl/menu/13.wav",$2C
(1)   77/   2EB48 :                     .end:
(1)   78/   2EB48 :                     	align 2
(1)   79/   2EB48 :                     PcmIns_menu_14:
(1)   80/   2EB48 : (MACRO)              	gSmpHead .end-.start,4080
(1)   80/   2EB48 : E22F 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   80/   2EB4B : F00F 00                     dc.b ((4080)&$FF),(((4080)>>8)&$FF),(((4080)>>16)&$FF)
(1)   81/   2EB4E :                     .start:	binclude "sound/instr/smpl/menu/14.wav",$2C
(1)   82/   31B30 :                     .end:
(1)   83/   31B30 :                     	align 2
(1)   84/   31B30 :                     PcmIns_menu_15:
(1)   85/   31B30 : (MACRO)              	gSmpHead .end-.start,0
(1)   85/   31B30 : ED22 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   85/   31B33 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   86/   31B36 :                     .start:	binclude "sound/instr/smpl/menu/15.wav",$2C
(1)   87/   33E23 :                     .end:
(1)   88/   33E23 :                     	align 2
(1)   89/   33E24 :                     PcmIns_menu_16:
(1)   90/   33E24 : (MACRO)              	gSmpHead .end-.start,0
(1)   90/   33E24 : 6704 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   90/   33E27 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   91/   33E2A :                     .start:	binclude "sound/instr/smpl/menu/16.wav",$2C
(1)   92/   34291 :                     .end:
(1)   93/   34291 :                     	align 2
(1)   94/   34292 :                     
(1)   95/   34292 :                     PcmIns_PKick:
(1)   96/   34292 : (MACRO)              	gSmpHead .end-.start,0
(1)   96/   34292 : 7407 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   96/   34295 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   97/   34298 :                     .start:	binclude "sound/instr/smpl/wegot_kick.wav",$2C
(1)   98/   34A0C :                     	align 4
(1)   99/   34A0C :                     .end:
(1)  100/   34A0C :                     PcmIns_Piano:
(1)  101/   34A0C : (MACRO)              	gSmpHead .end-.start,0
(1)  101/   34A0C : D679 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)  101/   34A0F : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)  102/   34A12 :                     .start:	binclude "sound/instr/smpl/piano.wav",$2C
(1)  103/   3C3E6 :                     	align 4
(1)  104/   3C3E8 :                     .end:
(1)  105/   3C3E8 :                     PcmIns_PTom:
(1)  106/   3C3E8 : (MACRO)              	gSmpHead .end-.start,0
(1)  106/   3C3E8 : BA0B 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)  106/   3C3EB : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)  107/   3C3EE :                     .start:	binclude "sound/instr/smpl/sauron_tom.wav",$2C
(1)  108/   3CFA8 :                     	align 4
(1)  109/   3CFA8 :                     .end:
(1)  110/   3CFA8 :                     PcmIns_NadieL:
(1)  111/   3CFA8 : (MACRO)              	gSmpHead .end-.start,0
(1)  111/   3CFA8 : AADF 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)  111/   3CFAB : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)  112/   3CFAE :                     .start:	binclude "sound/instr/smpl/nadie_l.wav",$2C
(1)  113/   4AF56 :                     	align 4
(1)  114/   4AF58 :                     .end:
(1)  115/   4AF58 :                     PcmIns_NadieR:
(1)  116/   4AF58 : (MACRO)              	gSmpHead .end-.start,0
(1)  116/   4AF58 : AADF 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)  116/   4AF5B : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)  117/   4AF5E :                     .start:	binclude "sound/instr/smpl/nadie_r.wav",$2C
(1)  118/   58F06 :                     	align 4
(1)  119/   58F08 :                     .end:
(1)  120/   58F08 :                     PcmIns_MoveMe_Hit:
(1)  121/   58F08 : (MACRO)              	gSmpHead .end-.start,0
(1)  121/   58F08 : F610 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)  121/   58F0B : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)  122/   58F0E :                     .start:	binclude "sound/instr/smpl/moveme_hit.wav",$2C
(1)  123/   5A002 :                     	align 4
(1)  124/   5A004 :                     .end:
(1)  125/   5A004 :                     PcmIns_Kick:
(1)  126/   5A004 : (MACRO)              	gSmpHead .end-.start,0
(1)  126/   5A004 : 6E09 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)  126/   5A007 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)  127/   5A00A :                     .start:	binclude "sound/instr/smpl/kick_moveme.wav",$2C
(1)  128/   5A978 :                     	align 4
(1)  129/   5A978 :                     .end:
(1)  130/   5A978 :                     PcmIns_Snare:
(1)  131/   5A978 : (MACRO)              	gSmpHead .end-.start,0
(1)  131/   5A978 : 8209 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)  131/   5A97B : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)  132/   5A97E :                     .start:	binclude "sound/instr/smpl/snare_moveme.wav",$2C
(1)  133/   5B300 :                     	align 4
(1)  134/   5B300 :                     .end:
(1)  135/   5B300 :                     PcmIns_MoveMe_BrassL:
(1)  136/   5B300 : (MACRO)              	gSmpHead .end-.start,6478
(1)  136/   5B300 : E66B 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)  136/   5B303 : 4E19 00                     dc.b ((6478)&$FF),(((6478)>>8)&$FF),(((6478)>>16)&$FF)
(1)  137/   5B306 :                     .start:	binclude "sound/instr/smpl/brass_move_l.wav",$2C
(1)  138/   61EEA :                     	align 4
(1)  139/   61EEC :                     .end:
(1)  140/   61EEC :                     PcmIns_MoveMe_BrassR:
(1)  141/   61EEC : (MACRO)              	gSmpHead .end-.start,6478
(1)  141/   61EEC : E66B 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)  141/   61EEF : 4E19 00                     dc.b ((6478)&$FF),(((6478)>>8)&$FF),(((6478)>>16)&$FF)
(1)  142/   61EF2 :                     .start:	binclude "sound/instr/smpl/brass_move_r.wav",$2C
(1)  143/   68AD6 :                     	align 4
(1)  144/   68AD8 :                     .end:
(1)  145/   68AD8 :                     
     325/   68AD8 :                     .here:
     326/   68AD8 : (MACRO)              		erreport "SUB-CPU DATA",.here,$80000
     327/   54AD8 :                     		dephase
     328/   54AD8 :                     		phase MCD_SUBDATA+(.here-$20000)
     329/   54AD8 :                     		align $800
     330/   55000 :                     MCD_SUBDATA_E:
     332/   55000 :                     
     333/   55000 :                     ; ----------------------------------------------------------------
     334/   55000 :                     ; SH2 code and shared data stored in SDRAM
     335/   55000 :                     ; ----------------------------------------------------------------
     336/   55000 :                     
     338/   55000 :                     		align $800
     342/   55000 :                     MARS_RAMCODE:
     346/   55000 :                     MARS_RAMCODE_E:
     348/   55000 :                     		align $800
     349/   55000 :                     MARS_RAMCODE_eof:
     351/   55000 :                     
     352/   55000 :                     ; ====================================================================
     353/   55000 :                     ; --------------------------------------------------------
     354/   55000 :                     ; Screen modes
     355/   55000 :                     ;
     356/   55000 :                     ; These are stored as separate files on DISC
     357/   55000 :                     ;
     358/   55000 :                     ; Usage:
     359/   55000 :                     ; screen_code START_LABEL,END_LABEL,CODE_PATH
     360/   55000 :                     ; --------------------------------------------------------
     361/   55000 :                     
     362/   55000 : (MACRO)              	screen_code Md_Screen00,Md_Screen00_e,"game/screen_0/code.asm"
     362/   55000 :                                     align $800              ; SCD/CD32X sector align
     362/   55000 : =$55000              MD_SCREEN00 label *
     362/   55000 :                     
     362/   55000 :                     mctopscrn:
     362/FFFFFFFFFFFF2000 :                                     phase RAM_UserCode      ; SCD/32X/CD32X relocate to RAM area
     362/FFFFFFFFFFFF2000 :                     mcscrn_s:
     362/FFFFFFFFFFFF2000 :                             include "game/screen_0/code.asm";"game/screen_0/code.asm"
(1)    1/FFFFFFFFFFFF2000 :                     ; ====================================================================
(1)    2/FFFFFFFFFFFF2000 :                     ; ----------------------------------------------------------------
(1)    3/FFFFFFFFFFFF2000 :                     ; SCREEN MODE 0
(1)    4/FFFFFFFFFFFF2000 :                     ; ----------------------------------------------------------------
(1)    5/FFFFFFFFFFFF2000 :                     
(1)    6/FFFFFFFFFFFF2000 :                     ; ====================================================================
(1)    7/FFFFFFFFFFFF2000 :                     ; ------------------------------------------------------
(1)    8/FFFFFFFFFFFF2000 :                     ; Variables
(1)    9/FFFFFFFFFFFF2000 :                     ; ------------------------------------------------------
(1)   10/FFFFFFFFFFFF2000 :                     
(1)   11/FFFFFFFFFFFF2000 : =$440                setVram_Mikami	equ $0440
(1)   12/FFFFFFFFFFFF2000 : =$480                setVram_Sisi	equ $0480
(1)   13/FFFFFFFFFFFF2000 :                     
(1)   14/FFFFFFFFFFFF2000 :                     ; ====================================================================
(1)   15/FFFFFFFFFFFF2000 :                     ; ------------------------------------------------------
(1)   16/FFFFFFFFFFFF2000 :                     ; Structs
(1)   17/FFFFFFFFFFFF2000 :                     ; ------------------------------------------------------
(1)   18/FFFFFFFFFFFF2000 :                     
(1)   19/FFFFFFFFFFFF2000 :                     ; 		strct 0
(1)   20/FFFFFFFFFFFF2000 :                     ; strc_xpos	ds.w 1
(1)   21/FFFFFFFFFFFF2000 :                     ; strc_ypos	ds.w 1
(1)   22/FFFFFFFFFFFF2000 :                     ; 		endstrct
(1)   23/FFFFFFFFFFFF2000 :                     
(1)   24/FFFFFFFFFFFF2000 :                     ; ====================================================================
(1)   25/FFFFFFFFFFFF2000 :                     ; ------------------------------------------------------
(1)   26/FFFFFFFFFFFF2000 :                     ; This mode's RAM
(1)   27/FFFFFFFFFFFF2000 :                     ; ------------------------------------------------------
(1)   28/FFFFFFFFFFFF2000 :                     
(1)   29/FFFFFFFFFFFF2000 :  (MACRO-2)           			strct RAM_ScrnBuff
(1)   29/FFFFFFFFFFFF2000 : =$FFFFFFFFFFFF2000   GLBL_LASTPC     set *
(1)   29/   55000 :                                     dephase
(1)   29/FFFFFFFFFFFFD204 :                                     phase RAM_SCRNBUFF
(1)   29/FFFFFFFFFFFFD204 : =$FFFFFFFFFFFFD204   GLBL_LASTORG    set *
(1)   30/FFFFFFFFFFFFD204 :                     RAM_CurrPick		ds.w 1
(1)   31/FFFFFFFFFFFFD206 :                     RAM_GemaArg0		ds.w 1
(1)   32/FFFFFFFFFFFFD208 :                     RAM_GemaArg1		ds.w 1
(1)   33/FFFFFFFFFFFFD20A :                     RAM_GemaArg2		ds.w 1
(1)   34/FFFFFFFFFFFFD20C :                     
(1)   35/FFFFFFFFFFFFD20C :                     RAM_GemaArg3		ds.w 1
(1)   36/FFFFFFFFFFFFD20E :                     RAM_GemaArg4		ds.w 1
(1)   37/FFFFFFFFFFFFD210 :                     RAM_GemaArg5		ds.w 1
(1)   38/FFFFFFFFFFFFD212 :                     RAM_ChnlLinks		ds.w 26
(1)   39/FFFFFFFFFFFFD246 :                     sizeof_thisbuff		ds.l 0
(1)   40/FFFFFFFFFFFFD24C :  (MACRO-2)           			endstrct
(1)   40/FFFFFFFFFFFFD204 :                                     org GLBL_LASTORG
(1)   40/FFFFFFFFFFFF2000 :                                     phase GLBL_LASTPC
(1)   41/FFFFFFFFFFFF2000 :  (MACRO-2)           			erreport "SCREEN BUFFER",sizeof_thisbuff-RAM_ScrnBuff,MAX_ScrnBuff
(1)   42/FFFFFFFFFFFF2000 :                     
(1)   43/FFFFFFFFFFFF2000 :                     ; ====================================================================
(1)   44/FFFFFFFFFFFF2000 :                     ; ------------------------------------------------------
(1)   45/FFFFFFFFFFFF2000 :                     ; Init
(1)   46/FFFFFFFFFFFF2000 :                     ; ------------------------------------------------------
(1)   47/FFFFFFFFFFFF2000 :                     
(1)   48/FFFFFFFFFFFF2000 : 6100 F298           		bsr	Mode_Init
(1)   49/FFFFFFFFFFFF2004 :  (MACRO-2)           		set_dbanks file_mddata_def,pointr_marsdata_def
(1)   49/FFFFFFFFFFFF2004 : 6100 F346                           bsr     System_McdSubWait
(1)   49/FFFFFFFFFFFF2008 : 41FA 0284                           lea     FILE_MDDATA_DEF(pc),a0           ; CD/CD32X: Genesis data
(1)   49/FFFFFFFFFFFF200C : 6100 F368                           bsr     System_McdTrnsfr_WRAM
(1)   50/FFFFFFFFFFFF2010 :                     
(1)   51/FFFFFFFFFFFF2010 :                     	; ----------------------------------------------
(1)   52/FFFFFFFFFFFF2010 :                     	; Load assets
(1)   79/FFFFFFFFFFFF2010 : 203C 0020 198C      		move.l	#ART_TEST,d0
(1)   80/FFFFFFFFFFFF2016 : 323C 0020           		move.w	#cell_vram($0001),d1
(1)   81/FFFFFFFFFFFF201A : 343C 8780           		move.w	#ART_TEST_E-ART_TEST,d2
(1)   82/FFFFFFFFFFFF201E : 6100 E6DA           		bsr	Video_LoadArt
(1)   83/FFFFFFFFFFFF2022 : 41F9 0020 0000      		lea	(MAP_TEST),a0			; long lea
(1)   84/FFFFFFFFFFFF2028 : 203C 0001 0000      		move.l	#locate(0,0,1),d0
(1)   85/FFFFFFFFFFFF202E : 223C 0027 001B      		move.l	#map_size(320,224),d1
(1)   86/FFFFFFFFFFFF2034 : 343C 0001           		move.w	#$0001,d2
(1)   87/FFFFFFFFFFFF2038 : 6100 E8E2           		bsr	Video_LoadMap
(1)   89/FFFFFFFFFFFF203C : 41F9 0020 0D8C      		lea	(ASCII_FONT).l,a0
(1)   90/FFFFFFFFFFFF2042 : 43F9 FFFF 02D2      		lea	(ASCII_PAL).l,a1
(1)   91/FFFFFFFFFFFF2048 : 6100 E928           		bsr	Video_PrintInit
(1)   92/FFFFFFFFFFFF204C : 203C 0020 A10C      		move.l	#Art_Sisi,d0
(1)   93/FFFFFFFFFFFF2052 : 323C 9000           		move.w	#cell_vram(setVram_Sisi),d1
(1)   94/FFFFFFFFFFFF2056 : 343C 05E0           		move.w	#Art_Sisi_e-Art_Sisi,d2
(1)   95/FFFFFFFFFFFF205A : 6100 E69E           		bsr	Video_LoadArt
(1)   96/FFFFFFFFFFFF205E :                     
(1)   97/FFFFFFFFFFFF205E : 41FA 02C6           		lea	PAL_TEST(pc),a0
(1)   98/FFFFFFFFFFFF2062 : 7000                		moveq	#0,d0
(1)   99/FFFFFFFFFFFF2064 : 323C 0010           		move.w	#16,d1
(1)  100/FFFFFFFFFFFF2068 : 6100 E36A           		bsr	Video_FadePal
(1)  101/FFFFFFFFFFFF206C : 41F9 0020 0D10      		lea	(objPal_Sisi),a0
(1)  102/FFFFFFFFFFFF2072 : 7010                		moveq	#16,d0
(1)  103/FFFFFFFFFFFF2074 : 323C 0010           		move.w	#16,d1
(1)  104/FFFFFFFFFFFF2078 : 6100 E35A           		bsr	Video_FadePal
(1)  105/FFFFFFFFFFFF207C : 41FA 02C6           		lea	str_TesterInit(pc),a0
(1)  106/FFFFFFFFFFFF2080 : 203C 0000 0101      		move.l	#locate(1,1,0),d0
(1)  107/FFFFFFFFFFFF2086 : 6100 E914           		bsr	Video_Print
(1)  108/FFFFFFFFFFFF208A :                     ; 		move.l	#Object_Mikami,d0
(1)  109/FFFFFFFFFFFF208A :                     ; 		moveq	#0,d1
(1)  110/FFFFFFFFFFFF208A :                     ; 		bsr	Objects_Set
(1)  111/FFFFFFFFFFFF208A : 203C FFFF 22AE      		move.l	#Object_Sisi,d0
(1)  112/FFFFFFFFFFFF2090 : 6100 EB4E           		bsr	Objects_Add
(1)  113/FFFFFFFFFFFF2094 :                     	; ----------------------------------------------
(1)  114/FFFFFFFFFFFF2094 : 4278 D206           		clr.w	(RAM_GemaArg0).w
(1)  115/FFFFFFFFFFFF2098 : 4278 D208           		clr.w	(RAM_GemaArg1).w
(1)  116/FFFFFFFFFFFF209C : 4278 D20A           		clr.w	(RAM_GemaArg2).w
(1)  117/FFFFFFFFFFFF20A0 : 4278 D20C           		clr.w	(RAM_GemaArg3).w
(1)  118/FFFFFFFFFFFF20A4 : 4278 D20E           		clr.w	(RAM_GemaArg4).w
(1)  119/FFFFFFFFFFFF20A8 : 4278 D210           		clr.w	(RAM_GemaArg5).w
(1)  120/FFFFFFFFFFFF20AC : 303C 00E8           		move.w	#200+32,d0
(1)  121/FFFFFFFFFFFF20B0 : 6100 E1AC           		bsr	gemaSetBeats
(1)  122/FFFFFFFFFFFF20B4 :                     ; 		moveq	#1,d0
(1)  123/FFFFFFFFFFFF20B4 :                     ; 		bsr	gemaPlayTrack
(1)  124/FFFFFFFFFFFF20B4 :                     	; ----------------------------------------------
(1)  125/FFFFFFFFFFFF20B4 : 6100 0094           		bsr	.show_me
(1)  126/FFFFFFFFFFFF20B8 :                     ; 		bsr	.steal_vars
(1)  127/FFFFFFFFFFFF20B8 : 6100 EADE           		bsr	Objects_Run
(1)  128/FFFFFFFFFFFF20BC :                     	; ----------------------------------------------
(1)  129/FFFFFFFFFFFF20BC : 08F9 0006 FFFF      		bset	#bitDispEnbl,(RAM_VdpRegs+1).l		; Enable display
         FFFFFFFFFFFF20C2 : BDF7             
(1)  130/FFFFFFFFFFFF20C4 : 11FC 0081 BE02      		move.b	#%10000001,(RAM_VdpRegs+$C).w		; H40 + shadow mode
(1)  131/FFFFFFFFFFFF20CA : 6100 E1D4           		bsr	Video_Update
(1)  132/FFFFFFFFFFFF20CE : 6100 E2A0           		bsr	Video_FadeIn
(1)  133/FFFFFFFFFFFF20D2 :                     
(1)  134/FFFFFFFFFFFF20D2 :                     ; ====================================================================
(1)  135/FFFFFFFFFFFF20D2 :                     ; ------------------------------------------------------
(1)  136/FFFFFFFFFFFF20D2 :                     ; Loop
(1)  137/FFFFFFFFFFFF20D2 :                     ; ------------------------------------------------------
(1)  138/FFFFFFFFFFFF20D2 :                     
(1)  139/FFFFFFFFFFFF20D2 :                     .loop:
(1)  140/FFFFFFFFFFFF20D2 : 6100 EE3E           		bsr	System_Render
(1)  141/FFFFFFFFFFFF20D6 :                     
(1)  142/FFFFFFFFFFFF20D6 :                     ; 		bsr	.steal_vars
(1)  143/FFFFFFFFFFFF20D6 : 6100 EAC0           		bsr	Objects_Run
(1)  144/FFFFFFFFFFFF20DA : 41FA 0328           		lea	str_Info(pc),a0
(1)  145/FFFFFFFFFFFF20DE : 203C 0000 1F1A      		move.l	#locate(31,26,0),d0
(1)  146/FFFFFFFFFFFF20E4 : 6100 E8B6           		bsr	Video_Print
(1)  147/FFFFFFFFFFFF20E8 :                     
(1)  148/FFFFFFFFFFFF20E8 :                     	; Controls
(1)  150/FFFFFFFFFFFF20E8 : 4DF8 C004           		lea	(Controller_1).w,a6
(1)  151/FFFFFFFFFFFF20EC : 3E2E 0004           		move.w	on_press(a6),d7
(1)  152/FFFFFFFFFFFF20F0 : 0807 000B           		btst	#bitJoyMode,d7
(1)  153/FFFFFFFFFFFF20F4 : 6710                		beq.s	.n_aplay
(1)  154/FFFFFFFFFFFF20F6 :                     ; 		moveq	#1,d0
(1)  155/FFFFFFFFFFFF20F6 :                     ; 		bsr	Video_MarsGfxMode
(1)  156/FFFFFFFFFFFF20F6 : 33FC 0002 00A1      		move.w	#$0002,(sysmcd_reg+mcd_dcomm_m).l
         FFFFFFFFFFFF20FC : 2010             
(1)  157/FFFFFFFFFFFF20FE : 303C 0010           		move.w	#$0010,d0
(1)  158/FFFFFFFFFFFF2102 : 6100 F256           		bsr	System_McdSubTask
(1)  159/FFFFFFFFFFFF2106 :                     .n_aplay:
(1)  161/FFFFFFFFFFFF2106 :                     
(1)  162/FFFFFFFFFFFF2106 : 4DF8 C004           		lea	(Controller_1).w,a6
(1)  163/FFFFFFFFFFFF210A : 4BF8 D204           		lea	(RAM_CurrPick).w,a5
(1)  164/FFFFFFFFFFFF210E :                     	; UP/DOWN
(1)  165/FFFFFFFFFFFF210E : 3E2E 0002           		move.w	on_hold(a6),d7
(1)  166/FFFFFFFFFFFF2112 : 0807 0004           		btst	#bitJoyB,d7
(1)  167/FFFFFFFFFFFF2116 : 6626                		bne.s.	.n_up
(1)  168/FFFFFFFFFFFF2118 : 3E2E 0004           		move.w	on_press(a6),d7
(1)  169/FFFFFFFFFFFF211C : 0807 0001           		btst	#bitJoyDown,d7
(1)  170/FFFFFFFFFFFF2120 : 670A                		beq.s	.n_down
(1)  171/FFFFFFFFFFFF2122 : 0C55 0004           		cmp.w	#4,(a5)		; MAX OPTIONS
(1)  172/FFFFFFFFFFFF2126 : 6704                		beq.s	.n_down
(1)  173/FFFFFFFFFFFF2128 : 5255                		addq.w	#1,(a5)
(1)  174/FFFFFFFFFFFF212A : 611E                		bsr.s	.show_me
(1)  175/FFFFFFFFFFFF212C :                     .n_down:
(1)  176/FFFFFFFFFFFF212C : 3E2E 0004           		move.w	on_press(a6),d7
(1)  177/FFFFFFFFFFFF2130 : 0807 0000           		btst	#bitJoyUp,d7
(1)  178/FFFFFFFFFFFF2134 : 6708                		beq.s	.n_up
(1)  179/FFFFFFFFFFFF2136 : 4A55                		tst.w	(a5)
(1)  180/FFFFFFFFFFFF2138 : 6704                		beq.s	.n_up
(1)  181/FFFFFFFFFFFF213A : 5355                		subq.w	#1,(a5)
(1)  182/FFFFFFFFFFFF213C : 610C                		bsr.s	.show_me
(1)  183/FFFFFFFFFFFF213E :                     .n_up:
(1)  184/FFFFFFFFFFFF213E : 3E38 D204           		move.w	(RAM_CurrPick).w,d7
(1)  185/FFFFFFFFFFFF2142 : E54F                		lsl.w	#2,d7
(1)  186/FFFFFFFFFFFF2144 : 4EBB 7012           		jsr	.jump_list(pc,d7.w)
(1)  187/FFFFFFFFFFFF2148 :                     .n_cbtn:
(1)  188/FFFFFFFFFFFF2148 : 6088                		bra	.loop
(1)  189/FFFFFFFFFFFF214A :                     ; ------------------------------------------------------
(1)  190/FFFFFFFFFFFF214A :                     
(1)  191/FFFFFFFFFFFF214A :                     .show_me:
(1)  192/FFFFFFFFFFFF214A : 41FA 028C           		lea	str_ShowMe(pc),a0
(1)  193/FFFFFFFFFFFF214E : 203C 0000 1705      		move.l	#locate(23,5,0),d0
(1)  194/FFFFFFFFFFFF2154 : 6000 E846           		bra	Video_Print
(1)  195/FFFFFFFFFFFF2158 :                     
(1)  196/FFFFFFFFFFFF2158 :                     ; ------------------------------------------------------
(1)  197/FFFFFFFFFFFF2158 :                     
(1)  198/FFFFFFFFFFFF2158 :                     .jump_list:
(1)  199/FFFFFFFFFFFF2158 : 6000 001E           		bra.w	.nothing
(1)  200/FFFFFFFFFFFF215C : 6000 002C           		bra.w	.option_1
(1)  201/FFFFFFFFFFFF2160 : 6000 00AE           		bra.w	.option_2
(1)  202/FFFFFFFFFFFF2164 : 6000 00C4           		bra.w	.option_3
(1)  203/FFFFFFFFFFFF2168 : 6000 00DC           		bra.w	.option_4
(1)  204/FFFFFFFFFFFF216C : 6000 000A           		bra.w	.nothing
(1)  205/FFFFFFFFFFFF2170 : 6000 0006           		bra.w	.nothing
(1)  206/FFFFFFFFFFFF2174 : 6000 0002           		bra.w	.nothing
(1)  207/FFFFFFFFFFFF2178 :                     
(1)  208/FFFFFFFFFFFF2178 :                     ; ------------------------------------------------------
(1)  209/FFFFFFFFFFFF2178 :                     ; OPTION 0
(1)  210/FFFFFFFFFFFF2178 :                     ; ------------------------------------------------------
(1)  211/FFFFFFFFFFFF2178 :                     
(1)  212/FFFFFFFFFFFF2178 :                     .nothing:
(1)  213/FFFFFFFFFFFF2178 : 3E2E 0004           		move.w	on_press(a6),d7
(1)  214/FFFFFFFFFFFF217C : 0807 0007           		btst	#bitJoyStart,d7
(1)  215/FFFFFFFFFFFF2180 : 6706                		beq.s	.no_press
(1)  216/FFFFFFFFFFFF2182 : 61C6                		bsr.s	.show_me
(1)  217/FFFFFFFFFFFF2184 : 6000 E03C           		bra	gemaTest
(1)  218/FFFFFFFFFFFF2188 :                     .no_press:
(1)  219/FFFFFFFFFFFF2188 : 4E75                		rts
(1)  220/FFFFFFFFFFFF218A :                     
(1)  221/FFFFFFFFFFFF218A :                     ; ------------------------------------------------------
(1)  222/FFFFFFFFFFFF218A :                     ; OPTION 1
(1)  223/FFFFFFFFFFFF218A :                     ; ------------------------------------------------------
(1)  224/FFFFFFFFFFFF218A :                     
(1)  225/FFFFFFFFFFFF218A :                     .option_1:
(1)  226/FFFFFFFFFFFF218A : 4BF8 D206           		lea	(RAM_GemaArg0).w,a5
(1)  227/FFFFFFFFFFFF218E : 3E2E 0004           		move.w	on_press(a6),d7
(1)  228/FFFFFFFFFFFF2192 : 0807 0007           		btst	#bitJoyStart,d7
(1)  229/FFFFFFFFFFFF2196 : 671E                		beq.s	.option1_args
(1)  230/FFFFFFFFFFFF2198 : 301D                		move.w	(a5)+,d0
(1)  231/FFFFFFFFFFFF219A : 321D                		move.w	(a5)+,d1
(1)  232/FFFFFFFFFFFF219C : 341D                		move.w	(a5)+,d2
(1)  233/FFFFFFFFFFFF219E : 6100 E048           		bsr	gemaPlayTrack
(1)  234/FFFFFFFFFFFF21A2 : 3038 D208           		move.w	(RAM_GemaArg1).w,d0
(1)  235/FFFFFFFFFFFF21A6 : 3200                		move.w	d0,d1
(1)  236/FFFFFFFFFFFF21A8 : D241                		add.w	d1,d1
(1)  237/FFFFFFFFFFFF21AA : 41FA 00B6           		lea	.extnal_beats(pc),a0
(1)  238/FFFFFFFFFFFF21AE : 3030 1000           		move.w	(a0,d1.w),d0
(1)  239/FFFFFFFFFFFF21B2 : 6000 E0AA           		bra	gemaSetBeats
(1)  240/FFFFFFFFFFFF21B6 :                     ; 		bra.s	.show_me
(1)  241/FFFFFFFFFFFF21B6 :                     .option1_args:
(1)  242/FFFFFFFFFFFF21B6 : 3E2E 0002           		move.w	on_hold(a6),d7
(1)  243/FFFFFFFFFFFF21BA : 3C07                		move.w	d7,d6
(1)  244/FFFFFFFFFFFF21BC : 0246 0070           		andi.w	#JoyA+JoyB+JoyC,d6
(1)  245/FFFFFFFFFFFF21C0 : 67C6                		beq.s	.no_press
(1)  246/FFFFFFFFFFFF21C2 : 0807 0004           		btst	#bitJoyB,d7
(1)  247/FFFFFFFFFFFF21C6 : 6704                		beq.s	.d2_opt
(1)  248/FFFFFFFFFFFF21C8 : DAFC 0002           		adda	#2,a5
(1)  249/FFFFFFFFFFFF21CC :                     .d2_opt:
(1)  250/FFFFFFFFFFFF21CC : 0807 0005           		btst	#bitJoyC,d7
(1)  251/FFFFFFFFFFFF21D0 : 6704                		beq.s	.d3_opt
(1)  252/FFFFFFFFFFFF21D2 : DAFC 0004           		adda	#4,a5
(1)  253/FFFFFFFFFFFF21D6 :                     .d3_opt:
(1)  254/FFFFFFFFFFFF21D6 : 3E2E 0004           		move.w	on_press(a6),d7
(1)  255/FFFFFFFFFFFF21DA : 0807 0003           		btst	#bitJoyRight,d7
(1)  256/FFFFFFFFFFFF21DE : 6706                		beq.s	.op1_right
(1)  257/FFFFFFFFFFFF21E0 : 5255                		addq.w	#1,(a5)
(1)  258/FFFFFFFFFFFF21E2 : 6000 FF66           		bra	.show_me
(1)  259/FFFFFFFFFFFF21E6 :                     .op1_right:
(1)  260/FFFFFFFFFFFF21E6 : 0807 0002           		btst	#bitJoyLeft,d7
(1)  261/FFFFFFFFFFFF21EA : 6706                		beq.s	.op1_left
(1)  262/FFFFFFFFFFFF21EC : 5355                		subq.w	#1,(a5)
(1)  263/FFFFFFFFFFFF21EE : 6000 FF5A           		bra	.show_me
(1)  264/FFFFFFFFFFFF21F2 :                     .op1_left:
(1)  265/FFFFFFFFFFFF21F2 : 3E2E 0002           		move.w	on_hold(a6),d7
(1)  266/FFFFFFFFFFFF21F6 : 0807 0000           		btst	#bitJoyUp,d7
(1)  267/FFFFFFFFFFFF21FA : 6706                		beq.s	.op1_down
(1)  268/FFFFFFFFFFFF21FC : 5255                		addq.w	#1,(a5)
(1)  269/FFFFFFFFFFFF21FE : 6000 FF4A           		bra	.show_me
(1)  270/FFFFFFFFFFFF2202 :                     .op1_down:
(1)  271/FFFFFFFFFFFF2202 : 0807 0001           		btst	#bitJoyDown,d7
(1)  272/FFFFFFFFFFFF2206 : 6706                		beq.s	.op1_up
(1)  273/FFFFFFFFFFFF2208 : 5355                		subq.w	#1,(a5)
(1)  274/FFFFFFFFFFFF220A : 6000 FF3E           		bra	.show_me
(1)  275/FFFFFFFFFFFF220E :                     .op1_up:
(1)  276/FFFFFFFFFFFF220E :                     
(1)  277/FFFFFFFFFFFF220E : 4E75                		rts
(1)  278/FFFFFFFFFFFF2210 :                     
(1)  279/FFFFFFFFFFFF2210 :                     ; ------------------------------------------------------
(1)  280/FFFFFFFFFFFF2210 :                     ; OPTION 2
(1)  281/FFFFFFFFFFFF2210 :                     ; ------------------------------------------------------
(1)  282/FFFFFFFFFFFF2210 :                     
(1)  283/FFFFFFFFFFFF2210 :                     .option_2:
(1)  284/FFFFFFFFFFFF2210 : 4BF8 D206           		lea	(RAM_GemaArg0).w,a5
(1)  285/FFFFFFFFFFFF2214 : 3E2E 0004           		move.w	on_press(a6),d7
(1)  286/FFFFFFFFFFFF2218 : 0807 0007           		btst	#bitJoyStart,d7
(1)  287/FFFFFFFFFFFF221C : 6798                		beq.s	.option1_args
(1)  288/FFFFFFFFFFFF221E : 301D                		move.w	(a5)+,d0
(1)  289/FFFFFFFFFFFF2220 : 321D                		move.w	(a5)+,d1
(1)  290/FFFFFFFFFFFF2222 : 6000 DFE6           		bra	gemaStopTrack
(1)  291/FFFFFFFFFFFF2226 : 6000 FF22           		bra	.show_me
(1)  292/FFFFFFFFFFFF222A :                     
(1)  293/FFFFFFFFFFFF222A :                     ; ------------------------------------------------------
(1)  294/FFFFFFFFFFFF222A :                     ; OPTION 3
(1)  295/FFFFFFFFFFFF222A :                     ; ------------------------------------------------------
(1)  296/FFFFFFFFFFFF222A :                     
(1)  297/FFFFFFFFFFFF222A :                     .option_3:
(1)  298/FFFFFFFFFFFF222A : 4BF8 D20C           		lea	(RAM_GemaArg3).w,a5
(1)  299/FFFFFFFFFFFF222E : 3E2E 0004           		move.w	on_press(a6),d7
(1)  300/FFFFFFFFFFFF2232 : 0807 0007           		btst	#bitJoyStart,d7
(1)  301/FFFFFFFFFFFF2236 : 6700 FF7E           		beq	.option1_args
(1)  302/FFFFFFFFFFFF223A : 301D                		move.w	(a5)+,d0
(1)  303/FFFFFFFFFFFF223C : 321D                		move.w	(a5)+,d1
(1)  304/FFFFFFFFFFFF223E : 6000 DFE6           		bra	gemaFadeTrack
(1)  305/FFFFFFFFFFFF2242 : 6000 FF06           		bra	.show_me
(1)  306/FFFFFFFFFFFF2246 :                     
(1)  307/FFFFFFFFFFFF2246 :                     ; ------------------------------------------------------
(1)  308/FFFFFFFFFFFF2246 :                     ; OPTION 4
(1)  309/FFFFFFFFFFFF2246 :                     ; ------------------------------------------------------
(1)  310/FFFFFFFFFFFF2246 :                     
(1)  311/FFFFFFFFFFFF2246 :                     .option_4:
(1)  312/FFFFFFFFFFFF2246 : 4BF8 D20C           		lea	(RAM_GemaArg3).w,a5
(1)  313/FFFFFFFFFFFF224A : 3E2E 0004           		move.w	on_press(a6),d7
(1)  314/FFFFFFFFFFFF224E : 0807 0007           		btst	#bitJoyStart,d7
(1)  315/FFFFFFFFFFFF2252 : 6700 FF62           		beq	.option1_args
(1)  316/FFFFFFFFFFFF2256 : 301D                		move.w	(a5)+,d0
(1)  317/FFFFFFFFFFFF2258 : 321D                		move.w	(a5)+,d1
(1)  318/FFFFFFFFFFFF225A : 6000 DFE6           		bra	gemaSetTrackVol
(1)  319/FFFFFFFFFFFF225E : 6000 FEEA           		bra	.show_me
(1)  320/FFFFFFFFFFFF2262 :                     
(1)  321/FFFFFFFFFFFF2262 :                     ; ------------------------------------------------------
(1)  322/FFFFFFFFFFFF2262 :                     ; EXTERNAL BEATS FOR EACH TRACK
(1)  323/FFFFFFFFFFFF2262 :                     ; ------------------------------------------------------
(1)  324/FFFFFFFFFFFF2262 :                     
(1)  325/FFFFFFFFFFFF2262 :                     .extnal_beats:
(1)  326/FFFFFFFFFFFF2262 : 00E8                	dc.w 200+32
(1)  327/FFFFFFFFFFFF2264 : 00DC                	dc.w 200+20
(1)  328/FFFFFFFFFFFF2266 : 00E8                	dc.w 200+32
(1)  329/FFFFFFFFFFFF2268 : 00E8                	dc.w 200+32
(1)  330/FFFFFFFFFFFF226A : 00E8                	dc.w 200+32
(1)  331/FFFFFFFFFFFF226C : 00CC                	dc.w 200+4
(1)  332/FFFFFFFFFFFF226E : 00E8                	dc.w 200+32
(1)  333/FFFFFFFFFFFF2270 : 00E8                	dc.w 200+32
(1)  334/FFFFFFFFFFFF2272 : 00E8                	dc.w 200+32
(1)  335/FFFFFFFFFFFF2274 : 00E8                	dc.w 200+32
(1)  336/FFFFFFFFFFFF2276 : 00E8                	dc.w 200+32
(1)  337/FFFFFFFFFFFF2278 : 00E8                	dc.w 200+32
(1)  338/FFFFFFFFFFFF227A : 00E8                	dc.w 200+32
(1)  339/FFFFFFFFFFFF227C : 00E8                	dc.w 200+32
(1)  340/FFFFFFFFFFFF227E : 00E8                	dc.w 200+32
(1)  341/FFFFFFFFFFFF2280 : 00E8                	dc.w 200+32
(1)  342/FFFFFFFFFFFF2282 : 00E8                	dc.w 200+32
(1)  343/FFFFFFFFFFFF2284 : 00E8                	dc.w 200+32
(1)  344/FFFFFFFFFFFF2286 : 00E8                	dc.w 200+32
(1)  345/FFFFFFFFFFFF2288 : 00E8                	dc.w 200+32
(1)  346/FFFFFFFFFFFF228A : 00E8                	dc.w 200+32
(1)  347/FFFFFFFFFFFF228C : 00E8                	dc.w 200+32
(1)  348/FFFFFFFFFFFF228E :                     
(1)  349/FFFFFFFFFFFF228E :                     ; ====================================================================
(1)  350/FFFFFFFFFFFF228E :                     ; ------------------------------------------------------
(1)  351/FFFFFFFFFFFF228E :                     ; DATA assets locations for 68K and SH2
(1)  352/FFFFFFFFFFFF228E :                     ; ------------------------------------------------------
(1)  353/FFFFFFFFFFFF228E :                     
(1)  354/FFFFFFFFFFFF228E :                     file_mddata_def:
(1)  355/FFFFFFFFFFFF228E : 4441 5441 424E      		dc.b "DATABNKD.BIN",0		; CD Filename
         FFFFFFFFFFFF2294 : 4B44 2E42 494E 00 
(1)  356/FFFFFFFFFFFF229B :                     		align 2
(1)  357/FFFFFFFFFFFF229C :                     
(1)  358/FFFFFFFFFFFF229C :                     pointr_marsdata_def:
(1)  359/FFFFFFFFFFFF229C : 0007 E800           		dc.l MARSDATA_DEFAULT		; 32X Cartridge point
(1)  360/FFFFFFFFFFFF22A0 : 4D41 5253 445F      		dc.b "MARSD_00.BIN",0		; CD Filename
         FFFFFFFFFFFF22A6 : 3030 2E42 494E 00 
(1)  361/FFFFFFFFFFFF22AD :                     		align 2
(1)  362/FFFFFFFFFFFF22AE :                     
(1)  363/FFFFFFFFFFFF22AE :                     ; ====================================================================
(1)  364/FFFFFFFFFFFF22AE :                     ; ------------------------------------------------------
(1)  365/FFFFFFFFFFFF22AE :                     ; Objects
(1)  366/FFFFFFFFFFFF22AE :                     ; ------------------------------------------------------
(1)  367/FFFFFFFFFFFF22AE :                     
(1)  368/FFFFFFFFFFFF22AE :                     ; ; --------------------------------------------------
(1)  369/FFFFFFFFFFFF22AE :                     ; ; Mikami
(1)  370/FFFFFFFFFFFF22AE :                     ; ; --------------------------------------------------
(1)  371/FFFFFFFFFFFF22AE :                     ;
(1)  372/FFFFFFFFFFFF22AE :                     ; Object_Mikami:
(1)  373/FFFFFFFFFFFF22AE :                     ; 		moveq	#0,d0
(1)  374/FFFFFFFFFFFF22AE :                     ; 		move.b	obj_index(a6),d0
(1)  375/FFFFFFFFFFFF22AE :                     ; 		add.w	d0,d0
(1)  376/FFFFFFFFFFFF22AE :                     ; 		move.w	.list(pc,d0.w),d1
(1)  377/FFFFFFFFFFFF22AE :                     ; 		jmp	.list(pc,d1.w)
(1)  378/FFFFFFFFFFFF22AE :                     ; ; ----------------------------------------------
(1)  379/FFFFFFFFFFFF22AE :                     ; .list:		dc.w .init-.list
(1)  380/FFFFFFFFFFFF22AE :                     ; 		dc.w .main-.list
(1)  381/FFFFFFFFFFFF22AE :                     ; ; ----------------------------------------------
(1)  382/FFFFFFFFFFFF22AE :                     ; .init:
(1)  383/FFFFFFFFFFFF22AE :                     ; 		move.b	#1,obj_index(a6)
(1)  384/FFFFFFFFFFFF22AE :                     ; 		move.l	#objMap_Mikami,obj_map(a6)
(1)  385/FFFFFFFFFFFF22AE :                     ; 		move.l	#objDma_Mikami,obj_dma(a6)
(1)  386/FFFFFFFFFFFF22AE :                     ; 		move.w	#setVram_Mikami|$2000,obj_vram(a6)
(1)  387/FFFFFFFFFFFF22AE :                     ; 		bclr	#bitobj_Mars,obj_set(a6)	; Genesis object
(1)  388/FFFFFFFFFFFF22AE :                     ; 		move.w	#(320/2)+48,obj_x(a6)
(1)  389/FFFFFFFFFFFF22AE :                     ; 		move.w	#(224/2)+64,obj_y(a6)
(1)  390/FFFFFFFFFFFF22AE :                     ; 		clr.w	obj_frame(a6)
(1)  391/FFFFFFFFFFFF22AE :                     ; 		bsr	object_AnimReset
(1)  392/FFFFFFFFFFFF22AE :                     ; 		bset	#0,obj_status(a6)
(1)  393/FFFFFFFFFFFF22AE :                     ; 		bset	#bitobj_flipH,obj_set(a6)
(1)  394/FFFFFFFFFFFF22AE :                     ;
(1)  395/FFFFFFFFFFFF22AE :                     ; ; ----------------------------------------------
(1)  396/FFFFFFFFFFFF22AE :                     ; .main:
(1)  397/FFFFFFFFFFFF22AE :                     ; 		lea	(Controller_2),a3
(1)  398/FFFFFFFFFFFF22AE :                     ; 		btst	#0,obj_status(a6)
(1)  399/FFFFFFFFFFFF22AE :                     ; 		beq.s	.no_fallspd
(1)  400/FFFFFFFFFFFF22AE :                     ; 		add.w	#$40,obj_y_spd(a6)
(1)  401/FFFFFFFFFFFF22AE :                     ; .no_fallspd:
(1)  402/FFFFFFFFFFFF22AE :                     ;
(1)  403/FFFFFFFFFFFF22AE :                     ; ; .fake_col_c:
(1)  404/FFFFFFFFFFFF22AE :                     ; 		move.w	on_press(a3),d7
(1)  405/FFFFFFFFFFFF22AE :                     ; 		btst	#bitJoyC,d7
(1)  406/FFFFFFFFFFFF22AE :                     ; 		beq.s	.fake_jump
(1)  407/FFFFFFFFFFFF22AE :                     ; 		btst	#0,obj_status(a6)
(1)  408/FFFFFFFFFFFF22AE :                     ; 		bne.s	.fake_jump
(1)  409/FFFFFFFFFFFF22AE :                     ; 		move.w	#-$500,obj_y_spd(a6)
(1)  410/FFFFFFFFFFFF22AE :                     ; 		move.b	#2,obj_anim_id(a6)
(1)  411/FFFFFFFFFFFF22AE :                     ; 		bset	#0,obj_status(a6)
(1)  412/FFFFFFFFFFFF22AE :                     ;
(1)  413/FFFFFFFFFFFF22AE :                     ; 		moveq	#$0F,d0
(1)  414/FFFFFFFFFFFF22AE :                     ; 		moveq	#1,d1
(1)  415/FFFFFFFFFFFF22AE :                     ; 		bsr	gemaPlayFromBlk
(1)  416/FFFFFFFFFFFF22AE :                     ;
(1)  417/FFFFFFFFFFFF22AE :                     ; .fake_jump:
(1)  418/FFFFFFFFFFFF22AE :                     ; 		move.w	on_press(a3),d7
(1)  419/FFFFFFFFFFFF22AE :                     ; 		btst	#bitJoyB,d7
(1)  420/FFFFFFFFFFFF22AE :                     ; 		beq.s	.no_slash
(1)  421/FFFFFFFFFFFF22AE :                     ; 		tst.w	obj_y_spd(a6)
(1)  422/FFFFFFFFFFFF22AE :                     ; 		bne.s	.no_slash
(1)  423/FFFFFFFFFFFF22AE :                     ; 		clr.w	obj_anim_indx(a6)
(1)  424/FFFFFFFFFFFF22AE :                     ; 		move.b	#4,obj_anim_id(a6)
(1)  425/FFFFFFFFFFFF22AE :                     ; 		move.w	#$10,obj_ram+2(a6)
(1)  426/FFFFFFFFFFFF22AE :                     ;
(1)  427/FFFFFFFFFFFF22AE :                     ; 		moveq	#$0F,d0
(1)  428/FFFFFFFFFFFF22AE :                     ; 		moveq	#0,d1
(1)  429/FFFFFFFFFFFF22AE :                     ; 		bsr	gemaPlayFromBlk
(1)  430/FFFFFFFFFFFF22AE :                     ;
(1)  431/FFFFFFFFFFFF22AE :                     ; .no_slash:
(1)  432/FFFFFFFFFFFF22AE :                     ; 		clr.w	obj_x_spd(a6)
(1)  433/FFFFFFFFFFFF22AE :                     ;
(1)  434/FFFFFFFFFFFF22AE :                     ; 		moveq	#0,d0
(1)  435/FFFFFFFFFFFF22AE :                     ; 		moveq	#0,d1
(1)  436/FFFFFFFFFFFF22AE :                     ; 		move.w	on_hold(a3),d7
(1)  437/FFFFFFFFFFFF22AE :                     ; 		move.w	d7,d6
(1)  438/FFFFFFFFFFFF22AE :                     ; 		andi.w	#JoyLeft+JoyRight,d6
(1)  439/FFFFFFFFFFFF22AE :                     ; 		beq.s	.move_mika
(1)  440/FFFFFFFFFFFF22AE :                     ; 		clr.w	obj_ram+2(a6)
(1)  441/FFFFFFFFFFFF22AE :                     ; 		move.w	#$180,d6
(1)  442/FFFFFFFFFFFF22AE :                     ; 		btst	#bitJoyRight,d7
(1)  443/FFFFFFFFFFFF22AE :                     ; 		beq.s	.no_l
(1)  444/FFFFFFFFFFFF22AE :                     ; 		move.w	d6,obj_x_spd(a6)
(1)  445/FFFFFFFFFFFF22AE :                     ; .no_l
(1)  446/FFFFFFFFFFFF22AE :                     ; 		neg.w	d6
(1)  447/FFFFFFFFFFFF22AE :                     ; 		btst	#bitJoyLeft,d7
(1)  448/FFFFFFFFFFFF22AE :                     ; 		beq.s	.move_mika
(1)  449/FFFFFFFFFFFF22AE :                     ; 		move.w	d6,obj_x_spd(a6)
(1)  450/FFFFFFFFFFFF22AE :                     ; .move_mika:
(1)  451/FFFFFFFFFFFF22AE :                     ;
(1)  452/FFFFFFFFFFFF22AE :                     ;
(1)  453/FFFFFFFFFFFF22AE :                     ; 		moveq	#0,d6
(1)  454/FFFFFFFFFFFF22AE :                     ; 		tst.w	obj_x_spd(a6)
(1)  455/FFFFFFFFFFFF22AE :                     ; 		beq.s	.r_spd
(1)  456/FFFFFFFFFFFF22AE :                     ; 		moveq	#1,d6
(1)  457/FFFFFFFFFFFF22AE :                     ; 		move.b	obj_set(a6),d7
(1)  458/FFFFFFFFFFFF22AE :                     ; 		bclr	#bitobj_flipH,d7
(1)  459/FFFFFFFFFFFF22AE :                     ; 		tst.w	obj_x_spd(a6)
(1)  460/FFFFFFFFFFFF22AE :                     ; 		bpl.s	.r_flip
(1)  461/FFFFFFFFFFFF22AE :                     ; 		bset	#bitobj_flipH,d7
(1)  462/FFFFFFFFFFFF22AE :                     ; .r_flip:
(1)  463/FFFFFFFFFFFF22AE :                     ; 		move.b	d7,obj_set(a6)
(1)  464/FFFFFFFFFFFF22AE :                     ; .r_spd:
(1)  465/FFFFFFFFFFFF22AE :                     ;
(1)  466/FFFFFFFFFFFF22AE :                     ; 		tst.w	obj_ram+2(a6)
(1)  467/FFFFFFFFFFFF22AE :                     ; 		beq.s	.free_anim
(1)  468/FFFFFFFFFFFF22AE :                     ; 		subi.w	#1,obj_ram+2(a6)
(1)  469/FFFFFFFFFFFF22AE :                     ; 		bne.s	.no_anim
(1)  470/FFFFFFFFFFFF22AE :                     ; .free_anim:
(1)  471/FFFFFFFFFFFF22AE :                     ; 		btst	#0,obj_status(a6)
(1)  472/FFFFFFFFFFFF22AE :                     ; 		bne.s	.no_anim
(1)  473/FFFFFFFFFFFF22AE :                     ; 		tst.w	obj_y_spd(a6)
(1)  474/FFFFFFFFFFFF22AE :                     ; 		bmi.s	.is_jumpin
(1)  475/FFFFFFFFFFFF22AE :                     ; 		move.b	d6,obj_anim_id(a6)
(1)  476/FFFFFFFFFFFF22AE :                     ; .is_jumpin:
(1)  477/FFFFFFFFFFFF22AE :                     ; 		tst.w	obj_y_spd(a6)
(1)  478/FFFFFFFFFFFF22AE :                     ; 		beq.s	.no_anim
(1)  479/FFFFFFFFFFFF22AE :                     ; 		move.b	#3,obj_anim_id(a6)
(1)  480/FFFFFFFFFFFF22AE :                     ; .no_anim:
(1)  481/FFFFFFFFFFFF22AE :                     ; 		bsr	object_Speed
(1)  482/FFFFFFFFFFFF22AE :                     ;
(1)  483/FFFFFFFFFFFF22AE :                     ; 		move.w	#(224-16)-32,d7
(1)  484/FFFFFFFFFFFF22AE :                     ; 		move.w	obj_y(a6),d0
(1)  485/FFFFFFFFFFFF22AE :                     ; 		cmp.w	d7,d0
(1)  486/FFFFFFFFFFFF22AE :                     ; 		blt.s	.fake_col
(1)  487/FFFFFFFFFFFF22AE :                     ; 		clr.w	obj_y_spd(a6)
(1)  488/FFFFFFFFFFFF22AE :                     ; 		andi.w	#-$10,obj_y(a6)
(1)  489/FFFFFFFFFFFF22AE :                     ; 		bclr	#0,obj_status(a6)
(1)  490/FFFFFFFFFFFF22AE :                     ; .fake_col:
(1)  491/FFFFFFFFFFFF22AE :                     ;
(1)  492/FFFFFFFFFFFF22AE :                     ; ; 		move.w	(Controller_2+on_press),d7
(1)  493/FFFFFFFFFFFF22AE :                     ; ; 		btst	#bitClickM,d7
(1)  494/FFFFFFFFFFFF22AE :                     ; ; 		beq.s	.no_reset
(1)  495/FFFFFFFFFFFF22AE :                     ; ; 		move.w	#320/2,obj_x(a6)
(1)  496/FFFFFFFFFFFF22AE :                     ; ; 		move.w	#224/2,obj_y(a6)
(1)  497/FFFFFFFFFFFF22AE :                     ; ; .no_reset:
(1)  498/FFFFFFFFFFFF22AE :                     ; 		lea	.anim_data(pc),a0
(1)  499/FFFFFFFFFFFF22AE :                     ; 		bsr	object_Animate
(1)  500/FFFFFFFFFFFF22AE :                     ; 		bra	object_Display
(1)  501/FFFFFFFFFFFF22AE :                     ;
(1)  502/FFFFFFFFFFFF22AE :                     ; ; ----------------------------------------------
(1)  503/FFFFFFFFFFFF22AE :                     ;
(1)  504/FFFFFFFFFFFF22AE :                     ; .anim_data:
(1)  505/FFFFFFFFFFFF22AE :                     ; 		dc.w .anim_stand-.anim_data
(1)  506/FFFFFFFFFFFF22AE :                     ; 		dc.w .anim_move-.anim_data
(1)  507/FFFFFFFFFFFF22AE :                     ; 		dc.w .anim_jump-.anim_data
(1)  508/FFFFFFFFFFFF22AE :                     ; 		dc.w .anim_fall-.anim_data
(1)  509/FFFFFFFFFFFF22AE :                     ; 		dc.w .anim_slash-.anim_data
(1)  510/FFFFFFFFFFFF22AE :                     ; .anim_stand:
(1)  511/FFFFFFFFFFFF22AE :                     ; 		dc.w 6
(1)  512/FFFFFFFFFFFF22AE :                     ; 		dc.w 0,-1
(1)  513/FFFFFFFFFFFF22AE :                     ; 		align 2
(1)  514/FFFFFFFFFFFF22AE :                     ; .anim_move:
(1)  515/FFFFFFFFFFFF22AE :                     ; 		dc.w 5
(1)  516/FFFFFFFFFFFF22AE :                     ; 		dc.w 2,3,4,5,6,7,8,-3,1
(1)  517/FFFFFFFFFFFF22AE :                     ; 		align 2
(1)  518/FFFFFFFFFFFF22AE :                     ; .anim_jump:
(1)  519/FFFFFFFFFFFF22AE :                     ; 		dc.w 5
(1)  520/FFFFFFFFFFFF22AE :                     ; 		dc.w 10,11,12,-3,2
(1)  521/FFFFFFFFFFFF22AE :                     ; 		align 2
(1)  522/FFFFFFFFFFFF22AE :                     ; .anim_fall:
(1)  523/FFFFFFFFFFFF22AE :                     ; 		dc.w 5
(1)  524/FFFFFFFFFFFF22AE :                     ; 		dc.w 11,12,-3,1
(1)  525/FFFFFFFFFFFF22AE :                     ; 		align 2
(1)  526/FFFFFFFFFFFF22AE :                     ; .anim_slash:
(1)  527/FFFFFFFFFFFF22AE :                     ; 		dc.w 1
(1)  528/FFFFFFFFFFFF22AE :                     ; 		dc.w 14,15,16,17,-2
(1)  529/FFFFFFFFFFFF22AE :                     ; 		align 2
(1)  530/FFFFFFFFFFFF22AE :                     ;
(1)  531/FFFFFFFFFFFF22AE :                     ; --------------------------------------------------
(1)  532/FFFFFFFFFFFF22AE :                     ; Sisi
(1)  533/FFFFFFFFFFFF22AE :                     ; --------------------------------------------------
(1)  534/FFFFFFFFFFFF22AE :                     
(1)  535/FFFFFFFFFFFF22AE :                     Object_Sisi:
(1)  536/FFFFFFFFFFFF22AE : 7000                		moveq	#0,d0
(1)  537/FFFFFFFFFFFF22B0 : 102E 0021           		move.b	obj_index(a6),d0
(1)  538/FFFFFFFFFFFF22B4 : D040                		add.w	d0,d0
(1)  539/FFFFFFFFFFFF22B6 : 323B 0006           		move.w	.list(pc,d0.w),d1
(1)  540/FFFFFFFFFFFF22BA : 4EFB 1002           		jmp	.list(pc,d1.w)
(1)  541/FFFFFFFFFFFF22BE :                     ; ----------------------------------------------
(1)  542/FFFFFFFFFFFF22BE : 0004                .list:		dc.w .init-.list
(1)  543/FFFFFFFFFFFF22C0 : 002E                		dc.w .main-.list
(1)  544/FFFFFFFFFFFF22C2 :                     ; ----------------------------------------------
(1)  545/FFFFFFFFFFFF22C2 :                     .init:
(1)  546/FFFFFFFFFFFF22C2 : 1D7C 0001 0021      		move.b	#1,obj_index(a6)
(1)  547/FFFFFFFFFFFF22C8 : 2D7C 0020 0D30      		move.l	#objMap_Sisi,obj_map(a6)
         FFFFFFFFFFFF22CE : 000C             
(1)  548/FFFFFFFFFFFF22D0 : 2D7C 0000 0000      		move.l	#0,obj_dma(a6)
         FFFFFFFFFFFF22D6 : 0010             
(1)  549/FFFFFFFFFFFF22D8 : 3D7C 2480 0014      		move.w	#setVram_Sisi|$2000,obj_vram(a6)
(1)  550/FFFFFFFFFFFF22DE : 08AE 0007 0022      		bclr	#bitobj_Mars,obj_set(a6)	; Genesis object
(1)  551/FFFFFFFFFFFF22E4 :                     ; 		move.w	#320/2,obj_x(a6)
(1)  552/FFFFFFFFFFFF22E4 :                     ; 		move.w	#224/2,obj_y(a6)
(1)  553/FFFFFFFFFFFF22E4 : 426E 001E           		clr.w	obj_frame(a6)
(1)  554/FFFFFFFFFFFF22E8 : 6100 EB78           		bsr	object_AnimReset
(1)  555/FFFFFFFFFFFF22EC :                     
(1)  556/FFFFFFFFFFFF22EC :                     ; ----------------------------------------------
(1)  557/FFFFFFFFFFFF22EC :                     .main:
(1)  558/FFFFFFFFFFFF22EC :                     ; 		move.w	obj_ram(a6),d0
(1)  559/FFFFFFFFFFFF22EC :                     ; 		move.w	obj_ram+2(a6),d1
(1)  560/FFFFFFFFFFFF22EC :                     
(1)  561/FFFFFFFFFFFF22EC :                     
(1)  562/FFFFFFFFFFFF22EC : 7000                		moveq	#0,d0
(1)  563/FFFFFFFFFFFF22EE :                     
(1)  564/FFFFFFFFFFFF22EE : 3238 D204           		move.w	(RAM_CurrPick).w,d1
(1)  565/FFFFFFFFFFFF22F2 : E749                		lsl.w	#3,d1
(1)  566/FFFFFFFFFFFF22F4 :                     
(1)  567/FFFFFFFFFFFF22F4 : 0640 0018           		addi.w	#$18,d0
(1)  568/FFFFFFFFFFFF22F8 : 0641 0020           		addi.w	#$20,d1
(1)  569/FFFFFFFFFFFF22FC : 3D40 0004           		move.w	d0,obj_x(a6)
(1)  570/FFFFFFFFFFFF2300 : 3D41 0008           		move.w	d1,obj_y(a6)
(1)  571/FFFFFFFFFFFF2304 :                     
(1)  572/FFFFFFFFFFFF2304 :                     ; 		lea	(RAM_Objects),a0
(1)  573/FFFFFFFFFFFF2304 :                     ; 		cmp.l	#Object_Mikami,obj_code(a0)
(1)  574/FFFFFFFFFFFF2304 :                     ; 		bne.s	.dont_link
(1)  575/FFFFFFFFFFFF2304 :                     ; 		move.w	obj_ram+2(a6),d7
(1)  576/FFFFFFFFFFFF2304 :                     ; 		cmp.w	#24<<1,d7
(1)  577/FFFFFFFFFFFF2304 :                     ; 		bge.s	.dont_incr
(1)  578/FFFFFFFFFFFF2304 :                     ; 		add.w	#2,d7
(1)  579/FFFFFFFFFFFF2304 :                     ; .dont_incr:
(1)  580/FFFFFFFFFFFF2304 :                     ; 		move.w	d7,obj_ram+2(a6)
(1)  581/FFFFFFFFFFFF2304 :                     ;
(1)  582/FFFFFFFFFFFF2304 :                     ; 		move.w	obj_x(a0),d7
(1)  583/FFFFFFFFFFFF2304 :                     ; 		move.w	obj_y(a0),d6
(1)  584/FFFFFFFFFFFF2304 :                     ; 		move.w	#24,d5
(1)  585/FFFFFFFFFFFF2304 :                     ; 		sub.w	d5,d6
(1)  586/FFFFFFFFFFFF2304 :                     ; 		move.w	obj_ram(a6),d0
(1)  587/FFFFFFFFFFFF2304 :                     ; 		moveq	#4,d1
(1)  588/FFFFFFFFFFFF2304 :                     ; 		bsr	System_SineWave
(1)  589/FFFFFFFFFFFF2304 :                     ; 		asr.w	#8,d2
(1)  590/FFFFFFFFFFFF2304 :                     ; 		add.w	d2,d6
(1)  591/FFFFFFFFFFFF2304 :                     ; 		moveq	#5,d1
(1)  592/FFFFFFFFFFFF2304 :                     ; 		bsr	System_SineWave_Cos
(1)  593/FFFFFFFFFFFF2304 :                     ; 		asr.w	#8,d2
(1)  594/FFFFFFFFFFFF2304 :                     ; 		add.w	d2,d7
(1)  595/FFFFFFFFFFFF2304 :                     ;
(1)  596/FFFFFFFFFFFF2304 :                     ; 		move.b	obj_set(a6),d0
(1)  597/FFFFFFFFFFFF2304 :                     ; 		move.b	obj_set(a0),d1
(1)  598/FFFFFFFFFFFF2304 :                     ; 		eor.w	d1,d0
(1)  599/FFFFFFFFFFFF2304 :                     ; 		andi.w	#1,d0
(1)  600/FFFFFFFFFFFF2304 :                     ; 		beq.s	.same_h
(1)  601/FFFFFFFFFFFF2304 :                     ; 		clr.w	obj_ram+2(a6)
(1)  602/FFFFFFFFFFFF2304 :                     ; .same_h:
(1)  603/FFFFFFFFFFFF2304 :                     ; 		move.w	obj_ram+2(a6),d4
(1)  604/FFFFFFFFFFFF2304 :                     ; 		bclr	#bitobj_flipH,obj_set(a6)
(1)  605/FFFFFFFFFFFF2304 :                     ; 		btst	#bitobj_flipH,obj_set(a0)
(1)  606/FFFFFFFFFFFF2304 :                     ; 		beq.s	.dont_flipx
(1)  607/FFFFFFFFFFFF2304 :                     ; 		neg.w	d4
(1)  608/FFFFFFFFFFFF2304 :                     ; 		bset	#bitobj_flipH,obj_set(a6)
(1)  609/FFFFFFFFFFFF2304 :                     ; .dont_flipx:
(1)  610/FFFFFFFFFFFF2304 :                     ; 		lsr.w	#1,d4
(1)  611/FFFFFFFFFFFF2304 :                     ; 		add.w	d4,d7
(1)  612/FFFFFFFFFFFF2304 :                     ; 		move.w	d6,obj_y(a6)
(1)  613/FFFFFFFFFFFF2304 :                     ; 		move.w	d7,obj_x(a6)
(1)  614/FFFFFFFFFFFF2304 :                     ; 		add.w	#4,obj_ram(a6)
(1)  615/FFFFFFFFFFFF2304 :                     
(1)  616/FFFFFFFFFFFF2304 :                     .dont_link:
(1)  617/FFFFFFFFFFFF2304 : 41FA 000A           		lea	.anim_data(pc),a0
(1)  618/FFFFFFFFFFFF2308 : 6100 EACC           		bsr	object_Animate
(1)  619/FFFFFFFFFFFF230C : 6000 EA2C           		bra	object_Display
(1)  620/FFFFFFFFFFFF2310 :                     
(1)  621/FFFFFFFFFFFF2310 :                     ; ----------------------------------------------
(1)  622/FFFFFFFFFFFF2310 :                     
(1)  623/FFFFFFFFFFFF2310 :                     .anim_data:
(1)  624/FFFFFFFFFFFF2310 : 0008                		dc.w .anim_00-.anim_data
(1)  625/FFFFFFFFFFFF2312 : 0008                		dc.w .anim_00-.anim_data
(1)  626/FFFFFFFFFFFF2314 : 0008                		dc.w .anim_00-.anim_data
(1)  627/FFFFFFFFFFFF2316 : 0008                		dc.w .anim_00-.anim_data
(1)  628/FFFFFFFFFFFF2318 :                     .anim_00:
(1)  629/FFFFFFFFFFFF2318 : 0008                		dc.w 8
(1)  630/FFFFFFFFFFFF231A : 0000 0001 0002      		dc.w 0,1,2,1,-1
         FFFFFFFFFFFF2320 : 0001 FFFF          
(1)  631/FFFFFFFFFFFF2324 :                     		align 2
(1)  632/FFFFFFFFFFFF2326 :                     ;
(1)  633/FFFFFFFFFFFF2326 :                     ; ; --------------------------------------------------
(1)  634/FFFFFFFFFFFF2326 :                     ; ; Ball
(1)  635/FFFFFFFFFFFF2326 :                     ; ; --------------------------------------------------
(1)  636/FFFFFFFFFFFF2326 :                     ;
(1)  637/FFFFFFFFFFFF2326 :                     ; Object_ball:
(1)  638/FFFFFFFFFFFF2326 :                     ; 		moveq	#0,d0
(1)  639/FFFFFFFFFFFF2326 :                     ; 		move.b	obj_index(a6),d0
(1)  640/FFFFFFFFFFFF2326 :                     ; 		add.w	d0,d0
(1)  641/FFFFFFFFFFFF2326 :                     ; 		move.w	.list(pc,d0.w),d1
(1)  642/FFFFFFFFFFFF2326 :                     ; 		jmp	.list(pc,d1.w)
(1)  643/FFFFFFFFFFFF2326 :                     ; ; ----------------------------------------------
(1)  644/FFFFFFFFFFFF2326 :                     ; .list:		dc.w .init-.list
(1)  645/FFFFFFFFFFFF2326 :                     ; 		dc.w .main-.list
(1)  646/FFFFFFFFFFFF2326 :                     ; ; ----------------------------------------------
(1)  647/FFFFFFFFFFFF2326 :                     ; .init:
(1)  648/FFFFFFFFFFFF2326 :                     ; 		move.b	#1,obj_index(a6)
(1)  649/FFFFFFFFFFFF2326 :                     ; 		move.l	#objMap_Sisi,obj_map(a6)
(1)  650/FFFFFFFFFFFF2326 :                     ; 		move.l	#0,obj_dma(a6)
(1)  651/FFFFFFFFFFFF2326 :                     ; 		move.w	#setVram_Sisi|$0000,obj_vram(a6)
(1)  652/FFFFFFFFFFFF2326 :                     ; 		bclr	#bitobj_Mars,obj_set(a6)	; Genesis object
(1)  653/FFFFFFFFFFFF2326 :                     ; 		move.w	#320/2,obj_x(a6)
(1)  654/FFFFFFFFFFFF2326 :                     ; 		move.w	#224/2,obj_y(a6)
(1)  655/FFFFFFFFFFFF2326 :                     ; 		clr.w	obj_frame(a6)
(1)  656/FFFFFFFFFFFF2326 :                     ; 		bsr	object_AnimReset
(1)  657/FFFFFFFFFFFF2326 :                     ;
(1)  658/FFFFFFFFFFFF2326 :                     ; 		move.w	#$180,obj_x_spd(a6)
(1)  659/FFFFFFFFFFFF2326 :                     ; 		move.w	#$180,obj_y_spd(a6)
(1)  660/FFFFFFFFFFFF2326 :                     ;
(1)  661/FFFFFFFFFFFF2326 :                     ; ; ----------------------------------------------
(1)  662/FFFFFFFFFFFF2326 :                     ; .main:
(1)  663/FFFFFFFFFFFF2326 :                     ; 		move.w	obj_x(a6),d0
(1)  664/FFFFFFFFFFFF2326 :                     ; 		move.w	obj_y(a6),d1
(1)  665/FFFFFFFFFFFF2326 :                     ; 		sub.w	#16,d0
(1)  666/FFFFFFFFFFFF2326 :                     ; 		sub.w	#16,d1
(1)  667/FFFFFFFFFFFF2326 :                     ; 		move.w	#320-32,d2
(1)  668/FFFFFFFFFFFF2326 :                     ; 		move.w	#(224-16)-32,d3
(1)  669/FFFFFFFFFFFF2326 :                     ;
(1)  670/FFFFFFFFFFFF2326 :                     ; 		tst.w	d1
(1)  671/FFFFFFFFFFFF2326 :                     ; 		bpl.s	.on_scrn_yu
(1)  672/FFFFFFFFFFFF2326 :                     ; 		neg.w	obj_y_spd(a6)
(1)  673/FFFFFFFFFFFF2326 :                     ; 		bsr	.playit
(1)  674/FFFFFFFFFFFF2326 :                     ; .on_scrn_yu:
(1)  675/FFFFFFFFFFFF2326 :                     ; 		cmp.w	d3,d1
(1)  676/FFFFFFFFFFFF2326 :                     ; 		blt.s	.on_scrn_yd
(1)  677/FFFFFFFFFFFF2326 :                     ; 		neg.w	obj_y_spd(a6)
(1)  678/FFFFFFFFFFFF2326 :                     ; 		bsr	.playit
(1)  679/FFFFFFFFFFFF2326 :                     ; .on_scrn_yd:
(1)  680/FFFFFFFFFFFF2326 :                     ;
(1)  681/FFFFFFFFFFFF2326 :                     ; 		tst.w	d0
(1)  682/FFFFFFFFFFFF2326 :                     ; 		bpl.s	.on_scrn_xu
(1)  683/FFFFFFFFFFFF2326 :                     ; 		neg.w	obj_x_spd(a6)
(1)  684/FFFFFFFFFFFF2326 :                     ; 		bsr.s	.playit
(1)  685/FFFFFFFFFFFF2326 :                     ; .on_scrn_xu:
(1)  686/FFFFFFFFFFFF2326 :                     ; 		cmp.w	d2,d0
(1)  687/FFFFFFFFFFFF2326 :                     ; 		blt.s	.on_scrn_xd
(1)  688/FFFFFFFFFFFF2326 :                     ; 		neg.w	obj_x_spd(a6)
(1)  689/FFFFFFFFFFFF2326 :                     ; 		bsr.s	.playit
(1)  690/FFFFFFFFFFFF2326 :                     ; .on_scrn_xd:
(1)  691/FFFFFFFFFFFF2326 :                     ;
(1)  692/FFFFFFFFFFFF2326 :                     ; 		bsr	object_Speed
(1)  693/FFFFFFFFFFFF2326 :                     ;
(1)  694/FFFFFFFFFFFF2326 :                     ; 		lea	.anim_data(pc),a0
(1)  695/FFFFFFFFFFFF2326 :                     ; 		bsr	object_Animate
(1)  696/FFFFFFFFFFFF2326 :                     ; 		bra	object_Display
(1)  697/FFFFFFFFFFFF2326 :                     ; .playit:
(1)  698/FFFFFFFFFFFF2326 :                     ; 		moveq	#$0F,d0
(1)  699/FFFFFFFFFFFF2326 :                     ; 		moveq	#2,d1
(1)  700/FFFFFFFFFFFF2326 :                     ; 		bra	gemaPlayFromBlk
(1)  701/FFFFFFFFFFFF2326 :                     ;
(1)  702/FFFFFFFFFFFF2326 :                     ; ; ----------------------------------------------
(1)  703/FFFFFFFFFFFF2326 :                     ;
(1)  704/FFFFFFFFFFFF2326 :                     ; .anim_data:
(1)  705/FFFFFFFFFFFF2326 :                     ; 		dc.w .anim_00-.anim_data
(1)  706/FFFFFFFFFFFF2326 :                     ; 		dc.w .anim_00-.anim_data
(1)  707/FFFFFFFFFFFF2326 :                     ; 		dc.w .anim_00-.anim_data
(1)  708/FFFFFFFFFFFF2326 :                     ; 		dc.w .anim_00-.anim_data
(1)  709/FFFFFFFFFFFF2326 :                     ; .anim_00:
(1)  710/FFFFFFFFFFFF2326 :                     ; 		dc.w 8
(1)  711/FFFFFFFFFFFF2326 :                     ; 		dc.w 0,1,2,1,-1
(1)  712/FFFFFFFFFFFF2326 :                     ; 		align 2
(1)  713/FFFFFFFFFFFF2326 :                     
(1)  714/FFFFFFFFFFFF2326 :                     ; ====================================================================
(1)  715/FFFFFFFFFFFF2326 :                     ; ------------------------------------------------------
(1)  716/FFFFFFFFFFFF2326 :                     ; Subroutines
(1)  717/FFFFFFFFFFFF2326 :                     ; ------------------------------------------------------
(1)  718/FFFFFFFFFFFF2326 :                     
(1)  719/FFFFFFFFFFFF2326 :                     ; ====================================================================
(1)  720/FFFFFFFFFFFF2326 :                     ; ------------------------------------------------------
(1)  721/FFFFFFFFFFFF2326 :                     ; Custom VBlank
(1)  722/FFFFFFFFFFFF2326 :                     ; ------------------------------------------------------
(1)  723/FFFFFFFFFFFF2326 :                     
(1)  724/FFFFFFFFFFFF2326 :                     ; ------------------------------------------------------
(1)  725/FFFFFFFFFFFF2326 :                     ; Custom HBlank
(1)  726/FFFFFFFFFFFF2326 :                     ; ------------------------------------------------------
(1)  727/FFFFFFFFFFFF2326 :                     
(1)  728/FFFFFFFFFFFF2326 :                     ; ====================================================================
(1)  729/FFFFFFFFFFFF2326 :                     ; ------------------------------------------------------
(1)  730/FFFFFFFFFFFF2326 :                     ; Small DATA section
(1)  731/FFFFFFFFFFFF2326 :                     ; ------------------------------------------------------
(1)  732/FFFFFFFFFFFF2326 :                     
(1)  733/FFFFFFFFFFFF2326 :                     PAL_TEST:
(1)  734/FFFFFFFFFFFF2326 :                     		binclude "game/screen_0/data/maps/md/test/md_pal.bin"
(1)  735/FFFFFFFFFFFF2342 :                     		align 2
(1)  736/FFFFFFFFFFFF2344 :                     
(1)  737/FFFFFFFFFFFF2344 :                     ; str_ShowPsg:	dc.b "\\w \\w \\w \\w",0
(1)  738/FFFFFFFFFFFF2344 :                     ; 		dc.l RAM_ChnlLinks,RAM_ChnlLinks+2,RAM_ChnlLinks+4,RAM_ChnlLinks+6
(1)  739/FFFFFFFFFFFF2344 :                     ; 		align 2
(1)  740/FFFFFFFFFFFF2344 :                     ; str_ShowFm:	dc.b "\\w \\w \\w \\w \\w \\w",0
(1)  741/FFFFFFFFFFFF2344 :                     ; 		dc.l RAM_ChnlLinks+8,RAM_ChnlLinks+10,RAM_ChnlLinks+12
(1)  742/FFFFFFFFFFFF2344 :                     ; 		dc.l RAM_ChnlLinks+14,RAM_ChnlLinks+16,RAM_ChnlLinks+18
(1)  743/FFFFFFFFFFFF2344 :                     ; 		align 2
(1)  744/FFFFFFFFFFFF2344 :                     ; str_ShowPcm:	dc.b "\\w \\w \\w \\w",$0A
(1)  745/FFFFFFFFFFFF2344 :                     ; 		dc.b "\\w \\w \\w \\w",0
(1)  746/FFFFFFFFFFFF2344 :                     ; 		dc.l RAM_ChnlLinks+20,RAM_ChnlLinks+22,RAM_ChnlLinks+24,RAM_ChnlLinks+26
(1)  747/FFFFFFFFFFFF2344 :                     ; 		dc.l RAM_ChnlLinks+28,RAM_ChnlLinks+30,RAM_ChnlLinks+32,RAM_ChnlLinks+34
(1)  748/FFFFFFFFFFFF2344 :                     ; 		align 2
(1)  749/FFFFFFFFFFFF2344 :                     ; str_ShowPwm:	dc.b "\\w \\w \\w \\w",$0A
(1)  750/FFFFFFFFFFFF2344 :                     ; 		dc.b "\\w \\w \\w",0
(1)  751/FFFFFFFFFFFF2344 :                     ; 		dc.l RAM_ChnlLinks+36,RAM_ChnlLinks+38,RAM_ChnlLinks+40,RAM_ChnlLinks+42
(1)  752/FFFFFFFFFFFF2344 :                     ; 		dc.l RAM_ChnlLinks+44,RAM_ChnlLinks+46,RAM_ChnlLinks+48,RAM_ChnlLinks+50
(1)  753/FFFFFFFFFFFF2344 :                     ; 		align 2
(1)  754/FFFFFFFFFFFF2344 :                     
(1)  755/FFFFFFFFFFFF2344 :                     str_TesterInit:
(1)  756/FFFFFFFFFFFF2344 : 4745 4D41 2F4E      		dc.b "GEMA/Nikona tester",$0A
         FFFFFFFFFFFF234A : 696B 6F6E 6120 
         FFFFFFFFFFFF2350 : 7465 7374 6572 0A 
(1)  757/FFFFFFFFFFFF2357 : 2020 2020 2020      		dc.b "                \{DATE} \{TIME}",$0A
         FFFFFFFFFFFF235D : 2020 2020 2020 
         FFFFFFFFFFFF2363 : 2020 2020 3032 
         FFFFFFFFFFFF2369 : 2F32 382F 3230 
         FFFFFFFFFFFF236F : 3234 2030 333A 
         FFFFFFFFFFFF2375 : 3537 3A35 3720 
         FFFFFFFFFFFF237B : 414D 0A          
(1)  758/FFFFFFFFFFFF237E : 0A                  		dc.b $0A
(1)  759/FFFFFFFFFFFF237F : 2020 2020 6765      		dc.b "    gemaTest",$0A
         FFFFFFFFFFFF2385 : 6D61 5465 7374 0A 
(1)  760/FFFFFFFFFFFF238C : 2020 2020 6765      		dc.b "    gemaPlayTrack",$0A
         FFFFFFFFFFFF2392 : 6D61 506C 6179 
         FFFFFFFFFFFF2398 : 5472 6163 6B0A    
(1)  761/FFFFFFFFFFFF239E : 2020 2020 6765      		dc.b "    gemaStopTrack",$0A
         FFFFFFFFFFFF23A4 : 6D61 5374 6F70 
         FFFFFFFFFFFF23AA : 5472 6163 6B0A    
(1)  762/FFFFFFFFFFFF23B0 : 2020 2020 6765      		dc.b "    gemaFadeTrack",$0A
         FFFFFFFFFFFF23B6 : 6D61 4661 6465 
         FFFFFFFFFFFF23BC : 5472 6163 6B0A    
(1)  763/FFFFFFFFFFFF23C2 : 2020 2020 6765      		dc.b "    gemaSetTrackVol",0
         FFFFFFFFFFFF23C8 : 6D61 5365 7454 
         FFFFFFFFFFFF23CE : 7261 636B 566F 
         FFFFFFFFFFFF23D4 : 6C00             
(1)  764/FFFFFFFFFFFF23D6 : 00                  		dc.b 0
(1)  765/FFFFFFFFFFFF23D7 :                     		align 2
(1)  766/FFFFFFFFFFFF23D8 : 5C77 205C 7720      str_ShowMe:	dc.b "\\w \\w \\w",$A
         FFFFFFFFFFFF23DE : 5C77 0A          
(1)  767/FFFFFFFFFFFF23E1 : 0A                  		dc.b $A
(1)  768/FFFFFFFFFFFF23E2 : 5C77 205C 7720      		dc.b "\\w \\w \\w",0
         FFFFFFFFFFFF23E8 : 5C77 00          
(1)  769/FFFFFFFFFFFF23EB : FFFF D206 FFFF      		dc.l RAM_GemaArg0,RAM_GemaArg1,RAM_GemaArg2
         FFFFFFFFFFFF23F1 : D208 FFFF D20A    
(1)  770/FFFFFFFFFFFF23F7 : FFFF D20C FFFF      		dc.l RAM_GemaArg3,RAM_GemaArg4,RAM_GemaArg5
         FFFFFFFFFFFF23FD : D20E FFFF D210    
(1)  771/FFFFFFFFFFFF2403 :                     		align 2
(1)  772/FFFFFFFFFFFF2404 :                     str_Info:
(1)  773/FFFFFFFFFFFF2404 : 5C6C 00             		dc.b "\\l",0
(1)  774/FFFFFFFFFFFF2407 : FFFF BDD4           		dc.l RAM_Framecount
(1)  775/FFFFFFFFFFFF240B :                     		align 2
(1)  776/FFFFFFFFFFFF240C :                     ; str_Notes:
(1)  777/FFFFFFFFFFFF240C :                     ;  dc.b "---",0,"C#0",0,"D-0",0,"D#0",0,"E-0",0,"F-0",0,"F#0",0,"G-0",0,"G#0",0,"A-0",0,"A#0",0,"B-0",0
(1)  778/FFFFFFFFFFFF240C :                     ;  dc.b "C-1",0,"C#1",0,"D-1",0,"D#1",0,"E-1",0,"F-1",0,"F#1",0,"G-1",0,"G#1",0,"A-1",0,"A#1",0,"B-1",0
(1)  779/FFFFFFFFFFFF240C :                     ;  dc.b "C-2",0,"C#2",0,"D-2",0,"D#2",0,"E-2",0,"F-2",0,"F#2",0,"G-2",0,"G#2",0,"A-2",0,"A#2",0,"B-2",0
(1)  780/FFFFFFFFFFFF240C :                     ;  dc.b "C-3",0,"C#3",0,"D-3",0,"D#3",0,"E-3",0,"F-3",0,"F#3",0,"G-3",0,"G#3",0,"A-3",0,"A#3",0,"B-3",0
(1)  781/FFFFFFFFFFFF240C :                     ;  dc.b "C-4",0,"C#4",0,"D-4",0,"D#4",0,"E-4",0,"F-4",0,"F#4",0,"G-4",0,"G#4",0,"A-4",0,"A#4",0,"B-4",0
(1)  782/FFFFFFFFFFFF240C :                     ;  dc.b "C-5",0,"C#5",0,"D-5",0,"D#5",0,"E-5",0,"F-5",0,"F#5",0,"G-5",0,"G#5",0,"A-5",0,"A#5",0,"B-5",0
(1)  783/FFFFFFFFFFFF240C :                     ;  dc.b "C-6",0,"C#6",0,"D-6",0,"D#6",0,"E-6",0,"F-6",0,"F#6",0,"G-6",0,"G#6",0,"A-6",0,"A#6",0,"B-6",0
(1)  784/FFFFFFFFFFFF240C :                     ;  dc.b "C-7",0,"C#7",0,"D-7",0,"D#7",0,"E-7",0,"F-7",0,"F#7",0,"G-7",0,"G#7",0,"A-7",0,"A#7",0,"B-7",0
(1)  785/FFFFFFFFFFFF240C :                     ;  dc.b "C-8",0,"C#8",0,"D-8",0,"D#8",0,"E-8",0,"F-8",0,"F#8",0,"G-8",0,"G#8",0,"A-8",0,"A#8",0,"B-8",0
(1)  786/FFFFFFFFFFFF240C :                     ;  dc.b "C-9",0,"C#9",0,"D-9",0,"D#9",0,"E-9",0,"F-9",0,"F#9",0,"G-9",0,"G#9",0,"A-9",0,"A#9",0,"B-9",0
(1)  787/FFFFFFFFFFFF240C :                     ;  align 2
(1)  788/FFFFFFFFFFFF240C :                     ; str_Notes_FM:
(1)  789/FFFFFFFFFFFF240C :                     ;  dc.b "---",0
(1)  790/FFFFFFFFFFFF240C :                     ;  dc.b "C-",0,0,"C#",0,0,"D-",0,0,"D#",0,0,"E-",0,0,"F-",0,0
(1)  791/FFFFFFFFFFFF240C :                     ;  dc.b "F#",0,0,"G-",0,0,"G#",0,0,"A-",0,0,"A#",0,0,"B-",0,0
(1)  792/FFFFFFFFFFFF240C :                     ;  align 2
(1)  793/FFFFFFFFFFFF240C :                     ; str_Octv_FM:
(1)  794/FFFFFFFFFFFF240C :                     ;  dc.b "0",0,"1",0,"2",0,"3",0,"4",0,"5",0,"6",0,"7",0
(1)  795/FFFFFFFFFFFF240C :                     ;  align 2
(1)  796/FFFFFFFFFFFF240C :                     
     362/FFFFFFFFFFFF240C :                     mcscrn_e:
     362/FFFFFFFFFFFFD610 :                                     dephase
     362/   5540C :                                     phase mctopscrn+(mcscrn_e-RAM_UserCode)
     362/   5540C :                                     align $800
     362/   55800 :                     ; Md_Screen00_e:
     362/   55800 : =$55800              MD_SCREEN00_E label *
     362/   55800 :  (MACRO-2)                           report "THIS SCREEN's code",mcscrn_e-RAM_UserCode,MAX_UserCode
     363/   55800 :                     ; 	screen_code Md_Screen01,Md_Screen01_e,"game/screen_1/code.asm"
     364/   55800 :                     
     365/   55800 :                     ; ====================================================================
     366/   55800 :                     ; DATA SECTION
     367/   55800 :                     ; ====================================================================
     368/   55800 :                     
     369/   55800 :                     ; ====================================================================
     370/   55800 :                     ; ----------------------------------------------------------------
     371/   55800 :                     ; 68K DATA BANKs
     372/   55800 :                     ;
     373/   55800 :                     ; SEGA CD / CD32X:
     374/   55800 :                     ; Stored in WORD-RAM pieces
     375/   55800 :                     ; limited to 256KB 2M or 128KB 1M/1M
     376/   55800 :                     ; ** WORD-RAM CANNOT BE USED IF USING ASIC STAMPS **
     377/   55800 :                     ;
     378/   55800 :                     ; SEGA 32X Cartridge:
     379/   55800 :                     ; Limited to 1MB bankswitchable.
     380/   55800 :                     ; ONLY 4 banks can be used, Bank 0 already uses the
     381/   55800 :                     ; first 512KB for the code.
     382/   55800 :                     ;
     383/   55800 :                     ; For multi-porting keep the data size limited to 256KB.
     384/   55800 :                     ; ----------------------------------------------------------------
     385/   55800 :                     
     386/   55800 :                     ; --------------------------------------------------------
     387/   55800 :                     ; DEFAULT BANK
     388/   55800 :                     ;
     389/   55800 :                     ; CD/CD32X:
     390/   55800 :                     ; $200000 256KB (WORD-RAM)
     391/   55800 :                     ;
     392/   55800 :                     ; 32X:
     393/   55800 :                     ; $900000 1MB (Bankswichable area)
     394/   55800 :                     ;
     395/   55800 :                     ; Usage:
     396/   55800 :                     ; data_bkset LABEL_START,OPTION
     397/   55800 :                     ; (your includes and bincludes)
     398/   55800 :                     ; data_bkend LABEL_START,LABEL_END,used_size
     399/   55800 :                     ;
     400/   55800 :                     ; OPTION (32X Cartridge ONLY):
     401/   55800 :                     ;  0, Normal 32X $900000 bank
     402/   55800 :                     ; -1, First 32X $900000 bank
     403/   55800 :                     ; * Ignored on other systems.
     404/   55800 :                     ; --------------------------------------------------------
     405/   55800 :                     
     406/   55800 : (MACRO)              	data_bkset MCD_DBANK0,-1
     406/   55800 :                                     align $800
     406/   55800 :                     ; MCD_DBANK0:
     406/   55800 : =$55800              MCD_DBANK0 label *
     406/  200000 :                                     phase sysmcd_wram
     407/  200000 :                     mdbank0:
     408/  200000 :                     		include "game/screen_0/data_bank.asm"
(1)    1/  200000 :                     ; ====================================================================
(1)    2/  200000 :                     ; ----------------------------------------------------------------
(1)    3/  200000 :                     ; 68K SCREEN MODE DATA
(1)    4/  200000 :                     ; for big stuff like maps, level, etc.
(1)    5/  200000 :                     ;
(1)    6/  200000 :                     ; For Genesis graphics use data_dma.asm
(1)    7/  200000 :                     ; and for 32X graphics use data_mgfx.asm
(1)    8/  200000 :                     ;
(1)    9/  200000 :                     ; 32X 256-COLOR PALETTES GO HERE.
(1)   10/  200000 :                     ;
(1)   11/  200000 :                     ; Maximum size: $0FFFFF bytes per bank
(1)   12/  200000 :                     ; ----------------------------------------------------------------
(1)   13/  200000 :                     
(1)   14/  200000 :                     ; ----------------------------------------------------------------
(1)   15/  200000 :                     ; 32X Screen maps
(1)   16/  200000 :                     ; ----------------------------------------------------------------
(1)   17/  200000 :                     
(1)   18/  200000 :                     MAP_TEST:
(1)   19/  200000 :                     		binclude "game/screen_0/data/maps/md/test/md_map.bin"
(1)   20/  2008C0 :                     		align 2
(1)   21/  2008C0 :                     MapMars_TEST:
(1)   22/  2008C0 :                     		binclude "game/screen_0/data/maps/mars/test/data_map.bin"
(1)   23/  200AF0 :                     		align 2
(1)   24/  200AF0 :                     
(1)   25/  200AF0 :                     ; ----------------------------------------------------------------
(1)   26/  200AF0 :                     ; 32X Palettes
(1)   27/  200AF0 :                     ; ----------------------------------------------------------------
(1)   28/  200AF0 :                     
(1)   29/  200AF0 :                     PalMars_TEST:
(1)   30/  200AF0 :                     		binclude "game/screen_0/data/maps/mars/test/data_pal.bin"
(1)   31/  200CF0 :                     		align 2
(1)   32/  200CF0 :                     PalMars_Sabrina:
(1)   33/  200CF0 :                     		binclude "game/screen_0/data/objects/mars/sabrina/sabrina_pal.bin"
(1)   34/  200D10 :                     		align 2
(1)   35/  200D10 :                     
(1)   36/  200D10 :                     ; ----------------------------------------------------------------
(1)   37/  200D10 :                     ; Object palettes
(1)   38/  200D10 :                     ; ----------------------------------------------------------------
(1)   39/  200D10 :                     
(1)   40/  200D10 :                     objPal_Sisi:
(1)   41/  200D10 :                     		binclude "game/screen_0/data/objects/md/sisi/sisi_pal.bin"
(1)   42/  200D30 :                     		align 2
(1)   43/  200D30 :                     
(1)   44/  200D30 :                     ; ----------------------------------------------------------------
(1)   45/  200D30 :                     ; Object maps
(1)   46/  200D30 :                     ; ----------------------------------------------------------------
(1)   47/  200D30 :                     
(1)   48/  200D30 :                     objMap_Sisi:
(1)   49/  200D30 :                     		binclude "game/screen_0/data/objects/md/sisi/sisi_map.bin"
(1)   50/  200D8C :                     		align 2
(1)   51/  200D8C :                     
     410/  200D8C :                     		include "game/screen_0/data_dma.asm"	; SEGA CD / CD32X ONLY.
(1)    1/  200D8C :                     ; ====================================================================
(1)    2/  200D8C :                     ; ----------------------------------------------------------------
(1)    3/  200D8C :                     ; DMA Graphics for this screen
(1)    4/  200D8C :                     ; ----------------------------------------------------------------
(1)    5/  200D8C :                     
(1)    6/  200D8C :                     ASCII_FONT:	binclude "system/md/data/font.bin"
(1)    7/  20198C :                     
(1)    8/  20198C :                     ; ----------------------------------------------------------------
(1)    9/  20198C :                     ; Commmon graphics
(1)   10/  20198C :                     ; ----------------------------------------------------------------
(1)   11/  20198C :                     
(1)   12/  20198C :                     ART_TEST:
(1)   13/  20198C :                     		binclude "game/screen_0/data/maps/md/test/md_art.bin"
(1)   14/  20A10C :                     ART_TEST_e:
(1)   15/  20A10C :                     		align 2
(1)   16/  20A10C :                     
(1)   17/  20A10C :                     ; ----------------------------------------------------------------
(1)   18/  20A10C :                     ; Object graphics
(1)   19/  20A10C :                     ; ----------------------------------------------------------------
(1)   20/  20A10C :                     
(1)   21/  20A10C :                     Art_Sisi:	binclude "game/screen_0/data/objects/md/sisi/sisi_art.bin"
(1)   22/  20A6EC :                     Art_Sisi_e:
(1)   23/  20A6EC :                     		align 2
(1)   24/  20A6EC :                     
     412/  20A6EC :                     		include "sound/tracks.asm"		; GEMA: Track data
(1)    1/  20A6EC :                     ; ================================================================
(1)    2/  20A6EC :                     ; ------------------------------------------------------------
(1)    3/  20A6EC :                     ; SOUND DATA SECTION
(1)    4/  20A6EC :                     ; ------------------------------------------------------------
(1)    5/  20A6EC :                     
(1)    6/  20A6EC :                     ; --------------------------------------------
(1)    7/  20A6EC :                     ; Instrument macros
(1)    8/  20A6EC :                     ; --------------------------------------------
(1)    9/  20A6EC :                     
(1)   10/  20A6EC :                     gInsNull macro
(1)   11/  20A6EC :                     	dc.b $00,$00,$00,$00
(1)   12/  20A6EC :                     	dc.b $00,$00,$00,$00
(1)   13/  20A6EC :                     	endm
(1)   14/  20A6EC :                     
(1)   15/  20A6EC :                     ; alv: attack level
(1)   16/  20A6EC :                     ; atk: attack rate
(1)   17/  20A6EC :                     ; slv: sustain
(1)   18/  20A6EC :                     ; dky: decay rate (up)
(1)   19/  20A6EC :                     ; rrt: release rate (down)
(1)   20/  20A6EC :                     ; vib: (TODO)
(1)   21/  20A6EC :                     gInsPsg	macro pitch,alv,atk,slv,dky,rrt,vib
(1)   22/  20A6EC :                     	dc.b $80,pitch,alv,atk
(1)   23/  20A6EC :                     	dc.b slv,dky,rrt,vib
(1)   24/  20A6EC :                     	endm
(1)   25/  20A6EC :                     
(1)   26/  20A6EC :                     ; same args as gInsPsg
(1)   27/  20A6EC :                     ; only one more argument for the noise type:
(1)   28/  20A6EC :                     ; mode: noise mode
(1)   29/  20A6EC :                     ;       %tmm
(1)   30/  20A6EC :                     ;        t  - Bass(0)|Noise(1)
(1)   31/  20A6EC :                     ;         mm- Clock(0)|Clock/2(1)|Clock/4(2)|Tone3(3)
(1)   32/  20A6EC :                     ;
(1)   33/  20A6EC :                     gInsPsgN macro pitch,alv,atk,slv,dky,rrt,vib,mode
(1)   34/  20A6EC :                     	dc.b $90|mode,pitch,alv,atk
(1)   35/  20A6EC :                     	dc.b slv,dky,rrt,vib
(1)   36/  20A6EC :                     	endm
(1)   37/  20A6EC :                     
(1)   38/  20A6EC :                     ; 24-bit ROM pointer to FM patch data
(1)   39/  20A6EC :                     gInsFm macro pitch,fmins
(1)   40/  20A6EC :                     	dc.b $A0,pitch,((fmins>>16)&$FF),((fmins>>8)&$FF)
(1)   41/  20A6EC :                     	dc.b fmins&$FF,$00,$00,$00
(1)   42/  20A6EC :                     	endm
(1)   43/  20A6EC :                     
(1)   44/  20A6EC :                     ; Same args as gInsFm, but the last 4 words of the data
(1)   45/  20A6EC :                     ; are the custom freqs for each operator in this order:
(1)   46/  20A6EC :                     ; OP1 OP2 OP3 OP4
(1)   47/  20A6EC :                     ;
(1)   48/  20A6EC :                     ; Pitch is useless here, set to 0
(1)   49/  20A6EC :                     gInsFm3	macro pitch,fmins
(1)   50/  20A6EC :                     	dc.b $B0,pitch,((fmins>>16)&$FF),((fmins>>8)&$FF)
(1)   51/  20A6EC :                     	dc.b fmins&$FF,$00,$00,$00
(1)   52/  20A6EC :                     	endm
(1)   53/  20A6EC :                     
(1)   54/  20A6EC :                     ; flags: %000L
(1)   55/  20A6EC :                     ;        L - Loop sample No/Yes
(1)   56/  20A6EC :                     gInsDac	macro pitch,start,flags
(1)   57/  20A6EC :                     	dc.b $C0|flags,pitch,((start>>16)&$FF),((start>>8)&$FF)
(1)   58/  20A6EC :                     	dc.b start&$FF,0,0,0
(1)   59/  20A6EC :                     	endm
(1)   60/  20A6EC :                     
(1)   61/  20A6EC :                     ; flags: %000L
(1)   62/  20A6EC :                     ;        L - Loop sample No/Yes
(1)   63/  20A6EC :                     gInsPcm	macro pitch,start,flags
(1)   64/  20A6EC :                      if MCD|MARSCD
(1)   65/  20A6EC :                     	dc.b $D0|flags,pitch,((start>>16)&$FF),((start>>8)&$FF)
(1)   66/  20A6EC :                     	dc.b start&$FF,0,0,0
(1)   67/  20A6EC :                      else
(1)   68/  20A6EC :                     	dc.b $00,$00,$00,$00
(1)   69/  20A6EC :                     	dc.b $00,$00,$00,$00
(1)   70/  20A6EC :                      endif
(1)   71/  20A6EC :                     	endm
(1)   72/  20A6EC :                     
(1)   73/  20A6EC :                     ; flags: %00SL
(1)   74/  20A6EC :                     ;        L - Loop sample No/Yes
(1)   75/  20A6EC :                     ;        S  - Sample data is on STEREO
(1)   76/  20A6EC :                     gInsPwm	macro pitch,start,flags
(1)   77/  20A6EC :                      if MARS|MARSCD
(1)   78/  20A6EC :                     	dc.b $E0|flags,pitch,((start>>24)&$FF),((start>>16)&$FF)
(1)   79/  20A6EC :                     	dc.b ((start>>8)&$FF),start&$FF,0,0
(1)   80/  20A6EC :                      else
(1)   81/  20A6EC :                     	dc.b $00,$00,$00,$00
(1)   82/  20A6EC :                     	dc.b $00,$00,$00,$00
(1)   83/  20A6EC :                      endif
(1)   84/  20A6EC :                     	endm
(1)   85/  20A6EC :                     
(1)   86/  20A6EC :                     ; ticks - %gttttttt
(1)   87/  20A6EC :                     ;   loc - 68k pointer
(1)   88/  20A6EC :                     ;
(1)   89/  20A6EC :                     ; t-Ticks
(1)   90/  20A6EC :                     ; g-Use global tempo
(1)   91/  20A6EC :                     gemaTrk macro ticks,loc
(1)   92/  20A6EC :                     	dc.l ((ticks&$FF)<<24)|loc&$FFFFFF
(1)   93/  20A6EC :                     	endm
(1)   94/  20A6EC :                     
(1)   95/  20A6EC :                     ; gemaHead
(1)   96/  20A6EC :                     ; block point, patt point, ins point
(1)   97/  20A6EC :                     ; numof_blocks,numof_patts,numof_ins
(1)   98/  20A6EC :                     gemaHead macro blk,pat,ins,num
(1)   99/  20A6EC :                     	dc.w num
(1)  100/  20A6EC :                     	dc.l blk
(1)  101/  20A6EC :                     	dc.l pat
(1)  102/  20A6EC :                     	dc.l ins
(1)  103/  20A6EC :                     	endm
(1)  104/  20A6EC :                     
(1)  105/  20A6EC :                     ; gemaTrack macro num,name
(1)  106/  20A6EC :                     ; 	gemaHead .blk,.pat,.ins,num
(1)  107/  20A6EC :                     ; .blk:
(1)  108/  20A6EC :                     ; 	binclude "sound/tracks/"+name+"_blk.bin"
(1)  109/  20A6EC :                     ; .pat:
(1)  110/  20A6EC :                     ; 	binclude "sound/tracks/"+name+"_patt.bin"
(1)  111/  20A6EC :                     ; .ins:
(1)  112/  20A6EC :                     ; 	endm
(1)  113/  20A6EC :                     
(1)  114/  20A6EC :                     ; ================================================================
(1)  115/  20A6EC :                     ; ------------------------------------------------------------
(1)  116/  20A6EC :                     ; Nikona MAIN track-list
(1)  117/  20A6EC :                     ;
(1)  118/  20A6EC :                     ; gemaTrk ticks+beatsbit*,track_data
(1)  119/  20A6EC :                     ; Add $80 ($80|ticks) to make the track use global sub-beats
(1)  120/  20A6EC :                     ;
(1)  121/  20A6EC :                     ; To use sub-beats call gemaSetBeats command
(1)  122/  20A6EC :                     ; BEFORE playing your track:
(1)  123/  20A6EC :                     ; 	move.w	#new_beats,d0
(1)  124/  20A6EC :                     ; 	bsr	gemaSetBeats
(1)  125/  20A6EC :                     ; 	move.w	#track_id,d0
(1)  126/  20A6EC :                     ;	bsr	gemaPlayTrack
(1)  127/  20A6EC :                     ; ------------------------------------------------------------
(1)  128/  20A6EC :                     
(1)  129/  20A6EC :                     	align 2
(1)  130/  20A6EC :                     Gema_MasterList:
(1)  131/  20A6EC : (MACRO)              	gemaTrk 12,GemaTrk_TEST_0
(1)  131/  20A6EC : 0C20 A808                   dc.l ((12&$FF)<<24)|GEMATRK_TEST_0&$FFFFFF
(1)  132/  20A6F0 : (MACRO)              	gemaTrk 6|$80,GemaTrk_MOVEME
(1)  132/  20A6F0 : 8620 DD45                   dc.l ((6|$80&$FF)<<24)|GEMATRK_MOVEME&$FFFFFF
(1)  133/  20A6F4 : (MACRO)              	gemaTrk 6|$80,GemaTrk_NadieMD
(1)  133/  20A6F4 : 8621 16A4                   dc.l ((6|$80&$FF)<<24)|GEMATRK_NADIEMD&$FFFFFF
(1)  134/  20A6F8 : (MACRO)              	gemaTrk 6|$80,GemaTrk_NadieMCD
(1)  134/  20A6F8 : 8621 2992                   dc.l ((6|$80&$FF)<<24)|GEMATRK_NADIEMCD&$FFFFFF
(1)  135/  20A6FC : (MACRO)              	gemaTrk 6|$80,GemaTrk_NadieMARS
(1)  135/  20A6FC : 8621 3C40                   dc.l ((6|$80&$FF)<<24)|GEMATRK_NADIEMARS&$FFFFFF
(1)  136/  20A700 : (MACRO)              	gemaTrk 3|$80,GemaTrk_Crystal
(1)  136/  20A700 : 8321 046A                   dc.l ((3|$80&$FF)<<24)|GEMATRK_CRYSTAL&$FFFFFF
(1)  137/  20A704 : (MACRO)              	gemaTrk 7,GemaTrk_Arena1
(1)  137/  20A704 : 0720 A882                   dc.l ((7&$FF)<<24)|GEMATRK_ARENA1&$FFFFFF
(1)  138/  20A708 : (MACRO)              	gemaTrk 3,GemaTrk_Dream
(1)  138/  20A708 : 0320 ED1A                   dc.l ((3&$FF)<<24)|GEMATRK_DREAM&$FFFFFF
(1)  139/  20A70C :                     
(1)  140/  20A70C :                     ; ------------------------------------------------------------
(1)  141/  20A70C :                     ; BGM tracks
(1)  142/  20A70C :                     ; ------------------------------------------------------------
(1)  143/  20A70C :                     
(1)  144/  20A70C :                     GemaSfx_All:
(1)  145/  20A70C : (MACRO)              	gemaHead .blk,.pat,.ins,1
(1)  145/  20A70C : 0001                        dc.w 1
(1)  145/  20A70E : 0020 A71A                   dc.l .BLK
(1)  145/  20A712 : 0020 A720                   dc.l .PAT
(1)  145/  20A716 : 0020 A7E0                   dc.l .INS
(1)  146/  20A71A :                     .blk:
(1)  147/  20A71A :                     	binclude "sound/tracks/sfxall_blk.bin"
(1)  148/  20A71F :                     	align 2
(1)  149/  20A720 :                     .pat:
(1)  150/  20A720 :                     	binclude "sound/tracks/sfxall_patt.bin"
(1)  151/  20A7DF :                     	align 2
(1)  152/  20A7E0 :                     .ins:
(1)  153/  20A7E0 : (MACRO)              	gInsPsgN 0,$00,$00,$00,$00,$00,0,%100
(1)  153/  20A7E0 : 9400 0000                   dc.b $90|%100,0,$00,$00
(1)  153/  20A7E4 : 0000 0000                   dc.b $00,$00,$00,0
(1)  154/  20A7E8 : (MACRO)              	gInsPsgN 0,$00,$00,$00,$00,$00,0,%101
(1)  154/  20A7E8 : 9500 0000                   dc.b $90|%101,0,$00,$00
(1)  154/  20A7EC : 0000 0000                   dc.b $00,$00,$00,0
(1)  155/  20A7F0 : (MACRO)              	gInsPsgN 0,$00,$00,$00,$00,$00,0,%110
(1)  155/  20A7F0 : 9600 0000                   dc.b $90|%110,0,$00,$00
(1)  155/  20A7F4 : 0000 0000                   dc.b $00,$00,$00,0
(1)  156/  20A7F8 : (MACRO)              	gInsFm 0,FmIns_Ding_1
(1)  156/  20A7F8 : A000 2153                   dc.b $A0,0,((FMINS_DING_1>>16)&$FF),((FMINS_DING_1>>8)&$FF)
(1)  156/  20A7FC : 8E00 0000                   dc.b FMINS_DING_1&$FF,$00,$00,$00
(1)  157/  20A800 : (MACRO)              	gInsFm3 0,FmIns_Fm3_Explosion
(1)  157/  20A800 : B000 214E                   dc.b $B0,0,((FMINS_FM3_EXPLOSION>>16)&$FF),((FMINS_FM3_EXPLOSION>>8)&$FF)
(1)  157/  20A804 : EE00 0000                   dc.b FMINS_FM3_EXPLOSION&$FF,$00,$00,$00
(1)  158/  20A808 :                     
(1)  159/  20A808 :                     ; ------------------------------------------------------------
(1)  160/  20A808 :                     
(1)  161/  20A808 :                     GemaTrk_TEST_0:
(1)  162/  20A808 : (MACRO)              	gemaHead .blk,.pat,.ins,3
(1)  162/  20A808 : 0003                        dc.w 3
(1)  162/  20A80A : 0020 A81E                   dc.l .BLK
(1)  162/  20A80E : 0020 A821                   dc.l .PAT
(1)  162/  20A812 : 0020 A816                   dc.l .INS
(1)  163/  20A816 :                     .ins:
(1)  164/  20A816 :                     ; 	gInsPsgN 0,$00,$00,$00,$00,$00,0,%101
(1)  165/  20A816 :                     ; 	gInsFm -36-6,FmIns_Ambient_dark
(1)  166/  20A816 :                     ; 	gInsPcm -12,PcmIns_MoveMe_BrassL,%11
(1)  167/  20A816 : (MACRO)              	gInsPwm 0,PwmIns_Piano,%00
(1)  167/  20A816 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  167/  20A81A : 0000 0000                   dc.b $00,$00,$00,$00
(1)  168/  20A81E :                     .blk:
(1)  169/  20A81E :                     	binclude "sound/tracks/test_blk.bin"
(1)  170/  20A821 :                     .pat:
(1)  171/  20A821 :                     	binclude "sound/tracks/test_patt.bin"
(1)  172/  20A882 :                     
(1)  173/  20A882 :                     GemaTrk_Arena1:
(1)  174/  20A882 : (MACRO)              	gemaHead shrd_blk,shrd_pat,.ins,6
(1)  174/  20A882 : 0006                        dc.w 6
(1)  174/  20A884 : 0020 A910                   dc.l SHRD_BLK
(1)  174/  20A888 : 0020 A929                   dc.l SHRD_PAT
(1)  174/  20A88C : 0020 A890                   dc.l .INS
(1)  175/  20A890 :                     .ins:
(1)  176/  20A890 : (MACRO)              	gInsPcm -17-7,PcmIns_Menu_01,1
(1)  176/  20A890 : D1E8 0200                   dc.b $D0|1,-17-7,((PCMINS_MENU_01>>16)&$FF),((PCMINS_MENU_01>>8)&$FF)
(1)  176/  20A894 : 0000 0000                   dc.b PCMINS_MENU_01&$FF,0,0,0
(1)  177/  20A898 : (MACRO)              	gInsPcm -17-7,PcmIns_Menu_02,1
(1)  177/  20A898 : D1E8 021B                   dc.b $D0|1,-17-7,((PCMINS_MENU_02>>16)&$FF),((PCMINS_MENU_02>>8)&$FF)
(1)  177/  20A89C : 1C00 0000                   dc.b PCMINS_MENU_02&$FF,0,0,0
(1)  178/  20A8A0 : (MACRO)              	gInsPcm -17-7,PcmIns_Menu_03,0
(1)  178/  20A8A0 : D0E8 0235                   dc.b $D0|0,-17-7,((PCMINS_MENU_03>>16)&$FF),((PCMINS_MENU_03>>8)&$FF)
(1)  178/  20A8A4 : EA00 0000                   dc.b PCMINS_MENU_03&$FF,0,0,0
(1)  179/  20A8A8 : (MACRO)              	gInsNull
(1)  179/  20A8A8 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  179/  20A8AC : 0000 0000                   dc.b $00,$00,$00,$00
(1)  180/  20A8B0 : (MACRO)              	gInsPcm -17-7,PcmIns_Menu_05,1
(1)  180/  20A8B0 : D1E8 0277                   dc.b $D0|1,-17-7,((PCMINS_MENU_05>>16)&$FF),((PCMINS_MENU_05>>8)&$FF)
(1)  180/  20A8B4 : DC00 0000                   dc.b PCMINS_MENU_05&$FF,0,0,0
(1)  181/  20A8B8 : (MACRO)              	gInsPcm -17-7,PcmIns_Menu_06,0
(1)  181/  20A8B8 : D0E8 0294                   dc.b $D0|0,-17-7,((PCMINS_MENU_06>>16)&$FF),((PCMINS_MENU_06>>8)&$FF)
(1)  181/  20A8BC : 9400 0000                   dc.b PCMINS_MENU_06&$FF,0,0,0
(1)  182/  20A8C0 : (MACRO)              	gInsPcm -17-7,PcmIns_Menu_07,0
(1)  182/  20A8C0 : D0E8 029C                   dc.b $D0|0,-17-7,((PCMINS_MENU_07>>16)&$FF),((PCMINS_MENU_07>>8)&$FF)
(1)  182/  20A8C4 : 6A00 0000                   dc.b PCMINS_MENU_07&$FF,0,0,0
(1)  183/  20A8C8 : (MACRO)              	gInsPcm -17-7,PcmIns_Menu_08,0
(1)  183/  20A8C8 : D0E8 02A3                   dc.b $D0|0,-17-7,((PCMINS_MENU_08>>16)&$FF),((PCMINS_MENU_08>>8)&$FF)
(1)  183/  20A8CC : F000 0000                   dc.b PCMINS_MENU_08&$FF,0,0,0
(1)  184/  20A8D0 : (MACRO)              	gInsPcm -17-7,PcmIns_Menu_09,0
(1)  184/  20A8D0 : D0E8 02AB                   dc.b $D0|0,-17-7,((PCMINS_MENU_09>>16)&$FF),((PCMINS_MENU_09>>8)&$FF)
(1)  184/  20A8D4 : B000 0000                   dc.b PCMINS_MENU_09&$FF,0,0,0
(1)  185/  20A8D8 : (MACRO)              	gInsNull
(1)  185/  20A8D8 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  185/  20A8DC : 0000 0000                   dc.b $00,$00,$00,$00
(1)  186/  20A8E0 : (MACRO)              	gInsPcm -17-7,PcmIns_Menu_11,0
(1)  186/  20A8E0 : D0E8 02B3                   dc.b $D0|0,-17-7,((PCMINS_MENU_11>>16)&$FF),((PCMINS_MENU_11>>8)&$FF)
(1)  186/  20A8E4 : 4200 0000                   dc.b PCMINS_MENU_11&$FF,0,0,0
(1)  187/  20A8E8 : (MACRO)              	gInsPcm -17-7,PcmIns_Menu_12,0
(1)  187/  20A8E8 : D0E8 02C1                   dc.b $D0|0,-17-7,((PCMINS_MENU_12>>16)&$FF),((PCMINS_MENU_12>>8)&$FF)
(1)  187/  20A8EC : 3400 0000                   dc.b PCMINS_MENU_12&$FF,0,0,0
(1)  188/  20A8F0 : (MACRO)              	gInsPcm -17-7,PcmIns_Menu_13,0
(1)  188/  20A8F0 : D0E8 02D3                   dc.b $D0|0,-17-7,((PCMINS_MENU_13>>16)&$FF),((PCMINS_MENU_13>>8)&$FF)
(1)  188/  20A8F4 : B000 0000                   dc.b PCMINS_MENU_13&$FF,0,0,0
(1)  189/  20A8F8 : (MACRO)              	gInsPcm -17-7,PcmIns_Menu_14,1
(1)  189/  20A8F8 : D1E8 02EB                   dc.b $D0|1,-17-7,((PCMINS_MENU_14>>16)&$FF),((PCMINS_MENU_14>>8)&$FF)
(1)  189/  20A8FC : 4800 0000                   dc.b PCMINS_MENU_14&$FF,0,0,0
(1)  190/  20A900 : (MACRO)              	gInsPcm -17-7,PcmIns_Menu_15,0
(1)  190/  20A900 : D0E8 031B                   dc.b $D0|0,-17-7,((PCMINS_MENU_15>>16)&$FF),((PCMINS_MENU_15>>8)&$FF)
(1)  190/  20A904 : 3000 0000                   dc.b PCMINS_MENU_15&$FF,0,0,0
(1)  191/  20A908 : (MACRO)              	gInsPcm -17-7,PcmIns_Menu_16,0
(1)  191/  20A908 : D0E8 033E                   dc.b $D0|0,-17-7,((PCMINS_MENU_16>>16)&$FF),((PCMINS_MENU_16>>8)&$FF)
(1)  191/  20A90C : 2400 0000                   dc.b PCMINS_MENU_16&$FF,0,0,0
(1)  192/  20A910 :                     shrd_blk:
(1)  193/  20A910 :                     	binclude "sound/tracks/menu_blk.bin"
(1)  194/  20A929 :                     shrd_pat:
(1)  195/  20A929 :                     	binclude "sound/tracks/menu_patt.bin"
(1)  196/  20DD45 :                     
(1)  197/  20DD45 :                     ; ------------------------------------------------------------
(1)  198/  20DD45 :                     
(1)  199/  20DD45 :                     GemaTrk_MOVEME:
(1)  200/  20DD45 : (MACRO)              	gemaHead .blk,.pat,.ins,13
(1)  200/  20DD45 : 000D                        dc.w 13
(1)  200/  20DD47 : 0020 DD53                   dc.l .BLK
(1)  200/  20DD4B : 0020 DD6A                   dc.l .PAT
(1)  200/  20DD4F : 0020 EC82                   dc.l .INS
(1)  201/  20DD53 :                     .blk:
(1)  202/  20DD53 :                     	binclude "sound/tracks/moveme_blk.bin"
(1)  203/  20DD6A :                     	align 2
(1)  204/  20DD6A :                     .pat:
(1)  205/  20DD6A :                     	binclude "sound/tracks/moveme_patt.bin"
(1)  206/  20EC82 :                     	align 2
(1)  207/  20EC82 :                     .ins:
(1)  208/  20EC82 : (MACRO)              	gInsPcm -12,PcmIns_MoveMe_Hit,%10
(1)  208/  20EC82 : D2F4 058F                   dc.b $D0|%10,-12,((PCMINS_MOVEME_HIT>>16)&$FF),((PCMINS_MOVEME_HIT>>8)&$FF)
(1)  208/  20EC86 : 0800 0000                   dc.b PCMINS_MOVEME_HIT&$FF,0,0,0
(1)  209/  20EC8A : (MACRO)              	gInsFm 0,FmIns_Bass_Duck
(1)  209/  20EC8A : A000 2150                   dc.b $A0,0,((FMINS_BASS_DUCK>>16)&$FF),((FMINS_BASS_DUCK>>8)&$FF)
(1)  209/  20EC8E : 6E00 0000                   dc.b FMINS_BASS_DUCK&$FF,$00,$00,$00
(1)  210/  20EC92 : (MACRO)              	gInsPcm -12,PcmIns_MoveMe_BrassL,%11
(1)  210/  20EC92 : D3F4 05B3                   dc.b $D0|%11,-12,((PCMINS_MOVEME_BRASSL>>16)&$FF),((PCMINS_MOVEME_BRASSL>>8)&$FF)
(1)  210/  20EC96 : 0000 0000                   dc.b PCMINS_MOVEME_BRASSL&$FF,0,0,0
(1)  211/  20EC9A : (MACRO)              	gInsFm 0,FmIns_ClosedHat
(1)  211/  20EC9A : A000 2154                   dc.b $A0,0,((FMINS_CLOSEDHAT>>16)&$FF),((FMINS_CLOSEDHAT>>8)&$FF)
(1)  211/  20EC9E : 4E00 0000                   dc.b FMINS_CLOSEDHAT&$FF,$00,$00,$00
(1)  212/  20ECA2 : (MACRO)              	gInsPsgN 0,$00,$00,$00,$00,$04,0,%110
(1)  212/  20ECA2 : 9600 0000                   dc.b $90|%110,0,$00,$00
(1)  212/  20ECA6 : 0000 0400                   dc.b $00,$00,$04,0
(1)  213/  20ECAA : (MACRO)              	gInsFm -12,FmIns_HBeat_tom
(1)  213/  20ECAA : A0F4 2153                   dc.b $A0,-12,((FMINS_HBEAT_TOM>>16)&$FF),((FMINS_HBEAT_TOM>>8)&$FF)
(1)  213/  20ECAE : CE00 0000                   dc.b FMINS_HBEAT_TOM&$FF,$00,$00,$00
(1)  214/  20ECB2 : (MACRO)              	gInsPcm -12,PcmIns_Snare,%10
(1)  214/  20ECB2 : D2F4 05A9                   dc.b $D0|%10,-12,((PCMINS_SNARE>>16)&$FF),((PCMINS_SNARE>>8)&$FF)
(1)  214/  20ECB6 : 7800 0000                   dc.b PCMINS_SNARE&$FF,0,0,0
(1)  215/  20ECBA : (MACRO)              	gInsPcm -12,PcmIns_Kick,%10		;gInsFm -38,FmIns_DrumKick_gem
(1)  215/  20ECBA : D2F4 05A0                   dc.b $D0|%10,-12,((PCMINS_KICK>>16)&$FF),((PCMINS_KICK>>8)&$FF)
(1)  215/  20ECBE : 0400 0000                   dc.b PCMINS_KICK&$FF,0,0,0
(1)  216/  20ECC2 : (MACRO)              	gInsFm -12,FmIns_Trumpet_carnival	;FmIns_Trumpet_2
(1)  216/  20ECC2 : A0F4 2151                   dc.b $A0,-12,((FMINS_TRUMPET_CARNIVAL>>16)&$FF),((FMINS_TRUMPET_CARNIVAL>>8)&$FF)
(1)  216/  20ECC6 : EE00 0000                   dc.b FMINS_TRUMPET_CARNIVAL&$FF,$00,$00,$00
(1)  217/  20ECCA : (MACRO)              	gInsPsg 0,$20,$20,$10,$01,$08,0		;gInsFm -12,FmIns_Ding_Baseball;
(1)  217/  20ECCA : 8000 2020                   dc.b $80,0,$20,$20
(1)  217/  20ECCE : 1001 0800                   dc.b $10,$01,$08,0
(1)  218/  20ECD2 : (MACRO)              	gInsFm3 0,FmIns_Sp_OpenHat
(1)  218/  20ECD2 : B000 214F                   dc.b $B0,0,((FMINS_SP_OPENHAT>>16)&$FF),((FMINS_SP_OPENHAT>>8)&$FF)
(1)  218/  20ECD6 : 1600 0000                   dc.b FMINS_SP_OPENHAT&$FF,$00,$00,$00
(1)  219/  20ECDA : (MACRO)              	gInsNull;gInsPwm -17,PwmIns_MyTime,%10
(1)  219/  20ECDA : 0000 0000                   dc.b $00,$00,$00,$00
(1)  219/  20ECDE : 0000 0000                   dc.b $00,$00,$00,$00
(1)  220/  20ECE2 : (MACRO)              	gInsPsg +12,$20,$10,$10,$0C,$0C,0
(1)  220/  20ECE2 : 800C 2010                   dc.b $80,+12,$20,$10
(1)  220/  20ECE6 : 100C 0C00                   dc.b $10,$0C,$0C,0
(1)  221/  20ECEA : (MACRO)              	gInsPsg 0,$00,$00,$00,$00,$06,0
(1)  221/  20ECEA : 8000 0000                   dc.b $80,0,$00,$00
(1)  221/  20ECEE : 0000 0600                   dc.b $00,$00,$06,0
(1)  222/  20ECF2 : (MACRO)              	gInsPcm -12,PcmIns_MoveMe_BrassR,%11
(1)  222/  20ECF2 : D3F4 061E                   dc.b $D0|%11,-12,((PCMINS_MOVEME_BRASSR>>16)&$FF),((PCMINS_MOVEME_BRASSR>>8)&$FF)
(1)  222/  20ECF6 : EC00 0000                   dc.b PCMINS_MOVEME_BRASSR&$FF,0,0,0
(1)  223/  20ECFA : (MACRO)              	gInsNull
(1)  223/  20ECFA : 0000 0000                   dc.b $00,$00,$00,$00
(1)  223/  20ECFE : 0000 0000                   dc.b $00,$00,$00,$00
(1)  224/  20ED02 : (MACRO)              	gInsNull
(1)  224/  20ED02 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  224/  20ED06 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  225/  20ED0A : (MACRO)              	gInsNull
(1)  225/  20ED0A : 0000 0000                   dc.b $00,$00,$00,$00
(1)  225/  20ED0E : 0000 0000                   dc.b $00,$00,$00,$00
(1)  226/  20ED12 : (MACRO)              	gInsNull
(1)  226/  20ED12 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  226/  20ED16 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  227/  20ED1A :                     
(1)  228/  20ED1A :                     ; ------------------------------------------------------------
(1)  229/  20ED1A :                     
(1)  230/  20ED1A :                     GemaTrk_Dream:
(1)  231/  20ED1A : (MACRO)              	gemaHead .blk,.pat,.ins,8
(1)  231/  20ED1A : 0008                        dc.w 8
(1)  231/  20ED1C : 0020 ED28                   dc.l .BLK
(1)  231/  20ED20 : 0020 ED35                   dc.l .PAT
(1)  231/  20ED24 : 0021 03F2                   dc.l .INS
(1)  232/  20ED28 :                     .blk:
(1)  233/  20ED28 :                     	binclude "sound/tracks/dream_blk.bin"
(1)  234/  20ED35 :                     .pat:
(1)  235/  20ED35 :                     	binclude "sound/tracks/dream_patt.bin"
(1)  236/  2103F2 :                     .ins:
(1)  237/  2103F2 : (MACRO)              	gInsFm 0,FmIns_Hats_closed
(1)  237/  2103F2 : A000 2154                   dc.b $A0,0,((FMINS_HATS_CLOSED>>16)&$FF),((FMINS_HATS_CLOSED>>8)&$FF)
(1)  237/  2103F6 : 2E00 0000                   dc.b FMINS_HATS_CLOSED&$FF,$00,$00,$00
(1)  238/  2103FA : (MACRO)              	gInsDac +12,DacIns_Kick_wegot,0
(1)  238/  2103FA : C00C 2287                   dc.b $C0|0,+12,((DACINS_KICK_WEGOT>>16)&$FF),((DACINS_KICK_WEGOT>>8)&$FF)
(1)  238/  2103FE : 5400 0000                   dc.b DACINS_KICK_WEGOT&$FF,0,0,0
(1)  239/  210402 : (MACRO)              	gInsFm -12,FmIns_brass_eur
(1)  239/  210402 : A0F4 2152                   dc.b $A0,-12,((FMINS_BRASS_EUR>>16)&$FF),((FMINS_BRASS_EUR>>8)&$FF)
(1)  239/  210406 : 0E00 0000                   dc.b FMINS_BRASS_EUR&$FF,$00,$00,$00
(1)  240/  21040A : (MACRO)              	gInsFm -24,FmIns_Trumpet_carnival
(1)  240/  21040A : A0E8 2151                   dc.b $A0,-24,((FMINS_TRUMPET_CARNIVAL>>16)&$FF),((FMINS_TRUMPET_CARNIVAL>>8)&$FF)
(1)  240/  21040E : EE00 0000                   dc.b FMINS_TRUMPET_CARNIVAL&$FF,$00,$00,$00
(1)  241/  210412 : (MACRO)              	gInsPsg  0,$00,$20,$00,$02,$10,0
(1)  241/  210412 : 8000 0020                   dc.b $80,0,$00,$20
(1)  241/  210416 : 0002 1000                   dc.b $00,$02,$10,0
(1)  242/  21041A : (MACRO)              	gInsPsgN 0,$00,$10,$00,$01,$04,0,%100
(1)  242/  21041A : 9400 0010                   dc.b $90|%100,0,$00,$10
(1)  242/  21041E : 0001 0400                   dc.b $00,$01,$04,0
(1)  243/  210422 : (MACRO)              	gInsFm 0,FmIns_Bass_low_1
(1)  243/  210422 : A000 2151                   dc.b $A0,0,((FMINS_BASS_LOW_1>>16)&$FF),((FMINS_BASS_LOW_1>>8)&$FF)
(1)  243/  210426 : 0E00 0000                   dc.b FMINS_BASS_LOW_1&$FF,$00,$00,$00
(1)  244/  21042A : (MACRO)              	gInsFm 0,FmIns_Hats_1
(1)  244/  21042A : A000 2154                   dc.b $A0,0,((FMINS_HATS_1>>16)&$FF),((FMINS_HATS_1>>8)&$FF)
(1)  244/  21042E : 0E00 0000                   dc.b FMINS_HATS_1&$FF,$00,$00,$00
(1)  245/  210432 : (MACRO)              	gInsPsgN 0,$00,$10,$00,$01,$08,0,%101
(1)  245/  210432 : 9500 0010                   dc.b $90|%101,0,$00,$10
(1)  245/  210436 : 0001 0800                   dc.b $00,$01,$08,0
(1)  246/  21043A : (MACRO)              	gInsNull
(1)  246/  21043A : 0000 0000                   dc.b $00,$00,$00,$00
(1)  246/  21043E : 0000 0000                   dc.b $00,$00,$00,$00
(1)  247/  210442 : (MACRO)              	gInsNull
(1)  247/  210442 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  247/  210446 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  248/  21044A : (MACRO)              	gInsNull
(1)  248/  21044A : 0000 0000                   dc.b $00,$00,$00,$00
(1)  248/  21044E : 0000 0000                   dc.b $00,$00,$00,$00
(1)  249/  210452 : (MACRO)              	gInsNull
(1)  249/  210452 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  249/  210456 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  250/  21045A : (MACRO)              	gInsPsg  0,$40,$00,$00,$00,$00,0
(1)  250/  21045A : 8000 4000                   dc.b $80,0,$40,$00
(1)  250/  21045E : 0000 0000                   dc.b $00,$00,$00,0
(1)  251/  210462 : (MACRO)              	gInsFm -12,FmIns_Trumpet_1
(1)  251/  210462 : A0F4 2151                   dc.b $A0,-12,((FMINS_TRUMPET_1>>16)&$FF),((FMINS_TRUMPET_1>>8)&$FF)
(1)  251/  210466 : CE00 0000                   dc.b FMINS_TRUMPET_1&$FF,$00,$00,$00
(1)  252/  21046A :                     
(1)  253/  21046A :                     ; Ticks: 3-1
(1)  254/  21046A :                     ; TEMPO: 170
(1)  255/  21046A :                     GemaTrk_Crystal:
(1)  256/  21046A : (MACRO)              	gemaHead .blk,.pat,.ins,7
(1)  256/  21046A : 0007                        dc.w 7
(1)  256/  21046C : 0021 0478                   dc.l .BLK
(1)  256/  210470 : 0021 0480                   dc.l .PAT
(1)  256/  210474 : 0021 1674                   dc.l .INS
(1)  257/  210478 :                     .blk:
(1)  258/  210478 :                     	binclude "sound/tracks/crystal_blk.bin"
(1)  259/  210480 :                     .pat:
(1)  260/  210480 :                     	binclude "sound/tracks/crystal_patt.bin"
(1)  261/  211674 :                     .ins:
(1)  262/  211674 : (MACRO)              	gInsFm 0,FmIns_Organ2a
(1)  262/  211674 : A000 214E                   dc.b $A0,0,((FMINS_ORGAN2A>>16)&$FF),((FMINS_ORGAN2A>>8)&$FF)
(1)  262/  211678 : CE00 0000                   dc.b FMINS_ORGAN2A&$FF,$00,$00,$00
(1)  263/  21167C : (MACRO)              	gInsPsgN 0,$00,$10,$00,$01,$10,0,%100
(1)  263/  21167C : 9400 0010                   dc.b $90|%100,0,$00,$10
(1)  263/  211680 : 0001 1000                   dc.b $00,$01,$10,0
(1)  264/  211684 : (MACRO)              	gInsDac 0,DacIns_Kick_wegot,0
(1)  264/  211684 : C000 2287                   dc.b $C0|0,0,((DACINS_KICK_WEGOT>>16)&$FF),((DACINS_KICK_WEGOT>>8)&$FF)
(1)  264/  211688 : 5400 0000                   dc.b DACINS_KICK_WEGOT&$FF,0,0,0
(1)  265/  21168C : (MACRO)              	gInsFm3 0,FmIns_Sp_OpenHat
(1)  265/  21168C : B000 214F                   dc.b $B0,0,((FMINS_SP_OPENHAT>>16)&$FF),((FMINS_SP_OPENHAT>>8)&$FF)
(1)  265/  211690 : 1600 0000                   dc.b FMINS_SP_OPENHAT&$FF,$00,$00,$00
(1)  266/  211694 : (MACRO)              	gInsNull
(1)  266/  211694 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  266/  211698 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  267/  21169C : (MACRO)              	gInsFm 0,FmIns_Bass_low_1
(1)  267/  21169C : A000 2151                   dc.b $A0,0,((FMINS_BASS_LOW_1>>16)&$FF),((FMINS_BASS_LOW_1>>8)&$FF)
(1)  267/  2116A0 : 0E00 0000                   dc.b FMINS_BASS_LOW_1&$FF,$00,$00,$00
(1)  268/  2116A4 :                     
(1)  269/  2116A4 :                     ; ------------------------------------------------------------
(1)  270/  2116A4 :                     
(1)  271/  2116A4 :                     GemaTrk_NadieMD:
(1)  272/  2116A4 : (MACRO)              	gemaHead .blk,.patt,.inst,7
(1)  272/  2116A4 : 0007                        dc.w 7
(1)  272/  2116A6 : 0021 16B2                   dc.l .BLK
(1)  272/  2116AA : 0021 16BA                   dc.l .PATT
(1)  272/  2116AE : 0021 294A                   dc.l .INST
(1)  273/  2116B2 :                     .blk:
(1)  274/  2116B2 :                     	binclude "sound/tracks/nadie_md_blk.bin"
(1)  275/  2116B9 :                     	align 2
(1)  276/  2116BA :                     .patt:
(1)  277/  2116BA :                     	binclude "sound/tracks/nadie_md_patt.bin"
(1)  278/  21294A :                     	align 2
(1)  279/  21294A :                     .inst:
(1)  280/  21294A : (MACRO)              	gInsDac 0,DacIns_Nadie,0
(1)  280/  21294A : C000 2180                   dc.b $C0|0,0,((DACINS_NADIE>>16)&$FF),((DACINS_NADIE>>8)&$FF)
(1)  280/  21294E : 0000 0000                   dc.b DACINS_NADIE&$FF,0,0,0
(1)  281/  212952 : (MACRO)              	gInsFm -36,FmIns_Piano_Aqua
(1)  281/  212952 : A0DC 2151                   dc.b $A0,-36,((FMINS_PIANO_AQUA>>16)&$FF),((FMINS_PIANO_AQUA>>8)&$FF)
(1)  281/  212956 : 6E00 0000                   dc.b FMINS_PIANO_AQUA&$FF,$00,$00,$00
(1)  282/  21295A : (MACRO)              	gInsFm -12,FmIns_HBeat_tom
(1)  282/  21295A : A0F4 2153                   dc.b $A0,-12,((FMINS_HBEAT_TOM>>16)&$FF),((FMINS_HBEAT_TOM>>8)&$FF)
(1)  282/  21295E : CE00 0000                   dc.b FMINS_HBEAT_TOM&$FF,$00,$00,$00
(1)  283/  212962 : (MACRO)              	gInsFm -37,FmIns_DrumKick_gem
(1)  283/  212962 : A0DB 2152                   dc.b $A0,-37,((FMINS_DRUMKICK_GEM>>16)&$FF),((FMINS_DRUMKICK_GEM>>8)&$FF)
(1)  283/  212966 : 8E00 0000                   dc.b FMINS_DRUMKICK_GEM&$FF,$00,$00,$00
(1)  284/  21296A : (MACRO)              	gInsPsg 0,$50,$70,$00,$06,$08,0
(1)  284/  21296A : 8000 5070                   dc.b $80,0,$50,$70
(1)  284/  21296E : 0006 0800                   dc.b $00,$06,$08,0
(1)  285/  212972 : (MACRO)              	gInsFm 0,FmIns_Trumpet_1
(1)  285/  212972 : A000 2151                   dc.b $A0,0,((FMINS_TRUMPET_1>>16)&$FF),((FMINS_TRUMPET_1>>8)&$FF)
(1)  285/  212976 : CE00 0000                   dc.b FMINS_TRUMPET_1&$FF,$00,$00,$00
(1)  286/  21297A : (MACRO)              	gInsNull
(1)  286/  21297A : 0000 0000                   dc.b $00,$00,$00,$00
(1)  286/  21297E : 0000 0000                   dc.b $00,$00,$00,$00
(1)  287/  212982 : (MACRO)              	gInsFm3 0,FmIns_Sp_ClosedHat
(1)  287/  212982 : B000 214F                   dc.b $B0,0,((FMINS_SP_CLOSEDHAT>>16)&$FF),((FMINS_SP_CLOSEDHAT>>8)&$FF)
(1)  287/  212986 : 3E00 0000                   dc.b FMINS_SP_CLOSEDHAT&$FF,$00,$00,$00
(1)  288/  21298A : (MACRO)              	gInsFm3 0,FmIns_Sp_OpenHat
(1)  288/  21298A : B000 214F                   dc.b $B0,0,((FMINS_SP_OPENHAT>>16)&$FF),((FMINS_SP_OPENHAT>>8)&$FF)
(1)  288/  21298E : 1600 0000                   dc.b FMINS_SP_OPENHAT&$FF,$00,$00,$00
(1)  289/  212992 :                     
(1)  290/  212992 :                     GemaTrk_NadieMCD:
(1)  291/  212992 : (MACRO)              	gemaHead .blk,.patt,.inst,11
(1)  291/  212992 : 000B                        dc.w 11
(1)  291/  212994 : 0021 29A0                   dc.l .BLK
(1)  291/  212998 : 0021 29A8                   dc.l .PATT
(1)  291/  21299C : 0021 3BF8                   dc.l .INST
(1)  292/  2129A0 :                     .blk:
(1)  293/  2129A0 :                     	binclude "sound/tracks/nadie_mcd_blk.bin"
(1)  294/  2129A7 :                     	align 2
(1)  295/  2129A8 :                     .patt
(1)  296/  2129A8 :                     	binclude "sound/tracks/nadie_mcd_patt.bin"
(1)  297/  213BF8 :                     	align 2
(1)  298/  213BF8 :                     .inst:
(1)  299/  213BF8 : (MACRO)              	gInsPcm -12,PcmIns_NadieL,%10
(1)  299/  213BF8 : D2F4 03CF                   dc.b $D0|%10,-12,((PCMINS_NADIEL>>16)&$FF),((PCMINS_NADIEL>>8)&$FF)
(1)  299/  213BFC : A800 0000                   dc.b PCMINS_NADIEL&$FF,0,0,0
(1)  300/  213C00 : (MACRO)              	gInsFm -36,FmIns_Piano_Aqua
(1)  300/  213C00 : A0DC 2151                   dc.b $A0,-36,((FMINS_PIANO_AQUA>>16)&$FF),((FMINS_PIANO_AQUA>>8)&$FF)
(1)  300/  213C04 : 6E00 0000                   dc.b FMINS_PIANO_AQUA&$FF,$00,$00,$00
(1)  301/  213C08 : (MACRO)              	gInsFm -12,FmIns_HBeat_tom
(1)  301/  213C08 : A0F4 2153                   dc.b $A0,-12,((FMINS_HBEAT_TOM>>16)&$FF),((FMINS_HBEAT_TOM>>8)&$FF)
(1)  301/  213C0C : CE00 0000                   dc.b FMINS_HBEAT_TOM&$FF,$00,$00,$00
(1)  302/  213C10 : (MACRO)              	gInsPcm -12-12,PcmIns_PKick,%00
(1)  302/  213C10 : D0E8 0342                   dc.b $D0|%00,-12-12,((PCMINS_PKICK>>16)&$FF),((PCMINS_PKICK>>8)&$FF)
(1)  302/  213C14 : 9200 0000                   dc.b PCMINS_PKICK&$FF,0,0,0
(1)  303/  213C18 : (MACRO)              	gInsPsg 0,$50,$70,$00,$06,$08,0
(1)  303/  213C18 : 8000 5070                   dc.b $80,0,$50,$70
(1)  303/  213C1C : 0006 0800                   dc.b $00,$06,$08,0
(1)  304/  213C20 : (MACRO)              	gInsFm 0,FmIns_Trumpet_1
(1)  304/  213C20 : A000 2151                   dc.b $A0,0,((FMINS_TRUMPET_1>>16)&$FF),((FMINS_TRUMPET_1>>8)&$FF)
(1)  304/  213C24 : CE00 0000                   dc.b FMINS_TRUMPET_1&$FF,$00,$00,$00
(1)  305/  213C28 : (MACRO)              	gInsPcm 0-12,PcmIns_Piano,%00
(1)  305/  213C28 : D0F4 034A                   dc.b $D0|%00,0-12,((PCMINS_PIANO>>16)&$FF),((PCMINS_PIANO>>8)&$FF)
(1)  305/  213C2C : 0C00 0000                   dc.b PCMINS_PIANO&$FF,0,0,0
(1)  306/  213C30 : (MACRO)              	gInsPcm -12-12,PcmIns_PTom,%00
(1)  306/  213C30 : D0E8 03C3                   dc.b $D0|%00,-12-12,((PCMINS_PTOM>>16)&$FF),((PCMINS_PTOM>>8)&$FF)
(1)  306/  213C34 : E800 0000                   dc.b PCMINS_PTOM&$FF,0,0,0
(1)  307/  213C38 : (MACRO)              	gInsPcm -12,PcmIns_NadieR,%10
(1)  307/  213C38 : D2F4 04AF                   dc.b $D0|%10,-12,((PCMINS_NADIER>>16)&$FF),((PCMINS_NADIER>>8)&$FF)
(1)  307/  213C3C : 5800 0000                   dc.b PCMINS_NADIER&$FF,0,0,0
(1)  308/  213C40 :                     
(1)  309/  213C40 :                     GemaTrk_NadieMARS:
(1)  310/  213C40 : (MACRO)              	gemaHead .blk,.patt,.inst,11
(1)  310/  213C40 : 000B                        dc.w 11
(1)  310/  213C42 : 0021 3C4E                   dc.l .BLK
(1)  310/  213C46 : 0021 3C56                   dc.l .PATT
(1)  310/  213C4A : 0021 4E66                   dc.l .INST
(1)  311/  213C4E :                     .blk:
(1)  312/  213C4E :                     	binclude "sound/tracks/nadie_blk.bin"
(1)  313/  213C55 :                     	align 2
(1)  314/  213C56 :                     .patt
(1)  315/  213C56 :                     	binclude "sound/tracks/nadie_patt.bin"
(1)  316/  214E66 :                     	align 2
(1)  317/  214E66 :                     .inst:
(1)  318/  214E66 : (MACRO)              	gInsPwm 0,PwmIns_Nadie,%10
(1)  318/  214E66 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  318/  214E6A : 0000 0000                   dc.b $00,$00,$00,$00
(1)  319/  214E6E : (MACRO)              	gInsFm -36,FmIns_Piano_Aqua
(1)  319/  214E6E : A0DC 2151                   dc.b $A0,-36,((FMINS_PIANO_AQUA>>16)&$FF),((FMINS_PIANO_AQUA>>8)&$FF)
(1)  319/  214E72 : 6E00 0000                   dc.b FMINS_PIANO_AQUA&$FF,$00,$00,$00
(1)  320/  214E76 : (MACRO)              	gInsFm -12,FmIns_HBeat_tom
(1)  320/  214E76 : A0F4 2153                   dc.b $A0,-12,((FMINS_HBEAT_TOM>>16)&$FF),((FMINS_HBEAT_TOM>>8)&$FF)
(1)  320/  214E7A : CE00 0000                   dc.b FMINS_HBEAT_TOM&$FF,$00,$00,$00
(1)  321/  214E7E : (MACRO)              	gInsPwm -12,PwmIns_PKick,%00
(1)  321/  214E7E : 0000 0000                   dc.b $00,$00,$00,$00
(1)  321/  214E82 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  322/  214E86 : (MACRO)              	gInsPsg 0,$50,$70,$00,$06,$08,0
(1)  322/  214E86 : 8000 5070                   dc.b $80,0,$50,$70
(1)  322/  214E8A : 0006 0800                   dc.b $00,$06,$08,0
(1)  323/  214E8E : (MACRO)              	gInsFm 0,FmIns_Trumpet_1
(1)  323/  214E8E : A000 2151                   dc.b $A0,0,((FMINS_TRUMPET_1>>16)&$FF),((FMINS_TRUMPET_1>>8)&$FF)
(1)  323/  214E92 : CE00 0000                   dc.b FMINS_TRUMPET_1&$FF,$00,$00,$00
(1)  324/  214E96 : (MACRO)              	gInsPwm 0,PwmIns_Piano,%00
(1)  324/  214E96 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  324/  214E9A : 0000 0000                   dc.b $00,$00,$00,$00
(1)  325/  214E9E : (MACRO)              	gInsPwm -12,PwmIns_PTom,%00
(1)  325/  214E9E : 0000 0000                   dc.b $00,$00,$00,$00
(1)  325/  214EA2 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  326/  214EA6 : (MACRO)              	gInsNull
(1)  326/  214EA6 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  326/  214EAA : 0000 0000                   dc.b $00,$00,$00,$00
(1)  327/  214EAE :                     
     413/  214EAE :                     		include "sound/instr.asm"		; GEMA: FM instruments
(1)    1/  214EAE :                     ; ====================================================================
(1)    2/  214EAE :                     ; --------------------------------------------------------
(1)    3/  214EAE :                     ; GEMA/Nikona FM instruments "patches"
(1)    4/  214EAE :                     ;
(1)    5/  214EAE :                     ; Use the included FM_EDITOR.bin ROM to make your
(1)    6/  214EAE :                     ; own instruments/patches
(1)    7/  214EAE :                     ; --------------------------------------------------------
(1)    8/  214EAE :                     
(1)    9/  214EAE :                     ; FM_EDITOR savestate data is located at:
(1)   10/  214EAE :                     ; $2478
(1)   11/  214EAE :                     ;
(1)   12/  214EAE :                     ; Sizes:
(1)   13/  214EAE :                     ; Normal FM ins: $20
(1)   14/  214EAE :                     ; Special FM ins: $28
(1)   15/  214EAE :                     ;
(1)   16/  214EAE :                     ; REGISTER FORMAT:
(1)   17/  214EAE :                     ; dc.b $30,$34,$38,$3C
(1)   18/  214EAE :                     ; dc.b $40,$44,$48,$4C
(1)   19/  214EAE :                     ; dc.b $50,$54,$58,$5C
(1)   20/  214EAE :                     ; dc.b $60,$64,$68,$6C
(1)   21/  214EAE :                     ; dc.b $70,$74,$78,$7C
(1)   22/  214EAE :                     ; dc.b $80,$84,$88,$8C
(1)   23/  214EAE :                     ; dc.b $90,$94,$98,$9C
(1)   24/  214EAE :                     ; dc.b $B0,$B4,$22,$28
(1)   25/  214EAE :                     ; ** Extra words for FM3 special:
(1)   26/  214EAE :                     ; dc.w OP1,OP2,OP3,OP4
(1)   27/  214EAE :                     ;
(1)   28/  214EAE :                     ; $22 LFO: %0000evvv
(1)   29/  214EAE :                     ; e - Enable
(1)   30/  214EAE :                     ; v - Value
(1)   31/  214EAE :                     ;
(1)   32/  214EAE :                     ; $28 KEYS: %oooo0000
(1)   33/  214EAE :                     ; o - Operators 4-1
(1)   34/  214EAE :                     
(1)   35/  214EAE :                     FmIns_Organ2:
(1)   36/  214EAE :                     		binclude "sound/instr/fm/organ2.gsx",$2478,$20
(1)   37/  214ECE :                     FmIns_Organ2a:
(1)   38/  214ECE :                     		binclude "sound/instr/fm/organ2a.gsx",$2478,$20
(1)   39/  214EEE :                     
(1)   40/  214EEE :                     ; FM3 Special
(1)   41/  214EEE :                     FmIns_Fm3_Explosion:
(1)   42/  214EEE :                     		binclude "sound/instr/fm/OLD/fm3_sfx_boomworm.gsx",$2478,$28
(1)   43/  214F16 :                     FmIns_Sp_OpenHat:
(1)   44/  214F16 :                     		binclude "sound/instr/fm/OLD/fm3_openhat.gsx",$2478,$28
(1)   45/  214F3E :                     FmIns_Sp_ClosedHat:
(1)   46/  214F3E :                     		binclude "sound/instr/fm/OLD/fm3_closedhat.gsx",$2478,$28
(1)   47/  214F66 :                     FmIns_Sp_Cowbell:
(1)   48/  214F66 :                     		binclude "sound/instr/fm/OLD/fm3_cowbell.gsx",$2478,$28
(1)   49/  214F8E :                     ; BASS
(1)   50/  214F8E :                     FmIns_Bass_1:
(1)   51/  214F8E :                     		binclude "sound/instr/fm/OLD/bass_low.gsx",$2478,$20
(1)   52/  214FAE :                     FmIns_Bass_2:
(1)   53/  214FAE :                     		binclude "sound/instr/fm/OLD/bass_strong.gsx",$2478,$20
(1)   54/  214FCE :                     FmIns_Bass_donna:
(1)   55/  214FCE :                     		binclude "sound/instr/fm/OLD/bass_feellove.gsx",$2478,$20
(1)   56/  214FEE :                     FmIns_Bass_groove:
(1)   57/  214FEE :                     		binclude "sound/instr/fm/OLD/bass_groove.gsx",$2478,$20
(1)   58/  21500E :                     FmIns_Bass_groove_2:
(1)   59/  21500E :                     		binclude "sound/instr/fm/OLD/bass_groove_2.gsx",$2478,$20
(1)   60/  21502E :                     FmIns_Bass_groove_gem:
(1)   61/  21502E :                     		binclude "sound/instr/fm/OLD/bass_groove_gem.gsx",$2478,$20
(1)   62/  21504E :                     FmIns_Bass_italo:
(1)   63/  21504E :                     		binclude "sound/instr/fm/OLD/bass_italo.gsx",$2478,$20
(1)   64/  21506E :                     FmIns_Bass_duck:
(1)   65/  21506E :                     		binclude "sound/instr/fm/OLD/bass_duck.gsx",$2478,$20
(1)   66/  21508E :                     FmIns_Bass_4:
(1)   67/  21508E :                     		binclude "sound/instr/fm/OLD/bass_4.gsx",$2478,$20
(1)   68/  2150AE :                     FmIns_Bass_8:
(1)   69/  2150AE :                     		binclude "sound/instr/fm/OLD/bass_8.gsx",$2478,$20
(1)   70/  2150CE :                     FmIns_Bass_club:
(1)   71/  2150CE :                     		binclude "sound/instr/fm/OLD/OLD_bass_club.gsx",$2478,$20
(1)   72/  2150EE :                     FmIns_Bass_calm:
(1)   73/  2150EE :                     		binclude "sound/instr/fm/OLD/bass_calm.gsx",$2478,$20
(1)   74/  21510E :                     FmIns_Bass_low_1:
(1)   75/  21510E :                     		binclude "sound/instr/fm/OLD/bass_low_1.bin"
(1)   76/  21512E :                     FmIns_Bass_Oil:
(1)   77/  21512E :                     		binclude "sound/instr/fm/OLD/bass_oil.gsx",$2478,$20
(1)   78/  21514E :                     
(1)   79/  21514E :                     ; PIANO
(1)   80/  21514E :                     FmIns_PianoM1:
(1)   81/  21514E :                     		binclude "sound/instr/fm/OLD/piano_m1.gsx",$2478,$20
(1)   82/  21516E :                     FmIns_Piano_Aqua:
(1)   83/  21516E :                     		binclude "sound/instr/fm/OLD/piano_aqua.gsx",$2478,$20
(1)   84/  21518E :                     FmIns_Piano_Hard:
(1)   85/  21518E :                     		binclude "sound/instr/fm/OLD/piano_hard.bin"
(1)   86/  2151AE :                     ; FmIns_Piano_m1:
(1)   87/  2151AE :                     ; 		binclude "sound/instr/fm/OLD/piano_m1.gsx",$2478,$20
(1)   88/  2151AE :                     
(1)   89/  2151AE :                     
(1)   90/  2151AE :                     FmIns_Synth_Plus:
(1)   91/  2151AE :                     		binclude "sound/instr/fm/OLD/OLD_synthplus.gsx",$2478,$20
(1)   92/  2151CE :                     
(1)   93/  2151CE :                     FmIns_Trumpet_1:
(1)   94/  2151CE :                     		binclude "sound/instr/fm/OLD/OLD_trumpet_1.gsx",$2478,$20
(1)   95/  2151EE :                     FmIns_Trumpet_carnival:
(1)   96/  2151EE :                     		binclude "sound/instr/fm/OLD/OLD_trumpet_carnivl.gsx",$2478,$20
(1)   97/  21520E :                     
(1)   98/  21520E :                     
(1)   99/  21520E :                     FmIns_brass_eur:
(1)  100/  21520E :                     		binclude "sound/instr/fm/OLD/OLD_brass_eur.gsx",$2478,$20
(1)  101/  21522E :                     FmIns_Brass_Puy:
(1)  102/  21522E :                     		binclude "sound/instr/fm/OLD/brass_puy.gsx",$2478,$20
(1)  103/  21524E :                     
(1)  104/  21524E :                     
(1)  105/  21524E :                     FmIns_Organ_Ito:
(1)  106/  21524E :                     		binclude "sound/instr/fm/OLD/organ_ito.gsx",$2478,$20
(1)  107/  21526E :                     FmIns_Ding_Baseball:
(1)  108/  21526E :                     		binclude "sound/instr/fm/OLD/ding_baseball.gsx",$2478,$20
(1)  109/  21528E :                     FmIns_DrumKick_gem:
(1)  110/  21528E :                     		binclude "sound/instr/fm/OLD/drum_kick_gem.gsx",$2478,$20
(1)  111/  2152AE :                     
(1)  112/  2152AE :                     
(1)  113/  2152AE :                     FmIns_Trumpet_2:
(1)  114/  2152AE :                     		binclude "sound/instr/fm/OLD/trumpet_2.gsx",$2478,$20
(1)  115/  2152CE :                     FmIns_Trumpet_puy:
(1)  116/  2152CE :                     		binclude "sound/instr/fm/OLD/trumpet_puy.gsx",$2478,$20
(1)  117/  2152EE :                     FmIns_Marimba:
(1)  118/  2152EE :                     		binclude "sound/instr/fm/OLD/marimba.gsx",$2478,$20
(1)  119/  21530E :                     
(1)  120/  21530E :                     FmIns_Ding_toy:
(1)  121/  21530E :                     		binclude "sound/instr/fm/OLD/ding_toy.gsx",$2478,$20
(1)  122/  21532E :                     
(1)  123/  21532E :                     FmIns_Flaute_cave:
(1)  124/  21532E :                     		binclude "sound/instr/fm/OLD/flaute_sea.gsx",$2478,$20
(1)  125/  21534E :                     FmIns_Banjo_puy:
(1)  126/  21534E :                     		binclude "sound/instr/fm/OLD/banjo_puy.gsx",$2478,$20
(1)  127/  21536E :                     FmIns_PSynth_plus:
(1)  128/  21536E :                     		binclude "sound/instr/fm/OLD/psynth_plus.gsx",$2478,$20
(1)  129/  21538E :                     FmIns_Ding_1:
(1)  130/  21538E :                     		binclude "sound/instr/fm/OLD/ding_gem.gsx",$2478,$20
(1)  131/  2153AE :                     FmIns_Trombone_gem:
(1)  132/  2153AE :                     		binclude "sound/instr/fm/OLD/trombone_gem.gsx",$2478,$20
(1)  133/  2153CE :                     FmIns_HBeat_tom:
(1)  134/  2153CE :                     		binclude "sound/instr/fm/OLD/nadia_tom.gsx",$2478,$20
(1)  135/  2153EE :                     FmIns_Guitar_bball:
(1)  136/  2153EE :                     		binclude "sound/instr/fm/OLD/guitar_bball.gsx",$2478,$20
(1)  137/  21540E :                     
(1)  138/  21540E :                     FmIns_Hats_1:
(1)  139/  21540E :                     		binclude "sound/instr/fm/OLD/fm_hats_spot.bin"
(1)  140/  21542E :                     FmIns_Hats_closed:
(1)  141/  21542E :                     		binclude "sound/instr/fm/OLD/hats_closed.gsx",$2478,$20
(1)  142/  21544E :                     FmIns_ClosedHat:
(1)  143/  21544E :                     		binclude "sound/instr/fm/OLD/hats_closed.gsx",$2478,$20
(1)  144/  21546E :                     
(1)  145/  21546E :                     FmIns_Sewer_1:
(1)  146/  21546E :                     		binclude "sound/instr/fm/OLD/sewer_1.bin"
(1)  147/  21548E :                     
(1)  148/  21548E :                     
(1)  149/  21548E :                     FmIns_Ambient_dark:
(1)  150/  21548E :                     		binclude "sound/instr/fm/OLD/ambient_dark.gsx",$2478,$20
(1)  151/  2154AE :                     FmIns_Ambient_spook:
(1)  152/  2154AE :                     		binclude "sound/instr/fm/OLD/ambient_spook.gsx",$2478,$20
(1)  153/  2154CE :                     FmIns_Ambient_3:
(1)  154/  2154CE :                     		binclude "sound/instr/fm/OLD/ambient_3.gsx",$2478,$20
(1)  155/  2154EE :                     
(1)  156/  2154EE :                     
(1)  157/  2154EE :                     ; FmIns_Guitar_bball:
(1)  158/  2154EE :                     ; 		binclude "sound/instr/fm/guitar_bball.gsx",$2478,$20
(1)  159/  2154EE :                     
     414/  2154EE :                     		include "sound/smpl_dac.asm"		; (MCD/CD32X ONLY) GEMA: DAC samples
(1)    1/  2154EE :                     ; ====================================================================
(1)    2/  2154EE :                     ; --------------------------------------------------------
(1)    3/  2154EE :                     ; GEMA/Nikona DAC instruments
(1)    4/  2154EE :                     ;
(1)    5/  2154EE :                     ; This must be located at the 68k's 900000 area.
(1)    6/  2154EE :                     ; ** 68K BANK 0 only **
(1)    7/  2154EE :                     ;
(1)    8/  2154EE :                     ; BASE Samplerate is at 16000hz
(1)    9/  2154EE :                     ; --------------------------------------------------------
(1)   10/  2154EE :                     
(1)   11/  2154EE :                     	align $8000
(1)   12/  218000 :                     
(1)   13/  218000 :                     ; --------------------------------------------------------
(1)   14/  218000 :                     
(1)   15/  218000 :                     DacIns_Nadie:
(1)   16/  218000 : (MACRO)              	gSmpHead .end-.start,0
(1)   16/  218000 : B4DF 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   16/  218003 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   17/  218006 :                     .start:	binclude "sound/instr/smpl/nadie.wav",$2C
(1)   18/  225FBA :                     .end:
(1)   19/  225FBA :                     DacIns_Kick_techno:
(1)   20/  225FBA : (MACRO)              	gSmpHead .end-.start,0
(1)   20/  225FBA : 9C06 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   20/  225FBD : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   21/  225FC0 :                     .start:	binclude "sound/instr/smpl/ST-72_kick.wav",$2C
(1)   22/  22665C :                     .end:
(1)   23/  22665C :                     DacIns_Snare_techno:
(1)   24/  22665C : (MACRO)              	gSmpHead .end-.start,0
(1)   24/  22665C : F220 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   24/  22665F : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   25/  226662 :                     .start:	binclude "sound/instr/smpl/ST-79_snare.wav",$2C
(1)   26/  228754 :                     .end:
(1)   27/  228754 :                     DacIns_Kick_wegot:
(1)   28/  228754 : (MACRO)              	gSmpHead .end-.start,0
(1)   28/  228754 : 7407 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   28/  228757 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   29/  22875A :                     .start:	binclude "sound/instr/smpl/wegot_kick.wav",$2C
(1)   30/  228ECE :                     .end:
(1)   31/  228ECE :                     
     415/  228ECE :                     mdbank0_e:
     416/  228ECE : (MACRO)              	data_bkend MCD_DBANK0,MCD_DBANK0_e,mdbank0_e-mdbank0
     416/  228ECE :                     
     416/   7E6CE :                                     dephase
     416/   7E6CE :                                     align $800
     416/   7E800 : =$7E800              MCD_DBANK0_E label *  ; <-- CD/CD32X ONLY
     416/   7E800 :  (MACRO-2)                           report "THIS 68K DATA BANK at WORD-RAM",MDBANK0_E-MDBANK0,$40000
     417/   7E800 :                     
     418/   7E800 :                     ; --------------------------------------------------------
     419/   7E800 :                     ; BANK 1
     420/   7E800 :                     ; --------------------------------------------------------
     421/   7E800 :                     
     422/   7E800 :                     ; 	data_bank MCD_DBANK1,-1
     423/   7E800 :                     ; 		org $200000-4
     424/   7E800 :                     ; 		dc.b "BNK1"
     425/   7E800 :                     ; 	data_bank_e MCD_DBANK1_e
     426/   7E800 :                     
     427/   7E800 :                     ; --------------------------------------------------------
     428/   7E800 :                     ; BANK 2
     429/   7E800 :                     ; --------------------------------------------------------
     430/   7E800 :                     
     431/   7E800 :                     ; 	data_bank MCD_DBANK2,-1
     432/   7E800 :                     ; 		org $300000-4
     433/   7E800 :                     ; 		dc.b "BNK2"
     434/   7E800 :                     ; 	data_bank_e MCD_DBANK2_e
     435/   7E800 :                     
     436/   7E800 :                     ; --------------------------------------------------------
     437/   7E800 :                     ; BANK 3
     438/   7E800 :                     ; --------------------------------------------------------
     439/   7E800 :                     
     440/   7E800 :                     ; 	data_bank MCD_DBANK3,-1
     441/   7E800 :                     ; 		org $400000-4
     442/   7E800 :                     ; 		dc.b "BNK3"
     443/   7E800 :                     ; 	data_bank_e MCD_DBANK3_e
     444/   7E800 :                     
     445/   7E800 :                     ; ====================================================================
     446/   7E800 :                     ; ----------------------------------------------------------------
     447/   7E800 :                     ; 32X/CD32X ONLY
     448/   7E800 :                     ;
     449/   7E800 :                     ; SDRAM DATA packages for each screen mode
     450/   7E800 :                     ;
     451/   7E800 :                     ; Usage:
     452/   7E800 :                     ; sdram_bank START_LABEL,END_LABEL
     453/   7E800 :                     ; (includes and bincludes)
     454/   7E800 :                     ; sdram_bank_e START_LABEL,END_LABEL
     455/   7E800 :                     ; ----------------------------------------------------------------
     456/   7E800 :                     
     457/   7E800 :                     ; ---------------------------------------------
     458/   7E800 :                     ; DEFAULT
     459/   7E800 :                     ; ---------------------------------------------
     460/   7E800 :                     
     461/   7E800 : (MACRO)              	sdram_bkset MARSDATA_DEFAULT,MARSDATA_DEFAULT_e
     461/   7E800 :                                     align $800
     461/   7E800 :                     ; MARSDATA_DEFAULT:
     461/   7E800 : =$7E800              MARSDATA_DEFAULT label *
     462/   7E800 :                     	include "game/screen_0/data_mgfx.asm"
(1)    1/   7E800 :                     ; ====================================================================
(1)    2/   7E800 :                     ; ----------------------------------------------------------------
(1)    3/   7E800 :                     ; Put your 32X graphics here, indexed or direct
(1)    4/   7E800 :                     ;
(1)    5/   7E800 :                     ; These are located on the SH2's ROM area, this will be gone
(1)    6/   7E800 :                     ; if RV is set to 1
(1)    7/   7E800 :                     ;
(1)    8/   7E800 :                     ; Labels MUST be aligned by 4
(1)    9/   7E800 :                     ; ----------------------------------------------------------------
(1)   10/   7E800 :                     
(1)   11/   7E800 :                     		align 4
(1)   12/   7E800 :                     ; ArtMars_Sabrina:
(1)   13/   7E800 :                     ; 		binclude "game/screen_0/data/objects/mars/sabrina/sabrina_art.bin"
(1)   14/   7E800 :                     ; 		align 4
(1)   15/   7E800 :                     ArtMars_TEST:
(1)   16/   7E800 :                     		binclude "game/screen_0/data/maps/mars/test/data_art.bin"
(1)   17/   90000 :                     		align 4
(1)   18/   90000 :                     
(1)   19/   90000 :                     
(1)   20/   90000 :                     
     463/   90000 : (MACRO)              	sdram_bkend MARSDATA_DEFAULT,MARSDATA_DEFAULT_e
     463/   90000 : =$90000              MARSDATA_DEFAULT_E label *
     463/   90000 :                                     align $800      ; <-- AS failing
     463/   90000 :                     ;               dc.l 0
     463/   90000 :                     
     464/   90000 :                     
     465/   90000 :                     ; ====================================================================
     466/   90000 :                     ; ----------------------------------------------------------------
     467/   90000 :                     ; Cartridge DMA graphics data
     468/   90000 :                     ;
     469/   90000 :                     ; BANK-free on 32X Cartridge
     470/   90000 :                     ; ----------------------------------------------------------------
     471/   90000 :                     
     475/   90000 :                     
     476/   90000 :                     ; ====================================================================
     477/   90000 :                     ; ---------------------------------------------
     478/   90000 :                     ; End
     479/   90000 :                     ; ---------------------------------------------
     480/   90000 :                     
     481/   90000 :                     ROM_END:
     483/   90000 : (MACRO)              		rompad (ROM_END&$FFFF00)+$10
     483/   90000 : =$10                 diff := (ROM_END&$FFFF00)+$10 - *
     483/   90000 : 0000 0000 0000                              dc.b [diff]0
            90006 : 0000 0000 0000 
            9000C : 0000 0000          
     484/   90010 :                     ; .here:		rompad .here&$FF0000+$10000
     488/   90010 :                     
 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 3 - 02/28/2024 03:57:57 AM


  Symbol Table (* = unused):
  --------------------------

*ADAPTER :                        0 - | *ADEN :                           2 - |
 ALV :                           24 - |
*ARCHITECTURE :                                      "x86_64-unknown-linux" - |
*ARTMARS_TEST :               7E800 C |  ART_SISI :                  20A10C C |
 ART_SISI_E :                20A6EC C |  ART_TEST :                  20198C C |
 ART_TEST_E :                20A10C C |  ASCII_FONT :                200D8C C |
 ASCII_PAL :       FFFFFFFFFFFF02D2 C |  ATK :                            8 - |
*BIGENDIAN :                      0 - | *BITBGON :                        7 - |
*BITCLICKL :                      0 - | *BITCLICKM :                      2 - |
*BITCLICKR :                      1 - | *BITCLICKS :                      3 - |
 BITDISPENBL :                    6 - |  BITDMA :                         1 - |
 BITDMAENBL :                     4 - | *BITDRWD :                        2 - |
*BITDRWL :                        1 - | *BITDRWR :                        0 - |
*BITDRWU :                        3 - | *BITFIFOE :                       9 - |
*BITFIFOF :                       8 - | *BITHBLK :                        2 - |
*BITHINTENBL :                    4 - | *BITHVSTOP :                      1 - |
*BITJOYA :                        6 - |  BITJOYB :                        4 - |
 BITJOYC :                        5 - |  BITJOYDOWN :                     1 - |
 BITJOYLEFT :                     2 - |  BITJOYMODE :                     B - |
 BITJOYRIGHT :                    3 - |  BITJOYSTART :                    7 - |
 BITJOYUP :                       0 - | *BITJOYX :                        A - |
*BITJOYY :                        9 - | *BITJOYZ :                        8 - |
*BITMAPMD :                       1 - | *BITMARSBG :                      6 - |
 BITOBJ_FLIPH :                   0 - |  BITOBJ_FLIPV :                   1 - |
 BITOBJ_MARS :                    7 - | *BITODD :                         4 - |
*BITPAL :                         0 - | *BITSPRCOL :                      5 - |
*BITSPROVR :                      6 - | *BITV30 :                         3 - |
 BITVBLK :                        3 - | *BITVINT :                        7 - |
*BITVINTENBL :                    5 - | *BITWRAMMODE :                    2 - |
*BRANCHEXT :                      0 - | *BRMDEL :                         5 - |
*BRMDIR :                         7 - | *BRMFORMAT :                      6 - |
*BRMINIT :                        0 - | *BRMREAD :                        3 - |
*BRMSERCH :                       2 - | *BRMSTAT :                        1 - |
*BRMVERIFY :                      8 - | *BRMWRITE :                       4 - |
*CART :                           1 - | *CASESENSITIVE :                  0 - |
*CBTCHKDISC :                     4 - | *CBTCHKSTAT :                     5 - |
*CBTINIT :                        0 - | *CBTINT :                         1 - |
*CBTIPDISC :                      6 - | *CBTIPSTAT :                      7 - |
*CBTOPENDISC :                    2 - | *CBTOPENSTAT :                    3 - |
*CBTSPDISC :                      8 - | *CBTSPSTAT :                      9 - |
*CDBCHK :                        80 - | *CDBPAUSE :                      84 - |
*CDBSTAT :                       81 - | *CDBTOCREAD :                    83 - |
*CDBTOCWRITE :                   82 - |  CDCACK :                        8D - |
 CDCREAD :                       8B - | *CDCSETMODE :                    96 - |
*CDCSTART :                      87 - | *CDCSTARTP :                     88 - |
 CDCSTAT :                       8A - |  CDCSTOP :                       89 - |
 CDCTRN :                        8C - |  CDPCM_CLEN :                     4 C |
 CDPCM_CREAD :                    8 C |  CDPCM_ENV :                      D C |
 CDPCM_FLAGS :                    0 C | *CDPCM_FREEB :                    3 C |
*CDPCM_FREEL :                   1C C |  CDPCM_INIT :                  643A C |
 CDPCM_INIT.CLR_PWM :          644E C |  CDPCM_INIT.COPY_DATA :        6488 C |
 CDPCM_INIT.DATA_BLK :         649A C |  CDPCM_INIT.WR_END :           645A C |
 CDPCM_LEN :                     14 C |  CDPCM_LOOP :                    18 C |
 CDPCM_PAN :                      C C |  CDPCM_PITCH :                    E C |
 CDPCM_READTABLE :             64AA C |
 CDPCM_READTABLE.CDCOM_KEYOFF :                                        64F0 C |
 CDPCM_READTABLE.CDCOM_KEYON : 64FC C |  CDPCM_READTABLE.DONT_UPD :    64EE C |
 CDPCM_READTABLE.EFFECT_MOD :  6564 C |  CDPCM_READTABLE.EFFECT_ONLY : 6560 C |
 CDPCM_READTABLE.GET_TBL :     64C4 C |  CDPCM_READTABLE.NO_COMM :     64DE C |
 CDPCM_READTABLE.NO_KEYCUT :   64D6 C |  CDPCM_READTABLE.NO_KEYOFF :   64CE C |
 CDPCM_START :                   10 C |  CDPCM_STREAM :                6592 C |
 CDPCM_STREAM.END_POINT :      6666 C |  CDPCM_STREAM.GET_ADDR :       65AC C |
 CDPCM_STREAM.KEEP_STRM :      65C8 C | *CDPCM_STREAM.LOOP_POINT :     663A C |
 CDPCM_STREAM.LOOP_STRM :      664A C |  CDPCM_STREAM.LOWHALF :        65FC C |
 CDPCM_STREAM.MAKE_BLK_STRM :  661E C |  CDPCM_STREAM.NON_STRM :       6606 C |
 CDPCM_STREAM.NOT_END :        66A4 C |  CDPCM_STREAM.STLEN_IT :       6672 C |
 CDPCM_STREAM.STRLEN_IT :      6656 C |  CDPCM_STRMF :                    1 C |
 CDPCM_STRMHALF :                 2 C |  CDPCM_UPDATE :                66A6 C |
 CDPCM_UPDATE.FILL_MODE :      681E C |  CDPCM_UPDATE.FIRST_FILL :     6738 C |
 CDPCM_UPDATE.GET_ADDR :       66C0 C |  CDPCM_UPDATE.LOOP_BLKL :      6820 C |
 CDPCM_UPDATE.MAKE_LBLK :      67C2 C | *CDPCM_UPDATE.NON_CHNG :       66F6 C |
 CDPCM_UPDATE.NON_UPD :        66E8 C |  CDPCM_UPDATE.NOT_STOP :       66E0 C |
 CDPCM_UPDATE.SET_ENDLOOP :    67A2 C |  CDPCM_UPDATE.SET_NONSTOP :    67A6 C |
 CDPCM_UPDATE.SMALL_SAMPL :    6794 C |  CDPCM_UPDATE.STOP_BIT :       66CE C |
 CDPCM_UPDATE.UPDATE_SET :     6700 C |  CDPCM_UPDATE.WAVE_BLKL :      67DC C |
 CDPCM_WAIT :                  6434 C |  CDPCM_WAVTOPCM :              6836 C |
 CDPCM_WAVTOPCM.WAVE_LIST :    6840 C |  CDRAMDST :                      31 C |
 CDRAMLEN :                      30 C |  CDRAMSRC :                      33 C |
 CDRAMSRCB :                     35 C |  CDREGION :                       1 - |
 CHECK_THISRAM :   FFFFFFFFFFFFA000 C |  CHIP_ENV :                    1239 C |
 CHIP_ENV.ATKEND :             12BC C | *CHIP_ENV.ATKZERO :            12BF C |
 CHIP_ENV.CHK2 :               12C5 C |  CHIP_ENV.CHK4 :               12FA C |
 CHIP_ENV.CKOF :               125D C |  CHIP_ENV.CKON :               1270 C |
*CHIP_ENV.DECTMR :             12C9 C |  CHIP_ENV.DKADD :              12E3 C |
 CHIP_ENV.DKSAV :              12EB C |  CHIP_ENV.DKYEND :             12F0 C |
 CHIP_ENV.DO_NFREQ :           134F C |  CHIP_ENV.ENVPROC :            128E C |
 CHIP_ENV.KILLENV :            1310 C | *CHIP_ENV.NBLOCK :             128E C |
 CHIP_ENV.NORMAL :             134A C |  CHIP_ENV.NOUPD :              1390 C |
 CHIP_ENV.NSKIP :              1285 C |  CHIP_ENV.SILNC_3 :            1346 C |
 CHIP_ENV.VEDLP :              1318 C |  CHIP_ENV.VLMUCH :             137C C |
 CHIP_ENV.VLOOP :              1245 C |  CHIP_ENV.VONLY :              1372 C |
 CHNL_CHIP :                      1 - |  CHNL_EFFARG :                    6 - |
 CHNL_EFFID :                     5 - |  CHNL_FLAGS :                     0 - |
 CHNL_INS :                       3 - |  CHNL_NOTE :                      2 - |
 CHNL_TYPE :                      7 - |  CHNL_VOL :                       4 - |
*CLICKL :                         2 - | *CLICKM :                         4 - |
*CLICKR :                         1 - | *CLICKS :                         8 - |
*CMDINTCLR :                     1A - | *CMDIRQ_ON :                      2 - |
 COM :                            0 - | *COMM0 :                         20 - |
*COMM1 :                         21 - | *COMM10 :                        2A - |
*COMM11 :                        2B - | *COMM12 :                        2C - |
*COMM13 :                        2D - | *COMM14 :                        2E - |
*COMM15 :                        2F - | *COMM2 :                         22 - |
*COMM3 :                         23 - | *COMM4 :                         24 - |
*COMM5 :                         25 - | *COMM6 :                         26 - |
*COMM7 :                         27 - | *COMM8 :                         28 - |
*COMM9 :                         29 - |  COMMZFIFO :                     40 C |
 COMMZREAD :                   1F85 C |  COMMZROMBLK :                   2F C |
 COMMZWRITE :                    2E C | *COMPMODE :                       0 - |
*CONSTPI :        3.141592653589793 - |  CONTROLLER_1 :    FFFFFFFFFFFFC004 - |
*CONTROLLER_2 :    FFFFFFFFFFFFC014 - | *CS0 :                            0 - |
*CS1 :                      2000000 - |  CS2 :                      4000000 - |
*CS3 :                      6000000 - |  CTREG :                          F - |
*CURRPADDING :                    0 - |  CURRTICKBITS :                1F96 C |
*CUSTOM :                         0 - | *CYCLE :                         32 - |
*DACINS_KICK_TECHNO :        225FBA C |  DACINS_KICK_TECHNO.END :    22665C C |
 DACINS_KICK_TECHNO.START :  225FC0 C |  DACINS_KICK_WEGOT :         228754 C |
 DACINS_KICK_WEGOT.END :     228ECE C |  DACINS_KICK_WEGOT.START :   22875A C |
 DACINS_NADIE :              218000 C |  DACINS_NADIE.END :          225FBA C |
 DACINS_NADIE.START :        218006 C | *DACINS_SNARE_TECHNO :       22665C C |
 DACINS_SNARE_TECHNO.END :   228754 C |  DACINS_SNARE_TECHNO.START : 226662 C |
 DAC_FILL :                      20 C |  DAC_ME :                         8 C |
 DAC_OFF :                     13CB C |  DAC_ON :                      13B6 C |
 DAC_PLAY :                    13E0 C |  DAC_REFILL :                  1414 C |
 DAC_REFILL.DACFILL_END :      14D3 C |  DAC_REFILL.DACFILL_LOOP :     148C C |
 DAC_REFILL.DACFILL_RET :      14D6 C |  DAC_REFILL.DAC_OVER :         1462 C |
 DATE :                "02/28/2024" - |  DDACCNTR :                    1F9B C |
 DDACFIFOMID :                 1F97 C |  DDACPNTR :                    1F98 C |
 DIFF :                          10 - | *DISPENBL :                      40 - |
 DKY :                            C - | *DMAENBL :                       10 - |
*DOTTEDSTRUCTS :                  0 - | *DREQCTL :                        6 - |
*DREQDEST :                       C - | *DREQFIFO :                      12 - |
*DREQLEN :                       10 - | *DREQSOURCE :                     8 - |
*DRVINIT :                       10 - | *DRVOPEN :                        A - |
 DRV_LOOP :                      54 C |  DRV_LOOP.CMND_0 :               ED C |
 DRV_LOOP.CMND_1 :               F0 C |  DRV_LOOP.CMND_2 :              109 C |
 DRV_LOOP.CMND_3 :              148 C |  DRV_LOOP.CMND_5 :              181 C |
 DRV_LOOP.CMND_6 :              1B9 C |  DRV_LOOP.CMND_7 :              1F1 C |
 DRV_LOOP.CMND_RDSLOT :         202 C |  DRV_LOOP.GETCBYTEL :            C0 C |
 DRV_LOOP.GRAB_ARG :             BE C |  DRV_LOOP.LIST :                 DD C |
 DRV_LOOP.NEITHER :              94 C |  DRV_LOOP.NEXT_CMD :             9B C |
 DRV_LOOP.NOBEATS :              7B C |  DRV_LOOP.NOTICKS :              6E C |
 DRV_LOOP.SRCH_DEL :            165 C |  DRV_LOOP.SRCH_FVOL :           19E C |
 DRV_LOOP.SRCH_MODE :           12B C |  DRV_LOOP.SRCH_SLOT :           215 C |
 DRV_LOOP.SRCH_VOL :            1D6 C |  DRV_LOOP.WRTTO_DEL :           172 C |
 DRV_LOOP.WRTTO_FVOL :          1AB C |  DRV_LOOP.WRTTO_SLOT :          13A C |
 DRV_LOOP.WRTTO_VOL :           1E3 C |  DTBL_MULTI :                   857 C |
 DTBL_SINGL :                   86D C |  DTBL_SINGL.CHNL_ULNK :        1041 C |
 DTBL_SINGL.CHNL_ULNKCUT :     103B C |  DTBL_SINGL.CHNL_ULNKOFF :     1041 C |
 DTBL_SINGL.COMN_PANLIST :      DE9 C |  DTBL_SINGL.DAC_CUT :           BB7 C |
 DTBL_SINGL.DAC_OFF :           BBD C |  DTBL_SINGL.DAC_PITCH :         BC0 C |
 DTBL_SINGL.D_CONT :            DA2 C |  DTBL_SINGL.EFFC :              D0F C |
 DTBL_SINGL.EFFC_D :            D2A C |  DTBL_SINGL.EFFC_E :            D6D C |
 DTBL_SINGL.EFFC_F :            D82 C |  DTBL_SINGL.EFFC_X :            DA3 C |
 DTBL_SINGL.FINE_DOWN :         D45 C |  DTBL_SINGL.FINE_UP :           D59 C |
 DTBL_SINGL.FM_CINDX :          B51 C |  DTBL_SINGL.FM_CUT :            A9B C |
 DTBL_SINGL.FM_HASVOL :         FD5 C |  DTBL_SINGL.FM_KEYOFF :         AA4 C |
 DTBL_SINGL.FM_OFF :            A95 C |  DTBL_SINGL.FM_SETFREQ :        AC3 C |
 DTBL_SINGL.FM_SETRLIST :       EEC C |  DTBL_SINGL.FM_TLOFF :          AAC C |
 DTBL_SINGL.FM_WRTALPAN :       B59 C |  DTBL_SINGL.FM_WRTLVOL :        ADA C |
 DTBL_SINGL.FND_OCT :          1026 C |  DTBL_SINGL.FROM_PSGN :         967 C |
 DTBL_SINGL.GET_OCT :          101B C |  DTBL_SINGL.INST :              E1A C |
 DTBL_SINGL.INS_DAC :           EFC C |  DTBL_SINGL.INS_FM :            E7B C |
 DTBL_SINGL.INS_PCM :           F50 C |  DTBL_SINGL.INS_PSG :           E45 C |
 DTBL_SINGL.INS_PSGN :          E3F C |  DTBL_SINGL.INS_PWM :           F88 C |
*DTBL_SINGL.INVL_INS :          E3E C |  DTBL_SINGL.KEEP_TLMX :         B46 C |
 DTBL_SINGL.KYCUT_PSG :         9B3 C |  DTBL_SINGL.KYCUT_PSGN :        9B0 C |
 DTBL_SINGL.KYOFF_PSG :         9A6 C |  DTBL_SINGL.KYOFF_PSGN :        9A3 C |
 DTBL_SINGL.KYPSGN_HATOFF :     9BD C |  DTBL_SINGL.LINKED :            8D7 C |
 DTBL_SINGL.MKFM_SET :          A26 C | *DTBL_SINGL.MKPCM_PROC :        C25 C |
 DTBL_SINGL.MKPCM_WRTON :       C22 C |  DTBL_SINGL.MK_DAC :            B8F C |
 DTBL_SINGL.MK_FM :             9C4 C |  DTBL_SINGL.MK_FMSPC :          A3A C |
 DTBL_SINGL.MK_LIST :           912 C |  DTBL_SINGL.MK_PCM :            BE6 C |
 DTBL_SINGL.MK_PSG :            946 C |  DTBL_SINGL.MK_PSGN :           920 C |
 DTBL_SINGL.MK_PWM :            C6F C |  DTBL_SINGL.MP_RESET :          C20 C |
 DTBL_SINGL.NEW_ROMDAT :        EAF C | *DTBL_SINGL.NOFM_NOTE :         A39 C |
 DTBL_SINGL.NORM_DOWN :         D43 C |  DTBL_SINGL.NORM_UP :           D5B C |
 DTBL_SINGL.NOTE :              FCB C |  DTBL_SINGL.NOT_DAC :           9E3 C |
 DTBL_SINGL.NOT_DSPC :          9F8 C |  DTBL_SINGL.NO_LFO :            B8E C |
 DTBL_SINGL.N_FM :             1011 C |  DTBL_SINGL.N_INDX :            FFD C |
 DTBL_SINGL.N_PSGN :           100C C |  DTBL_SINGL.N_STFREQ :          FFE C |
 DTBL_SINGL.PAN_MCD :           DD3 C |  DTBL_SINGL.PCM_CUT :           C62 C |
 DTBL_SINGL.PCM_EFFC :          C12 C |  DTBL_SINGL.PCM_NOTE :          C16 C |
 DTBL_SINGL.PCM_OFF :           C5B C |  DTBL_SINGL.PCM_PANLIST :       DF1 C |
 DTBL_SINGL.PCM_SETCOFF :       C67 C |  DTBL_SINGL.PSG_KEYON :         98E C |
 DTBL_SINGL.PWM_CUT :           CE0 C |  DTBL_SINGL.PWM_OFF :           CD9 C |
 DTBL_SINGL.PWM_SETCOFF :       CE5 C |  DTBL_SINGL.PWV_MUCH :          CB7 C |
 DTBL_SINGL.PW_EFFC :           C95 C |  DTBL_SINGL.PW_NOTE :           C99 C |
 DTBL_SINGL.PW_SEND :           C9B C |  DTBL_SINGL.RCYL_COM :          8C2 C |
 DTBL_SINGL.READFREQ_PCM :      CEF C |  DTBL_SINGL.READFREQ_PWM :      CF4 C |
 DTBL_SINGL.RES_PAN :           DC9 C |  DTBL_SINGL.SAME_PATCH :        EE7 C |
 DTBL_SINGL.SAVE_ARG :          D97 C |  DTBL_SINGL.SET_WAVFREQ :       CF7 C |
 DTBL_SINGL.SILN_DAC :          8CE C |  DTBL_SINGL.SILN_FM :           8D1 C |
 DTBL_SINGL.SILN_PCM :          8AC C |  DTBL_SINGL.SILN_PSG :          8A5 C |
 DTBL_SINGL.SILN_PSG_N :        8A1 C |  DTBL_SINGL.SILN_PWM :          8B8 C |
 DTBL_SINGL.SPCREGLIST :        A8D C |  DTBL_SINGL.TL_DOWN :           AB8 C |
 DTBL_SINGL.VMUCH :             99D C |  DTBL_SINGL.VOLU :              E11 C |
 DTBL_SINGL.VOL_DVLD :          D69 C |  DTBL_SINGL.VPCM_CARRY :        C46 C |
 DTBL_SINGL.WRITE_TL :          B3F C |  DTBL_SINGL.WR_SPC :            A70 C |
 DTH :                           20 - |  DTL :                           1C - |
 DWAVEBUFF :                   1D00 C | *EMU :                            1 - |
 ENV :                            1 - | *EXT_3 :                          C C |
*EXT_4 :                          E C | *FALSE :                          0 - |
 FDH :                            7 - |  FDL :                            5 - |
*FDRCHG :                        86 - | *FDRSET :                        85 - |
*FEN :                            2 - |  FILE_SUBDATA :                6070 C |
*FILLDATA :                       8 - | *FILLLENGTH :                     4 - |
*FILLSTART :                      6 - |  FLG :                           28 - |
*FM :                            80 - |  FMCACH_1 :                    16F9 C |
 FMCACH_2 :                    1721 C |  FMCACH_3 :                    1749 C |
 FMCACH_4 :                    1771 C |  FMCACH_5 :                    1799 C |
 FMCACH_6 :                    17C1 C |  FMCACH_LIST :                 14E5 C |
 FMFREQ_LIST :                 14F3 C | *FMINS_AMBIENT_3 :           2154CE C |
*FMINS_AMBIENT_DARK :        21548E C | *FMINS_AMBIENT_SPOOK :       2154AE C |
*FMINS_BANJO_PUY :           21534E C | *FMINS_BASS_1 :              214F8E C |
*FMINS_BASS_2 :              214FAE C | *FMINS_BASS_4 :              21508E C |
*FMINS_BASS_8 :              2150AE C | *FMINS_BASS_CALM :           2150EE C |
*FMINS_BASS_CLUB :           2150CE C | *FMINS_BASS_DONNA :          214FCE C |
 FMINS_BASS_DUCK :           21506E C | *FMINS_BASS_GROOVE :         214FEE C |
*FMINS_BASS_GROOVE_2 :       21500E C | *FMINS_BASS_GROOVE_GEM :     21502E C |
*FMINS_BASS_ITALO :          21504E C |  FMINS_BASS_LOW_1 :          21510E C |
*FMINS_BASS_OIL :            21512E C |  FMINS_BRASS_EUR :           21520E C |
*FMINS_BRASS_PUY :           21522E C |  FMINS_CLOSEDHAT :           21544E C |
 FMINS_DING_1 :              21538E C | *FMINS_DING_BASEBALL :       21526E C |
*FMINS_DING_TOY :            21530E C |  FMINS_DRUMKICK_GEM :        21528E C |
*FMINS_FLAUTE_CAVE :         21532E C |  FMINS_FM3_EXPLOSION :       214EEE C |
*FMINS_GUITAR_BBALL :        2153EE C |  FMINS_HATS_1 :              21540E C |
 FMINS_HATS_CLOSED :         21542E C |  FMINS_HBEAT_TOM :           2153CE C |
*FMINS_MARIMBA :             2152EE C | *FMINS_ORGAN2 :              214EAE C |
 FMINS_ORGAN2A :             214ECE C | *FMINS_ORGAN_ITO :           21524E C |
*FMINS_PIANOM1 :             21514E C |  FMINS_PIANO_AQUA :          21516E C |
*FMINS_PIANO_HARD :          21518E C | *FMINS_PSYNTH_PLUS :         21536E C |
*FMINS_SEWER_1 :             21546E C |  FMINS_SP_CLOSEDHAT :        214F3E C |
*FMINS_SP_COWBELL :          214F66 C |  FMINS_SP_OPENHAT :          214F16 C |
*FMINS_SYNTH_PLUS :          2151AE C | *FMINS_TROMBONE_GEM :        2153AE C |
 FMINS_TRUMPET_1 :           2151CE C | *FMINS_TRUMPET_2 :           2152AE C |
 FMINS_TRUMPET_CARNIVAL :    2151EE C | *FMINS_TRUMPET_PUY :         2152CE C |
 FMSPECIAL :                   1F84 C |  FM_AUTOREG :                  139C C |
 FM_SEND_1 :                   13A0 C |  FM_SEND_2 :                   13AB C |
*FRAMECTL :                       B - | *FREEFLAG :                      3F C |
*FS :                             1 - | *FULLPMMU :                       1 - |
 GEMADMAPAUSE :    FFFFFFFFFFFF014A C |  GEMADMAPAUSEROM : FFFFFFFFFFFF0186 C |
 GEMADMARESUME :   FFFFFFFFFFFF016C C |
 GEMADMARESUMEROM :                                        FFFFFFFFFFFF01A8 C |
 GEMAFADETRACK :   FFFFFFFFFFFF0226 C |  GEMAMSTRLISTPOS :               1C C |
 GEMAPLAYTRACK :   FFFFFFFFFFFF01E8 C |  GEMASETBEATS :    FFFFFFFFFFFF025E C |
 GEMASETMASTERLIST :                                       FFFFFFFFFFFF01D2 C |
 GEMASETTRACKVOL : FFFFFFFFFFFF0242 C | *GEMASFX_ALL :               20A70C C |
 GEMASFX_ALL.BLK :           20A71A C |  GEMASFX_ALL.INS :           20A7E0 C |
 GEMASFX_ALL.PAT :           20A720 C |  GEMASTOPTRACK :   FFFFFFFFFFFF020A C |
 GEMATEST :        FFFFFFFFFFFF01C2 C |  GEMATRK_ARENA1 :            20A882 C |
 GEMATRK_ARENA1.INS :        20A890 C |  GEMATRK_CRYSTAL :           21046A C |
 GEMATRK_CRYSTAL.BLK :       210478 C |  GEMATRK_CRYSTAL.INS :       211674 C |
 GEMATRK_CRYSTAL.PAT :       210480 C |  GEMATRK_DREAM :             20ED1A C |
 GEMATRK_DREAM.BLK :         20ED28 C |  GEMATRK_DREAM.INS :         2103F2 C |
 GEMATRK_DREAM.PAT :         20ED35 C |  GEMATRK_MOVEME :            20DD45 C |
 GEMATRK_MOVEME.BLK :        20DD53 C |  GEMATRK_MOVEME.INS :        20EC82 C |
 GEMATRK_MOVEME.PAT :        20DD6A C |  GEMATRK_NADIEMARS :         213C40 C |
 GEMATRK_NADIEMARS.BLK :     213C4E C |  GEMATRK_NADIEMARS.INST :    214E66 C |
 GEMATRK_NADIEMARS.PATT :    213C56 C |  GEMATRK_NADIEMCD :          212992 C |
 GEMATRK_NADIEMCD.BLK :      2129A0 C |  GEMATRK_NADIEMCD.INST :     213BF8 C |
 GEMATRK_NADIEMCD.PATT :     2129A8 C |  GEMATRK_NADIEMD :           2116A4 C |
 GEMATRK_NADIEMD.BLK :       2116B2 C |  GEMATRK_NADIEMD.INST :      21294A C |
 GEMATRK_NADIEMD.PATT :      2116BA C |  GEMATRK_TEST_0 :            20A808 C |
 GEMATRK_TEST_0.BLK :        20A81E C |  GEMATRK_TEST_0.INS :        20A816 C |
 GEMATRK_TEST_0.PAT :        20A821 C |  GEMA_INIT :                   10F4 C |
 GEMA_INIT.END_SETUP :         115F C |  GEMA_INIT.SETUP_LIST :        1134 C |
 GEMA_INIT.ST_COPY :           1153 C |  GEMA_LASTBANK :               14DA C |
 GEMA_LASTBANK.WRITE :         14DF C |  GEMA_MASTERLIST :           20A6EC C |
 GET_ROMTRCKS :                 5FB C |  GET_TICK :                    1160 C |
 GET_TICK.CTNOTICK :           117D C |  GLBL_LASTORG :    FFFFFFFFFFFFD204 - |
 GLBL_LASTPC :     FFFFFFFFFFFF2000 - | *HAS64 :                          1 - |
*HASDSP :                         0 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - | *HBLK :                          40 - |
*HCOUNT :                         5 - |  HEADEROUT :                   1FA4 C |
 HEADEROUT_E :                 1FB2 C | *HINTCLR :                       18 - |
*HINTENBL :                      10 - |  HINT_DEFAULT :    FFFFFFFFFFFF134A C |
*HIRQ_ON :                        4 - | *HVSTOP :                         2 - |
*INEXTMODE :                      0 - | *INLWORDMODE :                    0 - |
*INMAXMODE :                      0 - | *INSRCMODE :                      0 - |
 INSTLISTOUT :                 1B9D C | *INSUPMODE :                      1 - |
*INTMASK :                        1 - |  IP_END :                       7B6 C |
 IP_START :                     784 C |  IP_START.COLOR_OUT :           7A2 C |
 IP_START.WAIT_VINT :           78A C |  ISOFILELIST :                 B844 C |
 ISOFILELIST_E :               C000 C |  ISO_FILELIST :                6AC4 C |
 ISO_OUTPUT :                  EAC4 C |  JOYA :                          40 - |
 JOYB :                          10 - |  JOYC :                          20 - |
*JOYDOWN :                        2 - | *JOYLEFT :                        4 - |
*JOYMODE :                      800 - | *JOYRIGHT :                       8 - |
*JOYSTART :                      80 - | *JOYUP :                          1 - |
*JOYX :                         400 - | *JOYY :                         200 - |
*JOYZ :                         100 - | *LCHWIDTH :                      34 - |
*LEDSET :                        95 - |  LEV :                            4 - |
*LISTON :                         3 - |  LIST_VDPREGS :    FFFFFFFFFFFF02BE C |
 LSH :                            B - |  LSL :                            9 - |
*MACEXP :                         7 - | *MAPMARS_TEST :              2008C0 C |
 MAP_TEST :                  200000 C |  MARS :                           0 - |
 MARSBLOCK :                     37 C |  MARSCD :                         0 - |
 MARSDATA_DEFAULT :           7E800 C |  MARSDATA_DEFAULT_E :         90000 C |
 MARSUPD :                     1F87 C |  MARS_RAMCODE :               55000 C |
*MARS_RAMCODE_E :             55000 C |  MARS_RAMCODE_EOF :           55000 C |
*MAX_BLOCKS :                     8 - |  MAX_BUFFNTRY :                   8 - |
 MAX_MDDMATSK :                  18 - |  MAX_MDOBJ :                     18 - |
 MAX_MDOTHER :                  C00 - |  MAX_MDSYSTEM :                 600 - |
 MAX_MDVIDEO :                 2000 - |  MAX_RCACH :                     20 - |
 MAX_SCRNBUFF :                1800 - |  MAX_SRAMSIZE :                 400 - |
 MAX_SYSCODE :                 2000 - |  MAX_TBLSIZE :                   18 - |
 MAX_TRFRPZ :                     8 - |  MAX_TRKCHN :                    20 - |
 MAX_TRKINDX :                   1A - |  MAX_USERCODE :                8000 - |
 MAX_ZCMND :                     10 - |  MCD :                            1 - |
 MCDBLOCK :                      36 C | *MCDIN_TOP :                   1A00 C |
 MCDIN_TOP.COPY_1 :            1A0E C |  MCDIN_TOP.LOOP_RAM :          1A20 C |
 MCDUPD :                      1F88 C |  MCD_COMM_M :                     E - |
 MCD_COMM_S :                     F - |  MCD_DBANK0 :                 55800 C |
 MCD_DBANK0_E :               7E800 C |  MCD_DCOMM_M :                   10 - |
 MCD_DCOMM_S :                   20 - |  MCD_HINT :                       6 - |
*MCD_INTMASK :                   32 - |  MCD_MAIN :                    1A00 C |
 MCD_MEMORY :                     3 - |  MCD_SUBDATA :                 C000 C |
 MCD_SUBDATA_E :              55000 C | *MDBANK0 :                   200000 C |
*MDBANK0_E :                 228ECE C |  MDSYS_SINEDATA :  FFFFFFFFFFFF117C C |
*MD_BANK_SRAM :              A130F1 - |  MD_READMODES :    FFFFFFFFFFFF14DE C |
 MD_READMODES.END :                                        FFFFFFFFFFFF1542 C |
 MD_READMODES.PICK_MODE :                                  FFFFFFFFFFFF14FE C |
 MD_SCREEN00 :                55000 C |  MD_SCREEN00_E :              55800 C |
 MD_SYSCODE :                  3A02 C |  MD_SYSCODE_E :                4F44 C |
 MODE :                          18 - | *MODE_FADEIN :     FFFFFFFFFFFF12CC C |
 MODE_FADEIN.LOOPW :                                       FFFFFFFFFFFF12F4 C |
*MODE_FADEOUT :    FFFFFFFFFFFF1300 C |
 MODE_FADEOUT.LOOPW :                                      FFFFFFFFFFFF1328 C |
 MODE_INIT :       FFFFFFFFFFFF129A C |  MODE_INIT.CLR :   FFFFFFFFFFFF12C4 C |
*MOMCPU :                     68000 - | *MOMCPUNAME :               "68000" - |
*MONOWIDTH :                     38 - |  MOUSE_X :                        8 C |
 MOUSE_Y :                        A C | *MSCPAUSEOFF :                    4 - |
*MSCPAUSEON :                     3 - | *MSCPLAY :                       11 - |
*MSCPLAY1 :                      12 - |  MSCPLAYR :                      13 - |
*MSCPLAYT :                      14 - | *MSCSCANFF :                      5 - |
*MSCSCANFR :                      6 - | *MSCSCANOFF :                     7 - |
*MSCSEEK :                       15 - | *MSCSEEK1 :                      19 - |
*MSCSEEKT :                      16 - |  MSCSTOP :                        2 - |
*NESTMAX :                      100 - |  NIKONA_BUFFLIST :             162B C |
 NIKONA_BUFFLIST_E :           1643 C |  OBJECTS_ADD :     FFFFFFFFFFFF0BE0 C |
 OBJECTS_ADD.CLR : FFFFFFFFFFFF0BFE C |
 OBJECTS_ADD.SEARCH :                                      FFFFFFFFFFFF0BE8 C |
 OBJECTS_ADD.USE_IT :                                      FFFFFFFFFFFF0BF8 C |
 OBJECTS_CLEAR :   FFFFFFFFFFFF0B70 C |
 OBJECTS_CLEAR.CLR :                                       FFFFFFFFFFFF0B78 C |
 OBJECTS_CLEAR.CLR_D :                                     FFFFFFFFFFFF0B86 C |
 OBJECTS_RUN :     FFFFFFFFFFFF0B98 C |
 OBJECTS_RUN.NEXT_ONE :                                    FFFFFFFFFFFF0BA0 C |
 OBJECTS_RUN.NO_CODE :                                     FFFFFFFFFFFF0BAC C |
*OBJECTS_SET :     FFFFFFFFFFFF0BB6 C |  OBJECTS_SET.CLR : FFFFFFFFFFFF0BC0 C |
 OBJECTS_SHOW :    FFFFFFFFFFFF0C16 C |
 OBJECTS_SHOW.FINISH :                                     FFFFFFFFFFFF0D16 C |
 OBJECTS_SHOW.MK_PZ :                                      FFFFFFFFFFFF0C94 C |
 OBJECTS_SHOW.MK_SPR :                                     FFFFFFFFFFFF0D10 C |
 OBJECTS_SHOW.NEXT :                                       FFFFFFFFFFFF0C66 C |
 OBJECTS_SHOW.NEXTS :                                      FFFFFFFFFFFF0C38 C |
 OBJECTS_SHOW.NO_SPRDRW :                                  FFFFFFFFFFFF0C5E C |
 OBJECTS_SHOW.RAN_OUT :                                    FFFFFFFFFFFF0D34 C |
 OBJECTS_SHOW.VRAM_H :                                     FFFFFFFFFFFF0CE6 C |
 OBJECTS_SHOW.VRAM_V :                                     FFFFFFFFFFFF0CCC C |
 OBJECT_ANIMATE :  FFFFFFFFFFFF0DD6 C |
 OBJECT_ANIMATE.GOTOFRAME :                                FFFFFFFFFFFF0E52 C |
 OBJECT_ANIMATE.KEEPSPD :                                  FFFFFFFFFFFF0E18 C |
 OBJECT_ANIMATE.LASTFRAME :                                FFFFFFFFFFFF0E5C C |
 OBJECT_ANIMATE.NOANIM :                                   FFFFFFFFFFFF0E44 C |
 OBJECT_ANIMATE.RETURN :                                   FFFFFFFFFFFF0E42 C |
 OBJECT_ANIMATE.SAMETHING :                                FFFFFFFFFFFF0DF0 C |
 OBJECT_ANIMRESET :                                        FFFFFFFFFFFF0E62 C |
 OBJECT_DISPLAY :  FFFFFFFFFFFF0D3A C |
 OBJECT_DISPLAY.NEXT_PZ :                                  FFFFFFFFFFFF0D7C C |
 OBJECT_DISPLAY.NO_DMA :                                   FFFFFFFFFFFF0DA6 C |
 OBJECT_DISPLAY.SRCH :                                     FFFFFFFFFFFF0D42 C |
 OBJECT_DISPLAY.THIS_ONE :                                 FFFFFFFFFFFF0D4E C |
*OBJECT_MKSPRPZ :  FFFFFFFFFFFF0DA8 C |
 OBJECT_MKSPRPZ.NOPE :                                     FFFFFFFFFFFF0DD4 C |
*OBJECT_SPEED :    FFFFFFFFFFFF0E72 C |  OBJMAP_SISI :               200D30 C |
 OBJPAL_SISI :               200D10 C |  OBJ_ANIM_ID :                   1C C |
 OBJ_ANIM_INDX :                 1A C |  OBJ_ANIM_SPD :                  20 C |
 OBJ_CODE :                       0 C |  OBJ_DMA :                       10 C |
 OBJ_FRAME :                     1E C | *OBJ_FREE :                      25 C |
 OBJ_INDEX :                     21 C |  OBJ_MAP :                        C C |
*OBJ_RAM :                       26 C |  OBJ_SET :                       22 C |
*OBJ_STATUS :                    24 C | *OBJ_SUBID :                     23 C |
 OBJ_VRAM :                      14 C |  OBJ_X :                          4 C |
 OBJ_X_SPD :                     16 C |  OBJ_Y :                          8 C |
 OBJ_Y_SPD :                     18 C |  ONREG :                         11 - |
 ON_HOLD :                        2 C |  ON_PRESS :                       4 C |
*ON_RELEASE :                     6 C | *PACKING :                        0 - |
*PADDING :                        0 - |  PAD_ID :                         0 C |
 PAD_VER :                        1 C | *PALMARS_SABRINA :           200CF0 C |
*PALMARS_TEST :              200AF0 C | *PALMODE :                       3E C |
 PAN :                            3 - |  PARP :                          34 - |
*PCM :                            0 - |  PCMCOM :                      1645 C |
 PCMINS_KICK :                5A004 C |  PCMINS_KICK.END :            5A978 C |
 PCMINS_KICK.START :          5A00A C |  PCMINS_MENU_01 :             20000 C |
 PCMINS_MENU_01.END :         21B1C C |  PCMINS_MENU_01.START :       20006 C |
 PCMINS_MENU_02 :             21B1C C |  PCMINS_MENU_02.END :         235EA C |
 PCMINS_MENU_02.START :       21B22 C |  PCMINS_MENU_03 :             235EA C |
 PCMINS_MENU_03.END :         277DC C |  PCMINS_MENU_03.START :       235F0 C |
 PCMINS_MENU_05 :             277DC C |  PCMINS_MENU_05.END :         29493 C |
 PCMINS_MENU_05.START :       277E2 C |  PCMINS_MENU_06 :             29494 C |
 PCMINS_MENU_06.END :         29C6A C |  PCMINS_MENU_06.START :       2949A C |
 PCMINS_MENU_07 :             29C6A C |  PCMINS_MENU_07.END :         2A3EF C |
 PCMINS_MENU_07.START :       29C70 C |  PCMINS_MENU_08 :             2A3F0 C |
 PCMINS_MENU_08.END :         2ABAF C |  PCMINS_MENU_08.START :       2A3F6 C |
 PCMINS_MENU_09 :             2ABB0 C |  PCMINS_MENU_09.END :         2B342 C |
 PCMINS_MENU_09.START :       2ABB6 C |  PCMINS_MENU_11 :             2B342 C |
 PCMINS_MENU_11.END :         2C133 C |  PCMINS_MENU_11.START :       2B348 C |
 PCMINS_MENU_12 :             2C134 C |  PCMINS_MENU_12.END :         2D3AF C |
 PCMINS_MENU_12.START :       2C13A C |  PCMINS_MENU_13 :             2D3B0 C |
 PCMINS_MENU_13.END :         2EB48 C |  PCMINS_MENU_13.START :       2D3B6 C |
 PCMINS_MENU_14 :             2EB48 C |  PCMINS_MENU_14.END :         31B30 C |
 PCMINS_MENU_14.START :       2EB4E C |  PCMINS_MENU_15 :             31B30 C |
 PCMINS_MENU_15.END :         33E23 C |  PCMINS_MENU_15.START :       31B36 C |
 PCMINS_MENU_16 :             33E24 C |  PCMINS_MENU_16.END :         34291 C |
 PCMINS_MENU_16.START :       33E2A C |  PCMINS_MOVEME_BRASSL :       5B300 C |
 PCMINS_MOVEME_BRASSL.END :   61EEC C |  PCMINS_MOVEME_BRASSL.START : 5B306 C |
 PCMINS_MOVEME_BRASSR :       61EEC C |  PCMINS_MOVEME_BRASSR.END :   68AD8 C |
 PCMINS_MOVEME_BRASSR.HERE :  68AD8 C |  PCMINS_MOVEME_BRASSR.START : 61EF2 C |
 PCMINS_MOVEME_HIT :          58F08 C |  PCMINS_MOVEME_HIT.END :      5A004 C |
 PCMINS_MOVEME_HIT.START :    58F0E C |  PCMINS_NADIEL :              3CFA8 C |
 PCMINS_NADIEL.END :          4AF58 C |  PCMINS_NADIEL.START :        3CFAE C |
 PCMINS_NADIER :              4AF58 C |  PCMINS_NADIER.END :          58F08 C |
 PCMINS_NADIER.START :        4AF5E C |  PCMINS_PIANO :               34A0C C |
 PCMINS_PIANO.END :           3C3E8 C |  PCMINS_PIANO.START :         34A12 C |
 PCMINS_PKICK :               34292 C |  PCMINS_PKICK.END :           34A0C C |
 PCMINS_PKICK.START :         34298 C |  PCMINS_PTOM :                3C3E8 C |
 PCMINS_PTOM.END :            3CFA8 C |  PCMINS_PTOM.START :          3C3EE C |
 PCMINS_SNARE :               5A978 C |  PCMINS_SNARE.END :           5B300 C |
 PCMINS_SNARE.START :         5A97E C | *PEN :                           20 - |
 PICO :                           0 - |  PROC_CHIPS :                   645 C |
 PSGCOM :                      16BD C |  PSGFREQ_LIST :                150B C |
 PSGHATMODE :                  1F83 C | *PSG_CTRL :                  C00011 - |
 PTMR :                          38 - |  PVOL :                          30 - |
 PWMCOM :                      1685 C | *PWMCTL :                        31 - |
*PWMINTCLR :                     1C - | *PWMIRQ_ON :                      1 - |
 RAM_CDSUB_FSBUFF :           16AC4 C |  RAM_CDSUB_PCMBUFF :           6980 C |
 RAM_CDSUB_PCMENBL :           6AC0 C | *RAM_CDSUB_PCMPLAY :           6AC1 C |
 RAM_CDSUB_PCMTABLE :          6A80 C | *RAM_CDSUB_PCMTBLNUM :         6AC2 C |
 RAM_CDSUB_PCMTBLUPD :         6AC3 C |
 RAM_FADEMARSDELAY :                                       FFFFFFFFFFFFBDF0 C |
 RAM_FADEMARSINCR :                                        FFFFFFFFFFFFBDEE C |
 RAM_FADEMARSREQ : FFFFFFFFFFFFBDEC C | *RAM_FADEMARSTMR : FFFFFFFFFFFFBDF2 C |
 RAM_FADEMDDELAY : FFFFFFFFFFFFBDE8 C |  RAM_FADEMDINCR :  FFFFFFFFFFFFBDE6 C |
 RAM_FADEMDREQ :   FFFFFFFFFFFFBDE4 C |  RAM_FADEMDTMR :   FFFFFFFFFFFFBDEA C |
 RAM_FRAMECOUNT :  FFFFFFFFFFFFBDD4 C | *RAM_GLBL_FILLER : FFFFFFFFFFFFEA04 C |
 RAM_HORSCROLL :   FFFFFFFFFFFFA004 C |  RAM_INPUTDATA :   FFFFFFFFFFFFC004 C |
*RAM_MDDREQ :      FFFFFFFFFFFFC604 C |  RAM_MDGLOBAL :    FFFFFFFFFFFFEA04 C |
 RAM_MDMARSHINT :  FFFFFFFFFFFFC452 C | *RAM_MDMARSPALFD : FFFFFFFFFFFFAE94 C |
 RAM_MDMARSVINT :  FFFFFFFFFFFFC44C C |
*RAM_MDMARS_DRAWALL :                                      FFFFFFFFFFFFBDF4 C |
 RAM_MDOTHER :     FFFFFFFFFFFFC604 C |  RAM_MDSYSTEM :    FFFFFFFFFFFFC004 C |
 RAM_MDVIDEO :     FFFFFFFFFFFFA004 C |  RAM_MEGACD :              FFFFFD00 - |
 RAM_OBJDISPLIST : FFFFFFFFFFFFBC24 C |  RAM_OBJECTS :     FFFFFFFFFFFFB294 C |
 RAM_PALETTE :     FFFFFFFFFFFFAE14 C |  RAM_PALETTEFD :   FFFFFFFFFFFFB094 C |
*RAM_SAVEDATA :    FFFFFFFFFFFFC044 C |  RAM_SCREENMODE :  FFFFFFFFFFFFC458 C |
 RAM_SCRNBUFF :    FFFFFFFFFFFFD204 C |  RAM_SPRDRWCNTR :  FFFFFFFFFFFFBDD8 C |
 RAM_SPRDRWPZ :    FFFFFFFFFFFFA914 C |  RAM_SPRITES :     FFFFFFFFFFFFA414 C |
 RAM_SPRLINKNUM :  FFFFFFFFFFFFBDDA C | *RAM_STACK :               FFFFFD00 - |
 RAM_SYSRANDSEED : FFFFFFFFFFFFC448 C |  RAM_SYSRANDVAL :  FFFFFFFFFFFFC444 C |
 RAM_SYSTEMCODE :  FFFFFFFFFFFF0000 C |  RAM_USERCODE :    FFFFFFFFFFFF2000 C |
 RAM_VDPDMAINDX :  FFFFFFFFFFFFBDDE C |  RAM_VDPDMALIST :  FFFFFFFFFFFFB114 C |
 RAM_VDPDMAMOD :   FFFFFFFFFFFFBDE0 C | *RAM_VDPEXWRITE :  FFFFFFFFFFFFBDDC C |
 RAM_VDPREGS :     FFFFFFFFFFFFBDF6 C |  RAM_VERSCROLL :   FFFFFFFFFFFFA3C4 C |
 RAM_VIDPRNTLIST : FFFFFFFFFFFFBC54 C |  RAM_VIDPRNTVRAM : FFFFFFFFFFFFBDE2 C |
 RAM_ZCDFLAG_D :           FFFFFF00 - |  RAM_ZSNDBUFF :            FFFFFF00 - |
*RCHWIDTH :                      36 - | *RELAXED :                        0 - |
*ROMPAUSEOFF :                    9 - | *ROMPAUSEON :                     8 - |
*ROMREAD :                       17 - | *ROMREADE :                      21 - |
 ROMREADN :                      20 - | *ROMSEEK :                       18 - |
 ROM_END :                    90000 C |  RRT :                           14 - |
 SAMPLEHEAD :                  1FB4 C |  SBEATACC :                    1FA0 C |
 SBEATPTCK :                   1FA2 C | *SCDINIT :                       8E - |
*SCDPQ :                         93 - | *SCDPQL :                        94 - |
*SCDREAD :                       92 - | *SCDSTART :                      8F - |
*SCDSTAT :                       91 - | *SCDSTOP :                       90 - |
*SCPU_BRAM :               FFFE8000 - |  SCPU_PCM :                FFFF0000 - |
 SCPU_REG :                FFFF8000 - |  SCPU_WRAM :                  80000 - |
*SETVRAM_MIKAMI :               440 - |  SETVRAM_SISI :                 480 - |
 SET_CHIPS :                    627 C |  SET_CHIPS.TRK_BUFFRS :         62F C |
*SHIFT :                          2 - |  SHRD_BLK :                  20A910 C |
 SHRD_PAT :                  20A929 C |  SIZEOF_CDPCM :                  20 C |
 SIZEOF_INPUT :                  10 C |  SIZEOF_MDGLBL :   FFFFFFFFFFFFEA08 C |
 SIZEOF_MDOBJ :                  66 C |  SIZEOF_MDRAM :    FFFFFFFFFFFFD40C C |
*SIZEOF_MDSYS :    FFFFFFFFFFFFC45A C |  SIZEOF_MDVID :    FFFFFFFFFFFFBE0E C |
*SIZEOF_RAMOTHER : FFFFFFFFFFFFD204 C | *SIZEOF_SUBCPU :              16B44 C |
 SLV :                           10 - |  SNDLOCKZ80 :      FFFFFFFFFFFF00BE C |
 SNDLOCKZ80.WAIT : FFFFFFFFFFFF00C6 C |  SNDREQ_ENTER :    FFFFFFFFFFFF00DC C |
 SNDREQ_ENTER.WAIT :                                       FFFFFFFFFFFF00FC C |
 SNDREQ_EXIT :     FFFFFFFFFFFF010C C | *SNDREQ_SADDR :    FFFFFFFFFFFF0134 C |
 SNDREQ_SBYTE :    FFFFFFFFFFFF013C C |  SNDREQ_SCMD :     FFFFFFFFFFFF0122 C |
 SNDREQ_SLONG :    FFFFFFFFFFFF0130 C |  SNDREQ_SWORD :    FFFFFFFFFFFF0138 C |
 SNDUNLOCKZ80 :    FFFFFFFFFFFF00D2 C |  SOUND_INIT :      FFFFFFFFFFFF0000 C |
 SOUND_INIT.CLEANUP :                                      FFFFFFFFFFFF002A C |
 SOUND_INIT.COPY : FFFFFFFFFFFF0040 C |  SOUND_INIT.WAIT : FFFFFFFFFFFF0014 C |
 SOUND_UPDATE :    FFFFFFFFFFFF0072 C |
 SOUND_UPDATE.COPY_BYTES :                                 FFFFFFFFFFFF00AC C |
 SOUND_UPDATE.NO_SIZE :                                    FFFFFFFFFFFF00BA C |
 SOUND_UPDATE.NO_TASK :                                    FFFFFFFFFFFF00BC C |
 SPINITFS :                    63AC C |  SPREADSECTORSN :              6334 C |
 SPREADSECTORSN.WAITTRANSFER : 6380 C |  SPREADSECTORSN.WAIT_READ :    6372 C |
 SPREADSECTORSN.WAIT_STAT :    6368 C |  SPSEARCHFILE :                63E6 C |
 SPSEARCHFILE.CHK_STR :        640E C |  SPSEARCHFILE.FAILED_SRCH :    642E C |
 SPSEARCHFILE.FOUND_FILE :     641E C |  SPSEARCHFILE.NEXT_FILE :      63F0 C |
 SPSEARCHFILE.NON_FILE :       641A C |  SP_CMDLIST :                  618E C |
 SP_CMND00 :                   61EE C |  SP_CMND01 :                   61F0 C |
 SP_CMND01.EXIT_NOW :          625A C |  SP_CMND01.NEXT_PACKET :       6214 C |
 SP_CMND01.WAIT_MAIN :         6232 C |  SP_CMND01.WAIT_MAIN_O :       624E C |
 SP_CMND01.WAIT_RET :          6266 C |  SP_CMND02 :                   6272 C |
 SP_CMND02.WAIT_RET :          6298 C |  SP_CMND08 :                   62A4 C |
 SP_CMND08.EXIT_NOW :          631A C |  SP_CMND08.NEXT_PACKET :       62D4 C |
 SP_CMND08.WAIT_MAIN :         6302 C |  SP_CMND08.WAIT_START :        62BE C |
 SP_CMND10 :                   631C C |  SP_CMND20 :                   6332 C |
 SP_END :                      1180 C |  SP_INIT :                     602A C |
 SP_IRQ :                      607E C |  SP_IRQ.EXIT_NOW :             60EC C |
 SP_IRQ.NEXT_PACKET :          60B0 C |  SP_IRQ.NOT_NOW :              60F2 C |
 SP_IRQ.WAIT_MAIN :            60DA C |  SP_IRQ.WAIT_START :           6098 C |
 SP_MAIN :                     60FE C |  SP_RAM :                      6980 C |
 SP_START :                     800 C |  SP_TIMER :                    60FA C |
 SP_USER :                     60FC C |  ST :                             D - |
*STANDBY :                        3 - |  SUBCPU_DATA :                20000 C |
*SYSMARS_ID :                A130EC - | *SYSMARS_REG :               A15100 - |
 SYSMCD_REG :                A12000 - |  SYSMCD_WRAM :               200000 - |
 SYSTEM_DMAENTER_RAM :                                     FFFFFFFFFFFF0F58 C |
 SYSTEM_DMAENTER_ROM :                                     FFFFFFFFFFFF0F60 C |
 SYSTEM_DMAEXIT_RAM :                                      FFFFFFFFFFFF0F5C C |
 SYSTEM_DMAEXIT_ROM :                                      FFFFFFFFFFFF0F64 C |
 SYSTEM_GRABRAMCODE :                                      FFFFFFFFFFFF14CA C |
 SYSTEM_INIT :     FFFFFFFFFFFF0E90 C |
 SYSTEM_INIT.CLRINPUT :                                    FFFFFFFFFFFF0EE8 C |
 SYSTEM_INIT.WAIT :                                        FFFFFFFFFFFF0E9C C |
 SYSTEM_INPUT :    FFFFFFFFFFFF0F68 C |
 SYSTEM_INPUT.EXIT :                                       FFFFFFFFFFFF0F96 C |
 SYSTEM_INPUT.ID_03 :                                      FFFFFFFFFFFF0FBC C |
 SYSTEM_INPUT.ID_0D :                                      FFFFFFFFFFFF1066 C |
 SYSTEM_INPUT.INVALID :                                    FFFFFFFFFFFF1060 C |
 SYSTEM_INPUT.LIST :                                       FFFFFFFFFFFF0F9C C |
 SYSTEM_INPUT.OLDPAD :                                     FFFFFFFFFFFF10DE C |
 SYSTEM_INPUT.PICK_ID :                                    FFFFFFFFFFFF10E4 C |
 SYSTEM_INPUT.READ :                                       FFFFFFFFFFFF10FA C |
 SYSTEM_INPUT.STEP_1 :                                     FFFFFFFFFFFF1106 C |
 SYSTEM_INPUT.STEP_2 :                                     FFFFFFFFFFFF1112 C |
 SYSTEM_INPUT.THIS_ONE :                                   FFFFFFFFFFFF0F7C C |
 SYSTEM_INPUT.X_NEG :                                      FFFFFFFFFFFF102E C |
 SYSTEM_INPUT.Y_NEG :                                      FFFFFFFFFFFF105A C |
*SYSTEM_MCDSENDBUFF :                                      FFFFFFFFFFFF143C C |
 SYSTEM_MCDSENDBUFF.COPY_RAM :                             FFFFFFFFFFFF1472 C |
 SYSTEM_MCDSENDBUFF.WAIT_PRE :                             FFFFFFFFFFFF145E C |
 SYSTEM_MCDSENDBUFF.WAIT_SUB :                             FFFFFFFFFFFF14A0 C |
 SYSTEM_MCDSUBTASK :                                       FFFFFFFFFFFF135A C |
 SYSTEM_MCDSUBTASK.WAIT_ELSE :                             FFFFFFFFFFFF135C C |
 SYSTEM_MCDSUBTASK.WAIT_SUB_I :                            FFFFFFFFFFFF136A C |
 SYSTEM_MCDSUBWAIT :                                       FFFFFFFFFFFF134C C |
 SYSTEM_MCDSUBWAIT.WAIT_SUB_O :                            FFFFFFFFFFFF1352 C |
 SYSTEM_MCDTRNSFR_RAM :                                    FFFFFFFFFFFF13A4 C |
 SYSTEM_MCDTRNSFR_RAM.COPY_RAM :                           FFFFFFFFFFFF13DC C |
 SYSTEM_MCDTRNSFR_RAM.WAIT_SUB :                           FFFFFFFFFFFF140A C |
 SYSTEM_MCDTRNSFR_WRAM :                                   FFFFFFFFFFFF1376 C |
*SYSTEM_RANDOM :   FFFFFFFFFFFF1114 C |
 SYSTEM_RANDOM.GOOD_S :                                    FFFFFFFFFFFF1122 C |
 SYSTEM_RENDER :   FFFFFFFFFFFF0F12 C |
 SYSTEM_RENDER.FORGOT_DISP :                               FFFFFFFFFFFF0F56 C |
 SYSTEM_RENDER.WAIT_IN :                                   FFFFFFFFFFFF0F34 C |
 SYSTEM_RENDER.WAIT_LAG :                                  FFFFFFFFFFFF0F1C C |
 SYSTEM_SETINTS :  FFFFFFFFFFFF127C C |
 SYSTEM_SETINTS.NOHINT :                                   FFFFFFFFFFFF128C C |
 SYSTEM_SETINTS.NOVINT :                                   FFFFFFFFFFFF1284 C |
*SYSTEM_SINEWAVE : FFFFFFFFFFFF115E C |
 SYSTEM_SINEWAVE.DONT_NEG :                                FFFFFFFFFFFF117A C |
*SYSTEM_SINEWAVE_COS :                                     FFFFFFFFFFFF113E C |
 SYSTEM_SINEWAVE_COS.DONT_NEG :                            FFFFFFFFFFFF1158 C |
 SYSTEM_SRAMINIT : FFFFFFFFFFFF128E C | *SYSTEM_SRAMLOAD : FFFFFFFFFFFF1296 C |
*SYSTEM_SRAMSAVE : FFFFFFFFFFFF1292 C |  SYS_CTRL_1 :                A10009 - |
 SYS_CTRL_2 :                A1000B - |  SYS_CTRL_3 :                A1000D - |
 SYS_DATA_1 :                A10003 - | *SYS_DATA_2 :                A10005 - |
*SYS_DATA_3 :                A10007 - | *SYS_EXRAM :                 200000 - |
*SYS_IO :                    A10001 - | *SYS_TMSS :                  A14000 - |
 TBLBUFF_READ :                 66E C |  TBLBUFF_READ.CHK_PSG :         78B C |
 TBLBUFF_READ.CLRFULL :         84D C |  TBLBUFF_READ.DO_CHIP :         6D8 C |
 TBLBUFF_READ.FIRST_INS :       6FB C |  TBLBUFF_READ.GRAB_LINK :       73D C |
 TBLBUFF_READ.HAS_INDX :        6B4 C |  TBLBUFF_READ.INVLDL :          774 C |
 TBLBUFF_READ.KEEP_IT :         71F C |  TBLBUFF_READ.L_HIPRIO :        7FF C |
 TBLBUFF_READ.NEW_CHIP :        7B2 C |  TBLBUFF_READ.NEW_LINK :        7FC C |
 TBLBUFF_READ.NEW_LINK_O :      7F4 C |  TBLBUFF_READ.NEW_LINK_Z :      7F0 C |
 TBLBUFF_READ.NEXTSRCH_TBL :    7E9 C |  TBLBUFF_READ.NEXT_INDX :       6A5 C |
 TBLBUFF_READ.NEXT_PRIO :       7D2 C |  TBLBUFF_READ.NO_INDX :         6D0 C |
 TBLBUFF_READ.PASS_2 :          7D1 C |  TBLBUFF_READ.PICK_TBL :        822 C |
 TBLBUFF_READ.REFILL :          7AF C |  TBLBUFF_READ.REROLL :          77C C |
 TBLBUFF_READ.RESET_LINK :      83C C |  TBLBUFF_READ.RNOT_PSG :        7AD C |
 TBLBUFF_READ.SET_ASFULL :      81F C |  TBLBUFF_READ.SINGL_FREE :      80D C |
 TBLBUFF_READ.SINGL_LINK :      7A2 C |  TBLBUFF_READ.SRCH_FREE :       7C1 C |
 TBLBUFF_READ.SRCH_LINK :       75B C |  TBLBUFF_READ.SRCH_LLOOP :      765 C |
 TBLBUFF_READ.TRACK_CONT :      68E C |  TBLBUFF_READ.VALID :           6A3 C |
 TBLFM :                       1993 C |  TBLFM3 :                      19F3 C |
 TBLFM6 :                      1A0B C |  TBLLIST :                     1921 C |
 TBLPCM :                      1A25 C |  TBLPSG :                      1931 C |
 TBLPSGN :                     197B C |  TBLPWM :                      1AE7 C |
*TESTENTRY :                     1E - | *TESTENTRYLOOP :                 1F - |
 TH :                      20000000 - |  TICKCNT :                     1F82 C |
 TICKFLAG :                    1F81 C |  TICKSPSET :                   1F80 C |
 TIME :               "03:57:57 AM" - | *TIMERCTL :                      30 - |
*TMR :                           2C - |  TRACK_OUT :                    5B6 C |
 TRACK_OUT.INDX_DEL :           5C4 C |  TRACK_OUT.NOTHIN :             5F2 C |
 TRANSFERROM :                 1181 C |  TRANSFERROM.DOUBLE :          11A4 C |
 TRANSFERROM.FROM_RAM :        11C8 C |  TRANSFERROM.TRANSFER :        11E6 C |
 TRANSFERROM.WAIT :            11DF C |  TRANSFERROM.X68KLAST :        121F C |
 TRANSFERROM.X68KLOOP :        120B C |  TRANSFERROM.X68KLPWT :        122D C |
 TRANSFERROM.X68KNOCARRY :     11C2 C |  TRANSFERROM.X68KPWTLP :       122F C |
 TRKBLKS_0 :                   1909 C |  TRKBLKS_1 :                   1911 C |
 TRKBLKS_2 :                   1919 C |  TRKBUFF_0 :                   1849 C |
 TRKBUFF_1 :                   1889 C |  TRKBUFF_2 :                   18C9 C |
 TRKCACH_0 :                   1F00 C |  TRKCACH_1 :                   1F20 C |
 TRKCACH_2 :                   1F40 C | *TRKCACH_3 :                   1F60 C |
 TRKCHNLS :                    1E00 C |  TRKHDRS_0 :                   17E9 C |
 TRKHDRS_1 :                   1809 C |  TRKHDRS_2 :                   1829 C |
 TRKINFOCACH :                 1B91 C | *TRKLISTPAGE :                 1F86 C |
 TRK_BANKBLK :                   17 - |  TRK_BANKHEADS :                 16 - |
 TRK_BANKINS :                   15 - |  TRK_BLOCKS :                     4 - |
 TRK_CACH :                       8 - |  TRK_CACHHALF :                  10 - |
 TRK_CHNINDX :                   26 - |  TRK_CURRBLK :                   13 - |
 TRK_MAXCHNL :                   18 - |  TRK_PATT :                       6 - |
 TRK_PRIORITY :                  14 - |  TRK_READ :                       A - |
 TRK_ROMBLKS :                   23 - |  TRK_ROMINST :                   20 - |
 TRK_ROMPATT :                   1D - |  TRK_ROMPATTREAD :               1A - |
 TRK_ROWPAUSE :                  11 - |  TRK_ROWS :                       C - |
 TRK_SEQID :                      1 - |  TRK_SETBLK :                     2 - |
 TRK_STATUS :                     0 - |  TRK_TICKSET :                    3 - |
 TRK_TICKTMR :                   12 - |  TRK_VOLFDTARGET :               19 - |
 TRK_VOLMASTER :                  E - | *TRUE :                           1 - |
*TVMODE :                         0 - |  UPD_TRACK :                    228 C |
 UPD_TRACK.CHNL_FREE :          342 C |  UPD_TRACK.CONT_CHNL :          34D C |
 UPD_TRACK.DECROW :             2F1 C |  UPD_TRACK.DECROW_E :           2F4 C |
 UPD_TRACK.EFFECT_FILL :        51D C |  UPD_TRACK.EFF_A :              3C7 C |
 UPD_TRACK.EFF_B :              3D8 C |  UPD_TRACK.EFF_C :              3F6 C |
 UPD_TRACK.EXIT :               2E5 C |  UPD_TRACK.FADE_OUT :           272 C |
 UPD_TRACK.FIRST_BLK :          44D C |  UPD_TRACK.FIRST_FILL :         524 C |
 UPD_TRACK.FIRST_HEAD :         495 C |  UPD_TRACK.GRAB_RHEAD :         5A3 C |
 UPD_TRACK.HAS_NOTE :           2FC C |  UPD_TRACK.INC_CPATT :          3F9 C |
 UPD_TRACK.KEEP_BLK :           46B C |  UPD_TRACK.KEEP_IT :            4BB C |
 UPD_TRACK.KEEP_VOL :           288 C |  UPD_TRACK.NEXT_CHNL :          327 C |
 UPD_TRACK.NEXT_NOTE :          2D5 C |  UPD_TRACK.NO_EFF :             393 C |
 UPD_TRACK.NO_GLBL :            54D C |  UPD_TRACK.NO_INS :             375 C |
 UPD_TRACK.NO_NOTE :            36A C |  UPD_TRACK.NO_VOL :             380 C |
 UPD_TRACK.OLD_TYPE :           35E C |  UPD_TRACK.RAN_OUT :            407 C |
 UPD_TRACK.READ_TRACK :         245 C |  UPD_TRACK.ROW_ACTIVE :         2CE C |
 UPD_TRACK.SET_TRACK :          431 C |  UPD_TRACK.SFXMD :              292 C |
 UPD_TRACK.SRCH_NEW :           322 C |  UPD_TRACK.TOO_MUCH :           27E C |
 UPD_TRACK.TRACK_END :          50A C |  UPD_TRACK.TRK_BUFFRS :         230 C |
 VARNULLVRAM :                  7FF - |  VARPRINTPAL :                    3 - |
 VARPRINTVRAM :                 580 - | *VBLK :                          80 - |
*VDPSTS :                         A - |  VDP_CTRL :                  C00004 - |
 VDP_DATA :                  C00000 - | *VERSION :                     142F - |
 VIDEO_CLEAR :     FFFFFFFFFFFF02F4 C |
*VIDEO_CLEARSCREEN :                                       FFFFFFFFFFFF02F4 C |
 VIDEO_CLEARSCREEN.PNEXT :                                 FFFFFFFFFFFF0366 C |
 VIDEO_CLEARSCREEN.SNEXT :                                 FFFFFFFFFFFF0354 C |
 VIDEO_CLEARSCREEN.XNEXT :                                 FFFFFFFFFFFF0338 C |
 VIDEO_CLEARSCREEN.YNEXT :                                 FFFFFFFFFFFF0346 C |
*VIDEO_COPY :      FFFFFFFFFFFF0676 C |  VIDEO_COPY.DMAW : FFFFFFFFFFFF068A C |
 VIDEO_COPY.DMA_W :                                        FFFFFFFFFFFF06E2 C |
*VIDEO_DMABLAST :  FFFFFFFFFFFF0892 C |
 VIDEO_DMABLAST.END :                                      FFFFFFFFFFFF0904 C |
 VIDEO_DMABLAST.EXIT :                                     FFFFFFFFFFFF0912 C |
 VIDEO_DMABLAST.FIXME :                                    FFFFFFFFFFFF08E0 C |
 VIDEO_DMABLAST.NEXT :                                     FFFFFFFFFFFF08BA C |
 VIDEO_DMAMKENTRY :                                        FFFFFFFFFFFF0548 C |
 VIDEO_DMAMKENTRY.MK_SET :                                 FFFFFFFFFFFF0584 C |
 VIDEO_DMAMKENTRY.NORMAL :                                 FFFFFFFFFFFF057E C |
 VIDEO_DMAMKENTRY.RAN_OUT :                                FFFFFFFFFFFF05FE C |
 VIDEO_DOPALFADE : FFFFFFFFFFFF0402 C |
 VIDEO_DOPALFADE.ACTIVE :                                  FFFFFFFFFFFF041E C |
 VIDEO_DOPALFADE.FADE_DONE :                               FFFFFFFFFFFF0426 C |
 VIDEO_DOPALFADE.FADE_IN :                                 FFFFFFFFFFFF0428 C |
 VIDEO_DOPALFADE.FADE_LIST :                               FFFFFFFFFFFF0420 C |
 VIDEO_DOPALFADE.FADE_OUT :                                FFFFFFFFFFFF04CA C |
 VIDEO_DOPALFADE.NO_BLU :                                  FFFFFFFFFFFF04A2 C |
 VIDEO_DOPALFADE.NO_BLU_O :                                FFFFFFFFFFFF0524 C |
 VIDEO_DOPALFADE.NO_FNSH :                                 FFFFFFFFFFFF04BA C |
 VIDEO_DOPALFADE.NO_FNSH_O :                               FFFFFFFFFFFF0538 C |
 VIDEO_DOPALFADE.NO_GRN :                                  FFFFFFFFFFFF0482 C |
 VIDEO_DOPALFADE.NO_GRN_O :                                FFFFFFFFFFFF050C C |
 VIDEO_DOPALFADE.NO_MOVE :                                 FFFFFFFFFFFF04C8 C |
 VIDEO_DOPALFADE.NO_MOVE_O :                               FFFFFFFFFFFF0546 C |
 VIDEO_DOPALFADE.NO_RED :                                  FFFFFFFFFFFF0462 C |
 VIDEO_DOPALFADE.NO_RED_O :                                FFFFFFFFFFFF04F4 C |
 VIDEO_DOPALFADE.NXT_PAL :                                 FFFFFFFFFFFF0440 C |
 VIDEO_DOPALFADE.NXT_PAL_O :                               FFFFFFFFFFFF04DC C |
 VIDEO_FADEIN :    FFFFFFFFFFFF0370 C | *VIDEO_FADEOUT :   FFFFFFFFFFFF0396 C |
 VIDEO_FADEPAL :   FFFFFFFFFFFF03D4 C |
*VIDEO_FADEPAL_MARS :                                      FFFFFFFFFFFF0918 C |
 VIDEO_FILL :      FFFFFFFFFFFF0600 C |  VIDEO_FILL.DMAW : FFFFFFFFFFFF0614 C |
 VIDEO_FILL.DMA_W :                                        FFFFFFFFFFFF065E C |
 VIDEO_INIT :      FFFFFFFFFFFF0274 C |
 VIDEO_INIT.CLRRAM :                                       FFFFFFFFFFFF0280 C |
 VIDEO_INIT.LOOP : FFFFFFFFFFFF0298 C |  VIDEO_LOADART :   FFFFFFFFFFFF06FA C |
*VIDEO_LOADART.FROM_RAM :                                  FFFFFFFFFFFF07B4 C |
 VIDEO_LOADART.MK_SET :                                    FFFFFFFFFFFF0736 C |
 VIDEO_LOADART.NON_WRAM :                                  FFFFFFFFFFFF0766 C |
 VIDEO_LOADART.NON_WRAM_L :                                FFFFFFFFFFFF07B2 C |
 VIDEO_LOADART.NORMAL :                                    FFFFFFFFFFFF0730 C |
 VIDEO_LOADART.SHARED_SETUP :                              FFFFFFFFFFFF07B6 C |
 VIDEO_LOADMAP :   FFFFFFFFFFFF091C C |
 VIDEO_LOADMAP.CONT :                                      FFFFFFFFFFFF0942 C |
 VIDEO_LOADMAP.NODBLE :                                    FFFFFFFFFFFF0960 C |
 VIDEO_LOADMAP.NONULL :                                    FFFFFFFFFFFF0940 C |
 VIDEO_LOADMAP.XLOOP :                                     FFFFFFFFFFFF0932 C |
 VIDEO_LOADMAP.YLOOP :                                     FFFFFFFFFFFF0928 C |
 VIDEO_LOADPAL :   FFFFFFFFFFFF03DE C |
*VIDEO_MARSGFXMODE :                                       FFFFFFFFFFFF0914 C |
*VIDEO_MARSPALFADE :                                       FFFFFFFFFFFF091A C |
*VIDEO_MARS_SYNCFRAME :                                    FFFFFFFFFFFF0916 C |
 VIDEO_PRINT :     FFFFFFFFFFFF099C C |
 VIDEO_PRINT.DONIBL :                                      FFFFFFFFFFFF0AB8 C |
 VIDEO_PRINT.EXIT :                                        FFFFFFFFFFFF0A28 C |
 VIDEO_PRINT.ISBYTE :                                      FFFFFFFFFFFF09F2 C |
 VIDEO_PRINT.ISLONG :                                      FFFFFFFFFFFF0A16 C |
 VIDEO_PRINT.ISWORD :                                      FFFFFFFFFFFF0A04 C |
 VIDEO_PRINT.LNGLOOP :                                     FFFFFFFFFFFF0AA8 C |
 VIDEO_PRINT.LOOP :                                        FFFFFFFFFFFF09B4 C |
 VIDEO_PRINT.LOWR :                                        FFFFFFFFFFFF0AC8 C |
 VIDEO_PRINT.NEWJUMP :                                     FFFFFFFFFFFF09AE C |
 VIDEO_PRINT.NEXT :                                        FFFFFFFFFFFF09EE C |
 VIDEO_PRINT.NEXTV :                                       FFFFFFFFFFFF0A32 C |
 VIDEO_PRINT.NOTHING :                                     FFFFFFFFFFFF0AD4 C |
 VIDEO_PRINT.PUTTEXT :                                     FFFFFFFFFFFF09E0 C |
 VIDEO_PRINT.VBYTE :                                       FFFFFFFFFFFF0A64 C |
 VIDEO_PRINT.VLONG :                                       FFFFFFFFFFFF0AB0 C |
 VIDEO_PRINT.VWORD :                                       FFFFFFFFFFFF0A86 C |
 VIDEO_PRINTINIT : FFFFFFFFFFFF0972 C | *VIDEO_PRINTPAL :  FFFFFFFFFFFF098C C |
 VIDEO_RENDER :    FFFFFFFFFFFF07FE C |  VIDEO_RUNFADE :   FFFFFFFFFFFF03CC C |
 VIDEO_UPDATE :    FFFFFFFFFFFF02A0 C |
*VIDEO_UPDATE.EXIT :                                       FFFFFFFFFFFF02BC C |
 VIDEO_UPDATE.LOOP :                                       FFFFFFFFFFFF02B0 C |
 VIDEO_WAITFADE :  FFFFFFFFFFFF03BC C |  VIDMD_PAL :       FFFFFFFFFFFF03E2 C |
 VIDMD_PAL.LOOP :  FFFFFFFFFFFF03FA C |  VID_PICKLAYER :   FFFFFFFFFFFF0ADA C |
 VID_PICKLAYER.GOLYR :                                     FFFFFFFFFFFF0B24 C |
 VID_PICKLAYER.NOWD :                                      FFFFFFFFFFFF0B0E C |
 VID_PICKLAYER.PLAWND :                                    FFFFFFFFFFFF0B00 C |
 VID_PICKLAYER.THISSZ :                                    FFFFFFFFFFFF0B44 C |
 VID_PICKLAYER.THISSZJ :                                   FFFFFFFFFFFF0B6C C |
*VINTCLR :                       16 - | *VINTENBL :                      20 - |
 VINT_DEFAULT :    FFFFFFFFFFFF1334 C | *VIRQ_ON :                        8 - |
*VRESINTCLR :                    14 - |  WAVE_FLAGS :                  1F94 C |
 WAVE_LEN :                    1F8C C |  WAVE_LOOP :                   1F8F C |
 WAVE_PITCH :                  1F92 C | *WAVE_PRIORITY :               1F95 C |
 WAVE_START :                  1F89 C |  WAVFREQ_CDPCM :               15CB C |
 WAVFREQ_LIST :                156B C | *WONDERCHK :                     98 - |
*WONDERREQ :                     97 - |  X68KSRCLSB :                  1F9E C |
 X68KSRCMID :                  1F9F C | *YM_CTRL_1 :                 A04000 - |
*YM_CTRL_2 :                 A04002 - | *YM_DATA_1 :                 A04001 - |
*YM_DATA_2 :                 A04003 - | *Z80SYNTAX :                      0 - |
 Z80_BUS :                   A11100 - |  Z80_CODE :        FFFFFFFFFFFF2046 C |
 Z80_CODE_END :    FFFFFFFFFFFF4002 C |  Z80_CPU :                   A00000 - |
 Z80_INIT :                      50 C |  Z80_RESET :                 A11200 - |
*ZBANK :                       6000 - |  ZDRVFIFO :                      40 - |
 ZDRVFWRT :                      2E - | *ZDRVMARSBLK :                   37 - |
*ZDRVMCDBLK :                    36 - |  ZDRVRAMLEN :                    30 - |
 ZDRVRAMSRC :                    35 - |  ZDRVROMBLK :                    2F - |
 ZMARS_SEND :                  105C C |  ZMARS_SEND.CLR_PCM :          10D1 C |
 ZMARS_SEND.COPY_BYTES :       10A9 C |  ZMARS_SEND.MCDT_BLOCKED :     10CB C |
 ZMARS_SEND.MCDT_NOUPD :       10D5 C |  ZMARS_SEND.MCD_NEXTP :        10A0 C |
 ZMARS_SEND.SET_COMBANK :      10DD C |  ZMARS_SEND.TEST_IRQ :         108A C |
 ZMARS_SEND.TEST_SUB :         108E C |  ZMARS_SEND.WAIT_IN :          107D C |
 ZMARS_SEND.WAIT_SUB :         10B8 C | *ZOPCEX :                         8 - |
 ZOPCEXX :                       D9 - | *ZOPCNOP :                        0 - |
 ZOPCPUSHAF :                    F5 - |  ZOPCRET :                       C9 - |
 ZPSG_CTRL :                   7F11 - |  ZSET_TESTME :                    0 - |
 ZYM_CTRL_1 :                  4000 - |  ZYM_CTRL_2 :                  4002 - |
 ZYM_DATA_1 :                  4001 - |  ZYM_DATA_2 :                  4003 - |
*_ADRERR :                     5F40 - | *_BOOTSTAT :                   5EA0 - |
*_BURAM :                      5F16 - | *_CCR :                    FFFFFE92 - |
 _CDBIOS :                     5F22 - | *_CDBOOT :                     5F1C - |
*_CDSTAT :                     5E80 - | *_CHKERR :                     5F52 - |
*_CODERR :                     5F46 - | *_DEVERR :                     5F4C - |
*_DMACHANNEL0 :            FFFFFF8C - | *_DMACHANNEL1 :            FFFFFF9C - |
*_DMACOUNT0 :              FFFFFF88 - | *_DMACOUNT1 :              FFFFFF98 - |
*_DMADEST0 :               FFFFFF84 - | *_DMADEST1 :               FFFFFF94 - |
*_DMAOPERATION :           FFFFFFB0 - | *_DMAREQACK0 :             FFFFFFB4 - |
*_DMAREQACK1 :             FFFFFFB8 - | *_DMASOURCE0 :             FFFFFF80 - |
*_DMASOURCE1 :             FFFFFF90 - | *_DMAVECTORE0 :            FFFFFFA4 - |
*_DMAVECTORE1 :            FFFFFFAC - | *_DMAVECTORN0 :            FFFFFFA0 - |
*_DMAVECTORN1 :            FFFFFFA8 - | *_FRAMEBUFFER :            24000000 - |
*_FRC_H :                         2 - | *_FRC_L :                         3 - |
*_FRT :                    FFFFFE10 - | *_HRH :                    FFFFFF10 - |
*_HRL :                    FFFFFF14 - | *_HRL32 :                  FFFFFF04 - |
*_JR :                     FFFFFF00 - | *_LEVEL1 :                     5F76 - |
*_LEVEL2 :                     5F7C - | *_LEVEL3 :                     5F82 - |
*_LEVEL4 :                     5F88 - | *_LEVEL5 :                     5F8E - |
*_LEVEL6 :                     5F94 - | *_LEVEL7 :                     5F9A - |
*_NOCOD0 :                     5F6A - | *_NOCOD1 :                     5F70 - |
*_OCR_H :                         4 - | *_OCR_L :                         5 - |
*_OVERWRITE :              24020000 - | *_PALETTE :                20004200 - |
*_SERIAL :                 FFFFFE00 - | *_SETJMPTBL :                  5F0A - |
*_SPVERR :                     5F5E - | *_SYSREG :                 20004000 - |
*_TCR :                           6 - | *_TCSR :                          1 - |
*_TIER :                          0 - | *_TOCR :                          7 - |
*_TRACE :                      5F64 - | *_TRAP00 :                     5FA0 - |
*_TRAP01 :                     5FA6 - | *_TRAP02 :                     5FAC - |
*_TRAP03 :                     5FB2 - | *_TRAP04 :                     5FB8 - |
*_TRAP05 :                     5FBE - | *_TRAP06 :                     5FC4 - |
*_TRAP07 :                     5FCA - | *_TRAP08 :                     5FD0 - |
*_TRAP09 :                     5FD6 - | *_TRAP10 :                     5FDC - |
*_TRAP11 :                     5FE2 - | *_TRAP12 :                     5FE8 - |
*_TRAP13 :                     5FEE - | *_TRAP14 :                     5FF4 - |
*_TRAP15 :                     5FFA - | *_TRPERR :                     5F58 - |
*_USERCALL0 :                  5F28 - | *_USERCALL1 :                  5F2E - |
*_USERCALL2 :                  5F34 - | *_USERCALL3 :                  5F3A - |
*_USERMODE :                   5EA6 - | *_VDPREG :                 20004100 - |
*_WAITVSYNC :                  5F10 - |  _WAITVSYNC.TABLE :            6020 C |

   1435 symbols
    400 unused symbols

 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 4 - 02/28/2024 03:57:57 AM


  Defined Macros:
  ---------------

BIOS_BRMDEL                           | BIOS_BRMDIR                          
BIOS_BRMFORMAT                        | BIOS_BRMINIT                         
BIOS_BRMREAD                          | BIOS_BRMSERCH                        
BIOS_BRMSTAT                          | BIOS_BRMVERIFY                       
BIOS_BRMWRITE                         | BIOS_CDBCHK                          
BIOS_CDBPAUSE                         | BIOS_CDBSTAT                         
BIOS_CDBTOCREAD                       | BIOS_CDBTOCWRITE                     
BIOS_CDCACK                           | BIOS_CDCREAD                         
BIOS_CDCSETMODE                       | BIOS_CDCSTART                        
BIOS_CDCSTAT                          | BIOS_CDCSTOP                         
BIOS_CDCTRN                           | BIOS_DRVINIT                         
BIOS_DRVOPEN                          | BIOS_FDRCHG                          
BIOS_FDRSET                           | BIOS_LEDSET                          
BIOS_MSCPAUSEOFF                      | BIOS_MSCPAUSEON                      
BIOS_MSCPLAY                          | BIOS_MSCPLAY1                        
BIOS_MSCPLAYR                         | BIOS_MSCPLAYT                        
BIOS_MSCSCANFF                        | BIOS_MSCSCANFR                       
BIOS_MSCSCANOFF                       | BIOS_MSCSEEK                         
BIOS_MSCSEEK1                         | BIOS_MSCSEEKT                        
BIOS_MSCSTOP                          | BIOS_ROMPAUSEOFF                     
BIOS_ROMPAUSEON                       | BIOS_ROMREAD                         
BIOS_ROMREADE                         | BIOS_ROMREADN                        
BIOS_ROMSEEK                          | BIOS_SCDINIT                         
BIOS_SCDPQ                            | BIOS_SCDPQL                          
BIOS_SCDREAD                          | BIOS_SCDSTART                        
BIOS_SCDSTAT                          | BIOS_SCDSTOP                         
BURAM                                 | CDBIOS                               
DATA_BKEND                            | DATA_BKSET                           
ENDSTRCT                              | ERREPORT                             
GEMAHEAD                              | GEMATRK                              
GINSDAC                               | GINSFM                               
GINSFM3                               | GINSNULL                             
GINSPCM                               | GINSPSG                              
GINSPSGN                              | GINSPWM                              
GSMPHEAD                              | ISO_FILE                             
ISO_SETFS                             | REPORT                               
ROMPAD                                | SCREEN_CODE                          
SDRAM_BKEND                           | SDRAM_BKSET                          
SET_DBANKS                            | STRCT                                
VDP_SHOWME                            |

     79 macros

 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 5 - 02/28/2024 03:57:57 AM


  Defined Functions:
  ------------------

NOTZ80                                | MAP_SIZE                             
CELL_VRAM                             | LOCATE                               

 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 6 - 02/28/2024 03:57:57 AM


  Code Pages:
  ----------

STANDARD (0 changed characters)

1 code page

0.15 seconds assembly time

  13573 lines source file
  14478 lines incl. macro expansions
      4 passes
      0 errors
      0 warnings
