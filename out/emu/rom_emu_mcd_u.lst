 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 1 - 03/16/2024 09:22:39 AM


       1/       0 :                     ; ===========================================================================
       2/       0 :                     ; NIKONA MD 16-BIT/32-BIT SDK
       3/       0 :                     ; by GenesisFan64 2023-2024
       4/       0 :                     ;
       5/       0 :                     ; For developing games on the Genesis-family of systems:
       6/       0 :                     ; Genesis only, Sega CD, Sega 32X, Sega CD32X and Sega Pico
       7/       0 :                     ;
       8/       0 :                     ; Assemble with a modified AS Macro Assembler by flamewing
       9/       0 :                     ; and a custom version of p2bin:
      10/       0 :                     ;
      11/       0 :                     ; asl main.asm -i "." -olist ROM_list.lst -q -xx -A -L -D (flags=value)
      12/       0 :                     ; p2bin -p=00 main.p ROM.bin
      13/       0 :                     ;
      14/       0 :                     ; ASSEMBLER FLAGS:
      15/       0 :                     ; MCD,MARS,MARSCD,PICO,CDREGION,EMU
      16/       0 :                     ;
      17/       0 :                     ; * System targets *
      18/       0 :                     ;    MCD - Sega CD
      19/       0 :                     ;   MARS - Sega 32X
      20/       0 :                     ; MARSCD - Sega CD32X
      21/       0 :                     ;   PICO - Sega Pico
      22/       0 :                     ; The code builds to stock Genesis by default.
      23/       0 :                     ;
      24/       0 :                     ; ONLY enable ONE TARGET at the time (as 1)
      25/       0 :                     ; and set the others to 0
      26/       0 :                     ;
      27/       0 :                     ; CDREGION - SEGACD/CD32X ONLY: Set ROM region
      28/       0 :                     ;            0=Japan 1=USA 2=Europe
      29/       0 :                     ;      EMU - EMULATOR PATCHES TO ROMS
      30/       0 :                     ;            0=Runs on hardware only, 1=Run on emulation
      31/       0 :                     ;
      32/       0 :                     ; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣴⣶⡿⠿⠿⠿⣶⣦⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀
      33/       0 :                     ; ⠀⠀⠀⠀⠀⠀⢀⣠⣶⢟⣿⠟⠁⢰⢋⣽⡆⠈⠙⣿⡿⣶⣄⡀⠀⠀⠀⠀⠀⠀
      34/       0 :                     ; ⠀⠀⠀⠀⣠⣴⠟⠋⢠⣾⠋⠀⣀⠘⠿⠿⠃⣀⠀⠈⣿⡄⠙⠻⣦⣄⠀⠀⠀⠀
      35/       0 :                     ; ⠀⢀⣴⡿⠋⠁⠀⢀⣼⠏⠺⠛⠛⠻⠂⠐⠟⠛⠛⠗⠘⣷⡀⠀⠈⠙⢿⣦⡀⠀
      36/       0 :                     ; ⣴⡟⢁⣀⣠⣤⡾⢿⡟⠀⠀⠀⠘⢷⠾⠷⡾⠃⠀⠀⠀⢻⡿⢷⣤⣄⣀⡈⢻⣦
      37/       0 :                     ; ⠙⠛⠛⠋⠉⠁⠀⢸⡇⠀⠀⢠⣄⠀⠀⠀⠀⣠⡄⠀⠀⢸⡇⠀⠈⠉⠙⠛⠛⠋
      38/       0 :                     ; ⠀⠀⠀⠀⠀⠀⠀⢸⡇⢾⣦⣀⣹⡧⠀⠀⢼⣏⣀⣴⡷⢸⡇⠀⠀⠀⠀⠀⠀⠀
      39/       0 :                     ; ⠀⠀⠀⠀⠀⠀⠀⠸⣧⡀⠈⠛⠛⠁⠀⠀⠈⠛⠛⠁⢀⣼⠇⠀⠀⠀⠀⠀⠀⠀
      40/       0 :                     ; ⠀⠀⠀⠀⠀⠀⠀⢀⣘⣿⣶⣤⣀⣀⣀⣀⣀⣀⣤⣶⣿⣃⠀⠀⠀⠀⠀⠀⠀⠀
      41/       0 :                     ; ⠀⠀⠀⠀⠀⣠⡶⠟⠋⢉⣀⣽⠿⠉⠉⠉⠹⢿⣍⣈⠉⠛⠷⣦⡀⠀⠀⠀⠀⠀
      42/       0 :                     ; ⠀⠀⠀⠀⢾⣯⣤⣴⡾⠟⠋⠁⠀⠀⠀⠀⠀⠀⠉⠛⠷⣶⣤⣬⣿⠀⠀⠀⠀⠀
      43/       0 :                     ; ⠀⠀⠀⠀⠀⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠁⠀⠀⠀⠀⠀
      44/       0 :                     ; ===========================================================================
      45/       0 :                     
      46/       0 :                     ; ====================================================================
      47/       0 :                     ; ----------------------------------------------------------------
      48/       0 :                     ; USER SETTINGS
      49/       0 :                     ; ----------------------------------------------------------------
      50/       0 :                     
      51/       0 :                     ; --------------------------------------------------------
      52/       0 :                     ; 68000 RAM SIZES (SegaCD: MAIN-CPU)
      53/       0 :                     ;
      54/       0 :                     ; MAX_SysCode, MAX_UserCode are only used in
      55/       0 :                     ; Sega CD, 32X and CD32X.
      56/       0 :                     ;
      57/       0 :                     ; Check system/ram.asm for more details.
      58/       0 :                     ; --------------------------------------------------------
      59/       0 :                     
      60/       0 : =$2000               MAX_SysCode	equ $2000	; ** CD/32X/CD32X ONLY ** Common routines
 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 2 - 03/16/2024 09:22:39 AM


      61/       0 : =$8000               MAX_UserCode	equ $8000	; ** CD/32X/CD32X ONLY ** Current screen code and small data
      62/       0 : =$1800               MAX_ScrnBuff	equ $1800	; Current screen's RAM buffer
      63/       0 : =$2000               MAX_MdVideo	equ $2000	; Video cache'd RAM for visuals, registers, etc.
      64/       0 : =$600                MAX_MdSystem	equ $0600	; Internal lib stuff and a safe copy of save data for reading/writing
      65/       0 : =$E00                MAX_MdOther	equ $0E00	; Add-on stuff
      66/       0 :                     
      67/       0 :                     ; ====================================================================
      68/       0 :                     
      69/       0 :                     		org 0
      70/       0 :                     		cpu 		68000		; Starting CPU is 68000
      71/       0 :                     		padding		off		; Dont pad dc.b
      72/       0 :                     		listing 	purecode	; Want listing file
      73/       0 :                     		supmode 	on 		; Supervisor mode (68K)
      74/       0 :                     		dottedstructs	off
      75/       0 :                     		page 		0
      76/       0 :                     
      77/       0 :                     ; ====================================================================
      78/       0 :                     ; ----------------------------------------------------------------
      79/       0 :                     ; Includes
      80/       0 :                     ; ----------------------------------------------------------------
      81/       0 :                     
      82/       0 :                     		include	"macros.asm"		; Assembler macros
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; -------------------------------------------------------------------
(1)    3/       0 :                     ; MACROS section
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; THIS MUST BE INCLUDED AT START OF THE CODE.
(1)    6/       0 :                     ; -------------------------------------------------------------------
(1)    7/       0 :                     
(1)    8/       0 :                     ; ====================================================================
(1)    9/       0 :                     ; ------------------------------------------------------------
(1)   10/       0 :                     ; AS Functions
(1)   11/       0 :                     ; ------------------------------------------------------------
(1)   12/       0 :                     
(1)   13/       0 :                     locate		function a,b,c,(b&$FF)|(a<<8&$FF00)|(c<<16&$FF0000)	; VDP locate: X pos|Y pos|Layer for some video
(1)   14/       0 :                     cell_vram	function a,(a<<5)					; VRAM position in CELLs 8x8
(1)   15/       0 :                     cell_size	function a,(a>>5)					; Graphics size in CELLs 8x8
(1)   16/       0 :                     map_size	function l,r,(((l-1)/8)<<16&$FFFF0000|((r-1)/8)&$FFFF)	; Full w/h sizes as CELLs 8x8
(1)   17/       0 :                     
(1)   18/       0 :                     ; ====================================================================
(1)   19/       0 :                     ; ------------------------------------------------------------
(1)   20/       0 :                     ; Macros
(1)   21/       0 :                     ; ------------------------------------------------------------
(1)   22/       0 :                     
(1)   23/       0 :                     ; --------------------------------------------
(1)   24/       0 :                     ; Custom struct function
(1)   25/       0 :                     ;
(1)   26/       0 :                     ; (Doesn't work on Z80)
(1)   27/       0 :                     ; --------------------------------------------
(1)   28/       0 :                     
(1)   29/       0 :                     strct		macro thisinput			; Reserve memory address
(1)   30/       0 :                     GLBL_LASTPC	set *
(1)   31/       0 :                     		dephase
(1)   32/       0 :                     		phase thisinput
(1)   33/       0 :                     GLBL_LASTORG	set *
(1)   34/       0 :                     		endm
(1)   35/       0 :                     
(1)   36/       0 :                     ; --------------------------------------------
(1)   37/       0 :                     ; Finish struct
(1)   38/       0 :                     ; --------------------------------------------
(1)   39/       0 :                     
(1)   40/       0 :                     endstrct	macro				; Then finish the custom struct.
(1)   41/       0 :                     		org GLBL_LASTORG
(1)   42/       0 :                     		phase GLBL_LASTPC
(1)   43/       0 :                     		endm
(1)   44/       0 :                     
(1)   45/       0 :                     ; --------------------------------------------
(1)   46/       0 :                     ; Report memory usage
(1)   47/       0 :                     ; --------------------------------------------
(1)   48/       0 :                     
(1)   49/       0 :                     report		macro text,dis,dat
(1)   50/       0 :                     	if MOMPASS == 2
(1)   51/       0 :                     		if dat == -1
(1)   52/       0 :                     			message text+": \{(dis)&$FFFFFF}"
(1)   53/       0 :                     		else
(1)   54/       0 :                     			if dis > dat
(1)   55/       0 :                     				warning "RAN OUT OF "+text+" SPACE (\{(dis)&$FFFFFF} of \{(dat)&$FFFFFF})"
(1)   56/       0 :                     			else
(1)   57/       0 :                     				message text+" uses \{(dis)&$FFFFFF} of \{(dat)&$FFFFFF}"
(1)   58/       0 :                     			endif
(1)   59/       0 :                     		endif
(1)   60/       0 :                     	endif
(1)   61/       0 :                     		endm
(1)   62/       0 :                     
(1)   63/       0 :                     ; --------------------------------------------
(1)   64/       0 :                     ; Same as report but only show on error
(1)   65/       0 :                     ; --------------------------------------------
(1)   66/       0 :                     
(1)   67/       0 :                     erreport	macro text,dis,dat
(1)   68/       0 :                     	if MOMPASS == 2
(1)   69/       0 :                     		if dat == -1
(1)   70/       0 :                     			message text+": \{(dis)&$FFFFFF}"
(1)   71/       0 :                     		else
(1)   72/       0 :                     			if dis > dat
(1)   73/       0 :                     				error "RAN OUT OF "+text+" (\{(dis)&$FFFFFF} of \{(dat)&$FFFFFF})"
(1)   74/       0 :                     ; 			else
(1)   75/       0 :                     ; 				message text+" uses \{(dis)&$FFFFFF} of \{(dat)&$FFFFFF}"
(1)   76/       0 :                     			endif
(1)   77/       0 :                     		endif
(1)   78/       0 :                     	endif
(1)   79/       0 :                     		endm
(1)   80/       0 :                     
(1)   81/       0 :                     ; --------------------------------------------
(1)   82/       0 :                     ; ZERO Fill padding
(1)   83/       0 :                     ; --------------------------------------------
(1)   84/       0 :                     
(1)   85/       0 :                     rompad		macro address			; Zero fill
(1)   86/       0 :                     diff := address - *
(1)   87/       0 :                     		if diff < 0
(1)   88/       0 :                     			error "too much stuff before org $\{address} ($\{(-diff)} bytes)"
(1)   89/       0 :                     		else
(1)   90/       0 :                     			while diff > 1024
(1)   91/       0 :                     				; AS can only generate 1 kb of code on a single line
(1)   92/       0 :                     				dc.b [1024]0
(1)   93/       0 :                     diff := diff - 1024
(1)   94/       0 :                     			endm
(1)   95/       0 :                     			dc.b [diff]0
(1)   96/       0 :                     		endif
(1)   97/       0 :                     	endm
(1)   98/       0 :                     
(1)   99/       0 :                     ; ====================================================================
(1)  100/       0 :                     ; ------------------------------------------------------------
(1)  101/       0 :                     ; ISO filesystem macros
(1)  102/       0 :                     ; ------------------------------------------------------------
(1)  103/       0 :                     
(1)  104/       0 :                     ; Set a ISO file
(1)  105/       0 :                     ; NOTE: a valid ISO head is required from $8000 to $B7FF
(1)  106/       0 :                     ; Info data is incorrect but it will load just fine.
(1)  107/       0 :                     
(1)  108/       0 :                     iso_setfs	macro type,start,end
(1)  109/       0 :                     .fstrt:
(1)  110/       0 :                     		dc.b .fend-.fstrt				; Block size
(1)  111/       0 :                     		dc.b 0						; Zero
(1)  112/       0 :                     		dc.b (start>>11&$FF),(start>>19&$FF)		; Start sector, little endian
(1)  113/       0 :                     		dc.b (start>>27&$FF),(start>>35&$FF)
(1)  114/       0 :                     		dc.l start>>11					; Start sector, big endian
(1)  115/       0 :                     		dc.b ((end-start)&$FF),((end-start)>>8&$FF)	; Filesize, little endian
(1)  116/       0 :                     		dc.b ((end-start)>>16&$FF),((end-start)>>24&$FF)
(1)  117/       0 :                     		dc.l end-start					; Filesize, big endian
(1)  118/       0 :                     		dc.b (2024-1900)+1				; Year
(1)  119/       0 :                     		dc.b 0,0,0,0,0,0				; **never done**
(1)  120/       0 :                     		dc.b 2						; File flags
(1)  121/       0 :                     		dc.b 0,0
(1)  122/       0 :                     		dc.b 1,0					; Volume sequence number, little
(1)  123/       0 :                     		dc.b 0,1					; Volume sequence number, big
(1)  124/       0 :                     		dc.b 1,type
(1)  125/       0 :                     .fend:
(1)  126/       0 :                     		endm
(1)  127/       0 :                     
(1)  128/       0 :                     iso_file	macro filename,start,end
(1)  129/       0 :                     .fstrt:		dc.b .fend-.fstrt				; Block size
(1)  130/       0 :                     		dc.b 0						; zero
(1)  131/       0 :                     		dc.b (start>>11&$FF),(start>>19&$FF)		; Start sector, little
(1)  132/       0 :                     		dc.b (start>>27&$FF),(start>>35&$FF)
(1)  133/       0 :                     		dc.l start>>11					; Start sector, big
(1)  134/       0 :                     		dc.b ((end-start)&$FF),((end-start)>>8&$FF)	; Filesize, little
(1)  135/       0 :                     		dc.b ((end-start)>>16&$FF),((end-start)>>24&$FF)
(1)  136/       0 :                     		dc.l end-start					; Filesize, big
(1)  137/       0 :                     		dc.b (2024-1900)+1				; Year
(1)  138/       0 :                     		dc.b 0,0,0,0,0,0				; TODO
(1)  139/       0 :                     		dc.b 0						; File flags
(1)  140/       0 :                     		dc.b 0,0
(1)  141/       0 :                     		dc.b 1,0					; Volume sequence number, little
(1)  142/       0 :                     		dc.b 0,1					; Volume sequence number, big
(1)  143/       0 :                     		dc.b .flend-.flen
(1)  144/       0 :                     .flen:		dc.b filename,";1"
(1)  145/       0 :                     .flend:		dc.b 0
(1)  146/       0 :                     .fend:
(1)  147/       0 :                     		endm
(1)  148/       0 :                     
(1)  149/       0 :                     ; ====================================================================
(1)  150/       0 :                     ; ------------------------------------------------------------
(1)  151/       0 :                     ; Nikona macros
(1)  152/       0 :                     ; ------------------------------------------------------------
(1)  153/       0 :                     
(1)  154/       0 :                     ; --------------------------------------------
(1)  155/       0 :                     ; Screen mode code
(1)  156/       0 :                     ; --------------------------------------------
(1)  157/       0 :                     
(1)  158/       0 :                     screen_code macro lblstart,lblend,path
(1)  159/       0 :                     	if MCD|MARSCD
(1)  160/       0 :                     		align $800		; SCD/CD32X sector align
(1)  161/       0 :                     	elseif MARS
(1)  162/       0 :                     		align 4
(1)  163/       0 :                     		phase $880000+*		; 32X ROM-area
(1)  164/       0 :                     	endif
(1)  165/       0 :                     lblstart label *
(1)  166/       0 :                     	if MARS
(1)  167/       0 :                     		dephase
(1)  168/       0 :                     	endif
(1)  169/       0 :                     
(1)  170/       0 :                     mctopscrn:
(1)  171/       0 :                     	if MARS|MCD|MARSCD
(1)  172/       0 :                     		phase RAM_UserCode	; SCD/32X/CD32X relocate to RAM area
(1)  173/       0 :                     	endif
(1)  174/       0 :                     mcscrn_s:
(1)  175/       0 :                     	include path;"game/screen_0/code.asm"
(1)  176/       0 :                     mcscrn_e:
(1)  177/       0 :                     	if MARS
(1)  178/       0 :                     		dephase	; dephase RAM section
(1)  179/       0 :                     		dephase ; dephase $880000+ section
(1)  180/       0 :                     	elseif MCD|MARSCD
(1)  181/       0 :                     		dephase
(1)  182/       0 :                     		phase mctopscrn+(mcscrn_e-RAM_UserCode)
(1)  183/       0 :                     		align $800
(1)  184/       0 :                     	endif
(1)  185/       0 :                     ; Md_Screen00_e:
(1)  186/       0 :                     lblend label *
(1)  187/       0 :                     	if MCD|MARS|MARSCD
(1)  188/       0 :                     		report "SCREEN MODE: lblstart",mcscrn_e-RAM_UserCode,MAX_UserCode
(1)  189/       0 :                     	else
(1)  190/       0 :                     		if lblend-lblstart > MAX_UserCode
(1)  191/       0 :                     			warning "THIS SCREEN CODE IS TOO LARGE FOR SCD, 32X and CD32X"
(1)  192/       0 :                     		endif
(1)  193/       0 :                     	endif
(1)  194/       0 :                     	endm
(1)  195/       0 :                     
(1)  196/       0 :                     ; --------------------------------------------
(1)  197/       0 :                     ; 68K data bank
(1)  198/       0 :                     ; --------------------------------------------
(1)  199/       0 :                     
(1)  200/       0 :                     data_bkset macro startlbl,except
(1)  201/       0 :                     	if MCD|MARSCD
(1)  202/       0 :                     		align $800
(1)  203/       0 :                     	elseif MARS
(1)  204/       0 :                     		align 4
(1)  205/       0 :                     		if except==-1
(1)  206/       0 :                     			phase $900000+*	; First 32X data bank
(1)  207/       0 :                     		else
(1)  208/       0 :                     			phase $900000
(1)  209/       0 :                     		endif
(1)  210/       0 :                     	endif
(1)  211/       0 :                     ; MCD_DBANK0:
(1)  212/       0 :                     startlbl label *
(1)  213/       0 :                     	if MCD|MARSCD
(1)  214/       0 :                     		phase sysmcd_wram
(1)  215/       0 :                     	elseif MARS
(1)  216/       0 :                     ; 		dephase
(1)  217/       0 :                     	endif
(1)  218/       0 :                     	endm
(1)  219/       0 :                     
(1)  220/       0 :                     data_bkend macro startlbl,endlbl,thissize
(1)  221/       0 :                     	if MARS
(1)  222/       0 :                     		dephase
(1)  223/       0 :                     		report "68K DATA BANK: startlbl ($900000)",thissize,$100000
(1)  224/       0 :                     	elseif MCD|MARSCD
(1)  225/       0 :                     		dephase
(1)  226/       0 :                     		align $800
(1)  227/       0 :                     endlbl label *	; <-- CD/CD32X ONLY
(1)  228/       0 :                     		report "68K DATA BANK: startlbl (WORD-RAM)",thissize,$40000
(1)  229/       0 :                     	endif
(1)  230/       0 :                     
(1)  231/       0 :                     	if MARS
(1)  232/       0 :                     		if thissize > $100000
(1)  233/       0 :                     			warning "THIS BANK SIZE IS TOO LARGE FOR A 32X BANK"
(1)  234/       0 :                     		endif
(1)  235/       0 :                     	endif
(1)  236/       0 :                     
(1)  237/       0 :                     	if thissize > $40000
(1)  238/       0 :                     		warning "THIS BANK SIZE IS TOO LARGE FOR SCD and CD32X (WORD-RAM)"
(1)  239/       0 :                     	endif
(1)  240/       0 :                     	endm
(1)  241/       0 :                     
(1)  242/       0 :                     ; --------------------------------------------
(1)  243/       0 :                     ; 32X ONLY
(1)  244/       0 :                     ; --------------------------------------------
(1)  245/       0 :                     
(1)  246/       0 :                     sdram_bkset macro thislbl,endlbl
(1)  247/       0 :                     	if MCD|MARSCD
(1)  248/       0 :                     		align $800
(1)  249/       0 :                     	elseif MARS
(1)  250/       0 :                     		align 4
(1)  251/       0 :                     		phase $880000+*
(1)  252/       0 :                     	endif
(1)  253/       0 :                     ; MARSDATA_DEFAULT:
(1)  254/       0 :                     thislbl label *
(1)  255/       0 :                     	if MARS
(1)  256/       0 :                     		dephase
(1)  257/       0 :                     	endif
(1)  258/       0 :                     	if MARS|MARSCD
(1)  259/       0 :                     		dc.l endlbl-thislbl
(1)  260/       0 :                     		phase SH2_USER_DATA
(1)  261/       0 :                     	endif
(1)  262/       0 :                     	endm
(1)  263/       0 :                     
(1)  264/       0 :                     ; --------------------------------------------
(1)  265/       0 :                     
(1)  266/       0 :                     sdram_bkend macro thislbl,endlbl
(1)  267/       0 :                     		align $800	; DREQ data-pack alignment
(1)  268/       0 :                     	if MARS|MARSCD
(1)  269/       0 :                     		dephase
(1)  270/       0 :                     	endif
(1)  271/       0 :                     	if MCD|MARSCD
(1)  272/       0 :                     endlbl label *
(1)  273/       0 :                     		align $800
(1)  274/       0 :                     	elseif MARS
(1)  275/       0 :                     		phase $880000+*
(1)  276/       0 :                     endlbl label *
(1)  277/       0 :                     		dephase
(1)  278/       0 :                     	endif
(1)  279/       0 :                     
(1)  280/       0 :                     	if MARS|MARSCD
(1)  281/       0 :                     		report "SH2 SDRAM DATA: thislbl",endlbl-thislbl,(CS3|$40000)-SH2_USER_DATA
(1)  282/       0 :                     	endif
(1)  283/       0 :                     	endm
(1)  284/       0 :                     
(1)  285/       0 :                     ; --------------------------------------------
(1)  286/       0 :                     ; Set data bank(s) for the current screen
(1)  287/       0 :                     ;
(1)  288/       0 :                     ; mcdpos:
(1)  289/       0 :                     ; 	dc.b "FILENAME.BIN",0
(1)  290/       0 :                     ; 	align 2
(1)  291/       0 :                     ;
(1)  292/       0 :                     ; marspos:
(1)  293/       0 :                     ; 	dc.l MARSDATA_DEFAULT	; 32X Cartridge point (UNUSED on CD32X)
(1)  294/       0 :                     ; 	dc.b "MARSD_00.BIN",0	; CD32X Filename (UNUSED on 32X Cartridge)
(1)  295/       0 :                     ; 	align 2
(1)  296/       0 :                     ; --------------------------------------------
(1)  297/       0 :                     
(1)  298/       0 :                     set_dbanks macro mcdpos,marspos
(1)  299/       0 :                     	if MARS|MARSCD
(1)  300/       0 :                     		lea	marspos(pc),a0		; 32X/CD32X: SH2 side data
(1)  301/       0 :                     		bsr	System_MarsDataPack
(1)  302/       0 :                     ; 		bsr	Video_MdMars_SyncFrame
(1)  303/       0 :                     	endif
(1)  304/       0 :                     	if MCD|MARSCD
(1)  305/       0 :                     		bsr	System_McdSubWait
(1)  306/       0 :                     		lea	mcdpos(pc),a0		; CD/CD32X: Genesis data
(1)  307/       0 :                     		bsr	System_McdTrnsfr_WRAM
(1)  308/       0 :                     	endif
(1)  309/       0 :                     	endm
(1)  310/       0 :                     
(1)  311/       0 :                     ; --------------------------------------------
(1)  312/       0 :                     ; VDP color debug
(1)  313/       0 :                     ; --------------------------------------------
(1)  314/       0 :                     
(1)  315/       0 :                     vdp_showme	macro color
(1)  316/       0 :                     		move.l	#$C0000000,(vdp_ctrl).l
(1)  317/       0 :                     		move.w	#color,(vdp_data).l
(1)  318/       0 :                     		endm
(1)  319/       0 :                     
      83/       0 :                     		include "game/globals.asm"	; USER variables
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; GLOBAL RAM for ALL screen modes
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; Score, Lives, Level number, etc.
(1)    6/       0 :                     ; ----------------------------------------------------------------
(1)    7/       0 :                     
(1)    8/       0 : (MACRO)              			strct RAM_MdGlobal
(1)    8/       0 : =$0                  GLBL_LASTPC     set *
(1)    8/       0 :                                     dephase
(1)    8/FFFFFFFFFFFFEC04 :                                     phase RAM_MDGLOBAL
(1)    8/FFFFFFFFFFFFEC04 : =$FFFFFFFFFFFFEC04   GLBL_LASTORG    set *
(1)    9/FFFFFFFFFFFFEC04 :                     
(1)   10/FFFFFFFFFFFFEC04 :                     ; ------------------------------------------------------------
(1)   11/FFFFFFFFFFFFEC04 :                     ; Examples:
(1)   12/FFFFFFFFFFFFEC04 :                     ;
(1)   13/FFFFFFFFFFFFEC04 :                     ; RAM_Glbl_ExmpL ds.l 8 ; reserve 4 LONGS ($20 bytes)
(1)   14/FFFFFFFFFFFFEC04 :                     ; RAM_Glbl_ExmpW ds.w 6 ; reserve 3 WORDS ($0C bytes)
(1)   15/FFFFFFFFFFFFEC04 :                     ; RAM_Glbl_ExmpB ds.b 5 ; reserve 5 bytes
(1)   16/FFFFFFFFFFFFEC04 :                     ;
(1)   17/FFFFFFFFFFFFEC04 :                     ; Careful with bytes, everything needs to be word-algined
(1)   18/FFFFFFFFFFFFEC04 :                     ; or your will get an ADDRESS ERROR.
(1)   19/FFFFFFFFFFFFEC04 :                     ; ------------------------------------------------------------
(1)   20/FFFFFFFFFFFFEC04 :                     
(1)   21/FFFFFFFFFFFFEC04 :                     RAM_Glbl_Filler		ds.l 1		; 1 long (4 bytes)
(1)   22/FFFFFFFFFFFFEC08 :                     
(1)   23/FFFFFFFFFFFFEC08 :                     
(1)   24/FFFFFFFFFFFFEC08 :                     ; ------------------------------------------------------------
(1)   25/FFFFFFFFFFFFEC08 :                     sizeof_MdGlbl		ds.l 0		; size label
(1)   26/FFFFFFFFFFFFEC0C : (MACRO)              			endstrct
(1)   26/FFFFFFFFFFFFEC04 :                                     org GLBL_LASTORG
(1)   26/       0 :                                     phase GLBL_LASTPC
(1)   27/       0 :                     
      84/       0 :                     		include	"system/shared.asm"	; Shared variables and specials
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Shared variables
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; ====================================================================
(1)    7/       0 :                     ; ----------------------------------------------------------------
(1)    8/       0 :                     ; 32X SECTION
(1)    9/       0 :                     ; ----------------------------------------------------------------
(1)   10/       0 :                     
(1)  104/       0 :                     
(1)  105/       0 :                     ; ====================================================================
(1)  106/       0 :                     
      85/       0 :                     		include	"system/mcd/map.asm"	; Sega CD hardware map (shared with Sub-CPU)
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; SEGA CD SUB-CPU MAP
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; ------------------------------------------------
(1)    7/       0 :                     ; Register area
(1)    8/       0 :                     ;
(1)    9/       0 :                     ; MAIN-CPU: $A12000 (sysmcd_reg)
(1)   10/       0 :                     ; SUB-CPU:  $FF8000 (scpu_reg)
(1)   11/       0 :                     ; ------------------------------------------------
(1)   12/       0 :                     
(1)   13/       0 :                     ; -------------
(1)   14/       0 :                     ; bits
(1)   15/       0 :                     ; -------------
(1)   16/       0 :                     
(1)   17/       0 : =$2                  bitWRamMode	equ 2		;2M | 1M
(1)   18/       0 :                     
(1)   19/       0 :                     ; -------------
(1)   20/       0 :                     ; Registers
(1)   21/       0 :                     ; -------------
(1)   22/       0 :                     
(1)   23/       0 : =$3                  mcd_memory	equ $03
(1)   24/       0 : =$6                  mcd_hint	equ $06		; [W] HBlank RAM redirection-jump (MAIN CPU ONLY)
(1)   25/       0 : =$E                  mcd_comm_m	equ $0E		; [B] Comm port MAIN R/W | SUB READ ONLY
(1)   26/       0 : =$F                  mcd_comm_s	equ $0F		; [B] Comm port SUB R/W  | MAIN READ ONLY
(1)   27/       0 : =$10                 mcd_dcomm_m	equ $10		; [S: $0E] Communication MAIN
(1)   28/       0 : =$20                 mcd_dcomm_s	equ $20		; [S: $0E] Communication SUB
(1)   29/       0 : =$32                 mcd_intmask	equ $32		;
(1)   30/       0 :                     
(1)   31/       0 :                     ; ====================================================================
(1)   32/       0 :                     
      86/       0 :                     		include	"system/mars/map.asm"	; 32X hardware map (shared with SH2)
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; -------------------------------------------------------------------
(1)    3/       0 :                     ; SH2 MAP
(1)    4/       0 :                     ; -------------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; ------------------------------------------------------------
(1)    7/       0 :                     ; SH2 SIDE MAP
(1)    8/       0 :                     ; ------------------------------------------------------------
(1)    9/       0 :                     
(1)   10/       0 : =$0                  CS0		equ	$00000000	; Boot ROM & System registers
(1)   11/       0 : =$2000000            CS1		equ	$02000000	; ROM data all 4MB, Gone if RV=1
(1)   12/       0 : =$4000000            CS2		equ	$04000000	; Framebuffer area
(1)   13/       0 : =$6000000            CS3		equ	$06000000	; SDRAM
(1)   14/       0 : =$20000000           TH		equ	$20000000	; OR value for CacheThru
(1)   15/       0 : =$20004000           _sysreg		equ	$00004000|TH	; MARS System registers
(1)   16/       0 : =$20004100           _vdpreg		equ	$00004100|TH	; SuperVDP registers
(1)   17/       0 : =$20004200           _palette	equ	$00004200|TH	; Palette RAM for Pixel-Packed or RLE mode
(1)   18/       0 : =$24000000           _framebuffer:	equ	CS2|TH		; Framebuffer: First 240 words are the linetable
(1)   19/       0 : =$24020000           _overwrite:	equ	CS2|TH+$20000	; Overwrite: $00 writes are ignored
(1)   20/       0 :                     
(1)   21/       0 :                     ; ------------------------------------------------------------
(1)   22/       0 :                     ; Variables
(1)   23/       0 :                     ; ------------------------------------------------------------
(1)   24/       0 :                     
(1)   25/       0 :                     ; ------------------------------------------------
(1)   26/       0 :                     ; System
(1)   27/       0 :                     ; ------------------------------------------------
(1)   28/       0 :                     
(1)   29/       0 :                     ; _sysreg
(1)   30/       0 : =$0                  adapter		equ	$00		; adapter control register (Read as WORD)
(1)   31/       0 : =$1                  intmask		equ	$01		; SH2 CPU ONLY: interrupts mask
(1)   32/       0 : =$3                  standby		equ	$03		; CMD interrupt request bit by MD side (slave|master) (BYTE)
(1)   33/       0 : =$5                  hcount		equ	$05		; H Counter (BYTE)
(1)   34/       0 : =$6                  dreqctl		equ	$06		; DREQ control (WORD)
(1)   35/       0 : =$8                  dreqsource	equ	$08		; DREQ source address
(1)   36/       0 : =$C                  dreqdest	equ	$0C		; DREQ destination address
(1)   37/       0 : =$10                 dreqlen		equ	$10		; DREQ length
(1)   38/       0 : =$12                 dreqfifo	equ	$12		; DREQ FIFO
(1)   39/       0 : =$14                 vresintclr	equ	$14		; VRES interrupt clear
(1)   40/       0 : =$16                 vintclr		equ	$16		; V interrupt clear
(1)   41/       0 : =$18                 hintclr		equ	$18		; H interrupt clear
(1)   42/       0 : =$1A                 cmdintclr	equ	$1a		; CMD interrupt clear
(1)   43/       0 : =$1C                 pwmintclr	equ	$1C		; PWM interrupt clear
(1)   44/       0 : =$20                 comm0		equ	$20		; Communication ports ***
(1)   45/       0 : =$21                 comm1		equ	$21		; ALL CPUs can see this ports: including Z80
(1)   46/       0 : =$22                 comm2		equ	$22		; only be careful with the read/write directions.
(1)   47/       0 : =$23                 comm3		equ	$23		; ODD addresses (1,3,5...) are BYTE-read only.
(1)   48/       0 : =$24                 comm4		equ	$24		; EVEN addresses (0,2,4...) can be read as WORDs
(1)   49/       0 : =$25                 comm5		equ	$25		; Writing LONG addreses are possible depending
(1)   50/       0 : =$26                 comm6		equ	$26		; of the CPU's aligment limitations.
(1)   51/       0 : =$27                 comm7		equ	$27		;
(1)   52/       0 : =$28                 comm8		equ	$28		;
(1)   53/       0 : =$29                 comm9		equ	$29		;
(1)   54/       0 : =$2A                 comm10		equ	$2A		;
(1)   55/       0 : =$2B                 comm11		equ	$2B		;
(1)   56/       0 : =$2C                 comm12		equ	$2C		;
(1)   57/       0 : =$2D                 comm13		equ	$2D		;
(1)   58/       0 : =$2E                 comm14		equ	$2E		;
(1)   59/       0 : =$2F                 comm15		equ	$2F		;
(1)   60/       0 : =$30                 timerctl	equ	$30		; PWM Timer Control
(1)   61/       0 : =$31                 pwmctl		equ	$31		; PWM Control
(1)   62/       0 : =$32                 cycle		equ	$32		; PWM Cycle
(1)   63/       0 : =$34                 lchwidth	equ	$34		; PWM L ch Width
(1)   64/       0 : =$36                 rchwidth	equ	$36		; PWM R ch Width
(1)   65/       0 : =$38                 monowidth	equ	$38		; PWM Monaural Width
(1)   66/       0 :                     
(1)   67/       0 :                     ; _sysreg
(1)   68/       0 :                     ; adapter
(1)   69/       0 : =$1                  CART		equ	%00000001	; CD or Cartridge
(1)   70/       0 : =$2                  ADEN		equ	%00000010	; MARS Enabled: No/Yes
(1)   71/       0 : =$80                 FM		equ	%10000000	; SuperVDP permission: MD or SH
(1)   72/       0 :                     ; framectl
(1)   73/       0 : =$1                  FS		equ	%00000001	; Current framebuffer DRAM pixel data
(1)   74/       0 : =$2                  FEN		equ	%00000010	; Can write to Framebuffer: Yes/No
(1)   75/       0 :                     ; vdpsts
(1)   76/       0 : =$80                 VBLK		equ	%10000000	; VBlank bit
(1)   77/       0 : =$40                 HBLK		equ	%01000000	; HBlank bit
(1)   78/       0 : =$20                 PEN		equ	%00100000	; Can write to Palette: Yes/No
(1)   79/       0 :                     ; intmask
(1)   80/       0 : =$8                  VIRQ_ON		equ	$08		; IRQ masks for IRQ mask register
(1)   81/       0 : =$4                  HIRQ_ON		equ	$04
(1)   82/       0 : =$2                  CMDIRQ_ON	equ	$02
(1)   83/       0 : =$1                  PWMIRQ_ON	equ	$01
(1)   84/       0 :                     
(1)   85/       0 :                     ; _vdpreg
(1)   86/       0 : =$0                  tvmode		equ	$00		; TV mode
(1)   87/       0 : =$1                  bitmapmd	equ	$01		; Bitmap mode
(1)   88/       0 : =$2                  shift		equ	$02		; Lineshift bit
(1)   89/       0 : =$4                  filllength	equ	$04		; Auto Fill Length register
(1)   90/       0 : =$6                  fillstart	equ	$06		; Auto Fill Start Address register
(1)   91/       0 : =$8                  filldata	equ	$08		; Auto Fill Data register
(1)   92/       0 : =$A                  vdpsts		equ	$0A		; VDP Status register
(1)   93/       0 : =$B                  framectl	equ	$0B		; Frame Buffer Control register
(1)   94/       0 :                     
(1)   95/       0 :                     ; ------------------------------------------------------------
(1)   96/       0 :                     ; SH2 Internal registers, for each CPU
(1)   97/       0 :                     ; ------------------------------------------------------------
(1)   98/       0 :                     
(1)   99/       0 :                     ; DMA Channel 0: DREQ
(1)  100/       0 :                     ; DMA Channel 1: PWM
(1)  101/       0 :                     
(1)  102/       0 : =$FFFFFE00           _SERIAL		equ	$FFFFFE00	; Serial Control
(1)  103/       0 : =$FFFFFE10           _FRT		equ	$FFFFFE10	; Free run timer
(1)  104/       0 : =$0                  _TIER		equ	$00		; Timer interrupt enable register
(1)  105/       0 : =$1                  _TCSR		equ	$01		; Timer control & status register
(1)  106/       0 : =$2                  _FRC_H		equ	$02		; Free running counter High
(1)  107/       0 : =$3                  _FRC_L		equ	$03		; Free running counter Low
(1)  108/       0 : =$4                  _OCR_H		equ	$04		; Output compare register High
(1)  109/       0 : =$5                  _OCR_L		equ	$05		; Output compare register Low
(1)  110/       0 : =$6                  _TCR		equ	$06		; Timer control register
(1)  111/       0 : =$7                  _TOCR		equ	$07		; Timer output compare control register
(1)  112/       0 : =$FFFFFE92           _CCR		equ	$FFFFFE92	; Cache register (WORD)
(1)  113/       0 : =$FFFFFF00           _JR		equ	$FFFFFF00	; DIVU (--- / val)
(1)  114/       0 : =$FFFFFF04           _HRL32		equ	$FFFFFF04	; DIVU (val / ---) or RIGHT-long result if read
(1)  115/       0 : =$FFFFFF10           _HRH		equ	$FFFFFF10	; DIVU Result: LEFT long
(1)  116/       0 : =$FFFFFF14           _HRL		equ	$FFFFFF14	; DIVU Result: RIGHT long
(1)  117/       0 : =$FFFFFF80           _DMASOURCE0	equ	$FFFFFF80	; DMA source address 0
(1)  118/       0 : =$FFFFFF84           _DMADEST0	equ	$FFFFFF84	; DMA destination address 0
(1)  119/       0 : =$FFFFFF88           _DMACOUNT0	equ	$FFFFFF88	; DMA transfer count 0
(1)  120/       0 : =$FFFFFF8C           _DMACHANNEL0	equ	$FFFFFF8C	; DMA channel control 0
(1)  121/       0 : =$FFFFFF90           _DMASOURCE1	equ	$FFFFFF90	; DMA source address 1
(1)  122/       0 : =$FFFFFF94           _DMADEST1	equ	$FFFFFF94	; DMA destination address 1
(1)  123/       0 : =$FFFFFF98           _DMACOUNT1	equ	$FFFFFF98	; DMA transfer count 1
(1)  124/       0 : =$FFFFFF9C           _DMACHANNEL1	equ	$FFFFFF9C	; DMA channel control 1
(1)  125/       0 : =$FFFFFFA0           _DMAVECTORN0	equ	$FFFFFFA0	; DMA vector number N0
(1)  126/       0 : =$FFFFFFA4           _DMAVECTORE0	equ	$FFFFFFA4	; DMA vector number E0
(1)  127/       0 : =$FFFFFFA8           _DMAVECTORN1	equ	$FFFFFFA8	; DMA vector number N1
(1)  128/       0 : =$FFFFFFAC           _DMAVECTORE1	equ	$FFFFFFAC	; DMA vector number E1
(1)  129/       0 : =$FFFFFFB0           _DMAOPERATION	equ	$FFFFFFB0	; DMA operation
(1)  130/       0 : =$FFFFFFB4           _DMAREQACK0	equ	$FFFFFFB4	; DMA request/ack select control 0
(1)  131/       0 : =$FFFFFFB8           _DMAREQACK1	equ	$FFFFFFB8	; DMA request/ack select control 1
(1)  132/       0 :                     
      87/       0 :                     		include	"system/md/map.asm"	; Genesis hardware map and other areas
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Genesis / Pico 68000 map
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 : =$200000             sys_exram	equ	$200000		; Second half of 4MB rom or external RAM (Normal or save data)
(1)    7/       0 : =$A00000             z80_cpu		equ	$A00000		; Z80 CPU area, size: $2000
(1)    8/       0 : =$A04000             ym_ctrl_1	equ	$A04000		; YM2612 reg 1
(1)    9/       0 : =$A04001             ym_data_1	equ	$A04001		; YM2612 reg 2
(1)   10/       0 : =$A04002             ym_ctrl_2	equ	$A04002		; YM2612 reg 1
(1)   11/       0 : =$A04003             ym_data_2	equ	$A04003		; YM2612 reg 2
(1)   12/       0 : =$A10001             sys_io		equ	$A10001		; bits: OVRSEAS(7)|PAL(6)|DISK(5)|VER(3-0)
(1)   13/       0 : =$A10003             sys_data_1	equ	$A10003		; Port 1 DATA
(1)   14/       0 : =$A10005             sys_data_2	equ	$A10005		; Port 2 DATA
(1)   15/       0 : =$A10007             sys_data_3	equ	$A10007		; Modem DATA
(1)   16/       0 : =$A10009             sys_ctrl_1	equ	$A10009		; Port 1 CTRL
(1)   17/       0 : =$A1000B             sys_ctrl_2	equ	$A1000B		; Port 2 CTRL
(1)   18/       0 : =$A1000D             sys_ctrl_3	equ	$A1000D		; Modem CTRL
(1)   19/       0 : =$A11100             z80_bus 	equ	$A11100		; only use bit 0 (bit 8 as WORD)
(1)   20/       0 : =$A11200             z80_reset	equ	$A11200		; WRITE only ($0000 reset/$0100 cancel)
(1)   21/       0 : =$A130F1             md_bank_sram	equ	$A130F1		; Make SRAM visible at $200000
(1)   22/       0 : =$A14000             sys_tmss	equ	$A14000		; write "SEGA" here for ver > 0
(1)   23/       0 : =$C00000             vdp_data	equ	$C00000		; video data port
(1)   24/       0 : =$C00004             vdp_ctrl	equ	$C00004		; video control port
(1)   25/       0 : =$C00011             psg_ctrl	equ	$C00011		; PSG control
(1)   26/       0 :                     
(1)   27/       0 :                     ; ----------------------------------------------------------------
(1)   28/       0 :                     ; SEGA CD map
(1)   29/       0 :                     ; ----------------------------------------------------------------
(1)   30/       0 :                     
(1)   31/       0 : =$200000             sysmcd_wram	equ	$200000
(1)   32/       0 : =$A12000             sysmcd_reg	equ	$A12000
(1)   33/       0 :                     
(1)   34/       0 :                     ; ----------------------------------------------------------------
(1)   35/       0 :                     ; 32X map
(1)   36/       0 :                     ; ----------------------------------------------------------------
(1)   37/       0 :                     
(1)   38/       0 : =$A130EC             sysmars_id	equ	$A130EC		; 32X's ID: "MARS"
(1)   39/       0 : =$A15100             sysmars_reg	equ	$A15100		; MARS 32X registers area, see system/mars/map.asm for variables
(1)   40/       0 :                     
(1)   41/       0 :                     ; ----------------------------------------------------------------
(1)   42/       0 :                     ; Genesis / Mega drive Z80 map
(1)   43/       0 :                     ; ----------------------------------------------------------------
(1)   44/       0 :                     
(1)   45/       0 : =$4000               zym_ctrl_1	equ	$4000		; YM2612 reg 1
(1)   46/       0 : =$4001               zym_data_1	equ	$4001		; YM2612 reg 2
(1)   47/       0 : =$4002               zym_ctrl_2	equ	$4002		; YM2612 reg 1
(1)   48/       0 : =$4003               zym_data_2	equ	$4003		; YM2612 reg 2
(1)   49/       0 : =$6000               zbank		equ	$6000		; Z80 ROM BANK: %XXXXXXXX X0000000 00000000 (9 writes)
(1)   50/       0 :                     ; zvdp_data	equ	$7F00		; video data port
(1)   51/       0 :                     ; zvdp_ctrl	equ	$7F04		; video control port
(1)   52/       0 : =$7F11               zpsg_ctrl	equ	$7F11		; PSG control
(1)   53/       0 :                     
      88/       0 :                     		include	"system/md/ram.asm"	; Genesis RAM sections
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Genesis 68000 "MAIN-CPU" RAM section
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; RESERVED RAM areas:
(1)    6/       0 :                     ; $FFFB00-$FFFD00 | Stack area a7
(1)    7/       0 :                     ; $FFFD00-$FFFDFF | RESERVED for the Sega CD Vector jumps,
(1)    8/       0 :                     ;                   * FREE to use if running on Cartridge.
(1)    9/       0 :                     ;                   (Genesis,32X,Pico.)
(1)   10/       0 :                     ; $FFFE00-$FFFEFF | USED in Sega CD for the BIOS, BUT this might
(1)   11/       0 :                     ;                   be free to use after booting **NEEDS testing**
(1)   12/       0 :                     ;                   * FREE to use on Cartridge.
(1)   13/       0 :                     ; $FFFF00-$FFFFFF | RESERVED for the Sound Driver
(1)   14/       0 :                     ;                   This area will probably be used for the 68k
(1)   15/       0 :                     ;                   version of GEMA for the Pico, but currently
(1)   16/       0 :                     ;                   the Z80 sets a flag around here for a
(1)   17/       0 :                     ;                   workaround to read data located at the
(1)   18/       0 :                     ;                   RAM area, it will be required if the
(1)   19/       0 :                     ;                   SegaCD does stamp processing and the game
(1)   20/       0 :                     ;                   still needs sound.
(1)   21/       0 :                     ; ----------------------------------------------------------------
(1)   22/       0 :                     
(1)   23/       0 :                     ; --------------------------------------------------------
(1)   24/       0 :                     ; Settings
(1)   25/       0 :                     ; --------------------------------------------------------
(1)   26/       0 :                     
(1)   27/       0 : (MACRO)              			strct $FFFF0000
(1)   27/       0 : =$0                  GLBL_LASTPC     set *
(1)   27/FFFFFFFFFFFFEC04 :                                     dephase
(1)   27/FFFFFFFFFFFF0000 :                                     phase $FFFF0000
(1)   27/FFFFFFFFFFFF0000 : =$FFFFFFFFFFFF0000   GLBL_LASTORG    set *
(1)   28/FFFFFFFFFFFF0000 :                     RAM_SystemCode		ds.b MAX_SysCode	; CD/32X/CD32X
(1)   29/FFFFFFFFFFFF2000 :                     RAM_UserCode		ds.b MAX_UserCode	; CD/32X/CD32X
(1)   30/FFFFFFFFFFFFA000 :                     
(1)   31/FFFFFFFFFFFFA000 :                     ; ------------------------------------------------
(1)   32/FFFFFFFFFFFFA000 :                     ; > $FF8000 section
(1)   33/FFFFFFFFFFFFA000 :                     ; ------------------------------------------------
(1)   34/FFFFFFFFFFFFA000 :                     
(1)   35/FFFFFFFFFFFFA000 :                     check_thisram		ds.l 0			; <-- get current pos
(1)   39/FFFFFFFFFFFFA004 :                     RAM_MdVideo		ds.b MAX_MdVideo	; $FF8000
(1)   40/FFFFFFFFFFFFC004 :                     RAM_MdSystem		ds.b MAX_MdSystem	;
(1)   41/FFFFFFFFFFFFC604 :                     RAM_MdOther		ds.b MAX_MdOther	; 32X's DREQ goes here
(1)   42/FFFFFFFFFFFFD404 :                     RAM_ScrnBuff		ds.b MAX_ScrnBuff
(1)   43/FFFFFFFFFFFFEC04 :                     RAM_MdGlobal		ds.b sizeof_MdGlbl
(1)   44/FFFFFFFFFFFFD80C :                     sizeof_MdRam		ds.l 0
(1)   45/FFFFFFFFFFFFD810 : (MACRO)              			endstrct
(1)   45/FFFFFFFFFFFF0000 :                                     org GLBL_LASTORG
(1)   45/       0 :                                     phase GLBL_LASTPC
(1)   49/       0 :                     
(1)   50/       0 :                     ; ------------------------------------------------
(1)   51/       0 :                     ; Add-on area
(1)   52/       0 :                     ; ------------------------------------------------
(1)   53/       0 :                     
(1)   54/       0 : (MACRO)              			strct RAM_MdOther
(1)   54/       0 : =$0                  GLBL_LASTPC     set *
(1)   54/FFFFFFFFFFFF0000 :                                     dephase
(1)   54/FFFFFFFFFFFFC604 :                                     phase RAM_MDOTHER
(1)   54/FFFFFFFFFFFFC604 : =$FFFFFFFFFFFFC604   GLBL_LASTORG    set *
(1)   55/FFFFFFFFFFFFC604 :                     RAM_MdDreq		ds.b $E00		; 32X DREQ RAM size (MANUALLY SET)
(1)   56/FFFFFFFFFFFFD404 :                     sizeof_RamOther		ds.l 0
(1)   57/FFFFFFFFFFFFD408 : (MACRO)              			endstrct
(1)   57/FFFFFFFFFFFFC604 :                                     org GLBL_LASTORG
(1)   57/       0 :                                     phase GLBL_LASTPC
(1)   58/       0 : (MACRO)              			erreport "32X DREQ RAM USES",(sizeof_RamOther-RAM_MdOther),MAX_MdOther
(1)   59/       0 :                     
(1)   60/       0 :                     ; ------------------------------------------------
(1)   61/       0 :                     ; Reserved areas
(1)   62/       0 :                     ; ------------------------------------------------
(1)   63/       0 :                     
(1)   64/       0 : =$FFFFFD00           RAM_Stack		equ RAM_MegaCd		; <-- goes backwards
(1)   65/       0 : =$FFFFFD00           RAM_MegaCd		equ $FFFFFD00
(1)   66/       0 : =$FFFFFF00           RAM_ZSndBuff		equ $FFFFFF00
(1)   67/       0 :                     
      89/       0 :                     
      90/       0 :                     ; ====================================================================
      91/       0 :                     ; ----------------------------------------------------------------
      92/       0 :                     ; Init procedures for all systems
      93/       0 :                     ; ----------------------------------------------------------------
      94/       0 :                     
      95/       0 :                     ; ---------------------------------------------
      96/       0 :                     ; SEGA 32X
      97/       0 :                     ; ---------------------------------------------
      98/       0 :                     
     120/       0 :                     		include	"system/head_mcd.asm"			; Sega CD header
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; SEGA CD header
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; Header shared for both CD and CD32X
(1)    6/       0 :                     ; ----------------------------------------------------------------
(1)    7/       0 :                     
(1)    8/       0 : 5345 4741 4449      		dc.b "SEGADISCSYSTEM  "		; Disc Type (Must be SEGADISCSYSTEM)
                6 : 5343 5359 5354 
                C : 454D 2020          
(1)    9/      10 : 4E49 4B4F 4E41      		dc.b "NIKONA-CD  ",0		; Disc ID
               16 : 2D43 4420 2000    
(1)   10/      1C : 0100 0001           		dc.w $100,1			; System ID, Type
(1)   11/      20 : 4E49 4B4F 4E41      		dc.b "NIKONA-SYS ",0		; System Name
               26 : 2D53 5953 2000    
(1)   12/      2C : 0000 0000           		dc.w 0,0			; System Version, Type
(1)   13/      30 : 0000 0784           		dc.l IP_Start
(1)   14/      34 : 0000 07B6           		dc.l IP_End
(1)   15/      38 : 0000 0000           		dc.l 0
(1)   16/      3C : 0000 0000           		dc.l 0
(1)   17/      40 : 0000 0800           		dc.l SP_Start
(1)   18/      44 : 0000 1100           		dc.l SP_End
(1)   19/      48 : 0000 0000           		dc.l 0
(1)   20/      4C : 0000 0000           		dc.l 0
(1)   21/      50 :                     		align $100			; Pad to $100
(1)   22/     100 : 5345 4741 2047      		dc.b "SEGA GENESIS    "
              106 : 454E 4553 4953 
              10C : 2020 2020          
(1)   23/     110 : 2843 2947 4636      		dc.b "(C)GF64 2024.???"
              116 : 3420 3230 3234 
              11C : 2E3F 3F3F          
(1)   28/     120 : 4E69 6B6F 6E61      		dc.b "Nikona MCD                                      "
              126 : 204D 4344 2020 
              12C : 2020 2020 2020 
              132 : 2020 2020 2020 
              138 : 2020 2020 2020 
              13E : 2020 2020 2020 
              144 : 2020 2020 2020 
              14A : 2020 2020 2020    
(1)   29/     150 : 4E69 6B6F 6E61                      dc.b "Nikona SCD                                      "
              156 : 2053 4344 2020 
              15C : 2020 2020 2020 
              162 : 2020 2020 2020 
              168 : 2020 2020 2020 
              16E : 2020 2020 2020 
              174 : 2020 2020 2020 
              17A : 2020 2020 2020    
(1)   31/     180 : 474D 2048 4F4D      		dc.b "GM HOMEBREW-02  "
              186 : 4542 5245 572D 
              18C : 3032 2020          
(1)   32/     190 : 4A36 4D20 2020      		dc.b "J6M             "
              196 : 2020 2020 2020 
              19C : 2020 2020          
(1)   33/     1A0 :                     		align $1F0
(1)   34/     1F0 : 4A55 4520 2020      		dc.b "JUE             "
              1F6 : 2020 2020 2020 
              1FC : 2020 2020          
(1)   35/     200 :                     
(1)   41/     200 :                     		binclude "system/mcd/region/usa.bin"	; <-- Default
(1)   43/     784 :                     
(1)   44/     784 :                     ; ====================================================================
(1)   45/     784 :                     ; ----------------------------------------------------------------
(1)   46/     784 :                     ; IP
(1)   47/     784 :                     ; ----------------------------------------------------------------
(1)   48/     784 :                     
(1)   49/     784 :                     IP_Start:
(1)   50/     784 : 41F9 00C0 0000      		lea	(vdp_data).l,a0
(1)   51/     78A : 3028 0004           .wait_vint:	move.w	4(a0),d0
(1)   52/     78E : 0800 0003           		btst	#3,d0
(1)   53/     792 : 67F6                		beq.s	.wait_vint
(1)   54/     794 : 217C C000 0000      		move.l	#$C0000000,4(a0)
              79A : 0004             
(1)   55/     79C : 323C 003F           		move.w	#64-1,d1
(1)   56/     7A0 : 7000                		moveq	#0,d0
(1)   57/     7A2 :                     .color_out:
(1)   58/     7A2 : 3080                		move.w	d0,(a0)
(1)   59/     7A4 : 51C9 FFFC           		dbf	d1,.color_out
(1)   60/     7A8 : 33FC FD0C 00A1      		move.w	#$FD0C,(sysmcd_reg+mcd_hint).l	; Relocate HBlank jump
              7AE : 2006             
(1)   61/     7B0 : 4EF9 00FF 2000      		jmp	($FF0600+MCD_Main).l
(1)   62/     7B6 :                     IP_End:
(1)   63/     7B6 :                     		align 2
(1)   64/     7B6 :                     
(1)   65/     7B6 :                     ; ====================================================================
(1)   66/     7B6 :                     ; ----------------------------------------------------------------
(1)   67/     7B6 :                     ; SP
(1)   68/     7B6 :                     ; ----------------------------------------------------------------
(1)   69/     7B6 :                     
(1)   70/     7B6 :                     		align $800
(1)   71/     800 :                     SP_Start:
(1)   72/     800 :                     		include "system/mcd/subcpu.asm"
(2)    1/     800 :                     ; ====================================================================
(2)    2/     800 :                     ; ----------------------------------------------------------------
(2)    3/     800 :                     ; SegaCD SUB-CPU
(2)    4/     800 :                     ;
(2)    5/     800 :                     ; TOP CODE loaded on BOOT
(2)    6/     800 :                     ; ----------------------------------------------------------------
(2)    7/     800 :                     
(2)    8/     800 :                     ; ====================================================================
(2)    9/     800 :                     ; ----------------------------------------------------------------
(2)   10/     800 :                     ; Variables
(2)   11/     800 :                     ; ----------------------------------------------------------------
(2)   12/     800 :                     
(2)   13/     800 : =$80000              scpu_wram	equ $00080000
(2)   14/     800 : =$FFFE8000           scpu_bram	equ $FFFE8000
(2)   15/     800 : =$FFFF0000           scpu_pcm	equ $FFFF0000
(2)   16/     800 :                     ; scpu_pcmwave	equ $FFFF2001	; <-- ODD WRITES ONLY
(2)   17/     800 : =$FFFF8000           scpu_reg	equ $FFFF8000
(2)   18/     800 :                     
(2)   19/     800 : =$0                  PCM		equ $00
(2)   20/     800 : =$1                  ENV		equ $01		; Envelope "Volume"
(2)   21/     800 : =$3                  PAN		equ $03		; Panning (%bbbbaaaa, aaaa = left, bbbb = right)
(2)   22/     800 : =$5                  FDL		equ $05		; Sample rate $00xx
(2)   23/     800 : =$7                  FDH		equ $07		; Sample rate $xx00
(2)   24/     800 : =$9                  LSL		equ $09		; Loop address $xx00
(2)   25/     800 : =$B                  LSH		equ $0B		; Loop address $00xx
(2)   26/     800 : =$D                  ST		equ $0D		; Start address (only $x0, $x000)
(2)   27/     800 : =$F                  CTREG		equ $0F		; Control register ($80 - Bank select, $C0 - Channel select)
(2)   28/     800 : =$11                 ONREG		equ $11		; Channel On/Off (BITS: 1 - off, 0 - on)
(2)   29/     800 :                     
(2)   30/     800 :                     ; ====================================================================
(2)   31/     800 :                     ; ----------------------------------------------------------------
(2)   32/     800 :                     ; Structs
(2)   33/     800 :                     ; ----------------------------------------------------------------
(2)   34/     800 :                     
(2)   35/     800 :                     ; cdpcm_flags:
(2)   36/     800 :                     ; %EFSU ---l
(2)   37/     800 :                     ; E-Enabled
(2)   38/     800 :                     ; F-First fill / Restart
(2)   39/     800 :                     ; S-Force stop (keyoff)
(2)   40/     800 :                     ; U-Update channel freq/vol/pan only
(2)   41/     800 :                     ; l-loop channel
(2)   42/     800 :                     
(2)   43/     800 :                     ; SIZE MUST BE $20
(2)   44/     800 : (MACRO)              		strct 0
(2)   44/     800 : =$800                GLBL_LASTPC     set *
(2)   44/FFFFFFFFFFFFCE04 :                                     dephase
(2)   44/       0 :                                     phase 0
(2)   44/       0 : =$0                  GLBL_LASTORG    set *
(2)   45/       0 :                     cdpcm_flags	ds.b 1		; %
(2)   46/       1 :                     cdpcm_strmf	ds.b 1
(2)   47/       2 :                     cdpcm_strmhalf	ds.b 1		; Halfway MSB $00/$04/$08/$0C
(2)   48/       3 :                     cdpcm_freeb	ds.b 1
(2)   49/       4 :                     cdpcm_clen	ds.l 1
(2)   50/       8 :                     cdpcm_cread	ds.l 1
(2)   51/       C :                     cdpcm_pan	ds.b 1
(2)   52/       D :                     cdpcm_env	ds.b 1
(2)   53/       E :                     cdpcm_pitch	ds.w 1
(2)   54/      10 :                     cdpcm_start	ds.l 1
(2)   55/      14 :                     cdpcm_len	ds.l 1
(2)   56/      18 :                     cdpcm_loop	ds.l 1
(2)   57/      1C :                     cdpcm_nstart	ds.l 1
(2)   58/      20 :                     cdpcm_nlen	ds.l 1
(2)   59/      24 :                     cdpcm_nloop	ds.l 1
(2)   60/      28 :                     sizeof_cdpcm	ds.l 0
(2)   61/      28 : (MACRO)              		endstrct
(2)   61/       0 :                                     org GLBL_LASTORG
(2)   61/     800 :                                     phase GLBL_LASTPC
(2)   62/     800 :                     
(2)   63/     800 :                     ; ====================================================================
(2)   64/     800 :                     ; ----------------------------------------------------------------
(2)   65/     800 :                     ; Includes
(2)   66/     800 :                     ; ----------------------------------------------------------------
(2)   67/     800 :                     
(2)   68/     800 :                     		include "system/mcd/cdbios.asm"
(3)    1/     800 : =$2                  MSCSTOP           equ	$0002
(3)    2/     800 : =$3                  MSCPAUSEON        equ	$0003
(3)    3/     800 : =$4                  MSCPAUSEOFF       equ	$0004
(3)    4/     800 : =$5                  MSCSCANFF         equ	$0005
(3)    5/     800 : =$6                  MSCSCANFR         equ	$0006
(3)    6/     800 : =$7                  MSCSCANOFF        equ	$0007
(3)    7/     800 : =$8                  ROMPAUSEON        equ	$0008
(3)    8/     800 : =$9                  ROMPAUSEOFF       equ	$0009
(3)    9/     800 : =$A                  DRVOPEN           equ	$000A
(3)   10/     800 :                     
(3)   11/     800 : =$10                 DRVINIT           equ	$0010
(3)   12/     800 : =$11                 MSCPLAY           equ	$0011
(3)   13/     800 : =$12                 MSCPLAY1          equ	$0012
(3)   14/     800 : =$13                 MSCPLAYR          equ	$0013
(3)   15/     800 : =$14                 MSCPLAYT          equ	$0014
(3)   16/     800 : =$15                 MSCSEEK           equ	$0015
(3)   17/     800 : =$16                 MSCSEEKT          equ	$0016
(3)   18/     800 : =$17                 ROMREAD           equ	$0017
(3)   19/     800 : =$18                 ROMSEEK           equ	$0018
(3)   20/     800 : =$19                 MSCSEEK1          equ	$0019
(3)   21/     800 :                     
(3)   22/     800 : =$1E                 TESTENTRY         equ	$001E
(3)   23/     800 : =$1F                 TESTENTRYLOOP     equ	$001F
(3)   24/     800 : =$20                 ROMREADN          equ	$0020
(3)   25/     800 : =$21                 ROMREADE          equ	$0021
(3)   26/     800 :                     
(3)   27/     800 : =$80                 CDBCHK            equ	$0080
(3)   28/     800 : =$81                 CDBSTAT           equ	$0081
(3)   29/     800 : =$82                 CDBTOCWRITE       equ	$0082
(3)   30/     800 : =$83                 CDBTOCREAD        equ	$0083
(3)   31/     800 : =$84                 CDBPAUSE          equ	$0084
(3)   32/     800 : =$85                 FDRSET            equ	$0085
(3)   33/     800 : =$86                 FDRCHG            equ	$0086
(3)   34/     800 : =$87                 CDCSTART          equ	$0087
(3)   35/     800 : =$88                 CDCSTARTP         equ	$0088
(3)   36/     800 : =$89                 CDCSTOP           equ	$0089
(3)   37/     800 : =$8A                 CDCSTAT           equ	$008A
(3)   38/     800 : =$8B                 CDCREAD           equ	$008B
(3)   39/     800 : =$8C                 CDCTRN            equ	$008C
(3)   40/     800 : =$8D                 CDCACK            equ	$008D
(3)   41/     800 : =$8E                 SCDINIT           equ	$008E
(3)   42/     800 : =$8F                 SCDSTART          equ	$008F
(3)   43/     800 : =$90                 SCDSTOP           equ	$0090
(3)   44/     800 : =$91                 SCDSTAT           equ	$0091
(3)   45/     800 : =$92                 SCDREAD           equ	$0092
(3)   46/     800 : =$93                 SCDPQ             equ	$0093
(3)   47/     800 : =$94                 SCDPQL            equ	$0094
(3)   48/     800 : =$95                 LEDSET            equ	$0095
(3)   49/     800 : =$96                 CDCSETMODE        equ	$0096
(3)   50/     800 : =$97                 WONDERREQ         equ	$0097
(3)   51/     800 : =$98                 WONDERCHK         equ	$0098
(3)   52/     800 :                     
(3)   53/     800 : =$0                  CBTINIT           equ	$0000
(3)   54/     800 : =$1                  CBTINT            equ	$0001
(3)   55/     800 : =$2                  CBTOPENDISC       equ	$0002
(3)   56/     800 : =$3                  CBTOPENSTAT       equ	$0003
(3)   57/     800 : =$4                  CBTCHKDISC        equ	$0004
(3)   58/     800 : =$5                  CBTCHKSTAT        equ	$0005
(3)   59/     800 : =$6                  CBTIPDISC         equ	$0006
(3)   60/     800 : =$7                  CBTIPSTAT         equ	$0007
(3)   61/     800 : =$8                  CBTSPDISC         equ	$0008
(3)   62/     800 : =$9                  CBTSPSTAT         equ	$0009
(3)   63/     800 :                     
(3)   64/     800 : =$0                  BRMINIT           equ	$0000
(3)   65/     800 : =$1                  BRMSTAT           equ	$0001
(3)   66/     800 : =$2                  BRMSERCH          equ	$0002
(3)   67/     800 : =$3                  BRMREAD           equ	$0003
(3)   68/     800 : =$4                  BRMWRITE          equ	$0004
(3)   69/     800 : =$5                  BRMDEL            equ	$0005
(3)   70/     800 : =$6                  BRMFORMAT         equ	$0006
(3)   71/     800 : =$7                  BRMDIR            equ	$0007
(3)   72/     800 : =$8                  BRMVERIFY         equ	$0008
(3)   73/     800 :                     
(3)   74/     800 :                     ;-----------------------------------------------------------------------
(3)   75/     800 :                     ; BIOS ENTRY POINTS
(3)   76/     800 :                     ;-----------------------------------------------------------------------
(3)   77/     800 :                     
(3)   78/     800 : =$5F40               _ADRERR           equ	$00005F40
(3)   79/     800 : =$5EA0               _BOOTSTAT         equ	$00005EA0
(3)   80/     800 : =$5F16               _BURAM            equ	$00005F16
(3)   81/     800 : =$5F22               _CDBIOS           equ	$00005F22
(3)   82/     800 : =$5F1C               _CDBOOT           equ	$00005F1C
(3)   83/     800 : =$5E80               _CDSTAT           equ	$00005E80
(3)   84/     800 : =$5F52               _CHKERR           equ	$00005F52
(3)   85/     800 : =$5F46               _CODERR           equ	$00005F46
(3)   86/     800 : =$5F4C               _DEVERR           equ	$00005F4C
(3)   87/     800 : =$5F76               _LEVEL1           equ	$00005F76
(3)   88/     800 : =$5F7C               _LEVEL2           equ	$00005F7C
(3)   89/     800 : =$5F82               _LEVEL3           equ	$00005F82 ;TIMER INTERRUPT
(3)   90/     800 : =$5F88               _LEVEL4           equ	$00005F88
(3)   91/     800 : =$5F8E               _LEVEL5           equ	$00005F8E
(3)   92/     800 : =$5F94               _LEVEL6           equ	$00005F94
(3)   93/     800 : =$5F9A               _LEVEL7           equ	$00005F9A
(3)   94/     800 : =$5F6A               _NOCOD0           equ	$00005F6A
(3)   95/     800 : =$5F70               _NOCOD1           equ	$00005F70
(3)   96/     800 : =$5F0A               _SETJMPTBL        equ	$00005F0A
(3)   97/     800 : =$5F5E               _SPVERR           equ	$00005F5E
(3)   98/     800 : =$5F64               _TRACE            equ	$00005F64
(3)   99/     800 : =$5FA0               _TRAP00           equ	$00005FA0
(3)  100/     800 : =$5FA6               _TRAP01           equ	$00005FA6
(3)  101/     800 : =$5FAC               _TRAP02           equ	$00005FAC
(3)  102/     800 : =$5FB2               _TRAP03           equ	$00005FB2
(3)  103/     800 : =$5FB8               _TRAP04           equ	$00005FB8
(3)  104/     800 : =$5FBE               _TRAP05           equ	$00005FBE
(3)  105/     800 : =$5FC4               _TRAP06           equ	$00005FC4
(3)  106/     800 : =$5FCA               _TRAP07           equ	$00005FCA
(3)  107/     800 : =$5FD0               _TRAP08           equ	$00005FD0
(3)  108/     800 : =$5FD6               _TRAP09           equ	$00005FD6
(3)  109/     800 : =$5FDC               _TRAP10           equ	$00005FDC
(3)  110/     800 : =$5FE2               _TRAP11           equ	$00005FE2
(3)  111/     800 : =$5FE8               _TRAP12           equ	$00005FE8
(3)  112/     800 : =$5FEE               _TRAP13           equ	$00005FEE
(3)  113/     800 : =$5FF4               _TRAP14           equ	$00005FF4
(3)  114/     800 : =$5FFA               _TRAP15           equ	$00005FFA
(3)  115/     800 : =$5F58               _TRPERR           equ	$00005F58
(3)  116/     800 : =$5F28               _USERCALL0        equ	$00005F28 ;INIT
(3)  117/     800 : =$5F2E               _USERCALL1        equ	$00005F2E ;MAIN
(3)  118/     800 : =$5F34               _USERCALL2        equ	$00005F34 ;VINT
(3)  119/     800 : =$5F3A               _USERCALL3        equ	$00005F3A ;NOT DEFINED
(3)  120/     800 : =$5EA6               _USERMODE         equ	$00005EA6
(3)  121/     800 : =$5F10               _WAITVSYNC        equ	$00005F10
(3)  122/     800 :                     
(3)  123/     800 :                     ;-----------------------------------------------------------------------
(3)  124/     800 :                     ; CDBIOS - Calls the BIOS with a specified function number.  Assumes
(3)  125/     800 :                     ; that all preparatory and cleanup work is done externally.
(3)  126/     800 :                     ;
(3)  127/     800 :                     ; input:
(3)  128/     800 :                     ;   fcode BIOS function code
(3)  129/     800 :                     ;
(3)  130/     800 :                     ; returns:
(3)  131/     800 :                     ;   nothing
(3)  132/     800 :                     ;-----------------------------------------------------------------------
(3)  133/     800 :                     CDBIOS macro fcode
(3)  134/     800 :                           move.w    fcode,d0
(3)  135/     800 :                           jsr       _CDBIOS
(3)  136/     800 :                           endm
(3)  137/     800 :                     
(3)  138/     800 :                     
(3)  139/     800 :                     ;-----------------------------------------------------------------------
(3)  140/     800 :                     ; BURAM - Calls the Backup Ram with a specified function number.
(3)  141/     800 :                     ; Assumes that all preparatory and cleanup work is done externally.
(3)  142/     800 :                     ;
(3)  143/     800 :                     ; input:
(3)  144/     800 :                     ;   fcode Backup Ram function code
(3)  145/     800 :                     ;
(3)  146/     800 :                     ; returns:
(3)  147/     800 :                     ;   nothing
(3)  148/     800 :                     ;-----------------------------------------------------------------------
(3)  149/     800 :                     BURAM macro fcode
(3)  150/     800 :                           move.w    fcode,d0
(3)  151/     800 :                           jsr       _BURAM
(3)  152/     800 :                           endm
(3)  153/     800 :                     
(3)  154/     800 :                     
(3)  155/     800 :                     ;-----------------------------------------------------------------------
(3)  156/     800 :                     ; DRIVE MECHANISM
(3)  157/     800 :                     ;-----------------------------------------------------------------------
(3)  158/     800 :                     
(3)  159/     800 :                     ;-----------------------------------------------------------------------
(3)  160/     800 :                     ; BIOS_DRVINIT - Closes the disk tray and reads the TOC from the CD.
(3)  161/     800 :                     ; Pauses for 2 seconds after reading the TOC.  If bit 7 of the TOC track
(3)  162/     800 :                     ; is set, the BIOS starts playing the first track automatically.  Waits
(3)  163/     800 :                     ; for a DRVOPEN request if there is no disk in the drive.
(3)  164/     800 :                     ;
(3)  165/     800 :                     ; input:
(3)  166/     800 :                     ;   a0.l  address of initialization parameters:
(3)  167/     800 :                     ;           dc.b    $01   ; Track # to read TOC from (normally $01)
(3)  168/     800 :                     ;           dc.b    $FF   ; Last track # ($FF = read all tracks)
(3)  169/     800 :                     ;
(3)  170/     800 :                     ; returns:
(3)  171/     800 :                     ;   nothing
(3)  172/     800 :                     ;-----------------------------------------------------------------------
(3)  173/     800 :                     BIOS_DRVINIT macro
(3)  174/     800 :                           CDBIOS #DRVINIT
(3)  175/     800 :                           endm
(3)  176/     800 :                     
(3)  177/     800 :                     ;-----------------------------------------------------------------------
(3)  178/     800 :                     ; BIOS_DRVOPEN - Opens the drive.
(3)  179/     800 :                     ;
(3)  180/     800 :                     ; input:
(3)  181/     800 :                     ;   none
(3)  182/     800 :                     ;
(3)  183/     800 :                     ; returns:
(3)  184/     800 :                     ;   nothing
(3)  185/     800 :                     ;-----------------------------------------------------------------------
(3)  186/     800 :                     BIOS_DRVOPEN macro
(3)  187/     800 :                           CDBIOS #DRVOPEN
(3)  188/     800 :                           endm
(3)  189/     800 :                     
(3)  190/     800 :                     
(3)  191/     800 :                     ;-----------------------------------------------------------------------
(3)  192/     800 :                     ; MUSIC
(3)  193/     800 :                     ;-----------------------------------------------------------------------
(3)  194/     800 :                     
(3)  195/     800 :                     ;-----------------------------------------------------------------------
(3)  196/     800 :                     ; BIOS_MSCSTOP - Stops playing a track if it's currently playing.
(3)  197/     800 :                     ;
(3)  198/     800 :                     ; input:
(3)  199/     800 :                     ;   none
(3)  200/     800 :                     ;
(3)  201/     800 :                     ; returns:
(3)  202/     800 :                     ;   nothing
(3)  203/     800 :                     ;-----------------------------------------------------------------------
(3)  204/     800 :                     BIOS_MSCSTOP macro
(3)  205/     800 :                           CDBIOS #MSCSTOP
(3)  206/     800 :                           endm
(3)  207/     800 :                     
(3)  208/     800 :                     ;-----------------------------------------------------------------------
(3)  209/     800 :                     ; BIOS_MSCPLAY - Starts playing at a specified track.  Continues playing
(3)  210/     800 :                     ; through subsequent tracks.
(3)  211/     800 :                     ;
(3)  212/     800 :                     ; input:
(3)  213/     800 :                     ;   a0.l  address of 16 bit track number
(3)  214/     800 :                     ;
(3)  215/     800 :                     ; returns:
(3)  216/     800 :                     ;   nothing
(3)  217/     800 :                     ;-----------------------------------------------------------------------
(3)  218/     800 :                     BIOS_MSCPLAY macro
(3)  219/     800 :                           CDBIOS #MSCPLAY
(3)  220/     800 :                           endm
(3)  221/     800 :                     
(3)  222/     800 :                     ;-----------------------------------------------------------------------
(3)  223/     800 :                     ; BIOS_MSCPLAY1 - Plays a track once and pauses.
(3)  224/     800 :                     ;
(3)  225/     800 :                     ; input:
(3)  226/     800 :                     ;   a0.l  address of a 16 bit track number
(3)  227/     800 :                     ;
(3)  228/     800 :                     ; returns:
(3)  229/     800 :                     ;   nothing
(3)  230/     800 :                     ;-----------------------------------------------------------------------
(3)  231/     800 :                     BIOS_MSCPLAY1 macro
(3)  232/     800 :                           CDBIOS #MSCPLAY1
(3)  233/     800 :                           endm
(3)  234/     800 :                     
(3)  235/     800 :                     ;-----------------------------------------------------------------------
(3)  236/     800 :                     ; BIOS_MSCPLAYR - Plays the designated track repeatedly.
(3)  237/     800 :                     ;
(3)  238/     800 :                     ; input:
(3)  239/     800 :                     ;   a0.l  address of a 16 bit track number
(3)  240/     800 :                     ;
(3)  241/     800 :                     ; returns:
(3)  242/     800 :                     ;   nothing
(3)  243/     800 :                     ;-----------------------------------------------------------------------
(3)  244/     800 :                     BIOS_MSCPLAYR macro
(3)  245/     800 :                           CDBIOS #MSCPLAYR
(3)  246/     800 :                           endm
(3)  247/     800 :                     
(3)  248/     800 :                     ;-----------------------------------------------------------------------
(3)  249/     800 :                     ; BIOS_MSCPLAYT - Starts playing from a specified time.
(3)  250/     800 :                     ;
(3)  251/     800 :                     ; input:
(3)  252/     800 :                     ;   a0.l  address of a 32 bit BCD time code in the format mm:ss:ff:00
(3)  253/     800 :                     ;
(3)  254/     800 :                     ; returns:
(3)  255/     800 :                     ;   nothing
(3)  256/     800 :                     ;-----------------------------------------------------------------------
(3)  257/     800 :                     BIOS_MSCPLAYT macro
(3)  258/     800 :                           CDBIOS #MSCPLAYT
(3)  259/     800 :                           endm
(3)  260/     800 :                     
(3)  261/     800 :                     ;-----------------------------------------------------------------------
(3)  262/     800 :                     ; BIOS_MSCSEEK - Seeks to the beginning of the selected track and pauses.
(3)  263/     800 :                     ;
(3)  264/     800 :                     ; input:
(3)  265/     800 :                     ;   a0.l  address of a 16 bit track number
(3)  266/     800 :                     ;
(3)  267/     800 :                     ; returns:
(3)  268/     800 :                     ;   nothing
(3)  269/     800 :                     ;-----------------------------------------------------------------------
(3)  270/     800 :                     BIOS_MSCSEEK macro
(3)  271/     800 :                           CDBIOS #MSCSEEK
(3)  272/     800 :                           endm
(3)  273/     800 :                     
(3)  274/     800 :                     ;-----------------------------------------------------------------------
(3)  275/     800 :                     ; BIOS_MSCSEEK1 - Seeks to the beginning of the selected track and pauses.
(3)  276/     800 :                     ; Once the BIOS detects a pause state, it plays the track once.
(3)  277/     800 :                     ;
(3)  278/     800 :                     ; input:
(3)  279/     800 :                     ;   a0.l  address of a 16 bit track number
(3)  280/     800 :                     ;
(3)  281/     800 :                     ; returns:
(3)  282/     800 :                     ;   nothing
(3)  283/     800 :                     ;-----------------------------------------------------------------------
(3)  284/     800 :                     BIOS_MSCSEEK1 macro
(3)  285/     800 :                           CDBIOS #MSCSEEK1
(3)  286/     800 :                           endm
(3)  287/     800 :                     
(3)  288/     800 :                     ;-----------------------------------------------------------------------
(3)  289/     800 :                     ; BIOS_MSCSEEKT - Seeks to a specified time.
(3)  290/     800 :                     ;
(3)  291/     800 :                     ; input:
(3)  292/     800 :                     ;   a0.l  address of a 32 bit BCD time code in the format mm:ss:ff:00
(3)  293/     800 :                     ;
(3)  294/     800 :                     ; returns:
(3)  295/     800 :                     ;   nothing
(3)  296/     800 :                     ;-----------------------------------------------------------------------
(3)  297/     800 :                     BIOS_MSCSEEKT macro
(3)  298/     800 :                           CDBIOS #MSCSEEKT
(3)  299/     800 :                           endm
(3)  300/     800 :                     
(3)  301/     800 :                     ;-----------------------------------------------------------------------
(3)  302/     800 :                     ; BIOS_MSCPAUSEON - Pauses the drive when a track is playing.  If the
(3)  303/     800 :                     ; drive is left paused it will stop after a programmable delay (see
(3)  304/     800 :                     ; CDBPAUSE).
(3)  305/     800 :                     ;
(3)  306/     800 :                     ; input:
(3)  307/     800 :                     ;   none
(3)  308/     800 :                     ;
(3)  309/     800 :                     ; returns:
(3)  310/     800 :                     ;   nothing
(3)  311/     800 :                     ;-----------------------------------------------------------------------
(3)  312/     800 :                     BIOS_MSCPAUSEON macro
(3)  313/     800 :                           CDBIOS #MSCPAUSEON
(3)  314/     800 :                           endm
(3)  315/     800 :                     
(3)  316/     800 :                     ;-----------------------------------------------------------------------
(3)  317/     800 :                     ; BIOS_MSCPAUSEOFF - Resumes playing a track after a pause.  If the drive
(3)  318/     800 :                     ; has timed out and stopped, the BIOS will seek to the pause time (with
(3)  319/     800 :                     ; the attendant delay) and resume playing.
(3)  320/     800 :                     ;
(3)  321/     800 :                     ; input:
(3)  322/     800 :                     ;   none
(3)  323/     800 :                     ;
(3)  324/     800 :                     ; returns:
(3)  325/     800 :                     ;   nothing
(3)  326/     800 :                     ;-----------------------------------------------------------------------
(3)  327/     800 :                     BIOS_MSCPAUSEOFF macro
(3)  328/     800 :                           CDBIOS #MSCPAUSEOFF
(3)  329/     800 :                           endm
(3)  330/     800 :                     
(3)  331/     800 :                     ;-----------------------------------------------------------------------
(3)  332/     800 :                     ; BIOS_MSCSCANFF - Starts playing from the current position in fast
(3)  333/     800 :                     ; forward.
(3)  334/     800 :                     ;
(3)  335/     800 :                     ; input:
(3)  336/     800 :                     ;   none
(3)  337/     800 :                     ;
(3)  338/     800 :                     ; returns:
(3)  339/     800 :                     ;   nothing
(3)  340/     800 :                     ;-----------------------------------------------------------------------
(3)  341/     800 :                     BIOS_MSCSCANFF macro
(3)  342/     800 :                           CDBIOS #MSCSCANFF
(3)  343/     800 :                           endm
(3)  344/     800 :                     
(3)  345/     800 :                     ;-----------------------------------------------------------------------
(3)  346/     800 :                     ; BIOS_MSCSCANFR - Same as MSCSCANFF, but backwards.
(3)  347/     800 :                     ;
(3)  348/     800 :                     ; input:
(3)  349/     800 :                     ;   none
(3)  350/     800 :                     ;
(3)  351/     800 :                     ; returns:
(3)  352/     800 :                     ;   nothing
(3)  353/     800 :                     ;-----------------------------------------------------------------------
(3)  354/     800 :                     BIOS_MSCSCANFR macro
(3)  355/     800 :                           CDBIOS #MSCSCANFR
(3)  356/     800 :                           endm
(3)  357/     800 :                     
(3)  358/     800 :                     ;-----------------------------------------------------------------------
(3)  359/     800 :                     ; BIOS_MSCSCANOFF - Returns to normal play mode.  If the drive was
(3)  360/     800 :                     ; paused before the scan was initiated, it will be returned to pause.
(3)  361/     800 :                     ;
(3)  362/     800 :                     ; input:
(3)  363/     800 :                     ;   none
(3)  364/     800 :                     ;
(3)  365/     800 :                     ; returns:
(3)  366/     800 :                     ;   nothing
(3)  367/     800 :                     ;-----------------------------------------------------------------------
(3)  368/     800 :                     BIOS_MSCSCANOFF macro
(3)  369/     800 :                           CDBIOS #MSCSCANOFF
(3)  370/     800 :                           endm
(3)  371/     800 :                     
(3)  372/     800 :                     
(3)  373/     800 :                     ;-----------------------------------------------------------------------
(3)  374/     800 :                     ; CD-ROM
(3)  375/     800 :                     ;-----------------------------------------------------------------------
(3)  376/     800 :                     
(3)  377/     800 :                     ;-----------------------------------------------------------------------
(3)  378/     800 :                     ; BIOS_ROMREAD - Begins reading data from the CDROM at the designated
(3)  379/     800 :                     ; logical sector.  Executes a CDCSTART to begin the read, but doesn't
(3)  380/     800 :                     ; stop automatically.
(3)  381/     800 :                     ;
(3)  382/     800 :                     ; Note - ROMREAD actually pre-seeks by 2 sectors, but doesn't start
(3)  383/     800 :                     ; passing data to the CDC until the desired sector is reached.
(3)  384/     800 :                     ;
(3)  385/     800 :                     ; input:
(3)  386/     800 :                     ;   a0.l  address of a 32 bit logical sector number
(3)  387/     800 :                     ;
(3)  388/     800 :                     ; returns:
(3)  389/     800 :                     ;   nothing
(3)  390/     800 :                     ;-----------------------------------------------------------------------
(3)  391/     800 :                     BIOS_ROMREAD macro
(3)  392/     800 :                           CDBIOS #ROMREAD
(3)  393/     800 :                           endm
(3)  394/     800 :                     
(3)  395/     800 :                     ;-----------------------------------------------------------------------
(3)  396/     800 :                     ; BIOS_ROMREADN - Same as ROMREAD, but stops after reading the requested
(3)  397/     800 :                     ; number of sectors.
(3)  398/     800 :                     ;
(3)  399/     800 :                     ; input:
(3)  400/     800 :                     ;   a0.l  address of a 32 bit sector number and 32 bit sector count
(3)  401/     800 :                     ;           dc.l    $00000001   ; First sector to read
(3)  402/     800 :                     ;           dc.l    $00001234   ; Number of sectors to read
(3)  403/     800 :                     ;
(3)  404/     800 :                     ; returns:
(3)  405/     800 :                     ;   nothing
(3)  406/     800 :                     ;-----------------------------------------------------------------------
(3)  407/     800 :                     BIOS_ROMREADN macro
(3)  408/     800 :                           CDBIOS #ROMREADN
(3)  409/     800 :                           endm
(3)  410/     800 :                     
(3)  411/     800 :                     ;-----------------------------------------------------------------------
(3)  412/     800 :                     ; BIOS_ROMREADE - Same as ROMREAD, but reads between two logical sectors.
(3)  413/     800 :                     ;
(3)  414/     800 :                     ; input:
(3)  415/     800 :                     ;   a0.l  address of table of 32 bit logical sector numbers
(3)  416/     800 :                     ;           dc.l    $00000001   ; First sector to read
(3)  417/     800 :                     ;           dc.l    $00000123   ; Last sector to read
(3)  418/     800 :                     ;
(3)  419/     800 :                     ; returns:
(3)  420/     800 :                     ;   nothing
(3)  421/     800 :                     ;-----------------------------------------------------------------------
(3)  422/     800 :                     BIOS_ROMREADE macro
(3)  423/     800 :                           CDBIOS #ROMREADE
(3)  424/     800 :                           endm
(3)  425/     800 :                     
(3)  426/     800 :                     ;-----------------------------------------------------------------------
(3)  427/     800 :                     ; BIOS_ROMSEEK - Seeks to the designated logical sector and pauses.
(3)  428/     800 :                     ;
(3)  429/     800 :                     ; input:
(3)  430/     800 :                     ;   a0.l  address of a 32 bit logical sector number
(3)  431/     800 :                     ;
(3)  432/     800 :                     ; returns:
(3)  433/     800 :                     ;   nothing
(3)  434/     800 :                     ;-----------------------------------------------------------------------
(3)  435/     800 :                     BIOS_ROMSEEK macro
(3)  436/     800 :                           CDBIOS #ROMSEEK
(3)  437/     800 :                           endm
(3)  438/     800 :                     
(3)  439/     800 :                     ;-----------------------------------------------------------------------
(3)  440/     800 :                     ; BIOS_ROMPAUSEON - Stops reading data into the CDC and pauses.
(3)  441/     800 :                     ;
(3)  442/     800 :                     ; input:
(3)  443/     800 :                     ;   none
(3)  444/     800 :                     ;
(3)  445/     800 :                     ; returns:
(3)  446/     800 :                     ;   nothing
(3)  447/     800 :                     ;-----------------------------------------------------------------------
(3)  448/     800 :                     BIOS_ROMPAUSEON macro
(3)  449/     800 :                           CDBIOS #ROMPAUSEON
(3)  450/     800 :                           endm
(3)  451/     800 :                     
(3)  452/     800 :                     ;-----------------------------------------------------------------------
(3)  453/     800 :                     ; BIOS_ROMPAUSEOFF - Resumes reading data into the CDC from the current
(3)  454/     800 :                     ; logical sector.
(3)  455/     800 :                     ;
(3)  456/     800 :                     ; input:
(3)  457/     800 :                     ;   none
(3)  458/     800 :                     ;
(3)  459/     800 :                     ; returns:
(3)  460/     800 :                     ;   nothing
(3)  461/     800 :                     ;-----------------------------------------------------------------------
(3)  462/     800 :                     BIOS_ROMPAUSEOFF macro
(3)  463/     800 :                           CDBIOS #ROMPAUSEOFF
(3)  464/     800 :                           endm
(3)  465/     800 :                     
(3)  466/     800 :                     
(3)  467/     800 :                     ;-----------------------------------------------------------------------
(3)  468/     800 :                     ; MISC BIOS FUNCTIONS
(3)  469/     800 :                     ;-----------------------------------------------------------------------
(3)  470/     800 :                     
(3)  471/     800 :                     ;-----------------------------------------------------------------------
(3)  472/     800 :                     ; BIOS_CDBCHK - Querys the BIOS on the status of the last command.
(3)  473/     800 :                     ; Returns success if the command has been executed, not if it's complete.
(3)  474/     800 :                     ; This means that CDBCHK will return success on a seek command once the
(3)  475/     800 :                     ; seek has started, NOT when the seek is actually finished.
(3)  476/     800 :                     ;
(3)  477/     800 :                     ; input:
(3)  478/     800 :                     ;   none
(3)  479/     800 :                     ;
(3)  480/     800 :                     ; returns:
(3)  481/     800 :                     ;   cc  Command has been executed
(3)  482/     800 :                     ;   cs  BIOS is busy
(3)  483/     800 :                     ;-----------------------------------------------------------------------
(3)  484/     800 :                     BIOS_CDBCHK macro
(3)  485/     800 :                           CDBIOS #CDBCHK
(3)  486/     800 :                           endm
(3)  487/     800 :                     
(3)  488/     800 :                     ;-----------------------------------------------------------------------
(3)  489/     800 :                     ; BIOS_CDBSTAT
(3)  490/     800 :                     ;
(3)  491/     800 :                     ; input:
(3)  492/     800 :                     ;   none
(3)  493/     800 :                     ;
(3)  494/     800 :                     ; returns:
(3)  495/     800 :                     ;   a0.l  address of BIOS status table
(3)  496/     800 :                     ;-----------------------------------------------------------------------
(3)  497/     800 :                     BIOS_CDBSTAT macro
(3)  498/     800 :                           CDBIOS #CDBSTAT
(3)  499/     800 :                           endm
(3)  500/     800 :                     
(3)  501/     800 :                     ;-----------------------------------------------------------------------
(3)  502/     800 :                     ; BIOS_CDBTOCREAD - Gets the time for the specified track from the TOC.
(3)  503/     800 :                     ; If the track isn't in the TOC, the BIOS will either return the time of
(3)  504/     800 :                     ; the last track read or the beginning of the disk.  Don't call this
(3)  505/     800 :                     ; function while the BIOS is loading the TOC (see DRVINIT).
(3)  506/     800 :                     ;
(3)  507/     800 :                     ; input:
(3)  508/     800 :                     ;   d1.w  16 bit track number
(3)  509/     800 :                     ;
(3)  510/     800 :                     ; returns:
(3)  511/     800 :                     ;   d0.l  BCD time of requested track in mm:ss:ff:## format where ## is
(3)  512/     800 :                     ;         the requested track number or 00 if there was an error
(3)  513/     800 :                     ;
(3)  514/     800 :                     ;   d1.b  Track type:
(3)  515/     800 :                     ;           $00 = CD-DA track
(3)  516/     800 :                     ;           $FF = CD-ROM track
(3)  517/     800 :                     ;-----------------------------------------------------------------------
(3)  518/     800 :                     BIOS_CDBTOCREAD macro
(3)  519/     800 :                           CDBIOS #CDBTOCREAD
(3)  520/     800 :                           endm
(3)  521/     800 :                     
(3)  522/     800 :                     ;-----------------------------------------------------------------------
(3)  523/     800 :                     ; BIOS_CDBTOCWRITE - Writes data to the TOC in memory.  Don't write to
(3)  524/     800 :                     ; the TOC while the BIOS is performing a DRVINIT.
(3)  525/     800 :                     ;
(3)  526/     800 :                     ; input:
(3)  527/     800 :                     ;   a0.l  address of a table of TOC entries to write to the TOC.  Format
(3)  528/     800 :                     ;         of the entries is mm:ss:ff:## where ## is the track number.
(3)  529/     800 :                     ;
(3)  530/     800 :                     ; returns:
(3)  531/     800 :                     ;   nothing
(3)  532/     800 :                     ;-----------------------------------------------------------------------
(3)  533/     800 :                     BIOS_CDBTOCWRITE macro
(3)  534/     800 :                           CDBIOS #CDBTOCWRITE
(3)  535/     800 :                           endm
(3)  536/     800 :                     
(3)  537/     800 :                     ;-----------------------------------------------------------------------
(3)  538/     800 :                     ; BIOS_CDBPAUSE - Sets the delay time before the BIOS switches from
(3)  539/     800 :                     ; pause to standby.  Normal ranges for this delay time are $1194 - $FFFE.
(3)  540/     800 :                     ; A delay of $FFFF prevents the drive from stopping, but can  damage the
(3)  541/     800 :                     ; drive if used improperly.
(3)  542/     800 :                     ;
(3)  543/     800 :                     ; input:
(3)  544/     800 :                     ;   d1.w  16 bit delay time
(3)  545/     800 :                     ;
(3)  546/     800 :                     ; returns:
(3)  547/     800 :                     ;   nothing
(3)  548/     800 :                     ;-----------------------------------------------------------------------
(3)  549/     800 :                     BIOS_CDBPAUSE macro
(3)  550/     800 :                           CDBIOS #CDBPAUSE
(3)  551/     800 :                           endm
(3)  552/     800 :                     
(3)  553/     800 :                     
(3)  554/     800 :                     ;-----------------------------------------------------------------------
(3)  555/     800 :                     ; FADER
(3)  556/     800 :                     ;-----------------------------------------------------------------------
(3)  557/     800 :                     
(3)  558/     800 :                     ;-----------------------------------------------------------------------
(3)  559/     800 :                     ; BIOS_FDRSET - Sets the audio volume.  If bit 15 of the volume parameter
(3)  560/     800 :                     ; is 1, sets the master volume level.  There's a delay of up to 13ms
(3)  561/     800 :                     ; before the volume begins to change and another 23ms for the new volume
(3)  562/     800 :                     ; level to take effect.  The master volume sets a maximum level which the
(3)  563/     800 :                     ; volume level can't exceed.
(3)  564/     800 :                     ;
(3)  565/     800 :                     ; input:
(3)  566/     800 :                     ;   d1.w  16 bit volume         ($0000 = min    $0400 = max)
(3)  567/     800 :                     ;         16 bit master volume  ($8000 = min    $8400 = max)
(3)  568/     800 :                     ;
(3)  569/     800 :                     ; returns:
(3)  570/     800 :                     ;   nothing
(3)  571/     800 :                     ;-----------------------------------------------------------------------
(3)  572/     800 :                     BIOS_FDRSET macro
(3)  573/     800 :                           CDBIOS #FDRSET
(3)  574/     800 :                           endm
(3)  575/     800 :                     
(3)  576/     800 :                     ;-----------------------------------------------------------------------
(3)  577/     800 :                     ; BIOS_FDRCHG - Ramps the audio volume from its current level to a new
(3)  578/     800 :                     ; level at the requested rate.  As in FDRSET, there's a delay of up to
(3)  579/     800 :                     ; 13ms before the change starts.
(3)  580/     800 :                     ;
(3)  581/     800 :                     ; input:
(3)  582/     800 :                     ;   d1.l  32 bit volume change
(3)  583/     800 :                     ;         high word:  new 16 bit volume   ($0000 = min    $0400 = max)
(3)  584/     800 :                     ;         low word:   16 bit rate in steps/vblank
(3)  585/     800 :                     ;                     $0001 = slow
(3)  586/     800 :                     ;                     $0200 = fast
(3)  587/     800 :                     ;                     $0400 = set immediately
(3)  588/     800 :                     ;
(3)  589/     800 :                     ; returns:
(3)  590/     800 :                     ;   nothing
(3)  591/     800 :                     ;-----------------------------------------------------------------------
(3)  592/     800 :                     BIOS_FDRCHG macro
(3)  593/     800 :                           CDBIOS #FDRCHG
(3)  594/     800 :                           endm
(3)  595/     800 :                     
(3)  596/     800 :                     
(3)  597/     800 :                     ;-----------------------------------------------------------------------
(3)  598/     800 :                     ; CDC
(3)  599/     800 :                     ;-----------------------------------------------------------------------
(3)  600/     800 :                     
(3)  601/     800 :                     ;-----------------------------------------------------------------------
(3)  602/     800 :                     ; BIOS_CDCSTART - Starts reading data from the current logical sector
(3)  603/     800 :                     ; into the CDC.  The BIOS pre-seeks by 2 to 4 sectors and data read
(3)  604/     800 :                     ; actually begins before the requested sector.  It's up to the caller
(3)  605/     800 :                     ; to identify the correct starting sector (usually by checking the time
(3)  606/     800 :                     ; codes in the headers as they're read from the CDC buffer).
(3)  607/     800 :                     ;
(3)  608/     800 :                     ; input:
(3)  609/     800 :                     ;   none
(3)  610/     800 :                     ;
(3)  611/     800 :                     ; returns:
(3)  612/     800 :                     ;   nothing
(3)  613/     800 :                     ;-----------------------------------------------------------------------
(3)  614/     800 :                     BIOS_CDCSTART macro
(3)  615/     800 :                           CDBIOS #CDCSTART
(3)  616/     800 :                           endm
(3)  617/     800 :                     
(3)  618/     800 :                     ;-----------------------------------------------------------------------
(3)  619/     800 :                     ; BIOS_CDCSTOP - Stops reading data into the CDC.  If a sector is being
(3)  620/     800 :                     ; read when CDCSTOP is called, it's lost.
(3)  621/     800 :                     ;
(3)  622/     800 :                     ; input:
(3)  623/     800 :                     ;   none
(3)  624/     800 :                     ;
(3)  625/     800 :                     ; returns:
(3)  626/     800 :                     ;   nothing
(3)  627/     800 :                     ;-----------------------------------------------------------------------
(3)  628/     800 :                     BIOS_CDCSTOP macro
(3)  629/     800 :                           CDBIOS #CDCSTOP
(3)  630/     800 :                           endm
(3)  631/     800 :                     
(3)  632/     800 :                     ;-----------------------------------------------------------------------
(3)  633/     800 :                     ; BIOS_CDCSTAT - Queries the CDC buffer.  If no sector is ready for
(3)  634/     800 :                     ; read, the carry bit will be set.  Up to 5 sectors can be buffered in
(3)  635/     800 :                     ; the CDC buffer.
(3)  636/     800 :                     ;
(3)  637/     800 :                     ; input:
(3)  638/     800 :                     ;   none
(3)  639/     800 :                     ;
(3)  640/     800 :                     ; returns:
(3)  641/     800 :                     ;   cc  Sector available for read
(3)  642/     800 :                     ;   cs  No sectors available
(3)  643/     800 :                     ;-----------------------------------------------------------------------
(3)  644/     800 :                     BIOS_CDCSTAT macro
(3)  645/     800 :                           CDBIOS #CDCSTAT
(3)  646/     800 :                           endm
(3)  647/     800 :                     
(3)  648/     800 :                     ;-----------------------------------------------------------------------
(3)  649/     800 :                     ; BIOS_CDCREAD - If a sector is ready in the CDC buffer, the BIOS
(3)  650/     800 :                     ; prepares to send the sector to the current device destination.  Make
(3)  651/     800 :                     ; sure to set the device destination BEFORE calling CDCREAD.  If a
(3)  652/     800 :                     ; sector is ready, the carry bit will be cleared on return and it's
(3)  653/     800 :                     ; necessary to respond with a call to CDCACK.
(3)  654/     800 :                     ;
(3)  655/     800 :                     ; input:
(3)  656/     800 :                     ;   none
(3)  657/     800 :                     ;
(3)  658/     800 :                     ; returns:
(3)  659/     800 :                     ;   cc    Sector ready for transfer
(3)  660/     800 :                     ;   d0.l  Sector header in BCD mm:ss:ff:md format where md is sector mode
(3)  661/     800 :                     ;           $00 = CD-DA
(3)  662/     800 :                     ;           $01 = CD-ROM mode 1
(3)  663/     800 :                     ;           $02 = CD-ROM mode 2
(3)  664/     800 :                     ;   cs    Sector not ready
(3)  665/     800 :                     ;-----------------------------------------------------------------------
(3)  666/     800 :                     BIOS_CDCREAD macro
(3)  667/     800 :                           CDBIOS #CDCREAD
(3)  668/     800 :                           endm
(3)  669/     800 :                     
(3)  670/     800 :                     ;-----------------------------------------------------------------------
(3)  671/     800 :                     ; BIOS_CDCTRN - Uses the Sub-CPU to read one sector into RAM.  The
(3)  672/     800 :                     ; device destination must be set to SUB-CPU read before calling CDCTRN.
(3)  673/     800 :                     ;
(3)  674/     800 :                     ; input:
(3)  675/     800 :                     ;   a0.l  address of sector destination buffer (at least 2336 bytes)
(3)  676/     800 :                     ;   a1.l  address of header destination buffer (at least 4 bytes)
(3)  677/     800 :                     ;
(3)  678/     800 :                     ; returns:
(3)  679/     800 :                     ;   cc    Sector successfully transferred
(3)  680/     800 :                     ;   cs    Transfer failed
(3)  681/     800 :                     ;   a0.l  Next sector destination address (a0 + 2336)
(3)  682/     800 :                     ;   a1.l  Next header destination address (a1 + 4)
(3)  683/     800 :                     ;-----------------------------------------------------------------------
(3)  684/     800 :                     BIOS_CDCTRN macro
(3)  685/     800 :                           CDBIOS #CDCTRN
(3)  686/     800 :                           endm
(3)  687/     800 :                     
(3)  688/     800 :                     ;-----------------------------------------------------------------------
(3)  689/     800 :                     ; BIOS_CDCACK - Informs the CDC that the current sector has been read
(3)  690/     800 :                     ; and the caller is ready for the next sector.
(3)  691/     800 :                     ;
(3)  692/     800 :                     ; input:
(3)  693/     800 :                     ;   none
(3)  694/     800 :                     ;
(3)  695/     800 :                     ; returns:
(3)  696/     800 :                     ;   nothing
(3)  697/     800 :                     ;-----------------------------------------------------------------------
(3)  698/     800 :                     BIOS_CDCACK macro
(3)  699/     800 :                           CDBIOS #CDCACK
(3)  700/     800 :                           endm
(3)  701/     800 :                     
(3)  702/     800 :                     
(3)  703/     800 :                     ;-----------------------------------------------------------------------
(3)  704/     800 :                     ; BIOS_CDCSETMODE - Tells the BIOS which mode to read the CD in.  Accepts
(3)  705/     800 :                     ; bit flags that allow selection of the three basic CD modes as follows:
(3)  706/     800 :                     ;
(3)  707/     800 :                     ;       Mode 0 (CD-DA)                              2
(3)  708/     800 :                     ;       Mode 1 (CD-ROM with full error correction)  0
(3)  709/     800 :                     ;       Mode 2 (CD-ROM with CRC only)               1
(3)  710/     800 :                     ;
(3)  711/     800 :                     ; input:
(3)  712/     800 :                     ;   d1.w  FEDCBA9876543210
(3)  713/     800 :                     ;                     ||||
(3)  714/     800 :                     ;                     |||+--> CD Mode 2
(3)  715/     800 :                     ;                     ||+---> CD-DA mode
(3)  716/     800 :                     ;                     |+----> transfer error block with data
(3)  717/     800 :                     ;                     +-----> re-read last data
(3)  718/     800 :                     ;
(3)  719/     800 :                     ; returns:
(3)  720/     800 :                     ;   nothing
(3)  721/     800 :                     ;-----------------------------------------------------------------------
(3)  722/     800 :                     BIOS_CDCSETMODE macro
(3)  723/     800 :                           CDBIOS #CDCSETMODE
(3)  724/     800 :                           endm
(3)  725/     800 :                     
(3)  726/     800 :                     
(3)  727/     800 :                     ;-----------------------------------------------------------------------
(3)  728/     800 :                     ; SUBCODES
(3)  729/     800 :                     ;-----------------------------------------------------------------------
(3)  730/     800 :                     
(3)  731/     800 :                     ;-----------------------------------------------------------------------
(3)  732/     800 :                     ; BIOS_SCDINIT - Initializes the BIOS for subcode reads.
(3)  733/     800 :                     ;
(3)  734/     800 :                     ; input:
(3)  735/     800 :                     ;   a0.l  address of scratch buffer (at least $750 long)
(3)  736/     800 :                     ;
(3)  737/     800 :                     ; returns:
(3)  738/     800 :                     ;   nothing
(3)  739/     800 :                     ;-----------------------------------------------------------------------
(3)  740/     800 :                     BIOS_SCDINIT macro
(3)  741/     800 :                           CDBIOS #SCDINIT
(3)  742/     800 :                           endm
(3)  743/     800 :                     
(3)  744/     800 :                     ;-----------------------------------------------------------------------
(3)  745/     800 :                     ; BIOS_SCDSTART - Enables reading of subcode data by the CDC.
(3)  746/     800 :                     ;
(3)  747/     800 :                     ; input:
(3)  748/     800 :                     ;   d1.w  Subcode processing mode
(3)  749/     800 :                     ;           0 = --------
(3)  750/     800 :                     ;           1 = --RSTUVW
(3)  751/     800 :                     ;           2 = PQ------
(3)  752/     800 :                     ;           3 = PQRSTUVW
(3)  753/     800 :                     ;
(3)  754/     800 :                     ; returns:
(3)  755/     800 :                     ;   nothing
(3)  756/     800 :                     ;-----------------------------------------------------------------------
(3)  757/     800 :                     BIOS_SCDSTART macro
(3)  758/     800 :                           CDBIOS #SCDSTART
(3)  759/     800 :                           endm
(3)  760/     800 :                     
(3)  761/     800 :                     ;-----------------------------------------------------------------------
(3)  762/     800 :                     ; BIOS_SCDSTOP - Disables reading of subcode data by the CDC.
(3)  763/     800 :                     ;
(3)  764/     800 :                     ; input:
(3)  765/     800 :                     ;   none
(3)  766/     800 :                     ;
(3)  767/     800 :                     ; returns:
(3)  768/     800 :                     ;   nothing
(3)  769/     800 :                     ;-----------------------------------------------------------------------
(3)  770/     800 :                     BIOS_SCDSTOP macro
(3)  771/     800 :                           CDBIOS #SCDSTOP
(3)  772/     800 :                           endm
(3)  773/     800 :                     
(3)  774/     800 :                     ;-----------------------------------------------------------------------
(3)  775/     800 :                     ; BIOS_SCDSTAT - Checks subcode error status.
(3)  776/     800 :                     ;
(3)  777/     800 :                     ; input:
(3)  778/     800 :                     ;   none
(3)  779/     800 :                     ;
(3)  780/     800 :                     ; returns:
(3)  781/     800 :                     ;   d0.l  errqcodecrc / errpackcirc / scdflag / restrcnt
(3)  782/     800 :                     ;   d1.l  erroverrun / errpacketbufful / errqcodefufful / errpackfufful
(3)  783/     800 :                     ;-----------------------------------------------------------------------
(3)  784/     800 :                     BIOS_SCDSTAT macro
(3)  785/     800 :                           CDBIOS #SCDSTAT
(3)  786/     800 :                           endm
(3)  787/     800 :                     
(3)  788/     800 :                     ;-----------------------------------------------------------------------
(3)  789/     800 :                     ; BIOS_SCDREAD - Reads R through W subcode channels.
(3)  790/     800 :                     ;
(3)  791/     800 :                     ; input:
(3)  792/     800 :                     ;   a0.l  address of subcode buffer (24 bytes minimum)
(3)  793/     800 :                     ;
(3)  794/     800 :                     ; returns:
(3)  795/     800 :                     ;   cc    Read successful
(3)  796/     800 :                     ;   cs    Read failed
(3)  797/     800 :                     ;   a0.l  address of next subcode buffer (a0.l + 24)
(3)  798/     800 :                     ;-----------------------------------------------------------------------
(3)  799/     800 :                     BIOS_SCDREAD macro
(3)  800/     800 :                           CDBIOS #SCDREAD
(3)  801/     800 :                           endm
(3)  802/     800 :                     
(3)  803/     800 :                     ;-----------------------------------------------------------------------
(3)  804/     800 :                     ; BIOS_SCDPQ - Gets P & Q codes from subcode.
(3)  805/     800 :                     ;
(3)  806/     800 :                     ; input:
(3)  807/     800 :                     ;   a0.l  address of Q code buffer (12 bytes minimum)
(3)  808/     800 :                     ;
(3)  809/     800 :                     ; returns:
(3)  810/     800 :                     ;   cc    Read successful
(3)  811/     800 :                     ;   cs    Read failed
(3)  812/     800 :                     ;   a0.l  address of next Q code buffer (a0.l + 12)
(3)  813/     800 :                     ;-----------------------------------------------------------------------
(3)  814/     800 :                     BIOS_SCDPQ macro
(3)  815/     800 :                           CDBIOS #SCDPQ
(3)  816/     800 :                           endm
(3)  817/     800 :                     
(3)  818/     800 :                     ;-----------------------------------------------------------------------
(3)  819/     800 :                     ; BIOS_SCDPQL - Gets the last P & Q codes.
(3)  820/     800 :                     ;
(3)  821/     800 :                     ; input:
(3)  822/     800 :                     ;   a0.l  address of Q code buffer (12 bytes minimum)
(3)  823/     800 :                     ;
(3)  824/     800 :                     ; returns:
(3)  825/     800 :                     ;   cc    Read successful
(3)  826/     800 :                     ;   cs    Read failed
(3)  827/     800 :                     ;   a0.l  address of next Q code buffer (a0.l + 12)
(3)  828/     800 :                     ;-----------------------------------------------------------------------
(3)  829/     800 :                     BIOS_SCDPQL macro
(3)  830/     800 :                           CDBIOS #SCDPQL
(3)  831/     800 :                           endm
(3)  832/     800 :                     
(3)  833/     800 :                     
(3)  834/     800 :                     ;-----------------------------------------------------------------------
(3)  835/     800 :                     ; FRONT PANEL LEDS
(3)  836/     800 :                     ;-----------------------------------------------------------------------
(3)  837/     800 :                     
(3)  838/     800 :                     ;-----------------------------------------------------------------------
(3)  839/     800 :                     ; BIOS_LEDSET - Controls the Ready and Access LED's on the front panel
(3)  840/     800 :                     ; of the CD unit.
(3)  841/     800 :                     ;
(3)  842/     800 :                     ; input:
(3)  843/     800 :                     ;   d1.w  MODE          Ready (green)   Access (red)    System Indication
(3)  844/     800 :                     ;         ---------------------------------------------------------------
(3)  845/     800 :                     ;                           off             off         only at reset
(3)  846/     800 :                     ;         LEDREADY (0)      on              blink       CD ready / no disk
(3)  847/     800 :                     ;         LEDDISCIN (1)     on              off         CD ready / disk ok
(3)  848/     800 :                     ;         LEDACCESS (2)     on              on          CD accessing
(3)  849/     800 :                     ;         LEDSTANDBY (3)    blink           off         standby mode
(3)  850/     800 :                     ;         LEDERROR (4)      blink           blink       reserved
(3)  851/     800 :                     ;         LEDMODE5 (5)      blink           on          reserved
(3)  852/     800 :                     ;         LEDMODE6 (6)      off             blink       reserved
(3)  853/     800 :                     ;         LEDMODE7 (7)      off             on          reserved
(3)  854/     800 :                     ;         LEDSYSTEM (?)                                 rtn ctrl to BIOS
(3)  855/     800 :                     ;
(3)  856/     800 :                     ; returns:
(3)  857/     800 :                     ;   nothing
(3)  858/     800 :                     ;-----------------------------------------------------------------------
(3)  859/     800 :                     BIOS_LEDSET macro
(3)  860/     800 :                           CDBIOS #LEDSET
(3)  861/     800 :                           endm
(3)  862/     800 :                     
(3)  863/     800 :                     
(3)  864/     800 :                     ;-----------------------------------------------------------------------
(3)  865/     800 :                     ; Back-Up RAM
(3)  866/     800 :                     ;-----------------------------------------------------------------------
(3)  867/     800 :                     
(3)  868/     800 :                     
(3)  869/     800 :                     ;-----------------------------------------------------------------------
(3)  870/     800 :                     ; NOTE:  The backup ram on the super target devlopment systems is write
(3)  871/     800 :                     ;         protected if the production Boot Rom is being used.  A
(3)  872/     800 :                     ;         Development Boot Rom must be obtained before the backup ram can
(3)  873/     800 :                     ;         be used.
(3)  874/     800 :                     ;
(3)  875/     800 :                     ;        The name of the save game files must be registered with SOJ before
(3)  876/     800 :                     ;         a game can be shipped.
(3)  877/     800 :                     ;
(3)  878/     800 :                     ;        Please make sure to read the CD Software Standards section in the
(3)  879/     800 :                     ;         manual.  There is a section on backup ram standards that must be
(3)  880/     800 :                     ;         followed.
(3)  881/     800 :                     ;
(3)  882/     800 :                     ;        For a full description of each Back-Up Ram function, see the BIOS
(3)  883/     800 :                     ;         section of the CD manual.
(3)  884/     800 :                     ;
(3)  885/     800 :                     ;        Some of the Back-Up RAM functions require a string buffer to
(3)  886/     800 :                     ;         be passed into the function.  Some of these functions return
(3)  887/     800 :                     ;         0 terminated text strings.
(3)  888/     800 :                     ;-------------------------------------------------------------------------
(3)  889/     800 :                     
(3)  890/     800 :                     
(3)  891/     800 :                     ;-----------------------------------------------------------------------
(3)  892/     800 :                     ; BIOS_BRMINIT - Prepares to write into and read from Back-Up Ram.
(3)  893/     800 :                     ;
(3)  894/     800 :                     ; input:
(3)  895/     800 :                     ;   a0.l  pointer to scratch ram (size $640 bytes).
(3)  896/     800 :                     ;
(3)  897/     800 :                     ;   a1.l  pointer to the buffer for display strings (size: 12 bytes)
(3)  898/     800 :                     ;
(3)  899/     800 :                     ; returns:
(3)  900/     800 :                     ;   cc    SEGA formatted RAM is present
(3)  901/     800 :                     ;   cs    Not formatted or no RAM
(3)  902/     800 :                     ;   d0.w  size of backup RAM  $2(000) ~ $100(000)  bytes
(3)  903/     800 :                     ;   d1.w  0 : No RAM
(3)  904/     800 :                     ;         1 : Not Formatted
(3)  905/     800 :                     ;         2 : Other Format
(3)  906/     800 :                     ;   a1.l  pointer to display strings
(3)  907/     800 :                     ;-----------------------------------------------------------------------
(3)  908/     800 :                     BIOS_BRMINIT macro
(3)  909/     800 :                           BURAM #BRMINIT
(3)  910/     800 :                           endm
(3)  911/     800 :                     
(3)  912/     800 :                     ;-----------------------------------------------------------------------
(3)  913/     800 :                     ; BIOS_BRMSTAT - Returns how much Back-Up RAM has been used.
(3)  914/     800 :                     ;
(3)  915/     800 :                     ; input:
(3)  916/     800 :                     ;   a1.l  pointer to display string buffer (size: 12 bytes)
(3)  917/     800 :                     ;
(3)  918/     800 :                     ; returns:
(3)  919/     800 :                     ;   d0.w  number of blocks of free area
(3)  920/     800 :                     ;   d1.w  number of files in directory
(3)  921/     800 :                     ;-----------------------------------------------------------------------
(3)  922/     800 :                     BIOS_BRMSTAT macro
(3)  923/     800 :                           BURAM #BRMSTAT
(3)  924/     800 :                           endm
(3)  925/     800 :                     
(3)  926/     800 :                     ;-----------------------------------------------------------------------
(3)  927/     800 :                     ; BIOS_BRMSERCH - Searches for the desired file in Back-Up Ram.  The file
(3)  928/     800 :                     ;                  names are 11 ASCII characters terminated with a 0.
(3)  929/     800 :                     ;
(3)  930/     800 :                     ; input:
(3)  931/     800 :                     ;   a0.l  pointer to parameter (file name) table
(3)  932/     800 :                     ;             file name = 11 ASCII chars [0~9 A~Z_]   0 terminated
(3)  933/     800 :                     ;
(3)  934/     800 :                     ; returns:
(3)  935/     800 :                     ;   cc    file name found
(3)  936/     800 :                     ;   cs    file name not found
(3)  937/     800 :                     ;   d0.w  number of blocks
(3)  938/     800 :                     ;   d1.b  MODE
(3)  939/     800 :                     ;         0 : normal
(3)  940/     800 :                     ;        -1 : data protected (with protect function)
(3)  941/     800 :                     ;   a0.l  backup ram start address for search
(3)  942/     800 :                     ;-----------------------------------------------------------------------
(3)  943/     800 :                     BIOS_BRMSERCH macro
(3)  944/     800 :                           BURAM #BRMSERCH
(3)  945/     800 :                           endm
(3)  946/     800 :                     
(3)  947/     800 :                     ;-----------------------------------------------------------------------
(3)  948/     800 :                     ; BIOS_BRMREAD - reads data from Back-Up RAM.
(3)  949/     800 :                     ;
(3)  950/     800 :                     ; input:
(3)  951/     800 :                     ;   a0.l  pointer to parameter (file name) table
(3)  952/     800 :                     ;   a1.l  pointer to write buffer
(3)  953/     800 :                     ;
(3)  954/     800 :                     ; returns:
(3)  955/     800 :                     ;   cc    Read Okay
(3)  956/     800 :                     ;   cs    Error
(3)  957/     800 :                     ;   d0.w  number of blocks
(3)  958/     800 :                     ;   d1.b  MODE
(3)  959/     800 :                     ;         0 : normal
(3)  960/     800 :                     ;        -1 : data protected
(3)  961/     800 :                     ;-----------------------------------------------------------------------
(3)  962/     800 :                     BIOS_BRMREAD macro
(3)  963/     800 :                           BURAM #BRMREAD
(3)  964/     800 :                           endm
(3)  965/     800 :                     
(3)  966/     800 :                     ;-----------------------------------------------------------------------
(3)  967/     800 :                     ; BIOS_BRMWRITE - Writes data in Back-Up RAM.
(3)  968/     800 :                     ;
(3)  969/     800 :                     ; input:
(3)  970/     800 :                     ;   a0.l  pointer to parameter (file name) table
(3)  971/     800 :                     ;          flag.b       $00: normal
(3)  972/     800 :                     ;                       $FF: encoded (with protect function)
(3)  973/     800 :                     ;          block_size.w $00: 1 block = $40 bytes
(3)  974/     800 :                     ;                       $FF: 1 block = $20 bytes
(3)  975/     800 :                     ;   a1.l  pointer to save data
(3)  976/     800 :                     ;
(3)  977/     800 :                     ; returns:
(3)  978/     800 :                     ;   cc    Okay, complete
(3)  979/     800 :                     ;   cs    Error, cannot write in the file
(3)  980/     800 :                     ;-----------------------------------------------------------------------
(3)  981/     800 :                     BIOS_BRMWRITE macro
(3)  982/     800 :                           BURAM #BRMWRITE
(3)  983/     800 :                           endm
(3)  984/     800 :                     
(3)  985/     800 :                     ;-----------------------------------------------------------------------
(3)  986/     800 :                     ; BIOS_BRMDEL - Deletes data on Back-Up Ram.
(3)  987/     800 :                     ;
(3)  988/     800 :                     ; input:
(3)  989/     800 :                     ;   a0.l  pointer to parameter (file name) table
(3)  990/     800 :                     ;
(3)  991/     800 :                     ; returns:
(3)  992/     800 :                     ;   cc    deleted
(3)  993/     800 :                     ;   cs    not found
(3)  994/     800 :                     ;-----------------------------------------------------------------------
(3)  995/     800 :                     BIOS_BRMDEL macro
(3)  996/     800 :                           BURAM #BRMDEL
(3)  997/     800 :                           endm
(3)  998/     800 :                     
(3)  999/     800 :                     ;-----------------------------------------------------------------------
(3) 1000/     800 :                     ; BIOS_BRMFORMAT - First initializes the directory and then formats the
(3) 1001/     800 :                     ;                   Back-Up RAM
(3) 1002/     800 :                     ;
(3) 1003/     800 :                     ;                  Call BIOS_BRMINIT before calling this function
(3) 1004/     800 :                     ;
(3) 1005/     800 :                     ; input:
(3) 1006/     800 :                     ;   none
(3) 1007/     800 :                     ;
(3) 1008/     800 :                     ; returns:
(3) 1009/     800 :                     ;   cc    Okay, formatted
(3) 1010/     800 :                     ;   cs    Error, cannot format
(3) 1011/     800 :                     ;-----------------------------------------------------------------------
(3) 1012/     800 :                     BIOS_BRMFORMAT macro
(3) 1013/     800 :                           BURAM #BRMFORMAT
(3) 1014/     800 :                           endm
(3) 1015/     800 :                     
(3) 1016/     800 :                     ;-----------------------------------------------------------------------
(3) 1017/     800 :                     ; BIOS_BRMDIR - Reads directory
(3) 1018/     800 :                     ;
(3) 1019/     800 :                     ; input:
(3) 1020/     800 :                     ;   d1.l  H: number of files to skip when all files cannot be read in one try
(3) 1021/     800 :                     ;         L: size of directory buffer (# of files that can be read in the
(3) 1022/     800 :                     ;             directory buffer)
(3) 1023/     800 :                     ;   a0.l  pointer to parameter (file name) table
(3) 1024/     800 :                     ;   a1.l  pointer to directory buffer
(3) 1025/     800 :                     ;
(3) 1026/     800 :                     ; returns:
(3) 1027/     800 :                     ;   cc    Okay, complete
(3) 1028/     800 :                     ;   cs    Full, too much to read into directory buffer
(3) 1029/     800 :                     ;-----------------------------------------------------------------------
(3) 1030/     800 :                     BIOS_BRMDIR macro
(3) 1031/     800 :                           BURAM #BRMDIR
(3) 1032/     800 :                           endm
(3) 1033/     800 :                     
(3) 1034/     800 :                     ;-----------------------------------------------------------------------
(3) 1035/     800 :                     ; BIOS_BRMVERIFY - Checks data written on Back-Up Ram.
(3) 1036/     800 :                     ;
(3) 1037/     800 :                     ; input:
(3) 1038/     800 :                     ;   a0.l  pointer to parameter (file name) table
(3) 1039/     800 :                     ;          flag.b       $00: normal
(3) 1040/     800 :                     ;                       $FF: encoded (with protect function)
(3) 1041/     800 :                     ;          block_size.w $00: 1 block = $40 bytes
(3) 1042/     800 :                     ;                       $FF: 1 block = $20 bytes
(3) 1043/     800 :                     ;   a1.l  pointer to save data
(3) 1044/     800 :                     ;
(3) 1045/     800 :                     ; returns:
(3) 1046/     800 :                     ;   cc    Okay
(3) 1047/     800 :                     ;   cs    Error
(3) 1048/     800 :                     ;   d0.w  Error Number
(3) 1049/     800 :                     ;        -1 : Data does not match
(3) 1050/     800 :                     ;         0 : File not found
(3) 1051/     800 :                     ;-----------------------------------------------------------------------
(3) 1052/     800 :                     BIOS_BRMVERIFY macro
(3) 1053/     800 :                           BURAM #BRMVERIFY
(3) 1054/     800 :                           endm
(3) 1055/     800 :                     
(2)   69/     800 :                     
(2)   70/     800 :                     ; ====================================================================
(2)   71/     800 :                     ; ----------------------------------------------------------------
(2)   72/     800 :                     ; MAIN CODE
(2)   73/     800 :                     ; ----------------------------------------------------------------
(2)   74/     800 :                     
(2)   75/    6000 :                     		phase $6000
(2)   76/    6000 : 4D41 494E 2D4E      		dc.b "MAIN-NIKONA",0
             6006 : 494B 4F4E 4100    
(2)   77/    600C : 0000 0000           		dc.w 0,0
(2)   78/    6010 : 0000 0000           		dc.l 0
(2)   79/    6014 : 0000 0000           		dc.l 0
(2)   80/    6018 : 0000 0020           		dc.l $20
(2)   81/    601C : 0000 0000           		dc.l 0
(2)   82/    6020 :                     .table:
(2)   83/    6020 : 000A                		dc.w SP_Init-.table
(2)   84/    6022 : 00C8                		dc.w SP_Main-.table
(2)   85/    6024 : 0046                		dc.w SP_IRQ-.table
(2)   86/    6026 : 0044                		dc.w SP_User-.table
(2)   87/    6028 : 0000                		dc.w 0
(2)   88/    602A :                     
(2)   89/    602A :                     ; ====================================================================
(2)   90/    602A :                     ; ----------------------------------------------------------------
(2)   91/    602A :                     ; Init
(2)   92/    602A :                     ; ----------------------------------------------------------------
(2)   93/    602A :                     
(2)   94/    602A :                     SP_Init:
(2)   95/    602A :                     ; 		bclr	#3,(scpu_reg+$33).w
(2)   96/    602A :                     ; 		move.b	#$2F,(scpu_reg+$31).w
(2)   97/    602A :                     ; 		move.l	#SP_Timer,(_LEVEL3+2).l
(2)   98/    602A :                     
(2)   99/    602A : 13FC 0000 FFFF      		move.b	#0,(scpu_reg+mcd_memory).l
             6030 : 8003             
(2)  100/    6032 : 6100 032C           		bsr	spInitFS
(2)  101/    6036 : 41FA 001C           		lea	file_subdata(pc),a0
(2)  102/    603A : 6100 035E           		bsr	spSearchFile
(2)  103/    603E : 41F9 0002 0000      		lea	(SUBCPU_DATA),a0		; Get PCM samples
(2)  104/    6044 : 6100 02A2           		bsr	spReadSectorsN
(2)  105/    6048 : 6100 03A6           		bsr	CDPCM_Init
(2)  106/    604C : 11FC 0000 800F      		move.b	#0,(scpu_reg+mcd_comm_s).w	; Reset SUB-status
(2)  107/    6052 :                     
(2)  108/    6052 :                     ; 		bset	#3,(scpu_reg+$33).w
(2)  109/    6052 : 4E75                		rts
(2)  110/    6054 :                     
(2)  111/    6054 :                     ; --------------------------------------------------------
(2)  112/    6054 :                     
(2)  113/    6054 :                     file_subdata:
(2)  114/    6054 : 5355 425F 4441      		dc.b "SUB_DATA.BIN",0
             605A : 5441 2E42 494E 00 
(2)  115/    6061 :                     		align 2
(2)  116/    6062 :                     
(2)  117/    6062 :                     ; =====================================================================
(2)  118/    6062 :                     ; ----------------------------------------------------------------
(2)  119/    6062 :                     ; Level 3 IRQ
(2)  120/    6062 :                     ; ----------------------------------------------------------------
(2)  121/    6062 :                     
(2)  122/    6062 :                     SP_Timer:
(2)  123/    6062 :                     ; 		movem.l	d0-a6,-(sp)
(2)  124/    6062 :                     ; 		bsr	CDPCM_Stream_IRQ
(2)  125/    6062 :                     ; 		movem.l	(sp)+,d0-a6
(2)  126/    6062 : 4E73                		rte	; rte
(2)  127/    6064 :                     
(2)  128/    6064 :                     ; =====================================================================
(2)  129/    6064 :                     ; ----------------------------------------------------------------
(2)  130/    6064 :                     ; User interrupt
(2)  131/    6064 :                     ; ----------------------------------------------------------------
(2)  132/    6064 :                     
(2)  133/    6064 :                     SP_User:
(2)  134/    6064 : 4E75                		rts
(2)  135/    6066 :                     
(2)  136/    6066 :                     ; =====================================================================
(2)  137/    6066 :                     ; ----------------------------------------------------------------
(2)  138/    6066 :                     ; Level 2 IRQ
(2)  139/    6066 :                     ;
(2)  140/    6066 :                     ; WARNING: The SEGA intro before starting
(2)  141/    6066 :                     ; the game calls this every frame.
(2)  142/    6066 :                     ; ----------------------------------------------------------------
(2)  143/    6066 :                     
(2)  144/    6066 :                     SP_IRQ:
(2)  145/    6066 : 1038 800E           		move.b	(scpu_reg+mcd_comm_m).w,d0
(2)  146/    606A : 0240 00F0           		andi.w	#$F0,d0
(2)  147/    606E : 0C40 00F0           		cmpi.w	#$F0,d0				; Z80 wants to enter ($F0)?
(2)  148/    6072 : 6672                		bne	.not_now
(2)  149/    6074 :                     ; 		bclr	#3,(scpu_reg+$33).w		; Disable Timer interrupt
(2)  150/    6074 : 11FC 00FF 800F      		move.b	#-1,(scpu_reg+mcd_comm_s).w	; Respond to Z80
(2)  151/    607A :                     .wait_start:
(2)  152/    607A : 1038 800E           		move.b	(scpu_reg+mcd_comm_m).w,d0	; MAIN is ready?
(2)  153/    607E : 0800 0001           		btst	#1,d0
(2)  154/    6082 : 67F6                		beq.s	.wait_start
(2)  155/    6084 : 6100 04CC           		bsr	CDPCM_Stream_IRQ
(2)  156/    6088 : 43F8 6A40           		lea	(RAM_CdSub_PcmTable),a1
(2)  157/    608C : 45F8 8010           		lea	(scpu_reg+mcd_dcomm_m).w,a2
(2)  158/    6090 : 11FC 0000 800F      		move.b	#$00,(scpu_reg+mcd_comm_s).w
(2)  159/    6096 :                     
(2)  160/    6096 :                     ; ----------------------------------------------------------------
(2)  161/    6096 :                     ; a1 - table
(2)  162/    6096 :                     ; a2 - MAIN data
(2)  163/    6096 :                     
(2)  164/    6096 :                     .next_packet:
(2)  165/    6096 : 1039 FFFF 800E      		move.b	(scpu_reg+mcd_comm_m).l,d0	; Wait PASS
(2)  166/    609C : 0800 0001           		btst	#1,d0				; LOCK enabled?
(2)  167/    60A0 : 673C                		beq.s	.exit_now
(2)  168/    60A2 : 48E7 8060           		movem.l	d0/a1-a2,-(sp)
(2)  169/    60A6 : 6100 04AA           		bsr	CDPCM_Stream_IRQ
(2)  170/    60AA : 4CDF 0601           		movem.l	(sp)+,d0/a1-a2
(2)  171/    60AE : 0800 0000           		btst	#0,d0				; MAIN passed the packet?
(2)  172/    60B2 : 67E2                		beq.s	.next_packet
(2)  173/    60B4 : 204A                		move.l	a2,a0
(2)  174/    60B6 : 32D8                		move.w	(a0)+,(a1)+			; WORD passes
(2)  175/    60B8 : 32D8                		move.w	(a0)+,(a1)+
(2)  176/    60BA : 32D8                		move.w	(a0)+,(a1)+
(2)  177/    60BC : 32D8                		move.w	(a0)+,(a1)+
(2)  178/    60BE : 32D8                		move.w	(a0)+,(a1)+
(2)  179/    60C0 : 32D8                		move.w	(a0)+,(a1)+
(2)  180/    60C2 : 32D8                		move.w	(a0)+,(a1)+
(2)  181/    60C4 : 32D8                		move.w	(a0)+,(a1)+
(2)  182/    60C6 : 11FC 0001 800F      		move.b	#$01,(scpu_reg+mcd_comm_s).w	; Sub-CPU got the data
(2)  183/    60CC : 1038 800E           .wait_main:	move.b	(scpu_reg+mcd_comm_m).w,d0	; Wait Z80 bit
(2)  184/    60D0 : 0800 0000           		btst	#0,d0
(2)  185/    60D4 : 66F6                		bne.s	.wait_main
(2)  186/    60D6 : 11FC 0000 800F      		move.b	#$00,(scpu_reg+mcd_comm_s).w	; Sub-CPU is free
(2)  187/    60DC : 60B8                		bra	.next_packet
(2)  188/    60DE : 6100 0472           .exit_now:	bsr	CDPCM_Stream_IRQ
(2)  189/    60E2 : 6100 0388           		bsr	CDPCM_ReadTable
(2)  190/    60E6 :                     .not_now:
(2)  191/    60E6 :                     ; 		bset	#3,(scpu_reg+$33).w		; Enable Timer interrupt
(2)  192/    60E6 : 4E75                		rts
(2)  193/    60E8 :                     
(2)  194/    60E8 :                     ; ====================================================================
(2)  195/    60E8 :                     ; ----------------------------------------------------------------
(2)  196/    60E8 :                     ; Main
(2)  197/    60E8 :                     ;
(2)  198/    60E8 :                     ; mcd_comm_m COMMAND READ ONLY:
(2)  199/    60E8 :                     ; %lp0iiiii
(2)  200/    60E8 :                     ;
(2)  201/    60E8 :                     ; mcd_comm_s STATUS READ/WRITE:
(2)  202/    60E8 :                     ; %bp000000
(2)  203/    60E8 :                     ;
(2)  204/    60E8 :                     ; a6 - comm data MAIN (READ ONLY)
(2)  205/    60E8 :                     ; a5 - comm data SUB (READ/WRITE)
(2)  206/    60E8 :                     ; ----------------------------------------------------------------
(2)  207/    60E8 :                     
(2)  208/    60E8 :                     SP_Main:
(2)  209/    60E8 :                     	rept 6
(2)  210/    60E8 :                     		bsr	CDPCM_Stream
(2)  211/    60E8 :                     	endm
(2)  210/    60E8 : 6100 045C           		bsr	CDPCM_Stream
(2)  210/    60EC : 6100 0458           		bsr	CDPCM_Stream
(2)  210/    60F0 : 6100 0454           		bsr	CDPCM_Stream
(2)  210/    60F4 : 6100 0450           		bsr	CDPCM_Stream
(2)  210/    60F8 : 6100 044C           		bsr	CDPCM_Stream
(2)  210/    60FC : 6100 0448           		bsr	CDPCM_Stream
(2)  212/    6100 : 1038 800E           		move.b	(scpu_reg+mcd_comm_m).w,d0
(2)  213/    6104 : 1200                		move.b	d0,d1
(2)  214/    6106 : 0241 00F0           		andi.w	#$F0,d1
(2)  215/    610A : 0C01 00F0           		cmpi.b	#$F0,d1					; Z80 got first?
(2)  216/    610E : 67D8                		beq.s	SP_Main
(2)  217/    6110 : 0240 003F           		andi.w	#%00111111,d0				; <-- current limit
(2)  218/    6114 : 67D2                		beq.s	SP_Main
(2)  219/    6116 :                     ; 		bclr	#3,(scpu_reg+$33).w
(2)  220/    6116 : 2F00                		move.l	d0,-(sp)
(2)  221/    6118 : 6100 042C           		bsr	CDPCM_Stream
(2)  222/    611C : 201F                		move.l	(sp)+,d0
(2)  223/    611E : 1E38 800F           		move.b	(scpu_reg+mcd_comm_s).w,d7
(2)  224/    6122 : 08C7 0007           		bset	#7,d7
(2)  225/    6126 : 11C7 800F           		move.b	d7,(scpu_reg+mcd_comm_s).w		; Tell MAIN we are working.
(2)  226/    612A : D040                		add.w	d0,d0					; index*2
(2)  227/    612C : 323B 0014           		move.w	SP_cmdlist(pc,d0.w),d1
(2)  228/    6130 : 4EBB 1010           		jsr	SP_cmdlist(pc,d1.w)
(2)  229/    6134 : 1E38 800F           		move.b	(scpu_reg+mcd_comm_s).w,d7
(2)  230/    6138 : 0887 0007           		bclr	#7,d7
(2)  231/    613C : 11C7 800F           		move.b	d7,(scpu_reg+mcd_comm_s).w		; Tell MAIN we finished.
(2)  232/    6140 :                     ; 		bset	#3,(scpu_reg+$33).w
(2)  233/    6140 : 60A6                		bra	SP_Main
(2)  234/    6142 :                     
(2)  235/    6142 :                     	; ** DO NOT RETURN WITH RTS **
(2)  236/    6142 :                     	; On return it goes on a loop expecting a flag set
(2)  237/    6142 :                     	; by VBlank, the IRQ is now used by the Z80
(2)  238/    6142 :                     	; to Transfer the PCM table (Z80->here)
(2)  239/    6142 :                     
(2)  240/    6142 :                     ; =====================================================================
(2)  241/    6142 :                     ; ----------------------------------------------------------------
(2)  242/    6142 :                     ; Commands list
(2)  243/    6142 :                     ; ----------------------------------------------------------------
(2)  244/    6142 :                     
(2)  245/    6142 :                     ; Struct
(2)  246/    6142 :                     ; $01-$0F: Common memory handling
(2)  247/    6142 :                     ; $10-$1F: CDDA Playback control
(2)  248/    6142 :                     ; $20-$2F: ???
(2)  249/    6142 :                     ; $30-$3F: ???
(2)  250/    6142 :                     
(2)  251/    6142 :                     SP_cmdlist:
(2)  252/    6142 : 0060                		dc.w SP_cmnd00-SP_cmdlist	; $00 | INVALID
(2)  253/    6144 : 0062                		dc.w SP_cmnd01-SP_cmdlist	; $01 | Read file from disc, copy data through mcd_dcomm_s
(2)  254/    6146 : 00E4                		dc.w SP_cmnd02-SP_cmdlist	; $02 | Read file from disc, sends output to WORD-RAM
(2)  255/    6148 : 0060                		dc.w SP_cmnd00-SP_cmdlist	; $03
(2)  256/    614A : 0060                		dc.w SP_cmnd00-SP_cmdlist	; $04
(2)  257/    614C : 0060                		dc.w SP_cmnd00-SP_cmdlist	; $05
(2)  258/    614E : 0060                		dc.w SP_cmnd00-SP_cmdlist	; $06
(2)  259/    6150 : 0060                		dc.w SP_cmnd00-SP_cmdlist	; $07 | Set 2M WORD-RAM permission to MAIN
(2)  260/    6152 : 0116                		dc.w SP_cmnd08-SP_cmdlist	; $08 | Get data from MAIN through mcd_dcomm_m
(2)  261/    6154 : 0060                		dc.w SP_cmnd00-SP_cmdlist	; $09
(2)  262/    6156 : 0060                		dc.w SP_cmnd00-SP_cmdlist	; $0A
(2)  263/    6158 : 0060                		dc.w SP_cmnd00-SP_cmdlist	; $0B
(2)  264/    615A : 0060                		dc.w SP_cmnd00-SP_cmdlist	; $0C
(2)  265/    615C : 0060                		dc.w SP_cmnd00-SP_cmdlist	; $0D
(2)  266/    615E : 0060                		dc.w SP_cmnd00-SP_cmdlist	; $0E
(2)  267/    6160 : 0060                		dc.w SP_cmnd00-SP_cmdlist	; $0F
(2)  268/    6162 :                     
(2)  269/    6162 : 018E                		dc.w SP_cmnd10-SP_cmdlist	; $10 | Play CDDA track
(2)  270/    6164 : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  271/    6166 : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  272/    6168 : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  273/    616A : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  274/    616C : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  275/    616E : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  276/    6170 : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  277/    6172 : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  278/    6174 : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  279/    6176 : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  280/    6178 : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  281/    617A : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  282/    617C : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  283/    617E : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  284/    6180 : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  285/    6182 :                     
(2)  286/    6182 : 01A4                		dc.w SP_cmnd20-SP_cmdlist
(2)  287/    6184 : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  288/    6186 : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  289/    6188 : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  290/    618A : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  291/    618C : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  292/    618E : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  293/    6190 : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  294/    6192 : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  295/    6194 : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  296/    6196 : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  297/    6198 : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  298/    619A : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  299/    619C : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  300/    619E : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  301/    61A0 : 0060                		dc.w SP_cmnd00-SP_cmdlist
(2)  302/    61A2 :                     
(2)  303/    61A2 :                     ; --------------------------------------------------------
(2)  304/    61A2 :                     ; NULL COMMAND
(2)  305/    61A2 :                     ; --------------------------------------------------------
(2)  306/    61A2 :                     
(2)  307/    61A2 :                     SP_cmnd00:
(2)  308/    61A2 : 4E75                		rts
(2)  309/    61A4 :                     
(2)  310/    61A4 :                     ; --------------------------------------------------------
(2)  311/    61A4 :                     ; Command $01
(2)  312/    61A4 :                     ;
(2)  313/    61A4 :                     ; Read data from disc and transfer through
(2)  314/    61A4 :                     ; dcomm_s as packets of $10 bytes
(2)  315/    61A4 :                     ;
(2)  316/    61A4 :                     ; mcd_comm_m: %lp------
(2)  317/    61A4 :                     ; l - Lock bit, unlocking exit loop.
(2)  318/    61A4 :                     ; p - MAIN response bit
(2)  319/    61A4 :                     ;
(2)  320/    61A4 :                     ; mcd_comm_s: %-p------
(2)  321/    61A4 :                     ; p - PASS bit
(2)  322/    61A4 :                     ;
(2)  323/    61A4 :                     ; mcd_dcomm_m:
(2)  324/    61A4 :                     ; dc.b "FILENAME.BIN",0
(2)  325/    61A4 :                     ;
(2)  326/    61A4 :                     ; mcd_dcomm_s:
(2)  327/    61A4 :                     ; all
(2)  328/    61A4 :                     ; --------------------------------------------------------
(2)  329/    61A4 :                     
(2)  330/    61A4 :                     SP_cmnd01:
(2)  331/    61A4 : (MACRO)              		BIOS_MSCSTOP
(2)  331/    61A4 :  (MACRO-2)                 CDBIOS #MSCSTOP
(2)  331/    61A4 : 303C 0002                 move.w    #MSCSTOP,d0
(2)  331/    61A8 : 4EB8 5F22                 jsr       _CDBIOS
(2)  332/    61AC : 41F8 8010           		lea	(scpu_reg+mcd_dcomm_m).w,a0	; a0 - filename
(2)  333/    61B0 : 6100 01E8           		bsr	spSearchFile
(2)  334/    61B4 : 41F9 0000 EA84      		lea	(ISO_Output),a0
(2)  335/    61BA : 6100 012C           		bsr	spReadSectorsN
(2)  336/    61BE : 41F9 0000 EA84      		lea	(ISO_Output),a0
(2)  337/    61C4 : 45F8 8020           		lea	(scpu_reg+mcd_dcomm_s).w,a2
(2)  338/    61C8 :                     .next_packet:
(2)  339/    61C8 : 224A                		move.l	a2,a1
(2)  340/    61CA : 32D8                		move.w	(a0)+,(a1)+			; WORD writes to be safe...
(2)  341/    61CC : 32D8                		move.w	(a0)+,(a1)+
(2)  342/    61CE : 32D8                		move.w	(a0)+,(a1)+
(2)  343/    61D0 : 32D8                		move.w	(a0)+,(a1)+
(2)  344/    61D2 : 32D8                		move.w	(a0)+,(a1)+
(2)  345/    61D4 : 32D8                		move.w	(a0)+,(a1)+
(2)  346/    61D6 : 32D8                		move.w	(a0)+,(a1)+
(2)  347/    61D8 : 32D8                		move.w	(a0)+,(a1)+
(2)  348/    61DA : 1E38 800F           		move.b	(scpu_reg+mcd_comm_s).w,d7	; Sub PASS bit
(2)  349/    61DE : 08C7 0006           		bset	#6,d7
(2)  350/    61E2 : 11C7 800F           		move.b	d7,(scpu_reg+mcd_comm_s).w
(2)  351/    61E6 : 1E38 800E           .wait_main:	move.b	(scpu_reg+mcd_comm_m).w,d7	; MAIN got data?
(2)  352/    61EA : 0807 0007           		btst	#7,d7				; Unlocked?
(2)  353/    61EE : 671E                		beq.s	.exit_now
(2)  354/    61F0 : 0807 0006           		btst	#6,d7				; MAIN got the data?
(2)  355/    61F4 : 67F0                		beq.s	.wait_main
(2)  356/    61F6 : 1E38 800F           		move.b	(scpu_reg+mcd_comm_s).w,d7	; Clear Sub PASS
(2)  357/    61FA : 0887 0006           		bclr	#6,d7
(2)  358/    61FE : 11C7 800F           		move.b	d7,(scpu_reg+mcd_comm_s).w
(2)  359/    6202 : 1E38 800E           .wait_main_o:	move.b	(scpu_reg+mcd_comm_m).w,d7	; Wait MAIN response.
(2)  360/    6206 : 0807 0006           		btst	#6,d7
(2)  361/    620A : 66F6                		bne.s	.wait_main_o
(2)  362/    620C : 60BA                		bra.s	.next_packet
(2)  363/    620E : 1E38 800F           .exit_now:	move.b	(scpu_reg+mcd_comm_s).w,d7	; Clear Sub PASS
(2)  364/    6212 : 0887 0006           		bclr	#6,d7
(2)  365/    6216 : 11C7 800F           		move.b	d7,(scpu_reg+mcd_comm_s).w
(2)  366/    621A : 08F9 0000 FFFF      .wait_ret:	bset	#0,(scpu_reg+mcd_memory).l	; Return 2M WORDRAM to MAIN, RET=1
             6220 : 8003             
(2)  367/    6222 : 67F6                		beq.s	.wait_ret
(2)  368/    6224 : 4E75                		rts
(2)  369/    6226 :                     
(2)  370/    6226 :                     ; --------------------------------------------------------
(2)  371/    6226 :                     ; Command $02
(2)  372/    6226 :                     ;
(2)  373/    6226 :                     ; Read data from disc and sends it to WORD-RAM
(2)  374/    6226 :                     ;
(2)  375/    6226 :                     ; mcd_dcomm_m:
(2)  376/    6226 :                     ; dc.b "FILENAME.BIN",0
(2)  377/    6226 :                     ; --------------------------------------------------------
(2)  378/    6226 :                     
(2)  379/    6226 :                     SP_cmnd02:
(2)  380/    6226 : 1039 FFFF 8003      		move.b	(scpu_reg+mcd_memory).l,d0
(2)  381/    622C : 0800 0001           		btst	#1,d0
(2)  382/    6230 : 67F4                		beq.s	SP_cmnd02
(2)  383/    6232 : (MACRO)              		BIOS_MSCSTOP
(2)  383/    6232 :  (MACRO-2)                 CDBIOS #MSCSTOP
(2)  383/    6232 : 303C 0002                 move.w    #MSCSTOP,d0
(2)  383/    6236 : 4EB8 5F22                 jsr       _CDBIOS
(2)  384/    623A : 41F8 8010           		lea	(scpu_reg+mcd_dcomm_m).w,a0	; a0 - filename
(2)  385/    623E : 6100 015A           		bsr	spSearchFile
(2)  386/    6242 : 41F9 0008 0000      		lea	(scpu_wram),a0
(2)  387/    6248 : 6100 009E           		bsr	spReadSectorsN
(2)  388/    624C : 08F9 0000 FFFF      .wait_ret:	bset	#0,(scpu_reg+mcd_memory).l	; Return WORDRAM to MAIN, RET=1
             6252 : 8003             
(2)  389/    6254 : 67F6                		beq.s	.wait_ret
(2)  390/    6256 : 4E75                		rts
(2)  391/    6258 :                     
(2)  392/    6258 :                     ; --------------------------------------------------------
(2)  393/    6258 :                     ; Command $08
(2)  394/    6258 :                     ; --------------------------------------------------------
(2)  395/    6258 :                     
(2)  396/    6258 :                     SP_cmnd08:
(2)  397/    6258 : 45F8 8010           		lea	(scpu_reg+mcd_dcomm_m).w,a2
(2)  398/    625C : 3012                		move.w	(a2),d0				; a1 - Destination
(2)  399/    625E : 4840                		swap	d0
(2)  400/    6260 : 302A 0002           		move.w	2(a2),d0
(2)  401/    6264 : 2240                		move.l	d0,a1
(2)  402/    6266 : 1E38 800F           		move.b	(scpu_reg+mcd_comm_s).w,d7	; Tell MAIN we got the a1
(2)  403/    626A : 08C7 0006           		bset	#6,d7
(2)  404/    626E : 11C7 800F           		move.b	d7,(scpu_reg+mcd_comm_s).w
(2)  405/    6272 : 1038 800E           .wait_start:	move.b	(scpu_reg+mcd_comm_m).w,d0	; Wait for MAIN
(2)  406/    6276 : 0800 0007           		btst	#7,d0
(2)  407/    627A : 67F6                		beq.s	.wait_start
(2)  408/    627C : 1E38 800F           		move.b	(scpu_reg+mcd_comm_s).w,d7
(2)  409/    6280 : 0887 0006           		bclr	#6,d7
(2)  410/    6284 : 11C7 800F           		move.b	d7,(scpu_reg+mcd_comm_s).w
(2)  411/    6288 :                     .next_packet:
(2)  412/    6288 : 1E38 800E           		move.b	(scpu_reg+mcd_comm_m).w,d7
(2)  413/    628C : 0807 0007           		btst	#7,d7
(2)  414/    6290 : 673C                		beq.s	.exit_now
(2)  415/    6292 : 0807 0006           		btst	#6,d7
(2)  416/    6296 : 67F0                		beq.s	.next_packet
(2)  417/    6298 : 204A                		move.l	a2,a0
(2)  418/    629A : 32D8                		move.w	(a0)+,(a1)+			; WORD writes to be safe...
(2)  419/    629C : 32D8                		move.w	(a0)+,(a1)+
(2)  420/    629E : 32D8                		move.w	(a0)+,(a1)+
(2)  421/    62A0 : 32D8                		move.w	(a0)+,(a1)+
(2)  422/    62A2 : 32D8                		move.w	(a0)+,(a1)+
(2)  423/    62A4 : 32D8                		move.w	(a0)+,(a1)+
(2)  424/    62A6 : 32D8                		move.w	(a0)+,(a1)+
(2)  425/    62A8 : 32D8                		move.w	(a0)+,(a1)+
(2)  426/    62AA : 1E38 800F           		move.b	(scpu_reg+mcd_comm_s).w,d7
(2)  427/    62AE : 08C7 0006           		bset	#6,d7
(2)  428/    62B2 : 11C7 800F           		move.b	d7,(scpu_reg+mcd_comm_s).w
(2)  429/    62B6 : 1E38 800E           .wait_main:	move.b	(scpu_reg+mcd_comm_m).w,d7	; Wait MAIN
(2)  430/    62BA : 0807 0006           		btst	#6,d7
(2)  431/    62BE : 66F6                		bne.s	.wait_main
(2)  432/    62C0 : 1E38 800F           		move.b	(scpu_reg+mcd_comm_s).w,d7
(2)  433/    62C4 : 0887 0006           		bclr	#6,d7
(2)  434/    62C8 : 11C7 800F           		move.b	d7,(scpu_reg+mcd_comm_s).w
(2)  435/    62CC : 60BA                		bra	.next_packet
(2)  436/    62CE :                     .exit_now:
(2)  437/    62CE :                     
(2)  438/    62CE : 4E75                		rts
(2)  439/    62D0 :                     
(2)  440/    62D0 :                     ; --------------------------------------------------------
(2)  441/    62D0 :                     ; Command $10
(2)  442/    62D0 :                     ; --------------------------------------------------------
(2)  443/    62D0 :                     
(2)  444/    62D0 :                     SP_cmnd10:
(2)  445/    62D0 : (MACRO)              		BIOS_MSCSTOP
(2)  445/    62D0 :  (MACRO-2)                 CDBIOS #MSCSTOP
(2)  445/    62D0 : 303C 0002                 move.w    #MSCSTOP,d0
(2)  445/    62D4 : 4EB8 5F22                 jsr       _CDBIOS
(2)  446/    62D8 : 41F8 8010           		lea	(scpu_reg+mcd_dcomm_m).w,a0
(2)  447/    62DC :                     ; 		lea	.this(pc),a0
(2)  448/    62DC : (MACRO)              		BIOS_MSCPLAYR
(2)  448/    62DC :  (MACRO-2)                 CDBIOS #MSCPLAYR
(2)  448/    62DC : 303C 0013                 move.w    #MSCPLAYR,d0
(2)  448/    62E0 : 4EB8 5F22                 jsr       _CDBIOS
(2)  449/    62E4 : 4E75                		rts
(2)  450/    62E6 :                     		align 2
(2)  451/    62E6 :                     ; .this:		dc.w 2
(2)  452/    62E6 :                     
(2)  453/    62E6 :                     ; --------------------------------------------------------
(2)  454/    62E6 :                     ; Command $20
(2)  455/    62E6 :                     ; --------------------------------------------------------
(2)  456/    62E6 :                     
(2)  457/    62E6 :                     SP_cmnd20:
(2)  458/    62E6 : 4E75                		rts
(2)  459/    62E8 :                     
(2)  460/    62E8 :                     ; =====================================================================
(2)  461/    62E8 :                     ; ----------------------------------------------------------------
(2)  462/    62E8 :                     ; Subroutines
(2)  463/    62E8 :                     ; ----------------------------------------------------------------
(2)  464/    62E8 :                     
(2)  465/    62E8 :                     ; --------------------------------------------------------
(2)  466/    62E8 :                     ; CD-ROM data
(2)  467/    62E8 :                     ; --------------------------------------------------------
(2)  468/    62E8 :                     
(2)  469/    62E8 :                     ; ------------------------------------------------
(2)  470/    62E8 :                     ; spReadSectorsN
(2)  471/    62E8 :                     ;
(2)  472/    62E8 :                     ; Input:
(2)  473/    62E8 :                     ; a0 - Destination
(2)  474/    62E8 :                     ; d0 - Sector start
(2)  475/    62E8 :                     ; d1 - Number of sectors
(2)  476/    62E8 :                     ; d2 - Destination increment (Only 0 or $800)
(2)  477/    62E8 :                     ; ------------------------------------------------
(2)  478/    62E8 :                     
(2)  479/    62E8 :                     spReadSectorsN:
(2)  480/    62E8 : 4BF9 0001 6A84      		lea	(RAM_CdSub_FsBuff),a5
(2)  481/    62EE : 0280 0000 FFFF      		andi.l	#$FFFF,d0
(2)  482/    62F4 : 0281 0000 FFFF      		andi.l	#$FFFF,d1
(2)  483/    62FA : 2A80                		move.l	d0,(a5)
(2)  484/    62FC : 2B41 0004           		move.l	d1,4(a5)
(2)  485/    6300 : 2B48 0008           		move.l	a0,8(a5)
(2)  486/    6304 : 11FC 0003 8004      		move.b	#%011,(scpu_reg+4).w		; Set CDC device to "Sub CPU"
(2)  487/    630A : 303C 0089           		move.w	#CDCSTOP,d0			; Stop CDC
(2)  488/    630E : 4EB8 5F22           		jsr	_CDBIOS.w
(2)  489/    6312 : 204D                		move.l	a5,a0
(2)  490/    6314 : 303C 0020           		move.w	#ROMREADN,d0			; Read sector by count
(2)  491/    6318 : 4EB8 5F22           		jsr	_CDBIOS.w
(2)  492/    631C :                     .wait_STAT:
(2)  493/    631C : 303C 008A           		move.w	#CDCSTAT,d0			; Get CDC Status
(2)  494/    6320 : 4EB8 5F22           		jsr	_CDBIOS.w
(2)  495/    6324 : 65F6                 		bcs.s	.wait_STAT
(2)  496/    6326 :                     .wait_READ:
(2)  497/    6326 : 303C 008B           		move.w	#CDCREAD,d0			; CDC Read mode
(2)  498/    632A : 4EB8 5F22           		jsr	_CDBIOS.w
(2)  499/    632E : 65F6                		bcs.s	.wait_READ
(2)  500/    6330 : 2B40 0010           		move.l	d0,$10(a5)
(2)  501/    6334 :                     .WaitTransfer:
(2)  502/    6334 : 206D 0008           		movea.l	8(a5),a0		; a0 - DATA Destination
(2)  503/    6338 : 43ED 0010           		lea	$10(a5),a1			; a1 - HEADER out
(2)  504/    633C : 303C 008C           		move.w	#CDCTRN,d0			; CDC Transfer data
(2)  505/    6340 : 4EB8 5F22           		jsr	_CDBIOS.w
(2)  506/    6344 : 65EE                		bcs.s	.waitTransfer			; If not done, branch
(2)  507/    6346 :                     
(2)  508/    6346 : 303C 008D           		move.w	#CDCACK,d0			; Finish read
(2)  509/    634A : 4EB8 5F22           		jsr	_CDBIOS.w
(2)  510/    634E :                     
(2)  511/    634E : 06AD 0000 0800      		addi.l	#$800,8(a5)
             6354 : 0008             
(2)  512/    6356 : 5295                		addq.l	#1,(a5)
(2)  513/    6358 : 53AD 0004           		subq.l	#1,4(a5)
(2)  514/    635C : 66BE                		bne.s	.wait_STAT
(2)  515/    635E : 4E75                		rts
(2)  516/    6360 :                     
(2)  517/    6360 :                     ; ------------------------------------------------
(2)  518/    6360 :                     ; ISO9660 Driver
(2)  519/    6360 :                     ; ------------------------------------------------
(2)  520/    6360 :                     
(2)  521/    6360 :                     spInitFS:
(2)  522/    6360 : 48E7 FFFE           		movem.l	d0-d7/a0-a6,-(a7)
(2)  523/    6364 :                     	; Load Volume VolumeDescriptor
(2)  524/    6364 : 7010                		moveq	#$10,d0			; Start Sector (at $8000)
(2)  525/    6366 : 7210                		moveq	#$10,d1			; Sector size
(2)  526/    6368 : 41F8 6A84           		lea	(ISO_Filelist),a0	; Destination
(2)  527/    636C : 6100 FF7A           		bsr	spReadSectorsN
(2)  528/    6370 :                     	; Load Root Directory
(2)  529/    6370 : 41F8 6A84           		lea	(ISO_Filelist),a0	; Get pointer to sector buffer
(2)  530/    6374 : 43E8 009C           		lea.l	$9C(a0),a1		; Get root directory record
(2)  531/    6378 : 1029 0006           		move.b	6(a1),d0		; Get first part of Sector address
(2)  532/    637C : E188                		lsl.l	#8,d0			; bitshift
(2)  533/    637E : 1029 0007           		move.b	7(a1),d0		; Get next part of sector address
(2)  534/    6382 : E188                		lsl.l	#8,d0			; bitshift
(2)  535/    6384 : 1029 0008           		move.b	8(a1),d0		; get next part of sector address
(2)  536/    6388 : E188                		lsl.l	#8,d0			; bitshift
(2)  537/    638A : 1029 0009           		move.b	9(a1),d0		; get final part of sector address
(2)  538/    638E :                     	; d0 now contains start sector address
(2)  539/    638E : 7210                		moveq	#$10,d1			; Size ($20 Sectors)
(2)  540/    6390 : 6100 FF56           		bsr	spReadSectorsN
(2)  541/    6394 : 4CDF 7FFF           		movem.l	(a7)+,d0-d7/a0-a6	; Restore all registers
(2)  542/    6398 : 4E75                		rts
(2)  543/    639A :                     
(2)  544/    639A :                     ; --------------------------------------------------------
(2)  545/    639A :                     ; spSearchFile
(2)  546/    639A :                     ;
(2)  547/    639A :                     ; Search a file on the disc
(2)  548/    639A :                     ;
(2)  549/    639A :                     ; FILETABLE MUST BE LOADED FIRST WITH spInitFS
(2)  550/    639A :                     ;
(2)  551/    639A :                     ; Input
(2)  552/    639A :                     ; a0 - Filename string zero terminated
(2)  553/    639A :                     ;
(2)  554/    639A :                     ; Output:
(2)  555/    639A :                     ; d0.l - Start sector
(2)  556/    639A :                     ; d1.l - Number of sectors
(2)  557/    639A :                     ; d2.l - Filesize
(2)  558/    639A :                     ;
(2)  559/    639A :                     ; Breaks:
(2)  560/    639A :                     ; d4-d7,a6
(2)  561/    639A :                     ; --------------------------------------------------------
(2)  562/    639A :                     
(2)  563/    639A :                     ; TODO: A ZERO-SIZE CHECK
(2)  564/    639A :                     
(2)  565/    639A :                     spSearchFile:
(2)  566/    639A :                     ; 		movem.l	a1/a2/a6,-(a7)
(2)  567/    639A : 49F8 6A84           		lea	(ISO_Filelist),a4		; a4 - TOP
(2)  568/    639E : 7000                		moveq	#0,d0
(2)  569/    63A0 : 7200                		moveq	#0,d1
(2)  570/    63A2 : 7400                		moveq	#0,d2
(2)  571/    63A4 :                     .next_file:
(2)  572/    63A4 : 1E14                		move.b	(a4),d7			; d7 - Block size
(2)  573/    63A6 : 673A                		beq.s	.failed_srch
(2)  574/    63A8 : 0247 00FF           		andi.w	#$FF,d7
(2)  575/    63AC : 264C                		move.l	a4,a3			; a3 - To search for
(2)  576/    63AE : D6FC 0019           		adda	#$19,a3			; Go to flags
(2)  577/    63B2 : 1C13                		move.b	(a3),d6
(2)  578/    63B4 : 6618                		bne.s	.non_file		; $00: iso_file, non-Zero: iso_setfs
(2)  579/    63B6 : D6FC 0007           		adda	#$07,a3			; Go to filename
(2)  580/    63BA : 7C00                		moveq	#0,d6
(2)  581/    63BC : 1C1B                		move.b	(a3)+,d6
(2)  582/    63BE : 5946                		subq.w	#3+1,d6
(2)  583/    63C0 : 2448                		move.l	a0,a2			; a2 - string to seach
(2)  584/    63C2 :                     .chk_str:
(2)  585/    63C2 : 1A1B                		move.b	(a3)+,d5
(2)  586/    63C4 : BA1A                		cmp.b	(a2)+,d5
(2)  587/    63C6 : 6606                		bne.s	.non_file
(2)  588/    63C8 : 51CE FFF8           		dbf	d6,.chk_str
(2)  589/    63CC : 6004                		bra.s	.found_file
(2)  590/    63CE :                     .non_file:
(2)  591/    63CE : D8C7                		adda	d7,a4
(2)  592/    63D0 : 60D2                		bra.s	.next_file
(2)  593/    63D2 :                     .found_file:
(2)  594/    63D2 : 202C 0006           		move.l	6(a4),d0		; d0 - Sector position
(2)  595/    63D6 : 222C 000E           		move.l	$E(a4),d1		; d1 - Number of sectors
(2)  596/    63DA : 2401                		move.l	d1,d2			; d2 - ORIGINAL filesize
(2)  597/    63DC : E089                		lsr.l	#8,d1			; Bitshift numof_sectors
(2)  598/    63DE : E689                		lsr.l	#3,d1
(2)  599/    63E0 : 4E75                		rts
(2)  600/    63E2 :                     .failed_srch:
(2)  601/    63E2 : 7000                		moveq	#0,d0
(2)  602/    63E4 : 4A40                		tst.w	d0
(2)  603/    63E6 : 4E75                		rts
(2)  604/    63E8 :                     
(2)  605/    63E8 :                     ; =====================================================================
(2)  606/    63E8 :                     ; ----------------------------------------------------------------
(2)  607/    63E8 :                     ; PCM sound
(2)  608/    63E8 :                     ; ----------------------------------------------------------------
(2)  609/    63E8 :                     
(2)  610/    63E8 :                     ; --------------------------------------------------------
(2)  611/    63E8 :                     ; CDPCM_Wait
(2)  612/    63E8 :                     ;
(2)  613/    63E8 :                     ; MUST Call this after writing any PCM register.
(2)  614/    63E8 :                     ; --------------------------------------------------------
(2)  615/    63E8 :                     
(2)  616/    63E8 :                     CDPCM_Wait:
(2)  617/    63E8 : 4E71                		nop
(2)  618/    63EA : 4E71                		nop
(2)  619/    63EC : 4E71                		nop
(2)  620/    63EE :                     ; 		move.l	d7,-(sp)
(2)  621/    63EE :                     ; 		move.w	#4,d7
(2)  622/    63EE :                     ; .WaitLoop:
(2)  623/    63EE :                     ; 		dbf	d7,.WaitLoop
(2)  624/    63EE :                     ; 		move.l	(sp)+,d7
(2)  625/    63EE : 4E75                		rts
(2)  626/    63F0 :                     
(2)  627/    63F0 :                     ; --------------------------------------------------------
(2)  628/    63F0 :                     ; CDPCM_Init
(2)  629/    63F0 :                     ; --------------------------------------------------------
(2)  630/    63F0 :                     
(2)  631/    63F0 :                     CDPCM_Init:
(2)  632/    63F0 :                     	; $0000-$7FFF is blank
(2)  633/    63F0 :                     	; $8000 is the Silence block until the
(2)  634/    63F0 :                     	;       streaming routine detects it and
(2)  635/    63F0 :                     	;       manually stops the channel
(2)  636/    63F0 :                     	; $8002-$FFFF is unused
(2)  637/    63F0 : 4DF9 FFFF 0000      		lea	(scpu_pcm),a6
(2)  638/    63F6 : 7000                		moveq	#0,d0
(2)  639/    63F8 : 72FF                		moveq	#-1,d1
(2)  640/    63FA : 183C 0080           		move.b	#$80,d4		; d4 - CTRL in memory mode
(2)  641/    63FE : 7E0F                		moveq	#$0F,d7		; $0000-$7FFF
(2)  642/    6400 : 4BEE 2001           		lea	$2001(a6),a5
(2)  643/    6404 :                     .clr_pwm:
(2)  644/    6404 : 1D44 000F           		move.b	d4,CTREG(a6)
(2)  645/    6408 :                     ; 		bsr	CDPCM_Wait
(2)  646/    6408 : 284D                		move.l	a5,a4
(2)  647/    640A : 3C3C 0FFC           		move.w	#$0FFC,d6
(2)  648/    640E : 1880                .wr_end:	move.b	d0,(a4)
(2)  649/    6410 : 548C                		addq.l	#2,a4
(2)  650/    6412 : 51CE FFFA           		dbf	d6,.wr_end
(2)  651/    6416 :                     	rept 4
(2)  652/    6416 :                     		move.b	d1,(a4)
(2)  653/    6416 :                     		addq.l	#2,a4
(2)  654/    6416 :                     	endm
(2)  652/    6416 : 1881                		move.b	d1,(a4)
(2)  653/    6418 : 548C                		addq.l	#2,a4
(2)  652/    641A : 1881                		move.b	d1,(a4)
(2)  653/    641C : 548C                		addq.l	#2,a4
(2)  652/    641E : 1881                		move.b	d1,(a4)
(2)  653/    6420 : 548C                		addq.l	#2,a4
(2)  652/    6422 : 1881                		move.b	d1,(a4)
(2)  653/    6424 : 548C                		addq.l	#2,a4
(2)  655/    6426 : 5204                		addq.b	#$01,d4
(2)  656/    6428 : 51CF FFDA           		dbf	d7,.clr_pwm
(2)  657/    642C : 183C 0088           		move.b	#$88,d4		; Make silence block
(2)  658/    6430 : 41FA 001A           		lea	.data_blk(pc),a0
(2)  659/    6434 : 1D44 000F           		move.b	d4,CTREG(a6)	; Slot $8000 for pre-silence
(2)  660/    6438 :                     ; 		bsr	CDPCM_Wait
(2)  661/    6438 : 7E1F                		moveq	#32-1,d7
(2)  662/    643A :                     .copy_data:
(2)  663/    643A : 1018                		move.b	(a0)+,d0
(2)  664/    643C : 1A80                		move.b	d0,(a5)
(2)  665/    643E : 548D                		addq.l	#2,a5
(2)  666/    6440 : 51CF FFF8           		dbf	d7,.copy_data
(2)  667/    6444 : 1D7C 00FF 0011      		move.b	#-1,ONREG(a6)
(2)  668/    644A : 609C                		bra	CDPCM_Wait
(2)  669/    644C :                     .data_blk:
(2)  670/    644C : 0000 0000 0000      		dc.b $00,$00,$00,$00,$00,$00,$00,$00
             6452 : 0000             
(2)  671/    6454 : 0000 0000 0000      		dc.b $00,$00,$00,$00,$00,$00,$00,$00
             645A : 0000             
(2)  672/    645C : FFFF FFFF FFFF      		dc.b $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
             6462 : FFFF             
(2)  673/    6464 : FFFF FFFF FFFF      		dc.b $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
             646A : FFFF             
(2)  674/    646C :                     		align 2
(2)  675/    646C :                     
(2)  676/    646C :                     ; --------------------------------------------------------
(2)  677/    646C :                     ; CDPCM_ReadTable
(2)  678/    646C :                     ; --------------------------------------------------------
(2)  679/    646C :                     
(2)  680/    646C :                     CDPCM_ReadTable:
(2)  681/    646C : 4DF8 6900           		lea	(RAM_CdSub_PcmBuff),a6
(2)  682/    6470 : 4BF8 6A40           		lea	(RAM_CdSub_PcmTable),a5
(2)  683/    6474 : 7E07                		moveq	#8-1,d7			; 8 channels
(2)  684/    6476 : 7C00                		moveq	#0,d6			; Starting channel number
(2)  685/    6478 :                     .get_tbl:
(2)  686/    6478 : 1A15                		move.b	(a5),d5
(2)  687/    647A : 0885 0002           		bclr	#2,d5			; Key-cut?
(2)  688/    647E : 6702                		beq.s	.no_keyoff
(2)  689/    6480 : 6122                		bsr	.cdcom_keyoff
(2)  690/    6482 :                     .no_keyoff:
(2)  691/    6482 : 0885 0001           		bclr	#1,d5			; Key-off?
(2)  692/    6486 : 6702                		beq.s	.no_keycut
(2)  693/    6488 : 611A                		bsr	.cdcom_keyoff
(2)  694/    648A :                     .no_keycut:
(2)  695/    648A : 0885 0000           		bclr	#0,d5			; Key-on?
(2)  696/    648E : 6702                		beq.s	.no_comm
(2)  697/    6490 : 611E                		bsr	.cdcom_keyon
(2)  698/    6492 :                     .no_comm:
(2)  699/    6492 : 1A85                		move.b	d5,(a5)
(2)  700/    6494 : DCFC 0028           		adda	#sizeof_cdpcm,a6	; Next PCM buffer
(2)  701/    6498 : DAFC 0001           		adda	#1,a5			; Next PCM table column
(2)  702/    649C : 5246                		addq.w	#1,d6
(2)  703/    649E : 51CF FFD8           		dbf	d7,.get_tbl
(2)  704/    64A2 :                     .dont_upd:
(2)  705/    64A2 : 4E75                		rts
(2)  706/    64A4 :                     
(2)  707/    64A4 :                     ; --------------------------------------------------------
(2)  708/    64A4 :                     ; pcmcom:
(2)  709/    64A4 :                     ; 0 - Playback bits: %0000PCOK /Pitchbend/keyCut/keyOff/KeyOn
(2)  710/    64A4 :                     ; 8 - Pitch MSB
(2)  711/    64A4 :                     ; 16 - Pitch LSB
(2)  712/    64A4 :                     ; 24 - Volume
(2)  713/    64A4 :                     ; 32 - Panning %RRRRLLLL
(2)  714/    64A4 :                     ; 40 - LoopEnable bit | 24-bit sample location in Sub-CPU area
(2)  715/    64A4 :                     ; 48
(2)  716/    64A4 :                     ; 56
(2)  717/    64A4 :                     .cdcom_keyoff:
(2)  718/    64A4 : 0DB9 0000 6A80      		bclr	d6,(RAM_CdSub_PcmEnbl).l
(2)  719/    64AA : 1CBC 00A0           		move.b	#$80|$20,cdpcm_flags(a6)
(2)  720/    64AE : 4E75                		rts
(2)  721/    64B0 :                     
(2)  722/    64B0 :                     ; a0 - table data
(2)  723/    64B0 :                     ; a1 - buffer
(2)  724/    64B0 :                     .cdcom_keyon:
(2)  725/    64B0 : 0885 0003           		bclr	#3,d5			; Effect update ONLY?
(2)  726/    64B4 : 665E                		bne	.effect_only
(2)  727/    64B6 : 61EC                		bsr.s	.cdcom_keyoff
(2)  728/    64B8 : 615E                		bsr.s	.effect_mod
(2)  729/    64BA : 7000                		moveq	#0,d0
(2)  730/    64BC : 1010                		move.b	(a0),d0		; 40
(2)  731/    64BE : 1600                		move.b	d0,d3
(2)  732/    64C0 : D0FC 0008           		adda	#8,a0
(2)  733/    64C4 : 0240 007F           		andi.w	#$7F,d0
(2)  734/    64C8 : 4840                		swap	d0
(2)  735/    64CA : 1010                		move.b	(a0),d0		; 48
(2)  736/    64CC : D0FC 0008           		adda	#8,a0
(2)  737/    64D0 : E148                		lsl.w	#8,d0
(2)  738/    64D2 : 1010                		move.b	(a0),d0		; 56
(2)  739/    64D4 : 2440                		move.l	d0,a2
(2)  740/    64D6 : 7000                		moveq	#0,d0
(2)  741/    64D8 : 7200                		moveq	#0,d1			; Read LEN
(2)  742/    64DA : 101A                		move.b	(a2)+,d0
(2)  743/    64DC : E158                		rol.w	#8,d0
(2)  744/    64DE : 101A                		move.b	(a2)+,d0
(2)  745/    64E0 : E058                		ror.w	#8,d0
(2)  746/    64E2 : 121A                		move.b	(a2)+,d1
(2)  747/    64E4 : 4841                		swap	d1
(2)  748/    64E6 : 8081                		or.l	d1,d0
(2)  749/    64E8 : 2D40 0020           		move.l	d0,cdpcm_nlen(a6)
(2)  750/    64EC : 7200                		moveq	#0,d1			; Read LEN
(2)  751/    64EE : 7000                		moveq	#0,d0
(2)  752/    64F0 : 101A                		move.b	(a2)+,d0
(2)  753/    64F2 : E158                		rol.w	#8,d0
(2)  754/    64F4 : 101A                		move.b	(a2)+,d0
(2)  755/    64F6 : E058                		ror.w	#8,d0
(2)  756/    64F8 : 121A                		move.b	(a2)+,d1
(2)  757/    64FA : 4841                		swap	d1
(2)  758/    64FC : 8081                		or.l	d1,d0
(2)  759/    64FE : 2D40 0024           		move.l	d0,cdpcm_nloop(a6)
(2)  760/    6502 : 2D4A 001C           		move.l	a2,cdpcm_nstart(a6)
(2)  761/    6506 : E31B                		rol.b	#1,d3
(2)  762/    6508 : 0203 0001           		andi.b	#1,d3
(2)  763/    650C : 863C 00C0           		or.b	#$C0,d3
(2)  764/    6510 : 1C83                		move.b	d3,cdpcm_flags(a6)
(2)  765/    6512 : 4E75                		rts
(2)  766/    6514 :                     .effect_only:
(2)  767/    6514 : 0016 0010           		or.b	#$10,cdpcm_flags(a6)
(2)  768/    6518 :                     .effect_mod:
(2)  769/    6518 : 204D                		move.l	a5,a0
(2)  770/    651A : D0FC 0008           		adda	#8,a0
(2)  771/    651E : 1010                		move.b	(a0),d0		; 8 - Pitch MSB
(2)  772/    6520 : D0FC 0008           		adda	#8,a0
(2)  773/    6524 : E148                		lsl.w	#8,d0
(2)  774/    6526 : 1010                		move.b	(a0),d0		; 16 - Pitch LSB
(2)  775/    6528 : D0FC 0008           		adda	#8,a0
(2)  776/    652C : 1210                		move.b	(a0),d1		; 24 - Volume
(2)  777/    652E : D0FC 0008           		adda	#8,a0
(2)  778/    6532 : 1410                		move.b	(a0),d2		; 32 - Panning
(2)  779/    6534 : D0FC 0008           		adda	#8,a0
(2)  780/    6538 : 3D40 000E           		move.w	d0,cdpcm_pitch(a6)
(2)  781/    653C : 1D41 000D           		move.b	d1,cdpcm_env(a6)
(2)  782/    6540 : 1D42 000C           		move.b	d2,cdpcm_pan(a6)
(2)  783/    6544 : 4E75                		rts
(2)  784/    6546 :                     
(2)  785/    6546 :                     ; --------------------------------------------------------
(2)  786/    6546 :                     ; PCM streaming
(2)  787/    6546 :                     ; --------------------------------------------------------
(2)  788/    6546 :                     
(2)  789/    6546 :                     CDPCM_Stream:
(2)  790/    6546 :                     ; 		movem.l	d0-a6,-(sp)
(2)  791/    6546 : 50F8 6A82           		st.b	(RAM_CdSub_PcmMidStrm).w
(2)  792/    654A : 610E                		bsr.s	CDPCM_Stream_Run
(2)  793/    654C : 4238 6A82           		clr.b	(RAM_CdSub_PcmMidStrm).w
(2)  794/    6550 :                     ; 		movem.l	(sp)+,d0-a6
(2)  795/    6550 : 4E75                		rts
(2)  796/    6552 :                     CDPCM_Stream_IRQ:
(2)  797/    6552 : 4A38 6A82           		tst.b	(RAM_CdSub_PcmMidStrm).w
(2)  798/    6556 : 6702                		beq.s	CDPCM_Stream_Run
(2)  799/    6558 : 4E75                		rts
(2)  800/    655A :                     CDPCM_Stream_Run:
(2)  801/    655A : 4DF8 6900           		lea	(RAM_CdSub_PcmBuff),a6
(2)  802/    655E : 4BF9 FFFF 0000      		lea	(scpu_pcm),a5
(2)  803/    6564 : 49ED 0023           		lea	$23(a5),a4			; <-- RAM-addr MSBs (ODDs)
(2)  804/    6568 : 7E07                		moveq	#8-1,d7				; 8 channels, 8 pseudo-buffers
(2)  805/    656A : 7C00                		moveq	#0,d6				; Current channel (also for BTST/BSET/BCLR)
(2)  806/    656C : 1A39 0000 6A80      		move.b	(RAM_CdSub_PcmEnbl).l,d5	; Global OFF/ON bits
(2)  807/    6572 : 4645                		not.w	d5				; reverse the bits
(2)  808/    6574 :                     .get_addr:
(2)  809/    6574 : 0816 0007           		btst	#7,cdpcm_flags(a6)
(2)  810/    6578 : 676E                		beq.s	.non_strm
(2)  811/    657A : 0896 0006           		bclr	#6,cdpcm_flags(a6)		; Restart bit?
(2)  812/    657E : 6706                		beq.s	.no_refill
(2)  813/    6580 : 6100 0140           		bsr	.first_fill
(2)  814/    6584 : 6062                		bra	.non_strm
(2)  815/    6586 :                     .no_refill:
(2)  816/    6586 : 0896 0005           		bclr	#5,cdpcm_flags(a6)
(2)  817/    658A : 660A                		bne.s	.force_off
(2)  818/    658C : 1614                		move.b	(a4),d3				; Get playback MSB
(2)  819/    658E : 6A10                		bpl.s	.keep_strm
(2)  820/    6590 : 0816 0000           		btst	#0,cdpcm_flags(a6)
(2)  821/    6594 : 660A                		bne.s	.keep_strm
(2)  822/    6596 :                     .force_off:
(2)  823/    6596 : 0DC5                		bset	d6,d5
(2)  824/    6598 : 1B45 0011           		move.b	d5,ONREG(a5)
(2)  825/    659C : 4216                		clr.b	cdpcm_flags(a6)
(2)  826/    659E : 6048                		bra.s	.non_strm
(2)  827/    65A0 :                     .keep_strm:
(2)  828/    65A0 : 0896 0004           		bclr	#4,cdpcm_flags(a6)
(2)  829/    65A4 : 6704                		beq.s	.non_upd
(2)  830/    65A6 : 6100 00E2           		bsr	.update_set
(2)  831/    65AA :                     .non_upd:
(2)  832/    65AA : 182E 0002           		move.b	cdpcm_strmhalf(a6),d4		; Check halfway $x0/$x4/$x8/$xC
(2)  833/    65AE : 0203 000E           		andi.b	#$0E,d3
(2)  834/    65B2 : B604                		cmp.b	d4,d3
(2)  835/    65B4 : 6632                		bne.s	.non_strm
(2)  836/    65B6 : 3803                		move.w	d3,d4
(2)  837/    65B8 : 5444                		addq.w	#$02,d4
(2)  838/    65BA : 0244 000E           		andi.w	#$0E,d4
(2)  839/    65BE : 1D44 0002           		move.b	d4,cdpcm_strmhalf(a6)
(2)  840/    65C2 : 206E 0008           		move.l	cdpcm_cread(a6),a0
(2)  841/    65C6 : 222E 0004           		move.l	cdpcm_clen(a6),d1
(2)  842/    65CA : E14C                		lsl.w	#8,d4				; << 8
(2)  843/    65CC : 263C 0000 0200      		move.l	#$0200,d3			; d3 - Block size
(2)  844/    65D2 : B87C 0E00           		cmp.w	#$0E00,d4			; Looping block?
(2)  845/    65D6 : 6606                		bne.s	.lowhalf
(2)  846/    65D8 : 96BC 0000 0004      		sub.l	#4,d3				; loop block is -4
(2)  847/    65DE :                     .lowhalf:
(2)  848/    65DE : 6120                		bsr	.make_blk_strm
(2)  849/    65E0 : 2D41 0004           		move.l	d1,cdpcm_clen(a6)
(2)  850/    65E4 : 2D48 0008           		move.l	a0,cdpcm_cread(a6)
(2)  851/    65E8 :                     .non_strm:
(2)  852/    65E8 : DCFC 0028           		adda	#sizeof_cdpcm,a6		; Next PCM buffer
(2)  853/    65EC : D8FC 0004           		adda	#4,a4				; Next MSB
(2)  854/    65F0 : 5246                		addq.w	#1,d6				; Next channel
(2)  855/    65F2 : 51CF FF80           		dbf	d7,.get_addr
(2)  856/    65F6 : 4645                		not.w	d5				; reverse return bits
(2)  857/    65F8 : 13C5 0000 6A80      		move.b	d5,(RAM_CdSub_PcmEnbl).l
(2)  858/    65FE : 4E75                		rts
(2)  859/    6600 :                     
(2)  860/    6600 :                     ; --------------------------------------------------------
(2)  861/    6600 :                     ; a0 - wave data to write
(2)  862/    6600 :                     ; d1 - channel current length
(2)  863/    6600 :                     ; d3 - block size
(2)  864/    6600 :                     ; d4 - current block slot to write
(2)  865/    6600 :                     ; d6 - current channel
(2)  866/    6600 :                     
(2)  867/    6600 :                     .make_blk_strm:
(2)  868/    6600 : 1006                		move.b	d6,d0
(2)  869/    6602 : 803C 0080           		or.b	#$80,d0
(2)  870/    6606 : 1B40 000F           		move.b	d0,CTREG(a5)
(2)  871/    660A :                     ; 		bsr	CDPCM_Wait
(2)  872/    660A : 43ED 2001           		lea	$2001(a5),a1
(2)  873/    660E : D844                		add.w	d4,d4
(2)  874/    6610 : D2C4                		adda	d4,a1
(2)  875/    6612 : 3803                		move.w	d3,d4
(2)  876/    6614 :                     ; 		lsr.w	#2,d3		; /4
(2)  877/    6614 : 5344                		subq.w	#1,d4
(2)  878/    6616 : 0816 0000           		btst	#0,cdpcm_flags(a6)
(2)  879/    661A : 672C                		beq	.end_point
(2)  880/    661C :                     
(2)  881/    661C :                     ; ----------------------------------------
(2)  882/    661C :                     ; Wave has loop
(2)  883/    661C :                     ; ----------------------------------------
(2)  884/    661C :                     
(2)  885/    661C :                     .loop_point:
(2)  886/    661C : 246E 0010           		movea.l	cdpcm_start(a6),a2
(2)  887/    6620 : 202E 0018           		move.l	cdpcm_loop(a6),d0
(2)  888/    6624 : D5C0                		add.l	d0,a2
(2)  889/    6626 : 242E 0014           		move.l	cdpcm_len(a6),d2
(2)  890/    662A : 9480                		sub.l	d0,d2
(2)  891/    662C :                     .loop_strm:
(2)  892/    662C : 5381                		subq.l	#1,d1
(2)  893/    662E : 6608                		bne.s	.strlen_it
(2)  894/    6630 : 204A                		move.l	a2,a0
(2)  895/    6632 : 2202                		move.l	d2,d1
(2)  896/    6634 : 2D41 0004           		move.l	d1,cdpcm_clen(a6)
(2)  897/    6638 :                     .strlen_it:
(2)  898/    6638 : 1018                		move.b	(a0)+,d0
(2)  899/    663A : 6100 0184           		bsr	CDPCM_WavToPcm
(2)  900/    663E : 1280                		move.b	d0,(a1)
(2)  901/    6640 :                     ; 		bsr	CDPCM_Wait
(2)  902/    6640 : 5489                		addq.l	#2,a1
(2)  903/    6642 : 51CC FFE8           		dbf	d4,.loop_strm
(2)  904/    6646 : 4E75                		rts
(2)  905/    6648 :                     
(2)  906/    6648 :                     ; ----------------------------------------
(2)  907/    6648 :                     ; Wave doesn't loop
(2)  908/    6648 :                     ; ----------------------------------------
(2)  909/    6648 :                     
(2)  910/    6648 :                     .end_point:
(2)  911/    6648 : 70FF                		moveq	#-1,d0
(2)  912/    664A : 5381                		subq.l	#1,d1
(2)  913/    664C : 6708                		beq.s	.stlen_it
(2)  914/    664E : 6B06                		bmi.s	.stlen_it
(2)  915/    6650 : 1018                		move.b	(a0)+,d0
(2)  916/    6652 : 6100 016C           		bsr	CDPCM_WavToPcm
(2)  917/    6656 :                     .stlen_it:
(2)  918/    6656 : 1280                		move.b	d0,(a1)
(2)  919/    6658 :                     ; 		bsr	CDPCM_Wait
(2)  920/    6658 : 5489                		addq.l	#2,a1
(2)  921/    665A : 51CC FFEC           		dbf	d4,.end_point
(2)  922/    665E : 4A81                		tst.l	d1
(2)  923/    6660 : 6A26                		bpl.s	.not_end
(2)  924/    6662 : 1006                		move.b	d6,d0
(2)  925/    6664 : 803C 00C0           		or.b	#$C0,d0
(2)  926/    6668 : 1B40 000F           		move.b	d0,CTREG(a5)
(2)  927/    666C : 6100 FD7A           		bsr	CDPCM_Wait
(2)  928/    6670 : 303C 8000           		move.w	#$8000,d0	; Relocate PCM to SILENCE block on LOOP -1
(2)  929/    6674 : 1B40 0009           		move.b	d0,LSL(a5)
(2)  930/    6678 : 6100 FD6E           		bsr	CDPCM_Wait
(2)  931/    667C : E048                		lsr.w	#8,d0
(2)  932/    667E : 1B40 000B           		move.b	d0,LSH(a5)
(2)  933/    6682 : 6100 FD64           		bsr	CDPCM_Wait
(2)  934/    6686 : 0D85                		bclr	d6,d5
(2)  935/    6688 :                     .not_end:
(2)  936/    6688 : 4E75                		rts
(2)  937/    668A :                     
(2)  938/    668A :                     ; --------------------------------------------------------
(2)  939/    668A :                     ; Channel changes
(2)  940/    668A :                     ; --------------------------------------------------------
(2)  941/    668A :                     
(2)  942/    668A :                     .update_set:
(2)  943/    668A : 1006                		move.b	d6,d0
(2)  944/    668C : 803C 00C0           		or.b	#$C0,d0
(2)  945/    6690 : 1B40 000F           		move.b	d0,CTREG(a5)
(2)  946/    6694 : 342E 000E           		move.w	cdpcm_pitch(a6),d2
(2)  947/    6698 : 1B42 0005           		move.b	d2,FDL(a5)
(2)  948/    669C : 6100 FD4A           		bsr	CDPCM_Wait
(2)  949/    66A0 : E04A                		lsr.w	#8,d2
(2)  950/    66A2 : 1B42 0007           		move.b	d2,FDH(a5)
(2)  951/    66A6 : 6100 FD40           		bsr	CDPCM_Wait
(2)  952/    66AA : 142E 000C           		move.b	cdpcm_pan(a6),d2	; Panning
(2)  953/    66AE : 1B42 0003           		move.b	d2,PAN(a5)
(2)  954/    66B2 : 6100 FD34           		bsr	CDPCM_Wait
(2)  955/    66B6 : 142E 000D           		move.b	cdpcm_env(a6),d2	; Envelope
(2)  956/    66BA : 1B42 0001           		move.b	d2,ENV(a5)
(2)  957/    66BE : 6000 FD28           		bra	CDPCM_Wait
(2)  958/    66C2 :                     
(2)  959/    66C2 :                     ; --------------------------------------------------------
(2)  960/    66C2 :                     ; First fill
(2)  961/    66C2 :                     ; --------------------------------------------------------
(2)  962/    66C2 :                     
(2)  963/    66C2 :                     .first_fill:
(2)  964/    66C2 : 0DC5                		bset	d6,d5
(2)  965/    66C4 : 1B45 0011           		move.b	d5,ONREG(a5)		; Stop channel first
(2)  966/    66C8 : 6100 FD1E           		bsr	CDPCM_Wait
(2)  967/    66CC : 2D6E 001C 0010      		move.l	cdpcm_nstart(a6),cdpcm_start(a6)
(2)  968/    66D2 : 2D6E 0020 0014      		move.l	cdpcm_nlen(a6),cdpcm_len(a6)
(2)  969/    66D8 : 2D6E 0024 0018      		move.l	cdpcm_nloop(a6),cdpcm_loop(a6)
(2)  970/    66DE :                     
(2)  971/    66DE : 206E 0010           		move.l	cdpcm_start(a6),a0	; Make first block
(2)  972/    66E2 : 222E 0014           		move.l	cdpcm_len(a6),d1
(2)  973/    66E6 : 6164                		bsr	.make_lblk
(2)  974/    66E8 : 2D48 0008           		move.l	a0,cdpcm_cread(a6)
(2)  975/    66EC : 2D41 0004           		move.l	d1,cdpcm_clen(a6)
(2)  976/    66F0 : 1006                		move.b	d6,d0
(2)  977/    66F2 : 803C 00C0           		or.b	#$C0,d0
(2)  978/    66F6 : 1B40 000F           		move.b	d0,CTREG(a5)
(2)  979/    66FA : 6100 FCEC           		bsr	CDPCM_Wait
(2)  980/    66FE : 618A                		bsr	.update_set
(2)  981/    6700 : 1006                		move.b	d6,d0
(2)  982/    6702 : E948                		lsl.w	#4,d0
(2)  983/    6704 : 1400                		move.b	d0,d2
(2)  984/    6706 : 1B40 000D           		move.b	d0,ST(a5)		; Start MSB
(2)  985/    670A : 6100 FCDC           		bsr	CDPCM_Wait
(2)  986/    670E : E148                		lsl.w	#8,d0
(2)  987/    6710 : 4A81                		tst.l	d1
(2)  988/    6712 : 6B0A                		bmi.s	.small_sampl
(2)  989/    6714 : 6708                		beq.s	.small_sampl
(2)  990/    6716 : 1D7C 0000 0002      		move.b	#0,cdpcm_strmhalf(a6)
(2)  991/    671C : 6012                		bra.s	.set_nonstop
(2)  992/    671E :                     
(2)  993/    671E :                     ; --------------------------------------------------------
(2)  994/    671E :                     
(2)  995/    671E :                     .small_sampl:
(2)  996/    671E : 0816 0000           		btst	#0,cdpcm_flags(a6)
(2)  997/    6722 : 6708                		beq.s	.set_endloop
(2)  998/    6724 : 262E 0018           		move.l	cdpcm_loop(a6),d3
(2)  999/    6728 : 2003                		move.l	d3,d0
(2) 1000/    672A : 6004                		bra	.set_nonstop
(2) 1001/    672C :                     .set_endloop:
(2) 1002/    672C : 303C 8000           		move.w	#$8000,d0		; BLANK WAVE pointer
(2) 1003/    6730 :                     .set_nonstop:
(2) 1004/    6730 : 1B40 0009           		move.b	d0,LSL(a5)
(2) 1005/    6734 : 6100 FCB2           		bsr	CDPCM_Wait
(2) 1006/    6738 : E048                		lsr.w	#8,d0
(2) 1007/    673A : 1B40 000B           		move.b	d0,LSH(a5)
(2) 1008/    673E : 6100 FCA8           		bsr	CDPCM_Wait
(2) 1009/    6742 : 0D85                		bclr	d6,d5
(2) 1010/    6744 : 1B45 0011           		move.b	d5,ONREG(a5)
(2) 1011/    6748 : 6000 FC9E           		bra	CDPCM_Wait
(2) 1012/    674C :                     
(2) 1013/    674C :                     ; --------------------------------------------------------
(2) 1014/    674C :                     ; a0 - Wave data
(2) 1015/    674C :                     ; a1 - Output to memory (set with CTREG first)
(2) 1016/    674C :                     ; d1 - Wave length counter
(2) 1017/    674C :                     ; d6 - current channel
(2) 1018/    674C :                     
(2) 1019/    674C :                     .make_lblk:
(2) 1020/    674C : 1006                		move.b	d6,d0		; Set channel as memory slot
(2) 1021/    674E : 803C 0080           		or.b	#$80,d0
(2) 1022/    6752 : 1B40 000F           		move.b	d0,CTREG(a5)
(2) 1023/    6756 : 6100 FC90           		bsr	CDPCM_Wait
(2) 1024/    675A : 43ED 2001           		lea	$2001(a5),a1
(2) 1025/    675E : 363C 0200           		move.w	#$200,d3	; BLOCK SIZE
(2) 1026/    6762 : E44B                		lsr.w	#2,d3		; /4
(2) 1027/    6764 : 5343                		subq.w	#1,d3
(2) 1028/    6766 :                     .wave_blkl:
(2) 1029/    6766 : 4A81                		tst.l	d1
(2) 1030/    6768 : 6B3E                		bmi.s	.fill_mode
(2) 1031/    676A :                     	rept 4
(2) 1032/    676A :                     		moveq	#-1,d0		; Set loop flag
(2) 1033/    676A :                     		subq.l	#1,d1		; Len counter
(2) 1034/    676A :                     		beq.s	.len_it		; If ran out of wave data, write -1 now.
(2) 1035/    676A :                     		move.b	(a0)+,d0	; Read wave and convert
(2) 1036/    676A :                     		bsr	CDPCM_WavToPcm
(2) 1037/    676A :                     .len_it:
(2) 1038/    676A :                     		move.b	d0,(a1)
(2) 1039/    676A :                     ; 		bsr	CDPCM_Wait
(2) 1040/    676A :                     		addq.l	#2,a1
(2) 1041/    676A :                     	endm
(2) 1032/    676A : 70FF                		moveq	#-1,d0		; Set loop flag
(2) 1033/    676C : 5381                		subq.l	#1,d1		; Len counter
(2) 1034/    676E : 6704                		beq.s	.len_it		; If ran out of wave data, write -1 now.
(2) 1035/    6770 : 1018                		move.b	(a0)+,d0	; Read wave and convert
(2) 1036/    6772 : 614C                		bsr	CDPCM_WavToPcm
(2) 1037/    6774 :                     .len_it:
(2) 1038/    6774 : 1280                		move.b	d0,(a1)
(2) 1039/    6776 :                     ; 		bsr	CDPCM_Wait
(2) 1040/    6776 : 5489                		addq.l	#2,a1
(2) 1032/    6778 : 70FF                		moveq	#-1,d0		; Set loop flag
(2) 1033/    677A : 5381                		subq.l	#1,d1		; Len counter
(2) 1034/    677C : 6704                		beq.s	.len_it		; If ran out of wave data, write -1 now.
(2) 1035/    677E : 1018                		move.b	(a0)+,d0	; Read wave and convert
(2) 1036/    6780 : 613E                		bsr	CDPCM_WavToPcm
(2) 1037/    6782 :                     .len_it:
(2) 1038/    6782 : 1280                		move.b	d0,(a1)
(2) 1039/    6784 :                     ; 		bsr	CDPCM_Wait
(2) 1040/    6784 : 5489                		addq.l	#2,a1
(2) 1032/    6786 : 70FF                		moveq	#-1,d0		; Set loop flag
(2) 1033/    6788 : 5381                		subq.l	#1,d1		; Len counter
(2) 1034/    678A : 6704                		beq.s	.len_it		; If ran out of wave data, write -1 now.
(2) 1035/    678C : 1018                		move.b	(a0)+,d0	; Read wave and convert
(2) 1036/    678E : 6130                		bsr	CDPCM_WavToPcm
(2) 1037/    6790 :                     .len_it:
(2) 1038/    6790 : 1280                		move.b	d0,(a1)
(2) 1039/    6792 :                     ; 		bsr	CDPCM_Wait
(2) 1040/    6792 : 5489                		addq.l	#2,a1
(2) 1032/    6794 : 70FF                		moveq	#-1,d0		; Set loop flag
(2) 1033/    6796 : 5381                		subq.l	#1,d1		; Len counter
(2) 1034/    6798 : 6704                		beq.s	.len_it		; If ran out of wave data, write -1 now.
(2) 1035/    679A : 1018                		move.b	(a0)+,d0	; Read wave and convert
(2) 1036/    679C : 6122                		bsr	CDPCM_WavToPcm
(2) 1037/    679E :                     .len_it:
(2) 1038/    679E : 1280                		move.b	d0,(a1)
(2) 1039/    67A0 :                     ; 		bsr	CDPCM_Wait
(2) 1040/    67A0 : 5489                		addq.l	#2,a1
(2) 1042/    67A2 : 51CB FFC2           		dbf	d3,.wave_blkl
(2) 1043/    67A6 : 4E75                		rts
(2) 1044/    67A8 :                     ; Fill unused block
(2) 1045/    67A8 :                     .fill_mode:
(2) 1046/    67A8 : 70FF                		moveq	#-1,d0
(2) 1047/    67AA :                     .loop_blkl:
(2) 1048/    67AA :                     	rept 4
(2) 1049/    67AA :                     		move.b	d0,(a1)
(2) 1050/    67AA :                     ; 		bsr	CDPCM_Wait
(2) 1051/    67AA :                     		addq.l	#2,a1
(2) 1052/    67AA :                     	endm
(2) 1049/    67AA : 1280                		move.b	d0,(a1)
(2) 1050/    67AC :                     ; 		bsr	CDPCM_Wait
(2) 1051/    67AC : 5489                		addq.l	#2,a1
(2) 1049/    67AE : 1280                		move.b	d0,(a1)
(2) 1050/    67B0 :                     ; 		bsr	CDPCM_Wait
(2) 1051/    67B0 : 5489                		addq.l	#2,a1
(2) 1049/    67B2 : 1280                		move.b	d0,(a1)
(2) 1050/    67B4 :                     ; 		bsr	CDPCM_Wait
(2) 1051/    67B4 : 5489                		addq.l	#2,a1
(2) 1049/    67B6 : 1280                		move.b	d0,(a1)
(2) 1050/    67B8 :                     ; 		bsr	CDPCM_Wait
(2) 1051/    67B8 : 5489                		addq.l	#2,a1
(2) 1053/    67BA : 51CB FFEE           		dbf	d3,.loop_blkl
(2) 1054/    67BE : 4E75                		rts
(2) 1055/    67C0 :                     
(2) 1056/    67C0 :                     ; --------------------------------------------------------
(2) 1057/    67C0 :                     
(2) 1058/    67C0 :                     CDPCM_WavToPcm:
(2) 1059/    67C0 : 0240 00FF           		andi.w	#$FF,d0
(2) 1060/    67C4 : 103B 0004           		move.b	.wave_list(pc,d0.w),d0
(2) 1061/    67C8 : 4E75                		rts
(2) 1062/    67CA :                     .wave_list:
(2) 1063/    67CA : FEFE FDFC FBFA      	dc.b $FE,$FE,$FD,$FC,$FB,$FA,$F9,$F8,$F7,$F6,$F5,$F4,$F3,$F2,$F1,$F0
             67D0 : F9F8 F7F6 F5F4 
             67D6 : F3F2 F1F0          
(2) 1064/    67DA : EFEE EDEC EBEA      	dc.b $EF,$EE,$ED,$EC,$EB,$EA,$E9,$E8,$E7,$E6,$E5,$E4,$E3,$E2,$E1,$E0
             67E0 : E9E8 E7E6 E5E4 
             67E6 : E3E2 E1E0          
(2) 1065/    67EA : DFDE DDDC DBDA      	dc.b $DF,$DE,$DD,$DC,$DB,$DA,$D9,$D8,$D7,$D6,$D5,$D4,$D3,$D2,$D1,$D0
             67F0 : D9D8 D7D6 D5D4 
             67F6 : D3D2 D1D0          
(2) 1066/    67FA : CFCE CDCC CBCA      	dc.b $CF,$CE,$CD,$CC,$CB,$CA,$C9,$C8,$C7,$C6,$C5,$C4,$C3,$C2,$C1,$C0
             6800 : C9C8 C7C6 C5C4 
             6806 : C3C2 C1C0          
(2) 1067/    680A : BFBE BDBC BBBA      	dc.b $BF,$BE,$BD,$BC,$BB,$BA,$B9,$B8,$B7,$B6,$B5,$B4,$B3,$B2,$B1,$B0
             6810 : B9B8 B7B6 B5B4 
             6816 : B3B2 B1B0          
(2) 1068/    681A : AFAE ADAC ABAA      	dc.b $AF,$AE,$AD,$AC,$AB,$AA,$A9,$A8,$A7,$A6,$A5,$A4,$A3,$A2,$A1,$A0
             6820 : A9A8 A7A6 A5A4 
             6826 : A3A2 A1A0          
(2) 1069/    682A : 9F9E 9D9C 9B9A      	dc.b $9F,$9E,$9D,$9C,$9B,$9A,$99,$98,$97,$96,$95,$94,$93,$92,$91,$90
             6830 : 9998 9796 9594 
             6836 : 9392 9190          
(2) 1070/    683A : 8F8E 8D8C 8B8A      	dc.b $8F,$8E,$8D,$8C,$8B,$8A,$89,$88,$87,$86,$85,$84,$83,$82,$81,$80
             6840 : 8988 8786 8584 
             6846 : 8382 8180          
(2) 1071/    684A : 0001 0203 0405      	dc.b $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0A,$0B,$0C,$0D,$0E,$0F
             6850 : 0607 0809 0A0B 
             6856 : 0C0D 0E0F          
(2) 1072/    685A : 1011 1213 1415      	dc.b $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1A,$1B,$1C,$1D,$1E,$1F
             6860 : 1617 1819 1A1B 
             6866 : 1C1D 1E1F          
(2) 1073/    686A : 2021 2223 2425      	dc.b $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2A,$2B,$2C,$2D,$2E,$2F
             6870 : 2627 2829 2A2B 
             6876 : 2C2D 2E2F          
(2) 1074/    687A : 3031 3233 3435      	dc.b $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3A,$3B,$3C,$3D,$3E,$3F
             6880 : 3637 3839 3A3B 
             6886 : 3C3D 3E3F          
(2) 1075/    688A : 4041 4243 4445      	dc.b $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4A,$4B,$4C,$4D,$4E,$4F
             6890 : 4647 4849 4A4B 
             6896 : 4C4D 4E4F          
(2) 1076/    689A : 5051 5253 5455      	dc.b $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5A,$5B,$5C,$5D,$5E,$5F
             68A0 : 5657 5859 5A5B 
             68A6 : 5C5D 5E5F          
(2) 1077/    68AA : 6061 6263 6465      	dc.b $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6A,$6B,$6C,$6D,$6E,$6F
             68B0 : 6667 6869 6A6B 
             68B6 : 6C6D 6E6F          
(2) 1078/    68BA : 7071 7273 7475      	dc.b $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7A,$7B,$7C,$7D,$7E,$7F
             68C0 : 7677 7879 7A7B 
             68C6 : 7C7D 7E7F          
(2) 1079/    68CA :                     	align 2
(2) 1080/    68CA :                     
(2) 1081/    68CA :                     ; --------------------------------------------------------
(2) 1082/    68CA :                     ; CDPCM_Update
(2) 1083/    68CA :                     ;
(2) 1084/    68CA :                     ; Only checks for playback changes
(2) 1085/    68CA :                     ; --------------------------------------------------------
(2) 1086/    68CA :                     
(2) 1087/    68CA :                     ; CDPCM_Update:
(2) 1088/    68CA :                     ; 		lea	(RAM_CdSub_PcmBuff),a6
(2) 1089/    68CA :                     ; 		lea	(scpu_pcm),a5
(2) 1090/    68CA :                     ; 		lea	$23(a5),a4			; <-- RAM-addr MSBs (ODDs)
(2) 1091/    68CA :                     ; 		moveq	#8-1,d7				; 8 channels, 8 pseudo-buffers
(2) 1092/    68CA :                     ; 		moveq	#0,d6				; Current channel (also for BTST/BSET/BCLR)
(2) 1093/    68CA :                     ; 		move.b	(RAM_CdSub_PcmEnbl).l,d5	; Global OFF/ON bits
(2) 1094/    68CA :                     ; 		not.w	d5				; reverse the bits
(2) 1095/    68CA :                     ; .get_addr:
(2) 1096/    68CA :                     ; 		btst	#7,cdpcm_flags(a6)	; Channel active?
(2) 1097/    68CA :                     ; 		beq	.non_upd
(2) 1098/    68CA :                     ; 		bclr	#6,cdpcm_flags(a6)	; Restart bit?
(2) 1099/    68CA :                     ; 		beq.s	.no_refill
(2) 1100/    68CA :                     ; 		bsr	.first_fill
(2) 1101/    68CA :                     ; .no_refill:
(2) 1102/    68CA :                     ;
(2) 1103/    68CA :                     ; ; .stop_bit:	bclr	#5,cdpcm_flags(a6)	; Stop bit?
(2) 1104/    68CA :                     ; ; 		beq.s	.not_stop
(2) 1105/    68CA :                     ; ; 		bset	d6,d5
(2) 1106/    68CA :                     ; ; 		move.b	d5,ONREG(a5)		; Stop channel first
(2) 1107/    68CA :                     ; ; ; 		bsr	CDPCM_Wait
(2) 1108/    68CA :                     ; ; 		clr.b	cdpcm_flags(a6)
(2) 1109/    68CA :                     ; ; .not_stop:
(2) 1110/    68CA :                     ; ; 		bclr	#4,cdpcm_flags(a6)
(2) 1111/    68CA :                     ; ; 		beq.s	.non_upd
(2) 1112/    68CA :                     ; ; 		bsr	.update_set
(2) 1113/    68CA :                     ; ; .non_upd:
(2) 1114/    68CA :                     ; 		adda	#sizeof_cdpcm,a6	; Next PCM buffer
(2) 1115/    68CA :                     ; 		adda	#4,a4			; Next MSB
(2) 1116/    68CA :                     ; 		addq.w	#1,d6			; Next channel
(2) 1117/    68CA :                     ; 		dbf	d7,.get_addr
(2) 1118/    68CA :                     ; .non_chng:
(2) 1119/    68CA :                     ; 		not.w	d5			; reverse return bits
(2) 1120/    68CA :                     ; 		move.b	d5,(RAM_CdSub_PcmEnbl).l
(2) 1121/    68CA :                     ; 		rts
(2) 1122/    68CA :                     
(2) 1123/    68CA :                     ; ====================================================================
(2) 1124/    68CA :                     ; ----------------------------------------------------------------
(2) 1125/    68CA :                     ; Internal buffers
(2) 1126/    68CA :                     ; ----------------------------------------------------------------
(2) 1127/    68CA :                     
(2) 1128/    68CA :                     ; 			align $80
(2) 1129/    68CA :                     
(2) 1130/    68CA :                     ; ====================================================================
(2) 1131/    68CA :                     ; ----------------------------------------------------------------
(2) 1132/    68CA :                     ; RAM
(2) 1133/    68CA :                     ; ----------------------------------------------------------------
(2) 1134/    68CA :                     
(2) 1135/    68CA :                     			align $80
(2) 1136/    6900 :                     SP_RAM:
(2) 1137/    6900 : (MACRO)              			strct SP_RAM
(2) 1137/    6900 : =$6900               GLBL_LASTPC     set *
(2) 1137/    1100 :                                     dephase
(2) 1137/    6900 :                                     phase SP_RAM
(2) 1137/    6900 : =$6900               GLBL_LASTORG    set *
(2) 1138/    6900 :                     RAM_CdSub_PcmBuff	ds.b 8*sizeof_cdpcm
(2) 1139/    6A40 :                     RAM_CdSub_PcmTable	ds.b 8*8		; Z80 table
(2) 1140/    6A80 :                     RAM_CdSub_PcmEnbl	ds.b 1			; PCM enable bits
(2) 1141/    6A81 :                     RAM_CdSub_PcmPlay	ds.b 1
(2) 1142/    6A82 :                     RAM_CdSub_PcmMidStrm	ds.b 1
(2) 1143/    6A83 :                     RAM_CdSub_PcmTblUpd	ds.b 1
(2) 1144/    6A84 :                     ; BRAM_Buff		ds.b $640
(2) 1145/    6A84 :                     ISO_Filelist		ds.b $800*$10
(2) 1146/    EA84 :                     ISO_Output		ds.b $800*$10
(2) 1147/   16A84 :                     RAM_CdSub_FsBuff	ds.l $20
(2) 1148/   16B04 :                     sizeof_subcpu		ds.l 0
(2) 1149/   16B04 : (MACRO)              			endstrct
(2) 1149/    6900 :                                     org GLBL_LASTORG
(2) 1149/    6900 :                                     phase GLBL_LASTPC
(2) 1150/    6900 :                     
(2) 1151/    6900 : (MACRO)              			erreport "SUB-CPU IP",sizeof_subcpu,$20000
(2) 1152/    6900 :                     
(2) 1153/    6900 :                     ; ====================================================================
(2) 1154/    6900 :                     ; ----------------------------------------------------------------
(2) 1155/    6900 :                     ; SUB-CPU data
(2) 1156/    6900 :                     ; ----------------------------------------------------------------
(2) 1157/    6900 :                     
(2) 1158/    6900 :                     			dephase
(2) 1159/   20000 :                     			phase $20000
(2) 1160/   20000 :                     SUBCPU_DATA:
(2) 1161/    6900 :                     			dephase
(2) 1162/    1100 :                     			dephase
(2) 1163/    1100 :                     
(1)   73/    1100 :                     SP_End:
(1)   74/    1100 :                     		align 2
(1)   75/    1100 :                     
(1)   76/    1100 :                     ; ====================================================================
(1)   77/    1100 :                     ; ----------------------------------------------------------------
(1)   78/    1100 :                     ; Super-jump to a section already loaded
(1)   79/    1100 :                     ; on RAM
(1)   80/    1100 :                     ; ----------------------------------------------------------------
(1)   81/    1100 :                     
(1)   82/    1100 :                     		align $2000-$600
(1)   83/    1A00 :                     MCD_Main:
(1)   84/    1A00 :                     
     121/    1A00 :                     mcdin_top:
     122/    1A00 : 41FA 1FCC           		lea	Md_SysCode(pc),a0			; Transfer SYSTEM subs
     123/    1A04 : 43F9 FFFF 0000      		lea	(RAM_SystemCode),a1
     124/    1A0A : 303C 15FF           		move.w	#((Md_SysCode_e-Md_SysCode))-1,d0
     125/    1A0E :                     .copy_1:
     126/    1A0E : 12D8                		move.b	(a0)+,(a1)+
     127/    1A10 : 51C8 FFFC           		dbf	d0,.copy_1
     131/    1A14 : 41F8 A004           		lea	(RAM_MdVideo),a0			; Clean our "work" RAM starting from here
     132/    1A18 : 223C FFFF D80C      		move.l	#sizeof_mdram,d1
     133/    1A1E : 7000                		moveq	#0,d0
     134/    1A20 : 30C0                .loop_ram:	move.w	d0,(a0)+
     135/    1A22 : B1C1                		cmp.l	d1,a0
     136/    1A24 : 65FA                		bcs.s	.loop_ram
     137/    1A26 : 4EB9 FFFF 0000      		jsr	(Sound_init).l				; Init Sound driver (FIRST)
     138/    1A2C : 4EB9 FFFF 02A2      		jsr	(Video_init).l				; Init Video
     139/    1A32 : 4EB9 FFFF 13EE      		jsr	(System_McdSubWait).l			; Wait Sub-CPU first.
     140/    1A38 : 4EB9 FFFF 0F36      		jsr	(System_Init).l				; Init System
     141/    1A3E : 33FC 0000 FFFF      		move.w	#0,(RAM_ScreenMode).l			; Start at screen 0
             1A44 : C458             
     142/    1A46 : 4EF9 FFFF 159C      		jmp	(Md_ReadModes).l			; Go to SCREENJUMP section
     143/FFFFFFFFFFFF204C :                     		phase $FFFF0600+*
     144/FFFFFFFFFFFF204C :                     Z80_CODE:	include "sound/driver/gema_zdrv.asm"		; Z80 code loaded once on boot.
(1)    1/FFFFFFFFFFFF204C :                     ; ===========================================================================
(1)    2/FFFFFFFFFFFF204C :                     ; -------------------------------------------------------------------
(1)    3/FFFFFFFFFFFF204C :                     ; GEMA/Nikona Z80 code v0.9
(1)    4/FFFFFFFFFFFF204C :                     ; by GenesisFan64 2023-2024
(1)    5/FFFFFFFFFFFF204C :                     ; -------------------------------------------------------------------
(1)    6/FFFFFFFFFFFF204C :                     
(1)    7/       0 :                     		phase 0
(1)    8/       0 :                     		cpu Z80		; Enter Z80 CPU
(1)    9/       0 :                     
(1)   10/       0 :                     ; --------------------------------------------------------
(1)   11/       0 :                     ; SETTINGS
(1)   12/       0 :                     ; --------------------------------------------------------
(1)   13/       0 :                     
(1)   14/       0 :                     ; !! = HARDCODED
(1)   15/       0 : =8H                  MAX_TRFRPZ	equ 8		; !! Max transferRom packets(bytes) **AFFECTS WAVE QUALITY**
(1)   16/       0 : =20H                 MAX_TRKCHN	equ 32		; !! Max internal shared tracker channel slots *** LIMTED to 32 ***
(1)   17/       0 : =20H                 MAX_RCACH	equ 20h		; !! Max storage for ROM pattern data *** 1-BIT SIZES ONLY, MUST BE ALIGNED ***
(1)   18/       0 : =8H                  MAX_BUFFNTRY	equ 4*2		; !! nikona_BuffList buffer entry size
(1)   19/       0 : =18H                 MAX_TBLSIZE	equ 18h		; Maximum size for chip tables (MINIMUM: 10h)
(1)   20/       0 : =1AH                 MAX_TRKINDX	equ 26		; Max channel indexes per buffer: 4PSG+6FM+8PCM+8PWM
(1)   21/       0 : =10H                 MAX_ZCMND	equ 10h		; Size of command array ** 1-bit SIZES ONLY ** (68k uses this label too)
(1)   22/       0 :                     
(1)   23/       0 :                     ; Debug:
(1)   24/       0 : =0H                  ZSET_TESTME	equ 0		; Set to 1 to check the DAC playback quality
(1)   25/       0 :                     
(1)   26/       0 :                     ; --------------------------------------------------------
(1)   27/       0 :                     ; Structs
(1)   28/       0 :                     ; --------------------------------------------------------
(1)   29/       0 :                     
(1)   30/       0 :                     ; trkBuff struct
(1)   31/       0 :                     ;
(1)   32/       0 :                     ; trk_Status: %ERP- V--0
(1)   33/       0 :                     ; E - enabled
(1)   34/       0 :                     ; R - Init|Restart track
(1)   35/       0 :                     ; P - refill-on-playback
(1)   36/       0 :                     ; V - volume change flag
(1)   37/       0 :                     ; 0 - Use global sub-beats
(1)   38/       0 : =0H                  trk_Status	equ 00h	; ** Track Status and Flags (MUST BE at 00h)
(1)   39/       0 : =1H                  trk_SeqId	equ 01h ; ** Track ID to play.
(1)   40/       0 : =2H                  trk_SetBlk	equ 02h	; ** Start on this block
(1)   41/       0 : =3H                  trk_TickSet	equ 03h	; ** Ticks for this track
(1)   42/       0 : =4H                  trk_Blocks	equ 04h ; ** [W] Current track's blocks
(1)   43/       0 : =6H                  trk_Patt	equ 06h ; ** [W] Current track's heads and patterns
(1)   44/       0 : =8H                  trk_Cach	equ 08h	; ** [W] Current track's cache notedata
(1)   45/       0 : =0AH                 trk_Read	equ 0Ah	; [W] Track current pattern read
(1)   46/       0 : =0CH                 trk_Rows	equ 0Ch	; [W] Track row counter
(1)   47/       0 : =0EH                 trk_VolMaster	equ 0Eh ; [W] Master volume for this track slot (00-max), +80h update
(1)   48/       0 : =10H                 trk_cachHalf	equ 10h ; ROM-cache halfcheck
(1)   49/       0 : =11H                 trk_rowPause	equ 11h	; Row-pause timer
(1)   50/       0 : =12H                 trk_tickTmr	equ 12h	; Ticks timer
(1)   51/       0 : =13H                 trk_currBlk	equ 13h	; Current block
(1)   52/       0 : =14H                 trk_Priority	equ 14h ; Priority level for this buffer
(1)   53/       0 : =15H                 trk_BankIns	equ 15h ; Instrument bank
(1)   54/       0 : =16H                 trk_BankHeads	equ 16h ; Header bank
(1)   55/       0 : =17H                 trk_BankBlk	equ 17h	; Block bank
(1)   56/       0 : =18H                 trk_MaxChnl	equ 18h ; MAX channels used in this track
(1)   57/       0 : =19H                 trk_VolFdTarget	equ 19h	; Target fade volume
(1)   58/       0 : =1AH                 trk_RomPattRead	equ 1Ah ; [3b] ROM current pattern data to be cache'd
(1)   59/       0 : =1DH                 trk_RomPatt	equ 1Dh ; [3b] ROM BASE pattern data
(1)   60/       0 : =20H                 trk_RomInst	equ 20h ; [3b] ROM instrument data
(1)   61/       0 : =23H                 trk_RomBlks	equ 23h ; [3b] ROM blocks data
(1)   62/       0 : =26H                 trk_ChnIndx	equ 26h	; CHANNEL INDEXES START HERE
(1)   63/       0 :                     
(1)   64/       0 :                     ; chnBuff struct: 8 bytes ONLY
(1)   65/       0 :                     ;
(1)   66/       0 :                     ; chnl_Flags: E0LRevin
(1)   67/       0 :                     ; E  - Channel is active
(1)   68/       0 :                     ; LR - Global left/Right panning bits (reverse bits: 0-ON 1-OFF)
(1)   69/       0 :                     ; e  - Effect*
(1)   70/       0 :                     ; v  - Volume*
(1)   71/       0 :                     ; i  - Intrument*
(1)   72/       0 :                     ; n  - Note*
(1)   73/       0 : =0H                  chnl_Flags	equ 0	; Playback flags ** DON'T MOVE THIS **
(1)   74/       0 : =1H                  chnl_Chip	equ 1	; %ccccpppp c - Current Chip ID / p - Priority level
(1)   75/       0 : =2H                  chnl_Note	equ 2
(1)   76/       0 : =3H                  chnl_Ins	equ 3	; Starting from 1, 0 is invalid
(1)   77/       0 : =4H                  chnl_Vol	equ 4	; MAX to MIN: 40h-00h
(1)   78/       0 : =5H                  chnl_EffId	equ 5
(1)   79/       0 : =6H                  chnl_EffArg	equ 6
(1)   80/       0 : =7H                  chnl_Type	equ 7	; Impulse-note update bits
(1)   81/       0 :                     
(1)   82/       0 :                     ; --------------------------------------------------------
(1)   83/       0 :                     ; Variables
(1)   84/       0 :                     ; --------------------------------------------------------
(1)   85/       0 :                     
(1)   86/       0 :                     ; Z80 opcode labels for the wave playback routines
(1)   87/       0 : =0H                  zopcNop		equ 00h
(1)   88/       0 : =8H                  zopcEx		equ 08h
(1)   89/       0 : =0C9H                zopcRet		equ 0C9h
(1)   90/       0 : =0D9H                zopcExx		equ 0D9h		; (dac_me ONLY)
(1)   91/       0 : =0F5H                zopcPushAf	equ 0F5h		; (dac_fill ONLY)
(1)   92/       0 :                     
(1)   93/       0 :                     ; PSG external control
(1)   94/       0 : =0H                  COM		equ 0
(1)   95/       0 : =4H                  LEV		equ 4
(1)   96/       0 : =8H                  ATK		equ 8
(1)   97/       0 : =0CH                 DKY		equ 12
(1)   98/       0 : =10H                 SLV		equ 16
(1)   99/       0 : =14H                 RRT		equ 20
(1)  100/       0 : =18H                 MODE		equ 24
(1)  101/       0 : =1CH                 DTL		equ 28
(1)  102/       0 : =20H                 DTH		equ 32
(1)  103/       0 : =24H                 ALV		equ 36
(1)  104/       0 : =28H                 FLG		equ 40
(1)  105/       0 : =2CH                 TMR		equ 44
(1)  106/       0 : =30H                 PVOL		equ 48
(1)  107/       0 : =34H                 PARP		equ 52
(1)  108/       0 : =38H                 PTMR		equ 56
(1)  109/       0 :                     
(1)  110/       0 :                     ; PWM control
(1)  111/       0 :                     ; PWCOM		equ 0
(1)  112/       0 :                     ; PWPTH_V	equ 8	; Volume | Pitch MSB (VVVVVVPPb)
(1)  113/       0 :                     ; PWPHL		equ 16	; Pitch LSB
(1)  114/       0 :                     ; PWOUTF	equ 24	; Output mode/bits | 32-bit address (%SlLRxiix) ii=$02 or $06
(1)  115/       0 :                     ; PWINSH	equ 32	; **
(1)  116/       0 :                     ; PWINSM	equ 40	; **
(1)  117/       0 :                     ; PWINSL	equ 48	; **
(1)  118/       0 :                     
(1)  119/       0 :                     ; ====================================================================
(1)  120/       0 :                     ; --------------------------------------------------------
(1)  121/       0 :                     ; Code starts here
(1)  122/       0 :                     ; --------------------------------------------------------
(1)  123/       0 :                     
(1)  124/       0 : F3                  		di			; Disable interrputs first
(1)  125/       1 : ED 56               		im	1		; Set Interrupt mode 1
(1)  126/       3 : 31 00 20            		ld	sp,2000h	; Set stack at the end of Z80
(1)  127/       6 : 18 48               		jr	z80_init	; Jump to z80_init
(1)  128/       8 :                     
(1)  129/       8 :                     ; --------------------------------------------------------
(1)  130/       8 :                     ; RST 8 (dac_me)
(1)  131/       8 :                     ; *** self-modifiable code ***
(1)  132/       8 :                     ;
(1)  133/       8 :                     ; Writes wave data to DAC using data stored
(1)  134/       8 :                     ; on the wave buffer, call this routine every 6 or 8
(1)  135/       8 :                     ; instructions to keep the samplerate stable.
(1)  136/       8 :                     ;
(1)  137/       8 :                     ; Input (EXX):
(1)  138/       8 :                     ;  c - WAVE buffer MSB
(1)  139/       8 :                     ; de - Pitch (xx.00)
(1)  140/       8 :                     ; h  - WAVE buffer LSB (as xx.00)
(1)  141/       8 :                     ;
(1)  142/       8 :                     ; Uses (EXX):
(1)  143/       8 :                     ; b
(1)  144/       8 :                     ;
(1)  145/       8 :                     ; Notes:
(1)  146/       8 :                     ; ONLY USE dac_on and dac_off to control
(1)  147/       8 :                     ; wave playback.
(1)  148/       8 :                     ;
(1)  149/       8 :                     ; call dac_on to enable wave playback, locks FM6
(1)  150/       8 :                     ; and
(1)  151/       8 :                     ; call dac_off to disable wave and unlock FM6.
(1)  152/       8 :                     ; --------------------------------------------------------
(1)  153/       8 :                     
(1)  154/       8 :                     ; Samplerate is at 16000hz with minimal quality loss.
(1)  155/       8 :                     ; 		org 8
(1)  156/       8 : D9                  dac_me:		exx			; * swap regs <-- Changes between EXX(play) and RET(stop)
(1)  157/       9 : 08                  		ex	af,af'		; Swap af
(1)  158/       A : 45                  		ld	b,l		; Save pitch .00 to b
(1)  159/       B : 6C                  		ld	l,h		; l - xx.00 to 00xx
(1)  160/       C : 61                  		ld	h,c		; h - Wave buffer MSB + 00xx
(1)  161/       D : 3E 2A               		ld	a,2Ah		; YM register 2Ah
(1)  162/       F : 32 00 40            		ld	(Zym_ctrl_1),a	; Set DAC write
(1)  163/      12 : 7E                  		ld	a,(hl)		; Read wave byte
(1)  164/      13 : 32 01 40            		ld	(Zym_data_1),a	; Write it to DAC
(1)  165/      16 : 65                  		ld	h,l		; get hl back
(1)  166/      17 : 68                  		ld	l,b		; Get .00 back from b to l
(1)  167/      18 : 19                  		add	hl,de		; Pitch increment hl
(1)  168/      19 : 08                  		ex	af,af'		; Return af
(1)  169/      1A : D9                  		exx			; * swap regs
(1)  170/      1B : C9                  		ret
(1)  171/      1C :                     
(1)  172/      1C :                     ; --------------------------------------------------------
(1)  173/      1C :                     ; 1Ch - Master tracklist pointer
(1)  174/      1C :                     gemaMstrListPos:
(1)  175/      1C : 00                  		db 0				; ** 32-bit 68k address **
(1)  176/      1D : 00                  		db 0
(1)  177/      1E : 00                  		db 0
(1)  178/      1F : 00                  		db 0
(1)  179/      20 :                     
(1)  180/      20 :                     ; --------------------------------------------------------
(1)  181/      20 :                     ; RST 20h (dac_me)
(1)  182/      20 :                     ; *** self-modifiable code ***
(1)  183/      20 :                     ;
(1)  184/      20 :                     ; Checks if the WAVE cache needs refilling to keep
(1)  185/      20 :                     ; it playing.
(1)  186/      20 :                     ; --------------------------------------------------------
(1)  187/      20 :                     
(1)  188/      20 :                     ; 		org 20h
(1)  189/      20 : F5                  dac_fill:	push	af		; <-- Changes between PUSH AF(play) and RET(stop)
(1)  190/      21 : 3A 83 1C            		ld	a,(dDacFifoMid)	; a - Get half-way value
(1)  191/      24 : D9                  		exx			; * swap regs
(1)  192/      25 : AC                  		xor	h		; Grab LSB.00
(1)  193/      26 : D9                  		exx			; * swap regs
(1)  194/      27 : E6 80               		and	80h		; Check if bit changed
(1)  195/      29 : C4 8C 13            		call	nz,dac_refill	; If yes, Refill and update LSB to check
(1)  196/      2C : F1                  		pop	af
(1)  197/      2D : C9                  		ret
(1)  198/      2E :                     
(1)  199/      2E :                     ; --------------------------------------------------------
(1)  200/      2E :                     ; 02Eh - User read/write values
(1)  201/      2E : 00                  commZWrite	db 0			; 2Eh: cmd fifo wptr (from 68k)
(1)  202/      2F : 00                  commZRomBlk	db 0			; 2Fh: 68k ROM block flag
(1)  203/      30 : 00                  cdRamLen	db 0			; 30h: Size + status flag
(1)  204/      31 : 00 00               cdRamDst	db 0,0			; 31h: ** Z80 destination
(1)  205/      33 : 00 00               cdRamSrc	db 0,0			; 33h: ** 68k 24-bit source
(1)  206/      35 : 00                  cdRamSrcB	db 0			; 35h: **
(1)  207/      36 : 00                  mcdBlock	db 0			; 36h: Flag to BLOCK SCD comm
(1)  208/      37 : 00                  marsBlock	db 0			; 37h: Flag to BLOCK PWM transfers.
(1)  209/      38 :                     
(1)  210/      38 :                     ; --------------------------------------------------------
(1)  211/      38 :                     ; Z80 Interrupt at 0038h
(1)  212/      38 :                     ; --------------------------------------------------------
(1)  213/      38 :                     
(1)  214/      38 :                     ; 		org 38h			; Align 38h
(1)  215/      38 : ED 73 7E 1C         		ld	(tickSpSet),sp	; Write TICK flag using sp (xx1F, read as tickFlag+1)
(1)  216/      3C : F3                  		di			; Disable interrupt
(1)  217/      3D : C9                  		ret
(1)  218/      3E :                     
(1)  219/      3E :                     ; --------------------------------------------------------
(1)  220/      3E :                     ; 03Eh - More user settings
(1)  221/      3E : 00                  palMode		db 0		; 3Eh: PAL mode flag
(1)  222/      3F : 00                  commZRead	db 0		; cmd fifo READ pointer (here)
(1)  223/      40 :                     
(1)  224/      40 :                     ; --------------------------------------------------------
(1)  225/      40 :                     ; 68K Read/Write area at 40h
(1)  226/      40 :                     ; --------------------------------------------------------
(1)  227/      40 :                     
(1)  228/      40 :                     ; 		org 40h
(1)  229/      40 :                     commZfifo	ds MAX_ZCMND			; Buffer for commands from 68k side
(1)  230/      50 :                     
(1)  231/      50 :                     ; --------------------------------------------------------
(1)  232/      50 :                     ; Initialize
(1)  233/      50 :                     ; --------------------------------------------------------
(1)  234/      50 :                     
(1)  235/      50 :                     z80_init:
(1)  236/      50 : CD 6C 10            		call	gema_init		; Init values
(1)  237/      53 : FB                  		ei
(1)  238/      54 :                     
(1)  239/      54 :                     ; --------------------------------------------------------
(1)  240/      54 :                     ; MAIN LOOP
(1)  241/      54 :                     ; --------------------------------------------------------
(1)  242/      54 :                     
(1)  243/      54 :                     drv_loop:
(1)  244/      54 : CF                  		rst	8
(1)  245/      55 : CD D8 10            		call	get_tick		; Check tick on VBlank
(1)  246/      58 : E7                  		rst	20h			; Refill wave here
(1)  247/      59 : CF                  		rst	8
(1)  248/      5A : 06 00               		ld	b,0			; b - Reset current flags (beat|tick)
(1)  249/      5C : 3A 80 1C            		ld	a,(tickCnt)		; Decrement tick counter
(1)  250/      5F : D6 01               		sub	1
(1)  251/      61 : 38 0B               		jr	c,.noticks		; If non-zero, no tick passed.
(1)  252/      63 : 32 80 1C            		ld	(tickCnt),a
(1)  253/      66 : CD B1 11            		call	chip_env		; Process PSG and YM
(1)  254/      69 : CD D8 10            		call	get_tick		; Check for another tick
(1)  255/      6C : 06 01               		ld 	b,01b			; Set TICK and clear BEAT flags (01b)
(1)  256/      6E :                     .noticks:
(1)  257/      6E : 3A 9C 1C            		ld	a,(sbeatAcc+1)		; check beat counter (scaled by tempo)
(1)  258/      71 : D6 01               		sub	1
(1)  259/      73 : 38 06               		jr	c,.nobeats
(1)  260/      75 : CF                  		rst	8
(1)  261/      76 : 32 9C 1C            		ld	(sbeatAcc+1),a		; 1/24 beat passed.
(1)  262/      79 : CB C8               		set	1,b			; Set BEAT (10b) flag
(1)  263/      7B :                     .nobeats:
(1)  264/      7B : CF                  		rst	8
(1)  265/      7C : 78                  		ld	a,b			; Any beat/tick bits set?
(1)  266/      7D : B7                  		or	a
(1)  267/      7E : 28 14               		jr	z,.neither
(1)  268/      80 : 32 98 1C            		ld	(currTickBits),a	; Save BEAT/TICK bits
(1)  269/      83 : CF                  		rst	8
(1)  270/      84 : CD D8 10            		call	get_tick
(1)  271/      87 : CD 24 06            		call	set_chips		; Send changes to sound chips
(1)  272/      8A : CD D8 10            		call	get_tick
(1)  273/      8D : CF                  		rst	8
(1)  274/      8E : CD 3A 02            		call	upd_track		; Update track data
(1)  275/      91 : CD D8 10            		call	get_tick
(1)  276/      94 :                     .neither:
(1)  277/      94 : CF                  		rst	8
(1)  279/      95 : CD D1 0F            		call	zmars_send		; External communication
(1)  281/      98 : CD D8 10            		call	get_tick
(1)  282/      9B :                     .next_cmd:
(1)  283/      9B : 3A 2E 00            		ld	a,(commZWrite)		; Check if commZ R/W indexes
(1)  284/      9E : 47                  		ld	b,a			; are in the same spot a == b
(1)  285/      9F : 3A 3F 00            		ld	a,(commZRead)
(1)  286/      A2 : B8                  		cp	b			; If equal, loop back.
(1)  287/      A3 : 28 AF               		jr	z,drv_loop
(1)  288/      A5 : CF                  		rst	8
(1)  289/      A6 : CD BE 00            		call	.grab_arg		; Read staring flag -1
(1)  290/      A9 : FE FF               		cp	-1			; Got START -1?
(1)  291/      AB : 20 A7               		jr	nz,drv_loop		; If not, end of commands
(1)  292/      AD : CD BE 00            		call	.grab_arg		; Read command number
(1)  293/      B0 : 87                  		add	a,a			; ID * 2
(1)  294/      B1 : 21 DD 00            		ld	hl,.list		; Index-jump...
(1)  295/      B4 : 16 00               		ld	d,0
(1)  296/      B6 : 5F                  		ld	e,a
(1)  297/      B7 : 19                  		add	hl,de
(1)  298/      B8 : 7E                  		ld	a,(hl)
(1)  299/      B9 : 23                  		inc	hl
(1)  300/      BA : 66                  		ld	h,(hl)
(1)  301/      BB : CF                  		rst	8
(1)  302/      BC : 6F                  		ld	l,a
(1)  303/      BD : E9                  		jp	(hl)
(1)  304/      BE :                     
(1)  305/      BE :                     ; --------------------------------------------------------
(1)  306/      BE :                     ; Read cmd byte, auto re-rolls to 3Fh
(1)  307/      BE :                     ; --------------------------------------------------------
(1)  308/      BE :                     
(1)  309/      BE :                     .grab_arg:
(1)  310/      BE : D5                  		push	de
(1)  311/      BF : E5                  		push	hl
(1)  312/      C0 :                     .getcbytel:
(1)  313/      C0 : 3A 2E 00            		ld	a,(commZWrite)
(1)  314/      C3 : 57                  		ld	d,a
(1)  315/      C4 : CF                  		rst	8
(1)  316/      C5 : 3A 3F 00            		ld	a,(commZRead)
(1)  317/      C8 : BA                  		cp	d		; commZ R/W indexes are the same?
(1)  318/      C9 : 28 F5               		jr	z,.getcbytel	; wait until these counters change.
(1)  319/      CB : 16 00               		ld	d,0
(1)  320/      CD : 5F                  		ld	e,a
(1)  321/      CE : 21 40 00            		ld	hl,commZfifo	; Read commZ list + index
(1)  322/      D1 : 19                  		add	hl,de
(1)  323/      D2 : CF                  		rst	8
(1)  324/      D3 : 3C                  		inc	a
(1)  325/      D4 : E6 0F               		and	MAX_ZCMND-1	; ** commZ list buffer limit
(1)  326/      D6 : 32 3F 00            		ld	(commZRead),a
(1)  327/      D9 : 7E                  		ld	a,(hl)		; a - got this byte from the buffer
(1)  328/      DA : E1                  		pop	hl
(1)  329/      DB : D1                  		pop	de
(1)  330/      DC : C9                  		ret
(1)  331/      DD :                     
(1)  332/      DD :                     ; --------------------------------------------------------
(1)  333/      DD :                     
(1)  334/      DD :                     .list:
(1)  335/      DD : ED 00               		dw .cmnd_0		; 00h -
(1)  336/      DF : F0 00               		dw .cmnd_1		; 01h - Set Master tracklist
(1)  337/      E1 : 09 01               		dw .cmnd_2		; 02h - Play by track number
(1)  338/      E3 : 46 01               		dw .cmnd_3		; 03h - Stop by track number
(1)  339/      E5 : ED 00               		dw .cmnd_0		; 04h - **
(1)  340/      E7 : 84 01               		dw .cmnd_5		; 05h - Fade volume (FadeIn/FadeOut)
(1)  341/      E9 : BD 01               		dw .cmnd_6		; 06h - Set maximum volume to slot
(1)  342/      EB : F6 01               		dw .cmnd_7		; 07h - Set GLOBAL sub-beats
(1)  343/      ED :                     
(1)  344/      ED :                     ; --------------------------------------------------------
(1)  345/      ED :                     ; Command 00h
(1)  346/      ED :                     ;
(1)  347/      ED :                     ; Reserved for TESTING purposes.
(1)  348/      ED :                     ; --------------------------------------------------------
(1)  349/      ED :                     
(1)  350/      ED :                     .cmnd_0:
(1)  351/      ED :                     ; 		ld	a,DacIns_TEST>>16
(1)  352/      ED :                     ; 		ld	hl,(DacIns_TEST+6)&0FFFFh
(1)  353/      ED :                     ; 		ld	(wave_Start),hl
(1)  354/      ED :                     ; 		ld	(wave_Start+2),a
(1)  355/      ED :                     ; 		ld	a,02h
(1)  356/      ED :                     ; 		ld	hl,04000h
(1)  357/      ED :                     ; 		ld	(wave_Len),hl
(1)  358/      ED :                     ; 		ld	(wave_Len+2),a
(1)  359/      ED :                     ; 		ld	bc,0
(1)  360/      ED :                     ; 		ld	(wave_Loop),bc
(1)  361/      ED :                     ; 		ld	hl,100h
(1)  362/      ED :                     ; 		ld	(wave_Pitch),hl
(1)  363/      ED :                     ; 		ld	a,1
(1)  364/      ED :                     ; 		ld	(wave_Flags),a
(1)  365/      ED :                     ; 		call	dac_play
(1)  366/      ED :                     
(1)  367/      ED :                     ; 		ld	iy,trkBuff_0
(1)  368/      ED :                     ; 		ld	(iy+trk_VolMaster),64-16
(1)  369/      ED :                     ; 		ld	(iy+trk_VolFdTarget),64
(1)  370/      ED :                     
(1)  371/      ED : C3 9B 00            		jp	.next_cmd
(1)  372/      F0 :                     
(1)  373/      F0 :                     ; --------------------------------------------------------
(1)  374/      F0 :                     ; Command 01h:
(1)  375/      F0 :                     ;
(1)  376/      F0 :                     ; Set the Track MASTER-list.
(1)  377/      F0 :                     ; --------------------------------------------------------
(1)  378/      F0 :                     
(1)  379/      F0 :                     .cmnd_1:
(1)  380/      F0 : 21 1F 00            		ld	hl,gemaMstrListPos+3	; 32-bit big endian
(1)  381/      F3 : CD BE 00            		call	.grab_arg		; $000000xx
(1)  382/      F6 : 77                  		ld	(hl),a
(1)  383/      F7 : 2B                  		dec	hl
(1)  384/      F8 : CD BE 00            		call	.grab_arg		; $0000xx00
(1)  385/      FB : 77                  		ld	(hl),a
(1)  386/      FC : 2B                  		dec	hl
(1)  387/      FD : CD BE 00            		call	.grab_arg		; $00xx0000
(1)  388/     100 : 77                  		ld	(hl),a
(1)  389/     101 : 2B                  		dec	hl
(1)  390/     102 : CD BE 00            		call	.grab_arg		; $xx000000 (filler)
(1)  391/     105 : 77                  		ld	(hl),a
(1)  392/     106 : C3 9B 00            		jp	.next_cmd
(1)  393/     109 :                     
(1)  394/     109 :                     ; --------------------------------------------------------
(1)  395/     109 :                     ; Command 02h:
(1)  396/     109 :                     ;
(1)  397/     109 :                     ; Make new track by sequence number
(1)  398/     109 :                     ;
(1)  399/     109 :                     ; Arguments:
(1)  400/     109 :                     ; SeqID,BlockPos,SlotIndex(If -1 autofill)
(1)  401/     109 :                     ; --------------------------------------------------------
(1)  402/     109 :                     
(1)  403/     109 :                     .cmnd_2:
(1)  404/     109 : CD BE 00            		call	.grab_arg		; d1: Sequence ID
(1)  405/     10C : 4F                  		ld	c,a			; copy as c
(1)  406/     10D : CD BE 00            		call	.grab_arg		; d2: Block from
(1)  407/     110 : 47                  		ld	b,a			; copy as b
(1)  408/     111 : CF                  		rst	8
(1)  409/     112 : CD BE 00            		call	.grab_arg		; d0: Slot index
(1)  410/     115 : FD 21 95 15         		ld	iy,nikona_BuffList	; iy - Slot buffer list
(1)  411/     119 : B7                  		or	a
(1)  412/     11A : FA 2C 01            		jp	m,.srch_mode
(1)  413/     11D :                     ; 		cp	-1			; if d2 == -1, search
(1)  414/     11D :                     ; 		jr	z,.srch_mode
(1)  415/     11D : FE 04               		cp	(nikona_BuffList_e-nikona_BuffList)/MAX_BUFFNTRY	; If maxed out slots
(1)  416/     11F : D2 9B 00            		jp	nc,.next_cmd
(1)  417/     122 : CF                  		rst	8
(1)  418/     123 : CD 14 02            		call	.cmnd_rdslot
(1)  419/     126 : CD 3B 01            		call	.wrtto_slot
(1)  420/     129 : C3 9B 00            		jp	.next_cmd
(1)  421/     12C :                     ; -1
(1)  422/     12C :                     .srch_mode:
(1)  423/     12C : CD 27 02            		call	.srch_slot
(1)  424/     12F : FE FF               		cp	-1
(1)  425/     131 : CA 9B 00            		jp	z,.next_cmd		; Then skip, no free slot.
(1)  426/     134 : CB 7E               		bit	7,(hl)			; Is this track free?
(1)  427/     136 : CA 3B 01            		jp	z,.wrtto_slot
(1)  428/     139 : 18 F1               		jr	.srch_mode
(1)  429/     13B :                     .wrtto_slot:
(1)  430/     13B : 36 C0               		ld	(hl),0C0h		; ** Write trk_Status flags: Enable+Restart
(1)  431/     13D : 23                  		inc	hl
(1)  432/     13E : CF                  		rst	8
(1)  433/     13F : 71                  		ld	(hl),c			; ** write trk_SeqId
(1)  434/     140 : 23                  		inc	hl
(1)  435/     141 : 70                  		ld	(hl),b			; ** write trk_SetBlk
(1)  436/     142 : 79                  		ld	a,c
(1)  437/     143 : C3 9B 00            		jp	.next_cmd
(1)  438/     146 :                     
(1)  439/     146 :                     ; --------------------------------------------------------
(1)  440/     146 :                     ; Command 03h:
(1)  441/     146 :                     ;
(1)  442/     146 :                     ; Stop track with the same sequence number
(1)  443/     146 :                     ;
(1)  444/     146 :                     ; SeqID,SlotIndex(-1 allslots)
(1)  445/     146 :                     ; --------------------------------------------------------
(1)  446/     146 :                     
(1)  447/     146 :                     .cmnd_3:
(1)  448/     146 : CD BE 00            		call	.grab_arg		; d1: Sequence ID
(1)  449/     149 : 4F                  		ld	c,a			; copy to c
(1)  450/     14A : CD BE 00            		call	.grab_arg		; d0: Slot index
(1)  451/     14D : FD 21 95 15         		ld	iy,nikona_BuffList	; iy - Slot buffer list
(1)  452/     151 : B7                  		or	a
(1)  453/     152 : FA 64 01            		jp	m,.srch_del
(1)  454/     155 :                     ; 		cp	-1			; if -1, search for all with same ID
(1)  455/     155 :                     ; 		jr	z,.srch_del
(1)  456/     155 : FE 04               		cp	(nikona_BuffList_e-nikona_BuffList)/MAX_BUFFNTRY	; If maxed out slots
(1)  457/     157 : D2 9B 00            		jp	nc,.next_cmd
(1)  458/     15A : CF                  		rst	8
(1)  459/     15B : CD 14 02            		call	.cmnd_rdslot
(1)  460/     15E : CD 71 01            		call	.wrtto_del
(1)  461/     161 : C3 9B 00            		jp	.next_cmd
(1)  462/     164 :                     ; -1
(1)  463/     164 :                     .srch_del:
(1)  464/     164 : CD 27 02            		call	.srch_slot
(1)  465/     167 : FE FF               		cp	-1
(1)  466/     169 : CA 9B 00            		jp	z,.next_cmd
(1)  467/     16C : CD 71 01            		call	.wrtto_del
(1)  468/     16F : 18 F3               		jr	.srch_del
(1)  469/     171 :                     .wrtto_del:
(1)  470/     171 : CB 7E               		bit	7,(hl)
(1)  471/     173 : C8                  		ret	z
(1)  472/     174 : CB 79               		bit	7,c		; <-- lazy -1 check
(1)  473/     176 : 20 05               		jr	nz,.del_all
(1)  474/     178 : DD 7E 01            		ld	a,(ix+trk_SeqId)
(1)  475/     17B : B9                  		cp	c
(1)  476/     17C : C0                  		ret	nz
(1)  477/     17D :                     .del_all:
(1)  478/     17D : 36 FF               		ld	(hl),-1		; -1 flag, stop channel and clear slot
(1)  479/     17F : 23                  		inc	hl
(1)  480/     180 : 36 FF               		ld	(hl),-1		; Reset seqId
(1)  481/     182 : CF                  		rst	8
(1)  482/     183 : C9                  		ret
(1)  483/     184 :                     
(1)  484/     184 :                     ; --------------------------------------------------------
(1)  485/     184 :                     ; Command 05h:
(1)  486/     184 :                     ;
(1)  487/     184 :                     ; Fade volume (FadeIn/FadeOut)
(1)  488/     184 :                     ;
(1)  489/     184 :                     ; Arguments:
(1)  490/     184 :                     ; TargetVol,SlotIndex(If -1 autofill)
(1)  491/     184 :                     ; --------------------------------------------------------
(1)  492/     184 :                     
(1)  493/     184 :                     .cmnd_5:
(1)  494/     184 : CD BE 00            		call	.grab_arg		; d1: Master volume
(1)  495/     187 : 4F                  		ld	c,a			; copy to c
(1)  496/     188 : CD BE 00            		call	.grab_arg		; d0: Slot index
(1)  497/     18B : FD 21 95 15         		ld	iy,nikona_BuffList	; iy - Slot buffer list
(1)  498/     18F : B7                  		or	a
(1)  499/     190 : FA A2 01            		jp	m,.srch_fvol
(1)  500/     193 :                     ; 		cp	-1			; if -1, search for all with same ID
(1)  501/     193 :                     ; 		jr	z,.srch_fvol
(1)  502/     193 : FE 04               		cp	(nikona_BuffList_e-nikona_BuffList)/MAX_BUFFNTRY	; If maxed out slots
(1)  503/     195 : D2 9B 00            		jp	nc,.next_cmd
(1)  504/     198 : CF                  		rst	8
(1)  505/     199 : CD 14 02            		call	.cmnd_rdslot
(1)  506/     19C : CD AF 01            		call	.wrtto_fvol
(1)  507/     19F : C3 9B 00            		jp	.next_cmd
(1)  508/     1A2 :                     ; -1
(1)  509/     1A2 :                     .srch_fvol:
(1)  510/     1A2 : CD 27 02            		call	.srch_slot
(1)  511/     1A5 : FE FF               		cp	-1
(1)  512/     1A7 : CA 9B 00            		jp	z,.next_cmd		; Then skip, no free slot.
(1)  513/     1AA : CD AF 01            		call	.wrtto_fvol
(1)  514/     1AD : 18 F3               		jr	.srch_fvol
(1)  515/     1AF :                     .wrtto_fvol:
(1)  516/     1AF : CB 7E               		bit	7,(hl)			; Active?
(1)  517/     1B1 : C8                  		ret	z
(1)  518/     1B2 : CB DE               		set	3,(hl)			; Volume update flag
(1)  519/     1B4 : DD 71 19            		ld	(ix+trk_VolFdTarget),c
(1)  520/     1B7 : DD 36 0F 00         		ld	(ix+trk_VolMaster+1),0
(1)  521/     1BB : CF                  		rst	8
(1)  522/     1BC : C9                  		ret
(1)  523/     1BD :                     
(1)  524/     1BD :                     ; --------------------------------------------------------
(1)  525/     1BD :                     ; Command 06h:
(1)  526/     1BD :                     ;
(1)  527/     1BD :                     ; Set track's master volume
(1)  528/     1BD :                     ;
(1)  529/     1BD :                     ; Arguments:
(1)  530/     1BD :                     ; MasterVol,SlotIndex(If -1 autofill)
(1)  531/     1BD :                     ; --------------------------------------------------------
(1)  532/     1BD :                     
(1)  533/     1BD :                     .cmnd_6:
(1)  534/     1BD : CD BE 00            		call	.grab_arg		; d1: Master volume
(1)  535/     1C0 : 4F                  		ld	c,a			; copy to c
(1)  536/     1C1 : CD BE 00            		call	.grab_arg		; d0: Slot index
(1)  537/     1C4 : FD 21 95 15         		ld	iy,nikona_BuffList	; iy - Slot buffer list
(1)  538/     1C8 : B7                  		or	a
(1)  539/     1C9 : FA DB 01            		jp	m,.srch_vol
(1)  540/     1CC :                     ; 		cp	-1			; if -1, search for all with same ID
(1)  541/     1CC :                     ; 		jr	z,.srch_vol
(1)  542/     1CC : FE 04               		cp	(nikona_BuffList_e-nikona_BuffList)/MAX_BUFFNTRY	; If maxed out slots
(1)  543/     1CE : D2 9B 00            		jp	nc,.next_cmd
(1)  544/     1D1 : CF                  		rst	8
(1)  545/     1D2 : CD 14 02            		call	.cmnd_rdslot
(1)  546/     1D5 : CD E8 01            		call	.wrtto_vol
(1)  547/     1D8 : C3 9B 00            		jp	.next_cmd
(1)  548/     1DB :                     ; -1
(1)  549/     1DB :                     .srch_vol:
(1)  550/     1DB : CD 27 02            		call	.srch_slot
(1)  551/     1DE : FE FF               		cp	-1
(1)  552/     1E0 : CA 9B 00            		jp	z,.next_cmd		; Then skip, no free slot.
(1)  553/     1E3 : CD E8 01            		call	.wrtto_vol
(1)  554/     1E6 : 18 F3               		jr	.srch_vol
(1)  555/     1E8 :                     .wrtto_vol:
(1)  556/     1E8 : CB DE               		set	3,(hl)			; Volume update flag
(1)  557/     1EA : DD 71 0E            		ld	(ix+trk_VolMaster),c
(1)  558/     1ED : DD 71 19            		ld	(ix+trk_VolFdTarget),c
(1)  559/     1F0 : DD 36 0F 00         		ld	(ix+trk_VolMaster+1),0
(1)  560/     1F4 : CF                  		rst	8
(1)  561/     1F5 : C9                  		ret
(1)  562/     1F6 :                     
(1)  563/     1F6 :                     ; --------------------------------------------------------
(1)  564/     1F6 :                     ; Command 07h:
(1)  565/     1F6 :                     ;
(1)  566/     1F6 :                     ; Set global sub-beats
(1)  567/     1F6 :                     ; --------------------------------------------------------
(1)  568/     1F6 :                     
(1)  569/     1F6 :                     .cmnd_7:
(1)  570/     1F6 : CD BE 00            		call	.grab_arg	; d0.w: $00xx
(1)  571/     1F9 : 4F                  		ld	c,a
(1)  572/     1FA : CD BE 00            		call	.grab_arg	; d0.w: $xx00
(1)  573/     1FD : 67                  		ld	h,a
(1)  574/     1FE : 69                  		ld	l,c
(1)  575/     1FF : 3A 3E 00            		ld	a,(palMode)
(1)  576/     202 : B7                  		or	a
(1)  577/     203 : 28 04               		jr	z,.not_pal
(1)  578/     205 : 11 20 00            		ld	de,32
(1)  579/     208 : 19                  		add	hl,de
(1)  580/     209 :                     .not_pal:
(1)  581/     209 : 7C                  		ld	a,h
(1)  582/     20A : 32 9E 1C            		ld	(sbeatPtck+1),a
(1)  583/     20D : 7D                  		ld	a,l
(1)  584/     20E : 32 9D 1C            		ld	(sbeatPtck),a
(1)  585/     211 : C3 9B 00            		jp	.next_cmd
(1)  586/     214 :                     
(1)  587/     214 :                     ; --------------------------------------------------------
(1)  588/     214 :                     ; Shared subs
(1)  589/     214 :                     ; --------------------------------------------------------
(1)  590/     214 :                     
(1)  591/     214 :                     .cmnd_rdslot:
(1)  592/     214 : 87                  		add	a,a			; ** MANUAL MAX_BUFFNTRY
(1)  593/     215 : 87                  		add	a,a			; id*8
(1)  594/     216 : 87                  		add	a,a
(1)  595/     217 : 16 00               		ld	d,0
(1)  596/     219 : 5F                  		ld	e,a
(1)  597/     21A : FD 19               		add	iy,de
(1)  598/     21C : FD 7E 00            		ld	a,(iy)
(1)  599/     21F : FD 66 01            		ld	h,(iy+1)
(1)  600/     222 : 6F                  		ld	l,a
(1)  601/     223 : E5                  		push	hl
(1)  602/     224 : DD E1               		pop	ix
(1)  603/     226 : C9                  		ret
(1)  604/     227 :                     
(1)  605/     227 :                     ; ------------------------------------------------
(1)  606/     227 :                     ; iy - nikona_BuffList
(1)  607/     227 :                     
(1)  608/     227 :                     .srch_slot:
(1)  609/     227 : FD 7E 00            		ld	a,(iy)
(1)  610/     22A : FE FF               		cp	-1			; End of list?
(1)  611/     22C : C8                  		ret	z
(1)  612/     22D : FD 66 01            		ld	h,(iy+1)		; hl - Current track slot
(1)  613/     230 : 6F                  		ld	l,a
(1)  614/     231 : E5                  		push	hl
(1)  615/     232 : DD E1               		pop	ix
(1)  616/     234 : 11 08 00            		ld	de,MAX_BUFFNTRY
(1)  617/     237 : FD 19               		add	iy,de			; Next entry for later
(1)  618/     239 : C9                  		ret
(1)  619/     23A :                     
(1)  620/     23A :                     ; ====================================================================
(1)  621/     23A :                     ; ----------------------------------------------------------------
(1)  622/     23A :                     ; MAIN Playback section
(1)  623/     23A :                     ; ----------------------------------------------------------------
(1)  624/     23A :                     
(1)  625/     23A :                     ; --------------------------------------------------------
(1)  626/     23A :                     ; Read mini-impulse-tracker data
(1)  627/     23A :                     ; --------------------------------------------------------
(1)  628/     23A :                     
(1)  629/     23A :                     upd_track:
(1)  630/     23A : E7                  		rst	20h			; Refill wave
(1)  631/     23B : CD D8 10            		call	get_tick		; Check for tick flag
(1)  632/     23E : FD 21 95 15         		ld	iy,nikona_BuffList	; iy - slot buffer List
(1)  633/     242 :                     .trk_buffrs:
(1)  634/     242 : FD 7E 00            		ld	a,(iy)			; if -1, end here.
(1)  635/     245 : FE FF               		cp	-1
(1)  636/     247 : C8                  		ret	z
(1)  637/     248 : CF                  		rst	8
(1)  638/     249 : FD E5               		push	iy
(1)  639/     24B : CD 57 02            		call	.read_track
(1)  640/     24E : FD E1               		pop	iy
(1)  641/     250 : 11 08 00            		ld	de,MAX_BUFFNTRY
(1)  642/     253 : FD 19               		add	iy,de
(1)  643/     255 : 18 EB               		jr	.trk_buffrs
(1)  644/     257 :                     
(1)  645/     257 :                     ; ----------------------------------------
(1)  646/     257 :                     ; iy - Track buffer
(1)  647/     257 :                     ; ----------------------------------------
(1)  648/     257 :                     
(1)  649/     257 :                     .read_track:
(1)  650/     257 : FD 6E 00            		ld	l,(iy)			; hl - current track slot
(1)  651/     25A : FD 66 01            		ld	h,(iy+1)
(1)  652/     25D : CF                  		rst	8
(1)  653/     25E : E5                  		push	hl
(1)  654/     25F : FD E1               		pop	iy			; change iy to hl
(1)  655/     261 : FD 46 00            		ld	b,(iy+trk_Status)	; b - Track status and settings
(1)  656/     264 : CB 78               		bit	7,b			; bit7: Track active?
(1)  657/     266 : C8                  		ret	z			; Return if not.
(1)  658/     267 : 78                  		ld	a,b
(1)  659/     268 : FE FF               		cp	-1			; Flag is -1?
(1)  660/     26A : C8                  		ret	z			; Return if mid-flag
(1)  661/     26B : CF                  		rst	8
(1)  662/     26C :                     	; ----------------------------------------
(1)  663/     26C :                     	; Track volume changes
(1)  664/     26C : FD 6E 0F            		ld	l,(iy+trk_VolMaster+1)
(1)  665/     26F : FD 66 0E            		ld	h,(iy+trk_VolMaster)
(1)  666/     272 : FD 4E 19            		ld	c,(iy+trk_VolFdTarget)
(1)  667/     275 : 11 00 01            		ld	de,0100h		; <-- Manual volfade speed MAX 0100h
(1)  668/     278 : 79                  		ld	a,c
(1)  669/     279 : BC                  		cp	h
(1)  670/     27A : 28 1E               		jr	z,.keep_vol
(1)  671/     27C : 30 06               		jr	nc,.fade_out
(1)  672/     27E : 11 80 FF            		ld	de,-80h
(1)  673/     281 : 19                  		add	hl,de
(1)  674/     282 : 18 0C               		jr	.too_much
(1)  675/     284 :                     .fade_out:
(1)  676/     284 : 19                  		add	hl,de
(1)  677/     285 : CF                  		rst	8
(1)  678/     286 : 7C                  		ld	a,h
(1)  679/     287 : B9                  		cp	c
(1)  680/     288 : 38 06               		jr	c,.too_much
(1)  681/     28A : 61                  		ld	h,c
(1)  682/     28B : 2E 00               		ld	l,0
(1)  683/     28D : FD 71 19            		ld	(iy+trk_VolFdTarget),c
(1)  684/     290 :                     .too_much:
(1)  685/     290 : FD CB 00 DE         		set	3,(iy+trk_Status)	; Volume update flag
(1)  686/     294 : FD 75 0F            		ld	(iy+trk_VolMaster+1),l
(1)  687/     297 : FD 74 0E            		ld	(iy+trk_VolMaster),h
(1)  688/     29A :                     .keep_vol:
(1)  689/     29A :                     	; ----------------------------------------
(1)  690/     29A : 3A 98 1C            		ld	a,(currTickBits)	; a - Tick/Beat bits
(1)  691/     29D : CB 40               		bit	0,b			; bit0: This track uses Beats?
(1)  692/     29F : 28 03               		jr	z,.sfxmd
(1)  693/     2A1 : CB 4F               		bit	1,a			; BEAT passed?
(1)  694/     2A3 : C8                  		ret	z			; No BEAT.
(1)  695/     2A4 :                     .sfxmd:
(1)  696/     2A4 : CB 47               		bit	0,a			; TICK passed?
(1)  697/     2A6 : C8                  		ret	z			; No TICK.
(1)  698/     2A7 : CF                  		rst	8
(1)  699/     2A8 :                     	; ----------------------------------------
(1)  700/     2A8 :                     	; Start reading notes
(1)  701/     2A8 : CB 70               		bit	6,b			; bit6: Restart/First time?
(1)  702/     2AA : C4 36 05            		call	nz,.first_fill
(1)  703/     2AD : CB 68               		bit	5,b			; bit5: FILL request by effect?
(1)  704/     2AF : C4 2F 05            		call	nz,.effect_fill
(1)  705/     2B2 : FD 7E 12            		ld	a,(iy+trk_tickTmr)	; TICK ex-timer for this track
(1)  706/     2B5 : 3D                  		dec	a
(1)  707/     2B6 : FD 77 12            		ld	(iy+trk_tickTmr),a
(1)  708/     2B9 : B7                  		or	a			; Check a
(1)  709/     2BA : C0                  		ret	nz			; If Tick timer != 0, exit.
(1)  710/     2BB : CF                  		rst	8
(1)  711/     2BC : FD 7E 03            		ld	a,(iy+trk_TickSet)	; Set new tick timer
(1)  712/     2BF : FD 77 12            		ld	(iy+trk_tickTmr),a
(1)  713/     2C2 : FD 4E 0C            		ld	c,(iy+trk_Rows)		; bc - Set row counter
(1)  714/     2C5 : FD 46 0D            		ld	b,(iy+(trk_Rows+1))
(1)  715/     2C8 : 79                  		ld	a,c			; Check rowcount
(1)  716/     2C9 : B0                  		or	b
(1)  717/     2CA : 20 14               		jr	nz,.row_active		; If bc != 0: row is currenly playing.
(1)  718/     2CC : CF                  		rst	8			; If bc == 0 ...
(1)  719/     2CD : FD 7E 13            		ld	a,(iy+trk_currBlk)	; Next block
(1)  720/     2D0 : 3C                  		inc	a
(1)  721/     2D1 : FD 77 13            		ld 	(iy+trk_currBlk),a
(1)  722/     2D4 : CD 43 04            		call	.set_track		; Read track data ** ROM ACCESS **
(1)  723/     2D7 : FE FF               		cp	-1			; Track finished?
(1)  724/     2D9 : C8                  		ret	z
(1)  725/     2DA : FD 4E 0C            		ld	c,(iy+trk_Rows)		; Set new rowcount to bc
(1)  726/     2DD : FD 46 0D            		ld	b,(iy+(trk_Rows+1))
(1)  727/     2E0 :                     .row_active:
(1)  728/     2E0 : CF                  		rst	8
(1)  729/     2E1 : FD 6E 0A            		ld	l,(iy+trk_Read)		; hl - CURRENT pattern to read
(1)  730/     2E4 : FD 66 0B            		ld	h,(iy+((trk_Read+1)))
(1)  731/     2E7 :                     
(1)  732/     2E7 :                     ; --------------------------------
(1)  733/     2E7 :                     ; Main read-loop
(1)  734/     2E7 :                     ; --------------------------------
(1)  735/     2E7 :                     
(1)  736/     2E7 :                     .next_note:
(1)  737/     2E7 : FD 7E 11            		ld	a,(iy+trk_rowPause)	; Check rowtimer
(1)  738/     2EA : B7                  		or	a
(1)  739/     2EB : 20 16               		jr	nz,.decrow
(1)  740/     2ED : 7E                  		ld	a,(hl)			; Check if byte is a timer or a note
(1)  741/     2EE : B7                  		or	a
(1)  742/     2EF : 28 06               		jr	z,.exit			; If == 00h: exit
(1)  743/     2F1 : FA 0E 03            		jp	m,.has_note		; If 80h-0FFh: Note data
(1)  744/     2F4 : FD 77 11            		ld	(iy+trk_rowPause),a	; If 01h-07Fh: Row-pause timer
(1)  745/     2F7 :                     
(1)  746/     2F7 :                     ; --------------------------------
(1)  747/     2F7 :                     ; Exit
(1)  748/     2F7 :                     ; --------------------------------
(1)  749/     2F7 :                     
(1)  750/     2F7 :                     .exit:
(1)  751/     2F7 : CF                  		rst	8
(1)  752/     2F8 : CD 0B 04            		call	.inc_cpatt		; * Increment patt pos
(1)  753/     2FB : FD 75 0A            		ld	(iy+trk_Read),l		; Update READ location
(1)  754/     2FE : FD 74 0B            		ld	(iy+((trk_Read+1))),h
(1)  755/     301 : 18 03               		jr	.decrow_e
(1)  756/     303 :                     .decrow:
(1)  757/     303 : FD 35 11            		dec	(iy+trk_rowPause)	; Decrement row-pause timer
(1)  758/     306 :                     .decrow_e:
(1)  759/     306 : 0B                  		dec	bc			; Decrement rowcount
(1)  760/     307 : FD 71 0C            		ld	(iy+trk_Rows),c		; Write last row to memory
(1)  761/     30A : FD 70 0D            		ld	(iy+(trk_Rows+1)),b
(1)  762/     30D : C9                  		ret	; Exit.
(1)  763/     30E :                     
(1)  764/     30E :                     ; --------------------------------
(1)  765/     30E :                     ; New note request
(1)  766/     30E :                     ;
(1)  767/     30E :                     ; a - %1tcccccc
(1)  768/     30E :                     ;   | t - next byte has new type
(1)  769/     30E :                     ;   | c - channel
(1)  770/     30E :                     ; --------------------------------
(1)  771/     30E :                     
(1)  772/     30E :                     .has_note:
(1)  773/     30E : CF                  		rst	8
(1)  774/     30F : C5                  		push	bc			; Save rowcount
(1)  775/     310 : 4F                  		ld	c,a			; Copy patt byte control to c
(1)  776/     311 : CD 0B 04            		call	.inc_cpatt		; * Increment patt pos
(1)  777/     314 : E5                  		push	hl			; Save hl patt pos
(1)  778/     315 : FD E5               		push	iy
(1)  779/     317 : E1                  		pop	hl
(1)  780/     318 : DD 21 00 1E         		ld	ix,trkChnls		; ix - Channels buffer
(1)  781/     31C : 11 26 00            		ld	de,trk_ChnIndx		; <-- this also clears d
(1)  782/     31F : CF                  		rst	8
(1)  783/     320 : 19                  		add	hl,de			; hl - Track's index points buffer
(1)  784/     321 : 79                  		ld	a,c			; Get patt note position
(1)  785/     322 : E6 1F               		and	00011111b		; Filter index bits
(1)  786/     324 : 5F                  		ld	e,a			; Save as e
(1)  787/     325 : 19                  		add	hl,de			; Increment more by this pos
(1)  788/     326 : 7E                  		ld	a,(hl)			; Check if this index is occupied.
(1)  789/     327 : B7                  		or	a
(1)  790/     328 : 28 0A               		jr	z,.srch_new		; If == 0, new index
(1)  791/     32A : E6 1F               		and	00011111b		; If already used, read that channel
(1)  792/     32C : 87                  		add	a,a
(1)  793/     32D : 87                  		add	a,a
(1)  794/     32E : 87                  		add	a,a
(1)  795/     32F : 5F                  		ld	e,a
(1)  796/     330 : DD 19               		add	ix,de
(1)  797/     332 : 18 2B               		jr	.cont_chnl
(1)  798/     334 :                     
(1)  799/     334 :                     ; Make NEW channel
(1)  800/     334 :                     ; ix - channel list start
(1)  801/     334 :                     .srch_new:
(1)  802/     334 : CF                  		rst	8
(1)  803/     335 : 06 1F               		ld	b,MAX_TRKCHN-1	; Max channels to check - 1
(1)  804/     337 : 16 00               		ld	d,0		; Reset out index
(1)  805/     339 :                     .next_chnl:
(1)  806/     339 : DD 7E 00            		ld	a,(ix)		; Read chnl_Flags
(1)  807/     33C : B7                  		or	a		; If plus, track channel is free
(1)  808/     33D : F2 54 03            		jp	p,.chnl_free
(1)  809/     340 : DD 23               		inc	ix		; Search next channel, increment by 8
(1)  810/     342 : DD 23               		inc	ix
(1)  811/     344 : DD 23               		inc	ix
(1)  812/     346 : DD 23               		inc	ix
(1)  813/     348 : CF                  		rst	8
(1)  814/     349 : DD 23               		inc	ix
(1)  815/     34B : DD 23               		inc	ix
(1)  816/     34D : DD 23               		inc	ix
(1)  817/     34F : DD 23               		inc	ix
(1)  818/     351 : 14                  		inc	d		; Increment out index
(1)  819/     352 : 10 E5               		djnz	.next_chnl
(1)  820/     354 :                     .chnl_free:
(1)  821/     354 : CF                  		rst	8
(1)  822/     355 : 7A                  		ld	a,d			; Read index we got
(1)  823/     356 : E6 1F               		and	00011111b		; Filter bits
(1)  824/     358 : F6 80               		or	10000000b		; + set as used
(1)  825/     35A : 77                  		ld	(hl),a			; Write index slot
(1)  826/     35B : DD CB 00 FE         		set	7,(ix+chnl_Flags)	; Enable channel on the list
(1)  827/     35F :                     .cont_chnl:
(1)  828/     35F : E1                  		pop	hl			; Recover patt pos
(1)  829/     360 :                     	; ix - current channel
(1)  830/     360 : CF                  		rst	8
(1)  831/     361 : DD 46 07            		ld	b,(ix+chnl_Type)	; b - current TYPE byte
(1)  832/     364 : CB 71               		bit	6,c			; This byte has new TYPE setting?
(1)  833/     366 : 28 08               		jr	z,.old_type
(1)  834/     368 : 7E                  		ld	a,(hl)
(1)  835/     369 : DD 77 07            		ld	(ix+chnl_Type),a	; Update TYPE byte
(1)  836/     36C : 47                  		ld	b,a			; Set to b
(1)  837/     36D : CD 0B 04            		call	.inc_cpatt		; Next patt pos
(1)  838/     370 :                     .old_type:
(1)  839/     370 :                     	; b - evinEVIN
(1)  840/     370 :                     	;     E-effect/V-volume/I-instrument/N-note
(1)  841/     370 :                     	;     evin: byte is already stored on track-channel buffer
(1)  842/     370 :                     	;     EVIN: next byte(s) contain a new value. for eff:2 bytes
(1)  843/     370 :                     
(1)  844/     370 : CF                  		rst	8
(1)  845/     371 : CB 40               		bit	0,b			; New NOTE?
(1)  846/     373 : 28 07               		jr	z,.no_note
(1)  847/     375 : 7E                  		ld	a,(hl)			; Set NOTE and increment patt
(1)  848/     376 : DD 77 02            		ld	(ix+chnl_Note),a
(1)  849/     379 : CD 0B 04            		call	.inc_cpatt
(1)  850/     37C :                     .no_note:
(1)  851/     37C : CB 48               		bit	1,b			; New INS?
(1)  852/     37E : 28 07               		jr	z,.no_ins
(1)  853/     380 : 7E                  		ld	a,(hl)			; Set INS and increment patt
(1)  854/     381 : DD 77 03            		ld	(ix+chnl_Ins),a
(1)  855/     384 : CD 0B 04            		call	.inc_cpatt
(1)  856/     387 :                     .no_ins:
(1)  857/     387 : CB 50               		bit	2,b			; New VOL?
(1)  858/     389 : 28 07               		jr	z,.no_vol
(1)  859/     38B : 7E                  		ld	a,(hl)			; Set VOL and increment patt
(1)  860/     38C : DD 77 04            		ld	(ix+chnl_Vol),a
(1)  861/     38F : CD 0B 04            		call	.inc_cpatt
(1)  862/     392 :                     .no_vol:
(1)  863/     392 : CB 58               		bit	3,b			; New EFFECT?
(1)  864/     394 : 28 0F               		jr	z,.no_eff
(1)  865/     396 : 7E                  		ld	a,(hl)			; Set EFFECT ID, incr patt
(1)  866/     397 : DD 77 05            		ld	(ix+chnl_EffId),a
(1)  867/     39A : CD 0B 04            		call	.inc_cpatt
(1)  868/     39D : CF                  		rst	8
(1)  869/     39E : 7E                  		ld	a,(hl)			; Set EFFECT ARG, incr patt
(1)  870/     39F : DD 77 06            		ld	(ix+chnl_EffArg),a
(1)  871/     3A2 : CD 0B 04            		call	.inc_cpatt
(1)  872/     3A5 :                     .no_eff:
(1)  873/     3A5 : 78                  		ld	a,b			; Merge the Impulse evin bits into main EVIN bits
(1)  874/     3A6 : 0F                  		rrca
(1)  875/     3A7 : 0F                  		rrca
(1)  876/     3A8 : 0F                  		rrca
(1)  877/     3A9 : 0F                  		rrca
(1)  878/     3AA : E6 0F               		and	00001111b		; Filter bits
(1)  879/     3AC : 4F                  		ld	c,a			; Save as c
(1)  880/     3AD : 78                  		ld	a,b
(1)  881/     3AE : E6 0F               		and	00001111b		; Filter again
(1)  882/     3B0 : B1                  		or	c			; Merge c with a
(1)  883/     3B1 : CF                  		rst	8
(1)  884/     3B2 : 4F                  		ld	c,a			; Save bit flags
(1)  885/     3B3 : DD 7E 00            		ld	a,(ix+chnl_Flags)
(1)  886/     3B6 : B1                  		or	c
(1)  887/     3B7 : DD 77 00            		ld	(ix+chnl_Flags),a
(1)  888/     3BA :                     	; Check for effects that affect
(1)  889/     3BA :                     	; internal playback:
(1)  890/     3BA :                     	; Jump, Ticks, etc.
(1)  891/     3BA : C1                  		pop	bc		; Restore rowcount
(1)  892/     3BB : DD 7E 00            		ld	a,(ix+chnl_Flags)
(1)  893/     3BE : E6 08               		and	1000b		; ONLY check for the EFFECT bit
(1)  894/     3C0 : CA E7 02            		jp	z,.next_note
(1)  895/     3C3 : DD 7E 05            		ld	a,(ix+chnl_EffId)
(1)  896/     3C6 : B7                  		or	a		; 00h = invalid effect
(1)  897/     3C7 : CA E7 02            		jp	z,.next_note
(1)  898/     3CA : FE 01               		cp	1		; Effect A: Tick set
(1)  899/     3CC : 28 0B               		jr	z,.eff_A
(1)  900/     3CE : FE 02               		cp	2		; Effect B: Position Jump
(1)  901/     3D0 : 28 18               		jr	z,.eff_B
(1)  902/     3D2 : FE 03               		cp	3		; Effect C: Pattern break
(1)  903/     3D4 : 28 32               		jr	z,.eff_C	; <-- JUMP and exit.
(1)  904/     3D6 : C3 E7 02            		jp	.next_note
(1)  905/     3D9 :                     
(1)  906/     3D9 :                     ; ----------------------------------------
(1)  907/     3D9 :                     ; Effect A: Set ticks
(1)  908/     3D9 :                     ; ----------------------------------------
(1)  909/     3D9 :                     
(1)  910/     3D9 :                     .eff_A:
(1)  911/     3D9 : CF                  		rst	8
(1)  912/     3DA : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - ticks number
(1)  913/     3DD : FD 73 03            		ld	(iy+trk_TickSet),e	; set for both Set and Timer.
(1)  914/     3E0 : FD 73 12            		ld	(iy+trk_tickTmr),e
(1)  915/     3E3 : DD CB 00 9E         		res	3,(ix+chnl_Flags)	; <-- Clear EFFECT bit
(1)  916/     3E7 : C3 E7 02            		jp	.next_note
(1)  917/     3EA :                     
(1)  918/     3EA :                     ; ----------------------------------------
(1)  919/     3EA :                     ; Effect B: jump to a new block
(1)  920/     3EA :                     ; ----------------------------------------
(1)  921/     3EA :                     
(1)  922/     3EA :                     .eff_B:
(1)  923/     3EA : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - Block SLOT to jump
(1)  924/     3ED : FD 73 13            		ld 	(iy+trk_currBlk),e
(1)  925/     3F0 : CF                  		rst	8
(1)  926/     3F1 : FD 36 11 00         		ld	(iy+trk_rowPause),0	; Reset rowpause
(1)  927/     3F5 : DD CB 00 9E         		res	3,(ix+chnl_Flags)	; <-- Clear EFFECT bit
(1)  928/     3F9 : FD CB 00 EE         		set	5,(iy+trk_Status)	; set fill-from-effect flag on exit
(1)  929/     3FD : 3E 80               		ld	a,80h
(1)  930/     3FF : FD 77 16            		ld	(iy+trk_BankHeads),a
(1)  931/     402 : FD 77 17            		ld	(iy+trk_BankBlk),a
(1)  932/     405 : C3 E7 02            		jp	.next_note
(1)  933/     408 :                     
(1)  934/     408 :                     ; ----------------------------------------
(1)  935/     408 :                     ; Effect C: Pattern break/exit
(1)  936/     408 :                     ;
(1)  937/     408 :                     ; Only used on SFX, arguments ignored.
(1)  938/     408 :                     ; ----------------------------------------
(1)  939/     408 :                     
(1)  940/     408 :                     .eff_C:
(1)  941/     408 : C3 1C 05            		jp	.track_end
(1)  942/     40B :                     
(1)  943/     40B :                     ; ----------------------------------------
(1)  944/     40B :                     ; Increment the current patt position
(1)  945/     40B :                     ; and recieve more data
(1)  946/     40B :                     ;
(1)  947/     40B :                     ; Breaks:
(1)  948/     40B :                     ; a,e
(1)  949/     40B :                     ; ----------------------------------------
(1)  950/     40B :                     
(1)  951/     40B :                     .inc_cpatt:
(1)  952/     40B : FD 5E 08            		ld	e,(iy+trk_Cach)	; Read curret cache LSB
(1)  953/     40E : 7D                  		ld	a,l
(1)  954/     40F : 3C                  		inc	a
(1)  955/     410 : E6 1F               		and	MAX_RCACH-1
(1)  956/     412 : FE 1E               		cp	MAX_RCACH-2	; RAN OUT of bytes?
(1)  957/     414 : 30 03               		jr	nc,.ran_out
(1)  958/     416 : B3                  		or	e
(1)  959/     417 : 6F                  		ld	l,a
(1)  960/     418 : C9                  		ret
(1)  961/     419 :                     .ran_out:
(1)  962/     419 : FD 6E 08            		ld	l,(iy+trk_Cach)
(1)  963/     41C : E5                  		push	hl
(1)  964/     41D : C5                  		push	bc
(1)  965/     41E : 06 00               		ld	b,0
(1)  966/     420 : 4F                  		ld	c,a
(1)  967/     421 : CF                  		rst	8
(1)  968/     422 : 5D                  		ld	e,l
(1)  969/     423 : 54                  		ld	d,h
(1)  970/     424 : FD 6E 1A            		ld	l,(iy+trk_RomPattRead)
(1)  971/     427 : FD 66 1B            		ld	h,(iy+(trk_RomPattRead+1))
(1)  972/     42A : FD 7E 1C            		ld	a,(iy+(trk_RomPattRead+2))
(1)  973/     42D : 09                  		add	hl,bc
(1)  974/     42E : CE 00               		adc	a,0
(1)  975/     430 : FD 75 1A            		ld	(iy+trk_RomPattRead),l
(1)  976/     433 : FD 74 1B            		ld	(iy+(trk_RomPattRead+1)),h
(1)  977/     436 : CF                  		rst	8
(1)  978/     437 : FD 77 1C            		ld	(iy+(trk_RomPattRead+2)),a
(1)  979/     43A : 01 20 00            		ld	bc,MAX_RCACH
(1)  980/     43D : CD F9 10            		call	transferRom	; *** ROM ACCESS ***
(1)  981/     440 : C1                  		pop	bc
(1)  982/     441 : E1                  		pop	hl
(1)  983/     442 : C9                  		ret
(1)  984/     443 :                     
(1)  985/     443 :                     ; ----------------------------------------
(1)  986/     443 :                     ; Set track pattern by trk_currBlk
(1)  987/     443 :                     ; ----------------------------------------
(1)  988/     443 :                     
(1)  989/     443 :                     .set_track:
(1)  990/     443 : FD 5E 04            		ld	e,(iy+trk_Blocks)
(1)  991/     446 : FD 56 05            		ld	d,(iy+(trk_Blocks+1))
(1)  992/     449 : FD 7E 13            		ld	a,(iy+trk_currBlk)
(1)  993/     44C : 4F                  		ld	c,a
(1)  994/     44D : C5                  		push	bc
(1)  995/     44E : D5                  		push	de
(1)  996/     44F : CF                  		rst	8
(1)  997/     450 : 0F                  		rrca
(1)  998/     451 : 0F                  		rrca
(1)  999/     452 : 0F                  		rrca
(1) 1000/     453 : E6 1F               		and	00011111b
(1) 1001/     455 : FD 4E 17            		ld	c,(iy+trk_BankBlk)	; c - current block bank
(1) 1002/     458 : CB 79               		bit	7,c			; First time?
(1) 1003/     45A : 20 03               		jr	nz,.first_blk
(1) 1004/     45C : B9                  		cp	c			; SAME instrument data?
(1) 1005/     45D : 28 1E               		jr	z,.keep_blk
(1) 1006/     45F :                     .first_blk:
(1) 1007/     45F : CF                  		rst	8
(1) 1008/     460 : FD 77 17            		ld	(iy+trk_BankBlk),a	; Save inst number
(1) 1009/     463 : 07                  		rlca
(1) 1010/     464 : 07                  		rlca
(1) 1011/     465 : 07                  		rlca
(1) 1012/     466 : 06 00               		ld	b,0
(1) 1013/     468 : 4F                  		ld	c,a
(1) 1014/     469 : FD 6E 23            		ld	l,(iy+trk_RomBlks)	; Transfer FIRST patt
(1) 1015/     46C : FD 66 24            		ld	h,(iy+(trk_RomBlks+1))	; packet
(1) 1016/     46F : FD 7E 25            		ld	a,(iy+(trk_RomBlks+2))
(1) 1017/     472 : E7                  		rst	20h
(1) 1018/     473 : CF                  		rst	8
(1) 1019/     474 : 09                  		add	hl,bc
(1) 1020/     475 : CE 00               		adc	a,0
(1) 1021/     477 : 01 08 00            		ld	bc,8			; 8 blocks stored
(1) 1022/     47A : CD F9 10            		call	transferRom		; ** ROM ACCESS **
(1) 1023/     47D :                     .keep_blk:
(1) 1024/     47D : E1                  		pop	hl
(1) 1025/     47E : C1                  		pop	bc
(1) 1026/     47F : 79                  		ld	a,c
(1) 1027/     480 : E6 07               		and	00000111b
(1) 1028/     482 : CF                  		rst	8
(1) 1029/     483 : 16 00               		ld	d,0
(1) 1030/     485 : 5F                  		ld	e,a
(1) 1031/     486 : 19                  		add	hl,de
(1) 1032/     487 : 7E                  		ld	a,(hl)			; Read byte
(1) 1033/     488 : FE FF               		cp	-1			; If block == -1, end track
(1) 1034/     48A : CA 1C 05            		jp	z,.track_end
(1) 1035/     48D : CF                  		rst	8
(1) 1036/     48E :                     
(1) 1037/     48E : FD 5E 06            		ld	e,(iy+trk_Patt)		; Read CACHE patt heads
(1) 1038/     491 : FD 56 07            		ld	d,(iy+(trk_Patt+1))
(1) 1039/     494 : 4F                  		ld	c,a
(1) 1040/     495 : D5                  		push	de
(1) 1041/     496 : C5                  		push	bc
(1) 1042/     497 : CF                  		rst	8
(1) 1043/     498 : 0F                  		rrca
(1) 1044/     499 : 0F                  		rrca
(1) 1045/     49A : 0F                  		rrca
(1) 1046/     49B : E6 1F               		and	00011111b
(1) 1047/     49D : FD 4E 16            		ld	c,(iy+trk_BankHeads)	; c - current intrument loaded
(1) 1048/     4A0 : CB 79               		bit	7,c			; First time?
(1) 1049/     4A2 : 20 03               		jr	nz,.first_head
(1) 1050/     4A4 : B9                  		cp	c			; SAME instrument data?
(1) 1051/     4A5 : 28 26               		jr	z,.keep_it
(1) 1052/     4A7 :                     .first_head:
(1) 1053/     4A7 : CF                  		rst	8
(1) 1054/     4A8 : FD 77 16            		ld	(iy+trk_BankHeads),a	; Save inst number
(1) 1055/     4AB : 47                  		ld	b,a
(1) 1056/     4AC : 0F                  		rrca
(1) 1057/     4AD : 0F                  		rrca
(1) 1058/     4AE : 0F                  		rrca
(1) 1059/     4AF : E6 E0               		and	11100000b
(1) 1060/     4B1 : 4F                  		ld	c,a
(1) 1061/     4B2 : 78                  		ld	a,b
(1) 1062/     4B3 : 0F                  		rrca
(1) 1063/     4B4 : 0F                  		rrca
(1) 1064/     4B5 : 0F                  		rrca
(1) 1065/     4B6 : E6 03               		and	00000011b
(1) 1066/     4B8 : 47                  		ld	b,a
(1) 1067/     4B9 :                     
(1) 1068/     4B9 : FD 6E 1D            		ld	l,(iy+trk_RomPatt)	; Transfer FIRST patt
(1) 1069/     4BC : FD 66 1E            		ld	h,(iy+(trk_RomPatt+1))	; packet
(1) 1070/     4BF : FD 7E 1F            		ld	a,(iy+(trk_RomPatt+2))
(1) 1071/     4C2 : E7                  		rst	20h
(1) 1072/     4C3 : CF                  		rst	8
(1) 1073/     4C4 : 09                  		add	hl,bc
(1) 1074/     4C5 : CE 00               		adc	a,0
(1) 1075/     4C7 : 01 20 00            		ld	bc,4*8			; 8 heads stored
(1) 1076/     4CA : CD F9 10            		call	transferRom		; ** ROM ACCESS **
(1) 1077/     4CD :                     .keep_it:
(1) 1078/     4CD : C1                  		pop	bc
(1) 1079/     4CE : 79                  		ld	a,c
(1) 1080/     4CF : E6 07               		and	00000111b
(1) 1081/     4D1 : 87                  		add	a,a
(1) 1082/     4D2 : 87                  		add	a,a
(1) 1083/     4D3 : 57                  		ld	d,a
(1) 1084/     4D4 : CF                  		rst	8
(1) 1085/     4D5 : E6 FC               		and	11111100b
(1) 1086/     4D7 : 5F                  		ld	e,a
(1) 1087/     4D8 : 7A                  		ld	a,d
(1) 1088/     4D9 : E6 03               		and	00000011b
(1) 1089/     4DB : 57                  		ld	d,a
(1) 1090/     4DC : E1                  		pop	hl
(1) 1091/     4DD : 19                  		add	hl,de
(1) 1092/     4DE : 5E                  		ld	e,(hl)			; de - Pos
(1) 1093/     4DF : 23                  		inc	hl
(1) 1094/     4E0 : CF                  		rst	8
(1) 1095/     4E1 : 56                  		ld	d,(hl)
(1) 1096/     4E2 : 23                  		inc	hl
(1) 1097/     4E3 : 7E                  		ld	a,(hl)
(1) 1098/     4E4 : 23                  		inc	hl
(1) 1099/     4E5 : FD 77 0C            		ld	(iy+trk_Rows),a
(1) 1100/     4E8 : 7E                  		ld	a,(hl)
(1) 1101/     4E9 : 23                  		inc	hl
(1) 1102/     4EA : FD 77 0D            		ld	(iy+(trk_Rows+1)),a
(1) 1103/     4ED : FD 6E 1D            		ld	l,(iy+trk_RomPatt)	; Transfer FIRST patt
(1) 1104/     4F0 : FD 66 1E            		ld	h,(iy+(trk_RomPatt+1))	; packet
(1) 1105/     4F3 : CF                  		rst	8
(1) 1106/     4F4 : FD 7E 1F            		ld	a,(iy+(trk_RomPatt+2))
(1) 1107/     4F7 : 19                  		add	hl,de
(1) 1108/     4F8 : CE 00               		adc	a,0
(1) 1109/     4FA : FD 75 1A            		ld	(iy+trk_RomPattRead),l
(1) 1110/     4FD : FD 74 1B            		ld	(iy+(trk_RomPattRead+1)),h
(1) 1111/     500 : FD 77 1C            		ld	(iy+(trk_RomPattRead+2)),a
(1) 1112/     503 : FD 5E 08            		ld	e,(iy+trk_Cach)
(1) 1113/     506 : FD 56 09            		ld	d,(iy+(trk_Cach+1))
(1) 1114/     509 :                     
(1) 1115/     509 : FD 73 0A            		ld	(iy+trk_Read),e
(1) 1116/     50C : FD 72 0B            		ld	(iy+(trk_Read+1)),d
(1) 1117/     50F : 0E 20               		ld	c,MAX_RCACH
(1) 1118/     511 : FD 36 10 00         		ld	(iy+trk_cachHalf),0
(1) 1119/     515 : FD 36 11 00         		ld	(iy+trk_rowPause),0
(1) 1120/     519 : C3 F9 10            		jp	transferRom		; ** ROM access **
(1) 1121/     51C :                     
(1) 1122/     51C :                     ; ----------------------------------------
(1) 1123/     51C :                     ; **JUMP ONLY**
(1) 1124/     51C :                     .track_end:
(1) 1125/     51C : CD DF 05            		call	track_out
(1) 1126/     51F : CF                  		rst	8
(1) 1127/     520 : AF                  		xor	a
(1) 1128/     521 : FD 77 11            		ld	(iy+trk_rowPause),a
(1) 1129/     524 : FD 77 12            		ld	(iy+trk_tickTmr),a
(1) 1130/     527 : FD 77 00            		ld	(iy+trk_Status),a	; Disable track slot
(1) 1131/     52A : FD 36 15 80         		ld	(iy+trk_BankIns),80h
(1) 1132/     52E : C9                  		ret
(1) 1133/     52F :                     
(1) 1134/     52F :                     ; ----------------------------------------
(1) 1135/     52F :                     ; Track refill
(1) 1136/     52F :                     ; ----------------------------------------
(1) 1137/     52F :                     
(1) 1138/     52F :                     .effect_fill:
(1) 1139/     52F : FD CB 00 AE         		res	5,(iy+trk_Status)	; Reset refill-from-effect flag
(1) 1140/     533 : C3 43 04            		jp	.set_track
(1) 1141/     536 :                     
(1) 1142/     536 :                     ; ----------------------------------------
(1) 1143/     536 :                     ; Track Start/Reset
(1) 1144/     536 :                     ;
(1) 1145/     536 :                     ; iy - Track buffer
(1) 1146/     536 :                     ; ----------------------------------------
(1) 1147/     536 :                     
(1) 1148/     536 :                     .first_fill:
(1) 1149/     536 : FD CB 00 B6         		res	6,(iy+trk_Status)	; Clear FILL flag
(1) 1150/     53A : CD DF 05            		call	track_out
(1) 1151/     53D : FD 36 12 01         		ld	(iy+trk_tickTmr),1	; <-- Reset tick timer
(1) 1152/     541 : FD 7E 02            		ld	a,(iy+trk_SetBlk)	; Make start block as current block
(1) 1153/     544 : CF                  		rst	8
(1) 1154/     545 : FD 77 13            		ld 	(iy+trk_currBlk),a	; block
(1) 1155/     548 : FD 7E 01            		ld	a,(iy+trk_SeqId)
(1) 1156/     54B : FE FF               		cp	-1			; TODO
(1) 1157/     54D : C8                  		ret	z
(1) 1158/     54E : 87                  		add	a,a
(1) 1159/     54F : 87                  		add	a,a
(1) 1160/     550 : 16 00               		ld	d,0
(1) 1161/     552 : 5F                  		ld	e,a
(1) 1162/     553 : 21 1C 00            		ld	hl,gemaMstrListPos
(1) 1163/     556 : 23                  		inc	hl
(1) 1164/     557 : 7E                  		ld	a,(hl)		; $00xx0000
(1) 1165/     558 : 23                  		inc	hl
(1) 1166/     559 : 4E                  		ld	c,(hl)		; $0000xx00
(1) 1167/     55A : 23                  		inc	hl
(1) 1168/     55B : 6E                  		ld	l,(hl)		; $000000xx
(1) 1169/     55C : CF                  		rst	8
(1) 1170/     55D : 61                  		ld	h,c
(1) 1171/     55E : 19                  		add	hl,de
(1) 1172/     55F : CE 00               		adc	a,0
(1) 1173/     561 : 11 AF 1C            		ld	de,trkInfoCach
(1) 1174/     564 : D5                  		push	de
(1) 1175/     565 : 01 04 00            		ld	bc,4
(1) 1176/     568 : CD F9 10            		call	transferRom	; *** ROM ACCESS ***
(1) 1177/     56B : E1                  		pop	hl
(1) 1178/     56C : 7E                  		ld	a,(hl)
(1) 1179/     56D : 23                  		inc	hl
(1) 1180/     56E : CB 7F               		bit	7,a
(1) 1181/     570 : 28 04               		jr	z,.no_glbl
(1) 1182/     572 : FD CB 00 C6         		set	0,(iy+trk_Status)	; Enable GLOBAL sub-beats
(1) 1183/     576 :                     .no_glbl:
(1) 1184/     576 : CF                  		rst	8
(1) 1185/     577 : E6 7F               		and	01111111b
(1) 1186/     579 : FD 77 03            		ld	(iy+trk_TickSet),a
(1) 1187/     57C : 7E                  		ld	a,(hl)			; Read and temporally
(1) 1188/     57D : 23                  		inc	hl			; grab it's pointers
(1) 1189/     57E : 4E                  		ld	c,(hl)
(1) 1190/     57F : 23                  		inc	hl
(1) 1191/     580 : 6E                  		ld	l,(hl)
(1) 1192/     581 : 61                  		ld	h,c
(1) 1193/     582 : 11 9F 1C            		ld	de,headerOut
(1) 1194/     585 : 0E 0E               		ld	c,0Eh
(1) 1195/     587 : CD F9 10            		call	transferRom		; ** ROM access **
(1) 1196/     58A : DD 21 AC 1C         		ld	ix,headerOut_e-1	; Read temp header BACKWARDS
(1) 1197/     58E : CF                  		rst	8
(1) 1198/     58F :                     
(1) 1199/     58F :                     	; headerOut:
(1) 1200/     58F :                     	; dc.w numof_chnls
(1) 1201/     58F :                     	; dc.l .blk,.pat,.ins
(1) 1202/     58F :                     	; *** READING BACKWARDS
(1) 1203/     58F : CD CC 05            		call	.grab_rhead		; Instrument data
(1) 1204/     592 : FD 75 20            		ld	(iy+trk_RomInst),l
(1) 1205/     595 : FD 74 21            		ld	(iy+(trk_RomInst+1)),h
(1) 1206/     598 : FD 70 22            		ld	(iy+(trk_RomInst+2)),b
(1) 1207/     59B : FD 36 15 80         		ld	(iy+trk_BankIns),80h	; Reset instrument banking
(1) 1208/     59F : E7                  		rst	20h
(1) 1209/     5A0 : CF                  		rst	8
(1) 1210/     5A1 : CD CC 05            		call	.grab_rhead		; Pattern heads
(1) 1211/     5A4 : FD 75 1D            		ld	(iy+trk_RomPatt),l	; Save ROM patt base
(1) 1212/     5A7 : FD 74 1E            		ld	(iy+(trk_RomPatt+1)),h
(1) 1213/     5AA : FD 70 1F            		ld	(iy+(trk_RomPatt+2)),b
(1) 1214/     5AD : FD 36 16 80         		ld	(iy+trk_BankHeads),80h	; Reset pattern banking
(1) 1215/     5B1 : CF                  		rst	8
(1) 1216/     5B2 : CD CC 05            		call	.grab_rhead		; Block data
(1) 1217/     5B5 : FD 75 23            		ld	(iy+trk_RomBlks),l	; Save ROM patt base
(1) 1218/     5B8 : FD 74 24            		ld	(iy+(trk_RomBlks+1)),h
(1) 1219/     5BB : FD 70 25            		ld	(iy+(trk_RomBlks+2)),b
(1) 1220/     5BE : FD 36 17 80         		ld	(iy+trk_BankBlk),80h	; Reset pattern banking
(1) 1221/     5C2 : CF                  		rst	8
(1) 1222/     5C3 : DD 7E 00            		ld	a,(ix)			; dc.w numof_chnls
(1) 1223/     5C6 : FD 77 18            		ld	(iy+trk_MaxChnl),a
(1) 1224/     5C9 : C3 43 04            		jp	.set_track
(1) 1225/     5CC :                     
(1) 1226/     5CC :                     ; Read 68K pointer:
(1) 1227/     5CC :                     ; hl - 00xxxx
(1) 1228/     5CC :                     ;  b - xx0000
(1) 1229/     5CC :                     .grab_rhead:
(1) 1230/     5CC : DD 6E 00            		ld	l,(ix)
(1) 1231/     5CF : DD 2B               		dec	ix
(1) 1232/     5D1 : DD 66 00            		ld	h,(ix)
(1) 1233/     5D4 : CF                  		rst	8
(1) 1234/     5D5 : DD 2B               		dec	ix
(1) 1235/     5D7 : DD 46 00            		ld	b,(ix)
(1) 1236/     5DA : DD 2B               		dec	ix
(1) 1237/     5DC :                     ; 		ld	c,(ix)
(1) 1238/     5DC : DD 2B               		dec	ix
(1) 1239/     5DE : C9                  		ret
(1) 1240/     5DF :                     
(1) 1241/     5DF :                     ; ----------------------------------------
(1) 1242/     5DF :                     ; Reset tracker channels
(1) 1243/     5DF :                     ;
(1) 1244/     5DF :                     ; iy - Track buffer
(1) 1245/     5DF :                     ;
(1) 1246/     5DF :                     ; Breaks:
(1) 1247/     5DF :                     ; b ,de,hl,ix
(1) 1248/     5DF :                     ; ----------------------------------------
(1) 1249/     5DF :                     
(1) 1250/     5DF :                     track_out:
(1) 1251/     5DF : FD E5               		push	iy
(1) 1252/     5E1 : E1                  		pop	hl
(1) 1253/     5E2 : DD 21 00 1E         		ld	ix,trkChnls
(1) 1254/     5E6 : CF                  		rst	8
(1) 1255/     5E7 : 11 26 00            		ld	de,trk_ChnIndx
(1) 1256/     5EA : 19                  		add	hl,de
(1) 1257/     5EB : 06 1A               		ld	b,MAX_TRKINDX
(1) 1258/     5ED :                     .indx_del:
(1) 1259/     5ED : 7E                  		ld	a,(hl)
(1) 1260/     5EE : B7                  		or	a
(1) 1261/     5EF : 28 2A               		jr	z,.nothin
(1) 1262/     5F1 : CF                  		rst	8
(1) 1263/     5F2 : DD E5               		push	ix
(1) 1264/     5F4 : E6 1F               		and	00011111b
(1) 1265/     5F6 : 87                  		add	a,a
(1) 1266/     5F7 : 87                  		add	a,a
(1) 1267/     5F8 : 87                  		add	a,a
(1) 1268/     5F9 : 5F                  		ld	e,a
(1) 1269/     5FA : CF                  		rst	8
(1) 1270/     5FB : DD 19               		add	ix,de
(1) 1271/     5FD : AF                  		xor	a
(1) 1272/     5FE : DD 36 02 FE         		ld	(ix+chnl_Note),-2
(1) 1273/     602 : DD 36 00 01         		ld	(ix+chnl_Flags),1
(1) 1274/     606 : DD 36 04 40         		ld	(ix+chnl_Vol),64
(1) 1275/     60A : DD 77 05            		ld	(ix+chnl_EffId),a
(1) 1276/     60D : CF                  		rst	8
(1) 1277/     60E : DD 77 06            		ld	(ix+chnl_EffArg),a
(1) 1278/     611 : DD 77 03            		ld	(ix+chnl_Ins),a
(1) 1279/     614 : DD 77 07            		ld	(ix+chnl_Type),a
(1) 1280/     617 : DD E1               		pop	ix
(1) 1281/     619 : 77                  		ld	(hl),a
(1) 1282/     61A : 00                  		nop
(1) 1283/     61B :                     .nothin:
(1) 1284/     61B : 23                  		inc	hl
(1) 1285/     61C : 10 CF               		djnz	.indx_del
(1) 1286/     61E : 3E 01               		ld	a,1
(1) 1287/     620 : 32 8A 1C            		ld	(marsUpd),a
(1) 1288/     623 : C9                  		ret
(1) 1289/     624 :                     
(1) 1290/     624 :                     ; ============================================================
(1) 1291/     624 :                     ; --------------------------------------------------------
(1) 1292/     624 :                     ; Process track channels to the sound chips
(1) 1293/     624 :                     ; --------------------------------------------------------
(1) 1294/     624 :                     
(1) 1295/     624 :                     set_chips:
(1) 1296/     624 : E7                  		rst	20h			; Refill wave
(1) 1297/     625 : CD D8 10            		call	get_tick
(1) 1298/     628 : FD 21 95 15         		ld	iy,nikona_BuffList
(1) 1299/     62C :                     .trk_buffrs:
(1) 1300/     62C : FD 7E 00            		ld	a,(iy)
(1) 1301/     62F : FE FF               		cp	-1
(1) 1302/     631 : 28 0F               		jr	z,proc_chips
(1) 1303/     633 : CF                  		rst	8
(1) 1304/     634 : FD E5               		push	iy
(1) 1305/     636 : CD 6B 06            		call	tblbuff_read
(1) 1306/     639 : FD E1               		pop	iy
(1) 1307/     63B : 11 08 00            		ld	de,MAX_BUFFNTRY
(1) 1308/     63E : FD 19               		add	iy,de
(1) 1309/     640 : 18 EA               		jr	.trk_buffrs
(1) 1310/     642 :                     proc_chips:
(1) 1311/     642 : E7                  		rst	20h			; Refill wave
(1) 1312/     643 : CF                  		rst	8
(1) 1313/     644 : FD 21 5A 1A         		ld	iy,tblPSGN		; PSG Noise
(1) 1314/     648 : CD 5D 08            		call	dtbl_singl
(1) 1315/     64B : CF                  		rst	8
(1) 1316/     64C : FD 21 10 1A         		ld	iy,tblPSG		; PSG Squares
(1) 1317/     650 : CD 47 08            		call	dtbl_multi
(1) 1318/     653 : CF                  		rst	8
(1) 1319/     654 : FD 21 72 1A         		ld	iy,tblFM		; FM/FM3/DAC
(1) 1320/     658 : CD 47 08            		call	dtbl_multi
(1) 1321/     65B : CF                  		rst	8
(1) 1322/     65C : FD 21 04 1B         		ld	iy,tblPCM		; SEGA CD PCM
(1) 1323/     660 : CD 47 08            		call	dtbl_multi
(1) 1324/     663 : CF                  		rst	8
(1) 1325/     664 : FD 21 C6 1B         		ld	iy,tblPWM		; 32X PWM
(1) 1326/     668 : C3 47 08            		jp	dtbl_multi
(1) 1327/     66B :                     
(1) 1328/     66B :                     ; ----------------------------------------
(1) 1329/     66B :                     ; Read current track
(1) 1330/     66B :                     ;
(1) 1331/     66B :                     ; iy - Buffer
(1) 1332/     66B :                     tblbuff_read:
(1) 1333/     66B : FD 6E 00            		ld	l,(iy)
(1) 1334/     66E : FD 66 01            		ld	h,(iy+1)
(1) 1335/     671 : CD D8 10            		call	get_tick
(1) 1336/     674 : CF                  		rst	8
(1) 1337/     675 : E5                  		push	hl
(1) 1338/     676 : FD E1               		pop	iy
(1) 1339/     678 : FD 46 00            		ld	b,(iy+trk_Status)	; bit7: Track active?
(1) 1340/     67B : CB 78               		bit	7,b
(1) 1341/     67D : C8                  		ret	z
(1) 1342/     67E : 78                  		ld	a,b			; trk_Status == -1?
(1) 1343/     67F : FE FF               		cp	-1
(1) 1344/     681 : C2 8B 06            		jp	nz,.track_cont
(1) 1345/     684 : CD DF 05            		call	track_out
(1) 1346/     687 : FD 36 00 00         		ld	(iy+trk_Status),0
(1) 1347/     68B :                     .track_cont:
(1) 1348/     68B : E7                  		rst	20h
(1) 1349/     68C : FD E5               		push	iy
(1) 1350/     68E : E1                  		pop	hl
(1) 1351/     68F : CF                  		rst	8
(1) 1352/     690 : DD 21 00 1E         		ld	ix,trkChnls
(1) 1353/     694 : 11 26 00            		ld	de,trk_ChnIndx
(1) 1354/     697 : 19                  		add	hl,de
(1) 1355/     698 : FD 7E 18            		ld	a,(iy+trk_MaxChnl)	; If zero, read ALL indexes (lazy mode)
(1) 1356/     69B : B7                  		or	a
(1) 1357/     69C : 20 02               		jr	nz,.valid
(1) 1358/     69E : 06 1A               		ld	b,MAX_TRKINDX
(1) 1359/     6A0 :                     .valid:
(1) 1360/     6A0 : CF                  		rst	8
(1) 1361/     6A1 : 47                  		ld	b,a
(1) 1362/     6A2 :                     .next_indx:
(1) 1363/     6A2 : 7E                  		ld	a,(hl)			; Read index
(1) 1364/     6A3 : B7                  		or	a
(1) 1365/     6A4 : 20 0B               		jr	nz,.has_indx		; non-zero: valid
(1) 1366/     6A6 : C5                  		push	bc			; waste CPU to
(1) 1367/     6A7 : 06 04               		ld	b,4			; ** wave sync
(1) 1368/     6A9 : 00                  		nop
(1) 1369/     6AA : 00                  		nop
(1) 1370/     6AB : CF                  		rst	8
(1) 1371/     6AC : 10 FE               		djnz	$
(1) 1372/     6AE : C1                  		pop	bc
(1) 1373/     6AF : 18 1C               		jr	.no_indx
(1) 1374/     6B1 :                     .has_indx:
(1) 1375/     6B1 : E6 1F               		and	00011111b
(1) 1376/     6B3 : 87                  		add	a,a
(1) 1377/     6B4 : 87                  		add	a,a
(1) 1378/     6B5 : 87                  		add	a,a
(1) 1379/     6B6 : CF                  		rst	8
(1) 1380/     6B7 : 16 00               		ld	d,0
(1) 1381/     6B9 : 5F                  		ld	e,a
(1) 1382/     6BA : C5                  		push	bc
(1) 1383/     6BB : E5                  		push	hl
(1) 1384/     6BC : DD E5               		push	ix
(1) 1385/     6BE : DD 19               		add	ix,de
(1) 1386/     6C0 : DD 7E 00            		ld	a,(ix)		; Read evin
(1) 1387/     6C3 : E6 0F               		and	00001111b
(1) 1388/     6C5 : C4 D5 06            		call	nz,.do_chip	; Call if non-zero
(1) 1389/     6C8 : CF                  		rst	8
(1) 1390/     6C9 : DD E1               		pop	ix
(1) 1391/     6CB : E1                  		pop	hl
(1) 1392/     6CC : C1                  		pop	bc
(1) 1393/     6CD :                     .no_indx:
(1) 1394/     6CD : 23                  		inc	hl
(1) 1395/     6CE : 10 D2               		djnz	.next_indx
(1) 1396/     6D0 : FD CB 00 9E         		res	3,(iy+trk_Status)	; RESET Volume update bit
(1) 1397/     6D4 : C9                  		ret
(1) 1398/     6D5 :                     
(1) 1399/     6D5 :                     ; ----------------------------------------
(1) 1400/     6D5 :                     ; iy - Track buffer
(1) 1401/     6D5 :                     ; ix - Current channel
(1) 1402/     6D5 :                     
(1) 1403/     6D5 :                     .do_chip:
(1) 1404/     6D5 : DD 7E 03            		ld	a,(ix+chnl_Ins)		; Check intrument type FIRST
(1) 1405/     6D8 : B7                  		or	a
(1) 1406/     6D9 : C8                  		ret	z			; If 0 == stop
(1) 1407/     6DA : CF                  		rst	8
(1) 1408/     6DB : 3D                  		dec	a			; inst-1
(1) 1409/     6DC : E6 7F               		and	01111111b
(1) 1410/     6DE : 21 AF 1C            		ld	hl,instListOut		; temporal storage for instrument
(1) 1411/     6E1 : FD 4E 15            		ld	c,(iy+trk_BankIns)	; c - current intrument loaded
(1) 1412/     6E4 : CB 79               		bit	7,c			; First time?
(1) 1413/     6E6 : 20 03               		jr	nz,.first_ins
(1) 1414/     6E8 : B9                  		cp	c			; SAME instrument data?
(1) 1415/     6E9 : 28 24               		jr	z,.keep_it
(1) 1416/     6EB :                     .first_ins:
(1) 1417/     6EB : E5                  		push	hl
(1) 1418/     6EC : FD 77 15            		ld	(iy+trk_BankIns),a	; Save inst number
(1) 1419/     6EF : 07                  		rlca
(1) 1420/     6F0 : 07                  		rlca
(1) 1421/     6F1 : 07                  		rlca
(1) 1422/     6F2 : 47                  		ld	b,a
(1) 1423/     6F3 : E6 F8               		and	11111000b
(1) 1424/     6F5 : 4F                  		ld	c,a
(1) 1425/     6F6 : 78                  		ld	a,b
(1) 1426/     6F7 : E6 07               		and	00000111b
(1) 1427/     6F9 : CF                  		rst	8
(1) 1428/     6FA : 47                  		ld	b,a
(1) 1429/     6FB : EB                  		ex	hl,de
(1) 1430/     6FC : FD 6E 20            		ld	l,(iy+trk_RomInst)
(1) 1431/     6FF : FD 66 21            		ld	h,(iy+(trk_RomInst+1))
(1) 1432/     702 : FD 7E 22            		ld	a,(iy+(trk_RomInst+2))
(1) 1433/     705 : 09                  		add	hl,bc
(1) 1434/     706 : CE 00               		adc	a,0
(1) 1435/     708 : 01 08 00            		ld	bc,8			; 8 bytes
(1) 1436/     70B : CD F9 10            		call	transferRom		; ** ROM access **
(1) 1437/     70E : E1                  		pop	hl
(1) 1438/     70F :                     .keep_it:
(1) 1439/     70F : E5                  		push	hl			; <-- save hl
(1) 1440/     710 : CD 2D 07            		call	.grab_link
(1) 1441/     713 : D1                  		pop	de			; --> recover as de
(1) 1442/     714 :                     	; hl - current table
(1) 1443/     714 :                     	; de - instrument data
(1) 1444/     714 : FE FF               		cp	-1			; Found any link?
(1) 1445/     716 : C8                  		ret	z
(1) 1446/     717 : 23                  		inc	hl			; Skip link
(1) 1447/     718 : 23                  		inc	hl
(1) 1448/     719 : FD 7E 14            		ld	a,(iy+trk_Priority)
(1) 1449/     71C : 77                  		ld	(hl),a			; Write priority level
(1) 1450/     71D : 23                  		inc	hl
(1) 1451/     71E : FD 7E 0E            		ld	a,(iy+trk_VolMaster)
(1) 1452/     721 : 77                  		ld	(hl),a			; Write current MASTER volume
(1) 1453/     722 : 01 0D 00            		ld	bc,10h-3		; Move to instr data
(1) 1454/     725 : 09                  		add	hl,bc
(1) 1455/     726 : EB                  		ex	hl,de			; <-- swap for ldir
(1) 1456/     727 : 01 08 00            		ld	bc,8
(1) 1457/     72A : ED B0               		ldir				; COPYPASTE instr data from temporal
(1) 1458/     72C : C9                  		ret
(1) 1459/     72D :                     
(1) 1460/     72D :                     ; ----------------------------------------
(1) 1461/     72D :                     ; Search for a linked channel on the
(1) 1462/     72D :                     ; chip table
(1) 1463/     72D :                     ;
(1) 1464/     72D :                     ; Input:
(1) 1465/     72D :                     ; iy - Track buffer
(1) 1466/     72D :                     ; ix - Current channel
(1) 1467/     72D :                     ; hl - Intrument data
(1) 1468/     72D :                     ;
(1) 1469/     72D :                     ; Returns:
(1) 1470/     72D :                     ; hl - Channel table to use
(1) 1471/     72D :                     ;  a - Return value:
(1) 1472/     72D :                     ;       0 - Found
(1) 1473/     72D :                     ;      -1 - Not found
(1) 1474/     72D :                     ; ----------------------------------------
(1) 1475/     72D :                     
(1) 1476/     72D :                     .grab_link:
(1) 1477/     72D : 7E                  		ld	a,(hl)			; Check INSTRUMENT type
(1) 1478/     72E : E6 F0               		and	11110000b		; Filter bits
(1) 1479/     730 : 5F                  		ld	e,a			; e - NEW chip
(1) 1480/     731 : DD 7E 01            		ld	a,(ix+chnl_Chip)	; a - our current chip
(1) 1481/     734 : E6 F0               		and	11110000b		; Filter bits too.
(1) 1482/     736 : 28 6A               		jr	z,.new_chip		; If 0: It's a NEW chip
(1) 1483/     738 : BB                  		cp 	e			; Same chip as NEW?
(1) 1484/     739 : 28 10               		jr	z,.srch_link		; then re-use the slot
(1) 1485/     73B : CF                  		rst	8
(1) 1486/     73C : 57                  		ld	d,a			; d - Chip to silence
(1) 1487/     73D : D5                  		push	de
(1) 1488/     73E : CD 4B 07            		call	.srch_link		; Search our link (first)
(1) 1489/     741 : D1                  		pop	de
(1) 1490/     742 : FE FF               		cp	-1
(1) 1491/     744 : C8                  		ret	z
(1) 1492/     745 : CF                  		rst	8
(1) 1493/     746 : CD 2C 08            		call	.reset_link
(1) 1494/     749 : 18 57               		jr	.new_chip
(1) 1495/     74B :                     
(1) 1496/     74B :                     ; ----------------------------------------
(1) 1497/     74B :                     ; ** RELINK **
(1) 1498/     74B :                     ; e - Our current chip
(1) 1499/     74B :                     .srch_link:
(1) 1500/     74B : CD 12 08            		call	.pick_tbl	; Pick chip table in hl
(1) 1501/     74E : DD E5               		push	ix		; copy ix to bc
(1) 1502/     750 : C1                  		pop	bc
(1) 1503/     751 : B7                  		or	a
(1) 1504/     752 : FA 92 07            		jp	m,.singl_link
(1) 1505/     755 :                     .srch_lloop:
(1) 1506/     755 : 7E                  		ld	a,(hl)		; Read LSB
(1) 1507/     756 : FE FF               		cp	-1		; If -1, return -1
(1) 1508/     758 : 28 45               		jr	z,.refill
(1) 1509/     75A : B9                  		cp	c
(1) 1510/     75B : 20 07               		jr	nz,.invldl
(1) 1511/     75D : CF                  		rst	8
(1) 1512/     75E : 23                  		inc	hl
(1) 1513/     75F : 7E                  		ld	a,(hl)
(1) 1514/     760 : 2B                  		dec	hl
(1) 1515/     761 : B8                  		cp	b
(1) 1516/     762 : 28 08               		jr	z,.reroll
(1) 1517/     764 :                     .invldl:
(1) 1518/     764 : D5                  		push	de
(1) 1519/     765 : 11 18 00            		ld	de,MAX_TBLSIZE
(1) 1520/     768 :                     ; 		rst	8
(1) 1521/     768 :                     ; 		nop	; wave sync *
(1) 1522/     768 : 19                  		add	hl,de
(1) 1523/     769 : D1                  		pop	de
(1) 1524/     76A : 18 E9               		jr	.srch_lloop
(1) 1525/     76C :                     .reroll:
(1) 1526/     76C :                     	; *** Special re-roll check ***
(1) 1527/     76C : E5                  		push	hl
(1) 1528/     76D : 01 04 00            		ld	bc,4		; <-- fake iy+04h
(1) 1529/     770 : 09                  		add	hl,bc
(1) 1530/     771 : CF                  		rst	8
(1) 1531/     772 : 4E                  		ld	c,(hl)		; c - ID
(1) 1532/     773 : E1                  		pop	hl
(1) 1533/     774 : 7B                  		ld	a,e
(1) 1534/     775 : FE 80               		cp	80h		; PSG?
(1) 1535/     777 : 28 02               		jr	z,.chk_psg
(1) 1536/     779 :                     ; 		cp	0A0h		; FM normal?
(1) 1537/     779 :                     ; 		jr	z,.chk_fm
(1) 1538/     779 : 18 22               		jr	.rnot_psg
(1) 1539/     77B :                     .chk_psg:
(1) 1540/     77B : 3A 81 1C            		ld	a,(psgHatMode)
(1) 1541/     77E : E6 03               		and	011b
(1) 1542/     780 : FE 03               		cp	011b
(1) 1543/     782 : 20 19               		jr	nz,.rnot_psg
(1) 1544/     784 : 79                  		ld	a,c
(1) 1545/     785 : FE 02               		cp	2
(1) 1546/     787 : 20 14               		jr	nz,.rnot_psg
(1) 1547/     789 : CF                  		rst	8
(1) 1548/     78A : 16 80               		ld	d,80h		; Set PSG silence
(1) 1549/     78C : CD 2C 08            		call	.reset_link	; on PSG3
(1) 1550/     78F : C3 0F 08            		jp	.set_asfull
(1) 1551/     792 :                     
(1) 1552/     792 :                     ; ----------------------
(1) 1553/     792 :                     ; PSGN/FM3/FM6
(1) 1554/     792 :                     .singl_link:
(1) 1555/     792 : 23                  		inc	hl			; Read MSB first
(1) 1556/     793 : 7E                  		ld	a,(hl)
(1) 1557/     794 : 2B                  		dec	hl
(1) 1558/     795 : CF                  		rst	8
(1) 1559/     796 : B8                  		cp	b			; MSB match?
(1) 1560/     797 : 20 06               		jr	nz,.refill
(1) 1561/     799 : 7E                  		ld	a,(hl)			; Read LSB
(1) 1562/     79A : B9                  		cp	c
(1) 1563/     79B : 20 02               		jr	nz,.refill
(1) 1564/     79D :                     ; ----------------------
(1) 1565/     79D :                     .rnot_psg:
(1) 1566/     79D : AF                  		xor	a
(1) 1567/     79E : C9                  		ret
(1) 1568/     79F :                     ; ***
(1) 1569/     79F :                     .refill:
(1) 1570/     79F : DD 5E 01            		ld	e,(ix+chnl_Chip)
(1) 1571/     7A2 :                     
(1) 1572/     7A2 :                     ; ----------------------------------------
(1) 1573/     7A2 :                     ; *** NEW CHIP ***
(1) 1574/     7A2 :                     ; e - Chip to set
(1) 1575/     7A2 :                     .new_chip:
(1) 1576/     7A2 : 7B                  		ld	a,e			; Read NEW chip
(1) 1577/     7A3 : B7                  		or	a			; If non-minus, exit.
(1) 1578/     7A4 : F0                  		ret	p
(1) 1579/     7A5 : CD 12 08            		call	.pick_tbl
(1) 1580/     7A8 : CF                  		rst	8
(1) 1581/     7A9 : FD 4E 14            		ld	c,(iy+trk_Priority)	; c - OUR priority level
(1) 1582/     7AC : B7                  		or	a
(1) 1583/     7AD : FA FD 07            		jp	m,.singl_free
(1) 1584/     7B0 : E5                  		push	hl			; Backup START table
(1) 1585/     7B1 :                     ; PASS 1
(1) 1586/     7B1 :                     .srch_free:
(1) 1587/     7B1 : 7E                  		ld	a,(hl)			; Read LSB
(1) 1588/     7B2 : FE FF               		cp	-1			; If -1, return -1
(1) 1589/     7B4 : 28 0B               		jr	z,.pass_2
(1) 1590/     7B6 : 23                  		inc	hl
(1) 1591/     7B7 : 46                  		ld	b,(hl)			; Read MSB
(1) 1592/     7B8 : 2B                  		dec	hl
(1) 1593/     7B9 :                     ; 		nop	; wave sync
(1) 1594/     7B9 :                     ; 		nop
(1) 1595/     7B9 :                     ; 		rst	8
(1) 1596/     7B9 :                     ; 		nop
(1) 1597/     7B9 :                     ; 		nop
(1) 1598/     7B9 : B0                  		or	b
(1) 1599/     7BA : 28 24               		jr	z,.new_link_z
(1) 1600/     7BC : CD D9 07            		call	.nextsrch_tbl
(1) 1601/     7BF : 18 F0               		jr	.srch_free
(1) 1602/     7C1 :                     
(1) 1603/     7C1 :                     ; PASS 2
(1) 1604/     7C1 :                     ; Rewrite mode
(1) 1605/     7C1 :                     .pass_2:
(1) 1606/     7C1 : E1                  		pop	hl
(1) 1607/     7C2 :                     .next_prio:
(1) 1608/     7C2 : 7E                  		ld	a,(hl)		; Read LSB
(1) 1609/     7C3 : FE FF               		cp	-1		; If -1, return -1
(1) 1610/     7C5 : C8                  		ret	z
(1) 1611/     7C6 : 23                  		inc	hl
(1) 1612/     7C7 : 23                  		inc	hl
(1) 1613/     7C8 : 7E                  		ld	a,(hl)		; Read priority
(1) 1614/     7C9 : 2B                  		dec	hl
(1) 1615/     7CA : 2B                  		dec	hl
(1) 1616/     7CB : B9                  		cp	c
(1) 1617/     7CC : 28 16               		jr	z,.new_link_o
(1) 1618/     7CE : 38 14               		jr	c,.new_link_o
(1) 1619/     7D0 : B7                  		or	a
(1) 1620/     7D1 : 28 11               		jr	z,.new_link_o
(1) 1621/     7D3 : CF                  		rst	8
(1) 1622/     7D4 : CD D9 07            		call	.nextsrch_tbl
(1) 1623/     7D7 : 18 E9               		jr	.next_prio
(1) 1624/     7D9 :                     .nextsrch_tbl:
(1) 1625/     7D9 : D5                  		push	de
(1) 1626/     7DA : 11 18 00            		ld	de,MAX_TBLSIZE
(1) 1627/     7DD : 19                  		add	hl,de
(1) 1628/     7DE : D1                  		pop	de
(1) 1629/     7DF :                     ; 		nop	; wave sync
(1) 1630/     7DF :                     ; 		nop
(1) 1631/     7DF :                     ; 		rst	8
(1) 1632/     7DF :                     ; 		nop
(1) 1633/     7DF :                     ; 		nop
(1) 1634/     7DF : C9                  		ret
(1) 1635/     7E0 :                     .new_link_z:
(1) 1636/     7E0 : 33                  		inc	sp		; skip backup
(1) 1637/     7E1 : 33                  		inc	sp
(1) 1638/     7E2 : 18 08               		jr	.new_link
(1) 1639/     7E4 :                     
(1) 1640/     7E4 :                     ; OVERWRITE link
(1) 1641/     7E4 :                     .new_link_o:
(1) 1642/     7E4 : E5                  		push	hl
(1) 1643/     7E5 : DD 56 01            		ld	d,(ix+chnl_Chip)
(1) 1644/     7E8 : CD 2C 08            		call	.reset_link
(1) 1645/     7EB : E1                  		pop	hl
(1) 1646/     7EC :                     ; NEW link
(1) 1647/     7EC :                     .new_link:
(1) 1648/     7EC : CF                  		rst	8
(1) 1649/     7ED : 23                  		inc	hl
(1) 1650/     7EE : 23                  		inc	hl
(1) 1651/     7EF :                     ; hl+2
(1) 1652/     7EF :                     .l_hiprio:
(1) 1653/     7EF : DD 73 01            		ld	(ix+chnl_Chip),e
(1) 1654/     7F2 : DD E5               		push	ix
(1) 1655/     7F4 : D1                  		pop	de
(1) 1656/     7F5 : 71                  		ld	(hl),c		; write priority
(1) 1657/     7F6 : 2B                  		dec	hl
(1) 1658/     7F7 : CF                  		rst	8
(1) 1659/     7F8 : 72                  		ld 	(hl),d		; MSB
(1) 1660/     7F9 : 2B                  		dec	hl
(1) 1661/     7FA : 73                  		ld	(hl),e		; LSB
(1) 1662/     7FB : AF                  		xor	a
(1) 1663/     7FC : C9                  		ret
(1) 1664/     7FD :                     
(1) 1665/     7FD :                     ; Single slot
(1) 1666/     7FD :                     ; c - priority
(1) 1667/     7FD :                     ; e - chip
(1) 1668/     7FD :                     .singl_free:
(1) 1669/     7FD : 46                  		ld	b,(hl)
(1) 1670/     7FE : 23                  		inc	hl
(1) 1671/     7FF : 7E                  		ld	a,(hl)
(1) 1672/     800 : 23                  		inc	hl
(1) 1673/     801 : B0                  		or	b
(1) 1674/     802 : 28 EB               		jr	z,.l_hiprio
(1) 1675/     804 : CF                  		rst	8
(1) 1676/     805 : 7E                  		ld	a,(hl)
(1) 1677/     806 : B9                  		cp	c
(1) 1678/     807 : 28 E6               		jr	z,.l_hiprio
(1) 1679/     809 : 38 E4               		jr	c,.l_hiprio		; PRIORITY
(1) 1680/     80B : B7                  		or	a
(1) 1681/     80C : 28 E1               		jr	z,.l_hiprio
(1) 1682/     80E : CF                  		rst	8
(1) 1683/     80F :                     .set_asfull:
(1) 1684/     80F : 3E FF               		ld	a,-1			; Return -1, can't use instrument.
(1) 1685/     811 : C9                  		ret
(1) 1686/     812 :                     
(1) 1687/     812 :                     ; Pick chip table
(1) 1688/     812 :                     ; In:
(1) 1689/     812 :                     ;  a - ID
(1) 1690/     812 :                     ;
(1) 1691/     812 :                     ; Out:
(1) 1692/     812 :                     ;  a - Special bit + ID
(1) 1693/     812 :                     ;
(1) 1694/     812 :                     ; hl - Table
(1) 1695/     812 :                     .pick_tbl:
(1) 1696/     812 : D5                  		push	de
(1) 1697/     813 : 0F                  		rrca
(1) 1698/     814 : 0F                  		rrca
(1) 1699/     815 : 0F                  		rrca
(1) 1700/     816 : 0F                  		rrca
(1) 1701/     817 : E6 07               		and	00000111b
(1) 1702/     819 : 87                  		add	a,a
(1) 1703/     81A : 21 00 1A            		ld	hl,tblList
(1) 1704/     81D : E5                  		push	hl
(1) 1705/     81E : 16 00               		ld	d,0
(1) 1706/     820 : 5F                  		ld	e,a
(1) 1707/     821 : 19                  		add	hl,de
(1) 1708/     822 : 5E                  		ld	e,(hl)
(1) 1709/     823 : 23                  		inc	hl
(1) 1710/     824 : 7E                  		ld	a,(hl)
(1) 1711/     825 : 57                  		ld	d,a
(1) 1712/     826 : CB BA               		res	7,d
(1) 1713/     828 : E1                  		pop	hl
(1) 1714/     829 : 19                  		add	hl,de
(1) 1715/     82A : D1                  		pop	de
(1) 1716/     82B : C9                  		ret
(1) 1717/     82C :                     
(1) 1718/     82C :                     ; d - Silence chip
(1) 1719/     82C :                     ;
(1) 1720/     82C :                     ; Uses:
(1) 1721/     82C :                     ; bc
(1) 1722/     82C :                     .reset_link:
(1) 1723/     82C : CF                  		rst	8
(1) 1724/     82D : 36 00               		ld	(hl),0			; Delete link
(1) 1725/     82F : 23                  		inc	hl
(1) 1726/     830 : 36 00               		ld	(hl),0
(1) 1727/     832 : 23                  		inc	hl
(1) 1728/     833 : 72                  		ld	(hl),d			; Set "silence" chip ID.
(1) 1729/     834 : 23                  		inc	hl
(1) 1730/     835 : 36 00               		ld	(hl),0			; Clear master volume
(1) 1731/     837 : 01 05 00            		ld	bc,8-3			; Go to 08h
(1) 1732/     83A : 09                  		add	hl,bc
(1) 1733/     83B : 06 04               		ld	b,8/2
(1) 1734/     83D :                     .clrfull:
(1) 1735/     83D : 36 00               		ld	(hl),0			; Reset settings 08-0Bh
(1) 1736/     83F : 23                  		inc	hl
(1) 1737/     840 : 36 00               		ld	(hl),0
(1) 1738/     842 : 23                  		inc	hl
(1) 1739/     843 : CF                  		rst	8
(1) 1740/     844 : 10 F7               		djnz	.clrfull
(1) 1741/     846 : C9                  		ret
(1) 1742/     847 :                     
(1) 1743/     847 :                     ; ============================================
(1) 1744/     847 :                     ; ----------------------------------------
(1) 1745/     847 :                     ; Process chip using it's table
(1) 1746/     847 :                     ;
(1) 1747/     847 :                     ; iy - table to read
(1) 1748/     847 :                     ; ----------------------------------------
(1) 1749/     847 :                     
(1) 1750/     847 :                     dtbl_multi:
(1) 1751/     847 : FD 7E 00            		ld	a,(iy)
(1) 1752/     84A : FE FF               		cp	-1
(1) 1753/     84C : C8                  		ret	z
(1) 1754/     84D : CD 5D 08            		call	dtbl_singl
(1) 1755/     850 : CF                  		rst	8
(1) 1756/     851 : 11 18 00            		ld	de,MAX_TBLSIZE
(1) 1757/     854 : FD 19               		add	iy,de
(1) 1758/     856 : 06 03               		ld	b,3	; wave sync ** IMPORTANT **
(1) 1759/     858 : 10 FE               		djnz	$
(1) 1760/     85A : CF                  		rst	8
(1) 1761/     85B : 18 EA               		jr	dtbl_multi
(1) 1762/     85D :                     dtbl_singl:
(1) 1763/     85D : FD 5E 00            		ld	e,(iy)		; Read link
(1) 1764/     860 : FD 56 01            		ld	d,(iy+1)
(1) 1765/     863 : 7A                  		ld	a,d		; If no-zero, active
(1) 1766/     864 : B3                  		or	e
(1) 1767/     865 : 20 60               		jr	nz,.linked
(1) 1768/     867 : FD 7E 02            		ld	a,(iy+2)	; Silence request?
(1) 1769/     86A : B7                  		or	a
(1) 1770/     86B : F0                  		ret	p		; Return if not.
(1) 1771/     86C : CF                  		rst	8
(1) 1772/     86D : FD 36 02 00         		ld	(iy+2),0	; Reset request on memory
(1) 1773/     871 :                     
(1) 1774/     871 :                     ; ----------------------------------------
(1) 1775/     871 :                     ; chip-silence request
(1) 1776/     871 :                     ; iy - Table
(1) 1777/     871 : E6 F0               		and	11110000b
(1) 1778/     873 : FE 80               		cp	80h
(1) 1779/     875 : 28 1E               		jr	z,.siln_psg
(1) 1780/     877 : FE 90               		cp	90h
(1) 1781/     879 : 28 16               		jr	z,.siln_psg_n
(1) 1782/     87B : FE A0               		cp	0A0h
(1) 1783/     87D : 28 42               		jr	z,.siln_fm
(1) 1784/     87F : FE B0               		cp	0B0h
(1) 1785/     881 : 28 3E               		jr	z,.siln_fm
(1) 1786/     883 : CF                  		rst	8
(1) 1787/     884 : FE C0               		cp	0C0h
(1) 1788/     886 : 28 36               		jr	z,.siln_dac
(1) 1789/     888 : FE D0               		cp	0D0h
(1) 1790/     88A : 28 10               		jr	z,.siln_pcm
(1) 1791/     88C : FE E0               		cp	0E0h
(1) 1792/     88E : 28 18               		jr	z,.siln_pwm
(1) 1793/     890 : C9                  		ret
(1) 1794/     891 :                     .siln_psg_n:
(1) 1795/     891 : AF                  		xor	a
(1) 1796/     892 : 32 81 1C            		ld	(psgHatMode),a
(1) 1797/     895 :                     .siln_psg:
(1) 1798/     895 : CF                  		rst	8
(1) 1799/     896 : DD 21 2F 16         		ld	ix,psgcom
(1) 1800/     89A : 18 16               		jr	.rcyl_com
(1) 1801/     89C :                     
(1) 1802/     89C :                     ; --------------------------------
(1) 1803/     89C :                     
(1) 1804/     89C :                     .siln_pcm:
(1) 1805/     89C : 3E 01               		ld	a,1
(1) 1806/     89E : 32 8B 1C            		ld	(mcdUpd),a
(1) 1807/     8A1 : CF                  		rst	8
(1) 1808/     8A2 : DD 21 B7 15         		ld	ix,pcmcom
(1) 1809/     8A6 : 18 0A               		jr	.rcyl_com
(1) 1810/     8A8 :                     .siln_pwm:
(1) 1811/     8A8 : 3E 01               		ld	a,1
(1) 1812/     8AA : 32 8A 1C            		ld	(marsUpd),a
(1) 1813/     8AD : CF                  		rst	8
(1) 1814/     8AE : DD 21 F7 15         		ld	ix,pwmcom
(1) 1815/     8B2 :                     ; 		jr	.rcyl_com
(1) 1816/     8B2 :                     
(1) 1817/     8B2 :                     ; --------------------------------
(1) 1818/     8B2 :                     
(1) 1819/     8B2 :                     .rcyl_com:
(1) 1820/     8B2 : 06 00               		ld	b,0
(1) 1821/     8B4 : FD 4E 04            		ld	c,(iy+04h)
(1) 1822/     8B7 : DD 09               		add	ix,bc
(1) 1823/     8B9 : DD 36 00 04         		ld	(ix),100b	; key-cut
(1) 1824/     8BD : C9                  		ret
(1) 1825/     8BE :                     
(1) 1826/     8BE :                     ; --------------------------------
(1) 1827/     8BE :                     
(1) 1828/     8BE :                     .siln_dac:
(1) 1829/     8BE : CD 43 13            		call	dac_off
(1) 1830/     8C1 :                     .siln_fm:
(1) 1831/     8C1 : CD 94 0A            		call	.fm_keyoff
(1) 1832/     8C4 : C3 9C 0A            		jp	.fm_tloff
(1) 1833/     8C7 :                     
(1) 1834/     8C7 :                     ; ----------------------------------------
(1) 1835/     8C7 :                     ; Process channel now
(1) 1836/     8C7 :                     ; iy - Table
(1) 1837/     8C7 :                     ; ix - Tracker channel
(1) 1838/     8C7 :                     .linked:
(1) 1839/     8C7 : 1A                  		ld	a,(de)		; ** chnl_Flags
(1) 1840/     8C8 : 47                  		ld	b,a		; b - flags to check
(1) 1841/     8C9 : E6 0F               		and	00001111b	; evin flags?
(1) 1842/     8CB : C8                  		ret	z
(1) 1843/     8CC : 78                  		ld	a,b
(1) 1844/     8CD : E6 F0               		and	11110000b	; Keep OTHER bits
(1) 1845/     8CF : 12                  		ld	(de),a		; ** clear chnl_Flags
(1) 1846/     8D0 : D5                  		push	de
(1) 1847/     8D1 : DD E1               		pop	ix
(1) 1848/     8D3 : FD E5               		push	iy		; table+10h instrment data
(1) 1849/     8D5 : E1                  		pop	hl
(1) 1850/     8D6 : 11 10 00            		ld	de,10h
(1) 1851/     8D9 : 19                  		add	hl,de
(1) 1852/     8DA :                     	;  b - Flags LR00evin (Eff|Vol|Ins|Note)
(1) 1853/     8DA :                     	; iy - Our chip table
(1) 1854/     8DA :                     	; ix - Track channel
(1) 1855/     8DA :                     	; hl - Intrument data
(1) 1856/     8DA : CB 40               		bit	0,b		; Note
(1) 1857/     8DC : C4 40 0F            		call	nz,.note
(1) 1858/     8DF : CB 48               		bit	1,b		; Intrument
(1) 1859/     8E1 : C4 8F 0D            		call	nz,.inst
(1) 1860/     8E4 : CF                  		rst	8
(1) 1861/     8E5 : CB 50               		bit	2,b		; Volume
(1) 1862/     8E7 : C4 86 0D            		call	nz,.volu
(1) 1863/     8EA : CB 58               		bit	3,b		; Effect
(1) 1864/     8EC : C4 84 0C            		call	nz,.effc
(1) 1865/     8EF : 7E                  		ld	a,(hl)		; Read INS type
(1) 1866/     8F0 : E6 70               		and	01110000b	; Filter bits
(1) 1867/     8F2 : 0F                  		rrca
(1) 1868/     8F3 : 0F                  		rrca
(1) 1869/     8F4 : 0F                  		rrca
(1) 1870/     8F5 : CF                  		rst	8
(1) 1871/     8F6 : 16 00               		ld	d,0
(1) 1872/     8F8 : 5F                  		ld	e,a
(1) 1873/     8F9 : 21 02 09            		ld	hl,.mk_list
(1) 1874/     8FC : 19                  		add	hl,de
(1) 1875/     8FD : 7E                  		ld	a,(hl)
(1) 1876/     8FE : 23                  		inc	hl
(1) 1877/     8FF : 66                  		ld	h,(hl)
(1) 1878/     900 : 6F                  		ld	l,a
(1) 1879/     901 : E9                  		jp	(hl)
(1) 1880/     902 :                     ; --------------------------------
(1) 1881/     902 :                     .mk_list:
(1) 1882/     902 : 36 09               		dw .mk_psg
(1) 1883/     904 : 10 09               		dw .mk_psgn
(1) 1884/     906 : B4 09               		dw .mk_fm
(1) 1885/     908 : 2A 0A               		dw .mk_fmspc
(1) 1886/     90A : 7E 0B               		dw .mk_dac
(1) 1887/     90C : D2 0B               		dw .mk_pcm
(1) 1888/     90E : 63 0C               		dw .mk_pwm
(1) 1889/     910 :                     
(1) 1890/     910 :                     ; --------------------------------
(1) 1891/     910 :                     ; PSGN
(1) 1892/     910 :                     ; --------------------------------
(1) 1893/     910 :                     
(1) 1894/     910 :                     .mk_psgn:
(1) 1895/     910 : CB 40               		bit	0,b
(1) 1896/     912 : 28 6A               		jr	z,.psg_keyon
(1) 1897/     914 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 1898/     917 : DD E5               		push	ix
(1) 1899/     919 : DD 21 32 16         		ld	ix,psgcom+3	; Steal PSG3
(1) 1900/     91D : CF                  		rst	8
(1) 1901/     91E : FE FE               		cp	-2
(1) 1902/     920 : 28 7E               		jr	z,.kycut_psgn
(1) 1903/     922 : FE FF               		cp	-1
(1) 1904/     924 : 28 6D               		jr	z,.kyoff_psgn
(1) 1905/     926 : DD 36 00 01         		ld	(ix+COM),001b	; Key ON
(1) 1906/     92A : 5F                  		ld	e,a
(1) 1907/     92B : 3A 81 1C            		ld	a,(psgHatMode)	; Tone 3?
(1) 1908/     92E : E6 03               		and	011b
(1) 1909/     930 : FE 03               		cp	011b
(1) 1910/     932 : 20 4A               		jr	nz,.psg_keyon	; Normal
(1) 1911/     934 : 18 21               		jr	.from_psgn	; Tone 3
(1) 1912/     936 :                     
(1) 1913/     936 :                     ; --------------------------------
(1) 1914/     936 :                     ; PSG
(1) 1915/     936 :                     ; --------------------------------
(1) 1916/     936 :                     
(1) 1917/     936 :                     .mk_psg:
(1) 1918/     936 : CB 40               		bit	0,b
(1) 1919/     938 : 28 44               		jr	z,.psg_keyon
(1) 1920/     93A : CF                  		rst	8
(1) 1921/     93B : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 1922/     93E : DD E5               		push	ix
(1) 1923/     940 : DD 21 2F 16         		ld	ix,psgcom	; ix - psgcom
(1) 1924/     944 : FD 5E 04            		ld	e,(iy+04h)
(1) 1925/     947 : 16 00               		ld	d,0
(1) 1926/     949 : DD 19               		add	ix,de
(1) 1927/     94B : FE FE               		cp	-2
(1) 1928/     94D : 28 54               		jr	z,.kycut_psg
(1) 1929/     94F : FE FF               		cp	-1
(1) 1930/     951 : 28 43               		jr	z,.kyoff_psg
(1) 1931/     953 : DD 36 00 01         		ld	(ix+COM),001b	; Key ON
(1) 1932/     957 :                     .from_psgn:
(1) 1933/     957 : CF                  		rst	8
(1) 1934/     958 : 16 00               		ld	d,0		; de - note*2
(1) 1935/     95A : FD 5E 06            		ld	e,(iy+06h)	; Freq index
(1) 1936/     95D : 21 2D 14            		ld	hl,psgFreq_List-(36*2)
(1) 1937/     960 : 19                  		add	hl,de
(1) 1938/     961 : 7E                  		ld	a,(hl)
(1) 1939/     962 : 23                  		inc	hl
(1) 1940/     963 : 66                  		ld	h,(hl)
(1) 1941/     964 : 6F                  		ld	l,a
(1) 1942/     965 : FD 7E 07            		ld	a,(iy+07h)	; pitchbend
(1) 1943/     968 : 07                  		rlca			; << 3
(1) 1944/     969 : 07                  		rlca
(1) 1945/     96A : CF                  		rst	8
(1) 1946/     96B : 07                  		rlca
(1) 1947/     96C : 57                  		ld	d,a
(1) 1948/     96D : E6 F8               		and	11111000b
(1) 1949/     96F : 5F                  		ld	e,a
(1) 1950/     970 : 7A                  		ld	a,d
(1) 1951/     971 : E6 07               		and	00000111b
(1) 1952/     973 : 57                  		ld	d,a
(1) 1953/     974 : 37                  		scf
(1) 1954/     975 : 3F                  		ccf
(1) 1955/     976 : ED 52               		sbc	hl,de
(1) 1956/     978 : DD 75 1C            		ld	(ix+DTL),l
(1) 1957/     97B : DD 74 20            		ld	(ix+DTH),h
(1) 1958/     97E :                     .psg_keyon:
(1) 1959/     97E : FD 7E 08            		ld	a,(iy+08h)	; Set current Volume
(1) 1960/     981 : FD 96 03            		sub	a,(iy+03h)	; + MASTER vol
(1) 1961/     984 : ED 44               		neg	a
(1) 1962/     986 : CF                  		rst	8
(1) 1963/     987 : 87                  		add	a,a
(1) 1964/     988 : 87                  		add	a,a
(1) 1965/     989 : 30 02               		jr	nc,.vmuch
(1) 1966/     98B : 3E FF               		ld	a,-1
(1) 1967/     98D :                     .vmuch:
(1) 1968/     98D : DD 77 30            		ld	(ix+PVOL),a
(1) 1969/     990 : DD E1               		pop	ix
(1) 1970/     992 : C9                  		ret
(1) 1971/     993 :                     
(1) 1972/     993 :                     ; --------------------------------
(1) 1973/     993 :                     
(1) 1974/     993 :                     ; -1
(1) 1975/     993 :                     .kyoff_psgn:
(1) 1976/     993 : CD AD 09            		call	.kypsgn_hatoff
(1) 1977/     996 :                     .kyoff_psg:
(1) 1978/     996 : 0E 02               		ld	c,010b
(1) 1979/     998 : DD 71 00            		ld	(ix),c
(1) 1980/     99B : DD E1               		pop	ix
(1) 1981/     99D : C3 B6 0F            		jp	.chnl_ulnkoff
(1) 1982/     9A0 :                     ; -2
(1) 1983/     9A0 :                     .kycut_psgn:
(1) 1984/     9A0 : CD AD 09            		call	.kypsgn_hatoff
(1) 1985/     9A3 :                     .kycut_psg:
(1) 1986/     9A3 : 0E 04               		ld	c,100b
(1) 1987/     9A5 : DD 71 00            		ld	(ix),c
(1) 1988/     9A8 : DD E1               		pop	ix
(1) 1989/     9AA : C3 B0 0F            		jp	.chnl_ulnkcut
(1) 1990/     9AD :                     .kypsgn_hatoff:
(1) 1991/     9AD : 3E 00               		ld	a,000b
(1) 1992/     9AF : 32 81 1C            		ld	(psgHatMode),a	; ** GLOBAL SETTING
(1) 1993/     9B2 : CF                  		rst	8
(1) 1994/     9B3 : C9                  		ret
(1) 1995/     9B4 :                     
(1) 1996/     9B4 :                     ; --------------------------------
(1) 1997/     9B4 :                     ; FM
(1) 1998/     9B4 :                     ; --------------------------------
(1) 1999/     9B4 :                     
(1) 2000/     9B4 :                     .mk_fm:
(1) 2001/     9B4 : CB 40               		bit	0,b		; NEW note?
(1) 2002/     9B6 : 28 5E               		jr	z,.mkfm_set
(1) 2003/     9B8 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 2004/     9BB : FE FE               		cp	-2
(1) 2005/     9BD : CA 8B 0A            		jp	z,.fm_cut
(1) 2006/     9C0 : FE FF               		cp	-1
(1) 2007/     9C2 : CA 85 0A            		jp	z,.fm_off
(1) 2008/     9C5 :                     ; 		call	.fm_tloff
(1) 2009/     9C5 : CF                  		rst	8
(1) 2010/     9C6 : FD 4E 04            		ld	c,(iy+04h)	; c - KeyID
(1) 2011/     9C9 : 79                  		ld	a,c
(1) 2012/     9CA : FE 06               		cp	6
(1) 2013/     9CC : 20 05               		jr	nz,.not_dac
(1) 2014/     9CE : CD 43 13            		call	dac_off
(1) 2015/     9D1 : 18 15               		jr	.not_dspc
(1) 2016/     9D3 :                     .not_dac:
(1) 2017/     9D3 :                     ; 		ld	a,c
(1) 2018/     9D3 : FE 02               		cp	2
(1) 2019/     9D5 : 20 11               		jr	nz,.not_dspc
(1) 2020/     9D7 : 3A 82 1C            		ld	a,(fmSpecial)
(1) 2021/     9DA : B7                  		or	a
(1) 2022/     9DB : 28 0B               		jr	z,.not_dspc
(1) 2023/     9DD : 11 00 27            		ld	de,2700h	; CH3 off
(1) 2024/     9E0 : CD 18 13            		call	fm_send_1
(1) 2025/     9E3 : 3E 00               		ld	a,0
(1) 2026/     9E5 : 32 82 1C            		ld	(fmSpecial),a
(1) 2027/     9E8 :                     .not_dspc:
(1) 2028/     9E8 : CD 94 0A            		call	.fm_keyoff
(1) 2029/     9EB : C5                  		push	bc
(1) 2030/     9EC : FD 7E 06            		ld	a,(iy+06h)
(1) 2031/     9EF : 47                  		ld	b,a
(1) 2032/     9F0 : E6 1F               		and	00011111b
(1) 2033/     9F2 : 5F                  		ld	e,a
(1) 2034/     9F3 : 16 00               		ld	d,0
(1) 2035/     9F5 : 21 5D 14            		ld	hl,fmFreq_List
(1) 2036/     9F8 : 19                  		add	hl,de
(1) 2037/     9F9 : 7E                  		ld	a,(hl)
(1) 2038/     9FA : CF                  		rst	8
(1) 2039/     9FB : 23                  		inc	hl
(1) 2040/     9FC : 66                  		ld	h,(hl)
(1) 2041/     9FD : 6F                  		ld	l,a
(1) 2042/     9FE : 78                  		ld	a,b
(1) 2043/     9FF : E6 E0               		and	11100000b
(1) 2044/     A01 : 0F                  		rrca
(1) 2045/     A02 : 0F                  		rrca
(1) 2046/     A03 : B4                  		or	h
(1) 2047/     A04 : 67                  		ld	h,a
(1) 2048/     A05 : FD 5E 07            		ld	e,(iy+07h)	; pitchbend
(1) 2049/     A08 : CF                  		rst	8
(1) 2050/     A09 : AF                  		xor	a		; Clear high
(1) 2051/     A0A : 3F                  		ccf			; Clear carry
(1) 2052/     A0B : CB 23               		sla	e		; << 2
(1) 2053/     A0D : CB 23               		sla	e
(1) 2054/     A0F : 9F                  		sbc	a,a		; -1 if carry is set
(1) 2055/     A10 : 57                  		ld	d,a
(1) 2056/     A11 : 19                  		add	hl,de
(1) 2057/     A12 : CD B3 0A            		call	.fm_setfreq
(1) 2058/     A15 : C1                  		pop	bc
(1) 2059/     A16 :                     
(1) 2060/     A16 :                     ; --------------------------------
(1) 2061/     A16 :                     
(1) 2062/     A16 :                     .mkfm_set:
(1) 2066/     A16 : CD 48 0B            		call	.fm_wrtalpan	; Panning and effects
(1) 2067/     A19 : CD CA 0A            		call	.fm_wrtlvol	; FM volume control
(1) 2068/     A1C : FD 7E 0F            		ld	a,(iy+0Fh)	; 0Fh - keys ***
(1) 2069/     A1F : E6 F0               		and	11110000b
(1) 2070/     A21 : B1                  		or	c		; Merge FM channel
(1) 2071/     A22 : 5F                  		ld	e,a
(1) 2072/     A23 : 16 28               		ld	d,28h
(1) 2073/     A25 : CD 18 13            		call	fm_send_1	; Set keys
(1) 2074/     A28 : CF                  		rst	8
(1) 2075/     A29 :                     .nofm_note:
(1) 2076/     A29 : C9                  		ret
(1) 2078/     A2A :                     
(1) 2079/     A2A :                     ; --------------------------------
(1) 2080/     A2A :                     ; FM3 special
(1) 2081/     A2A :                     ; --------------------------------
(1) 2082/     A2A :                     
(1) 2083/     A2A :                     .mk_fmspc:
(1) 2084/     A2A : CB 40               		bit	0,b		; NEW Note?
(1) 2085/     A2C : 28 E8               		jr	z,.mkfm_set
(1) 2086/     A2E : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 2087/     A31 : FE FE               		cp	-2
(1) 2088/     A33 : CA 8B 0A            		jp	z,.fm_cut
(1) 2089/     A36 : FE FF               		cp	-1
(1) 2090/     A38 : CA 85 0A            		jp	z,.fm_off
(1) 2091/     A3B : FD 4E 04            		ld	c,(iy+04h)	; c - KeyID (011b always)
(1) 2092/     A3E : CD 94 0A            		call	.fm_keyoff
(1) 2093/     A41 : 21 70 1C            		ld	hl,fmcach_list	; Read external freqs
(1) 2094/     A44 : FD 7E 04            		ld	a,(iy+04h)
(1) 2095/     A47 : E6 07               		and	0111b
(1) 2096/     A49 : 16 00               		ld	d,0
(1) 2097/     A4B : 87                  		add	a,a
(1) 2098/     A4C : 5F                  		ld	e,a
(1) 2099/     A4D : CF                  		rst	8
(1) 2100/     A4E : 19                  		add	hl,de
(1) 2101/     A4F : 7E                  		ld	a,(hl)
(1) 2102/     A50 : 23                  		inc	hl
(1) 2103/     A51 : 66                  		ld	h,(hl)
(1) 2104/     A52 : 6F                  		ld	l,a
(1) 2105/     A53 : CF                  		rst	8
(1) 2106/     A54 : 11 20 00            		ld	de,20h		; point to regs
(1) 2107/     A57 : 19                  		add	hl,de
(1) 2108/     A58 : DD E5               		push	ix
(1) 2109/     A5A : DD 21 7D 0A         		ld	ix,.spcreglist
(1) 2110/     A5E : 06 08               		ld	b,8
(1) 2111/     A60 :                     .wr_spc:
(1) 2112/     A60 : DD 56 00            		ld	d,(ix)
(1) 2113/     A63 : 5E                  		ld	e,(hl)
(1) 2114/     A64 : CD 18 13            		call	fm_send_1
(1) 2115/     A67 : CF                  		rst	8
(1) 2116/     A68 : 23                  		inc	hl
(1) 2117/     A69 : DD 23               		inc	ix
(1) 2118/     A6B : 10 F3               		djnz	.wr_spc
(1) 2119/     A6D : DD E1               		pop	ix
(1) 2120/     A6F : 11 40 27            		ld	de,2740h	; CH3 on
(1) 2121/     A72 : CD 18 13            		call	fm_send_1
(1) 2122/     A75 : 3E 01               		ld	a,1
(1) 2123/     A77 : 32 82 1C            		ld	(fmSpecial),a
(1) 2124/     A7A : C3 16 0A            		jp	.mkfm_set
(1) 2125/     A7D :                     .spcreglist:
(1) 2126/     A7D : AD A9               		db 0ADh,0A9h
(1) 2127/     A7F : AC A8               		db 0ACh,0A8h
(1) 2128/     A81 : AE AA               		db 0AEh,0AAh
(1) 2129/     A83 : A6 A2               		db 0A6h,0A2h
(1) 2130/     A85 :                     
(1) 2131/     A85 :                     ; ----------------------------------------
(1) 2132/     A85 :                     
(1) 2133/     A85 :                     .fm_off:
(1) 2134/     A85 : CD 94 0A            		call	.fm_keyoff
(1) 2135/     A88 : C3 B6 0F            		jp	.chnl_ulnkoff
(1) 2136/     A8B :                     .fm_cut:
(1) 2137/     A8B : CD 94 0A            		call	.fm_keyoff
(1) 2138/     A8E : CD 9C 0A            		call	.fm_tloff
(1) 2139/     A91 : C3 B0 0F            		jp	.chnl_ulnkcut
(1) 2140/     A94 :                     
(1) 2141/     A94 :                     ; ----------------------------------------
(1) 2142/     A94 :                     
(1) 2143/     A94 :                     .fm_keyoff:
(1) 2144/     A94 : 16 28               		ld	d,28h
(1) 2145/     A96 : FD 5E 04            		ld	e,(iy+04h)
(1) 2146/     A99 : C3 18 13            		jp	fm_send_1
(1) 2147/     A9C :                     .fm_tloff:
(1) 2148/     A9C : 06 04               		ld	b,4
(1) 2149/     A9E : FD 4E 04            		ld	c,(iy+04h)
(1) 2150/     AA1 : 79                  		ld	a,c
(1) 2151/     AA2 : E6 03               		and	011b
(1) 2152/     AA4 : F6 40               		or	40h	; TL regs
(1) 2153/     AA6 : 1E 7F               		ld	e,7Fh
(1) 2154/     AA8 :                     .tl_down:
(1) 2155/     AA8 : 57                  		ld	d,a
(1) 2156/     AA9 :                     ; 		ld	e,7Fh
(1) 2157/     AA9 : CD 14 13            		call	fm_autoreg
(1) 2158/     AAC : CF                  		rst	8
(1) 2159/     AAD : 7A                  		ld	a,d
(1) 2160/     AAE : C6 04               		add	a,4
(1) 2161/     AB0 : 10 F6               		djnz	.tl_down
(1) 2162/     AB2 : C9                  		ret
(1) 2163/     AB3 :                     ; c - KeyID
(1) 2164/     AB3 :                     .fm_setfreq:
(1) 2165/     AB3 : 79                  		ld	a,c
(1) 2166/     AB4 : E6 03               		and	011b
(1) 2167/     AB6 : F6 A4               		or	0A4h
(1) 2168/     AB8 : 57                  		ld	d,a
(1) 2169/     AB9 : 5C                  		ld	e,h
(1) 2170/     ABA : CF                  		rst	8
(1) 2171/     ABB : CD 14 13            		call	fm_autoreg
(1) 2172/     ABE : 79                  		ld	a,c
(1) 2173/     ABF : E6 03               		and	011b
(1) 2174/     AC1 : F6 A0               		or	0A0h
(1) 2175/     AC3 : 57                  		ld	d,a
(1) 2176/     AC4 : 5D                  		ld	e,l
(1) 2177/     AC5 : CD 14 13            		call	fm_autoreg
(1) 2178/     AC8 : CF                  		rst	8
(1) 2179/     AC9 : C9                  		ret
(1) 2180/     ACA :                     
(1) 2181/     ACA :                     ; --------------------------------
(1) 2182/     ACA :                     ; WRITE TL volume
(1) 2183/     ACA :                     
(1) 2184/     ACA :                     .fm_wrtlvol:
(1) 2185/     ACA : 21 70 1C            		ld	hl,fmcach_list
(1) 2186/     ACD : FD 7E 04            		ld	a,(iy+04h)
(1) 2187/     AD0 : E6 07               		and	0111b
(1) 2188/     AD2 : 16 00               		ld	d,0
(1) 2189/     AD4 : CF                  		rst	8
(1) 2190/     AD5 : 87                  		add	a,a
(1) 2191/     AD6 : 5F                  		ld	e,a
(1) 2192/     AD7 : 19                  		add	hl,de
(1) 2193/     AD8 : 7E                  		ld	a,(hl)
(1) 2194/     AD9 : 23                  		inc	hl
(1) 2195/     ADA : 66                  		ld	h,(hl)
(1) 2196/     ADB : 6F                  		ld	l,a
(1) 2197/     ADC : 23                  		inc	hl
(1) 2198/     ADD : 23                  		inc	hl
(1) 2199/     ADE : 23                  		inc	hl
(1) 2200/     ADF : CF                  		rst	8
(1) 2201/     AE0 : 23                  		inc	hl		; Point to TL's
(1) 2202/     AE1 : FD 7E 04            		ld	a,(iy+04h)
(1) 2203/     AE4 : E6 03               		and	011b
(1) 2204/     AE6 : F6 40               		or	40h		; TL registers
(1) 2205/     AE8 : 57                  		ld	d,a
(1) 2206/     AE9 :                     ; d - 40h+
(1) 2207/     AE9 :                     ; hl - TL data
(1) 2208/     AE9 :                     ; .fm_wrtlvol:
(1) 2209/     AE9 : C5                  		push	bc
(1) 2210/     AEA : E5                  		push	hl
(1) 2211/     AEB : 21 40 0B            		ld	hl,.fm_cindx	; hl - jump carry list
(1) 2212/     AEE : FD 7E 0C            		ld	a,(iy+0Ch)	; Read 0B0h copy
(1) 2213/     AF1 : E6 07               		and	0111b
(1) 2214/     AF3 : 06 00               		ld	b,0
(1) 2215/     AF5 : 4F                  		ld	c,a
(1) 2216/     AF6 : 09                  		add	hl,bc
(1) 2217/     AF7 : FD 7E 08            		ld	a,(iy+08h)	; Read current Volume
(1) 2218/     AFA : CF                  		rst	8
(1) 2219/     AFB : FD 96 03            		sub	a,(iy+03h)	; + MASTER vol
(1) 2220/     AFE : 4F                  		ld	c,a		; c - Current Volume
(1) 2221/     AFF : 46                  		ld	b,(hl)		; b - Current jump-carry byte
(1) 2222/     B00 : E1                  		pop	hl
(1) 2223/     B01 : CB 08               		rrc	b		; OP1
(1) 2224/     B03 : DC 2E 0B            		call	c,.write_tl
(1) 2225/     B06 : 23                  		inc	hl
(1) 2226/     B07 : 14                  		inc	d
(1) 2227/     B08 : 14                  		inc	d
(1) 2228/     B09 : CF                  		rst	8
(1) 2229/     B0A : 14                  		inc	d
(1) 2230/     B0B : 14                  		inc	d
(1) 2231/     B0C : CB 08               		rrc	b		; OP2
(1) 2232/     B0E : DC 2E 0B            		call	c,.write_tl
(1) 2233/     B11 : 23                  		inc	hl
(1) 2234/     B12 : 14                  		inc	d
(1) 2235/     B13 : 14                  		inc	d
(1) 2236/     B14 : 14                  		inc	d
(1) 2237/     B15 : 14                  		inc	d
(1) 2238/     B16 : CB 08               		rrc	b		; OP3
(1) 2239/     B18 : DC 2E 0B            		call	c,.write_tl
(1) 2240/     B1B : 23                  		inc	hl
(1) 2241/     B1C : CF                  		rst	8
(1) 2242/     B1D : 14                  		inc	d
(1) 2243/     B1E : 14                  		inc	d
(1) 2244/     B1F : 14                  		inc	d
(1) 2245/     B20 : 14                  		inc	d
(1) 2246/     B21 : CB 08               		rrc	b		; OP4
(1) 2247/     B23 : DC 2E 0B            		call	c,.write_tl
(1) 2248/     B26 : 23                  		inc	hl
(1) 2249/     B27 : 14                  		inc	d
(1) 2250/     B28 : 14                  		inc	d
(1) 2251/     B29 : 14                  		inc	d
(1) 2252/     B2A : 14                  		inc	d
(1) 2253/     B2B : CF                  		rst	8
(1) 2254/     B2C : C1                  		pop	bc
(1) 2255/     B2D : C9                  		ret
(1) 2256/     B2E :                     .write_tl:
(1) 2257/     B2E : 7E                  		ld	a,(hl)
(1) 2258/     B2F : 91                  		sub	a,c		; reg - volume
(1) 2259/     B30 : F2 35 0B            		jp	p,.keep_tlmx
(1) 2260/     B33 : 3E 7F               		ld	a,7Fh		; <-- maximum TL
(1) 2261/     B35 :                     .keep_tlmx:
(1) 2262/     B35 : C5                  		push	bc
(1) 2263/     B36 : 5F                  		ld	e,a
(1) 2264/     B37 : FD 4E 04            		ld	c,(iy+04h)
(1) 2265/     B3A : CD 14 13            		call	fm_autoreg
(1) 2266/     B3D : CF                  		rst	8
(1) 2267/     B3E : C1                  		pop	bc
(1) 2268/     B3F : C9                  		ret
(1) 2269/     B40 :                     ; Jump carry list
(1) 2270/     B40 :                     .fm_cindx:
(1) 2271/     B40 : 08                  		db 1000b
(1) 2272/     B41 : 08                  		db 1000b
(1) 2273/     B42 : 08                  		db 1000b
(1) 2274/     B43 : 08                  		db 1000b
(1) 2275/     B44 : 0C                  		db 1100b
(1) 2276/     B45 : 0E                  		db 1110b
(1) 2277/     B46 : 0E                  		db 1110b
(1) 2278/     B47 : 0F                  		db 1111b
(1) 2279/     B48 :                     ; c - KeyId
(1) 2280/     B48 :                     .fm_wrtalpan:
(1) 2281/     B48 : FD 7E 0C            		ld	a,(iy+0Ch)		; 0B0h algorithm
(1) 2282/     B4B : 5F                  		ld	e,a
(1) 2283/     B4C : 79                  		ld	a,c
(1) 2284/     B4D : E6 03               		and	011b
(1) 2285/     B4F : F6 B0               		or	0B0h
(1) 2286/     B51 : 57                  		ld	d,a
(1) 2287/     B52 : CD 14 13            		call	fm_autoreg		; Write algorithm
(1) 2288/     B55 : CF                  		rst	8
(1) 2289/     B56 : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Read panning bits
(1) 2290/     B59 : 2F                  		cpl				; REVERSE bits
(1) 2291/     B5A : E6 30               		and	00110000b
(1) 2292/     B5C : 07                  		rlca				; << 2
(1) 2293/     B5D : 07                  		rlca
(1) 2294/     B5E : 5F                  		ld	e,a			; save as e
(1) 2295/     B5F : FD 7E 0D            		ld	a,(iy+0Dh)		; 0B4h %00aa0ppp
(1) 2296/     B62 : E6 3F               		and	00111111b
(1) 2297/     B64 : B3                  		or	e			; Merge panning
(1) 2298/     B65 : 5F                  		ld	e,a
(1) 2299/     B66 : 79                  		ld	a,c
(1) 2300/     B67 : CF                  		rst	8
(1) 2301/     B68 : E6 03               		and	011b
(1) 2302/     B6A : F6 B4               		or	0B4h
(1) 2303/     B6C : 57                  		ld	d,a
(1) 2304/     B6D : CD 14 13            		call	fm_autoreg
(1) 2305/     B70 : FD 7E 0E            		ld	a,(iy+0Eh)		; Read LFO
(1) 2306/     B73 : CB 5F               		bit	3,a			; Intrument wants LFO?
(1) 2307/     B75 : 28 06               		jr	z,.no_lfo
(1) 2308/     B77 : 5F                  		ld	e,a
(1) 2309/     B78 : 16 22               		ld	d,22h
(1) 2310/     B7A : CD 18 13            		call	fm_send_1
(1) 2311/     B7D :                     .no_lfo:
(1) 2312/     B7D : C9                  		ret
(1) 2313/     B7E :                     
(1) 2314/     B7E :                     ; --------------------------------
(1) 2315/     B7E :                     ; DAC
(1) 2316/     B7E :                     ; --------------------------------
(1) 2317/     B7E :                     
(1) 2318/     B7E :                     .mk_dac:
(1) 2319/     B7E : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 2320/     B81 : FE FE               		cp	-2
(1) 2321/     B83 : CA A3 0B            		jp	z,.dac_cut
(1) 2322/     B86 : FE FF               		cp	-1
(1) 2323/     B88 : CA A9 0B            		jp	z,.dac_off
(1) 2324/     B8B : CD AC 0B            		call	.dac_pitch
(1) 2325/     B8E : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Read panning
(1) 2326/     B91 : 2F                  		cpl				; REVERSE bits
(1) 2327/     B92 : E6 30               		and	00110000b
(1) 2328/     B94 : 07                  		rlca
(1) 2329/     B95 : 07                  		rlca
(1) 2330/     B96 : CF                  		rst	8
(1) 2331/     B97 : 5F                  		ld	e,a
(1) 2332/     B98 : 16 B6               		ld	d,0B6h			; Channel 6 panning
(1) 2333/     B9A : CD 23 13            		call	fm_send_2
(1) 2334/     B9D :                     ; 		bit	0,b			; Note update?
(1) 2335/     B9D :                     ; 		ret	z
(1) 2336/     B9D : CD 43 13            		call	dac_off
(1) 2337/     BA0 : C3 58 13            		jp	dac_play
(1) 2338/     BA3 :                     .dac_cut:
(1) 2339/     BA3 : CD 43 13            		call	dac_off
(1) 2340/     BA6 : C3 B6 0F            		jp	.chnl_ulnkoff
(1) 2341/     BA9 :                     .dac_off:
(1) 2342/     BA9 : C3 B0 0F            		jp	.chnl_ulnkcut
(1) 2343/     BAC :                     .dac_pitch:
(1) 2344/     BAC : 16 00               		ld	d,0		; Freq index
(1) 2345/     BAE : FD 5E 06            		ld	e,(iy+06h)
(1) 2346/     BB1 : 21 8D 14            		ld	hl,wavFreq_List-(2*36)
(1) 2347/     BB4 : 19                  		add	hl,de
(1) 2348/     BB5 : 7E                  		ld	a,(hl)
(1) 2349/     BB6 : 23                  		inc	hl
(1) 2350/     BB7 : 66                  		ld	h,(hl)
(1) 2351/     BB8 : 6F                  		ld	l,a
(1) 2352/     BB9 : FD 5E 07            		ld	e,(iy+07h)	; pitchbend
(1) 2353/     BBC : CF                  		rst	8
(1) 2354/     BBD : AF                  		xor	a		; Clear high
(1) 2355/     BBE : 3F                  		ccf			; Clear carry
(1) 2356/     BBF : CB 23               		sla	e		; << 3
(1) 2357/     BC1 : CB 23               		sla	e
(1) 2358/     BC3 : CB 23               		sla	e
(1) 2359/     BC5 : 9F                  		sbc	a,a		; -1 if carry is set
(1) 2360/     BC6 : 57                  		ld	d,a
(1) 2361/     BC7 : 19                  		add	hl,de
(1) 2362/     BC8 : 22 95 1C            		ld	(wave_Pitch),hl
(1) 2363/     BCB : D9                  		exx			; *
(1) 2364/     BCC : ED 5B 95 1C         		ld	de,(wave_Pitch)	; *
(1) 2365/     BD0 : D9                  		exx			; *
(1) 2366/     BD1 : C9                  		ret
(1) 2367/     BD2 :                     
(1) 2368/     BD2 :                     ; --------------------------------
(1) 2369/     BD2 :                     ; PCM
(1) 2370/     BD2 :                     ; --------------------------------
(1) 2371/     BD2 :                     
(1) 2372/     BD2 :                     .mk_pcm:
(1) 2374/     BD2 :                     ; 		bit	0,b			; Note update?
(1) 2375/     BD2 :                     ; 		ret	z
(1) 2376/     BD2 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 2377/     BD5 : 16 00               		ld	d,0
(1) 2378/     BD7 : FD 5E 04            		ld	e,(iy+04h)		; e - Channel ID
(1) 2379/     BDA : DD 4E 00            		ld	c,(ix+chnl_Flags)	; c - Panning bits
(1) 2380/     BDD : DD 21 B7 15         		ld	ix,pcmcom
(1) 2381/     BE1 : DD 19               		add	ix,de
(1) 2382/     BE3 : FE FE               		cp	-2
(1) 2383/     BE5 : CA 56 0C            		jp	z,.pcm_cut
(1) 2384/     BE8 : FE FF               		cp	-1
(1) 2385/     BEA : CA 4F 0C            		jp	z,.pcm_off
(1) 2386/     BED : CF                  		rst	8
(1) 2387/     BEE : CB 40               		bit	0,b			; Note flag?
(1) 2388/     BF0 : 20 0D               		jr	nz,.pcm_note
(1) 2389/     BF2 : CB 58               		bit	3,b			; Effect flag?
(1) 2390/     BF4 : 20 05               		jr	nz,.pcm_effc
(1) 2391/     BF6 : CB 50               		bit	2,b			; Volume flag?
(1) 2392/     BF8 : 20 01               		jr	nz,.pcm_effc
(1) 2393/     BFA : C9                  		ret
(1) 2394/     BFB :                     
(1) 2395/     BFB :                     ; --------------------------------
(1) 2396/     BFB :                     
(1) 2397/     BFB :                     .pcm_effc:
(1) 2398/     BFB : 1E 09               		ld	e,00001001b
(1) 2399/     BFD : 18 0C               		jr	.mkpcm_wrton
(1) 2400/     BFF :                     .pcm_note:
(1) 2401/     BFF : 79                  		ld	a,c		; <-- Lazy panning reset
(1) 2402/     C00 : E6 30               		and	00110000b	; Read LR bits
(1) 2403/     C02 : B7                  		or	a
(1) 2404/     C03 : 20 04               		jr	nz,.mp_reset
(1) 2405/     C05 : FD 36 0A 00         		ld	(iy+0Ah),0	; If 0, reset panning on table
(1) 2406/     C09 :                     .mp_reset:
(1) 2407/     C09 : 1E 01               		ld	e,00000001b	; KeyON request
(1) 2408/     C0B :                     .mkpcm_wrton:
(1) 2409/     C0B : DD 73 00            		ld	(ix),e		; Write key-on bit
(1) 2410/     C0E :                     .mkpcm_proc:
(1) 2411/     C0E : CD 64 0C            		call	.readfreq_pcm
(1) 2412/     C11 : 11 08 00            		ld	de,8		; Go to Pitch
(1) 2413/     C14 : DD 19               		add	ix,de
(1) 2414/     C16 : DD 74 00            		ld	(ix),h		; Set pitch
(1) 2415/     C19 : DD 19               		add	ix,de
(1) 2416/     C1B : DD 75 00            		ld	(ix),l
(1) 2417/     C1E : DD 19               		add	ix,de
(1) 2418/     C20 : 0E FF               		ld	c,-1
(1) 2419/     C22 : FD 7E 03            		ld	a,(iy+03h)
(1) 2420/     C25 : FE 40               		cp	40h
(1) 2421/     C27 : 28 10               		jr	z,.vpcm_siln
(1) 2422/     C29 : 30 0E               		jr	nc,.vpcm_siln
(1) 2423/     C2B : B7                  		or	a
(1) 2424/     C2C : FA 39 0C            		jp	m,.vpcm_siln
(1) 2425/     C2F : 87                  		add	a,a
(1) 2426/     C30 : 47                  		ld	b,a
(1) 2427/     C31 : FD 7E 08            		ld	a,(iy+08h)	; Read current Volume
(1) 2428/     C34 : 3F                  		ccf
(1) 2429/     C35 : 98                  		sbc	a,b		; + MASTER vol
(1) 2430/     C36 : 87                  		add	a,a		; *2
(1) 2431/     C37 : 38 03               		jr	c,.vpcm_carry
(1) 2432/     C39 :                     .vpcm_siln:
(1) 2433/     C39 : AF                  		xor	a
(1) 2434/     C3A : 18 01               		jr	.vpcm_zero
(1) 2435/     C3C :                     .vpcm_carry:
(1) 2436/     C3C : 81                  		add	a,c
(1) 2437/     C3D :                     .vpcm_zero:
(1) 2438/     C3D :                     ; 		ld	(1),a
(1) 2439/     C3D : DD 77 00            		ld	(ix),a
(1) 2440/     C40 : DD 19               		add	ix,de
(1) 2441/     C42 : FD 7E 0A            		ld	a,(iy+0Ah)
(1) 2442/     C45 : 2F                  		cpl
(1) 2443/     C46 : DD 77 00            		ld	(ix),a
(1) 2445/     C49 : 3E 01               		ld	a,1
(1) 2446/     C4B : 32 8B 1C            		ld	(mcdUpd),a
(1) 2448/     C4E : C9                  		ret
(1) 2449/     C4F :                     
(1) 2450/     C4F :                     ; --------------------------------
(1) 2451/     C4F :                     ; -1
(1) 2452/     C4F :                     .pcm_off:
(1) 2453/     C4F : CF                  		rst	8
(1) 2454/     C50 : DD 36 00 02         		ld	(ix),010b
(1) 2455/     C54 : 18 05               		jr	.pcm_setcoff
(1) 2456/     C56 :                     ; -2
(1) 2457/     C56 :                     .pcm_cut:
(1) 2458/     C56 : CF                  		rst	8
(1) 2459/     C57 : DD 36 00 04         		ld	(ix),100b
(1) 2460/     C5B :                     .pcm_setcoff:
(1) 2461/     C5B : 3E 01               		ld	a,1
(1) 2462/     C5D : 32 8B 1C            		ld	(mcdUpd),a
(1) 2463/     C60 : C3 B6 0F            		jp	.chnl_ulnkoff
(1) 2467/     C63 :                     
(1) 2468/     C63 :                     ; --------------------------------
(1) 2469/     C63 :                     ; PWM
(1) 2470/     C63 :                     ; --------------------------------
(1) 2471/     C63 :                     
(1) 2472/     C63 :                     .mk_pwm:
(1) 2473/     C63 :                     ; 		bit	0,b			; Note update?
(1) 2474/     C63 :                     ; 		ret	z
(1) 2551/     C63 : C9                  		ret
(1) 2553/     C64 :                     
(1) 2554/     C64 :                     ; --------------------------------
(1) 2555/     C64 :                     ; SHARED routine
(1) 2556/     C64 :                     
(1) 2557/     C64 :                     .readfreq_pcm:
(1) 2558/     C64 : 21 ED 14            		ld	hl,wavFreq_CdPcm-(36*2)
(1) 2559/     C67 : 18 03               		jr	.set_wavfreq
(1) 2560/     C69 :                     .readfreq_pwm:
(1) 2561/     C69 : 21 8D 14            		ld	hl,wavFreq_List-(36*2)
(1) 2562/     C6C :                     .set_wavfreq:
(1) 2563/     C6C : 16 00               		ld	d,0		; Freq index
(1) 2564/     C6E : FD 5E 06            		ld	e,(iy+06h)
(1) 2565/     C71 : 19                  		add	hl,de
(1) 2566/     C72 : 7E                  		ld	a,(hl)
(1) 2567/     C73 : 23                  		inc	hl
(1) 2568/     C74 : 66                  		ld	h,(hl)
(1) 2569/     C75 : 6F                  		ld	l,a
(1) 2570/     C76 : FD 5E 07            		ld	e,(iy+07h)	; pitchbend
(1) 2571/     C79 : CF                  		rst	8
(1) 2572/     C7A : AF                  		xor	a		; Clear high
(1) 2573/     C7B : 3F                  		ccf			; Clear carry
(1) 2574/     C7C : CB 23               		sla	e		; << 2
(1) 2575/     C7E : CB 23               		sla	e
(1) 2576/     C80 : 9F                  		sbc	a,a		; -1 if carry is set
(1) 2577/     C81 : 57                  		ld	d,a
(1) 2578/     C82 : 19                  		add	hl,de
(1) 2579/     C83 : C9                  		ret
(1) 2580/     C84 :                     
(1) 2581/     C84 :                     ; ----------------------------------------
(1) 2582/     C84 :                     ; NEW effect
(1) 2583/     C84 :                     ; ----------------------------------------
(1) 2584/     C84 :                     
(1) 2585/     C84 :                     .effc:
(1) 2586/     C84 : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - effect data
(1) 2587/     C87 : DD 7E 05            		ld	a,(ix+chnl_EffId)	; d - effect id
(1) 2588/     C8A : 57                  		ld	d,a
(1) 2589/     C8B : CF                  		rst	8
(1) 2590/     C8C : FE 04               		cp	4			; Effect D?
(1) 2591/     C8E : 28 0F               		jr	z,.effc_D
(1) 2592/     C90 : FE 05               		cp	5			; Effect E?
(1) 2593/     C92 : 28 4E               		jr	z,.effc_E
(1) 2594/     C94 : FE 06               		cp	6			; Effect F?
(1) 2595/     C96 : 28 5F               		jr	z,.effc_F
(1) 2596/     C98 : CF                  		rst	8
(1) 2597/     C99 : FE 18               		cp	24			; Effect X?
(1) 2598/     C9B : CA 18 0D            		jp	z,.effc_X
(1) 2599/     C9E : C9                  		ret
(1) 2600/     C9F :                     
(1) 2601/     C9F :                     ; ----------------------------------------
(1) 2602/     C9F :                     ; Effect D
(1) 2603/     C9F :                     ;
(1) 2604/     C9F :                     ; Volume slide down
(1) 2605/     C9F :                     ;
(1) 2606/     C9F :                     ; 0xh-Exh - Normal
(1) 2607/     C9F :                     ; Fxh-Fxh - Fine slide / 2
(1) 2608/     C9F :                     ; ----------------------------------------
(1) 2609/     C9F :                     
(1) 2610/     C9F :                     .effc_D:
(1) 2611/     C9F : CD 0C 0D            		call	.save_arg
(1) 2612/     CA2 : 79                  		ld	a,c		; Setting == 0?
(1) 2613/     CA3 : B7                  		or	a
(1) 2614/     CA4 : C8                  		ret	z
(1) 2615/     CA5 : E6 F0               		and	0F0h
(1) 2616/     CA7 : 28 0F               		jr	z,.norm_down	; 0xh
(1) 2617/     CA9 : FE F0               		cp	0F0h
(1) 2618/     CAB : 28 0D               		jr	z,.fine_down	; Fxh
(1) 2619/     CAD : CF                  		rst	8
(1) 2620/     CAE : 79                  		ld	a,c
(1) 2621/     CAF : E6 0F               		and	00Fh
(1) 2622/     CB1 : 28 1D               		jr	z,.norm_up	; x0h
(1) 2623/     CB3 : FE 0F               		cp	00Fh
(1) 2624/     CB5 : 28 17               		jr	z,.fine_up	; xFh
(1) 2625/     CB7 : C9                  		ret
(1) 2626/     CB8 :                     ; Go down
(1) 2627/     CB8 :                     .norm_down:
(1) 2628/     CB8 : CB 21               		sla	c
(1) 2629/     CBA :                     .fine_down:
(1) 2630/     CBA : CB 21               		sla	c
(1) 2631/     CBC : 79                  		ld	a,c
(1) 2632/     CBD : E6 3C               		and	00111100b
(1) 2633/     CBF : 4F                  		ld	c,a
(1) 2634/     CC0 : FD 7E 08            		ld	a,(iy+08h)	; Current volume
(1) 2635/     CC3 : CF                  		rst	8
(1) 2636/     CC4 : 91                  		sub	a,c
(1) 2637/     CC5 : 1E C0               		ld	e,0C0h
(1) 2638/     CC7 : BB                  		cp	e
(1) 2639/     CC8 : D2 DE 0C            		jp	nc,.vol_dvld
(1) 2640/     CCB : 7B                  		ld	a,e
(1) 2641/     CCC : 18 10               		jr 	.vol_dvld
(1) 2642/     CCE :                     ; Go up
(1) 2643/     CCE :                     .fine_up:
(1) 2644/     CCE : CB 39               		srl	c
(1) 2645/     CD0 :                     .norm_up:
(1) 2646/     CD0 : CB 39               		srl	c
(1) 2647/     CD2 : 79                  		ld	a,c
(1) 2648/     CD3 : E6 3C               		and	00111100b
(1) 2649/     CD5 : 4F                  		ld	c,a
(1) 2650/     CD6 : FD 7E 08            		ld	a,(iy+08h)	; Current volume
(1) 2651/     CD9 : CF                  		rst	8
(1) 2652/     CDA : 81                  		add	a,c
(1) 2653/     CDB : 38 01               		jr	c,.vol_dvld
(1) 2654/     CDD : AF                  		xor	a
(1) 2655/     CDE :                     .vol_dvld:
(1) 2656/     CDE : FD 77 08            		ld	(iy+08h),a
(1) 2657/     CE1 : C9                  		ret
(1) 2658/     CE2 :                     
(1) 2659/     CE2 :                     ; ----------------------------------------
(1) 2660/     CE2 :                     ; Effect E
(1) 2661/     CE2 :                     ; ----------------------------------------
(1) 2662/     CE2 :                     
(1) 2663/     CE2 :                     .effc_E:
(1) 2664/     CE2 : CD 0C 0D            		call	.save_arg
(1) 2665/     CE5 : 79                  		ld	a,c
(1) 2666/     CE6 : E6 F0               		and	0F0h
(1) 2667/     CE8 : FE F0               		cp	0F0h
(1) 2668/     CEA : C8                  		ret	z
(1) 2669/     CEB : FE E0               		cp	0E0h
(1) 2670/     CED : C8                  		ret	z
(1) 2671/     CEE : CF                  		rst	8
(1) 2672/     CEF : FD 7E 07            		ld	a,(iy+07h)
(1) 2673/     CF2 : 91                  		sub	a,c
(1) 2674/     CF3 : FD 77 07            		ld	(iy+07h),a
(1) 2675/     CF6 : C9                  		ret
(1) 2676/     CF7 :                     
(1) 2677/     CF7 :                     ; ----------------------------------------
(1) 2678/     CF7 :                     ; Effect F
(1) 2679/     CF7 :                     ; ----------------------------------------
(1) 2680/     CF7 :                     
(1) 2681/     CF7 :                     .effc_F:
(1) 2682/     CF7 : CD 0C 0D            		call	.save_arg
(1) 2683/     CFA : 79                  		ld	a,c
(1) 2684/     CFB : E6 F0               		and	0F0h
(1) 2685/     CFD : FE F0               		cp	0F0h
(1) 2686/     CFF : C8                  		ret	z
(1) 2687/     D00 : FE E0               		cp	0E0h
(1) 2688/     D02 : C8                  		ret	z
(1) 2689/     D03 : CF                  		rst	8
(1) 2690/     D04 : FD 7E 07            		ld	a,(iy+07h)
(1) 2691/     D07 : 81                  		add	a,c
(1) 2692/     D08 : FD 77 07            		ld	(iy+07h),a
(1) 2693/     D0B : C9                  		ret
(1) 2694/     D0C :                     
(1) 2695/     D0C :                     ; --------------------------------
(1) 2696/     D0C :                     ; e - got arg
(1) 2697/     D0C :                     ; c - new arg
(1) 2698/     D0C :                     .save_arg:
(1) 2699/     D0C : FD 4E 09            		ld	c,(iy+09h)	; Current slide setting
(1) 2700/     D0F : 7B                  		ld	a,e		; EffArg is non-zero?
(1) 2701/     D10 : B7                  		or	a
(1) 2702/     D11 : 28 04               		jr	z,.D_cont	; 00h = slide continue
(1) 2703/     D13 : 4F                  		ld	c,a
(1) 2704/     D14 : FD 71 09            		ld	(iy+09h),c	; Store NEW slide setting
(1) 2705/     D17 :                     .D_cont:
(1) 2706/     D17 : C9                  		ret
(1) 2707/     D18 :                     
(1) 2708/     D18 :                     ; ----------------------------------------
(1) 2709/     D18 :                     ; Effect X
(1) 2710/     D18 :                     ;
(1) 2711/     D18 :                     ; Common panning values:
(1) 2712/     D18 :                     ;  00h LEFT
(1) 2713/     D18 :                     ;  80h MIDDLE
(1) 2714/     D18 :                     ; 0FFh RIGHT
(1) 2715/     D18 :                     ; ----------------------------------------
(1) 2716/     D18 :                     
(1) 2717/     D18 :                     .effc_X:
(1) 2718/     D18 : 16 00               		ld	d,0
(1) 2719/     D1A : 7E                  		ld	a,(hl)
(1) 2720/     D1B : E6 F0               		and	11110000b
(1) 2721/     D1D : FE 80               		cp	80h		; PSG?
(1) 2722/     D1F : 28 1D               		jr	z,.res_pan
(1) 2723/     D21 : FE 90               		cp	90h		; PSGN?
(1) 2724/     D23 : 28 19               		jr	z,.res_pan
(1) 2725/     D25 : FE D0               		cp	0D0h		; MCD: write separate PAN values
(1) 2726/     D27 : CC 48 0D            		call	z,.pan_mcd	; <-- CALL, not JP
(1) 2727/     D2A :                     
(1) 2728/     D2A :                     	; ----------------------------------------
(1) 2729/     D2A :                     	; Common panning bits: %00LR0000
(1) 2730/     D2A :                     	; (REVERSE: 0-on 1-off)
(1) 2731/     D2A : FD 36 09 00         		ld	(iy+09h),0
(1) 2732/     D2E : CF                  		rst	8
(1) 2733/     D2F : E5                  		push	hl
(1) 2734/     D30 : 21 5E 0D            		ld	hl,.comn_panlist
(1) 2735/     D33 : 7B                  		ld	a,e
(1) 2736/     D34 : 07                  		rlca
(1) 2737/     D35 : 07                  		rlca
(1) 2738/     D36 : 07                  		rlca
(1) 2739/     D37 : E6 07               		and	0111b
(1) 2740/     D39 :                     ; 		ld	d,0
(1) 2741/     D39 : 5F                  		ld	e,a
(1) 2742/     D3A : CF                  		rst	8
(1) 2743/     D3B : 19                  		add	hl,de
(1) 2744/     D3C : 56                  		ld	d,(hl)
(1) 2745/     D3D : E1                  		pop	hl
(1) 2746/     D3E :                     .res_pan:
(1) 2747/     D3E : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Save panning
(1) 2748/     D41 : E6 CF               		and	11001111b
(1) 2749/     D43 : B2                  		or	d
(1) 2750/     D44 : DD 77 00            		ld	(ix+chnl_Flags),a
(1) 2751/     D47 : C9                  		ret
(1) 2752/     D48 :                     
(1) 2753/     D48 :                     	; ----------------------------------------
(1) 2754/     D48 :                     	; MCD panning
(1) 2755/     D48 :                     .pan_mcd:
(1) 2756/     D48 : E5                  		push	hl
(1) 2757/     D49 : D5                  		push	de
(1) 2758/     D4A : 16 00               		ld	d,0
(1) 2759/     D4C : 21 66 0D            		ld	hl,.pcm_panlist
(1) 2760/     D4F : 7B                  		ld	a,e
(1) 2761/     D50 : E6 F8               		and	0F8h
(1) 2762/     D52 : 0F                  		rrca
(1) 2763/     D53 : 0F                  		rrca
(1) 2764/     D54 : 0F                  		rrca
(1) 2765/     D55 : 5F                  		ld	e,a
(1) 2766/     D56 : 19                  		add	hl,de
(1) 2767/     D57 : 7E                  		ld	a,(hl)
(1) 2768/     D58 : FD 77 0A            		ld	(iy+0Ah),a
(1) 2769/     D5B : D1                  		pop	de
(1) 2770/     D5C : E1                  		pop	hl
(1) 2771/     D5D : C9                  		ret
(1) 2772/     D5E :                     
(1) 2773/     D5E :                     ; 0 - ENABLE, 1 - DISABLE
(1) 2774/     D5E :                     ; 00LR0000b
(1) 2775/     D5E :                     .comn_panlist:
(1) 2776/     D5E : 10                  		db 00010000b
(1) 2777/     D5F : 10                  		db 00010000b
(1) 2778/     D60 : 10                  		db 00010000b
(1) 2779/     D61 : 00                  		db 00000000b
(1) 2780/     D62 : 00                  		db 00000000b
(1) 2781/     D63 : 20                  		db 00100000b
(1) 2782/     D64 : 20                  		db 00100000b
(1) 2783/     D65 : 20                  		db 00100000b
(1) 2784/     D66 :                     
(1) 2785/     D66 :                     ; REVERSE OUTPUT BITS
(1) 2786/     D66 :                     ; RRRR | LLLL
(1) 2787/     D66 :                     .pcm_panlist:
(1) 2788/     D66 : F0                  		db 0F0h	; 00h
(1) 2789/     D67 : E0                  		db 0E0h
(1) 2790/     D68 : D0                  		db 0D0h	; 10h
(1) 2791/     D69 : C0                  		db 0C0h
(1) 2792/     D6A : B0                  		db 0B0h	; 20h
(1) 2793/     D6B : A0                  		db 0A0h
(1) 2794/     D6C : 90                  		db 090h	; 30h
(1) 2795/     D6D : 80                  		db 080h
(1) 2796/     D6E : 70                  		db 070h	; 40h
(1) 2797/     D6F : 60                  		db 060h
(1) 2798/     D70 : 50                  		db 050h	; 50h
(1) 2799/     D71 : 40                  		db 040h
(1) 2800/     D72 : 30                  		db 030h	; 60h
(1) 2801/     D73 : 20                  		db 020h
(1) 2802/     D74 : 10                  		db 010h	; 70h
(1) 2803/     D75 : 00                  		db 000h
(1) 2804/     D76 : 00                  		db 000h ; 80h
(1) 2805/     D77 : 01                  		db 001h
(1) 2806/     D78 : 02                  		db 002h ; 90h
(1) 2807/     D79 : 03                  		db 003h
(1) 2808/     D7A : 04                  		db 004h ; A0h
(1) 2809/     D7B : 05                  		db 005h
(1) 2810/     D7C : 06                  		db 006h ; B0h
(1) 2811/     D7D : 07                  		db 007h
(1) 2812/     D7E : 08                  		db 008h ; C0h
(1) 2813/     D7F : 09                  		db 009h
(1) 2814/     D80 : 0A                  		db 00Ah ; D0h
(1) 2815/     D81 : 0B                  		db 00Bh
(1) 2816/     D82 : 0C                  		db 00Ch ; E0h
(1) 2817/     D83 : 0D                  		db 00Dh
(1) 2818/     D84 : 0E                  		db 00Eh ; F0h
(1) 2819/     D85 : 0F                  		db 00Fh
(1) 2820/     D86 :                     
(1) 2821/     D86 :                     ; ----------------------------------------
(1) 2822/     D86 :                     ; NEW volume
(1) 2823/     D86 :                     ; ----------------------------------------
(1) 2824/     D86 :                     
(1) 2825/     D86 :                     .volu:
(1) 2826/     D86 : DD 7E 04            		ld	a,(ix+chnl_Vol)
(1) 2827/     D89 : D6 40               		sub	a,64
(1) 2828/     D8B : FD 77 08            		ld	(iy+08h),a	; BASE volume
(1) 2829/     D8E : C9                  		ret
(1) 2830/     D8F :                     
(1) 2831/     D8F :                     ; ----------------------------------------
(1) 2832/     D8F :                     ; NEW instrument
(1) 2833/     D8F :                     ; ----------------------------------------
(1) 2834/     D8F :                     
(1) 2835/     D8F :                     .inst:
(1) 2836/     D8F : 7E                  		ld	a,(hl)
(1) 2837/     D90 : E6 F0               		and	11110000b
(1) 2838/     D92 : FE 80               		cp	080h
(1) 2839/     D94 : 28 24               		jr	z,.ins_psg
(1) 2840/     D96 : FE 90               		cp	090h
(1) 2841/     D98 : 28 1A               		jr	z,.ins_psgn
(1) 2842/     D9A : FE A0               		cp	0A0h
(1) 2843/     D9C : 28 52               		jr	z,.ins_fm
(1) 2844/     D9E : CF                  		rst	8
(1) 2845/     D9F : FE B0               		cp	0B0h
(1) 2846/     DA1 : 28 4D               		jr	z,.ins_fm
(1) 2847/     DA3 : FE C0               		cp	0C0h
(1) 2848/     DA5 : CA 71 0E            		jp	z,.ins_dac
(1) 2849/     DA8 : FE D0               		cp	0D0h
(1) 2850/     DAA : CA C5 0E            		jp	z,.ins_pcm
(1) 2851/     DAD : FE E0               		cp	0E0h
(1) 2852/     DAF : CA FD 0E            		jp	z,.ins_pwm
(1) 2853/     DB2 : CF                  		rst	8
(1) 2854/     DB3 :                     .invl_ins:
(1) 2855/     DB3 : C9                  		ret
(1) 2856/     DB4 :                     
(1) 2857/     DB4 :                     ; ----------------------------------------
(1) 2858/     DB4 :                     ; PSG
(1) 2859/     DB4 :                     
(1) 2860/     DB4 :                     .ins_psgn:
(1) 2861/     DB4 : 7E                  		ld	a,(hl)		; Grab noise setting
(1) 2862/     DB5 : E6 07               		and	0111b
(1) 2863/     DB7 : 32 81 1C            		ld	(psgHatMode),a	; ** SET GLOBAL SETTING
(1) 2864/     DBA :                     .ins_psg:
(1) 2865/     DBA : CF                  		rst	8
(1) 2866/     DBB : DD E5               		push	ix
(1) 2867/     DBD : E5                  		push	hl
(1) 2868/     DBE : 23                  		inc	hl		; Skip ID
(1) 2869/     DBF : DD 21 2F 16         		ld	ix,psgcom	; Read psg control
(1) 2870/     DC3 : FD 5E 04            		ld	e,(iy+04h)
(1) 2871/     DC6 : 16 00               		ld	d,0
(1) 2872/     DC8 : DD 19               		add	ix,de
(1) 2873/     DCA : 7E                  		ld	a,(hl)
(1) 2874/     DCB : CF                  		rst	8
(1) 2875/     DCC : 23                  		inc	hl
(1) 2876/     DCD : 7E                  		ld	a,(hl)
(1) 2877/     DCE : DD 77 24            		ld	(ix+ALV),a	; ALV
(1) 2878/     DD1 : 23                  		inc	hl
(1) 2879/     DD2 : 7E                  		ld	a,(hl)
(1) 2880/     DD3 : DD 77 08            		ld	(ix+ATK),a	; ATK
(1) 2881/     DD6 : 23                  		inc	hl
(1) 2882/     DD7 : 7E                  		ld	a,(hl)
(1) 2883/     DD8 : CF                  		rst	8
(1) 2884/     DD9 : DD 77 10            		ld	(ix+SLV),a	; SLV
(1) 2885/     DDC : 23                  		inc	hl
(1) 2886/     DDD : 7E                  		ld	a,(hl)
(1) 2887/     DDE : DD 77 0C            		ld	(ix+DKY),a	; DKY
(1) 2888/     DE1 : 23                  		inc	hl
(1) 2889/     DE2 : 7E                  		ld	a,(hl)
(1) 2890/     DE3 : DD 77 14            		ld	(ix+RRT),a	; RRT
(1) 2891/     DE6 : 23                  		inc	hl
(1) 2892/     DE7 : 7E                  		ld	a,(hl)
(1) 2893/     DE8 : CF                  		rst	8
(1) 2894/     DE9 : DD 77 34            		ld	(ix+PARP),a	; ARP
(1) 2895/     DEC : E1                  		pop	hl
(1) 2896/     DED : DD E1               		pop	ix
(1) 2897/     DEF : C9                  		ret
(1) 2898/     DF0 :                     
(1) 2899/     DF0 :                     ; ----------------------------------------
(1) 2900/     DF0 :                     ; FM/FM3
(1) 2901/     DF0 :                     
(1) 2902/     DF0 :                     .ins_fm:
(1) 2903/     DF0 : DD E5               		push	ix
(1) 2904/     DF2 : E5                  		push	hl
(1) 2905/     DF3 : C5                  		push	bc
(1) 2906/     DF4 :                     ; 		ld	b,(ix+chnl_Ins)	; b - current Ins
(1) 2907/     DF4 : FD 46 02            		ld	b,(iy+02h)
(1) 2908/     DF7 : FD 7E 04            		ld	a,(iy+04h)
(1) 2909/     DFA : E6 07               		and	0111b
(1) 2910/     DFC : 16 00               		ld	d,0
(1) 2911/     DFE : 87                  		add	a,a
(1) 2912/     DFF : 5F                  		ld	e,a
(1) 2913/     E00 : DD 21 70 1C         		ld	ix,fmcach_list
(1) 2914/     E04 : DD 19               		add	ix,de
(1) 2915/     E06 : CF                  		rst	8
(1) 2916/     E07 : DD 5E 00            		ld	e,(ix)
(1) 2917/     E0A : DD 23               		inc	ix
(1) 2918/     E0C : DD 56 00            		ld	d,(ix)
(1) 2919/     E0F :                     
(1) 2920/     E0F :                     ; 		ld	a,(iy+0Bh)	; 0Bh: DON'T reload flag
(1) 2921/     E0F :                     ; 		cp	b
(1) 2922/     E0F :                     ; 		jr	z,.same_patch
(1) 2923/     E0F :                     ; 		ld	(iy+0Bh),b
(1) 2924/     E0F : 23                  		inc	hl		; Skip id and pitch
(1) 2925/     E10 : 23                  		inc	hl
(1) 2926/     E11 :                     
(1) 2927/     E11 : 46                  		ld	b,(hl)
(1) 2928/     E12 : 23                  		inc	hl
(1) 2929/     E13 : 4E                  		ld	c,(hl)
(1) 2930/     E14 : 23                  		inc	hl
(1) 2931/     E15 : 6E                  		ld	l,(hl)
(1) 2932/     E16 : 61                  		ld	h,c
(1) 2933/     E17 :                     
(1) 2934/     E17 : FD 7E 0A            		ld	a,(iy+0Ah)
(1) 2935/     E1A : BC                  		cp	h
(1) 2936/     E1B : 20 07               		jr	nz,.new_romdat
(1) 2937/     E1D : CF                  		rst	8
(1) 2938/     E1E : FD 7E 0B            		ld	a,(iy+0Bh)
(1) 2939/     E21 : BD                  		cp	l
(1) 2940/     E22 : 28 38               		jr	z,.same_patch
(1) 2941/     E24 :                     .new_romdat:
(1) 2942/     E24 : FD 74 0A            		ld	(iy+0Ah),h
(1) 2943/     E27 : FD 75 0B            		ld	(iy+0Bh),l
(1) 2944/     E2A : 78                  		ld	a,b
(1) 2945/     E2B : 01 28 00            		ld	bc,28h		; <- size
(1) 2946/     E2E : D5                  		push	de
(1) 2947/     E2F : CD F9 10            		call	transferRom	; *** ROM ACCESS ***
(1) 2948/     E32 :                     
(1) 2949/     E32 : E1                  		pop	hl
(1) 2950/     E33 : FD 7E 04            		ld	a,(iy+04h)
(1) 2951/     E36 : 4F                  		ld	c,a		; c - FM Key ID
(1) 2952/     E37 :                     
(1) 2953/     E37 :                     	; hl - fmcach intrument
(1) 2954/     E37 :                     	; de - FM reg and data: 3000h
(1) 2955/     E37 :                     	;  c - FM keyChannel
(1) 2956/     E37 : 79                  		ld	a,c
(1) 2957/     E38 : E6 03               		and	011b
(1) 2958/     E3A : F6 30               		or	30h		; Start at reg 30h
(1) 2959/     E3C : 57                  		ld	d,a
(1) 2960/     E3D : 1E 00               		ld	e,0
(1) 2961/     E3F : CF                  		rst	8
(1) 2962/     E40 : 06 1C               		ld	b,7*4		; Write ALL base FM registers
(1) 2963/     E42 : CD 61 0E            		call	.fm_setrlist
(1) 2964/     E45 :                     ; 		ld	b,4
(1) 2965/     E45 :                     ; 		call	.fm_setrlist
(1) 2966/     E45 :                     ; 		ld	b,5*4
(1) 2967/     E45 :                     ; 		call	.fm_setrlist
(1) 2968/     E45 : 7E                  		ld	a,(hl)		; 0B0h
(1) 2969/     E46 : FD 77 0C            		ld	(iy+0Ch),a	; ** Save 0B0h to 0Ch
(1) 2970/     E49 : 23                  		inc	hl
(1) 2971/     E4A : 7E                  		ld	a,(hl)		; 0B4h
(1) 2972/     E4B : FD 77 0D            		ld	(iy+0Dh),a	; ** Save 0B4h to 0Dh
(1) 2973/     E4E : 23                  		inc	hl
(1) 2974/     E4F : CF                  		rst	8
(1) 2975/     E50 : 7E                  		ld	a,(hl)
(1) 2976/     E51 : FD 77 0E            		ld	(iy+0Eh),a	; LFO
(1) 2977/     E54 : 23                  		inc	hl
(1) 2978/     E55 : 7E                  		ld	a,(hl)		; 028h keys
(1) 2979/     E56 : E6 F0               		and	11110000b
(1) 2980/     E58 : CF                  		rst	8
(1) 2981/     E59 : FD 77 0F            		ld	(iy+0Fh),a	; ** Save keys to 0Eh
(1) 2982/     E5C :                     .same_patch:
(1) 2983/     E5C : C1                  		pop	bc
(1) 2984/     E5D : E1                  		pop	hl
(1) 2985/     E5E : DD E1               		pop	ix
(1) 2986/     E60 : C9                  		ret
(1) 2987/     E61 :                     ; b - numof_regs
(1) 2988/     E61 :                     .fm_setrlist:
(1) 2989/     E61 : 5E                  		ld	e,(hl)
(1) 2990/     E62 : 23                  		inc	hl
(1) 2991/     E63 : CD 14 13            		call	fm_autoreg
(1) 2992/     E66 : 00                  		nop
(1) 2993/     E67 : 00                  		nop
(1) 2994/     E68 : CF                  		rst	8
(1) 2995/     E69 : 00                  		nop
(1) 2996/     E6A : 14                  		inc	d		; +4
(1) 2997/     E6B : 14                  		inc	d
(1) 2998/     E6C : 14                  		inc	d
(1) 2999/     E6D : 14                  		inc	d
(1) 3000/     E6E : 10 F1               		djnz	.fm_setrlist
(1) 3001/     E70 : C9                  		ret
(1) 3002/     E71 :                     
(1) 3003/     E71 :                     ; ----------------------------------------
(1) 3004/     E71 :                     
(1) 3005/     E71 :                     .ins_dac:
(1) 3006/     E71 : E5                  		push	hl
(1) 3007/     E72 : C5                  		push	bc
(1) 3008/     E73 : CD 43 13            		call	dac_off
(1) 3009/     E76 : 7E                  		ld	a,(hl)
(1) 3010/     E77 : E6 0F               		and	00001111b
(1) 3011/     E79 : 32 97 1C            		ld	(wave_Flags),a
(1) 3012/     E7C : CF                  		rst	8
(1) 3013/     E7D : 23                  		inc	hl
(1) 3014/     E7E : 23                  		inc	hl
(1) 3015/     E7F : 5E                  		ld	e,(hl)
(1) 3016/     E80 : 23                  		inc	hl
(1) 3017/     E81 : 7E                  		ld	a,(hl)
(1) 3018/     E82 : 23                  		inc	hl
(1) 3019/     E83 : 6E                  		ld	l,(hl)
(1) 3020/     E84 : 67                  		ld	h,a
(1) 3021/     E85 : E5                  		push	hl
(1) 3022/     E86 : 7B                  		ld	a,e
(1) 3023/     E87 : 01 06 00            		ld	bc,6		; Skip head
(1) 3024/     E8A : 09                  		add	hl,bc
(1) 3025/     E8B : CE 00               		adc	a,0
(1) 3026/     E8D : 22 8C 1C            		ld	(wave_Start),hl	; Set START point
(1) 3027/     E90 : 32 8E 1C            		ld	(wave_Start+2),a
(1) 3028/     E93 : E1                  		pop	hl
(1) 3029/     E94 : 7B                  		ld	a,e
(1) 3030/     E95 : 11 AF 1C            		ld	de,sampleHead
(1) 3031/     E98 : 01 06 00            		ld	bc,6
(1) 3032/     E9B : D5                  		push	de
(1) 3033/     E9C : CF                  		rst	8
(1) 3034/     E9D : CD F9 10            		call	transferRom	; *** ROM ACCESS ***
(1) 3035/     EA0 : E1                  		pop	hl
(1) 3036/     EA1 :                     	; hl - temporal header
(1) 3037/     EA1 : 5E                  		ld	e,(hl)
(1) 3038/     EA2 : 23                  		inc	hl
(1) 3039/     EA3 : 56                  		ld	d,(hl)
(1) 3040/     EA4 : 23                  		inc	hl
(1) 3041/     EA5 : 7E                  		ld	a,(hl)
(1) 3042/     EA6 : 23                  		inc	hl
(1) 3043/     EA7 : ED 53 8F 1C         		ld	(wave_Len),de	; LEN
(1) 3044/     EAB : 32 91 1C            		ld	(wave_Len+2),a
(1) 3045/     EAE : 5E                  		ld	e,(hl)
(1) 3046/     EAF : 23                  		inc	hl
(1) 3047/     EB0 : CF                  		rst	8
(1) 3048/     EB1 : 56                  		ld	d,(hl)
(1) 3049/     EB2 : 23                  		inc	hl
(1) 3050/     EB3 : 7E                  		ld	a,(hl)
(1) 3051/     EB4 : 23                  		inc	hl
(1) 3052/     EB5 : ED 53 92 1C         		ld	(wave_Loop),de	; LOOP
(1) 3053/     EB9 : 32 94 1C            		ld	(wave_Loop+2),a
(1) 3054/     EBC : 11 06 28            		ld	de,2806h	; keys off
(1) 3055/     EBF : CD 18 13            		call	fm_send_1
(1) 3056/     EC2 : C1                  		pop	bc
(1) 3057/     EC3 : E1                  		pop	hl
(1) 3058/     EC4 :                     ; .same_dac:
(1) 3059/     EC4 : C9                  		ret
(1) 3060/     EC5 :                     
(1) 3061/     EC5 :                     ; ----------------------------------------
(1) 3062/     EC5 :                     
(1) 3063/     EC5 :                     .ins_pcm:
(1) 3064/     EC5 : DD E5               		push	ix
(1) 3065/     EC7 : E5                  		push	hl
(1) 3066/     EC8 : C5                  		push	bc
(1) 3067/     EC9 : 7E                  		ld	a,(hl)		; Stereo|Loop bits
(1) 3068/     ECA : E6 01               		and	00000001b	; Read loop bit
(1) 3069/     ECC : 0F                  		rrca			; Move to MSB
(1) 3070/     ECD : CF                  		rst	8
(1) 3071/     ECE : 23                  		inc	hl		; Skip ID and Pitch
(1) 3072/     ECF : 23                  		inc	hl
(1) 3073/     ED0 : 5E                  		ld	e,(hl)		; Read 24-bit pointer
(1) 3074/     ED1 : B3                  		or	e
(1) 3075/     ED2 : 5F                  		ld	e,a
(1) 3076/     ED3 : 23                  		inc	hl
(1) 3077/     ED4 : 7E                  		ld	a,(hl)
(1) 3078/     ED5 : 23                  		inc	hl
(1) 3079/     ED6 : 6E                  		ld	l,(hl)
(1) 3080/     ED7 : 67                  		ld	h,a
(1) 3081/     ED8 :                     	; d    - Loop enable bit
(1) 3082/     ED8 :                     	; e,hl - 24-bit pointer + loop bit
(1) 3083/     ED8 : DD 21 B7 15         		ld	ix,pcmcom
(1) 3084/     EDC : 06 00               		ld	b,0
(1) 3085/     EDE : FD 4E 04            		ld	c,(iy+04h)
(1) 3086/     EE1 : DD 09               		add	ix,bc
(1) 3087/     EE3 : 01 28 00            		ld	bc,40		; Go to 40
(1) 3088/     EE6 : DD 09               		add	ix,bc
(1) 3089/     EE8 : 01 08 00            		ld	bc,8
(1) 3090/     EEB : DD 73 00            		ld	(ix),e		; Write 24-bit pointer
(1) 3091/     EEE : DD 09               		add	ix,bc
(1) 3092/     EF0 : DD 74 00            		ld	(ix),h
(1) 3093/     EF3 : DD 09               		add	ix,bc
(1) 3094/     EF5 : DD 75 00            		ld	(ix),l
(1) 3095/     EF8 : C1                  		pop	bc
(1) 3096/     EF9 : E1                  		pop	hl
(1) 3097/     EFA : DD E1               		pop	ix
(1) 3098/     EFC : C9                  		ret
(1) 3099/     EFD :                     
(1) 3100/     EFD :                     ; ----------------------------------------
(1) 3101/     EFD :                     
(1) 3102/     EFD :                     .ins_pwm:
(1) 3103/     EFD : DD E5               		push	ix
(1) 3104/     EFF : E5                  		push	hl
(1) 3105/     F00 : C5                  		push	bc
(1) 3106/     F01 : 7E                  		ld	a,(hl)		; Stereo|Loop bits
(1) 3107/     F02 : E6 03               		and	00000011b
(1) 3108/     F04 : 0F                  		rrca
(1) 3109/     F05 : 0F                  		rrca
(1) 3110/     F06 : 4F                  		ld	c,a
(1) 3111/     F07 : CF                  		rst	8
(1) 3112/     F08 : 23                  		inc	hl		; Skip ID and Pitch
(1) 3113/     F09 : 23                  		inc	hl
(1) 3114/     F0A : 56                  		ld	d,(hl)
(1) 3115/     F0B : 23                  		inc	hl
(1) 3116/     F0C : 5E                  		ld	e,(hl)
(1) 3117/     F0D : 23                  		inc	hl
(1) 3118/     F0E : 7E                  		ld	a,(hl)
(1) 3119/     F0F : 23                  		inc	hl
(1) 3120/     F10 : 6E                  		ld	l,(hl)
(1) 3121/     F11 : 67                  		ld	h,a
(1) 3122/     F12 : 79                  		ld	a,c
(1) 3123/     F13 : B2                  		or	d
(1) 3124/     F14 : 57                  		ld	d,a
(1) 3125/     F15 : CF                  		rst	8
(1) 3126/     F16 :                     	; de,hl - 32-bit PWM pointer
(1) 3127/     F16 : DD 21 F7 15         		ld	ix,pwmcom
(1) 3128/     F1A : 06 00               		ld	b,0
(1) 3129/     F1C : FD 4E 04            		ld	c,(iy+04h)
(1) 3130/     F1F : DD 09               		add	ix,bc
(1) 3131/     F21 : 01 18 00            		ld	bc,24
(1) 3132/     F24 : DD 09               		add	ix,bc	; Move to PWOUTF
(1) 3133/     F26 : 01 08 00            		ld	bc,8
(1) 3134/     F29 : DD 72 00            		ld	(ix),d
(1) 3135/     F2C : DD 09               		add	ix,bc
(1) 3136/     F2E : DD 73 00            		ld	(ix),e
(1) 3137/     F31 : DD 09               		add	ix,bc
(1) 3138/     F33 : DD 74 00            		ld	(ix),h
(1) 3139/     F36 : DD 09               		add	ix,bc
(1) 3140/     F38 : DD 75 00            		ld	(ix),l
(1) 3141/     F3B : C1                  		pop	bc
(1) 3142/     F3C : E1                  		pop	hl
(1) 3143/     F3D : DD E1               		pop	ix
(1) 3144/     F3F : C9                  		ret
(1) 3145/     F40 :                     
(1) 3146/     F40 :                     ; ----------------------------------------
(1) 3147/     F40 :                     ; NEW note
(1) 3148/     F40 :                     ; ----------------------------------------
(1) 3149/     F40 :                     
(1) 3150/     F40 :                     .note:
(1) 3151/     F40 : 78                  		ld	a,b		; Volume bit?
(1) 3152/     F41 : E6 04               		and	0100b
(1) 3153/     F43 : 20 05               		jr	nz,.fm_hasvol
(1) 3154/     F45 : FD 36 08 00         		ld	(iy+08h),0	; Reset to default volume
(1) 3155/     F49 : CF                  		rst	8
(1) 3156/     F4A :                     .fm_hasvol:
(1) 3157/     F4A : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 3158/     F4D : 4F                  		ld	c,a
(1) 3159/     F4E : FE FF               		cp	-1
(1) 3160/     F50 : C8                  		ret	z
(1) 3161/     F51 : FE FE               		cp	-2
(1) 3162/     F53 : C8                  		ret	z
(1) 3163/     F54 : E7                  		rst	20h
(1) 3164/     F55 : 7E                  		ld	a,(hl)
(1) 3165/     F56 : E6 F0               		and	11110000b
(1) 3166/     F58 : FE 80               		cp	80h
(1) 3167/     F5A : 28 16               		jr	z,.n_indx
(1) 3168/     F5C : CF                  		rst	8
(1) 3169/     F5D : FE 90               		cp	90h
(1) 3170/     F5F : 28 20               		jr	z,.n_psgn
(1) 3171/     F61 : FE A0               		cp	0A0h
(1) 3172/     F63 : 28 21               		jr	z,.n_fm
(1) 3173/     F65 :                     ; 		cp	0B0h		; ** Can't use notes on FM special **
(1) 3174/     F65 :                     ; 		jr	z,.n_fm
(1) 3175/     F65 : FE C0               		cp	0C0h
(1) 3176/     F67 : 28 09               		jr	z,.n_indx
(1) 3177/     F69 : FE D0               		cp	0D0h
(1) 3178/     F6B : 28 05               		jr	z,.n_indx
(1) 3179/     F6D : FE E0               		cp	0E0h
(1) 3180/     F6F : 28 01               		jr	z,.n_indx
(1) 3181/     F71 : C9                  		ret
(1) 3182/     F72 :                     
(1) 3183/     F72 :                     ; --------------------------------
(1) 3184/     F72 :                     
(1) 3185/     F72 :                     .n_indx:
(1) 3186/     F72 : 79                  		ld	a,c
(1) 3187/     F73 :                     .n_stfreq:
(1) 3188/     F73 : 23                  		inc	hl		; Skip ID
(1) 3189/     F74 : 5E                  		ld	e,(hl)		; Read pitch
(1) 3190/     F75 : 2B                  		dec	hl
(1) 3191/     F76 : 83                  		add	a,e		; Note + pitch
(1) 3192/     F77 : CF                  		rst	8
(1) 3193/     F78 : 87                  		add	a,a		; * 2
(1) 3194/     F79 : FD 77 06            		ld	(iy+06h),a
(1) 3195/     F7C : FD 36 07 00         		ld	(iy+07h),0	; reset pitchbend
(1) 3196/     F80 : C9                  		ret
(1) 3197/     F81 :                     .n_psgn:
(1) 3198/     F81 : 79                  		ld	a,c
(1) 3199/     F82 : C6 0C               		add	a,12		; <-- Manual adjust for NOISE
(1) 3200/     F84 : 18 ED               		jr	.n_stfreq
(1) 3201/     F86 :                     
(1) 3202/     F86 :                     ; FM freqs
(1) 3203/     F86 :                     .n_fm:
(1) 3204/     F86 : 79                  		ld	a,c
(1) 3205/     F87 : 23                  		inc	hl		; Skip ID
(1) 3206/     F88 : 5E                  		ld	e,(hl)		; Read pitch
(1) 3207/     F89 : 2B                  		dec	hl
(1) 3208/     F8A : CF                  		rst	8
(1) 3209/     F8B : 83                  		add	a,e		; Note + pitch
(1) 3210/     F8C :                     	; Search for octave and note...
(1) 3211/     F8C : 0E 00               		ld	c,0		; c - octave
(1) 3212/     F8E : 16 07               		ld	d,7
(1) 3213/     F90 :                     .get_oct:
(1) 3214/     F90 : 5F                  		ld	e,a		; e - note
(1) 3215/     F91 : D6 0C               		sub	12
(1) 3216/     F93 : B7                  		or	a
(1) 3217/     F94 : FA 9B 0F            		jp	m,.fnd_oct
(1) 3218/     F97 : 0C                  		inc	c
(1) 3219/     F98 :                     ; 		nop
(1) 3220/     F98 :                     ; 		nop
(1) 3221/     F98 :                     ; 		rst	8
(1) 3222/     F98 :                     ; 		nop
(1) 3223/     F98 :                     ; 		nop
(1) 3224/     F98 : 15                  		dec	d
(1) 3225/     F99 : 20 F5               		jr	nz,.get_oct
(1) 3226/     F9B :                     .fnd_oct:
(1) 3227/     F9B : CF                  		rst	8
(1) 3228/     F9C : 7B                  		ld	a,e
(1) 3229/     F9D : 87                  		add	a,a		; Note * 2
(1) 3230/     F9E : E6 1F               		and	00011111b
(1) 3231/     FA0 : CB 09               		rrc	c
(1) 3232/     FA2 : CB 09               		rrc	c
(1) 3233/     FA4 : CB 09               		rrc	c
(1) 3234/     FA6 : CF                  		rst	8
(1) 3235/     FA7 : B1                  		or	c
(1) 3236/     FA8 : FD 77 06            		ld	(iy+06h),a	; Save octave + index: OOOiiiiib
(1) 3237/     FAB : FD 36 07 00         		ld	(iy+07h),0
(1) 3238/     FAF : C9                  		ret
(1) 3239/     FB0 :                     
(1) 3240/     FB0 :                     ; ----------------------------------------
(1) 3241/     FB0 :                     
(1) 3242/     FB0 :                     .chnl_ulnkcut:
(1) 3243/     FB0 : DD 4E 01            		ld	c,(ix+chnl_Chip)
(1) 3244/     FB3 : C3 B6 0F            		jp	.chnl_ulnk
(1) 3245/     FB6 :                     .chnl_ulnkoff:
(1) 3246/     FB6 :                     ; 		ld	c,0
(1) 3247/     FB6 :                     .chnl_ulnk:
(1) 3248/     FB6 : AF                  		xor	a
(1) 3249/     FB7 : CF                  		rst	8
(1) 3250/     FB8 : FD 77 00            		ld	(iy),a			; Delete link, chip and prio
(1) 3251/     FBB : FD 77 01            		ld	(iy+1),a
(1) 3252/     FBE : FD 77 02            		ld	(iy+2),a
(1) 3253/     FC1 : FD 77 03            		ld	(iy+3),a
(1) 3254/     FC4 : FD 77 08            		ld	(iy+08h),a
(1) 3255/     FC7 : FD 77 09            		ld	(iy+09h),a
(1) 3256/     FCA : FD 77 0A            		ld	(iy+0Ah),a
(1) 3257/     FCD : FD 77 0B            		ld	(iy+0Bh),a
(1) 3258/     FD0 : C9                  		ret
(1) 3259/     FD1 :                     
(1) 3260/     FD1 :                     ; 		push	iy
(1) 3261/     FD1 :                     ; 		pop	hl
(1) 3262/     FD1 :                     ; 		ld	bc,8-2		; Go to 08h
(1) 3263/     FD1 :                     ; 		add	hl,bc
(1) 3264/     FD1 :                     ; 		rst	8
(1) 3265/     FD1 :                     ; 		ld	b,8/2
(1) 3266/     FD1 :                     ; .clrfull:
(1) 3267/     FD1 :                     ; 		ld	(hl),0		; Reset settings 08-0Bh
(1) 3268/     FD1 :                     ; 		inc	hl
(1) 3269/     FD1 :                     ; 		ld	(hl),0
(1) 3270/     FD1 :                     ; 		inc	hl
(1) 3271/     FD1 :                     ; 		rst	8
(1) 3272/     FD1 :                     ; 		djnz	.clrfull
(1) 3273/     FD1 :                     ; 		ret
(1) 3274/     FD1 :                     
(1) 3275/     FD1 :                     ; ============================================================
(1) 3276/     FD1 :                     ; --------------------------------------------------------
(1) 3277/     FD1 :                     ; Communication with the SCD and 32X
(1) 3278/     FD1 :                     ;
(1) 3279/     FD1 :                     ; SCD: Sends a level2 interrupt to Sub-CPU*
(1) 3280/     FD1 :                     ; 32X: Interrupts Slave SH2 with CMD request
(1) 3281/     FD1 :                     ;
(1) 3282/     FD1 :                     ; *Originally meant for waiting VBlank, that's
(1) 3283/     FD1 :                     ; the only one available for sending the table
(1) 3284/     FD1 :                     ; --------------------------------------------------------
(1) 3285/     FD1 :                     
(1) 3286/     FD1 :                     ; NOTE: careful modifing this
(1) 3287/     FD1 :                     
(1) 3288/     FD1 :                     zmars_send:
(1) 3289/     FD1 :                     	; ----------------------------------------
(1) 3290/     FD1 :                     	; Send PCM table
(1) 3292/     FD1 : 3A 36 00            		ld	a,(mcdBlock)	; Enable MARS requests?
(1) 3293/     FD4 : B7                  		or	a
(1) 3294/     FD5 : C2 43 10            		jp	nz,.mcdt_blocked
(1) 3295/     FD8 : FD 21 0E A0         		ld	iy,8000h|200Eh	; iy - command ports
(1) 3296/     FDC : 3A 8B 1C            		ld	a,(mcdUpd)	; NEW transfer?
(1) 3297/     FDF : B7                  		or	a
(1) 3298/     FE0 : CA 4D 10            		jp	z,.mcdt_noupd
(1) 3299/     FE3 : AF                  		xor	a
(1) 3300/     FE4 : 32 8B 1C            		ld	(mcdUpd),a
(1) 3301/     FE7 : E7                  		rst	20h
(1) 3302/     FE8 : CD 55 10            		call	.set_combank
(1) 3303/     FEB : DD 21 B7 15         		ld	ix,pcmcom
(1) 3304/     FEF : 21 00 A0            		ld	hl,8000h|2000h
(1) 3305/     FF2 :                     .wait_in:
(1) 3306/     FF2 : FD 7E 00            		ld	a,(iy)		; MAIN got first?
(1) 3307/     FF5 : B7                  		or	a		; != 0
(1) 3308/     FF6 : 20 FA               		jr	nz,.wait_in
(1) 3309/     FF8 : FD 7E 01            		ld	a,(iy+1)	; SUB is busy?
(1) 3310/     FFB : B7                  		or	a		; 80h
(1) 3311/     FFC : FA F2 0F            		jp	m,.wait_in
(1) 3312/     FFF : FD 36 00 F0         		ld	(iy),0F0h	; Set our entrance ticket.
(1) 3313/    1003 : 36 81               		ld	(hl),81h	; Request IRQ
(1) 3314/    1005 : CF                  		rst	8
(1) 3315/    1006 :                     ; .test_irq:
(1) 3316/    1006 :                     ; 		ld	a,(hl)
(1) 3317/    1006 :                     ; 		and	1
(1) 3318/    1006 :                     ; 		jr	nz,.test_irq
(1) 3319/    1006 :                     .test_sub:
(1) 3320/    1006 : FD 7E 01            		ld	a,(iy+1)	; Sub response?
(1) 3321/    1009 : FE FF               		cp	-1
(1) 3322/    100B : 20 F9               		jr	nz,.test_sub
(1) 3323/    100D : FD CB 00 CE         		set	1,(iy)		; "MAIN" lock
(1) 3324/    1011 : CF                  		rst	8
(1) 3325/    1012 : 11 10 00            		ld	de,10h		; ix - MAIN data area
(1) 3326/    1015 : 19                  		add	hl,de
(1) 3327/    1016 :                     	; ix - table
(1) 3328/    1016 :                     	; hl - main data
(1) 3329/    1016 : 0E 04               		ld	c,40h/10h	; c - Packets to send
(1) 3330/    1018 :                     .mcd_nextp:
(1) 3331/    1018 : FD CB 01 46         		bit	0,(iy+1)	; SUB is busy?
(1) 3332/    101C : 20 FA               		jr	nz,.mcd_nextp
(1) 3333/    101E : 06 10               		ld	b,10h		; 2words to write
(1) 3334/    1020 : E5                  		push	hl
(1) 3335/    1021 :                     .copy_bytes:
(1) 3336/    1021 : DD 7E 00            		ld	a,(ix)
(1) 3337/    1024 : 77                  		ld	(hl),a
(1) 3338/    1025 : DD 23               		inc	ix
(1) 3339/    1027 : 23                  		inc	hl
(1) 3340/    1028 : 10 F7               		djnz	.copy_bytes
(1) 3341/    102A : E1                  		pop	hl
(1) 3342/    102B : FD CB 00 C6         		set	0,(iy)		; PASS bit
(1) 3343/    102F : CF                  		rst	8
(1) 3344/    1030 :                     .wait_sub:
(1) 3345/    1030 : FD CB 01 46         		bit	0,(iy+1)	; SUB is busy?
(1) 3346/    1034 : 28 FA               		jr	z,.wait_sub
(1) 3347/    1036 : FD CB 00 86         		res	0,(iy)		; Clear PASS bit
(1) 3348/    103A : CF                  		rst	8
(1) 3349/    103B : 0D                  		dec	c
(1) 3350/    103C : 20 DA               		jr	nz,.mcd_nextp
(1) 3351/    103E : FD 36 00 00         		ld	(iy),0		; "MAIN" unlock
(1) 3352/    1042 : CF                  		rst	8
(1) 3353/    1043 :                     .mcdt_blocked:
(1) 3354/    1043 : 21 B7 15            		ld	hl,pcmcom
(1) 3355/    1046 : AF                  		xor	a
(1) 3356/    1047 : 06 08               		ld	b,8		; MAX PCM channels
(1) 3357/    1049 :                     .clr_pcm:
(1) 3358/    1049 : 77                  		ld	(hl),a
(1) 3359/    104A : 23                  		inc	hl
(1) 3360/    104B : 10 FC               		djnz	.clr_pcm
(1) 3361/    104D :                     .mcdt_noupd:
(1) 3364/    104D : CF                  		rst	8
(1) 3365/    104E : 06 03               		ld	b,3	; <-- wave sync for MCD only
(1) 3366/    1050 : 10 FE               		djnz	$
(1) 3367/    1052 : 00                  		nop
(1) 3368/    1053 : 00                  		nop
(1) 3370/    1054 :                     	; ----------------------------------------
(1) 3371/    1054 :                     	; Send PWM table
(1) 3463/    1054 : C9                  		ret
(1) 3464/    1055 :                     
(1) 3465/    1055 :                     ; --------------------------------------------------------
(1) 3466/    1055 :                     ; Set bank to $A10000 area
(1) 3468/    1055 :                     .set_combank:
(1) 3469/    1055 : 21 00 60            		ld	hl,6000h
(1) 3470/    1058 : 36 00               		ld	(hl),0
(1) 3471/    105A : 36 01               		ld	(hl),1
(1) 3472/    105C : 36 00               		ld	(hl),0
(1) 3473/    105E : 36 00               		ld	(hl),0
(1) 3474/    1060 : CF                  		rst	8
(1) 3475/    1061 : 36 00               		ld	(hl),0
(1) 3476/    1063 : 36 00               		ld	(hl),0
(1) 3477/    1065 : 36 01               		ld	(hl),1
(1) 3478/    1067 : 36 00               		ld	(hl),0
(1) 3479/    1069 : 36 01               		ld	(hl),1
(1) 3480/    106B : C9                  		ret
(1) 3482/    106C :                     
(1) 3483/    106C :                     ; ====================================================================
(1) 3484/    106C :                     ; ----------------------------------------------------------------
(1) 3485/    106C :                     ; Subroutines
(1) 3486/    106C :                     ; ----------------------------------------------------------------
(1) 3487/    106C :                     
(1) 3488/    106C :                     ; --------------------------------------------------------
(1) 3489/    106C :                     ; Init sound engine
(1) 3490/    106C :                     ; --------------------------------------------------------
(1) 3491/    106C :                     
(1) 3492/    106C :                     gema_init:
(1) 3493/    106C : CD 43 13            		call	dac_off
(1) 3494/    106F : AF                  		xor	a
(1) 3495/    1070 :                     ; 		ld	(marsUpd),a
(1) 3496/    1070 :                     ; 		ld	(mcdUpd),a
(1) 3497/    1070 : 32 30 00            		ld	(cdRamLen),a
(1) 3498/    1073 : CD 52 14            		call	gema_lastbank	; Set last bank slot BEFORE writing to PSG (32X bus problem)
(1) 3499/    1076 : 21 11 7F            		ld	hl,Zpsg_ctrl	; Silence PSG channels
(1) 3500/    1079 : 36 9F               		ld	(hl),09Fh
(1) 3501/    107B : 36 BF               		ld	(hl),0BFh
(1) 3502/    107D : 36 DF               		ld	(hl),0DFh
(1) 3503/    107F : 36 FF               		ld	(hl),0FFh
(1) 3504/    1081 : 11 0B 22            		ld	de,2208h|03h	; Set Default LFO
(1) 3505/    1084 : CD 18 13            		call	fm_send_1
(1) 3506/    1087 : 11 00 27            		ld	de,2700h	; CH3 special and timers off
(1) 3507/    108A : CD 18 13            		call	fm_send_1
(1) 3508/    108D :                     ; 		ld	de,2800h
(1) 3509/    108D : 14                  		inc	d		; FM KEYS off
(1) 3510/    108E : CD 18 13            		call	fm_send_1
(1) 3511/    1091 : 1C                  		inc	e
(1) 3512/    1092 : CD 18 13            		call	fm_send_1
(1) 3513/    1095 : 1C                  		inc	e
(1) 3514/    1096 : CD 18 13            		call	fm_send_1
(1) 3515/    1099 : 1C                  		inc	e
(1) 3516/    109A : 1C                  		inc	e
(1) 3517/    109B : CD 18 13            		call	fm_send_1
(1) 3518/    109E : 1C                  		inc	e
(1) 3519/    109F : CD 18 13            		call	fm_send_1
(1) 3520/    10A2 : 1C                  		inc	e
(1) 3521/    10A3 : CD 18 13            		call	fm_send_1
(1) 3522/    10A6 : FD 21 95 15         		ld	iy,nikona_BuffList
(1) 3523/    10AA : 0E 01               		ld	c,1			; Start at this priority
(1) 3524/    10AC :                     .setup_list:
(1) 3525/    10AC : FD 7E 00            		ld	a,(iy)
(1) 3526/    10AF : FE FF               		cp	-1
(1) 3527/    10B1 : 28 24               		jr	z,.end_setup
(1) 3528/    10B3 : FD 23               		inc	iy
(1) 3529/    10B5 : 6F                  		ld	l,a
(1) 3530/    10B6 : FD 66 00            		ld	h,(iy)
(1) 3531/    10B9 : E5                  		push	hl
(1) 3532/    10BA : DD E1               		pop	ix
(1) 3533/    10BC : DD 71 14            		ld	(ix+trk_Priority),c
(1) 3534/    10BF : DD 36 01 FF         		ld	(ix+trk_SeqId),-1	; Reset sequence ID
(1) 3535/    10C3 : FD 23               		inc	iy
(1) 3536/    10C5 :                     	; iy - src
(1) 3537/    10C5 :                     	; hl - dst
(1) 3538/    10C5 : 11 04 00            		ld	de,trk_Blocks
(1) 3539/    10C8 : 19                  		add	hl,de
(1) 3540/    10C9 : 06 06               		ld	b,MAX_BUFFNTRY-2
(1) 3541/    10CB :                     .st_copy:
(1) 3542/    10CB : FD 7E 00            		ld	a,(iy)
(1) 3543/    10CE : 77                  		ld	(hl),a
(1) 3544/    10CF : FD 23               		inc	iy
(1) 3545/    10D1 : 23                  		inc	hl
(1) 3546/    10D2 : 10 F7               		djnz	.st_copy
(1) 3547/    10D4 : 0C                  		inc	c
(1) 3548/    10D5 : 18 D5               		jr	.setup_list
(1) 3549/    10D7 :                     .end_setup:
(1) 3550/    10D7 : C9                  		ret
(1) 3551/    10D8 :                     
(1) 3552/    10D8 :                     ; --------------------------------------------------------
(1) 3553/    10D8 :                     ; get_tick
(1) 3554/    10D8 :                     ;
(1) 3555/    10D8 :                     ; Checks if VBlank triggred a TICK
(1) 3556/    10D8 :                     ; (1/150 NTSC, 1/120 PAL)
(1) 3557/    10D8 :                     ; --------------------------------------------------------
(1) 3558/    10D8 :                     
(1) 3559/    10D8 :                     get_tick:
(1) 3560/    10D8 : F3                  		di				; Disable ints
(1) 3561/    10D9 : F5                  		push	af
(1) 3562/    10DA : E5                  		push	hl
(1) 3563/    10DB : 21 7F 1C            		ld	hl,tickFlag		; read last TICK flag
(1) 3564/    10DE : 7E                  		ld	a,(hl)			; non-zero value (1Fh)?
(1) 3565/    10DF : B7                  		or 	a
(1) 3566/    10E0 : 28 13               		jr	z,.ctnotick
(1) 3567/    10E2 : 36 00               		ld	(hl),0			; Reset TICK flag
(1) 3568/    10E4 : 23                  		inc	hl			; Move to tickCnt
(1) 3569/    10E5 : 34                  		inc	(hl)			; and increment
(1) 3570/    10E6 : CF                  		rst	8
(1) 3571/    10E7 : D5                  		push	de
(1) 3572/    10E8 : 2A 9B 1C            		ld	hl,(sbeatAcc)		; Increment subbeats
(1) 3573/    10EB : ED 5B 9D 1C         		ld	de,(sbeatPtck)
(1) 3574/    10EF : CF                  		rst	8
(1) 3575/    10F0 : 19                  		add	hl,de
(1) 3576/    10F1 : 22 9B 1C            		ld	(sbeatAcc),hl
(1) 3577/    10F4 : D1                  		pop	de
(1) 3578/    10F5 :                     .ctnotick:
(1) 3579/    10F5 : E1                  		pop	hl
(1) 3580/    10F6 : F1                  		pop	af
(1) 3581/    10F7 : FB                  		ei				; Enable ints again
(1) 3582/    10F8 : C9                  		ret
(1) 3583/    10F9 :                     
(1) 3584/    10F9 :                     ; --------------------------------------------------------
(1) 3585/    10F9 :                     ; transferRom
(1) 3586/    10F9 :                     ;
(1) 3587/    10F9 :                     ; Transfer bytes from ROM to RAM. This also tells
(1) 3588/    10F9 :                     ; to 68k that we want to access ROM
(1) 3589/    10F9 :                     ;
(1) 3590/    10F9 :                     ; Input:
(1) 3591/    10F9 :                     ; a  - 68K Address $xx0000
(1) 3592/    10F9 :                     ;  c - Byte count (size 0 NOT allowed, MAX: 0FFh)
(1) 3593/    10F9 :                     ; hl - 68K Address $00xxxx
(1) 3594/    10F9 :                     ; de - Destination pointer
(1) 3595/    10F9 :                     ;
(1) 3596/    10F9 :                     ; Uses:
(1) 3597/    10F9 :                     ; b
(1) 3598/    10F9 :                     ;
(1) 3599/    10F9 :                     ; Notes:
(1) 3600/    10F9 :                     ; call RST 20h first if transfering anything other
(1) 3601/    10F9 :                     ; than sample data, just to be safe.
(1) 3602/    10F9 :                     ; --------------------------------------------------------
(1) 3603/    10F9 :                     
(1) 3604/    10F9 :                     transferRom:
(1) 3605/    10F9 : FE FF               		cp	0FFh		; <-- WORKAROUND FOR $FF0000 area
(1) 3606/    10FB : 28 43               		jr	z,.from_ram
(1) 3607/    10FD : CF                  		rst	8
(1) 3608/    10FE : DD E5               		push	ix
(1) 3609/    1100 : DD 21 2F 00         		ld	ix,commZRomBlk	; ix - rom read/block flags
(1) 3610/    1104 : 22 99 1C            		ld	(x68ksrclsb),hl	; save hl copy
(1) 3611/    1107 : CB BC               		res	7,h
(1) 3612/    1109 : 06 00               		ld	b,0
(1) 3613/    110B : 0B                  		dec	bc
(1) 3614/    110C : 09                  		add	hl,bc
(1) 3615/    110D : CB 7C               		bit	7,h
(1) 3616/    110F : 20 0B               		jr	nz,.double
(1) 3617/    1111 : 2A 99 1C            		ld	hl,(x68ksrclsb)	; single transfer
(1) 3618/    1114 : 0C                  		inc	c
(1) 3619/    1115 : 47                  		ld	b,a
(1) 3620/    1116 : CD 5E 11            		call	.transfer
(1) 3621/    1119 : DD E1               		pop	ix
(1) 3622/    111B : C9                  		ret
(1) 3623/    111C :                     .double:
(1) 3624/    111C : CF                  		rst	8
(1) 3625/    111D : 47                  		ld	b,a		; double transfer
(1) 3626/    111E : C5                  		push	bc
(1) 3627/    111F : E5                  		push	hl
(1) 3628/    1120 : 79                  		ld	a,c
(1) 3629/    1121 : 95                  		sub	a,l
(1) 3630/    1122 : 4F                  		ld	c,a
(1) 3631/    1123 : 2A 99 1C            		ld	hl,(x68ksrclsb)
(1) 3632/    1126 : CD 5E 11            		call	.transfer
(1) 3633/    1129 : E1                  		pop	hl
(1) 3634/    112A : C1                  		pop	bc
(1) 3635/    112B :                     ; 		rst	8
(1) 3636/    112B : 4D                  		ld	c,l
(1) 3637/    112C : 0C                  		inc	c
(1) 3638/    112D : 3A 9A 1C            		ld	a,(x68ksrcmid)
(1) 3639/    1130 : E6 80               		and	80h
(1) 3640/    1132 : C6 80               		add	a,80h
(1) 3641/    1134 : 67                  		ld	h,a
(1) 3642/    1135 : 2E 00               		ld	l,0
(1) 3643/    1137 : 30 01               		jr	nc,.x68knocarry
(1) 3644/    1139 : 04                  		inc	b
(1) 3645/    113A :                     .x68knocarry:
(1) 3646/    113A : CD 5E 11            		call	.transfer
(1) 3647/    113D : DD E1               		pop	ix
(1) 3648/    113F : C9                  		ret
(1) 3649/    1140 :                     
(1) 3650/    1140 :                     ; ------------------------------------------------
(1) 3651/    1140 :                     ; WORKAROUND FOR READING FROM $FF0000 RAM
(1) 3652/    1140 :                     ;
(1) 3653/    1140 :                     ; On the 68K side YOU MUST CALL
(1) 3654/    1140 :                     ; Sound_Update on a loop during Display.
(1) 3655/    1140 :                     ; ------------------------------------------------
(1) 3656/    1140 :                     
(1) 3657/    1140 :                     .from_ram:
(1) 3658/    1140 : ED 53 31 00         		ld	(cdRamDst),de
(1) 3659/    1144 : 22 33 00            		ld	(cdRamSrc),hl
(1) 3660/    1147 : 32 35 00            		ld	(cdRamSrcB),a
(1) 3661/    114A : CD 52 14            		call	gema_lastbank			; ** Set bank to $FF8000 area
(1) 3662/    114D : CF                  		rst	8
(1) 3663/    114E : 79                  		ld	a,c
(1) 3664/    114F : 32 30 00            		ld	(cdRamLen),a
(1) 3665/    1152 : 21 00 FF            		ld	hl,RAM_ZCdFlag_D&07FFFh+8000h	; ** EXTERNAL WRITE TO 68K RAM **
(1) 3666/    1155 : 36 01               		ld	(hl),1				; WRITE TO RAM: Set request, 68k clears.
(1) 3667/    1157 :                     .wait:
(1) 3668/    1157 : 3A 30 00            		ld	a,(cdRamLen)			; Wait until 68K clears this
(1) 3669/    115A : B7                  		or	a
(1) 3670/    115B : 20 FA               		jr	nz,.wait
(1) 3671/    115D : C9                  		ret
(1) 3672/    115E :                     
(1) 3673/    115E :                     ; ------------------------------------------------
(1) 3674/    115E :                     ; b  - Source ROM bank
(1) 3675/    115E :                     ;  c - Bytes to transfer (00h is invalid)
(1) 3676/    115E :                     ; hl - Source ROM $00xxxx | 8000h
(1) 3677/    115E :                     ; de - Destination address
(1) 3678/    115E :                     ; ix - ROM-block flag
(1) 3679/    115E :                     ; ------------------------------------------------
(1) 3680/    115E :                     
(1) 3681/    115E :                     .transfer:
(1) 3682/    115E : CF                  		rst	8
(1) 3683/    115F : D5                  		push	de
(1) 3684/    1160 : 11 00 60            		ld	de,6000h
(1) 3685/    1163 : 7C                  		ld	a,h
(1) 3686/    1164 : 07                  		rlca
(1) 3687/    1165 : 12                  		ld	(de),a
(1) 3688/    1166 : 78                  		ld	a,b
(1) 3689/    1167 : CF                  		rst	8
(1) 3690/    1168 : 12                  		ld	(de),a
(1) 3691/    1169 : 0F                  		rrca
(1) 3692/    116A : 12                  		ld	(de),a
(1) 3693/    116B : 0F                  		rrca
(1) 3694/    116C : 12                  		ld	(de),a
(1) 3695/    116D : 0F                  		rrca
(1) 3696/    116E : 12                  		ld	(de),a
(1) 3697/    116F : 0F                  		rrca
(1) 3698/    1170 : CF                  		rst	8
(1) 3699/    1171 : 12                  		ld	(de),a
(1) 3700/    1172 : 0F                  		rrca
(1) 3701/    1173 : 12                  		ld	(de),a
(1) 3702/    1174 : 0F                  		rrca
(1) 3703/    1175 : 12                  		ld	(de),a
(1) 3704/    1176 : 0F                  		rrca
(1) 3705/    1177 : 12                  		ld	(de),a
(1) 3706/    1178 : D1                  		pop	de
(1) 3707/    1179 : CB FC               		set	7,h
(1) 3708/    117B : CF                  		rst	8
(1) 3709/    117C :                     
(1) 3710/    117C :                     	; Transfer ROM data in packets
(1) 3711/    117C :                     	; while playing the cache'd sample
(1) 3712/    117C :                     	; *** CRITICAL PROCESS ***
(1) 3713/    117C :                     	;
(1) 3714/    117C :                     	; pseudo-ref for ldir:
(1) 3715/    117C :                     	; ld (de),(hl)	; load (hl) to (de) directly
(1) 3716/    117C :                     	; inc de	; next de
(1) 3717/    117C :                     	; inc hl	; next hl
(1) 3718/    117C :                     	; dec bc	; decrement bc
(1) 3719/    117C :                     	;
(1) 3720/    117C : 06 00               		ld	b,0
(1) 3721/    117E : 79                  		ld	a,c		; a - Size counter
(1) 3722/    117F :                     ; 		set	1,(ix)
(1) 3723/    117F : D6 08               		sub	MAX_TRFRPZ	; Length lower than MAX_TRFRPZ?
(1) 3724/    1181 : 38 14               		jr	c,.x68klast	; Process single piece only
(1) 3725/    1183 :                     .x68kloop:
(1) 3726/    1183 : CF                  		rst	8
(1) 3727/    1184 : 00                  		nop
(1) 3728/    1185 : 0E 07               		ld	c,MAX_TRFRPZ-1
(1) 3729/    1187 : DD CB 00 46         		bit	0,(ix)		; Genesis requests BUS?
(1) 3730/    118B : C4 A5 11            		call	nz,.x68klpwt
(1) 3731/    118E : ED B0               		ldir			; (de) to (hl) until bc == 0
(1) 3732/    1190 : CF                  		rst	8
(1) 3733/    1191 : 00                  		nop
(1) 3734/    1192 : D6 07               		sub	a,MAX_TRFRPZ-1
(1) 3735/    1194 : D2 83 11            		jp	nc,.x68kloop
(1) 3736/    1197 :                     ; last block
(1) 3737/    1197 :                     .x68klast:
(1) 3738/    1197 : C6 08               		add	a,MAX_TRFRPZ
(1) 3739/    1199 : 4F                  		ld	c,a
(1) 3740/    119A : DD CB 00 46         		bit	0,(ix)		; Genesis requests BUS?
(1) 3741/    119E : C4 A5 11            		call	nz,.x68klpwt
(1) 3742/    11A1 : ED B0               		ldir
(1) 3743/    11A3 : CF                  		rst	8
(1) 3744/    11A4 : C9                  		ret
(1) 3745/    11A5 :                     
(1) 3746/    11A5 :                     ; Wait here until Genesis unlocks ROM
(1) 3747/    11A5 :                     .x68klpwt:
(1) 3748/    11A5 : 00                  		nop	; WAVE SYNC
(1) 3749/    11A6 : 00                  		nop
(1) 3750/    11A7 :                     .x68kpwtlp:
(1) 3751/    11A7 : CF                  		rst	8
(1) 3752/    11A8 : 00                  		nop	; WAVE SYNC
(1) 3753/    11A9 : 00                  		nop
(1) 3754/    11AA : DD CB 00 46         		bit	0,(ix)		; 68k finished?
(1) 3755/    11AE : 20 F7               		jr	nz,.x68kpwtlp
(1) 3756/    11B0 : C9                  		ret
(1) 3757/    11B1 :                     
(1) 3758/    11B1 :                     ; ====================================================================
(1) 3759/    11B1 :                     ; ----------------------------------------------------------------
(1) 3760/    11B1 :                     ; Sound chip routines
(1) 3761/    11B1 :                     ; ----------------------------------------------------------------
(1) 3762/    11B1 :                     
(1) 3763/    11B1 :                     ; --------------------------------------------------------
(1) 3764/    11B1 :                     ; chip_env
(1) 3765/    11B1 :                     ;
(1) 3766/    11B1 :                     ; Process the PSG
(1) 3767/    11B1 :                     ; --------------------------------------------------------
(1) 3768/    11B1 :                     
(1) 3769/    11B1 :                     chip_env:
(1) 3773/    11B1 : FD 21 32 16         		ld	iy,psgcom+3		; Start from NOISE first
(1) 3774/    11B5 : DD 21 11 7F         		ld	ix,Zpsg_ctrl
(1) 3775/    11B9 : 0E E0               		ld	c,0E0h			; c - PSG first ctrl command
(1) 3776/    11BB : 06 04               		ld	b,4			; b - 4 channels
(1) 3777/    11BD :                     .vloop:
(1) 3778/    11BD : CF                  		rst	8
(1) 3779/    11BE : FD 5E 00            		ld	e,(iy+COM)		; e - current command
(1) 3780/    11C1 : FD 36 00 00         		ld	(iy+COM),0
(1) 3781/    11C5 :                     
(1) 3782/    11C5 :                     	; ----------------------------
(1) 3783/    11C5 :                     	; bit 2 - stop sound
(1) 3784/    11C5 : CB 53               		bit	2,e
(1) 3785/    11C7 : 28 0C               		jr	z,.ckof
(1) 3786/    11C9 : FD 36 04 FF         		ld	(iy+LEV),-1		; reset level
(1) 3787/    11CD : FD 36 28 01         		ld	(iy+FLG),1		; and update
(1) 3788/    11D1 : FD 36 18 00         		ld	(iy+MODE),0		; envelope off
(1) 3789/    11D5 :                     .ckof:
(1) 3790/    11D5 :                     	; ----------------------------
(1) 3791/    11D5 :                     	; bit 1 - key off
(1) 3792/    11D5 : CB 4B               		bit	1,e
(1) 3793/    11D7 : 28 0F               		jr      z,.ckon
(1) 3794/    11D9 : FD 7E 18            		ld	a,(iy+MODE)		; mode 0?
(1) 3795/    11DC : B7                  		or	a
(1) 3796/    11DD : 28 09               		jr	z,.ckon
(1) 3797/    11DF : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3798/    11E3 : FD 36 18 04         		ld	(iy+MODE),100b		; set envelope mode 100b
(1) 3799/    11E7 : CF                  		rst	8
(1) 3800/    11E8 :                     .ckon:
(1) 3801/    11E8 :                     	; ----------------------------
(1) 3802/    11E8 :                     	; bit 0 - key on
(1) 3803/    11E8 : CB 43               		bit	0,e
(1) 3804/    11EA : 28 1A               		jr	z,.envproc
(1) 3805/    11EC : FD 36 04 FF         		ld	(iy+LEV),-1		; reset level
(1) 3806/    11F0 : 78                  		ld	a,b
(1) 3807/    11F1 : FE 04               		cp	4			; NOISE channel?
(1) 3808/    11F3 : 20 08               		jr	nz,.nskip
(1) 3809/    11F5 : CF                  		rst	8			; Set NOISE mode
(1) 3810/    11F6 : 3A 81 1C            		ld	a,(psgHatMode)		; write hat mode only.
(1) 3811/    11F9 : B1                  		or	c
(1) 3812/    11FA : DD 77 00            		ld	(ix),a			; WRITE PSG
(1) 3813/    11FD :                     .nskip:
(1) 3814/    11FD : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3815/    1201 : CF                  		rst	8
(1) 3816/    1202 : FD 36 18 01         		ld	(iy+MODE),001b		; set to attack mode
(1) 3817/    1206 :                     .nblock:
(1) 3818/    1206 :                     
(1) 3819/    1206 :                     	; ----------------------------
(1) 3820/    1206 :                     	; Process effects
(1) 3821/    1206 :                     	; ----------------------------
(1) 3822/    1206 :                     .envproc:
(1) 3823/    1206 : FD 7E 18            		ld	a,(iy+MODE)
(1) 3824/    1209 : B7                  		or	a			; no modes
(1) 3825/    120A : CA 90 12            		jp	z,.vedlp
(1) 3826/    120D : FE 01               		cp 	001b			; Attack mode
(1) 3827/    120F : 20 2C               		jr	nz,.chk2
(1) 3828/    1211 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3829/    1215 : FD 5E 24            		ld	e,(iy+ALV)
(1) 3830/    1218 : FD 7E 08            		ld	a,(iy+ATK)		; if ATK == 0, don't use
(1) 3831/    121B : B7                  		or	a
(1) 3832/    121C : 28 16               		jr	z,.atkend
(1) 3833/    121E : 57                  		ld	d,a			; c - attack rate
(1) 3834/    121F : 7B                  		ld	a,e			; a - attack level
(1) 3835/    1220 : CF                  		rst	8
(1) 3836/    1221 : FD 5E 24            		ld	e,(iy+ALV)		; b - OLD attack level
(1) 3837/    1224 : 92                  		sub	a,d			; (attack rate) - (level)
(1) 3838/    1225 : 38 0D               		jr	c,.atkend		; if carry: already finished
(1) 3839/    1227 : 28 0B               		jr	z,.atkend		; if zero: no attack rate
(1) 3840/    1229 : BB                  		cp	e			; attack rate == level?
(1) 3841/    122A : 38 08               		jr	c,.atkend
(1) 3842/    122C : 28 06               		jr	z,.atkend
(1) 3843/    122E : FD 77 04            		ld	(iy+LEV),a		; set new level
(1) 3844/    1231 : CF                  		rst	8
(1) 3845/    1232 : 18 5C               		jr	.vedlp
(1) 3846/    1234 :                     .atkend:
(1) 3847/    1234 : FD 73 04            		ld	(iy+LEV),e		; attack level = new level
(1) 3848/    1237 :                     .atkzero:
(1) 3849/    1237 : FD 36 18 02         		ld	(iy+MODE),010b		; set to decay mode
(1) 3850/    123B : 18 53               		jr	.vedlp
(1) 3851/    123D :                     .chk2:
(1) 3852/    123D :                     
(1) 3853/    123D : FE 02               		cp	010b			; Decay mode
(1) 3854/    123F : 20 31               		jr	nz,.chk4
(1) 3855/    1241 :                     .dectmr:
(1) 3856/    1241 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3857/    1245 : FD 7E 04            		ld	a,(iy+LEV)		; a - Level
(1) 3858/    1248 : FD 5E 10            		ld	e,(iy+SLV)		; b - Sustain
(1) 3859/    124B : BB                  		cp	e
(1) 3860/    124C : 38 0D               		jr	c,.dkadd		; if carry: add
(1) 3861/    124E : 28 18               		jr	z,.dkyend		; if zero:  finish
(1) 3862/    1250 : CF                  		rst	8
(1) 3863/    1251 : FD 96 0C            		sub	(iy+DKY)		; substract decay rate
(1) 3864/    1254 : 38 12               		jr	c,.dkyend		; finish if wraped.
(1) 3865/    1256 : BB                  		cp	e			; compare level
(1) 3866/    1257 : 38 0F               		jr	c,.dkyend		; and finish
(1) 3867/    1259 : 18 08               		jr	.dksav
(1) 3868/    125B :                     .dkadd:
(1) 3869/    125B : FD 86 0C            		add	a,(iy+DKY)		;  (level) + (decay rate)
(1) 3870/    125E : 38 08               		jr	c,.dkyend		; finish if wraped.
(1) 3871/    1260 : BB                  		cp	e			; compare level
(1) 3872/    1261 : 30 05               		jr	nc,.dkyend
(1) 3873/    1263 :                     .dksav:
(1) 3874/    1263 : FD 77 04            		ld	(iy+LEV),a		; save new level
(1) 3875/    1266 : 18 28               		jr	.vedlp
(1) 3876/    1268 :                     .dkyend:
(1) 3877/    1268 : CF                  		rst	8
(1) 3878/    1269 : FD 73 04            		ld	(iy+LEV),e		; save last attack
(1) 3879/    126C : FD 36 18 04         		ld	(iy+MODE),100b		; and set to sustain
(1) 3880/    1270 : 18 1E               		jr	.vedlp
(1) 3881/    1272 :                     .chk4:
(1) 3882/    1272 : FE 04               		cp	100b			; Sustain phase
(1) 3883/    1274 : 20 1A               		jr	nz,.vedlp
(1) 3884/    1276 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3885/    127A : FD 7E 04            		ld	a,(iy+LEV)		; a - Level
(1) 3886/    127D : CF                  		rst	8
(1) 3887/    127E : FD 86 14            		add 	a,(iy+RRT)		; add Release Rate
(1) 3888/    1281 : 38 05               		jr	c,.killenv		; release done
(1) 3889/    1283 : FD 77 04            		ld	(iy+LEV),a		; set new Level
(1) 3890/    1286 : 18 08               		jr	.vedlp
(1) 3891/    1288 :                     .killenv:
(1) 3892/    1288 : FD 36 04 FF         		ld	(iy+LEV),-1		; Silence this channel
(1) 3893/    128C : FD 36 18 00         		ld	(iy+MODE),0		; Reset mode
(1) 3894/    1290 :                     .vedlp:
(1) 3895/    1290 :                     
(1) 3896/    1290 :                     	; ----------------------------
(1) 3897/    1290 :                     	; PSG UPDATE
(1) 3898/    1290 :                     	; ----------------------------
(1) 3899/    1290 : FD 7E 28            		ld	a,(iy+FLG)
(1) 3900/    1293 : B7                  		or	a
(1) 3901/    1294 : 28 72               		jr	z,.noupd
(1) 3902/    1296 : FD 36 28 00         		ld	(iy+FLG),0	; Reset until next one
(1) 3903/    129A : 59                  		ld	e,c
(1) 3904/    129B : 3A 81 1C            		ld	a,(psgHatMode)
(1) 3905/    129E : 57                  		ld	d,a
(1) 3906/    129F : E6 03               		and	011b
(1) 3907/    12A1 : FE 03               		cp	011b
(1) 3908/    12A3 : 20 1D               		jr	nz,.normal
(1) 3909/    12A5 : CF                  		rst	8
(1) 3910/    12A6 : 78                  		ld	a,b		; Channel 4?
(1) 3911/    12A7 : FE 03               		cp	3
(1) 3912/    12A9 : 28 13               		jr	z,.silnc_3
(1) 3913/    12AB : FE 04               		cp	4
(1) 3914/    12AD : 20 18               		jr	nz,.do_nfreq
(1) 3915/    12AF : 3A 81 1C            		ld	a,(psgHatMode)
(1) 3916/    12B2 : 57                  		ld	d,a
(1) 3917/    12B3 : E6 03               		and	011b
(1) 3918/    12B5 : CF                  		rst	8
(1) 3919/    12B6 : FE 03               		cp	011b
(1) 3920/    12B8 : 20 30               		jr	nz,.vonly
(1) 3921/    12BA : 1E C0               		ld	e,0C0h
(1) 3922/    12BC : 18 09               		jr	.do_nfreq
(1) 3923/    12BE :                     .silnc_3:
(1) 3924/    12BE : 3E FF               		ld	a,-1
(1) 3925/    12C0 : 18 32               		jr	.vlmuch
(1) 3926/    12C2 :                     .normal:
(1) 3927/    12C2 : 78                  		ld	a,b
(1) 3928/    12C3 : FE 04               		cp	4
(1) 3929/    12C5 : 28 23               		jr	z,.vonly
(1) 3930/    12C7 :                     .do_nfreq:
(1) 3931/    12C7 : FD 6E 1C            		ld	l,(iy+DTL)
(1) 3932/    12CA : FD 66 20            		ld	h,(iy+DTH)
(1) 3933/    12CD :                     
(1) 3934/    12CD :                     	; freq effects go here
(1) 3935/    12CD :                     	; (save e FIRST.)
(1) 3936/    12CD :                     	;	push	de
(1) 3937/    12CD :                     	;	pop	de
(1) 3938/    12CD : 7D                  		ld	a,l		; Grab LSB 4 right bits
(1) 3939/    12CE : E6 0F               		and	00001111b
(1) 3940/    12D0 : B3                  		or	e		; OR with channel set in e
(1) 3941/    12D1 : CF                  		rst	8
(1) 3942/    12D2 : DD 77 00            		ld	(ix),a		; write it
(1) 3943/    12D5 : 7D                  		ld	a,l		; Grab LSB 4 left bits
(1) 3944/    12D6 : 0F                  		rrca
(1) 3945/    12D7 : 0F                  		rrca
(1) 3946/    12D8 : 0F                  		rrca
(1) 3947/    12D9 : 0F                  		rrca
(1) 3948/    12DA : E6 0F               		and	00001111b
(1) 3949/    12DC : 5F                  		ld	e,a
(1) 3950/    12DD : 7C                  		ld	a,h		; Grab MSB bits
(1) 3951/    12DE : CF                  		rst	8
(1) 3952/    12DF : 07                  		rlca
(1) 3953/    12E0 : 07                  		rlca
(1) 3954/    12E1 : 07                  		rlca
(1) 3955/    12E2 : 07                  		rlca
(1) 3956/    12E3 : E6 30               		and	00110000b
(1) 3957/    12E5 : B3                  		or	e
(1) 3958/    12E6 : DD 77 00            		ld	(ix),a
(1) 3959/    12E9 : CF                  		rst	8
(1) 3960/    12EA :                     .vonly:
(1) 3961/    12EA : FD 7E 30            		ld	a,(iy+PVOL)		; c - Level
(1) 3962/    12ED : FD 86 04            		add	a,(iy+LEV)		; Add MASTER volume
(1) 3963/    12F0 : 30 02               		jr	nc,.vlmuch
(1) 3964/    12F2 : 3E FF               		ld	a,-1
(1) 3965/    12F4 :                     .vlmuch:
(1) 3966/    12F4 : CB 3F               		srl	a			; (Level >> 4)
(1) 3967/    12F6 : CB 3F               		srl	a
(1) 3968/    12F8 : CB 3F               		srl	a
(1) 3969/    12FA : CF                  		rst	8
(1) 3970/    12FB : CB 3F               		srl	a
(1) 3971/    12FD : E6 0F               		and	00001111b		; Filter volume value
(1) 3972/    12FF : B1                  		or	c			; and OR with current channel
(1) 3973/    1300 : F6 90               		or	90h			; Set volume-set mode
(1) 3975/    1302 : DD 77 00            		ld	(ix),a			; *** WRITE volume
(1) 3977/    1305 : FD 34 38            		inc	(iy+PTMR)		; Update general timer
(1) 3978/    1308 :                     .noupd:
(1) 3979/    1308 :                     	; ----------------------------
(1) 3980/    1308 : FD 2B               		dec	iy			; next COM to check (backwards)
(1) 3981/    130A : 79                  		ld	a,c
(1) 3982/    130B : CF                  		rst	8
(1) 3983/    130C : D6 20               		sub	a,20h			; next PSG (backwards)
(1) 3984/    130E : 4F                  		ld	c,a
(1) 3985/    130F : 05                  		dec	b
(1) 3986/    1310 : C2 BD 11            		jp	nz,.vloop
(1) 3987/    1313 : C9                  		ret
(1) 3988/    1314 :                     
(1) 3989/    1314 :                     ; ---------------------------------------------
(1) 3990/    1314 :                     ; FM register writes
(1) 3991/    1314 :                     ;
(1) 3992/    1314 :                     ; Input:
(1) 3993/    1314 :                     ; d - ctrl
(1) 3994/    1314 :                     ; e - data
(1) 3995/    1314 :                     ; ---------------------------------------------
(1) 3996/    1314 :                     
(1) 3997/    1314 :                     ; c - KeyID
(1) 3998/    1314 :                     fm_autoreg:
(1) 3999/    1314 : CB 51               		bit	2,c
(1) 4000/    1316 : 20 0B               		jr	nz,fm_send_2
(1) 4001/    1318 :                     
(1) 4002/    1318 :                     ; Channels 1-3 and global registers
(1) 4003/    1318 :                     fm_send_1:
(1) 4004/    1318 : 7A                  		ld	a,d
(1) 4005/    1319 : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 4006/    131C : 00                  		nop
(1) 4007/    131D : 7B                  		ld	a,e
(1) 4008/    131E : 32 01 40            		ld	(Zym_data_1),a
(1) 4009/    1321 : 00                  		nop
(1) 4010/    1322 : C9                  		ret
(1) 4011/    1323 :                     ; Channels 4-6
(1) 4012/    1323 :                     fm_send_2:
(1) 4013/    1323 : 7A                  		ld	a,d
(1) 4014/    1324 : 32 02 40            		ld	(Zym_ctrl_2),a
(1) 4015/    1327 : 00                  		nop
(1) 4016/    1328 : 7B                  		ld	a,e
(1) 4017/    1329 : 32 03 40            		ld	(Zym_data_2),a
(1) 4018/    132C : 00                  		nop
(1) 4019/    132D : C9                  		ret
(1) 4020/    132E :                     
(1) 4021/    132E :                     ; --------------------------------------------------------
(1) 4022/    132E :                     ; brute-force WAVE ON/OFF playback
(1) 4023/    132E :                     ; --------------------------------------------------------
(1) 4024/    132E :                     
(1) 4025/    132E :                     dac_on:
(1) 4026/    132E : 3E 2B               		ld	a,2Bh
(1) 4027/    1330 : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 4028/    1333 : 3E 80               		ld	a,80h
(1) 4029/    1335 : 32 01 40            		ld	(Zym_data_1),a
(1) 4030/    1338 : 3E D9               		ld 	a,zopcExx
(1) 4031/    133A : 32 08 00            		ld	(dac_me),a
(1) 4032/    133D : 3E F5               		ld 	a,zopcPushAf
(1) 4033/    133F : 32 20 00            		ld	(dac_fill),a
(1) 4034/    1342 : C9                  		ret
(1) 4035/    1343 :                     dac_off:
(1) 4036/    1343 : 3E 2B               		ld	a,2Bh
(1) 4037/    1345 : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 4038/    1348 : 3E 00               		ld	a,00h
(1) 4039/    134A : 32 01 40            		ld	(Zym_data_1),a
(1) 4040/    134D : 3E C9               		ld 	a,zopcRet
(1) 4041/    134F : 32 08 00            		ld	(dac_me),a
(1) 4042/    1352 : 3E C9               		ld 	a,zopcRet
(1) 4043/    1354 : 32 20 00            		ld	(dac_fill),a
(1) 4044/    1357 : C9                  		ret
(1) 4045/    1358 :                     
(1) 4046/    1358 :                     ; --------------------------------------------------------
(1) 4047/    1358 :                     ; dac_play
(1) 4048/    1358 :                     ;
(1) 4049/    1358 :                     ; Plays a new sample
(1) 4050/    1358 :                     ;
(1) 4051/    1358 :                     ; NOTE:
(1) 4052/    1358 :                     ; Set wave_Flags and wave_Pitch externally
(1) 4053/    1358 :                     ; getting here.
(1) 4054/    1358 :                     ; --------------------------------------------------------
(1) 4055/    1358 :                     
(1) 4056/    1358 :                     dac_play:
(1) 4057/    1358 : F3                  		di
(1) 4058/    1359 : CD 43 13            		call	dac_off
(1) 4059/    135C : D9                  		exx				; flip exx regs
(1) 4060/    135D : 01 1D 00            		ld	bc,dWaveBuff>>8		; bc - WAVFIFO MSB
(1) 4061/    1360 : ED 5B 95 1C         		ld	de,(wave_Pitch)		; de - Pitch
(1) 4062/    1364 : 21 00 00            		ld	hl,(dWaveBuff&0FFh)<<8	; hl - WAVFIFO LSB pointer (xx.00)
(1) 4063/    1367 : D9                  		exx				; move them back
(1) 4064/    1368 : 2A 8C 1C            		ld	hl,(wave_Start)		; copy Start and length
(1) 4065/    136B : 3A 8E 1C            		ld 	a,(wave_Start+2)
(1) 4066/    136E : 22 84 1C            		ld	(dDacPntr),hl
(1) 4067/    1371 : 32 86 1C            		ld	(dDacPntr+2),a
(1) 4068/    1374 : 2A 8F 1C            		ld	hl,(wave_Len)
(1) 4069/    1377 : 3A 91 1C            		ld 	a,(wave_Len+2)
(1) 4070/    137A : 22 87 1C            		ld	(dDacCntr),hl
(1) 4071/    137D : 32 89 1C            		ld	(dDacCntr+2),a
(1) 4072/    1380 : AF                  		xor	a
(1) 4073/    1381 : 32 83 1C            		ld	(dDacFifoMid),a		; Reset half-way
(1) 4074/    1384 : CD 8C 13            		call	dac_refill
(1) 4075/    1387 : CD 2E 13            		call	dac_on
(1) 4076/    138A : FB                  		ei
(1) 4077/    138B : C9                  		ret
(1) 4078/    138C :                     
(1) 4079/    138C :                     ; --------------------------------------------------------
(1) 4080/    138C :                     
(1) 4081/    138C :                     dac_refill:
(1) 4082/    138C : CF                  		rst	8
(1) 4083/    138D : C5                  		push	bc
(1) 4084/    138E : D5                  		push	de
(1) 4085/    138F : E5                  		push	hl
(1) 4086/    1390 : 3A 97 1C            		ld	a,(wave_Flags)	; Already finished?
(1) 4087/    1393 : FE 07               		cp	111b
(1) 4088/    1395 : D2 4B 14            		jp	nc,.dacfill_end
(1) 4089/    1398 : 3A 89 1C            		ld	a,(dDacCntr+2)	; Last bytes
(1) 4090/    139B : 2A 87 1C            		ld	hl,(dDacCntr)
(1) 4091/    139E : 01 80 00            		ld	bc,80h
(1) 4092/    13A1 : 37                  		scf
(1) 4093/    13A2 : 3F                  		ccf
(1) 4094/    13A3 : ED 42               		sbc	hl,bc
(1) 4095/    13A5 : DE 00               		sbc	a,0
(1) 4096/    13A7 : 32 89 1C            		ld	(dDacCntr+2),a
(1) 4097/    13AA : 22 87 1C            		ld	(dDacCntr),hl
(1) 4098/    13AD : 16 1D               		ld	d,dWaveBuff>>8
(1) 4099/    13AF : B7                  		or	a
(1) 4100/    13B0 : FA DA 13            		jp	m,.dac_over
(1) 4101/    13B3 : 3A 83 1C            		ld	a,(dDacFifoMid)	; Update halfway value
(1) 4102/    13B6 : 5F                  		ld	e,a
(1) 4103/    13B7 : C6 80               		add 	a,80h
(1) 4104/    13B9 : 32 83 1C            		ld	(dDacFifoMid),a
(1) 4105/    13BC : 2A 84 1C            		ld	hl,(dDacPntr)
(1) 4106/    13BF : 3A 86 1C            		ld	a,(dDacPntr+2)
(1) 4107/    13C2 : CD F9 10            		call	transferRom	; *** ROM ACCESS ***
(1) 4108/    13C5 : 2A 84 1C            		ld	hl,(dDacPntr)
(1) 4109/    13C8 : 3A 86 1C            		ld	a,(dDacPntr+2)
(1) 4110/    13CB : 01 80 00            		ld	bc,80h
(1) 4111/    13CE : 09                  		add	hl,bc
(1) 4112/    13CF : CE 00               		adc	a,0
(1) 4113/    13D1 : 22 84 1C            		ld	(dDacPntr),hl
(1) 4114/    13D4 : 32 86 1C            		ld	(dDacPntr+2),a
(1) 4115/    13D7 : C3 4E 14            		jp	.dacfill_ret
(1) 4116/    13DA :                     
(1) 4117/    13DA :                     ; NOTE: This doesn't finish at the exact END point
(1) 4118/    13DA :                     ; but the USER won't notice it.
(1) 4119/    13DA :                     
(1) 4120/    13DA :                     .dac_over:
(1) 4121/    13DA : 16 1D               		ld	d,dWaveBuff>>8
(1) 4122/    13DC : 3A 97 1C            		ld	a,(wave_Flags)	; LOOP enabled?
(1) 4123/    13DF : E6 01               		and	001b
(1) 4124/    13E1 : C2 04 14            		jp	nz,.dacfill_loop
(1) 4125/    13E4 : 7D                  		ld	a,l
(1) 4126/    13E5 : C6 80               		add	a,80h
(1) 4127/    13E7 : 4F                  		ld	c,a
(1) 4128/    13E8 : 06 00               		ld	b,0
(1) 4129/    13EA : C5                  		push	bc
(1) 4130/    13EB : 3A 83 1C            		ld	a,(dDacFifoMid)
(1) 4131/    13EE : 5F                  		ld	e,a
(1) 4132/    13EF : C6 80               		add	a,80h
(1) 4133/    13F1 : 32 83 1C            		ld	(dDacFifoMid),a
(1) 4134/    13F4 : C1                  		pop	bc
(1) 4135/    13F5 : 79                  		ld	a,c
(1) 4136/    13F6 : B0                  		or	b
(1) 4137/    13F7 : 28 52               		jr	z,.dacfill_end
(1) 4138/    13F9 : 2A 84 1C            		ld	hl,(dDacPntr)
(1) 4139/    13FC : 3A 86 1C            		ld	a,(dDacPntr+2)
(1) 4140/    13FF : CD F9 10            		call	transferRom	; *** ROM ACCESS ***
(1) 4141/    1402 : 18 47               		jr	.dacfill_end
(1) 4142/    1404 :                     .dacfill_loop:
(1) 4143/    1404 :                     	; loop sample
(1) 4144/    1404 : C5                  		push	bc
(1) 4145/    1405 : D5                  		push	de
(1) 4146/    1406 : 3A 94 1C            		ld	a,(wave_Loop+2)
(1) 4147/    1409 : 4F                  		ld	c,a
(1) 4148/    140A : ED 5B 92 1C         		ld	de,(wave_Loop)
(1) 4149/    140E : 2A 8C 1C            		ld	hl,(wave_Start)
(1) 4150/    1411 : 3A 8E 1C            		ld 	a,(wave_Start+2)
(1) 4151/    1414 : 81                  		add	a,c
(1) 4152/    1415 : 19                  		add	hl,de
(1) 4153/    1416 : CE 00               		adc	a,0
(1) 4154/    1418 : 22 84 1C            		ld	(dDacPntr),hl
(1) 4155/    141B : 32 86 1C            		ld	(dDacPntr+2),a
(1) 4156/    141E : 2A 8F 1C            		ld	hl,(wave_Len)
(1) 4157/    1421 : 3A 91 1C            		ld 	a,(wave_Len+2)
(1) 4158/    1424 : 91                  		sub	a,c
(1) 4159/    1425 : 37                  		scf
(1) 4160/    1426 : 3F                  		ccf
(1) 4161/    1427 : ED 52               		sbc	hl,de
(1) 4162/    1429 : DE 00               		sbc	a,0
(1) 4163/    142B : 22 87 1C            		ld	(dDacCntr),hl
(1) 4164/    142E : 32 89 1C            		ld	(dDacCntr+2),a
(1) 4165/    1431 : D1                  		pop	de
(1) 4166/    1432 : C1                  		pop	bc
(1) 4167/    1433 : 78                  		ld	a,b
(1) 4168/    1434 : B1                  		or	c
(1) 4169/    1435 : 28 17               		jr	z,.dacfill_ret
(1) 4170/    1437 : 3A 83 1C            		ld	a,(dDacFifoMid)
(1) 4171/    143A : 5F                  		ld	e,a
(1) 4172/    143B : C6 80               		add	a,80h
(1) 4173/    143D : 32 83 1C            		ld	(dDacFifoMid),a
(1) 4174/    1440 : 2A 84 1C            		ld	hl,(dDacPntr)
(1) 4175/    1443 : 3A 86 1C            		ld	a,(dDacPntr+2)
(1) 4176/    1446 : CD F9 10            		call	transferRom	; *** ROM ACCESS ***
(1) 4177/    1449 : 18 03               		jr	.dacfill_ret
(1) 4178/    144B :                     .dacfill_end:
(1) 4179/    144B : CD 43 13            		call	dac_off		; DAC finished
(1) 4180/    144E :                     .dacfill_ret:
(1) 4181/    144E : E1                  		pop	hl
(1) 4182/    144F : D1                  		pop	de
(1) 4183/    1450 : C1                  		pop	bc
(1) 4184/    1451 : C9                  		ret
(1) 4185/    1452 :                     
(1) 4186/    1452 :                     ; ----------------------------------------------------------------
(1) 4187/    1452 :                     ; Two purposes:
(1) 4188/    1452 :                     ;
(1) 4189/    1452 :                     ; Set the BANK to the very last part of memory for the
(1) 4190/    1452 :                     ; transferRom to read from RAM
(1) 4191/    1452 :                     ;
(1) 4192/    1452 :                     ; On 32X this sets the bank out of the ROM-reading areas due
(1) 4193/    1452 :                     ; to a conflict with the PSG
(1) 4194/    1452 :                     ;
(1) 4195/    1452 :                     ; Uses:
(1) 4196/    1452 :                     ; hl,b
(1) 4197/    1452 :                     ; ----------------------------------------------------------------
(1) 4198/    1452 :                     
(1) 4199/    1452 :                     gema_lastbank:
(1) 4200/    1452 : 21 00 60            		ld	hl,6000h
(1) 4201/    1455 : 06 09               		ld	b,9		; 9 bits
(1) 4202/    1457 :                     .write:
(1) 4203/    1457 : 36 01               		ld	(hl),1
(1) 4204/    1459 : 10 FC               		djnz	.write
(1) 4205/    145B : CF                  		rst	8
(1) 4206/    145C : C9                  		ret
(1) 4207/    145D :                     
(1) 4208/    145D :                     ; ====================================================================
(1) 4209/    145D :                     ; ----------------------------------------------------------------
(1) 4210/    145D :                     ; Tables
(1) 4211/    145D :                     ; ----------------------------------------------------------------
(1) 4212/    145D :                     
(1) 4213/    145D : 84 02               fmFreq_List:	dw 644
(1) 4214/    145F : A9 02               		dw 681
(1) 4215/    1461 : D2 02               		dw 722
(1) 4216/    1463 : FD 02               		dw 765
(1) 4217/    1465 : 2A 03               		dw 810
(1) 4218/    1467 : 5A 03               		dw 858
(1) 4219/    1469 : 8E 03               		dw 910
(1) 4220/    146B : C4 03               		dw 964
(1) 4221/    146D : FD 03               		dw 1021
(1) 4222/    146F : 39 04               		dw 1081
(1) 4223/    1471 : 7A 04               		dw 1146
(1) 4224/    1473 : BE 04               		dw 1214
(1) 4225/    1475 :                     psgFreq_List:
(1) 4226/    1475 :                     ; 	dw    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1	; x-0
(1) 4227/    1475 :                     ; 	dw    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1	; x-1
(1) 4228/    1475 :                     ; 	dw    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1	; x-2
(1) 4229/    1475 : FF FF FF FF FF FF   	dw    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,03F8h,03BFh,0389h	; x-3
             147B : FF FF FF FF FF FF 
             1481 : FF FF FF FF FF FF 
             1487 : F8 03 BF 03 89 03 
(1) 4230/    148D : 56 03 26 03 F9 02   	dw 0356h,0326h,02F9h,02CEh,02A5h,0280h,025Ch,023Ah,021Ah,01FBh,01DFh,01C4h	; x-4
             1493 : CE 02 A5 02 80 02 
             1499 : 5C 02 3A 02 1A 02 
             149F : FB 01 DF 01 C4 01 
(1) 4231/    14A5 : AB 01 93 01 7D 01   	dw 01ABh,0193h,017Dh,0167h,0153h,0140h,012Eh,011Dh,010Dh,00FEh,00EFh,00E2h	; x-5
             14AB : 67 01 53 01 40 01 
             14B1 : 2E 01 1D 01 0D 01 
             14B7 : FE 00 EF 00 E2 00 
(1) 4232/    14BD : D6 00 C9 00 BE 00   	dw 00D6h,00C9h,00BEh,00B4h,00A9h,00A0h,0097h,008Fh,0087h,007Fh,0078h,0071h	; x-6
             14C3 : B4 00 A9 00 A0 00 
             14C9 : 97 00 8F 00 87 00 
             14CF : 7F 00 78 00 71 00 
(1) 4233/    14D5 :                     ; 	dw 006Bh,0065h,005Fh,005Ah,0055h,0050h,004Bh,0047h,0043h,0040h,003Ch,0039h	; x-7
(1) 4234/    14D5 :                     ; 	dw 0036h,0033h,0030h,002Dh,002Bh,0028h,0026h,0024h,0022h,0020h,001Fh,001Dh	; x-8 *
(1) 4235/    14D5 :                     ; 	dw 001Bh,001Ah,0018h,0017h,0016h,0015h,0013h,0012h,0011h,0010h,0009h,0008h	; x-9 *
(1) 4236/    14D5 :                     
(1) 4237/    14D5 :                     
(1) 4238/    14D5 :                     ; ----------------------------------------
(1) 4239/    14D5 :                     ; DAC and PWM
(1) 4240/    14D5 :                     ;
(1) 4241/    14D5 :                     ; base C-5 freq: 16000hz
(1) 4242/    14D5 :                     ; ----------------------------------------
(1) 4243/    14D5 :                     wavFreq_List:
(1) 4244/    14D5 :                     	;   C     C#    D     D#    E     F     F#    G     G#    A     A#    B
(1) 4245/    14D5 :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-0
(1) 4246/    14D5 :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-1
(1) 4247/    14D5 :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0036h,003Bh	; x-2
(1) 4248/    14D5 : 3E 00 43 00 46 00   	dw 003Eh,0043h,0046h,0049h,004Eh,0054h,0058h,005Eh,0063h,0068h,0070h,0075h	; x-3
             14DB : 49 00 4E 00 54 00 
             14E1 : 58 00 5E 00 63 00 
             14E7 : 68 00 70 00 75 00 
(1) 4249/    14ED : 85 00 87 00 8C 00   	dw 0085h,0087h,008Ch,009Ah,00A4h,00ADh,00B2h,00C0h,00CCh,00D7h,00E6h,00F0h	; x-4
             14F3 : 9A 00 A4 00 AD 00 
             14F9 : B2 00 C0 00 CC 00 
             14FF : D7 00 E6 00 F0 00 
(1) 4250/    1505 : 00 01 10 01 20 01   	dw 0100h,0110h,0120h,012Eh,0147h,015Ah,016Ah,017Fh,0191h,01ACh,01C2h,01E0h	; x-5
             150B : 2E 01 47 01 5A 01 
             1511 : 6A 01 7F 01 91 01 
             1517 : AC 01 C2 01 E0 01 
(1) 4251/    151D : F8 01 10 02 40 02   	dw 01F8h,0210h,0240h,0260h,0280h,02A0h,02D0h,02F8h,0320h,0350h,0380h,03C0h	; x-6
             1523 : 60 02 80 02 A0 02 
             1529 : D0 02 F8 02 20 03 
             152F : 50 03 80 03 C0 03 
(1) 4252/    1535 :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-7
(1) 4253/    1535 :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-8
(1) 4254/    1535 :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-9
(1) 4255/    1535 :                     
(1) 4256/    1535 :                     ; ----------------------------------------
(1) 4257/    1535 :                     ; SegaCD ONLY
(1) 4258/    1535 :                     ;
(1) 4259/    1535 :                     ; base C-5 freq: 32000hz
(1) 4260/    1535 :                     ; ----------------------------------------
(1) 4261/    1535 :                     wavFreq_CdPcm:
(1) 4262/    1535 :                     	;     C     C#     D      D#     E      F      F#     G      G#     A      A#     B
(1) 4263/    1535 :                     ; 	dw  0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h	; x-0
(1) 4264/    1535 :                     ; 	dw  0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h	; x-1
(1) 4265/    1535 :                     ; 	dw  0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h	; x-2  4000 unchecked
(1) 4266/    1535 : F8 01 14 02 3C 02   	dw  01F8h, 0214h, 023Ch, 0258h, 027Ch, 02A0h, 02C8h, 02F4h, 031Ch, 0348h, 037Ch, 03B0h	; x-3  8000 ok
             153B : 58 02 7C 02 A0 02 
             1541 : C8 02 F4 02 1C 03 
             1547 : 48 03 7C 03 B0 03 
(1) 4267/    154D : F0 03 24 04 68 04   	dw  03F0h, 0424h, 0468h, 04A8h, 04ECh, 0540h, 0590h, 05E4h, 063Ch, 0698h, 0704h, 0760h	; x-4 16000 ok
             1553 : A8 04 EC 04 40 05 
             1559 : 90 05 E4 05 3C 06 
             155F : 98 06 04 07 60 07 
(1) 4268/    1565 : DC 07 48 08 D4 08   	dw  07DCh, 0848h, 08D4h, 0960h, 09F0h, 0A64h, 0B04h, 0BAAh, 0C60h, 0D18h, 0DE4h, 0EB6h	; x-5 32000 ok
             156B : 60 09 F0 09 64 0A 
             1571 : 04 0B AA 0B 60 0C 
             1577 : 18 0D E4 0D B6 0E 
(1) 4269/    157D : B0 0F 74 10 84 11   	dw  0FB0h, 1074h, 1184h, 1280h, 139Ch, 14C8h, 1624h, 174Ch, 18DCh, 1A38h, 1BE0h, 1D94h	; x-6 64000 unstable
             1583 : 80 12 9C 13 C8 14 
             1589 : 24 16 4C 17 DC 18 
             158F : 38 1A E0 1B 94 1D 
(1) 4270/    1595 :                     ; 	dw  1F64h, 20FCh, 2330h, 2524h, 2750h, 29B4h, 2C63h, 2F63h, 31E0h, 347Bh, 377Bh, 3B41h	; x-7 128000 bad
(1) 4271/    1595 :                     ; 	dw  3EE8h, 4206h, 4684h, 4A5Ah, 4EB5h, 5379h, 58E1h, 5DE0h, 63C0h, 68FFh, 6EFFh, 783Ch	; x-8 256000 bad
(1) 4272/    1595 :                     ; 	dw  7FC2h, 83FCh, 8D14h, 9780h,0AA5Dh,0B1F9h,   -1 ,   -1 ,   -1 ,   -1 ,   -1 ,   -1 	; x-9 bad
(1) 4273/    1595 :                     
(1) 4274/    1595 :                     ; ====================================================================
(1) 4275/    1595 :                     ; ----------------------------------------------------------------
(1) 4276/    1595 :                     ; MASTER buffers list
(1) 4277/    1595 :                     ;
(1) 4278/    1595 :                     ; dw track_buffer
(1) 4279/    1595 :                     ; dw channel_list,block_cache,header_cache,track_cache
(1) 4280/    1595 :                     ;
(1) 4281/    1595 :                     ; (track_cache: 1BIT SIZES ONLY, ALIGNED)
(1) 4282/    1595 :                     ; ----------------------------------------------------------------
(1) 4283/    1595 :                     
(1) 4284/    1595 :                     nikona_BuffList:
(1) 4285/    1595 : FB 17 DB 17 5B 17   	dw trkBuff_0,trkBlks_0,trkHdrs_0,trkCach_0
             159B : 00 1F             
(1) 4286/    159D : 3B 18 E3 17 7B 17   	dw trkBuff_1,trkBlks_1,trkHdrs_1,trkCach_1
             15A3 : 20 1F             
(1) 4287/    15A5 : 7B 18 EB 17 9B 17   	dw trkBuff_2,trkBlks_2,trkHdrs_2,trkCach_2
             15AB : 40 1F             
(1) 4288/    15AD : BB 18 F3 17 BB 17   	dw trkBuff_3,trkBlks_3,trkHdrs_3,trkCach_3
             15B3 : 60 1F             
(1) 4289/    15B5 :                     nikona_BuffList_e:
(1) 4290/    15B5 : FF FF               	dw -1	; ENDOFLIST
(1) 4291/    15B7 :                     
(1) 4292/    15B7 :                     ; ====================================================================
(1) 4293/    15B7 :                     ; ----------------------------------------------------------------
(1) 4294/    15B7 :                     ; Buffer section
(1) 4295/    15B7 :                     ; ----------------------------------------------------------------
(1) 4296/    15B7 :                     
(1) 4297/    15B7 : 00 00 00 00 00 00   pcmcom:	db 00h,00h,00h,00h,00h,00h,00h,00h	; 0 - Playback bits: %0000PCOK /Pitchbend/keyCut/keyOff/KeyOn
             15BD : 00 00             
(1) 4298/    15BF : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 8 - Pitch MSB
             15C5 : 00 00             
(1) 4299/    15C7 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 16 - Pitch LSB
             15CD : 00 00             
(1) 4300/    15CF : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 24 - Volume
             15D5 : 00 00             
(1) 4301/    15D7 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 32 - Panning %RRRRLLLL
             15DD : 00 00             
(1) 4302/    15DF : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 40 - LoopEnable bit | 24-bit sample location in Sub-CPU area
             15E5 : 00 00             
(1) 4303/    15E7 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 48
             15ED : 00 00             
(1) 4304/    15EF : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 56
             15F5 : 00 00             
(1) 4305/    15F7 :                     
(1) 4306/    15F7 : 00 00 00 00 00 00   pwmcom:	db 00h,00h,00h,00h,00h,00h,00h,00h	; 0 - Playback bits: %0000PCOK Pitchbend/keyCut/keyOff/KeyOn
             15FD : 00 00             
(1) 4307/    15FF : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 8 - Volume | Pitch MSB
             1605 : 00 00             
(1) 4308/    1607 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 16 - Pitch LSB
             160D : 00 00             
(1) 4309/    160F : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 24 - Flags+MSB bits of sample %SlLRxxxx Stereo/Loop/Left/Right
             1615 : 00 00             
(1) 4310/    1617 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 32 -
             161D : 00 00             
(1) 4311/    161F : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h
             1625 : 00 00             
(1) 4312/    1627 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h
             162D : 00 00             
(1) 4313/    162F :                     
(1) 4314/    162F : 00 00 00 00         psgcom:	db 00h,00h,00h,00h	;  0 - command 1 = key on, 2 = key off, 4 = stop snd
(1) 4315/    1633 : FF FF FF FF         	db -1, -1, -1, -1	;  4 - output level attenuation (%llll.0000, -1 = silent)
(1) 4316/    1637 : 00 00 00 00         	db 00h,00h,00h,00h	;  8 - attack rate (START)
(1) 4317/    163B : 00 00 00 00         	db 00h,00h,00h,00h	; 12 - decay rate
(1) 4318/    163F : 00 00 00 00         	db 00h,00h,00h,00h	; 16 - sustain level attenuation (MAXIMUM)
(1) 4319/    1643 : 00 00 00 00         	db 00h,00h,00h,00h	; 20 - release rate
(1) 4320/    1647 : 00 00 00 00         	db 00h,00h,00h,00h	; 24 - envelope mode 0 = off, 1 = attack, 2 = decay, 3 = sustain
(1) 4321/    164B : 00 00 00 00         	db 00h,00h,00h,00h	; 28 - freq bottom 4 bits
(1) 4322/    164F : 00 00 00 00         	db 00h,00h,00h,00h	; 32 - freq upper 6 bits
(1) 4323/    1653 : 00 00 00 00         	db 00h,00h,00h,00h	; 36 - attack level attenuation
(1) 4324/    1657 : 00 00 00 00         	db 00h,00h,00h,00h	; 40 - flags to indicate hardware should be updated
(1) 4325/    165B : 00 00 00 00         	db 00h,00h,00h,00h	; 44 - timer for sustain
(1) 4326/    165F : 00 00 00 00         	db 00h,00h,00h,00h	; 48 - MAX Volume
(1) 4327/    1663 : 00 00 00 00         	db 00h,00h,00h,00h	; 52 - Vibrato value
(1) 4328/    1667 : 00 00 00 00         	db 00h,00h,00h,00h	; 56 - General timer
(1) 4329/    166B :                     
(1) 4330/    166B :                     ; --------------------------------------------------------
(1) 4331/    166B :                     ; FM instrument storage
(1) 4332/    166B :                     fmcach_1	ds 28h
(1) 4333/    1693 :                     fmcach_2	ds 28h
(1) 4334/    16BB :                     fmcach_3	ds 28h
(1) 4335/    16E3 :                     fmcach_4	ds 28h
(1) 4336/    170B :                     fmcach_5	ds 28h
(1) 4337/    1733 :                     fmcach_6	ds 28h
(1) 4338/    175B :                     
(1) 4339/    175B :                     ; --------------------------------------------------------
(1) 4340/    175B :                     ; * USER customizable section *
(1) 4341/    175B :                     ;
(1) 4342/    175B :                     ; trkCach's MUST BE 00h ALIGNED.
(1) 4343/    175B :                     ; --------------------------------------------------------
(1) 4344/    175B :                     
(1) 4345/    175B :                     trkHdrs_0	ds 8*4			; dw point,rowcntr
(1) 4346/    177B :                     trkHdrs_1	ds 8*4
(1) 4347/    179B :                     trkHdrs_2	ds 8*4
(1) 4348/    17BB :                     trkHdrs_3	ds 8*4
(1) 4349/    17DB :                     trkBlks_0	ds 8
(1) 4350/    17E3 :                     trkBlks_1	ds 8
(1) 4351/    17EB :                     trkBlks_2	ds 8
(1) 4352/    17F3 :                     trkBlks_3	ds 8
(1) 4353/    17FB :                     trkBuff_0	ds trk_ChnIndx+MAX_TRKINDX
(1) 4354/    183B :                     trkBuff_1	ds trk_ChnIndx+MAX_TRKINDX
(1) 4355/    187B :                     trkBuff_2	ds trk_ChnIndx+MAX_TRKINDX
(1) 4356/    18BB :                     trkBuff_3	ds trk_ChnIndx+MAX_TRKINDX
(1) 4357/    18FB :                     
(1) 4358/    18FB :                     ; ====================================================================
(1) 4359/    18FB :                     ; --------------------------------------------------------
(1) 4360/    18FB :                     ; Channel table struct:
(1) 4361/    18FB :                     ; 00  - DIRECT Linked channel from trkChnls
(1) 4362/    18FB :                     ; 02  - 00h-7Fh: Priority level or 80h+ Silence request (chip ID)
(1) 4363/    18FB :                     ; 03  - MASTER Volume for this channel
(1) 4364/    18FB :                     ; 04  - Chip index (YM2612: KEY index)
(1) 4365/    18FB :                     ; 05  - FREE
(1) 4366/    18FB :                     ; 06  - Frequency list index (YM2612: %oooiiiii oct|index)
(1) 4367/    18FB :                     ; 07  - Pitchbend add/sub
(1) 4368/    18FB :                     ; 08  - Current volume: 00-max
(1) 4369/    18FB :                     ; 09  - Stored effect setting
(1) 4370/    18FB :                     ; 0A  - FREE
(1) 4371/    18FB :                     ; 0B  - FREE
(1) 4372/    18FB :                     ; 0C+ - Misc. settings for the current chip
(1) 4373/    18FB :                     ; 10+ - Intrument data
(1) 4374/    18FB :                     ;
(1) 4375/    18FB :                     ; PSG   80h
(1) 4376/    18FB :                     ; PSGN  90h
(1) 4377/    18FB :                     ; FM   0A0h
(1) 4378/    18FB :                     ; FM3  0B0h
(1) 4379/    18FB :                     ; DAC  0C0h
(1) 4380/    18FB :                     ; PCM  0D0h
(1) 4381/    18FB :                     ; PWM  0E0h
(1) 4382/    18FB :                     ; --------------------------------------------------------
(1) 4383/    18FB :                     
(1) 4384/    1A00 :                     		org 1A00h	; <-- MUST BE 00h ALIGNED
(1) 4385/    1A00 : 10 00               tblList:	dw tblPSG-tblList		;  80h
(1) 4386/    1A02 : 5A 80               		dw tblPSGN-tblList|8000h	;  90h *
(1) 4387/    1A04 : 72 00               		dw tblFM-tblList		; 0A0h
(1) 4388/    1A06 : D2 80               		dw tblFM3-tblList|8000h		; 0B0h *
(1) 4389/    1A08 : EA 80               		dw tblFM6-tblList|8000h		; 0C0h *
(1) 4390/    1A0A : 04 01               		dw tblPCM-tblList		; 0D0h
(1) 4391/    1A0C : C6 01               		dw tblPWM-tblList		; 0E0h
(1) 4392/    1A0E : 00 00               		dw 0
(1) 4393/    1A10 : 00 00 00 00 00 00   tblPSG:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             1A16 : 00 00             
(1) 4394/    1A18 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A1E : 00 00             
(1) 4395/    1A20 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A26 : 00 00             
(1) 4396/    1A28 : 00 00 00 00 01 00   		db 00h,00h,00h,00h,01h,00h,00h,00h	; Channel 2
             1A2E : 00 00             
(1) 4397/    1A30 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A36 : 00 00             
(1) 4398/    1A38 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A3E : 00 00             
(1) 4399/    1A40 : 00 00 00 00 02 00   		db 00h,00h,00h,00h,02h,00h,00h,00h	; Channel 3
             1A46 : 00 00             
(1) 4400/    1A48 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A4E : 00 00             
(1) 4401/    1A50 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A56 : 00 00             
(1) 4402/    1A58 : FF FF               		dw -1	; end-of-list
(1) 4403/    1A5A : 00 00 00 00 03 00   tblPSGN:	db 00h,00h,00h,00h,03h,00h,00h,03h	; Noise
             1A60 : 00 03             
(1) 4404/    1A62 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A68 : 00 00             
(1) 4405/    1A6A : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A70 : 00 00             
(1) 4406/    1A72 : 00 00 00 00 00 00   tblFM:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             1A78 : 00 00             
(1) 4407/    1A7A : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A80 : 00 00             
(1) 4408/    1A82 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A88 : 00 00             
(1) 4409/    1A8A : 00 00 00 00 01 00   		db 00h,00h,00h,00h,01h,00h,00h,00h	; Channel 2
             1A90 : 00 00             
(1) 4410/    1A92 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A98 : 00 00             
(1) 4411/    1A9A : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1AA0 : 00 00             
(1) 4412/    1AA2 : 00 00 00 00 04 00   		db 00h,00h,00h,00h,04h,00h,00h,00h	; Channel 4 <--
             1AA8 : 00 00             
(1) 4413/    1AAA : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1AB0 : 00 00             
(1) 4414/    1AB2 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1AB8 : 00 00             
(1) 4415/    1ABA : 00 00 00 00 05 00   		db 00h,00h,00h,00h,05h,00h,00h,00h	; Channel 5
             1AC0 : 00 00             
(1) 4416/    1AC2 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1AC8 : 00 00             
(1) 4417/    1ACA : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1AD0 : 00 00             
(1) 4418/    1AD2 : 00 00 00 00 02 00   tblFM3:		db 00h,00h,00h,00h,02h,00h,00h,00h	; Channel 3 <--
             1AD8 : 00 00             
(1) 4419/    1ADA : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1AE0 : 00 00             
(1) 4420/    1AE2 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1AE8 : 00 00             
(1) 4421/    1AEA : 00 00 00 00 06 00   tblFM6:		db 00h,00h,00h,00h,06h,00h,00h,00h	; Channel 6 <--
             1AF0 : 00 00             
(1) 4422/    1AF2 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1AF8 : 00 00             
(1) 4423/    1AFA : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B00 : 00 00             
(1) 4424/    1B02 : FF FF               		dw -1	; end-of-list
(1) 4425/    1B04 : 00 00 00 00 00 00   tblPCM:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             1B0A : 00 00             
(1) 4426/    1B0C : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B12 : 00 00             
(1) 4427/    1B14 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B1A : 00 00             
(1) 4428/    1B1C : 00 00 00 00 01 00   		db 00h,00h,00h,00h,01h,00h,00h,00h	; Channel 2
             1B22 : 00 00             
(1) 4429/    1B24 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B2A : 00 00             
(1) 4430/    1B2C : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B32 : 00 00             
(1) 4431/    1B34 : 00 00 00 00 02 00   		db 00h,00h,00h,00h,02h,00h,00h,00h	; Channel 3
             1B3A : 00 00             
(1) 4432/    1B3C : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B42 : 00 00             
(1) 4433/    1B44 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B4A : 00 00             
(1) 4434/    1B4C : 00 00 00 00 03 00   		db 00h,00h,00h,00h,03h,00h,00h,00h	; Channel 4
             1B52 : 00 00             
(1) 4435/    1B54 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B5A : 00 00             
(1) 4436/    1B5C : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B62 : 00 00             
(1) 4437/    1B64 : 00 00 00 00 04 00   		db 00h,00h,00h,00h,04h,00h,00h,00h	; Channel 5
             1B6A : 00 00             
(1) 4438/    1B6C : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B72 : 00 00             
(1) 4439/    1B74 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B7A : 00 00             
(1) 4440/    1B7C : 00 00 00 00 05 00   		db 00h,00h,00h,00h,05h,00h,00h,00h	; Channel 6
             1B82 : 00 00             
(1) 4441/    1B84 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B8A : 00 00             
(1) 4442/    1B8C : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B92 : 00 00             
(1) 4443/    1B94 : 00 00 00 00 06 00   		db 00h,00h,00h,00h,06h,00h,00h,00h	; Channel 7
             1B9A : 00 00             
(1) 4444/    1B9C : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BA2 : 00 00             
(1) 4445/    1BA4 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BAA : 00 00             
(1) 4446/    1BAC : 00 00 00 00 07 00   		db 00h,00h,00h,00h,07h,00h,00h,00h	; Channel 7
             1BB2 : 00 00             
(1) 4447/    1BB4 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BBA : 00 00             
(1) 4448/    1BBC : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BC2 : 00 00             
(1) 4449/    1BC4 : FF FF               		dw -1	; end-of-list
(1) 4450/    1BC6 : 00 00 00 00 00 00   tblPWM:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             1BCC : 00 00             
(1) 4451/    1BCE : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BD4 : 00 00             
(1) 4452/    1BD6 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BDC : 00 00             
(1) 4453/    1BDE : 00 00 00 00 01 00   		db 00h,00h,00h,00h,01h,00h,00h,00h	; Channel 2
             1BE4 : 00 00             
(1) 4454/    1BE6 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BEC : 00 00             
(1) 4455/    1BEE : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BF4 : 00 00             
(1) 4456/    1BF6 : 00 00 00 00 02 00   		db 00h,00h,00h,00h,02h,00h,00h,00h	; Channel 3
             1BFC : 00 00             
(1) 4457/    1BFE : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C04 : 00 00             
(1) 4458/    1C06 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C0C : 00 00             
(1) 4459/    1C0E : 00 00 00 00 03 00   		db 00h,00h,00h,00h,03h,00h,00h,00h	; Channel 4
             1C14 : 00 00             
(1) 4460/    1C16 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C1C : 00 00             
(1) 4461/    1C1E : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C24 : 00 00             
(1) 4462/    1C26 : 00 00 00 00 04 00   		db 00h,00h,00h,00h,04h,00h,00h,00h	; Channel 5
             1C2C : 00 00             
(1) 4463/    1C2E : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C34 : 00 00             
(1) 4464/    1C36 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C3C : 00 00             
(1) 4465/    1C3E : 00 00 00 00 05 00   		db 00h,00h,00h,00h,05h,00h,00h,00h	; Channel 6
             1C44 : 00 00             
(1) 4466/    1C46 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C4C : 00 00             
(1) 4467/    1C4E : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C54 : 00 00             
(1) 4468/    1C56 : 00 00 00 00 06 00   		db 00h,00h,00h,00h,06h,00h,00h,00h	; Channel 7
             1C5C : 00 00             
(1) 4469/    1C5E : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C64 : 00 00             
(1) 4470/    1C66 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C6C : 00 00             
(1) 4471/    1C6E : FF FF               		dw -1	; end-of-list
(1) 4472/    1C70 :                     
(1) 4473/    1C70 :                     ; ----------------------------------------------------------------
(1) 4474/    1C70 :                     
(1) 4475/    1C70 : 6B 16               fmcach_list:	dw fmcach_1
(1) 4476/    1C72 : 93 16               		dw fmcach_2
(1) 4477/    1C74 : BB 16               		dw fmcach_3
(1) 4478/    1C76 : 00 00               		dw 0		; <-- skipped
(1) 4479/    1C78 : E3 16               		dw fmcach_4
(1) 4480/    1C7A : 0B 17               		dw fmcach_5
(1) 4481/    1C7C : 33 17               		dw fmcach_6
(1) 4482/    1C7E :                     
(1) 4483/    1C7E :                     ; ----------------------------------------------------------------
(1) 4484/    1C7E :                     ; Variables to fill this space
(1) 4485/    1C7E : 00                  tickSpSet	db 0		; **
(1) 4486/    1C7F : 00                  tickFlag	db 0		; Tick flag from VBlank
(1) 4487/    1C80 : 00                  tickCnt		db 0		; ** Tick counter (PUT THIS AFTER tickFlag)
(1) 4488/    1C81 : 00                  psgHatMode	db 0		; Current PSGN mode
(1) 4489/    1C82 : 00                  fmSpecial	db 0		; copy of FM3 enable bit
(1) 4490/    1C83 : 00                  dDacFifoMid	db 0		; WAVE play halfway refill flag (00h/80h)
(1) 4491/    1C84 : 00 00 00            dDacPntr	db 0,0,0	; WAVE play current ROM position
(1) 4492/    1C87 : 00 00 00            dDacCntr	db 0,0,0	; WAVE play length counter
(1) 4493/    1C8A : 00                  marsUpd		db 0		; Flag to request a PWM transfer
(1) 4494/    1C8B : 00                  mcdUpd		db 0		; Flag to request a PCM transfer
(1) 4495/    1C8C : 00 00               wave_Start	dw 0		; START: 68k 24-bit pointer
(1) 4496/    1C8E : 00                  		db 0
(1) 4497/    1C8F : 00 00               wave_Len	dw 0		; LENGTH 24-bit
(1) 4498/    1C91 : 00                  		db 0
(1) 4499/    1C92 : 00 00               wave_Loop	dw 0		; LOOP POINT 24-bit
(1) 4500/    1C94 : 00                  		db 0
(1) 4501/    1C95 : 00 01               wave_Pitch	dw 0100h	; 01.00h
(1) 4502/    1C97 : 00                  wave_Flags	db 0		; WAVE playback flags (%10x: 1 loop / 0 no loop)
(1) 4503/    1C98 : 00                  currTickBits	db 0		; Current Tick/Subbeat flags (000000BTb B-beat, T-tick)
(1) 4504/    1C99 : 00                  x68ksrclsb	db 0		; transferRom temporal LSB
(1) 4505/    1C9A : 00                  x68ksrcmid	db 0		; transferRom temporal MID
(1) 4506/    1C9B : 00 00               sbeatAcc	dw 0		; Accumulates on each tick to trigger the sub beats
(1) 4507/    1C9D : D6 00               sbeatPtck	dw 214		; Default global subbeats (this-32 for PAL) 214=125
(1) 4508/    1C9F :                     headerOut	ds 00Eh		; Temporal storage for 68k pointers
(1) 4509/    1CAD :                     headerOut_e	ds 2		; <-- reverse readpoint
(1) 4510/    1CAF :                     trkInfoCach	;ds 4
(1) 4511/    1CAF :                     sampleHead	;ds 006h
(1) 4512/    1CAF :                     instListOut	ds 8
(1) 4513/    1CB7 :                     
(1) 4514/    1CB7 :                     ; ====================================================================
(1) 4515/    1CB7 :                     ; ----------------------------------------------------------------
(1) 4516/    1CB7 :                     ; Special aligned buffers
(1) 4517/    1CB7 :                     ;
(1) 4518/    1CB7 :                     ; Located at 1D00h
(1) 4519/    1CB7 :                     ; ----------------------------------------------------------------
(1) 4520/    1CB7 :                     
(1) 4521/    1D00 :                     		org 1D00h
(1) 4522/    1D00 :                     dWaveBuff	ds 100h		; WAVE data buffer: 100h bytes, updates every 80h
(1) 4523/    1E00 :                     trkChnls	ds 8*MAX_TRKCHN
(1) 4524/    1F00 :                     trkCach_0	ds MAX_RCACH
(1) 4525/    1F20 :                     trkCach_1	ds MAX_RCACH
(1) 4526/    1F40 :                     trkCach_2	ds MAX_RCACH
(1) 4527/    1F60 :                     trkCach_3	ds MAX_RCACH
(1) 4528/    1F80 :                     
(1) 4529/    1F80 :                     ; --------------------------------------------------------
(1) 4530/    1F80 :                     
(1) 4531/FFFFFFFFFFFF3FCC :                     		dephase
(1) 4532/FFFFFFFFFFFF3FCC :                     		cpu 68000		; [AS] Return to 68k
(1) 4533/FFFFFFFFFFFF3FCC :                     		padding off		; [AS] NO padding
(1) 4534/FFFFFFFFFFFF3FCC :                     		align 2
(1) 4535/FFFFFFFFFFFF3FCE :                     
     145/FFFFFFFFFFFF3FCE :                     Z80_CODE_END:
     146/    39CE :                     		dephase
     147/    39CE :                     
     148/    39CE :                     ; ---------------------------------------------
     149/    39CE :                     ; SEGA PICO
     150/    39CE :                     ;
     151/    39CE :                     ; This recycles the MD's routines.
     152/    39CE :                     ; ---------------------------------------------
     174/    39CE :                     
     175/    39CE :                     ; ====================================================================
     176/    39CE :                     ; --------------------------------------------------------
     177/    39CE :                     ; SYSTEM routines and MODE switching code
     178/    39CE :                     ;
     179/    39CE :                     ; MD and PICO: Normal ROM locations
     180/    39CE :                     ; CD/32X/CD32X: Loaded into RAM, This includes cartridge
     181/    39CE :                     ;               to prevent bus-conflict with the SH2's
     182/    39CE :                     ;               ROM area
     183/    39CE :                     ; --------------------------------------------------------
     184/    39CE :                     
     186/    39CE :                     Md_SysCode:
     187/FFFFFFFFFFFF0000 :                     		phase RAM_SystemCode
     189/FFFFFFFFFFFF0000 :                     ; ---------------------------------------------
     190/FFFFFFFFFFFF0000 :                     
     191/FFFFFFFFFFFF0000 :                     		include	"sound/driver/gema.asm"
(1)    1/FFFFFFFFFFFF0000 :                     ; ===========================================================================
(1)    2/FFFFFFFFFFFF0000 :                     ; -------------------------------------------------------------------
(1)    3/FFFFFFFFFFFF0000 :                     ; GEMA/Nikona Sound Driver v1.0
(1)    4/FFFFFFFFFFFF0000 :                     ; by GenesisFan64 2023-2024
(1)    5/FFFFFFFFFFFF0000 :                     ;
(1)    6/FFFFFFFFFFFF0000 :                     ; Features:
(1)    7/FFFFFFFFFFFF0000 :                     ; - Support for SEGA CD's PCM channels:
(1)    8/FFFFFFFFFFFF0000 :                     ;   | All 8 channels with streaming support
(1)    9/FFFFFFFFFFFF0000 :                     ;   | for larger samples.
(1)   10/FFFFFFFFFFFF0000 :                     ; - Support for 32X's PWM:
(1)   11/FFFFFFFFFFFF0000 :                     ;   | 7 pseudo-channels in either MONO
(1)   12/FFFFFFFFFFFF0000 :                     ;   | or STEREO.
(1)   13/FFFFFFFFFFFF0000 :                     ;
(1)   14/FFFFFFFFFFFF0000 :                     ; - DMA ROM protection
(1)   15/FFFFFFFFFFFF0000 :                     ;   | This keeps DAC in a decent quality while
(1)   16/FFFFFFFFFFFF0000 :                     ;   | doing any DMA jobs in the 68k side.
(1)   17/FFFFFFFFFFFF0000 :                     ; - DAC Playback at 16000hz
(1)   18/FFFFFFFFFFFF0000 :                     ; - FM special mode with custom frequencies
(1)   19/FFFFFFFFFFFF0000 :                     ; - Autodetection for the PSG's Tone3 mode
(1)   20/FFFFFFFFFFFF0000 :                     ;
(1)   21/FFFFFFFFFFFF0000 :                     ; Notes:
(1)   22/FFFFFFFFFFFF0000 :                     ; This sound driver uses RAM area $FFFF00-$FFFFFF,
(1)   23/FFFFFFFFFFFF0000 :                     ; reserved in case I'll make a 68k version of this driver
(1)   24/FFFFFFFFFFFF0000 :                     ; just for the Sega PICO
(1)   25/FFFFFFFFFFFF0000 :                     ; Currently the Z80 writes a flag directly for a
(1)   26/FFFFFFFFFFFF0000 :                     ; workaround to bypass a data-reading hardware
(1)   27/FFFFFFFFFFFF0000 :                     ; limitation. (see Sound_Update)
(1)   28/FFFFFFFFFFFF0000 :                     ;
(1)   29/FFFFFFFFFFFF0000 :                     ; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣴⣶⡿⠿⠿⠿⣶⣦⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀
(1)   30/FFFFFFFFFFFF0000 :                     ; ⠀⠀⠀⠀⠀⠀⢀⣠⣶⢟⣿⠟⠁⢰⢋⣽⡆⠈⠙⣿⡿⣶⣄⡀⠀⠀⠀⠀⠀⠀
(1)   31/FFFFFFFFFFFF0000 :                     ; ⠀⠀⠀⠀⣠⣴⠟⠋⢠⣾⠋⠀⣀⠘⠿⠿⠃⣀⠀⠈⣿⡄⠙⠻⣦⣄⠀⠀⠀⠀
(1)   32/FFFFFFFFFFFF0000 :                     ; ⠀⢀⣴⡿⠋⠁⠀⢀⣼⠏⠺⠛⠛⠻⠂⠐⠟⠛⠛⠗⠘⣷⡀⠀⠈⠙⢿⣦⡀⠀
(1)   33/FFFFFFFFFFFF0000 :                     ; ⣴⡟⢁⣀⣠⣤⡾⢿⡟⠀⠀⠀⠘⢷⠾⠷⡾⠃⠀⠀⠀⢻⡿⢷⣤⣄⣀⡈⢻⣦
(1)   34/FFFFFFFFFFFF0000 :                     ; ⠙⠛⠛⠋⠉⠁⠀⢸⡇⠀⠀⢠⣄⠀⠀⠀⠀⣠⡄⠀⠀⢸⡇⠀⠈⠉⠙⠛⠛⠋
(1)   35/FFFFFFFFFFFF0000 :                     ; ⠀⠀⠀⠀⠀⠀⠀⢸⡇⢾⣦⣀⣹⡧⠀⠀⢼⣏⣀⣴⡷⢸⡇⠀⠀⠀⠀⠀⠀⠀
(1)   36/FFFFFFFFFFFF0000 :                     ; ⠀⠀⠀⠀⠀⠀⠀⠸⣧⡀⠈⠛⠛⠁⠀⠀⠈⠛⠛⠁⢀⣼⠇⠀⠀⠀⠀⠀⠀⠀
(1)   37/FFFFFFFFFFFF0000 :                     ; ⠀⠀⠀⠀⠀⠀⠀⢀⣘⣿⣶⣤⣀⣀⣀⣀⣀⣀⣤⣶⣿⣃⠀⠀⠀⠀⠀⠀⠀⠀
(1)   38/FFFFFFFFFFFF0000 :                     ; ⠀⠀⠀⠀⠀⣠⡶⠟⠋⢉⣀⣽⠿⠉⠉⠉⠹⢿⣍⣈⠉⠛⠷⣦⡀⠀⠀⠀⠀⠀
(1)   39/FFFFFFFFFFFF0000 :                     ; ⠀⠀⠀⠀⢾⣯⣤⣴⡾⠟⠋⠁⠀⠀⠀⠀⠀⠀⠉⠛⠷⣶⣤⣬⣿⠀⠀⠀⠀⠀
(1)   40/FFFFFFFFFFFF0000 :                     ; ⠀⠀⠀⠀⠀⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠁⠀⠀⠀⠀⠀
(1)   41/FFFFFFFFFFFF0000 :                     ; -------------------------------------------------------------------
(1)   42/FFFFFFFFFFFF0000 :                     
(1)   43/FFFFFFFFFFFF0000 :                     ; ====================================================================
(1)   44/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)   45/FFFFFFFFFFFF0000 :                     ; Macros
(1)   46/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)   47/FFFFFFFFFFFF0000 :                     
(1)   48/FFFFFFFFFFFF0000 :                     ; Shared for all DAC, PCM, PWM
(1)   49/FFFFFFFFFFFF0000 :                     ; FOR WAV SAMPLES, OFFSET STARTS AT $2C
(1)   50/FFFFFFFFFFFF0000 :                     gSmplData macro labl,file,loop
(1)   51/FFFFFFFFFFFF0000 :                     labl	label *
(1)   52/FFFFFFFFFFFF0000 :                     	dc.b ((labl_e-labl_s)&$FF),(((labl_e-labl_s)>>8)&$FF),(((labl_e-labl_s)>>16)&$FF)
(1)   53/FFFFFFFFFFFF0000 :                     	dc.b ((loop)&$FF),(((loop)>>8)&$FF),(((loop)>>16)&$FF)
(1)   54/FFFFFFFFFFFF0000 :                     labl_s:
(1)   55/FFFFFFFFFFFF0000 :                     	binclude file,$2C
(1)   56/FFFFFFFFFFFF0000 :                     labl_e:
(1)   57/FFFFFFFFFFFF0000 :                     	endm
(1)   58/FFFFFFFFFFFF0000 :                     
(1)   59/FFFFFFFFFFFF0000 :                     ; ; Failsafe version:
(1)   60/FFFFFFFFFFFF0000 :                     ; gSmpHead macro len,loop
(1)   61/FFFFFFFFFFFF0000 :                     ; 	dc.b ((len)&$FF),(((len)>>8)&$FF),(((len)>>16)&$FF)	; length
(1)   62/FFFFFFFFFFFF0000 :                     ; 	dc.b ((loop)&$FF),(((loop)>>8)&$FF),(((loop)>>16)&$FF)
(1)   63/FFFFFFFFFFFF0000 :                     ; 	endm
(1)   64/FFFFFFFFFFFF0000 :                     
(1)   65/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)   66/FFFFFFFFFFFF0000 :                     ; Variables
(1)   67/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)   68/FFFFFFFFFFFF0000 :                     
(1)   69/FFFFFFFFFFFF0000 :                     ; z80_cpu	equ $A00000		; Z80 CPU area, size: $2000
(1)   70/FFFFFFFFFFFF0000 :                     ; z80_bus 	equ $A11100		; only read bit 0 (bit 8 as WORD)
(1)   71/FFFFFFFFFFFF0000 :                     ; z80_reset	equ $A11200		; WRITE only: $0000 reset/$0100 cancel
(1)   72/FFFFFFFFFFFF0000 :                     
(1)   73/FFFFFFFFFFFF0000 :                     ; Z80-area points:
(1)   74/FFFFFFFFFFFF0000 : =$40                 zDrvFifo	equ commZfifo		; FIFO command storage
(1)   75/FFFFFFFFFFFF0000 : =$2E                 zDrvFWrt	equ commZWrite		; FIFO command index
(1)   76/FFFFFFFFFFFF0000 : =$2F                 zDrvRomBlk	equ commZRomBlk		; ROM block flag
(1)   77/FFFFFFFFFFFF0000 : =$37                 zDrvMarsBlk	equ marsBlock		; Flag to disable 32X's PWM
(1)   78/FFFFFFFFFFFF0000 : =$36                 zDrvMcdBlk	equ mcdBlock		; Flag to disable SegaCD's PCM
(1)   79/FFFFFFFFFFFF0000 : =$35                 zDrvRamSrc	equ cdRamSrcB		; RAM-read source+dest pointers
(1)   80/FFFFFFFFFFFF0000 : =$30                 zDrvRamLen	equ cdRamLen		; RAM-read length and flag
(1)   81/FFFFFFFFFFFF0000 :                     
(1)   82/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)   83/FFFFFFFFFFFF0000 :                     ; Labels
(1)   84/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)   85/FFFFFFFFFFFF0000 :                     
(1)   86/FFFFFFFFFFFF0000 : =$FFFFFF00           RAM_ZCdFlag_D	equ RAM_ZSndBuff	; transferRom flag
(1)   87/FFFFFFFFFFFF0000 :                     
(1)   88/FFFFFFFFFFFF0000 :                     ; ====================================================================
(1)   89/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)   90/FFFFFFFFFFFF0000 :                     ; Initialize Sound
(1)   91/FFFFFFFFFFFF0000 :                     ;
(1)   92/FFFFFFFFFFFF0000 :                     ; Uses:
(1)   93/FFFFFFFFFFFF0000 :                     ; a0-a1,d0-d1
(1)   94/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)   95/FFFFFFFFFFFF0000 :                     
(1)   96/FFFFFFFFFFFF0000 :                     ; 		align $80
(1)   97/FFFFFFFFFFFF0000 :                     Sound_Init:
(1)   98/FFFFFFFFFFFF0000 : 007C 0700           		ori.w	#$0700,sr
(1)  102/FFFFFFFFFFFF0004 : 33FC 0100 00A1      		move.w	#$0100,(z80_bus).l		; Get Z80 bus
         FFFFFFFFFFFF000A : 1100             
(1)  103/FFFFFFFFFFFF000C : 33FC 0100 00A1      		move.w	#$0100,(z80_reset).l		; Z80 reset
         FFFFFFFFFFFF0012 : 1200             
(1)  104/FFFFFFFFFFFF0014 :                     .wait:
(1)  105/FFFFFFFFFFFF0014 : 0839 0000 00A1      		btst	#0,(z80_bus).l
         FFFFFFFFFFFF001A : 1100             
(1)  106/FFFFFFFFFFFF001C : 66F6                		bne.s	.wait
(1)  107/FFFFFFFFFFFF001E : 41F9 00A0 0000      		lea	(z80_cpu).l,a0			; Clean entire Z80 FIRST.
(1)  108/FFFFFFFFFFFF0024 : 303C 1FFF           		move.w	#$1FFF,d0
(1)  109/FFFFFFFFFFFF0028 : 7200                		moveq	#0,d1
(1)  110/FFFFFFFFFFFF002A :                     .cleanup:
(1)  111/FFFFFFFFFFFF002A : 10C1                		move.b	d1,(a0)+
(1)  112/FFFFFFFFFFFF002C : 51C8 FFFC           		dbf	d0,.cleanup
(1)  113/FFFFFFFFFFFF0030 : 41F9 FFFF 204C      		lea	(Z80_CODE).l,a0			; a0 - Z80 code (on $880000)
(1)  114/FFFFFFFFFFFF0036 : 43F9 00A0 0000      		lea	(z80_cpu).l,a1			; a1 - Z80 CPU area
(1)  115/FFFFFFFFFFFF003C : 303C 1F81           		move.w	#(Z80_CODE_END-Z80_CODE)-1,d0	; d0 - Size
(1)  116/FFFFFFFFFFFF0040 :                     
(1)  117/FFFFFFFFFFFF0040 :                     .copy:
(1)  118/FFFFFFFFFFFF0040 : 12D8                		move.b	(a0)+,(a1)+
(1)  119/FFFFFFFFFFFF0042 : 51C8 FFFC           		dbf	d0,.copy
(1)  120/FFFFFFFFFFFF0046 : 33FC 0000 00A1      		move.w	#0,(z80_reset).l		; Reset cancel
         FFFFFFFFFFFF004C : 1200             
(1)  121/FFFFFFFFFFFF004E : 4238 FF00           		clr.b	(RAM_ZCdFlag_D).w		; Reset Z80 transferRom flag
(1)  122/FFFFFFFFFFFF0052 : 1039 00A1 0001      		move.b	(sys_io).l,d0			;
(1)  123/FFFFFFFFFFFF0058 : 0800 0006           		btst	#6,d0
(1)  124/FFFFFFFFFFFF005C : 6708                		beq.s	.not_pal
(1)  125/FFFFFFFFFFFF005E : 13FC 0001 00A0      		move.b	#1,(z80_cpu+palMode).l
         FFFFFFFFFFFF0064 : 003E             
(1)  126/FFFFFFFFFFFF0066 :                     .not_pal:
(1)  127/FFFFFFFFFFFF0066 : 4E71                		nop
(1)  128/FFFFFFFFFFFF0068 : 4E71                		nop
(1)  129/FFFFFFFFFFFF006A : 33FC 0100 00A1      		move.w	#$100,(z80_reset).l
         FFFFFFFFFFFF0070 : 1200             
(1)  130/FFFFFFFFFFFF0072 : 33FC 0000 00A1      		move.w	#0,(z80_bus).l			; Start Z80
         FFFFFFFFFFFF0078 : 1100             
(1)  132/FFFFFFFFFFFF007A : 203C 0021 9AD4      		move.l	#Gema_MasterList,d0
(1)  133/FFFFFFFFFFFF0080 : 6000 0162           		bra	gemaSetMasterList
(1)  134/FFFFFFFFFFFF0084 :                     
(1)  135/FFFFFFFFFFFF0084 :                     ; ----------------------------------------------------------------
(1)  136/FFFFFFFFFFFF0084 :                     ; Sound_Update
(1)  137/FFFFFFFFFFFF0084 :                     ;
(1)  138/FFFFFFFFFFFF0084 :                     ; Call this during DISPLAY or call it during a VBlank wait-loop
(1)  139/FFFFFFFFFFFF0084 :                     ; to communicate with the Z80
(1)  140/FFFFFFFFFFFF0084 :                     ;
(1)  141/FFFFFFFFFFFF0084 :                     ; SegaCD/CD32X:
(1)  142/FFFFFFFFFFFF0084 :                     ; This checks if the Z80 wants to read from RAM (as it can't
(1)  143/FFFFFFFFFFFF0084 :                     ; see it) then this CPU manually writes the RAM bytes from
(1)  144/FFFFFFFFFFFF0084 :                     ; here to the Z80's RAM
(1)  145/FFFFFFFFFFFF0084 :                     ; THIS IS REQUIRED for the tracks and instruments stored
(1)  146/FFFFFFFFFFFF0084 :                     ; on RAM in case you are doing ASIC-Stamps.
(1)  147/FFFFFFFFFFFF0084 :                     ;
(1)  148/FFFFFFFFFFFF0084 :                     ; DAC samples are safe to read from WORD-RAM
(1)  149/FFFFFFFFFFFF0084 :                     ; (again: if NOT using Stamps)
(1)  150/FFFFFFFFFFFF0084 :                     ; but careful when loading new data, and make sure MAIN-CPU
(1)  151/FFFFFFFFFFFF0084 :                     ; has the permission to read the data.
(1)  152/FFFFFFFFFFFF0084 :                     ;
(1)  153/FFFFFFFFFFFF0084 :                     ; Sega Pico:
(1)  154/FFFFFFFFFFFF0084 :                     ; This will be the entire sound driver rewritten from Z80 to 68k,
(1)  155/FFFFFFFFFFFF0084 :                     ; but this will be done in the future.
(1)  156/FFFFFFFFFFFF0084 :                     ;
(1)  157/FFFFFFFFFFFF0084 :                     ; Uses:
(1)  158/FFFFFFFFFFFF0084 :                     ; d5-d7,a4-a6
(1)  159/FFFFFFFFFFFF0084 :                     ; ----------------------------------------------------------------
(1)  160/FFFFFFFFFFFF0084 :                     
(1)  161/FFFFFFFFFFFF0084 :                     Sound_Update:
(1)  165/FFFFFFFFFFFF0084 :                     	; ------------------------------------------------
(1)  166/FFFFFFFFFFFF0084 :                     	; If transferRom wants to read from 68k RAM
(1)  167/FFFFFFFFFFFF0084 : 4A38 FF00           		tst.b	(RAM_ZCdFlag_D).w	; *Z80 WRITES TO RAM*
(1)  168/FFFFFFFFFFFF0088 : 6744                		beq.s	.no_task
(1)  169/FFFFFFFFFFFF008A : 4238 FF00           		clr.b	(RAM_ZCdFlag_D).w
(1)  170/FFFFFFFFFFFF008E : 7E00                		moveq	#0,d7
(1)  171/FFFFFFFFFFFF0090 : 613E                		bsr	sndLockZ80
(1)  172/FFFFFFFFFFFF0092 : 1E39 00A0 0030      		move.b	(z80_cpu+zDrvRamLen).l,d7
(1)  173/FFFFFFFFFFFF0098 : 6732                		beq.s	.no_size
(1)  174/FFFFFFFFFFFF009A : 5347                		subq.w	#1,d7
(1)  175/FFFFFFFFFFFF009C : 4DF9 00A0 0036      		lea	(z80_cpu+(zDrvRamSrc+1)),a6
(1)  176/FFFFFFFFFFFF00A2 : 4BF9 00A0 0000      		lea	(z80_cpu),a5
(1)  177/FFFFFFFFFFFF00A8 : 1C26                		move.b	-(a6),d6		; d6 - Source
(1)  178/FFFFFFFFFFFF00AA : 4846                		swap	d6
(1)  179/FFFFFFFFFFFF00AC : 1C26                		move.b	-(a6),d6
(1)  180/FFFFFFFFFFFF00AE : E14E                		lsl.w	#8,d6
(1)  181/FFFFFFFFFFFF00B0 : 1C26                		move.b	-(a6),d6
(1)  182/FFFFFFFFFFFF00B2 : 7A00                		moveq	#0,d5
(1)  183/FFFFFFFFFFFF00B4 : 1A26                		move.b	-(a6),d5		; d5 - Dest
(1)  184/FFFFFFFFFFFF00B6 : E14D                		lsl.w	#8,d5
(1)  185/FFFFFFFFFFFF00B8 : 1A26                		move.b	-(a6),d5
(1)  186/FFFFFFFFFFFF00BA : DBC5                		add.l	d5,a5
(1)  187/FFFFFFFFFFFF00BC : 2846                		move.l	d6,a4
(1)  188/FFFFFFFFFFFF00BE :                     .copy_bytes:
(1)  189/FFFFFFFFFFFF00BE : 1ADC                		move.b	(a4)+,(a5)+
(1)  190/FFFFFFFFFFFF00C0 : 51CF FFFC           		dbf	d7,.copy_bytes
(1)  191/FFFFFFFFFFFF00C4 : 13FC 0000 00A0      		move.b	#0,(z80_cpu+zDrvRamLen).l
         FFFFFFFFFFFF00CA : 0030             
(1)  192/FFFFFFFFFFFF00CC :                     .no_size:
(1)  193/FFFFFFFFFFFF00CC : 6116                		bsr	sndUnlockZ80
(1)  194/FFFFFFFFFFFF00CE :                     .no_task:
(1)  196/FFFFFFFFFFFF00CE : 4E75                		rts
(1)  197/FFFFFFFFFFFF00D0 :                     
(1)  198/FFFFFFFFFFFF00D0 :                     ; ====================================================================
(1)  199/FFFFFFFFFFFF00D0 :                     ; ----------------------------------------------------------------
(1)  200/FFFFFFFFFFFF00D0 :                     ; Subroutines
(1)  201/FFFFFFFFFFFF00D0 :                     ; ----------------------------------------------------------------
(1)  202/FFFFFFFFFFFF00D0 :                     
(1)  203/FFFFFFFFFFFF00D0 :                     ; ------------------------------------------------
(1)  204/FFFFFFFFFFFF00D0 :                     ; Lock Z80, get bus
(1)  205/FFFFFFFFFFFF00D0 :                     ; ------------------------------------------------
(1)  206/FFFFFFFFFFFF00D0 :                     
(1)  207/FFFFFFFFFFFF00D0 :                     sndLockZ80:
(1)  209/FFFFFFFFFFFF00D0 : 33FC 0100 00A1      		move.w	#$0100,(z80_bus).l
         FFFFFFFFFFFF00D6 : 1100             
(1)  210/FFFFFFFFFFFF00D8 :                     .wait:
(1)  211/FFFFFFFFFFFF00D8 : 0839 0000 00A1      		btst	#0,(z80_bus).l
         FFFFFFFFFFFF00DE : 1100             
(1)  212/FFFFFFFFFFFF00E0 : 66F6                		bne.s	.wait
(1)  214/FFFFFFFFFFFF00E2 : 4E75                		rts
(1)  215/FFFFFFFFFFFF00E4 :                     
(1)  216/FFFFFFFFFFFF00E4 :                     ; ------------------------------------------------
(1)  217/FFFFFFFFFFFF00E4 :                     ; Unlock Z80, return bus
(1)  218/FFFFFFFFFFFF00E4 :                     ; ------------------------------------------------
(1)  219/FFFFFFFFFFFF00E4 :                     
(1)  220/FFFFFFFFFFFF00E4 :                     sndUnlockZ80:
(1)  222/FFFFFFFFFFFF00E4 : 33FC 0000 00A1      		move.w	#0,(z80_bus).l
         FFFFFFFFFFFF00EA : 1100             
(1)  224/FFFFFFFFFFFF00EC : 4E75                		rts
(1)  225/FFFFFFFFFFFF00EE :                     
(1)  226/FFFFFFFFFFFF00EE :                     ; ------------------------------------------------
(1)  227/FFFFFFFFFFFF00EE :                     ; 68K-to-Z80 sound request enter/exit routines
(1)  228/FFFFFFFFFFFF00EE :                     ;
(1)  229/FFFFFFFFFFFF00EE :                     ; d6 - commFifo index
(1)  230/FFFFFFFFFFFF00EE :                     ; ------------------------------------------------
(1)  231/FFFFFFFFFFFF00EE :                     
(1)  232/FFFFFFFFFFFF00EE :                     sndReq_Enter:
(1)  234/FFFFFFFFFFFF00EE : 33FC 0100 00A1      		move.w	#$0100,(z80_bus).l		; Request Z80 Stop
         FFFFFFFFFFFF00F4 : 1100             
(1)  236/FFFFFFFFFFFF00F6 : 9EFC 0004           		suba	#4,sp				; Extra jump return
(1)  237/FFFFFFFFFFFF00FA : 48E7 0306           		movem.l	d6-d7/a5-a6,-(sp)		; Save these regs to the stack
(1)  238/FFFFFFFFFFFF00FE : DEFC 0014           		adda	#(4*4)+4,sp			; Go back to the RTS jump
(1)  239/FFFFFFFFFFFF0102 : 4BF9 00A0 002E      		lea	(z80_cpu+zDrvFWrt),a5		; a5 - commZWrite
(1)  240/FFFFFFFFFFFF0108 : 4DF9 00A0 0040      		lea	(z80_cpu+zDrvFifo),a6		; a6 - fifo command list
(1)  241/FFFFFFFFFFFF010E :                     .wait:
(1)  243/FFFFFFFFFFFF010E : 0839 0000 00A1      		btst	#0,(z80_bus).l			; Wait for Z80
         FFFFFFFFFFFF0114 : 1100             
(1)  244/FFFFFFFFFFFF0116 : 66F6                		bne.s	.wait
(1)  246/FFFFFFFFFFFF0118 : 1C15                		move.b	(a5),d6				; d6 - index fifo position
(1)  247/FFFFFFFFFFFF011A : 4886                		ext.w	d6				; extend to 16 bits
(1)  248/FFFFFFFFFFFF011C : 4E75                		rts
(1)  249/FFFFFFFFFFFF011E :                     ; JUMP ONLY
(1)  250/FFFFFFFFFFFF011E :                     sndReq_Exit:
(1)  252/FFFFFFFFFFFF011E : 33FC 0000 00A1      		move.w	#0,(z80_bus).l
         FFFFFFFFFFFF0124 : 1100             
(1)  254/FFFFFFFFFFFF0126 : 9EFC 0018           		suba	#8+(4*4),sp
(1)  255/FFFFFFFFFFFF012A : 4CDF 60C0           		movem.l	(sp)+,d6-d7/a5-a6		; And pop those back
(1)  256/FFFFFFFFFFFF012E : DEFC 0008           		adda	#8,sp
(1)  257/FFFFFFFFFFFF0132 :                     ; 		andi.w	#$F8FF,sr			; Enable interrupts
(1)  258/FFFFFFFFFFFF0132 : 4E75                		rts
(1)  259/FFFFFFFFFFFF0134 :                     
(1)  260/FFFFFFFFFFFF0134 :                     ; ------------------------------------------------
(1)  261/FFFFFFFFFFFF0134 :                     ; Send request id and arguments
(1)  262/FFFFFFFFFFFF0134 :                     ;
(1)  263/FFFFFFFFFFFF0134 :                     ; Input:
(1)  264/FFFFFFFFFFFF0134 :                     ; d7 - byte to write
(1)  265/FFFFFFFFFFFF0134 :                     ; d6 - index pointer
(1)  266/FFFFFFFFFFFF0134 :                     ; a5 - commZWrite, update index
(1)  267/FFFFFFFFFFFF0134 :                     ; a6 - commZfifo command list
(1)  268/FFFFFFFFFFFF0134 :                     ;
(1)  269/FFFFFFFFFFFF0134 :                     ; *** CALL sndReq_Enter FIRST ***
(1)  270/FFFFFFFFFFFF0134 :                     ; ------------------------------------------------
(1)  271/FFFFFFFFFFFF0134 :                     
(1)  272/FFFFFFFFFFFF0134 :                     sndReq_scmd:
(1)  273/FFFFFFFFFFFF0134 : 1DBC 00FF 6000      		move.b	#-1,(a6,d6.w)			; write command-start flag
(1)  274/FFFFFFFFFFFF013A : 5206                		addq.b	#1,d6				; next fifo pos
(1)  275/FFFFFFFFFFFF013C : 0206 000F           		andi.b	#MAX_ZCMND-1,d6			; * Z80 label *
(1)  276/FFFFFFFFFFFF0140 : 600C                		bra.s	sndReq_sbyte
(1)  277/FFFFFFFFFFFF0142 :                     sndReq_slong:
(1)  278/FFFFFFFFFFFF0142 : 610A                		bsr	sndReq_sbyte
(1)  279/FFFFFFFFFFFF0144 : E09F                		ror.l	#8,d7
(1)  280/FFFFFFFFFFFF0146 :                     sndReq_saddr:	; 24-bit address
(1)  281/FFFFFFFFFFFF0146 : 6106                		bsr	sndReq_sbyte
(1)  282/FFFFFFFFFFFF0148 : E09F                		ror.l	#8,d7
(1)  283/FFFFFFFFFFFF014A :                     sndReq_sword:
(1)  284/FFFFFFFFFFFF014A : 6102                		bsr	sndReq_sbyte
(1)  285/FFFFFFFFFFFF014C : E09F                		ror.l	#8,d7
(1)  286/FFFFFFFFFFFF014E :                     sndReq_sbyte:
(1)  287/FFFFFFFFFFFF014E : 1D87 6000           		move.b	d7,(a6,d6.w)			; write byte
(1)  288/FFFFFFFFFFFF0152 : 5206                		addq.b	#1,d6				; next fifo pos
(1)  289/FFFFFFFFFFFF0154 : 0206 000F           		andi.b	#MAX_ZCMND-1,d6			; * Z80 label *
(1)  290/FFFFFFFFFFFF0158 : 1A86                		move.b	d6,(a5)				; update commZWrite
(1)  291/FFFFFFFFFFFF015A : 4E75                		rts
(1)  292/FFFFFFFFFFFF015C :                     
(1)  293/FFFFFFFFFFFF015C :                     ; --------------------------------------------------------
(1)  294/FFFFFFFFFFFF015C :                     ; gemaDmaPause
(1)  295/FFFFFFFFFFFF015C :                     ;
(1)  296/FFFFFFFFFFFF015C :                     ; Call this BEFORE doing any DMA transfer
(1)  297/FFFFFFFFFFFF015C :                     ; --------------------------------------------------------
(1)  298/FFFFFFFFFFFF015C :                     
(1)  299/FFFFFFFFFFFF015C :                     gemaDmaPause:
(1)  303/FFFFFFFFFFFF015C : 4847                		swap	d7
(1)  304/FFFFFFFFFFFF015E : 4846                		swap	d6
(1)  305/FFFFFFFFFFFF0160 :                     ; .retry_flag:
(1)  306/FFFFFFFFFFFF0160 : 6100 FF6E           		bsr	sndLockZ80
(1)  307/FFFFFFFFFFFF0164 : 13FC 0001 00A0      		move.b	#1,(z80_cpu+zDrvRomBlk)		; Block flag for Z80
         FFFFFFFFFFFF016A : 002F             
(1)  308/FFFFFFFFFFFF016C : 6100 FF76           		bsr	sndUnlockZ80
(1)  309/FFFFFFFFFFFF0170 : 3E3C 0060           		move.w	#96,d7				; ...Small delay...
(1)  310/FFFFFFFFFFFF0174 : 51CF FFFE           		dbf	d7,*
(1)  311/FFFFFFFFFFFF0178 : 4846                		swap	d6
(1)  312/FFFFFFFFFFFF017A : 4847                		swap	d7
(1)  313/FFFFFFFFFFFF017C : 4E75                		rts
(1)  315/FFFFFFFFFFFF017E :                     
(1)  316/FFFFFFFFFFFF017E :                     ; --------------------------------------------------------
(1)  317/FFFFFFFFFFFF017E :                     ; gemaDmaResume
(1)  318/FFFFFFFFFFFF017E :                     ;
(1)  319/FFFFFFFFFFFF017E :                     ; Call this AFTER finishing DMA transfer
(1)  320/FFFFFFFFFFFF017E :                     ; --------------------------------------------------------
(1)  321/FFFFFFFFFFFF017E :                     
(1)  322/FFFFFFFFFFFF017E :                     gemaDmaResume:
(1)  326/FFFFFFFFFFFF017E : 4847                		swap	d7
(1)  327/FFFFFFFFFFFF0180 : 4846                		swap	d6
(1)  328/FFFFFFFFFFFF0182 : 6100 FF4C           		bsr	sndLockZ80
(1)  329/FFFFFFFFFFFF0186 : 13FC 0000 00A0      		move.b	#0,(z80_cpu+zDrvRomBlk)		; Block flag for Z80
         FFFFFFFFFFFF018C : 002F             
(1)  330/FFFFFFFFFFFF018E : 6100 FF54           		bsr	sndUnlockZ80
(1)  331/FFFFFFFFFFFF0192 : 4846                		swap	d6
(1)  332/FFFFFFFFFFFF0194 : 4847                		swap	d7
(1)  333/FFFFFFFFFFFF0196 : 4E75                		rts
(1)  335/FFFFFFFFFFFF0198 :                     
(1)  336/FFFFFFFFFFFF0198 :                     ; --------------------------------------------------------
(1)  337/FFFFFFFFFFFF0198 :                     ; gemaDmaPauseRom
(1)  338/FFFFFFFFFFFF0198 :                     ;
(1)  339/FFFFFFFFFFFF0198 :                     ; Call this BEFORE doing any DMA transfer
(1)  340/FFFFFFFFFFFF0198 :                     ;
(1)  341/FFFFFFFFFFFF0198 :                     ; *** BANKS $880000/$900000 WILL BE GONE ***
(1)  342/FFFFFFFFFFFF0198 :                     ; --------------------------------------------------------
(1)  343/FFFFFFFFFFFF0198 :                     
(1)  344/FFFFFFFFFFFF0198 :                     gemaDmaPauseRom:
(1)  348/FFFFFFFFFFFF0198 : 4847                		swap	d7
(1)  349/FFFFFFFFFFFF019A : 4846                		swap	d6
(1)  350/FFFFFFFFFFFF019C : 6100 FF32           		bsr	sndLockZ80
(1)  351/FFFFFFFFFFFF01A0 : 13FC 0001 00A0      		move.b	#1,(z80_cpu+zDrvRomBlk)		; Block flag for Z80
         FFFFFFFFFFFF01A6 : 002F             
(1)  352/FFFFFFFFFFFF01A8 : 6100 FF3A           		bsr	sndUnlockZ80
(1)  353/FFFFFFFFFFFF01AC : 3E3C 0060           		move.w	#96,d7				; ...Small delay...
(1)  354/FFFFFFFFFFFF01B0 : 51CF FFFE           		dbf	d7,*
(1)  355/FFFFFFFFFFFF01B4 :                     ; 	if MARS|MARSCD
(1)  356/FFFFFFFFFFFF01B4 :                     ; 		move.w	#2,d6
(1)  357/FFFFFFFFFFFF01B4 :                     ; 		bsr	sndReqCmd
(1)  358/FFFFFFFFFFFF01B4 :                     ; 	endif
(1)  362/FFFFFFFFFFFF01B4 : 4846                		swap	d6
(1)  363/FFFFFFFFFFFF01B6 : 4847                		swap	d7
(1)  364/FFFFFFFFFFFF01B8 : 4E75                		rts
(1)  366/FFFFFFFFFFFF01BA :                     
(1)  367/FFFFFFFFFFFF01BA :                     ; --------------------------------------------------------
(1)  368/FFFFFFFFFFFF01BA :                     ; gemaDmaResumeRom
(1)  369/FFFFFFFFFFFF01BA :                     ;
(1)  370/FFFFFFFFFFFF01BA :                     ; Call this AFTER finishing DMA transfer
(1)  371/FFFFFFFFFFFF01BA :                     ;
(1)  372/FFFFFFFFFFFF01BA :                     ; *** BANKS $880000/$900000 GET RESTORED ***
(1)  373/FFFFFFFFFFFF01BA :                     ; --------------------------------------------------------
(1)  374/FFFFFFFFFFFF01BA :                     
(1)  375/FFFFFFFFFFFF01BA :                     gemaDmaResumeRom:
(1)  379/FFFFFFFFFFFF01BA : 4847                		swap	d7
(1)  380/FFFFFFFFFFFF01BC : 4846                		swap	d6
(1)  381/FFFFFFFFFFFF01BE : 6100 FF10           		bsr	sndLockZ80
(1)  382/FFFFFFFFFFFF01C2 : 13FC 0000 00A0      		move.b	#0,(z80_cpu+zDrvRomBlk)		; Block flag for Z80
         FFFFFFFFFFFF01C8 : 002F             
(1)  383/FFFFFFFFFFFF01CA : 6100 FF18           		bsr	sndUnlockZ80
(1)  384/FFFFFFFFFFFF01CE :                     ; 	if MARS|MARSCD
(1)  385/FFFFFFFFFFFF01CE :                     ; 		move.w	#3,d6
(1)  386/FFFFFFFFFFFF01CE :                     ; 		bsr	sndReqCmd
(1)  387/FFFFFFFFFFFF01CE :                     ; 	endif
(1)  391/FFFFFFFFFFFF01CE : 4846                		swap	d6
(1)  392/FFFFFFFFFFFF01D0 : 4847                		swap	d7
(1)  393/FFFFFFFFFFFF01D2 : 4E75                		rts
(1)  395/FFFFFFFFFFFF01D4 :                     
(1)  396/FFFFFFFFFFFF01D4 :                     ; ====================================================================
(1)  397/FFFFFFFFFFFF01D4 :                     ; --------------------------------------------------------
(1)  398/FFFFFFFFFFFF01D4 :                     ; USER CALLS
(1)  399/FFFFFFFFFFFF01D4 :                     ; --------------------------------------------------------
(1)  400/FFFFFFFFFFFF01D4 :                     
(1)  401/FFFFFFFFFFFF01D4 :                     ; --------------------------------------------------------
(1)  402/FFFFFFFFFFFF01D4 :                     ; gemaTest
(1)  403/FFFFFFFFFFFF01D4 :                     ;
(1)  404/FFFFFFFFFFFF01D4 :                     ; For TESTING only.
(1)  405/FFFFFFFFFFFF01D4 :                     ; --------------------------------------------------------
(1)  406/FFFFFFFFFFFF01D4 :                     
(1)  407/FFFFFFFFFFFF01D4 :                     gemaTest:
(1)  408/FFFFFFFFFFFF01D4 : 6100 FF18           		bsr	sndReq_Enter
(1)  409/FFFFFFFFFFFF01D8 : 3E3C 0000           		move.w	#$00,d7		; Command $00
(1)  410/FFFFFFFFFFFF01DC : 6100 FF56           		bsr	sndReq_scmd
(1)  411/FFFFFFFFFFFF01E0 : 6000 FF3C           		bra 	sndReq_Exit
(1)  412/FFFFFFFFFFFF01E4 :                     
(1)  413/FFFFFFFFFFFF01E4 :                     ; --------------------------------------------------------
(1)  414/FFFFFFFFFFFF01E4 :                     ; gemaSetMasterList
(1)  415/FFFFFFFFFFFF01E4 :                     ;
(1)  416/FFFFFFFFFFFF01E4 :                     ; Set Tracklist location
(1)  417/FFFFFFFFFFFF01E4 :                     ;
(1)  418/FFFFFFFFFFFF01E4 :                     ; Input:
(1)  419/FFFFFFFFFFFF01E4 :                     ; d0.l - 68k pointer
(1)  420/FFFFFFFFFFFF01E4 :                     ; --------------------------------------------------------
(1)  421/FFFFFFFFFFFF01E4 :                     
(1)  422/FFFFFFFFFFFF01E4 :                     gemaSetMasterList:
(1)  423/FFFFFFFFFFFF01E4 : 6100 FF08           		bsr	sndReq_Enter
(1)  424/FFFFFFFFFFFF01E8 : 3E3C 0001           		move.w	#$01,d7		; Command $01
(1)  425/FFFFFFFFFFFF01EC : 6100 FF46           		bsr	sndReq_scmd
(1)  426/FFFFFFFFFFFF01F0 : 2E00                		move.l	d0,d7
(1)  427/FFFFFFFFFFFF01F2 : 6100 FF4E           		bsr	sndReq_slong
(1)  428/FFFFFFFFFFFF01F6 : 6000 FF26           		bra 	sndReq_Exit
(1)  429/FFFFFFFFFFFF01FA :                     
(1)  430/FFFFFFFFFFFF01FA :                     ; --------------------------------------------------------
(1)  431/FFFFFFFFFFFF01FA :                     ; gemaPlayTrack
(1)  432/FFFFFFFFFFFF01FA :                     ;
(1)  433/FFFFFFFFFFFF01FA :                     ; Play a sequence with arguments
(1)  434/FFFFFFFFFFFF01FA :                     ;
(1)  435/FFFFFFFFFFFF01FA :                     ; Input:
(1)  436/FFFFFFFFFFFF01FA :                     ; d0.b - Playback slot number
(1)  437/FFFFFFFFFFFF01FA :                     ;        If -1: use auto-search
(1)  438/FFFFFFFFFFFF01FA :                     ; d1.b - Sequence number
(1)  439/FFFFFFFFFFFF01FA :                     ; d2.b - Starting block
(1)  440/FFFFFFFFFFFF01FA :                     ; --------------------------------------------------------
(1)  441/FFFFFFFFFFFF01FA :                     
(1)  442/FFFFFFFFFFFF01FA :                     gemaPlayTrack:
(1)  443/FFFFFFFFFFFF01FA : 6100 FEF2           		bsr	sndReq_Enter
(1)  444/FFFFFFFFFFFF01FE : 3E3C 0002           		move.w	#$02,d7		; Command $02
(1)  445/FFFFFFFFFFFF0202 : 6100 FF30           		bsr	sndReq_scmd
(1)  446/FFFFFFFFFFFF0206 : 1E01                		move.b	d1,d7		; d1.b Seq number
(1)  447/FFFFFFFFFFFF0208 : 6100 FF44           		bsr	sndReq_sbyte
(1)  448/FFFFFFFFFFFF020C : 1E02                		move.b	d2,d7		; d2.b Block <--
(1)  449/FFFFFFFFFFFF020E : 6100 FF3E           		bsr	sndReq_sbyte
(1)  450/FFFFFFFFFFFF0212 : 1E00                		move.b	d0,d7		; d0.b Slot
(1)  451/FFFFFFFFFFFF0214 : 6100 FF38           		bsr	sndReq_sbyte
(1)  452/FFFFFFFFFFFF0218 : 6000 FF04           		bra 	sndReq_Exit
(1)  453/FFFFFFFFFFFF021C :                     
(1)  454/FFFFFFFFFFFF021C :                     ; --------------------------------------------------------
(1)  455/FFFFFFFFFFFF021C :                     ; gemaStopTrack
(1)  456/FFFFFFFFFFFF021C :                     ;
(1)  457/FFFFFFFFFFFF021C :                     ; Stops tracks with the same sequence number
(1)  458/FFFFFFFFFFFF021C :                     ;
(1)  459/FFFFFFFFFFFF021C :                     ; Input:
(1)  460/FFFFFFFFFFFF021C :                     ; d0.b - Playback slot number
(1)  461/FFFFFFFFFFFF021C :                     ;        If -1: Read all slots
(1)  462/FFFFFFFFFFFF021C :                     ; d1.b - Sequence number to search for
(1)  463/FFFFFFFFFFFF021C :                     ;        If -1: stop tracks with any sequence
(1)  464/FFFFFFFFFFFF021C :                     ; --------------------------------------------------------
(1)  465/FFFFFFFFFFFF021C :                     
(1)  466/FFFFFFFFFFFF021C :                     gemaStopTrack:
(1)  467/FFFFFFFFFFFF021C : 6100 FED0           		bsr	sndReq_Enter
(1)  468/FFFFFFFFFFFF0220 : 3E3C 0003           		move.w	#$03,d7		; Command $03
(1)  469/FFFFFFFFFFFF0224 : 6100 FF0E           		bsr	sndReq_scmd
(1)  470/FFFFFFFFFFFF0228 : 1E01                		move.b	d1,d7		; d0.b Seq number
(1)  471/FFFFFFFFFFFF022A : 6100 FF22           		bsr	sndReq_sbyte
(1)  472/FFFFFFFFFFFF022E : 1E00                		move.b	d0,d7		; d1.b Slot
(1)  473/FFFFFFFFFFFF0230 : 6100 FF1C           		bsr	sndReq_sbyte
(1)  474/FFFFFFFFFFFF0234 : 6000 FEE8           		bra 	sndReq_Exit
(1)  475/FFFFFFFFFFFF0238 :                     
(1)  476/FFFFFFFFFFFF0238 :                     ; --------------------------------------------------------
(1)  477/FFFFFFFFFFFF0238 :                     ; gemaStopAll
(1)  478/FFFFFFFFFFFF0238 :                     ;
(1)  479/FFFFFFFFFFFF0238 :                     ; Stops ALL tracks
(1)  480/FFFFFFFFFFFF0238 :                     ; --------------------------------------------------------
(1)  481/FFFFFFFFFFFF0238 :                     
(1)  482/FFFFFFFFFFFF0238 :                     gemaStopAll:
(1)  483/FFFFFFFFFFFF0238 : 6100 FEB4           		bsr	sndReq_Enter
(1)  484/FFFFFFFFFFFF023C : 3E3C 0003           		move.w	#$03,d7		; Command $03
(1)  485/FFFFFFFFFFFF0240 : 6100 FEF2           		bsr	sndReq_scmd
(1)  486/FFFFFFFFFFFF0244 : 7EFF                		moveq	#-1,d7		; d0.b Seq number
(1)  487/FFFFFFFFFFFF0246 : 6100 FF06           		bsr	sndReq_sbyte
(1)  488/FFFFFFFFFFFF024A : 7EFF                		moveq	#-1,d7		; d1.b Slot
(1)  489/FFFFFFFFFFFF024C : 6100 FF00           		bsr	sndReq_sbyte
(1)  490/FFFFFFFFFFFF0250 : 6000 FECC           		bra 	sndReq_Exit
(1)  491/FFFFFFFFFFFF0254 :                     
(1)  492/FFFFFFFFFFFF0254 :                     ; --------------------------------------------------------
(1)  493/FFFFFFFFFFFF0254 :                     ; gemaFadeTrack
(1)  494/FFFFFFFFFFFF0254 :                     ;
(1)  495/FFFFFFFFFFFF0254 :                     ; Set Master volume to a track slot.
(1)  496/FFFFFFFFFFFF0254 :                     ;
(1)  497/FFFFFFFFFFFF0254 :                     ; Input:
(1)  498/FFFFFFFFFFFF0254 :                     ; d0.b - Playback slot number
(1)  499/FFFFFFFFFFFF0254 :                     ;        If -1: Apply to all slots
(1)  500/FFFFFFFFFFFF0254 :                     ; d1.b - Target volume
(1)  501/FFFFFFFFFFFF0254 :                     ; d2.b - Fade speed TODO
(1)  502/FFFFFFFFFFFF0254 :                     ;
(1)  503/FFFFFFFFFFFF0254 :                     ; Notes:
(1)  504/FFFFFFFFFFFF0254 :                     ; - DO NOT MIX THIS WITH gemaSetTrackVol
(1)  505/FFFFFFFFFFFF0254 :                     ; - In v1.0 this only works on (re)start
(1)  506/FFFFFFFFFFFF0254 :                     ;   or during new notes on playback.
(1)  507/FFFFFFFFFFFF0254 :                     ; --------------------------------------------------------
(1)  508/FFFFFFFFFFFF0254 :                     
(1)  509/FFFFFFFFFFFF0254 :                     gemaFadeTrack:
(1)  510/FFFFFFFFFFFF0254 : 6100 FE98           		bsr	sndReq_Enter
(1)  511/FFFFFFFFFFFF0258 : 3E3C 0005           		move.w	#$05,d7		; Command $05
(1)  512/FFFFFFFFFFFF025C : 6100 FED6           		bsr	sndReq_scmd
(1)  513/FFFFFFFFFFFF0260 : 1E01                		move.b	d1,d7		; d0.b Target volume
(1)  514/FFFFFFFFFFFF0262 : 6100 FEEA           		bsr	sndReq_sbyte
(1)  515/FFFFFFFFFFFF0266 : 1E00                		move.b	d0,d7		; d1.b Slot
(1)  516/FFFFFFFFFFFF0268 : 6100 FEE4           		bsr	sndReq_sbyte
(1)  517/FFFFFFFFFFFF026C : 6000 FEB0           		bra 	sndReq_Exit
(1)  518/FFFFFFFFFFFF0270 :                     
(1)  519/FFFFFFFFFFFF0270 :                     ; --------------------------------------------------------
(1)  520/FFFFFFFFFFFF0270 :                     ; gemaSetTrackVol
(1)  521/FFFFFFFFFFFF0270 :                     ;
(1)  522/FFFFFFFFFFFF0270 :                     ; Set Master volume to a track slot.
(1)  523/FFFFFFFFFFFF0270 :                     ;
(1)  524/FFFFFFFFFFFF0270 :                     ; Input:
(1)  525/FFFFFFFFFFFF0270 :                     ; d0.b - Playback slot number
(1)  526/FFFFFFFFFFFF0270 :                     ;        If -1: Set to all slots
(1)  527/FFFFFFFFFFFF0270 :                     ; d1.b - Master volume ($00-$40 max-min)
(1)  528/FFFFFFFFFFFF0270 :                     ;
(1)  529/FFFFFFFFFFFF0270 :                     ; Notes:
(1)  530/FFFFFFFFFFFF0270 :                     ; - DO NOT MIX THIS WITH gemaFadeTrack
(1)  531/FFFFFFFFFFFF0270 :                     ; - In v1.0 this only works on (re)start
(1)  532/FFFFFFFFFFFF0270 :                     ;   or during new notes on playback.
(1)  533/FFFFFFFFFFFF0270 :                     ; --------------------------------------------------------
(1)  534/FFFFFFFFFFFF0270 :                     
(1)  535/FFFFFFFFFFFF0270 :                     gemaSetTrackVol:
(1)  536/FFFFFFFFFFFF0270 : 6100 FE7C           		bsr	sndReq_Enter
(1)  537/FFFFFFFFFFFF0274 : 3E3C 0006           		move.w	#$06,d7		; Command $06
(1)  538/FFFFFFFFFFFF0278 : 6100 FEBA           		bsr	sndReq_scmd
(1)  539/FFFFFFFFFFFF027C : 1E01                		move.b	d1,d7		; d0.b Volume data <--
(1)  540/FFFFFFFFFFFF027E : 6100 FECE           		bsr	sndReq_sbyte
(1)  541/FFFFFFFFFFFF0282 : 1E00                		move.b	d0,d7		; d1.b Slot
(1)  542/FFFFFFFFFFFF0284 : 6100 FEC8           		bsr	sndReq_sbyte
(1)  543/FFFFFFFFFFFF0288 : 6000 FE94           		bra 	sndReq_Exit
(1)  544/FFFFFFFFFFFF028C :                     
(1)  545/FFFFFFFFFFFF028C :                     ; --------------------------------------------------------
(1)  546/FFFFFFFFFFFF028C :                     ; gemaSetBeats
(1)  547/FFFFFFFFFFFF028C :                     ;
(1)  548/FFFFFFFFFFFF028C :                     ; Sets global subbeats
(1)  549/FFFFFFFFFFFF028C :                     ;
(1)  550/FFFFFFFFFFFF028C :                     ; d0.w - sub-beats
(1)  551/FFFFFFFFFFFF028C :                     ; --------------------------------------------------------
(1)  552/FFFFFFFFFFFF028C :                     
(1)  553/FFFFFFFFFFFF028C :                     ; TODO: find a way to calculate this to a tempo.
(1)  554/FFFFFFFFFFFF028C :                     
(1)  555/FFFFFFFFFFFF028C :                     gemaSetBeats:
(1)  556/FFFFFFFFFFFF028C : 6100 FE60           		bsr	sndReq_Enter
(1)  557/FFFFFFFFFFFF0290 : 3E3C 0007           		move.w	#$07,d7		; Command $07
(1)  558/FFFFFFFFFFFF0294 : 6100 FE9E           		bsr	sndReq_scmd
(1)  559/FFFFFFFFFFFF0298 : 3E00                		move.w	d0,d7
(1)  560/FFFFFFFFFFFF029A : 6100 FEAE           		bsr	sndReq_sword
(1)  561/FFFFFFFFFFFF029E : 6000 FE7E           		bra 	sndReq_Exit
(1)  562/FFFFFFFFFFFF02A2 :                     
     192/FFFFFFFFFFFF02A2 :                     		include	"system/md/video.asm"
(1)    1/FFFFFFFFFFFF02A2 :                     ; ===========================================================================
(1)    2/FFFFFFFFFFFF02A2 :                     ; ----------------------------------------------------------------
(1)    3/FFFFFFFFFFFF02A2 :                     ; Genesis VDP section
(1)    4/FFFFFFFFFFFF02A2 :                     ; ----------------------------------------------------------------
(1)    5/FFFFFFFFFFFF02A2 :                     
(1)    6/FFFFFFFFFFFF02A2 :                     ; ====================================================================
(1)    7/FFFFFFFFFFFF02A2 :                     ; --------------------------------------------------------
(1)    8/FFFFFFFFFFFF02A2 :                     ; Settings
(1)    9/FFFFFFFFFFFF02A2 :                     ; --------------------------------------------------------
(1)   10/FFFFFFFFFFFF02A2 :                     
(1)   11/FFFFFFFFFFFF02A2 : =$18                 MAX_MDOBJ	equ 24		; MAX Objects
(1)   12/FFFFFFFFFFFF02A2 : =$18                 MAX_MDDMATSK	equ 24		; MAX DMA BLAST entries
(1)   13/FFFFFFFFFFFF02A2 : =$7FF                varNullVram	equ $07FF	; Default Blank cell
(1)   14/FFFFFFFFFFFF02A2 : =$580                varPrintVram	equ $0580	; Default VRAM location of the PRINT text graphics
(1)   15/FFFFFFFFFFFF02A2 : =$4B0                varDefAutoDma	equ $04B0	; Default VRAM location for auto-DMA storage
(1)   16/FFFFFFFFFFFF02A2 : =$3                  varPrintPal	equ 3		; Palette to use for the printable text
(1)   17/FFFFFFFFFFFF02A2 :                     
(1)   18/FFFFFFFFFFFF02A2 :                     ; --------------------------------------------------------
(1)   19/FFFFFFFFFFFF02A2 :                     ; Variables
(1)   20/FFFFFFFFFFFF02A2 :                     ; --------------------------------------------------------
(1)   21/FFFFFFFFFFFF02A2 :                     
(1)   22/FFFFFFFFFFFF02A2 :                     ; ------------------------------------------------
(1)   23/FFFFFFFFFFFF02A2 :                     ; VDP Register $80
(1)   24/FFFFFFFFFFFF02A2 :                     ; ------------------------------------------------
(1)   25/FFFFFFFFFFFF02A2 :                     
(1)   26/FFFFFFFFFFFF02A2 : =$2                  HVStop		equ $02
(1)   27/FFFFFFFFFFFF02A2 : =$10                 HintEnbl	equ $10
(1)   28/FFFFFFFFFFFF02A2 : =$1                  bitHVStop	equ 1
(1)   29/FFFFFFFFFFFF02A2 : =$4                  bitHintEnbl	equ 4
(1)   30/FFFFFFFFFFFF02A2 :                     
(1)   31/FFFFFFFFFFFF02A2 :                     ; ------------------------------------------------
(1)   32/FFFFFFFFFFFF02A2 :                     ; VDP Register $81
(1)   33/FFFFFFFFFFFF02A2 :                     ; ------------------------------------------------
(1)   34/FFFFFFFFFFFF02A2 :                     
(1)   35/FFFFFFFFFFFF02A2 : =$40                 DispEnbl 	equ $40
(1)   36/FFFFFFFFFFFF02A2 : =$20                 VintEnbl 	equ $20
(1)   37/FFFFFFFFFFFF02A2 : =$10                 DmaEnbl		equ $10
(1)   38/FFFFFFFFFFFF02A2 : =$6                  bitDispEnbl	equ 6
(1)   39/FFFFFFFFFFFF02A2 : =$5                  bitVintEnbl	equ 5
(1)   40/FFFFFFFFFFFF02A2 : =$4                  bitDmaEnbl	equ 4
(1)   41/FFFFFFFFFFFF02A2 : =$3                  bitV30		equ 3
(1)   42/FFFFFFFFFFFF02A2 :                     
(1)   43/FFFFFFFFFFFF02A2 :                     ; ------------------------------------------------
(1)   44/FFFFFFFFFFFF02A2 :                     ; vdp_ctrl READ bits (full WORD)
(1)   45/FFFFFFFFFFFF02A2 :                     ; ------------------------------------------------
(1)   46/FFFFFFFFFFFF02A2 :                     
(1)   47/FFFFFFFFFFFF02A2 : =$9                  bitFifoE	equ 9		; DMA FIFO empty
(1)   48/FFFFFFFFFFFF02A2 : =$8                  bitFifoF	equ 8		; DMA FIFO full
(1)   49/FFFFFFFFFFFF02A2 : =$7                  bitVInt		equ 7		; Vertical interrupt
(1)   50/FFFFFFFFFFFF02A2 : =$6                  bitSprOvr	equ 6		; Sprite overflow
(1)   51/FFFFFFFFFFFF02A2 : =$5                  bitSprCol	equ 5		; Sprite collision
(1)   52/FFFFFFFFFFFF02A2 : =$4                  bitOdd		equ 4		; EVEN or ODD frame displayed on interlace mode
(1)   53/FFFFFFFFFFFF02A2 : =$3                  bitVBlk		equ 3		; Inside VBlank
(1)   54/FFFFFFFFFFFF02A2 : =$2                  bitHBlk		equ 2		; Inside HBlank
(1)   55/FFFFFFFFFFFF02A2 : =$1                  bitDma		equ 1		; This bit only works on FILL and COPY
(1)   56/FFFFFFFFFFFF02A2 : =$0                  bitPal		equ 0
(1)   57/FFFFFFFFFFFF02A2 :                     
(1)   58/FFFFFFFFFFFF02A2 :                     ; ====================================================================
(1)   59/FFFFFFFFFFFF02A2 :                     ; ----------------------------------------------------------------
(1)   60/FFFFFFFFFFFF02A2 :                     ; Structs
(1)   61/FFFFFFFFFFFF02A2 :                     ; ----------------------------------------------------------------
(1)   62/FFFFFFFFFFFF02A2 :                     
(1)   63/FFFFFFFFFFFF02A2 :                     ; ------------------------------------------------
(1)   64/FFFFFFFFFFFF02A2 :                     ; Genesis object
(1)   65/FFFFFFFFFFFF02A2 :                     ;
(1)   66/FFFFFFFFFFFF02A2 :                     ; obj_set: %M--- --vh
(1)   67/FFFFFFFFFFFF02A2 :                     ; 	| M - Draw this object on
(1)   68/FFFFFFFFFFFF02A2 :                     ;             Genesis or 32X
(1)   69/FFFFFFFFFFFF02A2 :                     ; 	| h - Flip Y
(1)   70/FFFFFFFFFFFF02A2 :                     ; 	| v - Flip X
(1)   71/FFFFFFFFFFFF02A2 :                     ;
(1)   72/FFFFFFFFFFFF02A2 :                     ; obj_size: $uuddllrr
(1)   73/FFFFFFFFFFFF02A2 :                     ; 	| u - Up/8
(1)   74/FFFFFFFFFFFF02A2 :                     ; 	| d - Down/8
(1)   75/FFFFFFFFFFFF02A2 :                     ; 	| l - Left/8
(1)   76/FFFFFFFFFFFF02A2 :                     ; 	| r - Right/8
(1)   77/FFFFFFFFFFFF02A2 :                     ; ------------------------------------------------
(1)   78/FFFFFFFFFFFF02A2 :                     
(1)   79/FFFFFFFFFFFF02A2 : (MACRO)              		strct 0
(1)   79/FFFFFFFFFFFF02A2 : =$FFFFFFFFFFFF02A2   GLBL_LASTPC     set *
(1)   79/    3C70 :                                     dephase
(1)   79/       0 :                                     phase 0
(1)   79/       0 : =$0                  GLBL_LASTORG    set *
(1)   80/       0 :                     obj_code	ds.l 1		; Object code, If 0 slot is unused.
(1)   81/       4 :                     obj_x		ds.l 1		; Object X Position $xxxx.0000
(1)   82/       8 :                     obj_y		ds.l 1		; Object Y Position $yyyy.0000
(1)   83/       C :                     obj_map		ds.l 1		; Object Sprite-map data location
(1)   84/      10 :                     obj_size	ds.l 1		; Object Size starting from center point X/Y, also used for obj-to-obj collision detection.
(1)   85/      14 :                     obj_vram	ds.w 1		; Object VRAM position (If DMA enabled: output location)
(1)   86/      16 :                     obj_x_spd	ds.w 1		; Object X Speed $xx.00
(1)   87/      18 :                     obj_y_spd	ds.w 1		; Object Y Speed $yy.00
(1)   88/      1A :                     obj_anim_indx	ds.w 1		; *internal* Object animation script index (obj_anim + obj_anim_indx)
(1)   89/      1C :                     obj_frame	ds.w 1		; Object current frame (overwritten by object_Animate)
(1)   90/      1E :                     obj_anim_id	ds.b 1		; Object animation number
(1)   91/      1F :                     obj_anim_icur	ds.b 1		; *internal* Object current animation id (DONT SEPARATE THIS FROM obj_anim_id)
(1)   92/      20 :                     obj_anim_spd	ds.b 1		; *internal* Object animation delay
(1)   93/      21 :                     obj_index	ds.b 1		; Object code-index
(1)   94/      22 :                     obj_set		ds.b 1		; Object settings
(1)   95/      23 :                     obj_subid	ds.b 1		; Object Sub-ID (for object placement)
(1)   96/      24 :                     obj_status	ds.b 1		; Object USER status (falling, collision, etc.)
(1)   97/      25 :                     obj_FREE	ds.b 1		; (FILLER align byte)
(1)   98/      26 :                     obj_ram		ds.b $40	; Object's own RAM
(1)   99/      66 :                     sizeof_mdobj	ds.l 0
(1)  100/      68 : (MACRO)              		endstrct
(1)  100/       0 :                                     org GLBL_LASTORG
(1)  100/FFFFFFFFFFFF02A2 :                                     phase GLBL_LASTPC
(1)  101/FFFFFFFFFFFF02A2 :                     ; 		message "\{sizeof_mdobj}"
(1)  102/FFFFFFFFFFFF02A2 :                     
(1)  103/FFFFFFFFFFFF02A2 :                     ; ------------------------------------------------
(1)  104/FFFFFFFFFFFF02A2 :                     ; ** obj_set
(1)  105/FFFFFFFFFFFF02A2 :                     ; ------------------------------------------------
(1)  106/FFFFFFFFFFFF02A2 :                     
(1)  107/FFFFFFFFFFFF02A2 : =$7                  bitobj_Mars	equ	7	; 32X ONLY: This objects draws to the 32X side (256-color sprite)
(1)  108/FFFFFFFFFFFF02A2 : =$1                  bitobj_flipV	equ	1	; Set to flip object Vertically
(1)  109/FFFFFFFFFFFF02A2 : =$0                  bitobj_flipH	equ	0	; Set to flip object Horizontally
(1)  110/FFFFFFFFFFFF02A2 :                     
(1)  111/FFFFFFFFFFFF02A2 :                     ; ====================================================================
(1)  112/FFFFFFFFFFFF02A2 :                     ; ----------------------------------------------------------------
(1)  113/FFFFFFFFFFFF02A2 :                     ; Video RAM
(1)  114/FFFFFFFFFFFF02A2 :                     ; ----------------------------------------------------------------
(1)  115/FFFFFFFFFFFF02A2 :                     
(1)  116/FFFFFFFFFFFF02A2 : (MACRO)              			strct RAM_MdVideo
(1)  116/FFFFFFFFFFFF02A2 : =$FFFFFFFFFFFF02A2   GLBL_LASTPC     set *
(1)  116/       0 :                                     dephase
(1)  116/FFFFFFFFFFFFA004 :                                     phase RAM_MDVIDEO
(1)  116/FFFFFFFFFFFFA004 : =$FFFFFFFFFFFFA004   GLBL_LASTORG    set *
(1)  117/FFFFFFFFFFFFA004 :                     RAM_HorScroll		ds.l 240			; DMA Horizontal scroll data
(1)  118/FFFFFFFFFFFFA3C4 :                     RAM_VerScroll		ds.l 320/16			; DMA Vertical scroll data
(1)  119/FFFFFFFFFFFFA414 :                     RAM_Sprites		ds.w 8*80			; DMA Sprites
(1)  120/FFFFFFFFFFFFA914 :                     RAM_Palette		ds.w 64				; DMA palette
(1)  121/FFFFFFFFFFFFA994 :                     ; RAM_SprDrwPz		ds.w 8*80			; External sprite pieces
(1)  122/FFFFFFFFFFFFA994 :                     RAM_MdMarsPalFd		ds.w 256			; Target 32X palette for FadeIn/Out
(1)  123/FFFFFFFFFFFFAB94 :                     RAM_PaletteFd		ds.w 64				; Target MD palette for FadeIn/Out
(1)  124/FFFFFFFFFFFFAC14 :                     RAM_VdpDmaList		ds.b $10*MAX_MDDMATSK		; DMA BLAST list for VBlank
(1)  125/FFFFFFFFFFFFAD94 :                     RAM_Objects		ds.b MAX_MDOBJ*sizeof_mdobj	; Objects
(1)  126/FFFFFFFFFFFFB724 :                     RAM_ObjDispList		ds.w MAX_MDOBJ			; half-RAM pointers for display (Obj|Extra)
(1)  127/FFFFFFFFFFFFB754 :                     RAM_VidPrntList		ds.w 3*64			; Video_Print list: Address, Type
(1)  128/FFFFFFFFFFFFB8D4 :                     RAM_FrameCount		ds.l 1				; Frames counter
(1)  129/FFFFFFFFFFFFB8D8 :                     RAM_SprDrwCntr		ds.w 1
(1)  130/FFFFFFFFFFFFB8DA :                     RAM_SprLinkNum		ds.w 1
(1)  131/FFFFFFFFFFFFB8DC :                     RAM_VdpExWrite		ds.w 1
(1)  132/FFFFFFFFFFFFB8DE :                     RAM_VdpDmaIndx		ds.w 1				; Current index in DMA BLAST list
(1)  133/FFFFFFFFFFFFB8E0 :                     RAM_VdpDmaMod		ds.w 1				; Mid-write flag
(1)  134/FFFFFFFFFFFFB8E2 :                     RAM_VidPrntVram		ds.w 1				; Default VRAM location for ASCII text used by Video_Print
(1)  135/FFFFFFFFFFFFB8E4 :                     RAM_FadeMdReq		ds.w 1				; FadeIn/Out request for Genesis palette (01-FadeIn 02-FadeOut)
(1)  136/FFFFFFFFFFFFB8E6 :                     RAM_FadeMdIncr		ds.w 1				; Fading increment count
(1)  137/FFFFFFFFFFFFB8E8 :                     RAM_FadeMdDelay		ds.w 1				; Fading delay
(1)  138/FFFFFFFFFFFFB8EA :                     RAM_FadeMdTmr		ds.w 1				; Fading delay timer
(1)  139/FFFFFFFFFFFFB8EC :                     RAM_FadeMarsReq		ds.w 1				; Same thing but for 32X's 256-color (01-FadeIn 02-FadeOut)
(1)  140/FFFFFFFFFFFFB8EE :                     RAM_FadeMarsIncr	ds.w 1				; (Hint: Set to 4 to syncronize with Genesis' FadeIn/Out)
(1)  141/FFFFFFFFFFFFB8F0 :                     RAM_FadeMarsDelay	ds.w 1
(1)  142/FFFFFFFFFFFFB8F2 :                     RAM_FadeMarsTmr		ds.w 1
(1)  143/FFFFFFFFFFFFB8F4 :                     RAM_MdMars_DrawAll	ds.w 1
(1)  144/FFFFFFFFFFFFB8F6 :                     RAM_VdpRegs		ds.b 24				; VDP Register cache
(1)  145/FFFFFFFFFFFFB90E :                     sizeof_mdvid		ds.l 0
(1)  146/FFFFFFFFFFFFB914 : (MACRO)              			endstrct
(1)  146/FFFFFFFFFFFFA004 :                                     org GLBL_LASTORG
(1)  146/FFFFFFFFFFFF02A2 :                                     phase GLBL_LASTPC
(1)  147/FFFFFFFFFFFF02A2 :                     
(1)  148/FFFFFFFFFFFF02A2 : (MACRO)              		erreport "MD VIDEO RAM",sizeof_mdvid-RAM_MdVideo,MAX_MdVideo
(1)  149/FFFFFFFFFFFF02A2 :                     
(1)  150/FFFFFFFFFFFF02A2 :                     ; ====================================================================
(1)  151/FFFFFFFFFFFF02A2 :                     ; --------------------------------------------------------
(1)  152/FFFFFFFFFFFF02A2 :                     ; Initialize Genesis video
(1)  153/FFFFFFFFFFFF02A2 :                     ;
(1)  154/FFFFFFFFFFFF02A2 :                     ; Breaks:
(1)  155/FFFFFFFFFFFF02A2 :                     ; d6-d7/a5-a6
(1)  156/FFFFFFFFFFFF02A2 :                     ; --------------------------------------------------------
(1)  157/FFFFFFFFFFFF02A2 :                     
(1)  158/FFFFFFFFFFFF02A2 :                     Video_Init:
(1)  159/FFFFFFFFFFFF02A2 : 4DF8 A004           		lea	(RAM_MdVideo).w,a6		; Clear our RAM section
(1)  160/FFFFFFFFFFFF02A6 : 3C3C 8000           		move.w	#$8000,d6
(1)  161/FFFFFFFFFFFF02AA : 3E3C 1909           		move.w	#(sizeof_mdvid-RAM_MdVideo)-1,d7
(1)  162/FFFFFFFFFFFF02AE :                     .clrram:
(1)  163/FFFFFFFFFFFF02AE : 1CC6                		move.b	d6,(a6)+			; (Write the LSB zero)
(1)  164/FFFFFFFFFFFF02B0 : 51CF FFFC           		dbf	d7,.clrram
(1)  165/FFFFFFFFFFFF02B4 : 31FC 0001 B8DA      		move.w	#1,(RAM_SprLinkNum).w
(1)  166/FFFFFFFFFFFF02BA : 4DFA 0030           		lea	list_vdpregs(pc),a6		; Write "cache'd" VDP registers
(1)  167/FFFFFFFFFFFF02BE : 4BF8 B8F6           		lea	(RAM_VdpRegs).w,a5
(1)  168/FFFFFFFFFFFF02C2 : 3E3C 0010           		move.w	#17-1,d7
(1)  169/FFFFFFFFFFFF02C6 :                     .loop:
(1)  170/FFFFFFFFFFFF02C6 : 1C1E                		move.b	(a6)+,d6
(1)  171/FFFFFFFFFFFF02C8 : 1AC6                		move.b	d6,(a5)+
(1)  172/FFFFFFFFFFFF02CA : 51CF FFFA           		dbf	d7,.loop
(1)  173/FFFFFFFFFFFF02CE :                     
(1)  174/FFFFFFFFFFFF02CE :                     ; --------------------------------------------------------
(1)  175/FFFFFFFFFFFF02CE :                     ; Video_Update
(1)  176/FFFFFFFFFFFF02CE :                     ;
(1)  177/FFFFFFFFFFFF02CE :                     ; Writes register data stored in RAM to VDP
(1)  178/FFFFFFFFFFFF02CE :                     ; from registers $80 to $90
(1)  179/FFFFFFFFFFFF02CE :                     ;
(1)  180/FFFFFFFFFFFF02CE :                     ; WINDOW registers $91 and $92 are written
(1)  181/FFFFFFFFFFFF02CE :                     ; manually.
(1)  182/FFFFFFFFFFFF02CE :                     ;
(1)  183/FFFFFFFFFFFF02CE :                     ; Breaks:
(1)  184/FFFFFFFFFFFF02CE :                     ; d6-d7/a5-a6
(1)  185/FFFFFFFFFFFF02CE :                     ; --------------------------------------------------------
(1)  186/FFFFFFFFFFFF02CE :                     
(1)  187/FFFFFFFFFFFF02CE :                     Video_Update:
(1)  188/FFFFFFFFFFFF02CE : 4DF8 B8F6           		lea	(RAM_VdpRegs).w,a6
(1)  189/FFFFFFFFFFFF02D2 : 4BF9 00C0 0004      		lea	(vdp_ctrl),a5
(1)  190/FFFFFFFFFFFF02D8 : 3C3C 8000           		move.w	#$8000,d6
(1)  191/FFFFFFFFFFFF02DC : 7E10                		moveq	#17-1,d7
(1)  192/FFFFFFFFFFFF02DE :                     .loop:
(1)  193/FFFFFFFFFFFF02DE : 1C1E                		move.b	(a6)+,d6
(1)  194/FFFFFFFFFFFF02E0 : 3A86                		move.w	d6,(a5)
(1)  195/FFFFFFFFFFFF02E2 : 0646 0100           		addi.w	#$0100,d6
(1)  196/FFFFFFFFFFFF02E6 : 51CF FFF6           		dbf	d7,.loop
(1)  197/FFFFFFFFFFFF02EA :                     .exit:
(1)  198/FFFFFFFFFFFF02EA : 4E75                		rts
(1)  199/FFFFFFFFFFFF02EC :                     
(1)  200/FFFFFFFFFFFF02EC :                     ; ------------------------------------------------
(1)  201/FFFFFFFFFFFF02EC :                     ; Default VDP register settings
(1)  202/FFFFFFFFFFFF02EC :                     ; ------------------------------------------------
(1)  203/FFFFFFFFFFFF02EC :                     
(1)  204/FFFFFFFFFFFF02EC :                     list_vdpregs:
(1)  205/FFFFFFFFFFFF02EC : 04                  		dc.b $04			; No HBlank interrupt, HV Counter on
(1)  206/FFFFFFFFFFFF02ED : 04                  		dc.b $04			; Display ON, No VBlank interrupt
(1)  207/FFFFFFFFFFFF02EE : 30                  		dc.b (($C000)>>10)		; Layer A at VRAM $C000 (%00xxx000)
(1)  208/FFFFFFFFFFFF02EF : 34                  		dc.b (($D000)>>10)		; Window  at VRAM $D000 (%00xxxxy0)
(1)  209/FFFFFFFFFFFF02F0 : 07                  		dc.b (($E000)>>13)		; Layer B at VRAM $E000 (%00000xxx)
(1)  210/FFFFFFFFFFFF02F1 : 7C                  		dc.b (($F800)>>9)		; Sprites at VRAM $F800 (%0xxxxxxy) (OLD $F800)
(1)  211/FFFFFFFFFFFF02F2 : 00                  		dc.b $00			; Unused
(1)  212/FFFFFFFFFFFF02F3 : 00                  		dc.b $00			; Background color: $00
(1)  213/FFFFFFFFFFFF02F4 : 00                  		dc.b $00			; Unused
(1)  214/FFFFFFFFFFFF02F5 : 00                  		dc.b $00			; Unused
(1)  215/FFFFFFFFFFFF02F6 : 00                  		dc.b $00			; HInt line number trigger
(1)  216/FFFFFFFFFFFF02F7 : 00                  		dc.b (%000|%00)			; No ExtInt, Scroll: VSCR:full HSCR:full
(1)  217/FFFFFFFFFFFF02F8 : 81                  		dc.b $81			; H40, No shadow mode, 320-pixel resolution mode
(1)  218/FFFFFFFFFFFF02F9 : 3F                  		dc.b (($FC00)>>10)		; HScroll at VRAM $FC00 (%00xxxxxx)
(1)  219/FFFFFFFFFFFF02FA : 00                  		dc.b $00			; Unused
(1)  220/FFFFFFFFFFFF02FB : 02                  		dc.b $02			; VDP auto-increment: $02
(1)  221/FFFFFFFFFFFF02FC : 01                  		dc.b (%00<<4)|%01		; Scroll area size: V32 H64
(1)  222/FFFFFFFFFFFF02FD : 00                  		dc.b $00
(1)  223/FFFFFFFFFFFF02FE : 00                  		dc.b $00
(1)  224/FFFFFFFFFFFF02FF :                     		align 2
(1)  225/FFFFFFFFFFFF0300 :                     
(1)  226/FFFFFFFFFFFF0300 :                     ; Default ASCII PRINT palette
(1)  227/FFFFFFFFFFFF0300 : 0000 0EEE 0CCC      ASCII_PAL:	dc.w $0000,$0EEE,$0CCC,$0AAA,$0888,$0444,$000E,$0008
         FFFFFFFFFFFF0306 : 0AAA 0888 0444 
         FFFFFFFFFFFF030C : 000E 0008          
(1)  228/FFFFFFFFFFFF0310 : 00EE 0088 00E0      		dc.w $00EE,$0088,$00E0,$0080,$0E00,$0800,$0000,$0000
         FFFFFFFFFFFF0316 : 0080 0E00 0800 
         FFFFFFFFFFFF031C : 0000 0000          
(1)  229/FFFFFFFFFFFF0320 :                     		align 2
(1)  230/FFFFFFFFFFFF0322 :                     
(1)  231/FFFFFFFFFFFF0322 :                     ; --------------------------------------------------------
(1)  232/FFFFFFFFFFFF0322 :                     ; Video_Clear
(1)  233/FFFFFFFFFFFF0322 :                     ;
(1)  234/FFFFFFFFFFFF0322 :                     ; Clear all video data from VRAM
(1)  235/FFFFFFFFFFFF0322 :                     ;
(1)  236/FFFFFFFFFFFF0322 :                     ; Breaks:
(1)  237/FFFFFFFFFFFF0322 :                     ; ALL
(1)  238/FFFFFFFFFFFF0322 :                     ; --------------------------------------------------------
(1)  239/FFFFFFFFFFFF0322 :                     
(1)  240/FFFFFFFFFFFF0322 :                     Video_Clear:
(1)  241/FFFFFFFFFFFF0322 :                     ; 		move.w	#0,d0			; Clears until $57F
(1)  242/FFFFFFFFFFFF0322 :                     ; 		move.w	#0,d1
(1)  243/FFFFFFFFFFFF0322 :                     ; 		move.w	#$57F*$20,d2
(1)  244/FFFFFFFFFFFF0322 :                     ; 		bsr	Video_Fill
(1)  245/FFFFFFFFFFFF0322 :                     
(1)  246/FFFFFFFFFFFF0322 :                     ; --------------------------------------------------------
(1)  247/FFFFFFFFFFFF0322 :                     ; Video_ClearScreen
(1)  248/FFFFFFFFFFFF0322 :                     ;
(1)  249/FFFFFFFFFFFF0322 :                     ; Clears ALL Genesis screens FG/BG/WIN
(1)  250/FFFFFFFFFFFF0322 :                     ;
(1)  251/FFFFFFFFFFFF0322 :                     ; Breaks:
(1)  252/FFFFFFFFFFFF0322 :                     ; d0-d2/d6-d7/a5-a6
(1)  253/FFFFFFFFFFFF0322 :                     ; --------------------------------------------------------
(1)  254/FFFFFFFFFFFF0322 :                     
(1)  255/FFFFFFFFFFFF0322 :                     Video_ClearScreen:
(1)  256/FFFFFFFFFFFF0322 : 7000                		moveq	#0,d0
(1)  257/FFFFFFFFFFFF0324 : 343C 1000           		move.w	#$1000,d2		; FG/BG size
(1)  258/FFFFFFFFFFFF0328 : 1238 B8F8           		move.b	(RAM_VdpRegs+2).w,d1	; FG
(1)  259/FFFFFFFFFFFF032C : 0241 0038           		andi.w	#%111000,d1
(1)  260/FFFFFFFFFFFF0330 : E149                		lsl.w	#8,d1
(1)  261/FFFFFFFFFFFF0332 : E549                		lsl.w	#2,d1
(1)  262/FFFFFFFFFFFF0334 : 6100 0406           		bsr	Video_Fill
(1)  263/FFFFFFFFFFFF0338 : 1238 B8FA           		move.b	(RAM_VdpRegs+4).w,d1	; BG
(1)  264/FFFFFFFFFFFF033C : 0241 0007           		andi.w	#%000111,d1
(1)  265/FFFFFFFFFFFF0340 : E149                		lsl.w	#8,d1
(1)  266/FFFFFFFFFFFF0342 : EB49                		lsl.w	#5,d1
(1)  267/FFFFFFFFFFFF0344 : 6100 03F6           		bsr	Video_Fill
(1)  268/FFFFFFFFFFFF0348 : 343C 1000           		move.w	#$1000,d2		; WD Size
(1)  269/FFFFFFFFFFFF034C : 1238 B8F9           		move.b	(RAM_VdpRegs+3).w,d1	; Window
(1)  270/FFFFFFFFFFFF0350 : 0241 003E           		andi.w	#%111110,d1
(1)  271/FFFFFFFFFFFF0354 : E149                		lsl.w	#8,d1
(1)  272/FFFFFFFFFFFF0356 : E549                		lsl.w	#2,d1
(1)  273/FFFFFFFFFFFF0358 : 6100 03E2           		bsr	Video_Fill
(1)  274/FFFFFFFFFFFF035C : 4DF8 A004           		lea	(RAM_HorScroll).w,a6	; RAM cleanup
(1)  275/FFFFFFFFFFFF0360 : 3E3C 00EF           		move.w	#240-1,d7
(1)  276/FFFFFFFFFFFF0364 : 7C00                		moveq	#0,d6
(1)  277/FFFFFFFFFFFF0366 :                     .xnext:
(1)  278/FFFFFFFFFFFF0366 : 2CC6                		move.l	d6,(a6)+
(1)  279/FFFFFFFFFFFF0368 : 51CF FFFC           		dbf	d7,.xnext
(1)  280/FFFFFFFFFFFF036C : 4DF8 A3C4           		lea	(RAM_VerScroll).w,a6
(1)  281/FFFFFFFFFFFF0370 : 3E3C 0013           		move.w	#(320/16)-1,d7
(1)  282/FFFFFFFFFFFF0374 :                     .ynext:
(1)  283/FFFFFFFFFFFF0374 : 2CC6                		move.l	d6,(a6)+
(1)  284/FFFFFFFFFFFF0376 : 51CF FFFC           		dbf	d7,.ynext
(1)  285/FFFFFFFFFFFF037A : 4DF8 A414           		lea	(RAM_Sprites).w,a6
(1)  286/FFFFFFFFFFFF037E : 3E3C 009F           		move.w	#((80*8)/4)-1,d7
(1)  287/FFFFFFFFFFFF0382 :                     .snext:
(1)  288/FFFFFFFFFFFF0382 : 2CC6                		move.l	d6,(a6)+
(1)  289/FFFFFFFFFFFF0384 : 51CF FFFC           		dbf	d7,.snext
(1)  290/FFFFFFFFFFFF0388 : 4DF8 A914           		lea	(RAM_Palette).w,a6
(1)  291/FFFFFFFFFFFF038C : 4BF8 AB94           		lea	(RAM_PaletteFd).w,a5
(1)  292/FFFFFFFFFFFF0390 : 3E3C 001F           		move.w	#(64/2)-1,d7
(1)  293/FFFFFFFFFFFF0394 :                     .pnext:
(1)  294/FFFFFFFFFFFF0394 : 2CC6                		move.l	d6,(a6)+
(1)  295/FFFFFFFFFFFF0396 : 2AC6                		move.l	d6,(a5)+
(1)  296/FFFFFFFFFFFF0398 : 51CF FFFA           		dbf	d7,.pnext
(1)  307/FFFFFFFFFFFF039C : 4E75                		rts
(1)  308/FFFFFFFFFFFF039E :                     
(1)  309/FFFFFFFFFFFF039E :                     ; ====================================================================
(1)  310/FFFFFFFFFFFF039E :                     ; ----------------------------------------------------------------
(1)  311/FFFFFFFFFFFF039E :                     ; Palette fade system, Genesis side
(1)  312/FFFFFFFFFFFF039E :                     ; ----------------------------------------------------------------
(1)  313/FFFFFFFFFFFF039E :                     
(1)  314/FFFFFFFFFFFF039E :                     ; --------------------------------------------------------
(1)  315/FFFFFFFFFFFF039E :                     ; FULL Fade in
(1)  316/FFFFFFFFFFFF039E :                     ; --------------------------------------------------------
(1)  317/FFFFFFFFFFFF039E :                     
(1)  318/FFFFFFFFFFFF039E :                     Video_FadeIn:
(1)  319/FFFFFFFFFFFF039E : 31FC 0001 B8E6      		move.w	#1,(RAM_FadeMdIncr).w	; Increment speed
(1)  320/FFFFFFFFFFFF03A4 : 31FC 0002 B8EE      		move.w	#2,(RAM_FadeMarsIncr).w
(1)  321/FFFFFFFFFFFF03AA : 31FC 0001 B8E8      		move.w	#1,(RAM_FadeMdDelay).w	; Delay by
(1)  322/FFFFFFFFFFFF03B0 : 31FC 0000 B8F0      		move.w	#0,(RAM_FadeMarsDelay).w
(1)  323/FFFFFFFFFFFF03B6 : 31FC 0001 B8E4      		move.w	#1,(RAM_FadeMdReq).w	; Fade-in task
(1)  324/FFFFFFFFFFFF03BC : 31FC 0001 B8EC      		move.w	#1,(RAM_FadeMarsReq).w
(1)  325/FFFFFFFFFFFF03C2 : 6026                		bra	Video_WaitFade
(1)  326/FFFFFFFFFFFF03C4 :                     
(1)  327/FFFFFFFFFFFF03C4 :                     ; --------------------------------------------------------
(1)  328/FFFFFFFFFFFF03C4 :                     ; FULL Fade out
(1)  329/FFFFFFFFFFFF03C4 :                     ; --------------------------------------------------------
(1)  330/FFFFFFFFFFFF03C4 :                     
(1)  331/FFFFFFFFFFFF03C4 :                     Video_FadeOut:
(1)  332/FFFFFFFFFFFF03C4 : 31FC 0001 B8E6      		move.w	#1,(RAM_FadeMdIncr).w	; Increment speed
(1)  333/FFFFFFFFFFFF03CA : 31FC 0002 B8EE      		move.w	#2,(RAM_FadeMarsIncr).w
(1)  334/FFFFFFFFFFFF03D0 : 31FC 0001 B8E8      		move.w	#1,(RAM_FadeMdDelay).w	; Delay by
(1)  335/FFFFFFFFFFFF03D6 : 31FC 0000 B8F0      		move.w	#0,(RAM_FadeMarsDelay).w
(1)  336/FFFFFFFFFFFF03DC : 31FC 0002 B8E4      		move.w	#2,(RAM_FadeMdReq).w	; Fade-in task
(1)  337/FFFFFFFFFFFF03E2 : 31FC 0002 B8EC      		move.w	#2,(RAM_FadeMarsReq).w
(1)  338/FFFFFFFFFFFF03E8 : 4E71                		bra	Video_WaitFade
(1)  339/FFFFFFFFFFFF03EA :                     
(1)  340/FFFFFFFFFFFF03EA :                     ; --------------------------------------------------------
(1)  341/FFFFFFFFFFFF03EA :                     ; Video_WaitFade
(1)  342/FFFFFFFFFFFF03EA :                     ; --------------------------------------------------------
(1)  343/FFFFFFFFFFFF03EA :                     
(1)  344/FFFFFFFFFFFF03EA :                     Video_WaitFade:
(1)  345/FFFFFFFFFFFF03EA : 6100 0BC8           		bsr	System_Render
(1)  353/FFFFFFFFFFFF03EE : 6140                		bsr	Video_DoPalFade
(1)  354/FFFFFFFFFFFF03F0 : 3E38 B8E4           		move.w	(RAM_FadeMdReq).w,d7
(1)  356/FFFFFFFFFFFF03F4 : 4A47                		tst.w	d7
(1)  357/FFFFFFFFFFFF03F6 : 66F2                		bne.s	Video_WaitFade
(1)  358/FFFFFFFFFFFF03F8 : 4E75                		rts
(1)  359/FFFFFFFFFFFF03FA :                     
(1)  360/FFFFFFFFFFFF03FA :                     ; --------------------------------------------------------
(1)  361/FFFFFFFFFFFF03FA :                     ; Video_RunFade
(1)  362/FFFFFFFFFFFF03FA :                     ;
(1)  363/FFFFFFFFFFFF03FA :                     ; Processes palette fading for one frame returns
(1)  364/FFFFFFFFFFFF03FA :                     ; status on exit.
(1)  365/FFFFFFFFFFFF03FA :                     ;
(1)  366/FFFFFFFFFFFF03FA :                     ; Returns:
(1)  367/FFFFFFFFFFFF03FA :                     ; bne | Still active
(1)  368/FFFFFFFFFFFF03FA :                     ; beq | Finished
(1)  369/FFFFFFFFFFFF03FA :                     ;
(1)  370/FFFFFFFFFFFF03FA :                     ; Breaks:
(1)  371/FFFFFFFFFFFF03FA :                     ; All
(1)  372/FFFFFFFFFFFF03FA :                     ;
(1)  373/FFFFFFFFFFFF03FA :                     ; Notes:
(1)  374/FFFFFFFFFFFF03FA :                     ; Call System_Render FIRST before calling this
(1)  375/FFFFFFFFFFFF03FA :                     ; --------------------------------------------------------
(1)  376/FFFFFFFFFFFF03FA :                     
(1)  377/FFFFFFFFFFFF03FA :                     Video_RunFade:
(1)  385/FFFFFFFFFFFF03FA : 6134                		bsr	Video_DoPalFade
(1)  386/FFFFFFFFFFFF03FC : 3E38 B8E4           		move.w	(RAM_FadeMdReq).w,d7
(1)  388/FFFFFFFFFFFF0400 : 4E75                		rts
(1)  389/FFFFFFFFFFFF0402 :                     
(1)  390/FFFFFFFFFFFF0402 :                     ; --------------------------------------------------------
(1)  391/FFFFFFFFFFFF0402 :                     ; Video_LoadPal, Video_FadePal
(1)  392/FFFFFFFFFFFF0402 :                     ;
(1)  393/FFFFFFFFFFFF0402 :                     ; Loads VDP palette data to either
(1)  394/FFFFFFFFFFFF0402 :                     ; CURRENT palette or FADING palette buffers.
(1)  395/FFFFFFFFFFFF0402 :                     ;
(1)  396/FFFFFFFFFFFF0402 :                     ; Input:
(1)  397/FFFFFFFFFFFF0402 :                     ; a0   | Palette data
(1)  398/FFFFFFFFFFFF0402 :                     ; d0.w | Starting color index
(1)  399/FFFFFFFFFFFF0402 :                     ; d1.w | Number of colors
(1)  400/FFFFFFFFFFFF0402 :                     ;
(1)  401/FFFFFFFFFFFF0402 :                     ; Breaks:
(1)  402/FFFFFFFFFFFF0402 :                     ; d6-d7,a6
(1)  403/FFFFFFFFFFFF0402 :                     ; --------------------------------------------------------
(1)  404/FFFFFFFFFFFF0402 :                     
(1)  405/FFFFFFFFFFFF0402 :                     Video_FadePal:
(1)  406/FFFFFFFFFFFF0402 : 4DF8 AB94           		lea	(RAM_PaletteFd).w,a6
(1)  407/FFFFFFFFFFFF0406 : 4278 B8EA           		clr.w	(RAM_FadeMdTmr).w	; Clears fading timer.
(1)  408/FFFFFFFFFFFF040A : 6004                		bra.s	vidMd_Pal
(1)  409/FFFFFFFFFFFF040C :                     Video_LoadPal:
(1)  410/FFFFFFFFFFFF040C : 4DF8 A914           		lea	(RAM_Palette).w,a6
(1)  411/FFFFFFFFFFFF0410 :                     vidMd_Pal:
(1)  412/FFFFFFFFFFFF0410 : 2A48                		move.l	a0,a5
(1)  413/FFFFFFFFFFFF0412 : 7E00                		moveq	#0,d7
(1)  414/FFFFFFFFFFFF0414 : 3E00                		move.w	d0,d7
(1)  415/FFFFFFFFFFFF0416 : DE47                		add.w	d7,d7
(1)  416/FFFFFFFFFFFF0418 : DCC7                		adda	d7,a6
(1)  417/FFFFFFFFFFFF041A : 3E01                		move.w	d1,d7
(1)  418/FFFFFFFFFFFF041C : 0447 0001           		subi.w	#1,d7
(1)  419/FFFFFFFFFFFF0420 : 3C02                		move.w	d2,d6
(1)  420/FFFFFFFFFFFF0422 : 0246 0001           		andi.w	#1,d6
(1)  421/FFFFFFFFFFFF0426 : E25E                		ror.w	#1,d6
(1)  422/FFFFFFFFFFFF0428 :                     .loop:
(1)  423/FFFFFFFFFFFF0428 : 3CDD                		move.w	(a5)+,(a6)+
(1)  424/FFFFFFFFFFFF042A : 51CF FFFC           		dbf	d7,.loop
(1)  425/FFFFFFFFFFFF042E : 4E75                		rts
(1)  426/FFFFFFFFFFFF0430 :                     
(1)  427/FFFFFFFFFFFF0430 :                     ; --------------------------------------------------------
(1)  428/FFFFFFFFFFFF0430 :                     ; Video_DoPalFade
(1)  429/FFFFFFFFFFFF0430 :                     ;
(1)  430/FFFFFFFFFFFF0430 :                     ; RAM_ReqFadeMars (WORD):
(1)  431/FFFFFFFFFFFF0430 :                     ; $00 - No task or finished.
(1)  432/FFFFFFFFFFFF0430 :                     ; $01 - Fade in
(1)  433/FFFFFFFFFFFF0430 :                     ; $02 - Fade out to black
(1)  434/FFFFFFFFFFFF0430 :                     ;
(1)  435/FFFFFFFFFFFF0430 :                     ; NOTE: ONLY CALL THIS OUTSIDE OF VBLANK
(1)  436/FFFFFFFFFFFF0430 :                     ; --------------------------------------------------------
(1)  437/FFFFFFFFFFFF0430 :                     
(1)  438/FFFFFFFFFFFF0430 :                     Video_DoPalFade:
(1)  439/FFFFFFFFFFFF0430 : 0478 0001 B8EA      		subi.w	#1,(RAM_FadeMdTmr).w
(1)  440/FFFFFFFFFFFF0436 : 6A14                		bpl.s	.active
(1)  441/FFFFFFFFFFFF0438 : 31F8 B8E8 B8EA      		move.w	(RAM_FadeMdDelay).w,(RAM_FadeMdTmr).w
(1)  442/FFFFFFFFFFFF043E : 3E38 B8E4           		move.w	(RAM_FadeMdReq).w,d7
(1)  443/FFFFFFFFFFFF0442 : DE47                		add.w	d7,d7
(1)  444/FFFFFFFFFFFF0444 : 3E3B 7008           		move.w	.fade_list(pc,d7.w),d7
(1)  445/FFFFFFFFFFFF0448 : 4EFB 7004           		jmp	.fade_list(pc,d7.w)
(1)  446/FFFFFFFFFFFF044C :                     .active:
(1)  447/FFFFFFFFFFFF044C : 4E75                		rts
(1)  448/FFFFFFFFFFFF044E :                     
(1)  449/FFFFFFFFFFFF044E :                     ; --------------------------------------------
(1)  450/FFFFFFFFFFFF044E :                     
(1)  451/FFFFFFFFFFFF044E :                     .fade_list:
(1)  452/FFFFFFFFFFFF044E : 0006                		dc.w .fade_done-.fade_list
(1)  453/FFFFFFFFFFFF0450 : 0008                		dc.w .fade_in-.fade_list
(1)  454/FFFFFFFFFFFF0452 : 00AA                		dc.w .fade_out-.fade_list
(1)  455/FFFFFFFFFFFF0454 :                     
(1)  456/FFFFFFFFFFFF0454 :                     ; --------------------------------------------
(1)  457/FFFFFFFFFFFF0454 :                     ; No fade or finished.
(1)  458/FFFFFFFFFFFF0454 :                     ; --------------------------------------------
(1)  459/FFFFFFFFFFFF0454 :                     
(1)  460/FFFFFFFFFFFF0454 :                     .fade_done:
(1)  461/FFFFFFFFFFFF0454 : 4E75                		rts
(1)  462/FFFFFFFFFFFF0456 :                     
(1)  463/FFFFFFFFFFFF0456 :                     ; --------------------------------------------
(1)  464/FFFFFFFFFFFF0456 :                     ; Fade in
(1)  465/FFFFFFFFFFFF0456 :                     ; --------------------------------------------
(1)  466/FFFFFFFFFFFF0456 :                     
(1)  467/FFFFFFFFFFFF0456 :                     .fade_in:
(1)  468/FFFFFFFFFFFF0456 : 4DF8 AB94           		lea	(RAM_PaletteFd).w,a6
(1)  469/FFFFFFFFFFFF045A : 4BF8 A914           		lea	(RAM_Palette).w,a5
(1)  470/FFFFFFFFFFFF045E : 7040                		moveq	#64,d0				; Num of colors
(1)  471/FFFFFFFFFFFF0460 : 3238 B8E6           		move.w	(RAM_FadeMdIncr).w,d1		; Speed
(1)  472/FFFFFFFFFFFF0464 : D241                		add.w	d1,d1
(1)  473/FFFFFFFFFFFF0466 : 3C00                		move.w	d0,d6
(1)  474/FFFFFFFFFFFF0468 : 4846                		swap	d6
(1)  475/FFFFFFFFFFFF046A : 0440 0001           		subi.w	#1,d0
(1)  476/FFFFFFFFFFFF046E :                     .nxt_pal:
(1)  477/FFFFFFFFFFFF046E : 4242                		clr.w	d2		; Reset finished colorbits
(1)  478/FFFFFFFFFFFF0470 : 3E16                		move.w	(a6),d7		; d7 - Input
(1)  479/FFFFFFFFFFFF0472 : 3C15                		move.w	(a5),d6		; d6 - Output
(1)  480/FFFFFFFFFFFF0474 : 3607                		move.w	d7,d3		; RED
(1)  481/FFFFFFFFFFFF0476 : 3806                		move.w	d6,d4
(1)  482/FFFFFFFFFFFF0478 : 0246 0EE0           		andi.w	#%0000111011100000,d6
(1)  483/FFFFFFFFFFFF047C : 0244 000E           		andi.w	#%0000000000001110,d4
(1)  484/FFFFFFFFFFFF0480 : 0243 000E           		andi.w	#%0000000000001110,d3
(1)  485/FFFFFFFFFFFF0484 : D841                		add.w	d1,d4
(1)  486/FFFFFFFFFFFF0486 : B843                		cmp.w	d3,d4
(1)  487/FFFFFFFFFFFF0488 : 6506                		bcs.s	.no_red
(1)  488/FFFFFFFFFFFF048A : 3803                		move.w	d3,d4
(1)  489/FFFFFFFFFFFF048C : 0042 0001           		ori.w	#%001,d2	; RED is ready
(1)  490/FFFFFFFFFFFF0490 :                     .no_red:
(1)  491/FFFFFFFFFFFF0490 : 8C44                		or.w	d4,d6
(1)  492/FFFFFFFFFFFF0492 : E949                		lsl.w	#4,d1
(1)  493/FFFFFFFFFFFF0494 : 3607                		move.w	d7,d3		; GREEN
(1)  494/FFFFFFFFFFFF0496 : 3806                		move.w	d6,d4
(1)  495/FFFFFFFFFFFF0498 : 0246 0E0E           		andi.w	#%0000111000001110,d6
(1)  496/FFFFFFFFFFFF049C : 0244 00E0           		andi.w	#%0000000011100000,d4
(1)  497/FFFFFFFFFFFF04A0 : 0243 00E0           		andi.w	#%0000000011100000,d3
(1)  498/FFFFFFFFFFFF04A4 : D841                		add.w	d1,d4
(1)  499/FFFFFFFFFFFF04A6 : B843                		cmp.w	d3,d4
(1)  500/FFFFFFFFFFFF04A8 : 6506                		bcs.s	.no_grn
(1)  501/FFFFFFFFFFFF04AA : 3803                		move.w	d3,d4
(1)  502/FFFFFFFFFFFF04AC : 0042 0002           		ori.w	#%010,d2	; GREEN is ready
(1)  503/FFFFFFFFFFFF04B0 :                     .no_grn:
(1)  504/FFFFFFFFFFFF04B0 : 8C44                		or.w	d4,d6
(1)  505/FFFFFFFFFFFF04B2 : E949                		lsl.w	#4,d1
(1)  506/FFFFFFFFFFFF04B4 : 3607                		move.w	d7,d3		; BLUE
(1)  507/FFFFFFFFFFFF04B6 : 3806                		move.w	d6,d4
(1)  508/FFFFFFFFFFFF04B8 : 0246 00EE           		andi.w	#%0000000011101110,d6
(1)  509/FFFFFFFFFFFF04BC : 0244 0E00           		andi.w	#%0000111000000000,d4
(1)  510/FFFFFFFFFFFF04C0 : 0243 0E00           		andi.w	#%0000111000000000,d3
(1)  511/FFFFFFFFFFFF04C4 : D841                		add.w	d1,d4
(1)  512/FFFFFFFFFFFF04C6 : B843                		cmp.w	d3,d4
(1)  513/FFFFFFFFFFFF04C8 : 6506                		bcs.s	.no_blu
(1)  514/FFFFFFFFFFFF04CA : 3803                		move.w	d3,d4
(1)  515/FFFFFFFFFFFF04CC : 0042 0004           		ori.w	#%100,d2	; BLUE is ready
(1)  516/FFFFFFFFFFFF04D0 :                     .no_blu:
(1)  517/FFFFFFFFFFFF04D0 : 8C44                		or.w	d4,d6
(1)  518/FFFFFFFFFFFF04D2 : E049                		lsr.w	#8,d1
(1)  519/FFFFFFFFFFFF04D4 : 3AC6                		move.w	d6,(a5)+
(1)  520/FFFFFFFFFFFF04D6 : DCFC 0002           		adda	#2,a6
(1)  521/FFFFFFFFFFFF04DA : 0C42 0007           		cmpi.w	#%111,d2
(1)  522/FFFFFFFFFFFF04DE : 6608                		bne.s	.no_fnsh
(1)  523/FFFFFFFFFFFF04E0 : 4846                		swap	d6
(1)  524/FFFFFFFFFFFF04E2 : 0446 0001           		subi.w	#1,d6
(1)  525/FFFFFFFFFFFF04E6 : 4846                		swap	d6
(1)  526/FFFFFFFFFFFF04E8 :                     .no_fnsh:
(1)  527/FFFFFFFFFFFF04E8 : 51C8 FF84           		dbf	d0,.nxt_pal
(1)  528/FFFFFFFFFFFF04EC : 4846                		swap	d6
(1)  529/FFFFFFFFFFFF04EE : 4A46                		tst.w	d6
(1)  530/FFFFFFFFFFFF04F0 : 6604                		bne.s	.no_move
(1)  531/FFFFFFFFFFFF04F2 : 4278 B8E4           		clr.w	(RAM_FadeMdReq).w
(1)  532/FFFFFFFFFFFF04F6 :                     .no_move:
(1)  533/FFFFFFFFFFFF04F6 : 4E75                		rts
(1)  534/FFFFFFFFFFFF04F8 :                     
(1)  535/FFFFFFFFFFFF04F8 :                     ; --------------------------------------------
(1)  536/FFFFFFFFFFFF04F8 :                     ; Fade out
(1)  537/FFFFFFFFFFFF04F8 :                     ; --------------------------------------------
(1)  538/FFFFFFFFFFFF04F8 :                     
(1)  539/FFFFFFFFFFFF04F8 :                     .fade_out:
(1)  540/FFFFFFFFFFFF04F8 : 4DF8 A914           		lea	(RAM_Palette).w,a6
(1)  541/FFFFFFFFFFFF04FC : 7040                		moveq	#64,d0				; Num of colors
(1)  542/FFFFFFFFFFFF04FE : 3238 B8E6           		move.w	(RAM_FadeMdIncr).w,d1		; Speed
(1)  543/FFFFFFFFFFFF0502 : 3C00                		move.w	d0,d6
(1)  544/FFFFFFFFFFFF0504 : 4846                		swap	d6
(1)  545/FFFFFFFFFFFF0506 : 0440 0001           		subi.w	#1,d0
(1)  546/FFFFFFFFFFFF050A :                     .nxt_pal_o:
(1)  547/FFFFFFFFFFFF050A : 4242                		clr.w	d2			; Reset finished colorbits
(1)  548/FFFFFFFFFFFF050C : 3E16                		move.w	(a6),d7			; d7 - Input
(1)  549/FFFFFFFFFFFF050E : 3C07                		move.w	d7,d6
(1)  550/FFFFFFFFFFFF0510 : 0247 0EE0           		andi.w	#%0000111011100000,d7
(1)  551/FFFFFFFFFFFF0514 : 0246 000E           		andi.w	#%0000000000001110,d6
(1)  552/FFFFFFFFFFFF0518 : 9C41                		sub.w	d1,d6
(1)  553/FFFFFFFFFFFF051A : 6A06                		bpl.s	.no_red_o
(1)  554/FFFFFFFFFFFF051C : 4246                		clr.w	d6
(1)  555/FFFFFFFFFFFF051E : 0042 0001           		ori.w	#%001,d2		; RED is ready
(1)  556/FFFFFFFFFFFF0522 :                     .no_red_o:
(1)  557/FFFFFFFFFFFF0522 : 8E46                		or.w	d6,d7
(1)  558/FFFFFFFFFFFF0524 : E949                		lsl.w	#4,d1
(1)  559/FFFFFFFFFFFF0526 : 3C07                		move.w	d7,d6
(1)  560/FFFFFFFFFFFF0528 : 0247 0E0E           		andi.w	#%0000111000001110,d7
(1)  561/FFFFFFFFFFFF052C : 0246 00E0           		andi.w	#%0000000011100000,d6
(1)  562/FFFFFFFFFFFF0530 : 9C41                		sub.w	d1,d6
(1)  563/FFFFFFFFFFFF0532 : 6A06                		bpl.s	.no_grn_o
(1)  564/FFFFFFFFFFFF0534 : 4246                		clr.w	d6
(1)  565/FFFFFFFFFFFF0536 : 0042 0002           		ori.w	#%010,d2		; GREEN is ready
(1)  566/FFFFFFFFFFFF053A :                     .no_grn_o:
(1)  567/FFFFFFFFFFFF053A : 8E46                		or.w	d6,d7
(1)  568/FFFFFFFFFFFF053C : E949                		lsl.w	#4,d1
(1)  569/FFFFFFFFFFFF053E : 3C07                		move.w	d7,d6
(1)  570/FFFFFFFFFFFF0540 : 0247 00EE           		andi.w	#%0000000011101110,d7
(1)  571/FFFFFFFFFFFF0544 : 0246 0E00           		andi.w	#%0000111000000000,d6
(1)  572/FFFFFFFFFFFF0548 : 9C41                		sub.w	d1,d6
(1)  573/FFFFFFFFFFFF054A : 6A06                		bpl.s	.no_blu_o
(1)  574/FFFFFFFFFFFF054C : 4246                		clr.w	d6
(1)  575/FFFFFFFFFFFF054E : 0042 0004           		ori.w	#%100,d2		; BLUE is ready
(1)  576/FFFFFFFFFFFF0552 :                     .no_blu_o:
(1)  577/FFFFFFFFFFFF0552 : 8E46                		or.w	d6,d7
(1)  578/FFFFFFFFFFFF0554 : E049                		lsr.w	#8,d1
(1)  579/FFFFFFFFFFFF0556 : 3CC7                		move.w	d7,(a6)+
(1)  580/FFFFFFFFFFFF0558 : 0C42 0007           		cmpi.w	#%111,d2
(1)  581/FFFFFFFFFFFF055C : 6608                		bne.s	.no_fnsh_o
(1)  582/FFFFFFFFFFFF055E : 4846                		swap	d6
(1)  583/FFFFFFFFFFFF0560 : 0446 0001           		subi.w	#1,d6
(1)  584/FFFFFFFFFFFF0564 : 4846                		swap	d6
(1)  585/FFFFFFFFFFFF0566 :                     .no_fnsh_o:
(1)  586/FFFFFFFFFFFF0566 : 51C8 FFA2           		dbf	d0,.nxt_pal_o
(1)  587/FFFFFFFFFFFF056A : 4846                		swap	d6
(1)  588/FFFFFFFFFFFF056C : 4A46                		tst.w	d6
(1)  589/FFFFFFFFFFFF056E : 6604                		bne.s	.no_move_o
(1)  590/FFFFFFFFFFFF0570 : 4278 B8E4           		clr.w	(RAM_FadeMdReq).w
(1)  591/FFFFFFFFFFFF0574 :                     .no_move_o:
(1)  592/FFFFFFFFFFFF0574 : 4E75                		rts
(1)  593/FFFFFFFFFFFF0576 :                     
(1)  594/FFFFFFFFFFFF0576 :                     ; ====================================================================
(1)  595/FFFFFFFFFFFF0576 :                     ; --------------------------------------------------------
(1)  596/FFFFFFFFFFFF0576 :                     ; Genesis DMA
(1)  597/FFFFFFFFFFFF0576 :                     ; --------------------------------------------------------
(1)  598/FFFFFFFFFFFF0576 :                     
(1)  599/FFFFFFFFFFFF0576 :                     ; --------------------------------------------------------
(1)  600/FFFFFFFFFFFF0576 :                     ; Video_LoadArt
(1)  601/FFFFFFFFFFFF0576 :                     ;
(1)  602/FFFFFFFFFFFF0576 :                     ; Loads VDP Graphics using DMA
(1)  603/FFFFFFFFFFFF0576 :                     ;
(1)  604/FFFFFFFFFFFF0576 :                     ; Input:
(1)  605/FFFFFFFFFFFF0576 :                     ; d0.l | Graphics data (NOT a0)
(1)  606/FFFFFFFFFFFF0576 :                     ; d1.w | VRAM location, cell_vram(vram_pos)
(1)  607/FFFFFFFFFFFF0576 :                     ; d2.w | Size
(1)  608/FFFFFFFFFFFF0576 :                     ;
(1)  609/FFFFFFFFFFFF0576 :                     ; Breaks:
(1)  610/FFFFFFFFFFFF0576 :                     ; d4-d7,a4
(1)  611/FFFFFFFFFFFF0576 :                     ;
(1)  612/FFFFFFFFFFFF0576 :                     ; Notes:
(1)  613/FFFFFFFFFFFF0576 :                     ; - For a fast transfer call this during VBlank
(1)  614/FFFFFFFFFFFF0576 :                     ; - 32X: MAKE SURE THE SH2 SIDE IS NOT READING ROM
(1)  615/FFFFFFFFFFFF0576 :                     ;        BEFORE CALLING THIS.
(1)  616/FFFFFFFFFFFF0576 :                     ; --------------------------------------------------------
(1)  617/FFFFFFFFFFFF0576 :                     
(1)  618/FFFFFFFFFFFF0576 :                     Video_LoadArt:
(1)  619/FFFFFFFFFFFF0576 : 2A00                		move.l	d0,d5
(1)  620/FFFFFFFFFFFF0578 : DA42                		add.w	d2,d5
(1)  621/FFFFFFFFFFFF057A : 6430                		bcc.s	.normal
(1)  622/FFFFFFFFFFFF057C : 2A00                		move.l	d0,d5		; <-- DOUBLE TRANSFER
(1)  623/FFFFFFFFFFFF057E : 3C01                		move.w	d1,d6
(1)  624/FFFFFFFFFFFF0580 : 2E05                		move.l	d5,d7		; Top
(1)  625/FFFFFFFFFFFF0582 : 0687 0001 0000      		addi.l	#$010000,d7
(1)  626/FFFFFFFFFFFF0588 : 0287 00FF 0000      		andi.l	#$FF0000,d7
(1)  627/FFFFFFFFFFFF058E : 9E80                		sub.l	d0,d7
(1)  628/FFFFFFFFFFFF0590 : 6120                		bsr.s	.mk_set
(1)  629/FFFFFFFFFFFF0592 : 2A00                		move.l	d0,d5		; Bottom
(1)  630/FFFFFFFFFFFF0594 : 0685 0001 0000      		addi.l	#$010000,d5
(1)  631/FFFFFFFFFFFF059A : 0285 00FF 0000      		andi.l	#$FF0000,d5
(1)  632/FFFFFFFFFFFF05A0 : 2C05                		move.l	d5,d6
(1)  633/FFFFFFFFFFFF05A2 : 9C80                		sub.l	d0,d6
(1)  634/FFFFFFFFFFFF05A4 : 3E02                		move.w	d2,d7
(1)  635/FFFFFFFFFFFF05A6 : 9E46                		sub.w	d6,d7
(1)  636/FFFFFFFFFFFF05A8 : DC41                		add.w	d1,d6
(1)  637/FFFFFFFFFFFF05AA : 6006                		bra.s	.mk_set
(1)  638/FFFFFFFFFFFF05AC :                     .normal:
(1)  639/FFFFFFFFFFFF05AC : 2A00                		move.l	d0,d5
(1)  640/FFFFFFFFFFFF05AE : 3C01                		move.w	d1,d6
(1)  641/FFFFFFFFFFFF05B0 : 3E02                		move.w	d2,d7
(1)  642/FFFFFFFFFFFF05B2 :                     ; d7 - size
(1)  643/FFFFFFFFFFFF05B2 :                     ; d6 - vram
(1)  644/FFFFFFFFFFFF05B2 :                     ; d5 - data
(1)  645/FFFFFFFFFFFF05B2 :                     .mk_set:
(1)  646/FFFFFFFFFFFF05B2 : 49F9 00C0 0004      		lea	(vdp_ctrl),a4
(1)  647/FFFFFFFFFFFF05B8 : 383C 8100           		move.w	#$8100,d4		; DMA ON
(1)  648/FFFFFFFFFFFF05BC : 1838 B8F7           		move.b	(RAM_VdpRegs+1).w,d4
(1)  649/FFFFFFFFFFFF05C0 : 08C4 0004           		bset	#bitDmaEnbl,d4
(1)  650/FFFFFFFFFFFF05C4 : 3884                		move.w	d4,(a4)
(1)  651/FFFFFFFFFFFF05C6 :                     
(1)  653/FFFFFFFFFFFF05C6 : 4846                		swap	d6
(1)  654/FFFFFFFFFFFF05C8 : 4845                		swap	d5
(1)  655/FFFFFFFFFFFF05CA : 3C05                		move.w	d5,d6
(1)  656/FFFFFFFFFFFF05CC : 4845                		swap	d5
(1)  657/FFFFFFFFFFFF05CE : 0246 00F0           		andi.w	#$F0,d6
(1)  658/FFFFFFFFFFFF05D2 : 0C06 0020           		cmpi.b	#$20,d6
(1)  659/FFFFFFFFFFFF05D6 : 660A                		bne.s	.non_wram
(1)  660/FFFFFFFFFFFF05D8 : 48E7 0600           		movem.l	d5-d6,-(sp)		; <-- Save data on stack
(1)  661/FFFFFFFFFFFF05DC : 0685 0000 0002      		addi.l	#2,d5
(1)  662/FFFFFFFFFFFF05E2 :                     .non_wram:
(1)  663/FFFFFFFFFFFF05E2 : 4846                		swap	d6
(1)  665/FFFFFFFFFFFF05E4 : 614C                		bsr.s	.shared_setup
(1)  666/FFFFFFFFFFFF05E6 : 3886                		move.w	d6,(a4)
(1)  667/FFFFFFFFFFFF05E8 : 6100 0A18           		bsr	System_DmaEnter_ROM
(1)  668/FFFFFFFFFFFF05EC : 3887                		move.w	d7,(a4)			; <-- second write
(1)  669/FFFFFFFFFFFF05EE : 6100 0A16           		bsr	System_DmaExit_ROM
(1)  670/FFFFFFFFFFFF05F2 : 383C 8100           		move.w	#$8100,d4		; DMA OFF
(1)  671/FFFFFFFFFFFF05F6 : 1838 B8F7           		move.b	(RAM_VdpRegs+1).w,d4
(1)  672/FFFFFFFFFFFF05FA : 3884                		move.w	d4,(a4)
(1)  673/FFFFFFFFFFFF05FC :                     
(1)  675/FFFFFFFFFFFF05FC : 4CDF 0060           		movem.l	(sp)+,d5-d6		; --> Get data as d7
(1)  676/FFFFFFFFFFFF0600 : 2E05                		move.l	d5,d7
(1)  677/FFFFFFFFFFFF0602 : 0C06 0020           		cmpi.b	#$20,d6			; Word-RAM?
(1)  678/FFFFFFFFFFFF0606 : 6626                		bne.s	.non_wram_l
(1)  679/FFFFFFFFFFFF0608 : 4846                		swap	d6
(1)  680/FFFFFFFFFFFF060A : 3E06                		move.w	d6,d7			; Destination
(1)  681/FFFFFFFFFFFF060C : 0286 0000 3FFF      		andi.l	#$3FFF,d6
(1)  682/FFFFFFFFFFFF0612 : 0046 4000           		ori.w	#$4000,d6
(1)  683/FFFFFFFFFFFF0616 : E04F                		lsr.w	#8,d7
(1)  684/FFFFFFFFFFFF0618 : EC4F                		lsr.w	#6,d7
(1)  685/FFFFFFFFFFFF061A : 0247 0003           		andi.w	#%11,d7
(1)  686/FFFFFFFFFFFF061E : 3886                		move.w	d6,(a4)
(1)  687/FFFFFFFFFFFF0620 : 3887                		move.w	d7,(a4)			; <-- second write
(1)  688/FFFFFFFFFFFF0622 : 2E0C                		move.l	a4,d7
(1)  689/FFFFFFFFFFFF0624 : 2845                		move.l	d5,a4
(1)  690/FFFFFFFFFFFF0626 : 3C14                		move.w	(a4),d6
(1)  691/FFFFFFFFFFFF0628 : 2847                		move.l	d7,a4
(1)  692/FFFFFFFFFFFF062A : 3946 FFFC           		move.w	d6,-4(a4)		; DATA port -4
(1)  693/FFFFFFFFFFFF062E :                     .non_wram_l:
(1)  695/FFFFFFFFFFFF062E : 4E75                		rts
(1)  696/FFFFFFFFFFFF0630 :                     
(1)  697/FFFFFFFFFFFF0630 :                     .from_ram:
(1)  698/FFFFFFFFFFFF0630 : 4E75                		rts
(1)  699/FFFFFFFFFFFF0632 :                     
(1)  700/FFFFFFFFFFFF0632 :                     .shared_setup:
(1)  701/FFFFFFFFFFFF0632 : 0287 0000 FFFE      		andi.l	#$0000FFFE,d7
(1)  702/FFFFFFFFFFFF0638 : EF8F                		lsl.l	#7,d7
(1)  703/FFFFFFFFFFFF063A : E04F                		lsr.w	#8,d7
(1)  704/FFFFFFFFFFFF063C : 0087 9400 9300      		ori.l	#$94009300,d7
(1)  705/FFFFFFFFFFFF0642 : 2887                		move.l	d7,(a4)
(1)  706/FFFFFFFFFFFF0644 : E28D                  		lsr.l	#1,d5			; d5 - Source
(1)  707/FFFFFFFFFFFF0646 : 2E3C 9600 9500       		move.l	#$96009500,d7
(1)  708/FFFFFFFFFFFF064C : 1E05                 		move.b	d5,d7
(1)  709/FFFFFFFFFFFF064E : E08D                 		lsr.l	#8,d5
(1)  710/FFFFFFFFFFFF0650 : 4847                 		swap	d7
(1)  711/FFFFFFFFFFFF0652 : 1E05                 		move.b	d5,d7
(1)  712/FFFFFFFFFFFF0654 : 2887                 		move.l	d7,(a4)
(1)  713/FFFFFFFFFFFF0656 : 3E3C 9700            		move.w	#$9700,d7
(1)  714/FFFFFFFFFFFF065A : E08D                 		lsr.l	#8,d5
(1)  715/FFFFFFFFFFFF065C : 1E05                 		move.b	d5,d7
(1)  716/FFFFFFFFFFFF065E : 3887                 		move.w	d7,(a4)
(1)  717/FFFFFFFFFFFF0660 : 3E06                		move.w	d6,d7			; Destination
(1)  718/FFFFFFFFFFFF0662 : 0286 0000 3FFF      		andi.l	#$3FFF,d6
(1)  719/FFFFFFFFFFFF0668 : 0046 4000           		ori.w	#$4000,d6
(1)  720/FFFFFFFFFFFF066C : E04F                		lsr.w	#8,d7
(1)  721/FFFFFFFFFFFF066E : EC4F                		lsr.w	#6,d7
(1)  722/FFFFFFFFFFFF0670 : 0247 0003           		andi.w	#%11,d7
(1)  723/FFFFFFFFFFFF0674 : 0047 0080           		ori.w	#$80,d7
(1)  724/FFFFFFFFFFFF0678 : 4E75                		rts
(1)  725/FFFFFFFFFFFF067A :                     
(1)  726/FFFFFFFFFFFF067A :                     ; --------------------------------------------------------
(1)  727/FFFFFFFFFFFF067A :                     ; Video_DmaMkEntry
(1)  728/FFFFFFFFFFFF067A :                     ;
(1)  729/FFFFFFFFFFFF067A :                     ; Sets a new DMA graphics transfer entry to the
(1)  730/FFFFFFFFFFFF067A :                     ; BLAST list to be processed on VBlank for the
(1)  731/FFFFFFFFFFFF067A :                     ; next frame.
(1)  732/FFFFFFFFFFFF067A :                     ;
(1)  733/FFFFFFFFFFFF067A :                     ; Input:
(1)  734/FFFFFFFFFFFF067A :                     ; d0.l | Graphics data location
(1)  735/FFFFFFFFFFFF067A :                     ; d1.w | VRAM location, cell_vram(vram_pos)
(1)  736/FFFFFFFFFFFF067A :                     ; d2.w | Size
(1)  737/FFFFFFFFFFFF067A :                     ;
(1)  738/FFFFFFFFFFFF067A :                     ; Breaks:
(1)  739/FFFFFFFFFFFF067A :                     ; d5-d7,a6
(1)  740/FFFFFFFFFFFF067A :                     ;
(1)  741/FFFFFFFFFFFF067A :                     ; Notes:
(1)  742/FFFFFFFFFFFF067A :                     ; - Can only be called during DISPLAY ONLY.
(1)  743/FFFFFFFFFFFF067A :                     ; - For loading graphics normally use Video_LoadArt
(1)  744/FFFFFFFFFFFF067A :                     ; --------------------------------------------------------
(1)  745/FFFFFFFFFFFF067A :                     
(1)  746/FFFFFFFFFFFF067A :                     Video_DmaMkEntry:
(1)  747/FFFFFFFFFFFF067A : 2A00                		move.l	d0,d5
(1)  748/FFFFFFFFFFFF067C : DA42                		add.w	d2,d5
(1)  749/FFFFFFFFFFFF067E : 6430                		bcc.s	.normal
(1)  750/FFFFFFFFFFFF0680 : 2A00                		move.l	d0,d5		; d5 - TOP point
(1)  751/FFFFFFFFFFFF0682 : 3C01                		move.w	d1,d6		; d6 - VRAM position
(1)  752/FFFFFFFFFFFF0684 : 2E05                		move.l	d5,d7
(1)  753/FFFFFFFFFFFF0686 : 0287 00FF 0000      		andi.l	#$FF0000,d7
(1)  754/FFFFFFFFFFFF068C : 0687 0001 0000      		addi.l	#$010000,d7
(1)  755/FFFFFFFFFFFF0692 : 9E80                		sub.l	d0,d7		; d7 - TOP Size
(1)  756/FFFFFFFFFFFF0694 : 6120                		bsr.s	.mk_set
(1)  757/FFFFFFFFFFFF0696 : 2A00                		move.l	d0,d5		; d5 - BOTTOM point
(1)  758/FFFFFFFFFFFF0698 : 0685 0001 0000      		addi.l	#$010000,d5
(1)  759/FFFFFFFFFFFF069E : 0285 00FF 0000      		andi.l	#$FF0000,d5
(1)  760/FFFFFFFFFFFF06A4 : 2C05                		move.l	d5,d6
(1)  761/FFFFFFFFFFFF06A6 : 9C80                		sub.l	d0,d6
(1)  762/FFFFFFFFFFFF06A8 : 3E02                		move.w	d2,d7
(1)  763/FFFFFFFFFFFF06AA : 9E46                		sub.w	d6,d7
(1)  764/FFFFFFFFFFFF06AC : DC41                		add.w	d1,d6
(1)  765/FFFFFFFFFFFF06AE : 6006                		bra.s	.mk_set
(1)  766/FFFFFFFFFFFF06B0 :                     .normal:
(1)  767/FFFFFFFFFFFF06B0 : 2A00                		move.l	d0,d5
(1)  768/FFFFFFFFFFFF06B2 : 3C01                		move.w	d1,d6
(1)  769/FFFFFFFFFFFF06B4 : 3E02                		move.w	d2,d7
(1)  770/FFFFFFFFFFFF06B6 :                     
(1)  771/FFFFFFFFFFFF06B6 :                     ; d7 - size
(1)  772/FFFFFFFFFFFF06B6 :                     ; d6 - vram
(1)  773/FFFFFFFFFFFF06B6 :                     ; d5 - data
(1)  774/FFFFFFFFFFFF06B6 :                     .mk_set:
(1)  775/FFFFFFFFFFFF06B6 : 4847                		swap	d7
(1)  776/FFFFFFFFFFFF06B8 : 3E38 B8DE           		move.w	(RAM_VdpDmaIndx).w,d7
(1)  777/FFFFFFFFFFFF06BC : 0C47 0018           		cmpi.w	#MAX_MDDMATSK,d7
(1)  778/FFFFFFFFFFFF06C0 : 6C78                		bge	.ran_out
(1)  779/FFFFFFFFFFFF06C2 : E94F                		lsl.w	#4,d7			; Size $10
(1)  780/FFFFFFFFFFFF06C4 : 4DF8 AC14           		lea	(RAM_VdpDmaList).w,a6
(1)  781/FFFFFFFFFFFF06C8 : DCC7                		adda	d7,a6
(1)  782/FFFFFFFFFFFF06CA : 4847                		swap	d7
(1)  783/FFFFFFFFFFFF06CC : 0287 0000 FFFE      		andi.l	#$0000FFFE,d7		; d7 - Size
(1)  784/FFFFFFFFFFFF06D2 : 6766                		beq.s	.ran_out		; If == 0, bad
(1)  785/FFFFFFFFFFFF06D4 : 4A47                		tst.w	d7
(1)  786/FFFFFFFFFFFF06D6 : 6B62                		bmi.s	.ran_out		; If negative, bad
(1)  787/FFFFFFFFFFFF06D8 : 31FC 0001 B8E0      		move.w	#1,(RAM_VdpDmaMod).w
(1)  788/FFFFFFFFFFFF06DE : 5278 B8DE           		addq.w	#1,(RAM_VdpDmaIndx).w
(1)  789/FFFFFFFFFFFF06E2 : EF8F                		lsl.l	#7,d7
(1)  790/FFFFFFFFFFFF06E4 : E04F                		lsr.w	#8,d7
(1)  791/FFFFFFFFFFFF06E6 : 0087 9400 9300      		ori.l	#$94009300,d7
(1)  792/FFFFFFFFFFFF06EC : 2CC7                		move.l	d7,(a6)+
(1)  794/FFFFFFFFFFFF06EE : 2F05                  		move.l	d5,-(sp)	; Save TOP point
(1)  795/FFFFFFFFFFFF06F0 : 5485                  		addq.l	#2,d5		; WORD-RAM patch
(1)  797/FFFFFFFFFFFF06F2 : E28D                  		lsr.l	#1,d5			; d5 - Source
(1)  798/FFFFFFFFFFFF06F4 : 2E3C 9600 9500       		move.l	#$96009500,d7
(1)  799/FFFFFFFFFFFF06FA : 1E05                 		move.b	d5,d7
(1)  800/FFFFFFFFFFFF06FC : E08D                 		lsr.l	#8,d5
(1)  801/FFFFFFFFFFFF06FE : 4847                 		swap	d7
(1)  802/FFFFFFFFFFFF0700 : 1E05                 		move.b	d5,d7
(1)  803/FFFFFFFFFFFF0702 : 2CC7                 		move.l	d7,(a6)+
(1)  804/FFFFFFFFFFFF0704 : 3E3C 9700            		move.w	#$9700,d7
(1)  805/FFFFFFFFFFFF0708 : E08D                 		lsr.l	#8,d5
(1)  806/FFFFFFFFFFFF070A : 1E05                 		move.b	d5,d7
(1)  807/FFFFFFFFFFFF070C : 3CC7                 		move.w	d7,(a6)+
(1)  808/FFFFFFFFFFFF070E : 3E06                		move.w	d6,d7		; Destination
(1)  809/FFFFFFFFFFFF0710 : 0286 0000 3FFF      		andi.l	#$3FFF,d6
(1)  810/FFFFFFFFFFFF0716 : 0046 4000           		ori.w	#$4000,d6
(1)  811/FFFFFFFFFFFF071A : E04F                		lsr.w	#8,d7
(1)  812/FFFFFFFFFFFF071C : EC4F                		lsr.w	#6,d7
(1)  813/FFFFFFFFFFFF071E : 0247 0003           		andi.w	#%11,d7
(1)  814/FFFFFFFFFFFF0722 : 0047 0080           		ori.w	#$80,d7
(1)  815/FFFFFFFFFFFF0726 : 3CC6                		move.w	d6,(a6)+
(1)  816/FFFFFFFFFFFF0728 : 3CC7                		move.w	d7,(a6)+
(1)  818/FFFFFFFFFFFF072A : 2E0E                		move.l	a6,d7		; Save a6
(1)  819/FFFFFFFFFFFF072C : 2C5F                		move.l	(sp)+,a6	; Restore TOP point
(1)  820/FFFFFFFFFFFF072E : 3C16                		move.w	(a6),d6		; Grab the graphs first word
(1)  821/FFFFFFFFFFFF0730 : 2C47                		move.l	d7,a6		; Restore a6
(1)  822/FFFFFFFFFFFF0732 : 3CC6                		move.w	d6,(a6)+	; Copy to last entry
(1)  823/FFFFFFFFFFFF0734 :                     .no_wpatch:
(1)  825/FFFFFFFFFFFF0734 : 31FC 0000 B8E0      		move.w	#0,(RAM_VdpDmaMod).w
(1)  826/FFFFFFFFFFFF073A :                     .ran_out:
(1)  827/FFFFFFFFFFFF073A : 4E75                		rts
(1)  828/FFFFFFFFFFFF073C :                     
(1)  829/FFFFFFFFFFFF073C :                     ; --------------------------------------------------------
(1)  830/FFFFFFFFFFFF073C :                     ; Video_Fill
(1)  831/FFFFFFFFFFFF073C :                     ;
(1)  832/FFFFFFFFFFFF073C :                     ; Fill data to VRAM
(1)  833/FFFFFFFFFFFF073C :                     ;
(1)  834/FFFFFFFFFFFF073C :                     ; d0.w | WORD to fill
(1)  835/FFFFFFFFFFFF073C :                     ; d1.w | VRAM destination, cell_vram(dest)
(1)  836/FFFFFFFFFFFF073C :                     ; d2.w | Size
(1)  837/FFFFFFFFFFFF073C :                     ;
(1)  838/FFFFFFFFFFFF073C :                     ; Breaks:
(1)  839/FFFFFFFFFFFF073C :                     ; d6-d7,a6
(1)  840/FFFFFFFFFFFF073C :                     ;
(1)  841/FFFFFFFFFFFF073C :                     ; Notes:
(1)  842/FFFFFFFFFFFF073C :                     ; FILL writes in this order: $56781234, size $0001 is
(1)  843/FFFFFFFFFFFF073C :                     ; invalid.
(1)  844/FFFFFFFFFFFF073C :                     ; --------------------------------------------------------
(1)  845/FFFFFFFFFFFF073C :                     
(1)  846/FFFFFFFFFFFF073C :                     Video_Fill:
(1)  847/FFFFFFFFFFFF073C : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1)  848/FFFFFFFFFFFF0740 : 4DF9 00C0 0004      		lea	(vdp_ctrl).l,a6
(1)  849/FFFFFFFFFFFF0746 : 3E3C 8100           		move.w	#$8100,d7
(1)  850/FFFFFFFFFFFF074A : 1E38 B8F7           		move.b	(RAM_VdpRegs+1).w,d7
(1)  851/FFFFFFFFFFFF074E : 08C7 0004           		bset	#bitDmaEnbl,d7
(1)  852/FFFFFFFFFFFF0752 : 3C87                		move.w	d7,(a6)
(1)  853/FFFFFFFFFFFF0754 : 3E16                .dmaw:		move.w	(a6),d7
(1)  854/FFFFFFFFFFFF0756 : 0807 0001           		btst	#bitDma,d7
(1)  855/FFFFFFFFFFFF075A : 66F8                		bne.s	.dmaw
(1)  856/FFFFFFFFFFFF075C : 3CBC 8F01           		move.w	#$8F01,(a6)	; Set increment to $01
(1)  857/FFFFFFFFFFFF0760 : 3E02                		move.w	d2,d7		; d2 - Size
(1)  858/FFFFFFFFFFFF0762 : 0447 0001           		subi.w	#1,d7
(1)  859/FFFFFFFFFFFF0766 : 2C3C 9400 9300      		move.l	#$94009300,d6
(1)  860/FFFFFFFFFFFF076C : 1C07                		move.b	d7,d6
(1)  861/FFFFFFFFFFFF076E : 4846                		swap	d6
(1)  862/FFFFFFFFFFFF0770 : E04F                		lsr.w	#8,d7
(1)  863/FFFFFFFFFFFF0772 : 1C07                		move.b	d7,d6
(1)  864/FFFFFFFFFFFF0774 : 4846                		swap	d6
(1)  865/FFFFFFFFFFFF0776 : 2C86                		move.l	d6,(a6)
(1)  866/FFFFFFFFFFFF0778 : 3CBC 9780           		move.w	#$9780,(a6)	; DMA Fill mode
(1)  867/FFFFFFFFFFFF077C : 3E01                		move.w	d1,d7		; d1 - Destination
(1)  868/FFFFFFFFFFFF077E : 3C07                		move.w	d7,d6
(1)  869/FFFFFFFFFFFF0780 : 0246 3FFF           		andi.w	#$3FFF,d6
(1)  870/FFFFFFFFFFFF0784 : 0046 4000           		ori.w	#$4000,d6
(1)  871/FFFFFFFFFFFF0788 : 4846                		swap	d6
(1)  872/FFFFFFFFFFFF078A : 3C07                		move.w	d7,d6
(1)  873/FFFFFFFFFFFF078C : E04E                		lsr.w	#8,d6
(1)  874/FFFFFFFFFFFF078E : EC4E                		lsr.w	#6,d6
(1)  875/FFFFFFFFFFFF0790 : 0246 0003           		andi.w	#%11,d6
(1)  876/FFFFFFFFFFFF0794 : 0046 0080           		ori.w	#$80,d6
(1)  877/FFFFFFFFFFFF0798 : 2C86                		move.l	d6,(a6)
(1)  878/FFFFFFFFFFFF079A : 3D40 FFFC           		move.w	d0,-4(a6)
(1)  879/FFFFFFFFFFFF079E : 3E16                .dma_w:		move.w	(a6),d7
(1)  880/FFFFFFFFFFFF07A0 : 0807 0001           		btst	#bitDma,d7
(1)  881/FFFFFFFFFFFF07A4 : 66F8                		bne.s	.dma_w
(1)  882/FFFFFFFFFFFF07A6 : 3CBC 8F02           		move.w	#$8F02,(a6)	; Set increment to $02
(1)  883/FFFFFFFFFFFF07AA : 3E3C 8100           		move.w	#$8100,d7
(1)  884/FFFFFFFFFFFF07AE : 1E38 B8F7           		move.b	(RAM_VdpRegs+1).w,d7
(1)  885/FFFFFFFFFFFF07B2 : 3C87                		move.w	d7,(a6)
(1)  886/FFFFFFFFFFFF07B4 : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1)  887/FFFFFFFFFFFF07B8 : 4E75                		rts
(1)  888/FFFFFFFFFFFF07BA :                     
(1)  889/FFFFFFFFFFFF07BA :                     ; --------------------------------------------------------
(1)  890/FFFFFFFFFFFF07BA :                     ; Video_Copy
(1)  891/FFFFFFFFFFFF07BA :                     ;
(1)  892/FFFFFFFFFFFF07BA :                     ; Copy VRAM data to another location
(1)  893/FFFFFFFFFFFF07BA :                     ;
(1)  894/FFFFFFFFFFFF07BA :                     ; d0.w | VRAM Source, cell_vram(src)
(1)  895/FFFFFFFFFFFF07BA :                     ; d1.w | VRAM Destination, cell_vram(dest)
(1)  896/FFFFFFFFFFFF07BA :                     ; d2.w | Size
(1)  897/FFFFFFFFFFFF07BA :                     ;
(1)  898/FFFFFFFFFFFF07BA :                     ; Breaks:
(1)  899/FFFFFFFFFFFF07BA :                     ; d6-d7,a6
(1)  900/FFFFFFFFFFFF07BA :                     ; --------------------------------------------------------
(1)  901/FFFFFFFFFFFF07BA :                     
(1)  902/FFFFFFFFFFFF07BA :                     ; TODO: test if this works again...
(1)  903/FFFFFFFFFFFF07BA :                     
(1)  904/FFFFFFFFFFFF07BA :                     Video_Copy:
(1)  905/FFFFFFFFFFFF07BA : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1)  906/FFFFFFFFFFFF07BE : 4DF9 00C0 0004      		lea	(vdp_ctrl),a6
(1)  907/FFFFFFFFFFFF07C4 : 3E3C 8100           		move.w	#$8100,d7
(1)  908/FFFFFFFFFFFF07C8 : 1E38 B8F7           		move.b	(RAM_VdpRegs+1).w,d7
(1)  909/FFFFFFFFFFFF07CC : 08C7 0004           		bset	#bitDmaEnbl,d7
(1)  910/FFFFFFFFFFFF07D0 : 3C87                		move.w	d7,(a6)
(1)  911/FFFFFFFFFFFF07D2 : 3E16                .dmaw:		move.w	(a6),d7
(1)  912/FFFFFFFFFFFF07D4 : 0807 0001           		btst	#bitDma,d7
(1)  913/FFFFFFFFFFFF07D8 : 66F8                		bne.s	.dmaw
(1)  914/FFFFFFFFFFFF07DA : 3CBC 8F01           		move.w	#$8F01,(a6)		; Increment $01
(1)  915/FFFFFFFFFFFF07DE : 3E02                		move.w	d2,d7			; SIZE
(1)  916/FFFFFFFFFFFF07E0 : 2C3C 9400 9300      		move.l	#$94009300,d6
(1)  917/FFFFFFFFFFFF07E6 :                     ; 		lsr.w	#1,d7
(1)  918/FFFFFFFFFFFF07E6 : 1C07                		move.b	d7,d6
(1)  919/FFFFFFFFFFFF07E8 : 4846                		swap	d6
(1)  920/FFFFFFFFFFFF07EA : E04F                		lsr.w	#8,d7
(1)  921/FFFFFFFFFFFF07EC : 1C07                		move.b	d7,d6
(1)  922/FFFFFFFFFFFF07EE : 4846                		swap	d6
(1)  923/FFFFFFFFFFFF07F0 : 2C86                		move.l	d6,(a6)
(1)  924/FFFFFFFFFFFF07F2 : 2C3C 9600 9500      		move.l	#$96009500,d6		; SOURCE
(1)  925/FFFFFFFFFFFF07F8 : 3E00                		move.w	d0,d7
(1)  926/FFFFFFFFFFFF07FA : 1C07                		move.b	d7,d6
(1)  927/FFFFFFFFFFFF07FC : 4846                		swap	d6
(1)  928/FFFFFFFFFFFF07FE : E04F                		lsr.w	#8,d7
(1)  929/FFFFFFFFFFFF0800 : 1C07                		move.b	d7,d6
(1)  930/FFFFFFFFFFFF0802 : 2C86                		move.l	d6,(a6)
(1)  931/FFFFFFFFFFFF0804 : 3CBC 97C0           		move.w	#$97C0,(a6)		; DMA Copy mode
(1)  932/FFFFFFFFFFFF0808 : 2E02                		move.l	d2,d7			; DESTINATION
(1)  933/FFFFFFFFFFFF080A : 3C07                		move.w	d7,d6
(1)  934/FFFFFFFFFFFF080C : 0246 3FFF           		andi.w	#$3FFF,d6
(1)  935/FFFFFFFFFFFF0810 : 0046 4000           		ori.w	#$4000,d6
(1)  936/FFFFFFFFFFFF0814 : 4846                		swap	d6
(1)  937/FFFFFFFFFFFF0816 : 3C07                		move.w	d7,d6
(1)  938/FFFFFFFFFFFF0818 : E04E                		lsr.w	#8,d6
(1)  939/FFFFFFFFFFFF081A : EC4E                		lsr.w	#6,d6
(1)  940/FFFFFFFFFFFF081C : 0246 0003           		andi.w	#%11,d6
(1)  941/FFFFFFFFFFFF0820 : 0046 00C0           		ori.w	#$C0,d6
(1)  942/FFFFFFFFFFFF0824 : 2C86                		move.l	d6,(a6)
(1)  943/FFFFFFFFFFFF0826 : 3D41 FFFC           		move.w	d1,-4(a6)
(1)  944/FFFFFFFFFFFF082A : 3E16                .dma_w:		move.w	(a6),d7
(1)  945/FFFFFFFFFFFF082C : 0807 0001           		btst	#bitDma,d7
(1)  946/FFFFFFFFFFFF0830 : 66F8                		bne.s	.dma_w
(1)  947/FFFFFFFFFFFF0832 : 3CBC 8F02           		move.w	#$8F02,(a6)		; Increment $02
(1)  948/FFFFFFFFFFFF0836 : 3E3C 8100           		move.w	#$8100,d7
(1)  949/FFFFFFFFFFFF083A : 1E38 B8F7           		move.b	(RAM_VdpRegs+1).w,d7
(1)  950/FFFFFFFFFFFF083E : 3C87                		move.w	d7,(a6)
(1)  951/FFFFFFFFFFFF0840 : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1)  952/FFFFFFFFFFFF0844 : 4E75                		rts
(1)  953/FFFFFFFFFFFF0846 :                     
(1)  954/FFFFFFFFFFFF0846 :                     ; --------------------------------------------------------
(1)  955/FFFFFFFFFFFF0846 :                     ; Video_Render
(1)  956/FFFFFFFFFFFF0846 :                     ;
(1)  957/FFFFFFFFFFFF0846 :                     ; Call this during VBlank to update visuals, watch out
(1)  958/FFFFFFFFFFFF0846 :                     ; for the timing for this to properly hide the CRAM dots.
(1)  959/FFFFFFFFFFFF0846 :                     ;
(1)  960/FFFFFFFFFFFF0846 :                     ; This gets normally called on System_Render
(1)  961/FFFFFFFFFFFF0846 :                     ; --------------------------------------------------------
(1)  962/FFFFFFFFFFFF0846 :                     
(1)  963/FFFFFFFFFFFF0846 :                     Video_Render:
(1)  964/FFFFFFFFFFFF0846 : 4DF9 00C0 0004      		lea	(vdp_ctrl),a6
(1)  965/FFFFFFFFFFFF084C : 3E3C 8100           		move.w	#$8100,d7		; DMA ON
(1)  966/FFFFFFFFFFFF0850 : 1E38 B8F7           		move.b	(RAM_VdpRegs+1).w,d7
(1)  967/FFFFFFFFFFFF0854 : 08C7 0004           		bset	#bitDmaEnbl,d7
(1)  968/FFFFFFFFFFFF0858 : 3C87                		move.w	d7,(a6)
(1)  969/FFFFFFFFFFFF085A : 6100 079E           		bsr	System_DmaEnter_RAM
(1)  970/FFFFFFFFFFFF085E : 2CBC 9400 9328      		move.l	#$94009328,(a6)
(1)  971/FFFFFFFFFFFF0864 : 2CBC 96D1 95E2      		move.l	#$96009500|(RAM_VerScroll<<7&$FF0000)|(RAM_VerScroll>>1&$FF),(a6)
(1)  972/FFFFFFFFFFFF086A : 3CBC 977F           		move.w	#$9700|(RAM_VerScroll>>17&$7F),(a6)
(1)  973/FFFFFFFFFFFF086E : 3CBC 4000           		move.w	#$4000,(a6)
(1)  974/FFFFFFFFFFFF0872 : 3F3C 0090           		move.w	#$0010|$80,-(sp)
(1)  975/FFFFFFFFFFFF0876 : 3C9F                		move.w	(sp)+,(a6)
(1)  976/FFFFFFFFFFFF0878 : 2CBC 9401 93E0      		move.l	#$940193E0,(a6)
(1)  977/FFFFFFFFFFFF087E : 2CBC 96D0 9502      		move.l	#$96009500|(RAM_HorScroll<<7&$FF0000)|(RAM_HorScroll>>1&$FF),(a6)
(1)  978/FFFFFFFFFFFF0884 : 3CBC 977F           		move.w	#$9700|(RAM_HorScroll>>17&$7F),(a6)
(1)  979/FFFFFFFFFFFF0888 : 3CBC 7C00           		move.w	#$7C00,(a6)
(1)  980/FFFFFFFFFFFF088C : 3F3C 0083           		move.w	#$0003|$80,-(sp)
(1)  981/FFFFFFFFFFFF0890 : 3C9F                		move.w	(sp)+,(a6)
(1)  982/FFFFFFFFFFFF0892 : 2CBC 9402 9300      		move.l	#$94029300,(a6)
(1)  983/FFFFFFFFFFFF0898 : 2CBC 96D2 950A      		move.l	#$96009500|(RAM_Sprites<<7&$FF0000)|(RAM_Sprites>>1&$FF),(a6)
(1)  984/FFFFFFFFFFFF089E : 3CBC 977F           		move.w	#$9700|(RAM_Sprites>>17&$7F),(a6)
(1)  985/FFFFFFFFFFFF08A2 : 3CBC 7800           		move.w	#$7800,(a6)
(1)  986/FFFFFFFFFFFF08A6 : 3F3C 0083           		move.w	#$0003|$80,-(sp)
(1)  987/FFFFFFFFFFFF08AA : 3C9F                		move.w	(sp)+,(a6)
(1)  988/FFFFFFFFFFFF08AC : 2CBC 9400 9340      		move.l	#$94009340,(a6)
(1)  989/FFFFFFFFFFFF08B2 : 2CBC 96D4 958A      		move.l	#$96009500|(RAM_Palette<<7&$FF0000)|(RAM_Palette>>1&$FF),(a6)
(1)  990/FFFFFFFFFFFF08B8 : 3CBC 977F           		move.w	#$9700|(RAM_Palette>>17&$7F),(a6)
(1)  991/FFFFFFFFFFFF08BC : 3CBC C000           		move.w	#$C000,(a6)
(1)  992/FFFFFFFFFFFF08C0 : 3F3C 0080           		move.w	#$0000|$80,-(sp)
(1)  993/FFFFFFFFFFFF08C4 : 3C9F                		move.w	(sp)+,(a6)
(1)  994/FFFFFFFFFFFF08C6 : 6100 0736           		bsr	System_DmaExit_RAM
(1)  995/FFFFFFFFFFFF08CA : 3E3C 8100           		move.w	#$8100,d7
(1)  996/FFFFFFFFFFFF08CE : 1E38 B8F7           		move.b	(RAM_VdpRegs+1).w,d7
(1)  997/FFFFFFFFFFFF08D2 : 3C87                		move.w	d7,(a6)
(1)  998/FFFFFFFFFFFF08D4 : 31FC 0001 B8DA      		move.w	#1,(RAM_SprLinkNum).w	; Reset SPRITE LINK number
(1)  999/FFFFFFFFFFFF08DA :                     	; Process DMA BLAST from here
(1) 1000/FFFFFFFFFFFF08DA :                     
(1) 1001/FFFFFFFFFFFF08DA :                     ; --------------------------------------------------------
(1) 1002/FFFFFFFFFFFF08DA :                     ; Video_DmaBlast
(1) 1003/FFFFFFFFFFFF08DA :                     ;
(1) 1004/FFFFFFFFFFFF08DA :                     ; Process DMA tasks from a predefined list in RAM
(1) 1005/FFFFFFFFFFFF08DA :                     ;
(1) 1006/FFFFFFFFFFFF08DA :                     ; Breaks:
(1) 1007/FFFFFFFFFFFF08DA :                     ; d5-d7,a3-a4
(1) 1008/FFFFFFFFFFFF08DA :                     ;
(1) 1009/FFFFFFFFFFFF08DA :                     ; *** Call this on VBlank ONLY ***
(1) 1010/FFFFFFFFFFFF08DA :                     ;
(1) 1011/FFFFFFFFFFFF08DA :                     ; NOTE:
(1) 1012/FFFFFFFFFFFF08DA :                     ; For 32X this code MUST be located on RAM as it
(1) 1013/FFFFFFFFFFFF08DA :                     ; writes the RV from ROM access
(1) 1014/FFFFFFFFFFFF08DA :                     ; --------------------------------------------------------
(1) 1015/FFFFFFFFFFFF08DA :                     
(1) 1016/FFFFFFFFFFFF08DA :                     ; Format:
(1) 1017/FFFFFFFFFFFF08DA :                     ; dc.w $94xx,$93xx		; Size
(1) 1018/FFFFFFFFFFFF08DA :                     ; dc.w $96xx,$95xx,$97xx	; Source
(1) 1019/FFFFFFFFFFFF08DA :                     ; dc.l $4xxx008x 		; VDP command + DMA bit
(1) 1020/FFFFFFFFFFFF08DA :                     ; dc.w $xxxx			; SegaCD/CD32X only: Graphics TOP-Word patch
(1) 1021/FFFFFFFFFFFF08DA :                     
(1) 1022/FFFFFFFFFFFF08DA :                     Video_DmaBlast:
(1) 1023/FFFFFFFFFFFF08DA : 4A78 B8E0           		tst.w	(RAM_VdpDmaMod).w		; Got mid-write?
(1) 1024/FFFFFFFFFFFF08DE : 6658                		bne.s	.exit				; then can't transfer.
(1) 1025/FFFFFFFFFFFF08E0 : 4A78 B8DE           		tst.w	(RAM_VdpDmaIndx).w		; Any requests?
(1) 1026/FFFFFFFFFFFF08E4 : 6752                		beq.s	.exit
(1) 1027/FFFFFFFFFFFF08E6 : 49F9 00C0 0004      		lea	(vdp_ctrl),a4			; Enter processing loop
(1) 1028/FFFFFFFFFFFF08EC : 47F8 AC14           		lea	(RAM_VdpDmaList).w,a3
(1) 1029/FFFFFFFFFFFF08F0 : 3E3C 8100           		move.w	#$8100,d7			; DMA ON
(1) 1030/FFFFFFFFFFFF08F4 : 1E38 B8F7           		move.b	(RAM_VdpRegs+1).w,d7
(1) 1031/FFFFFFFFFFFF08F8 : 08C7 0004           		bset	#bitDmaEnbl,d7
(1) 1032/FFFFFFFFFFFF08FC : 3887                		move.w	d7,(a4)
(1) 1033/FFFFFFFFFFFF08FE : 6100 0702           		bsr	System_DmaEnter_ROM
(1) 1034/FFFFFFFFFFFF0902 : 4A78 B8DE           .next:		tst.w	(RAM_VdpDmaIndx).w
(1) 1035/FFFFFFFFFFFF0906 : 6722                		beq.s	.end
(1) 1036/FFFFFFFFFFFF0908 : 289B                		move.l	(a3)+,(a4)		; Size
(1) 1037/FFFFFFFFFFFF090A : 289B                		move.l	(a3)+,(a4)		; Source
(1) 1038/FFFFFFFFFFFF090C : 389B                		move.w	(a3)+,(a4)
(1) 1040/FFFFFFFFFFFF090E : 361B                		move.w	(a3)+,d3		; Destination
(1) 1041/FFFFFFFFFFFF0910 : 341B                		move.w	(a3)+,d2
(1) 1042/FFFFFFFFFFFF0912 : 3F02                		move.w	d2,-(sp)		; Use stack for this write
(1) 1043/FFFFFFFFFFFF0914 : 3883                		move.w	d3,(a4)
(1) 1044/FFFFFFFFFFFF0916 : 389F                		move.w	(sp)+,(a4)		; *** CPU freezes ***
(1) 1045/FFFFFFFFFFFF0918 : 0242 FF7F           		andi.w	#$FF7F,d2		; Remove DMA bit
(1) 1046/FFFFFFFFFFFF091C : 3883                		move.w	d3,(a4)			; Write VDP control as normal
(1) 1047/FFFFFFFFFFFF091E : 3882                		move.w	d2,(a4)
(1) 1048/FFFFFFFFFFFF0920 : 395B FFFC           		move.w	(a3)+,-4(a4)		; Write pixels patch $C00000
(1) 1054/FFFFFFFFFFFF0924 : 5378 B8DE           		subq.w	#1,(RAM_VdpDmaIndx).w
(1) 1055/FFFFFFFFFFFF0928 : 60D8                		bra.s	.next
(1) 1056/FFFFFFFFFFFF092A :                     .end:
(1) 1057/FFFFFFFFFFFF092A : 6100 06DA           		bsr	System_DmaExit_ROM
(1) 1058/FFFFFFFFFFFF092E : 3E3C 8100           		move.w	#$8100,d7		; DMA OFF
(1) 1059/FFFFFFFFFFFF0932 : 1E38 B8F7           		move.b	(RAM_VdpRegs+1).w,d7
(1) 1060/FFFFFFFFFFFF0936 : 3887                		move.w	d7,(a4)
(1) 1061/FFFFFFFFFFFF0938 :                     .exit:
(1) 1062/FFFFFFFFFFFF0938 : 4E75                		rts
(1) 1063/FFFFFFFFFFFF093A :                     
(1) 1064/FFFFFFFFFFFF093A :                     ; ====================================================================
(1) 1065/FFFFFFFFFFFF093A :                     ; ----------------------------------------------------------------
(1) 1066/FFFFFFFFFFFF093A :                     ; Video routines for 32X
(1) 1067/FFFFFFFFFFFF093A :                     ; ----------------------------------------------------------------
(1) 1068/FFFFFFFFFFFF093A :                     
(1) 1069/FFFFFFFFFFFF093A :                     ; --------------------------------------------------------
(1) 1070/FFFFFFFFFFFF093A :                     ; Video_MdMars_SyncFrame
(1) 1071/FFFFFFFFFFFF093A :                     ;
(1) 1072/FFFFFFFFFFFF093A :                     ; Syncronize frame with the 32X
(1) 1073/FFFFFFFFFFFF093A :                     ; --------------------------------------------------------
(1) 1074/FFFFFFFFFFFF093A :                     
(1) 1075/FFFFFFFFFFFF093A :                     Video_MdMars_SyncFrame:
(1) 1081/FFFFFFFFFFFF093A : 4E75                		rts
(1) 1082/FFFFFFFFFFFF093C :                     
(1) 1083/FFFFFFFFFFFF093C :                     ; --------------------------------------------------------
(1) 1084/FFFFFFFFFFFF093C :                     ; Video_MdMarsGfxMode
(1) 1085/FFFFFFFFFFFF093C :                     ;
(1) 1086/FFFFFFFFFFFF093C :                     ; Sets Pseudo-Graphics mode on the 32X side.
(1) 1087/FFFFFFFFFFFF093C :                     ;
(1) 1088/FFFFFFFFFFFF093C :                     ; Input:
(1) 1089/FFFFFFFFFFFF093C :                     ; d0.w | Mode number
(1) 1090/FFFFFFFFFFFF093C :                     ;
(1) 1091/FFFFFFFFFFFF093C :                     ; Breaks:
(1) 1092/FFFFFFFFFFFF093C :                     ; d7
(1) 1093/FFFFFFFFFFFF093C :                     ;
(1) 1094/FFFFFFFFFFFF093C :                     ; Notes:
(1) 1095/FFFFFFFFFFFF093C :                     ; Changing modes takes 3 FRAMES to process.
(1) 1096/FFFFFFFFFFFF093C :                     ; --------------------------------------------------------
(1) 1097/FFFFFFFFFFFF093C :                     
(1) 1098/FFFFFFFFFFFF093C :                     Video_MdMarsGfxMode:
(1) 1110/FFFFFFFFFFFF093C : 4E75                		rts
(1) 1111/FFFFFFFFFFFF093E :                     
(1) 1112/FFFFFFFFFFFF093E :                     ; --------------------------------------------------------
(1) 1113/FFFFFFFFFFFF093E :                     ; Video_LoadPal_Mars, Video_FadePal_Mars
(1) 1114/FFFFFFFFFFFF093E :                     ;
(1) 1115/FFFFFFFFFFFF093E :                     ; Loads SVDP 256-color palette data to either
(1) 1116/FFFFFFFFFFFF093E :                     ; CURRENT palette or FADING palette buffers.
(1) 1117/FFFFFFFFFFFF093E :                     ;
(1) 1118/FFFFFFFFFFFF093E :                     ; Input:
(1) 1119/FFFFFFFFFFFF093E :                     ; d0.w | Start from
(1) 1120/FFFFFFFFFFFF093E :                     ; d1.w | Number of colors
(1) 1121/FFFFFFFFFFFF093E :                     ; d2.w | Priority bit 0/1
(1) 1122/FFFFFFFFFFFF093E :                     ;
(1) 1123/FFFFFFFFFFFF093E :                     ; Breaks:
(1) 1124/FFFFFFFFFFFF093E :                     ; d5-d7/a6
(1) 1125/FFFFFFFFFFFF093E :                     ; --------------------------------------------------------
(1) 1126/FFFFFFFFFFFF093E :                     
(1) 1127/FFFFFFFFFFFF093E :                     Video_FadePal_Mars:
(1) 1151/FFFFFFFFFFFF093E : 4E75                		rts
(1) 1152/FFFFFFFFFFFF0940 :                     
(1) 1153/FFFFFFFFFFFF0940 :                     ; --------------------------------------------------------
(1) 1154/FFFFFFFFFFFF0940 :                     ; Video_MdMarsPalFade
(1) 1155/FFFFFFFFFFFF0940 :                     ;
(1) 1156/FFFFFFFFFFFF0940 :                     ; Process the 256-color fading
(1) 1157/FFFFFFFFFFFF0940 :                     ;
(1) 1158/FFFFFFFFFFFF0940 :                     ; Input:
(1) 1159/FFFFFFFFFFFF0940 :                     ; a0   | Palette data
(1) 1160/FFFFFFFFFFFF0940 :                     ; d0.w | Number of colors
(1) 1161/FFFFFFFFFFFF0940 :                     ; d1.w | Speed
(1) 1162/FFFFFFFFFFFF0940 :                     ;
(1) 1163/FFFFFFFFFFFF0940 :                     ; RAM_ReqFadeMars: (WORD)
(1) 1164/FFFFFFFFFFFF0940 :                     ; $00 | No task (or finished)
(1) 1165/FFFFFFFFFFFF0940 :                     ; $01 | Fade in
(1) 1166/FFFFFFFFFFFF0940 :                     ; $02 | Fade out to black
(1) 1167/FFFFFFFFFFFF0940 :                     ;
(1) 1168/FFFFFFFFFFFF0940 :                     ; Notes:
(1) 1169/FFFFFFFFFFFF0940 :                     ; - CALL THIS OUTSIDE OF VBLANK
(1) 1170/FFFFFFFFFFFF0940 :                     ; * This takes A LOT of CPU.
(1) 1171/FFFFFFFFFFFF0940 :                     ; --------------------------------------------------------
(1) 1172/FFFFFFFFFFFF0940 :                     
(1) 1173/FFFFFFFFFFFF0940 :                     ; TODO: luego ver que hago con el priority bit
(1) 1174/FFFFFFFFFFFF0940 :                     
(1) 1175/FFFFFFFFFFFF0940 :                     Video_MdMarsPalFade:
(1) 1334/FFFFFFFFFFFF0940 : 4E75                		rts
(1) 1335/FFFFFFFFFFFF0942 :                     
(1) 1336/FFFFFFFFFFFF0942 :                     
(1) 1337/FFFFFFFFFFFF0942 :                     ; ====================================================================
(1) 1338/FFFFFFFFFFFF0942 :                     ; ----------------------------------------------------------------
(1) 1339/FFFFFFFFFFFF0942 :                     ; Common VDP Screen routines
(1) 1340/FFFFFFFFFFFF0942 :                     ; ----------------------------------------------------------------
(1) 1341/FFFFFFFFFFFF0942 :                     
(1) 1342/FFFFFFFFFFFF0942 :                     ; --------------------------------------------------------
(1) 1343/FFFFFFFFFFFF0942 :                     ; Video_LoadMap
(1) 1344/FFFFFFFFFFFF0942 :                     ;
(1) 1345/FFFFFFFFFFFF0942 :                     ; Loads map data
(1) 1346/FFFFFFFFFFFF0942 :                     ; In horizontal order LEFT to RIGHT, TOP to BOTTOM
(1) 1347/FFFFFFFFFFFF0942 :                     ; This can auto-detect the current's layer width, height
(1) 1348/FFFFFFFFFFFF0942 :                     ; and double interlace mode
(1) 1349/FFFFFFFFFFFF0942 :                     ;
(1) 1350/FFFFFFFFFFFF0942 :                     ; Input:
(1) 1351/FFFFFFFFFFFF0942 :                     ; a0   | Map data
(1) 1352/FFFFFFFFFFFF0942 :                     ; d0.l | locate(lyr,x,y)
(1) 1353/FFFFFFFFFFFF0942 :                     ; d1.l | mapsize(x,y)
(1) 1354/FFFFFFFFFFFF0942 :                     ; d2.l | VRAM-cell increment
(1) 1355/FFFFFFFFFFFF0942 :                     ;
(1) 1356/FFFFFFFFFFFF0942 :                     ; Breaks:
(1) 1357/FFFFFFFFFFFF0942 :                     ; d4-d7/a6
(1) 1358/FFFFFFFFFFFF0942 :                     ; --------------------------------------------------------
(1) 1359/FFFFFFFFFFFF0942 :                     
(1) 1360/FFFFFFFFFFFF0942 :                     ; TODO: A vertical version for SegaCD's stamps
(1) 1361/FFFFFFFFFFFF0942 :                     
(1) 1362/FFFFFFFFFFFF0942 :                     Video_LoadMap:
(1) 1363/FFFFFFFFFFFF0942 : 4DF9 00C0 0000      		lea	(vdp_data),a6
(1) 1364/FFFFFFFFFFFF0948 : 6100 01B6           		bsr	vid_PickLayer
(1) 1365/FFFFFFFFFFFF094C : 3801                		move.w	d1,d4			; Start here
(1) 1366/FFFFFFFFFFFF094E :                     .yloop:
(1) 1367/FFFFFFFFFFFF094E : 4844                		swap	d4
(1) 1368/FFFFFFFFFFFF0950 : 2D45 0004           		move.l	d5,4(a6)
(1) 1369/FFFFFFFFFFFF0954 : 2E01                		move.l	d1,d7
(1) 1370/FFFFFFFFFFFF0956 : 4847                		swap	d7
(1) 1371/FFFFFFFFFFFF0958 :                     .xloop:
(1) 1372/FFFFFFFFFFFF0958 : 3818                		move.w	(a0)+,d4
(1) 1373/FFFFFFFFFFFF095A : 0C44 FFFF           		cmpi.w	#-1,d4			; -1 ? TODO
(1) 1374/FFFFFFFFFFFF095E : 6606                		bne.s	.nonull
(1) 1375/FFFFFFFFFFFF0960 : 383C 07FF           		move.w	#varNullVram,d4		; Replace with custom blank tile
(1) 1376/FFFFFFFFFFFF0964 : 6002                		bra.s	.cont
(1) 1377/FFFFFFFFFFFF0966 :                     .nonull:
(1) 1378/FFFFFFFFFFFF0966 : D842                		add.w	d2,d4
(1) 1379/FFFFFFFFFFFF0968 :                     .cont:
(1) 1380/FFFFFFFFFFFF0968 :                     	; Check for double interlace
(1) 1381/FFFFFFFFFFFF0968 : 4847                		swap	d7
(1) 1382/FFFFFFFFFFFF096A : 1E38 B902           		move.b	(RAM_VdpRegs+$C).w,d7
(1) 1383/FFFFFFFFFFFF096E : 0247 0006           		andi.w	#%110,d7
(1) 1384/FFFFFFFFFFFF0972 : 0C47 0006           		cmpi.w	#%110,d7
(1) 1385/FFFFFFFFFFFF0976 : 660E                		bne.s	.nodble
(1) 1386/FFFFFFFFFFFF0978 : 3E04                		move.w	d4,d7
(1) 1387/FFFFFFFFFFFF097A : E24F                		lsr.w	#1,d7
(1) 1388/FFFFFFFFFFFF097C : 0247 07FF           		andi.w	#$7FF,d7
(1) 1389/FFFFFFFFFFFF0980 : 0244 F800           		andi.w	#$F800,d4
(1) 1390/FFFFFFFFFFFF0984 : 8847                		or.w	d7,d4
(1) 1391/FFFFFFFFFFFF0986 :                     .nodble:
(1) 1392/FFFFFFFFFFFF0986 : 4847                		swap	d7
(1) 1393/FFFFFFFFFFFF0988 : 3C84                		move.w	d4,(a6)
(1) 1394/FFFFFFFFFFFF098A : 51CF FFCC           		dbf	d7,.xloop
(1) 1395/FFFFFFFFFFFF098E : DA86                		add.l	d6,d5
(1) 1396/FFFFFFFFFFFF0990 : 4844                		swap	d4
(1) 1397/FFFFFFFFFFFF0992 : 51CC FFBA           		dbf	d4,.yloop
(1) 1398/FFFFFFFFFFFF0996 : 4E75                		rts
(1) 1399/FFFFFFFFFFFF0998 :                     
(1) 1400/FFFFFFFFFFFF0998 :                     ; ====================================================================
(1) 1401/FFFFFFFFFFFF0998 :                     ; ----------------------------------------------------------------
(1) 1402/FFFFFFFFFFFF0998 :                     ; Text PRINT system, for debugging or quick texts.
(1) 1403/FFFFFFFFFFFF0998 :                     ; ----------------------------------------------------------------
(1) 1404/FFFFFFFFFFFF0998 :                     
(1) 1405/FFFFFFFFFFFF0998 :                     ; --------------------------------------------------------
(1) 1406/FFFFFFFFFFFF0998 :                     ; Video_PrintInit
(1) 1407/FFFFFFFFFFFF0998 :                     ;
(1) 1408/FFFFFFFFFFFF0998 :                     ; Initializes the default Graphics and Palette
(1) 1409/FFFFFFFFFFFF0998 :                     ; for the font.
(1) 1410/FFFFFFFFFFFF0998 :                     ;
(1) 1411/FFFFFFFFFFFF0998 :                     ; Input:
(1) 1412/FFFFFFFFFFFF0998 :                     ; a0 | ASCII Graphics location
(1) 1413/FFFFFFFFFFFF0998 :                     ; a1 | ASCII Palette
(1) 1414/FFFFFFFFFFFF0998 :                     ;
(1) 1415/FFFFFFFFFFFF0998 :                     ; Breaks:
(1) 1416/FFFFFFFFFFFF0998 :                     ; ALL
(1) 1417/FFFFFFFFFFFF0998 :                     ;
(1) 1418/FFFFFFFFFFFF0998 :                     ; Notes:
(1) 1419/FFFFFFFFFFFF0998 :                     ; * Requires ASCII font graphics starting from $20
(1) 1420/FFFFFFFFFFFF0998 :                     ; (" ") to $7F ("[DEL]")
(1) 1421/FFFFFFFFFFFF0998 :                     ; * CALL THIS ONLY IF DISPLAY IS OFF OR DURING VBLANK
(1) 1422/FFFFFFFFFFFF0998 :                     ; * 32X: MAKE SURE SH2 IS NOT READING ROM DATA
(1) 1423/FFFFFFFFFFFF0998 :                     ; --------------------------------------------------------
(1) 1424/FFFFFFFFFFFF0998 :                     
(1) 1425/FFFFFFFFFFFF0998 :                     Video_PrintInit:
(1) 1426/FFFFFFFFFFFF0998 :                     ; 		lea	(ASCII_FONT).l,a0
(1) 1427/FFFFFFFFFFFF0998 :                     ; 		lea	(ASCII_PAL).l,a1
(1) 1428/FFFFFFFFFFFF0998 : 2008                		move.l	a0,d0
(1) 1429/FFFFFFFFFFFF099A : 323C B000           		move.w	#cell_vram(varPrintVram),d1
(1) 1430/FFFFFFFFFFFF099E : 343C 0C00           		move.w	#($60*$20),d2			; From " " to "[DEL]"
(1) 1431/FFFFFFFFFFFF09A2 : 363C 6580           		move.w	#(varPrintPal<<13)|varPrintVram,d3
(1) 1432/FFFFFFFFFFFF09A6 : 0443 0020           		subi.w	#$20,d3
(1) 1433/FFFFFFFFFFFF09AA : 31C3 B8E2           		move.w	d3,(RAM_VidPrntVram).w
(1) 1434/FFFFFFFFFFFF09AE : 6100 FBC6           		bsr	Video_LoadArt
(1) 1435/FFFFFFFFFFFF09B2 :                     Video_PrintPal:
(1) 1436/FFFFFFFFFFFF09B2 : 2049                		movea.l	a1,a0
(1) 1437/FFFFFFFFFFFF09B4 : 7030                		moveq	#(varPrintPal<<4),d0
(1) 1438/FFFFFFFFFFFF09B6 : 323C 000F           		move.w	#$0F,d1
(1) 1439/FFFFFFFFFFFF09BA : 6100 FA50           		bsr	Video_LoadPal	; Write to both palette buffers
(1) 1440/FFFFFFFFFFFF09BE : 6000 FA42           		bra	Video_FadePal
(1) 1441/FFFFFFFFFFFF09C2 :                     
(1) 1442/FFFFFFFFFFFF09C2 :                     ; --------------------------------------------------------
(1) 1443/FFFFFFFFFFFF09C2 :                     ; Video_Print
(1) 1444/FFFFFFFFFFFF09C2 :                     ;
(1) 1445/FFFFFFFFFFFF09C2 :                     ; Prints string to layer
(1) 1446/FFFFFFFFFFFF09C2 :                     ;
(1) 1447/FFFFFFFFFFFF09C2 :                     ; Input:
(1) 1448/FFFFFFFFFFFF09C2 :                     ; a0   | String data, and RAM locations if specified
(1) 1449/FFFFFFFFFFFF09C2 :                     ; d0.l | Print location on-screen, locate(layer,x,y)
(1) 1450/FFFFFFFFFFFF09C2 :                     ;
(1) 1451/FFFFFFFFFFFF09C2 :                     ; Breaks:
(1) 1452/FFFFFFFFFFFF09C2 :                     ; d4-d7,a4-a6
(1) 1453/FFFFFFFFFFFF09C2 :                     ;
(1) 1454/FFFFFFFFFFFF09C2 :                     ; Notes:
(1) 1455/FFFFFFFFFFFF09C2 :                     ; - MUST put an "align 2" at the end of the string to
(1) 1456/FFFFFFFFFFFF09C2 :                     ;   prevent an ADDRESS ERROR
(1) 1457/FFFFFFFFFFFF09C2 :                     ; - CALL Video_PrintInit FIRST
(1) 1458/FFFFFFFFFFFF09C2 :                     ; --------------------------------------------------------
(1) 1459/FFFFFFFFFFFF09C2 :                     
(1) 1460/FFFFFFFFFFFF09C2 :                     ; Text string special codes:
(1) 1461/FFFFFFFFFFFF09C2 :                     ; $00 - End of line
(1) 1462/FFFFFFFFFFFF09C2 :                     ; $0A - Next line
(1) 1463/FFFFFFFFFFFF09C2 :                     ; "//b" - Show BYTE value
(1) 1464/FFFFFFFFFFFF09C2 :                     ; "//w" - Show WORD value
(1) 1465/FFFFFFFFFFFF09C2 :                     ; "//l" - Show LONG value
(1) 1466/FFFFFFFFFFFF09C2 :                     ;
(1) 1467/FFFFFFFFFFFF09C2 :                     ; If using //b //w //l:
(1) 1468/FFFFFFFFFFFF09C2 :                     ; After $00, put your RAM addresses in LONGS in the
(1) 1469/FFFFFFFFFFFF09C2 :                     ; same order you placed your value tags, don't forget to
(1) 1470/FFFFFFFFFFFF09C2 :                     ; put "align 2" at the end of the string or it will
(1) 1471/FFFFFFFFFFFF09C2 :                     ; trigger and ADDRESS ERROR
(1) 1472/FFFFFFFFFFFF09C2 :                     ;
(1) 1473/FFFFFFFFFFFF09C2 :                     ; TODO: negative values might break
(1) 1474/FFFFFFFFFFFF09C2 :                     
(1) 1475/FFFFFFFFFFFF09C2 :                     Video_Print:
(1) 1476/FFFFFFFFFFFF09C2 : 48E7 0F0E           		movem.l	d4-d7/a4-a6,-(sp)
(1) 1477/FFFFFFFFFFFF09C6 : 4DF9 00C0 0000      		lea	(vdp_data).l,a6
(1) 1478/FFFFFFFFFFFF09CC : 6100 0132           		bsr	vid_PickLayer
(1) 1479/FFFFFFFFFFFF09D0 : 4BF8 B754           		lea	(RAM_VidPrntList).w,a5
(1) 1480/FFFFFFFFFFFF09D4 :                     .newjump:
(1) 1481/FFFFFFFFFFFF09D4 : 2D45 0004           		move.l	d5,4(a6)
(1) 1482/FFFFFFFFFFFF09D8 : 2805                		move.l	d5,d4
(1) 1483/FFFFFFFFFFFF09DA :                     .loop:
(1) 1484/FFFFFFFFFFFF09DA : 1E18                		move.b	(a0)+,d7
(1) 1485/FFFFFFFFFFFF09DC : 0247 00FF           		andi.w	#$FF,d7
(1) 1486/FFFFFFFFFFFF09E0 : 676C                		beq	.exit
(1) 1487/FFFFFFFFFFFF09E2 : 0C07 000A           		cmpi.b	#$0A,d7			; $0A - next line?
(1) 1488/FFFFFFFFFFFF09E6 : 672C                		beq.s	.next
(1) 1489/FFFFFFFFFFFF09E8 : 0C07 005C           		cmpi.b	#$5C,d7			; $5C ("\") special?
(1) 1490/FFFFFFFFFFFF09EC : 6618                		bne.s	.puttext
(1) 1491/FFFFFFFFFFFF09EE : 1E18                		move.b	(a0)+,d7		; Read next chr
(1) 1492/FFFFFFFFFFFF09F0 : 0C07 0062           		cmpi.b	#"b",d7
(1) 1493/FFFFFFFFFFFF09F4 : 6722                		beq.s	.isbyte
(1) 1494/FFFFFFFFFFFF09F6 : 0C07 0077           		cmpi.b	#"w",d7
(1) 1495/FFFFFFFFFFFF09FA : 672E                		beq.s	.isword
(1) 1496/FFFFFFFFFFFF09FC : 0C07 006C           		cmpi.b	#"l",d7
(1) 1497/FFFFFFFFFFFF0A00 : 673A                		beq.s	.islong
(1) 1498/FFFFFFFFFFFF0A02 : 3E3C 005C           		move.w	#"\\",d7		; normal "\"
(1) 1499/FFFFFFFFFFFF0A06 :                     .puttext:
(1) 1500/FFFFFFFFFFFF0A06 : DE78 B8E2           		add.w	(RAM_VidPrntVram).w,d7	; VRAM pos increment
(1) 1501/FFFFFFFFFFFF0A0A : 3C87                		move.w	d7,(a6)
(1) 1502/FFFFFFFFFFFF0A0C : 0684 0002 0000      		addi.l	#$20000,d4		; Next X
(1) 1503/FFFFFFFFFFFF0A12 : 60C6                		bra.s	.loop
(1) 1504/FFFFFFFFFFFF0A14 :                     .next:
(1) 1505/FFFFFFFFFFFF0A14 : DA86                		add.l	d6,d5			; Next line
(1) 1506/FFFFFFFFFFFF0A16 : 60BC                		bra.s	.newjump
(1) 1507/FFFFFFFFFFFF0A18 :                     
(1) 1508/FFFFFFFFFFFF0A18 :                     ; Set print values
(1) 1509/FFFFFFFFFFFF0A18 :                     .isbyte:
(1) 1510/FFFFFFFFFFFF0A18 : 2AC4                		move.l	d4,(a5)+
(1) 1511/FFFFFFFFFFFF0A1A : 3AFC 0001           		move.w	#1,(a5)+
(1) 1512/FFFFFFFFFFFF0A1E : 0684 0004 0000      		addi.l	#$40000,d4
(1) 1513/FFFFFFFFFFFF0A24 : 2D44 0004           		move.l	d4,4(a6)
(1) 1514/FFFFFFFFFFFF0A28 : 60B0                		bra	.loop
(1) 1515/FFFFFFFFFFFF0A2A :                     .isword:
(1) 1516/FFFFFFFFFFFF0A2A : 2AC4                		move.l	d4,(a5)+
(1) 1517/FFFFFFFFFFFF0A2C : 3AFC 0002           		move.w	#2,(a5)+
(1) 1518/FFFFFFFFFFFF0A30 : 0684 0008 0000      		addi.l	#$80000,d4
(1) 1519/FFFFFFFFFFFF0A36 : 2D44 0004           		move.l	d4,4(a6)
(1) 1520/FFFFFFFFFFFF0A3A : 609E                		bra	.loop
(1) 1521/FFFFFFFFFFFF0A3C :                     .islong:
(1) 1522/FFFFFFFFFFFF0A3C : 2AC4                		move.l	d4,(a5)+
(1) 1523/FFFFFFFFFFFF0A3E : 3AFC 0003           		move.w	#3,(a5)+
(1) 1524/FFFFFFFFFFFF0A42 : 0684 0010 0000      		addi.l	#$100000,d4
(1) 1525/FFFFFFFFFFFF0A48 : 2D44 0004           		move.l	d4,4(a6)
(1) 1526/FFFFFFFFFFFF0A4C : 608C                		bra	.loop
(1) 1527/FFFFFFFFFFFF0A4E :                     .exit:
(1) 1528/FFFFFFFFFFFF0A4E :                     
(1) 1529/FFFFFFFFFFFF0A4E :                     ; ----------------------------------------
(1) 1530/FFFFFFFFFFFF0A4E :                     ; Print values
(1) 1531/FFFFFFFFFFFF0A4E :                     ;
(1) 1532/FFFFFFFFFFFF0A4E :                     ; vvvv vvvv tttt
(1) 1533/FFFFFFFFFFFF0A4E :                     ; v - vdp pos
(1) 1534/FFFFFFFFFFFF0A4E :                     ; t - value type
(1) 1535/FFFFFFFFFFFF0A4E :                     ; ----------------------------------------
(1) 1536/FFFFFFFFFFFF0A4E :                     
(1) 1537/FFFFFFFFFFFF0A4E :                     ; reading byte by byte so you don't need
(1) 1538/FFFFFFFFFFFF0A4E :                     ; to re-align anything...
(1) 1539/FFFFFFFFFFFF0A4E : 7800                		moveq	#0,d4
(1) 1540/FFFFFFFFFFFF0A50 : 7A00                		moveq	#0,d5
(1) 1541/FFFFFFFFFFFF0A52 : 7C00                		moveq	#0,d6
(1) 1542/FFFFFFFFFFFF0A54 : 4BF8 B754           		lea	(RAM_VidPrntList).w,a5
(1) 1543/FFFFFFFFFFFF0A58 :                     .nextv:
(1) 1544/FFFFFFFFFFFF0A58 : 4A95                		tst.l	(a5)
(1) 1545/FFFFFFFFFFFF0A5A : 6700 009E           		beq	.nothing
(1) 1546/FFFFFFFFFFFF0A5E : 7800                		moveq	#0,d4		; grab value
(1) 1547/FFFFFFFFFFFF0A60 : 1818                		move.b	(a0)+,d4
(1) 1548/FFFFFFFFFFFF0A62 : E19C                		rol.l	#8,d4
(1) 1549/FFFFFFFFFFFF0A64 : 1818                		move.b	(a0)+,d4
(1) 1550/FFFFFFFFFFFF0A66 : E19C                		rol.l	#8,d4
(1) 1551/FFFFFFFFFFFF0A68 : 1818                		move.b	(a0)+,d4
(1) 1552/FFFFFFFFFFFF0A6A : E19C                		rol.l	#8,d4
(1) 1553/FFFFFFFFFFFF0A6C : 1818                		move.b	(a0)+,d4
(1) 1554/FFFFFFFFFFFF0A6E : 2844                		movea.l	d4,a4
(1) 1555/FFFFFFFFFFFF0A70 : 7800                		moveq	#0,d4
(1) 1556/FFFFFFFFFFFF0A72 :                     	; get value
(1) 1557/FFFFFFFFFFFF0A72 : 3C2D 0004           		move.w	4(a5),d6
(1) 1558/FFFFFFFFFFFF0A76 : 0C46 0001           		cmpi.w	#1,d6		; byte?
(1) 1559/FFFFFFFFFFFF0A7A : 660E                		bne.s	.vbyte
(1) 1560/FFFFFFFFFFFF0A7C : 1814                		move.b	(a4),d4
(1) 1561/FFFFFFFFFFFF0A7E : 2D55 0004           		move.l	(a5),4(a6)
(1) 1562/FFFFFFFFFFFF0A82 : E91C                		rol.b	#4,d4
(1) 1563/FFFFFFFFFFFF0A84 : 6158                		bsr.s	.donibl
(1) 1564/FFFFFFFFFFFF0A86 : E91C                		rol.b	#4,d4
(1) 1565/FFFFFFFFFFFF0A88 : 6154                		bsr.s	.donibl
(1) 1566/FFFFFFFFFFFF0A8A :                     .vbyte:
(1) 1567/FFFFFFFFFFFF0A8A : 0C46 0002           		cmpi.w	#2,d6		; word?
(1) 1568/FFFFFFFFFFFF0A8E : 661C                		bne.s	.vword
(1) 1569/FFFFFFFFFFFF0A90 : 1814                		move.b	(a4),d4
(1) 1570/FFFFFFFFFFFF0A92 : E15C                		rol.w	#8,d4
(1) 1571/FFFFFFFFFFFF0A94 : 182C 0001           		move.b	1(a4),d4
(1) 1572/FFFFFFFFFFFF0A98 : 2D55 0004           		move.l	(a5),4(a6)
(1) 1573/FFFFFFFFFFFF0A9C : E95C                		rol.w	#4,d4
(1) 1574/FFFFFFFFFFFF0A9E : 613E                		bsr.s	.donibl
(1) 1575/FFFFFFFFFFFF0AA0 : E95C                		rol.w	#4,d4
(1) 1576/FFFFFFFFFFFF0AA2 : 613A                		bsr.s	.donibl
(1) 1577/FFFFFFFFFFFF0AA4 : E95C                		rol.w	#4,d4
(1) 1578/FFFFFFFFFFFF0AA6 : 6136                		bsr.s	.donibl
(1) 1579/FFFFFFFFFFFF0AA8 : E95C                		rol.w	#4,d4
(1) 1580/FFFFFFFFFFFF0AAA : 6132                		bsr.s	.donibl
(1) 1581/FFFFFFFFFFFF0AAC :                     .vword:
(1) 1582/FFFFFFFFFFFF0AAC : 0C46 0003           		cmpi.w	#3,d6		; long?
(1) 1583/FFFFFFFFFFFF0AB0 : 6624                		bne.s	.vlong
(1) 1584/FFFFFFFFFFFF0AB2 : 1814                		move.b	(a4),d4
(1) 1585/FFFFFFFFFFFF0AB4 : E19C                		rol.l	#8,d4
(1) 1586/FFFFFFFFFFFF0AB6 : 182C 0001           		move.b	1(a4),d4
(1) 1587/FFFFFFFFFFFF0ABA : E19C                		rol.l	#8,d4
(1) 1588/FFFFFFFFFFFF0ABC : 182C 0002           		move.b	2(a4),d4
(1) 1589/FFFFFFFFFFFF0AC0 : E19C                		rol.l	#8,d4
(1) 1590/FFFFFFFFFFFF0AC2 : 182C 0003           		move.b	3(a4),d4
(1) 1591/FFFFFFFFFFFF0AC6 : 2D55 0004           		move.l	(a5),4(a6)
(1) 1592/FFFFFFFFFFFF0ACA : 3C3C 0007           		move.w	#7,d6
(1) 1593/FFFFFFFFFFFF0ACE : E99C                .lngloop:	rol.l	#4,d4
(1) 1594/FFFFFFFFFFFF0AD0 : 610C                		bsr.s	.donibl
(1) 1595/FFFFFFFFFFFF0AD2 : 51CE FFFA           		dbf	d6,.lngloop
(1) 1596/FFFFFFFFFFFF0AD6 :                     .vlong:
(1) 1597/FFFFFFFFFFFF0AD6 : 429D                		clr.l	(a5)+
(1) 1598/FFFFFFFFFFFF0AD8 : 425D                		clr.w	(a5)+
(1) 1599/FFFFFFFFFFFF0ADA : 6000 FF7C           		bra	.nextv
(1) 1600/FFFFFFFFFFFF0ADE :                     ; make nibble byte
(1) 1601/FFFFFFFFFFFF0ADE :                     .donibl:
(1) 1602/FFFFFFFFFFFF0ADE : 3A04                		move.w	d4,d5
(1) 1603/FFFFFFFFFFFF0AE0 : 0245 000F           		andi.w	#%1111,d5
(1) 1604/FFFFFFFFFFFF0AE4 : 0C05 000A           		cmpi.b	#$A,d5
(1) 1605/FFFFFFFFFFFF0AE8 : 6D04                		blt.s	.lowr
(1) 1606/FFFFFFFFFFFF0AEA : DA3C 0007           		add.b	#7,d5
(1) 1607/FFFFFFFFFFFF0AEE :                     .lowr:
(1) 1608/FFFFFFFFFFFF0AEE : DA7C 0030           		add.w	#"0",d5
(1) 1609/FFFFFFFFFFFF0AF2 : DA78 B8E2           		add.w	(RAM_VidPrntVram).w,d5
(1) 1610/FFFFFFFFFFFF0AF6 : 3C85                		move.w	d5,(a6)
(1) 1611/FFFFFFFFFFFF0AF8 : 4E75                		rts
(1) 1612/FFFFFFFFFFFF0AFA :                     ; exit
(1) 1613/FFFFFFFFFFFF0AFA :                     .nothing:
(1) 1614/FFFFFFFFFFFF0AFA : 4CDF 70F0           		movem.l	(sp)+,d4-d7/a4-a6
(1) 1615/FFFFFFFFFFFF0AFE : 4E75                		rts
(1) 1616/FFFFFFFFFFFF0B00 :                     
(1) 1617/FFFFFFFFFFFF0B00 :                     ; ------------------------------------------------
(1) 1618/FFFFFFFFFFFF0B00 :                     ; Shared: pick layer / x pos / y pos and set size
(1) 1619/FFFFFFFFFFFF0B00 :                     ;
(1) 1620/FFFFFFFFFFFF0B00 :                     ; Input:
(1) 1621/FFFFFFFFFFFF0B00 :                     ; d0.l | locate(layer,x,y)
(1) 1622/FFFFFFFFFFFF0B00 :                     ;
(1) 1623/FFFFFFFFFFFF0B00 :                     ; Returns:
(1) 1624/FFFFFFFFFFFF0B00 :                     ; d5 | VRAM position
(1) 1625/FFFFFFFFFFFF0B00 :                     ; d6 | Width
(1) 1626/FFFFFFFFFFFF0B00 :                     ; ------------------------------------------------
(1) 1627/FFFFFFFFFFFF0B00 :                     
(1) 1628/FFFFFFFFFFFF0B00 :                     vid_PickLayer:
(1) 1629/FFFFFFFFFFFF0B00 : 2C00                		move.l	d0,d6			; d6 - pick layer
(1) 1630/FFFFFFFFFFFF0B02 : 4846                		swap	d6
(1) 1631/FFFFFFFFFFFF0B04 : 0806 0000           		btst	#0,d6
(1) 1632/FFFFFFFFFFFF0B08 : 671C                		beq.s	.plawnd
(1) 1633/FFFFFFFFFFFF0B0A : 1A38 B8FA           		move.b	(RAM_VdpRegs+4).w,d5	; BG
(1) 1634/FFFFFFFFFFFF0B0E : 3805                		move.w	d5,d4
(1) 1635/FFFFFFFFFFFF0B10 : E24C                		lsr.w	#1,d4
(1) 1636/FFFFFFFFFFFF0B12 : 0244 0003           		andi.w	#%11,d4
(1) 1637/FFFFFFFFFFFF0B16 : 4845                		swap	d5
(1) 1638/FFFFFFFFFFFF0B18 : 3A04                		move.w	d4,d5
(1) 1639/FFFFFFFFFFFF0B1A : 4845                		swap	d5
(1) 1640/FFFFFFFFFFFF0B1C : 0245 0001           		andi.w	#1,d5
(1) 1641/FFFFFFFFFFFF0B20 : E14D                		lsl.w	#8,d5
(1) 1642/FFFFFFFFFFFF0B22 : EB4D                		lsl.w	#5,d5
(1) 1643/FFFFFFFFFFFF0B24 : 6024                		bra.s	.golyr
(1) 1644/FFFFFFFFFFFF0B26 :                     .plawnd:
(1) 1645/FFFFFFFFFFFF0B26 : 1A38 B8F8           		move.b	(RAM_VdpRegs+2).w,d5	; FG
(1) 1646/FFFFFFFFFFFF0B2A : 0806 0001           		btst	#1,d6
(1) 1647/FFFFFFFFFFFF0B2E : 6704                		beq.s	.nowd
(1) 1648/FFFFFFFFFFFF0B30 : 1A38 B8F9           		move.b	(RAM_VdpRegs+3).w,d5	; WINDOW
(1) 1649/FFFFFFFFFFFF0B34 :                     .nowd:
(1) 1650/FFFFFFFFFFFF0B34 : 3805                		move.w	d5,d4
(1) 1651/FFFFFFFFFFFF0B36 : E84C                		lsr.w	#4,d4
(1) 1652/FFFFFFFFFFFF0B38 : 0244 0003           		andi.w	#%11,d4
(1) 1653/FFFFFFFFFFFF0B3C : 4845                		swap	d5
(1) 1654/FFFFFFFFFFFF0B3E : 3A04                		move.w	d4,d5
(1) 1655/FFFFFFFFFFFF0B40 : 4845                		swap	d5
(1) 1656/FFFFFFFFFFFF0B42 : 0245 000E           		andi.w	#%00001110,d5
(1) 1657/FFFFFFFFFFFF0B46 : E14D                		lsl.w	#8,d5
(1) 1658/FFFFFFFFFFFF0B48 : E54D                		lsl.w	#2,d5
(1) 1659/FFFFFFFFFFFF0B4A :                     .golyr:
(1) 1660/FFFFFFFFFFFF0B4A : 0045 4000           		ori.w	#$4000,d5
(1) 1661/FFFFFFFFFFFF0B4E : 3800                		move.w	d0,d4			; Y start pos
(1) 1662/FFFFFFFFFFFF0B50 : 0244 00FF           		andi.w	#$FF,d4			; Y only
(1) 1663/FFFFFFFFFFFF0B54 : ED4C                		lsl.w	#6,d4
(1) 1664/FFFFFFFFFFFF0B56 : 1C38 B906           		move.b	(RAM_VdpRegs+$10).w,d6
(1) 1665/FFFFFFFFFFFF0B5A : 0246 0003           		andi.w	#%11,d6
(1) 1666/FFFFFFFFFFFF0B5E : 670A                		beq.s	.thissz
(1) 1667/FFFFFFFFFFFF0B60 : D844                		add.w	d4,d4			; H64
(1) 1668/FFFFFFFFFFFF0B62 : 0246 0002           		andi.w	#%10,d6
(1) 1669/FFFFFFFFFFFF0B66 : 6702                		beq.s	.thissz
(1) 1670/FFFFFFFFFFFF0B68 : D844                		add.w	d4,d4			; H128
(1) 1671/FFFFFFFFFFFF0B6A :                     .thissz:
(1) 1672/FFFFFFFFFFFF0B6A : DA44                		add.w	d4,d5
(1) 1673/FFFFFFFFFFFF0B6C : 3800                		move.w	d0,d4
(1) 1674/FFFFFFFFFFFF0B6E : 0244 FF00           		andi.w	#$FF00,d4		; X only
(1) 1675/FFFFFFFFFFFF0B72 : EE4C                		lsr.w	#7,d4
(1) 1676/FFFFFFFFFFFF0B74 : DA44                		add.w	d4,d5			; X add
(1) 1677/FFFFFFFFFFFF0B76 : 4845                		swap	d5
(1) 1678/FFFFFFFFFFFF0B78 : 7C00                		moveq	#0,d6
(1) 1679/FFFFFFFFFFFF0B7A : 3C3C 0040           		move.w	#$40,d6			; Set jump size
(1) 1680/FFFFFFFFFFFF0B7E : 1838 B906           		move.b	(RAM_VdpRegs+$10).w,d4
(1) 1681/FFFFFFFFFFFF0B82 : 0244 0003           		andi.w	#%11,d4
(1) 1682/FFFFFFFFFFFF0B86 : 670A                		beq.s	.thisszj
(1) 1683/FFFFFFFFFFFF0B88 : DC46                		add.w	d6,d6			; H64
(1) 1684/FFFFFFFFFFFF0B8A : 0244 0002           		andi.w	#%10,d4
(1) 1685/FFFFFFFFFFFF0B8E : 6702                		beq.s	.thisszj
(1) 1686/FFFFFFFFFFFF0B90 : DC46                		add.w	d6,d6			; H128
(1) 1687/FFFFFFFFFFFF0B92 :                     .thisszj:
(1) 1688/FFFFFFFFFFFF0B92 : 4846                		swap	d6
(1) 1689/FFFFFFFFFFFF0B94 : 4E75                		rts
(1) 1690/FFFFFFFFFFFF0B96 :                     
(1) 1691/FFFFFFFFFFFF0B96 :                     ; ====================================================================
(1) 1692/FFFFFFFFFFFF0B96 :                     ; ----------------------------------------------------------------
(1) 1693/FFFFFFFFFFFF0B96 :                     ; Objects system
(1) 1694/FFFFFFFFFFFF0B96 :                     ; ----------------------------------------------------------------
(1) 1695/FFFFFFFFFFFF0B96 :                     
(1) 1696/FFFFFFFFFFFF0B96 :                     ; --------------------------------------------------------
(1) 1697/FFFFFFFFFFFF0B96 :                     ; Init/Clear Objects system
(1) 1698/FFFFFFFFFFFF0B96 :                     ; --------------------------------------------------------
(1) 1699/FFFFFFFFFFFF0B96 :                     
(1) 1700/FFFFFFFFFFFF0B96 :                     Objects_Clear:
(1) 1701/FFFFFFFFFFFF0B96 : 4DF8 AD94           		lea	(RAM_Objects).w,a6
(1) 1702/FFFFFFFFFFFF0B9A : 3E3C 098F           		move.w	#(sizeof_mdobj*MAX_MDOBJ)-1,d7
(1) 1703/FFFFFFFFFFFF0B9E :                     .clr:
(1) 1704/FFFFFFFFFFFF0B9E : 421E                		clr.b	(a6)+
(1) 1705/FFFFFFFFFFFF0BA0 : 51CF FFFC           		dbf	d7,.clr
(1) 1706/FFFFFFFFFFFF0BA4 : 4DF8 B724           		lea	(RAM_ObjDispList).w,a6
(1) 1707/FFFFFFFFFFFF0BA8 : 3E3C 0017           		move.w	#MAX_MDOBJ-1,d7
(1) 1708/FFFFFFFFFFFF0BAC :                     .clr_d:
(1) 1709/FFFFFFFFFFFF0BAC : 425E                		clr.w	(a6)+
(1) 1710/FFFFFFFFFFFF0BAE : 51CF FFFC           		dbf	d7,.clr_d
(1) 1711/FFFFFFFFFFFF0BB2 : 31FC 0001 B8DA      		move.w	#1,(RAM_SprLinkNum).w
(1) 1712/FFFFFFFFFFFF0BB8 : 4278 B8D8           		clr.w	(RAM_SprDrwCntr).w
(1) 1713/FFFFFFFFFFFF0BBC : 4E75                		rts
(1) 1714/FFFFFFFFFFFF0BBE :                     
(1) 1715/FFFFFFFFFFFF0BBE :                     ; --------------------------------------------------------
(1) 1716/FFFFFFFFFFFF0BBE :                     ; Process object code
(1) 1717/FFFFFFFFFFFF0BBE :                     ; --------------------------------------------------------
(1) 1718/FFFFFFFFFFFF0BBE :                     
(1) 1719/FFFFFFFFFFFF0BBE :                     Objects_Run:
(1) 1720/FFFFFFFFFFFF0BBE : 4DF8 AD94           		lea	(RAM_Objects).w,a6
(1) 1721/FFFFFFFFFFFF0BC2 : 3E3C 0017           		move.w	#MAX_MDOBJ-1,d7
(1) 1722/FFFFFFFFFFFF0BC6 :                     .next_one:
(1) 1723/FFFFFFFFFFFF0BC6 : 2C16                		move.l	obj_code(a6),d6
(1) 1724/FFFFFFFFFFFF0BC8 : 6708                		beq.s	.no_code	; Free slot
(1) 1725/FFFFFFFFFFFF0BCA : 2F07                		move.l	d7,-(sp)
(1) 1726/FFFFFFFFFFFF0BCC : 2A46                		move.l	d6,a5
(1) 1727/FFFFFFFFFFFF0BCE : 4E95                		jsr	(a5)
(1) 1728/FFFFFFFFFFFF0BD0 : 2E1F                		move.l	(sp)+,d7
(1) 1729/FFFFFFFFFFFF0BD2 :                     .no_code:
(1) 1730/FFFFFFFFFFFF0BD2 : DCFC 0066           		adda	#sizeof_mdobj,a6
(1) 1731/FFFFFFFFFFFF0BD6 : 51CF FFEE           		dbf	d7,.next_one
(1) 1732/FFFFFFFFFFFF0BDA : 4E75                		rts
(1) 1733/FFFFFFFFFFFF0BDC :                     
(1) 1734/FFFFFFFFFFFF0BDC :                     ; --------------------------------------------------------
(1) 1735/FFFFFFFFFFFF0BDC :                     ; Objects_Set
(1) 1736/FFFFFFFFFFFF0BDC :                     ;
(1) 1737/FFFFFFFFFFFF0BDC :                     ; Input:
(1) 1738/FFFFFFFFFFFF0BDC :                     ; d0.l | Object code location (0 - delete)
(1) 1739/FFFFFFFFFFFF0BDC :                     ; d1.w | Object slot
(1) 1740/FFFFFFFFFFFF0BDC :                     ; d2.b | Object sub-id (obj_subid)
(1) 1741/FFFFFFFFFFFF0BDC :                     ;
(1) 1742/FFFFFFFFFFFF0BDC :                     ; Breaks:
(1) 1743/FFFFFFFFFFFF0BDC :                     ; d7,a5-a6
(1) 1744/FFFFFFFFFFFF0BDC :                     ; --------------------------------------------------------
(1) 1745/FFFFFFFFFFFF0BDC :                     
(1) 1746/FFFFFFFFFFFF0BDC :                     Objects_Set:
(1) 1747/FFFFFFFFFFFF0BDC : 48E7 0106           		movem.l	d7/a5-a6,-(sp)
(1) 1748/FFFFFFFFFFFF0BE0 : 4DF8 AD94           		lea	(RAM_Objects).w,a6
(1) 1749/FFFFFFFFFFFF0BE4 : 2A4E                		move.l	a6,a5
(1) 1750/FFFFFFFFFFFF0BE6 : 3E3C 0065           		move.w	#sizeof_mdobj-1,d7
(1) 1751/FFFFFFFFFFFF0BEA :                     .clr:
(1) 1752/FFFFFFFFFFFF0BEA : 421D                		clr.b	(a5)+
(1) 1753/FFFFFFFFFFFF0BEC : 51CF FFFC           		dbf	d7,.clr
(1) 1754/FFFFFFFFFFFF0BF0 : 3E01                		move.w	d1,d7
(1) 1755/FFFFFFFFFFFF0BF2 : CEFC 0066           		mulu.w	#sizeof_mdobj,d7
(1) 1756/FFFFFFFFFFFF0BF6 : DCC7                		adda	d7,a6
(1) 1757/FFFFFFFFFFFF0BF8 : 2C80                		move.l	d0,obj_code(a6)
(1) 1758/FFFFFFFFFFFF0BFA : 1D42 0023           		move.b	d2,obj_subid(a6)
(1) 1759/FFFFFFFFFFFF0BFE : 4DF8 B724           		lea	(RAM_ObjDispList).w,a6
(1) 1760/FFFFFFFFFFFF0C02 : 3E01                		move.w	d1,d7
(1) 1761/FFFFFFFFFFFF0C04 : DE47                		add.w	d7,d7
(1) 1762/FFFFFFFFFFFF0C06 : 3DBC 0000 7000      		move.w	#0,(a6,d7.w)
(1) 1763/FFFFFFFFFFFF0C0C : 4CDF 6080           		movem.l	(sp)+,d7/a5-a6
(1) 1764/FFFFFFFFFFFF0C10 : 4E75                		rts
(1) 1765/FFFFFFFFFFFF0C12 :                     
(1) 1766/FFFFFFFFFFFF0C12 :                     ; --------------------------------------------------------
(1) 1767/FFFFFFFFFFFF0C12 :                     ; Objects_Add
(1) 1768/FFFFFFFFFFFF0C12 :                     ;
(1) 1769/FFFFFFFFFFFF0C12 :                     ; Input:
(1) 1770/FFFFFFFFFFFF0C12 :                     ; d0.l | Object code
(1) 1771/FFFFFFFFFFFF0C12 :                     ; d1.b | Object sub-type (obj_subid)
(1) 1772/FFFFFFFFFFFF0C12 :                     ;
(1) 1773/FFFFFFFFFFFF0C12 :                     ; Returns:
(1) 1774/FFFFFFFFFFFF0C12 :                     ; d0.l | Sets -1 if no free slot found.
(1) 1775/FFFFFFFFFFFF0C12 :                     ;
(1) 1776/FFFFFFFFFFFF0C12 :                     ; Breaks:
(1) 1777/FFFFFFFFFFFF0C12 :                     ; d7,a5-a6
(1) 1778/FFFFFFFFFFFF0C12 :                     ; --------------------------------------------------------
(1) 1779/FFFFFFFFFFFF0C12 :                     
(1) 1780/FFFFFFFFFFFF0C12 :                     Objects_Add:
(1) 1781/FFFFFFFFFFFF0C12 : 48E7 0106           		movem.l	d7/a5-a6,-(sp)
(1) 1782/FFFFFFFFFFFF0C16 : 4DF8 AD94           		lea	(RAM_Objects).w,a6
(1) 1783/FFFFFFFFFFFF0C1A : 3E3C 0017           		move.w	#MAX_MDOBJ-1,d7
(1) 1784/FFFFFFFFFFFF0C1E :                     .search:
(1) 1785/FFFFFFFFFFFF0C1E : 2E16                		move.l	obj_code(a6),d7
(1) 1786/FFFFFFFFFFFF0C20 : 670C                		beq.s	.use_it
(1) 1787/FFFFFFFFFFFF0C22 : DCFC 0066           		adda	#sizeof_mdobj,a6
(1) 1788/FFFFFFFFFFFF0C26 : 51CF FFF6           		dbf	d7,.search
(1) 1789/FFFFFFFFFFFF0C2A : 70FF                		moveq	#-1,d0		; Return ran-out flag
(1) 1790/FFFFFFFFFFFF0C2C : 4E75                		rts
(1) 1791/FFFFFFFFFFFF0C2E :                     .use_it:
(1) 1792/FFFFFFFFFFFF0C2E : 2A4E                		move.l	a6,a5
(1) 1793/FFFFFFFFFFFF0C30 : 3E3C 0065           		move.w	#sizeof_mdobj-1,d7
(1) 1794/FFFFFFFFFFFF0C34 :                     .clr:
(1) 1795/FFFFFFFFFFFF0C34 : 421D                		clr.b	(a5)+
(1) 1796/FFFFFFFFFFFF0C36 : 51CF FFFC           		dbf	d7,.clr
(1) 1797/FFFFFFFFFFFF0C3A : 2C80                		move.l	d0,obj_code(a6)
(1) 1798/FFFFFFFFFFFF0C3C : 1D41 0023           		move.b	d1,obj_subid(a6)
(1) 1799/FFFFFFFFFFFF0C40 : 4CDF 6080           		movem.l	(sp)+,d7/a5-a6
(1) 1800/FFFFFFFFFFFF0C44 : 4E75                		rts
(1) 1801/FFFFFFFFFFFF0C46 :                     
(1) 1802/FFFFFFFFFFFF0C46 :                     ; --------------------------------------------------------
(1) 1803/FFFFFFFFFFFF0C46 :                     ; Draw ALL Objects from display list
(1) 1804/FFFFFFFFFFFF0C46 :                     ;
(1) 1805/FFFFFFFFFFFF0C46 :                     ; Call this BEFORE VBlank.
(1) 1806/FFFFFFFFFFFF0C46 :                     ; --------------------------------------------------------
(1) 1807/FFFFFFFFFFFF0C46 :                     
(1) 1808/FFFFFFFFFFFF0C46 :                     Objects_Show:
(1) 1809/FFFFFFFFFFFF0C46 : 48E7 0106           		movem.l	d7/a5-a6,-(sp)
(1) 1810/FFFFFFFFFFFF0C4A :                     ; 		move.w	(RAM_SprLinkNum).w,d6		; d6 - Starting sprite link
(1) 1811/FFFFFFFFFFFF0C4A :                     ; 		lea	(RAM_Sprites),a6		; a6 - Genesis sprites
(1) 1812/FFFFFFFFFFFF0C4A :                     ; 		move.w	d6,d7
(1) 1813/FFFFFFFFFFFF0C4A :                     ; 		subq.w	#1,d7
(1) 1814/FFFFFFFFFFFF0C4A :                     ; 		lsl.w	#3,d7
(1) 1815/FFFFFFFFFFFF0C4A :                     ; 		adda	d7,a6
(1) 1816/FFFFFFFFFFFF0C4A :                     ; 		move.w	(RAM_SprDrwCntr),d7
(1) 1817/FFFFFFFFFFFF0C4A :                     ; 		beq.s	.no_sprdrw
(1) 1818/FFFFFFFFFFFF0C4A :                     ; 		clr.w	(RAM_SprDrwCntr).w
(1) 1819/FFFFFFFFFFFF0C4A :                     ; 		lea	(RAM_SprDrwPz),a5
(1) 1820/FFFFFFFFFFFF0C4A :                     ; 		sub.w	#1,d7
(1) 1821/FFFFFFFFFFFF0C4A :                     ; .nexts:
(1) 1822/FFFFFFFFFFFF0C4A :                     ; 		cmp.w	#80,d6
(1) 1823/FFFFFFFFFFFF0C4A :                     ; 		bge.s	.no_sprdrw
(1) 1824/FFFFFFFFFFFF0C4A :                     ; 		move.w	(a5)+,d0
(1) 1825/FFFFFFFFFFFF0C4A :                     ; 		move.w	(a5)+,d1	; custom
(1) 1826/FFFFFFFFFFFF0C4A :                     ; 		and.w	#$FF,d1
(1) 1827/FFFFFFFFFFFF0C4A :                     ; 		lsl.w	#8,d1
(1) 1828/FFFFFFFFFFFF0C4A :                     ; 		or.w	d6,d1
(1) 1829/FFFFFFFFFFFF0C4A :                     ; 		move.w	(a5)+,d2
(1) 1830/FFFFFFFFFFFF0C4A :                     ; 		move.w	(a5)+,d3
(1) 1831/FFFFFFFFFFFF0C4A :                     ; 		move.w	d0,(a6)+
(1) 1832/FFFFFFFFFFFF0C4A :                     ; 		move.w	d1,(a6)+
(1) 1833/FFFFFFFFFFFF0C4A :                     ; 		move.w	d2,(a6)+
(1) 1834/FFFFFFFFFFFF0C4A :                     ; 		move.w	d3,(a6)+
(1) 1835/FFFFFFFFFFFF0C4A :                     ; 		add.w	#1,d6
(1) 1836/FFFFFFFFFFFF0C4A :                     ; 		dbf	d7,.nexts
(1) 1837/FFFFFFFFFFFF0C4A :                     ; .no_sprdrw:
(1) 1838/FFFFFFFFFFFF0C4A : 3C38 B8DA           		move.w	(RAM_SprLinkNum).w,d6	; d6 - Starting sprite link
(1) 1839/FFFFFFFFFFFF0C4E : 4DF8 A414           		lea	(RAM_Sprites).w,a6	; a6 - Genesis sprites
(1) 1840/FFFFFFFFFFFF0C52 : 4BF8 B724           		lea	(RAM_ObjDispList).w,a5
(1) 1841/FFFFFFFFFFFF0C56 : 3E3C 0017           		move.w	#MAX_MDOBJ-1,d7
(1) 1842/FFFFFFFFFFFF0C5A :                     .next:
(1) 1843/FFFFFFFFFFFF0C5A : 3015                		move.w	(a5),d0
(1) 1844/FFFFFFFFFFFF0C5C : 6700 00AA           		beq	.finish
(1) 1845/FFFFFFFFFFFF0C60 : 425D                		clr.w	(a5)+			; Clear original slot
(1) 1846/FFFFFFFFFFFF0C62 : 72FF                		moveq	#-1,d1			; Write the $FFFFxxxx part and
(1) 1847/FFFFFFFFFFFF0C64 : 3200                		move.w	d0,d1			; the half-address
(1) 1848/FFFFFFFFFFFF0C66 : 2841                		move.l	d1,a4			; Read object to a4
(1) 1849/FFFFFFFFFFFF0C68 : 206C 000C           		move.l	obj_map(a4),a0		; Read this object's map
(1) 1850/FFFFFFFFFFFF0C6C : 302C 001C           		move.w	obj_frame(a4),d0
(1) 1851/FFFFFFFFFFFF0C70 : 182C 0022           		move.b	obj_set(a4),d4
(1) 1852/FFFFFFFFFFFF0C74 : D040                		add.w	d0,d0
(1) 1853/FFFFFFFFFFFF0C76 : 3030 0000           		move.w	(a0,d0.w),d0
(1) 1854/FFFFFFFFFFFF0C7A : 41F0 0000           		lea	(a0,d0.w),a0
(1) 1855/FFFFFFFFFFFF0C7E : 3A18                		move.w	(a0)+,d5
(1) 1856/FFFFFFFFFFFF0C80 : 6700 0082           		beq	.mk_spr
(1) 1857/FFFFFFFFFFFF0C84 : 0445 0001           		subi.w	#1,d5
(1) 1858/FFFFFFFFFFFF0C88 :                     .mk_pz:
(1) 1859/FFFFFFFFFFFF0C88 : 0C46 0050           		cmpi.w	#80,d6
(1) 1860/FFFFFFFFFFFF0C8C : 6E00 0098           		bgt	.ran_out
(1) 1861/FFFFFFFFFFFF0C90 : 4845                		swap	d5
(1) 1862/FFFFFFFFFFFF0C92 : 4846                		swap	d6
(1) 1863/FFFFFFFFFFFF0C94 : 1018                		move.b	(a0)+,d0		; d0 - Y pos
(1) 1864/FFFFFFFFFFFF0C96 : 1218                		move.b	(a0)+,d1		; d1 - Size
(1) 1865/FFFFFFFFFFFF0C98 : 3418                		move.w	(a0)+,d2		; d2 - VRAM main
(1) 1866/FFFFFFFFFFFF0C9A : D0FC 0002           		adda	#2,a0			; <-- Reserved for VRAM double-interlace
(1) 1867/FFFFFFFFFFFF0C9E : 3618                		move.w	(a0)+,d3		; d3 - X pos
(1) 1868/FFFFFFFFFFFF0CA0 : 4880                		ext.w	d0
(1) 1869/FFFFFFFFFFFF0CA2 :                     	; X/Y flip checks
(1) 1870/FFFFFFFFFFFF0CA2 : 3A2C 0014           		move.w	obj_vram(a4),d5
(1) 1871/FFFFFFFFFFFF0CA6 : 0804 0001           		btst	#bitobj_flipV,d4
(1) 1872/FFFFFFFFFFFF0CAA : 6714                		beq.s	.vram_v
(1) 1873/FFFFFFFFFFFF0CAC : 4440                		neg.w	d0
(1) 1874/FFFFFFFFFFFF0CAE : 0440 0008           		subi.w	#8,d0
(1) 1875/FFFFFFFFFFFF0CB2 : 3C01                		move.w	d1,d6
(1) 1876/FFFFFFFFFFFF0CB4 : 0246 0003           		andi.w	#%0011,d6
(1) 1877/FFFFFFFFFFFF0CB8 : E74E                		lsl.w	#3,d6
(1) 1878/FFFFFFFFFFFF0CBA : 9046                		sub.w	d6,d0
(1) 1879/FFFFFFFFFFFF0CBC : 0045 1000           		ori.w	#$1000,d5
(1) 1880/FFFFFFFFFFFF0CC0 :                     .vram_v:
(1) 1881/FFFFFFFFFFFF0CC0 : 0804 0000           		btst	#bitobj_flipH,d4
(1) 1882/FFFFFFFFFFFF0CC4 : 6714                		beq.s	.vram_h
(1) 1883/FFFFFFFFFFFF0CC6 : 4443                		neg.w	d3
(1) 1884/FFFFFFFFFFFF0CC8 : 0443 0008           		subi.w	#8,d3
(1) 1885/FFFFFFFFFFFF0CCC : 3C01                		move.w	d1,d6
(1) 1886/FFFFFFFFFFFF0CCE : 0246 000C           		andi.w	#%1100,d6
(1) 1887/FFFFFFFFFFFF0CD2 : DC46                		add.w	d6,d6
(1) 1888/FFFFFFFFFFFF0CD4 : 9646                		sub.w	d6,d3
(1) 1889/FFFFFFFFFFFF0CD6 : 0045 0800           		ori.w	#$0800,d5
(1) 1890/FFFFFFFFFFFF0CDA :                     .vram_h:
(1) 1891/FFFFFFFFFFFF0CDA : D445                		add.w	d5,d2
(1) 1892/FFFFFFFFFFFF0CDC : D06C 0008           		add.w	obj_y(a4),d0
(1) 1893/FFFFFFFFFFFF0CE0 : D66C 0004           		add.w	obj_x(a4),d3
(1) 1894/FFFFFFFFFFFF0CE4 : D07C 0080           		add.w	#$80,d0
(1) 1895/FFFFFFFFFFFF0CE8 : D67C 0080           		add.w	#$80,d3
(1) 1896/FFFFFFFFFFFF0CEC : 4846                		swap	d6
(1) 1897/FFFFFFFFFFFF0CEE : E149                		lsl.w	#8,d1			; Size + Link
(1) 1898/FFFFFFFFFFFF0CF0 : 8246                		or.w	d6,d1
(1) 1899/FFFFFFFFFFFF0CF2 : 3CC0                		move.w	d0,(a6)+
(1) 1900/FFFFFFFFFFFF0CF4 : 3CC1                		move.w	d1,(a6)+
(1) 1901/FFFFFFFFFFFF0CF6 : 3CC2                		move.w	d2,(a6)+
(1) 1902/FFFFFFFFFFFF0CF8 : 3CC3                		move.w	d3,(a6)+
(1) 1903/FFFFFFFFFFFF0CFA : DC7C 0001           		add.w	#1,d6
(1) 1904/FFFFFFFFFFFF0CFE : 4845                		swap	d5
(1) 1905/FFFFFFFFFFFF0D00 : 51CD FF86           		dbf	d5,.mk_pz
(1) 1906/FFFFFFFFFFFF0D04 :                     .mk_spr:
(1) 1907/FFFFFFFFFFFF0D04 : 51CF FF54           		dbf	d7,.next
(1) 1908/FFFFFFFFFFFF0D08 :                     .finish:
(1) 1909/FFFFFFFFFFFF0D08 : 4DF8 A414           		lea	(RAM_Sprites).w,a6	; Check last sprite piece
(1) 1910/FFFFFFFFFFFF0D0C : 0C46 0001           		cmpi.w	#1,d6
(1) 1911/FFFFFFFFFFFF0D10 : 6714                		beq.s	.ran_out
(1) 1912/FFFFFFFFFFFF0D12 : 0C46 0050           		cmpi.w	#80,d6
(1) 1913/FFFFFFFFFFFF0D16 : 6E0E                		bgt.s	.ran_out
(1) 1914/FFFFFFFFFFFF0D18 : 3E06                		move.w	d6,d7
(1) 1915/FFFFFFFFFFFF0D1A : 0447 0001           		subi.w	#1,d7
(1) 1916/FFFFFFFFFFFF0D1E : E74F                		lsl.w	#3,d7
(1) 1917/FFFFFFFFFFFF0D20 : DCC7                		adda	d7,a6
(1) 1918/FFFFFFFFFFFF0D22 : 429E                		clr.l	(a6)+
(1) 1919/FFFFFFFFFFFF0D24 : 429E                		clr.l	(a6)+
(1) 1920/FFFFFFFFFFFF0D26 :                     .ran_out:
(1) 1921/FFFFFFFFFFFF0D26 : 31C6 B8DA           		move.w	d6,(RAM_SprLinkNum).w
(1) 1922/FFFFFFFFFFFF0D2A : 4CDF 6080           		movem.l	(sp)+,d7/a5-a6
(1) 1923/FFFFFFFFFFFF0D2E : 4E75                		rts
(1) 1924/FFFFFFFFFFFF0D30 :                     
(1) 1925/FFFFFFFFFFFF0D30 :                     ; ====================================================================
(1) 1926/FFFFFFFFFFFF0D30 :                     ; --------------------------------------------------------
(1) 1927/FFFFFFFFFFFF0D30 :                     ; Object subroutines
(1) 1928/FFFFFFFFFFFF0D30 :                     ;
(1) 1929/FFFFFFFFFFFF0D30 :                     ; These can ONLY be called on the current object's code.
(1) 1930/FFFFFFFFFFFF0D30 :                     ; --------------------------------------------------------
(1) 1931/FFFFFFFFFFFF0D30 :                     
(1) 1932/FFFFFFFFFFFF0D30 :                     ; --------------------------------------------------------
(1) 1933/FFFFFFFFFFFF0D30 :                     ; object_ResetVars
(1) 1934/FFFFFFFFFFFF0D30 :                     ;
(1) 1935/FFFFFFFFFFFF0D30 :                     ; Call this BEFORE using animation
(1) 1936/FFFFFFFFFFFF0D30 :                     ;
(1) 1937/FFFFFFFFFFFF0D30 :                     ; Input:
(1) 1938/FFFFFFFFFFFF0D30 :                     ; a6 | This object
(1) 1939/FFFFFFFFFFFF0D30 :                     ;
(1) 1940/FFFFFFFFFFFF0D30 :                     ; Breaks:
(1) 1941/FFFFFFFFFFFF0D30 :                     ; d7
(1) 1942/FFFFFFFFFFFF0D30 :                     ; --------------------------------------------------------
(1) 1943/FFFFFFFFFFFF0D30 :                     
(1) 1944/FFFFFFFFFFFF0D30 :                     object_ResetVars:
(1) 1945/FFFFFFFFFFFF0D30 : 48E7 0304           		movem.l	d6-d7/a5,-(sp)
(1) 1946/FFFFFFFFFFFF0D34 : 4BEE 0026           		lea	obj_ram(a6),a5
(1) 1947/FFFFFFFFFFFF0D38 : 3C3C 003F           		move.w	#(sizeof_mdobj-obj_ram)-1,d6
(1) 1948/FFFFFFFFFFFF0D3C : 7E00                		moveq	#0,d7
(1) 1949/FFFFFFFFFFFF0D3E : 1AC7                .clr_ram:	move.b	d7,(a5)+
(1) 1950/FFFFFFFFFFFF0D40 : 51CE FFFC           		dbf	d6,.clr_ram
(1) 1951/FFFFFFFFFFFF0D44 : 4CDF 20C0           		movem.l	(sp)+,d6-d7/a5
(1) 1952/FFFFFFFFFFFF0D48 : 4E75                		rts
(1) 1953/FFFFFFFFFFFF0D4A :                     
(1) 1954/FFFFFFFFFFFF0D4A :                     ; --------------------------------------------------------
(1) 1955/FFFFFFFFFFFF0D4A :                     ; object_Display
(1) 1956/FFFFFFFFFFFF0D4A :                     ;
(1) 1957/FFFFFFFFFFFF0D4A :                     ; Makes this object visible, requires sprite map data
(1) 1958/FFFFFFFFFFFF0D4A :                     ; (obj_map) and VRAM location (obj_vram) set up
(1) 1959/FFFFFFFFFFFF0D4A :                     ; before calling this.
(1) 1960/FFFFFFFFFFFF0D4A :                     ;
(1) 1961/FFFFFFFFFFFF0D4A :                     ; Input:
(1) 1962/FFFFFFFFFFFF0D4A :                     ; a6 | This object
(1) 1963/FFFFFFFFFFFF0D4A :                     ;
(1) 1964/FFFFFFFFFFFF0D4A :                     ; Returns:
(1) 1965/FFFFFFFFFFFF0D4A :                     ; d0 | -1 If ran out of display slots
(1) 1966/FFFFFFFFFFFF0D4A :                     ;
(1) 1967/FFFFFFFFFFFF0D4A :                     ; Breaks:
(1) 1968/FFFFFFFFFFFF0D4A :                     ; a5,d4-d7
(1) 1969/FFFFFFFFFFFF0D4A :                     ; --------------------------------------------------------
(1) 1970/FFFFFFFFFFFF0D4A :                     
(1) 1971/FFFFFFFFFFFF0D4A :                     ; *** GENESIS map ***
(1) 1972/FFFFFFFFFFFF0D4A :                     ; mapdata:
(1) 1973/FFFFFFFFFFFF0D4A :                     ;       dc.w .frame0-mapdata
(1) 1974/FFFFFFFFFFFF0D4A :                     ;       dc.w .frame1-mapdata
(1) 1975/FFFFFFFFFFFF0D4A :                     ;       ...
(1) 1976/FFFFFFFFFFFF0D4A :                     ; .frame0:
(1) 1977/FFFFFFFFFFFF0D4A :                     ;       dc.w numofpz
(1) 1978/FFFFFFFFFFFF0D4A :                     ;       dc.b YY,SS
(1) 1979/FFFFFFFFFFFF0D4A :                     ;       dc.w vram_normal
(1) 1980/FFFFFFFFFFFF0D4A :                     ;       dc.w vram_half
(1) 1981/FFFFFFFFFFFF0D4A :                     ;       dc.w XXXX
(1) 1982/FFFFFFFFFFFF0D4A :                     ;       ; next frame
(1) 1983/FFFFFFFFFFFF0D4A :                     ;       align 2
(1) 1984/FFFFFFFFFFFF0D4A :                     ;
(1) 1985/FFFFFFFFFFFF0D4A :                     ; *** 32X map ***
(1) 1986/FFFFFFFFFFFF0D4A :                     ; TODO
(1) 1987/FFFFFFFFFFFF0D4A :                     
(1) 1988/FFFFFFFFFFFF0D4A :                     object_Display:
(1) 1989/FFFFFFFFFFFF0D4A : 48E7 0104           		movem.l	d7/a5,-(sp)
(1) 1990/FFFFFFFFFFFF0D4E : 4BF8 B724           		lea	(RAM_ObjDispList).w,a5
(1) 1991/FFFFFFFFFFFF0D52 : 3E3C 0017           		move.w	#MAX_MDOBJ-1,d7
(1) 1992/FFFFFFFFFFFF0D56 :                     .srch:
(1) 1993/FFFFFFFFFFFF0D56 : 4A55                		tst.w	(a5)
(1) 1994/FFFFFFFFFFFF0D58 : 670C                		beq.s	.this_one
(1) 1995/FFFFFFFFFFFF0D5A : DAFC 0002           		adda	#2,a5
(1) 1996/FFFFFFFFFFFF0D5E : 51CF FFF6           		dbf	d7,.srch
(1) 1997/FFFFFFFFFFFF0D62 : 70FF                		moveq	#-1,d0
(1) 1998/FFFFFFFFFFFF0D64 : 6002                		bra.s	.ran_out
(1) 1999/FFFFFFFFFFFF0D66 :                     .this_one:
(1) 2000/FFFFFFFFFFFF0D66 : 3A8E                		move.w	a6,(a5)
(1) 2001/FFFFFFFFFFFF0D68 :                     .ran_out:
(1) 2002/FFFFFFFFFFFF0D68 : 4CDF 2080           		movem.l	(sp)+,d7/a5
(1) 2003/FFFFFFFFFFFF0D6C : 4E75                		rts
(1) 2004/FFFFFFFFFFFF0D6E :                     
(1) 2005/FFFFFFFFFFFF0D6E :                     ; --------------------------------------------------------
(1) 2006/FFFFFFFFFFFF0D6E :                     ; object_DMA
(1) 2007/FFFFFFFFFFFF0D6E :                     ;
(1) 2008/FFFFFFFFFFFF0D6E :                     ; Makes DMA graphics entry for this object,
(1) 2009/FFFFFFFFFFFF0D6E :                     ; for Genesis VDP Sprites ONLY.
(1) 2010/FFFFFFFFFFFF0D6E :                     ;
(1) 2011/FFFFFFFFFFFF0D6E :                     ; Input:
(1) 2012/FFFFFFFFFFFF0D6E :                     ; a6 | This object
(1) 2013/FFFFFFFFFFFF0D6E :                     ; a0 | DMA map data
(1) 2014/FFFFFFFFFFFF0D6E :                     ; a1 | Graphics data
(1) 2015/FFFFFFFFFFFF0D6E :                     ;
(1) 2016/FFFFFFFFFFFF0D6E :                     ; Breaks:
(1) 2017/FFFFFFFFFFFF0D6E :                     ; a5,d4-d7
(1) 2018/FFFFFFFFFFFF0D6E :                     ; --------------------------------------------------------
(1) 2019/FFFFFFFFFFFF0D6E :                     
(1) 2020/FFFFFFFFFFFF0D6E :                     ; object_DMA_Auto:
(1) 2021/FFFFFFFFFFFF0D6E :                     ; 		bsr	object_DMA
(1) 2022/FFFFFFFFFFFF0D6E :                     ; 		rts
(1) 2023/FFFFFFFFFFFF0D6E :                     
(1) 2024/FFFFFFFFFFFF0D6E :                     ; ------------------------------------------------
(1) 2025/FFFFFFFFFFFF0D6E :                     
(1) 2026/FFFFFFFFFFFF0D6E :                     object_DMA:
(1) 2027/FFFFFFFFFFFF0D6E : 48E7 0F04           		movem.l	d4-d7/a5,-(sp)
(1) 2028/FFFFFFFFFFFF0D72 : 2609                		move.l	a1,d3			; d3 - Art data
(1) 2029/FFFFFFFFFFFF0D74 : 382E 001C           		move.w	obj_frame(a6),d4
(1) 2030/FFFFFFFFFFFF0D78 : D844                 		add.w	d4,d4
(1) 2031/FFFFFFFFFFFF0D7A : 3830 4000           		move.w	(a0,d4.w),d4
(1) 2032/FFFFFFFFFFFF0D7E : D0C4                 		adda	d4,a0
(1) 2033/FFFFFFFFFFFF0D80 : 7800                 		moveq	#0,d4
(1) 2034/FFFFFFFFFFFF0D82 : 3818                 		move.w	(a0)+,d4
(1) 2035/FFFFFFFFFFFF0D84 : 673E                 		beq.s	.no_dma
(1) 2036/FFFFFFFFFFFF0D86 : 5344                 		subq.w	#1,d4
(1) 2037/FFFFFFFFFFFF0D88 : 322E 0014           		move.w	obj_vram(a6),d1
(1) 2038/FFFFFFFFFFFF0D8C : 0241 07FF           		andi.w	#$7FF,d1
(1) 2039/FFFFFFFFFFFF0D90 : EB49                		lsl.w	#5,d1
(1) 2040/FFFFFFFFFFFF0D92 : 2F0E                		move.l	a6,-(sp)		; SAVE a6
(1) 2041/FFFFFFFFFFFF0D94 :                     .next_pz:
(1) 2042/FFFFFFFFFFFF0D94 : 4844                		swap	d4
(1) 2043/FFFFFFFFFFFF0D96 : 3818                		move.w	(a0)+,d4
(1) 2044/FFFFFFFFFFFF0D98 : 3404                		move.w	d4,d2
(1) 2045/FFFFFFFFFFFF0D9A : EE4A                		lsr.w	#7,d2
(1) 2046/FFFFFFFFFFFF0D9C : 0242 01E0           		andi.w	#$1E0,d2
(1) 2047/FFFFFFFFFFFF0DA0 : D47C 0020           		add.w	#$20,d2
(1) 2048/FFFFFFFFFFFF0DA4 : 7000                		moveq	#0,d0
(1) 2049/FFFFFFFFFFFF0DA6 : 3004                		move.w	d4,d0
(1) 2050/FFFFFFFFFFFF0DA8 : 0240 0FFF           		andi.w	#$FFF,d0
(1) 2051/FFFFFFFFFFFF0DAC : EB48                		lsl.w	#5,d0
(1) 2052/FFFFFFFFFFFF0DAE : D083                		add.l	d3,d0
(1) 2053/FFFFFFFFFFFF0DB0 : 6100 F8C8           		bsr	Video_DmaMkEntry	; kills a6
(1) 2054/FFFFFFFFFFFF0DB4 : D242                		add.w	d2,d1
(1) 2055/FFFFFFFFFFFF0DB6 : 4844                		swap	d4
(1) 2056/FFFFFFFFFFFF0DB8 : 51CC FFDA           		dbf	d4,.next_pz
(1) 2057/FFFFFFFFFFFF0DBC : 2C5F                		move.l	(sp)+,a6
(1) 2058/FFFFFFFFFFFF0DBE : EA49                		lsr.w	#5,d1
(1) 2059/FFFFFFFFFFFF0DC0 : 926E 0014           		sub.w	obj_vram(a6),d1
(1) 2060/FFFFFFFFFFFF0DC4 :                     .no_dma:
(1) 2061/FFFFFFFFFFFF0DC4 : 4CDF 20F0           		movem.l	(sp)+,d4-d7/a5
(1) 2062/FFFFFFFFFFFF0DC8 : 4E75                		rts
(1) 2063/FFFFFFFFFFFF0DCA :                     
(1) 2064/FFFFFFFFFFFF0DCA :                     ; --------------------------------------------------------
(1) 2065/FFFFFFFFFFFF0DCA :                     ; object_Animate
(1) 2066/FFFFFFFFFFFF0DCA :                     ;
(1) 2067/FFFFFFFFFFFF0DCA :                     ; Animates the sprite
(1) 2068/FFFFFFFFFFFF0DCA :                     ;
(1) 2069/FFFFFFFFFFFF0DCA :                     ; Input:
(1) 2070/FFFFFFFFFFFF0DCA :                     ; a6 | This object
(1) 2071/FFFFFFFFFFFF0DCA :                     ; a0 | Animation data
(1) 2072/FFFFFFFFFFFF0DCA :                     ;
(1) 2073/FFFFFFFFFFFF0DCA :                     ; Breaks:
(1) 2074/FFFFFFFFFFFF0DCA :                     ; a0/d5-d7
(1) 2075/FFFFFFFFFFFF0DCA :                     ; --------------------------------------------------------
(1) 2076/FFFFFFFFFFFF0DCA :                     
(1) 2077/FFFFFFFFFFFF0DCA :                     object_Animate:
(1) 2078/FFFFFFFFFFFF0DCA : 48E7 0700           		movem.l	d5-d7,-(sp)
(1) 2079/FFFFFFFFFFFF0DCE : 7E00                		moveq	#0,d7
(1) 2080/FFFFFFFFFFFF0DD0 : 1E2E 001F            		move.b	obj_anim_icur(a6),d7
(1) 2081/FFFFFFFFFFFF0DD4 : BE2E 001E            		cmp.b	obj_anim_id(a6),d7
(1) 2082/FFFFFFFFFFFF0DD8 : 670E                 		beq.s	.sameThing
(1) 2083/FFFFFFFFFFFF0DDA : 1D6E 001E 001F       		move.b	obj_anim_id(a6),obj_anim_icur(a6)
(1) 2084/FFFFFFFFFFFF0DE0 : 426E 001A            		clr.w	obj_anim_indx(a6)
(1) 2085/FFFFFFFFFFFF0DE4 : 422E 0020            		clr.b	obj_anim_spd(a6)
(1) 2086/FFFFFFFFFFFF0DE8 :                     .sameThing:
(1) 2087/FFFFFFFFFFFF0DE8 : 1E2E 001E            		move.b	obj_anim_id(a6),d7
(1) 2088/FFFFFFFFFFFF0DEC : 0C07 00FF            		cmpi.b	#-1,d7
(1) 2089/FFFFFFFFFFFF0DF0 : 6748                 		beq.s	.return
(1) 2090/FFFFFFFFFFFF0DF2 : DE47                 		add.w	d7,d7
(1) 2091/FFFFFFFFFFFF0DF4 : 3E30 7000            		move.w	(a0,d7.w),d7
(1) 2092/FFFFFFFFFFFF0DF8 : 41F0 7000            		lea	(a0,d7.w),a0
(1) 2093/FFFFFFFFFFFF0DFC : 3E18                 		move.w	(a0)+,d7
(1) 2094/FFFFFFFFFFFF0DFE : 0C47 FFFF            		cmpi.w	#-1,d7
(1) 2095/FFFFFFFFFFFF0E02 : 670C                 		beq.s	.keepspd
(1) 2096/FFFFFFFFFFFF0E04 : 042E 0001 0020       		subi.b	#1,obj_anim_spd(a6)
(1) 2097/FFFFFFFFFFFF0E0A : 6A2E                 		bpl.s	.return
(1) 2098/FFFFFFFFFFFF0E0C : 1D47 0020           		move.b	d7,obj_anim_spd(a6)
(1) 2099/FFFFFFFFFFFF0E10 :                     .keepspd:
(1) 2100/FFFFFFFFFFFF0E10 : 7C00                 		moveq	#0,d6
(1) 2101/FFFFFFFFFFFF0E12 : 3E2E 001A            		move.w	obj_anim_indx(a6),d7
(1) 2102/FFFFFFFFFFFF0E16 : DE47                 		add.w	d7,d7
(1) 2103/FFFFFFFFFFFF0E18 : 3C10                 		move.w	(a0),d6
(1) 2104/FFFFFFFFFFFF0E1A : D0C7                 		adda	d7,a0
(1) 2105/FFFFFFFFFFFF0E1C : 3A10                 		move.w	(a0),d5
(1) 2106/FFFFFFFFFFFF0E1E : 0C45 FFFF            		cmpi.w	#-1,d5
(1) 2107/FFFFFFFFFFFF0E22 : 6718                 		beq.s	.noAnim		; loop
(1) 2108/FFFFFFFFFFFF0E24 : 0C45 FFFE            		cmpi.w	#-2,d5
(1) 2109/FFFFFFFFFFFF0E28 : 672A                 		beq.s	.lastFrame	; finish
(1) 2110/FFFFFFFFFFFF0E2A : 0C45 FFFD            		cmpi.w	#-3,d5
(1) 2111/FFFFFFFFFFFF0E2E : 671A                 		beq.s	.goToFrame
(1) 2112/FFFFFFFFFFFF0E30 : 3D45 001C            		move.w	d5,obj_frame(a6)
(1) 2113/FFFFFFFFFFFF0E34 : 066E 0001 001A       		add.w	#1,obj_anim_indx(a6)
(1) 2114/FFFFFFFFFFFF0E3A :                     .return:
(1) 2115/FFFFFFFFFFFF0E3A : 601C                 		bra.s	.exit_anim
(1) 2116/FFFFFFFFFFFF0E3C :                     .noAnim:
(1) 2117/FFFFFFFFFFFF0E3C : 3D7C 0001 001A       		move.w	#1,obj_anim_indx(a6)
(1) 2118/FFFFFFFFFFFF0E42 : 3A06                 		move.w	d6,d5
(1) 2119/FFFFFFFFFFFF0E44 : 3D45 001C            		move.w	d5,obj_frame(a6)
(1) 2120/FFFFFFFFFFFF0E48 : 600E                		bra.s	.exit_anim
(1) 2121/FFFFFFFFFFFF0E4A :                     .goToFrame:
(1) 2122/FFFFFFFFFFFF0E4A : 426E 001A           		clr.w	obj_anim_indx(a6)
(1) 2123/FFFFFFFFFFFF0E4E : 3D68 0002 001A      		move.w	2(a0),obj_anim_indx(a6)
(1) 2124/FFFFFFFFFFFF0E54 :                     .lastFrame:
(1) 2125/FFFFFFFFFFFF0E54 : 422E 0020            		clr.b	obj_anim_spd(a6)
(1) 2126/FFFFFFFFFFFF0E58 :                     .exit_anim:
(1) 2127/FFFFFFFFFFFF0E58 : 4CDF 00E0           		movem.l	(sp)+,d5-d7
(1) 2128/FFFFFFFFFFFF0E5C : 4E75                		rts
(1) 2129/FFFFFFFFFFFF0E5E :                     
(1) 2130/FFFFFFFFFFFF0E5E :                     ; --------------------------------------------------------
(1) 2131/FFFFFFFFFFFF0E5E :                     ; object_ResetAnim
(1) 2132/FFFFFFFFFFFF0E5E :                     ;
(1) 2133/FFFFFFFFFFFF0E5E :                     ; Call this to reset animation
(1) 2134/FFFFFFFFFFFF0E5E :                     ;
(1) 2135/FFFFFFFFFFFF0E5E :                     ; Input:
(1) 2136/FFFFFFFFFFFF0E5E :                     ; a6 | This object
(1) 2137/FFFFFFFFFFFF0E5E :                     ; --------------------------------------------------------
(1) 2138/FFFFFFFFFFFF0E5E :                     
(1) 2139/FFFFFFFFFFFF0E5E :                     object_ResetAnim:
(1) 2140/FFFFFFFFFFFF0E5E : 426E 001A            		clr.w	obj_anim_indx(a6)
(1) 2141/FFFFFFFFFFFF0E62 : 422E 0020            		clr.b	obj_anim_spd(a6)
(1) 2142/FFFFFFFFFFFF0E66 : 1D7C 0000 001F      		move.b	#0,obj_anim_icur(a6)
(1) 2143/FFFFFFFFFFFF0E6C : 4E75                		rts
(1) 2144/FFFFFFFFFFFF0E6E :                     
(1) 2145/FFFFFFFFFFFF0E6E :                     ; --------------------------------------------------------
(1) 2146/FFFFFFFFFFFF0E6E :                     ; object_Speed
(1) 2147/FFFFFFFFFFFF0E6E :                     ;
(1) 2148/FFFFFFFFFFFF0E6E :                     ; Moves the object using speed variables
(1) 2149/FFFFFFFFFFFF0E6E :                     ;
(1) 2150/FFFFFFFFFFFF0E6E :                     ; Input:
(1) 2151/FFFFFFFFFFFF0E6E :                     ; a6 | This object
(1) 2152/FFFFFFFFFFFF0E6E :                     ;
(1) 2153/FFFFFFFFFFFF0E6E :                     ; Breaks:
(1) 2154/FFFFFFFFFFFF0E6E :                     ; d7
(1) 2155/FFFFFFFFFFFF0E6E :                     ; --------------------------------------------------------
(1) 2156/FFFFFFFFFFFF0E6E :                     
(1) 2157/FFFFFFFFFFFF0E6E :                     object_Speed:
(1) 2158/FFFFFFFFFFFF0E6E : 2F07                		move.l	d7,-(sp)
(1) 2159/FFFFFFFFFFFF0E70 : 7E00                		moveq	#0,d7
(1) 2160/FFFFFFFFFFFF0E72 : 3E2E 0016           		move.w	obj_x_spd(a6),d7
(1) 2161/FFFFFFFFFFFF0E76 : 48C7                		ext.l	d7
(1) 2162/FFFFFFFFFFFF0E78 : E187                		asl.l	#8,d7
(1) 2163/FFFFFFFFFFFF0E7A : DFAE 0004           		add.l	d7,obj_x(a6)
(1) 2164/FFFFFFFFFFFF0E7E : 7E00                		moveq	#0,d7
(1) 2165/FFFFFFFFFFFF0E80 : 3E2E 0018           		move.w	obj_y_spd(a6),d7
(1) 2166/FFFFFFFFFFFF0E84 : 48C7                		ext.l	d7
(1) 2167/FFFFFFFFFFFF0E86 : E187                		asl.l	#8,d7
(1) 2168/FFFFFFFFFFFF0E88 : DFAE 0008           		add.l	d7,obj_y(a6)
(1) 2169/FFFFFFFFFFFF0E8C : 2E1F                		move.l	(sp)+,d7
(1) 2170/FFFFFFFFFFFF0E8E : 4E75                		rts
(1) 2171/FFFFFFFFFFFF0E90 :                     
(1) 2172/FFFFFFFFFFFF0E90 :                     ; --------------------------------------------------------
(1) 2173/FFFFFFFFFFFF0E90 :                     ; object_Collision
(1) 2174/FFFFFFFFFFFF0E90 :                     ;
(1) 2175/FFFFFFFFFFFF0E90 :                     ; Detects collision with another Object from
(1) 2176/FFFFFFFFFFFF0E90 :                     ; the list TOP to BOTTOM
(1) 2177/FFFFFFFFFFFF0E90 :                     ; Reads ALL objects except the one that called this.
(1) 2178/FFFFFFFFFFFF0E90 :                     ;
(1) 2179/FFFFFFFFFFFF0E90 :                     ; Input:
(1) 2180/FFFFFFFFFFFF0E90 :                     ; a6 | Object
(1) 2181/FFFFFFFFFFFF0E90 :                     ;
(1) 2182/FFFFFFFFFFFF0E90 :                     ; Returns:
(1) 2183/FFFFFFFFFFFF0E90 :                     ; d0 | If Nothing: Zero
(1) 2184/FFFFFFFFFFFF0E90 :                     ;      If Found: The object's RAM location it got.
(1) 2185/FFFFFFFFFFFF0E90 :                     ;
(1) 2186/FFFFFFFFFFFF0E90 :                     ; Breaks:
(1) 2187/FFFFFFFFFFFF0E90 :                     ; d1-d7,a5
(1) 2188/FFFFFFFFFFFF0E90 :                     ; --------------------------------------------------------
(1) 2189/FFFFFFFFFFFF0E90 :                     
(1) 2190/FFFFFFFFFFFF0E90 :                     object_Collision:
(1) 2191/FFFFFFFFFFFF0E90 : 48E7 7F04           		movem.l	d1-d7/a5,-(sp)
(1) 2192/FFFFFFFFFFFF0E94 : 4BF8 AD94           		lea	(RAM_Objects).w,a5
(1) 2193/FFFFFFFFFFFF0E98 : 7E17                		moveq	#MAX_MDOBJ-1,d7
(1) 2194/FFFFFFFFFFFF0E9A :                     .next:
(1) 2195/FFFFFFFFFFFF0E9A : BBCE                		cmp.l	a6,a5		; If reading THIS object, skip
(1) 2196/FFFFFFFFFFFF0E9C : 670A                		beq.s	.skip
(1) 2197/FFFFFFFFFFFF0E9E : 4A95                		tst.l	obj_code(a5)	; This object has code?
(1) 2198/FFFFFFFFFFFF0EA0 : 6706                		beq.s	.skip
(1) 2199/FFFFFFFFFFFF0EA2 : 6114                		bsr.s	.check_this
(1) 2200/FFFFFFFFFFFF0EA4 : 4A40                		tst.w	d0
(1) 2201/FFFFFFFFFFFF0EA6 : 660A                		bne.s	.exit_this	; Exit if Found already.
(1) 2202/FFFFFFFFFFFF0EA8 : DAFC 0066           .skip:		adda	#sizeof_mdobj,a5
(1) 2203/FFFFFFFFFFFF0EAC : 51CF FFEC           		dbf	d7,.next
(1) 2204/FFFFFFFFFFFF0EB0 : 7000                		moveq	#0,d0
(1) 2205/FFFFFFFFFFFF0EB2 :                     .exit_this:
(1) 2206/FFFFFFFFFFFF0EB2 : 4CDF 20FE           		movem.l	(sp)+,d1-d7/a5
(1) 2207/FFFFFFFFFFFF0EB6 : 4E75                		rts
(1) 2208/FFFFFFFFFFFF0EB8 :                     .check_this:
(1) 2209/FFFFFFFFFFFF0EB8 : 7000                		moveq	#0,d0			; Reset Return
(1) 2210/FFFFFFFFFFFF0EBA :                     	; d6 - Y current top
(1) 2211/FFFFFFFFFFFF0EBA :                     	; d5 - Y current bottom
(1) 2212/FFFFFFFFFFFF0EBA :                     	; d4 - Y target top
(1) 2213/FFFFFFFFFFFF0EBA :                     	; d3 - Y target bottom
(1) 2214/FFFFFFFFFFFF0EBA : 3C2E 0008           		move.w	obj_y(a6),d6		; d6 - Up point
(1) 2215/FFFFFFFFFFFF0EBE : 3A06                		move.w	d6,d5			; d5 - Down point
(1) 2216/FFFFFFFFFFFF0EC0 : 322E 0010           		move.w	obj_size(a6),d1		; $UDxx
(1) 2217/FFFFFFFFFFFF0EC4 : 3401                		move.w	d1,d2
(1) 2218/FFFFFFFFFFFF0EC6 : E049                		lsr.w	#8,d1			; d1 - Up size
(1) 2219/FFFFFFFFFFFF0EC8 : 0242 00FF           		andi.w	#$FF,d2			; d2 - Down size
(1) 2220/FFFFFFFFFFFF0ECC : E749                		lsl.w	#3,d1
(1) 2221/FFFFFFFFFFFF0ECE : E74A                		lsl.w	#3,d2
(1) 2222/FFFFFFFFFFFF0ED0 : 9C41                		sub.w	d1,d6
(1) 2223/FFFFFFFFFFFF0ED2 : DA42                		add.w	d2,d5
(1) 2224/FFFFFFFFFFFF0ED4 : 382D 0008           		move.w	obj_y(a5),d4		; d4 - Up point
(1) 2225/FFFFFFFFFFFF0ED8 : 3604                		move.w	d4,d3			; d3 - Down point
(1) 2226/FFFFFFFFFFFF0EDA : 322D 0010           		move.w	obj_size(a5),d1		; $UDxx
(1) 2227/FFFFFFFFFFFF0EDE : 3401                		move.w	d1,d2
(1) 2228/FFFFFFFFFFFF0EE0 : E049                		lsr.w	#8,d1			; d1 - Up size
(1) 2229/FFFFFFFFFFFF0EE2 : 0242 00FF           		andi.w	#$FF,d2			; d2 - Down size
(1) 2230/FFFFFFFFFFFF0EE6 : E749                		lsl.w	#3,d1
(1) 2231/FFFFFFFFFFFF0EE8 : E74A                		lsl.w	#3,d2
(1) 2232/FFFFFFFFFFFF0EEA : 9841                		sub.w	d1,d4
(1) 2233/FFFFFFFFFFFF0EEC : D642                		add.w	d2,d3
(1) 2234/FFFFFFFFFFFF0EEE : B646                		cmp.w	d6,d3			; Target's YB > Our YT?
(1) 2235/FFFFFFFFFFFF0EF0 : 6D42                		blt.s	.not_ytop
(1) 2236/FFFFFFFFFFFF0EF2 : B845                		cmp.w	d5,d4			; Target's YT > Our YB?
(1) 2237/FFFFFFFFFFFF0EF4 : 6C3E                		bge.s	.not_ytop
(1) 2238/FFFFFFFFFFFF0EF6 :                     	; Now check X
(1) 2239/FFFFFFFFFFFF0EF6 : 3C2E 0004           		move.w	obj_x(a6),d6		; d6 - Left point
(1) 2240/FFFFFFFFFFFF0EFA : 3A06                		move.w	d6,d5			; d5 - Right point
(1) 2241/FFFFFFFFFFFF0EFC : 322E 0012           		move.w	obj_size+2(a6),d1	; $xxLR
(1) 2242/FFFFFFFFFFFF0F00 : 3401                		move.w	d1,d2
(1) 2243/FFFFFFFFFFFF0F02 : E049                		lsr.w	#8,d1			; d1 - Left size
(1) 2244/FFFFFFFFFFFF0F04 : 0242 00FF           		andi.w	#$FF,d2			; d2 - Right size
(1) 2245/FFFFFFFFFFFF0F08 : E749                		lsl.w	#3,d1
(1) 2246/FFFFFFFFFFFF0F0A : E74A                		lsl.w	#3,d2
(1) 2247/FFFFFFFFFFFF0F0C : 9C41                		sub.w	d1,d6
(1) 2248/FFFFFFFFFFFF0F0E : DA42                		add.w	d2,d5
(1) 2249/FFFFFFFFFFFF0F10 : 382D 0004           		move.w	obj_x(a5),d4		; d4 - Left point
(1) 2250/FFFFFFFFFFFF0F14 : 3604                		move.w	d4,d3			; d3 - Right point
(1) 2251/FFFFFFFFFFFF0F16 : 322D 0012           		move.w	obj_size+2(a5),d1	; $UDxx
(1) 2252/FFFFFFFFFFFF0F1A : 3401                		move.w	d1,d2
(1) 2253/FFFFFFFFFFFF0F1C : E049                		lsr.w	#8,d1			; d1 - Left size
(1) 2254/FFFFFFFFFFFF0F1E : 0242 00FF           		andi.w	#$FF,d2			; d2 - Right size
(1) 2255/FFFFFFFFFFFF0F22 : E749                		lsl.w	#3,d1
(1) 2256/FFFFFFFFFFFF0F24 : E74A                		lsl.w	#3,d2
(1) 2257/FFFFFFFFFFFF0F26 : 9841                		sub.w	d1,d4
(1) 2258/FFFFFFFFFFFF0F28 : D642                		add.w	d2,d3
(1) 2259/FFFFFFFFFFFF0F2A : B646                		cmp.w	d6,d3
(1) 2260/FFFFFFFFFFFF0F2C : 6D06                		blt.s	.not_ytop
(1) 2261/FFFFFFFFFFFF0F2E : B845                		cmp.w	d5,d4
(1) 2262/FFFFFFFFFFFF0F30 : 6C02                		bge.s	.not_ytop
(1) 2263/FFFFFFFFFFFF0F32 : 200D                		move.l	a5,d0		; FOUND OBJECT
(1) 2264/FFFFFFFFFFFF0F34 :                     .not_ytop:
(1) 2265/FFFFFFFFFFFF0F34 : 4E75                		rts
(1) 2266/FFFFFFFFFFFF0F36 :                     
(1) 2267/FFFFFFFFFFFF0F36 :                     ; ====================================================================
(1) 2268/FFFFFFFFFFFF0F36 :                     ; ----------------------------------------------------------------
(1) 2269/FFFFFFFFFFFF0F36 :                     ; 32X ONLY
(1) 2270/FFFFFFFFFFFF0F36 :                     ; ----------------------------------------------------------------
(1) 2271/FFFFFFFFFFFF0F36 :                     
(1) 2349/FFFFFFFFFFFF0F36 :                     
     193/FFFFFFFFFFFF0F36 :                     		include	"system/md/system.asm"
(1)    1/FFFFFFFFFFFF0F36 :                     ; ===========================================================================
(1)    2/FFFFFFFFFFFF0F36 :                     ; ----------------------------------------------------------------
(1)    3/FFFFFFFFFFFF0F36 :                     ; Genesis system routines, including SCD and 32X
(1)    4/FFFFFFFFFFFF0F36 :                     ; ----------------------------------------------------------------
(1)    5/FFFFFFFFFFFF0F36 :                     
(1)    6/FFFFFFFFFFFF0F36 :                     ; ** CAN BE RECYCLED FOR SEGA PICO, ONLY IGNORE Z80 ACCESS OR
(1)    7/FFFFFFFFFFFF0F36 :                     ; THE CONTROL ROUTINE **
(1)    8/FFFFFFFFFFFF0F36 :                     
(1)    9/FFFFFFFFFFFF0F36 :                     ; ===================================================================
(1)   10/FFFFFFFFFFFF0F36 :                     ; --------------------------------------------------------
(1)   11/FFFFFFFFFFFF0F36 :                     ; Settings
(1)   12/FFFFFFFFFFFF0F36 :                     ; --------------------------------------------------------
(1)   13/FFFFFFFFFFFF0F36 :                     
(1)   14/FFFFFFFFFFFF0F36 : =$400                MAX_SRAMSIZE	equ $400
(1)   15/FFFFFFFFFFFF0F36 : ="SAVE"              TAG_SRAMDATA	equ "SAVE"	; 4-letter savefile signature
(1)   16/FFFFFFFFFFFF0F36 :                     
(1)   17/FFFFFFFFFFFF0F36 :                     ; ===================================================================
(1)   18/FFFFFFFFFFFF0F36 :                     ; --------------------------------------------------------
(1)   19/FFFFFFFFFFFF0F36 :                     ; Variables
(1)   20/FFFFFFFFFFFF0F36 :                     ; --------------------------------------------------------
(1)   21/FFFFFFFFFFFF0F36 :                     
(1)   22/FFFFFFFFFFFF0F36 :                     ; ------------------------------------------------
(1)   23/FFFFFFFFFFFF0F36 :                     ; Controller buffer data
(1)   24/FFFFFFFFFFFF0F36 :                     ;
(1)   25/FFFFFFFFFFFF0F36 :                     ; MUST call System_Input on VBlank.
(1)   26/FFFFFFFFFFFF0F36 :                     ; ------------------------------------------------
(1)   27/FFFFFFFFFFFF0F36 :                     
(1)   28/FFFFFFFFFFFF0F36 :                     ; ------------------------------------------------
(1)   29/FFFFFFFFFFFF0F36 :                     ; pad_id
(1)   30/FFFFFFFFFFFF0F36 :                     ;
(1)   31/FFFFFFFFFFFF0F36 :                     ; JoyID_MD:
(1)   32/FFFFFFFFFFFF0F36 :                     ; Read pad_ver separately to check if controller
(1)   33/FFFFFFFFFFFF0F36 :                     ; is 3button(0) or 6button(1)
(1)   34/FFFFFFFFFFFF0F36 :                     ; ------------------------------------------------
(1)   35/FFFFFFFFFFFF0F36 :                     
(1)   36/FFFFFFFFFFFF0F36 : =$3                  JoyID_Mouse	equ $03
(1)   37/FFFFFFFFFFFF0F36 : =$D                  JoyID_MD	equ $0D
(1)   38/FFFFFFFFFFFF0F36 : =$F                  JoyID_MS	equ $0F		; <-- Disconnected too.
(1)   39/FFFFFFFFFFFF0F36 :                     
(1)   40/FFFFFFFFFFFF0F36 :                     ; ------------------------------------------------
(1)   41/FFFFFFFFFFFF0F36 :                     ; on_hold or on_press
(1)   42/FFFFFFFFFFFF0F36 :                     ;
(1)   43/FFFFFFFFFFFF0F36 :                     ; Read these as WORD
(1)   44/FFFFFFFFFFFF0F36 :                     ;
(1)   45/FFFFFFFFFFFF0F36 :                     ; Don't do btst directly, read as dX
(1)   46/FFFFFFFFFFFF0F36 :                     ; and do btst on register.
(1)   47/FFFFFFFFFFFF0F36 :                     ; ------------------------------------------------
(1)   48/FFFFFFFFFFFF0F36 :                     
(1)   49/FFFFFFFFFFFF0F36 : =$1                  JoyUp		equ $0001
(1)   50/FFFFFFFFFFFF0F36 : =$2                  JoyDown		equ $0002
(1)   51/FFFFFFFFFFFF0F36 : =$4                  JoyLeft		equ $0004
(1)   52/FFFFFFFFFFFF0F36 : =$8                  JoyRight	equ $0008
(1)   53/FFFFFFFFFFFF0F36 : =$10                 JoyB		equ $0010
(1)   54/FFFFFFFFFFFF0F36 : =$20                 JoyC		equ $0020
(1)   55/FFFFFFFFFFFF0F36 : =$40                 JoyA		equ $0040
(1)   56/FFFFFFFFFFFF0F36 : =$80                 JoyStart	equ $0080
(1)   57/FFFFFFFFFFFF0F36 : =$100                JoyZ		equ $0100
(1)   58/FFFFFFFFFFFF0F36 : =$200                JoyY		equ $0200
(1)   59/FFFFFFFFFFFF0F36 : =$400                JoyX		equ $0400
(1)   60/FFFFFFFFFFFF0F36 : =$800                JoyMode		equ $0800
(1)   61/FFFFFFFFFFFF0F36 : =$0                  bitJoyUp	equ 0
(1)   62/FFFFFFFFFFFF0F36 : =$1                  bitJoyDown	equ 1
(1)   63/FFFFFFFFFFFF0F36 : =$2                  bitJoyLeft	equ 2
(1)   64/FFFFFFFFFFFF0F36 : =$3                  bitJoyRight	equ 3
(1)   65/FFFFFFFFFFFF0F36 : =$4                  bitJoyB		equ 4
(1)   66/FFFFFFFFFFFF0F36 : =$5                  bitJoyC		equ 5
(1)   67/FFFFFFFFFFFF0F36 : =$6                  bitJoyA		equ 6
(1)   68/FFFFFFFFFFFF0F36 : =$7                  bitJoyStart	equ 7
(1)   69/FFFFFFFFFFFF0F36 : =$8                  bitJoyZ		equ 8
(1)   70/FFFFFFFFFFFF0F36 : =$9                  bitJoyY		equ 9
(1)   71/FFFFFFFFFFFF0F36 : =$A                  bitJoyX		equ 10
(1)   72/FFFFFFFFFFFF0F36 : =$B                  bitJoyMode	equ 11
(1)   73/FFFFFFFFFFFF0F36 :                     
(1)   74/FFFFFFFFFFFF0F36 :                     ; ------------------------------------------------
(1)   75/FFFFFFFFFFFF0F36 :                     ; Mega Mouse ONLY
(1)   76/FFFFFFFFFFFF0F36 :                     ; ------------------------------------------------
(1)   77/FFFFFFFFFFFF0F36 :                     
(1)   78/FFFFFFFFFFFF0F36 : =$1                  ClickR		equ $0001
(1)   79/FFFFFFFFFFFF0F36 : =$2                  ClickL		equ $0002
(1)   80/FFFFFFFFFFFF0F36 : =$4                  ClickM		equ $0004	; US MOUSE ONLY
(1)   81/FFFFFFFFFFFF0F36 : =$8                  ClickS		equ $0008	; (Untested)
(1)   82/FFFFFFFFFFFF0F36 : =$0                  bitClickL	equ 0
(1)   83/FFFFFFFFFFFF0F36 : =$1                  bitClickR	equ 1
(1)   84/FFFFFFFFFFFF0F36 : =$2                  bitClickM	equ 2
(1)   85/FFFFFFFFFFFF0F36 : =$3                  bitClickS	equ 3
(1)   86/FFFFFFFFFFFF0F36 :                     
(1)   87/FFFFFFFFFFFF0F36 :                     ; ------------------------------------------------
(1)   88/FFFFFFFFFFFF0F36 :                     ; Controller_1 / Controller_2
(1)   89/FFFFFFFFFFFF0F36 :                     ; ------------------------------------------------
(1)   90/FFFFFFFFFFFF0F36 :                     
(1)   91/FFFFFFFFFFFF0F36 : (MACRO)              		strct 0
(1)   91/FFFFFFFFFFFF0F36 : =$FFFFFFFFFFFF0F36   GLBL_LASTPC     set *
(1)   91/FFFFFFFFFFFFAC98 :                                     dephase
(1)   91/       0 :                                     phase 0
(1)   91/       0 : =$0                  GLBL_LASTORG    set *
(1)   92/       0 :                     pad_id		ds.b 1			; Controller ID
(1)   93/       1 :                     pad_ver		ds.b 1			; Controller type/revision
(1)   94/       2 :                     on_hold		ds.w 1			; User HOLD bits
(1)   95/       4 :                     on_press	ds.w 1			; User PRESSED bits
(1)   96/       6 :                     on_release	ds.w 1			; (RESERVED)
(1)   97/       8 :                     mouse_x		ds.w 1			; Mouse/Pen X speed
(1)   98/       A :                     mouse_y		ds.w 1			; Mouse/pen Y speed
(1)   99/       C :                     ext_3		ds.w 1
(1)  100/       E :                     ext_4		ds.w 1
(1)  101/      10 :                     sizeof_input	ds.l 0
(1)  102/      10 : (MACRO)              		endstrct
(1)  102/       0 :                                     org GLBL_LASTORG
(1)  102/FFFFFFFFFFFF0F36 :                                     phase GLBL_LASTPC
(1)  103/FFFFFFFFFFFF0F36 :                     
(1)  104/FFFFFFFFFFFF0F36 :                     ; ====================================================================
(1)  105/FFFFFFFFFFFF0F36 :                     ; --------------------------------------------------------
(1)  106/FFFFFFFFFFFF0F36 :                     ; RAM section
(1)  107/FFFFFFFFFFFF0F36 :                     ; --------------------------------------------------------
(1)  108/FFFFFFFFFFFF0F36 :                     
(1)  109/FFFFFFFFFFFF0F36 : (MACRO)              		strct RAM_MdSystem
(1)  109/FFFFFFFFFFFF0F36 : =$FFFFFFFFFFFF0F36   GLBL_LASTPC     set *
(1)  109/       0 :                                     dephase
(1)  109/FFFFFFFFFFFFC004 :                                     phase RAM_MDSYSTEM
(1)  109/FFFFFFFFFFFFC004 : =$FFFFFFFFFFFFC004   GLBL_LASTORG    set *
(1)  110/FFFFFFFFFFFFC004 :                     RAM_InputData	ds.b sizeof_input*4		; Input data section
(1)  111/FFFFFFFFFFFFC044 :                     RAM_SaveData	ds.b MAX_SRAMSIZE		; Read/Write of the SAVE data
(1)  112/FFFFFFFFFFFFC444 :                     RAM_SysRandVal	ds.l 1				; Random value
(1)  113/FFFFFFFFFFFFC448 :                     RAM_SysRandSeed	ds.l 1				; Randomness seed
(1)  114/FFFFFFFFFFFFC44C :                     RAM_MdMarsVInt	ds.w 3				; VBlank jump (JMP xxxx xxxx)
(1)  115/FFFFFFFFFFFFC452 :                     RAM_MdMarsHint	ds.w 3				; HBlank jump (JMP xxxx xxxx)
(1)  116/FFFFFFFFFFFFC458 :                     RAM_ScreenMode	ds.w 1
(1)  117/FFFFFFFFFFFFC45A :                     sizeof_mdsys	ds.l 0
(1)  118/FFFFFFFFFFFFC460 : (MACRO)              		endstrct
(1)  118/FFFFFFFFFFFFC004 :                                     org GLBL_LASTORG
(1)  118/FFFFFFFFFFFF0F36 :                                     phase GLBL_LASTPC
(1)  119/FFFFFFFFFFFF0F36 : (MACRO)              		erreport "MD SYSTEM RAM",sizeof_mdsys-RAM_MdSystem,MAX_MdSystem
(1)  120/FFFFFFFFFFFF0F36 :                     
(1)  121/FFFFFFFFFFFF0F36 :                     ; ====================================================================
(1)  122/FFFFFFFFFFFF0F36 :                     ; --------------------------------------------------------
(1)  123/FFFFFFFFFFFF0F36 :                     ; Aliases labels
(1)  124/FFFFFFFFFFFF0F36 :                     ; --------------------------------------------------------
(1)  125/FFFFFFFFFFFF0F36 :                     
(1)  126/FFFFFFFFFFFF0F36 : =$FFFFFFFFFFFFC004   Controller_1	equ RAM_InputData
(1)  127/FFFFFFFFFFFF0F36 : =$FFFFFFFFFFFFC014   Controller_2	equ RAM_InputData+sizeof_input
(1)  128/FFFFFFFFFFFF0F36 :                     
(1)  129/FFFFFFFFFFFF0F36 :                     ; ====================================================================
(1)  130/FFFFFFFFFFFF0F36 :                     ; --------------------------------------------------------
(1)  131/FFFFFFFFFFFF0F36 :                     ; Init System
(1)  132/FFFFFFFFFFFF0F36 :                     ; 
(1)  133/FFFFFFFFFFFF0F36 :                     ; Uses:
(1)  134/FFFFFFFFFFFF0F36 :                     ; a0-a2,d0-d1
(1)  135/FFFFFFFFFFFF0F36 :                     ; --------------------------------------------------------
(1)  136/FFFFFFFFFFFF0F36 :                     
(1)  137/FFFFFFFFFFFF0F36 :                     System_Init:
(1)  138/FFFFFFFFFFFF0F36 : 007C 0700           		or.w	#$0700,sr
(1)  140/FFFFFFFFFFFF0F3A : 33FC 0100 00A1      		move.w	#$0100,(z80_bus).l	; Stop Z80
         FFFFFFFFFFFF0F40 : 1100             
(1)  141/FFFFFFFFFFFF0F42 :                     .wait:
(1)  142/FFFFFFFFFFFF0F42 : 0839 0000 00A1      		btst	#0,(z80_bus).l		; Wait Z80
         FFFFFFFFFFFF0F48 : 1100             
(1)  143/FFFFFFFFFFFF0F4A : 66F6                		bne.s	.wait
(1)  144/FFFFFFFFFFFF0F4C : 7040                		moveq	#%01000000,d0		; Init ports, TH=1
(1)  145/FFFFFFFFFFFF0F4E : 13C0 00A1 0009      		move.b	d0,(sys_ctrl_1).l	; Controller 1
(1)  146/FFFFFFFFFFFF0F54 : 13C0 00A1 000B      		move.b	d0,(sys_ctrl_2).l	; Controller 2
(1)  147/FFFFFFFFFFFF0F5A : 13C0 00A1 000D      		move.b	d0,(sys_ctrl_3).l	; Modem
(1)  148/FFFFFFFFFFFF0F60 : 33FC 0000 00A1      		move.w	#0,(z80_bus).l		; Enable Z80
         FFFFFFFFFFFF0F66 : 1100             
(1)  150/FFFFFFFFFFFF0F68 : 303C 4EF9           		move.w	#$4EF9,d0		; Set JMP opcode for the Hblank/VBlank jumps
(1)  151/FFFFFFFFFFFF0F6C : 31C0 C44C            		move.w	d0,(RAM_MdMarsVInt).w
(1)  152/FFFFFFFFFFFF0F70 : 31C0 C452           		move.w	d0,(RAM_MdMarsHInt).w
(1)  153/FFFFFFFFFFFF0F74 : 203C FFFF 13D6      		move.l	#VInt_Default,d0	; Set default interrupt jumps
(1)  154/FFFFFFFFFFFF0F7A : 223C FFFF 13EC      		move.l	#Hint_Default,d1
(1)  155/FFFFFFFFFFFF0F80 : 6100 039C           		bsr	System_SetInts
(1)  156/FFFFFFFFFFFF0F84 : 41F8 C004           		lea	(RAM_InputData).w,a0	; Clear input data buffer
(1)  157/FFFFFFFFFFFF0F88 : 323C 0007           		move.w	#(sizeof_input/2)-1,d1
(1)  158/FFFFFFFFFFFF0F8C : 7000                		moveq	#0,d0
(1)  159/FFFFFFFFFFFF0F8E :                     .clrinput:
(1)  160/FFFFFFFFFFFF0F8E : 30C0                		move.w	d0,(a0)+
(1)  161/FFFFFFFFFFFF0F90 : 51C9 FFFC           		dbf	d1,.clrinput
(1)  162/FFFFFFFFFFFF0F94 : 203C 5625 5769      		move.l	#$56255769,d0		; Set these random values
(1)  163/FFFFFFFFFFFF0F9A : 223C 9511 6102      		move.l	#$95116102,d1
(1)  164/FFFFFFFFFFFF0FA0 : 23C0 FFFF C444      		move.l	d0,(RAM_SysRandVal).l
(1)  165/FFFFFFFFFFFF0FA6 : 23C1 FFFF C448      		move.l	d1,(RAM_SysRandSeed).l
(1)  166/FFFFFFFFFFFF0FAC : 027C F8FF           		andi.w	#$F8FF,sr
(1)  167/FFFFFFFFFFFF0FB0 : 6000 037E           		bra	System_SramInit
(1)  168/FFFFFFFFFFFF0FB4 :                     
(1)  169/FFFFFFFFFFFF0FB4 :                     ; --------------------------------------------------------
(1)  170/FFFFFFFFFFFF0FB4 :                     ; System_Render
(1)  171/FFFFFFFFFFFF0FB4 :                     ;
(1)  172/FFFFFFFFFFFF0FB4 :                     ; Call this on the loop your current screen.
(1)  173/FFFFFFFFFFFF0FB4 :                     ; ** VDP DISPLAY MUST BE ON TO USE THIS **
(1)  174/FFFFFFFFFFFF0FB4 :                     ;
(1)  175/FFFFFFFFFFFF0FB4 :                     ; This will:
(1)  176/FFFFFFFFFFFF0FB4 :                     ; - Update the sound driver for any changes that
(1)  177/FFFFFFFFFFFF0FB4 :                     ;   need communication with 68K
(1)  178/FFFFFFFFFFFF0FB4 :                     ; - Build the object sprites
(1)  179/FFFFFFFFFFFF0FB4 :                     ; - 32X/CD32X:
(1)  180/FFFFFFFFFFFF0FB4 :                     ;   Update the DREQ data
(1)  181/FFFFFFFFFFFF0FB4 :                     ;
(1)  182/FFFFFFFFFFFF0FB4 :                     ; On VBLANK:
(1)  183/FFFFFFFFFFFF0FB4 :                     ; - Update the input data
(1)  184/FFFFFFFFFFFF0FB4 :                     ; - Transfer the Genesis palette, sprites and scroll
(1)  185/FFFFFFFFFFFF0FB4 :                     ;   data from from RAM to VDP
(1)  186/FFFFFFFFFFFF0FB4 :                     ;   (32X: RV bit is not required.)
(1)  187/FFFFFFFFFFFF0FB4 :                     ; - Process the DMA BLAST list (32X: Uses RV bit)
(1)  188/FFFFFFFFFFFF0FB4 :                     ; --------------------------------------------------------
(1)  189/FFFFFFFFFFFF0FB4 :                     
(1)  190/FFFFFFFFFFFF0FB4 :                     System_Render:
(1)  191/FFFFFFFFFFFF0FB4 : 1E38 B8F7           		move.b	(RAM_VdpRegs+1).w,d7	; ** If the user forgets to enable
(1)  192/FFFFFFFFFFFF0FB8 : 0807 0006           		btst	#bitDispEnbl,d7		; ** DISPLAY skip all this
(1)  193/FFFFFFFFFFFF0FBC : 673A                		beq.s	.forgot_disp		; **
(1)  194/FFFFFFFFFFFF0FBE :                     .wait_lag:
(1)  195/FFFFFFFFFFFF0FBE : 6100 F0C4           		bsr	Sound_Update			; Syncronize/Update sound on lag
(1)  196/FFFFFFFFFFFF0FC2 : 3E39 00C0 0004      		move.w	(vdp_ctrl).l,d7			; Got here during VBlank?
(1)  197/FFFFFFFFFFFF0FC8 : 0807 0003           		btst	#bitVBlk,d7			; If yes, drop frame and wait
(1)  198/FFFFFFFFFFFF0FCC : 66F0                		bne.s	.wait_lag
(1)  199/FFFFFFFFFFFF0FCE : 6100 F0B4           		bsr	Sound_Update			; Update sound
(1)  200/FFFFFFFFFFFF0FD2 : 6100 FC72           		bsr	Objects_Show			; Build sprite data from Objects
(1)  201/FFFFFFFFFFFF0FD6 :                     .wait_in:
(1)  202/FFFFFFFFFFFF0FD6 : 6100 F0AC           		bsr	Sound_Update			; Syncronize/Update sound during Display
(1)  203/FFFFFFFFFFFF0FDA : 3E39 00C0 0004      		move.w	(vdp_ctrl).l,d7
(1)  204/FFFFFFFFFFFF0FE0 : 0807 0003           		btst	#bitVBlk,d7			; VBlank started?
(1)  205/FFFFFFFFFFFF0FE4 : 67F0                		beq.s	.wait_in
(1)  206/FFFFFFFFFFFF0FE6 : 6122                		bsr	System_Input			; Read input data FIRST
(1)  210/FFFFFFFFFFFF0FE8 : 6100 F85C           		bsr	Video_Render			; Render visuals
(1)  211/FFFFFFFFFFFF0FEC : 6100 F096           		bsr	Sound_Update			; Update sound
(1)  212/FFFFFFFFFFFF0FF0 : 52B8 B8D4           		addq.l	#1,(RAM_Framecount).w		; Count the frame.
(1)  218/FFFFFFFFFFFF0FF4 : 6100 F08E           		bsr	Sound_Update			; Update sound again
(1)  219/FFFFFFFFFFFF0FF8 :                     .forgot_disp:
(1)  220/FFFFFFFFFFFF0FF8 : 4E75                		rts
(1)  221/FFFFFFFFFFFF0FFA :                     
(1)  222/FFFFFFFFFFFF0FFA :                     ; ====================================================================
(1)  223/FFFFFFFFFFFF0FFA :                     ; --------------------------------------------------------
(1)  224/FFFFFFFFFFFF0FFA :                     ; System_DmaEnter_(from) and System_DmaEnter_(from)
(1)  225/FFFFFFFFFFFF0FFA :                     ; from ROM or RAM
(1)  226/FFFFFFFFFFFF0FFA :                     ;
(1)  227/FFFFFFFFFFFF0FFA :                     ; Call to these labels BEFORE and AFTER
(1)  228/FFFFFFFFFFFF0FFA :                     ; DMA-to-VDP transers, these calls are NOT
(1)  229/FFFFFFFFFFFF0FFA :                     ; required for FILL or COPY
(1)  230/FFFFFFFFFFFF0FFA :                     ;
(1)  231/FFFFFFFFFFFF0FFA :                     ; This is where you put your Sound driver's Z80 stop
(1)  232/FFFFFFFFFFFF0FFA :                     ; or pause calls here.
(1)  233/FFFFFFFFFFFF0FFA :                     ; --------------------------------------------------------
(1)  234/FFFFFFFFFFFF0FFA :                     
(1)  235/FFFFFFFFFFFF0FFA :                     System_DmaEnter_RAM:
(1)  236/FFFFFFFFFFFF0FFA : 6000 F160           		bra	gemaDmaPause
(1)  237/FFFFFFFFFFFF0FFE :                     System_DmaExit_RAM:
(1)  238/FFFFFFFFFFFF0FFE : 6000 F17E           		bra	gemaDmaResume
(1)  239/FFFFFFFFFFFF1002 :                     
(1)  240/FFFFFFFFFFFF1002 :                     ; --------------------------------------------------------
(1)  241/FFFFFFFFFFFF1002 :                     
(1)  242/FFFFFFFFFFFF1002 :                     System_DmaEnter_ROM:
(1)  243/FFFFFFFFFFFF1002 : 6000 F194           		bra	gemaDmaPauseRom
(1)  244/FFFFFFFFFFFF1006 :                     System_DmaExit_ROM:
(1)  245/FFFFFFFFFFFF1006 : 6000 F1B2           		bra	gemaDmaResumeRom
(1)  246/FFFFFFFFFFFF100A :                     
(1)  247/FFFFFFFFFFFF100A :                     ; ====================================================================
(1)  248/FFFFFFFFFFFF100A :                     ; ----------------------------------------------------------------
(1)  249/FFFFFFFFFFFF100A :                     ; Subroutines
(1)  250/FFFFFFFFFFFF100A :                     ; ----------------------------------------------------------------
(1)  251/FFFFFFFFFFFF100A :                     
(1)  252/FFFFFFFFFFFF100A :                     ; --------------------------------------------------------
(1)  253/FFFFFFFFFFFF100A :                     ; System_Input
(1)  254/FFFFFFFFFFFF100A :                     ;
(1)  255/FFFFFFFFFFFF100A :                     ; Reads data from the Controller ports
(1)  256/FFFFFFFFFFFF100A :                     ; *** CALL THIS ON VBLANK ONLY ***
(1)  257/FFFFFFFFFFFF100A :                     ;
(1)  258/FFFFFFFFFFFF100A :                     ; Uses:
(1)  259/FFFFFFFFFFFF100A :                     ; d5-d7,a5-a6
(1)  260/FFFFFFFFFFFF100A :                     ; --------------------------------------------------------
(1)  261/FFFFFFFFFFFF100A :                     
(1)  262/FFFFFFFFFFFF100A :                     ; ----------------------------------------
(1)  263/FFFFFFFFFFFF100A :                     ; PICO input is hard-coded to
(1)  264/FFFFFFFFFFFF100A :                     ; Controller_1
(1)  265/FFFFFFFFFFFF100A :                     ;
(1)  266/FFFFFFFFFFFF100A :                     ; on_hold/on_press:
(1)  267/FFFFFFFFFFFF100A :                     ; %P00BRLDU
(1)  268/FFFFFFFFFFFF100A :                     ; UDLR - Arrows
(1)  269/FFFFFFFFFFFF100A :                     ;    B - BIG button red
(1)  270/FFFFFFFFFFFF100A :                     ;    P - Pen press/click
(1)  271/FFFFFFFFFFFF100A :                     ;
(1)  272/FFFFFFFFFFFF100A :                     ; mouse_x/mouse_y:
(1)  273/FFFFFFFFFFFF100A :                     ; Pen X/Y position
(1)  274/FFFFFFFFFFFF100A :                     ; ----------------------------------------
(1)  275/FFFFFFFFFFFF100A :                     
(1)  276/FFFFFFFFFFFF100A :                     System_Input:
(1)  277/FFFFFFFFFFFF100A :                     
(1)  324/FFFFFFFFFFFF100A :                     	; ----------------------------------------
(1)  325/FFFFFFFFFFFF100A :                     	; Normal Genesis controls
(1)  326/FFFFFFFFFFFF100A :                     
(1)  327/FFFFFFFFFFFF100A : 4DF8 C004           		lea	(RAM_InputData).w,a6	; a6 - Output
(1)  328/FFFFFFFFFFFF100E : 4BF9 00A1 0003      		lea	(sys_data_1),a5		; a5 - BASE Genesis Input regs area
(1)  329/FFFFFFFFFFFF1014 : 6108                		bsr.s	.this_one
(1)  330/FFFFFFFFFFFF1016 : DAFC 0002           		adda	#2,a5
(1)  331/FFFFFFFFFFFF101A : DCFC 0010           		adda	#sizeof_input,a6
(1)  332/FFFFFFFFFFFF101E :                     
(1)  333/FFFFFFFFFFFF101E :                     ; ----------------------------------------
(1)  334/FFFFFFFFFFFF101E :                     ; Read port
(1)  335/FFFFFFFFFFFF101E :                     ;
(1)  336/FFFFFFFFFFFF101E :                     ; a5 - Current port
(1)  337/FFFFFFFFFFFF101E :                     ; a6 - Output data
(1)  338/FFFFFFFFFFFF101E :                     ; ----------------------------------------
(1)  339/FFFFFFFFFFFF101E :                     
(1)  340/FFFFFFFFFFFF101E :                     .this_one:
(1)  341/FFFFFFFFFFFF101E : 6100 0166           		bsr	.pick_id
(1)  342/FFFFFFFFFFFF1022 : 1C87                		move.b	d7,pad_id(a6)
(1)  343/FFFFFFFFFFFF1024 : 0C47 000F           		cmpi.w	#$0F,d7
(1)  344/FFFFFFFFFFFF1028 : 670E                		beq.s	.exit
(1)  345/FFFFFFFFFFFF102A : 0247 000F           		andi.w	#$0F,d7
(1)  346/FFFFFFFFFFFF102E : DE47                		add.w	d7,d7
(1)  347/FFFFFFFFFFFF1030 : 3C3B 700C           		move.w	.list(pc,d7.w),d6
(1)  348/FFFFFFFFFFFF1034 : 4EFB 6008           		jmp	.list(pc,d6.w)
(1)  349/FFFFFFFFFFFF1038 :                     .exit:
(1)  350/FFFFFFFFFFFF1038 : 422E 0001           		clr.b	pad_ver(a6)
(1)  351/FFFFFFFFFFFF103C : 4E75                		rts
(1)  352/FFFFFFFFFFFF103E :                     
(1)  353/FFFFFFFFFFFF103E :                     ; ----------------------------------------
(1)  354/FFFFFFFFFFFF103E :                     ; Grab ID
(1)  355/FFFFFFFFFFFF103E :                     ; ----------------------------------------
(1)  356/FFFFFFFFFFFF103E :                     
(1)  357/FFFFFFFFFFFF103E :                     .list:
(1)  358/FFFFFFFFFFFF103E : FFFA                		dc.w .exit-.list	; $00
(1)  359/FFFFFFFFFFFF1040 : FFFA                		dc.w .exit-.list
(1)  360/FFFFFFFFFFFF1042 : FFFA                		dc.w .exit-.list
(1)  361/FFFFFFFFFFFF1044 : 0020                		dc.w .id_03-.list	; $03 - Mega mouse
(1)  362/FFFFFFFFFFFF1046 : FFFA                		dc.w .exit-.list	; $04
(1)  363/FFFFFFFFFFFF1048 : FFFA                		dc.w .exit-.list
(1)  364/FFFFFFFFFFFF104A : FFFA                		dc.w .exit-.list
(1)  365/FFFFFFFFFFFF104C : FFFA                		dc.w .exit-.list
(1)  366/FFFFFFFFFFFF104E : FFFA                		dc.w .exit-.list	; $08
(1)  367/FFFFFFFFFFFF1050 : FFFA                		dc.w .exit-.list
(1)  368/FFFFFFFFFFFF1052 : FFFA                		dc.w .exit-.list
(1)  369/FFFFFFFFFFFF1054 : FFFA                		dc.w .exit-.list
(1)  370/FFFFFFFFFFFF1056 : FFFA                		dc.w .exit-.list	; $0C
(1)  371/FFFFFFFFFFFF1058 : 00CA                		dc.w .id_0D-.list	; $0D - Genesis controller (3 or 6 button)
(1)  372/FFFFFFFFFFFF105A : FFFA                		dc.w .exit-.list
(1)  373/FFFFFFFFFFFF105C : FFFA                		dc.w .exit-.list	; $0F - No controller OR Master System controller (2 Buttons: 1(B),2(C))
(1)  374/FFFFFFFFFFFF105E :                     
(1)  375/FFFFFFFFFFFF105E :                     ; ----------------------------------------
(1)  376/FFFFFFFFFFFF105E :                     ; ID $03
(1)  377/FFFFFFFFFFFF105E :                     ;
(1)  378/FFFFFFFFFFFF105E :                     ; Mega Mouse
(1)  379/FFFFFFFFFFFF105E :                     ; ----------------------------------------
(1)  380/FFFFFFFFFFFF105E :                     
(1)  381/FFFFFFFFFFFF105E :                     ; *** NOT TESTED ON HARDWARE ***
(1)  382/FFFFFFFFFFFF105E :                     .id_03:
(1)  383/FFFFFFFFFFFF105E : 1ABC 0020           		move.b	#$20,(a5)
(1)  384/FFFFFFFFFFFF1062 : 1B7C 0060 0006      		move.b	#$60,6(a5)
(1)  385/FFFFFFFFFFFF1068 : 0815 0004           		btst	#4,(a5)
(1)  386/FFFFFFFFFFFF106C : 6700 0094           		beq.w	.invalid
(1)  387/FFFFFFFFFFFF1070 : 1ABC 0000           		move.b	#$00,(a5)	; $0F
(1)  388/FFFFFFFFFFFF1074 : 4E71                		nop
(1)  389/FFFFFFFFFFFF1076 : 4E71                		nop
(1)  390/FFFFFFFFFFFF1078 : 1ABC 0020           		move.b	#$20,(a5)	; $0F
(1)  391/FFFFFFFFFFFF107C : 4E71                		nop
(1)  392/FFFFFFFFFFFF107E : 4E71                		nop
(1)  393/FFFFFFFFFFFF1080 : 1ABC 0000           		move.b	#$00,(a5)	; Yo | Xo | Ys | Xs
(1)  394/FFFFFFFFFFFF1084 : 4E71                		nop
(1)  395/FFFFFFFFFFFF1086 : 4E71                		nop
(1)  396/FFFFFFFFFFFF1088 : 1A15                		move.b	(a5),d5		; d5 - X/Y direction bits (Ys Xs)
(1)  397/FFFFFFFFFFFF108A : 1ABC 0020           		move.b	#$20,(a5)	; C | M | R | L
(1)  398/FFFFFFFFFFFF108E : 4E71                		nop
(1)  399/FFFFFFFFFFFF1090 : 4E71                		nop
(1)  400/FFFFFFFFFFFF1092 : 1E15                		move.b	(a5),d7
(1)  401/FFFFFFFFFFFF1094 : 0247 000F            		andi.w	#%1111,d7
(1)  402/FFFFFFFFFFFF1098 : 3C2E 0002           		move.w	on_hold(a6),d6
(1)  403/FFFFFFFFFFFF109C : BF46                		eor.w	d7,d6
(1)  404/FFFFFFFFFFFF109E : 3D47 0002           		move.w	d7,on_hold(a6)
(1)  405/FFFFFFFFFFFF10A2 : CC47                		and.w	d7,d6
(1)  406/FFFFFFFFFFFF10A4 : 3D46 0004           		move.w	d6,on_press(a6)
(1)  407/FFFFFFFFFFFF10A8 : 1ABC 0000           		move.b	#$00,(a5)	; X7 | X6 | X5 | X4
(1)  408/FFFFFFFFFFFF10AC : 4E71                		nop
(1)  409/FFFFFFFFFFFF10AE : 4E71                		nop
(1)  410/FFFFFFFFFFFF10B0 : 1E15                		move.b	(a5),d7
(1)  411/FFFFFFFFFFFF10B2 : 1ABC 0020           		move.b	#$20,(a5)	; X3 | X2 | X1 | X0
(1)  412/FFFFFFFFFFFF10B6 : 0247 000F           		andi.w	#%1111,d7
(1)  413/FFFFFFFFFFFF10BA : E94F                		lsl.w	#4,d7
(1)  414/FFFFFFFFFFFF10BC : 4E71                		nop
(1)  415/FFFFFFFFFFFF10BE : 1C15                		move.b	(a5),d6
(1)  416/FFFFFFFFFFFF10C0 : 0246 000F           		andi.w	#%1111,d6
(1)  417/FFFFFFFFFFFF10C4 : 8E46                		or.w	d6,d7
(1)  418/FFFFFFFFFFFF10C6 : 0805 0000           		btst    #0,d5
(1)  419/FFFFFFFFFFFF10CA : 6704                		beq.s	.x_neg
(1)  420/FFFFFFFFFFFF10CC : 4407                		neg.b	d7
(1)  421/FFFFFFFFFFFF10CE : 4447                		neg.w	d7
(1)  422/FFFFFFFFFFFF10D0 :                     .x_neg:
(1)  423/FFFFFFFFFFFF10D0 : 3D47 0008           		move.w	d7,mouse_x(a6)
(1)  424/FFFFFFFFFFFF10D4 : 1ABC 0000           		move.b	#$00,(a5)	; Y7 | Y6 | Y5 | Y4
(1)  425/FFFFFFFFFFFF10D8 : 4E71                		nop
(1)  426/FFFFFFFFFFFF10DA : 4E71                		nop
(1)  427/FFFFFFFFFFFF10DC : 1E15                		move.b	(a5),d7
(1)  428/FFFFFFFFFFFF10DE : 1ABC 0020           		move.b	#$20,(a5)	; Y3 | Y2 | Y1 | Y0
(1)  429/FFFFFFFFFFFF10E2 : 0247 000F           		andi.w	#%1111,d7
(1)  430/FFFFFFFFFFFF10E6 : E94F                		lsl.w	#4,d7
(1)  431/FFFFFFFFFFFF10E8 : 4E71                		nop
(1)  432/FFFFFFFFFFFF10EA : 1C15                		move.b	(a5),d6
(1)  433/FFFFFFFFFFFF10EC : 0246 000F           		andi.w	#%1111,d6
(1)  434/FFFFFFFFFFFF10F0 : 8E46                		or.w	d6,d7
(1)  435/FFFFFFFFFFFF10F2 : 0805 0001           		btst    #1,d5
(1)  436/FFFFFFFFFFFF10F6 : 6704                		beq.s	.y_neg
(1)  437/FFFFFFFFFFFF10F8 : 4407                		neg.b	d7
(1)  438/FFFFFFFFFFFF10FA : 4447                		neg.w	d7
(1)  439/FFFFFFFFFFFF10FC :                     .y_neg:
(1)  440/FFFFFFFFFFFF10FC : 4447                		neg.w	d7		; Reverse Y
(1)  441/FFFFFFFFFFFF10FE : 3D47 000A           		move.w	d7,mouse_y(a6)
(1)  442/FFFFFFFFFFFF1102 :                     
(1)  443/FFFFFFFFFFFF1102 :                     .invalid:
(1)  444/FFFFFFFFFFFF1102 : 1ABC 0060           		move.b	#$60,(a5)
(1)  445/FFFFFFFFFFFF1106 : 4E75                		rts
(1)  446/FFFFFFFFFFFF1108 :                     
(1)  447/FFFFFFFFFFFF1108 :                     ; ----------------------------------------
(1)  448/FFFFFFFFFFFF1108 :                     ; ID $0D
(1)  449/FFFFFFFFFFFF1108 :                     ;
(1)  450/FFFFFFFFFFFF1108 :                     ; Normal controller: 3 button or 6 button.
(1)  451/FFFFFFFFFFFF1108 :                     ; ----------------------------------------
(1)  452/FFFFFFFFFFFF1108 :                     
(1)  453/FFFFFFFFFFFF1108 :                     .id_0D:
(1)  454/FFFFFFFFFFFF1108 : 1ABC 0040           		move.b	#$40,(a5)	; Show CB|RLDU
(1)  455/FFFFFFFFFFFF110C : 4E71                		nop
(1)  456/FFFFFFFFFFFF110E : 4E71                		nop
(1)  457/FFFFFFFFFFFF1110 : 1A15                		move.b	(a5),d5
(1)  458/FFFFFFFFFFFF1112 : 0245 003F           		andi.w	#%00111111,d5
(1)  459/FFFFFFFFFFFF1116 : 1ABC 0000           		move.b	#$00,(a5)	; Show SA|RLDU
(1)  460/FFFFFFFFFFFF111A : 4E71                		nop
(1)  461/FFFFFFFFFFFF111C : 4E71                		nop
(1)  462/FFFFFFFFFFFF111E : 1E15                		move.b	(a5),d7		; The following flips are for
(1)  463/FFFFFFFFFFFF1120 : E54F                		lsl.w	#2,d7		; the 6pad's internal counter:
(1)  464/FFFFFFFFFFFF1122 : 0247 00C0           		andi.w	#%11000000,d7
(1)  465/FFFFFFFFFFFF1126 : 8E45                		or.w	d5,d7
(1)  466/FFFFFFFFFFFF1128 : 1ABC 0040           		move.b	#$40,(a5)	; Show CB|RLDU (2)
(1)  467/FFFFFFFFFFFF112C : 4647                		not.w	d7
(1)  468/FFFFFFFFFFFF112E : 1A2E 0003           		move.b	on_hold+1(a6),d5
(1)  469/FFFFFFFFFFFF1132 : BF05                		eor.b	d7,d5
(1)  470/FFFFFFFFFFFF1134 : 1ABC 0000           		move.b	#$00,(a5)	; Show SA|RLDU (3)
(1)  471/FFFFFFFFFFFF1138 : 1D47 0003           		move.b	d7,on_hold+1(a6)
(1)  472/FFFFFFFFFFFF113C : CA07                		and.b	d7,d5
(1)  473/FFFFFFFFFFFF113E : 1D45 0005           		move.b	d5,on_press+1(a6)
(1)  474/FFFFFFFFFFFF1142 : 1ABC 0040           		move.b	#$40,(a5)	; 6 button responds (4)
(1)  475/FFFFFFFFFFFF1146 : 4E71                		nop
(1)  476/FFFFFFFFFFFF1148 : 4E71                		nop
(1)  477/FFFFFFFFFFFF114A : 1E15                		move.b	(a5),d7		; Grab ??|MXYZ
(1)  478/FFFFFFFFFFFF114C : 1ABC 0000            		move.b	#$00,(a5)	; (5)
(1)  479/FFFFFFFFFFFF1150 : 4E71                  		nop
(1)  480/FFFFFFFFFFFF1152 : 4E71                  		nop
(1)  481/FFFFFFFFFFFF1154 : 1C15                 		move.b	(a5),d6		; Type: $03 old, $0F new
(1)  482/FFFFFFFFFFFF1156 : 1ABC 0040            		move.b	#$40,(a5)	; (6)
(1)  483/FFFFFFFFFFFF115A : 4E71                 		nop
(1)  484/FFFFFFFFFFFF115C : 4E71                 		nop
(1)  485/FFFFFFFFFFFF115E : 0246 000F           		andi.w	#$F,d6
(1)  486/FFFFFFFFFFFF1162 : E44E                		lsr.w	#2,d6
(1)  487/FFFFFFFFFFFF1164 : 0246 0001           		andi.w	#1,d6
(1)  488/FFFFFFFFFFFF1168 : 6716                		beq.s	.oldpad
(1)  489/FFFFFFFFFFFF116A : 4607                		not.b	d7
(1)  490/FFFFFFFFFFFF116C : 0247 000F            		andi.w	#%1111,d7
(1)  491/FFFFFFFFFFFF1170 : 1A2E 0002           		move.b	on_hold(a6),d5
(1)  492/FFFFFFFFFFFF1174 : BF05                		eor.b	d7,d5
(1)  493/FFFFFFFFFFFF1176 : 1D47 0002           		move.b	d7,on_hold(a6)
(1)  494/FFFFFFFFFFFF117A : CA07                		and.b	d7,d5
(1)  495/FFFFFFFFFFFF117C : 1D45 0004           		move.b	d5,on_press(a6)
(1)  496/FFFFFFFFFFFF1180 :                     .oldpad:
(1)  497/FFFFFFFFFFFF1180 : 1D46 0001           		move.b	d6,pad_ver(a6)
(1)  498/FFFFFFFFFFFF1184 : 4E75                		rts
(1)  499/FFFFFFFFFFFF1186 :                     
(1)  500/FFFFFFFFFFFF1186 :                     ; ----------------------------------------
(1)  501/FFFFFFFFFFFF1186 :                     ; Grab ID
(1)  502/FFFFFFFFFFFF1186 :                     ; ----------------------------------------
(1)  503/FFFFFFFFFFFF1186 :                     
(1)  504/FFFFFFFFFFFF1186 :                     .pick_id:
(1)  505/FFFFFFFFFFFF1186 : 7E00                		moveq	#0,d7
(1)  506/FFFFFFFFFFFF1188 : 1ABC 0070           		move.b	#%01110000,(a5)		; TH=1,TR=1,TL=1
(1)  507/FFFFFFFFFFFF118C : 4E71                		nop
(1)  508/FFFFFFFFFFFF118E : 4E71                		nop
(1)  509/FFFFFFFFFFFF1190 : 610A                		bsr	.read
(1)  510/FFFFFFFFFFFF1192 : 1ABC 0030           		move.b	#%00110000,(a5)		; TH=0,TR=1,TL=1
(1)  511/FFFFFFFFFFFF1196 : 4E71                		nop
(1)  512/FFFFFFFFFFFF1198 : 4E71                		nop
(1)  513/FFFFFFFFFFFF119A : DE47                		add.w	d7,d7
(1)  514/FFFFFFFFFFFF119C :                     .read:
(1)  515/FFFFFFFFFFFF119C : 1A15                		move.b	(a5),d5
(1)  516/FFFFFFFFFFFF119E : 1C05                		move.b	d5,d6
(1)  517/FFFFFFFFFFFF11A0 : 0206 000C           		andi.b	#%1100,d6
(1)  518/FFFFFFFFFFFF11A4 : 6702                		beq.s	.step_1
(1)  519/FFFFFFFFFFFF11A6 : 5247                		addq.w	#1,d7
(1)  520/FFFFFFFFFFFF11A8 :                     .step_1:
(1)  521/FFFFFFFFFFFF11A8 : DE47                		add.w	d7,d7
(1)  522/FFFFFFFFFFFF11AA : 1C05                		move.b	d5,d6
(1)  523/FFFFFFFFFFFF11AC : 0246 0003           		andi.w	#%0011,d6
(1)  524/FFFFFFFFFFFF11B0 : 6702                		beq.s	.step_2
(1)  525/FFFFFFFFFFFF11B2 : 5247                		addq.w	#1,d7
(1)  526/FFFFFFFFFFFF11B4 :                     .step_2:
(1)  527/FFFFFFFFFFFF11B4 : 4E75                		rts
(1)  529/FFFFFFFFFFFF11B6 :                     
(1)  530/FFFFFFFFFFFF11B6 :                     ; --------------------------------------------------------
(1)  531/FFFFFFFFFFFF11B6 :                     ; System_Random
(1)  532/FFFFFFFFFFFF11B6 :                     ;
(1)  533/FFFFFFFFFFFF11B6 :                     ; Makes a random number.
(1)  534/FFFFFFFFFFFF11B6 :                     ;
(1)  535/FFFFFFFFFFFF11B6 :                     ; Returns:
(1)  536/FFFFFFFFFFFF11B6 :                     ; d0.l | Result value
(1)  537/FFFFFFFFFFFF11B6 :                     ;
(1)  538/FFFFFFFFFFFF11B6 :                     ; Uses:
(1)  539/FFFFFFFFFFFF11B6 :                     ; d4
(1)  540/FFFFFFFFFFFF11B6 :                     ; --------------------------------------------------------
(1)  541/FFFFFFFFFFFF11B6 :                     
(1)  542/FFFFFFFFFFFF11B6 :                     System_Random:
(1)  543/FFFFFFFFFFFF11B6 : 2F04                		move.l	d4,-(sp)
(1)  544/FFFFFFFFFFFF11B8 : 2838 C448           		move.l	(RAM_SysRandSeed).w,d4
(1)  545/FFFFFFFFFFFF11BC : 6606                		bne.s	.good_s
(1)  546/FFFFFFFFFFFF11BE : 283C 23B5 1947      		move.l	#$23B51947,d4
(1)  547/FFFFFFFFFFFF11C4 :                     .good_s:
(1)  548/FFFFFFFFFFFF11C4 : 2004                		move.l	d4,d0
(1)  549/FFFFFFFFFFFF11C6 : EB9C                		rol.l	#5,d4
(1)  550/FFFFFFFFFFFF11C8 : D880                		add.l	d0,d4
(1)  551/FFFFFFFFFFFF11CA : E644                		asr.w	#3,d4
(1)  552/FFFFFFFFFFFF11CC : D880                		add.l	d0,d4
(1)  553/FFFFFFFFFFFF11CE : 3004                		move.w	d4,d0
(1)  554/FFFFFFFFFFFF11D0 : 4844                		swap	d4
(1)  555/FFFFFFFFFFFF11D2 : D044                		add.w	d4,d0
(1)  556/FFFFFFFFFFFF11D4 : 3800                		move.w	d0,d4
(1)  557/FFFFFFFFFFFF11D6 : 4844                		swap	d4
(1)  558/FFFFFFFFFFFF11D8 : 21C4 C448           		move.l	d4,(RAM_SysRandSeed).w
(1)  559/FFFFFFFFFFFF11DC : 281F                		move.l	(sp)+,d4
(1)  560/FFFFFFFFFFFF11DE : 4E75                		rts
(1)  561/FFFFFFFFFFFF11E0 :                     
(1)  562/FFFFFFFFFFFF11E0 :                     ; --------------------------------------------------------
(1)  563/FFFFFFFFFFFF11E0 :                     ; System_SineWave, System_SineWave_Cos
(1)  564/FFFFFFFFFFFF11E0 :                     ;
(1)  565/FFFFFFFFFFFF11E0 :                     ; Get sine or cosine value
(1)  566/FFFFFFFFFFFF11E0 :                     ;
(1)  567/FFFFFFFFFFFF11E0 :                     ; Input:
(1)  568/FFFFFFFFFFFF11E0 :                     ; d0.w | Tan value
(1)  569/FFFFFFFFFFFF11E0 :                     ; d1.w | Multiply by
(1)  570/FFFFFFFFFFFF11E0 :                     ;
(1)  571/FFFFFFFFFFFF11E0 :                     ; Returns:
(1)  572/FFFFFFFFFFFF11E0 :                     ; d2.l | Result as $0000.0000
(1)  573/FFFFFFFFFFFF11E0 :                     ; --------------------------------------------------------
(1)  574/FFFFFFFFFFFF11E0 :                     
(1)  575/FFFFFFFFFFFF11E0 :                     System_SineWave_Cos:
(1)  576/FFFFFFFFFFFF11E0 : 48A7 8000           		movem.w	d0,-(sp)
(1)  577/FFFFFFFFFFFF11E4 : 7400                		moveq	#0,d2
(1)  578/FFFFFFFFFFFF11E6 : 0600 0040           		addi.b	#$40,d0
(1)  579/FFFFFFFFFFFF11EA : 1400                		move.b	d0,d2
(1)  580/FFFFFFFFFFFF11EC : E302                		asl.b	#1,d2
(1)  581/FFFFFFFFFFFF11EE : 343B 202E           		move.w	MdSys_SineData(pc,d2.w),d2
(1)  582/FFFFFFFFFFFF11F2 : C4C1                		mulu.w	d1,d2
(1)  583/FFFFFFFFFFFF11F4 : 8000                		or.b	d0,d0
(1)  584/FFFFFFFFFFFF11F6 : 6A02                		bpl.s	.dont_neg
(1)  585/FFFFFFFFFFFF11F8 : 4482                		neg.l	d2
(1)  586/FFFFFFFFFFFF11FA :                     .dont_neg:
(1)  587/FFFFFFFFFFFF11FA : 4C9F 0001           		movem.w	(sp)+,d0
(1)  588/FFFFFFFFFFFF11FE : 4E75                		rts
(1)  589/FFFFFFFFFFFF1200 :                     
(1)  590/FFFFFFFFFFFF1200 :                     System_SineWave:
(1)  591/FFFFFFFFFFFF1200 : 48A7 8000           		movem.w	d0,-(sp)
(1)  592/FFFFFFFFFFFF1204 : 0240 007F           		andi.w	#$7F,d0
(1)  593/FFFFFFFFFFFF1208 : E340                		asl.w	#1,d0
(1)  594/FFFFFFFFFFFF120A : 343B 0012           		move.w	MdSys_SineData(pc,d0.w),d2
(1)  595/FFFFFFFFFFFF120E : C4C1                		mulu.w	d1,d2
(1)  596/FFFFFFFFFFFF1210 : 4C9F 0001           		movem.w	(sp)+,d0
(1)  597/FFFFFFFFFFFF1214 : 5182                		subq.l	#8,d2
(1)  598/FFFFFFFFFFFF1216 : 8000                		or.b	d0,d0
(1)  599/FFFFFFFFFFFF1218 : 6A02                		bpl.s	.dont_neg
(1)  600/FFFFFFFFFFFF121A : 4482                		neg.l	d2
(1)  601/FFFFFFFFFFFF121C :                     .dont_neg:
(1)  602/FFFFFFFFFFFF121C : 4E75                		rts
(1)  603/FFFFFFFFFFFF121E :                     
(1)  604/FFFFFFFFFFFF121E : 0000 0006 000D      MdSys_SineData:	dc.w 0,	6, $D, $13, $19, $1F, $26, $2C,	$32, $38, $3E
         FFFFFFFFFFFF1224 : 0013 0019 001F 
         FFFFFFFFFFFF122A : 0026 002C 0032 
         FFFFFFFFFFFF1230 : 0038 003E          
(1)  605/FFFFFFFFFFFF1234 : 0044 004A 0050      		dc.w $44, $4A, $50, $56, $5C, $62, $68,	$6D, $73, $79
         FFFFFFFFFFFF123A : 0056 005C 0062 
         FFFFFFFFFFFF1240 : 0068 006D 0073 
         FFFFFFFFFFFF1246 : 0079             
(1)  606/FFFFFFFFFFFF1248 : 007E 0084 0089      		dc.w $7E, $84, $89, $8E, $93, $98, $9D,	$A2, $A7, $AC
         FFFFFFFFFFFF124E : 008E 0093 0098 
         FFFFFFFFFFFF1254 : 009D 00A2 00A7 
         FFFFFFFFFFFF125A : 00AC             
(1)  607/FFFFFFFFFFFF125C : 00B1 00B5 00B9      		dc.w $B1, $B5, $B9, $BE, $C2, $C6, $CA,	$CE, $D1, $D5
         FFFFFFFFFFFF1262 : 00BE 00C2 00C6 
         FFFFFFFFFFFF1268 : 00CA 00CE 00D1 
         FFFFFFFFFFFF126E : 00D5             
(1)  608/FFFFFFFFFFFF1270 : 00D8 00DC 00DF      		dc.w $D8, $DC, $DF, $E2, $E5, $E7, $EA,	$ED, $EF, $F1
         FFFFFFFFFFFF1276 : 00E2 00E5 00E7 
         FFFFFFFFFFFF127C : 00EA 00ED 00EF 
         FFFFFFFFFFFF1282 : 00F1             
(1)  609/FFFFFFFFFFFF1284 : 00F3 00F5 00F7      		dc.w $F3, $F5, $F7, $F8, $FA, $FB, $FC,	$FD, $FE, $FF
         FFFFFFFFFFFF128A : 00F8 00FA 00FB 
         FFFFFFFFFFFF1290 : 00FC 00FD 00FE 
         FFFFFFFFFFFF1296 : 00FF             
(1)  610/FFFFFFFFFFFF1298 : 00FF 0100 0100      		dc.w $FF, $100,	$100, $100, $100, $100,	$FF, $FF, $FE
         FFFFFFFFFFFF129E : 0100 0100 0100 
         FFFFFFFFFFFF12A4 : 00FF 00FF 00FE    
(1)  611/FFFFFFFFFFFF12AA : 00FD 00FC 00FB      		dc.w $FD, $FC, $FB, $FA, $F8, $F7, $F5,	$F3, $F1, $EF
         FFFFFFFFFFFF12B0 : 00FA 00F8 00F7 
         FFFFFFFFFFFF12B6 : 00F5 00F3 00F1 
         FFFFFFFFFFFF12BC : 00EF             
(1)  612/FFFFFFFFFFFF12BE : 00ED 00EA 00E7      		dc.w $ED, $EA, $E7, $E5, $E2, $DF, $DC,	$D8, $D5, $D1
         FFFFFFFFFFFF12C4 : 00E5 00E2 00DF 
         FFFFFFFFFFFF12CA : 00DC 00D8 00D5 
         FFFFFFFFFFFF12D0 : 00D1             
(1)  613/FFFFFFFFFFFF12D2 : 00CE 00CA 00C6      		dc.w $CE, $CA, $C6, $C2, $BE, $B9, $B5,	$B1, $AC, $A7
         FFFFFFFFFFFF12D8 : 00C2 00BE 00B9 
         FFFFFFFFFFFF12DE : 00B5 00B1 00AC 
         FFFFFFFFFFFF12E4 : 00A7             
(1)  614/FFFFFFFFFFFF12E6 : 00A2 009D 0098      		dc.w $A2, $9D, $98, $93, $8E, $89, $84,	$7E, $79, $73
         FFFFFFFFFFFF12EC : 0093 008E 0089 
         FFFFFFFFFFFF12F2 : 0084 007E 0079 
         FFFFFFFFFFFF12F8 : 0073             
(1)  615/FFFFFFFFFFFF12FA : 006D 0068 0062      		dc.w $6D, $68, $62, $5C, $56, $50, $4A,	$44, $3E, $38
         FFFFFFFFFFFF1300 : 005C 0056 0050 
         FFFFFFFFFFFF1306 : 004A 0044 003E 
         FFFFFFFFFFFF130C : 0038             
(1)  616/FFFFFFFFFFFF130E : 0032 002C 0026      		dc.w $32, $2C, $26, $1F, $19, $13, $D, 6
         FFFFFFFFFFFF1314 : 001F 0019 0013 
         FFFFFFFFFFFF131A : 000D 0006          
(1)  617/FFFFFFFFFFFF131E :                     
(1)  618/FFFFFFFFFFFF131E :                     ; --------------------------------------------------------
(1)  619/FFFFFFFFFFFF131E :                     ; System_SetInts
(1)  620/FFFFFFFFFFFF131E :                     ;
(1)  621/FFFFFFFFFFFF131E :                     ; Set new interrputs
(1)  622/FFFFFFFFFFFF131E :                     ;
(1)  623/FFFFFFFFFFFF131E :                     ; d0.l - VBlank (if 0: Skip write)
(1)  624/FFFFFFFFFFFF131E :                     ; d1.l - HBlank (if 0: Skip write)
(1)  625/FFFFFFFFFFFF131E :                     ;
(1)  626/FFFFFFFFFFFF131E :                     ; Uses:
(1)  627/FFFFFFFFFFFF131E :                     ; d4
(1)  628/FFFFFFFFFFFF131E :                     ; --------------------------------------------------------
(1)  629/FFFFFFFFFFFF131E :                     
(1)  630/FFFFFFFFFFFF131E :                     System_SetInts:
(1)  631/FFFFFFFFFFFF131E : 2800                		move.l	d0,d4
(1)  632/FFFFFFFFFFFF1320 : 6704                		beq.s	.novint
(1)  634/FFFFFFFFFFFF1322 : 21C4 FD08           		move.l	d4,($FFFFFD06+2).w
(1)  638/FFFFFFFFFFFF1326 :                     .novint:
(1)  639/FFFFFFFFFFFF1326 : 2801                		move.l	d1,d4
(1)  640/FFFFFFFFFFFF1328 : 6704                		beq.s	.nohint
(1)  642/FFFFFFFFFFFF132A : 21C4 FD0E           		move.l	d4,($FFFFFD0C+2).w
(1)  646/FFFFFFFFFFFF132E :                     .nohint:
(1)  647/FFFFFFFFFFFF132E : 4E75                		rts
(1)  648/FFFFFFFFFFFF1330 :                     
(1)  649/FFFFFFFFFFFF1330 :                     ; --------------------------------------------------------
(1)  650/FFFFFFFFFFFF1330 :                     ; System_SramInit
(1)  651/FFFFFFFFFFFF1330 :                     ;
(1)  652/FFFFFFFFFFFF1330 :                     ; Init save data
(1)  653/FFFFFFFFFFFF1330 :                     ;
(1)  654/FFFFFFFFFFFF1330 :                     ; Uses:
(1)  655/FFFFFFFFFFFF1330 :                     ; a4,d4-d5
(1)  656/FFFFFFFFFFFF1330 :                     ; --------------------------------------------------------
(1)  657/FFFFFFFFFFFF1330 :                     
(1)  658/FFFFFFFFFFFF1330 :                     System_SramInit:
(1)  662/FFFFFFFFFFFF1330 : 4E71                		nop			; TODO
(1)  677/FFFFFFFFFFFF1332 : 4E75                		rts
(1)  678/FFFFFFFFFFFF1334 :                     
(1)  679/FFFFFFFFFFFF1334 :                     ; --------------------------------------------------------
(1)  680/FFFFFFFFFFFF1334 :                     ; System_SramSave
(1)  681/FFFFFFFFFFFF1334 :                     ; --------------------------------------------------------
(1)  682/FFFFFFFFFFFF1334 :                     
(1)  683/FFFFFFFFFFFF1334 :                     System_SramSave:
(1)  687/FFFFFFFFFFFF1334 : 4E71                		nop
(1)  714/FFFFFFFFFFFF1336 : 4E75                		rts
(1)  715/FFFFFFFFFFFF1338 :                     
(1)  716/FFFFFFFFFFFF1338 :                     ; --------------------------------------------------------
(1)  717/FFFFFFFFFFFF1338 :                     ; System_SramLoad
(1)  718/FFFFFFFFFFFF1338 :                     ; --------------------------------------------------------
(1)  719/FFFFFFFFFFFF1338 :                     
(1)  720/FFFFFFFFFFFF1338 :                     System_SramLoad:
(1)  724/FFFFFFFFFFFF1338 : 4E71                		nop
(1)  751/FFFFFFFFFFFF133A : 4E75                		rts
(1)  752/FFFFFFFFFFFF133C :                     
(1)  753/FFFFFFFFFFFF133C :                     ; ====================================================================
(1)  754/FFFFFFFFFFFF133C :                     ; ----------------------------------------------------------------
(1)  755/FFFFFFFFFFFF133C :                     ; Screen mode subroutines
(1)  756/FFFFFFFFFFFF133C :                     ; ----------------------------------------------------------------
(1)  757/FFFFFFFFFFFF133C :                     
(1)  758/FFFFFFFFFFFF133C :                     ; --------------------------------------------------------
(1)  759/FFFFFFFFFFFF133C :                     ; Initialize current screen mode
(1)  760/FFFFFFFFFFFF133C :                     ;
(1)  761/FFFFFFFFFFFF133C :                     ; MUST call this at the very start of your screen code.
(1)  762/FFFFFFFFFFFF133C :                     ; --------------------------------------------------------
(1)  763/FFFFFFFFFFFF133C :                     
(1)  764/FFFFFFFFFFFF133C :                     Mode_Init:
(1)  765/FFFFFFFFFFFF133C : 007C 0700           		ori.w	#$0700,sr			; Disable interrupts.
(1)  766/FFFFFFFFFFFF1340 : 13FC 0004 FFFF      		move.b	#$04,(RAM_VdpRegs).l
         FFFFFFFFFFFF1346 : B8F6             
(1)  767/FFFFFFFFFFFF1348 : 13FC 0004 FFFF      		move.b	#$04,(RAM_VdpRegs+1).l
         FFFFFFFFFFFF134E : B8F7             
(1)  768/FFFFFFFFFFFF1350 : 6100 EF7C           		bsr	Video_Update
(1)  769/FFFFFFFFFFFF1354 : 6100 EFCC           		bsr	Video_Clear
(1)  770/FFFFFFFFFFFF1358 : 6100 F83C           		bsr	Objects_Clear
(1)  771/FFFFFFFFFFFF135C : 49F8 D404           		lea	(RAM_ScrnBuff).w,a4
(1)  772/FFFFFFFFFFFF1360 : 3A3C 0BFF           		move.w	#(MAX_ScrnBuff/2)-1,d5
(1)  773/FFFFFFFFFFFF1364 : 7800                		moveq	#0,d4
(1)  774/FFFFFFFFFFFF1366 :                     .clr:
(1)  775/FFFFFFFFFFFF1366 : 38C4                		move.w	d4,(a4)+
(1)  776/FFFFFFFFFFFF1368 : 51CD FFFC           		dbf	d5,.clr
(1)  777/FFFFFFFFFFFF136C : 4E75                		rts
(1)  778/FFFFFFFFFFFF136E :                     
(1)  779/FFFFFFFFFFFF136E :                     ; --------------------------------------------------------
(1)  780/FFFFFFFFFFFF136E :                     ; Syncronized Fade-in/Fade-out for both VDP and SuperVDP
(1)  781/FFFFFFFFFFFF136E :                     ; --------------------------------------------------------
(1)  782/FFFFFFFFFFFF136E :                     
(1)  783/FFFFFFFFFFFF136E :                     Mode_FadeIn:
(1)  784/FFFFFFFFFFFF136E : 6100 F84E           		bsr	Objects_Run
(1)  785/FFFFFFFFFFFF1372 : 31FC 0001 B8E4      		move.w	#1,(RAM_FadeMdReq).w
(1)  786/FFFFFFFFFFFF1378 : 31FC 0001 B8EC      		move.w	#1,(RAM_FadeMarsReq).w
(1)  787/FFFFFFFFFFFF137E : 31FC 0001 B8E6      		move.w	#1,(RAM_FadeMdIncr).w
(1)  788/FFFFFFFFFFFF1384 : 31FC 0002 B8EE      		move.w	#2,(RAM_FadeMarsIncr).w
(1)  789/FFFFFFFFFFFF138A : 31FC 0001 B8E8      		move.w	#1,(RAM_FadeMdDelay).w
(1)  790/FFFFFFFFFFFF1390 : 31FC 0000 B8F0      		move.w	#0,(RAM_FadeMarsDelay).w
(1)  791/FFFFFFFFFFFF1396 :                     .loopw:
(1)  792/FFFFFFFFFFFF1396 : 6100 FC1C           		bsr	System_Render
(1)  793/FFFFFFFFFFFF139A : 6100 F05E           		bsr	Video_RunFade
(1)  794/FFFFFFFFFFFF139E : 66F6                		bne.s	.loopw
(1)  795/FFFFFFFFFFFF13A0 : 4E75                		rts
(1)  796/FFFFFFFFFFFF13A2 :                     
(1)  797/FFFFFFFFFFFF13A2 :                     Mode_FadeOut:
(1)  798/FFFFFFFFFFFF13A2 : 6100 F81A           		bsr	Objects_Run
(1)  799/FFFFFFFFFFFF13A6 : 31FC 0002 B8E4      		move.w	#2,(RAM_FadeMdReq).w
(1)  800/FFFFFFFFFFFF13AC : 31FC 0002 B8EC      		move.w	#2,(RAM_FadeMarsReq).w
(1)  801/FFFFFFFFFFFF13B2 : 31FC 0001 B8E6      		move.w	#1,(RAM_FadeMdIncr).w
(1)  802/FFFFFFFFFFFF13B8 : 31FC 0002 B8EE      		move.w	#2,(RAM_FadeMarsIncr).w
(1)  803/FFFFFFFFFFFF13BE : 31FC 0001 B8E8      		move.w	#1,(RAM_FadeMdDelay).w
(1)  804/FFFFFFFFFFFF13C4 : 31FC 0000 B8F0      		move.w	#0,(RAM_FadeMarsDelay).w
(1)  805/FFFFFFFFFFFF13CA :                     .loopw:
(1)  806/FFFFFFFFFFFF13CA : 6100 FBE8           		bsr	System_Render
(1)  807/FFFFFFFFFFFF13CE : 6100 F02A           		bsr	Video_RunFade
(1)  808/FFFFFFFFFFFF13D2 : 66F6                		bne.s	.loopw
(1)  809/FFFFFFFFFFFF13D4 : 4E75                		rts
(1)  810/FFFFFFFFFFFF13D6 :                     
(1)  811/FFFFFFFFFFFF13D6 :                     ; ====================================================================
(1)  812/FFFFFFFFFFFF13D6 :                     ; ----------------------------------------------------------------
(1)  813/FFFFFFFFFFFF13D6 :                     ; Default interrupts
(1)  814/FFFFFFFFFFFF13D6 :                     ; ----------------------------------------------------------------
(1)  815/FFFFFFFFFFFF13D6 :                     
(1)  816/FFFFFFFFFFFF13D6 :                     ; --------------------------------------------------------
(1)  817/FFFFFFFFFFFF13D6 :                     ; VBlank
(1)  818/FFFFFFFFFFFF13D6 :                     ; --------------------------------------------------------
(1)  819/FFFFFFFFFFFF13D6 :                     
(1)  820/FFFFFFFFFFFF13D6 :                     VInt_Default:
(1)  821/FFFFFFFFFFFF13D6 : 48E7 FFFE           		movem.l	d0-a6,-(sp)
(1)  822/FFFFFFFFFFFF13DA : 6100 FC2E           		bsr	System_Input
(1)  823/FFFFFFFFFFFF13DE : 06B8 0000 0001      		addi.l	#1,(RAM_FrameCount).w
         FFFFFFFFFFFF13E4 : B8D4             
(1)  824/FFFFFFFFFFFF13E6 : 4CDF 7FFF           		movem.l	(sp)+,d0-a6
(1)  825/FFFFFFFFFFFF13EA : 4E73                		rte
(1)  826/FFFFFFFFFFFF13EC :                     
(1)  827/FFFFFFFFFFFF13EC :                     ; --------------------------------------------------------
(1)  828/FFFFFFFFFFFF13EC :                     ; HBlank
(1)  829/FFFFFFFFFFFF13EC :                     ; --------------------------------------------------------
(1)  830/FFFFFFFFFFFF13EC :                     
(1)  831/FFFFFFFFFFFF13EC :                     HInt_Default:
(1)  832/FFFFFFFFFFFF13EC : 4E73                		rte
(1)  833/FFFFFFFFFFFF13EE :                     
(1)  834/FFFFFFFFFFFF13EE :                     ; ====================================================================
(1)  835/FFFFFFFFFFFF13EE :                     ; ----------------------------------------------------------------
(1)  836/FFFFFFFFFFFF13EE :                     ; SEGA CD / CD32X ONLY
(1)  837/FFFFFFFFFFFF13EE :                     ; ----------------------------------------------------------------
(1)  838/FFFFFFFFFFFF13EE :                     
(1)  840/FFFFFFFFFFFF13EE :                     
(1)  841/FFFFFFFFFFFF13EE :                     ; --------------------------------------------------------
(1)  842/FFFFFFFFFFFF13EE :                     ; System_McdSubWait
(1)  843/FFFFFFFFFFFF13EE :                     ;
(1)  844/FFFFFFFFFFFF13EE :                     ; Waits until Sub-CPU finishes.
(1)  845/FFFFFFFFFFFF13EE :                     ;
(1)  846/FFFFFFFFFFFF13EE :                     ; Uses:
(1)  847/FFFFFFFFFFFF13EE :                     ; a6,d7
(1)  848/FFFFFFFFFFFF13EE :                     ; --------------------------------------------------------
(1)  849/FFFFFFFFFFFF13EE :                     
(1)  850/FFFFFFFFFFFF13EE :                     System_McdSubWait:
(1)  851/FFFFFFFFFFFF13EE : 4DF9 00A1 200E      		lea	(sysmcd_reg+mcd_comm_m),a6
(1)  852/FFFFFFFFFFFF13F4 : 1E2E 0001           .wait_sub_o:	move.b	1(a6),d7
(1)  853/FFFFFFFFFFFF13F8 : 6BFA                		bmi.s	.wait_sub_o
(1)  854/FFFFFFFFFFFF13FA : 4E75                		rts
(1)  855/FFFFFFFFFFFF13FC :                     
(1)  856/FFFFFFFFFFFF13FC :                     ; --------------------------------------------------------
(1)  857/FFFFFFFFFFFF13FC :                     ; System_McdSubTask
(1)  858/FFFFFFFFFFFF13FC :                     ;
(1)  859/FFFFFFFFFFFF13FC :                     ; Request task to Sub-CPU
(1)  860/FFFFFFFFFFFF13FC :                     ; ** Exits without waiting SUB to finish, call
(1)  861/FFFFFFFFFFFF13FC :                     ; System_McdSubWait after this IF required **
(1)  862/FFFFFFFFFFFF13FC :                     ;
(1)  863/FFFFFFFFFFFF13FC :                     ; Input:
(1)  864/FFFFFFFFFFFF13FC :                     ; d0.b | Task number
(1)  865/FFFFFFFFFFFF13FC :                     ;
(1)  866/FFFFFFFFFFFF13FC :                     ; Uses:
(1)  867/FFFFFFFFFFFF13FC :                     ; d7/a6
(1)  868/FFFFFFFFFFFF13FC :                     ; --------------------------------------------------------
(1)  869/FFFFFFFFFFFF13FC :                     
(1)  870/FFFFFFFFFFFF13FC :                     System_McdSubTask:
(1)  871/FFFFFFFFFFFF13FC : 61F0                		bsr	System_McdSubWait
(1)  872/FFFFFFFFFFFF13FE :                     ; 		lea	(sysmcd_reg+mcd_comm_m),a6
(1)  873/FFFFFFFFFFFF13FE : 1E16                .wait_else:	move.b	(a6),d7
(1)  874/FFFFFFFFFFFF1400 : 0247 00F0           		andi.w	#$F0,d7
(1)  875/FFFFFFFFFFFF1404 : 0C47 00F0           		cmpi.w	#$F0,d7			; Z80 got first?
(1)  876/FFFFFFFFFFFF1408 : 67F4                		beq.s	.wait_else
(1)  877/FFFFFFFFFFFF140A : 1C80                		move.b	d0,(a6)			; Set this command
(1)  878/FFFFFFFFFFFF140C : 1E2E 0001           .wait_sub_i:	move.b	1(a6),d7		; Wait until SUB gets busy
(1)  879/FFFFFFFFFFFF1410 : 6AFA                		bpl.s	.wait_sub_i
(1)  880/FFFFFFFFFFFF1412 : 1CBC 0000           		move.b	#$00,(a6)		; Clear value, SUB already got the ID
(1)  881/FFFFFFFFFFFF1416 : 4E75                		rts
(1)  882/FFFFFFFFFFFF1418 :                     
(1)  883/FFFFFFFFFFFF1418 :                     ; --------------------------------------------------------
(1)  884/FFFFFFFFFFFF1418 :                     ; System_McdTrnsfr_WRAM
(1)  885/FFFFFFFFFFFF1418 :                     ;
(1)  886/FFFFFFFFFFFF1418 :                     ; Read file from disc and sends it to WORD-RAM,
(1)  887/FFFFFFFFFFFF1418 :                     ; waits on finish.
(1)  888/FFFFFFFFFFFF1418 :                     ;
(1)  889/FFFFFFFFFFFF1418 :                     ; Input:
(1)  890/FFFFFFFFFFFF1418 :                     ; a0 | Filename string "FILENAME.BIN",0
(1)  891/FFFFFFFFFFFF1418 :                     ; a1 | Output location
(1)  892/FFFFFFFFFFFF1418 :                     ;
(1)  893/FFFFFFFFFFFF1418 :                     ; Uses:
(1)  894/FFFFFFFFFFFF1418 :                     ; d0/d7/a5-a6
(1)  895/FFFFFFFFFFFF1418 :                     ;
(1)  896/FFFFFFFFFFFF1418 :                     ; This calls Sub-Task $02
(1)  897/FFFFFFFFFFFF1418 :                     ; NEEDS WORD-RAM permission in 2M
(1)  898/FFFFFFFFFFFF1418 :                     ; --------------------------------------------------------
(1)  899/FFFFFFFFFFFF1418 :                     
(1)  900/FFFFFFFFFFFF1418 :                     System_McdTrnsfr_WRAM:
(1)  901/FFFFFFFFFFFF1418 : 48E7 8106           		movem.l	d0/d7/a5-a6,-(sp)
(1)  902/FFFFFFFFFFFF141C : 4BF9 00A1 2010      		lea	(sysmcd_reg+mcd_dcomm_m),a5
(1)  903/FFFFFFFFFFFF1422 : 3AD8                		move.w	(a0)+,(a5)+				; 0 copy filename
(1)  904/FFFFFFFFFFFF1424 : 3AD8                		move.w	(a0)+,(a5)+				; 2
(1)  905/FFFFFFFFFFFF1426 : 3AD8                		move.w	(a0)+,(a5)+				; 4
(1)  906/FFFFFFFFFFFF1428 : 3AD8                		move.w	(a0)+,(a5)+				; 6
(1)  907/FFFFFFFFFFFF142A : 3AD8                		move.w	(a0)+,(a5)+				; 8
(1)  908/FFFFFFFFFFFF142C : 3AD8                		move.w	(a0)+,(a5)+				; 8
(1)  909/FFFFFFFFFFFF142E : 3AFC 0000           		move.w	#0,(a5)+				; A <-- zero end
(1)  910/FFFFFFFFFFFF1432 :                     ; 		move.w	d0,d1
(1)  911/FFFFFFFFFFFF1432 : 08F9 0001 00A1      .set_perm:	bset	#1,(sysmcd_reg+mcd_memory).l		; Set WORD-RAM permission to SUB
         FFFFFFFFFFFF1438 : 2003             
(1)  912/FFFFFFFFFFFF143A : 67F6                		beq.s	.set_perm
(1)  913/FFFFFFFFFFFF143C : 303C 0002           		move.w	#$02,d0					; COMMAND $02
(1)  914/FFFFFFFFFFFF1440 : 61BA                		bsr	System_McdSubTask
(1)  915/FFFFFFFFFFFF1442 : 61AA                		bsr	System_McdSubWait
(1)  916/FFFFFFFFFFFF1444 : 4CDF 6081           		movem.l	(sp)+,d0/d7/a5-a6
(1)  917/FFFFFFFFFFFF1448 : 4E75                		rts
(1)  918/FFFFFFFFFFFF144A :                     
(1)  919/FFFFFFFFFFFF144A :                     ; --------------------------------------------------------
(1)  920/FFFFFFFFFFFF144A :                     ; System_McdTrnsfr_RAM
(1)  921/FFFFFFFFFFFF144A :                     ;
(1)  922/FFFFFFFFFFFF144A :                     ; Read file from disc and transfer it's contents to a1,
(1)  923/FFFFFFFFFFFF144A :                     ; uses communication ports.
(1)  924/FFFFFFFFFFFF144A :                     ;
(1)  925/FFFFFFFFFFFF144A :                     ; Input:
(1)  926/FFFFFFFFFFFF144A :                     ; a0   | Filename string: "FILENAME.BIN",0
(1)  927/FFFFFFFFFFFF144A :                     ; a1   | Output location
(1)  928/FFFFFFFFFFFF144A :                     ; d0.w | Size, $xxx0 sizes only
(1)  929/FFFFFFFFFFFF144A :                     ;
(1)  930/FFFFFFFFFFFF144A :                     ; Uses:
(1)  931/FFFFFFFFFFFF144A :                     ; d7,a0-a1,a5-a6
(1)  932/FFFFFFFFFFFF144A :                     ;
(1)  933/FFFFFFFFFFFF144A :                     ; This calls Sub-Task $01
(1)  934/FFFFFFFFFFFF144A :                     ; --------------------------------------------------------
(1)  935/FFFFFFFFFFFF144A :                     
(1)  936/FFFFFFFFFFFF144A :                     ; TODO: I think the Sega CD has a mode to
(1)  937/FFFFFFFFFFFF144A :                     ; transfer disc memory to MAIN (here) directly.
(1)  938/FFFFFFFFFFFF144A :                     ; But this works without problem.
(1)  939/FFFFFFFFFFFF144A :                     
(1)  940/FFFFFFFFFFFF144A :                     System_McdTrnsfr_RAM:
(1)  941/FFFFFFFFFFFF144A : 48E7 8106           		movem.l	d0/d7/a5-a6,-(sp)
(1)  942/FFFFFFFFFFFF144E : 4BF9 00A1 2010      		lea	(sysmcd_reg+mcd_dcomm_m),a5
(1)  943/FFFFFFFFFFFF1454 : 3AD8                		move.w	(a0)+,(a5)+			; 0 copy filename
(1)  944/FFFFFFFFFFFF1456 : 3AD8                		move.w	(a0)+,(a5)+			; 2
(1)  945/FFFFFFFFFFFF1458 : 3AD8                		move.w	(a0)+,(a5)+			; 4
(1)  946/FFFFFFFFFFFF145A : 3AD8                		move.w	(a0)+,(a5)+			; 6
(1)  947/FFFFFFFFFFFF145C : 3AD8                		move.w	(a0)+,(a5)+			; 8
(1)  948/FFFFFFFFFFFF145E : 3AD8                		move.w	(a0)+,(a5)+			; 8
(1)  949/FFFFFFFFFFFF1460 : 3AFC 0000           		move.w	#0,(a5)+			; A <-- zero end
(1)  950/FFFFFFFFFFFF1464 : 3200                		move.w	d0,d1
(1)  951/FFFFFFFFFFFF1466 : 7001                		moveq	#$01,d0				; COMMAND: READ CD AND PASS DATA
(1)  952/FFFFFFFFFFFF1468 : 6192                		bsr	System_McdSubTask
(1)  953/FFFFFFFFFFFF146A : 3001                		move.w	d1,d0
(1)  954/FFFFFFFFFFFF146C :                     	; a0 - Output location
(1)  955/FFFFFFFFFFFF146C :                     	; d0 - Number of $10-byte packets
(1)  956/FFFFFFFFFFFF146C : E848                		lsr.w	#4,d0				; size >> 4
(1)  957/FFFFFFFFFFFF146E : 5340                		subq.w	#1,d0				; -1
(1)  958/FFFFFFFFFFFF1470 : 4DF9 00A1 2020      		lea	(sysmcd_reg+mcd_dcomm_s),a6
(1)  959/FFFFFFFFFFFF1476 : 1E39 00A1 200E      		move.b	(sysmcd_reg+mcd_comm_m).l,d7	; LOCK HERE
(1)  960/FFFFFFFFFFFF147C : 08C7 0007           		bset	#7,d7
(1)  961/FFFFFFFFFFFF1480 : 13C7 00A1 200E      		move.b	d7,(sysmcd_reg+mcd_comm_m).l
(1)  962/FFFFFFFFFFFF1486 : 1E39 00A1 200F      .copy_ram:	move.b	(sysmcd_reg+mcd_comm_s).l,d7	; Wait if sub PASSed the packet
(1)  963/FFFFFFFFFFFF148C : 0807 0006           		btst	#6,d7
(1)  964/FFFFFFFFFFFF1490 : 67F4                		beq.s	.copy_ram
(1)  965/FFFFFFFFFFFF1492 : 2A4E                		move.l	a6,a5
(1)  966/FFFFFFFFFFFF1494 : 32DD                		move.w	(a5)+,(a1)+
(1)  967/FFFFFFFFFFFF1496 : 32DD                		move.w	(a5)+,(a1)+
(1)  968/FFFFFFFFFFFF1498 : 32DD                		move.w	(a5)+,(a1)+
(1)  969/FFFFFFFFFFFF149A : 32DD                		move.w	(a5)+,(a1)+
(1)  970/FFFFFFFFFFFF149C : 32DD                		move.w	(a5)+,(a1)+
(1)  971/FFFFFFFFFFFF149E : 32DD                		move.w	(a5)+,(a1)+
(1)  972/FFFFFFFFFFFF14A0 : 32DD                		move.w	(a5)+,(a1)+
(1)  973/FFFFFFFFFFFF14A2 : 32DD                		move.w	(a5)+,(a1)+
(1)  974/FFFFFFFFFFFF14A4 : 1E39 00A1 200E      		move.b	(sysmcd_reg+mcd_comm_m).l,d7	; Tell SUB we got the pack
(1)  975/FFFFFFFFFFFF14AA : 08C7 0006           		bset	#6,d7
(1)  976/FFFFFFFFFFFF14AE : 13C7 00A1 200E      		move.b	d7,(sysmcd_reg+mcd_comm_m).l
(1)  977/FFFFFFFFFFFF14B4 : 1E39 00A1 200F      .wait_sub:	move.b	(sysmcd_reg+mcd_comm_s).l,d7	; Wait clear
(1)  978/FFFFFFFFFFFF14BA : 0807 0006           		btst	#6,d7
(1)  979/FFFFFFFFFFFF14BE : 66F4                		bne.s	.wait_sub
(1)  980/FFFFFFFFFFFF14C0 : 1E39 00A1 200E      		move.b	(sysmcd_reg+mcd_comm_m).l,d7	; and clear our bit too.
(1)  981/FFFFFFFFFFFF14C6 : 0887 0006           		bclr	#6,d7
(1)  982/FFFFFFFFFFFF14CA : 13C7 00A1 200E      		move.b	d7,(sysmcd_reg+mcd_comm_m).l
(1)  983/FFFFFFFFFFFF14D0 : 51C8 FFB4           		dbf	d0,.copy_ram
(1)  984/FFFFFFFFFFFF14D4 : 1E39 00A1 200E      		move.b	(sysmcd_reg+mcd_comm_m).l,d7	; UNLOCK
(1)  985/FFFFFFFFFFFF14DA : 0887 0007           		bclr	#7,d7
(1)  986/FFFFFFFFFFFF14DE : 13C7 00A1 200E      		move.b	d7,(sysmcd_reg+mcd_comm_m).l
(1)  987/FFFFFFFFFFFF14E4 : 4CDF 6081           		movem.l	(sp)+,d0/d7/a5-a6
(1)  988/FFFFFFFFFFFF14E8 : 4E75                		rts
(1)  989/FFFFFFFFFFFF14EA :                     
(1)  990/FFFFFFFFFFFF14EA :                     ; --------------------------------------------------------
(1)  991/FFFFFFFFFFFF14EA :                     ; System_McdSendBuff
(1)  992/FFFFFFFFFFFF14EA :                     ;
(1)  993/FFFFFFFFFFFF14EA :                     ; Send data memory-to-memory from
(1)  994/FFFFFFFFFFFF14EA :                     ; MAIN-CPU to SUB-CPU
(1)  995/FFFFFFFFFFFF14EA :                     ;
(1)  996/FFFFFFFFFFFF14EA :                     ; Input:
(1)  997/FFFFFFFFFFFF14EA :                     ; a0 - Input data
(1)  998/FFFFFFFFFFFF14EA :                     ; a1 - Output location in SUB-CPU area
(1)  999/FFFFFFFFFFFF14EA :                     ; d0 - Size ($10* sizes only)
(1) 1000/FFFFFFFFFFFF14EA :                     ;
(1) 1001/FFFFFFFFFFFF14EA :                     ; Uses:
(1) 1002/FFFFFFFFFFFF14EA :                     ; d7,a0-a1/a5-a6
(1) 1003/FFFFFFFFFFFF14EA :                     ;
(1) 1004/FFFFFFFFFFFF14EA :                     ; This calls Sub-Task $08
(1) 1005/FFFFFFFFFFFF14EA :                     ; --------------------------------------------------------
(1) 1006/FFFFFFFFFFFF14EA :                     
(1) 1007/FFFFFFFFFFFF14EA :                     System_McdSendBuff:
(1) 1008/FFFFFFFFFFFF14EA : 48E7 8106           		movem.l	d0/d7/a5-a6,-(sp)
(1) 1009/FFFFFFFFFFFF14EE : 2E09                		move.l	a1,d7				; Write a1 to dcomm_m $00-$03
(1) 1010/FFFFFFFFFFFF14F0 : 33C7 00A1 2012      		move.w	d7,(sysmcd_reg+mcd_dcomm_m+2).l
(1) 1011/FFFFFFFFFFFF14F6 : 4847                		swap	d7
(1) 1012/FFFFFFFFFFFF14F8 : 33C7 00A1 2010      		move.w	d7,(sysmcd_reg+mcd_dcomm_m).l
(1) 1013/FFFFFFFFFFFF14FE : 3C00                		move.w	d0,d6
(1) 1014/FFFFFFFFFFFF1500 : 7008                		moveq	#$08,d0				; COMMAND $08
(1) 1015/FFFFFFFFFFFF1502 : 6100 FEF8           		bsr	System_McdSubTask
(1) 1016/FFFFFFFFFFFF1506 : E84E                		lsr.w	#4,d6				; size >> 4
(1) 1017/FFFFFFFFFFFF1508 : 5346                		subq.w	#1,d6				; -1
(1) 1018/FFFFFFFFFFFF150A : 4DF9 00A1 2010      		lea	(sysmcd_reg+mcd_dcomm_m),a6
(1) 1019/FFFFFFFFFFFF1510 : 1039 00A1 200F      .wait_pre:	move.b	(sysmcd_reg+mcd_comm_s).l,d0	; SUB got the a0?
(1) 1020/FFFFFFFFFFFF1516 : 0800 0006           		btst	#6,d0
(1) 1021/FFFFFFFFFFFF151A : 67F4                		beq.s	.wait_pre
(1) 1022/FFFFFFFFFFFF151C : 08F9 0007 00A1      		bset	#7,(sysmcd_reg+mcd_comm_m).l	; MAIN lock
         FFFFFFFFFFFF1522 : 200E             
(1) 1023/FFFFFFFFFFFF1524 : 1039 00A1 200F      .copy_ram:	move.b	(sysmcd_reg+mcd_comm_s).l,d0	; Sub is busy?
(1) 1024/FFFFFFFFFFFF152A : 0800 0006           		btst	#6,d0
(1) 1025/FFFFFFFFFFFF152E : 66F4                		bne.s	.copy_ram
(1) 1026/FFFFFFFFFFFF1530 : 2A4E                		move.l	a6,a5
(1) 1027/FFFFFFFFFFFF1532 : 3AD8                		move.w	(a0)+,(a5)+
(1) 1028/FFFFFFFFFFFF1534 : 3AD8                		move.w	(a0)+,(a5)+
(1) 1029/FFFFFFFFFFFF1536 : 3AD8                		move.w	(a0)+,(a5)+
(1) 1030/FFFFFFFFFFFF1538 : 3AD8                		move.w	(a0)+,(a5)+
(1) 1031/FFFFFFFFFFFF153A : 3AD8                		move.w	(a0)+,(a5)+
(1) 1032/FFFFFFFFFFFF153C : 3AD8                		move.w	(a0)+,(a5)+
(1) 1033/FFFFFFFFFFFF153E : 3AD8                		move.w	(a0)+,(a5)+
(1) 1034/FFFFFFFFFFFF1540 : 3AD8                		move.w	(a0)+,(a5)+
(1) 1035/FFFFFFFFFFFF1542 : 1039 00A1 200E      		move.b	(sysmcd_reg+mcd_comm_m).l,d0
(1) 1036/FFFFFFFFFFFF1548 : 08C0 0006           		bset	#6,d0
(1) 1037/FFFFFFFFFFFF154C : 13C0 00A1 200E      		move.b	d0,(sysmcd_reg+mcd_comm_m).l	; Set PASS bit
(1) 1038/FFFFFFFFFFFF1552 : 1039 00A1 200F      .wait_sub:	move.b	(sysmcd_reg+mcd_comm_s).l,d0	; Sub got the data?
(1) 1039/FFFFFFFFFFFF1558 : 0800 0006           		btst	#6,d0
(1) 1040/FFFFFFFFFFFF155C : 67F4                		beq.s	.wait_sub
(1) 1041/FFFFFFFFFFFF155E : 1039 00A1 200E      		move.b	(sysmcd_reg+mcd_comm_m).l,d0
(1) 1042/FFFFFFFFFFFF1564 : 0880 0006           		bclr	#6,d0
(1) 1043/FFFFFFFFFFFF1568 : 13C0 00A1 200E      		move.b	d0,(sysmcd_reg+mcd_comm_m).l	; Clear PASS bit
(1) 1044/FFFFFFFFFFFF156E : 51CE FFB4           		dbf	d6,.copy_ram
(1) 1045/FFFFFFFFFFFF1572 : 08B9 0007 00A1      		bclr	#7,(sysmcd_reg+mcd_comm_m).l	; UNLOCK
         FFFFFFFFFFFF1578 : 200E             
(1) 1046/FFFFFFFFFFFF157A : 4CDF 6081           		movem.l	(sp)+,d0/d7/a5-a6
(1) 1047/FFFFFFFFFFFF157E : 4E75                		rts
(1) 1048/FFFFFFFFFFFF1580 :                     
(1) 1049/FFFFFFFFFFFF1580 :                     ; ----------------------------------------------------------------
(1) 1050/FFFFFFFFFFFF1580 :                     
(1) 1052/FFFFFFFFFFFF1580 :                     
(1) 1053/FFFFFFFFFFFF1580 :                     ; ====================================================================
(1) 1054/FFFFFFFFFFFF1580 :                     ; ----------------------------------------------------------------
(1) 1055/FFFFFFFFFFFF1580 :                     ; 32X and CD32X ONLY
(1) 1056/FFFFFFFFFFFF1580 :                     ; ----------------------------------------------------------------
(1) 1057/FFFFFFFFFFFF1580 :                     
(1) 1202/FFFFFFFFFFFF1580 :                     
(1) 1203/FFFFFFFFFFFF1580 :                     ; ====================================================================
(1) 1204/FFFFFFFFFFFF1580 :                     ; ----------------------------------------------------------------
(1) 1205/FFFFFFFFFFFF1580 :                     ; Shared subs for the add-ons
(1) 1206/FFFFFFFFFFFF1580 :                     ; ----------------------------------------------------------------
(1) 1207/FFFFFFFFFFFF1580 :                     
(1) 1208/FFFFFFFFFFFF1580 :                     ; --------------------------------------------------------
(1) 1209/FFFFFFFFFFFF1580 :                     ; System_GrabRamCode
(1) 1210/FFFFFFFFFFFF1580 :                     ;
(1) 1211/FFFFFFFFFFFF1580 :                     ; Shared routine for MCD, 32X and CD32X.
(1) 1212/FFFFFFFFFFFF1580 :                     ;
(1) 1213/FFFFFFFFFFFF1580 :                     ; Send new code to the USER side of RAM and
(1) 1214/FFFFFFFFFFFF1580 :                     ; jumps into it.
(1) 1215/FFFFFFFFFFFF1580 :                     ;
(1) 1216/FFFFFFFFFFFF1580 :                     ; ** FOR SEGA CD/CD+32X
(1) 1217/FFFFFFFFFFFF1580 :                     ; Input:
(1) 1218/FFFFFFFFFFFF1580 :                     ; a0 - Filename string 8-bytes
(1) 1219/FFFFFFFFFFFF1580 :                     ;
(1) 1220/FFFFFFFFFFFF1580 :                     ; ** FOR SEGA 32X
(1) 1221/FFFFFFFFFFFF1580 :                     ; Input:
(1) 1222/FFFFFFFFFFFF1580 :                     ; a0 - Location of the RAM-code to copy from
(1) 1223/FFFFFFFFFFFF1580 :                     ;      in the $880000/$900000 areas
(1) 1224/FFFFFFFFFFFF1580 :                     ; --------------------------------------------------------
(1) 1225/FFFFFFFFFFFF1580 :                     
(1) 1226/FFFFFFFFFFFF1580 :                     System_GrabRamCode:
(1) 1228/FFFFFFFFFFFF1580 : 6100 FE6C           		bsr	System_McdSubWait
(1) 1229/FFFFFFFFFFFF1584 :                     		; a0 - filename string,0
(1) 1230/FFFFFFFFFFFF1584 : 43F9 FFFF 2000      		lea	(RAM_UserCode).l,a1
(1) 1231/FFFFFFFFFFFF158A : 303C 8000           		move.w	#(MAX_UserCode),d0
(1) 1232/FFFFFFFFFFFF158E : 6100 FEBA           		bsr	System_McdTrnsfr_RAM
(1) 1233/FFFFFFFFFFFF1592 : 6100 FE5A           		bsr	System_McdSubWait
(1) 1234/FFFFFFFFFFFF1596 : 4EF9 FFFF 2000      		jmp	(RAM_UserCode).l
(1) 1245/FFFFFFFFFFFF159C :                     
(1) 1246/FFFFFFFFFFFF159C :                     ; ====================================================================
(1) 1247/FFFFFFFFFFFF159C :                     
     194/FFFFFFFFFFFF159C :                     
     195/FFFFFFFFFFFF159C :                     ; ---------------------------------------------
     196/FFFFFFFFFFFF159C :                     ; Read screen modes
     197/FFFFFFFFFFFF159C :                     ;
     198/FFFFFFFFFFFF159C :                     ;   MD/Pico: Direct ROM jump
     199/FFFFFFFFFFFF159C :                     ; SCD/CD32X: Reads file from DISC and
     200/FFFFFFFFFFFF159C :                     ;            transfers code to RAM
     201/FFFFFFFFFFFF159C :                     ;       32X: Read from ROM and copies code to
     202/FFFFFFFFFFFF159C :                     ;            RAM so it's problematic with DMA
     203/FFFFFFFFFFFF159C :                     ;            and the SH2
     204/FFFFFFFFFFFF159C :                     ;
     205/FFFFFFFFFFFF159C :                     ; - Returning in your current screen code
     206/FFFFFFFFFFFF159C :                     ; will loop here and reload the entire
     207/FFFFFFFFFFFF159C :                     ; screen code.
     208/FFFFFFFFFFFF159C :                     ; - DO NOT JUMP TO SCREEN MODES DIRECTLY
     209/FFFFFFFFFFFF159C :                     ; ---------------------------------------------
     210/FFFFFFFFFFFF159C :                     
     211/FFFFFFFFFFFF159C :                     Md_ReadModes:
     212/FFFFFFFFFFFF159C : 007C 0700           		ori.w	#$0700,sr		; Disable interrupts
     213/FFFFFFFFFFFF15A0 : 7000                		moveq	#0,d0
     214/FFFFFFFFFFFF15A2 : 3038 C458           		move.w	(RAM_ScreenMode).w,d0
     215/FFFFFFFFFFFF15A6 : C07C 007F           		and.w	#$7F,d0			; <-- CURRENT LIMIT
     216/FFFFFFFFFFFF15AA : E948                		lsl.w	#4,d0			; * $10
     217/FFFFFFFFFFFF15AC : 41FB 000E           		lea	.pick_mode(pc,d0.w),a0	; LEA the filename
     219/FFFFFFFFFFFF15B0 : D0FC 0004           		adda	#4,a0
     220/FFFFFFFFFFFF15B4 : 4EB9 FFFF 1580      		jsr	(System_GrabRamCode).l
     228/FFFFFFFFFFFF15BA : 60E0                		bra.s	Md_ReadModes		; Loop on rts
     229/FFFFFFFFFFFF15BC :                     
     230/FFFFFFFFFFFF15BC :                     ; ---------------------------------------------
     231/FFFFFFFFFFFF15BC :                     ; ** ADD SCREEN MODES HERE **
     232/FFFFFFFFFFFF15BC :                     ;
     233/FFFFFFFFFFFF15BC :                     ; SegaCD/CD32X:
     234/FFFFFFFFFFFF15BC :                     ; DON'T FORGET to add the file to the
     235/FFFFFFFFFFFF15BC :                     ; ISO filelist.
     236/FFFFFFFFFFFF15BC :                     ; ---------------------------------------------
     237/FFFFFFFFFFFF15BC :                     
     238/FFFFFFFFFFFF15BC :                     .pick_mode:
     239/FFFFFFFFFFFF15BC : 0006 6800           		dc.l Md_Screen00	; Cartridge label *unused on CD
     240/FFFFFFFFFFFF15C0 : 5343 5245 454E      		dc.b "SCREEN00.BIN"	; ISO Filename *unused on Cartridge
         FFFFFFFFFFFF15C6 : 3030 2E42 494E    
     241/FFFFFFFFFFFF15CC : 0006 7000           		dc.l Md_Screen01
     242/FFFFFFFFFFFF15D0 : 5343 5245 454E      		dc.b "SCREEN01.BIN"
         FFFFFFFFFFFF15D6 : 3031 2E42 494E    
     243/FFFFFFFFFFFF15DC : 0006 6800           		dc.l Md_Screen00
     244/FFFFFFFFFFFF15E0 : 5343 5245 454E      		dc.b "SCREEN00.BIN"
         FFFFFFFFFFFF15E6 : 3030 2E42 494E    
     245/FFFFFFFFFFFF15EC : 0006 6800           		dc.l Md_Screen00
     246/FFFFFFFFFFFF15F0 : 5343 5245 454E      		dc.b "SCREEN00.BIN"
         FFFFFFFFFFFF15F6 : 3030 2E42 494E    
     247/FFFFFFFFFFFF15FC : 0006 6800           		dc.l Md_Screen00
     248/FFFFFFFFFFFF1600 :                     
     249/FFFFFFFFFFFF1600 :                     ; ---------------------------------------------
     250/FFFFFFFFFFFF1600 :                     
     252/FFFFFFFFFFFF1600 :                     .end:
     253/FFFFFFFFFFFF1600 : (MACRO)              		erreport "SYSTEM TOP RAM-CODE",(.end-RAM_SystemCode),MAX_SysCode
     254/FFFFFFFFFFFFC6CE :                     		dephase
     255/    4FCE :                     		phase (.end-RAM_SystemCode)+Md_SysCode
     257/    4FCE :                     Md_SysCode_e:
     258/    4FCE :                     		align 2
     259/    4FCE :                     
     260/    4FCE :                     ; ===========================================================================
     261/    4FCE :                     ; --------------------------------------------------------
     262/    4FCE :                     ; Z80 include on Cartridge ONLY (NOT on Disc)
     263/    4FCE :                     ; --------------------------------------------------------
     264/    4FCE :                     
     283/    4FCE :                     
     284/    4FCE :                     ; ===========================================================================
     285/    4FCE :                     ; ----------------------------------------------------------------
     286/    4FCE :                     ; DATA section shared on both Cartridge or Disc
     287/    4FCE :                     ; ----------------------------------------------------------------
     288/    4FCE :                     
     289/    4FCE :                     ; --------------------------------------------------------
     290/    4FCE :                     ; CD/CD32X ISO header and files
     291/    4FCE :                     ; --------------------------------------------------------
     292/    4FCE :                     
     294/    4FCE :                     		align $8000
     295/    8000 :                     ; 		dephase
     296/    8000 :                     		binclude "system/mcd/fshead.bin"	; Include ISO header
     297/    B800 : (MACRO)              		iso_setfs 0,IsoFileList,IsoFileList_e	; TWO pointers to the filelist:
     297/    B800 :                     .fstrt:
     297/    B800 : 22                                  dc.b .fend-.fstrt                               ; Block size
     297/    B801 : 00                                  dc.b 0                                          ; Zero
     297/    B802 : 1700                                dc.b (ISOFILELIST>>11&$FF),(ISOFILELIST>>19&$FF)            ; ISOFILELIST sector, little endian
     297/    B804 : 0000                                dc.b (ISOFILELIST>>27&$FF),(ISOFILELIST>>35&$FF)
     297/    B806 : 0000 0017                           dc.l ISOFILELIST>>11                                  ; ISOFILELIST sector, big endian
     297/    B80A : BC07                                dc.b ((ISOFILELIST_E-ISOFILELIST)&$FF),((ISOFILELIST_E-ISOFILELIST)>>8&$FF)     ; Filesize, little endian
     297/    B80C : 0000                                dc.b ((ISOFILELIST_E-ISOFILELIST)>>16&$FF),((ISOFILELIST_E-ISOFILELIST)>>24&$FF)
     297/    B80E : 0000 07BC                           dc.l ISOFILELIST_E-ISOFILELIST                                  ; Filesize, big endian
     297/    B812 : 7D                                  dc.b (2024-1900)+1                              ; Year
     297/    B813 : 0000 0000 0000                      dc.b 0,0,0,0,0,0                                ; **never done**
     297/    B819 : 02                                  dc.b 2                                          ; File flags
     297/    B81A : 0000                                dc.b 0,0
     297/    B81C : 0100                                dc.b 1,0                                        ; Volume sequence number, little
     297/    B81E : 0001                                dc.b 0,1                                        ; Volume sequence number, big
     297/    B820 : 0100                                dc.b 1,0
     297/    B822 :                     .fend:
     298/    B822 : (MACRO)              		iso_setfs 1,IsoFileList,IsoFileList_e
     298/    B822 :                     .fstrt:
     298/    B822 : 22                                  dc.b .fend-.fstrt                               ; Block size
     298/    B823 : 00                                  dc.b 0                                          ; Zero
     298/    B824 : 1700                                dc.b (ISOFILELIST>>11&$FF),(ISOFILELIST>>19&$FF)            ; ISOFILELIST sector, little endian
     298/    B826 : 0000                                dc.b (ISOFILELIST>>27&$FF),(ISOFILELIST>>35&$FF)
     298/    B828 : 0000 0017                           dc.l ISOFILELIST>>11                                  ; ISOFILELIST sector, big endian
     298/    B82C : BC07                                dc.b ((ISOFILELIST_E-ISOFILELIST)&$FF),((ISOFILELIST_E-ISOFILELIST)>>8&$FF)     ; Filesize, little endian
     298/    B82E : 0000                                dc.b ((ISOFILELIST_E-ISOFILELIST)>>16&$FF),((ISOFILELIST_E-ISOFILELIST)>>24&$FF)
     298/    B830 : 0000 07BC                           dc.l ISOFILELIST_E-ISOFILELIST                                  ; Filesize, big endian
     298/    B834 : 7D                                  dc.b (2024-1900)+1                              ; Year
     298/    B835 : 0000 0000 0000                      dc.b 0,0,0,0,0,0                                ; **never done**
     298/    B83B : 02                                  dc.b 2                                          ; File flags
     298/    B83C : 0000                                dc.b 0,0
     298/    B83E : 0100                                dc.b 1,0                                        ; Volume sequence number, little
     298/    B840 : 0001                                dc.b 0,1                                        ; Volume sequence number, big
     298/    B842 : 0101                                dc.b 1,1
     298/    B844 :                     .fend:
     299/    B844 :                     IsoFileList:
     300/    B844 : (MACRO)              		iso_file "SUB_DATA.BIN",MCD_SUBDATA,MCD_SUBDATA_e
     300/    B844 : 30                  .fstrt:         dc.b .fend-.fstrt                               ; Block size
     300/    B845 : 00                                  dc.b 0                                          ; zero
     300/    B846 : 1800                                dc.b (MCD_SUBDATA>>11&$FF),(MCD_SUBDATA>>19&$FF)            ; MCD_SUBDATA sector, little
     300/    B848 : 0000                                dc.b (MCD_SUBDATA>>27&$FF),(MCD_SUBDATA>>35&$FF)
     300/    B84A : 0000 0018                           dc.l MCD_SUBDATA>>11                                  ; MCD_SUBDATA sector, big
     300/    B84E : 00A8                                dc.b ((MCD_SUBDATA_E-MCD_SUBDATA)&$FF),((MCD_SUBDATA_E-MCD_SUBDATA)>>8&$FF)     ; Filesize, little
     300/    B850 : 0500                                dc.b ((MCD_SUBDATA_E-MCD_SUBDATA)>>16&$FF),((MCD_SUBDATA_E-MCD_SUBDATA)>>24&$FF)
     300/    B852 : 0005 A800                           dc.l MCD_SUBDATA_E-MCD_SUBDATA                                  ; Filesize, big
     300/    B856 : 7D                                  dc.b (2024-1900)+1                              ; Year
     300/    B857 : 0000 0000 0000                      dc.b 0,0,0,0,0,0                                ; TODO
     300/    B85D : 00                                  dc.b 0                                          ; File flags
     300/    B85E : 0000                                dc.b 0,0
     300/    B860 : 0100                                dc.b 1,0                                        ; Volume sequence number, little
     300/    B862 : 0001                                dc.b 0,1                                        ; Volume sequence number, big
     300/    B864 : 0E                                  dc.b .flend-.flen
     300/    B865 : 5355 425F 4441      .flen:          dc.b "SUB_DATA.BIN",";1"
             B86B : 5441 2E42 494E 
             B871 : 3B31             
     300/    B873 : 00                  .flend:         dc.b 0
     300/    B874 :                     .fend:
     301/    B874 : (MACRO)              		iso_file "MARSCODE.BIN",MARS_RAMCODE,MARS_RAMCODE_eof
     301/    B874 : 30                  .fstrt:         dc.b .fend-.fstrt                               ; Block size
     301/    B875 : 00                                  dc.b 0                                          ; zero
     301/    B876 : CD00                                dc.b (MARS_RAMCODE>>11&$FF),(MARS_RAMCODE>>19&$FF)            ; MARS_RAMCODE sector, little
     301/    B878 : 0000                                dc.b (MARS_RAMCODE>>27&$FF),(MARS_RAMCODE>>35&$FF)
     301/    B87A : 0000 00CD                           dc.l MARS_RAMCODE>>11                                  ; MARS_RAMCODE sector, big
     301/    B87E : 0000                                dc.b ((MARS_RAMCODE_EOF-MARS_RAMCODE)&$FF),((MARS_RAMCODE_EOF-MARS_RAMCODE)>>8&$FF)     ; Filesize, little
     301/    B880 : 0000                                dc.b ((MARS_RAMCODE_EOF-MARS_RAMCODE)>>16&$FF),((MARS_RAMCODE_EOF-MARS_RAMCODE)>>24&$FF)
     301/    B882 : 0000 0000                           dc.l MARS_RAMCODE_EOF-MARS_RAMCODE                                  ; Filesize, big
     301/    B886 : 7D                                  dc.b (2024-1900)+1                              ; Year
     301/    B887 : 0000 0000 0000                      dc.b 0,0,0,0,0,0                                ; TODO
     301/    B88D : 00                                  dc.b 0                                          ; File flags
     301/    B88E : 0000                                dc.b 0,0
     301/    B890 : 0100                                dc.b 1,0                                        ; Volume sequence number, little
     301/    B892 : 0001                                dc.b 0,1                                        ; Volume sequence number, big
     301/    B894 : 0E                                  dc.b .flend-.flen
     301/    B895 : 4D41 5253 434F      .flen:          dc.b "MARSCODE.BIN",";1"
             B89B : 4445 2E42 494E 
             B8A1 : 3B31             
     301/    B8A3 : 00                  .flend:         dc.b 0
     301/    B8A4 :                     .fend:
     302/    B8A4 : (MACRO)              		iso_file "SCREEN00.BIN",Md_Screen00,Md_Screen00_e
     302/    B8A4 : 30                  .fstrt:         dc.b .fend-.fstrt                               ; Block size
     302/    B8A5 : 00                                  dc.b 0                                          ; zero
     302/    B8A6 : CD00                                dc.b (MD_SCREEN00>>11&$FF),(MD_SCREEN00>>19&$FF)            ; MD_SCREEN00 sector, little
     302/    B8A8 : 0000                                dc.b (MD_SCREEN00>>27&$FF),(MD_SCREEN00>>35&$FF)
     302/    B8AA : 0000 00CD                           dc.l MD_SCREEN00>>11                                  ; MD_SCREEN00 sector, big
     302/    B8AE : 0008                                dc.b ((MD_SCREEN00_E-MD_SCREEN00)&$FF),((MD_SCREEN00_E-MD_SCREEN00)>>8&$FF)     ; Filesize, little
     302/    B8B0 : 0000                                dc.b ((MD_SCREEN00_E-MD_SCREEN00)>>16&$FF),((MD_SCREEN00_E-MD_SCREEN00)>>24&$FF)
     302/    B8B2 : 0000 0800                           dc.l MD_SCREEN00_E-MD_SCREEN00                                  ; Filesize, big
     302/    B8B6 : 7D                                  dc.b (2024-1900)+1                              ; Year
     302/    B8B7 : 0000 0000 0000                      dc.b 0,0,0,0,0,0                                ; TODO
     302/    B8BD : 00                                  dc.b 0                                          ; File flags
     302/    B8BE : 0000                                dc.b 0,0
     302/    B8C0 : 0100                                dc.b 1,0                                        ; Volume sequence number, little
     302/    B8C2 : 0001                                dc.b 0,1                                        ; Volume sequence number, big
     302/    B8C4 : 0E                                  dc.b .flend-.flen
     302/    B8C5 : 5343 5245 454E      .flen:          dc.b "SCREEN00.BIN",";1"
             B8CB : 3030 2E42 494E 
             B8D1 : 3B31             
     302/    B8D3 : 00                  .flend:         dc.b 0
     302/    B8D4 :                     .fend:
     303/    B8D4 : (MACRO)              		iso_file "DATABNKD.BIN",MCD_DBANK0,MCD_DBANK0_e
     303/    B8D4 : 30                  .fstrt:         dc.b .fend-.fstrt                               ; Block size
     303/    B8D5 : 00                                  dc.b 0                                          ; zero
     303/    B8D6 : CF00                                dc.b (MCD_DBANK0>>11&$FF),(MCD_DBANK0>>19&$FF)            ; MCD_DBANK0 sector, little
     303/    B8D8 : 0000                                dc.b (MCD_DBANK0>>27&$FF),(MCD_DBANK0>>35&$FF)
     303/    B8DA : 0000 00CF                           dc.l MCD_DBANK0>>11                                  ; MCD_DBANK0 sector, big
     303/    B8DE : 0090                                dc.b ((MCD_DBANK0_E-MCD_DBANK0)&$FF),((MCD_DBANK0_E-MCD_DBANK0)>>8&$FF)     ; Filesize, little
     303/    B8E0 : 0300                                dc.b ((MCD_DBANK0_E-MCD_DBANK0)>>16&$FF),((MCD_DBANK0_E-MCD_DBANK0)>>24&$FF)
     303/    B8E2 : 0003 9000                           dc.l MCD_DBANK0_E-MCD_DBANK0                                  ; Filesize, big
     303/    B8E6 : 7D                                  dc.b (2024-1900)+1                              ; Year
     303/    B8E7 : 0000 0000 0000                      dc.b 0,0,0,0,0,0                                ; TODO
     303/    B8ED : 00                                  dc.b 0                                          ; File flags
     303/    B8EE : 0000                                dc.b 0,0
     303/    B8F0 : 0100                                dc.b 1,0                                        ; Volume sequence number, little
     303/    B8F2 : 0001                                dc.b 0,1                                        ; Volume sequence number, big
     303/    B8F4 : 0E                                  dc.b .flend-.flen
     303/    B8F5 : 4441 5441 424E      .flen:          dc.b "DATABNKD.BIN",";1"
             B8FB : 4B44 2E42 494E 
             B901 : 3B31             
     303/    B903 : 00                  .flend:         dc.b 0
     303/    B904 :                     .fend:
     304/    B904 : (MACRO)              		iso_file "MARSD_00.BIN",MARSDATA_SCREEN00,MARSDATA_SCREEN00_E
     304/    B904 : 30                  .fstrt:         dc.b .fend-.fstrt                               ; Block size
     304/    B905 : 00                                  dc.b 0                                          ; zero
     304/    B906 : 4101                                dc.b (MARSDATA_SCREEN00>>11&$FF),(MARSDATA_SCREEN00>>19&$FF)            ; MARSDATA_SCREEN00 sector, little
     304/    B908 : 0000                                dc.b (MARSDATA_SCREEN00>>27&$FF),(MARSDATA_SCREEN00>>35&$FF)
     304/    B90A : 0000 0141                           dc.l MARSDATA_SCREEN00>>11                                  ; MARSDATA_SCREEN00 sector, big
     304/    B90E : 0018                                dc.b ((MARSDATA_SCREEN00_E-MARSDATA_SCREEN00)&$FF),((MARSDATA_SCREEN00_E-MARSDATA_SCREEN00)>>8&$FF)     ; Filesize, little
     304/    B910 : 0100                                dc.b ((MARSDATA_SCREEN00_E-MARSDATA_SCREEN00)>>16&$FF),((MARSDATA_SCREEN00_E-MARSDATA_SCREEN00)>>24&$FF)
     304/    B912 : 0001 1800                           dc.l MARSDATA_SCREEN00_E-MARSDATA_SCREEN00                                  ; Filesize, big
     304/    B916 : 7D                                  dc.b (2024-1900)+1                              ; Year
     304/    B917 : 0000 0000 0000                      dc.b 0,0,0,0,0,0                                ; TODO
     304/    B91D : 00                                  dc.b 0                                          ; File flags
     304/    B91E : 0000                                dc.b 0,0
     304/    B920 : 0100                                dc.b 1,0                                        ; Volume sequence number, little
     304/    B922 : 0001                                dc.b 0,1                                        ; Volume sequence number, big
     304/    B924 : 0E                                  dc.b .flend-.flen
     304/    B925 : 4D41 5253 445F      .flen:          dc.b "MARSD_00.BIN",";1"
             B92B : 3030 2E42 494E 
             B931 : 3B31             
     304/    B933 : 00                  .flend:         dc.b 0
     304/    B934 :                     .fend:
     305/    B934 :                     
     306/    B934 : (MACRO)              		iso_file "SCREEN01.BIN",Md_Screen01,Md_Screen01_e
     306/    B934 : 30                  .fstrt:         dc.b .fend-.fstrt                               ; Block size
     306/    B935 : 00                                  dc.b 0                                          ; zero
     306/    B936 : CE00                                dc.b (MD_SCREEN01>>11&$FF),(MD_SCREEN01>>19&$FF)            ; MD_SCREEN01 sector, little
     306/    B938 : 0000                                dc.b (MD_SCREEN01>>27&$FF),(MD_SCREEN01>>35&$FF)
     306/    B93A : 0000 00CE                           dc.l MD_SCREEN01>>11                                  ; MD_SCREEN01 sector, big
     306/    B93E : 0008                                dc.b ((MD_SCREEN01_E-MD_SCREEN01)&$FF),((MD_SCREEN01_E-MD_SCREEN01)>>8&$FF)     ; Filesize, little
     306/    B940 : 0000                                dc.b ((MD_SCREEN01_E-MD_SCREEN01)>>16&$FF),((MD_SCREEN01_E-MD_SCREEN01)>>24&$FF)
     306/    B942 : 0000 0800                           dc.l MD_SCREEN01_E-MD_SCREEN01                                  ; Filesize, big
     306/    B946 : 7D                                  dc.b (2024-1900)+1                              ; Year
     306/    B947 : 0000 0000 0000                      dc.b 0,0,0,0,0,0                                ; TODO
     306/    B94D : 00                                  dc.b 0                                          ; File flags
     306/    B94E : 0000                                dc.b 0,0
     306/    B950 : 0100                                dc.b 1,0                                        ; Volume sequence number, little
     306/    B952 : 0001                                dc.b 0,1                                        ; Volume sequence number, big
     306/    B954 : 0E                                  dc.b .flend-.flen
     306/    B955 : 5343 5245 454E      .flen:          dc.b "SCREEN01.BIN",";1"
             B95B : 3031 2E42 494E 
             B961 : 3B31             
     306/    B963 : 00                  .flend:         dc.b 0
     306/    B964 :                     .fend:
     307/    B964 :                     ; 		iso_file "DATABNKD.BIN",MCD_DBANK1,MCD_DBANK1_e
     308/    B964 : (MACRO)              		iso_file "MARSD_01.BIN",MARSDATA_SCREEN01,MARSDATA_SCREEN01_E
     308/    B964 : 30                  .fstrt:         dc.b .fend-.fstrt                               ; Block size
     308/    B965 : 00                                  dc.b 0                                          ; zero
     308/    B966 : 6401                                dc.b (MARSDATA_SCREEN01>>11&$FF),(MARSDATA_SCREEN01>>19&$FF)            ; MARSDATA_SCREEN01 sector, little
     308/    B968 : 0000                                dc.b (MARSDATA_SCREEN01>>27&$FF),(MARSDATA_SCREEN01>>35&$FF)
     308/    B96A : 0000 0164                           dc.l MARSDATA_SCREEN01>>11                                  ; MARSDATA_SCREEN01 sector, big
     308/    B96E : 0018                                dc.b ((MARSDATA_SCREEN01_E-MARSDATA_SCREEN01)&$FF),((MARSDATA_SCREEN01_E-MARSDATA_SCREEN01)>>8&$FF)     ; Filesize, little
     308/    B970 : 0100                                dc.b ((MARSDATA_SCREEN01_E-MARSDATA_SCREEN01)>>16&$FF),((MARSDATA_SCREEN01_E-MARSDATA_SCREEN01)>>24&$FF)
     308/    B972 : 0001 1800                           dc.l MARSDATA_SCREEN01_E-MARSDATA_SCREEN01                                  ; Filesize, big
     308/    B976 : 7D                                  dc.b (2024-1900)+1                              ; Year
     308/    B977 : 0000 0000 0000                      dc.b 0,0,0,0,0,0                                ; TODO
     308/    B97D : 00                                  dc.b 0                                          ; File flags
     308/    B97E : 0000                                dc.b 0,0
     308/    B980 : 0100                                dc.b 1,0                                        ; Volume sequence number, little
     308/    B982 : 0001                                dc.b 0,1                                        ; Volume sequence number, big
     308/    B984 : 0E                                  dc.b .flend-.flen
     308/    B985 : 4D41 5253 445F      .flen:          dc.b "MARSD_01.BIN",";1"
             B98B : 3031 2E42 494E 
             B991 : 3B31             
     308/    B993 : 00                  .flend:         dc.b 0
     308/    B994 :                     .fend:
     309/    B994 :                     		align $800
     310/    C000 :                     IsoFileList_e:
     312/    C000 :                     
     313/    C000 :                     ; ====================================================================
     314/    C000 :                     ; --------------------------------------------------------
     315/    C000 :                     ; SEGA CD SUB-CPU data
     316/    C000 :                     ; --------------------------------------------------------
     317/    C000 :                     
     319/    C000 :                     		align $800
     320/    C000 :                     MCD_SUBDATA:
     321/   20000 :                     		phase $20000			; <-- OUTPUT location on Sub-CPU area
     322/   20000 :                     		include "sound/smpl_pcm.asm"	; PCM samples
(1)    1/   20000 :                     ; ===========================================================================
(1)    2/   20000 :                     ; --------------------------------------------------------
(1)    3/   20000 :                     ; GEMA/Nikona PCM instruments for Sega CD
(1)    4/   20000 :                     ;
(1)    5/   20000 :                     ; Stored on DISC and loaded to Sub-CPU
(1)    6/   20000 :                     ;
(1)    7/   20000 :                     ; ** DO NOT LEAVE THIS SECTION EMPTY **
(1)    8/   20000 :                     ; --------------------------------------------------------
(1)    9/   20000 :                     
(1)   10/   20000 :                     	align $800
(1)   11/   20000 :                     ; 	gSmplData Label,"file",loop_start
(1)   12/   20000 : (MACRO)               	gSmplData PcmIns_techno_01,"sound/instr/smpl/techno/01.wav",0
(1)   12/   20000 : =$20000              PCMINS_TECHNO_01    label *
(1)   12/   20000 : 5427 00                     dc.b ((PCMINS_TECHNO_01_e-PCMINS_TECHNO_01_s)&$FF),(((PCMINS_TECHNO_01_e-PCMINS_TECHNO_01_s)>>8)&$FF),(((PCMINS_TECHNO_01_e-PCMINS_TECHNO_01_s)>>16)&$FF)
(1)   12/   20003 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   12/   20006 :                     PCMINS_TECHNO_01_s:
(1)   12/   20006 :                             binclude "sound/instr/smpl/techno/01.wav",$2C
(1)   12/   2275A :                     PCMINS_TECHNO_01_e:
(1)   13/   2275A : (MACRO)               	gSmplData PcmIns_techno_02,"sound/instr/smpl/techno/02.wav",0
(1)   13/   2275A : =$2275A              PCMINS_TECHNO_02    label *
(1)   13/   2275A : C24F 00                     dc.b ((PCMINS_TECHNO_02_e-PCMINS_TECHNO_02_s)&$FF),(((PCMINS_TECHNO_02_e-PCMINS_TECHNO_02_s)>>8)&$FF),(((PCMINS_TECHNO_02_e-PCMINS_TECHNO_02_s)>>16)&$FF)
(1)   13/   2275D : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   13/   22760 :                     PCMINS_TECHNO_02_s:
(1)   13/   22760 :                             binclude "sound/instr/smpl/techno/02.wav",$2C
(1)   13/   27722 :                     PCMINS_TECHNO_02_e:
(1)   14/   27722 : (MACRO)                	gSmplData PcmIns_techno_03,"sound/instr/smpl/techno/03.wav",0
(1)   14/   27722 : =$27722              PCMINS_TECHNO_03    label *
(1)   14/   27722 : 4613 00                     dc.b ((PCMINS_TECHNO_03_e-PCMINS_TECHNO_03_s)&$FF),(((PCMINS_TECHNO_03_e-PCMINS_TECHNO_03_s)>>8)&$FF),(((PCMINS_TECHNO_03_e-PCMINS_TECHNO_03_s)>>16)&$FF)
(1)   14/   27725 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   14/   27728 :                     PCMINS_TECHNO_03_s:
(1)   14/   27728 :                             binclude "sound/instr/smpl/techno/03.wav",$2C
(1)   14/   28A6E :                     PCMINS_TECHNO_03_e:
(1)   15/   28A6E : (MACRO)                	gSmplData PcmIns_techno_04,"sound/instr/smpl/techno/04.wav",0
(1)   15/   28A6E : =$28A6E              PCMINS_TECHNO_04    label *
(1)   15/   28A6E : 1E0E 00                     dc.b ((PCMINS_TECHNO_04_e-PCMINS_TECHNO_04_s)&$FF),(((PCMINS_TECHNO_04_e-PCMINS_TECHNO_04_s)>>8)&$FF),(((PCMINS_TECHNO_04_e-PCMINS_TECHNO_04_s)>>16)&$FF)
(1)   15/   28A71 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   15/   28A74 :                     PCMINS_TECHNO_04_s:
(1)   15/   28A74 :                             binclude "sound/instr/smpl/techno/04.wav",$2C
(1)   15/   29892 :                     PCMINS_TECHNO_04_e:
(1)   16/   29892 : (MACRO)               	gSmplData PcmIns_techno_05,"sound/instr/smpl/techno/05.wav",0
(1)   16/   29892 : =$29892              PCMINS_TECHNO_05    label *
(1)   16/   29892 : 0A3C 00                     dc.b ((PCMINS_TECHNO_05_e-PCMINS_TECHNO_05_s)&$FF),(((PCMINS_TECHNO_05_e-PCMINS_TECHNO_05_s)>>8)&$FF),(((PCMINS_TECHNO_05_e-PCMINS_TECHNO_05_s)>>16)&$FF)
(1)   16/   29895 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   16/   29898 :                     PCMINS_TECHNO_05_s:
(1)   16/   29898 :                             binclude "sound/instr/smpl/techno/05.wav",$2C
(1)   16/   2D4A2 :                     PCMINS_TECHNO_05_e:
(1)   17/   2D4A2 : (MACRO)                	gSmplData PcmIns_techno_06,"sound/instr/smpl/techno/06.wav",53501
(1)   17/   2D4A2 : =$2D4A2              PCMINS_TECHNO_06    label *
(1)   17/   2D4A2 : 40E0 00                     dc.b ((PCMINS_TECHNO_06_e-PCMINS_TECHNO_06_s)&$FF),(((PCMINS_TECHNO_06_e-PCMINS_TECHNO_06_s)>>8)&$FF),(((PCMINS_TECHNO_06_e-PCMINS_TECHNO_06_s)>>16)&$FF)
(1)   17/   2D4A5 : FDD0 00                     dc.b ((53501)&$FF),(((53501)>>8)&$FF),(((53501)>>16)&$FF)
(1)   17/   2D4A8 :                     PCMINS_TECHNO_06_s:
(1)   17/   2D4A8 :                             binclude "sound/instr/smpl/techno/06.wav",$2C
(1)   17/   3B4E8 :                     PCMINS_TECHNO_06_e:
(1)   18/   3B4E8 : (MACRO)               	gSmplData PcmIns_techno_07,"sound/instr/smpl/techno/07.wav",11812
(1)   18/   3B4E8 : =$3B4E8              PCMINS_TECHNO_07    label *
(1)   18/   3B4E8 : F854 00                     dc.b ((PCMINS_TECHNO_07_e-PCMINS_TECHNO_07_s)&$FF),(((PCMINS_TECHNO_07_e-PCMINS_TECHNO_07_s)>>8)&$FF),(((PCMINS_TECHNO_07_e-PCMINS_TECHNO_07_s)>>16)&$FF)
(1)   18/   3B4EB : 242E 00                     dc.b ((11812)&$FF),(((11812)>>8)&$FF),(((11812)>>16)&$FF)
(1)   18/   3B4EE :                     PCMINS_TECHNO_07_s:
(1)   18/   3B4EE :                             binclude "sound/instr/smpl/techno/07.wav",$2C
(1)   18/   409E6 :                     PCMINS_TECHNO_07_e:
(1)   19/   409E6 : (MACRO)                	gSmplData PcmIns_techno_08,"sound/instr/smpl/techno/08.wav",456
(1)   19/   409E6 : =$409E6              PCMINS_TECHNO_08    label *
(1)   19/   409E6 : 1A31 00                     dc.b ((PCMINS_TECHNO_08_e-PCMINS_TECHNO_08_s)&$FF),(((PCMINS_TECHNO_08_e-PCMINS_TECHNO_08_s)>>8)&$FF),(((PCMINS_TECHNO_08_e-PCMINS_TECHNO_08_s)>>16)&$FF)
(1)   19/   409E9 : C801 00                     dc.b ((456)&$FF),(((456)>>8)&$FF),(((456)>>16)&$FF)
(1)   19/   409EC :                     PCMINS_TECHNO_08_s:
(1)   19/   409EC :                             binclude "sound/instr/smpl/techno/08.wav",$2C
(1)   19/   43B06 :                     PCMINS_TECHNO_08_e:
(1)   20/   43B06 : (MACRO)               	gSmplData PcmIns_techno_09,"sound/instr/smpl/techno/09.wav",728
(1)   20/   43B06 : =$43B06              PCMINS_TECHNO_09    label *
(1)   20/   43B06 : BA32 00                     dc.b ((PCMINS_TECHNO_09_e-PCMINS_TECHNO_09_s)&$FF),(((PCMINS_TECHNO_09_e-PCMINS_TECHNO_09_s)>>8)&$FF),(((PCMINS_TECHNO_09_e-PCMINS_TECHNO_09_s)>>16)&$FF)
(1)   20/   43B09 : D802 00                     dc.b ((728)&$FF),(((728)>>8)&$FF),(((728)>>16)&$FF)
(1)   20/   43B0C :                     PCMINS_TECHNO_09_s:
(1)   20/   43B0C :                             binclude "sound/instr/smpl/techno/09.wav",$2C
(1)   20/   46DC6 :                     PCMINS_TECHNO_09_e:
(1)   21/   46DC6 : (MACRO)                	gSmplData PcmIns_techno_10,"sound/instr/smpl/techno/10.wav",132
(1)   21/   46DC6 : =$46DC6              PCMINS_TECHNO_10    label *
(1)   21/   46DC6 : 5634 00                     dc.b ((PCMINS_TECHNO_10_e-PCMINS_TECHNO_10_s)&$FF),(((PCMINS_TECHNO_10_e-PCMINS_TECHNO_10_s)>>8)&$FF),(((PCMINS_TECHNO_10_e-PCMINS_TECHNO_10_s)>>16)&$FF)
(1)   21/   46DC9 : 8400 00                     dc.b ((132)&$FF),(((132)>>8)&$FF),(((132)>>16)&$FF)
(1)   21/   46DCC :                     PCMINS_TECHNO_10_s:
(1)   21/   46DCC :                             binclude "sound/instr/smpl/techno/10.wav",$2C
(1)   21/   4A222 :                     PCMINS_TECHNO_10_e:
(1)   22/   4A222 : (MACRO)                	gSmplData PcmIns_techno_11,"sound/instr/smpl/techno/11.wav",0
(1)   22/   4A222 : =$4A222              PCMINS_TECHNO_11    label *
(1)   22/   4A222 : 5A41 00                     dc.b ((PCMINS_TECHNO_11_e-PCMINS_TECHNO_11_s)&$FF),(((PCMINS_TECHNO_11_e-PCMINS_TECHNO_11_s)>>8)&$FF),(((PCMINS_TECHNO_11_e-PCMINS_TECHNO_11_s)>>16)&$FF)
(1)   22/   4A225 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   22/   4A228 :                     PCMINS_TECHNO_11_s:
(1)   22/   4A228 :                             binclude "sound/instr/smpl/techno/11.wav",$2C
(1)   22/   4E382 :                     PCMINS_TECHNO_11_e:
(1)   23/   4E382 :                     
(1)   24/   4E382 : (MACRO)              	gSmplData PcmIns_astral_01,"sound/instr/smpl/astral/01.wav",5812
(1)   24/   4E382 : =$4E382              PCMINS_ASTRAL_01    label *
(1)   24/   4E382 : 8B20 00                     dc.b ((PCMINS_ASTRAL_01_e-PCMINS_ASTRAL_01_s)&$FF),(((PCMINS_ASTRAL_01_e-PCMINS_ASTRAL_01_s)>>8)&$FF),(((PCMINS_ASTRAL_01_e-PCMINS_ASTRAL_01_s)>>16)&$FF)
(1)   24/   4E385 : B416 00                     dc.b ((5812)&$FF),(((5812)>>8)&$FF),(((5812)>>16)&$FF)
(1)   24/   4E388 :                     PCMINS_ASTRAL_01_s:
(1)   24/   4E388 :                             binclude "sound/instr/smpl/astral/01.wav",$2C
(1)   24/   50413 :                     PCMINS_ASTRAL_01_e:
(1)   25/   50413 : (MACRO)               	gSmplData PcmIns_astral_02,"sound/instr/smpl/astral/02.wav",6384
(1)   25/   50413 : =$50413              PCMINS_ASTRAL_02    label *
(1)   25/   50413 : 8821 00                     dc.b ((PCMINS_ASTRAL_02_e-PCMINS_ASTRAL_02_s)&$FF),(((PCMINS_ASTRAL_02_e-PCMINS_ASTRAL_02_s)>>8)&$FF),(((PCMINS_ASTRAL_02_e-PCMINS_ASTRAL_02_s)>>16)&$FF)
(1)   25/   50416 : F018 00                     dc.b ((6384)&$FF),(((6384)>>8)&$FF),(((6384)>>16)&$FF)
(1)   25/   50419 :                     PCMINS_ASTRAL_02_s:
(1)   25/   50419 :                             binclude "sound/instr/smpl/astral/02.wav",$2C
(1)   25/   525A1 :                     PCMINS_ASTRAL_02_e:
(1)   26/   525A1 : (MACRO)                	gSmplData PcmIns_astral_03,"sound/instr/smpl/astral/03.wav",0
(1)   26/   525A1 : =$525A1              PCMINS_ASTRAL_03    label *
(1)   26/   525A1 : D018 00                     dc.b ((PCMINS_ASTRAL_03_e-PCMINS_ASTRAL_03_s)&$FF),(((PCMINS_ASTRAL_03_e-PCMINS_ASTRAL_03_s)>>8)&$FF),(((PCMINS_ASTRAL_03_e-PCMINS_ASTRAL_03_s)>>16)&$FF)
(1)   26/   525A4 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   26/   525A7 :                     PCMINS_ASTRAL_03_s:
(1)   26/   525A7 :                             binclude "sound/instr/smpl/astral/03.wav",$2C
(1)   26/   53E77 :                     PCMINS_ASTRAL_03_e:
(1)   27/   53E77 : (MACRO)                	gSmplData PcmIns_astral_04,"sound/instr/smpl/astral/04.wav",0
(1)   27/   53E77 : =$53E77              PCMINS_ASTRAL_04    label *
(1)   27/   53E77 : 0C06 00                     dc.b ((PCMINS_ASTRAL_04_e-PCMINS_ASTRAL_04_s)&$FF),(((PCMINS_ASTRAL_04_e-PCMINS_ASTRAL_04_s)>>8)&$FF),(((PCMINS_ASTRAL_04_e-PCMINS_ASTRAL_04_s)>>16)&$FF)
(1)   27/   53E7A : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   27/   53E7D :                     PCMINS_ASTRAL_04_s:
(1)   27/   53E7D :                             binclude "sound/instr/smpl/astral/04.wav",$2C
(1)   27/   54489 :                     PCMINS_ASTRAL_04_e:
(1)   28/   54489 : (MACRO)               	gSmplData PcmIns_astral_05,"sound/instr/smpl/astral/05.wav",0
(1)   28/   54489 : =$54489              PCMINS_ASTRAL_05    label *
(1)   28/   54489 : A002 00                     dc.b ((PCMINS_ASTRAL_05_e-PCMINS_ASTRAL_05_s)&$FF),(((PCMINS_ASTRAL_05_e-PCMINS_ASTRAL_05_s)>>8)&$FF),(((PCMINS_ASTRAL_05_e-PCMINS_ASTRAL_05_s)>>16)&$FF)
(1)   28/   5448C : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   28/   5448F :                     PCMINS_ASTRAL_05_s:
(1)   28/   5448F :                             binclude "sound/instr/smpl/astral/05.wav",$2C
(1)   28/   5472F :                     PCMINS_ASTRAL_05_e:
(1)   29/   5472F : (MACRO)                	gSmplData PcmIns_astral_06,"sound/instr/smpl/astral/06.wav",0
(1)   29/   5472F : =$5472F              PCMINS_ASTRAL_06    label *
(1)   29/   5472F : 710D 00                     dc.b ((PCMINS_ASTRAL_06_e-PCMINS_ASTRAL_06_s)&$FF),(((PCMINS_ASTRAL_06_e-PCMINS_ASTRAL_06_s)>>8)&$FF),(((PCMINS_ASTRAL_06_e-PCMINS_ASTRAL_06_s)>>16)&$FF)
(1)   29/   54732 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   29/   54735 :                     PCMINS_ASTRAL_06_s:
(1)   29/   54735 :                             binclude "sound/instr/smpl/astral/06.wav",$2C
(1)   29/   554A6 :                     PCMINS_ASTRAL_06_e:
(1)   30/   554A6 : (MACRO)               	gSmplData PcmIns_astral_07,"sound/instr/smpl/astral/07.wav",0
(1)   30/   554A6 : =$554A6              PCMINS_ASTRAL_07    label *
(1)   30/   554A6 : DD08 00                     dc.b ((PCMINS_ASTRAL_07_e-PCMINS_ASTRAL_07_s)&$FF),(((PCMINS_ASTRAL_07_e-PCMINS_ASTRAL_07_s)>>8)&$FF),(((PCMINS_ASTRAL_07_e-PCMINS_ASTRAL_07_s)>>16)&$FF)
(1)   30/   554A9 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   30/   554AC :                     PCMINS_ASTRAL_07_s:
(1)   30/   554AC :                             binclude "sound/instr/smpl/astral/07.wav",$2C
(1)   30/   55D89 :                     PCMINS_ASTRAL_07_e:
(1)   31/   55D89 : (MACRO)                	gSmplData PcmIns_astral_08,"sound/instr/smpl/astral/08.wav",0
(1)   31/   55D89 : =$55D89              PCMINS_ASTRAL_08    label *
(1)   31/   55D89 : 2E15 00                     dc.b ((PCMINS_ASTRAL_08_e-PCMINS_ASTRAL_08_s)&$FF),(((PCMINS_ASTRAL_08_e-PCMINS_ASTRAL_08_s)>>8)&$FF),(((PCMINS_ASTRAL_08_e-PCMINS_ASTRAL_08_s)>>16)&$FF)
(1)   31/   55D8C : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   31/   55D8F :                     PCMINS_ASTRAL_08_s:
(1)   31/   55D8F :                             binclude "sound/instr/smpl/astral/08.wav",$2C
(1)   31/   572BD :                     PCMINS_ASTRAL_08_e:
(1)   32/   572BD : (MACRO)               	gSmplData PcmIns_astral_09,"sound/instr/smpl/astral/09.wav",0
(1)   32/   572BD : =$572BD              PCMINS_ASTRAL_09    label *
(1)   32/   572BD : 6D0B 00                     dc.b ((PCMINS_ASTRAL_09_e-PCMINS_ASTRAL_09_s)&$FF),(((PCMINS_ASTRAL_09_e-PCMINS_ASTRAL_09_s)>>8)&$FF),(((PCMINS_ASTRAL_09_e-PCMINS_ASTRAL_09_s)>>16)&$FF)
(1)   32/   572C0 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   32/   572C3 :                     PCMINS_ASTRAL_09_s:
(1)   32/   572C3 :                             binclude "sound/instr/smpl/astral/09.wav",$2C
(1)   32/   57E30 :                     PCMINS_ASTRAL_09_e:
(1)   33/   57E30 : (MACRO)              	gSmplData PcmIns_astral_10,"sound/instr/smpl/astral/10.wav",0
(1)   33/   57E30 : =$57E30              PCMINS_ASTRAL_10    label *
(1)   33/   57E30 : 040C 00                     dc.b ((PCMINS_ASTRAL_10_e-PCMINS_ASTRAL_10_s)&$FF),(((PCMINS_ASTRAL_10_e-PCMINS_ASTRAL_10_s)>>8)&$FF),(((PCMINS_ASTRAL_10_e-PCMINS_ASTRAL_10_s)>>16)&$FF)
(1)   33/   57E33 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   33/   57E36 :                     PCMINS_ASTRAL_10_s:
(1)   33/   57E36 :                             binclude "sound/instr/smpl/astral/10.wav",$2C
(1)   33/   58A3A :                     PCMINS_ASTRAL_10_e:
(1)   34/   58A3A : (MACRO)              	gSmplData PcmIns_astral_11,"sound/instr/smpl/astral/11.wav",0
(1)   34/   58A3A : =$58A3A              PCMINS_ASTRAL_11    label *
(1)   34/   58A3A : DC1D 00                     dc.b ((PCMINS_ASTRAL_11_e-PCMINS_ASTRAL_11_s)&$FF),(((PCMINS_ASTRAL_11_e-PCMINS_ASTRAL_11_s)>>8)&$FF),(((PCMINS_ASTRAL_11_e-PCMINS_ASTRAL_11_s)>>16)&$FF)
(1)   34/   58A3D : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   34/   58A40 :                     PCMINS_ASTRAL_11_s:
(1)   34/   58A40 :                             binclude "sound/instr/smpl/astral/11.wav",$2C
(1)   34/   5A81C :                     PCMINS_ASTRAL_11_e:
(1)   35/   5A81C : (MACRO)               	gSmplData PcmIns_astral_12,"sound/instr/smpl/astral/12.wav",0
(1)   35/   5A81C : =$5A81C              PCMINS_ASTRAL_12    label *
(1)   35/   5A81C : D80C 00                     dc.b ((PCMINS_ASTRAL_12_e-PCMINS_ASTRAL_12_s)&$FF),(((PCMINS_ASTRAL_12_e-PCMINS_ASTRAL_12_s)>>8)&$FF),(((PCMINS_ASTRAL_12_e-PCMINS_ASTRAL_12_s)>>16)&$FF)
(1)   35/   5A81F : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   35/   5A822 :                     PCMINS_ASTRAL_12_s:
(1)   35/   5A822 :                             binclude "sound/instr/smpl/astral/12.wav",$2C
(1)   35/   5B4FA :                     PCMINS_ASTRAL_12_e:
(1)   36/   5B4FA : (MACRO)                	gSmplData PcmIns_astral_13,"sound/instr/smpl/astral/13.wav",0
(1)   36/   5B4FA : =$5B4FA              PCMINS_ASTRAL_13    label *
(1)   36/   5B4FA : 8A0D 00                     dc.b ((PCMINS_ASTRAL_13_e-PCMINS_ASTRAL_13_s)&$FF),(((PCMINS_ASTRAL_13_e-PCMINS_ASTRAL_13_s)>>8)&$FF),(((PCMINS_ASTRAL_13_e-PCMINS_ASTRAL_13_s)>>16)&$FF)
(1)   36/   5B4FD : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   36/   5B500 :                     PCMINS_ASTRAL_13_s:
(1)   36/   5B500 :                             binclude "sound/instr/smpl/astral/13.wav",$2C
(1)   36/   5C28A :                     PCMINS_ASTRAL_13_e:
(1)   37/   5C28A : (MACRO)                	gSmplData PcmIns_astral_14,"sound/instr/smpl/astral/14.wav",0
(1)   37/   5C28A : =$5C28A              PCMINS_ASTRAL_14    label *
(1)   37/   5C28A : 852C 00                     dc.b ((PCMINS_ASTRAL_14_e-PCMINS_ASTRAL_14_s)&$FF),(((PCMINS_ASTRAL_14_e-PCMINS_ASTRAL_14_s)>>8)&$FF),(((PCMINS_ASTRAL_14_e-PCMINS_ASTRAL_14_s)>>16)&$FF)
(1)   37/   5C28D : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   37/   5C290 :                     PCMINS_ASTRAL_14_s:
(1)   37/   5C290 :                             binclude "sound/instr/smpl/astral/14.wav",$2C
(1)   37/   5EF15 :                     PCMINS_ASTRAL_14_e:
(1)   38/   5EF15 : (MACRO)               	gSmplData PcmIns_astral_15,"sound/instr/smpl/astral/15.wav",0
(1)   38/   5EF15 : =$5EF15              PCMINS_ASTRAL_15    label *
(1)   38/   5EF15 : 0C0D 00                     dc.b ((PCMINS_ASTRAL_15_e-PCMINS_ASTRAL_15_s)&$FF),(((PCMINS_ASTRAL_15_e-PCMINS_ASTRAL_15_s)>>8)&$FF),(((PCMINS_ASTRAL_15_e-PCMINS_ASTRAL_15_s)>>16)&$FF)
(1)   38/   5EF18 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   38/   5EF1B :                     PCMINS_ASTRAL_15_s:
(1)   38/   5EF1B :                             binclude "sound/instr/smpl/astral/15.wav",$2C
(1)   38/   5FC27 :                     PCMINS_ASTRAL_15_e:
(1)   39/   5FC27 : (MACRO)                	gSmplData PcmIns_astral_16,"sound/instr/smpl/astral/16.wav",0
(1)   39/   5FC27 : =$5FC27              PCMINS_ASTRAL_16    label *
(1)   39/   5FC27 : 990B 00                     dc.b ((PCMINS_ASTRAL_16_e-PCMINS_ASTRAL_16_s)&$FF),(((PCMINS_ASTRAL_16_e-PCMINS_ASTRAL_16_s)>>8)&$FF),(((PCMINS_ASTRAL_16_e-PCMINS_ASTRAL_16_s)>>16)&$FF)
(1)   39/   5FC2A : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   39/   5FC2D :                     PCMINS_ASTRAL_16_s:
(1)   39/   5FC2D :                             binclude "sound/instr/smpl/astral/16.wav",$2C
(1)   39/   607C6 :                     PCMINS_ASTRAL_16_e:
(1)   40/   607C6 : (MACRO)               	gSmplData PcmIns_astral_17,"sound/instr/smpl/astral/17.wav",0
(1)   40/   607C6 : =$607C6              PCMINS_ASTRAL_17    label *
(1)   40/   607C6 : A90B 00                     dc.b ((PCMINS_ASTRAL_17_e-PCMINS_ASTRAL_17_s)&$FF),(((PCMINS_ASTRAL_17_e-PCMINS_ASTRAL_17_s)>>8)&$FF),(((PCMINS_ASTRAL_17_e-PCMINS_ASTRAL_17_s)>>16)&$FF)
(1)   40/   607C9 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   40/   607CC :                     PCMINS_ASTRAL_17_s:
(1)   40/   607CC :                             binclude "sound/instr/smpl/astral/17.wav",$2C
(1)   40/   61375 :                     PCMINS_ASTRAL_17_e:
(1)   41/   61375 : (MACRO)                	gSmplData PcmIns_astral_18,"sound/instr/smpl/astral/18.wav",0
(1)   41/   61375 : =$61375              PCMINS_ASTRAL_18    label *
(1)   41/   61375 : AA02 00                     dc.b ((PCMINS_ASTRAL_18_e-PCMINS_ASTRAL_18_s)&$FF),(((PCMINS_ASTRAL_18_e-PCMINS_ASTRAL_18_s)>>8)&$FF),(((PCMINS_ASTRAL_18_e-PCMINS_ASTRAL_18_s)>>16)&$FF)
(1)   41/   61378 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   41/   6137B :                     PCMINS_ASTRAL_18_s:
(1)   41/   6137B :                             binclude "sound/instr/smpl/astral/18.wav",$2C
(1)   41/   61625 :                     PCMINS_ASTRAL_18_e:
(1)   42/   61625 : (MACRO)               	gSmplData PcmIns_astral_19,"sound/instr/smpl/astral/19.wav",432
(1)   42/   61625 : =$61625              PCMINS_ASTRAL_19    label *
(1)   42/   61625 : 1819 00                     dc.b ((PCMINS_ASTRAL_19_e-PCMINS_ASTRAL_19_s)&$FF),(((PCMINS_ASTRAL_19_e-PCMINS_ASTRAL_19_s)>>8)&$FF),(((PCMINS_ASTRAL_19_e-PCMINS_ASTRAL_19_s)>>16)&$FF)
(1)   42/   61628 : B001 00                     dc.b ((432)&$FF),(((432)>>8)&$FF),(((432)>>16)&$FF)
(1)   42/   6162B :                     PCMINS_ASTRAL_19_s:
(1)   42/   6162B :                             binclude "sound/instr/smpl/astral/19.wav",$2C
(1)   42/   62F43 :                     PCMINS_ASTRAL_19_e:
(1)   43/   62F43 : (MACRO)                	gSmplData PcmIns_astral_20,"sound/instr/smpl/astral/20.wav",250
(1)   43/   62F43 : =$62F43              PCMINS_ASTRAL_20    label *
(1)   43/   62F43 : FF16 00                     dc.b ((PCMINS_ASTRAL_20_e-PCMINS_ASTRAL_20_s)&$FF),(((PCMINS_ASTRAL_20_e-PCMINS_ASTRAL_20_s)>>8)&$FF),(((PCMINS_ASTRAL_20_e-PCMINS_ASTRAL_20_s)>>16)&$FF)
(1)   43/   62F46 : FA00 00                     dc.b ((250)&$FF),(((250)>>8)&$FF),(((250)>>16)&$FF)
(1)   43/   62F49 :                     PCMINS_ASTRAL_20_s:
(1)   43/   62F49 :                             binclude "sound/instr/smpl/astral/20.wav",$2C
(1)   43/   64648 :                     PCMINS_ASTRAL_20_e:
(1)   44/   64648 : (MACRO)              	gSmplData PcmIns_astral_21,"sound/instr/smpl/astral/21.wav",6386
(1)   44/   64648 : =$64648              PCMINS_ASTRAL_21    label *
(1)   44/   64648 : 4530 00                     dc.b ((PCMINS_ASTRAL_21_e-PCMINS_ASTRAL_21_s)&$FF),(((PCMINS_ASTRAL_21_e-PCMINS_ASTRAL_21_s)>>8)&$FF),(((PCMINS_ASTRAL_21_e-PCMINS_ASTRAL_21_s)>>16)&$FF)
(1)   44/   6464B : F218 00                     dc.b ((6386)&$FF),(((6386)>>8)&$FF),(((6386)>>16)&$FF)
(1)   44/   6464E :                     PCMINS_ASTRAL_21_s:
(1)   44/   6464E :                             binclude "sound/instr/smpl/astral/21.wav",$2C
(1)   44/   67693 :                     PCMINS_ASTRAL_21_e:
(1)   45/   67693 : (MACRO)               	gSmplData PcmIns_astral_22,"sound/instr/smpl/astral/22.wav",0
(1)   45/   67693 : =$67693              PCMINS_ASTRAL_22    label *
(1)   45/   67693 : 060A 00                     dc.b ((PCMINS_ASTRAL_22_e-PCMINS_ASTRAL_22_s)&$FF),(((PCMINS_ASTRAL_22_e-PCMINS_ASTRAL_22_s)>>8)&$FF),(((PCMINS_ASTRAL_22_e-PCMINS_ASTRAL_22_s)>>16)&$FF)
(1)   45/   67696 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   45/   67699 :                     PCMINS_ASTRAL_22_s:
(1)   45/   67699 :                             binclude "sound/instr/smpl/astral/22.wav",$2C
(1)   45/   6809F :                     PCMINS_ASTRAL_22_e:
(1)   46/   6809F : (MACRO)                	gSmplData PcmIns_astral_23,"sound/instr/smpl/astral/23.wav",0
(1)   46/   6809F : =$6809F              PCMINS_ASTRAL_23    label *
(1)   46/   6809F : 3303 00                     dc.b ((PCMINS_ASTRAL_23_e-PCMINS_ASTRAL_23_s)&$FF),(((PCMINS_ASTRAL_23_e-PCMINS_ASTRAL_23_s)>>8)&$FF),(((PCMINS_ASTRAL_23_e-PCMINS_ASTRAL_23_s)>>16)&$FF)
(1)   46/   680A2 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   46/   680A5 :                     PCMINS_ASTRAL_23_s:
(1)   46/   680A5 :                             binclude "sound/instr/smpl/astral/23.wav",$2C
(1)   46/   683D8 :                     PCMINS_ASTRAL_23_e:
(1)   47/   683D8 : (MACRO)                	gSmplData PcmIns_astral_24,"sound/instr/smpl/astral/24.wav",0
(1)   47/   683D8 : =$683D8              PCMINS_ASTRAL_24    label *
(1)   47/   683D8 : DE02 00                     dc.b ((PCMINS_ASTRAL_24_e-PCMINS_ASTRAL_24_s)&$FF),(((PCMINS_ASTRAL_24_e-PCMINS_ASTRAL_24_s)>>8)&$FF),(((PCMINS_ASTRAL_24_e-PCMINS_ASTRAL_24_s)>>16)&$FF)
(1)   47/   683DB : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   47/   683DE :                     PCMINS_ASTRAL_24_s:
(1)   47/   683DE :                             binclude "sound/instr/smpl/astral/24.wav",$2C
(1)   47/   686BC :                     PCMINS_ASTRAL_24_e:
(1)   48/   686BC : (MACRO)               	gSmplData PcmIns_astral_25,"sound/instr/smpl/astral/25.wav",0
(1)   48/   686BC : =$686BC              PCMINS_ASTRAL_25    label *
(1)   48/   686BC : 4E08 00                     dc.b ((PCMINS_ASTRAL_25_e-PCMINS_ASTRAL_25_s)&$FF),(((PCMINS_ASTRAL_25_e-PCMINS_ASTRAL_25_s)>>8)&$FF),(((PCMINS_ASTRAL_25_e-PCMINS_ASTRAL_25_s)>>16)&$FF)
(1)   48/   686BF : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   48/   686C2 :                     PCMINS_ASTRAL_25_s:
(1)   48/   686C2 :                             binclude "sound/instr/smpl/astral/25.wav",$2C
(1)   48/   68F10 :                     PCMINS_ASTRAL_25_e:
(1)   49/   68F10 : (MACRO)               	gSmplData PcmIns_astral_26,"sound/instr/smpl/astral/26.wav",0
(1)   49/   68F10 : =$68F10              PCMINS_ASTRAL_26    label *
(1)   49/   68F10 : 0A16 00                     dc.b ((PCMINS_ASTRAL_26_e-PCMINS_ASTRAL_26_s)&$FF),(((PCMINS_ASTRAL_26_e-PCMINS_ASTRAL_26_s)>>8)&$FF),(((PCMINS_ASTRAL_26_e-PCMINS_ASTRAL_26_s)>>16)&$FF)
(1)   49/   68F13 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   49/   68F16 :                     PCMINS_ASTRAL_26_s:
(1)   49/   68F16 :                             binclude "sound/instr/smpl/astral/26.wav",$2C
(1)   49/   6A520 :                     PCMINS_ASTRAL_26_e:
(1)   50/   6A520 :                     
(1)   51/   6A520 :                     ;   	gSmplData PcmIns_PKick,"sound/instr/smpl/wegot_kick.wav",0
(1)   52/   6A520 :                     ;  	gSmplData PcmIns_Piano,"sound/instr/smpl/piano.wav",0
(1)   53/   6A520 :                     ;   	gSmplData PcmIns_PTom,"sound/instr/smpl/sauron_tom.wav",0
(1)   54/   6A520 :                     ;  	gSmplData PcmIns_NadieL,"sound/instr/smpl/nadie_l.wav",0
(1)   55/   6A520 :                     ;  	gSmplData PcmIns_NadieR,"sound/instr/smpl/nadie_r.wav",0
(1)   56/   6A520 : (MACRO)               	gSmplData PcmIns_MoveMe_Hit,"sound/instr/smpl/moveme_hit.wav",0
(1)   56/   6A520 : =$6A520              PCMINS_MOVEME_HIT    label *
(1)   56/   6A520 : F410 00                     dc.b ((PCMINS_MOVEME_HIT_e-PCMINS_MOVEME_HIT_s)&$FF),(((PCMINS_MOVEME_HIT_e-PCMINS_MOVEME_HIT_s)>>8)&$FF),(((PCMINS_MOVEME_HIT_e-PCMINS_MOVEME_HIT_s)>>16)&$FF)
(1)   56/   6A523 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   56/   6A526 :                     PCMINS_MOVEME_HIT_s:
(1)   56/   6A526 :                             binclude "sound/instr/smpl/moveme_hit.wav",$2C
(1)   56/   6B61A :                     PCMINS_MOVEME_HIT_e:
(1)   57/   6B61A : (MACRO)                	gSmplData PcmIns_Kick,"sound/instr/smpl/kick_moveme.wav",0
(1)   57/   6B61A : =$6B61A              PCMINS_KICK    label *
(1)   57/   6B61A : 6E09 00                     dc.b ((PCMINS_KICK_e-PCMINS_KICK_s)&$FF),(((PCMINS_KICK_e-PCMINS_KICK_s)>>8)&$FF),(((PCMINS_KICK_e-PCMINS_KICK_s)>>16)&$FF)
(1)   57/   6B61D : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   57/   6B620 :                     PCMINS_KICK_s:
(1)   57/   6B620 :                             binclude "sound/instr/smpl/kick_moveme.wav",$2C
(1)   57/   6BF8E :                     PCMINS_KICK_e:
(1)   58/   6BF8E : (MACRO)                	gSmplData PcmIns_Snare,"sound/instr/smpl/snare_moveme.wav",0
(1)   58/   6BF8E : =$6BF8E              PCMINS_SNARE    label *
(1)   58/   6BF8E : 8209 00                     dc.b ((PCMINS_SNARE_e-PCMINS_SNARE_s)&$FF),(((PCMINS_SNARE_e-PCMINS_SNARE_s)>>8)&$FF),(((PCMINS_SNARE_e-PCMINS_SNARE_s)>>16)&$FF)
(1)   58/   6BF91 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   58/   6BF94 :                     PCMINS_SNARE_s:
(1)   58/   6BF94 :                             binclude "sound/instr/smpl/snare_moveme.wav",$2C
(1)   58/   6C916 :                     PCMINS_SNARE_e:
(1)   59/   6C916 : (MACRO)                	gSmplData PcmIns_MoveMe_BrassL,"sound/instr/smpl/brass_move_l.wav",6478
(1)   59/   6C916 : =$6C916              PCMINS_MOVEME_BRASSL    label *
(1)   59/   6C916 : E46B 00                     dc.b ((PCMINS_MOVEME_BRASSL_e-PCMINS_MOVEME_BRASSL_s)&$FF),(((PCMINS_MOVEME_BRASSL_e-PCMINS_MOVEME_BRASSL_s)>>8)&$FF),(((PCMINS_MOVEME_BRASSL_e-PCMINS_MOVEME_BRASSL_s)>>16)&$FF)
(1)   59/   6C919 : 4E19 00                     dc.b ((6478)&$FF),(((6478)>>8)&$FF),(((6478)>>16)&$FF)
(1)   59/   6C91C :                     PCMINS_MOVEME_BRASSL_s:
(1)   59/   6C91C :                             binclude "sound/instr/smpl/brass_move_l.wav",$2C
(1)   59/   73500 :                     PCMINS_MOVEME_BRASSL_e:
(1)   60/   73500 : (MACRO)                	gSmplData PcmIns_MoveMe_BrassR,"sound/instr/smpl/brass_move_r.wav",6478
(1)   60/   73500 : =$73500              PCMINS_MOVEME_BRASSR    label *
(1)   60/   73500 : E46B 00                     dc.b ((PCMINS_MOVEME_BRASSR_e-PCMINS_MOVEME_BRASSR_s)&$FF),(((PCMINS_MOVEME_BRASSR_e-PCMINS_MOVEME_BRASSR_s)>>8)&$FF),(((PCMINS_MOVEME_BRASSR_e-PCMINS_MOVEME_BRASSR_s)>>16)&$FF)
(1)   60/   73503 : 4E19 00                     dc.b ((6478)&$FF),(((6478)>>8)&$FF),(((6478)>>16)&$FF)
(1)   60/   73506 :                     PCMINS_MOVEME_BRASSR_s:
(1)   60/   73506 :                             binclude "sound/instr/smpl/brass_move_r.wav",$2C
(1)   60/   7A0EA :                     PCMINS_MOVEME_BRASSR_e:
(1)   61/   7A0EA :                     
     323/   7A0EA :                     .here:
     324/   7A0EA : (MACRO)              		erreport "SUB-CPU DATA",.here,$80000
     325/   660EA :                     		dephase
     326/   660EA :                     		phase MCD_SUBDATA+(.here-$20000)
     327/   660EA :                     		align $800
     328/   66800 :                     MCD_SUBDATA_E:
     330/   66800 :                     
     331/   66800 :                     ; ====================================================================
     332/   66800 :                     ; ----------------------------------------------------------------
     333/   66800 :                     ; SH2 code sent to SDRAM area
     334/   66800 :                     ; ----------------------------------------------------------------
     335/   66800 :                     
     337/   66800 :                     		align $800
     341/   66800 :                     MARS_RAMCODE:
     345/   66800 :                     MARS_RAMCODE_E:
     347/   66800 :                     		align $800
     348/   66800 :                     MARS_RAMCODE_eof:
     350/   66800 :                     
     351/   66800 :                     ; ====================================================================
     352/   66800 :                     ; --------------------------------------------------------
     353/   66800 :                     ; Screen modes
     354/   66800 :                     ;
     355/   66800 :                     ; For SegaCD/CD32X these are stored as separate files
     356/   66800 :                     ; on disc
     357/   66800 :                     ;
     358/   66800 :                     ; Usage:
     359/   66800 :                     ; screen_code START_LABEL,END_LABEL,CODE_PATH
     360/   66800 :                     ;
     361/   66800 :                     ; Set your data banks manually on your screen code.
     362/   66800 :                     ; --------------------------------------------------------
     363/   66800 :                     
     364/   66800 : (MACRO)              	screen_code Md_Screen00,Md_Screen00_e,"game/screen_0/code.asm"
     364/   66800 :                                     align $800              ; SCD/CD32X sector align
     364/   66800 : =$66800              MD_SCREEN00 label *
     364/   66800 :                     
     364/   66800 :                     mctopscrn:
     364/FFFFFFFFFFFF2000 :                                     phase RAM_UserCode      ; SCD/32X/CD32X relocate to RAM area
     364/FFFFFFFFFFFF2000 :                     mcscrn_s:
     364/FFFFFFFFFFFF2000 :                             include "game/screen_0/code.asm";"game/screen_0/code.asm"
(1)    1/FFFFFFFFFFFF2000 :                     ; ===========================================================================
(1)    2/FFFFFFFFFFFF2000 :                     ; ----------------------------------------------------------------
(1)    3/FFFFFFFFFFFF2000 :                     ; SCREEN CODE
(1)    4/FFFFFFFFFFFF2000 :                     ; ----------------------------------------------------------------
(1)    5/FFFFFFFFFFFF2000 :                     
(1)    6/FFFFFFFFFFFF2000 :                     ; ====================================================================
(1)    7/FFFFFFFFFFFF2000 :                     ; ------------------------------------------------------
(1)    8/FFFFFFFFFFFF2000 :                     ; Variables
(1)    9/FFFFFFFFFFFF2000 :                     ; ------------------------------------------------------
(1)   10/FFFFFFFFFFFF2000 :                     
(1)   11/FFFFFFFFFFFF2000 : =$440                setVram_Emily		equ $440
(1)   12/FFFFFFFFFFFF2000 : =$458                setVram_Doremi		equ $440+(4*6)
(1)   13/FFFFFFFFFFFF2000 : =$470                setVram_Sophie		equ $440+((4*6)*2)
(1)   14/FFFFFFFFFFFF2000 : =$488                setVram_Nicole		equ $440+((4*6)*3)
(1)   15/FFFFFFFFFFFF2000 : =$4A0                setVram_Bibi		equ $4A0
(1)   16/FFFFFFFFFFFF2000 :                     
(1)   17/FFFFFFFFFFFF2000 :                     ; ====================================================================
(1)   18/FFFFFFFFFFFF2000 :                     ; ------------------------------------------------------
(1)   19/FFFFFFFFFFFF2000 :                     ; Structs
(1)   20/FFFFFFFFFFFF2000 :                     ; ------------------------------------------------------
(1)   21/FFFFFFFFFFFF2000 :                     
(1)   22/FFFFFFFFFFFF2000 :                     ; 			strct 0
(1)   23/FFFFFFFFFFFF2000 :                     ; strc_xpos		ds.w 1
(1)   24/FFFFFFFFFFFF2000 :                     ; strc_ypos		ds.w 1
(1)   25/FFFFFFFFFFFF2000 :                     ; 			endstrct
(1)   26/FFFFFFFFFFFF2000 :                     
(1)   27/FFFFFFFFFFFF2000 :                     ; ====================================================================
(1)   28/FFFFFFFFFFFF2000 :                     ; ------------------------------------------------------
(1)   29/FFFFFFFFFFFF2000 :                     ; This mode's RAM
(1)   30/FFFFFFFFFFFF2000 :                     ; ------------------------------------------------------
(1)   31/FFFFFFFFFFFF2000 :                     
(1)   32/FFFFFFFFFFFF2000 :  (MACRO-2)           			strct RAM_ScrnBuff
(1)   32/FFFFFFFFFFFF2000 : =$FFFFFFFFFFFF2000   GLBL_LASTPC     set *
(1)   32/   66800 :                                     dephase
(1)   32/FFFFFFFFFFFFD404 :                                     phase RAM_SCRNBUFF
(1)   32/FFFFFFFFFFFFD404 : =$FFFFFFFFFFFFD404   GLBL_LASTORG    set *
(1)   33/FFFFFFFFFFFFD404 :                     RAM_SC0_Null		ds.l 1
(1)   34/FFFFFFFFFFFFD408 :                     RAM_WhoIAm		ds.l 1
(1)   35/FFFFFFFFFFFFD40C :                     sizeof_thisbuff		ds.l 0
(1)   36/FFFFFFFFFFFFD410 :  (MACRO-2)           			endstrct
(1)   36/FFFFFFFFFFFFD404 :                                     org GLBL_LASTORG
(1)   36/FFFFFFFFFFFF2000 :                                     phase GLBL_LASTPC
(1)   37/FFFFFFFFFFFF2000 :                     
(1)   38/FFFFFFFFFFFF2000 :  (MACRO-2)           	erreport "SCREEN",sizeof_thisbuff-RAM_ScrnBuff,MAX_ScrnBuff
(1)   39/FFFFFFFFFFFF2000 :                     
(1)   40/FFFFFFFFFFFF2000 :                     ; ====================================================================
(1)   41/FFFFFFFFFFFF2000 :                     ; ------------------------------------------------------
(1)   42/FFFFFFFFFFFF2000 :                     ; Init
(1)   43/FFFFFFFFFFFF2000 :                     ; ------------------------------------------------------
(1)   44/FFFFFFFFFFFF2000 :                     
(1)   45/FFFFFFFFFFFF2000 : 6100 F33A           		bsr	Mode_Init
(1)   46/FFFFFFFFFFFF2004 :  (MACRO-2)           		set_dbanks file_mddata_def,pointr_marsdata_def
(1)   46/FFFFFFFFFFFF2004 : 6100 F3E8                           bsr     System_McdSubWait
(1)   46/FFFFFFFFFFFF2008 : 41FA 00EC                           lea     FILE_MDDATA_DEF(pc),a0           ; CD/CD32X: Genesis data
(1)   46/FFFFFFFFFFFF200C : 6100 F40A                           bsr     System_McdTrnsfr_WRAM
(1)   47/FFFFFFFFFFFF2010 :                     
(1)   48/FFFFFFFFFFFF2010 :                     	; ----------------------------------------------
(1)   49/FFFFFFFFFFFF2010 :                     	; Load assets
(1)   70/FFFFFFFFFFFF2010 :                     ; 	if MARS|MARSCD=0
(1)   71/FFFFFFFFFFFF2010 :                     ; 		move.l	#Art_Scn0_BG,d0
(1)   72/FFFFFFFFFFFF2010 :                     ; 		move.w	#cell_vram($0001),d1
(1)   73/FFFFFFFFFFFF2010 :                     ; 		move.w	#Art_Scn0_BG_e-Art_Scn0_BG,d2
(1)   74/FFFFFFFFFFFF2010 :                     ; 		bsr	Video_LoadArt
(1)   75/FFFFFFFFFFFF2010 :                     ; 		lea	(MAP_Scr0_BG),a0
(1)   76/FFFFFFFFFFFF2010 :                     ; 		move.l	#locate(0,0,1),d0
(1)   77/FFFFFFFFFFFF2010 :                     ; 		move.l	#map_size(320,224),d1
(1)   78/FFFFFFFFFFFF2010 :                     ; 		move.w	#$0001,d2
(1)   79/FFFFFFFFFFFF2010 :                     ; 		bsr	Video_LoadMap
(1)   80/FFFFFFFFFFFF2010 :                     ; 	endif
(1)   81/FFFFFFFFFFFF2010 : 41F9 0020 1F14      		lea	(ASCII_FONT).l,a0
(1)   82/FFFFFFFFFFFF2016 : 43F9 FFFF 0300      		lea	(ASCII_PAL).l,a1
(1)   83/FFFFFFFFFFFF201C : 6100 E97A           		bsr	Video_PrintInit
(1)   84/FFFFFFFFFFFF2020 :                     
(1)   85/FFFFFFFFFFFF2020 :                     
(1)   86/FFFFFFFFFFFF2020 :                     ; 		lea	PAL_SCR0_TEST(pc),a0
(1)   87/FFFFFFFFFFFF2020 :                     ; 		moveq	#0,d0
(1)   88/FFFFFFFFFFFF2020 :                     ; 		move.w	#16,d1
(1)   89/FFFFFFFFFFFF2020 :                     ; 		bsr	Video_FadePal
(1)   90/FFFFFFFFFFFF2020 :                     
(1)   91/FFFFFFFFFFFF2020 : 41F9 0020 0CF0      		lea	(objPal_Emily),a0
(1)   92/FFFFFFFFFFFF2026 : 7000                		moveq	#0,d0
(1)   93/FFFFFFFFFFFF2028 : 323C 0010           		move.w	#16,d1
(1)   94/FFFFFFFFFFFF202C : 6100 E3D4           		bsr	Video_FadePal
(1)   95/FFFFFFFFFFFF2030 : 41F9 0020 0F66      		lea	(objPal_Doremi),a0
(1)   96/FFFFFFFFFFFF2036 : 7010                		moveq	#16,d0
(1)   97/FFFFFFFFFFFF2038 : 323C 0010           		move.w	#16,d1
(1)   98/FFFFFFFFFFFF203C : 6100 E3C4           		bsr	Video_FadePal
(1)   99/FFFFFFFFFFFF2040 : 41F9 0020 10F2      		lea	(objPal_Sophie),a0
(1)  100/FFFFFFFFFFFF2046 : 7020                		moveq	#32,d0
(1)  101/FFFFFFFFFFFF2048 : 323C 0010           		move.w	#16,d1
(1)  102/FFFFFFFFFFFF204C : 6100 E3B4           		bsr	Video_FadePal
(1)  103/FFFFFFFFFFFF2050 :                     
(1)  104/FFFFFFFFFFFF2050 : 41FA 0476           		lea	str_Scrn0Intro(pc),a0
(1)  105/FFFFFFFFFFFF2054 : 203C 0000 0101      		move.l	#locate(1,1,0),d0
(1)  106/FFFFFFFFFFFF205A : 6100 E966           		bsr	Video_Print
(1)  107/FFFFFFFFFFFF205E :                     
(1)  108/FFFFFFFFFFFF205E : 203C FFFF 2116      		move.l	#Obj_Emily,d0		; IN THIS ORDER
(1)  109/FFFFFFFFFFFF2064 : 7200                		moveq	#0,d1
(1)  110/FFFFFFFFFFFF2066 : 6100 EBAA           		bsr	Objects_Add
(1)  111/FFFFFFFFFFFF206A : 203C FFFF 234A      		move.l	#Obj_Bibi,d0
(1)  112/FFFFFFFFFFFF2070 : 7200                		moveq	#0,d1
(1)  113/FFFFFFFFFFFF2072 : 6100 EB9E           		bsr	Objects_Add
(1)  114/FFFFFFFFFFFF2076 : 203C FFFF 227A      		move.l	#Obj_Doremi,d0
(1)  115/FFFFFFFFFFFF207C : 7200                		moveq	#0,d1
(1)  116/FFFFFFFFFFFF207E : 6100 EB92           		bsr	Objects_Add
(1)  117/FFFFFFFFFFFF2082 : 203C FFFF 227A      		move.l	#Obj_Doremi,d0
(1)  118/FFFFFFFFFFFF2088 : 7201                		moveq	#1,d1
(1)  119/FFFFFFFFFFFF208A : 6100 EB86           		bsr	Objects_Add
(1)  120/FFFFFFFFFFFF208E : 203C FFFF 227A      		move.l	#Obj_Doremi,d0
(1)  121/FFFFFFFFFFFF2094 : 7202                		moveq	#2,d1
(1)  122/FFFFFFFFFFFF2096 : 6100 EB7A           		bsr	Objects_Add
(1)  123/FFFFFFFFFFFF209A :                     
(1)  124/FFFFFFFFFFFF209A :                     	; ----------------------------------------------
(1)  125/FFFFFFFFFFFF209A : 303C 00D6           		move.w	#214,d0
(1)  126/FFFFFFFFFFFF209E : 6100 E1EC           		bsr	gemaSetBeats
(1)  127/FFFFFFFFFFFF20A2 : 7000                		moveq	#0,d0
(1)  128/FFFFFFFFFFFF20A4 : 7200                		moveq	#0,d1
(1)  129/FFFFFFFFFFFF20A6 : 7400                		moveq	#0,d2
(1)  130/FFFFFFFFFFFF20A8 : 6100 E150           		bsr	gemaPlayTrack
(1)  131/FFFFFFFFFFFF20AC :                     ; 	if MCD|MARSCD
(1)  132/FFFFFFFFFFFF20AC :                     ; 		move.w	#$0002,(sysmcd_reg+mcd_dcomm_m).l
(1)  133/FFFFFFFFFFFF20AC :                     ; 		move.w	#$0010,d0
(1)  134/FFFFFFFFFFFF20AC :                     ; 		bsr	System_McdSubTask
(1)  135/FFFFFFFFFFFF20AC :                     ; 	endif
(1)  136/FFFFFFFFFFFF20AC :                     	; ----------------------------------------------
(1)  137/FFFFFFFFFFFF20AC :                     ; 		bsr	.show_me
(1)  138/FFFFFFFFFFFF20AC :                     ; 		bsr	.steal_vars
(1)  139/FFFFFFFFFFFF20AC : 6100 EB10           		bsr	Objects_Run
(1)  140/FFFFFFFFFFFF20B0 : 6100 03B2           		bsr	ShowMe_Who
(1)  141/FFFFFFFFFFFF20B4 :                     	; ----------------------------------------------
(1)  142/FFFFFFFFFFFF20B4 : 08F9 0006 FFFF      		bset	#bitDispEnbl,(RAM_VdpRegs+1).l		; Enable display
         FFFFFFFFFFFF20BA : B8F7             
(1)  143/FFFFFFFFFFFF20BC : 11FC 0081 B902      		move.b	#%10000001,(RAM_VdpRegs+$C).w		; H40 + shadow mode
(1)  144/FFFFFFFFFFFF20C2 : 6100 E20A           		bsr	Video_Update
(1)  145/FFFFFFFFFFFF20C6 : 6100 E2D6           		bsr	Video_FadeIn
(1)  146/FFFFFFFFFFFF20CA :                     
(1)  147/FFFFFFFFFFFF20CA :                     ; ====================================================================
(1)  148/FFFFFFFFFFFF20CA :                     ; ------------------------------------------------------
(1)  149/FFFFFFFFFFFF20CA :                     ; Loop
(1)  150/FFFFFFFFFFFF20CA :                     ; ------------------------------------------------------
(1)  151/FFFFFFFFFFFF20CA :                     
(1)  152/FFFFFFFFFFFF20CA :                     .loop:
(1)  153/FFFFFFFFFFFF20CA : 6100 EEE8           		bsr	System_Render
(1)  154/FFFFFFFFFFFF20CE :                     ; 		vdp_showme $0E0
(1)  155/FFFFFFFFFFFF20CE : 6100 EAEE           		bsr	Objects_Run
(1)  156/FFFFFFFFFFFF20D2 : 6100 0390           		bsr	ShowMe_Who
(1)  157/FFFFFFFFFFFF20D6 : 3E38 C008           		move.w	(Controller_1+on_press),d7
(1)  158/FFFFFFFFFFFF20DA : 0807 0007           		btst	#bitJoyStart,d7
(1)  159/FFFFFFFFFFFF20DE : 6602                		bne.s	.snd_test
(1)  160/FFFFFFFFFFFF20E0 :                     ; 		vdp_showme $000
(1)  161/FFFFFFFFFFFF20E0 : 60E8                		bra.s	.loop
(1)  162/FFFFFFFFFFFF20E2 :                     .snd_test:
(1)  163/FFFFFFFFFFFF20E2 : 6100 E154           		bsr	gemaStopAll
(1)  164/FFFFFFFFFFFF20E6 : 6100 EECC           		bsr	System_Render
(1)  165/FFFFFFFFFFFF20EA : 6100 E2D8           		bsr	Video_FadeOut
(1)  166/FFFFFFFFFFFF20EE : 31FC 0001 C458      		move.w	#1,(RAM_ScreenMode).w
(1)  167/FFFFFFFFFFFF20F4 : 4E75                		rts		; EXIT
(1)  168/FFFFFFFFFFFF20F6 :                     
(1)  169/FFFFFFFFFFFF20F6 :                     ; ====================================================================
(1)  170/FFFFFFFFFFFF20F6 :                     ; ------------------------------------------------------
(1)  171/FFFFFFFFFFFF20F6 :                     ; DATA assets locations for 68K and SH2
(1)  172/FFFFFFFFFFFF20F6 :                     ; ------------------------------------------------------
(1)  173/FFFFFFFFFFFF20F6 :                     
(1)  174/FFFFFFFFFFFF20F6 :                     file_mddata_def:
(1)  175/FFFFFFFFFFFF20F6 : 4441 5441 424E      		dc.b "DATABNKD.BIN",0		; CD Filename
         FFFFFFFFFFFF20FC : 4B44 2E42 494E 00 
(1)  176/FFFFFFFFFFFF2103 :                     		align 2
(1)  177/FFFFFFFFFFFF2104 :                     pointr_marsdata_def:
(1)  178/FFFFFFFFFFFF2104 : 000A 0800           		dc.l MARSDATA_SCREEN00		; 32X Cartridge point
(1)  179/FFFFFFFFFFFF2108 : 4D41 5253 445F      		dc.b "MARSD_00.BIN",0		; CD Filename
         FFFFFFFFFFFF210E : 3030 2E42 494E 00 
(1)  180/FFFFFFFFFFFF2115 :                     		align 2
(1)  181/FFFFFFFFFFFF2116 :                     
(1)  182/FFFFFFFFFFFF2116 :                     ; ====================================================================
(1)  183/FFFFFFFFFFFF2116 :                     ; ------------------------------------------------------
(1)  184/FFFFFFFFFFFF2116 :                     ; Objects
(1)  185/FFFFFFFFFFFF2116 :                     ; ------------------------------------------------------
(1)  186/FFFFFFFFFFFF2116 :                     
(1)  187/FFFFFFFFFFFF2116 :                     ; --------------------------------------------------
(1)  188/FFFFFFFFFFFF2116 :                     ; Emily
(1)  189/FFFFFFFFFFFF2116 :                     ; --------------------------------------------------
(1)  190/FFFFFFFFFFFF2116 :                     
(1)  191/FFFFFFFFFFFF2116 :                     Obj_Emily:
(1)  192/FFFFFFFFFFFF2116 : 7000                		moveq	#0,d0
(1)  193/FFFFFFFFFFFF2118 : 102E 0021           		move.b	obj_index(a6),d0
(1)  194/FFFFFFFFFFFF211C : D040                		add.w	d0,d0
(1)  195/FFFFFFFFFFFF211E : 323B 0006           		move.w	.list(pc,d0.w),d1
(1)  196/FFFFFFFFFFFF2122 : 4EFB 1002           		jmp	.list(pc,d1.w)
(1)  197/FFFFFFFFFFFF2126 :                     ; ----------------------------------------------
(1)  198/FFFFFFFFFFFF2126 : 0004                .list:		dc.w .init-.list
(1)  199/FFFFFFFFFFFF2128 : 0042                		dc.w .main-.list
(1)  200/FFFFFFFFFFFF212A :                     ; ----------------------------------------------
(1)  201/FFFFFFFFFFFF212A :                     .init:
(1)  202/FFFFFFFFFFFF212A : 1D7C 0001 0021      		move.b	#1,obj_index(a6)
(1)  203/FFFFFFFFFFFF2130 : 2D7C 0020 0D06      		move.l	#objMap_Emily,obj_map(a6)
         FFFFFFFFFFFF2136 : 000C             
(1)  204/FFFFFFFFFFFF2138 : 3D7C 8440 0014      		move.w	#setVram_Emily|$8000,obj_vram(a6)
(1)  205/FFFFFFFFFFFF213E : 08AE 0007 0022      		bclr	#bitobj_Mars,obj_set(a6)	; Set as Genesis object
(1)  206/FFFFFFFFFFFF2144 : 2D7C 0303 0202      		move.l	#$03030202,obj_size(a6)		; UDLR sizes
         FFFFFFFFFFFF214A : 0010             
(1)  207/FFFFFFFFFFFF214C : 3D7C 0080 0004      		move.w	#(320/2)-32,obj_x(a6)
(1)  208/FFFFFFFFFFFF2152 : 3D7C 0050 0008      		move.w	#(224/2)-32,obj_y(a6)
(1)  209/FFFFFFFFFFFF2158 : 426E 001C           		clr.w	obj_frame(a6)
(1)  210/FFFFFFFFFFFF215C : 426E 0026           		clr.w	obj_ram(a6)
(1)  211/FFFFFFFFFFFF2160 : 426E 0028           		clr.w	obj_ram+2(a6)
(1)  212/FFFFFFFFFFFF2164 : 6100 ECF8           		bsr	object_ResetAnim
(1)  213/FFFFFFFFFFFF2168 :                     
(1)  214/FFFFFFFFFFFF2168 :                     ; ----------------------------------------------
(1)  215/FFFFFFFFFFFF2168 :                     .main:
(1)  216/FFFFFFFFFFFF2168 : 4BEE 0026           		lea	obj_ram(a6),a5
(1)  217/FFFFFFFFFFFF216C : 49F8 C004           		lea	(Controller_1),a4
(1)  218/FFFFFFFFFFFF2170 :                     
(1)  219/FFFFFFFFFFFF2170 : 426E 0016           		clr.w	obj_x_spd(a6)
(1)  220/FFFFFFFFFFFF2174 : 426E 0018           		clr.w	obj_y_spd(a6)
(1)  221/FFFFFFFFFFFF2178 : 382C 0002           		move.w	on_hold(a4),d4
(1)  222/FFFFFFFFFFFF217C : 0804 0001           		btst	#bitJoyDown,d4
(1)  223/FFFFFFFFFFFF2180 : 670A                		beq.s	.go_down
(1)  224/FFFFFFFFFFFF2182 : 3ABC 0000           		move.w	#0,(a5)		; <--
(1)  225/FFFFFFFFFFFF2186 : 3D7C 0140 0018      		move.w	#$140,obj_y_spd(a6)
(1)  226/FFFFFFFFFFFF218C :                     .go_down:
(1)  227/FFFFFFFFFFFF218C : 0804 0000           		btst	#bitJoyUp,d4
(1)  228/FFFFFFFFFFFF2190 : 670A                		beq.s	.go_up
(1)  229/FFFFFFFFFFFF2192 : 3ABC 0004           		move.w	#4,(a5)
(1)  230/FFFFFFFFFFFF2196 : 3D7C FEC0 0018      		move.w	#-$140,obj_y_spd(a6)
(1)  231/FFFFFFFFFFFF219C :                     .go_up:
(1)  232/FFFFFFFFFFFF219C : 0804 0003           		btst	#bitJoyRight,d4
(1)  233/FFFFFFFFFFFF21A0 : 670A                		beq.s	.go_r
(1)  234/FFFFFFFFFFFF21A2 : 3ABC 0008           		move.w	#8,(a5)
(1)  235/FFFFFFFFFFFF21A6 : 3D7C 0140 0016      		move.w	#$140,obj_x_spd(a6)
(1)  236/FFFFFFFFFFFF21AC :                     .go_r:
(1)  237/FFFFFFFFFFFF21AC : 0804 0002           		btst	#bitJoyLeft,d4
(1)  238/FFFFFFFFFFFF21B0 : 670A                		beq.s	.go_l
(1)  239/FFFFFFFFFFFF21B2 : 3ABC 000C           		move.w	#$C,(a5)
(1)  240/FFFFFFFFFFFF21B6 : 3D7C FEC0 0016      		move.w	#-$140,obj_x_spd(a6)
(1)  241/FFFFFFFFFFFF21BC :                     .go_l:
(1)  242/FFFFFFFFFFFF21BC : 3015                		move.w	(a5),d0
(1)  243/FFFFFFFFFFFF21BE : 382C 0002           		move.w	on_hold(a4),d4
(1)  244/FFFFFFFFFFFF21C2 : 0244 000F           		andi.w	#JoyUp+JoyDown+JoyLeft+JoyRight,d4
(1)  245/FFFFFFFFFFFF21C6 : 670A                		beq.s	.stay
(1)  246/FFFFFFFFFFFF21C8 : 122D 0002           		move.b	2(a5),d1
(1)  247/FFFFFFFFFFFF21CC : 0241 0003           		andi.w	#%11,d1
(1)  248/FFFFFFFFFFFF21D0 : D041                		add.w	d1,d0
(1)  249/FFFFFFFFFFFF21D2 :                     .stay:
(1)  250/FFFFFFFFFFFF21D2 : 3D40 001C           		move.w	d0,obj_frame(a6)
(1)  251/FFFFFFFFFFFF21D6 : 066D 0020 0002      		addi.w	#$0020,2(a5)		; Speed
(1)  252/FFFFFFFFFFFF21DC : 026D 03FF 0002      		andi.w	#$03FF,2(a5)		; limit
(1)  253/FFFFFFFFFFFF21E2 : 6100 EC8A           		bsr	object_Speed
(1)  254/FFFFFFFFFFFF21E6 :                     
(1)  255/FFFFFFFFFFFF21E6 : 4AAE 0004           		tst.l	obj_x(a6)
(1)  256/FFFFFFFFFFFF21EA : 6A04                		bpl.s	.x_neg
(1)  257/FFFFFFFFFFFF21EC : 42AE 0004           		clr.l	obj_x(a6)
(1)  258/FFFFFFFFFFFF21F0 :                     .x_neg:
(1)  259/FFFFFFFFFFFF21F0 : 0C6E 0140 0004      		cmp.w	#320,obj_x(a6)
(1)  260/FFFFFFFFFFFF21F6 : 6D06                		blt.s	.x_posi
(1)  261/FFFFFFFFFFFF21F8 : 3D7C 0140 0004      		move.w	#320,obj_x(a6)
(1)  262/FFFFFFFFFFFF21FE :                     .x_posi:
(1)  263/FFFFFFFFFFFF21FE : 4AAE 0008           		tst.l	obj_y(a6)
(1)  264/FFFFFFFFFFFF2202 : 6A04                		bpl.s	.y_neg
(1)  265/FFFFFFFFFFFF2204 : 42AE 0008           		clr.l	obj_y(a6)
(1)  266/FFFFFFFFFFFF2208 :                     .y_neg:
(1)  267/FFFFFFFFFFFF2208 : 0C6E 00E0 0008      		cmp.w	#224,obj_y(a6)
(1)  268/FFFFFFFFFFFF220E : 6D06                		blt.s	.y_posi
(1)  269/FFFFFFFFFFFF2210 : 3D7C 00E0 0008      		move.w	#224,obj_y(a6)
(1)  270/FFFFFFFFFFFF2216 :                     .y_posi:
(1)  271/FFFFFFFFFFFF2216 : 42B8 D408           		clr.l	(RAM_WhoIAm).w
(1)  272/FFFFFFFFFFFF221A : 6100 EC74           		bsr	object_Collision
(1)  273/FFFFFFFFFFFF221E : 4A80                		tst.l	d0
(1)  274/FFFFFFFFFFFF2220 : 6704                		beq.s	.no_one
(1)  275/FFFFFFFFFFFF2222 : 21C0 D408           		move.l	d0,(RAM_WhoIAm).w
(1)  276/FFFFFFFFFFFF2226 :                     .no_one:
(1)  277/FFFFFFFFFFFF2226 : 41F9 0020 0EC6      		lea	(objDma_Emily),a0
(1)  278/FFFFFFFFFFFF222C : 43F9 0020 CAD4      		lea	(Art_Emily),a1
(1)  279/FFFFFFFFFFFF2232 : 6100 EB3A           		bsr	object_DMA
(1)  280/FFFFFFFFFFFF2236 : 6000 EB12           		bra	object_Display
(1)  281/FFFFFFFFFFFF223A :                     
(1)  282/FFFFFFFFFFFF223A :                     ; ----------------------------------------------
(1)  283/FFFFFFFFFFFF223A :                     
(1)  284/FFFFFFFFFFFF223A :                     .anim_data:
(1)  285/FFFFFFFFFFFF223A : 0008                		dc.w .anim_d-.anim_data
(1)  286/FFFFFFFFFFFF223C : 0016                		dc.w .anim_u-.anim_data
(1)  287/FFFFFFFFFFFF223E : 0024                		dc.w .anim_r-.anim_data
(1)  288/FFFFFFFFFFFF2240 : 0032                		dc.w .anim_l-.anim_data
(1)  289/FFFFFFFFFFFF2242 :                     .anim_d:
(1)  290/FFFFFFFFFFFF2242 : 0008                		dc.w 8
(1)  291/FFFFFFFFFFFF2244 : 0000 0001 0002      		dc.w 0,1,2,3,-1
         FFFFFFFFFFFF224A : 0003 FFFF          
(1)  292/FFFFFFFFFFFF224E :                     		align 2
(1)  293/FFFFFFFFFFFF2250 :                     .anim_u:
(1)  294/FFFFFFFFFFFF2250 : 0008                		dc.w 8
(1)  295/FFFFFFFFFFFF2252 : 0004 0005 0006      		dc.w 4,5,6,7,-1
         FFFFFFFFFFFF2258 : 0007 FFFF          
(1)  296/FFFFFFFFFFFF225C :                     		align 2
(1)  297/FFFFFFFFFFFF225E :                     .anim_r:
(1)  298/FFFFFFFFFFFF225E : 0008                		dc.w 8
(1)  299/FFFFFFFFFFFF2260 : 0008 0009 000A      		dc.w 8,9,10,11,-1
         FFFFFFFFFFFF2266 : 000B FFFF          
(1)  300/FFFFFFFFFFFF226A :                     		align 2
(1)  301/FFFFFFFFFFFF226C :                     .anim_l:
(1)  302/FFFFFFFFFFFF226C : 0008                		dc.w 8
(1)  303/FFFFFFFFFFFF226E : 000C 000D 000E      		dc.w 12,13,14,15,-1
         FFFFFFFFFFFF2274 : 000F FFFF          
(1)  304/FFFFFFFFFFFF2278 :                     		align 2
(1)  305/FFFFFFFFFFFF227A :                     
(1)  306/FFFFFFFFFFFF227A :                     ; --------------------------------------------------
(1)  307/FFFFFFFFFFFF227A :                     ; Doremi, Sophie o Nicole
(1)  308/FFFFFFFFFFFF227A :                     ; --------------------------------------------------
(1)  309/FFFFFFFFFFFF227A :                     
(1)  310/FFFFFFFFFFFF227A :                     Obj_Doremi:
(1)  311/FFFFFFFFFFFF227A : 7000                		moveq	#0,d0
(1)  312/FFFFFFFFFFFF227C : 102E 0021           		move.b	obj_index(a6),d0
(1)  313/FFFFFFFFFFFF2280 : D040                		add.w	d0,d0
(1)  314/FFFFFFFFFFFF2282 : 323B 0006           		move.w	.list(pc,d0.w),d1
(1)  315/FFFFFFFFFFFF2286 : 4EFB 1002           		jmp	.list(pc,d1.w)
(1)  316/FFFFFFFFFFFF228A :                     ; ----------------------------------------------
(1)  317/FFFFFFFFFFFF228A : 0004                .list:		dc.w .init-.list
(1)  318/FFFFFFFFFFFF228C : 0044                		dc.w .main-.list
(1)  319/FFFFFFFFFFFF228E :                     ; ----------------------------------------------
(1)  320/FFFFFFFFFFFF228E :                     .init:
(1)  321/FFFFFFFFFFFF228E : 1D7C 0001 0021      		move.b	#1,obj_index(a6)
(1)  322/FFFFFFFFFFFF2294 : 08AE 0007 0022      		bclr	#bitobj_Mars,obj_set(a6)	; Set as Genesis object
(1)  323/FFFFFFFFFFFF229A : 2D7C 0303 0202      		move.l	#$03030202,obj_size(a6)		; UDLR sizes
         FFFFFFFFFFFF22A0 : 0010             
(1)  324/FFFFFFFFFFFF22A2 : 102E 0023           		move.b	obj_subid(a6),d0
(1)  325/FFFFFFFFFFFF22A6 : E948                		lsl.w	#4,d0
(1)  326/FFFFFFFFFFFF22A8 : 41FA 0070           		lea	.sub_list(pc),a0
(1)  327/FFFFFFFFFFFF22AC : D0C0                		adda	d0,a0
(1)  328/FFFFFFFFFFFF22AE : 2D58 000C           		move.l	(a0)+,obj_map(a6)
(1)  329/FFFFFFFFFFFF22B2 : 3D58 0014           		move.w	(a0)+,obj_vram(a6)
(1)  330/FFFFFFFFFFFF22B6 : 3D58 0004           		move.w	(a0)+,obj_x(a6)
(1)  331/FFFFFFFFFFFF22BA : 3D58 0008           		move.w	(a0)+,obj_y(a6)
(1)  332/FFFFFFFFFFFF22BE : 3D58 0028           		move.w	(a0)+,obj_ram+2(a6)
(1)  333/FFFFFFFFFFFF22C2 :                     
(1)  334/FFFFFFFFFFFF22C2 : 426E 001C           		clr.w	obj_frame(a6)
(1)  335/FFFFFFFFFFFF22C6 : 426E 0026           		clr.w	obj_ram(a6)
(1)  336/FFFFFFFFFFFF22CA : 6100 EB92           		bsr	object_ResetAnim
(1)  337/FFFFFFFFFFFF22CE :                     
(1)  338/FFFFFFFFFFFF22CE :                     ; ----------------------------------------------
(1)  339/FFFFFFFFFFFF22CE :                     .main:
(1)  340/FFFFFFFFFFFF22CE : 7000                		moveq	#0,d0
(1)  341/FFFFFFFFFFFF22D0 : 102E 0026           		move.b	obj_ram(a6),d0
(1)  342/FFFFFFFFFFFF22D4 : D06E 0028           		add.w	obj_ram+2(a6),d0
(1)  343/FFFFFFFFFFFF22D8 : 3D40 001C           		move.w	d0,obj_frame(a6)
(1)  344/FFFFFFFFFFFF22DC : 066E 0010 0026      		addi.w	#$0010,obj_ram(a6)		; Speed
(1)  345/FFFFFFFFFFFF22E2 : 026E 01FF 0026      		andi.w	#$01FF,obj_ram(a6)		; limit
(1)  346/FFFFFFFFFFFF22E8 :                     
(1)  347/FFFFFFFFFFFF22E8 : 7000                		moveq	#0,d0
(1)  348/FFFFFFFFFFFF22EA : 102E 0023           		move.b	obj_subid(a6),d0
(1)  349/FFFFFFFFFFFF22EE : E748                		lsl.w	#3,d0
(1)  350/FFFFFFFFFFFF22F0 : 45FA 0010           		lea	.sub_dma(pc),a2
(1)  351/FFFFFFFFFFFF22F4 : D4C0                		adda	d0,a2
(1)  352/FFFFFFFFFFFF22F6 : 205A                		move.l	(a2)+,a0
(1)  353/FFFFFFFFFFFF22F8 : 225A                		move.l	(a2)+,a1
(1)  354/FFFFFFFFFFFF22FA : 6100 EA72           		bsr	object_DMA
(1)  355/FFFFFFFFFFFF22FE : 6000 EA4A           		bra	object_Display
(1)  356/FFFFFFFFFFFF2302 :                     
(1)  357/FFFFFFFFFFFF2302 :                     ; ----------------------------------------------
(1)  358/FFFFFFFFFFFF2302 :                     
(1)  359/FFFFFFFFFFFF2302 :                     .sub_dma:
(1)  360/FFFFFFFFFFFF2302 : 0020 0FAC 0020      		dc.l objDma_Doremi,Art_Doremi
         FFFFFFFFFFFF2308 : C4D4             
(1)  361/FFFFFFFFFFFF230A : 0020 1180 0020      		dc.l objDma_Sophie,Art_Sophie
         FFFFFFFFFFFF2310 : F654             
(1)  362/FFFFFFFFFFFF2312 : 0020 1180 0020      		dc.l objDma_Sophie,Art_Sophie
         FFFFFFFFFFFF2318 : F654             
(1)  363/FFFFFFFFFFFF231A :                     .sub_list:
(1)  364/FFFFFFFFFFFF231A : 0020 0F84           		dc.l objMap_Doremi
(1)  365/FFFFFFFFFFFF231E : 2458                		dc.w setVram_Doremi|$2000
(1)  366/FFFFFFFFFFFF2320 : 003C 005A           		dc.w 60,90
(1)  367/FFFFFFFFFFFF2324 : 0000                		dc.w 0
(1)  368/FFFFFFFFFFFF2326 : 0000 0000           		dc.l 0
(1)  369/FFFFFFFFFFFF232A : 0020 1110           		dc.l objMap_Sophie
(1)  370/FFFFFFFFFFFF232E : 4470                		dc.w setVram_Sophie|$4000
(1)  371/FFFFFFFFFFFF2330 : 0100 003C           		dc.w 256,60
(1)  372/FFFFFFFFFFFF2334 : 0000                		dc.w 0
(1)  373/FFFFFFFFFFFF2336 : 0000 0000           		dc.l 0
(1)  374/FFFFFFFFFFFF233A : 0020 1110           		dc.l objMap_Sophie
(1)  375/FFFFFFFFFFFF233E : 4488                		dc.w setVram_Nicole|$4000
(1)  376/FFFFFFFFFFFF2340 : 0116 00BE           		dc.w 278,190
(1)  377/FFFFFFFFFFFF2344 : 0002                		dc.w 2
(1)  378/FFFFFFFFFFFF2346 : 0000 0000           		dc.l 0
(1)  379/FFFFFFFFFFFF234A :                     
(1)  380/FFFFFFFFFFFF234A :                     ; --------------------------------------------------
(1)  381/FFFFFFFFFFFF234A :                     ; Bibi
(1)  382/FFFFFFFFFFFF234A :                     ; --------------------------------------------------
(1)  383/FFFFFFFFFFFF234A :                     
(1)  384/FFFFFFFFFFFF234A :                     Obj_Bibi:
(1)  385/FFFFFFFFFFFF234A : 7000                		moveq	#0,d0
(1)  386/FFFFFFFFFFFF234C : 102E 0021           		move.b	obj_index(a6),d0
(1)  387/FFFFFFFFFFFF2350 : D040                		add.w	d0,d0
(1)  388/FFFFFFFFFFFF2352 : 323B 0006           		move.w	.list(pc,d0.w),d1
(1)  389/FFFFFFFFFFFF2356 : 4EFB 1002           		jmp	.list(pc,d1.w)
(1)  390/FFFFFFFFFFFF235A :                     ; ----------------------------------------------
(1)  391/FFFFFFFFFFFF235A : 0004                .list:		dc.w .init-.list
(1)  392/FFFFFFFFFFFF235C : 003E                		dc.w .main-.list
(1)  393/FFFFFFFFFFFF235E :                     ; ----------------------------------------------
(1)  394/FFFFFFFFFFFF235E :                     .init:
(1)  395/FFFFFFFFFFFF235E : 1D7C 0001 0021      		move.b	#1,obj_index(a6)
(1)  396/FFFFFFFFFFFF2364 : 08AE 0007 0022      		bclr	#bitobj_Mars,obj_set(a6)	; Set as Genesis object
(1)  397/FFFFFFFFFFFF236A : 2D7C 0203 0202      		move.l	#$02030202,obj_size(a6)		; UDLR sizes
         FFFFFFFFFFFF2370 : 0010             
(1)  398/FFFFFFFFFFFF2372 : 3D7C 00A0 0004      		move.w	#(320/2),obj_x(a6)
(1)  399/FFFFFFFFFFFF2378 : 3D7C 0070 0008      		move.w	#(224/2),obj_y(a6)
(1)  400/FFFFFFFFFFFF237E : 2D7C 0020 0FBC      		move.l	#objMap_Bibi,obj_map(a6)
         FFFFFFFFFFFF2384 : 000C             
(1)  401/FFFFFFFFFFFF2386 : 3D7C 24A0 0014      		move.w	#setVram_Bibi|$2000,obj_vram(a6)
(1)  402/FFFFFFFFFFFF238C : 426E 001C           		clr.w	obj_frame(a6)
(1)  403/FFFFFFFFFFFF2390 : 6100 EACC           		bsr	object_ResetAnim
(1)  404/FFFFFFFFFFFF2394 : 6100 E99A           		bsr	object_ResetVars
(1)  405/FFFFFFFFFFFF2398 :                     
(1)  406/FFFFFFFFFFFF2398 :                     ; ----------------------------------------------
(1)  407/FFFFFFFFFFFF2398 :                     .main:
(1)  408/FFFFFFFFFFFF2398 : 7000                		moveq	#0,d0
(1)  409/FFFFFFFFFFFF239A : 4BF8 C014           		lea	(Controller_2).w,a5
(1)  410/FFFFFFFFFFFF239E : 0C15 0003           		cmp.b	#JoyID_Mouse,pad_id(a5)
(1)  411/FFFFFFFFFFFF23A2 : 6662                		bne.s	.no_mouse
(1)  412/FFFFFFFFFFFF23A4 : 3E2D 0002           		move.w	on_hold(a5),d7
(1)  413/FFFFFFFFFFFF23A8 : 0807 0000           		btst	#bitClickL,d7
(1)  414/FFFFFFFFFFFF23AC : 6704                		beq.s	.no_click
(1)  415/FFFFFFFFFFFF23AE : 7001                		moveq	#1,d0
(1)  416/FFFFFFFFFFFF23B0 : 6054                		bra.s	.no_mouse
(1)  417/FFFFFFFFFFFF23B2 :                     .no_click:
(1)  418/FFFFFFFFFFFF23B2 : 426E 0016           		clr.w	obj_x_spd(a6)
(1)  419/FFFFFFFFFFFF23B6 : 426E 0018           		clr.w	obj_y_spd(a6)
(1)  420/FFFFFFFFFFFF23BA : 3E2D 0008           		move.w	mouse_x(a5),d7
(1)  421/FFFFFFFFFFFF23BE : 3C2D 000A           		move.w	mouse_y(a5),d6
(1)  422/FFFFFFFFFFFF23C2 : 3A07                		move.w	d7,d5
(1)  423/FFFFFFFFFFFF23C4 : 8A46                		or.w	d6,d5
(1)  424/FFFFFFFFFFFF23C6 : 673E                		beq.s	.no_mouse
(1)  425/FFFFFFFFFFFF23C8 :                     
(1)  426/FFFFFFFFFFFF23C8 : 4A46                		tst.w	d6
(1)  427/FFFFFFFFFFFF23CA : 671C                		beq.s	.no_y_spd
(1)  428/FFFFFFFFFFFF23CC : 7003                		moveq	#3,d0
(1)  429/FFFFFFFFFFFF23CE : 08EE 0000 0022      		bset	#bitobj_flipH,obj_set(a6)
(1)  430/FFFFFFFFFFFF23D4 : 3A06                		move.w	d6,d5
(1)  431/FFFFFFFFFFFF23D6 : ED45                		asl.w	#6,d5
(1)  432/FFFFFFFFFFFF23D8 : 4A46                		tst.w	d6
(1)  433/FFFFFFFFFFFF23DA : 6A08                		bpl.s	.plus_y_spd
(1)  434/FFFFFFFFFFFF23DC : 08AE 0000 0022      		bclr	#bitobj_flipH,obj_set(a6)
(1)  435/FFFFFFFFFFFF23E2 : 5240                		addq.w	#1,d0
(1)  436/FFFFFFFFFFFF23E4 :                     .plus_y_spd:
(1)  437/FFFFFFFFFFFF23E4 : 3D45 0018           		move.w	d5,obj_y_spd(a6)
(1)  438/FFFFFFFFFFFF23E8 :                     .no_y_spd:
(1)  439/FFFFFFFFFFFF23E8 :                     
(1)  440/FFFFFFFFFFFF23E8 : 4A47                		tst.w	d7
(1)  441/FFFFFFFFFFFF23EA : 671A                		beq.s	.no_x_spd
(1)  442/FFFFFFFFFFFF23EC : 7002                		moveq	#2,d0
(1)  443/FFFFFFFFFFFF23EE : 08EE 0000 0022      		bset	#bitobj_flipH,obj_set(a6)
(1)  444/FFFFFFFFFFFF23F4 : 3A07                		move.w	d7,d5
(1)  445/FFFFFFFFFFFF23F6 : ED45                		asl.w	#6,d5
(1)  446/FFFFFFFFFFFF23F8 : 4A47                		tst.w	d7
(1)  447/FFFFFFFFFFFF23FA : 6A06                		bpl.s	.plus_x_spd
(1)  448/FFFFFFFFFFFF23FC : 08AE 0000 0022      		bclr	#bitobj_flipH,obj_set(a6)
(1)  449/FFFFFFFFFFFF2402 :                     .plus_x_spd:
(1)  450/FFFFFFFFFFFF2402 : 3D45 0016           		move.w	d5,obj_x_spd(a6)
(1)  451/FFFFFFFFFFFF2406 :                     .no_x_spd:
(1)  452/FFFFFFFFFFFF2406 :                     
(1)  453/FFFFFFFFFFFF2406 :                     ;
(1)  454/FFFFFFFFFFFF2406 :                     ; 		moveq	#2,d0
(1)  455/FFFFFFFFFFFF2406 :                     ; 		bset	#bitobj_flipH,obj_set(a6)
(1)  456/FFFFFFFFFFFF2406 :                     ; 		move.w	d7,d5
(1)  457/FFFFFFFFFFFF2406 :                     ; 		lsl.w	#3,d5
(1)  458/FFFFFFFFFFFF2406 :                     ; 		tst.w	d7
(1)  459/FFFFFFFFFFFF2406 :                     ; 		bpl.s	.no_x_spd
(1)  460/FFFFFFFFFFFF2406 :                     ; 		neg.w	d5
(1)  461/FFFFFFFFFFFF2406 :                     ; 		bclr	#bitobj_flipH,obj_set(a6)
(1)  462/FFFFFFFFFFFF2406 :                     ; .no_x_spd:
(1)  463/FFFFFFFFFFFF2406 :                     ; 		move.w	d5,obj_x_spd(a6)
(1)  464/FFFFFFFFFFFF2406 :                     
(1)  465/FFFFFFFFFFFF2406 :                     .no_mouse:
(1)  466/FFFFFFFFFFFF2406 : 1D40 001E           		move.b	d0,obj_anim_id(a6)
(1)  467/FFFFFFFFFFFF240A :                     ; 		lea	obj_ram(a6),a5
(1)  468/FFFFFFFFFFFF240A :                     ; 		sub.w	#1,(a5)
(1)  469/FFFFFFFFFFFF240A :                     ; 		bpl.s	.keep_moving
(1)  470/FFFFFFFFFFFF240A :                     ; 		move.w	2(a5),d1
(1)  471/FFFFFFFFFFFF240A :                     ; 		addq.w	#4,d1			; Start at 4
(1)  472/FFFFFFFFFFFF240A :                     ; 		move.b	d1,obj_anim_id(a6)
(1)  473/FFFFFFFFFFFF240A :                     ; 		lsl.w	#2,d1
(1)  474/FFFFFFFFFFFF240A :                     ; 		lea	.set_spds(pc,d1.w),a0
(1)  475/FFFFFFFFFFFF240A :                     ; 		move.w	(a0),obj_x_spd(a6)
(1)  476/FFFFFFFFFFFF240A :                     ; 		move.w	2(a0),obj_y_spd(a6)
(1)  477/FFFFFFFFFFFF240A :                     ; 		bclr	#bitobj_flipH,obj_set(a6)
(1)  478/FFFFFFFFFFFF240A :                     ; 		tst.w	obj_x_spd(a6)
(1)  479/FFFFFFFFFFFF240A :                     ; 		bmi.s	.flip_x
(1)  480/FFFFFFFFFFFF240A :                     ; 		bset	#bitobj_flipH,obj_set(a6)
(1)  481/FFFFFFFFFFFF240A :                     ; .flip_x:
(1)  482/FFFFFFFFFFFF240A :                     ; 		addq.w	#1,2(a5)
(1)  483/FFFFFFFFFFFF240A :                     ; 		andi.w	#%11,2(a5)
(1)  484/FFFFFFFFFFFF240A :                     ; 		move.w	#$100,(a5)		; Reset timer
(1)  485/FFFFFFFFFFFF240A :                     ; .keep_moving:
(1)  486/FFFFFFFFFFFF240A : 6100 EA62           		bsr	object_Speed
(1)  487/FFFFFFFFFFFF240E : 41FA 001A           		lea	.anim_data(pc),a0
(1)  488/FFFFFFFFFFFF2412 : 6100 E9B6           		bsr	object_Animate
(1)  489/FFFFFFFFFFFF2416 :                     
(1)  490/FFFFFFFFFFFF2416 : 41F9 0020 109C      		lea	(objDma_Bibi),a0
(1)  491/FFFFFFFFFFFF241C : 43F9 0020 ACB4      		lea	(Art_Bibi),a1
(1)  492/FFFFFFFFFFFF2422 : 6100 E94A           		bsr	object_DMA
(1)  493/FFFFFFFFFFFF2426 : 6000 E922           		bra	object_Display
(1)  494/FFFFFFFFFFFF242A :                     
(1)  495/FFFFFFFFFFFF242A :                     ; ----------------------------------------------
(1)  496/FFFFFFFFFFFF242A :                     
(1)  497/FFFFFFFFFFFF242A :                     ; .set_spds:
(1)  498/FFFFFFFFFFFF242A :                     ; 		dc.w  $0080, $0000	; Right
(1)  499/FFFFFFFFFFFF242A :                     ; 		dc.w  $0000, $0080	; Down
(1)  500/FFFFFFFFFFFF242A :                     ; 		dc.w -$0080, $0000	; Left
(1)  501/FFFFFFFFFFFF242A :                     ; 		dc.w  $0000,-$0080	; Up
(1)  502/FFFFFFFFFFFF242A :                     .anim_data:
(1)  503/FFFFFFFFFFFF242A : 000A                		dc.w .stand-.anim_data
(1)  504/FFFFFFFFFFFF242C : 0034                		dc.w .yatta-.anim_data
(1)  505/FFFFFFFFFFFF242E : 0028                		dc.w .walk_lr-.anim_data
(1)  506/FFFFFFFFFFFF2430 : 0010                		dc.w .walk_d-.anim_data
(1)  507/FFFFFFFFFFFF2432 : 001C                		dc.w .walk_u-.anim_data
(1)  508/FFFFFFFFFFFF2434 :                     .stand:
(1)  509/FFFFFFFFFFFF2434 : 0007                		dc.w 7
(1)  510/FFFFFFFFFFFF2436 : 0000                		dc.w 0
(1)  511/FFFFFFFFFFFF2438 : FFFF                		dc.w -1
(1)  512/FFFFFFFFFFFF243A :                     .walk_d:
(1)  513/FFFFFFFFFFFF243A : 0007                		dc.w 7
(1)  514/FFFFFFFFFFFF243C : 0000 0001 0000      		dc.w 0,1,0,2
         FFFFFFFFFFFF2442 : 0002             
(1)  515/FFFFFFFFFFFF2444 : FFFF                		dc.w -1
(1)  516/FFFFFFFFFFFF2446 :                     .walk_u:
(1)  517/FFFFFFFFFFFF2446 : 0007                		dc.w 7
(1)  518/FFFFFFFFFFFF2448 : 0003 0004 0003      		dc.w 3,4,3,5
         FFFFFFFFFFFF244E : 0005             
(1)  519/FFFFFFFFFFFF2450 : FFFF                		dc.w -1
(1)  520/FFFFFFFFFFFF2452 :                     .walk_lr:
(1)  521/FFFFFFFFFFFF2452 : 0007                		dc.w 7
(1)  522/FFFFFFFFFFFF2454 : 0006 0007 0006      		dc.w 6,7,6,8
         FFFFFFFFFFFF245A : 0008             
(1)  523/FFFFFFFFFFFF245C : FFFF                		dc.w -1
(1)  524/FFFFFFFFFFFF245E :                     .yatta:
(1)  525/FFFFFFFFFFFF245E : 0007                		dc.w 7
(1)  526/FFFFFFFFFFFF2460 : 0009                		dc.w 9
(1)  527/FFFFFFFFFFFF2462 : FFFF                		dc.w -1
(1)  528/FFFFFFFFFFFF2464 :                     
(1)  529/FFFFFFFFFFFF2464 :                     ; ====================================================================
(1)  530/FFFFFFFFFFFF2464 :                     ; ------------------------------------------------------
(1)  531/FFFFFFFFFFFF2464 :                     ; Subroutines
(1)  532/FFFFFFFFFFFF2464 :                     ; ------------------------------------------------------
(1)  533/FFFFFFFFFFFF2464 :                     
(1)  534/FFFFFFFFFFFF2464 :                     ShowMe_Who:
(1)  535/FFFFFFFFFFFF2464 : 43FA 00C6           		lea	list_WhoIAm(pc),a1
(1)  536/FFFFFFFFFFFF2468 :                     
(1)  537/FFFFFFFFFFFF2468 : 2638 D408           		move.l	(RAM_WhoIAm).w,d3
(1)  538/FFFFFFFFFFFF246C : 4A83                		tst.l	d3
(1)  539/FFFFFFFFFFFF246E : 6728                		beq.s	.nadie
(1)  540/FFFFFFFFFFFF2470 : 2443                		move.l	d3,a2
(1)  541/FFFFFFFFFFFF2472 : 41FA 0090           		lea	str_ListWho(pc),a0
(1)  542/FFFFFFFFFFFF2476 :                     .next_one:
(1)  543/FFFFFFFFFFFF2476 : 2011                		move.l	(a1),d0
(1)  544/FFFFFFFFFFFF2478 : 3229 0004           		move.w	4(a1),d1
(1)  545/FFFFFFFFFFFF247C : B0BC FFFF FFFF      		cmp.l	#-1,d0
(1)  546/FFFFFFFFFFFF2482 : 6714                		beq.s	.nadie
(1)  547/FFFFFFFFFFFF2484 : B092                		cmp.l	obj_code(a2),d0
(1)  548/FFFFFFFFFFFF2486 : 6606                		bne.s	.not_this
(1)  549/FFFFFFFFFFFF2488 : B22A 0023           		cmp.b	obj_subid(a2),d1
(1)  550/FFFFFFFFFFFF248C : 670E                		beq.s	.found
(1)  551/FFFFFFFFFFFF248E :                     .not_this:
(1)  552/FFFFFFFFFFFF248E : D2FC 0006           		adda	#6,a1
(1)  553/FFFFFFFFFFFF2492 : D0FC 0008           		adda	#8,a0
(1)  554/FFFFFFFFFFFF2496 : 60DE                		bra.s	.next_one
(1)  555/FFFFFFFFFFFF2498 :                     .nadie:
(1)  556/FFFFFFFFFFFF2498 : 41FA 0062           		lea	str_Nadie(pc),a0
(1)  557/FFFFFFFFFFFF249C :                     .found:
(1)  558/FFFFFFFFFFFF249C : 203C 0000 1502      		move.l	#locate(21,2,0),d0
(1)  559/FFFFFFFFFFFF24A2 : 6000 E51E           		bra	Video_Print
(1)  560/FFFFFFFFFFFF24A6 :                     
(1)  561/FFFFFFFFFFFF24A6 :                     ; ====================================================================
(1)  562/FFFFFFFFFFFF24A6 :                     ; ------------------------------------------------------
(1)  563/FFFFFFFFFFFF24A6 :                     ; Custom VBlank
(1)  564/FFFFFFFFFFFF24A6 :                     ; ------------------------------------------------------
(1)  565/FFFFFFFFFFFF24A6 :                     
(1)  566/FFFFFFFFFFFF24A6 :                     ; ------------------------------------------------------
(1)  567/FFFFFFFFFFFF24A6 :                     ; Custom HBlank
(1)  568/FFFFFFFFFFFF24A6 :                     ; ------------------------------------------------------
(1)  569/FFFFFFFFFFFF24A6 :                     
(1)  570/FFFFFFFFFFFF24A6 :                     ; ====================================================================
(1)  571/FFFFFFFFFFFF24A6 :                     ; ------------------------------------------------------
(1)  572/FFFFFFFFFFFF24A6 :                     ; Small DATA section
(1)  573/FFFFFFFFFFFF24A6 :                     ; ------------------------------------------------------
(1)  574/FFFFFFFFFFFF24A6 :                     
(1)  575/FFFFFFFFFFFF24A6 :                     PAL_SCR0_TEST:
(1)  576/FFFFFFFFFFFF24A6 :                     		binclude "game/screen_0/data/md/maps/test/md_pal.bin"
(1)  577/FFFFFFFFFFFF24C6 :                     		align 2
(1)  578/FFFFFFFFFFFF24C8 :                     str_Scrn0Intro:
(1)  579/FFFFFFFFFFFF24C8 : 5072 6F62 616E      		dc.b "Probando colision con objectos",$A
         FFFFFFFFFFFF24CE : 646F 2063 6F6C 
         FFFFFFFFFFFF24D4 : 6973 696F 6E20 
         FFFFFFFFFFFF24DA : 636F 6E20 6F62 
         FFFFFFFFFFFF24E0 : 6A65 6374 6F73 0A 
(1)  580/FFFFFFFFFFFF24E7 : 456D 696C 6979      		dc.b "Emiliy toca toca a:",0
         FFFFFFFFFFFF24ED : 2074 6F63 6120 
         FFFFFFFFFFFF24F3 : 746F 6361 2061 
         FFFFFFFFFFFF24F9 : 3A00             
(1)  581/FFFFFFFFFFFF24FB :                     		align 2
(1)  582/FFFFFFFFFFFF24FC : 4E41 4449 4520      str_Nadie:	dc.b "NADIE  ",0
         FFFFFFFFFFFF2502 : 2000             
(1)  583/FFFFFFFFFFFF2504 : 4269 6269 2020      str_ListWho:	dc.b "Bibi   ",0
         FFFFFFFFFFFF250A : 2000             
(1)  584/FFFFFFFFFFFF250C : 446F 7265 6D69      		dc.b "Doremi ",0
         FFFFFFFFFFFF2512 : 2000             
(1)  585/FFFFFFFFFFFF2514 : 536F 7068 6965      		dc.b "Sophie ",0
         FFFFFFFFFFFF251A : 2000             
(1)  586/FFFFFFFFFFFF251C : 4E69 636F 6C65      		dc.b "Nicole ",0
         FFFFFFFFFFFF2522 : 2000             
(1)  587/FFFFFFFFFFFF2524 : 4E69 6B6F 6E61      		dc.b "Nikona ",0
         FFFFFFFFFFFF252A : 2000             
(1)  588/FFFFFFFFFFFF252C : FFFF 234A           list_WhoIAm:	dc.l Obj_Bibi
(1)  589/FFFFFFFFFFFF2530 : 0000                		dc.w 0
(1)  590/FFFFFFFFFFFF2532 : FFFF 227A           		dc.l Obj_Doremi
(1)  591/FFFFFFFFFFFF2536 : 0000                		dc.w 0
(1)  592/FFFFFFFFFFFF2538 : FFFF 227A           		dc.l Obj_Doremi
(1)  593/FFFFFFFFFFFF253C : 0001                		dc.w 1
(1)  594/FFFFFFFFFFFF253E : FFFF 227A           		dc.l Obj_Doremi
(1)  595/FFFFFFFFFFFF2542 : 0002                		dc.w 2
(1)  596/FFFFFFFFFFFF2544 : FFFF FFFF           		dc.l -1
(1)  597/FFFFFFFFFFFF2548 : 0000                		dc.w 0
(1)  598/FFFFFFFFFFFF254A :                     
(1)  599/FFFFFFFFFFFF254A : 5C77 207C 205C      str_ShowMe:	dc.b "\\w | \\w \\w",0
         FFFFFFFFFFFF2550 : 7720 5C77 00       
(1)  600/FFFFFFFFFFFF2555 : 00FF 0000 00FF      		dc.l $FF0000,$FF0004,$FF0006
         FFFFFFFFFFFF255B : 0004 00FF 0006    
(1)  601/FFFFFFFFFFFF2561 :                     		align 2
(1)  602/FFFFFFFFFFFF2562 :                     
(1)  603/FFFFFFFFFFFF2562 :                     ; List_ObjPos:	dc.w 1
(1)  604/FFFFFFFFFFFF2562 :                     ; 		dc.w 215,164
(1)  605/FFFFFFFFFFFF2562 :                     ; 		dc.w $4000|setVram_Generic+(4*6)
(1)  606/FFFFFFFFFFFF2562 :                     ; 		dc.l objMap_Doremi
(1)  607/FFFFFFFFFFFF2562 :                     ; 		dc.l objDma_Doremi
(1)  608/FFFFFFFFFFFF2562 :                     ; 		dc.w $70,$40
(1)  609/FFFFFFFFFFFF2562 :                     ; 		dc.w $4000|setVram_Generic+(4*6)
(1)  610/FFFFFFFFFFFF2562 :                     ; 		dc.l objMap_Doremi
(1)  611/FFFFFFFFFFFF2562 :                     ; 		dc.l objDma_Doremi
(1)  612/FFFFFFFFFFFF2562 :                     ; 		dc.w $50,$80
(1)  613/FFFFFFFFFFFF2562 :                     ; 		dc.w $4000|setVram_Generic+(4*6)
(1)  614/FFFFFFFFFFFF2562 :                     ; 		dc.l objMap_Doremi
(1)  615/FFFFFFFFFFFF2562 :                     ; 		dc.l objDma_Doremi
(1)  616/FFFFFFFFFFFF2562 :                     ; 		dc.w $30,$C0
(1)  617/FFFFFFFFFFFF2562 :                     ; 		dc.w $4000|setVram_Generic+(4*6)
(1)  618/FFFFFFFFFFFF2562 :                     ; 		dc.l objMap_Doremi
(1)  619/FFFFFFFFFFFF2562 :                     ; 		dc.l objDma_Doremi
(1)  620/FFFFFFFFFFFF2562 :                     
     364/FFFFFFFFFFFF2562 :                     mcscrn_e:
     364/FFFFFFFFFFFFD966 :                                     dephase
     364/   66D62 :                                     phase mctopscrn+(mcscrn_e-RAM_UserCode)
     364/   66D62 :                                     align $800
     364/   67000 :                     ; Md_Screen00_e:
     364/   67000 : =$67000              MD_SCREEN00_E label *
     364/   67000 :  (MACRO-2)                           report "SCREEN MODE: MD_SCREEN00",mcscrn_e-RAM_UserCode,MAX_UserCode
     365/   67000 : (MACRO)              	screen_code Md_Screen01,Md_Screen01_e,"game/screen_1/code.asm"
     365/   67000 :                                     align $800              ; SCD/CD32X sector align
     365/   67000 : =$67000              MD_SCREEN01 label *
     365/   67000 :                     
     365/   67000 :                     mctopscrn:
     365/FFFFFFFFFFFF2000 :                                     phase RAM_UserCode      ; SCD/32X/CD32X relocate to RAM area
     365/FFFFFFFFFFFF2000 :                     mcscrn_s:
     365/FFFFFFFFFFFF2000 :                             include "game/screen_1/code.asm";"game/screen_0/code.asm"
(1)    1/FFFFFFFFFFFF2000 :                     ; ===========================================================================
(1)    2/FFFFFFFFFFFF2000 :                     ; ----------------------------------------------------------------
(1)    3/FFFFFFFFFFFF2000 :                     ; SCREEN CODE
(1)    4/FFFFFFFFFFFF2000 :                     ; ----------------------------------------------------------------
(1)    5/FFFFFFFFFFFF2000 :                     
(1)    6/FFFFFFFFFFFF2000 :                     ; ====================================================================
(1)    7/FFFFFFFFFFFF2000 :                     ; ------------------------------------------------------
(1)    8/FFFFFFFFFFFF2000 :                     ; Variables
(1)    9/FFFFFFFFFFFF2000 :                     ; ------------------------------------------------------
(1)   10/FFFFFFFFFFFF2000 :                     
(1)   11/FFFFFFFFFFFF2000 : =$440                setVram_Mikami		equ $0440
(1)   12/FFFFFFFFFFFF2000 : =$480                setVram_Sisi		equ $0480
(1)   13/FFFFFFFFFFFF2000 :                     
(1)   14/FFFFFFFFFFFF2000 :                     ; ====================================================================
(1)   15/FFFFFFFFFFFF2000 :                     ; ------------------------------------------------------
(1)   16/FFFFFFFFFFFF2000 :                     ; Structs
(1)   17/FFFFFFFFFFFF2000 :                     ; ------------------------------------------------------
(1)   18/FFFFFFFFFFFF2000 :                     
(1)   19/FFFFFFFFFFFF2000 :                     ; 			strct 0
(1)   20/FFFFFFFFFFFF2000 :                     ; strc_xpos		ds.w 1
(1)   21/FFFFFFFFFFFF2000 :                     ; strc_ypos		ds.w 1
(1)   22/FFFFFFFFFFFF2000 :                     ; 			endstrct
(1)   23/FFFFFFFFFFFF2000 :                     
(1)   24/FFFFFFFFFFFF2000 :                     ; ====================================================================
(1)   25/FFFFFFFFFFFF2000 :                     ; ------------------------------------------------------
(1)   26/FFFFFFFFFFFF2000 :                     ; This mode's RAM
(1)   27/FFFFFFFFFFFF2000 :                     ; ------------------------------------------------------
(1)   28/FFFFFFFFFFFF2000 :                     
(1)   29/FFFFFFFFFFFF2000 :  (MACRO-2)           			strct RAM_ScrnBuff
(1)   29/FFFFFFFFFFFF2000 : =$FFFFFFFFFFFF2000   GLBL_LASTPC     set *
(1)   29/   67000 :                                     dephase
(1)   29/FFFFFFFFFFFFD404 :                                     phase RAM_SCRNBUFF
(1)   29/FFFFFFFFFFFFD404 : =$FFFFFFFFFFFFD404   GLBL_LASTORG    set *
(1)   30/FFFFFFFFFFFFD404 :                     RAM_CurrPick		ds.w 1
(1)   31/FFFFFFFFFFFFD406 :                     RAM_GemaArg0		ds.w 1
(1)   32/FFFFFFFFFFFFD408 :                     RAM_GemaArg1		ds.w 1
(1)   33/FFFFFFFFFFFFD40A :                     RAM_GemaArg2		ds.w 1
(1)   34/FFFFFFFFFFFFD40C :                     RAM_GemaArg3		ds.w 1
(1)   35/FFFFFFFFFFFFD40E :                     RAM_GemaArg4		ds.w 1
(1)   36/FFFFFFFFFFFFD410 :                     RAM_GemaArg5		ds.w 1
(1)   37/FFFFFFFFFFFFD412 :                     RAM_ChnlLinks		ds.w 26
(1)   38/FFFFFFFFFFFFD446 :                     sizeof_thisbuff		ds.l 0
(1)   39/FFFFFFFFFFFFD44C :  (MACRO-2)           			endstrct
(1)   39/FFFFFFFFFFFFD404 :                                     org GLBL_LASTORG
(1)   39/FFFFFFFFFFFF2000 :                                     phase GLBL_LASTPC
(1)   40/FFFFFFFFFFFF2000 :                     
(1)   41/FFFFFFFFFFFF2000 :  (MACRO-2)           	erreport "SCREEN",sizeof_thisbuff-RAM_ScrnBuff,MAX_ScrnBuff
(1)   42/FFFFFFFFFFFF2000 :                     
(1)   43/FFFFFFFFFFFF2000 :                     ; ====================================================================
(1)   44/FFFFFFFFFFFF2000 :                     ; ------------------------------------------------------
(1)   45/FFFFFFFFFFFF2000 :                     ; Init
(1)   46/FFFFFFFFFFFF2000 :                     ; ------------------------------------------------------
(1)   47/FFFFFFFFFFFF2000 :                     
(1)   48/FFFFFFFFFFFF2000 : 6100 F33A           		bsr	Mode_Init
(1)   49/FFFFFFFFFFFF2004 :  (MACRO-2)           		set_dbanks file_mddata_def,pointr_marsdata_def
(1)   49/FFFFFFFFFFFF2004 : 6100 F3E8                           bsr     System_McdSubWait
(1)   49/FFFFFFFFFFFF2008 : 41FA 02B8                           lea     FILE_MDDATA_DEF(pc),a0           ; CD/CD32X: Genesis data
(1)   49/FFFFFFFFFFFF200C : 6100 F40A                           bsr     System_McdTrnsfr_WRAM
(1)   50/FFFFFFFFFFFF2010 :                     
(1)   51/FFFFFFFFFFFF2010 :                     	; ----------------------------------------------
(1)   52/FFFFFFFFFFFF2010 :                     	; Load assets
(1)   74/FFFFFFFFFFFF2010 : 203C 0021 0D74      		move.l	#ART_TEST,d0
(1)   75/FFFFFFFFFFFF2016 : 323C 0020           		move.w	#cell_vram($0001),d1
(1)   76/FFFFFFFFFFFF201A : 343C 8780           		move.w	#ART_TEST_E-ART_TEST,d2
(1)   77/FFFFFFFFFFFF201E : 6100 E556           		bsr	Video_LoadArt
(1)   78/FFFFFFFFFFFF2022 : 41F9 0020 15D8      		lea	(MAP_TEST),a0			; long lea
(1)   79/FFFFFFFFFFFF2028 : 203C 0001 0000      		move.l	#locate(0,0,1),d0
(1)   80/FFFFFFFFFFFF202E : 223C 0027 001B      		move.l	#map_size(320,224),d1
(1)   81/FFFFFFFFFFFF2034 : 343C 0001           		move.w	#$0001,d2
(1)   82/FFFFFFFFFFFF2038 : 6100 E908           		bsr	Video_LoadMap
(1)   84/FFFFFFFFFFFF203C : 41F9 0021 0174      		lea	(ASCII_FONT_S1).l,a0
(1)   85/FFFFFFFFFFFF2042 : 43F9 FFFF 0300      		lea	(ASCII_PAL).l,a1
(1)   86/FFFFFFFFFFFF2048 : 6100 E94E           		bsr	Video_PrintInit
(1)   87/FFFFFFFFFFFF204C : 203C 0021 94F4      		move.l	#Art_Sisi,d0
(1)   88/FFFFFFFFFFFF2052 : 323C 9000           		move.w	#cell_vram(setVram_Sisi),d1
(1)   89/FFFFFFFFFFFF2056 : 343C 05E0           		move.w	#Art_Sisi_e-Art_Sisi,d2
(1)   90/FFFFFFFFFFFF205A : 6100 E51A           		bsr	Video_LoadArt
(1)   91/FFFFFFFFFFFF205E :                     
(1)   92/FFFFFFFFFFFF205E : 41FA 02F2           		lea	PAL_TEST(pc),a0
(1)   93/FFFFFFFFFFFF2062 : 7000                		moveq	#0,d0
(1)   94/FFFFFFFFFFFF2064 : 323C 0010           		move.w	#16,d1
(1)   95/FFFFFFFFFFFF2068 : 6100 E398           		bsr	Video_FadePal
(1)   96/FFFFFFFFFFFF206C : 41F9 0020 1E98      		lea	(objPal_Sisi),a0
(1)   97/FFFFFFFFFFFF2072 : 7010                		moveq	#16,d0
(1)   98/FFFFFFFFFFFF2074 : 323C 0010           		move.w	#16,d1
(1)   99/FFFFFFFFFFFF2078 : 6100 E388           		bsr	Video_FadePal
(1)  100/FFFFFFFFFFFF207C : 41FA 02F2           		lea	str_TesterInit(pc),a0
(1)  101/FFFFFFFFFFFF2080 : 203C 0000 0101      		move.l	#locate(1,1,0),d0
(1)  102/FFFFFFFFFFFF2086 : 6100 E93A           		bsr	Video_Print
(1)  103/FFFFFFFFFFFF208A :                     ; 		move.l	#Object_Mikami,d0
(1)  104/FFFFFFFFFFFF208A :                     ; 		moveq	#0,d1
(1)  105/FFFFFFFFFFFF208A :                     ; 		bsr	Objects_Set
(1)  106/FFFFFFFFFFFF208A : 203C FFFF 22E2      		move.l	#Object_Sisi,d0
(1)  107/FFFFFFFFFFFF2090 : 6100 EB80           		bsr	Objects_Add
(1)  108/FFFFFFFFFFFF2094 :                     	; ----------------------------------------------
(1)  109/FFFFFFFFFFFF2094 : 4278 D406           		clr.w	(RAM_GemaArg0).w
(1)  110/FFFFFFFFFFFF2098 : 4278 D408           		clr.w	(RAM_GemaArg1).w
(1)  111/FFFFFFFFFFFF209C : 4278 D40A           		clr.w	(RAM_GemaArg2).w
(1)  112/FFFFFFFFFFFF20A0 : 4278 D40C           		clr.w	(RAM_GemaArg3).w
(1)  113/FFFFFFFFFFFF20A4 : 4278 D40E           		clr.w	(RAM_GemaArg4).w
(1)  114/FFFFFFFFFFFF20A8 : 4278 D410           		clr.w	(RAM_GemaArg5).w
(1)  115/FFFFFFFFFFFF20AC : 303C 00D6           		move.w	#214,d0
(1)  116/FFFFFFFFFFFF20B0 : 6100 E1DA           		bsr	gemaSetBeats
(1)  117/FFFFFFFFFFFF20B4 :                     ; 		moveq	#1,d0
(1)  118/FFFFFFFFFFFF20B4 :                     ; 		bsr	gemaPlayTrack
(1)  119/FFFFFFFFFFFF20B4 :                     
(1)  120/FFFFFFFFFFFF20B4 :                     	; ----------------------------------------------
(1)  121/FFFFFFFFFFFF20B4 : 6100 00B0           		bsr	.show_me
(1)  122/FFFFFFFFFFFF20B8 :                     ; 		bsr	.steal_vars
(1)  123/FFFFFFFFFFFF20B8 : 6100 EB04           		bsr	Objects_Run
(1)  124/FFFFFFFFFFFF20BC :                     	; ----------------------------------------------
(1)  125/FFFFFFFFFFFF20BC : 08F9 0006 FFFF      		bset	#bitDispEnbl,(RAM_VdpRegs+1).l		; Enable display
         FFFFFFFFFFFF20C2 : B8F7             
(1)  126/FFFFFFFFFFFF20C4 : 11FC 0081 B902      		move.b	#%10000001,(RAM_VdpRegs+$C).w		; H40 + shadow mode
(1)  127/FFFFFFFFFFFF20CA : 6100 E202           		bsr	Video_Update
(1)  128/FFFFFFFFFFFF20CE : 6100 E2CE           		bsr	Video_FadeIn
(1)  129/FFFFFFFFFFFF20D2 :                     
(1)  130/FFFFFFFFFFFF20D2 :                     ; ====================================================================
(1)  131/FFFFFFFFFFFF20D2 :                     ; ------------------------------------------------------
(1)  132/FFFFFFFFFFFF20D2 :                     ; Loop
(1)  133/FFFFFFFFFFFF20D2 :                     ; ------------------------------------------------------
(1)  134/FFFFFFFFFFFF20D2 :                     
(1)  135/FFFFFFFFFFFF20D2 :                     .loop:
(1)  136/FFFFFFFFFFFF20D2 : 6100 EEE0           		bsr	System_Render
(1)  137/FFFFFFFFFFFF20D6 :                     
(1)  138/FFFFFFFFFFFF20D6 :                     ; 		bsr	.steal_vars
(1)  139/FFFFFFFFFFFF20D6 : 6100 EAE6           		bsr	Objects_Run
(1)  140/FFFFFFFFFFFF20DA : 41FA 03A6           		lea	str_Info(pc),a0
(1)  141/FFFFFFFFFFFF20DE : 203C 0000 1F1A      		move.l	#locate(31,26,0),d0
(1)  142/FFFFFFFFFFFF20E4 : 6100 E8DC           		bsr	Video_Print
(1)  143/FFFFFFFFFFFF20E8 :                     
(1)  144/FFFFFFFFFFFF20E8 :                     	; Controls
(1)  146/FFFFFFFFFFFF20E8 : 4DF8 C004           		lea	(Controller_1).w,a6
(1)  147/FFFFFFFFFFFF20EC : 3E2E 0004           		move.w	on_press(a6),d7
(1)  148/FFFFFFFFFFFF20F0 : 0807 000B           		btst	#bitJoyMode,d7
(1)  149/FFFFFFFFFFFF20F4 : 6710                		beq.s	.n_aplay
(1)  150/FFFFFFFFFFFF20F6 :                     ; 		moveq	#1,d0
(1)  151/FFFFFFFFFFFF20F6 :                     ; 		bsr	Video_MdMarsGfxMode
(1)  152/FFFFFFFFFFFF20F6 : 33FC 0002 00A1      		move.w	#$0002,(sysmcd_reg+mcd_dcomm_m).l
         FFFFFFFFFFFF20FC : 2010             
(1)  153/FFFFFFFFFFFF20FE : 303C 0010           		move.w	#$0010,d0
(1)  154/FFFFFFFFFFFF2102 : 6100 F2F8           		bsr	System_McdSubTask
(1)  155/FFFFFFFFFFFF2106 :                     .n_aplay:
(1)  157/FFFFFFFFFFFF2106 :                     
(1)  158/FFFFFFFFFFFF2106 : 4DF8 C004           		lea	(Controller_1).w,a6
(1)  159/FFFFFFFFFFFF210A : 4BF8 D404           		lea	(RAM_CurrPick).w,a5
(1)  160/FFFFFFFFFFFF210E :                     	; UP/DOWN
(1)  161/FFFFFFFFFFFF210E : 3E2E 0002           		move.w	on_hold(a6),d7
(1)  162/FFFFFFFFFFFF2112 : 0807 0004           		btst	#bitJoyB,d7
(1)  163/FFFFFFFFFFFF2116 : 6626                		bne.s.	.n_up
(1)  164/FFFFFFFFFFFF2118 : 3E2E 0004           		move.w	on_press(a6),d7
(1)  165/FFFFFFFFFFFF211C : 0807 0001           		btst	#bitJoyDown,d7
(1)  166/FFFFFFFFFFFF2120 : 670A                		beq.s	.n_down
(1)  167/FFFFFFFFFFFF2122 : 0C55 0007           		cmp.w	#7,(a5)		; MAX OPTIONS
(1)  168/FFFFFFFFFFFF2126 : 6704                		beq.s	.n_down
(1)  169/FFFFFFFFFFFF2128 : 5255                		addq.w	#1,(a5)
(1)  170/FFFFFFFFFFFF212A : 613A                		bsr.s	.show_me
(1)  171/FFFFFFFFFFFF212C :                     .n_down:
(1)  172/FFFFFFFFFFFF212C : 3E2E 0004           		move.w	on_press(a6),d7
(1)  173/FFFFFFFFFFFF2130 : 0807 0000           		btst	#bitJoyUp,d7
(1)  174/FFFFFFFFFFFF2134 : 6708                		beq.s	.n_up
(1)  175/FFFFFFFFFFFF2136 : 4A55                		tst.w	(a5)
(1)  176/FFFFFFFFFFFF2138 : 6704                		beq.s	.n_up
(1)  177/FFFFFFFFFFFF213A : 5355                		subq.w	#1,(a5)
(1)  178/FFFFFFFFFFFF213C : 6128                		bsr.s	.show_me
(1)  179/FFFFFFFFFFFF213E :                     .n_up:
(1)  180/FFFFFFFFFFFF213E : 3E38 D404           		move.w	(RAM_CurrPick).w,d7
(1)  181/FFFFFFFFFFFF2142 : E54F                		lsl.w	#2,d7
(1)  182/FFFFFFFFFFFF2144 : 4EBB 702E           		jsr	.jump_list(pc,d7.w)
(1)  183/FFFFFFFFFFFF2148 : 4A78 C458           		tst.w	(RAM_ScreenMode).w	; Check -1
(1)  184/FFFFFFFFFFFF214C : 6A14                		bpl.s	.n_cbtn
(1)  185/FFFFFFFFFFFF214E : 6100 E0E8           		bsr	gemaStopAll
(1)  186/FFFFFFFFFFFF2152 : 6100 EE60           		bsr	System_Render
(1)  187/FFFFFFFFFFFF2156 : 6100 E26C           		bsr	Video_FadeOut
(1)  188/FFFFFFFFFFFF215A : 31FC 0000 C458      		move.w	#0,(RAM_ScreenMode).w	; Return to mode 0
(1)  189/FFFFFFFFFFFF2160 : 4E75                		rts				; EXIT
(1)  190/FFFFFFFFFFFF2162 :                     .n_cbtn:
(1)  191/FFFFFFFFFFFF2162 : 6000 FF6E           		bra	.loop
(1)  192/FFFFFFFFFFFF2166 :                     ; ------------------------------------------------------
(1)  193/FFFFFFFFFFFF2166 :                     
(1)  194/FFFFFFFFFFFF2166 :                     .show_me:
(1)  195/FFFFFFFFFFFF2166 : 41FA 02EE           		lea	str_ShowMe(pc),a0
(1)  196/FFFFFFFFFFFF216A : 203C 0000 1705      		move.l	#locate(23,5,0),d0
(1)  197/FFFFFFFFFFFF2170 : 6000 E850           		bra	Video_Print
(1)  198/FFFFFFFFFFFF2174 :                     
(1)  199/FFFFFFFFFFFF2174 :                     ; ------------------------------------------------------
(1)  200/FFFFFFFFFFFF2174 :                     
(1)  201/FFFFFFFFFFFF2174 :                     .jump_list:
(1)  202/FFFFFFFFFFFF2174 : 6000 001E           		bra.w	.nothing
(1)  203/FFFFFFFFFFFF2178 : 6000 002C           		bra.w	.option_1
(1)  204/FFFFFFFFFFFF217C : 6000 00AE           		bra.w	.option_2
(1)  205/FFFFFFFFFFFF2180 : 6000 00C0           		bra.w	.option_3
(1)  206/FFFFFFFFFFFF2184 : 6000 00D2           		bra.w	.option_4
(1)  207/FFFFFFFFFFFF2188 : 6000 00E6           		bra.w	.option_5
(1)  208/FFFFFFFFFFFF218C : 6000 0006           		bra.w	.nothing
(1)  209/FFFFFFFFFFFF2190 : 6000 00F2           		bra.w	.option_7
(1)  210/FFFFFFFFFFFF2194 :                     
(1)  211/FFFFFFFFFFFF2194 :                     ; ------------------------------------------------------
(1)  212/FFFFFFFFFFFF2194 :                     ; OPTION 0
(1)  213/FFFFFFFFFFFF2194 :                     ; ------------------------------------------------------
(1)  214/FFFFFFFFFFFF2194 :                     
(1)  215/FFFFFFFFFFFF2194 :                     .nothing:
(1)  216/FFFFFFFFFFFF2194 : 3E2E 0004           		move.w	on_press(a6),d7
(1)  217/FFFFFFFFFFFF2198 : 0807 0007           		btst	#bitJoyStart,d7
(1)  218/FFFFFFFFFFFF219C : 6706                		beq.s	.no_press
(1)  219/FFFFFFFFFFFF219E : 61C6                		bsr.s	.show_me
(1)  220/FFFFFFFFFFFF21A0 : 6000 E032           		bra	gemaTest
(1)  221/FFFFFFFFFFFF21A4 :                     .no_press:
(1)  222/FFFFFFFFFFFF21A4 : 4E75                		rts
(1)  223/FFFFFFFFFFFF21A6 :                     
(1)  224/FFFFFFFFFFFF21A6 :                     ; ------------------------------------------------------
(1)  225/FFFFFFFFFFFF21A6 :                     ; OPTION 1
(1)  226/FFFFFFFFFFFF21A6 :                     ; ------------------------------------------------------
(1)  227/FFFFFFFFFFFF21A6 :                     
(1)  228/FFFFFFFFFFFF21A6 :                     .option_1:
(1)  229/FFFFFFFFFFFF21A6 : 4BF8 D406           		lea	(RAM_GemaArg0).w,a5
(1)  230/FFFFFFFFFFFF21AA : 3E2E 0004           		move.w	on_press(a6),d7
(1)  231/FFFFFFFFFFFF21AE : 0807 0007           		btst	#bitJoyStart,d7
(1)  232/FFFFFFFFFFFF21B2 : 671E                		beq.s	.option1_args
(1)  233/FFFFFFFFFFFF21B4 : 301D                		move.w	(a5)+,d0
(1)  234/FFFFFFFFFFFF21B6 : 321D                		move.w	(a5)+,d1
(1)  235/FFFFFFFFFFFF21B8 : 341D                		move.w	(a5)+,d2
(1)  236/FFFFFFFFFFFF21BA : 6100 E03E           		bsr	gemaPlayTrack
(1)  237/FFFFFFFFFFFF21BE : 3038 D408           		move.w	(RAM_GemaArg1).w,d0
(1)  238/FFFFFFFFFFFF21C2 : 3200                		move.w	d0,d1
(1)  239/FFFFFFFFFFFF21C4 : D241                		add.w	d1,d1
(1)  240/FFFFFFFFFFFF21C6 : 41FA 00CE           		lea	.extnal_beats(pc),a0
(1)  241/FFFFFFFFFFFF21CA : 3030 1000           		move.w	(a0,d1.w),d0
(1)  242/FFFFFFFFFFFF21CE : 6000 E0BC           		bra	gemaSetBeats
(1)  243/FFFFFFFFFFFF21D2 :                     ; 		bra.s	.show_me
(1)  244/FFFFFFFFFFFF21D2 :                     .option1_args:
(1)  245/FFFFFFFFFFFF21D2 : 3E2E 0002           		move.w	on_hold(a6),d7
(1)  246/FFFFFFFFFFFF21D6 : 3C07                		move.w	d7,d6
(1)  247/FFFFFFFFFFFF21D8 : 0246 0070           		andi.w	#JoyA+JoyB+JoyC,d6
(1)  248/FFFFFFFFFFFF21DC : 67C6                		beq.s	.no_press
(1)  249/FFFFFFFFFFFF21DE : 0807 0004           		btst	#bitJoyB,d7
(1)  250/FFFFFFFFFFFF21E2 : 6704                		beq.s	.d2_opt
(1)  251/FFFFFFFFFFFF21E4 : DAFC 0002           		adda	#2,a5
(1)  252/FFFFFFFFFFFF21E8 :                     .d2_opt:
(1)  253/FFFFFFFFFFFF21E8 : 0807 0005           		btst	#bitJoyC,d7
(1)  254/FFFFFFFFFFFF21EC : 6704                		beq.s	.d3_opt
(1)  255/FFFFFFFFFFFF21EE : DAFC 0004           		adda	#4,a5
(1)  256/FFFFFFFFFFFF21F2 :                     .d3_opt:
(1)  257/FFFFFFFFFFFF21F2 : 3E2E 0004           		move.w	on_press(a6),d7
(1)  258/FFFFFFFFFFFF21F6 : 0807 0003           		btst	#bitJoyRight,d7
(1)  259/FFFFFFFFFFFF21FA : 6706                		beq.s	.op1_right
(1)  260/FFFFFFFFFFFF21FC : 5255                		addq.w	#1,(a5)
(1)  261/FFFFFFFFFFFF21FE : 6000 FF66           		bra	.show_me
(1)  262/FFFFFFFFFFFF2202 :                     .op1_right:
(1)  263/FFFFFFFFFFFF2202 : 0807 0002           		btst	#bitJoyLeft,d7
(1)  264/FFFFFFFFFFFF2206 : 6706                		beq.s	.op1_left
(1)  265/FFFFFFFFFFFF2208 : 5355                		subq.w	#1,(a5)
(1)  266/FFFFFFFFFFFF220A : 6000 FF5A           		bra	.show_me
(1)  267/FFFFFFFFFFFF220E :                     .op1_left:
(1)  268/FFFFFFFFFFFF220E : 3E2E 0002           		move.w	on_hold(a6),d7
(1)  269/FFFFFFFFFFFF2212 : 0807 0000           		btst	#bitJoyUp,d7
(1)  270/FFFFFFFFFFFF2216 : 6706                		beq.s	.op1_down
(1)  271/FFFFFFFFFFFF2218 : 5255                		addq.w	#1,(a5)
(1)  272/FFFFFFFFFFFF221A : 6000 FF4A           		bra	.show_me
(1)  273/FFFFFFFFFFFF221E :                     .op1_down:
(1)  274/FFFFFFFFFFFF221E : 0807 0001           		btst	#bitJoyDown,d7
(1)  275/FFFFFFFFFFFF2222 : 6706                		beq.s	.op1_up
(1)  276/FFFFFFFFFFFF2224 : 5355                		subq.w	#1,(a5)
(1)  277/FFFFFFFFFFFF2226 : 6000 FF3E           		bra	.show_me
(1)  278/FFFFFFFFFFFF222A :                     .op1_up:
(1)  279/FFFFFFFFFFFF222A :                     
(1)  280/FFFFFFFFFFFF222A : 4E75                		rts
(1)  281/FFFFFFFFFFFF222C :                     
(1)  282/FFFFFFFFFFFF222C :                     ; ------------------------------------------------------
(1)  283/FFFFFFFFFFFF222C :                     ; OPTION 2
(1)  284/FFFFFFFFFFFF222C :                     ; ------------------------------------------------------
(1)  285/FFFFFFFFFFFF222C :                     
(1)  286/FFFFFFFFFFFF222C :                     .option_2:
(1)  287/FFFFFFFFFFFF222C : 4BF8 D406           		lea	(RAM_GemaArg0).w,a5
(1)  288/FFFFFFFFFFFF2230 : 3E2E 0004           		move.w	on_press(a6),d7
(1)  289/FFFFFFFFFFFF2234 : 0807 0007           		btst	#bitJoyStart,d7
(1)  290/FFFFFFFFFFFF2238 : 6798                		beq.s	.option1_args
(1)  291/FFFFFFFFFFFF223A : 301D                		move.w	(a5)+,d0
(1)  292/FFFFFFFFFFFF223C : 321D                		move.w	(a5)+,d1
(1)  293/FFFFFFFFFFFF223E : 6000 DFDC           		bra	gemaStopTrack
(1)  294/FFFFFFFFFFFF2242 :                     
(1)  295/FFFFFFFFFFFF2242 :                     ; ------------------------------------------------------
(1)  296/FFFFFFFFFFFF2242 :                     ; OPTION 3
(1)  297/FFFFFFFFFFFF2242 :                     ; ------------------------------------------------------
(1)  298/FFFFFFFFFFFF2242 :                     
(1)  299/FFFFFFFFFFFF2242 :                     .option_3:
(1)  300/FFFFFFFFFFFF2242 : 4BF8 D40C           		lea	(RAM_GemaArg3).w,a5
(1)  301/FFFFFFFFFFFF2246 : 3E2E 0004           		move.w	on_press(a6),d7
(1)  302/FFFFFFFFFFFF224A : 0807 0007           		btst	#bitJoyStart,d7
(1)  303/FFFFFFFFFFFF224E : 6782                		beq	.option1_args
(1)  304/FFFFFFFFFFFF2250 : 301D                		move.w	(a5)+,d0
(1)  305/FFFFFFFFFFFF2252 : 321D                		move.w	(a5)+,d1
(1)  306/FFFFFFFFFFFF2254 : 6000 DFFE           		bra	gemaFadeTrack
(1)  307/FFFFFFFFFFFF2258 :                     
(1)  308/FFFFFFFFFFFF2258 :                     ; ------------------------------------------------------
(1)  309/FFFFFFFFFFFF2258 :                     ; OPTION 4
(1)  310/FFFFFFFFFFFF2258 :                     ; ------------------------------------------------------
(1)  311/FFFFFFFFFFFF2258 :                     
(1)  312/FFFFFFFFFFFF2258 :                     .option_4:
(1)  313/FFFFFFFFFFFF2258 : 4BF8 D40C           		lea	(RAM_GemaArg3).w,a5
(1)  314/FFFFFFFFFFFF225C : 3E2E 0004           		move.w	on_press(a6),d7
(1)  315/FFFFFFFFFFFF2260 : 0807 0007           		btst	#bitJoyStart,d7
(1)  316/FFFFFFFFFFFF2264 : 6700 FF6C           		beq	.option1_args
(1)  317/FFFFFFFFFFFF2268 : 301D                		move.w	(a5)+,d0
(1)  318/FFFFFFFFFFFF226A : 321D                		move.w	(a5)+,d1
(1)  319/FFFFFFFFFFFF226C : 6000 E002           		bra	gemaSetTrackVol
(1)  320/FFFFFFFFFFFF2270 :                     
(1)  321/FFFFFFFFFFFF2270 :                     ; ------------------------------------------------------
(1)  322/FFFFFFFFFFFF2270 :                     ; OPTION 5
(1)  323/FFFFFFFFFFFF2270 :                     ; ------------------------------------------------------
(1)  324/FFFFFFFFFFFF2270 :                     
(1)  325/FFFFFFFFFFFF2270 :                     .option_5:
(1)  326/FFFFFFFFFFFF2270 : 3E2E 0004           		move.w	on_press(a6),d7
(1)  327/FFFFFFFFFFFF2274 : 0807 0007           		btst	#bitJoyStart,d7
(1)  328/FFFFFFFFFFFF2278 : 6708                		beq.s	.no_press2
(1)  329/FFFFFFFFFFFF227A : 6100 FEEA           		bsr	.show_me
(1)  330/FFFFFFFFFFFF227E : 6000 DFB8           		bra	gemaStopAll
(1)  331/FFFFFFFFFFFF2282 :                     .no_press2:
(1)  332/FFFFFFFFFFFF2282 : 4E75                		rts
(1)  333/FFFFFFFFFFFF2284 :                     
(1)  334/FFFFFFFFFFFF2284 :                     ; ------------------------------------------------------
(1)  335/FFFFFFFFFFFF2284 :                     ; OPTION 7
(1)  336/FFFFFFFFFFFF2284 :                     ; ------------------------------------------------------
(1)  337/FFFFFFFFFFFF2284 :                     
(1)  338/FFFFFFFFFFFF2284 :                     .option_7:
(1)  339/FFFFFFFFFFFF2284 : 3E2E 0004           		move.w	on_press(a6),d7
(1)  340/FFFFFFFFFFFF2288 : 0807 0007           		btst	#bitJoyStart,d7
(1)  341/FFFFFFFFFFFF228C : 67F4                		beq.s	.no_press2
(1)  342/FFFFFFFFFFFF228E : 31FC FFFF C458      		move.w	#-1,(RAM_ScreenMode).w	; risky but whatever.
(1)  343/FFFFFFFFFFFF2294 : 4E75                		rts
(1)  344/FFFFFFFFFFFF2296 :                     
(1)  345/FFFFFFFFFFFF2296 :                     ; ------------------------------------------------------
(1)  346/FFFFFFFFFFFF2296 :                     ; EXTERNAL BEATS FOR EACH TRACK
(1)  347/FFFFFFFFFFFF2296 :                     ; ------------------------------------------------------
(1)  348/FFFFFFFFFFFF2296 :                     
(1)  349/FFFFFFFFFFFF2296 :                     .extnal_beats:
(1)  350/FFFFFFFFFFFF2296 : 00D6                	dc.w 214
(1)  351/FFFFFFFFFFFF2298 : 00D6                	dc.w 214
(1)  352/FFFFFFFFFFFF229A : 00E8                	dc.w 200+32
(1)  353/FFFFFFFFFFFF229C : 00E8                	dc.w 200+32
(1)  354/FFFFFFFFFFFF229E : 00E8                	dc.w 200+32
(1)  355/FFFFFFFFFFFF22A0 : 00CC                	dc.w 200+4
(1)  356/FFFFFFFFFFFF22A2 : 00E8                	dc.w 200+32
(1)  357/FFFFFFFFFFFF22A4 : 00E8                	dc.w 200+32
(1)  358/FFFFFFFFFFFF22A6 : 00E8                	dc.w 200+32
(1)  359/FFFFFFFFFFFF22A8 : 00E8                	dc.w 200+32
(1)  360/FFFFFFFFFFFF22AA : 00E8                	dc.w 200+32
(1)  361/FFFFFFFFFFFF22AC : 00E8                	dc.w 200+32
(1)  362/FFFFFFFFFFFF22AE : 00E8                	dc.w 200+32
(1)  363/FFFFFFFFFFFF22B0 : 00E8                	dc.w 200+32
(1)  364/FFFFFFFFFFFF22B2 : 00E8                	dc.w 200+32
(1)  365/FFFFFFFFFFFF22B4 : 00E8                	dc.w 200+32
(1)  366/FFFFFFFFFFFF22B6 : 00E8                	dc.w 200+32
(1)  367/FFFFFFFFFFFF22B8 : 00E8                	dc.w 200+32
(1)  368/FFFFFFFFFFFF22BA : 00E8                	dc.w 200+32
(1)  369/FFFFFFFFFFFF22BC : 00E8                	dc.w 200+32
(1)  370/FFFFFFFFFFFF22BE : 00E8                	dc.w 200+32
(1)  371/FFFFFFFFFFFF22C0 : 00E8                	dc.w 200+32
(1)  372/FFFFFFFFFFFF22C2 :                     
(1)  373/FFFFFFFFFFFF22C2 :                     ; ====================================================================
(1)  374/FFFFFFFFFFFF22C2 :                     ; ------------------------------------------------------
(1)  375/FFFFFFFFFFFF22C2 :                     ; DATA assets locations for 68K and SH2
(1)  376/FFFFFFFFFFFF22C2 :                     ; ------------------------------------------------------
(1)  377/FFFFFFFFFFFF22C2 :                     
(1)  378/FFFFFFFFFFFF22C2 :                     file_mddata_def:
(1)  379/FFFFFFFFFFFF22C2 : 4441 5441 424E      		dc.b "DATABNKD.BIN",0		; CD Filename
         FFFFFFFFFFFF22C8 : 4B44 2E42 494E 00 
(1)  380/FFFFFFFFFFFF22CF :                     		align 2
(1)  381/FFFFFFFFFFFF22D0 :                     pointr_marsdata_def:
(1)  382/FFFFFFFFFFFF22D0 : 000B 2000           		dc.l MARSDATA_SCREEN01		; 32X Cartridge point
(1)  383/FFFFFFFFFFFF22D4 : 4D41 5253 445F      		dc.b "MARSD_01.BIN",0		; CD Filename
         FFFFFFFFFFFF22DA : 3031 2E42 494E 00 
(1)  384/FFFFFFFFFFFF22E1 :                     		align 2
(1)  385/FFFFFFFFFFFF22E2 :                     
(1)  386/FFFFFFFFFFFF22E2 :                     ; ====================================================================
(1)  387/FFFFFFFFFFFF22E2 :                     ; ------------------------------------------------------
(1)  388/FFFFFFFFFFFF22E2 :                     ; Objects
(1)  389/FFFFFFFFFFFF22E2 :                     ; ------------------------------------------------------
(1)  390/FFFFFFFFFFFF22E2 :                     
(1)  391/FFFFFFFFFFFF22E2 :                     ; ; --------------------------------------------------
(1)  392/FFFFFFFFFFFF22E2 :                     ; ; Mikami
(1)  393/FFFFFFFFFFFF22E2 :                     ; ; --------------------------------------------------
(1)  394/FFFFFFFFFFFF22E2 :                     ;
(1)  395/FFFFFFFFFFFF22E2 :                     ; Object_Mikami:
(1)  396/FFFFFFFFFFFF22E2 :                     ; 		moveq	#0,d0
(1)  397/FFFFFFFFFFFF22E2 :                     ; 		move.b	obj_index(a6),d0
(1)  398/FFFFFFFFFFFF22E2 :                     ; 		add.w	d0,d0
(1)  399/FFFFFFFFFFFF22E2 :                     ; 		move.w	.list(pc,d0.w),d1
(1)  400/FFFFFFFFFFFF22E2 :                     ; 		jmp	.list(pc,d1.w)
(1)  401/FFFFFFFFFFFF22E2 :                     ; ; ----------------------------------------------
(1)  402/FFFFFFFFFFFF22E2 :                     ; .list:		dc.w .init-.list
(1)  403/FFFFFFFFFFFF22E2 :                     ; 		dc.w .main-.list
(1)  404/FFFFFFFFFFFF22E2 :                     ; ; ----------------------------------------------
(1)  405/FFFFFFFFFFFF22E2 :                     ; .init:
(1)  406/FFFFFFFFFFFF22E2 :                     ; 		move.b	#1,obj_index(a6)
(1)  407/FFFFFFFFFFFF22E2 :                     ; 		move.l	#objMap_Mikami,obj_map(a6)
(1)  408/FFFFFFFFFFFF22E2 :                     ; 		move.l	#objDma_Mikami,obj_dma(a6)
(1)  409/FFFFFFFFFFFF22E2 :                     ; 		move.w	#setVram_Mikami|$2000,obj_vram(a6)
(1)  410/FFFFFFFFFFFF22E2 :                     ; 		bclr	#bitobj_Mars,obj_set(a6)	; Genesis object
(1)  411/FFFFFFFFFFFF22E2 :                     ; 		move.w	#(320/2)+48,obj_x(a6)
(1)  412/FFFFFFFFFFFF22E2 :                     ; 		move.w	#(224/2)+64,obj_y(a6)
(1)  413/FFFFFFFFFFFF22E2 :                     ; 		clr.w	obj_frame(a6)
(1)  414/FFFFFFFFFFFF22E2 :                     ; 		bsr	object_ResetAnim
(1)  415/FFFFFFFFFFFF22E2 :                     ; 		bset	#0,obj_status(a6)
(1)  416/FFFFFFFFFFFF22E2 :                     ; 		bset	#bitobj_flipH,obj_set(a6)
(1)  417/FFFFFFFFFFFF22E2 :                     ;
(1)  418/FFFFFFFFFFFF22E2 :                     ; ; ----------------------------------------------
(1)  419/FFFFFFFFFFFF22E2 :                     ; .main:
(1)  420/FFFFFFFFFFFF22E2 :                     ; 		lea	(Controller_2),a3
(1)  421/FFFFFFFFFFFF22E2 :                     ; 		btst	#0,obj_status(a6)
(1)  422/FFFFFFFFFFFF22E2 :                     ; 		beq.s	.no_fallspd
(1)  423/FFFFFFFFFFFF22E2 :                     ; 		add.w	#$40,obj_y_spd(a6)
(1)  424/FFFFFFFFFFFF22E2 :                     ; .no_fallspd:
(1)  425/FFFFFFFFFFFF22E2 :                     ;
(1)  426/FFFFFFFFFFFF22E2 :                     ; ; .fake_col_c:
(1)  427/FFFFFFFFFFFF22E2 :                     ; 		move.w	on_press(a3),d7
(1)  428/FFFFFFFFFFFF22E2 :                     ; 		btst	#bitJoyC,d7
(1)  429/FFFFFFFFFFFF22E2 :                     ; 		beq.s	.fake_jump
(1)  430/FFFFFFFFFFFF22E2 :                     ; 		btst	#0,obj_status(a6)
(1)  431/FFFFFFFFFFFF22E2 :                     ; 		bne.s	.fake_jump
(1)  432/FFFFFFFFFFFF22E2 :                     ; 		move.w	#-$500,obj_y_spd(a6)
(1)  433/FFFFFFFFFFFF22E2 :                     ; 		move.b	#2,obj_anim_id(a6)
(1)  434/FFFFFFFFFFFF22E2 :                     ; 		bset	#0,obj_status(a6)
(1)  435/FFFFFFFFFFFF22E2 :                     ;
(1)  436/FFFFFFFFFFFF22E2 :                     ; 		moveq	#$0F,d0
(1)  437/FFFFFFFFFFFF22E2 :                     ; 		moveq	#1,d1
(1)  438/FFFFFFFFFFFF22E2 :                     ; 		bsr	gemaPlayFromBlk
(1)  439/FFFFFFFFFFFF22E2 :                     ;
(1)  440/FFFFFFFFFFFF22E2 :                     ; .fake_jump:
(1)  441/FFFFFFFFFFFF22E2 :                     ; 		move.w	on_press(a3),d7
(1)  442/FFFFFFFFFFFF22E2 :                     ; 		btst	#bitJoyB,d7
(1)  443/FFFFFFFFFFFF22E2 :                     ; 		beq.s	.no_slash
(1)  444/FFFFFFFFFFFF22E2 :                     ; 		tst.w	obj_y_spd(a6)
(1)  445/FFFFFFFFFFFF22E2 :                     ; 		bne.s	.no_slash
(1)  446/FFFFFFFFFFFF22E2 :                     ; 		clr.w	obj_anim_indx(a6)
(1)  447/FFFFFFFFFFFF22E2 :                     ; 		move.b	#4,obj_anim_id(a6)
(1)  448/FFFFFFFFFFFF22E2 :                     ; 		move.w	#$10,obj_ram+2(a6)
(1)  449/FFFFFFFFFFFF22E2 :                     ;
(1)  450/FFFFFFFFFFFF22E2 :                     ; 		moveq	#$0F,d0
(1)  451/FFFFFFFFFFFF22E2 :                     ; 		moveq	#0,d1
(1)  452/FFFFFFFFFFFF22E2 :                     ; 		bsr	gemaPlayFromBlk
(1)  453/FFFFFFFFFFFF22E2 :                     ;
(1)  454/FFFFFFFFFFFF22E2 :                     ; .no_slash:
(1)  455/FFFFFFFFFFFF22E2 :                     ; 		clr.w	obj_x_spd(a6)
(1)  456/FFFFFFFFFFFF22E2 :                     ;
(1)  457/FFFFFFFFFFFF22E2 :                     ; 		moveq	#0,d0
(1)  458/FFFFFFFFFFFF22E2 :                     ; 		moveq	#0,d1
(1)  459/FFFFFFFFFFFF22E2 :                     ; 		move.w	on_hold(a3),d7
(1)  460/FFFFFFFFFFFF22E2 :                     ; 		move.w	d7,d6
(1)  461/FFFFFFFFFFFF22E2 :                     ; 		andi.w	#JoyLeft+JoyRight,d6
(1)  462/FFFFFFFFFFFF22E2 :                     ; 		beq.s	.move_mika
(1)  463/FFFFFFFFFFFF22E2 :                     ; 		clr.w	obj_ram+2(a6)
(1)  464/FFFFFFFFFFFF22E2 :                     ; 		move.w	#$180,d6
(1)  465/FFFFFFFFFFFF22E2 :                     ; 		btst	#bitJoyRight,d7
(1)  466/FFFFFFFFFFFF22E2 :                     ; 		beq.s	.no_l
(1)  467/FFFFFFFFFFFF22E2 :                     ; 		move.w	d6,obj_x_spd(a6)
(1)  468/FFFFFFFFFFFF22E2 :                     ; .no_l
(1)  469/FFFFFFFFFFFF22E2 :                     ; 		neg.w	d6
(1)  470/FFFFFFFFFFFF22E2 :                     ; 		btst	#bitJoyLeft,d7
(1)  471/FFFFFFFFFFFF22E2 :                     ; 		beq.s	.move_mika
(1)  472/FFFFFFFFFFFF22E2 :                     ; 		move.w	d6,obj_x_spd(a6)
(1)  473/FFFFFFFFFFFF22E2 :                     ; .move_mika:
(1)  474/FFFFFFFFFFFF22E2 :                     ;
(1)  475/FFFFFFFFFFFF22E2 :                     ;
(1)  476/FFFFFFFFFFFF22E2 :                     ; 		moveq	#0,d6
(1)  477/FFFFFFFFFFFF22E2 :                     ; 		tst.w	obj_x_spd(a6)
(1)  478/FFFFFFFFFFFF22E2 :                     ; 		beq.s	.r_spd
(1)  479/FFFFFFFFFFFF22E2 :                     ; 		moveq	#1,d6
(1)  480/FFFFFFFFFFFF22E2 :                     ; 		move.b	obj_set(a6),d7
(1)  481/FFFFFFFFFFFF22E2 :                     ; 		bclr	#bitobj_flipH,d7
(1)  482/FFFFFFFFFFFF22E2 :                     ; 		tst.w	obj_x_spd(a6)
(1)  483/FFFFFFFFFFFF22E2 :                     ; 		bpl.s	.r_flip
(1)  484/FFFFFFFFFFFF22E2 :                     ; 		bset	#bitobj_flipH,d7
(1)  485/FFFFFFFFFFFF22E2 :                     ; .r_flip:
(1)  486/FFFFFFFFFFFF22E2 :                     ; 		move.b	d7,obj_set(a6)
(1)  487/FFFFFFFFFFFF22E2 :                     ; .r_spd:
(1)  488/FFFFFFFFFFFF22E2 :                     ;
(1)  489/FFFFFFFFFFFF22E2 :                     ; 		tst.w	obj_ram+2(a6)
(1)  490/FFFFFFFFFFFF22E2 :                     ; 		beq.s	.free_anim
(1)  491/FFFFFFFFFFFF22E2 :                     ; 		subi.w	#1,obj_ram+2(a6)
(1)  492/FFFFFFFFFFFF22E2 :                     ; 		bne.s	.no_anim
(1)  493/FFFFFFFFFFFF22E2 :                     ; .free_anim:
(1)  494/FFFFFFFFFFFF22E2 :                     ; 		btst	#0,obj_status(a6)
(1)  495/FFFFFFFFFFFF22E2 :                     ; 		bne.s	.no_anim
(1)  496/FFFFFFFFFFFF22E2 :                     ; 		tst.w	obj_y_spd(a6)
(1)  497/FFFFFFFFFFFF22E2 :                     ; 		bmi.s	.is_jumpin
(1)  498/FFFFFFFFFFFF22E2 :                     ; 		move.b	d6,obj_anim_id(a6)
(1)  499/FFFFFFFFFFFF22E2 :                     ; .is_jumpin:
(1)  500/FFFFFFFFFFFF22E2 :                     ; 		tst.w	obj_y_spd(a6)
(1)  501/FFFFFFFFFFFF22E2 :                     ; 		beq.s	.no_anim
(1)  502/FFFFFFFFFFFF22E2 :                     ; 		move.b	#3,obj_anim_id(a6)
(1)  503/FFFFFFFFFFFF22E2 :                     ; .no_anim:
(1)  504/FFFFFFFFFFFF22E2 :                     ; 		bsr	object_Speed
(1)  505/FFFFFFFFFFFF22E2 :                     ;
(1)  506/FFFFFFFFFFFF22E2 :                     ; 		move.w	#(224-16)-32,d7
(1)  507/FFFFFFFFFFFF22E2 :                     ; 		move.w	obj_y(a6),d0
(1)  508/FFFFFFFFFFFF22E2 :                     ; 		cmp.w	d7,d0
(1)  509/FFFFFFFFFFFF22E2 :                     ; 		blt.s	.fake_col
(1)  510/FFFFFFFFFFFF22E2 :                     ; 		clr.w	obj_y_spd(a6)
(1)  511/FFFFFFFFFFFF22E2 :                     ; 		andi.w	#-$10,obj_y(a6)
(1)  512/FFFFFFFFFFFF22E2 :                     ; 		bclr	#0,obj_status(a6)
(1)  513/FFFFFFFFFFFF22E2 :                     ; .fake_col:
(1)  514/FFFFFFFFFFFF22E2 :                     ;
(1)  515/FFFFFFFFFFFF22E2 :                     ; ; 		move.w	(Controller_2+on_press),d7
(1)  516/FFFFFFFFFFFF22E2 :                     ; ; 		btst	#bitClickM,d7
(1)  517/FFFFFFFFFFFF22E2 :                     ; ; 		beq.s	.no_reset
(1)  518/FFFFFFFFFFFF22E2 :                     ; ; 		move.w	#320/2,obj_x(a6)
(1)  519/FFFFFFFFFFFF22E2 :                     ; ; 		move.w	#224/2,obj_y(a6)
(1)  520/FFFFFFFFFFFF22E2 :                     ; ; .no_reset:
(1)  521/FFFFFFFFFFFF22E2 :                     ; 		lea	.anim_data(pc),a0
(1)  522/FFFFFFFFFFFF22E2 :                     ; 		bsr	object_Animate
(1)  523/FFFFFFFFFFFF22E2 :                     ; 		bra	object_Display
(1)  524/FFFFFFFFFFFF22E2 :                     ;
(1)  525/FFFFFFFFFFFF22E2 :                     ; ; ----------------------------------------------
(1)  526/FFFFFFFFFFFF22E2 :                     ;
(1)  527/FFFFFFFFFFFF22E2 :                     ; .anim_data:
(1)  528/FFFFFFFFFFFF22E2 :                     ; 		dc.w .anim_stand-.anim_data
(1)  529/FFFFFFFFFFFF22E2 :                     ; 		dc.w .anim_move-.anim_data
(1)  530/FFFFFFFFFFFF22E2 :                     ; 		dc.w .anim_jump-.anim_data
(1)  531/FFFFFFFFFFFF22E2 :                     ; 		dc.w .anim_fall-.anim_data
(1)  532/FFFFFFFFFFFF22E2 :                     ; 		dc.w .anim_slash-.anim_data
(1)  533/FFFFFFFFFFFF22E2 :                     ; .anim_stand:
(1)  534/FFFFFFFFFFFF22E2 :                     ; 		dc.w 6
(1)  535/FFFFFFFFFFFF22E2 :                     ; 		dc.w 0,-1
(1)  536/FFFFFFFFFFFF22E2 :                     ; 		align 2
(1)  537/FFFFFFFFFFFF22E2 :                     ; .anim_move:
(1)  538/FFFFFFFFFFFF22E2 :                     ; 		dc.w 5
(1)  539/FFFFFFFFFFFF22E2 :                     ; 		dc.w 2,3,4,5,6,7,8,-3,1
(1)  540/FFFFFFFFFFFF22E2 :                     ; 		align 2
(1)  541/FFFFFFFFFFFF22E2 :                     ; .anim_jump:
(1)  542/FFFFFFFFFFFF22E2 :                     ; 		dc.w 5
(1)  543/FFFFFFFFFFFF22E2 :                     ; 		dc.w 10,11,12,-3,2
(1)  544/FFFFFFFFFFFF22E2 :                     ; 		align 2
(1)  545/FFFFFFFFFFFF22E2 :                     ; .anim_fall:
(1)  546/FFFFFFFFFFFF22E2 :                     ; 		dc.w 5
(1)  547/FFFFFFFFFFFF22E2 :                     ; 		dc.w 11,12,-3,1
(1)  548/FFFFFFFFFFFF22E2 :                     ; 		align 2
(1)  549/FFFFFFFFFFFF22E2 :                     ; .anim_slash:
(1)  550/FFFFFFFFFFFF22E2 :                     ; 		dc.w 1
(1)  551/FFFFFFFFFFFF22E2 :                     ; 		dc.w 14,15,16,17,-2
(1)  552/FFFFFFFFFFFF22E2 :                     ; 		align 2
(1)  553/FFFFFFFFFFFF22E2 :                     ;
(1)  554/FFFFFFFFFFFF22E2 :                     ; --------------------------------------------------
(1)  555/FFFFFFFFFFFF22E2 :                     ; Sisi
(1)  556/FFFFFFFFFFFF22E2 :                     ; --------------------------------------------------
(1)  557/FFFFFFFFFFFF22E2 :                     
(1)  558/FFFFFFFFFFFF22E2 :                     Object_Sisi:
(1)  559/FFFFFFFFFFFF22E2 : 7000                		moveq	#0,d0
(1)  560/FFFFFFFFFFFF22E4 : 102E 0021           		move.b	obj_index(a6),d0
(1)  561/FFFFFFFFFFFF22E8 : D040                		add.w	d0,d0
(1)  562/FFFFFFFFFFFF22EA : 323B 0006           		move.w	.list(pc,d0.w),d1
(1)  563/FFFFFFFFFFFF22EE : 4EFB 1002           		jmp	.list(pc,d1.w)
(1)  564/FFFFFFFFFFFF22F2 :                     ; ----------------------------------------------
(1)  565/FFFFFFFFFFFF22F2 : 0004                .list:		dc.w .init-.list
(1)  566/FFFFFFFFFFFF22F4 : 0026                		dc.w .main-.list
(1)  567/FFFFFFFFFFFF22F6 :                     ; ----------------------------------------------
(1)  568/FFFFFFFFFFFF22F6 :                     .init:
(1)  569/FFFFFFFFFFFF22F6 : 1D7C 0001 0021      		move.b	#1,obj_index(a6)
(1)  570/FFFFFFFFFFFF22FC : 2D7C 0020 1EB8      		move.l	#objMap_Sisi,obj_map(a6)
         FFFFFFFFFFFF2302 : 000C             
(1)  571/FFFFFFFFFFFF2304 : 3D7C 2480 0014      		move.w	#setVram_Sisi|$2000,obj_vram(a6)
(1)  572/FFFFFFFFFFFF230A : 08AE 0007 0022      		bclr	#bitobj_Mars,obj_set(a6)	; Genesis object
(1)  573/FFFFFFFFFFFF2310 :                     ; 		move.w	#320/2,obj_x(a6)
(1)  574/FFFFFFFFFFFF2310 :                     ; 		move.w	#224/2,obj_y(a6)
(1)  575/FFFFFFFFFFFF2310 : 426E 001C           		clr.w	obj_frame(a6)
(1)  576/FFFFFFFFFFFF2314 : 6100 EB48           		bsr	object_ResetAnim
(1)  577/FFFFFFFFFFFF2318 :                     
(1)  578/FFFFFFFFFFFF2318 :                     ; ----------------------------------------------
(1)  579/FFFFFFFFFFFF2318 :                     .main:
(1)  580/FFFFFFFFFFFF2318 :                     ; 		move.w	obj_ram(a6),d0
(1)  581/FFFFFFFFFFFF2318 :                     ; 		move.w	obj_ram+2(a6),d1
(1)  582/FFFFFFFFFFFF2318 :                     
(1)  583/FFFFFFFFFFFF2318 :                     
(1)  584/FFFFFFFFFFFF2318 : 7000                		moveq	#0,d0
(1)  585/FFFFFFFFFFFF231A :                     
(1)  586/FFFFFFFFFFFF231A : 3238 D404           		move.w	(RAM_CurrPick).w,d1
(1)  587/FFFFFFFFFFFF231E : E749                		lsl.w	#3,d1
(1)  588/FFFFFFFFFFFF2320 :                     
(1)  589/FFFFFFFFFFFF2320 : 0640 0018           		addi.w	#$18,d0
(1)  590/FFFFFFFFFFFF2324 : 0641 0020           		addi.w	#$20,d1
(1)  591/FFFFFFFFFFFF2328 : 3D40 0004           		move.w	d0,obj_x(a6)
(1)  592/FFFFFFFFFFFF232C : 3D41 0008           		move.w	d1,obj_y(a6)
(1)  593/FFFFFFFFFFFF2330 :                     
(1)  594/FFFFFFFFFFFF2330 :                     ; 		lea	(RAM_Objects),a0
(1)  595/FFFFFFFFFFFF2330 :                     ; 		cmp.l	#Object_Mikami,obj_code(a0)
(1)  596/FFFFFFFFFFFF2330 :                     ; 		bne.s	.dont_link
(1)  597/FFFFFFFFFFFF2330 :                     ; 		move.w	obj_ram+2(a6),d7
(1)  598/FFFFFFFFFFFF2330 :                     ; 		cmp.w	#24<<1,d7
(1)  599/FFFFFFFFFFFF2330 :                     ; 		bge.s	.dont_incr
(1)  600/FFFFFFFFFFFF2330 :                     ; 		add.w	#2,d7
(1)  601/FFFFFFFFFFFF2330 :                     ; .dont_incr:
(1)  602/FFFFFFFFFFFF2330 :                     ; 		move.w	d7,obj_ram+2(a6)
(1)  603/FFFFFFFFFFFF2330 :                     ;
(1)  604/FFFFFFFFFFFF2330 :                     ; 		move.w	obj_x(a0),d7
(1)  605/FFFFFFFFFFFF2330 :                     ; 		move.w	obj_y(a0),d6
(1)  606/FFFFFFFFFFFF2330 :                     ; 		move.w	#24,d5
(1)  607/FFFFFFFFFFFF2330 :                     ; 		sub.w	d5,d6
(1)  608/FFFFFFFFFFFF2330 :                     ; 		move.w	obj_ram(a6),d0
(1)  609/FFFFFFFFFFFF2330 :                     ; 		moveq	#4,d1
(1)  610/FFFFFFFFFFFF2330 :                     ; 		bsr	System_SineWave
(1)  611/FFFFFFFFFFFF2330 :                     ; 		asr.w	#8,d2
(1)  612/FFFFFFFFFFFF2330 :                     ; 		add.w	d2,d6
(1)  613/FFFFFFFFFFFF2330 :                     ; 		moveq	#5,d1
(1)  614/FFFFFFFFFFFF2330 :                     ; 		bsr	System_SineWave_Cos
(1)  615/FFFFFFFFFFFF2330 :                     ; 		asr.w	#8,d2
(1)  616/FFFFFFFFFFFF2330 :                     ; 		add.w	d2,d7
(1)  617/FFFFFFFFFFFF2330 :                     ;
(1)  618/FFFFFFFFFFFF2330 :                     ; 		move.b	obj_set(a6),d0
(1)  619/FFFFFFFFFFFF2330 :                     ; 		move.b	obj_set(a0),d1
(1)  620/FFFFFFFFFFFF2330 :                     ; 		eor.w	d1,d0
(1)  621/FFFFFFFFFFFF2330 :                     ; 		andi.w	#1,d0
(1)  622/FFFFFFFFFFFF2330 :                     ; 		beq.s	.same_h
(1)  623/FFFFFFFFFFFF2330 :                     ; 		clr.w	obj_ram+2(a6)
(1)  624/FFFFFFFFFFFF2330 :                     ; .same_h:
(1)  625/FFFFFFFFFFFF2330 :                     ; 		move.w	obj_ram+2(a6),d4
(1)  626/FFFFFFFFFFFF2330 :                     ; 		bclr	#bitobj_flipH,obj_set(a6)
(1)  627/FFFFFFFFFFFF2330 :                     ; 		btst	#bitobj_flipH,obj_set(a0)
(1)  628/FFFFFFFFFFFF2330 :                     ; 		beq.s	.dont_flipx
(1)  629/FFFFFFFFFFFF2330 :                     ; 		neg.w	d4
(1)  630/FFFFFFFFFFFF2330 :                     ; 		bset	#bitobj_flipH,obj_set(a6)
(1)  631/FFFFFFFFFFFF2330 :                     ; .dont_flipx:
(1)  632/FFFFFFFFFFFF2330 :                     ; 		lsr.w	#1,d4
(1)  633/FFFFFFFFFFFF2330 :                     ; 		add.w	d4,d7
(1)  634/FFFFFFFFFFFF2330 :                     ; 		move.w	d6,obj_y(a6)
(1)  635/FFFFFFFFFFFF2330 :                     ; 		move.w	d7,obj_x(a6)
(1)  636/FFFFFFFFFFFF2330 :                     ; 		add.w	#4,obj_ram(a6)
(1)  637/FFFFFFFFFFFF2330 :                     
(1)  638/FFFFFFFFFFFF2330 :                     .dont_link:
(1)  639/FFFFFFFFFFFF2330 : 41FA 000A           		lea	.anim_data(pc),a0
(1)  640/FFFFFFFFFFFF2334 : 6100 EA94           		bsr	object_Animate
(1)  641/FFFFFFFFFFFF2338 : 6000 EA10           		bra	object_Display
(1)  642/FFFFFFFFFFFF233C :                     
(1)  643/FFFFFFFFFFFF233C :                     ; ----------------------------------------------
(1)  644/FFFFFFFFFFFF233C :                     
(1)  645/FFFFFFFFFFFF233C :                     .anim_data:
(1)  646/FFFFFFFFFFFF233C : 0008                		dc.w .anim_00-.anim_data
(1)  647/FFFFFFFFFFFF233E : 0008                		dc.w .anim_00-.anim_data
(1)  648/FFFFFFFFFFFF2340 : 0008                		dc.w .anim_00-.anim_data
(1)  649/FFFFFFFFFFFF2342 : 0008                		dc.w .anim_00-.anim_data
(1)  650/FFFFFFFFFFFF2344 :                     .anim_00:
(1)  651/FFFFFFFFFFFF2344 : 0008                		dc.w 8
(1)  652/FFFFFFFFFFFF2346 : 0000 0001 0002      		dc.w 0,1,2,1,-1
         FFFFFFFFFFFF234C : 0001 FFFF          
(1)  653/FFFFFFFFFFFF2350 :                     		align 2
(1)  654/FFFFFFFFFFFF2352 :                     ;
(1)  655/FFFFFFFFFFFF2352 :                     ; ; --------------------------------------------------
(1)  656/FFFFFFFFFFFF2352 :                     ; ; Ball
(1)  657/FFFFFFFFFFFF2352 :                     ; ; --------------------------------------------------
(1)  658/FFFFFFFFFFFF2352 :                     ;
(1)  659/FFFFFFFFFFFF2352 :                     ; Object_ball:
(1)  660/FFFFFFFFFFFF2352 :                     ; 		moveq	#0,d0
(1)  661/FFFFFFFFFFFF2352 :                     ; 		move.b	obj_index(a6),d0
(1)  662/FFFFFFFFFFFF2352 :                     ; 		add.w	d0,d0
(1)  663/FFFFFFFFFFFF2352 :                     ; 		move.w	.list(pc,d0.w),d1
(1)  664/FFFFFFFFFFFF2352 :                     ; 		jmp	.list(pc,d1.w)
(1)  665/FFFFFFFFFFFF2352 :                     ; ; ----------------------------------------------
(1)  666/FFFFFFFFFFFF2352 :                     ; .list:		dc.w .init-.list
(1)  667/FFFFFFFFFFFF2352 :                     ; 		dc.w .main-.list
(1)  668/FFFFFFFFFFFF2352 :                     ; ; ----------------------------------------------
(1)  669/FFFFFFFFFFFF2352 :                     ; .init:
(1)  670/FFFFFFFFFFFF2352 :                     ; 		move.b	#1,obj_index(a6)
(1)  671/FFFFFFFFFFFF2352 :                     ; 		move.l	#objMap_Sisi,obj_map(a6)
(1)  672/FFFFFFFFFFFF2352 :                     ; 		move.l	#0,obj_dma(a6)
(1)  673/FFFFFFFFFFFF2352 :                     ; 		move.w	#setVram_Sisi|$0000,obj_vram(a6)
(1)  674/FFFFFFFFFFFF2352 :                     ; 		bclr	#bitobj_Mars,obj_set(a6)	; Genesis object
(1)  675/FFFFFFFFFFFF2352 :                     ; 		move.w	#320/2,obj_x(a6)
(1)  676/FFFFFFFFFFFF2352 :                     ; 		move.w	#224/2,obj_y(a6)
(1)  677/FFFFFFFFFFFF2352 :                     ; 		clr.w	obj_frame(a6)
(1)  678/FFFFFFFFFFFF2352 :                     ; 		bsr	object_ResetAnim
(1)  679/FFFFFFFFFFFF2352 :                     ;
(1)  680/FFFFFFFFFFFF2352 :                     ; 		move.w	#$180,obj_x_spd(a6)
(1)  681/FFFFFFFFFFFF2352 :                     ; 		move.w	#$180,obj_y_spd(a6)
(1)  682/FFFFFFFFFFFF2352 :                     ;
(1)  683/FFFFFFFFFFFF2352 :                     ; ; ----------------------------------------------
(1)  684/FFFFFFFFFFFF2352 :                     ; .main:
(1)  685/FFFFFFFFFFFF2352 :                     ; 		move.w	obj_x(a6),d0
(1)  686/FFFFFFFFFFFF2352 :                     ; 		move.w	obj_y(a6),d1
(1)  687/FFFFFFFFFFFF2352 :                     ; 		sub.w	#16,d0
(1)  688/FFFFFFFFFFFF2352 :                     ; 		sub.w	#16,d1
(1)  689/FFFFFFFFFFFF2352 :                     ; 		move.w	#320-32,d2
(1)  690/FFFFFFFFFFFF2352 :                     ; 		move.w	#(224-16)-32,d3
(1)  691/FFFFFFFFFFFF2352 :                     ;
(1)  692/FFFFFFFFFFFF2352 :                     ; 		tst.w	d1
(1)  693/FFFFFFFFFFFF2352 :                     ; 		bpl.s	.on_scrn_yu
(1)  694/FFFFFFFFFFFF2352 :                     ; 		neg.w	obj_y_spd(a6)
(1)  695/FFFFFFFFFFFF2352 :                     ; 		bsr	.playit
(1)  696/FFFFFFFFFFFF2352 :                     ; .on_scrn_yu:
(1)  697/FFFFFFFFFFFF2352 :                     ; 		cmp.w	d3,d1
(1)  698/FFFFFFFFFFFF2352 :                     ; 		blt.s	.on_scrn_yd
(1)  699/FFFFFFFFFFFF2352 :                     ; 		neg.w	obj_y_spd(a6)
(1)  700/FFFFFFFFFFFF2352 :                     ; 		bsr	.playit
(1)  701/FFFFFFFFFFFF2352 :                     ; .on_scrn_yd:
(1)  702/FFFFFFFFFFFF2352 :                     ;
(1)  703/FFFFFFFFFFFF2352 :                     ; 		tst.w	d0
(1)  704/FFFFFFFFFFFF2352 :                     ; 		bpl.s	.on_scrn_xu
(1)  705/FFFFFFFFFFFF2352 :                     ; 		neg.w	obj_x_spd(a6)
(1)  706/FFFFFFFFFFFF2352 :                     ; 		bsr.s	.playit
(1)  707/FFFFFFFFFFFF2352 :                     ; .on_scrn_xu:
(1)  708/FFFFFFFFFFFF2352 :                     ; 		cmp.w	d2,d0
(1)  709/FFFFFFFFFFFF2352 :                     ; 		blt.s	.on_scrn_xd
(1)  710/FFFFFFFFFFFF2352 :                     ; 		neg.w	obj_x_spd(a6)
(1)  711/FFFFFFFFFFFF2352 :                     ; 		bsr.s	.playit
(1)  712/FFFFFFFFFFFF2352 :                     ; .on_scrn_xd:
(1)  713/FFFFFFFFFFFF2352 :                     ;
(1)  714/FFFFFFFFFFFF2352 :                     ; 		bsr	object_Speed
(1)  715/FFFFFFFFFFFF2352 :                     ;
(1)  716/FFFFFFFFFFFF2352 :                     ; 		lea	.anim_data(pc),a0
(1)  717/FFFFFFFFFFFF2352 :                     ; 		bsr	object_Animate
(1)  718/FFFFFFFFFFFF2352 :                     ; 		bra	object_Display
(1)  719/FFFFFFFFFFFF2352 :                     ; .playit:
(1)  720/FFFFFFFFFFFF2352 :                     ; 		moveq	#$0F,d0
(1)  721/FFFFFFFFFFFF2352 :                     ; 		moveq	#2,d1
(1)  722/FFFFFFFFFFFF2352 :                     ; 		bra	gemaPlayFromBlk
(1)  723/FFFFFFFFFFFF2352 :                     ;
(1)  724/FFFFFFFFFFFF2352 :                     ; ; ----------------------------------------------
(1)  725/FFFFFFFFFFFF2352 :                     ;
(1)  726/FFFFFFFFFFFF2352 :                     ; .anim_data:
(1)  727/FFFFFFFFFFFF2352 :                     ; 		dc.w .anim_00-.anim_data
(1)  728/FFFFFFFFFFFF2352 :                     ; 		dc.w .anim_00-.anim_data
(1)  729/FFFFFFFFFFFF2352 :                     ; 		dc.w .anim_00-.anim_data
(1)  730/FFFFFFFFFFFF2352 :                     ; 		dc.w .anim_00-.anim_data
(1)  731/FFFFFFFFFFFF2352 :                     ; .anim_00:
(1)  732/FFFFFFFFFFFF2352 :                     ; 		dc.w 8
(1)  733/FFFFFFFFFFFF2352 :                     ; 		dc.w 0,1,2,1,-1
(1)  734/FFFFFFFFFFFF2352 :                     ; 		align 2
(1)  735/FFFFFFFFFFFF2352 :                     
(1)  736/FFFFFFFFFFFF2352 :                     ; ====================================================================
(1)  737/FFFFFFFFFFFF2352 :                     ; ------------------------------------------------------
(1)  738/FFFFFFFFFFFF2352 :                     ; Subroutines
(1)  739/FFFFFFFFFFFF2352 :                     ; ------------------------------------------------------
(1)  740/FFFFFFFFFFFF2352 :                     
(1)  741/FFFFFFFFFFFF2352 :                     ; ====================================================================
(1)  742/FFFFFFFFFFFF2352 :                     ; ------------------------------------------------------
(1)  743/FFFFFFFFFFFF2352 :                     ; Custom VBlank
(1)  744/FFFFFFFFFFFF2352 :                     ; ------------------------------------------------------
(1)  745/FFFFFFFFFFFF2352 :                     
(1)  746/FFFFFFFFFFFF2352 :                     ; ------------------------------------------------------
(1)  747/FFFFFFFFFFFF2352 :                     ; Custom HBlank
(1)  748/FFFFFFFFFFFF2352 :                     ; ------------------------------------------------------
(1)  749/FFFFFFFFFFFF2352 :                     
(1)  750/FFFFFFFFFFFF2352 :                     ; ====================================================================
(1)  751/FFFFFFFFFFFF2352 :                     ; ------------------------------------------------------
(1)  752/FFFFFFFFFFFF2352 :                     ; Small DATA section
(1)  753/FFFFFFFFFFFF2352 :                     ; ------------------------------------------------------
(1)  754/FFFFFFFFFFFF2352 :                     
(1)  755/FFFFFFFFFFFF2352 :                     PAL_TEST:
(1)  756/FFFFFFFFFFFF2352 :                     		binclude "game/screen_1/data/md/maps/test/md_pal.bin"
(1)  757/FFFFFFFFFFFF236E :                     		align 2
(1)  758/FFFFFFFFFFFF2370 :                     
(1)  759/FFFFFFFFFFFF2370 :                     ; str_ShowPsg:	dc.b "\\w \\w \\w \\w",0
(1)  760/FFFFFFFFFFFF2370 :                     ; 		dc.l RAM_ChnlLinks,RAM_ChnlLinks+2,RAM_ChnlLinks+4,RAM_ChnlLinks+6
(1)  761/FFFFFFFFFFFF2370 :                     ; 		align 2
(1)  762/FFFFFFFFFFFF2370 :                     ; str_ShowFm:	dc.b "\\w \\w \\w \\w \\w \\w",0
(1)  763/FFFFFFFFFFFF2370 :                     ; 		dc.l RAM_ChnlLinks+8,RAM_ChnlLinks+10,RAM_ChnlLinks+12
(1)  764/FFFFFFFFFFFF2370 :                     ; 		dc.l RAM_ChnlLinks+14,RAM_ChnlLinks+16,RAM_ChnlLinks+18
(1)  765/FFFFFFFFFFFF2370 :                     ; 		align 2
(1)  766/FFFFFFFFFFFF2370 :                     ; str_ShowPcm:	dc.b "\\w \\w \\w \\w",$0A
(1)  767/FFFFFFFFFFFF2370 :                     ; 		dc.b "\\w \\w \\w \\w",0
(1)  768/FFFFFFFFFFFF2370 :                     ; 		dc.l RAM_ChnlLinks+20,RAM_ChnlLinks+22,RAM_ChnlLinks+24,RAM_ChnlLinks+26
(1)  769/FFFFFFFFFFFF2370 :                     ; 		dc.l RAM_ChnlLinks+28,RAM_ChnlLinks+30,RAM_ChnlLinks+32,RAM_ChnlLinks+34
(1)  770/FFFFFFFFFFFF2370 :                     ; 		align 2
(1)  771/FFFFFFFFFFFF2370 :                     ; str_ShowPwm:	dc.b "\\w \\w \\w \\w",$0A
(1)  772/FFFFFFFFFFFF2370 :                     ; 		dc.b "\\w \\w \\w",0
(1)  773/FFFFFFFFFFFF2370 :                     ; 		dc.l RAM_ChnlLinks+36,RAM_ChnlLinks+38,RAM_ChnlLinks+40,RAM_ChnlLinks+42
(1)  774/FFFFFFFFFFFF2370 :                     ; 		dc.l RAM_ChnlLinks+44,RAM_ChnlLinks+46,RAM_ChnlLinks+48,RAM_ChnlLinks+50
(1)  775/FFFFFFFFFFFF2370 :                     ; 		align 2
(1)  776/FFFFFFFFFFFF2370 :                     
(1)  777/FFFFFFFFFFFF2370 :                     str_TesterInit:
(1)  778/FFFFFFFFFFFF2370 : 4745 4D41 2F4E      		dc.b "GEMA/Nikona sound driver tester",$0A
         FFFFFFFFFFFF2376 : 696B 6F6E 6120 
         FFFFFFFFFFFF237C : 736F 756E 6420 
         FFFFFFFFFFFF2382 : 6472 6976 6572 
         FFFFFFFFFFFF2388 : 2074 6573 7465 
         FFFFFFFFFFFF238E : 720A             
(1)  779/FFFFFFFFFFFF2390 : 2020 2020 2020      		dc.b "                \{DATE} \{TIME}",$0A
         FFFFFFFFFFFF2396 : 2020 2020 2020 
         FFFFFFFFFFFF239C : 2020 2020 3033 
         FFFFFFFFFFFF23A2 : 2F31 362F 3230 
         FFFFFFFFFFFF23A8 : 3234 2030 393A 
         FFFFFFFFFFFF23AE : 3232 3A33 3920 
         FFFFFFFFFFFF23B4 : 414D 0A          
(1)  780/FFFFFFFFFFFF23B7 : 0A                  		dc.b $0A
(1)  781/FFFFFFFFFFFF23B8 : 2020 2020 6765      		dc.b "    gemaTest          (A)  (B)  (C)",$0A
         FFFFFFFFFFFF23BE : 6D61 5465 7374 
         FFFFFFFFFFFF23C4 : 2020 2020 2020 
         FFFFFFFFFFFF23CA : 2020 2020 2841 
         FFFFFFFFFFFF23D0 : 2920 2028 4229 
         FFFFFFFFFFFF23D6 : 2020 2843 290A    
(1)  782/FFFFFFFFFFFF23DC : 2020 2020 6765      		dc.b "    gemaPlayTrack",$0A
         FFFFFFFFFFFF23E2 : 6D61 506C 6179 
         FFFFFFFFFFFF23E8 : 5472 6163 6B0A    
(1)  783/FFFFFFFFFFFF23EE : 2020 2020 6765      		dc.b "    gemaStopTrack",$0A
         FFFFFFFFFFFF23F4 : 6D61 5374 6F70 
         FFFFFFFFFFFF23FA : 5472 6163 6B0A    
(1)  784/FFFFFFFFFFFF2400 : 2020 2020 6765      		dc.b "    gemaFadeTrack",$0A
         FFFFFFFFFFFF2406 : 6D61 4661 6465 
         FFFFFFFFFFFF240C : 5472 6163 6B0A    
(1)  785/FFFFFFFFFFFF2412 : 2020 2020 6765      		dc.b "    gemaSetTrackVol",$0A
         FFFFFFFFFFFF2418 : 6D61 5365 7454 
         FFFFFFFFFFFF241E : 7261 636B 566F 
         FFFFFFFFFFFF2424 : 6C0A             
(1)  786/FFFFFFFFFFFF2426 : 2020 2020 6765      		dc.b "    gemaStopAll",$0A
         FFFFFFFFFFFF242C : 6D61 5374 6F70 
         FFFFFFFFFFFF2432 : 416C 6C0A          
(1)  787/FFFFFFFFFFFF2436 : 2020 2020 6765      		dc.b "    gemaSetBeats",$0A
         FFFFFFFFFFFF243C : 6D61 5365 7442 
         FFFFFFFFFFFF2442 : 6561 7473 0A       
(1)  788/FFFFFFFFFFFF2447 : 2020 2020 2D2D      		dc.b "    --> EXIT"
         FFFFFFFFFFFF244D : 3E20 4558 4954    
(1)  789/FFFFFFFFFFFF2453 : 00                  		dc.b 0
(1)  790/FFFFFFFFFFFF2454 :                     		align 2
(1)  791/FFFFFFFFFFFF2456 : 5C77 205C 7720      str_ShowMe:	dc.b "\\w \\w \\w",$A
         FFFFFFFFFFFF245C : 5C77 0A          
(1)  792/FFFFFFFFFFFF245F : 0A                  		dc.b $A
(1)  793/FFFFFFFFFFFF2460 : 5C77 205C 7720      		dc.b "\\w \\w \\w",0
         FFFFFFFFFFFF2466 : 5C77 00          
(1)  794/FFFFFFFFFFFF2469 : FFFF D406 FFFF      		dc.l RAM_GemaArg0,RAM_GemaArg1,RAM_GemaArg2
         FFFFFFFFFFFF246F : D408 FFFF D40A    
(1)  795/FFFFFFFFFFFF2475 : FFFF D40C FFFF      		dc.l RAM_GemaArg3,RAM_GemaArg4,RAM_GemaArg5
         FFFFFFFFFFFF247B : D40E FFFF D410    
(1)  796/FFFFFFFFFFFF2481 :                     		align 2
(1)  797/FFFFFFFFFFFF2482 :                     str_Info:
(1)  798/FFFFFFFFFFFF2482 : 5C6C 00             		dc.b "\\l",0
(1)  799/FFFFFFFFFFFF2485 : FFFF B8D4           		dc.l RAM_Framecount
(1)  800/FFFFFFFFFFFF2489 :                     		align 2
(1)  801/FFFFFFFFFFFF248A :                     ; str_Notes:
(1)  802/FFFFFFFFFFFF248A :                     ;  dc.b "---",0,"C#0",0,"D-0",0,"D#0",0,"E-0",0,"F-0",0,"F#0",0,"G-0",0,"G#0",0,"A-0",0,"A#0",0,"B-0",0
(1)  803/FFFFFFFFFFFF248A :                     ;  dc.b "C-1",0,"C#1",0,"D-1",0,"D#1",0,"E-1",0,"F-1",0,"F#1",0,"G-1",0,"G#1",0,"A-1",0,"A#1",0,"B-1",0
(1)  804/FFFFFFFFFFFF248A :                     ;  dc.b "C-2",0,"C#2",0,"D-2",0,"D#2",0,"E-2",0,"F-2",0,"F#2",0,"G-2",0,"G#2",0,"A-2",0,"A#2",0,"B-2",0
(1)  805/FFFFFFFFFFFF248A :                     ;  dc.b "C-3",0,"C#3",0,"D-3",0,"D#3",0,"E-3",0,"F-3",0,"F#3",0,"G-3",0,"G#3",0,"A-3",0,"A#3",0,"B-3",0
(1)  806/FFFFFFFFFFFF248A :                     ;  dc.b "C-4",0,"C#4",0,"D-4",0,"D#4",0,"E-4",0,"F-4",0,"F#4",0,"G-4",0,"G#4",0,"A-4",0,"A#4",0,"B-4",0
(1)  807/FFFFFFFFFFFF248A :                     ;  dc.b "C-5",0,"C#5",0,"D-5",0,"D#5",0,"E-5",0,"F-5",0,"F#5",0,"G-5",0,"G#5",0,"A-5",0,"A#5",0,"B-5",0
(1)  808/FFFFFFFFFFFF248A :                     ;  dc.b "C-6",0,"C#6",0,"D-6",0,"D#6",0,"E-6",0,"F-6",0,"F#6",0,"G-6",0,"G#6",0,"A-6",0,"A#6",0,"B-6",0
(1)  809/FFFFFFFFFFFF248A :                     ;  dc.b "C-7",0,"C#7",0,"D-7",0,"D#7",0,"E-7",0,"F-7",0,"F#7",0,"G-7",0,"G#7",0,"A-7",0,"A#7",0,"B-7",0
(1)  810/FFFFFFFFFFFF248A :                     ;  dc.b "C-8",0,"C#8",0,"D-8",0,"D#8",0,"E-8",0,"F-8",0,"F#8",0,"G-8",0,"G#8",0,"A-8",0,"A#8",0,"B-8",0
(1)  811/FFFFFFFFFFFF248A :                     ;  dc.b "C-9",0,"C#9",0,"D-9",0,"D#9",0,"E-9",0,"F-9",0,"F#9",0,"G-9",0,"G#9",0,"A-9",0,"A#9",0,"B-9",0
(1)  812/FFFFFFFFFFFF248A :                     ;  align 2
(1)  813/FFFFFFFFFFFF248A :                     ; str_Notes_FM:
(1)  814/FFFFFFFFFFFF248A :                     ;  dc.b "---",0
(1)  815/FFFFFFFFFFFF248A :                     ;  dc.b "C-",0,0,"C#",0,0,"D-",0,0,"D#",0,0,"E-",0,0,"F-",0,0
(1)  816/FFFFFFFFFFFF248A :                     ;  dc.b "F#",0,0,"G-",0,0,"G#",0,0,"A-",0,0,"A#",0,0,"B-",0,0
(1)  817/FFFFFFFFFFFF248A :                     ;  align 2
(1)  818/FFFFFFFFFFFF248A :                     ; str_Octv_FM:
(1)  819/FFFFFFFFFFFF248A :                     ;  dc.b "0",0,"1",0,"2",0,"3",0,"4",0,"5",0,"6",0,"7",0
(1)  820/FFFFFFFFFFFF248A :                     ;  align 2
(1)  821/FFFFFFFFFFFF248A :                     
     365/FFFFFFFFFFFF248A :                     mcscrn_e:
     365/FFFFFFFFFFFFD88E :                                     dephase
     365/   6748A :                                     phase mctopscrn+(mcscrn_e-RAM_UserCode)
     365/   6748A :                                     align $800
     365/   67800 :                     ; Md_Screen00_e:
     365/   67800 : =$67800              MD_SCREEN01_E label *
     365/   67800 :  (MACRO-2)                           report "SCREEN MODE: MD_SCREEN01",mcscrn_e-RAM_UserCode,MAX_UserCode
     366/   67800 :                     
     367/   67800 :                     ; ====================================================================
     368/   67800 :                     ; ----------------------------------------------------------------
     369/   67800 :                     ; DATA SECTION
     370/   67800 :                     ; ----------------------------------------------------------------
     371/   67800 :                     
     372/   67800 :                     ; ====================================================================
     373/   67800 :                     ; ----------------------------------------------------------------
     374/   67800 :                     ; 68K DATA BANKs
     375/   67800 :                     ;
     376/   67800 :                     ; SEGA CD / CD32X:
     377/   67800 :                     ; Stored in WORD-RAM pieces
     378/   67800 :                     ; limited to 256KB 2M or 128KB 1M/1M (*UNTESTED*)
     379/   67800 :                     ; ** WORD-RAM CANNOT BE USED IF USING ASIC STAMPS **
     380/   67800 :                     ;
     381/   67800 :                     ; SEGA 32X Cartridge:
     382/   67800 :                     ; Limited to 1MB, bankswitchable if needed. (TODO bankswitching)
     383/   67800 :                     ; ONLY 4 banks can be used, Bank 0 already uses the
     384/   67800 :                     ; first 512KB for the code.
     385/   67800 :                     ;
     386/   67800 :                     ; To keep multi-porting limit your screen's data to 256KB
     387/   67800 :                     ; ----------------------------------------------------------------
     388/   67800 :                     
     389/   67800 :                     ; --------------------------------------------------------
     390/   67800 :                     ; DEFAULT BANK
     391/   67800 :                     ;
     392/   67800 :                     ; CD/CD32X:
     393/   67800 :                     ; $200000 256KB (WORD-RAM)
     394/   67800 :                     ;
     395/   67800 :                     ; 32X:
     396/   67800 :                     ; $900000 1MB (Bankswichable area)
     397/   67800 :                     ;
     398/   67800 :                     ; Usage:
     399/   67800 :                     ; data_bkset LABEL_START,OPTION
     400/   67800 :                     ; (add your includes and bincludes)
     401/   67800 :                     ; data_bkend LABEL_START,LABEL_END,used_size
     402/   67800 :                     ;
     403/   67800 :                     ; OPTION (32X Cartridge ONLY):
     404/   67800 :                     ;  0, Normal 32X $900000 bank
     405/   67800 :                     ; -1, This bank is the first one
     406/   67800 :                     ;
     407/   67800 :                     ; This is ignored on other systems.
     408/   67800 :                     ; --------------------------------------------------------
     409/   67800 :                     
     410/   67800 : (MACRO)              	data_bkset MCD_DBANK0,-1	; <-- note the -1
     410/   67800 :                                     align $800
     410/   67800 :                     ; MCD_DBANK0:
     410/   67800 : =$67800              MCD_DBANK0 label *
     410/  200000 :                                     phase sysmcd_wram
     411/  200000 :                     mdbank0:
     412/  200000 :                     		include "game/screen_0/data_bank.asm"
(1)    1/  200000 :                     ; ===========================================================================
(1)    2/  200000 :                     ; ----------------------------------------------------------------
(1)    3/  200000 :                     ; 68K SCREEN MODE DATA
(1)    4/  200000 :                     ; for big stuff like maps, level, etc.
(1)    5/  200000 :                     ;
(1)    6/  200000 :                     ; For Genesis graphics use data_dma.asm
(1)    7/  200000 :                     ; and for 32X graphics use data_mgfx.asm
(1)    8/  200000 :                     ;
(1)    9/  200000 :                     ; For 32X, CD32X:
(1)   10/  200000 :                     ; THE 256-COLOR PALETTES GO HERE.
(1)   11/  200000 :                     ; ----------------------------------------------------------------
(1)   12/  200000 :                     
(1)   13/  200000 :                     ; ----------------------------------------------------------------
(1)   14/  200000 :                     ; 32X Screen maps
(1)   15/  200000 :                     ; ----------------------------------------------------------------
(1)   16/  200000 :                     
(1)   17/  200000 :                     MapMars_Scrn0:
(1)   18/  200000 :                     		binclude "game/screen_0/data/mars/maps/test/data_map.bin"
(1)   19/  200230 :                     		align 2
(1)   20/  200230 :                     
(1)   21/  200230 :                     ; ----------------------------------------------------------------
(1)   22/  200230 :                     ; 32X Palettes
(1)   23/  200230 :                     ; ----------------------------------------------------------------
(1)   24/  200230 :                     
(1)   25/  200230 :                     PalMars_Scrn0:
(1)   26/  200230 :                     		binclude "game/screen_0/data/mars/maps/test/data_pal.bin"
(1)   27/  200430 :                     		align 2
(1)   28/  200430 :                     
(1)   29/  200430 :                     ; ----------------------------------------------------------------
(1)   30/  200430 :                     ; Screen maps
(1)   31/  200430 :                     ; ----------------------------------------------------------------
(1)   32/  200430 :                     
(1)   33/  200430 :                     MAP_Scr0_BG:
(1)   34/  200430 :                     		binclude "game/screen_0/data/md/maps/test/md_map.bin"
(1)   35/  200CF0 :                     		align 2
(1)   36/  200CF0 :                     
(1)   37/  200CF0 :                     ; ----------------------------------------------------------------
(1)   38/  200CF0 :                     ; Object data
(1)   39/  200CF0 :                     ; ----------------------------------------------------------------
(1)   40/  200CF0 :                     
(1)   41/  200CF0 :                     ; Emily
(1)   42/  200CF0 :                     objPal_Emily:
(1)   43/  200CF0 :                     		binclude "game/screen_0/data/md/objects/emily/emi_pal.bin"
(1)   44/  200D06 :                     		align 2
(1)   45/  200D06 :                     objMap_Emily:
(1)   46/  200D06 :                     		binclude "game/screen_0/data/md/objects/emily/emi_map.bin"
(1)   47/  200EC6 :                     		align 2
(1)   48/  200EC6 :                     objDma_Emily:
(1)   49/  200EC6 :                     		binclude "game/screen_0/data/md/objects/emily/emi_plc.bin"
(1)   50/  200F66 :                     		align 2
(1)   51/  200F66 :                     
(1)   52/  200F66 :                     ; Doremi
(1)   53/  200F66 :                     objPal_Doremi:
(1)   54/  200F66 :                     		binclude "game/screen_0/data/md/objects/doremi/doremi_pal.bin"
(1)   55/  200F84 :                     		align 2
(1)   56/  200F84 :                     objMap_Doremi:
(1)   57/  200F84 :                     		binclude "game/screen_0/data/md/objects/doremi/doremi_map.bin"
(1)   58/  200FAC :                     		align 2
(1)   59/  200FAC :                     objDma_Doremi:
(1)   60/  200FAC :                     		binclude "game/screen_0/data/md/objects/doremi/doremi_plc.bin"
(1)   61/  200FBC :                     		align 2
(1)   62/  200FBC :                     
(1)   63/  200FBC :                     ; Bibi
(1)   64/  200FBC :                     ; objPal_Doremi:
(1)   65/  200FBC :                     ; 		binclude "game/screen_0/data/md/objects/doremi/doremi_pal.bin"
(1)   66/  200FBC :                     ; 		align 2
(1)   67/  200FBC :                     objMap_Bibi:
(1)   68/  200FBC :                     		binclude "game/screen_0/data/md/objects/bibi/bibi_map.bin"
(1)   69/  20109C :                     		align 2
(1)   70/  20109C :                     objDma_Bibi:
(1)   71/  20109C :                     		binclude "game/screen_0/data/md/objects/bibi/bibi_plc.bin"
(1)   72/  2010F2 :                     		align 2
(1)   73/  2010F2 :                     
(1)   74/  2010F2 :                     ; Sophie
(1)   75/  2010F2 :                     objPal_Sophie:
(1)   76/  2010F2 :                     		binclude "game/screen_0/data/md/objects/sophie/sophie_pal.bin"
(1)   77/  201110 :                     		align 2
(1)   78/  201110 :                     objMap_Sophie:
(1)   79/  201110 :                     		binclude "game/screen_0/data/md/objects/sophie/sophie_map.bin"
(1)   80/  201180 :                     		align 2
(1)   81/  201180 :                     objDma_Sophie:
(1)   82/  201180 :                     		binclude "game/screen_0/data/md/objects/sophie/sophie_plc.bin"
(1)   83/  2011A8 :                     		align 2
(1)   84/  2011A8 :                     
     413/  2011A8 :                     		include "game/screen_1/data_bank.asm"
(1)    1/  2011A8 :                     ; ===========================================================================
(1)    2/  2011A8 :                     ; ----------------------------------------------------------------
(1)    3/  2011A8 :                     ; 68K SCREEN MODE DATA
(1)    4/  2011A8 :                     ; for big stuff like maps, level, etc.
(1)    5/  2011A8 :                     ;
(1)    6/  2011A8 :                     ; For Genesis graphics use data_dma.asm
(1)    7/  2011A8 :                     ; and for 32X graphics use data_mgfx.asm
(1)    8/  2011A8 :                     ;
(1)    9/  2011A8 :                     ; For 32X, CD32X:
(1)   10/  2011A8 :                     ; THE 256-COLOR PALETTES GO HERE.
(1)   11/  2011A8 :                     ; ----------------------------------------------------------------
(1)   12/  2011A8 :                     
(1)   13/  2011A8 :                     ; ----------------------------------------------------------------
(1)   14/  2011A8 :                     ; 32X Screen maps
(1)   15/  2011A8 :                     ; ----------------------------------------------------------------
(1)   16/  2011A8 :                     
(1)   17/  2011A8 :                     MapMars_TEST:
(1)   18/  2011A8 :                     		binclude "game/screen_1/data/mars/maps/test/data_map.bin"
(1)   19/  2013D8 :                     		align 2
(1)   20/  2013D8 :                     
(1)   21/  2013D8 :                     ; ----------------------------------------------------------------
(1)   22/  2013D8 :                     ; 32X Palettes
(1)   23/  2013D8 :                     ; ----------------------------------------------------------------
(1)   24/  2013D8 :                     
(1)   25/  2013D8 :                     PalMars_TEST:
(1)   26/  2013D8 :                     		binclude "game/screen_1/data/mars/maps/test/data_pal.bin"
(1)   27/  2015D8 :                     		align 2
(1)   28/  2015D8 :                     
(1)   29/  2015D8 :                     ; ----------------------------------------------------------------
(1)   30/  2015D8 :                     ; Screen maps
(1)   31/  2015D8 :                     ; ----------------------------------------------------------------
(1)   32/  2015D8 :                     
(1)   33/  2015D8 :                     MAP_TEST:
(1)   34/  2015D8 :                     		binclude "game/screen_1/data/md/maps/test/md_map.bin"
(1)   35/  201E98 :                     		align 2
(1)   36/  201E98 :                     
(1)   37/  201E98 :                     ; ----------------------------------------------------------------
(1)   38/  201E98 :                     ; Object maps
(1)   39/  201E98 :                     ; ----------------------------------------------------------------
(1)   40/  201E98 :                     
(1)   41/  201E98 :                     objPal_Sisi:
(1)   42/  201E98 :                     		binclude "game/screen_1/data/md/objects/sisi/sisi_pal.bin"
(1)   43/  201EB8 :                     		align 2
(1)   44/  201EB8 :                     objMap_Sisi:
(1)   45/  201EB8 :                     		binclude "game/screen_1/data/md/objects/sisi/sisi_map.bin"
(1)   46/  201F14 :                     		align 2
(1)   47/  201F14 :                     
     415/  201F14 :                     		include "game/screen_0/data_dma.asm"	; SEGA CD / CD32X ONLY.
(1)    1/  201F14 :                     ; ===========================================================================
(1)    2/  201F14 :                     ; ----------------------------------------------------------------
(1)    3/  201F14 :                     ; DMA Genesis graphics for this screen mode
(1)    4/  201F14 :                     ; ----------------------------------------------------------------
(1)    5/  201F14 :                     
(1)    6/  201F14 :                     ASCII_FONT:	binclude "system/md/data/font.bin"
(1)    7/  202B14 :                     
(1)    8/  202B14 :                     ; ----------------------------------------------------------------
(1)    9/  202B14 :                     
(1)   10/  202B14 :                     Art_Scn0_BG:	binclude "game/screen_0/data/md/maps/test/md_art.bin"
(1)   11/  20ACB4 :                     Art_Scn0_BG_e:
(1)   12/  20ACB4 :                     		align 2
(1)   13/  20ACB4 :                     Art_Bibi:	binclude "game/screen_0/data/md/objects/bibi/bibi_art.bin"
(1)   14/  20C4D4 :                     Art_Bibi_e:
(1)   15/  20C4D4 :                     		align 2
(1)   16/  20C4D4 :                     Art_Doremi:	binclude "game/screen_0/data/md/objects/doremi/doremi_art.bin"
(1)   17/  20CAD4 :                     Art_Doremi_e:
(1)   18/  20CAD4 :                     		align 2
(1)   19/  20CAD4 :                     Art_Emily:	binclude "game/screen_0/data/md/objects/emily/emi_art.bin"
(1)   20/  20F654 :                     Art_Emily_e:
(1)   21/  20F654 :                     		align 2
(1)   22/  20F654 :                     Art_Sophie:	binclude "game/screen_0/data/md/objects/sophie/sophie_art.bin"
(1)   23/  210174 :                     Art_Sophie_e:
(1)   24/  210174 :                     		align 2
(1)   25/  210174 :                     
(1)   26/  210174 :                     
(1)   27/  210174 :                     
     416/  210174 :                     		include "game/screen_1/data_dma.asm"
(1)    1/  210174 :                     ; ===========================================================================
(1)    2/  210174 :                     ; ----------------------------------------------------------------
(1)    3/  210174 :                     ; DMA Genesis graphics for this screen mode
(1)    4/  210174 :                     ; ----------------------------------------------------------------
(1)    5/  210174 :                     
(1)    6/  210174 :                     ASCII_FONT_S1:	binclude "system/md/data/font.bin"
(1)    7/  210D74 :                     
(1)    8/  210D74 :                     ; ----------------------------------------------------------------
(1)    9/  210D74 :                     
(1)   10/  210D74 :                     ART_TEST:	binclude "game/screen_1/data/md/maps/test/md_art.bin"
(1)   11/  2194F4 :                     ART_TEST_e:
(1)   12/  2194F4 :                     		align 2
(1)   13/  2194F4 :                     Art_Sisi:	binclude "game/screen_1/data/md/objects/sisi/sisi_art.bin"
(1)   14/  219AD4 :                     Art_Sisi_e:
(1)   15/  219AD4 :                     		align 2
(1)   16/  219AD4 :                     
     418/  219AD4 :                     		include "sound/tracks.asm"		; GEMA: Track data
(1)    1/  219AD4 :                     ; ===========================================================================
(1)    2/  219AD4 :                     ; ------------------------------------------------------------
(1)    3/  219AD4 :                     ; SOUND TRACKS SECTION
(1)    4/  219AD4 :                     ; ------------------------------------------------------------
(1)    5/  219AD4 :                     
(1)    6/  219AD4 :                     ; ====================================================================
(1)    7/  219AD4 :                     ; ------------------------------------------------------------
(1)    8/  219AD4 :                     ; Instrument macros
(1)    9/  219AD4 :                     ; ------------------------------------------------------------
(1)   10/  219AD4 :                     
(1)   11/  219AD4 :                     gInsNull macro
(1)   12/  219AD4 :                     	dc.b $00,$00,$00,$00
(1)   13/  219AD4 :                     	dc.b $00,$00,$00,$00
(1)   14/  219AD4 :                     	endm
(1)   15/  219AD4 :                     
(1)   16/  219AD4 :                     ; alv: attack level
(1)   17/  219AD4 :                     ; atk: attack rate
(1)   18/  219AD4 :                     ; slv: sustain
(1)   19/  219AD4 :                     ; dky: decay rate (up)
(1)   20/  219AD4 :                     ; rrt: release rate (down)
(1)   21/  219AD4 :                     ; vib: (TODO)
(1)   22/  219AD4 :                     gInsPsg	macro pitch,alv,atk,slv,dky,rrt,vib
(1)   23/  219AD4 :                     	dc.b $80,pitch,alv,atk
(1)   24/  219AD4 :                     	dc.b slv,dky,rrt,vib
(1)   25/  219AD4 :                     	endm
(1)   26/  219AD4 :                     
(1)   27/  219AD4 :                     ; same args as gInsPsg
(1)   28/  219AD4 :                     ; but this has one more argument for the noise type:
(1)   29/  219AD4 :                     ; mode: noise mode
(1)   30/  219AD4 :                     ;       %tmm
(1)   31/  219AD4 :                     ;        t  - Bass(0)|Noise(1)
(1)   32/  219AD4 :                     ;         mm- Clock(0)|Clock/2(1)|Clock/4(2)|Tone3(3)
(1)   33/  219AD4 :                     ;
(1)   34/  219AD4 :                     gInsPsgN macro pitch,alv,atk,slv,dky,rrt,vib,mode
(1)   35/  219AD4 :                     	dc.b $90|mode,pitch,alv,atk
(1)   36/  219AD4 :                     	dc.b slv,dky,rrt,vib
(1)   37/  219AD4 :                     	endm
(1)   38/  219AD4 :                     
(1)   39/  219AD4 :                     ; 24-bit 68k pointer to FM patch data
(1)   40/  219AD4 :                     gInsFm macro pitch,fmins
(1)   41/  219AD4 :                     	dc.b $A0,pitch,((fmins>>16)&$FF),((fmins>>8)&$FF)
(1)   42/  219AD4 :                     	dc.b fmins&$FF,$00,$00,$00
(1)   43/  219AD4 :                     	endm
(1)   44/  219AD4 :                     
(1)   45/  219AD4 :                     ; Same args as gInsFm but for FM3 special.
(1)   46/  219AD4 :                     ;
(1)   47/  219AD4 :                     ; ** Pitch is useless here, set to 0 **
(1)   48/  219AD4 :                     gInsFm3	macro pitch,fmins
(1)   49/  219AD4 :                     	dc.b $B0,pitch,((fmins>>16)&$FF),((fmins>>8)&$FF)
(1)   50/  219AD4 :                     	dc.b fmins&$FF,$00,$00,$00
(1)   51/  219AD4 :                     	endm
(1)   52/  219AD4 :                     
(1)   53/  219AD4 :                     ; DAC Sample
(1)   54/  219AD4 :                     ;
(1)   55/  219AD4 :                     ; flags: %000L
(1)   56/  219AD4 :                     ;        L - Loop sample No/Yes
(1)   57/  219AD4 :                     gInsDac	macro pitch,start,flags
(1)   58/  219AD4 :                     	dc.b $C0|flags,pitch,((start>>16)&$FF),((start>>8)&$FF)
(1)   59/  219AD4 :                     	dc.b start&$FF,0,0,0
(1)   60/  219AD4 :                     	endm
(1)   61/  219AD4 :                     
(1)   62/  219AD4 :                     ; Sega CD PCM Sample
(1)   63/  219AD4 :                     ;
(1)   64/  219AD4 :                     ; flags: %000L
(1)   65/  219AD4 :                     ;        L - Loop sample No/Yes
(1)   66/  219AD4 :                     ;
(1)   67/  219AD4 :                     ; pitch:
(1)   68/  219AD4 :                     ; -17-7 = 8000 hz
(1)   69/  219AD4 :                     gInsPcm	macro pitch,start,flags
(1)   70/  219AD4 :                      if MCD|MARSCD
(1)   71/  219AD4 :                     	dc.b $D0|flags,pitch,((start>>16)&$FF),((start>>8)&$FF)
(1)   72/  219AD4 :                     	dc.b start&$FF,0,0,0
(1)   73/  219AD4 :                      else
(1)   74/  219AD4 :                     	dc.b $00,$00,$00,$00
(1)   75/  219AD4 :                     	dc.b $00,$00,$00,$00
(1)   76/  219AD4 :                      endif
(1)   77/  219AD4 :                     	endm
(1)   78/  219AD4 :                     
(1)   79/  219AD4 :                     ; Sega 32X PWM Sample
(1)   80/  219AD4 :                     ;
(1)   81/  219AD4 :                     ; flags: %00SL
(1)   82/  219AD4 :                     ;        L - Loop sample No/Yes
(1)   83/  219AD4 :                     ;        S - Sample data is in STEREO
(1)   84/  219AD4 :                     gInsPwm	macro pitch,start,flags
(1)   85/  219AD4 :                      if MARS|MARSCD
(1)   86/  219AD4 :                     	dc.b $E0|flags,pitch,((start>>24)&$FF),((start>>16)&$FF)
(1)   87/  219AD4 :                     	dc.b ((start>>8)&$FF),start&$FF,0,0
(1)   88/  219AD4 :                      else
(1)   89/  219AD4 :                     	dc.b $00,$00,$00,$00
(1)   90/  219AD4 :                     	dc.b $00,$00,$00,$00
(1)   91/  219AD4 :                      endif
(1)   92/  219AD4 :                     	endm
(1)   93/  219AD4 :                     
(1)   94/  219AD4 :                     ; ticks - %gttttttt
(1)   95/  219AD4 :                     ;   loc - 68k pointer
(1)   96/  219AD4 :                     ;
(1)   97/  219AD4 :                     ; t-Ticks
(1)   98/  219AD4 :                     ; g-Use global tempo
(1)   99/  219AD4 :                     gemaTrk macro ticks,loc
(1)  100/  219AD4 :                     	dc.l ((ticks&$FF)<<24)|loc&$FFFFFF
(1)  101/  219AD4 :                     	endm
(1)  102/  219AD4 :                     
(1)  103/  219AD4 :                     ; gemaHead
(1)  104/  219AD4 :                     ;
(1)  105/  219AD4 :                     ; blk_data,patt_data,ins_list,num_chnlsused
(1)  106/  219AD4 :                     gemaHead macro blk,pat,ins,num
(1)  107/  219AD4 :                     	dc.w num
(1)  108/  219AD4 :                     	dc.l blk
(1)  109/  219AD4 :                     	dc.l pat
(1)  110/  219AD4 :                     	dc.l ins
(1)  111/  219AD4 :                     	endm
(1)  112/  219AD4 :                     
(1)  113/  219AD4 :                     ; ====================================================================
(1)  114/  219AD4 :                     ; ------------------------------------------------------------
(1)  115/  219AD4 :                     ; Nikona DEFAULT track-list
(1)  116/  219AD4 :                     ;
(1)  117/  219AD4 :                     ; gemaTrk ticks+beatsbit*,track_data
(1)  118/  219AD4 :                     ; Add $80 ($80|ticks) to make the track use global sub-beats
(1)  119/  219AD4 :                     ;
(1)  120/  219AD4 :                     ; To use sub-beats call gemaSetBeats command
(1)  121/  219AD4 :                     ; BEFORE playing your track:
(1)  122/  219AD4 :                     ; 	move.w	#new_beats,d0
(1)  123/  219AD4 :                     ; 	bsr	gemaSetBeats
(1)  124/  219AD4 :                     ; 	move.w	#track_id,d0
(1)  125/  219AD4 :                     ;	bsr	gemaPlayTrack
(1)  126/  219AD4 :                     ; ------------------------------------------------------------
(1)  127/  219AD4 :                     
(1)  128/  219AD4 :                     	align 2
(1)  129/  219AD4 :                     Gema_MasterList:
(1)  130/  219AD4 : (MACRO)              	gemaTrk 4|$80,GemaTrk_Astral
(1)  130/  219AD4 : 8422 0520                   dc.l ((4|$80&$FF)<<24)|GEMATRK_ASTRAL&$FFFFFF
(1)  131/  219AD8 : (MACRO)              	gemaTrk 3|$80,GemaTrk_Arena1
(1)  131/  219AD8 : 8321 D5BE                   dc.l ((3|$80&$FF)<<24)|GEMATRK_ARENA1&$FFFFFF
(1)  132/  219ADC :                     ; 	gemaTrk 6|$80,GemaTrk_MOVEME
(1)  133/  219ADC :                     ; 	gemaTrk 6|$80,GemaTrk_NadieMD
(1)  134/  219ADC :                     ; 	gemaTrk 6|$80,GemaTrk_NadieMCD
(1)  135/  219ADC : (MACRO)              	gemaTrk 6|$80,GemaTrk_NadieMARS
(1)  135/  219ADC : 8622 1F6A                   dc.l ((6|$80&$FF)<<24)|GEMATRK_NADIEMARS&$FFFFFF
(1)  136/  219AE0 : (MACRO)              	gemaTrk 3|$80,GemaTrk_Crystal
(1)  136/  219AE0 : 8321 C384                   dc.l ((3|$80&$FF)<<24)|GEMATRK_CRYSTAL&$FFFFFF
(1)  137/  219AE4 : (MACRO)              	gemaTrk 3,GemaTrk_Dream
(1)  137/  219AE4 : 0321 AC34                   dc.l ((3&$FF)<<24)|GEMATRK_DREAM&$FFFFFF
(1)  138/  219AE8 :                     
(1)  139/  219AE8 :                     ; ------------------------------------------------------------
(1)  140/  219AE8 :                     ; BGM tracks
(1)  141/  219AE8 :                     ; ------------------------------------------------------------
(1)  142/  219AE8 :                     
(1)  143/  219AE8 :                     GemaSfx_All:
(1)  144/  219AE8 : (MACRO)              	gemaHead .blk,.pat,.ins,1
(1)  144/  219AE8 : 0001                        dc.w 1
(1)  144/  219AEA : 0021 9AF6                   dc.l .BLK
(1)  144/  219AEE : 0021 9AFC                   dc.l .PAT
(1)  144/  219AF2 : 0021 9BBC                   dc.l .INS
(1)  145/  219AF6 :                     .blk:
(1)  146/  219AF6 :                     	binclude "sound/tracks/sfxall_blk.bin"
(1)  147/  219AFB :                     	align 2
(1)  148/  219AFC :                     .pat:
(1)  149/  219AFC :                     	binclude "sound/tracks/sfxall_patt.bin"
(1)  150/  219BBB :                     	align 2
(1)  151/  219BBC :                     .ins:
(1)  152/  219BBC : (MACRO)              	gInsPsgN 0,$00,$00,$00,$00,$00,0,%100
(1)  152/  219BBC : 9400 0000                   dc.b $90|%100,0,$00,$00
(1)  152/  219BC0 : 0000 0000                   dc.b $00,$00,$00,0
(1)  153/  219BC4 : (MACRO)              	gInsPsgN 0,$00,$00,$00,$00,$00,0,%101
(1)  153/  219BC4 : 9500 0000                   dc.b $90|%101,0,$00,$00
(1)  153/  219BC8 : 0000 0000                   dc.b $00,$00,$00,0
(1)  154/  219BCC : (MACRO)              	gInsPsgN 0,$00,$00,$00,$00,$00,0,%110
(1)  154/  219BCC : 9600 0000                   dc.b $90|%110,0,$00,$00
(1)  154/  219BD0 : 0000 0000                   dc.b $00,$00,$00,0
(1)  155/  219BD4 : (MACRO)              	gInsFm 0,FmIns_Ding_1
(1)  155/  219BD4 : A000 2236                   dc.b $A0,0,((FMINS_DING_1>>16)&$FF),((FMINS_DING_1>>8)&$FF)
(1)  155/  219BD8 : B800 0000                   dc.b FMINS_DING_1&$FF,$00,$00,$00
(1)  156/  219BDC : (MACRO)              	gInsFm3 0,FmIns_Fm3_Explosion
(1)  156/  219BDC : B000 2232                   dc.b $B0,0,((FMINS_FM3_EXPLOSION>>16)&$FF),((FMINS_FM3_EXPLOSION>>8)&$FF)
(1)  156/  219BE0 : 1800 0000                   dc.b FMINS_FM3_EXPLOSION&$FF,$00,$00,$00
(1)  157/  219BE4 :                     
(1)  158/  219BE4 :                     ; ------------------------------------------------------------
(1)  159/  219BE4 :                     
(1)  160/  219BE4 :                     GemaTrk_TEST_0:
(1)  161/  219BE4 : (MACRO)              	gemaHead .blk,.pat,.ins,3
(1)  161/  219BE4 : 0003                        dc.w 3
(1)  161/  219BE6 : 0021 9BFA                   dc.l .BLK
(1)  161/  219BEA : 0021 9BFD                   dc.l .PAT
(1)  161/  219BEE : 0021 9BF2                   dc.l .INS
(1)  162/  219BF2 :                     .ins:
(1)  163/  219BF2 :                     ; 	gInsPsgN 0,$00,$00,$00,$00,$00,0,%101
(1)  164/  219BF2 :                     ; 	gInsFm -36-6,FmIns_Ambient_dark
(1)  165/  219BF2 : (MACRO)              	gInsPcm -12,PcmIns_MoveMe_BrassL,%11
(1)  165/  219BF2 : D3F4 06C9                   dc.b $D0|%11,-12,((PCMINS_MOVEME_BRASSL>>16)&$FF),((PCMINS_MOVEME_BRASSL>>8)&$FF)
(1)  165/  219BF6 : 1600 0000                   dc.b PCMINS_MOVEME_BRASSL&$FF,0,0,0
(1)  166/  219BFA :                     ; 	gInsPwm 0,PwmIns_Piano,%00
(1)  167/  219BFA :                     .blk:
(1)  168/  219BFA :                     	binclude "sound/tracks/test_blk.bin"
(1)  169/  219BFD :                     .pat:
(1)  170/  219BFD :                     	binclude "sound/tracks/test_patt.bin"
(1)  171/  219C5E :                     
(1)  172/  219C5E :                     ; ------------------------------------------------------------
(1)  173/  219C5E :                     
(1)  174/  219C5E :                     GemaTrk_MOVEME:
(1)  175/  219C5E : (MACRO)              	gemaHead .blk,.pat,.ins,13
(1)  175/  219C5E : 000D                        dc.w 13
(1)  175/  219C60 : 0021 9C6C                   dc.l .BLK
(1)  175/  219C64 : 0021 9C84                   dc.l .PAT
(1)  175/  219C68 : 0021 AB9C                   dc.l .INS
(1)  176/  219C6C :                     .blk:
(1)  177/  219C6C :                     	binclude "sound/tracks/moveme_blk.bin"
(1)  178/  219C83 :                     	align 2
(1)  179/  219C84 :                     .pat:
(1)  180/  219C84 :                     	binclude "sound/tracks/moveme_patt.bin"
(1)  181/  21AB9C :                     	align 2
(1)  182/  21AB9C :                     .ins:
(1)  183/  21AB9C : (MACRO)              	gInsPcm -12,PcmIns_MoveMe_Hit,%10
(1)  183/  21AB9C : D2F4 06A5                   dc.b $D0|%10,-12,((PCMINS_MOVEME_HIT>>16)&$FF),((PCMINS_MOVEME_HIT>>8)&$FF)
(1)  183/  21ABA0 : 2000 0000                   dc.b PCMINS_MOVEME_HIT&$FF,0,0,0
(1)  184/  21ABA4 : (MACRO)              	gInsFm 0,FmIns_Bass_Duck
(1)  184/  21ABA4 : A000 2233                   dc.b $A0,0,((FMINS_BASS_DUCK>>16)&$FF),((FMINS_BASS_DUCK>>8)&$FF)
(1)  184/  21ABA8 : 9800 0000                   dc.b FMINS_BASS_DUCK&$FF,$00,$00,$00
(1)  185/  21ABAC : (MACRO)              	gInsPcm -12,PcmIns_MoveMe_BrassL,%11
(1)  185/  21ABAC : D3F4 06C9                   dc.b $D0|%11,-12,((PCMINS_MOVEME_BRASSL>>16)&$FF),((PCMINS_MOVEME_BRASSL>>8)&$FF)
(1)  185/  21ABB0 : 1600 0000                   dc.b PCMINS_MOVEME_BRASSL&$FF,0,0,0
(1)  186/  21ABB4 : (MACRO)              	gInsFm 0,FmIns_ClosedHat
(1)  186/  21ABB4 : A000 2237                   dc.b $A0,0,((FMINS_CLOSEDHAT>>16)&$FF),((FMINS_CLOSEDHAT>>8)&$FF)
(1)  186/  21ABB8 : 7800 0000                   dc.b FMINS_CLOSEDHAT&$FF,$00,$00,$00
(1)  187/  21ABBC : (MACRO)              	gInsPsgN 0,$00,$00,$00,$00,$04,0,%110
(1)  187/  21ABBC : 9600 0000                   dc.b $90|%110,0,$00,$00
(1)  187/  21ABC0 : 0000 0400                   dc.b $00,$00,$04,0
(1)  188/  21ABC4 : (MACRO)              	gInsFm -12,FmIns_HBeat_tom
(1)  188/  21ABC4 : A0F4 2236                   dc.b $A0,-12,((FMINS_HBEAT_TOM>>16)&$FF),((FMINS_HBEAT_TOM>>8)&$FF)
(1)  188/  21ABC8 : F800 0000                   dc.b FMINS_HBEAT_TOM&$FF,$00,$00,$00
(1)  189/  21ABCC : (MACRO)              	gInsPcm -12,PcmIns_Snare,%10
(1)  189/  21ABCC : D2F4 06BF                   dc.b $D0|%10,-12,((PCMINS_SNARE>>16)&$FF),((PCMINS_SNARE>>8)&$FF)
(1)  189/  21ABD0 : 8E00 0000                   dc.b PCMINS_SNARE&$FF,0,0,0
(1)  190/  21ABD4 : (MACRO)              	gInsPcm -12,PcmIns_Kick,%10		;gInsFm -38,FmIns_DrumKick_gem
(1)  190/  21ABD4 : D2F4 06B6                   dc.b $D0|%10,-12,((PCMINS_KICK>>16)&$FF),((PCMINS_KICK>>8)&$FF)
(1)  190/  21ABD8 : 1A00 0000                   dc.b PCMINS_KICK&$FF,0,0,0
(1)  191/  21ABDC : (MACRO)              	gInsFm -12,FmIns_Trumpet_carnival	;FmIns_Trumpet_2
(1)  191/  21ABDC : A0F4 2235                   dc.b $A0,-12,((FMINS_TRUMPET_CARNIVAL>>16)&$FF),((FMINS_TRUMPET_CARNIVAL>>8)&$FF)
(1)  191/  21ABE0 : 1800 0000                   dc.b FMINS_TRUMPET_CARNIVAL&$FF,$00,$00,$00
(1)  192/  21ABE4 : (MACRO)              	gInsPsg 0,$20,$20,$10,$01,$08,0		;gInsFm -12,FmIns_Ding_Baseball;
(1)  192/  21ABE4 : 8000 2020                   dc.b $80,0,$20,$20
(1)  192/  21ABE8 : 1001 0800                   dc.b $10,$01,$08,0
(1)  193/  21ABEC : (MACRO)              	gInsFm3 0,FmIns_Sp_OpenHat
(1)  193/  21ABEC : B000 2232                   dc.b $B0,0,((FMINS_SP_OPENHAT>>16)&$FF),((FMINS_SP_OPENHAT>>8)&$FF)
(1)  193/  21ABF0 : 4000 0000                   dc.b FMINS_SP_OPENHAT&$FF,$00,$00,$00
(1)  194/  21ABF4 : (MACRO)              	gInsNull;gInsPwm -17,PwmIns_MyTime,%10
(1)  194/  21ABF4 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  194/  21ABF8 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  195/  21ABFC : (MACRO)              	gInsPsg +12,$20,$10,$10,$0C,$0C,0
(1)  195/  21ABFC : 800C 2010                   dc.b $80,+12,$20,$10
(1)  195/  21AC00 : 100C 0C00                   dc.b $10,$0C,$0C,0
(1)  196/  21AC04 : (MACRO)              	gInsPsg 0,$00,$00,$00,$00,$06,0
(1)  196/  21AC04 : 8000 0000                   dc.b $80,0,$00,$00
(1)  196/  21AC08 : 0000 0600                   dc.b $00,$00,$06,0
(1)  197/  21AC0C : (MACRO)              	gInsPcm -12,PcmIns_MoveMe_BrassR,%11
(1)  197/  21AC0C : D3F4 0735                   dc.b $D0|%11,-12,((PCMINS_MOVEME_BRASSR>>16)&$FF),((PCMINS_MOVEME_BRASSR>>8)&$FF)
(1)  197/  21AC10 : 0000 0000                   dc.b PCMINS_MOVEME_BRASSR&$FF,0,0,0
(1)  198/  21AC14 : (MACRO)              	gInsNull
(1)  198/  21AC14 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  198/  21AC18 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  199/  21AC1C : (MACRO)              	gInsNull
(1)  199/  21AC1C : 0000 0000                   dc.b $00,$00,$00,$00
(1)  199/  21AC20 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  200/  21AC24 : (MACRO)              	gInsNull
(1)  200/  21AC24 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  200/  21AC28 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  201/  21AC2C : (MACRO)              	gInsNull
(1)  201/  21AC2C : 0000 0000                   dc.b $00,$00,$00,$00
(1)  201/  21AC30 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  202/  21AC34 :                     
(1)  203/  21AC34 :                     ; ------------------------------------------------------------
(1)  204/  21AC34 :                     
(1)  205/  21AC34 :                     GemaTrk_Dream:
(1)  206/  21AC34 : (MACRO)              	gemaHead .blk,.pat,.ins,8
(1)  206/  21AC34 : 0008                        dc.w 8
(1)  206/  21AC36 : 0021 AC42                   dc.l .BLK
(1)  206/  21AC3A : 0021 AC4F                   dc.l .PAT
(1)  206/  21AC3E : 0021 C30C                   dc.l .INS
(1)  207/  21AC42 :                     .blk:
(1)  208/  21AC42 :                     	binclude "sound/tracks/dream_blk.bin"
(1)  209/  21AC4F :                     .pat:
(1)  210/  21AC4F :                     	binclude "sound/tracks/dream_patt.bin"
(1)  211/  21C30C :                     .ins:
(1)  212/  21C30C : (MACRO)              	gInsFm 0,FmIns_Hats_closed
(1)  212/  21C30C : A000 2237                   dc.b $A0,0,((FMINS_HATS_CLOSED>>16)&$FF),((FMINS_HATS_CLOSED>>8)&$FF)
(1)  212/  21C310 : 5800 0000                   dc.b FMINS_HATS_CLOSED&$FF,$00,$00,$00
(1)  213/  21C314 : (MACRO)              	gInsDac +12,DacIns_Kick_wegot,0
(1)  213/  21C314 : C00C 2387                   dc.b $C0|0,+12,((DACINS_KICK_WEGOT>>16)&$FF),((DACINS_KICK_WEGOT>>8)&$FF)
(1)  213/  21C318 : 5400 0000                   dc.b DACINS_KICK_WEGOT&$FF,0,0,0
(1)  214/  21C31C : (MACRO)              	gInsFm -12,FmIns_brass_eur
(1)  214/  21C31C : A0F4 2235                   dc.b $A0,-12,((FMINS_BRASS_EUR>>16)&$FF),((FMINS_BRASS_EUR>>8)&$FF)
(1)  214/  21C320 : 3800 0000                   dc.b FMINS_BRASS_EUR&$FF,$00,$00,$00
(1)  215/  21C324 : (MACRO)              	gInsFm -24,FmIns_Trumpet_carnival
(1)  215/  21C324 : A0E8 2235                   dc.b $A0,-24,((FMINS_TRUMPET_CARNIVAL>>16)&$FF),((FMINS_TRUMPET_CARNIVAL>>8)&$FF)
(1)  215/  21C328 : 1800 0000                   dc.b FMINS_TRUMPET_CARNIVAL&$FF,$00,$00,$00
(1)  216/  21C32C : (MACRO)              	gInsPsg  0,$00,$20,$00,$02,$10,0
(1)  216/  21C32C : 8000 0020                   dc.b $80,0,$00,$20
(1)  216/  21C330 : 0002 1000                   dc.b $00,$02,$10,0
(1)  217/  21C334 : (MACRO)              	gInsPsgN 0,$00,$10,$00,$01,$04,0,%100
(1)  217/  21C334 : 9400 0010                   dc.b $90|%100,0,$00,$10
(1)  217/  21C338 : 0001 0400                   dc.b $00,$01,$04,0
(1)  218/  21C33C : (MACRO)              	gInsFm 0,FmIns_Bass_low_1
(1)  218/  21C33C : A000 2234                   dc.b $A0,0,((FMINS_BASS_LOW_1>>16)&$FF),((FMINS_BASS_LOW_1>>8)&$FF)
(1)  218/  21C340 : 3800 0000                   dc.b FMINS_BASS_LOW_1&$FF,$00,$00,$00
(1)  219/  21C344 : (MACRO)              	gInsFm 0,FmIns_Hats_1
(1)  219/  21C344 : A000 2237                   dc.b $A0,0,((FMINS_HATS_1>>16)&$FF),((FMINS_HATS_1>>8)&$FF)
(1)  219/  21C348 : 3800 0000                   dc.b FMINS_HATS_1&$FF,$00,$00,$00
(1)  220/  21C34C : (MACRO)              	gInsPsgN 0,$00,$10,$00,$01,$08,0,%101
(1)  220/  21C34C : 9500 0010                   dc.b $90|%101,0,$00,$10
(1)  220/  21C350 : 0001 0800                   dc.b $00,$01,$08,0
(1)  221/  21C354 : (MACRO)              	gInsNull
(1)  221/  21C354 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  221/  21C358 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  222/  21C35C : (MACRO)              	gInsNull
(1)  222/  21C35C : 0000 0000                   dc.b $00,$00,$00,$00
(1)  222/  21C360 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  223/  21C364 : (MACRO)              	gInsNull
(1)  223/  21C364 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  223/  21C368 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  224/  21C36C : (MACRO)              	gInsNull
(1)  224/  21C36C : 0000 0000                   dc.b $00,$00,$00,$00
(1)  224/  21C370 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  225/  21C374 : (MACRO)              	gInsPsg  0,$40,$00,$00,$00,$00,0
(1)  225/  21C374 : 8000 4000                   dc.b $80,0,$40,$00
(1)  225/  21C378 : 0000 0000                   dc.b $00,$00,$00,0
(1)  226/  21C37C : (MACRO)              	gInsFm -12,FmIns_Trumpet_1
(1)  226/  21C37C : A0F4 2234                   dc.b $A0,-12,((FMINS_TRUMPET_1>>16)&$FF),((FMINS_TRUMPET_1>>8)&$FF)
(1)  226/  21C380 : F800 0000                   dc.b FMINS_TRUMPET_1&$FF,$00,$00,$00
(1)  227/  21C384 :                     
(1)  228/  21C384 :                     ; Ticks: 3-1
(1)  229/  21C384 :                     ; TEMPO: 170
(1)  230/  21C384 :                     GemaTrk_Crystal:
(1)  231/  21C384 : (MACRO)              	gemaHead .blk,.pat,.ins,7
(1)  231/  21C384 : 0007                        dc.w 7
(1)  231/  21C386 : 0021 C392                   dc.l .BLK
(1)  231/  21C38A : 0021 C39A                   dc.l .PAT
(1)  231/  21C38E : 0021 D58E                   dc.l .INS
(1)  232/  21C392 :                     .blk:
(1)  233/  21C392 :                     	binclude "sound/tracks/crystal_blk.bin"
(1)  234/  21C39A :                     .pat:
(1)  235/  21C39A :                     	binclude "sound/tracks/crystal_patt.bin"
(1)  236/  21D58E :                     .ins:
(1)  237/  21D58E : (MACRO)              	gInsFm 0,FmIns_Organ2a
(1)  237/  21D58E : A000 2231                   dc.b $A0,0,((FMINS_ORGAN2A>>16)&$FF),((FMINS_ORGAN2A>>8)&$FF)
(1)  237/  21D592 : F800 0000                   dc.b FMINS_ORGAN2A&$FF,$00,$00,$00
(1)  238/  21D596 : (MACRO)              	gInsPsgN 0,$00,$10,$00,$01,$10,0,%100
(1)  238/  21D596 : 9400 0010                   dc.b $90|%100,0,$00,$10
(1)  238/  21D59A : 0001 1000                   dc.b $00,$01,$10,0
(1)  239/  21D59E : (MACRO)              	gInsDac 0,DacIns_Kick_wegot,0
(1)  239/  21D59E : C000 2387                   dc.b $C0|0,0,((DACINS_KICK_WEGOT>>16)&$FF),((DACINS_KICK_WEGOT>>8)&$FF)
(1)  239/  21D5A2 : 5400 0000                   dc.b DACINS_KICK_WEGOT&$FF,0,0,0
(1)  240/  21D5A6 : (MACRO)              	gInsFm3 0,FmIns_Sp_OpenHat
(1)  240/  21D5A6 : B000 2232                   dc.b $B0,0,((FMINS_SP_OPENHAT>>16)&$FF),((FMINS_SP_OPENHAT>>8)&$FF)
(1)  240/  21D5AA : 4000 0000                   dc.b FMINS_SP_OPENHAT&$FF,$00,$00,$00
(1)  241/  21D5AE : (MACRO)              	gInsNull
(1)  241/  21D5AE : 0000 0000                   dc.b $00,$00,$00,$00
(1)  241/  21D5B2 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  242/  21D5B6 : (MACRO)              	gInsFm 0,FmIns_Bass_low_1
(1)  242/  21D5B6 : A000 2234                   dc.b $A0,0,((FMINS_BASS_LOW_1>>16)&$FF),((FMINS_BASS_LOW_1>>8)&$FF)
(1)  242/  21D5BA : 3800 0000                   dc.b FMINS_BASS_LOW_1&$FF,$00,$00,$00
(1)  243/  21D5BE :                     
(1)  244/  21D5BE :                     ; ------------------------------------------------------------
(1)  245/  21D5BE :                     
(1)  246/  21D5BE :                     GemaTrk_Arena1:
(1)  247/  21D5BE : (MACRO)              	gemaHead shrd_blk,shrd_pat,.ins,4
(1)  247/  21D5BE : 0004                        dc.w 4
(1)  247/  21D5C0 : 0021 D624                   dc.l SHRD_BLK
(1)  247/  21D5C4 : 0021 D64E                   dc.l SHRD_PAT
(1)  247/  21D5C8 : 0021 D5CC                   dc.l .INS
(1)  248/  21D5CC :                     .ins:
(1)  249/  21D5CC : (MACRO)              	gInsPcm -17-7,PcmIns_techno_01,0
(1)  249/  21D5CC : D0E8 0200                   dc.b $D0|0,-17-7,((PCMINS_TECHNO_01>>16)&$FF),((PCMINS_TECHNO_01>>8)&$FF)
(1)  249/  21D5D0 : 0000 0000                   dc.b PCMINS_TECHNO_01&$FF,0,0,0
(1)  250/  21D5D4 : (MACRO)              	gInsPcm -17-7,PcmIns_techno_02,0
(1)  250/  21D5D4 : D0E8 0227                   dc.b $D0|0,-17-7,((PCMINS_TECHNO_02>>16)&$FF),((PCMINS_TECHNO_02>>8)&$FF)
(1)  250/  21D5D8 : 5A00 0000                   dc.b PCMINS_TECHNO_02&$FF,0,0,0
(1)  251/  21D5DC : (MACRO)              	gInsPcm -17-7,PcmIns_techno_03,0
(1)  251/  21D5DC : D0E8 0277                   dc.b $D0|0,-17-7,((PCMINS_TECHNO_03>>16)&$FF),((PCMINS_TECHNO_03>>8)&$FF)
(1)  251/  21D5E0 : 2200 0000                   dc.b PCMINS_TECHNO_03&$FF,0,0,0
(1)  252/  21D5E4 : (MACRO)              	gInsPcm -17-7,PcmIns_techno_04,0
(1)  252/  21D5E4 : D0E8 028A                   dc.b $D0|0,-17-7,((PCMINS_TECHNO_04>>16)&$FF),((PCMINS_TECHNO_04>>8)&$FF)
(1)  252/  21D5E8 : 6E00 0000                   dc.b PCMINS_TECHNO_04&$FF,0,0,0
(1)  253/  21D5EC : (MACRO)              	gInsPcm -17-7,PcmIns_techno_05,0
(1)  253/  21D5EC : D0E8 0298                   dc.b $D0|0,-17-7,((PCMINS_TECHNO_05>>16)&$FF),((PCMINS_TECHNO_05>>8)&$FF)
(1)  253/  21D5F0 : 9200 0000                   dc.b PCMINS_TECHNO_05&$FF,0,0,0
(1)  254/  21D5F4 : (MACRO)              	gInsPcm -17-7,PcmIns_techno_06,1
(1)  254/  21D5F4 : D1E8 02D4                   dc.b $D0|1,-17-7,((PCMINS_TECHNO_06>>16)&$FF),((PCMINS_TECHNO_06>>8)&$FF)
(1)  254/  21D5F8 : A200 0000                   dc.b PCMINS_TECHNO_06&$FF,0,0,0
(1)  255/  21D5FC : (MACRO)              	gInsPcm -17-7,PcmIns_techno_07,1
(1)  255/  21D5FC : D1E8 03B4                   dc.b $D0|1,-17-7,((PCMINS_TECHNO_07>>16)&$FF),((PCMINS_TECHNO_07>>8)&$FF)
(1)  255/  21D600 : E800 0000                   dc.b PCMINS_TECHNO_07&$FF,0,0,0
(1)  256/  21D604 : (MACRO)              	gInsPcm -17-7,PcmIns_techno_08,1
(1)  256/  21D604 : D1E8 0409                   dc.b $D0|1,-17-7,((PCMINS_TECHNO_08>>16)&$FF),((PCMINS_TECHNO_08>>8)&$FF)
(1)  256/  21D608 : E600 0000                   dc.b PCMINS_TECHNO_08&$FF,0,0,0
(1)  257/  21D60C : (MACRO)              	gInsPcm -17-7,PcmIns_techno_09,1
(1)  257/  21D60C : D1E8 043B                   dc.b $D0|1,-17-7,((PCMINS_TECHNO_09>>16)&$FF),((PCMINS_TECHNO_09>>8)&$FF)
(1)  257/  21D610 : 0600 0000                   dc.b PCMINS_TECHNO_09&$FF,0,0,0
(1)  258/  21D614 : (MACRO)              	gInsPcm -17-7,PcmIns_techno_10,1
(1)  258/  21D614 : D1E8 046D                   dc.b $D0|1,-17-7,((PCMINS_TECHNO_10>>16)&$FF),((PCMINS_TECHNO_10>>8)&$FF)
(1)  258/  21D618 : C600 0000                   dc.b PCMINS_TECHNO_10&$FF,0,0,0
(1)  259/  21D61C : (MACRO)              	gInsPcm -17-7,PcmIns_techno_11,0
(1)  259/  21D61C : D0E8 04A2                   dc.b $D0|0,-17-7,((PCMINS_TECHNO_11>>16)&$FF),((PCMINS_TECHNO_11>>8)&$FF)
(1)  259/  21D620 : 2200 0000                   dc.b PCMINS_TECHNO_11&$FF,0,0,0
(1)  260/  21D624 :                     shrd_blk:
(1)  261/  21D624 :                     	binclude "sound/tracks/techno_blk.bin"
(1)  262/  21D64E :                     shrd_pat:
(1)  263/  21D64E :                     	binclude "sound/tracks/techno_patt.bin"
(1)  264/  220520 :                     
(1)  265/  220520 :                     GemaTrk_Astral:
(1)  266/  220520 : (MACRO)              	gemaHead .blk,.patt,.ins,4
(1)  266/  220520 : 0004                        dc.w 4
(1)  266/  220522 : 0022 05FE                   dc.l .BLK
(1)  266/  220526 : 0022 061A                   dc.l .PATT
(1)  266/  22052A : 0022 052E                   dc.l .INS
(1)  267/  22052E :                     .ins:
(1)  268/  22052E : (MACRO)              	gInsPcm -17-7,PcmIns_astral_01,1
(1)  268/  22052E : D1E8 04E3                   dc.b $D0|1,-17-7,((PCMINS_ASTRAL_01>>16)&$FF),((PCMINS_ASTRAL_01>>8)&$FF)
(1)  268/  220532 : 8200 0000                   dc.b PCMINS_ASTRAL_01&$FF,0,0,0
(1)  269/  220536 : (MACRO)              	gInsPcm -17-7,PcmIns_astral_02,1
(1)  269/  220536 : D1E8 0504                   dc.b $D0|1,-17-7,((PCMINS_ASTRAL_02>>16)&$FF),((PCMINS_ASTRAL_02>>8)&$FF)
(1)  269/  22053A : 1300 0000                   dc.b PCMINS_ASTRAL_02&$FF,0,0,0
(1)  270/  22053E : (MACRO)              	gInsPcm -17-7,PcmIns_astral_03,0
(1)  270/  22053E : D0E8 0525                   dc.b $D0|0,-17-7,((PCMINS_ASTRAL_03>>16)&$FF),((PCMINS_ASTRAL_03>>8)&$FF)
(1)  270/  220542 : A100 0000                   dc.b PCMINS_ASTRAL_03&$FF,0,0,0
(1)  271/  220546 : (MACRO)              	gInsPcm -17-7,PcmIns_astral_04,0
(1)  271/  220546 : D0E8 053E                   dc.b $D0|0,-17-7,((PCMINS_ASTRAL_04>>16)&$FF),((PCMINS_ASTRAL_04>>8)&$FF)
(1)  271/  22054A : 7700 0000                   dc.b PCMINS_ASTRAL_04&$FF,0,0,0
(1)  272/  22054E : (MACRO)              	gInsPcm -17-7,PcmIns_astral_05,0
(1)  272/  22054E : D0E8 0544                   dc.b $D0|0,-17-7,((PCMINS_ASTRAL_05>>16)&$FF),((PCMINS_ASTRAL_05>>8)&$FF)
(1)  272/  220552 : 8900 0000                   dc.b PCMINS_ASTRAL_05&$FF,0,0,0
(1)  273/  220556 : (MACRO)              	gInsPcm -17-7,PcmIns_astral_06,0
(1)  273/  220556 : D0E8 0547                   dc.b $D0|0,-17-7,((PCMINS_ASTRAL_06>>16)&$FF),((PCMINS_ASTRAL_06>>8)&$FF)
(1)  273/  22055A : 2F00 0000                   dc.b PCMINS_ASTRAL_06&$FF,0,0,0
(1)  274/  22055E : (MACRO)              	gInsPcm -17-7,PcmIns_astral_07,0
(1)  274/  22055E : D0E8 0554                   dc.b $D0|0,-17-7,((PCMINS_ASTRAL_07>>16)&$FF),((PCMINS_ASTRAL_07>>8)&$FF)
(1)  274/  220562 : A600 0000                   dc.b PCMINS_ASTRAL_07&$FF,0,0,0
(1)  275/  220566 : (MACRO)              	gInsPcm -17-7,PcmIns_astral_08,0
(1)  275/  220566 : D0E8 055D                   dc.b $D0|0,-17-7,((PCMINS_ASTRAL_08>>16)&$FF),((PCMINS_ASTRAL_08>>8)&$FF)
(1)  275/  22056A : 8900 0000                   dc.b PCMINS_ASTRAL_08&$FF,0,0,0
(1)  276/  22056E : (MACRO)              	gInsPcm -17-7,PcmIns_astral_09,0
(1)  276/  22056E : D0E8 0572                   dc.b $D0|0,-17-7,((PCMINS_ASTRAL_09>>16)&$FF),((PCMINS_ASTRAL_09>>8)&$FF)
(1)  276/  220572 : BD00 0000                   dc.b PCMINS_ASTRAL_09&$FF,0,0,0
(1)  277/  220576 : (MACRO)              	gInsPcm -17-7,PcmIns_astral_10,0
(1)  277/  220576 : D0E8 057E                   dc.b $D0|0,-17-7,((PCMINS_ASTRAL_10>>16)&$FF),((PCMINS_ASTRAL_10>>8)&$FF)
(1)  277/  22057A : 3000 0000                   dc.b PCMINS_ASTRAL_10&$FF,0,0,0
(1)  278/  22057E : (MACRO)              	gInsPcm -17-7,PcmIns_astral_11,0
(1)  278/  22057E : D0E8 058A                   dc.b $D0|0,-17-7,((PCMINS_ASTRAL_11>>16)&$FF),((PCMINS_ASTRAL_11>>8)&$FF)
(1)  278/  220582 : 3A00 0000                   dc.b PCMINS_ASTRAL_11&$FF,0,0,0
(1)  279/  220586 : (MACRO)              	gInsPcm -17-7,PcmIns_astral_12,0
(1)  279/  220586 : D0E8 05A8                   dc.b $D0|0,-17-7,((PCMINS_ASTRAL_12>>16)&$FF),((PCMINS_ASTRAL_12>>8)&$FF)
(1)  279/  22058A : 1C00 0000                   dc.b PCMINS_ASTRAL_12&$FF,0,0,0
(1)  280/  22058E : (MACRO)              	gInsPcm -17-7,PcmIns_astral_13,0
(1)  280/  22058E : D0E8 05B4                   dc.b $D0|0,-17-7,((PCMINS_ASTRAL_13>>16)&$FF),((PCMINS_ASTRAL_13>>8)&$FF)
(1)  280/  220592 : FA00 0000                   dc.b PCMINS_ASTRAL_13&$FF,0,0,0
(1)  281/  220596 : (MACRO)              	gInsPcm -17-7,PcmIns_astral_14,0
(1)  281/  220596 : D0E8 05C2                   dc.b $D0|0,-17-7,((PCMINS_ASTRAL_14>>16)&$FF),((PCMINS_ASTRAL_14>>8)&$FF)
(1)  281/  22059A : 8A00 0000                   dc.b PCMINS_ASTRAL_14&$FF,0,0,0
(1)  282/  22059E : (MACRO)              	gInsPcm -17-7,PcmIns_astral_15,0
(1)  282/  22059E : D0E8 05EF                   dc.b $D0|0,-17-7,((PCMINS_ASTRAL_15>>16)&$FF),((PCMINS_ASTRAL_15>>8)&$FF)
(1)  282/  2205A2 : 1500 0000                   dc.b PCMINS_ASTRAL_15&$FF,0,0,0
(1)  283/  2205A6 : (MACRO)              	gInsPcm -17-7,PcmIns_astral_16,0
(1)  283/  2205A6 : D0E8 05FC                   dc.b $D0|0,-17-7,((PCMINS_ASTRAL_16>>16)&$FF),((PCMINS_ASTRAL_16>>8)&$FF)
(1)  283/  2205AA : 2700 0000                   dc.b PCMINS_ASTRAL_16&$FF,0,0,0
(1)  284/  2205AE : (MACRO)              	gInsPcm -17-7,PcmIns_astral_17,0
(1)  284/  2205AE : D0E8 0607                   dc.b $D0|0,-17-7,((PCMINS_ASTRAL_17>>16)&$FF),((PCMINS_ASTRAL_17>>8)&$FF)
(1)  284/  2205B2 : C600 0000                   dc.b PCMINS_ASTRAL_17&$FF,0,0,0
(1)  285/  2205B6 : (MACRO)              	gInsPcm -17-7,PcmIns_astral_18,0
(1)  285/  2205B6 : D0E8 0613                   dc.b $D0|0,-17-7,((PCMINS_ASTRAL_18>>16)&$FF),((PCMINS_ASTRAL_18>>8)&$FF)
(1)  285/  2205BA : 7500 0000                   dc.b PCMINS_ASTRAL_18&$FF,0,0,0
(1)  286/  2205BE : (MACRO)              	gInsPcm -17-7,PcmIns_astral_19,1
(1)  286/  2205BE : D1E8 0616                   dc.b $D0|1,-17-7,((PCMINS_ASTRAL_19>>16)&$FF),((PCMINS_ASTRAL_19>>8)&$FF)
(1)  286/  2205C2 : 2500 0000                   dc.b PCMINS_ASTRAL_19&$FF,0,0,0
(1)  287/  2205C6 : (MACRO)              	gInsPcm -17-7,PcmIns_astral_20,1
(1)  287/  2205C6 : D1E8 062F                   dc.b $D0|1,-17-7,((PCMINS_ASTRAL_20>>16)&$FF),((PCMINS_ASTRAL_20>>8)&$FF)
(1)  287/  2205CA : 4300 0000                   dc.b PCMINS_ASTRAL_20&$FF,0,0,0
(1)  288/  2205CE : (MACRO)              	gInsPcm -17-7,PcmIns_astral_21,1
(1)  288/  2205CE : D1E8 0646                   dc.b $D0|1,-17-7,((PCMINS_ASTRAL_21>>16)&$FF),((PCMINS_ASTRAL_21>>8)&$FF)
(1)  288/  2205D2 : 4800 0000                   dc.b PCMINS_ASTRAL_21&$FF,0,0,0
(1)  289/  2205D6 : (MACRO)              	gInsPcm -17-7,PcmIns_astral_22,0
(1)  289/  2205D6 : D0E8 0676                   dc.b $D0|0,-17-7,((PCMINS_ASTRAL_22>>16)&$FF),((PCMINS_ASTRAL_22>>8)&$FF)
(1)  289/  2205DA : 9300 0000                   dc.b PCMINS_ASTRAL_22&$FF,0,0,0
(1)  290/  2205DE : (MACRO)              	gInsPcm -17-7,PcmIns_astral_23,0
(1)  290/  2205DE : D0E8 0680                   dc.b $D0|0,-17-7,((PCMINS_ASTRAL_23>>16)&$FF),((PCMINS_ASTRAL_23>>8)&$FF)
(1)  290/  2205E2 : 9F00 0000                   dc.b PCMINS_ASTRAL_23&$FF,0,0,0
(1)  291/  2205E6 : (MACRO)              	gInsPcm -17-7,PcmIns_astral_24,0
(1)  291/  2205E6 : D0E8 0683                   dc.b $D0|0,-17-7,((PCMINS_ASTRAL_24>>16)&$FF),((PCMINS_ASTRAL_24>>8)&$FF)
(1)  291/  2205EA : D800 0000                   dc.b PCMINS_ASTRAL_24&$FF,0,0,0
(1)  292/  2205EE : (MACRO)              	gInsPcm -17-7,PcmIns_astral_25,0
(1)  292/  2205EE : D0E8 0686                   dc.b $D0|0,-17-7,((PCMINS_ASTRAL_25>>16)&$FF),((PCMINS_ASTRAL_25>>8)&$FF)
(1)  292/  2205F2 : BC00 0000                   dc.b PCMINS_ASTRAL_25&$FF,0,0,0
(1)  293/  2205F6 : (MACRO)              	gInsPcm -17-7,PcmIns_astral_26,0
(1)  293/  2205F6 : D0E8 068F                   dc.b $D0|0,-17-7,((PCMINS_ASTRAL_26>>16)&$FF),((PCMINS_ASTRAL_26>>8)&$FF)
(1)  293/  2205FA : 1000 0000                   dc.b PCMINS_ASTRAL_26&$FF,0,0,0
(1)  294/  2205FE :                     .blk:
(1)  295/  2205FE :                     	binclude "sound/tracks/astral_blk.bin"
(1)  296/  22061A :                     .patt:
(1)  297/  22061A :                     	binclude "sound/tracks/astral_patt.bin"
(1)  298/  221F6A :                     
(1)  299/  221F6A :                     ; ------------------------------------------------------------
(1)  300/  221F6A :                     
(1)  301/  221F6A :                     ; GemaTrk_NadieMD:
(1)  302/  221F6A :                     ; 	gemaHead .blk,.patt,.inst,7
(1)  303/  221F6A :                     ; .blk:
(1)  304/  221F6A :                     ; 	binclude "sound/tracks/nadie_md_blk.bin"
(1)  305/  221F6A :                     ; 	align 2
(1)  306/  221F6A :                     ; .patt:
(1)  307/  221F6A :                     ; 	binclude "sound/tracks/nadie_md_patt.bin"
(1)  308/  221F6A :                     ; 	align 2
(1)  309/  221F6A :                     ; .inst:
(1)  310/  221F6A :                     ; 	gInsDac 0,DacIns_Nadie,0
(1)  311/  221F6A :                     ; 	gInsFm -36,FmIns_Piano_Aqua
(1)  312/  221F6A :                     ; 	gInsFm -12,FmIns_HBeat_tom
(1)  313/  221F6A :                     ; 	gInsFm -37,FmIns_DrumKick_gem
(1)  314/  221F6A :                     ; 	gInsPsg 0,$50,$70,$00,$06,$08,0
(1)  315/  221F6A :                     ; 	gInsFm 0,FmIns_Trumpet_1
(1)  316/  221F6A :                     ; 	gInsNull
(1)  317/  221F6A :                     ; 	gInsFm3 0,FmIns_Sp_ClosedHat
(1)  318/  221F6A :                     ; 	gInsFm3 0,FmIns_Sp_OpenHat
(1)  319/  221F6A :                     ;
(1)  320/  221F6A :                     ; GemaTrk_NadieMCD:
(1)  321/  221F6A :                     ; 	gemaHead .blk,.patt,.inst,11
(1)  322/  221F6A :                     ; .blk:
(1)  323/  221F6A :                     ; 	binclude "sound/tracks/nadie_mcd_blk.bin"
(1)  324/  221F6A :                     ; 	align 2
(1)  325/  221F6A :                     ; .patt
(1)  326/  221F6A :                     ; 	binclude "sound/tracks/nadie_mcd_patt.bin"
(1)  327/  221F6A :                     ; 	align 2
(1)  328/  221F6A :                     ; .inst:
(1)  329/  221F6A :                     ; 	gInsPcm -12,PcmIns_NadieL,%10
(1)  330/  221F6A :                     ; 	gInsFm -36,FmIns_Piano_Aqua
(1)  331/  221F6A :                     ; 	gInsFm -12,FmIns_HBeat_tom
(1)  332/  221F6A :                     ; 	gInsPcm -12-12,PcmIns_PKick,%00
(1)  333/  221F6A :                     ; 	gInsPsg 0,$50,$70,$00,$06,$08,0
(1)  334/  221F6A :                     ; 	gInsFm 0,FmIns_Trumpet_1
(1)  335/  221F6A :                     ; 	gInsPcm 0-12,PcmIns_Piano,%00
(1)  336/  221F6A :                     ; 	gInsPcm -12-12,PcmIns_PTom,%00
(1)  337/  221F6A :                     ; 	gInsPcm -12,PcmIns_NadieR,%10
(1)  338/  221F6A :                     ;
(1)  339/  221F6A :                     GemaTrk_NadieMARS:
(1)  340/  221F6A : (MACRO)              	gemaHead .blk,.patt,.inst,11
(1)  340/  221F6A : 000B                        dc.w 11
(1)  340/  221F6C : 0022 1F78                   dc.l .BLK
(1)  340/  221F70 : 0022 1F80                   dc.l .PATT
(1)  340/  221F74 : 0022 3190                   dc.l .INST
(1)  341/  221F78 :                     .blk:
(1)  342/  221F78 :                     	binclude "sound/tracks/nadie_blk.bin"
(1)  343/  221F7F :                     	align 2
(1)  344/  221F80 :                     .patt
(1)  345/  221F80 :                     	binclude "sound/tracks/nadie_patt.bin"
(1)  346/  223190 :                     	align 2
(1)  347/  223190 :                     .inst:
(1)  348/  223190 : (MACRO)              	gInsPwm 0,PwmIns_Nadie,%10
(1)  348/  223190 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  348/  223194 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  349/  223198 : (MACRO)              	gInsFm -36,FmIns_Piano_Aqua
(1)  349/  223198 : A0DC 2234                   dc.b $A0,-36,((FMINS_PIANO_AQUA>>16)&$FF),((FMINS_PIANO_AQUA>>8)&$FF)
(1)  349/  22319C : 9800 0000                   dc.b FMINS_PIANO_AQUA&$FF,$00,$00,$00
(1)  350/  2231A0 : (MACRO)              	gInsFm -12,FmIns_HBeat_tom
(1)  350/  2231A0 : A0F4 2236                   dc.b $A0,-12,((FMINS_HBEAT_TOM>>16)&$FF),((FMINS_HBEAT_TOM>>8)&$FF)
(1)  350/  2231A4 : F800 0000                   dc.b FMINS_HBEAT_TOM&$FF,$00,$00,$00
(1)  351/  2231A8 : (MACRO)              	gInsPwm -12,PwmIns_PKick,%00
(1)  351/  2231A8 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  351/  2231AC : 0000 0000                   dc.b $00,$00,$00,$00
(1)  352/  2231B0 : (MACRO)              	gInsPsg 0,$50,$70,$00,$06,$08,0
(1)  352/  2231B0 : 8000 5070                   dc.b $80,0,$50,$70
(1)  352/  2231B4 : 0006 0800                   dc.b $00,$06,$08,0
(1)  353/  2231B8 : (MACRO)              	gInsFm 0,FmIns_Trumpet_1
(1)  353/  2231B8 : A000 2234                   dc.b $A0,0,((FMINS_TRUMPET_1>>16)&$FF),((FMINS_TRUMPET_1>>8)&$FF)
(1)  353/  2231BC : F800 0000                   dc.b FMINS_TRUMPET_1&$FF,$00,$00,$00
(1)  354/  2231C0 : (MACRO)              	gInsPwm 0,PwmIns_Piano,%00
(1)  354/  2231C0 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  354/  2231C4 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  355/  2231C8 : (MACRO)              	gInsPwm -12,PwmIns_PTom,%00
(1)  355/  2231C8 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  355/  2231CC : 0000 0000                   dc.b $00,$00,$00,$00
(1)  356/  2231D0 : (MACRO)              	gInsNull
(1)  356/  2231D0 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  356/  2231D4 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  357/  2231D8 :                     
     419/  2231D8 :                     		include "sound/instr.asm"		; GEMA: FM instruments
(1)    1/  2231D8 :                     ; ===========================================================================
(1)    2/  2231D8 :                     ; --------------------------------------------------------
(1)    3/  2231D8 :                     ; GEMA/Nikona FM instruments "patches"
(1)    4/  2231D8 :                     ;
(1)    5/  2231D8 :                     ; Using .gsx save state for easy editing, use
(1)    6/  2231D8 :                     ; FM_EDITOR.bin in Fusion or any gsx compatible emulator
(1)    7/  2231D8 :                     ; to make or modify instrument data
(1)    8/  2231D8 :                     ; --------------------------------------------------------
(1)    9/  2231D8 :                     
(1)   10/  2231D8 :                     ; FM_EDITOR savestate data is located at:
(1)   11/  2231D8 :                     ; $2478
(1)   12/  2231D8 :                     ;
(1)   13/  2231D8 :                     ; Sizes:
(1)   14/  2231D8 :                     ; Normal FM ins: $20
(1)   15/  2231D8 :                     ; Special FM ins: $28
(1)   16/  2231D8 :                     ;
(1)   17/  2231D8 :                     ; INTRUMENT FORMAT:
(1)   18/  2231D8 :                     ; dc.b $30,$34,$38,$3C	; Register data following this order
(1)   19/  2231D8 :                     ; dc.b $40,$44,$48,$4C	; **
(1)   20/  2231D8 :                     ; dc.b $50,$54,$58,$5C	; **
(1)   21/  2231D8 :                     ; dc.b $60,$64,$68,$6C	; **
(1)   22/  2231D8 :                     ; dc.b $70,$74,$78,$7C	; **
(1)   23/  2231D8 :                     ; dc.b $80,$84,$88,$8C	; **
(1)   24/  2231D8 :                     ; dc.b $90,$94,$98,$9C	; **
(1)   25/  2231D8 :                     ; dc.b $B0,$B4,$22,$28	; **
(1)   26/  2231D8 :                     ; ** Extra words for FM3 special:
(1)   27/  2231D8 :                     ; dc.w OP1,OP2,OP3,OP4	; FM3 special ONLY: Manual frequencies
(1)   28/  2231D8 :                     ;
(1)   29/  2231D8 :                     ; $90,$94,$98,$9C: SSG-EG
(1)   30/  2231D8 :                     ; This CAN be used, but can be problematic on clone systems.
(1)   31/  2231D8 :                     ;
(1)   32/  2231D8 :                     ; $B4 PAN, PMS, AMS: %00aa0ppp
(1)   33/  2231D8 :                     ; Keep panning bits 0, set the panning in your track.
(1)   34/  2231D8 :                     ;
(1)   35/  2231D8 :                     ; $22 LFO: %0000evvv
(1)   36/  2231D8 :                     ; e - Enable
(1)   37/  2231D8 :                     ; v - Value
(1)   38/  2231D8 :                     ; $28 KEYS: %oooo0000
(1)   39/  2231D8 :                     ; o - Operators 4-1
(1)   40/  2231D8 :                     ; --------------------------------------------------------
(1)   41/  2231D8 :                     
(1)   42/  2231D8 :                     ; TODO: a macro for this.
(1)   43/  2231D8 :                     
(1)   44/  2231D8 :                     FmIns_Organ2:
(1)   45/  2231D8 :                     		binclude "sound/instr/fm/organ2.gsx",$2478,$20
(1)   46/  2231F8 :                     FmIns_Organ2a:
(1)   47/  2231F8 :                     		binclude "sound/instr/fm/organ2a.gsx",$2478,$20
(1)   48/  223218 :                     
(1)   49/  223218 :                     ; FM3 Special
(1)   50/  223218 :                     FmIns_Fm3_Explosion:
(1)   51/  223218 :                     		binclude "sound/instr/fm/OLD/fm3_sfx_boomworm.gsx",$2478,$28
(1)   52/  223240 :                     FmIns_Sp_OpenHat:
(1)   53/  223240 :                     		binclude "sound/instr/fm/OLD/fm3_openhat.gsx",$2478,$28
(1)   54/  223268 :                     FmIns_Sp_ClosedHat:
(1)   55/  223268 :                     		binclude "sound/instr/fm/OLD/fm3_closedhat.gsx",$2478,$28
(1)   56/  223290 :                     FmIns_Sp_Cowbell:
(1)   57/  223290 :                     		binclude "sound/instr/fm/OLD/fm3_cowbell.gsx",$2478,$28
(1)   58/  2232B8 :                     ; BASS
(1)   59/  2232B8 :                     FmIns_Bass_1:
(1)   60/  2232B8 :                     		binclude "sound/instr/fm/OLD/bass_low.gsx",$2478,$20
(1)   61/  2232D8 :                     FmIns_Bass_2:
(1)   62/  2232D8 :                     		binclude "sound/instr/fm/OLD/bass_strong.gsx",$2478,$20
(1)   63/  2232F8 :                     FmIns_Bass_donna:
(1)   64/  2232F8 :                     		binclude "sound/instr/fm/OLD/bass_feellove.gsx",$2478,$20
(1)   65/  223318 :                     FmIns_Bass_groove:
(1)   66/  223318 :                     		binclude "sound/instr/fm/OLD/bass_groove.gsx",$2478,$20
(1)   67/  223338 :                     FmIns_Bass_groove_2:
(1)   68/  223338 :                     		binclude "sound/instr/fm/OLD/bass_groove_2.gsx",$2478,$20
(1)   69/  223358 :                     FmIns_Bass_groove_gem:
(1)   70/  223358 :                     		binclude "sound/instr/fm/OLD/bass_groove_gem.gsx",$2478,$20
(1)   71/  223378 :                     FmIns_Bass_italo:
(1)   72/  223378 :                     		binclude "sound/instr/fm/OLD/bass_italo.gsx",$2478,$20
(1)   73/  223398 :                     FmIns_Bass_duck:
(1)   74/  223398 :                     		binclude "sound/instr/fm/OLD/bass_duck.gsx",$2478,$20
(1)   75/  2233B8 :                     FmIns_Bass_4:
(1)   76/  2233B8 :                     		binclude "sound/instr/fm/OLD/bass_4.gsx",$2478,$20
(1)   77/  2233D8 :                     FmIns_Bass_8:
(1)   78/  2233D8 :                     		binclude "sound/instr/fm/OLD/bass_8.gsx",$2478,$20
(1)   79/  2233F8 :                     FmIns_Bass_club:
(1)   80/  2233F8 :                     		binclude "sound/instr/fm/OLD/OLD_bass_club.gsx",$2478,$20
(1)   81/  223418 :                     FmIns_Bass_calm:
(1)   82/  223418 :                     		binclude "sound/instr/fm/OLD/bass_calm.gsx",$2478,$20
(1)   83/  223438 :                     FmIns_Bass_low_1:
(1)   84/  223438 :                     		binclude "sound/instr/fm/OLD/bass_low_1.bin"
(1)   85/  223458 :                     FmIns_Bass_Oil:
(1)   86/  223458 :                     		binclude "sound/instr/fm/OLD/bass_oil.gsx",$2478,$20
(1)   87/  223478 :                     
(1)   88/  223478 :                     ; PIANO
(1)   89/  223478 :                     FmIns_PianoM1:
(1)   90/  223478 :                     		binclude "sound/instr/fm/OLD/piano_m1.gsx",$2478,$20
(1)   91/  223498 :                     FmIns_Piano_Aqua:
(1)   92/  223498 :                     		binclude "sound/instr/fm/OLD/piano_aqua.gsx",$2478,$20
(1)   93/  2234B8 :                     FmIns_Piano_Hard:
(1)   94/  2234B8 :                     		binclude "sound/instr/fm/OLD/piano_hard.bin"
(1)   95/  2234D8 :                     ; FmIns_Piano_m1:
(1)   96/  2234D8 :                     ; 		binclude "sound/instr/fm/OLD/piano_m1.gsx",$2478,$20
(1)   97/  2234D8 :                     
(1)   98/  2234D8 :                     
(1)   99/  2234D8 :                     FmIns_Synth_Plus:
(1)  100/  2234D8 :                     		binclude "sound/instr/fm/OLD/OLD_synthplus.gsx",$2478,$20
(1)  101/  2234F8 :                     
(1)  102/  2234F8 :                     FmIns_Trumpet_1:
(1)  103/  2234F8 :                     		binclude "sound/instr/fm/OLD/OLD_trumpet_1.gsx",$2478,$20
(1)  104/  223518 :                     FmIns_Trumpet_carnival:
(1)  105/  223518 :                     		binclude "sound/instr/fm/OLD/OLD_trumpet_carnivl.gsx",$2478,$20
(1)  106/  223538 :                     
(1)  107/  223538 :                     
(1)  108/  223538 :                     FmIns_brass_eur:
(1)  109/  223538 :                     		binclude "sound/instr/fm/OLD/OLD_brass_eur.gsx",$2478,$20
(1)  110/  223558 :                     FmIns_Brass_Puy:
(1)  111/  223558 :                     		binclude "sound/instr/fm/OLD/brass_puy.gsx",$2478,$20
(1)  112/  223578 :                     
(1)  113/  223578 :                     
(1)  114/  223578 :                     FmIns_Organ_Ito:
(1)  115/  223578 :                     		binclude "sound/instr/fm/OLD/organ_ito.gsx",$2478,$20
(1)  116/  223598 :                     FmIns_Ding_Baseball:
(1)  117/  223598 :                     		binclude "sound/instr/fm/OLD/ding_baseball.gsx",$2478,$20
(1)  118/  2235B8 :                     FmIns_DrumKick_gem:
(1)  119/  2235B8 :                     		binclude "sound/instr/fm/OLD/drum_kick_gem.gsx",$2478,$20
(1)  120/  2235D8 :                     
(1)  121/  2235D8 :                     
(1)  122/  2235D8 :                     FmIns_Trumpet_2:
(1)  123/  2235D8 :                     		binclude "sound/instr/fm/OLD/trumpet_2.gsx",$2478,$20
(1)  124/  2235F8 :                     FmIns_Trumpet_puy:
(1)  125/  2235F8 :                     		binclude "sound/instr/fm/OLD/trumpet_puy.gsx",$2478,$20
(1)  126/  223618 :                     FmIns_Marimba:
(1)  127/  223618 :                     		binclude "sound/instr/fm/OLD/marimba.gsx",$2478,$20
(1)  128/  223638 :                     
(1)  129/  223638 :                     FmIns_Ding_toy:
(1)  130/  223638 :                     		binclude "sound/instr/fm/OLD/ding_toy.gsx",$2478,$20
(1)  131/  223658 :                     
(1)  132/  223658 :                     FmIns_Flaute_cave:
(1)  133/  223658 :                     		binclude "sound/instr/fm/OLD/flaute_sea.gsx",$2478,$20
(1)  134/  223678 :                     FmIns_Banjo_puy:
(1)  135/  223678 :                     		binclude "sound/instr/fm/OLD/banjo_puy.gsx",$2478,$20
(1)  136/  223698 :                     FmIns_PSynth_plus:
(1)  137/  223698 :                     		binclude "sound/instr/fm/OLD/psynth_plus.gsx",$2478,$20
(1)  138/  2236B8 :                     FmIns_Ding_1:
(1)  139/  2236B8 :                     		binclude "sound/instr/fm/OLD/ding_gem.gsx",$2478,$20
(1)  140/  2236D8 :                     FmIns_Trombone_gem:
(1)  141/  2236D8 :                     		binclude "sound/instr/fm/OLD/trombone_gem.gsx",$2478,$20
(1)  142/  2236F8 :                     FmIns_HBeat_tom:
(1)  143/  2236F8 :                     		binclude "sound/instr/fm/OLD/nadia_tom.gsx",$2478,$20
(1)  144/  223718 :                     FmIns_Guitar_bball:
(1)  145/  223718 :                     		binclude "sound/instr/fm/OLD/guitar_bball.gsx",$2478,$20
(1)  146/  223738 :                     
(1)  147/  223738 :                     FmIns_Hats_1:
(1)  148/  223738 :                     		binclude "sound/instr/fm/OLD/fm_hats_spot.bin"
(1)  149/  223758 :                     FmIns_Hats_closed:
(1)  150/  223758 :                     		binclude "sound/instr/fm/OLD/hats_closed.gsx",$2478,$20
(1)  151/  223778 :                     FmIns_ClosedHat:
(1)  152/  223778 :                     		binclude "sound/instr/fm/OLD/hats_closed.gsx",$2478,$20
(1)  153/  223798 :                     
(1)  154/  223798 :                     FmIns_Sewer_1:
(1)  155/  223798 :                     		binclude "sound/instr/fm/OLD/sewer_1.bin"
(1)  156/  2237B8 :                     
(1)  157/  2237B8 :                     
(1)  158/  2237B8 :                     FmIns_Ambient_dark:
(1)  159/  2237B8 :                     		binclude "sound/instr/fm/OLD/ambient_dark.gsx",$2478,$20
(1)  160/  2237D8 :                     FmIns_Ambient_spook:
(1)  161/  2237D8 :                     		binclude "sound/instr/fm/OLD/ambient_spook.gsx",$2478,$20
(1)  162/  2237F8 :                     FmIns_Ambient_3:
(1)  163/  2237F8 :                     		binclude "sound/instr/fm/OLD/ambient_3.gsx",$2478,$20
(1)  164/  223818 :                     
(1)  165/  223818 :                     
(1)  166/  223818 :                     ; FmIns_Guitar_bball:
(1)  167/  223818 :                     ; 		binclude "sound/instr/fm/guitar_bball.gsx",$2478,$20
(1)  168/  223818 :                     
     420/  223818 :                     		include "sound/smpl_dac.asm"		; (MCD/CD32X ONLY) GEMA: DAC samples
(1)    1/  223818 :                     ; ===========================================================================
(1)    2/  223818 :                     ; --------------------------------------------------------
(1)    3/  223818 :                     ; GEMA/Nikona DAC instruments
(1)    4/  223818 :                     ;
(1)    5/  223818 :                     ; This must be located at the 68k's 900000 area.
(1)    6/  223818 :                     ; ** 68K BANK 0 only **
(1)    7/  223818 :                     ;
(1)    8/  223818 :                     ; BASE Samplerate is at 16000hz
(1)    9/  223818 :                     ; --------------------------------------------------------
(1)   10/  223818 :                     
(1)   11/  223818 :                     	align $8000	; Start from a safe ROM-bank
(1)   12/  228000 :                     
(1)   13/  228000 :                     ; --------------------------------------------------------
(1)   14/  228000 :                     
(1)   15/  228000 :                     ; 	gSmplData Label,"filepath",loop_point(0-start)
(1)   16/  228000 : (MACRO)              	gSmplData DacIns_Nadie,"sound/instr/smpl/nadie.wav",0
(1)   16/  228000 : =$228000             DACINS_NADIE    label *
(1)   16/  228000 : B4DF 00                     dc.b ((DACINS_NADIE_e-DACINS_NADIE_s)&$FF),(((DACINS_NADIE_e-DACINS_NADIE_s)>>8)&$FF),(((DACINS_NADIE_e-DACINS_NADIE_s)>>16)&$FF)
(1)   16/  228003 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   16/  228006 :                     DACINS_NADIE_s:
(1)   16/  228006 :                             binclude "sound/instr/smpl/nadie.wav",$2C
(1)   16/  235FBA :                     DACINS_NADIE_e:
(1)   17/  235FBA : (MACRO)              	gSmplData DacIns_Kick_techno,"sound/instr/smpl/ST-72_kick.wav",0
(1)   17/  235FBA : =$235FBA             DACINS_KICK_TECHNO    label *
(1)   17/  235FBA : 9C06 00                     dc.b ((DACINS_KICK_TECHNO_e-DACINS_KICK_TECHNO_s)&$FF),(((DACINS_KICK_TECHNO_e-DACINS_KICK_TECHNO_s)>>8)&$FF),(((DACINS_KICK_TECHNO_e-DACINS_KICK_TECHNO_s)>>16)&$FF)
(1)   17/  235FBD : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   17/  235FC0 :                     DACINS_KICK_TECHNO_s:
(1)   17/  235FC0 :                             binclude "sound/instr/smpl/ST-72_kick.wav",$2C
(1)   17/  23665C :                     DACINS_KICK_TECHNO_e:
(1)   18/  23665C : (MACRO)              	gSmplData DacIns_Snare_techno,"sound/instr/smpl/ST-79_snare.wav",0
(1)   18/  23665C : =$23665C             DACINS_SNARE_TECHNO    label *
(1)   18/  23665C : F220 00                     dc.b ((DACINS_SNARE_TECHNO_e-DACINS_SNARE_TECHNO_s)&$FF),(((DACINS_SNARE_TECHNO_e-DACINS_SNARE_TECHNO_s)>>8)&$FF),(((DACINS_SNARE_TECHNO_e-DACINS_SNARE_TECHNO_s)>>16)&$FF)
(1)   18/  23665F : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   18/  236662 :                     DACINS_SNARE_TECHNO_s:
(1)   18/  236662 :                             binclude "sound/instr/smpl/ST-79_snare.wav",$2C
(1)   18/  238754 :                     DACINS_SNARE_TECHNO_e:
(1)   19/  238754 : (MACRO)              	gSmplData DacIns_Kick_wegot,"sound/instr/smpl/wegot_kick.wav",0
(1)   19/  238754 : =$238754             DACINS_KICK_WEGOT    label *
(1)   19/  238754 : 7407 00                     dc.b ((DACINS_KICK_WEGOT_e-DACINS_KICK_WEGOT_s)&$FF),(((DACINS_KICK_WEGOT_e-DACINS_KICK_WEGOT_s)>>8)&$FF),(((DACINS_KICK_WEGOT_e-DACINS_KICK_WEGOT_s)>>16)&$FF)
(1)   19/  238757 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   19/  23875A :                     DACINS_KICK_WEGOT_s:
(1)   19/  23875A :                             binclude "sound/instr/smpl/wegot_kick.wav",$2C
(1)   19/  238ECE :                     DACINS_KICK_WEGOT_e:
(1)   20/  238ECE :                     
     421/  238ECE :                     mdbank0_e:
     422/  238ECE : (MACRO)              	data_bkend MCD_DBANK0,MCD_DBANK0_e,mdbank0_e-mdbank0
     422/   A06CE :                                     dephase
     422/   A06CE :                                     align $800
     422/   A0800 : =$A0800              MCD_DBANK0_E label *  ; <-- CD/CD32X ONLY
     422/   A0800 :  (MACRO-2)                           report "68K DATA BANK: MCD_DBANK0 (WORD-RAM)",MDBANK0_E-MDBANK0,$40000
     422/   A0800 :                     
     422/   A0800 :                     
     423/   A0800 :                     
     424/   A0800 :                     ; --------------------------------------------------------
     425/   A0800 :                     ; BANK 1
     426/   A0800 :                     ; --------------------------------------------------------
     427/   A0800 :                     
     428/   A0800 :                     ; 	data_bank MCD_DBANK1,-1
     429/   A0800 :                     ; 		org $200000-4
     430/   A0800 :                     ; 		dc.b "BNK1"
     431/   A0800 :                     ; 	data_bank_e MCD_DBANK1_e
     432/   A0800 :                     
     433/   A0800 :                     ; --------------------------------------------------------
     434/   A0800 :                     ; BANK 2
     435/   A0800 :                     ; --------------------------------------------------------
     436/   A0800 :                     
     437/   A0800 :                     ; 	data_bank MCD_DBANK2,-1
     438/   A0800 :                     ; 		org $300000-4
     439/   A0800 :                     ; 		dc.b "BNK2"
     440/   A0800 :                     ; 	data_bank_e MCD_DBANK2_e
     441/   A0800 :                     
     442/   A0800 :                     ; --------------------------------------------------------
     443/   A0800 :                     ; BANK 3
     444/   A0800 :                     ; --------------------------------------------------------
     445/   A0800 :                     
     446/   A0800 :                     ; 	data_bank MCD_DBANK3,-1
     447/   A0800 :                     ; 		org $400000-4
     448/   A0800 :                     ; 		dc.b "BNK3"
     449/   A0800 :                     ; 	data_bank_e MCD_DBANK3_e
     450/   A0800 :                     
     451/   A0800 :                     ; ====================================================================
     452/   A0800 :                     ; ----------------------------------------------------------------
     453/   A0800 :                     ; 32X/CD32X ONLY
     454/   A0800 :                     ;
     455/   A0800 :                     ; SDRAM DATA packages for each screen mode
     456/   A0800 :                     ;
     457/   A0800 :                     ; Usage:
     458/   A0800 :                     ; sdram_bank START_LABEL,END_LABEL
     459/   A0800 :                     ; (includes and bincludes)
     460/   A0800 :                     ; sdram_bank_e START_LABEL,END_LABEL
     461/   A0800 :                     ; ----------------------------------------------------------------
     462/   A0800 :                     
     463/   A0800 :                     ; ---------------------------------------------
     464/   A0800 :                     ; SCREEN 00
     465/   A0800 :                     ; ---------------------------------------------
     466/   A0800 :                     
     467/   A0800 : (MACRO)              	sdram_bkset MARSDATA_SCREEN00,MARSDATA_SCREEN00_e
     467/   A0800 :                                     align $800
     467/   A0800 :                     ; MARSDATA_DEFAULT:
     467/   A0800 : =$A0800              MARSDATA_SCREEN00 label *
     468/   A0800 :                     	include "game/screen_0/data_mgfx.asm"
(1)    1/   A0800 :                     ; ===========================================================================
(1)    2/   A0800 :                     ; ----------------------------------------------------------------
(1)    3/   A0800 :                     ; Put your 32X graphics here
(1)    4/   A0800 :                     ;
(1)    5/   A0800 :                     ; This is stored on the Genesis side and then
(1)    6/   A0800 :                     ; sent to SDRAM using DREQ.
(1)    7/   A0800 :                     ;
(1)    8/   A0800 :                     ; Labels MUST be aligned by 4
(1)    9/   A0800 :                     ; ----------------------------------------------------------------
(1)   10/   A0800 :                     
(1)   11/   A0800 :                     		align 4
(1)   12/   A0800 :                     ArtMars_Scrn0:
(1)   13/   A0800 :                     		binclude "game/screen_0/data/mars/maps/test/data_art.bin"
(1)   14/   B1C00 :                     		align 4
(1)   15/   B1C00 :                     
(1)   16/   B1C00 :                     
(1)   17/   B1C00 :                     
     469/   B1C00 : (MACRO)              	sdram_bkend MARSDATA_SCREEN00,MARSDATA_SCREEN00_e
     469/   B1C00 :                                     align $800      ; DREQ data-pack alignment
     469/   B2000 : =$B2000              MARSDATA_SCREEN00_E label *
     469/   B2000 :                                     align $800
     469/   B2000 :                     
     470/   B2000 :                     
     471/   B2000 :                     ; ---------------------------------------------
     472/   B2000 :                     ; SCREEN 01
     473/   B2000 :                     ; ---------------------------------------------
     474/   B2000 :                     
     475/   B2000 : (MACRO)              	sdram_bkset MARSDATA_SCREEN01,MARSDATA_SCREEN01_e
     475/   B2000 :                                     align $800
     475/   B2000 :                     ; MARSDATA_DEFAULT:
     475/   B2000 : =$B2000              MARSDATA_SCREEN01 label *
     476/   B2000 :                     	include "game/screen_1/data_mgfx.asm"
(1)    1/   B2000 :                     ; ===========================================================================
(1)    2/   B2000 :                     ; ----------------------------------------------------------------
(1)    3/   B2000 :                     ; Put your 32X graphics here, indexed or direct
(1)    4/   B2000 :                     ;
(1)    5/   B2000 :                     ; This is stored on the Genesis side and then
(1)    6/   B2000 :                     ; sent to SDRAM using DREQ.
(1)    7/   B2000 :                     ;
(1)    8/   B2000 :                     ; Labels MUST be aligned by 4
(1)    9/   B2000 :                     ; ----------------------------------------------------------------
(1)   10/   B2000 :                     
(1)   11/   B2000 :                     		align 4
(1)   12/   B2000 :                     ArtMars_TEST:
(1)   13/   B2000 :                     		binclude "game/screen_1/data/mars/maps/test/data_art.bin"
(1)   14/   C3800 :                     		align 4
(1)   15/   C3800 :                     
(1)   16/   C3800 :                     
(1)   17/   C3800 :                     
     477/   C3800 : (MACRO)              	sdram_bkend MARSDATA_SCREEN01,MARSDATA_SCREEN01_e
     477/   C3800 :                                     align $800      ; DREQ data-pack alignment
     477/   C3800 : =$C3800              MARSDATA_SCREEN01_E label *
     477/   C3800 :                                     align $800
     477/   C3800 :                     
     478/   C3800 :                     
     479/   C3800 :                     ; ====================================================================
     480/   C3800 :                     ; ----------------------------------------------------------------
     481/   C3800 :                     ; Cartridge DMA graphics data
     482/   C3800 :                     ;
     483/   C3800 :                     ; BANK-free on 32X Cartridge
     484/   C3800 :                     ; ----------------------------------------------------------------
     485/   C3800 :                     
     490/   C3800 :                     
     491/   C3800 :                     ; ====================================================================
     492/   C3800 :                     ; ---------------------------------------------
     493/   C3800 :                     ; End
     494/   C3800 :                     ; ---------------------------------------------
     495/   C3800 :                     
     496/   C3800 :                     ROM_END:
     498/   C3800 : (MACRO)              		rompad (ROM_END&$FFFF00)+$10
     498/   C3800 : =$10                 diff := (ROM_END&$FFFF00)+$10 - *
     498/   C3800 : 0000 0000 0000                              dc.b [diff]0
            C3806 : 0000 0000 0000 
            C380C : 0000 0000          
     499/   C3810 :                     ; .here:		rompad .here&$FF0000+$10000
     503/   C3810 :                     
 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 3 - 03/16/2024 09:22:39 AM


  Symbol Table (* = unused):
  --------------------------

*ADAPTER :                        0 - | *ADEN :                           2 - |
 ALV :                           24 - |
*ARCHITECTURE :                                      "x86_64-unknown-linux" - |
*ARTMARS_SCRN0 :              A0800 C | *ARTMARS_TEST :               B2000 C |
 ART_BIBI :                  20ACB4 C | *ART_BIBI_E :                20C4D4 C |
 ART_DOREMI :                20C4D4 C | *ART_DOREMI_E :              20CAD4 C |
 ART_EMILY :                 20CAD4 C | *ART_EMILY_E :               20F654 C |
*ART_SCN0_BG :               202B14 C | *ART_SCN0_BG_E :             20ACB4 C |
 ART_SISI :                  2194F4 C |  ART_SISI_E :                219AD4 C |
 ART_SOPHIE :                20F654 C | *ART_SOPHIE_E :              210174 C |
 ART_TEST :                  210D74 C |  ART_TEST_E :                2194F4 C |
 ASCII_FONT :                201F14 C |  ASCII_FONT_S1 :             210174 C |
 ASCII_PAL :       FFFFFFFFFFFF0300 C |  ATK :                            8 - |
*BIGENDIAN :                      0 - |  BITCLICKL :                      0 - |
*BITCLICKM :                      2 - | *BITCLICKR :                      1 - |
*BITCLICKS :                      3 - |  BITDISPENBL :                    6 - |
 BITDMA :                         1 - |  BITDMAENBL :                     4 - |
*BITFIFOE :                       9 - | *BITFIFOF :                       8 - |
*BITHBLK :                        2 - | *BITHINTENBL :                    4 - |
*BITHVSTOP :                      1 - | *BITJOYA :                        6 - |
 BITJOYB :                        4 - |  BITJOYC :                        5 - |
 BITJOYDOWN :                     1 - |  BITJOYLEFT :                     2 - |
 BITJOYMODE :                     B - |  BITJOYRIGHT :                    3 - |
 BITJOYSTART :                    7 - |  BITJOYUP :                       0 - |
*BITJOYX :                        A - | *BITJOYY :                        9 - |
*BITJOYZ :                        8 - | *BITMAPMD :                       1 - |
 BITOBJ_FLIPH :                   0 - |  BITOBJ_FLIPV :                   1 - |
 BITOBJ_MARS :                    7 - | *BITODD :                         4 - |
*BITPAL :                         0 - | *BITSPRCOL :                      5 - |
*BITSPROVR :                      6 - | *BITV30 :                         3 - |
 BITVBLK :                        3 - | *BITVINT :                        7 - |
*BITVINTENBL :                    5 - | *BITWRAMMODE :                    2 - |
*BRANCHEXT :                      0 - | *BRMDEL :                         5 - |
*BRMDIR :                         7 - | *BRMFORMAT :                      6 - |
*BRMINIT :                        0 - | *BRMREAD :                        3 - |
*BRMSERCH :                       2 - | *BRMSTAT :                        1 - |
*BRMVERIFY :                      8 - | *BRMWRITE :                       4 - |
*CART :                           1 - | *CASESENSITIVE :                  0 - |
*CBTCHKDISC :                     4 - | *CBTCHKSTAT :                     5 - |
*CBTINIT :                        0 - | *CBTINT :                         1 - |
*CBTIPDISC :                      6 - | *CBTIPSTAT :                      7 - |
*CBTOPENDISC :                    2 - | *CBTOPENSTAT :                    3 - |
*CBTSPDISC :                      8 - | *CBTSPSTAT :                      9 - |
*CDBCHK :                        80 - | *CDBPAUSE :                      84 - |
*CDBSTAT :                       81 - | *CDBTOCREAD :                    83 - |
*CDBTOCWRITE :                   82 - |  CDCACK :                        8D - |
 CDCREAD :                       8B - | *CDCSETMODE :                    96 - |
*CDCSTART :                      87 - | *CDCSTARTP :                     88 - |
 CDCSTAT :                       8A - |  CDCSTOP :                       89 - |
 CDCTRN :                        8C - |  CDPCM_CLEN :                     4 C |
 CDPCM_CREAD :                    8 C |  CDPCM_ENV :                      D C |
 CDPCM_FLAGS :                    0 C | *CDPCM_FREEB :                    3 C |
 CDPCM_INIT :                  63F0 C |  CDPCM_INIT.CLR_PWM :          6404 C |
 CDPCM_INIT.COPY_DATA :        643A C |  CDPCM_INIT.DATA_BLK :         644C C |
 CDPCM_INIT.WR_END :           640E C |  CDPCM_LEN :                     14 C |
 CDPCM_LOOP :                    18 C |  CDPCM_NLEN :                    20 C |
 CDPCM_NLOOP :                   24 C |  CDPCM_NSTART :                  1C C |
 CDPCM_PAN :                      C C |  CDPCM_PITCH :                    E C |
 CDPCM_READTABLE :             646C C |
 CDPCM_READTABLE.CDCOM_KEYOFF :                                        64A4 C |
 CDPCM_READTABLE.CDCOM_KEYON : 64B0 C | *CDPCM_READTABLE.DONT_UPD :    64A2 C |
 CDPCM_READTABLE.EFFECT_MOD :  6518 C |  CDPCM_READTABLE.EFFECT_ONLY : 6514 C |
 CDPCM_READTABLE.GET_TBL :     6478 C |  CDPCM_READTABLE.NO_COMM :     6492 C |
 CDPCM_READTABLE.NO_KEYCUT :   648A C |  CDPCM_READTABLE.NO_KEYOFF :   6482 C |
 CDPCM_START :                   10 C |  CDPCM_STREAM :                6546 C |
 CDPCM_STREAM_IRQ :            6552 C |  CDPCM_STREAM_RUN :            655A C |
 CDPCM_STREAM_RUN.END_POINT :  6648 C |  CDPCM_STREAM_RUN.FILL_MODE :  67A8 C |
 CDPCM_STREAM_RUN.FIRST_FILL : 66C2 C |  CDPCM_STREAM_RUN.FORCE_OFF :  6596 C |
 CDPCM_STREAM_RUN.GET_ADDR :   6574 C |  CDPCM_STREAM_RUN.KEEP_STRM :  65A0 C |
 CDPCM_STREAM_RUN.LOOP_BLKL :  67AA C | *CDPCM_STREAM_RUN.LOOP_POINT : 661C C |
 CDPCM_STREAM_RUN.LOOP_STRM :  662C C |  CDPCM_STREAM_RUN.LOWHALF :    65DE C |
 CDPCM_STREAM_RUN.MAKE_BLK_STRM :                                      6600 C |
 CDPCM_STREAM_RUN.MAKE_LBLK :  674C C |  CDPCM_STREAM_RUN.NON_STRM :   65E8 C |
 CDPCM_STREAM_RUN.NON_UPD :    65AA C |  CDPCM_STREAM_RUN.NOT_END :    6688 C |
 CDPCM_STREAM_RUN.NO_REFILL :  6586 C |
 CDPCM_STREAM_RUN.SET_ENDLOOP :                                        672C C |
 CDPCM_STREAM_RUN.SET_NONSTOP :                                        6730 C |
 CDPCM_STREAM_RUN.SMALL_SAMPL :                                        671E C |
 CDPCM_STREAM_RUN.STLEN_IT :   6656 C |  CDPCM_STREAM_RUN.STRLEN_IT :  6638 C |
 CDPCM_STREAM_RUN.UPDATE_SET : 668A C |  CDPCM_STREAM_RUN.WAVE_BLKL :  6766 C |
*CDPCM_STRMF :                    1 C |  CDPCM_STRMHALF :                 2 C |
 CDPCM_WAIT :                  63E8 C |  CDPCM_WAVTOPCM :              67C0 C |
 CDPCM_WAVTOPCM.WAVE_LIST :    67CA C |  CDRAMDST :                      31 C |
 CDRAMLEN :                      30 C |  CDRAMSRC :                      33 C |
 CDRAMSRCB :                     35 C |  CDREGION :                       1 - |
 CHECK_THISRAM :   FFFFFFFFFFFFA000 C |  CHIP_ENV :                    11B1 C |
 CHIP_ENV.ATKEND :             1234 C | *CHIP_ENV.ATKZERO :            1237 C |
 CHIP_ENV.CHK2 :               123D C |  CHIP_ENV.CHK4 :               1272 C |
 CHIP_ENV.CKOF :               11D5 C |  CHIP_ENV.CKON :               11E8 C |
*CHIP_ENV.DECTMR :             1241 C |  CHIP_ENV.DKADD :              125B C |
 CHIP_ENV.DKSAV :              1263 C |  CHIP_ENV.DKYEND :             1268 C |
 CHIP_ENV.DO_NFREQ :           12C7 C |  CHIP_ENV.ENVPROC :            1206 C |
 CHIP_ENV.KILLENV :            1288 C | *CHIP_ENV.NBLOCK :             1206 C |
 CHIP_ENV.NORMAL :             12C2 C |  CHIP_ENV.NOUPD :              1308 C |
 CHIP_ENV.NSKIP :              11FD C |  CHIP_ENV.SILNC_3 :            12BE C |
 CHIP_ENV.VEDLP :              1290 C |  CHIP_ENV.VLMUCH :             12F4 C |
 CHIP_ENV.VLOOP :              11BD C |  CHIP_ENV.VONLY :              12EA C |
 CHNL_CHIP :                      1 - |  CHNL_EFFARG :                    6 - |
 CHNL_EFFID :                     5 - |  CHNL_FLAGS :                     0 - |
 CHNL_INS :                       3 - |  CHNL_NOTE :                      2 - |
 CHNL_TYPE :                      7 - |  CHNL_VOL :                       4 - |
*CLICKL :                         2 - | *CLICKM :                         4 - |
*CLICKR :                         1 - | *CLICKS :                         8 - |
*CMDINTCLR :                     1A - | *CMDIRQ_ON :                      2 - |
 COM :                            0 - | *COMM0 :                         20 - |
*COMM1 :                         21 - | *COMM10 :                        2A - |
*COMM11 :                        2B - | *COMM12 :                        2C - |
*COMM13 :                        2D - | *COMM14 :                        2E - |
*COMM15 :                        2F - | *COMM2 :                         22 - |
*COMM3 :                         23 - | *COMM4 :                         24 - |
*COMM5 :                         25 - | *COMM6 :                         26 - |
*COMM7 :                         27 - | *COMM8 :                         28 - |
*COMM9 :                         29 - |  COMMZFIFO :                     40 C |
 COMMZREAD :                     3F C |  COMMZROMBLK :                   2F C |
 COMMZWRITE :                    2E C | *COMPMODE :                       0 - |
*CONSTPI :        3.141592653589793 - |  CONTROLLER_1 :    FFFFFFFFFFFFC004 - |
 CONTROLLER_2 :    FFFFFFFFFFFFC014 - | *CS0 :                            0 - |
*CS1 :                      2000000 - |  CS2 :                      4000000 - |
*CS3 :                      6000000 - |  CTREG :                          F - |
 CURRTICKBITS :                1C98 C | *CUSTOM :                         0 - |
*CYCLE :                         32 - | *DACINS_KICK_TECHNO :        235FBA C |
 DACINS_KICK_WEGOT :         238754 C | *DACINS_NADIE :              228000 C |
*DACINS_SNARE_TECHNO :       23665C C |  DAC_FILL :                      20 C |
 DAC_ME :                         8 C |  DAC_OFF :                     1343 C |
 DAC_ON :                      132E C |  DAC_PLAY :                    1358 C |
 DAC_REFILL :                  138C C |  DAC_REFILL.DACFILL_END :      144B C |
 DAC_REFILL.DACFILL_LOOP :     1404 C |  DAC_REFILL.DACFILL_RET :      144E C |
 DAC_REFILL.DAC_OVER :         13DA C |  DATE :                "03/16/2024" - |
 DDACCNTR :                    1C87 C |  DDACFIFOMID :                 1C83 C |
 DDACPNTR :                    1C84 C |  DIFF :                          10 - |
*DISPENBL :                      40 - |  DKY :                            C - |
*DMAENBL :                       10 - | *DOTTEDSTRUCTS :                  0 - |
*DREQCTL :                        6 - | *DREQDEST :                       C - |
*DREQFIFO :                      12 - | *DREQLEN :                       10 - |
*DREQSOURCE :                     8 - | *DRVINIT :                       10 - |
*DRVOPEN :                        A - |  DRV_LOOP :                      54 C |
 DRV_LOOP.CMND_0 :               ED C |  DRV_LOOP.CMND_1 :               F0 C |
 DRV_LOOP.CMND_2 :              109 C |  DRV_LOOP.CMND_3 :              146 C |
 DRV_LOOP.CMND_5 :              184 C |  DRV_LOOP.CMND_6 :              1BD C |
 DRV_LOOP.CMND_7 :              1F6 C |  DRV_LOOP.CMND_RDSLOT :         214 C |
 DRV_LOOP.DEL_ALL :             17D C |  DRV_LOOP.GETCBYTEL :            C0 C |
 DRV_LOOP.GRAB_ARG :             BE C |  DRV_LOOP.LIST :                 DD C |
 DRV_LOOP.NEITHER :              94 C |  DRV_LOOP.NEXT_CMD :             9B C |
 DRV_LOOP.NOBEATS :              7B C |  DRV_LOOP.NOTICKS :              6E C |
 DRV_LOOP.NOT_PAL :             209 C |  DRV_LOOP.SRCH_DEL :            164 C |
 DRV_LOOP.SRCH_FVOL :           1A2 C |  DRV_LOOP.SRCH_MODE :           12C C |
 DRV_LOOP.SRCH_SLOT :           227 C |  DRV_LOOP.SRCH_VOL :            1DB C |
 DRV_LOOP.WRTTO_DEL :           171 C |  DRV_LOOP.WRTTO_FVOL :          1AF C |
 DRV_LOOP.WRTTO_SLOT :          13B C |  DRV_LOOP.WRTTO_VOL :           1E8 C |
 DTBL_MULTI :                   847 C |  DTBL_SINGL :                   85D C |
 DTBL_SINGL.CHNL_ULNK :         FB6 C |  DTBL_SINGL.CHNL_ULNKCUT :      FB0 C |
 DTBL_SINGL.CHNL_ULNKOFF :      FB6 C |  DTBL_SINGL.COMN_PANLIST :      D5E C |
 DTBL_SINGL.DAC_CUT :           BA3 C |  DTBL_SINGL.DAC_OFF :           BA9 C |
 DTBL_SINGL.DAC_PITCH :         BAC C |  DTBL_SINGL.D_CONT :            D17 C |
 DTBL_SINGL.EFFC :              C84 C |  DTBL_SINGL.EFFC_D :            C9F C |
 DTBL_SINGL.EFFC_E :            CE2 C |  DTBL_SINGL.EFFC_F :            CF7 C |
 DTBL_SINGL.EFFC_X :            D18 C |  DTBL_SINGL.FINE_DOWN :         CBA C |
 DTBL_SINGL.FINE_UP :           CCE C |  DTBL_SINGL.FM_CINDX :          B40 C |
 DTBL_SINGL.FM_CUT :            A8B C |  DTBL_SINGL.FM_HASVOL :         F4A C |
 DTBL_SINGL.FM_KEYOFF :         A94 C |  DTBL_SINGL.FM_OFF :            A85 C |
 DTBL_SINGL.FM_SETFREQ :        AB3 C |  DTBL_SINGL.FM_SETRLIST :       E61 C |
 DTBL_SINGL.FM_TLOFF :          A9C C |  DTBL_SINGL.FM_WRTALPAN :       B48 C |
 DTBL_SINGL.FM_WRTLVOL :        ACA C |  DTBL_SINGL.FND_OCT :           F9B C |
 DTBL_SINGL.FROM_PSGN :         957 C |  DTBL_SINGL.GET_OCT :           F90 C |
 DTBL_SINGL.INST :              D8F C |  DTBL_SINGL.INS_DAC :           E71 C |
 DTBL_SINGL.INS_FM :            DF0 C |  DTBL_SINGL.INS_PCM :           EC5 C |
 DTBL_SINGL.INS_PSG :           DBA C |  DTBL_SINGL.INS_PSGN :          DB4 C |
 DTBL_SINGL.INS_PWM :           EFD C | *DTBL_SINGL.INVL_INS :          DB3 C |
 DTBL_SINGL.KEEP_TLMX :         B35 C |  DTBL_SINGL.KYCUT_PSG :         9A3 C |
 DTBL_SINGL.KYCUT_PSGN :        9A0 C |  DTBL_SINGL.KYOFF_PSG :         996 C |
 DTBL_SINGL.KYOFF_PSGN :        993 C |  DTBL_SINGL.KYPSGN_HATOFF :     9AD C |
 DTBL_SINGL.LINKED :            8C7 C |  DTBL_SINGL.MKFM_SET :          A16 C |
*DTBL_SINGL.MKPCM_PROC :        C0E C |  DTBL_SINGL.MKPCM_WRTON :       C0B C |
 DTBL_SINGL.MK_DAC :            B7E C |  DTBL_SINGL.MK_FM :             9B4 C |
 DTBL_SINGL.MK_FMSPC :          A2A C |  DTBL_SINGL.MK_LIST :           902 C |
 DTBL_SINGL.MK_PCM :            BD2 C |  DTBL_SINGL.MK_PSG :            936 C |
 DTBL_SINGL.MK_PSGN :           910 C |  DTBL_SINGL.MK_PWM :            C63 C |
 DTBL_SINGL.MP_RESET :          C09 C |  DTBL_SINGL.NEW_ROMDAT :        E24 C |
*DTBL_SINGL.NOFM_NOTE :         A29 C |  DTBL_SINGL.NORM_DOWN :         CB8 C |
 DTBL_SINGL.NORM_UP :           CD0 C |  DTBL_SINGL.NOTE :              F40 C |
 DTBL_SINGL.NOT_DAC :           9D3 C |  DTBL_SINGL.NOT_DSPC :          9E8 C |
 DTBL_SINGL.NO_LFO :            B7D C |  DTBL_SINGL.N_FM :              F86 C |
 DTBL_SINGL.N_INDX :            F72 C |  DTBL_SINGL.N_PSGN :            F81 C |
 DTBL_SINGL.N_STFREQ :          F73 C |  DTBL_SINGL.PAN_MCD :           D48 C |
 DTBL_SINGL.PCM_CUT :           C56 C |  DTBL_SINGL.PCM_EFFC :          BFB C |
 DTBL_SINGL.PCM_NOTE :          BFF C |  DTBL_SINGL.PCM_OFF :           C4F C |
 DTBL_SINGL.PCM_PANLIST :       D66 C |  DTBL_SINGL.PCM_SETCOFF :       C5B C |
 DTBL_SINGL.PSG_KEYON :         97E C |  DTBL_SINGL.RCYL_COM :          8B2 C |
 DTBL_SINGL.READFREQ_PCM :      C64 C | *DTBL_SINGL.READFREQ_PWM :      C69 C |
 DTBL_SINGL.RES_PAN :           D3E C |  DTBL_SINGL.SAME_PATCH :        E5C C |
 DTBL_SINGL.SAVE_ARG :          D0C C |  DTBL_SINGL.SET_WAVFREQ :       C6C C |
 DTBL_SINGL.SILN_DAC :          8BE C |  DTBL_SINGL.SILN_FM :           8C1 C |
 DTBL_SINGL.SILN_PCM :          89C C |  DTBL_SINGL.SILN_PSG :          895 C |
 DTBL_SINGL.SILN_PSG_N :        891 C |  DTBL_SINGL.SILN_PWM :          8A8 C |
 DTBL_SINGL.SPCREGLIST :        A7D C |  DTBL_SINGL.TL_DOWN :           AA8 C |
 DTBL_SINGL.VMUCH :             98D C |  DTBL_SINGL.VOLU :              D86 C |
 DTBL_SINGL.VOL_DVLD :          CDE C |  DTBL_SINGL.VPCM_CARRY :        C3C C |
 DTBL_SINGL.VPCM_SILN :         C39 C |  DTBL_SINGL.VPCM_ZERO :         C3D C |
 DTBL_SINGL.WRITE_TL :          B2E C |  DTBL_SINGL.WR_SPC :            A60 C |
 DTH :                           20 - |  DTL :                           1C - |
 DWAVEBUFF :                   1D00 C | *EMU :                            1 - |
 ENV :                            1 - | *EXT_3 :                          C C |
*EXT_4 :                          E C | *FALSE :                          0 - |
 FDH :                            7 - |  FDL :                            5 - |
*FDRCHG :                        86 - | *FDRSET :                        85 - |
*FEN :                            2 - |  FILE_SUBDATA :                6054 C |
*FILLDATA :                       8 - | *FILLLENGTH :                     4 - |
*FILLSTART :                      6 - |  FLG :                           28 - |
*FM :                            80 - |  FMCACH_1 :                    166B C |
 FMCACH_2 :                    1693 C |  FMCACH_3 :                    16BB C |
 FMCACH_4 :                    16E3 C |  FMCACH_5 :                    170B C |
 FMCACH_6 :                    1733 C |  FMCACH_LIST :                 1C70 C |
 FMFREQ_LIST :                 145D C | *FMINS_AMBIENT_3 :           2237F8 C |
*FMINS_AMBIENT_DARK :        2237B8 C | *FMINS_AMBIENT_SPOOK :       2237D8 C |
*FMINS_BANJO_PUY :           223678 C | *FMINS_BASS_1 :              2232B8 C |
*FMINS_BASS_2 :              2232D8 C | *FMINS_BASS_4 :              2233B8 C |
*FMINS_BASS_8 :              2233D8 C | *FMINS_BASS_CALM :           223418 C |
*FMINS_BASS_CLUB :           2233F8 C | *FMINS_BASS_DONNA :          2232F8 C |
 FMINS_BASS_DUCK :           223398 C | *FMINS_BASS_GROOVE :         223318 C |
*FMINS_BASS_GROOVE_2 :       223338 C | *FMINS_BASS_GROOVE_GEM :     223358 C |
*FMINS_BASS_ITALO :          223378 C |  FMINS_BASS_LOW_1 :          223438 C |
*FMINS_BASS_OIL :            223458 C |  FMINS_BRASS_EUR :           223538 C |
*FMINS_BRASS_PUY :           223558 C |  FMINS_CLOSEDHAT :           223778 C |
 FMINS_DING_1 :              2236B8 C | *FMINS_DING_BASEBALL :       223598 C |
*FMINS_DING_TOY :            223638 C | *FMINS_DRUMKICK_GEM :        2235B8 C |
*FMINS_FLAUTE_CAVE :         223658 C |  FMINS_FM3_EXPLOSION :       223218 C |
*FMINS_GUITAR_BBALL :        223718 C |  FMINS_HATS_1 :              223738 C |
 FMINS_HATS_CLOSED :         223758 C |  FMINS_HBEAT_TOM :           2236F8 C |
*FMINS_MARIMBA :             223618 C | *FMINS_ORGAN2 :              2231D8 C |
 FMINS_ORGAN2A :             2231F8 C | *FMINS_ORGAN_ITO :           223578 C |
*FMINS_PIANOM1 :             223478 C |  FMINS_PIANO_AQUA :          223498 C |
*FMINS_PIANO_HARD :          2234B8 C | *FMINS_PSYNTH_PLUS :         223698 C |
*FMINS_SEWER_1 :             223798 C | *FMINS_SP_CLOSEDHAT :        223268 C |
*FMINS_SP_COWBELL :          223290 C |  FMINS_SP_OPENHAT :          223240 C |
*FMINS_SYNTH_PLUS :          2234D8 C | *FMINS_TROMBONE_GEM :        2236D8 C |
 FMINS_TRUMPET_1 :           2234F8 C | *FMINS_TRUMPET_2 :           2235D8 C |
 FMINS_TRUMPET_CARNIVAL :    223518 C | *FMINS_TRUMPET_PUY :         2235F8 C |
 FMSPECIAL :                   1C82 C |  FM_AUTOREG :                  1314 C |
 FM_SEND_1 :                   1318 C |  FM_SEND_2 :                   1323 C |
*FRAMECTL :                       B - | *FS :                             1 - |
*FULLPMMU :                       1 - |  GEMADMAPAUSE :    FFFFFFFFFFFF015C C |
 GEMADMAPAUSEROM : FFFFFFFFFFFF0198 C |  GEMADMARESUME :   FFFFFFFFFFFF017E C |
 GEMADMARESUMEROM :                                        FFFFFFFFFFFF01BA C |
 GEMAFADETRACK :   FFFFFFFFFFFF0254 C |  GEMAMSTRLISTPOS :               1C C |
 GEMAPLAYTRACK :   FFFFFFFFFFFF01FA C |  GEMASETBEATS :    FFFFFFFFFFFF028C C |
 GEMASETMASTERLIST :                                       FFFFFFFFFFFF01E4 C |
 GEMASETTRACKVOL : FFFFFFFFFFFF0270 C | *GEMASFX_ALL :               219AE8 C |
 GEMASFX_ALL.BLK :           219AF6 C |  GEMASFX_ALL.INS :           219BBC C |
 GEMASFX_ALL.PAT :           219AFC C |  GEMASTOPALL :     FFFFFFFFFFFF0238 C |
 GEMASTOPTRACK :   FFFFFFFFFFFF021C C |  GEMATEST :        FFFFFFFFFFFF01D4 C |
 GEMATRK_ARENA1 :            21D5BE C |  GEMATRK_ARENA1.INS :        21D5CC C |
 GEMATRK_ASTRAL :            220520 C |  GEMATRK_ASTRAL.BLK :        2205FE C |
 GEMATRK_ASTRAL.INS :        22052E C |  GEMATRK_ASTRAL.PATT :       22061A C |
 GEMATRK_CRYSTAL :           21C384 C |  GEMATRK_CRYSTAL.BLK :       21C392 C |
 GEMATRK_CRYSTAL.INS :       21D58E C |  GEMATRK_CRYSTAL.PAT :       21C39A C |
 GEMATRK_DREAM :             21AC34 C |  GEMATRK_DREAM.BLK :         21AC42 C |
 GEMATRK_DREAM.INS :         21C30C C |  GEMATRK_DREAM.PAT :         21AC4F C |
*GEMATRK_MOVEME :            219C5E C |  GEMATRK_MOVEME.BLK :        219C6C C |
 GEMATRK_MOVEME.INS :        21AB9C C |  GEMATRK_MOVEME.PAT :        219C84 C |
 GEMATRK_NADIEMARS :         221F6A C |  GEMATRK_NADIEMARS.BLK :     221F78 C |
 GEMATRK_NADIEMARS.INST :    223190 C |  GEMATRK_NADIEMARS.PATT :    221F80 C |
*GEMATRK_TEST_0 :            219BE4 C |  GEMATRK_TEST_0.BLK :        219BFA C |
 GEMATRK_TEST_0.INS :        219BF2 C |  GEMATRK_TEST_0.PAT :        219BFD C |
 GEMA_INIT :                   106C C |  GEMA_INIT.END_SETUP :         10D7 C |
 GEMA_INIT.SETUP_LIST :        10AC C |  GEMA_INIT.ST_COPY :           10CB C |
 GEMA_LASTBANK :               1452 C |  GEMA_LASTBANK.WRITE :         1457 C |
 GEMA_MASTERLIST :           219AD4 C |  GET_TICK :                    10D8 C |
 GET_TICK.CTNOTICK :           10F5 C |  GLBL_LASTORG :    FFFFFFFFFFFFD404 - |
 GLBL_LASTPC :     FFFFFFFFFFFF2000 - | *HAS64 :                          1 - |
*HASDSP :                         0 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - | *HBLK :                          40 - |
*HCOUNT :                         5 - |  HEADEROUT :                   1C9F C |
 HEADEROUT_E :                 1CAD C | *HINTCLR :                       18 - |
*HINTENBL :                      10 - |  HINT_DEFAULT :    FFFFFFFFFFFF13EC C |
*HIRQ_ON :                        4 - | *HVSTOP :                         2 - |
*INEXTMODE :                      0 - | *INLWORDMODE :                    0 - |
*INMAXMODE :                      0 - | *INSRCMODE :                      0 - |
 INSTLISTOUT :                 1CAF C | *INSUPMODE :                      1 - |
*INTMASK :                        1 - |  IP_END :                       7B6 C |
 IP_START :                     784 C |  IP_START.COLOR_OUT :           7A2 C |
 IP_START.WAIT_VINT :           78A C |  ISOFILELIST :                 B844 C |
 ISOFILELIST_E :               C000 C |  ISO_FILELIST :                6A84 C |
 ISO_OUTPUT :                  EA84 C |  JOYA :                          40 - |
 JOYB :                          10 - |  JOYC :                          20 - |
 JOYDOWN :                        2 - | *JOYID_MD :                       D - |
 JOYID_MOUSE :                    3 - | *JOYID_MS :                       F - |
 JOYLEFT :                        4 - | *JOYMODE :                      800 - |
 JOYRIGHT :                       8 - | *JOYSTART :                      80 - |
 JOYUP :                          1 - | *JOYX :                         400 - |
*JOYY :                         200 - | *JOYZ :                         100 - |
*LCHWIDTH :                      34 - | *LEDSET :                        95 - |
 LEV :                            4 - | *LISTON :                         3 - |
 LIST_VDPREGS :    FFFFFFFFFFFF02EC C |  LSH :                            B - |
 LSL :                            9 - | *MACEXP :                         7 - |
*MAPMARS_SCRN0 :             200000 C | *MAPMARS_TEST :              2011A8 C |
*MAP_SCR0_BG :               200430 C |  MAP_TEST :                  2015D8 C |
 MARS :                           0 - |  MARSBLOCK :                     37 C |
 MARSCD :                         0 - |  MARSDATA_SCREEN00 :          A0800 C |
 MARSDATA_SCREEN00_E :        B2000 C |  MARSDATA_SCREEN01 :          B2000 C |
 MARSDATA_SCREEN01_E :        C3800 C |  MARSUPD :                     1C8A C |
 MARS_RAMCODE :               66800 C | *MARS_RAMCODE_E :             66800 C |
 MARS_RAMCODE_EOF :           66800 C |  MAX_BUFFNTRY :                   8 - |
 MAX_MDDMATSK :                  18 - |  MAX_MDOBJ :                     18 - |
 MAX_MDOTHER :                  E00 - |  MAX_MDSYSTEM :                 600 - |
 MAX_MDVIDEO :                 2000 - |  MAX_RCACH :                     20 - |
 MAX_SCRNBUFF :                1800 - |  MAX_SRAMSIZE :                 400 - |
 MAX_SYSCODE :                 2000 - |  MAX_TBLSIZE :                   18 - |
 MAX_TRFRPZ :                     8 - |  MAX_TRKCHN :                    20 - |
 MAX_TRKINDX :                   1A - |  MAX_USERCODE :                8000 - |
 MAX_ZCMND :                     10 - |  MCD :                            1 - |
 MCDBLOCK :                      36 C | *MCDIN_TOP :                   1A00 C |
 MCDIN_TOP.COPY_1 :            1A0E C |  MCDIN_TOP.LOOP_RAM :          1A20 C |
 MCDUPD :                      1C8B C |  MCD_COMM_M :                     E - |
 MCD_COMM_S :                     F - |  MCD_DBANK0 :                 67800 C |
 MCD_DBANK0_E :               A0800 C |  MCD_DCOMM_M :                   10 - |
 MCD_DCOMM_S :                   20 - |  MCD_HINT :                       6 - |
*MCD_INTMASK :                   32 - |  MCD_MAIN :                    1A00 C |
 MCD_MEMORY :                     3 - |  MCD_SUBDATA :                 C000 C |
 MCD_SUBDATA_E :              66800 C |  MDBANK0 :                   200000 C |
 MDBANK0_E :                 238ECE C |  MDSYS_SINEDATA :  FFFFFFFFFFFF121E C |
*MD_BANK_SRAM :              A130F1 - |  MD_READMODES :    FFFFFFFFFFFF159C C |
 MD_READMODES.END :                                        FFFFFFFFFFFF1600 C |
 MD_READMODES.PICK_MODE :                                  FFFFFFFFFFFF15BC C |
 MD_SCREEN00 :                66800 C |  MD_SCREEN00_E :              67000 C |
 MD_SCREEN01 :                67000 C |  MD_SCREEN01_E :              67800 C |
 MD_SYSCODE :                  39CE C |  MD_SYSCODE_E :                4FCE C |
 MODE :                          18 - | *MODE_FADEIN :     FFFFFFFFFFFF136E C |
 MODE_FADEIN.LOOPW :                                       FFFFFFFFFFFF1396 C |
*MODE_FADEOUT :    FFFFFFFFFFFF13A2 C |
 MODE_FADEOUT.LOOPW :                                      FFFFFFFFFFFF13CA C |
 MODE_INIT :       FFFFFFFFFFFF133C C |  MODE_INIT.CLR :   FFFFFFFFFFFF1366 C |
*MOMCPU :                     68000 - | *MOMCPUNAME :               "68000" - |
*MONOWIDTH :                     38 - |  MOUSE_X :                        8 C |
 MOUSE_Y :                        A C | *MSCPAUSEOFF :                    4 - |
*MSCPAUSEON :                     3 - | *MSCPLAY :                       11 - |
*MSCPLAY1 :                      12 - |  MSCPLAYR :                      13 - |
*MSCPLAYT :                      14 - | *MSCSCANFF :                      5 - |
*MSCSCANFR :                      6 - | *MSCSCANOFF :                     7 - |
*MSCSEEK :                       15 - | *MSCSEEK1 :                      19 - |
*MSCSEEKT :                      16 - |  MSCSTOP :                        2 - |
*NESTMAX :                      100 - |  NIKONA_BUFFLIST :             1595 C |
 NIKONA_BUFFLIST_E :           15B5 C |  OBJDMA_BIBI :               20109C C |
 OBJDMA_DOREMI :             200FAC C |  OBJDMA_EMILY :              200EC6 C |
 OBJDMA_SOPHIE :             201180 C |  OBJECTS_ADD :     FFFFFFFFFFFF0C12 C |
 OBJECTS_ADD.CLR : FFFFFFFFFFFF0C34 C |
 OBJECTS_ADD.SEARCH :                                      FFFFFFFFFFFF0C1E C |
 OBJECTS_ADD.USE_IT :                                      FFFFFFFFFFFF0C2E C |
 OBJECTS_CLEAR :   FFFFFFFFFFFF0B96 C |
 OBJECTS_CLEAR.CLR :                                       FFFFFFFFFFFF0B9E C |
 OBJECTS_CLEAR.CLR_D :                                     FFFFFFFFFFFF0BAC C |
 OBJECTS_RUN :     FFFFFFFFFFFF0BBE C |
 OBJECTS_RUN.NEXT_ONE :                                    FFFFFFFFFFFF0BC6 C |
 OBJECTS_RUN.NO_CODE :                                     FFFFFFFFFFFF0BD2 C |
*OBJECTS_SET :     FFFFFFFFFFFF0BDC C |  OBJECTS_SET.CLR : FFFFFFFFFFFF0BEA C |
 OBJECTS_SHOW :    FFFFFFFFFFFF0C46 C |
 OBJECTS_SHOW.FINISH :                                     FFFFFFFFFFFF0D08 C |
 OBJECTS_SHOW.MK_PZ :                                      FFFFFFFFFFFF0C88 C |
 OBJECTS_SHOW.MK_SPR :                                     FFFFFFFFFFFF0D04 C |
 OBJECTS_SHOW.NEXT :                                       FFFFFFFFFFFF0C5A C |
 OBJECTS_SHOW.RAN_OUT :                                    FFFFFFFFFFFF0D26 C |
 OBJECTS_SHOW.VRAM_H :                                     FFFFFFFFFFFF0CDA C |
 OBJECTS_SHOW.VRAM_V :                                     FFFFFFFFFFFF0CC0 C |
 OBJECT_ANIMATE :  FFFFFFFFFFFF0DCA C |
 OBJECT_ANIMATE.EXIT_ANIM :                                FFFFFFFFFFFF0E58 C |
 OBJECT_ANIMATE.GOTOFRAME :                                FFFFFFFFFFFF0E4A C |
 OBJECT_ANIMATE.KEEPSPD :                                  FFFFFFFFFFFF0E10 C |
 OBJECT_ANIMATE.LASTFRAME :                                FFFFFFFFFFFF0E54 C |
 OBJECT_ANIMATE.NOANIM :                                   FFFFFFFFFFFF0E3C C |
 OBJECT_ANIMATE.RETURN :                                   FFFFFFFFFFFF0E3A C |
 OBJECT_ANIMATE.SAMETHING :                                FFFFFFFFFFFF0DE8 C |
 OBJECT_COLLISION :                                        FFFFFFFFFFFF0E90 C |
 OBJECT_COLLISION.CHECK_THIS :                             FFFFFFFFFFFF0EB8 C |
 OBJECT_COLLISION.EXIT_THIS :                              FFFFFFFFFFFF0EB2 C |
 OBJECT_COLLISION.NEXT :                                   FFFFFFFFFFFF0E9A C |
 OBJECT_COLLISION.NOT_YTOP :                               FFFFFFFFFFFF0F34 C |
 OBJECT_COLLISION.SKIP :                                   FFFFFFFFFFFF0EA8 C |
 OBJECT_DISPLAY :  FFFFFFFFFFFF0D4A C |
 OBJECT_DISPLAY.RAN_OUT :                                  FFFFFFFFFFFF0D68 C |
 OBJECT_DISPLAY.SRCH :                                     FFFFFFFFFFFF0D56 C |
 OBJECT_DISPLAY.THIS_ONE :                                 FFFFFFFFFFFF0D66 C |
 OBJECT_DMA :      FFFFFFFFFFFF0D6E C |
 OBJECT_DMA.NEXT_PZ :                                      FFFFFFFFFFFF0D94 C |
 OBJECT_DMA.NO_DMA :                                       FFFFFFFFFFFF0DC4 C |
 OBJECT_RESETANIM :                                        FFFFFFFFFFFF0E5E C |
 OBJECT_RESETVARS :                                        FFFFFFFFFFFF0D30 C |
 OBJECT_RESETVARS.CLR_RAM :                                FFFFFFFFFFFF0D3E C |
 OBJECT_SPEED :    FFFFFFFFFFFF0E6E C |  OBJMAP_BIBI :               200FBC C |
 OBJMAP_DOREMI :             200F84 C |  OBJMAP_EMILY :              200D06 C |
 OBJMAP_SISI :               201EB8 C |  OBJMAP_SOPHIE :             201110 C |
 OBJPAL_DOREMI :             200F66 C |  OBJPAL_EMILY :              200CF0 C |
 OBJPAL_SISI :               201E98 C |  OBJPAL_SOPHIE :             2010F2 C |
 OBJ_ANIM_ICUR :                 1F C |  OBJ_ANIM_ID :                   1E C |
 OBJ_ANIM_INDX :                 1A C |  OBJ_ANIM_SPD :                  20 C |
 OBJ_CODE :                       0 C |  OBJ_FRAME :                     1C C |
*OBJ_FREE :                      25 C |  OBJ_INDEX :                     21 C |
 OBJ_MAP :                        C C |  OBJ_RAM :                       26 C |
 OBJ_SET :                       22 C |  OBJ_SIZE :                      10 C |
*OBJ_STATUS :                    24 C |  OBJ_SUBID :                     23 C |
 OBJ_VRAM :                      14 C |  OBJ_X :                          4 C |
 OBJ_X_SPD :                     16 C |  OBJ_Y :                          8 C |
 OBJ_Y_SPD :                     18 C |  ONREG :                         11 - |
 ON_HOLD :                        2 C |  ON_PRESS :                       4 C |
*ON_RELEASE :                     6 C | *PACKING :                        0 - |
*PADDING :                        0 - |  PAD_ID :                         0 C |
 PAD_VER :                        1 C | *PALMARS_SCRN0 :             200230 C |
*PALMARS_TEST :              2013D8 C |  PALMODE :                       3E C |
 PAN :                            3 - |  PARP :                          34 - |
*PCM :                            0 - |  PCMCOM :                      15B7 C |
 PCMINS_ASTRAL_01 :           4E382 C |  PCMINS_ASTRAL_02 :           50413 C |
 PCMINS_ASTRAL_03 :           525A1 C |  PCMINS_ASTRAL_04 :           53E77 C |
 PCMINS_ASTRAL_05 :           54489 C |  PCMINS_ASTRAL_06 :           5472F C |
 PCMINS_ASTRAL_07 :           554A6 C |  PCMINS_ASTRAL_08 :           55D89 C |
 PCMINS_ASTRAL_09 :           572BD C |  PCMINS_ASTRAL_10 :           57E30 C |
 PCMINS_ASTRAL_11 :           58A3A C |  PCMINS_ASTRAL_12 :           5A81C C |
 PCMINS_ASTRAL_13 :           5B4FA C |  PCMINS_ASTRAL_14 :           5C28A C |
 PCMINS_ASTRAL_15 :           5EF15 C |  PCMINS_ASTRAL_16 :           5FC27 C |
 PCMINS_ASTRAL_17 :           607C6 C |  PCMINS_ASTRAL_18 :           61375 C |
 PCMINS_ASTRAL_19 :           61625 C |  PCMINS_ASTRAL_20 :           62F43 C |
 PCMINS_ASTRAL_21 :           64648 C |  PCMINS_ASTRAL_22 :           67693 C |
 PCMINS_ASTRAL_23 :           6809F C |  PCMINS_ASTRAL_24 :           683D8 C |
 PCMINS_ASTRAL_25 :           686BC C |  PCMINS_ASTRAL_26 :           68F10 C |
 PCMINS_KICK :                6B61A C |  PCMINS_MOVEME_BRASSL :       6C916 C |
 PCMINS_MOVEME_BRASSR :       73500 C |
 PCMINS_MOVEME_BRASSR_E.HERE :                                        7A0EA C |
 PCMINS_MOVEME_HIT :          6A520 C |  PCMINS_SNARE :               6BF8E C |
 PCMINS_TECHNO_01 :           20000 C |  PCMINS_TECHNO_02 :           2275A C |
 PCMINS_TECHNO_03 :           27722 C |  PCMINS_TECHNO_04 :           28A6E C |
 PCMINS_TECHNO_05 :           29892 C |  PCMINS_TECHNO_06 :           2D4A2 C |
 PCMINS_TECHNO_07 :           3B4E8 C |  PCMINS_TECHNO_08 :           409E6 C |
 PCMINS_TECHNO_09 :           43B06 C |  PCMINS_TECHNO_10 :           46DC6 C |
 PCMINS_TECHNO_11 :           4A222 C | *PEN :                           20 - |
 PICO :                           0 - |  PROC_CHIPS :                   642 C |
 PSGCOM :                      162F C |  PSGFREQ_LIST :                1475 C |
 PSGHATMODE :                  1C81 C | *PSG_CTRL :                  C00011 - |
 PTMR :                          38 - |  PVOL :                          30 - |
 PWMCOM :                      15F7 C | *PWMCTL :                        31 - |
*PWMINTCLR :                     1C - | *PWMIRQ_ON :                      1 - |
 RAM_CDSUB_FSBUFF :           16A84 C |  RAM_CDSUB_PCMBUFF :           6900 C |
 RAM_CDSUB_PCMENBL :           6A80 C |  RAM_CDSUB_PCMMIDSTRM :        6A82 C |
*RAM_CDSUB_PCMPLAY :           6A81 C |  RAM_CDSUB_PCMTABLE :          6A40 C |
*RAM_CDSUB_PCMTBLUPD :         6A83 C |
 RAM_FADEMARSDELAY :                                       FFFFFFFFFFFFB8F0 C |
 RAM_FADEMARSINCR :                                        FFFFFFFFFFFFB8EE C |
 RAM_FADEMARSREQ : FFFFFFFFFFFFB8EC C | *RAM_FADEMARSTMR : FFFFFFFFFFFFB8F2 C |
 RAM_FADEMDDELAY : FFFFFFFFFFFFB8E8 C |  RAM_FADEMDINCR :  FFFFFFFFFFFFB8E6 C |
 RAM_FADEMDREQ :   FFFFFFFFFFFFB8E4 C |  RAM_FADEMDTMR :   FFFFFFFFFFFFB8EA C |
 RAM_FRAMECOUNT :  FFFFFFFFFFFFB8D4 C | *RAM_GLBL_FILLER : FFFFFFFFFFFFEC04 C |
 RAM_HORSCROLL :   FFFFFFFFFFFFA004 C |  RAM_INPUTDATA :   FFFFFFFFFFFFC004 C |
*RAM_MDDREQ :      FFFFFFFFFFFFC604 C |  RAM_MDGLOBAL :    FFFFFFFFFFFFEC04 C |
 RAM_MDMARSHINT :  FFFFFFFFFFFFC452 C | *RAM_MDMARSPALFD : FFFFFFFFFFFFA994 C |
 RAM_MDMARSVINT :  FFFFFFFFFFFFC44C C |
*RAM_MDMARS_DRAWALL :                                      FFFFFFFFFFFFB8F4 C |
 RAM_MDOTHER :     FFFFFFFFFFFFC604 C |  RAM_MDSYSTEM :    FFFFFFFFFFFFC004 C |
 RAM_MDVIDEO :     FFFFFFFFFFFFA004 C |  RAM_MEGACD :              FFFFFD00 - |
 RAM_OBJDISPLIST : FFFFFFFFFFFFB724 C |  RAM_OBJECTS :     FFFFFFFFFFFFAD94 C |
 RAM_PALETTE :     FFFFFFFFFFFFA914 C |  RAM_PALETTEFD :   FFFFFFFFFFFFAB94 C |
*RAM_SAVEDATA :    FFFFFFFFFFFFC044 C |  RAM_SCREENMODE :  FFFFFFFFFFFFC458 C |
 RAM_SCRNBUFF :    FFFFFFFFFFFFD404 C |  RAM_SPRDRWCNTR :  FFFFFFFFFFFFB8D8 C |
 RAM_SPRITES :     FFFFFFFFFFFFA414 C |  RAM_SPRLINKNUM :  FFFFFFFFFFFFB8DA C |
*RAM_STACK :               FFFFFD00 - |  RAM_SYSRANDSEED : FFFFFFFFFFFFC448 C |
 RAM_SYSRANDVAL :  FFFFFFFFFFFFC444 C |  RAM_SYSTEMCODE :  FFFFFFFFFFFF0000 C |
 RAM_USERCODE :    FFFFFFFFFFFF2000 C |  RAM_VDPDMAINDX :  FFFFFFFFFFFFB8DE C |
 RAM_VDPDMALIST :  FFFFFFFFFFFFAC14 C |  RAM_VDPDMAMOD :   FFFFFFFFFFFFB8E0 C |
*RAM_VDPEXWRITE :  FFFFFFFFFFFFB8DC C |  RAM_VDPREGS :     FFFFFFFFFFFFB8F6 C |
 RAM_VERSCROLL :   FFFFFFFFFFFFA3C4 C |  RAM_VIDPRNTLIST : FFFFFFFFFFFFB754 C |
 RAM_VIDPRNTVRAM : FFFFFFFFFFFFB8E2 C |  RAM_ZCDFLAG_D :           FFFFFF00 - |
 RAM_ZSNDBUFF :            FFFFFF00 - | *RCHWIDTH :                      36 - |
*RELAXED :                        0 - | *ROMPAUSEOFF :                    9 - |
*ROMPAUSEON :                     8 - | *ROMREAD :                       17 - |
*ROMREADE :                      21 - |  ROMREADN :                      20 - |
*ROMSEEK :                       18 - |  ROM_END :                    C3800 C |
 RRT :                           14 - |  SAMPLEHEAD :                  1CAF C |
 SBEATACC :                    1C9B C |  SBEATPTCK :                   1C9D C |
*SCDINIT :                       8E - | *SCDPQ :                         93 - |
*SCDPQL :                        94 - | *SCDREAD :                       92 - |
*SCDSTART :                      8F - | *SCDSTAT :                       91 - |
*SCDSTOP :                       90 - | *SCPU_BRAM :               FFFE8000 - |
 SCPU_PCM :                FFFF0000 - |  SCPU_REG :                FFFF8000 - |
 SCPU_WRAM :                  80000 - |  SETVRAM_BIBI :                 4A0 - |
 SETVRAM_DOREMI :               458 - |  SETVRAM_EMILY :                440 - |
*SETVRAM_MIKAMI :               440 - |  SETVRAM_NICOLE :               488 - |
 SETVRAM_SISI :                 480 - |  SETVRAM_SOPHIE :               470 - |
 SET_CHIPS :                    624 C |  SET_CHIPS.TRK_BUFFRS :         62C C |
*SHIFT :                          2 - |  SHRD_BLK :                  21D624 C |
 SHRD_PAT :                  21D64E C |  SIZEOF_CDPCM :                  28 C |
 SIZEOF_INPUT :                  10 C |  SIZEOF_MDGLBL :   FFFFFFFFFFFFEC08 C |
 SIZEOF_MDOBJ :                  66 C |  SIZEOF_MDRAM :    FFFFFFFFFFFFD80C C |
*SIZEOF_MDSYS :    FFFFFFFFFFFFC45A C |  SIZEOF_MDVID :    FFFFFFFFFFFFB90E C |
*SIZEOF_RAMOTHER : FFFFFFFFFFFFD404 C | *SIZEOF_SUBCPU :              16B04 C |
 SLV :                           10 - |  SNDLOCKZ80 :      FFFFFFFFFFFF00D0 C |
 SNDLOCKZ80.WAIT : FFFFFFFFFFFF00D8 C |  SNDREQ_ENTER :    FFFFFFFFFFFF00EE C |
 SNDREQ_ENTER.WAIT :                                       FFFFFFFFFFFF010E C |
 SNDREQ_EXIT :     FFFFFFFFFFFF011E C | *SNDREQ_SADDR :    FFFFFFFFFFFF0146 C |
 SNDREQ_SBYTE :    FFFFFFFFFFFF014E C |  SNDREQ_SCMD :     FFFFFFFFFFFF0134 C |
 SNDREQ_SLONG :    FFFFFFFFFFFF0142 C |  SNDREQ_SWORD :    FFFFFFFFFFFF014A C |
 SNDUNLOCKZ80 :    FFFFFFFFFFFF00E4 C |  SOUND_INIT :      FFFFFFFFFFFF0000 C |
 SOUND_INIT.CLEANUP :                                      FFFFFFFFFFFF002A C |
 SOUND_INIT.COPY : FFFFFFFFFFFF0040 C |
 SOUND_INIT.NOT_PAL :                                      FFFFFFFFFFFF0066 C |
 SOUND_INIT.WAIT : FFFFFFFFFFFF0014 C |  SOUND_UPDATE :    FFFFFFFFFFFF0084 C |
 SOUND_UPDATE.COPY_BYTES :                                 FFFFFFFFFFFF00BE C |
 SOUND_UPDATE.NO_SIZE :                                    FFFFFFFFFFFF00CC C |
 SOUND_UPDATE.NO_TASK :                                    FFFFFFFFFFFF00CE C |
 SPINITFS :                    6360 C |  SPREADSECTORSN :              62E8 C |
 SPREADSECTORSN.WAITTRANSFER : 6334 C |  SPREADSECTORSN.WAIT_READ :    6326 C |
 SPREADSECTORSN.WAIT_STAT :    631C C |  SPSEARCHFILE :                639A C |
 SPSEARCHFILE.CHK_STR :        63C2 C |  SPSEARCHFILE.FAILED_SRCH :    63E2 C |
 SPSEARCHFILE.FOUND_FILE :     63D2 C |  SPSEARCHFILE.NEXT_FILE :      63A4 C |
 SPSEARCHFILE.NON_FILE :       63CE C |  SP_CMDLIST :                  6142 C |
 SP_CMND00 :                   61A2 C |  SP_CMND01 :                   61A4 C |
 SP_CMND01.EXIT_NOW :          620E C |  SP_CMND01.NEXT_PACKET :       61C8 C |
 SP_CMND01.WAIT_MAIN :         61E6 C |  SP_CMND01.WAIT_MAIN_O :       6202 C |
 SP_CMND01.WAIT_RET :          621A C |  SP_CMND02 :                   6226 C |
 SP_CMND02.WAIT_RET :          624C C |  SP_CMND08 :                   6258 C |
 SP_CMND08.EXIT_NOW :          62CE C |  SP_CMND08.NEXT_PACKET :       6288 C |
 SP_CMND08.WAIT_MAIN :         62B6 C |  SP_CMND08.WAIT_START :        6272 C |
 SP_CMND10 :                   62D0 C |  SP_CMND20 :                   62E6 C |
 SP_END :                      1100 C |  SP_INIT :                     602A C |
 SP_IRQ :                      6066 C |  SP_IRQ.EXIT_NOW :             60DE C |
 SP_IRQ.NEXT_PACKET :          6096 C |  SP_IRQ.NOT_NOW :              60E6 C |
 SP_IRQ.WAIT_MAIN :            60CC C |  SP_IRQ.WAIT_START :           607A C |
 SP_MAIN :                     60E8 C |  SP_RAM :                      6900 C |
 SP_START :                     800 C | *SP_TIMER :                    6062 C |
 SP_USER :                     6064 C |  ST :                             D - |
*STANDBY :                        3 - |  SUBCPU_DATA :                20000 C |
*SYSMARS_ID :                A130EC - | *SYSMARS_REG :               A15100 - |
 SYSMCD_REG :                A12000 - |  SYSMCD_WRAM :               200000 - |
 SYSTEM_DMAENTER_RAM :                                     FFFFFFFFFFFF0FFA C |
 SYSTEM_DMAENTER_ROM :                                     FFFFFFFFFFFF1002 C |
 SYSTEM_DMAEXIT_RAM :                                      FFFFFFFFFFFF0FFE C |
 SYSTEM_DMAEXIT_ROM :                                      FFFFFFFFFFFF1006 C |
 SYSTEM_GRABRAMCODE :                                      FFFFFFFFFFFF1580 C |
 SYSTEM_INIT :     FFFFFFFFFFFF0F36 C |
 SYSTEM_INIT.CLRINPUT :                                    FFFFFFFFFFFF0F8E C |
 SYSTEM_INIT.WAIT :                                        FFFFFFFFFFFF0F42 C |
 SYSTEM_INPUT :    FFFFFFFFFFFF100A C |
 SYSTEM_INPUT.EXIT :                                       FFFFFFFFFFFF1038 C |
 SYSTEM_INPUT.ID_03 :                                      FFFFFFFFFFFF105E C |
 SYSTEM_INPUT.ID_0D :                                      FFFFFFFFFFFF1108 C |
 SYSTEM_INPUT.INVALID :                                    FFFFFFFFFFFF1102 C |
 SYSTEM_INPUT.LIST :                                       FFFFFFFFFFFF103E C |
 SYSTEM_INPUT.OLDPAD :                                     FFFFFFFFFFFF1180 C |
 SYSTEM_INPUT.PICK_ID :                                    FFFFFFFFFFFF1186 C |
 SYSTEM_INPUT.READ :                                       FFFFFFFFFFFF119C C |
 SYSTEM_INPUT.STEP_1 :                                     FFFFFFFFFFFF11A8 C |
 SYSTEM_INPUT.STEP_2 :                                     FFFFFFFFFFFF11B4 C |
 SYSTEM_INPUT.THIS_ONE :                                   FFFFFFFFFFFF101E C |
 SYSTEM_INPUT.X_NEG :                                      FFFFFFFFFFFF10D0 C |
 SYSTEM_INPUT.Y_NEG :                                      FFFFFFFFFFFF10FC C |
*SYSTEM_MCDSENDBUFF :                                      FFFFFFFFFFFF14EA C |
 SYSTEM_MCDSENDBUFF.COPY_RAM :                             FFFFFFFFFFFF1524 C |
 SYSTEM_MCDSENDBUFF.WAIT_PRE :                             FFFFFFFFFFFF1510 C |
 SYSTEM_MCDSENDBUFF.WAIT_SUB :                             FFFFFFFFFFFF1552 C |
 SYSTEM_MCDSUBTASK :                                       FFFFFFFFFFFF13FC C |
 SYSTEM_MCDSUBTASK.WAIT_ELSE :                             FFFFFFFFFFFF13FE C |
 SYSTEM_MCDSUBTASK.WAIT_SUB_I :                            FFFFFFFFFFFF140C C |
 SYSTEM_MCDSUBWAIT :                                       FFFFFFFFFFFF13EE C |
 SYSTEM_MCDSUBWAIT.WAIT_SUB_O :                            FFFFFFFFFFFF13F4 C |
 SYSTEM_MCDTRNSFR_RAM :                                    FFFFFFFFFFFF144A C |
 SYSTEM_MCDTRNSFR_RAM.COPY_RAM :                           FFFFFFFFFFFF1486 C |
 SYSTEM_MCDTRNSFR_RAM.WAIT_SUB :                           FFFFFFFFFFFF14B4 C |
 SYSTEM_MCDTRNSFR_WRAM :                                   FFFFFFFFFFFF1418 C |
 SYSTEM_MCDTRNSFR_WRAM.SET_PERM :                          FFFFFFFFFFFF1432 C |
*SYSTEM_RANDOM :   FFFFFFFFFFFF11B6 C |
 SYSTEM_RANDOM.GOOD_S :                                    FFFFFFFFFFFF11C4 C |
 SYSTEM_RENDER :   FFFFFFFFFFFF0FB4 C |
 SYSTEM_RENDER.FORGOT_DISP :                               FFFFFFFFFFFF0FF8 C |
 SYSTEM_RENDER.WAIT_IN :                                   FFFFFFFFFFFF0FD6 C |
 SYSTEM_RENDER.WAIT_LAG :                                  FFFFFFFFFFFF0FBE C |
 SYSTEM_SETINTS :  FFFFFFFFFFFF131E C |
 SYSTEM_SETINTS.NOHINT :                                   FFFFFFFFFFFF132E C |
 SYSTEM_SETINTS.NOVINT :                                   FFFFFFFFFFFF1326 C |
*SYSTEM_SINEWAVE : FFFFFFFFFFFF1200 C |
 SYSTEM_SINEWAVE.DONT_NEG :                                FFFFFFFFFFFF121C C |
*SYSTEM_SINEWAVE_COS :                                     FFFFFFFFFFFF11E0 C |
 SYSTEM_SINEWAVE_COS.DONT_NEG :                            FFFFFFFFFFFF11FA C |
 SYSTEM_SRAMINIT : FFFFFFFFFFFF1330 C | *SYSTEM_SRAMLOAD : FFFFFFFFFFFF1338 C |
*SYSTEM_SRAMSAVE : FFFFFFFFFFFF1334 C |  SYS_CTRL_1 :                A10009 - |
 SYS_CTRL_2 :                A1000B - |  SYS_CTRL_3 :                A1000D - |
 SYS_DATA_1 :                A10003 - | *SYS_DATA_2 :                A10005 - |
*SYS_DATA_3 :                A10007 - | *SYS_EXRAM :                 200000 - |
 SYS_IO :                    A10001 - | *SYS_TMSS :                  A14000 - |
*TAG_SRAMDATA :              "SAVE" - |  TBLBUFF_READ :                 66B C |
 TBLBUFF_READ.CHK_PSG :         77B C |  TBLBUFF_READ.CLRFULL :         83D C |
 TBLBUFF_READ.DO_CHIP :         6D5 C |  TBLBUFF_READ.FIRST_INS :       6EB C |
 TBLBUFF_READ.GRAB_LINK :       72D C |  TBLBUFF_READ.HAS_INDX :        6B1 C |
 TBLBUFF_READ.INVLDL :          764 C |  TBLBUFF_READ.KEEP_IT :         70F C |
 TBLBUFF_READ.L_HIPRIO :        7EF C |  TBLBUFF_READ.NEW_CHIP :        7A2 C |
 TBLBUFF_READ.NEW_LINK :        7EC C |  TBLBUFF_READ.NEW_LINK_O :      7E4 C |
 TBLBUFF_READ.NEW_LINK_Z :      7E0 C |  TBLBUFF_READ.NEXTSRCH_TBL :    7D9 C |
 TBLBUFF_READ.NEXT_INDX :       6A2 C |  TBLBUFF_READ.NEXT_PRIO :       7C2 C |
 TBLBUFF_READ.NO_INDX :         6CD C |  TBLBUFF_READ.PASS_2 :          7C1 C |
 TBLBUFF_READ.PICK_TBL :        812 C |  TBLBUFF_READ.REFILL :          79F C |
 TBLBUFF_READ.REROLL :          76C C |  TBLBUFF_READ.RESET_LINK :      82C C |
 TBLBUFF_READ.RNOT_PSG :        79D C |  TBLBUFF_READ.SET_ASFULL :      80F C |
 TBLBUFF_READ.SINGL_FREE :      7FD C |  TBLBUFF_READ.SINGL_LINK :      792 C |
 TBLBUFF_READ.SRCH_FREE :       7B1 C |  TBLBUFF_READ.SRCH_LINK :       74B C |
 TBLBUFF_READ.SRCH_LLOOP :      755 C |  TBLBUFF_READ.TRACK_CONT :      68B C |
 TBLBUFF_READ.VALID :           6A0 C |  TBLFM :                       1A72 C |
 TBLFM3 :                      1AD2 C |  TBLFM6 :                      1AEA C |
 TBLLIST :                     1A00 C |  TBLPCM :                      1B04 C |
 TBLPSG :                      1A10 C |  TBLPSGN :                     1A5A C |
 TBLPWM :                      1BC6 C | *TESTENTRY :                     1E - |
*TESTENTRYLOOP :                 1F - |  TH :                      20000000 - |
 TICKCNT :                     1C80 C |  TICKFLAG :                    1C7F C |
 TICKSPSET :                   1C7E C |  TIME :               "09:22:39 AM" - |
*TIMERCTL :                      30 - | *TMR :                           2C - |
 TRACK_OUT :                    5DF C |  TRACK_OUT.INDX_DEL :           5ED C |
 TRACK_OUT.NOTHIN :             61B C |  TRANSFERROM :                 10F9 C |
 TRANSFERROM.DOUBLE :          111C C |  TRANSFERROM.FROM_RAM :        1140 C |
 TRANSFERROM.TRANSFER :        115E C |  TRANSFERROM.WAIT :            1157 C |
 TRANSFERROM.X68KLAST :        1197 C |  TRANSFERROM.X68KLOOP :        1183 C |
 TRANSFERROM.X68KLPWT :        11A5 C |  TRANSFERROM.X68KNOCARRY :     113A C |
 TRANSFERROM.X68KPWTLP :       11A7 C |  TRKBLKS_0 :                   17DB C |
 TRKBLKS_1 :                   17E3 C |  TRKBLKS_2 :                   17EB C |
 TRKBLKS_3 :                   17F3 C |  TRKBUFF_0 :                   17FB C |
 TRKBUFF_1 :                   183B C |  TRKBUFF_2 :                   187B C |
 TRKBUFF_3 :                   18BB C |  TRKCACH_0 :                   1F00 C |
 TRKCACH_1 :                   1F20 C |  TRKCACH_2 :                   1F40 C |
 TRKCACH_3 :                   1F60 C |  TRKCHNLS :                    1E00 C |
 TRKHDRS_0 :                   175B C |  TRKHDRS_1 :                   177B C |
 TRKHDRS_2 :                   179B C |  TRKHDRS_3 :                   17BB C |
 TRKINFOCACH :                 1CAF C |  TRK_BANKBLK :                   17 - |
 TRK_BANKHEADS :                 16 - |  TRK_BANKINS :                   15 - |
 TRK_BLOCKS :                     4 - |  TRK_CACH :                       8 - |
 TRK_CACHHALF :                  10 - |  TRK_CHNINDX :                   26 - |
 TRK_CURRBLK :                   13 - |  TRK_MAXCHNL :                   18 - |
 TRK_PATT :                       6 - |  TRK_PRIORITY :                  14 - |
 TRK_READ :                       A - |  TRK_ROMBLKS :                   23 - |
 TRK_ROMINST :                   20 - |  TRK_ROMPATT :                   1D - |
 TRK_ROMPATTREAD :               1A - |  TRK_ROWPAUSE :                  11 - |
 TRK_ROWS :                       C - |  TRK_SEQID :                      1 - |
 TRK_SETBLK :                     2 - |  TRK_STATUS :                     0 - |
 TRK_TICKSET :                    3 - |  TRK_TICKTMR :                   12 - |
 TRK_VOLFDTARGET :               19 - |  TRK_VOLMASTER :                  E - |
*TRUE :                           1 - | *TVMODE :                         0 - |
 UPD_TRACK :                    23A C |  UPD_TRACK.CHNL_FREE :          354 C |
 UPD_TRACK.CONT_CHNL :          35F C |  UPD_TRACK.DECROW :             303 C |
 UPD_TRACK.DECROW_E :           306 C |  UPD_TRACK.EFFECT_FILL :        52F C |
 UPD_TRACK.EFF_A :              3D9 C |  UPD_TRACK.EFF_B :              3EA C |
 UPD_TRACK.EFF_C :              408 C |  UPD_TRACK.EXIT :               2F7 C |
 UPD_TRACK.FADE_OUT :           284 C |  UPD_TRACK.FIRST_BLK :          45F C |
 UPD_TRACK.FIRST_FILL :         536 C |  UPD_TRACK.FIRST_HEAD :         4A7 C |
 UPD_TRACK.GRAB_RHEAD :         5CC C |  UPD_TRACK.HAS_NOTE :           30E C |
 UPD_TRACK.INC_CPATT :          40B C |  UPD_TRACK.KEEP_BLK :           47D C |
 UPD_TRACK.KEEP_IT :            4CD C |  UPD_TRACK.KEEP_VOL :           29A C |
 UPD_TRACK.NEXT_CHNL :          339 C |  UPD_TRACK.NEXT_NOTE :          2E7 C |
 UPD_TRACK.NO_EFF :             3A5 C |  UPD_TRACK.NO_GLBL :            576 C |
 UPD_TRACK.NO_INS :             387 C |  UPD_TRACK.NO_NOTE :            37C C |
 UPD_TRACK.NO_VOL :             392 C |  UPD_TRACK.OLD_TYPE :           370 C |
 UPD_TRACK.RAN_OUT :            419 C |  UPD_TRACK.READ_TRACK :         257 C |
 UPD_TRACK.ROW_ACTIVE :         2E0 C |  UPD_TRACK.SET_TRACK :          443 C |
 UPD_TRACK.SFXMD :              2A4 C |  UPD_TRACK.SRCH_NEW :           334 C |
 UPD_TRACK.TOO_MUCH :           290 C |  UPD_TRACK.TRACK_END :          51C C |
 UPD_TRACK.TRK_BUFFRS :         242 C | *VARDEFAUTODMA :                4B0 - |
 VARNULLVRAM :                  7FF - |  VARPRINTPAL :                    3 - |
 VARPRINTVRAM :                 580 - | *VBLK :                          80 - |
*VDPSTS :                         A - |  VDP_CTRL :                  C00004 - |
 VDP_DATA :                  C00000 - | *VERSION :                     142F - |
 VIDEO_CLEAR :     FFFFFFFFFFFF0322 C |
*VIDEO_CLEARSCREEN :                                       FFFFFFFFFFFF0322 C |
 VIDEO_CLEARSCREEN.PNEXT :                                 FFFFFFFFFFFF0394 C |
 VIDEO_CLEARSCREEN.SNEXT :                                 FFFFFFFFFFFF0382 C |
 VIDEO_CLEARSCREEN.XNEXT :                                 FFFFFFFFFFFF0366 C |
 VIDEO_CLEARSCREEN.YNEXT :                                 FFFFFFFFFFFF0374 C |
*VIDEO_COPY :      FFFFFFFFFFFF07BA C |  VIDEO_COPY.DMAW : FFFFFFFFFFFF07D2 C |
 VIDEO_COPY.DMA_W :                                        FFFFFFFFFFFF082A C |
*VIDEO_DMABLAST :  FFFFFFFFFFFF08DA C |
 VIDEO_DMABLAST.END :                                      FFFFFFFFFFFF092A C |
 VIDEO_DMABLAST.EXIT :                                     FFFFFFFFFFFF0938 C |
 VIDEO_DMABLAST.NEXT :                                     FFFFFFFFFFFF0902 C |
 VIDEO_DMAMKENTRY :                                        FFFFFFFFFFFF067A C |
 VIDEO_DMAMKENTRY.MK_SET :                                 FFFFFFFFFFFF06B6 C |
 VIDEO_DMAMKENTRY.NORMAL :                                 FFFFFFFFFFFF06B0 C |
*VIDEO_DMAMKENTRY.NO_WPATCH :                              FFFFFFFFFFFF0734 C |
 VIDEO_DMAMKENTRY.RAN_OUT :                                FFFFFFFFFFFF073A C |
 VIDEO_DOPALFADE : FFFFFFFFFFFF0430 C |
 VIDEO_DOPALFADE.ACTIVE :                                  FFFFFFFFFFFF044C C |
 VIDEO_DOPALFADE.FADE_DONE :                               FFFFFFFFFFFF0454 C |
 VIDEO_DOPALFADE.FADE_IN :                                 FFFFFFFFFFFF0456 C |
 VIDEO_DOPALFADE.FADE_LIST :                               FFFFFFFFFFFF044E C |
 VIDEO_DOPALFADE.FADE_OUT :                                FFFFFFFFFFFF04F8 C |
 VIDEO_DOPALFADE.NO_BLU :                                  FFFFFFFFFFFF04D0 C |
 VIDEO_DOPALFADE.NO_BLU_O :                                FFFFFFFFFFFF0552 C |
 VIDEO_DOPALFADE.NO_FNSH :                                 FFFFFFFFFFFF04E8 C |
 VIDEO_DOPALFADE.NO_FNSH_O :                               FFFFFFFFFFFF0566 C |
 VIDEO_DOPALFADE.NO_GRN :                                  FFFFFFFFFFFF04B0 C |
 VIDEO_DOPALFADE.NO_GRN_O :                                FFFFFFFFFFFF053A C |
 VIDEO_DOPALFADE.NO_MOVE :                                 FFFFFFFFFFFF04F6 C |
 VIDEO_DOPALFADE.NO_MOVE_O :                               FFFFFFFFFFFF0574 C |
 VIDEO_DOPALFADE.NO_RED :                                  FFFFFFFFFFFF0490 C |
 VIDEO_DOPALFADE.NO_RED_O :                                FFFFFFFFFFFF0522 C |
 VIDEO_DOPALFADE.NXT_PAL :                                 FFFFFFFFFFFF046E C |
 VIDEO_DOPALFADE.NXT_PAL_O :                               FFFFFFFFFFFF050A C |
 VIDEO_FADEIN :    FFFFFFFFFFFF039E C |  VIDEO_FADEOUT :   FFFFFFFFFFFF03C4 C |
 VIDEO_FADEPAL :   FFFFFFFFFFFF0402 C |
*VIDEO_FADEPAL_MARS :                                      FFFFFFFFFFFF093E C |
 VIDEO_FILL :      FFFFFFFFFFFF073C C |  VIDEO_FILL.DMAW : FFFFFFFFFFFF0754 C |
 VIDEO_FILL.DMA_W :                                        FFFFFFFFFFFF079E C |
 VIDEO_INIT :      FFFFFFFFFFFF02A2 C |
 VIDEO_INIT.CLRRAM :                                       FFFFFFFFFFFF02AE C |
 VIDEO_INIT.LOOP : FFFFFFFFFFFF02C6 C |  VIDEO_LOADART :   FFFFFFFFFFFF0576 C |
*VIDEO_LOADART.FROM_RAM :                                  FFFFFFFFFFFF0630 C |
 VIDEO_LOADART.MK_SET :                                    FFFFFFFFFFFF05B2 C |
 VIDEO_LOADART.NON_WRAM :                                  FFFFFFFFFFFF05E2 C |
 VIDEO_LOADART.NON_WRAM_L :                                FFFFFFFFFFFF062E C |
 VIDEO_LOADART.NORMAL :                                    FFFFFFFFFFFF05AC C |
 VIDEO_LOADART.SHARED_SETUP :                              FFFFFFFFFFFF0632 C |
 VIDEO_LOADMAP :   FFFFFFFFFFFF0942 C |
 VIDEO_LOADMAP.CONT :                                      FFFFFFFFFFFF0968 C |
 VIDEO_LOADMAP.NODBLE :                                    FFFFFFFFFFFF0986 C |
 VIDEO_LOADMAP.NONULL :                                    FFFFFFFFFFFF0966 C |
 VIDEO_LOADMAP.XLOOP :                                     FFFFFFFFFFFF0958 C |
 VIDEO_LOADMAP.YLOOP :                                     FFFFFFFFFFFF094E C |
 VIDEO_LOADPAL :   FFFFFFFFFFFF040C C |
*VIDEO_MDMARSGFXMODE :                                     FFFFFFFFFFFF093C C |
*VIDEO_MDMARSPALFADE :                                     FFFFFFFFFFFF0940 C |
*VIDEO_MDMARS_SYNCFRAME :                                  FFFFFFFFFFFF093A C |
 VIDEO_PRINT :     FFFFFFFFFFFF09C2 C |
 VIDEO_PRINT.DONIBL :                                      FFFFFFFFFFFF0ADE C |
 VIDEO_PRINT.EXIT :                                        FFFFFFFFFFFF0A4E C |
 VIDEO_PRINT.ISBYTE :                                      FFFFFFFFFFFF0A18 C |
 VIDEO_PRINT.ISLONG :                                      FFFFFFFFFFFF0A3C C |
 VIDEO_PRINT.ISWORD :                                      FFFFFFFFFFFF0A2A C |
 VIDEO_PRINT.LNGLOOP :                                     FFFFFFFFFFFF0ACE C |
 VIDEO_PRINT.LOOP :                                        FFFFFFFFFFFF09DA C |
 VIDEO_PRINT.LOWR :                                        FFFFFFFFFFFF0AEE C |
 VIDEO_PRINT.NEWJUMP :                                     FFFFFFFFFFFF09D4 C |
 VIDEO_PRINT.NEXT :                                        FFFFFFFFFFFF0A14 C |
 VIDEO_PRINT.NEXTV :                                       FFFFFFFFFFFF0A58 C |
 VIDEO_PRINT.NOTHING :                                     FFFFFFFFFFFF0AFA C |
 VIDEO_PRINT.PUTTEXT :                                     FFFFFFFFFFFF0A06 C |
 VIDEO_PRINT.VBYTE :                                       FFFFFFFFFFFF0A8A C |
 VIDEO_PRINT.VLONG :                                       FFFFFFFFFFFF0AD6 C |
 VIDEO_PRINT.VWORD :                                       FFFFFFFFFFFF0AAC C |
 VIDEO_PRINTINIT : FFFFFFFFFFFF0998 C | *VIDEO_PRINTPAL :  FFFFFFFFFFFF09B2 C |
 VIDEO_RENDER :    FFFFFFFFFFFF0846 C |  VIDEO_RUNFADE :   FFFFFFFFFFFF03FA C |
 VIDEO_UPDATE :    FFFFFFFFFFFF02CE C |
*VIDEO_UPDATE.EXIT :                                       FFFFFFFFFFFF02EA C |
 VIDEO_UPDATE.LOOP :                                       FFFFFFFFFFFF02DE C |
 VIDEO_WAITFADE :  FFFFFFFFFFFF03EA C |  VIDMD_PAL :       FFFFFFFFFFFF0410 C |
 VIDMD_PAL.LOOP :  FFFFFFFFFFFF0428 C |  VID_PICKLAYER :   FFFFFFFFFFFF0B00 C |
 VID_PICKLAYER.GOLYR :                                     FFFFFFFFFFFF0B4A C |
 VID_PICKLAYER.NOWD :                                      FFFFFFFFFFFF0B34 C |
 VID_PICKLAYER.PLAWND :                                    FFFFFFFFFFFF0B26 C |
 VID_PICKLAYER.THISSZ :                                    FFFFFFFFFFFF0B6A C |
 VID_PICKLAYER.THISSZJ :                                   FFFFFFFFFFFF0B92 C |
*VINTCLR :                       16 - | *VINTENBL :                      20 - |
 VINT_DEFAULT :    FFFFFFFFFFFF13D6 C | *VIRQ_ON :                        8 - |
*VRESINTCLR :                    14 - |  WAVE_FLAGS :                  1C97 C |
 WAVE_LEN :                    1C8F C |  WAVE_LOOP :                   1C92 C |
 WAVE_PITCH :                  1C95 C |  WAVE_START :                  1C8C C |
 WAVFREQ_CDPCM :               1535 C |  WAVFREQ_LIST :                14D5 C |
*WONDERCHK :                     98 - | *WONDERREQ :                     97 - |
 X68KSRCLSB :                  1C99 C |  X68KSRCMID :                  1C9A C |
*YM_CTRL_1 :                 A04000 - | *YM_CTRL_2 :                 A04002 - |
*YM_DATA_1 :                 A04001 - | *YM_DATA_2 :                 A04003 - |
*Z80SYNTAX :                      0 - |  Z80_BUS :                   A11100 - |
 Z80_CODE :        FFFFFFFFFFFF204C C |  Z80_CODE_END :    FFFFFFFFFFFF3FCE C |
 Z80_CPU :                   A00000 - |  Z80_INIT :                      50 C |
 Z80_RESET :                 A11200 - | *ZBANK :                       6000 - |
 ZDRVFIFO :                      40 - |  ZDRVFWRT :                      2E - |
*ZDRVMARSBLK :                   37 - | *ZDRVMCDBLK :                    36 - |
 ZDRVRAMLEN :                    30 - |  ZDRVRAMSRC :                    35 - |
 ZDRVROMBLK :                    2F - |  ZMARS_SEND :                   FD1 C |
 ZMARS_SEND.CLR_PCM :          1049 C |  ZMARS_SEND.COPY_BYTES :       1021 C |
 ZMARS_SEND.MCDT_BLOCKED :     1043 C |  ZMARS_SEND.MCDT_NOUPD :       104D C |
 ZMARS_SEND.MCD_NEXTP :        1018 C |  ZMARS_SEND.SET_COMBANK :      1055 C |
 ZMARS_SEND.TEST_SUB :         1006 C |  ZMARS_SEND.WAIT_IN :           FF2 C |
 ZMARS_SEND.WAIT_SUB :         1030 C | *ZOPCEX :                         8 - |
 ZOPCEXX :                       D9 - | *ZOPCNOP :                        0 - |
 ZOPCPUSHAF :                    F5 - |  ZOPCRET :                       C9 - |
 ZPSG_CTRL :                   7F11 - |  ZSET_TESTME :                    0 - |
 ZYM_CTRL_1 :                  4000 - |  ZYM_CTRL_2 :                  4002 - |
 ZYM_DATA_1 :                  4001 - |  ZYM_DATA_2 :                  4003 - |
*_ADRERR :                     5F40 - | *_BOOTSTAT :                   5EA0 - |
*_BURAM :                      5F16 - | *_CCR :                    FFFFFE92 - |
 _CDBIOS :                     5F22 - | *_CDBOOT :                     5F1C - |
*_CDSTAT :                     5E80 - | *_CHKERR :                     5F52 - |
*_CODERR :                     5F46 - | *_DEVERR :                     5F4C - |
*_DMACHANNEL0 :            FFFFFF8C - | *_DMACHANNEL1 :            FFFFFF9C - |
*_DMACOUNT0 :              FFFFFF88 - | *_DMACOUNT1 :              FFFFFF98 - |
*_DMADEST0 :               FFFFFF84 - | *_DMADEST1 :               FFFFFF94 - |
*_DMAOPERATION :           FFFFFFB0 - | *_DMAREQACK0 :             FFFFFFB4 - |
*_DMAREQACK1 :             FFFFFFB8 - | *_DMASOURCE0 :             FFFFFF80 - |
*_DMASOURCE1 :             FFFFFF90 - | *_DMAVECTORE0 :            FFFFFFA4 - |
*_DMAVECTORE1 :            FFFFFFAC - | *_DMAVECTORN0 :            FFFFFFA0 - |
*_DMAVECTORN1 :            FFFFFFA8 - | *_FRAMEBUFFER :            24000000 - |
*_FRC_H :                         2 - | *_FRC_L :                         3 - |
*_FRT :                    FFFFFE10 - | *_HRH :                    FFFFFF10 - |
*_HRL :                    FFFFFF14 - | *_HRL32 :                  FFFFFF04 - |
*_JR :                     FFFFFF00 - | *_LEVEL1 :                     5F76 - |
*_LEVEL2 :                     5F7C - | *_LEVEL3 :                     5F82 - |
*_LEVEL4 :                     5F88 - | *_LEVEL5 :                     5F8E - |
*_LEVEL6 :                     5F94 - | *_LEVEL7 :                     5F9A - |
*_NOCOD0 :                     5F6A - | *_NOCOD1 :                     5F70 - |
*_OCR_H :                         4 - | *_OCR_L :                         5 - |
*_OVERWRITE :              24020000 - | *_PALETTE :                20004200 - |
*_SERIAL :                 FFFFFE00 - | *_SETJMPTBL :                  5F0A - |
*_SPVERR :                     5F5E - | *_SYSREG :                 20004000 - |
*_TCR :                           6 - | *_TCSR :                          1 - |
*_TIER :                          0 - | *_TOCR :                          7 - |
*_TRACE :                      5F64 - | *_TRAP00 :                     5FA0 - |
*_TRAP01 :                     5FA6 - | *_TRAP02 :                     5FAC - |
*_TRAP03 :                     5FB2 - | *_TRAP04 :                     5FB8 - |
*_TRAP05 :                     5FBE - | *_TRAP06 :                     5FC4 - |
*_TRAP07 :                     5FCA - | *_TRAP08 :                     5FD0 - |
*_TRAP09 :                     5FD6 - | *_TRAP10 :                     5FDC - |
*_TRAP11 :                     5FE2 - | *_TRAP12 :                     5FE8 - |
*_TRAP13 :                     5FEE - | *_TRAP14 :                     5FF4 - |
*_TRAP15 :                     5FFA - | *_TRPERR :                     5F58 - |
*_USERCALL0 :                  5F28 - | *_USERCALL1 :                  5F2E - |
*_USERCALL2 :                  5F34 - | *_USERCALL3 :                  5F3A - |
*_USERMODE :                   5EA6 - | *_VDPREG :                 20004100 - |
*_WAITVSYNC :                  5F10 - |  _WAITVSYNC.TABLE :            6020 C |

   1430 symbols
    394 unused symbols

 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 4 - 03/16/2024 09:22:39 AM


  Defined Macros:
  ---------------

BIOS_BRMDEL                           | BIOS_BRMDIR                          
BIOS_BRMFORMAT                        | BIOS_BRMINIT                         
BIOS_BRMREAD                          | BIOS_BRMSERCH                        
BIOS_BRMSTAT                          | BIOS_BRMVERIFY                       
BIOS_BRMWRITE                         | BIOS_CDBCHK                          
BIOS_CDBPAUSE                         | BIOS_CDBSTAT                         
BIOS_CDBTOCREAD                       | BIOS_CDBTOCWRITE                     
BIOS_CDCACK                           | BIOS_CDCREAD                         
BIOS_CDCSETMODE                       | BIOS_CDCSTART                        
BIOS_CDCSTAT                          | BIOS_CDCSTOP                         
BIOS_CDCTRN                           | BIOS_DRVINIT                         
BIOS_DRVOPEN                          | BIOS_FDRCHG                          
BIOS_FDRSET                           | BIOS_LEDSET                          
BIOS_MSCPAUSEOFF                      | BIOS_MSCPAUSEON                      
BIOS_MSCPLAY                          | BIOS_MSCPLAY1                        
BIOS_MSCPLAYR                         | BIOS_MSCPLAYT                        
BIOS_MSCSCANFF                        | BIOS_MSCSCANFR                       
BIOS_MSCSCANOFF                       | BIOS_MSCSEEK                         
BIOS_MSCSEEK1                         | BIOS_MSCSEEKT                        
BIOS_MSCSTOP                          | BIOS_ROMPAUSEOFF                     
BIOS_ROMPAUSEON                       | BIOS_ROMREAD                         
BIOS_ROMREADE                         | BIOS_ROMREADN                        
BIOS_ROMSEEK                          | BIOS_SCDINIT                         
BIOS_SCDPQ                            | BIOS_SCDPQL                          
BIOS_SCDREAD                          | BIOS_SCDSTART                        
BIOS_SCDSTAT                          | BIOS_SCDSTOP                         
BURAM                                 | CDBIOS                               
DATA_BKEND                            | DATA_BKSET                           
ENDSTRCT                              | ERREPORT                             
GEMAHEAD                              | GEMATRK                              
GINSDAC                               | GINSFM                               
GINSFM3                               | GINSNULL                             
GINSPCM                               | GINSPSG                              
GINSPSGN                              | GINSPWM                              
GSMPLDATA                             | ISO_FILE                             
ISO_SETFS                             | REPORT                               
ROMPAD                                | SCREEN_CODE                          
SDRAM_BKEND                           | SDRAM_BKSET                          
SET_DBANKS                            | STRCT                                
VDP_SHOWME                            |

     79 macros

 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 5 - 03/16/2024 09:22:39 AM


  Defined Functions:
  ------------------

MAP_SIZE                              | CELL_SIZE                            
CELL_VRAM                             | LOCATE                               

 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 6 - 03/16/2024 09:22:39 AM


  Code Pages:
  ----------

STANDARD (0 changed characters)

1 code page

0.17 seconds assembly time

  14489 lines source file
  15841 lines incl. macro expansions
      4 passes
      0 errors
      0 warnings
